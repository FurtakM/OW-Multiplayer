// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 386: LD_ADDR_EXP 36
 390: PUSH
 391: LD_EXP 31
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: EMPTY
 400: LIST
 401: DIFF
 402: PUSH
 403: LD_INT 1
 405: GREATER
 406: ST_TO_ADDR
// if Multiplayer then
 407: LD_OWVAR 4
 411: IFFALSE 613
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 413: LD_ADDR_EXP 1
 417: PUSH
 418: LD_INT 0
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 426: LD_ADDR_EXP 2
 430: PUSH
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 439: LD_ADDR_EXP 3
 443: PUSH
 444: LD_INT 2
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 452: LD_ADDR_EXP 4
 456: PUSH
 457: LD_INT 3
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 465: LD_ADDR_EXP 5
 469: PUSH
 470: LD_INT 4
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 478: LD_ADDR_EXP 6
 482: PUSH
 483: LD_INT 5
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 491: LD_ADDR_EXP 7
 495: PUSH
 496: LD_INT 1
 498: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 499: LD_ADDR_EXP 8
 503: PUSH
 504: LD_INT 10
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 512: LD_ADDR_EXP 9
 516: PUSH
 517: LD_INT 11
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 525: LD_ADDR_EXP 10
 529: PUSH
 530: LD_INT 12
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 538: LD_ADDR_EXP 11
 542: PUSH
 543: LD_INT 13
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 551: LD_ADDR_EXP 12
 555: PUSH
 556: LD_INT 14
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 564: LD_ADDR_EXP 13
 568: PUSH
 569: LD_INT 17
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 577: LD_ADDR_EXP 14
 581: PUSH
 582: LD_INT 20
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 590: LD_ADDR_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_win_rules = 0 ;
 603: LD_ADDR_EXP 30
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// end else
 611: GO 745
// begin Randomize ;
 613: CALL_OW 10
// def_base_level := 2 ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 2
 624: ST_TO_ADDR
// def_amount_of_people := 0 ;
 625: LD_ADDR_EXP 2
 629: PUSH
 630: LD_INT 0
 632: ST_TO_ADDR
// def_skill_level := 1 ;
 633: LD_ADDR_EXP 3
 637: PUSH
 638: LD_INT 1
 640: ST_TO_ADDR
// def_starting_resources := 2 ;
 641: LD_ADDR_EXP 4
 645: PUSH
 646: LD_INT 2
 648: ST_TO_ADDR
// def_shipments_density := 1 ;
 649: LD_ADDR_EXP 5
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 657: LD_ADDR_EXP 6
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 665: LD_ADDR_EXP 7
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// def_shared_vision := 1 ;
 673: LD_ADDR_EXP 8
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_morale_flags := 1 ;
 681: LD_ADDR_EXP 9
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_siberite_detection := 1 ;
 689: LD_ADDR_EXP 10
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_people_respawning := 2 ;
 697: LD_ADDR_EXP 11
 701: PUSH
 702: LD_INT 2
 704: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 705: LD_ADDR_EXP 12
 709: PUSH
 710: LD_INT 3
 712: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 713: LD_ADDR_EXP 13
 717: PUSH
 718: LD_INT 0
 720: ST_TO_ADDR
// def_builduptime := 1 ;
 721: LD_ADDR_EXP 14
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// tech_level = 4 ;
 729: LD_ADDR_VAR 0 3
 733: PUSH
 734: LD_INT 4
 736: ST_TO_ADDR
// def_win_rules = 0 ;
 737: LD_ADDR_EXP 30
 741: PUSH
 742: LD_INT 0
 744: ST_TO_ADDR
// end ; if isSGUI then
 745: LD_OWVAR 83
 749: IFFALSE 757
// setMpTechs ( ) else
 751: CALL 10063 0 0
 755: GO 770
// SetMpTechLevel ( tech_level + 1 ) ;
 757: LD_VAR 0 3
 761: PUSH
 762: LD_INT 1
 764: PLUS
 765: PPUSH
 766: CALL 10210 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 770: LD_ADDR_EXP 17
 774: PUSH
 775: LD_INT 0
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 1
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: PUSH
 789: LD_EXP 1
 793: PUSH
 794: LD_INT 1
 796: PLUS
 797: ARRAY
 798: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 799: LD_ADDR_EXP 18
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_EXP 1
 822: PUSH
 823: LD_INT 1
 825: PLUS
 826: ARRAY
 827: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 828: LD_ADDR_EXP 19
 832: PUSH
 833: LD_INT 9
 835: PUSH
 836: LD_INT 12
 838: PUSH
 839: LD_INT 15
 841: PUSH
 842: LD_INT 24
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: PUSH
 851: LD_EXP 2
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: ARRAY
 860: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 861: LD_ADDR_EXP 20
 865: PUSH
 866: LD_INT 2
 868: PUSH
 869: LD_INT 3
 871: PUSH
 872: LD_INT 4
 874: PUSH
 875: LD_INT 5
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_EXP 3
 888: PUSH
 889: LD_INT 1
 891: PLUS
 892: ARRAY
 893: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 894: LD_ADDR_EXP 22
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 30
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: PUSH
 927: LD_INT 50
 929: PUSH
 930: LD_INT 20
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 80
 943: PUSH
 944: LD_INT 40
 946: PUSH
 947: LD_INT 20
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: PUSH
 961: LD_EXP 4
 965: PUSH
 966: LD_INT 1
 968: PLUS
 969: ARRAY
 970: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 971: LD_ADDR_EXP 21
 975: PUSH
 976: LD_INT 10
 978: PUSH
 979: EMPTY
 980: LIST
 981: PUSH
 982: LD_INT 7
 984: PUSH
 985: LD_INT 14
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 6
 994: PUSH
 995: LD_INT 12
 997: PUSH
 998: LD_INT 18
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_INT 5
1008: PUSH
1009: LD_INT 10
1011: PUSH
1012: LD_INT 15
1014: PUSH
1015: LD_INT 20
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: PUSH
1030: LD_EXP 4
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: ARRAY
1039: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 ] [ def_shipments_density + 1 ] ;
1040: LD_ADDR_EXP 23
1044: PUSH
1045: LD_INT 150
1047: PUSH
1048: LD_INT 125
1050: PUSH
1051: LD_INT 100
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_EXP 5
1063: PUSH
1064: LD_INT 1
1066: PLUS
1067: ARRAY
1068: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1069: LD_ADDR_EXP 27
1073: PUSH
1074: LD_INT 0
1076: PUSH
1077: LD_INT 10500
1079: PUSH
1080: LD_INT 6300
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_EXP 11
1092: PUSH
1093: LD_INT 1
1095: PLUS
1096: ARRAY
1097: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1098: LD_ADDR_EXP 28
1102: PUSH
1103: LD_INT 0
1105: PUSH
1106: LD_INT 31500
1108: PUSH
1109: LD_INT 10500
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: LD_EXP 11
1121: PUSH
1122: LD_INT 1
1124: PLUS
1125: ARRAY
1126: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1127: LD_ADDR_EXP 25
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: LD_INT 1
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: PUSH
1150: LD_EXP 12
1154: PUSH
1155: LD_INT 1
1157: PLUS
1158: ARRAY
1159: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1160: LD_ADDR_EXP 24
1164: PUSH
1165: LD_INT 1
1167: NEG
1168: PUSH
1169: LD_INT 350
1171: PUSH
1172: LD_INT 700
1174: PUSH
1175: LD_INT 1400
1177: PUSH
1178: LD_INT 0
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: LD_EXP 9
1192: PUSH
1193: LD_INT 1
1195: PLUS
1196: ARRAY
1197: ST_TO_ADDR
// battle_flags_id = [ ] ;
1198: LD_ADDR_EXP 44
1202: PUSH
1203: EMPTY
1204: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1205: LD_ADDR_EXP 29
1209: PUSH
1210: LD_INT 0
1212: PUSH
1213: LD_INT 1
1215: PUSH
1216: LD_INT 63000
1218: PUSH
1219: LD_INT 126000
1221: PUSH
1222: LD_INT 189000
1224: PUSH
1225: LD_INT 252000
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: PUSH
1236: LD_EXP 13
1240: PUSH
1241: LD_INT 1
1243: PLUS
1244: ARRAY
1245: ST_TO_ADDR
// end ;
1246: LD_VAR 0 1
1250: RET
// function init_map ; var i , j ; begin
1251: LD_INT 0
1253: PPUSH
1254: PPUSH
1255: PPUSH
// normal_oil_deposits_locations := [ [ 17 , 4 ] , [ 72 , 5 ] , [ 157 , 22 ] , [ 205 , 111 ] , [ 221 , 195 ] , [ 169 , 196 ] , [ 93 , 177 ] , [ 52 , 92 ] ] ;
1256: LD_ADDR_EXP 40
1260: PUSH
1261: LD_INT 17
1263: PUSH
1264: LD_INT 4
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 72
1273: PUSH
1274: LD_INT 5
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 157
1283: PUSH
1284: LD_INT 22
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 205
1293: PUSH
1294: LD_INT 111
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 221
1303: PUSH
1304: LD_INT 195
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 169
1313: PUSH
1314: LD_INT 196
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 93
1323: PUSH
1324: LD_INT 177
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 52
1333: PUSH
1334: LD_INT 92
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 17 , 4 ] , [ 16 , 23 ] ] , [ [ 72 , 5 ] , [ 88 , 28 ] ] , [ [ 157 , 22 ] , [ 133 , 12 ] ] , [ [ 205 , 111 ] , [ 200 , 95 ] ] , [ [ 221 , 195 ] , [ 249 , 190 ] ] , [ [ 169 , 196 ] , [ 180 , 197 ] ] , [ [ 93 , 177 ] , [ 114 , 194 ] ] , [ [ 52 , 92 ] , [ 58 , 107 ] ] ] ;
1351: LD_ADDR_EXP 41
1355: PUSH
1356: LD_INT 17
1358: PUSH
1359: LD_INT 4
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 16
1368: PUSH
1369: LD_INT 23
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: PUSH
1380: LD_INT 72
1382: PUSH
1383: LD_INT 5
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 88
1392: PUSH
1393: LD_INT 28
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 157
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 133
1416: PUSH
1417: LD_INT 12
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 205
1430: PUSH
1431: LD_INT 111
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: PUSH
1438: LD_INT 200
1440: PUSH
1441: LD_INT 95
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 221
1454: PUSH
1455: LD_INT 195
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 249
1464: PUSH
1465: LD_INT 190
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 169
1478: PUSH
1479: LD_INT 196
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 180
1488: PUSH
1489: LD_INT 197
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 93
1502: PUSH
1503: LD_INT 177
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 114
1512: PUSH
1513: LD_INT 194
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 52
1526: PUSH
1527: LD_INT 92
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 58
1536: PUSH
1537: LD_INT 107
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 12 , 12 ] , [ 99 , 19 ] , [ 139 , 5 ] , [ 207 , 100 ] , [ 244 , 181 ] , [ 183 , 196 ] , [ 117 , 195 ] , [ 54 , 104 ] ] ;
1558: LD_ADDR_EXP 42
1562: PUSH
1563: LD_INT 12
1565: PUSH
1566: LD_INT 12
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 99
1575: PUSH
1576: LD_INT 19
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 139
1585: PUSH
1586: LD_INT 5
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 207
1595: PUSH
1596: LD_INT 100
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 244
1605: PUSH
1606: LD_INT 181
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 183
1615: PUSH
1616: LD_INT 196
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 117
1625: PUSH
1626: LD_INT 195
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 54
1635: PUSH
1636: LD_INT 104
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1653: LD_ADDR_EXP 43
1657: PUSH
1658: EMPTY
1659: ST_TO_ADDR
// depot_def := [ [ 32 , 24 , 2 ] , [ 87 , 18 , 3 ] , [ 146 , 28 , 3 ] , [ 188 , 103 , 4 ] , [ 224 , 180 , 5 ] , [ 168 , 180 , 0 ] , [ 105 , 170 , 0 ] , [ 71 , 102 , 1 ] ] ;
1660: LD_ADDR_EXP 37
1664: PUSH
1665: LD_INT 32
1667: PUSH
1668: LD_INT 24
1670: PUSH
1671: LD_INT 2
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: LD_INT 87
1681: PUSH
1682: LD_INT 18
1684: PUSH
1685: LD_INT 3
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_INT 146
1695: PUSH
1696: LD_INT 28
1698: PUSH
1699: LD_INT 3
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 188
1709: PUSH
1710: LD_INT 103
1712: PUSH
1713: LD_INT 4
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 224
1723: PUSH
1724: LD_INT 180
1726: PUSH
1727: LD_INT 5
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 168
1737: PUSH
1738: LD_INT 180
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 105
1751: PUSH
1752: LD_INT 170
1754: PUSH
1755: LD_INT 0
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 71
1765: PUSH
1766: LD_INT 102
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: ST_TO_ADDR
// for i in depot_def do
1787: LD_ADDR_VAR 0 2
1791: PUSH
1792: LD_EXP 37
1796: PUSH
1797: FOR_IN
1798: IFFALSE 1874
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1800: LD_ADDR_EXP 39
1804: PUSH
1805: LD_EXP 39
1809: PUSH
1810: LD_VAR 0 2
1814: PUSH
1815: LD_INT 1
1817: ARRAY
1818: PPUSH
1819: LD_VAR 0 2
1823: PUSH
1824: LD_INT 3
1826: ARRAY
1827: PPUSH
1828: LD_INT 4
1830: NEG
1831: PPUSH
1832: CALL_OW 272
1836: PUSH
1837: LD_VAR 0 2
1841: PUSH
1842: LD_INT 2
1844: ARRAY
1845: PPUSH
1846: LD_VAR 0 2
1850: PUSH
1851: LD_INT 3
1853: ARRAY
1854: PPUSH
1855: LD_INT 4
1857: NEG
1858: PPUSH
1859: CALL_OW 273
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: ADD
1871: ST_TO_ADDR
1872: GO 1797
1874: POP
1875: POP
// breastworks_def := [ [ [ 50 , 40 , 5 ] , [ 47 , 17 , 4 ] , [ 29 , 39 , 0 ] ] , [ [ 107 , 27 , 4 ] , [ 67 , 10 , 1 ] , [ 91 , 35 , 0 ] ] , [ [ 165 , 44 , 5 ] , [ 123 , 16 , 2 ] , [ 141 , 39 , 0 ] ] , [ [ 179 , 85 , 3 ] , [ 172 , 102 , 1 ] , [ 196 , 118 , 5 ] ] , [ [ 210 , 182 , 1 ] , [ 226 , 164 , 3 ] , [ 209 , 164 , 2 ] ] , [ [ 156 , 183 , 1 ] , [ 184 , 184 , 4 ] , [ 161 , 166 , 3 ] ] , [ [ 86 , 156 , 2 ] , [ 124 , 180 , 4 ] , [ 106 , 155 , 3 ] ] , [ [ 87 , 102 , 4 ] , [ 63 , 83 , 3 ] , [ 79 , 120 , 0 ] ] ] ;
1876: LD_ADDR_EXP 38
1880: PUSH
1881: LD_INT 50
1883: PUSH
1884: LD_INT 40
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_INT 47
1897: PUSH
1898: LD_INT 17
1900: PUSH
1901: LD_INT 4
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 29
1911: PUSH
1912: LD_INT 39
1914: PUSH
1915: LD_INT 0
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 107
1930: PUSH
1931: LD_INT 27
1933: PUSH
1934: LD_INT 4
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 67
1944: PUSH
1945: LD_INT 10
1947: PUSH
1948: LD_INT 1
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 91
1958: PUSH
1959: LD_INT 35
1961: PUSH
1962: LD_INT 0
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 165
1977: PUSH
1978: LD_INT 44
1980: PUSH
1981: LD_INT 5
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 123
1991: PUSH
1992: LD_INT 16
1994: PUSH
1995: LD_INT 2
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 141
2005: PUSH
2006: LD_INT 39
2008: PUSH
2009: LD_INT 0
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 179
2024: PUSH
2025: LD_INT 85
2027: PUSH
2028: LD_INT 3
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 172
2038: PUSH
2039: LD_INT 102
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_INT 196
2052: PUSH
2053: LD_INT 118
2055: PUSH
2056: LD_INT 5
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 210
2071: PUSH
2072: LD_INT 182
2074: PUSH
2075: LD_INT 1
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 226
2085: PUSH
2086: LD_INT 164
2088: PUSH
2089: LD_INT 3
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 209
2099: PUSH
2100: LD_INT 164
2102: PUSH
2103: LD_INT 2
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 156
2118: PUSH
2119: LD_INT 183
2121: PUSH
2122: LD_INT 1
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 184
2132: PUSH
2133: LD_INT 184
2135: PUSH
2136: LD_INT 4
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 161
2146: PUSH
2147: LD_INT 166
2149: PUSH
2150: LD_INT 3
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 86
2165: PUSH
2166: LD_INT 156
2168: PUSH
2169: LD_INT 2
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 124
2179: PUSH
2180: LD_INT 180
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 106
2193: PUSH
2194: LD_INT 155
2196: PUSH
2197: LD_INT 3
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 87
2212: PUSH
2213: LD_INT 102
2215: PUSH
2216: LD_INT 4
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 63
2226: PUSH
2227: LD_INT 83
2229: PUSH
2230: LD_INT 3
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 79
2240: PUSH
2241: LD_INT 120
2243: PUSH
2244: LD_INT 0
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: LIST
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: ST_TO_ADDR
// for i = 1 to Side_Positions do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_EXP 34
2281: PUSH
2282: FOR_TO
2283: IFFALSE 2413
// begin if not Side_Positions [ i ] then
2285: LD_EXP 34
2289: PUSH
2290: LD_VAR 0 2
2294: ARRAY
2295: NOT
2296: IFFALSE 2300
// continue ;
2298: GO 2282
// if def_extra_oil_deposits then
2300: LD_EXP 6
2304: IFFALSE 2362
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_EXP 41
2315: PUSH
2316: LD_EXP 34
2320: PUSH
2321: LD_VAR 0 2
2325: ARRAY
2326: ARRAY
2327: PUSH
2328: FOR_IN
2329: IFFALSE 2358
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2331: LD_VAR 0 3
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_VAR 0 3
2344: PUSH
2345: LD_INT 2
2347: ARRAY
2348: PPUSH
2349: LD_INT 2
2351: PPUSH
2352: CALL_OW 62
2356: GO 2328
2358: POP
2359: POP
2360: GO 2411
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2362: LD_EXP 40
2366: PUSH
2367: LD_EXP 34
2371: PUSH
2372: LD_VAR 0 2
2376: ARRAY
2377: ARRAY
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PPUSH
2383: LD_EXP 40
2387: PUSH
2388: LD_EXP 34
2392: PUSH
2393: LD_VAR 0 2
2397: ARRAY
2398: ARRAY
2399: PUSH
2400: LD_INT 2
2402: ARRAY
2403: PPUSH
2404: LD_INT 2
2406: PPUSH
2407: CALL_OW 62
// end ;
2411: GO 2282
2413: POP
2414: POP
// if def_extra_sib_deposits then
2415: LD_EXP 7
2419: IFFALSE 2573
// for i = 1 to Side_Positions do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_EXP 34
2435: PUSH
2436: FOR_TO
2437: IFFALSE 2571
// begin if not Side_Positions [ i ] then
2439: LD_EXP 34
2443: PUSH
2444: LD_VAR 0 2
2448: ARRAY
2449: NOT
2450: IFFALSE 2454
// continue ;
2452: GO 2436
// if def_extra_sib_deposits = 2 then
2454: LD_EXP 7
2458: PUSH
2459: LD_INT 2
2461: EQUAL
2462: IFFALSE 2520
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2464: LD_ADDR_VAR 0 3
2468: PUSH
2469: LD_EXP 43
2473: PUSH
2474: LD_EXP 34
2478: PUSH
2479: LD_VAR 0 2
2483: ARRAY
2484: ARRAY
2485: PUSH
2486: FOR_IN
2487: IFFALSE 2516
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2489: LD_VAR 0 3
2493: PUSH
2494: LD_INT 1
2496: ARRAY
2497: PPUSH
2498: LD_VAR 0 3
2502: PUSH
2503: LD_INT 2
2505: ARRAY
2506: PPUSH
2507: LD_INT 3
2509: PPUSH
2510: CALL_OW 62
2514: GO 2486
2516: POP
2517: POP
2518: GO 2569
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2520: LD_EXP 42
2524: PUSH
2525: LD_EXP 34
2529: PUSH
2530: LD_VAR 0 2
2534: ARRAY
2535: ARRAY
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: LD_EXP 42
2545: PUSH
2546: LD_EXP 34
2550: PUSH
2551: LD_VAR 0 2
2555: ARRAY
2556: ARRAY
2557: PUSH
2558: LD_INT 2
2560: ARRAY
2561: PPUSH
2562: LD_INT 3
2564: PPUSH
2565: CALL_OW 62
// end ;
2569: GO 2436
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
2582: PPUSH
// if not Team_Game then
2583: LD_EXP 36
2587: NOT
2588: IFFALSE 2686
// begin for i = 1 to 8 do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: DOUBLE
2596: LD_INT 1
2598: DEC
2599: ST_TO_ADDR
2600: LD_INT 8
2602: PUSH
2603: FOR_TO
2604: IFFALSE 2682
// for j = 1 to 8 do
2606: LD_ADDR_VAR 0 3
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 8
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2678
// if i <> j then
2622: LD_VAR 0 2
2626: PUSH
2627: LD_VAR 0 3
2631: NONEQUAL
2632: IFFALSE 2656
// SetAttitude ( i , j , att_neutral , true ) else
2634: LD_VAR 0 2
2638: PPUSH
2639: LD_VAR 0 3
2643: PPUSH
2644: LD_INT 0
2646: PPUSH
2647: LD_INT 1
2649: PPUSH
2650: CALL_OW 80
2654: GO 2676
// SetAttitude ( i , j , att_friend , true ) ;
2656: LD_VAR 0 2
2660: PPUSH
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 1
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 80
2676: GO 2619
2678: POP
2679: POP
2680: GO 2603
2682: POP
2683: POP
// end else
2684: GO 2861
// begin if def_shared_vision then
2686: LD_EXP 8
2690: IFFALSE 2755
// begin for i in Teams do
2692: LD_ADDR_VAR 0 2
2696: PUSH
2697: LD_EXP 32
2701: PUSH
2702: FOR_IN
2703: IFFALSE 2753
// for j = 2 to i do
2705: LD_ADDR_VAR 0 3
2709: PUSH
2710: DOUBLE
2711: LD_INT 2
2713: DEC
2714: ST_TO_ADDR
2715: LD_VAR 0 2
2719: PUSH
2720: FOR_TO
2721: IFFALSE 2749
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2723: LD_VAR 0 2
2727: PUSH
2728: LD_VAR 0 3
2732: ARRAY
2733: PPUSH
2734: LD_VAR 0 2
2738: PUSH
2739: LD_INT 1
2741: ARRAY
2742: PPUSH
2743: CALL_OW 343
2747: GO 2720
2749: POP
2750: POP
2751: GO 2702
2753: POP
2754: POP
// end ; for i = 1 to 8 do
2755: LD_ADDR_VAR 0 2
2759: PUSH
2760: DOUBLE
2761: LD_INT 1
2763: DEC
2764: ST_TO_ADDR
2765: LD_INT 8
2767: PUSH
2768: FOR_TO
2769: IFFALSE 2859
// for j = 1 to 8 do
2771: LD_ADDR_VAR 0 3
2775: PUSH
2776: DOUBLE
2777: LD_INT 1
2779: DEC
2780: ST_TO_ADDR
2781: LD_INT 8
2783: PUSH
2784: FOR_TO
2785: IFFALSE 2855
// if Side_Teams [ i ] = Side_Teams [ j ] then
2787: LD_EXP 31
2791: PUSH
2792: LD_VAR 0 2
2796: ARRAY
2797: PUSH
2798: LD_EXP 31
2802: PUSH
2803: LD_VAR 0 3
2807: ARRAY
2808: EQUAL
2809: IFFALSE 2833
// SetAttitude ( i , j , att_friend , true ) else
2811: LD_VAR 0 2
2815: PPUSH
2816: LD_VAR 0 3
2820: PPUSH
2821: LD_INT 1
2823: PPUSH
2824: LD_INT 1
2826: PPUSH
2827: CALL_OW 80
2831: GO 2853
// SetAttitude ( i , j , att_enemy , true ) ;
2833: LD_VAR 0 2
2837: PPUSH
2838: LD_VAR 0 3
2842: PPUSH
2843: LD_INT 2
2845: PPUSH
2846: LD_INT 1
2848: PPUSH
2849: CALL_OW 80
2853: GO 2784
2855: POP
2856: POP
2857: GO 2768
2859: POP
2860: POP
// end ; end ;
2861: LD_VAR 0 1
2865: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2866: LD_INT 0
2868: PPUSH
2869: PPUSH
2870: PPUSH
2871: PPUSH
// result := [ ] ;
2872: LD_ADDR_VAR 0 7
2876: PUSH
2877: EMPTY
2878: ST_TO_ADDR
// for i := 1 to count do
2879: LD_ADDR_VAR 0 8
2883: PUSH
2884: DOUBLE
2885: LD_INT 1
2887: DEC
2888: ST_TO_ADDR
2889: LD_VAR 0 1
2893: PUSH
2894: FOR_TO
2895: IFFALSE 3313
// begin uc_direction := Rand ( 0 , 5 ) ;
2897: LD_ADDR_OWVAR 24
2901: PUSH
2902: LD_INT 0
2904: PPUSH
2905: LD_INT 5
2907: PPUSH
2908: CALL_OW 12
2912: ST_TO_ADDR
// if commander then
2913: LD_LOC 1
2917: IFFALSE 3026
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2919: LD_ADDR_OWVAR 26
2923: PUSH
2924: LD_OWVAR 19
2928: PUSH
2929: LD_OWVAR 20
2933: ARRAY
2934: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 2
2940: PPUSH
2941: CALL_OW 12
2945: PPUSH
2946: LD_VAR 0 2
2950: PPUSH
2951: LD_EXP 20
2955: PUSH
2956: LD_INT 2
2958: PLUS
2959: PPUSH
2960: CALL_OW 380
// hc_importance := 105 ;
2964: LD_ADDR_OWVAR 32
2968: PUSH
2969: LD_INT 105
2971: ST_TO_ADDR
// commander := false ;
2972: LD_ADDR_LOC 1
2976: PUSH
2977: LD_INT 0
2979: ST_TO_ADDR
// if Multiplayer then
2980: LD_OWVAR 4
2984: IFFALSE 3024
// begin hc_gallery := MULTIAVATARS ;
2986: LD_ADDR_OWVAR 33
2990: PUSH
2991: LD_STRING MULTIAVATARS
2993: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2994: LD_ADDR_OWVAR 34
2998: PUSH
2999: LD_OWVAR 20
3003: PPUSH
3004: CALL_OW 525
3008: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3009: LD_ADDR_OWVAR 27
3013: PUSH
3014: LD_OWVAR 20
3018: PPUSH
3019: CALL_OW 526
3023: ST_TO_ADDR
// end ; end else
3024: GO 3089
// begin hc_name :=  ;
3026: LD_ADDR_OWVAR 26
3030: PUSH
3031: LD_STRING 
3033: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3034: LD_INT 1
3036: PPUSH
3037: LD_INT 2
3039: PPUSH
3040: CALL_OW 12
3044: PPUSH
3045: LD_VAR 0 2
3049: PPUSH
3050: LD_EXP 20
3054: PPUSH
3055: CALL_OW 380
// hc_importance := 0 ;
3059: LD_ADDR_OWVAR 32
3063: PUSH
3064: LD_INT 0
3066: ST_TO_ADDR
// if Multiplayer then
3067: LD_OWVAR 4
3071: IFFALSE 3089
// begin hc_gallery :=  ;
3073: LD_ADDR_OWVAR 33
3077: PUSH
3078: LD_STRING 
3080: ST_TO_ADDR
// hc_face_number := 0 ;
3081: LD_ADDR_OWVAR 34
3085: PUSH
3086: LD_INT 0
3088: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3089: LD_ADDR_VAR 0 10
3093: PUSH
3094: CALL_OW 44
3098: ST_TO_ADDR
// if global_defined then
3099: LD_LOC 3
3103: IFFALSE 3243
// begin if ( cl = class_soldier ) then
3105: LD_VAR 0 2
3109: PUSH
3110: LD_INT 1
3112: EQUAL
3113: IFFALSE 3133
// j := i + soldiers_created else
3115: LD_ADDR_VAR 0 9
3119: PUSH
3120: LD_VAR 0 8
3124: PUSH
3125: LD_LOC 4
3129: PLUS
3130: ST_TO_ADDR
3131: GO 3143
// j := i ;
3133: LD_ADDR_VAR 0 9
3137: PUSH
3138: LD_VAR 0 8
3142: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3143: LD_LOC 2
3147: PUSH
3148: LD_VAR 0 2
3152: ARRAY
3153: PUSH
3154: LD_VAR 0 9
3158: ARRAY
3159: PPUSH
3160: LD_VAR 0 10
3164: PPUSH
3165: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3169: LD_VAR 0 10
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_LOC 2
3181: PUSH
3182: LD_VAR 0 2
3186: ARRAY
3187: PUSH
3188: LD_VAR 0 9
3192: ARRAY
3193: PPUSH
3194: LD_INT 2
3196: PPUSH
3197: CALL_OW 260
3201: PPUSH
3202: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3206: LD_VAR 0 10
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: LD_LOC 2
3218: PUSH
3219: LD_VAR 0 2
3223: ARRAY
3224: PUSH
3225: LD_VAR 0 9
3229: ARRAY
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL_OW 260
3238: PPUSH
3239: CALL_OW 239
// end ; if building then
3243: LD_VAR 0 6
3247: IFFALSE 3265
// PlaceHumanInUnit ( un , building ) else
3249: LD_VAR 0 10
3253: PPUSH
3254: LD_VAR 0 6
3258: PPUSH
3259: CALL_OW 52
3263: GO 3292
// PlaceUnitXYR ( un , x , y , r , false ) ;
3265: LD_VAR 0 10
3269: PPUSH
3270: LD_VAR 0 3
3274: PPUSH
3275: LD_VAR 0 4
3279: PPUSH
3280: LD_VAR 0 5
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL_OW 50
// result := result ^ [ un ] ;
3292: LD_ADDR_VAR 0 7
3296: PUSH
3297: LD_VAR 0 7
3301: PUSH
3302: LD_VAR 0 10
3306: PUSH
3307: EMPTY
3308: LIST
3309: ADD
3310: ST_TO_ADDR
// end ;
3311: GO 2894
3313: POP
3314: POP
// if not global_defined then
3315: LD_LOC 3
3319: NOT
3320: IFFALSE 3398
// if ( global_units >= cl ) then
3322: LD_LOC 2
3326: PUSH
3327: LD_VAR 0 2
3331: GREATEREQUAL
3332: IFFALSE 3373
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3334: LD_ADDR_LOC 2
3338: PUSH
3339: LD_LOC 2
3343: PPUSH
3344: LD_VAR 0 2
3348: PPUSH
3349: LD_LOC 2
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PUSH
3360: LD_VAR 0 7
3364: ADD
3365: PPUSH
3366: CALL_OW 1
3370: ST_TO_ADDR
3371: GO 3398
// global_units := Replace ( global_units , cl , result ) ;
3373: LD_ADDR_LOC 2
3377: PUSH
3378: LD_LOC 2
3382: PPUSH
3383: LD_VAR 0 2
3387: PPUSH
3388: LD_VAR 0 7
3392: PPUSH
3393: CALL_OW 1
3397: ST_TO_ADDR
// if commander then
3398: LD_LOC 1
3402: IFFALSE 3449
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3404: LD_ADDR_EXP 45
3408: PUSH
3409: LD_EXP 45
3413: PPUSH
3414: LD_OWVAR 20
3418: PPUSH
3419: LD_EXP 45
3423: PUSH
3424: LD_OWVAR 20
3428: ARRAY
3429: PUSH
3430: LD_VAR 0 10
3434: ADD
3435: PPUSH
3436: CALL_OW 1
3440: ST_TO_ADDR
// commander := false ;
3441: LD_ADDR_LOC 1
3445: PUSH
3446: LD_INT 0
3448: ST_TO_ADDR
// end ; end ;
3449: LD_VAR 0 7
3453: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
// if side in [ 0 , 9 ] then
3465: LD_VAR 0 1
3469: PUSH
3470: LD_INT 0
3472: PUSH
3473: LD_INT 9
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: IN
3480: IFFALSE 3484
// exit ;
3482: GO 4534
// pos := Side_Positions [ side ] ;
3484: LD_ADDR_VAR 0 3
3488: PUSH
3489: LD_EXP 34
3493: PUSH
3494: LD_VAR 0 1
3498: ARRAY
3499: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3500: LD_ADDR_OWVAR 21
3504: PUSH
3505: LD_EXP 35
3509: PUSH
3510: LD_VAR 0 1
3514: ARRAY
3515: ST_TO_ADDR
// uc_side := side ;
3516: LD_ADDR_OWVAR 20
3520: PUSH
3521: LD_VAR 0 1
3525: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3526: LD_ADDR_VAR 0 4
3530: PUSH
3531: LD_EXP 37
3535: PUSH
3536: LD_VAR 0 3
3540: ARRAY
3541: PUSH
3542: LD_INT 1
3544: ARRAY
3545: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3546: LD_ADDR_VAR 0 5
3550: PUSH
3551: LD_EXP 37
3555: PUSH
3556: LD_VAR 0 3
3560: ARRAY
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3566: LD_ADDR_VAR 0 6
3570: PUSH
3571: LD_EXP 37
3575: PUSH
3576: LD_VAR 0 3
3580: ARRAY
3581: PUSH
3582: LD_INT 3
3584: ARRAY
3585: ST_TO_ADDR
// if is_depot then
3586: LD_EXP 17
3590: IFFALSE 3723
// begin bc_type = b_depot ;
3592: LD_ADDR_OWVAR 42
3596: PUSH
3597: LD_INT 0
3599: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3600: LD_ADDR_VAR 0 10
3604: PUSH
3605: LD_VAR 0 4
3609: PPUSH
3610: LD_VAR 0 5
3614: PPUSH
3615: LD_VAR 0 6
3619: PPUSH
3620: CALL_OW 47
3624: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3625: LD_VAR 0 10
3629: PPUSH
3630: LD_STRING @
3632: PUSH
3633: LD_VAR 0 1
3637: STR
3638: PPUSH
3639: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3643: LD_VAR 0 10
3647: PPUSH
3648: CALL_OW 274
3652: PPUSH
3653: LD_INT 1
3655: PPUSH
3656: LD_EXP 22
3660: PUSH
3661: LD_INT 1
3663: ARRAY
3664: PPUSH
3665: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3669: LD_VAR 0 10
3673: PPUSH
3674: CALL_OW 274
3678: PPUSH
3679: LD_INT 2
3681: PPUSH
3682: LD_EXP 22
3686: PUSH
3687: LD_INT 2
3689: ARRAY
3690: PPUSH
3691: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3695: LD_VAR 0 10
3699: PPUSH
3700: CALL_OW 274
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_EXP 22
3712: PUSH
3713: LD_INT 3
3715: ARRAY
3716: PPUSH
3717: CALL_OW 277
// end else
3721: GO 3867
// begin for i := 1 to 3 do
3723: LD_ADDR_VAR 0 7
3727: PUSH
3728: DOUBLE
3729: LD_INT 1
3731: DEC
3732: ST_TO_ADDR
3733: LD_INT 3
3735: PUSH
3736: FOR_TO
3737: IFFALSE 3865
// begin r := starting_resources [ i ] ;
3739: LD_ADDR_VAR 0 8
3743: PUSH
3744: LD_EXP 22
3748: PUSH
3749: LD_VAR 0 7
3753: ARRAY
3754: ST_TO_ADDR
// while r >= 10 do
3755: LD_VAR 0 8
3759: PUSH
3760: LD_INT 10
3762: GREATEREQUAL
3763: IFFALSE 3863
// if r > 50 then
3765: LD_VAR 0 8
3769: PUSH
3770: LD_INT 50
3772: GREATER
3773: IFFALSE 3819
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3775: LD_VAR 0 7
3779: PPUSH
3780: LD_INT 5
3782: PPUSH
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_VAR 0 5
3792: PPUSH
3793: LD_INT 4
3795: PPUSH
3796: LD_INT 0
3798: PPUSH
3799: CALL_OW 60
// r := r - 50 ;
3803: LD_ADDR_VAR 0 8
3807: PUSH
3808: LD_VAR 0 8
3812: PUSH
3813: LD_INT 50
3815: MINUS
3816: ST_TO_ADDR
// end else
3817: GO 3861
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3819: LD_VAR 0 7
3823: PPUSH
3824: LD_VAR 0 8
3828: PUSH
3829: LD_INT 10
3831: DIV
3832: PPUSH
3833: LD_VAR 0 4
3837: PPUSH
3838: LD_VAR 0 5
3842: PPUSH
3843: LD_INT 4
3845: PPUSH
3846: LD_INT 0
3848: PPUSH
3849: CALL_OW 60
// r := 0 ;
3853: LD_ADDR_VAR 0 8
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// end ;
3861: GO 3755
// end ;
3863: GO 3736
3865: POP
3866: POP
// end ; for r in starting_crates do
3867: LD_ADDR_VAR 0 8
3871: PUSH
3872: LD_EXP 21
3876: PUSH
3877: FOR_IN
3878: IFFALSE 3910
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3880: LD_INT 1
3882: PPUSH
3883: LD_INT 5
3885: PPUSH
3886: LD_VAR 0 4
3890: PPUSH
3891: LD_VAR 0 5
3895: PPUSH
3896: LD_VAR 0 8
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL_OW 60
3908: GO 3877
3910: POP
3911: POP
// if def_morale_flags then
3912: LD_EXP 9
3916: IFFALSE 4055
// begin x := start_def [ pos ] [ 1 ] ;
3918: LD_ADDR_VAR 0 4
3922: PUSH
3923: LD_EXP 39
3927: PUSH
3928: LD_VAR 0 3
3932: ARRAY
3933: PUSH
3934: LD_INT 1
3936: ARRAY
3937: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3938: LD_ADDR_VAR 0 5
3942: PUSH
3943: LD_EXP 39
3947: PUSH
3948: LD_VAR 0 3
3952: ARRAY
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3958: LD_VAR 0 4
3962: PPUSH
3963: LD_VAR 0 5
3967: PPUSH
3968: LD_INT 12
3970: PPUSH
3971: LD_INT 2
3973: PPUSH
3974: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3978: LD_ADDR_EXP 44
3982: PUSH
3983: LD_EXP 44
3987: PUSH
3988: LD_VAR 0 1
3992: PPUSH
3993: LD_VAR 0 4
3997: PPUSH
3998: LD_VAR 0 5
4002: PPUSH
4003: LD_INT 1
4005: PUSH
4006: LD_INT 100
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 50
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 3
4025: PUSH
4026: LD_INT 20
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: LD_INT 20
4035: PUSH
4036: LD_INT 100
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: PPUSH
4049: CALL_OW 418
4053: ADD
4054: ST_TO_ADDR
// end ; commander := true ;
4055: LD_ADDR_LOC 1
4059: PUSH
4060: LD_INT 1
4062: ST_TO_ADDR
// soldiers_created := 0 ;
4063: LD_ADDR_LOC 4
4067: PUSH
4068: LD_INT 0
4070: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4071: LD_ADDR_VAR 0 7
4075: PUSH
4076: DOUBLE
4077: LD_INT 1
4079: DEC
4080: ST_TO_ADDR
4081: LD_EXP 18
4085: PUSH
4086: FOR_TO
4087: IFFALSE 4240
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4089: LD_ADDR_VAR 0 4
4093: PUSH
4094: LD_EXP 38
4098: PUSH
4099: LD_VAR 0 3
4103: ARRAY
4104: PUSH
4105: LD_VAR 0 7
4109: ARRAY
4110: PUSH
4111: LD_INT 1
4113: ARRAY
4114: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4115: LD_ADDR_VAR 0 5
4119: PUSH
4120: LD_EXP 38
4124: PUSH
4125: LD_VAR 0 3
4129: ARRAY
4130: PUSH
4131: LD_VAR 0 7
4135: ARRAY
4136: PUSH
4137: LD_INT 2
4139: ARRAY
4140: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4141: LD_ADDR_VAR 0 6
4145: PUSH
4146: LD_EXP 38
4150: PUSH
4151: LD_VAR 0 3
4155: ARRAY
4156: PUSH
4157: LD_VAR 0 7
4161: ARRAY
4162: PUSH
4163: LD_INT 3
4165: ARRAY
4166: ST_TO_ADDR
// bc_type := b_breastwork ;
4167: LD_ADDR_OWVAR 42
4171: PUSH
4172: LD_INT 31
4174: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4175: LD_ADDR_VAR 0 9
4179: PUSH
4180: LD_VAR 0 4
4184: PPUSH
4185: LD_VAR 0 5
4189: PPUSH
4190: LD_VAR 0 6
4194: PPUSH
4195: CALL_OW 47
4199: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4200: LD_INT 1
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: LD_INT 0
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: LD_VAR 0 9
4219: PPUSH
4220: CALL 2866 0 6
// soldiers_created := soldiers_created + 1 ;
4224: LD_ADDR_LOC 4
4228: PUSH
4229: LD_LOC 4
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: ST_TO_ADDR
// end ;
4238: GO 4086
4240: POP
4241: POP
// x := start_def [ pos ] [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_EXP 39
4251: PUSH
4252: LD_VAR 0 3
4256: ARRAY
4257: PUSH
4258: LD_INT 1
4260: ARRAY
4261: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4262: LD_ADDR_VAR 0 5
4266: PUSH
4267: LD_EXP 39
4271: PUSH
4272: LD_VAR 0 3
4276: ARRAY
4277: PUSH
4278: LD_INT 2
4280: ARRAY
4281: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4282: LD_LOC 8
4286: PUSH
4287: LD_EXP 18
4291: MINUS
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 4
4300: PPUSH
4301: LD_VAR 0 5
4305: PPUSH
4306: LD_INT 5
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL 2866 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4316: LD_LOC 5
4320: PPUSH
4321: LD_INT 2
4323: PPUSH
4324: LD_VAR 0 4
4328: PPUSH
4329: LD_VAR 0 5
4333: PPUSH
4334: LD_INT 5
4336: PPUSH
4337: LD_INT 0
4339: PPUSH
4340: CALL 2866 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4344: LD_LOC 7
4348: PPUSH
4349: LD_INT 3
4351: PPUSH
4352: LD_VAR 0 4
4356: PPUSH
4357: LD_VAR 0 5
4361: PPUSH
4362: LD_INT 5
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL 2866 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4372: LD_LOC 6
4376: PPUSH
4377: LD_INT 4
4379: PPUSH
4380: LD_VAR 0 4
4384: PPUSH
4385: LD_VAR 0 5
4389: PPUSH
4390: LD_INT 5
4392: PPUSH
4393: LD_INT 0
4395: PPUSH
4396: CALL 2866 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4400: LD_EXP 10
4404: PUSH
4405: LD_INT 20
4407: PPUSH
4408: LD_VAR 0 1
4412: PPUSH
4413: CALL_OW 321
4417: PUSH
4418: LD_INT 1
4420: EQUAL
4421: AND
4422: IFFALSE 4439
// SetTech ( tech_SibDet , side , state_researched ) ;
4424: LD_INT 20
4426: PPUSH
4427: LD_VAR 0 1
4431: PPUSH
4432: LD_INT 2
4434: PPUSH
4435: CALL_OW 322
// if def_siberite_bomb = 1 then
4439: LD_EXP 13
4443: PUSH
4444: LD_INT 1
4446: EQUAL
4447: IFFALSE 4481
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4449: LD_INT 25
4451: PPUSH
4452: LD_VAR 0 1
4456: PPUSH
4457: LD_INT 1
4459: PPUSH
4460: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4464: LD_INT 73
4466: PPUSH
4467: LD_VAR 0 1
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL_OW 322
// end else
4479: GO 4511
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4481: LD_INT 25
4483: PPUSH
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4496: LD_INT 73
4498: PPUSH
4499: LD_VAR 0 1
4503: PPUSH
4504: LD_INT 0
4506: PPUSH
4507: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4511: LD_INT 24
4513: PPUSH
4514: LD_VAR 0 1
4518: PPUSH
4519: LD_INT 0
4521: PPUSH
4522: CALL_OW 322
// global_defined := true ;
4526: LD_ADDR_LOC 3
4530: PUSH
4531: LD_INT 1
4533: ST_TO_ADDR
// end ;
4534: LD_VAR 0 2
4538: RET
// function prepare_sides ; var i ; begin
4539: LD_INT 0
4541: PPUSH
4542: PPUSH
// global_units := [ ] ;
4543: LD_ADDR_LOC 2
4547: PUSH
4548: EMPTY
4549: ST_TO_ADDR
// global_defined := false ;
4550: LD_ADDR_LOC 3
4554: PUSH
4555: LD_INT 0
4557: ST_TO_ADDR
// CountClassMembers ;
4558: CALL 4608 0 0
// for i := 1 to 8 do
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: DOUBLE
4568: LD_INT 1
4570: DEC
4571: ST_TO_ADDR
4572: LD_INT 8
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4601
// if Side_Positions [ i ] then
4578: LD_EXP 34
4582: PUSH
4583: LD_VAR 0 2
4587: ARRAY
4588: IFFALSE 4599
// prepare_side ( i ) ;
4590: LD_VAR 0 2
4594: PPUSH
4595: CALL 3454 0 1
4599: GO 4575
4601: POP
4602: POP
// end ;
4603: LD_VAR 0 1
4607: RET
// function CountClassMembers ; var Mode ; begin
4608: LD_INT 0
4610: PPUSH
4611: PPUSH
// if No_Mechs then
4612: LD_EXP 15
4616: IFFALSE 4628
// Mode := 2 else
4618: LD_ADDR_VAR 0 2
4622: PUSH
4623: LD_INT 2
4625: ST_TO_ADDR
4626: GO 4636
// Mode := 1 ;
4628: LD_ADDR_VAR 0 2
4632: PUSH
4633: LD_INT 1
4635: ST_TO_ADDR
// neng := number_of_people ;
4636: LD_ADDR_LOC 5
4640: PUSH
4641: LD_EXP 19
4645: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4646: LD_ADDR_LOC 8
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 4
4658: PUSH
4659: LD_INT 3
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4673: LD_LOC 8
4677: PUSH
4678: LD_EXP 18
4682: LESS
4683: IFFALSE 4695
// nsol := number_of_breastworks ;
4685: LD_ADDR_LOC 8
4689: PUSH
4690: LD_EXP 18
4694: ST_TO_ADDR
// neng := neng - nsol ;
4695: LD_ADDR_LOC 5
4699: PUSH
4700: LD_LOC 5
4704: PUSH
4705: LD_LOC 8
4709: MINUS
4710: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4711: LD_ADDR_LOC 6
4715: PUSH
4716: LD_LOC 5
4720: PUSH
4721: LD_INT 3
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_VAR 0 2
4735: ARRAY
4736: DIV
4737: ST_TO_ADDR
// if ( nsci < 1 ) then
4738: LD_LOC 6
4742: PUSH
4743: LD_INT 1
4745: LESS
4746: IFFALSE 4756
// nsci := 1 ;
4748: LD_ADDR_LOC 6
4752: PUSH
4753: LD_INT 1
4755: ST_TO_ADDR
// neng := neng - nsci ;
4756: LD_ADDR_LOC 5
4760: PUSH
4761: LD_LOC 5
4765: PUSH
4766: LD_LOC 6
4770: MINUS
4771: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4772: LD_ADDR_LOC 7
4776: PUSH
4777: LD_LOC 5
4781: PUSH
4782: LD_INT 2
4784: DIV
4785: PUSH
4786: LD_INT 0
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_VAR 0 2
4797: ARRAY
4798: ST_TO_ADDR
// neng := neng - nmech ;
4799: LD_ADDR_LOC 5
4803: PUSH
4804: LD_LOC 5
4808: PUSH
4809: LD_LOC 7
4813: MINUS
4814: ST_TO_ADDR
// if ( neng < 1 ) then
4815: LD_LOC 5
4819: PUSH
4820: LD_INT 1
4822: LESS
4823: IFFALSE 4833
// neng := 1 ;
4825: LD_ADDR_LOC 5
4829: PUSH
4830: LD_INT 1
4832: ST_TO_ADDR
// end ;
4833: LD_VAR 0 1
4837: RET
// starting begin disable ( 98 ) ;
4838: LD_INT 98
4840: DISABLE_MARKED
// disable ( 99 ) ;
4841: LD_INT 99
4843: DISABLE_MARKED
// disable ( 400 ) ;
4844: LD_INT 400
4846: DISABLE_MARKED
// disable ( 401 ) ;
4847: LD_INT 401
4849: DISABLE_MARKED
// mp_selectmsg := true ;
4850: LD_ADDR_OWVAR 13
4854: PUSH
4855: LD_INT 1
4857: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4858: CALL 68 0 0
// init_map ;
4862: CALL 1251 0 0
// init_respawning ;
4866: CALL 5603 0 0
// set_shared_visions_and_alliances ;
4870: CALL 2578 0 0
// ResetFog ;
4874: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4878: LD_OWVAR 2
4882: PPUSH
4883: CALL_OW 520
// prepare_sides ;
4887: CALL 4539 0 0
// Init_Win_Condition ;
4891: CALL 8837 0 0
// ShowTimer ;
4895: CALL 7817 0 0
// music_nat := Side_Nations [ your_side ] ;
4899: LD_ADDR_OWVAR 71
4903: PUSH
4904: LD_EXP 35
4908: PUSH
4909: LD_OWVAR 2
4913: ARRAY
4914: ST_TO_ADDR
// if IAmSpec then
4915: CALL_OW 531
4919: IFFALSE 4943
// begin fogoff ( true ) ;
4921: LD_INT 1
4923: PPUSH
4924: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4928: LD_INT 130
4930: PPUSH
4931: LD_INT 100
4933: PPUSH
4934: CALL_OW 86
// enable ( 400 ) ;
4938: LD_INT 400
4940: ENABLE_MARKED
// end else
4941: GO 4989
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4943: LD_EXP 39
4947: PUSH
4948: LD_EXP 34
4952: PUSH
4953: LD_OWVAR 2
4957: ARRAY
4958: ARRAY
4959: PUSH
4960: LD_INT 1
4962: ARRAY
4963: PPUSH
4964: LD_EXP 39
4968: PUSH
4969: LD_EXP 34
4973: PUSH
4974: LD_OWVAR 2
4978: ARRAY
4979: ARRAY
4980: PUSH
4981: LD_INT 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 86
// end ; InitApeman ;
4989: CALL 6335 0 0
// BuildUpAreas := [ bt1 , bt2 , bt3 , bt4 , bt5 , bt6 , bt7 , bt8 ] ;
4993: LD_ADDR_EXP 55
4997: PUSH
4998: LD_INT 9
5000: PUSH
5001: LD_INT 10
5003: PUSH
5004: LD_INT 11
5006: PUSH
5007: LD_INT 12
5009: PUSH
5010: LD_INT 13
5012: PUSH
5013: LD_INT 14
5015: PUSH
5016: LD_INT 15
5018: PUSH
5019: LD_INT 16
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: ST_TO_ADDR
// BeginBuildUp ;
5032: CALL 8000 0 0
// end ;
5036: END
// every 0 0$1 do
5037: GO 5039
5039: DISABLE
// if ( def_siberite_bomb > 1 ) then
5040: LD_EXP 13
5044: PUSH
5045: LD_INT 1
5047: GREATER
5048: IFFALSE 5063
// begin wait ( siberite_bomb_Delay ) ;
5050: LD_EXP 29
5054: PPUSH
5055: CALL_OW 67
// EnableSibFiss ;
5059: CALL 5064 0 0
// end ;
5063: END
// function EnableSibFiss ; var i ; begin
5064: LD_INT 0
5066: PPUSH
5067: PPUSH
// for i := 1 to 8 do
5068: LD_ADDR_VAR 0 2
5072: PUSH
5073: DOUBLE
5074: LD_INT 1
5076: DEC
5077: ST_TO_ADDR
5078: LD_INT 8
5080: PUSH
5081: FOR_TO
5082: IFFALSE 5128
// if Side_Positions [ i ] then
5084: LD_EXP 34
5088: PUSH
5089: LD_VAR 0 2
5093: ARRAY
5094: IFFALSE 5126
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5096: LD_INT 25
5098: PPUSH
5099: LD_VAR 0 2
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5111: LD_INT 73
5113: PPUSH
5114: LD_VAR 0 2
5118: PPUSH
5119: LD_INT 1
5121: PPUSH
5122: CALL_OW 322
// end ;
5126: GO 5081
5128: POP
5129: POP
// end ; end_of_file
5130: LD_VAR 0 1
5134: RET
// every 1 1$0 + 0 0$0.3 do
5135: GO 5137
5137: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5138: LD_INT 4
5140: PPUSH
5141: LD_INT 5
5143: PPUSH
5144: CALL_OW 12
5148: PPUSH
5149: LD_INT 1
5151: PPUSH
5152: CALL_OW 57
// enable ;
5156: ENABLE
// end ;
5157: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5158: GO 5160
5160: DISABLE
5161: LD_INT 0
5163: PPUSH
5164: PPUSH
// begin case tick of 1 .. 1 1$0 :
5165: LD_OWVAR 1
5169: PUSH
5170: LD_INT 1
5172: DOUBLE
5173: GREATEREQUAL
5174: IFFALSE 5182
5176: LD_INT 2100
5178: DOUBLE
5179: LESSEQUAL
5180: IFTRUE 5184
5182: GO 5212
5184: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5185: LD_EXP 23
5189: PUSH
5190: LD_INT 100
5192: DIVREAL
5193: PUSH
5194: LD_INT 350
5196: PPUSH
5197: LD_INT 700
5199: PPUSH
5200: CALL_OW 12
5204: MUL
5205: PPUSH
5206: CALL_OW 67
5210: GO 5514
5212: LD_INT 2100
5214: PUSH
5215: LD_INT 1
5217: PLUS
5218: DOUBLE
5219: GREATEREQUAL
5220: IFFALSE 5228
5222: LD_INT 10500
5224: DOUBLE
5225: LESSEQUAL
5226: IFTRUE 5230
5228: GO 5258
5230: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5231: LD_EXP 23
5235: PUSH
5236: LD_INT 100
5238: DIVREAL
5239: PUSH
5240: LD_INT 700
5242: PPUSH
5243: LD_INT 1225
5245: PPUSH
5246: CALL_OW 12
5250: MUL
5251: PPUSH
5252: CALL_OW 67
5256: GO 5514
5258: LD_INT 10500
5260: PUSH
5261: LD_INT 1
5263: PLUS
5264: DOUBLE
5265: GREATEREQUAL
5266: IFFALSE 5274
5268: LD_INT 21000
5270: DOUBLE
5271: LESSEQUAL
5272: IFTRUE 5276
5274: GO 5304
5276: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5277: LD_EXP 23
5281: PUSH
5282: LD_INT 100
5284: DIVREAL
5285: PUSH
5286: LD_INT 1225
5288: PPUSH
5289: LD_INT 1750
5291: PPUSH
5292: CALL_OW 12
5296: MUL
5297: PPUSH
5298: CALL_OW 67
5302: GO 5514
5304: LD_INT 21000
5306: PUSH
5307: LD_INT 1
5309: PLUS
5310: DOUBLE
5311: GREATEREQUAL
5312: IFFALSE 5320
5314: LD_INT 42000
5316: DOUBLE
5317: LESSEQUAL
5318: IFTRUE 5322
5320: GO 5350
5322: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5323: LD_EXP 23
5327: PUSH
5328: LD_INT 100
5330: DIVREAL
5331: PUSH
5332: LD_INT 1750
5334: PPUSH
5335: LD_INT 2450
5337: PPUSH
5338: CALL_OW 12
5342: MUL
5343: PPUSH
5344: CALL_OW 67
5348: GO 5514
5350: LD_INT 42000
5352: PUSH
5353: LD_INT 1
5355: PLUS
5356: DOUBLE
5357: GREATEREQUAL
5358: IFFALSE 5366
5360: LD_INT 63000
5362: DOUBLE
5363: LESSEQUAL
5364: IFTRUE 5368
5366: GO 5396
5368: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5369: LD_EXP 23
5373: PUSH
5374: LD_INT 100
5376: DIVREAL
5377: PUSH
5378: LD_INT 2450
5380: PPUSH
5381: LD_INT 2800
5383: PPUSH
5384: CALL_OW 12
5388: MUL
5389: PPUSH
5390: CALL_OW 67
5394: GO 5514
5396: LD_INT 63000
5398: PUSH
5399: LD_INT 1
5401: PLUS
5402: DOUBLE
5403: GREATEREQUAL
5404: IFFALSE 5412
5406: LD_INT 105000
5408: DOUBLE
5409: LESSEQUAL
5410: IFTRUE 5414
5412: GO 5442
5414: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5415: LD_EXP 23
5419: PUSH
5420: LD_INT 100
5422: DIVREAL
5423: PUSH
5424: LD_INT 2800
5426: PPUSH
5427: LD_INT 3325
5429: PPUSH
5430: CALL_OW 12
5434: MUL
5435: PPUSH
5436: CALL_OW 67
5440: GO 5514
5442: LD_INT 105000
5444: PUSH
5445: LD_INT 1
5447: PLUS
5448: DOUBLE
5449: GREATEREQUAL
5450: IFFALSE 5458
5452: LD_INT 630000
5454: DOUBLE
5455: LESSEQUAL
5456: IFTRUE 5460
5458: GO 5488
5460: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
5461: LD_EXP 23
5465: PUSH
5466: LD_INT 100
5468: DIVREAL
5469: PUSH
5470: LD_INT 3325
5472: PPUSH
5473: LD_INT 4200
5475: PPUSH
5476: CALL_OW 12
5480: MUL
5481: PPUSH
5482: CALL_OW 67
5486: GO 5514
5488: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5489: LD_EXP 23
5493: PUSH
5494: LD_INT 100
5496: DIVREAL
5497: PUSH
5498: LD_INT 4200
5500: PPUSH
5501: LD_INT 5250
5503: PPUSH
5504: CALL_OW 12
5508: MUL
5509: PPUSH
5510: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5514: LD_ADDR_VAR 0 2
5518: PUSH
5519: LD_INT 3
5521: PPUSH
5522: LD_INT 5
5524: PPUSH
5525: CALL_OW 12
5529: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5530: LD_ADDR_VAR 0 1
5534: PUSH
5535: LD_EXP 34
5539: PUSH
5540: LD_INT 0
5542: PUSH
5543: EMPTY
5544: LIST
5545: DIFF
5546: PUSH
5547: FOR_IN
5548: IFFALSE 5597
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5550: LD_VAR 0 2
5554: PPUSH
5555: LD_EXP 39
5559: PUSH
5560: LD_VAR 0 1
5564: ARRAY
5565: PUSH
5566: LD_INT 1
5568: ARRAY
5569: PPUSH
5570: LD_EXP 39
5574: PUSH
5575: LD_VAR 0 1
5579: ARRAY
5580: PUSH
5581: LD_INT 2
5583: ARRAY
5584: PPUSH
5585: LD_INT 20
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: CALL_OW 56
5595: GO 5547
5597: POP
5598: POP
// enable ;
5599: ENABLE
// end ; end_of_file
5600: PPOPN 2
5602: END
// var respawn , inqueue ; export function init_respawning ; begin
5603: LD_INT 0
5605: PPUSH
// respawn := Rand ( 1 , 8 ) ;
5606: LD_ADDR_LOC 9
5610: PUSH
5611: LD_INT 1
5613: PPUSH
5614: LD_INT 8
5616: PPUSH
5617: CALL_OW 12
5621: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5622: LD_ADDR_LOC 10
5626: PUSH
5627: LD_INT 0
5629: PUSH
5630: LD_INT 0
5632: PUSH
5633: LD_INT 0
5635: PUSH
5636: LD_INT 0
5638: PUSH
5639: LD_INT 0
5641: PUSH
5642: LD_INT 0
5644: PUSH
5645: LD_INT 0
5647: PUSH
5648: LD_INT 0
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: ST_TO_ADDR
// end ;
5661: LD_VAR 0 1
5665: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5666: GO 5668
5668: DISABLE
5669: LD_INT 0
5671: PPUSH
5672: PPUSH
5673: PPUSH
5674: PPUSH
// begin if respawning_time_max = 0 then
5675: LD_EXP 28
5679: PUSH
5680: LD_INT 0
5682: EQUAL
5683: IFFALSE 5687
// exit ;
5685: GO 6141
// if respawn = 8 then
5687: LD_LOC 9
5691: PUSH
5692: LD_INT 8
5694: EQUAL
5695: IFFALSE 5707
// respawn := 1 else
5697: LD_ADDR_LOC 9
5701: PUSH
5702: LD_INT 1
5704: ST_TO_ADDR
5705: GO 5721
// respawn := respawn + 1 ;
5707: LD_ADDR_LOC 9
5711: PUSH
5712: LD_LOC 9
5716: PUSH
5717: LD_INT 1
5719: PLUS
5720: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5721: LD_EXP 34
5725: PUSH
5726: LD_LOC 9
5730: ARRAY
5731: PUSH
5732: LD_LOC 10
5736: PUSH
5737: LD_LOC 9
5741: ARRAY
5742: NOT
5743: AND
5744: IFFALSE 6140
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: LD_INT 21
5753: PUSH
5754: LD_INT 1
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: LD_INT 22
5763: PUSH
5764: LD_LOC 9
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 3
5775: PUSH
5776: LD_INT 23
5778: PUSH
5779: LD_INT 0
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: PPUSH
5792: CALL_OW 69
5796: ST_TO_ADDR
// if n < number_of_people then
5797: LD_VAR 0 1
5801: PUSH
5802: LD_EXP 19
5806: LESS
5807: IFFALSE 6137
// begin aktresp := respawn ;
5809: LD_ADDR_VAR 0 3
5813: PUSH
5814: LD_LOC 9
5818: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5819: LD_ADDR_LOC 10
5823: PUSH
5824: LD_LOC 10
5828: PPUSH
5829: LD_VAR 0 3
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 1
5841: ST_TO_ADDR
// enable ;
5842: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5843: LD_EXP 27
5847: PPUSH
5848: LD_EXP 28
5852: PPUSH
5853: CALL_OW 12
5857: PPUSH
5858: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5862: LD_ADDR_LOC 10
5866: PUSH
5867: LD_LOC 10
5871: PPUSH
5872: LD_VAR 0 3
5876: PPUSH
5877: LD_INT 0
5879: PPUSH
5880: CALL_OW 1
5884: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: LD_INT 21
5892: PUSH
5893: LD_INT 3
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 2
5902: PUSH
5903: LD_INT 30
5905: PUSH
5906: LD_INT 0
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: PUSH
5913: LD_INT 30
5915: PUSH
5916: LD_INT 1
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: LIST
5927: PUSH
5928: LD_INT 50
5930: PUSH
5931: EMPTY
5932: LIST
5933: PUSH
5934: LD_INT 22
5936: PUSH
5937: LD_VAR 0 3
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: PPUSH
5952: CALL_OW 69
5956: ST_TO_ADDR
// if building_list = 0 then
5957: LD_VAR 0 2
5961: PUSH
5962: LD_INT 0
5964: EQUAL
5965: IFFALSE 5969
// exit ;
5967: GO 6141
// hc_name :=  ;
5969: LD_ADDR_OWVAR 26
5973: PUSH
5974: LD_STRING 
5976: ST_TO_ADDR
// hc_importance := 0 ;
5977: LD_ADDR_OWVAR 32
5981: PUSH
5982: LD_INT 0
5984: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
5985: LD_INT 0
5987: PPUSH
5988: LD_INT 0
5990: PPUSH
5991: LD_EXP 20
5995: PUSH
5996: LD_INT 2
5998: DIV
5999: PPUSH
6000: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6004: LD_ADDR_OWVAR 21
6008: PUSH
6009: LD_EXP 35
6013: PUSH
6014: LD_VAR 0 3
6018: ARRAY
6019: ST_TO_ADDR
// uc_side := aktresp ;
6020: LD_ADDR_OWVAR 20
6024: PUSH
6025: LD_VAR 0 3
6029: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6030: LD_ADDR_VAR 0 4
6034: PUSH
6035: LD_VAR 0 2
6039: PUSH
6040: LD_INT 1
6042: PPUSH
6043: LD_VAR 0 2
6047: PUSH
6048: LD_INT 0
6050: PLUS
6051: PPUSH
6052: CALL_OW 12
6056: ARRAY
6057: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6058: LD_VAR 0 4
6062: PPUSH
6063: CALL_OW 266
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 1
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: IN
6078: IFFALSE 6090
// n = 25 else
6080: LD_ADDR_VAR 0 1
6084: PUSH
6085: LD_INT 25
6087: ST_TO_ADDR
6088: GO 6098
// n = 10 ;
6090: LD_ADDR_VAR 0 1
6094: PUSH
6095: LD_INT 10
6097: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6098: CALL_OW 44
6102: PPUSH
6103: LD_VAR 0 4
6107: PPUSH
6108: CALL_OW 250
6112: PPUSH
6113: LD_VAR 0 4
6117: PPUSH
6118: CALL_OW 251
6122: PPUSH
6123: LD_VAR 0 1
6127: PPUSH
6128: LD_INT 1
6130: PPUSH
6131: CALL_OW 50
// end else
6135: GO 6138
// enable ;
6137: ENABLE
// end else
6138: GO 6141
// enable ;
6140: ENABLE
// end ; end_of_file
6141: PPOPN 4
6143: END
// every 20 20$00 trigger apemanNumber do
6144: LD_EXP 46
6148: IFFALSE 6181
6150: GO 6152
6152: DISABLE
// begin enable ;
6153: ENABLE
// if apeLevel >= 8 then
6154: LD_EXP 51
6158: PUSH
6159: LD_INT 8
6161: GREATEREQUAL
6162: IFFALSE 6167
// disable else
6164: DISABLE
6165: GO 6181
// apeLevel := apeLevel + 1 ;
6167: LD_ADDR_EXP 51
6171: PUSH
6172: LD_EXP 51
6176: PUSH
6177: LD_INT 1
6179: PLUS
6180: ST_TO_ADDR
// end ;
6181: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6182: LD_EXP 46
6186: PUSH
6187: LD_EXP 47
6191: LESS
6192: IFFALSE 6332
6194: GO 6196
6196: DISABLE
6197: LD_INT 0
6199: PPUSH
6200: PPUSH
6201: PPUSH
6202: PPUSH
// begin enable ;
6203: ENABLE
// for i := 1 to apemanPos do
6204: LD_ADDR_VAR 0 1
6208: PUSH
6209: DOUBLE
6210: LD_INT 1
6212: DEC
6213: ST_TO_ADDR
6214: LD_EXP 49
6218: PUSH
6219: FOR_TO
6220: IFFALSE 6330
// begin if apemanPlayerCount [ i ] then
6222: LD_EXP 50
6226: PUSH
6227: LD_VAR 0 1
6231: ARRAY
6232: IFFALSE 6328
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6234: LD_EXP 50
6238: PUSH
6239: LD_VAR 0 1
6243: ARRAY
6244: PUSH
6245: LD_EXP 49
6249: PUSH
6250: LD_VAR 0 1
6254: ARRAY
6255: GREATER
6256: IFFALSE 6328
// begin ape := PrepareApeman ;
6258: LD_ADDR_VAR 0 2
6262: PUSH
6263: CALL 6851 0 0
6267: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6268: LD_VAR 0 2
6272: PPUSH
6273: LD_EXP 52
6277: PUSH
6278: LD_VAR 0 1
6282: ARRAY
6283: PPUSH
6284: LD_INT 0
6286: PPUSH
6287: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6291: LD_ADDR_EXP 49
6295: PUSH
6296: LD_EXP 49
6300: PPUSH
6301: LD_VAR 0 1
6305: PPUSH
6306: LD_EXP 49
6310: PUSH
6311: LD_VAR 0 1
6315: ARRAY
6316: PUSH
6317: LD_VAR 0 2
6321: UNION
6322: PPUSH
6323: CALL_OW 1
6327: ST_TO_ADDR
// end ; end ; end ;
6328: GO 6219
6330: POP
6331: POP
// end ;
6332: PPOPN 4
6334: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
6341: PPUSH
6342: PPUSH
6343: PPUSH
// playersAmount := 0 ;
6344: LD_ADDR_VAR 0 3
6348: PUSH
6349: LD_INT 0
6351: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6352: LD_ADDR_VAR 0 7
6356: PUSH
6357: LD_INT 1
6359: PUSH
6360: LD_INT 2
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: LD_INT 4
6368: PUSH
6369: LD_INT 5
6371: PUSH
6372: LD_INT 6
6374: PUSH
6375: LD_INT 7
6377: PUSH
6378: LD_INT 8
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6391: LD_ADDR_EXP 52
6395: PUSH
6396: LD_INT 0
6398: PUSH
6399: LD_INT 0
6401: PUSH
6402: LD_INT 0
6404: PUSH
6405: LD_INT 0
6407: PUSH
6408: LD_INT 0
6410: PUSH
6411: LD_INT 0
6413: PUSH
6414: LD_INT 0
6416: PUSH
6417: LD_INT 0
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: ST_TO_ADDR
// for j = 1 to Side_Positions do
6430: LD_ADDR_VAR 0 4
6434: PUSH
6435: DOUBLE
6436: LD_INT 1
6438: DEC
6439: ST_TO_ADDR
6440: LD_EXP 34
6444: PUSH
6445: FOR_TO
6446: IFFALSE 6513
// if Side_Positions [ j ] then
6448: LD_EXP 34
6452: PUSH
6453: LD_VAR 0 4
6457: ARRAY
6458: IFFALSE 6511
// begin playersAmount := playersAmount + 1 ;
6460: LD_ADDR_VAR 0 3
6464: PUSH
6465: LD_VAR 0 3
6469: PUSH
6470: LD_INT 1
6472: PLUS
6473: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6474: LD_ADDR_EXP 52
6478: PUSH
6479: LD_EXP 52
6483: PPUSH
6484: LD_VAR 0 4
6488: PPUSH
6489: LD_VAR 0 7
6493: PUSH
6494: LD_EXP 34
6498: PUSH
6499: LD_VAR 0 4
6503: ARRAY
6504: ARRAY
6505: PPUSH
6506: CALL_OW 1
6510: ST_TO_ADDR
// end ;
6511: GO 6445
6513: POP
6514: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6515: LD_ADDR_EXP 48
6519: PUSH
6520: LD_INT 3
6522: PUSH
6523: LD_EXP 25
6527: MUL
6528: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6529: LD_ADDR_EXP 46
6533: PUSH
6534: LD_VAR 0 3
6538: PUSH
6539: LD_EXP 48
6543: MUL
6544: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6545: LD_ADDR_EXP 47
6549: PUSH
6550: LD_EXP 46
6554: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6555: LD_ADDR_EXP 49
6559: PUSH
6560: LD_INT 0
6562: PUSH
6563: LD_INT 0
6565: PUSH
6566: LD_INT 0
6568: PUSH
6569: LD_INT 0
6571: PUSH
6572: LD_INT 0
6574: PUSH
6575: LD_INT 0
6577: PUSH
6578: LD_INT 0
6580: PUSH
6581: LD_INT 0
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6594: LD_ADDR_EXP 50
6598: PUSH
6599: LD_INT 0
6601: PUSH
6602: LD_INT 0
6604: PUSH
6605: LD_INT 0
6607: PUSH
6608: LD_INT 0
6610: PUSH
6611: LD_INT 0
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: LD_INT 0
6619: PUSH
6620: LD_INT 0
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: ST_TO_ADDR
// apeLevel := 1 ;
6633: LD_ADDR_EXP 51
6637: PUSH
6638: LD_INT 1
6640: ST_TO_ADDR
// if not apemanNumber then
6641: LD_EXP 46
6645: NOT
6646: IFFALSE 6650
// exit ;
6648: GO 6846
// for i := 1 to apemanPerPlayer do
6650: LD_ADDR_VAR 0 2
6654: PUSH
6655: DOUBLE
6656: LD_INT 1
6658: DEC
6659: ST_TO_ADDR
6660: LD_EXP 48
6664: PUSH
6665: FOR_TO
6666: IFFALSE 6844
// begin for j := 1 to Side_Positions do
6668: LD_ADDR_VAR 0 4
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_EXP 34
6682: PUSH
6683: FOR_TO
6684: IFFALSE 6840
// if Side_Positions [ j ] then
6686: LD_EXP 34
6690: PUSH
6691: LD_VAR 0 4
6695: ARRAY
6696: IFFALSE 6838
// begin pos := Side_Positions [ j ] ;
6698: LD_ADDR_VAR 0 6
6702: PUSH
6703: LD_EXP 34
6707: PUSH
6708: LD_VAR 0 4
6712: ARRAY
6713: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6714: LD_ADDR_EXP 50
6718: PUSH
6719: LD_EXP 50
6723: PPUSH
6724: LD_VAR 0 4
6728: PPUSH
6729: LD_EXP 50
6733: PUSH
6734: LD_VAR 0 4
6738: ARRAY
6739: PUSH
6740: LD_INT 1
6742: PLUS
6743: PPUSH
6744: CALL_OW 1
6748: ST_TO_ADDR
// ape := PrepareApeman ;
6749: LD_ADDR_VAR 0 5
6753: PUSH
6754: CALL 6851 0 0
6758: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6759: LD_ADDR_EXP 49
6763: PUSH
6764: LD_EXP 49
6768: PPUSH
6769: LD_VAR 0 4
6773: PPUSH
6774: LD_EXP 49
6778: PUSH
6779: LD_VAR 0 4
6783: ARRAY
6784: PPUSH
6785: LD_EXP 49
6789: PUSH
6790: LD_VAR 0 4
6794: ARRAY
6795: PUSH
6796: LD_INT 1
6798: PLUS
6799: PPUSH
6800: LD_VAR 0 5
6804: PPUSH
6805: CALL_OW 1
6809: PPUSH
6810: CALL_OW 1
6814: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6815: LD_VAR 0 5
6819: PPUSH
6820: LD_EXP 52
6824: PUSH
6825: LD_VAR 0 4
6829: ARRAY
6830: PPUSH
6831: LD_INT 0
6833: PPUSH
6834: CALL_OW 49
// end ;
6838: GO 6683
6840: POP
6841: POP
// end ;
6842: GO 6665
6844: POP
6845: POP
// end ;
6846: LD_VAR 0 1
6850: RET
// export function PrepareApeman ; var bonus ; begin
6851: LD_INT 0
6853: PPUSH
6854: PPUSH
// uc_side := 0 ;
6855: LD_ADDR_OWVAR 20
6859: PUSH
6860: LD_INT 0
6862: ST_TO_ADDR
// uc_nation := 0 ;
6863: LD_ADDR_OWVAR 21
6867: PUSH
6868: LD_INT 0
6870: ST_TO_ADDR
// InitHc ;
6871: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6875: LD_ADDR_VAR 0 2
6879: PUSH
6880: LD_INT 1
6882: NEG
6883: PUSH
6884: LD_INT 0
6886: PUSH
6887: LD_INT 1
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: LIST
6894: PUSH
6895: LD_OWVAR 1
6899: PUSH
6900: LD_INT 3
6902: MOD
6903: PUSH
6904: LD_INT 1
6906: PLUS
6907: ARRAY
6908: ST_TO_ADDR
// hc_class := class_apeman ;
6909: LD_ADDR_OWVAR 28
6913: PUSH
6914: LD_INT 12
6916: ST_TO_ADDR
// hc_gallery :=  ;
6917: LD_ADDR_OWVAR 33
6921: PUSH
6922: LD_STRING 
6924: ST_TO_ADDR
// hc_name :=  ;
6925: LD_ADDR_OWVAR 26
6929: PUSH
6930: LD_STRING 
6932: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6933: LD_ADDR_OWVAR 31
6937: PUSH
6938: LD_EXP 51
6942: PUSH
6943: LD_VAR 0 2
6947: PLUS
6948: PUSH
6949: LD_EXP 51
6953: PUSH
6954: LD_VAR 0 2
6958: PLUS
6959: PUSH
6960: LD_EXP 51
6964: PUSH
6965: LD_VAR 0 2
6969: PLUS
6970: PUSH
6971: LD_EXP 51
6975: PUSH
6976: LD_VAR 0 2
6980: PLUS
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6988: LD_ADDR_OWVAR 35
6992: PUSH
6993: LD_INT 10
6995: PUSH
6996: LD_VAR 0 2
7000: MUL
7001: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7002: LD_ADDR_OWVAR 29
7006: PUSH
7007: LD_INT 12
7009: PUSH
7010: LD_INT 10
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: ST_TO_ADDR
// result := CreateHuman ;
7017: LD_ADDR_VAR 0 1
7021: PUSH
7022: CALL_OW 44
7026: ST_TO_ADDR
// end ;
7027: LD_VAR 0 1
7031: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7032: LD_INT 0
7034: PPUSH
7035: PPUSH
7036: PPUSH
// if not ape then
7037: LD_VAR 0 1
7041: NOT
7042: IFFALSE 7046
// exit ;
7044: GO 7171
// side := GetSide ( ape ) ;
7046: LD_ADDR_VAR 0 3
7050: PUSH
7051: LD_VAR 0 1
7055: PPUSH
7056: CALL_OW 255
7060: ST_TO_ADDR
// if not side then
7061: LD_VAR 0 3
7065: NOT
7066: IFFALSE 7120
// begin for i = 1 to apemanPos do
7068: LD_ADDR_VAR 0 4
7072: PUSH
7073: DOUBLE
7074: LD_INT 1
7076: DEC
7077: ST_TO_ADDR
7078: LD_EXP 49
7082: PUSH
7083: FOR_TO
7084: IFFALSE 7118
// if ape in apemanPos [ i ] then
7086: LD_VAR 0 1
7090: PUSH
7091: LD_EXP 49
7095: PUSH
7096: LD_VAR 0 4
7100: ARRAY
7101: IN
7102: IFFALSE 7116
// begin side := i ;
7104: LD_ADDR_VAR 0 3
7108: PUSH
7109: LD_VAR 0 4
7113: ST_TO_ADDR
// break ;
7114: GO 7118
// end ;
7116: GO 7083
7118: POP
7119: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7120: LD_ADDR_EXP 49
7124: PUSH
7125: LD_EXP 49
7129: PPUSH
7130: LD_VAR 0 3
7134: PPUSH
7135: LD_EXP 49
7139: PUSH
7140: LD_VAR 0 3
7144: ARRAY
7145: PUSH
7146: LD_VAR 0 1
7150: DIFF
7151: PPUSH
7152: CALL_OW 1
7156: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7157: LD_ADDR_EXP 46
7161: PUSH
7162: LD_EXP 46
7166: PUSH
7167: LD_INT 1
7169: MINUS
7170: ST_TO_ADDR
// end ; end_of_file
7171: LD_VAR 0 2
7175: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7176: LD_VAR 0 1
7180: PPUSH
7181: CALL_OW 266
7185: PUSH
7186: LD_INT 0
7188: PUSH
7189: LD_INT 1
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: IN
7196: IFFALSE 7221
// SetBName ( b , @ & GetSide ( b ) ) ;
7198: LD_VAR 0 1
7202: PPUSH
7203: LD_STRING @
7205: PUSH
7206: LD_VAR 0 1
7210: PPUSH
7211: CALL_OW 255
7215: STR
7216: PPUSH
7217: CALL_OW 500
// end ;
7221: PPOPN 2
7223: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7224: LD_VAR 0 1
7228: PPUSH
7229: CALL_OW 266
7233: PUSH
7234: LD_INT 0
7236: PUSH
7237: LD_INT 1
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: IN
7244: IFFALSE 7269
// SetBName ( b , @ & GetSide ( b ) ) ;
7246: LD_VAR 0 1
7250: PPUSH
7251: LD_STRING @
7253: PUSH
7254: LD_VAR 0 1
7258: PPUSH
7259: CALL_OW 255
7263: STR
7264: PPUSH
7265: CALL_OW 500
// end ;
7269: PPOPN 3
7271: END
// on VehicleConstructed ( veh , fac ) do var side ;
7272: LD_INT 0
7274: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7275: LD_VAR 0 1
7279: PPUSH
7280: CALL_OW 263
7284: PUSH
7285: LD_INT 5
7287: EQUAL
7288: IFFALSE 7430
// begin side := GetSide ( veh ) ;
7290: LD_ADDR_VAR 0 3
7294: PUSH
7295: LD_VAR 0 1
7299: PPUSH
7300: CALL_OW 255
7304: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7305: LD_ADDR_EXP 49
7309: PUSH
7310: LD_EXP 49
7314: PPUSH
7315: LD_VAR 0 3
7319: PPUSH
7320: LD_EXP 49
7324: PUSH
7325: LD_VAR 0 3
7329: ARRAY
7330: PPUSH
7331: LD_INT 52
7333: PUSH
7334: EMPTY
7335: LIST
7336: PPUSH
7337: CALL_OW 72
7341: PUSH
7342: LD_INT 22
7344: PUSH
7345: LD_VAR 0 3
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 2
7356: PUSH
7357: LD_INT 33
7359: PUSH
7360: LD_INT 5
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 25
7369: PUSH
7370: LD_INT 12
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: LD_INT 25
7379: PUSH
7380: LD_INT 15
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PUSH
7387: LD_INT 25
7389: PUSH
7390: LD_INT 16
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 25
7399: PUSH
7400: LD_INT 17
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PPUSH
7419: CALL_OW 69
7423: UNION
7424: PPUSH
7425: CALL_OW 1
7429: ST_TO_ADDR
// end ; end ;
7430: PPOPN 3
7432: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7433: LD_INT 0
7435: PPUSH
7436: PPUSH
7437: PPUSH
7438: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7439: LD_VAR 0 1
7443: PPUSH
7444: CALL_OW 257
7448: PUSH
7449: LD_INT 12
7451: PUSH
7452: LD_INT 15
7454: PUSH
7455: LD_INT 17
7457: PUSH
7458: LD_INT 16
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: IN
7467: PUSH
7468: LD_VAR 0 1
7472: PPUSH
7473: CALL_OW 263
7477: PUSH
7478: LD_INT 5
7480: EQUAL
7481: OR
7482: IFFALSE 7493
// ApeKilled ( j ) ;
7484: LD_VAR 0 1
7488: PPUSH
7489: CALL 7032 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7493: LD_VAR 0 1
7497: PPUSH
7498: CALL_OW 266
7502: PUSH
7503: LD_INT 0
7505: PUSH
7506: LD_INT 1
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: IN
7513: IFFALSE 7595
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7515: LD_ADDR_VAR 0 4
7519: PUSH
7520: LD_EXP 34
7524: PUSH
7525: LD_VAR 0 1
7529: PPUSH
7530: CALL_OW 255
7534: ARRAY
7535: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7536: LD_ADDR_VAR 0 2
7540: PUSH
7541: LD_EXP 39
7545: PUSH
7546: LD_VAR 0 4
7550: ARRAY
7551: PUSH
7552: LD_INT 1
7554: ARRAY
7555: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7556: LD_ADDR_VAR 0 3
7560: PUSH
7561: LD_EXP 39
7565: PUSH
7566: LD_VAR 0 4
7570: ARRAY
7571: PUSH
7572: LD_INT 2
7574: ARRAY
7575: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7576: LD_VAR 0 2
7580: PPUSH
7581: LD_VAR 0 3
7585: PPUSH
7586: CALL_OW 420
7590: PPUSH
7591: CALL_OW 419
// end ; end ;
7595: PPOPN 5
7597: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7598: LD_VAR 0 1
7602: PPUSH
7603: LD_VAR 0 2
7607: PPUSH
7608: LD_VAR 0 3
7612: PPUSH
7613: LD_OWVAR 2
7617: PPUSH
7618: CALL 8598 0 4
7622: PPOPN 3
7624: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7625: LD_INT 0
7627: PPUSH
7628: PPUSH
// for un in battle_flags_id do
7629: LD_ADDR_VAR 0 2
7633: PUSH
7634: LD_EXP 44
7638: PUSH
7639: FOR_IN
7640: IFFALSE 7715
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7642: LD_VAR 0 2
7646: PPUSH
7647: LD_INT 1
7649: PUSH
7650: LD_LOC 11
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: LD_INT 2
7661: PUSH
7662: LD_LOC 11
7666: PUSH
7667: LD_INT 2
7669: DIV
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: LD_INT 3
7677: PUSH
7678: LD_LOC 11
7682: PUSH
7683: LD_INT 5
7685: DIV
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: LD_INT 20
7693: PUSH
7694: LD_LOC 11
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: PPUSH
7709: CALL_OW 423
7713: GO 7639
7715: POP
7716: POP
// end ;
7717: LD_VAR 0 1
7721: RET
// every 1 do var un ;
7722: GO 7724
7724: DISABLE
7725: LD_INT 0
7727: PPUSH
// begin if not def_morale_flags then
7728: LD_EXP 9
7732: NOT
7733: IFFALSE 7737
// exit ;
7735: GO 7814
// if not morale_decreasing_time then
7737: LD_EXP 24
7741: NOT
7742: IFFALSE 7746
// exit ;
7744: GO 7814
// strength = 100 ;
7746: LD_ADDR_LOC 11
7750: PUSH
7751: LD_INT 100
7753: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7754: LD_EXP 24
7758: PPUSH
7759: CALL_OW 67
// strength := strength - 1 ;
7763: LD_ADDR_LOC 11
7767: PUSH
7768: LD_LOC 11
7772: PUSH
7773: LD_INT 1
7775: MINUS
7776: ST_TO_ADDR
// Update_Flags ;
7777: CALL 7625 0 0
// until not strength ;
7781: LD_LOC 11
7785: NOT
7786: IFFALSE 7754
// for un in battle_flags_id do
7788: LD_ADDR_VAR 0 1
7792: PUSH
7793: LD_EXP 44
7797: PUSH
7798: FOR_IN
7799: IFFALSE 7812
// KillBattleFlag ( un ) ;
7801: LD_VAR 0 1
7805: PPUSH
7806: CALL_OW 419
7810: GO 7798
7812: POP
7813: POP
// end ; end_of_file
7814: PPOPN 1
7816: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7817: LD_INT 0
7819: PPUSH
7820: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7821: LD_ADDR_VAR 0 2
7825: PUSH
7826: LD_STRING #Multi1x1-Time
7828: PUSH
7829: LD_OWVAR 1
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: ST_TO_ADDR
// if WaitServerStrings then
7838: LD_EXP 54
7842: IFFALSE 7860
// AllStrings = AllStrings ^ WaitServerStrings ;
7844: LD_ADDR_VAR 0 2
7848: PUSH
7849: LD_VAR 0 2
7853: PUSH
7854: LD_EXP 54
7858: ADD
7859: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7860: LD_INT 0
7862: PUSH
7863: LD_EXP 29
7867: PUSH
7868: LD_OWVAR 1
7872: MINUS
7873: LESSEQUAL
7874: IFFALSE 7905
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7876: LD_ADDR_VAR 0 2
7880: PUSH
7881: LD_VAR 0 2
7885: PUSH
7886: LD_STRING #allowedsibbomb
7888: PUSH
7889: LD_EXP 29
7893: PUSH
7894: LD_OWVAR 1
7898: MINUS
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: ADD
7904: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7905: LD_INT 0
7907: PUSH
7908: LD_EXP 57
7912: PUSH
7913: LD_OWVAR 1
7917: MINUS
7918: LESSEQUAL
7919: IFFALSE 7950
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7921: LD_ADDR_VAR 0 2
7925: PUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_STRING #builduptime
7933: PUSH
7934: LD_EXP 57
7938: PUSH
7939: LD_OWVAR 1
7943: MINUS
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: ADD
7949: ST_TO_ADDR
// if ( ExtraStrings ) then
7950: LD_EXP 53
7954: IFFALSE 7976
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7956: LD_ADDR_VAR 0 2
7960: PUSH
7961: LD_VAR 0 2
7965: PUSH
7966: LD_STRING 
7968: ADD
7969: PUSH
7970: LD_EXP 53
7974: ADD
7975: ST_TO_ADDR
// Display_Strings := AllStrings ;
7976: LD_ADDR_OWVAR 47
7980: PUSH
7981: LD_VAR 0 2
7985: ST_TO_ADDR
// end ;
7986: LD_VAR 0 1
7990: RET
// every 0 0$1 do
7991: GO 7993
7993: DISABLE
// begin ShowTimer ;
7994: CALL 7817 0 0
// enable ;
7998: ENABLE
// end ; end_of_file
7999: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
8000: LD_INT 0
8002: PPUSH
8003: PPUSH
8004: PPUSH
// BuildUpTime_Delay = 0 ;
8005: LD_ADDR_EXP 57
8009: PUSH
8010: LD_INT 0
8012: ST_TO_ADDR
// if not def_builduptime then
8013: LD_EXP 14
8017: NOT
8018: IFFALSE 8022
// exit ;
8020: GO 8205
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
8022: LD_ADDR_EXP 57
8026: PUSH
8027: LD_INT 8400
8029: PUSH
8030: LD_INT 2100
8032: PUSH
8033: LD_EXP 14
8037: MUL
8038: PLUS
8039: ST_TO_ADDR
// BuildUpTimeActive := true ;
8040: LD_ADDR_EXP 56
8044: PUSH
8045: LD_INT 1
8047: ST_TO_ADDR
// for i := 1 to 8 do
8048: LD_ADDR_VAR 0 2
8052: PUSH
8053: DOUBLE
8054: LD_INT 1
8056: DEC
8057: ST_TO_ADDR
8058: LD_INT 8
8060: PUSH
8061: FOR_TO
8062: IFFALSE 8203
// if Side_Positions [ i ] then
8064: LD_EXP 34
8068: PUSH
8069: LD_VAR 0 2
8073: ARRAY
8074: IFFALSE 8201
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
8076: LD_EXP 55
8080: PUSH
8081: LD_EXP 34
8085: PUSH
8086: LD_VAR 0 2
8090: ARRAY
8091: ARRAY
8092: PPUSH
8093: LD_INT 5
8095: PPUSH
8096: CALL_OW 424
// for j := 1 to 8 do
8100: LD_ADDR_VAR 0 3
8104: PUSH
8105: DOUBLE
8106: LD_INT 1
8108: DEC
8109: ST_TO_ADDR
8110: LD_INT 8
8112: PUSH
8113: FOR_TO
8114: IFFALSE 8199
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8116: LD_EXP 34
8120: PUSH
8121: LD_VAR 0 3
8125: ARRAY
8126: PUSH
8127: LD_EXP 31
8131: PUSH
8132: LD_VAR 0 2
8136: ARRAY
8137: PUSH
8138: LD_EXP 31
8142: PUSH
8143: LD_VAR 0 3
8147: ARRAY
8148: NONEQUAL
8149: PUSH
8150: LD_EXP 36
8154: NOT
8155: PUSH
8156: LD_VAR 0 2
8160: PUSH
8161: LD_VAR 0 3
8165: NONEQUAL
8166: AND
8167: OR
8168: AND
8169: IFFALSE 8197
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8171: LD_VAR 0 3
8175: PPUSH
8176: LD_EXP 55
8180: PUSH
8181: LD_EXP 34
8185: PUSH
8186: LD_VAR 0 2
8190: ARRAY
8191: ARRAY
8192: PPUSH
8193: CALL_OW 333
8197: GO 8113
8199: POP
8200: POP
// end ;
8201: GO 8061
8203: POP
8204: POP
// end ;
8205: LD_VAR 0 1
8209: RET
// export function EndBuildUp ; var i , j ; begin
8210: LD_INT 0
8212: PPUSH
8213: PPUSH
8214: PPUSH
// BuildUpTimeActive := false ;
8215: LD_ADDR_EXP 56
8219: PUSH
8220: LD_INT 0
8222: ST_TO_ADDR
// for i := 1 to 8 do
8223: LD_ADDR_VAR 0 2
8227: PUSH
8228: DOUBLE
8229: LD_INT 1
8231: DEC
8232: ST_TO_ADDR
8233: LD_INT 8
8235: PUSH
8236: FOR_TO
8237: IFFALSE 8378
// if Side_Positions [ i ] then
8239: LD_EXP 34
8243: PUSH
8244: LD_VAR 0 2
8248: ARRAY
8249: IFFALSE 8376
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
8251: LD_EXP 55
8255: PUSH
8256: LD_EXP 34
8260: PUSH
8261: LD_VAR 0 2
8265: ARRAY
8266: ARRAY
8267: PPUSH
8268: LD_INT 0
8270: PPUSH
8271: CALL_OW 424
// for j := 1 to 8 do
8275: LD_ADDR_VAR 0 3
8279: PUSH
8280: DOUBLE
8281: LD_INT 1
8283: DEC
8284: ST_TO_ADDR
8285: LD_INT 8
8287: PUSH
8288: FOR_TO
8289: IFFALSE 8374
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8291: LD_EXP 34
8295: PUSH
8296: LD_VAR 0 3
8300: ARRAY
8301: PUSH
8302: LD_EXP 31
8306: PUSH
8307: LD_VAR 0 2
8311: ARRAY
8312: PUSH
8313: LD_EXP 31
8317: PUSH
8318: LD_VAR 0 3
8322: ARRAY
8323: NONEQUAL
8324: PUSH
8325: LD_EXP 36
8329: NOT
8330: PUSH
8331: LD_VAR 0 2
8335: PUSH
8336: LD_VAR 0 3
8340: NONEQUAL
8341: AND
8342: OR
8343: AND
8344: IFFALSE 8372
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8346: LD_VAR 0 3
8350: PPUSH
8351: LD_EXP 55
8355: PUSH
8356: LD_EXP 34
8360: PUSH
8361: LD_VAR 0 2
8365: ARRAY
8366: ARRAY
8367: PPUSH
8368: CALL_OW 334
8372: GO 8288
8374: POP
8375: POP
// end ;
8376: GO 8236
8378: POP
8379: POP
// end ;
8380: LD_VAR 0 1
8384: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
8385: LD_EXP 56
8389: IFFALSE 8564
8391: GO 8393
8393: DISABLE
8394: LD_INT 0
8396: PPUSH
8397: PPUSH
// begin for i := 1 to 8 do
8398: LD_ADDR_VAR 0 1
8402: PUSH
8403: DOUBLE
8404: LD_INT 1
8406: DEC
8407: ST_TO_ADDR
8408: LD_INT 8
8410: PUSH
8411: FOR_TO
8412: IFFALSE 8561
// if Side_Positions [ i ] then
8414: LD_EXP 34
8418: PUSH
8419: LD_VAR 0 1
8423: ARRAY
8424: IFFALSE 8559
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8426: LD_ADDR_VAR 0 2
8430: PUSH
8431: LD_EXP 55
8435: PUSH
8436: LD_EXP 34
8440: PUSH
8441: LD_VAR 0 1
8445: ARRAY
8446: ARRAY
8447: PPUSH
8448: LD_INT 2
8450: PUSH
8451: LD_INT 21
8453: PUSH
8454: LD_INT 1
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 21
8463: PUSH
8464: LD_INT 2
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: LD_INT 22
8478: PUSH
8479: LD_OWVAR 2
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PPUSH
8492: CALL_OW 70
8496: PUSH
8497: FOR_IN
8498: IFFALSE 8557
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
8500: LD_EXP 31
8504: PUSH
8505: LD_VAR 0 1
8509: ARRAY
8510: PUSH
8511: LD_EXP 31
8515: PUSH
8516: LD_OWVAR 2
8520: ARRAY
8521: NONEQUAL
8522: PUSH
8523: LD_EXP 36
8527: NOT
8528: PUSH
8529: LD_VAR 0 1
8533: PUSH
8534: LD_OWVAR 2
8538: NONEQUAL
8539: AND
8540: OR
8541: IFFALSE 8555
// ComMoveToArea ( un , BuildUpEscape ) ;
8543: LD_VAR 0 2
8547: PPUSH
8548: LD_INT 17
8550: PPUSH
8551: CALL_OW 113
8555: GO 8497
8557: POP
8558: POP
8559: GO 8411
8561: POP
8562: POP
// enable ;
8563: ENABLE
// end ;
8564: PPOPN 2
8566: END
// every 0 0$1 trigger def_builduptime do
8567: LD_EXP 14
8571: IFFALSE 8597
8573: GO 8575
8575: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
8576: LD_INT 8400
8578: PUSH
8579: LD_EXP 14
8583: PUSH
8584: LD_INT 2100
8586: MUL
8587: PLUS
8588: PPUSH
8589: CALL_OW 67
// EndBuildUp ;
8593: CALL 8210 0 0
// end ; end_of_file
8597: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8598: LD_INT 0
8600: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8601: LD_VAR 0 1
8605: PPUSH
8606: CALL_OW 255
8610: PUSH
8611: LD_VAR 0 4
8615: EQUAL
8616: IFFALSE 8635
// begin SetAchievement ( ACH_RAD ) ;
8618: LD_STRING ACH_RAD
8620: PPUSH
8621: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8625: LD_STRING ACH_NL
8627: PPUSH
8628: LD_INT 1
8630: PPUSH
8631: CALL_OW 564
// end end ;
8635: LD_VAR 0 5
8639: RET
// export function SA_Win ( side ) ; begin
8640: LD_INT 0
8642: PPUSH
// case side of 1 :
8643: LD_VAR 0 1
8647: PUSH
8648: LD_INT 1
8650: DOUBLE
8651: EQUAL
8652: IFTRUE 8656
8654: GO 8669
8656: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8657: LD_STRING ACH_AH
8659: PPUSH
8660: LD_INT 1
8662: PPUSH
8663: CALL_OW 564
8667: GO 8832
8669: LD_INT 2
8671: DOUBLE
8672: EQUAL
8673: IFTRUE 8677
8675: GO 8690
8677: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8678: LD_STRING ACH_E
8680: PPUSH
8681: LD_INT 1
8683: PPUSH
8684: CALL_OW 564
8688: GO 8832
8690: LD_INT 3
8692: DOUBLE
8693: EQUAL
8694: IFTRUE 8698
8696: GO 8711
8698: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8699: LD_STRING ACH_OOL
8701: PPUSH
8702: LD_INT 1
8704: PPUSH
8705: CALL_OW 564
8709: GO 8832
8711: LD_INT 1
8713: PUSH
8714: LD_INT 2
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: DOUBLE
8721: EQUAL
8722: IFTRUE 8726
8724: GO 8751
8726: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8727: LD_STRING ACH_AH
8729: PPUSH
8730: LD_REAL  5.00000000000000E-0001
8733: PPUSH
8734: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8738: LD_STRING ACH_E
8740: PPUSH
8741: LD_REAL  5.00000000000000E-0001
8744: PPUSH
8745: CALL_OW 564
// end ; [ 2 , 3 ] :
8749: GO 8832
8751: LD_INT 2
8753: PUSH
8754: LD_INT 3
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: DOUBLE
8761: EQUAL
8762: IFTRUE 8766
8764: GO 8791
8766: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8767: LD_STRING ACH_OOL
8769: PPUSH
8770: LD_REAL  5.00000000000000E-0001
8773: PPUSH
8774: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8778: LD_STRING ACH_E
8780: PPUSH
8781: LD_REAL  5.00000000000000E-0001
8784: PPUSH
8785: CALL_OW 564
// end ; [ 3 , 1 ] :
8789: GO 8832
8791: LD_INT 3
8793: PUSH
8794: LD_INT 1
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: DOUBLE
8801: EQUAL
8802: IFTRUE 8806
8804: GO 8831
8806: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8807: LD_STRING ACH_AH
8809: PPUSH
8810: LD_REAL  5.00000000000000E-0001
8813: PPUSH
8814: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8818: LD_STRING ACH_OOL
8820: PPUSH
8821: LD_REAL  5.00000000000000E-0001
8824: PPUSH
8825: CALL_OW 564
// end ; end ;
8829: GO 8832
8831: POP
// end ; end_of_file
8832: LD_VAR 0 2
8836: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
8837: LD_INT 0
8839: PPUSH
8840: PPUSH
// enable ( 98 ) ;
8841: LD_INT 98
8843: ENABLE_MARKED
// GameEnded = false ;
8844: LD_ADDR_LOC 17
8848: PUSH
8849: LD_INT 0
8851: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8852: LD_ADDR_LOC 16
8856: PUSH
8857: LD_INT 0
8859: PUSH
8860: LD_INT 0
8862: PUSH
8863: LD_INT 0
8865: PUSH
8866: LD_INT 0
8868: PUSH
8869: LD_INT 0
8871: PUSH
8872: LD_INT 0
8874: PUSH
8875: LD_INT 0
8877: PUSH
8878: LD_INT 0
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: ST_TO_ADDR
// unfoged = false ;
8891: LD_ADDR_LOC 18
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// for i = 1 to side_positions do
8899: LD_ADDR_VAR 0 2
8903: PUSH
8904: DOUBLE
8905: LD_INT 1
8907: DEC
8908: ST_TO_ADDR
8909: LD_EXP 34
8913: PUSH
8914: FOR_TO
8915: IFFALSE 8955
// if not side_positions [ i ] then
8917: LD_EXP 34
8921: PUSH
8922: LD_VAR 0 2
8926: ARRAY
8927: NOT
8928: IFFALSE 8953
// defaited = replace ( defaited , i , true ) ;
8930: LD_ADDR_LOC 16
8934: PUSH
8935: LD_LOC 16
8939: PPUSH
8940: LD_VAR 0 2
8944: PPUSH
8945: LD_INT 1
8947: PPUSH
8948: CALL_OW 1
8952: ST_TO_ADDR
8953: GO 8914
8955: POP
8956: POP
// end ;
8957: LD_VAR 0 1
8961: RET
// function CanWinLoose ; begin
8962: LD_INT 0
8964: PPUSH
// Result := true ;
8965: LD_ADDR_VAR 0 1
8969: PUSH
8970: LD_INT 1
8972: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8973: CALL_OW 518
8977: PUSH
8978: CALL_OW 519
8982: PUSH
8983: LD_INT 0
8985: GREATER
8986: AND
8987: IFFALSE 8997
// Result := false ;
8989: LD_ADDR_VAR 0 1
8993: PUSH
8994: LD_INT 0
8996: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8997: CALL_OW 531
9001: PUSH
9002: CALL_OW 519
9006: PUSH
9007: LD_INT 1
9009: GREATER
9010: AND
9011: IFFALSE 9021
// Result := false ;
9013: LD_ADDR_VAR 0 1
9017: PUSH
9018: LD_INT 0
9020: ST_TO_ADDR
// end ;
9021: LD_VAR 0 1
9025: RET
// export function HasPower ( i ) ; var k , h ; begin
9026: LD_INT 0
9028: PPUSH
9029: PPUSH
9030: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
9031: LD_VAR 0 1
9035: PPUSH
9036: CALL_OW 108
9040: NOT
9041: PUSH
9042: LD_EXP 33
9046: PUSH
9047: LD_VAR 0 1
9051: ARRAY
9052: NOT
9053: AND
9054: PUSH
9055: LD_OWVAR 4
9059: AND
9060: IFFALSE 9072
// begin result = false ;
9062: LD_ADDR_VAR 0 2
9066: PUSH
9067: LD_INT 0
9069: ST_TO_ADDR
// end else
9070: GO 9367
// case def_win_rules of 0 :
9072: LD_EXP 30
9076: PUSH
9077: LD_INT 0
9079: DOUBLE
9080: EQUAL
9081: IFTRUE 9085
9083: GO 9248
9085: POP
// if def_people_respawning then
9086: LD_EXP 11
9090: IFFALSE 9181
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
9092: LD_ADDR_VAR 0 2
9096: PUSH
9097: LD_INT 22
9099: PUSH
9100: LD_VAR 0 1
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: PUSH
9109: LD_INT 2
9111: PUSH
9112: LD_INT 21
9114: PUSH
9115: LD_INT 1
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: LD_INT 33
9124: PUSH
9125: LD_INT 3
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 33
9134: PUSH
9135: LD_INT 5
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 30
9144: PUSH
9145: LD_INT 0
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: LD_INT 30
9154: PUSH
9155: LD_INT 1
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PPUSH
9174: CALL_OW 69
9178: ST_TO_ADDR
9179: GO 9246
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
9181: LD_ADDR_VAR 0 2
9185: PUSH
9186: LD_INT 22
9188: PUSH
9189: LD_VAR 0 1
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 2
9200: PUSH
9201: LD_INT 21
9203: PUSH
9204: LD_INT 1
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: LD_INT 33
9213: PUSH
9214: LD_INT 3
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 33
9223: PUSH
9224: LD_INT 5
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PPUSH
9241: CALL_OW 69
9245: ST_TO_ADDR
9246: GO 9367
9248: LD_INT 1
9250: DOUBLE
9251: EQUAL
9252: IFTRUE 9256
9254: GO 9295
9256: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
9257: LD_ADDR_VAR 0 2
9261: PUSH
9262: LD_INT 22
9264: PUSH
9265: LD_VAR 0 1
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 21
9276: PUSH
9277: LD_INT 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PPUSH
9288: CALL_OW 69
9292: ST_TO_ADDR
9293: GO 9367
9295: LD_INT 2
9297: DOUBLE
9298: EQUAL
9299: IFTRUE 9303
9301: GO 9366
9303: POP
// begin h = false ;
9304: LD_ADDR_VAR 0 4
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// for k in heroes [ i ] do
9312: LD_ADDR_VAR 0 3
9316: PUSH
9317: LD_EXP 45
9321: PUSH
9322: LD_VAR 0 1
9326: ARRAY
9327: PUSH
9328: FOR_IN
9329: IFFALSE 9352
// if IsLive ( k ) then
9331: LD_VAR 0 3
9335: PPUSH
9336: CALL_OW 300
9340: IFFALSE 9350
// h = true ;
9342: LD_ADDR_VAR 0 4
9346: PUSH
9347: LD_INT 1
9349: ST_TO_ADDR
9350: GO 9328
9352: POP
9353: POP
// Result := h ;
9354: LD_ADDR_VAR 0 2
9358: PUSH
9359: LD_VAR 0 4
9363: ST_TO_ADDR
// end ; end ;
9364: GO 9367
9366: POP
// end ;
9367: LD_VAR 0 2
9371: RET
// function AlliedSides ( i , j ) ; begin
9372: LD_INT 0
9374: PPUSH
// Result := false ;
9375: LD_ADDR_VAR 0 3
9379: PUSH
9380: LD_INT 0
9382: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9383: LD_VAR 0 1
9387: PPUSH
9388: LD_VAR 0 2
9392: PPUSH
9393: CALL_OW 81
9397: PUSH
9398: LD_INT 1
9400: EQUAL
9401: PUSH
9402: LD_VAR 0 2
9406: PPUSH
9407: LD_VAR 0 1
9411: PPUSH
9412: CALL_OW 81
9416: PUSH
9417: LD_INT 1
9419: EQUAL
9420: AND
9421: PUSH
9422: LD_VAR 0 1
9426: PPUSH
9427: CALL_OW 83
9431: AND
9432: PUSH
9433: LD_VAR 0 2
9437: PPUSH
9438: CALL_OW 83
9442: AND
9443: IFFALSE 9453
// Result := true ;
9445: LD_ADDR_VAR 0 3
9449: PUSH
9450: LD_INT 1
9452: ST_TO_ADDR
// end ;
9453: LD_VAR 0 3
9457: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9458: CALL 8962 0 0
9462: PUSH
9463: LD_LOC 17
9467: NOT
9468: AND
9469: IFFALSE 9485
9471: GO 9473
9473: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9474: LD_ADDR_EXP 54
9478: PUSH
9479: LD_STRING #Player-Ended
9481: PUSH
9482: EMPTY
9483: LIST
9484: ST_TO_ADDR
9485: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9486: CALL 8962 0 0
9490: PUSH
9491: LD_LOC 17
9495: AND
9496: IFFALSE 9505
9498: GO 9500
9500: DISABLE
// YouLostInMultiplayer ;
9501: CALL_OW 107
9505: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9506: CALL 8962 0 0
9510: NOT
9511: PUSH
9512: CALL_OW 531
9516: NOT
9517: AND
9518: IFFALSE 9534
9520: GO 9522
9522: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9523: LD_ADDR_EXP 54
9527: PUSH
9528: LD_STRING #server-wait
9530: PUSH
9531: EMPTY
9532: LIST
9533: ST_TO_ADDR
9534: END
// every 100 trigger IAmSpec do
9535: CALL_OW 531
9539: IFFALSE 9555
9541: GO 9543
9543: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9544: LD_ADDR_EXP 54
9548: PUSH
9549: LD_STRING #Player-IAmSpec
9551: PUSH
9552: EMPTY
9553: LIST
9554: ST_TO_ADDR
9555: END
// every 100 trigger GameEnded and IAmSpec do
9556: LD_LOC 17
9560: PUSH
9561: CALL_OW 531
9565: AND
9566: IFFALSE 9575
9568: GO 9570
9570: DISABLE
// YouLostInMultiplayer ;
9571: CALL_OW 107
9575: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9576: CALL 8962 0 0
9580: PUSH
9581: LD_LOC 17
9585: NOT
9586: AND
9587: IFFALSE 9603
9589: GO 9591
9591: DISABLE
// WaitServerStrings = [ $player-win ] ;
9592: LD_ADDR_EXP 54
9596: PUSH
9597: LD_STRING $player-win
9599: PUSH
9600: EMPTY
9601: LIST
9602: ST_TO_ADDR
9603: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9604: CALL 8962 0 0
9608: PUSH
9609: LD_LOC 17
9613: AND
9614: IFFALSE 9638
9616: GO 9618
9618: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
9619: LD_EXP 35
9623: PUSH
9624: LD_OWVAR 2
9628: ARRAY
9629: PPUSH
9630: CALL 8640 0 1
// YouWinInMultiplayer ;
9634: CALL_OW 106
// end ;
9638: END
// every 100 trigger isEditor marked 401 do
9639: LD_OWVAR 84
9643: IFFALSE 9659
9645: GO 9647
9647: DISABLE
// Debug_Strings = [ You won ] ;
9648: LD_ADDR_OWVAR 48
9652: PUSH
9653: LD_STRING You won
9655: PUSH
9656: EMPTY
9657: LIST
9658: ST_TO_ADDR
9659: END
// every 100 trigger isEditor marked 400 do
9660: LD_OWVAR 84
9664: IFFALSE 9680
9666: GO 9668
9668: DISABLE
// Debug_Strings = [ You loss ] ;
9669: LD_ADDR_OWVAR 48
9673: PUSH
9674: LD_STRING You loss
9676: PUSH
9677: EMPTY
9678: LIST
9679: ST_TO_ADDR
9680: END
// every 100 marked 98 do var i , un ;
9681: GO 9683
9683: DISABLE
9684: LD_INT 0
9686: PPUSH
9687: PPUSH
// begin for i = 1 to side_positions do
9688: LD_ADDR_VAR 0 1
9692: PUSH
9693: DOUBLE
9694: LD_INT 1
9696: DEC
9697: ST_TO_ADDR
9698: LD_EXP 34
9702: PUSH
9703: FOR_TO
9704: IFFALSE 9787
// if side_positions [ i ] then
9706: LD_EXP 34
9710: PUSH
9711: LD_VAR 0 1
9715: ARRAY
9716: IFFALSE 9785
// if not HasPower ( i ) and not Defaited [ i ] then
9718: LD_VAR 0 1
9722: PPUSH
9723: CALL 9026 0 1
9727: NOT
9728: PUSH
9729: LD_LOC 16
9733: PUSH
9734: LD_VAR 0 1
9738: ARRAY
9739: NOT
9740: AND
9741: IFFALSE 9785
// begin Defaited = replace ( Defaited , i , true ) ;
9743: LD_ADDR_LOC 16
9747: PUSH
9748: LD_LOC 16
9752: PPUSH
9753: LD_VAR 0 1
9757: PPUSH
9758: LD_INT 1
9760: PPUSH
9761: CALL_OW 1
9765: ST_TO_ADDR
// if i = your_side then
9766: LD_VAR 0 1
9770: PUSH
9771: LD_OWVAR 2
9775: EQUAL
9776: IFFALSE 9785
// begin Multiplayer_Loose_Message ;
9778: CALL_OW 521
// enable ( 400 ) ;
9782: LD_INT 400
9784: ENABLE_MARKED
// end ; end ;
9785: GO 9703
9787: POP
9788: POP
// if not Unfoged and defaited [ your_side ] then
9789: LD_LOC 18
9793: NOT
9794: PUSH
9795: LD_LOC 16
9799: PUSH
9800: LD_OWVAR 2
9804: ARRAY
9805: AND
9806: IFFALSE 9812
// Unfog ;
9808: CALL 9988 0 0
// DidGameEnd ;
9812: CALL 9827 0 0
// if not GameEnded then
9816: LD_LOC 17
9820: NOT
9821: IFFALSE 9824
// enable ;
9823: ENABLE
// end ;
9824: PPOPN 2
9826: END
// function DidGameEnd ; var i , k , enemy ; begin
9827: LD_INT 0
9829: PPUSH
9830: PPUSH
9831: PPUSH
9832: PPUSH
// enemy = [ ] ;
9833: LD_ADDR_VAR 0 4
9837: PUSH
9838: EMPTY
9839: ST_TO_ADDR
// for i = 1 to side_positions do
9840: LD_ADDR_VAR 0 2
9844: PUSH
9845: DOUBLE
9846: LD_INT 1
9848: DEC
9849: ST_TO_ADDR
9850: LD_EXP 34
9854: PUSH
9855: FOR_TO
9856: IFFALSE 9950
// if not defaited [ i ] then
9858: LD_LOC 16
9862: PUSH
9863: LD_VAR 0 2
9867: ARRAY
9868: NOT
9869: IFFALSE 9948
// for k = 1 to side_positions do
9871: LD_ADDR_VAR 0 3
9875: PUSH
9876: DOUBLE
9877: LD_INT 1
9879: DEC
9880: ST_TO_ADDR
9881: LD_EXP 34
9885: PUSH
9886: FOR_TO
9887: IFFALSE 9946
// if not defaited [ k ] then
9889: LD_LOC 16
9893: PUSH
9894: LD_VAR 0 3
9898: ARRAY
9899: NOT
9900: IFFALSE 9944
// if not AlliedSides ( i , k ) then
9902: LD_VAR 0 2
9906: PPUSH
9907: LD_VAR 0 3
9911: PPUSH
9912: CALL 9372 0 2
9916: NOT
9917: IFFALSE 9944
// enemy = enemy ^ [ i , k ] ;
9919: LD_ADDR_VAR 0 4
9923: PUSH
9924: LD_VAR 0 4
9928: PUSH
9929: LD_VAR 0 2
9933: PUSH
9934: LD_VAR 0 3
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: ADD
9943: ST_TO_ADDR
9944: GO 9886
9946: POP
9947: POP
9948: GO 9855
9950: POP
9951: POP
// if not enemy then
9952: LD_VAR 0 4
9956: NOT
9957: IFFALSE 9983
// begin GameEnded = true ;
9959: LD_ADDR_LOC 17
9963: PUSH
9964: LD_INT 1
9966: ST_TO_ADDR
// if not defaited [ your_side ] then
9967: LD_LOC 16
9971: PUSH
9972: LD_OWVAR 2
9976: ARRAY
9977: NOT
9978: IFFALSE 9983
// enable ( 401 ) ;
9980: LD_INT 401
9982: ENABLE_MARKED
// end ; end ;
9983: LD_VAR 0 1
9987: RET
// function unfog ; var k , friends ; begin
9988: LD_INT 0
9990: PPUSH
9991: PPUSH
9992: PPUSH
// SetPlayerSpectator ( ) ;
9993: CALL_OW 572
// unfoged = true ;
9997: LD_ADDR_LOC 18
10001: PUSH
10002: LD_INT 1
10004: ST_TO_ADDR
// end ;
10005: LD_VAR 0 1
10009: RET
// export function MakeGameEnd ; begin
10010: LD_INT 0
10012: PPUSH
// SetPlayerSpectator ( ) ;
10013: CALL_OW 572
// unfoged = true ;
10017: LD_ADDR_LOC 18
10021: PUSH
10022: LD_INT 1
10024: ST_TO_ADDR
// wait ( 0 0$5 ) ;
10025: LD_INT 175
10027: PPUSH
10028: CALL_OW 67
// GameEnded = true ;
10032: LD_ADDR_LOC 17
10036: PUSH
10037: LD_INT 1
10039: ST_TO_ADDR
// end ;
10040: LD_VAR 0 1
10044: RET
// export function GetGameEnded ; begin
10045: LD_INT 0
10047: PPUSH
// result = GameEnded ;
10048: LD_ADDR_VAR 0 1
10052: PUSH
10053: LD_LOC 17
10057: ST_TO_ADDR
// end ; end_of_file
10058: LD_VAR 0 1
10062: RET
// export function SetMpTechs ( ) ; var side , i ; begin
10063: LD_INT 0
10065: PPUSH
10066: PPUSH
10067: PPUSH
// for side = 1 to 8 do
10068: LD_ADDR_VAR 0 2
10072: PUSH
10073: DOUBLE
10074: LD_INT 1
10076: DEC
10077: ST_TO_ADDR
10078: LD_INT 8
10080: PUSH
10081: FOR_TO
10082: IFFALSE 10203
// begin for i = 1 to 72 do
10084: LD_ADDR_VAR 0 3
10088: PUSH
10089: DOUBLE
10090: LD_INT 1
10092: DEC
10093: ST_TO_ADDR
10094: LD_INT 72
10096: PUSH
10097: FOR_TO
10098: IFFALSE 10129
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
10100: LD_VAR 0 3
10104: PPUSH
10105: LD_VAR 0 2
10109: PPUSH
10110: LD_INT 0
10112: PPUSH
10113: LD_VAR 0 3
10117: PPUSH
10118: CALL_OW 565
10122: PPUSH
10123: CALL_OW 322
10127: GO 10097
10129: POP
10130: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
10131: LD_INT 73
10133: PPUSH
10134: LD_VAR 0 2
10138: PPUSH
10139: LD_INT 0
10141: PPUSH
10142: LD_INT 25
10144: PPUSH
10145: CALL_OW 565
10149: PPUSH
10150: CALL_OW 322
// for i = 0 to 40 do
10154: LD_ADDR_VAR 0 3
10158: PUSH
10159: DOUBLE
10160: LD_INT 0
10162: DEC
10163: ST_TO_ADDR
10164: LD_INT 40
10166: PUSH
10167: FOR_TO
10168: IFFALSE 10199
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
10170: LD_VAR 0 3
10174: PPUSH
10175: LD_VAR 0 2
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: LD_VAR 0 3
10187: PPUSH
10188: CALL_OW 565
10192: PPUSH
10193: CALL_OW 324
10197: GO 10167
10199: POP
10200: POP
// end ;
10201: GO 10081
10203: POP
10204: POP
// end ;
10205: LD_VAR 0 1
10209: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
10210: LD_INT 0
10212: PPUSH
10213: PPUSH
10214: PPUSH
// for side = 1 to 8 do
10215: LD_ADDR_VAR 0 3
10219: PUSH
10220: DOUBLE
10221: LD_INT 1
10223: DEC
10224: ST_TO_ADDR
10225: LD_INT 8
10227: PUSH
10228: FOR_TO
10229: IFFALSE 14225
// begin for i = 1 to 73 do
10231: LD_ADDR_VAR 0 4
10235: PUSH
10236: DOUBLE
10237: LD_INT 1
10239: DEC
10240: ST_TO_ADDR
10241: LD_INT 73
10243: PUSH
10244: FOR_TO
10245: IFFALSE 10266
// SetTech ( i , side , state_disabled ) ;
10247: LD_VAR 0 4
10251: PPUSH
10252: LD_VAR 0 3
10256: PPUSH
10257: LD_INT 0
10259: PPUSH
10260: CALL_OW 322
10264: GO 10244
10266: POP
10267: POP
// for i = 0 to 40 do
10268: LD_ADDR_VAR 0 4
10272: PUSH
10273: DOUBLE
10274: LD_INT 0
10276: DEC
10277: ST_TO_ADDR
10278: LD_INT 40
10280: PUSH
10281: FOR_TO
10282: IFFALSE 10303
// SetRestrict ( i , side , false ) ;
10284: LD_VAR 0 4
10288: PPUSH
10289: LD_VAR 0 3
10293: PPUSH
10294: LD_INT 0
10296: PPUSH
10297: CALL_OW 324
10301: GO 10281
10303: POP
10304: POP
// case level of 1 :
10305: LD_VAR 0 1
10309: PUSH
10310: LD_INT 1
10312: DOUBLE
10313: EQUAL
10314: IFTRUE 10318
10316: GO 10471
10318: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10319: LD_INT 35
10321: PPUSH
10322: LD_VAR 0 3
10326: PPUSH
10327: LD_INT 1
10329: PPUSH
10330: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10334: LD_INT 45
10336: PPUSH
10337: LD_VAR 0 3
10341: PPUSH
10342: LD_INT 1
10344: PPUSH
10345: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10349: LD_INT 46
10351: PPUSH
10352: LD_VAR 0 3
10356: PPUSH
10357: LD_INT 1
10359: PPUSH
10360: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10364: LD_INT 47
10366: PPUSH
10367: LD_VAR 0 3
10371: PPUSH
10372: LD_INT 1
10374: PPUSH
10375: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10379: LD_INT 0
10381: PPUSH
10382: LD_VAR 0 3
10386: PPUSH
10387: LD_INT 1
10389: PPUSH
10390: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10394: LD_INT 2
10396: PPUSH
10397: LD_VAR 0 3
10401: PPUSH
10402: LD_INT 1
10404: PPUSH
10405: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10409: LD_INT 4
10411: PPUSH
10412: LD_VAR 0 3
10416: PPUSH
10417: LD_INT 1
10419: PPUSH
10420: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10424: LD_INT 6
10426: PPUSH
10427: LD_VAR 0 3
10431: PPUSH
10432: LD_INT 1
10434: PPUSH
10435: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10439: LD_INT 29
10441: PPUSH
10442: LD_VAR 0 3
10446: PPUSH
10447: LD_INT 1
10449: PPUSH
10450: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10454: LD_INT 31
10456: PPUSH
10457: LD_VAR 0 3
10461: PPUSH
10462: LD_INT 1
10464: PPUSH
10465: CALL_OW 324
// end ; 2 :
10469: GO 14223
10471: LD_INT 2
10473: DOUBLE
10474: EQUAL
10475: IFTRUE 10479
10477: GO 10677
10479: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10480: LD_INT 35
10482: PPUSH
10483: LD_VAR 0 3
10487: PPUSH
10488: LD_INT 1
10490: PPUSH
10491: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10495: LD_INT 45
10497: PPUSH
10498: LD_VAR 0 3
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10510: LD_INT 46
10512: PPUSH
10513: LD_VAR 0 3
10517: PPUSH
10518: LD_INT 1
10520: PPUSH
10521: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10525: LD_INT 47
10527: PPUSH
10528: LD_VAR 0 3
10532: PPUSH
10533: LD_INT 1
10535: PPUSH
10536: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10540: LD_INT 1
10542: PPUSH
10543: LD_VAR 0 3
10547: PPUSH
10548: LD_INT 1
10550: PPUSH
10551: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10555: LD_INT 2
10557: PPUSH
10558: LD_VAR 0 3
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10570: LD_INT 11
10572: PPUSH
10573: LD_VAR 0 3
10577: PPUSH
10578: LD_INT 1
10580: PPUSH
10581: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10585: LD_INT 0
10587: PPUSH
10588: LD_VAR 0 3
10592: PPUSH
10593: LD_INT 1
10595: PPUSH
10596: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10600: LD_INT 2
10602: PPUSH
10603: LD_VAR 0 3
10607: PPUSH
10608: LD_INT 1
10610: PPUSH
10611: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10615: LD_INT 4
10617: PPUSH
10618: LD_VAR 0 3
10622: PPUSH
10623: LD_INT 1
10625: PPUSH
10626: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10630: LD_INT 6
10632: PPUSH
10633: LD_VAR 0 3
10637: PPUSH
10638: LD_INT 1
10640: PPUSH
10641: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10645: LD_INT 29
10647: PPUSH
10648: LD_VAR 0 3
10652: PPUSH
10653: LD_INT 1
10655: PPUSH
10656: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10660: LD_INT 31
10662: PPUSH
10663: LD_VAR 0 3
10667: PPUSH
10668: LD_INT 1
10670: PPUSH
10671: CALL_OW 324
// end ; 3 :
10675: GO 14223
10677: LD_INT 3
10679: DOUBLE
10680: EQUAL
10681: IFTRUE 10685
10683: GO 11138
10685: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10686: LD_INT 35
10688: PPUSH
10689: LD_VAR 0 3
10693: PPUSH
10694: LD_INT 1
10696: PPUSH
10697: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10701: LD_INT 45
10703: PPUSH
10704: LD_VAR 0 3
10708: PPUSH
10709: LD_INT 1
10711: PPUSH
10712: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10716: LD_INT 46
10718: PPUSH
10719: LD_VAR 0 3
10723: PPUSH
10724: LD_INT 1
10726: PPUSH
10727: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10731: LD_INT 47
10733: PPUSH
10734: LD_VAR 0 3
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10746: LD_INT 1
10748: PPUSH
10749: LD_VAR 0 3
10753: PPUSH
10754: LD_INT 1
10756: PPUSH
10757: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10761: LD_INT 2
10763: PPUSH
10764: LD_VAR 0 3
10768: PPUSH
10769: LD_INT 1
10771: PPUSH
10772: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10776: LD_INT 11
10778: PPUSH
10779: LD_VAR 0 3
10783: PPUSH
10784: LD_INT 1
10786: PPUSH
10787: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10791: LD_INT 48
10793: PPUSH
10794: LD_VAR 0 3
10798: PPUSH
10799: LD_INT 1
10801: PPUSH
10802: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10806: LD_INT 69
10808: PPUSH
10809: LD_VAR 0 3
10813: PPUSH
10814: LD_INT 1
10816: PPUSH
10817: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10821: LD_INT 39
10823: PPUSH
10824: LD_VAR 0 3
10828: PPUSH
10829: LD_INT 1
10831: PPUSH
10832: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10836: LD_INT 43
10838: PPUSH
10839: LD_VAR 0 3
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10851: LD_INT 51
10853: PPUSH
10854: LD_VAR 0 3
10858: PPUSH
10859: LD_INT 1
10861: PPUSH
10862: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10866: LD_INT 6
10868: PPUSH
10869: LD_VAR 0 3
10873: PPUSH
10874: LD_INT 1
10876: PPUSH
10877: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10881: LD_INT 0
10883: PPUSH
10884: LD_VAR 0 3
10888: PPUSH
10889: LD_INT 1
10891: PPUSH
10892: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10896: LD_INT 2
10898: PPUSH
10899: LD_VAR 0 3
10903: PPUSH
10904: LD_INT 1
10906: PPUSH
10907: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10911: LD_INT 3
10913: PPUSH
10914: LD_VAR 0 3
10918: PPUSH
10919: LD_INT 1
10921: PPUSH
10922: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10926: LD_INT 4
10928: PPUSH
10929: LD_VAR 0 3
10933: PPUSH
10934: LD_INT 1
10936: PPUSH
10937: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10941: LD_INT 6
10943: PPUSH
10944: LD_VAR 0 3
10948: PPUSH
10949: LD_INT 1
10951: PPUSH
10952: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10956: LD_INT 7
10958: PPUSH
10959: LD_VAR 0 3
10963: PPUSH
10964: LD_INT 1
10966: PPUSH
10967: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10971: LD_INT 8
10973: PPUSH
10974: LD_VAR 0 3
10978: PPUSH
10979: LD_INT 1
10981: PPUSH
10982: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10986: LD_INT 10
10988: PPUSH
10989: LD_VAR 0 3
10993: PPUSH
10994: LD_INT 1
10996: PPUSH
10997: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11001: LD_INT 15
11003: PPUSH
11004: LD_VAR 0 3
11008: PPUSH
11009: LD_INT 1
11011: PPUSH
11012: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11016: LD_INT 16
11018: PPUSH
11019: LD_VAR 0 3
11023: PPUSH
11024: LD_INT 1
11026: PPUSH
11027: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11031: LD_INT 17
11033: PPUSH
11034: LD_VAR 0 3
11038: PPUSH
11039: LD_INT 1
11041: PPUSH
11042: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11046: LD_INT 20
11048: PPUSH
11049: LD_VAR 0 3
11053: PPUSH
11054: LD_INT 1
11056: PPUSH
11057: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11061: LD_INT 26
11063: PPUSH
11064: LD_VAR 0 3
11068: PPUSH
11069: LD_INT 1
11071: PPUSH
11072: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11076: LD_INT 27
11078: PPUSH
11079: LD_VAR 0 3
11083: PPUSH
11084: LD_INT 1
11086: PPUSH
11087: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11091: LD_INT 29
11093: PPUSH
11094: LD_VAR 0 3
11098: PPUSH
11099: LD_INT 1
11101: PPUSH
11102: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11106: LD_INT 31
11108: PPUSH
11109: LD_VAR 0 3
11113: PPUSH
11114: LD_INT 1
11116: PPUSH
11117: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11121: LD_INT 32
11123: PPUSH
11124: LD_VAR 0 3
11128: PPUSH
11129: LD_INT 1
11131: PPUSH
11132: CALL_OW 324
// end ; 4 :
11136: GO 14223
11138: LD_INT 4
11140: DOUBLE
11141: EQUAL
11142: IFTRUE 11146
11144: GO 12094
11146: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11147: LD_INT 35
11149: PPUSH
11150: LD_VAR 0 3
11154: PPUSH
11155: LD_INT 1
11157: PPUSH
11158: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11162: LD_INT 45
11164: PPUSH
11165: LD_VAR 0 3
11169: PPUSH
11170: LD_INT 1
11172: PPUSH
11173: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11177: LD_INT 46
11179: PPUSH
11180: LD_VAR 0 3
11184: PPUSH
11185: LD_INT 1
11187: PPUSH
11188: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11192: LD_INT 47
11194: PPUSH
11195: LD_VAR 0 3
11199: PPUSH
11200: LD_INT 1
11202: PPUSH
11203: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11207: LD_INT 1
11209: PPUSH
11210: LD_VAR 0 3
11214: PPUSH
11215: LD_INT 1
11217: PPUSH
11218: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11222: LD_INT 2
11224: PPUSH
11225: LD_VAR 0 3
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11237: LD_INT 11
11239: PPUSH
11240: LD_VAR 0 3
11244: PPUSH
11245: LD_INT 1
11247: PPUSH
11248: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11252: LD_INT 20
11254: PPUSH
11255: LD_VAR 0 3
11259: PPUSH
11260: LD_INT 1
11262: PPUSH
11263: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11267: LD_INT 48
11269: PPUSH
11270: LD_VAR 0 3
11274: PPUSH
11275: LD_INT 1
11277: PPUSH
11278: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11282: LD_INT 49
11284: PPUSH
11285: LD_VAR 0 3
11289: PPUSH
11290: LD_INT 1
11292: PPUSH
11293: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11297: LD_INT 69
11299: PPUSH
11300: LD_VAR 0 3
11304: PPUSH
11305: LD_INT 1
11307: PPUSH
11308: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11312: LD_INT 39
11314: PPUSH
11315: LD_VAR 0 3
11319: PPUSH
11320: LD_INT 1
11322: PPUSH
11323: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11327: LD_INT 34
11329: PPUSH
11330: LD_VAR 0 3
11334: PPUSH
11335: LD_INT 1
11337: PPUSH
11338: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11342: LD_INT 42
11344: PPUSH
11345: LD_VAR 0 3
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11357: LD_INT 44
11359: PPUSH
11360: LD_VAR 0 3
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11372: LD_INT 41
11374: PPUSH
11375: LD_VAR 0 3
11379: PPUSH
11380: LD_INT 1
11382: PPUSH
11383: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11387: LD_INT 43
11389: PPUSH
11390: LD_VAR 0 3
11394: PPUSH
11395: LD_INT 1
11397: PPUSH
11398: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11402: LD_INT 70
11404: PPUSH
11405: LD_VAR 0 3
11409: PPUSH
11410: LD_INT 1
11412: PPUSH
11413: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11417: LD_INT 51
11419: PPUSH
11420: LD_VAR 0 3
11424: PPUSH
11425: LD_INT 1
11427: PPUSH
11428: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11432: LD_INT 52
11434: PPUSH
11435: LD_VAR 0 3
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11447: LD_INT 6
11449: PPUSH
11450: LD_VAR 0 3
11454: PPUSH
11455: LD_INT 1
11457: PPUSH
11458: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11462: LD_INT 15
11464: PPUSH
11465: LD_VAR 0 3
11469: PPUSH
11470: LD_INT 1
11472: PPUSH
11473: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11477: LD_INT 7
11479: PPUSH
11480: LD_VAR 0 3
11484: PPUSH
11485: LD_INT 1
11487: PPUSH
11488: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11492: LD_INT 12
11494: PPUSH
11495: LD_VAR 0 3
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11507: LD_INT 18
11509: PPUSH
11510: LD_VAR 0 3
11514: PPUSH
11515: LD_INT 1
11517: PPUSH
11518: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11522: LD_INT 60
11524: PPUSH
11525: LD_VAR 0 3
11529: PPUSH
11530: LD_INT 1
11532: PPUSH
11533: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11537: LD_INT 9
11539: PPUSH
11540: LD_VAR 0 3
11544: PPUSH
11545: LD_INT 1
11547: PPUSH
11548: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11552: LD_INT 30
11554: PPUSH
11555: LD_VAR 0 3
11559: PPUSH
11560: LD_INT 1
11562: PPUSH
11563: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11567: LD_INT 37
11569: PPUSH
11570: LD_VAR 0 3
11574: PPUSH
11575: LD_INT 1
11577: PPUSH
11578: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11582: LD_INT 5
11584: PPUSH
11585: LD_VAR 0 3
11589: PPUSH
11590: LD_INT 1
11592: PPUSH
11593: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11597: LD_INT 66
11599: PPUSH
11600: LD_VAR 0 3
11604: PPUSH
11605: LD_INT 1
11607: PPUSH
11608: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11612: LD_INT 21
11614: PPUSH
11615: LD_VAR 0 3
11619: PPUSH
11620: LD_INT 1
11622: PPUSH
11623: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11627: LD_INT 22
11629: PPUSH
11630: LD_VAR 0 3
11634: PPUSH
11635: LD_INT 1
11637: PPUSH
11638: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11642: LD_INT 54
11644: PPUSH
11645: LD_VAR 0 3
11649: PPUSH
11650: LD_INT 1
11652: PPUSH
11653: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11657: LD_INT 0
11659: PPUSH
11660: LD_VAR 0 3
11664: PPUSH
11665: LD_INT 1
11667: PPUSH
11668: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11672: LD_INT 1
11674: PPUSH
11675: LD_VAR 0 3
11679: PPUSH
11680: LD_INT 1
11682: PPUSH
11683: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11687: LD_INT 2
11689: PPUSH
11690: LD_VAR 0 3
11694: PPUSH
11695: LD_INT 1
11697: PPUSH
11698: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11702: LD_INT 3
11704: PPUSH
11705: LD_VAR 0 3
11709: PPUSH
11710: LD_INT 1
11712: PPUSH
11713: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11717: LD_INT 4
11719: PPUSH
11720: LD_VAR 0 3
11724: PPUSH
11725: LD_INT 1
11727: PPUSH
11728: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11732: LD_INT 5
11734: PPUSH
11735: LD_VAR 0 3
11739: PPUSH
11740: LD_INT 1
11742: PPUSH
11743: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11747: LD_INT 6
11749: PPUSH
11750: LD_VAR 0 3
11754: PPUSH
11755: LD_INT 1
11757: PPUSH
11758: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11762: LD_INT 7
11764: PPUSH
11765: LD_VAR 0 3
11769: PPUSH
11770: LD_INT 1
11772: PPUSH
11773: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11777: LD_INT 8
11779: PPUSH
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 1
11787: PPUSH
11788: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11792: LD_INT 10
11794: PPUSH
11795: LD_VAR 0 3
11799: PPUSH
11800: LD_INT 1
11802: PPUSH
11803: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11807: LD_INT 11
11809: PPUSH
11810: LD_VAR 0 3
11814: PPUSH
11815: LD_INT 1
11817: PPUSH
11818: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11822: LD_INT 12
11824: PPUSH
11825: LD_VAR 0 3
11829: PPUSH
11830: LD_INT 1
11832: PPUSH
11833: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11837: LD_INT 13
11839: PPUSH
11840: LD_VAR 0 3
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11852: LD_INT 14
11854: PPUSH
11855: LD_VAR 0 3
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11867: LD_INT 15
11869: PPUSH
11870: LD_VAR 0 3
11874: PPUSH
11875: LD_INT 1
11877: PPUSH
11878: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11882: LD_INT 16
11884: PPUSH
11885: LD_VAR 0 3
11889: PPUSH
11890: LD_INT 1
11892: PPUSH
11893: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11897: LD_INT 17
11899: PPUSH
11900: LD_VAR 0 3
11904: PPUSH
11905: LD_INT 1
11907: PPUSH
11908: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11912: LD_INT 19
11914: PPUSH
11915: LD_VAR 0 3
11919: PPUSH
11920: LD_INT 1
11922: PPUSH
11923: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11927: LD_INT 20
11929: PPUSH
11930: LD_VAR 0 3
11934: PPUSH
11935: LD_INT 1
11937: PPUSH
11938: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11942: LD_INT 21
11944: PPUSH
11945: LD_VAR 0 3
11949: PPUSH
11950: LD_INT 1
11952: PPUSH
11953: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11957: LD_INT 23
11959: PPUSH
11960: LD_VAR 0 3
11964: PPUSH
11965: LD_INT 1
11967: PPUSH
11968: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11972: LD_INT 26
11974: PPUSH
11975: LD_VAR 0 3
11979: PPUSH
11980: LD_INT 1
11982: PPUSH
11983: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11987: LD_INT 27
11989: PPUSH
11990: LD_VAR 0 3
11994: PPUSH
11995: LD_INT 1
11997: PPUSH
11998: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12002: LD_INT 28
12004: PPUSH
12005: LD_VAR 0 3
12009: PPUSH
12010: LD_INT 1
12012: PPUSH
12013: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12017: LD_INT 29
12019: PPUSH
12020: LD_VAR 0 3
12024: PPUSH
12025: LD_INT 1
12027: PPUSH
12028: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12032: LD_INT 30
12034: PPUSH
12035: LD_VAR 0 3
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12047: LD_INT 31
12049: PPUSH
12050: LD_VAR 0 3
12054: PPUSH
12055: LD_INT 1
12057: PPUSH
12058: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12062: LD_INT 32
12064: PPUSH
12065: LD_VAR 0 3
12069: PPUSH
12070: LD_INT 1
12072: PPUSH
12073: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12077: LD_INT 36
12079: PPUSH
12080: LD_VAR 0 3
12084: PPUSH
12085: LD_INT 1
12087: PPUSH
12088: CALL_OW 324
// end ; 5 :
12092: GO 14223
12094: LD_INT 5
12096: DOUBLE
12097: EQUAL
12098: IFTRUE 12102
12100: GO 13215
12102: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12103: LD_INT 35
12105: PPUSH
12106: LD_VAR 0 3
12110: PPUSH
12111: LD_INT 1
12113: PPUSH
12114: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12118: LD_INT 45
12120: PPUSH
12121: LD_VAR 0 3
12125: PPUSH
12126: LD_INT 1
12128: PPUSH
12129: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12133: LD_INT 46
12135: PPUSH
12136: LD_VAR 0 3
12140: PPUSH
12141: LD_INT 1
12143: PPUSH
12144: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12148: LD_INT 47
12150: PPUSH
12151: LD_VAR 0 3
12155: PPUSH
12156: LD_INT 1
12158: PPUSH
12159: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12163: LD_INT 1
12165: PPUSH
12166: LD_VAR 0 3
12170: PPUSH
12171: LD_INT 1
12173: PPUSH
12174: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12178: LD_INT 2
12180: PPUSH
12181: LD_VAR 0 3
12185: PPUSH
12186: LD_INT 1
12188: PPUSH
12189: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12193: LD_INT 11
12195: PPUSH
12196: LD_VAR 0 3
12200: PPUSH
12201: LD_INT 1
12203: PPUSH
12204: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12208: LD_INT 20
12210: PPUSH
12211: LD_VAR 0 3
12215: PPUSH
12216: LD_INT 1
12218: PPUSH
12219: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12223: LD_INT 48
12225: PPUSH
12226: LD_VAR 0 3
12230: PPUSH
12231: LD_INT 1
12233: PPUSH
12234: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12238: LD_INT 49
12240: PPUSH
12241: LD_VAR 0 3
12245: PPUSH
12246: LD_INT 1
12248: PPUSH
12249: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12253: LD_INT 69
12255: PPUSH
12256: LD_VAR 0 3
12260: PPUSH
12261: LD_INT 1
12263: PPUSH
12264: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12268: LD_INT 39
12270: PPUSH
12271: LD_VAR 0 3
12275: PPUSH
12276: LD_INT 1
12278: PPUSH
12279: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12283: LD_INT 34
12285: PPUSH
12286: LD_VAR 0 3
12290: PPUSH
12291: LD_INT 1
12293: PPUSH
12294: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12298: LD_INT 42
12300: PPUSH
12301: LD_VAR 0 3
12305: PPUSH
12306: LD_INT 1
12308: PPUSH
12309: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12313: LD_INT 44
12315: PPUSH
12316: LD_VAR 0 3
12320: PPUSH
12321: LD_INT 1
12323: PPUSH
12324: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12328: LD_INT 41
12330: PPUSH
12331: LD_VAR 0 3
12335: PPUSH
12336: LD_INT 1
12338: PPUSH
12339: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12343: LD_INT 40
12345: PPUSH
12346: LD_VAR 0 3
12350: PPUSH
12351: LD_INT 1
12353: PPUSH
12354: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12358: LD_INT 43
12360: PPUSH
12361: LD_VAR 0 3
12365: PPUSH
12366: LD_INT 1
12368: PPUSH
12369: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12373: LD_INT 70
12375: PPUSH
12376: LD_VAR 0 3
12380: PPUSH
12381: LD_INT 1
12383: PPUSH
12384: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12388: LD_INT 51
12390: PPUSH
12391: LD_VAR 0 3
12395: PPUSH
12396: LD_INT 1
12398: PPUSH
12399: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12403: LD_INT 52
12405: PPUSH
12406: LD_VAR 0 3
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12418: LD_INT 6
12420: PPUSH
12421: LD_VAR 0 3
12425: PPUSH
12426: LD_INT 1
12428: PPUSH
12429: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12433: LD_INT 15
12435: PPUSH
12436: LD_VAR 0 3
12440: PPUSH
12441: LD_INT 1
12443: PPUSH
12444: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12448: LD_INT 7
12450: PPUSH
12451: LD_VAR 0 3
12455: PPUSH
12456: LD_INT 1
12458: PPUSH
12459: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12463: LD_INT 12
12465: PPUSH
12466: LD_VAR 0 3
12470: PPUSH
12471: LD_INT 1
12473: PPUSH
12474: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12478: LD_INT 17
12480: PPUSH
12481: LD_VAR 0 3
12485: PPUSH
12486: LD_INT 1
12488: PPUSH
12489: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12493: LD_INT 18
12495: PPUSH
12496: LD_VAR 0 3
12500: PPUSH
12501: LD_INT 1
12503: PPUSH
12504: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12508: LD_INT 60
12510: PPUSH
12511: LD_VAR 0 3
12515: PPUSH
12516: LD_INT 1
12518: PPUSH
12519: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12523: LD_INT 32
12525: PPUSH
12526: LD_VAR 0 3
12530: PPUSH
12531: LD_INT 1
12533: PPUSH
12534: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12538: LD_INT 9
12540: PPUSH
12541: LD_VAR 0 3
12545: PPUSH
12546: LD_INT 1
12548: PPUSH
12549: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12553: LD_INT 57
12555: PPUSH
12556: LD_VAR 0 3
12560: PPUSH
12561: LD_INT 1
12563: PPUSH
12564: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12568: LD_INT 30
12570: PPUSH
12571: LD_VAR 0 3
12575: PPUSH
12576: LD_INT 1
12578: PPUSH
12579: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12583: LD_INT 37
12585: PPUSH
12586: LD_VAR 0 3
12590: PPUSH
12591: LD_INT 1
12593: PPUSH
12594: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12598: LD_INT 63
12600: PPUSH
12601: LD_VAR 0 3
12605: PPUSH
12606: LD_INT 1
12608: PPUSH
12609: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12613: LD_INT 3
12615: PPUSH
12616: LD_VAR 0 3
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12628: LD_INT 4
12630: PPUSH
12631: LD_VAR 0 3
12635: PPUSH
12636: LD_INT 1
12638: PPUSH
12639: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12643: LD_INT 5
12645: PPUSH
12646: LD_VAR 0 3
12650: PPUSH
12651: LD_INT 1
12653: PPUSH
12654: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12658: LD_INT 66
12660: PPUSH
12661: LD_VAR 0 3
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12673: LD_INT 21
12675: PPUSH
12676: LD_VAR 0 3
12680: PPUSH
12681: LD_INT 1
12683: PPUSH
12684: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12688: LD_INT 22
12690: PPUSH
12691: LD_VAR 0 3
12695: PPUSH
12696: LD_INT 1
12698: PPUSH
12699: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12703: LD_INT 19
12705: PPUSH
12706: LD_VAR 0 3
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12718: LD_INT 54
12720: PPUSH
12721: LD_VAR 0 3
12725: PPUSH
12726: LD_INT 1
12728: PPUSH
12729: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12733: LD_INT 55
12735: PPUSH
12736: LD_VAR 0 3
12740: PPUSH
12741: LD_INT 1
12743: PPUSH
12744: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12748: LD_INT 0
12750: PPUSH
12751: LD_VAR 0 3
12755: PPUSH
12756: LD_INT 1
12758: PPUSH
12759: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12763: LD_INT 1
12765: PPUSH
12766: LD_VAR 0 3
12770: PPUSH
12771: LD_INT 1
12773: PPUSH
12774: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12778: LD_INT 2
12780: PPUSH
12781: LD_VAR 0 3
12785: PPUSH
12786: LD_INT 1
12788: PPUSH
12789: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12793: LD_INT 3
12795: PPUSH
12796: LD_VAR 0 3
12800: PPUSH
12801: LD_INT 1
12803: PPUSH
12804: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12808: LD_INT 4
12810: PPUSH
12811: LD_VAR 0 3
12815: PPUSH
12816: LD_INT 1
12818: PPUSH
12819: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12823: LD_INT 5
12825: PPUSH
12826: LD_VAR 0 3
12830: PPUSH
12831: LD_INT 1
12833: PPUSH
12834: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12838: LD_INT 6
12840: PPUSH
12841: LD_VAR 0 3
12845: PPUSH
12846: LD_INT 1
12848: PPUSH
12849: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12853: LD_INT 7
12855: PPUSH
12856: LD_VAR 0 3
12860: PPUSH
12861: LD_INT 1
12863: PPUSH
12864: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12868: LD_INT 8
12870: PPUSH
12871: LD_VAR 0 3
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12883: LD_INT 10
12885: PPUSH
12886: LD_VAR 0 3
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12898: LD_INT 11
12900: PPUSH
12901: LD_VAR 0 3
12905: PPUSH
12906: LD_INT 1
12908: PPUSH
12909: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12913: LD_INT 12
12915: PPUSH
12916: LD_VAR 0 3
12920: PPUSH
12921: LD_INT 1
12923: PPUSH
12924: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12928: LD_INT 13
12930: PPUSH
12931: LD_VAR 0 3
12935: PPUSH
12936: LD_INT 1
12938: PPUSH
12939: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12943: LD_INT 14
12945: PPUSH
12946: LD_VAR 0 3
12950: PPUSH
12951: LD_INT 1
12953: PPUSH
12954: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12958: LD_INT 15
12960: PPUSH
12961: LD_VAR 0 3
12965: PPUSH
12966: LD_INT 1
12968: PPUSH
12969: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12973: LD_INT 16
12975: PPUSH
12976: LD_VAR 0 3
12980: PPUSH
12981: LD_INT 1
12983: PPUSH
12984: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12988: LD_INT 17
12990: PPUSH
12991: LD_VAR 0 3
12995: PPUSH
12996: LD_INT 1
12998: PPUSH
12999: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
13003: LD_INT 18
13005: PPUSH
13006: LD_VAR 0 3
13010: PPUSH
13011: LD_INT 1
13013: PPUSH
13014: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13018: LD_INT 19
13020: PPUSH
13021: LD_VAR 0 3
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13033: LD_INT 20
13035: PPUSH
13036: LD_VAR 0 3
13040: PPUSH
13041: LD_INT 1
13043: PPUSH
13044: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13048: LD_INT 21
13050: PPUSH
13051: LD_VAR 0 3
13055: PPUSH
13056: LD_INT 1
13058: PPUSH
13059: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13063: LD_INT 23
13065: PPUSH
13066: LD_VAR 0 3
13070: PPUSH
13071: LD_INT 1
13073: PPUSH
13074: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13078: LD_INT 26
13080: PPUSH
13081: LD_VAR 0 3
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13093: LD_INT 27
13095: PPUSH
13096: LD_VAR 0 3
13100: PPUSH
13101: LD_INT 1
13103: PPUSH
13104: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13108: LD_INT 28
13110: PPUSH
13111: LD_VAR 0 3
13115: PPUSH
13116: LD_INT 1
13118: PPUSH
13119: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13123: LD_INT 29
13125: PPUSH
13126: LD_VAR 0 3
13130: PPUSH
13131: LD_INT 1
13133: PPUSH
13134: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13138: LD_INT 30
13140: PPUSH
13141: LD_VAR 0 3
13145: PPUSH
13146: LD_INT 1
13148: PPUSH
13149: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13153: LD_INT 31
13155: PPUSH
13156: LD_VAR 0 3
13160: PPUSH
13161: LD_INT 1
13163: PPUSH
13164: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13168: LD_INT 32
13170: PPUSH
13171: LD_VAR 0 3
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
13183: LD_INT 33
13185: PPUSH
13186: LD_VAR 0 3
13190: PPUSH
13191: LD_INT 1
13193: PPUSH
13194: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13198: LD_INT 36
13200: PPUSH
13201: LD_VAR 0 3
13205: PPUSH
13206: LD_INT 1
13208: PPUSH
13209: CALL_OW 324
// end ; 6 :
13213: GO 14223
13215: LD_INT 6
13217: DOUBLE
13218: EQUAL
13219: IFTRUE 13223
13221: GO 14148
13223: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13224: LD_INT 35
13226: PPUSH
13227: LD_VAR 0 3
13231: PPUSH
13232: LD_INT 1
13234: PPUSH
13235: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13239: LD_INT 45
13241: PPUSH
13242: LD_VAR 0 3
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13254: LD_INT 46
13256: PPUSH
13257: LD_VAR 0 3
13261: PPUSH
13262: LD_INT 1
13264: PPUSH
13265: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13269: LD_INT 47
13271: PPUSH
13272: LD_VAR 0 3
13276: PPUSH
13277: LD_INT 1
13279: PPUSH
13280: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13284: LD_INT 1
13286: PPUSH
13287: LD_VAR 0 3
13291: PPUSH
13292: LD_INT 1
13294: PPUSH
13295: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13299: LD_INT 2
13301: PPUSH
13302: LD_VAR 0 3
13306: PPUSH
13307: LD_INT 1
13309: PPUSH
13310: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13314: LD_INT 11
13316: PPUSH
13317: LD_VAR 0 3
13321: PPUSH
13322: LD_INT 1
13324: PPUSH
13325: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13329: LD_INT 20
13331: PPUSH
13332: LD_VAR 0 3
13336: PPUSH
13337: LD_INT 1
13339: PPUSH
13340: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13344: LD_INT 48
13346: PPUSH
13347: LD_VAR 0 3
13351: PPUSH
13352: LD_INT 1
13354: PPUSH
13355: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13359: LD_INT 49
13361: PPUSH
13362: LD_VAR 0 3
13366: PPUSH
13367: LD_INT 1
13369: PPUSH
13370: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13374: LD_INT 50
13376: PPUSH
13377: LD_VAR 0 3
13381: PPUSH
13382: LD_INT 1
13384: PPUSH
13385: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13389: LD_INT 69
13391: PPUSH
13392: LD_VAR 0 3
13396: PPUSH
13397: LD_INT 1
13399: PPUSH
13400: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13404: LD_INT 39
13406: PPUSH
13407: LD_VAR 0 3
13411: PPUSH
13412: LD_INT 1
13414: PPUSH
13415: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13419: LD_INT 34
13421: PPUSH
13422: LD_VAR 0 3
13426: PPUSH
13427: LD_INT 1
13429: PPUSH
13430: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13434: LD_INT 42
13436: PPUSH
13437: LD_VAR 0 3
13441: PPUSH
13442: LD_INT 1
13444: PPUSH
13445: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13449: LD_INT 44
13451: PPUSH
13452: LD_VAR 0 3
13456: PPUSH
13457: LD_INT 1
13459: PPUSH
13460: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13464: LD_INT 41
13466: PPUSH
13467: LD_VAR 0 3
13471: PPUSH
13472: LD_INT 1
13474: PPUSH
13475: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13479: LD_INT 13
13481: PPUSH
13482: LD_VAR 0 3
13486: PPUSH
13487: LD_INT 1
13489: PPUSH
13490: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13494: LD_INT 40
13496: PPUSH
13497: LD_VAR 0 3
13501: PPUSH
13502: LD_INT 1
13504: PPUSH
13505: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13509: LD_INT 43
13511: PPUSH
13512: LD_VAR 0 3
13516: PPUSH
13517: LD_INT 1
13519: PPUSH
13520: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13524: LD_INT 70
13526: PPUSH
13527: LD_VAR 0 3
13531: PPUSH
13532: LD_INT 1
13534: PPUSH
13535: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13539: LD_INT 23
13541: PPUSH
13542: LD_VAR 0 3
13546: PPUSH
13547: LD_INT 1
13549: PPUSH
13550: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13554: LD_INT 51
13556: PPUSH
13557: LD_VAR 0 3
13561: PPUSH
13562: LD_INT 1
13564: PPUSH
13565: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13569: LD_INT 52
13571: PPUSH
13572: LD_VAR 0 3
13576: PPUSH
13577: LD_INT 1
13579: PPUSH
13580: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13584: LD_INT 6
13586: PPUSH
13587: LD_VAR 0 3
13591: PPUSH
13592: LD_INT 1
13594: PPUSH
13595: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13599: LD_INT 15
13601: PPUSH
13602: LD_VAR 0 3
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13614: LD_INT 7
13616: PPUSH
13617: LD_VAR 0 3
13621: PPUSH
13622: LD_INT 1
13624: PPUSH
13625: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13629: LD_INT 12
13631: PPUSH
13632: LD_VAR 0 3
13636: PPUSH
13637: LD_INT 1
13639: PPUSH
13640: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13644: LD_INT 10
13646: PPUSH
13647: LD_VAR 0 3
13651: PPUSH
13652: LD_INT 1
13654: PPUSH
13655: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13659: LD_INT 17
13661: PPUSH
13662: LD_VAR 0 3
13666: PPUSH
13667: LD_INT 1
13669: PPUSH
13670: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13674: LD_INT 18
13676: PPUSH
13677: LD_VAR 0 3
13681: PPUSH
13682: LD_INT 1
13684: PPUSH
13685: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13689: LD_INT 60
13691: PPUSH
13692: LD_VAR 0 3
13696: PPUSH
13697: LD_INT 1
13699: PPUSH
13700: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13704: LD_INT 61
13706: PPUSH
13707: LD_VAR 0 3
13711: PPUSH
13712: LD_INT 1
13714: PPUSH
13715: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13719: LD_INT 32
13721: PPUSH
13722: LD_VAR 0 3
13726: PPUSH
13727: LD_INT 1
13729: PPUSH
13730: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13734: LD_INT 27
13736: PPUSH
13737: LD_VAR 0 3
13741: PPUSH
13742: LD_INT 1
13744: PPUSH
13745: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13749: LD_INT 36
13751: PPUSH
13752: LD_VAR 0 3
13756: PPUSH
13757: LD_INT 1
13759: PPUSH
13760: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13764: LD_INT 33
13766: PPUSH
13767: LD_VAR 0 3
13771: PPUSH
13772: LD_INT 1
13774: PPUSH
13775: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13779: LD_INT 9
13781: PPUSH
13782: LD_VAR 0 3
13786: PPUSH
13787: LD_INT 1
13789: PPUSH
13790: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13794: LD_INT 38
13796: PPUSH
13797: LD_VAR 0 3
13801: PPUSH
13802: LD_INT 1
13804: PPUSH
13805: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13809: LD_INT 57
13811: PPUSH
13812: LD_VAR 0 3
13816: PPUSH
13817: LD_INT 1
13819: PPUSH
13820: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13824: LD_INT 58
13826: PPUSH
13827: LD_VAR 0 3
13831: PPUSH
13832: LD_INT 1
13834: PPUSH
13835: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13839: LD_INT 28
13841: PPUSH
13842: LD_VAR 0 3
13846: PPUSH
13847: LD_INT 1
13849: PPUSH
13850: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13854: LD_INT 29
13856: PPUSH
13857: LD_VAR 0 3
13861: PPUSH
13862: LD_INT 1
13864: PPUSH
13865: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13869: LD_INT 30
13871: PPUSH
13872: LD_VAR 0 3
13876: PPUSH
13877: LD_INT 1
13879: PPUSH
13880: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13884: LD_INT 37
13886: PPUSH
13887: LD_VAR 0 3
13891: PPUSH
13892: LD_INT 1
13894: PPUSH
13895: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13899: LD_INT 63
13901: PPUSH
13902: LD_VAR 0 3
13906: PPUSH
13907: LD_INT 1
13909: PPUSH
13910: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13914: LD_INT 64
13916: PPUSH
13917: LD_VAR 0 3
13921: PPUSH
13922: LD_INT 1
13924: PPUSH
13925: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13929: LD_INT 3
13931: PPUSH
13932: LD_VAR 0 3
13936: PPUSH
13937: LD_INT 1
13939: PPUSH
13940: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13944: LD_INT 4
13946: PPUSH
13947: LD_VAR 0 3
13951: PPUSH
13952: LD_INT 1
13954: PPUSH
13955: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13959: LD_INT 5
13961: PPUSH
13962: LD_VAR 0 3
13966: PPUSH
13967: LD_INT 1
13969: PPUSH
13970: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13974: LD_INT 8
13976: PPUSH
13977: LD_VAR 0 3
13981: PPUSH
13982: LD_INT 1
13984: PPUSH
13985: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13989: LD_INT 66
13991: PPUSH
13992: LD_VAR 0 3
13996: PPUSH
13997: LD_INT 1
13999: PPUSH
14000: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
14004: LD_INT 67
14006: PPUSH
14007: LD_VAR 0 3
14011: PPUSH
14012: LD_INT 1
14014: PPUSH
14015: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14019: LD_INT 21
14021: PPUSH
14022: LD_VAR 0 3
14026: PPUSH
14027: LD_INT 1
14029: PPUSH
14030: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14034: LD_INT 22
14036: PPUSH
14037: LD_VAR 0 3
14041: PPUSH
14042: LD_INT 1
14044: PPUSH
14045: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14049: LD_INT 19
14051: PPUSH
14052: LD_VAR 0 3
14056: PPUSH
14057: LD_INT 1
14059: PPUSH
14060: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
14064: LD_INT 26
14066: PPUSH
14067: LD_VAR 0 3
14071: PPUSH
14072: LD_INT 1
14074: PPUSH
14075: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14079: LD_INT 54
14081: PPUSH
14082: LD_VAR 0 3
14086: PPUSH
14087: LD_INT 1
14089: PPUSH
14090: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14094: LD_INT 55
14096: PPUSH
14097: LD_VAR 0 3
14101: PPUSH
14102: LD_INT 1
14104: PPUSH
14105: CALL_OW 322
// for i = 0 to 39 do
14109: LD_ADDR_VAR 0 4
14113: PUSH
14114: DOUBLE
14115: LD_INT 0
14117: DEC
14118: ST_TO_ADDR
14119: LD_INT 39
14121: PUSH
14122: FOR_TO
14123: IFFALSE 14144
// SetRestrict ( i , side , true ) ;
14125: LD_VAR 0 4
14129: PPUSH
14130: LD_VAR 0 3
14134: PPUSH
14135: LD_INT 1
14137: PPUSH
14138: CALL_OW 324
14142: GO 14122
14144: POP
14145: POP
// end ; else
14146: GO 14223
14148: POP
// begin for i = 1 to 73 do
14149: LD_ADDR_VAR 0 4
14153: PUSH
14154: DOUBLE
14155: LD_INT 1
14157: DEC
14158: ST_TO_ADDR
14159: LD_INT 73
14161: PUSH
14162: FOR_TO
14163: IFFALSE 14184
// SetTech ( i , side , state_enabled ) ;
14165: LD_VAR 0 4
14169: PPUSH
14170: LD_VAR 0 3
14174: PPUSH
14175: LD_INT 1
14177: PPUSH
14178: CALL_OW 322
14182: GO 14162
14184: POP
14185: POP
// for i = 0 to 39 do
14186: LD_ADDR_VAR 0 4
14190: PUSH
14191: DOUBLE
14192: LD_INT 0
14194: DEC
14195: ST_TO_ADDR
14196: LD_INT 39
14198: PUSH
14199: FOR_TO
14200: IFFALSE 14221
// SetRestrict ( i , side , true ) ;
14202: LD_VAR 0 4
14206: PPUSH
14207: LD_VAR 0 3
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: CALL_OW 324
14219: GO 14199
14221: POP
14222: POP
// end ; end ; end ;
14223: GO 10228
14225: POP
14226: POP
// end ;
14227: LD_VAR 0 2
14231: RET
