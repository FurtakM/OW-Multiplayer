// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 386: LD_ADDR_EXP 36
 390: PUSH
 391: LD_EXP 31
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: EMPTY
 400: LIST
 401: DIFF
 402: PUSH
 403: LD_INT 1
 405: GREATER
 406: ST_TO_ADDR
// if Multiplayer then
 407: LD_OWVAR 4
 411: IFFALSE 613
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 413: LD_ADDR_EXP 1
 417: PUSH
 418: LD_INT 0
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 426: LD_ADDR_EXP 2
 430: PUSH
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 439: LD_ADDR_EXP 3
 443: PUSH
 444: LD_INT 2
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 452: LD_ADDR_EXP 4
 456: PUSH
 457: LD_INT 3
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 465: LD_ADDR_EXP 5
 469: PUSH
 470: LD_INT 4
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 478: LD_ADDR_EXP 6
 482: PUSH
 483: LD_INT 5
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 491: LD_ADDR_EXP 7
 495: PUSH
 496: LD_INT 1
 498: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 499: LD_ADDR_EXP 8
 503: PUSH
 504: LD_INT 10
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 512: LD_ADDR_EXP 9
 516: PUSH
 517: LD_INT 11
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 525: LD_ADDR_EXP 10
 529: PUSH
 530: LD_INT 12
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 538: LD_ADDR_EXP 11
 542: PUSH
 543: LD_INT 13
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 551: LD_ADDR_EXP 12
 555: PUSH
 556: LD_INT 14
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 564: LD_ADDR_EXP 13
 568: PUSH
 569: LD_INT 17
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 577: LD_ADDR_EXP 14
 581: PUSH
 582: LD_INT 20
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 590: LD_ADDR_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_win_rules = 0 ;
 603: LD_ADDR_EXP 30
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// end else
 611: GO 745
// begin Randomize ;
 613: CALL_OW 10
// def_base_level := 2 ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 2
 624: ST_TO_ADDR
// def_amount_of_people := 2 ;
 625: LD_ADDR_EXP 2
 629: PUSH
 630: LD_INT 2
 632: ST_TO_ADDR
// def_skill_level := 1 ;
 633: LD_ADDR_EXP 3
 637: PUSH
 638: LD_INT 1
 640: ST_TO_ADDR
// def_starting_resources := 2 ;
 641: LD_ADDR_EXP 4
 645: PUSH
 646: LD_INT 2
 648: ST_TO_ADDR
// def_shipments_density := 50 ;
 649: LD_ADDR_EXP 5
 653: PUSH
 654: LD_INT 50
 656: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 657: LD_ADDR_EXP 6
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 665: LD_ADDR_EXP 7
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// def_shared_vision := 1 ;
 673: LD_ADDR_EXP 8
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_morale_flags := 1 ;
 681: LD_ADDR_EXP 9
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_siberite_detection := 1 ;
 689: LD_ADDR_EXP 10
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_people_respawning := 2 ;
 697: LD_ADDR_EXP 11
 701: PUSH
 702: LD_INT 2
 704: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 705: LD_ADDR_EXP 12
 709: PUSH
 710: LD_INT 3
 712: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 713: LD_ADDR_EXP 13
 717: PUSH
 718: LD_INT 0
 720: ST_TO_ADDR
// def_builduptime := 1 ;
 721: LD_ADDR_EXP 14
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// tech_level = 4 ;
 729: LD_ADDR_VAR 0 3
 733: PUSH
 734: LD_INT 4
 736: ST_TO_ADDR
// def_win_rules = 0 ;
 737: LD_ADDR_EXP 30
 741: PUSH
 742: LD_INT 0
 744: ST_TO_ADDR
// end ; if isSGUI then
 745: LD_OWVAR 83
 749: IFFALSE 757
// setMpTechs ( ) else
 751: CALL 9268 0 0
 755: GO 770
// SetMpTechLevel ( tech_level + 1 ) ;
 757: LD_VAR 0 3
 761: PUSH
 762: LD_INT 1
 764: PLUS
 765: PPUSH
 766: CALL 9415 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 770: LD_ADDR_EXP 17
 774: PUSH
 775: LD_INT 0
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 1
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: PUSH
 789: LD_EXP 1
 793: PUSH
 794: LD_INT 1
 796: PLUS
 797: ARRAY
 798: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 799: LD_ADDR_EXP 18
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_EXP 1
 822: PUSH
 823: LD_INT 1
 825: PLUS
 826: ARRAY
 827: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 828: LD_ADDR_EXP 19
 832: PUSH
 833: LD_INT 9
 835: PUSH
 836: LD_INT 12
 838: PUSH
 839: LD_INT 15
 841: PUSH
 842: LD_INT 24
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: PUSH
 851: LD_EXP 2
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: ARRAY
 860: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 861: LD_ADDR_EXP 20
 865: PUSH
 866: LD_INT 2
 868: PUSH
 869: LD_INT 3
 871: PUSH
 872: LD_INT 4
 874: PUSH
 875: LD_INT 5
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_EXP 3
 888: PUSH
 889: LD_INT 1
 891: PLUS
 892: ARRAY
 893: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 894: LD_ADDR_EXP 22
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 30
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: PUSH
 927: LD_INT 50
 929: PUSH
 930: LD_INT 20
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 80
 943: PUSH
 944: LD_INT 40
 946: PUSH
 947: LD_INT 20
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: PUSH
 961: LD_EXP 4
 965: PUSH
 966: LD_INT 1
 968: PLUS
 969: ARRAY
 970: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 971: LD_ADDR_EXP 21
 975: PUSH
 976: LD_INT 10
 978: PUSH
 979: EMPTY
 980: LIST
 981: PUSH
 982: LD_INT 7
 984: PUSH
 985: LD_INT 14
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 6
 994: PUSH
 995: LD_INT 12
 997: PUSH
 998: LD_INT 18
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_INT 5
1008: PUSH
1009: LD_INT 10
1011: PUSH
1012: LD_INT 15
1014: PUSH
1015: LD_INT 20
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: PUSH
1030: LD_EXP 4
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: ARRAY
1039: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1040: LD_ADDR_EXP 23
1044: PUSH
1045: LD_INT 150
1047: PUSH
1048: LD_EXP 5
1052: MINUS
1053: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1054: LD_ADDR_EXP 27
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 10500
1064: PUSH
1065: LD_INT 6300
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_EXP 11
1077: PUSH
1078: LD_INT 1
1080: PLUS
1081: ARRAY
1082: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1083: LD_ADDR_EXP 28
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 31500
1093: PUSH
1094: LD_INT 10500
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: LD_EXP 11
1106: PUSH
1107: LD_INT 1
1109: PLUS
1110: ARRAY
1111: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1112: LD_ADDR_EXP 25
1116: PUSH
1117: LD_INT 0
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_EXP 12
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1145: LD_ADDR_EXP 24
1149: PUSH
1150: LD_INT 1
1152: NEG
1153: PUSH
1154: LD_INT 350
1156: PUSH
1157: LD_INT 700
1159: PUSH
1160: LD_INT 1400
1162: PUSH
1163: LD_INT 0
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: PUSH
1173: LD_EXP 9
1177: PUSH
1178: LD_INT 1
1180: PLUS
1181: ARRAY
1182: ST_TO_ADDR
// battle_flags_id = [ ] ;
1183: LD_ADDR_EXP 44
1187: PUSH
1188: EMPTY
1189: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1190: LD_EXP 13
1194: PUSH
1195: LD_INT 0
1197: EQUAL
1198: IFFALSE 1210
// siberite_bomb_Delay = 0 else
1200: LD_ADDR_EXP 29
1204: PUSH
1205: LD_INT 0
1207: ST_TO_ADDR
1208: GO 1232
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1210: LD_ADDR_EXP 29
1214: PUSH
1215: LD_EXP 13
1219: PUSH
1220: LD_INT 1
1222: MINUS
1223: PUSH
1224: LD_INT 21000
1226: MUL
1227: PUSH
1228: LD_INT 1
1230: PLUS
1231: ST_TO_ADDR
// end ;
1232: LD_VAR 0 1
1236: RET
// function init_map ; var i , j ; begin
1237: LD_INT 0
1239: PPUSH
1240: PPUSH
1241: PPUSH
// normal_oil_deposits_locations := [ [ 17 , 4 ] , [ 72 , 5 ] , [ 157 , 22 ] , [ 205 , 111 ] , [ 221 , 195 ] , [ 169 , 196 ] , [ 93 , 177 ] , [ 52 , 92 ] ] ;
1242: LD_ADDR_EXP 40
1246: PUSH
1247: LD_INT 17
1249: PUSH
1250: LD_INT 4
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: LD_INT 72
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 157
1269: PUSH
1270: LD_INT 22
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 205
1279: PUSH
1280: LD_INT 111
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: LD_INT 221
1289: PUSH
1290: LD_INT 195
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 169
1299: PUSH
1300: LD_INT 196
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 93
1309: PUSH
1310: LD_INT 177
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: LD_INT 52
1319: PUSH
1320: LD_INT 92
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 17 , 4 ] , [ 16 , 23 ] ] , [ [ 72 , 5 ] , [ 88 , 28 ] ] , [ [ 157 , 22 ] , [ 133 , 12 ] ] , [ [ 205 , 111 ] , [ 200 , 95 ] ] , [ [ 221 , 195 ] , [ 249 , 190 ] ] , [ [ 169 , 196 ] , [ 180 , 197 ] ] , [ [ 93 , 177 ] , [ 114 , 194 ] ] , [ [ 52 , 92 ] , [ 58 , 107 ] ] ] ;
1337: LD_ADDR_EXP 41
1341: PUSH
1342: LD_INT 17
1344: PUSH
1345: LD_INT 4
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 16
1354: PUSH
1355: LD_INT 23
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 72
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 88
1378: PUSH
1379: LD_INT 28
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 157
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 133
1402: PUSH
1403: LD_INT 12
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 205
1416: PUSH
1417: LD_INT 111
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: LD_INT 200
1426: PUSH
1427: LD_INT 95
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: PUSH
1438: LD_INT 221
1440: PUSH
1441: LD_INT 195
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PUSH
1448: LD_INT 249
1450: PUSH
1451: LD_INT 190
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 169
1464: PUSH
1465: LD_INT 196
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 180
1474: PUSH
1475: LD_INT 197
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 93
1488: PUSH
1489: LD_INT 177
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 114
1498: PUSH
1499: LD_INT 194
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 52
1512: PUSH
1513: LD_INT 92
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 58
1522: PUSH
1523: LD_INT 107
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 12 , 12 ] , [ 99 , 19 ] , [ 139 , 5 ] , [ 207 , 100 ] , [ 244 , 181 ] , [ 183 , 196 ] , [ 117 , 195 ] , [ 54 , 104 ] ] ;
1544: LD_ADDR_EXP 42
1548: PUSH
1549: LD_INT 12
1551: PUSH
1552: LD_INT 12
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 99
1561: PUSH
1562: LD_INT 19
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 139
1571: PUSH
1572: LD_INT 5
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 207
1581: PUSH
1582: LD_INT 100
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 244
1591: PUSH
1592: LD_INT 181
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 183
1601: PUSH
1602: LD_INT 196
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 117
1611: PUSH
1612: LD_INT 195
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 54
1621: PUSH
1622: LD_INT 104
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1639: LD_ADDR_EXP 43
1643: PUSH
1644: EMPTY
1645: ST_TO_ADDR
// depot_def := [ [ 32 , 24 , 2 ] , [ 87 , 18 , 3 ] , [ 146 , 28 , 3 ] , [ 188 , 103 , 4 ] , [ 224 , 180 , 5 ] , [ 168 , 180 , 0 ] , [ 105 , 170 , 0 ] , [ 71 , 102 , 1 ] ] ;
1646: LD_ADDR_EXP 37
1650: PUSH
1651: LD_INT 32
1653: PUSH
1654: LD_INT 24
1656: PUSH
1657: LD_INT 2
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 87
1667: PUSH
1668: LD_INT 18
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: LD_INT 146
1681: PUSH
1682: LD_INT 28
1684: PUSH
1685: LD_INT 3
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_INT 188
1695: PUSH
1696: LD_INT 103
1698: PUSH
1699: LD_INT 4
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 224
1709: PUSH
1710: LD_INT 180
1712: PUSH
1713: LD_INT 5
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 168
1723: PUSH
1724: LD_INT 180
1726: PUSH
1727: LD_INT 0
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 105
1737: PUSH
1738: LD_INT 170
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 71
1751: PUSH
1752: LD_INT 102
1754: PUSH
1755: LD_INT 1
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: ST_TO_ADDR
// for i in depot_def do
1773: LD_ADDR_VAR 0 2
1777: PUSH
1778: LD_EXP 37
1782: PUSH
1783: FOR_IN
1784: IFFALSE 1860
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1786: LD_ADDR_EXP 39
1790: PUSH
1791: LD_EXP 39
1795: PUSH
1796: LD_VAR 0 2
1800: PUSH
1801: LD_INT 1
1803: ARRAY
1804: PPUSH
1805: LD_VAR 0 2
1809: PUSH
1810: LD_INT 3
1812: ARRAY
1813: PPUSH
1814: LD_INT 4
1816: NEG
1817: PPUSH
1818: CALL_OW 272
1822: PUSH
1823: LD_VAR 0 2
1827: PUSH
1828: LD_INT 2
1830: ARRAY
1831: PPUSH
1832: LD_VAR 0 2
1836: PUSH
1837: LD_INT 3
1839: ARRAY
1840: PPUSH
1841: LD_INT 4
1843: NEG
1844: PPUSH
1845: CALL_OW 273
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: ADD
1857: ST_TO_ADDR
1858: GO 1783
1860: POP
1861: POP
// breastworks_def := [ [ [ 50 , 40 , 5 ] , [ 47 , 17 , 4 ] , [ 29 , 39 , 0 ] ] , [ [ 107 , 27 , 4 ] , [ 67 , 10 , 1 ] , [ 91 , 35 , 0 ] ] , [ [ 165 , 44 , 5 ] , [ 123 , 16 , 2 ] , [ 141 , 39 , 0 ] ] , [ [ 179 , 85 , 3 ] , [ 172 , 102 , 1 ] , [ 196 , 118 , 5 ] ] , [ [ 210 , 182 , 1 ] , [ 226 , 164 , 3 ] , [ 209 , 164 , 2 ] ] , [ [ 156 , 183 , 1 ] , [ 184 , 184 , 4 ] , [ 161 , 166 , 3 ] ] , [ [ 86 , 156 , 2 ] , [ 124 , 180 , 4 ] , [ 106 , 155 , 3 ] ] , [ [ 87 , 102 , 4 ] , [ 63 , 83 , 3 ] , [ 79 , 120 , 0 ] ] ] ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_INT 50
1869: PUSH
1870: LD_INT 40
1872: PUSH
1873: LD_INT 5
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 47
1883: PUSH
1884: LD_INT 17
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_INT 29
1897: PUSH
1898: LD_INT 39
1900: PUSH
1901: LD_INT 0
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 107
1916: PUSH
1917: LD_INT 27
1919: PUSH
1920: LD_INT 4
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 67
1930: PUSH
1931: LD_INT 10
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 91
1944: PUSH
1945: LD_INT 35
1947: PUSH
1948: LD_INT 0
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: PUSH
1961: LD_INT 165
1963: PUSH
1964: LD_INT 44
1966: PUSH
1967: LD_INT 5
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 123
1977: PUSH
1978: LD_INT 16
1980: PUSH
1981: LD_INT 2
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 141
1991: PUSH
1992: LD_INT 39
1994: PUSH
1995: LD_INT 0
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 179
2010: PUSH
2011: LD_INT 85
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 172
2024: PUSH
2025: LD_INT 102
2027: PUSH
2028: LD_INT 1
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 196
2038: PUSH
2039: LD_INT 118
2041: PUSH
2042: LD_INT 5
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: LIST
2054: PUSH
2055: LD_INT 210
2057: PUSH
2058: LD_INT 182
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 226
2071: PUSH
2072: LD_INT 164
2074: PUSH
2075: LD_INT 3
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 209
2085: PUSH
2086: LD_INT 164
2088: PUSH
2089: LD_INT 2
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: LIST
2101: PUSH
2102: LD_INT 156
2104: PUSH
2105: LD_INT 183
2107: PUSH
2108: LD_INT 1
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 184
2118: PUSH
2119: LD_INT 184
2121: PUSH
2122: LD_INT 4
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 161
2132: PUSH
2133: LD_INT 166
2135: PUSH
2136: LD_INT 3
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 86
2151: PUSH
2152: LD_INT 156
2154: PUSH
2155: LD_INT 2
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 124
2165: PUSH
2166: LD_INT 180
2168: PUSH
2169: LD_INT 4
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 106
2179: PUSH
2180: LD_INT 155
2182: PUSH
2183: LD_INT 3
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 87
2198: PUSH
2199: LD_INT 102
2201: PUSH
2202: LD_INT 4
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 63
2212: PUSH
2213: LD_INT 83
2215: PUSH
2216: LD_INT 3
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 79
2226: PUSH
2227: LD_INT 120
2229: PUSH
2230: LD_INT 0
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: LIST
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: ST_TO_ADDR
// for i = 1 to Side_Positions do
2253: LD_ADDR_VAR 0 2
2257: PUSH
2258: DOUBLE
2259: LD_INT 1
2261: DEC
2262: ST_TO_ADDR
2263: LD_EXP 34
2267: PUSH
2268: FOR_TO
2269: IFFALSE 2399
// begin if not Side_Positions [ i ] then
2271: LD_EXP 34
2275: PUSH
2276: LD_VAR 0 2
2280: ARRAY
2281: NOT
2282: IFFALSE 2286
// continue ;
2284: GO 2268
// if def_extra_oil_deposits then
2286: LD_EXP 6
2290: IFFALSE 2348
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2292: LD_ADDR_VAR 0 3
2296: PUSH
2297: LD_EXP 41
2301: PUSH
2302: LD_EXP 34
2306: PUSH
2307: LD_VAR 0 2
2311: ARRAY
2312: ARRAY
2313: PUSH
2314: FOR_IN
2315: IFFALSE 2344
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2317: LD_VAR 0 3
2321: PUSH
2322: LD_INT 1
2324: ARRAY
2325: PPUSH
2326: LD_VAR 0 3
2330: PUSH
2331: LD_INT 2
2333: ARRAY
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: CALL_OW 62
2342: GO 2314
2344: POP
2345: POP
2346: GO 2397
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2348: LD_EXP 40
2352: PUSH
2353: LD_EXP 34
2357: PUSH
2358: LD_VAR 0 2
2362: ARRAY
2363: ARRAY
2364: PUSH
2365: LD_INT 1
2367: ARRAY
2368: PPUSH
2369: LD_EXP 40
2373: PUSH
2374: LD_EXP 34
2378: PUSH
2379: LD_VAR 0 2
2383: ARRAY
2384: ARRAY
2385: PUSH
2386: LD_INT 2
2388: ARRAY
2389: PPUSH
2390: LD_INT 2
2392: PPUSH
2393: CALL_OW 62
// end ;
2397: GO 2268
2399: POP
2400: POP
// if def_extra_sib_deposits then
2401: LD_EXP 7
2405: IFFALSE 2559
// for i = 1 to Side_Positions do
2407: LD_ADDR_VAR 0 2
2411: PUSH
2412: DOUBLE
2413: LD_INT 1
2415: DEC
2416: ST_TO_ADDR
2417: LD_EXP 34
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2557
// begin if not Side_Positions [ i ] then
2425: LD_EXP 34
2429: PUSH
2430: LD_VAR 0 2
2434: ARRAY
2435: NOT
2436: IFFALSE 2440
// continue ;
2438: GO 2422
// if def_extra_sib_deposits = 2 then
2440: LD_EXP 7
2444: PUSH
2445: LD_INT 2
2447: EQUAL
2448: IFFALSE 2506
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2450: LD_ADDR_VAR 0 3
2454: PUSH
2455: LD_EXP 43
2459: PUSH
2460: LD_EXP 34
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: ARRAY
2471: PUSH
2472: FOR_IN
2473: IFFALSE 2502
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: LD_VAR 0 3
2488: PUSH
2489: LD_INT 2
2491: ARRAY
2492: PPUSH
2493: LD_INT 3
2495: PPUSH
2496: CALL_OW 62
2500: GO 2472
2502: POP
2503: POP
2504: GO 2555
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2506: LD_EXP 42
2510: PUSH
2511: LD_EXP 34
2515: PUSH
2516: LD_VAR 0 2
2520: ARRAY
2521: ARRAY
2522: PUSH
2523: LD_INT 1
2525: ARRAY
2526: PPUSH
2527: LD_EXP 42
2531: PUSH
2532: LD_EXP 34
2536: PUSH
2537: LD_VAR 0 2
2541: ARRAY
2542: ARRAY
2543: PUSH
2544: LD_INT 2
2546: ARRAY
2547: PPUSH
2548: LD_INT 3
2550: PPUSH
2551: CALL_OW 62
// end ;
2555: GO 2422
2557: POP
2558: POP
// end ;
2559: LD_VAR 0 1
2563: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2564: LD_INT 0
2566: PPUSH
2567: PPUSH
2568: PPUSH
// if not Team_Game then
2569: LD_EXP 36
2573: NOT
2574: IFFALSE 2672
// begin for i = 1 to 8 do
2576: LD_ADDR_VAR 0 2
2580: PUSH
2581: DOUBLE
2582: LD_INT 1
2584: DEC
2585: ST_TO_ADDR
2586: LD_INT 8
2588: PUSH
2589: FOR_TO
2590: IFFALSE 2668
// for j = 1 to 8 do
2592: LD_ADDR_VAR 0 3
2596: PUSH
2597: DOUBLE
2598: LD_INT 1
2600: DEC
2601: ST_TO_ADDR
2602: LD_INT 8
2604: PUSH
2605: FOR_TO
2606: IFFALSE 2664
// if i <> j then
2608: LD_VAR 0 2
2612: PUSH
2613: LD_VAR 0 3
2617: NONEQUAL
2618: IFFALSE 2642
// SetAttitude ( i , j , att_neutral , true ) else
2620: LD_VAR 0 2
2624: PPUSH
2625: LD_VAR 0 3
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: LD_INT 1
2635: PPUSH
2636: CALL_OW 80
2640: GO 2662
// SetAttitude ( i , j , att_friend , true ) ;
2642: LD_VAR 0 2
2646: PPUSH
2647: LD_VAR 0 3
2651: PPUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: CALL_OW 80
2662: GO 2605
2664: POP
2665: POP
2666: GO 2589
2668: POP
2669: POP
// end else
2670: GO 2847
// begin if def_shared_vision then
2672: LD_EXP 8
2676: IFFALSE 2741
// begin for i in Teams do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_EXP 32
2687: PUSH
2688: FOR_IN
2689: IFFALSE 2739
// for j = 2 to i do
2691: LD_ADDR_VAR 0 3
2695: PUSH
2696: DOUBLE
2697: LD_INT 2
2699: DEC
2700: ST_TO_ADDR
2701: LD_VAR 0 2
2705: PUSH
2706: FOR_TO
2707: IFFALSE 2735
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2709: LD_VAR 0 2
2713: PUSH
2714: LD_VAR 0 3
2718: ARRAY
2719: PPUSH
2720: LD_VAR 0 2
2724: PUSH
2725: LD_INT 1
2727: ARRAY
2728: PPUSH
2729: CALL_OW 343
2733: GO 2706
2735: POP
2736: POP
2737: GO 2688
2739: POP
2740: POP
// end ; for i = 1 to 8 do
2741: LD_ADDR_VAR 0 2
2745: PUSH
2746: DOUBLE
2747: LD_INT 1
2749: DEC
2750: ST_TO_ADDR
2751: LD_INT 8
2753: PUSH
2754: FOR_TO
2755: IFFALSE 2845
// for j = 1 to 8 do
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: DOUBLE
2763: LD_INT 1
2765: DEC
2766: ST_TO_ADDR
2767: LD_INT 8
2769: PUSH
2770: FOR_TO
2771: IFFALSE 2841
// if Side_Teams [ i ] = Side_Teams [ j ] then
2773: LD_EXP 31
2777: PUSH
2778: LD_VAR 0 2
2782: ARRAY
2783: PUSH
2784: LD_EXP 31
2788: PUSH
2789: LD_VAR 0 3
2793: ARRAY
2794: EQUAL
2795: IFFALSE 2819
// SetAttitude ( i , j , att_friend , true ) else
2797: LD_VAR 0 2
2801: PPUSH
2802: LD_VAR 0 3
2806: PPUSH
2807: LD_INT 1
2809: PPUSH
2810: LD_INT 1
2812: PPUSH
2813: CALL_OW 80
2817: GO 2839
// SetAttitude ( i , j , att_enemy , true ) ;
2819: LD_VAR 0 2
2823: PPUSH
2824: LD_VAR 0 3
2828: PPUSH
2829: LD_INT 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 80
2839: GO 2770
2841: POP
2842: POP
2843: GO 2754
2845: POP
2846: POP
// end ; end ;
2847: LD_VAR 0 1
2851: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2852: LD_INT 0
2854: PPUSH
2855: PPUSH
2856: PPUSH
2857: PPUSH
// result := [ ] ;
2858: LD_ADDR_VAR 0 7
2862: PUSH
2863: EMPTY
2864: ST_TO_ADDR
// for i := 1 to count do
2865: LD_ADDR_VAR 0 8
2869: PUSH
2870: DOUBLE
2871: LD_INT 1
2873: DEC
2874: ST_TO_ADDR
2875: LD_VAR 0 1
2879: PUSH
2880: FOR_TO
2881: IFFALSE 3299
// begin uc_direction := Rand ( 0 , 5 ) ;
2883: LD_ADDR_OWVAR 24
2887: PUSH
2888: LD_INT 0
2890: PPUSH
2891: LD_INT 5
2893: PPUSH
2894: CALL_OW 12
2898: ST_TO_ADDR
// if commander then
2899: LD_LOC 1
2903: IFFALSE 3012
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2905: LD_ADDR_OWVAR 26
2909: PUSH
2910: LD_OWVAR 19
2914: PUSH
2915: LD_OWVAR 20
2919: ARRAY
2920: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2921: LD_INT 1
2923: PPUSH
2924: LD_INT 2
2926: PPUSH
2927: CALL_OW 12
2931: PPUSH
2932: LD_VAR 0 2
2936: PPUSH
2937: LD_EXP 20
2941: PUSH
2942: LD_INT 2
2944: PLUS
2945: PPUSH
2946: CALL_OW 380
// hc_importance := 105 ;
2950: LD_ADDR_OWVAR 32
2954: PUSH
2955: LD_INT 105
2957: ST_TO_ADDR
// commander := false ;
2958: LD_ADDR_LOC 1
2962: PUSH
2963: LD_INT 0
2965: ST_TO_ADDR
// if Multiplayer then
2966: LD_OWVAR 4
2970: IFFALSE 3010
// begin hc_gallery := MULTIAVATARS ;
2972: LD_ADDR_OWVAR 33
2976: PUSH
2977: LD_STRING MULTIAVATARS
2979: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2980: LD_ADDR_OWVAR 34
2984: PUSH
2985: LD_OWVAR 20
2989: PPUSH
2990: CALL_OW 525
2994: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2995: LD_ADDR_OWVAR 27
2999: PUSH
3000: LD_OWVAR 20
3004: PPUSH
3005: CALL_OW 526
3009: ST_TO_ADDR
// end ; end else
3010: GO 3075
// begin hc_name :=  ;
3012: LD_ADDR_OWVAR 26
3016: PUSH
3017: LD_STRING 
3019: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3020: LD_INT 1
3022: PPUSH
3023: LD_INT 2
3025: PPUSH
3026: CALL_OW 12
3030: PPUSH
3031: LD_VAR 0 2
3035: PPUSH
3036: LD_EXP 20
3040: PPUSH
3041: CALL_OW 380
// hc_importance := 0 ;
3045: LD_ADDR_OWVAR 32
3049: PUSH
3050: LD_INT 0
3052: ST_TO_ADDR
// if Multiplayer then
3053: LD_OWVAR 4
3057: IFFALSE 3075
// begin hc_gallery :=  ;
3059: LD_ADDR_OWVAR 33
3063: PUSH
3064: LD_STRING 
3066: ST_TO_ADDR
// hc_face_number := 0 ;
3067: LD_ADDR_OWVAR 34
3071: PUSH
3072: LD_INT 0
3074: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3075: LD_ADDR_VAR 0 10
3079: PUSH
3080: CALL_OW 44
3084: ST_TO_ADDR
// if global_defined then
3085: LD_LOC 3
3089: IFFALSE 3229
// begin if ( cl = class_soldier ) then
3091: LD_VAR 0 2
3095: PUSH
3096: LD_INT 1
3098: EQUAL
3099: IFFALSE 3119
// j := i + soldiers_created else
3101: LD_ADDR_VAR 0 9
3105: PUSH
3106: LD_VAR 0 8
3110: PUSH
3111: LD_LOC 4
3115: PLUS
3116: ST_TO_ADDR
3117: GO 3129
// j := i ;
3119: LD_ADDR_VAR 0 9
3123: PUSH
3124: LD_VAR 0 8
3128: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3129: LD_LOC 2
3133: PUSH
3134: LD_VAR 0 2
3138: ARRAY
3139: PUSH
3140: LD_VAR 0 9
3144: ARRAY
3145: PPUSH
3146: LD_VAR 0 10
3150: PPUSH
3151: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3155: LD_VAR 0 10
3159: PPUSH
3160: LD_INT 2
3162: PPUSH
3163: LD_LOC 2
3167: PUSH
3168: LD_VAR 0 2
3172: ARRAY
3173: PUSH
3174: LD_VAR 0 9
3178: ARRAY
3179: PPUSH
3180: LD_INT 2
3182: PPUSH
3183: CALL_OW 260
3187: PPUSH
3188: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3192: LD_VAR 0 10
3196: PPUSH
3197: LD_INT 1
3199: PPUSH
3200: LD_LOC 2
3204: PUSH
3205: LD_VAR 0 2
3209: ARRAY
3210: PUSH
3211: LD_VAR 0 9
3215: ARRAY
3216: PPUSH
3217: LD_INT 1
3219: PPUSH
3220: CALL_OW 260
3224: PPUSH
3225: CALL_OW 239
// end ; if building then
3229: LD_VAR 0 6
3233: IFFALSE 3251
// PlaceHumanInUnit ( un , building ) else
3235: LD_VAR 0 10
3239: PPUSH
3240: LD_VAR 0 6
3244: PPUSH
3245: CALL_OW 52
3249: GO 3278
// PlaceUnitXYR ( un , x , y , r , false ) ;
3251: LD_VAR 0 10
3255: PPUSH
3256: LD_VAR 0 3
3260: PPUSH
3261: LD_VAR 0 4
3265: PPUSH
3266: LD_VAR 0 5
3270: PPUSH
3271: LD_INT 0
3273: PPUSH
3274: CALL_OW 50
// result := result ^ [ un ] ;
3278: LD_ADDR_VAR 0 7
3282: PUSH
3283: LD_VAR 0 7
3287: PUSH
3288: LD_VAR 0 10
3292: PUSH
3293: EMPTY
3294: LIST
3295: ADD
3296: ST_TO_ADDR
// end ;
3297: GO 2880
3299: POP
3300: POP
// if not global_defined then
3301: LD_LOC 3
3305: NOT
3306: IFFALSE 3384
// if ( global_units >= cl ) then
3308: LD_LOC 2
3312: PUSH
3313: LD_VAR 0 2
3317: GREATEREQUAL
3318: IFFALSE 3359
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3320: LD_ADDR_LOC 2
3324: PUSH
3325: LD_LOC 2
3329: PPUSH
3330: LD_VAR 0 2
3334: PPUSH
3335: LD_LOC 2
3339: PUSH
3340: LD_VAR 0 2
3344: ARRAY
3345: PUSH
3346: LD_VAR 0 7
3350: ADD
3351: PPUSH
3352: CALL_OW 1
3356: ST_TO_ADDR
3357: GO 3384
// global_units := Replace ( global_units , cl , result ) ;
3359: LD_ADDR_LOC 2
3363: PUSH
3364: LD_LOC 2
3368: PPUSH
3369: LD_VAR 0 2
3373: PPUSH
3374: LD_VAR 0 7
3378: PPUSH
3379: CALL_OW 1
3383: ST_TO_ADDR
// if commander then
3384: LD_LOC 1
3388: IFFALSE 3435
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3390: LD_ADDR_EXP 45
3394: PUSH
3395: LD_EXP 45
3399: PPUSH
3400: LD_OWVAR 20
3404: PPUSH
3405: LD_EXP 45
3409: PUSH
3410: LD_OWVAR 20
3414: ARRAY
3415: PUSH
3416: LD_VAR 0 10
3420: ADD
3421: PPUSH
3422: CALL_OW 1
3426: ST_TO_ADDR
// commander := false ;
3427: LD_ADDR_LOC 1
3431: PUSH
3432: LD_INT 0
3434: ST_TO_ADDR
// end ; end ;
3435: LD_VAR 0 7
3439: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3440: LD_INT 0
3442: PPUSH
3443: PPUSH
3444: PPUSH
3445: PPUSH
3446: PPUSH
3447: PPUSH
3448: PPUSH
3449: PPUSH
3450: PPUSH
// if side in [ 0 , 9 ] then
3451: LD_VAR 0 1
3455: PUSH
3456: LD_INT 0
3458: PUSH
3459: LD_INT 9
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: IN
3466: IFFALSE 3470
// exit ;
3468: GO 4520
// pos := Side_Positions [ side ] ;
3470: LD_ADDR_VAR 0 3
3474: PUSH
3475: LD_EXP 34
3479: PUSH
3480: LD_VAR 0 1
3484: ARRAY
3485: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3486: LD_ADDR_OWVAR 21
3490: PUSH
3491: LD_EXP 35
3495: PUSH
3496: LD_VAR 0 1
3500: ARRAY
3501: ST_TO_ADDR
// uc_side := side ;
3502: LD_ADDR_OWVAR 20
3506: PUSH
3507: LD_VAR 0 1
3511: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3512: LD_ADDR_VAR 0 4
3516: PUSH
3517: LD_EXP 37
3521: PUSH
3522: LD_VAR 0 3
3526: ARRAY
3527: PUSH
3528: LD_INT 1
3530: ARRAY
3531: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3532: LD_ADDR_VAR 0 5
3536: PUSH
3537: LD_EXP 37
3541: PUSH
3542: LD_VAR 0 3
3546: ARRAY
3547: PUSH
3548: LD_INT 2
3550: ARRAY
3551: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3552: LD_ADDR_VAR 0 6
3556: PUSH
3557: LD_EXP 37
3561: PUSH
3562: LD_VAR 0 3
3566: ARRAY
3567: PUSH
3568: LD_INT 3
3570: ARRAY
3571: ST_TO_ADDR
// if is_depot then
3572: LD_EXP 17
3576: IFFALSE 3709
// begin bc_type = b_depot ;
3578: LD_ADDR_OWVAR 42
3582: PUSH
3583: LD_INT 0
3585: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3586: LD_ADDR_VAR 0 10
3590: PUSH
3591: LD_VAR 0 4
3595: PPUSH
3596: LD_VAR 0 5
3600: PPUSH
3601: LD_VAR 0 6
3605: PPUSH
3606: CALL_OW 47
3610: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3611: LD_VAR 0 10
3615: PPUSH
3616: LD_STRING @
3618: PUSH
3619: LD_VAR 0 1
3623: STR
3624: PPUSH
3625: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3629: LD_VAR 0 10
3633: PPUSH
3634: CALL_OW 274
3638: PPUSH
3639: LD_INT 1
3641: PPUSH
3642: LD_EXP 22
3646: PUSH
3647: LD_INT 1
3649: ARRAY
3650: PPUSH
3651: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3655: LD_VAR 0 10
3659: PPUSH
3660: CALL_OW 274
3664: PPUSH
3665: LD_INT 2
3667: PPUSH
3668: LD_EXP 22
3672: PUSH
3673: LD_INT 2
3675: ARRAY
3676: PPUSH
3677: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3681: LD_VAR 0 10
3685: PPUSH
3686: CALL_OW 274
3690: PPUSH
3691: LD_INT 3
3693: PPUSH
3694: LD_EXP 22
3698: PUSH
3699: LD_INT 3
3701: ARRAY
3702: PPUSH
3703: CALL_OW 277
// end else
3707: GO 3853
// begin for i := 1 to 3 do
3709: LD_ADDR_VAR 0 7
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: FOR_TO
3723: IFFALSE 3851
// begin r := starting_resources [ i ] ;
3725: LD_ADDR_VAR 0 8
3729: PUSH
3730: LD_EXP 22
3734: PUSH
3735: LD_VAR 0 7
3739: ARRAY
3740: ST_TO_ADDR
// while r >= 10 do
3741: LD_VAR 0 8
3745: PUSH
3746: LD_INT 10
3748: GREATEREQUAL
3749: IFFALSE 3849
// if r > 50 then
3751: LD_VAR 0 8
3755: PUSH
3756: LD_INT 50
3758: GREATER
3759: IFFALSE 3805
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3761: LD_VAR 0 7
3765: PPUSH
3766: LD_INT 5
3768: PPUSH
3769: LD_VAR 0 4
3773: PPUSH
3774: LD_VAR 0 5
3778: PPUSH
3779: LD_INT 4
3781: PPUSH
3782: LD_INT 0
3784: PPUSH
3785: CALL_OW 60
// r := r - 50 ;
3789: LD_ADDR_VAR 0 8
3793: PUSH
3794: LD_VAR 0 8
3798: PUSH
3799: LD_INT 50
3801: MINUS
3802: ST_TO_ADDR
// end else
3803: GO 3847
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3805: LD_VAR 0 7
3809: PPUSH
3810: LD_VAR 0 8
3814: PUSH
3815: LD_INT 10
3817: DIV
3818: PPUSH
3819: LD_VAR 0 4
3823: PPUSH
3824: LD_VAR 0 5
3828: PPUSH
3829: LD_INT 4
3831: PPUSH
3832: LD_INT 0
3834: PPUSH
3835: CALL_OW 60
// r := 0 ;
3839: LD_ADDR_VAR 0 8
3843: PUSH
3844: LD_INT 0
3846: ST_TO_ADDR
// end ;
3847: GO 3741
// end ;
3849: GO 3722
3851: POP
3852: POP
// end ; for r in starting_crates do
3853: LD_ADDR_VAR 0 8
3857: PUSH
3858: LD_EXP 21
3862: PUSH
3863: FOR_IN
3864: IFFALSE 3896
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3866: LD_INT 1
3868: PPUSH
3869: LD_INT 5
3871: PPUSH
3872: LD_VAR 0 4
3876: PPUSH
3877: LD_VAR 0 5
3881: PPUSH
3882: LD_VAR 0 8
3886: PPUSH
3887: LD_INT 0
3889: PPUSH
3890: CALL_OW 60
3894: GO 3863
3896: POP
3897: POP
// if def_morale_flags then
3898: LD_EXP 9
3902: IFFALSE 4041
// begin x := start_def [ pos ] [ 1 ] ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_EXP 39
3913: PUSH
3914: LD_VAR 0 3
3918: ARRAY
3919: PUSH
3920: LD_INT 1
3922: ARRAY
3923: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3924: LD_ADDR_VAR 0 5
3928: PUSH
3929: LD_EXP 39
3933: PUSH
3934: LD_VAR 0 3
3938: ARRAY
3939: PUSH
3940: LD_INT 2
3942: ARRAY
3943: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3944: LD_VAR 0 4
3948: PPUSH
3949: LD_VAR 0 5
3953: PPUSH
3954: LD_INT 12
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3964: LD_ADDR_EXP 44
3968: PUSH
3969: LD_EXP 44
3973: PUSH
3974: LD_VAR 0 1
3978: PPUSH
3979: LD_VAR 0 4
3983: PPUSH
3984: LD_VAR 0 5
3988: PPUSH
3989: LD_INT 1
3991: PUSH
3992: LD_INT 100
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 2
4001: PUSH
4002: LD_INT 50
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 20
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 20
4021: PUSH
4022: LD_INT 100
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: PPUSH
4035: CALL_OW 418
4039: ADD
4040: ST_TO_ADDR
// end ; commander := true ;
4041: LD_ADDR_LOC 1
4045: PUSH
4046: LD_INT 1
4048: ST_TO_ADDR
// soldiers_created := 0 ;
4049: LD_ADDR_LOC 4
4053: PUSH
4054: LD_INT 0
4056: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4057: LD_ADDR_VAR 0 7
4061: PUSH
4062: DOUBLE
4063: LD_INT 1
4065: DEC
4066: ST_TO_ADDR
4067: LD_EXP 18
4071: PUSH
4072: FOR_TO
4073: IFFALSE 4226
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4075: LD_ADDR_VAR 0 4
4079: PUSH
4080: LD_EXP 38
4084: PUSH
4085: LD_VAR 0 3
4089: ARRAY
4090: PUSH
4091: LD_VAR 0 7
4095: ARRAY
4096: PUSH
4097: LD_INT 1
4099: ARRAY
4100: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4101: LD_ADDR_VAR 0 5
4105: PUSH
4106: LD_EXP 38
4110: PUSH
4111: LD_VAR 0 3
4115: ARRAY
4116: PUSH
4117: LD_VAR 0 7
4121: ARRAY
4122: PUSH
4123: LD_INT 2
4125: ARRAY
4126: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4127: LD_ADDR_VAR 0 6
4131: PUSH
4132: LD_EXP 38
4136: PUSH
4137: LD_VAR 0 3
4141: ARRAY
4142: PUSH
4143: LD_VAR 0 7
4147: ARRAY
4148: PUSH
4149: LD_INT 3
4151: ARRAY
4152: ST_TO_ADDR
// bc_type := b_breastwork ;
4153: LD_ADDR_OWVAR 42
4157: PUSH
4158: LD_INT 31
4160: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4161: LD_ADDR_VAR 0 9
4165: PUSH
4166: LD_VAR 0 4
4170: PPUSH
4171: LD_VAR 0 5
4175: PPUSH
4176: LD_VAR 0 6
4180: PPUSH
4181: CALL_OW 47
4185: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4186: LD_INT 1
4188: PPUSH
4189: LD_INT 1
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: LD_INT 0
4200: PPUSH
4201: LD_VAR 0 9
4205: PPUSH
4206: CALL 2852 0 6
// soldiers_created := soldiers_created + 1 ;
4210: LD_ADDR_LOC 4
4214: PUSH
4215: LD_LOC 4
4219: PUSH
4220: LD_INT 1
4222: PLUS
4223: ST_TO_ADDR
// end ;
4224: GO 4072
4226: POP
4227: POP
// x := start_def [ pos ] [ 1 ] ;
4228: LD_ADDR_VAR 0 4
4232: PUSH
4233: LD_EXP 39
4237: PUSH
4238: LD_VAR 0 3
4242: ARRAY
4243: PUSH
4244: LD_INT 1
4246: ARRAY
4247: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_EXP 39
4257: PUSH
4258: LD_VAR 0 3
4262: ARRAY
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4268: LD_LOC 8
4272: PUSH
4273: LD_EXP 18
4277: MINUS
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_VAR 0 4
4286: PPUSH
4287: LD_VAR 0 5
4291: PPUSH
4292: LD_INT 5
4294: PPUSH
4295: LD_INT 0
4297: PPUSH
4298: CALL 2852 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4302: LD_LOC 5
4306: PPUSH
4307: LD_INT 2
4309: PPUSH
4310: LD_VAR 0 4
4314: PPUSH
4315: LD_VAR 0 5
4319: PPUSH
4320: LD_INT 5
4322: PPUSH
4323: LD_INT 0
4325: PPUSH
4326: CALL 2852 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4330: LD_LOC 7
4334: PPUSH
4335: LD_INT 3
4337: PPUSH
4338: LD_VAR 0 4
4342: PPUSH
4343: LD_VAR 0 5
4347: PPUSH
4348: LD_INT 5
4350: PPUSH
4351: LD_INT 0
4353: PPUSH
4354: CALL 2852 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4358: LD_LOC 6
4362: PPUSH
4363: LD_INT 4
4365: PPUSH
4366: LD_VAR 0 4
4370: PPUSH
4371: LD_VAR 0 5
4375: PPUSH
4376: LD_INT 5
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL 2852 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4386: LD_EXP 10
4390: PUSH
4391: LD_INT 20
4393: PPUSH
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 321
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: AND
4408: IFFALSE 4425
// SetTech ( tech_SibDet , side , state_researched ) ;
4410: LD_INT 20
4412: PPUSH
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_INT 2
4420: PPUSH
4421: CALL_OW 322
// if def_siberite_bomb = 1 then
4425: LD_EXP 13
4429: PUSH
4430: LD_INT 1
4432: EQUAL
4433: IFFALSE 4467
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4435: LD_INT 25
4437: PPUSH
4438: LD_VAR 0 1
4442: PPUSH
4443: LD_INT 1
4445: PPUSH
4446: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4450: LD_INT 73
4452: PPUSH
4453: LD_VAR 0 1
4457: PPUSH
4458: LD_INT 1
4460: PPUSH
4461: CALL_OW 322
// end else
4465: GO 4497
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4467: LD_INT 25
4469: PPUSH
4470: LD_VAR 0 1
4474: PPUSH
4475: LD_INT 0
4477: PPUSH
4478: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4482: LD_INT 73
4484: PPUSH
4485: LD_VAR 0 1
4489: PPUSH
4490: LD_INT 0
4492: PPUSH
4493: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4497: LD_INT 24
4499: PPUSH
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_INT 0
4507: PPUSH
4508: CALL_OW 322
// global_defined := true ;
4512: LD_ADDR_LOC 3
4516: PUSH
4517: LD_INT 1
4519: ST_TO_ADDR
// end ;
4520: LD_VAR 0 2
4524: RET
// function prepare_sides ; var i ; begin
4525: LD_INT 0
4527: PPUSH
4528: PPUSH
// global_units := [ ] ;
4529: LD_ADDR_LOC 2
4533: PUSH
4534: EMPTY
4535: ST_TO_ADDR
// global_defined := false ;
4536: LD_ADDR_LOC 3
4540: PUSH
4541: LD_INT 0
4543: ST_TO_ADDR
// CountClassMembers ;
4544: CALL 4594 0 0
// for i := 1 to 8 do
4548: LD_ADDR_VAR 0 2
4552: PUSH
4553: DOUBLE
4554: LD_INT 1
4556: DEC
4557: ST_TO_ADDR
4558: LD_INT 8
4560: PUSH
4561: FOR_TO
4562: IFFALSE 4587
// if Side_Positions [ i ] then
4564: LD_EXP 34
4568: PUSH
4569: LD_VAR 0 2
4573: ARRAY
4574: IFFALSE 4585
// prepare_side ( i ) ;
4576: LD_VAR 0 2
4580: PPUSH
4581: CALL 3440 0 1
4585: GO 4561
4587: POP
4588: POP
// end ;
4589: LD_VAR 0 1
4593: RET
// function CountClassMembers ; var Mode ; begin
4594: LD_INT 0
4596: PPUSH
4597: PPUSH
// if No_Mechs then
4598: LD_EXP 15
4602: IFFALSE 4614
// Mode := 2 else
4604: LD_ADDR_VAR 0 2
4608: PUSH
4609: LD_INT 2
4611: ST_TO_ADDR
4612: GO 4622
// Mode := 1 ;
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: LD_INT 1
4621: ST_TO_ADDR
// neng := number_of_people ;
4622: LD_ADDR_LOC 5
4626: PUSH
4627: LD_EXP 19
4631: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4632: LD_ADDR_LOC 8
4636: PUSH
4637: LD_LOC 5
4641: PUSH
4642: LD_INT 4
4644: PUSH
4645: LD_INT 3
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_VAR 0 2
4656: ARRAY
4657: DIV
4658: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4659: LD_LOC 8
4663: PUSH
4664: LD_EXP 18
4668: LESS
4669: IFFALSE 4681
// nsol := number_of_breastworks ;
4671: LD_ADDR_LOC 8
4675: PUSH
4676: LD_EXP 18
4680: ST_TO_ADDR
// neng := neng - nsol ;
4681: LD_ADDR_LOC 5
4685: PUSH
4686: LD_LOC 5
4690: PUSH
4691: LD_LOC 8
4695: MINUS
4696: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4697: LD_ADDR_LOC 6
4701: PUSH
4702: LD_LOC 5
4706: PUSH
4707: LD_INT 3
4709: PUSH
4710: LD_INT 2
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_VAR 0 2
4721: ARRAY
4722: DIV
4723: ST_TO_ADDR
// if ( nsci < 1 ) then
4724: LD_LOC 6
4728: PUSH
4729: LD_INT 1
4731: LESS
4732: IFFALSE 4742
// nsci := 1 ;
4734: LD_ADDR_LOC 6
4738: PUSH
4739: LD_INT 1
4741: ST_TO_ADDR
// neng := neng - nsci ;
4742: LD_ADDR_LOC 5
4746: PUSH
4747: LD_LOC 5
4751: PUSH
4752: LD_LOC 6
4756: MINUS
4757: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4758: LD_ADDR_LOC 7
4762: PUSH
4763: LD_LOC 5
4767: PUSH
4768: LD_INT 2
4770: DIV
4771: PUSH
4772: LD_INT 0
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_VAR 0 2
4783: ARRAY
4784: ST_TO_ADDR
// neng := neng - nmech ;
4785: LD_ADDR_LOC 5
4789: PUSH
4790: LD_LOC 5
4794: PUSH
4795: LD_LOC 7
4799: MINUS
4800: ST_TO_ADDR
// if ( neng < 1 ) then
4801: LD_LOC 5
4805: PUSH
4806: LD_INT 1
4808: LESS
4809: IFFALSE 4819
// neng := 1 ;
4811: LD_ADDR_LOC 5
4815: PUSH
4816: LD_INT 1
4818: ST_TO_ADDR
// end ;
4819: LD_VAR 0 1
4823: RET
// starting begin disable ( 98 ) ;
4824: LD_INT 98
4826: DISABLE_MARKED
// disable ( 99 ) ;
4827: LD_INT 99
4829: DISABLE_MARKED
// disable ( 400 ) ;
4830: LD_INT 400
4832: DISABLE_MARKED
// disable ( 401 ) ;
4833: LD_INT 401
4835: DISABLE_MARKED
// mp_selectmsg := true ;
4836: LD_ADDR_OWVAR 13
4840: PUSH
4841: LD_INT 1
4843: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4844: CALL 68 0 0
// init_map ;
4848: CALL 1237 0 0
// init_respawning ;
4852: CALL 13853 0 0
// set_shared_visions_and_alliances ;
4856: CALL 2564 0 0
// ResetFog ;
4860: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4864: LD_OWVAR 2
4868: PPUSH
4869: CALL_OW 520
// AnimateTrees ( true ) ;
4873: LD_INT 1
4875: PPUSH
4876: CALL_OW 573
// prepare_sides ;
4880: CALL 4525 0 0
// Init_Win_Condition ;
4884: CALL 7973 0 0
// ShowTimer ;
4888: CALL 7551 0 0
// music_nat := Side_Nations [ your_side ] ;
4892: LD_ADDR_OWVAR 71
4896: PUSH
4897: LD_EXP 35
4901: PUSH
4902: LD_OWVAR 2
4906: ARRAY
4907: ST_TO_ADDR
// if IAmSpec then
4908: CALL_OW 531
4912: IFFALSE 4936
// begin fogoff ( true ) ;
4914: LD_INT 1
4916: PPUSH
4917: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4921: LD_INT 130
4923: PPUSH
4924: LD_INT 100
4926: PPUSH
4927: CALL_OW 86
// enable ( 400 ) ;
4931: LD_INT 400
4933: ENABLE_MARKED
// end else
4934: GO 4982
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4936: LD_EXP 39
4940: PUSH
4941: LD_EXP 34
4945: PUSH
4946: LD_OWVAR 2
4950: ARRAY
4951: ARRAY
4952: PUSH
4953: LD_INT 1
4955: ARRAY
4956: PPUSH
4957: LD_EXP 39
4961: PUSH
4962: LD_EXP 34
4966: PUSH
4967: LD_OWVAR 2
4971: ARRAY
4972: ARRAY
4973: PUSH
4974: LD_INT 2
4976: ARRAY
4977: PPUSH
4978: CALL_OW 86
// end ; InitApeman ;
4982: CALL 6059 0 0
// BuildUpAreas := [ bt1 , bt2 , bt3 , bt4 , bt5 , bt6 , bt7 , bt8 ] ;
4986: LD_ADDR_EXP 55
4990: PUSH
4991: LD_INT 9
4993: PUSH
4994: LD_INT 10
4996: PUSH
4997: LD_INT 11
4999: PUSH
5000: LD_INT 12
5002: PUSH
5003: LD_INT 13
5005: PUSH
5006: LD_INT 14
5008: PUSH
5009: LD_INT 15
5011: PUSH
5012: LD_INT 16
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: ST_TO_ADDR
// BeginBuildUp ;
5025: CALL 14347 0 0
// end ;
5029: END
// every 0 0$1 do
5030: GO 5032
5032: DISABLE
// if ( def_siberite_bomb > 1 ) then
5033: LD_EXP 13
5037: PUSH
5038: LD_INT 1
5040: GREATER
5041: IFFALSE 5056
// begin wait ( siberite_bomb_Delay ) ;
5043: LD_EXP 29
5047: PPUSH
5048: CALL_OW 67
// EnableSibFiss ;
5052: CALL 5057 0 0
// end ;
5056: END
// function EnableSibFiss ; var i ; begin
5057: LD_INT 0
5059: PPUSH
5060: PPUSH
// for i := 1 to 8 do
5061: LD_ADDR_VAR 0 2
5065: PUSH
5066: DOUBLE
5067: LD_INT 1
5069: DEC
5070: ST_TO_ADDR
5071: LD_INT 8
5073: PUSH
5074: FOR_TO
5075: IFFALSE 5121
// if Side_Positions [ i ] then
5077: LD_EXP 34
5081: PUSH
5082: LD_VAR 0 2
5086: ARRAY
5087: IFFALSE 5119
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5089: LD_INT 25
5091: PPUSH
5092: LD_VAR 0 2
5096: PPUSH
5097: LD_INT 1
5099: PPUSH
5100: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5104: LD_INT 73
5106: PPUSH
5107: LD_VAR 0 2
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: CALL_OW 322
// end ;
5119: GO 5074
5121: POP
5122: POP
// end ; end_of_file
5123: LD_VAR 0 1
5127: RET
// every 0 0$25 + 0 0$1.0 do
5128: GO 5130
5130: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5131: LD_INT 18
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: CALL_OW 287
5141: PUSH
5142: LD_INT 200
5144: PUSH
5145: LD_EXP 23
5149: MINUS
5150: PUSH
5151: LD_INT 50
5153: DIVREAL
5154: PUSH
5155: LD_INT 5
5157: MUL
5158: LESS
5159: IFFALSE 5182
// CreateCratesArea ( Rand ( 3 , 4 ) , Between1 , true ) ;
5161: LD_INT 3
5163: PPUSH
5164: LD_INT 4
5166: PPUSH
5167: CALL_OW 12
5171: PPUSH
5172: LD_INT 18
5174: PPUSH
5175: LD_INT 1
5177: PPUSH
5178: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5182: LD_INT 19
5184: PPUSH
5185: LD_INT 1
5187: PPUSH
5188: CALL_OW 287
5192: PUSH
5193: LD_INT 200
5195: PUSH
5196: LD_EXP 23
5200: MINUS
5201: PUSH
5202: LD_INT 50
5204: DIVREAL
5205: PUSH
5206: LD_INT 5
5208: MUL
5209: LESS
5210: IFFALSE 5233
// CreateCratesArea ( Rand ( 3 , 4 ) , Between2 , true ) ;
5212: LD_INT 3
5214: PPUSH
5215: LD_INT 4
5217: PPUSH
5218: CALL_OW 12
5222: PPUSH
5223: LD_INT 19
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5233: LD_INT 20
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL_OW 287
5243: PUSH
5244: LD_INT 200
5246: PUSH
5247: LD_EXP 23
5251: MINUS
5252: PUSH
5253: LD_INT 50
5255: DIVREAL
5256: PUSH
5257: LD_INT 5
5259: MUL
5260: LESS
5261: IFFALSE 5284
// CreateCratesArea ( Rand ( 3 , 4 ) , Between3 , true ) ;
5263: LD_INT 3
5265: PPUSH
5266: LD_INT 4
5268: PPUSH
5269: CALL_OW 12
5273: PPUSH
5274: LD_INT 20
5276: PPUSH
5277: LD_INT 1
5279: PPUSH
5280: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5284: LD_INT 21
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: CALL_OW 287
5294: PUSH
5295: LD_INT 200
5297: PUSH
5298: LD_EXP 23
5302: MINUS
5303: PUSH
5304: LD_INT 50
5306: DIVREAL
5307: PUSH
5308: LD_INT 5
5310: MUL
5311: LESS
5312: IFFALSE 5335
// CreateCratesArea ( Rand ( 3 , 4 ) , Between4 , true ) ;
5314: LD_INT 3
5316: PPUSH
5317: LD_INT 4
5319: PPUSH
5320: CALL_OW 12
5324: PPUSH
5325: LD_INT 21
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: CALL_OW 55
// if GetResourceArea ( Center1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5335: LD_INT 22
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: CALL_OW 287
5345: PUSH
5346: LD_INT 200
5348: PUSH
5349: LD_EXP 23
5353: MINUS
5354: PUSH
5355: LD_INT 25
5357: DIVREAL
5358: PUSH
5359: LD_INT 5
5361: MUL
5362: LESS
5363: IFFALSE 5378
// CreateCratesArea ( 5 , Center1 , true ) ;
5365: LD_INT 5
5367: PPUSH
5368: LD_INT 22
5370: PPUSH
5371: LD_INT 1
5373: PPUSH
5374: CALL_OW 55
// if GetResourceArea ( Center2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5378: LD_INT 23
5380: PPUSH
5381: LD_INT 1
5383: PPUSH
5384: CALL_OW 287
5388: PUSH
5389: LD_INT 200
5391: PUSH
5392: LD_EXP 23
5396: MINUS
5397: PUSH
5398: LD_INT 25
5400: DIVREAL
5401: PUSH
5402: LD_INT 5
5404: MUL
5405: LESS
5406: IFFALSE 5421
// CreateCratesArea ( 5 , Center2 , true ) ;
5408: LD_INT 5
5410: PPUSH
5411: LD_INT 23
5413: PPUSH
5414: LD_INT 1
5416: PPUSH
5417: CALL_OW 55
// enable ;
5421: ENABLE
// end ;
5422: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5423: GO 5425
5425: DISABLE
5426: LD_INT 0
5428: PPUSH
5429: PPUSH
// begin case tick of 1 .. 1 1$0 :
5430: LD_OWVAR 1
5434: PUSH
5435: LD_INT 1
5437: DOUBLE
5438: GREATEREQUAL
5439: IFFALSE 5447
5441: LD_INT 2100
5443: DOUBLE
5444: LESSEQUAL
5445: IFTRUE 5449
5447: GO 5477
5449: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5450: LD_EXP 23
5454: PUSH
5455: LD_INT 100
5457: DIVREAL
5458: PUSH
5459: LD_INT 525
5461: PPUSH
5462: LD_INT 1050
5464: PPUSH
5465: CALL_OW 12
5469: MUL
5470: PPUSH
5471: CALL_OW 67
5475: GO 5779
5477: LD_INT 2100
5479: PUSH
5480: LD_INT 1
5482: PLUS
5483: DOUBLE
5484: GREATEREQUAL
5485: IFFALSE 5493
5487: LD_INT 10500
5489: DOUBLE
5490: LESSEQUAL
5491: IFTRUE 5495
5493: GO 5523
5495: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5496: LD_EXP 23
5500: PUSH
5501: LD_INT 100
5503: DIVREAL
5504: PUSH
5505: LD_INT 1050
5507: PPUSH
5508: LD_INT 1750
5510: PPUSH
5511: CALL_OW 12
5515: MUL
5516: PPUSH
5517: CALL_OW 67
5521: GO 5779
5523: LD_INT 10500
5525: PUSH
5526: LD_INT 1
5528: PLUS
5529: DOUBLE
5530: GREATEREQUAL
5531: IFFALSE 5539
5533: LD_INT 21000
5535: DOUBLE
5536: LESSEQUAL
5537: IFTRUE 5541
5539: GO 5569
5541: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5542: LD_EXP 23
5546: PUSH
5547: LD_INT 100
5549: DIVREAL
5550: PUSH
5551: LD_INT 1750
5553: PPUSH
5554: LD_INT 2100
5556: PPUSH
5557: CALL_OW 12
5561: MUL
5562: PPUSH
5563: CALL_OW 67
5567: GO 5779
5569: LD_INT 21000
5571: PUSH
5572: LD_INT 1
5574: PLUS
5575: DOUBLE
5576: GREATEREQUAL
5577: IFFALSE 5585
5579: LD_INT 42000
5581: DOUBLE
5582: LESSEQUAL
5583: IFTRUE 5587
5585: GO 5615
5587: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5588: LD_EXP 23
5592: PUSH
5593: LD_INT 100
5595: DIVREAL
5596: PUSH
5597: LD_INT 2100
5599: PPUSH
5600: LD_INT 2275
5602: PPUSH
5603: CALL_OW 12
5607: MUL
5608: PPUSH
5609: CALL_OW 67
5613: GO 5779
5615: LD_INT 42000
5617: PUSH
5618: LD_INT 1
5620: PLUS
5621: DOUBLE
5622: GREATEREQUAL
5623: IFFALSE 5631
5625: LD_INT 63000
5627: DOUBLE
5628: LESSEQUAL
5629: IFTRUE 5633
5631: GO 5661
5633: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5634: LD_EXP 23
5638: PUSH
5639: LD_INT 100
5641: DIVREAL
5642: PUSH
5643: LD_INT 2275
5645: PPUSH
5646: LD_INT 2450
5648: PPUSH
5649: CALL_OW 12
5653: MUL
5654: PPUSH
5655: CALL_OW 67
5659: GO 5779
5661: LD_INT 63000
5663: PUSH
5664: LD_INT 1
5666: PLUS
5667: DOUBLE
5668: GREATEREQUAL
5669: IFFALSE 5677
5671: LD_INT 105000
5673: DOUBLE
5674: LESSEQUAL
5675: IFTRUE 5679
5677: GO 5707
5679: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5680: LD_EXP 23
5684: PUSH
5685: LD_INT 100
5687: DIVREAL
5688: PUSH
5689: LD_INT 2450
5691: PPUSH
5692: LD_INT 2800
5694: PPUSH
5695: CALL_OW 12
5699: MUL
5700: PPUSH
5701: CALL_OW 67
5705: GO 5779
5707: LD_INT 105000
5709: PUSH
5710: LD_INT 1
5712: PLUS
5713: DOUBLE
5714: GREATEREQUAL
5715: IFFALSE 5723
5717: LD_INT 630000
5719: DOUBLE
5720: LESSEQUAL
5721: IFTRUE 5725
5723: GO 5753
5725: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5726: LD_EXP 23
5730: PUSH
5731: LD_INT 100
5733: DIVREAL
5734: PUSH
5735: LD_INT 2800
5737: PPUSH
5738: LD_INT 3500
5740: PPUSH
5741: CALL_OW 12
5745: MUL
5746: PPUSH
5747: CALL_OW 67
5751: GO 5779
5753: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5754: LD_EXP 23
5758: PUSH
5759: LD_INT 100
5761: DIVREAL
5762: PUSH
5763: LD_INT 3500
5765: PPUSH
5766: LD_INT 3850
5768: PPUSH
5769: CALL_OW 12
5773: MUL
5774: PPUSH
5775: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5779: LD_ADDR_VAR 0 2
5783: PUSH
5784: LD_INT 3
5786: PPUSH
5787: LD_INT 5
5789: PPUSH
5790: CALL_OW 12
5794: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5795: LD_ADDR_VAR 0 1
5799: PUSH
5800: LD_EXP 34
5804: PUSH
5805: LD_INT 0
5807: PUSH
5808: EMPTY
5809: LIST
5810: DIFF
5811: PUSH
5812: FOR_IN
5813: IFFALSE 5862
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5815: LD_VAR 0 2
5819: PPUSH
5820: LD_EXP 39
5824: PUSH
5825: LD_VAR 0 1
5829: ARRAY
5830: PUSH
5831: LD_INT 1
5833: ARRAY
5834: PPUSH
5835: LD_EXP 39
5839: PUSH
5840: LD_VAR 0 1
5844: ARRAY
5845: PUSH
5846: LD_INT 2
5848: ARRAY
5849: PPUSH
5850: LD_INT 20
5852: PPUSH
5853: LD_INT 1
5855: PPUSH
5856: CALL_OW 56
5860: GO 5812
5862: POP
5863: POP
// enable ;
5864: ENABLE
// end ; end_of_file
5865: PPOPN 2
5867: END
// every 20 20$00 trigger apemanNumber do
5868: LD_EXP 46
5872: IFFALSE 5905
5874: GO 5876
5876: DISABLE
// begin enable ;
5877: ENABLE
// if apeLevel >= 8 then
5878: LD_EXP 51
5882: PUSH
5883: LD_INT 8
5885: GREATEREQUAL
5886: IFFALSE 5891
// disable else
5888: DISABLE
5889: GO 5905
// apeLevel := apeLevel + 1 ;
5891: LD_ADDR_EXP 51
5895: PUSH
5896: LD_EXP 51
5900: PUSH
5901: LD_INT 1
5903: PLUS
5904: ST_TO_ADDR
// end ;
5905: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5906: LD_EXP 46
5910: PUSH
5911: LD_EXP 47
5915: LESS
5916: IFFALSE 6056
5918: GO 5920
5920: DISABLE
5921: LD_INT 0
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
// begin enable ;
5927: ENABLE
// for i := 1 to apemanPos do
5928: LD_ADDR_VAR 0 1
5932: PUSH
5933: DOUBLE
5934: LD_INT 1
5936: DEC
5937: ST_TO_ADDR
5938: LD_EXP 49
5942: PUSH
5943: FOR_TO
5944: IFFALSE 6054
// begin if apemanPlayerCount [ i ] then
5946: LD_EXP 50
5950: PUSH
5951: LD_VAR 0 1
5955: ARRAY
5956: IFFALSE 6052
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5958: LD_EXP 50
5962: PUSH
5963: LD_VAR 0 1
5967: ARRAY
5968: PUSH
5969: LD_EXP 49
5973: PUSH
5974: LD_VAR 0 1
5978: ARRAY
5979: GREATER
5980: IFFALSE 6052
// begin ape := PrepareApeman ;
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: CALL 6575 0 0
5991: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5992: LD_VAR 0 2
5996: PPUSH
5997: LD_EXP 52
6001: PUSH
6002: LD_VAR 0 1
6006: ARRAY
6007: PPUSH
6008: LD_INT 0
6010: PPUSH
6011: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6015: LD_ADDR_EXP 49
6019: PUSH
6020: LD_EXP 49
6024: PPUSH
6025: LD_VAR 0 1
6029: PPUSH
6030: LD_EXP 49
6034: PUSH
6035: LD_VAR 0 1
6039: ARRAY
6040: PUSH
6041: LD_VAR 0 2
6045: UNION
6046: PPUSH
6047: CALL_OW 1
6051: ST_TO_ADDR
// end ; end ; end ;
6052: GO 5943
6054: POP
6055: POP
// end ;
6056: PPOPN 4
6058: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6059: LD_INT 0
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
6065: PPUSH
6066: PPUSH
6067: PPUSH
// playersAmount := 0 ;
6068: LD_ADDR_VAR 0 3
6072: PUSH
6073: LD_INT 0
6075: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6076: LD_ADDR_VAR 0 7
6080: PUSH
6081: LD_INT 1
6083: PUSH
6084: LD_INT 2
6086: PUSH
6087: LD_INT 3
6089: PUSH
6090: LD_INT 4
6092: PUSH
6093: LD_INT 5
6095: PUSH
6096: LD_INT 6
6098: PUSH
6099: LD_INT 7
6101: PUSH
6102: LD_INT 8
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6115: LD_ADDR_EXP 52
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: LD_INT 0
6125: PUSH
6126: LD_INT 0
6128: PUSH
6129: LD_INT 0
6131: PUSH
6132: LD_INT 0
6134: PUSH
6135: LD_INT 0
6137: PUSH
6138: LD_INT 0
6140: PUSH
6141: LD_INT 0
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: ST_TO_ADDR
// for j = 1 to Side_Positions do
6154: LD_ADDR_VAR 0 4
6158: PUSH
6159: DOUBLE
6160: LD_INT 1
6162: DEC
6163: ST_TO_ADDR
6164: LD_EXP 34
6168: PUSH
6169: FOR_TO
6170: IFFALSE 6237
// if Side_Positions [ j ] then
6172: LD_EXP 34
6176: PUSH
6177: LD_VAR 0 4
6181: ARRAY
6182: IFFALSE 6235
// begin playersAmount := playersAmount + 1 ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_VAR 0 3
6193: PUSH
6194: LD_INT 1
6196: PLUS
6197: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6198: LD_ADDR_EXP 52
6202: PUSH
6203: LD_EXP 52
6207: PPUSH
6208: LD_VAR 0 4
6212: PPUSH
6213: LD_VAR 0 7
6217: PUSH
6218: LD_EXP 34
6222: PUSH
6223: LD_VAR 0 4
6227: ARRAY
6228: ARRAY
6229: PPUSH
6230: CALL_OW 1
6234: ST_TO_ADDR
// end ;
6235: GO 6169
6237: POP
6238: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6239: LD_ADDR_EXP 48
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_EXP 25
6251: MUL
6252: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6253: LD_ADDR_EXP 46
6257: PUSH
6258: LD_VAR 0 3
6262: PUSH
6263: LD_EXP 48
6267: MUL
6268: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6269: LD_ADDR_EXP 47
6273: PUSH
6274: LD_EXP 46
6278: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6279: LD_ADDR_EXP 49
6283: PUSH
6284: LD_INT 0
6286: PUSH
6287: LD_INT 0
6289: PUSH
6290: LD_INT 0
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: LD_INT 0
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6318: LD_ADDR_EXP 50
6322: PUSH
6323: LD_INT 0
6325: PUSH
6326: LD_INT 0
6328: PUSH
6329: LD_INT 0
6331: PUSH
6332: LD_INT 0
6334: PUSH
6335: LD_INT 0
6337: PUSH
6338: LD_INT 0
6340: PUSH
6341: LD_INT 0
6343: PUSH
6344: LD_INT 0
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: ST_TO_ADDR
// apeLevel := 1 ;
6357: LD_ADDR_EXP 51
6361: PUSH
6362: LD_INT 1
6364: ST_TO_ADDR
// if not apemanNumber then
6365: LD_EXP 46
6369: NOT
6370: IFFALSE 6374
// exit ;
6372: GO 6570
// for i := 1 to apemanPerPlayer do
6374: LD_ADDR_VAR 0 2
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_EXP 48
6388: PUSH
6389: FOR_TO
6390: IFFALSE 6568
// begin for j := 1 to Side_Positions do
6392: LD_ADDR_VAR 0 4
6396: PUSH
6397: DOUBLE
6398: LD_INT 1
6400: DEC
6401: ST_TO_ADDR
6402: LD_EXP 34
6406: PUSH
6407: FOR_TO
6408: IFFALSE 6564
// if Side_Positions [ j ] then
6410: LD_EXP 34
6414: PUSH
6415: LD_VAR 0 4
6419: ARRAY
6420: IFFALSE 6562
// begin pos := Side_Positions [ j ] ;
6422: LD_ADDR_VAR 0 6
6426: PUSH
6427: LD_EXP 34
6431: PUSH
6432: LD_VAR 0 4
6436: ARRAY
6437: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6438: LD_ADDR_EXP 50
6442: PUSH
6443: LD_EXP 50
6447: PPUSH
6448: LD_VAR 0 4
6452: PPUSH
6453: LD_EXP 50
6457: PUSH
6458: LD_VAR 0 4
6462: ARRAY
6463: PUSH
6464: LD_INT 1
6466: PLUS
6467: PPUSH
6468: CALL_OW 1
6472: ST_TO_ADDR
// ape := PrepareApeman ;
6473: LD_ADDR_VAR 0 5
6477: PUSH
6478: CALL 6575 0 0
6482: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6483: LD_ADDR_EXP 49
6487: PUSH
6488: LD_EXP 49
6492: PPUSH
6493: LD_VAR 0 4
6497: PPUSH
6498: LD_EXP 49
6502: PUSH
6503: LD_VAR 0 4
6507: ARRAY
6508: PPUSH
6509: LD_EXP 49
6513: PUSH
6514: LD_VAR 0 4
6518: ARRAY
6519: PUSH
6520: LD_INT 1
6522: PLUS
6523: PPUSH
6524: LD_VAR 0 5
6528: PPUSH
6529: CALL_OW 1
6533: PPUSH
6534: CALL_OW 1
6538: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6539: LD_VAR 0 5
6543: PPUSH
6544: LD_EXP 52
6548: PUSH
6549: LD_VAR 0 4
6553: ARRAY
6554: PPUSH
6555: LD_INT 0
6557: PPUSH
6558: CALL_OW 49
// end ;
6562: GO 6407
6564: POP
6565: POP
// end ;
6566: GO 6389
6568: POP
6569: POP
// end ;
6570: LD_VAR 0 1
6574: RET
// export function PrepareApeman ; var bonus ; begin
6575: LD_INT 0
6577: PPUSH
6578: PPUSH
// uc_side := 0 ;
6579: LD_ADDR_OWVAR 20
6583: PUSH
6584: LD_INT 0
6586: ST_TO_ADDR
// uc_nation := 0 ;
6587: LD_ADDR_OWVAR 21
6591: PUSH
6592: LD_INT 0
6594: ST_TO_ADDR
// InitHc ;
6595: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6599: LD_ADDR_VAR 0 2
6603: PUSH
6604: LD_INT 1
6606: NEG
6607: PUSH
6608: LD_INT 0
6610: PUSH
6611: LD_INT 1
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 25
6621: PUSH
6622: LD_INT 12
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PPUSH
6629: CALL_OW 69
6633: PUSH
6634: LD_INT 3
6636: MOD
6637: PUSH
6638: LD_INT 1
6640: PLUS
6641: ARRAY
6642: ST_TO_ADDR
// hc_class := class_apeman ;
6643: LD_ADDR_OWVAR 28
6647: PUSH
6648: LD_INT 12
6650: ST_TO_ADDR
// hc_gallery :=  ;
6651: LD_ADDR_OWVAR 33
6655: PUSH
6656: LD_STRING 
6658: ST_TO_ADDR
// hc_name :=  ;
6659: LD_ADDR_OWVAR 26
6663: PUSH
6664: LD_STRING 
6666: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6667: LD_ADDR_OWVAR 31
6671: PUSH
6672: LD_EXP 51
6676: PUSH
6677: LD_VAR 0 2
6681: PLUS
6682: PUSH
6683: LD_EXP 51
6687: PUSH
6688: LD_VAR 0 2
6692: PLUS
6693: PUSH
6694: LD_EXP 51
6698: PUSH
6699: LD_VAR 0 2
6703: PLUS
6704: PUSH
6705: LD_EXP 51
6709: PUSH
6710: LD_VAR 0 2
6714: PLUS
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6722: LD_ADDR_OWVAR 35
6726: PUSH
6727: LD_INT 10
6729: PUSH
6730: LD_VAR 0 2
6734: MUL
6735: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6736: LD_ADDR_OWVAR 29
6740: PUSH
6741: LD_INT 12
6743: PUSH
6744: LD_INT 12
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: ST_TO_ADDR
// result := CreateHuman ;
6751: LD_ADDR_VAR 0 1
6755: PUSH
6756: CALL_OW 44
6760: ST_TO_ADDR
// end ;
6761: LD_VAR 0 1
6765: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6766: LD_INT 0
6768: PPUSH
6769: PPUSH
6770: PPUSH
// if not ape then
6771: LD_VAR 0 1
6775: NOT
6776: IFFALSE 6780
// exit ;
6778: GO 6905
// side := GetSide ( ape ) ;
6780: LD_ADDR_VAR 0 3
6784: PUSH
6785: LD_VAR 0 1
6789: PPUSH
6790: CALL_OW 255
6794: ST_TO_ADDR
// if not side then
6795: LD_VAR 0 3
6799: NOT
6800: IFFALSE 6854
// begin for i = 1 to apemanPos do
6802: LD_ADDR_VAR 0 4
6806: PUSH
6807: DOUBLE
6808: LD_INT 1
6810: DEC
6811: ST_TO_ADDR
6812: LD_EXP 49
6816: PUSH
6817: FOR_TO
6818: IFFALSE 6852
// if ape in apemanPos [ i ] then
6820: LD_VAR 0 1
6824: PUSH
6825: LD_EXP 49
6829: PUSH
6830: LD_VAR 0 4
6834: ARRAY
6835: IN
6836: IFFALSE 6850
// begin side := i ;
6838: LD_ADDR_VAR 0 3
6842: PUSH
6843: LD_VAR 0 4
6847: ST_TO_ADDR
// break ;
6848: GO 6852
// end ;
6850: GO 6817
6852: POP
6853: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6854: LD_ADDR_EXP 49
6858: PUSH
6859: LD_EXP 49
6863: PPUSH
6864: LD_VAR 0 3
6868: PPUSH
6869: LD_EXP 49
6873: PUSH
6874: LD_VAR 0 3
6878: ARRAY
6879: PUSH
6880: LD_VAR 0 1
6884: DIFF
6885: PPUSH
6886: CALL_OW 1
6890: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6891: LD_ADDR_EXP 46
6895: PUSH
6896: LD_EXP 46
6900: PUSH
6901: LD_INT 1
6903: MINUS
6904: ST_TO_ADDR
// end ; end_of_file
6905: LD_VAR 0 2
6909: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6910: LD_VAR 0 1
6914: PPUSH
6915: CALL_OW 266
6919: PUSH
6920: LD_INT 0
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: IN
6930: IFFALSE 6955
// SetBName ( b , @ & GetSide ( b ) ) ;
6932: LD_VAR 0 1
6936: PPUSH
6937: LD_STRING @
6939: PUSH
6940: LD_VAR 0 1
6944: PPUSH
6945: CALL_OW 255
6949: STR
6950: PPUSH
6951: CALL_OW 500
// end ;
6955: PPOPN 2
6957: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6958: LD_VAR 0 1
6962: PPUSH
6963: CALL_OW 266
6967: PUSH
6968: LD_INT 0
6970: PUSH
6971: LD_INT 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: IN
6978: IFFALSE 7003
// SetBName ( b , @ & GetSide ( b ) ) ;
6980: LD_VAR 0 1
6984: PPUSH
6985: LD_STRING @
6987: PUSH
6988: LD_VAR 0 1
6992: PPUSH
6993: CALL_OW 255
6997: STR
6998: PPUSH
6999: CALL_OW 500
// end ;
7003: PPOPN 3
7005: END
// on VehicleConstructed ( veh , fac ) do var side ;
7006: LD_INT 0
7008: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7009: LD_VAR 0 1
7013: PPUSH
7014: CALL_OW 263
7018: PUSH
7019: LD_INT 5
7021: EQUAL
7022: IFFALSE 7164
// begin side := GetSide ( veh ) ;
7024: LD_ADDR_VAR 0 3
7028: PUSH
7029: LD_VAR 0 1
7033: PPUSH
7034: CALL_OW 255
7038: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7039: LD_ADDR_EXP 49
7043: PUSH
7044: LD_EXP 49
7048: PPUSH
7049: LD_VAR 0 3
7053: PPUSH
7054: LD_EXP 49
7058: PUSH
7059: LD_VAR 0 3
7063: ARRAY
7064: PPUSH
7065: LD_INT 52
7067: PUSH
7068: EMPTY
7069: LIST
7070: PPUSH
7071: CALL_OW 72
7075: PUSH
7076: LD_INT 22
7078: PUSH
7079: LD_VAR 0 3
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 2
7090: PUSH
7091: LD_INT 33
7093: PUSH
7094: LD_INT 5
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 25
7103: PUSH
7104: LD_INT 12
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 25
7113: PUSH
7114: LD_INT 15
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 25
7123: PUSH
7124: LD_INT 16
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 25
7133: PUSH
7134: LD_INT 17
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 69
7157: UNION
7158: PPUSH
7159: CALL_OW 1
7163: ST_TO_ADDR
// end ; end ;
7164: PPOPN 3
7166: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7167: LD_INT 0
7169: PPUSH
7170: PPUSH
7171: PPUSH
7172: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7173: LD_VAR 0 1
7177: PPUSH
7178: CALL_OW 257
7182: PUSH
7183: LD_INT 12
7185: PUSH
7186: LD_INT 15
7188: PUSH
7189: LD_INT 17
7191: PUSH
7192: LD_INT 16
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: IN
7201: PUSH
7202: LD_VAR 0 1
7206: PPUSH
7207: CALL_OW 263
7211: PUSH
7212: LD_INT 5
7214: EQUAL
7215: OR
7216: IFFALSE 7227
// ApeKilled ( j ) ;
7218: LD_VAR 0 1
7222: PPUSH
7223: CALL 6766 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7227: LD_VAR 0 1
7231: PPUSH
7232: CALL_OW 266
7236: PUSH
7237: LD_INT 0
7239: PUSH
7240: LD_INT 1
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: IN
7247: IFFALSE 7329
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7249: LD_ADDR_VAR 0 4
7253: PUSH
7254: LD_EXP 34
7258: PUSH
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 255
7268: ARRAY
7269: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7270: LD_ADDR_VAR 0 2
7274: PUSH
7275: LD_EXP 39
7279: PUSH
7280: LD_VAR 0 4
7284: ARRAY
7285: PUSH
7286: LD_INT 1
7288: ARRAY
7289: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7290: LD_ADDR_VAR 0 3
7294: PUSH
7295: LD_EXP 39
7299: PUSH
7300: LD_VAR 0 4
7304: ARRAY
7305: PUSH
7306: LD_INT 2
7308: ARRAY
7309: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7310: LD_VAR 0 2
7314: PPUSH
7315: LD_VAR 0 3
7319: PPUSH
7320: CALL_OW 420
7324: PPUSH
7325: CALL_OW 419
// end ; end ;
7329: PPOPN 5
7331: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7332: LD_VAR 0 1
7336: PPUSH
7337: LD_VAR 0 2
7341: PPUSH
7342: LD_VAR 0 3
7346: PPUSH
7347: LD_OWVAR 2
7351: PPUSH
7352: CALL 7734 0 4
7356: PPOPN 3
7358: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7359: LD_INT 0
7361: PPUSH
7362: PPUSH
// for un in battle_flags_id do
7363: LD_ADDR_VAR 0 2
7367: PUSH
7368: LD_EXP 44
7372: PUSH
7373: FOR_IN
7374: IFFALSE 7449
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7376: LD_VAR 0 2
7380: PPUSH
7381: LD_INT 1
7383: PUSH
7384: LD_LOC 9
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 2
7395: PUSH
7396: LD_LOC 9
7400: PUSH
7401: LD_INT 2
7403: DIV
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: LD_INT 3
7411: PUSH
7412: LD_LOC 9
7416: PUSH
7417: LD_INT 5
7419: DIV
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: LD_INT 20
7427: PUSH
7428: LD_LOC 9
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: PPUSH
7443: CALL_OW 423
7447: GO 7373
7449: POP
7450: POP
// end ;
7451: LD_VAR 0 1
7455: RET
// every 1 do var un ;
7456: GO 7458
7458: DISABLE
7459: LD_INT 0
7461: PPUSH
// begin if not def_morale_flags then
7462: LD_EXP 9
7466: NOT
7467: IFFALSE 7471
// exit ;
7469: GO 7548
// if not morale_decreasing_time then
7471: LD_EXP 24
7475: NOT
7476: IFFALSE 7480
// exit ;
7478: GO 7548
// strength = 100 ;
7480: LD_ADDR_LOC 9
7484: PUSH
7485: LD_INT 100
7487: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7488: LD_EXP 24
7492: PPUSH
7493: CALL_OW 67
// strength := strength - 1 ;
7497: LD_ADDR_LOC 9
7501: PUSH
7502: LD_LOC 9
7506: PUSH
7507: LD_INT 1
7509: MINUS
7510: ST_TO_ADDR
// Update_Flags ;
7511: CALL 7359 0 0
// until not strength ;
7515: LD_LOC 9
7519: NOT
7520: IFFALSE 7488
// for un in battle_flags_id do
7522: LD_ADDR_VAR 0 1
7526: PUSH
7527: LD_EXP 44
7531: PUSH
7532: FOR_IN
7533: IFFALSE 7546
// KillBattleFlag ( un ) ;
7535: LD_VAR 0 1
7539: PPUSH
7540: CALL_OW 419
7544: GO 7532
7546: POP
7547: POP
// end ; end_of_file
7548: PPOPN 1
7550: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7551: LD_INT 0
7553: PPUSH
7554: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7555: LD_ADDR_VAR 0 2
7559: PUSH
7560: LD_STRING #Multi1x1-Time
7562: PUSH
7563: LD_OWVAR 1
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: ST_TO_ADDR
// if WaitServerStrings then
7572: LD_EXP 54
7576: IFFALSE 7594
// AllStrings = AllStrings ^ WaitServerStrings ;
7578: LD_ADDR_VAR 0 2
7582: PUSH
7583: LD_VAR 0 2
7587: PUSH
7588: LD_EXP 54
7592: ADD
7593: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7594: LD_INT 0
7596: PUSH
7597: LD_EXP 29
7601: PUSH
7602: LD_OWVAR 1
7606: MINUS
7607: LESSEQUAL
7608: IFFALSE 7639
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7610: LD_ADDR_VAR 0 2
7614: PUSH
7615: LD_VAR 0 2
7619: PUSH
7620: LD_STRING #allowedsibbomb
7622: PUSH
7623: LD_EXP 29
7627: PUSH
7628: LD_OWVAR 1
7632: MINUS
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: ADD
7638: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7639: LD_INT 0
7641: PUSH
7642: LD_EXP 57
7646: PUSH
7647: LD_OWVAR 1
7651: MINUS
7652: LESSEQUAL
7653: IFFALSE 7684
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7655: LD_ADDR_VAR 0 2
7659: PUSH
7660: LD_VAR 0 2
7664: PUSH
7665: LD_STRING #builduptime
7667: PUSH
7668: LD_EXP 57
7672: PUSH
7673: LD_OWVAR 1
7677: MINUS
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: ADD
7683: ST_TO_ADDR
// if ( ExtraStrings ) then
7684: LD_EXP 53
7688: IFFALSE 7710
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7690: LD_ADDR_VAR 0 2
7694: PUSH
7695: LD_VAR 0 2
7699: PUSH
7700: LD_STRING 
7702: ADD
7703: PUSH
7704: LD_EXP 53
7708: ADD
7709: ST_TO_ADDR
// Display_Strings := AllStrings ;
7710: LD_ADDR_OWVAR 47
7714: PUSH
7715: LD_VAR 0 2
7719: ST_TO_ADDR
// end ;
7720: LD_VAR 0 1
7724: RET
// every 0 0$1 do
7725: GO 7727
7727: DISABLE
// begin ShowTimer ;
7728: CALL 7551 0 0
// enable ;
7732: ENABLE
// end ; end_of_file
7733: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7734: LD_INT 0
7736: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7737: LD_VAR 0 1
7741: PPUSH
7742: CALL_OW 255
7746: PUSH
7747: LD_VAR 0 4
7751: EQUAL
7752: IFFALSE 7771
// begin SetAchievement ( ACH_RAD ) ;
7754: LD_STRING ACH_RAD
7756: PPUSH
7757: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7761: LD_STRING ACH_NL
7763: PPUSH
7764: LD_INT 1
7766: PPUSH
7767: CALL_OW 564
// end end ;
7771: LD_VAR 0 5
7775: RET
// export function SA_Win ( side ) ; begin
7776: LD_INT 0
7778: PPUSH
// case side of 1 :
7779: LD_VAR 0 1
7783: PUSH
7784: LD_INT 1
7786: DOUBLE
7787: EQUAL
7788: IFTRUE 7792
7790: GO 7805
7792: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7793: LD_STRING ACH_AH
7795: PPUSH
7796: LD_INT 1
7798: PPUSH
7799: CALL_OW 564
7803: GO 7968
7805: LD_INT 2
7807: DOUBLE
7808: EQUAL
7809: IFTRUE 7813
7811: GO 7826
7813: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7814: LD_STRING ACH_E
7816: PPUSH
7817: LD_INT 1
7819: PPUSH
7820: CALL_OW 564
7824: GO 7968
7826: LD_INT 3
7828: DOUBLE
7829: EQUAL
7830: IFTRUE 7834
7832: GO 7847
7834: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7835: LD_STRING ACH_OOL
7837: PPUSH
7838: LD_INT 1
7840: PPUSH
7841: CALL_OW 564
7845: GO 7968
7847: LD_INT 1
7849: PUSH
7850: LD_INT 2
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7887
7862: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7863: LD_STRING ACH_AH
7865: PPUSH
7866: LD_REAL  5.00000000000000E-0001
7869: PPUSH
7870: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7874: LD_STRING ACH_E
7876: PPUSH
7877: LD_REAL  5.00000000000000E-0001
7880: PPUSH
7881: CALL_OW 564
// end ; [ 2 , 3 ] :
7885: GO 7968
7887: LD_INT 2
7889: PUSH
7890: LD_INT 3
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: DOUBLE
7897: EQUAL
7898: IFTRUE 7902
7900: GO 7927
7902: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7903: LD_STRING ACH_OOL
7905: PPUSH
7906: LD_REAL  5.00000000000000E-0001
7909: PPUSH
7910: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7914: LD_STRING ACH_E
7916: PPUSH
7917: LD_REAL  5.00000000000000E-0001
7920: PPUSH
7921: CALL_OW 564
// end ; [ 3 , 1 ] :
7925: GO 7968
7927: LD_INT 3
7929: PUSH
7930: LD_INT 1
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: DOUBLE
7937: EQUAL
7938: IFTRUE 7942
7940: GO 7967
7942: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7943: LD_STRING ACH_AH
7945: PPUSH
7946: LD_REAL  5.00000000000000E-0001
7949: PPUSH
7950: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7954: LD_STRING ACH_OOL
7956: PPUSH
7957: LD_REAL  5.00000000000000E-0001
7960: PPUSH
7961: CALL_OW 564
// end ; end ;
7965: GO 7968
7967: POP
// end ; end_of_file
7968: LD_VAR 0 2
7972: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7973: LD_INT 0
7975: PPUSH
7976: PPUSH
// enable ( 98 ) ;
7977: LD_INT 98
7979: ENABLE_MARKED
// GameEnded = false ;
7980: LD_ADDR_LOC 15
7984: PUSH
7985: LD_INT 0
7987: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7988: LD_ADDR_LOC 14
7992: PUSH
7993: LD_INT 0
7995: PUSH
7996: LD_INT 0
7998: PUSH
7999: LD_INT 0
8001: PUSH
8002: LD_INT 0
8004: PUSH
8005: LD_INT 0
8007: PUSH
8008: LD_INT 0
8010: PUSH
8011: LD_INT 0
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: ST_TO_ADDR
// unfoged = false ;
8027: LD_ADDR_LOC 16
8031: PUSH
8032: LD_INT 0
8034: ST_TO_ADDR
// defeated_specs := [ ] ;
8035: LD_ADDR_LOC 17
8039: PUSH
8040: EMPTY
8041: ST_TO_ADDR
// for i = 1 to side_positions do
8042: LD_ADDR_VAR 0 2
8046: PUSH
8047: DOUBLE
8048: LD_INT 1
8050: DEC
8051: ST_TO_ADDR
8052: LD_EXP 34
8056: PUSH
8057: FOR_TO
8058: IFFALSE 8098
// if not side_positions [ i ] then
8060: LD_EXP 34
8064: PUSH
8065: LD_VAR 0 2
8069: ARRAY
8070: NOT
8071: IFFALSE 8096
// defeated = replace ( defeated , i , true ) ;
8073: LD_ADDR_LOC 14
8077: PUSH
8078: LD_LOC 14
8082: PPUSH
8083: LD_VAR 0 2
8087: PPUSH
8088: LD_INT 1
8090: PPUSH
8091: CALL_OW 1
8095: ST_TO_ADDR
8096: GO 8057
8098: POP
8099: POP
// end ;
8100: LD_VAR 0 1
8104: RET
// function CanWinLoose ; begin
8105: LD_INT 0
8107: PPUSH
// Result := true ;
8108: LD_ADDR_VAR 0 1
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8116: CALL_OW 518
8120: PUSH
8121: CALL_OW 519
8125: PUSH
8126: LD_INT 0
8128: GREATER
8129: AND
8130: IFFALSE 8140
// Result := false ;
8132: LD_ADDR_VAR 0 1
8136: PUSH
8137: LD_INT 0
8139: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8140: CALL_OW 531
8144: PUSH
8145: CALL_OW 519
8149: PUSH
8150: LD_INT 1
8152: GREATER
8153: AND
8154: IFFALSE 8164
// Result := false ;
8156: LD_ADDR_VAR 0 1
8160: PUSH
8161: LD_INT 0
8163: ST_TO_ADDR
// end ;
8164: LD_VAR 0 1
8168: RET
// export function HasPower ( i ) ; var k , h ; begin
8169: LD_INT 0
8171: PPUSH
8172: PPUSH
8173: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 108
8183: NOT
8184: PUSH
8185: LD_EXP 33
8189: PUSH
8190: LD_VAR 0 1
8194: ARRAY
8195: NOT
8196: AND
8197: PUSH
8198: LD_OWVAR 4
8202: AND
8203: IFFALSE 8215
// begin result = false ;
8205: LD_ADDR_VAR 0 2
8209: PUSH
8210: LD_INT 0
8212: ST_TO_ADDR
// end else
8213: GO 8510
// case def_win_rules of 0 :
8215: LD_EXP 30
8219: PUSH
8220: LD_INT 0
8222: DOUBLE
8223: EQUAL
8224: IFTRUE 8228
8226: GO 8391
8228: POP
// if def_people_respawning then
8229: LD_EXP 11
8233: IFFALSE 8324
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8235: LD_ADDR_VAR 0 2
8239: PUSH
8240: LD_INT 22
8242: PUSH
8243: LD_VAR 0 1
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: LD_INT 2
8254: PUSH
8255: LD_INT 21
8257: PUSH
8258: LD_INT 1
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: LD_INT 33
8267: PUSH
8268: LD_INT 3
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: LD_INT 33
8277: PUSH
8278: LD_INT 5
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PUSH
8285: LD_INT 30
8287: PUSH
8288: LD_INT 0
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: LD_INT 30
8297: PUSH
8298: LD_INT 1
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: PPUSH
8317: CALL_OW 69
8321: ST_TO_ADDR
8322: GO 8389
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8324: LD_ADDR_VAR 0 2
8328: PUSH
8329: LD_INT 22
8331: PUSH
8332: LD_VAR 0 1
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: LD_INT 2
8343: PUSH
8344: LD_INT 21
8346: PUSH
8347: LD_INT 1
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: PUSH
8354: LD_INT 33
8356: PUSH
8357: LD_INT 3
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PUSH
8364: LD_INT 33
8366: PUSH
8367: LD_INT 5
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PPUSH
8384: CALL_OW 69
8388: ST_TO_ADDR
8389: GO 8510
8391: LD_INT 1
8393: DOUBLE
8394: EQUAL
8395: IFTRUE 8399
8397: GO 8438
8399: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8400: LD_ADDR_VAR 0 2
8404: PUSH
8405: LD_INT 22
8407: PUSH
8408: LD_VAR 0 1
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 21
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PPUSH
8431: CALL_OW 69
8435: ST_TO_ADDR
8436: GO 8510
8438: LD_INT 2
8440: DOUBLE
8441: EQUAL
8442: IFTRUE 8446
8444: GO 8509
8446: POP
// begin h = false ;
8447: LD_ADDR_VAR 0 4
8451: PUSH
8452: LD_INT 0
8454: ST_TO_ADDR
// for k in heroes [ i ] do
8455: LD_ADDR_VAR 0 3
8459: PUSH
8460: LD_EXP 45
8464: PUSH
8465: LD_VAR 0 1
8469: ARRAY
8470: PUSH
8471: FOR_IN
8472: IFFALSE 8495
// if IsLive ( k ) then
8474: LD_VAR 0 3
8478: PPUSH
8479: CALL_OW 300
8483: IFFALSE 8493
// h = true ;
8485: LD_ADDR_VAR 0 4
8489: PUSH
8490: LD_INT 1
8492: ST_TO_ADDR
8493: GO 8471
8495: POP
8496: POP
// Result := h ;
8497: LD_ADDR_VAR 0 2
8501: PUSH
8502: LD_VAR 0 4
8506: ST_TO_ADDR
// end ; end ;
8507: GO 8510
8509: POP
// end ;
8510: LD_VAR 0 2
8514: RET
// function AlliedSides ( i , j ) ; begin
8515: LD_INT 0
8517: PPUSH
// Result := false ;
8518: LD_ADDR_VAR 0 3
8522: PUSH
8523: LD_INT 0
8525: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8526: LD_VAR 0 1
8530: PPUSH
8531: LD_VAR 0 2
8535: PPUSH
8536: CALL_OW 81
8540: PUSH
8541: LD_INT 1
8543: EQUAL
8544: PUSH
8545: LD_VAR 0 2
8549: PPUSH
8550: LD_VAR 0 1
8554: PPUSH
8555: CALL_OW 81
8559: PUSH
8560: LD_INT 1
8562: EQUAL
8563: AND
8564: PUSH
8565: LD_VAR 0 1
8569: PPUSH
8570: CALL_OW 83
8574: AND
8575: PUSH
8576: LD_VAR 0 2
8580: PPUSH
8581: CALL_OW 83
8585: AND
8586: IFFALSE 8596
// Result := true ;
8588: LD_ADDR_VAR 0 3
8592: PUSH
8593: LD_INT 1
8595: ST_TO_ADDR
// end ;
8596: LD_VAR 0 3
8600: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8601: CALL 8105 0 0
8605: PUSH
8606: LD_LOC 15
8610: NOT
8611: AND
8612: IFFALSE 8628
8614: GO 8616
8616: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8617: LD_ADDR_EXP 54
8621: PUSH
8622: LD_STRING #Player-Ended
8624: PUSH
8625: EMPTY
8626: LIST
8627: ST_TO_ADDR
8628: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8629: CALL 8105 0 0
8633: PUSH
8634: LD_LOC 15
8638: AND
8639: IFFALSE 8648
8641: GO 8643
8643: DISABLE
// YouLostInMultiplayer ;
8644: CALL_OW 107
8648: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8649: CALL 8105 0 0
8653: NOT
8654: PUSH
8655: CALL_OW 531
8659: NOT
8660: AND
8661: IFFALSE 8677
8663: GO 8665
8665: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8666: LD_ADDR_EXP 54
8670: PUSH
8671: LD_STRING #server-wait
8673: PUSH
8674: EMPTY
8675: LIST
8676: ST_TO_ADDR
8677: END
// every 100 trigger IAmSpec do
8678: CALL_OW 531
8682: IFFALSE 8698
8684: GO 8686
8686: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8687: LD_ADDR_EXP 54
8691: PUSH
8692: LD_STRING #Player-IAmSpec
8694: PUSH
8695: EMPTY
8696: LIST
8697: ST_TO_ADDR
8698: END
// every 100 trigger GameEnded and IAmSpec do
8699: LD_LOC 15
8703: PUSH
8704: CALL_OW 531
8708: AND
8709: IFFALSE 8718
8711: GO 8713
8713: DISABLE
// YouLostInMultiplayer ;
8714: CALL_OW 107
8718: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8719: CALL 8105 0 0
8723: PUSH
8724: LD_LOC 15
8728: NOT
8729: AND
8730: IFFALSE 8746
8732: GO 8734
8734: DISABLE
// WaitServerStrings = [ $player-win ] ;
8735: LD_ADDR_EXP 54
8739: PUSH
8740: LD_STRING $player-win
8742: PUSH
8743: EMPTY
8744: LIST
8745: ST_TO_ADDR
8746: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8747: CALL 8105 0 0
8751: PUSH
8752: LD_LOC 15
8756: AND
8757: IFFALSE 8781
8759: GO 8761
8761: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8762: LD_EXP 35
8766: PUSH
8767: LD_OWVAR 7
8771: ARRAY
8772: PPUSH
8773: CALL 7776 0 1
// YouWinInMultiplayer ;
8777: CALL_OW 106
// end ;
8781: END
// every 100 trigger isEditor marked 401 do
8782: LD_OWVAR 84
8786: IFFALSE 8802
8788: GO 8790
8790: DISABLE
// Debug_Strings = [ You won ] ;
8791: LD_ADDR_OWVAR 48
8795: PUSH
8796: LD_STRING You won
8798: PUSH
8799: EMPTY
8800: LIST
8801: ST_TO_ADDR
8802: END
// every 100 trigger isEditor marked 400 do
8803: LD_OWVAR 84
8807: IFFALSE 8823
8809: GO 8811
8811: DISABLE
// Debug_Strings = [ You loss ] ;
8812: LD_ADDR_OWVAR 48
8816: PUSH
8817: LD_STRING You loss
8819: PUSH
8820: EMPTY
8821: LIST
8822: ST_TO_ADDR
8823: END
// every 100 marked 98 do var i , un ;
8824: GO 8826
8826: DISABLE
8827: LD_INT 0
8829: PPUSH
8830: PPUSH
// begin for i = 1 to side_positions do
8831: LD_ADDR_VAR 0 1
8835: PUSH
8836: DOUBLE
8837: LD_INT 1
8839: DEC
8840: ST_TO_ADDR
8841: LD_EXP 34
8845: PUSH
8846: FOR_TO
8847: IFFALSE 8934
// begin if side_positions [ i ] then
8849: LD_EXP 34
8853: PUSH
8854: LD_VAR 0 1
8858: ARRAY
8859: IFFALSE 8932
// if not HasPower ( i ) and not defeated [ i ] then
8861: LD_VAR 0 1
8865: PPUSH
8866: CALL 8169 0 1
8870: NOT
8871: PUSH
8872: LD_LOC 14
8876: PUSH
8877: LD_VAR 0 1
8881: ARRAY
8882: NOT
8883: AND
8884: IFFALSE 8932
// begin defeated = replace ( defeated , i , true ) ;
8886: LD_ADDR_LOC 14
8890: PUSH
8891: LD_LOC 14
8895: PPUSH
8896: LD_VAR 0 1
8900: PPUSH
8901: LD_INT 1
8903: PPUSH
8904: CALL_OW 1
8908: ST_TO_ADDR
// if i = mp_player_side then
8909: LD_VAR 0 1
8913: PUSH
8914: LD_OWVAR 7
8918: EQUAL
8919: IFFALSE 8932
// begin Multiplayer_Loose_Message ;
8921: CALL_OW 521
// SetPlayerSpectator ( ) ;
8925: CALL_OW 572
// enable ( 400 ) ;
8929: LD_INT 400
8931: ENABLE_MARKED
// end ; end ; end ;
8932: GO 8846
8934: POP
8935: POP
// DidGameEnd ;
8936: CALL 8951 0 0
// if not GameEnded then
8940: LD_LOC 15
8944: NOT
8945: IFFALSE 8948
// enable ;
8947: ENABLE
// end ;
8948: PPOPN 2
8950: END
// function DidGameEnd ; var i , k , enemy ; begin
8951: LD_INT 0
8953: PPUSH
8954: PPUSH
8955: PPUSH
8956: PPUSH
// enemy = [ ] ;
8957: LD_ADDR_VAR 0 4
8961: PUSH
8962: EMPTY
8963: ST_TO_ADDR
// for i = 1 to side_positions do
8964: LD_ADDR_VAR 0 2
8968: PUSH
8969: DOUBLE
8970: LD_INT 1
8972: DEC
8973: ST_TO_ADDR
8974: LD_EXP 34
8978: PUSH
8979: FOR_TO
8980: IFFALSE 9074
// if not defeated [ i ] then
8982: LD_LOC 14
8986: PUSH
8987: LD_VAR 0 2
8991: ARRAY
8992: NOT
8993: IFFALSE 9072
// for k = 1 to side_positions do
8995: LD_ADDR_VAR 0 3
8999: PUSH
9000: DOUBLE
9001: LD_INT 1
9003: DEC
9004: ST_TO_ADDR
9005: LD_EXP 34
9009: PUSH
9010: FOR_TO
9011: IFFALSE 9070
// if not defeated [ k ] then
9013: LD_LOC 14
9017: PUSH
9018: LD_VAR 0 3
9022: ARRAY
9023: NOT
9024: IFFALSE 9068
// if not AlliedSides ( i , k ) then
9026: LD_VAR 0 2
9030: PPUSH
9031: LD_VAR 0 3
9035: PPUSH
9036: CALL 8515 0 2
9040: NOT
9041: IFFALSE 9068
// enemy = enemy ^ [ i , k ] ;
9043: LD_ADDR_VAR 0 4
9047: PUSH
9048: LD_VAR 0 4
9052: PUSH
9053: LD_VAR 0 2
9057: PUSH
9058: LD_VAR 0 3
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: ADD
9067: ST_TO_ADDR
9068: GO 9010
9070: POP
9071: POP
9072: GO 8979
9074: POP
9075: POP
// if not enemy then
9076: LD_VAR 0 4
9080: NOT
9081: IFFALSE 9107
// begin GameEnded = true ;
9083: LD_ADDR_LOC 15
9087: PUSH
9088: LD_INT 1
9090: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9091: LD_LOC 14
9095: PUSH
9096: LD_OWVAR 7
9100: ARRAY
9101: NOT
9102: IFFALSE 9107
// enable ( 401 ) ;
9104: LD_INT 401
9106: ENABLE_MARKED
// end ; end ;
9107: LD_VAR 0 1
9111: RET
// function unfog ; var k , friends ; begin
9112: LD_INT 0
9114: PPUSH
9115: PPUSH
9116: PPUSH
// for k = 1 to side_positions do
9117: LD_ADDR_VAR 0 2
9121: PUSH
9122: DOUBLE
9123: LD_INT 1
9125: DEC
9126: ST_TO_ADDR
9127: LD_EXP 34
9131: PUSH
9132: FOR_TO
9133: IFFALSE 9189
// if not defeated [ k ] then
9135: LD_LOC 14
9139: PUSH
9140: LD_VAR 0 2
9144: ARRAY
9145: NOT
9146: IFFALSE 9187
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9148: LD_OWVAR 7
9152: PPUSH
9153: LD_VAR 0 2
9157: PPUSH
9158: CALL_OW 81
9162: PUSH
9163: LD_INT 1
9165: PUSH
9166: EMPTY
9167: LIST
9168: IN
9169: IFFALSE 9187
// friends = friends ^ k ;
9171: LD_ADDR_VAR 0 3
9175: PUSH
9176: LD_VAR 0 3
9180: PUSH
9181: LD_VAR 0 2
9185: ADD
9186: ST_TO_ADDR
9187: GO 9132
9189: POP
9190: POP
// if not friends then
9191: LD_VAR 0 3
9195: NOT
9196: IFFALSE 9210
// begin SetPlayerSpectator ( ) ;
9198: CALL_OW 572
// unfoged = true ;
9202: LD_ADDR_LOC 16
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// end ; end ;
9210: LD_VAR 0 1
9214: RET
// export function MakeGameEnd ; begin
9215: LD_INT 0
9217: PPUSH
// SetPlayerSpectator ( ) ;
9218: CALL_OW 572
// unfoged = true ;
9222: LD_ADDR_LOC 16
9226: PUSH
9227: LD_INT 1
9229: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9230: LD_INT 175
9232: PPUSH
9233: CALL_OW 67
// GameEnded = true ;
9237: LD_ADDR_LOC 15
9241: PUSH
9242: LD_INT 1
9244: ST_TO_ADDR
// end ;
9245: LD_VAR 0 1
9249: RET
// export function GetGameEnded ; begin
9250: LD_INT 0
9252: PPUSH
// result = GameEnded ;
9253: LD_ADDR_VAR 0 1
9257: PUSH
9258: LD_LOC 15
9262: ST_TO_ADDR
// end ; end_of_file
9263: LD_VAR 0 1
9267: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9268: LD_INT 0
9270: PPUSH
9271: PPUSH
9272: PPUSH
// for side = 1 to 8 do
9273: LD_ADDR_VAR 0 2
9277: PUSH
9278: DOUBLE
9279: LD_INT 1
9281: DEC
9282: ST_TO_ADDR
9283: LD_INT 8
9285: PUSH
9286: FOR_TO
9287: IFFALSE 9408
// begin for i = 1 to 72 do
9289: LD_ADDR_VAR 0 3
9293: PUSH
9294: DOUBLE
9295: LD_INT 1
9297: DEC
9298: ST_TO_ADDR
9299: LD_INT 72
9301: PUSH
9302: FOR_TO
9303: IFFALSE 9334
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9305: LD_VAR 0 3
9309: PPUSH
9310: LD_VAR 0 2
9314: PPUSH
9315: LD_INT 0
9317: PPUSH
9318: LD_VAR 0 3
9322: PPUSH
9323: CALL_OW 565
9327: PPUSH
9328: CALL_OW 322
9332: GO 9302
9334: POP
9335: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9336: LD_INT 73
9338: PPUSH
9339: LD_VAR 0 2
9343: PPUSH
9344: LD_INT 0
9346: PPUSH
9347: LD_INT 25
9349: PPUSH
9350: CALL_OW 565
9354: PPUSH
9355: CALL_OW 322
// for i = 0 to 40 do
9359: LD_ADDR_VAR 0 3
9363: PUSH
9364: DOUBLE
9365: LD_INT 0
9367: DEC
9368: ST_TO_ADDR
9369: LD_INT 40
9371: PUSH
9372: FOR_TO
9373: IFFALSE 9404
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9375: LD_VAR 0 3
9379: PPUSH
9380: LD_VAR 0 2
9384: PPUSH
9385: LD_INT 1
9387: PPUSH
9388: LD_VAR 0 3
9392: PPUSH
9393: CALL_OW 565
9397: PPUSH
9398: CALL_OW 324
9402: GO 9372
9404: POP
9405: POP
// end ;
9406: GO 9286
9408: POP
9409: POP
// end ;
9410: LD_VAR 0 1
9414: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9415: LD_INT 0
9417: PPUSH
9418: PPUSH
9419: PPUSH
// for side = 1 to 8 do
9420: LD_ADDR_VAR 0 3
9424: PUSH
9425: DOUBLE
9426: LD_INT 1
9428: DEC
9429: ST_TO_ADDR
9430: LD_INT 8
9432: PUSH
9433: FOR_TO
9434: IFFALSE 13430
// begin for i = 1 to 73 do
9436: LD_ADDR_VAR 0 4
9440: PUSH
9441: DOUBLE
9442: LD_INT 1
9444: DEC
9445: ST_TO_ADDR
9446: LD_INT 73
9448: PUSH
9449: FOR_TO
9450: IFFALSE 9471
// SetTech ( i , side , state_disabled ) ;
9452: LD_VAR 0 4
9456: PPUSH
9457: LD_VAR 0 3
9461: PPUSH
9462: LD_INT 0
9464: PPUSH
9465: CALL_OW 322
9469: GO 9449
9471: POP
9472: POP
// for i = 0 to 40 do
9473: LD_ADDR_VAR 0 4
9477: PUSH
9478: DOUBLE
9479: LD_INT 0
9481: DEC
9482: ST_TO_ADDR
9483: LD_INT 40
9485: PUSH
9486: FOR_TO
9487: IFFALSE 9508
// SetRestrict ( i , side , false ) ;
9489: LD_VAR 0 4
9493: PPUSH
9494: LD_VAR 0 3
9498: PPUSH
9499: LD_INT 0
9501: PPUSH
9502: CALL_OW 324
9506: GO 9486
9508: POP
9509: POP
// case level of 1 :
9510: LD_VAR 0 1
9514: PUSH
9515: LD_INT 1
9517: DOUBLE
9518: EQUAL
9519: IFTRUE 9523
9521: GO 9676
9523: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9524: LD_INT 35
9526: PPUSH
9527: LD_VAR 0 3
9531: PPUSH
9532: LD_INT 1
9534: PPUSH
9535: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9539: LD_INT 45
9541: PPUSH
9542: LD_VAR 0 3
9546: PPUSH
9547: LD_INT 1
9549: PPUSH
9550: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9554: LD_INT 46
9556: PPUSH
9557: LD_VAR 0 3
9561: PPUSH
9562: LD_INT 1
9564: PPUSH
9565: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9569: LD_INT 47
9571: PPUSH
9572: LD_VAR 0 3
9576: PPUSH
9577: LD_INT 1
9579: PPUSH
9580: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9584: LD_INT 0
9586: PPUSH
9587: LD_VAR 0 3
9591: PPUSH
9592: LD_INT 1
9594: PPUSH
9595: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9599: LD_INT 2
9601: PPUSH
9602: LD_VAR 0 3
9606: PPUSH
9607: LD_INT 1
9609: PPUSH
9610: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9614: LD_INT 4
9616: PPUSH
9617: LD_VAR 0 3
9621: PPUSH
9622: LD_INT 1
9624: PPUSH
9625: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9629: LD_INT 6
9631: PPUSH
9632: LD_VAR 0 3
9636: PPUSH
9637: LD_INT 1
9639: PPUSH
9640: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9644: LD_INT 29
9646: PPUSH
9647: LD_VAR 0 3
9651: PPUSH
9652: LD_INT 1
9654: PPUSH
9655: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9659: LD_INT 31
9661: PPUSH
9662: LD_VAR 0 3
9666: PPUSH
9667: LD_INT 1
9669: PPUSH
9670: CALL_OW 324
// end ; 2 :
9674: GO 13428
9676: LD_INT 2
9678: DOUBLE
9679: EQUAL
9680: IFTRUE 9684
9682: GO 9882
9684: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9685: LD_INT 35
9687: PPUSH
9688: LD_VAR 0 3
9692: PPUSH
9693: LD_INT 1
9695: PPUSH
9696: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9700: LD_INT 45
9702: PPUSH
9703: LD_VAR 0 3
9707: PPUSH
9708: LD_INT 1
9710: PPUSH
9711: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9715: LD_INT 46
9717: PPUSH
9718: LD_VAR 0 3
9722: PPUSH
9723: LD_INT 1
9725: PPUSH
9726: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9730: LD_INT 47
9732: PPUSH
9733: LD_VAR 0 3
9737: PPUSH
9738: LD_INT 1
9740: PPUSH
9741: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9745: LD_INT 1
9747: PPUSH
9748: LD_VAR 0 3
9752: PPUSH
9753: LD_INT 1
9755: PPUSH
9756: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9760: LD_INT 2
9762: PPUSH
9763: LD_VAR 0 3
9767: PPUSH
9768: LD_INT 1
9770: PPUSH
9771: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9775: LD_INT 11
9777: PPUSH
9778: LD_VAR 0 3
9782: PPUSH
9783: LD_INT 1
9785: PPUSH
9786: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9790: LD_INT 0
9792: PPUSH
9793: LD_VAR 0 3
9797: PPUSH
9798: LD_INT 1
9800: PPUSH
9801: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9805: LD_INT 2
9807: PPUSH
9808: LD_VAR 0 3
9812: PPUSH
9813: LD_INT 1
9815: PPUSH
9816: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9820: LD_INT 4
9822: PPUSH
9823: LD_VAR 0 3
9827: PPUSH
9828: LD_INT 1
9830: PPUSH
9831: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9835: LD_INT 6
9837: PPUSH
9838: LD_VAR 0 3
9842: PPUSH
9843: LD_INT 1
9845: PPUSH
9846: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9850: LD_INT 29
9852: PPUSH
9853: LD_VAR 0 3
9857: PPUSH
9858: LD_INT 1
9860: PPUSH
9861: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9865: LD_INT 31
9867: PPUSH
9868: LD_VAR 0 3
9872: PPUSH
9873: LD_INT 1
9875: PPUSH
9876: CALL_OW 324
// end ; 3 :
9880: GO 13428
9882: LD_INT 3
9884: DOUBLE
9885: EQUAL
9886: IFTRUE 9890
9888: GO 10343
9890: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9891: LD_INT 35
9893: PPUSH
9894: LD_VAR 0 3
9898: PPUSH
9899: LD_INT 1
9901: PPUSH
9902: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9906: LD_INT 45
9908: PPUSH
9909: LD_VAR 0 3
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9921: LD_INT 46
9923: PPUSH
9924: LD_VAR 0 3
9928: PPUSH
9929: LD_INT 1
9931: PPUSH
9932: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9936: LD_INT 47
9938: PPUSH
9939: LD_VAR 0 3
9943: PPUSH
9944: LD_INT 1
9946: PPUSH
9947: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9951: LD_INT 1
9953: PPUSH
9954: LD_VAR 0 3
9958: PPUSH
9959: LD_INT 1
9961: PPUSH
9962: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9966: LD_INT 2
9968: PPUSH
9969: LD_VAR 0 3
9973: PPUSH
9974: LD_INT 1
9976: PPUSH
9977: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9981: LD_INT 11
9983: PPUSH
9984: LD_VAR 0 3
9988: PPUSH
9989: LD_INT 1
9991: PPUSH
9992: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9996: LD_INT 48
9998: PPUSH
9999: LD_VAR 0 3
10003: PPUSH
10004: LD_INT 1
10006: PPUSH
10007: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10011: LD_INT 69
10013: PPUSH
10014: LD_VAR 0 3
10018: PPUSH
10019: LD_INT 1
10021: PPUSH
10022: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10026: LD_INT 39
10028: PPUSH
10029: LD_VAR 0 3
10033: PPUSH
10034: LD_INT 1
10036: PPUSH
10037: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10041: LD_INT 43
10043: PPUSH
10044: LD_VAR 0 3
10048: PPUSH
10049: LD_INT 1
10051: PPUSH
10052: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10056: LD_INT 51
10058: PPUSH
10059: LD_VAR 0 3
10063: PPUSH
10064: LD_INT 1
10066: PPUSH
10067: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10071: LD_INT 6
10073: PPUSH
10074: LD_VAR 0 3
10078: PPUSH
10079: LD_INT 1
10081: PPUSH
10082: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10086: LD_INT 0
10088: PPUSH
10089: LD_VAR 0 3
10093: PPUSH
10094: LD_INT 1
10096: PPUSH
10097: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10101: LD_INT 2
10103: PPUSH
10104: LD_VAR 0 3
10108: PPUSH
10109: LD_INT 1
10111: PPUSH
10112: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10116: LD_INT 3
10118: PPUSH
10119: LD_VAR 0 3
10123: PPUSH
10124: LD_INT 1
10126: PPUSH
10127: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10131: LD_INT 4
10133: PPUSH
10134: LD_VAR 0 3
10138: PPUSH
10139: LD_INT 1
10141: PPUSH
10142: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10146: LD_INT 6
10148: PPUSH
10149: LD_VAR 0 3
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10161: LD_INT 7
10163: PPUSH
10164: LD_VAR 0 3
10168: PPUSH
10169: LD_INT 1
10171: PPUSH
10172: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10176: LD_INT 8
10178: PPUSH
10179: LD_VAR 0 3
10183: PPUSH
10184: LD_INT 1
10186: PPUSH
10187: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10191: LD_INT 10
10193: PPUSH
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10206: LD_INT 15
10208: PPUSH
10209: LD_VAR 0 3
10213: PPUSH
10214: LD_INT 1
10216: PPUSH
10217: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10221: LD_INT 16
10223: PPUSH
10224: LD_VAR 0 3
10228: PPUSH
10229: LD_INT 1
10231: PPUSH
10232: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10236: LD_INT 17
10238: PPUSH
10239: LD_VAR 0 3
10243: PPUSH
10244: LD_INT 1
10246: PPUSH
10247: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10251: LD_INT 20
10253: PPUSH
10254: LD_VAR 0 3
10258: PPUSH
10259: LD_INT 1
10261: PPUSH
10262: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10266: LD_INT 26
10268: PPUSH
10269: LD_VAR 0 3
10273: PPUSH
10274: LD_INT 1
10276: PPUSH
10277: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10281: LD_INT 27
10283: PPUSH
10284: LD_VAR 0 3
10288: PPUSH
10289: LD_INT 1
10291: PPUSH
10292: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10296: LD_INT 29
10298: PPUSH
10299: LD_VAR 0 3
10303: PPUSH
10304: LD_INT 1
10306: PPUSH
10307: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10311: LD_INT 31
10313: PPUSH
10314: LD_VAR 0 3
10318: PPUSH
10319: LD_INT 1
10321: PPUSH
10322: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10326: LD_INT 32
10328: PPUSH
10329: LD_VAR 0 3
10333: PPUSH
10334: LD_INT 1
10336: PPUSH
10337: CALL_OW 324
// end ; 4 :
10341: GO 13428
10343: LD_INT 4
10345: DOUBLE
10346: EQUAL
10347: IFTRUE 10351
10349: GO 11299
10351: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10352: LD_INT 35
10354: PPUSH
10355: LD_VAR 0 3
10359: PPUSH
10360: LD_INT 1
10362: PPUSH
10363: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10367: LD_INT 45
10369: PPUSH
10370: LD_VAR 0 3
10374: PPUSH
10375: LD_INT 1
10377: PPUSH
10378: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10382: LD_INT 46
10384: PPUSH
10385: LD_VAR 0 3
10389: PPUSH
10390: LD_INT 1
10392: PPUSH
10393: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10397: LD_INT 47
10399: PPUSH
10400: LD_VAR 0 3
10404: PPUSH
10405: LD_INT 1
10407: PPUSH
10408: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10412: LD_INT 1
10414: PPUSH
10415: LD_VAR 0 3
10419: PPUSH
10420: LD_INT 1
10422: PPUSH
10423: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10427: LD_INT 2
10429: PPUSH
10430: LD_VAR 0 3
10434: PPUSH
10435: LD_INT 1
10437: PPUSH
10438: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10442: LD_INT 11
10444: PPUSH
10445: LD_VAR 0 3
10449: PPUSH
10450: LD_INT 1
10452: PPUSH
10453: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10457: LD_INT 20
10459: PPUSH
10460: LD_VAR 0 3
10464: PPUSH
10465: LD_INT 1
10467: PPUSH
10468: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10472: LD_INT 48
10474: PPUSH
10475: LD_VAR 0 3
10479: PPUSH
10480: LD_INT 1
10482: PPUSH
10483: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10487: LD_INT 49
10489: PPUSH
10490: LD_VAR 0 3
10494: PPUSH
10495: LD_INT 1
10497: PPUSH
10498: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10502: LD_INT 69
10504: PPUSH
10505: LD_VAR 0 3
10509: PPUSH
10510: LD_INT 1
10512: PPUSH
10513: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10517: LD_INT 39
10519: PPUSH
10520: LD_VAR 0 3
10524: PPUSH
10525: LD_INT 1
10527: PPUSH
10528: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10532: LD_INT 34
10534: PPUSH
10535: LD_VAR 0 3
10539: PPUSH
10540: LD_INT 1
10542: PPUSH
10543: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10547: LD_INT 42
10549: PPUSH
10550: LD_VAR 0 3
10554: PPUSH
10555: LD_INT 1
10557: PPUSH
10558: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10562: LD_INT 44
10564: PPUSH
10565: LD_VAR 0 3
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10577: LD_INT 41
10579: PPUSH
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 1
10587: PPUSH
10588: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10592: LD_INT 43
10594: PPUSH
10595: LD_VAR 0 3
10599: PPUSH
10600: LD_INT 1
10602: PPUSH
10603: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10607: LD_INT 70
10609: PPUSH
10610: LD_VAR 0 3
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10622: LD_INT 51
10624: PPUSH
10625: LD_VAR 0 3
10629: PPUSH
10630: LD_INT 1
10632: PPUSH
10633: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10637: LD_INT 52
10639: PPUSH
10640: LD_VAR 0 3
10644: PPUSH
10645: LD_INT 1
10647: PPUSH
10648: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10652: LD_INT 6
10654: PPUSH
10655: LD_VAR 0 3
10659: PPUSH
10660: LD_INT 1
10662: PPUSH
10663: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10667: LD_INT 15
10669: PPUSH
10670: LD_VAR 0 3
10674: PPUSH
10675: LD_INT 1
10677: PPUSH
10678: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10682: LD_INT 7
10684: PPUSH
10685: LD_VAR 0 3
10689: PPUSH
10690: LD_INT 1
10692: PPUSH
10693: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10697: LD_INT 12
10699: PPUSH
10700: LD_VAR 0 3
10704: PPUSH
10705: LD_INT 1
10707: PPUSH
10708: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10712: LD_INT 18
10714: PPUSH
10715: LD_VAR 0 3
10719: PPUSH
10720: LD_INT 1
10722: PPUSH
10723: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10727: LD_INT 60
10729: PPUSH
10730: LD_VAR 0 3
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10742: LD_INT 9
10744: PPUSH
10745: LD_VAR 0 3
10749: PPUSH
10750: LD_INT 1
10752: PPUSH
10753: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10757: LD_INT 30
10759: PPUSH
10760: LD_VAR 0 3
10764: PPUSH
10765: LD_INT 1
10767: PPUSH
10768: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10772: LD_INT 37
10774: PPUSH
10775: LD_VAR 0 3
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10787: LD_INT 5
10789: PPUSH
10790: LD_VAR 0 3
10794: PPUSH
10795: LD_INT 1
10797: PPUSH
10798: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10802: LD_INT 66
10804: PPUSH
10805: LD_VAR 0 3
10809: PPUSH
10810: LD_INT 1
10812: PPUSH
10813: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10817: LD_INT 21
10819: PPUSH
10820: LD_VAR 0 3
10824: PPUSH
10825: LD_INT 1
10827: PPUSH
10828: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10832: LD_INT 22
10834: PPUSH
10835: LD_VAR 0 3
10839: PPUSH
10840: LD_INT 1
10842: PPUSH
10843: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10847: LD_INT 54
10849: PPUSH
10850: LD_VAR 0 3
10854: PPUSH
10855: LD_INT 1
10857: PPUSH
10858: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10862: LD_INT 0
10864: PPUSH
10865: LD_VAR 0 3
10869: PPUSH
10870: LD_INT 1
10872: PPUSH
10873: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10877: LD_INT 1
10879: PPUSH
10880: LD_VAR 0 3
10884: PPUSH
10885: LD_INT 1
10887: PPUSH
10888: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10892: LD_INT 2
10894: PPUSH
10895: LD_VAR 0 3
10899: PPUSH
10900: LD_INT 1
10902: PPUSH
10903: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10907: LD_INT 3
10909: PPUSH
10910: LD_VAR 0 3
10914: PPUSH
10915: LD_INT 1
10917: PPUSH
10918: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10922: LD_INT 4
10924: PPUSH
10925: LD_VAR 0 3
10929: PPUSH
10930: LD_INT 1
10932: PPUSH
10933: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10937: LD_INT 5
10939: PPUSH
10940: LD_VAR 0 3
10944: PPUSH
10945: LD_INT 1
10947: PPUSH
10948: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10952: LD_INT 6
10954: PPUSH
10955: LD_VAR 0 3
10959: PPUSH
10960: LD_INT 1
10962: PPUSH
10963: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10967: LD_INT 7
10969: PPUSH
10970: LD_VAR 0 3
10974: PPUSH
10975: LD_INT 1
10977: PPUSH
10978: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10982: LD_INT 8
10984: PPUSH
10985: LD_VAR 0 3
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10997: LD_INT 10
10999: PPUSH
11000: LD_VAR 0 3
11004: PPUSH
11005: LD_INT 1
11007: PPUSH
11008: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11012: LD_INT 11
11014: PPUSH
11015: LD_VAR 0 3
11019: PPUSH
11020: LD_INT 1
11022: PPUSH
11023: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11027: LD_INT 12
11029: PPUSH
11030: LD_VAR 0 3
11034: PPUSH
11035: LD_INT 1
11037: PPUSH
11038: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11042: LD_INT 13
11044: PPUSH
11045: LD_VAR 0 3
11049: PPUSH
11050: LD_INT 1
11052: PPUSH
11053: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11057: LD_INT 14
11059: PPUSH
11060: LD_VAR 0 3
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11072: LD_INT 15
11074: PPUSH
11075: LD_VAR 0 3
11079: PPUSH
11080: LD_INT 1
11082: PPUSH
11083: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11087: LD_INT 16
11089: PPUSH
11090: LD_VAR 0 3
11094: PPUSH
11095: LD_INT 1
11097: PPUSH
11098: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11102: LD_INT 17
11104: PPUSH
11105: LD_VAR 0 3
11109: PPUSH
11110: LD_INT 1
11112: PPUSH
11113: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11117: LD_INT 19
11119: PPUSH
11120: LD_VAR 0 3
11124: PPUSH
11125: LD_INT 1
11127: PPUSH
11128: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11132: LD_INT 20
11134: PPUSH
11135: LD_VAR 0 3
11139: PPUSH
11140: LD_INT 1
11142: PPUSH
11143: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11147: LD_INT 21
11149: PPUSH
11150: LD_VAR 0 3
11154: PPUSH
11155: LD_INT 1
11157: PPUSH
11158: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11162: LD_INT 23
11164: PPUSH
11165: LD_VAR 0 3
11169: PPUSH
11170: LD_INT 1
11172: PPUSH
11173: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11177: LD_INT 26
11179: PPUSH
11180: LD_VAR 0 3
11184: PPUSH
11185: LD_INT 1
11187: PPUSH
11188: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11192: LD_INT 27
11194: PPUSH
11195: LD_VAR 0 3
11199: PPUSH
11200: LD_INT 1
11202: PPUSH
11203: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11207: LD_INT 28
11209: PPUSH
11210: LD_VAR 0 3
11214: PPUSH
11215: LD_INT 1
11217: PPUSH
11218: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11222: LD_INT 29
11224: PPUSH
11225: LD_VAR 0 3
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11237: LD_INT 30
11239: PPUSH
11240: LD_VAR 0 3
11244: PPUSH
11245: LD_INT 1
11247: PPUSH
11248: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11252: LD_INT 31
11254: PPUSH
11255: LD_VAR 0 3
11259: PPUSH
11260: LD_INT 1
11262: PPUSH
11263: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11267: LD_INT 32
11269: PPUSH
11270: LD_VAR 0 3
11274: PPUSH
11275: LD_INT 1
11277: PPUSH
11278: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11282: LD_INT 36
11284: PPUSH
11285: LD_VAR 0 3
11289: PPUSH
11290: LD_INT 1
11292: PPUSH
11293: CALL_OW 324
// end ; 5 :
11297: GO 13428
11299: LD_INT 5
11301: DOUBLE
11302: EQUAL
11303: IFTRUE 11307
11305: GO 12420
11307: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11308: LD_INT 35
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11323: LD_INT 45
11325: PPUSH
11326: LD_VAR 0 3
11330: PPUSH
11331: LD_INT 1
11333: PPUSH
11334: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11338: LD_INT 46
11340: PPUSH
11341: LD_VAR 0 3
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11353: LD_INT 47
11355: PPUSH
11356: LD_VAR 0 3
11360: PPUSH
11361: LD_INT 1
11363: PPUSH
11364: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11368: LD_INT 1
11370: PPUSH
11371: LD_VAR 0 3
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11383: LD_INT 2
11385: PPUSH
11386: LD_VAR 0 3
11390: PPUSH
11391: LD_INT 1
11393: PPUSH
11394: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11398: LD_INT 11
11400: PPUSH
11401: LD_VAR 0 3
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11413: LD_INT 20
11415: PPUSH
11416: LD_VAR 0 3
11420: PPUSH
11421: LD_INT 1
11423: PPUSH
11424: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11428: LD_INT 48
11430: PPUSH
11431: LD_VAR 0 3
11435: PPUSH
11436: LD_INT 1
11438: PPUSH
11439: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11443: LD_INT 49
11445: PPUSH
11446: LD_VAR 0 3
11450: PPUSH
11451: LD_INT 1
11453: PPUSH
11454: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11458: LD_INT 69
11460: PPUSH
11461: LD_VAR 0 3
11465: PPUSH
11466: LD_INT 1
11468: PPUSH
11469: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11473: LD_INT 39
11475: PPUSH
11476: LD_VAR 0 3
11480: PPUSH
11481: LD_INT 1
11483: PPUSH
11484: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11488: LD_INT 34
11490: PPUSH
11491: LD_VAR 0 3
11495: PPUSH
11496: LD_INT 1
11498: PPUSH
11499: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11503: LD_INT 42
11505: PPUSH
11506: LD_VAR 0 3
11510: PPUSH
11511: LD_INT 1
11513: PPUSH
11514: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11518: LD_INT 44
11520: PPUSH
11521: LD_VAR 0 3
11525: PPUSH
11526: LD_INT 1
11528: PPUSH
11529: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11533: LD_INT 41
11535: PPUSH
11536: LD_VAR 0 3
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11548: LD_INT 40
11550: PPUSH
11551: LD_VAR 0 3
11555: PPUSH
11556: LD_INT 1
11558: PPUSH
11559: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11563: LD_INT 43
11565: PPUSH
11566: LD_VAR 0 3
11570: PPUSH
11571: LD_INT 1
11573: PPUSH
11574: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11578: LD_INT 70
11580: PPUSH
11581: LD_VAR 0 3
11585: PPUSH
11586: LD_INT 1
11588: PPUSH
11589: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11593: LD_INT 51
11595: PPUSH
11596: LD_VAR 0 3
11600: PPUSH
11601: LD_INT 1
11603: PPUSH
11604: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11608: LD_INT 52
11610: PPUSH
11611: LD_VAR 0 3
11615: PPUSH
11616: LD_INT 1
11618: PPUSH
11619: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11623: LD_INT 6
11625: PPUSH
11626: LD_VAR 0 3
11630: PPUSH
11631: LD_INT 1
11633: PPUSH
11634: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11638: LD_INT 15
11640: PPUSH
11641: LD_VAR 0 3
11645: PPUSH
11646: LD_INT 1
11648: PPUSH
11649: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11653: LD_INT 7
11655: PPUSH
11656: LD_VAR 0 3
11660: PPUSH
11661: LD_INT 1
11663: PPUSH
11664: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11668: LD_INT 12
11670: PPUSH
11671: LD_VAR 0 3
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11683: LD_INT 17
11685: PPUSH
11686: LD_VAR 0 3
11690: PPUSH
11691: LD_INT 1
11693: PPUSH
11694: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11698: LD_INT 18
11700: PPUSH
11701: LD_VAR 0 3
11705: PPUSH
11706: LD_INT 1
11708: PPUSH
11709: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11713: LD_INT 60
11715: PPUSH
11716: LD_VAR 0 3
11720: PPUSH
11721: LD_INT 1
11723: PPUSH
11724: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11728: LD_INT 32
11730: PPUSH
11731: LD_VAR 0 3
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11743: LD_INT 9
11745: PPUSH
11746: LD_VAR 0 3
11750: PPUSH
11751: LD_INT 1
11753: PPUSH
11754: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11758: LD_INT 57
11760: PPUSH
11761: LD_VAR 0 3
11765: PPUSH
11766: LD_INT 1
11768: PPUSH
11769: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11773: LD_INT 30
11775: PPUSH
11776: LD_VAR 0 3
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11788: LD_INT 37
11790: PPUSH
11791: LD_VAR 0 3
11795: PPUSH
11796: LD_INT 1
11798: PPUSH
11799: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11803: LD_INT 63
11805: PPUSH
11806: LD_VAR 0 3
11810: PPUSH
11811: LD_INT 1
11813: PPUSH
11814: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11818: LD_INT 3
11820: PPUSH
11821: LD_VAR 0 3
11825: PPUSH
11826: LD_INT 1
11828: PPUSH
11829: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11833: LD_INT 4
11835: PPUSH
11836: LD_VAR 0 3
11840: PPUSH
11841: LD_INT 1
11843: PPUSH
11844: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11848: LD_INT 5
11850: PPUSH
11851: LD_VAR 0 3
11855: PPUSH
11856: LD_INT 1
11858: PPUSH
11859: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11863: LD_INT 66
11865: PPUSH
11866: LD_VAR 0 3
11870: PPUSH
11871: LD_INT 1
11873: PPUSH
11874: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11878: LD_INT 21
11880: PPUSH
11881: LD_VAR 0 3
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11893: LD_INT 22
11895: PPUSH
11896: LD_VAR 0 3
11900: PPUSH
11901: LD_INT 1
11903: PPUSH
11904: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11908: LD_INT 19
11910: PPUSH
11911: LD_VAR 0 3
11915: PPUSH
11916: LD_INT 1
11918: PPUSH
11919: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11923: LD_INT 54
11925: PPUSH
11926: LD_VAR 0 3
11930: PPUSH
11931: LD_INT 1
11933: PPUSH
11934: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11938: LD_INT 55
11940: PPUSH
11941: LD_VAR 0 3
11945: PPUSH
11946: LD_INT 1
11948: PPUSH
11949: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11953: LD_INT 0
11955: PPUSH
11956: LD_VAR 0 3
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11968: LD_INT 1
11970: PPUSH
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_INT 1
11978: PPUSH
11979: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11983: LD_INT 2
11985: PPUSH
11986: LD_VAR 0 3
11990: PPUSH
11991: LD_INT 1
11993: PPUSH
11994: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11998: LD_INT 3
12000: PPUSH
12001: LD_VAR 0 3
12005: PPUSH
12006: LD_INT 1
12008: PPUSH
12009: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12013: LD_INT 4
12015: PPUSH
12016: LD_VAR 0 3
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12028: LD_INT 5
12030: PPUSH
12031: LD_VAR 0 3
12035: PPUSH
12036: LD_INT 1
12038: PPUSH
12039: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12043: LD_INT 6
12045: PPUSH
12046: LD_VAR 0 3
12050: PPUSH
12051: LD_INT 1
12053: PPUSH
12054: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12058: LD_INT 7
12060: PPUSH
12061: LD_VAR 0 3
12065: PPUSH
12066: LD_INT 1
12068: PPUSH
12069: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12073: LD_INT 8
12075: PPUSH
12076: LD_VAR 0 3
12080: PPUSH
12081: LD_INT 1
12083: PPUSH
12084: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12088: LD_INT 10
12090: PPUSH
12091: LD_VAR 0 3
12095: PPUSH
12096: LD_INT 1
12098: PPUSH
12099: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12103: LD_INT 11
12105: PPUSH
12106: LD_VAR 0 3
12110: PPUSH
12111: LD_INT 1
12113: PPUSH
12114: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12118: LD_INT 12
12120: PPUSH
12121: LD_VAR 0 3
12125: PPUSH
12126: LD_INT 1
12128: PPUSH
12129: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12133: LD_INT 13
12135: PPUSH
12136: LD_VAR 0 3
12140: PPUSH
12141: LD_INT 1
12143: PPUSH
12144: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12148: LD_INT 14
12150: PPUSH
12151: LD_VAR 0 3
12155: PPUSH
12156: LD_INT 1
12158: PPUSH
12159: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12163: LD_INT 15
12165: PPUSH
12166: LD_VAR 0 3
12170: PPUSH
12171: LD_INT 1
12173: PPUSH
12174: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12178: LD_INT 16
12180: PPUSH
12181: LD_VAR 0 3
12185: PPUSH
12186: LD_INT 1
12188: PPUSH
12189: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12193: LD_INT 17
12195: PPUSH
12196: LD_VAR 0 3
12200: PPUSH
12201: LD_INT 1
12203: PPUSH
12204: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12208: LD_INT 18
12210: PPUSH
12211: LD_VAR 0 3
12215: PPUSH
12216: LD_INT 1
12218: PPUSH
12219: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12223: LD_INT 19
12225: PPUSH
12226: LD_VAR 0 3
12230: PPUSH
12231: LD_INT 1
12233: PPUSH
12234: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12238: LD_INT 20
12240: PPUSH
12241: LD_VAR 0 3
12245: PPUSH
12246: LD_INT 1
12248: PPUSH
12249: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12253: LD_INT 21
12255: PPUSH
12256: LD_VAR 0 3
12260: PPUSH
12261: LD_INT 1
12263: PPUSH
12264: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12268: LD_INT 23
12270: PPUSH
12271: LD_VAR 0 3
12275: PPUSH
12276: LD_INT 1
12278: PPUSH
12279: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12283: LD_INT 26
12285: PPUSH
12286: LD_VAR 0 3
12290: PPUSH
12291: LD_INT 1
12293: PPUSH
12294: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12298: LD_INT 27
12300: PPUSH
12301: LD_VAR 0 3
12305: PPUSH
12306: LD_INT 1
12308: PPUSH
12309: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12313: LD_INT 28
12315: PPUSH
12316: LD_VAR 0 3
12320: PPUSH
12321: LD_INT 1
12323: PPUSH
12324: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12328: LD_INT 29
12330: PPUSH
12331: LD_VAR 0 3
12335: PPUSH
12336: LD_INT 1
12338: PPUSH
12339: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12343: LD_INT 30
12345: PPUSH
12346: LD_VAR 0 3
12350: PPUSH
12351: LD_INT 1
12353: PPUSH
12354: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12358: LD_INT 31
12360: PPUSH
12361: LD_VAR 0 3
12365: PPUSH
12366: LD_INT 1
12368: PPUSH
12369: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12373: LD_INT 32
12375: PPUSH
12376: LD_VAR 0 3
12380: PPUSH
12381: LD_INT 1
12383: PPUSH
12384: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12388: LD_INT 33
12390: PPUSH
12391: LD_VAR 0 3
12395: PPUSH
12396: LD_INT 1
12398: PPUSH
12399: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12403: LD_INT 36
12405: PPUSH
12406: LD_VAR 0 3
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 324
// end ; 6 :
12418: GO 13428
12420: LD_INT 6
12422: DOUBLE
12423: EQUAL
12424: IFTRUE 12428
12426: GO 13353
12428: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12429: LD_INT 35
12431: PPUSH
12432: LD_VAR 0 3
12436: PPUSH
12437: LD_INT 1
12439: PPUSH
12440: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12444: LD_INT 45
12446: PPUSH
12447: LD_VAR 0 3
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12459: LD_INT 46
12461: PPUSH
12462: LD_VAR 0 3
12466: PPUSH
12467: LD_INT 1
12469: PPUSH
12470: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12474: LD_INT 47
12476: PPUSH
12477: LD_VAR 0 3
12481: PPUSH
12482: LD_INT 1
12484: PPUSH
12485: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12489: LD_INT 1
12491: PPUSH
12492: LD_VAR 0 3
12496: PPUSH
12497: LD_INT 1
12499: PPUSH
12500: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12504: LD_INT 2
12506: PPUSH
12507: LD_VAR 0 3
12511: PPUSH
12512: LD_INT 1
12514: PPUSH
12515: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12519: LD_INT 11
12521: PPUSH
12522: LD_VAR 0 3
12526: PPUSH
12527: LD_INT 1
12529: PPUSH
12530: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12534: LD_INT 20
12536: PPUSH
12537: LD_VAR 0 3
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12549: LD_INT 48
12551: PPUSH
12552: LD_VAR 0 3
12556: PPUSH
12557: LD_INT 1
12559: PPUSH
12560: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12564: LD_INT 49
12566: PPUSH
12567: LD_VAR 0 3
12571: PPUSH
12572: LD_INT 1
12574: PPUSH
12575: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12579: LD_INT 50
12581: PPUSH
12582: LD_VAR 0 3
12586: PPUSH
12587: LD_INT 1
12589: PPUSH
12590: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12594: LD_INT 69
12596: PPUSH
12597: LD_VAR 0 3
12601: PPUSH
12602: LD_INT 1
12604: PPUSH
12605: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12609: LD_INT 39
12611: PPUSH
12612: LD_VAR 0 3
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12624: LD_INT 34
12626: PPUSH
12627: LD_VAR 0 3
12631: PPUSH
12632: LD_INT 1
12634: PPUSH
12635: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12639: LD_INT 42
12641: PPUSH
12642: LD_VAR 0 3
12646: PPUSH
12647: LD_INT 1
12649: PPUSH
12650: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12654: LD_INT 44
12656: PPUSH
12657: LD_VAR 0 3
12661: PPUSH
12662: LD_INT 1
12664: PPUSH
12665: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12669: LD_INT 41
12671: PPUSH
12672: LD_VAR 0 3
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12684: LD_INT 13
12686: PPUSH
12687: LD_VAR 0 3
12691: PPUSH
12692: LD_INT 1
12694: PPUSH
12695: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12699: LD_INT 40
12701: PPUSH
12702: LD_VAR 0 3
12706: PPUSH
12707: LD_INT 1
12709: PPUSH
12710: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12714: LD_INT 43
12716: PPUSH
12717: LD_VAR 0 3
12721: PPUSH
12722: LD_INT 1
12724: PPUSH
12725: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12729: LD_INT 70
12731: PPUSH
12732: LD_VAR 0 3
12736: PPUSH
12737: LD_INT 1
12739: PPUSH
12740: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12744: LD_INT 23
12746: PPUSH
12747: LD_VAR 0 3
12751: PPUSH
12752: LD_INT 1
12754: PPUSH
12755: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12759: LD_INT 51
12761: PPUSH
12762: LD_VAR 0 3
12766: PPUSH
12767: LD_INT 1
12769: PPUSH
12770: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12774: LD_INT 52
12776: PPUSH
12777: LD_VAR 0 3
12781: PPUSH
12782: LD_INT 1
12784: PPUSH
12785: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12789: LD_INT 6
12791: PPUSH
12792: LD_VAR 0 3
12796: PPUSH
12797: LD_INT 1
12799: PPUSH
12800: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12804: LD_INT 15
12806: PPUSH
12807: LD_VAR 0 3
12811: PPUSH
12812: LD_INT 1
12814: PPUSH
12815: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12819: LD_INT 7
12821: PPUSH
12822: LD_VAR 0 3
12826: PPUSH
12827: LD_INT 1
12829: PPUSH
12830: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12834: LD_INT 12
12836: PPUSH
12837: LD_VAR 0 3
12841: PPUSH
12842: LD_INT 1
12844: PPUSH
12845: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12849: LD_INT 10
12851: PPUSH
12852: LD_VAR 0 3
12856: PPUSH
12857: LD_INT 1
12859: PPUSH
12860: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12864: LD_INT 17
12866: PPUSH
12867: LD_VAR 0 3
12871: PPUSH
12872: LD_INT 1
12874: PPUSH
12875: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12879: LD_INT 18
12881: PPUSH
12882: LD_VAR 0 3
12886: PPUSH
12887: LD_INT 1
12889: PPUSH
12890: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12894: LD_INT 60
12896: PPUSH
12897: LD_VAR 0 3
12901: PPUSH
12902: LD_INT 1
12904: PPUSH
12905: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12909: LD_INT 61
12911: PPUSH
12912: LD_VAR 0 3
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12924: LD_INT 32
12926: PPUSH
12927: LD_VAR 0 3
12931: PPUSH
12932: LD_INT 1
12934: PPUSH
12935: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12939: LD_INT 27
12941: PPUSH
12942: LD_VAR 0 3
12946: PPUSH
12947: LD_INT 1
12949: PPUSH
12950: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12954: LD_INT 36
12956: PPUSH
12957: LD_VAR 0 3
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12969: LD_INT 33
12971: PPUSH
12972: LD_VAR 0 3
12976: PPUSH
12977: LD_INT 1
12979: PPUSH
12980: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12984: LD_INT 9
12986: PPUSH
12987: LD_VAR 0 3
12991: PPUSH
12992: LD_INT 1
12994: PPUSH
12995: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12999: LD_INT 38
13001: PPUSH
13002: LD_VAR 0 3
13006: PPUSH
13007: LD_INT 1
13009: PPUSH
13010: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13014: LD_INT 57
13016: PPUSH
13017: LD_VAR 0 3
13021: PPUSH
13022: LD_INT 1
13024: PPUSH
13025: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13029: LD_INT 58
13031: PPUSH
13032: LD_VAR 0 3
13036: PPUSH
13037: LD_INT 1
13039: PPUSH
13040: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13044: LD_INT 28
13046: PPUSH
13047: LD_VAR 0 3
13051: PPUSH
13052: LD_INT 1
13054: PPUSH
13055: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13059: LD_INT 29
13061: PPUSH
13062: LD_VAR 0 3
13066: PPUSH
13067: LD_INT 1
13069: PPUSH
13070: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13074: LD_INT 30
13076: PPUSH
13077: LD_VAR 0 3
13081: PPUSH
13082: LD_INT 1
13084: PPUSH
13085: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13089: LD_INT 37
13091: PPUSH
13092: LD_VAR 0 3
13096: PPUSH
13097: LD_INT 1
13099: PPUSH
13100: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13104: LD_INT 63
13106: PPUSH
13107: LD_VAR 0 3
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13119: LD_INT 64
13121: PPUSH
13122: LD_VAR 0 3
13126: PPUSH
13127: LD_INT 1
13129: PPUSH
13130: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13134: LD_INT 3
13136: PPUSH
13137: LD_VAR 0 3
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13149: LD_INT 4
13151: PPUSH
13152: LD_VAR 0 3
13156: PPUSH
13157: LD_INT 1
13159: PPUSH
13160: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13164: LD_INT 5
13166: PPUSH
13167: LD_VAR 0 3
13171: PPUSH
13172: LD_INT 1
13174: PPUSH
13175: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13179: LD_INT 8
13181: PPUSH
13182: LD_VAR 0 3
13186: PPUSH
13187: LD_INT 1
13189: PPUSH
13190: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13194: LD_INT 66
13196: PPUSH
13197: LD_VAR 0 3
13201: PPUSH
13202: LD_INT 1
13204: PPUSH
13205: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13209: LD_INT 67
13211: PPUSH
13212: LD_VAR 0 3
13216: PPUSH
13217: LD_INT 1
13219: PPUSH
13220: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13224: LD_INT 21
13226: PPUSH
13227: LD_VAR 0 3
13231: PPUSH
13232: LD_INT 1
13234: PPUSH
13235: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13239: LD_INT 22
13241: PPUSH
13242: LD_VAR 0 3
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13254: LD_INT 19
13256: PPUSH
13257: LD_VAR 0 3
13261: PPUSH
13262: LD_INT 1
13264: PPUSH
13265: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13269: LD_INT 26
13271: PPUSH
13272: LD_VAR 0 3
13276: PPUSH
13277: LD_INT 1
13279: PPUSH
13280: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13284: LD_INT 54
13286: PPUSH
13287: LD_VAR 0 3
13291: PPUSH
13292: LD_INT 1
13294: PPUSH
13295: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13299: LD_INT 55
13301: PPUSH
13302: LD_VAR 0 3
13306: PPUSH
13307: LD_INT 1
13309: PPUSH
13310: CALL_OW 322
// for i = 0 to 39 do
13314: LD_ADDR_VAR 0 4
13318: PUSH
13319: DOUBLE
13320: LD_INT 0
13322: DEC
13323: ST_TO_ADDR
13324: LD_INT 39
13326: PUSH
13327: FOR_TO
13328: IFFALSE 13349
// SetRestrict ( i , side , true ) ;
13330: LD_VAR 0 4
13334: PPUSH
13335: LD_VAR 0 3
13339: PPUSH
13340: LD_INT 1
13342: PPUSH
13343: CALL_OW 324
13347: GO 13327
13349: POP
13350: POP
// end ; else
13351: GO 13428
13353: POP
// begin for i = 1 to 73 do
13354: LD_ADDR_VAR 0 4
13358: PUSH
13359: DOUBLE
13360: LD_INT 1
13362: DEC
13363: ST_TO_ADDR
13364: LD_INT 73
13366: PUSH
13367: FOR_TO
13368: IFFALSE 13389
// SetTech ( i , side , state_enabled ) ;
13370: LD_VAR 0 4
13374: PPUSH
13375: LD_VAR 0 3
13379: PPUSH
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 322
13387: GO 13367
13389: POP
13390: POP
// for i = 0 to 39 do
13391: LD_ADDR_VAR 0 4
13395: PUSH
13396: DOUBLE
13397: LD_INT 0
13399: DEC
13400: ST_TO_ADDR
13401: LD_INT 39
13403: PUSH
13404: FOR_TO
13405: IFFALSE 13426
// SetRestrict ( i , side , true ) ;
13407: LD_VAR 0 4
13411: PPUSH
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 1
13419: PPUSH
13420: CALL_OW 324
13424: GO 13404
13426: POP
13427: POP
// end ; end ; end ;
13428: GO 9433
13430: POP
13431: POP
// end ; end_of_file
13432: LD_VAR 0 2
13436: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13437: LD_INT 0
13439: PPUSH
13440: PPUSH
13441: PPUSH
13442: PPUSH
13443: PPUSH
13444: PPUSH
13445: PPUSH
13446: PPUSH
13447: PPUSH
// for i := 1 to 8 do
13448: LD_ADDR_VAR 0 2
13452: PUSH
13453: DOUBLE
13454: LD_INT 1
13456: DEC
13457: ST_TO_ADDR
13458: LD_INT 8
13460: PUSH
13461: FOR_TO
13462: IFFALSE 13846
// begin if Side_Positions [ i ] then
13464: LD_EXP 34
13468: PUSH
13469: LD_VAR 0 2
13473: ARRAY
13474: IFFALSE 13844
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13476: LD_ADDR_VAR 0 7
13480: PUSH
13481: LD_INT 22
13483: PUSH
13484: LD_VAR 0 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 21
13495: PUSH
13496: LD_INT 1
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PPUSH
13507: CALL_OW 69
13511: PUSH
13512: LD_INT 0
13514: PLUS
13515: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13516: LD_ADDR_VAR 0 9
13520: PUSH
13521: LD_INT 22
13523: PUSH
13524: LD_VAR 0 2
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 2
13535: PUSH
13536: LD_INT 30
13538: PUSH
13539: LD_INT 0
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 30
13548: PUSH
13549: LD_INT 1
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PPUSH
13565: CALL_OW 69
13569: ST_TO_ADDR
// crates := 0 ;
13570: LD_ADDR_VAR 0 4
13574: PUSH
13575: LD_INT 0
13577: ST_TO_ADDR
// oil := 0 ;
13578: LD_ADDR_VAR 0 5
13582: PUSH
13583: LD_INT 0
13585: ST_TO_ADDR
// sib := 0 ;
13586: LD_ADDR_VAR 0 6
13590: PUSH
13591: LD_INT 0
13593: ST_TO_ADDR
// if bases then
13594: LD_VAR 0 9
13598: IFFALSE 13704
// begin for j in bases do
13600: LD_ADDR_VAR 0 3
13604: PUSH
13605: LD_VAR 0 9
13609: PUSH
13610: FOR_IN
13611: IFFALSE 13702
// begin base := GetBase ( j ) ;
13613: LD_ADDR_VAR 0 8
13617: PUSH
13618: LD_VAR 0 3
13622: PPUSH
13623: CALL_OW 274
13627: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13628: LD_ADDR_VAR 0 4
13632: PUSH
13633: LD_VAR 0 4
13637: PUSH
13638: LD_VAR 0 8
13642: PPUSH
13643: LD_INT 1
13645: PPUSH
13646: CALL_OW 275
13650: PLUS
13651: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13652: LD_ADDR_VAR 0 5
13656: PUSH
13657: LD_VAR 0 5
13661: PUSH
13662: LD_VAR 0 8
13666: PPUSH
13667: LD_INT 2
13669: PPUSH
13670: CALL_OW 275
13674: PLUS
13675: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13676: LD_ADDR_VAR 0 6
13680: PUSH
13681: LD_VAR 0 6
13685: PUSH
13686: LD_VAR 0 8
13690: PPUSH
13691: LD_INT 3
13693: PPUSH
13694: CALL_OW 275
13698: PLUS
13699: ST_TO_ADDR
// end ;
13700: GO 13610
13702: POP
13703: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13704: LD_STRING setSpecText(
13706: PUSH
13707: LD_VAR 0 2
13711: STR
13712: PUSH
13713: LD_STRING ,
13715: STR
13716: PUSH
13717: LD_INT 2
13719: STR
13720: PUSH
13721: LD_STRING ,
13723: STR
13724: PUSH
13725: LD_VAR 0 4
13729: STR
13730: PUSH
13731: LD_STRING )
13733: STR
13734: PPUSH
13735: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13739: LD_STRING setSpecText(
13741: PUSH
13742: LD_VAR 0 2
13746: STR
13747: PUSH
13748: LD_STRING ,
13750: STR
13751: PUSH
13752: LD_INT 3
13754: STR
13755: PUSH
13756: LD_STRING ,
13758: STR
13759: PUSH
13760: LD_VAR 0 5
13764: STR
13765: PUSH
13766: LD_STRING )
13768: STR
13769: PPUSH
13770: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13774: LD_STRING setSpecText(
13776: PUSH
13777: LD_VAR 0 2
13781: STR
13782: PUSH
13783: LD_STRING ,
13785: STR
13786: PUSH
13787: LD_INT 4
13789: STR
13790: PUSH
13791: LD_STRING ,
13793: STR
13794: PUSH
13795: LD_VAR 0 6
13799: STR
13800: PUSH
13801: LD_STRING )
13803: STR
13804: PPUSH
13805: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13809: LD_STRING setSpecText(
13811: PUSH
13812: LD_VAR 0 2
13816: STR
13817: PUSH
13818: LD_STRING ,
13820: STR
13821: PUSH
13822: LD_INT 5
13824: STR
13825: PUSH
13826: LD_STRING ,
13828: STR
13829: PUSH
13830: LD_VAR 0 7
13834: STR
13835: PUSH
13836: LD_STRING )
13838: STR
13839: PPUSH
13840: CALL_OW 559
// end ; end ;
13844: GO 13461
13846: POP
13847: POP
// end ; end_of_file
13848: LD_VAR 0 1
13852: RET
// var respawn , inqueue ; export function init_respawning ; begin
13853: LD_INT 0
13855: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13856: LD_ADDR_LOC 18
13860: PUSH
13861: LD_INT 1
13863: PPUSH
13864: LD_INT 8
13866: PPUSH
13867: CALL_OW 12
13871: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13872: LD_ADDR_LOC 19
13876: PUSH
13877: LD_INT 0
13879: PUSH
13880: LD_INT 0
13882: PUSH
13883: LD_INT 0
13885: PUSH
13886: LD_INT 0
13888: PUSH
13889: LD_INT 0
13891: PUSH
13892: LD_INT 0
13894: PUSH
13895: LD_INT 0
13897: PUSH
13898: LD_INT 0
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: ST_TO_ADDR
// end ;
13911: LD_VAR 0 1
13915: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13916: GO 13918
13918: DISABLE
13919: LD_INT 0
13921: PPUSH
13922: PPUSH
13923: PPUSH
// begin if respawning_time_max = 0 then
13924: LD_EXP 28
13928: PUSH
13929: LD_INT 0
13931: EQUAL
13932: IFFALSE 13936
// exit ;
13934: GO 14344
// if respawn = 8 then
13936: LD_LOC 18
13940: PUSH
13941: LD_INT 8
13943: EQUAL
13944: IFFALSE 13956
// respawn := 1 else
13946: LD_ADDR_LOC 18
13950: PUSH
13951: LD_INT 1
13953: ST_TO_ADDR
13954: GO 13970
// respawn := respawn + 1 ;
13956: LD_ADDR_LOC 18
13960: PUSH
13961: LD_LOC 18
13965: PUSH
13966: LD_INT 1
13968: PLUS
13969: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13970: LD_EXP 34
13974: PUSH
13975: LD_LOC 18
13979: ARRAY
13980: PUSH
13981: LD_LOC 19
13985: PUSH
13986: LD_LOC 18
13990: ARRAY
13991: NOT
13992: AND
13993: IFFALSE 14343
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13995: LD_ADDR_VAR 0 1
13999: PUSH
14000: LD_INT 21
14002: PUSH
14003: LD_INT 1
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 22
14012: PUSH
14013: LD_LOC 18
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 3
14024: PUSH
14025: LD_INT 23
14027: PUSH
14028: LD_INT 0
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: PPUSH
14041: CALL_OW 69
14045: ST_TO_ADDR
// if n < number_of_people then
14046: LD_VAR 0 1
14050: PUSH
14051: LD_EXP 19
14055: LESS
14056: IFFALSE 14340
// begin aktresp := respawn ;
14058: LD_ADDR_VAR 0 3
14062: PUSH
14063: LD_LOC 18
14067: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14068: LD_ADDR_LOC 19
14072: PUSH
14073: LD_LOC 19
14077: PPUSH
14078: LD_VAR 0 3
14082: PPUSH
14083: LD_INT 1
14085: PPUSH
14086: CALL_OW 1
14090: ST_TO_ADDR
// enable ;
14091: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14092: LD_EXP 27
14096: PPUSH
14097: LD_EXP 28
14101: PPUSH
14102: CALL_OW 12
14106: PPUSH
14107: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14111: LD_ADDR_LOC 19
14115: PUSH
14116: LD_LOC 19
14120: PPUSH
14121: LD_VAR 0 3
14125: PPUSH
14126: LD_INT 0
14128: PPUSH
14129: CALL_OW 1
14133: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14134: LD_ADDR_VAR 0 2
14138: PUSH
14139: LD_INT 21
14141: PUSH
14142: LD_INT 3
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 2
14151: PUSH
14152: LD_INT 30
14154: PUSH
14155: LD_INT 0
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 30
14164: PUSH
14165: LD_INT 1
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: PUSH
14177: LD_INT 50
14179: PUSH
14180: EMPTY
14181: LIST
14182: PUSH
14183: LD_INT 22
14185: PUSH
14186: LD_VAR 0 3
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: PPUSH
14201: CALL_OW 69
14205: ST_TO_ADDR
// if dep = 0 then
14206: LD_VAR 0 2
14210: PUSH
14211: LD_INT 0
14213: EQUAL
14214: IFFALSE 14218
// exit ;
14216: GO 14344
// hc_name :=  ;
14218: LD_ADDR_OWVAR 26
14222: PUSH
14223: LD_STRING 
14225: ST_TO_ADDR
// hc_importance := 0 ;
14226: LD_ADDR_OWVAR 32
14230: PUSH
14231: LD_INT 0
14233: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14234: LD_INT 0
14236: PPUSH
14237: LD_INT 0
14239: PPUSH
14240: LD_EXP 20
14244: PUSH
14245: LD_INT 2
14247: DIV
14248: PPUSH
14249: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14253: LD_ADDR_OWVAR 21
14257: PUSH
14258: LD_EXP 35
14262: PUSH
14263: LD_VAR 0 3
14267: ARRAY
14268: ST_TO_ADDR
// uc_side := aktresp ;
14269: LD_ADDR_OWVAR 20
14273: PUSH
14274: LD_VAR 0 3
14278: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14279: LD_ADDR_VAR 0 2
14283: PUSH
14284: LD_VAR 0 2
14288: PUSH
14289: LD_INT 1
14291: PPUSH
14292: LD_VAR 0 2
14296: PPUSH
14297: CALL_OW 12
14301: ARRAY
14302: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14303: CALL_OW 44
14307: PPUSH
14308: LD_VAR 0 2
14312: PPUSH
14313: CALL_OW 250
14317: PPUSH
14318: LD_VAR 0 2
14322: PPUSH
14323: CALL_OW 251
14327: PPUSH
14328: LD_INT 7
14330: PPUSH
14331: LD_INT 1
14333: PPUSH
14334: CALL_OW 50
// end else
14338: GO 14341
// enable ;
14340: ENABLE
// end else
14341: GO 14344
// enable ;
14343: ENABLE
// end ; end_of_file
14344: PPOPN 3
14346: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14347: LD_INT 0
14349: PPUSH
14350: PPUSH
14351: PPUSH
// BuildUpTime_Delay = 0 ;
14352: LD_ADDR_EXP 57
14356: PUSH
14357: LD_INT 0
14359: ST_TO_ADDR
// if not def_builduptime then
14360: LD_EXP 14
14364: NOT
14365: IFFALSE 14369
// exit ;
14367: GO 14552
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14369: LD_ADDR_EXP 57
14373: PUSH
14374: LD_INT 8400
14376: PUSH
14377: LD_INT 2100
14379: PUSH
14380: LD_EXP 14
14384: MUL
14385: PLUS
14386: ST_TO_ADDR
// BuildUpTimeActive := true ;
14387: LD_ADDR_EXP 56
14391: PUSH
14392: LD_INT 1
14394: ST_TO_ADDR
// for i := 1 to 8 do
14395: LD_ADDR_VAR 0 2
14399: PUSH
14400: DOUBLE
14401: LD_INT 1
14403: DEC
14404: ST_TO_ADDR
14405: LD_INT 8
14407: PUSH
14408: FOR_TO
14409: IFFALSE 14550
// if Side_Positions [ i ] then
14411: LD_EXP 34
14415: PUSH
14416: LD_VAR 0 2
14420: ARRAY
14421: IFFALSE 14548
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14423: LD_EXP 55
14427: PUSH
14428: LD_EXP 34
14432: PUSH
14433: LD_VAR 0 2
14437: ARRAY
14438: ARRAY
14439: PPUSH
14440: LD_INT 5
14442: PPUSH
14443: CALL_OW 424
// for j := 1 to 8 do
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: DOUBLE
14453: LD_INT 1
14455: DEC
14456: ST_TO_ADDR
14457: LD_INT 8
14459: PUSH
14460: FOR_TO
14461: IFFALSE 14546
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14463: LD_EXP 34
14467: PUSH
14468: LD_VAR 0 3
14472: ARRAY
14473: PUSH
14474: LD_EXP 31
14478: PUSH
14479: LD_VAR 0 2
14483: ARRAY
14484: PUSH
14485: LD_EXP 31
14489: PUSH
14490: LD_VAR 0 3
14494: ARRAY
14495: NONEQUAL
14496: PUSH
14497: LD_EXP 36
14501: NOT
14502: PUSH
14503: LD_VAR 0 2
14507: PUSH
14508: LD_VAR 0 3
14512: NONEQUAL
14513: AND
14514: OR
14515: AND
14516: IFFALSE 14544
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14518: LD_VAR 0 3
14522: PPUSH
14523: LD_EXP 55
14527: PUSH
14528: LD_EXP 34
14532: PUSH
14533: LD_VAR 0 2
14537: ARRAY
14538: ARRAY
14539: PPUSH
14540: CALL_OW 333
14544: GO 14460
14546: POP
14547: POP
// end ;
14548: GO 14408
14550: POP
14551: POP
// end ;
14552: LD_VAR 0 1
14556: RET
// export function EndBuildUp ; var i , j ; begin
14557: LD_INT 0
14559: PPUSH
14560: PPUSH
14561: PPUSH
// BuildUpTimeActive := false ;
14562: LD_ADDR_EXP 56
14566: PUSH
14567: LD_INT 0
14569: ST_TO_ADDR
// for i := 1 to 8 do
14570: LD_ADDR_VAR 0 2
14574: PUSH
14575: DOUBLE
14576: LD_INT 1
14578: DEC
14579: ST_TO_ADDR
14580: LD_INT 8
14582: PUSH
14583: FOR_TO
14584: IFFALSE 14725
// if Side_Positions [ i ] then
14586: LD_EXP 34
14590: PUSH
14591: LD_VAR 0 2
14595: ARRAY
14596: IFFALSE 14723
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14598: LD_EXP 55
14602: PUSH
14603: LD_EXP 34
14607: PUSH
14608: LD_VAR 0 2
14612: ARRAY
14613: ARRAY
14614: PPUSH
14615: LD_INT 0
14617: PPUSH
14618: CALL_OW 424
// for j := 1 to 8 do
14622: LD_ADDR_VAR 0 3
14626: PUSH
14627: DOUBLE
14628: LD_INT 1
14630: DEC
14631: ST_TO_ADDR
14632: LD_INT 8
14634: PUSH
14635: FOR_TO
14636: IFFALSE 14721
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14638: LD_EXP 34
14642: PUSH
14643: LD_VAR 0 3
14647: ARRAY
14648: PUSH
14649: LD_EXP 31
14653: PUSH
14654: LD_VAR 0 2
14658: ARRAY
14659: PUSH
14660: LD_EXP 31
14664: PUSH
14665: LD_VAR 0 3
14669: ARRAY
14670: NONEQUAL
14671: PUSH
14672: LD_EXP 36
14676: NOT
14677: PUSH
14678: LD_VAR 0 2
14682: PUSH
14683: LD_VAR 0 3
14687: NONEQUAL
14688: AND
14689: OR
14690: AND
14691: IFFALSE 14719
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14693: LD_VAR 0 3
14697: PPUSH
14698: LD_EXP 55
14702: PUSH
14703: LD_EXP 34
14707: PUSH
14708: LD_VAR 0 2
14712: ARRAY
14713: ARRAY
14714: PPUSH
14715: CALL_OW 334
14719: GO 14635
14721: POP
14722: POP
// end ;
14723: GO 14583
14725: POP
14726: POP
// end ;
14727: LD_VAR 0 1
14731: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14732: LD_EXP 56
14736: IFFALSE 14911
14738: GO 14740
14740: DISABLE
14741: LD_INT 0
14743: PPUSH
14744: PPUSH
// begin for i := 1 to 8 do
14745: LD_ADDR_VAR 0 1
14749: PUSH
14750: DOUBLE
14751: LD_INT 1
14753: DEC
14754: ST_TO_ADDR
14755: LD_INT 8
14757: PUSH
14758: FOR_TO
14759: IFFALSE 14908
// if Side_Positions [ i ] then
14761: LD_EXP 34
14765: PUSH
14766: LD_VAR 0 1
14770: ARRAY
14771: IFFALSE 14906
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14773: LD_ADDR_VAR 0 2
14777: PUSH
14778: LD_EXP 55
14782: PUSH
14783: LD_EXP 34
14787: PUSH
14788: LD_VAR 0 1
14792: ARRAY
14793: ARRAY
14794: PPUSH
14795: LD_INT 2
14797: PUSH
14798: LD_INT 21
14800: PUSH
14801: LD_INT 1
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 21
14810: PUSH
14811: LD_INT 2
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 22
14825: PUSH
14826: LD_OWVAR 2
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PPUSH
14839: CALL_OW 70
14843: PUSH
14844: FOR_IN
14845: IFFALSE 14904
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14847: LD_EXP 31
14851: PUSH
14852: LD_VAR 0 1
14856: ARRAY
14857: PUSH
14858: LD_EXP 31
14862: PUSH
14863: LD_OWVAR 2
14867: ARRAY
14868: NONEQUAL
14869: PUSH
14870: LD_EXP 36
14874: NOT
14875: PUSH
14876: LD_VAR 0 1
14880: PUSH
14881: LD_OWVAR 2
14885: NONEQUAL
14886: AND
14887: OR
14888: IFFALSE 14902
// ComMoveToArea ( un , BuildUpEscape ) ;
14890: LD_VAR 0 2
14894: PPUSH
14895: LD_INT 17
14897: PPUSH
14898: CALL_OW 113
14902: GO 14844
14904: POP
14905: POP
14906: GO 14758
14908: POP
14909: POP
// enable ;
14910: ENABLE
// end ;
14911: PPOPN 2
14913: END
// every 0 0$1 trigger def_builduptime do
14914: LD_EXP 14
14918: IFFALSE 14944
14920: GO 14922
14922: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14923: LD_INT 8400
14925: PUSH
14926: LD_EXP 14
14930: PUSH
14931: LD_INT 2100
14933: MUL
14934: PLUS
14935: PPUSH
14936: CALL_OW 67
// EndBuildUp ;
14940: CALL 14557 0 0
// end ;
14944: END
