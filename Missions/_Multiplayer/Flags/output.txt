// export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 32
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 18
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 15
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 17
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 16
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 32
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 18
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 15
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 19
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 17
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 16
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; for i := 1 to 8 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 8
 398: PUSH
 399: FOR_TO
 400: IFFALSE 487
// if Multiplayer_GetPlayerIsSpec ( i ) then
 402: LD_VAR 0 2
 406: PPUSH
 407: CALL_OW 530
 411: IFFALSE 485
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 413: LD_ADDR_EXP 18
 417: PUSH
 418: LD_EXP 18
 422: PPUSH
 423: LD_VAR 0 2
 427: PPUSH
 428: LD_INT 0
 430: PPUSH
 431: CALL_OW 1
 435: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 436: LD_ADDR_EXP 16
 440: PUSH
 441: LD_EXP 16
 445: PPUSH
 446: LD_EXP 15
 450: PUSH
 451: LD_VAR 0 2
 455: ARRAY
 456: PPUSH
 457: LD_EXP 16
 461: PUSH
 462: LD_EXP 15
 466: PUSH
 467: LD_VAR 0 2
 471: ARRAY
 472: ARRAY
 473: PUSH
 474: LD_VAR 0 2
 478: DIFF
 479: PPUSH
 480: CALL_OW 1
 484: ST_TO_ADDR
// end ;
 485: GO 399
 487: POP
 488: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 489: LD_ADDR_EXP 21
 493: PUSH
 494: LD_INT 0
 496: PUSH
 497: LD_INT 0
 499: PUSH
 500: LD_INT 0
 502: PUSH
 503: LD_INT 0
 505: PUSH
 506: LD_INT 0
 508: PUSH
 509: LD_INT 0
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: ST_TO_ADDR
// for i := 1 to 8 do
 520: LD_ADDR_VAR 0 2
 524: PUSH
 525: DOUBLE
 526: LD_INT 1
 528: DEC
 529: ST_TO_ADDR
 530: LD_INT 8
 532: PUSH
 533: FOR_TO
 534: IFFALSE 581
// if Side_Positions [ i ] then
 536: LD_EXP 18
 540: PUSH
 541: LD_VAR 0 2
 545: ARRAY
 546: IFFALSE 579
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 548: LD_ADDR_EXP 21
 552: PUSH
 553: LD_EXP 21
 557: PPUSH
 558: LD_EXP 18
 562: PUSH
 563: LD_VAR 0 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 1
 578: ST_TO_ADDR
 579: GO 533
 581: POP
 582: POP
// Team_Game := Side_Teams [ your_side ] ;
 583: LD_ADDR_EXP 20
 587: PUSH
 588: LD_EXP 15
 592: PUSH
 593: LD_OWVAR 2
 597: ARRAY
 598: ST_TO_ADDR
// if Multiplayer then
 599: LD_OWVAR 4
 603: IFFALSE 805
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 605: LD_ADDR_EXP 34
 609: PUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 426
 617: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 618: LD_ADDR_EXP 35
 622: PUSH
 623: LD_INT 1
 625: PPUSH
 626: CALL_OW 426
 630: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 631: LD_ADDR_EXP 36
 635: PUSH
 636: LD_INT 2
 638: PPUSH
 639: CALL_OW 426
 643: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 644: LD_ADDR_EXP 37
 648: PUSH
 649: LD_INT 3
 651: PPUSH
 652: CALL_OW 426
 656: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 657: LD_ADDR_EXP 38
 661: PUSH
 662: LD_INT 4
 664: PPUSH
 665: CALL_OW 426
 669: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 670: LD_ADDR_EXP 39
 674: PUSH
 675: LD_INT 5
 677: PPUSH
 678: CALL_OW 426
 682: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 683: LD_ADDR_EXP 40
 687: PUSH
 688: LD_INT 1
 690: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 691: LD_ADDR_EXP 41
 695: PUSH
 696: LD_INT 10
 698: PPUSH
 699: CALL_OW 426
 703: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 704: LD_ADDR_EXP 42
 708: PUSH
 709: LD_INT 11
 711: PPUSH
 712: CALL_OW 426
 716: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 717: LD_ADDR_EXP 43
 721: PUSH
 722: LD_INT 12
 724: PPUSH
 725: CALL_OW 426
 729: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 730: LD_ADDR_EXP 44
 734: PUSH
 735: LD_INT 13
 737: PPUSH
 738: CALL_OW 426
 742: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 743: LD_ADDR_EXP 45
 747: PUSH
 748: LD_INT 14
 750: PPUSH
 751: CALL_OW 426
 755: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 756: LD_ADDR_EXP 46
 760: PUSH
 761: LD_INT 17
 763: PPUSH
 764: CALL_OW 426
 768: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 769: LD_ADDR_EXP 47
 773: PUSH
 774: LD_INT 20
 776: PPUSH
 777: CALL_OW 426
 781: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 782: LD_ADDR_VAR 0 3
 786: PUSH
 787: LD_INT 22
 789: PPUSH
 790: CALL_OW 426
 794: ST_TO_ADDR
// def_win_rules = 0 ;
 795: LD_ADDR_EXP 14
 799: PUSH
 800: LD_INT 0
 802: ST_TO_ADDR
// end else
 803: GO 937
// begin Randomize ;
 805: CALL_OW 10
// def_base_level := 2 ;
 809: LD_ADDR_EXP 34
 813: PUSH
 814: LD_INT 2
 816: ST_TO_ADDR
// def_amount_of_people := 0 ;
 817: LD_ADDR_EXP 35
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// def_skill_level := 1 ;
 825: LD_ADDR_EXP 36
 829: PUSH
 830: LD_INT 1
 832: ST_TO_ADDR
// def_starting_resources := 2 ;
 833: LD_ADDR_EXP 37
 837: PUSH
 838: LD_INT 2
 840: ST_TO_ADDR
// def_shipments_density := 1 ;
 841: LD_ADDR_EXP 38
 845: PUSH
 846: LD_INT 1
 848: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 849: LD_ADDR_EXP 39
 853: PUSH
 854: LD_INT 0
 856: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 857: LD_ADDR_EXP 40
 861: PUSH
 862: LD_INT 1
 864: ST_TO_ADDR
// def_shared_vision := 1 ;
 865: LD_ADDR_EXP 41
 869: PUSH
 870: LD_INT 1
 872: ST_TO_ADDR
// def_morale_flags := 1 ;
 873: LD_ADDR_EXP 42
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// def_siberite_detection := 1 ;
 881: LD_ADDR_EXP 43
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// def_people_respawning := 2 ;
 889: LD_ADDR_EXP 44
 893: PUSH
 894: LD_INT 2
 896: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 897: LD_ADDR_EXP 45
 901: PUSH
 902: LD_INT 3
 904: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 905: LD_ADDR_EXP 46
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// def_builduptime := 1 ;
 913: LD_ADDR_EXP 47
 917: PUSH
 918: LD_INT 1
 920: ST_TO_ADDR
// tech_level = 4 ;
 921: LD_ADDR_VAR 0 3
 925: PUSH
 926: LD_INT 4
 928: ST_TO_ADDR
// def_win_rules = 0 ;
 929: LD_ADDR_EXP 14
 933: PUSH
 934: LD_INT 0
 936: ST_TO_ADDR
// end ; if def_game_rules = 0 then
 937: LD_EXP 33
 941: PUSH
 942: LD_INT 0
 944: EQUAL
 945: IFFALSE 972
// begin if isSGUI then
 947: LD_OWVAR 83
 951: IFFALSE 959
// setMpTechs ( ) else
 953: CALL 13241 0 0
 957: GO 972
// begin SetMpTechLevel ( tech_level + 1 ) ;
 959: LD_VAR 0 3
 963: PUSH
 964: LD_INT 1
 966: PLUS
 967: PPUSH
 968: CALL 13388 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 972: LD_ADDR_EXP 1
 976: PUSH
 977: LD_INT 0
 979: PUSH
 980: LD_INT 1
 982: PUSH
 983: LD_INT 1
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: PUSH
 991: LD_EXP 34
 995: PUSH
 996: LD_INT 1
 998: PLUS
 999: ARRAY
1000: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
1001: LD_ADDR_EXP 2
1005: PUSH
1006: LD_INT 0
1008: PUSH
1009: LD_INT 0
1011: PUSH
1012: LD_INT 3
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_EXP 34
1024: PUSH
1025: LD_INT 1
1027: PLUS
1028: ARRAY
1029: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1030: LD_ADDR_EXP 3
1034: PUSH
1035: LD_INT 9
1037: PUSH
1038: LD_INT 12
1040: PUSH
1041: LD_INT 15
1043: PUSH
1044: LD_INT 24
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 35
1057: PUSH
1058: LD_INT 1
1060: PLUS
1061: ARRAY
1062: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1063: LD_ADDR_EXP 4
1067: PUSH
1068: LD_INT 2
1070: PUSH
1071: LD_INT 3
1073: PUSH
1074: LD_INT 4
1076: PUSH
1077: LD_INT 5
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: PUSH
1086: LD_EXP 36
1090: PUSH
1091: LD_INT 1
1093: PLUS
1094: ARRAY
1095: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1096: LD_ADDR_EXP 6
1100: PUSH
1101: LD_INT 0
1103: PUSH
1104: LD_INT 0
1106: PUSH
1107: LD_INT 0
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_INT 30
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 50
1131: PUSH
1132: LD_INT 20
1134: PUSH
1135: LD_INT 0
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 80
1145: PUSH
1146: LD_INT 40
1148: PUSH
1149: LD_INT 20
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_EXP 37
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: ARRAY
1172: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1173: LD_ADDR_EXP 5
1177: PUSH
1178: LD_INT 10
1180: PUSH
1181: EMPTY
1182: LIST
1183: PUSH
1184: LD_INT 7
1186: PUSH
1187: LD_INT 14
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 6
1196: PUSH
1197: LD_INT 12
1199: PUSH
1200: LD_INT 18
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 5
1210: PUSH
1211: LD_INT 10
1213: PUSH
1214: LD_INT 15
1216: PUSH
1217: LD_INT 20
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_EXP 37
1236: PUSH
1237: LD_INT 1
1239: PLUS
1240: ARRAY
1241: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 ] [ def_shipments_density + 1 ] ;
1242: LD_ADDR_EXP 7
1246: PUSH
1247: LD_INT 150
1249: PUSH
1250: LD_INT 125
1252: PUSH
1253: LD_INT 100
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: PUSH
1261: LD_EXP 38
1265: PUSH
1266: LD_INT 1
1268: PLUS
1269: ARRAY
1270: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1271: LD_ADDR_EXP 11
1275: PUSH
1276: LD_INT 0
1278: PUSH
1279: LD_INT 10500
1281: PUSH
1282: LD_INT 6300
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: PUSH
1290: LD_EXP 44
1294: PUSH
1295: LD_INT 1
1297: PLUS
1298: ARRAY
1299: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1300: LD_ADDR_EXP 12
1304: PUSH
1305: LD_INT 0
1307: PUSH
1308: LD_INT 31500
1310: PUSH
1311: LD_INT 10500
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: PUSH
1319: LD_EXP 44
1323: PUSH
1324: LD_INT 1
1326: PLUS
1327: ARRAY
1328: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1329: LD_ADDR_EXP 9
1333: PUSH
1334: LD_INT 0
1336: PUSH
1337: LD_INT 3
1339: PUSH
1340: LD_INT 6
1342: PUSH
1343: LD_INT 9
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: PUSH
1352: LD_EXP 45
1356: PUSH
1357: LD_INT 1
1359: PLUS
1360: ARRAY
1361: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1362: LD_ADDR_EXP 8
1366: PUSH
1367: LD_INT 1
1369: NEG
1370: PUSH
1371: LD_INT 350
1373: PUSH
1374: LD_INT 700
1376: PUSH
1377: LD_INT 1400
1379: PUSH
1380: LD_INT 0
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: PUSH
1390: LD_EXP 42
1394: PUSH
1395: LD_INT 1
1397: PLUS
1398: ARRAY
1399: ST_TO_ADDR
// battle_flags_id = [ ] ;
1400: LD_ADDR_EXP 29
1404: PUSH
1405: EMPTY
1406: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1407: LD_ADDR_EXP 13
1411: PUSH
1412: LD_INT 0
1414: PUSH
1415: LD_INT 1
1417: PUSH
1418: LD_INT 63000
1420: PUSH
1421: LD_INT 126000
1423: PUSH
1424: LD_INT 189000
1426: PUSH
1427: LD_INT 252000
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: PUSH
1438: LD_EXP 46
1442: PUSH
1443: LD_INT 1
1445: PLUS
1446: ARRAY
1447: ST_TO_ADDR
// BuildUpAreas := [ bt1 , bt2 , bt3 , bt4 , bt5 , bt6 , bt7 , bt8 ] ;
1448: LD_ADDR_EXP 31
1452: PUSH
1453: LD_INT 9
1455: PUSH
1456: LD_INT 10
1458: PUSH
1459: LD_INT 11
1461: PUSH
1462: LD_INT 12
1464: PUSH
1465: LD_INT 13
1467: PUSH
1468: LD_INT 14
1470: PUSH
1471: LD_INT 15
1473: PUSH
1474: LD_INT 16
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: ST_TO_ADDR
// end ;
1487: LD_VAR 0 1
1491: RET
// function init_map ; var i , j ; begin
1492: LD_INT 0
1494: PPUSH
1495: PPUSH
1496: PPUSH
// normal_oil_deposits_locations := [ [ 17 , 4 ] , [ 72 , 5 ] , [ 157 , 22 ] , [ 205 , 111 ] , [ 221 , 195 ] , [ 169 , 196 ] , [ 93 , 177 ] , [ 52 , 92 ] ] ;
1497: LD_ADDR_EXP 25
1501: PUSH
1502: LD_INT 17
1504: PUSH
1505: LD_INT 4
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 72
1514: PUSH
1515: LD_INT 5
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 157
1524: PUSH
1525: LD_INT 22
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 205
1534: PUSH
1535: LD_INT 111
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: PUSH
1542: LD_INT 221
1544: PUSH
1545: LD_INT 195
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: PUSH
1552: LD_INT 169
1554: PUSH
1555: LD_INT 196
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 93
1564: PUSH
1565: LD_INT 177
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 52
1574: PUSH
1575: LD_INT 92
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 17 , 4 ] , [ 16 , 23 ] ] , [ [ 72 , 5 ] , [ 88 , 28 ] ] , [ [ 157 , 22 ] , [ 133 , 12 ] ] , [ [ 205 , 111 ] , [ 200 , 95 ] ] , [ [ 221 , 195 ] , [ 249 , 190 ] ] , [ [ 169 , 196 ] , [ 180 , 197 ] ] , [ [ 93 , 177 ] , [ 114 , 194 ] ] , [ [ 52 , 92 ] , [ 58 , 107 ] ] ] ;
1592: LD_ADDR_EXP 26
1596: PUSH
1597: LD_INT 17
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 16
1609: PUSH
1610: LD_INT 23
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: PUSH
1621: LD_INT 72
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PUSH
1631: LD_INT 88
1633: PUSH
1634: LD_INT 28
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 157
1647: PUSH
1648: LD_INT 22
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 133
1657: PUSH
1658: LD_INT 12
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 205
1671: PUSH
1672: LD_INT 111
1674: PUSH
1675: EMPTY
1676: LIST
1677: LIST
1678: PUSH
1679: LD_INT 200
1681: PUSH
1682: LD_INT 95
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: PUSH
1693: LD_INT 221
1695: PUSH
1696: LD_INT 195
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 249
1705: PUSH
1706: LD_INT 190
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: LD_INT 169
1719: PUSH
1720: LD_INT 196
1722: PUSH
1723: EMPTY
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 180
1729: PUSH
1730: LD_INT 197
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 93
1743: PUSH
1744: LD_INT 177
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_INT 114
1753: PUSH
1754: LD_INT 194
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PUSH
1765: LD_INT 52
1767: PUSH
1768: LD_INT 92
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: PUSH
1775: LD_INT 58
1777: PUSH
1778: LD_INT 107
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 12 , 12 ] , [ 99 , 19 ] , [ 139 , 5 ] , [ 207 , 100 ] , [ 244 , 181 ] , [ 183 , 196 ] , [ 117 , 195 ] , [ 54 , 104 ] ] ;
1799: LD_ADDR_EXP 27
1803: PUSH
1804: LD_INT 12
1806: PUSH
1807: LD_INT 12
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 99
1816: PUSH
1817: LD_INT 19
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 139
1826: PUSH
1827: LD_INT 5
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: LD_INT 207
1836: PUSH
1837: LD_INT 100
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 244
1846: PUSH
1847: LD_INT 181
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: LD_INT 183
1856: PUSH
1857: LD_INT 196
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: LD_INT 117
1866: PUSH
1867: LD_INT 195
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 54
1876: PUSH
1877: LD_INT 104
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1894: LD_ADDR_EXP 28
1898: PUSH
1899: EMPTY
1900: ST_TO_ADDR
// depot_def := [ [ 32 , 24 , 2 ] , [ 87 , 18 , 3 ] , [ 146 , 28 , 3 ] , [ 188 , 103 , 4 ] , [ 224 , 180 , 5 ] , [ 168 , 180 , 0 ] , [ 105 , 170 , 0 ] , [ 71 , 102 , 1 ] ] ;
1901: LD_ADDR_EXP 22
1905: PUSH
1906: LD_INT 32
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 2
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: LD_INT 87
1922: PUSH
1923: LD_INT 18
1925: PUSH
1926: LD_INT 3
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 146
1936: PUSH
1937: LD_INT 28
1939: PUSH
1940: LD_INT 3
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: LIST
1947: PUSH
1948: LD_INT 188
1950: PUSH
1951: LD_INT 103
1953: PUSH
1954: LD_INT 4
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 224
1964: PUSH
1965: LD_INT 180
1967: PUSH
1968: LD_INT 5
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: LIST
1975: PUSH
1976: LD_INT 168
1978: PUSH
1979: LD_INT 180
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 105
1992: PUSH
1993: LD_INT 170
1995: PUSH
1996: LD_INT 0
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: LD_INT 71
2006: PUSH
2007: LD_INT 102
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: ST_TO_ADDR
// for i in depot_def do
2028: LD_ADDR_VAR 0 2
2032: PUSH
2033: LD_EXP 22
2037: PUSH
2038: FOR_IN
2039: IFFALSE 2115
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
2041: LD_ADDR_EXP 24
2045: PUSH
2046: LD_EXP 24
2050: PUSH
2051: LD_VAR 0 2
2055: PUSH
2056: LD_INT 1
2058: ARRAY
2059: PPUSH
2060: LD_VAR 0 2
2064: PUSH
2065: LD_INT 3
2067: ARRAY
2068: PPUSH
2069: LD_INT 4
2071: NEG
2072: PPUSH
2073: CALL_OW 272
2077: PUSH
2078: LD_VAR 0 2
2082: PUSH
2083: LD_INT 2
2085: ARRAY
2086: PPUSH
2087: LD_VAR 0 2
2091: PUSH
2092: LD_INT 3
2094: ARRAY
2095: PPUSH
2096: LD_INT 4
2098: NEG
2099: PPUSH
2100: CALL_OW 273
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: EMPTY
2110: LIST
2111: ADD
2112: ST_TO_ADDR
2113: GO 2038
2115: POP
2116: POP
// breastworks_def := [ [ [ 50 , 40 , 5 ] , [ 47 , 17 , 4 ] , [ 29 , 39 , 0 ] ] , [ [ 107 , 27 , 4 ] , [ 67 , 10 , 1 ] , [ 91 , 35 , 0 ] ] , [ [ 165 , 44 , 5 ] , [ 123 , 16 , 2 ] , [ 141 , 39 , 0 ] ] , [ [ 179 , 85 , 3 ] , [ 172 , 102 , 1 ] , [ 196 , 118 , 5 ] ] , [ [ 210 , 182 , 1 ] , [ 226 , 164 , 3 ] , [ 209 , 164 , 2 ] ] , [ [ 156 , 183 , 1 ] , [ 184 , 184 , 4 ] , [ 161 , 166 , 3 ] ] , [ [ 86 , 156 , 2 ] , [ 124 , 180 , 4 ] , [ 106 , 155 , 3 ] ] , [ [ 87 , 102 , 4 ] , [ 63 , 83 , 3 ] , [ 79 , 120 , 0 ] ] ] ;
2117: LD_ADDR_EXP 23
2121: PUSH
2122: LD_INT 50
2124: PUSH
2125: LD_INT 40
2127: PUSH
2128: LD_INT 5
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: LIST
2135: PUSH
2136: LD_INT 47
2138: PUSH
2139: LD_INT 17
2141: PUSH
2142: LD_INT 4
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_INT 29
2152: PUSH
2153: LD_INT 39
2155: PUSH
2156: LD_INT 0
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: PUSH
2169: LD_INT 107
2171: PUSH
2172: LD_INT 27
2174: PUSH
2175: LD_INT 4
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: PUSH
2183: LD_INT 67
2185: PUSH
2186: LD_INT 10
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: LD_INT 35
2202: PUSH
2203: LD_INT 0
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 165
2218: PUSH
2219: LD_INT 44
2221: PUSH
2222: LD_INT 5
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: LIST
2229: PUSH
2230: LD_INT 123
2232: PUSH
2233: LD_INT 16
2235: PUSH
2236: LD_INT 2
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 141
2246: PUSH
2247: LD_INT 39
2249: PUSH
2250: LD_INT 0
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: LIST
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: LD_INT 179
2265: PUSH
2266: LD_INT 85
2268: PUSH
2269: LD_INT 3
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: LIST
2276: PUSH
2277: LD_INT 172
2279: PUSH
2280: LD_INT 102
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 196
2293: PUSH
2294: LD_INT 118
2296: PUSH
2297: LD_INT 5
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 210
2312: PUSH
2313: LD_INT 182
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 226
2326: PUSH
2327: LD_INT 164
2329: PUSH
2330: LD_INT 3
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: PUSH
2338: LD_INT 209
2340: PUSH
2341: LD_INT 164
2343: PUSH
2344: LD_INT 2
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 156
2359: PUSH
2360: LD_INT 183
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: PUSH
2371: LD_INT 184
2373: PUSH
2374: LD_INT 184
2376: PUSH
2377: LD_INT 4
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: LIST
2384: PUSH
2385: LD_INT 161
2387: PUSH
2388: LD_INT 166
2390: PUSH
2391: LD_INT 3
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 86
2406: PUSH
2407: LD_INT 156
2409: PUSH
2410: LD_INT 2
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: LIST
2417: PUSH
2418: LD_INT 124
2420: PUSH
2421: LD_INT 180
2423: PUSH
2424: LD_INT 4
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: PUSH
2432: LD_INT 106
2434: PUSH
2435: LD_INT 155
2437: PUSH
2438: LD_INT 3
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 87
2453: PUSH
2454: LD_INT 102
2456: PUSH
2457: LD_INT 4
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 63
2467: PUSH
2468: LD_INT 83
2470: PUSH
2471: LD_INT 3
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: PUSH
2479: LD_INT 79
2481: PUSH
2482: LD_INT 120
2484: PUSH
2485: LD_INT 0
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: ST_TO_ADDR
// for i = 1 to 8 do
2508: LD_ADDR_VAR 0 2
2512: PUSH
2513: DOUBLE
2514: LD_INT 1
2516: DEC
2517: ST_TO_ADDR
2518: LD_INT 8
2520: PUSH
2521: FOR_TO
2522: IFFALSE 2619
// if def_extra_oil_deposits then
2524: LD_EXP 39
2528: IFFALSE 2580
// for j in extra_oil_deposits_locations [ i ] do
2530: LD_ADDR_VAR 0 3
2534: PUSH
2535: LD_EXP 26
2539: PUSH
2540: LD_VAR 0 2
2544: ARRAY
2545: PUSH
2546: FOR_IN
2547: IFFALSE 2576
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2549: LD_VAR 0 3
2553: PUSH
2554: LD_INT 1
2556: ARRAY
2557: PPUSH
2558: LD_VAR 0 3
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: CALL_OW 62
2574: GO 2546
2576: POP
2577: POP
2578: GO 2617
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2580: LD_EXP 25
2584: PUSH
2585: LD_VAR 0 2
2589: ARRAY
2590: PUSH
2591: LD_INT 1
2593: ARRAY
2594: PPUSH
2595: LD_EXP 25
2599: PUSH
2600: LD_VAR 0 2
2604: ARRAY
2605: PUSH
2606: LD_INT 2
2608: ARRAY
2609: PPUSH
2610: LD_INT 2
2612: PPUSH
2613: CALL_OW 62
2617: GO 2521
2619: POP
2620: POP
// if def_extra_sib_deposits then
2621: LD_EXP 40
2625: IFFALSE 2744
// for i = 1 to 8 do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: DOUBLE
2633: LD_INT 1
2635: DEC
2636: ST_TO_ADDR
2637: LD_INT 8
2639: PUSH
2640: FOR_TO
2641: IFFALSE 2742
// if def_extra_sib_deposits = 2 then
2643: LD_EXP 40
2647: PUSH
2648: LD_INT 2
2650: EQUAL
2651: IFFALSE 2703
// for j in extra_sib_deposits_locations [ i ] do
2653: LD_ADDR_VAR 0 3
2657: PUSH
2658: LD_EXP 28
2662: PUSH
2663: LD_VAR 0 2
2667: ARRAY
2668: PUSH
2669: FOR_IN
2670: IFFALSE 2699
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2672: LD_VAR 0 3
2676: PUSH
2677: LD_INT 1
2679: ARRAY
2680: PPUSH
2681: LD_VAR 0 3
2685: PUSH
2686: LD_INT 2
2688: ARRAY
2689: PPUSH
2690: LD_INT 3
2692: PPUSH
2693: CALL_OW 62
2697: GO 2669
2699: POP
2700: POP
2701: GO 2740
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2703: LD_EXP 27
2707: PUSH
2708: LD_VAR 0 2
2712: ARRAY
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PPUSH
2718: LD_EXP 27
2722: PUSH
2723: LD_VAR 0 2
2727: ARRAY
2728: PUSH
2729: LD_INT 2
2731: ARRAY
2732: PPUSH
2733: LD_INT 3
2735: PPUSH
2736: CALL_OW 62
2740: GO 2640
2742: POP
2743: POP
// end ;
2744: LD_VAR 0 1
2748: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2749: LD_INT 0
2751: PPUSH
2752: PPUSH
2753: PPUSH
// if not Team_Game then
2754: LD_EXP 20
2758: NOT
2759: IFFALSE 2857
// begin for i = 1 to 8 do
2761: LD_ADDR_VAR 0 2
2765: PUSH
2766: DOUBLE
2767: LD_INT 1
2769: DEC
2770: ST_TO_ADDR
2771: LD_INT 8
2773: PUSH
2774: FOR_TO
2775: IFFALSE 2853
// for j = 1 to 8 do
2777: LD_ADDR_VAR 0 3
2781: PUSH
2782: DOUBLE
2783: LD_INT 1
2785: DEC
2786: ST_TO_ADDR
2787: LD_INT 8
2789: PUSH
2790: FOR_TO
2791: IFFALSE 2849
// if i <> j then
2793: LD_VAR 0 2
2797: PUSH
2798: LD_VAR 0 3
2802: NONEQUAL
2803: IFFALSE 2827
// SetAttitude ( i , j , att_neutral , true ) else
2805: LD_VAR 0 2
2809: PPUSH
2810: LD_VAR 0 3
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 80
2825: GO 2847
// SetAttitude ( i , j , att_friend , true ) ;
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_VAR 0 3
2836: PPUSH
2837: LD_INT 1
2839: PPUSH
2840: LD_INT 1
2842: PPUSH
2843: CALL_OW 80
2847: GO 2790
2849: POP
2850: POP
2851: GO 2774
2853: POP
2854: POP
// end else
2855: GO 3032
// begin if def_shared_vision then
2857: LD_EXP 41
2861: IFFALSE 2926
// begin for i in Teams do
2863: LD_ADDR_VAR 0 2
2867: PUSH
2868: LD_EXP 16
2872: PUSH
2873: FOR_IN
2874: IFFALSE 2924
// for j = 2 to i do
2876: LD_ADDR_VAR 0 3
2880: PUSH
2881: DOUBLE
2882: LD_INT 2
2884: DEC
2885: ST_TO_ADDR
2886: LD_VAR 0 2
2890: PUSH
2891: FOR_TO
2892: IFFALSE 2920
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2894: LD_VAR 0 2
2898: PUSH
2899: LD_VAR 0 3
2903: ARRAY
2904: PPUSH
2905: LD_VAR 0 2
2909: PUSH
2910: LD_INT 1
2912: ARRAY
2913: PPUSH
2914: CALL_OW 343
2918: GO 2891
2920: POP
2921: POP
2922: GO 2873
2924: POP
2925: POP
// end ; for i = 1 to 8 do
2926: LD_ADDR_VAR 0 2
2930: PUSH
2931: DOUBLE
2932: LD_INT 1
2934: DEC
2935: ST_TO_ADDR
2936: LD_INT 8
2938: PUSH
2939: FOR_TO
2940: IFFALSE 3030
// for j = 1 to 8 do
2942: LD_ADDR_VAR 0 3
2946: PUSH
2947: DOUBLE
2948: LD_INT 1
2950: DEC
2951: ST_TO_ADDR
2952: LD_INT 8
2954: PUSH
2955: FOR_TO
2956: IFFALSE 3026
// if Side_Teams [ i ] = Side_Teams [ j ] then
2958: LD_EXP 15
2962: PUSH
2963: LD_VAR 0 2
2967: ARRAY
2968: PUSH
2969: LD_EXP 15
2973: PUSH
2974: LD_VAR 0 3
2978: ARRAY
2979: EQUAL
2980: IFFALSE 3004
// SetAttitude ( i , j , att_friend , true ) else
2982: LD_VAR 0 2
2986: PPUSH
2987: LD_VAR 0 3
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_INT 1
2997: PPUSH
2998: CALL_OW 80
3002: GO 3024
// SetAttitude ( i , j , att_enemy , true ) ;
3004: LD_VAR 0 2
3008: PPUSH
3009: LD_VAR 0 3
3013: PPUSH
3014: LD_INT 2
3016: PPUSH
3017: LD_INT 1
3019: PPUSH
3020: CALL_OW 80
3024: GO 2955
3026: POP
3027: POP
3028: GO 2939
3030: POP
3031: POP
// end ; end ;
3032: LD_VAR 0 1
3036: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3037: LD_INT 0
3039: PPUSH
3040: PPUSH
3041: PPUSH
3042: PPUSH
// result := [ ] ;
3043: LD_ADDR_VAR 0 7
3047: PUSH
3048: EMPTY
3049: ST_TO_ADDR
// for i := 1 to count do
3050: LD_ADDR_VAR 0 8
3054: PUSH
3055: DOUBLE
3056: LD_INT 1
3058: DEC
3059: ST_TO_ADDR
3060: LD_VAR 0 1
3064: PUSH
3065: FOR_TO
3066: IFFALSE 3484
// begin uc_direction := Rand ( 0 , 5 ) ;
3068: LD_ADDR_OWVAR 24
3072: PUSH
3073: LD_INT 0
3075: PPUSH
3076: LD_INT 5
3078: PPUSH
3079: CALL_OW 12
3083: ST_TO_ADDR
// if commander then
3084: LD_LOC 1
3088: IFFALSE 3197
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3090: LD_ADDR_OWVAR 26
3094: PUSH
3095: LD_OWVAR 19
3099: PUSH
3100: LD_OWVAR 20
3104: ARRAY
3105: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: CALL_OW 12
3116: PPUSH
3117: LD_VAR 0 2
3121: PPUSH
3122: LD_EXP 4
3126: PUSH
3127: LD_INT 2
3129: PLUS
3130: PPUSH
3131: CALL_OW 380
// hc_importance := 105 ;
3135: LD_ADDR_OWVAR 32
3139: PUSH
3140: LD_INT 105
3142: ST_TO_ADDR
// commander := false ;
3143: LD_ADDR_LOC 1
3147: PUSH
3148: LD_INT 0
3150: ST_TO_ADDR
// if Multiplayer then
3151: LD_OWVAR 4
3155: IFFALSE 3195
// begin hc_gallery := MULTIAVATARS ;
3157: LD_ADDR_OWVAR 33
3161: PUSH
3162: LD_STRING MULTIAVATARS
3164: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3165: LD_ADDR_OWVAR 34
3169: PUSH
3170: LD_OWVAR 20
3174: PPUSH
3175: CALL_OW 525
3179: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3180: LD_ADDR_OWVAR 27
3184: PUSH
3185: LD_OWVAR 20
3189: PPUSH
3190: CALL_OW 526
3194: ST_TO_ADDR
// end ; end else
3195: GO 3260
// begin hc_name :=  ;
3197: LD_ADDR_OWVAR 26
3201: PUSH
3202: LD_STRING 
3204: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3205: LD_INT 1
3207: PPUSH
3208: LD_INT 2
3210: PPUSH
3211: CALL_OW 12
3215: PPUSH
3216: LD_VAR 0 2
3220: PPUSH
3221: LD_EXP 4
3225: PPUSH
3226: CALL_OW 380
// hc_importance := 0 ;
3230: LD_ADDR_OWVAR 32
3234: PUSH
3235: LD_INT 0
3237: ST_TO_ADDR
// if Multiplayer then
3238: LD_OWVAR 4
3242: IFFALSE 3260
// begin hc_gallery :=  ;
3244: LD_ADDR_OWVAR 33
3248: PUSH
3249: LD_STRING 
3251: ST_TO_ADDR
// hc_face_number := 0 ;
3252: LD_ADDR_OWVAR 34
3256: PUSH
3257: LD_INT 0
3259: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3260: LD_ADDR_VAR 0 10
3264: PUSH
3265: CALL_OW 44
3269: ST_TO_ADDR
// if global_defined then
3270: LD_LOC 3
3274: IFFALSE 3414
// begin if ( cl = class_soldier ) then
3276: LD_VAR 0 2
3280: PUSH
3281: LD_INT 1
3283: EQUAL
3284: IFFALSE 3304
// j := i + soldiers_created else
3286: LD_ADDR_VAR 0 9
3290: PUSH
3291: LD_VAR 0 8
3295: PUSH
3296: LD_LOC 4
3300: PLUS
3301: ST_TO_ADDR
3302: GO 3314
// j := i ;
3304: LD_ADDR_VAR 0 9
3308: PUSH
3309: LD_VAR 0 8
3313: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3314: LD_LOC 2
3318: PUSH
3319: LD_VAR 0 2
3323: ARRAY
3324: PUSH
3325: LD_VAR 0 9
3329: ARRAY
3330: PPUSH
3331: LD_VAR 0 10
3335: PPUSH
3336: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3340: LD_VAR 0 10
3344: PPUSH
3345: LD_INT 2
3347: PPUSH
3348: LD_LOC 2
3352: PUSH
3353: LD_VAR 0 2
3357: ARRAY
3358: PUSH
3359: LD_VAR 0 9
3363: ARRAY
3364: PPUSH
3365: LD_INT 2
3367: PPUSH
3368: CALL_OW 260
3372: PPUSH
3373: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3377: LD_VAR 0 10
3381: PPUSH
3382: LD_INT 1
3384: PPUSH
3385: LD_LOC 2
3389: PUSH
3390: LD_VAR 0 2
3394: ARRAY
3395: PUSH
3396: LD_VAR 0 9
3400: ARRAY
3401: PPUSH
3402: LD_INT 1
3404: PPUSH
3405: CALL_OW 260
3409: PPUSH
3410: CALL_OW 239
// end ; if building then
3414: LD_VAR 0 6
3418: IFFALSE 3436
// PlaceHumanInUnit ( un , building ) else
3420: LD_VAR 0 10
3424: PPUSH
3425: LD_VAR 0 6
3429: PPUSH
3430: CALL_OW 52
3434: GO 3463
// PlaceUnitXYR ( un , x , y , r , false ) ;
3436: LD_VAR 0 10
3440: PPUSH
3441: LD_VAR 0 3
3445: PPUSH
3446: LD_VAR 0 4
3450: PPUSH
3451: LD_VAR 0 5
3455: PPUSH
3456: LD_INT 0
3458: PPUSH
3459: CALL_OW 50
// result := result ^ [ un ] ;
3463: LD_ADDR_VAR 0 7
3467: PUSH
3468: LD_VAR 0 7
3472: PUSH
3473: LD_VAR 0 10
3477: PUSH
3478: EMPTY
3479: LIST
3480: ADD
3481: ST_TO_ADDR
// end ;
3482: GO 3065
3484: POP
3485: POP
// if not global_defined then
3486: LD_LOC 3
3490: NOT
3491: IFFALSE 3569
// if ( global_units >= cl ) then
3493: LD_LOC 2
3497: PUSH
3498: LD_VAR 0 2
3502: GREATEREQUAL
3503: IFFALSE 3544
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3505: LD_ADDR_LOC 2
3509: PUSH
3510: LD_LOC 2
3514: PPUSH
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_LOC 2
3524: PUSH
3525: LD_VAR 0 2
3529: ARRAY
3530: PUSH
3531: LD_VAR 0 7
3535: ADD
3536: PPUSH
3537: CALL_OW 1
3541: ST_TO_ADDR
3542: GO 3569
// global_units := Replace ( global_units , cl , result ) ;
3544: LD_ADDR_LOC 2
3548: PUSH
3549: LD_LOC 2
3553: PPUSH
3554: LD_VAR 0 2
3558: PPUSH
3559: LD_VAR 0 7
3563: PPUSH
3564: CALL_OW 1
3568: ST_TO_ADDR
// if commander then
3569: LD_LOC 1
3573: IFFALSE 3620
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3575: LD_ADDR_EXP 30
3579: PUSH
3580: LD_EXP 30
3584: PPUSH
3585: LD_OWVAR 20
3589: PPUSH
3590: LD_EXP 30
3594: PUSH
3595: LD_OWVAR 20
3599: ARRAY
3600: PUSH
3601: LD_VAR 0 10
3605: ADD
3606: PPUSH
3607: CALL_OW 1
3611: ST_TO_ADDR
// commander := false ;
3612: LD_ADDR_LOC 1
3616: PUSH
3617: LD_INT 0
3619: ST_TO_ADDR
// end ; end ;
3620: LD_VAR 0 7
3624: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3625: LD_INT 0
3627: PPUSH
3628: PPUSH
3629: PPUSH
3630: PPUSH
3631: PPUSH
3632: PPUSH
3633: PPUSH
3634: PPUSH
3635: PPUSH
// pos := Side_Positions [ side ] ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_EXP 18
3645: PUSH
3646: LD_VAR 0 1
3650: ARRAY
3651: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3652: LD_ADDR_OWVAR 21
3656: PUSH
3657: LD_EXP 19
3661: PUSH
3662: LD_VAR 0 1
3666: ARRAY
3667: ST_TO_ADDR
// uc_side := side ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_VAR 0 1
3677: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3678: LD_ADDR_VAR 0 4
3682: PUSH
3683: LD_EXP 22
3687: PUSH
3688: LD_VAR 0 3
3692: ARRAY
3693: PUSH
3694: LD_INT 1
3696: ARRAY
3697: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3698: LD_ADDR_VAR 0 5
3702: PUSH
3703: LD_EXP 22
3707: PUSH
3708: LD_VAR 0 3
3712: ARRAY
3713: PUSH
3714: LD_INT 2
3716: ARRAY
3717: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3718: LD_ADDR_VAR 0 6
3722: PUSH
3723: LD_EXP 22
3727: PUSH
3728: LD_VAR 0 3
3732: ARRAY
3733: PUSH
3734: LD_INT 3
3736: ARRAY
3737: ST_TO_ADDR
// if is_depot then
3738: LD_EXP 1
3742: IFFALSE 3875
// begin bc_type = b_depot ;
3744: LD_ADDR_OWVAR 42
3748: PUSH
3749: LD_INT 0
3751: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3752: LD_ADDR_VAR 0 10
3756: PUSH
3757: LD_VAR 0 4
3761: PPUSH
3762: LD_VAR 0 5
3766: PPUSH
3767: LD_VAR 0 6
3771: PPUSH
3772: CALL_OW 47
3776: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3777: LD_VAR 0 10
3781: PPUSH
3782: LD_STRING @
3784: PUSH
3785: LD_VAR 0 1
3789: STR
3790: PPUSH
3791: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3795: LD_VAR 0 10
3799: PPUSH
3800: CALL_OW 274
3804: PPUSH
3805: LD_INT 1
3807: PPUSH
3808: LD_EXP 6
3812: PUSH
3813: LD_INT 1
3815: ARRAY
3816: PPUSH
3817: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3821: LD_VAR 0 10
3825: PPUSH
3826: CALL_OW 274
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_EXP 6
3838: PUSH
3839: LD_INT 2
3841: ARRAY
3842: PPUSH
3843: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3847: LD_VAR 0 10
3851: PPUSH
3852: CALL_OW 274
3856: PPUSH
3857: LD_INT 3
3859: PPUSH
3860: LD_EXP 6
3864: PUSH
3865: LD_INT 3
3867: ARRAY
3868: PPUSH
3869: CALL_OW 277
// end else
3873: GO 4019
// begin for i := 1 to 3 do
3875: LD_ADDR_VAR 0 7
3879: PUSH
3880: DOUBLE
3881: LD_INT 1
3883: DEC
3884: ST_TO_ADDR
3885: LD_INT 3
3887: PUSH
3888: FOR_TO
3889: IFFALSE 4017
// begin r := starting_resources [ i ] ;
3891: LD_ADDR_VAR 0 8
3895: PUSH
3896: LD_EXP 6
3900: PUSH
3901: LD_VAR 0 7
3905: ARRAY
3906: ST_TO_ADDR
// while r >= 10 do
3907: LD_VAR 0 8
3911: PUSH
3912: LD_INT 10
3914: GREATEREQUAL
3915: IFFALSE 4015
// if r > 50 then
3917: LD_VAR 0 8
3921: PUSH
3922: LD_INT 50
3924: GREATER
3925: IFFALSE 3971
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3927: LD_VAR 0 7
3931: PPUSH
3932: LD_INT 5
3934: PPUSH
3935: LD_VAR 0 4
3939: PPUSH
3940: LD_VAR 0 5
3944: PPUSH
3945: LD_INT 4
3947: PPUSH
3948: LD_INT 0
3950: PPUSH
3951: CALL_OW 60
// r := r - 50 ;
3955: LD_ADDR_VAR 0 8
3959: PUSH
3960: LD_VAR 0 8
3964: PUSH
3965: LD_INT 50
3967: MINUS
3968: ST_TO_ADDR
// end else
3969: GO 4013
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3971: LD_VAR 0 7
3975: PPUSH
3976: LD_VAR 0 8
3980: PUSH
3981: LD_INT 10
3983: DIV
3984: PPUSH
3985: LD_VAR 0 4
3989: PPUSH
3990: LD_VAR 0 5
3994: PPUSH
3995: LD_INT 4
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 60
// r := 0 ;
4005: LD_ADDR_VAR 0 8
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// end ;
4013: GO 3907
// end ;
4015: GO 3888
4017: POP
4018: POP
// end ; for r in starting_crates do
4019: LD_ADDR_VAR 0 8
4023: PUSH
4024: LD_EXP 5
4028: PUSH
4029: FOR_IN
4030: IFFALSE 4062
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4032: LD_INT 1
4034: PPUSH
4035: LD_INT 5
4037: PPUSH
4038: LD_VAR 0 4
4042: PPUSH
4043: LD_VAR 0 5
4047: PPUSH
4048: LD_VAR 0 8
4052: PPUSH
4053: LD_INT 0
4055: PPUSH
4056: CALL_OW 60
4060: GO 4029
4062: POP
4063: POP
// if def_morale_flags then
4064: LD_EXP 42
4068: IFFALSE 4207
// begin x := start_def [ pos ] [ 1 ] ;
4070: LD_ADDR_VAR 0 4
4074: PUSH
4075: LD_EXP 24
4079: PUSH
4080: LD_VAR 0 3
4084: ARRAY
4085: PUSH
4086: LD_INT 1
4088: ARRAY
4089: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4090: LD_ADDR_VAR 0 5
4094: PUSH
4095: LD_EXP 24
4099: PUSH
4100: LD_VAR 0 3
4104: ARRAY
4105: PUSH
4106: LD_INT 2
4108: ARRAY
4109: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4110: LD_VAR 0 4
4114: PPUSH
4115: LD_VAR 0 5
4119: PPUSH
4120: LD_INT 12
4122: PPUSH
4123: LD_INT 2
4125: PPUSH
4126: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4130: LD_ADDR_EXP 29
4134: PUSH
4135: LD_EXP 29
4139: PUSH
4140: LD_VAR 0 1
4144: PPUSH
4145: LD_VAR 0 4
4149: PPUSH
4150: LD_VAR 0 5
4154: PPUSH
4155: LD_INT 1
4157: PUSH
4158: LD_INT 100
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 2
4167: PUSH
4168: LD_INT 50
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_INT 3
4177: PUSH
4178: LD_INT 20
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 20
4187: PUSH
4188: LD_INT 100
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: PPUSH
4201: CALL_OW 418
4205: ADD
4206: ST_TO_ADDR
// end ; commander := true ;
4207: LD_ADDR_LOC 1
4211: PUSH
4212: LD_INT 1
4214: ST_TO_ADDR
// soldiers_created := 0 ;
4215: LD_ADDR_LOC 4
4219: PUSH
4220: LD_INT 0
4222: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4223: LD_ADDR_VAR 0 7
4227: PUSH
4228: DOUBLE
4229: LD_INT 1
4231: DEC
4232: ST_TO_ADDR
4233: LD_EXP 2
4237: PUSH
4238: FOR_TO
4239: IFFALSE 4392
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4241: LD_ADDR_VAR 0 4
4245: PUSH
4246: LD_EXP 23
4250: PUSH
4251: LD_VAR 0 3
4255: ARRAY
4256: PUSH
4257: LD_VAR 0 7
4261: ARRAY
4262: PUSH
4263: LD_INT 1
4265: ARRAY
4266: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4267: LD_ADDR_VAR 0 5
4271: PUSH
4272: LD_EXP 23
4276: PUSH
4277: LD_VAR 0 3
4281: ARRAY
4282: PUSH
4283: LD_VAR 0 7
4287: ARRAY
4288: PUSH
4289: LD_INT 2
4291: ARRAY
4292: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4293: LD_ADDR_VAR 0 6
4297: PUSH
4298: LD_EXP 23
4302: PUSH
4303: LD_VAR 0 3
4307: ARRAY
4308: PUSH
4309: LD_VAR 0 7
4313: ARRAY
4314: PUSH
4315: LD_INT 3
4317: ARRAY
4318: ST_TO_ADDR
// bc_type := b_breastwork ;
4319: LD_ADDR_OWVAR 42
4323: PUSH
4324: LD_INT 31
4326: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4327: LD_ADDR_VAR 0 9
4331: PUSH
4332: LD_VAR 0 4
4336: PPUSH
4337: LD_VAR 0 5
4341: PPUSH
4342: LD_VAR 0 6
4346: PPUSH
4347: CALL_OW 47
4351: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4352: LD_INT 1
4354: PPUSH
4355: LD_INT 1
4357: PPUSH
4358: LD_INT 0
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: LD_INT 0
4366: PPUSH
4367: LD_VAR 0 9
4371: PPUSH
4372: CALL 3037 0 6
// soldiers_created := soldiers_created + 1 ;
4376: LD_ADDR_LOC 4
4380: PUSH
4381: LD_LOC 4
4385: PUSH
4386: LD_INT 1
4388: PLUS
4389: ST_TO_ADDR
// end ;
4390: GO 4238
4392: POP
4393: POP
// x := start_def [ pos ] [ 1 ] ;
4394: LD_ADDR_VAR 0 4
4398: PUSH
4399: LD_EXP 24
4403: PUSH
4404: LD_VAR 0 3
4408: ARRAY
4409: PUSH
4410: LD_INT 1
4412: ARRAY
4413: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4414: LD_ADDR_VAR 0 5
4418: PUSH
4419: LD_EXP 24
4423: PUSH
4424: LD_VAR 0 3
4428: ARRAY
4429: PUSH
4430: LD_INT 2
4432: ARRAY
4433: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4434: LD_LOC 8
4438: PUSH
4439: LD_EXP 2
4443: MINUS
4444: PPUSH
4445: LD_INT 1
4447: PPUSH
4448: LD_VAR 0 4
4452: PPUSH
4453: LD_VAR 0 5
4457: PPUSH
4458: LD_INT 5
4460: PPUSH
4461: LD_INT 0
4463: PPUSH
4464: CALL 3037 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4468: LD_LOC 5
4472: PPUSH
4473: LD_INT 2
4475: PPUSH
4476: LD_VAR 0 4
4480: PPUSH
4481: LD_VAR 0 5
4485: PPUSH
4486: LD_INT 5
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL 3037 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4496: LD_LOC 7
4500: PPUSH
4501: LD_INT 3
4503: PPUSH
4504: LD_VAR 0 4
4508: PPUSH
4509: LD_VAR 0 5
4513: PPUSH
4514: LD_INT 5
4516: PPUSH
4517: LD_INT 0
4519: PPUSH
4520: CALL 3037 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4524: LD_LOC 6
4528: PPUSH
4529: LD_INT 4
4531: PPUSH
4532: LD_VAR 0 4
4536: PPUSH
4537: LD_VAR 0 5
4541: PPUSH
4542: LD_INT 5
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: CALL 3037 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4552: LD_EXP 43
4556: PUSH
4557: LD_INT 20
4559: PPUSH
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 321
4569: PUSH
4570: LD_INT 1
4572: EQUAL
4573: AND
4574: IFFALSE 4591
// SetTech ( tech_SibDet , side , state_researched ) ;
4576: LD_INT 20
4578: PPUSH
4579: LD_VAR 0 1
4583: PPUSH
4584: LD_INT 2
4586: PPUSH
4587: CALL_OW 322
// if def_siberite_bomb = 1 then
4591: LD_EXP 46
4595: PUSH
4596: LD_INT 1
4598: EQUAL
4599: IFFALSE 4633
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4601: LD_INT 25
4603: PPUSH
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_INT 1
4611: PPUSH
4612: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4616: LD_INT 73
4618: PPUSH
4619: LD_VAR 0 1
4623: PPUSH
4624: LD_INT 1
4626: PPUSH
4627: CALL_OW 322
// end else
4631: GO 4663
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4633: LD_INT 25
4635: PPUSH
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_INT 0
4643: PPUSH
4644: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4648: LD_INT 73
4650: PPUSH
4651: LD_VAR 0 1
4655: PPUSH
4656: LD_INT 0
4658: PPUSH
4659: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4663: LD_INT 24
4665: PPUSH
4666: LD_VAR 0 1
4670: PPUSH
4671: LD_INT 0
4673: PPUSH
4674: CALL_OW 322
// global_defined := true ;
4678: LD_ADDR_LOC 3
4682: PUSH
4683: LD_INT 1
4685: ST_TO_ADDR
// end ;
4686: LD_VAR 0 2
4690: RET
// function prepare_sides ; var i ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
// global_units := [ ] ;
4695: LD_ADDR_LOC 2
4699: PUSH
4700: EMPTY
4701: ST_TO_ADDR
// global_defined := false ;
4702: LD_ADDR_LOC 3
4706: PUSH
4707: LD_INT 0
4709: ST_TO_ADDR
// CountClassMembers ;
4710: CALL 4760 0 0
// for i := 1 to 8 do
4714: LD_ADDR_VAR 0 2
4718: PUSH
4719: DOUBLE
4720: LD_INT 1
4722: DEC
4723: ST_TO_ADDR
4724: LD_INT 8
4726: PUSH
4727: FOR_TO
4728: IFFALSE 4753
// if Side_Positions [ i ] then
4730: LD_EXP 18
4734: PUSH
4735: LD_VAR 0 2
4739: ARRAY
4740: IFFALSE 4751
// prepare_side ( i ) ;
4742: LD_VAR 0 2
4746: PPUSH
4747: CALL 3625 0 1
4751: GO 4727
4753: POP
4754: POP
// end ;
4755: LD_VAR 0 1
4759: RET
// function CountClassMembers ; var Mode ; begin
4760: LD_INT 0
4762: PPUSH
4763: PPUSH
// if No_Mechs then
4764: LD_EXP 48
4768: IFFALSE 4780
// Mode := 2 else
4770: LD_ADDR_VAR 0 2
4774: PUSH
4775: LD_INT 2
4777: ST_TO_ADDR
4778: GO 4788
// Mode := 1 ;
4780: LD_ADDR_VAR 0 2
4784: PUSH
4785: LD_INT 1
4787: ST_TO_ADDR
// neng := number_of_people ;
4788: LD_ADDR_LOC 5
4792: PUSH
4793: LD_EXP 3
4797: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4798: LD_ADDR_LOC 8
4802: PUSH
4803: LD_LOC 5
4807: PUSH
4808: LD_INT 4
4810: PUSH
4811: LD_INT 3
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_VAR 0 2
4822: ARRAY
4823: DIV
4824: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4825: LD_LOC 8
4829: PUSH
4830: LD_EXP 2
4834: LESS
4835: IFFALSE 4847
// nsol := number_of_breastworks ;
4837: LD_ADDR_LOC 8
4841: PUSH
4842: LD_EXP 2
4846: ST_TO_ADDR
// neng := neng - nsol ;
4847: LD_ADDR_LOC 5
4851: PUSH
4852: LD_LOC 5
4856: PUSH
4857: LD_LOC 8
4861: MINUS
4862: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4863: LD_ADDR_LOC 6
4867: PUSH
4868: LD_LOC 5
4872: PUSH
4873: LD_INT 3
4875: PUSH
4876: LD_INT 2
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: PUSH
4883: LD_VAR 0 2
4887: ARRAY
4888: DIV
4889: ST_TO_ADDR
// if ( nsci < 1 ) then
4890: LD_LOC 6
4894: PUSH
4895: LD_INT 1
4897: LESS
4898: IFFALSE 4908
// nsci := 1 ;
4900: LD_ADDR_LOC 6
4904: PUSH
4905: LD_INT 1
4907: ST_TO_ADDR
// neng := neng - nsci ;
4908: LD_ADDR_LOC 5
4912: PUSH
4913: LD_LOC 5
4917: PUSH
4918: LD_LOC 6
4922: MINUS
4923: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4924: LD_ADDR_LOC 7
4928: PUSH
4929: LD_LOC 5
4933: PUSH
4934: LD_INT 2
4936: DIV
4937: PUSH
4938: LD_INT 0
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PUSH
4945: LD_VAR 0 2
4949: ARRAY
4950: ST_TO_ADDR
// neng := neng - nmech ;
4951: LD_ADDR_LOC 5
4955: PUSH
4956: LD_LOC 5
4960: PUSH
4961: LD_LOC 7
4965: MINUS
4966: ST_TO_ADDR
// if ( neng < 1 ) then
4967: LD_LOC 5
4971: PUSH
4972: LD_INT 1
4974: LESS
4975: IFFALSE 4985
// neng := 1 ;
4977: LD_ADDR_LOC 5
4981: PUSH
4982: LD_INT 1
4984: ST_TO_ADDR
// end ;
4985: LD_VAR 0 1
4989: RET
// starting begin disable ( 98 ) ;
4990: LD_INT 98
4992: DISABLE_MARKED
// disable ( 99 ) ;
4993: LD_INT 99
4995: DISABLE_MARKED
// disable ( 100 ) ;
4996: LD_INT 100
4998: DISABLE_MARKED
// disable ( 400 ) ;
4999: LD_INT 400
5001: DISABLE_MARKED
// disable ( 401 ) ;
5002: LD_INT 401
5004: DISABLE_MARKED
// disable ( 600 ) ;
5005: LD_INT 600
5007: DISABLE_MARKED
// mp_selectmsg := true ;
5008: LD_ADDR_OWVAR 13
5012: PUSH
5013: LD_INT 1
5015: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5016: CALL 68 0 0
// init_map ;
5020: CALL 1492 0 0
// init_respawning ;
5024: CALL 5728 0 0
// set_shared_visions_and_alliances ;
5028: CALL 2749 0 0
// ResetFog ;
5032: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5036: LD_OWVAR 2
5040: PPUSH
5041: CALL_OW 520
// prepare_sides ;
5045: CALL 4691 0 0
// Init_Win_Condition ;
5049: CALL 11878 0 0
// InitLimits ;
5053: CALL 10538 0 0
// ShowTimer ;
5057: CALL 11475 0 0
// music_nat := Side_Nations [ your_side ] ;
5061: LD_ADDR_OWVAR 71
5065: PUSH
5066: LD_EXP 19
5070: PUSH
5071: LD_OWVAR 2
5075: ARRAY
5076: ST_TO_ADDR
// if IAmSpec then
5077: CALL_OW 531
5081: IFFALSE 5105
// begin fogoff ( true ) ;
5083: LD_INT 1
5085: PPUSH
5086: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
5090: LD_INT 130
5092: PPUSH
5093: LD_INT 100
5095: PPUSH
5096: CALL_OW 86
// enable ( 400 ) ;
5100: LD_INT 400
5102: ENABLE_MARKED
// end else
5103: GO 5151
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5105: LD_EXP 24
5109: PUSH
5110: LD_EXP 18
5114: PUSH
5115: LD_OWVAR 2
5119: ARRAY
5120: ARRAY
5121: PUSH
5122: LD_INT 1
5124: ARRAY
5125: PPUSH
5126: LD_EXP 24
5130: PUSH
5131: LD_EXP 18
5135: PUSH
5136: LD_OWVAR 2
5140: ARRAY
5141: ARRAY
5142: PUSH
5143: LD_INT 2
5145: ARRAY
5146: PPUSH
5147: CALL_OW 86
// end ; if def_builduptime then
5151: LD_EXP 47
5155: IFFALSE 5161
// BeginBuildUp ;
5157: CALL 7705 0 0
// end ;
5161: END
// every 0 0$1 do
5162: GO 5164
5164: DISABLE
// if ( def_siberite_bomb > 1 ) then
5165: LD_EXP 46
5169: PUSH
5170: LD_INT 1
5172: GREATER
5173: IFFALSE 5188
// begin wait ( siberite_bomb_Delay ) ;
5175: LD_EXP 13
5179: PPUSH
5180: CALL_OW 67
// EnableSibFiss ;
5184: CALL 5189 0 0
// end ;
5188: END
// function EnableSibFiss ; var i ; begin
5189: LD_INT 0
5191: PPUSH
5192: PPUSH
// for i := 1 to 8 do
5193: LD_ADDR_VAR 0 2
5197: PUSH
5198: DOUBLE
5199: LD_INT 1
5201: DEC
5202: ST_TO_ADDR
5203: LD_INT 8
5205: PUSH
5206: FOR_TO
5207: IFFALSE 5253
// if Side_Positions [ i ] then
5209: LD_EXP 18
5213: PUSH
5214: LD_VAR 0 2
5218: ARRAY
5219: IFFALSE 5251
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5221: LD_INT 25
5223: PPUSH
5224: LD_VAR 0 2
5228: PPUSH
5229: LD_INT 1
5231: PPUSH
5232: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5236: LD_INT 73
5238: PPUSH
5239: LD_VAR 0 2
5243: PPUSH
5244: LD_INT 1
5246: PPUSH
5247: CALL_OW 322
// end ;
5251: GO 5206
5253: POP
5254: POP
// end ; end_of_file
5255: LD_VAR 0 1
5259: RET
// every 1 1$0 + 0 0$0.3 do
5260: GO 5262
5262: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5263: LD_INT 4
5265: PPUSH
5266: LD_INT 5
5268: PPUSH
5269: CALL_OW 12
5273: PPUSH
5274: LD_INT 1
5276: PPUSH
5277: CALL_OW 57
// enable ;
5281: ENABLE
// end ;
5282: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5283: GO 5285
5285: DISABLE
5286: LD_INT 0
5288: PPUSH
5289: PPUSH
// begin case tick of 1 .. 1 1$0 :
5290: LD_OWVAR 1
5294: PUSH
5295: LD_INT 1
5297: DOUBLE
5298: GREATEREQUAL
5299: IFFALSE 5307
5301: LD_INT 2100
5303: DOUBLE
5304: LESSEQUAL
5305: IFTRUE 5309
5307: GO 5337
5309: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5310: LD_EXP 7
5314: PUSH
5315: LD_INT 100
5317: DIVREAL
5318: PUSH
5319: LD_INT 350
5321: PPUSH
5322: LD_INT 1050
5324: PPUSH
5325: CALL_OW 12
5329: MUL
5330: PPUSH
5331: CALL_OW 67
5335: GO 5639
5337: LD_INT 2100
5339: PUSH
5340: LD_INT 1
5342: PLUS
5343: DOUBLE
5344: GREATEREQUAL
5345: IFFALSE 5353
5347: LD_INT 10500
5349: DOUBLE
5350: LESSEQUAL
5351: IFTRUE 5355
5353: GO 5383
5355: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5356: LD_EXP 7
5360: PUSH
5361: LD_INT 100
5363: DIVREAL
5364: PUSH
5365: LD_INT 1050
5367: PPUSH
5368: LD_INT 1575
5370: PPUSH
5371: CALL_OW 12
5375: MUL
5376: PPUSH
5377: CALL_OW 67
5381: GO 5639
5383: LD_INT 10500
5385: PUSH
5386: LD_INT 1
5388: PLUS
5389: DOUBLE
5390: GREATEREQUAL
5391: IFFALSE 5399
5393: LD_INT 21000
5395: DOUBLE
5396: LESSEQUAL
5397: IFTRUE 5401
5399: GO 5429
5401: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5402: LD_EXP 7
5406: PUSH
5407: LD_INT 100
5409: DIVREAL
5410: PUSH
5411: LD_INT 1575
5413: PPUSH
5414: LD_INT 2100
5416: PPUSH
5417: CALL_OW 12
5421: MUL
5422: PPUSH
5423: CALL_OW 67
5427: GO 5639
5429: LD_INT 21000
5431: PUSH
5432: LD_INT 1
5434: PLUS
5435: DOUBLE
5436: GREATEREQUAL
5437: IFFALSE 5445
5439: LD_INT 42000
5441: DOUBLE
5442: LESSEQUAL
5443: IFTRUE 5447
5445: GO 5475
5447: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5448: LD_EXP 7
5452: PUSH
5453: LD_INT 100
5455: DIVREAL
5456: PUSH
5457: LD_INT 2100
5459: PPUSH
5460: LD_INT 2625
5462: PPUSH
5463: CALL_OW 12
5467: MUL
5468: PPUSH
5469: CALL_OW 67
5473: GO 5639
5475: LD_INT 42000
5477: PUSH
5478: LD_INT 1
5480: PLUS
5481: DOUBLE
5482: GREATEREQUAL
5483: IFFALSE 5491
5485: LD_INT 63000
5487: DOUBLE
5488: LESSEQUAL
5489: IFTRUE 5493
5491: GO 5521
5493: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5494: LD_EXP 7
5498: PUSH
5499: LD_INT 100
5501: DIVREAL
5502: PUSH
5503: LD_INT 2625
5505: PPUSH
5506: LD_INT 3150
5508: PPUSH
5509: CALL_OW 12
5513: MUL
5514: PPUSH
5515: CALL_OW 67
5519: GO 5639
5521: LD_INT 63000
5523: PUSH
5524: LD_INT 1
5526: PLUS
5527: DOUBLE
5528: GREATEREQUAL
5529: IFFALSE 5537
5531: LD_INT 105000
5533: DOUBLE
5534: LESSEQUAL
5535: IFTRUE 5539
5537: GO 5567
5539: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5540: LD_EXP 7
5544: PUSH
5545: LD_INT 100
5547: DIVREAL
5548: PUSH
5549: LD_INT 3150
5551: PPUSH
5552: LD_INT 3675
5554: PPUSH
5555: CALL_OW 12
5559: MUL
5560: PPUSH
5561: CALL_OW 67
5565: GO 5639
5567: LD_INT 105000
5569: PUSH
5570: LD_INT 1
5572: PLUS
5573: DOUBLE
5574: GREATEREQUAL
5575: IFFALSE 5583
5577: LD_INT 630000
5579: DOUBLE
5580: LESSEQUAL
5581: IFTRUE 5585
5583: GO 5613
5585: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5586: LD_EXP 7
5590: PUSH
5591: LD_INT 100
5593: DIVREAL
5594: PUSH
5595: LD_INT 3675
5597: PPUSH
5598: LD_INT 4200
5600: PPUSH
5601: CALL_OW 12
5605: MUL
5606: PPUSH
5607: CALL_OW 67
5611: GO 5639
5613: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5614: LD_EXP 7
5618: PUSH
5619: LD_INT 100
5621: DIVREAL
5622: PUSH
5623: LD_INT 4200
5625: PPUSH
5626: LD_INT 5250
5628: PPUSH
5629: CALL_OW 12
5633: MUL
5634: PPUSH
5635: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5639: LD_ADDR_VAR 0 2
5643: PUSH
5644: LD_INT 3
5646: PPUSH
5647: LD_INT 5
5649: PPUSH
5650: CALL_OW 12
5654: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5655: LD_ADDR_VAR 0 1
5659: PUSH
5660: LD_EXP 18
5664: PUSH
5665: LD_INT 0
5667: PUSH
5668: EMPTY
5669: LIST
5670: DIFF
5671: PUSH
5672: FOR_IN
5673: IFFALSE 5722
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5675: LD_VAR 0 2
5679: PPUSH
5680: LD_EXP 24
5684: PUSH
5685: LD_VAR 0 1
5689: ARRAY
5690: PUSH
5691: LD_INT 1
5693: ARRAY
5694: PPUSH
5695: LD_EXP 24
5699: PUSH
5700: LD_VAR 0 1
5704: ARRAY
5705: PUSH
5706: LD_INT 2
5708: ARRAY
5709: PPUSH
5710: LD_INT 20
5712: PPUSH
5713: LD_INT 1
5715: PPUSH
5716: CALL_OW 56
5720: GO 5672
5722: POP
5723: POP
// enable ;
5724: ENABLE
// end ; end_of_file
5725: PPOPN 2
5727: END
// var respawn , inqueue ; export function init_respawning ; begin
5728: LD_INT 0
5730: PPUSH
// respawn := Rand ( 1 , 8 ) ;
5731: LD_ADDR_LOC 9
5735: PUSH
5736: LD_INT 1
5738: PPUSH
5739: LD_INT 8
5741: PPUSH
5742: CALL_OW 12
5746: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5747: LD_ADDR_LOC 10
5751: PUSH
5752: LD_INT 0
5754: PUSH
5755: LD_INT 0
5757: PUSH
5758: LD_INT 0
5760: PUSH
5761: LD_INT 0
5763: PUSH
5764: LD_INT 0
5766: PUSH
5767: LD_INT 0
5769: PUSH
5770: LD_INT 0
5772: PUSH
5773: LD_INT 0
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: LIST
5785: ST_TO_ADDR
// end ;
5786: LD_VAR 0 1
5790: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5791: GO 5793
5793: DISABLE
5794: LD_INT 0
5796: PPUSH
5797: PPUSH
5798: PPUSH
5799: PPUSH
// begin if respawning_time_max = 0 then
5800: LD_EXP 12
5804: PUSH
5805: LD_INT 0
5807: EQUAL
5808: IFFALSE 5812
// exit ;
5810: GO 6319
// if respawn = 8 then
5812: LD_LOC 9
5816: PUSH
5817: LD_INT 8
5819: EQUAL
5820: IFFALSE 5832
// respawn := 1 else
5822: LD_ADDR_LOC 9
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
5830: GO 5846
// respawn := respawn + 1 ;
5832: LD_ADDR_LOC 9
5836: PUSH
5837: LD_LOC 9
5841: PUSH
5842: LD_INT 1
5844: PLUS
5845: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5846: LD_EXP 18
5850: PUSH
5851: LD_LOC 9
5855: ARRAY
5856: PUSH
5857: LD_LOC 10
5861: PUSH
5862: LD_LOC 9
5866: ARRAY
5867: NOT
5868: AND
5869: IFFALSE 6318
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5871: LD_ADDR_VAR 0 1
5875: PUSH
5876: LD_INT 21
5878: PUSH
5879: LD_INT 1
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: LD_INT 22
5888: PUSH
5889: LD_LOC 9
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 23
5903: PUSH
5904: LD_INT 0
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: PPUSH
5917: CALL_OW 69
5921: ST_TO_ADDR
// if n < number_of_people then
5922: LD_VAR 0 1
5926: PUSH
5927: LD_EXP 3
5931: LESS
5932: IFFALSE 6315
// begin aktresp := respawn ;
5934: LD_ADDR_VAR 0 3
5938: PUSH
5939: LD_LOC 9
5943: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5944: LD_ADDR_LOC 10
5948: PUSH
5949: LD_LOC 10
5953: PPUSH
5954: LD_VAR 0 3
5958: PPUSH
5959: LD_INT 1
5961: PPUSH
5962: CALL_OW 1
5966: ST_TO_ADDR
// enable ;
5967: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5968: LD_EXP 11
5972: PPUSH
5973: LD_EXP 12
5977: PPUSH
5978: CALL_OW 12
5982: PPUSH
5983: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5987: LD_ADDR_LOC 10
5991: PUSH
5992: LD_LOC 10
5996: PPUSH
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_INT 0
6004: PPUSH
6005: CALL_OW 1
6009: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6010: LD_ADDR_VAR 0 2
6014: PUSH
6015: LD_INT 21
6017: PUSH
6018: LD_INT 3
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PUSH
6025: LD_INT 2
6027: PUSH
6028: LD_INT 30
6030: PUSH
6031: LD_INT 0
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: LD_INT 30
6040: PUSH
6041: LD_INT 1
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: EMPTY
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 50
6055: PUSH
6056: EMPTY
6057: LIST
6058: PUSH
6059: LD_INT 22
6061: PUSH
6062: LD_VAR 0 3
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: PPUSH
6077: CALL_OW 69
6081: ST_TO_ADDR
// if building_list = 0 then
6082: LD_VAR 0 2
6086: PUSH
6087: LD_INT 0
6089: EQUAL
6090: IFFALSE 6135
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6092: LD_ADDR_VAR 0 2
6096: PUSH
6097: LD_INT 21
6099: PUSH
6100: LD_INT 3
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: LD_INT 50
6109: PUSH
6110: EMPTY
6111: LIST
6112: PUSH
6113: LD_INT 22
6115: PUSH
6116: LD_VAR 0 3
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 69
6134: ST_TO_ADDR
// if building_list = 0 then
6135: LD_VAR 0 2
6139: PUSH
6140: LD_INT 0
6142: EQUAL
6143: IFFALSE 6147
// exit ;
6145: GO 6319
// hc_name :=  ;
6147: LD_ADDR_OWVAR 26
6151: PUSH
6152: LD_STRING 
6154: ST_TO_ADDR
// hc_importance := 0 ;
6155: LD_ADDR_OWVAR 32
6159: PUSH
6160: LD_INT 0
6162: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6163: LD_INT 0
6165: PPUSH
6166: LD_INT 0
6168: PPUSH
6169: LD_EXP 4
6173: PUSH
6174: LD_INT 2
6176: DIV
6177: PPUSH
6178: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6182: LD_ADDR_OWVAR 21
6186: PUSH
6187: LD_EXP 19
6191: PUSH
6192: LD_VAR 0 3
6196: ARRAY
6197: ST_TO_ADDR
// uc_side := aktresp ;
6198: LD_ADDR_OWVAR 20
6202: PUSH
6203: LD_VAR 0 3
6207: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6208: LD_ADDR_VAR 0 4
6212: PUSH
6213: LD_VAR 0 2
6217: PUSH
6218: LD_INT 1
6220: PPUSH
6221: LD_VAR 0 2
6225: PUSH
6226: LD_INT 0
6228: PLUS
6229: PPUSH
6230: CALL_OW 12
6234: ARRAY
6235: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6236: LD_VAR 0 4
6240: PPUSH
6241: CALL_OW 266
6245: PUSH
6246: LD_INT 0
6248: PUSH
6249: LD_INT 1
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: IN
6256: IFFALSE 6268
// n = 25 else
6258: LD_ADDR_VAR 0 1
6262: PUSH
6263: LD_INT 25
6265: ST_TO_ADDR
6266: GO 6276
// n = 10 ;
6268: LD_ADDR_VAR 0 1
6272: PUSH
6273: LD_INT 10
6275: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6276: CALL_OW 44
6280: PPUSH
6281: LD_VAR 0 4
6285: PPUSH
6286: CALL_OW 250
6290: PPUSH
6291: LD_VAR 0 4
6295: PPUSH
6296: CALL_OW 251
6300: PPUSH
6301: LD_VAR 0 1
6305: PPUSH
6306: LD_INT 1
6308: PPUSH
6309: CALL_OW 50
// end else
6313: GO 6316
// enable ;
6315: ENABLE
// end else
6316: GO 6319
// enable ;
6318: ENABLE
// end ; end_of_file
6319: PPOPN 4
6321: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
6322: GO 6324
6324: DISABLE
6325: LD_INT 0
6327: PPUSH
// begin _apemenIncrement := 0 ;
6328: LD_ADDR_LOC 11
6332: PUSH
6333: LD_INT 0
6335: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
6336: LD_ADDR_LOC 13
6340: PUSH
6341: LD_INT 0
6343: ST_TO_ADDR
// _isSpawning := true ;
6344: LD_ADDR_LOC 15
6348: PUSH
6349: LD_INT 1
6351: ST_TO_ADDR
// _wildApemenAmount := 0 ;
6352: LD_ADDR_LOC 16
6356: PUSH
6357: LD_INT 0
6359: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6360: LD_ADDR_VAR 0 1
6364: PUSH
6365: LD_EXP 18
6369: PUSH
6370: LD_INT 0
6372: PUSH
6373: EMPTY
6374: LIST
6375: DIFF
6376: PUSH
6377: FOR_IN
6378: IFFALSE 6396
// _apemenIncrement := _apemenIncrement + 1 ;
6380: LD_ADDR_LOC 11
6384: PUSH
6385: LD_LOC 11
6389: PUSH
6390: LD_INT 1
6392: PLUS
6393: ST_TO_ADDR
6394: GO 6377
6396: POP
6397: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
6398: LD_ADDR_LOC 12
6402: PUSH
6403: LD_LOC 11
6407: PUSH
6408: LD_EXP 9
6412: MUL
6413: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
6414: LD_ADDR_LOC 14
6418: PUSH
6419: LD_LOC 12
6423: PUSH
6424: LD_INT 2
6426: DIVREAL
6427: ST_TO_ADDR
// prepare_apemen ;
6428: CALL 6520 0 0
// end ;
6432: PPOPN 1
6434: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
6435: CALL 6442 0 0
// end ;
6439: PPOPN 2
6441: END
// export function CheckApemenAmount ; begin
6442: LD_INT 0
6444: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
6445: LD_ADDR_LOC 16
6449: PUSH
6450: LD_LOC 16
6454: PUSH
6455: LD_INT 1
6457: MINUS
6458: ST_TO_ADDR
// if _isSpawning then
6459: LD_LOC 15
6463: IFFALSE 6467
// exit ;
6465: GO 6515
// if _wildApemenAmount <= ( _apemenThreshold ) then
6467: LD_LOC 16
6471: PUSH
6472: LD_LOC 14
6476: LESSEQUAL
6477: IFFALSE 6515
// begin if _apemenSkillLevel < 8 then
6479: LD_LOC 13
6483: PUSH
6484: LD_INT 8
6486: LESS
6487: IFFALSE 6503
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
6489: LD_ADDR_LOC 13
6493: PUSH
6494: LD_LOC 13
6498: PUSH
6499: LD_INT 1
6501: PLUS
6502: ST_TO_ADDR
// _isSpawning := true ;
6503: LD_ADDR_LOC 15
6507: PUSH
6508: LD_INT 1
6510: ST_TO_ADDR
// prepare_apemen ;
6511: CALL 6520 0 0
// end ; end ;
6515: LD_VAR 0 1
6519: RET
// function prepare_apemen ; var i , j , un , first , d1 , d2 ; begin
6520: LD_INT 0
6522: PPUSH
6523: PPUSH
6524: PPUSH
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
// if not amount_of_apemen then
6529: LD_EXP 9
6533: NOT
6534: IFFALSE 6538
// exit ;
6536: GO 6817
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
6538: LD_INT 1050
6540: PPUSH
6541: LD_INT 3150
6543: PPUSH
6544: CALL_OW 12
6548: PPUSH
6549: CALL_OW 67
// apeman_init ;
6553: CALL 6822 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
6557: LD_ADDR_VAR 0 2
6561: PUSH
6562: LD_EXP 18
6566: PUSH
6567: LD_INT 0
6569: PUSH
6570: EMPTY
6571: LIST
6572: DIFF
6573: PUSH
6574: FOR_IN
6575: IFFALSE 6779
// begin if i = 1 then
6577: LD_VAR 0 2
6581: PUSH
6582: LD_INT 1
6584: EQUAL
6585: IFFALSE 6602
// PlaceUnitArea ( CreateHuman , Base1ApeArea , false ) ;
6587: CALL_OW 44
6591: PPUSH
6592: LD_INT 1
6594: PPUSH
6595: LD_INT 0
6597: PPUSH
6598: CALL_OW 49
// if i = 2 then
6602: LD_VAR 0 2
6606: PUSH
6607: LD_INT 2
6609: EQUAL
6610: IFFALSE 6627
// PlaceUnitArea ( CreateHuman , Base2ApeArea , false ) ;
6612: CALL_OW 44
6616: PPUSH
6617: LD_INT 2
6619: PPUSH
6620: LD_INT 0
6622: PPUSH
6623: CALL_OW 49
// if i = 3 then
6627: LD_VAR 0 2
6631: PUSH
6632: LD_INT 3
6634: EQUAL
6635: IFFALSE 6652
// PlaceUnitArea ( CreateHuman , Base3ApeArea , false ) ;
6637: CALL_OW 44
6641: PPUSH
6642: LD_INT 3
6644: PPUSH
6645: LD_INT 0
6647: PPUSH
6648: CALL_OW 49
// if i = 4 then
6652: LD_VAR 0 2
6656: PUSH
6657: LD_INT 4
6659: EQUAL
6660: IFFALSE 6677
// PlaceUnitArea ( CreateHuman , Base4ApeArea , false ) ;
6662: CALL_OW 44
6666: PPUSH
6667: LD_INT 4
6669: PPUSH
6670: LD_INT 0
6672: PPUSH
6673: CALL_OW 49
// if i = 5 then
6677: LD_VAR 0 2
6681: PUSH
6682: LD_INT 5
6684: EQUAL
6685: IFFALSE 6702
// PlaceUnitArea ( CreateHuman , Base5ApeArea , false ) ;
6687: CALL_OW 44
6691: PPUSH
6692: LD_INT 5
6694: PPUSH
6695: LD_INT 0
6697: PPUSH
6698: CALL_OW 49
// if i = 6 then
6702: LD_VAR 0 2
6706: PUSH
6707: LD_INT 6
6709: EQUAL
6710: IFFALSE 6727
// PlaceUnitArea ( CreateHuman , Base6ApeArea , false ) ;
6712: CALL_OW 44
6716: PPUSH
6717: LD_INT 6
6719: PPUSH
6720: LD_INT 0
6722: PPUSH
6723: CALL_OW 49
// if i = 7 then
6727: LD_VAR 0 2
6731: PUSH
6732: LD_INT 7
6734: EQUAL
6735: IFFALSE 6752
// PlaceUnitArea ( CreateHuman , Base7ApeArea , false ) ;
6737: CALL_OW 44
6741: PPUSH
6742: LD_INT 7
6744: PPUSH
6745: LD_INT 0
6747: PPUSH
6748: CALL_OW 49
// if i = 8 then
6752: LD_VAR 0 2
6756: PUSH
6757: LD_INT 8
6759: EQUAL
6760: IFFALSE 6777
// PlaceUnitArea ( CreateHuman , Base8ApeArea , false ) ;
6762: CALL_OW 44
6766: PPUSH
6767: LD_INT 8
6769: PPUSH
6770: LD_INT 0
6772: PPUSH
6773: CALL_OW 49
// end ;
6777: GO 6574
6779: POP
6780: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
6781: LD_ADDR_LOC 16
6785: PUSH
6786: LD_LOC 16
6790: PUSH
6791: LD_LOC 11
6795: PLUS
6796: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
6797: LD_LOC 16
6801: PUSH
6802: LD_LOC 12
6806: GREATEREQUAL
6807: IFFALSE 6538
// _isSpawning := false ;
6809: LD_ADDR_LOC 15
6813: PUSH
6814: LD_INT 0
6816: ST_TO_ADDR
// end ;
6817: LD_VAR 0 1
6821: RET
// function apeman_init ; begin
6822: LD_INT 0
6824: PPUSH
// uc_side := 0 ;
6825: LD_ADDR_OWVAR 20
6829: PUSH
6830: LD_INT 0
6832: ST_TO_ADDR
// uc_nation := nation_nature ;
6833: LD_ADDR_OWVAR 21
6837: PUSH
6838: LD_INT 0
6840: ST_TO_ADDR
// hc_class := class_apeman ;
6841: LD_ADDR_OWVAR 28
6845: PUSH
6846: LD_INT 12
6848: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
6849: LD_ADDR_OWVAR 30
6853: PUSH
6854: LD_INT 2
6856: PUSH
6857: LD_INT 2
6859: PUSH
6860: LD_INT 2
6862: PUSH
6863: LD_INT 2
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
6872: LD_ADDR_OWVAR 31
6876: PUSH
6877: LD_INT 0
6879: PPUSH
6880: LD_INT 2
6882: PPUSH
6883: CALL_OW 12
6887: PUSH
6888: LD_LOC 13
6892: PLUS
6893: PUSH
6894: LD_INT 0
6896: PPUSH
6897: LD_INT 2
6899: PPUSH
6900: CALL_OW 12
6904: PUSH
6905: LD_LOC 13
6909: PLUS
6910: PUSH
6911: LD_INT 0
6913: PPUSH
6914: LD_INT 2
6916: PPUSH
6917: CALL_OW 12
6921: PUSH
6922: LD_LOC 13
6926: PLUS
6927: PUSH
6928: LD_INT 0
6930: PPUSH
6931: LD_INT 2
6933: PPUSH
6934: CALL_OW 12
6938: PUSH
6939: LD_LOC 13
6943: PLUS
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
6951: LD_ADDR_OWVAR 29
6955: PUSH
6956: LD_INT 10
6958: PUSH
6959: LD_INT 12
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: ST_TO_ADDR
// hc_sex := sex_male ;
6966: LD_ADDR_OWVAR 27
6970: PUSH
6971: LD_INT 1
6973: ST_TO_ADDR
// hc_importance := 0 ;
6974: LD_ADDR_OWVAR 32
6978: PUSH
6979: LD_INT 0
6981: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
6982: LD_ADDR_OWVAR 35
6986: PUSH
6987: LD_INT 20
6989: NEG
6990: PPUSH
6991: LD_INT 20
6993: PPUSH
6994: CALL_OW 12
6998: ST_TO_ADDR
// end ; end_of_file
6999: LD_VAR 0 1
7003: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7004: LD_VAR 0 1
7008: PPUSH
7009: CALL_OW 266
7013: PUSH
7014: LD_INT 0
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: IN
7024: IFFALSE 7049
// SetBName ( b , @ & GetSide ( b ) ) ;
7026: LD_VAR 0 1
7030: PPUSH
7031: LD_STRING @
7033: PUSH
7034: LD_VAR 0 1
7038: PPUSH
7039: CALL_OW 255
7043: STR
7044: PPUSH
7045: CALL_OW 500
// if def_game_rules then
7049: LD_EXP 33
7053: IFFALSE 7090
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7055: LD_VAR 0 1
7059: PPUSH
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 266
7069: PPUSH
7070: LD_VAR 0 1
7074: PPUSH
7075: CALL_OW 255
7079: PPUSH
7080: LD_INT 0
7082: PPUSH
7083: LD_INT 1
7085: PPUSH
7086: CALL 10939 0 5
// end ;
7090: PPOPN 2
7092: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7093: LD_VAR 0 1
7097: PPUSH
7098: CALL_OW 266
7102: PUSH
7103: LD_INT 0
7105: PUSH
7106: LD_INT 1
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: IN
7113: IFFALSE 7138
// SetBName ( b , @ & GetSide ( b ) ) ;
7115: LD_VAR 0 1
7119: PPUSH
7120: LD_STRING @
7122: PUSH
7123: LD_VAR 0 1
7127: PPUSH
7128: CALL_OW 255
7132: STR
7133: PPUSH
7134: CALL_OW 500
// if def_game_rules then
7138: LD_EXP 33
7142: IFFALSE 7181
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7144: LD_VAR 0 1
7148: PPUSH
7149: LD_VAR 0 1
7153: PPUSH
7154: CALL_OW 266
7158: PPUSH
7159: LD_VAR 0 1
7163: PPUSH
7164: CALL_OW 255
7168: PPUSH
7169: LD_VAR 0 2
7173: PPUSH
7174: LD_INT 1
7176: PPUSH
7177: CALL 10939 0 5
// end ;
7181: PPOPN 3
7183: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7184: LD_INT 0
7186: PPUSH
7187: PPUSH
7188: PPUSH
7189: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
7190: LD_VAR 0 1
7194: PPUSH
7195: CALL_OW 255
7199: PUSH
7200: LD_INT 0
7202: EQUAL
7203: PUSH
7204: LD_VAR 0 1
7208: PPUSH
7209: CALL_OW 257
7213: PUSH
7214: LD_INT 12
7216: EQUAL
7217: AND
7218: IFFALSE 7224
// CheckApemenAmount ;
7220: CALL 6442 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7224: LD_VAR 0 1
7228: PPUSH
7229: CALL_OW 266
7233: PUSH
7234: LD_INT 0
7236: PUSH
7237: LD_INT 1
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: IN
7244: IFFALSE 7326
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7246: LD_ADDR_VAR 0 4
7250: PUSH
7251: LD_EXP 18
7255: PUSH
7256: LD_VAR 0 1
7260: PPUSH
7261: CALL_OW 255
7265: ARRAY
7266: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7267: LD_ADDR_VAR 0 2
7271: PUSH
7272: LD_EXP 24
7276: PUSH
7277: LD_VAR 0 4
7281: ARRAY
7282: PUSH
7283: LD_INT 1
7285: ARRAY
7286: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7287: LD_ADDR_VAR 0 3
7291: PUSH
7292: LD_EXP 24
7296: PUSH
7297: LD_VAR 0 4
7301: ARRAY
7302: PUSH
7303: LD_INT 2
7305: ARRAY
7306: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7307: LD_VAR 0 2
7311: PPUSH
7312: LD_VAR 0 3
7316: PPUSH
7317: CALL_OW 420
7321: PPUSH
7322: CALL_OW 419
// end ; if def_game_rules then
7326: LD_EXP 33
7330: IFFALSE 7429
// if ( GetType ( j ) = 3 ) then
7332: LD_VAR 0 1
7336: PPUSH
7337: CALL_OW 247
7341: PUSH
7342: LD_INT 3
7344: EQUAL
7345: IFFALSE 7385
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7347: LD_VAR 0 1
7351: PPUSH
7352: LD_VAR 0 1
7356: PPUSH
7357: CALL_OW 266
7361: PPUSH
7362: LD_VAR 0 1
7366: PPUSH
7367: CALL_OW 255
7371: PPUSH
7372: LD_INT 0
7374: PPUSH
7375: LD_INT 1
7377: NEG
7378: PPUSH
7379: CALL 10939 0 5
7383: GO 7429
// if ( GetChassis ( j ) = 25 ) then
7385: LD_VAR 0 1
7389: PPUSH
7390: CALL_OW 265
7394: PUSH
7395: LD_INT 25
7397: EQUAL
7398: IFFALSE 7429
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7400: LD_VAR 0 1
7404: PPUSH
7405: LD_INT 37
7407: PPUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 255
7417: PPUSH
7418: LD_INT 0
7420: PPUSH
7421: LD_INT 1
7423: NEG
7424: PPUSH
7425: CALL 10939 0 5
// end ;
7429: PPOPN 5
7431: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7432: LD_EXP 33
7436: PUSH
7437: LD_VAR 0 1
7441: PPUSH
7442: CALL_OW 265
7446: PUSH
7447: LD_INT 25
7449: EQUAL
7450: AND
7451: IFFALSE 7483
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7453: LD_VAR 0 1
7457: PPUSH
7458: LD_INT 37
7460: PPUSH
7461: LD_VAR 0 1
7465: PPUSH
7466: CALL_OW 255
7470: PPUSH
7471: LD_VAR 0 3
7475: PPUSH
7476: LD_INT 1
7478: PPUSH
7479: CALL 10939 0 5
// end ;
7483: PPOPN 4
7485: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7486: LD_VAR 0 1
7490: PPUSH
7491: LD_VAR 0 2
7495: PPUSH
7496: LD_VAR 0 3
7500: PPUSH
7501: LD_OWVAR 2
7505: PPUSH
7506: CALL 11639 0 4
7510: PPOPN 3
7512: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7513: LD_INT 0
7515: PPUSH
7516: PPUSH
// for un in battle_flags_id do
7517: LD_ADDR_VAR 0 2
7521: PUSH
7522: LD_EXP 29
7526: PUSH
7527: FOR_IN
7528: IFFALSE 7603
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7530: LD_VAR 0 2
7534: PPUSH
7535: LD_INT 1
7537: PUSH
7538: LD_LOC 17
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 2
7549: PUSH
7550: LD_LOC 17
7554: PUSH
7555: LD_INT 2
7557: DIV
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 3
7565: PUSH
7566: LD_LOC 17
7570: PUSH
7571: LD_INT 5
7573: DIV
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 20
7581: PUSH
7582: LD_LOC 17
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: PPUSH
7597: CALL_OW 423
7601: GO 7527
7603: POP
7604: POP
// end ;
7605: LD_VAR 0 1
7609: RET
// every 1 do var un ;
7610: GO 7612
7612: DISABLE
7613: LD_INT 0
7615: PPUSH
// begin if not def_morale_flags then
7616: LD_EXP 42
7620: NOT
7621: IFFALSE 7625
// exit ;
7623: GO 7702
// if not morale_decreasing_time then
7625: LD_EXP 8
7629: NOT
7630: IFFALSE 7634
// exit ;
7632: GO 7702
// strength = 100 ;
7634: LD_ADDR_LOC 17
7638: PUSH
7639: LD_INT 100
7641: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7642: LD_EXP 8
7646: PPUSH
7647: CALL_OW 67
// strength := strength - 1 ;
7651: LD_ADDR_LOC 17
7655: PUSH
7656: LD_LOC 17
7660: PUSH
7661: LD_INT 1
7663: MINUS
7664: ST_TO_ADDR
// Update_Flags ;
7665: CALL 7513 0 0
// until not strength ;
7669: LD_LOC 17
7673: NOT
7674: IFFALSE 7642
// for un in battle_flags_id do
7676: LD_ADDR_VAR 0 1
7680: PUSH
7681: LD_EXP 29
7685: PUSH
7686: FOR_IN
7687: IFFALSE 7700
// KillBattleFlag ( un ) ;
7689: LD_VAR 0 1
7693: PPUSH
7694: CALL_OW 419
7698: GO 7686
7700: POP
7701: POP
// end ; end_of_file
7702: PPOPN 1
7704: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
7705: LD_INT 0
7707: PPUSH
7708: PPUSH
7709: PPUSH
// enable ( 600 ) ;
7710: LD_INT 600
7712: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
7713: LD_ADDR_VAR 0 2
7717: PUSH
7718: DOUBLE
7719: LD_INT 1
7721: DEC
7722: ST_TO_ADDR
7723: LD_EXP 31
7727: PUSH
7728: FOR_TO
7729: IFFALSE 7884
// if Position_Sides [ i ] then
7731: LD_EXP 21
7735: PUSH
7736: LD_VAR 0 2
7740: ARRAY
7741: IFFALSE 7882
// for j := 1 to 8 do
7743: LD_ADDR_VAR 0 3
7747: PUSH
7748: DOUBLE
7749: LD_INT 1
7751: DEC
7752: ST_TO_ADDR
7753: LD_INT 8
7755: PUSH
7756: FOR_TO
7757: IFFALSE 7880
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
7759: LD_EXP 18
7763: PUSH
7764: LD_VAR 0 3
7768: ARRAY
7769: PUSH
7770: LD_EXP 15
7774: PUSH
7775: LD_EXP 21
7779: PUSH
7780: LD_VAR 0 2
7784: ARRAY
7785: ARRAY
7786: PUSH
7787: LD_EXP 15
7791: PUSH
7792: LD_VAR 0 3
7796: ARRAY
7797: NONEQUAL
7798: PUSH
7799: LD_EXP 20
7803: NOT
7804: PUSH
7805: LD_EXP 21
7809: PUSH
7810: LD_VAR 0 2
7814: ARRAY
7815: PUSH
7816: LD_VAR 0 3
7820: NONEQUAL
7821: AND
7822: OR
7823: AND
7824: IFFALSE 7848
// HideArea ( j , BuildUpAreas [ i ] ) else
7826: LD_VAR 0 3
7830: PPUSH
7831: LD_EXP 31
7835: PUSH
7836: LD_VAR 0 2
7840: ARRAY
7841: PPUSH
7842: CALL_OW 333
7846: GO 7878
// if ( j = your_side ) then
7848: LD_VAR 0 3
7852: PUSH
7853: LD_OWVAR 2
7857: EQUAL
7858: IFFALSE 7878
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
7860: LD_EXP 31
7864: PUSH
7865: LD_VAR 0 2
7869: ARRAY
7870: PPUSH
7871: LD_INT 5
7873: PPUSH
7874: CALL_OW 424
7878: GO 7756
7880: POP
7881: POP
7882: GO 7728
7884: POP
7885: POP
// end ;
7886: LD_VAR 0 1
7890: RET
// export function EndBuildUp ; var i , j ; begin
7891: LD_INT 0
7893: PPUSH
7894: PPUSH
7895: PPUSH
// disable ( 600 ) ;
7896: LD_INT 600
7898: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
7899: LD_ADDR_VAR 0 2
7903: PUSH
7904: DOUBLE
7905: LD_INT 1
7907: DEC
7908: ST_TO_ADDR
7909: LD_EXP 31
7913: PUSH
7914: FOR_TO
7915: IFFALSE 8070
// if Position_Sides [ i ] then
7917: LD_EXP 21
7921: PUSH
7922: LD_VAR 0 2
7926: ARRAY
7927: IFFALSE 8068
// for j := 1 to 8 do
7929: LD_ADDR_VAR 0 3
7933: PUSH
7934: DOUBLE
7935: LD_INT 1
7937: DEC
7938: ST_TO_ADDR
7939: LD_INT 8
7941: PUSH
7942: FOR_TO
7943: IFFALSE 8066
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
7945: LD_EXP 18
7949: PUSH
7950: LD_VAR 0 3
7954: ARRAY
7955: PUSH
7956: LD_EXP 15
7960: PUSH
7961: LD_EXP 21
7965: PUSH
7966: LD_VAR 0 2
7970: ARRAY
7971: ARRAY
7972: PUSH
7973: LD_EXP 15
7977: PUSH
7978: LD_VAR 0 3
7982: ARRAY
7983: NONEQUAL
7984: PUSH
7985: LD_EXP 20
7989: NOT
7990: PUSH
7991: LD_EXP 21
7995: PUSH
7996: LD_VAR 0 2
8000: ARRAY
8001: PUSH
8002: LD_VAR 0 3
8006: NONEQUAL
8007: AND
8008: OR
8009: AND
8010: IFFALSE 8034
// ShowArea ( j , BuildUpAreas [ i ] ) else
8012: LD_VAR 0 3
8016: PPUSH
8017: LD_EXP 31
8021: PUSH
8022: LD_VAR 0 2
8026: ARRAY
8027: PPUSH
8028: CALL_OW 334
8032: GO 8064
// if ( j = your_side ) then
8034: LD_VAR 0 3
8038: PUSH
8039: LD_OWVAR 2
8043: EQUAL
8044: IFFALSE 8064
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
8046: LD_EXP 31
8050: PUSH
8051: LD_VAR 0 2
8055: ARRAY
8056: PPUSH
8057: LD_INT 0
8059: PPUSH
8060: CALL_OW 424
8064: GO 7942
8066: POP
8067: POP
8068: GO 7914
8070: POP
8071: POP
// end ;
8072: LD_VAR 0 1
8076: RET
// every 5 marked 600 do var i , un ;
8077: GO 8079
8079: DISABLE
8080: LD_INT 0
8082: PPUSH
8083: PPUSH
// begin for i := 1 to BuildUpAreas do
8084: LD_ADDR_VAR 0 1
8088: PUSH
8089: DOUBLE
8090: LD_INT 1
8092: DEC
8093: ST_TO_ADDR
8094: LD_EXP 31
8098: PUSH
8099: FOR_TO
8100: IFFALSE 8255
// if Position_Sides [ i ] then
8102: LD_EXP 21
8106: PUSH
8107: LD_VAR 0 1
8111: ARRAY
8112: IFFALSE 8253
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8114: LD_ADDR_VAR 0 2
8118: PUSH
8119: LD_EXP 31
8123: PUSH
8124: LD_VAR 0 1
8128: ARRAY
8129: PPUSH
8130: LD_INT 2
8132: PUSH
8133: LD_INT 21
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: LD_INT 21
8145: PUSH
8146: LD_INT 2
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 22
8160: PUSH
8161: LD_OWVAR 2
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PPUSH
8174: CALL_OW 70
8178: PUSH
8179: FOR_IN
8180: IFFALSE 8251
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
8182: LD_EXP 15
8186: PUSH
8187: LD_EXP 21
8191: PUSH
8192: LD_VAR 0 1
8196: ARRAY
8197: ARRAY
8198: PUSH
8199: LD_EXP 15
8203: PUSH
8204: LD_OWVAR 2
8208: ARRAY
8209: NONEQUAL
8210: PUSH
8211: LD_EXP 20
8215: NOT
8216: PUSH
8217: LD_EXP 21
8221: PUSH
8222: LD_VAR 0 1
8226: ARRAY
8227: PUSH
8228: LD_OWVAR 2
8232: NONEQUAL
8233: AND
8234: OR
8235: IFFALSE 8249
// ComMoveToArea ( un , BuildUpEscape ) ;
8237: LD_VAR 0 2
8241: PPUSH
8242: LD_INT 17
8244: PPUSH
8245: CALL_OW 113
8249: GO 8179
8251: POP
8252: POP
8253: GO 8099
8255: POP
8256: POP
// enable ;
8257: ENABLE
// end ;
8258: PPOPN 2
8260: END
// every 5 5$00 do
8261: GO 8263
8263: DISABLE
// if ( def_builduptime = 1 ) then
8264: LD_EXP 47
8268: PUSH
8269: LD_INT 1
8271: EQUAL
8272: IFFALSE 8278
// EndBuildUp ;
8274: CALL 7891 0 0
8278: END
// every 10 10$00 do
8279: GO 8281
8281: DISABLE
// if ( def_builduptime = 2 ) then
8282: LD_EXP 47
8286: PUSH
8287: LD_INT 2
8289: EQUAL
8290: IFFALSE 8296
// EndBuildUp ;
8292: CALL 7891 0 0
8296: END
// every 15 15$00 do
8297: GO 8299
8299: DISABLE
// if ( def_builduptime = 3 ) then
8300: LD_EXP 47
8304: PUSH
8305: LD_INT 3
8307: EQUAL
8308: IFFALSE 8314
// EndBuildUp ; end_of_file
8310: CALL 7891 0 0
8314: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
8315: LD_INT 0
8317: PPUSH
8318: PPUSH
// if ( not IAmSpec ) then
8319: CALL_OW 531
8323: NOT
8324: IFFALSE 8340
// Result := Limits_Info ^  ;
8326: LD_ADDR_VAR 0 1
8330: PUSH
8331: LD_LOC 29
8335: PUSH
8336: LD_STRING 
8338: ADD
8339: ST_TO_ADDR
// for i := 1 to 8 do
8340: LD_ADDR_VAR 0 2
8344: PUSH
8345: DOUBLE
8346: LD_INT 1
8348: DEC
8349: ST_TO_ADDR
8350: LD_INT 8
8352: PUSH
8353: FOR_TO
8354: IFFALSE 8399
// if Cheaters [ i ] then
8356: LD_LOC 30
8360: PUSH
8361: LD_VAR 0 2
8365: ARRAY
8366: IFFALSE 8397
// Result := Result ^ [ #Cheater , i , i ] ;
8368: LD_ADDR_VAR 0 1
8372: PUSH
8373: LD_VAR 0 1
8377: PUSH
8378: LD_STRING #Cheater
8380: PUSH
8381: LD_VAR 0 2
8385: PUSH
8386: LD_VAR 0 2
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: LIST
8395: ADD
8396: ST_TO_ADDR
8397: GO 8353
8399: POP
8400: POP
// end ;
8401: LD_VAR 0 1
8405: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
8406: LD_INT 0
8408: PPUSH
8409: PPUSH
8410: PPUSH
8411: PPUSH
8412: PPUSH
// case Game_Type of 10 :
8413: LD_EXP 32
8417: PUSH
8418: LD_INT 10
8420: DOUBLE
8421: EQUAL
8422: IFTRUE 8426
8424: GO 8437
8426: POP
// def_game_rules := 1 ; 11 :
8427: LD_ADDR_EXP 33
8431: PUSH
8432: LD_INT 1
8434: ST_TO_ADDR
8435: GO 8457
8437: LD_INT 11
8439: DOUBLE
8440: EQUAL
8441: IFTRUE 8445
8443: GO 8456
8445: POP
// def_game_rules := 3 ; end ;
8446: LD_ADDR_EXP 33
8450: PUSH
8451: LD_INT 3
8453: ST_TO_ADDR
8454: GO 8457
8456: POP
// case def_game_rules of 0 :
8457: LD_EXP 33
8461: PUSH
8462: LD_INT 0
8464: DOUBLE
8465: EQUAL
8466: IFTRUE 8470
8468: GO 8475
8470: POP
// exit ; 1 :
8471: GO 10533
8473: GO 10433
8475: LD_INT 1
8477: DOUBLE
8478: EQUAL
8479: IFTRUE 8483
8481: GO 8699
8483: POP
// begin def_base_level := 2 ;
8484: LD_ADDR_EXP 34
8488: PUSH
8489: LD_INT 2
8491: ST_TO_ADDR
// def_amount_of_people := 2 ;
8492: LD_ADDR_EXP 35
8496: PUSH
8497: LD_INT 2
8499: ST_TO_ADDR
// def_skill_level := 1 ;
8500: LD_ADDR_EXP 36
8504: PUSH
8505: LD_INT 1
8507: ST_TO_ADDR
// def_starting_resources := 2 ;
8508: LD_ADDR_EXP 37
8512: PUSH
8513: LD_INT 2
8515: ST_TO_ADDR
// def_shipments_density := 1 ;
8516: LD_ADDR_EXP 38
8520: PUSH
8521: LD_INT 1
8523: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8524: LD_ADDR_EXP 39
8528: PUSH
8529: LD_INT 0
8531: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8532: LD_ADDR_EXP 40
8536: PUSH
8537: LD_INT 1
8539: ST_TO_ADDR
// def_shared_vision := 1 ;
8540: LD_ADDR_EXP 41
8544: PUSH
8545: LD_INT 1
8547: ST_TO_ADDR
// def_morale_flags := 3 ;
8548: LD_ADDR_EXP 42
8552: PUSH
8553: LD_INT 3
8555: ST_TO_ADDR
// def_siberite_detection := 1 ;
8556: LD_ADDR_EXP 43
8560: PUSH
8561: LD_INT 1
8563: ST_TO_ADDR
// def_people_respawning := 1 ;
8564: LD_ADDR_EXP 44
8568: PUSH
8569: LD_INT 1
8571: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8572: LD_ADDR_EXP 45
8576: PUSH
8577: LD_INT 1
8579: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8580: LD_ADDR_EXP 46
8584: PUSH
8585: LD_INT 0
8587: ST_TO_ADDR
// def_builduptime := 2 ;
8588: LD_ADDR_EXP 47
8592: PUSH
8593: LD_INT 2
8595: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
8596: LD_ADDR_VAR 0 2
8600: PUSH
8601: EMPTY
8602: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8603: LD_ADDR_VAR 0 3
8607: PUSH
8608: EMPTY
8609: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8610: LD_ADDR_LOC 24
8614: PUSH
8615: EMPTY
8616: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8617: LD_ADDR_LOC 25
8621: PUSH
8622: EMPTY
8623: ST_TO_ADDR
// Banned_Controls := [ ] ;
8624: LD_ADDR_LOC 26
8628: PUSH
8629: EMPTY
8630: ST_TO_ADDR
// Banned_Engines := [ ] ;
8631: LD_ADDR_LOC 27
8635: PUSH
8636: EMPTY
8637: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8638: LD_ADDR_LOC 22
8642: PUSH
8643: LD_INT 37
8645: PUSH
8646: EMPTY
8647: LIST
8648: PUSH
8649: LD_INT 4
8651: PUSH
8652: LD_INT 5
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 31
8661: PUSH
8662: LD_INT 32
8664: PUSH
8665: LD_INT 33
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8678: LD_ADDR_LOC 23
8682: PUSH
8683: LD_INT 2
8685: PUSH
8686: LD_INT 2
8688: PUSH
8689: LD_INT 4
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: ST_TO_ADDR
// end ; 2 :
8697: GO 10433
8699: LD_INT 2
8701: DOUBLE
8702: EQUAL
8703: IFTRUE 8707
8705: GO 8916
8707: POP
// begin def_base_level := 1 ;
8708: LD_ADDR_EXP 34
8712: PUSH
8713: LD_INT 1
8715: ST_TO_ADDR
// def_amount_of_people := 2 ;
8716: LD_ADDR_EXP 35
8720: PUSH
8721: LD_INT 2
8723: ST_TO_ADDR
// def_skill_level := 3 ;
8724: LD_ADDR_EXP 36
8728: PUSH
8729: LD_INT 3
8731: ST_TO_ADDR
// def_starting_resources := 3 ;
8732: LD_ADDR_EXP 37
8736: PUSH
8737: LD_INT 3
8739: ST_TO_ADDR
// def_shipments_density := 2 ;
8740: LD_ADDR_EXP 38
8744: PUSH
8745: LD_INT 2
8747: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8748: LD_ADDR_EXP 39
8752: PUSH
8753: LD_INT 1
8755: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8756: LD_ADDR_EXP 40
8760: PUSH
8761: LD_INT 2
8763: ST_TO_ADDR
// def_shared_vision := 1 ;
8764: LD_ADDR_EXP 41
8768: PUSH
8769: LD_INT 1
8771: ST_TO_ADDR
// def_morale_flags := 0 ;
8772: LD_ADDR_EXP 42
8776: PUSH
8777: LD_INT 0
8779: ST_TO_ADDR
// def_siberite_detection := 1 ;
8780: LD_ADDR_EXP 43
8784: PUSH
8785: LD_INT 1
8787: ST_TO_ADDR
// def_people_respawning := 0 ;
8788: LD_ADDR_EXP 44
8792: PUSH
8793: LD_INT 0
8795: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8796: LD_ADDR_EXP 45
8800: PUSH
8801: LD_INT 0
8803: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8804: LD_ADDR_EXP 46
8808: PUSH
8809: LD_INT 0
8811: ST_TO_ADDR
// def_builduptime := 2 ;
8812: LD_ADDR_EXP 47
8816: PUSH
8817: LD_INT 2
8819: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8820: LD_ADDR_VAR 0 2
8824: PUSH
8825: LD_INT 1
8827: PUSH
8828: EMPTY
8829: LIST
8830: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8831: LD_ADDR_VAR 0 3
8835: PUSH
8836: EMPTY
8837: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8838: LD_ADDR_LOC 24
8842: PUSH
8843: EMPTY
8844: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8845: LD_ADDR_LOC 25
8849: PUSH
8850: EMPTY
8851: ST_TO_ADDR
// Banned_Controls := [ ] ;
8852: LD_ADDR_LOC 26
8856: PUSH
8857: EMPTY
8858: ST_TO_ADDR
// Banned_Engines := [ ] ;
8859: LD_ADDR_LOC 27
8863: PUSH
8864: EMPTY
8865: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8866: LD_ADDR_LOC 22
8870: PUSH
8871: LD_INT 4
8873: PUSH
8874: LD_INT 5
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 31
8883: PUSH
8884: LD_INT 32
8886: PUSH
8887: LD_INT 33
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: LIST
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8899: LD_ADDR_LOC 23
8903: PUSH
8904: LD_INT 1
8906: PUSH
8907: LD_INT 2
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: ST_TO_ADDR
// end ; 3 :
8914: GO 10433
8916: LD_INT 3
8918: DOUBLE
8919: EQUAL
8920: IFTRUE 8924
8922: GO 9167
8924: POP
// begin def_base_level := 1 ;
8925: LD_ADDR_EXP 34
8929: PUSH
8930: LD_INT 1
8932: ST_TO_ADDR
// def_amount_of_people := 2 ;
8933: LD_ADDR_EXP 35
8937: PUSH
8938: LD_INT 2
8940: ST_TO_ADDR
// def_skill_level := 3 ;
8941: LD_ADDR_EXP 36
8945: PUSH
8946: LD_INT 3
8948: ST_TO_ADDR
// def_starting_resources := 3 ;
8949: LD_ADDR_EXP 37
8953: PUSH
8954: LD_INT 3
8956: ST_TO_ADDR
// def_shipments_density := 1 ;
8957: LD_ADDR_EXP 38
8961: PUSH
8962: LD_INT 1
8964: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8965: LD_ADDR_EXP 39
8969: PUSH
8970: LD_INT 0
8972: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8973: LD_ADDR_EXP 40
8977: PUSH
8978: LD_INT 1
8980: ST_TO_ADDR
// def_shared_vision := 1 ;
8981: LD_ADDR_EXP 41
8985: PUSH
8986: LD_INT 1
8988: ST_TO_ADDR
// def_morale_flags := 0 ;
8989: LD_ADDR_EXP 42
8993: PUSH
8994: LD_INT 0
8996: ST_TO_ADDR
// def_siberite_detection := 1 ;
8997: LD_ADDR_EXP 43
9001: PUSH
9002: LD_INT 1
9004: ST_TO_ADDR
// def_people_respawning := 0 ;
9005: LD_ADDR_EXP 44
9009: PUSH
9010: LD_INT 0
9012: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9013: LD_ADDR_EXP 45
9017: PUSH
9018: LD_INT 2
9020: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9021: LD_ADDR_EXP 46
9025: PUSH
9026: LD_INT 0
9028: ST_TO_ADDR
// def_builduptime := 1 ;
9029: LD_ADDR_EXP 47
9033: PUSH
9034: LD_INT 1
9036: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9037: LD_ADDR_VAR 0 2
9041: PUSH
9042: LD_INT 23
9044: PUSH
9045: EMPTY
9046: LIST
9047: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
9048: LD_ADDR_VAR 0 3
9052: PUSH
9053: LD_INT 2
9055: PUSH
9056: LD_INT 37
9058: PUSH
9059: LD_INT 32
9061: PUSH
9062: LD_INT 33
9064: PUSH
9065: LD_INT 36
9067: PUSH
9068: LD_INT 16
9070: PUSH
9071: LD_INT 23
9073: PUSH
9074: LD_INT 21
9076: PUSH
9077: LD_INT 18
9079: PUSH
9080: LD_INT 22
9082: PUSH
9083: LD_INT 20
9085: PUSH
9086: LD_INT 19
9088: PUSH
9089: LD_INT 25
9091: PUSH
9092: LD_INT 17
9094: PUSH
9095: LD_INT 24
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9115: LD_ADDR_LOC 24
9119: PUSH
9120: EMPTY
9121: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9122: LD_ADDR_LOC 25
9126: PUSH
9127: EMPTY
9128: ST_TO_ADDR
// Banned_Controls := [ ] ;
9129: LD_ADDR_LOC 26
9133: PUSH
9134: EMPTY
9135: ST_TO_ADDR
// Banned_Engines := [ ] ;
9136: LD_ADDR_LOC 27
9140: PUSH
9141: EMPTY
9142: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9143: LD_ADDR_LOC 22
9147: PUSH
9148: EMPTY
9149: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9150: LD_ADDR_LOC 23
9154: PUSH
9155: EMPTY
9156: ST_TO_ADDR
// No_Mechs := true ;
9157: LD_ADDR_EXP 48
9161: PUSH
9162: LD_INT 1
9164: ST_TO_ADDR
// end ; 4 :
9165: GO 10433
9167: LD_INT 4
9169: DOUBLE
9170: EQUAL
9171: IFTRUE 9175
9173: GO 9350
9175: POP
// begin def_base_level := 1 ;
9176: LD_ADDR_EXP 34
9180: PUSH
9181: LD_INT 1
9183: ST_TO_ADDR
// def_amount_of_people := 2 ;
9184: LD_ADDR_EXP 35
9188: PUSH
9189: LD_INT 2
9191: ST_TO_ADDR
// def_skill_level := 3 ;
9192: LD_ADDR_EXP 36
9196: PUSH
9197: LD_INT 3
9199: ST_TO_ADDR
// def_starting_resources := 3 ;
9200: LD_ADDR_EXP 37
9204: PUSH
9205: LD_INT 3
9207: ST_TO_ADDR
// def_shipments_density := 2 ;
9208: LD_ADDR_EXP 38
9212: PUSH
9213: LD_INT 2
9215: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9216: LD_ADDR_EXP 39
9220: PUSH
9221: LD_INT 1
9223: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9224: LD_ADDR_EXP 40
9228: PUSH
9229: LD_INT 2
9231: ST_TO_ADDR
// def_shared_vision := 1 ;
9232: LD_ADDR_EXP 41
9236: PUSH
9237: LD_INT 1
9239: ST_TO_ADDR
// def_morale_flags := 0 ;
9240: LD_ADDR_EXP 42
9244: PUSH
9245: LD_INT 0
9247: ST_TO_ADDR
// def_siberite_detection := 1 ;
9248: LD_ADDR_EXP 43
9252: PUSH
9253: LD_INT 1
9255: ST_TO_ADDR
// def_people_respawning := 0 ;
9256: LD_ADDR_EXP 44
9260: PUSH
9261: LD_INT 0
9263: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9264: LD_ADDR_EXP 45
9268: PUSH
9269: LD_INT 0
9271: ST_TO_ADDR
// def_siberite_bomb := 1 ;
9272: LD_ADDR_EXP 46
9276: PUSH
9277: LD_INT 1
9279: ST_TO_ADDR
// def_builduptime := 3 ;
9280: LD_ADDR_EXP 47
9284: PUSH
9285: LD_INT 3
9287: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9288: LD_ADDR_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: PUSH
9296: EMPTY
9297: LIST
9298: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9299: LD_ADDR_VAR 0 3
9303: PUSH
9304: EMPTY
9305: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9306: LD_ADDR_LOC 24
9310: PUSH
9311: EMPTY
9312: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9313: LD_ADDR_LOC 25
9317: PUSH
9318: EMPTY
9319: ST_TO_ADDR
// Banned_Controls := [ ] ;
9320: LD_ADDR_LOC 26
9324: PUSH
9325: EMPTY
9326: ST_TO_ADDR
// Banned_Engines := [ ] ;
9327: LD_ADDR_LOC 27
9331: PUSH
9332: EMPTY
9333: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9334: LD_ADDR_LOC 22
9338: PUSH
9339: EMPTY
9340: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9341: LD_ADDR_LOC 23
9345: PUSH
9346: EMPTY
9347: ST_TO_ADDR
// end ; 5 :
9348: GO 10433
9350: LD_INT 5
9352: DOUBLE
9353: EQUAL
9354: IFTRUE 9358
9356: GO 9607
9358: POP
// begin def_base_level := 0 ;
9359: LD_ADDR_EXP 34
9363: PUSH
9364: LD_INT 0
9366: ST_TO_ADDR
// def_amount_of_people := 0 ;
9367: LD_ADDR_EXP 35
9371: PUSH
9372: LD_INT 0
9374: ST_TO_ADDR
// def_skill_level := 0 ;
9375: LD_ADDR_EXP 36
9379: PUSH
9380: LD_INT 0
9382: ST_TO_ADDR
// def_starting_resources := 0 ;
9383: LD_ADDR_EXP 37
9387: PUSH
9388: LD_INT 0
9390: ST_TO_ADDR
// def_shipments_density := 0 ;
9391: LD_ADDR_EXP 38
9395: PUSH
9396: LD_INT 0
9398: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9399: LD_ADDR_EXP 39
9403: PUSH
9404: LD_INT 0
9406: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9407: LD_ADDR_EXP 40
9411: PUSH
9412: LD_INT 0
9414: ST_TO_ADDR
// def_shared_vision := 1 ;
9415: LD_ADDR_EXP 41
9419: PUSH
9420: LD_INT 1
9422: ST_TO_ADDR
// def_morale_flags := 0 ;
9423: LD_ADDR_EXP 42
9427: PUSH
9428: LD_INT 0
9430: ST_TO_ADDR
// def_siberite_detection := 0 ;
9431: LD_ADDR_EXP 43
9435: PUSH
9436: LD_INT 0
9438: ST_TO_ADDR
// def_people_respawning := 1 ;
9439: LD_ADDR_EXP 44
9443: PUSH
9444: LD_INT 1
9446: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9447: LD_ADDR_EXP 45
9451: PUSH
9452: LD_INT 1
9454: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9455: LD_ADDR_EXP 46
9459: PUSH
9460: LD_INT 0
9462: ST_TO_ADDR
// def_builduptime := 0 ;
9463: LD_ADDR_EXP 47
9467: PUSH
9468: LD_INT 0
9470: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
9471: LD_ADDR_VAR 0 2
9475: PUSH
9476: LD_INT 10
9478: PUSH
9479: LD_INT 3
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
9486: LD_ADDR_VAR 0 3
9490: PUSH
9491: LD_INT 12
9493: PUSH
9494: LD_INT 11
9496: PUSH
9497: LD_INT 14
9499: PUSH
9500: LD_INT 13
9502: PUSH
9503: LD_INT 5
9505: PUSH
9506: LD_INT 24
9508: PUSH
9509: LD_INT 21
9511: PUSH
9512: LD_INT 33
9514: PUSH
9515: LD_INT 36
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
9529: LD_ADDR_LOC 24
9533: PUSH
9534: LD_INT 31
9536: PUSH
9537: EMPTY
9538: LIST
9539: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9540: LD_ADDR_LOC 25
9544: PUSH
9545: EMPTY
9546: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
9547: LD_ADDR_LOC 26
9551: PUSH
9552: LD_INT 2
9554: PUSH
9555: EMPTY
9556: LIST
9557: ST_TO_ADDR
// Banned_Engines := [ ] ;
9558: LD_ADDR_LOC 27
9562: PUSH
9563: EMPTY
9564: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
9565: LD_ADDR_LOC 22
9569: PUSH
9570: LD_INT 4
9572: PUSH
9573: EMPTY
9574: LIST
9575: PUSH
9576: LD_INT 31
9578: PUSH
9579: LD_INT 32
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
9590: LD_ADDR_LOC 23
9594: PUSH
9595: LD_INT 1
9597: PUSH
9598: LD_INT 1
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: ST_TO_ADDR
// end ; 6 :
9605: GO 10433
9607: LD_INT 6
9609: DOUBLE
9610: EQUAL
9611: IFTRUE 9615
9613: GO 9818
9615: POP
// begin def_base_level := 1 ;
9616: LD_ADDR_EXP 34
9620: PUSH
9621: LD_INT 1
9623: ST_TO_ADDR
// def_amount_of_people := 2 ;
9624: LD_ADDR_EXP 35
9628: PUSH
9629: LD_INT 2
9631: ST_TO_ADDR
// def_skill_level := 3 ;
9632: LD_ADDR_EXP 36
9636: PUSH
9637: LD_INT 3
9639: ST_TO_ADDR
// def_starting_resources := 3 ;
9640: LD_ADDR_EXP 37
9644: PUSH
9645: LD_INT 3
9647: ST_TO_ADDR
// def_shipments_density := 1 ;
9648: LD_ADDR_EXP 38
9652: PUSH
9653: LD_INT 1
9655: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9656: LD_ADDR_EXP 39
9660: PUSH
9661: LD_INT 0
9663: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9664: LD_ADDR_EXP 40
9668: PUSH
9669: LD_INT 1
9671: ST_TO_ADDR
// def_shared_vision := 1 ;
9672: LD_ADDR_EXP 41
9676: PUSH
9677: LD_INT 1
9679: ST_TO_ADDR
// def_morale_flags := 0 ;
9680: LD_ADDR_EXP 42
9684: PUSH
9685: LD_INT 0
9687: ST_TO_ADDR
// def_siberite_detection := 1 ;
9688: LD_ADDR_EXP 43
9692: PUSH
9693: LD_INT 1
9695: ST_TO_ADDR
// def_people_respawning := 2 ;
9696: LD_ADDR_EXP 44
9700: PUSH
9701: LD_INT 2
9703: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9704: LD_ADDR_EXP 45
9708: PUSH
9709: LD_INT 1
9711: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9712: LD_ADDR_EXP 46
9716: PUSH
9717: LD_INT 0
9719: ST_TO_ADDR
// def_builduptime := 1 ;
9720: LD_ADDR_EXP 47
9724: PUSH
9725: LD_INT 1
9727: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9728: LD_ADDR_VAR 0 2
9732: PUSH
9733: LD_INT 23
9735: PUSH
9736: EMPTY
9737: LIST
9738: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9739: LD_ADDR_VAR 0 3
9743: PUSH
9744: LD_INT 2
9746: PUSH
9747: LD_INT 37
9749: PUSH
9750: LD_INT 31
9752: PUSH
9753: LD_INT 32
9755: PUSH
9756: LD_INT 33
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9766: LD_ADDR_LOC 24
9770: PUSH
9771: EMPTY
9772: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9773: LD_ADDR_LOC 25
9777: PUSH
9778: EMPTY
9779: ST_TO_ADDR
// Banned_Controls := [ ] ;
9780: LD_ADDR_LOC 26
9784: PUSH
9785: EMPTY
9786: ST_TO_ADDR
// Banned_Engines := [ ] ;
9787: LD_ADDR_LOC 27
9791: PUSH
9792: EMPTY
9793: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9794: LD_ADDR_LOC 22
9798: PUSH
9799: EMPTY
9800: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9801: LD_ADDR_LOC 23
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// No_Mechs := true ;
9808: LD_ADDR_EXP 48
9812: PUSH
9813: LD_INT 1
9815: ST_TO_ADDR
// end ; 7 :
9816: GO 10433
9818: LD_INT 7
9820: DOUBLE
9821: EQUAL
9822: IFTRUE 9826
9824: GO 10024
9826: POP
// begin def_base_level := 1 ;
9827: LD_ADDR_EXP 34
9831: PUSH
9832: LD_INT 1
9834: ST_TO_ADDR
// def_amount_of_people := 2 ;
9835: LD_ADDR_EXP 35
9839: PUSH
9840: LD_INT 2
9842: ST_TO_ADDR
// def_skill_level := 3 ;
9843: LD_ADDR_EXP 36
9847: PUSH
9848: LD_INT 3
9850: ST_TO_ADDR
// def_starting_resources := 3 ;
9851: LD_ADDR_EXP 37
9855: PUSH
9856: LD_INT 3
9858: ST_TO_ADDR
// def_shipments_density := 1 ;
9859: LD_ADDR_EXP 38
9863: PUSH
9864: LD_INT 1
9866: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9867: LD_ADDR_EXP 39
9871: PUSH
9872: LD_INT 1
9874: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9875: LD_ADDR_EXP 40
9879: PUSH
9880: LD_INT 2
9882: ST_TO_ADDR
// def_shared_vision := 1 ;
9883: LD_ADDR_EXP 41
9887: PUSH
9888: LD_INT 1
9890: ST_TO_ADDR
// def_morale_flags := 0 ;
9891: LD_ADDR_EXP 42
9895: PUSH
9896: LD_INT 0
9898: ST_TO_ADDR
// def_siberite_detection := 1 ;
9899: LD_ADDR_EXP 43
9903: PUSH
9904: LD_INT 1
9906: ST_TO_ADDR
// def_people_respawning := 0 ;
9907: LD_ADDR_EXP 44
9911: PUSH
9912: LD_INT 0
9914: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9915: LD_ADDR_EXP 45
9919: PUSH
9920: LD_INT 1
9922: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9923: LD_ADDR_EXP 46
9927: PUSH
9928: LD_INT 0
9930: ST_TO_ADDR
// def_builduptime := 3 ;
9931: LD_ADDR_EXP 47
9935: PUSH
9936: LD_INT 3
9938: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9939: LD_ADDR_VAR 0 2
9943: PUSH
9944: LD_INT 23
9946: PUSH
9947: EMPTY
9948: LIST
9949: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9950: LD_ADDR_VAR 0 3
9954: PUSH
9955: LD_INT 37
9957: PUSH
9958: EMPTY
9959: LIST
9960: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9961: LD_ADDR_LOC 24
9965: PUSH
9966: EMPTY
9967: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9968: LD_ADDR_LOC 25
9972: PUSH
9973: EMPTY
9974: ST_TO_ADDR
// Banned_Controls := [ ] ;
9975: LD_ADDR_LOC 26
9979: PUSH
9980: EMPTY
9981: ST_TO_ADDR
// Banned_Engines := [ ] ;
9982: LD_ADDR_LOC 27
9986: PUSH
9987: EMPTY
9988: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9989: LD_ADDR_LOC 22
9993: PUSH
9994: LD_INT 31
9996: PUSH
9997: LD_INT 32
9999: PUSH
10000: LD_INT 33
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: LIST
10007: PUSH
10008: EMPTY
10009: LIST
10010: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
10011: LD_ADDR_LOC 23
10015: PUSH
10016: LD_INT 10
10018: PUSH
10019: EMPTY
10020: LIST
10021: ST_TO_ADDR
// end ; 8 :
10022: GO 10433
10024: LD_INT 8
10026: DOUBLE
10027: EQUAL
10028: IFTRUE 10032
10030: GO 10432
10032: POP
// begin def_base_level := 0 ;
10033: LD_ADDR_EXP 34
10037: PUSH
10038: LD_INT 0
10040: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
10041: LD_ADDR_EXP 35
10045: PUSH
10046: LD_INT 0
10048: PPUSH
10049: LD_INT 1
10051: PPUSH
10052: CALL_OW 12
10056: ST_TO_ADDR
// def_skill_level := 0 ;
10057: LD_ADDR_EXP 36
10061: PUSH
10062: LD_INT 0
10064: ST_TO_ADDR
// def_starting_resources := 2 ;
10065: LD_ADDR_EXP 37
10069: PUSH
10070: LD_INT 2
10072: ST_TO_ADDR
// def_shipments_density := 1 ;
10073: LD_ADDR_EXP 38
10077: PUSH
10078: LD_INT 1
10080: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10081: LD_ADDR_EXP 39
10085: PUSH
10086: LD_INT 0
10088: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10089: LD_ADDR_EXP 40
10093: PUSH
10094: LD_INT 0
10096: ST_TO_ADDR
// def_shared_vision := 1 ;
10097: LD_ADDR_EXP 41
10101: PUSH
10102: LD_INT 1
10104: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
10105: LD_ADDR_EXP 42
10109: PUSH
10110: LD_INT 0
10112: PPUSH
10113: LD_INT 2
10115: PPUSH
10116: CALL_OW 12
10120: ST_TO_ADDR
// def_siberite_detection := 0 ;
10121: LD_ADDR_EXP 43
10125: PUSH
10126: LD_INT 0
10128: ST_TO_ADDR
// def_people_respawning := 0 ;
10129: LD_ADDR_EXP 44
10133: PUSH
10134: LD_INT 0
10136: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10137: LD_ADDR_EXP 45
10141: PUSH
10142: LD_INT 2
10144: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10145: LD_ADDR_EXP 46
10149: PUSH
10150: LD_INT 0
10152: ST_TO_ADDR
// def_builduptime := 0 ;
10153: LD_ADDR_EXP 47
10157: PUSH
10158: LD_INT 0
10160: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
10161: LD_ADDR_VAR 0 2
10165: PUSH
10166: LD_INT 23
10168: PUSH
10169: LD_INT 20
10171: PUSH
10172: LD_INT 40
10174: PUSH
10175: LD_INT 47
10177: PUSH
10178: LD_INT 46
10180: PUSH
10181: LD_INT 39
10183: PUSH
10184: LD_INT 71
10186: PUSH
10187: LD_INT 34
10189: PUSH
10190: LD_INT 41
10192: PUSH
10193: LD_INT 44
10195: PUSH
10196: LD_INT 17
10198: PUSH
10199: LD_INT 16
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
10216: LD_ADDR_VAR 0 3
10220: PUSH
10221: LD_INT 37
10223: PUSH
10224: LD_INT 5
10226: PUSH
10227: LD_INT 13
10229: PUSH
10230: LD_INT 34
10232: PUSH
10233: LD_INT 12
10235: PUSH
10236: LD_INT 15
10238: PUSH
10239: LD_INT 11
10241: PUSH
10242: LD_INT 14
10244: PUSH
10245: LD_INT 29
10247: PUSH
10248: LD_INT 30
10250: PUSH
10251: LD_INT 28
10253: PUSH
10254: LD_INT 24
10256: PUSH
10257: LD_INT 25
10259: PUSH
10260: LD_INT 20
10262: PUSH
10263: LD_INT 21
10265: PUSH
10266: LD_INT 22
10268: PUSH
10269: LD_INT 36
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10291: LD_ADDR_LOC 24
10295: PUSH
10296: EMPTY
10297: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
10298: LD_ADDR_LOC 25
10302: PUSH
10303: LD_INT 14
10305: PUSH
10306: EMPTY
10307: LIST
10308: ST_TO_ADDR
// Banned_Controls := [ ] ;
10309: LD_ADDR_LOC 26
10313: PUSH
10314: EMPTY
10315: ST_TO_ADDR
// Banned_Engines := [ ] ;
10316: LD_ADDR_LOC 27
10320: PUSH
10321: EMPTY
10322: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
10323: LD_ADDR_LOC 22
10327: PUSH
10328: LD_INT 31
10330: PUSH
10331: LD_INT 32
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: LD_INT 4
10340: PUSH
10341: EMPTY
10342: LIST
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
10348: LD_ADDR_LOC 23
10352: PUSH
10353: LD_INT 2
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: ST_TO_ADDR
// for i := 1 to 8 do
10363: LD_ADDR_VAR 0 4
10367: PUSH
10368: DOUBLE
10369: LD_INT 1
10371: DEC
10372: ST_TO_ADDR
10373: LD_INT 8
10375: PUSH
10376: FOR_TO
10377: IFFALSE 10428
// if ( Side_Nations [ i ] = 3 ) then
10379: LD_EXP 19
10383: PUSH
10384: LD_VAR 0 4
10388: ARRAY
10389: PUSH
10390: LD_INT 3
10392: EQUAL
10393: IFFALSE 10426
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
10395: LD_ADDR_EXP 19
10399: PUSH
10400: LD_EXP 19
10404: PPUSH
10405: LD_VAR 0 4
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: LD_INT 2
10415: PPUSH
10416: CALL_OW 12
10420: PPUSH
10421: CALL_OW 1
10425: ST_TO_ADDR
10426: GO 10376
10428: POP
10429: POP
// end ; end ;
10430: GO 10433
10432: POP
// for i := 1 to 8 do
10433: LD_ADDR_VAR 0 4
10437: PUSH
10438: DOUBLE
10439: LD_INT 1
10441: DEC
10442: ST_TO_ADDR
10443: LD_INT 8
10445: PUSH
10446: FOR_TO
10447: IFFALSE 10531
// if Side_Positions [ i ] then
10449: LD_EXP 18
10453: PUSH
10454: LD_VAR 0 4
10458: ARRAY
10459: IFFALSE 10529
// begin for j in Unavailable_Techs do
10461: LD_ADDR_VAR 0 5
10465: PUSH
10466: LD_VAR 0 2
10470: PUSH
10471: FOR_IN
10472: IFFALSE 10493
// SetTech ( j , i , 0 ) ;
10474: LD_VAR 0 5
10478: PPUSH
10479: LD_VAR 0 4
10483: PPUSH
10484: LD_INT 0
10486: PPUSH
10487: CALL_OW 322
10491: GO 10471
10493: POP
10494: POP
// for j in Unavailable_Builds do
10495: LD_ADDR_VAR 0 5
10499: PUSH
10500: LD_VAR 0 3
10504: PUSH
10505: FOR_IN
10506: IFFALSE 10527
// SetRestrict ( j , i , 0 ) ;
10508: LD_VAR 0 5
10512: PPUSH
10513: LD_VAR 0 4
10517: PPUSH
10518: LD_INT 0
10520: PPUSH
10521: CALL_OW 324
10525: GO 10505
10527: POP
10528: POP
// end ;
10529: GO 10446
10531: POP
10532: POP
// end ;
10533: LD_VAR 0 1
10537: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
10538: LD_INT 0
10540: PPUSH
10541: PPUSH
10542: PPUSH
10543: PPUSH
10544: PPUSH
10545: PPUSH
10546: PPUSH
// for i := 1 to Restricted_Builds do
10547: LD_ADDR_VAR 0 2
10551: PUSH
10552: DOUBLE
10553: LD_INT 1
10555: DEC
10556: ST_TO_ADDR
10557: LD_LOC 22
10561: PUSH
10562: FOR_TO
10563: IFFALSE 10873
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
10565: LD_LOC 22
10569: PUSH
10570: LD_VAR 0 2
10574: ARRAY
10575: PUSH
10576: LD_INT 1
10578: ARRAY
10579: PUSH
10580: LD_INT 31
10582: DOUBLE
10583: EQUAL
10584: IFTRUE 10600
10586: LD_INT 32
10588: DOUBLE
10589: EQUAL
10590: IFTRUE 10600
10592: LD_INT 33
10594: DOUBLE
10595: EQUAL
10596: IFTRUE 10600
10598: GO 10611
10600: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
10601: LD_ADDR_VAR 0 6
10605: PUSH
10606: LD_STRING #Turrets
10608: ST_TO_ADDR
10609: GO 10656
10611: LD_INT 4
10613: DOUBLE
10614: EQUAL
10615: IFTRUE 10625
10617: LD_INT 5
10619: DOUBLE
10620: EQUAL
10621: IFTRUE 10625
10623: GO 10636
10625: POP
// btype := #Armouries ; b_Behemoth :
10626: LD_ADDR_VAR 0 6
10630: PUSH
10631: LD_STRING #Armouries
10633: ST_TO_ADDR
10634: GO 10656
10636: LD_INT 37
10638: DOUBLE
10639: EQUAL
10640: IFTRUE 10644
10642: GO 10655
10644: POP
// btype := #Behemoths ; end ;
10645: LD_ADDR_VAR 0 6
10649: PUSH
10650: LD_STRING #Behemoths
10652: ST_TO_ADDR
10653: GO 10656
10655: POP
// list := [ ] ;
10656: LD_ADDR_VAR 0 7
10660: PUSH
10661: EMPTY
10662: ST_TO_ADDR
// for j := 1 to 8 do
10663: LD_ADDR_VAR 0 3
10667: PUSH
10668: DOUBLE
10669: LD_INT 1
10671: DEC
10672: ST_TO_ADDR
10673: LD_INT 8
10675: PUSH
10676: FOR_TO
10677: IFFALSE 10770
// if Side_Positions [ j ] then
10679: LD_EXP 18
10683: PUSH
10684: LD_VAR 0 3
10688: ARRAY
10689: IFFALSE 10768
// begin amount := 0 ;
10691: LD_ADDR_VAR 0 5
10695: PUSH
10696: LD_INT 0
10698: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10699: LD_ADDR_VAR 0 4
10703: PUSH
10704: LD_LOC 22
10708: PUSH
10709: LD_VAR 0 2
10713: ARRAY
10714: PUSH
10715: FOR_IN
10716: IFFALSE 10764
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10718: LD_ADDR_VAR 0 5
10722: PUSH
10723: LD_VAR 0 5
10727: PUSH
10728: LD_INT 22
10730: PUSH
10731: LD_VAR 0 3
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 30
10742: PUSH
10743: LD_VAR 0 4
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PPUSH
10756: CALL_OW 69
10760: PLUS
10761: ST_TO_ADDR
10762: GO 10715
10764: POP
10765: POP
// break ;
10766: GO 10770
// end ;
10768: GO 10676
10770: POP
10771: POP
// list := [ ] ;
10772: LD_ADDR_VAR 0 7
10776: PUSH
10777: EMPTY
10778: ST_TO_ADDR
// for j := 1 to 8 do
10779: LD_ADDR_VAR 0 3
10783: PUSH
10784: DOUBLE
10785: LD_INT 1
10787: DEC
10788: ST_TO_ADDR
10789: LD_INT 8
10791: PUSH
10792: FOR_TO
10793: IFFALSE 10813
// list := list ^ amount ;
10795: LD_ADDR_VAR 0 7
10799: PUSH
10800: LD_VAR 0 7
10804: PUSH
10805: LD_VAR 0 5
10809: ADD
10810: ST_TO_ADDR
10811: GO 10792
10813: POP
10814: POP
// Already_Built := Already_Built ^ [ list ] ;
10815: LD_ADDR_LOC 28
10819: PUSH
10820: LD_LOC 28
10824: PUSH
10825: LD_VAR 0 7
10829: PUSH
10830: EMPTY
10831: LIST
10832: ADD
10833: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10834: LD_ADDR_LOC 29
10838: PUSH
10839: LD_LOC 29
10843: PUSH
10844: LD_VAR 0 6
10848: PUSH
10849: LD_VAR 0 5
10853: PUSH
10854: LD_LOC 23
10858: PUSH
10859: LD_VAR 0 2
10863: ARRAY
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: LIST
10869: ADD
10870: ST_TO_ADDR
// end ;
10871: GO 10562
10873: POP
10874: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10875: LD_ADDR_LOC 30
10879: PUSH
10880: LD_INT 0
10882: PUSH
10883: LD_INT 0
10885: PUSH
10886: LD_INT 0
10888: PUSH
10889: LD_INT 0
10891: PUSH
10892: LD_INT 0
10894: PUSH
10895: LD_INT 0
10897: PUSH
10898: LD_INT 0
10900: PUSH
10901: LD_INT 0
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: ST_TO_ADDR
// if Limits_Info then
10914: LD_LOC 29
10918: IFFALSE 10934
// Limits_Info := #Limits ^ Limits_Info ;
10920: LD_ADDR_LOC 29
10924: PUSH
10925: LD_STRING #Limits
10927: PUSH
10928: LD_LOC 29
10932: ADD
10933: ST_TO_ADDR
// end ;
10934: LD_VAR 0 1
10938: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10939: LD_INT 0
10941: PPUSH
10942: PPUSH
10943: PPUSH
10944: PPUSH
// for i := 1 to Restricted_Builds do
10945: LD_ADDR_VAR 0 7
10949: PUSH
10950: DOUBLE
10951: LD_INT 1
10953: DEC
10954: ST_TO_ADDR
10955: LD_LOC 22
10959: PUSH
10960: FOR_TO
10961: IFFALSE 11384
// if BType in Restricted_Builds [ i ] then
10963: LD_VAR 0 2
10967: PUSH
10968: LD_LOC 22
10972: PUSH
10973: LD_VAR 0 7
10977: ARRAY
10978: IN
10979: IFFALSE 11382
// begin if old_side then
10981: LD_VAR 0 4
10985: IFFALSE 11111
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10987: LD_LOC 28
10991: PUSH
10992: LD_VAR 0 7
10996: ARRAY
10997: PUSH
10998: LD_VAR 0 3
11002: ARRAY
11003: PUSH
11004: LD_VAR 0 5
11008: PLUS
11009: PUSH
11010: LD_LOC 23
11014: PUSH
11015: LD_VAR 0 7
11019: ARRAY
11020: GREATER
11021: IFFALSE 11047
// begin SetSide ( un , old_side ) ;
11023: LD_VAR 0 1
11027: PPUSH
11028: LD_VAR 0 4
11032: PPUSH
11033: CALL_OW 235
// count := 0 ;
11037: LD_ADDR_VAR 0 5
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// end else
11045: GO 11111
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
11047: LD_ADDR_LOC 28
11051: PUSH
11052: LD_LOC 28
11056: PPUSH
11057: LD_VAR 0 7
11061: PPUSH
11062: LD_LOC 28
11066: PUSH
11067: LD_VAR 0 7
11071: ARRAY
11072: PPUSH
11073: LD_VAR 0 4
11077: PPUSH
11078: LD_LOC 28
11082: PUSH
11083: LD_VAR 0 7
11087: ARRAY
11088: PUSH
11089: LD_VAR 0 4
11093: ARRAY
11094: PUSH
11095: LD_VAR 0 5
11099: MINUS
11100: PPUSH
11101: CALL_OW 1
11105: PPUSH
11106: CALL_OW 1
11110: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
11111: LD_ADDR_LOC 28
11115: PUSH
11116: LD_LOC 28
11120: PPUSH
11121: LD_VAR 0 7
11125: PPUSH
11126: LD_LOC 28
11130: PUSH
11131: LD_VAR 0 7
11135: ARRAY
11136: PPUSH
11137: LD_VAR 0 3
11141: PPUSH
11142: LD_LOC 28
11146: PUSH
11147: LD_VAR 0 7
11151: ARRAY
11152: PUSH
11153: LD_VAR 0 3
11157: ARRAY
11158: PUSH
11159: LD_VAR 0 5
11163: PLUS
11164: PPUSH
11165: CALL_OW 1
11169: PPUSH
11170: CALL_OW 1
11174: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
11175: LD_VAR 0 5
11179: PUSH
11180: LD_INT 0
11182: NONEQUAL
11183: PUSH
11184: LD_VAR 0 3
11188: PUSH
11189: LD_OWVAR 2
11193: EQUAL
11194: AND
11195: IFFALSE 11238
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
11197: LD_ADDR_LOC 29
11201: PUSH
11202: LD_LOC 29
11206: PPUSH
11207: LD_INT 3
11209: PUSH
11210: LD_VAR 0 7
11214: MUL
11215: PPUSH
11216: LD_LOC 28
11220: PUSH
11221: LD_VAR 0 7
11225: ARRAY
11226: PUSH
11227: LD_VAR 0 3
11231: ARRAY
11232: PPUSH
11233: CALL_OW 1
11237: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
11238: LD_LOC 28
11242: PUSH
11243: LD_VAR 0 7
11247: ARRAY
11248: PUSH
11249: LD_VAR 0 3
11253: ARRAY
11254: PUSH
11255: LD_LOC 23
11259: PUSH
11260: LD_VAR 0 7
11264: ARRAY
11265: GREATER
11266: IFFALSE 11293
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
11268: LD_ADDR_LOC 30
11272: PUSH
11273: LD_LOC 30
11277: PPUSH
11278: LD_VAR 0 3
11282: PPUSH
11283: LD_INT 1
11285: PPUSH
11286: CALL_OW 1
11290: ST_TO_ADDR
// end else
11291: GO 11380
// begin for j := 1 to Restricted_Builds do
11293: LD_ADDR_VAR 0 8
11297: PUSH
11298: DOUBLE
11299: LD_INT 1
11301: DEC
11302: ST_TO_ADDR
11303: LD_LOC 22
11307: PUSH
11308: FOR_TO
11309: IFFALSE 11353
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
11311: LD_LOC 28
11315: PUSH
11316: LD_VAR 0 8
11320: ARRAY
11321: PUSH
11322: LD_VAR 0 3
11326: ARRAY
11327: PUSH
11328: LD_LOC 23
11332: PUSH
11333: LD_VAR 0 8
11337: ARRAY
11338: GREATER
11339: IFFALSE 11351
// begin Is_Cheater := true ;
11341: LD_ADDR_VAR 0 9
11345: PUSH
11346: LD_INT 1
11348: ST_TO_ADDR
// break ;
11349: GO 11353
// end ;
11351: GO 11308
11353: POP
11354: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
11355: LD_ADDR_LOC 30
11359: PUSH
11360: LD_LOC 30
11364: PPUSH
11365: LD_VAR 0 3
11369: PPUSH
11370: LD_VAR 0 9
11374: PPUSH
11375: CALL_OW 1
11379: ST_TO_ADDR
// end ; break ;
11380: GO 11384
// end ;
11382: GO 10960
11384: POP
11385: POP
// end ;
11386: LD_VAR 0 6
11390: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
11391: LD_VAR 0 5
11395: PUSH
11396: LD_LOC 24
11400: IN
11401: PUSH
11402: LD_VAR 0 2
11406: PUSH
11407: LD_LOC 25
11411: IN
11412: OR
11413: PUSH
11414: LD_VAR 0 4
11418: PUSH
11419: LD_LOC 26
11423: IN
11424: OR
11425: PUSH
11426: LD_VAR 0 3
11430: PUSH
11431: LD_LOC 27
11435: IN
11436: OR
11437: IFFALSE 11448
// ComCancel ( factory ) ;
11439: LD_VAR 0 1
11443: PPUSH
11444: CALL_OW 127
// end ;
11448: PPOPN 5
11450: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
11451: LD_VAR 0 2
11455: PUSH
11456: LD_LOC 24
11460: IN
11461: IFFALSE 11472
// ComCancel ( building ) ;
11463: LD_VAR 0 1
11467: PPUSH
11468: CALL_OW 127
// end ; end_of_file
11472: PPOPN 2
11474: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
11475: LD_INT 0
11477: PPUSH
11478: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
11479: LD_ADDR_VAR 0 2
11483: PUSH
11484: LD_STRING #Multi1x1-Time
11486: PUSH
11487: LD_OWVAR 1
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: ST_TO_ADDR
// if WaitServerStrings then
11496: LD_EXP 50
11500: IFFALSE 11518
// AllStrings = AllStrings ^ WaitServerStrings ;
11502: LD_ADDR_VAR 0 2
11506: PUSH
11507: LD_VAR 0 2
11511: PUSH
11512: LD_EXP 50
11516: ADD
11517: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
11518: LD_INT 0
11520: PUSH
11521: LD_EXP 13
11525: PUSH
11526: LD_OWVAR 1
11530: MINUS
11531: LESSEQUAL
11532: IFFALSE 11563
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
11534: LD_ADDR_VAR 0 2
11538: PUSH
11539: LD_VAR 0 2
11543: PUSH
11544: LD_STRING #allowedsibbomb
11546: PUSH
11547: LD_EXP 13
11551: PUSH
11552: LD_OWVAR 1
11556: MINUS
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: ADD
11562: ST_TO_ADDR
// if ( ExtraStrings ) then
11563: LD_EXP 49
11567: IFFALSE 11589
// AllStrings := AllStrings ^  ^ ExtraStrings ;
11569: LD_ADDR_VAR 0 2
11573: PUSH
11574: LD_VAR 0 2
11578: PUSH
11579: LD_STRING 
11581: ADD
11582: PUSH
11583: LD_EXP 49
11587: ADD
11588: ST_TO_ADDR
// if ( LimitsStrings ) then
11589: CALL 8315 0 0
11593: IFFALSE 11615
// AllStrings := AllStrings ^  ^ LimitsStrings ;
11595: LD_ADDR_VAR 0 2
11599: PUSH
11600: LD_VAR 0 2
11604: PUSH
11605: LD_STRING 
11607: ADD
11608: PUSH
11609: CALL 8315 0 0
11613: ADD
11614: ST_TO_ADDR
// Display_Strings := AllStrings ;
11615: LD_ADDR_OWVAR 47
11619: PUSH
11620: LD_VAR 0 2
11624: ST_TO_ADDR
// end ;
11625: LD_VAR 0 1
11629: RET
// every 0 0$1 do
11630: GO 11632
11632: DISABLE
// begin ShowTimer ;
11633: CALL 11475 0 0
// enable ;
11637: ENABLE
// end ; end_of_file
11638: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11639: LD_INT 0
11641: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11642: LD_VAR 0 1
11646: PPUSH
11647: CALL_OW 255
11651: PUSH
11652: LD_VAR 0 4
11656: EQUAL
11657: IFFALSE 11676
// begin SetAchievement ( ACH_RAD ) ;
11659: LD_STRING ACH_RAD
11661: PPUSH
11662: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11666: LD_STRING ACH_NL
11668: PPUSH
11669: LD_INT 1
11671: PPUSH
11672: CALL_OW 564
// end end ;
11676: LD_VAR 0 5
11680: RET
// export function SA_Win ( side ) ; begin
11681: LD_INT 0
11683: PPUSH
// case side of 1 :
11684: LD_VAR 0 1
11688: PUSH
11689: LD_INT 1
11691: DOUBLE
11692: EQUAL
11693: IFTRUE 11697
11695: GO 11710
11697: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11698: LD_STRING ACH_AH
11700: PPUSH
11701: LD_INT 1
11703: PPUSH
11704: CALL_OW 564
11708: GO 11873
11710: LD_INT 2
11712: DOUBLE
11713: EQUAL
11714: IFTRUE 11718
11716: GO 11731
11718: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11719: LD_STRING ACH_E
11721: PPUSH
11722: LD_INT 1
11724: PPUSH
11725: CALL_OW 564
11729: GO 11873
11731: LD_INT 3
11733: DOUBLE
11734: EQUAL
11735: IFTRUE 11739
11737: GO 11752
11739: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11740: LD_STRING ACH_OOL
11742: PPUSH
11743: LD_INT 1
11745: PPUSH
11746: CALL_OW 564
11750: GO 11873
11752: LD_INT 1
11754: PUSH
11755: LD_INT 2
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: DOUBLE
11762: EQUAL
11763: IFTRUE 11767
11765: GO 11792
11767: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11768: LD_STRING ACH_AH
11770: PPUSH
11771: LD_REAL  5.00000000000000E-0001
11774: PPUSH
11775: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11779: LD_STRING ACH_E
11781: PPUSH
11782: LD_REAL  5.00000000000000E-0001
11785: PPUSH
11786: CALL_OW 564
// end ; [ 2 , 3 ] :
11790: GO 11873
11792: LD_INT 2
11794: PUSH
11795: LD_INT 3
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: DOUBLE
11802: EQUAL
11803: IFTRUE 11807
11805: GO 11832
11807: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11808: LD_STRING ACH_OOL
11810: PPUSH
11811: LD_REAL  5.00000000000000E-0001
11814: PPUSH
11815: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11819: LD_STRING ACH_E
11821: PPUSH
11822: LD_REAL  5.00000000000000E-0001
11825: PPUSH
11826: CALL_OW 564
// end ; [ 3 , 1 ] :
11830: GO 11873
11832: LD_INT 3
11834: PUSH
11835: LD_INT 1
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: DOUBLE
11842: EQUAL
11843: IFTRUE 11847
11845: GO 11872
11847: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11848: LD_STRING ACH_AH
11850: PPUSH
11851: LD_REAL  5.00000000000000E-0001
11854: PPUSH
11855: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
11859: LD_STRING ACH_OOL
11861: PPUSH
11862: LD_REAL  5.00000000000000E-0001
11865: PPUSH
11866: CALL_OW 564
// end ; end ;
11870: GO 11873
11872: POP
// end ; end_of_file
11873: LD_VAR 0 2
11877: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
11878: LD_INT 0
11880: PPUSH
11881: PPUSH
// enable ( 98 ) ;
11882: LD_INT 98
11884: ENABLE_MARKED
// GameEnded = false ;
11885: LD_ADDR_LOC 32
11889: PUSH
11890: LD_INT 0
11892: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11893: LD_ADDR_LOC 31
11897: PUSH
11898: LD_INT 0
11900: PUSH
11901: LD_INT 0
11903: PUSH
11904: LD_INT 0
11906: PUSH
11907: LD_INT 0
11909: PUSH
11910: LD_INT 0
11912: PUSH
11913: LD_INT 0
11915: PUSH
11916: LD_INT 0
11918: PUSH
11919: LD_INT 0
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: ST_TO_ADDR
// unfoged = false ;
11932: LD_ADDR_LOC 33
11936: PUSH
11937: LD_INT 0
11939: ST_TO_ADDR
// for i = 1 to side_positions do
11940: LD_ADDR_VAR 0 2
11944: PUSH
11945: DOUBLE
11946: LD_INT 1
11948: DEC
11949: ST_TO_ADDR
11950: LD_EXP 18
11954: PUSH
11955: FOR_TO
11956: IFFALSE 11996
// if not side_positions [ i ] then
11958: LD_EXP 18
11962: PUSH
11963: LD_VAR 0 2
11967: ARRAY
11968: NOT
11969: IFFALSE 11994
// defaited = replace ( defaited , i , true ) ;
11971: LD_ADDR_LOC 31
11975: PUSH
11976: LD_LOC 31
11980: PPUSH
11981: LD_VAR 0 2
11985: PPUSH
11986: LD_INT 1
11988: PPUSH
11989: CALL_OW 1
11993: ST_TO_ADDR
11994: GO 11955
11996: POP
11997: POP
// end ;
11998: LD_VAR 0 1
12002: RET
// function CanWinLoose ; begin
12003: LD_INT 0
12005: PPUSH
// Result := true ;
12006: LD_ADDR_VAR 0 1
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12014: CALL_OW 518
12018: PUSH
12019: CALL_OW 519
12023: PUSH
12024: LD_INT 0
12026: GREATER
12027: AND
12028: IFFALSE 12038
// Result := false ;
12030: LD_ADDR_VAR 0 1
12034: PUSH
12035: LD_INT 0
12037: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12038: CALL_OW 531
12042: PUSH
12043: CALL_OW 519
12047: PUSH
12048: LD_INT 1
12050: GREATER
12051: AND
12052: IFFALSE 12062
// Result := false ;
12054: LD_ADDR_VAR 0 1
12058: PUSH
12059: LD_INT 0
12061: ST_TO_ADDR
// end ;
12062: LD_VAR 0 1
12066: RET
// export function HasPower ( i ) ; var k , h ; begin
12067: LD_INT 0
12069: PPUSH
12070: PPUSH
12071: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
12072: LD_VAR 0 1
12076: PPUSH
12077: CALL_OW 108
12081: NOT
12082: PUSH
12083: LD_EXP 17
12087: PUSH
12088: LD_VAR 0 1
12092: ARRAY
12093: NOT
12094: AND
12095: PUSH
12096: LD_OWVAR 4
12100: AND
12101: IFFALSE 12113
// begin result = false ;
12103: LD_ADDR_VAR 0 2
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// end else
12111: GO 12408
// case def_win_rules of 0 :
12113: LD_EXP 14
12117: PUSH
12118: LD_INT 0
12120: DOUBLE
12121: EQUAL
12122: IFTRUE 12126
12124: GO 12289
12126: POP
// if def_people_respawning then
12127: LD_EXP 44
12131: IFFALSE 12222
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
12133: LD_ADDR_VAR 0 2
12137: PUSH
12138: LD_INT 22
12140: PUSH
12141: LD_VAR 0 1
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 2
12152: PUSH
12153: LD_INT 21
12155: PUSH
12156: LD_INT 1
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 33
12165: PUSH
12166: LD_INT 3
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 33
12175: PUSH
12176: LD_INT 5
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: LD_INT 30
12185: PUSH
12186: LD_INT 0
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 30
12195: PUSH
12196: LD_INT 1
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PPUSH
12215: CALL_OW 69
12219: ST_TO_ADDR
12220: GO 12287
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
12222: LD_ADDR_VAR 0 2
12226: PUSH
12227: LD_INT 22
12229: PUSH
12230: LD_VAR 0 1
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 2
12241: PUSH
12242: LD_INT 21
12244: PUSH
12245: LD_INT 1
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: LD_INT 33
12254: PUSH
12255: LD_INT 3
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 33
12264: PUSH
12265: LD_INT 5
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 69
12286: ST_TO_ADDR
12287: GO 12408
12289: LD_INT 1
12291: DOUBLE
12292: EQUAL
12293: IFTRUE 12297
12295: GO 12336
12297: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
12298: LD_ADDR_VAR 0 2
12302: PUSH
12303: LD_INT 22
12305: PUSH
12306: LD_VAR 0 1
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: LD_INT 21
12317: PUSH
12318: LD_INT 1
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PPUSH
12329: CALL_OW 69
12333: ST_TO_ADDR
12334: GO 12408
12336: LD_INT 2
12338: DOUBLE
12339: EQUAL
12340: IFTRUE 12344
12342: GO 12407
12344: POP
// begin h = false ;
12345: LD_ADDR_VAR 0 4
12349: PUSH
12350: LD_INT 0
12352: ST_TO_ADDR
// for k in heroes [ i ] do
12353: LD_ADDR_VAR 0 3
12357: PUSH
12358: LD_EXP 30
12362: PUSH
12363: LD_VAR 0 1
12367: ARRAY
12368: PUSH
12369: FOR_IN
12370: IFFALSE 12393
// if IsLive ( k ) then
12372: LD_VAR 0 3
12376: PPUSH
12377: CALL_OW 300
12381: IFFALSE 12391
// h = true ;
12383: LD_ADDR_VAR 0 4
12387: PUSH
12388: LD_INT 1
12390: ST_TO_ADDR
12391: GO 12369
12393: POP
12394: POP
// Result := h ;
12395: LD_ADDR_VAR 0 2
12399: PUSH
12400: LD_VAR 0 4
12404: ST_TO_ADDR
// end ; end ;
12405: GO 12408
12407: POP
// end ;
12408: LD_VAR 0 2
12412: RET
// function AlliedSides ( i , j ) ; begin
12413: LD_INT 0
12415: PPUSH
// Result := false ;
12416: LD_ADDR_VAR 0 3
12420: PUSH
12421: LD_INT 0
12423: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
12424: LD_VAR 0 1
12428: PPUSH
12429: LD_VAR 0 2
12433: PPUSH
12434: CALL_OW 81
12438: PUSH
12439: LD_INT 1
12441: EQUAL
12442: PUSH
12443: LD_VAR 0 2
12447: PPUSH
12448: LD_VAR 0 1
12452: PPUSH
12453: CALL_OW 81
12457: PUSH
12458: LD_INT 1
12460: EQUAL
12461: AND
12462: PUSH
12463: LD_VAR 0 1
12467: PPUSH
12468: CALL_OW 83
12472: AND
12473: PUSH
12474: LD_VAR 0 2
12478: PPUSH
12479: CALL_OW 83
12483: AND
12484: IFFALSE 12494
// Result := true ;
12486: LD_ADDR_VAR 0 3
12490: PUSH
12491: LD_INT 1
12493: ST_TO_ADDR
// end ;
12494: LD_VAR 0 3
12498: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
12499: CALL 12003 0 0
12503: PUSH
12504: LD_LOC 32
12508: NOT
12509: AND
12510: IFFALSE 12526
12512: GO 12514
12514: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
12515: LD_ADDR_EXP 50
12519: PUSH
12520: LD_STRING #Player-Ended
12522: PUSH
12523: EMPTY
12524: LIST
12525: ST_TO_ADDR
12526: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
12527: CALL 12003 0 0
12531: PUSH
12532: LD_LOC 32
12536: AND
12537: IFFALSE 12546
12539: GO 12541
12541: DISABLE
// YouLostInMultiplayer ;
12542: CALL_OW 107
12546: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
12547: CALL 12003 0 0
12551: NOT
12552: PUSH
12553: CALL_OW 531
12557: NOT
12558: AND
12559: IFFALSE 12575
12561: GO 12563
12563: DISABLE
// WaitServerStrings = [ #server-wait ] ;
12564: LD_ADDR_EXP 50
12568: PUSH
12569: LD_STRING #server-wait
12571: PUSH
12572: EMPTY
12573: LIST
12574: ST_TO_ADDR
12575: END
// every 100 trigger IAmSpec do
12576: CALL_OW 531
12580: IFFALSE 12596
12582: GO 12584
12584: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
12585: LD_ADDR_EXP 50
12589: PUSH
12590: LD_STRING #Player-IAmSpec
12592: PUSH
12593: EMPTY
12594: LIST
12595: ST_TO_ADDR
12596: END
// every 100 trigger GameEnded and IAmSpec do
12597: LD_LOC 32
12601: PUSH
12602: CALL_OW 531
12606: AND
12607: IFFALSE 12616
12609: GO 12611
12611: DISABLE
// YouLostInMultiplayer ;
12612: CALL_OW 107
12616: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
12617: CALL 12003 0 0
12621: PUSH
12622: LD_LOC 32
12626: NOT
12627: AND
12628: IFFALSE 12644
12630: GO 12632
12632: DISABLE
// WaitServerStrings = [ $player-win ] ;
12633: LD_ADDR_EXP 50
12637: PUSH
12638: LD_STRING $player-win
12640: PUSH
12641: EMPTY
12642: LIST
12643: ST_TO_ADDR
12644: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
12645: CALL 12003 0 0
12649: PUSH
12650: LD_LOC 32
12654: AND
12655: IFFALSE 12679
12657: GO 12659
12659: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
12660: LD_EXP 19
12664: PUSH
12665: LD_OWVAR 2
12669: ARRAY
12670: PPUSH
12671: CALL 11681 0 1
// YouWinInMultiplayer ;
12675: CALL_OW 106
// end ;
12679: END
// every 100 trigger isEditor marked 401 do
12680: LD_OWVAR 84
12684: IFFALSE 12700
12686: GO 12688
12688: DISABLE
// Debug_Strings = [ You won ] ;
12689: LD_ADDR_OWVAR 48
12693: PUSH
12694: LD_STRING You won
12696: PUSH
12697: EMPTY
12698: LIST
12699: ST_TO_ADDR
12700: END
// every 100 trigger isEditor marked 400 do
12701: LD_OWVAR 84
12705: IFFALSE 12721
12707: GO 12709
12709: DISABLE
// Debug_Strings = [ You loss ] ;
12710: LD_ADDR_OWVAR 48
12714: PUSH
12715: LD_STRING You loss
12717: PUSH
12718: EMPTY
12719: LIST
12720: ST_TO_ADDR
12721: END
// every 100 marked 98 do var i , un ;
12722: GO 12724
12724: DISABLE
12725: LD_INT 0
12727: PPUSH
12728: PPUSH
// begin for i = 1 to side_positions do
12729: LD_ADDR_VAR 0 1
12733: PUSH
12734: DOUBLE
12735: LD_INT 1
12737: DEC
12738: ST_TO_ADDR
12739: LD_EXP 18
12743: PUSH
12744: FOR_TO
12745: IFFALSE 12868
// if side_positions [ i ] then
12747: LD_EXP 18
12751: PUSH
12752: LD_VAR 0 1
12756: ARRAY
12757: IFFALSE 12866
// if not HasPower ( i ) and not Defaited [ i ] then
12759: LD_VAR 0 1
12763: PPUSH
12764: CALL 12067 0 1
12768: NOT
12769: PUSH
12770: LD_LOC 31
12774: PUSH
12775: LD_VAR 0 1
12779: ARRAY
12780: NOT
12781: AND
12782: IFFALSE 12866
// begin un = filterallunits ( [ f_side , i ] ) ;
12784: LD_ADDR_VAR 0 2
12788: PUSH
12789: LD_INT 22
12791: PUSH
12792: LD_VAR 0 1
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PPUSH
12801: CALL_OW 69
12805: ST_TO_ADDR
// if un then
12806: LD_VAR 0 2
12810: IFFALSE 12824
// SetSide ( un , 0 ) ;
12812: LD_VAR 0 2
12816: PPUSH
12817: LD_INT 0
12819: PPUSH
12820: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
12824: LD_ADDR_LOC 31
12828: PUSH
12829: LD_LOC 31
12833: PPUSH
12834: LD_VAR 0 1
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 1
12846: ST_TO_ADDR
// if i = your_side then
12847: LD_VAR 0 1
12851: PUSH
12852: LD_OWVAR 2
12856: EQUAL
12857: IFFALSE 12866
// begin Multiplayer_Loose_Message ;
12859: CALL_OW 521
// enable ( 400 ) ;
12863: LD_INT 400
12865: ENABLE_MARKED
// end ; end ;
12866: GO 12744
12868: POP
12869: POP
// if not Unfoged and defaited [ your_side ] then
12870: LD_LOC 33
12874: NOT
12875: PUSH
12876: LD_LOC 31
12880: PUSH
12881: LD_OWVAR 2
12885: ARRAY
12886: AND
12887: IFFALSE 12893
// Unfog ;
12889: CALL 13079 0 0
// DidGameEnd ;
12893: CALL 12908 0 0
// if not GameEnded then
12897: LD_LOC 32
12901: NOT
12902: IFFALSE 12905
// enable ;
12904: ENABLE
// end ;
12905: PPOPN 2
12907: END
// function DidGameEnd ; var i , k , enemy ; begin
12908: LD_INT 0
12910: PPUSH
12911: PPUSH
12912: PPUSH
12913: PPUSH
// enemy = [ ] ;
12914: LD_ADDR_VAR 0 4
12918: PUSH
12919: EMPTY
12920: ST_TO_ADDR
// for i = 1 to side_positions do
12921: LD_ADDR_VAR 0 2
12925: PUSH
12926: DOUBLE
12927: LD_INT 1
12929: DEC
12930: ST_TO_ADDR
12931: LD_EXP 18
12935: PUSH
12936: FOR_TO
12937: IFFALSE 13041
// if not defaited [ i ] then
12939: LD_LOC 31
12943: PUSH
12944: LD_VAR 0 2
12948: ARRAY
12949: NOT
12950: IFFALSE 13039
// for k = 1 to side_positions do
12952: LD_ADDR_VAR 0 3
12956: PUSH
12957: DOUBLE
12958: LD_INT 1
12960: DEC
12961: ST_TO_ADDR
12962: LD_EXP 18
12966: PUSH
12967: FOR_TO
12968: IFFALSE 13037
// if not defaited [ k ] then
12970: LD_LOC 31
12974: PUSH
12975: LD_VAR 0 3
12979: ARRAY
12980: NOT
12981: IFFALSE 13035
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
12983: LD_VAR 0 2
12987: PPUSH
12988: LD_VAR 0 3
12992: PPUSH
12993: CALL_OW 81
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: LD_INT 0
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: IN
13008: IFFALSE 13035
// enemy = enemy ^ [ i , k ] ;
13010: LD_ADDR_VAR 0 4
13014: PUSH
13015: LD_VAR 0 4
13019: PUSH
13020: LD_VAR 0 2
13024: PUSH
13025: LD_VAR 0 3
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: ADD
13034: ST_TO_ADDR
13035: GO 12967
13037: POP
13038: POP
13039: GO 12936
13041: POP
13042: POP
// if not enemy then
13043: LD_VAR 0 4
13047: NOT
13048: IFFALSE 13074
// begin GameEnded = true ;
13050: LD_ADDR_LOC 32
13054: PUSH
13055: LD_INT 1
13057: ST_TO_ADDR
// if not defaited [ your_side ] then
13058: LD_LOC 31
13062: PUSH
13063: LD_OWVAR 2
13067: ARRAY
13068: NOT
13069: IFFALSE 13074
// enable ( 401 ) ;
13071: LD_INT 401
13073: ENABLE_MARKED
// end ; end ;
13074: LD_VAR 0 1
13078: RET
// function unfog ; var k , friends ; begin
13079: LD_INT 0
13081: PPUSH
13082: PPUSH
13083: PPUSH
// for k = 1 to side_positions do
13084: LD_ADDR_VAR 0 2
13088: PUSH
13089: DOUBLE
13090: LD_INT 1
13092: DEC
13093: ST_TO_ADDR
13094: LD_EXP 18
13098: PUSH
13099: FOR_TO
13100: IFFALSE 13156
// if not defaited [ k ] then
13102: LD_LOC 31
13106: PUSH
13107: LD_VAR 0 2
13111: ARRAY
13112: NOT
13113: IFFALSE 13154
// if GetAttitude ( your_side , k ) in [ att_friend ] then
13115: LD_OWVAR 2
13119: PPUSH
13120: LD_VAR 0 2
13124: PPUSH
13125: CALL_OW 81
13129: PUSH
13130: LD_INT 1
13132: PUSH
13133: EMPTY
13134: LIST
13135: IN
13136: IFFALSE 13154
// friends = friends ^ k ;
13138: LD_ADDR_VAR 0 3
13142: PUSH
13143: LD_VAR 0 3
13147: PUSH
13148: LD_VAR 0 2
13152: ADD
13153: ST_TO_ADDR
13154: GO 13099
13156: POP
13157: POP
// if not friends then
13158: LD_VAR 0 3
13162: NOT
13163: IFFALSE 13180
// begin fogoff ( true ) ;
13165: LD_INT 1
13167: PPUSH
13168: CALL_OW 344
// unfoged = true ;
13172: LD_ADDR_LOC 33
13176: PUSH
13177: LD_INT 1
13179: ST_TO_ADDR
// end ; end ;
13180: LD_VAR 0 1
13184: RET
// export function MakeGameEnd ; begin
13185: LD_INT 0
13187: PPUSH
// fogoff ( true ) ;
13188: LD_INT 1
13190: PPUSH
13191: CALL_OW 344
// unfoged = true ;
13195: LD_ADDR_LOC 33
13199: PUSH
13200: LD_INT 1
13202: ST_TO_ADDR
// wait ( 0 0$5 ) ;
13203: LD_INT 175
13205: PPUSH
13206: CALL_OW 67
// GameEnded = true ;
13210: LD_ADDR_LOC 32
13214: PUSH
13215: LD_INT 1
13217: ST_TO_ADDR
// end ;
13218: LD_VAR 0 1
13222: RET
// export function GetGameEnded ; begin
13223: LD_INT 0
13225: PPUSH
// result = GameEnded ;
13226: LD_ADDR_VAR 0 1
13230: PUSH
13231: LD_LOC 32
13235: ST_TO_ADDR
// end ; end_of_file
13236: LD_VAR 0 1
13240: RET
// export function SetMpTechs ( ) ; var side , i ; begin
13241: LD_INT 0
13243: PPUSH
13244: PPUSH
13245: PPUSH
// for side = 1 to 8 do
13246: LD_ADDR_VAR 0 2
13250: PUSH
13251: DOUBLE
13252: LD_INT 1
13254: DEC
13255: ST_TO_ADDR
13256: LD_INT 8
13258: PUSH
13259: FOR_TO
13260: IFFALSE 13381
// begin for i = 1 to 72 do
13262: LD_ADDR_VAR 0 3
13266: PUSH
13267: DOUBLE
13268: LD_INT 1
13270: DEC
13271: ST_TO_ADDR
13272: LD_INT 72
13274: PUSH
13275: FOR_TO
13276: IFFALSE 13307
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
13278: LD_VAR 0 3
13282: PPUSH
13283: LD_VAR 0 2
13287: PPUSH
13288: LD_INT 0
13290: PPUSH
13291: LD_VAR 0 3
13295: PPUSH
13296: CALL_OW 565
13300: PPUSH
13301: CALL_OW 322
13305: GO 13275
13307: POP
13308: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
13309: LD_INT 73
13311: PPUSH
13312: LD_VAR 0 2
13316: PPUSH
13317: LD_INT 0
13319: PPUSH
13320: LD_INT 25
13322: PPUSH
13323: CALL_OW 565
13327: PPUSH
13328: CALL_OW 322
// for i = 0 to 40 do
13332: LD_ADDR_VAR 0 3
13336: PUSH
13337: DOUBLE
13338: LD_INT 0
13340: DEC
13341: ST_TO_ADDR
13342: LD_INT 40
13344: PUSH
13345: FOR_TO
13346: IFFALSE 13377
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
13348: LD_VAR 0 3
13352: PPUSH
13353: LD_VAR 0 2
13357: PPUSH
13358: LD_INT 1
13360: PPUSH
13361: LD_VAR 0 3
13365: PPUSH
13366: CALL_OW 565
13370: PPUSH
13371: CALL_OW 324
13375: GO 13345
13377: POP
13378: POP
// end ;
13379: GO 13259
13381: POP
13382: POP
// end ;
13383: LD_VAR 0 1
13387: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
13388: LD_INT 0
13390: PPUSH
13391: PPUSH
13392: PPUSH
// for side = 1 to 8 do
13393: LD_ADDR_VAR 0 3
13397: PUSH
13398: DOUBLE
13399: LD_INT 1
13401: DEC
13402: ST_TO_ADDR
13403: LD_INT 8
13405: PUSH
13406: FOR_TO
13407: IFFALSE 17403
// begin for i = 1 to 73 do
13409: LD_ADDR_VAR 0 4
13413: PUSH
13414: DOUBLE
13415: LD_INT 1
13417: DEC
13418: ST_TO_ADDR
13419: LD_INT 73
13421: PUSH
13422: FOR_TO
13423: IFFALSE 13444
// SetTech ( i , side , state_disabled ) ;
13425: LD_VAR 0 4
13429: PPUSH
13430: LD_VAR 0 3
13434: PPUSH
13435: LD_INT 0
13437: PPUSH
13438: CALL_OW 322
13442: GO 13422
13444: POP
13445: POP
// for i = 0 to 40 do
13446: LD_ADDR_VAR 0 4
13450: PUSH
13451: DOUBLE
13452: LD_INT 0
13454: DEC
13455: ST_TO_ADDR
13456: LD_INT 40
13458: PUSH
13459: FOR_TO
13460: IFFALSE 13481
// SetRestrict ( i , side , false ) ;
13462: LD_VAR 0 4
13466: PPUSH
13467: LD_VAR 0 3
13471: PPUSH
13472: LD_INT 0
13474: PPUSH
13475: CALL_OW 324
13479: GO 13459
13481: POP
13482: POP
// case level of 1 :
13483: LD_VAR 0 1
13487: PUSH
13488: LD_INT 1
13490: DOUBLE
13491: EQUAL
13492: IFTRUE 13496
13494: GO 13649
13496: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13497: LD_INT 35
13499: PPUSH
13500: LD_VAR 0 3
13504: PPUSH
13505: LD_INT 1
13507: PPUSH
13508: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13512: LD_INT 45
13514: PPUSH
13515: LD_VAR 0 3
13519: PPUSH
13520: LD_INT 1
13522: PPUSH
13523: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13527: LD_INT 46
13529: PPUSH
13530: LD_VAR 0 3
13534: PPUSH
13535: LD_INT 1
13537: PPUSH
13538: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13542: LD_INT 47
13544: PPUSH
13545: LD_VAR 0 3
13549: PPUSH
13550: LD_INT 1
13552: PPUSH
13553: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13557: LD_INT 0
13559: PPUSH
13560: LD_VAR 0 3
13564: PPUSH
13565: LD_INT 1
13567: PPUSH
13568: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13572: LD_INT 2
13574: PPUSH
13575: LD_VAR 0 3
13579: PPUSH
13580: LD_INT 1
13582: PPUSH
13583: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13587: LD_INT 4
13589: PPUSH
13590: LD_VAR 0 3
13594: PPUSH
13595: LD_INT 1
13597: PPUSH
13598: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13602: LD_INT 6
13604: PPUSH
13605: LD_VAR 0 3
13609: PPUSH
13610: LD_INT 1
13612: PPUSH
13613: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13617: LD_INT 29
13619: PPUSH
13620: LD_VAR 0 3
13624: PPUSH
13625: LD_INT 1
13627: PPUSH
13628: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13632: LD_INT 31
13634: PPUSH
13635: LD_VAR 0 3
13639: PPUSH
13640: LD_INT 1
13642: PPUSH
13643: CALL_OW 324
// end ; 2 :
13647: GO 17401
13649: LD_INT 2
13651: DOUBLE
13652: EQUAL
13653: IFTRUE 13657
13655: GO 13855
13657: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13658: LD_INT 35
13660: PPUSH
13661: LD_VAR 0 3
13665: PPUSH
13666: LD_INT 1
13668: PPUSH
13669: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13673: LD_INT 45
13675: PPUSH
13676: LD_VAR 0 3
13680: PPUSH
13681: LD_INT 1
13683: PPUSH
13684: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13688: LD_INT 46
13690: PPUSH
13691: LD_VAR 0 3
13695: PPUSH
13696: LD_INT 1
13698: PPUSH
13699: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13703: LD_INT 47
13705: PPUSH
13706: LD_VAR 0 3
13710: PPUSH
13711: LD_INT 1
13713: PPUSH
13714: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13718: LD_INT 1
13720: PPUSH
13721: LD_VAR 0 3
13725: PPUSH
13726: LD_INT 1
13728: PPUSH
13729: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13733: LD_INT 2
13735: PPUSH
13736: LD_VAR 0 3
13740: PPUSH
13741: LD_INT 1
13743: PPUSH
13744: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13748: LD_INT 11
13750: PPUSH
13751: LD_VAR 0 3
13755: PPUSH
13756: LD_INT 1
13758: PPUSH
13759: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13763: LD_INT 0
13765: PPUSH
13766: LD_VAR 0 3
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13778: LD_INT 2
13780: PPUSH
13781: LD_VAR 0 3
13785: PPUSH
13786: LD_INT 1
13788: PPUSH
13789: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13793: LD_INT 4
13795: PPUSH
13796: LD_VAR 0 3
13800: PPUSH
13801: LD_INT 1
13803: PPUSH
13804: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13808: LD_INT 6
13810: PPUSH
13811: LD_VAR 0 3
13815: PPUSH
13816: LD_INT 1
13818: PPUSH
13819: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13823: LD_INT 29
13825: PPUSH
13826: LD_VAR 0 3
13830: PPUSH
13831: LD_INT 1
13833: PPUSH
13834: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13838: LD_INT 31
13840: PPUSH
13841: LD_VAR 0 3
13845: PPUSH
13846: LD_INT 1
13848: PPUSH
13849: CALL_OW 324
// end ; 3 :
13853: GO 17401
13855: LD_INT 3
13857: DOUBLE
13858: EQUAL
13859: IFTRUE 13863
13861: GO 14316
13863: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13864: LD_INT 35
13866: PPUSH
13867: LD_VAR 0 3
13871: PPUSH
13872: LD_INT 1
13874: PPUSH
13875: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13879: LD_INT 45
13881: PPUSH
13882: LD_VAR 0 3
13886: PPUSH
13887: LD_INT 1
13889: PPUSH
13890: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13894: LD_INT 46
13896: PPUSH
13897: LD_VAR 0 3
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13909: LD_INT 47
13911: PPUSH
13912: LD_VAR 0 3
13916: PPUSH
13917: LD_INT 1
13919: PPUSH
13920: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13924: LD_INT 1
13926: PPUSH
13927: LD_VAR 0 3
13931: PPUSH
13932: LD_INT 1
13934: PPUSH
13935: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13939: LD_INT 2
13941: PPUSH
13942: LD_VAR 0 3
13946: PPUSH
13947: LD_INT 1
13949: PPUSH
13950: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13954: LD_INT 11
13956: PPUSH
13957: LD_VAR 0 3
13961: PPUSH
13962: LD_INT 1
13964: PPUSH
13965: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13969: LD_INT 48
13971: PPUSH
13972: LD_VAR 0 3
13976: PPUSH
13977: LD_INT 1
13979: PPUSH
13980: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13984: LD_INT 69
13986: PPUSH
13987: LD_VAR 0 3
13991: PPUSH
13992: LD_INT 1
13994: PPUSH
13995: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13999: LD_INT 39
14001: PPUSH
14002: LD_VAR 0 3
14006: PPUSH
14007: LD_INT 1
14009: PPUSH
14010: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14014: LD_INT 43
14016: PPUSH
14017: LD_VAR 0 3
14021: PPUSH
14022: LD_INT 1
14024: PPUSH
14025: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14029: LD_INT 51
14031: PPUSH
14032: LD_VAR 0 3
14036: PPUSH
14037: LD_INT 1
14039: PPUSH
14040: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14044: LD_INT 6
14046: PPUSH
14047: LD_VAR 0 3
14051: PPUSH
14052: LD_INT 1
14054: PPUSH
14055: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14059: LD_INT 0
14061: PPUSH
14062: LD_VAR 0 3
14066: PPUSH
14067: LD_INT 1
14069: PPUSH
14070: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14074: LD_INT 2
14076: PPUSH
14077: LD_VAR 0 3
14081: PPUSH
14082: LD_INT 1
14084: PPUSH
14085: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14089: LD_INT 3
14091: PPUSH
14092: LD_VAR 0 3
14096: PPUSH
14097: LD_INT 1
14099: PPUSH
14100: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14104: LD_INT 4
14106: PPUSH
14107: LD_VAR 0 3
14111: PPUSH
14112: LD_INT 1
14114: PPUSH
14115: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14119: LD_INT 6
14121: PPUSH
14122: LD_VAR 0 3
14126: PPUSH
14127: LD_INT 1
14129: PPUSH
14130: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14134: LD_INT 7
14136: PPUSH
14137: LD_VAR 0 3
14141: PPUSH
14142: LD_INT 1
14144: PPUSH
14145: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14149: LD_INT 8
14151: PPUSH
14152: LD_VAR 0 3
14156: PPUSH
14157: LD_INT 1
14159: PPUSH
14160: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14164: LD_INT 10
14166: PPUSH
14167: LD_VAR 0 3
14171: PPUSH
14172: LD_INT 1
14174: PPUSH
14175: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14179: LD_INT 15
14181: PPUSH
14182: LD_VAR 0 3
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14194: LD_INT 16
14196: PPUSH
14197: LD_VAR 0 3
14201: PPUSH
14202: LD_INT 1
14204: PPUSH
14205: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14209: LD_INT 17
14211: PPUSH
14212: LD_VAR 0 3
14216: PPUSH
14217: LD_INT 1
14219: PPUSH
14220: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14224: LD_INT 20
14226: PPUSH
14227: LD_VAR 0 3
14231: PPUSH
14232: LD_INT 1
14234: PPUSH
14235: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14239: LD_INT 26
14241: PPUSH
14242: LD_VAR 0 3
14246: PPUSH
14247: LD_INT 1
14249: PPUSH
14250: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14254: LD_INT 27
14256: PPUSH
14257: LD_VAR 0 3
14261: PPUSH
14262: LD_INT 1
14264: PPUSH
14265: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14269: LD_INT 29
14271: PPUSH
14272: LD_VAR 0 3
14276: PPUSH
14277: LD_INT 1
14279: PPUSH
14280: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14284: LD_INT 31
14286: PPUSH
14287: LD_VAR 0 3
14291: PPUSH
14292: LD_INT 1
14294: PPUSH
14295: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14299: LD_INT 32
14301: PPUSH
14302: LD_VAR 0 3
14306: PPUSH
14307: LD_INT 1
14309: PPUSH
14310: CALL_OW 324
// end ; 4 :
14314: GO 17401
14316: LD_INT 4
14318: DOUBLE
14319: EQUAL
14320: IFTRUE 14324
14322: GO 15272
14324: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14325: LD_INT 35
14327: PPUSH
14328: LD_VAR 0 3
14332: PPUSH
14333: LD_INT 1
14335: PPUSH
14336: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14340: LD_INT 45
14342: PPUSH
14343: LD_VAR 0 3
14347: PPUSH
14348: LD_INT 1
14350: PPUSH
14351: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14355: LD_INT 46
14357: PPUSH
14358: LD_VAR 0 3
14362: PPUSH
14363: LD_INT 1
14365: PPUSH
14366: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14370: LD_INT 47
14372: PPUSH
14373: LD_VAR 0 3
14377: PPUSH
14378: LD_INT 1
14380: PPUSH
14381: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14385: LD_INT 1
14387: PPUSH
14388: LD_VAR 0 3
14392: PPUSH
14393: LD_INT 1
14395: PPUSH
14396: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14400: LD_INT 2
14402: PPUSH
14403: LD_VAR 0 3
14407: PPUSH
14408: LD_INT 1
14410: PPUSH
14411: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14415: LD_INT 11
14417: PPUSH
14418: LD_VAR 0 3
14422: PPUSH
14423: LD_INT 1
14425: PPUSH
14426: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14430: LD_INT 20
14432: PPUSH
14433: LD_VAR 0 3
14437: PPUSH
14438: LD_INT 1
14440: PPUSH
14441: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14445: LD_INT 48
14447: PPUSH
14448: LD_VAR 0 3
14452: PPUSH
14453: LD_INT 1
14455: PPUSH
14456: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14460: LD_INT 49
14462: PPUSH
14463: LD_VAR 0 3
14467: PPUSH
14468: LD_INT 1
14470: PPUSH
14471: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14475: LD_INT 69
14477: PPUSH
14478: LD_VAR 0 3
14482: PPUSH
14483: LD_INT 1
14485: PPUSH
14486: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14490: LD_INT 39
14492: PPUSH
14493: LD_VAR 0 3
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14505: LD_INT 34
14507: PPUSH
14508: LD_VAR 0 3
14512: PPUSH
14513: LD_INT 1
14515: PPUSH
14516: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14520: LD_INT 42
14522: PPUSH
14523: LD_VAR 0 3
14527: PPUSH
14528: LD_INT 1
14530: PPUSH
14531: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14535: LD_INT 44
14537: PPUSH
14538: LD_VAR 0 3
14542: PPUSH
14543: LD_INT 1
14545: PPUSH
14546: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14550: LD_INT 41
14552: PPUSH
14553: LD_VAR 0 3
14557: PPUSH
14558: LD_INT 1
14560: PPUSH
14561: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14565: LD_INT 43
14567: PPUSH
14568: LD_VAR 0 3
14572: PPUSH
14573: LD_INT 1
14575: PPUSH
14576: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14580: LD_INT 70
14582: PPUSH
14583: LD_VAR 0 3
14587: PPUSH
14588: LD_INT 1
14590: PPUSH
14591: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14595: LD_INT 51
14597: PPUSH
14598: LD_VAR 0 3
14602: PPUSH
14603: LD_INT 1
14605: PPUSH
14606: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14610: LD_INT 52
14612: PPUSH
14613: LD_VAR 0 3
14617: PPUSH
14618: LD_INT 1
14620: PPUSH
14621: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14625: LD_INT 6
14627: PPUSH
14628: LD_VAR 0 3
14632: PPUSH
14633: LD_INT 1
14635: PPUSH
14636: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14640: LD_INT 15
14642: PPUSH
14643: LD_VAR 0 3
14647: PPUSH
14648: LD_INT 1
14650: PPUSH
14651: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14655: LD_INT 7
14657: PPUSH
14658: LD_VAR 0 3
14662: PPUSH
14663: LD_INT 1
14665: PPUSH
14666: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14670: LD_INT 12
14672: PPUSH
14673: LD_VAR 0 3
14677: PPUSH
14678: LD_INT 1
14680: PPUSH
14681: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14685: LD_INT 18
14687: PPUSH
14688: LD_VAR 0 3
14692: PPUSH
14693: LD_INT 1
14695: PPUSH
14696: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14700: LD_INT 60
14702: PPUSH
14703: LD_VAR 0 3
14707: PPUSH
14708: LD_INT 1
14710: PPUSH
14711: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14715: LD_INT 9
14717: PPUSH
14718: LD_VAR 0 3
14722: PPUSH
14723: LD_INT 1
14725: PPUSH
14726: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14730: LD_INT 30
14732: PPUSH
14733: LD_VAR 0 3
14737: PPUSH
14738: LD_INT 1
14740: PPUSH
14741: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14745: LD_INT 37
14747: PPUSH
14748: LD_VAR 0 3
14752: PPUSH
14753: LD_INT 1
14755: PPUSH
14756: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14760: LD_INT 5
14762: PPUSH
14763: LD_VAR 0 3
14767: PPUSH
14768: LD_INT 1
14770: PPUSH
14771: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14775: LD_INT 66
14777: PPUSH
14778: LD_VAR 0 3
14782: PPUSH
14783: LD_INT 1
14785: PPUSH
14786: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14790: LD_INT 21
14792: PPUSH
14793: LD_VAR 0 3
14797: PPUSH
14798: LD_INT 1
14800: PPUSH
14801: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14805: LD_INT 22
14807: PPUSH
14808: LD_VAR 0 3
14812: PPUSH
14813: LD_INT 1
14815: PPUSH
14816: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14820: LD_INT 54
14822: PPUSH
14823: LD_VAR 0 3
14827: PPUSH
14828: LD_INT 1
14830: PPUSH
14831: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14835: LD_INT 0
14837: PPUSH
14838: LD_VAR 0 3
14842: PPUSH
14843: LD_INT 1
14845: PPUSH
14846: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14850: LD_INT 1
14852: PPUSH
14853: LD_VAR 0 3
14857: PPUSH
14858: LD_INT 1
14860: PPUSH
14861: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14865: LD_INT 2
14867: PPUSH
14868: LD_VAR 0 3
14872: PPUSH
14873: LD_INT 1
14875: PPUSH
14876: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14880: LD_INT 3
14882: PPUSH
14883: LD_VAR 0 3
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14895: LD_INT 4
14897: PPUSH
14898: LD_VAR 0 3
14902: PPUSH
14903: LD_INT 1
14905: PPUSH
14906: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14910: LD_INT 5
14912: PPUSH
14913: LD_VAR 0 3
14917: PPUSH
14918: LD_INT 1
14920: PPUSH
14921: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14925: LD_INT 6
14927: PPUSH
14928: LD_VAR 0 3
14932: PPUSH
14933: LD_INT 1
14935: PPUSH
14936: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14940: LD_INT 7
14942: PPUSH
14943: LD_VAR 0 3
14947: PPUSH
14948: LD_INT 1
14950: PPUSH
14951: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14955: LD_INT 8
14957: PPUSH
14958: LD_VAR 0 3
14962: PPUSH
14963: LD_INT 1
14965: PPUSH
14966: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14970: LD_INT 10
14972: PPUSH
14973: LD_VAR 0 3
14977: PPUSH
14978: LD_INT 1
14980: PPUSH
14981: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14985: LD_INT 11
14987: PPUSH
14988: LD_VAR 0 3
14992: PPUSH
14993: LD_INT 1
14995: PPUSH
14996: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15000: LD_INT 12
15002: PPUSH
15003: LD_VAR 0 3
15007: PPUSH
15008: LD_INT 1
15010: PPUSH
15011: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15015: LD_INT 13
15017: PPUSH
15018: LD_VAR 0 3
15022: PPUSH
15023: LD_INT 1
15025: PPUSH
15026: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15030: LD_INT 14
15032: PPUSH
15033: LD_VAR 0 3
15037: PPUSH
15038: LD_INT 1
15040: PPUSH
15041: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15045: LD_INT 15
15047: PPUSH
15048: LD_VAR 0 3
15052: PPUSH
15053: LD_INT 1
15055: PPUSH
15056: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15060: LD_INT 16
15062: PPUSH
15063: LD_VAR 0 3
15067: PPUSH
15068: LD_INT 1
15070: PPUSH
15071: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15075: LD_INT 17
15077: PPUSH
15078: LD_VAR 0 3
15082: PPUSH
15083: LD_INT 1
15085: PPUSH
15086: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15090: LD_INT 19
15092: PPUSH
15093: LD_VAR 0 3
15097: PPUSH
15098: LD_INT 1
15100: PPUSH
15101: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15105: LD_INT 20
15107: PPUSH
15108: LD_VAR 0 3
15112: PPUSH
15113: LD_INT 1
15115: PPUSH
15116: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15120: LD_INT 21
15122: PPUSH
15123: LD_VAR 0 3
15127: PPUSH
15128: LD_INT 1
15130: PPUSH
15131: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15135: LD_INT 23
15137: PPUSH
15138: LD_VAR 0 3
15142: PPUSH
15143: LD_INT 1
15145: PPUSH
15146: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15150: LD_INT 26
15152: PPUSH
15153: LD_VAR 0 3
15157: PPUSH
15158: LD_INT 1
15160: PPUSH
15161: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15165: LD_INT 27
15167: PPUSH
15168: LD_VAR 0 3
15172: PPUSH
15173: LD_INT 1
15175: PPUSH
15176: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15180: LD_INT 28
15182: PPUSH
15183: LD_VAR 0 3
15187: PPUSH
15188: LD_INT 1
15190: PPUSH
15191: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15195: LD_INT 29
15197: PPUSH
15198: LD_VAR 0 3
15202: PPUSH
15203: LD_INT 1
15205: PPUSH
15206: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15210: LD_INT 30
15212: PPUSH
15213: LD_VAR 0 3
15217: PPUSH
15218: LD_INT 1
15220: PPUSH
15221: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15225: LD_INT 31
15227: PPUSH
15228: LD_VAR 0 3
15232: PPUSH
15233: LD_INT 1
15235: PPUSH
15236: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15240: LD_INT 32
15242: PPUSH
15243: LD_VAR 0 3
15247: PPUSH
15248: LD_INT 1
15250: PPUSH
15251: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15255: LD_INT 36
15257: PPUSH
15258: LD_VAR 0 3
15262: PPUSH
15263: LD_INT 1
15265: PPUSH
15266: CALL_OW 324
// end ; 5 :
15270: GO 17401
15272: LD_INT 5
15274: DOUBLE
15275: EQUAL
15276: IFTRUE 15280
15278: GO 16393
15280: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15281: LD_INT 35
15283: PPUSH
15284: LD_VAR 0 3
15288: PPUSH
15289: LD_INT 1
15291: PPUSH
15292: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15296: LD_INT 45
15298: PPUSH
15299: LD_VAR 0 3
15303: PPUSH
15304: LD_INT 1
15306: PPUSH
15307: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15311: LD_INT 46
15313: PPUSH
15314: LD_VAR 0 3
15318: PPUSH
15319: LD_INT 1
15321: PPUSH
15322: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15326: LD_INT 47
15328: PPUSH
15329: LD_VAR 0 3
15333: PPUSH
15334: LD_INT 1
15336: PPUSH
15337: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15341: LD_INT 1
15343: PPUSH
15344: LD_VAR 0 3
15348: PPUSH
15349: LD_INT 1
15351: PPUSH
15352: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15356: LD_INT 2
15358: PPUSH
15359: LD_VAR 0 3
15363: PPUSH
15364: LD_INT 1
15366: PPUSH
15367: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15371: LD_INT 11
15373: PPUSH
15374: LD_VAR 0 3
15378: PPUSH
15379: LD_INT 1
15381: PPUSH
15382: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15386: LD_INT 20
15388: PPUSH
15389: LD_VAR 0 3
15393: PPUSH
15394: LD_INT 1
15396: PPUSH
15397: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15401: LD_INT 48
15403: PPUSH
15404: LD_VAR 0 3
15408: PPUSH
15409: LD_INT 1
15411: PPUSH
15412: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15416: LD_INT 49
15418: PPUSH
15419: LD_VAR 0 3
15423: PPUSH
15424: LD_INT 1
15426: PPUSH
15427: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15431: LD_INT 69
15433: PPUSH
15434: LD_VAR 0 3
15438: PPUSH
15439: LD_INT 1
15441: PPUSH
15442: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15446: LD_INT 39
15448: PPUSH
15449: LD_VAR 0 3
15453: PPUSH
15454: LD_INT 1
15456: PPUSH
15457: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15461: LD_INT 34
15463: PPUSH
15464: LD_VAR 0 3
15468: PPUSH
15469: LD_INT 1
15471: PPUSH
15472: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15476: LD_INT 42
15478: PPUSH
15479: LD_VAR 0 3
15483: PPUSH
15484: LD_INT 1
15486: PPUSH
15487: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15491: LD_INT 44
15493: PPUSH
15494: LD_VAR 0 3
15498: PPUSH
15499: LD_INT 1
15501: PPUSH
15502: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15506: LD_INT 41
15508: PPUSH
15509: LD_VAR 0 3
15513: PPUSH
15514: LD_INT 1
15516: PPUSH
15517: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15521: LD_INT 40
15523: PPUSH
15524: LD_VAR 0 3
15528: PPUSH
15529: LD_INT 1
15531: PPUSH
15532: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15536: LD_INT 43
15538: PPUSH
15539: LD_VAR 0 3
15543: PPUSH
15544: LD_INT 1
15546: PPUSH
15547: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15551: LD_INT 70
15553: PPUSH
15554: LD_VAR 0 3
15558: PPUSH
15559: LD_INT 1
15561: PPUSH
15562: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15566: LD_INT 51
15568: PPUSH
15569: LD_VAR 0 3
15573: PPUSH
15574: LD_INT 1
15576: PPUSH
15577: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15581: LD_INT 52
15583: PPUSH
15584: LD_VAR 0 3
15588: PPUSH
15589: LD_INT 1
15591: PPUSH
15592: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15596: LD_INT 6
15598: PPUSH
15599: LD_VAR 0 3
15603: PPUSH
15604: LD_INT 1
15606: PPUSH
15607: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15611: LD_INT 15
15613: PPUSH
15614: LD_VAR 0 3
15618: PPUSH
15619: LD_INT 1
15621: PPUSH
15622: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15626: LD_INT 7
15628: PPUSH
15629: LD_VAR 0 3
15633: PPUSH
15634: LD_INT 1
15636: PPUSH
15637: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15641: LD_INT 12
15643: PPUSH
15644: LD_VAR 0 3
15648: PPUSH
15649: LD_INT 1
15651: PPUSH
15652: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15656: LD_INT 17
15658: PPUSH
15659: LD_VAR 0 3
15663: PPUSH
15664: LD_INT 1
15666: PPUSH
15667: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15671: LD_INT 18
15673: PPUSH
15674: LD_VAR 0 3
15678: PPUSH
15679: LD_INT 1
15681: PPUSH
15682: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15686: LD_INT 60
15688: PPUSH
15689: LD_VAR 0 3
15693: PPUSH
15694: LD_INT 1
15696: PPUSH
15697: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15701: LD_INT 32
15703: PPUSH
15704: LD_VAR 0 3
15708: PPUSH
15709: LD_INT 1
15711: PPUSH
15712: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15716: LD_INT 9
15718: PPUSH
15719: LD_VAR 0 3
15723: PPUSH
15724: LD_INT 1
15726: PPUSH
15727: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15731: LD_INT 57
15733: PPUSH
15734: LD_VAR 0 3
15738: PPUSH
15739: LD_INT 1
15741: PPUSH
15742: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15746: LD_INT 30
15748: PPUSH
15749: LD_VAR 0 3
15753: PPUSH
15754: LD_INT 1
15756: PPUSH
15757: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15761: LD_INT 37
15763: PPUSH
15764: LD_VAR 0 3
15768: PPUSH
15769: LD_INT 1
15771: PPUSH
15772: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15776: LD_INT 63
15778: PPUSH
15779: LD_VAR 0 3
15783: PPUSH
15784: LD_INT 1
15786: PPUSH
15787: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15791: LD_INT 3
15793: PPUSH
15794: LD_VAR 0 3
15798: PPUSH
15799: LD_INT 1
15801: PPUSH
15802: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15806: LD_INT 4
15808: PPUSH
15809: LD_VAR 0 3
15813: PPUSH
15814: LD_INT 1
15816: PPUSH
15817: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15821: LD_INT 5
15823: PPUSH
15824: LD_VAR 0 3
15828: PPUSH
15829: LD_INT 1
15831: PPUSH
15832: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15836: LD_INT 66
15838: PPUSH
15839: LD_VAR 0 3
15843: PPUSH
15844: LD_INT 1
15846: PPUSH
15847: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15851: LD_INT 21
15853: PPUSH
15854: LD_VAR 0 3
15858: PPUSH
15859: LD_INT 1
15861: PPUSH
15862: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15866: LD_INT 22
15868: PPUSH
15869: LD_VAR 0 3
15873: PPUSH
15874: LD_INT 1
15876: PPUSH
15877: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15881: LD_INT 19
15883: PPUSH
15884: LD_VAR 0 3
15888: PPUSH
15889: LD_INT 1
15891: PPUSH
15892: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15896: LD_INT 54
15898: PPUSH
15899: LD_VAR 0 3
15903: PPUSH
15904: LD_INT 1
15906: PPUSH
15907: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15911: LD_INT 55
15913: PPUSH
15914: LD_VAR 0 3
15918: PPUSH
15919: LD_INT 1
15921: PPUSH
15922: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15926: LD_INT 0
15928: PPUSH
15929: LD_VAR 0 3
15933: PPUSH
15934: LD_INT 1
15936: PPUSH
15937: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15941: LD_INT 1
15943: PPUSH
15944: LD_VAR 0 3
15948: PPUSH
15949: LD_INT 1
15951: PPUSH
15952: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15956: LD_INT 2
15958: PPUSH
15959: LD_VAR 0 3
15963: PPUSH
15964: LD_INT 1
15966: PPUSH
15967: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15971: LD_INT 3
15973: PPUSH
15974: LD_VAR 0 3
15978: PPUSH
15979: LD_INT 1
15981: PPUSH
15982: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15986: LD_INT 4
15988: PPUSH
15989: LD_VAR 0 3
15993: PPUSH
15994: LD_INT 1
15996: PPUSH
15997: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16001: LD_INT 5
16003: PPUSH
16004: LD_VAR 0 3
16008: PPUSH
16009: LD_INT 1
16011: PPUSH
16012: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16016: LD_INT 6
16018: PPUSH
16019: LD_VAR 0 3
16023: PPUSH
16024: LD_INT 1
16026: PPUSH
16027: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16031: LD_INT 7
16033: PPUSH
16034: LD_VAR 0 3
16038: PPUSH
16039: LD_INT 1
16041: PPUSH
16042: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16046: LD_INT 8
16048: PPUSH
16049: LD_VAR 0 3
16053: PPUSH
16054: LD_INT 1
16056: PPUSH
16057: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16061: LD_INT 10
16063: PPUSH
16064: LD_VAR 0 3
16068: PPUSH
16069: LD_INT 1
16071: PPUSH
16072: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16076: LD_INT 11
16078: PPUSH
16079: LD_VAR 0 3
16083: PPUSH
16084: LD_INT 1
16086: PPUSH
16087: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16091: LD_INT 12
16093: PPUSH
16094: LD_VAR 0 3
16098: PPUSH
16099: LD_INT 1
16101: PPUSH
16102: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16106: LD_INT 13
16108: PPUSH
16109: LD_VAR 0 3
16113: PPUSH
16114: LD_INT 1
16116: PPUSH
16117: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16121: LD_INT 14
16123: PPUSH
16124: LD_VAR 0 3
16128: PPUSH
16129: LD_INT 1
16131: PPUSH
16132: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16136: LD_INT 15
16138: PPUSH
16139: LD_VAR 0 3
16143: PPUSH
16144: LD_INT 1
16146: PPUSH
16147: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16151: LD_INT 16
16153: PPUSH
16154: LD_VAR 0 3
16158: PPUSH
16159: LD_INT 1
16161: PPUSH
16162: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16166: LD_INT 17
16168: PPUSH
16169: LD_VAR 0 3
16173: PPUSH
16174: LD_INT 1
16176: PPUSH
16177: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
16181: LD_INT 18
16183: PPUSH
16184: LD_VAR 0 3
16188: PPUSH
16189: LD_INT 1
16191: PPUSH
16192: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16196: LD_INT 19
16198: PPUSH
16199: LD_VAR 0 3
16203: PPUSH
16204: LD_INT 1
16206: PPUSH
16207: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16211: LD_INT 20
16213: PPUSH
16214: LD_VAR 0 3
16218: PPUSH
16219: LD_INT 1
16221: PPUSH
16222: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16226: LD_INT 21
16228: PPUSH
16229: LD_VAR 0 3
16233: PPUSH
16234: LD_INT 1
16236: PPUSH
16237: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16241: LD_INT 23
16243: PPUSH
16244: LD_VAR 0 3
16248: PPUSH
16249: LD_INT 1
16251: PPUSH
16252: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16256: LD_INT 26
16258: PPUSH
16259: LD_VAR 0 3
16263: PPUSH
16264: LD_INT 1
16266: PPUSH
16267: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16271: LD_INT 27
16273: PPUSH
16274: LD_VAR 0 3
16278: PPUSH
16279: LD_INT 1
16281: PPUSH
16282: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16286: LD_INT 28
16288: PPUSH
16289: LD_VAR 0 3
16293: PPUSH
16294: LD_INT 1
16296: PPUSH
16297: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16301: LD_INT 29
16303: PPUSH
16304: LD_VAR 0 3
16308: PPUSH
16309: LD_INT 1
16311: PPUSH
16312: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16316: LD_INT 30
16318: PPUSH
16319: LD_VAR 0 3
16323: PPUSH
16324: LD_INT 1
16326: PPUSH
16327: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16331: LD_INT 31
16333: PPUSH
16334: LD_VAR 0 3
16338: PPUSH
16339: LD_INT 1
16341: PPUSH
16342: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16346: LD_INT 32
16348: PPUSH
16349: LD_VAR 0 3
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
16361: LD_INT 33
16363: PPUSH
16364: LD_VAR 0 3
16368: PPUSH
16369: LD_INT 1
16371: PPUSH
16372: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16376: LD_INT 36
16378: PPUSH
16379: LD_VAR 0 3
16383: PPUSH
16384: LD_INT 1
16386: PPUSH
16387: CALL_OW 324
// end ; 6 :
16391: GO 17401
16393: LD_INT 6
16395: DOUBLE
16396: EQUAL
16397: IFTRUE 16401
16399: GO 17326
16401: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16402: LD_INT 35
16404: PPUSH
16405: LD_VAR 0 3
16409: PPUSH
16410: LD_INT 1
16412: PPUSH
16413: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16417: LD_INT 45
16419: PPUSH
16420: LD_VAR 0 3
16424: PPUSH
16425: LD_INT 1
16427: PPUSH
16428: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16432: LD_INT 46
16434: PPUSH
16435: LD_VAR 0 3
16439: PPUSH
16440: LD_INT 1
16442: PPUSH
16443: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16447: LD_INT 47
16449: PPUSH
16450: LD_VAR 0 3
16454: PPUSH
16455: LD_INT 1
16457: PPUSH
16458: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16462: LD_INT 1
16464: PPUSH
16465: LD_VAR 0 3
16469: PPUSH
16470: LD_INT 1
16472: PPUSH
16473: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16477: LD_INT 2
16479: PPUSH
16480: LD_VAR 0 3
16484: PPUSH
16485: LD_INT 1
16487: PPUSH
16488: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16492: LD_INT 11
16494: PPUSH
16495: LD_VAR 0 3
16499: PPUSH
16500: LD_INT 1
16502: PPUSH
16503: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16507: LD_INT 20
16509: PPUSH
16510: LD_VAR 0 3
16514: PPUSH
16515: LD_INT 1
16517: PPUSH
16518: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16522: LD_INT 48
16524: PPUSH
16525: LD_VAR 0 3
16529: PPUSH
16530: LD_INT 1
16532: PPUSH
16533: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16537: LD_INT 49
16539: PPUSH
16540: LD_VAR 0 3
16544: PPUSH
16545: LD_INT 1
16547: PPUSH
16548: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
16552: LD_INT 50
16554: PPUSH
16555: LD_VAR 0 3
16559: PPUSH
16560: LD_INT 1
16562: PPUSH
16563: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16567: LD_INT 69
16569: PPUSH
16570: LD_VAR 0 3
16574: PPUSH
16575: LD_INT 1
16577: PPUSH
16578: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16582: LD_INT 39
16584: PPUSH
16585: LD_VAR 0 3
16589: PPUSH
16590: LD_INT 1
16592: PPUSH
16593: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16597: LD_INT 34
16599: PPUSH
16600: LD_VAR 0 3
16604: PPUSH
16605: LD_INT 1
16607: PPUSH
16608: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16612: LD_INT 42
16614: PPUSH
16615: LD_VAR 0 3
16619: PPUSH
16620: LD_INT 1
16622: PPUSH
16623: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16627: LD_INT 44
16629: PPUSH
16630: LD_VAR 0 3
16634: PPUSH
16635: LD_INT 1
16637: PPUSH
16638: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16642: LD_INT 41
16644: PPUSH
16645: LD_VAR 0 3
16649: PPUSH
16650: LD_INT 1
16652: PPUSH
16653: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
16657: LD_INT 13
16659: PPUSH
16660: LD_VAR 0 3
16664: PPUSH
16665: LD_INT 1
16667: PPUSH
16668: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16672: LD_INT 40
16674: PPUSH
16675: LD_VAR 0 3
16679: PPUSH
16680: LD_INT 1
16682: PPUSH
16683: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16687: LD_INT 43
16689: PPUSH
16690: LD_VAR 0 3
16694: PPUSH
16695: LD_INT 1
16697: PPUSH
16698: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16702: LD_INT 70
16704: PPUSH
16705: LD_VAR 0 3
16709: PPUSH
16710: LD_INT 1
16712: PPUSH
16713: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
16717: LD_INT 23
16719: PPUSH
16720: LD_VAR 0 3
16724: PPUSH
16725: LD_INT 1
16727: PPUSH
16728: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16732: LD_INT 51
16734: PPUSH
16735: LD_VAR 0 3
16739: PPUSH
16740: LD_INT 1
16742: PPUSH
16743: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16747: LD_INT 52
16749: PPUSH
16750: LD_VAR 0 3
16754: PPUSH
16755: LD_INT 1
16757: PPUSH
16758: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16762: LD_INT 6
16764: PPUSH
16765: LD_VAR 0 3
16769: PPUSH
16770: LD_INT 1
16772: PPUSH
16773: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16777: LD_INT 15
16779: PPUSH
16780: LD_VAR 0 3
16784: PPUSH
16785: LD_INT 1
16787: PPUSH
16788: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16792: LD_INT 7
16794: PPUSH
16795: LD_VAR 0 3
16799: PPUSH
16800: LD_INT 1
16802: PPUSH
16803: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16807: LD_INT 12
16809: PPUSH
16810: LD_VAR 0 3
16814: PPUSH
16815: LD_INT 1
16817: PPUSH
16818: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
16822: LD_INT 10
16824: PPUSH
16825: LD_VAR 0 3
16829: PPUSH
16830: LD_INT 1
16832: PPUSH
16833: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16837: LD_INT 17
16839: PPUSH
16840: LD_VAR 0 3
16844: PPUSH
16845: LD_INT 1
16847: PPUSH
16848: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16852: LD_INT 18
16854: PPUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: LD_INT 1
16862: PPUSH
16863: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16867: LD_INT 60
16869: PPUSH
16870: LD_VAR 0 3
16874: PPUSH
16875: LD_INT 1
16877: PPUSH
16878: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
16882: LD_INT 61
16884: PPUSH
16885: LD_VAR 0 3
16889: PPUSH
16890: LD_INT 1
16892: PPUSH
16893: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16897: LD_INT 32
16899: PPUSH
16900: LD_VAR 0 3
16904: PPUSH
16905: LD_INT 1
16907: PPUSH
16908: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
16912: LD_INT 27
16914: PPUSH
16915: LD_VAR 0 3
16919: PPUSH
16920: LD_INT 1
16922: PPUSH
16923: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
16927: LD_INT 36
16929: PPUSH
16930: LD_VAR 0 3
16934: PPUSH
16935: LD_INT 1
16937: PPUSH
16938: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
16942: LD_INT 33
16944: PPUSH
16945: LD_VAR 0 3
16949: PPUSH
16950: LD_INT 1
16952: PPUSH
16953: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16957: LD_INT 9
16959: PPUSH
16960: LD_VAR 0 3
16964: PPUSH
16965: LD_INT 1
16967: PPUSH
16968: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
16972: LD_INT 38
16974: PPUSH
16975: LD_VAR 0 3
16979: PPUSH
16980: LD_INT 1
16982: PPUSH
16983: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16987: LD_INT 57
16989: PPUSH
16990: LD_VAR 0 3
16994: PPUSH
16995: LD_INT 1
16997: PPUSH
16998: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
17002: LD_INT 58
17004: PPUSH
17005: LD_VAR 0 3
17009: PPUSH
17010: LD_INT 1
17012: PPUSH
17013: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
17017: LD_INT 28
17019: PPUSH
17020: LD_VAR 0 3
17024: PPUSH
17025: LD_INT 1
17027: PPUSH
17028: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
17032: LD_INT 29
17034: PPUSH
17035: LD_VAR 0 3
17039: PPUSH
17040: LD_INT 1
17042: PPUSH
17043: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17047: LD_INT 30
17049: PPUSH
17050: LD_VAR 0 3
17054: PPUSH
17055: LD_INT 1
17057: PPUSH
17058: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17062: LD_INT 37
17064: PPUSH
17065: LD_VAR 0 3
17069: PPUSH
17070: LD_INT 1
17072: PPUSH
17073: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17077: LD_INT 63
17079: PPUSH
17080: LD_VAR 0 3
17084: PPUSH
17085: LD_INT 1
17087: PPUSH
17088: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
17092: LD_INT 64
17094: PPUSH
17095: LD_VAR 0 3
17099: PPUSH
17100: LD_INT 1
17102: PPUSH
17103: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17107: LD_INT 3
17109: PPUSH
17110: LD_VAR 0 3
17114: PPUSH
17115: LD_INT 1
17117: PPUSH
17118: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17122: LD_INT 4
17124: PPUSH
17125: LD_VAR 0 3
17129: PPUSH
17130: LD_INT 1
17132: PPUSH
17133: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17137: LD_INT 5
17139: PPUSH
17140: LD_VAR 0 3
17144: PPUSH
17145: LD_INT 1
17147: PPUSH
17148: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
17152: LD_INT 8
17154: PPUSH
17155: LD_VAR 0 3
17159: PPUSH
17160: LD_INT 1
17162: PPUSH
17163: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17167: LD_INT 66
17169: PPUSH
17170: LD_VAR 0 3
17174: PPUSH
17175: LD_INT 1
17177: PPUSH
17178: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
17182: LD_INT 67
17184: PPUSH
17185: LD_VAR 0 3
17189: PPUSH
17190: LD_INT 1
17192: PPUSH
17193: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17197: LD_INT 21
17199: PPUSH
17200: LD_VAR 0 3
17204: PPUSH
17205: LD_INT 1
17207: PPUSH
17208: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17212: LD_INT 22
17214: PPUSH
17215: LD_VAR 0 3
17219: PPUSH
17220: LD_INT 1
17222: PPUSH
17223: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17227: LD_INT 19
17229: PPUSH
17230: LD_VAR 0 3
17234: PPUSH
17235: LD_INT 1
17237: PPUSH
17238: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
17242: LD_INT 26
17244: PPUSH
17245: LD_VAR 0 3
17249: PPUSH
17250: LD_INT 1
17252: PPUSH
17253: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17257: LD_INT 54
17259: PPUSH
17260: LD_VAR 0 3
17264: PPUSH
17265: LD_INT 1
17267: PPUSH
17268: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17272: LD_INT 55
17274: PPUSH
17275: LD_VAR 0 3
17279: PPUSH
17280: LD_INT 1
17282: PPUSH
17283: CALL_OW 322
// for i = 0 to 39 do
17287: LD_ADDR_VAR 0 4
17291: PUSH
17292: DOUBLE
17293: LD_INT 0
17295: DEC
17296: ST_TO_ADDR
17297: LD_INT 39
17299: PUSH
17300: FOR_TO
17301: IFFALSE 17322
// SetRestrict ( i , side , true ) ;
17303: LD_VAR 0 4
17307: PPUSH
17308: LD_VAR 0 3
17312: PPUSH
17313: LD_INT 1
17315: PPUSH
17316: CALL_OW 324
17320: GO 17300
17322: POP
17323: POP
// end ; else
17324: GO 17401
17326: POP
// begin for i = 1 to 73 do
17327: LD_ADDR_VAR 0 4
17331: PUSH
17332: DOUBLE
17333: LD_INT 1
17335: DEC
17336: ST_TO_ADDR
17337: LD_INT 73
17339: PUSH
17340: FOR_TO
17341: IFFALSE 17362
// SetTech ( i , side , state_enabled ) ;
17343: LD_VAR 0 4
17347: PPUSH
17348: LD_VAR 0 3
17352: PPUSH
17353: LD_INT 1
17355: PPUSH
17356: CALL_OW 322
17360: GO 17340
17362: POP
17363: POP
// for i = 0 to 39 do
17364: LD_ADDR_VAR 0 4
17368: PUSH
17369: DOUBLE
17370: LD_INT 0
17372: DEC
17373: ST_TO_ADDR
17374: LD_INT 39
17376: PUSH
17377: FOR_TO
17378: IFFALSE 17399
// SetRestrict ( i , side , true ) ;
17380: LD_VAR 0 4
17384: PPUSH
17385: LD_VAR 0 3
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: CALL_OW 324
17397: GO 17377
17399: POP
17400: POP
// end ; end ; end ;
17401: GO 13406
17403: POP
17404: POP
// end ;
17405: LD_VAR 0 2
17409: RET
