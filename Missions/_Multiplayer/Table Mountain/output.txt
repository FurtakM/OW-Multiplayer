// export game_type , def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_shared_vision , def_morale_flags , def_siberite_detection , def_siberite_bomb , def_people_respawning , def_builduptime ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , sci1_skills , sci2_skills , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export playing_sides , playing_teams , sci1 , sci2 ; export Side_Count , Team_Count , Player_Team , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Positions , Team_Game ; export depot_def , breastworks_def , start_def , teleport_def ; export commander , battle_flags_id ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if MultiPlayer then
  11: LD_OWVAR 4
  15: IFFALSE 89
// begin game_type = mp_game_type ;
  17: LD_ADDR_EXP 1
  21: PUSH
  22: LD_OWVAR 6
  26: ST_TO_ADDR
// Your_Side = mp_player_side ;
  27: LD_ADDR_OWVAR 2
  31: PUSH
  32: LD_OWVAR 7
  36: ST_TO_ADDR
// Player_Team = mp_player_team ;
  37: LD_ADDR_EXP 32
  41: PUSH
  42: LD_OWVAR 8
  46: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  47: LD_ADDR_EXP 36
  51: PUSH
  52: LD_OWVAR 17
  56: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  57: LD_ADDR_EXP 33
  61: PUSH
  62: LD_OWVAR 15
  66: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  67: LD_ADDR_EXP 37
  71: PUSH
  72: LD_OWVAR 16
  76: ST_TO_ADDR
// Teams = mp_teams ;
  77: LD_ADDR_EXP 34
  81: PUSH
  82: LD_OWVAR 12
  86: ST_TO_ADDR
// end else
  87: GO 298
// begin game_type = 12 ;
  89: LD_ADDR_EXP 1
  93: PUSH
  94: LD_INT 12
  96: ST_TO_ADDR
// Your_Side = 4 ;
  97: LD_ADDR_OWVAR 2
 101: PUSH
 102: LD_INT 4
 104: ST_TO_ADDR
// Player_Team = 1 ;
 105: LD_ADDR_EXP 32
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// Side_Positions = [ 0 , 2 , 0 , 4 , 0 , 1 , 3 , 0 ] ;
 113: LD_ADDR_EXP 36
 117: PUSH
 118: LD_INT 0
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: LD_INT 0
 126: PUSH
 127: LD_INT 4
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 1
 135: PUSH
 136: LD_INT 3
 138: PUSH
 139: LD_INT 0
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 1 , 0 , 2 , 2 , 0 ] ;
 152: LD_ADDR_EXP 33
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 191: LD_ADDR_EXP 37
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: LD_INT 3
 201: PUSH
 202: LD_INT 0
 204: PUSH
 205: LD_INT 2
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 3
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 230: LD_ADDR_EXP 35
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: LD_INT 0
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// Teams = [ [ 2 , 4 ] , [ 6 , 7 ] ] ;
 269: LD_ADDR_EXP 34
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: LD_INT 4
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: PUSH
 284: LD_INT 6
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 298: LD_ADDR_EXP 30
 302: PUSH
 303: LD_EXP 36
 307: PUSH
 308: LD_INT 0
 310: PUSH
 311: EMPTY
 312: LIST
 313: DIFF
 314: PUSH
 315: LD_INT 0
 317: PLUS
 318: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 319: LD_ADDR_EXP 31
 323: PUSH
 324: LD_EXP 33
 328: PUSH
 329: LD_INT 0
 331: PUSH
 332: EMPTY
 333: LIST
 334: DIFF
 335: PUSH
 336: LD_INT 0
 338: PLUS
 339: ST_TO_ADDR
// if MultiPlayer then
 340: LD_OWVAR 4
 344: IFFALSE 504
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 346: LD_ADDR_EXP 2
 350: PUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 359: LD_ADDR_EXP 3
 363: PUSH
 364: LD_INT 1
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 372: LD_ADDR_EXP 4
 376: PUSH
 377: LD_INT 2
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 385: LD_ADDR_EXP 5
 389: PUSH
 390: LD_INT 3
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 398: LD_ADDR_EXP 6
 402: PUSH
 403: LD_INT 4
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 10
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 424: LD_ADDR_EXP 8
 428: PUSH
 429: LD_INT 11
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 437: LD_ADDR_EXP 9
 441: PUSH
 442: LD_INT 12
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 13 ) ;
 450: LD_ADDR_EXP 10
 454: PUSH
 455: LD_INT 13
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 463: LD_ADDR_EXP 11
 467: PUSH
 468: LD_INT 14
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 476: LD_ADDR_EXP 12
 480: PUSH
 481: LD_INT 20
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 489: LD_ADDR_VAR 0 9
 493: PUSH
 494: LD_INT 22
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// end else
 502: GO 604
// begin randomize ;
 504: CALL_OW 10
// def_base_level = 3 ;
 508: LD_ADDR_EXP 2
 512: PUSH
 513: LD_INT 3
 515: ST_TO_ADDR
// def_amount_of_people = 1 ;
 516: LD_ADDR_EXP 3
 520: PUSH
 521: LD_INT 1
 523: ST_TO_ADDR
// def_skill_level = 1 ;
 524: LD_ADDR_EXP 4
 528: PUSH
 529: LD_INT 1
 531: ST_TO_ADDR
// def_starting_resources = 2 ;
 532: LD_ADDR_EXP 5
 536: PUSH
 537: LD_INT 2
 539: ST_TO_ADDR
// def_shipments_density = 1 ;
 540: LD_ADDR_EXP 6
 544: PUSH
 545: LD_INT 1
 547: ST_TO_ADDR
// def_shared_vision = 1 ;
 548: LD_ADDR_EXP 7
 552: PUSH
 553: LD_INT 1
 555: ST_TO_ADDR
// def_morale_flags = 3 ;
 556: LD_ADDR_EXP 8
 560: PUSH
 561: LD_INT 3
 563: ST_TO_ADDR
// def_siberite_detection = 0 ;
 564: LD_ADDR_EXP 9
 568: PUSH
 569: LD_INT 0
 571: ST_TO_ADDR
// def_siberite_bomb = 2 ;
 572: LD_ADDR_EXP 10
 576: PUSH
 577: LD_INT 2
 579: ST_TO_ADDR
// def_people_respawning = 2 ;
 580: LD_ADDR_EXP 11
 584: PUSH
 585: LD_INT 2
 587: ST_TO_ADDR
// def_builduptime := 1 ;
 588: LD_ADDR_EXP 12
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// tech_level = 6 ;
 596: LD_ADDR_VAR 0 9
 600: PUSH
 601: LD_INT 6
 603: ST_TO_ADDR
// end ; if isSGUI then
 604: LD_OWVAR 83
 608: IFFALSE 616
// setMpTechs ( ) else
 610: CALL 10267 0 0
 614: GO 629
// begin SetMpTechLevel ( tech_level + 1 ) ;
 616: LD_VAR 0 9
 620: PUSH
 621: LD_INT 1
 623: PLUS
 624: PPUSH
 625: CALL 10414 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 629: LD_ADDR_EXP 13
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: LD_INT 1
 642: PUSH
 643: LD_INT 1
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: PUSH
 652: LD_EXP 2
 656: PUSH
 657: LD_INT 1
 659: PLUS
 660: ARRAY
 661: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 662: LD_ADDR_EXP 14
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 4
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: LD_EXP 2
 689: PUSH
 690: LD_INT 1
 692: PLUS
 693: ARRAY
 694: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 695: LD_ADDR_EXP 15
 699: PUSH
 700: LD_INT 9
 702: PUSH
 703: LD_INT 12
 705: PUSH
 706: LD_INT 15
 708: PUSH
 709: LD_INT 24
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: PUSH
 718: LD_EXP 3
 722: PUSH
 723: LD_INT 1
 725: PLUS
 726: ARRAY
 727: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 728: LD_ADDR_EXP 16
 732: PUSH
 733: LD_INT 2
 735: PUSH
 736: LD_INT 3
 738: PUSH
 739: LD_INT 4
 741: PUSH
 742: LD_INT 5
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: PUSH
 751: LD_EXP 4
 755: PUSH
 756: LD_INT 1
 758: PLUS
 759: ARRAY
 760: ST_TO_ADDR
// sci1_skills = [ [ 0 , 2 , 1 , 4 ] , [ 1 , 3 , 1 , 5 ] , [ 1 , 4 , 2 , 6 ] , [ 2 , 5 , 2 , 7 ] ] [ def_skill_level + 1 ] ;
 761: LD_ADDR_EXP 21
 765: PUSH
 766: LD_INT 0
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: LD_INT 1
 774: PUSH
 775: LD_INT 4
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 1
 786: PUSH
 787: LD_INT 3
 789: PUSH
 790: LD_INT 1
 792: PUSH
 793: LD_INT 5
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 4
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 6
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 2
 822: PUSH
 823: LD_INT 5
 825: PUSH
 826: LD_INT 2
 828: PUSH
 829: LD_INT 7
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: PUSH
 844: LD_EXP 4
 848: PUSH
 849: LD_INT 1
 851: PLUS
 852: ARRAY
 853: ST_TO_ADDR
// sci2_skills = [ [ 2 , 1 , 1 , 3 ] , [ 2 , 2 , 1 , 4 ] , [ 3 , 3 , 2 , 5 ] , [ 3 , 4 , 3 , 6 ] ] [ def_skill_level + 1 ] ;
 854: LD_ADDR_EXP 22
 858: PUSH
 859: LD_INT 2
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 1
 867: PUSH
 868: LD_INT 3
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: LD_INT 2
 879: PUSH
 880: LD_INT 2
 882: PUSH
 883: LD_INT 1
 885: PUSH
 886: LD_INT 4
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 3
 900: PUSH
 901: LD_INT 2
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 3
 915: PUSH
 916: LD_INT 4
 918: PUSH
 919: LD_INT 3
 921: PUSH
 922: LD_INT 6
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: PUSH
 937: LD_EXP 4
 941: PUSH
 942: LD_INT 1
 944: PLUS
 945: ARRAY
 946: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_INT 0
 954: PUSH
 955: LD_INT 0
 957: PUSH
 958: LD_INT 0
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 30
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 0
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 50
 982: PUSH
 983: LD_INT 20
 985: PUSH
 986: LD_INT 0
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 80
 996: PUSH
 997: LD_INT 40
 999: PUSH
1000: LD_INT 20
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_EXP 5
1018: PUSH
1019: LD_INT 1
1021: PLUS
1022: ARRAY
1023: ST_TO_ADDR
// starting_crates = [ [ 8 ] , [ 5 , 10 ] , [ 4 , 8 , 12 ] , [ 3 , 6 , 9 , 12 ] ] [ def_starting_resources + 1 ] ;
1024: LD_ADDR_EXP 17
1028: PUSH
1029: LD_INT 8
1031: PUSH
1032: EMPTY
1033: LIST
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 10
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 8
1050: PUSH
1051: LD_INT 12
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 3
1061: PUSH
1062: LD_INT 6
1064: PUSH
1065: LD_INT 9
1067: PUSH
1068: LD_INT 12
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: LD_EXP 5
1087: PUSH
1088: LD_INT 1
1090: PLUS
1091: ARRAY
1092: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1093: LD_ADDR_EXP 19
1097: PUSH
1098: LD_INT 20
1100: PUSH
1101: LD_INT 30
1103: PUSH
1104: LD_INT 40
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_EXP 6
1116: PUSH
1117: LD_INT 1
1119: PLUS
1120: ARRAY
1121: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1122: LD_ADDR_EXP 23
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 8400
1132: PUSH
1133: LD_INT 1750
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_EXP 11
1145: PUSH
1146: LD_INT 1
1148: PLUS
1149: ARRAY
1150: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1151: LD_ADDR_EXP 24
1155: PUSH
1156: LD_INT 0
1158: PUSH
1159: LD_INT 21000
1161: PUSH
1162: LD_INT 4200
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_EXP 11
1174: PUSH
1175: LD_INT 1
1177: PLUS
1178: ARRAY
1179: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1180: LD_ADDR_EXP 20
1184: PUSH
1185: LD_INT 1
1187: NEG
1188: PUSH
1189: LD_INT 350
1191: PUSH
1192: LD_INT 700
1194: PUSH
1195: LD_INT 1400
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_EXP 8
1212: PUSH
1213: LD_INT 1
1215: PLUS
1216: ARRAY
1217: ST_TO_ADDR
// battle_flags_id = [ ] ;
1218: LD_ADDR_EXP 47
1222: PUSH
1223: EMPTY
1224: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1225: LD_EXP 10
1229: PUSH
1230: LD_INT 0
1232: EQUAL
1233: IFFALSE 1245
// siberite_bomb_Delay = 0 else
1235: LD_ADDR_EXP 25
1239: PUSH
1240: LD_INT 0
1242: ST_TO_ADDR
1243: GO 1267
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1245: LD_ADDR_EXP 25
1249: PUSH
1250: LD_EXP 10
1254: PUSH
1255: LD_INT 1
1257: MINUS
1258: PUSH
1259: LD_INT 21000
1261: MUL
1262: PUSH
1263: LD_INT 1
1265: PLUS
1266: ST_TO_ADDR
// sci1 := [ ] ;
1267: LD_ADDR_EXP 28
1271: PUSH
1272: EMPTY
1273: ST_TO_ADDR
// sci2 := [ ] ;
1274: LD_ADDR_EXP 29
1278: PUSH
1279: EMPTY
1280: ST_TO_ADDR
// end ;
1281: LD_VAR 0 1
1285: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , br4 , un , i ; begin
1286: LD_INT 0
1288: PPUSH
1289: PPUSH
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
// depot_def = [ ] ;
1297: LD_ADDR_EXP 42
1301: PUSH
1302: EMPTY
1303: ST_TO_ADDR
// breastworks_def = [ ] ;
1304: LD_ADDR_EXP 43
1308: PUSH
1309: EMPTY
1310: ST_TO_ADDR
// for side := 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1751
// begin dep := side * 5 - 4 ;
1327: LD_ADDR_VAR 0 3
1331: PUSH
1332: LD_VAR 0 2
1336: PUSH
1337: LD_INT 5
1339: MUL
1340: PUSH
1341: LD_INT 4
1343: MINUS
1344: ST_TO_ADDR
// br1 := side * 5 - 3 ;
1345: LD_ADDR_VAR 0 4
1349: PUSH
1350: LD_VAR 0 2
1354: PUSH
1355: LD_INT 5
1357: MUL
1358: PUSH
1359: LD_INT 3
1361: MINUS
1362: ST_TO_ADDR
// br2 := side * 5 - 2 ;
1363: LD_ADDR_VAR 0 5
1367: PUSH
1368: LD_VAR 0 2
1372: PUSH
1373: LD_INT 5
1375: MUL
1376: PUSH
1377: LD_INT 2
1379: MINUS
1380: ST_TO_ADDR
// br3 := side * 5 - 1 ;
1381: LD_ADDR_VAR 0 6
1385: PUSH
1386: LD_VAR 0 2
1390: PUSH
1391: LD_INT 5
1393: MUL
1394: PUSH
1395: LD_INT 1
1397: MINUS
1398: ST_TO_ADDR
// br4 := side * 5 ;
1399: LD_ADDR_VAR 0 7
1403: PUSH
1404: LD_VAR 0 2
1408: PUSH
1409: LD_INT 5
1411: MUL
1412: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1413: LD_ADDR_EXP 42
1417: PUSH
1418: LD_EXP 42
1422: PUSH
1423: LD_VAR 0 3
1427: PPUSH
1428: CALL_OW 250
1432: PUSH
1433: LD_VAR 0 3
1437: PPUSH
1438: CALL_OW 251
1442: PUSH
1443: LD_VAR 0 3
1447: PPUSH
1448: CALL_OW 254
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: PUSH
1458: EMPTY
1459: LIST
1460: ADD
1461: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) ] ] ;
1462: LD_ADDR_EXP 44
1466: PUSH
1467: LD_EXP 44
1471: PUSH
1472: LD_VAR 0 3
1476: PPUSH
1477: CALL_OW 250
1481: PPUSH
1482: LD_VAR 0 3
1486: PPUSH
1487: CALL_OW 254
1491: PUSH
1492: LD_INT 6
1494: MOD
1495: PPUSH
1496: LD_INT 6
1498: PPUSH
1499: CALL_OW 272
1503: PUSH
1504: LD_VAR 0 3
1508: PPUSH
1509: CALL_OW 251
1513: PPUSH
1514: LD_VAR 0 3
1518: PPUSH
1519: CALL_OW 254
1523: PUSH
1524: LD_INT 6
1526: MOD
1527: PPUSH
1528: LD_INT 6
1530: PPUSH
1531: CALL_OW 273
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: EMPTY
1541: LIST
1542: ADD
1543: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] , [ GetX ( br4 ) , GetY ( br4 ) , GetDir ( br4 ) ] ] ] ;
1544: LD_ADDR_EXP 43
1548: PUSH
1549: LD_EXP 43
1553: PUSH
1554: LD_VAR 0 4
1558: PPUSH
1559: CALL_OW 250
1563: PUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 251
1573: PUSH
1574: LD_VAR 0 4
1578: PPUSH
1579: CALL_OW 254
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_VAR 0 5
1593: PPUSH
1594: CALL_OW 250
1598: PUSH
1599: LD_VAR 0 5
1603: PPUSH
1604: CALL_OW 251
1608: PUSH
1609: LD_VAR 0 5
1613: PPUSH
1614: CALL_OW 254
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_VAR 0 6
1628: PPUSH
1629: CALL_OW 250
1633: PUSH
1634: LD_VAR 0 6
1638: PPUSH
1639: CALL_OW 251
1643: PUSH
1644: LD_VAR 0 6
1648: PPUSH
1649: CALL_OW 254
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_VAR 0 7
1663: PPUSH
1664: CALL_OW 250
1668: PUSH
1669: LD_VAR 0 7
1673: PPUSH
1674: CALL_OW 251
1678: PUSH
1679: LD_VAR 0 7
1683: PPUSH
1684: CALL_OW 254
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: EMPTY
1701: LIST
1702: ADD
1703: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1704: LD_VAR 0 3
1708: PPUSH
1709: CALL_OW 65
// DestroyUnit ( br1 ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL_OW 65
// DestroyUnit ( br2 ) ;
1722: LD_VAR 0 5
1726: PPUSH
1727: CALL_OW 65
// DestroyUnit ( br3 ) ;
1731: LD_VAR 0 6
1735: PPUSH
1736: CALL_OW 65
// DestroyUnit ( br4 ) ;
1740: LD_VAR 0 7
1744: PPUSH
1745: CALL_OW 65
// end ;
1749: GO 1324
1751: POP
1752: POP
// teleport_def = [ [ 19 , 16 , 0 ] , [ 108 , 9 , 1 ] , [ 62 , 112 , 2 ] , [ 157 , 126 , 1 ] ] ;
1753: LD_ADDR_EXP 45
1757: PUSH
1758: LD_INT 19
1760: PUSH
1761: LD_INT 16
1763: PUSH
1764: LD_INT 0
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 108
1774: PUSH
1775: LD_INT 9
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 62
1788: PUSH
1789: LD_INT 112
1791: PUSH
1792: LD_INT 2
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 157
1802: PUSH
1803: LD_INT 126
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: ST_TO_ADDR
// end ;
1820: LD_VAR 0 1
1824: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1825: LD_INT 0
1827: PPUSH
1828: PPUSH
1829: PPUSH
// Team_Game := 0 ;
1830: LD_ADDR_EXP 41
1834: PUSH
1835: LD_INT 0
1837: ST_TO_ADDR
// for i = 1 to 8 do
1838: LD_ADDR_VAR 0 2
1842: PUSH
1843: DOUBLE
1844: LD_INT 1
1846: DEC
1847: ST_TO_ADDR
1848: LD_INT 8
1850: PUSH
1851: FOR_TO
1852: IFFALSE 1878
// Team_Game := Team_Game + Side_Teams [ i ] ;
1854: LD_ADDR_EXP 41
1858: PUSH
1859: LD_EXP 41
1863: PUSH
1864: LD_EXP 33
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PLUS
1875: ST_TO_ADDR
1876: GO 1851
1878: POP
1879: POP
// if not Team_Game then
1880: LD_EXP 41
1884: NOT
1885: IFFALSE 1897
// Team_Game := false else
1887: LD_ADDR_EXP 41
1891: PUSH
1892: LD_INT 0
1894: ST_TO_ADDR
1895: GO 1905
// Team_Game := true ;
1897: LD_ADDR_EXP 41
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// if not Team_Game then
1905: LD_EXP 41
1909: NOT
1910: IFFALSE 2008
// begin for i = 1 to 8 do
1912: LD_ADDR_VAR 0 2
1916: PUSH
1917: DOUBLE
1918: LD_INT 1
1920: DEC
1921: ST_TO_ADDR
1922: LD_INT 8
1924: PUSH
1925: FOR_TO
1926: IFFALSE 2004
// for j = 1 to 8 do
1928: LD_ADDR_VAR 0 3
1932: PUSH
1933: DOUBLE
1934: LD_INT 1
1936: DEC
1937: ST_TO_ADDR
1938: LD_INT 8
1940: PUSH
1941: FOR_TO
1942: IFFALSE 2000
// if i <> j then
1944: LD_VAR 0 2
1948: PUSH
1949: LD_VAR 0 3
1953: NONEQUAL
1954: IFFALSE 1978
// SetAttitude ( i , j , att_neutral , true ) else
1956: LD_VAR 0 2
1960: PPUSH
1961: LD_VAR 0 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: LD_INT 1
1971: PPUSH
1972: CALL_OW 80
1976: GO 1998
// SetAttitude ( i , j , att_friend , true ) ;
1978: LD_VAR 0 2
1982: PPUSH
1983: LD_VAR 0 3
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL_OW 80
1998: GO 1941
2000: POP
2001: POP
2002: GO 1925
2004: POP
2005: POP
// end else
2006: GO 2183
// begin if def_shared_vision then
2008: LD_EXP 7
2012: IFFALSE 2077
// begin for i in Teams do
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: LD_EXP 34
2023: PUSH
2024: FOR_IN
2025: IFFALSE 2075
// for j = 2 to i do
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: DOUBLE
2033: LD_INT 2
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 2
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2071
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2045: LD_VAR 0 2
2049: PUSH
2050: LD_VAR 0 3
2054: ARRAY
2055: PPUSH
2056: LD_VAR 0 2
2060: PUSH
2061: LD_INT 1
2063: ARRAY
2064: PPUSH
2065: CALL_OW 343
2069: GO 2042
2071: POP
2072: POP
2073: GO 2024
2075: POP
2076: POP
// end ; for i = 1 to 8 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 8
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2181
// for j = 1 to 8 do
2093: LD_ADDR_VAR 0 3
2097: PUSH
2098: DOUBLE
2099: LD_INT 1
2101: DEC
2102: ST_TO_ADDR
2103: LD_INT 8
2105: PUSH
2106: FOR_TO
2107: IFFALSE 2177
// if Side_Teams [ i ] = Side_Teams [ j ] then
2109: LD_EXP 33
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_EXP 33
2124: PUSH
2125: LD_VAR 0 3
2129: ARRAY
2130: EQUAL
2131: IFFALSE 2155
// SetAttitude ( i , j , att_friend , true ) else
2133: LD_VAR 0 2
2137: PPUSH
2138: LD_VAR 0 3
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 1
2148: PPUSH
2149: CALL_OW 80
2153: GO 2175
// SetAttitude ( i , j , att_enemy , true ) ;
2155: LD_VAR 0 2
2159: PPUSH
2160: LD_VAR 0 3
2164: PPUSH
2165: LD_INT 2
2167: PPUSH
2168: LD_INT 1
2170: PPUSH
2171: CALL_OW 80
2175: GO 2106
2177: POP
2178: POP
2179: GO 2090
2181: POP
2182: POP
// end ; end ;
2183: LD_VAR 0 1
2187: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2188: LD_INT 0
2190: PPUSH
2191: PPUSH
2192: PPUSH
2193: PPUSH
// result := [ ] ;
2194: LD_ADDR_VAR 0 8
2198: PUSH
2199: EMPTY
2200: ST_TO_ADDR
// for i := 1 to count do
2201: LD_ADDR_VAR 0 9
2205: PUSH
2206: DOUBLE
2207: LD_INT 1
2209: DEC
2210: ST_TO_ADDR
2211: LD_VAR 0 2
2215: PUSH
2216: FOR_TO
2217: IFFALSE 2611
// begin uc_direction := Rand ( 0 , 5 ) ;
2219: LD_ADDR_OWVAR 24
2223: PUSH
2224: LD_INT 0
2226: PPUSH
2227: LD_INT 5
2229: PPUSH
2230: CALL_OW 12
2234: ST_TO_ADDR
// if commander then
2235: LD_FROM_VAR 0 7
2239: IFFALSE 2348
// begin hc_name := mp_sides_players_names [ side ] ;
2241: LD_ADDR_OWVAR 26
2245: PUSH
2246: LD_OWVAR 19
2250: PUSH
2251: LD_VAR 0 1
2255: ARRAY
2256: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2257: LD_INT 1
2259: PPUSH
2260: LD_INT 2
2262: PPUSH
2263: CALL_OW 12
2267: PPUSH
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_EXP 16
2277: PUSH
2278: LD_INT 2
2280: PLUS
2281: PPUSH
2282: CALL_OW 380
// hc_importance := 105 ;
2286: LD_ADDR_OWVAR 32
2290: PUSH
2291: LD_INT 105
2293: ST_TO_ADDR
// commander := false ;
2294: LD_VAR 0 7
2298: PUSH
2299: LD_INT 0
2301: ST_TO_ADDR
// if Multiplayer then
2302: LD_OWVAR 4
2306: IFFALSE 2346
// begin hc_gallery := MULTIAVATARS ;
2308: LD_ADDR_OWVAR 33
2312: PUSH
2313: LD_STRING MULTIAVATARS
2315: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2316: LD_ADDR_OWVAR 34
2320: PUSH
2321: LD_VAR 0 1
2325: PPUSH
2326: CALL_OW 525
2330: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2331: LD_ADDR_OWVAR 27
2335: PUSH
2336: LD_VAR 0 1
2340: PPUSH
2341: CALL_OW 526
2345: ST_TO_ADDR
// end ; end else
2346: GO 2411
// begin hc_name :=  ;
2348: LD_ADDR_OWVAR 26
2352: PUSH
2353: LD_STRING 
2355: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 2
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: LD_EXP 16
2376: PPUSH
2377: CALL_OW 380
// hc_importance := 0 ;
2381: LD_ADDR_OWVAR 32
2385: PUSH
2386: LD_INT 0
2388: ST_TO_ADDR
// if Multiplayer then
2389: LD_OWVAR 4
2393: IFFALSE 2411
// begin hc_gallery :=  ;
2395: LD_ADDR_OWVAR 33
2399: PUSH
2400: LD_STRING 
2402: ST_TO_ADDR
// hc_face_number := 0 ;
2403: LD_ADDR_OWVAR 34
2407: PUSH
2408: LD_INT 0
2410: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2411: LD_ADDR_VAR 0 11
2415: PUSH
2416: CALL_OW 44
2420: ST_TO_ADDR
// if global_defined then
2421: LD_LOC 2
2425: IFFALSE 2563
// begin j := i ;
2427: LD_ADDR_VAR 0 10
2431: PUSH
2432: LD_VAR 0 9
2436: ST_TO_ADDR
// if cl = class_soldier then
2437: LD_VAR 0 3
2441: PUSH
2442: LD_INT 1
2444: EQUAL
2445: IFFALSE 2463
// j := i + soldiers_created ;
2447: LD_ADDR_VAR 0 10
2451: PUSH
2452: LD_VAR 0 9
2456: PUSH
2457: LD_LOC 3
2461: PLUS
2462: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2463: LD_LOC 1
2467: PUSH
2468: LD_VAR 0 3
2472: ARRAY
2473: PUSH
2474: LD_VAR 0 10
2478: ARRAY
2479: PPUSH
2480: LD_VAR 0 11
2484: PPUSH
2485: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2489: LD_VAR 0 11
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: LD_LOC 1
2501: PUSH
2502: LD_VAR 0 3
2506: ARRAY
2507: PUSH
2508: LD_VAR 0 10
2512: ARRAY
2513: PPUSH
2514: LD_INT 2
2516: PPUSH
2517: CALL_OW 260
2521: PPUSH
2522: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2526: LD_VAR 0 11
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: LD_LOC 1
2538: PUSH
2539: LD_VAR 0 3
2543: ARRAY
2544: PUSH
2545: LD_VAR 0 10
2549: ARRAY
2550: PPUSH
2551: LD_INT 1
2553: PPUSH
2554: CALL_OW 260
2558: PPUSH
2559: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2563: LD_VAR 0 11
2567: PPUSH
2568: LD_VAR 0 4
2572: PPUSH
2573: LD_VAR 0 5
2577: PPUSH
2578: LD_VAR 0 6
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: CALL_OW 50
// result := result ^ [ un ] ;
2590: LD_ADDR_VAR 0 8
2594: PUSH
2595: LD_VAR 0 8
2599: PUSH
2600: LD_VAR 0 11
2604: PUSH
2605: EMPTY
2606: LIST
2607: ADD
2608: ST_TO_ADDR
// end ;
2609: GO 2216
2611: POP
2612: POP
// if not global_defined then
2613: LD_LOC 2
2617: NOT
2618: IFFALSE 2680
// if cl = class_soldier and global_units then
2620: LD_VAR 0 3
2624: PUSH
2625: LD_INT 1
2627: EQUAL
2628: PUSH
2629: LD_LOC 1
2633: AND
2634: IFFALSE 2661
// global_units := [ global_units [ 1 ] ^ result ] else
2636: LD_ADDR_LOC 1
2640: PUSH
2641: LD_LOC 1
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: PUSH
2650: LD_VAR 0 8
2654: ADD
2655: PUSH
2656: EMPTY
2657: LIST
2658: ST_TO_ADDR
2659: GO 2680
// global_units := global_units ^ [ result ] end ;
2661: LD_ADDR_LOC 1
2665: PUSH
2666: LD_LOC 1
2670: PUSH
2671: LD_VAR 0 8
2675: PUSH
2676: EMPTY
2677: LIST
2678: ADD
2679: ST_TO_ADDR
2680: LD_VAR 0 8
2684: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol , t , n1 , n2 ; begin
2685: LD_INT 0
2687: PPUSH
2688: PPUSH
2689: PPUSH
2690: PPUSH
2691: PPUSH
2692: PPUSH
2693: PPUSH
2694: PPUSH
2695: PPUSH
2696: PPUSH
2697: PPUSH
2698: PPUSH
2699: PPUSH
2700: PPUSH
2701: PPUSH
2702: PPUSH
// pos := Side_Positions [ side ] ;
2703: LD_ADDR_VAR 0 3
2707: PUSH
2708: LD_EXP 36
2712: PUSH
2713: LD_VAR 0 1
2717: ARRAY
2718: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2719: LD_ADDR_OWVAR 21
2723: PUSH
2724: LD_EXP 37
2728: PUSH
2729: LD_VAR 0 1
2733: ARRAY
2734: ST_TO_ADDR
// uc_side := side ;
2735: LD_ADDR_OWVAR 20
2739: PUSH
2740: LD_VAR 0 1
2744: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2745: LD_ADDR_VAR 0 4
2749: PUSH
2750: LD_EXP 42
2754: PUSH
2755: LD_VAR 0 3
2759: ARRAY
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2765: LD_ADDR_VAR 0 5
2769: PUSH
2770: LD_EXP 42
2774: PUSH
2775: LD_VAR 0 3
2779: ARRAY
2780: PUSH
2781: LD_INT 2
2783: ARRAY
2784: ST_TO_ADDR
// if is_depot then
2785: LD_EXP 13
2789: IFFALSE 2932
// begin bc_type = b_depot ;
2791: LD_ADDR_OWVAR 42
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
2799: LD_ADDR_VAR 0 10
2803: PUSH
2804: LD_VAR 0 4
2808: PPUSH
2809: LD_VAR 0 5
2813: PPUSH
2814: LD_EXP 42
2818: PUSH
2819: LD_VAR 0 3
2823: ARRAY
2824: PUSH
2825: LD_INT 3
2827: ARRAY
2828: PPUSH
2829: CALL_OW 47
2833: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2834: LD_VAR 0 10
2838: PPUSH
2839: LD_STRING @
2841: PUSH
2842: LD_VAR 0 1
2846: STR
2847: PPUSH
2848: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2852: LD_VAR 0 10
2856: PPUSH
2857: CALL_OW 274
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_EXP 18
2869: PUSH
2870: LD_INT 1
2872: ARRAY
2873: PPUSH
2874: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2878: LD_VAR 0 10
2882: PPUSH
2883: CALL_OW 274
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: LD_EXP 18
2895: PUSH
2896: LD_INT 2
2898: ARRAY
2899: PPUSH
2900: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2904: LD_VAR 0 2
2908: PPUSH
2909: CALL_OW 274
2913: PPUSH
2914: LD_INT 3
2916: PPUSH
2917: LD_EXP 18
2921: PUSH
2922: LD_INT 3
2924: ARRAY
2925: PPUSH
2926: CALL_OW 277
// end else
2930: GO 3076
// begin for i := 1 to 3 do
2932: LD_ADDR_VAR 0 6
2936: PUSH
2937: DOUBLE
2938: LD_INT 1
2940: DEC
2941: ST_TO_ADDR
2942: LD_INT 3
2944: PUSH
2945: FOR_TO
2946: IFFALSE 3074
// begin r := starting_resources [ i ] ;
2948: LD_ADDR_VAR 0 7
2952: PUSH
2953: LD_EXP 18
2957: PUSH
2958: LD_VAR 0 6
2962: ARRAY
2963: ST_TO_ADDR
// while r >= 10 do
2964: LD_VAR 0 7
2968: PUSH
2969: LD_INT 10
2971: GREATEREQUAL
2972: IFFALSE 3072
// if r > 50 then
2974: LD_VAR 0 7
2978: PUSH
2979: LD_INT 50
2981: GREATER
2982: IFFALSE 3028
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
2984: LD_VAR 0 6
2988: PPUSH
2989: LD_INT 5
2991: PPUSH
2992: LD_VAR 0 4
2996: PPUSH
2997: LD_VAR 0 5
3001: PPUSH
3002: LD_INT 4
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL_OW 60
// r := r - 50 ;
3012: LD_ADDR_VAR 0 7
3016: PUSH
3017: LD_VAR 0 7
3021: PUSH
3022: LD_INT 50
3024: MINUS
3025: ST_TO_ADDR
// end else
3026: GO 3070
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3028: LD_VAR 0 6
3032: PPUSH
3033: LD_VAR 0 7
3037: PUSH
3038: LD_INT 10
3040: DIV
3041: PPUSH
3042: LD_VAR 0 4
3046: PPUSH
3047: LD_VAR 0 5
3051: PPUSH
3052: LD_INT 4
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 60
// r := 0 ;
3062: LD_ADDR_VAR 0 7
3066: PUSH
3067: LD_INT 0
3069: ST_TO_ADDR
// end ;
3070: GO 2964
// end ;
3072: GO 2945
3074: POP
3075: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_EXP 44
3085: PUSH
3086: LD_VAR 0 3
3090: ARRAY
3091: PUSH
3092: LD_INT 1
3094: ARRAY
3095: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_EXP 44
3105: PUSH
3106: LD_VAR 0 3
3110: ARRAY
3111: PUSH
3112: LD_INT 2
3114: ARRAY
3115: ST_TO_ADDR
// for r in starting_crates do
3116: LD_ADDR_VAR 0 7
3120: PUSH
3121: LD_EXP 17
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3159
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3129: LD_INT 1
3131: PPUSH
3132: LD_INT 5
3134: PPUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: LD_VAR 0 5
3144: PPUSH
3145: LD_VAR 0 7
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 60
3157: GO 3126
3159: POP
3160: POP
// if def_morale_flags then
3161: LD_EXP 8
3165: IFFALSE 3244
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3167: LD_ADDR_EXP 47
3171: PUSH
3172: LD_EXP 47
3176: PUSH
3177: LD_VAR 0 1
3181: PPUSH
3182: LD_VAR 0 4
3186: PPUSH
3187: LD_VAR 0 5
3191: PPUSH
3192: LD_INT 1
3194: PUSH
3195: LD_INT 100
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 50
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 3
3214: PUSH
3215: LD_INT 20
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: LD_INT 20
3224: PUSH
3225: LD_INT 100
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: PPUSH
3238: CALL_OW 418
3242: ADD
3243: ST_TO_ADDR
// commander := true ;
3244: LD_ADDR_EXP 46
3248: PUSH
3249: LD_INT 1
3251: ST_TO_ADDR
// if game_type in [ 11 , 12 ] then
3252: LD_EXP 1
3256: PUSH
3257: LD_INT 11
3259: PUSH
3260: LD_INT 12
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: IN
3267: IFFALSE 4122
// begin uc_nation = nation_russian ;
3269: LD_ADDR_OWVAR 21
3273: PUSH
3274: LD_INT 3
3276: ST_TO_ADDR
// bc_type = b_teleport ;
3277: LD_ADDR_OWVAR 42
3281: PUSH
3282: LD_INT 34
3284: ST_TO_ADDR
// bc_level = 10 ;
3285: LD_ADDR_OWVAR 43
3289: PUSH
3290: LD_INT 10
3292: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , teleport_def [ pos ] [ 3 ] ) ;
3293: LD_EXP 45
3297: PUSH
3298: LD_VAR 0 3
3302: ARRAY
3303: PUSH
3304: LD_INT 1
3306: ARRAY
3307: PPUSH
3308: LD_EXP 45
3312: PUSH
3313: LD_VAR 0 3
3317: ARRAY
3318: PUSH
3319: LD_INT 2
3321: ARRAY
3322: PPUSH
3323: LD_EXP 45
3327: PUSH
3328: LD_VAR 0 3
3332: ARRAY
3333: PUSH
3334: LD_INT 3
3336: ARRAY
3337: PPUSH
3338: CALL_OW 47
// if game_type = 12 then
3342: LD_EXP 1
3346: PUSH
3347: LD_INT 12
3349: EQUAL
3350: IFFALSE 3386
// if ( side in Teams [ 1 ] ) then
3352: LD_VAR 0 1
3356: PUSH
3357: LD_EXP 34
3361: PUSH
3362: LD_INT 1
3364: ARRAY
3365: IN
3366: IFFALSE 3378
// t := 1 else
3368: LD_ADDR_VAR 0 15
3372: PUSH
3373: LD_INT 1
3375: ST_TO_ADDR
3376: GO 3386
// t := 2 ;
3378: LD_ADDR_VAR 0 15
3382: PUSH
3383: LD_INT 2
3385: ST_TO_ADDR
// hc_importance = 101 ;
3386: LD_ADDR_OWVAR 32
3390: PUSH
3391: LD_INT 101
3393: ST_TO_ADDR
// commander := false ;
3394: LD_ADDR_EXP 46
3398: PUSH
3399: LD_INT 0
3401: ST_TO_ADDR
// n1 := false ;
3402: LD_ADDR_VAR 0 16
3406: PUSH
3407: LD_INT 0
3409: ST_TO_ADDR
// n2 := false ;
3410: LD_ADDR_VAR 0 17
3414: PUSH
3415: LD_INT 0
3417: ST_TO_ADDR
// if ( teams [ t ] + 0 ) = 1 then
3418: LD_EXP 34
3422: PUSH
3423: LD_VAR 0 15
3427: ARRAY
3428: PUSH
3429: LD_INT 0
3431: PLUS
3432: PUSH
3433: LD_INT 1
3435: EQUAL
3436: IFFALSE 3456
// begin n1 := true ;
3438: LD_ADDR_VAR 0 16
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// n2 := true ;
3446: LD_ADDR_VAR 0 17
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// end else
3454: GO 3612
// if t = 1 then
3456: LD_VAR 0 15
3460: PUSH
3461: LD_INT 1
3463: EQUAL
3464: IFFALSE 3540
// if sci1 then
3466: LD_EXP 28
3470: IFFALSE 3511
// if GetSex ( sci1 [ 1 ] ) = sex_male then
3472: LD_EXP 28
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 258
3485: PUSH
3486: LD_INT 1
3488: EQUAL
3489: IFFALSE 3501
// n2 := true else
3491: LD_ADDR_VAR 0 17
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
3499: GO 3509
// n1 := true else
3501: LD_ADDR_VAR 0 16
3505: PUSH
3506: LD_INT 1
3508: ST_TO_ADDR
3509: GO 3538
// if Prob ( 50 ) then
3511: LD_INT 50
3513: PPUSH
3514: CALL_OW 13
3518: IFFALSE 3530
// n1 := true else
3520: LD_ADDR_VAR 0 16
3524: PUSH
3525: LD_INT 1
3527: ST_TO_ADDR
3528: GO 3538
// n2 := true else
3530: LD_ADDR_VAR 0 17
3534: PUSH
3535: LD_INT 1
3537: ST_TO_ADDR
3538: GO 3612
// if sci2 then
3540: LD_EXP 29
3544: IFFALSE 3585
// if GetSex ( sci2 [ 1 ] ) = sex_male then
3546: LD_EXP 29
3550: PUSH
3551: LD_INT 1
3553: ARRAY
3554: PPUSH
3555: CALL_OW 258
3559: PUSH
3560: LD_INT 1
3562: EQUAL
3563: IFFALSE 3575
// n2 := true else
3565: LD_ADDR_VAR 0 17
3569: PUSH
3570: LD_INT 1
3572: ST_TO_ADDR
3573: GO 3583
// n1 := true else
3575: LD_ADDR_VAR 0 16
3579: PUSH
3580: LD_INT 1
3582: ST_TO_ADDR
3583: GO 3612
// if Prob ( 50 ) then
3585: LD_INT 50
3587: PPUSH
3588: CALL_OW 13
3592: IFFALSE 3604
// n1 := true else
3594: LD_ADDR_VAR 0 16
3598: PUSH
3599: LD_INT 1
3601: ST_TO_ADDR
3602: GO 3612
// n2 := true ;
3604: LD_ADDR_VAR 0 17
3608: PUSH
3609: LD_INT 1
3611: ST_TO_ADDR
// if n1 then
3612: LD_VAR 0 16
3616: IFFALSE 3852
// begin hc_name = Prof. Garin ;
3618: LD_ADDR_OWVAR 26
3622: PUSH
3623: LD_STRING Prof. Garin
3625: ST_TO_ADDR
// hc_sex = sex_male ;
3626: LD_ADDR_OWVAR 27
3630: PUSH
3631: LD_INT 1
3633: ST_TO_ADDR
// hc_class = class_scientistic ;
3634: LD_ADDR_OWVAR 28
3638: PUSH
3639: LD_INT 4
3641: ST_TO_ADDR
// hc_gallery = multi ;
3642: LD_ADDR_OWVAR 33
3646: PUSH
3647: LD_STRING multi
3649: ST_TO_ADDR
// hc_face_number = 2 ;
3650: LD_ADDR_OWVAR 34
3654: PUSH
3655: LD_INT 2
3657: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
3658: LD_ADDR_OWVAR 29
3662: PUSH
3663: LD_INT 11
3665: PUSH
3666: LD_INT 10
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: ST_TO_ADDR
// hc_basic_skills = [ 0 , 1 , 0 , 2 ] ;
3673: LD_ADDR_OWVAR 30
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 1
3683: PUSH
3684: LD_INT 0
3686: PUSH
3687: LD_INT 2
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: ST_TO_ADDR
// hc_skills = sci1_skills ;
3696: LD_ADDR_OWVAR 31
3700: PUSH
3701: LD_EXP 21
3705: ST_TO_ADDR
// if t = 1 then
3706: LD_VAR 0 15
3710: PUSH
3711: LD_INT 1
3713: EQUAL
3714: IFFALSE 3785
// begin sci1 := sci1 ^ CreateHuman ;
3716: LD_ADDR_EXP 28
3720: PUSH
3721: LD_EXP 28
3725: PUSH
3726: CALL_OW 44
3730: ADD
3731: ST_TO_ADDR
// PlaceUnitXYR ( sci1 [ sci1 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3732: LD_EXP 28
3736: PUSH
3737: LD_EXP 28
3741: ARRAY
3742: PPUSH
3743: LD_EXP 45
3747: PUSH
3748: LD_VAR 0 3
3752: ARRAY
3753: PUSH
3754: LD_INT 1
3756: ARRAY
3757: PPUSH
3758: LD_EXP 45
3762: PUSH
3763: LD_VAR 0 3
3767: ARRAY
3768: PUSH
3769: LD_INT 2
3771: ARRAY
3772: PPUSH
3773: LD_INT 4
3775: PPUSH
3776: LD_INT 0
3778: PPUSH
3779: CALL_OW 50
// end else
3783: GO 3852
// begin sci2 := sci2 ^ CreateHuman ;
3785: LD_ADDR_EXP 29
3789: PUSH
3790: LD_EXP 29
3794: PUSH
3795: CALL_OW 44
3799: ADD
3800: ST_TO_ADDR
// PlaceUnitXYR ( sci2 [ sci2 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3801: LD_EXP 29
3805: PUSH
3806: LD_EXP 29
3810: ARRAY
3811: PPUSH
3812: LD_EXP 45
3816: PUSH
3817: LD_VAR 0 3
3821: ARRAY
3822: PUSH
3823: LD_INT 1
3825: ARRAY
3826: PPUSH
3827: LD_EXP 45
3831: PUSH
3832: LD_VAR 0 3
3836: ARRAY
3837: PUSH
3838: LD_INT 2
3840: ARRAY
3841: PPUSH
3842: LD_INT 4
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 50
// end end ; if n2 then
3852: LD_VAR 0 17
3856: IFFALSE 4092
// begin hc_name = Tanya Garinova ;
3858: LD_ADDR_OWVAR 26
3862: PUSH
3863: LD_STRING Tanya Garinova
3865: ST_TO_ADDR
// hc_sex = sex_female ;
3866: LD_ADDR_OWVAR 27
3870: PUSH
3871: LD_INT 2
3873: ST_TO_ADDR
// hc_class = class_scientistic ;
3874: LD_ADDR_OWVAR 28
3878: PUSH
3879: LD_INT 4
3881: ST_TO_ADDR
// hc_gallery = multi ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING multi
3889: ST_TO_ADDR
// hc_face_number = 1 ;
3890: LD_ADDR_OWVAR 34
3894: PUSH
3895: LD_INT 1
3897: ST_TO_ADDR
// hc_attr = [ 9 , 11 ] ;
3898: LD_ADDR_OWVAR 29
3902: PUSH
3903: LD_INT 9
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: ST_TO_ADDR
// hc_basic_skills = [ 1 , 1 , 0 , 1 ] ;
3913: LD_ADDR_OWVAR 30
3917: PUSH
3918: LD_INT 1
3920: PUSH
3921: LD_INT 1
3923: PUSH
3924: LD_INT 0
3926: PUSH
3927: LD_INT 1
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: ST_TO_ADDR
// hc_skills = sci2_skills ;
3936: LD_ADDR_OWVAR 31
3940: PUSH
3941: LD_EXP 22
3945: ST_TO_ADDR
// if t = 1 then
3946: LD_VAR 0 15
3950: PUSH
3951: LD_INT 1
3953: EQUAL
3954: IFFALSE 4025
// begin sci1 := sci1 ^ CreateHuman ;
3956: LD_ADDR_EXP 28
3960: PUSH
3961: LD_EXP 28
3965: PUSH
3966: CALL_OW 44
3970: ADD
3971: ST_TO_ADDR
// PlaceUnitXYR ( sci1 [ sci1 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3972: LD_EXP 28
3976: PUSH
3977: LD_EXP 28
3981: ARRAY
3982: PPUSH
3983: LD_EXP 45
3987: PUSH
3988: LD_VAR 0 3
3992: ARRAY
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: LD_EXP 45
4002: PUSH
4003: LD_VAR 0 3
4007: ARRAY
4008: PUSH
4009: LD_INT 2
4011: ARRAY
4012: PPUSH
4013: LD_INT 4
4015: PPUSH
4016: LD_INT 0
4018: PPUSH
4019: CALL_OW 50
// end else
4023: GO 4092
// begin sci2 := sci2 ^ CreateHuman ;
4025: LD_ADDR_EXP 29
4029: PUSH
4030: LD_EXP 29
4034: PUSH
4035: CALL_OW 44
4039: ADD
4040: ST_TO_ADDR
// PlaceUnitXYR ( sci2 [ sci2 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
4041: LD_EXP 29
4045: PUSH
4046: LD_EXP 29
4050: ARRAY
4051: PPUSH
4052: LD_EXP 45
4056: PUSH
4057: LD_VAR 0 3
4061: ARRAY
4062: PUSH
4063: LD_INT 1
4065: ARRAY
4066: PPUSH
4067: LD_EXP 45
4071: PUSH
4072: LD_VAR 0 3
4076: ARRAY
4077: PUSH
4078: LD_INT 2
4080: ARRAY
4081: PPUSH
4082: LD_INT 4
4084: PPUSH
4085: LD_INT 0
4087: PPUSH
4088: CALL_OW 50
// end end ; SetTech ( tech_TargTeleport , side , state_researched ) ;
4092: LD_INT 38
4094: PPUSH
4095: LD_VAR 0 1
4099: PPUSH
4100: LD_INT 2
4102: PPUSH
4103: CALL_OW 322
// SetRestrict ( b_teleport , side , state_disabled ) ;
4107: LD_INT 34
4109: PPUSH
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_INT 0
4117: PPUSH
4118: CALL_OW 324
// end ; uc_nation = Side_nations [ side ] ;
4122: LD_ADDR_OWVAR 21
4126: PUSH
4127: LD_EXP 37
4131: PUSH
4132: LD_VAR 0 1
4136: ARRAY
4137: ST_TO_ADDR
// hc_gallery =  ;
4138: LD_ADDR_OWVAR 33
4142: PUSH
4143: LD_STRING 
4145: ST_TO_ADDR
// hc_name =  ;
4146: LD_ADDR_OWVAR 26
4150: PUSH
4151: LD_STRING 
4153: ST_TO_ADDR
// neng := number_of_people ;
4154: LD_ADDR_VAR 0 11
4158: PUSH
4159: LD_EXP 15
4163: ST_TO_ADDR
// nsol := number_of_breastworks ;
4164: LD_ADDR_VAR 0 14
4168: PUSH
4169: LD_EXP 14
4173: ST_TO_ADDR
// if nsol < neng div 4 then
4174: LD_VAR 0 14
4178: PUSH
4179: LD_VAR 0 11
4183: PUSH
4184: LD_INT 4
4186: DIV
4187: LESS
4188: IFFALSE 4204
// nsol := neng div 4 ;
4190: LD_ADDR_VAR 0 14
4194: PUSH
4195: LD_VAR 0 11
4199: PUSH
4200: LD_INT 4
4202: DIV
4203: ST_TO_ADDR
// neng := neng - nsol ;
4204: LD_ADDR_VAR 0 11
4208: PUSH
4209: LD_VAR 0 11
4213: PUSH
4214: LD_VAR 0 14
4218: MINUS
4219: ST_TO_ADDR
// nsci := neng div 3 ;
4220: LD_ADDR_VAR 0 12
4224: PUSH
4225: LD_VAR 0 11
4229: PUSH
4230: LD_INT 3
4232: DIV
4233: ST_TO_ADDR
// if nsci < 1 then
4234: LD_VAR 0 12
4238: PUSH
4239: LD_INT 1
4241: LESS
4242: IFFALSE 4252
// nsci := 1 ;
4244: LD_ADDR_VAR 0 12
4248: PUSH
4249: LD_INT 1
4251: ST_TO_ADDR
// neng := neng - nsci ;
4252: LD_ADDR_VAR 0 11
4256: PUSH
4257: LD_VAR 0 11
4261: PUSH
4262: LD_VAR 0 12
4266: MINUS
4267: ST_TO_ADDR
// nmech := neng div 2 ;
4268: LD_ADDR_VAR 0 13
4272: PUSH
4273: LD_VAR 0 11
4277: PUSH
4278: LD_INT 2
4280: DIV
4281: ST_TO_ADDR
// neng := neng - nmech ;
4282: LD_ADDR_VAR 0 11
4286: PUSH
4287: LD_VAR 0 11
4291: PUSH
4292: LD_VAR 0 13
4296: MINUS
4297: ST_TO_ADDR
// if neng < 1 then
4298: LD_VAR 0 11
4302: PUSH
4303: LD_INT 1
4305: LESS
4306: IFFALSE 4316
// neng := 1 ;
4308: LD_ADDR_VAR 0 11
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// soldiers_created := 0 ;
4316: LD_ADDR_LOC 3
4320: PUSH
4321: LD_INT 0
4323: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4324: LD_ADDR_VAR 0 6
4328: PUSH
4329: DOUBLE
4330: LD_INT 1
4332: DEC
4333: ST_TO_ADDR
4334: LD_EXP 14
4338: PUSH
4339: FOR_TO
4340: IFFALSE 4594
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4342: LD_ADDR_VAR 0 4
4346: PUSH
4347: LD_EXP 43
4351: PUSH
4352: LD_VAR 0 3
4356: ARRAY
4357: PUSH
4358: LD_VAR 0 6
4362: ARRAY
4363: PUSH
4364: LD_INT 1
4366: ARRAY
4367: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4368: LD_ADDR_VAR 0 5
4372: PUSH
4373: LD_EXP 43
4377: PUSH
4378: LD_VAR 0 3
4382: ARRAY
4383: PUSH
4384: LD_VAR 0 6
4388: ARRAY
4389: PUSH
4390: LD_INT 2
4392: ARRAY
4393: ST_TO_ADDR
// bc_type := b_breastwork ;
4394: LD_ADDR_OWVAR 42
4398: PUSH
4399: LD_INT 31
4401: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ i ] [ 3 ] ) ;
4402: LD_ADDR_VAR 0 9
4406: PUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: LD_VAR 0 5
4416: PPUSH
4417: LD_EXP 43
4421: PUSH
4422: LD_VAR 0 3
4426: ARRAY
4427: PUSH
4428: LD_VAR 0 6
4432: ARRAY
4433: PUSH
4434: LD_INT 3
4436: ARRAY
4437: PPUSH
4438: CALL_OW 47
4442: ST_TO_ADDR
// x := ShiftX ( x , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4443: LD_ADDR_VAR 0 4
4447: PUSH
4448: LD_VAR 0 4
4452: PPUSH
4453: LD_EXP 43
4457: PUSH
4458: LD_VAR 0 3
4462: ARRAY
4463: PUSH
4464: LD_VAR 0 6
4468: ARRAY
4469: PUSH
4470: LD_INT 3
4472: ARRAY
4473: PPUSH
4474: LD_INT 2
4476: PPUSH
4477: CALL_OW 272
4481: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4482: LD_ADDR_VAR 0 5
4486: PUSH
4487: LD_VAR 0 5
4491: PPUSH
4492: LD_EXP 43
4496: PUSH
4497: LD_VAR 0 3
4501: ARRAY
4502: PUSH
4503: LD_VAR 0 6
4507: ARRAY
4508: PUSH
4509: LD_INT 3
4511: ARRAY
4512: PPUSH
4513: LD_INT 2
4515: PPUSH
4516: CALL_OW 273
4520: ST_TO_ADDR
// sol := prepare_people ( side , 1 , class_soldier , x , y , 1 , commander ) [ 1 ] ;
4521: LD_ADDR_VAR 0 8
4525: PUSH
4526: LD_VAR 0 1
4530: PPUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 1
4536: PPUSH
4537: LD_VAR 0 4
4541: PPUSH
4542: LD_VAR 0 5
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_ADDR_EXP 46
4554: PPUSH
4555: CALL 2188 0 7
4559: PUSH
4560: LD_INT 1
4562: ARRAY
4563: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4564: LD_ADDR_LOC 3
4568: PUSH
4569: LD_LOC 3
4573: PUSH
4574: LD_INT 1
4576: PLUS
4577: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4578: LD_VAR 0 8
4582: PPUSH
4583: LD_VAR 0 9
4587: PPUSH
4588: CALL_OW 120
// end ;
4592: GO 4339
4594: POP
4595: POP
// x := start_def [ pos ] [ 1 ] ;
4596: LD_ADDR_VAR 0 4
4600: PUSH
4601: LD_EXP 44
4605: PUSH
4606: LD_VAR 0 3
4610: ARRAY
4611: PUSH
4612: LD_INT 1
4614: ARRAY
4615: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4616: LD_ADDR_VAR 0 5
4620: PUSH
4621: LD_EXP 44
4625: PUSH
4626: LD_VAR 0 3
4630: ARRAY
4631: PUSH
4632: LD_INT 2
4634: ARRAY
4635: ST_TO_ADDR
// prepare_people ( side , nsol - number_of_breastworks , class_soldier , x , y , 5 , commander ) ;
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_VAR 0 14
4645: PUSH
4646: LD_EXP 14
4650: MINUS
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: LD_VAR 0 4
4659: PPUSH
4660: LD_VAR 0 5
4664: PPUSH
4665: LD_INT 5
4667: PPUSH
4668: LD_ADDR_EXP 46
4672: PPUSH
4673: CALL 2188 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_VAR 0 11
4686: PPUSH
4687: LD_INT 2
4689: PPUSH
4690: LD_VAR 0 4
4694: PPUSH
4695: LD_VAR 0 5
4699: PPUSH
4700: LD_INT 5
4702: PPUSH
4703: LD_ADDR_EXP 46
4707: PPUSH
4708: CALL 2188 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
4712: LD_VAR 0 1
4716: PPUSH
4717: LD_VAR 0 13
4721: PPUSH
4722: LD_INT 3
4724: PPUSH
4725: LD_VAR 0 4
4729: PPUSH
4730: LD_VAR 0 5
4734: PPUSH
4735: LD_INT 5
4737: PPUSH
4738: LD_ADDR_EXP 46
4742: PPUSH
4743: CALL 2188 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
4747: LD_VAR 0 1
4751: PPUSH
4752: LD_VAR 0 12
4756: PPUSH
4757: LD_INT 4
4759: PPUSH
4760: LD_VAR 0 4
4764: PPUSH
4765: LD_VAR 0 5
4769: PPUSH
4770: LD_INT 5
4772: PPUSH
4773: LD_ADDR_EXP 46
4777: PPUSH
4778: CALL 2188 0 7
// if not global_defined then
4782: LD_LOC 2
4786: NOT
4787: IFFALSE 4797
// global_defined := true ;
4789: LD_ADDR_LOC 2
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4797: LD_EXP 9
4801: PUSH
4802: LD_INT 20
4804: PPUSH
4805: LD_VAR 0 1
4809: PPUSH
4810: CALL_OW 321
4814: PUSH
4815: LD_INT 1
4817: EQUAL
4818: AND
4819: IFFALSE 4836
// SetTech ( tech_SibDet , side , state_researched ) ;
4821: LD_INT 20
4823: PPUSH
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 2
4831: PPUSH
4832: CALL_OW 322
// if def_siberite_bomb = 1 then
4836: LD_EXP 10
4840: PUSH
4841: LD_INT 1
4843: EQUAL
4844: IFFALSE 4878
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4846: LD_INT 25
4848: PPUSH
4849: LD_VAR 0 1
4853: PPUSH
4854: LD_INT 1
4856: PPUSH
4857: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4861: LD_INT 73
4863: PPUSH
4864: LD_VAR 0 1
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 322
// end else
4876: GO 4908
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4878: LD_INT 25
4880: PPUSH
4881: LD_VAR 0 1
4885: PPUSH
4886: LD_INT 0
4888: PPUSH
4889: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4893: LD_INT 73
4895: PPUSH
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_INT 0
4903: PPUSH
4904: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4908: LD_INT 24
4910: PPUSH
4911: LD_VAR 0 1
4915: PPUSH
4916: LD_INT 0
4918: PPUSH
4919: CALL_OW 322
// end ;
4923: LD_VAR 0 2
4927: RET
// every 0 0$1 do
4928: GO 4930
4930: DISABLE
// if ( def_siberite_bomb > 1 ) then
4931: LD_EXP 10
4935: PUSH
4936: LD_INT 1
4938: GREATER
4939: IFFALSE 4954
// begin wait ( siberite_bomb_Delay ) ;
4941: LD_EXP 25
4945: PPUSH
4946: CALL_OW 67
// EnableSibFiss ;
4950: CALL 4955 0 0
// end ;
4954: END
// function EnableSibFiss ; var i ; begin
4955: LD_INT 0
4957: PPUSH
4958: PPUSH
// for i := 1 to 8 do
4959: LD_ADDR_VAR 0 2
4963: PUSH
4964: DOUBLE
4965: LD_INT 1
4967: DEC
4968: ST_TO_ADDR
4969: LD_INT 8
4971: PUSH
4972: FOR_TO
4973: IFFALSE 5019
// if Side_Positions [ i ] then
4975: LD_EXP 36
4979: PUSH
4980: LD_VAR 0 2
4984: ARRAY
4985: IFFALSE 5017
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4987: LD_INT 25
4989: PPUSH
4990: LD_VAR 0 2
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5002: LD_INT 73
5004: PPUSH
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: CALL_OW 322
// end ;
5017: GO 4972
5019: POP
5020: POP
// end ;
5021: LD_VAR 0 1
5025: RET
// function prepare_sides ; var i ; begin
5026: LD_INT 0
5028: PPUSH
5029: PPUSH
// global_units := [ ] ;
5030: LD_ADDR_LOC 1
5034: PUSH
5035: EMPTY
5036: ST_TO_ADDR
// global_defined := false ;
5037: LD_ADDR_LOC 2
5041: PUSH
5042: LD_INT 0
5044: ST_TO_ADDR
// for i := 1 to 8 do
5045: LD_ADDR_VAR 0 2
5049: PUSH
5050: DOUBLE
5051: LD_INT 1
5053: DEC
5054: ST_TO_ADDR
5055: LD_INT 8
5057: PUSH
5058: FOR_TO
5059: IFFALSE 5084
// if Side_Positions [ i ] then
5061: LD_EXP 36
5065: PUSH
5066: LD_VAR 0 2
5070: ARRAY
5071: IFFALSE 5082
// prepare_side ( i ) ;
5073: LD_VAR 0 2
5077: PPUSH
5078: CALL 2685 0 1
5082: GO 5058
5084: POP
5085: POP
// end ;
5086: LD_VAR 0 1
5090: RET
// starting begin DE_Triggers ;
5091: CALL 7039 0 0
// read_multiplayer_and_game_parameters ;
5095: CALL 0 0 0
// enable ( 44 ) ;
5099: LD_INT 44
5101: ENABLE_MARKED
// enable ( 45 ) ;
5102: LD_INT 45
5104: ENABLE_MARKED
// mp_selectmsg := true ;
5105: LD_ADDR_OWVAR 13
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// prepare_map_coordinates ;
5113: CALL 1286 0 0
// set_shared_visions_and_alliances ;
5117: CALL 1825 0 0
// prepare_sides ;
5121: CALL 5026 0 0
// if Game_Type = 66 then
5125: LD_EXP 1
5129: PUSH
5130: LD_INT 66
5132: EQUAL
5133: IFFALSE 5139
// Init_Win_Condition ;
5135: CALL 7092 0 0
// init_respawning ;
5139: CALL 14991 0 0
// init_shipments_and_respawning ;
5143: CALL 5249 0 0
// ResetFog ;
5147: CALL_OW 335
// music_nat := Side_Nations [ your_side ] ;
5151: LD_ADDR_OWVAR 71
5155: PUSH
5156: LD_EXP 37
5160: PUSH
5161: LD_OWVAR 2
5165: ARRAY
5166: ST_TO_ADDR
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5167: LD_EXP 44
5171: PUSH
5172: LD_EXP 36
5176: PUSH
5177: LD_OWVAR 2
5181: ARRAY
5182: ARRAY
5183: PUSH
5184: LD_INT 1
5186: ARRAY
5187: PPUSH
5188: LD_EXP 44
5192: PUSH
5193: LD_EXP 36
5197: PUSH
5198: LD_OWVAR 2
5202: ARRAY
5203: ARRAY
5204: PUSH
5205: LD_INT 2
5207: ARRAY
5208: PPUSH
5209: CALL_OW 86
// BuildUpAreas := [ Base_nw , Base_ne , Base_sw , Base_se ] ;
5213: LD_ADDR_EXP 49
5217: PUSH
5218: LD_INT 15
5220: PUSH
5221: LD_INT 16
5223: PUSH
5224: LD_INT 17
5226: PUSH
5227: LD_INT 18
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: ST_TO_ADDR
// BeginBuildUp ;
5236: CALL 7913 0 0
// end ;
5240: END
// export function OnHumanRespawned ( un ) ; begin
5241: LD_INT 0
5243: PPUSH
// end ; end_of_file
5244: LD_VAR 0 2
5248: RET
// var shipment1 , shipment2 ; export function init_shipments_and_respawning ; begin
5249: LD_INT 0
5251: PPUSH
// shipment1 := [ ] ;
5252: LD_ADDR_LOC 4
5256: PUSH
5257: EMPTY
5258: ST_TO_ADDR
// shipment2 := [ ] ;
5259: LD_ADDR_LOC 5
5263: PUSH
5264: EMPTY
5265: ST_TO_ADDR
// end ;
5266: LD_VAR 0 1
5270: RET
// every 0 0$5 + 0 0$1.1 marked 45 do var d , q ;
5271: GO 5273
5273: DISABLE
5274: LD_INT 0
5276: PPUSH
5277: PPUSH
// begin case tick of 1 .. 1 1$0 :
5278: LD_OWVAR 1
5282: PUSH
5283: LD_INT 1
5285: DOUBLE
5286: GREATEREQUAL
5287: IFFALSE 5295
5289: LD_INT 2100
5291: DOUBLE
5292: LESSEQUAL
5293: IFTRUE 5297
5295: GO 5308
5297: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5298: LD_ADDR_VAR 0 1
5302: PUSH
5303: LD_INT 150
5305: ST_TO_ADDR
5306: GO 5491
5308: LD_INT 2100
5310: PUSH
5311: LD_INT 1
5313: PLUS
5314: DOUBLE
5315: GREATEREQUAL
5316: IFFALSE 5324
5318: LD_INT 10500
5320: DOUBLE
5321: LESSEQUAL
5322: IFTRUE 5326
5324: GO 5337
5326: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5327: LD_ADDR_VAR 0 1
5331: PUSH
5332: LD_INT 100
5334: ST_TO_ADDR
5335: GO 5491
5337: LD_INT 10500
5339: PUSH
5340: LD_INT 1
5342: PLUS
5343: DOUBLE
5344: GREATEREQUAL
5345: IFFALSE 5353
5347: LD_INT 21000
5349: DOUBLE
5350: LESSEQUAL
5351: IFTRUE 5355
5353: GO 5366
5355: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5356: LD_ADDR_VAR 0 1
5360: PUSH
5361: LD_INT 90
5363: ST_TO_ADDR
5364: GO 5491
5366: LD_INT 21000
5368: PUSH
5369: LD_INT 1
5371: PLUS
5372: DOUBLE
5373: GREATEREQUAL
5374: IFFALSE 5382
5376: LD_INT 42000
5378: DOUBLE
5379: LESSEQUAL
5380: IFTRUE 5384
5382: GO 5395
5384: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5385: LD_ADDR_VAR 0 1
5389: PUSH
5390: LD_INT 70
5392: ST_TO_ADDR
5393: GO 5491
5395: LD_INT 42000
5397: PUSH
5398: LD_INT 1
5400: PLUS
5401: DOUBLE
5402: GREATEREQUAL
5403: IFFALSE 5411
5405: LD_INT 63000
5407: DOUBLE
5408: LESSEQUAL
5409: IFTRUE 5413
5411: GO 5424
5413: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5414: LD_ADDR_VAR 0 1
5418: PUSH
5419: LD_INT 60
5421: ST_TO_ADDR
5422: GO 5491
5424: LD_INT 63000
5426: PUSH
5427: LD_INT 1
5429: PLUS
5430: DOUBLE
5431: GREATEREQUAL
5432: IFFALSE 5440
5434: LD_INT 105000
5436: DOUBLE
5437: LESSEQUAL
5438: IFTRUE 5442
5440: GO 5453
5442: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5443: LD_ADDR_VAR 0 1
5447: PUSH
5448: LD_INT 35
5450: ST_TO_ADDR
5451: GO 5491
5453: LD_INT 105000
5455: PUSH
5456: LD_INT 1
5458: PLUS
5459: DOUBLE
5460: GREATEREQUAL
5461: IFFALSE 5469
5463: LD_INT 630000
5465: DOUBLE
5466: LESSEQUAL
5467: IFTRUE 5471
5469: GO 5482
5471: POP
// d := 20 ; else
5472: LD_ADDR_VAR 0 1
5476: PUSH
5477: LD_INT 20
5479: ST_TO_ADDR
5480: GO 5491
5482: POP
// d := 0 ; end ;
5483: LD_ADDR_VAR 0 1
5487: PUSH
5488: LD_INT 0
5490: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
5491: LD_INT 1
5493: PPUSH
5494: LD_INT 10000
5496: PPUSH
5497: CALL_OW 12
5501: PUSH
5502: LD_VAR 0 1
5506: PUSH
5507: LD_EXP 19
5511: MUL
5512: PUSH
5513: LD_INT 2
5515: DIV
5516: LESSEQUAL
5517: IFFALSE 5624
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5519: LD_INT 1
5521: PPUSH
5522: LD_INT 140
5524: PPUSH
5525: CALL_OW 12
5529: PPUSH
5530: CALL_OW 67
// if shipment1 = [ ] then
5534: LD_LOC 4
5538: PUSH
5539: EMPTY
5540: EQUAL
5541: IFFALSE 5566
// shipment1 := [ q1 , q2 , q3 , q4 ] ;
5543: LD_ADDR_LOC 4
5547: PUSH
5548: LD_INT 3
5550: PUSH
5551: LD_INT 4
5553: PUSH
5554: LD_INT 5
5556: PUSH
5557: LD_INT 6
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: ST_TO_ADDR
// q := shipment1 [ Rand ( 1 , shipment1 ) ] ;
5566: LD_ADDR_VAR 0 2
5570: PUSH
5571: LD_LOC 4
5575: PUSH
5576: LD_INT 1
5578: PPUSH
5579: LD_LOC 4
5583: PPUSH
5584: CALL_OW 12
5588: ARRAY
5589: ST_TO_ADDR
// shipment1 := shipment1 diff [ q ] ;
5590: LD_ADDR_LOC 4
5594: PUSH
5595: LD_LOC 4
5599: PUSH
5600: LD_VAR 0 2
5604: PUSH
5605: EMPTY
5606: LIST
5607: DIFF
5608: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
5609: LD_INT 5
5611: PPUSH
5612: LD_VAR 0 2
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: CALL_OW 55
// end ; enable ;
5624: ENABLE
// end ;
5625: PPOPN 2
5627: END
// every 0 0$5 + 0 0$1.1 marked 45 do var d , q ;
5628: GO 5630
5630: DISABLE
5631: LD_INT 0
5633: PPUSH
5634: PPUSH
// begin case tick of 1 .. 1 1$0 :
5635: LD_OWVAR 1
5639: PUSH
5640: LD_INT 1
5642: DOUBLE
5643: GREATEREQUAL
5644: IFFALSE 5652
5646: LD_INT 2100
5648: DOUBLE
5649: LESSEQUAL
5650: IFTRUE 5654
5652: GO 5665
5654: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5655: LD_ADDR_VAR 0 1
5659: PUSH
5660: LD_INT 150
5662: ST_TO_ADDR
5663: GO 5848
5665: LD_INT 2100
5667: PUSH
5668: LD_INT 1
5670: PLUS
5671: DOUBLE
5672: GREATEREQUAL
5673: IFFALSE 5681
5675: LD_INT 10500
5677: DOUBLE
5678: LESSEQUAL
5679: IFTRUE 5683
5681: GO 5694
5683: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5684: LD_ADDR_VAR 0 1
5688: PUSH
5689: LD_INT 100
5691: ST_TO_ADDR
5692: GO 5848
5694: LD_INT 10500
5696: PUSH
5697: LD_INT 1
5699: PLUS
5700: DOUBLE
5701: GREATEREQUAL
5702: IFFALSE 5710
5704: LD_INT 21000
5706: DOUBLE
5707: LESSEQUAL
5708: IFTRUE 5712
5710: GO 5723
5712: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5713: LD_ADDR_VAR 0 1
5717: PUSH
5718: LD_INT 90
5720: ST_TO_ADDR
5721: GO 5848
5723: LD_INT 21000
5725: PUSH
5726: LD_INT 1
5728: PLUS
5729: DOUBLE
5730: GREATEREQUAL
5731: IFFALSE 5739
5733: LD_INT 42000
5735: DOUBLE
5736: LESSEQUAL
5737: IFTRUE 5741
5739: GO 5752
5741: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5742: LD_ADDR_VAR 0 1
5746: PUSH
5747: LD_INT 70
5749: ST_TO_ADDR
5750: GO 5848
5752: LD_INT 42000
5754: PUSH
5755: LD_INT 1
5757: PLUS
5758: DOUBLE
5759: GREATEREQUAL
5760: IFFALSE 5768
5762: LD_INT 63000
5764: DOUBLE
5765: LESSEQUAL
5766: IFTRUE 5770
5768: GO 5781
5770: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5771: LD_ADDR_VAR 0 1
5775: PUSH
5776: LD_INT 60
5778: ST_TO_ADDR
5779: GO 5848
5781: LD_INT 63000
5783: PUSH
5784: LD_INT 1
5786: PLUS
5787: DOUBLE
5788: GREATEREQUAL
5789: IFFALSE 5797
5791: LD_INT 105000
5793: DOUBLE
5794: LESSEQUAL
5795: IFTRUE 5799
5797: GO 5810
5799: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5800: LD_ADDR_VAR 0 1
5804: PUSH
5805: LD_INT 35
5807: ST_TO_ADDR
5808: GO 5848
5810: LD_INT 105000
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: DOUBLE
5817: GREATEREQUAL
5818: IFFALSE 5826
5820: LD_INT 630000
5822: DOUBLE
5823: LESSEQUAL
5824: IFTRUE 5828
5826: GO 5839
5828: POP
// d := 20 ; else
5829: LD_ADDR_VAR 0 1
5833: PUSH
5834: LD_INT 20
5836: ST_TO_ADDR
5837: GO 5848
5839: POP
// d := 0 ; end ;
5840: LD_ADDR_VAR 0 1
5844: PUSH
5845: LD_INT 0
5847: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
5848: LD_INT 1
5850: PPUSH
5851: LD_INT 10000
5853: PPUSH
5854: CALL_OW 12
5858: PUSH
5859: LD_VAR 0 1
5863: PUSH
5864: LD_EXP 19
5868: MUL
5869: PUSH
5870: LD_INT 2
5872: DIV
5873: LESSEQUAL
5874: IFFALSE 5997
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5876: LD_INT 1
5878: PPUSH
5879: LD_INT 140
5881: PPUSH
5882: CALL_OW 12
5886: PPUSH
5887: CALL_OW 67
// if shipment2 = [ ] then
5891: LD_LOC 5
5895: PUSH
5896: EMPTY
5897: EQUAL
5898: IFFALSE 5939
// shipment2 := [ q1a , q2a , q3a , q4a , q1b , q2b , q3b , q4b ] ;
5900: LD_ADDR_LOC 5
5904: PUSH
5905: LD_INT 7
5907: PUSH
5908: LD_INT 8
5910: PUSH
5911: LD_INT 9
5913: PUSH
5914: LD_INT 10
5916: PUSH
5917: LD_INT 11
5919: PUSH
5920: LD_INT 12
5922: PUSH
5923: LD_INT 13
5925: PUSH
5926: LD_INT 14
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: ST_TO_ADDR
// q := shipment2 [ Rand ( 1 , shipment2 ) ] ;
5939: LD_ADDR_VAR 0 2
5943: PUSH
5944: LD_LOC 5
5948: PUSH
5949: LD_INT 1
5951: PPUSH
5952: LD_LOC 5
5956: PPUSH
5957: CALL_OW 12
5961: ARRAY
5962: ST_TO_ADDR
// shipment2 := shipment2 diff [ q ] ;
5963: LD_ADDR_LOC 5
5967: PUSH
5968: LD_LOC 5
5972: PUSH
5973: LD_VAR 0 2
5977: PUSH
5978: EMPTY
5979: LIST
5980: DIFF
5981: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
5982: LD_INT 5
5984: PPUSH
5985: LD_VAR 0 2
5989: PPUSH
5990: LD_INT 1
5992: PPUSH
5993: CALL_OW 55
// end ; enable ;
5997: ENABLE
// end ; end_of_file
5998: PPOPN 2
6000: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; export function CanWinLoose ; begin
6001: LD_INT 0
6003: PPUSH
// Result := true ;
6004: LD_ADDR_VAR 0 1
6008: PUSH
6009: LD_INT 1
6011: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6012: CALL_OW 518
6016: PUSH
6017: CALL_OW 519
6021: PUSH
6022: LD_INT 0
6024: GREATER
6025: AND
6026: IFFALSE 6036
// Result := false ;
6028: LD_ADDR_VAR 0 1
6032: PUSH
6033: LD_INT 0
6035: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
6036: CALL_OW 531
6040: PUSH
6041: CALL_OW 519
6045: PUSH
6046: LD_INT 1
6048: GREATER
6049: AND
6050: IFFALSE 6060
// Result := false ;
6052: LD_ADDR_VAR 0 1
6056: PUSH
6057: LD_INT 0
6059: ST_TO_ADDR
// end ;
6060: LD_VAR 0 1
6064: RET
// function Update_Flags ; var un ; begin
6065: LD_INT 0
6067: PPUSH
6068: PPUSH
// for un in battle_flags_id do
6069: LD_ADDR_VAR 0 2
6073: PUSH
6074: LD_EXP 47
6078: PUSH
6079: FOR_IN
6080: IFFALSE 6155
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6082: LD_VAR 0 2
6086: PPUSH
6087: LD_INT 1
6089: PUSH
6090: LD_LOC 6
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 2
6101: PUSH
6102: LD_LOC 6
6106: PUSH
6107: LD_INT 2
6109: DIV
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_LOC 6
6122: PUSH
6123: LD_INT 5
6125: DIV
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 20
6133: PUSH
6134: LD_LOC 6
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: PPUSH
6149: CALL_OW 423
6153: GO 6079
6155: POP
6156: POP
// end ;
6157: LD_VAR 0 1
6161: RET
// every 0 0$0.1 marked 45 do var un ;
6162: GO 6164
6164: DISABLE
6165: LD_INT 0
6167: PPUSH
// begin if not def_morale_flags then
6168: LD_EXP 8
6172: NOT
6173: IFFALSE 6177
// exit ;
6175: GO 6254
// if not morale_decreasing_time then
6177: LD_EXP 20
6181: NOT
6182: IFFALSE 6186
// exit ;
6184: GO 6254
// strength = 100 ;
6186: LD_ADDR_LOC 6
6190: PUSH
6191: LD_INT 100
6193: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6194: LD_EXP 20
6198: PPUSH
6199: CALL_OW 67
// strength := strength - 1 ;
6203: LD_ADDR_LOC 6
6207: PUSH
6208: LD_LOC 6
6212: PUSH
6213: LD_INT 1
6215: MINUS
6216: ST_TO_ADDR
// Update_Flags ;
6217: CALL 6065 0 0
// until not strength ;
6221: LD_LOC 6
6225: NOT
6226: IFFALSE 6194
// for un in battle_flags_id do
6228: LD_ADDR_VAR 0 1
6232: PUSH
6233: LD_EXP 47
6237: PUSH
6238: FOR_IN
6239: IFFALSE 6252
// KillBattleFlag ( un ) ;
6241: LD_VAR 0 1
6245: PPUSH
6246: CALL_OW 419
6250: GO 6238
6252: POP
6253: POP
// end ;
6254: PPOPN 1
6256: END
// every 0 0$1 marked 44 do var l1 , l2 ;
6257: GO 6259
6259: DISABLE
6260: LD_INT 0
6262: PPUSH
6263: PPUSH
// begin if not ( game_type in [ 11 , 12 ] ) then
6264: LD_EXP 1
6268: PUSH
6269: LD_INT 11
6271: PUSH
6272: LD_INT 12
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: IN
6279: NOT
6280: IFFALSE 6284
// exit ;
6282: GO 6685
// if not Your_Side then
6284: LD_OWVAR 2
6288: NOT
6289: IFFALSE 6294
// begin enable ;
6291: ENABLE
// exit ;
6292: GO 6685
// end ; l1 := UnitFilter ( sci1 , [ f_alive ] ) ;
6294: LD_ADDR_VAR 0 1
6298: PUSH
6299: LD_EXP 28
6303: PPUSH
6304: LD_INT 51
6306: PUSH
6307: EMPTY
6308: LIST
6309: PPUSH
6310: CALL_OW 72
6314: ST_TO_ADDR
// l2 := UnitFilter ( sci2 , [ f_alive ] ) ;
6315: LD_ADDR_VAR 0 2
6319: PUSH
6320: LD_EXP 29
6324: PPUSH
6325: LD_INT 51
6327: PUSH
6328: EMPTY
6329: LIST
6330: PPUSH
6331: CALL_OW 72
6335: ST_TO_ADDR
// if not l1 and not l2 then
6336: LD_VAR 0 1
6340: NOT
6341: PUSH
6342: LD_VAR 0 2
6346: NOT
6347: AND
6348: IFFALSE 6364
// begin wait ( 0 0$5 ) ;
6350: LD_INT 175
6352: PPUSH
6353: CALL_OW 67
// enable ( 400 ) ;
6357: LD_INT 400
6359: ENABLE_MARKED
// exit ;
6360: GO 6685
// end else
6362: GO 6684
// if not l1 then
6364: LD_VAR 0 1
6368: NOT
6369: IFFALSE 6439
// begin if Side_teams [ your_side ] = 1 then
6371: LD_EXP 33
6375: PUSH
6376: LD_OWVAR 2
6380: ARRAY
6381: PUSH
6382: LD_INT 1
6384: EQUAL
6385: IFFALSE 6413
// begin CenterOnXY ( lastxlost , lastylost ) ;
6387: LD_LOC 9
6391: PPUSH
6392: LD_LOC 10
6396: PPUSH
6397: CALL_OW 84
// wait ( 0 0$5 ) ;
6401: LD_INT 175
6403: PPUSH
6404: CALL_OW 67
// enable ( 400 ) ;
6408: LD_INT 400
6410: ENABLE_MARKED
// end else
6411: GO 6437
// begin CenterOnXY ( lastxwin , lastywin ) ;
6413: LD_LOC 7
6417: PPUSH
6418: LD_LOC 8
6422: PPUSH
6423: CALL_OW 84
// wait ( 0 0$5 ) ;
6427: LD_INT 175
6429: PPUSH
6430: CALL_OW 67
// enable ( 401 ) ;
6434: LD_INT 401
6436: ENABLE_MARKED
// end end else
6437: GO 6684
// if not l2 then
6439: LD_VAR 0 2
6443: NOT
6444: IFFALSE 6514
// begin if Side_teams [ your_side ] = 2 then
6446: LD_EXP 33
6450: PUSH
6451: LD_OWVAR 2
6455: ARRAY
6456: PUSH
6457: LD_INT 2
6459: EQUAL
6460: IFFALSE 6488
// begin CenterOnXY ( lastxlost , lastylost ) ;
6462: LD_LOC 9
6466: PPUSH
6467: LD_LOC 10
6471: PPUSH
6472: CALL_OW 84
// wait ( 0 0$5 ) ;
6476: LD_INT 175
6478: PPUSH
6479: CALL_OW 67
// enable ( 400 ) ;
6483: LD_INT 400
6485: ENABLE_MARKED
// end else
6486: GO 6512
// begin CenterOnXY ( lastxwin , lastywin ) ;
6488: LD_LOC 7
6492: PPUSH
6493: LD_LOC 8
6497: PPUSH
6498: CALL_OW 84
// wait ( 0 0$5 ) ;
6502: LD_INT 175
6504: PPUSH
6505: CALL_OW 67
// enable ( 401 ) ;
6509: LD_INT 401
6511: ENABLE_MARKED
// end end else
6512: GO 6684
// if Side_teams [ your_side ] = 1 then
6514: LD_EXP 33
6518: PUSH
6519: LD_OWVAR 2
6523: ARRAY
6524: PUSH
6525: LD_INT 1
6527: EQUAL
6528: IFFALSE 6608
// begin lastxwin := GetX ( l2 [ 1 ] ) ;
6530: LD_ADDR_LOC 7
6534: PUSH
6535: LD_VAR 0 2
6539: PUSH
6540: LD_INT 1
6542: ARRAY
6543: PPUSH
6544: CALL_OW 250
6548: ST_TO_ADDR
// lastywin := GetY ( l2 [ 1 ] ) ;
6549: LD_ADDR_LOC 8
6553: PUSH
6554: LD_VAR 0 2
6558: PUSH
6559: LD_INT 1
6561: ARRAY
6562: PPUSH
6563: CALL_OW 251
6567: ST_TO_ADDR
// lastxlost := GetX ( l1 [ 1 ] ) ;
6568: LD_ADDR_LOC 9
6572: PUSH
6573: LD_VAR 0 1
6577: PUSH
6578: LD_INT 1
6580: ARRAY
6581: PPUSH
6582: CALL_OW 250
6586: ST_TO_ADDR
// lastylost := GetY ( l1 [ 1 ] ) ;
6587: LD_ADDR_LOC 10
6591: PUSH
6592: LD_VAR 0 1
6596: PUSH
6597: LD_INT 1
6599: ARRAY
6600: PPUSH
6601: CALL_OW 251
6605: ST_TO_ADDR
// end else
6606: GO 6684
// begin lastxwin := GetX ( l1 [ 1 ] ) ;
6608: LD_ADDR_LOC 7
6612: PUSH
6613: LD_VAR 0 1
6617: PUSH
6618: LD_INT 1
6620: ARRAY
6621: PPUSH
6622: CALL_OW 250
6626: ST_TO_ADDR
// lastywin := GetY ( l1 [ 1 ] ) ;
6627: LD_ADDR_LOC 8
6631: PUSH
6632: LD_VAR 0 1
6636: PUSH
6637: LD_INT 1
6639: ARRAY
6640: PPUSH
6641: CALL_OW 251
6645: ST_TO_ADDR
// lastxlost := GetX ( l2 [ 1 ] ) ;
6646: LD_ADDR_LOC 9
6650: PUSH
6651: LD_VAR 0 2
6655: PUSH
6656: LD_INT 1
6658: ARRAY
6659: PPUSH
6660: CALL_OW 250
6664: ST_TO_ADDR
// lastylost := GetY ( l2 [ 1 ] ) ;
6665: LD_ADDR_LOC 10
6669: PUSH
6670: LD_VAR 0 2
6674: PUSH
6675: LD_INT 1
6677: ARRAY
6678: PPUSH
6679: CALL_OW 251
6683: ST_TO_ADDR
// end ; enable ;
6684: ENABLE
// end ;
6685: PPOPN 2
6687: END
// every 0 0$2 marked 44 do var win , i ;
6688: GO 6690
6690: DISABLE
6691: LD_INT 0
6693: PPUSH
6694: PPUSH
// begin if game_type in [ 11 , 12 ] then
6695: LD_EXP 1
6699: PUSH
6700: LD_INT 11
6702: PUSH
6703: LD_INT 12
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: IN
6710: IFFALSE 6714
// exit ;
6712: GO 6966
// if your_side then
6714: LD_OWVAR 2
6718: IFFALSE 6965
// begin if not filterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
6720: LD_INT 22
6722: PUSH
6723: LD_OWVAR 2
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: LD_INT 2
6734: PUSH
6735: LD_INT 21
6737: PUSH
6738: LD_INT 1
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 30
6747: PUSH
6748: LD_INT 0
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 30
6757: PUSH
6758: LD_INT 1
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PPUSH
6775: CALL_OW 69
6779: NOT
6780: IFFALSE 6809
// begin wait ( 0 0$3 ) ;
6782: LD_INT 105
6784: PPUSH
6785: CALL_OW 67
// if IAmServer then
6789: CALL_OW 518
6793: IFFALSE 6802
// wait ( 0 0$1 ) ;
6795: LD_INT 35
6797: PPUSH
6798: CALL_OW 67
// enable ( 400 ) ;
6802: LD_INT 400
6804: ENABLE_MARKED
// exit ;
6805: GO 6966
// end else
6807: GO 6965
// begin win := true ;
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_INT 1
6816: ST_TO_ADDR
// for i := 1 to Side_positions do
6817: LD_ADDR_VAR 0 2
6821: PUSH
6822: DOUBLE
6823: LD_INT 1
6825: DEC
6826: ST_TO_ADDR
6827: LD_EXP 36
6831: PUSH
6832: FOR_TO
6833: IFFALSE 6917
// if Side_positions [ i ] and ( i <> your_side ) then
6835: LD_EXP 36
6839: PUSH
6840: LD_VAR 0 2
6844: ARRAY
6845: PUSH
6846: LD_VAR 0 2
6850: PUSH
6851: LD_OWVAR 2
6855: NONEQUAL
6856: AND
6857: IFFALSE 6915
// begin if MultiplayerSideAlive ( i ) then
6859: LD_VAR 0 2
6863: PPUSH
6864: CALL_OW 108
6868: IFFALSE 6915
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
6870: LD_EXP 33
6874: PUSH
6875: LD_VAR 0 2
6879: ARRAY
6880: NOT
6881: PUSH
6882: LD_EXP 33
6886: PUSH
6887: LD_VAR 0 2
6891: ARRAY
6892: PUSH
6893: LD_EXP 33
6897: PUSH
6898: LD_OWVAR 2
6902: ARRAY
6903: NONEQUAL
6904: OR
6905: IFFALSE 6915
// win := false ;
6907: LD_ADDR_VAR 0 1
6911: PUSH
6912: LD_INT 0
6914: ST_TO_ADDR
// end ;
6915: GO 6832
6917: POP
6918: POP
// if win then
6919: LD_VAR 0 1
6923: IFFALSE 6965
// begin wait ( 0 0$3 ) ;
6925: LD_INT 105
6927: PPUSH
6928: CALL_OW 67
// if IAmServer then
6932: CALL_OW 518
6936: IFFALSE 6945
// wait ( 0 0$1 ) ;
6938: LD_INT 35
6940: PPUSH
6941: CALL_OW 67
// SA_Win ( Side_Nations [ Your_side ] ) ;
6945: LD_EXP 37
6949: PUSH
6950: LD_OWVAR 2
6954: ARRAY
6955: PPUSH
6956: CALL 8553 0 1
// enable ( 401 ) ;
6960: LD_INT 401
6962: ENABLE_MARKED
// exit ;
6963: GO 6966
// end ; end ; end ; enable ;
6965: ENABLE
// end ; end_of_file
6966: PPOPN 2
6968: END
// every 10 do
6969: GO 6971
6971: DISABLE
// begin if not multiplayer then
6972: LD_OWVAR 4
6976: NOT
6977: IFFALSE 6981
// exit ;
6979: GO 7038
// if ( tick >= 100 ) then
6981: LD_OWVAR 1
6985: PUSH
6986: LD_INT 100
6988: GREATEREQUAL
6989: IFFALSE 7009
// if tick mod 20 = 0 then
6991: LD_OWVAR 1
6995: PUSH
6996: LD_INT 20
6998: MOD
6999: PUSH
7000: LD_INT 0
7002: EQUAL
7003: IFFALSE 7009
// MultiplayerCRC ;
7005: CALL_OW 361
// if ( tick >= 100 ) then
7009: LD_OWVAR 1
7013: PUSH
7014: LD_INT 100
7016: GREATEREQUAL
7017: IFFALSE 7037
// if tick mod 30 = 0 then
7019: LD_OWVAR 1
7023: PUSH
7024: LD_INT 30
7026: MOD
7027: PUSH
7028: LD_INT 0
7030: EQUAL
7031: IFFALSE 7037
// DebugLogAll ;
7033: CALL_OW 360
// enable ;
7037: ENABLE
// end ; end_of_file
7038: END
// export function DE_Triggers ; begin
7039: LD_INT 0
7041: PPUSH
// disable ( 44 ) ;
7042: LD_INT 44
7044: DISABLE_MARKED
// disable ( 45 ) ;
7045: LD_INT 45
7047: DISABLE_MARKED
// disable ( 400 ) ;
7048: LD_INT 400
7050: DISABLE_MARKED
// disable ( 401 ) ;
7051: LD_INT 401
7053: DISABLE_MARKED
// disable ( 98 ) ;
7054: LD_INT 98
7056: DISABLE_MARKED
// disable ( 99 ) ;
7057: LD_INT 99
7059: DISABLE_MARKED
// end ;
7060: LD_VAR 0 1
7064: RET
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7065: LD_VAR 0 1
7069: PPUSH
7070: LD_VAR 0 2
7074: PPUSH
7075: LD_VAR 0 3
7079: PPUSH
7080: LD_OWVAR 2
7084: PPUSH
7085: CALL 8511 0 4
7089: PPOPN 3
7091: END
// export function Init_Win_Condition ; begin
7092: LD_INT 0
7094: PPUSH
// if Team_Game then
7095: LD_EXP 41
7099: IFFALSE 7106
// enable ( 98 ) else
7101: LD_INT 98
7103: ENABLE_MARKED
7104: GO 7109
// enable ( 99 ) ;
7106: LD_INT 99
7108: ENABLE_MARKED
// end ;
7109: LD_VAR 0 1
7113: RET
// every 100 trigger CanWinLoose marked 400 do
7114: CALL 6001 0 0
7118: IFFALSE 7127
7120: GO 7122
7122: DISABLE
// YouLostInMultiplayer ;
7123: CALL_OW 107
7127: END
// every 100 trigger CanWinLoose marked 401 do
7128: CALL 6001 0 0
7132: IFFALSE 7141
7134: GO 7136
7136: DISABLE
// YouWinInMultiplayer ;
7137: CALL_OW 106
7141: END
// every 0 0$2 marked 98 do var win , i ;
7142: GO 7144
7144: DISABLE
7145: LD_INT 0
7147: PPUSH
7148: PPUSH
// begin if your_side then
7149: LD_OWVAR 2
7153: IFFALSE 7359
// if not FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
7155: LD_INT 22
7157: PUSH
7158: LD_OWVAR 2
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 2
7169: PUSH
7170: LD_INT 21
7172: PUSH
7173: LD_INT 1
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 30
7182: PUSH
7183: LD_INT 0
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 30
7192: PUSH
7193: LD_INT 1
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PPUSH
7210: CALL_OW 69
7214: NOT
7215: IFFALSE 7231
// begin wait ( 0 0$3 ) ;
7217: LD_INT 105
7219: PPUSH
7220: CALL_OW 67
// enable ( 400 ) ;
7224: LD_INT 400
7226: ENABLE_MARKED
// exit ;
7227: GO 7360
// end else
7229: GO 7359
// begin win := true ;
7231: LD_ADDR_VAR 0 1
7235: PUSH
7236: LD_INT 1
7238: ST_TO_ADDR
// for i = 1 to Side_positions do
7239: LD_ADDR_VAR 0 2
7243: PUSH
7244: DOUBLE
7245: LD_INT 1
7247: DEC
7248: ST_TO_ADDR
7249: LD_EXP 36
7253: PUSH
7254: FOR_TO
7255: IFFALSE 7339
// if Side_positions [ i ] and ( i <> your_side ) and MultiplayerSideAlive ( i ) then
7257: LD_EXP 36
7261: PUSH
7262: LD_VAR 0 2
7266: ARRAY
7267: PUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_OWVAR 2
7277: NONEQUAL
7278: AND
7279: PUSH
7280: LD_VAR 0 2
7284: PPUSH
7285: CALL_OW 108
7289: AND
7290: IFFALSE 7337
// begin if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7292: LD_EXP 33
7296: PUSH
7297: LD_VAR 0 2
7301: ARRAY
7302: NOT
7303: PUSH
7304: LD_EXP 33
7308: PUSH
7309: LD_VAR 0 2
7313: ARRAY
7314: PUSH
7315: LD_EXP 33
7319: PUSH
7320: LD_OWVAR 2
7324: ARRAY
7325: NONEQUAL
7326: OR
7327: IFFALSE 7337
// win := false ;
7329: LD_ADDR_VAR 0 1
7333: PUSH
7334: LD_INT 0
7336: ST_TO_ADDR
// end ;
7337: GO 7254
7339: POP
7340: POP
// if win then
7341: LD_VAR 0 1
7345: IFFALSE 7359
// begin wait ( 0 0$3 ) ;
7347: LD_INT 105
7349: PPUSH
7350: CALL_OW 67
// enable ( 401 ) ;
7354: LD_INT 401
7356: ENABLE_MARKED
// exit ;
7357: GO 7360
// end ; end ; enable ;
7359: ENABLE
// end ;
7360: PPOPN 2
7362: END
// every 0 0$3 marked 99 do var win , i ;
7363: GO 7365
7365: DISABLE
7366: LD_INT 0
7368: PPUSH
7369: PPUSH
// begin if not FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
7370: LD_INT 22
7372: PUSH
7373: LD_OWVAR 2
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 2
7384: PUSH
7385: LD_INT 21
7387: PUSH
7388: LD_INT 1
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 30
7397: PUSH
7398: LD_INT 0
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: LD_INT 30
7407: PUSH
7408: LD_INT 1
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PPUSH
7425: CALL_OW 69
7429: NOT
7430: IFFALSE 7446
// begin wait ( 0 0$3 ) ;
7432: LD_INT 105
7434: PPUSH
7435: CALL_OW 67
// enable ( 400 ) ;
7439: LD_INT 400
7441: ENABLE_MARKED
// exit ;
7442: GO 7555
// end else
7444: GO 7554
// begin win := true ;
7446: LD_ADDR_VAR 0 1
7450: PUSH
7451: LD_INT 1
7453: ST_TO_ADDR
// for i = 1 to Side_Positions do
7454: LD_ADDR_VAR 0 2
7458: PUSH
7459: DOUBLE
7460: LD_INT 1
7462: DEC
7463: ST_TO_ADDR
7464: LD_EXP 36
7468: PUSH
7469: FOR_TO
7470: IFFALSE 7534
// if Side_Positions [ i ] and ( i <> your_side ) and MultiplayerSideAlive ( i ) then
7472: LD_EXP 36
7476: PUSH
7477: LD_VAR 0 2
7481: ARRAY
7482: PUSH
7483: LD_VAR 0 2
7487: PUSH
7488: LD_OWVAR 2
7492: NONEQUAL
7493: AND
7494: PUSH
7495: LD_VAR 0 2
7499: PPUSH
7500: CALL_OW 108
7504: AND
7505: IFFALSE 7532
// if not AlliedSides ( i , your_side ) then
7507: LD_VAR 0 2
7511: PPUSH
7512: LD_OWVAR 2
7516: PPUSH
7517: CALL 7558 0 2
7521: NOT
7522: IFFALSE 7532
// win := false ;
7524: LD_ADDR_VAR 0 1
7528: PUSH
7529: LD_INT 0
7531: ST_TO_ADDR
7532: GO 7469
7534: POP
7535: POP
// if win then
7536: LD_VAR 0 1
7540: IFFALSE 7554
// begin wait ( 0 0$3 ) ;
7542: LD_INT 105
7544: PPUSH
7545: CALL_OW 67
// enable ( 401 ) ;
7549: LD_INT 401
7551: ENABLE_MARKED
// exit ;
7552: GO 7555
// end ; end ; enable ;
7554: ENABLE
// end ;
7555: PPOPN 2
7557: END
// function AlliedSides ( i , j ) ; var vysledek ; begin
7558: LD_INT 0
7560: PPUSH
7561: PPUSH
// vysledek := false ;
7562: LD_ADDR_VAR 0 4
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7570: LD_VAR 0 1
7574: PPUSH
7575: LD_VAR 0 2
7579: PPUSH
7580: CALL_OW 81
7584: PUSH
7585: LD_INT 1
7587: EQUAL
7588: PUSH
7589: LD_VAR 0 2
7593: PPUSH
7594: LD_VAR 0 1
7598: PPUSH
7599: CALL_OW 81
7603: PUSH
7604: LD_INT 1
7606: EQUAL
7607: AND
7608: PUSH
7609: LD_VAR 0 1
7613: PPUSH
7614: CALL_OW 83
7618: AND
7619: PUSH
7620: LD_VAR 0 2
7624: PPUSH
7625: CALL_OW 83
7629: AND
7630: IFFALSE 7640
// vysledek := true ;
7632: LD_ADDR_VAR 0 4
7636: PUSH
7637: LD_INT 1
7639: ST_TO_ADDR
// result := vysledek ;
7640: LD_ADDR_VAR 0 3
7644: PUSH
7645: LD_VAR 0 4
7649: ST_TO_ADDR
// end ; end_of_file
7650: LD_VAR 0 3
7654: RET
// export function DisplayNames ; var i ; begin
7655: LD_INT 0
7657: PPUSH
7658: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
7659: LD_ADDR_VAR 0 2
7663: PUSH
7664: LD_INT 2
7666: PUSH
7667: LD_INT 30
7669: PUSH
7670: LD_INT 0
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PUSH
7677: LD_INT 30
7679: PUSH
7680: LD_INT 1
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: LIST
7691: PPUSH
7692: CALL_OW 69
7696: PUSH
7697: FOR_IN
7698: IFFALSE 7725
// SetBName ( i , @ & GetSide ( i ) ) ;
7700: LD_VAR 0 2
7704: PPUSH
7705: LD_STRING @
7707: PUSH
7708: LD_VAR 0 2
7712: PPUSH
7713: CALL_OW 255
7717: STR
7718: PPUSH
7719: CALL_OW 500
7723: GO 7697
7725: POP
7726: POP
// end ;
7727: LD_VAR 0 1
7731: RET
// every 0 0$2 do
7732: GO 7734
7734: DISABLE
// DisplayNames ;
7735: CALL 7655 0 0
7739: END
// on BuildingComplete ( b ) do DisplayNames ;
7740: CALL 7655 0 0
7744: PPOPN 1
7746: END
// on BuildingStarted ( b , h ) do DisplayNames ;
7747: CALL 7655 0 0
7751: PPOPN 2
7753: END
// on BuildingCaptured ( b , o , e ) do DisplayNames ; end_of_file
7754: CALL 7655 0 0
7758: PPOPN 3
7760: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
7761: LD_INT 0
7763: PPUSH
7764: PPUSH
// AllStrings := [ #gamespeed , game_speed - 4 ] ^ [ #Multi1x1-Time , tick ] ;
7765: LD_ADDR_VAR 0 2
7769: PUSH
7770: LD_STRING #gamespeed
7772: PUSH
7773: LD_OWVAR 65
7777: PUSH
7778: LD_INT 4
7780: MINUS
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: LD_STRING #Multi1x1-Time
7788: PUSH
7789: LD_OWVAR 1
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: ADD
7798: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7799: LD_INT 0
7801: PUSH
7802: LD_EXP 25
7806: PUSH
7807: LD_OWVAR 1
7811: MINUS
7812: LESSEQUAL
7813: IFFALSE 7844
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7815: LD_ADDR_VAR 0 2
7819: PUSH
7820: LD_VAR 0 2
7824: PUSH
7825: LD_STRING #allowedsibbomb
7827: PUSH
7828: LD_EXP 25
7832: PUSH
7833: LD_OWVAR 1
7837: MINUS
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: ADD
7843: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7844: LD_INT 0
7846: PUSH
7847: LD_EXP 51
7851: PUSH
7852: LD_OWVAR 1
7856: MINUS
7857: LESSEQUAL
7858: IFFALSE 7889
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7860: LD_ADDR_VAR 0 2
7864: PUSH
7865: LD_VAR 0 2
7869: PUSH
7870: LD_STRING #builduptime
7872: PUSH
7873: LD_EXP 51
7877: PUSH
7878: LD_OWVAR 1
7882: MINUS
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: ADD
7888: ST_TO_ADDR
// Display_Strings := AllStrings ;
7889: LD_ADDR_OWVAR 47
7893: PUSH
7894: LD_VAR 0 2
7898: ST_TO_ADDR
// end ;
7899: LD_VAR 0 1
7903: RET
// every 0 0$1 do
7904: GO 7906
7906: DISABLE
// begin ShowTimer ;
7907: CALL 7761 0 0
// enable ;
7911: ENABLE
// end ; end_of_file
7912: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
7913: LD_INT 0
7915: PPUSH
7916: PPUSH
7917: PPUSH
// BuildUpTime_Delay = 0 ;
7918: LD_ADDR_EXP 51
7922: PUSH
7923: LD_INT 0
7925: ST_TO_ADDR
// if not def_builduptime then
7926: LD_EXP 12
7930: NOT
7931: IFFALSE 7935
// exit ;
7933: GO 8118
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
7935: LD_ADDR_EXP 51
7939: PUSH
7940: LD_INT 8400
7942: PUSH
7943: LD_INT 2100
7945: PUSH
7946: LD_EXP 12
7950: MUL
7951: PLUS
7952: ST_TO_ADDR
// BuildUpTimeActive := true ;
7953: LD_ADDR_EXP 50
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// for i := 1 to 8 do
7961: LD_ADDR_VAR 0 2
7965: PUSH
7966: DOUBLE
7967: LD_INT 1
7969: DEC
7970: ST_TO_ADDR
7971: LD_INT 8
7973: PUSH
7974: FOR_TO
7975: IFFALSE 8116
// if Side_Positions [ i ] then
7977: LD_EXP 36
7981: PUSH
7982: LD_VAR 0 2
7986: ARRAY
7987: IFFALSE 8114
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
7989: LD_EXP 49
7993: PUSH
7994: LD_EXP 36
7998: PUSH
7999: LD_VAR 0 2
8003: ARRAY
8004: ARRAY
8005: PPUSH
8006: LD_INT 5
8008: PPUSH
8009: CALL_OW 424
// for j := 1 to 8 do
8013: LD_ADDR_VAR 0 3
8017: PUSH
8018: DOUBLE
8019: LD_INT 1
8021: DEC
8022: ST_TO_ADDR
8023: LD_INT 8
8025: PUSH
8026: FOR_TO
8027: IFFALSE 8112
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8029: LD_EXP 36
8033: PUSH
8034: LD_VAR 0 3
8038: ARRAY
8039: PUSH
8040: LD_EXP 33
8044: PUSH
8045: LD_VAR 0 2
8049: ARRAY
8050: PUSH
8051: LD_EXP 33
8055: PUSH
8056: LD_VAR 0 3
8060: ARRAY
8061: NONEQUAL
8062: PUSH
8063: LD_EXP 41
8067: NOT
8068: PUSH
8069: LD_VAR 0 2
8073: PUSH
8074: LD_VAR 0 3
8078: NONEQUAL
8079: AND
8080: OR
8081: AND
8082: IFFALSE 8110
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8084: LD_VAR 0 3
8088: PPUSH
8089: LD_EXP 49
8093: PUSH
8094: LD_EXP 36
8098: PUSH
8099: LD_VAR 0 2
8103: ARRAY
8104: ARRAY
8105: PPUSH
8106: CALL_OW 333
8110: GO 8026
8112: POP
8113: POP
// end ;
8114: GO 7974
8116: POP
8117: POP
// end ;
8118: LD_VAR 0 1
8122: RET
// export function EndBuildUp ; var i , j ; begin
8123: LD_INT 0
8125: PPUSH
8126: PPUSH
8127: PPUSH
// BuildUpTimeActive := false ;
8128: LD_ADDR_EXP 50
8132: PUSH
8133: LD_INT 0
8135: ST_TO_ADDR
// for i := 1 to 8 do
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: DOUBLE
8142: LD_INT 1
8144: DEC
8145: ST_TO_ADDR
8146: LD_INT 8
8148: PUSH
8149: FOR_TO
8150: IFFALSE 8291
// if Side_Positions [ i ] then
8152: LD_EXP 36
8156: PUSH
8157: LD_VAR 0 2
8161: ARRAY
8162: IFFALSE 8289
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
8164: LD_EXP 49
8168: PUSH
8169: LD_EXP 36
8173: PUSH
8174: LD_VAR 0 2
8178: ARRAY
8179: ARRAY
8180: PPUSH
8181: LD_INT 0
8183: PPUSH
8184: CALL_OW 424
// for j := 1 to 8 do
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: DOUBLE
8194: LD_INT 1
8196: DEC
8197: ST_TO_ADDR
8198: LD_INT 8
8200: PUSH
8201: FOR_TO
8202: IFFALSE 8287
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8204: LD_EXP 36
8208: PUSH
8209: LD_VAR 0 3
8213: ARRAY
8214: PUSH
8215: LD_EXP 33
8219: PUSH
8220: LD_VAR 0 2
8224: ARRAY
8225: PUSH
8226: LD_EXP 33
8230: PUSH
8231: LD_VAR 0 3
8235: ARRAY
8236: NONEQUAL
8237: PUSH
8238: LD_EXP 41
8242: NOT
8243: PUSH
8244: LD_VAR 0 2
8248: PUSH
8249: LD_VAR 0 3
8253: NONEQUAL
8254: AND
8255: OR
8256: AND
8257: IFFALSE 8285
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8259: LD_VAR 0 3
8263: PPUSH
8264: LD_EXP 49
8268: PUSH
8269: LD_EXP 36
8273: PUSH
8274: LD_VAR 0 2
8278: ARRAY
8279: ARRAY
8280: PPUSH
8281: CALL_OW 334
8285: GO 8201
8287: POP
8288: POP
// end ;
8289: GO 8149
8291: POP
8292: POP
// end ;
8293: LD_VAR 0 1
8297: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
8298: LD_EXP 50
8302: IFFALSE 8477
8304: GO 8306
8306: DISABLE
8307: LD_INT 0
8309: PPUSH
8310: PPUSH
// begin for i := 1 to 8 do
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_INT 8
8323: PUSH
8324: FOR_TO
8325: IFFALSE 8474
// if Side_Positions [ i ] then
8327: LD_EXP 36
8331: PUSH
8332: LD_VAR 0 1
8336: ARRAY
8337: IFFALSE 8472
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8339: LD_ADDR_VAR 0 2
8343: PUSH
8344: LD_EXP 49
8348: PUSH
8349: LD_EXP 36
8353: PUSH
8354: LD_VAR 0 1
8358: ARRAY
8359: ARRAY
8360: PPUSH
8361: LD_INT 2
8363: PUSH
8364: LD_INT 21
8366: PUSH
8367: LD_INT 1
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: LD_INT 21
8376: PUSH
8377: LD_INT 2
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 22
8391: PUSH
8392: LD_OWVAR 2
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PPUSH
8405: CALL_OW 70
8409: PUSH
8410: FOR_IN
8411: IFFALSE 8470
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
8413: LD_EXP 33
8417: PUSH
8418: LD_VAR 0 1
8422: ARRAY
8423: PUSH
8424: LD_EXP 33
8428: PUSH
8429: LD_OWVAR 2
8433: ARRAY
8434: NONEQUAL
8435: PUSH
8436: LD_EXP 41
8440: NOT
8441: PUSH
8442: LD_VAR 0 1
8446: PUSH
8447: LD_OWVAR 2
8451: NONEQUAL
8452: AND
8453: OR
8454: IFFALSE 8468
// ComMoveToArea ( un , BuildUpEscape ) ;
8456: LD_VAR 0 2
8460: PPUSH
8461: LD_INT 19
8463: PPUSH
8464: CALL_OW 113
8468: GO 8410
8470: POP
8471: POP
8472: GO 8324
8474: POP
8475: POP
// enable ;
8476: ENABLE
// end ;
8477: PPOPN 2
8479: END
// every 0 0$1 trigger def_builduptime do
8480: LD_EXP 12
8484: IFFALSE 8510
8486: GO 8488
8488: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
8489: LD_INT 8400
8491: PUSH
8492: LD_EXP 12
8496: PUSH
8497: LD_INT 2100
8499: MUL
8500: PLUS
8501: PPUSH
8502: CALL_OW 67
// EndBuildUp ;
8506: CALL 8123 0 0
// end ; end_of_file
8510: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8511: LD_INT 0
8513: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 255
8523: PUSH
8524: LD_VAR 0 4
8528: EQUAL
8529: IFFALSE 8548
// begin SetAchievement ( ACH_RAD ) ;
8531: LD_STRING ACH_RAD
8533: PPUSH
8534: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8538: LD_STRING ACH_NL
8540: PPUSH
8541: LD_INT 1
8543: PPUSH
8544: CALL_OW 564
// end end ;
8548: LD_VAR 0 5
8552: RET
// export function SA_Win ( side ) ; begin
8553: LD_INT 0
8555: PPUSH
// case side of 1 :
8556: LD_VAR 0 1
8560: PUSH
8561: LD_INT 1
8563: DOUBLE
8564: EQUAL
8565: IFTRUE 8569
8567: GO 8582
8569: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8570: LD_STRING ACH_AH
8572: PPUSH
8573: LD_INT 1
8575: PPUSH
8576: CALL_OW 564
8580: GO 8745
8582: LD_INT 2
8584: DOUBLE
8585: EQUAL
8586: IFTRUE 8590
8588: GO 8603
8590: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8591: LD_STRING ACH_E
8593: PPUSH
8594: LD_INT 1
8596: PPUSH
8597: CALL_OW 564
8601: GO 8745
8603: LD_INT 3
8605: DOUBLE
8606: EQUAL
8607: IFTRUE 8611
8609: GO 8624
8611: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8612: LD_STRING ACH_OOL
8614: PPUSH
8615: LD_INT 1
8617: PPUSH
8618: CALL_OW 564
8622: GO 8745
8624: LD_INT 1
8626: PUSH
8627: LD_INT 2
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: DOUBLE
8634: EQUAL
8635: IFTRUE 8639
8637: GO 8664
8639: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8640: LD_STRING ACH_AH
8642: PPUSH
8643: LD_REAL  5.00000000000000E-0001
8646: PPUSH
8647: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8651: LD_STRING ACH_E
8653: PPUSH
8654: LD_REAL  5.00000000000000E-0001
8657: PPUSH
8658: CALL_OW 564
// end ; [ 2 , 3 ] :
8662: GO 8745
8664: LD_INT 2
8666: PUSH
8667: LD_INT 3
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: DOUBLE
8674: EQUAL
8675: IFTRUE 8679
8677: GO 8704
8679: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8680: LD_STRING ACH_OOL
8682: PPUSH
8683: LD_REAL  5.00000000000000E-0001
8686: PPUSH
8687: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8691: LD_STRING ACH_E
8693: PPUSH
8694: LD_REAL  5.00000000000000E-0001
8697: PPUSH
8698: CALL_OW 564
// end ; [ 3 , 1 ] :
8702: GO 8745
8704: LD_INT 3
8706: PUSH
8707: LD_INT 1
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: DOUBLE
8714: EQUAL
8715: IFTRUE 8719
8717: GO 8744
8719: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8720: LD_STRING ACH_AH
8722: PPUSH
8723: LD_REAL  5.00000000000000E-0001
8726: PPUSH
8727: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8731: LD_STRING ACH_OOL
8733: PPUSH
8734: LD_REAL  5.00000000000000E-0001
8737: PPUSH
8738: CALL_OW 564
// end ; end ;
8742: GO 8745
8744: POP
// end ; end_of_file
8745: LD_VAR 0 2
8749: RET
// export MaxFlags ; export function ShowResources ( FullMapArea , EnableSiberitResurces , Range ) ; var k , k2 , i , d , r , u ; begin
8750: LD_INT 0
8752: PPUSH
8753: PPUSH
8754: PPUSH
8755: PPUSH
8756: PPUSH
8757: PPUSH
8758: PPUSH
// if range = 0 then
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 0
8766: EQUAL
8767: IFFALSE 8777
// range = 400 ;
8769: LD_ADDR_VAR 0 3
8773: PUSH
8774: LD_INT 400
8776: ST_TO_ADDR
// r = range ;
8777: LD_ADDR_VAR 0 9
8781: PUSH
8782: LD_VAR 0 3
8786: ST_TO_ADDR
// d = GetListOfResourcesInArea ( FullMapArea ) ;
8787: LD_ADDR_VAR 0 8
8791: PUSH
8792: LD_VAR 0 1
8796: PPUSH
8797: CALL_OW 442
8801: ST_TO_ADDR
// for k = 1 to ( d / 3 ) do
8802: LD_ADDR_VAR 0 5
8806: PUSH
8807: DOUBLE
8808: LD_INT 1
8810: DEC
8811: ST_TO_ADDR
8812: LD_VAR 0 8
8816: PUSH
8817: LD_INT 3
8819: DIVREAL
8820: PUSH
8821: FOR_TO
8822: IFFALSE 9013
// begin k2 = k * 3 ;
8824: LD_ADDR_VAR 0 6
8828: PUSH
8829: LD_VAR 0 5
8833: PUSH
8834: LD_INT 3
8836: MUL
8837: ST_TO_ADDR
// for i = 1 to 8 do
8838: LD_ADDR_VAR 0 7
8842: PUSH
8843: DOUBLE
8844: LD_INT 1
8846: DEC
8847: ST_TO_ADDR
8848: LD_INT 8
8850: PUSH
8851: FOR_TO
8852: IFFALSE 9009
// begin if d [ k2 ] = 1 or ( d [ k2 ] = 2 and EnableSiberitResurces ) then
8854: LD_VAR 0 8
8858: PUSH
8859: LD_VAR 0 6
8863: ARRAY
8864: PUSH
8865: LD_INT 1
8867: EQUAL
8868: PUSH
8869: LD_VAR 0 8
8873: PUSH
8874: LD_VAR 0 6
8878: ARRAY
8879: PUSH
8880: LD_INT 2
8882: EQUAL
8883: PUSH
8884: LD_VAR 0 2
8888: AND
8889: OR
8890: IFFALSE 9007
// begin u = filterAllUnits ( [ [ f_side , i ] , [ f_distxy , d [ k2 - 2 ] , d [ k2 - 1 ] , r ] ] ) ;
8892: LD_ADDR_VAR 0 10
8896: PUSH
8897: LD_INT 22
8899: PUSH
8900: LD_VAR 0 7
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PUSH
8909: LD_INT 92
8911: PUSH
8912: LD_VAR 0 8
8916: PUSH
8917: LD_VAR 0 6
8921: PUSH
8922: LD_INT 2
8924: MINUS
8925: ARRAY
8926: PUSH
8927: LD_VAR 0 8
8931: PUSH
8932: LD_VAR 0 6
8936: PUSH
8937: LD_INT 1
8939: MINUS
8940: ARRAY
8941: PUSH
8942: LD_VAR 0 9
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PPUSH
8957: CALL_OW 69
8961: ST_TO_ADDR
// if u then
8962: LD_VAR 0 10
8966: IFFALSE 9007
// SetResourceVisibility ( d [ k2 - 2 ] , d [ k2 - 1 ] , i ) ;
8968: LD_VAR 0 8
8972: PUSH
8973: LD_VAR 0 6
8977: PUSH
8978: LD_INT 2
8980: MINUS
8981: ARRAY
8982: PPUSH
8983: LD_VAR 0 8
8987: PUSH
8988: LD_VAR 0 6
8992: PUSH
8993: LD_INT 1
8995: MINUS
8996: ARRAY
8997: PPUSH
8998: LD_VAR 0 7
9002: PPUSH
9003: CALL_OW 441
// end ; end ;
9007: GO 8851
9009: POP
9010: POP
// end ;
9011: GO 8821
9013: POP
9014: POP
// end ;
9015: LD_VAR 0 4
9019: RET
// export function randomHumanStats ( init_level ) ; var cl , combat , eng , mech , sci , skills , base_skills , attr ; var i , k , base , n , def , speed ; begin
9020: LD_INT 0
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
9026: PPUSH
9027: PPUSH
9028: PPUSH
9029: PPUSH
9030: PPUSH
9031: PPUSH
9032: PPUSH
9033: PPUSH
9034: PPUSH
9035: PPUSH
9036: PPUSH
// cl = rand ( 1 , 4 ) ;
9037: LD_ADDR_VAR 0 3
9041: PUSH
9042: LD_INT 1
9044: PPUSH
9045: LD_INT 4
9047: PPUSH
9048: CALL_OW 12
9052: ST_TO_ADDR
// base = init_level ;
9053: LD_ADDR_VAR 0 13
9057: PUSH
9058: LD_VAR 0 1
9062: ST_TO_ADDR
// case tick of 0 .. 5 5$00 :
9063: LD_OWVAR 1
9067: PUSH
9068: LD_INT 0
9070: DOUBLE
9071: GREATEREQUAL
9072: IFFALSE 9080
9074: LD_INT 10500
9076: DOUBLE
9077: LESSEQUAL
9078: IFTRUE 9082
9080: GO 9093
9082: POP
// i = 1 ; 5 5$01 .. 9 9$00 :
9083: LD_ADDR_VAR 0 11
9087: PUSH
9088: LD_INT 1
9090: ST_TO_ADDR
9091: GO 9352
9093: LD_INT 10535
9095: DOUBLE
9096: GREATEREQUAL
9097: IFFALSE 9105
9099: LD_INT 18900
9101: DOUBLE
9102: LESSEQUAL
9103: IFTRUE 9107
9105: GO 9118
9107: POP
// i = 2 ; 9 9$01 .. 15 15$00 :
9108: LD_ADDR_VAR 0 11
9112: PUSH
9113: LD_INT 2
9115: ST_TO_ADDR
9116: GO 9352
9118: LD_INT 18935
9120: DOUBLE
9121: GREATEREQUAL
9122: IFFALSE 9130
9124: LD_INT 31500
9126: DOUBLE
9127: LESSEQUAL
9128: IFTRUE 9132
9130: GO 9143
9132: POP
// i = 3 ; 15 15$01 .. 22 22$00 :
9133: LD_ADDR_VAR 0 11
9137: PUSH
9138: LD_INT 3
9140: ST_TO_ADDR
9141: GO 9352
9143: LD_INT 31535
9145: DOUBLE
9146: GREATEREQUAL
9147: IFFALSE 9155
9149: LD_INT 46200
9151: DOUBLE
9152: LESSEQUAL
9153: IFTRUE 9157
9155: GO 9168
9157: POP
// i = 4 ; 22 22$01 .. 30 30$00 :
9158: LD_ADDR_VAR 0 11
9162: PUSH
9163: LD_INT 4
9165: ST_TO_ADDR
9166: GO 9352
9168: LD_INT 46235
9170: DOUBLE
9171: GREATEREQUAL
9172: IFFALSE 9180
9174: LD_INT 63000
9176: DOUBLE
9177: LESSEQUAL
9178: IFTRUE 9182
9180: GO 9193
9182: POP
// i = 5 ; 30 30$01 .. 40 40$00 :
9183: LD_ADDR_VAR 0 11
9187: PUSH
9188: LD_INT 5
9190: ST_TO_ADDR
9191: GO 9352
9193: LD_INT 63035
9195: DOUBLE
9196: GREATEREQUAL
9197: IFFALSE 9205
9199: LD_INT 84000
9201: DOUBLE
9202: LESSEQUAL
9203: IFTRUE 9207
9205: GO 9218
9207: POP
// i = 6 ; 40 40$01 .. 52 52$00 :
9208: LD_ADDR_VAR 0 11
9212: PUSH
9213: LD_INT 6
9215: ST_TO_ADDR
9216: GO 9352
9218: LD_INT 84035
9220: DOUBLE
9221: GREATEREQUAL
9222: IFFALSE 9230
9224: LD_INT 109200
9226: DOUBLE
9227: LESSEQUAL
9228: IFTRUE 9232
9230: GO 9243
9232: POP
// i = 7 ; 52 52$01 .. 66 66$00 :
9233: LD_ADDR_VAR 0 11
9237: PUSH
9238: LD_INT 7
9240: ST_TO_ADDR
9241: GO 9352
9243: LD_INT 109235
9245: DOUBLE
9246: GREATEREQUAL
9247: IFFALSE 9255
9249: LD_INT 138600
9251: DOUBLE
9252: LESSEQUAL
9253: IFTRUE 9257
9255: GO 9268
9257: POP
// i = 8 ; 66 66$01 .. 88 88$00 :
9258: LD_ADDR_VAR 0 11
9262: PUSH
9263: LD_INT 8
9265: ST_TO_ADDR
9266: GO 9352
9268: LD_INT 138635
9270: DOUBLE
9271: GREATEREQUAL
9272: IFFALSE 9280
9274: LD_INT 184800
9276: DOUBLE
9277: LESSEQUAL
9278: IFTRUE 9282
9280: GO 9293
9282: POP
// i = 9 ; 88 88$01 .. 100 100$00 :
9283: LD_ADDR_VAR 0 11
9287: PUSH
9288: LD_INT 9
9290: ST_TO_ADDR
9291: GO 9352
9293: LD_INT 184835
9295: DOUBLE
9296: GREATEREQUAL
9297: IFFALSE 9305
9299: LD_INT 210000
9301: DOUBLE
9302: LESSEQUAL
9303: IFTRUE 9307
9305: GO 9318
9307: POP
// i = 10 ; 100 100$01 .. 120 120$00 :
9308: LD_ADDR_VAR 0 11
9312: PUSH
9313: LD_INT 10
9315: ST_TO_ADDR
9316: GO 9352
9318: LD_INT 210035
9320: DOUBLE
9321: GREATEREQUAL
9322: IFFALSE 9330
9324: LD_INT 252000
9326: DOUBLE
9327: LESSEQUAL
9328: IFTRUE 9332
9330: GO 9343
9332: POP
// i = 11 ; else
9333: LD_ADDR_VAR 0 11
9337: PUSH
9338: LD_INT 11
9340: ST_TO_ADDR
9341: GO 9352
9343: POP
// i = 12 ; end ;
9344: LD_ADDR_VAR 0 11
9348: PUSH
9349: LD_INT 12
9351: ST_TO_ADDR
// i = i - base div 2 ;
9352: LD_ADDR_VAR 0 11
9356: PUSH
9357: LD_VAR 0 11
9361: PUSH
9362: LD_VAR 0 13
9366: PUSH
9367: LD_INT 2
9369: DIV
9370: MINUS
9371: ST_TO_ADDR
// if i < 0 then
9372: LD_VAR 0 11
9376: PUSH
9377: LD_INT 0
9379: LESS
9380: IFFALSE 9390
// i = 0 ;
9382: LD_ADDR_VAR 0 11
9386: PUSH
9387: LD_INT 0
9389: ST_TO_ADDR
// if cl = 1 then
9390: LD_VAR 0 3
9394: PUSH
9395: LD_INT 1
9397: EQUAL
9398: IFFALSE 9438
// combat = rand ( base + i - 1 , base + i ) else
9400: LD_ADDR_VAR 0 4
9404: PUSH
9405: LD_VAR 0 13
9409: PUSH
9410: LD_VAR 0 11
9414: PLUS
9415: PUSH
9416: LD_INT 1
9418: MINUS
9419: PPUSH
9420: LD_VAR 0 13
9424: PUSH
9425: LD_VAR 0 11
9429: PLUS
9430: PPUSH
9431: CALL_OW 12
9435: ST_TO_ADDR
9436: GO 9478
// combat = rand ( base + i - 4 , base + i - 1 ) ;
9438: LD_ADDR_VAR 0 4
9442: PUSH
9443: LD_VAR 0 13
9447: PUSH
9448: LD_VAR 0 11
9452: PLUS
9453: PUSH
9454: LD_INT 4
9456: MINUS
9457: PPUSH
9458: LD_VAR 0 13
9462: PUSH
9463: LD_VAR 0 11
9467: PLUS
9468: PUSH
9469: LD_INT 1
9471: MINUS
9472: PPUSH
9473: CALL_OW 12
9477: ST_TO_ADDR
// if cl = 2 then
9478: LD_VAR 0 3
9482: PUSH
9483: LD_INT 2
9485: EQUAL
9486: IFFALSE 9526
// eng = rand ( base + i - 1 , base + i ) else
9488: LD_ADDR_VAR 0 5
9492: PUSH
9493: LD_VAR 0 13
9497: PUSH
9498: LD_VAR 0 11
9502: PLUS
9503: PUSH
9504: LD_INT 1
9506: MINUS
9507: PPUSH
9508: LD_VAR 0 13
9512: PUSH
9513: LD_VAR 0 11
9517: PLUS
9518: PPUSH
9519: CALL_OW 12
9523: ST_TO_ADDR
9524: GO 9566
// eng = rand ( base + i - 4 , base + i - 1 ) ;
9526: LD_ADDR_VAR 0 5
9530: PUSH
9531: LD_VAR 0 13
9535: PUSH
9536: LD_VAR 0 11
9540: PLUS
9541: PUSH
9542: LD_INT 4
9544: MINUS
9545: PPUSH
9546: LD_VAR 0 13
9550: PUSH
9551: LD_VAR 0 11
9555: PLUS
9556: PUSH
9557: LD_INT 1
9559: MINUS
9560: PPUSH
9561: CALL_OW 12
9565: ST_TO_ADDR
// if cl = 3 then
9566: LD_VAR 0 3
9570: PUSH
9571: LD_INT 3
9573: EQUAL
9574: IFFALSE 9614
// mech = rand ( base + i - 1 , base + i ) else
9576: LD_ADDR_VAR 0 6
9580: PUSH
9581: LD_VAR 0 13
9585: PUSH
9586: LD_VAR 0 11
9590: PLUS
9591: PUSH
9592: LD_INT 1
9594: MINUS
9595: PPUSH
9596: LD_VAR 0 13
9600: PUSH
9601: LD_VAR 0 11
9605: PLUS
9606: PPUSH
9607: CALL_OW 12
9611: ST_TO_ADDR
9612: GO 9654
// mech = rand ( base + i - 4 , base + i - 1 ) ;
9614: LD_ADDR_VAR 0 6
9618: PUSH
9619: LD_VAR 0 13
9623: PUSH
9624: LD_VAR 0 11
9628: PLUS
9629: PUSH
9630: LD_INT 4
9632: MINUS
9633: PPUSH
9634: LD_VAR 0 13
9638: PUSH
9639: LD_VAR 0 11
9643: PLUS
9644: PUSH
9645: LD_INT 1
9647: MINUS
9648: PPUSH
9649: CALL_OW 12
9653: ST_TO_ADDR
// if cl = 4 then
9654: LD_VAR 0 3
9658: PUSH
9659: LD_INT 4
9661: EQUAL
9662: IFFALSE 9702
// sci = rand ( base + i - 1 , base + i ) else
9664: LD_ADDR_VAR 0 7
9668: PUSH
9669: LD_VAR 0 13
9673: PUSH
9674: LD_VAR 0 11
9678: PLUS
9679: PUSH
9680: LD_INT 1
9682: MINUS
9683: PPUSH
9684: LD_VAR 0 13
9688: PUSH
9689: LD_VAR 0 11
9693: PLUS
9694: PPUSH
9695: CALL_OW 12
9699: ST_TO_ADDR
9700: GO 9742
// sci = rand ( base + i - 4 , base + i - 1 ) ;
9702: LD_ADDR_VAR 0 7
9706: PUSH
9707: LD_VAR 0 13
9711: PUSH
9712: LD_VAR 0 11
9716: PLUS
9717: PUSH
9718: LD_INT 4
9720: MINUS
9721: PPUSH
9722: LD_VAR 0 13
9726: PUSH
9727: LD_VAR 0 11
9731: PLUS
9732: PUSH
9733: LD_INT 1
9735: MINUS
9736: PPUSH
9737: CALL_OW 12
9741: ST_TO_ADDR
// skills = [ combat , eng , mech , sci ] ;
9742: LD_ADDR_VAR 0 8
9746: PUSH
9747: LD_VAR 0 4
9751: PUSH
9752: LD_VAR 0 5
9756: PUSH
9757: LD_VAR 0 6
9761: PUSH
9762: LD_VAR 0 7
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: ST_TO_ADDR
// for i = 1 to 4 do
9773: LD_ADDR_VAR 0 11
9777: PUSH
9778: DOUBLE
9779: LD_INT 1
9781: DEC
9782: ST_TO_ADDR
9783: LD_INT 4
9785: PUSH
9786: FOR_TO
9787: IFFALSE 9942
// begin if skills [ i ] < 0 then
9789: LD_VAR 0 8
9793: PUSH
9794: LD_VAR 0 11
9798: ARRAY
9799: PUSH
9800: LD_INT 0
9802: LESS
9803: IFFALSE 9828
// skills = replace ( skills , i , 0 ) ;
9805: LD_ADDR_VAR 0 8
9809: PUSH
9810: LD_VAR 0 8
9814: PPUSH
9815: LD_VAR 0 11
9819: PPUSH
9820: LD_INT 0
9822: PPUSH
9823: CALL_OW 1
9827: ST_TO_ADDR
// n = [ 0 , 1 , 0 , 1 , 0 , 2 , 0 , 0 , 1 , 0 ] [ rand ( 1 , 10 ) ] ;
9828: LD_ADDR_VAR 0 14
9832: PUSH
9833: LD_INT 0
9835: PUSH
9836: LD_INT 1
9838: PUSH
9839: LD_INT 0
9841: PUSH
9842: LD_INT 1
9844: PUSH
9845: LD_INT 0
9847: PUSH
9848: LD_INT 2
9850: PUSH
9851: LD_INT 0
9853: PUSH
9854: LD_INT 0
9856: PUSH
9857: LD_INT 1
9859: PUSH
9860: LD_INT 0
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 1
9877: PPUSH
9878: LD_INT 10
9880: PPUSH
9881: CALL_OW 12
9885: ARRAY
9886: ST_TO_ADDR
// if n > skills [ i ] then
9887: LD_VAR 0 14
9891: PUSH
9892: LD_VAR 0 8
9896: PUSH
9897: LD_VAR 0 11
9901: ARRAY
9902: GREATER
9903: IFFALSE 9921
// n = skills [ i ] ;
9905: LD_ADDR_VAR 0 14
9909: PUSH
9910: LD_VAR 0 8
9914: PUSH
9915: LD_VAR 0 11
9919: ARRAY
9920: ST_TO_ADDR
// replace ( base_skills , i , n ) ;
9921: LD_VAR 0 9
9925: PPUSH
9926: LD_VAR 0 11
9930: PPUSH
9931: LD_VAR 0 14
9935: PPUSH
9936: CALL_OW 1
// end ;
9940: GO 9786
9942: POP
9943: POP
// n = rand ( 1 , 100 ) ;
9944: LD_ADDR_VAR 0 14
9948: PUSH
9949: LD_INT 1
9951: PPUSH
9952: LD_INT 100
9954: PPUSH
9955: CALL_OW 12
9959: ST_TO_ADDR
// case n of 1 .. 32 :
9960: LD_VAR 0 14
9964: PUSH
9965: LD_INT 1
9967: DOUBLE
9968: GREATEREQUAL
9969: IFFALSE 9977
9971: LD_INT 32
9973: DOUBLE
9974: LESSEQUAL
9975: IFTRUE 9979
9977: GO 9990
9979: POP
// def = 10 ; 31 .. 54 :
9980: LD_ADDR_VAR 0 15
9984: PUSH
9985: LD_INT 10
9987: ST_TO_ADDR
9988: GO 10091
9990: LD_INT 31
9992: DOUBLE
9993: GREATEREQUAL
9994: IFFALSE 10002
9996: LD_INT 54
9998: DOUBLE
9999: LESSEQUAL
10000: IFTRUE 10004
10002: GO 10015
10004: POP
// def = 9 ; 55 .. 76 :
10005: LD_ADDR_VAR 0 15
10009: PUSH
10010: LD_INT 9
10012: ST_TO_ADDR
10013: GO 10091
10015: LD_INT 55
10017: DOUBLE
10018: GREATEREQUAL
10019: IFFALSE 10027
10021: LD_INT 76
10023: DOUBLE
10024: LESSEQUAL
10025: IFTRUE 10029
10027: GO 10040
10029: POP
// def = 11 ; 77 .. 88 :
10030: LD_ADDR_VAR 0 15
10034: PUSH
10035: LD_INT 11
10037: ST_TO_ADDR
10038: GO 10091
10040: LD_INT 77
10042: DOUBLE
10043: GREATEREQUAL
10044: IFFALSE 10052
10046: LD_INT 88
10048: DOUBLE
10049: LESSEQUAL
10050: IFTRUE 10054
10052: GO 10065
10054: POP
// def = 8 ; 89 .. 100 :
10055: LD_ADDR_VAR 0 15
10059: PUSH
10060: LD_INT 8
10062: ST_TO_ADDR
10063: GO 10091
10065: LD_INT 89
10067: DOUBLE
10068: GREATEREQUAL
10069: IFFALSE 10077
10071: LD_INT 100
10073: DOUBLE
10074: LESSEQUAL
10075: IFTRUE 10079
10077: GO 10090
10079: POP
// def = 12 ; end ;
10080: LD_ADDR_VAR 0 15
10084: PUSH
10085: LD_INT 12
10087: ST_TO_ADDR
10088: GO 10091
10090: POP
// n = rand ( 1 , 100 ) ;
10091: LD_ADDR_VAR 0 14
10095: PUSH
10096: LD_INT 1
10098: PPUSH
10099: LD_INT 100
10101: PPUSH
10102: CALL_OW 12
10106: ST_TO_ADDR
// case n of 1 .. 44 :
10107: LD_VAR 0 14
10111: PUSH
10112: LD_INT 1
10114: DOUBLE
10115: GREATEREQUAL
10116: IFFALSE 10124
10118: LD_INT 44
10120: DOUBLE
10121: LESSEQUAL
10122: IFTRUE 10126
10124: GO 10137
10126: POP
// speed = 10 ; 45 .. 76 :
10127: LD_ADDR_VAR 0 16
10131: PUSH
10132: LD_INT 10
10134: ST_TO_ADDR
10135: GO 10213
10137: LD_INT 45
10139: DOUBLE
10140: GREATEREQUAL
10141: IFFALSE 10149
10143: LD_INT 76
10145: DOUBLE
10146: LESSEQUAL
10147: IFTRUE 10151
10149: GO 10162
10151: POP
// speed = 9 ; 77 .. 94 :
10152: LD_ADDR_VAR 0 16
10156: PUSH
10157: LD_INT 9
10159: ST_TO_ADDR
10160: GO 10213
10162: LD_INT 77
10164: DOUBLE
10165: GREATEREQUAL
10166: IFFALSE 10174
10168: LD_INT 94
10170: DOUBLE
10171: LESSEQUAL
10172: IFTRUE 10176
10174: GO 10187
10176: POP
// speed = 11 ; 95 .. 100 :
10177: LD_ADDR_VAR 0 16
10181: PUSH
10182: LD_INT 11
10184: ST_TO_ADDR
10185: GO 10213
10187: LD_INT 95
10189: DOUBLE
10190: GREATEREQUAL
10191: IFFALSE 10199
10193: LD_INT 100
10195: DOUBLE
10196: LESSEQUAL
10197: IFTRUE 10201
10199: GO 10212
10201: POP
// speed = 12 ; end ;
10202: LD_ADDR_VAR 0 16
10206: PUSH
10207: LD_INT 12
10209: ST_TO_ADDR
10210: GO 10213
10212: POP
// hc_attr = [ def , speed ] ;
10213: LD_ADDR_OWVAR 29
10217: PUSH
10218: LD_VAR 0 15
10222: PUSH
10223: LD_VAR 0 16
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: ST_TO_ADDR
// hc_basic_skills = base_skills ;
10232: LD_ADDR_OWVAR 30
10236: PUSH
10237: LD_VAR 0 9
10241: ST_TO_ADDR
// hc_skills := skills ;
10242: LD_ADDR_OWVAR 31
10246: PUSH
10247: LD_VAR 0 8
10251: ST_TO_ADDR
// hc_class = cl ;
10252: LD_ADDR_OWVAR 28
10256: PUSH
10257: LD_VAR 0 3
10261: ST_TO_ADDR
// end ; end_of_file
10262: LD_VAR 0 2
10266: RET
// export function SetMpTechs ( ) ; var side , i ; begin
10267: LD_INT 0
10269: PPUSH
10270: PPUSH
10271: PPUSH
// for side = 1 to 8 do
10272: LD_ADDR_VAR 0 2
10276: PUSH
10277: DOUBLE
10278: LD_INT 1
10280: DEC
10281: ST_TO_ADDR
10282: LD_INT 8
10284: PUSH
10285: FOR_TO
10286: IFFALSE 10407
// begin for i = 1 to 72 do
10288: LD_ADDR_VAR 0 3
10292: PUSH
10293: DOUBLE
10294: LD_INT 1
10296: DEC
10297: ST_TO_ADDR
10298: LD_INT 72
10300: PUSH
10301: FOR_TO
10302: IFFALSE 10333
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
10304: LD_VAR 0 3
10308: PPUSH
10309: LD_VAR 0 2
10313: PPUSH
10314: LD_INT 0
10316: PPUSH
10317: LD_VAR 0 3
10321: PPUSH
10322: CALL_OW 565
10326: PPUSH
10327: CALL_OW 322
10331: GO 10301
10333: POP
10334: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
10335: LD_INT 73
10337: PPUSH
10338: LD_VAR 0 2
10342: PPUSH
10343: LD_INT 0
10345: PPUSH
10346: LD_INT 25
10348: PPUSH
10349: CALL_OW 565
10353: PPUSH
10354: CALL_OW 322
// for i = 0 to 40 do
10358: LD_ADDR_VAR 0 3
10362: PUSH
10363: DOUBLE
10364: LD_INT 0
10366: DEC
10367: ST_TO_ADDR
10368: LD_INT 40
10370: PUSH
10371: FOR_TO
10372: IFFALSE 10403
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
10374: LD_VAR 0 3
10378: PPUSH
10379: LD_VAR 0 2
10383: PPUSH
10384: LD_INT 1
10386: PPUSH
10387: LD_VAR 0 3
10391: PPUSH
10392: CALL_OW 565
10396: PPUSH
10397: CALL_OW 324
10401: GO 10371
10403: POP
10404: POP
// end ;
10405: GO 10285
10407: POP
10408: POP
// end ;
10409: LD_VAR 0 1
10413: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
10414: LD_INT 0
10416: PPUSH
10417: PPUSH
10418: PPUSH
// for side = 1 to 8 do
10419: LD_ADDR_VAR 0 3
10423: PUSH
10424: DOUBLE
10425: LD_INT 1
10427: DEC
10428: ST_TO_ADDR
10429: LD_INT 8
10431: PUSH
10432: FOR_TO
10433: IFFALSE 14429
// begin for i = 1 to 73 do
10435: LD_ADDR_VAR 0 4
10439: PUSH
10440: DOUBLE
10441: LD_INT 1
10443: DEC
10444: ST_TO_ADDR
10445: LD_INT 73
10447: PUSH
10448: FOR_TO
10449: IFFALSE 10470
// SetTech ( i , side , state_disabled ) ;
10451: LD_VAR 0 4
10455: PPUSH
10456: LD_VAR 0 3
10460: PPUSH
10461: LD_INT 0
10463: PPUSH
10464: CALL_OW 322
10468: GO 10448
10470: POP
10471: POP
// for i = 0 to 40 do
10472: LD_ADDR_VAR 0 4
10476: PUSH
10477: DOUBLE
10478: LD_INT 0
10480: DEC
10481: ST_TO_ADDR
10482: LD_INT 40
10484: PUSH
10485: FOR_TO
10486: IFFALSE 10507
// SetRestrict ( i , side , false ) ;
10488: LD_VAR 0 4
10492: PPUSH
10493: LD_VAR 0 3
10497: PPUSH
10498: LD_INT 0
10500: PPUSH
10501: CALL_OW 324
10505: GO 10485
10507: POP
10508: POP
// case level of 1 :
10509: LD_VAR 0 1
10513: PUSH
10514: LD_INT 1
10516: DOUBLE
10517: EQUAL
10518: IFTRUE 10522
10520: GO 10675
10522: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10523: LD_INT 35
10525: PPUSH
10526: LD_VAR 0 3
10530: PPUSH
10531: LD_INT 1
10533: PPUSH
10534: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10538: LD_INT 45
10540: PPUSH
10541: LD_VAR 0 3
10545: PPUSH
10546: LD_INT 1
10548: PPUSH
10549: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10553: LD_INT 46
10555: PPUSH
10556: LD_VAR 0 3
10560: PPUSH
10561: LD_INT 1
10563: PPUSH
10564: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10568: LD_INT 47
10570: PPUSH
10571: LD_VAR 0 3
10575: PPUSH
10576: LD_INT 1
10578: PPUSH
10579: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10583: LD_INT 0
10585: PPUSH
10586: LD_VAR 0 3
10590: PPUSH
10591: LD_INT 1
10593: PPUSH
10594: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10598: LD_INT 2
10600: PPUSH
10601: LD_VAR 0 3
10605: PPUSH
10606: LD_INT 1
10608: PPUSH
10609: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10613: LD_INT 4
10615: PPUSH
10616: LD_VAR 0 3
10620: PPUSH
10621: LD_INT 1
10623: PPUSH
10624: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10628: LD_INT 6
10630: PPUSH
10631: LD_VAR 0 3
10635: PPUSH
10636: LD_INT 1
10638: PPUSH
10639: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10643: LD_INT 29
10645: PPUSH
10646: LD_VAR 0 3
10650: PPUSH
10651: LD_INT 1
10653: PPUSH
10654: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10658: LD_INT 31
10660: PPUSH
10661: LD_VAR 0 3
10665: PPUSH
10666: LD_INT 1
10668: PPUSH
10669: CALL_OW 324
// end ; 2 :
10673: GO 14427
10675: LD_INT 2
10677: DOUBLE
10678: EQUAL
10679: IFTRUE 10683
10681: GO 10881
10683: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10684: LD_INT 35
10686: PPUSH
10687: LD_VAR 0 3
10691: PPUSH
10692: LD_INT 1
10694: PPUSH
10695: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10699: LD_INT 45
10701: PPUSH
10702: LD_VAR 0 3
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10714: LD_INT 46
10716: PPUSH
10717: LD_VAR 0 3
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10729: LD_INT 47
10731: PPUSH
10732: LD_VAR 0 3
10736: PPUSH
10737: LD_INT 1
10739: PPUSH
10740: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10744: LD_INT 1
10746: PPUSH
10747: LD_VAR 0 3
10751: PPUSH
10752: LD_INT 1
10754: PPUSH
10755: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10759: LD_INT 2
10761: PPUSH
10762: LD_VAR 0 3
10766: PPUSH
10767: LD_INT 1
10769: PPUSH
10770: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10774: LD_INT 11
10776: PPUSH
10777: LD_VAR 0 3
10781: PPUSH
10782: LD_INT 1
10784: PPUSH
10785: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10789: LD_INT 0
10791: PPUSH
10792: LD_VAR 0 3
10796: PPUSH
10797: LD_INT 1
10799: PPUSH
10800: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10804: LD_INT 2
10806: PPUSH
10807: LD_VAR 0 3
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10819: LD_INT 4
10821: PPUSH
10822: LD_VAR 0 3
10826: PPUSH
10827: LD_INT 1
10829: PPUSH
10830: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10834: LD_INT 6
10836: PPUSH
10837: LD_VAR 0 3
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10849: LD_INT 29
10851: PPUSH
10852: LD_VAR 0 3
10856: PPUSH
10857: LD_INT 1
10859: PPUSH
10860: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10864: LD_INT 31
10866: PPUSH
10867: LD_VAR 0 3
10871: PPUSH
10872: LD_INT 1
10874: PPUSH
10875: CALL_OW 324
// end ; 3 :
10879: GO 14427
10881: LD_INT 3
10883: DOUBLE
10884: EQUAL
10885: IFTRUE 10889
10887: GO 11342
10889: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10890: LD_INT 35
10892: PPUSH
10893: LD_VAR 0 3
10897: PPUSH
10898: LD_INT 1
10900: PPUSH
10901: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10905: LD_INT 45
10907: PPUSH
10908: LD_VAR 0 3
10912: PPUSH
10913: LD_INT 1
10915: PPUSH
10916: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10920: LD_INT 46
10922: PPUSH
10923: LD_VAR 0 3
10927: PPUSH
10928: LD_INT 1
10930: PPUSH
10931: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10935: LD_INT 47
10937: PPUSH
10938: LD_VAR 0 3
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10950: LD_INT 1
10952: PPUSH
10953: LD_VAR 0 3
10957: PPUSH
10958: LD_INT 1
10960: PPUSH
10961: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10965: LD_INT 2
10967: PPUSH
10968: LD_VAR 0 3
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10980: LD_INT 11
10982: PPUSH
10983: LD_VAR 0 3
10987: PPUSH
10988: LD_INT 1
10990: PPUSH
10991: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10995: LD_INT 48
10997: PPUSH
10998: LD_VAR 0 3
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11010: LD_INT 69
11012: PPUSH
11013: LD_VAR 0 3
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11025: LD_INT 39
11027: PPUSH
11028: LD_VAR 0 3
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11040: LD_INT 43
11042: PPUSH
11043: LD_VAR 0 3
11047: PPUSH
11048: LD_INT 1
11050: PPUSH
11051: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11055: LD_INT 51
11057: PPUSH
11058: LD_VAR 0 3
11062: PPUSH
11063: LD_INT 1
11065: PPUSH
11066: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11070: LD_INT 6
11072: PPUSH
11073: LD_VAR 0 3
11077: PPUSH
11078: LD_INT 1
11080: PPUSH
11081: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11085: LD_INT 0
11087: PPUSH
11088: LD_VAR 0 3
11092: PPUSH
11093: LD_INT 1
11095: PPUSH
11096: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11100: LD_INT 2
11102: PPUSH
11103: LD_VAR 0 3
11107: PPUSH
11108: LD_INT 1
11110: PPUSH
11111: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11115: LD_INT 3
11117: PPUSH
11118: LD_VAR 0 3
11122: PPUSH
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11130: LD_INT 4
11132: PPUSH
11133: LD_VAR 0 3
11137: PPUSH
11138: LD_INT 1
11140: PPUSH
11141: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11145: LD_INT 6
11147: PPUSH
11148: LD_VAR 0 3
11152: PPUSH
11153: LD_INT 1
11155: PPUSH
11156: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11160: LD_INT 7
11162: PPUSH
11163: LD_VAR 0 3
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11175: LD_INT 8
11177: PPUSH
11178: LD_VAR 0 3
11182: PPUSH
11183: LD_INT 1
11185: PPUSH
11186: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11190: LD_INT 10
11192: PPUSH
11193: LD_VAR 0 3
11197: PPUSH
11198: LD_INT 1
11200: PPUSH
11201: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11205: LD_INT 15
11207: PPUSH
11208: LD_VAR 0 3
11212: PPUSH
11213: LD_INT 1
11215: PPUSH
11216: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11220: LD_INT 16
11222: PPUSH
11223: LD_VAR 0 3
11227: PPUSH
11228: LD_INT 1
11230: PPUSH
11231: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11235: LD_INT 17
11237: PPUSH
11238: LD_VAR 0 3
11242: PPUSH
11243: LD_INT 1
11245: PPUSH
11246: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11250: LD_INT 20
11252: PPUSH
11253: LD_VAR 0 3
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11265: LD_INT 26
11267: PPUSH
11268: LD_VAR 0 3
11272: PPUSH
11273: LD_INT 1
11275: PPUSH
11276: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11280: LD_INT 27
11282: PPUSH
11283: LD_VAR 0 3
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11295: LD_INT 29
11297: PPUSH
11298: LD_VAR 0 3
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11310: LD_INT 31
11312: PPUSH
11313: LD_VAR 0 3
11317: PPUSH
11318: LD_INT 1
11320: PPUSH
11321: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11325: LD_INT 32
11327: PPUSH
11328: LD_VAR 0 3
11332: PPUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 324
// end ; 4 :
11340: GO 14427
11342: LD_INT 4
11344: DOUBLE
11345: EQUAL
11346: IFTRUE 11350
11348: GO 12298
11350: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11351: LD_INT 35
11353: PPUSH
11354: LD_VAR 0 3
11358: PPUSH
11359: LD_INT 1
11361: PPUSH
11362: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11366: LD_INT 45
11368: PPUSH
11369: LD_VAR 0 3
11373: PPUSH
11374: LD_INT 1
11376: PPUSH
11377: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11381: LD_INT 46
11383: PPUSH
11384: LD_VAR 0 3
11388: PPUSH
11389: LD_INT 1
11391: PPUSH
11392: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11396: LD_INT 47
11398: PPUSH
11399: LD_VAR 0 3
11403: PPUSH
11404: LD_INT 1
11406: PPUSH
11407: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11411: LD_INT 1
11413: PPUSH
11414: LD_VAR 0 3
11418: PPUSH
11419: LD_INT 1
11421: PPUSH
11422: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11426: LD_INT 2
11428: PPUSH
11429: LD_VAR 0 3
11433: PPUSH
11434: LD_INT 1
11436: PPUSH
11437: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11441: LD_INT 11
11443: PPUSH
11444: LD_VAR 0 3
11448: PPUSH
11449: LD_INT 1
11451: PPUSH
11452: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11456: LD_INT 20
11458: PPUSH
11459: LD_VAR 0 3
11463: PPUSH
11464: LD_INT 1
11466: PPUSH
11467: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11471: LD_INT 48
11473: PPUSH
11474: LD_VAR 0 3
11478: PPUSH
11479: LD_INT 1
11481: PPUSH
11482: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11486: LD_INT 49
11488: PPUSH
11489: LD_VAR 0 3
11493: PPUSH
11494: LD_INT 1
11496: PPUSH
11497: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11501: LD_INT 69
11503: PPUSH
11504: LD_VAR 0 3
11508: PPUSH
11509: LD_INT 1
11511: PPUSH
11512: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11516: LD_INT 39
11518: PPUSH
11519: LD_VAR 0 3
11523: PPUSH
11524: LD_INT 1
11526: PPUSH
11527: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11531: LD_INT 34
11533: PPUSH
11534: LD_VAR 0 3
11538: PPUSH
11539: LD_INT 1
11541: PPUSH
11542: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11546: LD_INT 42
11548: PPUSH
11549: LD_VAR 0 3
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11561: LD_INT 44
11563: PPUSH
11564: LD_VAR 0 3
11568: PPUSH
11569: LD_INT 1
11571: PPUSH
11572: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11576: LD_INT 41
11578: PPUSH
11579: LD_VAR 0 3
11583: PPUSH
11584: LD_INT 1
11586: PPUSH
11587: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11591: LD_INT 43
11593: PPUSH
11594: LD_VAR 0 3
11598: PPUSH
11599: LD_INT 1
11601: PPUSH
11602: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11606: LD_INT 70
11608: PPUSH
11609: LD_VAR 0 3
11613: PPUSH
11614: LD_INT 1
11616: PPUSH
11617: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11621: LD_INT 51
11623: PPUSH
11624: LD_VAR 0 3
11628: PPUSH
11629: LD_INT 1
11631: PPUSH
11632: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11636: LD_INT 52
11638: PPUSH
11639: LD_VAR 0 3
11643: PPUSH
11644: LD_INT 1
11646: PPUSH
11647: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11651: LD_INT 6
11653: PPUSH
11654: LD_VAR 0 3
11658: PPUSH
11659: LD_INT 1
11661: PPUSH
11662: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11666: LD_INT 15
11668: PPUSH
11669: LD_VAR 0 3
11673: PPUSH
11674: LD_INT 1
11676: PPUSH
11677: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11681: LD_INT 7
11683: PPUSH
11684: LD_VAR 0 3
11688: PPUSH
11689: LD_INT 1
11691: PPUSH
11692: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11696: LD_INT 12
11698: PPUSH
11699: LD_VAR 0 3
11703: PPUSH
11704: LD_INT 1
11706: PPUSH
11707: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11711: LD_INT 18
11713: PPUSH
11714: LD_VAR 0 3
11718: PPUSH
11719: LD_INT 1
11721: PPUSH
11722: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11726: LD_INT 60
11728: PPUSH
11729: LD_VAR 0 3
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11741: LD_INT 9
11743: PPUSH
11744: LD_VAR 0 3
11748: PPUSH
11749: LD_INT 1
11751: PPUSH
11752: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11756: LD_INT 30
11758: PPUSH
11759: LD_VAR 0 3
11763: PPUSH
11764: LD_INT 1
11766: PPUSH
11767: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11771: LD_INT 37
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: LD_INT 1
11781: PPUSH
11782: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11786: LD_INT 5
11788: PPUSH
11789: LD_VAR 0 3
11793: PPUSH
11794: LD_INT 1
11796: PPUSH
11797: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11801: LD_INT 66
11803: PPUSH
11804: LD_VAR 0 3
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11816: LD_INT 21
11818: PPUSH
11819: LD_VAR 0 3
11823: PPUSH
11824: LD_INT 1
11826: PPUSH
11827: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11831: LD_INT 22
11833: PPUSH
11834: LD_VAR 0 3
11838: PPUSH
11839: LD_INT 1
11841: PPUSH
11842: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11846: LD_INT 54
11848: PPUSH
11849: LD_VAR 0 3
11853: PPUSH
11854: LD_INT 1
11856: PPUSH
11857: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11861: LD_INT 0
11863: PPUSH
11864: LD_VAR 0 3
11868: PPUSH
11869: LD_INT 1
11871: PPUSH
11872: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11876: LD_INT 1
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: LD_INT 1
11886: PPUSH
11887: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11891: LD_INT 2
11893: PPUSH
11894: LD_VAR 0 3
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11906: LD_INT 3
11908: PPUSH
11909: LD_VAR 0 3
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11921: LD_INT 4
11923: PPUSH
11924: LD_VAR 0 3
11928: PPUSH
11929: LD_INT 1
11931: PPUSH
11932: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11936: LD_INT 5
11938: PPUSH
11939: LD_VAR 0 3
11943: PPUSH
11944: LD_INT 1
11946: PPUSH
11947: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11951: LD_INT 6
11953: PPUSH
11954: LD_VAR 0 3
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11966: LD_INT 7
11968: PPUSH
11969: LD_VAR 0 3
11973: PPUSH
11974: LD_INT 1
11976: PPUSH
11977: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11981: LD_INT 8
11983: PPUSH
11984: LD_VAR 0 3
11988: PPUSH
11989: LD_INT 1
11991: PPUSH
11992: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11996: LD_INT 10
11998: PPUSH
11999: LD_VAR 0 3
12003: PPUSH
12004: LD_INT 1
12006: PPUSH
12007: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12011: LD_INT 11
12013: PPUSH
12014: LD_VAR 0 3
12018: PPUSH
12019: LD_INT 1
12021: PPUSH
12022: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12026: LD_INT 12
12028: PPUSH
12029: LD_VAR 0 3
12033: PPUSH
12034: LD_INT 1
12036: PPUSH
12037: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12041: LD_INT 13
12043: PPUSH
12044: LD_VAR 0 3
12048: PPUSH
12049: LD_INT 1
12051: PPUSH
12052: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12056: LD_INT 14
12058: PPUSH
12059: LD_VAR 0 3
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12071: LD_INT 15
12073: PPUSH
12074: LD_VAR 0 3
12078: PPUSH
12079: LD_INT 1
12081: PPUSH
12082: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12086: LD_INT 16
12088: PPUSH
12089: LD_VAR 0 3
12093: PPUSH
12094: LD_INT 1
12096: PPUSH
12097: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12101: LD_INT 17
12103: PPUSH
12104: LD_VAR 0 3
12108: PPUSH
12109: LD_INT 1
12111: PPUSH
12112: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12116: LD_INT 19
12118: PPUSH
12119: LD_VAR 0 3
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12131: LD_INT 20
12133: PPUSH
12134: LD_VAR 0 3
12138: PPUSH
12139: LD_INT 1
12141: PPUSH
12142: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12146: LD_INT 21
12148: PPUSH
12149: LD_VAR 0 3
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12161: LD_INT 23
12163: PPUSH
12164: LD_VAR 0 3
12168: PPUSH
12169: LD_INT 1
12171: PPUSH
12172: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12176: LD_INT 26
12178: PPUSH
12179: LD_VAR 0 3
12183: PPUSH
12184: LD_INT 1
12186: PPUSH
12187: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12191: LD_INT 27
12193: PPUSH
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12206: LD_INT 28
12208: PPUSH
12209: LD_VAR 0 3
12213: PPUSH
12214: LD_INT 1
12216: PPUSH
12217: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12221: LD_INT 29
12223: PPUSH
12224: LD_VAR 0 3
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12236: LD_INT 30
12238: PPUSH
12239: LD_VAR 0 3
12243: PPUSH
12244: LD_INT 1
12246: PPUSH
12247: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12251: LD_INT 31
12253: PPUSH
12254: LD_VAR 0 3
12258: PPUSH
12259: LD_INT 1
12261: PPUSH
12262: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12266: LD_INT 32
12268: PPUSH
12269: LD_VAR 0 3
12273: PPUSH
12274: LD_INT 1
12276: PPUSH
12277: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12281: LD_INT 36
12283: PPUSH
12284: LD_VAR 0 3
12288: PPUSH
12289: LD_INT 1
12291: PPUSH
12292: CALL_OW 324
// end ; 5 :
12296: GO 14427
12298: LD_INT 5
12300: DOUBLE
12301: EQUAL
12302: IFTRUE 12306
12304: GO 13419
12306: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12307: LD_INT 35
12309: PPUSH
12310: LD_VAR 0 3
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12322: LD_INT 45
12324: PPUSH
12325: LD_VAR 0 3
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12337: LD_INT 46
12339: PPUSH
12340: LD_VAR 0 3
12344: PPUSH
12345: LD_INT 1
12347: PPUSH
12348: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12352: LD_INT 47
12354: PPUSH
12355: LD_VAR 0 3
12359: PPUSH
12360: LD_INT 1
12362: PPUSH
12363: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12367: LD_INT 1
12369: PPUSH
12370: LD_VAR 0 3
12374: PPUSH
12375: LD_INT 1
12377: PPUSH
12378: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12382: LD_INT 2
12384: PPUSH
12385: LD_VAR 0 3
12389: PPUSH
12390: LD_INT 1
12392: PPUSH
12393: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12397: LD_INT 11
12399: PPUSH
12400: LD_VAR 0 3
12404: PPUSH
12405: LD_INT 1
12407: PPUSH
12408: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12412: LD_INT 20
12414: PPUSH
12415: LD_VAR 0 3
12419: PPUSH
12420: LD_INT 1
12422: PPUSH
12423: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12427: LD_INT 48
12429: PPUSH
12430: LD_VAR 0 3
12434: PPUSH
12435: LD_INT 1
12437: PPUSH
12438: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12442: LD_INT 49
12444: PPUSH
12445: LD_VAR 0 3
12449: PPUSH
12450: LD_INT 1
12452: PPUSH
12453: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12457: LD_INT 69
12459: PPUSH
12460: LD_VAR 0 3
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12472: LD_INT 39
12474: PPUSH
12475: LD_VAR 0 3
12479: PPUSH
12480: LD_INT 1
12482: PPUSH
12483: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12487: LD_INT 34
12489: PPUSH
12490: LD_VAR 0 3
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12502: LD_INT 42
12504: PPUSH
12505: LD_VAR 0 3
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12517: LD_INT 44
12519: PPUSH
12520: LD_VAR 0 3
12524: PPUSH
12525: LD_INT 1
12527: PPUSH
12528: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12532: LD_INT 41
12534: PPUSH
12535: LD_VAR 0 3
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12547: LD_INT 40
12549: PPUSH
12550: LD_VAR 0 3
12554: PPUSH
12555: LD_INT 1
12557: PPUSH
12558: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12562: LD_INT 43
12564: PPUSH
12565: LD_VAR 0 3
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12577: LD_INT 70
12579: PPUSH
12580: LD_VAR 0 3
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12592: LD_INT 51
12594: PPUSH
12595: LD_VAR 0 3
12599: PPUSH
12600: LD_INT 1
12602: PPUSH
12603: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12607: LD_INT 52
12609: PPUSH
12610: LD_VAR 0 3
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12622: LD_INT 6
12624: PPUSH
12625: LD_VAR 0 3
12629: PPUSH
12630: LD_INT 1
12632: PPUSH
12633: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12637: LD_INT 15
12639: PPUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: LD_INT 1
12647: PPUSH
12648: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12652: LD_INT 7
12654: PPUSH
12655: LD_VAR 0 3
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12667: LD_INT 12
12669: PPUSH
12670: LD_VAR 0 3
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12682: LD_INT 17
12684: PPUSH
12685: LD_VAR 0 3
12689: PPUSH
12690: LD_INT 1
12692: PPUSH
12693: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12697: LD_INT 18
12699: PPUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12712: LD_INT 60
12714: PPUSH
12715: LD_VAR 0 3
12719: PPUSH
12720: LD_INT 1
12722: PPUSH
12723: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12727: LD_INT 32
12729: PPUSH
12730: LD_VAR 0 3
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12742: LD_INT 9
12744: PPUSH
12745: LD_VAR 0 3
12749: PPUSH
12750: LD_INT 1
12752: PPUSH
12753: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12757: LD_INT 57
12759: PPUSH
12760: LD_VAR 0 3
12764: PPUSH
12765: LD_INT 1
12767: PPUSH
12768: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12772: LD_INT 30
12774: PPUSH
12775: LD_VAR 0 3
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12787: LD_INT 37
12789: PPUSH
12790: LD_VAR 0 3
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12802: LD_INT 63
12804: PPUSH
12805: LD_VAR 0 3
12809: PPUSH
12810: LD_INT 1
12812: PPUSH
12813: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12817: LD_INT 3
12819: PPUSH
12820: LD_VAR 0 3
12824: PPUSH
12825: LD_INT 1
12827: PPUSH
12828: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12832: LD_INT 4
12834: PPUSH
12835: LD_VAR 0 3
12839: PPUSH
12840: LD_INT 1
12842: PPUSH
12843: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12847: LD_INT 5
12849: PPUSH
12850: LD_VAR 0 3
12854: PPUSH
12855: LD_INT 1
12857: PPUSH
12858: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12862: LD_INT 66
12864: PPUSH
12865: LD_VAR 0 3
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12877: LD_INT 21
12879: PPUSH
12880: LD_VAR 0 3
12884: PPUSH
12885: LD_INT 1
12887: PPUSH
12888: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12892: LD_INT 22
12894: PPUSH
12895: LD_VAR 0 3
12899: PPUSH
12900: LD_INT 1
12902: PPUSH
12903: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12907: LD_INT 19
12909: PPUSH
12910: LD_VAR 0 3
12914: PPUSH
12915: LD_INT 1
12917: PPUSH
12918: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12922: LD_INT 54
12924: PPUSH
12925: LD_VAR 0 3
12929: PPUSH
12930: LD_INT 1
12932: PPUSH
12933: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12937: LD_INT 55
12939: PPUSH
12940: LD_VAR 0 3
12944: PPUSH
12945: LD_INT 1
12947: PPUSH
12948: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12952: LD_INT 0
12954: PPUSH
12955: LD_VAR 0 3
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12967: LD_INT 1
12969: PPUSH
12970: LD_VAR 0 3
12974: PPUSH
12975: LD_INT 1
12977: PPUSH
12978: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12982: LD_INT 2
12984: PPUSH
12985: LD_VAR 0 3
12989: PPUSH
12990: LD_INT 1
12992: PPUSH
12993: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12997: LD_INT 3
12999: PPUSH
13000: LD_VAR 0 3
13004: PPUSH
13005: LD_INT 1
13007: PPUSH
13008: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13012: LD_INT 4
13014: PPUSH
13015: LD_VAR 0 3
13019: PPUSH
13020: LD_INT 1
13022: PPUSH
13023: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13027: LD_INT 5
13029: PPUSH
13030: LD_VAR 0 3
13034: PPUSH
13035: LD_INT 1
13037: PPUSH
13038: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13042: LD_INT 6
13044: PPUSH
13045: LD_VAR 0 3
13049: PPUSH
13050: LD_INT 1
13052: PPUSH
13053: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13057: LD_INT 7
13059: PPUSH
13060: LD_VAR 0 3
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13072: LD_INT 8
13074: PPUSH
13075: LD_VAR 0 3
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13087: LD_INT 10
13089: PPUSH
13090: LD_VAR 0 3
13094: PPUSH
13095: LD_INT 1
13097: PPUSH
13098: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13102: LD_INT 11
13104: PPUSH
13105: LD_VAR 0 3
13109: PPUSH
13110: LD_INT 1
13112: PPUSH
13113: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13117: LD_INT 12
13119: PPUSH
13120: LD_VAR 0 3
13124: PPUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13132: LD_INT 13
13134: PPUSH
13135: LD_VAR 0 3
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13147: LD_INT 14
13149: PPUSH
13150: LD_VAR 0 3
13154: PPUSH
13155: LD_INT 1
13157: PPUSH
13158: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13162: LD_INT 15
13164: PPUSH
13165: LD_VAR 0 3
13169: PPUSH
13170: LD_INT 1
13172: PPUSH
13173: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13177: LD_INT 16
13179: PPUSH
13180: LD_VAR 0 3
13184: PPUSH
13185: LD_INT 1
13187: PPUSH
13188: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13192: LD_INT 17
13194: PPUSH
13195: LD_VAR 0 3
13199: PPUSH
13200: LD_INT 1
13202: PPUSH
13203: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
13207: LD_INT 18
13209: PPUSH
13210: LD_VAR 0 3
13214: PPUSH
13215: LD_INT 1
13217: PPUSH
13218: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13222: LD_INT 19
13224: PPUSH
13225: LD_VAR 0 3
13229: PPUSH
13230: LD_INT 1
13232: PPUSH
13233: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13237: LD_INT 20
13239: PPUSH
13240: LD_VAR 0 3
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13252: LD_INT 21
13254: PPUSH
13255: LD_VAR 0 3
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13267: LD_INT 23
13269: PPUSH
13270: LD_VAR 0 3
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13282: LD_INT 26
13284: PPUSH
13285: LD_VAR 0 3
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13297: LD_INT 27
13299: PPUSH
13300: LD_VAR 0 3
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13312: LD_INT 28
13314: PPUSH
13315: LD_VAR 0 3
13319: PPUSH
13320: LD_INT 1
13322: PPUSH
13323: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13327: LD_INT 29
13329: PPUSH
13330: LD_VAR 0 3
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13342: LD_INT 30
13344: PPUSH
13345: LD_VAR 0 3
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13357: LD_INT 31
13359: PPUSH
13360: LD_VAR 0 3
13364: PPUSH
13365: LD_INT 1
13367: PPUSH
13368: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13372: LD_INT 32
13374: PPUSH
13375: LD_VAR 0 3
13379: PPUSH
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
13387: LD_INT 33
13389: PPUSH
13390: LD_VAR 0 3
13394: PPUSH
13395: LD_INT 1
13397: PPUSH
13398: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13402: LD_INT 36
13404: PPUSH
13405: LD_VAR 0 3
13409: PPUSH
13410: LD_INT 1
13412: PPUSH
13413: CALL_OW 324
// end ; 6 :
13417: GO 14427
13419: LD_INT 6
13421: DOUBLE
13422: EQUAL
13423: IFTRUE 13427
13425: GO 14352
13427: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13428: LD_INT 35
13430: PPUSH
13431: LD_VAR 0 3
13435: PPUSH
13436: LD_INT 1
13438: PPUSH
13439: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13443: LD_INT 45
13445: PPUSH
13446: LD_VAR 0 3
13450: PPUSH
13451: LD_INT 1
13453: PPUSH
13454: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13458: LD_INT 46
13460: PPUSH
13461: LD_VAR 0 3
13465: PPUSH
13466: LD_INT 1
13468: PPUSH
13469: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13473: LD_INT 47
13475: PPUSH
13476: LD_VAR 0 3
13480: PPUSH
13481: LD_INT 1
13483: PPUSH
13484: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13488: LD_INT 1
13490: PPUSH
13491: LD_VAR 0 3
13495: PPUSH
13496: LD_INT 1
13498: PPUSH
13499: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13503: LD_INT 2
13505: PPUSH
13506: LD_VAR 0 3
13510: PPUSH
13511: LD_INT 1
13513: PPUSH
13514: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13518: LD_INT 11
13520: PPUSH
13521: LD_VAR 0 3
13525: PPUSH
13526: LD_INT 1
13528: PPUSH
13529: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13533: LD_INT 20
13535: PPUSH
13536: LD_VAR 0 3
13540: PPUSH
13541: LD_INT 1
13543: PPUSH
13544: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13548: LD_INT 48
13550: PPUSH
13551: LD_VAR 0 3
13555: PPUSH
13556: LD_INT 1
13558: PPUSH
13559: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13563: LD_INT 49
13565: PPUSH
13566: LD_VAR 0 3
13570: PPUSH
13571: LD_INT 1
13573: PPUSH
13574: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13578: LD_INT 50
13580: PPUSH
13581: LD_VAR 0 3
13585: PPUSH
13586: LD_INT 1
13588: PPUSH
13589: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13593: LD_INT 69
13595: PPUSH
13596: LD_VAR 0 3
13600: PPUSH
13601: LD_INT 1
13603: PPUSH
13604: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13608: LD_INT 39
13610: PPUSH
13611: LD_VAR 0 3
13615: PPUSH
13616: LD_INT 1
13618: PPUSH
13619: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13623: LD_INT 34
13625: PPUSH
13626: LD_VAR 0 3
13630: PPUSH
13631: LD_INT 1
13633: PPUSH
13634: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13638: LD_INT 42
13640: PPUSH
13641: LD_VAR 0 3
13645: PPUSH
13646: LD_INT 1
13648: PPUSH
13649: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13653: LD_INT 44
13655: PPUSH
13656: LD_VAR 0 3
13660: PPUSH
13661: LD_INT 1
13663: PPUSH
13664: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13668: LD_INT 41
13670: PPUSH
13671: LD_VAR 0 3
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13683: LD_INT 13
13685: PPUSH
13686: LD_VAR 0 3
13690: PPUSH
13691: LD_INT 1
13693: PPUSH
13694: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13698: LD_INT 40
13700: PPUSH
13701: LD_VAR 0 3
13705: PPUSH
13706: LD_INT 1
13708: PPUSH
13709: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13713: LD_INT 43
13715: PPUSH
13716: LD_VAR 0 3
13720: PPUSH
13721: LD_INT 1
13723: PPUSH
13724: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13728: LD_INT 70
13730: PPUSH
13731: LD_VAR 0 3
13735: PPUSH
13736: LD_INT 1
13738: PPUSH
13739: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13743: LD_INT 23
13745: PPUSH
13746: LD_VAR 0 3
13750: PPUSH
13751: LD_INT 1
13753: PPUSH
13754: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13758: LD_INT 51
13760: PPUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: LD_INT 1
13768: PPUSH
13769: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13773: LD_INT 52
13775: PPUSH
13776: LD_VAR 0 3
13780: PPUSH
13781: LD_INT 1
13783: PPUSH
13784: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13788: LD_INT 6
13790: PPUSH
13791: LD_VAR 0 3
13795: PPUSH
13796: LD_INT 1
13798: PPUSH
13799: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13803: LD_INT 15
13805: PPUSH
13806: LD_VAR 0 3
13810: PPUSH
13811: LD_INT 1
13813: PPUSH
13814: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13818: LD_INT 7
13820: PPUSH
13821: LD_VAR 0 3
13825: PPUSH
13826: LD_INT 1
13828: PPUSH
13829: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13833: LD_INT 12
13835: PPUSH
13836: LD_VAR 0 3
13840: PPUSH
13841: LD_INT 1
13843: PPUSH
13844: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13848: LD_INT 10
13850: PPUSH
13851: LD_VAR 0 3
13855: PPUSH
13856: LD_INT 1
13858: PPUSH
13859: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13863: LD_INT 17
13865: PPUSH
13866: LD_VAR 0 3
13870: PPUSH
13871: LD_INT 1
13873: PPUSH
13874: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13878: LD_INT 18
13880: PPUSH
13881: LD_VAR 0 3
13885: PPUSH
13886: LD_INT 1
13888: PPUSH
13889: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13893: LD_INT 60
13895: PPUSH
13896: LD_VAR 0 3
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13908: LD_INT 61
13910: PPUSH
13911: LD_VAR 0 3
13915: PPUSH
13916: LD_INT 1
13918: PPUSH
13919: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13923: LD_INT 32
13925: PPUSH
13926: LD_VAR 0 3
13930: PPUSH
13931: LD_INT 1
13933: PPUSH
13934: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13938: LD_INT 27
13940: PPUSH
13941: LD_VAR 0 3
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13953: LD_INT 36
13955: PPUSH
13956: LD_VAR 0 3
13960: PPUSH
13961: LD_INT 1
13963: PPUSH
13964: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13968: LD_INT 33
13970: PPUSH
13971: LD_VAR 0 3
13975: PPUSH
13976: LD_INT 1
13978: PPUSH
13979: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13983: LD_INT 9
13985: PPUSH
13986: LD_VAR 0 3
13990: PPUSH
13991: LD_INT 1
13993: PPUSH
13994: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13998: LD_INT 38
14000: PPUSH
14001: LD_VAR 0 3
14005: PPUSH
14006: LD_INT 1
14008: PPUSH
14009: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14013: LD_INT 57
14015: PPUSH
14016: LD_VAR 0 3
14020: PPUSH
14021: LD_INT 1
14023: PPUSH
14024: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
14028: LD_INT 58
14030: PPUSH
14031: LD_VAR 0 3
14035: PPUSH
14036: LD_INT 1
14038: PPUSH
14039: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
14043: LD_INT 28
14045: PPUSH
14046: LD_VAR 0 3
14050: PPUSH
14051: LD_INT 1
14053: PPUSH
14054: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
14058: LD_INT 29
14060: PPUSH
14061: LD_VAR 0 3
14065: PPUSH
14066: LD_INT 1
14068: PPUSH
14069: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14073: LD_INT 30
14075: PPUSH
14076: LD_VAR 0 3
14080: PPUSH
14081: LD_INT 1
14083: PPUSH
14084: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14088: LD_INT 37
14090: PPUSH
14091: LD_VAR 0 3
14095: PPUSH
14096: LD_INT 1
14098: PPUSH
14099: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14103: LD_INT 63
14105: PPUSH
14106: LD_VAR 0 3
14110: PPUSH
14111: LD_INT 1
14113: PPUSH
14114: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
14118: LD_INT 64
14120: PPUSH
14121: LD_VAR 0 3
14125: PPUSH
14126: LD_INT 1
14128: PPUSH
14129: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14133: LD_INT 3
14135: PPUSH
14136: LD_VAR 0 3
14140: PPUSH
14141: LD_INT 1
14143: PPUSH
14144: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14148: LD_INT 4
14150: PPUSH
14151: LD_VAR 0 3
14155: PPUSH
14156: LD_INT 1
14158: PPUSH
14159: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14163: LD_INT 5
14165: PPUSH
14166: LD_VAR 0 3
14170: PPUSH
14171: LD_INT 1
14173: PPUSH
14174: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
14178: LD_INT 8
14180: PPUSH
14181: LD_VAR 0 3
14185: PPUSH
14186: LD_INT 1
14188: PPUSH
14189: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14193: LD_INT 66
14195: PPUSH
14196: LD_VAR 0 3
14200: PPUSH
14201: LD_INT 1
14203: PPUSH
14204: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
14208: LD_INT 67
14210: PPUSH
14211: LD_VAR 0 3
14215: PPUSH
14216: LD_INT 1
14218: PPUSH
14219: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14223: LD_INT 21
14225: PPUSH
14226: LD_VAR 0 3
14230: PPUSH
14231: LD_INT 1
14233: PPUSH
14234: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14238: LD_INT 22
14240: PPUSH
14241: LD_VAR 0 3
14245: PPUSH
14246: LD_INT 1
14248: PPUSH
14249: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14253: LD_INT 19
14255: PPUSH
14256: LD_VAR 0 3
14260: PPUSH
14261: LD_INT 1
14263: PPUSH
14264: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
14268: LD_INT 26
14270: PPUSH
14271: LD_VAR 0 3
14275: PPUSH
14276: LD_INT 1
14278: PPUSH
14279: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14283: LD_INT 54
14285: PPUSH
14286: LD_VAR 0 3
14290: PPUSH
14291: LD_INT 1
14293: PPUSH
14294: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14298: LD_INT 55
14300: PPUSH
14301: LD_VAR 0 3
14305: PPUSH
14306: LD_INT 1
14308: PPUSH
14309: CALL_OW 322
// for i = 0 to 39 do
14313: LD_ADDR_VAR 0 4
14317: PUSH
14318: DOUBLE
14319: LD_INT 0
14321: DEC
14322: ST_TO_ADDR
14323: LD_INT 39
14325: PUSH
14326: FOR_TO
14327: IFFALSE 14348
// SetRestrict ( i , side , true ) ;
14329: LD_VAR 0 4
14333: PPUSH
14334: LD_VAR 0 3
14338: PPUSH
14339: LD_INT 1
14341: PPUSH
14342: CALL_OW 324
14346: GO 14326
14348: POP
14349: POP
// end ; else
14350: GO 14427
14352: POP
// begin for i = 1 to 73 do
14353: LD_ADDR_VAR 0 4
14357: PUSH
14358: DOUBLE
14359: LD_INT 1
14361: DEC
14362: ST_TO_ADDR
14363: LD_INT 73
14365: PUSH
14366: FOR_TO
14367: IFFALSE 14388
// SetTech ( i , side , state_enabled ) ;
14369: LD_VAR 0 4
14373: PPUSH
14374: LD_VAR 0 3
14378: PPUSH
14379: LD_INT 1
14381: PPUSH
14382: CALL_OW 322
14386: GO 14366
14388: POP
14389: POP
// for i = 0 to 39 do
14390: LD_ADDR_VAR 0 4
14394: PUSH
14395: DOUBLE
14396: LD_INT 0
14398: DEC
14399: ST_TO_ADDR
14400: LD_INT 39
14402: PUSH
14403: FOR_TO
14404: IFFALSE 14425
// SetRestrict ( i , side , true ) ;
14406: LD_VAR 0 4
14410: PPUSH
14411: LD_VAR 0 3
14415: PPUSH
14416: LD_INT 1
14418: PPUSH
14419: CALL_OW 324
14423: GO 14403
14425: POP
14426: POP
// end ; end ; end ;
14427: GO 10432
14429: POP
14430: POP
// end ; end_of_file
14431: LD_VAR 0 2
14435: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
14436: LD_INT 0
14438: PPUSH
14439: PPUSH
14440: PPUSH
14441: PPUSH
14442: PPUSH
14443: PPUSH
14444: PPUSH
14445: PPUSH
14446: PPUSH
// for i := 1 to 8 do
14447: LD_ADDR_VAR 0 2
14451: PUSH
14452: DOUBLE
14453: LD_INT 1
14455: DEC
14456: ST_TO_ADDR
14457: LD_INT 8
14459: PUSH
14460: FOR_TO
14461: IFFALSE 14845
// begin if Side_Positions [ i ] then
14463: LD_EXP 36
14467: PUSH
14468: LD_VAR 0 2
14472: ARRAY
14473: IFFALSE 14843
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
14475: LD_ADDR_VAR 0 7
14479: PUSH
14480: LD_INT 22
14482: PUSH
14483: LD_VAR 0 2
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: PUSH
14492: LD_INT 21
14494: PUSH
14495: LD_INT 1
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PPUSH
14506: CALL_OW 69
14510: PUSH
14511: LD_INT 0
14513: PLUS
14514: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14515: LD_ADDR_VAR 0 9
14519: PUSH
14520: LD_INT 22
14522: PUSH
14523: LD_VAR 0 2
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: PUSH
14532: LD_INT 2
14534: PUSH
14535: LD_INT 30
14537: PUSH
14538: LD_INT 0
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 30
14547: PUSH
14548: LD_INT 1
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: LIST
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PPUSH
14564: CALL_OW 69
14568: ST_TO_ADDR
// crates := 0 ;
14569: LD_ADDR_VAR 0 4
14573: PUSH
14574: LD_INT 0
14576: ST_TO_ADDR
// oil := 0 ;
14577: LD_ADDR_VAR 0 5
14581: PUSH
14582: LD_INT 0
14584: ST_TO_ADDR
// sib := 0 ;
14585: LD_ADDR_VAR 0 6
14589: PUSH
14590: LD_INT 0
14592: ST_TO_ADDR
// if bases then
14593: LD_VAR 0 9
14597: IFFALSE 14703
// begin for j in bases do
14599: LD_ADDR_VAR 0 3
14603: PUSH
14604: LD_VAR 0 9
14608: PUSH
14609: FOR_IN
14610: IFFALSE 14701
// begin base := GetBase ( j ) ;
14612: LD_ADDR_VAR 0 8
14616: PUSH
14617: LD_VAR 0 3
14621: PPUSH
14622: CALL_OW 274
14626: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14627: LD_ADDR_VAR 0 4
14631: PUSH
14632: LD_VAR 0 4
14636: PUSH
14637: LD_VAR 0 8
14641: PPUSH
14642: LD_INT 1
14644: PPUSH
14645: CALL_OW 275
14649: PLUS
14650: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14651: LD_ADDR_VAR 0 5
14655: PUSH
14656: LD_VAR 0 5
14660: PUSH
14661: LD_VAR 0 8
14665: PPUSH
14666: LD_INT 2
14668: PPUSH
14669: CALL_OW 275
14673: PLUS
14674: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14675: LD_ADDR_VAR 0 6
14679: PUSH
14680: LD_VAR 0 6
14684: PUSH
14685: LD_VAR 0 8
14689: PPUSH
14690: LD_INT 3
14692: PPUSH
14693: CALL_OW 275
14697: PLUS
14698: ST_TO_ADDR
// end ;
14699: GO 14609
14701: POP
14702: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14703: LD_STRING setSpecText(
14705: PUSH
14706: LD_VAR 0 2
14710: STR
14711: PUSH
14712: LD_STRING ,
14714: STR
14715: PUSH
14716: LD_INT 2
14718: STR
14719: PUSH
14720: LD_STRING ,
14722: STR
14723: PUSH
14724: LD_VAR 0 4
14728: STR
14729: PUSH
14730: LD_STRING )
14732: STR
14733: PPUSH
14734: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14738: LD_STRING setSpecText(
14740: PUSH
14741: LD_VAR 0 2
14745: STR
14746: PUSH
14747: LD_STRING ,
14749: STR
14750: PUSH
14751: LD_INT 3
14753: STR
14754: PUSH
14755: LD_STRING ,
14757: STR
14758: PUSH
14759: LD_VAR 0 5
14763: STR
14764: PUSH
14765: LD_STRING )
14767: STR
14768: PPUSH
14769: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14773: LD_STRING setSpecText(
14775: PUSH
14776: LD_VAR 0 2
14780: STR
14781: PUSH
14782: LD_STRING ,
14784: STR
14785: PUSH
14786: LD_INT 4
14788: STR
14789: PUSH
14790: LD_STRING ,
14792: STR
14793: PUSH
14794: LD_VAR 0 6
14798: STR
14799: PUSH
14800: LD_STRING )
14802: STR
14803: PPUSH
14804: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14808: LD_STRING setSpecText(
14810: PUSH
14811: LD_VAR 0 2
14815: STR
14816: PUSH
14817: LD_STRING ,
14819: STR
14820: PUSH
14821: LD_INT 5
14823: STR
14824: PUSH
14825: LD_STRING ,
14827: STR
14828: PUSH
14829: LD_VAR 0 7
14833: STR
14834: PUSH
14835: LD_STRING )
14837: STR
14838: PPUSH
14839: CALL_OW 559
// end ; end ;
14843: GO 14460
14845: POP
14846: POP
// end ;
14847: LD_VAR 0 1
14851: RET
// every 0 0$1 do
14852: GO 14854
14854: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14855: LD_STRING setSpecLogoNumber(
14857: PUSH
14858: LD_INT 2
14860: STR
14861: PUSH
14862: LD_STRING ,
14864: STR
14865: PUSH
14866: LD_INT 1
14868: STR
14869: PUSH
14870: LD_STRING )
14872: STR
14873: PPUSH
14874: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14878: LD_STRING setSpecLogoNumber(
14880: PUSH
14881: LD_INT 3
14883: STR
14884: PUSH
14885: LD_STRING ,
14887: STR
14888: PUSH
14889: LD_INT 2
14891: STR
14892: PUSH
14893: LD_STRING )
14895: STR
14896: PPUSH
14897: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14901: LD_STRING setSpecLogoNumber(
14903: PUSH
14904: LD_INT 4
14906: STR
14907: PUSH
14908: LD_STRING ,
14910: STR
14911: PUSH
14912: LD_INT 3
14914: STR
14915: PUSH
14916: LD_STRING )
14918: STR
14919: PPUSH
14920: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14924: LD_STRING setSpecLogoNumber(
14926: PUSH
14927: LD_INT 5
14929: STR
14930: PUSH
14931: LD_STRING ,
14933: STR
14934: PUSH
14935: LD_INT 4
14937: STR
14938: PUSH
14939: LD_STRING )
14941: STR
14942: PPUSH
14943: CALL_OW 559
// end ;
14947: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14948: LD_INT 2
14950: PUSH
14951: LD_INT 30
14953: PUSH
14954: LD_INT 0
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 30
14963: PUSH
14964: LD_INT 1
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: LIST
14975: PPUSH
14976: CALL_OW 69
14980: IFFALSE 14990
14982: GO 14984
14984: DISABLE
// begin enable ;
14985: ENABLE
// UpdateSpectatorBar ;
14986: CALL 14436 0 0
// end ; end_of_file
14990: END
// var respawn , inqueue ; export function init_respawning ; begin
14991: LD_INT 0
14993: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14994: LD_ADDR_LOC 11
14998: PUSH
14999: LD_INT 1
15001: PPUSH
15002: LD_INT 8
15004: PPUSH
15005: CALL_OW 12
15009: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15010: LD_ADDR_LOC 12
15014: PUSH
15015: LD_INT 0
15017: PUSH
15018: LD_INT 0
15020: PUSH
15021: LD_INT 0
15023: PUSH
15024: LD_INT 0
15026: PUSH
15027: LD_INT 0
15029: PUSH
15030: LD_INT 0
15032: PUSH
15033: LD_INT 0
15035: PUSH
15036: LD_INT 0
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: ST_TO_ADDR
// end ;
15049: LD_VAR 0 1
15053: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
15054: GO 15056
15056: DISABLE
15057: LD_INT 0
15059: PPUSH
15060: PPUSH
15061: PPUSH
// begin if respawning_time_max = 0 then
15062: LD_EXP 24
15066: PUSH
15067: LD_INT 0
15069: EQUAL
15070: IFFALSE 15074
// exit ;
15072: GO 15482
// if respawn = 8 then
15074: LD_LOC 11
15078: PUSH
15079: LD_INT 8
15081: EQUAL
15082: IFFALSE 15094
// respawn := 1 else
15084: LD_ADDR_LOC 11
15088: PUSH
15089: LD_INT 1
15091: ST_TO_ADDR
15092: GO 15108
// respawn := respawn + 1 ;
15094: LD_ADDR_LOC 11
15098: PUSH
15099: LD_LOC 11
15103: PUSH
15104: LD_INT 1
15106: PLUS
15107: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
15108: LD_EXP 36
15112: PUSH
15113: LD_LOC 11
15117: ARRAY
15118: PUSH
15119: LD_LOC 12
15123: PUSH
15124: LD_LOC 11
15128: ARRAY
15129: NOT
15130: AND
15131: IFFALSE 15481
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
15133: LD_ADDR_VAR 0 1
15137: PUSH
15138: LD_INT 21
15140: PUSH
15141: LD_INT 1
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: LD_INT 22
15150: PUSH
15151: LD_LOC 11
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 3
15162: PUSH
15163: LD_INT 23
15165: PUSH
15166: LD_INT 0
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: PPUSH
15179: CALL_OW 69
15183: ST_TO_ADDR
// if n < number_of_people then
15184: LD_VAR 0 1
15188: PUSH
15189: LD_EXP 15
15193: LESS
15194: IFFALSE 15478
// begin aktresp := respawn ;
15196: LD_ADDR_VAR 0 3
15200: PUSH
15201: LD_LOC 11
15205: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
15206: LD_ADDR_LOC 12
15210: PUSH
15211: LD_LOC 12
15215: PPUSH
15216: LD_VAR 0 3
15220: PPUSH
15221: LD_INT 1
15223: PPUSH
15224: CALL_OW 1
15228: ST_TO_ADDR
// enable ;
15229: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
15230: LD_EXP 23
15234: PPUSH
15235: LD_EXP 24
15239: PPUSH
15240: CALL_OW 12
15244: PPUSH
15245: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
15249: LD_ADDR_LOC 12
15253: PUSH
15254: LD_LOC 12
15258: PPUSH
15259: LD_VAR 0 3
15263: PPUSH
15264: LD_INT 0
15266: PPUSH
15267: CALL_OW 1
15271: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
15272: LD_ADDR_VAR 0 2
15276: PUSH
15277: LD_INT 21
15279: PUSH
15280: LD_INT 3
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: LD_INT 2
15289: PUSH
15290: LD_INT 30
15292: PUSH
15293: LD_INT 0
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 30
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 50
15317: PUSH
15318: EMPTY
15319: LIST
15320: PUSH
15321: LD_INT 22
15323: PUSH
15324: LD_VAR 0 3
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: PPUSH
15339: CALL_OW 69
15343: ST_TO_ADDR
// if dep = 0 then
15344: LD_VAR 0 2
15348: PUSH
15349: LD_INT 0
15351: EQUAL
15352: IFFALSE 15356
// exit ;
15354: GO 15482
// hc_name :=  ;
15356: LD_ADDR_OWVAR 26
15360: PUSH
15361: LD_STRING 
15363: ST_TO_ADDR
// hc_importance := 0 ;
15364: LD_ADDR_OWVAR 32
15368: PUSH
15369: LD_INT 0
15371: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
15372: LD_INT 0
15374: PPUSH
15375: LD_INT 0
15377: PPUSH
15378: LD_EXP 16
15382: PUSH
15383: LD_INT 2
15385: DIV
15386: PPUSH
15387: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
15391: LD_ADDR_OWVAR 21
15395: PUSH
15396: LD_EXP 37
15400: PUSH
15401: LD_VAR 0 3
15405: ARRAY
15406: ST_TO_ADDR
// uc_side := aktresp ;
15407: LD_ADDR_OWVAR 20
15411: PUSH
15412: LD_VAR 0 3
15416: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
15417: LD_ADDR_VAR 0 2
15421: PUSH
15422: LD_VAR 0 2
15426: PUSH
15427: LD_INT 1
15429: PPUSH
15430: LD_VAR 0 2
15434: PPUSH
15435: CALL_OW 12
15439: ARRAY
15440: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
15441: CALL_OW 44
15445: PPUSH
15446: LD_VAR 0 2
15450: PPUSH
15451: CALL_OW 250
15455: PPUSH
15456: LD_VAR 0 2
15460: PPUSH
15461: CALL_OW 251
15465: PPUSH
15466: LD_INT 7
15468: PPUSH
15469: LD_INT 1
15471: PPUSH
15472: CALL_OW 50
// end else
15476: GO 15479
// enable ;
15478: ENABLE
// end else
15479: GO 15482
// enable ;
15481: ENABLE
// end ;
15482: PPOPN 3
15484: END
