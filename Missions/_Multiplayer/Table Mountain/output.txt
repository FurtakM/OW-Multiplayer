// export game_type , def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_shared_vision , def_morale_flags , def_siberite_detection , def_siberite_bomb , def_people_respawning , def_builduptime ; export is_depot , number_of_breastworks , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , sci1_skills , sci2_skills , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export playing_sides , playing_teams , sci1 , sci2 ; export Side_Count , Team_Count , Player_Team , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Positions , Team_Game ; export depot_def , breastworks_def , start_def , teleport_def ; export commander , battle_flags_id ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if MultiPlayer then
  11: LD_OWVAR 4
  15: IFFALSE 89
// begin game_type = mp_game_type ;
  17: LD_ADDR_EXP 1
  21: PUSH
  22: LD_OWVAR 6
  26: ST_TO_ADDR
// Your_Side = mp_player_side ;
  27: LD_ADDR_OWVAR 2
  31: PUSH
  32: LD_OWVAR 7
  36: ST_TO_ADDR
// Player_Team = mp_player_team ;
  37: LD_ADDR_EXP 32
  41: PUSH
  42: LD_OWVAR 8
  46: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  47: LD_ADDR_EXP 36
  51: PUSH
  52: LD_OWVAR 17
  56: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  57: LD_ADDR_EXP 33
  61: PUSH
  62: LD_OWVAR 15
  66: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  67: LD_ADDR_EXP 37
  71: PUSH
  72: LD_OWVAR 16
  76: ST_TO_ADDR
// Teams = mp_teams ;
  77: LD_ADDR_EXP 34
  81: PUSH
  82: LD_OWVAR 12
  86: ST_TO_ADDR
// end else
  87: GO 298
// begin game_type = 12 ;
  89: LD_ADDR_EXP 1
  93: PUSH
  94: LD_INT 12
  96: ST_TO_ADDR
// Your_Side = 4 ;
  97: LD_ADDR_OWVAR 2
 101: PUSH
 102: LD_INT 4
 104: ST_TO_ADDR
// Player_Team = 1 ;
 105: LD_ADDR_EXP 32
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// Side_Positions = [ 0 , 2 , 0 , 4 , 0 , 1 , 3 , 0 ] ;
 113: LD_ADDR_EXP 36
 117: PUSH
 118: LD_INT 0
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: LD_INT 0
 126: PUSH
 127: LD_INT 4
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 1
 135: PUSH
 136: LD_INT 3
 138: PUSH
 139: LD_INT 0
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 1 , 0 , 2 , 2 , 0 ] ;
 152: LD_ADDR_EXP 33
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 191: LD_ADDR_EXP 37
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: LD_INT 3
 201: PUSH
 202: LD_INT 0
 204: PUSH
 205: LD_INT 2
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 3
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 230: LD_ADDR_EXP 35
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: LD_INT 0
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// Teams = [ [ 2 , 4 ] , [ 6 , 7 ] ] ;
 269: LD_ADDR_EXP 34
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: LD_INT 4
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: PUSH
 284: LD_INT 6
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 298: LD_ADDR_EXP 30
 302: PUSH
 303: LD_EXP 36
 307: PUSH
 308: LD_INT 0
 310: PUSH
 311: EMPTY
 312: LIST
 313: DIFF
 314: PUSH
 315: LD_INT 0
 317: PLUS
 318: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 319: LD_ADDR_EXP 31
 323: PUSH
 324: LD_EXP 33
 328: PUSH
 329: LD_INT 0
 331: PUSH
 332: EMPTY
 333: LIST
 334: DIFF
 335: PUSH
 336: LD_INT 0
 338: PLUS
 339: ST_TO_ADDR
// if MultiPlayer then
 340: LD_OWVAR 4
 344: IFFALSE 504
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 346: LD_ADDR_EXP 2
 350: PUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 359: LD_ADDR_EXP 3
 363: PUSH
 364: LD_INT 1
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 372: LD_ADDR_EXP 4
 376: PUSH
 377: LD_INT 2
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 385: LD_ADDR_EXP 5
 389: PUSH
 390: LD_INT 3
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 398: LD_ADDR_EXP 6
 402: PUSH
 403: LD_INT 4
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 10
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 424: LD_ADDR_EXP 8
 428: PUSH
 429: LD_INT 11
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 437: LD_ADDR_EXP 9
 441: PUSH
 442: LD_INT 12
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 13 ) ;
 450: LD_ADDR_EXP 10
 454: PUSH
 455: LD_INT 13
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 463: LD_ADDR_EXP 11
 467: PUSH
 468: LD_INT 14
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 476: LD_ADDR_EXP 12
 480: PUSH
 481: LD_INT 20
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 489: LD_ADDR_VAR 0 9
 493: PUSH
 494: LD_INT 22
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// end else
 502: GO 604
// begin randomize ;
 504: CALL_OW 10
// def_base_level = 3 ;
 508: LD_ADDR_EXP 2
 512: PUSH
 513: LD_INT 3
 515: ST_TO_ADDR
// def_amount_of_people = 1 ;
 516: LD_ADDR_EXP 3
 520: PUSH
 521: LD_INT 1
 523: ST_TO_ADDR
// def_initial_level = 1 ;
 524: LD_ADDR_EXP 4
 528: PUSH
 529: LD_INT 1
 531: ST_TO_ADDR
// def_starting_resources = 2 ;
 532: LD_ADDR_EXP 5
 536: PUSH
 537: LD_INT 2
 539: ST_TO_ADDR
// def_shipments_density = 1 ;
 540: LD_ADDR_EXP 6
 544: PUSH
 545: LD_INT 1
 547: ST_TO_ADDR
// def_shared_vision = 1 ;
 548: LD_ADDR_EXP 7
 552: PUSH
 553: LD_INT 1
 555: ST_TO_ADDR
// def_morale_flags = 3 ;
 556: LD_ADDR_EXP 8
 560: PUSH
 561: LD_INT 3
 563: ST_TO_ADDR
// def_siberite_detection = 0 ;
 564: LD_ADDR_EXP 9
 568: PUSH
 569: LD_INT 0
 571: ST_TO_ADDR
// def_siberite_bomb = 2 ;
 572: LD_ADDR_EXP 10
 576: PUSH
 577: LD_INT 2
 579: ST_TO_ADDR
// def_people_respawning = 2 ;
 580: LD_ADDR_EXP 11
 584: PUSH
 585: LD_INT 2
 587: ST_TO_ADDR
// def_builduptime := 1 ;
 588: LD_ADDR_EXP 12
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// tech_level = 6 ;
 596: LD_ADDR_VAR 0 9
 600: PUSH
 601: LD_INT 6
 603: ST_TO_ADDR
// end ; if isSGUI then
 604: LD_OWVAR 83
 608: IFFALSE 616
// setMpTechs ( ) else
 610: CALL 12041 0 0
 614: GO 629
// begin SetMpTechLevel ( tech_level + 1 ) ;
 616: LD_VAR 0 9
 620: PUSH
 621: LD_INT 1
 623: PLUS
 624: PPUSH
 625: CALL 12188 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 629: LD_ADDR_EXP 13
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: LD_INT 1
 642: PUSH
 643: LD_INT 1
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: PUSH
 652: LD_EXP 2
 656: PUSH
 657: LD_INT 1
 659: PLUS
 660: ARRAY
 661: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 662: LD_ADDR_EXP 14
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 4
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: LD_EXP 2
 689: PUSH
 690: LD_INT 1
 692: PLUS
 693: ARRAY
 694: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 695: LD_ADDR_EXP 15
 699: PUSH
 700: LD_INT 9
 702: PUSH
 703: LD_INT 12
 705: PUSH
 706: LD_INT 15
 708: PUSH
 709: LD_INT 24
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: PUSH
 718: LD_EXP 3
 722: PUSH
 723: LD_INT 1
 725: PLUS
 726: ARRAY
 727: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
 728: LD_ADDR_EXP 16
 732: PUSH
 733: LD_INT 2
 735: PUSH
 736: LD_INT 3
 738: PUSH
 739: LD_INT 4
 741: PUSH
 742: LD_INT 5
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: PUSH
 751: LD_EXP 4
 755: PUSH
 756: LD_INT 1
 758: PLUS
 759: ARRAY
 760: ST_TO_ADDR
// sci1_skills = [ [ 0 , 2 , 1 , 4 ] , [ 1 , 3 , 1 , 5 ] , [ 1 , 4 , 2 , 6 ] , [ 2 , 5 , 2 , 7 ] ] [ def_initial_level + 1 ] ;
 761: LD_ADDR_EXP 21
 765: PUSH
 766: LD_INT 0
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: LD_INT 1
 774: PUSH
 775: LD_INT 4
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 1
 786: PUSH
 787: LD_INT 3
 789: PUSH
 790: LD_INT 1
 792: PUSH
 793: LD_INT 5
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 4
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 6
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 2
 822: PUSH
 823: LD_INT 5
 825: PUSH
 826: LD_INT 2
 828: PUSH
 829: LD_INT 7
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: PUSH
 844: LD_EXP 4
 848: PUSH
 849: LD_INT 1
 851: PLUS
 852: ARRAY
 853: ST_TO_ADDR
// sci2_skills = [ [ 2 , 1 , 1 , 3 ] , [ 2 , 2 , 1 , 4 ] , [ 3 , 3 , 2 , 5 ] , [ 3 , 4 , 3 , 6 ] ] [ def_initial_level + 1 ] ;
 854: LD_ADDR_EXP 22
 858: PUSH
 859: LD_INT 2
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 1
 867: PUSH
 868: LD_INT 3
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: LD_INT 2
 879: PUSH
 880: LD_INT 2
 882: PUSH
 883: LD_INT 1
 885: PUSH
 886: LD_INT 4
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 3
 900: PUSH
 901: LD_INT 2
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 3
 915: PUSH
 916: LD_INT 4
 918: PUSH
 919: LD_INT 3
 921: PUSH
 922: LD_INT 6
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: PUSH
 937: LD_EXP 4
 941: PUSH
 942: LD_INT 1
 944: PLUS
 945: ARRAY
 946: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_INT 0
 954: PUSH
 955: LD_INT 0
 957: PUSH
 958: LD_INT 0
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 30
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 0
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 50
 982: PUSH
 983: LD_INT 20
 985: PUSH
 986: LD_INT 0
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 80
 996: PUSH
 997: LD_INT 40
 999: PUSH
1000: LD_INT 20
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_EXP 5
1018: PUSH
1019: LD_INT 1
1021: PLUS
1022: ARRAY
1023: ST_TO_ADDR
// starting_crates = [ [ 8 ] , [ 5 , 10 ] , [ 4 , 8 , 12 ] , [ 3 , 6 , 9 , 12 ] ] [ def_starting_resources + 1 ] ;
1024: LD_ADDR_EXP 17
1028: PUSH
1029: LD_INT 8
1031: PUSH
1032: EMPTY
1033: LIST
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 10
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 8
1050: PUSH
1051: LD_INT 12
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 3
1061: PUSH
1062: LD_INT 6
1064: PUSH
1065: LD_INT 9
1067: PUSH
1068: LD_INT 12
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: LD_EXP 5
1087: PUSH
1088: LD_INT 1
1090: PLUS
1091: ARRAY
1092: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1093: LD_ADDR_EXP 19
1097: PUSH
1098: LD_INT 20
1100: PUSH
1101: LD_INT 30
1103: PUSH
1104: LD_INT 40
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_EXP 6
1116: PUSH
1117: LD_INT 1
1119: PLUS
1120: ARRAY
1121: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1122: LD_ADDR_EXP 23
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 8400
1132: PUSH
1133: LD_INT 1750
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_EXP 11
1145: PUSH
1146: LD_INT 1
1148: PLUS
1149: ARRAY
1150: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1151: LD_ADDR_EXP 24
1155: PUSH
1156: LD_INT 0
1158: PUSH
1159: LD_INT 21000
1161: PUSH
1162: LD_INT 4200
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_EXP 11
1174: PUSH
1175: LD_INT 1
1177: PLUS
1178: ARRAY
1179: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1180: LD_ADDR_EXP 20
1184: PUSH
1185: LD_INT 1
1187: NEG
1188: PUSH
1189: LD_INT 350
1191: PUSH
1192: LD_INT 700
1194: PUSH
1195: LD_INT 1400
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_EXP 8
1212: PUSH
1213: LD_INT 1
1215: PLUS
1216: ARRAY
1217: ST_TO_ADDR
// battle_flags_id = [ ] ;
1218: LD_ADDR_EXP 47
1222: PUSH
1223: EMPTY
1224: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1225: LD_EXP 10
1229: PUSH
1230: LD_INT 0
1232: EQUAL
1233: IFFALSE 1245
// siberite_bomb_Delay = 0 else
1235: LD_ADDR_EXP 25
1239: PUSH
1240: LD_INT 0
1242: ST_TO_ADDR
1243: GO 1267
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1245: LD_ADDR_EXP 25
1249: PUSH
1250: LD_EXP 10
1254: PUSH
1255: LD_INT 1
1257: MINUS
1258: PUSH
1259: LD_INT 21000
1261: MUL
1262: PUSH
1263: LD_INT 1
1265: PLUS
1266: ST_TO_ADDR
// sci1 := [ ] ;
1267: LD_ADDR_EXP 28
1271: PUSH
1272: EMPTY
1273: ST_TO_ADDR
// sci2 := [ ] ;
1274: LD_ADDR_EXP 29
1278: PUSH
1279: EMPTY
1280: ST_TO_ADDR
// end ;
1281: LD_VAR 0 1
1285: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , br4 , un , i ; begin
1286: LD_INT 0
1288: PPUSH
1289: PPUSH
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
// depot_def = [ ] ;
1297: LD_ADDR_EXP 42
1301: PUSH
1302: EMPTY
1303: ST_TO_ADDR
// breastworks_def = [ ] ;
1304: LD_ADDR_EXP 43
1308: PUSH
1309: EMPTY
1310: ST_TO_ADDR
// for side := 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1751
// begin dep := side * 5 - 4 ;
1327: LD_ADDR_VAR 0 3
1331: PUSH
1332: LD_VAR 0 2
1336: PUSH
1337: LD_INT 5
1339: MUL
1340: PUSH
1341: LD_INT 4
1343: MINUS
1344: ST_TO_ADDR
// br1 := side * 5 - 3 ;
1345: LD_ADDR_VAR 0 4
1349: PUSH
1350: LD_VAR 0 2
1354: PUSH
1355: LD_INT 5
1357: MUL
1358: PUSH
1359: LD_INT 3
1361: MINUS
1362: ST_TO_ADDR
// br2 := side * 5 - 2 ;
1363: LD_ADDR_VAR 0 5
1367: PUSH
1368: LD_VAR 0 2
1372: PUSH
1373: LD_INT 5
1375: MUL
1376: PUSH
1377: LD_INT 2
1379: MINUS
1380: ST_TO_ADDR
// br3 := side * 5 - 1 ;
1381: LD_ADDR_VAR 0 6
1385: PUSH
1386: LD_VAR 0 2
1390: PUSH
1391: LD_INT 5
1393: MUL
1394: PUSH
1395: LD_INT 1
1397: MINUS
1398: ST_TO_ADDR
// br4 := side * 5 ;
1399: LD_ADDR_VAR 0 7
1403: PUSH
1404: LD_VAR 0 2
1408: PUSH
1409: LD_INT 5
1411: MUL
1412: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1413: LD_ADDR_EXP 42
1417: PUSH
1418: LD_EXP 42
1422: PUSH
1423: LD_VAR 0 3
1427: PPUSH
1428: CALL_OW 250
1432: PUSH
1433: LD_VAR 0 3
1437: PPUSH
1438: CALL_OW 251
1442: PUSH
1443: LD_VAR 0 3
1447: PPUSH
1448: CALL_OW 254
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: PUSH
1458: EMPTY
1459: LIST
1460: ADD
1461: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) ] ] ;
1462: LD_ADDR_EXP 44
1466: PUSH
1467: LD_EXP 44
1471: PUSH
1472: LD_VAR 0 3
1476: PPUSH
1477: CALL_OW 250
1481: PPUSH
1482: LD_VAR 0 3
1486: PPUSH
1487: CALL_OW 254
1491: PUSH
1492: LD_INT 6
1494: MOD
1495: PPUSH
1496: LD_INT 6
1498: PPUSH
1499: CALL_OW 272
1503: PUSH
1504: LD_VAR 0 3
1508: PPUSH
1509: CALL_OW 251
1513: PPUSH
1514: LD_VAR 0 3
1518: PPUSH
1519: CALL_OW 254
1523: PUSH
1524: LD_INT 6
1526: MOD
1527: PPUSH
1528: LD_INT 6
1530: PPUSH
1531: CALL_OW 273
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: EMPTY
1541: LIST
1542: ADD
1543: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] , [ GetX ( br4 ) , GetY ( br4 ) , GetDir ( br4 ) ] ] ] ;
1544: LD_ADDR_EXP 43
1548: PUSH
1549: LD_EXP 43
1553: PUSH
1554: LD_VAR 0 4
1558: PPUSH
1559: CALL_OW 250
1563: PUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 251
1573: PUSH
1574: LD_VAR 0 4
1578: PPUSH
1579: CALL_OW 254
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_VAR 0 5
1593: PPUSH
1594: CALL_OW 250
1598: PUSH
1599: LD_VAR 0 5
1603: PPUSH
1604: CALL_OW 251
1608: PUSH
1609: LD_VAR 0 5
1613: PPUSH
1614: CALL_OW 254
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_VAR 0 6
1628: PPUSH
1629: CALL_OW 250
1633: PUSH
1634: LD_VAR 0 6
1638: PPUSH
1639: CALL_OW 251
1643: PUSH
1644: LD_VAR 0 6
1648: PPUSH
1649: CALL_OW 254
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_VAR 0 7
1663: PPUSH
1664: CALL_OW 250
1668: PUSH
1669: LD_VAR 0 7
1673: PPUSH
1674: CALL_OW 251
1678: PUSH
1679: LD_VAR 0 7
1683: PPUSH
1684: CALL_OW 254
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: EMPTY
1701: LIST
1702: ADD
1703: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1704: LD_VAR 0 3
1708: PPUSH
1709: CALL_OW 65
// DestroyUnit ( br1 ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL_OW 65
// DestroyUnit ( br2 ) ;
1722: LD_VAR 0 5
1726: PPUSH
1727: CALL_OW 65
// DestroyUnit ( br3 ) ;
1731: LD_VAR 0 6
1735: PPUSH
1736: CALL_OW 65
// DestroyUnit ( br4 ) ;
1740: LD_VAR 0 7
1744: PPUSH
1745: CALL_OW 65
// end ;
1749: GO 1324
1751: POP
1752: POP
// teleport_def = [ [ 19 , 16 , 0 ] , [ 108 , 9 , 1 ] , [ 62 , 112 , 2 ] , [ 157 , 126 , 1 ] ] ;
1753: LD_ADDR_EXP 45
1757: PUSH
1758: LD_INT 19
1760: PUSH
1761: LD_INT 16
1763: PUSH
1764: LD_INT 0
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 108
1774: PUSH
1775: LD_INT 9
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 62
1788: PUSH
1789: LD_INT 112
1791: PUSH
1792: LD_INT 2
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 157
1802: PUSH
1803: LD_INT 126
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: ST_TO_ADDR
// end ;
1820: LD_VAR 0 1
1824: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1825: LD_INT 0
1827: PPUSH
1828: PPUSH
1829: PPUSH
// Team_Game := 0 ;
1830: LD_ADDR_EXP 41
1834: PUSH
1835: LD_INT 0
1837: ST_TO_ADDR
// for i = 1 to 8 do
1838: LD_ADDR_VAR 0 2
1842: PUSH
1843: DOUBLE
1844: LD_INT 1
1846: DEC
1847: ST_TO_ADDR
1848: LD_INT 8
1850: PUSH
1851: FOR_TO
1852: IFFALSE 1878
// Team_Game := Team_Game + Side_Teams [ i ] ;
1854: LD_ADDR_EXP 41
1858: PUSH
1859: LD_EXP 41
1863: PUSH
1864: LD_EXP 33
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PLUS
1875: ST_TO_ADDR
1876: GO 1851
1878: POP
1879: POP
// if not Team_Game then
1880: LD_EXP 41
1884: NOT
1885: IFFALSE 1897
// Team_Game := false else
1887: LD_ADDR_EXP 41
1891: PUSH
1892: LD_INT 0
1894: ST_TO_ADDR
1895: GO 1905
// Team_Game := true ;
1897: LD_ADDR_EXP 41
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// if not Team_Game then
1905: LD_EXP 41
1909: NOT
1910: IFFALSE 2008
// begin for i = 1 to 8 do
1912: LD_ADDR_VAR 0 2
1916: PUSH
1917: DOUBLE
1918: LD_INT 1
1920: DEC
1921: ST_TO_ADDR
1922: LD_INT 8
1924: PUSH
1925: FOR_TO
1926: IFFALSE 2004
// for j = 1 to 8 do
1928: LD_ADDR_VAR 0 3
1932: PUSH
1933: DOUBLE
1934: LD_INT 1
1936: DEC
1937: ST_TO_ADDR
1938: LD_INT 8
1940: PUSH
1941: FOR_TO
1942: IFFALSE 2000
// if i <> j then
1944: LD_VAR 0 2
1948: PUSH
1949: LD_VAR 0 3
1953: NONEQUAL
1954: IFFALSE 1978
// SetAttitude ( i , j , att_neutral , true ) else
1956: LD_VAR 0 2
1960: PPUSH
1961: LD_VAR 0 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: LD_INT 1
1971: PPUSH
1972: CALL_OW 80
1976: GO 1998
// SetAttitude ( i , j , att_friend , true ) ;
1978: LD_VAR 0 2
1982: PPUSH
1983: LD_VAR 0 3
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL_OW 80
1998: GO 1941
2000: POP
2001: POP
2002: GO 1925
2004: POP
2005: POP
// end else
2006: GO 2183
// begin if def_shared_vision then
2008: LD_EXP 7
2012: IFFALSE 2077
// begin for i in Teams do
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: LD_EXP 34
2023: PUSH
2024: FOR_IN
2025: IFFALSE 2075
// for j = 2 to i do
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: DOUBLE
2033: LD_INT 2
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 2
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2071
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2045: LD_VAR 0 2
2049: PUSH
2050: LD_VAR 0 3
2054: ARRAY
2055: PPUSH
2056: LD_VAR 0 2
2060: PUSH
2061: LD_INT 1
2063: ARRAY
2064: PPUSH
2065: CALL_OW 343
2069: GO 2042
2071: POP
2072: POP
2073: GO 2024
2075: POP
2076: POP
// end ; for i = 1 to 8 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 8
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2181
// for j = 1 to 8 do
2093: LD_ADDR_VAR 0 3
2097: PUSH
2098: DOUBLE
2099: LD_INT 1
2101: DEC
2102: ST_TO_ADDR
2103: LD_INT 8
2105: PUSH
2106: FOR_TO
2107: IFFALSE 2177
// if Side_Teams [ i ] = Side_Teams [ j ] then
2109: LD_EXP 33
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_EXP 33
2124: PUSH
2125: LD_VAR 0 3
2129: ARRAY
2130: EQUAL
2131: IFFALSE 2155
// SetAttitude ( i , j , att_friend , true ) else
2133: LD_VAR 0 2
2137: PPUSH
2138: LD_VAR 0 3
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 1
2148: PPUSH
2149: CALL_OW 80
2153: GO 2175
// SetAttitude ( i , j , att_enemy , true ) ;
2155: LD_VAR 0 2
2159: PPUSH
2160: LD_VAR 0 3
2164: PPUSH
2165: LD_INT 2
2167: PPUSH
2168: LD_INT 1
2170: PPUSH
2171: CALL_OW 80
2175: GO 2106
2177: POP
2178: POP
2179: GO 2090
2181: POP
2182: POP
// end ; end ;
2183: LD_VAR 0 1
2187: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2188: LD_INT 0
2190: PPUSH
2191: PPUSH
2192: PPUSH
2193: PPUSH
// result := [ ] ;
2194: LD_ADDR_VAR 0 8
2198: PUSH
2199: EMPTY
2200: ST_TO_ADDR
// for i := 1 to count do
2201: LD_ADDR_VAR 0 9
2205: PUSH
2206: DOUBLE
2207: LD_INT 1
2209: DEC
2210: ST_TO_ADDR
2211: LD_VAR 0 2
2215: PUSH
2216: FOR_TO
2217: IFFALSE 2611
// begin uc_direction := Rand ( 0 , 5 ) ;
2219: LD_ADDR_OWVAR 24
2223: PUSH
2224: LD_INT 0
2226: PPUSH
2227: LD_INT 5
2229: PPUSH
2230: CALL_OW 12
2234: ST_TO_ADDR
// if commander then
2235: LD_FROM_VAR 0 7
2239: IFFALSE 2348
// begin hc_name := mp_sides_players_names [ side ] ;
2241: LD_ADDR_OWVAR 26
2245: PUSH
2246: LD_OWVAR 19
2250: PUSH
2251: LD_VAR 0 1
2255: ARRAY
2256: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2257: LD_INT 1
2259: PPUSH
2260: LD_INT 2
2262: PPUSH
2263: CALL_OW 12
2267: PPUSH
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_EXP 16
2277: PUSH
2278: LD_INT 2
2280: PLUS
2281: PPUSH
2282: CALL_OW 380
// hc_importance := 105 ;
2286: LD_ADDR_OWVAR 32
2290: PUSH
2291: LD_INT 105
2293: ST_TO_ADDR
// commander := false ;
2294: LD_VAR 0 7
2298: PUSH
2299: LD_INT 0
2301: ST_TO_ADDR
// if Multiplayer then
2302: LD_OWVAR 4
2306: IFFALSE 2346
// begin hc_gallery := MULTIAVATARS ;
2308: LD_ADDR_OWVAR 33
2312: PUSH
2313: LD_STRING MULTIAVATARS
2315: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2316: LD_ADDR_OWVAR 34
2320: PUSH
2321: LD_VAR 0 1
2325: PPUSH
2326: CALL_OW 525
2330: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2331: LD_ADDR_OWVAR 27
2335: PUSH
2336: LD_VAR 0 1
2340: PPUSH
2341: CALL_OW 526
2345: ST_TO_ADDR
// end ; end else
2346: GO 2411
// begin hc_name :=  ;
2348: LD_ADDR_OWVAR 26
2352: PUSH
2353: LD_STRING 
2355: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 2
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: LD_EXP 16
2376: PPUSH
2377: CALL_OW 380
// hc_importance := 0 ;
2381: LD_ADDR_OWVAR 32
2385: PUSH
2386: LD_INT 0
2388: ST_TO_ADDR
// if Multiplayer then
2389: LD_OWVAR 4
2393: IFFALSE 2411
// begin hc_gallery :=  ;
2395: LD_ADDR_OWVAR 33
2399: PUSH
2400: LD_STRING 
2402: ST_TO_ADDR
// hc_face_number := 0 ;
2403: LD_ADDR_OWVAR 34
2407: PUSH
2408: LD_INT 0
2410: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2411: LD_ADDR_VAR 0 11
2415: PUSH
2416: CALL_OW 44
2420: ST_TO_ADDR
// if global_defined then
2421: LD_LOC 2
2425: IFFALSE 2563
// begin j := i ;
2427: LD_ADDR_VAR 0 10
2431: PUSH
2432: LD_VAR 0 9
2436: ST_TO_ADDR
// if cl = class_soldier then
2437: LD_VAR 0 3
2441: PUSH
2442: LD_INT 1
2444: EQUAL
2445: IFFALSE 2463
// j := i + soldiers_created ;
2447: LD_ADDR_VAR 0 10
2451: PUSH
2452: LD_VAR 0 9
2456: PUSH
2457: LD_LOC 3
2461: PLUS
2462: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2463: LD_LOC 1
2467: PUSH
2468: LD_VAR 0 3
2472: ARRAY
2473: PUSH
2474: LD_VAR 0 10
2478: ARRAY
2479: PPUSH
2480: LD_VAR 0 11
2484: PPUSH
2485: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2489: LD_VAR 0 11
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: LD_LOC 1
2501: PUSH
2502: LD_VAR 0 3
2506: ARRAY
2507: PUSH
2508: LD_VAR 0 10
2512: ARRAY
2513: PPUSH
2514: LD_INT 2
2516: PPUSH
2517: CALL_OW 260
2521: PPUSH
2522: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2526: LD_VAR 0 11
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: LD_LOC 1
2538: PUSH
2539: LD_VAR 0 3
2543: ARRAY
2544: PUSH
2545: LD_VAR 0 10
2549: ARRAY
2550: PPUSH
2551: LD_INT 1
2553: PPUSH
2554: CALL_OW 260
2558: PPUSH
2559: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2563: LD_VAR 0 11
2567: PPUSH
2568: LD_VAR 0 4
2572: PPUSH
2573: LD_VAR 0 5
2577: PPUSH
2578: LD_VAR 0 6
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: CALL_OW 50
// result := result ^ [ un ] ;
2590: LD_ADDR_VAR 0 8
2594: PUSH
2595: LD_VAR 0 8
2599: PUSH
2600: LD_VAR 0 11
2604: PUSH
2605: EMPTY
2606: LIST
2607: ADD
2608: ST_TO_ADDR
// end ;
2609: GO 2216
2611: POP
2612: POP
// if not global_defined then
2613: LD_LOC 2
2617: NOT
2618: IFFALSE 2680
// if cl = class_soldier and global_units then
2620: LD_VAR 0 3
2624: PUSH
2625: LD_INT 1
2627: EQUAL
2628: PUSH
2629: LD_LOC 1
2633: AND
2634: IFFALSE 2661
// global_units := [ global_units [ 1 ] ^ result ] else
2636: LD_ADDR_LOC 1
2640: PUSH
2641: LD_LOC 1
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: PUSH
2650: LD_VAR 0 8
2654: ADD
2655: PUSH
2656: EMPTY
2657: LIST
2658: ST_TO_ADDR
2659: GO 2680
// global_units := global_units ^ [ result ] end ;
2661: LD_ADDR_LOC 1
2665: PUSH
2666: LD_LOC 1
2670: PUSH
2671: LD_VAR 0 8
2675: PUSH
2676: EMPTY
2677: LIST
2678: ADD
2679: ST_TO_ADDR
2680: LD_VAR 0 8
2684: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol , t , n1 , n2 ; begin
2685: LD_INT 0
2687: PPUSH
2688: PPUSH
2689: PPUSH
2690: PPUSH
2691: PPUSH
2692: PPUSH
2693: PPUSH
2694: PPUSH
2695: PPUSH
2696: PPUSH
2697: PPUSH
2698: PPUSH
2699: PPUSH
2700: PPUSH
2701: PPUSH
2702: PPUSH
// pos := Side_Positions [ side ] ;
2703: LD_ADDR_VAR 0 3
2707: PUSH
2708: LD_EXP 36
2712: PUSH
2713: LD_VAR 0 1
2717: ARRAY
2718: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2719: LD_ADDR_OWVAR 21
2723: PUSH
2724: LD_EXP 37
2728: PUSH
2729: LD_VAR 0 1
2733: ARRAY
2734: ST_TO_ADDR
// uc_side := side ;
2735: LD_ADDR_OWVAR 20
2739: PUSH
2740: LD_VAR 0 1
2744: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2745: LD_ADDR_VAR 0 4
2749: PUSH
2750: LD_EXP 42
2754: PUSH
2755: LD_VAR 0 3
2759: ARRAY
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2765: LD_ADDR_VAR 0 5
2769: PUSH
2770: LD_EXP 42
2774: PUSH
2775: LD_VAR 0 3
2779: ARRAY
2780: PUSH
2781: LD_INT 2
2783: ARRAY
2784: ST_TO_ADDR
// if is_depot then
2785: LD_EXP 13
2789: IFFALSE 2932
// begin bc_type = b_depot ;
2791: LD_ADDR_OWVAR 42
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
2799: LD_ADDR_VAR 0 10
2803: PUSH
2804: LD_VAR 0 4
2808: PPUSH
2809: LD_VAR 0 5
2813: PPUSH
2814: LD_EXP 42
2818: PUSH
2819: LD_VAR 0 3
2823: ARRAY
2824: PUSH
2825: LD_INT 3
2827: ARRAY
2828: PPUSH
2829: CALL_OW 47
2833: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2834: LD_VAR 0 10
2838: PPUSH
2839: LD_STRING @
2841: PUSH
2842: LD_VAR 0 1
2846: STR
2847: PPUSH
2848: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2852: LD_VAR 0 10
2856: PPUSH
2857: CALL_OW 274
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_EXP 18
2869: PUSH
2870: LD_INT 1
2872: ARRAY
2873: PPUSH
2874: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2878: LD_VAR 0 10
2882: PPUSH
2883: CALL_OW 274
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: LD_EXP 18
2895: PUSH
2896: LD_INT 2
2898: ARRAY
2899: PPUSH
2900: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2904: LD_VAR 0 2
2908: PPUSH
2909: CALL_OW 274
2913: PPUSH
2914: LD_INT 3
2916: PPUSH
2917: LD_EXP 18
2921: PUSH
2922: LD_INT 3
2924: ARRAY
2925: PPUSH
2926: CALL_OW 277
// end else
2930: GO 3076
// begin for i := 1 to 3 do
2932: LD_ADDR_VAR 0 6
2936: PUSH
2937: DOUBLE
2938: LD_INT 1
2940: DEC
2941: ST_TO_ADDR
2942: LD_INT 3
2944: PUSH
2945: FOR_TO
2946: IFFALSE 3074
// begin r := starting_resources [ i ] ;
2948: LD_ADDR_VAR 0 7
2952: PUSH
2953: LD_EXP 18
2957: PUSH
2958: LD_VAR 0 6
2962: ARRAY
2963: ST_TO_ADDR
// while r >= 10 do
2964: LD_VAR 0 7
2968: PUSH
2969: LD_INT 10
2971: GREATEREQUAL
2972: IFFALSE 3072
// if r > 50 then
2974: LD_VAR 0 7
2978: PUSH
2979: LD_INT 50
2981: GREATER
2982: IFFALSE 3028
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
2984: LD_VAR 0 6
2988: PPUSH
2989: LD_INT 5
2991: PPUSH
2992: LD_VAR 0 4
2996: PPUSH
2997: LD_VAR 0 5
3001: PPUSH
3002: LD_INT 4
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL_OW 60
// r := r - 50 ;
3012: LD_ADDR_VAR 0 7
3016: PUSH
3017: LD_VAR 0 7
3021: PUSH
3022: LD_INT 50
3024: MINUS
3025: ST_TO_ADDR
// end else
3026: GO 3070
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3028: LD_VAR 0 6
3032: PPUSH
3033: LD_VAR 0 7
3037: PUSH
3038: LD_INT 10
3040: DIV
3041: PPUSH
3042: LD_VAR 0 4
3046: PPUSH
3047: LD_VAR 0 5
3051: PPUSH
3052: LD_INT 4
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 60
// r := 0 ;
3062: LD_ADDR_VAR 0 7
3066: PUSH
3067: LD_INT 0
3069: ST_TO_ADDR
// end ;
3070: GO 2964
// end ;
3072: GO 2945
3074: POP
3075: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_EXP 44
3085: PUSH
3086: LD_VAR 0 3
3090: ARRAY
3091: PUSH
3092: LD_INT 1
3094: ARRAY
3095: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_EXP 44
3105: PUSH
3106: LD_VAR 0 3
3110: ARRAY
3111: PUSH
3112: LD_INT 2
3114: ARRAY
3115: ST_TO_ADDR
// for r in starting_crates do
3116: LD_ADDR_VAR 0 7
3120: PUSH
3121: LD_EXP 17
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3159
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3129: LD_INT 1
3131: PPUSH
3132: LD_INT 5
3134: PPUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: LD_VAR 0 5
3144: PPUSH
3145: LD_VAR 0 7
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 60
3157: GO 3126
3159: POP
3160: POP
// if def_morale_flags then
3161: LD_EXP 8
3165: IFFALSE 3244
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3167: LD_ADDR_EXP 47
3171: PUSH
3172: LD_EXP 47
3176: PUSH
3177: LD_VAR 0 1
3181: PPUSH
3182: LD_VAR 0 4
3186: PPUSH
3187: LD_VAR 0 5
3191: PPUSH
3192: LD_INT 1
3194: PUSH
3195: LD_INT 100
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 50
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 3
3214: PUSH
3215: LD_INT 20
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: LD_INT 20
3224: PUSH
3225: LD_INT 100
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: PPUSH
3238: CALL_OW 418
3242: ADD
3243: ST_TO_ADDR
// commander := true ;
3244: LD_ADDR_EXP 46
3248: PUSH
3249: LD_INT 1
3251: ST_TO_ADDR
// if game_type in [ 11 , 12 ] then
3252: LD_EXP 1
3256: PUSH
3257: LD_INT 11
3259: PUSH
3260: LD_INT 12
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: IN
3267: IFFALSE 4122
// begin uc_nation = nation_russian ;
3269: LD_ADDR_OWVAR 21
3273: PUSH
3274: LD_INT 3
3276: ST_TO_ADDR
// bc_type = b_teleport ;
3277: LD_ADDR_OWVAR 42
3281: PUSH
3282: LD_INT 34
3284: ST_TO_ADDR
// bc_level = 10 ;
3285: LD_ADDR_OWVAR 43
3289: PUSH
3290: LD_INT 10
3292: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , teleport_def [ pos ] [ 3 ] ) ;
3293: LD_EXP 45
3297: PUSH
3298: LD_VAR 0 3
3302: ARRAY
3303: PUSH
3304: LD_INT 1
3306: ARRAY
3307: PPUSH
3308: LD_EXP 45
3312: PUSH
3313: LD_VAR 0 3
3317: ARRAY
3318: PUSH
3319: LD_INT 2
3321: ARRAY
3322: PPUSH
3323: LD_EXP 45
3327: PUSH
3328: LD_VAR 0 3
3332: ARRAY
3333: PUSH
3334: LD_INT 3
3336: ARRAY
3337: PPUSH
3338: CALL_OW 47
// if game_type = 12 then
3342: LD_EXP 1
3346: PUSH
3347: LD_INT 12
3349: EQUAL
3350: IFFALSE 3386
// if ( side in Teams [ 1 ] ) then
3352: LD_VAR 0 1
3356: PUSH
3357: LD_EXP 34
3361: PUSH
3362: LD_INT 1
3364: ARRAY
3365: IN
3366: IFFALSE 3378
// t := 1 else
3368: LD_ADDR_VAR 0 15
3372: PUSH
3373: LD_INT 1
3375: ST_TO_ADDR
3376: GO 3386
// t := 2 ;
3378: LD_ADDR_VAR 0 15
3382: PUSH
3383: LD_INT 2
3385: ST_TO_ADDR
// hc_importance = 101 ;
3386: LD_ADDR_OWVAR 32
3390: PUSH
3391: LD_INT 101
3393: ST_TO_ADDR
// commander := false ;
3394: LD_ADDR_EXP 46
3398: PUSH
3399: LD_INT 0
3401: ST_TO_ADDR
// n1 := false ;
3402: LD_ADDR_VAR 0 16
3406: PUSH
3407: LD_INT 0
3409: ST_TO_ADDR
// n2 := false ;
3410: LD_ADDR_VAR 0 17
3414: PUSH
3415: LD_INT 0
3417: ST_TO_ADDR
// if ( teams [ t ] + 0 ) = 1 then
3418: LD_EXP 34
3422: PUSH
3423: LD_VAR 0 15
3427: ARRAY
3428: PUSH
3429: LD_INT 0
3431: PLUS
3432: PUSH
3433: LD_INT 1
3435: EQUAL
3436: IFFALSE 3456
// begin n1 := true ;
3438: LD_ADDR_VAR 0 16
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// n2 := true ;
3446: LD_ADDR_VAR 0 17
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// end else
3454: GO 3612
// if t = 1 then
3456: LD_VAR 0 15
3460: PUSH
3461: LD_INT 1
3463: EQUAL
3464: IFFALSE 3540
// if sci1 then
3466: LD_EXP 28
3470: IFFALSE 3511
// if GetSex ( sci1 [ 1 ] ) = sex_male then
3472: LD_EXP 28
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 258
3485: PUSH
3486: LD_INT 1
3488: EQUAL
3489: IFFALSE 3501
// n2 := true else
3491: LD_ADDR_VAR 0 17
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
3499: GO 3509
// n1 := true else
3501: LD_ADDR_VAR 0 16
3505: PUSH
3506: LD_INT 1
3508: ST_TO_ADDR
3509: GO 3538
// if Prob ( 50 ) then
3511: LD_INT 50
3513: PPUSH
3514: CALL_OW 13
3518: IFFALSE 3530
// n1 := true else
3520: LD_ADDR_VAR 0 16
3524: PUSH
3525: LD_INT 1
3527: ST_TO_ADDR
3528: GO 3538
// n2 := true else
3530: LD_ADDR_VAR 0 17
3534: PUSH
3535: LD_INT 1
3537: ST_TO_ADDR
3538: GO 3612
// if sci2 then
3540: LD_EXP 29
3544: IFFALSE 3585
// if GetSex ( sci2 [ 1 ] ) = sex_male then
3546: LD_EXP 29
3550: PUSH
3551: LD_INT 1
3553: ARRAY
3554: PPUSH
3555: CALL_OW 258
3559: PUSH
3560: LD_INT 1
3562: EQUAL
3563: IFFALSE 3575
// n2 := true else
3565: LD_ADDR_VAR 0 17
3569: PUSH
3570: LD_INT 1
3572: ST_TO_ADDR
3573: GO 3583
// n1 := true else
3575: LD_ADDR_VAR 0 16
3579: PUSH
3580: LD_INT 1
3582: ST_TO_ADDR
3583: GO 3612
// if Prob ( 50 ) then
3585: LD_INT 50
3587: PPUSH
3588: CALL_OW 13
3592: IFFALSE 3604
// n1 := true else
3594: LD_ADDR_VAR 0 16
3598: PUSH
3599: LD_INT 1
3601: ST_TO_ADDR
3602: GO 3612
// n2 := true ;
3604: LD_ADDR_VAR 0 17
3608: PUSH
3609: LD_INT 1
3611: ST_TO_ADDR
// if n1 then
3612: LD_VAR 0 16
3616: IFFALSE 3852
// begin hc_name = Prof. Garin ;
3618: LD_ADDR_OWVAR 26
3622: PUSH
3623: LD_STRING Prof. Garin
3625: ST_TO_ADDR
// hc_sex = sex_male ;
3626: LD_ADDR_OWVAR 27
3630: PUSH
3631: LD_INT 1
3633: ST_TO_ADDR
// hc_class = class_scientistic ;
3634: LD_ADDR_OWVAR 28
3638: PUSH
3639: LD_INT 4
3641: ST_TO_ADDR
// hc_gallery = multi ;
3642: LD_ADDR_OWVAR 33
3646: PUSH
3647: LD_STRING multi
3649: ST_TO_ADDR
// hc_face_number = 2 ;
3650: LD_ADDR_OWVAR 34
3654: PUSH
3655: LD_INT 2
3657: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
3658: LD_ADDR_OWVAR 29
3662: PUSH
3663: LD_INT 11
3665: PUSH
3666: LD_INT 10
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: ST_TO_ADDR
// hc_basic_skills = [ 0 , 1 , 0 , 2 ] ;
3673: LD_ADDR_OWVAR 30
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 1
3683: PUSH
3684: LD_INT 0
3686: PUSH
3687: LD_INT 2
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: ST_TO_ADDR
// hc_skills = sci1_skills ;
3696: LD_ADDR_OWVAR 31
3700: PUSH
3701: LD_EXP 21
3705: ST_TO_ADDR
// if t = 1 then
3706: LD_VAR 0 15
3710: PUSH
3711: LD_INT 1
3713: EQUAL
3714: IFFALSE 3785
// begin sci1 := sci1 ^ CreateHuman ;
3716: LD_ADDR_EXP 28
3720: PUSH
3721: LD_EXP 28
3725: PUSH
3726: CALL_OW 44
3730: ADD
3731: ST_TO_ADDR
// PlaceUnitXYR ( sci1 [ sci1 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3732: LD_EXP 28
3736: PUSH
3737: LD_EXP 28
3741: ARRAY
3742: PPUSH
3743: LD_EXP 45
3747: PUSH
3748: LD_VAR 0 3
3752: ARRAY
3753: PUSH
3754: LD_INT 1
3756: ARRAY
3757: PPUSH
3758: LD_EXP 45
3762: PUSH
3763: LD_VAR 0 3
3767: ARRAY
3768: PUSH
3769: LD_INT 2
3771: ARRAY
3772: PPUSH
3773: LD_INT 4
3775: PPUSH
3776: LD_INT 0
3778: PPUSH
3779: CALL_OW 50
// end else
3783: GO 3852
// begin sci2 := sci2 ^ CreateHuman ;
3785: LD_ADDR_EXP 29
3789: PUSH
3790: LD_EXP 29
3794: PUSH
3795: CALL_OW 44
3799: ADD
3800: ST_TO_ADDR
// PlaceUnitXYR ( sci2 [ sci2 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3801: LD_EXP 29
3805: PUSH
3806: LD_EXP 29
3810: ARRAY
3811: PPUSH
3812: LD_EXP 45
3816: PUSH
3817: LD_VAR 0 3
3821: ARRAY
3822: PUSH
3823: LD_INT 1
3825: ARRAY
3826: PPUSH
3827: LD_EXP 45
3831: PUSH
3832: LD_VAR 0 3
3836: ARRAY
3837: PUSH
3838: LD_INT 2
3840: ARRAY
3841: PPUSH
3842: LD_INT 4
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 50
// end end ; if n2 then
3852: LD_VAR 0 17
3856: IFFALSE 4092
// begin hc_name = Tanya Garinova ;
3858: LD_ADDR_OWVAR 26
3862: PUSH
3863: LD_STRING Tanya Garinova
3865: ST_TO_ADDR
// hc_sex = sex_female ;
3866: LD_ADDR_OWVAR 27
3870: PUSH
3871: LD_INT 2
3873: ST_TO_ADDR
// hc_class = class_scientistic ;
3874: LD_ADDR_OWVAR 28
3878: PUSH
3879: LD_INT 4
3881: ST_TO_ADDR
// hc_gallery = multi ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING multi
3889: ST_TO_ADDR
// hc_face_number = 1 ;
3890: LD_ADDR_OWVAR 34
3894: PUSH
3895: LD_INT 1
3897: ST_TO_ADDR
// hc_attr = [ 9 , 11 ] ;
3898: LD_ADDR_OWVAR 29
3902: PUSH
3903: LD_INT 9
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: ST_TO_ADDR
// hc_basic_skills = [ 1 , 1 , 0 , 1 ] ;
3913: LD_ADDR_OWVAR 30
3917: PUSH
3918: LD_INT 1
3920: PUSH
3921: LD_INT 1
3923: PUSH
3924: LD_INT 0
3926: PUSH
3927: LD_INT 1
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: ST_TO_ADDR
// hc_skills = sci2_skills ;
3936: LD_ADDR_OWVAR 31
3940: PUSH
3941: LD_EXP 22
3945: ST_TO_ADDR
// if t = 1 then
3946: LD_VAR 0 15
3950: PUSH
3951: LD_INT 1
3953: EQUAL
3954: IFFALSE 4025
// begin sci1 := sci1 ^ CreateHuman ;
3956: LD_ADDR_EXP 28
3960: PUSH
3961: LD_EXP 28
3965: PUSH
3966: CALL_OW 44
3970: ADD
3971: ST_TO_ADDR
// PlaceUnitXYR ( sci1 [ sci1 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3972: LD_EXP 28
3976: PUSH
3977: LD_EXP 28
3981: ARRAY
3982: PPUSH
3983: LD_EXP 45
3987: PUSH
3988: LD_VAR 0 3
3992: ARRAY
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: LD_EXP 45
4002: PUSH
4003: LD_VAR 0 3
4007: ARRAY
4008: PUSH
4009: LD_INT 2
4011: ARRAY
4012: PPUSH
4013: LD_INT 4
4015: PPUSH
4016: LD_INT 0
4018: PPUSH
4019: CALL_OW 50
// end else
4023: GO 4092
// begin sci2 := sci2 ^ CreateHuman ;
4025: LD_ADDR_EXP 29
4029: PUSH
4030: LD_EXP 29
4034: PUSH
4035: CALL_OW 44
4039: ADD
4040: ST_TO_ADDR
// PlaceUnitXYR ( sci2 [ sci2 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
4041: LD_EXP 29
4045: PUSH
4046: LD_EXP 29
4050: ARRAY
4051: PPUSH
4052: LD_EXP 45
4056: PUSH
4057: LD_VAR 0 3
4061: ARRAY
4062: PUSH
4063: LD_INT 1
4065: ARRAY
4066: PPUSH
4067: LD_EXP 45
4071: PUSH
4072: LD_VAR 0 3
4076: ARRAY
4077: PUSH
4078: LD_INT 2
4080: ARRAY
4081: PPUSH
4082: LD_INT 4
4084: PPUSH
4085: LD_INT 0
4087: PPUSH
4088: CALL_OW 50
// end end ; SetTech ( tech_TargTeleport , side , state_researched ) ;
4092: LD_INT 38
4094: PPUSH
4095: LD_VAR 0 1
4099: PPUSH
4100: LD_INT 2
4102: PPUSH
4103: CALL_OW 322
// SetRestrict ( b_teleport , side , state_disabled ) ;
4107: LD_INT 34
4109: PPUSH
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_INT 0
4117: PPUSH
4118: CALL_OW 324
// end ; uc_nation = Side_nations [ side ] ;
4122: LD_ADDR_OWVAR 21
4126: PUSH
4127: LD_EXP 37
4131: PUSH
4132: LD_VAR 0 1
4136: ARRAY
4137: ST_TO_ADDR
// hc_gallery =  ;
4138: LD_ADDR_OWVAR 33
4142: PUSH
4143: LD_STRING 
4145: ST_TO_ADDR
// hc_name =  ;
4146: LD_ADDR_OWVAR 26
4150: PUSH
4151: LD_STRING 
4153: ST_TO_ADDR
// neng := number_of_people ;
4154: LD_ADDR_VAR 0 11
4158: PUSH
4159: LD_EXP 15
4163: ST_TO_ADDR
// nsol := number_of_breastworks ;
4164: LD_ADDR_VAR 0 14
4168: PUSH
4169: LD_EXP 14
4173: ST_TO_ADDR
// if nsol < neng div 4 then
4174: LD_VAR 0 14
4178: PUSH
4179: LD_VAR 0 11
4183: PUSH
4184: LD_INT 4
4186: DIV
4187: LESS
4188: IFFALSE 4204
// nsol := neng div 4 ;
4190: LD_ADDR_VAR 0 14
4194: PUSH
4195: LD_VAR 0 11
4199: PUSH
4200: LD_INT 4
4202: DIV
4203: ST_TO_ADDR
// neng := neng - nsol ;
4204: LD_ADDR_VAR 0 11
4208: PUSH
4209: LD_VAR 0 11
4213: PUSH
4214: LD_VAR 0 14
4218: MINUS
4219: ST_TO_ADDR
// nsci := neng div 3 ;
4220: LD_ADDR_VAR 0 12
4224: PUSH
4225: LD_VAR 0 11
4229: PUSH
4230: LD_INT 3
4232: DIV
4233: ST_TO_ADDR
// if nsci < 1 then
4234: LD_VAR 0 12
4238: PUSH
4239: LD_INT 1
4241: LESS
4242: IFFALSE 4252
// nsci := 1 ;
4244: LD_ADDR_VAR 0 12
4248: PUSH
4249: LD_INT 1
4251: ST_TO_ADDR
// neng := neng - nsci ;
4252: LD_ADDR_VAR 0 11
4256: PUSH
4257: LD_VAR 0 11
4261: PUSH
4262: LD_VAR 0 12
4266: MINUS
4267: ST_TO_ADDR
// nmech := neng div 2 ;
4268: LD_ADDR_VAR 0 13
4272: PUSH
4273: LD_VAR 0 11
4277: PUSH
4278: LD_INT 2
4280: DIV
4281: ST_TO_ADDR
// neng := neng - nmech ;
4282: LD_ADDR_VAR 0 11
4286: PUSH
4287: LD_VAR 0 11
4291: PUSH
4292: LD_VAR 0 13
4296: MINUS
4297: ST_TO_ADDR
// if neng < 1 then
4298: LD_VAR 0 11
4302: PUSH
4303: LD_INT 1
4305: LESS
4306: IFFALSE 4316
// neng := 1 ;
4308: LD_ADDR_VAR 0 11
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// soldiers_created := 0 ;
4316: LD_ADDR_LOC 3
4320: PUSH
4321: LD_INT 0
4323: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4324: LD_ADDR_VAR 0 6
4328: PUSH
4329: DOUBLE
4330: LD_INT 1
4332: DEC
4333: ST_TO_ADDR
4334: LD_EXP 14
4338: PUSH
4339: FOR_TO
4340: IFFALSE 4594
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4342: LD_ADDR_VAR 0 4
4346: PUSH
4347: LD_EXP 43
4351: PUSH
4352: LD_VAR 0 3
4356: ARRAY
4357: PUSH
4358: LD_VAR 0 6
4362: ARRAY
4363: PUSH
4364: LD_INT 1
4366: ARRAY
4367: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4368: LD_ADDR_VAR 0 5
4372: PUSH
4373: LD_EXP 43
4377: PUSH
4378: LD_VAR 0 3
4382: ARRAY
4383: PUSH
4384: LD_VAR 0 6
4388: ARRAY
4389: PUSH
4390: LD_INT 2
4392: ARRAY
4393: ST_TO_ADDR
// bc_type := b_breastwork ;
4394: LD_ADDR_OWVAR 42
4398: PUSH
4399: LD_INT 31
4401: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ i ] [ 3 ] ) ;
4402: LD_ADDR_VAR 0 9
4406: PUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: LD_VAR 0 5
4416: PPUSH
4417: LD_EXP 43
4421: PUSH
4422: LD_VAR 0 3
4426: ARRAY
4427: PUSH
4428: LD_VAR 0 6
4432: ARRAY
4433: PUSH
4434: LD_INT 3
4436: ARRAY
4437: PPUSH
4438: CALL_OW 47
4442: ST_TO_ADDR
// x := ShiftX ( x , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4443: LD_ADDR_VAR 0 4
4447: PUSH
4448: LD_VAR 0 4
4452: PPUSH
4453: LD_EXP 43
4457: PUSH
4458: LD_VAR 0 3
4462: ARRAY
4463: PUSH
4464: LD_VAR 0 6
4468: ARRAY
4469: PUSH
4470: LD_INT 3
4472: ARRAY
4473: PPUSH
4474: LD_INT 2
4476: PPUSH
4477: CALL_OW 272
4481: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4482: LD_ADDR_VAR 0 5
4486: PUSH
4487: LD_VAR 0 5
4491: PPUSH
4492: LD_EXP 43
4496: PUSH
4497: LD_VAR 0 3
4501: ARRAY
4502: PUSH
4503: LD_VAR 0 6
4507: ARRAY
4508: PUSH
4509: LD_INT 3
4511: ARRAY
4512: PPUSH
4513: LD_INT 2
4515: PPUSH
4516: CALL_OW 273
4520: ST_TO_ADDR
// sol := prepare_people ( side , 1 , class_soldier , x , y , 1 , commander ) [ 1 ] ;
4521: LD_ADDR_VAR 0 8
4525: PUSH
4526: LD_VAR 0 1
4530: PPUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 1
4536: PPUSH
4537: LD_VAR 0 4
4541: PPUSH
4542: LD_VAR 0 5
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_ADDR_EXP 46
4554: PPUSH
4555: CALL 2188 0 7
4559: PUSH
4560: LD_INT 1
4562: ARRAY
4563: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4564: LD_ADDR_LOC 3
4568: PUSH
4569: LD_LOC 3
4573: PUSH
4574: LD_INT 1
4576: PLUS
4577: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4578: LD_VAR 0 8
4582: PPUSH
4583: LD_VAR 0 9
4587: PPUSH
4588: CALL_OW 120
// end ;
4592: GO 4339
4594: POP
4595: POP
// x := start_def [ pos ] [ 1 ] ;
4596: LD_ADDR_VAR 0 4
4600: PUSH
4601: LD_EXP 44
4605: PUSH
4606: LD_VAR 0 3
4610: ARRAY
4611: PUSH
4612: LD_INT 1
4614: ARRAY
4615: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4616: LD_ADDR_VAR 0 5
4620: PUSH
4621: LD_EXP 44
4625: PUSH
4626: LD_VAR 0 3
4630: ARRAY
4631: PUSH
4632: LD_INT 2
4634: ARRAY
4635: ST_TO_ADDR
// prepare_people ( side , nsol - number_of_breastworks , class_soldier , x , y , 5 , commander ) ;
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_VAR 0 14
4645: PUSH
4646: LD_EXP 14
4650: MINUS
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: LD_VAR 0 4
4659: PPUSH
4660: LD_VAR 0 5
4664: PPUSH
4665: LD_INT 5
4667: PPUSH
4668: LD_ADDR_EXP 46
4672: PPUSH
4673: CALL 2188 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_VAR 0 11
4686: PPUSH
4687: LD_INT 2
4689: PPUSH
4690: LD_VAR 0 4
4694: PPUSH
4695: LD_VAR 0 5
4699: PPUSH
4700: LD_INT 5
4702: PPUSH
4703: LD_ADDR_EXP 46
4707: PPUSH
4708: CALL 2188 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
4712: LD_VAR 0 1
4716: PPUSH
4717: LD_VAR 0 13
4721: PPUSH
4722: LD_INT 3
4724: PPUSH
4725: LD_VAR 0 4
4729: PPUSH
4730: LD_VAR 0 5
4734: PPUSH
4735: LD_INT 5
4737: PPUSH
4738: LD_ADDR_EXP 46
4742: PPUSH
4743: CALL 2188 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
4747: LD_VAR 0 1
4751: PPUSH
4752: LD_VAR 0 12
4756: PPUSH
4757: LD_INT 4
4759: PPUSH
4760: LD_VAR 0 4
4764: PPUSH
4765: LD_VAR 0 5
4769: PPUSH
4770: LD_INT 5
4772: PPUSH
4773: LD_ADDR_EXP 46
4777: PPUSH
4778: CALL 2188 0 7
// if not global_defined then
4782: LD_LOC 2
4786: NOT
4787: IFFALSE 4797
// global_defined := true ;
4789: LD_ADDR_LOC 2
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4797: LD_EXP 9
4801: PUSH
4802: LD_INT 20
4804: PPUSH
4805: LD_VAR 0 1
4809: PPUSH
4810: CALL_OW 321
4814: PUSH
4815: LD_INT 1
4817: EQUAL
4818: AND
4819: IFFALSE 4836
// SetTech ( tech_SibDet , side , state_researched ) ;
4821: LD_INT 20
4823: PPUSH
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 2
4831: PPUSH
4832: CALL_OW 322
// if def_siberite_bomb = 1 then
4836: LD_EXP 10
4840: PUSH
4841: LD_INT 1
4843: EQUAL
4844: IFFALSE 4878
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4846: LD_INT 25
4848: PPUSH
4849: LD_VAR 0 1
4853: PPUSH
4854: LD_INT 1
4856: PPUSH
4857: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4861: LD_INT 73
4863: PPUSH
4864: LD_VAR 0 1
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 322
// end else
4876: GO 4908
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4878: LD_INT 25
4880: PPUSH
4881: LD_VAR 0 1
4885: PPUSH
4886: LD_INT 0
4888: PPUSH
4889: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4893: LD_INT 73
4895: PPUSH
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_INT 0
4903: PPUSH
4904: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4908: LD_INT 24
4910: PPUSH
4911: LD_VAR 0 1
4915: PPUSH
4916: LD_INT 0
4918: PPUSH
4919: CALL_OW 322
// end ;
4923: LD_VAR 0 2
4927: RET
// every 0 0$1 do
4928: GO 4930
4930: DISABLE
// if ( def_siberite_bomb > 1 ) then
4931: LD_EXP 10
4935: PUSH
4936: LD_INT 1
4938: GREATER
4939: IFFALSE 4954
// begin wait ( siberite_bomb_Delay ) ;
4941: LD_EXP 25
4945: PPUSH
4946: CALL_OW 67
// EnableSibFiss ;
4950: CALL 4955 0 0
// end ;
4954: END
// function EnableSibFiss ; var i ; begin
4955: LD_INT 0
4957: PPUSH
4958: PPUSH
// for i := 1 to 8 do
4959: LD_ADDR_VAR 0 2
4963: PUSH
4964: DOUBLE
4965: LD_INT 1
4967: DEC
4968: ST_TO_ADDR
4969: LD_INT 8
4971: PUSH
4972: FOR_TO
4973: IFFALSE 5019
// if Side_Positions [ i ] then
4975: LD_EXP 36
4979: PUSH
4980: LD_VAR 0 2
4984: ARRAY
4985: IFFALSE 5017
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4987: LD_INT 25
4989: PPUSH
4990: LD_VAR 0 2
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5002: LD_INT 73
5004: PPUSH
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: CALL_OW 322
// end ;
5017: GO 4972
5019: POP
5020: POP
// end ;
5021: LD_VAR 0 1
5025: RET
// function prepare_sides ; var i ; begin
5026: LD_INT 0
5028: PPUSH
5029: PPUSH
// global_units := [ ] ;
5030: LD_ADDR_LOC 1
5034: PUSH
5035: EMPTY
5036: ST_TO_ADDR
// global_defined := false ;
5037: LD_ADDR_LOC 2
5041: PUSH
5042: LD_INT 0
5044: ST_TO_ADDR
// for i := 1 to 8 do
5045: LD_ADDR_VAR 0 2
5049: PUSH
5050: DOUBLE
5051: LD_INT 1
5053: DEC
5054: ST_TO_ADDR
5055: LD_INT 8
5057: PUSH
5058: FOR_TO
5059: IFFALSE 5084
// if Side_Positions [ i ] then
5061: LD_EXP 36
5065: PUSH
5066: LD_VAR 0 2
5070: ARRAY
5071: IFFALSE 5082
// prepare_side ( i ) ;
5073: LD_VAR 0 2
5077: PPUSH
5078: CALL 2685 0 1
5082: GO 5058
5084: POP
5085: POP
// end ;
5086: LD_VAR 0 1
5090: RET
// starting begin DE_Triggers ;
5091: CALL 7640 0 0
// read_multiplayer_and_game_parameters ;
5095: CALL 0 0 0
// enable ( 44 ) ;
5099: LD_INT 44
5101: ENABLE_MARKED
// enable ( 45 ) ;
5102: LD_INT 45
5104: ENABLE_MARKED
// mp_selectmsg := true ;
5105: LD_ADDR_OWVAR 13
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// prepare_map_coordinates ;
5113: CALL 1286 0 0
// set_shared_visions_and_alliances ;
5117: CALL 1825 0 0
// prepare_sides ;
5121: CALL 5026 0 0
// if Game_Type = 66 then
5125: LD_EXP 1
5129: PUSH
5130: LD_INT 66
5132: EQUAL
5133: IFFALSE 5139
// Init_Win_Condition ;
5135: CALL 7687 0 0
// init_shipments_and_respawning ;
5139: CALL 5245 0 0
// ResetFog ;
5143: CALL_OW 335
// music_nat := Side_Nations [ your_side ] ;
5147: LD_ADDR_OWVAR 71
5151: PUSH
5152: LD_EXP 37
5156: PUSH
5157: LD_OWVAR 2
5161: ARRAY
5162: ST_TO_ADDR
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5163: LD_EXP 44
5167: PUSH
5168: LD_EXP 36
5172: PUSH
5173: LD_OWVAR 2
5177: ARRAY
5178: ARRAY
5179: PUSH
5180: LD_INT 1
5182: ARRAY
5183: PPUSH
5184: LD_EXP 44
5188: PUSH
5189: LD_EXP 36
5193: PUSH
5194: LD_OWVAR 2
5198: ARRAY
5199: ARRAY
5200: PUSH
5201: LD_INT 2
5203: ARRAY
5204: PPUSH
5205: CALL_OW 86
// BuildUpAreas := [ Base_nw , Base_ne , Base_sw , Base_se ] ;
5209: LD_ADDR_EXP 49
5213: PUSH
5214: LD_INT 15
5216: PUSH
5217: LD_INT 16
5219: PUSH
5220: LD_INT 17
5222: PUSH
5223: LD_INT 18
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: ST_TO_ADDR
// BeginBuildUp ;
5232: CALL 8496 0 0
// end ;
5236: END
// export function OnHumanRespawned ( un ) ; begin
5237: LD_INT 0
5239: PPUSH
// end ; end_of_file
5240: LD_VAR 0 2
5244: RET
// var shipment1 , shipment2 , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5245: LD_INT 0
5247: PPUSH
// shipment1 := [ ] ;
5248: LD_ADDR_LOC 4
5252: PUSH
5253: EMPTY
5254: ST_TO_ADDR
// shipment2 := [ ] ;
5255: LD_ADDR_LOC 5
5259: PUSH
5260: EMPTY
5261: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5262: LD_ADDR_LOC 6
5266: PUSH
5267: LD_INT 1
5269: PPUSH
5270: LD_INT 8
5272: PPUSH
5273: CALL_OW 12
5277: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5278: LD_ADDR_LOC 7
5282: PUSH
5283: LD_INT 0
5285: PUSH
5286: LD_INT 0
5288: PUSH
5289: LD_INT 0
5291: PUSH
5292: LD_INT 0
5294: PUSH
5295: LD_INT 0
5297: PUSH
5298: LD_INT 0
5300: PUSH
5301: LD_INT 0
5303: PUSH
5304: LD_INT 0
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: ST_TO_ADDR
// end ;
5317: LD_VAR 0 1
5321: RET
// every 0 0$1 + 0 0$0.5 marked 45 do var n , building_list , aktresp , b ;
5322: GO 5324
5324: DISABLE
5325: LD_INT 0
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
// begin if respawning_time_max = 0 then
5331: LD_EXP 24
5335: PUSH
5336: LD_INT 0
5338: EQUAL
5339: IFFALSE 5343
// exit ;
5341: GO 5850
// if respawn = 8 then
5343: LD_LOC 6
5347: PUSH
5348: LD_INT 8
5350: EQUAL
5351: IFFALSE 5363
// respawn := 1 else
5353: LD_ADDR_LOC 6
5357: PUSH
5358: LD_INT 1
5360: ST_TO_ADDR
5361: GO 5377
// respawn := respawn + 1 ;
5363: LD_ADDR_LOC 6
5367: PUSH
5368: LD_LOC 6
5372: PUSH
5373: LD_INT 1
5375: PLUS
5376: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5377: LD_EXP 36
5381: PUSH
5382: LD_LOC 6
5386: ARRAY
5387: PUSH
5388: LD_LOC 7
5392: PUSH
5393: LD_LOC 6
5397: ARRAY
5398: NOT
5399: AND
5400: IFFALSE 5849
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5402: LD_ADDR_VAR 0 1
5406: PUSH
5407: LD_INT 21
5409: PUSH
5410: LD_INT 1
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 22
5419: PUSH
5420: LD_LOC 6
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 3
5431: PUSH
5432: LD_INT 23
5434: PUSH
5435: LD_INT 0
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: PPUSH
5448: CALL_OW 69
5452: ST_TO_ADDR
// if n < number_of_people then
5453: LD_VAR 0 1
5457: PUSH
5458: LD_EXP 15
5462: LESS
5463: IFFALSE 5846
// begin aktresp := respawn ;
5465: LD_ADDR_VAR 0 3
5469: PUSH
5470: LD_LOC 6
5474: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5475: LD_ADDR_LOC 7
5479: PUSH
5480: LD_LOC 7
5484: PPUSH
5485: LD_VAR 0 3
5489: PPUSH
5490: LD_INT 1
5492: PPUSH
5493: CALL_OW 1
5497: ST_TO_ADDR
// enable ;
5498: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5499: LD_EXP 23
5503: PPUSH
5504: LD_EXP 24
5508: PPUSH
5509: CALL_OW 12
5513: PPUSH
5514: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5518: LD_ADDR_LOC 7
5522: PUSH
5523: LD_LOC 7
5527: PPUSH
5528: LD_VAR 0 3
5532: PPUSH
5533: LD_INT 0
5535: PPUSH
5536: CALL_OW 1
5540: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5541: LD_ADDR_VAR 0 2
5545: PUSH
5546: LD_INT 21
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 2
5558: PUSH
5559: LD_INT 30
5561: PUSH
5562: LD_INT 0
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: LD_INT 30
5571: PUSH
5572: LD_INT 1
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 50
5586: PUSH
5587: EMPTY
5588: LIST
5589: PUSH
5590: LD_INT 22
5592: PUSH
5593: LD_VAR 0 3
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: PPUSH
5608: CALL_OW 69
5612: ST_TO_ADDR
// if building_list = 0 then
5613: LD_VAR 0 2
5617: PUSH
5618: LD_INT 0
5620: EQUAL
5621: IFFALSE 5666
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5623: LD_ADDR_VAR 0 2
5627: PUSH
5628: LD_INT 21
5630: PUSH
5631: LD_INT 3
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: LD_INT 50
5640: PUSH
5641: EMPTY
5642: LIST
5643: PUSH
5644: LD_INT 22
5646: PUSH
5647: LD_VAR 0 3
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: PPUSH
5661: CALL_OW 69
5665: ST_TO_ADDR
// if building_list = 0 then
5666: LD_VAR 0 2
5670: PUSH
5671: LD_INT 0
5673: EQUAL
5674: IFFALSE 5678
// exit ;
5676: GO 5850
// hc_name :=  ;
5678: LD_ADDR_OWVAR 26
5682: PUSH
5683: LD_STRING 
5685: ST_TO_ADDR
// hc_importance := 0 ;
5686: LD_ADDR_OWVAR 32
5690: PUSH
5691: LD_INT 0
5693: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5694: LD_INT 0
5696: PPUSH
5697: LD_INT 0
5699: PPUSH
5700: LD_EXP 16
5704: PUSH
5705: LD_INT 2
5707: DIV
5708: PPUSH
5709: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5713: LD_ADDR_OWVAR 21
5717: PUSH
5718: LD_EXP 37
5722: PUSH
5723: LD_VAR 0 3
5727: ARRAY
5728: ST_TO_ADDR
// uc_side := aktresp ;
5729: LD_ADDR_OWVAR 20
5733: PUSH
5734: LD_VAR 0 3
5738: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5739: LD_ADDR_VAR 0 4
5743: PUSH
5744: LD_VAR 0 2
5748: PUSH
5749: LD_INT 1
5751: PPUSH
5752: LD_VAR 0 2
5756: PUSH
5757: LD_INT 0
5759: PLUS
5760: PPUSH
5761: CALL_OW 12
5765: ARRAY
5766: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5767: LD_VAR 0 4
5771: PPUSH
5772: CALL_OW 266
5776: PUSH
5777: LD_INT 0
5779: PUSH
5780: LD_INT 1
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: IN
5787: IFFALSE 5799
// n = 25 else
5789: LD_ADDR_VAR 0 1
5793: PUSH
5794: LD_INT 25
5796: ST_TO_ADDR
5797: GO 5807
// n = 10 ;
5799: LD_ADDR_VAR 0 1
5803: PUSH
5804: LD_INT 10
5806: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5807: CALL_OW 44
5811: PPUSH
5812: LD_VAR 0 4
5816: PPUSH
5817: CALL_OW 250
5821: PPUSH
5822: LD_VAR 0 4
5826: PPUSH
5827: CALL_OW 251
5831: PPUSH
5832: LD_VAR 0 1
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: CALL_OW 50
// end else
5844: GO 5847
// enable ;
5846: ENABLE
// end else
5847: GO 5850
// enable ;
5849: ENABLE
// end ;
5850: PPOPN 4
5852: END
// every 0 0$5 + 0 0$1.1 marked 45 do var d , q ;
5853: GO 5855
5855: DISABLE
5856: LD_INT 0
5858: PPUSH
5859: PPUSH
// begin case tick of 1 .. 1 1$0 :
5860: LD_OWVAR 1
5864: PUSH
5865: LD_INT 1
5867: DOUBLE
5868: GREATEREQUAL
5869: IFFALSE 5877
5871: LD_INT 2100
5873: DOUBLE
5874: LESSEQUAL
5875: IFTRUE 5879
5877: GO 5890
5879: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5880: LD_ADDR_VAR 0 1
5884: PUSH
5885: LD_INT 150
5887: ST_TO_ADDR
5888: GO 6073
5890: LD_INT 2100
5892: PUSH
5893: LD_INT 1
5895: PLUS
5896: DOUBLE
5897: GREATEREQUAL
5898: IFFALSE 5906
5900: LD_INT 10500
5902: DOUBLE
5903: LESSEQUAL
5904: IFTRUE 5908
5906: GO 5919
5908: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5909: LD_ADDR_VAR 0 1
5913: PUSH
5914: LD_INT 100
5916: ST_TO_ADDR
5917: GO 6073
5919: LD_INT 10500
5921: PUSH
5922: LD_INT 1
5924: PLUS
5925: DOUBLE
5926: GREATEREQUAL
5927: IFFALSE 5935
5929: LD_INT 21000
5931: DOUBLE
5932: LESSEQUAL
5933: IFTRUE 5937
5935: GO 5948
5937: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5938: LD_ADDR_VAR 0 1
5942: PUSH
5943: LD_INT 90
5945: ST_TO_ADDR
5946: GO 6073
5948: LD_INT 21000
5950: PUSH
5951: LD_INT 1
5953: PLUS
5954: DOUBLE
5955: GREATEREQUAL
5956: IFFALSE 5964
5958: LD_INT 42000
5960: DOUBLE
5961: LESSEQUAL
5962: IFTRUE 5966
5964: GO 5977
5966: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5967: LD_ADDR_VAR 0 1
5971: PUSH
5972: LD_INT 70
5974: ST_TO_ADDR
5975: GO 6073
5977: LD_INT 42000
5979: PUSH
5980: LD_INT 1
5982: PLUS
5983: DOUBLE
5984: GREATEREQUAL
5985: IFFALSE 5993
5987: LD_INT 63000
5989: DOUBLE
5990: LESSEQUAL
5991: IFTRUE 5995
5993: GO 6006
5995: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5996: LD_ADDR_VAR 0 1
6000: PUSH
6001: LD_INT 60
6003: ST_TO_ADDR
6004: GO 6073
6006: LD_INT 63000
6008: PUSH
6009: LD_INT 1
6011: PLUS
6012: DOUBLE
6013: GREATEREQUAL
6014: IFFALSE 6022
6016: LD_INT 105000
6018: DOUBLE
6019: LESSEQUAL
6020: IFTRUE 6024
6022: GO 6035
6024: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
6025: LD_ADDR_VAR 0 1
6029: PUSH
6030: LD_INT 35
6032: ST_TO_ADDR
6033: GO 6073
6035: LD_INT 105000
6037: PUSH
6038: LD_INT 1
6040: PLUS
6041: DOUBLE
6042: GREATEREQUAL
6043: IFFALSE 6051
6045: LD_INT 630000
6047: DOUBLE
6048: LESSEQUAL
6049: IFTRUE 6053
6051: GO 6064
6053: POP
// d := 20 ; else
6054: LD_ADDR_VAR 0 1
6058: PUSH
6059: LD_INT 20
6061: ST_TO_ADDR
6062: GO 6073
6064: POP
// d := 0 ; end ;
6065: LD_ADDR_VAR 0 1
6069: PUSH
6070: LD_INT 0
6072: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
6073: LD_INT 1
6075: PPUSH
6076: LD_INT 10000
6078: PPUSH
6079: CALL_OW 12
6083: PUSH
6084: LD_VAR 0 1
6088: PUSH
6089: LD_EXP 19
6093: MUL
6094: PUSH
6095: LD_INT 2
6097: DIV
6098: LESSEQUAL
6099: IFFALSE 6206
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6101: LD_INT 1
6103: PPUSH
6104: LD_INT 140
6106: PPUSH
6107: CALL_OW 12
6111: PPUSH
6112: CALL_OW 67
// if shipment1 = [ ] then
6116: LD_LOC 4
6120: PUSH
6121: EMPTY
6122: EQUAL
6123: IFFALSE 6148
// shipment1 := [ q1 , q2 , q3 , q4 ] ;
6125: LD_ADDR_LOC 4
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: LD_INT 4
6135: PUSH
6136: LD_INT 5
6138: PUSH
6139: LD_INT 6
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: ST_TO_ADDR
// q := shipment1 [ Rand ( 1 , shipment1 ) ] ;
6148: LD_ADDR_VAR 0 2
6152: PUSH
6153: LD_LOC 4
6157: PUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_LOC 4
6165: PPUSH
6166: CALL_OW 12
6170: ARRAY
6171: ST_TO_ADDR
// shipment1 := shipment1 diff [ q ] ;
6172: LD_ADDR_LOC 4
6176: PUSH
6177: LD_LOC 4
6181: PUSH
6182: LD_VAR 0 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: DIFF
6190: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
6191: LD_INT 5
6193: PPUSH
6194: LD_VAR 0 2
6198: PPUSH
6199: LD_INT 1
6201: PPUSH
6202: CALL_OW 55
// end ; enable ;
6206: ENABLE
// end ;
6207: PPOPN 2
6209: END
// every 0 0$5 + 0 0$1.1 marked 45 do var d , q ;
6210: GO 6212
6212: DISABLE
6213: LD_INT 0
6215: PPUSH
6216: PPUSH
// begin case tick of 1 .. 1 1$0 :
6217: LD_OWVAR 1
6221: PUSH
6222: LD_INT 1
6224: DOUBLE
6225: GREATEREQUAL
6226: IFFALSE 6234
6228: LD_INT 2100
6230: DOUBLE
6231: LESSEQUAL
6232: IFTRUE 6236
6234: GO 6247
6236: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
6237: LD_ADDR_VAR 0 1
6241: PUSH
6242: LD_INT 150
6244: ST_TO_ADDR
6245: GO 6430
6247: LD_INT 2100
6249: PUSH
6250: LD_INT 1
6252: PLUS
6253: DOUBLE
6254: GREATEREQUAL
6255: IFFALSE 6263
6257: LD_INT 10500
6259: DOUBLE
6260: LESSEQUAL
6261: IFTRUE 6265
6263: GO 6276
6265: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 100
6273: ST_TO_ADDR
6274: GO 6430
6276: LD_INT 10500
6278: PUSH
6279: LD_INT 1
6281: PLUS
6282: DOUBLE
6283: GREATEREQUAL
6284: IFFALSE 6292
6286: LD_INT 21000
6288: DOUBLE
6289: LESSEQUAL
6290: IFTRUE 6294
6292: GO 6305
6294: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
6295: LD_ADDR_VAR 0 1
6299: PUSH
6300: LD_INT 90
6302: ST_TO_ADDR
6303: GO 6430
6305: LD_INT 21000
6307: PUSH
6308: LD_INT 1
6310: PLUS
6311: DOUBLE
6312: GREATEREQUAL
6313: IFFALSE 6321
6315: LD_INT 42000
6317: DOUBLE
6318: LESSEQUAL
6319: IFTRUE 6323
6321: GO 6334
6323: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
6324: LD_ADDR_VAR 0 1
6328: PUSH
6329: LD_INT 70
6331: ST_TO_ADDR
6332: GO 6430
6334: LD_INT 42000
6336: PUSH
6337: LD_INT 1
6339: PLUS
6340: DOUBLE
6341: GREATEREQUAL
6342: IFFALSE 6350
6344: LD_INT 63000
6346: DOUBLE
6347: LESSEQUAL
6348: IFTRUE 6352
6350: GO 6363
6352: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
6353: LD_ADDR_VAR 0 1
6357: PUSH
6358: LD_INT 60
6360: ST_TO_ADDR
6361: GO 6430
6363: LD_INT 63000
6365: PUSH
6366: LD_INT 1
6368: PLUS
6369: DOUBLE
6370: GREATEREQUAL
6371: IFFALSE 6379
6373: LD_INT 105000
6375: DOUBLE
6376: LESSEQUAL
6377: IFTRUE 6381
6379: GO 6392
6381: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
6382: LD_ADDR_VAR 0 1
6386: PUSH
6387: LD_INT 35
6389: ST_TO_ADDR
6390: GO 6430
6392: LD_INT 105000
6394: PUSH
6395: LD_INT 1
6397: PLUS
6398: DOUBLE
6399: GREATEREQUAL
6400: IFFALSE 6408
6402: LD_INT 630000
6404: DOUBLE
6405: LESSEQUAL
6406: IFTRUE 6410
6408: GO 6421
6410: POP
// d := 20 ; else
6411: LD_ADDR_VAR 0 1
6415: PUSH
6416: LD_INT 20
6418: ST_TO_ADDR
6419: GO 6430
6421: POP
// d := 0 ; end ;
6422: LD_ADDR_VAR 0 1
6426: PUSH
6427: LD_INT 0
6429: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 10000
6435: PPUSH
6436: CALL_OW 12
6440: PUSH
6441: LD_VAR 0 1
6445: PUSH
6446: LD_EXP 19
6450: MUL
6451: PUSH
6452: LD_INT 2
6454: DIV
6455: LESSEQUAL
6456: IFFALSE 6579
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6458: LD_INT 1
6460: PPUSH
6461: LD_INT 140
6463: PPUSH
6464: CALL_OW 12
6468: PPUSH
6469: CALL_OW 67
// if shipment2 = [ ] then
6473: LD_LOC 5
6477: PUSH
6478: EMPTY
6479: EQUAL
6480: IFFALSE 6521
// shipment2 := [ q1a , q2a , q3a , q4a , q1b , q2b , q3b , q4b ] ;
6482: LD_ADDR_LOC 5
6486: PUSH
6487: LD_INT 7
6489: PUSH
6490: LD_INT 8
6492: PUSH
6493: LD_INT 9
6495: PUSH
6496: LD_INT 10
6498: PUSH
6499: LD_INT 11
6501: PUSH
6502: LD_INT 12
6504: PUSH
6505: LD_INT 13
6507: PUSH
6508: LD_INT 14
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: ST_TO_ADDR
// q := shipment2 [ Rand ( 1 , shipment2 ) ] ;
6521: LD_ADDR_VAR 0 2
6525: PUSH
6526: LD_LOC 5
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_LOC 5
6538: PPUSH
6539: CALL_OW 12
6543: ARRAY
6544: ST_TO_ADDR
// shipment2 := shipment2 diff [ q ] ;
6545: LD_ADDR_LOC 5
6549: PUSH
6550: LD_LOC 5
6554: PUSH
6555: LD_VAR 0 2
6559: PUSH
6560: EMPTY
6561: LIST
6562: DIFF
6563: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
6564: LD_INT 5
6566: PPUSH
6567: LD_VAR 0 2
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 55
// end ; enable ;
6579: ENABLE
// end ; end_of_file
6580: PPOPN 2
6582: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; export function CanWinLoose ; begin
6583: LD_INT 0
6585: PPUSH
// Result := true ;
6586: LD_ADDR_VAR 0 1
6590: PUSH
6591: LD_INT 1
6593: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6594: CALL_OW 518
6598: PUSH
6599: CALL_OW 519
6603: PUSH
6604: LD_INT 0
6606: GREATER
6607: AND
6608: IFFALSE 6618
// Result := false ;
6610: LD_ADDR_VAR 0 1
6614: PUSH
6615: LD_INT 0
6617: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
6618: CALL_OW 531
6622: PUSH
6623: CALL_OW 519
6627: PUSH
6628: LD_INT 1
6630: GREATER
6631: AND
6632: IFFALSE 6642
// Result := false ;
6634: LD_ADDR_VAR 0 1
6638: PUSH
6639: LD_INT 0
6641: ST_TO_ADDR
// end ;
6642: LD_VAR 0 1
6646: RET
// function Update_Flags ; var un ; begin
6647: LD_INT 0
6649: PPUSH
6650: PPUSH
// for un in battle_flags_id do
6651: LD_ADDR_VAR 0 2
6655: PUSH
6656: LD_EXP 47
6660: PUSH
6661: FOR_IN
6662: IFFALSE 6737
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6664: LD_VAR 0 2
6668: PPUSH
6669: LD_INT 1
6671: PUSH
6672: LD_LOC 8
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: LD_INT 2
6683: PUSH
6684: LD_LOC 8
6688: PUSH
6689: LD_INT 2
6691: DIV
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 3
6699: PUSH
6700: LD_LOC 8
6704: PUSH
6705: LD_INT 5
6707: DIV
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 20
6715: PUSH
6716: LD_LOC 8
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: PPUSH
6731: CALL_OW 423
6735: GO 6661
6737: POP
6738: POP
// end ;
6739: LD_VAR 0 1
6743: RET
// every 0 0$0.1 marked 45 do var un ;
6744: GO 6746
6746: DISABLE
6747: LD_INT 0
6749: PPUSH
// begin if not def_morale_flags then
6750: LD_EXP 8
6754: NOT
6755: IFFALSE 6759
// exit ;
6757: GO 6836
// if not morale_decreasing_time then
6759: LD_EXP 20
6763: NOT
6764: IFFALSE 6768
// exit ;
6766: GO 6836
// strength = 100 ;
6768: LD_ADDR_LOC 8
6772: PUSH
6773: LD_INT 100
6775: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6776: LD_EXP 20
6780: PPUSH
6781: CALL_OW 67
// strength := strength - 1 ;
6785: LD_ADDR_LOC 8
6789: PUSH
6790: LD_LOC 8
6794: PUSH
6795: LD_INT 1
6797: MINUS
6798: ST_TO_ADDR
// Update_Flags ;
6799: CALL 6647 0 0
// until not strength ;
6803: LD_LOC 8
6807: NOT
6808: IFFALSE 6776
// for un in battle_flags_id do
6810: LD_ADDR_VAR 0 1
6814: PUSH
6815: LD_EXP 47
6819: PUSH
6820: FOR_IN
6821: IFFALSE 6834
// KillBattleFlag ( un ) ;
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 419
6832: GO 6820
6834: POP
6835: POP
// end ;
6836: PPOPN 1
6838: END
// every 0 0$1 trigger CanWinLoose marked 44 do var l1 , l2 ;
6839: CALL 6583 0 0
6843: IFFALSE 7278
6845: GO 6847
6847: DISABLE
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
// begin if not ( game_type in [ 11 , 12 ] ) then
6852: LD_EXP 1
6856: PUSH
6857: LD_INT 11
6859: PUSH
6860: LD_INT 12
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: IN
6867: NOT
6868: IFFALSE 6872
// exit ;
6870: GO 7278
// if not Your_Side then
6872: LD_OWVAR 2
6876: NOT
6877: IFFALSE 6882
// begin enable ;
6879: ENABLE
// exit ;
6880: GO 7278
// end ; l1 := UnitFilter ( sci1 , [ f_alive ] ) ;
6882: LD_ADDR_VAR 0 1
6886: PUSH
6887: LD_EXP 28
6891: PPUSH
6892: LD_INT 51
6894: PUSH
6895: EMPTY
6896: LIST
6897: PPUSH
6898: CALL_OW 72
6902: ST_TO_ADDR
// l2 := UnitFilter ( sci2 , [ f_alive ] ) ;
6903: LD_ADDR_VAR 0 2
6907: PUSH
6908: LD_EXP 29
6912: PPUSH
6913: LD_INT 51
6915: PUSH
6916: EMPTY
6917: LIST
6918: PPUSH
6919: CALL_OW 72
6923: ST_TO_ADDR
// if not l1 and not l2 then
6924: LD_VAR 0 1
6928: NOT
6929: PUSH
6930: LD_VAR 0 2
6934: NOT
6935: AND
6936: IFFALSE 6953
// begin wait ( 0 0$3 ) ;
6938: LD_INT 105
6940: PPUSH
6941: CALL_OW 67
// YouLostInMultiplayer ;
6945: CALL_OW 107
// exit ;
6949: GO 7278
// end else
6951: GO 7277
// if not l1 then
6953: LD_VAR 0 1
6957: NOT
6958: IFFALSE 7030
// begin if Side_teams [ your_side ] = 1 then
6960: LD_EXP 33
6964: PUSH
6965: LD_OWVAR 2
6969: ARRAY
6970: PUSH
6971: LD_INT 1
6973: EQUAL
6974: IFFALSE 7003
// begin CenterOnXY ( lastxlost , lastylost ) ;
6976: LD_LOC 11
6980: PPUSH
6981: LD_LOC 12
6985: PPUSH
6986: CALL_OW 84
// wait ( 0 0$3 ) ;
6990: LD_INT 105
6992: PPUSH
6993: CALL_OW 67
// YouLostInMultiplayer ;
6997: CALL_OW 107
// end else
7001: GO 7028
// begin CenterOnXY ( lastxwin , lastywin ) ;
7003: LD_LOC 9
7007: PPUSH
7008: LD_LOC 10
7012: PPUSH
7013: CALL_OW 84
// wait ( 0 0$3 ) ;
7017: LD_INT 105
7019: PPUSH
7020: CALL_OW 67
// YouWinInMultiplayer ;
7024: CALL_OW 106
// end end else
7028: GO 7277
// if not l2 then
7030: LD_VAR 0 2
7034: NOT
7035: IFFALSE 7107
// begin if Side_teams [ your_side ] = 2 then
7037: LD_EXP 33
7041: PUSH
7042: LD_OWVAR 2
7046: ARRAY
7047: PUSH
7048: LD_INT 2
7050: EQUAL
7051: IFFALSE 7080
// begin CenterOnXY ( lastxlost , lastylost ) ;
7053: LD_LOC 11
7057: PPUSH
7058: LD_LOC 12
7062: PPUSH
7063: CALL_OW 84
// wait ( 0 0$3 ) ;
7067: LD_INT 105
7069: PPUSH
7070: CALL_OW 67
// YouLostInMultiplayer ;
7074: CALL_OW 107
// end else
7078: GO 7105
// begin CenterOnXY ( lastxwin , lastywin ) ;
7080: LD_LOC 9
7084: PPUSH
7085: LD_LOC 10
7089: PPUSH
7090: CALL_OW 84
// wait ( 0 0$3 ) ;
7094: LD_INT 105
7096: PPUSH
7097: CALL_OW 67
// YouWinInMultiplayer ;
7101: CALL_OW 106
// end end else
7105: GO 7277
// if Side_teams [ your_side ] = 1 then
7107: LD_EXP 33
7111: PUSH
7112: LD_OWVAR 2
7116: ARRAY
7117: PUSH
7118: LD_INT 1
7120: EQUAL
7121: IFFALSE 7201
// begin lastxwin := GetX ( l2 [ 1 ] ) ;
7123: LD_ADDR_LOC 9
7127: PUSH
7128: LD_VAR 0 2
7132: PUSH
7133: LD_INT 1
7135: ARRAY
7136: PPUSH
7137: CALL_OW 250
7141: ST_TO_ADDR
// lastywin := GetY ( l2 [ 1 ] ) ;
7142: LD_ADDR_LOC 10
7146: PUSH
7147: LD_VAR 0 2
7151: PUSH
7152: LD_INT 1
7154: ARRAY
7155: PPUSH
7156: CALL_OW 251
7160: ST_TO_ADDR
// lastxlost := GetX ( l1 [ 1 ] ) ;
7161: LD_ADDR_LOC 11
7165: PUSH
7166: LD_VAR 0 1
7170: PUSH
7171: LD_INT 1
7173: ARRAY
7174: PPUSH
7175: CALL_OW 250
7179: ST_TO_ADDR
// lastylost := GetY ( l1 [ 1 ] ) ;
7180: LD_ADDR_LOC 12
7184: PUSH
7185: LD_VAR 0 1
7189: PUSH
7190: LD_INT 1
7192: ARRAY
7193: PPUSH
7194: CALL_OW 251
7198: ST_TO_ADDR
// end else
7199: GO 7277
// begin lastxwin := GetX ( l1 [ 1 ] ) ;
7201: LD_ADDR_LOC 9
7205: PUSH
7206: LD_VAR 0 1
7210: PUSH
7211: LD_INT 1
7213: ARRAY
7214: PPUSH
7215: CALL_OW 250
7219: ST_TO_ADDR
// lastywin := GetY ( l1 [ 1 ] ) ;
7220: LD_ADDR_LOC 10
7224: PUSH
7225: LD_VAR 0 1
7229: PUSH
7230: LD_INT 1
7232: ARRAY
7233: PPUSH
7234: CALL_OW 251
7238: ST_TO_ADDR
// lastxlost := GetX ( l2 [ 1 ] ) ;
7239: LD_ADDR_LOC 11
7243: PUSH
7244: LD_VAR 0 2
7248: PUSH
7249: LD_INT 1
7251: ARRAY
7252: PPUSH
7253: CALL_OW 250
7257: ST_TO_ADDR
// lastylost := GetY ( l2 [ 1 ] ) ;
7258: LD_ADDR_LOC 12
7262: PUSH
7263: LD_VAR 0 2
7267: PUSH
7268: LD_INT 1
7270: ARRAY
7271: PPUSH
7272: CALL_OW 251
7276: ST_TO_ADDR
// end ; enable ;
7277: ENABLE
// end ;
7278: PPOPN 2
7280: END
// every 0 0$2 trigger CanWinLoose marked 44 do var win , i ;
7281: CALL 6583 0 0
7285: IFFALSE 7567
7287: GO 7289
7289: DISABLE
7290: LD_INT 0
7292: PPUSH
7293: PPUSH
// begin if game_type in [ 11 , 12 ] then
7294: LD_EXP 1
7298: PUSH
7299: LD_INT 11
7301: PUSH
7302: LD_INT 12
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: IN
7309: IFFALSE 7313
// exit ;
7311: GO 7567
// if your_side then
7313: LD_OWVAR 2
7317: IFFALSE 7566
// begin if not filterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
7319: LD_INT 22
7321: PUSH
7322: LD_OWVAR 2
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 2
7333: PUSH
7334: LD_INT 21
7336: PUSH
7337: LD_INT 1
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PUSH
7344: LD_INT 30
7346: PUSH
7347: LD_INT 0
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PUSH
7354: LD_INT 30
7356: PUSH
7357: LD_INT 1
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PPUSH
7374: CALL_OW 69
7378: NOT
7379: IFFALSE 7409
// begin wait ( 0 0$3 ) ;
7381: LD_INT 105
7383: PPUSH
7384: CALL_OW 67
// if IAmServer then
7388: CALL_OW 518
7392: IFFALSE 7401
// wait ( 0 0$1 ) ;
7394: LD_INT 35
7396: PPUSH
7397: CALL_OW 67
// YouLostInMultiplayer ;
7401: CALL_OW 107
// exit ;
7405: GO 7567
// end else
7407: GO 7566
// begin win := true ;
7409: LD_ADDR_VAR 0 1
7413: PUSH
7414: LD_INT 1
7416: ST_TO_ADDR
// for i := 1 to Side_positions do
7417: LD_ADDR_VAR 0 2
7421: PUSH
7422: DOUBLE
7423: LD_INT 1
7425: DEC
7426: ST_TO_ADDR
7427: LD_EXP 36
7431: PUSH
7432: FOR_TO
7433: IFFALSE 7517
// if Side_positions [ i ] and ( i <> your_side ) then
7435: LD_EXP 36
7439: PUSH
7440: LD_VAR 0 2
7444: ARRAY
7445: PUSH
7446: LD_VAR 0 2
7450: PUSH
7451: LD_OWVAR 2
7455: NONEQUAL
7456: AND
7457: IFFALSE 7515
// begin if MultiplayerSideAlive ( i ) then
7459: LD_VAR 0 2
7463: PPUSH
7464: CALL_OW 108
7468: IFFALSE 7515
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7470: LD_EXP 33
7474: PUSH
7475: LD_VAR 0 2
7479: ARRAY
7480: NOT
7481: PUSH
7482: LD_EXP 33
7486: PUSH
7487: LD_VAR 0 2
7491: ARRAY
7492: PUSH
7493: LD_EXP 33
7497: PUSH
7498: LD_OWVAR 2
7502: ARRAY
7503: NONEQUAL
7504: OR
7505: IFFALSE 7515
// win := false ;
7507: LD_ADDR_VAR 0 1
7511: PUSH
7512: LD_INT 0
7514: ST_TO_ADDR
// end ;
7515: GO 7432
7517: POP
7518: POP
// if win then
7519: LD_VAR 0 1
7523: IFFALSE 7566
// begin wait ( 0 0$3 ) ;
7525: LD_INT 105
7527: PPUSH
7528: CALL_OW 67
// if IAmServer then
7532: CALL_OW 518
7536: IFFALSE 7545
// wait ( 0 0$1 ) ;
7538: LD_INT 35
7540: PPUSH
7541: CALL_OW 67
// SA_Win ( Side_Nations [ Your_side ] ) ;
7545: LD_EXP 37
7549: PUSH
7550: LD_OWVAR 2
7554: ARRAY
7555: PPUSH
7556: CALL 10327 0 1
// YouWinInMultiplayer ;
7560: CALL_OW 106
// exit ;
7564: GO 7567
// end ; end ; end ; enable ;
7566: ENABLE
// end ; end_of_file
7567: PPOPN 2
7569: END
// every 10 do
7570: GO 7572
7572: DISABLE
// begin if not multiplayer then
7573: LD_OWVAR 4
7577: NOT
7578: IFFALSE 7582
// exit ;
7580: GO 7639
// if ( tick >= 100 ) then
7582: LD_OWVAR 1
7586: PUSH
7587: LD_INT 100
7589: GREATEREQUAL
7590: IFFALSE 7610
// if tick mod 20 = 0 then
7592: LD_OWVAR 1
7596: PUSH
7597: LD_INT 20
7599: MOD
7600: PUSH
7601: LD_INT 0
7603: EQUAL
7604: IFFALSE 7610
// MultiplayerCRC ;
7606: CALL_OW 361
// if ( tick >= 100 ) then
7610: LD_OWVAR 1
7614: PUSH
7615: LD_INT 100
7617: GREATEREQUAL
7618: IFFALSE 7638
// if tick mod 30 = 0 then
7620: LD_OWVAR 1
7624: PUSH
7625: LD_INT 30
7627: MOD
7628: PUSH
7629: LD_INT 0
7631: EQUAL
7632: IFFALSE 7638
// DebugLogAll ;
7634: CALL_OW 360
// enable ;
7638: ENABLE
// end ; end_of_file
7639: END
// export function DE_Triggers ; begin
7640: LD_INT 0
7642: PPUSH
// disable ( 44 ) ;
7643: LD_INT 44
7645: DISABLE_MARKED
// disable ( 45 ) ;
7646: LD_INT 45
7648: DISABLE_MARKED
// disable ( 98 ) ;
7649: LD_INT 98
7651: DISABLE_MARKED
// disable ( 99 ) ;
7652: LD_INT 99
7654: DISABLE_MARKED
// end ;
7655: LD_VAR 0 1
7659: RET
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7660: LD_VAR 0 1
7664: PPUSH
7665: LD_VAR 0 2
7669: PPUSH
7670: LD_VAR 0 3
7674: PPUSH
7675: LD_OWVAR 2
7679: PPUSH
7680: CALL 10285 0 4
7684: PPOPN 3
7686: END
// export function Init_Win_Condition ; begin
7687: LD_INT 0
7689: PPUSH
// if Team_Game then
7690: LD_EXP 41
7694: IFFALSE 7701
// enable ( 98 ) else
7696: LD_INT 98
7698: ENABLE_MARKED
7699: GO 7704
// enable ( 99 ) ;
7701: LD_INT 99
7703: ENABLE_MARKED
// end ;
7704: LD_VAR 0 1
7708: RET
// every 0 0$2 trigger CanWinLoose marked 98 do var win , i ;
7709: CALL 6583 0 0
7713: IFFALSE 7935
7715: GO 7717
7717: DISABLE
7718: LD_INT 0
7720: PPUSH
7721: PPUSH
// begin if your_side then
7722: LD_OWVAR 2
7726: IFFALSE 7934
// if not FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
7728: LD_INT 22
7730: PUSH
7731: LD_OWVAR 2
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 2
7742: PUSH
7743: LD_INT 21
7745: PUSH
7746: LD_INT 1
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: LD_INT 30
7755: PUSH
7756: LD_INT 0
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 30
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PPUSH
7783: CALL_OW 69
7787: NOT
7788: IFFALSE 7805
// begin wait ( 0 0$3 ) ;
7790: LD_INT 105
7792: PPUSH
7793: CALL_OW 67
// YouLostInMultiplayer ;
7797: CALL_OW 107
// exit ;
7801: GO 7935
// end else
7803: GO 7934
// begin win := true ;
7805: LD_ADDR_VAR 0 1
7809: PUSH
7810: LD_INT 1
7812: ST_TO_ADDR
// for i = 1 to Side_positions do
7813: LD_ADDR_VAR 0 2
7817: PUSH
7818: DOUBLE
7819: LD_INT 1
7821: DEC
7822: ST_TO_ADDR
7823: LD_EXP 36
7827: PUSH
7828: FOR_TO
7829: IFFALSE 7913
// if Side_positions [ i ] and ( i <> your_side ) and MultiplayerSideAlive ( i ) then
7831: LD_EXP 36
7835: PUSH
7836: LD_VAR 0 2
7840: ARRAY
7841: PUSH
7842: LD_VAR 0 2
7846: PUSH
7847: LD_OWVAR 2
7851: NONEQUAL
7852: AND
7853: PUSH
7854: LD_VAR 0 2
7858: PPUSH
7859: CALL_OW 108
7863: AND
7864: IFFALSE 7911
// begin if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7866: LD_EXP 33
7870: PUSH
7871: LD_VAR 0 2
7875: ARRAY
7876: NOT
7877: PUSH
7878: LD_EXP 33
7882: PUSH
7883: LD_VAR 0 2
7887: ARRAY
7888: PUSH
7889: LD_EXP 33
7893: PUSH
7894: LD_OWVAR 2
7898: ARRAY
7899: NONEQUAL
7900: OR
7901: IFFALSE 7911
// win := false ;
7903: LD_ADDR_VAR 0 1
7907: PUSH
7908: LD_INT 0
7910: ST_TO_ADDR
// end ;
7911: GO 7828
7913: POP
7914: POP
// if win then
7915: LD_VAR 0 1
7919: IFFALSE 7934
// begin wait ( 0 0$3 ) ;
7921: LD_INT 105
7923: PPUSH
7924: CALL_OW 67
// YouWinInMultiplayer ;
7928: CALL_OW 106
// exit ;
7932: GO 7935
// end ; end ; enable ;
7934: ENABLE
// end ;
7935: PPOPN 2
7937: END
// every 0 0$3 trigger CanWinLoose marked 99 do var win , i ;
7938: CALL 6583 0 0
7942: IFFALSE 8138
7944: GO 7946
7946: DISABLE
7947: LD_INT 0
7949: PPUSH
7950: PPUSH
// begin if not FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
7951: LD_INT 22
7953: PUSH
7954: LD_OWVAR 2
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 2
7965: PUSH
7966: LD_INT 21
7968: PUSH
7969: LD_INT 1
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 30
7978: PUSH
7979: LD_INT 0
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: LD_INT 30
7988: PUSH
7989: LD_INT 1
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PPUSH
8006: CALL_OW 69
8010: NOT
8011: IFFALSE 8028
// begin wait ( 0 0$3 ) ;
8013: LD_INT 105
8015: PPUSH
8016: CALL_OW 67
// YouLostInMultiplayer ;
8020: CALL_OW 107
// exit ;
8024: GO 8138
// end else
8026: GO 8137
// begin win := true ;
8028: LD_ADDR_VAR 0 1
8032: PUSH
8033: LD_INT 1
8035: ST_TO_ADDR
// for i = 1 to Side_Positions do
8036: LD_ADDR_VAR 0 2
8040: PUSH
8041: DOUBLE
8042: LD_INT 1
8044: DEC
8045: ST_TO_ADDR
8046: LD_EXP 36
8050: PUSH
8051: FOR_TO
8052: IFFALSE 8116
// if Side_Positions [ i ] and ( i <> your_side ) and MultiplayerSideAlive ( i ) then
8054: LD_EXP 36
8058: PUSH
8059: LD_VAR 0 2
8063: ARRAY
8064: PUSH
8065: LD_VAR 0 2
8069: PUSH
8070: LD_OWVAR 2
8074: NONEQUAL
8075: AND
8076: PUSH
8077: LD_VAR 0 2
8081: PPUSH
8082: CALL_OW 108
8086: AND
8087: IFFALSE 8114
// if not AlliedSides ( i , your_side ) then
8089: LD_VAR 0 2
8093: PPUSH
8094: LD_OWVAR 2
8098: PPUSH
8099: CALL 8141 0 2
8103: NOT
8104: IFFALSE 8114
// win := false ;
8106: LD_ADDR_VAR 0 1
8110: PUSH
8111: LD_INT 0
8113: ST_TO_ADDR
8114: GO 8051
8116: POP
8117: POP
// if win then
8118: LD_VAR 0 1
8122: IFFALSE 8137
// begin wait ( 0 0$3 ) ;
8124: LD_INT 105
8126: PPUSH
8127: CALL_OW 67
// YouWinInMultiplayer ;
8131: CALL_OW 106
// exit ;
8135: GO 8138
// end ; end ; enable ;
8137: ENABLE
// end ;
8138: PPOPN 2
8140: END
// function AlliedSides ( i , j ) ; var vysledek ; begin
8141: LD_INT 0
8143: PPUSH
8144: PPUSH
// vysledek := false ;
8145: LD_ADDR_VAR 0 4
8149: PUSH
8150: LD_INT 0
8152: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_VAR 0 2
8162: PPUSH
8163: CALL_OW 81
8167: PUSH
8168: LD_INT 1
8170: EQUAL
8171: PUSH
8172: LD_VAR 0 2
8176: PPUSH
8177: LD_VAR 0 1
8181: PPUSH
8182: CALL_OW 81
8186: PUSH
8187: LD_INT 1
8189: EQUAL
8190: AND
8191: PUSH
8192: LD_VAR 0 1
8196: PPUSH
8197: CALL_OW 83
8201: AND
8202: PUSH
8203: LD_VAR 0 2
8207: PPUSH
8208: CALL_OW 83
8212: AND
8213: IFFALSE 8223
// vysledek := true ;
8215: LD_ADDR_VAR 0 4
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// result := vysledek ;
8223: LD_ADDR_VAR 0 3
8227: PUSH
8228: LD_VAR 0 4
8232: ST_TO_ADDR
// end ; end_of_file
8233: LD_VAR 0 3
8237: RET
// export function DisplayNames ; var i ; begin
8238: LD_INT 0
8240: PPUSH
8241: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
8242: LD_ADDR_VAR 0 2
8246: PUSH
8247: LD_INT 2
8249: PUSH
8250: LD_INT 30
8252: PUSH
8253: LD_INT 0
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 30
8262: PUSH
8263: LD_INT 1
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 69
8279: PUSH
8280: FOR_IN
8281: IFFALSE 8308
// SetBName ( i , @ & GetSide ( i ) ) ;
8283: LD_VAR 0 2
8287: PPUSH
8288: LD_STRING @
8290: PUSH
8291: LD_VAR 0 2
8295: PPUSH
8296: CALL_OW 255
8300: STR
8301: PPUSH
8302: CALL_OW 500
8306: GO 8280
8308: POP
8309: POP
// end ;
8310: LD_VAR 0 1
8314: RET
// every 0 0$2 do
8315: GO 8317
8317: DISABLE
// DisplayNames ;
8318: CALL 8238 0 0
8322: END
// on BuildingComplete ( b ) do DisplayNames ;
8323: CALL 8238 0 0
8327: PPOPN 1
8329: END
// on BuildingStarted ( b , h ) do DisplayNames ;
8330: CALL 8238 0 0
8334: PPOPN 2
8336: END
// on BuildingCaptured ( b , o , e ) do DisplayNames ; end_of_file
8337: CALL 8238 0 0
8341: PPOPN 3
8343: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
8344: LD_INT 0
8346: PPUSH
8347: PPUSH
// AllStrings := [ #gamespeed , game_speed - 4 ] ^ [ #Multi1x1-Time , tick ] ;
8348: LD_ADDR_VAR 0 2
8352: PUSH
8353: LD_STRING #gamespeed
8355: PUSH
8356: LD_OWVAR 65
8360: PUSH
8361: LD_INT 4
8363: MINUS
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: LD_STRING #Multi1x1-Time
8371: PUSH
8372: LD_OWVAR 1
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: ADD
8381: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8382: LD_INT 0
8384: PUSH
8385: LD_EXP 25
8389: PUSH
8390: LD_OWVAR 1
8394: MINUS
8395: LESSEQUAL
8396: IFFALSE 8427
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8398: LD_ADDR_VAR 0 2
8402: PUSH
8403: LD_VAR 0 2
8407: PUSH
8408: LD_STRING #allowedsibbomb
8410: PUSH
8411: LD_EXP 25
8415: PUSH
8416: LD_OWVAR 1
8420: MINUS
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: ADD
8426: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8427: LD_INT 0
8429: PUSH
8430: LD_EXP 51
8434: PUSH
8435: LD_OWVAR 1
8439: MINUS
8440: LESSEQUAL
8441: IFFALSE 8472
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
8443: LD_ADDR_VAR 0 2
8447: PUSH
8448: LD_VAR 0 2
8452: PUSH
8453: LD_STRING #builduptime
8455: PUSH
8456: LD_EXP 51
8460: PUSH
8461: LD_OWVAR 1
8465: MINUS
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: ADD
8471: ST_TO_ADDR
// Display_Strings := AllStrings ;
8472: LD_ADDR_OWVAR 47
8476: PUSH
8477: LD_VAR 0 2
8481: ST_TO_ADDR
// end ;
8482: LD_VAR 0 1
8486: RET
// every 0 0$1 do
8487: GO 8489
8489: DISABLE
// begin ShowTimer ;
8490: CALL 8344 0 0
// enable ;
8494: ENABLE
// end ; end_of_file
8495: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
8496: LD_INT 0
8498: PPUSH
8499: PPUSH
8500: PPUSH
// BuildUpTime_Delay = 0 ;
8501: LD_ADDR_EXP 51
8505: PUSH
8506: LD_INT 0
8508: ST_TO_ADDR
// if not def_builduptime then
8509: LD_EXP 12
8513: NOT
8514: IFFALSE 8518
// exit ;
8516: GO 8701
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
8518: LD_ADDR_EXP 51
8522: PUSH
8523: LD_INT 8400
8525: PUSH
8526: LD_INT 2100
8528: PUSH
8529: LD_EXP 12
8533: MUL
8534: PLUS
8535: ST_TO_ADDR
// BuildUpTimeActive := true ;
8536: LD_ADDR_EXP 50
8540: PUSH
8541: LD_INT 1
8543: ST_TO_ADDR
// for i := 1 to 8 do
8544: LD_ADDR_VAR 0 2
8548: PUSH
8549: DOUBLE
8550: LD_INT 1
8552: DEC
8553: ST_TO_ADDR
8554: LD_INT 8
8556: PUSH
8557: FOR_TO
8558: IFFALSE 8699
// if Side_Positions [ i ] then
8560: LD_EXP 36
8564: PUSH
8565: LD_VAR 0 2
8569: ARRAY
8570: IFFALSE 8697
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
8572: LD_EXP 49
8576: PUSH
8577: LD_EXP 36
8581: PUSH
8582: LD_VAR 0 2
8586: ARRAY
8587: ARRAY
8588: PPUSH
8589: LD_INT 5
8591: PPUSH
8592: CALL_OW 424
// for j := 1 to 8 do
8596: LD_ADDR_VAR 0 3
8600: PUSH
8601: DOUBLE
8602: LD_INT 1
8604: DEC
8605: ST_TO_ADDR
8606: LD_INT 8
8608: PUSH
8609: FOR_TO
8610: IFFALSE 8695
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8612: LD_EXP 36
8616: PUSH
8617: LD_VAR 0 3
8621: ARRAY
8622: PUSH
8623: LD_EXP 33
8627: PUSH
8628: LD_VAR 0 2
8632: ARRAY
8633: PUSH
8634: LD_EXP 33
8638: PUSH
8639: LD_VAR 0 3
8643: ARRAY
8644: NONEQUAL
8645: PUSH
8646: LD_EXP 41
8650: NOT
8651: PUSH
8652: LD_VAR 0 2
8656: PUSH
8657: LD_VAR 0 3
8661: NONEQUAL
8662: AND
8663: OR
8664: AND
8665: IFFALSE 8693
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8667: LD_VAR 0 3
8671: PPUSH
8672: LD_EXP 49
8676: PUSH
8677: LD_EXP 36
8681: PUSH
8682: LD_VAR 0 2
8686: ARRAY
8687: ARRAY
8688: PPUSH
8689: CALL_OW 333
8693: GO 8609
8695: POP
8696: POP
// end ;
8697: GO 8557
8699: POP
8700: POP
// end ;
8701: LD_VAR 0 1
8705: RET
// export function EndBuildUp ; var i , j ; begin
8706: LD_INT 0
8708: PPUSH
8709: PPUSH
8710: PPUSH
// BuildUpTimeActive := false ;
8711: LD_ADDR_EXP 50
8715: PUSH
8716: LD_INT 0
8718: ST_TO_ADDR
// for i := 1 to 8 do
8719: LD_ADDR_VAR 0 2
8723: PUSH
8724: DOUBLE
8725: LD_INT 1
8727: DEC
8728: ST_TO_ADDR
8729: LD_INT 8
8731: PUSH
8732: FOR_TO
8733: IFFALSE 8874
// if Side_Positions [ i ] then
8735: LD_EXP 36
8739: PUSH
8740: LD_VAR 0 2
8744: ARRAY
8745: IFFALSE 8872
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
8747: LD_EXP 49
8751: PUSH
8752: LD_EXP 36
8756: PUSH
8757: LD_VAR 0 2
8761: ARRAY
8762: ARRAY
8763: PPUSH
8764: LD_INT 0
8766: PPUSH
8767: CALL_OW 424
// for j := 1 to 8 do
8771: LD_ADDR_VAR 0 3
8775: PUSH
8776: DOUBLE
8777: LD_INT 1
8779: DEC
8780: ST_TO_ADDR
8781: LD_INT 8
8783: PUSH
8784: FOR_TO
8785: IFFALSE 8870
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8787: LD_EXP 36
8791: PUSH
8792: LD_VAR 0 3
8796: ARRAY
8797: PUSH
8798: LD_EXP 33
8802: PUSH
8803: LD_VAR 0 2
8807: ARRAY
8808: PUSH
8809: LD_EXP 33
8813: PUSH
8814: LD_VAR 0 3
8818: ARRAY
8819: NONEQUAL
8820: PUSH
8821: LD_EXP 41
8825: NOT
8826: PUSH
8827: LD_VAR 0 2
8831: PUSH
8832: LD_VAR 0 3
8836: NONEQUAL
8837: AND
8838: OR
8839: AND
8840: IFFALSE 8868
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8842: LD_VAR 0 3
8846: PPUSH
8847: LD_EXP 49
8851: PUSH
8852: LD_EXP 36
8856: PUSH
8857: LD_VAR 0 2
8861: ARRAY
8862: ARRAY
8863: PPUSH
8864: CALL_OW 334
8868: GO 8784
8870: POP
8871: POP
// end ;
8872: GO 8732
8874: POP
8875: POP
// end ;
8876: LD_VAR 0 1
8880: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
8881: LD_EXP 50
8885: IFFALSE 9060
8887: GO 8889
8889: DISABLE
8890: LD_INT 0
8892: PPUSH
8893: PPUSH
// begin for i := 1 to 8 do
8894: LD_ADDR_VAR 0 1
8898: PUSH
8899: DOUBLE
8900: LD_INT 1
8902: DEC
8903: ST_TO_ADDR
8904: LD_INT 8
8906: PUSH
8907: FOR_TO
8908: IFFALSE 9057
// if Side_Positions [ i ] then
8910: LD_EXP 36
8914: PUSH
8915: LD_VAR 0 1
8919: ARRAY
8920: IFFALSE 9055
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8922: LD_ADDR_VAR 0 2
8926: PUSH
8927: LD_EXP 49
8931: PUSH
8932: LD_EXP 36
8936: PUSH
8937: LD_VAR 0 1
8941: ARRAY
8942: ARRAY
8943: PPUSH
8944: LD_INT 2
8946: PUSH
8947: LD_INT 21
8949: PUSH
8950: LD_INT 1
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PUSH
8957: LD_INT 21
8959: PUSH
8960: LD_INT 2
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: LIST
8971: PUSH
8972: LD_INT 22
8974: PUSH
8975: LD_OWVAR 2
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PPUSH
8988: CALL_OW 70
8992: PUSH
8993: FOR_IN
8994: IFFALSE 9053
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
8996: LD_EXP 33
9000: PUSH
9001: LD_VAR 0 1
9005: ARRAY
9006: PUSH
9007: LD_EXP 33
9011: PUSH
9012: LD_OWVAR 2
9016: ARRAY
9017: NONEQUAL
9018: PUSH
9019: LD_EXP 41
9023: NOT
9024: PUSH
9025: LD_VAR 0 1
9029: PUSH
9030: LD_OWVAR 2
9034: NONEQUAL
9035: AND
9036: OR
9037: IFFALSE 9051
// ComMoveToArea ( un , BuildUpEscape ) ;
9039: LD_VAR 0 2
9043: PPUSH
9044: LD_INT 19
9046: PPUSH
9047: CALL_OW 113
9051: GO 8993
9053: POP
9054: POP
9055: GO 8907
9057: POP
9058: POP
// enable ;
9059: ENABLE
// end ;
9060: PPOPN 2
9062: END
// every 0 0$1 trigger def_builduptime do
9063: LD_EXP 12
9067: IFFALSE 9093
9069: GO 9071
9071: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
9072: LD_INT 8400
9074: PUSH
9075: LD_EXP 12
9079: PUSH
9080: LD_INT 2100
9082: MUL
9083: PLUS
9084: PPUSH
9085: CALL_OW 67
// EndBuildUp ;
9089: CALL 8706 0 0
// end ; end_of_file
9093: END
// export ObnovCas , ObnovZpozdeni ; export function SetRespawningTime ( minBTime , maxBTime , MinDelay , MaxDelay ) ; var k ; begin
9094: LD_INT 0
9096: PPUSH
9097: PPUSH
// k = Rand ( minBTime , maxBTime ) ;
9098: LD_ADDR_VAR 0 6
9102: PUSH
9103: LD_VAR 0 1
9107: PPUSH
9108: LD_VAR 0 2
9112: PPUSH
9113: CALL_OW 12
9117: ST_TO_ADDR
// ObnovCas = [ k , k , k , k , k , k , k , k ] ;
9118: LD_ADDR_EXP 52
9122: PUSH
9123: LD_VAR 0 6
9127: PUSH
9128: LD_VAR 0 6
9132: PUSH
9133: LD_VAR 0 6
9137: PUSH
9138: LD_VAR 0 6
9142: PUSH
9143: LD_VAR 0 6
9147: PUSH
9148: LD_VAR 0 6
9152: PUSH
9153: LD_VAR 0 6
9157: PUSH
9158: LD_VAR 0 6
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: ST_TO_ADDR
// k = Rand ( minDelay , MaxDelay ) ;
9173: LD_ADDR_VAR 0 6
9177: PUSH
9178: LD_VAR 0 3
9182: PPUSH
9183: LD_VAR 0 4
9187: PPUSH
9188: CALL_OW 12
9192: ST_TO_ADDR
// ObnovZpozdeni = k ;
9193: LD_ADDR_EXP 53
9197: PUSH
9198: LD_VAR 0 6
9202: ST_TO_ADDR
// end ;
9203: LD_VAR 0 5
9207: RET
// export unit_list ; export function ObnovCloveka ( side , nation , restored ) ; var building_list , b , n , un , k , i , base_skills , speed , def ; begin
9208: LD_INT 0
9210: PPUSH
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
9215: PPUSH
9216: PPUSH
9217: PPUSH
9218: PPUSH
9219: PPUSH
// if ObnovCas [ side ] = 0 then
9220: LD_EXP 52
9224: PUSH
9225: LD_VAR 0 1
9229: ARRAY
9230: PUSH
9231: LD_INT 0
9233: EQUAL
9234: IFFALSE 9238
// exit ;
9236: GO 9863
// uc_nation := nation ;
9238: LD_ADDR_OWVAR 21
9242: PUSH
9243: LD_VAR 0 2
9247: ST_TO_ADDR
// uc_side := side ;
9248: LD_ADDR_OWVAR 20
9252: PUSH
9253: LD_VAR 0 1
9257: ST_TO_ADDR
// uc_direction := Rand ( 0 , 5 ) ;
9258: LD_ADDR_OWVAR 24
9262: PUSH
9263: LD_INT 0
9265: PPUSH
9266: LD_INT 5
9268: PPUSH
9269: CALL_OW 12
9273: ST_TO_ADDR
// if restored then
9274: LD_VAR 0 3
9278: IFFALSE 9361
// begin hc_class = GetClass ( restored ) ;
9280: LD_ADDR_OWVAR 28
9284: PUSH
9285: LD_VAR 0 3
9289: PPUSH
9290: CALL_OW 257
9294: ST_TO_ADDR
// hc_attr = [ GetAttr ( restored , attr_stamina ) , GetAttr ( restored , attr_speed ) ] ;
9295: LD_ADDR_OWVAR 29
9299: PUSH
9300: LD_VAR 0 3
9304: PPUSH
9305: LD_INT 1
9307: PPUSH
9308: CALL_OW 260
9312: PUSH
9313: LD_VAR 0 3
9317: PPUSH
9318: LD_INT 2
9320: PPUSH
9321: CALL_OW 260
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: ST_TO_ADDR
// if hc_class in [ class_sniper , class_bazooker , class_mortar ] then
9330: LD_OWVAR 28
9334: PUSH
9335: LD_INT 5
9337: PUSH
9338: LD_INT 9
9340: PUSH
9341: LD_INT 8
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: LIST
9348: IN
9349: IFFALSE 9359
// hc_class = class_soldier ;
9351: LD_ADDR_OWVAR 28
9355: PUSH
9356: LD_INT 1
9358: ST_TO_ADDR
// end else
9359: GO 9370
// randomHumanStats ( initial_level ) ;
9361: LD_EXP 16
9365: PPUSH
9366: CALL 10794 0 1
// hc_importance := 0 ;
9370: LD_ADDR_OWVAR 32
9374: PUSH
9375: LD_INT 0
9377: ST_TO_ADDR
// hc_gallery :=  ;
9378: LD_ADDR_OWVAR 33
9382: PUSH
9383: LD_STRING 
9385: ST_TO_ADDR
// hc_face_number := 0 ;
9386: LD_ADDR_OWVAR 34
9390: PUSH
9391: LD_INT 0
9393: ST_TO_ADDR
// un := CreateHuman ;
9394: LD_ADDR_VAR 0 8
9398: PUSH
9399: CALL_OW 44
9403: ST_TO_ADDR
// if restored then
9404: LD_VAR 0 3
9408: IFFALSE 9424
// CopySkills ( restored , un ) ;
9410: LD_VAR 0 3
9414: PPUSH
9415: LD_VAR 0 8
9419: PPUSH
9420: CALL_OW 510
// k = ObnovCas [ side ] + ObnovZpozdeni ;
9424: LD_ADDR_VAR 0 9
9428: PUSH
9429: LD_EXP 52
9433: PUSH
9434: LD_VAR 0 1
9438: ARRAY
9439: PUSH
9440: LD_EXP 53
9444: PLUS
9445: ST_TO_ADDR
// ObnovCas = Replace ( ObnovCas , side , k ) ;
9446: LD_ADDR_EXP 52
9450: PUSH
9451: LD_EXP 52
9455: PPUSH
9456: LD_VAR 0 1
9460: PPUSH
9461: LD_VAR 0 9
9465: PPUSH
9466: CALL_OW 1
9470: ST_TO_ADDR
// wait ( ObnovCas [ side ] - ObnovZpozdeni ) ;
9471: LD_EXP 52
9475: PUSH
9476: LD_VAR 0 1
9480: ARRAY
9481: PUSH
9482: LD_EXP 53
9486: MINUS
9487: PPUSH
9488: CALL_OW 67
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] , [ f_nation , nation ] ] ) ;
9492: LD_ADDR_VAR 0 5
9496: PUSH
9497: LD_INT 21
9499: PUSH
9500: LD_INT 3
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: LD_INT 2
9509: PUSH
9510: LD_INT 30
9512: PUSH
9513: LD_INT 0
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 30
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: LIST
9534: PUSH
9535: LD_INT 50
9537: PUSH
9538: EMPTY
9539: LIST
9540: PUSH
9541: LD_INT 22
9543: PUSH
9544: LD_VAR 0 1
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PUSH
9553: LD_INT 23
9555: PUSH
9556: LD_VAR 0 2
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: PPUSH
9572: CALL_OW 69
9576: ST_TO_ADDR
// if building_list = 0 then
9577: LD_VAR 0 5
9581: PUSH
9582: LD_INT 0
9584: EQUAL
9585: IFFALSE 9659
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] ] ) ;
9587: LD_ADDR_VAR 0 5
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 3
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 2
9604: PUSH
9605: LD_INT 30
9607: PUSH
9608: LD_INT 0
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 30
9617: PUSH
9618: LD_INT 1
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 50
9632: PUSH
9633: EMPTY
9634: LIST
9635: PUSH
9636: LD_INT 22
9638: PUSH
9639: LD_VAR 0 1
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: PPUSH
9654: CALL_OW 69
9658: ST_TO_ADDR
// if building_list > 0 then
9659: LD_VAR 0 5
9663: PUSH
9664: LD_INT 0
9666: GREATER
9667: IFFALSE 9785
// begin b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
9669: LD_ADDR_VAR 0 6
9673: PUSH
9674: LD_VAR 0 5
9678: PUSH
9679: LD_INT 1
9681: PPUSH
9682: LD_VAR 0 5
9686: PUSH
9687: LD_INT 0
9689: PLUS
9690: PPUSH
9691: CALL_OW 12
9695: ARRAY
9696: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
9697: LD_VAR 0 6
9701: PPUSH
9702: CALL_OW 266
9706: PUSH
9707: LD_INT 0
9709: PUSH
9710: LD_INT 1
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: IN
9717: IFFALSE 9729
// n = 25 else
9719: LD_ADDR_VAR 0 7
9723: PUSH
9724: LD_INT 25
9726: ST_TO_ADDR
9727: GO 9737
// n = 10 ;
9729: LD_ADDR_VAR 0 7
9733: PUSH
9734: LD_INT 10
9736: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( b ) , GetY ( b ) , n , true ) ;
9737: LD_VAR 0 8
9741: PPUSH
9742: LD_VAR 0 6
9746: PPUSH
9747: CALL_OW 250
9751: PPUSH
9752: LD_VAR 0 6
9756: PPUSH
9757: CALL_OW 251
9761: PPUSH
9762: LD_VAR 0 7
9766: PPUSH
9767: LD_INT 1
9769: PPUSH
9770: CALL_OW 50
// OnHumanRespawned ( un ) ;
9774: LD_VAR 0 8
9778: PPUSH
9779: CALL 5237 0 1
// end else
9783: GO 9863
// begin unit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] ] ) ;
9785: LD_ADDR_EXP 54
9789: PUSH
9790: LD_INT 22
9792: PUSH
9793: LD_VAR 0 1
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: PUSH
9802: LD_INT 50
9804: PUSH
9805: EMPTY
9806: LIST
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PPUSH
9812: CALL_OW 69
9816: ST_TO_ADDR
// if unit_list > 0 then
9817: LD_EXP 54
9821: PUSH
9822: LD_INT 0
9824: GREATER
9825: IFFALSE 9861
// begin ObnovOpozdilceCloveka ( un , side , k / 2 ) ;
9827: LD_VAR 0 8
9831: PPUSH
9832: LD_VAR 0 1
9836: PPUSH
9837: LD_VAR 0 9
9841: PUSH
9842: LD_INT 2
9844: DIVREAL
9845: PPUSH
9846: CALL 9868 0 3
// OnHumanRespawned ( un ) ;
9850: LD_VAR 0 8
9854: PPUSH
9855: CALL 5237 0 1
// end else
9859: GO 9863
// exit ;
9861: GO 9863
// end ; end ;
9863: LD_VAR 0 4
9867: RET
// function ObnovOpozdilceCloveka ( un , side , waitTime ) ; var building_list , n , unit_list , b ; begin
9868: LD_INT 0
9870: PPUSH
9871: PPUSH
9872: PPUSH
9873: PPUSH
9874: PPUSH
// wait ( waitTime ) ;
9875: LD_VAR 0 3
9879: PPUSH
9880: CALL_OW 67
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] , [ f_nation , GetNation ( un ) ] ] ) ;
9884: LD_ADDR_VAR 0 5
9888: PUSH
9889: LD_INT 21
9891: PUSH
9892: LD_INT 3
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: LD_INT 2
9901: PUSH
9902: LD_INT 30
9904: PUSH
9905: LD_INT 0
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: LD_INT 30
9914: PUSH
9915: LD_INT 1
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 50
9929: PUSH
9930: EMPTY
9931: LIST
9932: PUSH
9933: LD_INT 22
9935: PUSH
9936: LD_VAR 0 2
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: PUSH
9945: LD_INT 23
9947: PUSH
9948: LD_VAR 0 1
9952: PPUSH
9953: CALL_OW 248
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: PPUSH
9969: CALL_OW 69
9973: ST_TO_ADDR
// if building_list = 0 then
9974: LD_VAR 0 5
9978: PUSH
9979: LD_INT 0
9981: EQUAL
9982: IFFALSE 10056
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] ] ) ;
9984: LD_ADDR_VAR 0 5
9988: PUSH
9989: LD_INT 21
9991: PUSH
9992: LD_INT 3
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: LD_INT 2
10001: PUSH
10002: LD_INT 30
10004: PUSH
10005: LD_INT 0
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 30
10014: PUSH
10015: LD_INT 1
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 50
10029: PUSH
10030: EMPTY
10031: LIST
10032: PUSH
10033: LD_INT 22
10035: PUSH
10036: LD_VAR 0 2
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: PPUSH
10051: CALL_OW 69
10055: ST_TO_ADDR
// if building_list > 0 then
10056: LD_VAR 0 5
10060: PUSH
10061: LD_INT 0
10063: GREATER
10064: IFFALSE 10182
// begin b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
10066: LD_ADDR_VAR 0 8
10070: PUSH
10071: LD_VAR 0 5
10075: PUSH
10076: LD_INT 1
10078: PPUSH
10079: LD_VAR 0 5
10083: PUSH
10084: LD_INT 0
10086: PLUS
10087: PPUSH
10088: CALL_OW 12
10092: ARRAY
10093: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
10094: LD_VAR 0 8
10098: PPUSH
10099: CALL_OW 266
10103: PUSH
10104: LD_INT 0
10106: PUSH
10107: LD_INT 1
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: IN
10114: IFFALSE 10126
// n = 25 else
10116: LD_ADDR_VAR 0 6
10120: PUSH
10121: LD_INT 25
10123: ST_TO_ADDR
10124: GO 10134
// n = 10 ;
10126: LD_ADDR_VAR 0 6
10130: PUSH
10131: LD_INT 10
10133: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( b ) , GetY ( b ) , n , true ) ;
10134: LD_VAR 0 1
10138: PPUSH
10139: LD_VAR 0 8
10143: PPUSH
10144: CALL_OW 250
10148: PPUSH
10149: LD_VAR 0 8
10153: PPUSH
10154: CALL_OW 251
10158: PPUSH
10159: LD_VAR 0 6
10163: PPUSH
10164: LD_INT 1
10166: PPUSH
10167: CALL_OW 50
// OnHumanRespawned ( un ) ;
10171: LD_VAR 0 1
10175: PPUSH
10176: CALL 5237 0 1
// end else
10180: GO 10280
// begin unit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10182: LD_ADDR_VAR 0 7
10186: PUSH
10187: LD_INT 22
10189: PUSH
10190: LD_VAR 0 2
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 2
10201: PUSH
10202: LD_INT 21
10204: PUSH
10205: LD_INT 1
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 33
10214: PUSH
10215: LD_INT 3
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PUSH
10222: LD_INT 33
10224: PUSH
10225: LD_INT 5
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PPUSH
10242: CALL_OW 69
10246: ST_TO_ADDR
// if unit_list > 0 then
10247: LD_VAR 0 7
10251: PUSH
10252: LD_INT 0
10254: GREATER
10255: IFFALSE 10278
// ObnovOpozdilceCloveka ( un , side , waitTime ) else
10257: LD_VAR 0 1
10261: PPUSH
10262: LD_VAR 0 2
10266: PPUSH
10267: LD_VAR 0 3
10271: PPUSH
10272: CALL 9868 0 3
10276: GO 10280
// exit ;
10278: GO 10280
// end ; end ; end_of_file
10280: LD_VAR 0 4
10284: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
10285: LD_INT 0
10287: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 255
10297: PUSH
10298: LD_VAR 0 4
10302: EQUAL
10303: IFFALSE 10322
// begin SetAchievement ( ACH_RAD ) ;
10305: LD_STRING ACH_RAD
10307: PPUSH
10308: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
10312: LD_STRING ACH_NL
10314: PPUSH
10315: LD_INT 1
10317: PPUSH
10318: CALL_OW 564
// end end ;
10322: LD_VAR 0 5
10326: RET
// export function SA_Win ( side ) ; begin
10327: LD_INT 0
10329: PPUSH
// case side of 1 :
10330: LD_VAR 0 1
10334: PUSH
10335: LD_INT 1
10337: DOUBLE
10338: EQUAL
10339: IFTRUE 10343
10341: GO 10356
10343: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
10344: LD_STRING ACH_AH
10346: PPUSH
10347: LD_INT 1
10349: PPUSH
10350: CALL_OW 564
10354: GO 10519
10356: LD_INT 2
10358: DOUBLE
10359: EQUAL
10360: IFTRUE 10364
10362: GO 10377
10364: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
10365: LD_STRING ACH_E
10367: PPUSH
10368: LD_INT 1
10370: PPUSH
10371: CALL_OW 564
10375: GO 10519
10377: LD_INT 3
10379: DOUBLE
10380: EQUAL
10381: IFTRUE 10385
10383: GO 10398
10385: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
10386: LD_STRING ACH_OOL
10388: PPUSH
10389: LD_INT 1
10391: PPUSH
10392: CALL_OW 564
10396: GO 10519
10398: LD_INT 1
10400: PUSH
10401: LD_INT 2
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: DOUBLE
10408: EQUAL
10409: IFTRUE 10413
10411: GO 10438
10413: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10414: LD_STRING ACH_AH
10416: PPUSH
10417: LD_REAL  5.00000000000000E-0001
10420: PPUSH
10421: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10425: LD_STRING ACH_E
10427: PPUSH
10428: LD_REAL  5.00000000000000E-0001
10431: PPUSH
10432: CALL_OW 564
// end ; [ 2 , 3 ] :
10436: GO 10519
10438: LD_INT 2
10440: PUSH
10441: LD_INT 3
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: DOUBLE
10448: EQUAL
10449: IFTRUE 10453
10451: GO 10478
10453: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10454: LD_STRING ACH_OOL
10456: PPUSH
10457: LD_REAL  5.00000000000000E-0001
10460: PPUSH
10461: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10465: LD_STRING ACH_E
10467: PPUSH
10468: LD_REAL  5.00000000000000E-0001
10471: PPUSH
10472: CALL_OW 564
// end ; [ 3 , 1 ] :
10476: GO 10519
10478: LD_INT 3
10480: PUSH
10481: LD_INT 1
10483: PUSH
10484: EMPTY
10485: LIST
10486: LIST
10487: DOUBLE
10488: EQUAL
10489: IFTRUE 10493
10491: GO 10518
10493: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10494: LD_STRING ACH_AH
10496: PPUSH
10497: LD_REAL  5.00000000000000E-0001
10500: PPUSH
10501: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
10505: LD_STRING ACH_OOL
10507: PPUSH
10508: LD_REAL  5.00000000000000E-0001
10511: PPUSH
10512: CALL_OW 564
// end ; end ;
10516: GO 10519
10518: POP
// end ; end_of_file
10519: LD_VAR 0 2
10523: RET
// export MaxFlags ; export function ShowResources ( FullMapArea , EnableSiberitResurces , Range ) ; var k , k2 , i , d , r , u ; begin
10524: LD_INT 0
10526: PPUSH
10527: PPUSH
10528: PPUSH
10529: PPUSH
10530: PPUSH
10531: PPUSH
10532: PPUSH
// if range = 0 then
10533: LD_VAR 0 3
10537: PUSH
10538: LD_INT 0
10540: EQUAL
10541: IFFALSE 10551
// range = 400 ;
10543: LD_ADDR_VAR 0 3
10547: PUSH
10548: LD_INT 400
10550: ST_TO_ADDR
// r = range ;
10551: LD_ADDR_VAR 0 9
10555: PUSH
10556: LD_VAR 0 3
10560: ST_TO_ADDR
// d = GetListOfResourcesInArea ( FullMapArea ) ;
10561: LD_ADDR_VAR 0 8
10565: PUSH
10566: LD_VAR 0 1
10570: PPUSH
10571: CALL_OW 442
10575: ST_TO_ADDR
// for k = 1 to ( d / 3 ) do
10576: LD_ADDR_VAR 0 5
10580: PUSH
10581: DOUBLE
10582: LD_INT 1
10584: DEC
10585: ST_TO_ADDR
10586: LD_VAR 0 8
10590: PUSH
10591: LD_INT 3
10593: DIVREAL
10594: PUSH
10595: FOR_TO
10596: IFFALSE 10787
// begin k2 = k * 3 ;
10598: LD_ADDR_VAR 0 6
10602: PUSH
10603: LD_VAR 0 5
10607: PUSH
10608: LD_INT 3
10610: MUL
10611: ST_TO_ADDR
// for i = 1 to 8 do
10612: LD_ADDR_VAR 0 7
10616: PUSH
10617: DOUBLE
10618: LD_INT 1
10620: DEC
10621: ST_TO_ADDR
10622: LD_INT 8
10624: PUSH
10625: FOR_TO
10626: IFFALSE 10783
// begin if d [ k2 ] = 1 or ( d [ k2 ] = 2 and EnableSiberitResurces ) then
10628: LD_VAR 0 8
10632: PUSH
10633: LD_VAR 0 6
10637: ARRAY
10638: PUSH
10639: LD_INT 1
10641: EQUAL
10642: PUSH
10643: LD_VAR 0 8
10647: PUSH
10648: LD_VAR 0 6
10652: ARRAY
10653: PUSH
10654: LD_INT 2
10656: EQUAL
10657: PUSH
10658: LD_VAR 0 2
10662: AND
10663: OR
10664: IFFALSE 10781
// begin u = filterAllUnits ( [ [ f_side , i ] , [ f_distxy , d [ k2 - 2 ] , d [ k2 - 1 ] , r ] ] ) ;
10666: LD_ADDR_VAR 0 10
10670: PUSH
10671: LD_INT 22
10673: PUSH
10674: LD_VAR 0 7
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: LD_INT 92
10685: PUSH
10686: LD_VAR 0 8
10690: PUSH
10691: LD_VAR 0 6
10695: PUSH
10696: LD_INT 2
10698: MINUS
10699: ARRAY
10700: PUSH
10701: LD_VAR 0 8
10705: PUSH
10706: LD_VAR 0 6
10710: PUSH
10711: LD_INT 1
10713: MINUS
10714: ARRAY
10715: PUSH
10716: LD_VAR 0 9
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PPUSH
10731: CALL_OW 69
10735: ST_TO_ADDR
// if u then
10736: LD_VAR 0 10
10740: IFFALSE 10781
// SetResourceVisibility ( d [ k2 - 2 ] , d [ k2 - 1 ] , i ) ;
10742: LD_VAR 0 8
10746: PUSH
10747: LD_VAR 0 6
10751: PUSH
10752: LD_INT 2
10754: MINUS
10755: ARRAY
10756: PPUSH
10757: LD_VAR 0 8
10761: PUSH
10762: LD_VAR 0 6
10766: PUSH
10767: LD_INT 1
10769: MINUS
10770: ARRAY
10771: PPUSH
10772: LD_VAR 0 7
10776: PPUSH
10777: CALL_OW 441
// end ; end ;
10781: GO 10625
10783: POP
10784: POP
// end ;
10785: GO 10595
10787: POP
10788: POP
// end ;
10789: LD_VAR 0 4
10793: RET
// export function randomHumanStats ( init_level ) ; var cl , combat , eng , mech , sci , skills , base_skills , attr ; var i , k , base , n , def , speed ; begin
10794: LD_INT 0
10796: PPUSH
10797: PPUSH
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
10802: PPUSH
10803: PPUSH
10804: PPUSH
10805: PPUSH
10806: PPUSH
10807: PPUSH
10808: PPUSH
10809: PPUSH
10810: PPUSH
// cl = rand ( 1 , 4 ) ;
10811: LD_ADDR_VAR 0 3
10815: PUSH
10816: LD_INT 1
10818: PPUSH
10819: LD_INT 4
10821: PPUSH
10822: CALL_OW 12
10826: ST_TO_ADDR
// base = init_level ;
10827: LD_ADDR_VAR 0 13
10831: PUSH
10832: LD_VAR 0 1
10836: ST_TO_ADDR
// case tick of 0 .. 5 5$00 :
10837: LD_OWVAR 1
10841: PUSH
10842: LD_INT 0
10844: DOUBLE
10845: GREATEREQUAL
10846: IFFALSE 10854
10848: LD_INT 10500
10850: DOUBLE
10851: LESSEQUAL
10852: IFTRUE 10856
10854: GO 10867
10856: POP
// i = 1 ; 5 5$01 .. 9 9$00 :
10857: LD_ADDR_VAR 0 11
10861: PUSH
10862: LD_INT 1
10864: ST_TO_ADDR
10865: GO 11126
10867: LD_INT 10535
10869: DOUBLE
10870: GREATEREQUAL
10871: IFFALSE 10879
10873: LD_INT 18900
10875: DOUBLE
10876: LESSEQUAL
10877: IFTRUE 10881
10879: GO 10892
10881: POP
// i = 2 ; 9 9$01 .. 15 15$00 :
10882: LD_ADDR_VAR 0 11
10886: PUSH
10887: LD_INT 2
10889: ST_TO_ADDR
10890: GO 11126
10892: LD_INT 18935
10894: DOUBLE
10895: GREATEREQUAL
10896: IFFALSE 10904
10898: LD_INT 31500
10900: DOUBLE
10901: LESSEQUAL
10902: IFTRUE 10906
10904: GO 10917
10906: POP
// i = 3 ; 15 15$01 .. 22 22$00 :
10907: LD_ADDR_VAR 0 11
10911: PUSH
10912: LD_INT 3
10914: ST_TO_ADDR
10915: GO 11126
10917: LD_INT 31535
10919: DOUBLE
10920: GREATEREQUAL
10921: IFFALSE 10929
10923: LD_INT 46200
10925: DOUBLE
10926: LESSEQUAL
10927: IFTRUE 10931
10929: GO 10942
10931: POP
// i = 4 ; 22 22$01 .. 30 30$00 :
10932: LD_ADDR_VAR 0 11
10936: PUSH
10937: LD_INT 4
10939: ST_TO_ADDR
10940: GO 11126
10942: LD_INT 46235
10944: DOUBLE
10945: GREATEREQUAL
10946: IFFALSE 10954
10948: LD_INT 63000
10950: DOUBLE
10951: LESSEQUAL
10952: IFTRUE 10956
10954: GO 10967
10956: POP
// i = 5 ; 30 30$01 .. 40 40$00 :
10957: LD_ADDR_VAR 0 11
10961: PUSH
10962: LD_INT 5
10964: ST_TO_ADDR
10965: GO 11126
10967: LD_INT 63035
10969: DOUBLE
10970: GREATEREQUAL
10971: IFFALSE 10979
10973: LD_INT 84000
10975: DOUBLE
10976: LESSEQUAL
10977: IFTRUE 10981
10979: GO 10992
10981: POP
// i = 6 ; 40 40$01 .. 52 52$00 :
10982: LD_ADDR_VAR 0 11
10986: PUSH
10987: LD_INT 6
10989: ST_TO_ADDR
10990: GO 11126
10992: LD_INT 84035
10994: DOUBLE
10995: GREATEREQUAL
10996: IFFALSE 11004
10998: LD_INT 109200
11000: DOUBLE
11001: LESSEQUAL
11002: IFTRUE 11006
11004: GO 11017
11006: POP
// i = 7 ; 52 52$01 .. 66 66$00 :
11007: LD_ADDR_VAR 0 11
11011: PUSH
11012: LD_INT 7
11014: ST_TO_ADDR
11015: GO 11126
11017: LD_INT 109235
11019: DOUBLE
11020: GREATEREQUAL
11021: IFFALSE 11029
11023: LD_INT 138600
11025: DOUBLE
11026: LESSEQUAL
11027: IFTRUE 11031
11029: GO 11042
11031: POP
// i = 8 ; 66 66$01 .. 88 88$00 :
11032: LD_ADDR_VAR 0 11
11036: PUSH
11037: LD_INT 8
11039: ST_TO_ADDR
11040: GO 11126
11042: LD_INT 138635
11044: DOUBLE
11045: GREATEREQUAL
11046: IFFALSE 11054
11048: LD_INT 184800
11050: DOUBLE
11051: LESSEQUAL
11052: IFTRUE 11056
11054: GO 11067
11056: POP
// i = 9 ; 88 88$01 .. 100 100$00 :
11057: LD_ADDR_VAR 0 11
11061: PUSH
11062: LD_INT 9
11064: ST_TO_ADDR
11065: GO 11126
11067: LD_INT 184835
11069: DOUBLE
11070: GREATEREQUAL
11071: IFFALSE 11079
11073: LD_INT 210000
11075: DOUBLE
11076: LESSEQUAL
11077: IFTRUE 11081
11079: GO 11092
11081: POP
// i = 10 ; 100 100$01 .. 120 120$00 :
11082: LD_ADDR_VAR 0 11
11086: PUSH
11087: LD_INT 10
11089: ST_TO_ADDR
11090: GO 11126
11092: LD_INT 210035
11094: DOUBLE
11095: GREATEREQUAL
11096: IFFALSE 11104
11098: LD_INT 252000
11100: DOUBLE
11101: LESSEQUAL
11102: IFTRUE 11106
11104: GO 11117
11106: POP
// i = 11 ; else
11107: LD_ADDR_VAR 0 11
11111: PUSH
11112: LD_INT 11
11114: ST_TO_ADDR
11115: GO 11126
11117: POP
// i = 12 ; end ;
11118: LD_ADDR_VAR 0 11
11122: PUSH
11123: LD_INT 12
11125: ST_TO_ADDR
// i = i - base div 2 ;
11126: LD_ADDR_VAR 0 11
11130: PUSH
11131: LD_VAR 0 11
11135: PUSH
11136: LD_VAR 0 13
11140: PUSH
11141: LD_INT 2
11143: DIV
11144: MINUS
11145: ST_TO_ADDR
// if i < 0 then
11146: LD_VAR 0 11
11150: PUSH
11151: LD_INT 0
11153: LESS
11154: IFFALSE 11164
// i = 0 ;
11156: LD_ADDR_VAR 0 11
11160: PUSH
11161: LD_INT 0
11163: ST_TO_ADDR
// if cl = 1 then
11164: LD_VAR 0 3
11168: PUSH
11169: LD_INT 1
11171: EQUAL
11172: IFFALSE 11212
// combat = rand ( base + i - 1 , base + i ) else
11174: LD_ADDR_VAR 0 4
11178: PUSH
11179: LD_VAR 0 13
11183: PUSH
11184: LD_VAR 0 11
11188: PLUS
11189: PUSH
11190: LD_INT 1
11192: MINUS
11193: PPUSH
11194: LD_VAR 0 13
11198: PUSH
11199: LD_VAR 0 11
11203: PLUS
11204: PPUSH
11205: CALL_OW 12
11209: ST_TO_ADDR
11210: GO 11252
// combat = rand ( base + i - 4 , base + i - 1 ) ;
11212: LD_ADDR_VAR 0 4
11216: PUSH
11217: LD_VAR 0 13
11221: PUSH
11222: LD_VAR 0 11
11226: PLUS
11227: PUSH
11228: LD_INT 4
11230: MINUS
11231: PPUSH
11232: LD_VAR 0 13
11236: PUSH
11237: LD_VAR 0 11
11241: PLUS
11242: PUSH
11243: LD_INT 1
11245: MINUS
11246: PPUSH
11247: CALL_OW 12
11251: ST_TO_ADDR
// if cl = 2 then
11252: LD_VAR 0 3
11256: PUSH
11257: LD_INT 2
11259: EQUAL
11260: IFFALSE 11300
// eng = rand ( base + i - 1 , base + i ) else
11262: LD_ADDR_VAR 0 5
11266: PUSH
11267: LD_VAR 0 13
11271: PUSH
11272: LD_VAR 0 11
11276: PLUS
11277: PUSH
11278: LD_INT 1
11280: MINUS
11281: PPUSH
11282: LD_VAR 0 13
11286: PUSH
11287: LD_VAR 0 11
11291: PLUS
11292: PPUSH
11293: CALL_OW 12
11297: ST_TO_ADDR
11298: GO 11340
// eng = rand ( base + i - 4 , base + i - 1 ) ;
11300: LD_ADDR_VAR 0 5
11304: PUSH
11305: LD_VAR 0 13
11309: PUSH
11310: LD_VAR 0 11
11314: PLUS
11315: PUSH
11316: LD_INT 4
11318: MINUS
11319: PPUSH
11320: LD_VAR 0 13
11324: PUSH
11325: LD_VAR 0 11
11329: PLUS
11330: PUSH
11331: LD_INT 1
11333: MINUS
11334: PPUSH
11335: CALL_OW 12
11339: ST_TO_ADDR
// if cl = 3 then
11340: LD_VAR 0 3
11344: PUSH
11345: LD_INT 3
11347: EQUAL
11348: IFFALSE 11388
// mech = rand ( base + i - 1 , base + i ) else
11350: LD_ADDR_VAR 0 6
11354: PUSH
11355: LD_VAR 0 13
11359: PUSH
11360: LD_VAR 0 11
11364: PLUS
11365: PUSH
11366: LD_INT 1
11368: MINUS
11369: PPUSH
11370: LD_VAR 0 13
11374: PUSH
11375: LD_VAR 0 11
11379: PLUS
11380: PPUSH
11381: CALL_OW 12
11385: ST_TO_ADDR
11386: GO 11428
// mech = rand ( base + i - 4 , base + i - 1 ) ;
11388: LD_ADDR_VAR 0 6
11392: PUSH
11393: LD_VAR 0 13
11397: PUSH
11398: LD_VAR 0 11
11402: PLUS
11403: PUSH
11404: LD_INT 4
11406: MINUS
11407: PPUSH
11408: LD_VAR 0 13
11412: PUSH
11413: LD_VAR 0 11
11417: PLUS
11418: PUSH
11419: LD_INT 1
11421: MINUS
11422: PPUSH
11423: CALL_OW 12
11427: ST_TO_ADDR
// if cl = 4 then
11428: LD_VAR 0 3
11432: PUSH
11433: LD_INT 4
11435: EQUAL
11436: IFFALSE 11476
// sci = rand ( base + i - 1 , base + i ) else
11438: LD_ADDR_VAR 0 7
11442: PUSH
11443: LD_VAR 0 13
11447: PUSH
11448: LD_VAR 0 11
11452: PLUS
11453: PUSH
11454: LD_INT 1
11456: MINUS
11457: PPUSH
11458: LD_VAR 0 13
11462: PUSH
11463: LD_VAR 0 11
11467: PLUS
11468: PPUSH
11469: CALL_OW 12
11473: ST_TO_ADDR
11474: GO 11516
// sci = rand ( base + i - 4 , base + i - 1 ) ;
11476: LD_ADDR_VAR 0 7
11480: PUSH
11481: LD_VAR 0 13
11485: PUSH
11486: LD_VAR 0 11
11490: PLUS
11491: PUSH
11492: LD_INT 4
11494: MINUS
11495: PPUSH
11496: LD_VAR 0 13
11500: PUSH
11501: LD_VAR 0 11
11505: PLUS
11506: PUSH
11507: LD_INT 1
11509: MINUS
11510: PPUSH
11511: CALL_OW 12
11515: ST_TO_ADDR
// skills = [ combat , eng , mech , sci ] ;
11516: LD_ADDR_VAR 0 8
11520: PUSH
11521: LD_VAR 0 4
11525: PUSH
11526: LD_VAR 0 5
11530: PUSH
11531: LD_VAR 0 6
11535: PUSH
11536: LD_VAR 0 7
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: ST_TO_ADDR
// for i = 1 to 4 do
11547: LD_ADDR_VAR 0 11
11551: PUSH
11552: DOUBLE
11553: LD_INT 1
11555: DEC
11556: ST_TO_ADDR
11557: LD_INT 4
11559: PUSH
11560: FOR_TO
11561: IFFALSE 11716
// begin if skills [ i ] < 0 then
11563: LD_VAR 0 8
11567: PUSH
11568: LD_VAR 0 11
11572: ARRAY
11573: PUSH
11574: LD_INT 0
11576: LESS
11577: IFFALSE 11602
// skills = replace ( skills , i , 0 ) ;
11579: LD_ADDR_VAR 0 8
11583: PUSH
11584: LD_VAR 0 8
11588: PPUSH
11589: LD_VAR 0 11
11593: PPUSH
11594: LD_INT 0
11596: PPUSH
11597: CALL_OW 1
11601: ST_TO_ADDR
// n = [ 0 , 1 , 0 , 1 , 0 , 2 , 0 , 0 , 1 , 0 ] [ rand ( 1 , 10 ) ] ;
11602: LD_ADDR_VAR 0 14
11606: PUSH
11607: LD_INT 0
11609: PUSH
11610: LD_INT 1
11612: PUSH
11613: LD_INT 0
11615: PUSH
11616: LD_INT 1
11618: PUSH
11619: LD_INT 0
11621: PUSH
11622: LD_INT 2
11624: PUSH
11625: LD_INT 0
11627: PUSH
11628: LD_INT 0
11630: PUSH
11631: LD_INT 1
11633: PUSH
11634: LD_INT 0
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: PUSH
11649: LD_INT 1
11651: PPUSH
11652: LD_INT 10
11654: PPUSH
11655: CALL_OW 12
11659: ARRAY
11660: ST_TO_ADDR
// if n > skills [ i ] then
11661: LD_VAR 0 14
11665: PUSH
11666: LD_VAR 0 8
11670: PUSH
11671: LD_VAR 0 11
11675: ARRAY
11676: GREATER
11677: IFFALSE 11695
// n = skills [ i ] ;
11679: LD_ADDR_VAR 0 14
11683: PUSH
11684: LD_VAR 0 8
11688: PUSH
11689: LD_VAR 0 11
11693: ARRAY
11694: ST_TO_ADDR
// replace ( base_skills , i , n ) ;
11695: LD_VAR 0 9
11699: PPUSH
11700: LD_VAR 0 11
11704: PPUSH
11705: LD_VAR 0 14
11709: PPUSH
11710: CALL_OW 1
// end ;
11714: GO 11560
11716: POP
11717: POP
// n = rand ( 1 , 100 ) ;
11718: LD_ADDR_VAR 0 14
11722: PUSH
11723: LD_INT 1
11725: PPUSH
11726: LD_INT 100
11728: PPUSH
11729: CALL_OW 12
11733: ST_TO_ADDR
// case n of 1 .. 32 :
11734: LD_VAR 0 14
11738: PUSH
11739: LD_INT 1
11741: DOUBLE
11742: GREATEREQUAL
11743: IFFALSE 11751
11745: LD_INT 32
11747: DOUBLE
11748: LESSEQUAL
11749: IFTRUE 11753
11751: GO 11764
11753: POP
// def = 10 ; 31 .. 54 :
11754: LD_ADDR_VAR 0 15
11758: PUSH
11759: LD_INT 10
11761: ST_TO_ADDR
11762: GO 11865
11764: LD_INT 31
11766: DOUBLE
11767: GREATEREQUAL
11768: IFFALSE 11776
11770: LD_INT 54
11772: DOUBLE
11773: LESSEQUAL
11774: IFTRUE 11778
11776: GO 11789
11778: POP
// def = 9 ; 55 .. 76 :
11779: LD_ADDR_VAR 0 15
11783: PUSH
11784: LD_INT 9
11786: ST_TO_ADDR
11787: GO 11865
11789: LD_INT 55
11791: DOUBLE
11792: GREATEREQUAL
11793: IFFALSE 11801
11795: LD_INT 76
11797: DOUBLE
11798: LESSEQUAL
11799: IFTRUE 11803
11801: GO 11814
11803: POP
// def = 11 ; 77 .. 88 :
11804: LD_ADDR_VAR 0 15
11808: PUSH
11809: LD_INT 11
11811: ST_TO_ADDR
11812: GO 11865
11814: LD_INT 77
11816: DOUBLE
11817: GREATEREQUAL
11818: IFFALSE 11826
11820: LD_INT 88
11822: DOUBLE
11823: LESSEQUAL
11824: IFTRUE 11828
11826: GO 11839
11828: POP
// def = 8 ; 89 .. 100 :
11829: LD_ADDR_VAR 0 15
11833: PUSH
11834: LD_INT 8
11836: ST_TO_ADDR
11837: GO 11865
11839: LD_INT 89
11841: DOUBLE
11842: GREATEREQUAL
11843: IFFALSE 11851
11845: LD_INT 100
11847: DOUBLE
11848: LESSEQUAL
11849: IFTRUE 11853
11851: GO 11864
11853: POP
// def = 12 ; end ;
11854: LD_ADDR_VAR 0 15
11858: PUSH
11859: LD_INT 12
11861: ST_TO_ADDR
11862: GO 11865
11864: POP
// n = rand ( 1 , 100 ) ;
11865: LD_ADDR_VAR 0 14
11869: PUSH
11870: LD_INT 1
11872: PPUSH
11873: LD_INT 100
11875: PPUSH
11876: CALL_OW 12
11880: ST_TO_ADDR
// case n of 1 .. 44 :
11881: LD_VAR 0 14
11885: PUSH
11886: LD_INT 1
11888: DOUBLE
11889: GREATEREQUAL
11890: IFFALSE 11898
11892: LD_INT 44
11894: DOUBLE
11895: LESSEQUAL
11896: IFTRUE 11900
11898: GO 11911
11900: POP
// speed = 10 ; 45 .. 76 :
11901: LD_ADDR_VAR 0 16
11905: PUSH
11906: LD_INT 10
11908: ST_TO_ADDR
11909: GO 11987
11911: LD_INT 45
11913: DOUBLE
11914: GREATEREQUAL
11915: IFFALSE 11923
11917: LD_INT 76
11919: DOUBLE
11920: LESSEQUAL
11921: IFTRUE 11925
11923: GO 11936
11925: POP
// speed = 9 ; 77 .. 94 :
11926: LD_ADDR_VAR 0 16
11930: PUSH
11931: LD_INT 9
11933: ST_TO_ADDR
11934: GO 11987
11936: LD_INT 77
11938: DOUBLE
11939: GREATEREQUAL
11940: IFFALSE 11948
11942: LD_INT 94
11944: DOUBLE
11945: LESSEQUAL
11946: IFTRUE 11950
11948: GO 11961
11950: POP
// speed = 11 ; 95 .. 100 :
11951: LD_ADDR_VAR 0 16
11955: PUSH
11956: LD_INT 11
11958: ST_TO_ADDR
11959: GO 11987
11961: LD_INT 95
11963: DOUBLE
11964: GREATEREQUAL
11965: IFFALSE 11973
11967: LD_INT 100
11969: DOUBLE
11970: LESSEQUAL
11971: IFTRUE 11975
11973: GO 11986
11975: POP
// speed = 12 ; end ;
11976: LD_ADDR_VAR 0 16
11980: PUSH
11981: LD_INT 12
11983: ST_TO_ADDR
11984: GO 11987
11986: POP
// hc_attr = [ def , speed ] ;
11987: LD_ADDR_OWVAR 29
11991: PUSH
11992: LD_VAR 0 15
11996: PUSH
11997: LD_VAR 0 16
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: ST_TO_ADDR
// hc_basic_skills = base_skills ;
12006: LD_ADDR_OWVAR 30
12010: PUSH
12011: LD_VAR 0 9
12015: ST_TO_ADDR
// hc_skills := skills ;
12016: LD_ADDR_OWVAR 31
12020: PUSH
12021: LD_VAR 0 8
12025: ST_TO_ADDR
// hc_class = cl ;
12026: LD_ADDR_OWVAR 28
12030: PUSH
12031: LD_VAR 0 3
12035: ST_TO_ADDR
// end ; end_of_file
12036: LD_VAR 0 2
12040: RET
// export function SetMpTechs ( ) ; var side , i ; begin
12041: LD_INT 0
12043: PPUSH
12044: PPUSH
12045: PPUSH
// for side = 1 to 8 do
12046: LD_ADDR_VAR 0 2
12050: PUSH
12051: DOUBLE
12052: LD_INT 1
12054: DEC
12055: ST_TO_ADDR
12056: LD_INT 8
12058: PUSH
12059: FOR_TO
12060: IFFALSE 12181
// begin for i = 1 to 72 do
12062: LD_ADDR_VAR 0 3
12066: PUSH
12067: DOUBLE
12068: LD_INT 1
12070: DEC
12071: ST_TO_ADDR
12072: LD_INT 72
12074: PUSH
12075: FOR_TO
12076: IFFALSE 12107
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12078: LD_VAR 0 3
12082: PPUSH
12083: LD_VAR 0 2
12087: PPUSH
12088: LD_INT 0
12090: PPUSH
12091: LD_VAR 0 3
12095: PPUSH
12096: CALL_OW 565
12100: PPUSH
12101: CALL_OW 322
12105: GO 12075
12107: POP
12108: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12109: LD_INT 73
12111: PPUSH
12112: LD_VAR 0 2
12116: PPUSH
12117: LD_INT 0
12119: PPUSH
12120: LD_INT 25
12122: PPUSH
12123: CALL_OW 565
12127: PPUSH
12128: CALL_OW 322
// for i = 0 to 40 do
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: DOUBLE
12138: LD_INT 0
12140: DEC
12141: ST_TO_ADDR
12142: LD_INT 40
12144: PUSH
12145: FOR_TO
12146: IFFALSE 12177
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12148: LD_VAR 0 3
12152: PPUSH
12153: LD_VAR 0 2
12157: PPUSH
12158: LD_INT 1
12160: PPUSH
12161: LD_VAR 0 3
12165: PPUSH
12166: CALL_OW 565
12170: PPUSH
12171: CALL_OW 324
12175: GO 12145
12177: POP
12178: POP
// end ;
12179: GO 12059
12181: POP
12182: POP
// end ;
12183: LD_VAR 0 1
12187: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12188: LD_INT 0
12190: PPUSH
12191: PPUSH
12192: PPUSH
// for side = 1 to 8 do
12193: LD_ADDR_VAR 0 3
12197: PUSH
12198: DOUBLE
12199: LD_INT 1
12201: DEC
12202: ST_TO_ADDR
12203: LD_INT 8
12205: PUSH
12206: FOR_TO
12207: IFFALSE 16203
// begin for i = 1 to 73 do
12209: LD_ADDR_VAR 0 4
12213: PUSH
12214: DOUBLE
12215: LD_INT 1
12217: DEC
12218: ST_TO_ADDR
12219: LD_INT 73
12221: PUSH
12222: FOR_TO
12223: IFFALSE 12244
// SetTech ( i , side , state_disabled ) ;
12225: LD_VAR 0 4
12229: PPUSH
12230: LD_VAR 0 3
12234: PPUSH
12235: LD_INT 0
12237: PPUSH
12238: CALL_OW 322
12242: GO 12222
12244: POP
12245: POP
// for i = 0 to 40 do
12246: LD_ADDR_VAR 0 4
12250: PUSH
12251: DOUBLE
12252: LD_INT 0
12254: DEC
12255: ST_TO_ADDR
12256: LD_INT 40
12258: PUSH
12259: FOR_TO
12260: IFFALSE 12281
// SetRestrict ( i , side , false ) ;
12262: LD_VAR 0 4
12266: PPUSH
12267: LD_VAR 0 3
12271: PPUSH
12272: LD_INT 0
12274: PPUSH
12275: CALL_OW 324
12279: GO 12259
12281: POP
12282: POP
// case level of 1 :
12283: LD_VAR 0 1
12287: PUSH
12288: LD_INT 1
12290: DOUBLE
12291: EQUAL
12292: IFTRUE 12296
12294: GO 12449
12296: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12297: LD_INT 35
12299: PPUSH
12300: LD_VAR 0 3
12304: PPUSH
12305: LD_INT 1
12307: PPUSH
12308: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12312: LD_INT 45
12314: PPUSH
12315: LD_VAR 0 3
12319: PPUSH
12320: LD_INT 1
12322: PPUSH
12323: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12327: LD_INT 46
12329: PPUSH
12330: LD_VAR 0 3
12334: PPUSH
12335: LD_INT 1
12337: PPUSH
12338: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12342: LD_INT 47
12344: PPUSH
12345: LD_VAR 0 3
12349: PPUSH
12350: LD_INT 1
12352: PPUSH
12353: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12357: LD_INT 0
12359: PPUSH
12360: LD_VAR 0 3
12364: PPUSH
12365: LD_INT 1
12367: PPUSH
12368: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12372: LD_INT 2
12374: PPUSH
12375: LD_VAR 0 3
12379: PPUSH
12380: LD_INT 1
12382: PPUSH
12383: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12387: LD_INT 4
12389: PPUSH
12390: LD_VAR 0 3
12394: PPUSH
12395: LD_INT 1
12397: PPUSH
12398: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12402: LD_INT 6
12404: PPUSH
12405: LD_VAR 0 3
12409: PPUSH
12410: LD_INT 1
12412: PPUSH
12413: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12417: LD_INT 29
12419: PPUSH
12420: LD_VAR 0 3
12424: PPUSH
12425: LD_INT 1
12427: PPUSH
12428: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12432: LD_INT 31
12434: PPUSH
12435: LD_VAR 0 3
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: CALL_OW 324
// end ; 2 :
12447: GO 16201
12449: LD_INT 2
12451: DOUBLE
12452: EQUAL
12453: IFTRUE 12457
12455: GO 12655
12457: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12458: LD_INT 35
12460: PPUSH
12461: LD_VAR 0 3
12465: PPUSH
12466: LD_INT 1
12468: PPUSH
12469: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12473: LD_INT 45
12475: PPUSH
12476: LD_VAR 0 3
12480: PPUSH
12481: LD_INT 1
12483: PPUSH
12484: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12488: LD_INT 46
12490: PPUSH
12491: LD_VAR 0 3
12495: PPUSH
12496: LD_INT 1
12498: PPUSH
12499: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12503: LD_INT 47
12505: PPUSH
12506: LD_VAR 0 3
12510: PPUSH
12511: LD_INT 1
12513: PPUSH
12514: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12518: LD_INT 1
12520: PPUSH
12521: LD_VAR 0 3
12525: PPUSH
12526: LD_INT 1
12528: PPUSH
12529: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12533: LD_INT 2
12535: PPUSH
12536: LD_VAR 0 3
12540: PPUSH
12541: LD_INT 1
12543: PPUSH
12544: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12548: LD_INT 11
12550: PPUSH
12551: LD_VAR 0 3
12555: PPUSH
12556: LD_INT 1
12558: PPUSH
12559: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12563: LD_INT 0
12565: PPUSH
12566: LD_VAR 0 3
12570: PPUSH
12571: LD_INT 1
12573: PPUSH
12574: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12578: LD_INT 2
12580: PPUSH
12581: LD_VAR 0 3
12585: PPUSH
12586: LD_INT 1
12588: PPUSH
12589: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12593: LD_INT 4
12595: PPUSH
12596: LD_VAR 0 3
12600: PPUSH
12601: LD_INT 1
12603: PPUSH
12604: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12608: LD_INT 6
12610: PPUSH
12611: LD_VAR 0 3
12615: PPUSH
12616: LD_INT 1
12618: PPUSH
12619: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12623: LD_INT 29
12625: PPUSH
12626: LD_VAR 0 3
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12638: LD_INT 31
12640: PPUSH
12641: LD_VAR 0 3
12645: PPUSH
12646: LD_INT 1
12648: PPUSH
12649: CALL_OW 324
// end ; 3 :
12653: GO 16201
12655: LD_INT 3
12657: DOUBLE
12658: EQUAL
12659: IFTRUE 12663
12661: GO 13116
12663: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12664: LD_INT 35
12666: PPUSH
12667: LD_VAR 0 3
12671: PPUSH
12672: LD_INT 1
12674: PPUSH
12675: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12679: LD_INT 45
12681: PPUSH
12682: LD_VAR 0 3
12686: PPUSH
12687: LD_INT 1
12689: PPUSH
12690: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12694: LD_INT 46
12696: PPUSH
12697: LD_VAR 0 3
12701: PPUSH
12702: LD_INT 1
12704: PPUSH
12705: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12709: LD_INT 47
12711: PPUSH
12712: LD_VAR 0 3
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12724: LD_INT 1
12726: PPUSH
12727: LD_VAR 0 3
12731: PPUSH
12732: LD_INT 1
12734: PPUSH
12735: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12739: LD_INT 2
12741: PPUSH
12742: LD_VAR 0 3
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12754: LD_INT 11
12756: PPUSH
12757: LD_VAR 0 3
12761: PPUSH
12762: LD_INT 1
12764: PPUSH
12765: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12769: LD_INT 48
12771: PPUSH
12772: LD_VAR 0 3
12776: PPUSH
12777: LD_INT 1
12779: PPUSH
12780: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12784: LD_INT 69
12786: PPUSH
12787: LD_VAR 0 3
12791: PPUSH
12792: LD_INT 1
12794: PPUSH
12795: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12799: LD_INT 39
12801: PPUSH
12802: LD_VAR 0 3
12806: PPUSH
12807: LD_INT 1
12809: PPUSH
12810: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12814: LD_INT 43
12816: PPUSH
12817: LD_VAR 0 3
12821: PPUSH
12822: LD_INT 1
12824: PPUSH
12825: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12829: LD_INT 51
12831: PPUSH
12832: LD_VAR 0 3
12836: PPUSH
12837: LD_INT 1
12839: PPUSH
12840: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12844: LD_INT 6
12846: PPUSH
12847: LD_VAR 0 3
12851: PPUSH
12852: LD_INT 1
12854: PPUSH
12855: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12859: LD_INT 0
12861: PPUSH
12862: LD_VAR 0 3
12866: PPUSH
12867: LD_INT 1
12869: PPUSH
12870: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12874: LD_INT 2
12876: PPUSH
12877: LD_VAR 0 3
12881: PPUSH
12882: LD_INT 1
12884: PPUSH
12885: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12889: LD_INT 3
12891: PPUSH
12892: LD_VAR 0 3
12896: PPUSH
12897: LD_INT 1
12899: PPUSH
12900: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12904: LD_INT 4
12906: PPUSH
12907: LD_VAR 0 3
12911: PPUSH
12912: LD_INT 1
12914: PPUSH
12915: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12919: LD_INT 6
12921: PPUSH
12922: LD_VAR 0 3
12926: PPUSH
12927: LD_INT 1
12929: PPUSH
12930: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12934: LD_INT 7
12936: PPUSH
12937: LD_VAR 0 3
12941: PPUSH
12942: LD_INT 1
12944: PPUSH
12945: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12949: LD_INT 8
12951: PPUSH
12952: LD_VAR 0 3
12956: PPUSH
12957: LD_INT 1
12959: PPUSH
12960: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12964: LD_INT 10
12966: PPUSH
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 1
12974: PPUSH
12975: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12979: LD_INT 15
12981: PPUSH
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 1
12989: PPUSH
12990: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12994: LD_INT 16
12996: PPUSH
12997: LD_VAR 0 3
13001: PPUSH
13002: LD_INT 1
13004: PPUSH
13005: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13009: LD_INT 17
13011: PPUSH
13012: LD_VAR 0 3
13016: PPUSH
13017: LD_INT 1
13019: PPUSH
13020: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13024: LD_INT 20
13026: PPUSH
13027: LD_VAR 0 3
13031: PPUSH
13032: LD_INT 1
13034: PPUSH
13035: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13039: LD_INT 26
13041: PPUSH
13042: LD_VAR 0 3
13046: PPUSH
13047: LD_INT 1
13049: PPUSH
13050: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13054: LD_INT 27
13056: PPUSH
13057: LD_VAR 0 3
13061: PPUSH
13062: LD_INT 1
13064: PPUSH
13065: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13069: LD_INT 29
13071: PPUSH
13072: LD_VAR 0 3
13076: PPUSH
13077: LD_INT 1
13079: PPUSH
13080: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13084: LD_INT 31
13086: PPUSH
13087: LD_VAR 0 3
13091: PPUSH
13092: LD_INT 1
13094: PPUSH
13095: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13099: LD_INT 32
13101: PPUSH
13102: LD_VAR 0 3
13106: PPUSH
13107: LD_INT 1
13109: PPUSH
13110: CALL_OW 324
// end ; 4 :
13114: GO 16201
13116: LD_INT 4
13118: DOUBLE
13119: EQUAL
13120: IFTRUE 13124
13122: GO 14072
13124: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13125: LD_INT 35
13127: PPUSH
13128: LD_VAR 0 3
13132: PPUSH
13133: LD_INT 1
13135: PPUSH
13136: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13140: LD_INT 45
13142: PPUSH
13143: LD_VAR 0 3
13147: PPUSH
13148: LD_INT 1
13150: PPUSH
13151: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13155: LD_INT 46
13157: PPUSH
13158: LD_VAR 0 3
13162: PPUSH
13163: LD_INT 1
13165: PPUSH
13166: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13170: LD_INT 47
13172: PPUSH
13173: LD_VAR 0 3
13177: PPUSH
13178: LD_INT 1
13180: PPUSH
13181: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13185: LD_INT 1
13187: PPUSH
13188: LD_VAR 0 3
13192: PPUSH
13193: LD_INT 1
13195: PPUSH
13196: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13200: LD_INT 2
13202: PPUSH
13203: LD_VAR 0 3
13207: PPUSH
13208: LD_INT 1
13210: PPUSH
13211: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13215: LD_INT 11
13217: PPUSH
13218: LD_VAR 0 3
13222: PPUSH
13223: LD_INT 1
13225: PPUSH
13226: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13230: LD_INT 20
13232: PPUSH
13233: LD_VAR 0 3
13237: PPUSH
13238: LD_INT 1
13240: PPUSH
13241: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13245: LD_INT 48
13247: PPUSH
13248: LD_VAR 0 3
13252: PPUSH
13253: LD_INT 1
13255: PPUSH
13256: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13260: LD_INT 49
13262: PPUSH
13263: LD_VAR 0 3
13267: PPUSH
13268: LD_INT 1
13270: PPUSH
13271: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13275: LD_INT 69
13277: PPUSH
13278: LD_VAR 0 3
13282: PPUSH
13283: LD_INT 1
13285: PPUSH
13286: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13290: LD_INT 39
13292: PPUSH
13293: LD_VAR 0 3
13297: PPUSH
13298: LD_INT 1
13300: PPUSH
13301: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13305: LD_INT 34
13307: PPUSH
13308: LD_VAR 0 3
13312: PPUSH
13313: LD_INT 1
13315: PPUSH
13316: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13320: LD_INT 42
13322: PPUSH
13323: LD_VAR 0 3
13327: PPUSH
13328: LD_INT 1
13330: PPUSH
13331: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13335: LD_INT 44
13337: PPUSH
13338: LD_VAR 0 3
13342: PPUSH
13343: LD_INT 1
13345: PPUSH
13346: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13350: LD_INT 41
13352: PPUSH
13353: LD_VAR 0 3
13357: PPUSH
13358: LD_INT 1
13360: PPUSH
13361: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13365: LD_INT 43
13367: PPUSH
13368: LD_VAR 0 3
13372: PPUSH
13373: LD_INT 1
13375: PPUSH
13376: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13380: LD_INT 70
13382: PPUSH
13383: LD_VAR 0 3
13387: PPUSH
13388: LD_INT 1
13390: PPUSH
13391: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13395: LD_INT 51
13397: PPUSH
13398: LD_VAR 0 3
13402: PPUSH
13403: LD_INT 1
13405: PPUSH
13406: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13410: LD_INT 52
13412: PPUSH
13413: LD_VAR 0 3
13417: PPUSH
13418: LD_INT 1
13420: PPUSH
13421: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13425: LD_INT 6
13427: PPUSH
13428: LD_VAR 0 3
13432: PPUSH
13433: LD_INT 1
13435: PPUSH
13436: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13440: LD_INT 15
13442: PPUSH
13443: LD_VAR 0 3
13447: PPUSH
13448: LD_INT 1
13450: PPUSH
13451: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13455: LD_INT 7
13457: PPUSH
13458: LD_VAR 0 3
13462: PPUSH
13463: LD_INT 1
13465: PPUSH
13466: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13470: LD_INT 12
13472: PPUSH
13473: LD_VAR 0 3
13477: PPUSH
13478: LD_INT 1
13480: PPUSH
13481: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13485: LD_INT 18
13487: PPUSH
13488: LD_VAR 0 3
13492: PPUSH
13493: LD_INT 1
13495: PPUSH
13496: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13500: LD_INT 60
13502: PPUSH
13503: LD_VAR 0 3
13507: PPUSH
13508: LD_INT 1
13510: PPUSH
13511: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13515: LD_INT 9
13517: PPUSH
13518: LD_VAR 0 3
13522: PPUSH
13523: LD_INT 1
13525: PPUSH
13526: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13530: LD_INT 30
13532: PPUSH
13533: LD_VAR 0 3
13537: PPUSH
13538: LD_INT 1
13540: PPUSH
13541: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13545: LD_INT 37
13547: PPUSH
13548: LD_VAR 0 3
13552: PPUSH
13553: LD_INT 1
13555: PPUSH
13556: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13560: LD_INT 5
13562: PPUSH
13563: LD_VAR 0 3
13567: PPUSH
13568: LD_INT 1
13570: PPUSH
13571: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13575: LD_INT 66
13577: PPUSH
13578: LD_VAR 0 3
13582: PPUSH
13583: LD_INT 1
13585: PPUSH
13586: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13590: LD_INT 21
13592: PPUSH
13593: LD_VAR 0 3
13597: PPUSH
13598: LD_INT 1
13600: PPUSH
13601: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13605: LD_INT 22
13607: PPUSH
13608: LD_VAR 0 3
13612: PPUSH
13613: LD_INT 1
13615: PPUSH
13616: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13620: LD_INT 54
13622: PPUSH
13623: LD_VAR 0 3
13627: PPUSH
13628: LD_INT 1
13630: PPUSH
13631: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13635: LD_INT 0
13637: PPUSH
13638: LD_VAR 0 3
13642: PPUSH
13643: LD_INT 1
13645: PPUSH
13646: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13650: LD_INT 1
13652: PPUSH
13653: LD_VAR 0 3
13657: PPUSH
13658: LD_INT 1
13660: PPUSH
13661: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13665: LD_INT 2
13667: PPUSH
13668: LD_VAR 0 3
13672: PPUSH
13673: LD_INT 1
13675: PPUSH
13676: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13680: LD_INT 3
13682: PPUSH
13683: LD_VAR 0 3
13687: PPUSH
13688: LD_INT 1
13690: PPUSH
13691: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13695: LD_INT 4
13697: PPUSH
13698: LD_VAR 0 3
13702: PPUSH
13703: LD_INT 1
13705: PPUSH
13706: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13710: LD_INT 5
13712: PPUSH
13713: LD_VAR 0 3
13717: PPUSH
13718: LD_INT 1
13720: PPUSH
13721: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13725: LD_INT 6
13727: PPUSH
13728: LD_VAR 0 3
13732: PPUSH
13733: LD_INT 1
13735: PPUSH
13736: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13740: LD_INT 7
13742: PPUSH
13743: LD_VAR 0 3
13747: PPUSH
13748: LD_INT 1
13750: PPUSH
13751: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13755: LD_INT 8
13757: PPUSH
13758: LD_VAR 0 3
13762: PPUSH
13763: LD_INT 1
13765: PPUSH
13766: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13770: LD_INT 10
13772: PPUSH
13773: LD_VAR 0 3
13777: PPUSH
13778: LD_INT 1
13780: PPUSH
13781: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13785: LD_INT 11
13787: PPUSH
13788: LD_VAR 0 3
13792: PPUSH
13793: LD_INT 1
13795: PPUSH
13796: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13800: LD_INT 12
13802: PPUSH
13803: LD_VAR 0 3
13807: PPUSH
13808: LD_INT 1
13810: PPUSH
13811: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13815: LD_INT 13
13817: PPUSH
13818: LD_VAR 0 3
13822: PPUSH
13823: LD_INT 1
13825: PPUSH
13826: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13830: LD_INT 14
13832: PPUSH
13833: LD_VAR 0 3
13837: PPUSH
13838: LD_INT 1
13840: PPUSH
13841: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13845: LD_INT 15
13847: PPUSH
13848: LD_VAR 0 3
13852: PPUSH
13853: LD_INT 1
13855: PPUSH
13856: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13860: LD_INT 16
13862: PPUSH
13863: LD_VAR 0 3
13867: PPUSH
13868: LD_INT 1
13870: PPUSH
13871: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13875: LD_INT 17
13877: PPUSH
13878: LD_VAR 0 3
13882: PPUSH
13883: LD_INT 1
13885: PPUSH
13886: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13890: LD_INT 19
13892: PPUSH
13893: LD_VAR 0 3
13897: PPUSH
13898: LD_INT 1
13900: PPUSH
13901: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13905: LD_INT 20
13907: PPUSH
13908: LD_VAR 0 3
13912: PPUSH
13913: LD_INT 1
13915: PPUSH
13916: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13920: LD_INT 21
13922: PPUSH
13923: LD_VAR 0 3
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13935: LD_INT 23
13937: PPUSH
13938: LD_VAR 0 3
13942: PPUSH
13943: LD_INT 1
13945: PPUSH
13946: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13950: LD_INT 26
13952: PPUSH
13953: LD_VAR 0 3
13957: PPUSH
13958: LD_INT 1
13960: PPUSH
13961: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13965: LD_INT 27
13967: PPUSH
13968: LD_VAR 0 3
13972: PPUSH
13973: LD_INT 1
13975: PPUSH
13976: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13980: LD_INT 28
13982: PPUSH
13983: LD_VAR 0 3
13987: PPUSH
13988: LD_INT 1
13990: PPUSH
13991: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13995: LD_INT 29
13997: PPUSH
13998: LD_VAR 0 3
14002: PPUSH
14003: LD_INT 1
14005: PPUSH
14006: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14010: LD_INT 30
14012: PPUSH
14013: LD_VAR 0 3
14017: PPUSH
14018: LD_INT 1
14020: PPUSH
14021: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14025: LD_INT 31
14027: PPUSH
14028: LD_VAR 0 3
14032: PPUSH
14033: LD_INT 1
14035: PPUSH
14036: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14040: LD_INT 32
14042: PPUSH
14043: LD_VAR 0 3
14047: PPUSH
14048: LD_INT 1
14050: PPUSH
14051: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14055: LD_INT 36
14057: PPUSH
14058: LD_VAR 0 3
14062: PPUSH
14063: LD_INT 1
14065: PPUSH
14066: CALL_OW 324
// end ; 5 :
14070: GO 16201
14072: LD_INT 5
14074: DOUBLE
14075: EQUAL
14076: IFTRUE 14080
14078: GO 15193
14080: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14081: LD_INT 35
14083: PPUSH
14084: LD_VAR 0 3
14088: PPUSH
14089: LD_INT 1
14091: PPUSH
14092: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14096: LD_INT 45
14098: PPUSH
14099: LD_VAR 0 3
14103: PPUSH
14104: LD_INT 1
14106: PPUSH
14107: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14111: LD_INT 46
14113: PPUSH
14114: LD_VAR 0 3
14118: PPUSH
14119: LD_INT 1
14121: PPUSH
14122: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14126: LD_INT 47
14128: PPUSH
14129: LD_VAR 0 3
14133: PPUSH
14134: LD_INT 1
14136: PPUSH
14137: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14141: LD_INT 1
14143: PPUSH
14144: LD_VAR 0 3
14148: PPUSH
14149: LD_INT 1
14151: PPUSH
14152: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14156: LD_INT 2
14158: PPUSH
14159: LD_VAR 0 3
14163: PPUSH
14164: LD_INT 1
14166: PPUSH
14167: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14171: LD_INT 11
14173: PPUSH
14174: LD_VAR 0 3
14178: PPUSH
14179: LD_INT 1
14181: PPUSH
14182: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14186: LD_INT 20
14188: PPUSH
14189: LD_VAR 0 3
14193: PPUSH
14194: LD_INT 1
14196: PPUSH
14197: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14201: LD_INT 48
14203: PPUSH
14204: LD_VAR 0 3
14208: PPUSH
14209: LD_INT 1
14211: PPUSH
14212: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14216: LD_INT 49
14218: PPUSH
14219: LD_VAR 0 3
14223: PPUSH
14224: LD_INT 1
14226: PPUSH
14227: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14231: LD_INT 69
14233: PPUSH
14234: LD_VAR 0 3
14238: PPUSH
14239: LD_INT 1
14241: PPUSH
14242: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14246: LD_INT 39
14248: PPUSH
14249: LD_VAR 0 3
14253: PPUSH
14254: LD_INT 1
14256: PPUSH
14257: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14261: LD_INT 34
14263: PPUSH
14264: LD_VAR 0 3
14268: PPUSH
14269: LD_INT 1
14271: PPUSH
14272: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14276: LD_INT 42
14278: PPUSH
14279: LD_VAR 0 3
14283: PPUSH
14284: LD_INT 1
14286: PPUSH
14287: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14291: LD_INT 44
14293: PPUSH
14294: LD_VAR 0 3
14298: PPUSH
14299: LD_INT 1
14301: PPUSH
14302: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14306: LD_INT 41
14308: PPUSH
14309: LD_VAR 0 3
14313: PPUSH
14314: LD_INT 1
14316: PPUSH
14317: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14321: LD_INT 40
14323: PPUSH
14324: LD_VAR 0 3
14328: PPUSH
14329: LD_INT 1
14331: PPUSH
14332: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14336: LD_INT 43
14338: PPUSH
14339: LD_VAR 0 3
14343: PPUSH
14344: LD_INT 1
14346: PPUSH
14347: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14351: LD_INT 70
14353: PPUSH
14354: LD_VAR 0 3
14358: PPUSH
14359: LD_INT 1
14361: PPUSH
14362: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14366: LD_INT 51
14368: PPUSH
14369: LD_VAR 0 3
14373: PPUSH
14374: LD_INT 1
14376: PPUSH
14377: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14381: LD_INT 52
14383: PPUSH
14384: LD_VAR 0 3
14388: PPUSH
14389: LD_INT 1
14391: PPUSH
14392: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14396: LD_INT 6
14398: PPUSH
14399: LD_VAR 0 3
14403: PPUSH
14404: LD_INT 1
14406: PPUSH
14407: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14411: LD_INT 15
14413: PPUSH
14414: LD_VAR 0 3
14418: PPUSH
14419: LD_INT 1
14421: PPUSH
14422: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14426: LD_INT 7
14428: PPUSH
14429: LD_VAR 0 3
14433: PPUSH
14434: LD_INT 1
14436: PPUSH
14437: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14441: LD_INT 12
14443: PPUSH
14444: LD_VAR 0 3
14448: PPUSH
14449: LD_INT 1
14451: PPUSH
14452: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14456: LD_INT 17
14458: PPUSH
14459: LD_VAR 0 3
14463: PPUSH
14464: LD_INT 1
14466: PPUSH
14467: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14471: LD_INT 18
14473: PPUSH
14474: LD_VAR 0 3
14478: PPUSH
14479: LD_INT 1
14481: PPUSH
14482: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14486: LD_INT 60
14488: PPUSH
14489: LD_VAR 0 3
14493: PPUSH
14494: LD_INT 1
14496: PPUSH
14497: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14501: LD_INT 32
14503: PPUSH
14504: LD_VAR 0 3
14508: PPUSH
14509: LD_INT 1
14511: PPUSH
14512: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14516: LD_INT 9
14518: PPUSH
14519: LD_VAR 0 3
14523: PPUSH
14524: LD_INT 1
14526: PPUSH
14527: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14531: LD_INT 57
14533: PPUSH
14534: LD_VAR 0 3
14538: PPUSH
14539: LD_INT 1
14541: PPUSH
14542: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14546: LD_INT 30
14548: PPUSH
14549: LD_VAR 0 3
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14561: LD_INT 37
14563: PPUSH
14564: LD_VAR 0 3
14568: PPUSH
14569: LD_INT 1
14571: PPUSH
14572: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14576: LD_INT 63
14578: PPUSH
14579: LD_VAR 0 3
14583: PPUSH
14584: LD_INT 1
14586: PPUSH
14587: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14591: LD_INT 3
14593: PPUSH
14594: LD_VAR 0 3
14598: PPUSH
14599: LD_INT 1
14601: PPUSH
14602: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14606: LD_INT 4
14608: PPUSH
14609: LD_VAR 0 3
14613: PPUSH
14614: LD_INT 1
14616: PPUSH
14617: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14621: LD_INT 5
14623: PPUSH
14624: LD_VAR 0 3
14628: PPUSH
14629: LD_INT 1
14631: PPUSH
14632: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14636: LD_INT 66
14638: PPUSH
14639: LD_VAR 0 3
14643: PPUSH
14644: LD_INT 1
14646: PPUSH
14647: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14651: LD_INT 21
14653: PPUSH
14654: LD_VAR 0 3
14658: PPUSH
14659: LD_INT 1
14661: PPUSH
14662: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14666: LD_INT 22
14668: PPUSH
14669: LD_VAR 0 3
14673: PPUSH
14674: LD_INT 1
14676: PPUSH
14677: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14681: LD_INT 19
14683: PPUSH
14684: LD_VAR 0 3
14688: PPUSH
14689: LD_INT 1
14691: PPUSH
14692: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14696: LD_INT 54
14698: PPUSH
14699: LD_VAR 0 3
14703: PPUSH
14704: LD_INT 1
14706: PPUSH
14707: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14711: LD_INT 55
14713: PPUSH
14714: LD_VAR 0 3
14718: PPUSH
14719: LD_INT 1
14721: PPUSH
14722: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14726: LD_INT 0
14728: PPUSH
14729: LD_VAR 0 3
14733: PPUSH
14734: LD_INT 1
14736: PPUSH
14737: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14741: LD_INT 1
14743: PPUSH
14744: LD_VAR 0 3
14748: PPUSH
14749: LD_INT 1
14751: PPUSH
14752: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14756: LD_INT 2
14758: PPUSH
14759: LD_VAR 0 3
14763: PPUSH
14764: LD_INT 1
14766: PPUSH
14767: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14771: LD_INT 3
14773: PPUSH
14774: LD_VAR 0 3
14778: PPUSH
14779: LD_INT 1
14781: PPUSH
14782: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14786: LD_INT 4
14788: PPUSH
14789: LD_VAR 0 3
14793: PPUSH
14794: LD_INT 1
14796: PPUSH
14797: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14801: LD_INT 5
14803: PPUSH
14804: LD_VAR 0 3
14808: PPUSH
14809: LD_INT 1
14811: PPUSH
14812: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14816: LD_INT 6
14818: PPUSH
14819: LD_VAR 0 3
14823: PPUSH
14824: LD_INT 1
14826: PPUSH
14827: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14831: LD_INT 7
14833: PPUSH
14834: LD_VAR 0 3
14838: PPUSH
14839: LD_INT 1
14841: PPUSH
14842: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14846: LD_INT 8
14848: PPUSH
14849: LD_VAR 0 3
14853: PPUSH
14854: LD_INT 1
14856: PPUSH
14857: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14861: LD_INT 10
14863: PPUSH
14864: LD_VAR 0 3
14868: PPUSH
14869: LD_INT 1
14871: PPUSH
14872: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14876: LD_INT 11
14878: PPUSH
14879: LD_VAR 0 3
14883: PPUSH
14884: LD_INT 1
14886: PPUSH
14887: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14891: LD_INT 12
14893: PPUSH
14894: LD_VAR 0 3
14898: PPUSH
14899: LD_INT 1
14901: PPUSH
14902: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14906: LD_INT 13
14908: PPUSH
14909: LD_VAR 0 3
14913: PPUSH
14914: LD_INT 1
14916: PPUSH
14917: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14921: LD_INT 14
14923: PPUSH
14924: LD_VAR 0 3
14928: PPUSH
14929: LD_INT 1
14931: PPUSH
14932: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14936: LD_INT 15
14938: PPUSH
14939: LD_VAR 0 3
14943: PPUSH
14944: LD_INT 1
14946: PPUSH
14947: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14951: LD_INT 16
14953: PPUSH
14954: LD_VAR 0 3
14958: PPUSH
14959: LD_INT 1
14961: PPUSH
14962: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14966: LD_INT 17
14968: PPUSH
14969: LD_VAR 0 3
14973: PPUSH
14974: LD_INT 1
14976: PPUSH
14977: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14981: LD_INT 18
14983: PPUSH
14984: LD_VAR 0 3
14988: PPUSH
14989: LD_INT 1
14991: PPUSH
14992: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14996: LD_INT 19
14998: PPUSH
14999: LD_VAR 0 3
15003: PPUSH
15004: LD_INT 1
15006: PPUSH
15007: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15011: LD_INT 20
15013: PPUSH
15014: LD_VAR 0 3
15018: PPUSH
15019: LD_INT 1
15021: PPUSH
15022: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15026: LD_INT 21
15028: PPUSH
15029: LD_VAR 0 3
15033: PPUSH
15034: LD_INT 1
15036: PPUSH
15037: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15041: LD_INT 23
15043: PPUSH
15044: LD_VAR 0 3
15048: PPUSH
15049: LD_INT 1
15051: PPUSH
15052: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15056: LD_INT 26
15058: PPUSH
15059: LD_VAR 0 3
15063: PPUSH
15064: LD_INT 1
15066: PPUSH
15067: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15071: LD_INT 27
15073: PPUSH
15074: LD_VAR 0 3
15078: PPUSH
15079: LD_INT 1
15081: PPUSH
15082: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15086: LD_INT 28
15088: PPUSH
15089: LD_VAR 0 3
15093: PPUSH
15094: LD_INT 1
15096: PPUSH
15097: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15101: LD_INT 29
15103: PPUSH
15104: LD_VAR 0 3
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15116: LD_INT 30
15118: PPUSH
15119: LD_VAR 0 3
15123: PPUSH
15124: LD_INT 1
15126: PPUSH
15127: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15131: LD_INT 31
15133: PPUSH
15134: LD_VAR 0 3
15138: PPUSH
15139: LD_INT 1
15141: PPUSH
15142: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15146: LD_INT 32
15148: PPUSH
15149: LD_VAR 0 3
15153: PPUSH
15154: LD_INT 1
15156: PPUSH
15157: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15161: LD_INT 33
15163: PPUSH
15164: LD_VAR 0 3
15168: PPUSH
15169: LD_INT 1
15171: PPUSH
15172: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15176: LD_INT 36
15178: PPUSH
15179: LD_VAR 0 3
15183: PPUSH
15184: LD_INT 1
15186: PPUSH
15187: CALL_OW 324
// end ; 6 :
15191: GO 16201
15193: LD_INT 6
15195: DOUBLE
15196: EQUAL
15197: IFTRUE 15201
15199: GO 16126
15201: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15202: LD_INT 35
15204: PPUSH
15205: LD_VAR 0 3
15209: PPUSH
15210: LD_INT 1
15212: PPUSH
15213: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15217: LD_INT 45
15219: PPUSH
15220: LD_VAR 0 3
15224: PPUSH
15225: LD_INT 1
15227: PPUSH
15228: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15232: LD_INT 46
15234: PPUSH
15235: LD_VAR 0 3
15239: PPUSH
15240: LD_INT 1
15242: PPUSH
15243: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15247: LD_INT 47
15249: PPUSH
15250: LD_VAR 0 3
15254: PPUSH
15255: LD_INT 1
15257: PPUSH
15258: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15262: LD_INT 1
15264: PPUSH
15265: LD_VAR 0 3
15269: PPUSH
15270: LD_INT 1
15272: PPUSH
15273: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15277: LD_INT 2
15279: PPUSH
15280: LD_VAR 0 3
15284: PPUSH
15285: LD_INT 1
15287: PPUSH
15288: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15292: LD_INT 11
15294: PPUSH
15295: LD_VAR 0 3
15299: PPUSH
15300: LD_INT 1
15302: PPUSH
15303: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15307: LD_INT 20
15309: PPUSH
15310: LD_VAR 0 3
15314: PPUSH
15315: LD_INT 1
15317: PPUSH
15318: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15322: LD_INT 48
15324: PPUSH
15325: LD_VAR 0 3
15329: PPUSH
15330: LD_INT 1
15332: PPUSH
15333: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15337: LD_INT 49
15339: PPUSH
15340: LD_VAR 0 3
15344: PPUSH
15345: LD_INT 1
15347: PPUSH
15348: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15352: LD_INT 50
15354: PPUSH
15355: LD_VAR 0 3
15359: PPUSH
15360: LD_INT 1
15362: PPUSH
15363: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15367: LD_INT 69
15369: PPUSH
15370: LD_VAR 0 3
15374: PPUSH
15375: LD_INT 1
15377: PPUSH
15378: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15382: LD_INT 39
15384: PPUSH
15385: LD_VAR 0 3
15389: PPUSH
15390: LD_INT 1
15392: PPUSH
15393: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15397: LD_INT 34
15399: PPUSH
15400: LD_VAR 0 3
15404: PPUSH
15405: LD_INT 1
15407: PPUSH
15408: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15412: LD_INT 42
15414: PPUSH
15415: LD_VAR 0 3
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15427: LD_INT 44
15429: PPUSH
15430: LD_VAR 0 3
15434: PPUSH
15435: LD_INT 1
15437: PPUSH
15438: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15442: LD_INT 41
15444: PPUSH
15445: LD_VAR 0 3
15449: PPUSH
15450: LD_INT 1
15452: PPUSH
15453: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15457: LD_INT 13
15459: PPUSH
15460: LD_VAR 0 3
15464: PPUSH
15465: LD_INT 1
15467: PPUSH
15468: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15472: LD_INT 40
15474: PPUSH
15475: LD_VAR 0 3
15479: PPUSH
15480: LD_INT 1
15482: PPUSH
15483: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15487: LD_INT 43
15489: PPUSH
15490: LD_VAR 0 3
15494: PPUSH
15495: LD_INT 1
15497: PPUSH
15498: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15502: LD_INT 70
15504: PPUSH
15505: LD_VAR 0 3
15509: PPUSH
15510: LD_INT 1
15512: PPUSH
15513: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15517: LD_INT 23
15519: PPUSH
15520: LD_VAR 0 3
15524: PPUSH
15525: LD_INT 1
15527: PPUSH
15528: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15532: LD_INT 51
15534: PPUSH
15535: LD_VAR 0 3
15539: PPUSH
15540: LD_INT 1
15542: PPUSH
15543: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15547: LD_INT 52
15549: PPUSH
15550: LD_VAR 0 3
15554: PPUSH
15555: LD_INT 1
15557: PPUSH
15558: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15562: LD_INT 6
15564: PPUSH
15565: LD_VAR 0 3
15569: PPUSH
15570: LD_INT 1
15572: PPUSH
15573: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15577: LD_INT 15
15579: PPUSH
15580: LD_VAR 0 3
15584: PPUSH
15585: LD_INT 1
15587: PPUSH
15588: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15592: LD_INT 7
15594: PPUSH
15595: LD_VAR 0 3
15599: PPUSH
15600: LD_INT 1
15602: PPUSH
15603: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15607: LD_INT 12
15609: PPUSH
15610: LD_VAR 0 3
15614: PPUSH
15615: LD_INT 1
15617: PPUSH
15618: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15622: LD_INT 10
15624: PPUSH
15625: LD_VAR 0 3
15629: PPUSH
15630: LD_INT 1
15632: PPUSH
15633: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15637: LD_INT 17
15639: PPUSH
15640: LD_VAR 0 3
15644: PPUSH
15645: LD_INT 1
15647: PPUSH
15648: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15652: LD_INT 18
15654: PPUSH
15655: LD_VAR 0 3
15659: PPUSH
15660: LD_INT 1
15662: PPUSH
15663: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15667: LD_INT 60
15669: PPUSH
15670: LD_VAR 0 3
15674: PPUSH
15675: LD_INT 1
15677: PPUSH
15678: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15682: LD_INT 61
15684: PPUSH
15685: LD_VAR 0 3
15689: PPUSH
15690: LD_INT 1
15692: PPUSH
15693: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15697: LD_INT 32
15699: PPUSH
15700: LD_VAR 0 3
15704: PPUSH
15705: LD_INT 1
15707: PPUSH
15708: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15712: LD_INT 27
15714: PPUSH
15715: LD_VAR 0 3
15719: PPUSH
15720: LD_INT 1
15722: PPUSH
15723: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15727: LD_INT 36
15729: PPUSH
15730: LD_VAR 0 3
15734: PPUSH
15735: LD_INT 1
15737: PPUSH
15738: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15742: LD_INT 33
15744: PPUSH
15745: LD_VAR 0 3
15749: PPUSH
15750: LD_INT 1
15752: PPUSH
15753: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15757: LD_INT 9
15759: PPUSH
15760: LD_VAR 0 3
15764: PPUSH
15765: LD_INT 1
15767: PPUSH
15768: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15772: LD_INT 38
15774: PPUSH
15775: LD_VAR 0 3
15779: PPUSH
15780: LD_INT 1
15782: PPUSH
15783: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15787: LD_INT 57
15789: PPUSH
15790: LD_VAR 0 3
15794: PPUSH
15795: LD_INT 1
15797: PPUSH
15798: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15802: LD_INT 58
15804: PPUSH
15805: LD_VAR 0 3
15809: PPUSH
15810: LD_INT 1
15812: PPUSH
15813: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15817: LD_INT 28
15819: PPUSH
15820: LD_VAR 0 3
15824: PPUSH
15825: LD_INT 1
15827: PPUSH
15828: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15832: LD_INT 29
15834: PPUSH
15835: LD_VAR 0 3
15839: PPUSH
15840: LD_INT 1
15842: PPUSH
15843: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15847: LD_INT 30
15849: PPUSH
15850: LD_VAR 0 3
15854: PPUSH
15855: LD_INT 1
15857: PPUSH
15858: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15862: LD_INT 37
15864: PPUSH
15865: LD_VAR 0 3
15869: PPUSH
15870: LD_INT 1
15872: PPUSH
15873: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15877: LD_INT 63
15879: PPUSH
15880: LD_VAR 0 3
15884: PPUSH
15885: LD_INT 1
15887: PPUSH
15888: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15892: LD_INT 64
15894: PPUSH
15895: LD_VAR 0 3
15899: PPUSH
15900: LD_INT 1
15902: PPUSH
15903: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15907: LD_INT 3
15909: PPUSH
15910: LD_VAR 0 3
15914: PPUSH
15915: LD_INT 1
15917: PPUSH
15918: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15922: LD_INT 4
15924: PPUSH
15925: LD_VAR 0 3
15929: PPUSH
15930: LD_INT 1
15932: PPUSH
15933: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15937: LD_INT 5
15939: PPUSH
15940: LD_VAR 0 3
15944: PPUSH
15945: LD_INT 1
15947: PPUSH
15948: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
15952: LD_INT 8
15954: PPUSH
15955: LD_VAR 0 3
15959: PPUSH
15960: LD_INT 1
15962: PPUSH
15963: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15967: LD_INT 66
15969: PPUSH
15970: LD_VAR 0 3
15974: PPUSH
15975: LD_INT 1
15977: PPUSH
15978: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15982: LD_INT 67
15984: PPUSH
15985: LD_VAR 0 3
15989: PPUSH
15990: LD_INT 1
15992: PPUSH
15993: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15997: LD_INT 21
15999: PPUSH
16000: LD_VAR 0 3
16004: PPUSH
16005: LD_INT 1
16007: PPUSH
16008: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16012: LD_INT 22
16014: PPUSH
16015: LD_VAR 0 3
16019: PPUSH
16020: LD_INT 1
16022: PPUSH
16023: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16027: LD_INT 19
16029: PPUSH
16030: LD_VAR 0 3
16034: PPUSH
16035: LD_INT 1
16037: PPUSH
16038: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16042: LD_INT 26
16044: PPUSH
16045: LD_VAR 0 3
16049: PPUSH
16050: LD_INT 1
16052: PPUSH
16053: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16057: LD_INT 54
16059: PPUSH
16060: LD_VAR 0 3
16064: PPUSH
16065: LD_INT 1
16067: PPUSH
16068: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16072: LD_INT 55
16074: PPUSH
16075: LD_VAR 0 3
16079: PPUSH
16080: LD_INT 1
16082: PPUSH
16083: CALL_OW 322
// for i = 0 to 39 do
16087: LD_ADDR_VAR 0 4
16091: PUSH
16092: DOUBLE
16093: LD_INT 0
16095: DEC
16096: ST_TO_ADDR
16097: LD_INT 39
16099: PUSH
16100: FOR_TO
16101: IFFALSE 16122
// SetRestrict ( i , side , true ) ;
16103: LD_VAR 0 4
16107: PPUSH
16108: LD_VAR 0 3
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: CALL_OW 324
16120: GO 16100
16122: POP
16123: POP
// end ; else
16124: GO 16201
16126: POP
// begin for i = 1 to 73 do
16127: LD_ADDR_VAR 0 4
16131: PUSH
16132: DOUBLE
16133: LD_INT 1
16135: DEC
16136: ST_TO_ADDR
16137: LD_INT 73
16139: PUSH
16140: FOR_TO
16141: IFFALSE 16162
// SetTech ( i , side , state_enabled ) ;
16143: LD_VAR 0 4
16147: PPUSH
16148: LD_VAR 0 3
16152: PPUSH
16153: LD_INT 1
16155: PPUSH
16156: CALL_OW 322
16160: GO 16140
16162: POP
16163: POP
// for i = 0 to 39 do
16164: LD_ADDR_VAR 0 4
16168: PUSH
16169: DOUBLE
16170: LD_INT 0
16172: DEC
16173: ST_TO_ADDR
16174: LD_INT 39
16176: PUSH
16177: FOR_TO
16178: IFFALSE 16199
// SetRestrict ( i , side , true ) ;
16180: LD_VAR 0 4
16184: PPUSH
16185: LD_VAR 0 3
16189: PPUSH
16190: LD_INT 1
16192: PPUSH
16193: CALL_OW 324
16197: GO 16177
16199: POP
16200: POP
// end ; end ; end ;
16201: GO 12206
16203: POP
16204: POP
// end ;
16205: LD_VAR 0 2
16209: RET
