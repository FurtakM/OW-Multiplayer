// export game_type , def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_shared_vision , def_morale_flags , def_siberite_detection , def_siberite_bomb , def_people_respawning , def_builduptime ; export is_depot , number_of_breastworks , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , sci1_skills , sci2_skills , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export playing_sides , playing_teams , sci1 , sci2 ; export Side_Count , Team_Count , Player_Team , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Positions , Team_Game ; export depot_def , breastworks_def , start_def , teleport_def ; export commander , battle_flags_id ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if MultiPlayer then
  11: LD_OWVAR 4
  15: IFFALSE 89
// begin game_type = mp_game_type ;
  17: LD_ADDR_EXP 1
  21: PUSH
  22: LD_OWVAR 6
  26: ST_TO_ADDR
// Your_Side = mp_player_side ;
  27: LD_ADDR_OWVAR 2
  31: PUSH
  32: LD_OWVAR 7
  36: ST_TO_ADDR
// Player_Team = mp_player_team ;
  37: LD_ADDR_EXP 32
  41: PUSH
  42: LD_OWVAR 8
  46: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  47: LD_ADDR_EXP 36
  51: PUSH
  52: LD_OWVAR 17
  56: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  57: LD_ADDR_EXP 33
  61: PUSH
  62: LD_OWVAR 15
  66: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  67: LD_ADDR_EXP 37
  71: PUSH
  72: LD_OWVAR 16
  76: ST_TO_ADDR
// Teams = mp_teams ;
  77: LD_ADDR_EXP 34
  81: PUSH
  82: LD_OWVAR 12
  86: ST_TO_ADDR
// end else
  87: GO 298
// begin game_type = 12 ;
  89: LD_ADDR_EXP 1
  93: PUSH
  94: LD_INT 12
  96: ST_TO_ADDR
// Your_Side = 4 ;
  97: LD_ADDR_OWVAR 2
 101: PUSH
 102: LD_INT 4
 104: ST_TO_ADDR
// Player_Team = 1 ;
 105: LD_ADDR_EXP 32
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// Side_Positions = [ 0 , 2 , 0 , 4 , 0 , 1 , 3 , 0 ] ;
 113: LD_ADDR_EXP 36
 117: PUSH
 118: LD_INT 0
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: LD_INT 0
 126: PUSH
 127: LD_INT 4
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 1
 135: PUSH
 136: LD_INT 3
 138: PUSH
 139: LD_INT 0
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 1 , 0 , 2 , 2 , 0 ] ;
 152: LD_ADDR_EXP 33
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 191: LD_ADDR_EXP 37
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: LD_INT 3
 201: PUSH
 202: LD_INT 0
 204: PUSH
 205: LD_INT 2
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 3
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 230: LD_ADDR_EXP 35
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: LD_INT 0
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// Teams = [ [ 2 , 4 ] , [ 6 , 7 ] ] ;
 269: LD_ADDR_EXP 34
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: LD_INT 4
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: PUSH
 284: LD_INT 6
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 298: LD_ADDR_EXP 30
 302: PUSH
 303: LD_EXP 36
 307: PUSH
 308: LD_INT 0
 310: PUSH
 311: EMPTY
 312: LIST
 313: DIFF
 314: PUSH
 315: LD_INT 0
 317: PLUS
 318: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 319: LD_ADDR_EXP 31
 323: PUSH
 324: LD_EXP 33
 328: PUSH
 329: LD_INT 0
 331: PUSH
 332: EMPTY
 333: LIST
 334: DIFF
 335: PUSH
 336: LD_INT 0
 338: PLUS
 339: ST_TO_ADDR
// if MultiPlayer then
 340: LD_OWVAR 4
 344: IFFALSE 504
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 346: LD_ADDR_EXP 2
 350: PUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 359: LD_ADDR_EXP 3
 363: PUSH
 364: LD_INT 1
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 372: LD_ADDR_EXP 4
 376: PUSH
 377: LD_INT 2
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 385: LD_ADDR_EXP 5
 389: PUSH
 390: LD_INT 3
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 398: LD_ADDR_EXP 6
 402: PUSH
 403: LD_INT 4
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 10
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 424: LD_ADDR_EXP 8
 428: PUSH
 429: LD_INT 11
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 437: LD_ADDR_EXP 9
 441: PUSH
 442: LD_INT 12
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 13 ) ;
 450: LD_ADDR_EXP 10
 454: PUSH
 455: LD_INT 13
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 463: LD_ADDR_EXP 11
 467: PUSH
 468: LD_INT 14
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 476: LD_ADDR_EXP 12
 480: PUSH
 481: LD_INT 20
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 489: LD_ADDR_VAR 0 9
 493: PUSH
 494: LD_INT 22
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// end else
 502: GO 604
// begin randomize ;
 504: CALL_OW 10
// def_base_level = 3 ;
 508: LD_ADDR_EXP 2
 512: PUSH
 513: LD_INT 3
 515: ST_TO_ADDR
// def_amount_of_people = 1 ;
 516: LD_ADDR_EXP 3
 520: PUSH
 521: LD_INT 1
 523: ST_TO_ADDR
// def_initial_level = 1 ;
 524: LD_ADDR_EXP 4
 528: PUSH
 529: LD_INT 1
 531: ST_TO_ADDR
// def_starting_resources = 2 ;
 532: LD_ADDR_EXP 5
 536: PUSH
 537: LD_INT 2
 539: ST_TO_ADDR
// def_shipments_density = 1 ;
 540: LD_ADDR_EXP 6
 544: PUSH
 545: LD_INT 1
 547: ST_TO_ADDR
// def_shared_vision = 1 ;
 548: LD_ADDR_EXP 7
 552: PUSH
 553: LD_INT 1
 555: ST_TO_ADDR
// def_morale_flags = 3 ;
 556: LD_ADDR_EXP 8
 560: PUSH
 561: LD_INT 3
 563: ST_TO_ADDR
// def_siberite_detection = 0 ;
 564: LD_ADDR_EXP 9
 568: PUSH
 569: LD_INT 0
 571: ST_TO_ADDR
// def_siberite_bomb = 2 ;
 572: LD_ADDR_EXP 10
 576: PUSH
 577: LD_INT 2
 579: ST_TO_ADDR
// def_people_respawning = 2 ;
 580: LD_ADDR_EXP 11
 584: PUSH
 585: LD_INT 2
 587: ST_TO_ADDR
// def_builduptime := 1 ;
 588: LD_ADDR_EXP 12
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// tech_level = 6 ;
 596: LD_ADDR_VAR 0 9
 600: PUSH
 601: LD_INT 6
 603: ST_TO_ADDR
// end ; if isSGUI then
 604: LD_OWVAR 83
 608: IFFALSE 616
// setMpTechs ( ) else
 610: CALL 12040 0 0
 614: GO 629
// begin SetMpTechLevel ( tech_level + 1 ) ;
 616: LD_VAR 0 9
 620: PUSH
 621: LD_INT 1
 623: PLUS
 624: PPUSH
 625: CALL 12187 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 629: LD_ADDR_EXP 13
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: LD_INT 1
 642: PUSH
 643: LD_INT 1
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: PUSH
 652: LD_EXP 2
 656: PUSH
 657: LD_INT 1
 659: PLUS
 660: ARRAY
 661: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 662: LD_ADDR_EXP 14
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 4
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: LD_EXP 2
 689: PUSH
 690: LD_INT 1
 692: PLUS
 693: ARRAY
 694: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 695: LD_ADDR_EXP 15
 699: PUSH
 700: LD_INT 9
 702: PUSH
 703: LD_INT 12
 705: PUSH
 706: LD_INT 15
 708: PUSH
 709: LD_INT 24
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: PUSH
 718: LD_EXP 3
 722: PUSH
 723: LD_INT 1
 725: PLUS
 726: ARRAY
 727: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
 728: LD_ADDR_EXP 16
 732: PUSH
 733: LD_INT 2
 735: PUSH
 736: LD_INT 3
 738: PUSH
 739: LD_INT 4
 741: PUSH
 742: LD_INT 5
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: PUSH
 751: LD_EXP 4
 755: PUSH
 756: LD_INT 1
 758: PLUS
 759: ARRAY
 760: ST_TO_ADDR
// sci1_skills = [ [ 0 , 2 , 1 , 4 ] , [ 1 , 3 , 1 , 5 ] , [ 1 , 4 , 2 , 6 ] , [ 2 , 5 , 2 , 7 ] ] [ def_initial_level + 1 ] ;
 761: LD_ADDR_EXP 21
 765: PUSH
 766: LD_INT 0
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: LD_INT 1
 774: PUSH
 775: LD_INT 4
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 1
 786: PUSH
 787: LD_INT 3
 789: PUSH
 790: LD_INT 1
 792: PUSH
 793: LD_INT 5
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 4
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 6
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 2
 822: PUSH
 823: LD_INT 5
 825: PUSH
 826: LD_INT 2
 828: PUSH
 829: LD_INT 7
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: PUSH
 844: LD_EXP 4
 848: PUSH
 849: LD_INT 1
 851: PLUS
 852: ARRAY
 853: ST_TO_ADDR
// sci2_skills = [ [ 2 , 1 , 1 , 3 ] , [ 2 , 2 , 1 , 4 ] , [ 3 , 3 , 2 , 5 ] , [ 3 , 4 , 3 , 6 ] ] [ def_initial_level + 1 ] ;
 854: LD_ADDR_EXP 22
 858: PUSH
 859: LD_INT 2
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 1
 867: PUSH
 868: LD_INT 3
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: LD_INT 2
 879: PUSH
 880: LD_INT 2
 882: PUSH
 883: LD_INT 1
 885: PUSH
 886: LD_INT 4
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 3
 900: PUSH
 901: LD_INT 2
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 3
 915: PUSH
 916: LD_INT 4
 918: PUSH
 919: LD_INT 3
 921: PUSH
 922: LD_INT 6
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: PUSH
 937: LD_EXP 4
 941: PUSH
 942: LD_INT 1
 944: PLUS
 945: ARRAY
 946: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_INT 0
 954: PUSH
 955: LD_INT 0
 957: PUSH
 958: LD_INT 0
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 30
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 0
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 50
 982: PUSH
 983: LD_INT 20
 985: PUSH
 986: LD_INT 0
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 80
 996: PUSH
 997: LD_INT 40
 999: PUSH
1000: LD_INT 20
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_EXP 5
1018: PUSH
1019: LD_INT 1
1021: PLUS
1022: ARRAY
1023: ST_TO_ADDR
// starting_crates = [ [ 8 ] , [ 5 , 10 ] , [ 4 , 8 , 12 ] , [ 3 , 6 , 9 , 12 ] ] [ def_starting_resources + 1 ] ;
1024: LD_ADDR_EXP 17
1028: PUSH
1029: LD_INT 8
1031: PUSH
1032: EMPTY
1033: LIST
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 10
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 8
1050: PUSH
1051: LD_INT 12
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 3
1061: PUSH
1062: LD_INT 6
1064: PUSH
1065: LD_INT 9
1067: PUSH
1068: LD_INT 12
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: LD_EXP 5
1087: PUSH
1088: LD_INT 1
1090: PLUS
1091: ARRAY
1092: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1093: LD_ADDR_EXP 19
1097: PUSH
1098: LD_INT 20
1100: PUSH
1101: LD_INT 30
1103: PUSH
1104: LD_INT 40
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_EXP 6
1116: PUSH
1117: LD_INT 1
1119: PLUS
1120: ARRAY
1121: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1122: LD_ADDR_EXP 23
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 8400
1132: PUSH
1133: LD_INT 1750
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_EXP 11
1145: PUSH
1146: LD_INT 1
1148: PLUS
1149: ARRAY
1150: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1151: LD_ADDR_EXP 24
1155: PUSH
1156: LD_INT 0
1158: PUSH
1159: LD_INT 21000
1161: PUSH
1162: LD_INT 4200
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_EXP 11
1174: PUSH
1175: LD_INT 1
1177: PLUS
1178: ARRAY
1179: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1180: LD_ADDR_EXP 20
1184: PUSH
1185: LD_INT 1
1187: NEG
1188: PUSH
1189: LD_INT 350
1191: PUSH
1192: LD_INT 700
1194: PUSH
1195: LD_INT 1400
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_EXP 8
1212: PUSH
1213: LD_INT 1
1215: PLUS
1216: ARRAY
1217: ST_TO_ADDR
// battle_flags_id = [ ] ;
1218: LD_ADDR_EXP 47
1222: PUSH
1223: EMPTY
1224: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1225: LD_EXP 10
1229: PUSH
1230: LD_INT 0
1232: EQUAL
1233: IFFALSE 1245
// siberite_bomb_Delay = 0 else
1235: LD_ADDR_EXP 25
1239: PUSH
1240: LD_INT 0
1242: ST_TO_ADDR
1243: GO 1267
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1245: LD_ADDR_EXP 25
1249: PUSH
1250: LD_EXP 10
1254: PUSH
1255: LD_INT 1
1257: MINUS
1258: PUSH
1259: LD_INT 21000
1261: MUL
1262: PUSH
1263: LD_INT 1
1265: PLUS
1266: ST_TO_ADDR
// sci1 := [ ] ;
1267: LD_ADDR_EXP 28
1271: PUSH
1272: EMPTY
1273: ST_TO_ADDR
// sci2 := [ ] ;
1274: LD_ADDR_EXP 29
1278: PUSH
1279: EMPTY
1280: ST_TO_ADDR
// end ;
1281: LD_VAR 0 1
1285: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , br4 , un , i ; begin
1286: LD_INT 0
1288: PPUSH
1289: PPUSH
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
// depot_def = [ ] ;
1297: LD_ADDR_EXP 42
1301: PUSH
1302: EMPTY
1303: ST_TO_ADDR
// breastworks_def = [ ] ;
1304: LD_ADDR_EXP 43
1308: PUSH
1309: EMPTY
1310: ST_TO_ADDR
// for side := 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1751
// begin dep := side * 5 - 4 ;
1327: LD_ADDR_VAR 0 3
1331: PUSH
1332: LD_VAR 0 2
1336: PUSH
1337: LD_INT 5
1339: MUL
1340: PUSH
1341: LD_INT 4
1343: MINUS
1344: ST_TO_ADDR
// br1 := side * 5 - 3 ;
1345: LD_ADDR_VAR 0 4
1349: PUSH
1350: LD_VAR 0 2
1354: PUSH
1355: LD_INT 5
1357: MUL
1358: PUSH
1359: LD_INT 3
1361: MINUS
1362: ST_TO_ADDR
// br2 := side * 5 - 2 ;
1363: LD_ADDR_VAR 0 5
1367: PUSH
1368: LD_VAR 0 2
1372: PUSH
1373: LD_INT 5
1375: MUL
1376: PUSH
1377: LD_INT 2
1379: MINUS
1380: ST_TO_ADDR
// br3 := side * 5 - 1 ;
1381: LD_ADDR_VAR 0 6
1385: PUSH
1386: LD_VAR 0 2
1390: PUSH
1391: LD_INT 5
1393: MUL
1394: PUSH
1395: LD_INT 1
1397: MINUS
1398: ST_TO_ADDR
// br4 := side * 5 ;
1399: LD_ADDR_VAR 0 7
1403: PUSH
1404: LD_VAR 0 2
1408: PUSH
1409: LD_INT 5
1411: MUL
1412: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1413: LD_ADDR_EXP 42
1417: PUSH
1418: LD_EXP 42
1422: PUSH
1423: LD_VAR 0 3
1427: PPUSH
1428: CALL_OW 250
1432: PUSH
1433: LD_VAR 0 3
1437: PPUSH
1438: CALL_OW 251
1442: PUSH
1443: LD_VAR 0 3
1447: PPUSH
1448: CALL_OW 254
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: PUSH
1458: EMPTY
1459: LIST
1460: ADD
1461: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) ] ] ;
1462: LD_ADDR_EXP 44
1466: PUSH
1467: LD_EXP 44
1471: PUSH
1472: LD_VAR 0 3
1476: PPUSH
1477: CALL_OW 250
1481: PPUSH
1482: LD_VAR 0 3
1486: PPUSH
1487: CALL_OW 254
1491: PUSH
1492: LD_INT 6
1494: MOD
1495: PPUSH
1496: LD_INT 6
1498: PPUSH
1499: CALL_OW 272
1503: PUSH
1504: LD_VAR 0 3
1508: PPUSH
1509: CALL_OW 251
1513: PPUSH
1514: LD_VAR 0 3
1518: PPUSH
1519: CALL_OW 254
1523: PUSH
1524: LD_INT 6
1526: MOD
1527: PPUSH
1528: LD_INT 6
1530: PPUSH
1531: CALL_OW 273
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: EMPTY
1541: LIST
1542: ADD
1543: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] , [ GetX ( br4 ) , GetY ( br4 ) , GetDir ( br4 ) ] ] ] ;
1544: LD_ADDR_EXP 43
1548: PUSH
1549: LD_EXP 43
1553: PUSH
1554: LD_VAR 0 4
1558: PPUSH
1559: CALL_OW 250
1563: PUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 251
1573: PUSH
1574: LD_VAR 0 4
1578: PPUSH
1579: CALL_OW 254
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_VAR 0 5
1593: PPUSH
1594: CALL_OW 250
1598: PUSH
1599: LD_VAR 0 5
1603: PPUSH
1604: CALL_OW 251
1608: PUSH
1609: LD_VAR 0 5
1613: PPUSH
1614: CALL_OW 254
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_VAR 0 6
1628: PPUSH
1629: CALL_OW 250
1633: PUSH
1634: LD_VAR 0 6
1638: PPUSH
1639: CALL_OW 251
1643: PUSH
1644: LD_VAR 0 6
1648: PPUSH
1649: CALL_OW 254
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_VAR 0 7
1663: PPUSH
1664: CALL_OW 250
1668: PUSH
1669: LD_VAR 0 7
1673: PPUSH
1674: CALL_OW 251
1678: PUSH
1679: LD_VAR 0 7
1683: PPUSH
1684: CALL_OW 254
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: EMPTY
1701: LIST
1702: ADD
1703: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1704: LD_VAR 0 3
1708: PPUSH
1709: CALL_OW 65
// DestroyUnit ( br1 ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL_OW 65
// DestroyUnit ( br2 ) ;
1722: LD_VAR 0 5
1726: PPUSH
1727: CALL_OW 65
// DestroyUnit ( br3 ) ;
1731: LD_VAR 0 6
1735: PPUSH
1736: CALL_OW 65
// DestroyUnit ( br4 ) ;
1740: LD_VAR 0 7
1744: PPUSH
1745: CALL_OW 65
// end ;
1749: GO 1324
1751: POP
1752: POP
// teleport_def = [ [ 19 , 16 , 0 ] , [ 108 , 9 , 1 ] , [ 62 , 112 , 2 ] , [ 157 , 126 , 1 ] ] ;
1753: LD_ADDR_EXP 45
1757: PUSH
1758: LD_INT 19
1760: PUSH
1761: LD_INT 16
1763: PUSH
1764: LD_INT 0
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 108
1774: PUSH
1775: LD_INT 9
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 62
1788: PUSH
1789: LD_INT 112
1791: PUSH
1792: LD_INT 2
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 157
1802: PUSH
1803: LD_INT 126
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: ST_TO_ADDR
// end ;
1820: LD_VAR 0 1
1824: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1825: LD_INT 0
1827: PPUSH
1828: PPUSH
1829: PPUSH
// Team_Game := 0 ;
1830: LD_ADDR_EXP 41
1834: PUSH
1835: LD_INT 0
1837: ST_TO_ADDR
// for i = 1 to 8 do
1838: LD_ADDR_VAR 0 2
1842: PUSH
1843: DOUBLE
1844: LD_INT 1
1846: DEC
1847: ST_TO_ADDR
1848: LD_INT 8
1850: PUSH
1851: FOR_TO
1852: IFFALSE 1878
// Team_Game := Team_Game + Side_Teams [ i ] ;
1854: LD_ADDR_EXP 41
1858: PUSH
1859: LD_EXP 41
1863: PUSH
1864: LD_EXP 33
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PLUS
1875: ST_TO_ADDR
1876: GO 1851
1878: POP
1879: POP
// if not Team_Game then
1880: LD_EXP 41
1884: NOT
1885: IFFALSE 1897
// Team_Game := false else
1887: LD_ADDR_EXP 41
1891: PUSH
1892: LD_INT 0
1894: ST_TO_ADDR
1895: GO 1905
// Team_Game := true ;
1897: LD_ADDR_EXP 41
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// if not Team_Game then
1905: LD_EXP 41
1909: NOT
1910: IFFALSE 2008
// begin for i = 1 to 8 do
1912: LD_ADDR_VAR 0 2
1916: PUSH
1917: DOUBLE
1918: LD_INT 1
1920: DEC
1921: ST_TO_ADDR
1922: LD_INT 8
1924: PUSH
1925: FOR_TO
1926: IFFALSE 2004
// for j = 1 to 8 do
1928: LD_ADDR_VAR 0 3
1932: PUSH
1933: DOUBLE
1934: LD_INT 1
1936: DEC
1937: ST_TO_ADDR
1938: LD_INT 8
1940: PUSH
1941: FOR_TO
1942: IFFALSE 2000
// if i <> j then
1944: LD_VAR 0 2
1948: PUSH
1949: LD_VAR 0 3
1953: NONEQUAL
1954: IFFALSE 1978
// SetAttitude ( i , j , att_neutral , true ) else
1956: LD_VAR 0 2
1960: PPUSH
1961: LD_VAR 0 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: LD_INT 1
1971: PPUSH
1972: CALL_OW 80
1976: GO 1998
// SetAttitude ( i , j , att_friend , true ) ;
1978: LD_VAR 0 2
1982: PPUSH
1983: LD_VAR 0 3
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL_OW 80
1998: GO 1941
2000: POP
2001: POP
2002: GO 1925
2004: POP
2005: POP
// end else
2006: GO 2183
// begin if def_shared_vision then
2008: LD_EXP 7
2012: IFFALSE 2077
// begin for i in Teams do
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: LD_EXP 34
2023: PUSH
2024: FOR_IN
2025: IFFALSE 2075
// for j = 2 to i do
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: DOUBLE
2033: LD_INT 2
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 2
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2071
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2045: LD_VAR 0 2
2049: PUSH
2050: LD_VAR 0 3
2054: ARRAY
2055: PPUSH
2056: LD_VAR 0 2
2060: PUSH
2061: LD_INT 1
2063: ARRAY
2064: PPUSH
2065: CALL_OW 343
2069: GO 2042
2071: POP
2072: POP
2073: GO 2024
2075: POP
2076: POP
// end ; for i = 1 to 8 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 8
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2181
// for j = 1 to 8 do
2093: LD_ADDR_VAR 0 3
2097: PUSH
2098: DOUBLE
2099: LD_INT 1
2101: DEC
2102: ST_TO_ADDR
2103: LD_INT 8
2105: PUSH
2106: FOR_TO
2107: IFFALSE 2177
// if Side_Teams [ i ] = Side_Teams [ j ] then
2109: LD_EXP 33
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_EXP 33
2124: PUSH
2125: LD_VAR 0 3
2129: ARRAY
2130: EQUAL
2131: IFFALSE 2155
// SetAttitude ( i , j , att_friend , true ) else
2133: LD_VAR 0 2
2137: PPUSH
2138: LD_VAR 0 3
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 1
2148: PPUSH
2149: CALL_OW 80
2153: GO 2175
// SetAttitude ( i , j , att_enemy , true ) ;
2155: LD_VAR 0 2
2159: PPUSH
2160: LD_VAR 0 3
2164: PPUSH
2165: LD_INT 2
2167: PPUSH
2168: LD_INT 1
2170: PPUSH
2171: CALL_OW 80
2175: GO 2106
2177: POP
2178: POP
2179: GO 2090
2181: POP
2182: POP
// end ; end ;
2183: LD_VAR 0 1
2187: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2188: LD_INT 0
2190: PPUSH
2191: PPUSH
2192: PPUSH
2193: PPUSH
// result := [ ] ;
2194: LD_ADDR_VAR 0 8
2198: PUSH
2199: EMPTY
2200: ST_TO_ADDR
// for i := 1 to count do
2201: LD_ADDR_VAR 0 9
2205: PUSH
2206: DOUBLE
2207: LD_INT 1
2209: DEC
2210: ST_TO_ADDR
2211: LD_VAR 0 2
2215: PUSH
2216: FOR_TO
2217: IFFALSE 2611
// begin uc_direction := Rand ( 0 , 5 ) ;
2219: LD_ADDR_OWVAR 24
2223: PUSH
2224: LD_INT 0
2226: PPUSH
2227: LD_INT 5
2229: PPUSH
2230: CALL_OW 12
2234: ST_TO_ADDR
// if commander then
2235: LD_FROM_VAR 0 7
2239: IFFALSE 2348
// begin hc_name := mp_sides_players_names [ side ] ;
2241: LD_ADDR_OWVAR 26
2245: PUSH
2246: LD_OWVAR 19
2250: PUSH
2251: LD_VAR 0 1
2255: ARRAY
2256: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2257: LD_INT 1
2259: PPUSH
2260: LD_INT 2
2262: PPUSH
2263: CALL_OW 12
2267: PPUSH
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_EXP 16
2277: PUSH
2278: LD_INT 2
2280: PLUS
2281: PPUSH
2282: CALL_OW 380
// hc_importance := 105 ;
2286: LD_ADDR_OWVAR 32
2290: PUSH
2291: LD_INT 105
2293: ST_TO_ADDR
// commander := false ;
2294: LD_VAR 0 7
2298: PUSH
2299: LD_INT 0
2301: ST_TO_ADDR
// if Multiplayer then
2302: LD_OWVAR 4
2306: IFFALSE 2346
// begin hc_gallery := MULTIAVATARS ;
2308: LD_ADDR_OWVAR 33
2312: PUSH
2313: LD_STRING MULTIAVATARS
2315: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2316: LD_ADDR_OWVAR 34
2320: PUSH
2321: LD_VAR 0 1
2325: PPUSH
2326: CALL_OW 525
2330: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2331: LD_ADDR_OWVAR 27
2335: PUSH
2336: LD_VAR 0 1
2340: PPUSH
2341: CALL_OW 526
2345: ST_TO_ADDR
// end ; end else
2346: GO 2411
// begin hc_name :=  ;
2348: LD_ADDR_OWVAR 26
2352: PUSH
2353: LD_STRING 
2355: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 2
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: LD_EXP 16
2376: PPUSH
2377: CALL_OW 380
// hc_importance := 0 ;
2381: LD_ADDR_OWVAR 32
2385: PUSH
2386: LD_INT 0
2388: ST_TO_ADDR
// if Multiplayer then
2389: LD_OWVAR 4
2393: IFFALSE 2411
// begin hc_gallery :=  ;
2395: LD_ADDR_OWVAR 33
2399: PUSH
2400: LD_STRING 
2402: ST_TO_ADDR
// hc_face_number := 0 ;
2403: LD_ADDR_OWVAR 34
2407: PUSH
2408: LD_INT 0
2410: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2411: LD_ADDR_VAR 0 11
2415: PUSH
2416: CALL_OW 44
2420: ST_TO_ADDR
// if global_defined then
2421: LD_LOC 2
2425: IFFALSE 2563
// begin j := i ;
2427: LD_ADDR_VAR 0 10
2431: PUSH
2432: LD_VAR 0 9
2436: ST_TO_ADDR
// if cl = class_soldier then
2437: LD_VAR 0 3
2441: PUSH
2442: LD_INT 1
2444: EQUAL
2445: IFFALSE 2463
// j := i + soldiers_created ;
2447: LD_ADDR_VAR 0 10
2451: PUSH
2452: LD_VAR 0 9
2456: PUSH
2457: LD_LOC 3
2461: PLUS
2462: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2463: LD_LOC 1
2467: PUSH
2468: LD_VAR 0 3
2472: ARRAY
2473: PUSH
2474: LD_VAR 0 10
2478: ARRAY
2479: PPUSH
2480: LD_VAR 0 11
2484: PPUSH
2485: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2489: LD_VAR 0 11
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: LD_LOC 1
2501: PUSH
2502: LD_VAR 0 3
2506: ARRAY
2507: PUSH
2508: LD_VAR 0 10
2512: ARRAY
2513: PPUSH
2514: LD_INT 2
2516: PPUSH
2517: CALL_OW 260
2521: PPUSH
2522: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2526: LD_VAR 0 11
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: LD_LOC 1
2538: PUSH
2539: LD_VAR 0 3
2543: ARRAY
2544: PUSH
2545: LD_VAR 0 10
2549: ARRAY
2550: PPUSH
2551: LD_INT 1
2553: PPUSH
2554: CALL_OW 260
2558: PPUSH
2559: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2563: LD_VAR 0 11
2567: PPUSH
2568: LD_VAR 0 4
2572: PPUSH
2573: LD_VAR 0 5
2577: PPUSH
2578: LD_VAR 0 6
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: CALL_OW 50
// result := result ^ [ un ] ;
2590: LD_ADDR_VAR 0 8
2594: PUSH
2595: LD_VAR 0 8
2599: PUSH
2600: LD_VAR 0 11
2604: PUSH
2605: EMPTY
2606: LIST
2607: ADD
2608: ST_TO_ADDR
// end ;
2609: GO 2216
2611: POP
2612: POP
// if not global_defined then
2613: LD_LOC 2
2617: NOT
2618: IFFALSE 2680
// if cl = class_soldier and global_units then
2620: LD_VAR 0 3
2624: PUSH
2625: LD_INT 1
2627: EQUAL
2628: PUSH
2629: LD_LOC 1
2633: AND
2634: IFFALSE 2661
// global_units := [ global_units [ 1 ] ^ result ] else
2636: LD_ADDR_LOC 1
2640: PUSH
2641: LD_LOC 1
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: PUSH
2650: LD_VAR 0 8
2654: ADD
2655: PUSH
2656: EMPTY
2657: LIST
2658: ST_TO_ADDR
2659: GO 2680
// global_units := global_units ^ [ result ] end ;
2661: LD_ADDR_LOC 1
2665: PUSH
2666: LD_LOC 1
2670: PUSH
2671: LD_VAR 0 8
2675: PUSH
2676: EMPTY
2677: LIST
2678: ADD
2679: ST_TO_ADDR
2680: LD_VAR 0 8
2684: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol , t , n1 , n2 ; begin
2685: LD_INT 0
2687: PPUSH
2688: PPUSH
2689: PPUSH
2690: PPUSH
2691: PPUSH
2692: PPUSH
2693: PPUSH
2694: PPUSH
2695: PPUSH
2696: PPUSH
2697: PPUSH
2698: PPUSH
2699: PPUSH
2700: PPUSH
2701: PPUSH
2702: PPUSH
// pos := Side_Positions [ side ] ;
2703: LD_ADDR_VAR 0 3
2707: PUSH
2708: LD_EXP 36
2712: PUSH
2713: LD_VAR 0 1
2717: ARRAY
2718: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2719: LD_ADDR_OWVAR 21
2723: PUSH
2724: LD_EXP 37
2728: PUSH
2729: LD_VAR 0 1
2733: ARRAY
2734: ST_TO_ADDR
// uc_side := side ;
2735: LD_ADDR_OWVAR 20
2739: PUSH
2740: LD_VAR 0 1
2744: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2745: LD_ADDR_VAR 0 4
2749: PUSH
2750: LD_EXP 42
2754: PUSH
2755: LD_VAR 0 3
2759: ARRAY
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2765: LD_ADDR_VAR 0 5
2769: PUSH
2770: LD_EXP 42
2774: PUSH
2775: LD_VAR 0 3
2779: ARRAY
2780: PUSH
2781: LD_INT 2
2783: ARRAY
2784: ST_TO_ADDR
// if is_depot then
2785: LD_EXP 13
2789: IFFALSE 2932
// begin bc_type = b_depot ;
2791: LD_ADDR_OWVAR 42
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
2799: LD_ADDR_VAR 0 10
2803: PUSH
2804: LD_VAR 0 4
2808: PPUSH
2809: LD_VAR 0 5
2813: PPUSH
2814: LD_EXP 42
2818: PUSH
2819: LD_VAR 0 3
2823: ARRAY
2824: PUSH
2825: LD_INT 3
2827: ARRAY
2828: PPUSH
2829: CALL_OW 47
2833: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2834: LD_VAR 0 10
2838: PPUSH
2839: LD_STRING @
2841: PUSH
2842: LD_VAR 0 1
2846: STR
2847: PPUSH
2848: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2852: LD_VAR 0 10
2856: PPUSH
2857: CALL_OW 274
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_EXP 18
2869: PUSH
2870: LD_INT 1
2872: ARRAY
2873: PPUSH
2874: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2878: LD_VAR 0 10
2882: PPUSH
2883: CALL_OW 274
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: LD_EXP 18
2895: PUSH
2896: LD_INT 2
2898: ARRAY
2899: PPUSH
2900: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2904: LD_VAR 0 2
2908: PPUSH
2909: CALL_OW 274
2913: PPUSH
2914: LD_INT 3
2916: PPUSH
2917: LD_EXP 18
2921: PUSH
2922: LD_INT 3
2924: ARRAY
2925: PPUSH
2926: CALL_OW 277
// end else
2930: GO 3076
// begin for i := 1 to 3 do
2932: LD_ADDR_VAR 0 6
2936: PUSH
2937: DOUBLE
2938: LD_INT 1
2940: DEC
2941: ST_TO_ADDR
2942: LD_INT 3
2944: PUSH
2945: FOR_TO
2946: IFFALSE 3074
// begin r := starting_resources [ i ] ;
2948: LD_ADDR_VAR 0 7
2952: PUSH
2953: LD_EXP 18
2957: PUSH
2958: LD_VAR 0 6
2962: ARRAY
2963: ST_TO_ADDR
// while r >= 10 do
2964: LD_VAR 0 7
2968: PUSH
2969: LD_INT 10
2971: GREATEREQUAL
2972: IFFALSE 3072
// if r > 50 then
2974: LD_VAR 0 7
2978: PUSH
2979: LD_INT 50
2981: GREATER
2982: IFFALSE 3028
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
2984: LD_VAR 0 6
2988: PPUSH
2989: LD_INT 5
2991: PPUSH
2992: LD_VAR 0 4
2996: PPUSH
2997: LD_VAR 0 5
3001: PPUSH
3002: LD_INT 4
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL_OW 60
// r := r - 50 ;
3012: LD_ADDR_VAR 0 7
3016: PUSH
3017: LD_VAR 0 7
3021: PUSH
3022: LD_INT 50
3024: MINUS
3025: ST_TO_ADDR
// end else
3026: GO 3070
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3028: LD_VAR 0 6
3032: PPUSH
3033: LD_VAR 0 7
3037: PUSH
3038: LD_INT 10
3040: DIV
3041: PPUSH
3042: LD_VAR 0 4
3046: PPUSH
3047: LD_VAR 0 5
3051: PPUSH
3052: LD_INT 4
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 60
// r := 0 ;
3062: LD_ADDR_VAR 0 7
3066: PUSH
3067: LD_INT 0
3069: ST_TO_ADDR
// end ;
3070: GO 2964
// end ;
3072: GO 2945
3074: POP
3075: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_EXP 44
3085: PUSH
3086: LD_VAR 0 3
3090: ARRAY
3091: PUSH
3092: LD_INT 1
3094: ARRAY
3095: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_EXP 44
3105: PUSH
3106: LD_VAR 0 3
3110: ARRAY
3111: PUSH
3112: LD_INT 2
3114: ARRAY
3115: ST_TO_ADDR
// for r in starting_crates do
3116: LD_ADDR_VAR 0 7
3120: PUSH
3121: LD_EXP 17
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3159
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3129: LD_INT 1
3131: PPUSH
3132: LD_INT 5
3134: PPUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: LD_VAR 0 5
3144: PPUSH
3145: LD_VAR 0 7
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 60
3157: GO 3126
3159: POP
3160: POP
// if def_morale_flags then
3161: LD_EXP 8
3165: IFFALSE 3244
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3167: LD_ADDR_EXP 47
3171: PUSH
3172: LD_EXP 47
3176: PUSH
3177: LD_VAR 0 1
3181: PPUSH
3182: LD_VAR 0 4
3186: PPUSH
3187: LD_VAR 0 5
3191: PPUSH
3192: LD_INT 1
3194: PUSH
3195: LD_INT 100
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 50
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 3
3214: PUSH
3215: LD_INT 20
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: LD_INT 20
3224: PUSH
3225: LD_INT 100
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: PPUSH
3238: CALL_OW 418
3242: ADD
3243: ST_TO_ADDR
// commander := true ;
3244: LD_ADDR_EXP 46
3248: PUSH
3249: LD_INT 1
3251: ST_TO_ADDR
// if game_type in [ 11 , 12 ] then
3252: LD_EXP 1
3256: PUSH
3257: LD_INT 11
3259: PUSH
3260: LD_INT 12
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: IN
3267: IFFALSE 4122
// begin uc_nation = nation_russian ;
3269: LD_ADDR_OWVAR 21
3273: PUSH
3274: LD_INT 3
3276: ST_TO_ADDR
// bc_type = b_teleport ;
3277: LD_ADDR_OWVAR 42
3281: PUSH
3282: LD_INT 34
3284: ST_TO_ADDR
// bc_level = 10 ;
3285: LD_ADDR_OWVAR 43
3289: PUSH
3290: LD_INT 10
3292: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , teleport_def [ pos ] [ 3 ] ) ;
3293: LD_EXP 45
3297: PUSH
3298: LD_VAR 0 3
3302: ARRAY
3303: PUSH
3304: LD_INT 1
3306: ARRAY
3307: PPUSH
3308: LD_EXP 45
3312: PUSH
3313: LD_VAR 0 3
3317: ARRAY
3318: PUSH
3319: LD_INT 2
3321: ARRAY
3322: PPUSH
3323: LD_EXP 45
3327: PUSH
3328: LD_VAR 0 3
3332: ARRAY
3333: PUSH
3334: LD_INT 3
3336: ARRAY
3337: PPUSH
3338: CALL_OW 47
// if game_type = 12 then
3342: LD_EXP 1
3346: PUSH
3347: LD_INT 12
3349: EQUAL
3350: IFFALSE 3386
// if ( side in Teams [ 1 ] ) then
3352: LD_VAR 0 1
3356: PUSH
3357: LD_EXP 34
3361: PUSH
3362: LD_INT 1
3364: ARRAY
3365: IN
3366: IFFALSE 3378
// t := 1 else
3368: LD_ADDR_VAR 0 15
3372: PUSH
3373: LD_INT 1
3375: ST_TO_ADDR
3376: GO 3386
// t := 2 ;
3378: LD_ADDR_VAR 0 15
3382: PUSH
3383: LD_INT 2
3385: ST_TO_ADDR
// hc_importance = 101 ;
3386: LD_ADDR_OWVAR 32
3390: PUSH
3391: LD_INT 101
3393: ST_TO_ADDR
// commander := false ;
3394: LD_ADDR_EXP 46
3398: PUSH
3399: LD_INT 0
3401: ST_TO_ADDR
// n1 := false ;
3402: LD_ADDR_VAR 0 16
3406: PUSH
3407: LD_INT 0
3409: ST_TO_ADDR
// n2 := false ;
3410: LD_ADDR_VAR 0 17
3414: PUSH
3415: LD_INT 0
3417: ST_TO_ADDR
// if ( teams [ t ] + 0 ) = 1 then
3418: LD_EXP 34
3422: PUSH
3423: LD_VAR 0 15
3427: ARRAY
3428: PUSH
3429: LD_INT 0
3431: PLUS
3432: PUSH
3433: LD_INT 1
3435: EQUAL
3436: IFFALSE 3456
// begin n1 := true ;
3438: LD_ADDR_VAR 0 16
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// n2 := true ;
3446: LD_ADDR_VAR 0 17
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// end else
3454: GO 3612
// if t = 1 then
3456: LD_VAR 0 15
3460: PUSH
3461: LD_INT 1
3463: EQUAL
3464: IFFALSE 3540
// if sci1 then
3466: LD_EXP 28
3470: IFFALSE 3511
// if GetSex ( sci1 [ 1 ] ) = sex_male then
3472: LD_EXP 28
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 258
3485: PUSH
3486: LD_INT 1
3488: EQUAL
3489: IFFALSE 3501
// n2 := true else
3491: LD_ADDR_VAR 0 17
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
3499: GO 3509
// n1 := true else
3501: LD_ADDR_VAR 0 16
3505: PUSH
3506: LD_INT 1
3508: ST_TO_ADDR
3509: GO 3538
// if Prob ( 50 ) then
3511: LD_INT 50
3513: PPUSH
3514: CALL_OW 13
3518: IFFALSE 3530
// n1 := true else
3520: LD_ADDR_VAR 0 16
3524: PUSH
3525: LD_INT 1
3527: ST_TO_ADDR
3528: GO 3538
// n2 := true else
3530: LD_ADDR_VAR 0 17
3534: PUSH
3535: LD_INT 1
3537: ST_TO_ADDR
3538: GO 3612
// if sci2 then
3540: LD_EXP 29
3544: IFFALSE 3585
// if GetSex ( sci2 [ 1 ] ) = sex_male then
3546: LD_EXP 29
3550: PUSH
3551: LD_INT 1
3553: ARRAY
3554: PPUSH
3555: CALL_OW 258
3559: PUSH
3560: LD_INT 1
3562: EQUAL
3563: IFFALSE 3575
// n2 := true else
3565: LD_ADDR_VAR 0 17
3569: PUSH
3570: LD_INT 1
3572: ST_TO_ADDR
3573: GO 3583
// n1 := true else
3575: LD_ADDR_VAR 0 16
3579: PUSH
3580: LD_INT 1
3582: ST_TO_ADDR
3583: GO 3612
// if Prob ( 50 ) then
3585: LD_INT 50
3587: PPUSH
3588: CALL_OW 13
3592: IFFALSE 3604
// n1 := true else
3594: LD_ADDR_VAR 0 16
3598: PUSH
3599: LD_INT 1
3601: ST_TO_ADDR
3602: GO 3612
// n2 := true ;
3604: LD_ADDR_VAR 0 17
3608: PUSH
3609: LD_INT 1
3611: ST_TO_ADDR
// if n1 then
3612: LD_VAR 0 16
3616: IFFALSE 3852
// begin hc_name = Prof. Garin ;
3618: LD_ADDR_OWVAR 26
3622: PUSH
3623: LD_STRING Prof. Garin
3625: ST_TO_ADDR
// hc_sex = sex_male ;
3626: LD_ADDR_OWVAR 27
3630: PUSH
3631: LD_INT 1
3633: ST_TO_ADDR
// hc_class = class_scientistic ;
3634: LD_ADDR_OWVAR 28
3638: PUSH
3639: LD_INT 4
3641: ST_TO_ADDR
// hc_gallery = multi ;
3642: LD_ADDR_OWVAR 33
3646: PUSH
3647: LD_STRING multi
3649: ST_TO_ADDR
// hc_face_number = 2 ;
3650: LD_ADDR_OWVAR 34
3654: PUSH
3655: LD_INT 2
3657: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
3658: LD_ADDR_OWVAR 29
3662: PUSH
3663: LD_INT 11
3665: PUSH
3666: LD_INT 10
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: ST_TO_ADDR
// hc_basic_skills = [ 0 , 1 , 0 , 2 ] ;
3673: LD_ADDR_OWVAR 30
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 1
3683: PUSH
3684: LD_INT 0
3686: PUSH
3687: LD_INT 2
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: ST_TO_ADDR
// hc_skills = sci1_skills ;
3696: LD_ADDR_OWVAR 31
3700: PUSH
3701: LD_EXP 21
3705: ST_TO_ADDR
// if t = 1 then
3706: LD_VAR 0 15
3710: PUSH
3711: LD_INT 1
3713: EQUAL
3714: IFFALSE 3785
// begin sci1 := sci1 ^ CreateHuman ;
3716: LD_ADDR_EXP 28
3720: PUSH
3721: LD_EXP 28
3725: PUSH
3726: CALL_OW 44
3730: ADD
3731: ST_TO_ADDR
// PlaceUnitXYR ( sci1 [ sci1 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3732: LD_EXP 28
3736: PUSH
3737: LD_EXP 28
3741: ARRAY
3742: PPUSH
3743: LD_EXP 45
3747: PUSH
3748: LD_VAR 0 3
3752: ARRAY
3753: PUSH
3754: LD_INT 1
3756: ARRAY
3757: PPUSH
3758: LD_EXP 45
3762: PUSH
3763: LD_VAR 0 3
3767: ARRAY
3768: PUSH
3769: LD_INT 2
3771: ARRAY
3772: PPUSH
3773: LD_INT 4
3775: PPUSH
3776: LD_INT 0
3778: PPUSH
3779: CALL_OW 50
// end else
3783: GO 3852
// begin sci2 := sci2 ^ CreateHuman ;
3785: LD_ADDR_EXP 29
3789: PUSH
3790: LD_EXP 29
3794: PUSH
3795: CALL_OW 44
3799: ADD
3800: ST_TO_ADDR
// PlaceUnitXYR ( sci2 [ sci2 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3801: LD_EXP 29
3805: PUSH
3806: LD_EXP 29
3810: ARRAY
3811: PPUSH
3812: LD_EXP 45
3816: PUSH
3817: LD_VAR 0 3
3821: ARRAY
3822: PUSH
3823: LD_INT 1
3825: ARRAY
3826: PPUSH
3827: LD_EXP 45
3831: PUSH
3832: LD_VAR 0 3
3836: ARRAY
3837: PUSH
3838: LD_INT 2
3840: ARRAY
3841: PPUSH
3842: LD_INT 4
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 50
// end end ; if n2 then
3852: LD_VAR 0 17
3856: IFFALSE 4092
// begin hc_name = Tanya Garinova ;
3858: LD_ADDR_OWVAR 26
3862: PUSH
3863: LD_STRING Tanya Garinova
3865: ST_TO_ADDR
// hc_sex = sex_female ;
3866: LD_ADDR_OWVAR 27
3870: PUSH
3871: LD_INT 2
3873: ST_TO_ADDR
// hc_class = class_scientistic ;
3874: LD_ADDR_OWVAR 28
3878: PUSH
3879: LD_INT 4
3881: ST_TO_ADDR
// hc_gallery = multi ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING multi
3889: ST_TO_ADDR
// hc_face_number = 1 ;
3890: LD_ADDR_OWVAR 34
3894: PUSH
3895: LD_INT 1
3897: ST_TO_ADDR
// hc_attr = [ 9 , 11 ] ;
3898: LD_ADDR_OWVAR 29
3902: PUSH
3903: LD_INT 9
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: ST_TO_ADDR
// hc_basic_skills = [ 1 , 1 , 0 , 1 ] ;
3913: LD_ADDR_OWVAR 30
3917: PUSH
3918: LD_INT 1
3920: PUSH
3921: LD_INT 1
3923: PUSH
3924: LD_INT 0
3926: PUSH
3927: LD_INT 1
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: ST_TO_ADDR
// hc_skills = sci2_skills ;
3936: LD_ADDR_OWVAR 31
3940: PUSH
3941: LD_EXP 22
3945: ST_TO_ADDR
// if t = 1 then
3946: LD_VAR 0 15
3950: PUSH
3951: LD_INT 1
3953: EQUAL
3954: IFFALSE 4025
// begin sci1 := sci1 ^ CreateHuman ;
3956: LD_ADDR_EXP 28
3960: PUSH
3961: LD_EXP 28
3965: PUSH
3966: CALL_OW 44
3970: ADD
3971: ST_TO_ADDR
// PlaceUnitXYR ( sci1 [ sci1 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3972: LD_EXP 28
3976: PUSH
3977: LD_EXP 28
3981: ARRAY
3982: PPUSH
3983: LD_EXP 45
3987: PUSH
3988: LD_VAR 0 3
3992: ARRAY
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: LD_EXP 45
4002: PUSH
4003: LD_VAR 0 3
4007: ARRAY
4008: PUSH
4009: LD_INT 2
4011: ARRAY
4012: PPUSH
4013: LD_INT 4
4015: PPUSH
4016: LD_INT 0
4018: PPUSH
4019: CALL_OW 50
// end else
4023: GO 4092
// begin sci2 := sci2 ^ CreateHuman ;
4025: LD_ADDR_EXP 29
4029: PUSH
4030: LD_EXP 29
4034: PUSH
4035: CALL_OW 44
4039: ADD
4040: ST_TO_ADDR
// PlaceUnitXYR ( sci2 [ sci2 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
4041: LD_EXP 29
4045: PUSH
4046: LD_EXP 29
4050: ARRAY
4051: PPUSH
4052: LD_EXP 45
4056: PUSH
4057: LD_VAR 0 3
4061: ARRAY
4062: PUSH
4063: LD_INT 1
4065: ARRAY
4066: PPUSH
4067: LD_EXP 45
4071: PUSH
4072: LD_VAR 0 3
4076: ARRAY
4077: PUSH
4078: LD_INT 2
4080: ARRAY
4081: PPUSH
4082: LD_INT 4
4084: PPUSH
4085: LD_INT 0
4087: PPUSH
4088: CALL_OW 50
// end end ; SetTech ( tech_TargTeleport , side , state_researched ) ;
4092: LD_INT 38
4094: PPUSH
4095: LD_VAR 0 1
4099: PPUSH
4100: LD_INT 2
4102: PPUSH
4103: CALL_OW 322
// SetRestrict ( b_teleport , side , state_disabled ) ;
4107: LD_INT 34
4109: PPUSH
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_INT 0
4117: PPUSH
4118: CALL_OW 324
// end ; uc_nation = Side_nations [ side ] ;
4122: LD_ADDR_OWVAR 21
4126: PUSH
4127: LD_EXP 37
4131: PUSH
4132: LD_VAR 0 1
4136: ARRAY
4137: ST_TO_ADDR
// hc_gallery =  ;
4138: LD_ADDR_OWVAR 33
4142: PUSH
4143: LD_STRING 
4145: ST_TO_ADDR
// hc_name =  ;
4146: LD_ADDR_OWVAR 26
4150: PUSH
4151: LD_STRING 
4153: ST_TO_ADDR
// neng := number_of_people ;
4154: LD_ADDR_VAR 0 11
4158: PUSH
4159: LD_EXP 15
4163: ST_TO_ADDR
// nsol := number_of_breastworks ;
4164: LD_ADDR_VAR 0 14
4168: PUSH
4169: LD_EXP 14
4173: ST_TO_ADDR
// if nsol < neng div 4 then
4174: LD_VAR 0 14
4178: PUSH
4179: LD_VAR 0 11
4183: PUSH
4184: LD_INT 4
4186: DIV
4187: LESS
4188: IFFALSE 4204
// nsol := neng div 4 ;
4190: LD_ADDR_VAR 0 14
4194: PUSH
4195: LD_VAR 0 11
4199: PUSH
4200: LD_INT 4
4202: DIV
4203: ST_TO_ADDR
// neng := neng - nsol ;
4204: LD_ADDR_VAR 0 11
4208: PUSH
4209: LD_VAR 0 11
4213: PUSH
4214: LD_VAR 0 14
4218: MINUS
4219: ST_TO_ADDR
// nsci := neng div 3 ;
4220: LD_ADDR_VAR 0 12
4224: PUSH
4225: LD_VAR 0 11
4229: PUSH
4230: LD_INT 3
4232: DIV
4233: ST_TO_ADDR
// if nsci < 1 then
4234: LD_VAR 0 12
4238: PUSH
4239: LD_INT 1
4241: LESS
4242: IFFALSE 4252
// nsci := 1 ;
4244: LD_ADDR_VAR 0 12
4248: PUSH
4249: LD_INT 1
4251: ST_TO_ADDR
// neng := neng - nsci ;
4252: LD_ADDR_VAR 0 11
4256: PUSH
4257: LD_VAR 0 11
4261: PUSH
4262: LD_VAR 0 12
4266: MINUS
4267: ST_TO_ADDR
// nmech := neng div 2 ;
4268: LD_ADDR_VAR 0 13
4272: PUSH
4273: LD_VAR 0 11
4277: PUSH
4278: LD_INT 2
4280: DIV
4281: ST_TO_ADDR
// neng := neng - nmech ;
4282: LD_ADDR_VAR 0 11
4286: PUSH
4287: LD_VAR 0 11
4291: PUSH
4292: LD_VAR 0 13
4296: MINUS
4297: ST_TO_ADDR
// if neng < 1 then
4298: LD_VAR 0 11
4302: PUSH
4303: LD_INT 1
4305: LESS
4306: IFFALSE 4316
// neng := 1 ;
4308: LD_ADDR_VAR 0 11
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// soldiers_created := 0 ;
4316: LD_ADDR_LOC 3
4320: PUSH
4321: LD_INT 0
4323: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4324: LD_ADDR_VAR 0 6
4328: PUSH
4329: DOUBLE
4330: LD_INT 1
4332: DEC
4333: ST_TO_ADDR
4334: LD_EXP 14
4338: PUSH
4339: FOR_TO
4340: IFFALSE 4594
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4342: LD_ADDR_VAR 0 4
4346: PUSH
4347: LD_EXP 43
4351: PUSH
4352: LD_VAR 0 3
4356: ARRAY
4357: PUSH
4358: LD_VAR 0 6
4362: ARRAY
4363: PUSH
4364: LD_INT 1
4366: ARRAY
4367: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4368: LD_ADDR_VAR 0 5
4372: PUSH
4373: LD_EXP 43
4377: PUSH
4378: LD_VAR 0 3
4382: ARRAY
4383: PUSH
4384: LD_VAR 0 6
4388: ARRAY
4389: PUSH
4390: LD_INT 2
4392: ARRAY
4393: ST_TO_ADDR
// bc_type := b_breastwork ;
4394: LD_ADDR_OWVAR 42
4398: PUSH
4399: LD_INT 31
4401: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ i ] [ 3 ] ) ;
4402: LD_ADDR_VAR 0 9
4406: PUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: LD_VAR 0 5
4416: PPUSH
4417: LD_EXP 43
4421: PUSH
4422: LD_VAR 0 3
4426: ARRAY
4427: PUSH
4428: LD_VAR 0 6
4432: ARRAY
4433: PUSH
4434: LD_INT 3
4436: ARRAY
4437: PPUSH
4438: CALL_OW 47
4442: ST_TO_ADDR
// x := ShiftX ( x , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4443: LD_ADDR_VAR 0 4
4447: PUSH
4448: LD_VAR 0 4
4452: PPUSH
4453: LD_EXP 43
4457: PUSH
4458: LD_VAR 0 3
4462: ARRAY
4463: PUSH
4464: LD_VAR 0 6
4468: ARRAY
4469: PUSH
4470: LD_INT 3
4472: ARRAY
4473: PPUSH
4474: LD_INT 2
4476: PPUSH
4477: CALL_OW 272
4481: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4482: LD_ADDR_VAR 0 5
4486: PUSH
4487: LD_VAR 0 5
4491: PPUSH
4492: LD_EXP 43
4496: PUSH
4497: LD_VAR 0 3
4501: ARRAY
4502: PUSH
4503: LD_VAR 0 6
4507: ARRAY
4508: PUSH
4509: LD_INT 3
4511: ARRAY
4512: PPUSH
4513: LD_INT 2
4515: PPUSH
4516: CALL_OW 273
4520: ST_TO_ADDR
// sol := prepare_people ( side , 1 , class_soldier , x , y , 1 , commander ) [ 1 ] ;
4521: LD_ADDR_VAR 0 8
4525: PUSH
4526: LD_VAR 0 1
4530: PPUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 1
4536: PPUSH
4537: LD_VAR 0 4
4541: PPUSH
4542: LD_VAR 0 5
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_ADDR_EXP 46
4554: PPUSH
4555: CALL 2188 0 7
4559: PUSH
4560: LD_INT 1
4562: ARRAY
4563: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4564: LD_ADDR_LOC 3
4568: PUSH
4569: LD_LOC 3
4573: PUSH
4574: LD_INT 1
4576: PLUS
4577: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4578: LD_VAR 0 8
4582: PPUSH
4583: LD_VAR 0 9
4587: PPUSH
4588: CALL_OW 120
// end ;
4592: GO 4339
4594: POP
4595: POP
// x := start_def [ pos ] [ 1 ] ;
4596: LD_ADDR_VAR 0 4
4600: PUSH
4601: LD_EXP 44
4605: PUSH
4606: LD_VAR 0 3
4610: ARRAY
4611: PUSH
4612: LD_INT 1
4614: ARRAY
4615: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4616: LD_ADDR_VAR 0 5
4620: PUSH
4621: LD_EXP 44
4625: PUSH
4626: LD_VAR 0 3
4630: ARRAY
4631: PUSH
4632: LD_INT 2
4634: ARRAY
4635: ST_TO_ADDR
// prepare_people ( side , nsol - number_of_breastworks , class_soldier , x , y , 5 , commander ) ;
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_VAR 0 14
4645: PUSH
4646: LD_EXP 14
4650: MINUS
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: LD_VAR 0 4
4659: PPUSH
4660: LD_VAR 0 5
4664: PPUSH
4665: LD_INT 5
4667: PPUSH
4668: LD_ADDR_EXP 46
4672: PPUSH
4673: CALL 2188 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_VAR 0 11
4686: PPUSH
4687: LD_INT 2
4689: PPUSH
4690: LD_VAR 0 4
4694: PPUSH
4695: LD_VAR 0 5
4699: PPUSH
4700: LD_INT 5
4702: PPUSH
4703: LD_ADDR_EXP 46
4707: PPUSH
4708: CALL 2188 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
4712: LD_VAR 0 1
4716: PPUSH
4717: LD_VAR 0 13
4721: PPUSH
4722: LD_INT 3
4724: PPUSH
4725: LD_VAR 0 4
4729: PPUSH
4730: LD_VAR 0 5
4734: PPUSH
4735: LD_INT 5
4737: PPUSH
4738: LD_ADDR_EXP 46
4742: PPUSH
4743: CALL 2188 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
4747: LD_VAR 0 1
4751: PPUSH
4752: LD_VAR 0 12
4756: PPUSH
4757: LD_INT 4
4759: PPUSH
4760: LD_VAR 0 4
4764: PPUSH
4765: LD_VAR 0 5
4769: PPUSH
4770: LD_INT 5
4772: PPUSH
4773: LD_ADDR_EXP 46
4777: PPUSH
4778: CALL 2188 0 7
// if not global_defined then
4782: LD_LOC 2
4786: NOT
4787: IFFALSE 4797
// global_defined := true ;
4789: LD_ADDR_LOC 2
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4797: LD_EXP 9
4801: PUSH
4802: LD_INT 20
4804: PPUSH
4805: LD_VAR 0 1
4809: PPUSH
4810: CALL_OW 321
4814: PUSH
4815: LD_INT 1
4817: EQUAL
4818: AND
4819: IFFALSE 4836
// SetTech ( tech_SibDet , side , state_researched ) ;
4821: LD_INT 20
4823: PPUSH
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 2
4831: PPUSH
4832: CALL_OW 322
// if def_siberite_bomb = 1 then
4836: LD_EXP 10
4840: PUSH
4841: LD_INT 1
4843: EQUAL
4844: IFFALSE 4878
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4846: LD_INT 25
4848: PPUSH
4849: LD_VAR 0 1
4853: PPUSH
4854: LD_INT 1
4856: PPUSH
4857: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4861: LD_INT 73
4863: PPUSH
4864: LD_VAR 0 1
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 322
// end else
4876: GO 4908
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4878: LD_INT 25
4880: PPUSH
4881: LD_VAR 0 1
4885: PPUSH
4886: LD_INT 0
4888: PPUSH
4889: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4893: LD_INT 73
4895: PPUSH
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_INT 0
4903: PPUSH
4904: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4908: LD_INT 24
4910: PPUSH
4911: LD_VAR 0 1
4915: PPUSH
4916: LD_INT 0
4918: PPUSH
4919: CALL_OW 322
// end ;
4923: LD_VAR 0 2
4927: RET
// every 0 0$1 do
4928: GO 4930
4930: DISABLE
// if ( def_siberite_bomb > 1 ) then
4931: LD_EXP 10
4935: PUSH
4936: LD_INT 1
4938: GREATER
4939: IFFALSE 4954
// begin wait ( siberite_bomb_Delay ) ;
4941: LD_EXP 25
4945: PPUSH
4946: CALL_OW 67
// EnableSibFiss ;
4950: CALL 4955 0 0
// end ;
4954: END
// function EnableSibFiss ; var i ; begin
4955: LD_INT 0
4957: PPUSH
4958: PPUSH
// for i := 1 to 8 do
4959: LD_ADDR_VAR 0 2
4963: PUSH
4964: DOUBLE
4965: LD_INT 1
4967: DEC
4968: ST_TO_ADDR
4969: LD_INT 8
4971: PUSH
4972: FOR_TO
4973: IFFALSE 5019
// if Side_Positions [ i ] then
4975: LD_EXP 36
4979: PUSH
4980: LD_VAR 0 2
4984: ARRAY
4985: IFFALSE 5017
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4987: LD_INT 25
4989: PPUSH
4990: LD_VAR 0 2
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5002: LD_INT 73
5004: PPUSH
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: CALL_OW 322
// end ;
5017: GO 4972
5019: POP
5020: POP
// end ;
5021: LD_VAR 0 1
5025: RET
// function prepare_sides ; var i ; begin
5026: LD_INT 0
5028: PPUSH
5029: PPUSH
// global_units := [ ] ;
5030: LD_ADDR_LOC 1
5034: PUSH
5035: EMPTY
5036: ST_TO_ADDR
// global_defined := false ;
5037: LD_ADDR_LOC 2
5041: PUSH
5042: LD_INT 0
5044: ST_TO_ADDR
// for i := 1 to 8 do
5045: LD_ADDR_VAR 0 2
5049: PUSH
5050: DOUBLE
5051: LD_INT 1
5053: DEC
5054: ST_TO_ADDR
5055: LD_INT 8
5057: PUSH
5058: FOR_TO
5059: IFFALSE 5084
// if Side_Positions [ i ] then
5061: LD_EXP 36
5065: PUSH
5066: LD_VAR 0 2
5070: ARRAY
5071: IFFALSE 5082
// prepare_side ( i ) ;
5073: LD_VAR 0 2
5077: PPUSH
5078: CALL 2685 0 1
5082: GO 5058
5084: POP
5085: POP
// end ;
5086: LD_VAR 0 1
5090: RET
// starting begin DE_Triggers ;
5091: CALL 7621 0 0
// read_multiplayer_and_game_parameters ;
5095: CALL 0 0 0
// enable ( 44 ) ;
5099: LD_INT 44
5101: ENABLE_MARKED
// enable ( 45 ) ;
5102: LD_INT 45
5104: ENABLE_MARKED
// mp_selectmsg := true ;
5105: LD_ADDR_OWVAR 13
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// prepare_map_coordinates ;
5113: CALL 1286 0 0
// set_shared_visions_and_alliances ;
5117: CALL 1825 0 0
// prepare_sides ;
5121: CALL 5026 0 0
// if Game_Type = 66 then
5125: LD_EXP 1
5129: PUSH
5130: LD_INT 66
5132: EQUAL
5133: IFFALSE 5139
// Init_Win_Condition ;
5135: CALL 7674 0 0
// init_shipments_and_respawning ;
5139: CALL 5245 0 0
// ResetFog ;
5143: CALL_OW 335
// music_nat := Side_Nations [ your_side ] ;
5147: LD_ADDR_OWVAR 71
5151: PUSH
5152: LD_EXP 37
5156: PUSH
5157: LD_OWVAR 2
5161: ARRAY
5162: ST_TO_ADDR
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5163: LD_EXP 44
5167: PUSH
5168: LD_EXP 36
5172: PUSH
5173: LD_OWVAR 2
5177: ARRAY
5178: ARRAY
5179: PUSH
5180: LD_INT 1
5182: ARRAY
5183: PPUSH
5184: LD_EXP 44
5188: PUSH
5189: LD_EXP 36
5193: PUSH
5194: LD_OWVAR 2
5198: ARRAY
5199: ARRAY
5200: PUSH
5201: LD_INT 2
5203: ARRAY
5204: PPUSH
5205: CALL_OW 86
// BuildUpAreas := [ Base_nw , Base_ne , Base_sw , Base_se ] ;
5209: LD_ADDR_EXP 49
5213: PUSH
5214: LD_INT 15
5216: PUSH
5217: LD_INT 16
5219: PUSH
5220: LD_INT 17
5222: PUSH
5223: LD_INT 18
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: ST_TO_ADDR
// BeginBuildUp ;
5232: CALL 8495 0 0
// end ;
5236: END
// export function OnHumanRespawned ( un ) ; begin
5237: LD_INT 0
5239: PPUSH
// end ; end_of_file
5240: LD_VAR 0 2
5244: RET
// var shipment1 , shipment2 , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5245: LD_INT 0
5247: PPUSH
// shipment1 := [ ] ;
5248: LD_ADDR_LOC 4
5252: PUSH
5253: EMPTY
5254: ST_TO_ADDR
// shipment2 := [ ] ;
5255: LD_ADDR_LOC 5
5259: PUSH
5260: EMPTY
5261: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5262: LD_ADDR_LOC 6
5266: PUSH
5267: LD_INT 1
5269: PPUSH
5270: LD_INT 8
5272: PPUSH
5273: CALL_OW 12
5277: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5278: LD_ADDR_LOC 7
5282: PUSH
5283: LD_INT 0
5285: PUSH
5286: LD_INT 0
5288: PUSH
5289: LD_INT 0
5291: PUSH
5292: LD_INT 0
5294: PUSH
5295: LD_INT 0
5297: PUSH
5298: LD_INT 0
5300: PUSH
5301: LD_INT 0
5303: PUSH
5304: LD_INT 0
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: ST_TO_ADDR
// end ;
5317: LD_VAR 0 1
5321: RET
// every 0 0$1 + 0 0$0.5 marked 45 do var n , building_list , aktresp , b ;
5322: GO 5324
5324: DISABLE
5325: LD_INT 0
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
// begin if respawning_time_max = 0 then
5331: LD_EXP 24
5335: PUSH
5336: LD_INT 0
5338: EQUAL
5339: IFFALSE 5343
// exit ;
5341: GO 5850
// if respawn = 8 then
5343: LD_LOC 6
5347: PUSH
5348: LD_INT 8
5350: EQUAL
5351: IFFALSE 5363
// respawn := 1 else
5353: LD_ADDR_LOC 6
5357: PUSH
5358: LD_INT 1
5360: ST_TO_ADDR
5361: GO 5377
// respawn := respawn + 1 ;
5363: LD_ADDR_LOC 6
5367: PUSH
5368: LD_LOC 6
5372: PUSH
5373: LD_INT 1
5375: PLUS
5376: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5377: LD_EXP 36
5381: PUSH
5382: LD_LOC 6
5386: ARRAY
5387: PUSH
5388: LD_LOC 7
5392: PUSH
5393: LD_LOC 6
5397: ARRAY
5398: NOT
5399: AND
5400: IFFALSE 5849
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5402: LD_ADDR_VAR 0 1
5406: PUSH
5407: LD_INT 21
5409: PUSH
5410: LD_INT 1
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 22
5419: PUSH
5420: LD_LOC 6
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 3
5431: PUSH
5432: LD_INT 23
5434: PUSH
5435: LD_INT 0
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: PPUSH
5448: CALL_OW 69
5452: ST_TO_ADDR
// if n < number_of_people then
5453: LD_VAR 0 1
5457: PUSH
5458: LD_EXP 15
5462: LESS
5463: IFFALSE 5846
// begin aktresp := respawn ;
5465: LD_ADDR_VAR 0 3
5469: PUSH
5470: LD_LOC 6
5474: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5475: LD_ADDR_LOC 7
5479: PUSH
5480: LD_LOC 7
5484: PPUSH
5485: LD_VAR 0 3
5489: PPUSH
5490: LD_INT 1
5492: PPUSH
5493: CALL_OW 1
5497: ST_TO_ADDR
// enable ;
5498: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5499: LD_EXP 23
5503: PPUSH
5504: LD_EXP 24
5508: PPUSH
5509: CALL_OW 12
5513: PPUSH
5514: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5518: LD_ADDR_LOC 7
5522: PUSH
5523: LD_LOC 7
5527: PPUSH
5528: LD_VAR 0 3
5532: PPUSH
5533: LD_INT 0
5535: PPUSH
5536: CALL_OW 1
5540: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5541: LD_ADDR_VAR 0 2
5545: PUSH
5546: LD_INT 21
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 2
5558: PUSH
5559: LD_INT 30
5561: PUSH
5562: LD_INT 0
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: LD_INT 30
5571: PUSH
5572: LD_INT 1
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 50
5586: PUSH
5587: EMPTY
5588: LIST
5589: PUSH
5590: LD_INT 22
5592: PUSH
5593: LD_VAR 0 3
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: PPUSH
5608: CALL_OW 69
5612: ST_TO_ADDR
// if building_list = 0 then
5613: LD_VAR 0 2
5617: PUSH
5618: LD_INT 0
5620: EQUAL
5621: IFFALSE 5666
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5623: LD_ADDR_VAR 0 2
5627: PUSH
5628: LD_INT 21
5630: PUSH
5631: LD_INT 3
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: LD_INT 50
5640: PUSH
5641: EMPTY
5642: LIST
5643: PUSH
5644: LD_INT 22
5646: PUSH
5647: LD_VAR 0 3
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: PPUSH
5661: CALL_OW 69
5665: ST_TO_ADDR
// if building_list = 0 then
5666: LD_VAR 0 2
5670: PUSH
5671: LD_INT 0
5673: EQUAL
5674: IFFALSE 5678
// exit ;
5676: GO 5850
// hc_name :=  ;
5678: LD_ADDR_OWVAR 26
5682: PUSH
5683: LD_STRING 
5685: ST_TO_ADDR
// hc_importance := 0 ;
5686: LD_ADDR_OWVAR 32
5690: PUSH
5691: LD_INT 0
5693: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5694: LD_INT 0
5696: PPUSH
5697: LD_INT 0
5699: PPUSH
5700: LD_EXP 16
5704: PUSH
5705: LD_INT 2
5707: DIV
5708: PPUSH
5709: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5713: LD_ADDR_OWVAR 21
5717: PUSH
5718: LD_EXP 37
5722: PUSH
5723: LD_VAR 0 3
5727: ARRAY
5728: ST_TO_ADDR
// uc_side := aktresp ;
5729: LD_ADDR_OWVAR 20
5733: PUSH
5734: LD_VAR 0 3
5738: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5739: LD_ADDR_VAR 0 4
5743: PUSH
5744: LD_VAR 0 2
5748: PUSH
5749: LD_INT 1
5751: PPUSH
5752: LD_VAR 0 2
5756: PUSH
5757: LD_INT 0
5759: PLUS
5760: PPUSH
5761: CALL_OW 12
5765: ARRAY
5766: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5767: LD_VAR 0 4
5771: PPUSH
5772: CALL_OW 266
5776: PUSH
5777: LD_INT 0
5779: PUSH
5780: LD_INT 1
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: IN
5787: IFFALSE 5799
// n = 25 else
5789: LD_ADDR_VAR 0 1
5793: PUSH
5794: LD_INT 25
5796: ST_TO_ADDR
5797: GO 5807
// n = 10 ;
5799: LD_ADDR_VAR 0 1
5803: PUSH
5804: LD_INT 10
5806: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5807: CALL_OW 44
5811: PPUSH
5812: LD_VAR 0 4
5816: PPUSH
5817: CALL_OW 250
5821: PPUSH
5822: LD_VAR 0 4
5826: PPUSH
5827: CALL_OW 251
5831: PPUSH
5832: LD_VAR 0 1
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: CALL_OW 50
// end else
5844: GO 5847
// enable ;
5846: ENABLE
// end else
5847: GO 5850
// enable ;
5849: ENABLE
// end ;
5850: PPOPN 4
5852: END
// every 0 0$5 + 0 0$1.1 marked 45 do var d , q ;
5853: GO 5855
5855: DISABLE
5856: LD_INT 0
5858: PPUSH
5859: PPUSH
// begin case tick of 1 .. 1 1$0 :
5860: LD_OWVAR 1
5864: PUSH
5865: LD_INT 1
5867: DOUBLE
5868: GREATEREQUAL
5869: IFFALSE 5877
5871: LD_INT 2100
5873: DOUBLE
5874: LESSEQUAL
5875: IFTRUE 5879
5877: GO 5890
5879: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5880: LD_ADDR_VAR 0 1
5884: PUSH
5885: LD_INT 150
5887: ST_TO_ADDR
5888: GO 6073
5890: LD_INT 2100
5892: PUSH
5893: LD_INT 1
5895: PLUS
5896: DOUBLE
5897: GREATEREQUAL
5898: IFFALSE 5906
5900: LD_INT 10500
5902: DOUBLE
5903: LESSEQUAL
5904: IFTRUE 5908
5906: GO 5919
5908: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5909: LD_ADDR_VAR 0 1
5913: PUSH
5914: LD_INT 100
5916: ST_TO_ADDR
5917: GO 6073
5919: LD_INT 10500
5921: PUSH
5922: LD_INT 1
5924: PLUS
5925: DOUBLE
5926: GREATEREQUAL
5927: IFFALSE 5935
5929: LD_INT 21000
5931: DOUBLE
5932: LESSEQUAL
5933: IFTRUE 5937
5935: GO 5948
5937: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5938: LD_ADDR_VAR 0 1
5942: PUSH
5943: LD_INT 90
5945: ST_TO_ADDR
5946: GO 6073
5948: LD_INT 21000
5950: PUSH
5951: LD_INT 1
5953: PLUS
5954: DOUBLE
5955: GREATEREQUAL
5956: IFFALSE 5964
5958: LD_INT 42000
5960: DOUBLE
5961: LESSEQUAL
5962: IFTRUE 5966
5964: GO 5977
5966: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5967: LD_ADDR_VAR 0 1
5971: PUSH
5972: LD_INT 70
5974: ST_TO_ADDR
5975: GO 6073
5977: LD_INT 42000
5979: PUSH
5980: LD_INT 1
5982: PLUS
5983: DOUBLE
5984: GREATEREQUAL
5985: IFFALSE 5993
5987: LD_INT 63000
5989: DOUBLE
5990: LESSEQUAL
5991: IFTRUE 5995
5993: GO 6006
5995: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5996: LD_ADDR_VAR 0 1
6000: PUSH
6001: LD_INT 60
6003: ST_TO_ADDR
6004: GO 6073
6006: LD_INT 63000
6008: PUSH
6009: LD_INT 1
6011: PLUS
6012: DOUBLE
6013: GREATEREQUAL
6014: IFFALSE 6022
6016: LD_INT 105000
6018: DOUBLE
6019: LESSEQUAL
6020: IFTRUE 6024
6022: GO 6035
6024: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
6025: LD_ADDR_VAR 0 1
6029: PUSH
6030: LD_INT 35
6032: ST_TO_ADDR
6033: GO 6073
6035: LD_INT 105000
6037: PUSH
6038: LD_INT 1
6040: PLUS
6041: DOUBLE
6042: GREATEREQUAL
6043: IFFALSE 6051
6045: LD_INT 630000
6047: DOUBLE
6048: LESSEQUAL
6049: IFTRUE 6053
6051: GO 6064
6053: POP
// d := 20 ; else
6054: LD_ADDR_VAR 0 1
6058: PUSH
6059: LD_INT 20
6061: ST_TO_ADDR
6062: GO 6073
6064: POP
// d := 0 ; end ;
6065: LD_ADDR_VAR 0 1
6069: PUSH
6070: LD_INT 0
6072: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
6073: LD_INT 1
6075: PPUSH
6076: LD_INT 10000
6078: PPUSH
6079: CALL_OW 12
6083: PUSH
6084: LD_VAR 0 1
6088: PUSH
6089: LD_EXP 19
6093: MUL
6094: PUSH
6095: LD_INT 2
6097: DIV
6098: LESSEQUAL
6099: IFFALSE 6206
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6101: LD_INT 1
6103: PPUSH
6104: LD_INT 140
6106: PPUSH
6107: CALL_OW 12
6111: PPUSH
6112: CALL_OW 67
// if shipment1 = [ ] then
6116: LD_LOC 4
6120: PUSH
6121: EMPTY
6122: EQUAL
6123: IFFALSE 6148
// shipment1 := [ q1 , q2 , q3 , q4 ] ;
6125: LD_ADDR_LOC 4
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: LD_INT 4
6135: PUSH
6136: LD_INT 5
6138: PUSH
6139: LD_INT 6
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: ST_TO_ADDR
// q := shipment1 [ Rand ( 1 , shipment1 ) ] ;
6148: LD_ADDR_VAR 0 2
6152: PUSH
6153: LD_LOC 4
6157: PUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_LOC 4
6165: PPUSH
6166: CALL_OW 12
6170: ARRAY
6171: ST_TO_ADDR
// shipment1 := shipment1 diff [ q ] ;
6172: LD_ADDR_LOC 4
6176: PUSH
6177: LD_LOC 4
6181: PUSH
6182: LD_VAR 0 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: DIFF
6190: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
6191: LD_INT 5
6193: PPUSH
6194: LD_VAR 0 2
6198: PPUSH
6199: LD_INT 1
6201: PPUSH
6202: CALL_OW 55
// end ; enable ;
6206: ENABLE
// end ;
6207: PPOPN 2
6209: END
// every 0 0$5 + 0 0$1.1 marked 45 do var d , q ;
6210: GO 6212
6212: DISABLE
6213: LD_INT 0
6215: PPUSH
6216: PPUSH
// begin case tick of 1 .. 1 1$0 :
6217: LD_OWVAR 1
6221: PUSH
6222: LD_INT 1
6224: DOUBLE
6225: GREATEREQUAL
6226: IFFALSE 6234
6228: LD_INT 2100
6230: DOUBLE
6231: LESSEQUAL
6232: IFTRUE 6236
6234: GO 6247
6236: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
6237: LD_ADDR_VAR 0 1
6241: PUSH
6242: LD_INT 150
6244: ST_TO_ADDR
6245: GO 6430
6247: LD_INT 2100
6249: PUSH
6250: LD_INT 1
6252: PLUS
6253: DOUBLE
6254: GREATEREQUAL
6255: IFFALSE 6263
6257: LD_INT 10500
6259: DOUBLE
6260: LESSEQUAL
6261: IFTRUE 6265
6263: GO 6276
6265: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 100
6273: ST_TO_ADDR
6274: GO 6430
6276: LD_INT 10500
6278: PUSH
6279: LD_INT 1
6281: PLUS
6282: DOUBLE
6283: GREATEREQUAL
6284: IFFALSE 6292
6286: LD_INT 21000
6288: DOUBLE
6289: LESSEQUAL
6290: IFTRUE 6294
6292: GO 6305
6294: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
6295: LD_ADDR_VAR 0 1
6299: PUSH
6300: LD_INT 90
6302: ST_TO_ADDR
6303: GO 6430
6305: LD_INT 21000
6307: PUSH
6308: LD_INT 1
6310: PLUS
6311: DOUBLE
6312: GREATEREQUAL
6313: IFFALSE 6321
6315: LD_INT 42000
6317: DOUBLE
6318: LESSEQUAL
6319: IFTRUE 6323
6321: GO 6334
6323: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
6324: LD_ADDR_VAR 0 1
6328: PUSH
6329: LD_INT 70
6331: ST_TO_ADDR
6332: GO 6430
6334: LD_INT 42000
6336: PUSH
6337: LD_INT 1
6339: PLUS
6340: DOUBLE
6341: GREATEREQUAL
6342: IFFALSE 6350
6344: LD_INT 63000
6346: DOUBLE
6347: LESSEQUAL
6348: IFTRUE 6352
6350: GO 6363
6352: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
6353: LD_ADDR_VAR 0 1
6357: PUSH
6358: LD_INT 60
6360: ST_TO_ADDR
6361: GO 6430
6363: LD_INT 63000
6365: PUSH
6366: LD_INT 1
6368: PLUS
6369: DOUBLE
6370: GREATEREQUAL
6371: IFFALSE 6379
6373: LD_INT 105000
6375: DOUBLE
6376: LESSEQUAL
6377: IFTRUE 6381
6379: GO 6392
6381: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
6382: LD_ADDR_VAR 0 1
6386: PUSH
6387: LD_INT 35
6389: ST_TO_ADDR
6390: GO 6430
6392: LD_INT 105000
6394: PUSH
6395: LD_INT 1
6397: PLUS
6398: DOUBLE
6399: GREATEREQUAL
6400: IFFALSE 6408
6402: LD_INT 630000
6404: DOUBLE
6405: LESSEQUAL
6406: IFTRUE 6410
6408: GO 6421
6410: POP
// d := 20 ; else
6411: LD_ADDR_VAR 0 1
6415: PUSH
6416: LD_INT 20
6418: ST_TO_ADDR
6419: GO 6430
6421: POP
// d := 0 ; end ;
6422: LD_ADDR_VAR 0 1
6426: PUSH
6427: LD_INT 0
6429: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 10000
6435: PPUSH
6436: CALL_OW 12
6440: PUSH
6441: LD_VAR 0 1
6445: PUSH
6446: LD_EXP 19
6450: MUL
6451: PUSH
6452: LD_INT 2
6454: DIV
6455: LESSEQUAL
6456: IFFALSE 6579
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6458: LD_INT 1
6460: PPUSH
6461: LD_INT 140
6463: PPUSH
6464: CALL_OW 12
6468: PPUSH
6469: CALL_OW 67
// if shipment2 = [ ] then
6473: LD_LOC 5
6477: PUSH
6478: EMPTY
6479: EQUAL
6480: IFFALSE 6521
// shipment2 := [ q1a , q2a , q3a , q4a , q1b , q2b , q3b , q4b ] ;
6482: LD_ADDR_LOC 5
6486: PUSH
6487: LD_INT 7
6489: PUSH
6490: LD_INT 8
6492: PUSH
6493: LD_INT 9
6495: PUSH
6496: LD_INT 10
6498: PUSH
6499: LD_INT 11
6501: PUSH
6502: LD_INT 12
6504: PUSH
6505: LD_INT 13
6507: PUSH
6508: LD_INT 14
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: ST_TO_ADDR
// q := shipment2 [ Rand ( 1 , shipment2 ) ] ;
6521: LD_ADDR_VAR 0 2
6525: PUSH
6526: LD_LOC 5
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_LOC 5
6538: PPUSH
6539: CALL_OW 12
6543: ARRAY
6544: ST_TO_ADDR
// shipment2 := shipment2 diff [ q ] ;
6545: LD_ADDR_LOC 5
6549: PUSH
6550: LD_LOC 5
6554: PUSH
6555: LD_VAR 0 2
6559: PUSH
6560: EMPTY
6561: LIST
6562: DIFF
6563: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
6564: LD_INT 5
6566: PPUSH
6567: LD_VAR 0 2
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 55
// end ; enable ;
6579: ENABLE
// end ; end_of_file
6580: PPOPN 2
6582: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; export function CanWinLoose ; begin
6583: LD_INT 0
6585: PPUSH
// Result := true ;
6586: LD_ADDR_VAR 0 1
6590: PUSH
6591: LD_INT 1
6593: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6594: CALL_OW 518
6598: PUSH
6599: CALL_OW 519
6603: PUSH
6604: LD_INT 0
6606: GREATER
6607: AND
6608: IFFALSE 6618
// Result := false ;
6610: LD_ADDR_VAR 0 1
6614: PUSH
6615: LD_INT 0
6617: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
6618: CALL_OW 531
6622: PUSH
6623: CALL_OW 519
6627: PUSH
6628: LD_INT 1
6630: GREATER
6631: AND
6632: IFFALSE 6642
// Result := false ;
6634: LD_ADDR_VAR 0 1
6638: PUSH
6639: LD_INT 0
6641: ST_TO_ADDR
// end ;
6642: LD_VAR 0 1
6646: RET
// function Update_Flags ; var un ; begin
6647: LD_INT 0
6649: PPUSH
6650: PPUSH
// for un in battle_flags_id do
6651: LD_ADDR_VAR 0 2
6655: PUSH
6656: LD_EXP 47
6660: PUSH
6661: FOR_IN
6662: IFFALSE 6737
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6664: LD_VAR 0 2
6668: PPUSH
6669: LD_INT 1
6671: PUSH
6672: LD_LOC 8
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: LD_INT 2
6683: PUSH
6684: LD_LOC 8
6688: PUSH
6689: LD_INT 2
6691: DIV
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 3
6699: PUSH
6700: LD_LOC 8
6704: PUSH
6705: LD_INT 5
6707: DIV
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 20
6715: PUSH
6716: LD_LOC 8
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: PPUSH
6731: CALL_OW 423
6735: GO 6661
6737: POP
6738: POP
// end ;
6739: LD_VAR 0 1
6743: RET
// every 0 0$0.1 marked 45 do var un ;
6744: GO 6746
6746: DISABLE
6747: LD_INT 0
6749: PPUSH
// begin if not def_morale_flags then
6750: LD_EXP 8
6754: NOT
6755: IFFALSE 6759
// exit ;
6757: GO 6836
// if not morale_decreasing_time then
6759: LD_EXP 20
6763: NOT
6764: IFFALSE 6768
// exit ;
6766: GO 6836
// strength = 100 ;
6768: LD_ADDR_LOC 8
6772: PUSH
6773: LD_INT 100
6775: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6776: LD_EXP 20
6780: PPUSH
6781: CALL_OW 67
// strength := strength - 1 ;
6785: LD_ADDR_LOC 8
6789: PUSH
6790: LD_LOC 8
6794: PUSH
6795: LD_INT 1
6797: MINUS
6798: ST_TO_ADDR
// Update_Flags ;
6799: CALL 6647 0 0
// until not strength ;
6803: LD_LOC 8
6807: NOT
6808: IFFALSE 6776
// for un in battle_flags_id do
6810: LD_ADDR_VAR 0 1
6814: PUSH
6815: LD_EXP 47
6819: PUSH
6820: FOR_IN
6821: IFFALSE 6834
// KillBattleFlag ( un ) ;
6823: LD_VAR 0 1
6827: PPUSH
6828: CALL_OW 419
6832: GO 6820
6834: POP
6835: POP
// end ;
6836: PPOPN 1
6838: END
// every 0 0$1 marked 44 do var l1 , l2 ;
6839: GO 6841
6841: DISABLE
6842: LD_INT 0
6844: PPUSH
6845: PPUSH
// begin if not ( game_type in [ 11 , 12 ] ) then
6846: LD_EXP 1
6850: PUSH
6851: LD_INT 11
6853: PUSH
6854: LD_INT 12
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: IN
6861: NOT
6862: IFFALSE 6866
// exit ;
6864: GO 7267
// if not Your_Side then
6866: LD_OWVAR 2
6870: NOT
6871: IFFALSE 6876
// begin enable ;
6873: ENABLE
// exit ;
6874: GO 7267
// end ; l1 := UnitFilter ( sci1 , [ f_alive ] ) ;
6876: LD_ADDR_VAR 0 1
6880: PUSH
6881: LD_EXP 28
6885: PPUSH
6886: LD_INT 51
6888: PUSH
6889: EMPTY
6890: LIST
6891: PPUSH
6892: CALL_OW 72
6896: ST_TO_ADDR
// l2 := UnitFilter ( sci2 , [ f_alive ] ) ;
6897: LD_ADDR_VAR 0 2
6901: PUSH
6902: LD_EXP 29
6906: PPUSH
6907: LD_INT 51
6909: PUSH
6910: EMPTY
6911: LIST
6912: PPUSH
6913: CALL_OW 72
6917: ST_TO_ADDR
// if not l1 and not l2 then
6918: LD_VAR 0 1
6922: NOT
6923: PUSH
6924: LD_VAR 0 2
6928: NOT
6929: AND
6930: IFFALSE 6946
// begin wait ( 0 0$5 ) ;
6932: LD_INT 175
6934: PPUSH
6935: CALL_OW 67
// enable ( 400 ) ;
6939: LD_INT 400
6941: ENABLE_MARKED
// exit ;
6942: GO 7267
// end else
6944: GO 7266
// if not l1 then
6946: LD_VAR 0 1
6950: NOT
6951: IFFALSE 7021
// begin if Side_teams [ your_side ] = 1 then
6953: LD_EXP 33
6957: PUSH
6958: LD_OWVAR 2
6962: ARRAY
6963: PUSH
6964: LD_INT 1
6966: EQUAL
6967: IFFALSE 6995
// begin CenterOnXY ( lastxlost , lastylost ) ;
6969: LD_LOC 11
6973: PPUSH
6974: LD_LOC 12
6978: PPUSH
6979: CALL_OW 84
// wait ( 0 0$5 ) ;
6983: LD_INT 175
6985: PPUSH
6986: CALL_OW 67
// enable ( 400 ) ;
6990: LD_INT 400
6992: ENABLE_MARKED
// end else
6993: GO 7019
// begin CenterOnXY ( lastxwin , lastywin ) ;
6995: LD_LOC 9
6999: PPUSH
7000: LD_LOC 10
7004: PPUSH
7005: CALL_OW 84
// wait ( 0 0$5 ) ;
7009: LD_INT 175
7011: PPUSH
7012: CALL_OW 67
// enable ( 401 ) ;
7016: LD_INT 401
7018: ENABLE_MARKED
// end end else
7019: GO 7266
// if not l2 then
7021: LD_VAR 0 2
7025: NOT
7026: IFFALSE 7096
// begin if Side_teams [ your_side ] = 2 then
7028: LD_EXP 33
7032: PUSH
7033: LD_OWVAR 2
7037: ARRAY
7038: PUSH
7039: LD_INT 2
7041: EQUAL
7042: IFFALSE 7070
// begin CenterOnXY ( lastxlost , lastylost ) ;
7044: LD_LOC 11
7048: PPUSH
7049: LD_LOC 12
7053: PPUSH
7054: CALL_OW 84
// wait ( 0 0$5 ) ;
7058: LD_INT 175
7060: PPUSH
7061: CALL_OW 67
// enable ( 400 ) ;
7065: LD_INT 400
7067: ENABLE_MARKED
// end else
7068: GO 7094
// begin CenterOnXY ( lastxwin , lastywin ) ;
7070: LD_LOC 9
7074: PPUSH
7075: LD_LOC 10
7079: PPUSH
7080: CALL_OW 84
// wait ( 0 0$5 ) ;
7084: LD_INT 175
7086: PPUSH
7087: CALL_OW 67
// enable ( 401 ) ;
7091: LD_INT 401
7093: ENABLE_MARKED
// end end else
7094: GO 7266
// if Side_teams [ your_side ] = 1 then
7096: LD_EXP 33
7100: PUSH
7101: LD_OWVAR 2
7105: ARRAY
7106: PUSH
7107: LD_INT 1
7109: EQUAL
7110: IFFALSE 7190
// begin lastxwin := GetX ( l2 [ 1 ] ) ;
7112: LD_ADDR_LOC 9
7116: PUSH
7117: LD_VAR 0 2
7121: PUSH
7122: LD_INT 1
7124: ARRAY
7125: PPUSH
7126: CALL_OW 250
7130: ST_TO_ADDR
// lastywin := GetY ( l2 [ 1 ] ) ;
7131: LD_ADDR_LOC 10
7135: PUSH
7136: LD_VAR 0 2
7140: PUSH
7141: LD_INT 1
7143: ARRAY
7144: PPUSH
7145: CALL_OW 251
7149: ST_TO_ADDR
// lastxlost := GetX ( l1 [ 1 ] ) ;
7150: LD_ADDR_LOC 11
7154: PUSH
7155: LD_VAR 0 1
7159: PUSH
7160: LD_INT 1
7162: ARRAY
7163: PPUSH
7164: CALL_OW 250
7168: ST_TO_ADDR
// lastylost := GetY ( l1 [ 1 ] ) ;
7169: LD_ADDR_LOC 12
7173: PUSH
7174: LD_VAR 0 1
7178: PUSH
7179: LD_INT 1
7181: ARRAY
7182: PPUSH
7183: CALL_OW 251
7187: ST_TO_ADDR
// end else
7188: GO 7266
// begin lastxwin := GetX ( l1 [ 1 ] ) ;
7190: LD_ADDR_LOC 9
7194: PUSH
7195: LD_VAR 0 1
7199: PUSH
7200: LD_INT 1
7202: ARRAY
7203: PPUSH
7204: CALL_OW 250
7208: ST_TO_ADDR
// lastywin := GetY ( l1 [ 1 ] ) ;
7209: LD_ADDR_LOC 10
7213: PUSH
7214: LD_VAR 0 1
7218: PUSH
7219: LD_INT 1
7221: ARRAY
7222: PPUSH
7223: CALL_OW 251
7227: ST_TO_ADDR
// lastxlost := GetX ( l2 [ 1 ] ) ;
7228: LD_ADDR_LOC 11
7232: PUSH
7233: LD_VAR 0 2
7237: PUSH
7238: LD_INT 1
7240: ARRAY
7241: PPUSH
7242: CALL_OW 250
7246: ST_TO_ADDR
// lastylost := GetY ( l2 [ 1 ] ) ;
7247: LD_ADDR_LOC 12
7251: PUSH
7252: LD_VAR 0 2
7256: PUSH
7257: LD_INT 1
7259: ARRAY
7260: PPUSH
7261: CALL_OW 251
7265: ST_TO_ADDR
// end ; enable ;
7266: ENABLE
// end ;
7267: PPOPN 2
7269: END
// every 0 0$2 marked 44 do var win , i ;
7270: GO 7272
7272: DISABLE
7273: LD_INT 0
7275: PPUSH
7276: PPUSH
// begin if game_type in [ 11 , 12 ] then
7277: LD_EXP 1
7281: PUSH
7282: LD_INT 11
7284: PUSH
7285: LD_INT 12
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: IN
7292: IFFALSE 7296
// exit ;
7294: GO 7548
// if your_side then
7296: LD_OWVAR 2
7300: IFFALSE 7547
// begin if not filterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
7302: LD_INT 22
7304: PUSH
7305: LD_OWVAR 2
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 2
7316: PUSH
7317: LD_INT 21
7319: PUSH
7320: LD_INT 1
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: PUSH
7327: LD_INT 30
7329: PUSH
7330: LD_INT 0
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 30
7339: PUSH
7340: LD_INT 1
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PPUSH
7357: CALL_OW 69
7361: NOT
7362: IFFALSE 7391
// begin wait ( 0 0$3 ) ;
7364: LD_INT 105
7366: PPUSH
7367: CALL_OW 67
// if IAmServer then
7371: CALL_OW 518
7375: IFFALSE 7384
// wait ( 0 0$1 ) ;
7377: LD_INT 35
7379: PPUSH
7380: CALL_OW 67
// enable ( 400 ) ;
7384: LD_INT 400
7386: ENABLE_MARKED
// exit ;
7387: GO 7548
// end else
7389: GO 7547
// begin win := true ;
7391: LD_ADDR_VAR 0 1
7395: PUSH
7396: LD_INT 1
7398: ST_TO_ADDR
// for i := 1 to Side_positions do
7399: LD_ADDR_VAR 0 2
7403: PUSH
7404: DOUBLE
7405: LD_INT 1
7407: DEC
7408: ST_TO_ADDR
7409: LD_EXP 36
7413: PUSH
7414: FOR_TO
7415: IFFALSE 7499
// if Side_positions [ i ] and ( i <> your_side ) then
7417: LD_EXP 36
7421: PUSH
7422: LD_VAR 0 2
7426: ARRAY
7427: PUSH
7428: LD_VAR 0 2
7432: PUSH
7433: LD_OWVAR 2
7437: NONEQUAL
7438: AND
7439: IFFALSE 7497
// begin if MultiplayerSideAlive ( i ) then
7441: LD_VAR 0 2
7445: PPUSH
7446: CALL_OW 108
7450: IFFALSE 7497
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7452: LD_EXP 33
7456: PUSH
7457: LD_VAR 0 2
7461: ARRAY
7462: NOT
7463: PUSH
7464: LD_EXP 33
7468: PUSH
7469: LD_VAR 0 2
7473: ARRAY
7474: PUSH
7475: LD_EXP 33
7479: PUSH
7480: LD_OWVAR 2
7484: ARRAY
7485: NONEQUAL
7486: OR
7487: IFFALSE 7497
// win := false ;
7489: LD_ADDR_VAR 0 1
7493: PUSH
7494: LD_INT 0
7496: ST_TO_ADDR
// end ;
7497: GO 7414
7499: POP
7500: POP
// if win then
7501: LD_VAR 0 1
7505: IFFALSE 7547
// begin wait ( 0 0$3 ) ;
7507: LD_INT 105
7509: PPUSH
7510: CALL_OW 67
// if IAmServer then
7514: CALL_OW 518
7518: IFFALSE 7527
// wait ( 0 0$1 ) ;
7520: LD_INT 35
7522: PPUSH
7523: CALL_OW 67
// SA_Win ( Side_Nations [ Your_side ] ) ;
7527: LD_EXP 37
7531: PUSH
7532: LD_OWVAR 2
7536: ARRAY
7537: PPUSH
7538: CALL 10326 0 1
// enable ( 401 ) ;
7542: LD_INT 401
7544: ENABLE_MARKED
// exit ;
7545: GO 7548
// end ; end ; end ; enable ;
7547: ENABLE
// end ; end_of_file
7548: PPOPN 2
7550: END
// every 10 do
7551: GO 7553
7553: DISABLE
// begin if not multiplayer then
7554: LD_OWVAR 4
7558: NOT
7559: IFFALSE 7563
// exit ;
7561: GO 7620
// if ( tick >= 100 ) then
7563: LD_OWVAR 1
7567: PUSH
7568: LD_INT 100
7570: GREATEREQUAL
7571: IFFALSE 7591
// if tick mod 20 = 0 then
7573: LD_OWVAR 1
7577: PUSH
7578: LD_INT 20
7580: MOD
7581: PUSH
7582: LD_INT 0
7584: EQUAL
7585: IFFALSE 7591
// MultiplayerCRC ;
7587: CALL_OW 361
// if ( tick >= 100 ) then
7591: LD_OWVAR 1
7595: PUSH
7596: LD_INT 100
7598: GREATEREQUAL
7599: IFFALSE 7619
// if tick mod 30 = 0 then
7601: LD_OWVAR 1
7605: PUSH
7606: LD_INT 30
7608: MOD
7609: PUSH
7610: LD_INT 0
7612: EQUAL
7613: IFFALSE 7619
// DebugLogAll ;
7615: CALL_OW 360
// enable ;
7619: ENABLE
// end ; end_of_file
7620: END
// export function DE_Triggers ; begin
7621: LD_INT 0
7623: PPUSH
// disable ( 44 ) ;
7624: LD_INT 44
7626: DISABLE_MARKED
// disable ( 45 ) ;
7627: LD_INT 45
7629: DISABLE_MARKED
// disable ( 400 ) ;
7630: LD_INT 400
7632: DISABLE_MARKED
// disable ( 401 ) ;
7633: LD_INT 401
7635: DISABLE_MARKED
// disable ( 98 ) ;
7636: LD_INT 98
7638: DISABLE_MARKED
// disable ( 99 ) ;
7639: LD_INT 99
7641: DISABLE_MARKED
// end ;
7642: LD_VAR 0 1
7646: RET
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7647: LD_VAR 0 1
7651: PPUSH
7652: LD_VAR 0 2
7656: PPUSH
7657: LD_VAR 0 3
7661: PPUSH
7662: LD_OWVAR 2
7666: PPUSH
7667: CALL 10284 0 4
7671: PPOPN 3
7673: END
// export function Init_Win_Condition ; begin
7674: LD_INT 0
7676: PPUSH
// if Team_Game then
7677: LD_EXP 41
7681: IFFALSE 7688
// enable ( 98 ) else
7683: LD_INT 98
7685: ENABLE_MARKED
7686: GO 7691
// enable ( 99 ) ;
7688: LD_INT 99
7690: ENABLE_MARKED
// end ;
7691: LD_VAR 0 1
7695: RET
// every 100 trigger CanWinLoose marked 400 do
7696: CALL 6583 0 0
7700: IFFALSE 7709
7702: GO 7704
7704: DISABLE
// YouLostInMultiplayer ;
7705: CALL_OW 107
7709: END
// every 100 trigger CanWinLoose marked 401 do
7710: CALL 6583 0 0
7714: IFFALSE 7723
7716: GO 7718
7718: DISABLE
// YouWinInMultiplayer ;
7719: CALL_OW 106
7723: END
// every 0 0$2 marked 98 do var win , i ;
7724: GO 7726
7726: DISABLE
7727: LD_INT 0
7729: PPUSH
7730: PPUSH
// begin if your_side then
7731: LD_OWVAR 2
7735: IFFALSE 7941
// if not FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
7737: LD_INT 22
7739: PUSH
7740: LD_OWVAR 2
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 2
7751: PUSH
7752: LD_INT 21
7754: PUSH
7755: LD_INT 1
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: LD_INT 30
7764: PUSH
7765: LD_INT 0
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 30
7774: PUSH
7775: LD_INT 1
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PPUSH
7792: CALL_OW 69
7796: NOT
7797: IFFALSE 7813
// begin wait ( 0 0$3 ) ;
7799: LD_INT 105
7801: PPUSH
7802: CALL_OW 67
// enable ( 400 ) ;
7806: LD_INT 400
7808: ENABLE_MARKED
// exit ;
7809: GO 7942
// end else
7811: GO 7941
// begin win := true ;
7813: LD_ADDR_VAR 0 1
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// for i = 1 to Side_positions do
7821: LD_ADDR_VAR 0 2
7825: PUSH
7826: DOUBLE
7827: LD_INT 1
7829: DEC
7830: ST_TO_ADDR
7831: LD_EXP 36
7835: PUSH
7836: FOR_TO
7837: IFFALSE 7921
// if Side_positions [ i ] and ( i <> your_side ) and MultiplayerSideAlive ( i ) then
7839: LD_EXP 36
7843: PUSH
7844: LD_VAR 0 2
7848: ARRAY
7849: PUSH
7850: LD_VAR 0 2
7854: PUSH
7855: LD_OWVAR 2
7859: NONEQUAL
7860: AND
7861: PUSH
7862: LD_VAR 0 2
7866: PPUSH
7867: CALL_OW 108
7871: AND
7872: IFFALSE 7919
// begin if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7874: LD_EXP 33
7878: PUSH
7879: LD_VAR 0 2
7883: ARRAY
7884: NOT
7885: PUSH
7886: LD_EXP 33
7890: PUSH
7891: LD_VAR 0 2
7895: ARRAY
7896: PUSH
7897: LD_EXP 33
7901: PUSH
7902: LD_OWVAR 2
7906: ARRAY
7907: NONEQUAL
7908: OR
7909: IFFALSE 7919
// win := false ;
7911: LD_ADDR_VAR 0 1
7915: PUSH
7916: LD_INT 0
7918: ST_TO_ADDR
// end ;
7919: GO 7836
7921: POP
7922: POP
// if win then
7923: LD_VAR 0 1
7927: IFFALSE 7941
// begin wait ( 0 0$3 ) ;
7929: LD_INT 105
7931: PPUSH
7932: CALL_OW 67
// enable ( 401 ) ;
7936: LD_INT 401
7938: ENABLE_MARKED
// exit ;
7939: GO 7942
// end ; end ; enable ;
7941: ENABLE
// end ;
7942: PPOPN 2
7944: END
// every 0 0$3 marked 99 do var win , i ;
7945: GO 7947
7947: DISABLE
7948: LD_INT 0
7950: PPUSH
7951: PPUSH
// begin if not FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
7952: LD_INT 22
7954: PUSH
7955: LD_OWVAR 2
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 2
7966: PUSH
7967: LD_INT 21
7969: PUSH
7970: LD_INT 1
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PUSH
7977: LD_INT 30
7979: PUSH
7980: LD_INT 0
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PUSH
7987: LD_INT 30
7989: PUSH
7990: LD_INT 1
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PPUSH
8007: CALL_OW 69
8011: NOT
8012: IFFALSE 8028
// begin wait ( 0 0$3 ) ;
8014: LD_INT 105
8016: PPUSH
8017: CALL_OW 67
// enable ( 400 ) ;
8021: LD_INT 400
8023: ENABLE_MARKED
// exit ;
8024: GO 8137
// end else
8026: GO 8136
// begin win := true ;
8028: LD_ADDR_VAR 0 1
8032: PUSH
8033: LD_INT 1
8035: ST_TO_ADDR
// for i = 1 to Side_Positions do
8036: LD_ADDR_VAR 0 2
8040: PUSH
8041: DOUBLE
8042: LD_INT 1
8044: DEC
8045: ST_TO_ADDR
8046: LD_EXP 36
8050: PUSH
8051: FOR_TO
8052: IFFALSE 8116
// if Side_Positions [ i ] and ( i <> your_side ) and MultiplayerSideAlive ( i ) then
8054: LD_EXP 36
8058: PUSH
8059: LD_VAR 0 2
8063: ARRAY
8064: PUSH
8065: LD_VAR 0 2
8069: PUSH
8070: LD_OWVAR 2
8074: NONEQUAL
8075: AND
8076: PUSH
8077: LD_VAR 0 2
8081: PPUSH
8082: CALL_OW 108
8086: AND
8087: IFFALSE 8114
// if not AlliedSides ( i , your_side ) then
8089: LD_VAR 0 2
8093: PPUSH
8094: LD_OWVAR 2
8098: PPUSH
8099: CALL 8140 0 2
8103: NOT
8104: IFFALSE 8114
// win := false ;
8106: LD_ADDR_VAR 0 1
8110: PUSH
8111: LD_INT 0
8113: ST_TO_ADDR
8114: GO 8051
8116: POP
8117: POP
// if win then
8118: LD_VAR 0 1
8122: IFFALSE 8136
// begin wait ( 0 0$3 ) ;
8124: LD_INT 105
8126: PPUSH
8127: CALL_OW 67
// enable ( 401 ) ;
8131: LD_INT 401
8133: ENABLE_MARKED
// exit ;
8134: GO 8137
// end ; end ; enable ;
8136: ENABLE
// end ;
8137: PPOPN 2
8139: END
// function AlliedSides ( i , j ) ; var vysledek ; begin
8140: LD_INT 0
8142: PPUSH
8143: PPUSH
// vysledek := false ;
8144: LD_ADDR_VAR 0 4
8148: PUSH
8149: LD_INT 0
8151: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8152: LD_VAR 0 1
8156: PPUSH
8157: LD_VAR 0 2
8161: PPUSH
8162: CALL_OW 81
8166: PUSH
8167: LD_INT 1
8169: EQUAL
8170: PUSH
8171: LD_VAR 0 2
8175: PPUSH
8176: LD_VAR 0 1
8180: PPUSH
8181: CALL_OW 81
8185: PUSH
8186: LD_INT 1
8188: EQUAL
8189: AND
8190: PUSH
8191: LD_VAR 0 1
8195: PPUSH
8196: CALL_OW 83
8200: AND
8201: PUSH
8202: LD_VAR 0 2
8206: PPUSH
8207: CALL_OW 83
8211: AND
8212: IFFALSE 8222
// vysledek := true ;
8214: LD_ADDR_VAR 0 4
8218: PUSH
8219: LD_INT 1
8221: ST_TO_ADDR
// result := vysledek ;
8222: LD_ADDR_VAR 0 3
8226: PUSH
8227: LD_VAR 0 4
8231: ST_TO_ADDR
// end ; end_of_file
8232: LD_VAR 0 3
8236: RET
// export function DisplayNames ; var i ; begin
8237: LD_INT 0
8239: PPUSH
8240: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
8241: LD_ADDR_VAR 0 2
8245: PUSH
8246: LD_INT 2
8248: PUSH
8249: LD_INT 30
8251: PUSH
8252: LD_INT 0
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 30
8261: PUSH
8262: LD_INT 1
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: PUSH
8279: FOR_IN
8280: IFFALSE 8307
// SetBName ( i , @ & GetSide ( i ) ) ;
8282: LD_VAR 0 2
8286: PPUSH
8287: LD_STRING @
8289: PUSH
8290: LD_VAR 0 2
8294: PPUSH
8295: CALL_OW 255
8299: STR
8300: PPUSH
8301: CALL_OW 500
8305: GO 8279
8307: POP
8308: POP
// end ;
8309: LD_VAR 0 1
8313: RET
// every 0 0$2 do
8314: GO 8316
8316: DISABLE
// DisplayNames ;
8317: CALL 8237 0 0
8321: END
// on BuildingComplete ( b ) do DisplayNames ;
8322: CALL 8237 0 0
8326: PPOPN 1
8328: END
// on BuildingStarted ( b , h ) do DisplayNames ;
8329: CALL 8237 0 0
8333: PPOPN 2
8335: END
// on BuildingCaptured ( b , o , e ) do DisplayNames ; end_of_file
8336: CALL 8237 0 0
8340: PPOPN 3
8342: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
8343: LD_INT 0
8345: PPUSH
8346: PPUSH
// AllStrings := [ #gamespeed , game_speed - 4 ] ^ [ #Multi1x1-Time , tick ] ;
8347: LD_ADDR_VAR 0 2
8351: PUSH
8352: LD_STRING #gamespeed
8354: PUSH
8355: LD_OWVAR 65
8359: PUSH
8360: LD_INT 4
8362: MINUS
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: LD_STRING #Multi1x1-Time
8370: PUSH
8371: LD_OWVAR 1
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: ADD
8380: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8381: LD_INT 0
8383: PUSH
8384: LD_EXP 25
8388: PUSH
8389: LD_OWVAR 1
8393: MINUS
8394: LESSEQUAL
8395: IFFALSE 8426
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8397: LD_ADDR_VAR 0 2
8401: PUSH
8402: LD_VAR 0 2
8406: PUSH
8407: LD_STRING #allowedsibbomb
8409: PUSH
8410: LD_EXP 25
8414: PUSH
8415: LD_OWVAR 1
8419: MINUS
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: ADD
8425: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8426: LD_INT 0
8428: PUSH
8429: LD_EXP 51
8433: PUSH
8434: LD_OWVAR 1
8438: MINUS
8439: LESSEQUAL
8440: IFFALSE 8471
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
8442: LD_ADDR_VAR 0 2
8446: PUSH
8447: LD_VAR 0 2
8451: PUSH
8452: LD_STRING #builduptime
8454: PUSH
8455: LD_EXP 51
8459: PUSH
8460: LD_OWVAR 1
8464: MINUS
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: ADD
8470: ST_TO_ADDR
// Display_Strings := AllStrings ;
8471: LD_ADDR_OWVAR 47
8475: PUSH
8476: LD_VAR 0 2
8480: ST_TO_ADDR
// end ;
8481: LD_VAR 0 1
8485: RET
// every 0 0$1 do
8486: GO 8488
8488: DISABLE
// begin ShowTimer ;
8489: CALL 8343 0 0
// enable ;
8493: ENABLE
// end ; end_of_file
8494: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
8495: LD_INT 0
8497: PPUSH
8498: PPUSH
8499: PPUSH
// BuildUpTime_Delay = 0 ;
8500: LD_ADDR_EXP 51
8504: PUSH
8505: LD_INT 0
8507: ST_TO_ADDR
// if not def_builduptime then
8508: LD_EXP 12
8512: NOT
8513: IFFALSE 8517
// exit ;
8515: GO 8700
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
8517: LD_ADDR_EXP 51
8521: PUSH
8522: LD_INT 8400
8524: PUSH
8525: LD_INT 2100
8527: PUSH
8528: LD_EXP 12
8532: MUL
8533: PLUS
8534: ST_TO_ADDR
// BuildUpTimeActive := true ;
8535: LD_ADDR_EXP 50
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// for i := 1 to 8 do
8543: LD_ADDR_VAR 0 2
8547: PUSH
8548: DOUBLE
8549: LD_INT 1
8551: DEC
8552: ST_TO_ADDR
8553: LD_INT 8
8555: PUSH
8556: FOR_TO
8557: IFFALSE 8698
// if Side_Positions [ i ] then
8559: LD_EXP 36
8563: PUSH
8564: LD_VAR 0 2
8568: ARRAY
8569: IFFALSE 8696
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
8571: LD_EXP 49
8575: PUSH
8576: LD_EXP 36
8580: PUSH
8581: LD_VAR 0 2
8585: ARRAY
8586: ARRAY
8587: PPUSH
8588: LD_INT 5
8590: PPUSH
8591: CALL_OW 424
// for j := 1 to 8 do
8595: LD_ADDR_VAR 0 3
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_INT 8
8607: PUSH
8608: FOR_TO
8609: IFFALSE 8694
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8611: LD_EXP 36
8615: PUSH
8616: LD_VAR 0 3
8620: ARRAY
8621: PUSH
8622: LD_EXP 33
8626: PUSH
8627: LD_VAR 0 2
8631: ARRAY
8632: PUSH
8633: LD_EXP 33
8637: PUSH
8638: LD_VAR 0 3
8642: ARRAY
8643: NONEQUAL
8644: PUSH
8645: LD_EXP 41
8649: NOT
8650: PUSH
8651: LD_VAR 0 2
8655: PUSH
8656: LD_VAR 0 3
8660: NONEQUAL
8661: AND
8662: OR
8663: AND
8664: IFFALSE 8692
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8666: LD_VAR 0 3
8670: PPUSH
8671: LD_EXP 49
8675: PUSH
8676: LD_EXP 36
8680: PUSH
8681: LD_VAR 0 2
8685: ARRAY
8686: ARRAY
8687: PPUSH
8688: CALL_OW 333
8692: GO 8608
8694: POP
8695: POP
// end ;
8696: GO 8556
8698: POP
8699: POP
// end ;
8700: LD_VAR 0 1
8704: RET
// export function EndBuildUp ; var i , j ; begin
8705: LD_INT 0
8707: PPUSH
8708: PPUSH
8709: PPUSH
// BuildUpTimeActive := false ;
8710: LD_ADDR_EXP 50
8714: PUSH
8715: LD_INT 0
8717: ST_TO_ADDR
// for i := 1 to 8 do
8718: LD_ADDR_VAR 0 2
8722: PUSH
8723: DOUBLE
8724: LD_INT 1
8726: DEC
8727: ST_TO_ADDR
8728: LD_INT 8
8730: PUSH
8731: FOR_TO
8732: IFFALSE 8873
// if Side_Positions [ i ] then
8734: LD_EXP 36
8738: PUSH
8739: LD_VAR 0 2
8743: ARRAY
8744: IFFALSE 8871
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
8746: LD_EXP 49
8750: PUSH
8751: LD_EXP 36
8755: PUSH
8756: LD_VAR 0 2
8760: ARRAY
8761: ARRAY
8762: PPUSH
8763: LD_INT 0
8765: PPUSH
8766: CALL_OW 424
// for j := 1 to 8 do
8770: LD_ADDR_VAR 0 3
8774: PUSH
8775: DOUBLE
8776: LD_INT 1
8778: DEC
8779: ST_TO_ADDR
8780: LD_INT 8
8782: PUSH
8783: FOR_TO
8784: IFFALSE 8869
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8786: LD_EXP 36
8790: PUSH
8791: LD_VAR 0 3
8795: ARRAY
8796: PUSH
8797: LD_EXP 33
8801: PUSH
8802: LD_VAR 0 2
8806: ARRAY
8807: PUSH
8808: LD_EXP 33
8812: PUSH
8813: LD_VAR 0 3
8817: ARRAY
8818: NONEQUAL
8819: PUSH
8820: LD_EXP 41
8824: NOT
8825: PUSH
8826: LD_VAR 0 2
8830: PUSH
8831: LD_VAR 0 3
8835: NONEQUAL
8836: AND
8837: OR
8838: AND
8839: IFFALSE 8867
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8841: LD_VAR 0 3
8845: PPUSH
8846: LD_EXP 49
8850: PUSH
8851: LD_EXP 36
8855: PUSH
8856: LD_VAR 0 2
8860: ARRAY
8861: ARRAY
8862: PPUSH
8863: CALL_OW 334
8867: GO 8783
8869: POP
8870: POP
// end ;
8871: GO 8731
8873: POP
8874: POP
// end ;
8875: LD_VAR 0 1
8879: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
8880: LD_EXP 50
8884: IFFALSE 9059
8886: GO 8888
8888: DISABLE
8889: LD_INT 0
8891: PPUSH
8892: PPUSH
// begin for i := 1 to 8 do
8893: LD_ADDR_VAR 0 1
8897: PUSH
8898: DOUBLE
8899: LD_INT 1
8901: DEC
8902: ST_TO_ADDR
8903: LD_INT 8
8905: PUSH
8906: FOR_TO
8907: IFFALSE 9056
// if Side_Positions [ i ] then
8909: LD_EXP 36
8913: PUSH
8914: LD_VAR 0 1
8918: ARRAY
8919: IFFALSE 9054
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8921: LD_ADDR_VAR 0 2
8925: PUSH
8926: LD_EXP 49
8930: PUSH
8931: LD_EXP 36
8935: PUSH
8936: LD_VAR 0 1
8940: ARRAY
8941: ARRAY
8942: PPUSH
8943: LD_INT 2
8945: PUSH
8946: LD_INT 21
8948: PUSH
8949: LD_INT 1
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 21
8958: PUSH
8959: LD_INT 2
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 22
8973: PUSH
8974: LD_OWVAR 2
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PPUSH
8987: CALL_OW 70
8991: PUSH
8992: FOR_IN
8993: IFFALSE 9052
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
8995: LD_EXP 33
8999: PUSH
9000: LD_VAR 0 1
9004: ARRAY
9005: PUSH
9006: LD_EXP 33
9010: PUSH
9011: LD_OWVAR 2
9015: ARRAY
9016: NONEQUAL
9017: PUSH
9018: LD_EXP 41
9022: NOT
9023: PUSH
9024: LD_VAR 0 1
9028: PUSH
9029: LD_OWVAR 2
9033: NONEQUAL
9034: AND
9035: OR
9036: IFFALSE 9050
// ComMoveToArea ( un , BuildUpEscape ) ;
9038: LD_VAR 0 2
9042: PPUSH
9043: LD_INT 19
9045: PPUSH
9046: CALL_OW 113
9050: GO 8992
9052: POP
9053: POP
9054: GO 8906
9056: POP
9057: POP
// enable ;
9058: ENABLE
// end ;
9059: PPOPN 2
9061: END
// every 0 0$1 trigger def_builduptime do
9062: LD_EXP 12
9066: IFFALSE 9092
9068: GO 9070
9070: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
9071: LD_INT 8400
9073: PUSH
9074: LD_EXP 12
9078: PUSH
9079: LD_INT 2100
9081: MUL
9082: PLUS
9083: PPUSH
9084: CALL_OW 67
// EndBuildUp ;
9088: CALL 8705 0 0
// end ; end_of_file
9092: END
// export ObnovCas , ObnovZpozdeni ; export function SetRespawningTime ( minBTime , maxBTime , MinDelay , MaxDelay ) ; var k ; begin
9093: LD_INT 0
9095: PPUSH
9096: PPUSH
// k = Rand ( minBTime , maxBTime ) ;
9097: LD_ADDR_VAR 0 6
9101: PUSH
9102: LD_VAR 0 1
9106: PPUSH
9107: LD_VAR 0 2
9111: PPUSH
9112: CALL_OW 12
9116: ST_TO_ADDR
// ObnovCas = [ k , k , k , k , k , k , k , k ] ;
9117: LD_ADDR_EXP 52
9121: PUSH
9122: LD_VAR 0 6
9126: PUSH
9127: LD_VAR 0 6
9131: PUSH
9132: LD_VAR 0 6
9136: PUSH
9137: LD_VAR 0 6
9141: PUSH
9142: LD_VAR 0 6
9146: PUSH
9147: LD_VAR 0 6
9151: PUSH
9152: LD_VAR 0 6
9156: PUSH
9157: LD_VAR 0 6
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: ST_TO_ADDR
// k = Rand ( minDelay , MaxDelay ) ;
9172: LD_ADDR_VAR 0 6
9176: PUSH
9177: LD_VAR 0 3
9181: PPUSH
9182: LD_VAR 0 4
9186: PPUSH
9187: CALL_OW 12
9191: ST_TO_ADDR
// ObnovZpozdeni = k ;
9192: LD_ADDR_EXP 53
9196: PUSH
9197: LD_VAR 0 6
9201: ST_TO_ADDR
// end ;
9202: LD_VAR 0 5
9206: RET
// export unit_list ; export function ObnovCloveka ( side , nation , restored ) ; var building_list , b , n , un , k , i , base_skills , speed , def ; begin
9207: LD_INT 0
9209: PPUSH
9210: PPUSH
9211: PPUSH
9212: PPUSH
9213: PPUSH
9214: PPUSH
9215: PPUSH
9216: PPUSH
9217: PPUSH
9218: PPUSH
// if ObnovCas [ side ] = 0 then
9219: LD_EXP 52
9223: PUSH
9224: LD_VAR 0 1
9228: ARRAY
9229: PUSH
9230: LD_INT 0
9232: EQUAL
9233: IFFALSE 9237
// exit ;
9235: GO 9862
// uc_nation := nation ;
9237: LD_ADDR_OWVAR 21
9241: PUSH
9242: LD_VAR 0 2
9246: ST_TO_ADDR
// uc_side := side ;
9247: LD_ADDR_OWVAR 20
9251: PUSH
9252: LD_VAR 0 1
9256: ST_TO_ADDR
// uc_direction := Rand ( 0 , 5 ) ;
9257: LD_ADDR_OWVAR 24
9261: PUSH
9262: LD_INT 0
9264: PPUSH
9265: LD_INT 5
9267: PPUSH
9268: CALL_OW 12
9272: ST_TO_ADDR
// if restored then
9273: LD_VAR 0 3
9277: IFFALSE 9360
// begin hc_class = GetClass ( restored ) ;
9279: LD_ADDR_OWVAR 28
9283: PUSH
9284: LD_VAR 0 3
9288: PPUSH
9289: CALL_OW 257
9293: ST_TO_ADDR
// hc_attr = [ GetAttr ( restored , attr_stamina ) , GetAttr ( restored , attr_speed ) ] ;
9294: LD_ADDR_OWVAR 29
9298: PUSH
9299: LD_VAR 0 3
9303: PPUSH
9304: LD_INT 1
9306: PPUSH
9307: CALL_OW 260
9311: PUSH
9312: LD_VAR 0 3
9316: PPUSH
9317: LD_INT 2
9319: PPUSH
9320: CALL_OW 260
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: ST_TO_ADDR
// if hc_class in [ class_sniper , class_bazooker , class_mortar ] then
9329: LD_OWVAR 28
9333: PUSH
9334: LD_INT 5
9336: PUSH
9337: LD_INT 9
9339: PUSH
9340: LD_INT 8
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: IN
9348: IFFALSE 9358
// hc_class = class_soldier ;
9350: LD_ADDR_OWVAR 28
9354: PUSH
9355: LD_INT 1
9357: ST_TO_ADDR
// end else
9358: GO 9369
// randomHumanStats ( initial_level ) ;
9360: LD_EXP 16
9364: PPUSH
9365: CALL 10793 0 1
// hc_importance := 0 ;
9369: LD_ADDR_OWVAR 32
9373: PUSH
9374: LD_INT 0
9376: ST_TO_ADDR
// hc_gallery :=  ;
9377: LD_ADDR_OWVAR 33
9381: PUSH
9382: LD_STRING 
9384: ST_TO_ADDR
// hc_face_number := 0 ;
9385: LD_ADDR_OWVAR 34
9389: PUSH
9390: LD_INT 0
9392: ST_TO_ADDR
// un := CreateHuman ;
9393: LD_ADDR_VAR 0 8
9397: PUSH
9398: CALL_OW 44
9402: ST_TO_ADDR
// if restored then
9403: LD_VAR 0 3
9407: IFFALSE 9423
// CopySkills ( restored , un ) ;
9409: LD_VAR 0 3
9413: PPUSH
9414: LD_VAR 0 8
9418: PPUSH
9419: CALL_OW 510
// k = ObnovCas [ side ] + ObnovZpozdeni ;
9423: LD_ADDR_VAR 0 9
9427: PUSH
9428: LD_EXP 52
9432: PUSH
9433: LD_VAR 0 1
9437: ARRAY
9438: PUSH
9439: LD_EXP 53
9443: PLUS
9444: ST_TO_ADDR
// ObnovCas = Replace ( ObnovCas , side , k ) ;
9445: LD_ADDR_EXP 52
9449: PUSH
9450: LD_EXP 52
9454: PPUSH
9455: LD_VAR 0 1
9459: PPUSH
9460: LD_VAR 0 9
9464: PPUSH
9465: CALL_OW 1
9469: ST_TO_ADDR
// wait ( ObnovCas [ side ] - ObnovZpozdeni ) ;
9470: LD_EXP 52
9474: PUSH
9475: LD_VAR 0 1
9479: ARRAY
9480: PUSH
9481: LD_EXP 53
9485: MINUS
9486: PPUSH
9487: CALL_OW 67
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] , [ f_nation , nation ] ] ) ;
9491: LD_ADDR_VAR 0 5
9495: PUSH
9496: LD_INT 21
9498: PUSH
9499: LD_INT 3
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 2
9508: PUSH
9509: LD_INT 30
9511: PUSH
9512: LD_INT 0
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 30
9521: PUSH
9522: LD_INT 1
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: LIST
9533: PUSH
9534: LD_INT 50
9536: PUSH
9537: EMPTY
9538: LIST
9539: PUSH
9540: LD_INT 22
9542: PUSH
9543: LD_VAR 0 1
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 23
9554: PUSH
9555: LD_VAR 0 2
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: PPUSH
9571: CALL_OW 69
9575: ST_TO_ADDR
// if building_list = 0 then
9576: LD_VAR 0 5
9580: PUSH
9581: LD_INT 0
9583: EQUAL
9584: IFFALSE 9658
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] ] ) ;
9586: LD_ADDR_VAR 0 5
9590: PUSH
9591: LD_INT 21
9593: PUSH
9594: LD_INT 3
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: LD_INT 2
9603: PUSH
9604: LD_INT 30
9606: PUSH
9607: LD_INT 0
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 30
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 50
9631: PUSH
9632: EMPTY
9633: LIST
9634: PUSH
9635: LD_INT 22
9637: PUSH
9638: LD_VAR 0 1
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: PPUSH
9653: CALL_OW 69
9657: ST_TO_ADDR
// if building_list > 0 then
9658: LD_VAR 0 5
9662: PUSH
9663: LD_INT 0
9665: GREATER
9666: IFFALSE 9784
// begin b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
9668: LD_ADDR_VAR 0 6
9672: PUSH
9673: LD_VAR 0 5
9677: PUSH
9678: LD_INT 1
9680: PPUSH
9681: LD_VAR 0 5
9685: PUSH
9686: LD_INT 0
9688: PLUS
9689: PPUSH
9690: CALL_OW 12
9694: ARRAY
9695: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
9696: LD_VAR 0 6
9700: PPUSH
9701: CALL_OW 266
9705: PUSH
9706: LD_INT 0
9708: PUSH
9709: LD_INT 1
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: IN
9716: IFFALSE 9728
// n = 25 else
9718: LD_ADDR_VAR 0 7
9722: PUSH
9723: LD_INT 25
9725: ST_TO_ADDR
9726: GO 9736
// n = 10 ;
9728: LD_ADDR_VAR 0 7
9732: PUSH
9733: LD_INT 10
9735: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( b ) , GetY ( b ) , n , true ) ;
9736: LD_VAR 0 8
9740: PPUSH
9741: LD_VAR 0 6
9745: PPUSH
9746: CALL_OW 250
9750: PPUSH
9751: LD_VAR 0 6
9755: PPUSH
9756: CALL_OW 251
9760: PPUSH
9761: LD_VAR 0 7
9765: PPUSH
9766: LD_INT 1
9768: PPUSH
9769: CALL_OW 50
// OnHumanRespawned ( un ) ;
9773: LD_VAR 0 8
9777: PPUSH
9778: CALL 5237 0 1
// end else
9782: GO 9862
// begin unit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] ] ) ;
9784: LD_ADDR_EXP 54
9788: PUSH
9789: LD_INT 22
9791: PUSH
9792: LD_VAR 0 1
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PUSH
9801: LD_INT 50
9803: PUSH
9804: EMPTY
9805: LIST
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PPUSH
9811: CALL_OW 69
9815: ST_TO_ADDR
// if unit_list > 0 then
9816: LD_EXP 54
9820: PUSH
9821: LD_INT 0
9823: GREATER
9824: IFFALSE 9860
// begin ObnovOpozdilceCloveka ( un , side , k / 2 ) ;
9826: LD_VAR 0 8
9830: PPUSH
9831: LD_VAR 0 1
9835: PPUSH
9836: LD_VAR 0 9
9840: PUSH
9841: LD_INT 2
9843: DIVREAL
9844: PPUSH
9845: CALL 9867 0 3
// OnHumanRespawned ( un ) ;
9849: LD_VAR 0 8
9853: PPUSH
9854: CALL 5237 0 1
// end else
9858: GO 9862
// exit ;
9860: GO 9862
// end ; end ;
9862: LD_VAR 0 4
9866: RET
// function ObnovOpozdilceCloveka ( un , side , waitTime ) ; var building_list , n , unit_list , b ; begin
9867: LD_INT 0
9869: PPUSH
9870: PPUSH
9871: PPUSH
9872: PPUSH
9873: PPUSH
// wait ( waitTime ) ;
9874: LD_VAR 0 3
9878: PPUSH
9879: CALL_OW 67
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] , [ f_nation , GetNation ( un ) ] ] ) ;
9883: LD_ADDR_VAR 0 5
9887: PUSH
9888: LD_INT 21
9890: PUSH
9891: LD_INT 3
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: LD_INT 2
9900: PUSH
9901: LD_INT 30
9903: PUSH
9904: LD_INT 0
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 30
9913: PUSH
9914: LD_INT 1
9916: PUSH
9917: EMPTY
9918: LIST
9919: LIST
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 50
9928: PUSH
9929: EMPTY
9930: LIST
9931: PUSH
9932: LD_INT 22
9934: PUSH
9935: LD_VAR 0 2
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: LD_INT 23
9946: PUSH
9947: LD_VAR 0 1
9951: PPUSH
9952: CALL_OW 248
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: ST_TO_ADDR
// if building_list = 0 then
9973: LD_VAR 0 5
9977: PUSH
9978: LD_INT 0
9980: EQUAL
9981: IFFALSE 10055
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] ] ) ;
9983: LD_ADDR_VAR 0 5
9987: PUSH
9988: LD_INT 21
9990: PUSH
9991: LD_INT 3
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 2
10000: PUSH
10001: LD_INT 30
10003: PUSH
10004: LD_INT 0
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: LD_INT 30
10013: PUSH
10014: LD_INT 1
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: LIST
10025: PUSH
10026: LD_INT 50
10028: PUSH
10029: EMPTY
10030: LIST
10031: PUSH
10032: LD_INT 22
10034: PUSH
10035: LD_VAR 0 2
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: PPUSH
10050: CALL_OW 69
10054: ST_TO_ADDR
// if building_list > 0 then
10055: LD_VAR 0 5
10059: PUSH
10060: LD_INT 0
10062: GREATER
10063: IFFALSE 10181
// begin b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
10065: LD_ADDR_VAR 0 8
10069: PUSH
10070: LD_VAR 0 5
10074: PUSH
10075: LD_INT 1
10077: PPUSH
10078: LD_VAR 0 5
10082: PUSH
10083: LD_INT 0
10085: PLUS
10086: PPUSH
10087: CALL_OW 12
10091: ARRAY
10092: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
10093: LD_VAR 0 8
10097: PPUSH
10098: CALL_OW 266
10102: PUSH
10103: LD_INT 0
10105: PUSH
10106: LD_INT 1
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: IN
10113: IFFALSE 10125
// n = 25 else
10115: LD_ADDR_VAR 0 6
10119: PUSH
10120: LD_INT 25
10122: ST_TO_ADDR
10123: GO 10133
// n = 10 ;
10125: LD_ADDR_VAR 0 6
10129: PUSH
10130: LD_INT 10
10132: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( b ) , GetY ( b ) , n , true ) ;
10133: LD_VAR 0 1
10137: PPUSH
10138: LD_VAR 0 8
10142: PPUSH
10143: CALL_OW 250
10147: PPUSH
10148: LD_VAR 0 8
10152: PPUSH
10153: CALL_OW 251
10157: PPUSH
10158: LD_VAR 0 6
10162: PPUSH
10163: LD_INT 1
10165: PPUSH
10166: CALL_OW 50
// OnHumanRespawned ( un ) ;
10170: LD_VAR 0 1
10174: PPUSH
10175: CALL 5237 0 1
// end else
10179: GO 10279
// begin unit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10181: LD_ADDR_VAR 0 7
10185: PUSH
10186: LD_INT 22
10188: PUSH
10189: LD_VAR 0 2
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 2
10200: PUSH
10201: LD_INT 21
10203: PUSH
10204: LD_INT 1
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 33
10213: PUSH
10214: LD_INT 3
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 33
10223: PUSH
10224: LD_INT 5
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PPUSH
10241: CALL_OW 69
10245: ST_TO_ADDR
// if unit_list > 0 then
10246: LD_VAR 0 7
10250: PUSH
10251: LD_INT 0
10253: GREATER
10254: IFFALSE 10277
// ObnovOpozdilceCloveka ( un , side , waitTime ) else
10256: LD_VAR 0 1
10260: PPUSH
10261: LD_VAR 0 2
10265: PPUSH
10266: LD_VAR 0 3
10270: PPUSH
10271: CALL 9867 0 3
10275: GO 10279
// exit ;
10277: GO 10279
// end ; end ; end_of_file
10279: LD_VAR 0 4
10283: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
10284: LD_INT 0
10286: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
10287: LD_VAR 0 1
10291: PPUSH
10292: CALL_OW 255
10296: PUSH
10297: LD_VAR 0 4
10301: EQUAL
10302: IFFALSE 10321
// begin SetAchievement ( ACH_RAD ) ;
10304: LD_STRING ACH_RAD
10306: PPUSH
10307: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
10311: LD_STRING ACH_NL
10313: PPUSH
10314: LD_INT 1
10316: PPUSH
10317: CALL_OW 564
// end end ;
10321: LD_VAR 0 5
10325: RET
// export function SA_Win ( side ) ; begin
10326: LD_INT 0
10328: PPUSH
// case side of 1 :
10329: LD_VAR 0 1
10333: PUSH
10334: LD_INT 1
10336: DOUBLE
10337: EQUAL
10338: IFTRUE 10342
10340: GO 10355
10342: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
10343: LD_STRING ACH_AH
10345: PPUSH
10346: LD_INT 1
10348: PPUSH
10349: CALL_OW 564
10353: GO 10518
10355: LD_INT 2
10357: DOUBLE
10358: EQUAL
10359: IFTRUE 10363
10361: GO 10376
10363: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
10364: LD_STRING ACH_E
10366: PPUSH
10367: LD_INT 1
10369: PPUSH
10370: CALL_OW 564
10374: GO 10518
10376: LD_INT 3
10378: DOUBLE
10379: EQUAL
10380: IFTRUE 10384
10382: GO 10397
10384: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
10385: LD_STRING ACH_OOL
10387: PPUSH
10388: LD_INT 1
10390: PPUSH
10391: CALL_OW 564
10395: GO 10518
10397: LD_INT 1
10399: PUSH
10400: LD_INT 2
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: DOUBLE
10407: EQUAL
10408: IFTRUE 10412
10410: GO 10437
10412: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10413: LD_STRING ACH_AH
10415: PPUSH
10416: LD_REAL  5.00000000000000E-0001
10419: PPUSH
10420: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10424: LD_STRING ACH_E
10426: PPUSH
10427: LD_REAL  5.00000000000000E-0001
10430: PPUSH
10431: CALL_OW 564
// end ; [ 2 , 3 ] :
10435: GO 10518
10437: LD_INT 2
10439: PUSH
10440: LD_INT 3
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: DOUBLE
10447: EQUAL
10448: IFTRUE 10452
10450: GO 10477
10452: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10453: LD_STRING ACH_OOL
10455: PPUSH
10456: LD_REAL  5.00000000000000E-0001
10459: PPUSH
10460: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10464: LD_STRING ACH_E
10466: PPUSH
10467: LD_REAL  5.00000000000000E-0001
10470: PPUSH
10471: CALL_OW 564
// end ; [ 3 , 1 ] :
10475: GO 10518
10477: LD_INT 3
10479: PUSH
10480: LD_INT 1
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: DOUBLE
10487: EQUAL
10488: IFTRUE 10492
10490: GO 10517
10492: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10493: LD_STRING ACH_AH
10495: PPUSH
10496: LD_REAL  5.00000000000000E-0001
10499: PPUSH
10500: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
10504: LD_STRING ACH_OOL
10506: PPUSH
10507: LD_REAL  5.00000000000000E-0001
10510: PPUSH
10511: CALL_OW 564
// end ; end ;
10515: GO 10518
10517: POP
// end ; end_of_file
10518: LD_VAR 0 2
10522: RET
// export MaxFlags ; export function ShowResources ( FullMapArea , EnableSiberitResurces , Range ) ; var k , k2 , i , d , r , u ; begin
10523: LD_INT 0
10525: PPUSH
10526: PPUSH
10527: PPUSH
10528: PPUSH
10529: PPUSH
10530: PPUSH
10531: PPUSH
// if range = 0 then
10532: LD_VAR 0 3
10536: PUSH
10537: LD_INT 0
10539: EQUAL
10540: IFFALSE 10550
// range = 400 ;
10542: LD_ADDR_VAR 0 3
10546: PUSH
10547: LD_INT 400
10549: ST_TO_ADDR
// r = range ;
10550: LD_ADDR_VAR 0 9
10554: PUSH
10555: LD_VAR 0 3
10559: ST_TO_ADDR
// d = GetListOfResourcesInArea ( FullMapArea ) ;
10560: LD_ADDR_VAR 0 8
10564: PUSH
10565: LD_VAR 0 1
10569: PPUSH
10570: CALL_OW 442
10574: ST_TO_ADDR
// for k = 1 to ( d / 3 ) do
10575: LD_ADDR_VAR 0 5
10579: PUSH
10580: DOUBLE
10581: LD_INT 1
10583: DEC
10584: ST_TO_ADDR
10585: LD_VAR 0 8
10589: PUSH
10590: LD_INT 3
10592: DIVREAL
10593: PUSH
10594: FOR_TO
10595: IFFALSE 10786
// begin k2 = k * 3 ;
10597: LD_ADDR_VAR 0 6
10601: PUSH
10602: LD_VAR 0 5
10606: PUSH
10607: LD_INT 3
10609: MUL
10610: ST_TO_ADDR
// for i = 1 to 8 do
10611: LD_ADDR_VAR 0 7
10615: PUSH
10616: DOUBLE
10617: LD_INT 1
10619: DEC
10620: ST_TO_ADDR
10621: LD_INT 8
10623: PUSH
10624: FOR_TO
10625: IFFALSE 10782
// begin if d [ k2 ] = 1 or ( d [ k2 ] = 2 and EnableSiberitResurces ) then
10627: LD_VAR 0 8
10631: PUSH
10632: LD_VAR 0 6
10636: ARRAY
10637: PUSH
10638: LD_INT 1
10640: EQUAL
10641: PUSH
10642: LD_VAR 0 8
10646: PUSH
10647: LD_VAR 0 6
10651: ARRAY
10652: PUSH
10653: LD_INT 2
10655: EQUAL
10656: PUSH
10657: LD_VAR 0 2
10661: AND
10662: OR
10663: IFFALSE 10780
// begin u = filterAllUnits ( [ [ f_side , i ] , [ f_distxy , d [ k2 - 2 ] , d [ k2 - 1 ] , r ] ] ) ;
10665: LD_ADDR_VAR 0 10
10669: PUSH
10670: LD_INT 22
10672: PUSH
10673: LD_VAR 0 7
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 92
10684: PUSH
10685: LD_VAR 0 8
10689: PUSH
10690: LD_VAR 0 6
10694: PUSH
10695: LD_INT 2
10697: MINUS
10698: ARRAY
10699: PUSH
10700: LD_VAR 0 8
10704: PUSH
10705: LD_VAR 0 6
10709: PUSH
10710: LD_INT 1
10712: MINUS
10713: ARRAY
10714: PUSH
10715: LD_VAR 0 9
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PPUSH
10730: CALL_OW 69
10734: ST_TO_ADDR
// if u then
10735: LD_VAR 0 10
10739: IFFALSE 10780
// SetResourceVisibility ( d [ k2 - 2 ] , d [ k2 - 1 ] , i ) ;
10741: LD_VAR 0 8
10745: PUSH
10746: LD_VAR 0 6
10750: PUSH
10751: LD_INT 2
10753: MINUS
10754: ARRAY
10755: PPUSH
10756: LD_VAR 0 8
10760: PUSH
10761: LD_VAR 0 6
10765: PUSH
10766: LD_INT 1
10768: MINUS
10769: ARRAY
10770: PPUSH
10771: LD_VAR 0 7
10775: PPUSH
10776: CALL_OW 441
// end ; end ;
10780: GO 10624
10782: POP
10783: POP
// end ;
10784: GO 10594
10786: POP
10787: POP
// end ;
10788: LD_VAR 0 4
10792: RET
// export function randomHumanStats ( init_level ) ; var cl , combat , eng , mech , sci , skills , base_skills , attr ; var i , k , base , n , def , speed ; begin
10793: LD_INT 0
10795: PPUSH
10796: PPUSH
10797: PPUSH
10798: PPUSH
10799: PPUSH
10800: PPUSH
10801: PPUSH
10802: PPUSH
10803: PPUSH
10804: PPUSH
10805: PPUSH
10806: PPUSH
10807: PPUSH
10808: PPUSH
10809: PPUSH
// cl = rand ( 1 , 4 ) ;
10810: LD_ADDR_VAR 0 3
10814: PUSH
10815: LD_INT 1
10817: PPUSH
10818: LD_INT 4
10820: PPUSH
10821: CALL_OW 12
10825: ST_TO_ADDR
// base = init_level ;
10826: LD_ADDR_VAR 0 13
10830: PUSH
10831: LD_VAR 0 1
10835: ST_TO_ADDR
// case tick of 0 .. 5 5$00 :
10836: LD_OWVAR 1
10840: PUSH
10841: LD_INT 0
10843: DOUBLE
10844: GREATEREQUAL
10845: IFFALSE 10853
10847: LD_INT 10500
10849: DOUBLE
10850: LESSEQUAL
10851: IFTRUE 10855
10853: GO 10866
10855: POP
// i = 1 ; 5 5$01 .. 9 9$00 :
10856: LD_ADDR_VAR 0 11
10860: PUSH
10861: LD_INT 1
10863: ST_TO_ADDR
10864: GO 11125
10866: LD_INT 10535
10868: DOUBLE
10869: GREATEREQUAL
10870: IFFALSE 10878
10872: LD_INT 18900
10874: DOUBLE
10875: LESSEQUAL
10876: IFTRUE 10880
10878: GO 10891
10880: POP
// i = 2 ; 9 9$01 .. 15 15$00 :
10881: LD_ADDR_VAR 0 11
10885: PUSH
10886: LD_INT 2
10888: ST_TO_ADDR
10889: GO 11125
10891: LD_INT 18935
10893: DOUBLE
10894: GREATEREQUAL
10895: IFFALSE 10903
10897: LD_INT 31500
10899: DOUBLE
10900: LESSEQUAL
10901: IFTRUE 10905
10903: GO 10916
10905: POP
// i = 3 ; 15 15$01 .. 22 22$00 :
10906: LD_ADDR_VAR 0 11
10910: PUSH
10911: LD_INT 3
10913: ST_TO_ADDR
10914: GO 11125
10916: LD_INT 31535
10918: DOUBLE
10919: GREATEREQUAL
10920: IFFALSE 10928
10922: LD_INT 46200
10924: DOUBLE
10925: LESSEQUAL
10926: IFTRUE 10930
10928: GO 10941
10930: POP
// i = 4 ; 22 22$01 .. 30 30$00 :
10931: LD_ADDR_VAR 0 11
10935: PUSH
10936: LD_INT 4
10938: ST_TO_ADDR
10939: GO 11125
10941: LD_INT 46235
10943: DOUBLE
10944: GREATEREQUAL
10945: IFFALSE 10953
10947: LD_INT 63000
10949: DOUBLE
10950: LESSEQUAL
10951: IFTRUE 10955
10953: GO 10966
10955: POP
// i = 5 ; 30 30$01 .. 40 40$00 :
10956: LD_ADDR_VAR 0 11
10960: PUSH
10961: LD_INT 5
10963: ST_TO_ADDR
10964: GO 11125
10966: LD_INT 63035
10968: DOUBLE
10969: GREATEREQUAL
10970: IFFALSE 10978
10972: LD_INT 84000
10974: DOUBLE
10975: LESSEQUAL
10976: IFTRUE 10980
10978: GO 10991
10980: POP
// i = 6 ; 40 40$01 .. 52 52$00 :
10981: LD_ADDR_VAR 0 11
10985: PUSH
10986: LD_INT 6
10988: ST_TO_ADDR
10989: GO 11125
10991: LD_INT 84035
10993: DOUBLE
10994: GREATEREQUAL
10995: IFFALSE 11003
10997: LD_INT 109200
10999: DOUBLE
11000: LESSEQUAL
11001: IFTRUE 11005
11003: GO 11016
11005: POP
// i = 7 ; 52 52$01 .. 66 66$00 :
11006: LD_ADDR_VAR 0 11
11010: PUSH
11011: LD_INT 7
11013: ST_TO_ADDR
11014: GO 11125
11016: LD_INT 109235
11018: DOUBLE
11019: GREATEREQUAL
11020: IFFALSE 11028
11022: LD_INT 138600
11024: DOUBLE
11025: LESSEQUAL
11026: IFTRUE 11030
11028: GO 11041
11030: POP
// i = 8 ; 66 66$01 .. 88 88$00 :
11031: LD_ADDR_VAR 0 11
11035: PUSH
11036: LD_INT 8
11038: ST_TO_ADDR
11039: GO 11125
11041: LD_INT 138635
11043: DOUBLE
11044: GREATEREQUAL
11045: IFFALSE 11053
11047: LD_INT 184800
11049: DOUBLE
11050: LESSEQUAL
11051: IFTRUE 11055
11053: GO 11066
11055: POP
// i = 9 ; 88 88$01 .. 100 100$00 :
11056: LD_ADDR_VAR 0 11
11060: PUSH
11061: LD_INT 9
11063: ST_TO_ADDR
11064: GO 11125
11066: LD_INT 184835
11068: DOUBLE
11069: GREATEREQUAL
11070: IFFALSE 11078
11072: LD_INT 210000
11074: DOUBLE
11075: LESSEQUAL
11076: IFTRUE 11080
11078: GO 11091
11080: POP
// i = 10 ; 100 100$01 .. 120 120$00 :
11081: LD_ADDR_VAR 0 11
11085: PUSH
11086: LD_INT 10
11088: ST_TO_ADDR
11089: GO 11125
11091: LD_INT 210035
11093: DOUBLE
11094: GREATEREQUAL
11095: IFFALSE 11103
11097: LD_INT 252000
11099: DOUBLE
11100: LESSEQUAL
11101: IFTRUE 11105
11103: GO 11116
11105: POP
// i = 11 ; else
11106: LD_ADDR_VAR 0 11
11110: PUSH
11111: LD_INT 11
11113: ST_TO_ADDR
11114: GO 11125
11116: POP
// i = 12 ; end ;
11117: LD_ADDR_VAR 0 11
11121: PUSH
11122: LD_INT 12
11124: ST_TO_ADDR
// i = i - base div 2 ;
11125: LD_ADDR_VAR 0 11
11129: PUSH
11130: LD_VAR 0 11
11134: PUSH
11135: LD_VAR 0 13
11139: PUSH
11140: LD_INT 2
11142: DIV
11143: MINUS
11144: ST_TO_ADDR
// if i < 0 then
11145: LD_VAR 0 11
11149: PUSH
11150: LD_INT 0
11152: LESS
11153: IFFALSE 11163
// i = 0 ;
11155: LD_ADDR_VAR 0 11
11159: PUSH
11160: LD_INT 0
11162: ST_TO_ADDR
// if cl = 1 then
11163: LD_VAR 0 3
11167: PUSH
11168: LD_INT 1
11170: EQUAL
11171: IFFALSE 11211
// combat = rand ( base + i - 1 , base + i ) else
11173: LD_ADDR_VAR 0 4
11177: PUSH
11178: LD_VAR 0 13
11182: PUSH
11183: LD_VAR 0 11
11187: PLUS
11188: PUSH
11189: LD_INT 1
11191: MINUS
11192: PPUSH
11193: LD_VAR 0 13
11197: PUSH
11198: LD_VAR 0 11
11202: PLUS
11203: PPUSH
11204: CALL_OW 12
11208: ST_TO_ADDR
11209: GO 11251
// combat = rand ( base + i - 4 , base + i - 1 ) ;
11211: LD_ADDR_VAR 0 4
11215: PUSH
11216: LD_VAR 0 13
11220: PUSH
11221: LD_VAR 0 11
11225: PLUS
11226: PUSH
11227: LD_INT 4
11229: MINUS
11230: PPUSH
11231: LD_VAR 0 13
11235: PUSH
11236: LD_VAR 0 11
11240: PLUS
11241: PUSH
11242: LD_INT 1
11244: MINUS
11245: PPUSH
11246: CALL_OW 12
11250: ST_TO_ADDR
// if cl = 2 then
11251: LD_VAR 0 3
11255: PUSH
11256: LD_INT 2
11258: EQUAL
11259: IFFALSE 11299
// eng = rand ( base + i - 1 , base + i ) else
11261: LD_ADDR_VAR 0 5
11265: PUSH
11266: LD_VAR 0 13
11270: PUSH
11271: LD_VAR 0 11
11275: PLUS
11276: PUSH
11277: LD_INT 1
11279: MINUS
11280: PPUSH
11281: LD_VAR 0 13
11285: PUSH
11286: LD_VAR 0 11
11290: PLUS
11291: PPUSH
11292: CALL_OW 12
11296: ST_TO_ADDR
11297: GO 11339
// eng = rand ( base + i - 4 , base + i - 1 ) ;
11299: LD_ADDR_VAR 0 5
11303: PUSH
11304: LD_VAR 0 13
11308: PUSH
11309: LD_VAR 0 11
11313: PLUS
11314: PUSH
11315: LD_INT 4
11317: MINUS
11318: PPUSH
11319: LD_VAR 0 13
11323: PUSH
11324: LD_VAR 0 11
11328: PLUS
11329: PUSH
11330: LD_INT 1
11332: MINUS
11333: PPUSH
11334: CALL_OW 12
11338: ST_TO_ADDR
// if cl = 3 then
11339: LD_VAR 0 3
11343: PUSH
11344: LD_INT 3
11346: EQUAL
11347: IFFALSE 11387
// mech = rand ( base + i - 1 , base + i ) else
11349: LD_ADDR_VAR 0 6
11353: PUSH
11354: LD_VAR 0 13
11358: PUSH
11359: LD_VAR 0 11
11363: PLUS
11364: PUSH
11365: LD_INT 1
11367: MINUS
11368: PPUSH
11369: LD_VAR 0 13
11373: PUSH
11374: LD_VAR 0 11
11378: PLUS
11379: PPUSH
11380: CALL_OW 12
11384: ST_TO_ADDR
11385: GO 11427
// mech = rand ( base + i - 4 , base + i - 1 ) ;
11387: LD_ADDR_VAR 0 6
11391: PUSH
11392: LD_VAR 0 13
11396: PUSH
11397: LD_VAR 0 11
11401: PLUS
11402: PUSH
11403: LD_INT 4
11405: MINUS
11406: PPUSH
11407: LD_VAR 0 13
11411: PUSH
11412: LD_VAR 0 11
11416: PLUS
11417: PUSH
11418: LD_INT 1
11420: MINUS
11421: PPUSH
11422: CALL_OW 12
11426: ST_TO_ADDR
// if cl = 4 then
11427: LD_VAR 0 3
11431: PUSH
11432: LD_INT 4
11434: EQUAL
11435: IFFALSE 11475
// sci = rand ( base + i - 1 , base + i ) else
11437: LD_ADDR_VAR 0 7
11441: PUSH
11442: LD_VAR 0 13
11446: PUSH
11447: LD_VAR 0 11
11451: PLUS
11452: PUSH
11453: LD_INT 1
11455: MINUS
11456: PPUSH
11457: LD_VAR 0 13
11461: PUSH
11462: LD_VAR 0 11
11466: PLUS
11467: PPUSH
11468: CALL_OW 12
11472: ST_TO_ADDR
11473: GO 11515
// sci = rand ( base + i - 4 , base + i - 1 ) ;
11475: LD_ADDR_VAR 0 7
11479: PUSH
11480: LD_VAR 0 13
11484: PUSH
11485: LD_VAR 0 11
11489: PLUS
11490: PUSH
11491: LD_INT 4
11493: MINUS
11494: PPUSH
11495: LD_VAR 0 13
11499: PUSH
11500: LD_VAR 0 11
11504: PLUS
11505: PUSH
11506: LD_INT 1
11508: MINUS
11509: PPUSH
11510: CALL_OW 12
11514: ST_TO_ADDR
// skills = [ combat , eng , mech , sci ] ;
11515: LD_ADDR_VAR 0 8
11519: PUSH
11520: LD_VAR 0 4
11524: PUSH
11525: LD_VAR 0 5
11529: PUSH
11530: LD_VAR 0 6
11534: PUSH
11535: LD_VAR 0 7
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: ST_TO_ADDR
// for i = 1 to 4 do
11546: LD_ADDR_VAR 0 11
11550: PUSH
11551: DOUBLE
11552: LD_INT 1
11554: DEC
11555: ST_TO_ADDR
11556: LD_INT 4
11558: PUSH
11559: FOR_TO
11560: IFFALSE 11715
// begin if skills [ i ] < 0 then
11562: LD_VAR 0 8
11566: PUSH
11567: LD_VAR 0 11
11571: ARRAY
11572: PUSH
11573: LD_INT 0
11575: LESS
11576: IFFALSE 11601
// skills = replace ( skills , i , 0 ) ;
11578: LD_ADDR_VAR 0 8
11582: PUSH
11583: LD_VAR 0 8
11587: PPUSH
11588: LD_VAR 0 11
11592: PPUSH
11593: LD_INT 0
11595: PPUSH
11596: CALL_OW 1
11600: ST_TO_ADDR
// n = [ 0 , 1 , 0 , 1 , 0 , 2 , 0 , 0 , 1 , 0 ] [ rand ( 1 , 10 ) ] ;
11601: LD_ADDR_VAR 0 14
11605: PUSH
11606: LD_INT 0
11608: PUSH
11609: LD_INT 1
11611: PUSH
11612: LD_INT 0
11614: PUSH
11615: LD_INT 1
11617: PUSH
11618: LD_INT 0
11620: PUSH
11621: LD_INT 2
11623: PUSH
11624: LD_INT 0
11626: PUSH
11627: LD_INT 0
11629: PUSH
11630: LD_INT 1
11632: PUSH
11633: LD_INT 0
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 1
11650: PPUSH
11651: LD_INT 10
11653: PPUSH
11654: CALL_OW 12
11658: ARRAY
11659: ST_TO_ADDR
// if n > skills [ i ] then
11660: LD_VAR 0 14
11664: PUSH
11665: LD_VAR 0 8
11669: PUSH
11670: LD_VAR 0 11
11674: ARRAY
11675: GREATER
11676: IFFALSE 11694
// n = skills [ i ] ;
11678: LD_ADDR_VAR 0 14
11682: PUSH
11683: LD_VAR 0 8
11687: PUSH
11688: LD_VAR 0 11
11692: ARRAY
11693: ST_TO_ADDR
// replace ( base_skills , i , n ) ;
11694: LD_VAR 0 9
11698: PPUSH
11699: LD_VAR 0 11
11703: PPUSH
11704: LD_VAR 0 14
11708: PPUSH
11709: CALL_OW 1
// end ;
11713: GO 11559
11715: POP
11716: POP
// n = rand ( 1 , 100 ) ;
11717: LD_ADDR_VAR 0 14
11721: PUSH
11722: LD_INT 1
11724: PPUSH
11725: LD_INT 100
11727: PPUSH
11728: CALL_OW 12
11732: ST_TO_ADDR
// case n of 1 .. 32 :
11733: LD_VAR 0 14
11737: PUSH
11738: LD_INT 1
11740: DOUBLE
11741: GREATEREQUAL
11742: IFFALSE 11750
11744: LD_INT 32
11746: DOUBLE
11747: LESSEQUAL
11748: IFTRUE 11752
11750: GO 11763
11752: POP
// def = 10 ; 31 .. 54 :
11753: LD_ADDR_VAR 0 15
11757: PUSH
11758: LD_INT 10
11760: ST_TO_ADDR
11761: GO 11864
11763: LD_INT 31
11765: DOUBLE
11766: GREATEREQUAL
11767: IFFALSE 11775
11769: LD_INT 54
11771: DOUBLE
11772: LESSEQUAL
11773: IFTRUE 11777
11775: GO 11788
11777: POP
// def = 9 ; 55 .. 76 :
11778: LD_ADDR_VAR 0 15
11782: PUSH
11783: LD_INT 9
11785: ST_TO_ADDR
11786: GO 11864
11788: LD_INT 55
11790: DOUBLE
11791: GREATEREQUAL
11792: IFFALSE 11800
11794: LD_INT 76
11796: DOUBLE
11797: LESSEQUAL
11798: IFTRUE 11802
11800: GO 11813
11802: POP
// def = 11 ; 77 .. 88 :
11803: LD_ADDR_VAR 0 15
11807: PUSH
11808: LD_INT 11
11810: ST_TO_ADDR
11811: GO 11864
11813: LD_INT 77
11815: DOUBLE
11816: GREATEREQUAL
11817: IFFALSE 11825
11819: LD_INT 88
11821: DOUBLE
11822: LESSEQUAL
11823: IFTRUE 11827
11825: GO 11838
11827: POP
// def = 8 ; 89 .. 100 :
11828: LD_ADDR_VAR 0 15
11832: PUSH
11833: LD_INT 8
11835: ST_TO_ADDR
11836: GO 11864
11838: LD_INT 89
11840: DOUBLE
11841: GREATEREQUAL
11842: IFFALSE 11850
11844: LD_INT 100
11846: DOUBLE
11847: LESSEQUAL
11848: IFTRUE 11852
11850: GO 11863
11852: POP
// def = 12 ; end ;
11853: LD_ADDR_VAR 0 15
11857: PUSH
11858: LD_INT 12
11860: ST_TO_ADDR
11861: GO 11864
11863: POP
// n = rand ( 1 , 100 ) ;
11864: LD_ADDR_VAR 0 14
11868: PUSH
11869: LD_INT 1
11871: PPUSH
11872: LD_INT 100
11874: PPUSH
11875: CALL_OW 12
11879: ST_TO_ADDR
// case n of 1 .. 44 :
11880: LD_VAR 0 14
11884: PUSH
11885: LD_INT 1
11887: DOUBLE
11888: GREATEREQUAL
11889: IFFALSE 11897
11891: LD_INT 44
11893: DOUBLE
11894: LESSEQUAL
11895: IFTRUE 11899
11897: GO 11910
11899: POP
// speed = 10 ; 45 .. 76 :
11900: LD_ADDR_VAR 0 16
11904: PUSH
11905: LD_INT 10
11907: ST_TO_ADDR
11908: GO 11986
11910: LD_INT 45
11912: DOUBLE
11913: GREATEREQUAL
11914: IFFALSE 11922
11916: LD_INT 76
11918: DOUBLE
11919: LESSEQUAL
11920: IFTRUE 11924
11922: GO 11935
11924: POP
// speed = 9 ; 77 .. 94 :
11925: LD_ADDR_VAR 0 16
11929: PUSH
11930: LD_INT 9
11932: ST_TO_ADDR
11933: GO 11986
11935: LD_INT 77
11937: DOUBLE
11938: GREATEREQUAL
11939: IFFALSE 11947
11941: LD_INT 94
11943: DOUBLE
11944: LESSEQUAL
11945: IFTRUE 11949
11947: GO 11960
11949: POP
// speed = 11 ; 95 .. 100 :
11950: LD_ADDR_VAR 0 16
11954: PUSH
11955: LD_INT 11
11957: ST_TO_ADDR
11958: GO 11986
11960: LD_INT 95
11962: DOUBLE
11963: GREATEREQUAL
11964: IFFALSE 11972
11966: LD_INT 100
11968: DOUBLE
11969: LESSEQUAL
11970: IFTRUE 11974
11972: GO 11985
11974: POP
// speed = 12 ; end ;
11975: LD_ADDR_VAR 0 16
11979: PUSH
11980: LD_INT 12
11982: ST_TO_ADDR
11983: GO 11986
11985: POP
// hc_attr = [ def , speed ] ;
11986: LD_ADDR_OWVAR 29
11990: PUSH
11991: LD_VAR 0 15
11995: PUSH
11996: LD_VAR 0 16
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: ST_TO_ADDR
// hc_basic_skills = base_skills ;
12005: LD_ADDR_OWVAR 30
12009: PUSH
12010: LD_VAR 0 9
12014: ST_TO_ADDR
// hc_skills := skills ;
12015: LD_ADDR_OWVAR 31
12019: PUSH
12020: LD_VAR 0 8
12024: ST_TO_ADDR
// hc_class = cl ;
12025: LD_ADDR_OWVAR 28
12029: PUSH
12030: LD_VAR 0 3
12034: ST_TO_ADDR
// end ; end_of_file
12035: LD_VAR 0 2
12039: RET
// export function SetMpTechs ( ) ; var side , i ; begin
12040: LD_INT 0
12042: PPUSH
12043: PPUSH
12044: PPUSH
// for side = 1 to 8 do
12045: LD_ADDR_VAR 0 2
12049: PUSH
12050: DOUBLE
12051: LD_INT 1
12053: DEC
12054: ST_TO_ADDR
12055: LD_INT 8
12057: PUSH
12058: FOR_TO
12059: IFFALSE 12180
// begin for i = 1 to 72 do
12061: LD_ADDR_VAR 0 3
12065: PUSH
12066: DOUBLE
12067: LD_INT 1
12069: DEC
12070: ST_TO_ADDR
12071: LD_INT 72
12073: PUSH
12074: FOR_TO
12075: IFFALSE 12106
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12077: LD_VAR 0 3
12081: PPUSH
12082: LD_VAR 0 2
12086: PPUSH
12087: LD_INT 0
12089: PPUSH
12090: LD_VAR 0 3
12094: PPUSH
12095: CALL_OW 565
12099: PPUSH
12100: CALL_OW 322
12104: GO 12074
12106: POP
12107: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12108: LD_INT 73
12110: PPUSH
12111: LD_VAR 0 2
12115: PPUSH
12116: LD_INT 0
12118: PPUSH
12119: LD_INT 25
12121: PPUSH
12122: CALL_OW 565
12126: PPUSH
12127: CALL_OW 322
// for i = 0 to 40 do
12131: LD_ADDR_VAR 0 3
12135: PUSH
12136: DOUBLE
12137: LD_INT 0
12139: DEC
12140: ST_TO_ADDR
12141: LD_INT 40
12143: PUSH
12144: FOR_TO
12145: IFFALSE 12176
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12147: LD_VAR 0 3
12151: PPUSH
12152: LD_VAR 0 2
12156: PPUSH
12157: LD_INT 1
12159: PPUSH
12160: LD_VAR 0 3
12164: PPUSH
12165: CALL_OW 565
12169: PPUSH
12170: CALL_OW 324
12174: GO 12144
12176: POP
12177: POP
// end ;
12178: GO 12058
12180: POP
12181: POP
// end ;
12182: LD_VAR 0 1
12186: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12187: LD_INT 0
12189: PPUSH
12190: PPUSH
12191: PPUSH
// for side = 1 to 8 do
12192: LD_ADDR_VAR 0 3
12196: PUSH
12197: DOUBLE
12198: LD_INT 1
12200: DEC
12201: ST_TO_ADDR
12202: LD_INT 8
12204: PUSH
12205: FOR_TO
12206: IFFALSE 16202
// begin for i = 1 to 73 do
12208: LD_ADDR_VAR 0 4
12212: PUSH
12213: DOUBLE
12214: LD_INT 1
12216: DEC
12217: ST_TO_ADDR
12218: LD_INT 73
12220: PUSH
12221: FOR_TO
12222: IFFALSE 12243
// SetTech ( i , side , state_disabled ) ;
12224: LD_VAR 0 4
12228: PPUSH
12229: LD_VAR 0 3
12233: PPUSH
12234: LD_INT 0
12236: PPUSH
12237: CALL_OW 322
12241: GO 12221
12243: POP
12244: POP
// for i = 0 to 40 do
12245: LD_ADDR_VAR 0 4
12249: PUSH
12250: DOUBLE
12251: LD_INT 0
12253: DEC
12254: ST_TO_ADDR
12255: LD_INT 40
12257: PUSH
12258: FOR_TO
12259: IFFALSE 12280
// SetRestrict ( i , side , false ) ;
12261: LD_VAR 0 4
12265: PPUSH
12266: LD_VAR 0 3
12270: PPUSH
12271: LD_INT 0
12273: PPUSH
12274: CALL_OW 324
12278: GO 12258
12280: POP
12281: POP
// case level of 1 :
12282: LD_VAR 0 1
12286: PUSH
12287: LD_INT 1
12289: DOUBLE
12290: EQUAL
12291: IFTRUE 12295
12293: GO 12448
12295: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12296: LD_INT 35
12298: PPUSH
12299: LD_VAR 0 3
12303: PPUSH
12304: LD_INT 1
12306: PPUSH
12307: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12311: LD_INT 45
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: LD_INT 1
12321: PPUSH
12322: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12326: LD_INT 46
12328: PPUSH
12329: LD_VAR 0 3
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12341: LD_INT 47
12343: PPUSH
12344: LD_VAR 0 3
12348: PPUSH
12349: LD_INT 1
12351: PPUSH
12352: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12356: LD_INT 0
12358: PPUSH
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 1
12366: PPUSH
12367: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12371: LD_INT 2
12373: PPUSH
12374: LD_VAR 0 3
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12386: LD_INT 4
12388: PPUSH
12389: LD_VAR 0 3
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12401: LD_INT 6
12403: PPUSH
12404: LD_VAR 0 3
12408: PPUSH
12409: LD_INT 1
12411: PPUSH
12412: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12416: LD_INT 29
12418: PPUSH
12419: LD_VAR 0 3
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12431: LD_INT 31
12433: PPUSH
12434: LD_VAR 0 3
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 324
// end ; 2 :
12446: GO 16200
12448: LD_INT 2
12450: DOUBLE
12451: EQUAL
12452: IFTRUE 12456
12454: GO 12654
12456: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12457: LD_INT 35
12459: PPUSH
12460: LD_VAR 0 3
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12472: LD_INT 45
12474: PPUSH
12475: LD_VAR 0 3
12479: PPUSH
12480: LD_INT 1
12482: PPUSH
12483: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12487: LD_INT 46
12489: PPUSH
12490: LD_VAR 0 3
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12502: LD_INT 47
12504: PPUSH
12505: LD_VAR 0 3
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12517: LD_INT 1
12519: PPUSH
12520: LD_VAR 0 3
12524: PPUSH
12525: LD_INT 1
12527: PPUSH
12528: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12532: LD_INT 2
12534: PPUSH
12535: LD_VAR 0 3
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12547: LD_INT 11
12549: PPUSH
12550: LD_VAR 0 3
12554: PPUSH
12555: LD_INT 1
12557: PPUSH
12558: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12562: LD_INT 0
12564: PPUSH
12565: LD_VAR 0 3
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12577: LD_INT 2
12579: PPUSH
12580: LD_VAR 0 3
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12592: LD_INT 4
12594: PPUSH
12595: LD_VAR 0 3
12599: PPUSH
12600: LD_INT 1
12602: PPUSH
12603: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12607: LD_INT 6
12609: PPUSH
12610: LD_VAR 0 3
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12622: LD_INT 29
12624: PPUSH
12625: LD_VAR 0 3
12629: PPUSH
12630: LD_INT 1
12632: PPUSH
12633: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12637: LD_INT 31
12639: PPUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: LD_INT 1
12647: PPUSH
12648: CALL_OW 324
// end ; 3 :
12652: GO 16200
12654: LD_INT 3
12656: DOUBLE
12657: EQUAL
12658: IFTRUE 12662
12660: GO 13115
12662: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12663: LD_INT 35
12665: PPUSH
12666: LD_VAR 0 3
12670: PPUSH
12671: LD_INT 1
12673: PPUSH
12674: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12678: LD_INT 45
12680: PPUSH
12681: LD_VAR 0 3
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12693: LD_INT 46
12695: PPUSH
12696: LD_VAR 0 3
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12708: LD_INT 47
12710: PPUSH
12711: LD_VAR 0 3
12715: PPUSH
12716: LD_INT 1
12718: PPUSH
12719: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12723: LD_INT 1
12725: PPUSH
12726: LD_VAR 0 3
12730: PPUSH
12731: LD_INT 1
12733: PPUSH
12734: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12738: LD_INT 2
12740: PPUSH
12741: LD_VAR 0 3
12745: PPUSH
12746: LD_INT 1
12748: PPUSH
12749: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12753: LD_INT 11
12755: PPUSH
12756: LD_VAR 0 3
12760: PPUSH
12761: LD_INT 1
12763: PPUSH
12764: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12768: LD_INT 48
12770: PPUSH
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12783: LD_INT 69
12785: PPUSH
12786: LD_VAR 0 3
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12798: LD_INT 39
12800: PPUSH
12801: LD_VAR 0 3
12805: PPUSH
12806: LD_INT 1
12808: PPUSH
12809: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12813: LD_INT 43
12815: PPUSH
12816: LD_VAR 0 3
12820: PPUSH
12821: LD_INT 1
12823: PPUSH
12824: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12828: LD_INT 51
12830: PPUSH
12831: LD_VAR 0 3
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12843: LD_INT 6
12845: PPUSH
12846: LD_VAR 0 3
12850: PPUSH
12851: LD_INT 1
12853: PPUSH
12854: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12858: LD_INT 0
12860: PPUSH
12861: LD_VAR 0 3
12865: PPUSH
12866: LD_INT 1
12868: PPUSH
12869: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12873: LD_INT 2
12875: PPUSH
12876: LD_VAR 0 3
12880: PPUSH
12881: LD_INT 1
12883: PPUSH
12884: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12888: LD_INT 3
12890: PPUSH
12891: LD_VAR 0 3
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12903: LD_INT 4
12905: PPUSH
12906: LD_VAR 0 3
12910: PPUSH
12911: LD_INT 1
12913: PPUSH
12914: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12918: LD_INT 6
12920: PPUSH
12921: LD_VAR 0 3
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12933: LD_INT 7
12935: PPUSH
12936: LD_VAR 0 3
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12948: LD_INT 8
12950: PPUSH
12951: LD_VAR 0 3
12955: PPUSH
12956: LD_INT 1
12958: PPUSH
12959: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12963: LD_INT 10
12965: PPUSH
12966: LD_VAR 0 3
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12978: LD_INT 15
12980: PPUSH
12981: LD_VAR 0 3
12985: PPUSH
12986: LD_INT 1
12988: PPUSH
12989: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12993: LD_INT 16
12995: PPUSH
12996: LD_VAR 0 3
13000: PPUSH
13001: LD_INT 1
13003: PPUSH
13004: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13008: LD_INT 17
13010: PPUSH
13011: LD_VAR 0 3
13015: PPUSH
13016: LD_INT 1
13018: PPUSH
13019: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13023: LD_INT 20
13025: PPUSH
13026: LD_VAR 0 3
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13038: LD_INT 26
13040: PPUSH
13041: LD_VAR 0 3
13045: PPUSH
13046: LD_INT 1
13048: PPUSH
13049: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13053: LD_INT 27
13055: PPUSH
13056: LD_VAR 0 3
13060: PPUSH
13061: LD_INT 1
13063: PPUSH
13064: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13068: LD_INT 29
13070: PPUSH
13071: LD_VAR 0 3
13075: PPUSH
13076: LD_INT 1
13078: PPUSH
13079: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13083: LD_INT 31
13085: PPUSH
13086: LD_VAR 0 3
13090: PPUSH
13091: LD_INT 1
13093: PPUSH
13094: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13098: LD_INT 32
13100: PPUSH
13101: LD_VAR 0 3
13105: PPUSH
13106: LD_INT 1
13108: PPUSH
13109: CALL_OW 324
// end ; 4 :
13113: GO 16200
13115: LD_INT 4
13117: DOUBLE
13118: EQUAL
13119: IFTRUE 13123
13121: GO 14071
13123: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13124: LD_INT 35
13126: PPUSH
13127: LD_VAR 0 3
13131: PPUSH
13132: LD_INT 1
13134: PPUSH
13135: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13139: LD_INT 45
13141: PPUSH
13142: LD_VAR 0 3
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13154: LD_INT 46
13156: PPUSH
13157: LD_VAR 0 3
13161: PPUSH
13162: LD_INT 1
13164: PPUSH
13165: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13169: LD_INT 47
13171: PPUSH
13172: LD_VAR 0 3
13176: PPUSH
13177: LD_INT 1
13179: PPUSH
13180: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13184: LD_INT 1
13186: PPUSH
13187: LD_VAR 0 3
13191: PPUSH
13192: LD_INT 1
13194: PPUSH
13195: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13199: LD_INT 2
13201: PPUSH
13202: LD_VAR 0 3
13206: PPUSH
13207: LD_INT 1
13209: PPUSH
13210: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13214: LD_INT 11
13216: PPUSH
13217: LD_VAR 0 3
13221: PPUSH
13222: LD_INT 1
13224: PPUSH
13225: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13229: LD_INT 20
13231: PPUSH
13232: LD_VAR 0 3
13236: PPUSH
13237: LD_INT 1
13239: PPUSH
13240: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13244: LD_INT 48
13246: PPUSH
13247: LD_VAR 0 3
13251: PPUSH
13252: LD_INT 1
13254: PPUSH
13255: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13259: LD_INT 49
13261: PPUSH
13262: LD_VAR 0 3
13266: PPUSH
13267: LD_INT 1
13269: PPUSH
13270: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13274: LD_INT 69
13276: PPUSH
13277: LD_VAR 0 3
13281: PPUSH
13282: LD_INT 1
13284: PPUSH
13285: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13289: LD_INT 39
13291: PPUSH
13292: LD_VAR 0 3
13296: PPUSH
13297: LD_INT 1
13299: PPUSH
13300: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13304: LD_INT 34
13306: PPUSH
13307: LD_VAR 0 3
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13319: LD_INT 42
13321: PPUSH
13322: LD_VAR 0 3
13326: PPUSH
13327: LD_INT 1
13329: PPUSH
13330: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13334: LD_INT 44
13336: PPUSH
13337: LD_VAR 0 3
13341: PPUSH
13342: LD_INT 1
13344: PPUSH
13345: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13349: LD_INT 41
13351: PPUSH
13352: LD_VAR 0 3
13356: PPUSH
13357: LD_INT 1
13359: PPUSH
13360: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13364: LD_INT 43
13366: PPUSH
13367: LD_VAR 0 3
13371: PPUSH
13372: LD_INT 1
13374: PPUSH
13375: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13379: LD_INT 70
13381: PPUSH
13382: LD_VAR 0 3
13386: PPUSH
13387: LD_INT 1
13389: PPUSH
13390: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13394: LD_INT 51
13396: PPUSH
13397: LD_VAR 0 3
13401: PPUSH
13402: LD_INT 1
13404: PPUSH
13405: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13409: LD_INT 52
13411: PPUSH
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 1
13419: PPUSH
13420: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13424: LD_INT 6
13426: PPUSH
13427: LD_VAR 0 3
13431: PPUSH
13432: LD_INT 1
13434: PPUSH
13435: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13439: LD_INT 15
13441: PPUSH
13442: LD_VAR 0 3
13446: PPUSH
13447: LD_INT 1
13449: PPUSH
13450: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13454: LD_INT 7
13456: PPUSH
13457: LD_VAR 0 3
13461: PPUSH
13462: LD_INT 1
13464: PPUSH
13465: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13469: LD_INT 12
13471: PPUSH
13472: LD_VAR 0 3
13476: PPUSH
13477: LD_INT 1
13479: PPUSH
13480: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13484: LD_INT 18
13486: PPUSH
13487: LD_VAR 0 3
13491: PPUSH
13492: LD_INT 1
13494: PPUSH
13495: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13499: LD_INT 60
13501: PPUSH
13502: LD_VAR 0 3
13506: PPUSH
13507: LD_INT 1
13509: PPUSH
13510: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13514: LD_INT 9
13516: PPUSH
13517: LD_VAR 0 3
13521: PPUSH
13522: LD_INT 1
13524: PPUSH
13525: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13529: LD_INT 30
13531: PPUSH
13532: LD_VAR 0 3
13536: PPUSH
13537: LD_INT 1
13539: PPUSH
13540: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13544: LD_INT 37
13546: PPUSH
13547: LD_VAR 0 3
13551: PPUSH
13552: LD_INT 1
13554: PPUSH
13555: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13559: LD_INT 5
13561: PPUSH
13562: LD_VAR 0 3
13566: PPUSH
13567: LD_INT 1
13569: PPUSH
13570: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13574: LD_INT 66
13576: PPUSH
13577: LD_VAR 0 3
13581: PPUSH
13582: LD_INT 1
13584: PPUSH
13585: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13589: LD_INT 21
13591: PPUSH
13592: LD_VAR 0 3
13596: PPUSH
13597: LD_INT 1
13599: PPUSH
13600: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13604: LD_INT 22
13606: PPUSH
13607: LD_VAR 0 3
13611: PPUSH
13612: LD_INT 1
13614: PPUSH
13615: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13619: LD_INT 54
13621: PPUSH
13622: LD_VAR 0 3
13626: PPUSH
13627: LD_INT 1
13629: PPUSH
13630: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13634: LD_INT 0
13636: PPUSH
13637: LD_VAR 0 3
13641: PPUSH
13642: LD_INT 1
13644: PPUSH
13645: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13649: LD_INT 1
13651: PPUSH
13652: LD_VAR 0 3
13656: PPUSH
13657: LD_INT 1
13659: PPUSH
13660: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13664: LD_INT 2
13666: PPUSH
13667: LD_VAR 0 3
13671: PPUSH
13672: LD_INT 1
13674: PPUSH
13675: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13679: LD_INT 3
13681: PPUSH
13682: LD_VAR 0 3
13686: PPUSH
13687: LD_INT 1
13689: PPUSH
13690: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13694: LD_INT 4
13696: PPUSH
13697: LD_VAR 0 3
13701: PPUSH
13702: LD_INT 1
13704: PPUSH
13705: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13709: LD_INT 5
13711: PPUSH
13712: LD_VAR 0 3
13716: PPUSH
13717: LD_INT 1
13719: PPUSH
13720: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13724: LD_INT 6
13726: PPUSH
13727: LD_VAR 0 3
13731: PPUSH
13732: LD_INT 1
13734: PPUSH
13735: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13739: LD_INT 7
13741: PPUSH
13742: LD_VAR 0 3
13746: PPUSH
13747: LD_INT 1
13749: PPUSH
13750: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13754: LD_INT 8
13756: PPUSH
13757: LD_VAR 0 3
13761: PPUSH
13762: LD_INT 1
13764: PPUSH
13765: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13769: LD_INT 10
13771: PPUSH
13772: LD_VAR 0 3
13776: PPUSH
13777: LD_INT 1
13779: PPUSH
13780: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13784: LD_INT 11
13786: PPUSH
13787: LD_VAR 0 3
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13799: LD_INT 12
13801: PPUSH
13802: LD_VAR 0 3
13806: PPUSH
13807: LD_INT 1
13809: PPUSH
13810: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13814: LD_INT 13
13816: PPUSH
13817: LD_VAR 0 3
13821: PPUSH
13822: LD_INT 1
13824: PPUSH
13825: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13829: LD_INT 14
13831: PPUSH
13832: LD_VAR 0 3
13836: PPUSH
13837: LD_INT 1
13839: PPUSH
13840: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13844: LD_INT 15
13846: PPUSH
13847: LD_VAR 0 3
13851: PPUSH
13852: LD_INT 1
13854: PPUSH
13855: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13859: LD_INT 16
13861: PPUSH
13862: LD_VAR 0 3
13866: PPUSH
13867: LD_INT 1
13869: PPUSH
13870: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13874: LD_INT 17
13876: PPUSH
13877: LD_VAR 0 3
13881: PPUSH
13882: LD_INT 1
13884: PPUSH
13885: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13889: LD_INT 19
13891: PPUSH
13892: LD_VAR 0 3
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13904: LD_INT 20
13906: PPUSH
13907: LD_VAR 0 3
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13919: LD_INT 21
13921: PPUSH
13922: LD_VAR 0 3
13926: PPUSH
13927: LD_INT 1
13929: PPUSH
13930: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13934: LD_INT 23
13936: PPUSH
13937: LD_VAR 0 3
13941: PPUSH
13942: LD_INT 1
13944: PPUSH
13945: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13949: LD_INT 26
13951: PPUSH
13952: LD_VAR 0 3
13956: PPUSH
13957: LD_INT 1
13959: PPUSH
13960: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13964: LD_INT 27
13966: PPUSH
13967: LD_VAR 0 3
13971: PPUSH
13972: LD_INT 1
13974: PPUSH
13975: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13979: LD_INT 28
13981: PPUSH
13982: LD_VAR 0 3
13986: PPUSH
13987: LD_INT 1
13989: PPUSH
13990: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13994: LD_INT 29
13996: PPUSH
13997: LD_VAR 0 3
14001: PPUSH
14002: LD_INT 1
14004: PPUSH
14005: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14009: LD_INT 30
14011: PPUSH
14012: LD_VAR 0 3
14016: PPUSH
14017: LD_INT 1
14019: PPUSH
14020: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14024: LD_INT 31
14026: PPUSH
14027: LD_VAR 0 3
14031: PPUSH
14032: LD_INT 1
14034: PPUSH
14035: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14039: LD_INT 32
14041: PPUSH
14042: LD_VAR 0 3
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14054: LD_INT 36
14056: PPUSH
14057: LD_VAR 0 3
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 324
// end ; 5 :
14069: GO 16200
14071: LD_INT 5
14073: DOUBLE
14074: EQUAL
14075: IFTRUE 14079
14077: GO 15192
14079: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14080: LD_INT 35
14082: PPUSH
14083: LD_VAR 0 3
14087: PPUSH
14088: LD_INT 1
14090: PPUSH
14091: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14095: LD_INT 45
14097: PPUSH
14098: LD_VAR 0 3
14102: PPUSH
14103: LD_INT 1
14105: PPUSH
14106: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14110: LD_INT 46
14112: PPUSH
14113: LD_VAR 0 3
14117: PPUSH
14118: LD_INT 1
14120: PPUSH
14121: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14125: LD_INT 47
14127: PPUSH
14128: LD_VAR 0 3
14132: PPUSH
14133: LD_INT 1
14135: PPUSH
14136: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14140: LD_INT 1
14142: PPUSH
14143: LD_VAR 0 3
14147: PPUSH
14148: LD_INT 1
14150: PPUSH
14151: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14155: LD_INT 2
14157: PPUSH
14158: LD_VAR 0 3
14162: PPUSH
14163: LD_INT 1
14165: PPUSH
14166: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14170: LD_INT 11
14172: PPUSH
14173: LD_VAR 0 3
14177: PPUSH
14178: LD_INT 1
14180: PPUSH
14181: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14185: LD_INT 20
14187: PPUSH
14188: LD_VAR 0 3
14192: PPUSH
14193: LD_INT 1
14195: PPUSH
14196: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14200: LD_INT 48
14202: PPUSH
14203: LD_VAR 0 3
14207: PPUSH
14208: LD_INT 1
14210: PPUSH
14211: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14215: LD_INT 49
14217: PPUSH
14218: LD_VAR 0 3
14222: PPUSH
14223: LD_INT 1
14225: PPUSH
14226: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14230: LD_INT 69
14232: PPUSH
14233: LD_VAR 0 3
14237: PPUSH
14238: LD_INT 1
14240: PPUSH
14241: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14245: LD_INT 39
14247: PPUSH
14248: LD_VAR 0 3
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14260: LD_INT 34
14262: PPUSH
14263: LD_VAR 0 3
14267: PPUSH
14268: LD_INT 1
14270: PPUSH
14271: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14275: LD_INT 42
14277: PPUSH
14278: LD_VAR 0 3
14282: PPUSH
14283: LD_INT 1
14285: PPUSH
14286: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14290: LD_INT 44
14292: PPUSH
14293: LD_VAR 0 3
14297: PPUSH
14298: LD_INT 1
14300: PPUSH
14301: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14305: LD_INT 41
14307: PPUSH
14308: LD_VAR 0 3
14312: PPUSH
14313: LD_INT 1
14315: PPUSH
14316: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14320: LD_INT 40
14322: PPUSH
14323: LD_VAR 0 3
14327: PPUSH
14328: LD_INT 1
14330: PPUSH
14331: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14335: LD_INT 43
14337: PPUSH
14338: LD_VAR 0 3
14342: PPUSH
14343: LD_INT 1
14345: PPUSH
14346: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14350: LD_INT 70
14352: PPUSH
14353: LD_VAR 0 3
14357: PPUSH
14358: LD_INT 1
14360: PPUSH
14361: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14365: LD_INT 51
14367: PPUSH
14368: LD_VAR 0 3
14372: PPUSH
14373: LD_INT 1
14375: PPUSH
14376: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14380: LD_INT 52
14382: PPUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: LD_INT 1
14390: PPUSH
14391: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14395: LD_INT 6
14397: PPUSH
14398: LD_VAR 0 3
14402: PPUSH
14403: LD_INT 1
14405: PPUSH
14406: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14410: LD_INT 15
14412: PPUSH
14413: LD_VAR 0 3
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14425: LD_INT 7
14427: PPUSH
14428: LD_VAR 0 3
14432: PPUSH
14433: LD_INT 1
14435: PPUSH
14436: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14440: LD_INT 12
14442: PPUSH
14443: LD_VAR 0 3
14447: PPUSH
14448: LD_INT 1
14450: PPUSH
14451: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14455: LD_INT 17
14457: PPUSH
14458: LD_VAR 0 3
14462: PPUSH
14463: LD_INT 1
14465: PPUSH
14466: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14470: LD_INT 18
14472: PPUSH
14473: LD_VAR 0 3
14477: PPUSH
14478: LD_INT 1
14480: PPUSH
14481: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14485: LD_INT 60
14487: PPUSH
14488: LD_VAR 0 3
14492: PPUSH
14493: LD_INT 1
14495: PPUSH
14496: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14500: LD_INT 32
14502: PPUSH
14503: LD_VAR 0 3
14507: PPUSH
14508: LD_INT 1
14510: PPUSH
14511: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14515: LD_INT 9
14517: PPUSH
14518: LD_VAR 0 3
14522: PPUSH
14523: LD_INT 1
14525: PPUSH
14526: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14530: LD_INT 57
14532: PPUSH
14533: LD_VAR 0 3
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14545: LD_INT 30
14547: PPUSH
14548: LD_VAR 0 3
14552: PPUSH
14553: LD_INT 1
14555: PPUSH
14556: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14560: LD_INT 37
14562: PPUSH
14563: LD_VAR 0 3
14567: PPUSH
14568: LD_INT 1
14570: PPUSH
14571: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14575: LD_INT 63
14577: PPUSH
14578: LD_VAR 0 3
14582: PPUSH
14583: LD_INT 1
14585: PPUSH
14586: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14590: LD_INT 3
14592: PPUSH
14593: LD_VAR 0 3
14597: PPUSH
14598: LD_INT 1
14600: PPUSH
14601: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14605: LD_INT 4
14607: PPUSH
14608: LD_VAR 0 3
14612: PPUSH
14613: LD_INT 1
14615: PPUSH
14616: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14620: LD_INT 5
14622: PPUSH
14623: LD_VAR 0 3
14627: PPUSH
14628: LD_INT 1
14630: PPUSH
14631: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14635: LD_INT 66
14637: PPUSH
14638: LD_VAR 0 3
14642: PPUSH
14643: LD_INT 1
14645: PPUSH
14646: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14650: LD_INT 21
14652: PPUSH
14653: LD_VAR 0 3
14657: PPUSH
14658: LD_INT 1
14660: PPUSH
14661: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14665: LD_INT 22
14667: PPUSH
14668: LD_VAR 0 3
14672: PPUSH
14673: LD_INT 1
14675: PPUSH
14676: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14680: LD_INT 19
14682: PPUSH
14683: LD_VAR 0 3
14687: PPUSH
14688: LD_INT 1
14690: PPUSH
14691: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14695: LD_INT 54
14697: PPUSH
14698: LD_VAR 0 3
14702: PPUSH
14703: LD_INT 1
14705: PPUSH
14706: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14710: LD_INT 55
14712: PPUSH
14713: LD_VAR 0 3
14717: PPUSH
14718: LD_INT 1
14720: PPUSH
14721: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14725: LD_INT 0
14727: PPUSH
14728: LD_VAR 0 3
14732: PPUSH
14733: LD_INT 1
14735: PPUSH
14736: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14740: LD_INT 1
14742: PPUSH
14743: LD_VAR 0 3
14747: PPUSH
14748: LD_INT 1
14750: PPUSH
14751: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14755: LD_INT 2
14757: PPUSH
14758: LD_VAR 0 3
14762: PPUSH
14763: LD_INT 1
14765: PPUSH
14766: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14770: LD_INT 3
14772: PPUSH
14773: LD_VAR 0 3
14777: PPUSH
14778: LD_INT 1
14780: PPUSH
14781: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14785: LD_INT 4
14787: PPUSH
14788: LD_VAR 0 3
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14800: LD_INT 5
14802: PPUSH
14803: LD_VAR 0 3
14807: PPUSH
14808: LD_INT 1
14810: PPUSH
14811: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14815: LD_INT 6
14817: PPUSH
14818: LD_VAR 0 3
14822: PPUSH
14823: LD_INT 1
14825: PPUSH
14826: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14830: LD_INT 7
14832: PPUSH
14833: LD_VAR 0 3
14837: PPUSH
14838: LD_INT 1
14840: PPUSH
14841: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14845: LD_INT 8
14847: PPUSH
14848: LD_VAR 0 3
14852: PPUSH
14853: LD_INT 1
14855: PPUSH
14856: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14860: LD_INT 10
14862: PPUSH
14863: LD_VAR 0 3
14867: PPUSH
14868: LD_INT 1
14870: PPUSH
14871: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14875: LD_INT 11
14877: PPUSH
14878: LD_VAR 0 3
14882: PPUSH
14883: LD_INT 1
14885: PPUSH
14886: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14890: LD_INT 12
14892: PPUSH
14893: LD_VAR 0 3
14897: PPUSH
14898: LD_INT 1
14900: PPUSH
14901: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14905: LD_INT 13
14907: PPUSH
14908: LD_VAR 0 3
14912: PPUSH
14913: LD_INT 1
14915: PPUSH
14916: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14920: LD_INT 14
14922: PPUSH
14923: LD_VAR 0 3
14927: PPUSH
14928: LD_INT 1
14930: PPUSH
14931: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14935: LD_INT 15
14937: PPUSH
14938: LD_VAR 0 3
14942: PPUSH
14943: LD_INT 1
14945: PPUSH
14946: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14950: LD_INT 16
14952: PPUSH
14953: LD_VAR 0 3
14957: PPUSH
14958: LD_INT 1
14960: PPUSH
14961: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14965: LD_INT 17
14967: PPUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: LD_INT 1
14975: PPUSH
14976: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14980: LD_INT 18
14982: PPUSH
14983: LD_VAR 0 3
14987: PPUSH
14988: LD_INT 1
14990: PPUSH
14991: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14995: LD_INT 19
14997: PPUSH
14998: LD_VAR 0 3
15002: PPUSH
15003: LD_INT 1
15005: PPUSH
15006: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15010: LD_INT 20
15012: PPUSH
15013: LD_VAR 0 3
15017: PPUSH
15018: LD_INT 1
15020: PPUSH
15021: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15025: LD_INT 21
15027: PPUSH
15028: LD_VAR 0 3
15032: PPUSH
15033: LD_INT 1
15035: PPUSH
15036: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15040: LD_INT 23
15042: PPUSH
15043: LD_VAR 0 3
15047: PPUSH
15048: LD_INT 1
15050: PPUSH
15051: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15055: LD_INT 26
15057: PPUSH
15058: LD_VAR 0 3
15062: PPUSH
15063: LD_INT 1
15065: PPUSH
15066: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15070: LD_INT 27
15072: PPUSH
15073: LD_VAR 0 3
15077: PPUSH
15078: LD_INT 1
15080: PPUSH
15081: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15085: LD_INT 28
15087: PPUSH
15088: LD_VAR 0 3
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15100: LD_INT 29
15102: PPUSH
15103: LD_VAR 0 3
15107: PPUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15115: LD_INT 30
15117: PPUSH
15118: LD_VAR 0 3
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15130: LD_INT 31
15132: PPUSH
15133: LD_VAR 0 3
15137: PPUSH
15138: LD_INT 1
15140: PPUSH
15141: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15145: LD_INT 32
15147: PPUSH
15148: LD_VAR 0 3
15152: PPUSH
15153: LD_INT 1
15155: PPUSH
15156: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15160: LD_INT 33
15162: PPUSH
15163: LD_VAR 0 3
15167: PPUSH
15168: LD_INT 1
15170: PPUSH
15171: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15175: LD_INT 36
15177: PPUSH
15178: LD_VAR 0 3
15182: PPUSH
15183: LD_INT 1
15185: PPUSH
15186: CALL_OW 324
// end ; 6 :
15190: GO 16200
15192: LD_INT 6
15194: DOUBLE
15195: EQUAL
15196: IFTRUE 15200
15198: GO 16125
15200: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15201: LD_INT 35
15203: PPUSH
15204: LD_VAR 0 3
15208: PPUSH
15209: LD_INT 1
15211: PPUSH
15212: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15216: LD_INT 45
15218: PPUSH
15219: LD_VAR 0 3
15223: PPUSH
15224: LD_INT 1
15226: PPUSH
15227: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15231: LD_INT 46
15233: PPUSH
15234: LD_VAR 0 3
15238: PPUSH
15239: LD_INT 1
15241: PPUSH
15242: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15246: LD_INT 47
15248: PPUSH
15249: LD_VAR 0 3
15253: PPUSH
15254: LD_INT 1
15256: PPUSH
15257: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15261: LD_INT 1
15263: PPUSH
15264: LD_VAR 0 3
15268: PPUSH
15269: LD_INT 1
15271: PPUSH
15272: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15276: LD_INT 2
15278: PPUSH
15279: LD_VAR 0 3
15283: PPUSH
15284: LD_INT 1
15286: PPUSH
15287: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15291: LD_INT 11
15293: PPUSH
15294: LD_VAR 0 3
15298: PPUSH
15299: LD_INT 1
15301: PPUSH
15302: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15306: LD_INT 20
15308: PPUSH
15309: LD_VAR 0 3
15313: PPUSH
15314: LD_INT 1
15316: PPUSH
15317: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15321: LD_INT 48
15323: PPUSH
15324: LD_VAR 0 3
15328: PPUSH
15329: LD_INT 1
15331: PPUSH
15332: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15336: LD_INT 49
15338: PPUSH
15339: LD_VAR 0 3
15343: PPUSH
15344: LD_INT 1
15346: PPUSH
15347: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15351: LD_INT 50
15353: PPUSH
15354: LD_VAR 0 3
15358: PPUSH
15359: LD_INT 1
15361: PPUSH
15362: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15366: LD_INT 69
15368: PPUSH
15369: LD_VAR 0 3
15373: PPUSH
15374: LD_INT 1
15376: PPUSH
15377: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15381: LD_INT 39
15383: PPUSH
15384: LD_VAR 0 3
15388: PPUSH
15389: LD_INT 1
15391: PPUSH
15392: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15396: LD_INT 34
15398: PPUSH
15399: LD_VAR 0 3
15403: PPUSH
15404: LD_INT 1
15406: PPUSH
15407: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15411: LD_INT 42
15413: PPUSH
15414: LD_VAR 0 3
15418: PPUSH
15419: LD_INT 1
15421: PPUSH
15422: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15426: LD_INT 44
15428: PPUSH
15429: LD_VAR 0 3
15433: PPUSH
15434: LD_INT 1
15436: PPUSH
15437: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15441: LD_INT 41
15443: PPUSH
15444: LD_VAR 0 3
15448: PPUSH
15449: LD_INT 1
15451: PPUSH
15452: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15456: LD_INT 13
15458: PPUSH
15459: LD_VAR 0 3
15463: PPUSH
15464: LD_INT 1
15466: PPUSH
15467: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15471: LD_INT 40
15473: PPUSH
15474: LD_VAR 0 3
15478: PPUSH
15479: LD_INT 1
15481: PPUSH
15482: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15486: LD_INT 43
15488: PPUSH
15489: LD_VAR 0 3
15493: PPUSH
15494: LD_INT 1
15496: PPUSH
15497: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15501: LD_INT 70
15503: PPUSH
15504: LD_VAR 0 3
15508: PPUSH
15509: LD_INT 1
15511: PPUSH
15512: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15516: LD_INT 23
15518: PPUSH
15519: LD_VAR 0 3
15523: PPUSH
15524: LD_INT 1
15526: PPUSH
15527: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15531: LD_INT 51
15533: PPUSH
15534: LD_VAR 0 3
15538: PPUSH
15539: LD_INT 1
15541: PPUSH
15542: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15546: LD_INT 52
15548: PPUSH
15549: LD_VAR 0 3
15553: PPUSH
15554: LD_INT 1
15556: PPUSH
15557: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15561: LD_INT 6
15563: PPUSH
15564: LD_VAR 0 3
15568: PPUSH
15569: LD_INT 1
15571: PPUSH
15572: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15576: LD_INT 15
15578: PPUSH
15579: LD_VAR 0 3
15583: PPUSH
15584: LD_INT 1
15586: PPUSH
15587: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15591: LD_INT 7
15593: PPUSH
15594: LD_VAR 0 3
15598: PPUSH
15599: LD_INT 1
15601: PPUSH
15602: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15606: LD_INT 12
15608: PPUSH
15609: LD_VAR 0 3
15613: PPUSH
15614: LD_INT 1
15616: PPUSH
15617: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15621: LD_INT 10
15623: PPUSH
15624: LD_VAR 0 3
15628: PPUSH
15629: LD_INT 1
15631: PPUSH
15632: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15636: LD_INT 17
15638: PPUSH
15639: LD_VAR 0 3
15643: PPUSH
15644: LD_INT 1
15646: PPUSH
15647: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15651: LD_INT 18
15653: PPUSH
15654: LD_VAR 0 3
15658: PPUSH
15659: LD_INT 1
15661: PPUSH
15662: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15666: LD_INT 60
15668: PPUSH
15669: LD_VAR 0 3
15673: PPUSH
15674: LD_INT 1
15676: PPUSH
15677: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15681: LD_INT 61
15683: PPUSH
15684: LD_VAR 0 3
15688: PPUSH
15689: LD_INT 1
15691: PPUSH
15692: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15696: LD_INT 32
15698: PPUSH
15699: LD_VAR 0 3
15703: PPUSH
15704: LD_INT 1
15706: PPUSH
15707: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15711: LD_INT 27
15713: PPUSH
15714: LD_VAR 0 3
15718: PPUSH
15719: LD_INT 1
15721: PPUSH
15722: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15726: LD_INT 36
15728: PPUSH
15729: LD_VAR 0 3
15733: PPUSH
15734: LD_INT 1
15736: PPUSH
15737: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15741: LD_INT 33
15743: PPUSH
15744: LD_VAR 0 3
15748: PPUSH
15749: LD_INT 1
15751: PPUSH
15752: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15756: LD_INT 9
15758: PPUSH
15759: LD_VAR 0 3
15763: PPUSH
15764: LD_INT 1
15766: PPUSH
15767: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15771: LD_INT 38
15773: PPUSH
15774: LD_VAR 0 3
15778: PPUSH
15779: LD_INT 1
15781: PPUSH
15782: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15786: LD_INT 57
15788: PPUSH
15789: LD_VAR 0 3
15793: PPUSH
15794: LD_INT 1
15796: PPUSH
15797: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15801: LD_INT 58
15803: PPUSH
15804: LD_VAR 0 3
15808: PPUSH
15809: LD_INT 1
15811: PPUSH
15812: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15816: LD_INT 28
15818: PPUSH
15819: LD_VAR 0 3
15823: PPUSH
15824: LD_INT 1
15826: PPUSH
15827: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15831: LD_INT 29
15833: PPUSH
15834: LD_VAR 0 3
15838: PPUSH
15839: LD_INT 1
15841: PPUSH
15842: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15846: LD_INT 30
15848: PPUSH
15849: LD_VAR 0 3
15853: PPUSH
15854: LD_INT 1
15856: PPUSH
15857: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15861: LD_INT 37
15863: PPUSH
15864: LD_VAR 0 3
15868: PPUSH
15869: LD_INT 1
15871: PPUSH
15872: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15876: LD_INT 63
15878: PPUSH
15879: LD_VAR 0 3
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15891: LD_INT 64
15893: PPUSH
15894: LD_VAR 0 3
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15906: LD_INT 3
15908: PPUSH
15909: LD_VAR 0 3
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15921: LD_INT 4
15923: PPUSH
15924: LD_VAR 0 3
15928: PPUSH
15929: LD_INT 1
15931: PPUSH
15932: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15936: LD_INT 5
15938: PPUSH
15939: LD_VAR 0 3
15943: PPUSH
15944: LD_INT 1
15946: PPUSH
15947: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
15951: LD_INT 8
15953: PPUSH
15954: LD_VAR 0 3
15958: PPUSH
15959: LD_INT 1
15961: PPUSH
15962: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15966: LD_INT 66
15968: PPUSH
15969: LD_VAR 0 3
15973: PPUSH
15974: LD_INT 1
15976: PPUSH
15977: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15981: LD_INT 67
15983: PPUSH
15984: LD_VAR 0 3
15988: PPUSH
15989: LD_INT 1
15991: PPUSH
15992: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15996: LD_INT 21
15998: PPUSH
15999: LD_VAR 0 3
16003: PPUSH
16004: LD_INT 1
16006: PPUSH
16007: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16011: LD_INT 22
16013: PPUSH
16014: LD_VAR 0 3
16018: PPUSH
16019: LD_INT 1
16021: PPUSH
16022: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16026: LD_INT 19
16028: PPUSH
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16041: LD_INT 26
16043: PPUSH
16044: LD_VAR 0 3
16048: PPUSH
16049: LD_INT 1
16051: PPUSH
16052: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16056: LD_INT 54
16058: PPUSH
16059: LD_VAR 0 3
16063: PPUSH
16064: LD_INT 1
16066: PPUSH
16067: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16071: LD_INT 55
16073: PPUSH
16074: LD_VAR 0 3
16078: PPUSH
16079: LD_INT 1
16081: PPUSH
16082: CALL_OW 322
// for i = 0 to 39 do
16086: LD_ADDR_VAR 0 4
16090: PUSH
16091: DOUBLE
16092: LD_INT 0
16094: DEC
16095: ST_TO_ADDR
16096: LD_INT 39
16098: PUSH
16099: FOR_TO
16100: IFFALSE 16121
// SetRestrict ( i , side , true ) ;
16102: LD_VAR 0 4
16106: PPUSH
16107: LD_VAR 0 3
16111: PPUSH
16112: LD_INT 1
16114: PPUSH
16115: CALL_OW 324
16119: GO 16099
16121: POP
16122: POP
// end ; else
16123: GO 16200
16125: POP
// begin for i = 1 to 73 do
16126: LD_ADDR_VAR 0 4
16130: PUSH
16131: DOUBLE
16132: LD_INT 1
16134: DEC
16135: ST_TO_ADDR
16136: LD_INT 73
16138: PUSH
16139: FOR_TO
16140: IFFALSE 16161
// SetTech ( i , side , state_enabled ) ;
16142: LD_VAR 0 4
16146: PPUSH
16147: LD_VAR 0 3
16151: PPUSH
16152: LD_INT 1
16154: PPUSH
16155: CALL_OW 322
16159: GO 16139
16161: POP
16162: POP
// for i = 0 to 39 do
16163: LD_ADDR_VAR 0 4
16167: PUSH
16168: DOUBLE
16169: LD_INT 0
16171: DEC
16172: ST_TO_ADDR
16173: LD_INT 39
16175: PUSH
16176: FOR_TO
16177: IFFALSE 16198
// SetRestrict ( i , side , true ) ;
16179: LD_VAR 0 4
16183: PPUSH
16184: LD_VAR 0 3
16188: PPUSH
16189: LD_INT 1
16191: PPUSH
16192: CALL_OW 324
16196: GO 16176
16198: POP
16199: POP
// end ; end ; end ;
16200: GO 12205
16202: POP
16203: POP
// end ; end_of_file
16204: LD_VAR 0 2
16208: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , bases ; begin
16209: LD_INT 0
16211: PPUSH
16212: PPUSH
16213: PPUSH
16214: PPUSH
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
// for i := 1 to 8 do
16219: LD_ADDR_VAR 0 2
16223: PUSH
16224: DOUBLE
16225: LD_INT 1
16227: DEC
16228: ST_TO_ADDR
16229: LD_INT 8
16231: PUSH
16232: FOR_TO
16233: IFFALSE 16709
// begin if Side_Positions [ i ] then
16235: LD_EXP 36
16239: PUSH
16240: LD_VAR 0 2
16244: ARRAY
16245: IFFALSE 16707
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
16247: LD_ADDR_VAR 0 7
16251: PUSH
16252: LD_INT 22
16254: PUSH
16255: LD_VAR 0 2
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: LD_INT 21
16266: PUSH
16267: LD_INT 1
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PPUSH
16278: CALL_OW 69
16282: PUSH
16283: LD_INT 0
16285: PLUS
16286: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16287: LD_ADDR_VAR 0 8
16291: PUSH
16292: LD_INT 22
16294: PUSH
16295: LD_VAR 0 2
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: LD_INT 30
16309: PUSH
16310: LD_INT 0
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 30
16319: PUSH
16320: LD_INT 1
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: LIST
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PPUSH
16336: CALL_OW 69
16340: ST_TO_ADDR
// crates := 0 ;
16341: LD_ADDR_VAR 0 4
16345: PUSH
16346: LD_INT 0
16348: ST_TO_ADDR
// oil := 0 ;
16349: LD_ADDR_VAR 0 5
16353: PUSH
16354: LD_INT 0
16356: ST_TO_ADDR
// sib := 0 ;
16357: LD_ADDR_VAR 0 6
16361: PUSH
16362: LD_INT 0
16364: ST_TO_ADDR
// if bases then
16365: LD_VAR 0 8
16369: IFFALSE 16475
// begin for j in bases do
16371: LD_ADDR_VAR 0 3
16375: PUSH
16376: LD_VAR 0 8
16380: PUSH
16381: FOR_IN
16382: IFFALSE 16473
// begin crates := crates + GetResourceType ( GetBase ( j ) , mat_cans ) ;
16384: LD_ADDR_VAR 0 4
16388: PUSH
16389: LD_VAR 0 4
16393: PUSH
16394: LD_VAR 0 3
16398: PPUSH
16399: CALL_OW 274
16403: PPUSH
16404: LD_INT 1
16406: PPUSH
16407: CALL_OW 275
16411: PLUS
16412: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( j ) , mat_oil ) ;
16413: LD_ADDR_VAR 0 5
16417: PUSH
16418: LD_VAR 0 5
16422: PUSH
16423: LD_VAR 0 3
16427: PPUSH
16428: CALL_OW 274
16432: PPUSH
16433: LD_INT 2
16435: PPUSH
16436: CALL_OW 275
16440: PLUS
16441: ST_TO_ADDR
// sib := sib + GetResourceType ( GetBase ( j ) , mat_siberit ) ;
16442: LD_ADDR_VAR 0 6
16446: PUSH
16447: LD_VAR 0 6
16451: PUSH
16452: LD_VAR 0 3
16456: PPUSH
16457: CALL_OW 274
16461: PPUSH
16462: LD_INT 3
16464: PPUSH
16465: CALL_OW 275
16469: PLUS
16470: ST_TO_ADDR
// end ;
16471: GO 16381
16473: POP
16474: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
16475: LD_STRING setSpecText(
16477: PUSH
16478: LD_VAR 0 2
16482: STR
16483: PUSH
16484: LD_STRING ,
16486: STR
16487: PUSH
16488: LD_INT 2
16490: STR
16491: PUSH
16492: LD_STRING ,
16494: STR
16495: PUSH
16496: LD_VAR 0 4
16500: STR
16501: PUSH
16502: LD_STRING )
16504: STR
16505: PPUSH
16506: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
16510: LD_STRING setSpecText(
16512: PUSH
16513: LD_VAR 0 2
16517: STR
16518: PUSH
16519: LD_STRING ,
16521: STR
16522: PUSH
16523: LD_INT 3
16525: STR
16526: PUSH
16527: LD_STRING ,
16529: STR
16530: PUSH
16531: LD_VAR 0 5
16535: STR
16536: PUSH
16537: LD_STRING )
16539: STR
16540: PPUSH
16541: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
16545: LD_STRING setSpecText(
16547: PUSH
16548: LD_VAR 0 2
16552: STR
16553: PUSH
16554: LD_STRING ,
16556: STR
16557: PUSH
16558: LD_INT 4
16560: STR
16561: PUSH
16562: LD_STRING ,
16564: STR
16565: PUSH
16566: LD_VAR 0 6
16570: STR
16571: PUSH
16572: LD_STRING )
16574: STR
16575: PPUSH
16576: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
16580: LD_STRING setSpecText(
16582: PUSH
16583: LD_VAR 0 2
16587: STR
16588: PUSH
16589: LD_STRING ,
16591: STR
16592: PUSH
16593: LD_INT 5
16595: STR
16596: PUSH
16597: LD_STRING ,
16599: STR
16600: PUSH
16601: LD_VAR 0 7
16605: STR
16606: PUSH
16607: LD_STRING )
16609: STR
16610: PPUSH
16611: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
16615: LD_STRING setSpecLogoNumber(
16617: PUSH
16618: LD_INT 2
16620: STR
16621: PUSH
16622: LD_STRING ,
16624: STR
16625: PUSH
16626: LD_INT 1
16628: STR
16629: PUSH
16630: LD_STRING )
16632: STR
16633: PPUSH
16634: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
16638: LD_STRING setSpecLogoNumber(
16640: PUSH
16641: LD_INT 3
16643: STR
16644: PUSH
16645: LD_STRING ,
16647: STR
16648: PUSH
16649: LD_INT 2
16651: STR
16652: PUSH
16653: LD_STRING )
16655: STR
16656: PPUSH
16657: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
16661: LD_STRING setSpecLogoNumber(
16663: PUSH
16664: LD_INT 4
16666: STR
16667: PUSH
16668: LD_STRING ,
16670: STR
16671: PUSH
16672: LD_INT 3
16674: STR
16675: PUSH
16676: LD_STRING )
16678: STR
16679: PPUSH
16680: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
16684: LD_STRING setSpecLogoNumber(
16686: PUSH
16687: LD_INT 5
16689: STR
16690: PUSH
16691: LD_STRING ,
16693: STR
16694: PUSH
16695: LD_INT 4
16697: STR
16698: PUSH
16699: LD_STRING )
16701: STR
16702: PPUSH
16703: CALL_OW 559
// end ; end ;
16707: GO 16232
16709: POP
16710: POP
// end ;
16711: LD_VAR 0 1
16715: RET
// every 20 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
16716: LD_INT 2
16718: PUSH
16719: LD_INT 30
16721: PUSH
16722: LD_INT 0
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 30
16731: PUSH
16732: LD_INT 1
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: LIST
16743: PPUSH
16744: CALL_OW 69
16748: IFFALSE 16758
16750: GO 16752
16752: DISABLE
// begin enable ;
16753: ENABLE
// UpdateSpectatorBar ;
16754: CALL 16209 0 0
// end ;
16758: END
