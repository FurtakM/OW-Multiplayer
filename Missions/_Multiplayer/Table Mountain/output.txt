// export game_type , def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_shared_vision , def_morale_flags , def_siberite_detection , def_siberite_bomb , def_people_respawning , def_builduptime ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , sci1_skills , sci2_skills , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export playing_sides , playing_teams , sci1 , sci2 ; export Side_Count , Team_Count , Player_Team , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Positions , Team_Game ; export depot_def , breastworks_def , start_def , teleport_def ; export commander , battle_flags_id ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if MultiPlayer then
  11: LD_OWVAR 4
  15: IFFALSE 89
// begin game_type = mp_game_type ;
  17: LD_ADDR_EXP 1
  21: PUSH
  22: LD_OWVAR 6
  26: ST_TO_ADDR
// Your_Side = mp_player_side ;
  27: LD_ADDR_OWVAR 2
  31: PUSH
  32: LD_OWVAR 7
  36: ST_TO_ADDR
// Player_Team = mp_player_team ;
  37: LD_ADDR_EXP 32
  41: PUSH
  42: LD_OWVAR 8
  46: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  47: LD_ADDR_EXP 36
  51: PUSH
  52: LD_OWVAR 17
  56: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  57: LD_ADDR_EXP 33
  61: PUSH
  62: LD_OWVAR 15
  66: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  67: LD_ADDR_EXP 37
  71: PUSH
  72: LD_OWVAR 16
  76: ST_TO_ADDR
// Teams = mp_teams ;
  77: LD_ADDR_EXP 34
  81: PUSH
  82: LD_OWVAR 12
  86: ST_TO_ADDR
// end else
  87: GO 298
// begin game_type = 12 ;
  89: LD_ADDR_EXP 1
  93: PUSH
  94: LD_INT 12
  96: ST_TO_ADDR
// Your_Side = 4 ;
  97: LD_ADDR_OWVAR 2
 101: PUSH
 102: LD_INT 4
 104: ST_TO_ADDR
// Player_Team = 1 ;
 105: LD_ADDR_EXP 32
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// Side_Positions = [ 0 , 2 , 0 , 4 , 0 , 1 , 3 , 0 ] ;
 113: LD_ADDR_EXP 36
 117: PUSH
 118: LD_INT 0
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: LD_INT 0
 126: PUSH
 127: LD_INT 4
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 1
 135: PUSH
 136: LD_INT 3
 138: PUSH
 139: LD_INT 0
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 1 , 0 , 2 , 2 , 0 ] ;
 152: LD_ADDR_EXP 33
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 1
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 191: LD_ADDR_EXP 37
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: LD_INT 3
 201: PUSH
 202: LD_INT 0
 204: PUSH
 205: LD_INT 2
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 3
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 230: LD_ADDR_EXP 35
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: LD_INT 0
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// Teams = [ [ 2 , 4 ] , [ 6 , 7 ] ] ;
 269: LD_ADDR_EXP 34
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: LD_INT 4
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: PUSH
 284: LD_INT 6
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 298: LD_ADDR_EXP 30
 302: PUSH
 303: LD_EXP 36
 307: PUSH
 308: LD_INT 0
 310: PUSH
 311: EMPTY
 312: LIST
 313: DIFF
 314: PUSH
 315: LD_INT 0
 317: PLUS
 318: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 319: LD_ADDR_EXP 31
 323: PUSH
 324: LD_EXP 33
 328: PUSH
 329: LD_INT 0
 331: PUSH
 332: EMPTY
 333: LIST
 334: DIFF
 335: PUSH
 336: LD_INT 0
 338: PLUS
 339: ST_TO_ADDR
// if MultiPlayer then
 340: LD_OWVAR 4
 344: IFFALSE 504
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 346: LD_ADDR_EXP 2
 350: PUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 359: LD_ADDR_EXP 3
 363: PUSH
 364: LD_INT 1
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 372: LD_ADDR_EXP 4
 376: PUSH
 377: LD_INT 2
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 385: LD_ADDR_EXP 5
 389: PUSH
 390: LD_INT 3
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 398: LD_ADDR_EXP 6
 402: PUSH
 403: LD_INT 4
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 10
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 424: LD_ADDR_EXP 8
 428: PUSH
 429: LD_INT 11
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 437: LD_ADDR_EXP 9
 441: PUSH
 442: LD_INT 12
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 13 ) ;
 450: LD_ADDR_EXP 10
 454: PUSH
 455: LD_INT 13
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 463: LD_ADDR_EXP 11
 467: PUSH
 468: LD_INT 14
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 476: LD_ADDR_EXP 12
 480: PUSH
 481: LD_INT 20
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 489: LD_ADDR_VAR 0 9
 493: PUSH
 494: LD_INT 22
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// end else
 502: GO 604
// begin randomize ;
 504: CALL_OW 10
// def_base_level = 3 ;
 508: LD_ADDR_EXP 2
 512: PUSH
 513: LD_INT 3
 515: ST_TO_ADDR
// def_amount_of_people = 1 ;
 516: LD_ADDR_EXP 3
 520: PUSH
 521: LD_INT 1
 523: ST_TO_ADDR
// def_skill_level = 1 ;
 524: LD_ADDR_EXP 4
 528: PUSH
 529: LD_INT 1
 531: ST_TO_ADDR
// def_starting_resources = 2 ;
 532: LD_ADDR_EXP 5
 536: PUSH
 537: LD_INT 2
 539: ST_TO_ADDR
// def_shipments_density = 1 ;
 540: LD_ADDR_EXP 6
 544: PUSH
 545: LD_INT 1
 547: ST_TO_ADDR
// def_shared_vision = 1 ;
 548: LD_ADDR_EXP 7
 552: PUSH
 553: LD_INT 1
 555: ST_TO_ADDR
// def_morale_flags = 3 ;
 556: LD_ADDR_EXP 8
 560: PUSH
 561: LD_INT 3
 563: ST_TO_ADDR
// def_siberite_detection = 0 ;
 564: LD_ADDR_EXP 9
 568: PUSH
 569: LD_INT 0
 571: ST_TO_ADDR
// def_siberite_bomb = 2 ;
 572: LD_ADDR_EXP 10
 576: PUSH
 577: LD_INT 2
 579: ST_TO_ADDR
// def_people_respawning = 2 ;
 580: LD_ADDR_EXP 11
 584: PUSH
 585: LD_INT 2
 587: ST_TO_ADDR
// def_builduptime := 1 ;
 588: LD_ADDR_EXP 12
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// tech_level = 6 ;
 596: LD_ADDR_VAR 0 9
 600: PUSH
 601: LD_INT 6
 603: ST_TO_ADDR
// end ; if isSGUI then
 604: LD_OWVAR 83
 608: IFFALSE 616
// setMpTechs ( ) else
 610: CALL 9676 0 0
 614: GO 629
// begin SetMpTechLevel ( tech_level + 1 ) ;
 616: LD_VAR 0 9
 620: PUSH
 621: LD_INT 1
 623: PLUS
 624: PPUSH
 625: CALL 9823 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 629: LD_ADDR_EXP 13
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: LD_INT 1
 642: PUSH
 643: LD_INT 1
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: PUSH
 652: LD_EXP 2
 656: PUSH
 657: LD_INT 1
 659: PLUS
 660: ARRAY
 661: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 662: LD_ADDR_EXP 14
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 4
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: LD_EXP 2
 689: PUSH
 690: LD_INT 1
 692: PLUS
 693: ARRAY
 694: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 695: LD_ADDR_EXP 15
 699: PUSH
 700: LD_INT 9
 702: PUSH
 703: LD_INT 12
 705: PUSH
 706: LD_INT 15
 708: PUSH
 709: LD_INT 24
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: PUSH
 718: LD_EXP 3
 722: PUSH
 723: LD_INT 1
 725: PLUS
 726: ARRAY
 727: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 728: LD_ADDR_EXP 16
 732: PUSH
 733: LD_INT 2
 735: PUSH
 736: LD_INT 3
 738: PUSH
 739: LD_INT 4
 741: PUSH
 742: LD_INT 5
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: PUSH
 751: LD_EXP 4
 755: PUSH
 756: LD_INT 1
 758: PLUS
 759: ARRAY
 760: ST_TO_ADDR
// sci1_skills = [ [ 0 , 2 , 1 , 4 ] , [ 1 , 3 , 1 , 5 ] , [ 1 , 4 , 2 , 6 ] , [ 2 , 5 , 2 , 7 ] ] [ def_skill_level + 1 ] ;
 761: LD_ADDR_EXP 21
 765: PUSH
 766: LD_INT 0
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: LD_INT 1
 774: PUSH
 775: LD_INT 4
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 1
 786: PUSH
 787: LD_INT 3
 789: PUSH
 790: LD_INT 1
 792: PUSH
 793: LD_INT 5
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 4
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 6
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 2
 822: PUSH
 823: LD_INT 5
 825: PUSH
 826: LD_INT 2
 828: PUSH
 829: LD_INT 7
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: PUSH
 844: LD_EXP 4
 848: PUSH
 849: LD_INT 1
 851: PLUS
 852: ARRAY
 853: ST_TO_ADDR
// sci2_skills = [ [ 2 , 1 , 1 , 3 ] , [ 2 , 2 , 1 , 4 ] , [ 3 , 3 , 2 , 5 ] , [ 3 , 4 , 3 , 6 ] ] [ def_skill_level + 1 ] ;
 854: LD_ADDR_EXP 22
 858: PUSH
 859: LD_INT 2
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 1
 867: PUSH
 868: LD_INT 3
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: LD_INT 2
 879: PUSH
 880: LD_INT 2
 882: PUSH
 883: LD_INT 1
 885: PUSH
 886: LD_INT 4
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 3
 900: PUSH
 901: LD_INT 2
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 3
 915: PUSH
 916: LD_INT 4
 918: PUSH
 919: LD_INT 3
 921: PUSH
 922: LD_INT 6
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: PUSH
 937: LD_EXP 4
 941: PUSH
 942: LD_INT 1
 944: PLUS
 945: ARRAY
 946: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_INT 0
 954: PUSH
 955: LD_INT 0
 957: PUSH
 958: LD_INT 0
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 30
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 0
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 50
 982: PUSH
 983: LD_INT 20
 985: PUSH
 986: LD_INT 0
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 80
 996: PUSH
 997: LD_INT 40
 999: PUSH
1000: LD_INT 20
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_EXP 5
1018: PUSH
1019: LD_INT 1
1021: PLUS
1022: ARRAY
1023: ST_TO_ADDR
// starting_crates = [ [ 8 ] , [ 5 , 10 ] , [ 4 , 8 , 12 ] , [ 3 , 6 , 9 , 12 ] ] [ def_starting_resources + 1 ] ;
1024: LD_ADDR_EXP 17
1028: PUSH
1029: LD_INT 8
1031: PUSH
1032: EMPTY
1033: LIST
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 10
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 8
1050: PUSH
1051: LD_INT 12
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 3
1061: PUSH
1062: LD_INT 6
1064: PUSH
1065: LD_INT 9
1067: PUSH
1068: LD_INT 12
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: LD_EXP 5
1087: PUSH
1088: LD_INT 1
1090: PLUS
1091: ARRAY
1092: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1093: LD_ADDR_EXP 19
1097: PUSH
1098: LD_INT 20
1100: PUSH
1101: LD_INT 30
1103: PUSH
1104: LD_INT 40
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_EXP 6
1116: PUSH
1117: LD_INT 1
1119: PLUS
1120: ARRAY
1121: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1122: LD_ADDR_EXP 23
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 8400
1132: PUSH
1133: LD_INT 1750
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_EXP 11
1145: PUSH
1146: LD_INT 1
1148: PLUS
1149: ARRAY
1150: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1151: LD_ADDR_EXP 24
1155: PUSH
1156: LD_INT 0
1158: PUSH
1159: LD_INT 21000
1161: PUSH
1162: LD_INT 4200
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_EXP 11
1174: PUSH
1175: LD_INT 1
1177: PLUS
1178: ARRAY
1179: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1180: LD_ADDR_EXP 20
1184: PUSH
1185: LD_INT 1
1187: NEG
1188: PUSH
1189: LD_INT 350
1191: PUSH
1192: LD_INT 700
1194: PUSH
1195: LD_INT 1400
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_EXP 8
1212: PUSH
1213: LD_INT 1
1215: PLUS
1216: ARRAY
1217: ST_TO_ADDR
// battle_flags_id = [ ] ;
1218: LD_ADDR_EXP 47
1222: PUSH
1223: EMPTY
1224: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1225: LD_EXP 10
1229: PUSH
1230: LD_INT 0
1232: EQUAL
1233: IFFALSE 1245
// siberite_bomb_Delay = 0 else
1235: LD_ADDR_EXP 25
1239: PUSH
1240: LD_INT 0
1242: ST_TO_ADDR
1243: GO 1267
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1245: LD_ADDR_EXP 25
1249: PUSH
1250: LD_EXP 10
1254: PUSH
1255: LD_INT 1
1257: MINUS
1258: PUSH
1259: LD_INT 21000
1261: MUL
1262: PUSH
1263: LD_INT 1
1265: PLUS
1266: ST_TO_ADDR
// sci1 := [ ] ;
1267: LD_ADDR_EXP 28
1271: PUSH
1272: EMPTY
1273: ST_TO_ADDR
// sci2 := [ ] ;
1274: LD_ADDR_EXP 29
1278: PUSH
1279: EMPTY
1280: ST_TO_ADDR
// end ;
1281: LD_VAR 0 1
1285: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , br4 , un , i ; begin
1286: LD_INT 0
1288: PPUSH
1289: PPUSH
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
// depot_def = [ ] ;
1297: LD_ADDR_EXP 42
1301: PUSH
1302: EMPTY
1303: ST_TO_ADDR
// breastworks_def = [ ] ;
1304: LD_ADDR_EXP 43
1308: PUSH
1309: EMPTY
1310: ST_TO_ADDR
// for side := 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1751
// begin dep := side * 5 - 4 ;
1327: LD_ADDR_VAR 0 3
1331: PUSH
1332: LD_VAR 0 2
1336: PUSH
1337: LD_INT 5
1339: MUL
1340: PUSH
1341: LD_INT 4
1343: MINUS
1344: ST_TO_ADDR
// br1 := side * 5 - 3 ;
1345: LD_ADDR_VAR 0 4
1349: PUSH
1350: LD_VAR 0 2
1354: PUSH
1355: LD_INT 5
1357: MUL
1358: PUSH
1359: LD_INT 3
1361: MINUS
1362: ST_TO_ADDR
// br2 := side * 5 - 2 ;
1363: LD_ADDR_VAR 0 5
1367: PUSH
1368: LD_VAR 0 2
1372: PUSH
1373: LD_INT 5
1375: MUL
1376: PUSH
1377: LD_INT 2
1379: MINUS
1380: ST_TO_ADDR
// br3 := side * 5 - 1 ;
1381: LD_ADDR_VAR 0 6
1385: PUSH
1386: LD_VAR 0 2
1390: PUSH
1391: LD_INT 5
1393: MUL
1394: PUSH
1395: LD_INT 1
1397: MINUS
1398: ST_TO_ADDR
// br4 := side * 5 ;
1399: LD_ADDR_VAR 0 7
1403: PUSH
1404: LD_VAR 0 2
1408: PUSH
1409: LD_INT 5
1411: MUL
1412: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1413: LD_ADDR_EXP 42
1417: PUSH
1418: LD_EXP 42
1422: PUSH
1423: LD_VAR 0 3
1427: PPUSH
1428: CALL_OW 250
1432: PUSH
1433: LD_VAR 0 3
1437: PPUSH
1438: CALL_OW 251
1442: PUSH
1443: LD_VAR 0 3
1447: PPUSH
1448: CALL_OW 254
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: PUSH
1458: EMPTY
1459: LIST
1460: ADD
1461: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) ] ] ;
1462: LD_ADDR_EXP 44
1466: PUSH
1467: LD_EXP 44
1471: PUSH
1472: LD_VAR 0 3
1476: PPUSH
1477: CALL_OW 250
1481: PPUSH
1482: LD_VAR 0 3
1486: PPUSH
1487: CALL_OW 254
1491: PUSH
1492: LD_INT 6
1494: MOD
1495: PPUSH
1496: LD_INT 6
1498: PPUSH
1499: CALL_OW 272
1503: PUSH
1504: LD_VAR 0 3
1508: PPUSH
1509: CALL_OW 251
1513: PPUSH
1514: LD_VAR 0 3
1518: PPUSH
1519: CALL_OW 254
1523: PUSH
1524: LD_INT 6
1526: MOD
1527: PPUSH
1528: LD_INT 6
1530: PPUSH
1531: CALL_OW 273
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: EMPTY
1541: LIST
1542: ADD
1543: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] , [ GetX ( br4 ) , GetY ( br4 ) , GetDir ( br4 ) ] ] ] ;
1544: LD_ADDR_EXP 43
1548: PUSH
1549: LD_EXP 43
1553: PUSH
1554: LD_VAR 0 4
1558: PPUSH
1559: CALL_OW 250
1563: PUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 251
1573: PUSH
1574: LD_VAR 0 4
1578: PPUSH
1579: CALL_OW 254
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_VAR 0 5
1593: PPUSH
1594: CALL_OW 250
1598: PUSH
1599: LD_VAR 0 5
1603: PPUSH
1604: CALL_OW 251
1608: PUSH
1609: LD_VAR 0 5
1613: PPUSH
1614: CALL_OW 254
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_VAR 0 6
1628: PPUSH
1629: CALL_OW 250
1633: PUSH
1634: LD_VAR 0 6
1638: PPUSH
1639: CALL_OW 251
1643: PUSH
1644: LD_VAR 0 6
1648: PPUSH
1649: CALL_OW 254
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_VAR 0 7
1663: PPUSH
1664: CALL_OW 250
1668: PUSH
1669: LD_VAR 0 7
1673: PPUSH
1674: CALL_OW 251
1678: PUSH
1679: LD_VAR 0 7
1683: PPUSH
1684: CALL_OW 254
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: EMPTY
1701: LIST
1702: ADD
1703: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1704: LD_VAR 0 3
1708: PPUSH
1709: CALL_OW 65
// DestroyUnit ( br1 ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL_OW 65
// DestroyUnit ( br2 ) ;
1722: LD_VAR 0 5
1726: PPUSH
1727: CALL_OW 65
// DestroyUnit ( br3 ) ;
1731: LD_VAR 0 6
1735: PPUSH
1736: CALL_OW 65
// DestroyUnit ( br4 ) ;
1740: LD_VAR 0 7
1744: PPUSH
1745: CALL_OW 65
// end ;
1749: GO 1324
1751: POP
1752: POP
// teleport_def = [ [ 19 , 16 , 0 ] , [ 108 , 9 , 1 ] , [ 62 , 112 , 2 ] , [ 157 , 126 , 1 ] ] ;
1753: LD_ADDR_EXP 45
1757: PUSH
1758: LD_INT 19
1760: PUSH
1761: LD_INT 16
1763: PUSH
1764: LD_INT 0
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 108
1774: PUSH
1775: LD_INT 9
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 62
1788: PUSH
1789: LD_INT 112
1791: PUSH
1792: LD_INT 2
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 157
1802: PUSH
1803: LD_INT 126
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: ST_TO_ADDR
// end ;
1820: LD_VAR 0 1
1824: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1825: LD_INT 0
1827: PPUSH
1828: PPUSH
1829: PPUSH
// Team_Game := 0 ;
1830: LD_ADDR_EXP 41
1834: PUSH
1835: LD_INT 0
1837: ST_TO_ADDR
// for i = 1 to 8 do
1838: LD_ADDR_VAR 0 2
1842: PUSH
1843: DOUBLE
1844: LD_INT 1
1846: DEC
1847: ST_TO_ADDR
1848: LD_INT 8
1850: PUSH
1851: FOR_TO
1852: IFFALSE 1878
// Team_Game := Team_Game + Side_Teams [ i ] ;
1854: LD_ADDR_EXP 41
1858: PUSH
1859: LD_EXP 41
1863: PUSH
1864: LD_EXP 33
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PLUS
1875: ST_TO_ADDR
1876: GO 1851
1878: POP
1879: POP
// if not Team_Game then
1880: LD_EXP 41
1884: NOT
1885: IFFALSE 1897
// Team_Game := false else
1887: LD_ADDR_EXP 41
1891: PUSH
1892: LD_INT 0
1894: ST_TO_ADDR
1895: GO 1905
// Team_Game := true ;
1897: LD_ADDR_EXP 41
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// if not Team_Game then
1905: LD_EXP 41
1909: NOT
1910: IFFALSE 2008
// begin for i = 1 to 8 do
1912: LD_ADDR_VAR 0 2
1916: PUSH
1917: DOUBLE
1918: LD_INT 1
1920: DEC
1921: ST_TO_ADDR
1922: LD_INT 8
1924: PUSH
1925: FOR_TO
1926: IFFALSE 2004
// for j = 1 to 8 do
1928: LD_ADDR_VAR 0 3
1932: PUSH
1933: DOUBLE
1934: LD_INT 1
1936: DEC
1937: ST_TO_ADDR
1938: LD_INT 8
1940: PUSH
1941: FOR_TO
1942: IFFALSE 2000
// if i <> j then
1944: LD_VAR 0 2
1948: PUSH
1949: LD_VAR 0 3
1953: NONEQUAL
1954: IFFALSE 1978
// SetAttitude ( i , j , att_neutral , true ) else
1956: LD_VAR 0 2
1960: PPUSH
1961: LD_VAR 0 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: LD_INT 1
1971: PPUSH
1972: CALL_OW 80
1976: GO 1998
// SetAttitude ( i , j , att_friend , true ) ;
1978: LD_VAR 0 2
1982: PPUSH
1983: LD_VAR 0 3
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL_OW 80
1998: GO 1941
2000: POP
2001: POP
2002: GO 1925
2004: POP
2005: POP
// end else
2006: GO 2183
// begin if def_shared_vision then
2008: LD_EXP 7
2012: IFFALSE 2077
// begin for i in Teams do
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: LD_EXP 34
2023: PUSH
2024: FOR_IN
2025: IFFALSE 2075
// for j = 2 to i do
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: DOUBLE
2033: LD_INT 2
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 2
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2071
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2045: LD_VAR 0 2
2049: PUSH
2050: LD_VAR 0 3
2054: ARRAY
2055: PPUSH
2056: LD_VAR 0 2
2060: PUSH
2061: LD_INT 1
2063: ARRAY
2064: PPUSH
2065: CALL_OW 343
2069: GO 2042
2071: POP
2072: POP
2073: GO 2024
2075: POP
2076: POP
// end ; for i = 1 to 8 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 8
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2181
// for j = 1 to 8 do
2093: LD_ADDR_VAR 0 3
2097: PUSH
2098: DOUBLE
2099: LD_INT 1
2101: DEC
2102: ST_TO_ADDR
2103: LD_INT 8
2105: PUSH
2106: FOR_TO
2107: IFFALSE 2177
// if Side_Teams [ i ] = Side_Teams [ j ] then
2109: LD_EXP 33
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_EXP 33
2124: PUSH
2125: LD_VAR 0 3
2129: ARRAY
2130: EQUAL
2131: IFFALSE 2155
// SetAttitude ( i , j , att_friend , true ) else
2133: LD_VAR 0 2
2137: PPUSH
2138: LD_VAR 0 3
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 1
2148: PPUSH
2149: CALL_OW 80
2153: GO 2175
// SetAttitude ( i , j , att_enemy , true ) ;
2155: LD_VAR 0 2
2159: PPUSH
2160: LD_VAR 0 3
2164: PPUSH
2165: LD_INT 2
2167: PPUSH
2168: LD_INT 1
2170: PPUSH
2171: CALL_OW 80
2175: GO 2106
2177: POP
2178: POP
2179: GO 2090
2181: POP
2182: POP
// end ; end ;
2183: LD_VAR 0 1
2187: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2188: LD_INT 0
2190: PPUSH
2191: PPUSH
2192: PPUSH
2193: PPUSH
// result := [ ] ;
2194: LD_ADDR_VAR 0 8
2198: PUSH
2199: EMPTY
2200: ST_TO_ADDR
// for i := 1 to count do
2201: LD_ADDR_VAR 0 9
2205: PUSH
2206: DOUBLE
2207: LD_INT 1
2209: DEC
2210: ST_TO_ADDR
2211: LD_VAR 0 2
2215: PUSH
2216: FOR_TO
2217: IFFALSE 2611
// begin uc_direction := Rand ( 0 , 5 ) ;
2219: LD_ADDR_OWVAR 24
2223: PUSH
2224: LD_INT 0
2226: PPUSH
2227: LD_INT 5
2229: PPUSH
2230: CALL_OW 12
2234: ST_TO_ADDR
// if commander then
2235: LD_FROM_VAR 0 7
2239: IFFALSE 2348
// begin hc_name := mp_sides_players_names [ side ] ;
2241: LD_ADDR_OWVAR 26
2245: PUSH
2246: LD_OWVAR 19
2250: PUSH
2251: LD_VAR 0 1
2255: ARRAY
2256: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2257: LD_INT 1
2259: PPUSH
2260: LD_INT 2
2262: PPUSH
2263: CALL_OW 12
2267: PPUSH
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_EXP 16
2277: PUSH
2278: LD_INT 2
2280: PLUS
2281: PPUSH
2282: CALL_OW 380
// hc_importance := 105 ;
2286: LD_ADDR_OWVAR 32
2290: PUSH
2291: LD_INT 105
2293: ST_TO_ADDR
// commander := false ;
2294: LD_VAR 0 7
2298: PUSH
2299: LD_INT 0
2301: ST_TO_ADDR
// if Multiplayer then
2302: LD_OWVAR 4
2306: IFFALSE 2346
// begin hc_gallery := MULTIAVATARS ;
2308: LD_ADDR_OWVAR 33
2312: PUSH
2313: LD_STRING MULTIAVATARS
2315: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2316: LD_ADDR_OWVAR 34
2320: PUSH
2321: LD_VAR 0 1
2325: PPUSH
2326: CALL_OW 525
2330: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2331: LD_ADDR_OWVAR 27
2335: PUSH
2336: LD_VAR 0 1
2340: PPUSH
2341: CALL_OW 526
2345: ST_TO_ADDR
// end ; end else
2346: GO 2411
// begin hc_name :=  ;
2348: LD_ADDR_OWVAR 26
2352: PUSH
2353: LD_STRING 
2355: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 2
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: LD_EXP 16
2376: PPUSH
2377: CALL_OW 380
// hc_importance := 0 ;
2381: LD_ADDR_OWVAR 32
2385: PUSH
2386: LD_INT 0
2388: ST_TO_ADDR
// if Multiplayer then
2389: LD_OWVAR 4
2393: IFFALSE 2411
// begin hc_gallery :=  ;
2395: LD_ADDR_OWVAR 33
2399: PUSH
2400: LD_STRING 
2402: ST_TO_ADDR
// hc_face_number := 0 ;
2403: LD_ADDR_OWVAR 34
2407: PUSH
2408: LD_INT 0
2410: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2411: LD_ADDR_VAR 0 11
2415: PUSH
2416: CALL_OW 44
2420: ST_TO_ADDR
// if global_defined then
2421: LD_LOC 2
2425: IFFALSE 2563
// begin j := i ;
2427: LD_ADDR_VAR 0 10
2431: PUSH
2432: LD_VAR 0 9
2436: ST_TO_ADDR
// if cl = class_soldier then
2437: LD_VAR 0 3
2441: PUSH
2442: LD_INT 1
2444: EQUAL
2445: IFFALSE 2463
// j := i + soldiers_created ;
2447: LD_ADDR_VAR 0 10
2451: PUSH
2452: LD_VAR 0 9
2456: PUSH
2457: LD_LOC 3
2461: PLUS
2462: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2463: LD_LOC 1
2467: PUSH
2468: LD_VAR 0 3
2472: ARRAY
2473: PUSH
2474: LD_VAR 0 10
2478: ARRAY
2479: PPUSH
2480: LD_VAR 0 11
2484: PPUSH
2485: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2489: LD_VAR 0 11
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: LD_LOC 1
2501: PUSH
2502: LD_VAR 0 3
2506: ARRAY
2507: PUSH
2508: LD_VAR 0 10
2512: ARRAY
2513: PPUSH
2514: LD_INT 2
2516: PPUSH
2517: CALL_OW 260
2521: PPUSH
2522: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2526: LD_VAR 0 11
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: LD_LOC 1
2538: PUSH
2539: LD_VAR 0 3
2543: ARRAY
2544: PUSH
2545: LD_VAR 0 10
2549: ARRAY
2550: PPUSH
2551: LD_INT 1
2553: PPUSH
2554: CALL_OW 260
2558: PPUSH
2559: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2563: LD_VAR 0 11
2567: PPUSH
2568: LD_VAR 0 4
2572: PPUSH
2573: LD_VAR 0 5
2577: PPUSH
2578: LD_VAR 0 6
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: CALL_OW 50
// result := result ^ [ un ] ;
2590: LD_ADDR_VAR 0 8
2594: PUSH
2595: LD_VAR 0 8
2599: PUSH
2600: LD_VAR 0 11
2604: PUSH
2605: EMPTY
2606: LIST
2607: ADD
2608: ST_TO_ADDR
// end ;
2609: GO 2216
2611: POP
2612: POP
// if not global_defined then
2613: LD_LOC 2
2617: NOT
2618: IFFALSE 2680
// if cl = class_soldier and global_units then
2620: LD_VAR 0 3
2624: PUSH
2625: LD_INT 1
2627: EQUAL
2628: PUSH
2629: LD_LOC 1
2633: AND
2634: IFFALSE 2661
// global_units := [ global_units [ 1 ] ^ result ] else
2636: LD_ADDR_LOC 1
2640: PUSH
2641: LD_LOC 1
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: PUSH
2650: LD_VAR 0 8
2654: ADD
2655: PUSH
2656: EMPTY
2657: LIST
2658: ST_TO_ADDR
2659: GO 2680
// global_units := global_units ^ [ result ] end ;
2661: LD_ADDR_LOC 1
2665: PUSH
2666: LD_LOC 1
2670: PUSH
2671: LD_VAR 0 8
2675: PUSH
2676: EMPTY
2677: LIST
2678: ADD
2679: ST_TO_ADDR
2680: LD_VAR 0 8
2684: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol , t , n1 , n2 ; begin
2685: LD_INT 0
2687: PPUSH
2688: PPUSH
2689: PPUSH
2690: PPUSH
2691: PPUSH
2692: PPUSH
2693: PPUSH
2694: PPUSH
2695: PPUSH
2696: PPUSH
2697: PPUSH
2698: PPUSH
2699: PPUSH
2700: PPUSH
2701: PPUSH
2702: PPUSH
// pos := Side_Positions [ side ] ;
2703: LD_ADDR_VAR 0 3
2707: PUSH
2708: LD_EXP 36
2712: PUSH
2713: LD_VAR 0 1
2717: ARRAY
2718: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2719: LD_ADDR_OWVAR 21
2723: PUSH
2724: LD_EXP 37
2728: PUSH
2729: LD_VAR 0 1
2733: ARRAY
2734: ST_TO_ADDR
// uc_side := side ;
2735: LD_ADDR_OWVAR 20
2739: PUSH
2740: LD_VAR 0 1
2744: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2745: LD_ADDR_VAR 0 4
2749: PUSH
2750: LD_EXP 42
2754: PUSH
2755: LD_VAR 0 3
2759: ARRAY
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2765: LD_ADDR_VAR 0 5
2769: PUSH
2770: LD_EXP 42
2774: PUSH
2775: LD_VAR 0 3
2779: ARRAY
2780: PUSH
2781: LD_INT 2
2783: ARRAY
2784: ST_TO_ADDR
// if is_depot then
2785: LD_EXP 13
2789: IFFALSE 2932
// begin bc_type = b_depot ;
2791: LD_ADDR_OWVAR 42
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
2799: LD_ADDR_VAR 0 10
2803: PUSH
2804: LD_VAR 0 4
2808: PPUSH
2809: LD_VAR 0 5
2813: PPUSH
2814: LD_EXP 42
2818: PUSH
2819: LD_VAR 0 3
2823: ARRAY
2824: PUSH
2825: LD_INT 3
2827: ARRAY
2828: PPUSH
2829: CALL_OW 47
2833: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2834: LD_VAR 0 10
2838: PPUSH
2839: LD_STRING @
2841: PUSH
2842: LD_VAR 0 1
2846: STR
2847: PPUSH
2848: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2852: LD_VAR 0 10
2856: PPUSH
2857: CALL_OW 274
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_EXP 18
2869: PUSH
2870: LD_INT 1
2872: ARRAY
2873: PPUSH
2874: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2878: LD_VAR 0 10
2882: PPUSH
2883: CALL_OW 274
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: LD_EXP 18
2895: PUSH
2896: LD_INT 2
2898: ARRAY
2899: PPUSH
2900: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2904: LD_VAR 0 2
2908: PPUSH
2909: CALL_OW 274
2913: PPUSH
2914: LD_INT 3
2916: PPUSH
2917: LD_EXP 18
2921: PUSH
2922: LD_INT 3
2924: ARRAY
2925: PPUSH
2926: CALL_OW 277
// end else
2930: GO 3076
// begin for i := 1 to 3 do
2932: LD_ADDR_VAR 0 6
2936: PUSH
2937: DOUBLE
2938: LD_INT 1
2940: DEC
2941: ST_TO_ADDR
2942: LD_INT 3
2944: PUSH
2945: FOR_TO
2946: IFFALSE 3074
// begin r := starting_resources [ i ] ;
2948: LD_ADDR_VAR 0 7
2952: PUSH
2953: LD_EXP 18
2957: PUSH
2958: LD_VAR 0 6
2962: ARRAY
2963: ST_TO_ADDR
// while r >= 10 do
2964: LD_VAR 0 7
2968: PUSH
2969: LD_INT 10
2971: GREATEREQUAL
2972: IFFALSE 3072
// if r > 50 then
2974: LD_VAR 0 7
2978: PUSH
2979: LD_INT 50
2981: GREATER
2982: IFFALSE 3028
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
2984: LD_VAR 0 6
2988: PPUSH
2989: LD_INT 5
2991: PPUSH
2992: LD_VAR 0 4
2996: PPUSH
2997: LD_VAR 0 5
3001: PPUSH
3002: LD_INT 4
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL_OW 60
// r := r - 50 ;
3012: LD_ADDR_VAR 0 7
3016: PUSH
3017: LD_VAR 0 7
3021: PUSH
3022: LD_INT 50
3024: MINUS
3025: ST_TO_ADDR
// end else
3026: GO 3070
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3028: LD_VAR 0 6
3032: PPUSH
3033: LD_VAR 0 7
3037: PUSH
3038: LD_INT 10
3040: DIV
3041: PPUSH
3042: LD_VAR 0 4
3046: PPUSH
3047: LD_VAR 0 5
3051: PPUSH
3052: LD_INT 4
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 60
// r := 0 ;
3062: LD_ADDR_VAR 0 7
3066: PUSH
3067: LD_INT 0
3069: ST_TO_ADDR
// end ;
3070: GO 2964
// end ;
3072: GO 2945
3074: POP
3075: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_EXP 44
3085: PUSH
3086: LD_VAR 0 3
3090: ARRAY
3091: PUSH
3092: LD_INT 1
3094: ARRAY
3095: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_EXP 44
3105: PUSH
3106: LD_VAR 0 3
3110: ARRAY
3111: PUSH
3112: LD_INT 2
3114: ARRAY
3115: ST_TO_ADDR
// for r in starting_crates do
3116: LD_ADDR_VAR 0 7
3120: PUSH
3121: LD_EXP 17
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3159
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3129: LD_INT 1
3131: PPUSH
3132: LD_INT 5
3134: PPUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: LD_VAR 0 5
3144: PPUSH
3145: LD_VAR 0 7
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 60
3157: GO 3126
3159: POP
3160: POP
// if def_morale_flags then
3161: LD_EXP 8
3165: IFFALSE 3244
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3167: LD_ADDR_EXP 47
3171: PUSH
3172: LD_EXP 47
3176: PUSH
3177: LD_VAR 0 1
3181: PPUSH
3182: LD_VAR 0 4
3186: PPUSH
3187: LD_VAR 0 5
3191: PPUSH
3192: LD_INT 1
3194: PUSH
3195: LD_INT 100
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 50
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 3
3214: PUSH
3215: LD_INT 20
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: LD_INT 20
3224: PUSH
3225: LD_INT 100
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: PPUSH
3238: CALL_OW 418
3242: ADD
3243: ST_TO_ADDR
// commander := true ;
3244: LD_ADDR_EXP 46
3248: PUSH
3249: LD_INT 1
3251: ST_TO_ADDR
// if game_type in [ 11 , 12 ] then
3252: LD_EXP 1
3256: PUSH
3257: LD_INT 11
3259: PUSH
3260: LD_INT 12
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: IN
3267: IFFALSE 4122
// begin uc_nation = nation_russian ;
3269: LD_ADDR_OWVAR 21
3273: PUSH
3274: LD_INT 3
3276: ST_TO_ADDR
// bc_type = b_teleport ;
3277: LD_ADDR_OWVAR 42
3281: PUSH
3282: LD_INT 34
3284: ST_TO_ADDR
// bc_level = 10 ;
3285: LD_ADDR_OWVAR 43
3289: PUSH
3290: LD_INT 10
3292: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , teleport_def [ pos ] [ 3 ] ) ;
3293: LD_EXP 45
3297: PUSH
3298: LD_VAR 0 3
3302: ARRAY
3303: PUSH
3304: LD_INT 1
3306: ARRAY
3307: PPUSH
3308: LD_EXP 45
3312: PUSH
3313: LD_VAR 0 3
3317: ARRAY
3318: PUSH
3319: LD_INT 2
3321: ARRAY
3322: PPUSH
3323: LD_EXP 45
3327: PUSH
3328: LD_VAR 0 3
3332: ARRAY
3333: PUSH
3334: LD_INT 3
3336: ARRAY
3337: PPUSH
3338: CALL_OW 47
// if game_type = 12 then
3342: LD_EXP 1
3346: PUSH
3347: LD_INT 12
3349: EQUAL
3350: IFFALSE 3386
// if ( side in Teams [ 1 ] ) then
3352: LD_VAR 0 1
3356: PUSH
3357: LD_EXP 34
3361: PUSH
3362: LD_INT 1
3364: ARRAY
3365: IN
3366: IFFALSE 3378
// t := 1 else
3368: LD_ADDR_VAR 0 15
3372: PUSH
3373: LD_INT 1
3375: ST_TO_ADDR
3376: GO 3386
// t := 2 ;
3378: LD_ADDR_VAR 0 15
3382: PUSH
3383: LD_INT 2
3385: ST_TO_ADDR
// hc_importance = 101 ;
3386: LD_ADDR_OWVAR 32
3390: PUSH
3391: LD_INT 101
3393: ST_TO_ADDR
// commander := false ;
3394: LD_ADDR_EXP 46
3398: PUSH
3399: LD_INT 0
3401: ST_TO_ADDR
// n1 := false ;
3402: LD_ADDR_VAR 0 16
3406: PUSH
3407: LD_INT 0
3409: ST_TO_ADDR
// n2 := false ;
3410: LD_ADDR_VAR 0 17
3414: PUSH
3415: LD_INT 0
3417: ST_TO_ADDR
// if ( teams [ t ] + 0 ) = 1 then
3418: LD_EXP 34
3422: PUSH
3423: LD_VAR 0 15
3427: ARRAY
3428: PUSH
3429: LD_INT 0
3431: PLUS
3432: PUSH
3433: LD_INT 1
3435: EQUAL
3436: IFFALSE 3456
// begin n1 := true ;
3438: LD_ADDR_VAR 0 16
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// n2 := true ;
3446: LD_ADDR_VAR 0 17
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// end else
3454: GO 3612
// if t = 1 then
3456: LD_VAR 0 15
3460: PUSH
3461: LD_INT 1
3463: EQUAL
3464: IFFALSE 3540
// if sci1 then
3466: LD_EXP 28
3470: IFFALSE 3511
// if GetSex ( sci1 [ 1 ] ) = sex_male then
3472: LD_EXP 28
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 258
3485: PUSH
3486: LD_INT 1
3488: EQUAL
3489: IFFALSE 3501
// n2 := true else
3491: LD_ADDR_VAR 0 17
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
3499: GO 3509
// n1 := true else
3501: LD_ADDR_VAR 0 16
3505: PUSH
3506: LD_INT 1
3508: ST_TO_ADDR
3509: GO 3538
// if Prob ( 50 ) then
3511: LD_INT 50
3513: PPUSH
3514: CALL_OW 13
3518: IFFALSE 3530
// n1 := true else
3520: LD_ADDR_VAR 0 16
3524: PUSH
3525: LD_INT 1
3527: ST_TO_ADDR
3528: GO 3538
// n2 := true else
3530: LD_ADDR_VAR 0 17
3534: PUSH
3535: LD_INT 1
3537: ST_TO_ADDR
3538: GO 3612
// if sci2 then
3540: LD_EXP 29
3544: IFFALSE 3585
// if GetSex ( sci2 [ 1 ] ) = sex_male then
3546: LD_EXP 29
3550: PUSH
3551: LD_INT 1
3553: ARRAY
3554: PPUSH
3555: CALL_OW 258
3559: PUSH
3560: LD_INT 1
3562: EQUAL
3563: IFFALSE 3575
// n2 := true else
3565: LD_ADDR_VAR 0 17
3569: PUSH
3570: LD_INT 1
3572: ST_TO_ADDR
3573: GO 3583
// n1 := true else
3575: LD_ADDR_VAR 0 16
3579: PUSH
3580: LD_INT 1
3582: ST_TO_ADDR
3583: GO 3612
// if Prob ( 50 ) then
3585: LD_INT 50
3587: PPUSH
3588: CALL_OW 13
3592: IFFALSE 3604
// n1 := true else
3594: LD_ADDR_VAR 0 16
3598: PUSH
3599: LD_INT 1
3601: ST_TO_ADDR
3602: GO 3612
// n2 := true ;
3604: LD_ADDR_VAR 0 17
3608: PUSH
3609: LD_INT 1
3611: ST_TO_ADDR
// if n1 then
3612: LD_VAR 0 16
3616: IFFALSE 3852
// begin hc_name = Prof. Garin ;
3618: LD_ADDR_OWVAR 26
3622: PUSH
3623: LD_STRING Prof. Garin
3625: ST_TO_ADDR
// hc_sex = sex_male ;
3626: LD_ADDR_OWVAR 27
3630: PUSH
3631: LD_INT 1
3633: ST_TO_ADDR
// hc_class = class_scientistic ;
3634: LD_ADDR_OWVAR 28
3638: PUSH
3639: LD_INT 4
3641: ST_TO_ADDR
// hc_gallery = multi ;
3642: LD_ADDR_OWVAR 33
3646: PUSH
3647: LD_STRING multi
3649: ST_TO_ADDR
// hc_face_number = 2 ;
3650: LD_ADDR_OWVAR 34
3654: PUSH
3655: LD_INT 2
3657: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
3658: LD_ADDR_OWVAR 29
3662: PUSH
3663: LD_INT 11
3665: PUSH
3666: LD_INT 10
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: ST_TO_ADDR
// hc_basic_skills = [ 0 , 1 , 0 , 2 ] ;
3673: LD_ADDR_OWVAR 30
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 1
3683: PUSH
3684: LD_INT 0
3686: PUSH
3687: LD_INT 2
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: ST_TO_ADDR
// hc_skills = sci1_skills ;
3696: LD_ADDR_OWVAR 31
3700: PUSH
3701: LD_EXP 21
3705: ST_TO_ADDR
// if t = 1 then
3706: LD_VAR 0 15
3710: PUSH
3711: LD_INT 1
3713: EQUAL
3714: IFFALSE 3785
// begin sci1 := sci1 ^ CreateHuman ;
3716: LD_ADDR_EXP 28
3720: PUSH
3721: LD_EXP 28
3725: PUSH
3726: CALL_OW 44
3730: ADD
3731: ST_TO_ADDR
// PlaceUnitXYR ( sci1 [ sci1 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3732: LD_EXP 28
3736: PUSH
3737: LD_EXP 28
3741: ARRAY
3742: PPUSH
3743: LD_EXP 45
3747: PUSH
3748: LD_VAR 0 3
3752: ARRAY
3753: PUSH
3754: LD_INT 1
3756: ARRAY
3757: PPUSH
3758: LD_EXP 45
3762: PUSH
3763: LD_VAR 0 3
3767: ARRAY
3768: PUSH
3769: LD_INT 2
3771: ARRAY
3772: PPUSH
3773: LD_INT 4
3775: PPUSH
3776: LD_INT 0
3778: PPUSH
3779: CALL_OW 50
// end else
3783: GO 3852
// begin sci2 := sci2 ^ CreateHuman ;
3785: LD_ADDR_EXP 29
3789: PUSH
3790: LD_EXP 29
3794: PUSH
3795: CALL_OW 44
3799: ADD
3800: ST_TO_ADDR
// PlaceUnitXYR ( sci2 [ sci2 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3801: LD_EXP 29
3805: PUSH
3806: LD_EXP 29
3810: ARRAY
3811: PPUSH
3812: LD_EXP 45
3816: PUSH
3817: LD_VAR 0 3
3821: ARRAY
3822: PUSH
3823: LD_INT 1
3825: ARRAY
3826: PPUSH
3827: LD_EXP 45
3831: PUSH
3832: LD_VAR 0 3
3836: ARRAY
3837: PUSH
3838: LD_INT 2
3840: ARRAY
3841: PPUSH
3842: LD_INT 4
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 50
// end end ; if n2 then
3852: LD_VAR 0 17
3856: IFFALSE 4092
// begin hc_name = Tanya Garinova ;
3858: LD_ADDR_OWVAR 26
3862: PUSH
3863: LD_STRING Tanya Garinova
3865: ST_TO_ADDR
// hc_sex = sex_female ;
3866: LD_ADDR_OWVAR 27
3870: PUSH
3871: LD_INT 2
3873: ST_TO_ADDR
// hc_class = class_scientistic ;
3874: LD_ADDR_OWVAR 28
3878: PUSH
3879: LD_INT 4
3881: ST_TO_ADDR
// hc_gallery = multi ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING multi
3889: ST_TO_ADDR
// hc_face_number = 1 ;
3890: LD_ADDR_OWVAR 34
3894: PUSH
3895: LD_INT 1
3897: ST_TO_ADDR
// hc_attr = [ 9 , 11 ] ;
3898: LD_ADDR_OWVAR 29
3902: PUSH
3903: LD_INT 9
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: ST_TO_ADDR
// hc_basic_skills = [ 1 , 1 , 0 , 1 ] ;
3913: LD_ADDR_OWVAR 30
3917: PUSH
3918: LD_INT 1
3920: PUSH
3921: LD_INT 1
3923: PUSH
3924: LD_INT 0
3926: PUSH
3927: LD_INT 1
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: ST_TO_ADDR
// hc_skills = sci2_skills ;
3936: LD_ADDR_OWVAR 31
3940: PUSH
3941: LD_EXP 22
3945: ST_TO_ADDR
// if t = 1 then
3946: LD_VAR 0 15
3950: PUSH
3951: LD_INT 1
3953: EQUAL
3954: IFFALSE 4025
// begin sci1 := sci1 ^ CreateHuman ;
3956: LD_ADDR_EXP 28
3960: PUSH
3961: LD_EXP 28
3965: PUSH
3966: CALL_OW 44
3970: ADD
3971: ST_TO_ADDR
// PlaceUnitXYR ( sci1 [ sci1 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3972: LD_EXP 28
3976: PUSH
3977: LD_EXP 28
3981: ARRAY
3982: PPUSH
3983: LD_EXP 45
3987: PUSH
3988: LD_VAR 0 3
3992: ARRAY
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: LD_EXP 45
4002: PUSH
4003: LD_VAR 0 3
4007: ARRAY
4008: PUSH
4009: LD_INT 2
4011: ARRAY
4012: PPUSH
4013: LD_INT 4
4015: PPUSH
4016: LD_INT 0
4018: PPUSH
4019: CALL_OW 50
// end else
4023: GO 4092
// begin sci2 := sci2 ^ CreateHuman ;
4025: LD_ADDR_EXP 29
4029: PUSH
4030: LD_EXP 29
4034: PUSH
4035: CALL_OW 44
4039: ADD
4040: ST_TO_ADDR
// PlaceUnitXYR ( sci2 [ sci2 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
4041: LD_EXP 29
4045: PUSH
4046: LD_EXP 29
4050: ARRAY
4051: PPUSH
4052: LD_EXP 45
4056: PUSH
4057: LD_VAR 0 3
4061: ARRAY
4062: PUSH
4063: LD_INT 1
4065: ARRAY
4066: PPUSH
4067: LD_EXP 45
4071: PUSH
4072: LD_VAR 0 3
4076: ARRAY
4077: PUSH
4078: LD_INT 2
4080: ARRAY
4081: PPUSH
4082: LD_INT 4
4084: PPUSH
4085: LD_INT 0
4087: PPUSH
4088: CALL_OW 50
// end end ; SetTech ( tech_TargTeleport , side , state_researched ) ;
4092: LD_INT 38
4094: PPUSH
4095: LD_VAR 0 1
4099: PPUSH
4100: LD_INT 2
4102: PPUSH
4103: CALL_OW 322
// SetRestrict ( b_teleport , side , state_disabled ) ;
4107: LD_INT 34
4109: PPUSH
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_INT 0
4117: PPUSH
4118: CALL_OW 324
// end ; uc_nation = Side_nations [ side ] ;
4122: LD_ADDR_OWVAR 21
4126: PUSH
4127: LD_EXP 37
4131: PUSH
4132: LD_VAR 0 1
4136: ARRAY
4137: ST_TO_ADDR
// hc_gallery =  ;
4138: LD_ADDR_OWVAR 33
4142: PUSH
4143: LD_STRING 
4145: ST_TO_ADDR
// hc_name =  ;
4146: LD_ADDR_OWVAR 26
4150: PUSH
4151: LD_STRING 
4153: ST_TO_ADDR
// neng := number_of_people ;
4154: LD_ADDR_VAR 0 11
4158: PUSH
4159: LD_EXP 15
4163: ST_TO_ADDR
// nsol := number_of_breastworks ;
4164: LD_ADDR_VAR 0 14
4168: PUSH
4169: LD_EXP 14
4173: ST_TO_ADDR
// if nsol < neng div 4 then
4174: LD_VAR 0 14
4178: PUSH
4179: LD_VAR 0 11
4183: PUSH
4184: LD_INT 4
4186: DIV
4187: LESS
4188: IFFALSE 4204
// nsol := neng div 4 ;
4190: LD_ADDR_VAR 0 14
4194: PUSH
4195: LD_VAR 0 11
4199: PUSH
4200: LD_INT 4
4202: DIV
4203: ST_TO_ADDR
// neng := neng - nsol ;
4204: LD_ADDR_VAR 0 11
4208: PUSH
4209: LD_VAR 0 11
4213: PUSH
4214: LD_VAR 0 14
4218: MINUS
4219: ST_TO_ADDR
// nsci := neng div 3 ;
4220: LD_ADDR_VAR 0 12
4224: PUSH
4225: LD_VAR 0 11
4229: PUSH
4230: LD_INT 3
4232: DIV
4233: ST_TO_ADDR
// if nsci < 1 then
4234: LD_VAR 0 12
4238: PUSH
4239: LD_INT 1
4241: LESS
4242: IFFALSE 4252
// nsci := 1 ;
4244: LD_ADDR_VAR 0 12
4248: PUSH
4249: LD_INT 1
4251: ST_TO_ADDR
// neng := neng - nsci ;
4252: LD_ADDR_VAR 0 11
4256: PUSH
4257: LD_VAR 0 11
4261: PUSH
4262: LD_VAR 0 12
4266: MINUS
4267: ST_TO_ADDR
// nmech := neng div 2 ;
4268: LD_ADDR_VAR 0 13
4272: PUSH
4273: LD_VAR 0 11
4277: PUSH
4278: LD_INT 2
4280: DIV
4281: ST_TO_ADDR
// neng := neng - nmech ;
4282: LD_ADDR_VAR 0 11
4286: PUSH
4287: LD_VAR 0 11
4291: PUSH
4292: LD_VAR 0 13
4296: MINUS
4297: ST_TO_ADDR
// if neng < 1 then
4298: LD_VAR 0 11
4302: PUSH
4303: LD_INT 1
4305: LESS
4306: IFFALSE 4316
// neng := 1 ;
4308: LD_ADDR_VAR 0 11
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// soldiers_created := 0 ;
4316: LD_ADDR_LOC 3
4320: PUSH
4321: LD_INT 0
4323: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4324: LD_ADDR_VAR 0 6
4328: PUSH
4329: DOUBLE
4330: LD_INT 1
4332: DEC
4333: ST_TO_ADDR
4334: LD_EXP 14
4338: PUSH
4339: FOR_TO
4340: IFFALSE 4594
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4342: LD_ADDR_VAR 0 4
4346: PUSH
4347: LD_EXP 43
4351: PUSH
4352: LD_VAR 0 3
4356: ARRAY
4357: PUSH
4358: LD_VAR 0 6
4362: ARRAY
4363: PUSH
4364: LD_INT 1
4366: ARRAY
4367: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4368: LD_ADDR_VAR 0 5
4372: PUSH
4373: LD_EXP 43
4377: PUSH
4378: LD_VAR 0 3
4382: ARRAY
4383: PUSH
4384: LD_VAR 0 6
4388: ARRAY
4389: PUSH
4390: LD_INT 2
4392: ARRAY
4393: ST_TO_ADDR
// bc_type := b_breastwork ;
4394: LD_ADDR_OWVAR 42
4398: PUSH
4399: LD_INT 31
4401: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ i ] [ 3 ] ) ;
4402: LD_ADDR_VAR 0 9
4406: PUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: LD_VAR 0 5
4416: PPUSH
4417: LD_EXP 43
4421: PUSH
4422: LD_VAR 0 3
4426: ARRAY
4427: PUSH
4428: LD_VAR 0 6
4432: ARRAY
4433: PUSH
4434: LD_INT 3
4436: ARRAY
4437: PPUSH
4438: CALL_OW 47
4442: ST_TO_ADDR
// x := ShiftX ( x , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4443: LD_ADDR_VAR 0 4
4447: PUSH
4448: LD_VAR 0 4
4452: PPUSH
4453: LD_EXP 43
4457: PUSH
4458: LD_VAR 0 3
4462: ARRAY
4463: PUSH
4464: LD_VAR 0 6
4468: ARRAY
4469: PUSH
4470: LD_INT 3
4472: ARRAY
4473: PPUSH
4474: LD_INT 2
4476: PPUSH
4477: CALL_OW 272
4481: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4482: LD_ADDR_VAR 0 5
4486: PUSH
4487: LD_VAR 0 5
4491: PPUSH
4492: LD_EXP 43
4496: PUSH
4497: LD_VAR 0 3
4501: ARRAY
4502: PUSH
4503: LD_VAR 0 6
4507: ARRAY
4508: PUSH
4509: LD_INT 3
4511: ARRAY
4512: PPUSH
4513: LD_INT 2
4515: PPUSH
4516: CALL_OW 273
4520: ST_TO_ADDR
// sol := prepare_people ( side , 1 , class_soldier , x , y , 1 , commander ) [ 1 ] ;
4521: LD_ADDR_VAR 0 8
4525: PUSH
4526: LD_VAR 0 1
4530: PPUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 1
4536: PPUSH
4537: LD_VAR 0 4
4541: PPUSH
4542: LD_VAR 0 5
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_ADDR_EXP 46
4554: PPUSH
4555: CALL 2188 0 7
4559: PUSH
4560: LD_INT 1
4562: ARRAY
4563: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4564: LD_ADDR_LOC 3
4568: PUSH
4569: LD_LOC 3
4573: PUSH
4574: LD_INT 1
4576: PLUS
4577: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4578: LD_VAR 0 8
4582: PPUSH
4583: LD_VAR 0 9
4587: PPUSH
4588: CALL_OW 120
// end ;
4592: GO 4339
4594: POP
4595: POP
// x := start_def [ pos ] [ 1 ] ;
4596: LD_ADDR_VAR 0 4
4600: PUSH
4601: LD_EXP 44
4605: PUSH
4606: LD_VAR 0 3
4610: ARRAY
4611: PUSH
4612: LD_INT 1
4614: ARRAY
4615: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4616: LD_ADDR_VAR 0 5
4620: PUSH
4621: LD_EXP 44
4625: PUSH
4626: LD_VAR 0 3
4630: ARRAY
4631: PUSH
4632: LD_INT 2
4634: ARRAY
4635: ST_TO_ADDR
// prepare_people ( side , nsol - number_of_breastworks , class_soldier , x , y , 5 , commander ) ;
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_VAR 0 14
4645: PUSH
4646: LD_EXP 14
4650: MINUS
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: LD_VAR 0 4
4659: PPUSH
4660: LD_VAR 0 5
4664: PPUSH
4665: LD_INT 5
4667: PPUSH
4668: LD_ADDR_EXP 46
4672: PPUSH
4673: CALL 2188 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_VAR 0 11
4686: PPUSH
4687: LD_INT 2
4689: PPUSH
4690: LD_VAR 0 4
4694: PPUSH
4695: LD_VAR 0 5
4699: PPUSH
4700: LD_INT 5
4702: PPUSH
4703: LD_ADDR_EXP 46
4707: PPUSH
4708: CALL 2188 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
4712: LD_VAR 0 1
4716: PPUSH
4717: LD_VAR 0 13
4721: PPUSH
4722: LD_INT 3
4724: PPUSH
4725: LD_VAR 0 4
4729: PPUSH
4730: LD_VAR 0 5
4734: PPUSH
4735: LD_INT 5
4737: PPUSH
4738: LD_ADDR_EXP 46
4742: PPUSH
4743: CALL 2188 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
4747: LD_VAR 0 1
4751: PPUSH
4752: LD_VAR 0 12
4756: PPUSH
4757: LD_INT 4
4759: PPUSH
4760: LD_VAR 0 4
4764: PPUSH
4765: LD_VAR 0 5
4769: PPUSH
4770: LD_INT 5
4772: PPUSH
4773: LD_ADDR_EXP 46
4777: PPUSH
4778: CALL 2188 0 7
// if not global_defined then
4782: LD_LOC 2
4786: NOT
4787: IFFALSE 4797
// global_defined := true ;
4789: LD_ADDR_LOC 2
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4797: LD_EXP 9
4801: PUSH
4802: LD_INT 20
4804: PPUSH
4805: LD_VAR 0 1
4809: PPUSH
4810: CALL_OW 321
4814: PUSH
4815: LD_INT 1
4817: EQUAL
4818: AND
4819: IFFALSE 4836
// SetTech ( tech_SibDet , side , state_researched ) ;
4821: LD_INT 20
4823: PPUSH
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 2
4831: PPUSH
4832: CALL_OW 322
// if def_siberite_bomb = 1 then
4836: LD_EXP 10
4840: PUSH
4841: LD_INT 1
4843: EQUAL
4844: IFFALSE 4878
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4846: LD_INT 25
4848: PPUSH
4849: LD_VAR 0 1
4853: PPUSH
4854: LD_INT 1
4856: PPUSH
4857: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4861: LD_INT 73
4863: PPUSH
4864: LD_VAR 0 1
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 322
// end else
4876: GO 4908
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4878: LD_INT 25
4880: PPUSH
4881: LD_VAR 0 1
4885: PPUSH
4886: LD_INT 0
4888: PPUSH
4889: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4893: LD_INT 73
4895: PPUSH
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_INT 0
4903: PPUSH
4904: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4908: LD_INT 24
4910: PPUSH
4911: LD_VAR 0 1
4915: PPUSH
4916: LD_INT 0
4918: PPUSH
4919: CALL_OW 322
// end ;
4923: LD_VAR 0 2
4927: RET
// every 0 0$1 do
4928: GO 4930
4930: DISABLE
// if ( def_siberite_bomb > 1 ) then
4931: LD_EXP 10
4935: PUSH
4936: LD_INT 1
4938: GREATER
4939: IFFALSE 4954
// begin wait ( siberite_bomb_Delay ) ;
4941: LD_EXP 25
4945: PPUSH
4946: CALL_OW 67
// EnableSibFiss ;
4950: CALL 4955 0 0
// end ;
4954: END
// function EnableSibFiss ; var i ; begin
4955: LD_INT 0
4957: PPUSH
4958: PPUSH
// for i := 1 to 8 do
4959: LD_ADDR_VAR 0 2
4963: PUSH
4964: DOUBLE
4965: LD_INT 1
4967: DEC
4968: ST_TO_ADDR
4969: LD_INT 8
4971: PUSH
4972: FOR_TO
4973: IFFALSE 5019
// if Side_Positions [ i ] then
4975: LD_EXP 36
4979: PUSH
4980: LD_VAR 0 2
4984: ARRAY
4985: IFFALSE 5017
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4987: LD_INT 25
4989: PPUSH
4990: LD_VAR 0 2
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5002: LD_INT 73
5004: PPUSH
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: CALL_OW 322
// end ;
5017: GO 4972
5019: POP
5020: POP
// end ;
5021: LD_VAR 0 1
5025: RET
// function prepare_sides ; var i ; begin
5026: LD_INT 0
5028: PPUSH
5029: PPUSH
// global_units := [ ] ;
5030: LD_ADDR_LOC 1
5034: PUSH
5035: EMPTY
5036: ST_TO_ADDR
// global_defined := false ;
5037: LD_ADDR_LOC 2
5041: PUSH
5042: LD_INT 0
5044: ST_TO_ADDR
// for i := 1 to 8 do
5045: LD_ADDR_VAR 0 2
5049: PUSH
5050: DOUBLE
5051: LD_INT 1
5053: DEC
5054: ST_TO_ADDR
5055: LD_INT 8
5057: PUSH
5058: FOR_TO
5059: IFFALSE 5084
// if Side_Positions [ i ] then
5061: LD_EXP 36
5065: PUSH
5066: LD_VAR 0 2
5070: ARRAY
5071: IFFALSE 5082
// prepare_side ( i ) ;
5073: LD_VAR 0 2
5077: PPUSH
5078: CALL 2685 0 1
5082: GO 5058
5084: POP
5085: POP
// end ;
5086: LD_VAR 0 1
5090: RET
// starting begin DE_Triggers ;
5091: CALL 7046 0 0
// read_multiplayer_and_game_parameters ;
5095: CALL 0 0 0
// enable ( 44 ) ;
5099: LD_INT 44
5101: ENABLE_MARKED
// enable ( 45 ) ;
5102: LD_INT 45
5104: ENABLE_MARKED
// mp_selectmsg := true ;
5105: LD_ADDR_OWVAR 13
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// prepare_map_coordinates ;
5113: CALL 1286 0 0
// set_shared_visions_and_alliances ;
5117: CALL 1825 0 0
// prepare_sides ;
5121: CALL 5026 0 0
// if Game_Type = 66 then
5125: LD_EXP 1
5129: PUSH
5130: LD_INT 66
5132: EQUAL
5133: IFFALSE 5139
// Init_Win_Condition ;
5135: CALL 7099 0 0
// init_respawning ;
5139: CALL 14261 0 0
// init_shipments_and_respawning ;
5143: CALL 5256 0 0
// ResetFog ;
5147: CALL_OW 335
// AnimateTrees ( true ) ;
5151: LD_INT 1
5153: PPUSH
5154: CALL_OW 573
// music_nat := Side_Nations [ your_side ] ;
5158: LD_ADDR_OWVAR 71
5162: PUSH
5163: LD_EXP 37
5167: PUSH
5168: LD_OWVAR 2
5172: ARRAY
5173: ST_TO_ADDR
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5174: LD_EXP 44
5178: PUSH
5179: LD_EXP 36
5183: PUSH
5184: LD_OWVAR 2
5188: ARRAY
5189: ARRAY
5190: PUSH
5191: LD_INT 1
5193: ARRAY
5194: PPUSH
5195: LD_EXP 44
5199: PUSH
5200: LD_EXP 36
5204: PUSH
5205: LD_OWVAR 2
5209: ARRAY
5210: ARRAY
5211: PUSH
5212: LD_INT 2
5214: ARRAY
5215: PPUSH
5216: CALL_OW 86
// BuildUpAreas := [ Base_nw , Base_ne , Base_sw , Base_se ] ;
5220: LD_ADDR_EXP 50
5224: PUSH
5225: LD_INT 15
5227: PUSH
5228: LD_INT 16
5230: PUSH
5231: LD_INT 17
5233: PUSH
5234: LD_INT 18
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: ST_TO_ADDR
// BeginBuildUp ;
5243: CALL 14755 0 0
// end ;
5247: END
// export function OnHumanRespawned ( un ) ; begin
5248: LD_INT 0
5250: PPUSH
// end ; end_of_file
5251: LD_VAR 0 2
5255: RET
// var shipment1 , shipment2 ; export function init_shipments_and_respawning ; begin
5256: LD_INT 0
5258: PPUSH
// shipment1 := [ ] ;
5259: LD_ADDR_LOC 4
5263: PUSH
5264: EMPTY
5265: ST_TO_ADDR
// shipment2 := [ ] ;
5266: LD_ADDR_LOC 5
5270: PUSH
5271: EMPTY
5272: ST_TO_ADDR
// end ;
5273: LD_VAR 0 1
5277: RET
// every 0 0$5 + 0 0$1.1 marked 45 do var d , q ;
5278: GO 5280
5280: DISABLE
5281: LD_INT 0
5283: PPUSH
5284: PPUSH
// begin case tick of 1 .. 1 1$0 :
5285: LD_OWVAR 1
5289: PUSH
5290: LD_INT 1
5292: DOUBLE
5293: GREATEREQUAL
5294: IFFALSE 5302
5296: LD_INT 2100
5298: DOUBLE
5299: LESSEQUAL
5300: IFTRUE 5304
5302: GO 5315
5304: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5305: LD_ADDR_VAR 0 1
5309: PUSH
5310: LD_INT 150
5312: ST_TO_ADDR
5313: GO 5498
5315: LD_INT 2100
5317: PUSH
5318: LD_INT 1
5320: PLUS
5321: DOUBLE
5322: GREATEREQUAL
5323: IFFALSE 5331
5325: LD_INT 10500
5327: DOUBLE
5328: LESSEQUAL
5329: IFTRUE 5333
5331: GO 5344
5333: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5334: LD_ADDR_VAR 0 1
5338: PUSH
5339: LD_INT 100
5341: ST_TO_ADDR
5342: GO 5498
5344: LD_INT 10500
5346: PUSH
5347: LD_INT 1
5349: PLUS
5350: DOUBLE
5351: GREATEREQUAL
5352: IFFALSE 5360
5354: LD_INT 21000
5356: DOUBLE
5357: LESSEQUAL
5358: IFTRUE 5362
5360: GO 5373
5362: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5363: LD_ADDR_VAR 0 1
5367: PUSH
5368: LD_INT 90
5370: ST_TO_ADDR
5371: GO 5498
5373: LD_INT 21000
5375: PUSH
5376: LD_INT 1
5378: PLUS
5379: DOUBLE
5380: GREATEREQUAL
5381: IFFALSE 5389
5383: LD_INT 42000
5385: DOUBLE
5386: LESSEQUAL
5387: IFTRUE 5391
5389: GO 5402
5391: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5392: LD_ADDR_VAR 0 1
5396: PUSH
5397: LD_INT 70
5399: ST_TO_ADDR
5400: GO 5498
5402: LD_INT 42000
5404: PUSH
5405: LD_INT 1
5407: PLUS
5408: DOUBLE
5409: GREATEREQUAL
5410: IFFALSE 5418
5412: LD_INT 63000
5414: DOUBLE
5415: LESSEQUAL
5416: IFTRUE 5420
5418: GO 5431
5420: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5421: LD_ADDR_VAR 0 1
5425: PUSH
5426: LD_INT 60
5428: ST_TO_ADDR
5429: GO 5498
5431: LD_INT 63000
5433: PUSH
5434: LD_INT 1
5436: PLUS
5437: DOUBLE
5438: GREATEREQUAL
5439: IFFALSE 5447
5441: LD_INT 105000
5443: DOUBLE
5444: LESSEQUAL
5445: IFTRUE 5449
5447: GO 5460
5449: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 35
5457: ST_TO_ADDR
5458: GO 5498
5460: LD_INT 105000
5462: PUSH
5463: LD_INT 1
5465: PLUS
5466: DOUBLE
5467: GREATEREQUAL
5468: IFFALSE 5476
5470: LD_INT 630000
5472: DOUBLE
5473: LESSEQUAL
5474: IFTRUE 5478
5476: GO 5489
5478: POP
// d := 20 ; else
5479: LD_ADDR_VAR 0 1
5483: PUSH
5484: LD_INT 20
5486: ST_TO_ADDR
5487: GO 5498
5489: POP
// d := 0 ; end ;
5490: LD_ADDR_VAR 0 1
5494: PUSH
5495: LD_INT 0
5497: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
5498: LD_INT 1
5500: PPUSH
5501: LD_INT 10000
5503: PPUSH
5504: CALL_OW 12
5508: PUSH
5509: LD_VAR 0 1
5513: PUSH
5514: LD_EXP 19
5518: MUL
5519: PUSH
5520: LD_INT 2
5522: DIV
5523: LESSEQUAL
5524: IFFALSE 5631
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5526: LD_INT 1
5528: PPUSH
5529: LD_INT 140
5531: PPUSH
5532: CALL_OW 12
5536: PPUSH
5537: CALL_OW 67
// if shipment1 = [ ] then
5541: LD_LOC 4
5545: PUSH
5546: EMPTY
5547: EQUAL
5548: IFFALSE 5573
// shipment1 := [ q1 , q2 , q3 , q4 ] ;
5550: LD_ADDR_LOC 4
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: LD_INT 4
5560: PUSH
5561: LD_INT 5
5563: PUSH
5564: LD_INT 6
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: ST_TO_ADDR
// q := shipment1 [ Rand ( 1 , shipment1 ) ] ;
5573: LD_ADDR_VAR 0 2
5577: PUSH
5578: LD_LOC 4
5582: PUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_LOC 4
5590: PPUSH
5591: CALL_OW 12
5595: ARRAY
5596: ST_TO_ADDR
// shipment1 := shipment1 diff [ q ] ;
5597: LD_ADDR_LOC 4
5601: PUSH
5602: LD_LOC 4
5606: PUSH
5607: LD_VAR 0 2
5611: PUSH
5612: EMPTY
5613: LIST
5614: DIFF
5615: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
5616: LD_INT 5
5618: PPUSH
5619: LD_VAR 0 2
5623: PPUSH
5624: LD_INT 1
5626: PPUSH
5627: CALL_OW 55
// end ; enable ;
5631: ENABLE
// end ;
5632: PPOPN 2
5634: END
// every 0 0$5 + 0 0$1.1 marked 45 do var d , q ;
5635: GO 5637
5637: DISABLE
5638: LD_INT 0
5640: PPUSH
5641: PPUSH
// begin case tick of 1 .. 1 1$0 :
5642: LD_OWVAR 1
5646: PUSH
5647: LD_INT 1
5649: DOUBLE
5650: GREATEREQUAL
5651: IFFALSE 5659
5653: LD_INT 2100
5655: DOUBLE
5656: LESSEQUAL
5657: IFTRUE 5661
5659: GO 5672
5661: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5662: LD_ADDR_VAR 0 1
5666: PUSH
5667: LD_INT 150
5669: ST_TO_ADDR
5670: GO 5855
5672: LD_INT 2100
5674: PUSH
5675: LD_INT 1
5677: PLUS
5678: DOUBLE
5679: GREATEREQUAL
5680: IFFALSE 5688
5682: LD_INT 10500
5684: DOUBLE
5685: LESSEQUAL
5686: IFTRUE 5690
5688: GO 5701
5690: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5691: LD_ADDR_VAR 0 1
5695: PUSH
5696: LD_INT 100
5698: ST_TO_ADDR
5699: GO 5855
5701: LD_INT 10500
5703: PUSH
5704: LD_INT 1
5706: PLUS
5707: DOUBLE
5708: GREATEREQUAL
5709: IFFALSE 5717
5711: LD_INT 21000
5713: DOUBLE
5714: LESSEQUAL
5715: IFTRUE 5719
5717: GO 5730
5719: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5720: LD_ADDR_VAR 0 1
5724: PUSH
5725: LD_INT 90
5727: ST_TO_ADDR
5728: GO 5855
5730: LD_INT 21000
5732: PUSH
5733: LD_INT 1
5735: PLUS
5736: DOUBLE
5737: GREATEREQUAL
5738: IFFALSE 5746
5740: LD_INT 42000
5742: DOUBLE
5743: LESSEQUAL
5744: IFTRUE 5748
5746: GO 5759
5748: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5749: LD_ADDR_VAR 0 1
5753: PUSH
5754: LD_INT 70
5756: ST_TO_ADDR
5757: GO 5855
5759: LD_INT 42000
5761: PUSH
5762: LD_INT 1
5764: PLUS
5765: DOUBLE
5766: GREATEREQUAL
5767: IFFALSE 5775
5769: LD_INT 63000
5771: DOUBLE
5772: LESSEQUAL
5773: IFTRUE 5777
5775: GO 5788
5777: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5778: LD_ADDR_VAR 0 1
5782: PUSH
5783: LD_INT 60
5785: ST_TO_ADDR
5786: GO 5855
5788: LD_INT 63000
5790: PUSH
5791: LD_INT 1
5793: PLUS
5794: DOUBLE
5795: GREATEREQUAL
5796: IFFALSE 5804
5798: LD_INT 105000
5800: DOUBLE
5801: LESSEQUAL
5802: IFTRUE 5806
5804: GO 5817
5806: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5807: LD_ADDR_VAR 0 1
5811: PUSH
5812: LD_INT 35
5814: ST_TO_ADDR
5815: GO 5855
5817: LD_INT 105000
5819: PUSH
5820: LD_INT 1
5822: PLUS
5823: DOUBLE
5824: GREATEREQUAL
5825: IFFALSE 5833
5827: LD_INT 630000
5829: DOUBLE
5830: LESSEQUAL
5831: IFTRUE 5835
5833: GO 5846
5835: POP
// d := 20 ; else
5836: LD_ADDR_VAR 0 1
5840: PUSH
5841: LD_INT 20
5843: ST_TO_ADDR
5844: GO 5855
5846: POP
// d := 0 ; end ;
5847: LD_ADDR_VAR 0 1
5851: PUSH
5852: LD_INT 0
5854: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
5855: LD_INT 1
5857: PPUSH
5858: LD_INT 10000
5860: PPUSH
5861: CALL_OW 12
5865: PUSH
5866: LD_VAR 0 1
5870: PUSH
5871: LD_EXP 19
5875: MUL
5876: PUSH
5877: LD_INT 2
5879: DIV
5880: LESSEQUAL
5881: IFFALSE 6004
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5883: LD_INT 1
5885: PPUSH
5886: LD_INT 140
5888: PPUSH
5889: CALL_OW 12
5893: PPUSH
5894: CALL_OW 67
// if shipment2 = [ ] then
5898: LD_LOC 5
5902: PUSH
5903: EMPTY
5904: EQUAL
5905: IFFALSE 5946
// shipment2 := [ q1a , q2a , q3a , q4a , q1b , q2b , q3b , q4b ] ;
5907: LD_ADDR_LOC 5
5911: PUSH
5912: LD_INT 7
5914: PUSH
5915: LD_INT 8
5917: PUSH
5918: LD_INT 9
5920: PUSH
5921: LD_INT 10
5923: PUSH
5924: LD_INT 11
5926: PUSH
5927: LD_INT 12
5929: PUSH
5930: LD_INT 13
5932: PUSH
5933: LD_INT 14
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// q := shipment2 [ Rand ( 1 , shipment2 ) ] ;
5946: LD_ADDR_VAR 0 2
5950: PUSH
5951: LD_LOC 5
5955: PUSH
5956: LD_INT 1
5958: PPUSH
5959: LD_LOC 5
5963: PPUSH
5964: CALL_OW 12
5968: ARRAY
5969: ST_TO_ADDR
// shipment2 := shipment2 diff [ q ] ;
5970: LD_ADDR_LOC 5
5974: PUSH
5975: LD_LOC 5
5979: PUSH
5980: LD_VAR 0 2
5984: PUSH
5985: EMPTY
5986: LIST
5987: DIFF
5988: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
5989: LD_INT 5
5991: PPUSH
5992: LD_VAR 0 2
5996: PPUSH
5997: LD_INT 1
5999: PPUSH
6000: CALL_OW 55
// end ; enable ;
6004: ENABLE
// end ; end_of_file
6005: PPOPN 2
6007: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; export function CanWinLoose ; begin
6008: LD_INT 0
6010: PPUSH
// Result := true ;
6011: LD_ADDR_VAR 0 1
6015: PUSH
6016: LD_INT 1
6018: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6019: CALL_OW 518
6023: PUSH
6024: CALL_OW 519
6028: PUSH
6029: LD_INT 0
6031: GREATER
6032: AND
6033: IFFALSE 6043
// Result := false ;
6035: LD_ADDR_VAR 0 1
6039: PUSH
6040: LD_INT 0
6042: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
6043: CALL_OW 531
6047: PUSH
6048: CALL_OW 519
6052: PUSH
6053: LD_INT 1
6055: GREATER
6056: AND
6057: IFFALSE 6067
// Result := false ;
6059: LD_ADDR_VAR 0 1
6063: PUSH
6064: LD_INT 0
6066: ST_TO_ADDR
// end ;
6067: LD_VAR 0 1
6071: RET
// function Update_Flags ; var un ; begin
6072: LD_INT 0
6074: PPUSH
6075: PPUSH
// for un in battle_flags_id do
6076: LD_ADDR_VAR 0 2
6080: PUSH
6081: LD_EXP 47
6085: PUSH
6086: FOR_IN
6087: IFFALSE 6162
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6089: LD_VAR 0 2
6093: PPUSH
6094: LD_INT 1
6096: PUSH
6097: LD_LOC 6
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: PUSH
6106: LD_INT 2
6108: PUSH
6109: LD_LOC 6
6113: PUSH
6114: LD_INT 2
6116: DIV
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 3
6124: PUSH
6125: LD_LOC 6
6129: PUSH
6130: LD_INT 5
6132: DIV
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 20
6140: PUSH
6141: LD_LOC 6
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: PPUSH
6156: CALL_OW 423
6160: GO 6086
6162: POP
6163: POP
// end ;
6164: LD_VAR 0 1
6168: RET
// every 0 0$0.1 marked 45 do var un ;
6169: GO 6171
6171: DISABLE
6172: LD_INT 0
6174: PPUSH
// begin if not def_morale_flags then
6175: LD_EXP 8
6179: NOT
6180: IFFALSE 6184
// exit ;
6182: GO 6261
// if not morale_decreasing_time then
6184: LD_EXP 20
6188: NOT
6189: IFFALSE 6193
// exit ;
6191: GO 6261
// strength = 100 ;
6193: LD_ADDR_LOC 6
6197: PUSH
6198: LD_INT 100
6200: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6201: LD_EXP 20
6205: PPUSH
6206: CALL_OW 67
// strength := strength - 1 ;
6210: LD_ADDR_LOC 6
6214: PUSH
6215: LD_LOC 6
6219: PUSH
6220: LD_INT 1
6222: MINUS
6223: ST_TO_ADDR
// Update_Flags ;
6224: CALL 6072 0 0
// until not strength ;
6228: LD_LOC 6
6232: NOT
6233: IFFALSE 6201
// for un in battle_flags_id do
6235: LD_ADDR_VAR 0 1
6239: PUSH
6240: LD_EXP 47
6244: PUSH
6245: FOR_IN
6246: IFFALSE 6259
// KillBattleFlag ( un ) ;
6248: LD_VAR 0 1
6252: PPUSH
6253: CALL_OW 419
6257: GO 6245
6259: POP
6260: POP
// end ;
6261: PPOPN 1
6263: END
// every 0 0$1 marked 44 do var l1 , l2 ;
6264: GO 6266
6266: DISABLE
6267: LD_INT 0
6269: PPUSH
6270: PPUSH
// begin if not ( game_type in [ 11 , 12 ] ) then
6271: LD_EXP 1
6275: PUSH
6276: LD_INT 11
6278: PUSH
6279: LD_INT 12
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: IN
6286: NOT
6287: IFFALSE 6291
// exit ;
6289: GO 6692
// if not Your_Side then
6291: LD_OWVAR 2
6295: NOT
6296: IFFALSE 6301
// begin enable ;
6298: ENABLE
// exit ;
6299: GO 6692
// end ; l1 := UnitFilter ( sci1 , [ f_alive ] ) ;
6301: LD_ADDR_VAR 0 1
6305: PUSH
6306: LD_EXP 28
6310: PPUSH
6311: LD_INT 51
6313: PUSH
6314: EMPTY
6315: LIST
6316: PPUSH
6317: CALL_OW 72
6321: ST_TO_ADDR
// l2 := UnitFilter ( sci2 , [ f_alive ] ) ;
6322: LD_ADDR_VAR 0 2
6326: PUSH
6327: LD_EXP 29
6331: PPUSH
6332: LD_INT 51
6334: PUSH
6335: EMPTY
6336: LIST
6337: PPUSH
6338: CALL_OW 72
6342: ST_TO_ADDR
// if not l1 and not l2 then
6343: LD_VAR 0 1
6347: NOT
6348: PUSH
6349: LD_VAR 0 2
6353: NOT
6354: AND
6355: IFFALSE 6371
// begin wait ( 0 0$5 ) ;
6357: LD_INT 175
6359: PPUSH
6360: CALL_OW 67
// enable ( 400 ) ;
6364: LD_INT 400
6366: ENABLE_MARKED
// exit ;
6367: GO 6692
// end else
6369: GO 6691
// if not l1 then
6371: LD_VAR 0 1
6375: NOT
6376: IFFALSE 6446
// begin if Side_teams [ your_side ] = 1 then
6378: LD_EXP 33
6382: PUSH
6383: LD_OWVAR 2
6387: ARRAY
6388: PUSH
6389: LD_INT 1
6391: EQUAL
6392: IFFALSE 6420
// begin CenterOnXY ( lastxlost , lastylost ) ;
6394: LD_LOC 9
6398: PPUSH
6399: LD_LOC 10
6403: PPUSH
6404: CALL_OW 84
// wait ( 0 0$5 ) ;
6408: LD_INT 175
6410: PPUSH
6411: CALL_OW 67
// enable ( 400 ) ;
6415: LD_INT 400
6417: ENABLE_MARKED
// end else
6418: GO 6444
// begin CenterOnXY ( lastxwin , lastywin ) ;
6420: LD_LOC 7
6424: PPUSH
6425: LD_LOC 8
6429: PPUSH
6430: CALL_OW 84
// wait ( 0 0$5 ) ;
6434: LD_INT 175
6436: PPUSH
6437: CALL_OW 67
// enable ( 401 ) ;
6441: LD_INT 401
6443: ENABLE_MARKED
// end end else
6444: GO 6691
// if not l2 then
6446: LD_VAR 0 2
6450: NOT
6451: IFFALSE 6521
// begin if Side_teams [ your_side ] = 2 then
6453: LD_EXP 33
6457: PUSH
6458: LD_OWVAR 2
6462: ARRAY
6463: PUSH
6464: LD_INT 2
6466: EQUAL
6467: IFFALSE 6495
// begin CenterOnXY ( lastxlost , lastylost ) ;
6469: LD_LOC 9
6473: PPUSH
6474: LD_LOC 10
6478: PPUSH
6479: CALL_OW 84
// wait ( 0 0$5 ) ;
6483: LD_INT 175
6485: PPUSH
6486: CALL_OW 67
// enable ( 400 ) ;
6490: LD_INT 400
6492: ENABLE_MARKED
// end else
6493: GO 6519
// begin CenterOnXY ( lastxwin , lastywin ) ;
6495: LD_LOC 7
6499: PPUSH
6500: LD_LOC 8
6504: PPUSH
6505: CALL_OW 84
// wait ( 0 0$5 ) ;
6509: LD_INT 175
6511: PPUSH
6512: CALL_OW 67
// enable ( 401 ) ;
6516: LD_INT 401
6518: ENABLE_MARKED
// end end else
6519: GO 6691
// if Side_teams [ your_side ] = 1 then
6521: LD_EXP 33
6525: PUSH
6526: LD_OWVAR 2
6530: ARRAY
6531: PUSH
6532: LD_INT 1
6534: EQUAL
6535: IFFALSE 6615
// begin lastxwin := GetX ( l2 [ 1 ] ) ;
6537: LD_ADDR_LOC 7
6541: PUSH
6542: LD_VAR 0 2
6546: PUSH
6547: LD_INT 1
6549: ARRAY
6550: PPUSH
6551: CALL_OW 250
6555: ST_TO_ADDR
// lastywin := GetY ( l2 [ 1 ] ) ;
6556: LD_ADDR_LOC 8
6560: PUSH
6561: LD_VAR 0 2
6565: PUSH
6566: LD_INT 1
6568: ARRAY
6569: PPUSH
6570: CALL_OW 251
6574: ST_TO_ADDR
// lastxlost := GetX ( l1 [ 1 ] ) ;
6575: LD_ADDR_LOC 9
6579: PUSH
6580: LD_VAR 0 1
6584: PUSH
6585: LD_INT 1
6587: ARRAY
6588: PPUSH
6589: CALL_OW 250
6593: ST_TO_ADDR
// lastylost := GetY ( l1 [ 1 ] ) ;
6594: LD_ADDR_LOC 10
6598: PUSH
6599: LD_VAR 0 1
6603: PUSH
6604: LD_INT 1
6606: ARRAY
6607: PPUSH
6608: CALL_OW 251
6612: ST_TO_ADDR
// end else
6613: GO 6691
// begin lastxwin := GetX ( l1 [ 1 ] ) ;
6615: LD_ADDR_LOC 7
6619: PUSH
6620: LD_VAR 0 1
6624: PUSH
6625: LD_INT 1
6627: ARRAY
6628: PPUSH
6629: CALL_OW 250
6633: ST_TO_ADDR
// lastywin := GetY ( l1 [ 1 ] ) ;
6634: LD_ADDR_LOC 8
6638: PUSH
6639: LD_VAR 0 1
6643: PUSH
6644: LD_INT 1
6646: ARRAY
6647: PPUSH
6648: CALL_OW 251
6652: ST_TO_ADDR
// lastxlost := GetX ( l2 [ 1 ] ) ;
6653: LD_ADDR_LOC 9
6657: PUSH
6658: LD_VAR 0 2
6662: PUSH
6663: LD_INT 1
6665: ARRAY
6666: PPUSH
6667: CALL_OW 250
6671: ST_TO_ADDR
// lastylost := GetY ( l2 [ 1 ] ) ;
6672: LD_ADDR_LOC 10
6676: PUSH
6677: LD_VAR 0 2
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: PPUSH
6686: CALL_OW 251
6690: ST_TO_ADDR
// end ; enable ;
6691: ENABLE
// end ;
6692: PPOPN 2
6694: END
// every 0 0$2 marked 44 do var win , i ;
6695: GO 6697
6697: DISABLE
6698: LD_INT 0
6700: PPUSH
6701: PPUSH
// begin if game_type in [ 11 , 12 ] then
6702: LD_EXP 1
6706: PUSH
6707: LD_INT 11
6709: PUSH
6710: LD_INT 12
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: IN
6717: IFFALSE 6721
// exit ;
6719: GO 6973
// if your_side then
6721: LD_OWVAR 2
6725: IFFALSE 6972
// begin if not filterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
6727: LD_INT 22
6729: PUSH
6730: LD_OWVAR 2
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 2
6741: PUSH
6742: LD_INT 21
6744: PUSH
6745: LD_INT 1
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: PUSH
6752: LD_INT 30
6754: PUSH
6755: LD_INT 0
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 30
6764: PUSH
6765: LD_INT 1
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PPUSH
6782: CALL_OW 69
6786: NOT
6787: IFFALSE 6816
// begin wait ( 0 0$3 ) ;
6789: LD_INT 105
6791: PPUSH
6792: CALL_OW 67
// if IAmServer then
6796: CALL_OW 518
6800: IFFALSE 6809
// wait ( 0 0$1 ) ;
6802: LD_INT 35
6804: PPUSH
6805: CALL_OW 67
// enable ( 400 ) ;
6809: LD_INT 400
6811: ENABLE_MARKED
// exit ;
6812: GO 6973
// end else
6814: GO 6972
// begin win := true ;
6816: LD_ADDR_VAR 0 1
6820: PUSH
6821: LD_INT 1
6823: ST_TO_ADDR
// for i := 1 to Side_positions do
6824: LD_ADDR_VAR 0 2
6828: PUSH
6829: DOUBLE
6830: LD_INT 1
6832: DEC
6833: ST_TO_ADDR
6834: LD_EXP 36
6838: PUSH
6839: FOR_TO
6840: IFFALSE 6924
// if Side_positions [ i ] and ( i <> your_side ) then
6842: LD_EXP 36
6846: PUSH
6847: LD_VAR 0 2
6851: ARRAY
6852: PUSH
6853: LD_VAR 0 2
6857: PUSH
6858: LD_OWVAR 2
6862: NONEQUAL
6863: AND
6864: IFFALSE 6922
// begin if MultiplayerSideAlive ( i ) then
6866: LD_VAR 0 2
6870: PPUSH
6871: CALL_OW 108
6875: IFFALSE 6922
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
6877: LD_EXP 33
6881: PUSH
6882: LD_VAR 0 2
6886: ARRAY
6887: NOT
6888: PUSH
6889: LD_EXP 33
6893: PUSH
6894: LD_VAR 0 2
6898: ARRAY
6899: PUSH
6900: LD_EXP 33
6904: PUSH
6905: LD_OWVAR 2
6909: ARRAY
6910: NONEQUAL
6911: OR
6912: IFFALSE 6922
// win := false ;
6914: LD_ADDR_VAR 0 1
6918: PUSH
6919: LD_INT 0
6921: ST_TO_ADDR
// end ;
6922: GO 6839
6924: POP
6925: POP
// if win then
6926: LD_VAR 0 1
6930: IFFALSE 6972
// begin wait ( 0 0$3 ) ;
6932: LD_INT 105
6934: PPUSH
6935: CALL_OW 67
// if IAmServer then
6939: CALL_OW 518
6943: IFFALSE 6952
// wait ( 0 0$1 ) ;
6945: LD_INT 35
6947: PPUSH
6948: CALL_OW 67
// SA_Win ( Side_Nations [ Your_side ] ) ;
6952: LD_EXP 37
6956: PUSH
6957: LD_OWVAR 2
6961: ARRAY
6962: PPUSH
6963: CALL 7962 0 1
// enable ( 401 ) ;
6967: LD_INT 401
6969: ENABLE_MARKED
// exit ;
6970: GO 6973
// end ; end ; end ; enable ;
6972: ENABLE
// end ; end_of_file
6973: PPOPN 2
6975: END
// every 10 do
6976: GO 6978
6978: DISABLE
// begin if not multiplayer then
6979: LD_OWVAR 4
6983: NOT
6984: IFFALSE 6988
// exit ;
6986: GO 7045
// if ( tick >= 100 ) then
6988: LD_OWVAR 1
6992: PUSH
6993: LD_INT 100
6995: GREATEREQUAL
6996: IFFALSE 7016
// if tick mod 20 = 0 then
6998: LD_OWVAR 1
7002: PUSH
7003: LD_INT 20
7005: MOD
7006: PUSH
7007: LD_INT 0
7009: EQUAL
7010: IFFALSE 7016
// MultiplayerCRC ;
7012: CALL_OW 361
// if ( tick >= 100 ) then
7016: LD_OWVAR 1
7020: PUSH
7021: LD_INT 100
7023: GREATEREQUAL
7024: IFFALSE 7044
// if tick mod 30 = 0 then
7026: LD_OWVAR 1
7030: PUSH
7031: LD_INT 30
7033: MOD
7034: PUSH
7035: LD_INT 0
7037: EQUAL
7038: IFFALSE 7044
// DebugLogAll ;
7040: CALL_OW 360
// enable ;
7044: ENABLE
// end ; end_of_file
7045: END
// export function DE_Triggers ; begin
7046: LD_INT 0
7048: PPUSH
// disable ( 44 ) ;
7049: LD_INT 44
7051: DISABLE_MARKED
// disable ( 45 ) ;
7052: LD_INT 45
7054: DISABLE_MARKED
// disable ( 400 ) ;
7055: LD_INT 400
7057: DISABLE_MARKED
// disable ( 401 ) ;
7058: LD_INT 401
7060: DISABLE_MARKED
// disable ( 98 ) ;
7061: LD_INT 98
7063: DISABLE_MARKED
// disable ( 99 ) ;
7064: LD_INT 99
7066: DISABLE_MARKED
// end ;
7067: LD_VAR 0 1
7071: RET
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7072: LD_VAR 0 1
7076: PPUSH
7077: LD_VAR 0 2
7081: PPUSH
7082: LD_VAR 0 3
7086: PPUSH
7087: LD_OWVAR 2
7091: PPUSH
7092: CALL 7920 0 4
7096: PPOPN 3
7098: END
// export function Init_Win_Condition ; begin
7099: LD_INT 0
7101: PPUSH
// if Team_Game then
7102: LD_EXP 41
7106: IFFALSE 7113
// enable ( 98 ) else
7108: LD_INT 98
7110: ENABLE_MARKED
7111: GO 7116
// enable ( 99 ) ;
7113: LD_INT 99
7115: ENABLE_MARKED
// end ;
7116: LD_VAR 0 1
7120: RET
// every 100 trigger CanWinLoose marked 400 do
7121: CALL 6008 0 0
7125: IFFALSE 7134
7127: GO 7129
7129: DISABLE
// YouLostInMultiplayer ;
7130: CALL_OW 107
7134: END
// every 100 trigger CanWinLoose marked 401 do
7135: CALL 6008 0 0
7139: IFFALSE 7148
7141: GO 7143
7143: DISABLE
// YouWinInMultiplayer ;
7144: CALL_OW 106
7148: END
// every 0 0$2 marked 98 do var win , i ;
7149: GO 7151
7151: DISABLE
7152: LD_INT 0
7154: PPUSH
7155: PPUSH
// begin if your_side then
7156: LD_OWVAR 2
7160: IFFALSE 7366
// if not FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
7162: LD_INT 22
7164: PUSH
7165: LD_OWVAR 2
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 2
7176: PUSH
7177: LD_INT 21
7179: PUSH
7180: LD_INT 1
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 30
7189: PUSH
7190: LD_INT 0
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 30
7199: PUSH
7200: LD_INT 1
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PPUSH
7217: CALL_OW 69
7221: NOT
7222: IFFALSE 7238
// begin wait ( 0 0$3 ) ;
7224: LD_INT 105
7226: PPUSH
7227: CALL_OW 67
// enable ( 400 ) ;
7231: LD_INT 400
7233: ENABLE_MARKED
// exit ;
7234: GO 7367
// end else
7236: GO 7366
// begin win := true ;
7238: LD_ADDR_VAR 0 1
7242: PUSH
7243: LD_INT 1
7245: ST_TO_ADDR
// for i = 1 to Side_positions do
7246: LD_ADDR_VAR 0 2
7250: PUSH
7251: DOUBLE
7252: LD_INT 1
7254: DEC
7255: ST_TO_ADDR
7256: LD_EXP 36
7260: PUSH
7261: FOR_TO
7262: IFFALSE 7346
// if Side_positions [ i ] and ( i <> your_side ) and MultiplayerSideAlive ( i ) then
7264: LD_EXP 36
7268: PUSH
7269: LD_VAR 0 2
7273: ARRAY
7274: PUSH
7275: LD_VAR 0 2
7279: PUSH
7280: LD_OWVAR 2
7284: NONEQUAL
7285: AND
7286: PUSH
7287: LD_VAR 0 2
7291: PPUSH
7292: CALL_OW 108
7296: AND
7297: IFFALSE 7344
// begin if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7299: LD_EXP 33
7303: PUSH
7304: LD_VAR 0 2
7308: ARRAY
7309: NOT
7310: PUSH
7311: LD_EXP 33
7315: PUSH
7316: LD_VAR 0 2
7320: ARRAY
7321: PUSH
7322: LD_EXP 33
7326: PUSH
7327: LD_OWVAR 2
7331: ARRAY
7332: NONEQUAL
7333: OR
7334: IFFALSE 7344
// win := false ;
7336: LD_ADDR_VAR 0 1
7340: PUSH
7341: LD_INT 0
7343: ST_TO_ADDR
// end ;
7344: GO 7261
7346: POP
7347: POP
// if win then
7348: LD_VAR 0 1
7352: IFFALSE 7366
// begin wait ( 0 0$3 ) ;
7354: LD_INT 105
7356: PPUSH
7357: CALL_OW 67
// enable ( 401 ) ;
7361: LD_INT 401
7363: ENABLE_MARKED
// exit ;
7364: GO 7367
// end ; end ; enable ;
7366: ENABLE
// end ;
7367: PPOPN 2
7369: END
// every 0 0$3 marked 99 do var win , i ;
7370: GO 7372
7372: DISABLE
7373: LD_INT 0
7375: PPUSH
7376: PPUSH
// begin if not FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
7377: LD_INT 22
7379: PUSH
7380: LD_OWVAR 2
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PUSH
7389: LD_INT 2
7391: PUSH
7392: LD_INT 21
7394: PUSH
7395: LD_INT 1
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 30
7404: PUSH
7405: LD_INT 0
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 30
7414: PUSH
7415: LD_INT 1
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 69
7436: NOT
7437: IFFALSE 7453
// begin wait ( 0 0$3 ) ;
7439: LD_INT 105
7441: PPUSH
7442: CALL_OW 67
// enable ( 400 ) ;
7446: LD_INT 400
7448: ENABLE_MARKED
// exit ;
7449: GO 7562
// end else
7451: GO 7561
// begin win := true ;
7453: LD_ADDR_VAR 0 1
7457: PUSH
7458: LD_INT 1
7460: ST_TO_ADDR
// for i = 1 to Side_Positions do
7461: LD_ADDR_VAR 0 2
7465: PUSH
7466: DOUBLE
7467: LD_INT 1
7469: DEC
7470: ST_TO_ADDR
7471: LD_EXP 36
7475: PUSH
7476: FOR_TO
7477: IFFALSE 7541
// if Side_Positions [ i ] and ( i <> your_side ) and MultiplayerSideAlive ( i ) then
7479: LD_EXP 36
7483: PUSH
7484: LD_VAR 0 2
7488: ARRAY
7489: PUSH
7490: LD_VAR 0 2
7494: PUSH
7495: LD_OWVAR 2
7499: NONEQUAL
7500: AND
7501: PUSH
7502: LD_VAR 0 2
7506: PPUSH
7507: CALL_OW 108
7511: AND
7512: IFFALSE 7539
// if not AlliedSides ( i , your_side ) then
7514: LD_VAR 0 2
7518: PPUSH
7519: LD_OWVAR 2
7523: PPUSH
7524: CALL 7565 0 2
7528: NOT
7529: IFFALSE 7539
// win := false ;
7531: LD_ADDR_VAR 0 1
7535: PUSH
7536: LD_INT 0
7538: ST_TO_ADDR
7539: GO 7476
7541: POP
7542: POP
// if win then
7543: LD_VAR 0 1
7547: IFFALSE 7561
// begin wait ( 0 0$3 ) ;
7549: LD_INT 105
7551: PPUSH
7552: CALL_OW 67
// enable ( 401 ) ;
7556: LD_INT 401
7558: ENABLE_MARKED
// exit ;
7559: GO 7562
// end ; end ; enable ;
7561: ENABLE
// end ;
7562: PPOPN 2
7564: END
// function AlliedSides ( i , j ) ; var vysledek ; begin
7565: LD_INT 0
7567: PPUSH
7568: PPUSH
// vysledek := false ;
7569: LD_ADDR_VAR 0 4
7573: PUSH
7574: LD_INT 0
7576: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7577: LD_VAR 0 1
7581: PPUSH
7582: LD_VAR 0 2
7586: PPUSH
7587: CALL_OW 81
7591: PUSH
7592: LD_INT 1
7594: EQUAL
7595: PUSH
7596: LD_VAR 0 2
7600: PPUSH
7601: LD_VAR 0 1
7605: PPUSH
7606: CALL_OW 81
7610: PUSH
7611: LD_INT 1
7613: EQUAL
7614: AND
7615: PUSH
7616: LD_VAR 0 1
7620: PPUSH
7621: CALL_OW 83
7625: AND
7626: PUSH
7627: LD_VAR 0 2
7631: PPUSH
7632: CALL_OW 83
7636: AND
7637: IFFALSE 7647
// vysledek := true ;
7639: LD_ADDR_VAR 0 4
7643: PUSH
7644: LD_INT 1
7646: ST_TO_ADDR
// result := vysledek ;
7647: LD_ADDR_VAR 0 3
7651: PUSH
7652: LD_VAR 0 4
7656: ST_TO_ADDR
// end ; end_of_file
7657: LD_VAR 0 3
7661: RET
// export function DisplayNames ; var i ; begin
7662: LD_INT 0
7664: PPUSH
7665: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
7666: LD_ADDR_VAR 0 2
7670: PUSH
7671: LD_INT 2
7673: PUSH
7674: LD_INT 30
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: LD_INT 30
7686: PUSH
7687: LD_INT 1
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: PPUSH
7699: CALL_OW 69
7703: PUSH
7704: FOR_IN
7705: IFFALSE 7732
// SetBName ( i , @ & GetSide ( i ) ) ;
7707: LD_VAR 0 2
7711: PPUSH
7712: LD_STRING @
7714: PUSH
7715: LD_VAR 0 2
7719: PPUSH
7720: CALL_OW 255
7724: STR
7725: PPUSH
7726: CALL_OW 500
7730: GO 7704
7732: POP
7733: POP
// end ;
7734: LD_VAR 0 1
7738: RET
// every 0 0$2 do
7739: GO 7741
7741: DISABLE
// DisplayNames ;
7742: CALL 7662 0 0
7746: END
// on BuildingComplete ( b ) do DisplayNames ;
7747: CALL 7662 0 0
7751: PPOPN 1
7753: END
// on BuildingStarted ( b , h ) do DisplayNames ;
7754: CALL 7662 0 0
7758: PPOPN 2
7760: END
// on BuildingCaptured ( b , o , e ) do DisplayNames ; end_of_file
7761: CALL 7662 0 0
7765: PPOPN 3
7767: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
7768: LD_INT 0
7770: PPUSH
7771: PPUSH
// AllStrings := [ #gamespeed , game_speed - 4 ] ^ [ #Multi1x1-Time , tick ] ;
7772: LD_ADDR_VAR 0 2
7776: PUSH
7777: LD_STRING #gamespeed
7779: PUSH
7780: LD_OWVAR 65
7784: PUSH
7785: LD_INT 4
7787: MINUS
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: LD_STRING #Multi1x1-Time
7795: PUSH
7796: LD_OWVAR 1
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: ADD
7805: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7806: LD_INT 0
7808: PUSH
7809: LD_EXP 25
7813: PUSH
7814: LD_OWVAR 1
7818: MINUS
7819: LESSEQUAL
7820: IFFALSE 7851
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7822: LD_ADDR_VAR 0 2
7826: PUSH
7827: LD_VAR 0 2
7831: PUSH
7832: LD_STRING #allowedsibbomb
7834: PUSH
7835: LD_EXP 25
7839: PUSH
7840: LD_OWVAR 1
7844: MINUS
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: ADD
7850: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7851: LD_INT 0
7853: PUSH
7854: LD_EXP 52
7858: PUSH
7859: LD_OWVAR 1
7863: MINUS
7864: LESSEQUAL
7865: IFFALSE 7896
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7867: LD_ADDR_VAR 0 2
7871: PUSH
7872: LD_VAR 0 2
7876: PUSH
7877: LD_STRING #builduptime
7879: PUSH
7880: LD_EXP 52
7884: PUSH
7885: LD_OWVAR 1
7889: MINUS
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: ADD
7895: ST_TO_ADDR
// Display_Strings := AllStrings ;
7896: LD_ADDR_OWVAR 47
7900: PUSH
7901: LD_VAR 0 2
7905: ST_TO_ADDR
// end ;
7906: LD_VAR 0 1
7910: RET
// every 0 0$1 do
7911: GO 7913
7913: DISABLE
// begin ShowTimer ;
7914: CALL 7768 0 0
// enable ;
7918: ENABLE
// end ; end_of_file
7919: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7920: LD_INT 0
7922: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7923: LD_VAR 0 1
7927: PPUSH
7928: CALL_OW 255
7932: PUSH
7933: LD_VAR 0 4
7937: EQUAL
7938: IFFALSE 7957
// begin SetAchievement ( ACH_RAD ) ;
7940: LD_STRING ACH_RAD
7942: PPUSH
7943: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7947: LD_STRING ACH_NL
7949: PPUSH
7950: LD_INT 1
7952: PPUSH
7953: CALL_OW 564
// end end ;
7957: LD_VAR 0 5
7961: RET
// export function SA_Win ( side ) ; begin
7962: LD_INT 0
7964: PPUSH
// case side of 1 :
7965: LD_VAR 0 1
7969: PUSH
7970: LD_INT 1
7972: DOUBLE
7973: EQUAL
7974: IFTRUE 7978
7976: GO 7991
7978: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7979: LD_STRING ACH_AH
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: CALL_OW 564
7989: GO 8154
7991: LD_INT 2
7993: DOUBLE
7994: EQUAL
7995: IFTRUE 7999
7997: GO 8012
7999: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8000: LD_STRING ACH_E
8002: PPUSH
8003: LD_INT 1
8005: PPUSH
8006: CALL_OW 564
8010: GO 8154
8012: LD_INT 3
8014: DOUBLE
8015: EQUAL
8016: IFTRUE 8020
8018: GO 8033
8020: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8021: LD_STRING ACH_OOL
8023: PPUSH
8024: LD_INT 1
8026: PPUSH
8027: CALL_OW 564
8031: GO 8154
8033: LD_INT 1
8035: PUSH
8036: LD_INT 2
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: DOUBLE
8043: EQUAL
8044: IFTRUE 8048
8046: GO 8073
8048: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8049: LD_STRING ACH_AH
8051: PPUSH
8052: LD_REAL  5.00000000000000E-0001
8055: PPUSH
8056: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8060: LD_STRING ACH_E
8062: PPUSH
8063: LD_REAL  5.00000000000000E-0001
8066: PPUSH
8067: CALL_OW 564
// end ; [ 2 , 3 ] :
8071: GO 8154
8073: LD_INT 2
8075: PUSH
8076: LD_INT 3
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: DOUBLE
8083: EQUAL
8084: IFTRUE 8088
8086: GO 8113
8088: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8089: LD_STRING ACH_OOL
8091: PPUSH
8092: LD_REAL  5.00000000000000E-0001
8095: PPUSH
8096: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8100: LD_STRING ACH_E
8102: PPUSH
8103: LD_REAL  5.00000000000000E-0001
8106: PPUSH
8107: CALL_OW 564
// end ; [ 3 , 1 ] :
8111: GO 8154
8113: LD_INT 3
8115: PUSH
8116: LD_INT 1
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: DOUBLE
8123: EQUAL
8124: IFTRUE 8128
8126: GO 8153
8128: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8129: LD_STRING ACH_AH
8131: PPUSH
8132: LD_REAL  5.00000000000000E-0001
8135: PPUSH
8136: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8140: LD_STRING ACH_OOL
8142: PPUSH
8143: LD_REAL  5.00000000000000E-0001
8146: PPUSH
8147: CALL_OW 564
// end ; end ;
8151: GO 8154
8153: POP
// end ; end_of_file
8154: LD_VAR 0 2
8158: RET
// export MaxFlags ; export function ShowResources ( FullMapArea , EnableSiberitResurces , Range ) ; var k , k2 , i , d , r , u ; begin
8159: LD_INT 0
8161: PPUSH
8162: PPUSH
8163: PPUSH
8164: PPUSH
8165: PPUSH
8166: PPUSH
8167: PPUSH
// if range = 0 then
8168: LD_VAR 0 3
8172: PUSH
8173: LD_INT 0
8175: EQUAL
8176: IFFALSE 8186
// range = 400 ;
8178: LD_ADDR_VAR 0 3
8182: PUSH
8183: LD_INT 400
8185: ST_TO_ADDR
// r = range ;
8186: LD_ADDR_VAR 0 9
8190: PUSH
8191: LD_VAR 0 3
8195: ST_TO_ADDR
// d = GetListOfResourcesInArea ( FullMapArea ) ;
8196: LD_ADDR_VAR 0 8
8200: PUSH
8201: LD_VAR 0 1
8205: PPUSH
8206: CALL_OW 442
8210: ST_TO_ADDR
// for k = 1 to ( d / 3 ) do
8211: LD_ADDR_VAR 0 5
8215: PUSH
8216: DOUBLE
8217: LD_INT 1
8219: DEC
8220: ST_TO_ADDR
8221: LD_VAR 0 8
8225: PUSH
8226: LD_INT 3
8228: DIVREAL
8229: PUSH
8230: FOR_TO
8231: IFFALSE 8422
// begin k2 = k * 3 ;
8233: LD_ADDR_VAR 0 6
8237: PUSH
8238: LD_VAR 0 5
8242: PUSH
8243: LD_INT 3
8245: MUL
8246: ST_TO_ADDR
// for i = 1 to 8 do
8247: LD_ADDR_VAR 0 7
8251: PUSH
8252: DOUBLE
8253: LD_INT 1
8255: DEC
8256: ST_TO_ADDR
8257: LD_INT 8
8259: PUSH
8260: FOR_TO
8261: IFFALSE 8418
// begin if d [ k2 ] = 1 or ( d [ k2 ] = 2 and EnableSiberitResurces ) then
8263: LD_VAR 0 8
8267: PUSH
8268: LD_VAR 0 6
8272: ARRAY
8273: PUSH
8274: LD_INT 1
8276: EQUAL
8277: PUSH
8278: LD_VAR 0 8
8282: PUSH
8283: LD_VAR 0 6
8287: ARRAY
8288: PUSH
8289: LD_INT 2
8291: EQUAL
8292: PUSH
8293: LD_VAR 0 2
8297: AND
8298: OR
8299: IFFALSE 8416
// begin u = filterAllUnits ( [ [ f_side , i ] , [ f_distxy , d [ k2 - 2 ] , d [ k2 - 1 ] , r ] ] ) ;
8301: LD_ADDR_VAR 0 10
8305: PUSH
8306: LD_INT 22
8308: PUSH
8309: LD_VAR 0 7
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 92
8320: PUSH
8321: LD_VAR 0 8
8325: PUSH
8326: LD_VAR 0 6
8330: PUSH
8331: LD_INT 2
8333: MINUS
8334: ARRAY
8335: PUSH
8336: LD_VAR 0 8
8340: PUSH
8341: LD_VAR 0 6
8345: PUSH
8346: LD_INT 1
8348: MINUS
8349: ARRAY
8350: PUSH
8351: LD_VAR 0 9
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PPUSH
8366: CALL_OW 69
8370: ST_TO_ADDR
// if u then
8371: LD_VAR 0 10
8375: IFFALSE 8416
// SetResourceVisibility ( d [ k2 - 2 ] , d [ k2 - 1 ] , i ) ;
8377: LD_VAR 0 8
8381: PUSH
8382: LD_VAR 0 6
8386: PUSH
8387: LD_INT 2
8389: MINUS
8390: ARRAY
8391: PPUSH
8392: LD_VAR 0 8
8396: PUSH
8397: LD_VAR 0 6
8401: PUSH
8402: LD_INT 1
8404: MINUS
8405: ARRAY
8406: PPUSH
8407: LD_VAR 0 7
8411: PPUSH
8412: CALL_OW 441
// end ; end ;
8416: GO 8260
8418: POP
8419: POP
// end ;
8420: GO 8230
8422: POP
8423: POP
// end ;
8424: LD_VAR 0 4
8428: RET
// export function randomHumanStats ( init_level ) ; var cl , combat , eng , mech , sci , skills , base_skills , attr ; var i , k , base , n , def , speed ; begin
8429: LD_INT 0
8431: PPUSH
8432: PPUSH
8433: PPUSH
8434: PPUSH
8435: PPUSH
8436: PPUSH
8437: PPUSH
8438: PPUSH
8439: PPUSH
8440: PPUSH
8441: PPUSH
8442: PPUSH
8443: PPUSH
8444: PPUSH
8445: PPUSH
// cl = rand ( 1 , 4 ) ;
8446: LD_ADDR_VAR 0 3
8450: PUSH
8451: LD_INT 1
8453: PPUSH
8454: LD_INT 4
8456: PPUSH
8457: CALL_OW 12
8461: ST_TO_ADDR
// base = init_level ;
8462: LD_ADDR_VAR 0 13
8466: PUSH
8467: LD_VAR 0 1
8471: ST_TO_ADDR
// case tick of 0 .. 5 5$00 :
8472: LD_OWVAR 1
8476: PUSH
8477: LD_INT 0
8479: DOUBLE
8480: GREATEREQUAL
8481: IFFALSE 8489
8483: LD_INT 10500
8485: DOUBLE
8486: LESSEQUAL
8487: IFTRUE 8491
8489: GO 8502
8491: POP
// i = 1 ; 5 5$01 .. 9 9$00 :
8492: LD_ADDR_VAR 0 11
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
8500: GO 8761
8502: LD_INT 10535
8504: DOUBLE
8505: GREATEREQUAL
8506: IFFALSE 8514
8508: LD_INT 18900
8510: DOUBLE
8511: LESSEQUAL
8512: IFTRUE 8516
8514: GO 8527
8516: POP
// i = 2 ; 9 9$01 .. 15 15$00 :
8517: LD_ADDR_VAR 0 11
8521: PUSH
8522: LD_INT 2
8524: ST_TO_ADDR
8525: GO 8761
8527: LD_INT 18935
8529: DOUBLE
8530: GREATEREQUAL
8531: IFFALSE 8539
8533: LD_INT 31500
8535: DOUBLE
8536: LESSEQUAL
8537: IFTRUE 8541
8539: GO 8552
8541: POP
// i = 3 ; 15 15$01 .. 22 22$00 :
8542: LD_ADDR_VAR 0 11
8546: PUSH
8547: LD_INT 3
8549: ST_TO_ADDR
8550: GO 8761
8552: LD_INT 31535
8554: DOUBLE
8555: GREATEREQUAL
8556: IFFALSE 8564
8558: LD_INT 46200
8560: DOUBLE
8561: LESSEQUAL
8562: IFTRUE 8566
8564: GO 8577
8566: POP
// i = 4 ; 22 22$01 .. 30 30$00 :
8567: LD_ADDR_VAR 0 11
8571: PUSH
8572: LD_INT 4
8574: ST_TO_ADDR
8575: GO 8761
8577: LD_INT 46235
8579: DOUBLE
8580: GREATEREQUAL
8581: IFFALSE 8589
8583: LD_INT 63000
8585: DOUBLE
8586: LESSEQUAL
8587: IFTRUE 8591
8589: GO 8602
8591: POP
// i = 5 ; 30 30$01 .. 40 40$00 :
8592: LD_ADDR_VAR 0 11
8596: PUSH
8597: LD_INT 5
8599: ST_TO_ADDR
8600: GO 8761
8602: LD_INT 63035
8604: DOUBLE
8605: GREATEREQUAL
8606: IFFALSE 8614
8608: LD_INT 84000
8610: DOUBLE
8611: LESSEQUAL
8612: IFTRUE 8616
8614: GO 8627
8616: POP
// i = 6 ; 40 40$01 .. 52 52$00 :
8617: LD_ADDR_VAR 0 11
8621: PUSH
8622: LD_INT 6
8624: ST_TO_ADDR
8625: GO 8761
8627: LD_INT 84035
8629: DOUBLE
8630: GREATEREQUAL
8631: IFFALSE 8639
8633: LD_INT 109200
8635: DOUBLE
8636: LESSEQUAL
8637: IFTRUE 8641
8639: GO 8652
8641: POP
// i = 7 ; 52 52$01 .. 66 66$00 :
8642: LD_ADDR_VAR 0 11
8646: PUSH
8647: LD_INT 7
8649: ST_TO_ADDR
8650: GO 8761
8652: LD_INT 109235
8654: DOUBLE
8655: GREATEREQUAL
8656: IFFALSE 8664
8658: LD_INT 138600
8660: DOUBLE
8661: LESSEQUAL
8662: IFTRUE 8666
8664: GO 8677
8666: POP
// i = 8 ; 66 66$01 .. 88 88$00 :
8667: LD_ADDR_VAR 0 11
8671: PUSH
8672: LD_INT 8
8674: ST_TO_ADDR
8675: GO 8761
8677: LD_INT 138635
8679: DOUBLE
8680: GREATEREQUAL
8681: IFFALSE 8689
8683: LD_INT 184800
8685: DOUBLE
8686: LESSEQUAL
8687: IFTRUE 8691
8689: GO 8702
8691: POP
// i = 9 ; 88 88$01 .. 100 100$00 :
8692: LD_ADDR_VAR 0 11
8696: PUSH
8697: LD_INT 9
8699: ST_TO_ADDR
8700: GO 8761
8702: LD_INT 184835
8704: DOUBLE
8705: GREATEREQUAL
8706: IFFALSE 8714
8708: LD_INT 210000
8710: DOUBLE
8711: LESSEQUAL
8712: IFTRUE 8716
8714: GO 8727
8716: POP
// i = 10 ; 100 100$01 .. 120 120$00 :
8717: LD_ADDR_VAR 0 11
8721: PUSH
8722: LD_INT 10
8724: ST_TO_ADDR
8725: GO 8761
8727: LD_INT 210035
8729: DOUBLE
8730: GREATEREQUAL
8731: IFFALSE 8739
8733: LD_INT 252000
8735: DOUBLE
8736: LESSEQUAL
8737: IFTRUE 8741
8739: GO 8752
8741: POP
// i = 11 ; else
8742: LD_ADDR_VAR 0 11
8746: PUSH
8747: LD_INT 11
8749: ST_TO_ADDR
8750: GO 8761
8752: POP
// i = 12 ; end ;
8753: LD_ADDR_VAR 0 11
8757: PUSH
8758: LD_INT 12
8760: ST_TO_ADDR
// i = i - base div 2 ;
8761: LD_ADDR_VAR 0 11
8765: PUSH
8766: LD_VAR 0 11
8770: PUSH
8771: LD_VAR 0 13
8775: PUSH
8776: LD_INT 2
8778: DIV
8779: MINUS
8780: ST_TO_ADDR
// if i < 0 then
8781: LD_VAR 0 11
8785: PUSH
8786: LD_INT 0
8788: LESS
8789: IFFALSE 8799
// i = 0 ;
8791: LD_ADDR_VAR 0 11
8795: PUSH
8796: LD_INT 0
8798: ST_TO_ADDR
// if cl = 1 then
8799: LD_VAR 0 3
8803: PUSH
8804: LD_INT 1
8806: EQUAL
8807: IFFALSE 8847
// combat = rand ( base + i - 1 , base + i ) else
8809: LD_ADDR_VAR 0 4
8813: PUSH
8814: LD_VAR 0 13
8818: PUSH
8819: LD_VAR 0 11
8823: PLUS
8824: PUSH
8825: LD_INT 1
8827: MINUS
8828: PPUSH
8829: LD_VAR 0 13
8833: PUSH
8834: LD_VAR 0 11
8838: PLUS
8839: PPUSH
8840: CALL_OW 12
8844: ST_TO_ADDR
8845: GO 8887
// combat = rand ( base + i - 4 , base + i - 1 ) ;
8847: LD_ADDR_VAR 0 4
8851: PUSH
8852: LD_VAR 0 13
8856: PUSH
8857: LD_VAR 0 11
8861: PLUS
8862: PUSH
8863: LD_INT 4
8865: MINUS
8866: PPUSH
8867: LD_VAR 0 13
8871: PUSH
8872: LD_VAR 0 11
8876: PLUS
8877: PUSH
8878: LD_INT 1
8880: MINUS
8881: PPUSH
8882: CALL_OW 12
8886: ST_TO_ADDR
// if cl = 2 then
8887: LD_VAR 0 3
8891: PUSH
8892: LD_INT 2
8894: EQUAL
8895: IFFALSE 8935
// eng = rand ( base + i - 1 , base + i ) else
8897: LD_ADDR_VAR 0 5
8901: PUSH
8902: LD_VAR 0 13
8906: PUSH
8907: LD_VAR 0 11
8911: PLUS
8912: PUSH
8913: LD_INT 1
8915: MINUS
8916: PPUSH
8917: LD_VAR 0 13
8921: PUSH
8922: LD_VAR 0 11
8926: PLUS
8927: PPUSH
8928: CALL_OW 12
8932: ST_TO_ADDR
8933: GO 8975
// eng = rand ( base + i - 4 , base + i - 1 ) ;
8935: LD_ADDR_VAR 0 5
8939: PUSH
8940: LD_VAR 0 13
8944: PUSH
8945: LD_VAR 0 11
8949: PLUS
8950: PUSH
8951: LD_INT 4
8953: MINUS
8954: PPUSH
8955: LD_VAR 0 13
8959: PUSH
8960: LD_VAR 0 11
8964: PLUS
8965: PUSH
8966: LD_INT 1
8968: MINUS
8969: PPUSH
8970: CALL_OW 12
8974: ST_TO_ADDR
// if cl = 3 then
8975: LD_VAR 0 3
8979: PUSH
8980: LD_INT 3
8982: EQUAL
8983: IFFALSE 9023
// mech = rand ( base + i - 1 , base + i ) else
8985: LD_ADDR_VAR 0 6
8989: PUSH
8990: LD_VAR 0 13
8994: PUSH
8995: LD_VAR 0 11
8999: PLUS
9000: PUSH
9001: LD_INT 1
9003: MINUS
9004: PPUSH
9005: LD_VAR 0 13
9009: PUSH
9010: LD_VAR 0 11
9014: PLUS
9015: PPUSH
9016: CALL_OW 12
9020: ST_TO_ADDR
9021: GO 9063
// mech = rand ( base + i - 4 , base + i - 1 ) ;
9023: LD_ADDR_VAR 0 6
9027: PUSH
9028: LD_VAR 0 13
9032: PUSH
9033: LD_VAR 0 11
9037: PLUS
9038: PUSH
9039: LD_INT 4
9041: MINUS
9042: PPUSH
9043: LD_VAR 0 13
9047: PUSH
9048: LD_VAR 0 11
9052: PLUS
9053: PUSH
9054: LD_INT 1
9056: MINUS
9057: PPUSH
9058: CALL_OW 12
9062: ST_TO_ADDR
// if cl = 4 then
9063: LD_VAR 0 3
9067: PUSH
9068: LD_INT 4
9070: EQUAL
9071: IFFALSE 9111
// sci = rand ( base + i - 1 , base + i ) else
9073: LD_ADDR_VAR 0 7
9077: PUSH
9078: LD_VAR 0 13
9082: PUSH
9083: LD_VAR 0 11
9087: PLUS
9088: PUSH
9089: LD_INT 1
9091: MINUS
9092: PPUSH
9093: LD_VAR 0 13
9097: PUSH
9098: LD_VAR 0 11
9102: PLUS
9103: PPUSH
9104: CALL_OW 12
9108: ST_TO_ADDR
9109: GO 9151
// sci = rand ( base + i - 4 , base + i - 1 ) ;
9111: LD_ADDR_VAR 0 7
9115: PUSH
9116: LD_VAR 0 13
9120: PUSH
9121: LD_VAR 0 11
9125: PLUS
9126: PUSH
9127: LD_INT 4
9129: MINUS
9130: PPUSH
9131: LD_VAR 0 13
9135: PUSH
9136: LD_VAR 0 11
9140: PLUS
9141: PUSH
9142: LD_INT 1
9144: MINUS
9145: PPUSH
9146: CALL_OW 12
9150: ST_TO_ADDR
// skills = [ combat , eng , mech , sci ] ;
9151: LD_ADDR_VAR 0 8
9155: PUSH
9156: LD_VAR 0 4
9160: PUSH
9161: LD_VAR 0 5
9165: PUSH
9166: LD_VAR 0 6
9170: PUSH
9171: LD_VAR 0 7
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: ST_TO_ADDR
// for i = 1 to 4 do
9182: LD_ADDR_VAR 0 11
9186: PUSH
9187: DOUBLE
9188: LD_INT 1
9190: DEC
9191: ST_TO_ADDR
9192: LD_INT 4
9194: PUSH
9195: FOR_TO
9196: IFFALSE 9351
// begin if skills [ i ] < 0 then
9198: LD_VAR 0 8
9202: PUSH
9203: LD_VAR 0 11
9207: ARRAY
9208: PUSH
9209: LD_INT 0
9211: LESS
9212: IFFALSE 9237
// skills = replace ( skills , i , 0 ) ;
9214: LD_ADDR_VAR 0 8
9218: PUSH
9219: LD_VAR 0 8
9223: PPUSH
9224: LD_VAR 0 11
9228: PPUSH
9229: LD_INT 0
9231: PPUSH
9232: CALL_OW 1
9236: ST_TO_ADDR
// n = [ 0 , 1 , 0 , 1 , 0 , 2 , 0 , 0 , 1 , 0 ] [ rand ( 1 , 10 ) ] ;
9237: LD_ADDR_VAR 0 14
9241: PUSH
9242: LD_INT 0
9244: PUSH
9245: LD_INT 1
9247: PUSH
9248: LD_INT 0
9250: PUSH
9251: LD_INT 1
9253: PUSH
9254: LD_INT 0
9256: PUSH
9257: LD_INT 2
9259: PUSH
9260: LD_INT 0
9262: PUSH
9263: LD_INT 0
9265: PUSH
9266: LD_INT 1
9268: PUSH
9269: LD_INT 0
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 1
9286: PPUSH
9287: LD_INT 10
9289: PPUSH
9290: CALL_OW 12
9294: ARRAY
9295: ST_TO_ADDR
// if n > skills [ i ] then
9296: LD_VAR 0 14
9300: PUSH
9301: LD_VAR 0 8
9305: PUSH
9306: LD_VAR 0 11
9310: ARRAY
9311: GREATER
9312: IFFALSE 9330
// n = skills [ i ] ;
9314: LD_ADDR_VAR 0 14
9318: PUSH
9319: LD_VAR 0 8
9323: PUSH
9324: LD_VAR 0 11
9328: ARRAY
9329: ST_TO_ADDR
// replace ( base_skills , i , n ) ;
9330: LD_VAR 0 9
9334: PPUSH
9335: LD_VAR 0 11
9339: PPUSH
9340: LD_VAR 0 14
9344: PPUSH
9345: CALL_OW 1
// end ;
9349: GO 9195
9351: POP
9352: POP
// n = rand ( 1 , 100 ) ;
9353: LD_ADDR_VAR 0 14
9357: PUSH
9358: LD_INT 1
9360: PPUSH
9361: LD_INT 100
9363: PPUSH
9364: CALL_OW 12
9368: ST_TO_ADDR
// case n of 1 .. 32 :
9369: LD_VAR 0 14
9373: PUSH
9374: LD_INT 1
9376: DOUBLE
9377: GREATEREQUAL
9378: IFFALSE 9386
9380: LD_INT 32
9382: DOUBLE
9383: LESSEQUAL
9384: IFTRUE 9388
9386: GO 9399
9388: POP
// def = 10 ; 31 .. 54 :
9389: LD_ADDR_VAR 0 15
9393: PUSH
9394: LD_INT 10
9396: ST_TO_ADDR
9397: GO 9500
9399: LD_INT 31
9401: DOUBLE
9402: GREATEREQUAL
9403: IFFALSE 9411
9405: LD_INT 54
9407: DOUBLE
9408: LESSEQUAL
9409: IFTRUE 9413
9411: GO 9424
9413: POP
// def = 9 ; 55 .. 76 :
9414: LD_ADDR_VAR 0 15
9418: PUSH
9419: LD_INT 9
9421: ST_TO_ADDR
9422: GO 9500
9424: LD_INT 55
9426: DOUBLE
9427: GREATEREQUAL
9428: IFFALSE 9436
9430: LD_INT 76
9432: DOUBLE
9433: LESSEQUAL
9434: IFTRUE 9438
9436: GO 9449
9438: POP
// def = 11 ; 77 .. 88 :
9439: LD_ADDR_VAR 0 15
9443: PUSH
9444: LD_INT 11
9446: ST_TO_ADDR
9447: GO 9500
9449: LD_INT 77
9451: DOUBLE
9452: GREATEREQUAL
9453: IFFALSE 9461
9455: LD_INT 88
9457: DOUBLE
9458: LESSEQUAL
9459: IFTRUE 9463
9461: GO 9474
9463: POP
// def = 8 ; 89 .. 100 :
9464: LD_ADDR_VAR 0 15
9468: PUSH
9469: LD_INT 8
9471: ST_TO_ADDR
9472: GO 9500
9474: LD_INT 89
9476: DOUBLE
9477: GREATEREQUAL
9478: IFFALSE 9486
9480: LD_INT 100
9482: DOUBLE
9483: LESSEQUAL
9484: IFTRUE 9488
9486: GO 9499
9488: POP
// def = 12 ; end ;
9489: LD_ADDR_VAR 0 15
9493: PUSH
9494: LD_INT 12
9496: ST_TO_ADDR
9497: GO 9500
9499: POP
// n = rand ( 1 , 100 ) ;
9500: LD_ADDR_VAR 0 14
9504: PUSH
9505: LD_INT 1
9507: PPUSH
9508: LD_INT 100
9510: PPUSH
9511: CALL_OW 12
9515: ST_TO_ADDR
// case n of 1 .. 44 :
9516: LD_VAR 0 14
9520: PUSH
9521: LD_INT 1
9523: DOUBLE
9524: GREATEREQUAL
9525: IFFALSE 9533
9527: LD_INT 44
9529: DOUBLE
9530: LESSEQUAL
9531: IFTRUE 9535
9533: GO 9546
9535: POP
// speed = 10 ; 45 .. 76 :
9536: LD_ADDR_VAR 0 16
9540: PUSH
9541: LD_INT 10
9543: ST_TO_ADDR
9544: GO 9622
9546: LD_INT 45
9548: DOUBLE
9549: GREATEREQUAL
9550: IFFALSE 9558
9552: LD_INT 76
9554: DOUBLE
9555: LESSEQUAL
9556: IFTRUE 9560
9558: GO 9571
9560: POP
// speed = 9 ; 77 .. 94 :
9561: LD_ADDR_VAR 0 16
9565: PUSH
9566: LD_INT 9
9568: ST_TO_ADDR
9569: GO 9622
9571: LD_INT 77
9573: DOUBLE
9574: GREATEREQUAL
9575: IFFALSE 9583
9577: LD_INT 94
9579: DOUBLE
9580: LESSEQUAL
9581: IFTRUE 9585
9583: GO 9596
9585: POP
// speed = 11 ; 95 .. 100 :
9586: LD_ADDR_VAR 0 16
9590: PUSH
9591: LD_INT 11
9593: ST_TO_ADDR
9594: GO 9622
9596: LD_INT 95
9598: DOUBLE
9599: GREATEREQUAL
9600: IFFALSE 9608
9602: LD_INT 100
9604: DOUBLE
9605: LESSEQUAL
9606: IFTRUE 9610
9608: GO 9621
9610: POP
// speed = 12 ; end ;
9611: LD_ADDR_VAR 0 16
9615: PUSH
9616: LD_INT 12
9618: ST_TO_ADDR
9619: GO 9622
9621: POP
// hc_attr = [ def , speed ] ;
9622: LD_ADDR_OWVAR 29
9626: PUSH
9627: LD_VAR 0 15
9631: PUSH
9632: LD_VAR 0 16
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: ST_TO_ADDR
// hc_basic_skills = base_skills ;
9641: LD_ADDR_OWVAR 30
9645: PUSH
9646: LD_VAR 0 9
9650: ST_TO_ADDR
// hc_skills := skills ;
9651: LD_ADDR_OWVAR 31
9655: PUSH
9656: LD_VAR 0 8
9660: ST_TO_ADDR
// hc_class = cl ;
9661: LD_ADDR_OWVAR 28
9665: PUSH
9666: LD_VAR 0 3
9670: ST_TO_ADDR
// end ; end_of_file
9671: LD_VAR 0 2
9675: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9676: LD_INT 0
9678: PPUSH
9679: PPUSH
9680: PPUSH
// for side = 1 to 8 do
9681: LD_ADDR_VAR 0 2
9685: PUSH
9686: DOUBLE
9687: LD_INT 1
9689: DEC
9690: ST_TO_ADDR
9691: LD_INT 8
9693: PUSH
9694: FOR_TO
9695: IFFALSE 9816
// begin for i = 1 to 72 do
9697: LD_ADDR_VAR 0 3
9701: PUSH
9702: DOUBLE
9703: LD_INT 1
9705: DEC
9706: ST_TO_ADDR
9707: LD_INT 72
9709: PUSH
9710: FOR_TO
9711: IFFALSE 9742
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9713: LD_VAR 0 3
9717: PPUSH
9718: LD_VAR 0 2
9722: PPUSH
9723: LD_INT 0
9725: PPUSH
9726: LD_VAR 0 3
9730: PPUSH
9731: CALL_OW 565
9735: PPUSH
9736: CALL_OW 322
9740: GO 9710
9742: POP
9743: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9744: LD_INT 73
9746: PPUSH
9747: LD_VAR 0 2
9751: PPUSH
9752: LD_INT 0
9754: PPUSH
9755: LD_INT 25
9757: PPUSH
9758: CALL_OW 565
9762: PPUSH
9763: CALL_OW 322
// for i = 0 to 40 do
9767: LD_ADDR_VAR 0 3
9771: PUSH
9772: DOUBLE
9773: LD_INT 0
9775: DEC
9776: ST_TO_ADDR
9777: LD_INT 40
9779: PUSH
9780: FOR_TO
9781: IFFALSE 9812
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9783: LD_VAR 0 3
9787: PPUSH
9788: LD_VAR 0 2
9792: PPUSH
9793: LD_INT 1
9795: PPUSH
9796: LD_VAR 0 3
9800: PPUSH
9801: CALL_OW 565
9805: PPUSH
9806: CALL_OW 324
9810: GO 9780
9812: POP
9813: POP
// end ;
9814: GO 9694
9816: POP
9817: POP
// end ;
9818: LD_VAR 0 1
9822: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9823: LD_INT 0
9825: PPUSH
9826: PPUSH
9827: PPUSH
// for side = 1 to 8 do
9828: LD_ADDR_VAR 0 3
9832: PUSH
9833: DOUBLE
9834: LD_INT 1
9836: DEC
9837: ST_TO_ADDR
9838: LD_INT 8
9840: PUSH
9841: FOR_TO
9842: IFFALSE 13838
// begin for i = 1 to 73 do
9844: LD_ADDR_VAR 0 4
9848: PUSH
9849: DOUBLE
9850: LD_INT 1
9852: DEC
9853: ST_TO_ADDR
9854: LD_INT 73
9856: PUSH
9857: FOR_TO
9858: IFFALSE 9879
// SetTech ( i , side , state_disabled ) ;
9860: LD_VAR 0 4
9864: PPUSH
9865: LD_VAR 0 3
9869: PPUSH
9870: LD_INT 0
9872: PPUSH
9873: CALL_OW 322
9877: GO 9857
9879: POP
9880: POP
// for i = 0 to 40 do
9881: LD_ADDR_VAR 0 4
9885: PUSH
9886: DOUBLE
9887: LD_INT 0
9889: DEC
9890: ST_TO_ADDR
9891: LD_INT 40
9893: PUSH
9894: FOR_TO
9895: IFFALSE 9916
// SetRestrict ( i , side , false ) ;
9897: LD_VAR 0 4
9901: PPUSH
9902: LD_VAR 0 3
9906: PPUSH
9907: LD_INT 0
9909: PPUSH
9910: CALL_OW 324
9914: GO 9894
9916: POP
9917: POP
// case level of 1 :
9918: LD_VAR 0 1
9922: PUSH
9923: LD_INT 1
9925: DOUBLE
9926: EQUAL
9927: IFTRUE 9931
9929: GO 10084
9931: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9932: LD_INT 35
9934: PPUSH
9935: LD_VAR 0 3
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9947: LD_INT 45
9949: PPUSH
9950: LD_VAR 0 3
9954: PPUSH
9955: LD_INT 1
9957: PPUSH
9958: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9962: LD_INT 46
9964: PPUSH
9965: LD_VAR 0 3
9969: PPUSH
9970: LD_INT 1
9972: PPUSH
9973: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9977: LD_INT 47
9979: PPUSH
9980: LD_VAR 0 3
9984: PPUSH
9985: LD_INT 1
9987: PPUSH
9988: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9992: LD_INT 0
9994: PPUSH
9995: LD_VAR 0 3
9999: PPUSH
10000: LD_INT 1
10002: PPUSH
10003: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10007: LD_INT 2
10009: PPUSH
10010: LD_VAR 0 3
10014: PPUSH
10015: LD_INT 1
10017: PPUSH
10018: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10022: LD_INT 4
10024: PPUSH
10025: LD_VAR 0 3
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10037: LD_INT 6
10039: PPUSH
10040: LD_VAR 0 3
10044: PPUSH
10045: LD_INT 1
10047: PPUSH
10048: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10052: LD_INT 29
10054: PPUSH
10055: LD_VAR 0 3
10059: PPUSH
10060: LD_INT 1
10062: PPUSH
10063: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10067: LD_INT 31
10069: PPUSH
10070: LD_VAR 0 3
10074: PPUSH
10075: LD_INT 1
10077: PPUSH
10078: CALL_OW 324
// end ; 2 :
10082: GO 13836
10084: LD_INT 2
10086: DOUBLE
10087: EQUAL
10088: IFTRUE 10092
10090: GO 10290
10092: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10093: LD_INT 35
10095: PPUSH
10096: LD_VAR 0 3
10100: PPUSH
10101: LD_INT 1
10103: PPUSH
10104: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10108: LD_INT 45
10110: PPUSH
10111: LD_VAR 0 3
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10123: LD_INT 46
10125: PPUSH
10126: LD_VAR 0 3
10130: PPUSH
10131: LD_INT 1
10133: PPUSH
10134: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10138: LD_INT 47
10140: PPUSH
10141: LD_VAR 0 3
10145: PPUSH
10146: LD_INT 1
10148: PPUSH
10149: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10153: LD_INT 1
10155: PPUSH
10156: LD_VAR 0 3
10160: PPUSH
10161: LD_INT 1
10163: PPUSH
10164: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10168: LD_INT 2
10170: PPUSH
10171: LD_VAR 0 3
10175: PPUSH
10176: LD_INT 1
10178: PPUSH
10179: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10183: LD_INT 11
10185: PPUSH
10186: LD_VAR 0 3
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10198: LD_INT 0
10200: PPUSH
10201: LD_VAR 0 3
10205: PPUSH
10206: LD_INT 1
10208: PPUSH
10209: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10213: LD_INT 2
10215: PPUSH
10216: LD_VAR 0 3
10220: PPUSH
10221: LD_INT 1
10223: PPUSH
10224: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10228: LD_INT 4
10230: PPUSH
10231: LD_VAR 0 3
10235: PPUSH
10236: LD_INT 1
10238: PPUSH
10239: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10243: LD_INT 6
10245: PPUSH
10246: LD_VAR 0 3
10250: PPUSH
10251: LD_INT 1
10253: PPUSH
10254: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10258: LD_INT 29
10260: PPUSH
10261: LD_VAR 0 3
10265: PPUSH
10266: LD_INT 1
10268: PPUSH
10269: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10273: LD_INT 31
10275: PPUSH
10276: LD_VAR 0 3
10280: PPUSH
10281: LD_INT 1
10283: PPUSH
10284: CALL_OW 324
// end ; 3 :
10288: GO 13836
10290: LD_INT 3
10292: DOUBLE
10293: EQUAL
10294: IFTRUE 10298
10296: GO 10751
10298: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10299: LD_INT 35
10301: PPUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: LD_INT 1
10309: PPUSH
10310: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10314: LD_INT 45
10316: PPUSH
10317: LD_VAR 0 3
10321: PPUSH
10322: LD_INT 1
10324: PPUSH
10325: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10329: LD_INT 46
10331: PPUSH
10332: LD_VAR 0 3
10336: PPUSH
10337: LD_INT 1
10339: PPUSH
10340: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10344: LD_INT 47
10346: PPUSH
10347: LD_VAR 0 3
10351: PPUSH
10352: LD_INT 1
10354: PPUSH
10355: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10359: LD_INT 1
10361: PPUSH
10362: LD_VAR 0 3
10366: PPUSH
10367: LD_INT 1
10369: PPUSH
10370: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10374: LD_INT 2
10376: PPUSH
10377: LD_VAR 0 3
10381: PPUSH
10382: LD_INT 1
10384: PPUSH
10385: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10389: LD_INT 11
10391: PPUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 1
10399: PPUSH
10400: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10404: LD_INT 48
10406: PPUSH
10407: LD_VAR 0 3
10411: PPUSH
10412: LD_INT 1
10414: PPUSH
10415: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10419: LD_INT 69
10421: PPUSH
10422: LD_VAR 0 3
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10434: LD_INT 39
10436: PPUSH
10437: LD_VAR 0 3
10441: PPUSH
10442: LD_INT 1
10444: PPUSH
10445: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10449: LD_INT 43
10451: PPUSH
10452: LD_VAR 0 3
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10464: LD_INT 51
10466: PPUSH
10467: LD_VAR 0 3
10471: PPUSH
10472: LD_INT 1
10474: PPUSH
10475: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10479: LD_INT 6
10481: PPUSH
10482: LD_VAR 0 3
10486: PPUSH
10487: LD_INT 1
10489: PPUSH
10490: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10494: LD_INT 0
10496: PPUSH
10497: LD_VAR 0 3
10501: PPUSH
10502: LD_INT 1
10504: PPUSH
10505: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10509: LD_INT 2
10511: PPUSH
10512: LD_VAR 0 3
10516: PPUSH
10517: LD_INT 1
10519: PPUSH
10520: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10524: LD_INT 3
10526: PPUSH
10527: LD_VAR 0 3
10531: PPUSH
10532: LD_INT 1
10534: PPUSH
10535: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10539: LD_INT 4
10541: PPUSH
10542: LD_VAR 0 3
10546: PPUSH
10547: LD_INT 1
10549: PPUSH
10550: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10554: LD_INT 6
10556: PPUSH
10557: LD_VAR 0 3
10561: PPUSH
10562: LD_INT 1
10564: PPUSH
10565: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10569: LD_INT 7
10571: PPUSH
10572: LD_VAR 0 3
10576: PPUSH
10577: LD_INT 1
10579: PPUSH
10580: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10584: LD_INT 8
10586: PPUSH
10587: LD_VAR 0 3
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10599: LD_INT 10
10601: PPUSH
10602: LD_VAR 0 3
10606: PPUSH
10607: LD_INT 1
10609: PPUSH
10610: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10614: LD_INT 15
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: LD_INT 1
10624: PPUSH
10625: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10629: LD_INT 16
10631: PPUSH
10632: LD_VAR 0 3
10636: PPUSH
10637: LD_INT 1
10639: PPUSH
10640: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10644: LD_INT 17
10646: PPUSH
10647: LD_VAR 0 3
10651: PPUSH
10652: LD_INT 1
10654: PPUSH
10655: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10659: LD_INT 20
10661: PPUSH
10662: LD_VAR 0 3
10666: PPUSH
10667: LD_INT 1
10669: PPUSH
10670: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10674: LD_INT 26
10676: PPUSH
10677: LD_VAR 0 3
10681: PPUSH
10682: LD_INT 1
10684: PPUSH
10685: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10689: LD_INT 27
10691: PPUSH
10692: LD_VAR 0 3
10696: PPUSH
10697: LD_INT 1
10699: PPUSH
10700: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10704: LD_INT 29
10706: PPUSH
10707: LD_VAR 0 3
10711: PPUSH
10712: LD_INT 1
10714: PPUSH
10715: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10719: LD_INT 31
10721: PPUSH
10722: LD_VAR 0 3
10726: PPUSH
10727: LD_INT 1
10729: PPUSH
10730: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10734: LD_INT 32
10736: PPUSH
10737: LD_VAR 0 3
10741: PPUSH
10742: LD_INT 1
10744: PPUSH
10745: CALL_OW 324
// end ; 4 :
10749: GO 13836
10751: LD_INT 4
10753: DOUBLE
10754: EQUAL
10755: IFTRUE 10759
10757: GO 11707
10759: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10760: LD_INT 35
10762: PPUSH
10763: LD_VAR 0 3
10767: PPUSH
10768: LD_INT 1
10770: PPUSH
10771: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10775: LD_INT 45
10777: PPUSH
10778: LD_VAR 0 3
10782: PPUSH
10783: LD_INT 1
10785: PPUSH
10786: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10790: LD_INT 46
10792: PPUSH
10793: LD_VAR 0 3
10797: PPUSH
10798: LD_INT 1
10800: PPUSH
10801: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10805: LD_INT 47
10807: PPUSH
10808: LD_VAR 0 3
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10820: LD_INT 1
10822: PPUSH
10823: LD_VAR 0 3
10827: PPUSH
10828: LD_INT 1
10830: PPUSH
10831: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10835: LD_INT 2
10837: PPUSH
10838: LD_VAR 0 3
10842: PPUSH
10843: LD_INT 1
10845: PPUSH
10846: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10850: LD_INT 11
10852: PPUSH
10853: LD_VAR 0 3
10857: PPUSH
10858: LD_INT 1
10860: PPUSH
10861: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10865: LD_INT 20
10867: PPUSH
10868: LD_VAR 0 3
10872: PPUSH
10873: LD_INT 1
10875: PPUSH
10876: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10880: LD_INT 48
10882: PPUSH
10883: LD_VAR 0 3
10887: PPUSH
10888: LD_INT 1
10890: PPUSH
10891: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10895: LD_INT 49
10897: PPUSH
10898: LD_VAR 0 3
10902: PPUSH
10903: LD_INT 1
10905: PPUSH
10906: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10910: LD_INT 69
10912: PPUSH
10913: LD_VAR 0 3
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10925: LD_INT 39
10927: PPUSH
10928: LD_VAR 0 3
10932: PPUSH
10933: LD_INT 1
10935: PPUSH
10936: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10940: LD_INT 34
10942: PPUSH
10943: LD_VAR 0 3
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10955: LD_INT 42
10957: PPUSH
10958: LD_VAR 0 3
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10970: LD_INT 44
10972: PPUSH
10973: LD_VAR 0 3
10977: PPUSH
10978: LD_INT 1
10980: PPUSH
10981: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10985: LD_INT 41
10987: PPUSH
10988: LD_VAR 0 3
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11000: LD_INT 43
11002: PPUSH
11003: LD_VAR 0 3
11007: PPUSH
11008: LD_INT 1
11010: PPUSH
11011: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11015: LD_INT 70
11017: PPUSH
11018: LD_VAR 0 3
11022: PPUSH
11023: LD_INT 1
11025: PPUSH
11026: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11030: LD_INT 51
11032: PPUSH
11033: LD_VAR 0 3
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11045: LD_INT 52
11047: PPUSH
11048: LD_VAR 0 3
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11060: LD_INT 6
11062: PPUSH
11063: LD_VAR 0 3
11067: PPUSH
11068: LD_INT 1
11070: PPUSH
11071: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11075: LD_INT 15
11077: PPUSH
11078: LD_VAR 0 3
11082: PPUSH
11083: LD_INT 1
11085: PPUSH
11086: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11090: LD_INT 7
11092: PPUSH
11093: LD_VAR 0 3
11097: PPUSH
11098: LD_INT 1
11100: PPUSH
11101: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11105: LD_INT 12
11107: PPUSH
11108: LD_VAR 0 3
11112: PPUSH
11113: LD_INT 1
11115: PPUSH
11116: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11120: LD_INT 18
11122: PPUSH
11123: LD_VAR 0 3
11127: PPUSH
11128: LD_INT 1
11130: PPUSH
11131: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11135: LD_INT 60
11137: PPUSH
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11150: LD_INT 9
11152: PPUSH
11153: LD_VAR 0 3
11157: PPUSH
11158: LD_INT 1
11160: PPUSH
11161: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11165: LD_INT 30
11167: PPUSH
11168: LD_VAR 0 3
11172: PPUSH
11173: LD_INT 1
11175: PPUSH
11176: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11180: LD_INT 37
11182: PPUSH
11183: LD_VAR 0 3
11187: PPUSH
11188: LD_INT 1
11190: PPUSH
11191: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11195: LD_INT 5
11197: PPUSH
11198: LD_VAR 0 3
11202: PPUSH
11203: LD_INT 1
11205: PPUSH
11206: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11210: LD_INT 66
11212: PPUSH
11213: LD_VAR 0 3
11217: PPUSH
11218: LD_INT 1
11220: PPUSH
11221: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11225: LD_INT 21
11227: PPUSH
11228: LD_VAR 0 3
11232: PPUSH
11233: LD_INT 1
11235: PPUSH
11236: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11240: LD_INT 22
11242: PPUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: LD_INT 1
11250: PPUSH
11251: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11255: LD_INT 54
11257: PPUSH
11258: LD_VAR 0 3
11262: PPUSH
11263: LD_INT 1
11265: PPUSH
11266: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11270: LD_INT 0
11272: PPUSH
11273: LD_VAR 0 3
11277: PPUSH
11278: LD_INT 1
11280: PPUSH
11281: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11285: LD_INT 1
11287: PPUSH
11288: LD_VAR 0 3
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11300: LD_INT 2
11302: PPUSH
11303: LD_VAR 0 3
11307: PPUSH
11308: LD_INT 1
11310: PPUSH
11311: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11315: LD_INT 3
11317: PPUSH
11318: LD_VAR 0 3
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11330: LD_INT 4
11332: PPUSH
11333: LD_VAR 0 3
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11345: LD_INT 5
11347: PPUSH
11348: LD_VAR 0 3
11352: PPUSH
11353: LD_INT 1
11355: PPUSH
11356: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11360: LD_INT 6
11362: PPUSH
11363: LD_VAR 0 3
11367: PPUSH
11368: LD_INT 1
11370: PPUSH
11371: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11375: LD_INT 7
11377: PPUSH
11378: LD_VAR 0 3
11382: PPUSH
11383: LD_INT 1
11385: PPUSH
11386: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11390: LD_INT 8
11392: PPUSH
11393: LD_VAR 0 3
11397: PPUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11405: LD_INT 10
11407: PPUSH
11408: LD_VAR 0 3
11412: PPUSH
11413: LD_INT 1
11415: PPUSH
11416: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11420: LD_INT 11
11422: PPUSH
11423: LD_VAR 0 3
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11435: LD_INT 12
11437: PPUSH
11438: LD_VAR 0 3
11442: PPUSH
11443: LD_INT 1
11445: PPUSH
11446: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11450: LD_INT 13
11452: PPUSH
11453: LD_VAR 0 3
11457: PPUSH
11458: LD_INT 1
11460: PPUSH
11461: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11465: LD_INT 14
11467: PPUSH
11468: LD_VAR 0 3
11472: PPUSH
11473: LD_INT 1
11475: PPUSH
11476: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11480: LD_INT 15
11482: PPUSH
11483: LD_VAR 0 3
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11495: LD_INT 16
11497: PPUSH
11498: LD_VAR 0 3
11502: PPUSH
11503: LD_INT 1
11505: PPUSH
11506: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11510: LD_INT 17
11512: PPUSH
11513: LD_VAR 0 3
11517: PPUSH
11518: LD_INT 1
11520: PPUSH
11521: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11525: LD_INT 19
11527: PPUSH
11528: LD_VAR 0 3
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11540: LD_INT 20
11542: PPUSH
11543: LD_VAR 0 3
11547: PPUSH
11548: LD_INT 1
11550: PPUSH
11551: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11555: LD_INT 21
11557: PPUSH
11558: LD_VAR 0 3
11562: PPUSH
11563: LD_INT 1
11565: PPUSH
11566: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11570: LD_INT 23
11572: PPUSH
11573: LD_VAR 0 3
11577: PPUSH
11578: LD_INT 1
11580: PPUSH
11581: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11585: LD_INT 26
11587: PPUSH
11588: LD_VAR 0 3
11592: PPUSH
11593: LD_INT 1
11595: PPUSH
11596: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11600: LD_INT 27
11602: PPUSH
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_INT 1
11610: PPUSH
11611: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11615: LD_INT 28
11617: PPUSH
11618: LD_VAR 0 3
11622: PPUSH
11623: LD_INT 1
11625: PPUSH
11626: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11630: LD_INT 29
11632: PPUSH
11633: LD_VAR 0 3
11637: PPUSH
11638: LD_INT 1
11640: PPUSH
11641: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11645: LD_INT 30
11647: PPUSH
11648: LD_VAR 0 3
11652: PPUSH
11653: LD_INT 1
11655: PPUSH
11656: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11660: LD_INT 31
11662: PPUSH
11663: LD_VAR 0 3
11667: PPUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11675: LD_INT 32
11677: PPUSH
11678: LD_VAR 0 3
11682: PPUSH
11683: LD_INT 1
11685: PPUSH
11686: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11690: LD_INT 36
11692: PPUSH
11693: LD_VAR 0 3
11697: PPUSH
11698: LD_INT 1
11700: PPUSH
11701: CALL_OW 324
// end ; 5 :
11705: GO 13836
11707: LD_INT 5
11709: DOUBLE
11710: EQUAL
11711: IFTRUE 11715
11713: GO 12828
11715: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11716: LD_INT 35
11718: PPUSH
11719: LD_VAR 0 3
11723: PPUSH
11724: LD_INT 1
11726: PPUSH
11727: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11731: LD_INT 45
11733: PPUSH
11734: LD_VAR 0 3
11738: PPUSH
11739: LD_INT 1
11741: PPUSH
11742: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11746: LD_INT 46
11748: PPUSH
11749: LD_VAR 0 3
11753: PPUSH
11754: LD_INT 1
11756: PPUSH
11757: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11761: LD_INT 47
11763: PPUSH
11764: LD_VAR 0 3
11768: PPUSH
11769: LD_INT 1
11771: PPUSH
11772: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11776: LD_INT 1
11778: PPUSH
11779: LD_VAR 0 3
11783: PPUSH
11784: LD_INT 1
11786: PPUSH
11787: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11791: LD_INT 2
11793: PPUSH
11794: LD_VAR 0 3
11798: PPUSH
11799: LD_INT 1
11801: PPUSH
11802: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11806: LD_INT 11
11808: PPUSH
11809: LD_VAR 0 3
11813: PPUSH
11814: LD_INT 1
11816: PPUSH
11817: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11821: LD_INT 20
11823: PPUSH
11824: LD_VAR 0 3
11828: PPUSH
11829: LD_INT 1
11831: PPUSH
11832: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11836: LD_INT 48
11838: PPUSH
11839: LD_VAR 0 3
11843: PPUSH
11844: LD_INT 1
11846: PPUSH
11847: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11851: LD_INT 49
11853: PPUSH
11854: LD_VAR 0 3
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11866: LD_INT 69
11868: PPUSH
11869: LD_VAR 0 3
11873: PPUSH
11874: LD_INT 1
11876: PPUSH
11877: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11881: LD_INT 39
11883: PPUSH
11884: LD_VAR 0 3
11888: PPUSH
11889: LD_INT 1
11891: PPUSH
11892: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11896: LD_INT 34
11898: PPUSH
11899: LD_VAR 0 3
11903: PPUSH
11904: LD_INT 1
11906: PPUSH
11907: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11911: LD_INT 42
11913: PPUSH
11914: LD_VAR 0 3
11918: PPUSH
11919: LD_INT 1
11921: PPUSH
11922: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11926: LD_INT 44
11928: PPUSH
11929: LD_VAR 0 3
11933: PPUSH
11934: LD_INT 1
11936: PPUSH
11937: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11941: LD_INT 41
11943: PPUSH
11944: LD_VAR 0 3
11948: PPUSH
11949: LD_INT 1
11951: PPUSH
11952: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11956: LD_INT 40
11958: PPUSH
11959: LD_VAR 0 3
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11971: LD_INT 43
11973: PPUSH
11974: LD_VAR 0 3
11978: PPUSH
11979: LD_INT 1
11981: PPUSH
11982: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11986: LD_INT 70
11988: PPUSH
11989: LD_VAR 0 3
11993: PPUSH
11994: LD_INT 1
11996: PPUSH
11997: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12001: LD_INT 51
12003: PPUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: LD_INT 1
12011: PPUSH
12012: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12016: LD_INT 52
12018: PPUSH
12019: LD_VAR 0 3
12023: PPUSH
12024: LD_INT 1
12026: PPUSH
12027: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12031: LD_INT 6
12033: PPUSH
12034: LD_VAR 0 3
12038: PPUSH
12039: LD_INT 1
12041: PPUSH
12042: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12046: LD_INT 15
12048: PPUSH
12049: LD_VAR 0 3
12053: PPUSH
12054: LD_INT 1
12056: PPUSH
12057: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12061: LD_INT 7
12063: PPUSH
12064: LD_VAR 0 3
12068: PPUSH
12069: LD_INT 1
12071: PPUSH
12072: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12076: LD_INT 12
12078: PPUSH
12079: LD_VAR 0 3
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12091: LD_INT 17
12093: PPUSH
12094: LD_VAR 0 3
12098: PPUSH
12099: LD_INT 1
12101: PPUSH
12102: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12106: LD_INT 18
12108: PPUSH
12109: LD_VAR 0 3
12113: PPUSH
12114: LD_INT 1
12116: PPUSH
12117: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12121: LD_INT 60
12123: PPUSH
12124: LD_VAR 0 3
12128: PPUSH
12129: LD_INT 1
12131: PPUSH
12132: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12136: LD_INT 32
12138: PPUSH
12139: LD_VAR 0 3
12143: PPUSH
12144: LD_INT 1
12146: PPUSH
12147: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12151: LD_INT 9
12153: PPUSH
12154: LD_VAR 0 3
12158: PPUSH
12159: LD_INT 1
12161: PPUSH
12162: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12166: LD_INT 57
12168: PPUSH
12169: LD_VAR 0 3
12173: PPUSH
12174: LD_INT 1
12176: PPUSH
12177: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12181: LD_INT 30
12183: PPUSH
12184: LD_VAR 0 3
12188: PPUSH
12189: LD_INT 1
12191: PPUSH
12192: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12196: LD_INT 37
12198: PPUSH
12199: LD_VAR 0 3
12203: PPUSH
12204: LD_INT 1
12206: PPUSH
12207: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12211: LD_INT 63
12213: PPUSH
12214: LD_VAR 0 3
12218: PPUSH
12219: LD_INT 1
12221: PPUSH
12222: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12226: LD_INT 3
12228: PPUSH
12229: LD_VAR 0 3
12233: PPUSH
12234: LD_INT 1
12236: PPUSH
12237: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12241: LD_INT 4
12243: PPUSH
12244: LD_VAR 0 3
12248: PPUSH
12249: LD_INT 1
12251: PPUSH
12252: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12256: LD_INT 5
12258: PPUSH
12259: LD_VAR 0 3
12263: PPUSH
12264: LD_INT 1
12266: PPUSH
12267: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12271: LD_INT 66
12273: PPUSH
12274: LD_VAR 0 3
12278: PPUSH
12279: LD_INT 1
12281: PPUSH
12282: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12286: LD_INT 21
12288: PPUSH
12289: LD_VAR 0 3
12293: PPUSH
12294: LD_INT 1
12296: PPUSH
12297: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12301: LD_INT 22
12303: PPUSH
12304: LD_VAR 0 3
12308: PPUSH
12309: LD_INT 1
12311: PPUSH
12312: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12316: LD_INT 19
12318: PPUSH
12319: LD_VAR 0 3
12323: PPUSH
12324: LD_INT 1
12326: PPUSH
12327: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12331: LD_INT 54
12333: PPUSH
12334: LD_VAR 0 3
12338: PPUSH
12339: LD_INT 1
12341: PPUSH
12342: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12346: LD_INT 55
12348: PPUSH
12349: LD_VAR 0 3
12353: PPUSH
12354: LD_INT 1
12356: PPUSH
12357: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12361: LD_INT 0
12363: PPUSH
12364: LD_VAR 0 3
12368: PPUSH
12369: LD_INT 1
12371: PPUSH
12372: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12376: LD_INT 1
12378: PPUSH
12379: LD_VAR 0 3
12383: PPUSH
12384: LD_INT 1
12386: PPUSH
12387: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12391: LD_INT 2
12393: PPUSH
12394: LD_VAR 0 3
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12406: LD_INT 3
12408: PPUSH
12409: LD_VAR 0 3
12413: PPUSH
12414: LD_INT 1
12416: PPUSH
12417: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12421: LD_INT 4
12423: PPUSH
12424: LD_VAR 0 3
12428: PPUSH
12429: LD_INT 1
12431: PPUSH
12432: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12436: LD_INT 5
12438: PPUSH
12439: LD_VAR 0 3
12443: PPUSH
12444: LD_INT 1
12446: PPUSH
12447: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12451: LD_INT 6
12453: PPUSH
12454: LD_VAR 0 3
12458: PPUSH
12459: LD_INT 1
12461: PPUSH
12462: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12466: LD_INT 7
12468: PPUSH
12469: LD_VAR 0 3
12473: PPUSH
12474: LD_INT 1
12476: PPUSH
12477: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12481: LD_INT 8
12483: PPUSH
12484: LD_VAR 0 3
12488: PPUSH
12489: LD_INT 1
12491: PPUSH
12492: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12496: LD_INT 10
12498: PPUSH
12499: LD_VAR 0 3
12503: PPUSH
12504: LD_INT 1
12506: PPUSH
12507: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12511: LD_INT 11
12513: PPUSH
12514: LD_VAR 0 3
12518: PPUSH
12519: LD_INT 1
12521: PPUSH
12522: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12526: LD_INT 12
12528: PPUSH
12529: LD_VAR 0 3
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12541: LD_INT 13
12543: PPUSH
12544: LD_VAR 0 3
12548: PPUSH
12549: LD_INT 1
12551: PPUSH
12552: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12556: LD_INT 14
12558: PPUSH
12559: LD_VAR 0 3
12563: PPUSH
12564: LD_INT 1
12566: PPUSH
12567: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12571: LD_INT 15
12573: PPUSH
12574: LD_VAR 0 3
12578: PPUSH
12579: LD_INT 1
12581: PPUSH
12582: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12586: LD_INT 16
12588: PPUSH
12589: LD_VAR 0 3
12593: PPUSH
12594: LD_INT 1
12596: PPUSH
12597: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12601: LD_INT 17
12603: PPUSH
12604: LD_VAR 0 3
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12616: LD_INT 18
12618: PPUSH
12619: LD_VAR 0 3
12623: PPUSH
12624: LD_INT 1
12626: PPUSH
12627: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12631: LD_INT 19
12633: PPUSH
12634: LD_VAR 0 3
12638: PPUSH
12639: LD_INT 1
12641: PPUSH
12642: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12646: LD_INT 20
12648: PPUSH
12649: LD_VAR 0 3
12653: PPUSH
12654: LD_INT 1
12656: PPUSH
12657: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12661: LD_INT 21
12663: PPUSH
12664: LD_VAR 0 3
12668: PPUSH
12669: LD_INT 1
12671: PPUSH
12672: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12676: LD_INT 23
12678: PPUSH
12679: LD_VAR 0 3
12683: PPUSH
12684: LD_INT 1
12686: PPUSH
12687: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12691: LD_INT 26
12693: PPUSH
12694: LD_VAR 0 3
12698: PPUSH
12699: LD_INT 1
12701: PPUSH
12702: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12706: LD_INT 27
12708: PPUSH
12709: LD_VAR 0 3
12713: PPUSH
12714: LD_INT 1
12716: PPUSH
12717: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12721: LD_INT 28
12723: PPUSH
12724: LD_VAR 0 3
12728: PPUSH
12729: LD_INT 1
12731: PPUSH
12732: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12736: LD_INT 29
12738: PPUSH
12739: LD_VAR 0 3
12743: PPUSH
12744: LD_INT 1
12746: PPUSH
12747: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12751: LD_INT 30
12753: PPUSH
12754: LD_VAR 0 3
12758: PPUSH
12759: LD_INT 1
12761: PPUSH
12762: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12766: LD_INT 31
12768: PPUSH
12769: LD_VAR 0 3
12773: PPUSH
12774: LD_INT 1
12776: PPUSH
12777: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12781: LD_INT 32
12783: PPUSH
12784: LD_VAR 0 3
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12796: LD_INT 33
12798: PPUSH
12799: LD_VAR 0 3
12803: PPUSH
12804: LD_INT 1
12806: PPUSH
12807: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12811: LD_INT 36
12813: PPUSH
12814: LD_VAR 0 3
12818: PPUSH
12819: LD_INT 1
12821: PPUSH
12822: CALL_OW 324
// end ; 6 :
12826: GO 13836
12828: LD_INT 6
12830: DOUBLE
12831: EQUAL
12832: IFTRUE 12836
12834: GO 13761
12836: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12837: LD_INT 35
12839: PPUSH
12840: LD_VAR 0 3
12844: PPUSH
12845: LD_INT 1
12847: PPUSH
12848: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12852: LD_INT 45
12854: PPUSH
12855: LD_VAR 0 3
12859: PPUSH
12860: LD_INT 1
12862: PPUSH
12863: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12867: LD_INT 46
12869: PPUSH
12870: LD_VAR 0 3
12874: PPUSH
12875: LD_INT 1
12877: PPUSH
12878: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12882: LD_INT 47
12884: PPUSH
12885: LD_VAR 0 3
12889: PPUSH
12890: LD_INT 1
12892: PPUSH
12893: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12897: LD_INT 1
12899: PPUSH
12900: LD_VAR 0 3
12904: PPUSH
12905: LD_INT 1
12907: PPUSH
12908: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12912: LD_INT 2
12914: PPUSH
12915: LD_VAR 0 3
12919: PPUSH
12920: LD_INT 1
12922: PPUSH
12923: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12927: LD_INT 11
12929: PPUSH
12930: LD_VAR 0 3
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12942: LD_INT 20
12944: PPUSH
12945: LD_VAR 0 3
12949: PPUSH
12950: LD_INT 1
12952: PPUSH
12953: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12957: LD_INT 48
12959: PPUSH
12960: LD_VAR 0 3
12964: PPUSH
12965: LD_INT 1
12967: PPUSH
12968: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12972: LD_INT 49
12974: PPUSH
12975: LD_VAR 0 3
12979: PPUSH
12980: LD_INT 1
12982: PPUSH
12983: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12987: LD_INT 50
12989: PPUSH
12990: LD_VAR 0 3
12994: PPUSH
12995: LD_INT 1
12997: PPUSH
12998: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13002: LD_INT 69
13004: PPUSH
13005: LD_VAR 0 3
13009: PPUSH
13010: LD_INT 1
13012: PPUSH
13013: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13017: LD_INT 39
13019: PPUSH
13020: LD_VAR 0 3
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13032: LD_INT 34
13034: PPUSH
13035: LD_VAR 0 3
13039: PPUSH
13040: LD_INT 1
13042: PPUSH
13043: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13047: LD_INT 42
13049: PPUSH
13050: LD_VAR 0 3
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13062: LD_INT 44
13064: PPUSH
13065: LD_VAR 0 3
13069: PPUSH
13070: LD_INT 1
13072: PPUSH
13073: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13077: LD_INT 41
13079: PPUSH
13080: LD_VAR 0 3
13084: PPUSH
13085: LD_INT 1
13087: PPUSH
13088: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13092: LD_INT 13
13094: PPUSH
13095: LD_VAR 0 3
13099: PPUSH
13100: LD_INT 1
13102: PPUSH
13103: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13107: LD_INT 40
13109: PPUSH
13110: LD_VAR 0 3
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13122: LD_INT 43
13124: PPUSH
13125: LD_VAR 0 3
13129: PPUSH
13130: LD_INT 1
13132: PPUSH
13133: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13137: LD_INT 70
13139: PPUSH
13140: LD_VAR 0 3
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13152: LD_INT 23
13154: PPUSH
13155: LD_VAR 0 3
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13167: LD_INT 51
13169: PPUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13182: LD_INT 52
13184: PPUSH
13185: LD_VAR 0 3
13189: PPUSH
13190: LD_INT 1
13192: PPUSH
13193: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13197: LD_INT 6
13199: PPUSH
13200: LD_VAR 0 3
13204: PPUSH
13205: LD_INT 1
13207: PPUSH
13208: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13212: LD_INT 15
13214: PPUSH
13215: LD_VAR 0 3
13219: PPUSH
13220: LD_INT 1
13222: PPUSH
13223: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13227: LD_INT 7
13229: PPUSH
13230: LD_VAR 0 3
13234: PPUSH
13235: LD_INT 1
13237: PPUSH
13238: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13242: LD_INT 12
13244: PPUSH
13245: LD_VAR 0 3
13249: PPUSH
13250: LD_INT 1
13252: PPUSH
13253: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13257: LD_INT 10
13259: PPUSH
13260: LD_VAR 0 3
13264: PPUSH
13265: LD_INT 1
13267: PPUSH
13268: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13272: LD_INT 17
13274: PPUSH
13275: LD_VAR 0 3
13279: PPUSH
13280: LD_INT 1
13282: PPUSH
13283: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13287: LD_INT 18
13289: PPUSH
13290: LD_VAR 0 3
13294: PPUSH
13295: LD_INT 1
13297: PPUSH
13298: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13302: LD_INT 60
13304: PPUSH
13305: LD_VAR 0 3
13309: PPUSH
13310: LD_INT 1
13312: PPUSH
13313: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13317: LD_INT 61
13319: PPUSH
13320: LD_VAR 0 3
13324: PPUSH
13325: LD_INT 1
13327: PPUSH
13328: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13332: LD_INT 32
13334: PPUSH
13335: LD_VAR 0 3
13339: PPUSH
13340: LD_INT 1
13342: PPUSH
13343: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13347: LD_INT 27
13349: PPUSH
13350: LD_VAR 0 3
13354: PPUSH
13355: LD_INT 1
13357: PPUSH
13358: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13362: LD_INT 36
13364: PPUSH
13365: LD_VAR 0 3
13369: PPUSH
13370: LD_INT 1
13372: PPUSH
13373: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13377: LD_INT 33
13379: PPUSH
13380: LD_VAR 0 3
13384: PPUSH
13385: LD_INT 1
13387: PPUSH
13388: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13392: LD_INT 9
13394: PPUSH
13395: LD_VAR 0 3
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13407: LD_INT 38
13409: PPUSH
13410: LD_VAR 0 3
13414: PPUSH
13415: LD_INT 1
13417: PPUSH
13418: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13422: LD_INT 57
13424: PPUSH
13425: LD_VAR 0 3
13429: PPUSH
13430: LD_INT 1
13432: PPUSH
13433: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13437: LD_INT 58
13439: PPUSH
13440: LD_VAR 0 3
13444: PPUSH
13445: LD_INT 1
13447: PPUSH
13448: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13452: LD_INT 28
13454: PPUSH
13455: LD_VAR 0 3
13459: PPUSH
13460: LD_INT 1
13462: PPUSH
13463: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13467: LD_INT 29
13469: PPUSH
13470: LD_VAR 0 3
13474: PPUSH
13475: LD_INT 1
13477: PPUSH
13478: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13482: LD_INT 30
13484: PPUSH
13485: LD_VAR 0 3
13489: PPUSH
13490: LD_INT 1
13492: PPUSH
13493: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13497: LD_INT 37
13499: PPUSH
13500: LD_VAR 0 3
13504: PPUSH
13505: LD_INT 1
13507: PPUSH
13508: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13512: LD_INT 63
13514: PPUSH
13515: LD_VAR 0 3
13519: PPUSH
13520: LD_INT 1
13522: PPUSH
13523: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13527: LD_INT 64
13529: PPUSH
13530: LD_VAR 0 3
13534: PPUSH
13535: LD_INT 1
13537: PPUSH
13538: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13542: LD_INT 3
13544: PPUSH
13545: LD_VAR 0 3
13549: PPUSH
13550: LD_INT 1
13552: PPUSH
13553: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13557: LD_INT 4
13559: PPUSH
13560: LD_VAR 0 3
13564: PPUSH
13565: LD_INT 1
13567: PPUSH
13568: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13572: LD_INT 5
13574: PPUSH
13575: LD_VAR 0 3
13579: PPUSH
13580: LD_INT 1
13582: PPUSH
13583: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13587: LD_INT 8
13589: PPUSH
13590: LD_VAR 0 3
13594: PPUSH
13595: LD_INT 1
13597: PPUSH
13598: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13602: LD_INT 66
13604: PPUSH
13605: LD_VAR 0 3
13609: PPUSH
13610: LD_INT 1
13612: PPUSH
13613: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13617: LD_INT 67
13619: PPUSH
13620: LD_VAR 0 3
13624: PPUSH
13625: LD_INT 1
13627: PPUSH
13628: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13632: LD_INT 21
13634: PPUSH
13635: LD_VAR 0 3
13639: PPUSH
13640: LD_INT 1
13642: PPUSH
13643: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13647: LD_INT 22
13649: PPUSH
13650: LD_VAR 0 3
13654: PPUSH
13655: LD_INT 1
13657: PPUSH
13658: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13662: LD_INT 19
13664: PPUSH
13665: LD_VAR 0 3
13669: PPUSH
13670: LD_INT 1
13672: PPUSH
13673: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13677: LD_INT 26
13679: PPUSH
13680: LD_VAR 0 3
13684: PPUSH
13685: LD_INT 1
13687: PPUSH
13688: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13692: LD_INT 54
13694: PPUSH
13695: LD_VAR 0 3
13699: PPUSH
13700: LD_INT 1
13702: PPUSH
13703: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13707: LD_INT 55
13709: PPUSH
13710: LD_VAR 0 3
13714: PPUSH
13715: LD_INT 1
13717: PPUSH
13718: CALL_OW 322
// for i = 0 to 39 do
13722: LD_ADDR_VAR 0 4
13726: PUSH
13727: DOUBLE
13728: LD_INT 0
13730: DEC
13731: ST_TO_ADDR
13732: LD_INT 39
13734: PUSH
13735: FOR_TO
13736: IFFALSE 13757
// SetRestrict ( i , side , true ) ;
13738: LD_VAR 0 4
13742: PPUSH
13743: LD_VAR 0 3
13747: PPUSH
13748: LD_INT 1
13750: PPUSH
13751: CALL_OW 324
13755: GO 13735
13757: POP
13758: POP
// end ; else
13759: GO 13836
13761: POP
// begin for i = 1 to 73 do
13762: LD_ADDR_VAR 0 4
13766: PUSH
13767: DOUBLE
13768: LD_INT 1
13770: DEC
13771: ST_TO_ADDR
13772: LD_INT 73
13774: PUSH
13775: FOR_TO
13776: IFFALSE 13797
// SetTech ( i , side , state_enabled ) ;
13778: LD_VAR 0 4
13782: PPUSH
13783: LD_VAR 0 3
13787: PPUSH
13788: LD_INT 1
13790: PPUSH
13791: CALL_OW 322
13795: GO 13775
13797: POP
13798: POP
// for i = 0 to 39 do
13799: LD_ADDR_VAR 0 4
13803: PUSH
13804: DOUBLE
13805: LD_INT 0
13807: DEC
13808: ST_TO_ADDR
13809: LD_INT 39
13811: PUSH
13812: FOR_TO
13813: IFFALSE 13834
// SetRestrict ( i , side , true ) ;
13815: LD_VAR 0 4
13819: PPUSH
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_INT 1
13827: PPUSH
13828: CALL_OW 324
13832: GO 13812
13834: POP
13835: POP
// end ; end ; end ;
13836: GO 9841
13838: POP
13839: POP
// end ; end_of_file
13840: LD_VAR 0 2
13844: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13845: LD_INT 0
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
// for i := 1 to 8 do
13856: LD_ADDR_VAR 0 2
13860: PUSH
13861: DOUBLE
13862: LD_INT 1
13864: DEC
13865: ST_TO_ADDR
13866: LD_INT 8
13868: PUSH
13869: FOR_TO
13870: IFFALSE 14254
// begin if Side_Positions [ i ] then
13872: LD_EXP 36
13876: PUSH
13877: LD_VAR 0 2
13881: ARRAY
13882: IFFALSE 14252
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13884: LD_ADDR_VAR 0 7
13888: PUSH
13889: LD_INT 22
13891: PUSH
13892: LD_VAR 0 2
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 21
13903: PUSH
13904: LD_INT 1
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PPUSH
13915: CALL_OW 69
13919: PUSH
13920: LD_INT 0
13922: PLUS
13923: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13924: LD_ADDR_VAR 0 9
13928: PUSH
13929: LD_INT 22
13931: PUSH
13932: LD_VAR 0 2
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 2
13943: PUSH
13944: LD_INT 30
13946: PUSH
13947: LD_INT 0
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 30
13956: PUSH
13957: LD_INT 1
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PPUSH
13973: CALL_OW 69
13977: ST_TO_ADDR
// crates := 0 ;
13978: LD_ADDR_VAR 0 4
13982: PUSH
13983: LD_INT 0
13985: ST_TO_ADDR
// oil := 0 ;
13986: LD_ADDR_VAR 0 5
13990: PUSH
13991: LD_INT 0
13993: ST_TO_ADDR
// sib := 0 ;
13994: LD_ADDR_VAR 0 6
13998: PUSH
13999: LD_INT 0
14001: ST_TO_ADDR
// if bases then
14002: LD_VAR 0 9
14006: IFFALSE 14112
// begin for j in bases do
14008: LD_ADDR_VAR 0 3
14012: PUSH
14013: LD_VAR 0 9
14017: PUSH
14018: FOR_IN
14019: IFFALSE 14110
// begin base := GetBase ( j ) ;
14021: LD_ADDR_VAR 0 8
14025: PUSH
14026: LD_VAR 0 3
14030: PPUSH
14031: CALL_OW 274
14035: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14036: LD_ADDR_VAR 0 4
14040: PUSH
14041: LD_VAR 0 4
14045: PUSH
14046: LD_VAR 0 8
14050: PPUSH
14051: LD_INT 1
14053: PPUSH
14054: CALL_OW 275
14058: PLUS
14059: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14060: LD_ADDR_VAR 0 5
14064: PUSH
14065: LD_VAR 0 5
14069: PUSH
14070: LD_VAR 0 8
14074: PPUSH
14075: LD_INT 2
14077: PPUSH
14078: CALL_OW 275
14082: PLUS
14083: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14084: LD_ADDR_VAR 0 6
14088: PUSH
14089: LD_VAR 0 6
14093: PUSH
14094: LD_VAR 0 8
14098: PPUSH
14099: LD_INT 3
14101: PPUSH
14102: CALL_OW 275
14106: PLUS
14107: ST_TO_ADDR
// end ;
14108: GO 14018
14110: POP
14111: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14112: LD_STRING setSpecText(
14114: PUSH
14115: LD_VAR 0 2
14119: STR
14120: PUSH
14121: LD_STRING ,
14123: STR
14124: PUSH
14125: LD_INT 2
14127: STR
14128: PUSH
14129: LD_STRING ,
14131: STR
14132: PUSH
14133: LD_VAR 0 4
14137: STR
14138: PUSH
14139: LD_STRING )
14141: STR
14142: PPUSH
14143: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14147: LD_STRING setSpecText(
14149: PUSH
14150: LD_VAR 0 2
14154: STR
14155: PUSH
14156: LD_STRING ,
14158: STR
14159: PUSH
14160: LD_INT 3
14162: STR
14163: PUSH
14164: LD_STRING ,
14166: STR
14167: PUSH
14168: LD_VAR 0 5
14172: STR
14173: PUSH
14174: LD_STRING )
14176: STR
14177: PPUSH
14178: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14182: LD_STRING setSpecText(
14184: PUSH
14185: LD_VAR 0 2
14189: STR
14190: PUSH
14191: LD_STRING ,
14193: STR
14194: PUSH
14195: LD_INT 4
14197: STR
14198: PUSH
14199: LD_STRING ,
14201: STR
14202: PUSH
14203: LD_VAR 0 6
14207: STR
14208: PUSH
14209: LD_STRING )
14211: STR
14212: PPUSH
14213: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14217: LD_STRING setSpecText(
14219: PUSH
14220: LD_VAR 0 2
14224: STR
14225: PUSH
14226: LD_STRING ,
14228: STR
14229: PUSH
14230: LD_INT 5
14232: STR
14233: PUSH
14234: LD_STRING ,
14236: STR
14237: PUSH
14238: LD_VAR 0 7
14242: STR
14243: PUSH
14244: LD_STRING )
14246: STR
14247: PPUSH
14248: CALL_OW 559
// end ; end ;
14252: GO 13869
14254: POP
14255: POP
// end ; end_of_file
14256: LD_VAR 0 1
14260: RET
// var respawn , inqueue ; export function init_respawning ; begin
14261: LD_INT 0
14263: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14264: LD_ADDR_LOC 11
14268: PUSH
14269: LD_INT 1
14271: PPUSH
14272: LD_INT 8
14274: PPUSH
14275: CALL_OW 12
14279: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14280: LD_ADDR_LOC 12
14284: PUSH
14285: LD_INT 0
14287: PUSH
14288: LD_INT 0
14290: PUSH
14291: LD_INT 0
14293: PUSH
14294: LD_INT 0
14296: PUSH
14297: LD_INT 0
14299: PUSH
14300: LD_INT 0
14302: PUSH
14303: LD_INT 0
14305: PUSH
14306: LD_INT 0
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: ST_TO_ADDR
// end ;
14319: LD_VAR 0 1
14323: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14324: GO 14326
14326: DISABLE
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
14331: PPUSH
// begin if respawning_time_max = 0 then
14332: LD_EXP 24
14336: PUSH
14337: LD_INT 0
14339: EQUAL
14340: IFFALSE 14344
// exit ;
14342: GO 14752
// if respawn = 8 then
14344: LD_LOC 11
14348: PUSH
14349: LD_INT 8
14351: EQUAL
14352: IFFALSE 14364
// respawn := 1 else
14354: LD_ADDR_LOC 11
14358: PUSH
14359: LD_INT 1
14361: ST_TO_ADDR
14362: GO 14378
// respawn := respawn + 1 ;
14364: LD_ADDR_LOC 11
14368: PUSH
14369: LD_LOC 11
14373: PUSH
14374: LD_INT 1
14376: PLUS
14377: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14378: LD_EXP 36
14382: PUSH
14383: LD_LOC 11
14387: ARRAY
14388: PUSH
14389: LD_LOC 12
14393: PUSH
14394: LD_LOC 11
14398: ARRAY
14399: NOT
14400: AND
14401: IFFALSE 14751
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14403: LD_ADDR_VAR 0 1
14407: PUSH
14408: LD_INT 21
14410: PUSH
14411: LD_INT 1
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 22
14420: PUSH
14421: LD_LOC 11
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 3
14432: PUSH
14433: LD_INT 23
14435: PUSH
14436: LD_INT 0
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: PPUSH
14449: CALL_OW 69
14453: ST_TO_ADDR
// if n < number_of_people then
14454: LD_VAR 0 1
14458: PUSH
14459: LD_EXP 15
14463: LESS
14464: IFFALSE 14748
// begin aktresp := respawn ;
14466: LD_ADDR_VAR 0 3
14470: PUSH
14471: LD_LOC 11
14475: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14476: LD_ADDR_LOC 12
14480: PUSH
14481: LD_LOC 12
14485: PPUSH
14486: LD_VAR 0 3
14490: PPUSH
14491: LD_INT 1
14493: PPUSH
14494: CALL_OW 1
14498: ST_TO_ADDR
// enable ;
14499: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14500: LD_EXP 23
14504: PPUSH
14505: LD_EXP 24
14509: PPUSH
14510: CALL_OW 12
14514: PPUSH
14515: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14519: LD_ADDR_LOC 12
14523: PUSH
14524: LD_LOC 12
14528: PPUSH
14529: LD_VAR 0 3
14533: PPUSH
14534: LD_INT 0
14536: PPUSH
14537: CALL_OW 1
14541: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14542: LD_ADDR_VAR 0 2
14546: PUSH
14547: LD_INT 21
14549: PUSH
14550: LD_INT 3
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 2
14559: PUSH
14560: LD_INT 30
14562: PUSH
14563: LD_INT 0
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 30
14572: PUSH
14573: LD_INT 1
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 50
14587: PUSH
14588: EMPTY
14589: LIST
14590: PUSH
14591: LD_INT 22
14593: PUSH
14594: LD_VAR 0 3
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: PPUSH
14609: CALL_OW 69
14613: ST_TO_ADDR
// if dep = 0 then
14614: LD_VAR 0 2
14618: PUSH
14619: LD_INT 0
14621: EQUAL
14622: IFFALSE 14626
// exit ;
14624: GO 14752
// hc_name :=  ;
14626: LD_ADDR_OWVAR 26
14630: PUSH
14631: LD_STRING 
14633: ST_TO_ADDR
// hc_importance := 0 ;
14634: LD_ADDR_OWVAR 32
14638: PUSH
14639: LD_INT 0
14641: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14642: LD_INT 0
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: LD_EXP 16
14652: PUSH
14653: LD_INT 2
14655: DIV
14656: PPUSH
14657: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14661: LD_ADDR_OWVAR 21
14665: PUSH
14666: LD_EXP 37
14670: PUSH
14671: LD_VAR 0 3
14675: ARRAY
14676: ST_TO_ADDR
// uc_side := aktresp ;
14677: LD_ADDR_OWVAR 20
14681: PUSH
14682: LD_VAR 0 3
14686: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14687: LD_ADDR_VAR 0 2
14691: PUSH
14692: LD_VAR 0 2
14696: PUSH
14697: LD_INT 1
14699: PPUSH
14700: LD_VAR 0 2
14704: PPUSH
14705: CALL_OW 12
14709: ARRAY
14710: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14711: CALL_OW 44
14715: PPUSH
14716: LD_VAR 0 2
14720: PPUSH
14721: CALL_OW 250
14725: PPUSH
14726: LD_VAR 0 2
14730: PPUSH
14731: CALL_OW 251
14735: PPUSH
14736: LD_INT 7
14738: PPUSH
14739: LD_INT 1
14741: PPUSH
14742: CALL_OW 50
// end else
14746: GO 14749
// enable ;
14748: ENABLE
// end else
14749: GO 14752
// enable ;
14751: ENABLE
// end ; end_of_file
14752: PPOPN 3
14754: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14755: LD_INT 0
14757: PPUSH
14758: PPUSH
14759: PPUSH
// BuildUpTime_Delay = 0 ;
14760: LD_ADDR_EXP 52
14764: PUSH
14765: LD_INT 0
14767: ST_TO_ADDR
// if not def_builduptime then
14768: LD_EXP 12
14772: NOT
14773: IFFALSE 14777
// exit ;
14775: GO 14960
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14777: LD_ADDR_EXP 52
14781: PUSH
14782: LD_INT 8400
14784: PUSH
14785: LD_INT 2100
14787: PUSH
14788: LD_EXP 12
14792: MUL
14793: PLUS
14794: ST_TO_ADDR
// BuildUpTimeActive := true ;
14795: LD_ADDR_EXP 51
14799: PUSH
14800: LD_INT 1
14802: ST_TO_ADDR
// for i := 1 to 8 do
14803: LD_ADDR_VAR 0 2
14807: PUSH
14808: DOUBLE
14809: LD_INT 1
14811: DEC
14812: ST_TO_ADDR
14813: LD_INT 8
14815: PUSH
14816: FOR_TO
14817: IFFALSE 14958
// if Side_Positions [ i ] then
14819: LD_EXP 36
14823: PUSH
14824: LD_VAR 0 2
14828: ARRAY
14829: IFFALSE 14956
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14831: LD_EXP 50
14835: PUSH
14836: LD_EXP 36
14840: PUSH
14841: LD_VAR 0 2
14845: ARRAY
14846: ARRAY
14847: PPUSH
14848: LD_INT 5
14850: PPUSH
14851: CALL_OW 424
// for j := 1 to 8 do
14855: LD_ADDR_VAR 0 3
14859: PUSH
14860: DOUBLE
14861: LD_INT 1
14863: DEC
14864: ST_TO_ADDR
14865: LD_INT 8
14867: PUSH
14868: FOR_TO
14869: IFFALSE 14954
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14871: LD_EXP 36
14875: PUSH
14876: LD_VAR 0 3
14880: ARRAY
14881: PUSH
14882: LD_EXP 33
14886: PUSH
14887: LD_VAR 0 2
14891: ARRAY
14892: PUSH
14893: LD_EXP 33
14897: PUSH
14898: LD_VAR 0 3
14902: ARRAY
14903: NONEQUAL
14904: PUSH
14905: LD_EXP 41
14909: NOT
14910: PUSH
14911: LD_VAR 0 2
14915: PUSH
14916: LD_VAR 0 3
14920: NONEQUAL
14921: AND
14922: OR
14923: AND
14924: IFFALSE 14952
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14926: LD_VAR 0 3
14930: PPUSH
14931: LD_EXP 50
14935: PUSH
14936: LD_EXP 36
14940: PUSH
14941: LD_VAR 0 2
14945: ARRAY
14946: ARRAY
14947: PPUSH
14948: CALL_OW 333
14952: GO 14868
14954: POP
14955: POP
// end ;
14956: GO 14816
14958: POP
14959: POP
// end ;
14960: LD_VAR 0 1
14964: RET
// export function EndBuildUp ; var i , j ; begin
14965: LD_INT 0
14967: PPUSH
14968: PPUSH
14969: PPUSH
// BuildUpTimeActive := false ;
14970: LD_ADDR_EXP 51
14974: PUSH
14975: LD_INT 0
14977: ST_TO_ADDR
// for i := 1 to 8 do
14978: LD_ADDR_VAR 0 2
14982: PUSH
14983: DOUBLE
14984: LD_INT 1
14986: DEC
14987: ST_TO_ADDR
14988: LD_INT 8
14990: PUSH
14991: FOR_TO
14992: IFFALSE 15133
// if Side_Positions [ i ] then
14994: LD_EXP 36
14998: PUSH
14999: LD_VAR 0 2
15003: ARRAY
15004: IFFALSE 15131
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
15006: LD_EXP 50
15010: PUSH
15011: LD_EXP 36
15015: PUSH
15016: LD_VAR 0 2
15020: ARRAY
15021: ARRAY
15022: PPUSH
15023: LD_INT 0
15025: PPUSH
15026: CALL_OW 424
// for j := 1 to 8 do
15030: LD_ADDR_VAR 0 3
15034: PUSH
15035: DOUBLE
15036: LD_INT 1
15038: DEC
15039: ST_TO_ADDR
15040: LD_INT 8
15042: PUSH
15043: FOR_TO
15044: IFFALSE 15129
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15046: LD_EXP 36
15050: PUSH
15051: LD_VAR 0 3
15055: ARRAY
15056: PUSH
15057: LD_EXP 33
15061: PUSH
15062: LD_VAR 0 2
15066: ARRAY
15067: PUSH
15068: LD_EXP 33
15072: PUSH
15073: LD_VAR 0 3
15077: ARRAY
15078: NONEQUAL
15079: PUSH
15080: LD_EXP 41
15084: NOT
15085: PUSH
15086: LD_VAR 0 2
15090: PUSH
15091: LD_VAR 0 3
15095: NONEQUAL
15096: AND
15097: OR
15098: AND
15099: IFFALSE 15127
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15101: LD_VAR 0 3
15105: PPUSH
15106: LD_EXP 50
15110: PUSH
15111: LD_EXP 36
15115: PUSH
15116: LD_VAR 0 2
15120: ARRAY
15121: ARRAY
15122: PPUSH
15123: CALL_OW 334
15127: GO 15043
15129: POP
15130: POP
// end ;
15131: GO 14991
15133: POP
15134: POP
// end ;
15135: LD_VAR 0 1
15139: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
15140: LD_EXP 51
15144: IFFALSE 15319
15146: GO 15148
15148: DISABLE
15149: LD_INT 0
15151: PPUSH
15152: PPUSH
// begin for i := 1 to 8 do
15153: LD_ADDR_VAR 0 1
15157: PUSH
15158: DOUBLE
15159: LD_INT 1
15161: DEC
15162: ST_TO_ADDR
15163: LD_INT 8
15165: PUSH
15166: FOR_TO
15167: IFFALSE 15316
// if Side_Positions [ i ] then
15169: LD_EXP 36
15173: PUSH
15174: LD_VAR 0 1
15178: ARRAY
15179: IFFALSE 15314
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
15181: LD_ADDR_VAR 0 2
15185: PUSH
15186: LD_EXP 50
15190: PUSH
15191: LD_EXP 36
15195: PUSH
15196: LD_VAR 0 1
15200: ARRAY
15201: ARRAY
15202: PPUSH
15203: LD_INT 2
15205: PUSH
15206: LD_INT 21
15208: PUSH
15209: LD_INT 1
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 21
15218: PUSH
15219: LD_INT 2
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 22
15233: PUSH
15234: LD_OWVAR 2
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PPUSH
15247: CALL_OW 70
15251: PUSH
15252: FOR_IN
15253: IFFALSE 15312
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
15255: LD_EXP 33
15259: PUSH
15260: LD_VAR 0 1
15264: ARRAY
15265: PUSH
15266: LD_EXP 33
15270: PUSH
15271: LD_OWVAR 2
15275: ARRAY
15276: NONEQUAL
15277: PUSH
15278: LD_EXP 41
15282: NOT
15283: PUSH
15284: LD_VAR 0 1
15288: PUSH
15289: LD_OWVAR 2
15293: NONEQUAL
15294: AND
15295: OR
15296: IFFALSE 15310
// ComMoveToArea ( un , BuildUpEscape ) ;
15298: LD_VAR 0 2
15302: PPUSH
15303: LD_INT 19
15305: PPUSH
15306: CALL_OW 113
15310: GO 15252
15312: POP
15313: POP
15314: GO 15166
15316: POP
15317: POP
// enable ;
15318: ENABLE
// end ;
15319: PPOPN 2
15321: END
// every 0 0$1 trigger def_builduptime do
15322: LD_EXP 12
15326: IFFALSE 15352
15328: GO 15330
15330: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15331: LD_INT 8400
15333: PUSH
15334: LD_EXP 12
15338: PUSH
15339: LD_INT 2100
15341: MUL
15342: PLUS
15343: PPUSH
15344: CALL_OW 67
// EndBuildUp ;
15348: CALL 14965 0 0
// end ;
15352: END
