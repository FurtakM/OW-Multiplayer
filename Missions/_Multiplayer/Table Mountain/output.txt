// export game_type , def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_shared_vision , def_morale_flags , def_siberite_detection , def_sib_rocket_enabled , def_people_respawning ; export is_depot , number_of_breastworks , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , sci1_skills , sci2_skills , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export playing_sides , playing_teams , sci1 , sci2 ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Positions , Team_Game ; export depot_def , breastworks_def , start_def , teleport_def ; export commander ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if MultiPlayer then
  11: LD_OWVAR 4
  15: IFFALSE 89
// begin game_type = mp_game_type ;
  17: LD_ADDR_EXP 1
  21: PUSH
  22: LD_OWVAR 6
  26: ST_TO_ADDR
// Player_Side = mp_player_side ;
  27: LD_ADDR_EXP 31
  31: PUSH
  32: LD_OWVAR 7
  36: ST_TO_ADDR
// Player_Team = mp_player_team ;
  37: LD_ADDR_EXP 32
  41: PUSH
  42: LD_OWVAR 8
  46: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  47: LD_ADDR_EXP 35
  51: PUSH
  52: LD_OWVAR 17
  56: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  57: LD_ADDR_EXP 33
  61: PUSH
  62: LD_OWVAR 15
  66: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  67: LD_ADDR_EXP 36
  71: PUSH
  72: LD_OWVAR 16
  76: ST_TO_ADDR
// Teams = mp_teams ;
  77: LD_ADDR_EXP 34
  81: PUSH
  82: LD_OWVAR 12
  86: ST_TO_ADDR
// end else
  87: GO 255
// begin game_type = 66 ;
  89: LD_ADDR_EXP 1
  93: PUSH
  94: LD_INT 66
  96: ST_TO_ADDR
// Player_Side = 4 ;
  97: LD_ADDR_EXP 31
 101: PUSH
 102: LD_INT 4
 104: ST_TO_ADDR
// Player_Team = 2 ;
 105: LD_ADDR_EXP 32
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 0 , 0 ] ;
 113: LD_ADDR_EXP 35
 117: PUSH
 118: LD_INT 0
 120: PUSH
 121: LD_INT 3
 123: PUSH
 124: LD_INT 0
 126: PUSH
 127: LD_INT 1
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 2
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: LD_INT 0
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 0 , 0 ] ;
 152: LD_ADDR_EXP 33
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 2
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: ST_TO_ADDR
// Side_Nations = [ 0 , 2 , 0 , 1 , 0 , 1 , 0 , 0 ] ;
 191: LD_ADDR_EXP 36
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 0
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: ST_TO_ADDR
// Teams = [ [ 2 ] , [ 6 , 4 ] ] ;
 230: LD_ADDR_EXP 34
 234: PUSH
 235: LD_INT 2
 237: PUSH
 238: EMPTY
 239: LIST
 240: PUSH
 241: LD_INT 6
 243: PUSH
 244: LD_INT 4
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PUSH
 251: EMPTY
 252: LIST
 253: LIST
 254: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 255: LD_ADDR_EXP 29
 259: PUSH
 260: LD_EXP 35
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: EMPTY
 269: LIST
 270: DIFF
 271: PUSH
 272: LD_INT 0
 274: PLUS
 275: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 276: LD_ADDR_EXP 30
 280: PUSH
 281: LD_EXP 33
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: EMPTY
 290: LIST
 291: DIFF
 292: PUSH
 293: LD_INT 0
 295: PLUS
 296: ST_TO_ADDR
// if MultiPlayer then
 297: LD_OWVAR 4
 301: IFFALSE 448
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 303: LD_ADDR_EXP 2
 307: PUSH
 308: LD_INT 0
 310: PPUSH
 311: CALL_OW 426
 315: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 316: LD_ADDR_EXP 3
 320: PUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 426
 328: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 329: LD_ADDR_EXP 4
 333: PUSH
 334: LD_INT 2
 336: PPUSH
 337: CALL_OW 426
 341: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 342: LD_ADDR_EXP 5
 346: PUSH
 347: LD_INT 3
 349: PPUSH
 350: CALL_OW 426
 354: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 355: LD_ADDR_EXP 6
 359: PUSH
 360: LD_INT 4
 362: PPUSH
 363: CALL_OW 426
 367: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 368: LD_ADDR_EXP 7
 372: PUSH
 373: LD_INT 10
 375: PPUSH
 376: CALL_OW 426
 380: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 381: LD_ADDR_EXP 8
 385: PUSH
 386: LD_INT 11
 388: PPUSH
 389: CALL_OW 426
 393: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 394: LD_ADDR_EXP 9
 398: PUSH
 399: LD_INT 12
 401: PPUSH
 402: CALL_OW 426
 406: ST_TO_ADDR
// def_sib_rocket_enabled = GetMultiplayerSetting ( 13 ) ;
 407: LD_ADDR_EXP 10
 411: PUSH
 412: LD_INT 13
 414: PPUSH
 415: CALL_OW 426
 419: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 420: LD_ADDR_EXP 11
 424: PUSH
 425: LD_INT 14
 427: PPUSH
 428: CALL_OW 426
 432: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 433: LD_ADDR_VAR 0 9
 437: PUSH
 438: LD_INT 22
 440: PPUSH
 441: CALL_OW 426
 445: ST_TO_ADDR
// end else
 446: GO 540
// begin randomize ;
 448: CALL_OW 10
// def_base_level = 3 ;
 452: LD_ADDR_EXP 2
 456: PUSH
 457: LD_INT 3
 459: ST_TO_ADDR
// def_amount_of_people = 1 ;
 460: LD_ADDR_EXP 3
 464: PUSH
 465: LD_INT 1
 467: ST_TO_ADDR
// def_initial_level = 1 ;
 468: LD_ADDR_EXP 4
 472: PUSH
 473: LD_INT 1
 475: ST_TO_ADDR
// def_starting_resources = 2 ;
 476: LD_ADDR_EXP 5
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// def_shipments_density = 1 ;
 484: LD_ADDR_EXP 6
 488: PUSH
 489: LD_INT 1
 491: ST_TO_ADDR
// def_shared_vision = 1 ;
 492: LD_ADDR_EXP 7
 496: PUSH
 497: LD_INT 1
 499: ST_TO_ADDR
// def_morale_flags = 3 ;
 500: LD_ADDR_EXP 8
 504: PUSH
 505: LD_INT 3
 507: ST_TO_ADDR
// def_siberite_detection = 0 ;
 508: LD_ADDR_EXP 9
 512: PUSH
 513: LD_INT 0
 515: ST_TO_ADDR
// def_sib_rocket_enabled = 1 ;
 516: LD_ADDR_EXP 10
 520: PUSH
 521: LD_INT 1
 523: ST_TO_ADDR
// def_people_respawning = 2 ;
 524: LD_ADDR_EXP 11
 528: PUSH
 529: LD_INT 2
 531: ST_TO_ADDR
// tech_level = 6 ;
 532: LD_ADDR_VAR 0 9
 536: PUSH
 537: LD_INT 6
 539: ST_TO_ADDR
// end ; if isSGUI then
 540: LD_OWVAR 83
 544: IFFALSE 552
// setMpTechs ( ) else
 546: CALL 14725 0 0
 550: GO 565
// begin SetMpTechLevel ( tech_level + 1 ) ;
 552: LD_VAR 0 9
 556: PUSH
 557: LD_INT 1
 559: PLUS
 560: PPUSH
 561: CALL 14872 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 565: LD_ADDR_EXP 12
 569: PUSH
 570: LD_INT 0
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: LD_INT 1
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: PUSH
 588: LD_EXP 2
 592: PUSH
 593: LD_INT 1
 595: PLUS
 596: ARRAY
 597: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 598: LD_ADDR_EXP 13
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: LD_INT 2
 611: PUSH
 612: LD_INT 4
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: PUSH
 621: LD_EXP 2
 625: PUSH
 626: LD_INT 1
 628: PLUS
 629: ARRAY
 630: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 631: LD_ADDR_EXP 14
 635: PUSH
 636: LD_INT 9
 638: PUSH
 639: LD_INT 12
 641: PUSH
 642: LD_INT 15
 644: PUSH
 645: LD_INT 24
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: PUSH
 654: LD_EXP 3
 658: PUSH
 659: LD_INT 1
 661: PLUS
 662: ARRAY
 663: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
 664: LD_ADDR_EXP 15
 668: PUSH
 669: LD_INT 2
 671: PUSH
 672: LD_INT 3
 674: PUSH
 675: LD_INT 4
 677: PUSH
 678: LD_INT 5
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: LIST
 686: PUSH
 687: LD_EXP 4
 691: PUSH
 692: LD_INT 1
 694: PLUS
 695: ARRAY
 696: ST_TO_ADDR
// sci1_skills = [ [ 0 , 2 , 1 , 4 ] , [ 1 , 3 , 1 , 5 ] , [ 1 , 4 , 2 , 6 ] , [ 2 , 5 , 2 , 7 ] ] [ def_initial_level + 1 ] ;
 697: LD_ADDR_EXP 20
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 1
 710: PUSH
 711: LD_INT 4
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: PUSH
 720: LD_INT 1
 722: PUSH
 723: LD_INT 3
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: LD_INT 5
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: LIST
 736: LIST
 737: PUSH
 738: LD_INT 1
 740: PUSH
 741: LD_INT 4
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: LD_INT 6
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: PUSH
 756: LD_INT 2
 758: PUSH
 759: LD_INT 5
 761: PUSH
 762: LD_INT 2
 764: PUSH
 765: LD_INT 7
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: PUSH
 780: LD_EXP 4
 784: PUSH
 785: LD_INT 1
 787: PLUS
 788: ARRAY
 789: ST_TO_ADDR
// sci2_skills = [ [ 2 , 1 , 1 , 3 ] , [ 2 , 2 , 1 , 4 ] , [ 3 , 3 , 2 , 5 ] , [ 3 , 4 , 3 , 6 ] ] [ def_initial_level + 1 ] ;
 790: LD_ADDR_EXP 21
 794: PUSH
 795: LD_INT 2
 797: PUSH
 798: LD_INT 1
 800: PUSH
 801: LD_INT 1
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: LIST
 811: LIST
 812: PUSH
 813: LD_INT 2
 815: PUSH
 816: LD_INT 2
 818: PUSH
 819: LD_INT 1
 821: PUSH
 822: LD_INT 4
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 3
 833: PUSH
 834: LD_INT 3
 836: PUSH
 837: LD_INT 2
 839: PUSH
 840: LD_INT 5
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 3
 851: PUSH
 852: LD_INT 4
 854: PUSH
 855: LD_INT 3
 857: PUSH
 858: LD_INT 6
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: PUSH
 867: EMPTY
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: PUSH
 873: LD_EXP 4
 877: PUSH
 878: LD_INT 1
 880: PLUS
 881: ARRAY
 882: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 883: LD_ADDR_EXP 17
 887: PUSH
 888: LD_INT 0
 890: PUSH
 891: LD_INT 0
 893: PUSH
 894: LD_INT 0
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 30
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: LD_INT 0
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: LIST
 915: PUSH
 916: LD_INT 50
 918: PUSH
 919: LD_INT 20
 921: PUSH
 922: LD_INT 0
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: PUSH
 930: LD_INT 80
 932: PUSH
 933: LD_INT 40
 935: PUSH
 936: LD_INT 20
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: LD_EXP 5
 954: PUSH
 955: LD_INT 1
 957: PLUS
 958: ARRAY
 959: ST_TO_ADDR
// starting_crates = [ [ 8 ] , [ 5 , 10 ] , [ 4 , 8 , 12 ] , [ 3 , 6 , 9 , 12 ] ] [ def_starting_resources + 1 ] ;
 960: LD_ADDR_EXP 16
 964: PUSH
 965: LD_INT 8
 967: PUSH
 968: EMPTY
 969: LIST
 970: PUSH
 971: LD_INT 5
 973: PUSH
 974: LD_INT 10
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 4
 983: PUSH
 984: LD_INT 8
 986: PUSH
 987: LD_INT 12
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: PUSH
 995: LD_INT 3
 997: PUSH
 998: LD_INT 6
1000: PUSH
1001: LD_INT 9
1003: PUSH
1004: LD_INT 12
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: LIST
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: LIST
1018: PUSH
1019: LD_EXP 5
1023: PUSH
1024: LD_INT 1
1026: PLUS
1027: ARRAY
1028: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1029: LD_ADDR_EXP 18
1033: PUSH
1034: LD_INT 20
1036: PUSH
1037: LD_INT 30
1039: PUSH
1040: LD_INT 40
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: LIST
1047: PUSH
1048: LD_EXP 6
1052: PUSH
1053: LD_INT 1
1055: PLUS
1056: ARRAY
1057: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1058: LD_ADDR_EXP 22
1062: PUSH
1063: LD_INT 0
1065: PUSH
1066: LD_INT 8400
1068: PUSH
1069: LD_INT 1750
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: LD_EXP 11
1081: PUSH
1082: LD_INT 1
1084: PLUS
1085: ARRAY
1086: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1087: LD_ADDR_EXP 23
1091: PUSH
1092: LD_INT 0
1094: PUSH
1095: LD_INT 21000
1097: PUSH
1098: LD_INT 4200
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_EXP 11
1110: PUSH
1111: LD_INT 1
1113: PLUS
1114: ARRAY
1115: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1116: LD_ADDR_EXP 19
1120: PUSH
1121: LD_INT 1
1123: NEG
1124: PUSH
1125: LD_INT 350
1127: PUSH
1128: LD_INT 700
1130: PUSH
1131: LD_INT 1400
1133: PUSH
1134: LD_INT 0
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: LD_EXP 8
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: ARRAY
1153: ST_TO_ADDR
// battle_flags_id = [ ] ;
1154: LD_ADDR_EXP 50
1158: PUSH
1159: EMPTY
1160: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1161: LD_EXP 47
1165: PUSH
1166: LD_INT 0
1168: EQUAL
1169: IFFALSE 1181
// siberite_bomb_Delay = 0 else
1171: LD_ADDR_EXP 24
1175: PUSH
1176: LD_INT 0
1178: ST_TO_ADDR
1179: GO 1203
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1181: LD_ADDR_EXP 24
1185: PUSH
1186: LD_EXP 47
1190: PUSH
1191: LD_INT 1
1193: MINUS
1194: PUSH
1195: LD_INT 21000
1197: MUL
1198: PUSH
1199: LD_INT 1
1201: PLUS
1202: ST_TO_ADDR
// sci1 := [ ] ;
1203: LD_ADDR_EXP 27
1207: PUSH
1208: EMPTY
1209: ST_TO_ADDR
// sci2 := [ ] ;
1210: LD_ADDR_EXP 28
1214: PUSH
1215: EMPTY
1216: ST_TO_ADDR
// end ;
1217: LD_VAR 0 1
1221: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , br4 , un , i ; begin
1222: LD_INT 0
1224: PPUSH
1225: PPUSH
1226: PPUSH
1227: PPUSH
1228: PPUSH
1229: PPUSH
1230: PPUSH
1231: PPUSH
1232: PPUSH
// depot_def = [ ] ;
1233: LD_ADDR_EXP 41
1237: PUSH
1238: EMPTY
1239: ST_TO_ADDR
// breastworks_def = [ ] ;
1240: LD_ADDR_EXP 42
1244: PUSH
1245: EMPTY
1246: ST_TO_ADDR
// for side := 1 to 4 do
1247: LD_ADDR_VAR 0 2
1251: PUSH
1252: DOUBLE
1253: LD_INT 1
1255: DEC
1256: ST_TO_ADDR
1257: LD_INT 4
1259: PUSH
1260: FOR_TO
1261: IFFALSE 1687
// begin dep := side * 5 - 4 ;
1263: LD_ADDR_VAR 0 3
1267: PUSH
1268: LD_VAR 0 2
1272: PUSH
1273: LD_INT 5
1275: MUL
1276: PUSH
1277: LD_INT 4
1279: MINUS
1280: ST_TO_ADDR
// br1 := side * 5 - 3 ;
1281: LD_ADDR_VAR 0 4
1285: PUSH
1286: LD_VAR 0 2
1290: PUSH
1291: LD_INT 5
1293: MUL
1294: PUSH
1295: LD_INT 3
1297: MINUS
1298: ST_TO_ADDR
// br2 := side * 5 - 2 ;
1299: LD_ADDR_VAR 0 5
1303: PUSH
1304: LD_VAR 0 2
1308: PUSH
1309: LD_INT 5
1311: MUL
1312: PUSH
1313: LD_INT 2
1315: MINUS
1316: ST_TO_ADDR
// br3 := side * 5 - 1 ;
1317: LD_ADDR_VAR 0 6
1321: PUSH
1322: LD_VAR 0 2
1326: PUSH
1327: LD_INT 5
1329: MUL
1330: PUSH
1331: LD_INT 1
1333: MINUS
1334: ST_TO_ADDR
// br4 := side * 5 ;
1335: LD_ADDR_VAR 0 7
1339: PUSH
1340: LD_VAR 0 2
1344: PUSH
1345: LD_INT 5
1347: MUL
1348: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1349: LD_ADDR_EXP 41
1353: PUSH
1354: LD_EXP 41
1358: PUSH
1359: LD_VAR 0 3
1363: PPUSH
1364: CALL_OW 250
1368: PUSH
1369: LD_VAR 0 3
1373: PPUSH
1374: CALL_OW 251
1378: PUSH
1379: LD_VAR 0 3
1383: PPUSH
1384: CALL_OW 254
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: LIST
1393: PUSH
1394: EMPTY
1395: LIST
1396: ADD
1397: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) ] ] ;
1398: LD_ADDR_EXP 43
1402: PUSH
1403: LD_EXP 43
1407: PUSH
1408: LD_VAR 0 3
1412: PPUSH
1413: CALL_OW 250
1417: PPUSH
1418: LD_VAR 0 3
1422: PPUSH
1423: CALL_OW 254
1427: PUSH
1428: LD_INT 6
1430: MOD
1431: PPUSH
1432: LD_INT 6
1434: PPUSH
1435: CALL_OW 272
1439: PUSH
1440: LD_VAR 0 3
1444: PPUSH
1445: CALL_OW 251
1449: PPUSH
1450: LD_VAR 0 3
1454: PPUSH
1455: CALL_OW 254
1459: PUSH
1460: LD_INT 6
1462: MOD
1463: PPUSH
1464: LD_INT 6
1466: PPUSH
1467: CALL_OW 273
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: EMPTY
1477: LIST
1478: ADD
1479: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] , [ GetX ( br4 ) , GetY ( br4 ) , GetDir ( br4 ) ] ] ] ;
1480: LD_ADDR_EXP 42
1484: PUSH
1485: LD_EXP 42
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 250
1499: PUSH
1500: LD_VAR 0 4
1504: PPUSH
1505: CALL_OW 251
1509: PUSH
1510: LD_VAR 0 4
1514: PPUSH
1515: CALL_OW 254
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: PUSH
1525: LD_VAR 0 5
1529: PPUSH
1530: CALL_OW 250
1534: PUSH
1535: LD_VAR 0 5
1539: PPUSH
1540: CALL_OW 251
1544: PUSH
1545: LD_VAR 0 5
1549: PPUSH
1550: CALL_OW 254
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_VAR 0 6
1564: PPUSH
1565: CALL_OW 250
1569: PUSH
1570: LD_VAR 0 6
1574: PPUSH
1575: CALL_OW 251
1579: PUSH
1580: LD_VAR 0 6
1584: PPUSH
1585: CALL_OW 254
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: PUSH
1595: LD_VAR 0 7
1599: PPUSH
1600: CALL_OW 250
1604: PUSH
1605: LD_VAR 0 7
1609: PPUSH
1610: CALL_OW 251
1614: PUSH
1615: LD_VAR 0 7
1619: PPUSH
1620: CALL_OW 254
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: PUSH
1636: EMPTY
1637: LIST
1638: ADD
1639: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1640: LD_VAR 0 3
1644: PPUSH
1645: CALL_OW 65
// DestroyUnit ( br1 ) ;
1649: LD_VAR 0 4
1653: PPUSH
1654: CALL_OW 65
// DestroyUnit ( br2 ) ;
1658: LD_VAR 0 5
1662: PPUSH
1663: CALL_OW 65
// DestroyUnit ( br3 ) ;
1667: LD_VAR 0 6
1671: PPUSH
1672: CALL_OW 65
// DestroyUnit ( br4 ) ;
1676: LD_VAR 0 7
1680: PPUSH
1681: CALL_OW 65
// end ;
1685: GO 1260
1687: POP
1688: POP
// teleport_def = [ [ 19 , 16 , 0 ] , [ 108 , 9 , 1 ] , [ 62 , 112 , 2 ] , [ 157 , 126 , 1 ] ] ;
1689: LD_ADDR_EXP 44
1693: PUSH
1694: LD_INT 19
1696: PUSH
1697: LD_INT 16
1699: PUSH
1700: LD_INT 0
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 108
1710: PUSH
1711: LD_INT 9
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: PUSH
1722: LD_INT 62
1724: PUSH
1725: LD_INT 112
1727: PUSH
1728: LD_INT 2
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 157
1738: PUSH
1739: LD_INT 126
1741: PUSH
1742: LD_INT 1
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: LIST
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: ST_TO_ADDR
// end ;
1756: LD_VAR 0 1
1760: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1761: LD_INT 0
1763: PPUSH
1764: PPUSH
1765: PPUSH
// if not ( game_type in [ 1 , 11 , 21 ] ) then
1766: LD_EXP 1
1770: PUSH
1771: LD_INT 1
1773: PUSH
1774: LD_INT 11
1776: PUSH
1777: LD_INT 21
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: IN
1785: NOT
1786: IFFALSE 1790
// exit ;
1788: GO 1965
// if def_shared_vision then
1790: LD_EXP 7
1794: IFFALSE 1859
// begin for i in Teams do
1796: LD_ADDR_VAR 0 2
1800: PUSH
1801: LD_EXP 34
1805: PUSH
1806: FOR_IN
1807: IFFALSE 1857
// for j = 2 to i do
1809: LD_ADDR_VAR 0 3
1813: PUSH
1814: DOUBLE
1815: LD_INT 2
1817: DEC
1818: ST_TO_ADDR
1819: LD_VAR 0 2
1823: PUSH
1824: FOR_TO
1825: IFFALSE 1853
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1827: LD_VAR 0 2
1831: PUSH
1832: LD_VAR 0 3
1836: ARRAY
1837: PPUSH
1838: LD_VAR 0 2
1842: PUSH
1843: LD_INT 1
1845: ARRAY
1846: PPUSH
1847: CALL_OW 343
1851: GO 1824
1853: POP
1854: POP
1855: GO 1806
1857: POP
1858: POP
// end ; for i := 1 to 8 do
1859: LD_ADDR_VAR 0 2
1863: PUSH
1864: DOUBLE
1865: LD_INT 1
1867: DEC
1868: ST_TO_ADDR
1869: LD_INT 8
1871: PUSH
1872: FOR_TO
1873: IFFALSE 1963
// for j := 1 to 8 do
1875: LD_ADDR_VAR 0 3
1879: PUSH
1880: DOUBLE
1881: LD_INT 1
1883: DEC
1884: ST_TO_ADDR
1885: LD_INT 8
1887: PUSH
1888: FOR_TO
1889: IFFALSE 1959
// if Side_Teams [ i ] = Side_Teams [ j ] then
1891: LD_EXP 33
1895: PUSH
1896: LD_VAR 0 2
1900: ARRAY
1901: PUSH
1902: LD_EXP 33
1906: PUSH
1907: LD_VAR 0 3
1911: ARRAY
1912: EQUAL
1913: IFFALSE 1937
// SetAttitude ( i , j , att_friend , true ) else
1915: LD_VAR 0 2
1919: PPUSH
1920: LD_VAR 0 3
1924: PPUSH
1925: LD_INT 1
1927: PPUSH
1928: LD_INT 1
1930: PPUSH
1931: CALL_OW 80
1935: GO 1957
// SetAttitude ( i , j , att_enemy , true ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_VAR 0 3
1946: PPUSH
1947: LD_INT 2
1949: PPUSH
1950: LD_INT 1
1952: PPUSH
1953: CALL_OW 80
1957: GO 1888
1959: POP
1960: POP
1961: GO 1872
1963: POP
1964: POP
// end ;
1965: LD_VAR 0 1
1969: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
1970: LD_INT 0
1972: PPUSH
1973: PPUSH
1974: PPUSH
1975: PPUSH
// result := [ ] ;
1976: LD_ADDR_VAR 0 8
1980: PUSH
1981: EMPTY
1982: ST_TO_ADDR
// for i := 1 to count do
1983: LD_ADDR_VAR 0 9
1987: PUSH
1988: DOUBLE
1989: LD_INT 1
1991: DEC
1992: ST_TO_ADDR
1993: LD_VAR 0 2
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2393
// begin uc_direction := Rand ( 0 , 5 ) ;
2001: LD_ADDR_OWVAR 24
2005: PUSH
2006: LD_INT 0
2008: PPUSH
2009: LD_INT 5
2011: PPUSH
2012: CALL_OW 12
2016: ST_TO_ADDR
// if commander then
2017: LD_FROM_VAR 0 7
2021: IFFALSE 2130
// begin hc_name := mp_sides_players_names [ side ] ;
2023: LD_ADDR_OWVAR 26
2027: PUSH
2028: LD_OWVAR 19
2032: PUSH
2033: LD_VAR 0 1
2037: ARRAY
2038: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2039: LD_INT 1
2041: PPUSH
2042: LD_INT 2
2044: PPUSH
2045: CALL_OW 12
2049: PPUSH
2050: LD_VAR 0 3
2054: PPUSH
2055: LD_EXP 15
2059: PUSH
2060: LD_INT 2
2062: PLUS
2063: PPUSH
2064: CALL_OW 380
// hc_importance := 105 ;
2068: LD_ADDR_OWVAR 32
2072: PUSH
2073: LD_INT 105
2075: ST_TO_ADDR
// commander := false ;
2076: LD_VAR 0 7
2080: PUSH
2081: LD_INT 0
2083: ST_TO_ADDR
// if Multiplayer then
2084: LD_OWVAR 4
2088: IFFALSE 2128
// begin hc_gallery := MULTIAVATARS ;
2090: LD_ADDR_OWVAR 33
2094: PUSH
2095: LD_STRING MULTIAVATARS
2097: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2098: LD_ADDR_OWVAR 34
2102: PUSH
2103: LD_VAR 0 1
2107: PPUSH
2108: CALL_OW 525
2112: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2113: LD_ADDR_OWVAR 27
2117: PUSH
2118: LD_VAR 0 1
2122: PPUSH
2123: CALL_OW 526
2127: ST_TO_ADDR
// end ; end else
2128: GO 2193
// begin hc_name :=  ;
2130: LD_ADDR_OWVAR 26
2134: PUSH
2135: LD_STRING 
2137: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2138: LD_INT 1
2140: PPUSH
2141: LD_INT 2
2143: PPUSH
2144: CALL_OW 12
2148: PPUSH
2149: LD_VAR 0 3
2153: PPUSH
2154: LD_EXP 15
2158: PPUSH
2159: CALL_OW 380
// hc_importance := 0 ;
2163: LD_ADDR_OWVAR 32
2167: PUSH
2168: LD_INT 0
2170: ST_TO_ADDR
// if Multiplayer then
2171: LD_OWVAR 4
2175: IFFALSE 2193
// begin hc_gallery :=  ;
2177: LD_ADDR_OWVAR 33
2181: PUSH
2182: LD_STRING 
2184: ST_TO_ADDR
// hc_face_number := 0 ;
2185: LD_ADDR_OWVAR 34
2189: PUSH
2190: LD_INT 0
2192: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2193: LD_ADDR_VAR 0 11
2197: PUSH
2198: CALL_OW 44
2202: ST_TO_ADDR
// if global_defined then
2203: LD_LOC 2
2207: IFFALSE 2345
// begin j := i ;
2209: LD_ADDR_VAR 0 10
2213: PUSH
2214: LD_VAR 0 9
2218: ST_TO_ADDR
// if cl = class_soldier then
2219: LD_VAR 0 3
2223: PUSH
2224: LD_INT 1
2226: EQUAL
2227: IFFALSE 2245
// j := i + soldiers_created ;
2229: LD_ADDR_VAR 0 10
2233: PUSH
2234: LD_VAR 0 9
2238: PUSH
2239: LD_LOC 3
2243: PLUS
2244: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2245: LD_LOC 1
2249: PUSH
2250: LD_VAR 0 3
2254: ARRAY
2255: PUSH
2256: LD_VAR 0 10
2260: ARRAY
2261: PPUSH
2262: LD_VAR 0 11
2266: PPUSH
2267: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2271: LD_VAR 0 11
2275: PPUSH
2276: LD_INT 2
2278: PPUSH
2279: LD_LOC 1
2283: PUSH
2284: LD_VAR 0 3
2288: ARRAY
2289: PUSH
2290: LD_VAR 0 10
2294: ARRAY
2295: PPUSH
2296: LD_INT 2
2298: PPUSH
2299: CALL_OW 260
2303: PPUSH
2304: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2308: LD_VAR 0 11
2312: PPUSH
2313: LD_INT 1
2315: PPUSH
2316: LD_LOC 1
2320: PUSH
2321: LD_VAR 0 3
2325: ARRAY
2326: PUSH
2327: LD_VAR 0 10
2331: ARRAY
2332: PPUSH
2333: LD_INT 1
2335: PPUSH
2336: CALL_OW 260
2340: PPUSH
2341: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2345: LD_VAR 0 11
2349: PPUSH
2350: LD_VAR 0 4
2354: PPUSH
2355: LD_VAR 0 5
2359: PPUSH
2360: LD_VAR 0 6
2364: PPUSH
2365: LD_INT 0
2367: PPUSH
2368: CALL_OW 50
// result := result ^ [ un ] ;
2372: LD_ADDR_VAR 0 8
2376: PUSH
2377: LD_VAR 0 8
2381: PUSH
2382: LD_VAR 0 11
2386: PUSH
2387: EMPTY
2388: LIST
2389: ADD
2390: ST_TO_ADDR
// end ;
2391: GO 1998
2393: POP
2394: POP
// if not global_defined then
2395: LD_LOC 2
2399: NOT
2400: IFFALSE 2462
// if cl = class_soldier and global_units then
2402: LD_VAR 0 3
2406: PUSH
2407: LD_INT 1
2409: EQUAL
2410: PUSH
2411: LD_LOC 1
2415: AND
2416: IFFALSE 2443
// global_units := [ global_units [ 1 ] ^ result ] else
2418: LD_ADDR_LOC 1
2422: PUSH
2423: LD_LOC 1
2427: PUSH
2428: LD_INT 1
2430: ARRAY
2431: PUSH
2432: LD_VAR 0 8
2436: ADD
2437: PUSH
2438: EMPTY
2439: LIST
2440: ST_TO_ADDR
2441: GO 2462
// global_units := global_units ^ [ result ] end ;
2443: LD_ADDR_LOC 1
2447: PUSH
2448: LD_LOC 1
2452: PUSH
2453: LD_VAR 0 8
2457: PUSH
2458: EMPTY
2459: LIST
2460: ADD
2461: ST_TO_ADDR
2462: LD_VAR 0 8
2466: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol , t , n1 , n2 ; begin
2467: LD_INT 0
2469: PPUSH
2470: PPUSH
2471: PPUSH
2472: PPUSH
2473: PPUSH
2474: PPUSH
2475: PPUSH
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
2484: PPUSH
// pos := Side_Positions [ side ] ;
2485: LD_ADDR_VAR 0 3
2489: PUSH
2490: LD_EXP 35
2494: PUSH
2495: LD_VAR 0 1
2499: ARRAY
2500: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2501: LD_ADDR_OWVAR 21
2505: PUSH
2506: LD_EXP 36
2510: PUSH
2511: LD_VAR 0 1
2515: ARRAY
2516: ST_TO_ADDR
// uc_side := side ;
2517: LD_ADDR_OWVAR 20
2521: PUSH
2522: LD_VAR 0 1
2526: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2527: LD_ADDR_VAR 0 4
2531: PUSH
2532: LD_EXP 41
2536: PUSH
2537: LD_VAR 0 3
2541: ARRAY
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2547: LD_ADDR_VAR 0 5
2551: PUSH
2552: LD_EXP 41
2556: PUSH
2557: LD_VAR 0 3
2561: ARRAY
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: ST_TO_ADDR
// if is_depot then
2567: LD_EXP 12
2571: IFFALSE 2696
// begin bc_type = b_depot ;
2573: LD_ADDR_OWVAR 42
2577: PUSH
2578: LD_INT 0
2580: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
2581: LD_ADDR_VAR 0 10
2585: PUSH
2586: LD_VAR 0 4
2590: PPUSH
2591: LD_VAR 0 5
2595: PPUSH
2596: LD_EXP 41
2600: PUSH
2601: LD_VAR 0 3
2605: ARRAY
2606: PUSH
2607: LD_INT 3
2609: ARRAY
2610: PPUSH
2611: CALL_OW 47
2615: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2616: LD_VAR 0 10
2620: PPUSH
2621: CALL_OW 274
2625: PPUSH
2626: LD_INT 1
2628: PPUSH
2629: LD_EXP 17
2633: PUSH
2634: LD_INT 1
2636: ARRAY
2637: PPUSH
2638: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2642: LD_VAR 0 10
2646: PPUSH
2647: CALL_OW 274
2651: PPUSH
2652: LD_INT 2
2654: PPUSH
2655: LD_EXP 17
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2668: LD_VAR 0 2
2672: PPUSH
2673: CALL_OW 274
2677: PPUSH
2678: LD_INT 3
2680: PPUSH
2681: LD_EXP 17
2685: PUSH
2686: LD_INT 3
2688: ARRAY
2689: PPUSH
2690: CALL_OW 277
// end else
2694: GO 2840
// begin for i := 1 to 3 do
2696: LD_ADDR_VAR 0 6
2700: PUSH
2701: DOUBLE
2702: LD_INT 1
2704: DEC
2705: ST_TO_ADDR
2706: LD_INT 3
2708: PUSH
2709: FOR_TO
2710: IFFALSE 2838
// begin r := starting_resources [ i ] ;
2712: LD_ADDR_VAR 0 7
2716: PUSH
2717: LD_EXP 17
2721: PUSH
2722: LD_VAR 0 6
2726: ARRAY
2727: ST_TO_ADDR
// while r >= 10 do
2728: LD_VAR 0 7
2732: PUSH
2733: LD_INT 10
2735: GREATEREQUAL
2736: IFFALSE 2836
// if r > 50 then
2738: LD_VAR 0 7
2742: PUSH
2743: LD_INT 50
2745: GREATER
2746: IFFALSE 2792
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
2748: LD_VAR 0 6
2752: PPUSH
2753: LD_INT 5
2755: PPUSH
2756: LD_VAR 0 4
2760: PPUSH
2761: LD_VAR 0 5
2765: PPUSH
2766: LD_INT 4
2768: PPUSH
2769: LD_INT 0
2771: PPUSH
2772: CALL_OW 60
// r := r - 50 ;
2776: LD_ADDR_VAR 0 7
2780: PUSH
2781: LD_VAR 0 7
2785: PUSH
2786: LD_INT 50
2788: MINUS
2789: ST_TO_ADDR
// end else
2790: GO 2834
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
2792: LD_VAR 0 6
2796: PPUSH
2797: LD_VAR 0 7
2801: PUSH
2802: LD_INT 10
2804: DIV
2805: PPUSH
2806: LD_VAR 0 4
2810: PPUSH
2811: LD_VAR 0 5
2815: PPUSH
2816: LD_INT 4
2818: PPUSH
2819: LD_INT 0
2821: PPUSH
2822: CALL_OW 60
// r := 0 ;
2826: LD_ADDR_VAR 0 7
2830: PUSH
2831: LD_INT 0
2833: ST_TO_ADDR
// end ;
2834: GO 2728
// end ;
2836: GO 2709
2838: POP
2839: POP
// end ; x := start_def [ pos ] [ 1 ] ;
2840: LD_ADDR_VAR 0 4
2844: PUSH
2845: LD_EXP 43
2849: PUSH
2850: LD_VAR 0 3
2854: ARRAY
2855: PUSH
2856: LD_INT 1
2858: ARRAY
2859: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
2860: LD_ADDR_VAR 0 5
2864: PUSH
2865: LD_EXP 43
2869: PUSH
2870: LD_VAR 0 3
2874: ARRAY
2875: PUSH
2876: LD_INT 2
2878: ARRAY
2879: ST_TO_ADDR
// for r in starting_crates do
2880: LD_ADDR_VAR 0 7
2884: PUSH
2885: LD_EXP 16
2889: PUSH
2890: FOR_IN
2891: IFFALSE 2923
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
2893: LD_INT 1
2895: PPUSH
2896: LD_INT 5
2898: PPUSH
2899: LD_VAR 0 4
2903: PPUSH
2904: LD_VAR 0 5
2908: PPUSH
2909: LD_VAR 0 7
2913: PPUSH
2914: LD_INT 0
2916: PPUSH
2917: CALL_OW 60
2921: GO 2890
2923: POP
2924: POP
// if def_morale_flags then
2925: LD_EXP 8
2929: IFFALSE 3008
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
2931: LD_ADDR_EXP 50
2935: PUSH
2936: LD_EXP 50
2940: PUSH
2941: LD_VAR 0 1
2945: PPUSH
2946: LD_VAR 0 4
2950: PPUSH
2951: LD_VAR 0 5
2955: PPUSH
2956: LD_INT 1
2958: PUSH
2959: LD_INT 100
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: PUSH
2966: LD_INT 2
2968: PUSH
2969: LD_INT 50
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 3
2978: PUSH
2979: LD_INT 20
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: LD_INT 20
2988: PUSH
2989: LD_INT 100
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: PPUSH
3002: CALL_OW 418
3006: ADD
3007: ST_TO_ADDR
// commander := true ;
3008: LD_ADDR_EXP 45
3012: PUSH
3013: LD_INT 1
3015: ST_TO_ADDR
// if game_type in [ 11 , 12 ] then
3016: LD_EXP 1
3020: PUSH
3021: LD_INT 11
3023: PUSH
3024: LD_INT 12
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: IN
3031: IFFALSE 3886
// begin uc_nation = nation_russian ;
3033: LD_ADDR_OWVAR 21
3037: PUSH
3038: LD_INT 3
3040: ST_TO_ADDR
// bc_type = b_teleport ;
3041: LD_ADDR_OWVAR 42
3045: PUSH
3046: LD_INT 34
3048: ST_TO_ADDR
// bc_level = 10 ;
3049: LD_ADDR_OWVAR 43
3053: PUSH
3054: LD_INT 10
3056: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , teleport_def [ pos ] [ 3 ] ) ;
3057: LD_EXP 44
3061: PUSH
3062: LD_VAR 0 3
3066: ARRAY
3067: PUSH
3068: LD_INT 1
3070: ARRAY
3071: PPUSH
3072: LD_EXP 44
3076: PUSH
3077: LD_VAR 0 3
3081: ARRAY
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: LD_EXP 44
3091: PUSH
3092: LD_VAR 0 3
3096: ARRAY
3097: PUSH
3098: LD_INT 3
3100: ARRAY
3101: PPUSH
3102: CALL_OW 47
// if game_type = 11 then
3106: LD_EXP 1
3110: PUSH
3111: LD_INT 11
3113: EQUAL
3114: IFFALSE 3150
// if ( side in Teams [ 1 ] ) then
3116: LD_VAR 0 1
3120: PUSH
3121: LD_EXP 34
3125: PUSH
3126: LD_INT 1
3128: ARRAY
3129: IN
3130: IFFALSE 3142
// t := 1 else
3132: LD_ADDR_VAR 0 15
3136: PUSH
3137: LD_INT 1
3139: ST_TO_ADDR
3140: GO 3150
// t := 2 ;
3142: LD_ADDR_VAR 0 15
3146: PUSH
3147: LD_INT 2
3149: ST_TO_ADDR
// hc_importance = 101 ;
3150: LD_ADDR_OWVAR 32
3154: PUSH
3155: LD_INT 101
3157: ST_TO_ADDR
// commander := false ;
3158: LD_ADDR_EXP 45
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// n1 := false ;
3166: LD_ADDR_VAR 0 16
3170: PUSH
3171: LD_INT 0
3173: ST_TO_ADDR
// n2 := false ;
3174: LD_ADDR_VAR 0 17
3178: PUSH
3179: LD_INT 0
3181: ST_TO_ADDR
// if ( teams [ t ] + 0 ) = 1 then
3182: LD_EXP 34
3186: PUSH
3187: LD_VAR 0 15
3191: ARRAY
3192: PUSH
3193: LD_INT 0
3195: PLUS
3196: PUSH
3197: LD_INT 1
3199: EQUAL
3200: IFFALSE 3220
// begin n1 := true ;
3202: LD_ADDR_VAR 0 16
3206: PUSH
3207: LD_INT 1
3209: ST_TO_ADDR
// n2 := true ;
3210: LD_ADDR_VAR 0 17
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// end else
3218: GO 3376
// if t = 1 then
3220: LD_VAR 0 15
3224: PUSH
3225: LD_INT 1
3227: EQUAL
3228: IFFALSE 3304
// if sci1 then
3230: LD_EXP 27
3234: IFFALSE 3275
// if GetSex ( sci1 [ 1 ] ) = sex_male then
3236: LD_EXP 27
3240: PUSH
3241: LD_INT 1
3243: ARRAY
3244: PPUSH
3245: CALL_OW 258
3249: PUSH
3250: LD_INT 1
3252: EQUAL
3253: IFFALSE 3265
// n2 := true else
3255: LD_ADDR_VAR 0 17
3259: PUSH
3260: LD_INT 1
3262: ST_TO_ADDR
3263: GO 3273
// n1 := true else
3265: LD_ADDR_VAR 0 16
3269: PUSH
3270: LD_INT 1
3272: ST_TO_ADDR
3273: GO 3302
// if Prob ( 50 ) then
3275: LD_INT 50
3277: PPUSH
3278: CALL_OW 13
3282: IFFALSE 3294
// n1 := true else
3284: LD_ADDR_VAR 0 16
3288: PUSH
3289: LD_INT 1
3291: ST_TO_ADDR
3292: GO 3302
// n2 := true else
3294: LD_ADDR_VAR 0 17
3298: PUSH
3299: LD_INT 1
3301: ST_TO_ADDR
3302: GO 3376
// if sci2 then
3304: LD_EXP 28
3308: IFFALSE 3349
// if GetSex ( sci2 [ 1 ] ) = sex_male then
3310: LD_EXP 28
3314: PUSH
3315: LD_INT 1
3317: ARRAY
3318: PPUSH
3319: CALL_OW 258
3323: PUSH
3324: LD_INT 1
3326: EQUAL
3327: IFFALSE 3339
// n2 := true else
3329: LD_ADDR_VAR 0 17
3333: PUSH
3334: LD_INT 1
3336: ST_TO_ADDR
3337: GO 3347
// n1 := true else
3339: LD_ADDR_VAR 0 16
3343: PUSH
3344: LD_INT 1
3346: ST_TO_ADDR
3347: GO 3376
// if Prob ( 50 ) then
3349: LD_INT 50
3351: PPUSH
3352: CALL_OW 13
3356: IFFALSE 3368
// n1 := true else
3358: LD_ADDR_VAR 0 16
3362: PUSH
3363: LD_INT 1
3365: ST_TO_ADDR
3366: GO 3376
// n2 := true ;
3368: LD_ADDR_VAR 0 17
3372: PUSH
3373: LD_INT 1
3375: ST_TO_ADDR
// if n1 then
3376: LD_VAR 0 16
3380: IFFALSE 3616
// begin hc_name = Prof. Garin ;
3382: LD_ADDR_OWVAR 26
3386: PUSH
3387: LD_STRING Prof. Garin
3389: ST_TO_ADDR
// hc_sex = sex_male ;
3390: LD_ADDR_OWVAR 27
3394: PUSH
3395: LD_INT 1
3397: ST_TO_ADDR
// hc_class = class_scientistic ;
3398: LD_ADDR_OWVAR 28
3402: PUSH
3403: LD_INT 4
3405: ST_TO_ADDR
// hc_gallery = multi ;
3406: LD_ADDR_OWVAR 33
3410: PUSH
3411: LD_STRING multi
3413: ST_TO_ADDR
// hc_face_number = 2 ;
3414: LD_ADDR_OWVAR 34
3418: PUSH
3419: LD_INT 2
3421: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
3422: LD_ADDR_OWVAR 29
3426: PUSH
3427: LD_INT 11
3429: PUSH
3430: LD_INT 10
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: ST_TO_ADDR
// hc_basic_skills = [ 0 , 1 , 0 , 2 ] ;
3437: LD_ADDR_OWVAR 30
3441: PUSH
3442: LD_INT 0
3444: PUSH
3445: LD_INT 1
3447: PUSH
3448: LD_INT 0
3450: PUSH
3451: LD_INT 2
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: ST_TO_ADDR
// hc_skills = sci1_skills ;
3460: LD_ADDR_OWVAR 31
3464: PUSH
3465: LD_EXP 20
3469: ST_TO_ADDR
// if t = 1 then
3470: LD_VAR 0 15
3474: PUSH
3475: LD_INT 1
3477: EQUAL
3478: IFFALSE 3549
// begin sci1 := sci1 ^ CreateHuman ;
3480: LD_ADDR_EXP 27
3484: PUSH
3485: LD_EXP 27
3489: PUSH
3490: CALL_OW 44
3494: ADD
3495: ST_TO_ADDR
// PlaceUnitXYR ( sci1 [ sci1 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3496: LD_EXP 27
3500: PUSH
3501: LD_EXP 27
3505: ARRAY
3506: PPUSH
3507: LD_EXP 44
3511: PUSH
3512: LD_VAR 0 3
3516: ARRAY
3517: PUSH
3518: LD_INT 1
3520: ARRAY
3521: PPUSH
3522: LD_EXP 44
3526: PUSH
3527: LD_VAR 0 3
3531: ARRAY
3532: PUSH
3533: LD_INT 2
3535: ARRAY
3536: PPUSH
3537: LD_INT 4
3539: PPUSH
3540: LD_INT 0
3542: PPUSH
3543: CALL_OW 50
// end else
3547: GO 3616
// begin sci2 := sci2 ^ CreateHuman ;
3549: LD_ADDR_EXP 28
3553: PUSH
3554: LD_EXP 28
3558: PUSH
3559: CALL_OW 44
3563: ADD
3564: ST_TO_ADDR
// PlaceUnitXYR ( sci2 [ sci2 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3565: LD_EXP 28
3569: PUSH
3570: LD_EXP 28
3574: ARRAY
3575: PPUSH
3576: LD_EXP 44
3580: PUSH
3581: LD_VAR 0 3
3585: ARRAY
3586: PUSH
3587: LD_INT 1
3589: ARRAY
3590: PPUSH
3591: LD_EXP 44
3595: PUSH
3596: LD_VAR 0 3
3600: ARRAY
3601: PUSH
3602: LD_INT 2
3604: ARRAY
3605: PPUSH
3606: LD_INT 4
3608: PPUSH
3609: LD_INT 0
3611: PPUSH
3612: CALL_OW 50
// end end ; if n2 then
3616: LD_VAR 0 17
3620: IFFALSE 3856
// begin hc_name = Tanya Garinova ;
3622: LD_ADDR_OWVAR 26
3626: PUSH
3627: LD_STRING Tanya Garinova
3629: ST_TO_ADDR
// hc_sex = sex_female ;
3630: LD_ADDR_OWVAR 27
3634: PUSH
3635: LD_INT 2
3637: ST_TO_ADDR
// hc_class = class_scientistic ;
3638: LD_ADDR_OWVAR 28
3642: PUSH
3643: LD_INT 4
3645: ST_TO_ADDR
// hc_gallery = multi ;
3646: LD_ADDR_OWVAR 33
3650: PUSH
3651: LD_STRING multi
3653: ST_TO_ADDR
// hc_face_number = 1 ;
3654: LD_ADDR_OWVAR 34
3658: PUSH
3659: LD_INT 1
3661: ST_TO_ADDR
// hc_attr = [ 9 , 11 ] ;
3662: LD_ADDR_OWVAR 29
3666: PUSH
3667: LD_INT 9
3669: PUSH
3670: LD_INT 11
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: ST_TO_ADDR
// hc_basic_skills = [ 1 , 1 , 0 , 1 ] ;
3677: LD_ADDR_OWVAR 30
3681: PUSH
3682: LD_INT 1
3684: PUSH
3685: LD_INT 1
3687: PUSH
3688: LD_INT 0
3690: PUSH
3691: LD_INT 1
3693: PUSH
3694: EMPTY
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: ST_TO_ADDR
// hc_skills = sci2_skills ;
3700: LD_ADDR_OWVAR 31
3704: PUSH
3705: LD_EXP 21
3709: ST_TO_ADDR
// if t = 1 then
3710: LD_VAR 0 15
3714: PUSH
3715: LD_INT 1
3717: EQUAL
3718: IFFALSE 3789
// begin sci1 := sci1 ^ CreateHuman ;
3720: LD_ADDR_EXP 27
3724: PUSH
3725: LD_EXP 27
3729: PUSH
3730: CALL_OW 44
3734: ADD
3735: ST_TO_ADDR
// PlaceUnitXYR ( sci1 [ sci1 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3736: LD_EXP 27
3740: PUSH
3741: LD_EXP 27
3745: ARRAY
3746: PPUSH
3747: LD_EXP 44
3751: PUSH
3752: LD_VAR 0 3
3756: ARRAY
3757: PUSH
3758: LD_INT 1
3760: ARRAY
3761: PPUSH
3762: LD_EXP 44
3766: PUSH
3767: LD_VAR 0 3
3771: ARRAY
3772: PUSH
3773: LD_INT 2
3775: ARRAY
3776: PPUSH
3777: LD_INT 4
3779: PPUSH
3780: LD_INT 0
3782: PPUSH
3783: CALL_OW 50
// end else
3787: GO 3856
// begin sci2 := sci2 ^ CreateHuman ;
3789: LD_ADDR_EXP 28
3793: PUSH
3794: LD_EXP 28
3798: PUSH
3799: CALL_OW 44
3803: ADD
3804: ST_TO_ADDR
// PlaceUnitXYR ( sci2 [ sci2 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3805: LD_EXP 28
3809: PUSH
3810: LD_EXP 28
3814: ARRAY
3815: PPUSH
3816: LD_EXP 44
3820: PUSH
3821: LD_VAR 0 3
3825: ARRAY
3826: PUSH
3827: LD_INT 1
3829: ARRAY
3830: PPUSH
3831: LD_EXP 44
3835: PUSH
3836: LD_VAR 0 3
3840: ARRAY
3841: PUSH
3842: LD_INT 2
3844: ARRAY
3845: PPUSH
3846: LD_INT 4
3848: PPUSH
3849: LD_INT 0
3851: PPUSH
3852: CALL_OW 50
// end end ; SetTech ( tech_TargTeleport , side , state_researched ) ;
3856: LD_INT 38
3858: PPUSH
3859: LD_VAR 0 1
3863: PPUSH
3864: LD_INT 2
3866: PPUSH
3867: CALL_OW 322
// SetRestrict ( b_teleport , side , state_disabled ) ;
3871: LD_INT 34
3873: PPUSH
3874: LD_VAR 0 1
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL_OW 324
// end ; uc_nation = Side_nations [ side ] ;
3886: LD_ADDR_OWVAR 21
3890: PUSH
3891: LD_EXP 36
3895: PUSH
3896: LD_VAR 0 1
3900: ARRAY
3901: ST_TO_ADDR
// hc_gallery =  ;
3902: LD_ADDR_OWVAR 33
3906: PUSH
3907: LD_STRING 
3909: ST_TO_ADDR
// hc_name =  ;
3910: LD_ADDR_OWVAR 26
3914: PUSH
3915: LD_STRING 
3917: ST_TO_ADDR
// neng := number_of_people ;
3918: LD_ADDR_VAR 0 11
3922: PUSH
3923: LD_EXP 14
3927: ST_TO_ADDR
// nsol := number_of_breastworks ;
3928: LD_ADDR_VAR 0 14
3932: PUSH
3933: LD_EXP 13
3937: ST_TO_ADDR
// if nsol < neng div 4 then
3938: LD_VAR 0 14
3942: PUSH
3943: LD_VAR 0 11
3947: PUSH
3948: LD_INT 4
3950: DIV
3951: LESS
3952: IFFALSE 3968
// nsol := neng div 4 ;
3954: LD_ADDR_VAR 0 14
3958: PUSH
3959: LD_VAR 0 11
3963: PUSH
3964: LD_INT 4
3966: DIV
3967: ST_TO_ADDR
// neng := neng - nsol ;
3968: LD_ADDR_VAR 0 11
3972: PUSH
3973: LD_VAR 0 11
3977: PUSH
3978: LD_VAR 0 14
3982: MINUS
3983: ST_TO_ADDR
// nsci := neng div 3 ;
3984: LD_ADDR_VAR 0 12
3988: PUSH
3989: LD_VAR 0 11
3993: PUSH
3994: LD_INT 3
3996: DIV
3997: ST_TO_ADDR
// if nsci < 1 then
3998: LD_VAR 0 12
4002: PUSH
4003: LD_INT 1
4005: LESS
4006: IFFALSE 4016
// nsci := 1 ;
4008: LD_ADDR_VAR 0 12
4012: PUSH
4013: LD_INT 1
4015: ST_TO_ADDR
// neng := neng - nsci ;
4016: LD_ADDR_VAR 0 11
4020: PUSH
4021: LD_VAR 0 11
4025: PUSH
4026: LD_VAR 0 12
4030: MINUS
4031: ST_TO_ADDR
// nmech := neng div 2 ;
4032: LD_ADDR_VAR 0 13
4036: PUSH
4037: LD_VAR 0 11
4041: PUSH
4042: LD_INT 2
4044: DIV
4045: ST_TO_ADDR
// neng := neng - nmech ;
4046: LD_ADDR_VAR 0 11
4050: PUSH
4051: LD_VAR 0 11
4055: PUSH
4056: LD_VAR 0 13
4060: MINUS
4061: ST_TO_ADDR
// if neng < 1 then
4062: LD_VAR 0 11
4066: PUSH
4067: LD_INT 1
4069: LESS
4070: IFFALSE 4080
// neng := 1 ;
4072: LD_ADDR_VAR 0 11
4076: PUSH
4077: LD_INT 1
4079: ST_TO_ADDR
// soldiers_created := 0 ;
4080: LD_ADDR_LOC 3
4084: PUSH
4085: LD_INT 0
4087: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4088: LD_ADDR_VAR 0 6
4092: PUSH
4093: DOUBLE
4094: LD_INT 1
4096: DEC
4097: ST_TO_ADDR
4098: LD_EXP 13
4102: PUSH
4103: FOR_TO
4104: IFFALSE 4358
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4106: LD_ADDR_VAR 0 4
4110: PUSH
4111: LD_EXP 42
4115: PUSH
4116: LD_VAR 0 3
4120: ARRAY
4121: PUSH
4122: LD_VAR 0 6
4126: ARRAY
4127: PUSH
4128: LD_INT 1
4130: ARRAY
4131: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4132: LD_ADDR_VAR 0 5
4136: PUSH
4137: LD_EXP 42
4141: PUSH
4142: LD_VAR 0 3
4146: ARRAY
4147: PUSH
4148: LD_VAR 0 6
4152: ARRAY
4153: PUSH
4154: LD_INT 2
4156: ARRAY
4157: ST_TO_ADDR
// bc_type := b_breastwork ;
4158: LD_ADDR_OWVAR 42
4162: PUSH
4163: LD_INT 31
4165: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ i ] [ 3 ] ) ;
4166: LD_ADDR_VAR 0 9
4170: PUSH
4171: LD_VAR 0 4
4175: PPUSH
4176: LD_VAR 0 5
4180: PPUSH
4181: LD_EXP 42
4185: PUSH
4186: LD_VAR 0 3
4190: ARRAY
4191: PUSH
4192: LD_VAR 0 6
4196: ARRAY
4197: PUSH
4198: LD_INT 3
4200: ARRAY
4201: PPUSH
4202: CALL_OW 47
4206: ST_TO_ADDR
// x := ShiftX ( x , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4207: LD_ADDR_VAR 0 4
4211: PUSH
4212: LD_VAR 0 4
4216: PPUSH
4217: LD_EXP 42
4221: PUSH
4222: LD_VAR 0 3
4226: ARRAY
4227: PUSH
4228: LD_VAR 0 6
4232: ARRAY
4233: PUSH
4234: LD_INT 3
4236: ARRAY
4237: PPUSH
4238: LD_INT 2
4240: PPUSH
4241: CALL_OW 272
4245: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4246: LD_ADDR_VAR 0 5
4250: PUSH
4251: LD_VAR 0 5
4255: PPUSH
4256: LD_EXP 42
4260: PUSH
4261: LD_VAR 0 3
4265: ARRAY
4266: PUSH
4267: LD_VAR 0 6
4271: ARRAY
4272: PUSH
4273: LD_INT 3
4275: ARRAY
4276: PPUSH
4277: LD_INT 2
4279: PPUSH
4280: CALL_OW 273
4284: ST_TO_ADDR
// sol := prepare_people ( side , 1 , class_soldier , x , y , 1 , commander ) [ 1 ] ;
4285: LD_ADDR_VAR 0 8
4289: PUSH
4290: LD_VAR 0 1
4294: PPUSH
4295: LD_INT 1
4297: PPUSH
4298: LD_INT 1
4300: PPUSH
4301: LD_VAR 0 4
4305: PPUSH
4306: LD_VAR 0 5
4310: PPUSH
4311: LD_INT 1
4313: PPUSH
4314: LD_ADDR_EXP 45
4318: PPUSH
4319: CALL 1970 0 7
4323: PUSH
4324: LD_INT 1
4326: ARRAY
4327: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4328: LD_ADDR_LOC 3
4332: PUSH
4333: LD_LOC 3
4337: PUSH
4338: LD_INT 1
4340: PLUS
4341: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4342: LD_VAR 0 8
4346: PPUSH
4347: LD_VAR 0 9
4351: PPUSH
4352: CALL_OW 120
// end ;
4356: GO 4103
4358: POP
4359: POP
// x := start_def [ pos ] [ 1 ] ;
4360: LD_ADDR_VAR 0 4
4364: PUSH
4365: LD_EXP 43
4369: PUSH
4370: LD_VAR 0 3
4374: ARRAY
4375: PUSH
4376: LD_INT 1
4378: ARRAY
4379: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4380: LD_ADDR_VAR 0 5
4384: PUSH
4385: LD_EXP 43
4389: PUSH
4390: LD_VAR 0 3
4394: ARRAY
4395: PUSH
4396: LD_INT 2
4398: ARRAY
4399: ST_TO_ADDR
// prepare_people ( side , nsol - number_of_breastworks , class_soldier , x , y , 5 , commander ) ;
4400: LD_VAR 0 1
4404: PPUSH
4405: LD_VAR 0 14
4409: PUSH
4410: LD_EXP 13
4414: MINUS
4415: PPUSH
4416: LD_INT 1
4418: PPUSH
4419: LD_VAR 0 4
4423: PPUSH
4424: LD_VAR 0 5
4428: PPUSH
4429: LD_INT 5
4431: PPUSH
4432: LD_ADDR_EXP 45
4436: PPUSH
4437: CALL 1970 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
4441: LD_VAR 0 1
4445: PPUSH
4446: LD_VAR 0 11
4450: PPUSH
4451: LD_INT 2
4453: PPUSH
4454: LD_VAR 0 4
4458: PPUSH
4459: LD_VAR 0 5
4463: PPUSH
4464: LD_INT 5
4466: PPUSH
4467: LD_ADDR_EXP 45
4471: PPUSH
4472: CALL 1970 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
4476: LD_VAR 0 1
4480: PPUSH
4481: LD_VAR 0 13
4485: PPUSH
4486: LD_INT 3
4488: PPUSH
4489: LD_VAR 0 4
4493: PPUSH
4494: LD_VAR 0 5
4498: PPUSH
4499: LD_INT 5
4501: PPUSH
4502: LD_ADDR_EXP 45
4506: PPUSH
4507: CALL 1970 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_VAR 0 12
4520: PPUSH
4521: LD_INT 4
4523: PPUSH
4524: LD_VAR 0 4
4528: PPUSH
4529: LD_VAR 0 5
4533: PPUSH
4534: LD_INT 5
4536: PPUSH
4537: LD_ADDR_EXP 45
4541: PPUSH
4542: CALL 1970 0 7
// if not global_defined then
4546: LD_LOC 2
4550: NOT
4551: IFFALSE 4561
// global_defined := true ;
4553: LD_ADDR_LOC 2
4557: PUSH
4558: LD_INT 1
4560: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4561: LD_EXP 9
4565: PUSH
4566: LD_INT 20
4568: PPUSH
4569: LD_VAR 0 1
4573: PPUSH
4574: CALL_OW 321
4578: PUSH
4579: LD_INT 1
4581: EQUAL
4582: AND
4583: IFFALSE 4600
// SetTech ( tech_SibDet , side , state_researched ) ;
4585: LD_INT 20
4587: PPUSH
4588: LD_VAR 0 1
4592: PPUSH
4593: LD_INT 2
4595: PPUSH
4596: CALL_OW 322
// if def_sib_rocket_enabled = 1 then
4600: LD_EXP 10
4604: PUSH
4605: LD_INT 1
4607: EQUAL
4608: IFFALSE 4642
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4610: LD_INT 25
4612: PPUSH
4613: LD_VAR 0 1
4617: PPUSH
4618: LD_INT 1
4620: PPUSH
4621: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4625: LD_INT 73
4627: PPUSH
4628: LD_VAR 0 1
4632: PPUSH
4633: LD_INT 1
4635: PPUSH
4636: CALL_OW 322
// end else
4640: GO 4672
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4642: LD_INT 25
4644: PPUSH
4645: LD_VAR 0 1
4649: PPUSH
4650: LD_INT 0
4652: PPUSH
4653: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4657: LD_INT 73
4659: PPUSH
4660: LD_VAR 0 1
4664: PPUSH
4665: LD_INT 0
4667: PPUSH
4668: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4672: LD_INT 24
4674: PPUSH
4675: LD_VAR 0 1
4679: PPUSH
4680: LD_INT 0
4682: PPUSH
4683: CALL_OW 322
// end ;
4687: LD_VAR 0 2
4691: RET
// every 0 0$1 do
4692: GO 4694
4694: DISABLE
// if ( def_sib_rocket_enabled > 1 ) then
4695: LD_EXP 10
4699: PUSH
4700: LD_INT 1
4702: GREATER
4703: IFFALSE 4718
// begin wait ( siberite_bomb_Delay ) ;
4705: LD_EXP 24
4709: PPUSH
4710: CALL_OW 67
// EnableSibFiss ;
4714: CALL 4719 0 0
// end ;
4718: END
// function EnableSibFiss ; var i ; begin
4719: LD_INT 0
4721: PPUSH
4722: PPUSH
// for i := 1 to 8 do
4723: LD_ADDR_VAR 0 2
4727: PUSH
4728: DOUBLE
4729: LD_INT 1
4731: DEC
4732: ST_TO_ADDR
4733: LD_INT 8
4735: PUSH
4736: FOR_TO
4737: IFFALSE 4783
// if Side_Positions [ i ] then
4739: LD_EXP 35
4743: PUSH
4744: LD_VAR 0 2
4748: ARRAY
4749: IFFALSE 4781
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4751: LD_INT 25
4753: PPUSH
4754: LD_VAR 0 2
4758: PPUSH
4759: LD_INT 1
4761: PPUSH
4762: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4766: LD_INT 73
4768: PPUSH
4769: LD_VAR 0 2
4773: PPUSH
4774: LD_INT 1
4776: PPUSH
4777: CALL_OW 322
// end ;
4781: GO 4736
4783: POP
4784: POP
// end ;
4785: LD_VAR 0 1
4789: RET
// function prepare_sides ; var i ; begin
4790: LD_INT 0
4792: PPUSH
4793: PPUSH
// global_units := [ ] ;
4794: LD_ADDR_LOC 1
4798: PUSH
4799: EMPTY
4800: ST_TO_ADDR
// global_defined := false ;
4801: LD_ADDR_LOC 2
4805: PUSH
4806: LD_INT 0
4808: ST_TO_ADDR
// for i := 1 to 8 do
4809: LD_ADDR_VAR 0 2
4813: PUSH
4814: DOUBLE
4815: LD_INT 1
4817: DEC
4818: ST_TO_ADDR
4819: LD_INT 8
4821: PUSH
4822: FOR_TO
4823: IFFALSE 4848
// if Side_Positions [ i ] then
4825: LD_EXP 35
4829: PUSH
4830: LD_VAR 0 2
4834: ARRAY
4835: IFFALSE 4846
// prepare_side ( i ) ;
4837: LD_VAR 0 2
4841: PPUSH
4842: CALL 2467 0 1
4846: GO 4822
4848: POP
4849: POP
// end ;
4850: LD_VAR 0 1
4854: RET
// starting begin DE_Triggers ;
4855: CALL 7309 0 0
// read_multiplayer_and_game_parameters ;
4859: CALL 0 0 0
// if Game_Type = 66 then
4863: LD_EXP 1
4867: PUSH
4868: LD_INT 66
4870: EQUAL
4871: IFFALSE 4879
// begin starting_standard ;
4873: CALL 10962 0 0
// exit ;
4877: GO 4981
// end ; enable ( 44 ) ;
4879: LD_INT 44
4881: ENABLE_MARKED
// enable ( 45 ) ;
4882: LD_INT 45
4884: ENABLE_MARKED
// mp_selectmsg := true ;
4885: LD_ADDR_OWVAR 13
4889: PUSH
4890: LD_INT 1
4892: ST_TO_ADDR
// prepare_map_coordinates ;
4893: CALL 1222 0 0
// set_shared_visions_and_alliances ;
4897: CALL 1761 0 0
// prepare_sides ;
4901: CALL 4790 0 0
// init_shipments_and_respawning ;
4905: CALL 4990 0 0
// your_side := Player_Side ;
4909: LD_ADDR_OWVAR 2
4913: PUSH
4914: LD_EXP 31
4918: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4919: LD_ADDR_OWVAR 71
4923: PUSH
4924: LD_EXP 36
4928: PUSH
4929: LD_OWVAR 2
4933: ARRAY
4934: ST_TO_ADDR
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4935: LD_EXP 43
4939: PUSH
4940: LD_EXP 35
4944: PUSH
4945: LD_OWVAR 2
4949: ARRAY
4950: ARRAY
4951: PUSH
4952: LD_INT 1
4954: ARRAY
4955: PPUSH
4956: LD_EXP 43
4960: PUSH
4961: LD_EXP 35
4965: PUSH
4966: LD_OWVAR 2
4970: ARRAY
4971: ARRAY
4972: PUSH
4973: LD_INT 2
4975: ARRAY
4976: PPUSH
4977: CALL_OW 86
// end ;
4981: END
// export function OnHumanRespawned ( un ) ; begin
4982: LD_INT 0
4984: PPUSH
// end ; end_of_file
4985: LD_VAR 0 2
4989: RET
// var shipment1 , shipment2 , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4990: LD_INT 0
4992: PPUSH
// shipment1 := [ ] ;
4993: LD_ADDR_LOC 4
4997: PUSH
4998: EMPTY
4999: ST_TO_ADDR
// shipment2 := [ ] ;
5000: LD_ADDR_LOC 5
5004: PUSH
5005: EMPTY
5006: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5007: LD_ADDR_LOC 6
5011: PUSH
5012: LD_INT 1
5014: PPUSH
5015: LD_INT 8
5017: PPUSH
5018: CALL_OW 12
5022: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5023: LD_ADDR_LOC 7
5027: PUSH
5028: LD_INT 0
5030: PUSH
5031: LD_INT 0
5033: PUSH
5034: LD_INT 0
5036: PUSH
5037: LD_INT 0
5039: PUSH
5040: LD_INT 0
5042: PUSH
5043: LD_INT 0
5045: PUSH
5046: LD_INT 0
5048: PUSH
5049: LD_INT 0
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: ST_TO_ADDR
// end ;
5062: LD_VAR 0 1
5066: RET
// every 0 0$1 + 0 0$0.5 marked 45 do var n , building_list , aktresp , b ;
5067: GO 5069
5069: DISABLE
5070: LD_INT 0
5072: PPUSH
5073: PPUSH
5074: PPUSH
5075: PPUSH
// begin if respawning_time_max = 0 then
5076: LD_EXP 23
5080: PUSH
5081: LD_INT 0
5083: EQUAL
5084: IFFALSE 5088
// exit ;
5086: GO 5595
// if respawn = 8 then
5088: LD_LOC 6
5092: PUSH
5093: LD_INT 8
5095: EQUAL
5096: IFFALSE 5108
// respawn := 1 else
5098: LD_ADDR_LOC 6
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
5106: GO 5122
// respawn := respawn + 1 ;
5108: LD_ADDR_LOC 6
5112: PUSH
5113: LD_LOC 6
5117: PUSH
5118: LD_INT 1
5120: PLUS
5121: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5122: LD_EXP 35
5126: PUSH
5127: LD_LOC 6
5131: ARRAY
5132: PUSH
5133: LD_LOC 7
5137: PUSH
5138: LD_LOC 6
5142: ARRAY
5143: NOT
5144: AND
5145: IFFALSE 5594
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5147: LD_ADDR_VAR 0 1
5151: PUSH
5152: LD_INT 21
5154: PUSH
5155: LD_INT 1
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 22
5164: PUSH
5165: LD_LOC 6
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: PUSH
5174: LD_INT 3
5176: PUSH
5177: LD_INT 23
5179: PUSH
5180: LD_INT 0
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: PPUSH
5193: CALL_OW 69
5197: ST_TO_ADDR
// if n < number_of_people then
5198: LD_VAR 0 1
5202: PUSH
5203: LD_EXP 14
5207: LESS
5208: IFFALSE 5591
// begin aktresp := respawn ;
5210: LD_ADDR_VAR 0 3
5214: PUSH
5215: LD_LOC 6
5219: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5220: LD_ADDR_LOC 7
5224: PUSH
5225: LD_LOC 7
5229: PPUSH
5230: LD_VAR 0 3
5234: PPUSH
5235: LD_INT 1
5237: PPUSH
5238: CALL_OW 1
5242: ST_TO_ADDR
// enable ;
5243: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5244: LD_EXP 22
5248: PPUSH
5249: LD_EXP 23
5253: PPUSH
5254: CALL_OW 12
5258: PPUSH
5259: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5263: LD_ADDR_LOC 7
5267: PUSH
5268: LD_LOC 7
5272: PPUSH
5273: LD_VAR 0 3
5277: PPUSH
5278: LD_INT 0
5280: PPUSH
5281: CALL_OW 1
5285: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5286: LD_ADDR_VAR 0 2
5290: PUSH
5291: LD_INT 21
5293: PUSH
5294: LD_INT 3
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: LD_INT 30
5306: PUSH
5307: LD_INT 0
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: LD_INT 30
5316: PUSH
5317: LD_INT 1
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: LIST
5328: PUSH
5329: LD_INT 50
5331: PUSH
5332: EMPTY
5333: LIST
5334: PUSH
5335: LD_INT 22
5337: PUSH
5338: LD_VAR 0 3
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: PPUSH
5353: CALL_OW 69
5357: ST_TO_ADDR
// if building_list = 0 then
5358: LD_VAR 0 2
5362: PUSH
5363: LD_INT 0
5365: EQUAL
5366: IFFALSE 5411
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5368: LD_ADDR_VAR 0 2
5372: PUSH
5373: LD_INT 21
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: PUSH
5383: LD_INT 50
5385: PUSH
5386: EMPTY
5387: LIST
5388: PUSH
5389: LD_INT 22
5391: PUSH
5392: LD_VAR 0 3
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: PPUSH
5406: CALL_OW 69
5410: ST_TO_ADDR
// if building_list = 0 then
5411: LD_VAR 0 2
5415: PUSH
5416: LD_INT 0
5418: EQUAL
5419: IFFALSE 5423
// exit ;
5421: GO 5595
// hc_name :=  ;
5423: LD_ADDR_OWVAR 26
5427: PUSH
5428: LD_STRING 
5430: ST_TO_ADDR
// hc_importance := 0 ;
5431: LD_ADDR_OWVAR 32
5435: PUSH
5436: LD_INT 0
5438: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5439: LD_INT 0
5441: PPUSH
5442: LD_INT 0
5444: PPUSH
5445: LD_EXP 15
5449: PUSH
5450: LD_INT 2
5452: DIV
5453: PPUSH
5454: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5458: LD_ADDR_OWVAR 21
5462: PUSH
5463: LD_EXP 36
5467: PUSH
5468: LD_VAR 0 3
5472: ARRAY
5473: ST_TO_ADDR
// uc_side := aktresp ;
5474: LD_ADDR_OWVAR 20
5478: PUSH
5479: LD_VAR 0 3
5483: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5484: LD_ADDR_VAR 0 4
5488: PUSH
5489: LD_VAR 0 2
5493: PUSH
5494: LD_INT 1
5496: PPUSH
5497: LD_VAR 0 2
5501: PUSH
5502: LD_INT 0
5504: PLUS
5505: PPUSH
5506: CALL_OW 12
5510: ARRAY
5511: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5512: LD_VAR 0 4
5516: PPUSH
5517: CALL_OW 266
5521: PUSH
5522: LD_INT 0
5524: PUSH
5525: LD_INT 1
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: IN
5532: IFFALSE 5544
// n = 25 else
5534: LD_ADDR_VAR 0 1
5538: PUSH
5539: LD_INT 25
5541: ST_TO_ADDR
5542: GO 5552
// n = 10 ;
5544: LD_ADDR_VAR 0 1
5548: PUSH
5549: LD_INT 10
5551: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5552: CALL_OW 44
5556: PPUSH
5557: LD_VAR 0 4
5561: PPUSH
5562: CALL_OW 250
5566: PPUSH
5567: LD_VAR 0 4
5571: PPUSH
5572: CALL_OW 251
5576: PPUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: LD_INT 1
5584: PPUSH
5585: CALL_OW 50
// end else
5589: GO 5592
// enable ;
5591: ENABLE
// end else
5592: GO 5595
// enable ;
5594: ENABLE
// end ;
5595: PPOPN 4
5597: END
// every 0 0$5 + 0 0$1.1 marked 45 do var d , q ;
5598: GO 5600
5600: DISABLE
5601: LD_INT 0
5603: PPUSH
5604: PPUSH
// begin case tick of 1 .. 1 1$0 :
5605: LD_OWVAR 1
5609: PUSH
5610: LD_INT 1
5612: DOUBLE
5613: GREATEREQUAL
5614: IFFALSE 5622
5616: LD_INT 2100
5618: DOUBLE
5619: LESSEQUAL
5620: IFTRUE 5624
5622: GO 5635
5624: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5625: LD_ADDR_VAR 0 1
5629: PUSH
5630: LD_INT 150
5632: ST_TO_ADDR
5633: GO 5818
5635: LD_INT 2100
5637: PUSH
5638: LD_INT 1
5640: PLUS
5641: DOUBLE
5642: GREATEREQUAL
5643: IFFALSE 5651
5645: LD_INT 10500
5647: DOUBLE
5648: LESSEQUAL
5649: IFTRUE 5653
5651: GO 5664
5653: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5654: LD_ADDR_VAR 0 1
5658: PUSH
5659: LD_INT 100
5661: ST_TO_ADDR
5662: GO 5818
5664: LD_INT 10500
5666: PUSH
5667: LD_INT 1
5669: PLUS
5670: DOUBLE
5671: GREATEREQUAL
5672: IFFALSE 5680
5674: LD_INT 21000
5676: DOUBLE
5677: LESSEQUAL
5678: IFTRUE 5682
5680: GO 5693
5682: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5683: LD_ADDR_VAR 0 1
5687: PUSH
5688: LD_INT 90
5690: ST_TO_ADDR
5691: GO 5818
5693: LD_INT 21000
5695: PUSH
5696: LD_INT 1
5698: PLUS
5699: DOUBLE
5700: GREATEREQUAL
5701: IFFALSE 5709
5703: LD_INT 42000
5705: DOUBLE
5706: LESSEQUAL
5707: IFTRUE 5711
5709: GO 5722
5711: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5712: LD_ADDR_VAR 0 1
5716: PUSH
5717: LD_INT 70
5719: ST_TO_ADDR
5720: GO 5818
5722: LD_INT 42000
5724: PUSH
5725: LD_INT 1
5727: PLUS
5728: DOUBLE
5729: GREATEREQUAL
5730: IFFALSE 5738
5732: LD_INT 63000
5734: DOUBLE
5735: LESSEQUAL
5736: IFTRUE 5740
5738: GO 5751
5740: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5741: LD_ADDR_VAR 0 1
5745: PUSH
5746: LD_INT 60
5748: ST_TO_ADDR
5749: GO 5818
5751: LD_INT 63000
5753: PUSH
5754: LD_INT 1
5756: PLUS
5757: DOUBLE
5758: GREATEREQUAL
5759: IFFALSE 5767
5761: LD_INT 105000
5763: DOUBLE
5764: LESSEQUAL
5765: IFTRUE 5769
5767: GO 5780
5769: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5770: LD_ADDR_VAR 0 1
5774: PUSH
5775: LD_INT 35
5777: ST_TO_ADDR
5778: GO 5818
5780: LD_INT 105000
5782: PUSH
5783: LD_INT 1
5785: PLUS
5786: DOUBLE
5787: GREATEREQUAL
5788: IFFALSE 5796
5790: LD_INT 630000
5792: DOUBLE
5793: LESSEQUAL
5794: IFTRUE 5798
5796: GO 5809
5798: POP
// d := 20 ; else
5799: LD_ADDR_VAR 0 1
5803: PUSH
5804: LD_INT 20
5806: ST_TO_ADDR
5807: GO 5818
5809: POP
// d := 0 ; end ;
5810: LD_ADDR_VAR 0 1
5814: PUSH
5815: LD_INT 0
5817: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
5818: LD_INT 1
5820: PPUSH
5821: LD_INT 10000
5823: PPUSH
5824: CALL_OW 12
5828: PUSH
5829: LD_VAR 0 1
5833: PUSH
5834: LD_EXP 18
5838: MUL
5839: PUSH
5840: LD_INT 2
5842: DIV
5843: LESSEQUAL
5844: IFFALSE 5951
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5846: LD_INT 1
5848: PPUSH
5849: LD_INT 140
5851: PPUSH
5852: CALL_OW 12
5856: PPUSH
5857: CALL_OW 67
// if shipment1 = [ ] then
5861: LD_LOC 4
5865: PUSH
5866: EMPTY
5867: EQUAL
5868: IFFALSE 5893
// shipment1 := [ q1 , q2 , q3 , q4 ] ;
5870: LD_ADDR_LOC 4
5874: PUSH
5875: LD_INT 3
5877: PUSH
5878: LD_INT 4
5880: PUSH
5881: LD_INT 5
5883: PUSH
5884: LD_INT 6
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: ST_TO_ADDR
// q := shipment1 [ Rand ( 1 , shipment1 ) ] ;
5893: LD_ADDR_VAR 0 2
5897: PUSH
5898: LD_LOC 4
5902: PUSH
5903: LD_INT 1
5905: PPUSH
5906: LD_LOC 4
5910: PPUSH
5911: CALL_OW 12
5915: ARRAY
5916: ST_TO_ADDR
// shipment1 := shipment1 diff [ q ] ;
5917: LD_ADDR_LOC 4
5921: PUSH
5922: LD_LOC 4
5926: PUSH
5927: LD_VAR 0 2
5931: PUSH
5932: EMPTY
5933: LIST
5934: DIFF
5935: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
5936: LD_INT 5
5938: PPUSH
5939: LD_VAR 0 2
5943: PPUSH
5944: LD_INT 1
5946: PPUSH
5947: CALL_OW 55
// end ; enable ;
5951: ENABLE
// end ;
5952: PPOPN 2
5954: END
// every 0 0$5 + 0 0$1.1 marked 45 do var d , q ;
5955: GO 5957
5957: DISABLE
5958: LD_INT 0
5960: PPUSH
5961: PPUSH
// begin case tick of 1 .. 1 1$0 :
5962: LD_OWVAR 1
5966: PUSH
5967: LD_INT 1
5969: DOUBLE
5970: GREATEREQUAL
5971: IFFALSE 5979
5973: LD_INT 2100
5975: DOUBLE
5976: LESSEQUAL
5977: IFTRUE 5981
5979: GO 5992
5981: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5982: LD_ADDR_VAR 0 1
5986: PUSH
5987: LD_INT 150
5989: ST_TO_ADDR
5990: GO 6175
5992: LD_INT 2100
5994: PUSH
5995: LD_INT 1
5997: PLUS
5998: DOUBLE
5999: GREATEREQUAL
6000: IFFALSE 6008
6002: LD_INT 10500
6004: DOUBLE
6005: LESSEQUAL
6006: IFTRUE 6010
6008: GO 6021
6010: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
6011: LD_ADDR_VAR 0 1
6015: PUSH
6016: LD_INT 100
6018: ST_TO_ADDR
6019: GO 6175
6021: LD_INT 10500
6023: PUSH
6024: LD_INT 1
6026: PLUS
6027: DOUBLE
6028: GREATEREQUAL
6029: IFFALSE 6037
6031: LD_INT 21000
6033: DOUBLE
6034: LESSEQUAL
6035: IFTRUE 6039
6037: GO 6050
6039: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
6040: LD_ADDR_VAR 0 1
6044: PUSH
6045: LD_INT 90
6047: ST_TO_ADDR
6048: GO 6175
6050: LD_INT 21000
6052: PUSH
6053: LD_INT 1
6055: PLUS
6056: DOUBLE
6057: GREATEREQUAL
6058: IFFALSE 6066
6060: LD_INT 42000
6062: DOUBLE
6063: LESSEQUAL
6064: IFTRUE 6068
6066: GO 6079
6068: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
6069: LD_ADDR_VAR 0 1
6073: PUSH
6074: LD_INT 70
6076: ST_TO_ADDR
6077: GO 6175
6079: LD_INT 42000
6081: PUSH
6082: LD_INT 1
6084: PLUS
6085: DOUBLE
6086: GREATEREQUAL
6087: IFFALSE 6095
6089: LD_INT 63000
6091: DOUBLE
6092: LESSEQUAL
6093: IFTRUE 6097
6095: GO 6108
6097: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
6098: LD_ADDR_VAR 0 1
6102: PUSH
6103: LD_INT 60
6105: ST_TO_ADDR
6106: GO 6175
6108: LD_INT 63000
6110: PUSH
6111: LD_INT 1
6113: PLUS
6114: DOUBLE
6115: GREATEREQUAL
6116: IFFALSE 6124
6118: LD_INT 105000
6120: DOUBLE
6121: LESSEQUAL
6122: IFTRUE 6126
6124: GO 6137
6126: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
6127: LD_ADDR_VAR 0 1
6131: PUSH
6132: LD_INT 35
6134: ST_TO_ADDR
6135: GO 6175
6137: LD_INT 105000
6139: PUSH
6140: LD_INT 1
6142: PLUS
6143: DOUBLE
6144: GREATEREQUAL
6145: IFFALSE 6153
6147: LD_INT 630000
6149: DOUBLE
6150: LESSEQUAL
6151: IFTRUE 6155
6153: GO 6166
6155: POP
// d := 20 ; else
6156: LD_ADDR_VAR 0 1
6160: PUSH
6161: LD_INT 20
6163: ST_TO_ADDR
6164: GO 6175
6166: POP
// d := 0 ; end ;
6167: LD_ADDR_VAR 0 1
6171: PUSH
6172: LD_INT 0
6174: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
6175: LD_INT 1
6177: PPUSH
6178: LD_INT 10000
6180: PPUSH
6181: CALL_OW 12
6185: PUSH
6186: LD_VAR 0 1
6190: PUSH
6191: LD_EXP 18
6195: MUL
6196: PUSH
6197: LD_INT 2
6199: DIV
6200: LESSEQUAL
6201: IFFALSE 6324
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6203: LD_INT 1
6205: PPUSH
6206: LD_INT 140
6208: PPUSH
6209: CALL_OW 12
6213: PPUSH
6214: CALL_OW 67
// if shipment2 = [ ] then
6218: LD_LOC 5
6222: PUSH
6223: EMPTY
6224: EQUAL
6225: IFFALSE 6266
// shipment2 := [ q1a , q2a , q3a , q4a , q1b , q2b , q3b , q4b ] ;
6227: LD_ADDR_LOC 5
6231: PUSH
6232: LD_INT 7
6234: PUSH
6235: LD_INT 8
6237: PUSH
6238: LD_INT 9
6240: PUSH
6241: LD_INT 10
6243: PUSH
6244: LD_INT 11
6246: PUSH
6247: LD_INT 12
6249: PUSH
6250: LD_INT 13
6252: PUSH
6253: LD_INT 14
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: ST_TO_ADDR
// q := shipment2 [ Rand ( 1 , shipment2 ) ] ;
6266: LD_ADDR_VAR 0 2
6270: PUSH
6271: LD_LOC 5
6275: PUSH
6276: LD_INT 1
6278: PPUSH
6279: LD_LOC 5
6283: PPUSH
6284: CALL_OW 12
6288: ARRAY
6289: ST_TO_ADDR
// shipment2 := shipment2 diff [ q ] ;
6290: LD_ADDR_LOC 5
6294: PUSH
6295: LD_LOC 5
6299: PUSH
6300: LD_VAR 0 2
6304: PUSH
6305: EMPTY
6306: LIST
6307: DIFF
6308: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
6309: LD_INT 5
6311: PPUSH
6312: LD_VAR 0 2
6316: PPUSH
6317: LD_INT 1
6319: PPUSH
6320: CALL_OW 55
// end ; enable ;
6324: ENABLE
// end ; end_of_file
6325: PPOPN 2
6327: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6328: LD_INT 0
6330: PPUSH
6331: PPUSH
// for un in battle_flags_id do
6332: LD_ADDR_VAR 0 2
6336: PUSH
6337: LD_EXP 50
6341: PUSH
6342: FOR_IN
6343: IFFALSE 6418
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6345: LD_VAR 0 2
6349: PPUSH
6350: LD_INT 1
6352: PUSH
6353: LD_LOC 8
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: LD_INT 2
6364: PUSH
6365: LD_LOC 8
6369: PUSH
6370: LD_INT 2
6372: DIV
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 3
6380: PUSH
6381: LD_LOC 8
6385: PUSH
6386: LD_INT 5
6388: DIV
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 20
6396: PUSH
6397: LD_LOC 8
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PPUSH
6412: CALL_OW 423
6416: GO 6342
6418: POP
6419: POP
// end ;
6420: LD_VAR 0 1
6424: RET
// every 0 0$0.1 marked 45 do var un ;
6425: GO 6427
6427: DISABLE
6428: LD_INT 0
6430: PPUSH
// begin if not def_morale_flags then
6431: LD_EXP 8
6435: NOT
6436: IFFALSE 6440
// exit ;
6438: GO 6517
// if not morale_decreasing_time then
6440: LD_EXP 19
6444: NOT
6445: IFFALSE 6449
// exit ;
6447: GO 6517
// strength = 100 ;
6449: LD_ADDR_LOC 8
6453: PUSH
6454: LD_INT 100
6456: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6457: LD_EXP 19
6461: PPUSH
6462: CALL_OW 67
// strength := strength - 1 ;
6466: LD_ADDR_LOC 8
6470: PUSH
6471: LD_LOC 8
6475: PUSH
6476: LD_INT 1
6478: MINUS
6479: ST_TO_ADDR
// Update_Flags ;
6480: CALL 6328 0 0
// until not strength ;
6484: LD_LOC 8
6488: NOT
6489: IFFALSE 6457
// for un in battle_flags_id do
6491: LD_ADDR_VAR 0 1
6495: PUSH
6496: LD_EXP 50
6500: PUSH
6501: FOR_IN
6502: IFFALSE 6515
// KillBattleFlag ( un ) ;
6504: LD_VAR 0 1
6508: PPUSH
6509: CALL_OW 419
6513: GO 6501
6515: POP
6516: POP
// end ;
6517: PPOPN 1
6519: END
// every 0 0$1 marked 44 do var l1 , l2 ;
6520: GO 6522
6522: DISABLE
6523: LD_INT 0
6525: PPUSH
6526: PPUSH
// begin if not ( game_type in [ 11 , 12 ] ) then
6527: LD_EXP 1
6531: PUSH
6532: LD_INT 11
6534: PUSH
6535: LD_INT 12
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: IN
6542: NOT
6543: IFFALSE 6547
// exit ;
6545: GO 6953
// if not your_side then
6547: LD_OWVAR 2
6551: NOT
6552: IFFALSE 6557
// begin enable ;
6554: ENABLE
// exit ;
6555: GO 6953
// end ; l1 := UnitFilter ( sci1 , [ f_alive ] ) ;
6557: LD_ADDR_VAR 0 1
6561: PUSH
6562: LD_EXP 27
6566: PPUSH
6567: LD_INT 51
6569: PUSH
6570: EMPTY
6571: LIST
6572: PPUSH
6573: CALL_OW 72
6577: ST_TO_ADDR
// l2 := UnitFilter ( sci2 , [ f_alive ] ) ;
6578: LD_ADDR_VAR 0 2
6582: PUSH
6583: LD_EXP 28
6587: PPUSH
6588: LD_INT 51
6590: PUSH
6591: EMPTY
6592: LIST
6593: PPUSH
6594: CALL_OW 72
6598: ST_TO_ADDR
// if not l1 and not l2 then
6599: LD_VAR 0 1
6603: NOT
6604: PUSH
6605: LD_VAR 0 2
6609: NOT
6610: AND
6611: IFFALSE 6628
// begin wait ( 0 0$3 ) ;
6613: LD_INT 105
6615: PPUSH
6616: CALL_OW 67
// YouLostInMultiplayer ;
6620: CALL_OW 107
// exit ;
6624: GO 6953
// end else
6626: GO 6952
// if not l1 then
6628: LD_VAR 0 1
6632: NOT
6633: IFFALSE 6705
// begin if Side_teams [ your_side ] = 1 then
6635: LD_EXP 33
6639: PUSH
6640: LD_OWVAR 2
6644: ARRAY
6645: PUSH
6646: LD_INT 1
6648: EQUAL
6649: IFFALSE 6678
// begin CenterOnXY ( lastxlost , lastylost ) ;
6651: LD_LOC 11
6655: PPUSH
6656: LD_LOC 12
6660: PPUSH
6661: CALL_OW 84
// wait ( 0 0$3 ) ;
6665: LD_INT 105
6667: PPUSH
6668: CALL_OW 67
// YouLostInMultiplayer ;
6672: CALL_OW 107
// end else
6676: GO 6703
// begin CenterOnXY ( lastxwin , lastywin ) ;
6678: LD_LOC 9
6682: PPUSH
6683: LD_LOC 10
6687: PPUSH
6688: CALL_OW 84
// wait ( 0 0$3 ) ;
6692: LD_INT 105
6694: PPUSH
6695: CALL_OW 67
// YouWinInMultiplayer ;
6699: CALL_OW 106
// end end else
6703: GO 6952
// if not l2 then
6705: LD_VAR 0 2
6709: NOT
6710: IFFALSE 6782
// begin if Side_teams [ your_side ] = 2 then
6712: LD_EXP 33
6716: PUSH
6717: LD_OWVAR 2
6721: ARRAY
6722: PUSH
6723: LD_INT 2
6725: EQUAL
6726: IFFALSE 6755
// begin CenterOnXY ( lastxlost , lastylost ) ;
6728: LD_LOC 11
6732: PPUSH
6733: LD_LOC 12
6737: PPUSH
6738: CALL_OW 84
// wait ( 0 0$3 ) ;
6742: LD_INT 105
6744: PPUSH
6745: CALL_OW 67
// YouLostInMultiplayer ;
6749: CALL_OW 107
// end else
6753: GO 6780
// begin CenterOnXY ( lastxwin , lastywin ) ;
6755: LD_LOC 9
6759: PPUSH
6760: LD_LOC 10
6764: PPUSH
6765: CALL_OW 84
// wait ( 0 0$3 ) ;
6769: LD_INT 105
6771: PPUSH
6772: CALL_OW 67
// YouWinInMultiplayer ;
6776: CALL_OW 106
// end end else
6780: GO 6952
// if Side_teams [ your_side ] = 1 then
6782: LD_EXP 33
6786: PUSH
6787: LD_OWVAR 2
6791: ARRAY
6792: PUSH
6793: LD_INT 1
6795: EQUAL
6796: IFFALSE 6876
// begin lastxwin := GetX ( l2 [ 1 ] ) ;
6798: LD_ADDR_LOC 9
6802: PUSH
6803: LD_VAR 0 2
6807: PUSH
6808: LD_INT 1
6810: ARRAY
6811: PPUSH
6812: CALL_OW 250
6816: ST_TO_ADDR
// lastywin := GetY ( l2 [ 1 ] ) ;
6817: LD_ADDR_LOC 10
6821: PUSH
6822: LD_VAR 0 2
6826: PUSH
6827: LD_INT 1
6829: ARRAY
6830: PPUSH
6831: CALL_OW 251
6835: ST_TO_ADDR
// lastxlost := GetX ( l1 [ 1 ] ) ;
6836: LD_ADDR_LOC 11
6840: PUSH
6841: LD_VAR 0 1
6845: PUSH
6846: LD_INT 1
6848: ARRAY
6849: PPUSH
6850: CALL_OW 250
6854: ST_TO_ADDR
// lastylost := GetY ( l1 [ 1 ] ) ;
6855: LD_ADDR_LOC 12
6859: PUSH
6860: LD_VAR 0 1
6864: PUSH
6865: LD_INT 1
6867: ARRAY
6868: PPUSH
6869: CALL_OW 251
6873: ST_TO_ADDR
// end else
6874: GO 6952
// begin lastxwin := GetX ( l1 [ 1 ] ) ;
6876: LD_ADDR_LOC 9
6880: PUSH
6881: LD_VAR 0 1
6885: PUSH
6886: LD_INT 1
6888: ARRAY
6889: PPUSH
6890: CALL_OW 250
6894: ST_TO_ADDR
// lastywin := GetY ( l1 [ 1 ] ) ;
6895: LD_ADDR_LOC 10
6899: PUSH
6900: LD_VAR 0 1
6904: PUSH
6905: LD_INT 1
6907: ARRAY
6908: PPUSH
6909: CALL_OW 251
6913: ST_TO_ADDR
// lastxlost := GetX ( l2 [ 1 ] ) ;
6914: LD_ADDR_LOC 11
6918: PUSH
6919: LD_VAR 0 2
6923: PUSH
6924: LD_INT 1
6926: ARRAY
6927: PPUSH
6928: CALL_OW 250
6932: ST_TO_ADDR
// lastylost := GetY ( l2 [ 1 ] ) ;
6933: LD_ADDR_LOC 12
6937: PUSH
6938: LD_VAR 0 2
6942: PUSH
6943: LD_INT 1
6945: ARRAY
6946: PPUSH
6947: CALL_OW 251
6951: ST_TO_ADDR
// end ; enable ;
6952: ENABLE
// end ;
6953: PPOPN 2
6955: END
// every 0 0$2 marked 44 do var win , i ;
6956: GO 6958
6958: DISABLE
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
// begin if game_type in [ 11 , 12 ] then
6963: LD_EXP 1
6967: PUSH
6968: LD_INT 11
6970: PUSH
6971: LD_INT 12
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: IN
6978: IFFALSE 6982
// exit ;
6980: GO 7236
// if your_side then
6982: LD_OWVAR 2
6986: IFFALSE 7235
// begin if not filterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
6988: LD_INT 22
6990: PUSH
6991: LD_OWVAR 2
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 2
7002: PUSH
7003: LD_INT 21
7005: PUSH
7006: LD_INT 1
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: PUSH
7013: LD_INT 30
7015: PUSH
7016: LD_INT 0
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 30
7025: PUSH
7026: LD_INT 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PPUSH
7043: CALL_OW 69
7047: NOT
7048: IFFALSE 7078
// begin wait ( 0 0$3 ) ;
7050: LD_INT 105
7052: PPUSH
7053: CALL_OW 67
// if IAmServer then
7057: CALL_OW 518
7061: IFFALSE 7070
// wait ( 0 0$1 ) ;
7063: LD_INT 35
7065: PPUSH
7066: CALL_OW 67
// YouLostInMultiplayer ;
7070: CALL_OW 107
// exit ;
7074: GO 7236
// end else
7076: GO 7235
// begin win := true ;
7078: LD_ADDR_VAR 0 1
7082: PUSH
7083: LD_INT 1
7085: ST_TO_ADDR
// for i := 1 to Side_positions do
7086: LD_ADDR_VAR 0 2
7090: PUSH
7091: DOUBLE
7092: LD_INT 1
7094: DEC
7095: ST_TO_ADDR
7096: LD_EXP 35
7100: PUSH
7101: FOR_TO
7102: IFFALSE 7186
// if Side_positions [ i ] and ( i <> your_side ) then
7104: LD_EXP 35
7108: PUSH
7109: LD_VAR 0 2
7113: ARRAY
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_OWVAR 2
7124: NONEQUAL
7125: AND
7126: IFFALSE 7184
// begin if MultiplayerSideAlive ( i ) then
7128: LD_VAR 0 2
7132: PPUSH
7133: CALL_OW 108
7137: IFFALSE 7184
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7139: LD_EXP 33
7143: PUSH
7144: LD_VAR 0 2
7148: ARRAY
7149: NOT
7150: PUSH
7151: LD_EXP 33
7155: PUSH
7156: LD_VAR 0 2
7160: ARRAY
7161: PUSH
7162: LD_EXP 33
7166: PUSH
7167: LD_OWVAR 2
7171: ARRAY
7172: NONEQUAL
7173: OR
7174: IFFALSE 7184
// win := false ;
7176: LD_ADDR_VAR 0 1
7180: PUSH
7181: LD_INT 0
7183: ST_TO_ADDR
// end ;
7184: GO 7101
7186: POP
7187: POP
// if win then
7188: LD_VAR 0 1
7192: IFFALSE 7235
// begin wait ( 0 0$3 ) ;
7194: LD_INT 105
7196: PPUSH
7197: CALL_OW 67
// if IAmServer then
7201: CALL_OW 518
7205: IFFALSE 7214
// wait ( 0 0$1 ) ;
7207: LD_INT 35
7209: PPUSH
7210: CALL_OW 67
// SA_Win ( Side_Nations [ Your_side ] ) ;
7214: LD_EXP 36
7218: PUSH
7219: LD_OWVAR 2
7223: ARRAY
7224: PPUSH
7225: CALL 13011 0 1
// YouWinInMultiplayer ;
7229: CALL_OW 106
// exit ;
7233: GO 7236
// end ; end ; end ; enable ;
7235: ENABLE
// end ; end_of_file
7236: PPOPN 2
7238: END
// every 10 do
7239: GO 7241
7241: DISABLE
// begin if not multiplayer then
7242: LD_OWVAR 4
7246: NOT
7247: IFFALSE 7251
// exit ;
7249: GO 7308
// if ( tick >= 100 ) then
7251: LD_OWVAR 1
7255: PUSH
7256: LD_INT 100
7258: GREATEREQUAL
7259: IFFALSE 7279
// if tick mod 20 = 0 then
7261: LD_OWVAR 1
7265: PUSH
7266: LD_INT 20
7268: MOD
7269: PUSH
7270: LD_INT 0
7272: EQUAL
7273: IFFALSE 7279
// MultiplayerCRC ;
7275: CALL_OW 361
// if ( tick >= 100 ) then
7279: LD_OWVAR 1
7283: PUSH
7284: LD_INT 100
7286: GREATEREQUAL
7287: IFFALSE 7307
// if tick mod 30 = 0 then
7289: LD_OWVAR 1
7293: PUSH
7294: LD_INT 30
7296: MOD
7297: PUSH
7298: LD_INT 0
7300: EQUAL
7301: IFFALSE 7307
// DebugLogAll ;
7303: CALL_OW 360
// enable ;
7307: ENABLE
// end ; end_of_file
7308: END
// export function DE_Triggers ; begin
7309: LD_INT 0
7311: PPUSH
// disable ( 44 ) ;
7312: LD_INT 44
7314: DISABLE_MARKED
// disable ( 45 ) ;
7315: LD_INT 45
7317: DISABLE_MARKED
// disable ( 98 ) ;
7318: LD_INT 98
7320: DISABLE_MARKED
// disable ( 99 ) ;
7321: LD_INT 99
7323: DISABLE_MARKED
// end ;
7324: LD_VAR 0 1
7328: RET
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7329: LD_VAR 0 1
7333: PPUSH
7334: LD_VAR 0 2
7338: PPUSH
7339: LD_VAR 0 3
7343: PPUSH
7344: LD_OWVAR 2
7348: PPUSH
7349: CALL 12969 0 4
7353: PPOPN 3
7355: END
// export def_amount_of_apemen , def_siberite_bomb ; export extra_oil_deposits_locations , def_max_sides ; export battle_flags_id ; var global_units , global_defined , soldiers_created ; function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , br4 , un , i ; begin
7356: LD_INT 0
7358: PPUSH
7359: PPUSH
7360: PPUSH
7361: PPUSH
7362: PPUSH
7363: PPUSH
7364: PPUSH
7365: PPUSH
7366: PPUSH
// depot_def = [ ] ;
7367: LD_ADDR_EXP 41
7371: PUSH
7372: EMPTY
7373: ST_TO_ADDR
// breastworks_def = [ ] ;
7374: LD_ADDR_EXP 42
7378: PUSH
7379: EMPTY
7380: ST_TO_ADDR
// for side := 1 to 4 do
7381: LD_ADDR_VAR 0 2
7385: PUSH
7386: DOUBLE
7387: LD_INT 1
7389: DEC
7390: ST_TO_ADDR
7391: LD_INT 4
7393: PUSH
7394: FOR_TO
7395: IFFALSE 7821
// begin dep := side * 5 - 4 ;
7397: LD_ADDR_VAR 0 3
7401: PUSH
7402: LD_VAR 0 2
7406: PUSH
7407: LD_INT 5
7409: MUL
7410: PUSH
7411: LD_INT 4
7413: MINUS
7414: ST_TO_ADDR
// br1 := side * 5 - 3 ;
7415: LD_ADDR_VAR 0 4
7419: PUSH
7420: LD_VAR 0 2
7424: PUSH
7425: LD_INT 5
7427: MUL
7428: PUSH
7429: LD_INT 3
7431: MINUS
7432: ST_TO_ADDR
// br2 := side * 5 - 2 ;
7433: LD_ADDR_VAR 0 5
7437: PUSH
7438: LD_VAR 0 2
7442: PUSH
7443: LD_INT 5
7445: MUL
7446: PUSH
7447: LD_INT 2
7449: MINUS
7450: ST_TO_ADDR
// br3 := side * 5 - 1 ;
7451: LD_ADDR_VAR 0 6
7455: PUSH
7456: LD_VAR 0 2
7460: PUSH
7461: LD_INT 5
7463: MUL
7464: PUSH
7465: LD_INT 1
7467: MINUS
7468: ST_TO_ADDR
// br4 := side * 5 ;
7469: LD_ADDR_VAR 0 7
7473: PUSH
7474: LD_VAR 0 2
7478: PUSH
7479: LD_INT 5
7481: MUL
7482: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
7483: LD_ADDR_EXP 41
7487: PUSH
7488: LD_EXP 41
7492: PUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: CALL_OW 250
7502: PUSH
7503: LD_VAR 0 3
7507: PPUSH
7508: CALL_OW 251
7512: PUSH
7513: LD_VAR 0 3
7517: PPUSH
7518: CALL_OW 254
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: PUSH
7528: EMPTY
7529: LIST
7530: ADD
7531: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) ] ] ;
7532: LD_ADDR_EXP 43
7536: PUSH
7537: LD_EXP 43
7541: PUSH
7542: LD_VAR 0 3
7546: PPUSH
7547: CALL_OW 250
7551: PPUSH
7552: LD_VAR 0 3
7556: PPUSH
7557: CALL_OW 254
7561: PUSH
7562: LD_INT 6
7564: MOD
7565: PPUSH
7566: LD_INT 6
7568: PPUSH
7569: CALL_OW 272
7573: PUSH
7574: LD_VAR 0 3
7578: PPUSH
7579: CALL_OW 251
7583: PPUSH
7584: LD_VAR 0 3
7588: PPUSH
7589: CALL_OW 254
7593: PUSH
7594: LD_INT 6
7596: MOD
7597: PPUSH
7598: LD_INT 6
7600: PPUSH
7601: CALL_OW 273
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: EMPTY
7611: LIST
7612: ADD
7613: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] , [ GetX ( br4 ) , GetY ( br4 ) , GetDir ( br4 ) ] ] ] ;
7614: LD_ADDR_EXP 42
7618: PUSH
7619: LD_EXP 42
7623: PUSH
7624: LD_VAR 0 4
7628: PPUSH
7629: CALL_OW 250
7633: PUSH
7634: LD_VAR 0 4
7638: PPUSH
7639: CALL_OW 251
7643: PUSH
7644: LD_VAR 0 4
7648: PPUSH
7649: CALL_OW 254
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: PUSH
7659: LD_VAR 0 5
7663: PPUSH
7664: CALL_OW 250
7668: PUSH
7669: LD_VAR 0 5
7673: PPUSH
7674: CALL_OW 251
7678: PUSH
7679: LD_VAR 0 5
7683: PPUSH
7684: CALL_OW 254
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_VAR 0 6
7698: PPUSH
7699: CALL_OW 250
7703: PUSH
7704: LD_VAR 0 6
7708: PPUSH
7709: CALL_OW 251
7713: PUSH
7714: LD_VAR 0 6
7718: PPUSH
7719: CALL_OW 254
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: LIST
7728: PUSH
7729: LD_VAR 0 7
7733: PPUSH
7734: CALL_OW 250
7738: PUSH
7739: LD_VAR 0 7
7743: PPUSH
7744: CALL_OW 251
7748: PUSH
7749: LD_VAR 0 7
7753: PPUSH
7754: CALL_OW 254
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: PUSH
7770: EMPTY
7771: LIST
7772: ADD
7773: ST_TO_ADDR
// DestroyUnit ( dep ) ;
7774: LD_VAR 0 3
7778: PPUSH
7779: CALL_OW 65
// DestroyUnit ( br1 ) ;
7783: LD_VAR 0 4
7787: PPUSH
7788: CALL_OW 65
// DestroyUnit ( br2 ) ;
7792: LD_VAR 0 5
7796: PPUSH
7797: CALL_OW 65
// DestroyUnit ( br3 ) ;
7801: LD_VAR 0 6
7805: PPUSH
7806: CALL_OW 65
// DestroyUnit ( br4 ) ;
7810: LD_VAR 0 7
7814: PPUSH
7815: CALL_OW 65
// end ;
7819: GO 7394
7821: POP
7822: POP
// end ;
7823: LD_VAR 0 1
7827: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i ; begin
7828: LD_INT 0
7830: PPUSH
7831: PPUSH
7832: PPUSH
7833: PPUSH
7834: PPUSH
7835: PPUSH
7836: PPUSH
7837: PPUSH
// if MultiPlayer then
7838: LD_OWVAR 4
7842: IFFALSE 7916
// begin Game_Type = mp_game_type ;
7844: LD_ADDR_EXP 1
7848: PUSH
7849: LD_OWVAR 6
7853: ST_TO_ADDR
// Player_Side = mp_player_side ;
7854: LD_ADDR_EXP 31
7858: PUSH
7859: LD_OWVAR 7
7863: ST_TO_ADDR
// Player_Team = mp_player_team ;
7864: LD_ADDR_EXP 32
7868: PUSH
7869: LD_OWVAR 8
7873: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
7874: LD_ADDR_EXP 35
7878: PUSH
7879: LD_OWVAR 17
7883: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
7884: LD_ADDR_EXP 33
7888: PUSH
7889: LD_OWVAR 15
7893: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
7894: LD_ADDR_EXP 36
7898: PUSH
7899: LD_OWVAR 16
7903: ST_TO_ADDR
// Teams = mp_teams ;
7904: LD_ADDR_EXP 34
7908: PUSH
7909: LD_OWVAR 12
7913: ST_TO_ADDR
// end else
7914: GO 8086
// begin Game_Type = 2 ;
7916: LD_ADDR_EXP 1
7920: PUSH
7921: LD_INT 2
7923: ST_TO_ADDR
// Player_Side = 4 ;
7924: LD_ADDR_EXP 31
7928: PUSH
7929: LD_INT 4
7931: ST_TO_ADDR
// Player_Team = 2 ;
7932: LD_ADDR_EXP 32
7936: PUSH
7937: LD_INT 2
7939: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 0 , 4 , 0 ] ;
7940: LD_ADDR_EXP 35
7944: PUSH
7945: LD_INT 0
7947: PUSH
7948: LD_INT 3
7950: PUSH
7951: LD_INT 0
7953: PUSH
7954: LD_INT 1
7956: PUSH
7957: LD_INT 0
7959: PUSH
7960: LD_INT 0
7962: PUSH
7963: LD_INT 4
7965: PUSH
7966: LD_INT 0
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
7979: LD_ADDR_EXP 33
7983: PUSH
7984: LD_INT 0
7986: PUSH
7987: LD_INT 1
7989: PUSH
7990: LD_INT 0
7992: PUSH
7993: LD_INT 2
7995: PUSH
7996: LD_INT 0
7998: PUSH
7999: LD_INT 1
8001: PUSH
8002: LD_INT 2
8004: PUSH
8005: LD_INT 0
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
8018: LD_ADDR_EXP 36
8022: PUSH
8023: LD_INT 0
8025: PUSH
8026: LD_INT 3
8028: PUSH
8029: LD_INT 0
8031: PUSH
8032: LD_INT 1
8034: PUSH
8035: LD_INT 0
8037: PUSH
8038: LD_INT 1
8040: PUSH
8041: LD_INT 3
8043: PUSH
8044: LD_INT 0
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: ST_TO_ADDR
// Teams = [ [ 2 , 7 ] , [ 6 , 4 ] ] ;
8057: LD_ADDR_EXP 34
8061: PUSH
8062: LD_INT 2
8064: PUSH
8065: LD_INT 7
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 6
8074: PUSH
8075: LD_INT 4
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
8086: LD_ADDR_EXP 29
8090: PUSH
8091: LD_EXP 35
8095: PUSH
8096: LD_INT 0
8098: PUSH
8099: EMPTY
8100: LIST
8101: DIFF
8102: PUSH
8103: LD_INT 0
8105: PLUS
8106: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
8107: LD_ADDR_EXP 30
8111: PUSH
8112: LD_EXP 33
8116: PUSH
8117: LD_INT 0
8119: PUSH
8120: EMPTY
8121: LIST
8122: DIFF
8123: PUSH
8124: LD_INT 0
8126: PLUS
8127: ST_TO_ADDR
// if MultiPlayer then
8128: LD_OWVAR 4
8132: IFFALSE 8266
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
8134: LD_ADDR_EXP 2
8138: PUSH
8139: LD_INT 0
8141: PPUSH
8142: CALL_OW 426
8146: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
8147: LD_ADDR_EXP 3
8151: PUSH
8152: LD_INT 1
8154: PPUSH
8155: CALL_OW 426
8159: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
8160: LD_ADDR_EXP 4
8164: PUSH
8165: LD_INT 2
8167: PPUSH
8168: CALL_OW 426
8172: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
8173: LD_ADDR_EXP 5
8177: PUSH
8178: LD_INT 3
8180: PPUSH
8181: CALL_OW 426
8185: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
8186: LD_ADDR_EXP 6
8190: PUSH
8191: LD_INT 4
8193: PPUSH
8194: CALL_OW 426
8198: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
8199: LD_ADDR_EXP 7
8203: PUSH
8204: LD_INT 10
8206: PPUSH
8207: CALL_OW 426
8211: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
8212: LD_ADDR_EXP 8
8216: PUSH
8217: LD_INT 11
8219: PPUSH
8220: CALL_OW 426
8224: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
8225: LD_ADDR_EXP 11
8229: PUSH
8230: LD_INT 14
8232: PPUSH
8233: CALL_OW 426
8237: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
8238: LD_ADDR_EXP 9
8242: PUSH
8243: LD_INT 12
8245: PPUSH
8246: CALL_OW 426
8250: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 14 ) ;
8251: LD_ADDR_EXP 47
8255: PUSH
8256: LD_INT 14
8258: PPUSH
8259: CALL_OW 426
8263: ST_TO_ADDR
// end else
8264: GO 8358
// begin randomize ;
8266: CALL_OW 10
// def_base_level = 2 ;
8270: LD_ADDR_EXP 2
8274: PUSH
8275: LD_INT 2
8277: ST_TO_ADDR
// def_amount_of_people = 1 ;
8278: LD_ADDR_EXP 3
8282: PUSH
8283: LD_INT 1
8285: ST_TO_ADDR
// def_initial_level = 1 ;
8286: LD_ADDR_EXP 4
8290: PUSH
8291: LD_INT 1
8293: ST_TO_ADDR
// def_starting_resources = 2 ;
8294: LD_ADDR_EXP 5
8298: PUSH
8299: LD_INT 2
8301: ST_TO_ADDR
// def_shipments_density = 1 ;
8302: LD_ADDR_EXP 6
8306: PUSH
8307: LD_INT 1
8309: ST_TO_ADDR
// def_shared_vision = 1 ;
8310: LD_ADDR_EXP 7
8314: PUSH
8315: LD_INT 1
8317: ST_TO_ADDR
// def_morale_flags = 1 ;
8318: LD_ADDR_EXP 8
8322: PUSH
8323: LD_INT 1
8325: ST_TO_ADDR
// def_siberite_detection = 1 ;
8326: LD_ADDR_EXP 9
8330: PUSH
8331: LD_INT 1
8333: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
8334: LD_ADDR_EXP 46
8338: PUSH
8339: LD_INT 3
8341: ST_TO_ADDR
// def_people_respawning = 2 ;
8342: LD_ADDR_EXP 11
8346: PUSH
8347: LD_INT 2
8349: ST_TO_ADDR
// def_siberite_bomb = 0 ;
8350: LD_ADDR_EXP 47
8354: PUSH
8355: LD_INT 0
8357: ST_TO_ADDR
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
8358: LD_ADDR_EXP 12
8362: PUSH
8363: LD_INT 0
8365: PUSH
8366: LD_INT 1
8368: PUSH
8369: LD_INT 1
8371: PUSH
8372: LD_INT 1
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: PUSH
8381: LD_EXP 2
8385: PUSH
8386: LD_INT 1
8388: PLUS
8389: ARRAY
8390: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
8391: LD_ADDR_EXP 13
8395: PUSH
8396: LD_INT 0
8398: PUSH
8399: LD_INT 0
8401: PUSH
8402: LD_INT 2
8404: PUSH
8405: LD_INT 4
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: PUSH
8414: LD_EXP 2
8418: PUSH
8419: LD_INT 1
8421: PLUS
8422: ARRAY
8423: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
8424: LD_ADDR_EXP 14
8428: PUSH
8429: LD_INT 9
8431: PUSH
8432: LD_INT 12
8434: PUSH
8435: LD_INT 15
8437: PUSH
8438: LD_INT 24
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: PUSH
8447: LD_EXP 3
8451: PUSH
8452: LD_INT 1
8454: PLUS
8455: ARRAY
8456: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
8457: LD_ADDR_EXP 15
8461: PUSH
8462: LD_INT 2
8464: PUSH
8465: LD_INT 3
8467: PUSH
8468: LD_INT 4
8470: PUSH
8471: LD_INT 5
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: PUSH
8480: LD_EXP 4
8484: PUSH
8485: LD_INT 1
8487: PLUS
8488: ARRAY
8489: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
8490: LD_ADDR_EXP 17
8494: PUSH
8495: LD_INT 0
8497: PUSH
8498: LD_INT 0
8500: PUSH
8501: LD_INT 0
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: PUSH
8509: LD_INT 30
8511: PUSH
8512: LD_INT 0
8514: PUSH
8515: LD_INT 0
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 50
8525: PUSH
8526: LD_INT 20
8528: PUSH
8529: LD_INT 0
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: LIST
8536: PUSH
8537: LD_INT 80
8539: PUSH
8540: LD_INT 40
8542: PUSH
8543: LD_INT 20
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: LIST
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: PUSH
8557: LD_EXP 5
8561: PUSH
8562: LD_INT 1
8564: PLUS
8565: ARRAY
8566: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
8567: LD_ADDR_EXP 16
8571: PUSH
8572: LD_INT 10
8574: PUSH
8575: EMPTY
8576: LIST
8577: PUSH
8578: LD_INT 7
8580: PUSH
8581: LD_INT 14
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 6
8590: PUSH
8591: LD_INT 12
8593: PUSH
8594: LD_INT 18
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: LIST
8601: PUSH
8602: LD_INT 5
8604: PUSH
8605: LD_INT 10
8607: PUSH
8608: LD_INT 15
8610: PUSH
8611: LD_INT 20
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: PUSH
8626: LD_EXP 5
8630: PUSH
8631: LD_INT 1
8633: PLUS
8634: ARRAY
8635: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
8636: LD_ADDR_EXP 18
8640: PUSH
8641: LD_INT 20
8643: PUSH
8644: LD_INT 30
8646: PUSH
8647: LD_INT 40
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: PUSH
8655: LD_EXP 6
8659: PUSH
8660: LD_INT 1
8662: PLUS
8663: ARRAY
8664: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
8665: LD_ADDR_EXP 22
8669: PUSH
8670: LD_INT 0
8672: PUSH
8673: LD_INT 8400
8675: PUSH
8676: LD_INT 1750
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: PUSH
8684: LD_EXP 11
8688: PUSH
8689: LD_INT 1
8691: PLUS
8692: ARRAY
8693: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
8694: LD_ADDR_EXP 23
8698: PUSH
8699: LD_INT 0
8701: PUSH
8702: LD_INT 21000
8704: PUSH
8705: LD_INT 4200
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: LD_EXP 11
8717: PUSH
8718: LD_INT 1
8720: PLUS
8721: ARRAY
8722: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 ] [ def_morale_flags + 1 ] ;
8723: LD_ADDR_EXP 19
8727: PUSH
8728: LD_INT 1
8730: NEG
8731: PUSH
8732: LD_INT 350
8734: PUSH
8735: LD_INT 700
8737: PUSH
8738: LD_INT 1400
8740: PUSH
8741: LD_INT 0
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: PUSH
8751: LD_EXP 8
8755: PUSH
8756: LD_INT 1
8758: PLUS
8759: ARRAY
8760: ST_TO_ADDR
// battle_flags_id = [ ] ;
8761: LD_ADDR_EXP 50
8765: PUSH
8766: EMPTY
8767: ST_TO_ADDR
// end ;
8768: LD_VAR 0 1
8772: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
8773: LD_INT 0
8775: PPUSH
8776: PPUSH
8777: PPUSH
// Team_Game := 0 ;
8778: LD_ADDR_EXP 40
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// for i = 1 to 8 do
8786: LD_ADDR_VAR 0 2
8790: PUSH
8791: DOUBLE
8792: LD_INT 1
8794: DEC
8795: ST_TO_ADDR
8796: LD_INT 8
8798: PUSH
8799: FOR_TO
8800: IFFALSE 8826
// Team_Game := Team_Game + Side_Teams [ i ] ;
8802: LD_ADDR_EXP 40
8806: PUSH
8807: LD_EXP 40
8811: PUSH
8812: LD_EXP 33
8816: PUSH
8817: LD_VAR 0 2
8821: ARRAY
8822: PLUS
8823: ST_TO_ADDR
8824: GO 8799
8826: POP
8827: POP
// if not Team_Game then
8828: LD_EXP 40
8832: NOT
8833: IFFALSE 8845
// Team_Game := false else
8835: LD_ADDR_EXP 40
8839: PUSH
8840: LD_INT 0
8842: ST_TO_ADDR
8843: GO 8853
// Team_Game := true ;
8845: LD_ADDR_EXP 40
8849: PUSH
8850: LD_INT 1
8852: ST_TO_ADDR
// if not Team_Game then
8853: LD_EXP 40
8857: NOT
8858: IFFALSE 8956
// begin for i = 1 to 8 do
8860: LD_ADDR_VAR 0 2
8864: PUSH
8865: DOUBLE
8866: LD_INT 1
8868: DEC
8869: ST_TO_ADDR
8870: LD_INT 8
8872: PUSH
8873: FOR_TO
8874: IFFALSE 8952
// for j = 1 to 8 do
8876: LD_ADDR_VAR 0 3
8880: PUSH
8881: DOUBLE
8882: LD_INT 1
8884: DEC
8885: ST_TO_ADDR
8886: LD_INT 8
8888: PUSH
8889: FOR_TO
8890: IFFALSE 8948
// if i <> j then
8892: LD_VAR 0 2
8896: PUSH
8897: LD_VAR 0 3
8901: NONEQUAL
8902: IFFALSE 8926
// SetAttitude ( i , j , att_neutral , true ) else
8904: LD_VAR 0 2
8908: PPUSH
8909: LD_VAR 0 3
8913: PPUSH
8914: LD_INT 0
8916: PPUSH
8917: LD_INT 1
8919: PPUSH
8920: CALL_OW 80
8924: GO 8946
// SetAttitude ( i , j , att_friend , true ) ;
8926: LD_VAR 0 2
8930: PPUSH
8931: LD_VAR 0 3
8935: PPUSH
8936: LD_INT 1
8938: PPUSH
8939: LD_INT 1
8941: PPUSH
8942: CALL_OW 80
8946: GO 8889
8948: POP
8949: POP
8950: GO 8873
8952: POP
8953: POP
// end else
8954: GO 9131
// begin if def_shared_vision then
8956: LD_EXP 7
8960: IFFALSE 9025
// begin for i in Teams do
8962: LD_ADDR_VAR 0 2
8966: PUSH
8967: LD_EXP 34
8971: PUSH
8972: FOR_IN
8973: IFFALSE 9023
// for j = 2 to i do
8975: LD_ADDR_VAR 0 3
8979: PUSH
8980: DOUBLE
8981: LD_INT 2
8983: DEC
8984: ST_TO_ADDR
8985: LD_VAR 0 2
8989: PUSH
8990: FOR_TO
8991: IFFALSE 9019
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
8993: LD_VAR 0 2
8997: PUSH
8998: LD_VAR 0 3
9002: ARRAY
9003: PPUSH
9004: LD_VAR 0 2
9008: PUSH
9009: LD_INT 1
9011: ARRAY
9012: PPUSH
9013: CALL_OW 343
9017: GO 8990
9019: POP
9020: POP
9021: GO 8972
9023: POP
9024: POP
// end ; for i = 1 to 8 do
9025: LD_ADDR_VAR 0 2
9029: PUSH
9030: DOUBLE
9031: LD_INT 1
9033: DEC
9034: ST_TO_ADDR
9035: LD_INT 8
9037: PUSH
9038: FOR_TO
9039: IFFALSE 9129
// for j = 1 to 8 do
9041: LD_ADDR_VAR 0 3
9045: PUSH
9046: DOUBLE
9047: LD_INT 1
9049: DEC
9050: ST_TO_ADDR
9051: LD_INT 8
9053: PUSH
9054: FOR_TO
9055: IFFALSE 9125
// if Side_Teams [ i ] = Side_Teams [ j ] then
9057: LD_EXP 33
9061: PUSH
9062: LD_VAR 0 2
9066: ARRAY
9067: PUSH
9068: LD_EXP 33
9072: PUSH
9073: LD_VAR 0 3
9077: ARRAY
9078: EQUAL
9079: IFFALSE 9103
// SetAttitude ( i , j , att_friend , true ) else
9081: LD_VAR 0 2
9085: PPUSH
9086: LD_VAR 0 3
9090: PPUSH
9091: LD_INT 1
9093: PPUSH
9094: LD_INT 1
9096: PPUSH
9097: CALL_OW 80
9101: GO 9123
// SetAttitude ( i , j , att_enemy , true ) ;
9103: LD_VAR 0 2
9107: PPUSH
9108: LD_VAR 0 3
9112: PPUSH
9113: LD_INT 2
9115: PPUSH
9116: LD_INT 1
9118: PPUSH
9119: CALL_OW 80
9123: GO 9054
9125: POP
9126: POP
9127: GO 9038
9129: POP
9130: POP
// end ; end ;
9131: LD_VAR 0 1
9135: RET
// function prepare_people ( count , cl , x , y , r , var commander ) ; var i , j , un ; begin
9136: LD_INT 0
9138: PPUSH
9139: PPUSH
9140: PPUSH
9141: PPUSH
// result := [ ] ;
9142: LD_ADDR_VAR 0 7
9146: PUSH
9147: EMPTY
9148: ST_TO_ADDR
// for i := 1 to count do
9149: LD_ADDR_VAR 0 8
9153: PUSH
9154: DOUBLE
9155: LD_INT 1
9157: DEC
9158: ST_TO_ADDR
9159: LD_VAR 0 1
9163: PUSH
9164: FOR_TO
9165: IFFALSE 9591
// begin uc_direction := Rand ( 0 , 5 ) ;
9167: LD_ADDR_OWVAR 24
9171: PUSH
9172: LD_INT 0
9174: PPUSH
9175: LD_INT 5
9177: PPUSH
9178: CALL_OW 12
9182: ST_TO_ADDR
// if commander then
9183: LD_FROM_VAR 0 6
9187: IFFALSE 9236
// begin PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
9189: LD_INT 1
9191: PPUSH
9192: LD_INT 2
9194: PPUSH
9195: CALL_OW 12
9199: PPUSH
9200: LD_VAR 0 2
9204: PPUSH
9205: LD_EXP 15
9209: PUSH
9210: LD_INT 2
9212: PLUS
9213: PPUSH
9214: CALL_OW 380
// hc_importance := 105 ;
9218: LD_ADDR_OWVAR 32
9222: PUSH
9223: LD_INT 105
9225: ST_TO_ADDR
// commander := false ;
9226: LD_VAR 0 6
9230: PUSH
9231: LD_INT 0
9233: ST_TO_ADDR
// end else
9234: GO 9269
// begin PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
9236: LD_INT 1
9238: PPUSH
9239: LD_INT 2
9241: PPUSH
9242: CALL_OW 12
9246: PPUSH
9247: LD_VAR 0 2
9251: PPUSH
9252: LD_EXP 15
9256: PPUSH
9257: CALL_OW 380
// hc_importance := 0 ;
9261: LD_ADDR_OWVAR 32
9265: PUSH
9266: LD_INT 0
9268: ST_TO_ADDR
// end ; un := CreateHuman ;
9269: LD_ADDR_VAR 0 10
9273: PUSH
9274: CALL_OW 44
9278: ST_TO_ADDR
// if global_defined then
9279: LD_LOC 14
9283: IFFALSE 9543
// begin j := i ;
9285: LD_ADDR_VAR 0 9
9289: PUSH
9290: LD_VAR 0 8
9294: ST_TO_ADDR
// if cl = class_soldier then
9295: LD_VAR 0 2
9299: PUSH
9300: LD_INT 1
9302: EQUAL
9303: IFFALSE 9321
// j := i + soldiers_created ;
9305: LD_ADDR_VAR 0 9
9309: PUSH
9310: LD_VAR 0 8
9314: PUSH
9315: LD_LOC 15
9319: PLUS
9320: ST_TO_ADDR
// SetSkill ( un , skill_combat , GetSkill ( global_units [ cl ] [ j ] , skill_combat ) ) ;
9321: LD_VAR 0 10
9325: PPUSH
9326: LD_INT 1
9328: PPUSH
9329: LD_LOC 13
9333: PUSH
9334: LD_VAR 0 2
9338: ARRAY
9339: PUSH
9340: LD_VAR 0 9
9344: ARRAY
9345: PPUSH
9346: LD_INT 1
9348: PPUSH
9349: CALL_OW 259
9353: PPUSH
9354: CALL_OW 237
// SetSkill ( un , skill_engineering , GetSkill ( global_units [ cl ] [ j ] , skill_engineering ) ) ;
9358: LD_VAR 0 10
9362: PPUSH
9363: LD_INT 2
9365: PPUSH
9366: LD_LOC 13
9370: PUSH
9371: LD_VAR 0 2
9375: ARRAY
9376: PUSH
9377: LD_VAR 0 9
9381: ARRAY
9382: PPUSH
9383: LD_INT 2
9385: PPUSH
9386: CALL_OW 259
9390: PPUSH
9391: CALL_OW 237
// SetSkill ( un , skill_mechanical , GetSkill ( global_units [ cl ] [ j ] , skill_mechanical ) ) ;
9395: LD_VAR 0 10
9399: PPUSH
9400: LD_INT 3
9402: PPUSH
9403: LD_LOC 13
9407: PUSH
9408: LD_VAR 0 2
9412: ARRAY
9413: PUSH
9414: LD_VAR 0 9
9418: ARRAY
9419: PPUSH
9420: LD_INT 3
9422: PPUSH
9423: CALL_OW 259
9427: PPUSH
9428: CALL_OW 237
// SetSkill ( un , skill_scientistic , GetSkill ( global_units [ cl ] [ j ] , skill_scientistic ) ) ;
9432: LD_VAR 0 10
9436: PPUSH
9437: LD_INT 4
9439: PPUSH
9440: LD_LOC 13
9444: PUSH
9445: LD_VAR 0 2
9449: ARRAY
9450: PUSH
9451: LD_VAR 0 9
9455: ARRAY
9456: PPUSH
9457: LD_INT 4
9459: PPUSH
9460: CALL_OW 259
9464: PPUSH
9465: CALL_OW 237
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
9469: LD_VAR 0 10
9473: PPUSH
9474: LD_INT 2
9476: PPUSH
9477: LD_LOC 13
9481: PUSH
9482: LD_VAR 0 2
9486: ARRAY
9487: PUSH
9488: LD_VAR 0 9
9492: ARRAY
9493: PPUSH
9494: LD_INT 2
9496: PPUSH
9497: CALL_OW 260
9501: PPUSH
9502: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
9506: LD_VAR 0 10
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: LD_LOC 13
9518: PUSH
9519: LD_VAR 0 2
9523: ARRAY
9524: PUSH
9525: LD_VAR 0 9
9529: ARRAY
9530: PPUSH
9531: LD_INT 1
9533: PPUSH
9534: CALL_OW 260
9538: PPUSH
9539: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
9543: LD_VAR 0 10
9547: PPUSH
9548: LD_VAR 0 3
9552: PPUSH
9553: LD_VAR 0 4
9557: PPUSH
9558: LD_VAR 0 5
9562: PPUSH
9563: LD_INT 0
9565: PPUSH
9566: CALL_OW 50
// result := result ^ [ un ] ;
9570: LD_ADDR_VAR 0 7
9574: PUSH
9575: LD_VAR 0 7
9579: PUSH
9580: LD_VAR 0 10
9584: PUSH
9585: EMPTY
9586: LIST
9587: ADD
9588: ST_TO_ADDR
// end ;
9589: GO 9164
9591: POP
9592: POP
// if not global_defined then
9593: LD_LOC 14
9597: NOT
9598: IFFALSE 9660
// if cl = class_soldier and global_units then
9600: LD_VAR 0 2
9604: PUSH
9605: LD_INT 1
9607: EQUAL
9608: PUSH
9609: LD_LOC 13
9613: AND
9614: IFFALSE 9641
// global_units := [ global_units [ 1 ] ^ result ] else
9616: LD_ADDR_LOC 13
9620: PUSH
9621: LD_LOC 13
9625: PUSH
9626: LD_INT 1
9628: ARRAY
9629: PUSH
9630: LD_VAR 0 7
9634: ADD
9635: PUSH
9636: EMPTY
9637: LIST
9638: ST_TO_ADDR
9639: GO 9660
// global_units := global_units ^ [ result ] end ;
9641: LD_ADDR_LOC 13
9645: PUSH
9646: LD_LOC 13
9650: PUSH
9651: LD_VAR 0 7
9655: PUSH
9656: EMPTY
9657: LIST
9658: ADD
9659: ST_TO_ADDR
9660: LD_VAR 0 7
9664: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
9665: LD_INT 0
9667: PPUSH
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
9673: PPUSH
9674: PPUSH
9675: PPUSH
9676: PPUSH
9677: PPUSH
9678: PPUSH
9679: PPUSH
// pos := Side_Positions [ side ] ;
9680: LD_ADDR_VAR 0 3
9684: PUSH
9685: LD_EXP 35
9689: PUSH
9690: LD_VAR 0 1
9694: ARRAY
9695: ST_TO_ADDR
// if not def_siberite_bomb then
9696: LD_EXP 47
9700: NOT
9701: IFFALSE 9738
// for i = 1 to 8 do
9703: LD_ADDR_VAR 0 6
9707: PUSH
9708: DOUBLE
9709: LD_INT 1
9711: DEC
9712: ST_TO_ADDR
9713: LD_INT 8
9715: PUSH
9716: FOR_TO
9717: IFFALSE 9736
// SetTech ( tech_SibFiss , i , state_disabled ) ;
9719: LD_INT 25
9721: PPUSH
9722: LD_VAR 0 6
9726: PPUSH
9727: LD_INT 0
9729: PPUSH
9730: CALL_OW 322
9734: GO 9716
9736: POP
9737: POP
// uc_nation := Side_Nations [ side ] ;
9738: LD_ADDR_OWVAR 21
9742: PUSH
9743: LD_EXP 36
9747: PUSH
9748: LD_VAR 0 1
9752: ARRAY
9753: ST_TO_ADDR
// uc_side := side ;
9754: LD_ADDR_OWVAR 20
9758: PUSH
9759: LD_VAR 0 1
9763: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
9764: LD_ADDR_VAR 0 4
9768: PUSH
9769: LD_EXP 41
9773: PUSH
9774: LD_VAR 0 3
9778: ARRAY
9779: PUSH
9780: LD_INT 1
9782: ARRAY
9783: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
9784: LD_ADDR_VAR 0 5
9788: PUSH
9789: LD_EXP 41
9793: PUSH
9794: LD_VAR 0 3
9798: ARRAY
9799: PUSH
9800: LD_INT 2
9802: ARRAY
9803: ST_TO_ADDR
// if is_depot then
9804: LD_EXP 12
9808: IFFALSE 9933
// begin bc_type = b_depot ;
9810: LD_ADDR_OWVAR 42
9814: PUSH
9815: LD_INT 0
9817: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
9818: LD_ADDR_VAR 0 10
9822: PUSH
9823: LD_VAR 0 4
9827: PPUSH
9828: LD_VAR 0 5
9832: PPUSH
9833: LD_EXP 41
9837: PUSH
9838: LD_VAR 0 3
9842: ARRAY
9843: PUSH
9844: LD_INT 3
9846: ARRAY
9847: PPUSH
9848: CALL_OW 47
9852: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
9853: LD_VAR 0 10
9857: PPUSH
9858: CALL_OW 274
9862: PPUSH
9863: LD_INT 1
9865: PPUSH
9866: LD_EXP 17
9870: PUSH
9871: LD_INT 1
9873: ARRAY
9874: PPUSH
9875: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
9879: LD_VAR 0 10
9883: PPUSH
9884: CALL_OW 274
9888: PPUSH
9889: LD_INT 2
9891: PPUSH
9892: LD_EXP 17
9896: PUSH
9897: LD_INT 2
9899: ARRAY
9900: PPUSH
9901: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
9905: LD_VAR 0 2
9909: PPUSH
9910: CALL_OW 274
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: LD_EXP 17
9922: PUSH
9923: LD_INT 3
9925: ARRAY
9926: PPUSH
9927: CALL_OW 277
// end else
9931: GO 10077
// begin for i := 1 to 3 do
9933: LD_ADDR_VAR 0 6
9937: PUSH
9938: DOUBLE
9939: LD_INT 1
9941: DEC
9942: ST_TO_ADDR
9943: LD_INT 3
9945: PUSH
9946: FOR_TO
9947: IFFALSE 10075
// begin r := starting_resources [ i ] ;
9949: LD_ADDR_VAR 0 7
9953: PUSH
9954: LD_EXP 17
9958: PUSH
9959: LD_VAR 0 6
9963: ARRAY
9964: ST_TO_ADDR
// while r >= 10 do
9965: LD_VAR 0 7
9969: PUSH
9970: LD_INT 10
9972: GREATEREQUAL
9973: IFFALSE 10073
// if r > 50 then
9975: LD_VAR 0 7
9979: PUSH
9980: LD_INT 50
9982: GREATER
9983: IFFALSE 10029
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
9985: LD_VAR 0 6
9989: PPUSH
9990: LD_INT 5
9992: PPUSH
9993: LD_VAR 0 4
9997: PPUSH
9998: LD_VAR 0 5
10002: PPUSH
10003: LD_INT 4
10005: PPUSH
10006: LD_INT 0
10008: PPUSH
10009: CALL_OW 60
// r := r - 50 ;
10013: LD_ADDR_VAR 0 7
10017: PUSH
10018: LD_VAR 0 7
10022: PUSH
10023: LD_INT 50
10025: MINUS
10026: ST_TO_ADDR
// end else
10027: GO 10071
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
10029: LD_VAR 0 6
10033: PPUSH
10034: LD_VAR 0 7
10038: PUSH
10039: LD_INT 10
10041: DIV
10042: PPUSH
10043: LD_VAR 0 4
10047: PPUSH
10048: LD_VAR 0 5
10052: PPUSH
10053: LD_INT 4
10055: PPUSH
10056: LD_INT 0
10058: PPUSH
10059: CALL_OW 60
// r := 0 ;
10063: LD_ADDR_VAR 0 7
10067: PUSH
10068: LD_INT 0
10070: ST_TO_ADDR
// end ;
10071: GO 9965
// end ;
10073: GO 9946
10075: POP
10076: POP
// end ; x := start_def [ pos ] [ 1 ] ;
10077: LD_ADDR_VAR 0 4
10081: PUSH
10082: LD_EXP 43
10086: PUSH
10087: LD_VAR 0 3
10091: ARRAY
10092: PUSH
10093: LD_INT 1
10095: ARRAY
10096: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
10097: LD_ADDR_VAR 0 5
10101: PUSH
10102: LD_EXP 43
10106: PUSH
10107: LD_VAR 0 3
10111: ARRAY
10112: PUSH
10113: LD_INT 2
10115: ARRAY
10116: ST_TO_ADDR
// for r in starting_crates do
10117: LD_ADDR_VAR 0 7
10121: PUSH
10122: LD_EXP 16
10126: PUSH
10127: FOR_IN
10128: IFFALSE 10160
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
10130: LD_INT 1
10132: PPUSH
10133: LD_INT 5
10135: PPUSH
10136: LD_VAR 0 4
10140: PPUSH
10141: LD_VAR 0 5
10145: PPUSH
10146: LD_VAR 0 7
10150: PPUSH
10151: LD_INT 0
10153: PPUSH
10154: CALL_OW 60
10158: GO 10127
10160: POP
10161: POP
// if def_morale_flags then
10162: LD_EXP 8
10166: IFFALSE 10245
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
10168: LD_ADDR_EXP 50
10172: PUSH
10173: LD_EXP 50
10177: PUSH
10178: LD_VAR 0 1
10182: PPUSH
10183: LD_VAR 0 4
10187: PPUSH
10188: LD_VAR 0 5
10192: PPUSH
10193: LD_INT 1
10195: PUSH
10196: LD_INT 100
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: LD_INT 2
10205: PUSH
10206: LD_INT 50
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 3
10215: PUSH
10216: LD_INT 20
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 20
10225: PUSH
10226: LD_INT 100
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: PPUSH
10239: CALL_OW 418
10243: ADD
10244: ST_TO_ADDR
// neng := number_of_people ;
10245: LD_ADDR_VAR 0 11
10249: PUSH
10250: LD_EXP 14
10254: ST_TO_ADDR
// nsol := number_of_breastworks ;
10255: LD_ADDR_VAR 0 14
10259: PUSH
10260: LD_EXP 13
10264: ST_TO_ADDR
// if nsol < neng div 4 then
10265: LD_VAR 0 14
10269: PUSH
10270: LD_VAR 0 11
10274: PUSH
10275: LD_INT 4
10277: DIV
10278: LESS
10279: IFFALSE 10295
// nsol := neng div 4 ;
10281: LD_ADDR_VAR 0 14
10285: PUSH
10286: LD_VAR 0 11
10290: PUSH
10291: LD_INT 4
10293: DIV
10294: ST_TO_ADDR
// neng := neng - nsol ;
10295: LD_ADDR_VAR 0 11
10299: PUSH
10300: LD_VAR 0 11
10304: PUSH
10305: LD_VAR 0 14
10309: MINUS
10310: ST_TO_ADDR
// nsci := neng div 3 ;
10311: LD_ADDR_VAR 0 12
10315: PUSH
10316: LD_VAR 0 11
10320: PUSH
10321: LD_INT 3
10323: DIV
10324: ST_TO_ADDR
// if nsci < 1 then
10325: LD_VAR 0 12
10329: PUSH
10330: LD_INT 1
10332: LESS
10333: IFFALSE 10343
// nsci := 1 ;
10335: LD_ADDR_VAR 0 12
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// neng := neng - nsci ;
10343: LD_ADDR_VAR 0 11
10347: PUSH
10348: LD_VAR 0 11
10352: PUSH
10353: LD_VAR 0 12
10357: MINUS
10358: ST_TO_ADDR
// nmech := neng div 2 ;
10359: LD_ADDR_VAR 0 13
10363: PUSH
10364: LD_VAR 0 11
10368: PUSH
10369: LD_INT 2
10371: DIV
10372: ST_TO_ADDR
// neng := neng - nmech ;
10373: LD_ADDR_VAR 0 11
10377: PUSH
10378: LD_VAR 0 11
10382: PUSH
10383: LD_VAR 0 13
10387: MINUS
10388: ST_TO_ADDR
// if neng < 1 then
10389: LD_VAR 0 11
10393: PUSH
10394: LD_INT 1
10396: LESS
10397: IFFALSE 10407
// neng := 1 ;
10399: LD_ADDR_VAR 0 11
10403: PUSH
10404: LD_INT 1
10406: ST_TO_ADDR
// commander := true ;
10407: LD_ADDR_EXP 45
10411: PUSH
10412: LD_INT 1
10414: ST_TO_ADDR
// soldiers_created := 0 ;
10415: LD_ADDR_LOC 15
10419: PUSH
10420: LD_INT 0
10422: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
10423: LD_ADDR_VAR 0 6
10427: PUSH
10428: DOUBLE
10429: LD_INT 1
10431: DEC
10432: ST_TO_ADDR
10433: LD_EXP 13
10437: PUSH
10438: FOR_TO
10439: IFFALSE 10688
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
10441: LD_ADDR_VAR 0 4
10445: PUSH
10446: LD_EXP 42
10450: PUSH
10451: LD_VAR 0 3
10455: ARRAY
10456: PUSH
10457: LD_VAR 0 6
10461: ARRAY
10462: PUSH
10463: LD_INT 1
10465: ARRAY
10466: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
10467: LD_ADDR_VAR 0 5
10471: PUSH
10472: LD_EXP 42
10476: PUSH
10477: LD_VAR 0 3
10481: ARRAY
10482: PUSH
10483: LD_VAR 0 6
10487: ARRAY
10488: PUSH
10489: LD_INT 2
10491: ARRAY
10492: ST_TO_ADDR
// bc_type := b_breastwork ;
10493: LD_ADDR_OWVAR 42
10497: PUSH
10498: LD_INT 31
10500: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ i ] [ 3 ] ) ;
10501: LD_ADDR_VAR 0 9
10505: PUSH
10506: LD_VAR 0 4
10510: PPUSH
10511: LD_VAR 0 5
10515: PPUSH
10516: LD_EXP 42
10520: PUSH
10521: LD_VAR 0 3
10525: ARRAY
10526: PUSH
10527: LD_VAR 0 6
10531: ARRAY
10532: PUSH
10533: LD_INT 3
10535: ARRAY
10536: PPUSH
10537: CALL_OW 47
10541: ST_TO_ADDR
// x := ShiftX ( x , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
10542: LD_ADDR_VAR 0 4
10546: PUSH
10547: LD_VAR 0 4
10551: PPUSH
10552: LD_EXP 42
10556: PUSH
10557: LD_VAR 0 3
10561: ARRAY
10562: PUSH
10563: LD_VAR 0 6
10567: ARRAY
10568: PUSH
10569: LD_INT 3
10571: ARRAY
10572: PPUSH
10573: LD_INT 2
10575: PPUSH
10576: CALL_OW 272
10580: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
10581: LD_ADDR_VAR 0 5
10585: PUSH
10586: LD_VAR 0 5
10590: PPUSH
10591: LD_EXP 42
10595: PUSH
10596: LD_VAR 0 3
10600: ARRAY
10601: PUSH
10602: LD_VAR 0 6
10606: ARRAY
10607: PUSH
10608: LD_INT 3
10610: ARRAY
10611: PPUSH
10612: LD_INT 2
10614: PPUSH
10615: CALL_OW 273
10619: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 1 , commander ) [ 1 ] ;
10620: LD_ADDR_VAR 0 8
10624: PUSH
10625: LD_INT 1
10627: PPUSH
10628: LD_INT 1
10630: PPUSH
10631: LD_VAR 0 4
10635: PPUSH
10636: LD_VAR 0 5
10640: PPUSH
10641: LD_INT 1
10643: PPUSH
10644: LD_ADDR_EXP 45
10648: PPUSH
10649: CALL 9136 0 6
10653: PUSH
10654: LD_INT 1
10656: ARRAY
10657: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
10658: LD_ADDR_LOC 15
10662: PUSH
10663: LD_LOC 15
10667: PUSH
10668: LD_INT 1
10670: PLUS
10671: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
10672: LD_VAR 0 8
10676: PPUSH
10677: LD_VAR 0 9
10681: PPUSH
10682: CALL_OW 120
// end ;
10686: GO 10438
10688: POP
10689: POP
// x := start_def [ pos ] [ 1 ] ;
10690: LD_ADDR_VAR 0 4
10694: PUSH
10695: LD_EXP 43
10699: PUSH
10700: LD_VAR 0 3
10704: ARRAY
10705: PUSH
10706: LD_INT 1
10708: ARRAY
10709: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
10710: LD_ADDR_VAR 0 5
10714: PUSH
10715: LD_EXP 43
10719: PUSH
10720: LD_VAR 0 3
10724: ARRAY
10725: PUSH
10726: LD_INT 2
10728: ARRAY
10729: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , commander ) ;
10730: LD_VAR 0 14
10734: PUSH
10735: LD_EXP 13
10739: MINUS
10740: PPUSH
10741: LD_INT 1
10743: PPUSH
10744: LD_VAR 0 4
10748: PPUSH
10749: LD_VAR 0 5
10753: PPUSH
10754: LD_INT 5
10756: PPUSH
10757: LD_ADDR_EXP 45
10761: PPUSH
10762: CALL 9136 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , commander ) ;
10766: LD_VAR 0 11
10770: PPUSH
10771: LD_INT 2
10773: PPUSH
10774: LD_VAR 0 4
10778: PPUSH
10779: LD_VAR 0 5
10783: PPUSH
10784: LD_INT 5
10786: PPUSH
10787: LD_ADDR_EXP 45
10791: PPUSH
10792: CALL 9136 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , commander ) ;
10796: LD_VAR 0 13
10800: PPUSH
10801: LD_INT 3
10803: PPUSH
10804: LD_VAR 0 4
10808: PPUSH
10809: LD_VAR 0 5
10813: PPUSH
10814: LD_INT 5
10816: PPUSH
10817: LD_ADDR_EXP 45
10821: PPUSH
10822: CALL 9136 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , commander ) ;
10826: LD_VAR 0 12
10830: PPUSH
10831: LD_INT 4
10833: PPUSH
10834: LD_VAR 0 4
10838: PPUSH
10839: LD_VAR 0 5
10843: PPUSH
10844: LD_INT 5
10846: PPUSH
10847: LD_ADDR_EXP 45
10851: PPUSH
10852: CALL 9136 0 6
// if not global_defined then
10856: LD_LOC 14
10860: NOT
10861: IFFALSE 10871
// global_defined := true ;
10863: LD_ADDR_LOC 14
10867: PUSH
10868: LD_INT 1
10870: ST_TO_ADDR
// if def_siberite_detection then
10871: LD_EXP 9
10875: IFFALSE 10892
// SetTech ( tech_SibDet , side , state_researched ) ;
10877: LD_INT 20
10879: PPUSH
10880: LD_VAR 0 1
10884: PPUSH
10885: LD_INT 2
10887: PPUSH
10888: CALL_OW 322
// end ;
10892: LD_VAR 0 2
10896: RET
// function prepare_sides ; var i ; begin
10897: LD_INT 0
10899: PPUSH
10900: PPUSH
// global_units := [ ] ;
10901: LD_ADDR_LOC 13
10905: PUSH
10906: EMPTY
10907: ST_TO_ADDR
// global_defined := false ;
10908: LD_ADDR_LOC 14
10912: PUSH
10913: LD_INT 0
10915: ST_TO_ADDR
// for i := 1 to 8 do
10916: LD_ADDR_VAR 0 2
10920: PUSH
10921: DOUBLE
10922: LD_INT 1
10924: DEC
10925: ST_TO_ADDR
10926: LD_INT 8
10928: PUSH
10929: FOR_TO
10930: IFFALSE 10955
// if Side_Positions [ i ] then
10932: LD_EXP 35
10936: PUSH
10937: LD_VAR 0 2
10941: ARRAY
10942: IFFALSE 10953
// prepare_side ( i ) ;
10944: LD_VAR 0 2
10948: PPUSH
10949: CALL 9665 0 1
10953: GO 10929
10955: POP
10956: POP
// end ;
10957: LD_VAR 0 1
10961: RET
// export function starting_standard ; begin
10962: LD_INT 0
10964: PPUSH
// enable ( 45 ) ;
10965: LD_INT 45
10967: ENABLE_MARKED
// mp_selectmsg := true ;
10968: LD_ADDR_OWVAR 13
10972: PUSH
10973: LD_INT 1
10975: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
10976: CALL 7828 0 0
// prepare_map_coordinates ;
10980: CALL 7356 0 0
// set_shared_visions_and_alliances ;
10984: CALL 8773 0 0
// prepare_sides ;
10988: CALL 10897 0 0
// Init_Win_Condition ;
10992: CALL 11081 0 0
// init_shipments_and_respawning ;
10996: CALL 4990 0 0
// your_side := Player_Side ;
11000: LD_ADDR_OWVAR 2
11004: PUSH
11005: LD_EXP 31
11009: ST_TO_ADDR
// ResetFog ;
11010: CALL_OW 335
// music_nat := Side_Nations [ your_side ] ;
11014: LD_ADDR_OWVAR 71
11018: PUSH
11019: LD_EXP 36
11023: PUSH
11024: LD_OWVAR 2
11028: ARRAY
11029: ST_TO_ADDR
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
11030: LD_EXP 43
11034: PUSH
11035: LD_EXP 35
11039: PUSH
11040: LD_OWVAR 2
11044: ARRAY
11045: ARRAY
11046: PUSH
11047: LD_INT 1
11049: ARRAY
11050: PPUSH
11051: LD_EXP 43
11055: PUSH
11056: LD_EXP 35
11060: PUSH
11061: LD_OWVAR 2
11065: ARRAY
11066: ARRAY
11067: PUSH
11068: LD_INT 2
11070: ARRAY
11071: PPUSH
11072: CALL_OW 86
// end ; end_of_file
11076: LD_VAR 0 1
11080: RET
// export function Init_Win_Condition ; begin
11081: LD_INT 0
11083: PPUSH
// if Team_Game then
11084: LD_EXP 40
11088: IFFALSE 11095
// enable ( 98 ) else
11090: LD_INT 98
11092: ENABLE_MARKED
11093: GO 11098
// enable ( 99 ) ;
11095: LD_INT 99
11097: ENABLE_MARKED
// end ;
11098: LD_VAR 0 1
11102: RET
// every 0 0$2 marked 98 do var win , i ;
11103: GO 11105
11105: DISABLE
11106: LD_INT 0
11108: PPUSH
11109: PPUSH
// begin if your_side then
11110: LD_OWVAR 2
11114: IFFALSE 11322
// if not FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11116: LD_INT 22
11118: PUSH
11119: LD_OWVAR 2
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PUSH
11128: LD_INT 2
11130: PUSH
11131: LD_INT 21
11133: PUSH
11134: LD_INT 1
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 30
11143: PUSH
11144: LD_INT 0
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 30
11153: PUSH
11154: LD_INT 1
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PPUSH
11171: CALL_OW 69
11175: NOT
11176: IFFALSE 11193
// begin wait ( 0 0$3 ) ;
11178: LD_INT 105
11180: PPUSH
11181: CALL_OW 67
// YouLostInMultiplayer ;
11185: CALL_OW 107
// exit ;
11189: GO 11323
// end else
11191: GO 11322
// begin win := true ;
11193: LD_ADDR_VAR 0 1
11197: PUSH
11198: LD_INT 1
11200: ST_TO_ADDR
// for i = 1 to Side_positions do
11201: LD_ADDR_VAR 0 2
11205: PUSH
11206: DOUBLE
11207: LD_INT 1
11209: DEC
11210: ST_TO_ADDR
11211: LD_EXP 35
11215: PUSH
11216: FOR_TO
11217: IFFALSE 11301
// if Side_positions [ i ] and ( i <> your_side ) and MultiplayerSideAlive ( i ) then
11219: LD_EXP 35
11223: PUSH
11224: LD_VAR 0 2
11228: ARRAY
11229: PUSH
11230: LD_VAR 0 2
11234: PUSH
11235: LD_OWVAR 2
11239: NONEQUAL
11240: AND
11241: PUSH
11242: LD_VAR 0 2
11246: PPUSH
11247: CALL_OW 108
11251: AND
11252: IFFALSE 11299
// begin if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
11254: LD_EXP 33
11258: PUSH
11259: LD_VAR 0 2
11263: ARRAY
11264: NOT
11265: PUSH
11266: LD_EXP 33
11270: PUSH
11271: LD_VAR 0 2
11275: ARRAY
11276: PUSH
11277: LD_EXP 33
11281: PUSH
11282: LD_OWVAR 2
11286: ARRAY
11287: NONEQUAL
11288: OR
11289: IFFALSE 11299
// win := false ;
11291: LD_ADDR_VAR 0 1
11295: PUSH
11296: LD_INT 0
11298: ST_TO_ADDR
// end ;
11299: GO 11216
11301: POP
11302: POP
// if win then
11303: LD_VAR 0 1
11307: IFFALSE 11322
// begin wait ( 0 0$3 ) ;
11309: LD_INT 105
11311: PPUSH
11312: CALL_OW 67
// YouWinInMultiplayer ;
11316: CALL_OW 106
// exit ;
11320: GO 11323
// end ; end ; enable ;
11322: ENABLE
// end ;
11323: PPOPN 2
11325: END
// every 0 0$3 marked 99 do var win , i ;
11326: GO 11328
11328: DISABLE
11329: LD_INT 0
11331: PPUSH
11332: PPUSH
// begin if not FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11333: LD_INT 22
11335: PUSH
11336: LD_OWVAR 2
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 2
11347: PUSH
11348: LD_INT 21
11350: PUSH
11351: LD_INT 1
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 30
11360: PUSH
11361: LD_INT 0
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 30
11370: PUSH
11371: LD_INT 1
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PPUSH
11388: CALL_OW 69
11392: NOT
11393: IFFALSE 11410
// begin wait ( 0 0$3 ) ;
11395: LD_INT 105
11397: PPUSH
11398: CALL_OW 67
// YouLostInMultiplayer ;
11402: CALL_OW 107
// exit ;
11406: GO 11520
// end else
11408: GO 11519
// begin win := true ;
11410: LD_ADDR_VAR 0 1
11414: PUSH
11415: LD_INT 1
11417: ST_TO_ADDR
// for i = 1 to Side_Positions do
11418: LD_ADDR_VAR 0 2
11422: PUSH
11423: DOUBLE
11424: LD_INT 1
11426: DEC
11427: ST_TO_ADDR
11428: LD_EXP 35
11432: PUSH
11433: FOR_TO
11434: IFFALSE 11498
// if Side_Positions [ i ] and ( i <> your_side ) and MultiplayerSideAlive ( i ) then
11436: LD_EXP 35
11440: PUSH
11441: LD_VAR 0 2
11445: ARRAY
11446: PUSH
11447: LD_VAR 0 2
11451: PUSH
11452: LD_OWVAR 2
11456: NONEQUAL
11457: AND
11458: PUSH
11459: LD_VAR 0 2
11463: PPUSH
11464: CALL_OW 108
11468: AND
11469: IFFALSE 11496
// if not AlliedSides ( i , your_side ) then
11471: LD_VAR 0 2
11475: PPUSH
11476: LD_OWVAR 2
11480: PPUSH
11481: CALL 11523 0 2
11485: NOT
11486: IFFALSE 11496
// win := false ;
11488: LD_ADDR_VAR 0 1
11492: PUSH
11493: LD_INT 0
11495: ST_TO_ADDR
11496: GO 11433
11498: POP
11499: POP
// if win then
11500: LD_VAR 0 1
11504: IFFALSE 11519
// begin wait ( 0 0$3 ) ;
11506: LD_INT 105
11508: PPUSH
11509: CALL_OW 67
// YouWinInMultiplayer ;
11513: CALL_OW 106
// exit ;
11517: GO 11520
// end ; end ; enable ;
11519: ENABLE
// end ;
11520: PPOPN 2
11522: END
// function AlliedSides ( i , j ) ; var vysledek ; begin
11523: LD_INT 0
11525: PPUSH
11526: PPUSH
// vysledek := false ;
11527: LD_ADDR_VAR 0 4
11531: PUSH
11532: LD_INT 0
11534: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
11535: LD_VAR 0 1
11539: PPUSH
11540: LD_VAR 0 2
11544: PPUSH
11545: CALL_OW 81
11549: PUSH
11550: LD_INT 1
11552: EQUAL
11553: PUSH
11554: LD_VAR 0 2
11558: PPUSH
11559: LD_VAR 0 1
11563: PPUSH
11564: CALL_OW 81
11568: PUSH
11569: LD_INT 1
11571: EQUAL
11572: AND
11573: PUSH
11574: LD_VAR 0 1
11578: PPUSH
11579: CALL_OW 83
11583: AND
11584: PUSH
11585: LD_VAR 0 2
11589: PPUSH
11590: CALL_OW 83
11594: AND
11595: IFFALSE 11605
// vysledek := true ;
11597: LD_ADDR_VAR 0 4
11601: PUSH
11602: LD_INT 1
11604: ST_TO_ADDR
// result := vysledek ;
11605: LD_ADDR_VAR 0 3
11609: PUSH
11610: LD_VAR 0 4
11614: ST_TO_ADDR
// end ; end_of_file
11615: LD_VAR 0 3
11619: RET
// export function DisplayNames ; var i ; begin
11620: LD_INT 0
11622: PPUSH
11623: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
11624: LD_ADDR_VAR 0 2
11628: PUSH
11629: LD_INT 2
11631: PUSH
11632: LD_INT 30
11634: PUSH
11635: LD_INT 0
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 30
11644: PUSH
11645: LD_INT 1
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: LIST
11656: PPUSH
11657: CALL_OW 69
11661: PUSH
11662: FOR_IN
11663: IFFALSE 11690
// SetBName ( i , @ & GetSide ( i ) ) ;
11665: LD_VAR 0 2
11669: PPUSH
11670: LD_STRING @
11672: PUSH
11673: LD_VAR 0 2
11677: PPUSH
11678: CALL_OW 255
11682: STR
11683: PPUSH
11684: CALL_OW 500
11688: GO 11662
11690: POP
11691: POP
// end ;
11692: LD_VAR 0 1
11696: RET
// every 0 0$2 do
11697: GO 11699
11699: DISABLE
// DisplayNames ;
11700: CALL 11620 0 0
11704: END
// on BuildingComplete ( b ) do DisplayNames ;
11705: CALL 11620 0 0
11709: PPOPN 1
11711: END
// on BuildingStarted ( b , h ) do DisplayNames ;
11712: CALL 11620 0 0
11716: PPOPN 2
11718: END
// on BuildingCaptured ( b , o , e ) do DisplayNames ; end_of_file
11719: CALL 11620 0 0
11723: PPOPN 3
11725: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
11726: LD_INT 0
11728: PPUSH
11729: PPUSH
// AllStrings := [ #gamespeed , game_speed - 4 ] ^ [ #Multi1x1-Time , tick ] ;
11730: LD_ADDR_VAR 0 2
11734: PUSH
11735: LD_STRING #gamespeed
11737: PUSH
11738: LD_OWVAR 65
11742: PUSH
11743: LD_INT 4
11745: MINUS
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: LD_STRING #Multi1x1-Time
11753: PUSH
11754: LD_OWVAR 1
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: ADD
11763: ST_TO_ADDR
// end ;
11764: LD_VAR 0 1
11768: RET
// every 0 0$1 do
11769: GO 11771
11771: DISABLE
// begin ShowTimer ;
11772: CALL 11726 0 0
// enable ;
11776: ENABLE
// end ; end_of_file
11777: END
// export ObnovCas , ObnovZpozdeni ; export function SetRespawningTime ( minBTime , maxBTime , MinDelay , MaxDelay ) ; var k ; begin
11778: LD_INT 0
11780: PPUSH
11781: PPUSH
// k = Rand ( minBTime , maxBTime ) ;
11782: LD_ADDR_VAR 0 6
11786: PUSH
11787: LD_VAR 0 1
11791: PPUSH
11792: LD_VAR 0 2
11796: PPUSH
11797: CALL_OW 12
11801: ST_TO_ADDR
// ObnovCas = [ k , k , k , k , k , k , k , k ] ;
11802: LD_ADDR_EXP 52
11806: PUSH
11807: LD_VAR 0 6
11811: PUSH
11812: LD_VAR 0 6
11816: PUSH
11817: LD_VAR 0 6
11821: PUSH
11822: LD_VAR 0 6
11826: PUSH
11827: LD_VAR 0 6
11831: PUSH
11832: LD_VAR 0 6
11836: PUSH
11837: LD_VAR 0 6
11841: PUSH
11842: LD_VAR 0 6
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: ST_TO_ADDR
// k = Rand ( minDelay , MaxDelay ) ;
11857: LD_ADDR_VAR 0 6
11861: PUSH
11862: LD_VAR 0 3
11866: PPUSH
11867: LD_VAR 0 4
11871: PPUSH
11872: CALL_OW 12
11876: ST_TO_ADDR
// ObnovZpozdeni = k ;
11877: LD_ADDR_EXP 53
11881: PUSH
11882: LD_VAR 0 6
11886: ST_TO_ADDR
// end ;
11887: LD_VAR 0 5
11891: RET
// export unit_list ; export function ObnovCloveka ( side , nation , restored ) ; var building_list , b , n , un , k , i , base_skills , speed , def ; begin
11892: LD_INT 0
11894: PPUSH
11895: PPUSH
11896: PPUSH
11897: PPUSH
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
// if ObnovCas [ side ] = 0 then
11904: LD_EXP 52
11908: PUSH
11909: LD_VAR 0 1
11913: ARRAY
11914: PUSH
11915: LD_INT 0
11917: EQUAL
11918: IFFALSE 11922
// exit ;
11920: GO 12547
// uc_nation := nation ;
11922: LD_ADDR_OWVAR 21
11926: PUSH
11927: LD_VAR 0 2
11931: ST_TO_ADDR
// uc_side := side ;
11932: LD_ADDR_OWVAR 20
11936: PUSH
11937: LD_VAR 0 1
11941: ST_TO_ADDR
// uc_direction := Rand ( 0 , 5 ) ;
11942: LD_ADDR_OWVAR 24
11946: PUSH
11947: LD_INT 0
11949: PPUSH
11950: LD_INT 5
11952: PPUSH
11953: CALL_OW 12
11957: ST_TO_ADDR
// if restored then
11958: LD_VAR 0 3
11962: IFFALSE 12045
// begin hc_class = GetClass ( restored ) ;
11964: LD_ADDR_OWVAR 28
11968: PUSH
11969: LD_VAR 0 3
11973: PPUSH
11974: CALL_OW 257
11978: ST_TO_ADDR
// hc_attr = [ GetAttr ( restored , attr_stamina ) , GetAttr ( restored , attr_speed ) ] ;
11979: LD_ADDR_OWVAR 29
11983: PUSH
11984: LD_VAR 0 3
11988: PPUSH
11989: LD_INT 1
11991: PPUSH
11992: CALL_OW 260
11996: PUSH
11997: LD_VAR 0 3
12001: PPUSH
12002: LD_INT 2
12004: PPUSH
12005: CALL_OW 260
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: ST_TO_ADDR
// if hc_class in [ class_sniper , class_bazooker , class_mortar ] then
12014: LD_OWVAR 28
12018: PUSH
12019: LD_INT 5
12021: PUSH
12022: LD_INT 9
12024: PUSH
12025: LD_INT 8
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: LIST
12032: IN
12033: IFFALSE 12043
// hc_class = class_soldier ;
12035: LD_ADDR_OWVAR 28
12039: PUSH
12040: LD_INT 1
12042: ST_TO_ADDR
// end else
12043: GO 12054
// randomHumanStats ( initial_level ) ;
12045: LD_EXP 15
12049: PPUSH
12050: CALL 13478 0 1
// hc_importance := 0 ;
12054: LD_ADDR_OWVAR 32
12058: PUSH
12059: LD_INT 0
12061: ST_TO_ADDR
// hc_gallery :=  ;
12062: LD_ADDR_OWVAR 33
12066: PUSH
12067: LD_STRING 
12069: ST_TO_ADDR
// hc_face_number := 0 ;
12070: LD_ADDR_OWVAR 34
12074: PUSH
12075: LD_INT 0
12077: ST_TO_ADDR
// un := CreateHuman ;
12078: LD_ADDR_VAR 0 8
12082: PUSH
12083: CALL_OW 44
12087: ST_TO_ADDR
// if restored then
12088: LD_VAR 0 3
12092: IFFALSE 12108
// CopySkills ( restored , un ) ;
12094: LD_VAR 0 3
12098: PPUSH
12099: LD_VAR 0 8
12103: PPUSH
12104: CALL_OW 510
// k = ObnovCas [ side ] + ObnovZpozdeni ;
12108: LD_ADDR_VAR 0 9
12112: PUSH
12113: LD_EXP 52
12117: PUSH
12118: LD_VAR 0 1
12122: ARRAY
12123: PUSH
12124: LD_EXP 53
12128: PLUS
12129: ST_TO_ADDR
// ObnovCas = Replace ( ObnovCas , side , k ) ;
12130: LD_ADDR_EXP 52
12134: PUSH
12135: LD_EXP 52
12139: PPUSH
12140: LD_VAR 0 1
12144: PPUSH
12145: LD_VAR 0 9
12149: PPUSH
12150: CALL_OW 1
12154: ST_TO_ADDR
// wait ( ObnovCas [ side ] - ObnovZpozdeni ) ;
12155: LD_EXP 52
12159: PUSH
12160: LD_VAR 0 1
12164: ARRAY
12165: PUSH
12166: LD_EXP 53
12170: MINUS
12171: PPUSH
12172: CALL_OW 67
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] , [ f_nation , nation ] ] ) ;
12176: LD_ADDR_VAR 0 5
12180: PUSH
12181: LD_INT 21
12183: PUSH
12184: LD_INT 3
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 2
12193: PUSH
12194: LD_INT 30
12196: PUSH
12197: LD_INT 0
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 30
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 50
12221: PUSH
12222: EMPTY
12223: LIST
12224: PUSH
12225: LD_INT 22
12227: PUSH
12228: LD_VAR 0 1
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: LD_INT 23
12239: PUSH
12240: LD_VAR 0 2
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: PPUSH
12256: CALL_OW 69
12260: ST_TO_ADDR
// if building_list = 0 then
12261: LD_VAR 0 5
12265: PUSH
12266: LD_INT 0
12268: EQUAL
12269: IFFALSE 12343
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] ] ) ;
12271: LD_ADDR_VAR 0 5
12275: PUSH
12276: LD_INT 21
12278: PUSH
12279: LD_INT 3
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: LD_INT 2
12288: PUSH
12289: LD_INT 30
12291: PUSH
12292: LD_INT 0
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: LD_INT 30
12301: PUSH
12302: LD_INT 1
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 50
12316: PUSH
12317: EMPTY
12318: LIST
12319: PUSH
12320: LD_INT 22
12322: PUSH
12323: LD_VAR 0 1
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: PPUSH
12338: CALL_OW 69
12342: ST_TO_ADDR
// if building_list > 0 then
12343: LD_VAR 0 5
12347: PUSH
12348: LD_INT 0
12350: GREATER
12351: IFFALSE 12469
// begin b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
12353: LD_ADDR_VAR 0 6
12357: PUSH
12358: LD_VAR 0 5
12362: PUSH
12363: LD_INT 1
12365: PPUSH
12366: LD_VAR 0 5
12370: PUSH
12371: LD_INT 0
12373: PLUS
12374: PPUSH
12375: CALL_OW 12
12379: ARRAY
12380: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
12381: LD_VAR 0 6
12385: PPUSH
12386: CALL_OW 266
12390: PUSH
12391: LD_INT 0
12393: PUSH
12394: LD_INT 1
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: IN
12401: IFFALSE 12413
// n = 25 else
12403: LD_ADDR_VAR 0 7
12407: PUSH
12408: LD_INT 25
12410: ST_TO_ADDR
12411: GO 12421
// n = 10 ;
12413: LD_ADDR_VAR 0 7
12417: PUSH
12418: LD_INT 10
12420: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( b ) , GetY ( b ) , n , true ) ;
12421: LD_VAR 0 8
12425: PPUSH
12426: LD_VAR 0 6
12430: PPUSH
12431: CALL_OW 250
12435: PPUSH
12436: LD_VAR 0 6
12440: PPUSH
12441: CALL_OW 251
12445: PPUSH
12446: LD_VAR 0 7
12450: PPUSH
12451: LD_INT 1
12453: PPUSH
12454: CALL_OW 50
// OnHumanRespawned ( un ) ;
12458: LD_VAR 0 8
12462: PPUSH
12463: CALL 4982 0 1
// end else
12467: GO 12547
// begin unit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] ] ) ;
12469: LD_ADDR_EXP 54
12473: PUSH
12474: LD_INT 22
12476: PUSH
12477: LD_VAR 0 1
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: LD_INT 50
12488: PUSH
12489: EMPTY
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PPUSH
12496: CALL_OW 69
12500: ST_TO_ADDR
// if unit_list > 0 then
12501: LD_EXP 54
12505: PUSH
12506: LD_INT 0
12508: GREATER
12509: IFFALSE 12545
// begin ObnovOpozdilceCloveka ( un , side , k / 2 ) ;
12511: LD_VAR 0 8
12515: PPUSH
12516: LD_VAR 0 1
12520: PPUSH
12521: LD_VAR 0 9
12525: PUSH
12526: LD_INT 2
12528: DIVREAL
12529: PPUSH
12530: CALL 12552 0 3
// OnHumanRespawned ( un ) ;
12534: LD_VAR 0 8
12538: PPUSH
12539: CALL 4982 0 1
// end else
12543: GO 12547
// exit ;
12545: GO 12547
// end ; end ;
12547: LD_VAR 0 4
12551: RET
// function ObnovOpozdilceCloveka ( un , side , waitTime ) ; var building_list , n , unit_list , b ; begin
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
12556: PPUSH
12557: PPUSH
12558: PPUSH
// wait ( waitTime ) ;
12559: LD_VAR 0 3
12563: PPUSH
12564: CALL_OW 67
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] , [ f_nation , GetNation ( un ) ] ] ) ;
12568: LD_ADDR_VAR 0 5
12572: PUSH
12573: LD_INT 21
12575: PUSH
12576: LD_INT 3
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: LD_INT 2
12585: PUSH
12586: LD_INT 30
12588: PUSH
12589: LD_INT 0
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 30
12598: PUSH
12599: LD_INT 1
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 50
12613: PUSH
12614: EMPTY
12615: LIST
12616: PUSH
12617: LD_INT 22
12619: PUSH
12620: LD_VAR 0 2
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 23
12631: PUSH
12632: LD_VAR 0 1
12636: PPUSH
12637: CALL_OW 248
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: PPUSH
12653: CALL_OW 69
12657: ST_TO_ADDR
// if building_list = 0 then
12658: LD_VAR 0 5
12662: PUSH
12663: LD_INT 0
12665: EQUAL
12666: IFFALSE 12740
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] ] ) ;
12668: LD_ADDR_VAR 0 5
12672: PUSH
12673: LD_INT 21
12675: PUSH
12676: LD_INT 3
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 2
12685: PUSH
12686: LD_INT 30
12688: PUSH
12689: LD_INT 0
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 30
12698: PUSH
12699: LD_INT 1
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: LIST
12710: PUSH
12711: LD_INT 50
12713: PUSH
12714: EMPTY
12715: LIST
12716: PUSH
12717: LD_INT 22
12719: PUSH
12720: LD_VAR 0 2
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: PPUSH
12735: CALL_OW 69
12739: ST_TO_ADDR
// if building_list > 0 then
12740: LD_VAR 0 5
12744: PUSH
12745: LD_INT 0
12747: GREATER
12748: IFFALSE 12866
// begin b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
12750: LD_ADDR_VAR 0 8
12754: PUSH
12755: LD_VAR 0 5
12759: PUSH
12760: LD_INT 1
12762: PPUSH
12763: LD_VAR 0 5
12767: PUSH
12768: LD_INT 0
12770: PLUS
12771: PPUSH
12772: CALL_OW 12
12776: ARRAY
12777: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
12778: LD_VAR 0 8
12782: PPUSH
12783: CALL_OW 266
12787: PUSH
12788: LD_INT 0
12790: PUSH
12791: LD_INT 1
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: IN
12798: IFFALSE 12810
// n = 25 else
12800: LD_ADDR_VAR 0 6
12804: PUSH
12805: LD_INT 25
12807: ST_TO_ADDR
12808: GO 12818
// n = 10 ;
12810: LD_ADDR_VAR 0 6
12814: PUSH
12815: LD_INT 10
12817: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( b ) , GetY ( b ) , n , true ) ;
12818: LD_VAR 0 1
12822: PPUSH
12823: LD_VAR 0 8
12827: PPUSH
12828: CALL_OW 250
12832: PPUSH
12833: LD_VAR 0 8
12837: PPUSH
12838: CALL_OW 251
12842: PPUSH
12843: LD_VAR 0 6
12847: PPUSH
12848: LD_INT 1
12850: PPUSH
12851: CALL_OW 50
// OnHumanRespawned ( un ) ;
12855: LD_VAR 0 1
12859: PPUSH
12860: CALL 4982 0 1
// end else
12864: GO 12964
// begin unit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12866: LD_ADDR_VAR 0 7
12870: PUSH
12871: LD_INT 22
12873: PUSH
12874: LD_VAR 0 2
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: PUSH
12883: LD_INT 2
12885: PUSH
12886: LD_INT 21
12888: PUSH
12889: LD_INT 1
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 33
12898: PUSH
12899: LD_INT 3
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 33
12908: PUSH
12909: LD_INT 5
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PPUSH
12926: CALL_OW 69
12930: ST_TO_ADDR
// if unit_list > 0 then
12931: LD_VAR 0 7
12935: PUSH
12936: LD_INT 0
12938: GREATER
12939: IFFALSE 12962
// ObnovOpozdilceCloveka ( un , side , waitTime ) else
12941: LD_VAR 0 1
12945: PPUSH
12946: LD_VAR 0 2
12950: PPUSH
12951: LD_VAR 0 3
12955: PPUSH
12956: CALL 12552 0 3
12960: GO 12964
// exit ;
12962: GO 12964
// end ; end ; end_of_file
12964: LD_VAR 0 4
12968: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12969: LD_INT 0
12971: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12972: LD_VAR 0 1
12976: PPUSH
12977: CALL_OW 255
12981: PUSH
12982: LD_VAR 0 4
12986: EQUAL
12987: IFFALSE 13006
// begin SetAchievement ( ACH_RAD ) ;
12989: LD_STRING ACH_RAD
12991: PPUSH
12992: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12996: LD_STRING ACH_NL
12998: PPUSH
12999: LD_INT 1
13001: PPUSH
13002: CALL_OW 564
// end end ;
13006: LD_VAR 0 5
13010: RET
// export function SA_Win ( side ) ; begin
13011: LD_INT 0
13013: PPUSH
// case side of 1 :
13014: LD_VAR 0 1
13018: PUSH
13019: LD_INT 1
13021: DOUBLE
13022: EQUAL
13023: IFTRUE 13027
13025: GO 13040
13027: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
13028: LD_STRING ACH_AH
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: CALL_OW 564
13038: GO 13203
13040: LD_INT 2
13042: DOUBLE
13043: EQUAL
13044: IFTRUE 13048
13046: GO 13061
13048: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
13049: LD_STRING ACH_E
13051: PPUSH
13052: LD_INT 1
13054: PPUSH
13055: CALL_OW 564
13059: GO 13203
13061: LD_INT 3
13063: DOUBLE
13064: EQUAL
13065: IFTRUE 13069
13067: GO 13082
13069: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
13070: LD_STRING ACH_OOL
13072: PPUSH
13073: LD_INT 1
13075: PPUSH
13076: CALL_OW 564
13080: GO 13203
13082: LD_INT 1
13084: PUSH
13085: LD_INT 2
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: DOUBLE
13092: EQUAL
13093: IFTRUE 13097
13095: GO 13122
13097: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
13098: LD_STRING ACH_AH
13100: PPUSH
13101: LD_REAL  5.00000000000000E-0001
13104: PPUSH
13105: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
13109: LD_STRING ACH_E
13111: PPUSH
13112: LD_REAL  5.00000000000000E-0001
13115: PPUSH
13116: CALL_OW 564
// end ; [ 2 , 3 ] :
13120: GO 13203
13122: LD_INT 2
13124: PUSH
13125: LD_INT 3
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: DOUBLE
13132: EQUAL
13133: IFTRUE 13137
13135: GO 13162
13137: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
13138: LD_STRING ACH_OOL
13140: PPUSH
13141: LD_REAL  5.00000000000000E-0001
13144: PPUSH
13145: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
13149: LD_STRING ACH_E
13151: PPUSH
13152: LD_REAL  5.00000000000000E-0001
13155: PPUSH
13156: CALL_OW 564
// end ; [ 3 , 1 ] :
13160: GO 13203
13162: LD_INT 3
13164: PUSH
13165: LD_INT 1
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: DOUBLE
13172: EQUAL
13173: IFTRUE 13177
13175: GO 13202
13177: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
13178: LD_STRING ACH_AH
13180: PPUSH
13181: LD_REAL  5.00000000000000E-0001
13184: PPUSH
13185: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
13189: LD_STRING ACH_OOL
13191: PPUSH
13192: LD_REAL  5.00000000000000E-0001
13195: PPUSH
13196: CALL_OW 564
// end ; end ;
13200: GO 13203
13202: POP
// end ; end_of_file
13203: LD_VAR 0 2
13207: RET
// export MaxFlags ; export function ShowResources ( FullMapArea , EnableSiberitResurces , Range ) ; var k , k2 , i , d , r , u ; begin
13208: LD_INT 0
13210: PPUSH
13211: PPUSH
13212: PPUSH
13213: PPUSH
13214: PPUSH
13215: PPUSH
13216: PPUSH
// if range = 0 then
13217: LD_VAR 0 3
13221: PUSH
13222: LD_INT 0
13224: EQUAL
13225: IFFALSE 13235
// range = 400 ;
13227: LD_ADDR_VAR 0 3
13231: PUSH
13232: LD_INT 400
13234: ST_TO_ADDR
// r = range ;
13235: LD_ADDR_VAR 0 9
13239: PUSH
13240: LD_VAR 0 3
13244: ST_TO_ADDR
// d = GetListOfResourcesInArea ( FullMapArea ) ;
13245: LD_ADDR_VAR 0 8
13249: PUSH
13250: LD_VAR 0 1
13254: PPUSH
13255: CALL_OW 442
13259: ST_TO_ADDR
// for k = 1 to ( d / 3 ) do
13260: LD_ADDR_VAR 0 5
13264: PUSH
13265: DOUBLE
13266: LD_INT 1
13268: DEC
13269: ST_TO_ADDR
13270: LD_VAR 0 8
13274: PUSH
13275: LD_INT 3
13277: DIVREAL
13278: PUSH
13279: FOR_TO
13280: IFFALSE 13471
// begin k2 = k * 3 ;
13282: LD_ADDR_VAR 0 6
13286: PUSH
13287: LD_VAR 0 5
13291: PUSH
13292: LD_INT 3
13294: MUL
13295: ST_TO_ADDR
// for i = 1 to 8 do
13296: LD_ADDR_VAR 0 7
13300: PUSH
13301: DOUBLE
13302: LD_INT 1
13304: DEC
13305: ST_TO_ADDR
13306: LD_INT 8
13308: PUSH
13309: FOR_TO
13310: IFFALSE 13467
// begin if d [ k2 ] = 1 or ( d [ k2 ] = 2 and EnableSiberitResurces ) then
13312: LD_VAR 0 8
13316: PUSH
13317: LD_VAR 0 6
13321: ARRAY
13322: PUSH
13323: LD_INT 1
13325: EQUAL
13326: PUSH
13327: LD_VAR 0 8
13331: PUSH
13332: LD_VAR 0 6
13336: ARRAY
13337: PUSH
13338: LD_INT 2
13340: EQUAL
13341: PUSH
13342: LD_VAR 0 2
13346: AND
13347: OR
13348: IFFALSE 13465
// begin u = filterAllUnits ( [ [ f_side , i ] , [ f_distxy , d [ k2 - 2 ] , d [ k2 - 1 ] , r ] ] ) ;
13350: LD_ADDR_VAR 0 10
13354: PUSH
13355: LD_INT 22
13357: PUSH
13358: LD_VAR 0 7
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 92
13369: PUSH
13370: LD_VAR 0 8
13374: PUSH
13375: LD_VAR 0 6
13379: PUSH
13380: LD_INT 2
13382: MINUS
13383: ARRAY
13384: PUSH
13385: LD_VAR 0 8
13389: PUSH
13390: LD_VAR 0 6
13394: PUSH
13395: LD_INT 1
13397: MINUS
13398: ARRAY
13399: PUSH
13400: LD_VAR 0 9
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PPUSH
13415: CALL_OW 69
13419: ST_TO_ADDR
// if u then
13420: LD_VAR 0 10
13424: IFFALSE 13465
// SetResourceVisibility ( d [ k2 - 2 ] , d [ k2 - 1 ] , i ) ;
13426: LD_VAR 0 8
13430: PUSH
13431: LD_VAR 0 6
13435: PUSH
13436: LD_INT 2
13438: MINUS
13439: ARRAY
13440: PPUSH
13441: LD_VAR 0 8
13445: PUSH
13446: LD_VAR 0 6
13450: PUSH
13451: LD_INT 1
13453: MINUS
13454: ARRAY
13455: PPUSH
13456: LD_VAR 0 7
13460: PPUSH
13461: CALL_OW 441
// end ; end ;
13465: GO 13309
13467: POP
13468: POP
// end ;
13469: GO 13279
13471: POP
13472: POP
// end ;
13473: LD_VAR 0 4
13477: RET
// export function randomHumanStats ( init_level ) ; var cl , combat , eng , mech , sci , skills , base_skills , attr ; var i , k , base , n , def , speed ; begin
13478: LD_INT 0
13480: PPUSH
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
13485: PPUSH
13486: PPUSH
13487: PPUSH
13488: PPUSH
13489: PPUSH
13490: PPUSH
13491: PPUSH
13492: PPUSH
13493: PPUSH
13494: PPUSH
// cl = rand ( 1 , 4 ) ;
13495: LD_ADDR_VAR 0 3
13499: PUSH
13500: LD_INT 1
13502: PPUSH
13503: LD_INT 4
13505: PPUSH
13506: CALL_OW 12
13510: ST_TO_ADDR
// base = init_level ;
13511: LD_ADDR_VAR 0 13
13515: PUSH
13516: LD_VAR 0 1
13520: ST_TO_ADDR
// case tick of 0 .. 5 5$00 :
13521: LD_OWVAR 1
13525: PUSH
13526: LD_INT 0
13528: DOUBLE
13529: GREATEREQUAL
13530: IFFALSE 13538
13532: LD_INT 10500
13534: DOUBLE
13535: LESSEQUAL
13536: IFTRUE 13540
13538: GO 13551
13540: POP
// i = 1 ; 5 5$01 .. 9 9$00 :
13541: LD_ADDR_VAR 0 11
13545: PUSH
13546: LD_INT 1
13548: ST_TO_ADDR
13549: GO 13810
13551: LD_INT 10535
13553: DOUBLE
13554: GREATEREQUAL
13555: IFFALSE 13563
13557: LD_INT 18900
13559: DOUBLE
13560: LESSEQUAL
13561: IFTRUE 13565
13563: GO 13576
13565: POP
// i = 2 ; 9 9$01 .. 15 15$00 :
13566: LD_ADDR_VAR 0 11
13570: PUSH
13571: LD_INT 2
13573: ST_TO_ADDR
13574: GO 13810
13576: LD_INT 18935
13578: DOUBLE
13579: GREATEREQUAL
13580: IFFALSE 13588
13582: LD_INT 31500
13584: DOUBLE
13585: LESSEQUAL
13586: IFTRUE 13590
13588: GO 13601
13590: POP
// i = 3 ; 15 15$01 .. 22 22$00 :
13591: LD_ADDR_VAR 0 11
13595: PUSH
13596: LD_INT 3
13598: ST_TO_ADDR
13599: GO 13810
13601: LD_INT 31535
13603: DOUBLE
13604: GREATEREQUAL
13605: IFFALSE 13613
13607: LD_INT 46200
13609: DOUBLE
13610: LESSEQUAL
13611: IFTRUE 13615
13613: GO 13626
13615: POP
// i = 4 ; 22 22$01 .. 30 30$00 :
13616: LD_ADDR_VAR 0 11
13620: PUSH
13621: LD_INT 4
13623: ST_TO_ADDR
13624: GO 13810
13626: LD_INT 46235
13628: DOUBLE
13629: GREATEREQUAL
13630: IFFALSE 13638
13632: LD_INT 63000
13634: DOUBLE
13635: LESSEQUAL
13636: IFTRUE 13640
13638: GO 13651
13640: POP
// i = 5 ; 30 30$01 .. 40 40$00 :
13641: LD_ADDR_VAR 0 11
13645: PUSH
13646: LD_INT 5
13648: ST_TO_ADDR
13649: GO 13810
13651: LD_INT 63035
13653: DOUBLE
13654: GREATEREQUAL
13655: IFFALSE 13663
13657: LD_INT 84000
13659: DOUBLE
13660: LESSEQUAL
13661: IFTRUE 13665
13663: GO 13676
13665: POP
// i = 6 ; 40 40$01 .. 52 52$00 :
13666: LD_ADDR_VAR 0 11
13670: PUSH
13671: LD_INT 6
13673: ST_TO_ADDR
13674: GO 13810
13676: LD_INT 84035
13678: DOUBLE
13679: GREATEREQUAL
13680: IFFALSE 13688
13682: LD_INT 109200
13684: DOUBLE
13685: LESSEQUAL
13686: IFTRUE 13690
13688: GO 13701
13690: POP
// i = 7 ; 52 52$01 .. 66 66$00 :
13691: LD_ADDR_VAR 0 11
13695: PUSH
13696: LD_INT 7
13698: ST_TO_ADDR
13699: GO 13810
13701: LD_INT 109235
13703: DOUBLE
13704: GREATEREQUAL
13705: IFFALSE 13713
13707: LD_INT 138600
13709: DOUBLE
13710: LESSEQUAL
13711: IFTRUE 13715
13713: GO 13726
13715: POP
// i = 8 ; 66 66$01 .. 88 88$00 :
13716: LD_ADDR_VAR 0 11
13720: PUSH
13721: LD_INT 8
13723: ST_TO_ADDR
13724: GO 13810
13726: LD_INT 138635
13728: DOUBLE
13729: GREATEREQUAL
13730: IFFALSE 13738
13732: LD_INT 184800
13734: DOUBLE
13735: LESSEQUAL
13736: IFTRUE 13740
13738: GO 13751
13740: POP
// i = 9 ; 88 88$01 .. 100 100$00 :
13741: LD_ADDR_VAR 0 11
13745: PUSH
13746: LD_INT 9
13748: ST_TO_ADDR
13749: GO 13810
13751: LD_INT 184835
13753: DOUBLE
13754: GREATEREQUAL
13755: IFFALSE 13763
13757: LD_INT 210000
13759: DOUBLE
13760: LESSEQUAL
13761: IFTRUE 13765
13763: GO 13776
13765: POP
// i = 10 ; 100 100$01 .. 120 120$00 :
13766: LD_ADDR_VAR 0 11
13770: PUSH
13771: LD_INT 10
13773: ST_TO_ADDR
13774: GO 13810
13776: LD_INT 210035
13778: DOUBLE
13779: GREATEREQUAL
13780: IFFALSE 13788
13782: LD_INT 252000
13784: DOUBLE
13785: LESSEQUAL
13786: IFTRUE 13790
13788: GO 13801
13790: POP
// i = 11 ; else
13791: LD_ADDR_VAR 0 11
13795: PUSH
13796: LD_INT 11
13798: ST_TO_ADDR
13799: GO 13810
13801: POP
// i = 12 ; end ;
13802: LD_ADDR_VAR 0 11
13806: PUSH
13807: LD_INT 12
13809: ST_TO_ADDR
// i = i - base div 2 ;
13810: LD_ADDR_VAR 0 11
13814: PUSH
13815: LD_VAR 0 11
13819: PUSH
13820: LD_VAR 0 13
13824: PUSH
13825: LD_INT 2
13827: DIV
13828: MINUS
13829: ST_TO_ADDR
// if i < 0 then
13830: LD_VAR 0 11
13834: PUSH
13835: LD_INT 0
13837: LESS
13838: IFFALSE 13848
// i = 0 ;
13840: LD_ADDR_VAR 0 11
13844: PUSH
13845: LD_INT 0
13847: ST_TO_ADDR
// if cl = 1 then
13848: LD_VAR 0 3
13852: PUSH
13853: LD_INT 1
13855: EQUAL
13856: IFFALSE 13896
// combat = rand ( base + i - 1 , base + i ) else
13858: LD_ADDR_VAR 0 4
13862: PUSH
13863: LD_VAR 0 13
13867: PUSH
13868: LD_VAR 0 11
13872: PLUS
13873: PUSH
13874: LD_INT 1
13876: MINUS
13877: PPUSH
13878: LD_VAR 0 13
13882: PUSH
13883: LD_VAR 0 11
13887: PLUS
13888: PPUSH
13889: CALL_OW 12
13893: ST_TO_ADDR
13894: GO 13936
// combat = rand ( base + i - 4 , base + i - 1 ) ;
13896: LD_ADDR_VAR 0 4
13900: PUSH
13901: LD_VAR 0 13
13905: PUSH
13906: LD_VAR 0 11
13910: PLUS
13911: PUSH
13912: LD_INT 4
13914: MINUS
13915: PPUSH
13916: LD_VAR 0 13
13920: PUSH
13921: LD_VAR 0 11
13925: PLUS
13926: PUSH
13927: LD_INT 1
13929: MINUS
13930: PPUSH
13931: CALL_OW 12
13935: ST_TO_ADDR
// if cl = 2 then
13936: LD_VAR 0 3
13940: PUSH
13941: LD_INT 2
13943: EQUAL
13944: IFFALSE 13984
// eng = rand ( base + i - 1 , base + i ) else
13946: LD_ADDR_VAR 0 5
13950: PUSH
13951: LD_VAR 0 13
13955: PUSH
13956: LD_VAR 0 11
13960: PLUS
13961: PUSH
13962: LD_INT 1
13964: MINUS
13965: PPUSH
13966: LD_VAR 0 13
13970: PUSH
13971: LD_VAR 0 11
13975: PLUS
13976: PPUSH
13977: CALL_OW 12
13981: ST_TO_ADDR
13982: GO 14024
// eng = rand ( base + i - 4 , base + i - 1 ) ;
13984: LD_ADDR_VAR 0 5
13988: PUSH
13989: LD_VAR 0 13
13993: PUSH
13994: LD_VAR 0 11
13998: PLUS
13999: PUSH
14000: LD_INT 4
14002: MINUS
14003: PPUSH
14004: LD_VAR 0 13
14008: PUSH
14009: LD_VAR 0 11
14013: PLUS
14014: PUSH
14015: LD_INT 1
14017: MINUS
14018: PPUSH
14019: CALL_OW 12
14023: ST_TO_ADDR
// if cl = 3 then
14024: LD_VAR 0 3
14028: PUSH
14029: LD_INT 3
14031: EQUAL
14032: IFFALSE 14072
// mech = rand ( base + i - 1 , base + i ) else
14034: LD_ADDR_VAR 0 6
14038: PUSH
14039: LD_VAR 0 13
14043: PUSH
14044: LD_VAR 0 11
14048: PLUS
14049: PUSH
14050: LD_INT 1
14052: MINUS
14053: PPUSH
14054: LD_VAR 0 13
14058: PUSH
14059: LD_VAR 0 11
14063: PLUS
14064: PPUSH
14065: CALL_OW 12
14069: ST_TO_ADDR
14070: GO 14112
// mech = rand ( base + i - 4 , base + i - 1 ) ;
14072: LD_ADDR_VAR 0 6
14076: PUSH
14077: LD_VAR 0 13
14081: PUSH
14082: LD_VAR 0 11
14086: PLUS
14087: PUSH
14088: LD_INT 4
14090: MINUS
14091: PPUSH
14092: LD_VAR 0 13
14096: PUSH
14097: LD_VAR 0 11
14101: PLUS
14102: PUSH
14103: LD_INT 1
14105: MINUS
14106: PPUSH
14107: CALL_OW 12
14111: ST_TO_ADDR
// if cl = 4 then
14112: LD_VAR 0 3
14116: PUSH
14117: LD_INT 4
14119: EQUAL
14120: IFFALSE 14160
// sci = rand ( base + i - 1 , base + i ) else
14122: LD_ADDR_VAR 0 7
14126: PUSH
14127: LD_VAR 0 13
14131: PUSH
14132: LD_VAR 0 11
14136: PLUS
14137: PUSH
14138: LD_INT 1
14140: MINUS
14141: PPUSH
14142: LD_VAR 0 13
14146: PUSH
14147: LD_VAR 0 11
14151: PLUS
14152: PPUSH
14153: CALL_OW 12
14157: ST_TO_ADDR
14158: GO 14200
// sci = rand ( base + i - 4 , base + i - 1 ) ;
14160: LD_ADDR_VAR 0 7
14164: PUSH
14165: LD_VAR 0 13
14169: PUSH
14170: LD_VAR 0 11
14174: PLUS
14175: PUSH
14176: LD_INT 4
14178: MINUS
14179: PPUSH
14180: LD_VAR 0 13
14184: PUSH
14185: LD_VAR 0 11
14189: PLUS
14190: PUSH
14191: LD_INT 1
14193: MINUS
14194: PPUSH
14195: CALL_OW 12
14199: ST_TO_ADDR
// skills = [ combat , eng , mech , sci ] ;
14200: LD_ADDR_VAR 0 8
14204: PUSH
14205: LD_VAR 0 4
14209: PUSH
14210: LD_VAR 0 5
14214: PUSH
14215: LD_VAR 0 6
14219: PUSH
14220: LD_VAR 0 7
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: ST_TO_ADDR
// for i = 1 to 4 do
14231: LD_ADDR_VAR 0 11
14235: PUSH
14236: DOUBLE
14237: LD_INT 1
14239: DEC
14240: ST_TO_ADDR
14241: LD_INT 4
14243: PUSH
14244: FOR_TO
14245: IFFALSE 14400
// begin if skills [ i ] < 0 then
14247: LD_VAR 0 8
14251: PUSH
14252: LD_VAR 0 11
14256: ARRAY
14257: PUSH
14258: LD_INT 0
14260: LESS
14261: IFFALSE 14286
// skills = replace ( skills , i , 0 ) ;
14263: LD_ADDR_VAR 0 8
14267: PUSH
14268: LD_VAR 0 8
14272: PPUSH
14273: LD_VAR 0 11
14277: PPUSH
14278: LD_INT 0
14280: PPUSH
14281: CALL_OW 1
14285: ST_TO_ADDR
// n = [ 0 , 1 , 0 , 1 , 0 , 2 , 0 , 0 , 1 , 0 ] [ rand ( 1 , 10 ) ] ;
14286: LD_ADDR_VAR 0 14
14290: PUSH
14291: LD_INT 0
14293: PUSH
14294: LD_INT 1
14296: PUSH
14297: LD_INT 0
14299: PUSH
14300: LD_INT 1
14302: PUSH
14303: LD_INT 0
14305: PUSH
14306: LD_INT 2
14308: PUSH
14309: LD_INT 0
14311: PUSH
14312: LD_INT 0
14314: PUSH
14315: LD_INT 1
14317: PUSH
14318: LD_INT 0
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 1
14335: PPUSH
14336: LD_INT 10
14338: PPUSH
14339: CALL_OW 12
14343: ARRAY
14344: ST_TO_ADDR
// if n > skills [ i ] then
14345: LD_VAR 0 14
14349: PUSH
14350: LD_VAR 0 8
14354: PUSH
14355: LD_VAR 0 11
14359: ARRAY
14360: GREATER
14361: IFFALSE 14379
// n = skills [ i ] ;
14363: LD_ADDR_VAR 0 14
14367: PUSH
14368: LD_VAR 0 8
14372: PUSH
14373: LD_VAR 0 11
14377: ARRAY
14378: ST_TO_ADDR
// replace ( base_skills , i , n ) ;
14379: LD_VAR 0 9
14383: PPUSH
14384: LD_VAR 0 11
14388: PPUSH
14389: LD_VAR 0 14
14393: PPUSH
14394: CALL_OW 1
// end ;
14398: GO 14244
14400: POP
14401: POP
// n = rand ( 1 , 100 ) ;
14402: LD_ADDR_VAR 0 14
14406: PUSH
14407: LD_INT 1
14409: PPUSH
14410: LD_INT 100
14412: PPUSH
14413: CALL_OW 12
14417: ST_TO_ADDR
// case n of 1 .. 32 :
14418: LD_VAR 0 14
14422: PUSH
14423: LD_INT 1
14425: DOUBLE
14426: GREATEREQUAL
14427: IFFALSE 14435
14429: LD_INT 32
14431: DOUBLE
14432: LESSEQUAL
14433: IFTRUE 14437
14435: GO 14448
14437: POP
// def = 10 ; 31 .. 54 :
14438: LD_ADDR_VAR 0 15
14442: PUSH
14443: LD_INT 10
14445: ST_TO_ADDR
14446: GO 14549
14448: LD_INT 31
14450: DOUBLE
14451: GREATEREQUAL
14452: IFFALSE 14460
14454: LD_INT 54
14456: DOUBLE
14457: LESSEQUAL
14458: IFTRUE 14462
14460: GO 14473
14462: POP
// def = 9 ; 55 .. 76 :
14463: LD_ADDR_VAR 0 15
14467: PUSH
14468: LD_INT 9
14470: ST_TO_ADDR
14471: GO 14549
14473: LD_INT 55
14475: DOUBLE
14476: GREATEREQUAL
14477: IFFALSE 14485
14479: LD_INT 76
14481: DOUBLE
14482: LESSEQUAL
14483: IFTRUE 14487
14485: GO 14498
14487: POP
// def = 11 ; 77 .. 88 :
14488: LD_ADDR_VAR 0 15
14492: PUSH
14493: LD_INT 11
14495: ST_TO_ADDR
14496: GO 14549
14498: LD_INT 77
14500: DOUBLE
14501: GREATEREQUAL
14502: IFFALSE 14510
14504: LD_INT 88
14506: DOUBLE
14507: LESSEQUAL
14508: IFTRUE 14512
14510: GO 14523
14512: POP
// def = 8 ; 89 .. 100 :
14513: LD_ADDR_VAR 0 15
14517: PUSH
14518: LD_INT 8
14520: ST_TO_ADDR
14521: GO 14549
14523: LD_INT 89
14525: DOUBLE
14526: GREATEREQUAL
14527: IFFALSE 14535
14529: LD_INT 100
14531: DOUBLE
14532: LESSEQUAL
14533: IFTRUE 14537
14535: GO 14548
14537: POP
// def = 12 ; end ;
14538: LD_ADDR_VAR 0 15
14542: PUSH
14543: LD_INT 12
14545: ST_TO_ADDR
14546: GO 14549
14548: POP
// n = rand ( 1 , 100 ) ;
14549: LD_ADDR_VAR 0 14
14553: PUSH
14554: LD_INT 1
14556: PPUSH
14557: LD_INT 100
14559: PPUSH
14560: CALL_OW 12
14564: ST_TO_ADDR
// case n of 1 .. 44 :
14565: LD_VAR 0 14
14569: PUSH
14570: LD_INT 1
14572: DOUBLE
14573: GREATEREQUAL
14574: IFFALSE 14582
14576: LD_INT 44
14578: DOUBLE
14579: LESSEQUAL
14580: IFTRUE 14584
14582: GO 14595
14584: POP
// speed = 10 ; 45 .. 76 :
14585: LD_ADDR_VAR 0 16
14589: PUSH
14590: LD_INT 10
14592: ST_TO_ADDR
14593: GO 14671
14595: LD_INT 45
14597: DOUBLE
14598: GREATEREQUAL
14599: IFFALSE 14607
14601: LD_INT 76
14603: DOUBLE
14604: LESSEQUAL
14605: IFTRUE 14609
14607: GO 14620
14609: POP
// speed = 9 ; 77 .. 94 :
14610: LD_ADDR_VAR 0 16
14614: PUSH
14615: LD_INT 9
14617: ST_TO_ADDR
14618: GO 14671
14620: LD_INT 77
14622: DOUBLE
14623: GREATEREQUAL
14624: IFFALSE 14632
14626: LD_INT 94
14628: DOUBLE
14629: LESSEQUAL
14630: IFTRUE 14634
14632: GO 14645
14634: POP
// speed = 11 ; 95 .. 100 :
14635: LD_ADDR_VAR 0 16
14639: PUSH
14640: LD_INT 11
14642: ST_TO_ADDR
14643: GO 14671
14645: LD_INT 95
14647: DOUBLE
14648: GREATEREQUAL
14649: IFFALSE 14657
14651: LD_INT 100
14653: DOUBLE
14654: LESSEQUAL
14655: IFTRUE 14659
14657: GO 14670
14659: POP
// speed = 12 ; end ;
14660: LD_ADDR_VAR 0 16
14664: PUSH
14665: LD_INT 12
14667: ST_TO_ADDR
14668: GO 14671
14670: POP
// hc_attr = [ def , speed ] ;
14671: LD_ADDR_OWVAR 29
14675: PUSH
14676: LD_VAR 0 15
14680: PUSH
14681: LD_VAR 0 16
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: ST_TO_ADDR
// hc_basic_skills = base_skills ;
14690: LD_ADDR_OWVAR 30
14694: PUSH
14695: LD_VAR 0 9
14699: ST_TO_ADDR
// hc_skills := skills ;
14700: LD_ADDR_OWVAR 31
14704: PUSH
14705: LD_VAR 0 8
14709: ST_TO_ADDR
// hc_class = cl ;
14710: LD_ADDR_OWVAR 28
14714: PUSH
14715: LD_VAR 0 3
14719: ST_TO_ADDR
// end ; end_of_file
14720: LD_VAR 0 2
14724: RET
// export function SetMpTechs ( ) ; var side , i ; begin
14725: LD_INT 0
14727: PPUSH
14728: PPUSH
14729: PPUSH
// for side = 1 to 8 do
14730: LD_ADDR_VAR 0 2
14734: PUSH
14735: DOUBLE
14736: LD_INT 1
14738: DEC
14739: ST_TO_ADDR
14740: LD_INT 8
14742: PUSH
14743: FOR_TO
14744: IFFALSE 14865
// begin for i = 1 to 72 do
14746: LD_ADDR_VAR 0 3
14750: PUSH
14751: DOUBLE
14752: LD_INT 1
14754: DEC
14755: ST_TO_ADDR
14756: LD_INT 72
14758: PUSH
14759: FOR_TO
14760: IFFALSE 14791
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
14762: LD_VAR 0 3
14766: PPUSH
14767: LD_VAR 0 2
14771: PPUSH
14772: LD_INT 0
14774: PPUSH
14775: LD_VAR 0 3
14779: PPUSH
14780: CALL_OW 565
14784: PPUSH
14785: CALL_OW 322
14789: GO 14759
14791: POP
14792: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
14793: LD_INT 73
14795: PPUSH
14796: LD_VAR 0 2
14800: PPUSH
14801: LD_INT 0
14803: PPUSH
14804: LD_INT 25
14806: PPUSH
14807: CALL_OW 565
14811: PPUSH
14812: CALL_OW 322
// for i = 0 to 40 do
14816: LD_ADDR_VAR 0 3
14820: PUSH
14821: DOUBLE
14822: LD_INT 0
14824: DEC
14825: ST_TO_ADDR
14826: LD_INT 40
14828: PUSH
14829: FOR_TO
14830: IFFALSE 14861
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
14832: LD_VAR 0 3
14836: PPUSH
14837: LD_VAR 0 2
14841: PPUSH
14842: LD_INT 1
14844: PPUSH
14845: LD_VAR 0 3
14849: PPUSH
14850: CALL_OW 565
14854: PPUSH
14855: CALL_OW 324
14859: GO 14829
14861: POP
14862: POP
// end ;
14863: GO 14743
14865: POP
14866: POP
// end ;
14867: LD_VAR 0 1
14871: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
14872: LD_INT 0
14874: PPUSH
14875: PPUSH
14876: PPUSH
// for side = 1 to 8 do
14877: LD_ADDR_VAR 0 3
14881: PUSH
14882: DOUBLE
14883: LD_INT 1
14885: DEC
14886: ST_TO_ADDR
14887: LD_INT 8
14889: PUSH
14890: FOR_TO
14891: IFFALSE 18887
// begin for i = 1 to 73 do
14893: LD_ADDR_VAR 0 4
14897: PUSH
14898: DOUBLE
14899: LD_INT 1
14901: DEC
14902: ST_TO_ADDR
14903: LD_INT 73
14905: PUSH
14906: FOR_TO
14907: IFFALSE 14928
// SetTech ( i , side , state_disabled ) ;
14909: LD_VAR 0 4
14913: PPUSH
14914: LD_VAR 0 3
14918: PPUSH
14919: LD_INT 0
14921: PPUSH
14922: CALL_OW 322
14926: GO 14906
14928: POP
14929: POP
// for i = 0 to 40 do
14930: LD_ADDR_VAR 0 4
14934: PUSH
14935: DOUBLE
14936: LD_INT 0
14938: DEC
14939: ST_TO_ADDR
14940: LD_INT 40
14942: PUSH
14943: FOR_TO
14944: IFFALSE 14965
// SetRestrict ( i , side , false ) ;
14946: LD_VAR 0 4
14950: PPUSH
14951: LD_VAR 0 3
14955: PPUSH
14956: LD_INT 0
14958: PPUSH
14959: CALL_OW 324
14963: GO 14943
14965: POP
14966: POP
// case level of 1 :
14967: LD_VAR 0 1
14971: PUSH
14972: LD_INT 1
14974: DOUBLE
14975: EQUAL
14976: IFTRUE 14980
14978: GO 15133
14980: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14981: LD_INT 35
14983: PPUSH
14984: LD_VAR 0 3
14988: PPUSH
14989: LD_INT 1
14991: PPUSH
14992: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14996: LD_INT 45
14998: PPUSH
14999: LD_VAR 0 3
15003: PPUSH
15004: LD_INT 1
15006: PPUSH
15007: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15011: LD_INT 46
15013: PPUSH
15014: LD_VAR 0 3
15018: PPUSH
15019: LD_INT 1
15021: PPUSH
15022: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15026: LD_INT 47
15028: PPUSH
15029: LD_VAR 0 3
15033: PPUSH
15034: LD_INT 1
15036: PPUSH
15037: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15041: LD_INT 0
15043: PPUSH
15044: LD_VAR 0 3
15048: PPUSH
15049: LD_INT 1
15051: PPUSH
15052: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15056: LD_INT 2
15058: PPUSH
15059: LD_VAR 0 3
15063: PPUSH
15064: LD_INT 1
15066: PPUSH
15067: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15071: LD_INT 4
15073: PPUSH
15074: LD_VAR 0 3
15078: PPUSH
15079: LD_INT 1
15081: PPUSH
15082: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15086: LD_INT 6
15088: PPUSH
15089: LD_VAR 0 3
15093: PPUSH
15094: LD_INT 1
15096: PPUSH
15097: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15101: LD_INT 29
15103: PPUSH
15104: LD_VAR 0 3
15108: PPUSH
15109: LD_INT 1
15111: PPUSH
15112: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15116: LD_INT 31
15118: PPUSH
15119: LD_VAR 0 3
15123: PPUSH
15124: LD_INT 1
15126: PPUSH
15127: CALL_OW 324
// end ; 2 :
15131: GO 18885
15133: LD_INT 2
15135: DOUBLE
15136: EQUAL
15137: IFTRUE 15141
15139: GO 15339
15141: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15142: LD_INT 35
15144: PPUSH
15145: LD_VAR 0 3
15149: PPUSH
15150: LD_INT 1
15152: PPUSH
15153: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15157: LD_INT 45
15159: PPUSH
15160: LD_VAR 0 3
15164: PPUSH
15165: LD_INT 1
15167: PPUSH
15168: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15172: LD_INT 46
15174: PPUSH
15175: LD_VAR 0 3
15179: PPUSH
15180: LD_INT 1
15182: PPUSH
15183: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15187: LD_INT 47
15189: PPUSH
15190: LD_VAR 0 3
15194: PPUSH
15195: LD_INT 1
15197: PPUSH
15198: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15202: LD_INT 1
15204: PPUSH
15205: LD_VAR 0 3
15209: PPUSH
15210: LD_INT 1
15212: PPUSH
15213: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15217: LD_INT 2
15219: PPUSH
15220: LD_VAR 0 3
15224: PPUSH
15225: LD_INT 1
15227: PPUSH
15228: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15232: LD_INT 11
15234: PPUSH
15235: LD_VAR 0 3
15239: PPUSH
15240: LD_INT 1
15242: PPUSH
15243: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15247: LD_INT 0
15249: PPUSH
15250: LD_VAR 0 3
15254: PPUSH
15255: LD_INT 1
15257: PPUSH
15258: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15262: LD_INT 2
15264: PPUSH
15265: LD_VAR 0 3
15269: PPUSH
15270: LD_INT 1
15272: PPUSH
15273: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15277: LD_INT 4
15279: PPUSH
15280: LD_VAR 0 3
15284: PPUSH
15285: LD_INT 1
15287: PPUSH
15288: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15292: LD_INT 6
15294: PPUSH
15295: LD_VAR 0 3
15299: PPUSH
15300: LD_INT 1
15302: PPUSH
15303: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15307: LD_INT 29
15309: PPUSH
15310: LD_VAR 0 3
15314: PPUSH
15315: LD_INT 1
15317: PPUSH
15318: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15322: LD_INT 31
15324: PPUSH
15325: LD_VAR 0 3
15329: PPUSH
15330: LD_INT 1
15332: PPUSH
15333: CALL_OW 324
// end ; 3 :
15337: GO 18885
15339: LD_INT 3
15341: DOUBLE
15342: EQUAL
15343: IFTRUE 15347
15345: GO 15800
15347: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15348: LD_INT 35
15350: PPUSH
15351: LD_VAR 0 3
15355: PPUSH
15356: LD_INT 1
15358: PPUSH
15359: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15363: LD_INT 45
15365: PPUSH
15366: LD_VAR 0 3
15370: PPUSH
15371: LD_INT 1
15373: PPUSH
15374: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15378: LD_INT 46
15380: PPUSH
15381: LD_VAR 0 3
15385: PPUSH
15386: LD_INT 1
15388: PPUSH
15389: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15393: LD_INT 47
15395: PPUSH
15396: LD_VAR 0 3
15400: PPUSH
15401: LD_INT 1
15403: PPUSH
15404: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15408: LD_INT 1
15410: PPUSH
15411: LD_VAR 0 3
15415: PPUSH
15416: LD_INT 1
15418: PPUSH
15419: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15423: LD_INT 2
15425: PPUSH
15426: LD_VAR 0 3
15430: PPUSH
15431: LD_INT 1
15433: PPUSH
15434: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15438: LD_INT 11
15440: PPUSH
15441: LD_VAR 0 3
15445: PPUSH
15446: LD_INT 1
15448: PPUSH
15449: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15453: LD_INT 48
15455: PPUSH
15456: LD_VAR 0 3
15460: PPUSH
15461: LD_INT 1
15463: PPUSH
15464: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15468: LD_INT 69
15470: PPUSH
15471: LD_VAR 0 3
15475: PPUSH
15476: LD_INT 1
15478: PPUSH
15479: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15483: LD_INT 39
15485: PPUSH
15486: LD_VAR 0 3
15490: PPUSH
15491: LD_INT 1
15493: PPUSH
15494: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15498: LD_INT 43
15500: PPUSH
15501: LD_VAR 0 3
15505: PPUSH
15506: LD_INT 1
15508: PPUSH
15509: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15513: LD_INT 51
15515: PPUSH
15516: LD_VAR 0 3
15520: PPUSH
15521: LD_INT 1
15523: PPUSH
15524: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15528: LD_INT 6
15530: PPUSH
15531: LD_VAR 0 3
15535: PPUSH
15536: LD_INT 1
15538: PPUSH
15539: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15543: LD_INT 0
15545: PPUSH
15546: LD_VAR 0 3
15550: PPUSH
15551: LD_INT 1
15553: PPUSH
15554: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15558: LD_INT 2
15560: PPUSH
15561: LD_VAR 0 3
15565: PPUSH
15566: LD_INT 1
15568: PPUSH
15569: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15573: LD_INT 3
15575: PPUSH
15576: LD_VAR 0 3
15580: PPUSH
15581: LD_INT 1
15583: PPUSH
15584: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15588: LD_INT 4
15590: PPUSH
15591: LD_VAR 0 3
15595: PPUSH
15596: LD_INT 1
15598: PPUSH
15599: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15603: LD_INT 6
15605: PPUSH
15606: LD_VAR 0 3
15610: PPUSH
15611: LD_INT 1
15613: PPUSH
15614: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15618: LD_INT 7
15620: PPUSH
15621: LD_VAR 0 3
15625: PPUSH
15626: LD_INT 1
15628: PPUSH
15629: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15633: LD_INT 8
15635: PPUSH
15636: LD_VAR 0 3
15640: PPUSH
15641: LD_INT 1
15643: PPUSH
15644: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15648: LD_INT 10
15650: PPUSH
15651: LD_VAR 0 3
15655: PPUSH
15656: LD_INT 1
15658: PPUSH
15659: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15663: LD_INT 15
15665: PPUSH
15666: LD_VAR 0 3
15670: PPUSH
15671: LD_INT 1
15673: PPUSH
15674: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15678: LD_INT 16
15680: PPUSH
15681: LD_VAR 0 3
15685: PPUSH
15686: LD_INT 1
15688: PPUSH
15689: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15693: LD_INT 17
15695: PPUSH
15696: LD_VAR 0 3
15700: PPUSH
15701: LD_INT 1
15703: PPUSH
15704: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15708: LD_INT 20
15710: PPUSH
15711: LD_VAR 0 3
15715: PPUSH
15716: LD_INT 1
15718: PPUSH
15719: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15723: LD_INT 26
15725: PPUSH
15726: LD_VAR 0 3
15730: PPUSH
15731: LD_INT 1
15733: PPUSH
15734: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15738: LD_INT 27
15740: PPUSH
15741: LD_VAR 0 3
15745: PPUSH
15746: LD_INT 1
15748: PPUSH
15749: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15753: LD_INT 29
15755: PPUSH
15756: LD_VAR 0 3
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15768: LD_INT 31
15770: PPUSH
15771: LD_VAR 0 3
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15783: LD_INT 32
15785: PPUSH
15786: LD_VAR 0 3
15790: PPUSH
15791: LD_INT 1
15793: PPUSH
15794: CALL_OW 324
// end ; 4 :
15798: GO 18885
15800: LD_INT 4
15802: DOUBLE
15803: EQUAL
15804: IFTRUE 15808
15806: GO 16756
15808: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15809: LD_INT 35
15811: PPUSH
15812: LD_VAR 0 3
15816: PPUSH
15817: LD_INT 1
15819: PPUSH
15820: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15824: LD_INT 45
15826: PPUSH
15827: LD_VAR 0 3
15831: PPUSH
15832: LD_INT 1
15834: PPUSH
15835: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15839: LD_INT 46
15841: PPUSH
15842: LD_VAR 0 3
15846: PPUSH
15847: LD_INT 1
15849: PPUSH
15850: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15854: LD_INT 47
15856: PPUSH
15857: LD_VAR 0 3
15861: PPUSH
15862: LD_INT 1
15864: PPUSH
15865: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15869: LD_INT 1
15871: PPUSH
15872: LD_VAR 0 3
15876: PPUSH
15877: LD_INT 1
15879: PPUSH
15880: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15884: LD_INT 2
15886: PPUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15899: LD_INT 11
15901: PPUSH
15902: LD_VAR 0 3
15906: PPUSH
15907: LD_INT 1
15909: PPUSH
15910: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15914: LD_INT 20
15916: PPUSH
15917: LD_VAR 0 3
15921: PPUSH
15922: LD_INT 1
15924: PPUSH
15925: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15929: LD_INT 48
15931: PPUSH
15932: LD_VAR 0 3
15936: PPUSH
15937: LD_INT 1
15939: PPUSH
15940: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15944: LD_INT 49
15946: PPUSH
15947: LD_VAR 0 3
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15959: LD_INT 69
15961: PPUSH
15962: LD_VAR 0 3
15966: PPUSH
15967: LD_INT 1
15969: PPUSH
15970: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15974: LD_INT 39
15976: PPUSH
15977: LD_VAR 0 3
15981: PPUSH
15982: LD_INT 1
15984: PPUSH
15985: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15989: LD_INT 34
15991: PPUSH
15992: LD_VAR 0 3
15996: PPUSH
15997: LD_INT 1
15999: PPUSH
16000: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16004: LD_INT 42
16006: PPUSH
16007: LD_VAR 0 3
16011: PPUSH
16012: LD_INT 1
16014: PPUSH
16015: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16019: LD_INT 44
16021: PPUSH
16022: LD_VAR 0 3
16026: PPUSH
16027: LD_INT 1
16029: PPUSH
16030: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16034: LD_INT 41
16036: PPUSH
16037: LD_VAR 0 3
16041: PPUSH
16042: LD_INT 1
16044: PPUSH
16045: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16049: LD_INT 43
16051: PPUSH
16052: LD_VAR 0 3
16056: PPUSH
16057: LD_INT 1
16059: PPUSH
16060: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16064: LD_INT 70
16066: PPUSH
16067: LD_VAR 0 3
16071: PPUSH
16072: LD_INT 1
16074: PPUSH
16075: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16079: LD_INT 51
16081: PPUSH
16082: LD_VAR 0 3
16086: PPUSH
16087: LD_INT 1
16089: PPUSH
16090: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16094: LD_INT 52
16096: PPUSH
16097: LD_VAR 0 3
16101: PPUSH
16102: LD_INT 1
16104: PPUSH
16105: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16109: LD_INT 6
16111: PPUSH
16112: LD_VAR 0 3
16116: PPUSH
16117: LD_INT 1
16119: PPUSH
16120: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16124: LD_INT 15
16126: PPUSH
16127: LD_VAR 0 3
16131: PPUSH
16132: LD_INT 1
16134: PPUSH
16135: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16139: LD_INT 7
16141: PPUSH
16142: LD_VAR 0 3
16146: PPUSH
16147: LD_INT 1
16149: PPUSH
16150: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16154: LD_INT 12
16156: PPUSH
16157: LD_VAR 0 3
16161: PPUSH
16162: LD_INT 1
16164: PPUSH
16165: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16169: LD_INT 18
16171: PPUSH
16172: LD_VAR 0 3
16176: PPUSH
16177: LD_INT 1
16179: PPUSH
16180: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16184: LD_INT 60
16186: PPUSH
16187: LD_VAR 0 3
16191: PPUSH
16192: LD_INT 1
16194: PPUSH
16195: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16199: LD_INT 9
16201: PPUSH
16202: LD_VAR 0 3
16206: PPUSH
16207: LD_INT 1
16209: PPUSH
16210: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16214: LD_INT 30
16216: PPUSH
16217: LD_VAR 0 3
16221: PPUSH
16222: LD_INT 1
16224: PPUSH
16225: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16229: LD_INT 37
16231: PPUSH
16232: LD_VAR 0 3
16236: PPUSH
16237: LD_INT 1
16239: PPUSH
16240: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16244: LD_INT 5
16246: PPUSH
16247: LD_VAR 0 3
16251: PPUSH
16252: LD_INT 1
16254: PPUSH
16255: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16259: LD_INT 66
16261: PPUSH
16262: LD_VAR 0 3
16266: PPUSH
16267: LD_INT 1
16269: PPUSH
16270: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16274: LD_INT 21
16276: PPUSH
16277: LD_VAR 0 3
16281: PPUSH
16282: LD_INT 1
16284: PPUSH
16285: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16289: LD_INT 22
16291: PPUSH
16292: LD_VAR 0 3
16296: PPUSH
16297: LD_INT 1
16299: PPUSH
16300: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16304: LD_INT 54
16306: PPUSH
16307: LD_VAR 0 3
16311: PPUSH
16312: LD_INT 1
16314: PPUSH
16315: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16319: LD_INT 0
16321: PPUSH
16322: LD_VAR 0 3
16326: PPUSH
16327: LD_INT 1
16329: PPUSH
16330: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16334: LD_INT 1
16336: PPUSH
16337: LD_VAR 0 3
16341: PPUSH
16342: LD_INT 1
16344: PPUSH
16345: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16349: LD_INT 2
16351: PPUSH
16352: LD_VAR 0 3
16356: PPUSH
16357: LD_INT 1
16359: PPUSH
16360: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16364: LD_INT 3
16366: PPUSH
16367: LD_VAR 0 3
16371: PPUSH
16372: LD_INT 1
16374: PPUSH
16375: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16379: LD_INT 4
16381: PPUSH
16382: LD_VAR 0 3
16386: PPUSH
16387: LD_INT 1
16389: PPUSH
16390: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16394: LD_INT 5
16396: PPUSH
16397: LD_VAR 0 3
16401: PPUSH
16402: LD_INT 1
16404: PPUSH
16405: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16409: LD_INT 6
16411: PPUSH
16412: LD_VAR 0 3
16416: PPUSH
16417: LD_INT 1
16419: PPUSH
16420: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16424: LD_INT 7
16426: PPUSH
16427: LD_VAR 0 3
16431: PPUSH
16432: LD_INT 1
16434: PPUSH
16435: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16439: LD_INT 8
16441: PPUSH
16442: LD_VAR 0 3
16446: PPUSH
16447: LD_INT 1
16449: PPUSH
16450: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16454: LD_INT 10
16456: PPUSH
16457: LD_VAR 0 3
16461: PPUSH
16462: LD_INT 1
16464: PPUSH
16465: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16469: LD_INT 11
16471: PPUSH
16472: LD_VAR 0 3
16476: PPUSH
16477: LD_INT 1
16479: PPUSH
16480: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16484: LD_INT 12
16486: PPUSH
16487: LD_VAR 0 3
16491: PPUSH
16492: LD_INT 1
16494: PPUSH
16495: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16499: LD_INT 13
16501: PPUSH
16502: LD_VAR 0 3
16506: PPUSH
16507: LD_INT 1
16509: PPUSH
16510: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16514: LD_INT 14
16516: PPUSH
16517: LD_VAR 0 3
16521: PPUSH
16522: LD_INT 1
16524: PPUSH
16525: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16529: LD_INT 15
16531: PPUSH
16532: LD_VAR 0 3
16536: PPUSH
16537: LD_INT 1
16539: PPUSH
16540: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16544: LD_INT 16
16546: PPUSH
16547: LD_VAR 0 3
16551: PPUSH
16552: LD_INT 1
16554: PPUSH
16555: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16559: LD_INT 17
16561: PPUSH
16562: LD_VAR 0 3
16566: PPUSH
16567: LD_INT 1
16569: PPUSH
16570: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16574: LD_INT 19
16576: PPUSH
16577: LD_VAR 0 3
16581: PPUSH
16582: LD_INT 1
16584: PPUSH
16585: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16589: LD_INT 20
16591: PPUSH
16592: LD_VAR 0 3
16596: PPUSH
16597: LD_INT 1
16599: PPUSH
16600: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16604: LD_INT 21
16606: PPUSH
16607: LD_VAR 0 3
16611: PPUSH
16612: LD_INT 1
16614: PPUSH
16615: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16619: LD_INT 23
16621: PPUSH
16622: LD_VAR 0 3
16626: PPUSH
16627: LD_INT 1
16629: PPUSH
16630: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16634: LD_INT 26
16636: PPUSH
16637: LD_VAR 0 3
16641: PPUSH
16642: LD_INT 1
16644: PPUSH
16645: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16649: LD_INT 27
16651: PPUSH
16652: LD_VAR 0 3
16656: PPUSH
16657: LD_INT 1
16659: PPUSH
16660: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16664: LD_INT 28
16666: PPUSH
16667: LD_VAR 0 3
16671: PPUSH
16672: LD_INT 1
16674: PPUSH
16675: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16679: LD_INT 29
16681: PPUSH
16682: LD_VAR 0 3
16686: PPUSH
16687: LD_INT 1
16689: PPUSH
16690: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16694: LD_INT 30
16696: PPUSH
16697: LD_VAR 0 3
16701: PPUSH
16702: LD_INT 1
16704: PPUSH
16705: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16709: LD_INT 31
16711: PPUSH
16712: LD_VAR 0 3
16716: PPUSH
16717: LD_INT 1
16719: PPUSH
16720: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16724: LD_INT 32
16726: PPUSH
16727: LD_VAR 0 3
16731: PPUSH
16732: LD_INT 1
16734: PPUSH
16735: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16739: LD_INT 36
16741: PPUSH
16742: LD_VAR 0 3
16746: PPUSH
16747: LD_INT 1
16749: PPUSH
16750: CALL_OW 324
// end ; 5 :
16754: GO 18885
16756: LD_INT 5
16758: DOUBLE
16759: EQUAL
16760: IFTRUE 16764
16762: GO 17877
16764: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16765: LD_INT 35
16767: PPUSH
16768: LD_VAR 0 3
16772: PPUSH
16773: LD_INT 1
16775: PPUSH
16776: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16780: LD_INT 45
16782: PPUSH
16783: LD_VAR 0 3
16787: PPUSH
16788: LD_INT 1
16790: PPUSH
16791: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16795: LD_INT 46
16797: PPUSH
16798: LD_VAR 0 3
16802: PPUSH
16803: LD_INT 1
16805: PPUSH
16806: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16810: LD_INT 47
16812: PPUSH
16813: LD_VAR 0 3
16817: PPUSH
16818: LD_INT 1
16820: PPUSH
16821: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16825: LD_INT 1
16827: PPUSH
16828: LD_VAR 0 3
16832: PPUSH
16833: LD_INT 1
16835: PPUSH
16836: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16840: LD_INT 2
16842: PPUSH
16843: LD_VAR 0 3
16847: PPUSH
16848: LD_INT 1
16850: PPUSH
16851: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16855: LD_INT 11
16857: PPUSH
16858: LD_VAR 0 3
16862: PPUSH
16863: LD_INT 1
16865: PPUSH
16866: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16870: LD_INT 20
16872: PPUSH
16873: LD_VAR 0 3
16877: PPUSH
16878: LD_INT 1
16880: PPUSH
16881: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16885: LD_INT 48
16887: PPUSH
16888: LD_VAR 0 3
16892: PPUSH
16893: LD_INT 1
16895: PPUSH
16896: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16900: LD_INT 49
16902: PPUSH
16903: LD_VAR 0 3
16907: PPUSH
16908: LD_INT 1
16910: PPUSH
16911: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16915: LD_INT 69
16917: PPUSH
16918: LD_VAR 0 3
16922: PPUSH
16923: LD_INT 1
16925: PPUSH
16926: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16930: LD_INT 39
16932: PPUSH
16933: LD_VAR 0 3
16937: PPUSH
16938: LD_INT 1
16940: PPUSH
16941: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16945: LD_INT 34
16947: PPUSH
16948: LD_VAR 0 3
16952: PPUSH
16953: LD_INT 1
16955: PPUSH
16956: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16960: LD_INT 42
16962: PPUSH
16963: LD_VAR 0 3
16967: PPUSH
16968: LD_INT 1
16970: PPUSH
16971: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16975: LD_INT 44
16977: PPUSH
16978: LD_VAR 0 3
16982: PPUSH
16983: LD_INT 1
16985: PPUSH
16986: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16990: LD_INT 41
16992: PPUSH
16993: LD_VAR 0 3
16997: PPUSH
16998: LD_INT 1
17000: PPUSH
17001: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17005: LD_INT 40
17007: PPUSH
17008: LD_VAR 0 3
17012: PPUSH
17013: LD_INT 1
17015: PPUSH
17016: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17020: LD_INT 43
17022: PPUSH
17023: LD_VAR 0 3
17027: PPUSH
17028: LD_INT 1
17030: PPUSH
17031: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17035: LD_INT 70
17037: PPUSH
17038: LD_VAR 0 3
17042: PPUSH
17043: LD_INT 1
17045: PPUSH
17046: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17050: LD_INT 51
17052: PPUSH
17053: LD_VAR 0 3
17057: PPUSH
17058: LD_INT 1
17060: PPUSH
17061: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17065: LD_INT 52
17067: PPUSH
17068: LD_VAR 0 3
17072: PPUSH
17073: LD_INT 1
17075: PPUSH
17076: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17080: LD_INT 6
17082: PPUSH
17083: LD_VAR 0 3
17087: PPUSH
17088: LD_INT 1
17090: PPUSH
17091: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17095: LD_INT 15
17097: PPUSH
17098: LD_VAR 0 3
17102: PPUSH
17103: LD_INT 1
17105: PPUSH
17106: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17110: LD_INT 7
17112: PPUSH
17113: LD_VAR 0 3
17117: PPUSH
17118: LD_INT 1
17120: PPUSH
17121: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17125: LD_INT 12
17127: PPUSH
17128: LD_VAR 0 3
17132: PPUSH
17133: LD_INT 1
17135: PPUSH
17136: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17140: LD_INT 17
17142: PPUSH
17143: LD_VAR 0 3
17147: PPUSH
17148: LD_INT 1
17150: PPUSH
17151: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17155: LD_INT 18
17157: PPUSH
17158: LD_VAR 0 3
17162: PPUSH
17163: LD_INT 1
17165: PPUSH
17166: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17170: LD_INT 60
17172: PPUSH
17173: LD_VAR 0 3
17177: PPUSH
17178: LD_INT 1
17180: PPUSH
17181: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17185: LD_INT 32
17187: PPUSH
17188: LD_VAR 0 3
17192: PPUSH
17193: LD_INT 1
17195: PPUSH
17196: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17200: LD_INT 9
17202: PPUSH
17203: LD_VAR 0 3
17207: PPUSH
17208: LD_INT 1
17210: PPUSH
17211: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17215: LD_INT 57
17217: PPUSH
17218: LD_VAR 0 3
17222: PPUSH
17223: LD_INT 1
17225: PPUSH
17226: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17230: LD_INT 30
17232: PPUSH
17233: LD_VAR 0 3
17237: PPUSH
17238: LD_INT 1
17240: PPUSH
17241: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17245: LD_INT 37
17247: PPUSH
17248: LD_VAR 0 3
17252: PPUSH
17253: LD_INT 1
17255: PPUSH
17256: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17260: LD_INT 63
17262: PPUSH
17263: LD_VAR 0 3
17267: PPUSH
17268: LD_INT 1
17270: PPUSH
17271: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17275: LD_INT 3
17277: PPUSH
17278: LD_VAR 0 3
17282: PPUSH
17283: LD_INT 1
17285: PPUSH
17286: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17290: LD_INT 4
17292: PPUSH
17293: LD_VAR 0 3
17297: PPUSH
17298: LD_INT 1
17300: PPUSH
17301: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17305: LD_INT 5
17307: PPUSH
17308: LD_VAR 0 3
17312: PPUSH
17313: LD_INT 1
17315: PPUSH
17316: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17320: LD_INT 66
17322: PPUSH
17323: LD_VAR 0 3
17327: PPUSH
17328: LD_INT 1
17330: PPUSH
17331: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17335: LD_INT 21
17337: PPUSH
17338: LD_VAR 0 3
17342: PPUSH
17343: LD_INT 1
17345: PPUSH
17346: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17350: LD_INT 22
17352: PPUSH
17353: LD_VAR 0 3
17357: PPUSH
17358: LD_INT 1
17360: PPUSH
17361: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17365: LD_INT 19
17367: PPUSH
17368: LD_VAR 0 3
17372: PPUSH
17373: LD_INT 1
17375: PPUSH
17376: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17380: LD_INT 54
17382: PPUSH
17383: LD_VAR 0 3
17387: PPUSH
17388: LD_INT 1
17390: PPUSH
17391: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17395: LD_INT 55
17397: PPUSH
17398: LD_VAR 0 3
17402: PPUSH
17403: LD_INT 1
17405: PPUSH
17406: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17410: LD_INT 0
17412: PPUSH
17413: LD_VAR 0 3
17417: PPUSH
17418: LD_INT 1
17420: PPUSH
17421: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17425: LD_INT 1
17427: PPUSH
17428: LD_VAR 0 3
17432: PPUSH
17433: LD_INT 1
17435: PPUSH
17436: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17440: LD_INT 2
17442: PPUSH
17443: LD_VAR 0 3
17447: PPUSH
17448: LD_INT 1
17450: PPUSH
17451: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17455: LD_INT 3
17457: PPUSH
17458: LD_VAR 0 3
17462: PPUSH
17463: LD_INT 1
17465: PPUSH
17466: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17470: LD_INT 4
17472: PPUSH
17473: LD_VAR 0 3
17477: PPUSH
17478: LD_INT 1
17480: PPUSH
17481: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17485: LD_INT 5
17487: PPUSH
17488: LD_VAR 0 3
17492: PPUSH
17493: LD_INT 1
17495: PPUSH
17496: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17500: LD_INT 6
17502: PPUSH
17503: LD_VAR 0 3
17507: PPUSH
17508: LD_INT 1
17510: PPUSH
17511: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17515: LD_INT 7
17517: PPUSH
17518: LD_VAR 0 3
17522: PPUSH
17523: LD_INT 1
17525: PPUSH
17526: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17530: LD_INT 8
17532: PPUSH
17533: LD_VAR 0 3
17537: PPUSH
17538: LD_INT 1
17540: PPUSH
17541: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17545: LD_INT 10
17547: PPUSH
17548: LD_VAR 0 3
17552: PPUSH
17553: LD_INT 1
17555: PPUSH
17556: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17560: LD_INT 11
17562: PPUSH
17563: LD_VAR 0 3
17567: PPUSH
17568: LD_INT 1
17570: PPUSH
17571: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17575: LD_INT 12
17577: PPUSH
17578: LD_VAR 0 3
17582: PPUSH
17583: LD_INT 1
17585: PPUSH
17586: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17590: LD_INT 13
17592: PPUSH
17593: LD_VAR 0 3
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17605: LD_INT 14
17607: PPUSH
17608: LD_VAR 0 3
17612: PPUSH
17613: LD_INT 1
17615: PPUSH
17616: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17620: LD_INT 15
17622: PPUSH
17623: LD_VAR 0 3
17627: PPUSH
17628: LD_INT 1
17630: PPUSH
17631: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17635: LD_INT 16
17637: PPUSH
17638: LD_VAR 0 3
17642: PPUSH
17643: LD_INT 1
17645: PPUSH
17646: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17650: LD_INT 17
17652: PPUSH
17653: LD_VAR 0 3
17657: PPUSH
17658: LD_INT 1
17660: PPUSH
17661: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
17665: LD_INT 18
17667: PPUSH
17668: LD_VAR 0 3
17672: PPUSH
17673: LD_INT 1
17675: PPUSH
17676: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17680: LD_INT 19
17682: PPUSH
17683: LD_VAR 0 3
17687: PPUSH
17688: LD_INT 1
17690: PPUSH
17691: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17695: LD_INT 20
17697: PPUSH
17698: LD_VAR 0 3
17702: PPUSH
17703: LD_INT 1
17705: PPUSH
17706: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17710: LD_INT 21
17712: PPUSH
17713: LD_VAR 0 3
17717: PPUSH
17718: LD_INT 1
17720: PPUSH
17721: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17725: LD_INT 23
17727: PPUSH
17728: LD_VAR 0 3
17732: PPUSH
17733: LD_INT 1
17735: PPUSH
17736: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17740: LD_INT 26
17742: PPUSH
17743: LD_VAR 0 3
17747: PPUSH
17748: LD_INT 1
17750: PPUSH
17751: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17755: LD_INT 27
17757: PPUSH
17758: LD_VAR 0 3
17762: PPUSH
17763: LD_INT 1
17765: PPUSH
17766: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17770: LD_INT 28
17772: PPUSH
17773: LD_VAR 0 3
17777: PPUSH
17778: LD_INT 1
17780: PPUSH
17781: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17785: LD_INT 29
17787: PPUSH
17788: LD_VAR 0 3
17792: PPUSH
17793: LD_INT 1
17795: PPUSH
17796: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17800: LD_INT 30
17802: PPUSH
17803: LD_VAR 0 3
17807: PPUSH
17808: LD_INT 1
17810: PPUSH
17811: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17815: LD_INT 31
17817: PPUSH
17818: LD_VAR 0 3
17822: PPUSH
17823: LD_INT 1
17825: PPUSH
17826: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17830: LD_INT 32
17832: PPUSH
17833: LD_VAR 0 3
17837: PPUSH
17838: LD_INT 1
17840: PPUSH
17841: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
17845: LD_INT 33
17847: PPUSH
17848: LD_VAR 0 3
17852: PPUSH
17853: LD_INT 1
17855: PPUSH
17856: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17860: LD_INT 36
17862: PPUSH
17863: LD_VAR 0 3
17867: PPUSH
17868: LD_INT 1
17870: PPUSH
17871: CALL_OW 324
// end ; 6 :
17875: GO 18885
17877: LD_INT 6
17879: DOUBLE
17880: EQUAL
17881: IFTRUE 17885
17883: GO 18810
17885: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17886: LD_INT 35
17888: PPUSH
17889: LD_VAR 0 3
17893: PPUSH
17894: LD_INT 1
17896: PPUSH
17897: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17901: LD_INT 45
17903: PPUSH
17904: LD_VAR 0 3
17908: PPUSH
17909: LD_INT 1
17911: PPUSH
17912: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17916: LD_INT 46
17918: PPUSH
17919: LD_VAR 0 3
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17931: LD_INT 47
17933: PPUSH
17934: LD_VAR 0 3
17938: PPUSH
17939: LD_INT 1
17941: PPUSH
17942: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17946: LD_INT 1
17948: PPUSH
17949: LD_VAR 0 3
17953: PPUSH
17954: LD_INT 1
17956: PPUSH
17957: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17961: LD_INT 2
17963: PPUSH
17964: LD_VAR 0 3
17968: PPUSH
17969: LD_INT 1
17971: PPUSH
17972: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17976: LD_INT 11
17978: PPUSH
17979: LD_VAR 0 3
17983: PPUSH
17984: LD_INT 1
17986: PPUSH
17987: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17991: LD_INT 20
17993: PPUSH
17994: LD_VAR 0 3
17998: PPUSH
17999: LD_INT 1
18001: PPUSH
18002: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18006: LD_INT 48
18008: PPUSH
18009: LD_VAR 0 3
18013: PPUSH
18014: LD_INT 1
18016: PPUSH
18017: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18021: LD_INT 49
18023: PPUSH
18024: LD_VAR 0 3
18028: PPUSH
18029: LD_INT 1
18031: PPUSH
18032: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18036: LD_INT 50
18038: PPUSH
18039: LD_VAR 0 3
18043: PPUSH
18044: LD_INT 1
18046: PPUSH
18047: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18051: LD_INT 69
18053: PPUSH
18054: LD_VAR 0 3
18058: PPUSH
18059: LD_INT 1
18061: PPUSH
18062: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18066: LD_INT 39
18068: PPUSH
18069: LD_VAR 0 3
18073: PPUSH
18074: LD_INT 1
18076: PPUSH
18077: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18081: LD_INT 34
18083: PPUSH
18084: LD_VAR 0 3
18088: PPUSH
18089: LD_INT 1
18091: PPUSH
18092: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18096: LD_INT 42
18098: PPUSH
18099: LD_VAR 0 3
18103: PPUSH
18104: LD_INT 1
18106: PPUSH
18107: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18111: LD_INT 44
18113: PPUSH
18114: LD_VAR 0 3
18118: PPUSH
18119: LD_INT 1
18121: PPUSH
18122: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18126: LD_INT 41
18128: PPUSH
18129: LD_VAR 0 3
18133: PPUSH
18134: LD_INT 1
18136: PPUSH
18137: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18141: LD_INT 13
18143: PPUSH
18144: LD_VAR 0 3
18148: PPUSH
18149: LD_INT 1
18151: PPUSH
18152: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18156: LD_INT 40
18158: PPUSH
18159: LD_VAR 0 3
18163: PPUSH
18164: LD_INT 1
18166: PPUSH
18167: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18171: LD_INT 43
18173: PPUSH
18174: LD_VAR 0 3
18178: PPUSH
18179: LD_INT 1
18181: PPUSH
18182: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18186: LD_INT 70
18188: PPUSH
18189: LD_VAR 0 3
18193: PPUSH
18194: LD_INT 1
18196: PPUSH
18197: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18201: LD_INT 23
18203: PPUSH
18204: LD_VAR 0 3
18208: PPUSH
18209: LD_INT 1
18211: PPUSH
18212: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18216: LD_INT 51
18218: PPUSH
18219: LD_VAR 0 3
18223: PPUSH
18224: LD_INT 1
18226: PPUSH
18227: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18231: LD_INT 52
18233: PPUSH
18234: LD_VAR 0 3
18238: PPUSH
18239: LD_INT 1
18241: PPUSH
18242: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18246: LD_INT 6
18248: PPUSH
18249: LD_VAR 0 3
18253: PPUSH
18254: LD_INT 1
18256: PPUSH
18257: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18261: LD_INT 15
18263: PPUSH
18264: LD_VAR 0 3
18268: PPUSH
18269: LD_INT 1
18271: PPUSH
18272: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18276: LD_INT 7
18278: PPUSH
18279: LD_VAR 0 3
18283: PPUSH
18284: LD_INT 1
18286: PPUSH
18287: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18291: LD_INT 12
18293: PPUSH
18294: LD_VAR 0 3
18298: PPUSH
18299: LD_INT 1
18301: PPUSH
18302: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
18306: LD_INT 10
18308: PPUSH
18309: LD_VAR 0 3
18313: PPUSH
18314: LD_INT 1
18316: PPUSH
18317: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
18321: LD_INT 17
18323: PPUSH
18324: LD_VAR 0 3
18328: PPUSH
18329: LD_INT 1
18331: PPUSH
18332: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18336: LD_INT 18
18338: PPUSH
18339: LD_VAR 0 3
18343: PPUSH
18344: LD_INT 1
18346: PPUSH
18347: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18351: LD_INT 60
18353: PPUSH
18354: LD_VAR 0 3
18358: PPUSH
18359: LD_INT 1
18361: PPUSH
18362: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
18366: LD_INT 61
18368: PPUSH
18369: LD_VAR 0 3
18373: PPUSH
18374: LD_INT 1
18376: PPUSH
18377: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18381: LD_INT 32
18383: PPUSH
18384: LD_VAR 0 3
18388: PPUSH
18389: LD_INT 1
18391: PPUSH
18392: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
18396: LD_INT 27
18398: PPUSH
18399: LD_VAR 0 3
18403: PPUSH
18404: LD_INT 1
18406: PPUSH
18407: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
18411: LD_INT 36
18413: PPUSH
18414: LD_VAR 0 3
18418: PPUSH
18419: LD_INT 1
18421: PPUSH
18422: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
18426: LD_INT 33
18428: PPUSH
18429: LD_VAR 0 3
18433: PPUSH
18434: LD_INT 1
18436: PPUSH
18437: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18441: LD_INT 9
18443: PPUSH
18444: LD_VAR 0 3
18448: PPUSH
18449: LD_INT 1
18451: PPUSH
18452: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
18456: LD_INT 38
18458: PPUSH
18459: LD_VAR 0 3
18463: PPUSH
18464: LD_INT 1
18466: PPUSH
18467: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18471: LD_INT 57
18473: PPUSH
18474: LD_VAR 0 3
18478: PPUSH
18479: LD_INT 1
18481: PPUSH
18482: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
18486: LD_INT 58
18488: PPUSH
18489: LD_VAR 0 3
18493: PPUSH
18494: LD_INT 1
18496: PPUSH
18497: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
18501: LD_INT 28
18503: PPUSH
18504: LD_VAR 0 3
18508: PPUSH
18509: LD_INT 1
18511: PPUSH
18512: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
18516: LD_INT 29
18518: PPUSH
18519: LD_VAR 0 3
18523: PPUSH
18524: LD_INT 1
18526: PPUSH
18527: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18531: LD_INT 30
18533: PPUSH
18534: LD_VAR 0 3
18538: PPUSH
18539: LD_INT 1
18541: PPUSH
18542: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18546: LD_INT 37
18548: PPUSH
18549: LD_VAR 0 3
18553: PPUSH
18554: LD_INT 1
18556: PPUSH
18557: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18561: LD_INT 63
18563: PPUSH
18564: LD_VAR 0 3
18568: PPUSH
18569: LD_INT 1
18571: PPUSH
18572: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
18576: LD_INT 64
18578: PPUSH
18579: LD_VAR 0 3
18583: PPUSH
18584: LD_INT 1
18586: PPUSH
18587: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18591: LD_INT 3
18593: PPUSH
18594: LD_VAR 0 3
18598: PPUSH
18599: LD_INT 1
18601: PPUSH
18602: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18606: LD_INT 4
18608: PPUSH
18609: LD_VAR 0 3
18613: PPUSH
18614: LD_INT 1
18616: PPUSH
18617: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18621: LD_INT 5
18623: PPUSH
18624: LD_VAR 0 3
18628: PPUSH
18629: LD_INT 1
18631: PPUSH
18632: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
18636: LD_INT 8
18638: PPUSH
18639: LD_VAR 0 3
18643: PPUSH
18644: LD_INT 1
18646: PPUSH
18647: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18651: LD_INT 66
18653: PPUSH
18654: LD_VAR 0 3
18658: PPUSH
18659: LD_INT 1
18661: PPUSH
18662: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
18666: LD_INT 67
18668: PPUSH
18669: LD_VAR 0 3
18673: PPUSH
18674: LD_INT 1
18676: PPUSH
18677: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18681: LD_INT 21
18683: PPUSH
18684: LD_VAR 0 3
18688: PPUSH
18689: LD_INT 1
18691: PPUSH
18692: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18696: LD_INT 22
18698: PPUSH
18699: LD_VAR 0 3
18703: PPUSH
18704: LD_INT 1
18706: PPUSH
18707: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18711: LD_INT 19
18713: PPUSH
18714: LD_VAR 0 3
18718: PPUSH
18719: LD_INT 1
18721: PPUSH
18722: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
18726: LD_INT 26
18728: PPUSH
18729: LD_VAR 0 3
18733: PPUSH
18734: LD_INT 1
18736: PPUSH
18737: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18741: LD_INT 54
18743: PPUSH
18744: LD_VAR 0 3
18748: PPUSH
18749: LD_INT 1
18751: PPUSH
18752: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18756: LD_INT 55
18758: PPUSH
18759: LD_VAR 0 3
18763: PPUSH
18764: LD_INT 1
18766: PPUSH
18767: CALL_OW 322
// for i = 0 to 39 do
18771: LD_ADDR_VAR 0 4
18775: PUSH
18776: DOUBLE
18777: LD_INT 0
18779: DEC
18780: ST_TO_ADDR
18781: LD_INT 39
18783: PUSH
18784: FOR_TO
18785: IFFALSE 18806
// SetRestrict ( i , side , true ) ;
18787: LD_VAR 0 4
18791: PPUSH
18792: LD_VAR 0 3
18796: PPUSH
18797: LD_INT 1
18799: PPUSH
18800: CALL_OW 324
18804: GO 18784
18806: POP
18807: POP
// end ; else
18808: GO 18885
18810: POP
// begin for i = 1 to 73 do
18811: LD_ADDR_VAR 0 4
18815: PUSH
18816: DOUBLE
18817: LD_INT 1
18819: DEC
18820: ST_TO_ADDR
18821: LD_INT 73
18823: PUSH
18824: FOR_TO
18825: IFFALSE 18846
// SetTech ( i , side , state_enabled ) ;
18827: LD_VAR 0 4
18831: PPUSH
18832: LD_VAR 0 3
18836: PPUSH
18837: LD_INT 1
18839: PPUSH
18840: CALL_OW 322
18844: GO 18824
18846: POP
18847: POP
// for i = 0 to 39 do
18848: LD_ADDR_VAR 0 4
18852: PUSH
18853: DOUBLE
18854: LD_INT 0
18856: DEC
18857: ST_TO_ADDR
18858: LD_INT 39
18860: PUSH
18861: FOR_TO
18862: IFFALSE 18883
// SetRestrict ( i , side , true ) ;
18864: LD_VAR 0 4
18868: PPUSH
18869: LD_VAR 0 3
18873: PPUSH
18874: LD_INT 1
18876: PPUSH
18877: CALL_OW 324
18881: GO 18861
18883: POP
18884: POP
// end ; end ; end ;
18885: GO 14890
18887: POP
18888: POP
// end ;
18889: LD_VAR 0 2
18893: RET
