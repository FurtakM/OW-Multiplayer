// export game_type , def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_shared_vision , def_morale_flags , def_siberite_detection , def_siberite_bomb , def_people_respawning , def_builduptime ; export is_depot , number_of_breastworks , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , sci1_skills , sci2_skills , respawning_time_min , respawning_time_max , siberite_bomb_Delay ; export playing_sides , playing_teams , sci1 , sci2 ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Positions , Team_Game ; export depot_def , breastworks_def , start_def , teleport_def ; export commander , battle_flags_id ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if MultiPlayer then
  11: LD_OWVAR 4
  15: IFFALSE 89
// begin game_type = mp_game_type ;
  17: LD_ADDR_EXP 1
  21: PUSH
  22: LD_OWVAR 6
  26: ST_TO_ADDR
// Player_Side = mp_player_side ;
  27: LD_ADDR_EXP 32
  31: PUSH
  32: LD_OWVAR 7
  36: ST_TO_ADDR
// Player_Team = mp_player_team ;
  37: LD_ADDR_EXP 33
  41: PUSH
  42: LD_OWVAR 8
  46: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  47: LD_ADDR_EXP 37
  51: PUSH
  52: LD_OWVAR 17
  56: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  57: LD_ADDR_EXP 34
  61: PUSH
  62: LD_OWVAR 15
  66: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  67: LD_ADDR_EXP 38
  71: PUSH
  72: LD_OWVAR 16
  76: ST_TO_ADDR
// Teams = mp_teams ;
  77: LD_ADDR_EXP 35
  81: PUSH
  82: LD_OWVAR 12
  86: ST_TO_ADDR
// end else
  87: GO 298
// begin game_type = 66 ;
  89: LD_ADDR_EXP 1
  93: PUSH
  94: LD_INT 66
  96: ST_TO_ADDR
// Player_Side = 4 ;
  97: LD_ADDR_EXP 32
 101: PUSH
 102: LD_INT 4
 104: ST_TO_ADDR
// Player_Team = 2 ;
 105: LD_ADDR_EXP 33
 109: PUSH
 110: LD_INT 2
 112: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 113: LD_ADDR_EXP 37
 117: PUSH
 118: LD_INT 0
 120: PUSH
 121: LD_INT 3
 123: PUSH
 124: LD_INT 0
 126: PUSH
 127: LD_INT 1
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 2
 135: PUSH
 136: LD_INT 4
 138: PUSH
 139: LD_INT 0
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 152: LD_ADDR_EXP 34
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: LD_INT 1
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 2
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 191: LD_ADDR_EXP 38
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: LD_INT 3
 201: PUSH
 202: LD_INT 0
 204: PUSH
 205: LD_INT 2
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 3
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 230: LD_ADDR_EXP 36
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: LD_INT 0
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: LD_INT 0
 246: PUSH
 247: LD_INT 0
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: LIST
 263: LIST
 264: LIST
 265: LIST
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
 269: LD_ADDR_EXP 35
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: LD_INT 6
 279: PUSH
 280: EMPTY
 281: LIST
 282: LIST
 283: PUSH
 284: LD_INT 4
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 298: LD_ADDR_EXP 30
 302: PUSH
 303: LD_EXP 37
 307: PUSH
 308: LD_INT 0
 310: PUSH
 311: EMPTY
 312: LIST
 313: DIFF
 314: PUSH
 315: LD_INT 0
 317: PLUS
 318: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 319: LD_ADDR_EXP 31
 323: PUSH
 324: LD_EXP 34
 328: PUSH
 329: LD_INT 0
 331: PUSH
 332: EMPTY
 333: LIST
 334: DIFF
 335: PUSH
 336: LD_INT 0
 338: PLUS
 339: ST_TO_ADDR
// if MultiPlayer then
 340: LD_OWVAR 4
 344: IFFALSE 504
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 346: LD_ADDR_EXP 2
 350: PUSH
 351: LD_INT 0
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 359: LD_ADDR_EXP 3
 363: PUSH
 364: LD_INT 1
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 372: LD_ADDR_EXP 4
 376: PUSH
 377: LD_INT 2
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 385: LD_ADDR_EXP 5
 389: PUSH
 390: LD_INT 3
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 398: LD_ADDR_EXP 6
 402: PUSH
 403: LD_INT 4
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 411: LD_ADDR_EXP 7
 415: PUSH
 416: LD_INT 10
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 424: LD_ADDR_EXP 8
 428: PUSH
 429: LD_INT 11
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 437: LD_ADDR_EXP 9
 441: PUSH
 442: LD_INT 12
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 13 ) ;
 450: LD_ADDR_EXP 10
 454: PUSH
 455: LD_INT 13
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 463: LD_ADDR_EXP 11
 467: PUSH
 468: LD_INT 14
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 476: LD_ADDR_EXP 12
 480: PUSH
 481: LD_INT 20
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 489: LD_ADDR_VAR 0 9
 493: PUSH
 494: LD_INT 22
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// end else
 502: GO 604
// begin randomize ;
 504: CALL_OW 10
// def_base_level = 3 ;
 508: LD_ADDR_EXP 2
 512: PUSH
 513: LD_INT 3
 515: ST_TO_ADDR
// def_amount_of_people = 1 ;
 516: LD_ADDR_EXP 3
 520: PUSH
 521: LD_INT 1
 523: ST_TO_ADDR
// def_initial_level = 1 ;
 524: LD_ADDR_EXP 4
 528: PUSH
 529: LD_INT 1
 531: ST_TO_ADDR
// def_starting_resources = 2 ;
 532: LD_ADDR_EXP 5
 536: PUSH
 537: LD_INT 2
 539: ST_TO_ADDR
// def_shipments_density = 1 ;
 540: LD_ADDR_EXP 6
 544: PUSH
 545: LD_INT 1
 547: ST_TO_ADDR
// def_shared_vision = 1 ;
 548: LD_ADDR_EXP 7
 552: PUSH
 553: LD_INT 1
 555: ST_TO_ADDR
// def_morale_flags = 3 ;
 556: LD_ADDR_EXP 8
 560: PUSH
 561: LD_INT 3
 563: ST_TO_ADDR
// def_siberite_detection = 0 ;
 564: LD_ADDR_EXP 9
 568: PUSH
 569: LD_INT 0
 571: ST_TO_ADDR
// def_siberite_bomb = 2 ;
 572: LD_ADDR_EXP 10
 576: PUSH
 577: LD_INT 2
 579: ST_TO_ADDR
// def_people_respawning = 2 ;
 580: LD_ADDR_EXP 11
 584: PUSH
 585: LD_INT 2
 587: ST_TO_ADDR
// def_builduptime := 1 ;
 588: LD_ADDR_EXP 12
 592: PUSH
 593: LD_INT 1
 595: ST_TO_ADDR
// tech_level = 6 ;
 596: LD_ADDR_VAR 0 9
 600: PUSH
 601: LD_INT 6
 603: ST_TO_ADDR
// end ; if isSGUI then
 604: LD_OWVAR 83
 608: IFFALSE 616
// setMpTechs ( ) else
 610: CALL 11953 0 0
 614: GO 629
// begin SetMpTechLevel ( tech_level + 1 ) ;
 616: LD_VAR 0 9
 620: PUSH
 621: LD_INT 1
 623: PLUS
 624: PPUSH
 625: CALL 12100 0 1
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 629: LD_ADDR_EXP 13
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: LD_INT 1
 642: PUSH
 643: LD_INT 1
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: PUSH
 652: LD_EXP 2
 656: PUSH
 657: LD_INT 1
 659: PLUS
 660: ARRAY
 661: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 662: LD_ADDR_EXP 14
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 4
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: LD_EXP 2
 689: PUSH
 690: LD_INT 1
 692: PLUS
 693: ARRAY
 694: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 695: LD_ADDR_EXP 15
 699: PUSH
 700: LD_INT 9
 702: PUSH
 703: LD_INT 12
 705: PUSH
 706: LD_INT 15
 708: PUSH
 709: LD_INT 24
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: PUSH
 718: LD_EXP 3
 722: PUSH
 723: LD_INT 1
 725: PLUS
 726: ARRAY
 727: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
 728: LD_ADDR_EXP 16
 732: PUSH
 733: LD_INT 2
 735: PUSH
 736: LD_INT 3
 738: PUSH
 739: LD_INT 4
 741: PUSH
 742: LD_INT 5
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: PUSH
 751: LD_EXP 4
 755: PUSH
 756: LD_INT 1
 758: PLUS
 759: ARRAY
 760: ST_TO_ADDR
// sci1_skills = [ [ 0 , 2 , 1 , 4 ] , [ 1 , 3 , 1 , 5 ] , [ 1 , 4 , 2 , 6 ] , [ 2 , 5 , 2 , 7 ] ] [ def_initial_level + 1 ] ;
 761: LD_ADDR_EXP 21
 765: PUSH
 766: LD_INT 0
 768: PUSH
 769: LD_INT 2
 771: PUSH
 772: LD_INT 1
 774: PUSH
 775: LD_INT 4
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 1
 786: PUSH
 787: LD_INT 3
 789: PUSH
 790: LD_INT 1
 792: PUSH
 793: LD_INT 5
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 4
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 6
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 2
 822: PUSH
 823: LD_INT 5
 825: PUSH
 826: LD_INT 2
 828: PUSH
 829: LD_INT 7
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: PUSH
 844: LD_EXP 4
 848: PUSH
 849: LD_INT 1
 851: PLUS
 852: ARRAY
 853: ST_TO_ADDR
// sci2_skills = [ [ 2 , 1 , 1 , 3 ] , [ 2 , 2 , 1 , 4 ] , [ 3 , 3 , 2 , 5 ] , [ 3 , 4 , 3 , 6 ] ] [ def_initial_level + 1 ] ;
 854: LD_ADDR_EXP 22
 858: PUSH
 859: LD_INT 2
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 1
 867: PUSH
 868: LD_INT 3
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: LD_INT 2
 879: PUSH
 880: LD_INT 2
 882: PUSH
 883: LD_INT 1
 885: PUSH
 886: LD_INT 4
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 3
 897: PUSH
 898: LD_INT 3
 900: PUSH
 901: LD_INT 2
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 3
 915: PUSH
 916: LD_INT 4
 918: PUSH
 919: LD_INT 3
 921: PUSH
 922: LD_INT 6
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: LIST
 936: PUSH
 937: LD_EXP 4
 941: PUSH
 942: LD_INT 1
 944: PLUS
 945: ARRAY
 946: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 947: LD_ADDR_EXP 18
 951: PUSH
 952: LD_INT 0
 954: PUSH
 955: LD_INT 0
 957: PUSH
 958: LD_INT 0
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 30
 968: PUSH
 969: LD_INT 0
 971: PUSH
 972: LD_INT 0
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 50
 982: PUSH
 983: LD_INT 20
 985: PUSH
 986: LD_INT 0
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 80
 996: PUSH
 997: LD_INT 40
 999: PUSH
1000: LD_INT 20
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_EXP 5
1018: PUSH
1019: LD_INT 1
1021: PLUS
1022: ARRAY
1023: ST_TO_ADDR
// starting_crates = [ [ 8 ] , [ 5 , 10 ] , [ 4 , 8 , 12 ] , [ 3 , 6 , 9 , 12 ] ] [ def_starting_resources + 1 ] ;
1024: LD_ADDR_EXP 17
1028: PUSH
1029: LD_INT 8
1031: PUSH
1032: EMPTY
1033: LIST
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 10
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 8
1050: PUSH
1051: LD_INT 12
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 3
1061: PUSH
1062: LD_INT 6
1064: PUSH
1065: LD_INT 9
1067: PUSH
1068: LD_INT 12
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: LD_EXP 5
1087: PUSH
1088: LD_INT 1
1090: PLUS
1091: ARRAY
1092: ST_TO_ADDR
// shipments_density = [ 20 , 30 , 40 ] [ def_shipments_density + 1 ] ;
1093: LD_ADDR_EXP 19
1097: PUSH
1098: LD_INT 20
1100: PUSH
1101: LD_INT 30
1103: PUSH
1104: LD_INT 40
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: LD_EXP 6
1116: PUSH
1117: LD_INT 1
1119: PLUS
1120: ARRAY
1121: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1122: LD_ADDR_EXP 23
1126: PUSH
1127: LD_INT 0
1129: PUSH
1130: LD_INT 8400
1132: PUSH
1133: LD_INT 1750
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_EXP 11
1145: PUSH
1146: LD_INT 1
1148: PLUS
1149: ARRAY
1150: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1151: LD_ADDR_EXP 24
1155: PUSH
1156: LD_INT 0
1158: PUSH
1159: LD_INT 21000
1161: PUSH
1162: LD_INT 4200
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: LD_EXP 11
1174: PUSH
1175: LD_INT 1
1177: PLUS
1178: ARRAY
1179: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1180: LD_ADDR_EXP 20
1184: PUSH
1185: LD_INT 1
1187: NEG
1188: PUSH
1189: LD_INT 350
1191: PUSH
1192: LD_INT 700
1194: PUSH
1195: LD_INT 1400
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_EXP 8
1212: PUSH
1213: LD_INT 1
1215: PLUS
1216: ARRAY
1217: ST_TO_ADDR
// battle_flags_id = [ ] ;
1218: LD_ADDR_EXP 48
1222: PUSH
1223: EMPTY
1224: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1225: LD_EXP 10
1229: PUSH
1230: LD_INT 0
1232: EQUAL
1233: IFFALSE 1245
// siberite_bomb_Delay = 0 else
1235: LD_ADDR_EXP 25
1239: PUSH
1240: LD_INT 0
1242: ST_TO_ADDR
1243: GO 1267
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1245: LD_ADDR_EXP 25
1249: PUSH
1250: LD_EXP 10
1254: PUSH
1255: LD_INT 1
1257: MINUS
1258: PUSH
1259: LD_INT 21000
1261: MUL
1262: PUSH
1263: LD_INT 1
1265: PLUS
1266: ST_TO_ADDR
// sci1 := [ ] ;
1267: LD_ADDR_EXP 28
1271: PUSH
1272: EMPTY
1273: ST_TO_ADDR
// sci2 := [ ] ;
1274: LD_ADDR_EXP 29
1278: PUSH
1279: EMPTY
1280: ST_TO_ADDR
// end ;
1281: LD_VAR 0 1
1285: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , br4 , un , i ; begin
1286: LD_INT 0
1288: PPUSH
1289: PPUSH
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
1294: PPUSH
1295: PPUSH
1296: PPUSH
// depot_def = [ ] ;
1297: LD_ADDR_EXP 43
1301: PUSH
1302: EMPTY
1303: ST_TO_ADDR
// breastworks_def = [ ] ;
1304: LD_ADDR_EXP 44
1308: PUSH
1309: EMPTY
1310: ST_TO_ADDR
// for side := 1 to 4 do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_INT 4
1323: PUSH
1324: FOR_TO
1325: IFFALSE 1751
// begin dep := side * 5 - 4 ;
1327: LD_ADDR_VAR 0 3
1331: PUSH
1332: LD_VAR 0 2
1336: PUSH
1337: LD_INT 5
1339: MUL
1340: PUSH
1341: LD_INT 4
1343: MINUS
1344: ST_TO_ADDR
// br1 := side * 5 - 3 ;
1345: LD_ADDR_VAR 0 4
1349: PUSH
1350: LD_VAR 0 2
1354: PUSH
1355: LD_INT 5
1357: MUL
1358: PUSH
1359: LD_INT 3
1361: MINUS
1362: ST_TO_ADDR
// br2 := side * 5 - 2 ;
1363: LD_ADDR_VAR 0 5
1367: PUSH
1368: LD_VAR 0 2
1372: PUSH
1373: LD_INT 5
1375: MUL
1376: PUSH
1377: LD_INT 2
1379: MINUS
1380: ST_TO_ADDR
// br3 := side * 5 - 1 ;
1381: LD_ADDR_VAR 0 6
1385: PUSH
1386: LD_VAR 0 2
1390: PUSH
1391: LD_INT 5
1393: MUL
1394: PUSH
1395: LD_INT 1
1397: MINUS
1398: ST_TO_ADDR
// br4 := side * 5 ;
1399: LD_ADDR_VAR 0 7
1403: PUSH
1404: LD_VAR 0 2
1408: PUSH
1409: LD_INT 5
1411: MUL
1412: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1413: LD_ADDR_EXP 43
1417: PUSH
1418: LD_EXP 43
1422: PUSH
1423: LD_VAR 0 3
1427: PPUSH
1428: CALL_OW 250
1432: PUSH
1433: LD_VAR 0 3
1437: PPUSH
1438: CALL_OW 251
1442: PUSH
1443: LD_VAR 0 3
1447: PPUSH
1448: CALL_OW 254
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: PUSH
1458: EMPTY
1459: LIST
1460: ADD
1461: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) ] ] ;
1462: LD_ADDR_EXP 45
1466: PUSH
1467: LD_EXP 45
1471: PUSH
1472: LD_VAR 0 3
1476: PPUSH
1477: CALL_OW 250
1481: PPUSH
1482: LD_VAR 0 3
1486: PPUSH
1487: CALL_OW 254
1491: PUSH
1492: LD_INT 6
1494: MOD
1495: PPUSH
1496: LD_INT 6
1498: PPUSH
1499: CALL_OW 272
1503: PUSH
1504: LD_VAR 0 3
1508: PPUSH
1509: CALL_OW 251
1513: PPUSH
1514: LD_VAR 0 3
1518: PPUSH
1519: CALL_OW 254
1523: PUSH
1524: LD_INT 6
1526: MOD
1527: PPUSH
1528: LD_INT 6
1530: PPUSH
1531: CALL_OW 273
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: EMPTY
1541: LIST
1542: ADD
1543: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] , [ GetX ( br4 ) , GetY ( br4 ) , GetDir ( br4 ) ] ] ] ;
1544: LD_ADDR_EXP 44
1548: PUSH
1549: LD_EXP 44
1553: PUSH
1554: LD_VAR 0 4
1558: PPUSH
1559: CALL_OW 250
1563: PUSH
1564: LD_VAR 0 4
1568: PPUSH
1569: CALL_OW 251
1573: PUSH
1574: LD_VAR 0 4
1578: PPUSH
1579: CALL_OW 254
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_VAR 0 5
1593: PPUSH
1594: CALL_OW 250
1598: PUSH
1599: LD_VAR 0 5
1603: PPUSH
1604: CALL_OW 251
1608: PUSH
1609: LD_VAR 0 5
1613: PPUSH
1614: CALL_OW 254
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: PUSH
1624: LD_VAR 0 6
1628: PPUSH
1629: CALL_OW 250
1633: PUSH
1634: LD_VAR 0 6
1638: PPUSH
1639: CALL_OW 251
1643: PUSH
1644: LD_VAR 0 6
1648: PPUSH
1649: CALL_OW 254
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_VAR 0 7
1663: PPUSH
1664: CALL_OW 250
1668: PUSH
1669: LD_VAR 0 7
1673: PPUSH
1674: CALL_OW 251
1678: PUSH
1679: LD_VAR 0 7
1683: PPUSH
1684: CALL_OW 254
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: LIST
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: EMPTY
1701: LIST
1702: ADD
1703: ST_TO_ADDR
// DestroyUnit ( dep ) ;
1704: LD_VAR 0 3
1708: PPUSH
1709: CALL_OW 65
// DestroyUnit ( br1 ) ;
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL_OW 65
// DestroyUnit ( br2 ) ;
1722: LD_VAR 0 5
1726: PPUSH
1727: CALL_OW 65
// DestroyUnit ( br3 ) ;
1731: LD_VAR 0 6
1735: PPUSH
1736: CALL_OW 65
// DestroyUnit ( br4 ) ;
1740: LD_VAR 0 7
1744: PPUSH
1745: CALL_OW 65
// end ;
1749: GO 1324
1751: POP
1752: POP
// teleport_def = [ [ 19 , 16 , 0 ] , [ 108 , 9 , 1 ] , [ 62 , 112 , 2 ] , [ 157 , 126 , 1 ] ] ;
1753: LD_ADDR_EXP 46
1757: PUSH
1758: LD_INT 19
1760: PUSH
1761: LD_INT 16
1763: PUSH
1764: LD_INT 0
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_INT 108
1774: PUSH
1775: LD_INT 9
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 62
1788: PUSH
1789: LD_INT 112
1791: PUSH
1792: LD_INT 2
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 157
1802: PUSH
1803: LD_INT 126
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: ST_TO_ADDR
// end ;
1820: LD_VAR 0 1
1824: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1825: LD_INT 0
1827: PPUSH
1828: PPUSH
1829: PPUSH
// Team_Game := 0 ;
1830: LD_ADDR_EXP 42
1834: PUSH
1835: LD_INT 0
1837: ST_TO_ADDR
// for i = 1 to 8 do
1838: LD_ADDR_VAR 0 2
1842: PUSH
1843: DOUBLE
1844: LD_INT 1
1846: DEC
1847: ST_TO_ADDR
1848: LD_INT 8
1850: PUSH
1851: FOR_TO
1852: IFFALSE 1878
// Team_Game := Team_Game + Side_Teams [ i ] ;
1854: LD_ADDR_EXP 42
1858: PUSH
1859: LD_EXP 42
1863: PUSH
1864: LD_EXP 34
1868: PUSH
1869: LD_VAR 0 2
1873: ARRAY
1874: PLUS
1875: ST_TO_ADDR
1876: GO 1851
1878: POP
1879: POP
// if not Team_Game then
1880: LD_EXP 42
1884: NOT
1885: IFFALSE 1897
// Team_Game := false else
1887: LD_ADDR_EXP 42
1891: PUSH
1892: LD_INT 0
1894: ST_TO_ADDR
1895: GO 1905
// Team_Game := true ;
1897: LD_ADDR_EXP 42
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// if not Team_Game then
1905: LD_EXP 42
1909: NOT
1910: IFFALSE 2008
// begin for i = 1 to 8 do
1912: LD_ADDR_VAR 0 2
1916: PUSH
1917: DOUBLE
1918: LD_INT 1
1920: DEC
1921: ST_TO_ADDR
1922: LD_INT 8
1924: PUSH
1925: FOR_TO
1926: IFFALSE 2004
// for j = 1 to 8 do
1928: LD_ADDR_VAR 0 3
1932: PUSH
1933: DOUBLE
1934: LD_INT 1
1936: DEC
1937: ST_TO_ADDR
1938: LD_INT 8
1940: PUSH
1941: FOR_TO
1942: IFFALSE 2000
// if i <> j then
1944: LD_VAR 0 2
1948: PUSH
1949: LD_VAR 0 3
1953: NONEQUAL
1954: IFFALSE 1978
// SetAttitude ( i , j , att_neutral , true ) else
1956: LD_VAR 0 2
1960: PPUSH
1961: LD_VAR 0 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: LD_INT 1
1971: PPUSH
1972: CALL_OW 80
1976: GO 1998
// SetAttitude ( i , j , att_friend , true ) ;
1978: LD_VAR 0 2
1982: PPUSH
1983: LD_VAR 0 3
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: CALL_OW 80
1998: GO 1941
2000: POP
2001: POP
2002: GO 1925
2004: POP
2005: POP
// end else
2006: GO 2183
// begin if def_shared_vision then
2008: LD_EXP 7
2012: IFFALSE 2077
// begin for i in Teams do
2014: LD_ADDR_VAR 0 2
2018: PUSH
2019: LD_EXP 35
2023: PUSH
2024: FOR_IN
2025: IFFALSE 2075
// for j = 2 to i do
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: DOUBLE
2033: LD_INT 2
2035: DEC
2036: ST_TO_ADDR
2037: LD_VAR 0 2
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2071
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2045: LD_VAR 0 2
2049: PUSH
2050: LD_VAR 0 3
2054: ARRAY
2055: PPUSH
2056: LD_VAR 0 2
2060: PUSH
2061: LD_INT 1
2063: ARRAY
2064: PPUSH
2065: CALL_OW 343
2069: GO 2042
2071: POP
2072: POP
2073: GO 2024
2075: POP
2076: POP
// end ; for i = 1 to 8 do
2077: LD_ADDR_VAR 0 2
2081: PUSH
2082: DOUBLE
2083: LD_INT 1
2085: DEC
2086: ST_TO_ADDR
2087: LD_INT 8
2089: PUSH
2090: FOR_TO
2091: IFFALSE 2181
// for j = 1 to 8 do
2093: LD_ADDR_VAR 0 3
2097: PUSH
2098: DOUBLE
2099: LD_INT 1
2101: DEC
2102: ST_TO_ADDR
2103: LD_INT 8
2105: PUSH
2106: FOR_TO
2107: IFFALSE 2177
// if Side_Teams [ i ] = Side_Teams [ j ] then
2109: LD_EXP 34
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_EXP 34
2124: PUSH
2125: LD_VAR 0 3
2129: ARRAY
2130: EQUAL
2131: IFFALSE 2155
// SetAttitude ( i , j , att_friend , true ) else
2133: LD_VAR 0 2
2137: PPUSH
2138: LD_VAR 0 3
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: LD_INT 1
2148: PPUSH
2149: CALL_OW 80
2153: GO 2175
// SetAttitude ( i , j , att_enemy , true ) ;
2155: LD_VAR 0 2
2159: PPUSH
2160: LD_VAR 0 3
2164: PPUSH
2165: LD_INT 2
2167: PPUSH
2168: LD_INT 1
2170: PPUSH
2171: CALL_OW 80
2175: GO 2106
2177: POP
2178: POP
2179: GO 2090
2181: POP
2182: POP
// end ; end ;
2183: LD_VAR 0 1
2187: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
2188: LD_INT 0
2190: PPUSH
2191: PPUSH
2192: PPUSH
2193: PPUSH
// result := [ ] ;
2194: LD_ADDR_VAR 0 8
2198: PUSH
2199: EMPTY
2200: ST_TO_ADDR
// for i := 1 to count do
2201: LD_ADDR_VAR 0 9
2205: PUSH
2206: DOUBLE
2207: LD_INT 1
2209: DEC
2210: ST_TO_ADDR
2211: LD_VAR 0 2
2215: PUSH
2216: FOR_TO
2217: IFFALSE 2611
// begin uc_direction := Rand ( 0 , 5 ) ;
2219: LD_ADDR_OWVAR 24
2223: PUSH
2224: LD_INT 0
2226: PPUSH
2227: LD_INT 5
2229: PPUSH
2230: CALL_OW 12
2234: ST_TO_ADDR
// if commander then
2235: LD_FROM_VAR 0 7
2239: IFFALSE 2348
// begin hc_name := mp_sides_players_names [ side ] ;
2241: LD_ADDR_OWVAR 26
2245: PUSH
2246: LD_OWVAR 19
2250: PUSH
2251: LD_VAR 0 1
2255: ARRAY
2256: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2257: LD_INT 1
2259: PPUSH
2260: LD_INT 2
2262: PPUSH
2263: CALL_OW 12
2267: PPUSH
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_EXP 16
2277: PUSH
2278: LD_INT 2
2280: PLUS
2281: PPUSH
2282: CALL_OW 380
// hc_importance := 105 ;
2286: LD_ADDR_OWVAR 32
2290: PUSH
2291: LD_INT 105
2293: ST_TO_ADDR
// commander := false ;
2294: LD_VAR 0 7
2298: PUSH
2299: LD_INT 0
2301: ST_TO_ADDR
// if Multiplayer then
2302: LD_OWVAR 4
2306: IFFALSE 2346
// begin hc_gallery := MULTIAVATARS ;
2308: LD_ADDR_OWVAR 33
2312: PUSH
2313: LD_STRING MULTIAVATARS
2315: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
2316: LD_ADDR_OWVAR 34
2320: PUSH
2321: LD_VAR 0 1
2325: PPUSH
2326: CALL_OW 525
2330: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
2331: LD_ADDR_OWVAR 27
2335: PUSH
2336: LD_VAR 0 1
2340: PPUSH
2341: CALL_OW 526
2345: ST_TO_ADDR
// end ; end else
2346: GO 2411
// begin hc_name :=  ;
2348: LD_ADDR_OWVAR 26
2352: PUSH
2353: LD_STRING 
2355: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 2
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: LD_EXP 16
2376: PPUSH
2377: CALL_OW 380
// hc_importance := 0 ;
2381: LD_ADDR_OWVAR 32
2385: PUSH
2386: LD_INT 0
2388: ST_TO_ADDR
// if Multiplayer then
2389: LD_OWVAR 4
2393: IFFALSE 2411
// begin hc_gallery :=  ;
2395: LD_ADDR_OWVAR 33
2399: PUSH
2400: LD_STRING 
2402: ST_TO_ADDR
// hc_face_number := 0 ;
2403: LD_ADDR_OWVAR 34
2407: PUSH
2408: LD_INT 0
2410: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2411: LD_ADDR_VAR 0 11
2415: PUSH
2416: CALL_OW 44
2420: ST_TO_ADDR
// if global_defined then
2421: LD_LOC 2
2425: IFFALSE 2563
// begin j := i ;
2427: LD_ADDR_VAR 0 10
2431: PUSH
2432: LD_VAR 0 9
2436: ST_TO_ADDR
// if cl = class_soldier then
2437: LD_VAR 0 3
2441: PUSH
2442: LD_INT 1
2444: EQUAL
2445: IFFALSE 2463
// j := i + soldiers_created ;
2447: LD_ADDR_VAR 0 10
2451: PUSH
2452: LD_VAR 0 9
2456: PUSH
2457: LD_LOC 3
2461: PLUS
2462: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2463: LD_LOC 1
2467: PUSH
2468: LD_VAR 0 3
2472: ARRAY
2473: PUSH
2474: LD_VAR 0 10
2478: ARRAY
2479: PPUSH
2480: LD_VAR 0 11
2484: PPUSH
2485: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2489: LD_VAR 0 11
2493: PPUSH
2494: LD_INT 2
2496: PPUSH
2497: LD_LOC 1
2501: PUSH
2502: LD_VAR 0 3
2506: ARRAY
2507: PUSH
2508: LD_VAR 0 10
2512: ARRAY
2513: PPUSH
2514: LD_INT 2
2516: PPUSH
2517: CALL_OW 260
2521: PPUSH
2522: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2526: LD_VAR 0 11
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: LD_LOC 1
2538: PUSH
2539: LD_VAR 0 3
2543: ARRAY
2544: PUSH
2545: LD_VAR 0 10
2549: ARRAY
2550: PPUSH
2551: LD_INT 1
2553: PPUSH
2554: CALL_OW 260
2558: PPUSH
2559: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2563: LD_VAR 0 11
2567: PPUSH
2568: LD_VAR 0 4
2572: PPUSH
2573: LD_VAR 0 5
2577: PPUSH
2578: LD_VAR 0 6
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: CALL_OW 50
// result := result ^ [ un ] ;
2590: LD_ADDR_VAR 0 8
2594: PUSH
2595: LD_VAR 0 8
2599: PUSH
2600: LD_VAR 0 11
2604: PUSH
2605: EMPTY
2606: LIST
2607: ADD
2608: ST_TO_ADDR
// end ;
2609: GO 2216
2611: POP
2612: POP
// if not global_defined then
2613: LD_LOC 2
2617: NOT
2618: IFFALSE 2680
// if cl = class_soldier and global_units then
2620: LD_VAR 0 3
2624: PUSH
2625: LD_INT 1
2627: EQUAL
2628: PUSH
2629: LD_LOC 1
2633: AND
2634: IFFALSE 2661
// global_units := [ global_units [ 1 ] ^ result ] else
2636: LD_ADDR_LOC 1
2640: PUSH
2641: LD_LOC 1
2645: PUSH
2646: LD_INT 1
2648: ARRAY
2649: PUSH
2650: LD_VAR 0 8
2654: ADD
2655: PUSH
2656: EMPTY
2657: LIST
2658: ST_TO_ADDR
2659: GO 2680
// global_units := global_units ^ [ result ] end ;
2661: LD_ADDR_LOC 1
2665: PUSH
2666: LD_LOC 1
2670: PUSH
2671: LD_VAR 0 8
2675: PUSH
2676: EMPTY
2677: LIST
2678: ADD
2679: ST_TO_ADDR
2680: LD_VAR 0 8
2684: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol , t , n1 , n2 ; begin
2685: LD_INT 0
2687: PPUSH
2688: PPUSH
2689: PPUSH
2690: PPUSH
2691: PPUSH
2692: PPUSH
2693: PPUSH
2694: PPUSH
2695: PPUSH
2696: PPUSH
2697: PPUSH
2698: PPUSH
2699: PPUSH
2700: PPUSH
2701: PPUSH
2702: PPUSH
// pos := Side_Positions [ side ] ;
2703: LD_ADDR_VAR 0 3
2707: PUSH
2708: LD_EXP 37
2712: PUSH
2713: LD_VAR 0 1
2717: ARRAY
2718: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2719: LD_ADDR_OWVAR 21
2723: PUSH
2724: LD_EXP 38
2728: PUSH
2729: LD_VAR 0 1
2733: ARRAY
2734: ST_TO_ADDR
// uc_side := side ;
2735: LD_ADDR_OWVAR 20
2739: PUSH
2740: LD_VAR 0 1
2744: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2745: LD_ADDR_VAR 0 4
2749: PUSH
2750: LD_EXP 43
2754: PUSH
2755: LD_VAR 0 3
2759: ARRAY
2760: PUSH
2761: LD_INT 1
2763: ARRAY
2764: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2765: LD_ADDR_VAR 0 5
2769: PUSH
2770: LD_EXP 43
2774: PUSH
2775: LD_VAR 0 3
2779: ARRAY
2780: PUSH
2781: LD_INT 2
2783: ARRAY
2784: ST_TO_ADDR
// if is_depot then
2785: LD_EXP 13
2789: IFFALSE 2932
// begin bc_type = b_depot ;
2791: LD_ADDR_OWVAR 42
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
2799: LD_ADDR_VAR 0 10
2803: PUSH
2804: LD_VAR 0 4
2808: PPUSH
2809: LD_VAR 0 5
2813: PPUSH
2814: LD_EXP 43
2818: PUSH
2819: LD_VAR 0 3
2823: ARRAY
2824: PUSH
2825: LD_INT 3
2827: ARRAY
2828: PPUSH
2829: CALL_OW 47
2833: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2834: LD_VAR 0 10
2838: PPUSH
2839: LD_STRING @
2841: PUSH
2842: LD_VAR 0 1
2846: STR
2847: PPUSH
2848: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2852: LD_VAR 0 10
2856: PPUSH
2857: CALL_OW 274
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_EXP 18
2869: PUSH
2870: LD_INT 1
2872: ARRAY
2873: PPUSH
2874: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2878: LD_VAR 0 10
2882: PPUSH
2883: CALL_OW 274
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: LD_EXP 18
2895: PUSH
2896: LD_INT 2
2898: ARRAY
2899: PPUSH
2900: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2904: LD_VAR 0 2
2908: PPUSH
2909: CALL_OW 274
2913: PPUSH
2914: LD_INT 3
2916: PPUSH
2917: LD_EXP 18
2921: PUSH
2922: LD_INT 3
2924: ARRAY
2925: PPUSH
2926: CALL_OW 277
// end else
2930: GO 3076
// begin for i := 1 to 3 do
2932: LD_ADDR_VAR 0 6
2936: PUSH
2937: DOUBLE
2938: LD_INT 1
2940: DEC
2941: ST_TO_ADDR
2942: LD_INT 3
2944: PUSH
2945: FOR_TO
2946: IFFALSE 3074
// begin r := starting_resources [ i ] ;
2948: LD_ADDR_VAR 0 7
2952: PUSH
2953: LD_EXP 18
2957: PUSH
2958: LD_VAR 0 6
2962: ARRAY
2963: ST_TO_ADDR
// while r >= 10 do
2964: LD_VAR 0 7
2968: PUSH
2969: LD_INT 10
2971: GREATEREQUAL
2972: IFFALSE 3072
// if r > 50 then
2974: LD_VAR 0 7
2978: PUSH
2979: LD_INT 50
2981: GREATER
2982: IFFALSE 3028
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
2984: LD_VAR 0 6
2988: PPUSH
2989: LD_INT 5
2991: PPUSH
2992: LD_VAR 0 4
2996: PPUSH
2997: LD_VAR 0 5
3001: PPUSH
3002: LD_INT 4
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL_OW 60
// r := r - 50 ;
3012: LD_ADDR_VAR 0 7
3016: PUSH
3017: LD_VAR 0 7
3021: PUSH
3022: LD_INT 50
3024: MINUS
3025: ST_TO_ADDR
// end else
3026: GO 3070
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3028: LD_VAR 0 6
3032: PPUSH
3033: LD_VAR 0 7
3037: PUSH
3038: LD_INT 10
3040: DIV
3041: PPUSH
3042: LD_VAR 0 4
3046: PPUSH
3047: LD_VAR 0 5
3051: PPUSH
3052: LD_INT 4
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 60
// r := 0 ;
3062: LD_ADDR_VAR 0 7
3066: PUSH
3067: LD_INT 0
3069: ST_TO_ADDR
// end ;
3070: GO 2964
// end ;
3072: GO 2945
3074: POP
3075: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3076: LD_ADDR_VAR 0 4
3080: PUSH
3081: LD_EXP 45
3085: PUSH
3086: LD_VAR 0 3
3090: ARRAY
3091: PUSH
3092: LD_INT 1
3094: ARRAY
3095: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3096: LD_ADDR_VAR 0 5
3100: PUSH
3101: LD_EXP 45
3105: PUSH
3106: LD_VAR 0 3
3110: ARRAY
3111: PUSH
3112: LD_INT 2
3114: ARRAY
3115: ST_TO_ADDR
// for r in starting_crates do
3116: LD_ADDR_VAR 0 7
3120: PUSH
3121: LD_EXP 17
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3159
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3129: LD_INT 1
3131: PPUSH
3132: LD_INT 5
3134: PPUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: LD_VAR 0 5
3144: PPUSH
3145: LD_VAR 0 7
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 60
3157: GO 3126
3159: POP
3160: POP
// if def_morale_flags then
3161: LD_EXP 8
3165: IFFALSE 3244
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3167: LD_ADDR_EXP 48
3171: PUSH
3172: LD_EXP 48
3176: PUSH
3177: LD_VAR 0 1
3181: PPUSH
3182: LD_VAR 0 4
3186: PPUSH
3187: LD_VAR 0 5
3191: PPUSH
3192: LD_INT 1
3194: PUSH
3195: LD_INT 100
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 50
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 3
3214: PUSH
3215: LD_INT 20
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: LD_INT 20
3224: PUSH
3225: LD_INT 100
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: PPUSH
3238: CALL_OW 418
3242: ADD
3243: ST_TO_ADDR
// commander := true ;
3244: LD_ADDR_EXP 47
3248: PUSH
3249: LD_INT 1
3251: ST_TO_ADDR
// if game_type in [ 11 , 12 ] then
3252: LD_EXP 1
3256: PUSH
3257: LD_INT 11
3259: PUSH
3260: LD_INT 12
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: IN
3267: IFFALSE 4122
// begin uc_nation = nation_russian ;
3269: LD_ADDR_OWVAR 21
3273: PUSH
3274: LD_INT 3
3276: ST_TO_ADDR
// bc_type = b_teleport ;
3277: LD_ADDR_OWVAR 42
3281: PUSH
3282: LD_INT 34
3284: ST_TO_ADDR
// bc_level = 10 ;
3285: LD_ADDR_OWVAR 43
3289: PUSH
3290: LD_INT 10
3292: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , teleport_def [ pos ] [ 3 ] ) ;
3293: LD_EXP 46
3297: PUSH
3298: LD_VAR 0 3
3302: ARRAY
3303: PUSH
3304: LD_INT 1
3306: ARRAY
3307: PPUSH
3308: LD_EXP 46
3312: PUSH
3313: LD_VAR 0 3
3317: ARRAY
3318: PUSH
3319: LD_INT 2
3321: ARRAY
3322: PPUSH
3323: LD_EXP 46
3327: PUSH
3328: LD_VAR 0 3
3332: ARRAY
3333: PUSH
3334: LD_INT 3
3336: ARRAY
3337: PPUSH
3338: CALL_OW 47
// if game_type = 11 then
3342: LD_EXP 1
3346: PUSH
3347: LD_INT 11
3349: EQUAL
3350: IFFALSE 3386
// if ( side in Teams [ 1 ] ) then
3352: LD_VAR 0 1
3356: PUSH
3357: LD_EXP 35
3361: PUSH
3362: LD_INT 1
3364: ARRAY
3365: IN
3366: IFFALSE 3378
// t := 1 else
3368: LD_ADDR_VAR 0 15
3372: PUSH
3373: LD_INT 1
3375: ST_TO_ADDR
3376: GO 3386
// t := 2 ;
3378: LD_ADDR_VAR 0 15
3382: PUSH
3383: LD_INT 2
3385: ST_TO_ADDR
// hc_importance = 101 ;
3386: LD_ADDR_OWVAR 32
3390: PUSH
3391: LD_INT 101
3393: ST_TO_ADDR
// commander := false ;
3394: LD_ADDR_EXP 47
3398: PUSH
3399: LD_INT 0
3401: ST_TO_ADDR
// n1 := false ;
3402: LD_ADDR_VAR 0 16
3406: PUSH
3407: LD_INT 0
3409: ST_TO_ADDR
// n2 := false ;
3410: LD_ADDR_VAR 0 17
3414: PUSH
3415: LD_INT 0
3417: ST_TO_ADDR
// if ( teams [ t ] + 0 ) = 1 then
3418: LD_EXP 35
3422: PUSH
3423: LD_VAR 0 15
3427: ARRAY
3428: PUSH
3429: LD_INT 0
3431: PLUS
3432: PUSH
3433: LD_INT 1
3435: EQUAL
3436: IFFALSE 3456
// begin n1 := true ;
3438: LD_ADDR_VAR 0 16
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// n2 := true ;
3446: LD_ADDR_VAR 0 17
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// end else
3454: GO 3612
// if t = 1 then
3456: LD_VAR 0 15
3460: PUSH
3461: LD_INT 1
3463: EQUAL
3464: IFFALSE 3540
// if sci1 then
3466: LD_EXP 28
3470: IFFALSE 3511
// if GetSex ( sci1 [ 1 ] ) = sex_male then
3472: LD_EXP 28
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: PPUSH
3481: CALL_OW 258
3485: PUSH
3486: LD_INT 1
3488: EQUAL
3489: IFFALSE 3501
// n2 := true else
3491: LD_ADDR_VAR 0 17
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
3499: GO 3509
// n1 := true else
3501: LD_ADDR_VAR 0 16
3505: PUSH
3506: LD_INT 1
3508: ST_TO_ADDR
3509: GO 3538
// if Prob ( 50 ) then
3511: LD_INT 50
3513: PPUSH
3514: CALL_OW 13
3518: IFFALSE 3530
// n1 := true else
3520: LD_ADDR_VAR 0 16
3524: PUSH
3525: LD_INT 1
3527: ST_TO_ADDR
3528: GO 3538
// n2 := true else
3530: LD_ADDR_VAR 0 17
3534: PUSH
3535: LD_INT 1
3537: ST_TO_ADDR
3538: GO 3612
// if sci2 then
3540: LD_EXP 29
3544: IFFALSE 3585
// if GetSex ( sci2 [ 1 ] ) = sex_male then
3546: LD_EXP 29
3550: PUSH
3551: LD_INT 1
3553: ARRAY
3554: PPUSH
3555: CALL_OW 258
3559: PUSH
3560: LD_INT 1
3562: EQUAL
3563: IFFALSE 3575
// n2 := true else
3565: LD_ADDR_VAR 0 17
3569: PUSH
3570: LD_INT 1
3572: ST_TO_ADDR
3573: GO 3583
// n1 := true else
3575: LD_ADDR_VAR 0 16
3579: PUSH
3580: LD_INT 1
3582: ST_TO_ADDR
3583: GO 3612
// if Prob ( 50 ) then
3585: LD_INT 50
3587: PPUSH
3588: CALL_OW 13
3592: IFFALSE 3604
// n1 := true else
3594: LD_ADDR_VAR 0 16
3598: PUSH
3599: LD_INT 1
3601: ST_TO_ADDR
3602: GO 3612
// n2 := true ;
3604: LD_ADDR_VAR 0 17
3608: PUSH
3609: LD_INT 1
3611: ST_TO_ADDR
// if n1 then
3612: LD_VAR 0 16
3616: IFFALSE 3852
// begin hc_name = Prof. Garin ;
3618: LD_ADDR_OWVAR 26
3622: PUSH
3623: LD_STRING Prof. Garin
3625: ST_TO_ADDR
// hc_sex = sex_male ;
3626: LD_ADDR_OWVAR 27
3630: PUSH
3631: LD_INT 1
3633: ST_TO_ADDR
// hc_class = class_scientistic ;
3634: LD_ADDR_OWVAR 28
3638: PUSH
3639: LD_INT 4
3641: ST_TO_ADDR
// hc_gallery = multi ;
3642: LD_ADDR_OWVAR 33
3646: PUSH
3647: LD_STRING multi
3649: ST_TO_ADDR
// hc_face_number = 2 ;
3650: LD_ADDR_OWVAR 34
3654: PUSH
3655: LD_INT 2
3657: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
3658: LD_ADDR_OWVAR 29
3662: PUSH
3663: LD_INT 11
3665: PUSH
3666: LD_INT 10
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: ST_TO_ADDR
// hc_basic_skills = [ 0 , 1 , 0 , 2 ] ;
3673: LD_ADDR_OWVAR 30
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 1
3683: PUSH
3684: LD_INT 0
3686: PUSH
3687: LD_INT 2
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: ST_TO_ADDR
// hc_skills = sci1_skills ;
3696: LD_ADDR_OWVAR 31
3700: PUSH
3701: LD_EXP 21
3705: ST_TO_ADDR
// if t = 1 then
3706: LD_VAR 0 15
3710: PUSH
3711: LD_INT 1
3713: EQUAL
3714: IFFALSE 3785
// begin sci1 := sci1 ^ CreateHuman ;
3716: LD_ADDR_EXP 28
3720: PUSH
3721: LD_EXP 28
3725: PUSH
3726: CALL_OW 44
3730: ADD
3731: ST_TO_ADDR
// PlaceUnitXYR ( sci1 [ sci1 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3732: LD_EXP 28
3736: PUSH
3737: LD_EXP 28
3741: ARRAY
3742: PPUSH
3743: LD_EXP 46
3747: PUSH
3748: LD_VAR 0 3
3752: ARRAY
3753: PUSH
3754: LD_INT 1
3756: ARRAY
3757: PPUSH
3758: LD_EXP 46
3762: PUSH
3763: LD_VAR 0 3
3767: ARRAY
3768: PUSH
3769: LD_INT 2
3771: ARRAY
3772: PPUSH
3773: LD_INT 4
3775: PPUSH
3776: LD_INT 0
3778: PPUSH
3779: CALL_OW 50
// end else
3783: GO 3852
// begin sci2 := sci2 ^ CreateHuman ;
3785: LD_ADDR_EXP 29
3789: PUSH
3790: LD_EXP 29
3794: PUSH
3795: CALL_OW 44
3799: ADD
3800: ST_TO_ADDR
// PlaceUnitXYR ( sci2 [ sci2 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3801: LD_EXP 29
3805: PUSH
3806: LD_EXP 29
3810: ARRAY
3811: PPUSH
3812: LD_EXP 46
3816: PUSH
3817: LD_VAR 0 3
3821: ARRAY
3822: PUSH
3823: LD_INT 1
3825: ARRAY
3826: PPUSH
3827: LD_EXP 46
3831: PUSH
3832: LD_VAR 0 3
3836: ARRAY
3837: PUSH
3838: LD_INT 2
3840: ARRAY
3841: PPUSH
3842: LD_INT 4
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 50
// end end ; if n2 then
3852: LD_VAR 0 17
3856: IFFALSE 4092
// begin hc_name = Tanya Garinova ;
3858: LD_ADDR_OWVAR 26
3862: PUSH
3863: LD_STRING Tanya Garinova
3865: ST_TO_ADDR
// hc_sex = sex_female ;
3866: LD_ADDR_OWVAR 27
3870: PUSH
3871: LD_INT 2
3873: ST_TO_ADDR
// hc_class = class_scientistic ;
3874: LD_ADDR_OWVAR 28
3878: PUSH
3879: LD_INT 4
3881: ST_TO_ADDR
// hc_gallery = multi ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING multi
3889: ST_TO_ADDR
// hc_face_number = 1 ;
3890: LD_ADDR_OWVAR 34
3894: PUSH
3895: LD_INT 1
3897: ST_TO_ADDR
// hc_attr = [ 9 , 11 ] ;
3898: LD_ADDR_OWVAR 29
3902: PUSH
3903: LD_INT 9
3905: PUSH
3906: LD_INT 11
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: ST_TO_ADDR
// hc_basic_skills = [ 1 , 1 , 0 , 1 ] ;
3913: LD_ADDR_OWVAR 30
3917: PUSH
3918: LD_INT 1
3920: PUSH
3921: LD_INT 1
3923: PUSH
3924: LD_INT 0
3926: PUSH
3927: LD_INT 1
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: ST_TO_ADDR
// hc_skills = sci2_skills ;
3936: LD_ADDR_OWVAR 31
3940: PUSH
3941: LD_EXP 22
3945: ST_TO_ADDR
// if t = 1 then
3946: LD_VAR 0 15
3950: PUSH
3951: LD_INT 1
3953: EQUAL
3954: IFFALSE 4025
// begin sci1 := sci1 ^ CreateHuman ;
3956: LD_ADDR_EXP 28
3960: PUSH
3961: LD_EXP 28
3965: PUSH
3966: CALL_OW 44
3970: ADD
3971: ST_TO_ADDR
// PlaceUnitXYR ( sci1 [ sci1 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
3972: LD_EXP 28
3976: PUSH
3977: LD_EXP 28
3981: ARRAY
3982: PPUSH
3983: LD_EXP 46
3987: PUSH
3988: LD_VAR 0 3
3992: ARRAY
3993: PUSH
3994: LD_INT 1
3996: ARRAY
3997: PPUSH
3998: LD_EXP 46
4002: PUSH
4003: LD_VAR 0 3
4007: ARRAY
4008: PUSH
4009: LD_INT 2
4011: ARRAY
4012: PPUSH
4013: LD_INT 4
4015: PPUSH
4016: LD_INT 0
4018: PPUSH
4019: CALL_OW 50
// end else
4023: GO 4092
// begin sci2 := sci2 ^ CreateHuman ;
4025: LD_ADDR_EXP 29
4029: PUSH
4030: LD_EXP 29
4034: PUSH
4035: CALL_OW 44
4039: ADD
4040: ST_TO_ADDR
// PlaceUnitXYR ( sci2 [ sci2 ] , teleport_def [ pos ] [ 1 ] , teleport_def [ pos ] [ 2 ] , 4 , false ) ;
4041: LD_EXP 29
4045: PUSH
4046: LD_EXP 29
4050: ARRAY
4051: PPUSH
4052: LD_EXP 46
4056: PUSH
4057: LD_VAR 0 3
4061: ARRAY
4062: PUSH
4063: LD_INT 1
4065: ARRAY
4066: PPUSH
4067: LD_EXP 46
4071: PUSH
4072: LD_VAR 0 3
4076: ARRAY
4077: PUSH
4078: LD_INT 2
4080: ARRAY
4081: PPUSH
4082: LD_INT 4
4084: PPUSH
4085: LD_INT 0
4087: PPUSH
4088: CALL_OW 50
// end end ; SetTech ( tech_TargTeleport , side , state_researched ) ;
4092: LD_INT 38
4094: PPUSH
4095: LD_VAR 0 1
4099: PPUSH
4100: LD_INT 2
4102: PPUSH
4103: CALL_OW 322
// SetRestrict ( b_teleport , side , state_disabled ) ;
4107: LD_INT 34
4109: PPUSH
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_INT 0
4117: PPUSH
4118: CALL_OW 324
// end ; uc_nation = Side_nations [ side ] ;
4122: LD_ADDR_OWVAR 21
4126: PUSH
4127: LD_EXP 38
4131: PUSH
4132: LD_VAR 0 1
4136: ARRAY
4137: ST_TO_ADDR
// hc_gallery =  ;
4138: LD_ADDR_OWVAR 33
4142: PUSH
4143: LD_STRING 
4145: ST_TO_ADDR
// hc_name =  ;
4146: LD_ADDR_OWVAR 26
4150: PUSH
4151: LD_STRING 
4153: ST_TO_ADDR
// neng := number_of_people ;
4154: LD_ADDR_VAR 0 11
4158: PUSH
4159: LD_EXP 15
4163: ST_TO_ADDR
// nsol := number_of_breastworks ;
4164: LD_ADDR_VAR 0 14
4168: PUSH
4169: LD_EXP 14
4173: ST_TO_ADDR
// if nsol < neng div 4 then
4174: LD_VAR 0 14
4178: PUSH
4179: LD_VAR 0 11
4183: PUSH
4184: LD_INT 4
4186: DIV
4187: LESS
4188: IFFALSE 4204
// nsol := neng div 4 ;
4190: LD_ADDR_VAR 0 14
4194: PUSH
4195: LD_VAR 0 11
4199: PUSH
4200: LD_INT 4
4202: DIV
4203: ST_TO_ADDR
// neng := neng - nsol ;
4204: LD_ADDR_VAR 0 11
4208: PUSH
4209: LD_VAR 0 11
4213: PUSH
4214: LD_VAR 0 14
4218: MINUS
4219: ST_TO_ADDR
// nsci := neng div 3 ;
4220: LD_ADDR_VAR 0 12
4224: PUSH
4225: LD_VAR 0 11
4229: PUSH
4230: LD_INT 3
4232: DIV
4233: ST_TO_ADDR
// if nsci < 1 then
4234: LD_VAR 0 12
4238: PUSH
4239: LD_INT 1
4241: LESS
4242: IFFALSE 4252
// nsci := 1 ;
4244: LD_ADDR_VAR 0 12
4248: PUSH
4249: LD_INT 1
4251: ST_TO_ADDR
// neng := neng - nsci ;
4252: LD_ADDR_VAR 0 11
4256: PUSH
4257: LD_VAR 0 11
4261: PUSH
4262: LD_VAR 0 12
4266: MINUS
4267: ST_TO_ADDR
// nmech := neng div 2 ;
4268: LD_ADDR_VAR 0 13
4272: PUSH
4273: LD_VAR 0 11
4277: PUSH
4278: LD_INT 2
4280: DIV
4281: ST_TO_ADDR
// neng := neng - nmech ;
4282: LD_ADDR_VAR 0 11
4286: PUSH
4287: LD_VAR 0 11
4291: PUSH
4292: LD_VAR 0 13
4296: MINUS
4297: ST_TO_ADDR
// if neng < 1 then
4298: LD_VAR 0 11
4302: PUSH
4303: LD_INT 1
4305: LESS
4306: IFFALSE 4316
// neng := 1 ;
4308: LD_ADDR_VAR 0 11
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// soldiers_created := 0 ;
4316: LD_ADDR_LOC 3
4320: PUSH
4321: LD_INT 0
4323: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4324: LD_ADDR_VAR 0 6
4328: PUSH
4329: DOUBLE
4330: LD_INT 1
4332: DEC
4333: ST_TO_ADDR
4334: LD_EXP 14
4338: PUSH
4339: FOR_TO
4340: IFFALSE 4594
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4342: LD_ADDR_VAR 0 4
4346: PUSH
4347: LD_EXP 44
4351: PUSH
4352: LD_VAR 0 3
4356: ARRAY
4357: PUSH
4358: LD_VAR 0 6
4362: ARRAY
4363: PUSH
4364: LD_INT 1
4366: ARRAY
4367: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4368: LD_ADDR_VAR 0 5
4372: PUSH
4373: LD_EXP 44
4377: PUSH
4378: LD_VAR 0 3
4382: ARRAY
4383: PUSH
4384: LD_VAR 0 6
4388: ARRAY
4389: PUSH
4390: LD_INT 2
4392: ARRAY
4393: ST_TO_ADDR
// bc_type := b_breastwork ;
4394: LD_ADDR_OWVAR 42
4398: PUSH
4399: LD_INT 31
4401: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ i ] [ 3 ] ) ;
4402: LD_ADDR_VAR 0 9
4406: PUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: LD_VAR 0 5
4416: PPUSH
4417: LD_EXP 44
4421: PUSH
4422: LD_VAR 0 3
4426: ARRAY
4427: PUSH
4428: LD_VAR 0 6
4432: ARRAY
4433: PUSH
4434: LD_INT 3
4436: ARRAY
4437: PPUSH
4438: CALL_OW 47
4442: ST_TO_ADDR
// x := ShiftX ( x , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4443: LD_ADDR_VAR 0 4
4447: PUSH
4448: LD_VAR 0 4
4452: PPUSH
4453: LD_EXP 44
4457: PUSH
4458: LD_VAR 0 3
4462: ARRAY
4463: PUSH
4464: LD_VAR 0 6
4468: ARRAY
4469: PUSH
4470: LD_INT 3
4472: ARRAY
4473: PPUSH
4474: LD_INT 2
4476: PPUSH
4477: CALL_OW 272
4481: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4482: LD_ADDR_VAR 0 5
4486: PUSH
4487: LD_VAR 0 5
4491: PPUSH
4492: LD_EXP 44
4496: PUSH
4497: LD_VAR 0 3
4501: ARRAY
4502: PUSH
4503: LD_VAR 0 6
4507: ARRAY
4508: PUSH
4509: LD_INT 3
4511: ARRAY
4512: PPUSH
4513: LD_INT 2
4515: PPUSH
4516: CALL_OW 273
4520: ST_TO_ADDR
// sol := prepare_people ( side , 1 , class_soldier , x , y , 1 , commander ) [ 1 ] ;
4521: LD_ADDR_VAR 0 8
4525: PUSH
4526: LD_VAR 0 1
4530: PPUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 1
4536: PPUSH
4537: LD_VAR 0 4
4541: PPUSH
4542: LD_VAR 0 5
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_ADDR_EXP 47
4554: PPUSH
4555: CALL 2188 0 7
4559: PUSH
4560: LD_INT 1
4562: ARRAY
4563: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4564: LD_ADDR_LOC 3
4568: PUSH
4569: LD_LOC 3
4573: PUSH
4574: LD_INT 1
4576: PLUS
4577: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4578: LD_VAR 0 8
4582: PPUSH
4583: LD_VAR 0 9
4587: PPUSH
4588: CALL_OW 120
// end ;
4592: GO 4339
4594: POP
4595: POP
// x := start_def [ pos ] [ 1 ] ;
4596: LD_ADDR_VAR 0 4
4600: PUSH
4601: LD_EXP 45
4605: PUSH
4606: LD_VAR 0 3
4610: ARRAY
4611: PUSH
4612: LD_INT 1
4614: ARRAY
4615: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4616: LD_ADDR_VAR 0 5
4620: PUSH
4621: LD_EXP 45
4625: PUSH
4626: LD_VAR 0 3
4630: ARRAY
4631: PUSH
4632: LD_INT 2
4634: ARRAY
4635: ST_TO_ADDR
// prepare_people ( side , nsol - number_of_breastworks , class_soldier , x , y , 5 , commander ) ;
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_VAR 0 14
4645: PUSH
4646: LD_EXP 14
4650: MINUS
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: LD_VAR 0 4
4659: PPUSH
4660: LD_VAR 0 5
4664: PPUSH
4665: LD_INT 5
4667: PPUSH
4668: LD_ADDR_EXP 47
4672: PPUSH
4673: CALL 2188 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_VAR 0 11
4686: PPUSH
4687: LD_INT 2
4689: PPUSH
4690: LD_VAR 0 4
4694: PPUSH
4695: LD_VAR 0 5
4699: PPUSH
4700: LD_INT 5
4702: PPUSH
4703: LD_ADDR_EXP 47
4707: PPUSH
4708: CALL 2188 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
4712: LD_VAR 0 1
4716: PPUSH
4717: LD_VAR 0 13
4721: PPUSH
4722: LD_INT 3
4724: PPUSH
4725: LD_VAR 0 4
4729: PPUSH
4730: LD_VAR 0 5
4734: PPUSH
4735: LD_INT 5
4737: PPUSH
4738: LD_ADDR_EXP 47
4742: PPUSH
4743: CALL 2188 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
4747: LD_VAR 0 1
4751: PPUSH
4752: LD_VAR 0 12
4756: PPUSH
4757: LD_INT 4
4759: PPUSH
4760: LD_VAR 0 4
4764: PPUSH
4765: LD_VAR 0 5
4769: PPUSH
4770: LD_INT 5
4772: PPUSH
4773: LD_ADDR_EXP 47
4777: PPUSH
4778: CALL 2188 0 7
// if not global_defined then
4782: LD_LOC 2
4786: NOT
4787: IFFALSE 4797
// global_defined := true ;
4789: LD_ADDR_LOC 2
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4797: LD_EXP 9
4801: PUSH
4802: LD_INT 20
4804: PPUSH
4805: LD_VAR 0 1
4809: PPUSH
4810: CALL_OW 321
4814: PUSH
4815: LD_INT 1
4817: EQUAL
4818: AND
4819: IFFALSE 4836
// SetTech ( tech_SibDet , side , state_researched ) ;
4821: LD_INT 20
4823: PPUSH
4824: LD_VAR 0 1
4828: PPUSH
4829: LD_INT 2
4831: PPUSH
4832: CALL_OW 322
// if def_siberite_bomb = 1 then
4836: LD_EXP 10
4840: PUSH
4841: LD_INT 1
4843: EQUAL
4844: IFFALSE 4878
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4846: LD_INT 25
4848: PPUSH
4849: LD_VAR 0 1
4853: PPUSH
4854: LD_INT 1
4856: PPUSH
4857: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4861: LD_INT 73
4863: PPUSH
4864: LD_VAR 0 1
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 322
// end else
4876: GO 4908
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4878: LD_INT 25
4880: PPUSH
4881: LD_VAR 0 1
4885: PPUSH
4886: LD_INT 0
4888: PPUSH
4889: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4893: LD_INT 73
4895: PPUSH
4896: LD_VAR 0 1
4900: PPUSH
4901: LD_INT 0
4903: PPUSH
4904: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4908: LD_INT 24
4910: PPUSH
4911: LD_VAR 0 1
4915: PPUSH
4916: LD_INT 0
4918: PPUSH
4919: CALL_OW 322
// end ;
4923: LD_VAR 0 2
4927: RET
// every 0 0$1 do
4928: GO 4930
4930: DISABLE
// if ( def_siberite_bomb > 1 ) then
4931: LD_EXP 10
4935: PUSH
4936: LD_INT 1
4938: GREATER
4939: IFFALSE 4954
// begin wait ( siberite_bomb_Delay ) ;
4941: LD_EXP 25
4945: PPUSH
4946: CALL_OW 67
// EnableSibFiss ;
4950: CALL 4955 0 0
// end ;
4954: END
// function EnableSibFiss ; var i ; begin
4955: LD_INT 0
4957: PPUSH
4958: PPUSH
// for i := 1 to 8 do
4959: LD_ADDR_VAR 0 2
4963: PUSH
4964: DOUBLE
4965: LD_INT 1
4967: DEC
4968: ST_TO_ADDR
4969: LD_INT 8
4971: PUSH
4972: FOR_TO
4973: IFFALSE 5019
// if Side_Positions [ i ] then
4975: LD_EXP 37
4979: PUSH
4980: LD_VAR 0 2
4984: ARRAY
4985: IFFALSE 5017
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4987: LD_INT 25
4989: PPUSH
4990: LD_VAR 0 2
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5002: LD_INT 73
5004: PPUSH
5005: LD_VAR 0 2
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: CALL_OW 322
// end ;
5017: GO 4972
5019: POP
5020: POP
// end ;
5021: LD_VAR 0 1
5025: RET
// function prepare_sides ; var i ; begin
5026: LD_INT 0
5028: PPUSH
5029: PPUSH
// global_units := [ ] ;
5030: LD_ADDR_LOC 1
5034: PUSH
5035: EMPTY
5036: ST_TO_ADDR
// global_defined := false ;
5037: LD_ADDR_LOC 2
5041: PUSH
5042: LD_INT 0
5044: ST_TO_ADDR
// for i := 1 to 8 do
5045: LD_ADDR_VAR 0 2
5049: PUSH
5050: DOUBLE
5051: LD_INT 1
5053: DEC
5054: ST_TO_ADDR
5055: LD_INT 8
5057: PUSH
5058: FOR_TO
5059: IFFALSE 5084
// if Side_Positions [ i ] then
5061: LD_EXP 37
5065: PUSH
5066: LD_VAR 0 2
5070: ARRAY
5071: IFFALSE 5082
// prepare_side ( i ) ;
5073: LD_VAR 0 2
5077: PPUSH
5078: CALL 2685 0 1
5082: GO 5058
5084: POP
5085: POP
// end ;
5086: LD_VAR 0 1
5090: RET
// starting begin DE_Triggers ;
5091: CALL 7564 0 0
// read_multiplayer_and_game_parameters ;
5095: CALL 0 0 0
// enable ( 44 ) ;
5099: LD_INT 44
5101: ENABLE_MARKED
// enable ( 45 ) ;
5102: LD_INT 45
5104: ENABLE_MARKED
// mp_selectmsg := true ;
5105: LD_ADDR_OWVAR 13
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// prepare_map_coordinates ;
5113: CALL 1286 0 0
// set_shared_visions_and_alliances ;
5117: CALL 1825 0 0
// prepare_sides ;
5121: CALL 5026 0 0
// Init_Win_Condition ;
5125: CALL 7611 0 0
// init_shipments_and_respawning ;
5129: CALL 5245 0 0
// your_side := Player_Side ;
5133: LD_ADDR_OWVAR 2
5137: PUSH
5138: LD_EXP 32
5142: ST_TO_ADDR
// ResetFog ;
5143: CALL_OW 335
// music_nat := Side_Nations [ your_side ] ;
5147: LD_ADDR_OWVAR 71
5151: PUSH
5152: LD_EXP 38
5156: PUSH
5157: LD_OWVAR 2
5161: ARRAY
5162: ST_TO_ADDR
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5163: LD_EXP 45
5167: PUSH
5168: LD_EXP 37
5172: PUSH
5173: LD_OWVAR 2
5177: ARRAY
5178: ARRAY
5179: PUSH
5180: LD_INT 1
5182: ARRAY
5183: PPUSH
5184: LD_EXP 45
5188: PUSH
5189: LD_EXP 37
5193: PUSH
5194: LD_OWVAR 2
5198: ARRAY
5199: ARRAY
5200: PUSH
5201: LD_INT 2
5203: ARRAY
5204: PPUSH
5205: CALL_OW 86
// BuildUpAreas := [ Base_nw , Base_ne , Base_sw , Base_se ] ;
5209: LD_ADDR_EXP 50
5213: PUSH
5214: LD_INT 15
5216: PUSH
5217: LD_INT 16
5219: PUSH
5220: LD_INT 17
5222: PUSH
5223: LD_INT 18
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: ST_TO_ADDR
// BeginBuildUp ;
5232: CALL 8408 0 0
// end ;
5236: END
// export function OnHumanRespawned ( un ) ; begin
5237: LD_INT 0
5239: PPUSH
// end ; end_of_file
5240: LD_VAR 0 2
5244: RET
// var shipment1 , shipment2 , respawn , inqueue ; export function init_shipments_and_respawning ; begin
5245: LD_INT 0
5247: PPUSH
// shipment1 := [ ] ;
5248: LD_ADDR_LOC 4
5252: PUSH
5253: EMPTY
5254: ST_TO_ADDR
// shipment2 := [ ] ;
5255: LD_ADDR_LOC 5
5259: PUSH
5260: EMPTY
5261: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5262: LD_ADDR_LOC 6
5266: PUSH
5267: LD_INT 1
5269: PPUSH
5270: LD_INT 8
5272: PPUSH
5273: CALL_OW 12
5277: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5278: LD_ADDR_LOC 7
5282: PUSH
5283: LD_INT 0
5285: PUSH
5286: LD_INT 0
5288: PUSH
5289: LD_INT 0
5291: PUSH
5292: LD_INT 0
5294: PUSH
5295: LD_INT 0
5297: PUSH
5298: LD_INT 0
5300: PUSH
5301: LD_INT 0
5303: PUSH
5304: LD_INT 0
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: ST_TO_ADDR
// end ;
5317: LD_VAR 0 1
5321: RET
// every 0 0$1 + 0 0$0.5 marked 45 do var n , building_list , aktresp , b ;
5322: GO 5324
5324: DISABLE
5325: LD_INT 0
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
// begin if respawning_time_max = 0 then
5331: LD_EXP 24
5335: PUSH
5336: LD_INT 0
5338: EQUAL
5339: IFFALSE 5343
// exit ;
5341: GO 5850
// if respawn = 8 then
5343: LD_LOC 6
5347: PUSH
5348: LD_INT 8
5350: EQUAL
5351: IFFALSE 5363
// respawn := 1 else
5353: LD_ADDR_LOC 6
5357: PUSH
5358: LD_INT 1
5360: ST_TO_ADDR
5361: GO 5377
// respawn := respawn + 1 ;
5363: LD_ADDR_LOC 6
5367: PUSH
5368: LD_LOC 6
5372: PUSH
5373: LD_INT 1
5375: PLUS
5376: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5377: LD_EXP 37
5381: PUSH
5382: LD_LOC 6
5386: ARRAY
5387: PUSH
5388: LD_LOC 7
5392: PUSH
5393: LD_LOC 6
5397: ARRAY
5398: NOT
5399: AND
5400: IFFALSE 5849
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5402: LD_ADDR_VAR 0 1
5406: PUSH
5407: LD_INT 21
5409: PUSH
5410: LD_INT 1
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: LD_INT 22
5419: PUSH
5420: LD_LOC 6
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 3
5431: PUSH
5432: LD_INT 23
5434: PUSH
5435: LD_INT 0
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: PPUSH
5448: CALL_OW 69
5452: ST_TO_ADDR
// if n < number_of_people then
5453: LD_VAR 0 1
5457: PUSH
5458: LD_EXP 15
5462: LESS
5463: IFFALSE 5846
// begin aktresp := respawn ;
5465: LD_ADDR_VAR 0 3
5469: PUSH
5470: LD_LOC 6
5474: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5475: LD_ADDR_LOC 7
5479: PUSH
5480: LD_LOC 7
5484: PPUSH
5485: LD_VAR 0 3
5489: PPUSH
5490: LD_INT 1
5492: PPUSH
5493: CALL_OW 1
5497: ST_TO_ADDR
// enable ;
5498: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5499: LD_EXP 23
5503: PPUSH
5504: LD_EXP 24
5508: PPUSH
5509: CALL_OW 12
5513: PPUSH
5514: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5518: LD_ADDR_LOC 7
5522: PUSH
5523: LD_LOC 7
5527: PPUSH
5528: LD_VAR 0 3
5532: PPUSH
5533: LD_INT 0
5535: PPUSH
5536: CALL_OW 1
5540: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5541: LD_ADDR_VAR 0 2
5545: PUSH
5546: LD_INT 21
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: LD_INT 2
5558: PUSH
5559: LD_INT 30
5561: PUSH
5562: LD_INT 0
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: LD_INT 30
5571: PUSH
5572: LD_INT 1
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 50
5586: PUSH
5587: EMPTY
5588: LIST
5589: PUSH
5590: LD_INT 22
5592: PUSH
5593: LD_VAR 0 3
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: PPUSH
5608: CALL_OW 69
5612: ST_TO_ADDR
// if building_list = 0 then
5613: LD_VAR 0 2
5617: PUSH
5618: LD_INT 0
5620: EQUAL
5621: IFFALSE 5666
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5623: LD_ADDR_VAR 0 2
5627: PUSH
5628: LD_INT 21
5630: PUSH
5631: LD_INT 3
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: LD_INT 50
5640: PUSH
5641: EMPTY
5642: LIST
5643: PUSH
5644: LD_INT 22
5646: PUSH
5647: LD_VAR 0 3
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: PPUSH
5661: CALL_OW 69
5665: ST_TO_ADDR
// if building_list = 0 then
5666: LD_VAR 0 2
5670: PUSH
5671: LD_INT 0
5673: EQUAL
5674: IFFALSE 5678
// exit ;
5676: GO 5850
// hc_name :=  ;
5678: LD_ADDR_OWVAR 26
5682: PUSH
5683: LD_STRING 
5685: ST_TO_ADDR
// hc_importance := 0 ;
5686: LD_ADDR_OWVAR 32
5690: PUSH
5691: LD_INT 0
5693: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5694: LD_INT 0
5696: PPUSH
5697: LD_INT 0
5699: PPUSH
5700: LD_EXP 16
5704: PUSH
5705: LD_INT 2
5707: DIV
5708: PPUSH
5709: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5713: LD_ADDR_OWVAR 21
5717: PUSH
5718: LD_EXP 38
5722: PUSH
5723: LD_VAR 0 3
5727: ARRAY
5728: ST_TO_ADDR
// uc_side := aktresp ;
5729: LD_ADDR_OWVAR 20
5733: PUSH
5734: LD_VAR 0 3
5738: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5739: LD_ADDR_VAR 0 4
5743: PUSH
5744: LD_VAR 0 2
5748: PUSH
5749: LD_INT 1
5751: PPUSH
5752: LD_VAR 0 2
5756: PUSH
5757: LD_INT 0
5759: PLUS
5760: PPUSH
5761: CALL_OW 12
5765: ARRAY
5766: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5767: LD_VAR 0 4
5771: PPUSH
5772: CALL_OW 266
5776: PUSH
5777: LD_INT 0
5779: PUSH
5780: LD_INT 1
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: IN
5787: IFFALSE 5799
// n = 25 else
5789: LD_ADDR_VAR 0 1
5793: PUSH
5794: LD_INT 25
5796: ST_TO_ADDR
5797: GO 5807
// n = 10 ;
5799: LD_ADDR_VAR 0 1
5803: PUSH
5804: LD_INT 10
5806: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5807: CALL_OW 44
5811: PPUSH
5812: LD_VAR 0 4
5816: PPUSH
5817: CALL_OW 250
5821: PPUSH
5822: LD_VAR 0 4
5826: PPUSH
5827: CALL_OW 251
5831: PPUSH
5832: LD_VAR 0 1
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: CALL_OW 50
// end else
5844: GO 5847
// enable ;
5846: ENABLE
// end else
5847: GO 5850
// enable ;
5849: ENABLE
// end ;
5850: PPOPN 4
5852: END
// every 0 0$5 + 0 0$1.1 marked 45 do var d , q ;
5853: GO 5855
5855: DISABLE
5856: LD_INT 0
5858: PPUSH
5859: PPUSH
// begin case tick of 1 .. 1 1$0 :
5860: LD_OWVAR 1
5864: PUSH
5865: LD_INT 1
5867: DOUBLE
5868: GREATEREQUAL
5869: IFFALSE 5877
5871: LD_INT 2100
5873: DOUBLE
5874: LESSEQUAL
5875: IFTRUE 5879
5877: GO 5890
5879: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5880: LD_ADDR_VAR 0 1
5884: PUSH
5885: LD_INT 150
5887: ST_TO_ADDR
5888: GO 6073
5890: LD_INT 2100
5892: PUSH
5893: LD_INT 1
5895: PLUS
5896: DOUBLE
5897: GREATEREQUAL
5898: IFFALSE 5906
5900: LD_INT 10500
5902: DOUBLE
5903: LESSEQUAL
5904: IFTRUE 5908
5906: GO 5919
5908: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5909: LD_ADDR_VAR 0 1
5913: PUSH
5914: LD_INT 100
5916: ST_TO_ADDR
5917: GO 6073
5919: LD_INT 10500
5921: PUSH
5922: LD_INT 1
5924: PLUS
5925: DOUBLE
5926: GREATEREQUAL
5927: IFFALSE 5935
5929: LD_INT 21000
5931: DOUBLE
5932: LESSEQUAL
5933: IFTRUE 5937
5935: GO 5948
5937: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5938: LD_ADDR_VAR 0 1
5942: PUSH
5943: LD_INT 90
5945: ST_TO_ADDR
5946: GO 6073
5948: LD_INT 21000
5950: PUSH
5951: LD_INT 1
5953: PLUS
5954: DOUBLE
5955: GREATEREQUAL
5956: IFFALSE 5964
5958: LD_INT 42000
5960: DOUBLE
5961: LESSEQUAL
5962: IFTRUE 5966
5964: GO 5977
5966: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5967: LD_ADDR_VAR 0 1
5971: PUSH
5972: LD_INT 70
5974: ST_TO_ADDR
5975: GO 6073
5977: LD_INT 42000
5979: PUSH
5980: LD_INT 1
5982: PLUS
5983: DOUBLE
5984: GREATEREQUAL
5985: IFFALSE 5993
5987: LD_INT 63000
5989: DOUBLE
5990: LESSEQUAL
5991: IFTRUE 5995
5993: GO 6006
5995: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5996: LD_ADDR_VAR 0 1
6000: PUSH
6001: LD_INT 60
6003: ST_TO_ADDR
6004: GO 6073
6006: LD_INT 63000
6008: PUSH
6009: LD_INT 1
6011: PLUS
6012: DOUBLE
6013: GREATEREQUAL
6014: IFFALSE 6022
6016: LD_INT 105000
6018: DOUBLE
6019: LESSEQUAL
6020: IFTRUE 6024
6022: GO 6035
6024: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
6025: LD_ADDR_VAR 0 1
6029: PUSH
6030: LD_INT 35
6032: ST_TO_ADDR
6033: GO 6073
6035: LD_INT 105000
6037: PUSH
6038: LD_INT 1
6040: PLUS
6041: DOUBLE
6042: GREATEREQUAL
6043: IFFALSE 6051
6045: LD_INT 630000
6047: DOUBLE
6048: LESSEQUAL
6049: IFTRUE 6053
6051: GO 6064
6053: POP
// d := 20 ; else
6054: LD_ADDR_VAR 0 1
6058: PUSH
6059: LD_INT 20
6061: ST_TO_ADDR
6062: GO 6073
6064: POP
// d := 0 ; end ;
6065: LD_ADDR_VAR 0 1
6069: PUSH
6070: LD_INT 0
6072: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
6073: LD_INT 1
6075: PPUSH
6076: LD_INT 10000
6078: PPUSH
6079: CALL_OW 12
6083: PUSH
6084: LD_VAR 0 1
6088: PUSH
6089: LD_EXP 19
6093: MUL
6094: PUSH
6095: LD_INT 2
6097: DIV
6098: LESSEQUAL
6099: IFFALSE 6206
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6101: LD_INT 1
6103: PPUSH
6104: LD_INT 140
6106: PPUSH
6107: CALL_OW 12
6111: PPUSH
6112: CALL_OW 67
// if shipment1 = [ ] then
6116: LD_LOC 4
6120: PUSH
6121: EMPTY
6122: EQUAL
6123: IFFALSE 6148
// shipment1 := [ q1 , q2 , q3 , q4 ] ;
6125: LD_ADDR_LOC 4
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: LD_INT 4
6135: PUSH
6136: LD_INT 5
6138: PUSH
6139: LD_INT 6
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: ST_TO_ADDR
// q := shipment1 [ Rand ( 1 , shipment1 ) ] ;
6148: LD_ADDR_VAR 0 2
6152: PUSH
6153: LD_LOC 4
6157: PUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_LOC 4
6165: PPUSH
6166: CALL_OW 12
6170: ARRAY
6171: ST_TO_ADDR
// shipment1 := shipment1 diff [ q ] ;
6172: LD_ADDR_LOC 4
6176: PUSH
6177: LD_LOC 4
6181: PUSH
6182: LD_VAR 0 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: DIFF
6190: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
6191: LD_INT 5
6193: PPUSH
6194: LD_VAR 0 2
6198: PPUSH
6199: LD_INT 1
6201: PPUSH
6202: CALL_OW 55
// end ; enable ;
6206: ENABLE
// end ;
6207: PPOPN 2
6209: END
// every 0 0$5 + 0 0$1.1 marked 45 do var d , q ;
6210: GO 6212
6212: DISABLE
6213: LD_INT 0
6215: PPUSH
6216: PPUSH
// begin case tick of 1 .. 1 1$0 :
6217: LD_OWVAR 1
6221: PUSH
6222: LD_INT 1
6224: DOUBLE
6225: GREATEREQUAL
6226: IFFALSE 6234
6228: LD_INT 2100
6230: DOUBLE
6231: LESSEQUAL
6232: IFTRUE 6236
6234: GO 6247
6236: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
6237: LD_ADDR_VAR 0 1
6241: PUSH
6242: LD_INT 150
6244: ST_TO_ADDR
6245: GO 6430
6247: LD_INT 2100
6249: PUSH
6250: LD_INT 1
6252: PLUS
6253: DOUBLE
6254: GREATEREQUAL
6255: IFFALSE 6263
6257: LD_INT 10500
6259: DOUBLE
6260: LESSEQUAL
6261: IFTRUE 6265
6263: GO 6276
6265: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 100
6273: ST_TO_ADDR
6274: GO 6430
6276: LD_INT 10500
6278: PUSH
6279: LD_INT 1
6281: PLUS
6282: DOUBLE
6283: GREATEREQUAL
6284: IFFALSE 6292
6286: LD_INT 21000
6288: DOUBLE
6289: LESSEQUAL
6290: IFTRUE 6294
6292: GO 6305
6294: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
6295: LD_ADDR_VAR 0 1
6299: PUSH
6300: LD_INT 90
6302: ST_TO_ADDR
6303: GO 6430
6305: LD_INT 21000
6307: PUSH
6308: LD_INT 1
6310: PLUS
6311: DOUBLE
6312: GREATEREQUAL
6313: IFFALSE 6321
6315: LD_INT 42000
6317: DOUBLE
6318: LESSEQUAL
6319: IFTRUE 6323
6321: GO 6334
6323: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
6324: LD_ADDR_VAR 0 1
6328: PUSH
6329: LD_INT 70
6331: ST_TO_ADDR
6332: GO 6430
6334: LD_INT 42000
6336: PUSH
6337: LD_INT 1
6339: PLUS
6340: DOUBLE
6341: GREATEREQUAL
6342: IFFALSE 6350
6344: LD_INT 63000
6346: DOUBLE
6347: LESSEQUAL
6348: IFTRUE 6352
6350: GO 6363
6352: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
6353: LD_ADDR_VAR 0 1
6357: PUSH
6358: LD_INT 60
6360: ST_TO_ADDR
6361: GO 6430
6363: LD_INT 63000
6365: PUSH
6366: LD_INT 1
6368: PLUS
6369: DOUBLE
6370: GREATEREQUAL
6371: IFFALSE 6379
6373: LD_INT 105000
6375: DOUBLE
6376: LESSEQUAL
6377: IFTRUE 6381
6379: GO 6392
6381: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
6382: LD_ADDR_VAR 0 1
6386: PUSH
6387: LD_INT 35
6389: ST_TO_ADDR
6390: GO 6430
6392: LD_INT 105000
6394: PUSH
6395: LD_INT 1
6397: PLUS
6398: DOUBLE
6399: GREATEREQUAL
6400: IFFALSE 6408
6402: LD_INT 630000
6404: DOUBLE
6405: LESSEQUAL
6406: IFTRUE 6410
6408: GO 6421
6410: POP
// d := 20 ; else
6411: LD_ADDR_VAR 0 1
6415: PUSH
6416: LD_INT 20
6418: ST_TO_ADDR
6419: GO 6430
6421: POP
// d := 0 ; end ;
6422: LD_ADDR_VAR 0 1
6426: PUSH
6427: LD_INT 0
6429: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 10000
6435: PPUSH
6436: CALL_OW 12
6440: PUSH
6441: LD_VAR 0 1
6445: PUSH
6446: LD_EXP 19
6450: MUL
6451: PUSH
6452: LD_INT 2
6454: DIV
6455: LESSEQUAL
6456: IFFALSE 6579
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6458: LD_INT 1
6460: PPUSH
6461: LD_INT 140
6463: PPUSH
6464: CALL_OW 12
6468: PPUSH
6469: CALL_OW 67
// if shipment2 = [ ] then
6473: LD_LOC 5
6477: PUSH
6478: EMPTY
6479: EQUAL
6480: IFFALSE 6521
// shipment2 := [ q1a , q2a , q3a , q4a , q1b , q2b , q3b , q4b ] ;
6482: LD_ADDR_LOC 5
6486: PUSH
6487: LD_INT 7
6489: PUSH
6490: LD_INT 8
6492: PUSH
6493: LD_INT 9
6495: PUSH
6496: LD_INT 10
6498: PUSH
6499: LD_INT 11
6501: PUSH
6502: LD_INT 12
6504: PUSH
6505: LD_INT 13
6507: PUSH
6508: LD_INT 14
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: ST_TO_ADDR
// q := shipment2 [ Rand ( 1 , shipment2 ) ] ;
6521: LD_ADDR_VAR 0 2
6525: PUSH
6526: LD_LOC 5
6530: PUSH
6531: LD_INT 1
6533: PPUSH
6534: LD_LOC 5
6538: PPUSH
6539: CALL_OW 12
6543: ARRAY
6544: ST_TO_ADDR
// shipment2 := shipment2 diff [ q ] ;
6545: LD_ADDR_LOC 5
6549: PUSH
6550: LD_LOC 5
6554: PUSH
6555: LD_VAR 0 2
6559: PUSH
6560: EMPTY
6561: LIST
6562: DIFF
6563: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
6564: LD_INT 5
6566: PPUSH
6567: LD_VAR 0 2
6571: PPUSH
6572: LD_INT 1
6574: PPUSH
6575: CALL_OW 55
// end ; enable ;
6579: ENABLE
// end ; end_of_file
6580: PPOPN 2
6582: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6583: LD_INT 0
6585: PPUSH
6586: PPUSH
// for un in battle_flags_id do
6587: LD_ADDR_VAR 0 2
6591: PUSH
6592: LD_EXP 48
6596: PUSH
6597: FOR_IN
6598: IFFALSE 6673
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6600: LD_VAR 0 2
6604: PPUSH
6605: LD_INT 1
6607: PUSH
6608: LD_LOC 8
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: LD_INT 2
6619: PUSH
6620: LD_LOC 8
6624: PUSH
6625: LD_INT 2
6627: DIV
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 3
6635: PUSH
6636: LD_LOC 8
6640: PUSH
6641: LD_INT 5
6643: DIV
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 20
6651: PUSH
6652: LD_LOC 8
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: PPUSH
6667: CALL_OW 423
6671: GO 6597
6673: POP
6674: POP
// end ;
6675: LD_VAR 0 1
6679: RET
// every 0 0$0.1 marked 45 do var un ;
6680: GO 6682
6682: DISABLE
6683: LD_INT 0
6685: PPUSH
// begin if not def_morale_flags then
6686: LD_EXP 8
6690: NOT
6691: IFFALSE 6695
// exit ;
6693: GO 6772
// if not morale_decreasing_time then
6695: LD_EXP 20
6699: NOT
6700: IFFALSE 6704
// exit ;
6702: GO 6772
// strength = 100 ;
6704: LD_ADDR_LOC 8
6708: PUSH
6709: LD_INT 100
6711: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6712: LD_EXP 20
6716: PPUSH
6717: CALL_OW 67
// strength := strength - 1 ;
6721: LD_ADDR_LOC 8
6725: PUSH
6726: LD_LOC 8
6730: PUSH
6731: LD_INT 1
6733: MINUS
6734: ST_TO_ADDR
// Update_Flags ;
6735: CALL 6583 0 0
// until not strength ;
6739: LD_LOC 8
6743: NOT
6744: IFFALSE 6712
// for un in battle_flags_id do
6746: LD_ADDR_VAR 0 1
6750: PUSH
6751: LD_EXP 48
6755: PUSH
6756: FOR_IN
6757: IFFALSE 6770
// KillBattleFlag ( un ) ;
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 419
6768: GO 6756
6770: POP
6771: POP
// end ;
6772: PPOPN 1
6774: END
// every 0 0$1 marked 44 do var l1 , l2 ;
6775: GO 6777
6777: DISABLE
6778: LD_INT 0
6780: PPUSH
6781: PPUSH
// begin if not ( game_type in [ 11 , 12 ] ) then
6782: LD_EXP 1
6786: PUSH
6787: LD_INT 11
6789: PUSH
6790: LD_INT 12
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: IN
6797: NOT
6798: IFFALSE 6802
// exit ;
6800: GO 7208
// if not your_side then
6802: LD_OWVAR 2
6806: NOT
6807: IFFALSE 6812
// begin enable ;
6809: ENABLE
// exit ;
6810: GO 7208
// end ; l1 := UnitFilter ( sci1 , [ f_alive ] ) ;
6812: LD_ADDR_VAR 0 1
6816: PUSH
6817: LD_EXP 28
6821: PPUSH
6822: LD_INT 51
6824: PUSH
6825: EMPTY
6826: LIST
6827: PPUSH
6828: CALL_OW 72
6832: ST_TO_ADDR
// l2 := UnitFilter ( sci2 , [ f_alive ] ) ;
6833: LD_ADDR_VAR 0 2
6837: PUSH
6838: LD_EXP 29
6842: PPUSH
6843: LD_INT 51
6845: PUSH
6846: EMPTY
6847: LIST
6848: PPUSH
6849: CALL_OW 72
6853: ST_TO_ADDR
// if not l1 and not l2 then
6854: LD_VAR 0 1
6858: NOT
6859: PUSH
6860: LD_VAR 0 2
6864: NOT
6865: AND
6866: IFFALSE 6883
// begin wait ( 0 0$3 ) ;
6868: LD_INT 105
6870: PPUSH
6871: CALL_OW 67
// YouLostInMultiplayer ;
6875: CALL_OW 107
// exit ;
6879: GO 7208
// end else
6881: GO 7207
// if not l1 then
6883: LD_VAR 0 1
6887: NOT
6888: IFFALSE 6960
// begin if Side_teams [ your_side ] = 1 then
6890: LD_EXP 34
6894: PUSH
6895: LD_OWVAR 2
6899: ARRAY
6900: PUSH
6901: LD_INT 1
6903: EQUAL
6904: IFFALSE 6933
// begin CenterOnXY ( lastxlost , lastylost ) ;
6906: LD_LOC 11
6910: PPUSH
6911: LD_LOC 12
6915: PPUSH
6916: CALL_OW 84
// wait ( 0 0$3 ) ;
6920: LD_INT 105
6922: PPUSH
6923: CALL_OW 67
// YouLostInMultiplayer ;
6927: CALL_OW 107
// end else
6931: GO 6958
// begin CenterOnXY ( lastxwin , lastywin ) ;
6933: LD_LOC 9
6937: PPUSH
6938: LD_LOC 10
6942: PPUSH
6943: CALL_OW 84
// wait ( 0 0$3 ) ;
6947: LD_INT 105
6949: PPUSH
6950: CALL_OW 67
// YouWinInMultiplayer ;
6954: CALL_OW 106
// end end else
6958: GO 7207
// if not l2 then
6960: LD_VAR 0 2
6964: NOT
6965: IFFALSE 7037
// begin if Side_teams [ your_side ] = 2 then
6967: LD_EXP 34
6971: PUSH
6972: LD_OWVAR 2
6976: ARRAY
6977: PUSH
6978: LD_INT 2
6980: EQUAL
6981: IFFALSE 7010
// begin CenterOnXY ( lastxlost , lastylost ) ;
6983: LD_LOC 11
6987: PPUSH
6988: LD_LOC 12
6992: PPUSH
6993: CALL_OW 84
// wait ( 0 0$3 ) ;
6997: LD_INT 105
6999: PPUSH
7000: CALL_OW 67
// YouLostInMultiplayer ;
7004: CALL_OW 107
// end else
7008: GO 7035
// begin CenterOnXY ( lastxwin , lastywin ) ;
7010: LD_LOC 9
7014: PPUSH
7015: LD_LOC 10
7019: PPUSH
7020: CALL_OW 84
// wait ( 0 0$3 ) ;
7024: LD_INT 105
7026: PPUSH
7027: CALL_OW 67
// YouWinInMultiplayer ;
7031: CALL_OW 106
// end end else
7035: GO 7207
// if Side_teams [ your_side ] = 1 then
7037: LD_EXP 34
7041: PUSH
7042: LD_OWVAR 2
7046: ARRAY
7047: PUSH
7048: LD_INT 1
7050: EQUAL
7051: IFFALSE 7131
// begin lastxwin := GetX ( l2 [ 1 ] ) ;
7053: LD_ADDR_LOC 9
7057: PUSH
7058: LD_VAR 0 2
7062: PUSH
7063: LD_INT 1
7065: ARRAY
7066: PPUSH
7067: CALL_OW 250
7071: ST_TO_ADDR
// lastywin := GetY ( l2 [ 1 ] ) ;
7072: LD_ADDR_LOC 10
7076: PUSH
7077: LD_VAR 0 2
7081: PUSH
7082: LD_INT 1
7084: ARRAY
7085: PPUSH
7086: CALL_OW 251
7090: ST_TO_ADDR
// lastxlost := GetX ( l1 [ 1 ] ) ;
7091: LD_ADDR_LOC 11
7095: PUSH
7096: LD_VAR 0 1
7100: PUSH
7101: LD_INT 1
7103: ARRAY
7104: PPUSH
7105: CALL_OW 250
7109: ST_TO_ADDR
// lastylost := GetY ( l1 [ 1 ] ) ;
7110: LD_ADDR_LOC 12
7114: PUSH
7115: LD_VAR 0 1
7119: PUSH
7120: LD_INT 1
7122: ARRAY
7123: PPUSH
7124: CALL_OW 251
7128: ST_TO_ADDR
// end else
7129: GO 7207
// begin lastxwin := GetX ( l1 [ 1 ] ) ;
7131: LD_ADDR_LOC 9
7135: PUSH
7136: LD_VAR 0 1
7140: PUSH
7141: LD_INT 1
7143: ARRAY
7144: PPUSH
7145: CALL_OW 250
7149: ST_TO_ADDR
// lastywin := GetY ( l1 [ 1 ] ) ;
7150: LD_ADDR_LOC 10
7154: PUSH
7155: LD_VAR 0 1
7159: PUSH
7160: LD_INT 1
7162: ARRAY
7163: PPUSH
7164: CALL_OW 251
7168: ST_TO_ADDR
// lastxlost := GetX ( l2 [ 1 ] ) ;
7169: LD_ADDR_LOC 11
7173: PUSH
7174: LD_VAR 0 2
7178: PUSH
7179: LD_INT 1
7181: ARRAY
7182: PPUSH
7183: CALL_OW 250
7187: ST_TO_ADDR
// lastylost := GetY ( l2 [ 1 ] ) ;
7188: LD_ADDR_LOC 12
7192: PUSH
7193: LD_VAR 0 2
7197: PUSH
7198: LD_INT 1
7200: ARRAY
7201: PPUSH
7202: CALL_OW 251
7206: ST_TO_ADDR
// end ; enable ;
7207: ENABLE
// end ;
7208: PPOPN 2
7210: END
// every 0 0$2 marked 44 do var win , i ;
7211: GO 7213
7213: DISABLE
7214: LD_INT 0
7216: PPUSH
7217: PPUSH
// begin if game_type in [ 11 , 12 ] then
7218: LD_EXP 1
7222: PUSH
7223: LD_INT 11
7225: PUSH
7226: LD_INT 12
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: IN
7233: IFFALSE 7237
// exit ;
7235: GO 7491
// if your_side then
7237: LD_OWVAR 2
7241: IFFALSE 7490
// begin if not filterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
7243: LD_INT 22
7245: PUSH
7246: LD_OWVAR 2
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 2
7257: PUSH
7258: LD_INT 21
7260: PUSH
7261: LD_INT 1
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: LD_INT 30
7270: PUSH
7271: LD_INT 0
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 30
7280: PUSH
7281: LD_INT 1
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PPUSH
7298: CALL_OW 69
7302: NOT
7303: IFFALSE 7333
// begin wait ( 0 0$3 ) ;
7305: LD_INT 105
7307: PPUSH
7308: CALL_OW 67
// if IAmServer then
7312: CALL_OW 518
7316: IFFALSE 7325
// wait ( 0 0$1 ) ;
7318: LD_INT 35
7320: PPUSH
7321: CALL_OW 67
// YouLostInMultiplayer ;
7325: CALL_OW 107
// exit ;
7329: GO 7491
// end else
7331: GO 7490
// begin win := true ;
7333: LD_ADDR_VAR 0 1
7337: PUSH
7338: LD_INT 1
7340: ST_TO_ADDR
// for i := 1 to Side_positions do
7341: LD_ADDR_VAR 0 2
7345: PUSH
7346: DOUBLE
7347: LD_INT 1
7349: DEC
7350: ST_TO_ADDR
7351: LD_EXP 37
7355: PUSH
7356: FOR_TO
7357: IFFALSE 7441
// if Side_positions [ i ] and ( i <> your_side ) then
7359: LD_EXP 37
7363: PUSH
7364: LD_VAR 0 2
7368: ARRAY
7369: PUSH
7370: LD_VAR 0 2
7374: PUSH
7375: LD_OWVAR 2
7379: NONEQUAL
7380: AND
7381: IFFALSE 7439
// begin if MultiplayerSideAlive ( i ) then
7383: LD_VAR 0 2
7387: PPUSH
7388: CALL_OW 108
7392: IFFALSE 7439
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7394: LD_EXP 34
7398: PUSH
7399: LD_VAR 0 2
7403: ARRAY
7404: NOT
7405: PUSH
7406: LD_EXP 34
7410: PUSH
7411: LD_VAR 0 2
7415: ARRAY
7416: PUSH
7417: LD_EXP 34
7421: PUSH
7422: LD_OWVAR 2
7426: ARRAY
7427: NONEQUAL
7428: OR
7429: IFFALSE 7439
// win := false ;
7431: LD_ADDR_VAR 0 1
7435: PUSH
7436: LD_INT 0
7438: ST_TO_ADDR
// end ;
7439: GO 7356
7441: POP
7442: POP
// if win then
7443: LD_VAR 0 1
7447: IFFALSE 7490
// begin wait ( 0 0$3 ) ;
7449: LD_INT 105
7451: PPUSH
7452: CALL_OW 67
// if IAmServer then
7456: CALL_OW 518
7460: IFFALSE 7469
// wait ( 0 0$1 ) ;
7462: LD_INT 35
7464: PPUSH
7465: CALL_OW 67
// SA_Win ( Side_Nations [ Your_side ] ) ;
7469: LD_EXP 38
7473: PUSH
7474: LD_OWVAR 2
7478: ARRAY
7479: PPUSH
7480: CALL 10239 0 1
// YouWinInMultiplayer ;
7484: CALL_OW 106
// exit ;
7488: GO 7491
// end ; end ; end ; enable ;
7490: ENABLE
// end ; end_of_file
7491: PPOPN 2
7493: END
// every 10 do
7494: GO 7496
7496: DISABLE
// begin if not multiplayer then
7497: LD_OWVAR 4
7501: NOT
7502: IFFALSE 7506
// exit ;
7504: GO 7563
// if ( tick >= 100 ) then
7506: LD_OWVAR 1
7510: PUSH
7511: LD_INT 100
7513: GREATEREQUAL
7514: IFFALSE 7534
// if tick mod 20 = 0 then
7516: LD_OWVAR 1
7520: PUSH
7521: LD_INT 20
7523: MOD
7524: PUSH
7525: LD_INT 0
7527: EQUAL
7528: IFFALSE 7534
// MultiplayerCRC ;
7530: CALL_OW 361
// if ( tick >= 100 ) then
7534: LD_OWVAR 1
7538: PUSH
7539: LD_INT 100
7541: GREATEREQUAL
7542: IFFALSE 7562
// if tick mod 30 = 0 then
7544: LD_OWVAR 1
7548: PUSH
7549: LD_INT 30
7551: MOD
7552: PUSH
7553: LD_INT 0
7555: EQUAL
7556: IFFALSE 7562
// DebugLogAll ;
7558: CALL_OW 360
// enable ;
7562: ENABLE
// end ; end_of_file
7563: END
// export function DE_Triggers ; begin
7564: LD_INT 0
7566: PPUSH
// disable ( 44 ) ;
7567: LD_INT 44
7569: DISABLE_MARKED
// disable ( 45 ) ;
7570: LD_INT 45
7572: DISABLE_MARKED
// disable ( 98 ) ;
7573: LD_INT 98
7575: DISABLE_MARKED
// disable ( 99 ) ;
7576: LD_INT 99
7578: DISABLE_MARKED
// end ;
7579: LD_VAR 0 1
7583: RET
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7584: LD_VAR 0 1
7588: PPUSH
7589: LD_VAR 0 2
7593: PPUSH
7594: LD_VAR 0 3
7598: PPUSH
7599: LD_OWVAR 2
7603: PPUSH
7604: CALL 10197 0 4
7608: PPOPN 3
7610: END
// export function Init_Win_Condition ; begin
7611: LD_INT 0
7613: PPUSH
// if Team_Game then
7614: LD_EXP 42
7618: IFFALSE 7625
// enable ( 98 ) else
7620: LD_INT 98
7622: ENABLE_MARKED
7623: GO 7628
// enable ( 99 ) ;
7625: LD_INT 99
7627: ENABLE_MARKED
// end ;
7628: LD_VAR 0 1
7632: RET
// every 0 0$2 marked 98 do var win , i ;
7633: GO 7635
7635: DISABLE
7636: LD_INT 0
7638: PPUSH
7639: PPUSH
// begin if your_side then
7640: LD_OWVAR 2
7644: IFFALSE 7852
// if not FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
7646: LD_INT 22
7648: PUSH
7649: LD_OWVAR 2
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 2
7660: PUSH
7661: LD_INT 21
7663: PUSH
7664: LD_INT 1
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 30
7673: PUSH
7674: LD_INT 0
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 30
7683: PUSH
7684: LD_INT 1
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PPUSH
7701: CALL_OW 69
7705: NOT
7706: IFFALSE 7723
// begin wait ( 0 0$3 ) ;
7708: LD_INT 105
7710: PPUSH
7711: CALL_OW 67
// YouLostInMultiplayer ;
7715: CALL_OW 107
// exit ;
7719: GO 7853
// end else
7721: GO 7852
// begin win := true ;
7723: LD_ADDR_VAR 0 1
7727: PUSH
7728: LD_INT 1
7730: ST_TO_ADDR
// for i = 1 to Side_positions do
7731: LD_ADDR_VAR 0 2
7735: PUSH
7736: DOUBLE
7737: LD_INT 1
7739: DEC
7740: ST_TO_ADDR
7741: LD_EXP 37
7745: PUSH
7746: FOR_TO
7747: IFFALSE 7831
// if Side_positions [ i ] and ( i <> your_side ) and MultiplayerSideAlive ( i ) then
7749: LD_EXP 37
7753: PUSH
7754: LD_VAR 0 2
7758: ARRAY
7759: PUSH
7760: LD_VAR 0 2
7764: PUSH
7765: LD_OWVAR 2
7769: NONEQUAL
7770: AND
7771: PUSH
7772: LD_VAR 0 2
7776: PPUSH
7777: CALL_OW 108
7781: AND
7782: IFFALSE 7829
// begin if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7784: LD_EXP 34
7788: PUSH
7789: LD_VAR 0 2
7793: ARRAY
7794: NOT
7795: PUSH
7796: LD_EXP 34
7800: PUSH
7801: LD_VAR 0 2
7805: ARRAY
7806: PUSH
7807: LD_EXP 34
7811: PUSH
7812: LD_OWVAR 2
7816: ARRAY
7817: NONEQUAL
7818: OR
7819: IFFALSE 7829
// win := false ;
7821: LD_ADDR_VAR 0 1
7825: PUSH
7826: LD_INT 0
7828: ST_TO_ADDR
// end ;
7829: GO 7746
7831: POP
7832: POP
// if win then
7833: LD_VAR 0 1
7837: IFFALSE 7852
// begin wait ( 0 0$3 ) ;
7839: LD_INT 105
7841: PPUSH
7842: CALL_OW 67
// YouWinInMultiplayer ;
7846: CALL_OW 106
// exit ;
7850: GO 7853
// end ; end ; enable ;
7852: ENABLE
// end ;
7853: PPOPN 2
7855: END
// every 0 0$3 marked 99 do var win , i ;
7856: GO 7858
7858: DISABLE
7859: LD_INT 0
7861: PPUSH
7862: PPUSH
// begin if not FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
7863: LD_INT 22
7865: PUSH
7866: LD_OWVAR 2
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: LD_INT 2
7877: PUSH
7878: LD_INT 21
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 30
7890: PUSH
7891: LD_INT 0
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PUSH
7898: LD_INT 30
7900: PUSH
7901: LD_INT 1
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PPUSH
7918: CALL_OW 69
7922: NOT
7923: IFFALSE 7940
// begin wait ( 0 0$3 ) ;
7925: LD_INT 105
7927: PPUSH
7928: CALL_OW 67
// YouLostInMultiplayer ;
7932: CALL_OW 107
// exit ;
7936: GO 8050
// end else
7938: GO 8049
// begin win := true ;
7940: LD_ADDR_VAR 0 1
7944: PUSH
7945: LD_INT 1
7947: ST_TO_ADDR
// for i = 1 to Side_Positions do
7948: LD_ADDR_VAR 0 2
7952: PUSH
7953: DOUBLE
7954: LD_INT 1
7956: DEC
7957: ST_TO_ADDR
7958: LD_EXP 37
7962: PUSH
7963: FOR_TO
7964: IFFALSE 8028
// if Side_Positions [ i ] and ( i <> your_side ) and MultiplayerSideAlive ( i ) then
7966: LD_EXP 37
7970: PUSH
7971: LD_VAR 0 2
7975: ARRAY
7976: PUSH
7977: LD_VAR 0 2
7981: PUSH
7982: LD_OWVAR 2
7986: NONEQUAL
7987: AND
7988: PUSH
7989: LD_VAR 0 2
7993: PPUSH
7994: CALL_OW 108
7998: AND
7999: IFFALSE 8026
// if not AlliedSides ( i , your_side ) then
8001: LD_VAR 0 2
8005: PPUSH
8006: LD_OWVAR 2
8010: PPUSH
8011: CALL 8053 0 2
8015: NOT
8016: IFFALSE 8026
// win := false ;
8018: LD_ADDR_VAR 0 1
8022: PUSH
8023: LD_INT 0
8025: ST_TO_ADDR
8026: GO 7963
8028: POP
8029: POP
// if win then
8030: LD_VAR 0 1
8034: IFFALSE 8049
// begin wait ( 0 0$3 ) ;
8036: LD_INT 105
8038: PPUSH
8039: CALL_OW 67
// YouWinInMultiplayer ;
8043: CALL_OW 106
// exit ;
8047: GO 8050
// end ; end ; enable ;
8049: ENABLE
// end ;
8050: PPOPN 2
8052: END
// function AlliedSides ( i , j ) ; var vysledek ; begin
8053: LD_INT 0
8055: PPUSH
8056: PPUSH
// vysledek := false ;
8057: LD_ADDR_VAR 0 4
8061: PUSH
8062: LD_INT 0
8064: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8065: LD_VAR 0 1
8069: PPUSH
8070: LD_VAR 0 2
8074: PPUSH
8075: CALL_OW 81
8079: PUSH
8080: LD_INT 1
8082: EQUAL
8083: PUSH
8084: LD_VAR 0 2
8088: PPUSH
8089: LD_VAR 0 1
8093: PPUSH
8094: CALL_OW 81
8098: PUSH
8099: LD_INT 1
8101: EQUAL
8102: AND
8103: PUSH
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 83
8113: AND
8114: PUSH
8115: LD_VAR 0 2
8119: PPUSH
8120: CALL_OW 83
8124: AND
8125: IFFALSE 8135
// vysledek := true ;
8127: LD_ADDR_VAR 0 4
8131: PUSH
8132: LD_INT 1
8134: ST_TO_ADDR
// result := vysledek ;
8135: LD_ADDR_VAR 0 3
8139: PUSH
8140: LD_VAR 0 4
8144: ST_TO_ADDR
// end ; end_of_file
8145: LD_VAR 0 3
8149: RET
// export function DisplayNames ; var i ; begin
8150: LD_INT 0
8152: PPUSH
8153: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
8154: LD_ADDR_VAR 0 2
8158: PUSH
8159: LD_INT 2
8161: PUSH
8162: LD_INT 30
8164: PUSH
8165: LD_INT 0
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PUSH
8172: LD_INT 30
8174: PUSH
8175: LD_INT 1
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: LIST
8186: PPUSH
8187: CALL_OW 69
8191: PUSH
8192: FOR_IN
8193: IFFALSE 8220
// SetBName ( i , @ & GetSide ( i ) ) ;
8195: LD_VAR 0 2
8199: PPUSH
8200: LD_STRING @
8202: PUSH
8203: LD_VAR 0 2
8207: PPUSH
8208: CALL_OW 255
8212: STR
8213: PPUSH
8214: CALL_OW 500
8218: GO 8192
8220: POP
8221: POP
// end ;
8222: LD_VAR 0 1
8226: RET
// every 0 0$2 do
8227: GO 8229
8229: DISABLE
// DisplayNames ;
8230: CALL 8150 0 0
8234: END
// on BuildingComplete ( b ) do DisplayNames ;
8235: CALL 8150 0 0
8239: PPOPN 1
8241: END
// on BuildingStarted ( b , h ) do DisplayNames ;
8242: CALL 8150 0 0
8246: PPOPN 2
8248: END
// on BuildingCaptured ( b , o , e ) do DisplayNames ; end_of_file
8249: CALL 8150 0 0
8253: PPOPN 3
8255: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
8256: LD_INT 0
8258: PPUSH
8259: PPUSH
// AllStrings := [ #gamespeed , game_speed - 4 ] ^ [ #Multi1x1-Time , tick ] ;
8260: LD_ADDR_VAR 0 2
8264: PUSH
8265: LD_STRING #gamespeed
8267: PUSH
8268: LD_OWVAR 65
8272: PUSH
8273: LD_INT 4
8275: MINUS
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_STRING #Multi1x1-Time
8283: PUSH
8284: LD_OWVAR 1
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: ADD
8293: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8294: LD_INT 0
8296: PUSH
8297: LD_EXP 25
8301: PUSH
8302: LD_OWVAR 1
8306: MINUS
8307: LESSEQUAL
8308: IFFALSE 8339
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8310: LD_ADDR_VAR 0 2
8314: PUSH
8315: LD_VAR 0 2
8319: PUSH
8320: LD_STRING #allowedsibbomb
8322: PUSH
8323: LD_EXP 25
8327: PUSH
8328: LD_OWVAR 1
8332: MINUS
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: ADD
8338: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8339: LD_INT 0
8341: PUSH
8342: LD_EXP 52
8346: PUSH
8347: LD_OWVAR 1
8351: MINUS
8352: LESSEQUAL
8353: IFFALSE 8384
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
8355: LD_ADDR_VAR 0 2
8359: PUSH
8360: LD_VAR 0 2
8364: PUSH
8365: LD_STRING #builduptime
8367: PUSH
8368: LD_EXP 52
8372: PUSH
8373: LD_OWVAR 1
8377: MINUS
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: ADD
8383: ST_TO_ADDR
// Display_Strings := AllStrings ;
8384: LD_ADDR_OWVAR 47
8388: PUSH
8389: LD_VAR 0 2
8393: ST_TO_ADDR
// end ;
8394: LD_VAR 0 1
8398: RET
// every 0 0$1 do
8399: GO 8401
8401: DISABLE
// begin ShowTimer ;
8402: CALL 8256 0 0
// enable ;
8406: ENABLE
// end ; end_of_file
8407: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
8408: LD_INT 0
8410: PPUSH
8411: PPUSH
8412: PPUSH
// BuildUpTime_Delay = 0 ;
8413: LD_ADDR_EXP 52
8417: PUSH
8418: LD_INT 0
8420: ST_TO_ADDR
// if not def_builduptime then
8421: LD_EXP 12
8425: NOT
8426: IFFALSE 8430
// exit ;
8428: GO 8613
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
8430: LD_ADDR_EXP 52
8434: PUSH
8435: LD_INT 8400
8437: PUSH
8438: LD_INT 2100
8440: PUSH
8441: LD_EXP 12
8445: MUL
8446: PLUS
8447: ST_TO_ADDR
// BuildUpTimeActive := true ;
8448: LD_ADDR_EXP 51
8452: PUSH
8453: LD_INT 1
8455: ST_TO_ADDR
// for i := 1 to 8 do
8456: LD_ADDR_VAR 0 2
8460: PUSH
8461: DOUBLE
8462: LD_INT 1
8464: DEC
8465: ST_TO_ADDR
8466: LD_INT 8
8468: PUSH
8469: FOR_TO
8470: IFFALSE 8611
// if Side_Positions [ i ] then
8472: LD_EXP 37
8476: PUSH
8477: LD_VAR 0 2
8481: ARRAY
8482: IFFALSE 8609
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
8484: LD_EXP 50
8488: PUSH
8489: LD_EXP 37
8493: PUSH
8494: LD_VAR 0 2
8498: ARRAY
8499: ARRAY
8500: PPUSH
8501: LD_INT 5
8503: PPUSH
8504: CALL_OW 424
// for j := 1 to 8 do
8508: LD_ADDR_VAR 0 3
8512: PUSH
8513: DOUBLE
8514: LD_INT 1
8516: DEC
8517: ST_TO_ADDR
8518: LD_INT 8
8520: PUSH
8521: FOR_TO
8522: IFFALSE 8607
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8524: LD_EXP 37
8528: PUSH
8529: LD_VAR 0 3
8533: ARRAY
8534: PUSH
8535: LD_EXP 34
8539: PUSH
8540: LD_VAR 0 2
8544: ARRAY
8545: PUSH
8546: LD_EXP 34
8550: PUSH
8551: LD_VAR 0 3
8555: ARRAY
8556: NONEQUAL
8557: PUSH
8558: LD_EXP 42
8562: NOT
8563: PUSH
8564: LD_VAR 0 2
8568: PUSH
8569: LD_VAR 0 3
8573: NONEQUAL
8574: AND
8575: OR
8576: AND
8577: IFFALSE 8605
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8579: LD_VAR 0 3
8583: PPUSH
8584: LD_EXP 50
8588: PUSH
8589: LD_EXP 37
8593: PUSH
8594: LD_VAR 0 2
8598: ARRAY
8599: ARRAY
8600: PPUSH
8601: CALL_OW 333
8605: GO 8521
8607: POP
8608: POP
// end ;
8609: GO 8469
8611: POP
8612: POP
// end ;
8613: LD_VAR 0 1
8617: RET
// export function EndBuildUp ; var i , j ; begin
8618: LD_INT 0
8620: PPUSH
8621: PPUSH
8622: PPUSH
// BuildUpTimeActive := false ;
8623: LD_ADDR_EXP 51
8627: PUSH
8628: LD_INT 0
8630: ST_TO_ADDR
// for i := 1 to 8 do
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: DOUBLE
8637: LD_INT 1
8639: DEC
8640: ST_TO_ADDR
8641: LD_INT 8
8643: PUSH
8644: FOR_TO
8645: IFFALSE 8786
// if Side_Positions [ i ] then
8647: LD_EXP 37
8651: PUSH
8652: LD_VAR 0 2
8656: ARRAY
8657: IFFALSE 8784
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
8659: LD_EXP 50
8663: PUSH
8664: LD_EXP 37
8668: PUSH
8669: LD_VAR 0 2
8673: ARRAY
8674: ARRAY
8675: PPUSH
8676: LD_INT 0
8678: PPUSH
8679: CALL_OW 424
// for j := 1 to 8 do
8683: LD_ADDR_VAR 0 3
8687: PUSH
8688: DOUBLE
8689: LD_INT 1
8691: DEC
8692: ST_TO_ADDR
8693: LD_INT 8
8695: PUSH
8696: FOR_TO
8697: IFFALSE 8782
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8699: LD_EXP 37
8703: PUSH
8704: LD_VAR 0 3
8708: ARRAY
8709: PUSH
8710: LD_EXP 34
8714: PUSH
8715: LD_VAR 0 2
8719: ARRAY
8720: PUSH
8721: LD_EXP 34
8725: PUSH
8726: LD_VAR 0 3
8730: ARRAY
8731: NONEQUAL
8732: PUSH
8733: LD_EXP 42
8737: NOT
8738: PUSH
8739: LD_VAR 0 2
8743: PUSH
8744: LD_VAR 0 3
8748: NONEQUAL
8749: AND
8750: OR
8751: AND
8752: IFFALSE 8780
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8754: LD_VAR 0 3
8758: PPUSH
8759: LD_EXP 50
8763: PUSH
8764: LD_EXP 37
8768: PUSH
8769: LD_VAR 0 2
8773: ARRAY
8774: ARRAY
8775: PPUSH
8776: CALL_OW 334
8780: GO 8696
8782: POP
8783: POP
// end ;
8784: GO 8644
8786: POP
8787: POP
// end ;
8788: LD_VAR 0 1
8792: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
8793: LD_EXP 51
8797: IFFALSE 8972
8799: GO 8801
8801: DISABLE
8802: LD_INT 0
8804: PPUSH
8805: PPUSH
// begin for i := 1 to 8 do
8806: LD_ADDR_VAR 0 1
8810: PUSH
8811: DOUBLE
8812: LD_INT 1
8814: DEC
8815: ST_TO_ADDR
8816: LD_INT 8
8818: PUSH
8819: FOR_TO
8820: IFFALSE 8969
// if Side_Positions [ i ] then
8822: LD_EXP 37
8826: PUSH
8827: LD_VAR 0 1
8831: ARRAY
8832: IFFALSE 8967
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8834: LD_ADDR_VAR 0 2
8838: PUSH
8839: LD_EXP 50
8843: PUSH
8844: LD_EXP 37
8848: PUSH
8849: LD_VAR 0 1
8853: ARRAY
8854: ARRAY
8855: PPUSH
8856: LD_INT 2
8858: PUSH
8859: LD_INT 21
8861: PUSH
8862: LD_INT 1
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: LD_INT 21
8871: PUSH
8872: LD_INT 2
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: LIST
8883: PUSH
8884: LD_INT 22
8886: PUSH
8887: LD_OWVAR 2
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PPUSH
8900: CALL_OW 70
8904: PUSH
8905: FOR_IN
8906: IFFALSE 8965
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
8908: LD_EXP 34
8912: PUSH
8913: LD_VAR 0 1
8917: ARRAY
8918: PUSH
8919: LD_EXP 34
8923: PUSH
8924: LD_OWVAR 2
8928: ARRAY
8929: NONEQUAL
8930: PUSH
8931: LD_EXP 42
8935: NOT
8936: PUSH
8937: LD_VAR 0 1
8941: PUSH
8942: LD_OWVAR 2
8946: NONEQUAL
8947: AND
8948: OR
8949: IFFALSE 8963
// ComMoveToArea ( un , BuildUpEscape ) ;
8951: LD_VAR 0 2
8955: PPUSH
8956: LD_INT 19
8958: PPUSH
8959: CALL_OW 113
8963: GO 8905
8965: POP
8966: POP
8967: GO 8819
8969: POP
8970: POP
// enable ;
8971: ENABLE
// end ;
8972: PPOPN 2
8974: END
// every 0 0$1 trigger def_builduptime do
8975: LD_EXP 12
8979: IFFALSE 9005
8981: GO 8983
8983: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
8984: LD_INT 8400
8986: PUSH
8987: LD_EXP 12
8991: PUSH
8992: LD_INT 2100
8994: MUL
8995: PLUS
8996: PPUSH
8997: CALL_OW 67
// EndBuildUp ;
9001: CALL 8618 0 0
// end ; end_of_file
9005: END
// export ObnovCas , ObnovZpozdeni ; export function SetRespawningTime ( minBTime , maxBTime , MinDelay , MaxDelay ) ; var k ; begin
9006: LD_INT 0
9008: PPUSH
9009: PPUSH
// k = Rand ( minBTime , maxBTime ) ;
9010: LD_ADDR_VAR 0 6
9014: PUSH
9015: LD_VAR 0 1
9019: PPUSH
9020: LD_VAR 0 2
9024: PPUSH
9025: CALL_OW 12
9029: ST_TO_ADDR
// ObnovCas = [ k , k , k , k , k , k , k , k ] ;
9030: LD_ADDR_EXP 53
9034: PUSH
9035: LD_VAR 0 6
9039: PUSH
9040: LD_VAR 0 6
9044: PUSH
9045: LD_VAR 0 6
9049: PUSH
9050: LD_VAR 0 6
9054: PUSH
9055: LD_VAR 0 6
9059: PUSH
9060: LD_VAR 0 6
9064: PUSH
9065: LD_VAR 0 6
9069: PUSH
9070: LD_VAR 0 6
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: ST_TO_ADDR
// k = Rand ( minDelay , MaxDelay ) ;
9085: LD_ADDR_VAR 0 6
9089: PUSH
9090: LD_VAR 0 3
9094: PPUSH
9095: LD_VAR 0 4
9099: PPUSH
9100: CALL_OW 12
9104: ST_TO_ADDR
// ObnovZpozdeni = k ;
9105: LD_ADDR_EXP 54
9109: PUSH
9110: LD_VAR 0 6
9114: ST_TO_ADDR
// end ;
9115: LD_VAR 0 5
9119: RET
// export unit_list ; export function ObnovCloveka ( side , nation , restored ) ; var building_list , b , n , un , k , i , base_skills , speed , def ; begin
9120: LD_INT 0
9122: PPUSH
9123: PPUSH
9124: PPUSH
9125: PPUSH
9126: PPUSH
9127: PPUSH
9128: PPUSH
9129: PPUSH
9130: PPUSH
9131: PPUSH
// if ObnovCas [ side ] = 0 then
9132: LD_EXP 53
9136: PUSH
9137: LD_VAR 0 1
9141: ARRAY
9142: PUSH
9143: LD_INT 0
9145: EQUAL
9146: IFFALSE 9150
// exit ;
9148: GO 9775
// uc_nation := nation ;
9150: LD_ADDR_OWVAR 21
9154: PUSH
9155: LD_VAR 0 2
9159: ST_TO_ADDR
// uc_side := side ;
9160: LD_ADDR_OWVAR 20
9164: PUSH
9165: LD_VAR 0 1
9169: ST_TO_ADDR
// uc_direction := Rand ( 0 , 5 ) ;
9170: LD_ADDR_OWVAR 24
9174: PUSH
9175: LD_INT 0
9177: PPUSH
9178: LD_INT 5
9180: PPUSH
9181: CALL_OW 12
9185: ST_TO_ADDR
// if restored then
9186: LD_VAR 0 3
9190: IFFALSE 9273
// begin hc_class = GetClass ( restored ) ;
9192: LD_ADDR_OWVAR 28
9196: PUSH
9197: LD_VAR 0 3
9201: PPUSH
9202: CALL_OW 257
9206: ST_TO_ADDR
// hc_attr = [ GetAttr ( restored , attr_stamina ) , GetAttr ( restored , attr_speed ) ] ;
9207: LD_ADDR_OWVAR 29
9211: PUSH
9212: LD_VAR 0 3
9216: PPUSH
9217: LD_INT 1
9219: PPUSH
9220: CALL_OW 260
9224: PUSH
9225: LD_VAR 0 3
9229: PPUSH
9230: LD_INT 2
9232: PPUSH
9233: CALL_OW 260
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: ST_TO_ADDR
// if hc_class in [ class_sniper , class_bazooker , class_mortar ] then
9242: LD_OWVAR 28
9246: PUSH
9247: LD_INT 5
9249: PUSH
9250: LD_INT 9
9252: PUSH
9253: LD_INT 8
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: LIST
9260: IN
9261: IFFALSE 9271
// hc_class = class_soldier ;
9263: LD_ADDR_OWVAR 28
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
// end else
9271: GO 9282
// randomHumanStats ( initial_level ) ;
9273: LD_EXP 16
9277: PPUSH
9278: CALL 10706 0 1
// hc_importance := 0 ;
9282: LD_ADDR_OWVAR 32
9286: PUSH
9287: LD_INT 0
9289: ST_TO_ADDR
// hc_gallery :=  ;
9290: LD_ADDR_OWVAR 33
9294: PUSH
9295: LD_STRING 
9297: ST_TO_ADDR
// hc_face_number := 0 ;
9298: LD_ADDR_OWVAR 34
9302: PUSH
9303: LD_INT 0
9305: ST_TO_ADDR
// un := CreateHuman ;
9306: LD_ADDR_VAR 0 8
9310: PUSH
9311: CALL_OW 44
9315: ST_TO_ADDR
// if restored then
9316: LD_VAR 0 3
9320: IFFALSE 9336
// CopySkills ( restored , un ) ;
9322: LD_VAR 0 3
9326: PPUSH
9327: LD_VAR 0 8
9331: PPUSH
9332: CALL_OW 510
// k = ObnovCas [ side ] + ObnovZpozdeni ;
9336: LD_ADDR_VAR 0 9
9340: PUSH
9341: LD_EXP 53
9345: PUSH
9346: LD_VAR 0 1
9350: ARRAY
9351: PUSH
9352: LD_EXP 54
9356: PLUS
9357: ST_TO_ADDR
// ObnovCas = Replace ( ObnovCas , side , k ) ;
9358: LD_ADDR_EXP 53
9362: PUSH
9363: LD_EXP 53
9367: PPUSH
9368: LD_VAR 0 1
9372: PPUSH
9373: LD_VAR 0 9
9377: PPUSH
9378: CALL_OW 1
9382: ST_TO_ADDR
// wait ( ObnovCas [ side ] - ObnovZpozdeni ) ;
9383: LD_EXP 53
9387: PUSH
9388: LD_VAR 0 1
9392: ARRAY
9393: PUSH
9394: LD_EXP 54
9398: MINUS
9399: PPUSH
9400: CALL_OW 67
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] , [ f_nation , nation ] ] ) ;
9404: LD_ADDR_VAR 0 5
9408: PUSH
9409: LD_INT 21
9411: PUSH
9412: LD_INT 3
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: LD_INT 2
9421: PUSH
9422: LD_INT 30
9424: PUSH
9425: LD_INT 0
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 30
9434: PUSH
9435: LD_INT 1
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 50
9449: PUSH
9450: EMPTY
9451: LIST
9452: PUSH
9453: LD_INT 22
9455: PUSH
9456: LD_VAR 0 1
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 23
9467: PUSH
9468: LD_VAR 0 2
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 69
9488: ST_TO_ADDR
// if building_list = 0 then
9489: LD_VAR 0 5
9493: PUSH
9494: LD_INT 0
9496: EQUAL
9497: IFFALSE 9571
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] ] ) ;
9499: LD_ADDR_VAR 0 5
9503: PUSH
9504: LD_INT 21
9506: PUSH
9507: LD_INT 3
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PUSH
9514: LD_INT 2
9516: PUSH
9517: LD_INT 30
9519: PUSH
9520: LD_INT 0
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: LD_INT 30
9529: PUSH
9530: LD_INT 1
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 50
9544: PUSH
9545: EMPTY
9546: LIST
9547: PUSH
9548: LD_INT 22
9550: PUSH
9551: LD_VAR 0 1
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: PPUSH
9566: CALL_OW 69
9570: ST_TO_ADDR
// if building_list > 0 then
9571: LD_VAR 0 5
9575: PUSH
9576: LD_INT 0
9578: GREATER
9579: IFFALSE 9697
// begin b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
9581: LD_ADDR_VAR 0 6
9585: PUSH
9586: LD_VAR 0 5
9590: PUSH
9591: LD_INT 1
9593: PPUSH
9594: LD_VAR 0 5
9598: PUSH
9599: LD_INT 0
9601: PLUS
9602: PPUSH
9603: CALL_OW 12
9607: ARRAY
9608: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
9609: LD_VAR 0 6
9613: PPUSH
9614: CALL_OW 266
9618: PUSH
9619: LD_INT 0
9621: PUSH
9622: LD_INT 1
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: IN
9629: IFFALSE 9641
// n = 25 else
9631: LD_ADDR_VAR 0 7
9635: PUSH
9636: LD_INT 25
9638: ST_TO_ADDR
9639: GO 9649
// n = 10 ;
9641: LD_ADDR_VAR 0 7
9645: PUSH
9646: LD_INT 10
9648: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( b ) , GetY ( b ) , n , true ) ;
9649: LD_VAR 0 8
9653: PPUSH
9654: LD_VAR 0 6
9658: PPUSH
9659: CALL_OW 250
9663: PPUSH
9664: LD_VAR 0 6
9668: PPUSH
9669: CALL_OW 251
9673: PPUSH
9674: LD_VAR 0 7
9678: PPUSH
9679: LD_INT 1
9681: PPUSH
9682: CALL_OW 50
// OnHumanRespawned ( un ) ;
9686: LD_VAR 0 8
9690: PPUSH
9691: CALL 5237 0 1
// end else
9695: GO 9775
// begin unit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] ] ) ;
9697: LD_ADDR_EXP 55
9701: PUSH
9702: LD_INT 22
9704: PUSH
9705: LD_VAR 0 1
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PUSH
9714: LD_INT 50
9716: PUSH
9717: EMPTY
9718: LIST
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PPUSH
9724: CALL_OW 69
9728: ST_TO_ADDR
// if unit_list > 0 then
9729: LD_EXP 55
9733: PUSH
9734: LD_INT 0
9736: GREATER
9737: IFFALSE 9773
// begin ObnovOpozdilceCloveka ( un , side , k / 2 ) ;
9739: LD_VAR 0 8
9743: PPUSH
9744: LD_VAR 0 1
9748: PPUSH
9749: LD_VAR 0 9
9753: PUSH
9754: LD_INT 2
9756: DIVREAL
9757: PPUSH
9758: CALL 9780 0 3
// OnHumanRespawned ( un ) ;
9762: LD_VAR 0 8
9766: PPUSH
9767: CALL 5237 0 1
// end else
9771: GO 9775
// exit ;
9773: GO 9775
// end ; end ;
9775: LD_VAR 0 4
9779: RET
// function ObnovOpozdilceCloveka ( un , side , waitTime ) ; var building_list , n , unit_list , b ; begin
9780: LD_INT 0
9782: PPUSH
9783: PPUSH
9784: PPUSH
9785: PPUSH
9786: PPUSH
// wait ( waitTime ) ;
9787: LD_VAR 0 3
9791: PPUSH
9792: CALL_OW 67
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] , [ f_nation , GetNation ( un ) ] ] ) ;
9796: LD_ADDR_VAR 0 5
9800: PUSH
9801: LD_INT 21
9803: PUSH
9804: LD_INT 3
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 2
9813: PUSH
9814: LD_INT 30
9816: PUSH
9817: LD_INT 0
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: LD_INT 30
9826: PUSH
9827: LD_INT 1
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: LIST
9838: PUSH
9839: LD_INT 50
9841: PUSH
9842: EMPTY
9843: LIST
9844: PUSH
9845: LD_INT 22
9847: PUSH
9848: LD_VAR 0 2
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 23
9859: PUSH
9860: LD_VAR 0 1
9864: PPUSH
9865: CALL_OW 248
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: PPUSH
9881: CALL_OW 69
9885: ST_TO_ADDR
// if building_list = 0 then
9886: LD_VAR 0 5
9890: PUSH
9891: LD_INT 0
9893: EQUAL
9894: IFFALSE 9968
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , side ] ] ) ;
9896: LD_ADDR_VAR 0 5
9900: PUSH
9901: LD_INT 21
9903: PUSH
9904: LD_INT 3
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: LD_INT 2
9913: PUSH
9914: LD_INT 30
9916: PUSH
9917: LD_INT 0
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 30
9926: PUSH
9927: LD_INT 1
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 50
9941: PUSH
9942: EMPTY
9943: LIST
9944: PUSH
9945: LD_INT 22
9947: PUSH
9948: LD_VAR 0 2
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: PPUSH
9963: CALL_OW 69
9967: ST_TO_ADDR
// if building_list > 0 then
9968: LD_VAR 0 5
9972: PUSH
9973: LD_INT 0
9975: GREATER
9976: IFFALSE 10094
// begin b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
9978: LD_ADDR_VAR 0 8
9982: PUSH
9983: LD_VAR 0 5
9987: PUSH
9988: LD_INT 1
9990: PPUSH
9991: LD_VAR 0 5
9995: PUSH
9996: LD_INT 0
9998: PLUS
9999: PPUSH
10000: CALL_OW 12
10004: ARRAY
10005: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
10006: LD_VAR 0 8
10010: PPUSH
10011: CALL_OW 266
10015: PUSH
10016: LD_INT 0
10018: PUSH
10019: LD_INT 1
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: IN
10026: IFFALSE 10038
// n = 25 else
10028: LD_ADDR_VAR 0 6
10032: PUSH
10033: LD_INT 25
10035: ST_TO_ADDR
10036: GO 10046
// n = 10 ;
10038: LD_ADDR_VAR 0 6
10042: PUSH
10043: LD_INT 10
10045: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( b ) , GetY ( b ) , n , true ) ;
10046: LD_VAR 0 1
10050: PPUSH
10051: LD_VAR 0 8
10055: PPUSH
10056: CALL_OW 250
10060: PPUSH
10061: LD_VAR 0 8
10065: PPUSH
10066: CALL_OW 251
10070: PPUSH
10071: LD_VAR 0 6
10075: PPUSH
10076: LD_INT 1
10078: PPUSH
10079: CALL_OW 50
// OnHumanRespawned ( un ) ;
10083: LD_VAR 0 1
10087: PPUSH
10088: CALL 5237 0 1
// end else
10092: GO 10192
// begin unit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10094: LD_ADDR_VAR 0 7
10098: PUSH
10099: LD_INT 22
10101: PUSH
10102: LD_VAR 0 2
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PUSH
10111: LD_INT 2
10113: PUSH
10114: LD_INT 21
10116: PUSH
10117: LD_INT 1
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 33
10126: PUSH
10127: LD_INT 3
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 33
10136: PUSH
10137: LD_INT 5
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PPUSH
10154: CALL_OW 69
10158: ST_TO_ADDR
// if unit_list > 0 then
10159: LD_VAR 0 7
10163: PUSH
10164: LD_INT 0
10166: GREATER
10167: IFFALSE 10190
// ObnovOpozdilceCloveka ( un , side , waitTime ) else
10169: LD_VAR 0 1
10173: PPUSH
10174: LD_VAR 0 2
10178: PPUSH
10179: LD_VAR 0 3
10183: PPUSH
10184: CALL 9780 0 3
10188: GO 10192
// exit ;
10190: GO 10192
// end ; end ; end_of_file
10192: LD_VAR 0 4
10196: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
10197: LD_INT 0
10199: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
10200: LD_VAR 0 1
10204: PPUSH
10205: CALL_OW 255
10209: PUSH
10210: LD_VAR 0 4
10214: EQUAL
10215: IFFALSE 10234
// begin SetAchievement ( ACH_RAD ) ;
10217: LD_STRING ACH_RAD
10219: PPUSH
10220: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
10224: LD_STRING ACH_NL
10226: PPUSH
10227: LD_INT 1
10229: PPUSH
10230: CALL_OW 564
// end end ;
10234: LD_VAR 0 5
10238: RET
// export function SA_Win ( side ) ; begin
10239: LD_INT 0
10241: PPUSH
// case side of 1 :
10242: LD_VAR 0 1
10246: PUSH
10247: LD_INT 1
10249: DOUBLE
10250: EQUAL
10251: IFTRUE 10255
10253: GO 10268
10255: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
10256: LD_STRING ACH_AH
10258: PPUSH
10259: LD_INT 1
10261: PPUSH
10262: CALL_OW 564
10266: GO 10431
10268: LD_INT 2
10270: DOUBLE
10271: EQUAL
10272: IFTRUE 10276
10274: GO 10289
10276: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
10277: LD_STRING ACH_E
10279: PPUSH
10280: LD_INT 1
10282: PPUSH
10283: CALL_OW 564
10287: GO 10431
10289: LD_INT 3
10291: DOUBLE
10292: EQUAL
10293: IFTRUE 10297
10295: GO 10310
10297: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
10298: LD_STRING ACH_OOL
10300: PPUSH
10301: LD_INT 1
10303: PPUSH
10304: CALL_OW 564
10308: GO 10431
10310: LD_INT 1
10312: PUSH
10313: LD_INT 2
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: DOUBLE
10320: EQUAL
10321: IFTRUE 10325
10323: GO 10350
10325: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10326: LD_STRING ACH_AH
10328: PPUSH
10329: LD_REAL  5.00000000000000E-0001
10332: PPUSH
10333: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10337: LD_STRING ACH_E
10339: PPUSH
10340: LD_REAL  5.00000000000000E-0001
10343: PPUSH
10344: CALL_OW 564
// end ; [ 2 , 3 ] :
10348: GO 10431
10350: LD_INT 2
10352: PUSH
10353: LD_INT 3
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: DOUBLE
10360: EQUAL
10361: IFTRUE 10365
10363: GO 10390
10365: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10366: LD_STRING ACH_OOL
10368: PPUSH
10369: LD_REAL  5.00000000000000E-0001
10372: PPUSH
10373: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10377: LD_STRING ACH_E
10379: PPUSH
10380: LD_REAL  5.00000000000000E-0001
10383: PPUSH
10384: CALL_OW 564
// end ; [ 3 , 1 ] :
10388: GO 10431
10390: LD_INT 3
10392: PUSH
10393: LD_INT 1
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: DOUBLE
10400: EQUAL
10401: IFTRUE 10405
10403: GO 10430
10405: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10406: LD_STRING ACH_AH
10408: PPUSH
10409: LD_REAL  5.00000000000000E-0001
10412: PPUSH
10413: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
10417: LD_STRING ACH_OOL
10419: PPUSH
10420: LD_REAL  5.00000000000000E-0001
10423: PPUSH
10424: CALL_OW 564
// end ; end ;
10428: GO 10431
10430: POP
// end ; end_of_file
10431: LD_VAR 0 2
10435: RET
// export MaxFlags ; export function ShowResources ( FullMapArea , EnableSiberitResurces , Range ) ; var k , k2 , i , d , r , u ; begin
10436: LD_INT 0
10438: PPUSH
10439: PPUSH
10440: PPUSH
10441: PPUSH
10442: PPUSH
10443: PPUSH
10444: PPUSH
// if range = 0 then
10445: LD_VAR 0 3
10449: PUSH
10450: LD_INT 0
10452: EQUAL
10453: IFFALSE 10463
// range = 400 ;
10455: LD_ADDR_VAR 0 3
10459: PUSH
10460: LD_INT 400
10462: ST_TO_ADDR
// r = range ;
10463: LD_ADDR_VAR 0 9
10467: PUSH
10468: LD_VAR 0 3
10472: ST_TO_ADDR
// d = GetListOfResourcesInArea ( FullMapArea ) ;
10473: LD_ADDR_VAR 0 8
10477: PUSH
10478: LD_VAR 0 1
10482: PPUSH
10483: CALL_OW 442
10487: ST_TO_ADDR
// for k = 1 to ( d / 3 ) do
10488: LD_ADDR_VAR 0 5
10492: PUSH
10493: DOUBLE
10494: LD_INT 1
10496: DEC
10497: ST_TO_ADDR
10498: LD_VAR 0 8
10502: PUSH
10503: LD_INT 3
10505: DIVREAL
10506: PUSH
10507: FOR_TO
10508: IFFALSE 10699
// begin k2 = k * 3 ;
10510: LD_ADDR_VAR 0 6
10514: PUSH
10515: LD_VAR 0 5
10519: PUSH
10520: LD_INT 3
10522: MUL
10523: ST_TO_ADDR
// for i = 1 to 8 do
10524: LD_ADDR_VAR 0 7
10528: PUSH
10529: DOUBLE
10530: LD_INT 1
10532: DEC
10533: ST_TO_ADDR
10534: LD_INT 8
10536: PUSH
10537: FOR_TO
10538: IFFALSE 10695
// begin if d [ k2 ] = 1 or ( d [ k2 ] = 2 and EnableSiberitResurces ) then
10540: LD_VAR 0 8
10544: PUSH
10545: LD_VAR 0 6
10549: ARRAY
10550: PUSH
10551: LD_INT 1
10553: EQUAL
10554: PUSH
10555: LD_VAR 0 8
10559: PUSH
10560: LD_VAR 0 6
10564: ARRAY
10565: PUSH
10566: LD_INT 2
10568: EQUAL
10569: PUSH
10570: LD_VAR 0 2
10574: AND
10575: OR
10576: IFFALSE 10693
// begin u = filterAllUnits ( [ [ f_side , i ] , [ f_distxy , d [ k2 - 2 ] , d [ k2 - 1 ] , r ] ] ) ;
10578: LD_ADDR_VAR 0 10
10582: PUSH
10583: LD_INT 22
10585: PUSH
10586: LD_VAR 0 7
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 92
10597: PUSH
10598: LD_VAR 0 8
10602: PUSH
10603: LD_VAR 0 6
10607: PUSH
10608: LD_INT 2
10610: MINUS
10611: ARRAY
10612: PUSH
10613: LD_VAR 0 8
10617: PUSH
10618: LD_VAR 0 6
10622: PUSH
10623: LD_INT 1
10625: MINUS
10626: ARRAY
10627: PUSH
10628: LD_VAR 0 9
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: ST_TO_ADDR
// if u then
10648: LD_VAR 0 10
10652: IFFALSE 10693
// SetResourceVisibility ( d [ k2 - 2 ] , d [ k2 - 1 ] , i ) ;
10654: LD_VAR 0 8
10658: PUSH
10659: LD_VAR 0 6
10663: PUSH
10664: LD_INT 2
10666: MINUS
10667: ARRAY
10668: PPUSH
10669: LD_VAR 0 8
10673: PUSH
10674: LD_VAR 0 6
10678: PUSH
10679: LD_INT 1
10681: MINUS
10682: ARRAY
10683: PPUSH
10684: LD_VAR 0 7
10688: PPUSH
10689: CALL_OW 441
// end ; end ;
10693: GO 10537
10695: POP
10696: POP
// end ;
10697: GO 10507
10699: POP
10700: POP
// end ;
10701: LD_VAR 0 4
10705: RET
// export function randomHumanStats ( init_level ) ; var cl , combat , eng , mech , sci , skills , base_skills , attr ; var i , k , base , n , def , speed ; begin
10706: LD_INT 0
10708: PPUSH
10709: PPUSH
10710: PPUSH
10711: PPUSH
10712: PPUSH
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
10717: PPUSH
10718: PPUSH
10719: PPUSH
10720: PPUSH
10721: PPUSH
10722: PPUSH
// cl = rand ( 1 , 4 ) ;
10723: LD_ADDR_VAR 0 3
10727: PUSH
10728: LD_INT 1
10730: PPUSH
10731: LD_INT 4
10733: PPUSH
10734: CALL_OW 12
10738: ST_TO_ADDR
// base = init_level ;
10739: LD_ADDR_VAR 0 13
10743: PUSH
10744: LD_VAR 0 1
10748: ST_TO_ADDR
// case tick of 0 .. 5 5$00 :
10749: LD_OWVAR 1
10753: PUSH
10754: LD_INT 0
10756: DOUBLE
10757: GREATEREQUAL
10758: IFFALSE 10766
10760: LD_INT 10500
10762: DOUBLE
10763: LESSEQUAL
10764: IFTRUE 10768
10766: GO 10779
10768: POP
// i = 1 ; 5 5$01 .. 9 9$00 :
10769: LD_ADDR_VAR 0 11
10773: PUSH
10774: LD_INT 1
10776: ST_TO_ADDR
10777: GO 11038
10779: LD_INT 10535
10781: DOUBLE
10782: GREATEREQUAL
10783: IFFALSE 10791
10785: LD_INT 18900
10787: DOUBLE
10788: LESSEQUAL
10789: IFTRUE 10793
10791: GO 10804
10793: POP
// i = 2 ; 9 9$01 .. 15 15$00 :
10794: LD_ADDR_VAR 0 11
10798: PUSH
10799: LD_INT 2
10801: ST_TO_ADDR
10802: GO 11038
10804: LD_INT 18935
10806: DOUBLE
10807: GREATEREQUAL
10808: IFFALSE 10816
10810: LD_INT 31500
10812: DOUBLE
10813: LESSEQUAL
10814: IFTRUE 10818
10816: GO 10829
10818: POP
// i = 3 ; 15 15$01 .. 22 22$00 :
10819: LD_ADDR_VAR 0 11
10823: PUSH
10824: LD_INT 3
10826: ST_TO_ADDR
10827: GO 11038
10829: LD_INT 31535
10831: DOUBLE
10832: GREATEREQUAL
10833: IFFALSE 10841
10835: LD_INT 46200
10837: DOUBLE
10838: LESSEQUAL
10839: IFTRUE 10843
10841: GO 10854
10843: POP
// i = 4 ; 22 22$01 .. 30 30$00 :
10844: LD_ADDR_VAR 0 11
10848: PUSH
10849: LD_INT 4
10851: ST_TO_ADDR
10852: GO 11038
10854: LD_INT 46235
10856: DOUBLE
10857: GREATEREQUAL
10858: IFFALSE 10866
10860: LD_INT 63000
10862: DOUBLE
10863: LESSEQUAL
10864: IFTRUE 10868
10866: GO 10879
10868: POP
// i = 5 ; 30 30$01 .. 40 40$00 :
10869: LD_ADDR_VAR 0 11
10873: PUSH
10874: LD_INT 5
10876: ST_TO_ADDR
10877: GO 11038
10879: LD_INT 63035
10881: DOUBLE
10882: GREATEREQUAL
10883: IFFALSE 10891
10885: LD_INT 84000
10887: DOUBLE
10888: LESSEQUAL
10889: IFTRUE 10893
10891: GO 10904
10893: POP
// i = 6 ; 40 40$01 .. 52 52$00 :
10894: LD_ADDR_VAR 0 11
10898: PUSH
10899: LD_INT 6
10901: ST_TO_ADDR
10902: GO 11038
10904: LD_INT 84035
10906: DOUBLE
10907: GREATEREQUAL
10908: IFFALSE 10916
10910: LD_INT 109200
10912: DOUBLE
10913: LESSEQUAL
10914: IFTRUE 10918
10916: GO 10929
10918: POP
// i = 7 ; 52 52$01 .. 66 66$00 :
10919: LD_ADDR_VAR 0 11
10923: PUSH
10924: LD_INT 7
10926: ST_TO_ADDR
10927: GO 11038
10929: LD_INT 109235
10931: DOUBLE
10932: GREATEREQUAL
10933: IFFALSE 10941
10935: LD_INT 138600
10937: DOUBLE
10938: LESSEQUAL
10939: IFTRUE 10943
10941: GO 10954
10943: POP
// i = 8 ; 66 66$01 .. 88 88$00 :
10944: LD_ADDR_VAR 0 11
10948: PUSH
10949: LD_INT 8
10951: ST_TO_ADDR
10952: GO 11038
10954: LD_INT 138635
10956: DOUBLE
10957: GREATEREQUAL
10958: IFFALSE 10966
10960: LD_INT 184800
10962: DOUBLE
10963: LESSEQUAL
10964: IFTRUE 10968
10966: GO 10979
10968: POP
// i = 9 ; 88 88$01 .. 100 100$00 :
10969: LD_ADDR_VAR 0 11
10973: PUSH
10974: LD_INT 9
10976: ST_TO_ADDR
10977: GO 11038
10979: LD_INT 184835
10981: DOUBLE
10982: GREATEREQUAL
10983: IFFALSE 10991
10985: LD_INT 210000
10987: DOUBLE
10988: LESSEQUAL
10989: IFTRUE 10993
10991: GO 11004
10993: POP
// i = 10 ; 100 100$01 .. 120 120$00 :
10994: LD_ADDR_VAR 0 11
10998: PUSH
10999: LD_INT 10
11001: ST_TO_ADDR
11002: GO 11038
11004: LD_INT 210035
11006: DOUBLE
11007: GREATEREQUAL
11008: IFFALSE 11016
11010: LD_INT 252000
11012: DOUBLE
11013: LESSEQUAL
11014: IFTRUE 11018
11016: GO 11029
11018: POP
// i = 11 ; else
11019: LD_ADDR_VAR 0 11
11023: PUSH
11024: LD_INT 11
11026: ST_TO_ADDR
11027: GO 11038
11029: POP
// i = 12 ; end ;
11030: LD_ADDR_VAR 0 11
11034: PUSH
11035: LD_INT 12
11037: ST_TO_ADDR
// i = i - base div 2 ;
11038: LD_ADDR_VAR 0 11
11042: PUSH
11043: LD_VAR 0 11
11047: PUSH
11048: LD_VAR 0 13
11052: PUSH
11053: LD_INT 2
11055: DIV
11056: MINUS
11057: ST_TO_ADDR
// if i < 0 then
11058: LD_VAR 0 11
11062: PUSH
11063: LD_INT 0
11065: LESS
11066: IFFALSE 11076
// i = 0 ;
11068: LD_ADDR_VAR 0 11
11072: PUSH
11073: LD_INT 0
11075: ST_TO_ADDR
// if cl = 1 then
11076: LD_VAR 0 3
11080: PUSH
11081: LD_INT 1
11083: EQUAL
11084: IFFALSE 11124
// combat = rand ( base + i - 1 , base + i ) else
11086: LD_ADDR_VAR 0 4
11090: PUSH
11091: LD_VAR 0 13
11095: PUSH
11096: LD_VAR 0 11
11100: PLUS
11101: PUSH
11102: LD_INT 1
11104: MINUS
11105: PPUSH
11106: LD_VAR 0 13
11110: PUSH
11111: LD_VAR 0 11
11115: PLUS
11116: PPUSH
11117: CALL_OW 12
11121: ST_TO_ADDR
11122: GO 11164
// combat = rand ( base + i - 4 , base + i - 1 ) ;
11124: LD_ADDR_VAR 0 4
11128: PUSH
11129: LD_VAR 0 13
11133: PUSH
11134: LD_VAR 0 11
11138: PLUS
11139: PUSH
11140: LD_INT 4
11142: MINUS
11143: PPUSH
11144: LD_VAR 0 13
11148: PUSH
11149: LD_VAR 0 11
11153: PLUS
11154: PUSH
11155: LD_INT 1
11157: MINUS
11158: PPUSH
11159: CALL_OW 12
11163: ST_TO_ADDR
// if cl = 2 then
11164: LD_VAR 0 3
11168: PUSH
11169: LD_INT 2
11171: EQUAL
11172: IFFALSE 11212
// eng = rand ( base + i - 1 , base + i ) else
11174: LD_ADDR_VAR 0 5
11178: PUSH
11179: LD_VAR 0 13
11183: PUSH
11184: LD_VAR 0 11
11188: PLUS
11189: PUSH
11190: LD_INT 1
11192: MINUS
11193: PPUSH
11194: LD_VAR 0 13
11198: PUSH
11199: LD_VAR 0 11
11203: PLUS
11204: PPUSH
11205: CALL_OW 12
11209: ST_TO_ADDR
11210: GO 11252
// eng = rand ( base + i - 4 , base + i - 1 ) ;
11212: LD_ADDR_VAR 0 5
11216: PUSH
11217: LD_VAR 0 13
11221: PUSH
11222: LD_VAR 0 11
11226: PLUS
11227: PUSH
11228: LD_INT 4
11230: MINUS
11231: PPUSH
11232: LD_VAR 0 13
11236: PUSH
11237: LD_VAR 0 11
11241: PLUS
11242: PUSH
11243: LD_INT 1
11245: MINUS
11246: PPUSH
11247: CALL_OW 12
11251: ST_TO_ADDR
// if cl = 3 then
11252: LD_VAR 0 3
11256: PUSH
11257: LD_INT 3
11259: EQUAL
11260: IFFALSE 11300
// mech = rand ( base + i - 1 , base + i ) else
11262: LD_ADDR_VAR 0 6
11266: PUSH
11267: LD_VAR 0 13
11271: PUSH
11272: LD_VAR 0 11
11276: PLUS
11277: PUSH
11278: LD_INT 1
11280: MINUS
11281: PPUSH
11282: LD_VAR 0 13
11286: PUSH
11287: LD_VAR 0 11
11291: PLUS
11292: PPUSH
11293: CALL_OW 12
11297: ST_TO_ADDR
11298: GO 11340
// mech = rand ( base + i - 4 , base + i - 1 ) ;
11300: LD_ADDR_VAR 0 6
11304: PUSH
11305: LD_VAR 0 13
11309: PUSH
11310: LD_VAR 0 11
11314: PLUS
11315: PUSH
11316: LD_INT 4
11318: MINUS
11319: PPUSH
11320: LD_VAR 0 13
11324: PUSH
11325: LD_VAR 0 11
11329: PLUS
11330: PUSH
11331: LD_INT 1
11333: MINUS
11334: PPUSH
11335: CALL_OW 12
11339: ST_TO_ADDR
// if cl = 4 then
11340: LD_VAR 0 3
11344: PUSH
11345: LD_INT 4
11347: EQUAL
11348: IFFALSE 11388
// sci = rand ( base + i - 1 , base + i ) else
11350: LD_ADDR_VAR 0 7
11354: PUSH
11355: LD_VAR 0 13
11359: PUSH
11360: LD_VAR 0 11
11364: PLUS
11365: PUSH
11366: LD_INT 1
11368: MINUS
11369: PPUSH
11370: LD_VAR 0 13
11374: PUSH
11375: LD_VAR 0 11
11379: PLUS
11380: PPUSH
11381: CALL_OW 12
11385: ST_TO_ADDR
11386: GO 11428
// sci = rand ( base + i - 4 , base + i - 1 ) ;
11388: LD_ADDR_VAR 0 7
11392: PUSH
11393: LD_VAR 0 13
11397: PUSH
11398: LD_VAR 0 11
11402: PLUS
11403: PUSH
11404: LD_INT 4
11406: MINUS
11407: PPUSH
11408: LD_VAR 0 13
11412: PUSH
11413: LD_VAR 0 11
11417: PLUS
11418: PUSH
11419: LD_INT 1
11421: MINUS
11422: PPUSH
11423: CALL_OW 12
11427: ST_TO_ADDR
// skills = [ combat , eng , mech , sci ] ;
11428: LD_ADDR_VAR 0 8
11432: PUSH
11433: LD_VAR 0 4
11437: PUSH
11438: LD_VAR 0 5
11442: PUSH
11443: LD_VAR 0 6
11447: PUSH
11448: LD_VAR 0 7
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: ST_TO_ADDR
// for i = 1 to 4 do
11459: LD_ADDR_VAR 0 11
11463: PUSH
11464: DOUBLE
11465: LD_INT 1
11467: DEC
11468: ST_TO_ADDR
11469: LD_INT 4
11471: PUSH
11472: FOR_TO
11473: IFFALSE 11628
// begin if skills [ i ] < 0 then
11475: LD_VAR 0 8
11479: PUSH
11480: LD_VAR 0 11
11484: ARRAY
11485: PUSH
11486: LD_INT 0
11488: LESS
11489: IFFALSE 11514
// skills = replace ( skills , i , 0 ) ;
11491: LD_ADDR_VAR 0 8
11495: PUSH
11496: LD_VAR 0 8
11500: PPUSH
11501: LD_VAR 0 11
11505: PPUSH
11506: LD_INT 0
11508: PPUSH
11509: CALL_OW 1
11513: ST_TO_ADDR
// n = [ 0 , 1 , 0 , 1 , 0 , 2 , 0 , 0 , 1 , 0 ] [ rand ( 1 , 10 ) ] ;
11514: LD_ADDR_VAR 0 14
11518: PUSH
11519: LD_INT 0
11521: PUSH
11522: LD_INT 1
11524: PUSH
11525: LD_INT 0
11527: PUSH
11528: LD_INT 1
11530: PUSH
11531: LD_INT 0
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: LD_INT 0
11539: PUSH
11540: LD_INT 0
11542: PUSH
11543: LD_INT 1
11545: PUSH
11546: LD_INT 0
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 1
11563: PPUSH
11564: LD_INT 10
11566: PPUSH
11567: CALL_OW 12
11571: ARRAY
11572: ST_TO_ADDR
// if n > skills [ i ] then
11573: LD_VAR 0 14
11577: PUSH
11578: LD_VAR 0 8
11582: PUSH
11583: LD_VAR 0 11
11587: ARRAY
11588: GREATER
11589: IFFALSE 11607
// n = skills [ i ] ;
11591: LD_ADDR_VAR 0 14
11595: PUSH
11596: LD_VAR 0 8
11600: PUSH
11601: LD_VAR 0 11
11605: ARRAY
11606: ST_TO_ADDR
// replace ( base_skills , i , n ) ;
11607: LD_VAR 0 9
11611: PPUSH
11612: LD_VAR 0 11
11616: PPUSH
11617: LD_VAR 0 14
11621: PPUSH
11622: CALL_OW 1
// end ;
11626: GO 11472
11628: POP
11629: POP
// n = rand ( 1 , 100 ) ;
11630: LD_ADDR_VAR 0 14
11634: PUSH
11635: LD_INT 1
11637: PPUSH
11638: LD_INT 100
11640: PPUSH
11641: CALL_OW 12
11645: ST_TO_ADDR
// case n of 1 .. 32 :
11646: LD_VAR 0 14
11650: PUSH
11651: LD_INT 1
11653: DOUBLE
11654: GREATEREQUAL
11655: IFFALSE 11663
11657: LD_INT 32
11659: DOUBLE
11660: LESSEQUAL
11661: IFTRUE 11665
11663: GO 11676
11665: POP
// def = 10 ; 31 .. 54 :
11666: LD_ADDR_VAR 0 15
11670: PUSH
11671: LD_INT 10
11673: ST_TO_ADDR
11674: GO 11777
11676: LD_INT 31
11678: DOUBLE
11679: GREATEREQUAL
11680: IFFALSE 11688
11682: LD_INT 54
11684: DOUBLE
11685: LESSEQUAL
11686: IFTRUE 11690
11688: GO 11701
11690: POP
// def = 9 ; 55 .. 76 :
11691: LD_ADDR_VAR 0 15
11695: PUSH
11696: LD_INT 9
11698: ST_TO_ADDR
11699: GO 11777
11701: LD_INT 55
11703: DOUBLE
11704: GREATEREQUAL
11705: IFFALSE 11713
11707: LD_INT 76
11709: DOUBLE
11710: LESSEQUAL
11711: IFTRUE 11715
11713: GO 11726
11715: POP
// def = 11 ; 77 .. 88 :
11716: LD_ADDR_VAR 0 15
11720: PUSH
11721: LD_INT 11
11723: ST_TO_ADDR
11724: GO 11777
11726: LD_INT 77
11728: DOUBLE
11729: GREATEREQUAL
11730: IFFALSE 11738
11732: LD_INT 88
11734: DOUBLE
11735: LESSEQUAL
11736: IFTRUE 11740
11738: GO 11751
11740: POP
// def = 8 ; 89 .. 100 :
11741: LD_ADDR_VAR 0 15
11745: PUSH
11746: LD_INT 8
11748: ST_TO_ADDR
11749: GO 11777
11751: LD_INT 89
11753: DOUBLE
11754: GREATEREQUAL
11755: IFFALSE 11763
11757: LD_INT 100
11759: DOUBLE
11760: LESSEQUAL
11761: IFTRUE 11765
11763: GO 11776
11765: POP
// def = 12 ; end ;
11766: LD_ADDR_VAR 0 15
11770: PUSH
11771: LD_INT 12
11773: ST_TO_ADDR
11774: GO 11777
11776: POP
// n = rand ( 1 , 100 ) ;
11777: LD_ADDR_VAR 0 14
11781: PUSH
11782: LD_INT 1
11784: PPUSH
11785: LD_INT 100
11787: PPUSH
11788: CALL_OW 12
11792: ST_TO_ADDR
// case n of 1 .. 44 :
11793: LD_VAR 0 14
11797: PUSH
11798: LD_INT 1
11800: DOUBLE
11801: GREATEREQUAL
11802: IFFALSE 11810
11804: LD_INT 44
11806: DOUBLE
11807: LESSEQUAL
11808: IFTRUE 11812
11810: GO 11823
11812: POP
// speed = 10 ; 45 .. 76 :
11813: LD_ADDR_VAR 0 16
11817: PUSH
11818: LD_INT 10
11820: ST_TO_ADDR
11821: GO 11899
11823: LD_INT 45
11825: DOUBLE
11826: GREATEREQUAL
11827: IFFALSE 11835
11829: LD_INT 76
11831: DOUBLE
11832: LESSEQUAL
11833: IFTRUE 11837
11835: GO 11848
11837: POP
// speed = 9 ; 77 .. 94 :
11838: LD_ADDR_VAR 0 16
11842: PUSH
11843: LD_INT 9
11845: ST_TO_ADDR
11846: GO 11899
11848: LD_INT 77
11850: DOUBLE
11851: GREATEREQUAL
11852: IFFALSE 11860
11854: LD_INT 94
11856: DOUBLE
11857: LESSEQUAL
11858: IFTRUE 11862
11860: GO 11873
11862: POP
// speed = 11 ; 95 .. 100 :
11863: LD_ADDR_VAR 0 16
11867: PUSH
11868: LD_INT 11
11870: ST_TO_ADDR
11871: GO 11899
11873: LD_INT 95
11875: DOUBLE
11876: GREATEREQUAL
11877: IFFALSE 11885
11879: LD_INT 100
11881: DOUBLE
11882: LESSEQUAL
11883: IFTRUE 11887
11885: GO 11898
11887: POP
// speed = 12 ; end ;
11888: LD_ADDR_VAR 0 16
11892: PUSH
11893: LD_INT 12
11895: ST_TO_ADDR
11896: GO 11899
11898: POP
// hc_attr = [ def , speed ] ;
11899: LD_ADDR_OWVAR 29
11903: PUSH
11904: LD_VAR 0 15
11908: PUSH
11909: LD_VAR 0 16
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: ST_TO_ADDR
// hc_basic_skills = base_skills ;
11918: LD_ADDR_OWVAR 30
11922: PUSH
11923: LD_VAR 0 9
11927: ST_TO_ADDR
// hc_skills := skills ;
11928: LD_ADDR_OWVAR 31
11932: PUSH
11933: LD_VAR 0 8
11937: ST_TO_ADDR
// hc_class = cl ;
11938: LD_ADDR_OWVAR 28
11942: PUSH
11943: LD_VAR 0 3
11947: ST_TO_ADDR
// end ; end_of_file
11948: LD_VAR 0 2
11952: RET
// export function SetMpTechs ( ) ; var side , i ; begin
11953: LD_INT 0
11955: PPUSH
11956: PPUSH
11957: PPUSH
// for side = 1 to 8 do
11958: LD_ADDR_VAR 0 2
11962: PUSH
11963: DOUBLE
11964: LD_INT 1
11966: DEC
11967: ST_TO_ADDR
11968: LD_INT 8
11970: PUSH
11971: FOR_TO
11972: IFFALSE 12093
// begin for i = 1 to 72 do
11974: LD_ADDR_VAR 0 3
11978: PUSH
11979: DOUBLE
11980: LD_INT 1
11982: DEC
11983: ST_TO_ADDR
11984: LD_INT 72
11986: PUSH
11987: FOR_TO
11988: IFFALSE 12019
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
11990: LD_VAR 0 3
11994: PPUSH
11995: LD_VAR 0 2
11999: PPUSH
12000: LD_INT 0
12002: PPUSH
12003: LD_VAR 0 3
12007: PPUSH
12008: CALL_OW 565
12012: PPUSH
12013: CALL_OW 322
12017: GO 11987
12019: POP
12020: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12021: LD_INT 73
12023: PPUSH
12024: LD_VAR 0 2
12028: PPUSH
12029: LD_INT 0
12031: PPUSH
12032: LD_INT 25
12034: PPUSH
12035: CALL_OW 565
12039: PPUSH
12040: CALL_OW 322
// for i = 0 to 40 do
12044: LD_ADDR_VAR 0 3
12048: PUSH
12049: DOUBLE
12050: LD_INT 0
12052: DEC
12053: ST_TO_ADDR
12054: LD_INT 40
12056: PUSH
12057: FOR_TO
12058: IFFALSE 12089
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12060: LD_VAR 0 3
12064: PPUSH
12065: LD_VAR 0 2
12069: PPUSH
12070: LD_INT 1
12072: PPUSH
12073: LD_VAR 0 3
12077: PPUSH
12078: CALL_OW 565
12082: PPUSH
12083: CALL_OW 324
12087: GO 12057
12089: POP
12090: POP
// end ;
12091: GO 11971
12093: POP
12094: POP
// end ;
12095: LD_VAR 0 1
12099: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12100: LD_INT 0
12102: PPUSH
12103: PPUSH
12104: PPUSH
// for side = 1 to 8 do
12105: LD_ADDR_VAR 0 3
12109: PUSH
12110: DOUBLE
12111: LD_INT 1
12113: DEC
12114: ST_TO_ADDR
12115: LD_INT 8
12117: PUSH
12118: FOR_TO
12119: IFFALSE 16115
// begin for i = 1 to 73 do
12121: LD_ADDR_VAR 0 4
12125: PUSH
12126: DOUBLE
12127: LD_INT 1
12129: DEC
12130: ST_TO_ADDR
12131: LD_INT 73
12133: PUSH
12134: FOR_TO
12135: IFFALSE 12156
// SetTech ( i , side , state_disabled ) ;
12137: LD_VAR 0 4
12141: PPUSH
12142: LD_VAR 0 3
12146: PPUSH
12147: LD_INT 0
12149: PPUSH
12150: CALL_OW 322
12154: GO 12134
12156: POP
12157: POP
// for i = 0 to 40 do
12158: LD_ADDR_VAR 0 4
12162: PUSH
12163: DOUBLE
12164: LD_INT 0
12166: DEC
12167: ST_TO_ADDR
12168: LD_INT 40
12170: PUSH
12171: FOR_TO
12172: IFFALSE 12193
// SetRestrict ( i , side , false ) ;
12174: LD_VAR 0 4
12178: PPUSH
12179: LD_VAR 0 3
12183: PPUSH
12184: LD_INT 0
12186: PPUSH
12187: CALL_OW 324
12191: GO 12171
12193: POP
12194: POP
// case level of 1 :
12195: LD_VAR 0 1
12199: PUSH
12200: LD_INT 1
12202: DOUBLE
12203: EQUAL
12204: IFTRUE 12208
12206: GO 12361
12208: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12209: LD_INT 35
12211: PPUSH
12212: LD_VAR 0 3
12216: PPUSH
12217: LD_INT 1
12219: PPUSH
12220: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12224: LD_INT 45
12226: PPUSH
12227: LD_VAR 0 3
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12239: LD_INT 46
12241: PPUSH
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12254: LD_INT 47
12256: PPUSH
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12269: LD_INT 0
12271: PPUSH
12272: LD_VAR 0 3
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12284: LD_INT 2
12286: PPUSH
12287: LD_VAR 0 3
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12299: LD_INT 4
12301: PPUSH
12302: LD_VAR 0 3
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12314: LD_INT 6
12316: PPUSH
12317: LD_VAR 0 3
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12329: LD_INT 29
12331: PPUSH
12332: LD_VAR 0 3
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12344: LD_INT 31
12346: PPUSH
12347: LD_VAR 0 3
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: CALL_OW 324
// end ; 2 :
12359: GO 16113
12361: LD_INT 2
12363: DOUBLE
12364: EQUAL
12365: IFTRUE 12369
12367: GO 12567
12369: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12370: LD_INT 35
12372: PPUSH
12373: LD_VAR 0 3
12377: PPUSH
12378: LD_INT 1
12380: PPUSH
12381: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12385: LD_INT 45
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: LD_INT 1
12395: PPUSH
12396: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12400: LD_INT 46
12402: PPUSH
12403: LD_VAR 0 3
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12415: LD_INT 47
12417: PPUSH
12418: LD_VAR 0 3
12422: PPUSH
12423: LD_INT 1
12425: PPUSH
12426: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12430: LD_INT 1
12432: PPUSH
12433: LD_VAR 0 3
12437: PPUSH
12438: LD_INT 1
12440: PPUSH
12441: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12445: LD_INT 2
12447: PPUSH
12448: LD_VAR 0 3
12452: PPUSH
12453: LD_INT 1
12455: PPUSH
12456: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12460: LD_INT 11
12462: PPUSH
12463: LD_VAR 0 3
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12475: LD_INT 0
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: LD_INT 1
12485: PPUSH
12486: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12490: LD_INT 2
12492: PPUSH
12493: LD_VAR 0 3
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12505: LD_INT 4
12507: PPUSH
12508: LD_VAR 0 3
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12520: LD_INT 6
12522: PPUSH
12523: LD_VAR 0 3
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12535: LD_INT 29
12537: PPUSH
12538: LD_VAR 0 3
12542: PPUSH
12543: LD_INT 1
12545: PPUSH
12546: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12550: LD_INT 31
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: LD_INT 1
12560: PPUSH
12561: CALL_OW 324
// end ; 3 :
12565: GO 16113
12567: LD_INT 3
12569: DOUBLE
12570: EQUAL
12571: IFTRUE 12575
12573: GO 13028
12575: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12576: LD_INT 35
12578: PPUSH
12579: LD_VAR 0 3
12583: PPUSH
12584: LD_INT 1
12586: PPUSH
12587: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12591: LD_INT 45
12593: PPUSH
12594: LD_VAR 0 3
12598: PPUSH
12599: LD_INT 1
12601: PPUSH
12602: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12606: LD_INT 46
12608: PPUSH
12609: LD_VAR 0 3
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12621: LD_INT 47
12623: PPUSH
12624: LD_VAR 0 3
12628: PPUSH
12629: LD_INT 1
12631: PPUSH
12632: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12636: LD_INT 1
12638: PPUSH
12639: LD_VAR 0 3
12643: PPUSH
12644: LD_INT 1
12646: PPUSH
12647: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12651: LD_INT 2
12653: PPUSH
12654: LD_VAR 0 3
12658: PPUSH
12659: LD_INT 1
12661: PPUSH
12662: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12666: LD_INT 11
12668: PPUSH
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_INT 1
12676: PPUSH
12677: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12681: LD_INT 48
12683: PPUSH
12684: LD_VAR 0 3
12688: PPUSH
12689: LD_INT 1
12691: PPUSH
12692: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12696: LD_INT 69
12698: PPUSH
12699: LD_VAR 0 3
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12711: LD_INT 39
12713: PPUSH
12714: LD_VAR 0 3
12718: PPUSH
12719: LD_INT 1
12721: PPUSH
12722: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12726: LD_INT 43
12728: PPUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: LD_INT 1
12736: PPUSH
12737: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12741: LD_INT 51
12743: PPUSH
12744: LD_VAR 0 3
12748: PPUSH
12749: LD_INT 1
12751: PPUSH
12752: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12756: LD_INT 6
12758: PPUSH
12759: LD_VAR 0 3
12763: PPUSH
12764: LD_INT 1
12766: PPUSH
12767: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12771: LD_INT 0
12773: PPUSH
12774: LD_VAR 0 3
12778: PPUSH
12779: LD_INT 1
12781: PPUSH
12782: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12786: LD_INT 2
12788: PPUSH
12789: LD_VAR 0 3
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12801: LD_INT 3
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: LD_INT 1
12811: PPUSH
12812: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12816: LD_INT 4
12818: PPUSH
12819: LD_VAR 0 3
12823: PPUSH
12824: LD_INT 1
12826: PPUSH
12827: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12831: LD_INT 6
12833: PPUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12846: LD_INT 7
12848: PPUSH
12849: LD_VAR 0 3
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12861: LD_INT 8
12863: PPUSH
12864: LD_VAR 0 3
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12876: LD_INT 10
12878: PPUSH
12879: LD_VAR 0 3
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12891: LD_INT 15
12893: PPUSH
12894: LD_VAR 0 3
12898: PPUSH
12899: LD_INT 1
12901: PPUSH
12902: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12906: LD_INT 16
12908: PPUSH
12909: LD_VAR 0 3
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12921: LD_INT 17
12923: PPUSH
12924: LD_VAR 0 3
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12936: LD_INT 20
12938: PPUSH
12939: LD_VAR 0 3
12943: PPUSH
12944: LD_INT 1
12946: PPUSH
12947: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12951: LD_INT 26
12953: PPUSH
12954: LD_VAR 0 3
12958: PPUSH
12959: LD_INT 1
12961: PPUSH
12962: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12966: LD_INT 27
12968: PPUSH
12969: LD_VAR 0 3
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12981: LD_INT 29
12983: PPUSH
12984: LD_VAR 0 3
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12996: LD_INT 31
12998: PPUSH
12999: LD_VAR 0 3
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13011: LD_INT 32
13013: PPUSH
13014: LD_VAR 0 3
13018: PPUSH
13019: LD_INT 1
13021: PPUSH
13022: CALL_OW 324
// end ; 4 :
13026: GO 16113
13028: LD_INT 4
13030: DOUBLE
13031: EQUAL
13032: IFTRUE 13036
13034: GO 13984
13036: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13037: LD_INT 35
13039: PPUSH
13040: LD_VAR 0 3
13044: PPUSH
13045: LD_INT 1
13047: PPUSH
13048: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13052: LD_INT 45
13054: PPUSH
13055: LD_VAR 0 3
13059: PPUSH
13060: LD_INT 1
13062: PPUSH
13063: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13067: LD_INT 46
13069: PPUSH
13070: LD_VAR 0 3
13074: PPUSH
13075: LD_INT 1
13077: PPUSH
13078: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13082: LD_INT 47
13084: PPUSH
13085: LD_VAR 0 3
13089: PPUSH
13090: LD_INT 1
13092: PPUSH
13093: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13097: LD_INT 1
13099: PPUSH
13100: LD_VAR 0 3
13104: PPUSH
13105: LD_INT 1
13107: PPUSH
13108: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13112: LD_INT 2
13114: PPUSH
13115: LD_VAR 0 3
13119: PPUSH
13120: LD_INT 1
13122: PPUSH
13123: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13127: LD_INT 11
13129: PPUSH
13130: LD_VAR 0 3
13134: PPUSH
13135: LD_INT 1
13137: PPUSH
13138: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13142: LD_INT 20
13144: PPUSH
13145: LD_VAR 0 3
13149: PPUSH
13150: LD_INT 1
13152: PPUSH
13153: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13157: LD_INT 48
13159: PPUSH
13160: LD_VAR 0 3
13164: PPUSH
13165: LD_INT 1
13167: PPUSH
13168: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13172: LD_INT 49
13174: PPUSH
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 1
13182: PPUSH
13183: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13187: LD_INT 69
13189: PPUSH
13190: LD_VAR 0 3
13194: PPUSH
13195: LD_INT 1
13197: PPUSH
13198: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13202: LD_INT 39
13204: PPUSH
13205: LD_VAR 0 3
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13217: LD_INT 34
13219: PPUSH
13220: LD_VAR 0 3
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13232: LD_INT 42
13234: PPUSH
13235: LD_VAR 0 3
13239: PPUSH
13240: LD_INT 1
13242: PPUSH
13243: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13247: LD_INT 44
13249: PPUSH
13250: LD_VAR 0 3
13254: PPUSH
13255: LD_INT 1
13257: PPUSH
13258: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13262: LD_INT 41
13264: PPUSH
13265: LD_VAR 0 3
13269: PPUSH
13270: LD_INT 1
13272: PPUSH
13273: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13277: LD_INT 43
13279: PPUSH
13280: LD_VAR 0 3
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13292: LD_INT 70
13294: PPUSH
13295: LD_VAR 0 3
13299: PPUSH
13300: LD_INT 1
13302: PPUSH
13303: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13307: LD_INT 51
13309: PPUSH
13310: LD_VAR 0 3
13314: PPUSH
13315: LD_INT 1
13317: PPUSH
13318: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13322: LD_INT 52
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13337: LD_INT 6
13339: PPUSH
13340: LD_VAR 0 3
13344: PPUSH
13345: LD_INT 1
13347: PPUSH
13348: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13352: LD_INT 15
13354: PPUSH
13355: LD_VAR 0 3
13359: PPUSH
13360: LD_INT 1
13362: PPUSH
13363: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13367: LD_INT 7
13369: PPUSH
13370: LD_VAR 0 3
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13382: LD_INT 12
13384: PPUSH
13385: LD_VAR 0 3
13389: PPUSH
13390: LD_INT 1
13392: PPUSH
13393: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13397: LD_INT 18
13399: PPUSH
13400: LD_VAR 0 3
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13412: LD_INT 60
13414: PPUSH
13415: LD_VAR 0 3
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13427: LD_INT 9
13429: PPUSH
13430: LD_VAR 0 3
13434: PPUSH
13435: LD_INT 1
13437: PPUSH
13438: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13442: LD_INT 30
13444: PPUSH
13445: LD_VAR 0 3
13449: PPUSH
13450: LD_INT 1
13452: PPUSH
13453: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13457: LD_INT 37
13459: PPUSH
13460: LD_VAR 0 3
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13472: LD_INT 5
13474: PPUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: LD_INT 1
13482: PPUSH
13483: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13487: LD_INT 66
13489: PPUSH
13490: LD_VAR 0 3
13494: PPUSH
13495: LD_INT 1
13497: PPUSH
13498: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13502: LD_INT 21
13504: PPUSH
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 1
13512: PPUSH
13513: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13517: LD_INT 22
13519: PPUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: LD_INT 1
13527: PPUSH
13528: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13532: LD_INT 54
13534: PPUSH
13535: LD_VAR 0 3
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13547: LD_INT 0
13549: PPUSH
13550: LD_VAR 0 3
13554: PPUSH
13555: LD_INT 1
13557: PPUSH
13558: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13562: LD_INT 1
13564: PPUSH
13565: LD_VAR 0 3
13569: PPUSH
13570: LD_INT 1
13572: PPUSH
13573: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13577: LD_INT 2
13579: PPUSH
13580: LD_VAR 0 3
13584: PPUSH
13585: LD_INT 1
13587: PPUSH
13588: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13592: LD_INT 3
13594: PPUSH
13595: LD_VAR 0 3
13599: PPUSH
13600: LD_INT 1
13602: PPUSH
13603: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13607: LD_INT 4
13609: PPUSH
13610: LD_VAR 0 3
13614: PPUSH
13615: LD_INT 1
13617: PPUSH
13618: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13622: LD_INT 5
13624: PPUSH
13625: LD_VAR 0 3
13629: PPUSH
13630: LD_INT 1
13632: PPUSH
13633: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13637: LD_INT 6
13639: PPUSH
13640: LD_VAR 0 3
13644: PPUSH
13645: LD_INT 1
13647: PPUSH
13648: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13652: LD_INT 7
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: LD_INT 1
13662: PPUSH
13663: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13667: LD_INT 8
13669: PPUSH
13670: LD_VAR 0 3
13674: PPUSH
13675: LD_INT 1
13677: PPUSH
13678: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13682: LD_INT 10
13684: PPUSH
13685: LD_VAR 0 3
13689: PPUSH
13690: LD_INT 1
13692: PPUSH
13693: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13697: LD_INT 11
13699: PPUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13712: LD_INT 12
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 1
13722: PPUSH
13723: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13727: LD_INT 13
13729: PPUSH
13730: LD_VAR 0 3
13734: PPUSH
13735: LD_INT 1
13737: PPUSH
13738: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13742: LD_INT 14
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13757: LD_INT 15
13759: PPUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13772: LD_INT 16
13774: PPUSH
13775: LD_VAR 0 3
13779: PPUSH
13780: LD_INT 1
13782: PPUSH
13783: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13787: LD_INT 17
13789: PPUSH
13790: LD_VAR 0 3
13794: PPUSH
13795: LD_INT 1
13797: PPUSH
13798: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13802: LD_INT 19
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13817: LD_INT 20
13819: PPUSH
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_INT 1
13827: PPUSH
13828: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13832: LD_INT 21
13834: PPUSH
13835: LD_VAR 0 3
13839: PPUSH
13840: LD_INT 1
13842: PPUSH
13843: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13847: LD_INT 23
13849: PPUSH
13850: LD_VAR 0 3
13854: PPUSH
13855: LD_INT 1
13857: PPUSH
13858: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13862: LD_INT 26
13864: PPUSH
13865: LD_VAR 0 3
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13877: LD_INT 27
13879: PPUSH
13880: LD_VAR 0 3
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13892: LD_INT 28
13894: PPUSH
13895: LD_VAR 0 3
13899: PPUSH
13900: LD_INT 1
13902: PPUSH
13903: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13907: LD_INT 29
13909: PPUSH
13910: LD_VAR 0 3
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13922: LD_INT 30
13924: PPUSH
13925: LD_VAR 0 3
13929: PPUSH
13930: LD_INT 1
13932: PPUSH
13933: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13937: LD_INT 31
13939: PPUSH
13940: LD_VAR 0 3
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13952: LD_INT 32
13954: PPUSH
13955: LD_VAR 0 3
13959: PPUSH
13960: LD_INT 1
13962: PPUSH
13963: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13967: LD_INT 36
13969: PPUSH
13970: LD_VAR 0 3
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: CALL_OW 324
// end ; 5 :
13982: GO 16113
13984: LD_INT 5
13986: DOUBLE
13987: EQUAL
13988: IFTRUE 13992
13990: GO 15105
13992: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13993: LD_INT 35
13995: PPUSH
13996: LD_VAR 0 3
14000: PPUSH
14001: LD_INT 1
14003: PPUSH
14004: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14008: LD_INT 45
14010: PPUSH
14011: LD_VAR 0 3
14015: PPUSH
14016: LD_INT 1
14018: PPUSH
14019: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14023: LD_INT 46
14025: PPUSH
14026: LD_VAR 0 3
14030: PPUSH
14031: LD_INT 1
14033: PPUSH
14034: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14038: LD_INT 47
14040: PPUSH
14041: LD_VAR 0 3
14045: PPUSH
14046: LD_INT 1
14048: PPUSH
14049: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14053: LD_INT 1
14055: PPUSH
14056: LD_VAR 0 3
14060: PPUSH
14061: LD_INT 1
14063: PPUSH
14064: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14068: LD_INT 2
14070: PPUSH
14071: LD_VAR 0 3
14075: PPUSH
14076: LD_INT 1
14078: PPUSH
14079: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14083: LD_INT 11
14085: PPUSH
14086: LD_VAR 0 3
14090: PPUSH
14091: LD_INT 1
14093: PPUSH
14094: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14098: LD_INT 20
14100: PPUSH
14101: LD_VAR 0 3
14105: PPUSH
14106: LD_INT 1
14108: PPUSH
14109: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14113: LD_INT 48
14115: PPUSH
14116: LD_VAR 0 3
14120: PPUSH
14121: LD_INT 1
14123: PPUSH
14124: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14128: LD_INT 49
14130: PPUSH
14131: LD_VAR 0 3
14135: PPUSH
14136: LD_INT 1
14138: PPUSH
14139: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14143: LD_INT 69
14145: PPUSH
14146: LD_VAR 0 3
14150: PPUSH
14151: LD_INT 1
14153: PPUSH
14154: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14158: LD_INT 39
14160: PPUSH
14161: LD_VAR 0 3
14165: PPUSH
14166: LD_INT 1
14168: PPUSH
14169: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14173: LD_INT 34
14175: PPUSH
14176: LD_VAR 0 3
14180: PPUSH
14181: LD_INT 1
14183: PPUSH
14184: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14188: LD_INT 42
14190: PPUSH
14191: LD_VAR 0 3
14195: PPUSH
14196: LD_INT 1
14198: PPUSH
14199: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14203: LD_INT 44
14205: PPUSH
14206: LD_VAR 0 3
14210: PPUSH
14211: LD_INT 1
14213: PPUSH
14214: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14218: LD_INT 41
14220: PPUSH
14221: LD_VAR 0 3
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14233: LD_INT 40
14235: PPUSH
14236: LD_VAR 0 3
14240: PPUSH
14241: LD_INT 1
14243: PPUSH
14244: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14248: LD_INT 43
14250: PPUSH
14251: LD_VAR 0 3
14255: PPUSH
14256: LD_INT 1
14258: PPUSH
14259: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14263: LD_INT 70
14265: PPUSH
14266: LD_VAR 0 3
14270: PPUSH
14271: LD_INT 1
14273: PPUSH
14274: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14278: LD_INT 51
14280: PPUSH
14281: LD_VAR 0 3
14285: PPUSH
14286: LD_INT 1
14288: PPUSH
14289: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14293: LD_INT 52
14295: PPUSH
14296: LD_VAR 0 3
14300: PPUSH
14301: LD_INT 1
14303: PPUSH
14304: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14308: LD_INT 6
14310: PPUSH
14311: LD_VAR 0 3
14315: PPUSH
14316: LD_INT 1
14318: PPUSH
14319: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14323: LD_INT 15
14325: PPUSH
14326: LD_VAR 0 3
14330: PPUSH
14331: LD_INT 1
14333: PPUSH
14334: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14338: LD_INT 7
14340: PPUSH
14341: LD_VAR 0 3
14345: PPUSH
14346: LD_INT 1
14348: PPUSH
14349: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14353: LD_INT 12
14355: PPUSH
14356: LD_VAR 0 3
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14368: LD_INT 17
14370: PPUSH
14371: LD_VAR 0 3
14375: PPUSH
14376: LD_INT 1
14378: PPUSH
14379: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14383: LD_INT 18
14385: PPUSH
14386: LD_VAR 0 3
14390: PPUSH
14391: LD_INT 1
14393: PPUSH
14394: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14398: LD_INT 60
14400: PPUSH
14401: LD_VAR 0 3
14405: PPUSH
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14413: LD_INT 32
14415: PPUSH
14416: LD_VAR 0 3
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14428: LD_INT 9
14430: PPUSH
14431: LD_VAR 0 3
14435: PPUSH
14436: LD_INT 1
14438: PPUSH
14439: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14443: LD_INT 57
14445: PPUSH
14446: LD_VAR 0 3
14450: PPUSH
14451: LD_INT 1
14453: PPUSH
14454: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14458: LD_INT 30
14460: PPUSH
14461: LD_VAR 0 3
14465: PPUSH
14466: LD_INT 1
14468: PPUSH
14469: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14473: LD_INT 37
14475: PPUSH
14476: LD_VAR 0 3
14480: PPUSH
14481: LD_INT 1
14483: PPUSH
14484: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14488: LD_INT 63
14490: PPUSH
14491: LD_VAR 0 3
14495: PPUSH
14496: LD_INT 1
14498: PPUSH
14499: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14503: LD_INT 3
14505: PPUSH
14506: LD_VAR 0 3
14510: PPUSH
14511: LD_INT 1
14513: PPUSH
14514: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14518: LD_INT 4
14520: PPUSH
14521: LD_VAR 0 3
14525: PPUSH
14526: LD_INT 1
14528: PPUSH
14529: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14533: LD_INT 5
14535: PPUSH
14536: LD_VAR 0 3
14540: PPUSH
14541: LD_INT 1
14543: PPUSH
14544: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14548: LD_INT 66
14550: PPUSH
14551: LD_VAR 0 3
14555: PPUSH
14556: LD_INT 1
14558: PPUSH
14559: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14563: LD_INT 21
14565: PPUSH
14566: LD_VAR 0 3
14570: PPUSH
14571: LD_INT 1
14573: PPUSH
14574: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14578: LD_INT 22
14580: PPUSH
14581: LD_VAR 0 3
14585: PPUSH
14586: LD_INT 1
14588: PPUSH
14589: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14593: LD_INT 19
14595: PPUSH
14596: LD_VAR 0 3
14600: PPUSH
14601: LD_INT 1
14603: PPUSH
14604: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14608: LD_INT 54
14610: PPUSH
14611: LD_VAR 0 3
14615: PPUSH
14616: LD_INT 1
14618: PPUSH
14619: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14623: LD_INT 55
14625: PPUSH
14626: LD_VAR 0 3
14630: PPUSH
14631: LD_INT 1
14633: PPUSH
14634: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14638: LD_INT 0
14640: PPUSH
14641: LD_VAR 0 3
14645: PPUSH
14646: LD_INT 1
14648: PPUSH
14649: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14653: LD_INT 1
14655: PPUSH
14656: LD_VAR 0 3
14660: PPUSH
14661: LD_INT 1
14663: PPUSH
14664: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14668: LD_INT 2
14670: PPUSH
14671: LD_VAR 0 3
14675: PPUSH
14676: LD_INT 1
14678: PPUSH
14679: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14683: LD_INT 3
14685: PPUSH
14686: LD_VAR 0 3
14690: PPUSH
14691: LD_INT 1
14693: PPUSH
14694: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14698: LD_INT 4
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: LD_INT 1
14708: PPUSH
14709: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14713: LD_INT 5
14715: PPUSH
14716: LD_VAR 0 3
14720: PPUSH
14721: LD_INT 1
14723: PPUSH
14724: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14728: LD_INT 6
14730: PPUSH
14731: LD_VAR 0 3
14735: PPUSH
14736: LD_INT 1
14738: PPUSH
14739: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14743: LD_INT 7
14745: PPUSH
14746: LD_VAR 0 3
14750: PPUSH
14751: LD_INT 1
14753: PPUSH
14754: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14758: LD_INT 8
14760: PPUSH
14761: LD_VAR 0 3
14765: PPUSH
14766: LD_INT 1
14768: PPUSH
14769: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14773: LD_INT 10
14775: PPUSH
14776: LD_VAR 0 3
14780: PPUSH
14781: LD_INT 1
14783: PPUSH
14784: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14788: LD_INT 11
14790: PPUSH
14791: LD_VAR 0 3
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14803: LD_INT 12
14805: PPUSH
14806: LD_VAR 0 3
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14818: LD_INT 13
14820: PPUSH
14821: LD_VAR 0 3
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14833: LD_INT 14
14835: PPUSH
14836: LD_VAR 0 3
14840: PPUSH
14841: LD_INT 1
14843: PPUSH
14844: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14848: LD_INT 15
14850: PPUSH
14851: LD_VAR 0 3
14855: PPUSH
14856: LD_INT 1
14858: PPUSH
14859: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14863: LD_INT 16
14865: PPUSH
14866: LD_VAR 0 3
14870: PPUSH
14871: LD_INT 1
14873: PPUSH
14874: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14878: LD_INT 17
14880: PPUSH
14881: LD_VAR 0 3
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14893: LD_INT 18
14895: PPUSH
14896: LD_VAR 0 3
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14908: LD_INT 19
14910: PPUSH
14911: LD_VAR 0 3
14915: PPUSH
14916: LD_INT 1
14918: PPUSH
14919: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14923: LD_INT 20
14925: PPUSH
14926: LD_VAR 0 3
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14938: LD_INT 21
14940: PPUSH
14941: LD_VAR 0 3
14945: PPUSH
14946: LD_INT 1
14948: PPUSH
14949: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14953: LD_INT 23
14955: PPUSH
14956: LD_VAR 0 3
14960: PPUSH
14961: LD_INT 1
14963: PPUSH
14964: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14968: LD_INT 26
14970: PPUSH
14971: LD_VAR 0 3
14975: PPUSH
14976: LD_INT 1
14978: PPUSH
14979: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14983: LD_INT 27
14985: PPUSH
14986: LD_VAR 0 3
14990: PPUSH
14991: LD_INT 1
14993: PPUSH
14994: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14998: LD_INT 28
15000: PPUSH
15001: LD_VAR 0 3
15005: PPUSH
15006: LD_INT 1
15008: PPUSH
15009: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15013: LD_INT 29
15015: PPUSH
15016: LD_VAR 0 3
15020: PPUSH
15021: LD_INT 1
15023: PPUSH
15024: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15028: LD_INT 30
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: LD_INT 1
15038: PPUSH
15039: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15043: LD_INT 31
15045: PPUSH
15046: LD_VAR 0 3
15050: PPUSH
15051: LD_INT 1
15053: PPUSH
15054: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15058: LD_INT 32
15060: PPUSH
15061: LD_VAR 0 3
15065: PPUSH
15066: LD_INT 1
15068: PPUSH
15069: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15073: LD_INT 33
15075: PPUSH
15076: LD_VAR 0 3
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15088: LD_INT 36
15090: PPUSH
15091: LD_VAR 0 3
15095: PPUSH
15096: LD_INT 1
15098: PPUSH
15099: CALL_OW 324
// end ; 6 :
15103: GO 16113
15105: LD_INT 6
15107: DOUBLE
15108: EQUAL
15109: IFTRUE 15113
15111: GO 16038
15113: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15114: LD_INT 35
15116: PPUSH
15117: LD_VAR 0 3
15121: PPUSH
15122: LD_INT 1
15124: PPUSH
15125: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15129: LD_INT 45
15131: PPUSH
15132: LD_VAR 0 3
15136: PPUSH
15137: LD_INT 1
15139: PPUSH
15140: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15144: LD_INT 46
15146: PPUSH
15147: LD_VAR 0 3
15151: PPUSH
15152: LD_INT 1
15154: PPUSH
15155: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15159: LD_INT 47
15161: PPUSH
15162: LD_VAR 0 3
15166: PPUSH
15167: LD_INT 1
15169: PPUSH
15170: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15174: LD_INT 1
15176: PPUSH
15177: LD_VAR 0 3
15181: PPUSH
15182: LD_INT 1
15184: PPUSH
15185: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15189: LD_INT 2
15191: PPUSH
15192: LD_VAR 0 3
15196: PPUSH
15197: LD_INT 1
15199: PPUSH
15200: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15204: LD_INT 11
15206: PPUSH
15207: LD_VAR 0 3
15211: PPUSH
15212: LD_INT 1
15214: PPUSH
15215: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15219: LD_INT 20
15221: PPUSH
15222: LD_VAR 0 3
15226: PPUSH
15227: LD_INT 1
15229: PPUSH
15230: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15234: LD_INT 48
15236: PPUSH
15237: LD_VAR 0 3
15241: PPUSH
15242: LD_INT 1
15244: PPUSH
15245: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15249: LD_INT 49
15251: PPUSH
15252: LD_VAR 0 3
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15264: LD_INT 50
15266: PPUSH
15267: LD_VAR 0 3
15271: PPUSH
15272: LD_INT 1
15274: PPUSH
15275: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15279: LD_INT 69
15281: PPUSH
15282: LD_VAR 0 3
15286: PPUSH
15287: LD_INT 1
15289: PPUSH
15290: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15294: LD_INT 39
15296: PPUSH
15297: LD_VAR 0 3
15301: PPUSH
15302: LD_INT 1
15304: PPUSH
15305: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15309: LD_INT 34
15311: PPUSH
15312: LD_VAR 0 3
15316: PPUSH
15317: LD_INT 1
15319: PPUSH
15320: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15324: LD_INT 42
15326: PPUSH
15327: LD_VAR 0 3
15331: PPUSH
15332: LD_INT 1
15334: PPUSH
15335: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15339: LD_INT 44
15341: PPUSH
15342: LD_VAR 0 3
15346: PPUSH
15347: LD_INT 1
15349: PPUSH
15350: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15354: LD_INT 41
15356: PPUSH
15357: LD_VAR 0 3
15361: PPUSH
15362: LD_INT 1
15364: PPUSH
15365: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15369: LD_INT 13
15371: PPUSH
15372: LD_VAR 0 3
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15384: LD_INT 40
15386: PPUSH
15387: LD_VAR 0 3
15391: PPUSH
15392: LD_INT 1
15394: PPUSH
15395: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15399: LD_INT 43
15401: PPUSH
15402: LD_VAR 0 3
15406: PPUSH
15407: LD_INT 1
15409: PPUSH
15410: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15414: LD_INT 70
15416: PPUSH
15417: LD_VAR 0 3
15421: PPUSH
15422: LD_INT 1
15424: PPUSH
15425: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15429: LD_INT 23
15431: PPUSH
15432: LD_VAR 0 3
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15444: LD_INT 51
15446: PPUSH
15447: LD_VAR 0 3
15451: PPUSH
15452: LD_INT 1
15454: PPUSH
15455: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15459: LD_INT 52
15461: PPUSH
15462: LD_VAR 0 3
15466: PPUSH
15467: LD_INT 1
15469: PPUSH
15470: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15474: LD_INT 6
15476: PPUSH
15477: LD_VAR 0 3
15481: PPUSH
15482: LD_INT 1
15484: PPUSH
15485: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15489: LD_INT 15
15491: PPUSH
15492: LD_VAR 0 3
15496: PPUSH
15497: LD_INT 1
15499: PPUSH
15500: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15504: LD_INT 7
15506: PPUSH
15507: LD_VAR 0 3
15511: PPUSH
15512: LD_INT 1
15514: PPUSH
15515: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15519: LD_INT 12
15521: PPUSH
15522: LD_VAR 0 3
15526: PPUSH
15527: LD_INT 1
15529: PPUSH
15530: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15534: LD_INT 10
15536: PPUSH
15537: LD_VAR 0 3
15541: PPUSH
15542: LD_INT 1
15544: PPUSH
15545: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15549: LD_INT 17
15551: PPUSH
15552: LD_VAR 0 3
15556: PPUSH
15557: LD_INT 1
15559: PPUSH
15560: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15564: LD_INT 18
15566: PPUSH
15567: LD_VAR 0 3
15571: PPUSH
15572: LD_INT 1
15574: PPUSH
15575: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15579: LD_INT 60
15581: PPUSH
15582: LD_VAR 0 3
15586: PPUSH
15587: LD_INT 1
15589: PPUSH
15590: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15594: LD_INT 61
15596: PPUSH
15597: LD_VAR 0 3
15601: PPUSH
15602: LD_INT 1
15604: PPUSH
15605: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15609: LD_INT 32
15611: PPUSH
15612: LD_VAR 0 3
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15624: LD_INT 27
15626: PPUSH
15627: LD_VAR 0 3
15631: PPUSH
15632: LD_INT 1
15634: PPUSH
15635: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15639: LD_INT 36
15641: PPUSH
15642: LD_VAR 0 3
15646: PPUSH
15647: LD_INT 1
15649: PPUSH
15650: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15654: LD_INT 33
15656: PPUSH
15657: LD_VAR 0 3
15661: PPUSH
15662: LD_INT 1
15664: PPUSH
15665: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15669: LD_INT 9
15671: PPUSH
15672: LD_VAR 0 3
15676: PPUSH
15677: LD_INT 1
15679: PPUSH
15680: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15684: LD_INT 38
15686: PPUSH
15687: LD_VAR 0 3
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15699: LD_INT 57
15701: PPUSH
15702: LD_VAR 0 3
15706: PPUSH
15707: LD_INT 1
15709: PPUSH
15710: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15714: LD_INT 58
15716: PPUSH
15717: LD_VAR 0 3
15721: PPUSH
15722: LD_INT 1
15724: PPUSH
15725: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15729: LD_INT 28
15731: PPUSH
15732: LD_VAR 0 3
15736: PPUSH
15737: LD_INT 1
15739: PPUSH
15740: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15744: LD_INT 29
15746: PPUSH
15747: LD_VAR 0 3
15751: PPUSH
15752: LD_INT 1
15754: PPUSH
15755: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15759: LD_INT 30
15761: PPUSH
15762: LD_VAR 0 3
15766: PPUSH
15767: LD_INT 1
15769: PPUSH
15770: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15774: LD_INT 37
15776: PPUSH
15777: LD_VAR 0 3
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15789: LD_INT 63
15791: PPUSH
15792: LD_VAR 0 3
15796: PPUSH
15797: LD_INT 1
15799: PPUSH
15800: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15804: LD_INT 64
15806: PPUSH
15807: LD_VAR 0 3
15811: PPUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15819: LD_INT 3
15821: PPUSH
15822: LD_VAR 0 3
15826: PPUSH
15827: LD_INT 1
15829: PPUSH
15830: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15834: LD_INT 4
15836: PPUSH
15837: LD_VAR 0 3
15841: PPUSH
15842: LD_INT 1
15844: PPUSH
15845: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15849: LD_INT 5
15851: PPUSH
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 1
15859: PPUSH
15860: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
15864: LD_INT 8
15866: PPUSH
15867: LD_VAR 0 3
15871: PPUSH
15872: LD_INT 1
15874: PPUSH
15875: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15879: LD_INT 66
15881: PPUSH
15882: LD_VAR 0 3
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15894: LD_INT 67
15896: PPUSH
15897: LD_VAR 0 3
15901: PPUSH
15902: LD_INT 1
15904: PPUSH
15905: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15909: LD_INT 21
15911: PPUSH
15912: LD_VAR 0 3
15916: PPUSH
15917: LD_INT 1
15919: PPUSH
15920: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15924: LD_INT 22
15926: PPUSH
15927: LD_VAR 0 3
15931: PPUSH
15932: LD_INT 1
15934: PPUSH
15935: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15939: LD_INT 19
15941: PPUSH
15942: LD_VAR 0 3
15946: PPUSH
15947: LD_INT 1
15949: PPUSH
15950: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
15954: LD_INT 26
15956: PPUSH
15957: LD_VAR 0 3
15961: PPUSH
15962: LD_INT 1
15964: PPUSH
15965: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15969: LD_INT 54
15971: PPUSH
15972: LD_VAR 0 3
15976: PPUSH
15977: LD_INT 1
15979: PPUSH
15980: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15984: LD_INT 55
15986: PPUSH
15987: LD_VAR 0 3
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 322
// for i = 0 to 39 do
15999: LD_ADDR_VAR 0 4
16003: PUSH
16004: DOUBLE
16005: LD_INT 0
16007: DEC
16008: ST_TO_ADDR
16009: LD_INT 39
16011: PUSH
16012: FOR_TO
16013: IFFALSE 16034
// SetRestrict ( i , side , true ) ;
16015: LD_VAR 0 4
16019: PPUSH
16020: LD_VAR 0 3
16024: PPUSH
16025: LD_INT 1
16027: PPUSH
16028: CALL_OW 324
16032: GO 16012
16034: POP
16035: POP
// end ; else
16036: GO 16113
16038: POP
// begin for i = 1 to 73 do
16039: LD_ADDR_VAR 0 4
16043: PUSH
16044: DOUBLE
16045: LD_INT 1
16047: DEC
16048: ST_TO_ADDR
16049: LD_INT 73
16051: PUSH
16052: FOR_TO
16053: IFFALSE 16074
// SetTech ( i , side , state_enabled ) ;
16055: LD_VAR 0 4
16059: PPUSH
16060: LD_VAR 0 3
16064: PPUSH
16065: LD_INT 1
16067: PPUSH
16068: CALL_OW 322
16072: GO 16052
16074: POP
16075: POP
// for i = 0 to 39 do
16076: LD_ADDR_VAR 0 4
16080: PUSH
16081: DOUBLE
16082: LD_INT 0
16084: DEC
16085: ST_TO_ADDR
16086: LD_INT 39
16088: PUSH
16089: FOR_TO
16090: IFFALSE 16111
// SetRestrict ( i , side , true ) ;
16092: LD_VAR 0 4
16096: PPUSH
16097: LD_VAR 0 3
16101: PPUSH
16102: LD_INT 1
16104: PPUSH
16105: CALL_OW 324
16109: GO 16089
16111: POP
16112: POP
// end ; end ; end ;
16113: GO 12118
16115: POP
16116: POP
// end ;
16117: LD_VAR 0 2
16121: RET
