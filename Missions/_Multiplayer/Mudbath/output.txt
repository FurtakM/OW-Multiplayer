// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 36
 372: PUSH
 373: LD_EXP 31
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 600
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 577: LD_ADDR_VAR 0 3
 581: PUSH
 582: LD_INT 22
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_win_rules = 0 ;
 590: LD_ADDR_EXP 30
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// end else
 598: GO 732
// begin Randomize ;
 600: CALL_OW 10
// def_base_level := 2 ;
 604: LD_ADDR_EXP 1
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_amount_of_people := 2 ;
 612: LD_ADDR_EXP 2
 616: PUSH
 617: LD_INT 2
 619: ST_TO_ADDR
// def_skill_level := 1 ;
 620: LD_ADDR_EXP 3
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// def_starting_resources := 2 ;
 628: LD_ADDR_EXP 4
 632: PUSH
 633: LD_INT 2
 635: ST_TO_ADDR
// def_shipments_density := 50 ;
 636: LD_ADDR_EXP 5
 640: PUSH
 641: LD_INT 50
 643: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 644: LD_ADDR_EXP 6
 648: PUSH
 649: LD_INT 2
 651: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 2
 659: ST_TO_ADDR
// def_shared_vision := 1 ;
 660: LD_ADDR_EXP 8
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_morale_flags := 1 ;
 668: LD_ADDR_EXP 9
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_siberite_detection := 1 ;
 676: LD_ADDR_EXP 10
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// def_people_respawning := 2 ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_INT 2
 691: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 692: LD_ADDR_EXP 12
 696: PUSH
 697: LD_INT 3
 699: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 700: LD_ADDR_EXP 13
 704: PUSH
 705: LD_INT 2
 707: ST_TO_ADDR
// def_builduptime := 1 ;
 708: LD_ADDR_EXP 14
 712: PUSH
 713: LD_INT 1
 715: ST_TO_ADDR
// tech_level = 4 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 4
 723: ST_TO_ADDR
// def_win_rules = 0 ;
 724: LD_ADDR_EXP 30
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// end ; if isSGUI then
 732: LD_OWVAR 83
 736: IFFALSE 744
// setMpTechs ( ) else
 738: CALL 9217 0 0
 742: GO 757
// SetMpTechLevel ( tech_level + 1 ) ;
 744: LD_VAR 0 3
 748: PUSH
 749: LD_INT 1
 751: PLUS
 752: PPUSH
 753: CALL 9364 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_INT 0
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 1
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_EXP 1
 780: PUSH
 781: LD_INT 1
 783: PLUS
 784: ARRAY
 785: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 786: LD_ADDR_EXP 18
 790: PUSH
 791: LD_INT 0
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_INT 1
 812: PLUS
 813: ARRAY
 814: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 9
 822: PUSH
 823: LD_INT 12
 825: PUSH
 826: LD_INT 15
 828: PUSH
 829: LD_INT 24
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_EXP 2
 842: PUSH
 843: LD_INT 1
 845: PLUS
 846: ARRAY
 847: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 848: LD_ADDR_EXP 20
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 3
 875: PUSH
 876: LD_INT 1
 878: PLUS
 879: ARRAY
 880: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 881: LD_ADDR_EXP 22
 885: PUSH
 886: LD_INT 0
 888: PUSH
 889: LD_INT 0
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 30
 902: PUSH
 903: LD_INT 0
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 50
 916: PUSH
 917: LD_INT 20
 919: PUSH
 920: LD_INT 0
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 80
 930: PUSH
 931: LD_INT 40
 933: PUSH
 934: LD_INT 20
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: PUSH
 948: LD_EXP 4
 952: PUSH
 953: LD_INT 1
 955: PLUS
 956: ARRAY
 957: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 958: LD_ADDR_EXP 21
 962: PUSH
 963: LD_INT 10
 965: PUSH
 966: EMPTY
 967: LIST
 968: PUSH
 969: LD_INT 7
 971: PUSH
 972: LD_INT 14
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 18
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 10
 998: PUSH
 999: LD_INT 15
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PUSH
1017: LD_EXP 4
1021: PUSH
1022: LD_INT 1
1024: PLUS
1025: ARRAY
1026: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1027: LD_ADDR_EXP 23
1031: PUSH
1032: LD_INT 150
1034: PUSH
1035: LD_EXP 5
1039: MINUS
1040: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1041: LD_ADDR_EXP 27
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 10500
1051: PUSH
1052: LD_INT 6300
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: LD_EXP 11
1064: PUSH
1065: LD_INT 1
1067: PLUS
1068: ARRAY
1069: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1070: LD_ADDR_EXP 28
1074: PUSH
1075: LD_INT 0
1077: PUSH
1078: LD_INT 31500
1080: PUSH
1081: LD_INT 10500
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_EXP 11
1093: PUSH
1094: LD_INT 1
1096: PLUS
1097: ARRAY
1098: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1099: LD_ADDR_EXP 25
1103: PUSH
1104: LD_INT 0
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 3
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 12
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1132: LD_ADDR_EXP 24
1136: PUSH
1137: LD_INT 1
1139: NEG
1140: PUSH
1141: LD_INT 350
1143: PUSH
1144: LD_INT 700
1146: PUSH
1147: LD_INT 1400
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 9
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// battle_flags_id := [ ] ;
1170: LD_ADDR_EXP 44
1174: PUSH
1175: EMPTY
1176: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1177: LD_EXP 13
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: IFFALSE 1197
// siberite_bomb_Delay = 0 else
1187: LD_ADDR_EXP 29
1191: PUSH
1192: LD_INT 0
1194: ST_TO_ADDR
1195: GO 1219
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1197: LD_ADDR_EXP 29
1201: PUSH
1202: LD_EXP 13
1206: PUSH
1207: LD_INT 1
1209: MINUS
1210: PUSH
1211: LD_INT 21000
1213: MUL
1214: PUSH
1215: LD_INT 1
1217: PLUS
1218: ST_TO_ADDR
// end ;
1219: LD_VAR 0 1
1223: RET
// function init_map ; var i , j ; begin
1224: LD_INT 0
1226: PPUSH
1227: PPUSH
1228: PPUSH
// normal_oil_deposits_locations := [ [ 36 , 6 ] , [ 103 , 5 ] , [ 163 , 9 ] , [ 200 , 51 ] , [ 54 , 86 ] , [ 134 , 154 ] , [ 177 , 151 ] , [ 239 , 152 ] ] ;
1229: LD_ADDR_EXP 40
1233: PUSH
1234: LD_INT 36
1236: PUSH
1237: LD_INT 6
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 103
1246: PUSH
1247: LD_INT 5
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 163
1256: PUSH
1257: LD_INT 9
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 200
1266: PUSH
1267: LD_INT 51
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 54
1276: PUSH
1277: LD_INT 86
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 134
1286: PUSH
1287: LD_INT 154
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 177
1296: PUSH
1297: LD_INT 151
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 239
1306: PUSH
1307: LD_INT 152
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 54 , 6 ] , [ 62 , 7 ] , [ 186 , 17 ] , [ 219 , 87 ] , [ 83 , 131 ] , [ 114 , 153 ] , [ 214 , 156 ] , [ 221 , 109 ] ] ;
1324: LD_ADDR_EXP 41
1328: PUSH
1329: LD_INT 54
1331: PUSH
1332: LD_INT 6
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 62
1341: PUSH
1342: LD_INT 7
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 186
1351: PUSH
1352: LD_INT 17
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 219
1361: PUSH
1362: LD_INT 87
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 83
1371: PUSH
1372: LD_INT 131
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 114
1381: PUSH
1382: LD_INT 153
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 214
1391: PUSH
1392: LD_INT 156
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 221
1401: PUSH
1402: LD_INT 109
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 26 , 32 ] , [ 115 , 31 ] , [ 142 , 28 ] , [ 175 , 54 ] , [ 84 , 100 ] , [ 133 , 122 ] , [ 161 , 122 ] , [ 214 , 121 ] ] ;
1419: LD_ADDR_EXP 42
1423: PUSH
1424: LD_INT 26
1426: PUSH
1427: LD_INT 32
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 115
1436: PUSH
1437: LD_INT 31
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 142
1446: PUSH
1447: LD_INT 28
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 175
1456: PUSH
1457: LD_INT 54
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 84
1466: PUSH
1467: LD_INT 100
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 133
1476: PUSH
1477: LD_INT 122
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 161
1486: PUSH
1487: LD_INT 122
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 214
1496: PUSH
1497: LD_INT 121
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 57 , 13 ] , [ 72 , 27 ] , [ 125 , 14 ] , [ 216 , 85 ] , [ 86 , 130 ] , [ 110 , 147 ] , [ 213 , 149 ] , [ 226 , 110 ] ] ;
1514: LD_ADDR_EXP 43
1518: PUSH
1519: LD_INT 57
1521: PUSH
1522: LD_INT 13
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 72
1531: PUSH
1532: LD_INT 27
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 125
1541: PUSH
1542: LD_INT 14
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 216
1551: PUSH
1552: LD_INT 85
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 86
1561: PUSH
1562: LD_INT 130
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 110
1571: PUSH
1572: LD_INT 147
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 213
1581: PUSH
1582: LD_INT 149
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 226
1591: PUSH
1592: LD_INT 110
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: ST_TO_ADDR
// depot_def := [ [ 32 , 17 , 2 ] , [ 95 , 16 , 3 ] , [ 154 , 14 , 3 ] , [ 188 , 54 , 4 ] , [ 65 , 97 , 1 ] , [ 136 , 144 , 5 ] , [ 182 , 145 , 0 ] , [ 234 , 140 , 5 ] ] ;
1609: LD_ADDR_EXP 37
1613: PUSH
1614: LD_INT 32
1616: PUSH
1617: LD_INT 17
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 95
1630: PUSH
1631: LD_INT 16
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 154
1644: PUSH
1645: LD_INT 14
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 188
1658: PUSH
1659: LD_INT 54
1661: PUSH
1662: LD_INT 4
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 65
1672: PUSH
1673: LD_INT 97
1675: PUSH
1676: LD_INT 1
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 136
1686: PUSH
1687: LD_INT 144
1689: PUSH
1690: LD_INT 5
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 182
1700: PUSH
1701: LD_INT 145
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 234
1714: PUSH
1715: LD_INT 140
1717: PUSH
1718: LD_INT 5
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: ST_TO_ADDR
// for i in depot_def do
1736: LD_ADDR_VAR 0 2
1740: PUSH
1741: LD_EXP 37
1745: PUSH
1746: FOR_IN
1747: IFFALSE 1823
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1749: LD_ADDR_EXP 39
1753: PUSH
1754: LD_EXP 39
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 1
1766: ARRAY
1767: PPUSH
1768: LD_VAR 0 2
1772: PUSH
1773: LD_INT 3
1775: ARRAY
1776: PPUSH
1777: LD_INT 4
1779: NEG
1780: PPUSH
1781: CALL_OW 272
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_INT 2
1793: ARRAY
1794: PPUSH
1795: LD_VAR 0 2
1799: PUSH
1800: LD_INT 3
1802: ARRAY
1803: PPUSH
1804: LD_INT 4
1806: NEG
1807: PPUSH
1808: CALL_OW 273
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: ADD
1820: ST_TO_ADDR
1821: GO 1746
1823: POP
1824: POP
// breastworks_def := [ [ [ 54 , 30 , 5 ] , [ 21 , 30 , 0 ] , [ 41 , 33 , 5 ] ] , [ [ 113 , 34 , 5 ] , [ 97 , 35 , 0 ] , [ 82 , 27 , 0 ] ] , [ [ 165 , 32 , 5 ] , [ 150 , 33 , 0 ] , [ 134 , 19 , 0 ] ] , [ [ 196 , 75 , 0 ] , [ 179 , 66 , 0 ] , [ 171 , 48 , 1 ] ] , [ [ 69 , 82 , 3 ] , [ 82 , 93 , 4 ] , [ 90 , 110 , 4 ] ] , [ [ 114 , 130 , 2 ] , [ 123 , 123 , 2 ] , [ 140 , 125 , 3 ] ] , [ [ 187 , 125 , 2 ] , [ 176 , 123 , 2 ] , [ 166 , 125 , 3 ] ] , [ [ 213 , 128 , 2 ] , [ 222 , 122 , 2 ] , [ 234 , 121 , 2 ] ] ] ;
1825: LD_ADDR_EXP 38
1829: PUSH
1830: LD_INT 54
1832: PUSH
1833: LD_INT 30
1835: PUSH
1836: LD_INT 5
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 21
1846: PUSH
1847: LD_INT 30
1849: PUSH
1850: LD_INT 0
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 41
1860: PUSH
1861: LD_INT 33
1863: PUSH
1864: LD_INT 5
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 113
1879: PUSH
1880: LD_INT 34
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 97
1893: PUSH
1894: LD_INT 35
1896: PUSH
1897: LD_INT 0
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 82
1907: PUSH
1908: LD_INT 27
1910: PUSH
1911: LD_INT 0
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 165
1926: PUSH
1927: LD_INT 32
1929: PUSH
1930: LD_INT 5
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 150
1940: PUSH
1941: LD_INT 33
1943: PUSH
1944: LD_INT 0
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 134
1954: PUSH
1955: LD_INT 19
1957: PUSH
1958: LD_INT 0
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 196
1973: PUSH
1974: LD_INT 75
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 179
1987: PUSH
1988: LD_INT 66
1990: PUSH
1991: LD_INT 0
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 171
2001: PUSH
2002: LD_INT 48
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 69
2020: PUSH
2021: LD_INT 82
2023: PUSH
2024: LD_INT 3
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 82
2034: PUSH
2035: LD_INT 93
2037: PUSH
2038: LD_INT 4
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 90
2048: PUSH
2049: LD_INT 110
2051: PUSH
2052: LD_INT 4
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 114
2067: PUSH
2068: LD_INT 130
2070: PUSH
2071: LD_INT 2
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 123
2081: PUSH
2082: LD_INT 123
2084: PUSH
2085: LD_INT 2
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 140
2095: PUSH
2096: LD_INT 125
2098: PUSH
2099: LD_INT 3
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 187
2114: PUSH
2115: LD_INT 125
2117: PUSH
2118: LD_INT 2
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 176
2128: PUSH
2129: LD_INT 123
2131: PUSH
2132: LD_INT 2
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 166
2142: PUSH
2143: LD_INT 125
2145: PUSH
2146: LD_INT 3
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 213
2161: PUSH
2162: LD_INT 128
2164: PUSH
2165: LD_INT 2
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 222
2175: PUSH
2176: LD_INT 122
2178: PUSH
2179: LD_INT 2
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 234
2189: PUSH
2190: LD_INT 121
2192: PUSH
2193: LD_INT 2
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: ST_TO_ADDR
// for i = 1 to Side_Positions do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: DOUBLE
2222: LD_INT 1
2224: DEC
2225: ST_TO_ADDR
2226: LD_EXP 34
2230: PUSH
2231: FOR_TO
2232: IFFALSE 2355
// begin if not Side_Positions [ i ] then
2234: LD_EXP 34
2238: PUSH
2239: LD_VAR 0 2
2243: ARRAY
2244: NOT
2245: IFFALSE 2249
// continue ;
2247: GO 2231
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2249: LD_EXP 40
2253: PUSH
2254: LD_EXP 34
2258: PUSH
2259: LD_VAR 0 2
2263: ARRAY
2264: ARRAY
2265: PUSH
2266: LD_INT 1
2268: ARRAY
2269: PPUSH
2270: LD_EXP 40
2274: PUSH
2275: LD_EXP 34
2279: PUSH
2280: LD_VAR 0 2
2284: ARRAY
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_INT 2
2293: PPUSH
2294: CALL_OW 62
// if def_extra_oil_deposits then
2298: LD_EXP 6
2302: IFFALSE 2353
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2304: LD_EXP 41
2308: PUSH
2309: LD_EXP 34
2313: PUSH
2314: LD_VAR 0 2
2318: ARRAY
2319: ARRAY
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 41
2329: PUSH
2330: LD_EXP 34
2334: PUSH
2335: LD_VAR 0 2
2339: ARRAY
2340: ARRAY
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
// end ;
2353: GO 2231
2355: POP
2356: POP
// if def_extra_sib_deposits then
2357: LD_EXP 7
2361: IFFALSE 2508
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 34
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2506
// begin if not Side_Positions [ i ] then
2381: LD_EXP 34
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2396: LD_EXP 42
2400: PUSH
2401: LD_EXP 34
2405: PUSH
2406: LD_VAR 0 2
2410: ARRAY
2411: ARRAY
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PPUSH
2417: LD_EXP 42
2421: PUSH
2422: LD_EXP 34
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 3
2440: PPUSH
2441: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2445: LD_EXP 7
2449: PUSH
2450: LD_INT 2
2452: EQUAL
2453: IFFALSE 2504
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2455: LD_EXP 43
2459: PUSH
2460: LD_EXP 34
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: ARRAY
2471: PUSH
2472: LD_INT 1
2474: ARRAY
2475: PPUSH
2476: LD_EXP 43
2480: PUSH
2481: LD_EXP 34
2485: PUSH
2486: LD_VAR 0 2
2490: ARRAY
2491: ARRAY
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: CALL_OW 62
// end ;
2504: GO 2378
2506: POP
2507: POP
// end ;
2508: LD_VAR 0 1
2512: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
// if not Team_Game then
2518: LD_EXP 36
2522: NOT
2523: IFFALSE 2621
// begin for i = 1 to 8 do
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: DOUBLE
2531: LD_INT 1
2533: DEC
2534: ST_TO_ADDR
2535: LD_INT 8
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2617
// for j = 1 to 8 do
2541: LD_ADDR_VAR 0 3
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 8
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2613
// if i <> j then
2557: LD_VAR 0 2
2561: PUSH
2562: LD_VAR 0 3
2566: NONEQUAL
2567: IFFALSE 2591
// SetAttitude ( i , j , att_neutral , true ) else
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_VAR 0 3
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 80
2589: GO 2611
// SetAttitude ( i , j , att_friend , true ) ;
2591: LD_VAR 0 2
2595: PPUSH
2596: LD_VAR 0 3
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: CALL_OW 80
2611: GO 2554
2613: POP
2614: POP
2615: GO 2538
2617: POP
2618: POP
// end else
2619: GO 2796
// begin if def_shared_vision then
2621: LD_EXP 8
2625: IFFALSE 2690
// begin for i in Teams do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: LD_EXP 32
2636: PUSH
2637: FOR_IN
2638: IFFALSE 2688
// for j = 2 to i do
2640: LD_ADDR_VAR 0 3
2644: PUSH
2645: DOUBLE
2646: LD_INT 2
2648: DEC
2649: ST_TO_ADDR
2650: LD_VAR 0 2
2654: PUSH
2655: FOR_TO
2656: IFFALSE 2684
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2658: LD_VAR 0 2
2662: PUSH
2663: LD_VAR 0 3
2667: ARRAY
2668: PPUSH
2669: LD_VAR 0 2
2673: PUSH
2674: LD_INT 1
2676: ARRAY
2677: PPUSH
2678: CALL_OW 343
2682: GO 2655
2684: POP
2685: POP
2686: GO 2637
2688: POP
2689: POP
// end ; for i = 1 to 8 do
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: DOUBLE
2696: LD_INT 1
2698: DEC
2699: ST_TO_ADDR
2700: LD_INT 8
2702: PUSH
2703: FOR_TO
2704: IFFALSE 2794
// for j = 1 to 8 do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 1
2714: DEC
2715: ST_TO_ADDR
2716: LD_INT 8
2718: PUSH
2719: FOR_TO
2720: IFFALSE 2790
// if Side_Teams [ i ] = Side_Teams [ j ] then
2722: LD_EXP 31
2726: PUSH
2727: LD_VAR 0 2
2731: ARRAY
2732: PUSH
2733: LD_EXP 31
2737: PUSH
2738: LD_VAR 0 3
2742: ARRAY
2743: EQUAL
2744: IFFALSE 2768
// SetAttitude ( i , j , att_friend , true ) else
2746: LD_VAR 0 2
2750: PPUSH
2751: LD_VAR 0 3
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 80
2766: GO 2788
// SetAttitude ( i , j , att_enemy , true ) ;
2768: LD_VAR 0 2
2772: PPUSH
2773: LD_VAR 0 3
2777: PPUSH
2778: LD_INT 2
2780: PPUSH
2781: LD_INT 1
2783: PPUSH
2784: CALL_OW 80
2788: GO 2719
2790: POP
2791: POP
2792: GO 2703
2794: POP
2795: POP
// end ; end ;
2796: LD_VAR 0 1
2800: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2801: LD_INT 0
2803: PPUSH
2804: PPUSH
2805: PPUSH
2806: PPUSH
// result := [ ] ;
2807: LD_ADDR_VAR 0 7
2811: PUSH
2812: EMPTY
2813: ST_TO_ADDR
// for i := 1 to count do
2814: LD_ADDR_VAR 0 8
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_VAR 0 1
2828: PUSH
2829: FOR_TO
2830: IFFALSE 3248
// begin uc_direction := Rand ( 0 , 5 ) ;
2832: LD_ADDR_OWVAR 24
2836: PUSH
2837: LD_INT 0
2839: PPUSH
2840: LD_INT 5
2842: PPUSH
2843: CALL_OW 12
2847: ST_TO_ADDR
// if commander then
2848: LD_LOC 1
2852: IFFALSE 2961
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2854: LD_ADDR_OWVAR 26
2858: PUSH
2859: LD_OWVAR 19
2863: PUSH
2864: LD_OWVAR 20
2868: ARRAY
2869: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2870: LD_INT 1
2872: PPUSH
2873: LD_INT 2
2875: PPUSH
2876: CALL_OW 12
2880: PPUSH
2881: LD_VAR 0 2
2885: PPUSH
2886: LD_EXP 20
2890: PUSH
2891: LD_INT 2
2893: PLUS
2894: PPUSH
2895: CALL_OW 380
// hc_importance := 105 ;
2899: LD_ADDR_OWVAR 32
2903: PUSH
2904: LD_INT 105
2906: ST_TO_ADDR
// commander := false ;
2907: LD_ADDR_LOC 1
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// if Multiplayer then
2915: LD_OWVAR 4
2919: IFFALSE 2959
// begin hc_gallery := MULTIAVATARS ;
2921: LD_ADDR_OWVAR 33
2925: PUSH
2926: LD_STRING MULTIAVATARS
2928: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2929: LD_ADDR_OWVAR 34
2933: PUSH
2934: LD_OWVAR 20
2938: PPUSH
2939: CALL_OW 525
2943: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2944: LD_ADDR_OWVAR 27
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 526
2958: ST_TO_ADDR
// end ; end else
2959: GO 3024
// begin hc_name :=  ;
2961: LD_ADDR_OWVAR 26
2965: PUSH
2966: LD_STRING 
2968: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2969: LD_INT 1
2971: PPUSH
2972: LD_INT 2
2974: PPUSH
2975: CALL_OW 12
2979: PPUSH
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_EXP 20
2989: PPUSH
2990: CALL_OW 380
// hc_importance := 0 ;
2994: LD_ADDR_OWVAR 32
2998: PUSH
2999: LD_INT 0
3001: ST_TO_ADDR
// if Multiplayer then
3002: LD_OWVAR 4
3006: IFFALSE 3024
// begin hc_gallery :=  ;
3008: LD_ADDR_OWVAR 33
3012: PUSH
3013: LD_STRING 
3015: ST_TO_ADDR
// hc_face_number := 0 ;
3016: LD_ADDR_OWVAR 34
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3024: LD_ADDR_VAR 0 10
3028: PUSH
3029: CALL_OW 44
3033: ST_TO_ADDR
// if global_defined then
3034: LD_LOC 3
3038: IFFALSE 3178
// begin if ( cl = class_soldier ) then
3040: LD_VAR 0 2
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: IFFALSE 3068
// j := i + soldiers_created else
3050: LD_ADDR_VAR 0 9
3054: PUSH
3055: LD_VAR 0 8
3059: PUSH
3060: LD_LOC 4
3064: PLUS
3065: ST_TO_ADDR
3066: GO 3078
// j := i ;
3068: LD_ADDR_VAR 0 9
3072: PUSH
3073: LD_VAR 0 8
3077: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3078: LD_LOC 2
3082: PUSH
3083: LD_VAR 0 2
3087: ARRAY
3088: PUSH
3089: LD_VAR 0 9
3093: ARRAY
3094: PPUSH
3095: LD_VAR 0 10
3099: PPUSH
3100: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: LD_LOC 2
3116: PUSH
3117: LD_VAR 0 2
3121: ARRAY
3122: PUSH
3123: LD_VAR 0 9
3127: ARRAY
3128: PPUSH
3129: LD_INT 2
3131: PPUSH
3132: CALL_OW 260
3136: PPUSH
3137: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3141: LD_VAR 0 10
3145: PPUSH
3146: LD_INT 1
3148: PPUSH
3149: LD_LOC 2
3153: PUSH
3154: LD_VAR 0 2
3158: ARRAY
3159: PUSH
3160: LD_VAR 0 9
3164: ARRAY
3165: PPUSH
3166: LD_INT 1
3168: PPUSH
3169: CALL_OW 260
3173: PPUSH
3174: CALL_OW 239
// end ; if building then
3178: LD_VAR 0 6
3182: IFFALSE 3200
// PlaceHumanInUnit ( un , building ) else
3184: LD_VAR 0 10
3188: PPUSH
3189: LD_VAR 0 6
3193: PPUSH
3194: CALL_OW 52
3198: GO 3227
// PlaceUnitXYR ( un , x , y , r , false ) ;
3200: LD_VAR 0 10
3204: PPUSH
3205: LD_VAR 0 3
3209: PPUSH
3210: LD_VAR 0 4
3214: PPUSH
3215: LD_VAR 0 5
3219: PPUSH
3220: LD_INT 0
3222: PPUSH
3223: CALL_OW 50
// result := result ^ [ un ] ;
3227: LD_ADDR_VAR 0 7
3231: PUSH
3232: LD_VAR 0 7
3236: PUSH
3237: LD_VAR 0 10
3241: PUSH
3242: EMPTY
3243: LIST
3244: ADD
3245: ST_TO_ADDR
// end ;
3246: GO 2829
3248: POP
3249: POP
// if not global_defined then
3250: LD_LOC 3
3254: NOT
3255: IFFALSE 3333
// if ( global_units >= cl ) then
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: GREATEREQUAL
3267: IFFALSE 3308
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3269: LD_ADDR_LOC 2
3273: PUSH
3274: LD_LOC 2
3278: PPUSH
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_LOC 2
3288: PUSH
3289: LD_VAR 0 2
3293: ARRAY
3294: PUSH
3295: LD_VAR 0 7
3299: ADD
3300: PPUSH
3301: CALL_OW 1
3305: ST_TO_ADDR
3306: GO 3333
// global_units := Replace ( global_units , cl , result ) ;
3308: LD_ADDR_LOC 2
3312: PUSH
3313: LD_LOC 2
3317: PPUSH
3318: LD_VAR 0 2
3322: PPUSH
3323: LD_VAR 0 7
3327: PPUSH
3328: CALL_OW 1
3332: ST_TO_ADDR
// if commander then
3333: LD_LOC 1
3337: IFFALSE 3384
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3339: LD_ADDR_EXP 45
3343: PUSH
3344: LD_EXP 45
3348: PPUSH
3349: LD_OWVAR 20
3353: PPUSH
3354: LD_EXP 45
3358: PUSH
3359: LD_OWVAR 20
3363: ARRAY
3364: PUSH
3365: LD_VAR 0 10
3369: ADD
3370: PPUSH
3371: CALL_OW 1
3375: ST_TO_ADDR
// commander := false ;
3376: LD_ADDR_LOC 1
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// end ; end ;
3384: LD_VAR 0 7
3388: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3389: LD_INT 0
3391: PPUSH
3392: PPUSH
3393: PPUSH
3394: PPUSH
3395: PPUSH
3396: PPUSH
3397: PPUSH
3398: PPUSH
3399: PPUSH
// if side in [ 0 , 9 ] then
3400: LD_VAR 0 1
3404: PUSH
3405: LD_INT 0
3407: PUSH
3408: LD_INT 9
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: IN
3415: IFFALSE 3419
// exit ;
3417: GO 4469
// pos := Side_Positions [ side ] ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: LD_EXP 34
3428: PUSH
3429: LD_VAR 0 1
3433: ARRAY
3434: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3435: LD_ADDR_OWVAR 21
3439: PUSH
3440: LD_EXP 35
3444: PUSH
3445: LD_VAR 0 1
3449: ARRAY
3450: ST_TO_ADDR
// uc_side := side ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_VAR 0 1
3460: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3461: LD_ADDR_VAR 0 4
3465: PUSH
3466: LD_EXP 37
3470: PUSH
3471: LD_VAR 0 3
3475: ARRAY
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3481: LD_ADDR_VAR 0 5
3485: PUSH
3486: LD_EXP 37
3490: PUSH
3491: LD_VAR 0 3
3495: ARRAY
3496: PUSH
3497: LD_INT 2
3499: ARRAY
3500: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3501: LD_ADDR_VAR 0 6
3505: PUSH
3506: LD_EXP 37
3510: PUSH
3511: LD_VAR 0 3
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// if is_depot then
3521: LD_EXP 17
3525: IFFALSE 3658
// begin bc_type = b_depot ;
3527: LD_ADDR_OWVAR 42
3531: PUSH
3532: LD_INT 0
3534: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3535: LD_ADDR_VAR 0 10
3539: PUSH
3540: LD_VAR 0 4
3544: PPUSH
3545: LD_VAR 0 5
3549: PPUSH
3550: LD_VAR 0 6
3554: PPUSH
3555: CALL_OW 47
3559: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3560: LD_VAR 0 10
3564: PPUSH
3565: LD_STRING @
3567: PUSH
3568: LD_VAR 0 1
3572: STR
3573: PPUSH
3574: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3578: LD_VAR 0 10
3582: PPUSH
3583: CALL_OW 274
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_EXP 22
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: PPUSH
3600: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3604: LD_VAR 0 10
3608: PPUSH
3609: CALL_OW 274
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: LD_EXP 22
3621: PUSH
3622: LD_INT 2
3624: ARRAY
3625: PPUSH
3626: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3630: LD_VAR 0 10
3634: PPUSH
3635: CALL_OW 274
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: LD_EXP 22
3647: PUSH
3648: LD_INT 3
3650: ARRAY
3651: PPUSH
3652: CALL_OW 277
// end else
3656: GO 3802
// begin for i := 1 to 3 do
3658: LD_ADDR_VAR 0 7
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 3
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3800
// begin r := starting_resources [ i ] ;
3674: LD_ADDR_VAR 0 8
3678: PUSH
3679: LD_EXP 22
3683: PUSH
3684: LD_VAR 0 7
3688: ARRAY
3689: ST_TO_ADDR
// while r >= 10 do
3690: LD_VAR 0 8
3694: PUSH
3695: LD_INT 10
3697: GREATEREQUAL
3698: IFFALSE 3798
// if r > 50 then
3700: LD_VAR 0 8
3704: PUSH
3705: LD_INT 50
3707: GREATER
3708: IFFALSE 3754
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3710: LD_VAR 0 7
3714: PPUSH
3715: LD_INT 5
3717: PPUSH
3718: LD_VAR 0 4
3722: PPUSH
3723: LD_VAR 0 5
3727: PPUSH
3728: LD_INT 4
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 60
// r := r - 50 ;
3738: LD_ADDR_VAR 0 8
3742: PUSH
3743: LD_VAR 0 8
3747: PUSH
3748: LD_INT 50
3750: MINUS
3751: ST_TO_ADDR
// end else
3752: GO 3796
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3754: LD_VAR 0 7
3758: PPUSH
3759: LD_VAR 0 8
3763: PUSH
3764: LD_INT 10
3766: DIV
3767: PPUSH
3768: LD_VAR 0 4
3772: PPUSH
3773: LD_VAR 0 5
3777: PPUSH
3778: LD_INT 4
3780: PPUSH
3781: LD_INT 0
3783: PPUSH
3784: CALL_OW 60
// r := 0 ;
3788: LD_ADDR_VAR 0 8
3792: PUSH
3793: LD_INT 0
3795: ST_TO_ADDR
// end ;
3796: GO 3690
// end ;
3798: GO 3671
3800: POP
3801: POP
// end ; for r in starting_crates do
3802: LD_ADDR_VAR 0 8
3806: PUSH
3807: LD_EXP 21
3811: PUSH
3812: FOR_IN
3813: IFFALSE 3845
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3815: LD_INT 1
3817: PPUSH
3818: LD_INT 5
3820: PPUSH
3821: LD_VAR 0 4
3825: PPUSH
3826: LD_VAR 0 5
3830: PPUSH
3831: LD_VAR 0 8
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 60
3843: GO 3812
3845: POP
3846: POP
// if def_morale_flags then
3847: LD_EXP 9
3851: IFFALSE 3990
// begin x := start_def [ pos ] [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_EXP 39
3862: PUSH
3863: LD_VAR 0 3
3867: ARRAY
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3873: LD_ADDR_VAR 0 5
3877: PUSH
3878: LD_EXP 39
3882: PUSH
3883: LD_VAR 0 3
3887: ARRAY
3888: PUSH
3889: LD_INT 2
3891: ARRAY
3892: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3893: LD_VAR 0 4
3897: PPUSH
3898: LD_VAR 0 5
3902: PPUSH
3903: LD_INT 12
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3913: LD_ADDR_EXP 44
3917: PUSH
3918: LD_EXP 44
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: LD_VAR 0 4
3932: PPUSH
3933: LD_VAR 0 5
3937: PPUSH
3938: LD_INT 1
3940: PUSH
3941: LD_INT 100
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 2
3950: PUSH
3951: LD_INT 50
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 3
3960: PUSH
3961: LD_INT 20
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: LD_INT 20
3970: PUSH
3971: LD_INT 100
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PPUSH
3984: CALL_OW 418
3988: ADD
3989: ST_TO_ADDR
// end ; commander := true ;
3990: LD_ADDR_LOC 1
3994: PUSH
3995: LD_INT 1
3997: ST_TO_ADDR
// soldiers_created := 0 ;
3998: LD_ADDR_LOC 4
4002: PUSH
4003: LD_INT 0
4005: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4006: LD_ADDR_VAR 0 7
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_EXP 18
4020: PUSH
4021: FOR_TO
4022: IFFALSE 4175
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: LD_EXP 38
4033: PUSH
4034: LD_VAR 0 3
4038: ARRAY
4039: PUSH
4040: LD_VAR 0 7
4044: ARRAY
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: LD_EXP 38
4059: PUSH
4060: LD_VAR 0 3
4064: ARRAY
4065: PUSH
4066: LD_VAR 0 7
4070: ARRAY
4071: PUSH
4072: LD_INT 2
4074: ARRAY
4075: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4076: LD_ADDR_VAR 0 6
4080: PUSH
4081: LD_EXP 38
4085: PUSH
4086: LD_VAR 0 3
4090: ARRAY
4091: PUSH
4092: LD_VAR 0 7
4096: ARRAY
4097: PUSH
4098: LD_INT 3
4100: ARRAY
4101: ST_TO_ADDR
// bc_type := b_breastwork ;
4102: LD_ADDR_OWVAR 42
4106: PUSH
4107: LD_INT 31
4109: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4110: LD_ADDR_VAR 0 9
4114: PUSH
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: CALL_OW 47
4134: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: LD_INT 0
4149: PPUSH
4150: LD_VAR 0 9
4154: PPUSH
4155: CALL 2801 0 6
// soldiers_created := soldiers_created + 1 ;
4159: LD_ADDR_LOC 4
4163: PUSH
4164: LD_LOC 4
4168: PUSH
4169: LD_INT 1
4171: PLUS
4172: ST_TO_ADDR
// end ;
4173: GO 4021
4175: POP
4176: POP
// x := start_def [ pos ] [ 1 ] ;
4177: LD_ADDR_VAR 0 4
4181: PUSH
4182: LD_EXP 39
4186: PUSH
4187: LD_VAR 0 3
4191: ARRAY
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4197: LD_ADDR_VAR 0 5
4201: PUSH
4202: LD_EXP 39
4206: PUSH
4207: LD_VAR 0 3
4211: ARRAY
4212: PUSH
4213: LD_INT 2
4215: ARRAY
4216: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4217: LD_LOC 8
4221: PUSH
4222: LD_EXP 18
4226: MINUS
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: LD_VAR 0 4
4235: PPUSH
4236: LD_VAR 0 5
4240: PPUSH
4241: LD_INT 5
4243: PPUSH
4244: LD_INT 0
4246: PPUSH
4247: CALL 2801 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4251: LD_LOC 5
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: LD_VAR 0 4
4263: PPUSH
4264: LD_VAR 0 5
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 2801 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4279: LD_LOC 7
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: LD_VAR 0 4
4291: PPUSH
4292: LD_VAR 0 5
4296: PPUSH
4297: LD_INT 5
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL 2801 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4307: LD_LOC 6
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_VAR 0 4
4319: PPUSH
4320: LD_VAR 0 5
4324: PPUSH
4325: LD_INT 5
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL 2801 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4335: LD_EXP 10
4339: PUSH
4340: LD_INT 20
4342: PPUSH
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 321
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: AND
4357: IFFALSE 4374
// SetTech ( tech_SibDet , side , state_researched ) ;
4359: LD_INT 20
4361: PPUSH
4362: LD_VAR 0 1
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: CALL_OW 322
// if def_siberite_bomb = 1 then
4374: LD_EXP 13
4378: PUSH
4379: LD_INT 1
4381: EQUAL
4382: IFFALSE 4416
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4384: LD_INT 25
4386: PPUSH
4387: LD_VAR 0 1
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4399: LD_INT 73
4401: PPUSH
4402: LD_VAR 0 1
4406: PPUSH
4407: LD_INT 1
4409: PPUSH
4410: CALL_OW 322
// end else
4414: GO 4446
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4416: LD_INT 25
4418: PPUSH
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4431: LD_INT 73
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_INT 0
4441: PPUSH
4442: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4446: LD_INT 24
4448: PPUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: LD_INT 0
4456: PPUSH
4457: CALL_OW 322
// global_defined := true ;
4461: LD_ADDR_LOC 3
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// end ;
4469: LD_VAR 0 2
4473: RET
// function prepare_sides ; var i ; begin
4474: LD_INT 0
4476: PPUSH
4477: PPUSH
// global_units := [ ] ;
4478: LD_ADDR_LOC 2
4482: PUSH
4483: EMPTY
4484: ST_TO_ADDR
// global_defined := false ;
4485: LD_ADDR_LOC 3
4489: PUSH
4490: LD_INT 0
4492: ST_TO_ADDR
// CountClassMembers ;
4493: CALL 4543 0 0
// for i := 1 to 8 do
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: DOUBLE
4503: LD_INT 1
4505: DEC
4506: ST_TO_ADDR
4507: LD_INT 8
4509: PUSH
4510: FOR_TO
4511: IFFALSE 4536
// if Side_Positions [ i ] then
4513: LD_EXP 34
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: IFFALSE 4534
// prepare_side ( i ) ;
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL 3389 0 1
4534: GO 4510
4536: POP
4537: POP
// end ;
4538: LD_VAR 0 1
4542: RET
// function CountClassMembers ; var Mode ; begin
4543: LD_INT 0
4545: PPUSH
4546: PPUSH
// if No_Mechs then
4547: LD_EXP 15
4551: IFFALSE 4563
// Mode := 2 else
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 2
4560: ST_TO_ADDR
4561: GO 4571
// Mode := 1 ;
4563: LD_ADDR_VAR 0 2
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// neng := number_of_people ;
4571: LD_ADDR_LOC 5
4575: PUSH
4576: LD_EXP 19
4580: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4581: LD_ADDR_LOC 8
4585: PUSH
4586: LD_LOC 5
4590: PUSH
4591: LD_INT 4
4593: PUSH
4594: LD_INT 3
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_VAR 0 2
4605: ARRAY
4606: DIV
4607: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4608: LD_LOC 8
4612: PUSH
4613: LD_EXP 18
4617: LESS
4618: IFFALSE 4630
// nsol := number_of_breastworks ;
4620: LD_ADDR_LOC 8
4624: PUSH
4625: LD_EXP 18
4629: ST_TO_ADDR
// neng := neng - nsol ;
4630: LD_ADDR_LOC 5
4634: PUSH
4635: LD_LOC 5
4639: PUSH
4640: LD_LOC 8
4644: MINUS
4645: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4646: LD_ADDR_LOC 6
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 3
4658: PUSH
4659: LD_INT 2
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsci < 1 ) then
4673: LD_LOC 6
4677: PUSH
4678: LD_INT 1
4680: LESS
4681: IFFALSE 4691
// nsci := 1 ;
4683: LD_ADDR_LOC 6
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// neng := neng - nsci ;
4691: LD_ADDR_LOC 5
4695: PUSH
4696: LD_LOC 5
4700: PUSH
4701: LD_LOC 6
4705: MINUS
4706: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4707: LD_ADDR_LOC 7
4711: PUSH
4712: LD_LOC 5
4716: PUSH
4717: LD_INT 2
4719: DIV
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_VAR 0 2
4732: ARRAY
4733: ST_TO_ADDR
// neng := neng - nmech ;
4734: LD_ADDR_LOC 5
4738: PUSH
4739: LD_LOC 5
4743: PUSH
4744: LD_LOC 7
4748: MINUS
4749: ST_TO_ADDR
// if ( neng < 1 ) then
4750: LD_LOC 5
4754: PUSH
4755: LD_INT 1
4757: LESS
4758: IFFALSE 4768
// neng := 1 ;
4760: LD_ADDR_LOC 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end ;
4768: LD_VAR 0 1
4772: RET
// starting begin disable ( 98 ) ;
4773: LD_INT 98
4775: DISABLE_MARKED
// disable ( 99 ) ;
4776: LD_INT 99
4778: DISABLE_MARKED
// disable ( 400 ) ;
4779: LD_INT 400
4781: DISABLE_MARKED
// disable ( 401 ) ;
4782: LD_INT 401
4784: DISABLE_MARKED
// mp_selectmsg := true ;
4785: LD_ADDR_OWVAR 13
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4793: CALL 68 0 0
// init_map ;
4797: CALL 1224 0 0
// init_respawning ;
4801: CALL 13941 0 0
// set_shared_visions_and_alliances ;
4805: CALL 2513 0 0
// ResetFog ;
4809: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4813: LD_OWVAR 2
4817: PPUSH
4818: CALL_OW 520
// AnimateTrees ( true ) ;
4822: LD_INT 1
4824: PPUSH
4825: CALL_OW 573
// prepare_sides ;
4829: CALL 4474 0 0
// Init_Win_Condition ;
4833: CALL 7922 0 0
// ShowTimer ;
4837: CALL 7500 0 0
// music_nat := Side_Nations [ your_side ] ;
4841: LD_ADDR_OWVAR 71
4845: PUSH
4846: LD_EXP 35
4850: PUSH
4851: LD_OWVAR 2
4855: ARRAY
4856: ST_TO_ADDR
// if IAmSpec then
4857: CALL_OW 531
4861: IFFALSE 4885
// begin fogoff ( true ) ;
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4870: LD_INT 130
4872: PPUSH
4873: LD_INT 100
4875: PPUSH
4876: CALL_OW 86
// enable ( 400 ) ;
4880: LD_INT 400
4882: ENABLE_MARKED
// end else
4883: GO 4931
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4885: LD_EXP 39
4889: PUSH
4890: LD_EXP 34
4894: PUSH
4895: LD_OWVAR 2
4899: ARRAY
4900: ARRAY
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: LD_EXP 39
4910: PUSH
4911: LD_EXP 34
4915: PUSH
4916: LD_OWVAR 2
4920: ARRAY
4921: ARRAY
4922: PUSH
4923: LD_INT 2
4925: ARRAY
4926: PPUSH
4927: CALL_OW 86
// end ; InitApeman ;
4931: CALL 6008 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
4935: LD_ADDR_EXP 55
4939: PUSH
4940: LD_INT 9
4942: PUSH
4943: LD_INT 10
4945: PUSH
4946: LD_INT 11
4948: PUSH
4949: LD_INT 12
4951: PUSH
4952: LD_INT 13
4954: PUSH
4955: LD_INT 14
4957: PUSH
4958: LD_INT 15
4960: PUSH
4961: LD_INT 16
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: ST_TO_ADDR
// BeginBuildUp ;
4974: CALL 14435 0 0
// end ;
4978: END
// every 0 0$1 do
4979: GO 4981
4981: DISABLE
// if ( def_siberite_bomb > 1 ) then
4982: LD_EXP 13
4986: PUSH
4987: LD_INT 1
4989: GREATER
4990: IFFALSE 5005
// begin wait ( siberite_bomb_Delay ) ;
4992: LD_EXP 29
4996: PPUSH
4997: CALL_OW 67
// EnableSibFiss ;
5001: CALL 5006 0 0
// end ;
5005: END
// function EnableSibFiss ; var i ; begin
5006: LD_INT 0
5008: PPUSH
5009: PPUSH
// for i := 1 to 8 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_INT 8
5022: PUSH
5023: FOR_TO
5024: IFFALSE 5070
// if Side_Positions [ i ] then
5026: LD_EXP 34
5030: PUSH
5031: LD_VAR 0 2
5035: ARRAY
5036: IFFALSE 5068
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5038: LD_INT 25
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_INT 1
5048: PPUSH
5049: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5053: LD_INT 73
5055: PPUSH
5056: LD_VAR 0 2
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: CALL_OW 322
// end ;
5068: GO 5023
5070: POP
5071: POP
// end ; end_of_file
5072: LD_VAR 0 1
5076: RET
// every 0 0$25 + 0 0$1.0 do
5077: GO 5079
5079: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5080: LD_INT 20
5082: PPUSH
5083: LD_INT 1
5085: PPUSH
5086: CALL_OW 287
5090: PUSH
5091: LD_INT 200
5093: PUSH
5094: LD_EXP 23
5098: MINUS
5099: PUSH
5100: LD_INT 50
5102: DIVREAL
5103: PUSH
5104: LD_INT 5
5106: MUL
5107: LESS
5108: IFFALSE 5131
// CreateCratesArea ( Rand ( 3 , 4 ) , Between1 , true ) ;
5110: LD_INT 3
5112: PPUSH
5113: LD_INT 4
5115: PPUSH
5116: CALL_OW 12
5120: PPUSH
5121: LD_INT 20
5123: PPUSH
5124: LD_INT 1
5126: PPUSH
5127: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5131: LD_INT 21
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: CALL_OW 287
5141: PUSH
5142: LD_INT 200
5144: PUSH
5145: LD_EXP 23
5149: MINUS
5150: PUSH
5151: LD_INT 50
5153: DIVREAL
5154: PUSH
5155: LD_INT 5
5157: MUL
5158: LESS
5159: IFFALSE 5182
// CreateCratesArea ( Rand ( 3 , 4 ) , Between2 , true ) ;
5161: LD_INT 3
5163: PPUSH
5164: LD_INT 4
5166: PPUSH
5167: CALL_OW 12
5171: PPUSH
5172: LD_INT 21
5174: PPUSH
5175: LD_INT 1
5177: PPUSH
5178: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5182: LD_INT 22
5184: PPUSH
5185: LD_INT 1
5187: PPUSH
5188: CALL_OW 287
5192: PUSH
5193: LD_INT 200
5195: PUSH
5196: LD_EXP 23
5200: MINUS
5201: PUSH
5202: LD_INT 50
5204: DIVREAL
5205: PUSH
5206: LD_INT 5
5208: MUL
5209: LESS
5210: IFFALSE 5233
// CreateCratesArea ( Rand ( 3 , 4 ) , Between3 , true ) ;
5212: LD_INT 3
5214: PPUSH
5215: LD_INT 4
5217: PPUSH
5218: CALL_OW 12
5222: PPUSH
5223: LD_INT 22
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5233: LD_INT 23
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL_OW 287
5243: PUSH
5244: LD_INT 200
5246: PUSH
5247: LD_EXP 23
5251: MINUS
5252: PUSH
5253: LD_INT 50
5255: DIVREAL
5256: PUSH
5257: LD_INT 5
5259: MUL
5260: LESS
5261: IFFALSE 5284
// CreateCratesArea ( Rand ( 3 , 4 ) , Between4 , true ) ;
5263: LD_INT 3
5265: PPUSH
5266: LD_INT 4
5268: PPUSH
5269: CALL_OW 12
5273: PPUSH
5274: LD_INT 23
5276: PPUSH
5277: LD_INT 1
5279: PPUSH
5280: CALL_OW 55
// if GetResourceArea ( Center1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5284: LD_INT 18
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: CALL_OW 287
5294: PUSH
5295: LD_INT 200
5297: PUSH
5298: LD_EXP 23
5302: MINUS
5303: PUSH
5304: LD_INT 25
5306: DIVREAL
5307: PUSH
5308: LD_INT 5
5310: MUL
5311: LESS
5312: IFFALSE 5327
// CreateCratesArea ( 5 , Center1 , true ) ;
5314: LD_INT 5
5316: PPUSH
5317: LD_INT 18
5319: PPUSH
5320: LD_INT 1
5322: PPUSH
5323: CALL_OW 55
// if GetResourceArea ( Center2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5327: LD_INT 19
5329: PPUSH
5330: LD_INT 1
5332: PPUSH
5333: CALL_OW 287
5337: PUSH
5338: LD_INT 200
5340: PUSH
5341: LD_EXP 23
5345: MINUS
5346: PUSH
5347: LD_INT 25
5349: DIVREAL
5350: PUSH
5351: LD_INT 5
5353: MUL
5354: LESS
5355: IFFALSE 5370
// CreateCratesArea ( 5 , Center2 , true ) ;
5357: LD_INT 5
5359: PPUSH
5360: LD_INT 19
5362: PPUSH
5363: LD_INT 1
5365: PPUSH
5366: CALL_OW 55
// enable ;
5370: ENABLE
// end ;
5371: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5372: GO 5374
5374: DISABLE
5375: LD_INT 0
5377: PPUSH
5378: PPUSH
// begin case tick of 1 .. 1 1$0 :
5379: LD_OWVAR 1
5383: PUSH
5384: LD_INT 1
5386: DOUBLE
5387: GREATEREQUAL
5388: IFFALSE 5396
5390: LD_INT 2100
5392: DOUBLE
5393: LESSEQUAL
5394: IFTRUE 5398
5396: GO 5426
5398: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5399: LD_EXP 23
5403: PUSH
5404: LD_INT 100
5406: DIVREAL
5407: PUSH
5408: LD_INT 525
5410: PPUSH
5411: LD_INT 1050
5413: PPUSH
5414: CALL_OW 12
5418: MUL
5419: PPUSH
5420: CALL_OW 67
5424: GO 5728
5426: LD_INT 2100
5428: PUSH
5429: LD_INT 1
5431: PLUS
5432: DOUBLE
5433: GREATEREQUAL
5434: IFFALSE 5442
5436: LD_INT 10500
5438: DOUBLE
5439: LESSEQUAL
5440: IFTRUE 5444
5442: GO 5472
5444: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5445: LD_EXP 23
5449: PUSH
5450: LD_INT 100
5452: DIVREAL
5453: PUSH
5454: LD_INT 1050
5456: PPUSH
5457: LD_INT 1750
5459: PPUSH
5460: CALL_OW 12
5464: MUL
5465: PPUSH
5466: CALL_OW 67
5470: GO 5728
5472: LD_INT 10500
5474: PUSH
5475: LD_INT 1
5477: PLUS
5478: DOUBLE
5479: GREATEREQUAL
5480: IFFALSE 5488
5482: LD_INT 21000
5484: DOUBLE
5485: LESSEQUAL
5486: IFTRUE 5490
5488: GO 5518
5490: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5491: LD_EXP 23
5495: PUSH
5496: LD_INT 100
5498: DIVREAL
5499: PUSH
5500: LD_INT 1750
5502: PPUSH
5503: LD_INT 2100
5505: PPUSH
5506: CALL_OW 12
5510: MUL
5511: PPUSH
5512: CALL_OW 67
5516: GO 5728
5518: LD_INT 21000
5520: PUSH
5521: LD_INT 1
5523: PLUS
5524: DOUBLE
5525: GREATEREQUAL
5526: IFFALSE 5534
5528: LD_INT 42000
5530: DOUBLE
5531: LESSEQUAL
5532: IFTRUE 5536
5534: GO 5564
5536: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5537: LD_EXP 23
5541: PUSH
5542: LD_INT 100
5544: DIVREAL
5545: PUSH
5546: LD_INT 2100
5548: PPUSH
5549: LD_INT 2275
5551: PPUSH
5552: CALL_OW 12
5556: MUL
5557: PPUSH
5558: CALL_OW 67
5562: GO 5728
5564: LD_INT 42000
5566: PUSH
5567: LD_INT 1
5569: PLUS
5570: DOUBLE
5571: GREATEREQUAL
5572: IFFALSE 5580
5574: LD_INT 63000
5576: DOUBLE
5577: LESSEQUAL
5578: IFTRUE 5582
5580: GO 5610
5582: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5583: LD_EXP 23
5587: PUSH
5588: LD_INT 100
5590: DIVREAL
5591: PUSH
5592: LD_INT 2275
5594: PPUSH
5595: LD_INT 2450
5597: PPUSH
5598: CALL_OW 12
5602: MUL
5603: PPUSH
5604: CALL_OW 67
5608: GO 5728
5610: LD_INT 63000
5612: PUSH
5613: LD_INT 1
5615: PLUS
5616: DOUBLE
5617: GREATEREQUAL
5618: IFFALSE 5626
5620: LD_INT 105000
5622: DOUBLE
5623: LESSEQUAL
5624: IFTRUE 5628
5626: GO 5656
5628: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5629: LD_EXP 23
5633: PUSH
5634: LD_INT 100
5636: DIVREAL
5637: PUSH
5638: LD_INT 2450
5640: PPUSH
5641: LD_INT 2800
5643: PPUSH
5644: CALL_OW 12
5648: MUL
5649: PPUSH
5650: CALL_OW 67
5654: GO 5728
5656: LD_INT 105000
5658: PUSH
5659: LD_INT 1
5661: PLUS
5662: DOUBLE
5663: GREATEREQUAL
5664: IFFALSE 5672
5666: LD_INT 630000
5668: DOUBLE
5669: LESSEQUAL
5670: IFTRUE 5674
5672: GO 5702
5674: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5675: LD_EXP 23
5679: PUSH
5680: LD_INT 100
5682: DIVREAL
5683: PUSH
5684: LD_INT 2800
5686: PPUSH
5687: LD_INT 3500
5689: PPUSH
5690: CALL_OW 12
5694: MUL
5695: PPUSH
5696: CALL_OW 67
5700: GO 5728
5702: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5703: LD_EXP 23
5707: PUSH
5708: LD_INT 100
5710: DIVREAL
5711: PUSH
5712: LD_INT 3500
5714: PPUSH
5715: LD_INT 3850
5717: PPUSH
5718: CALL_OW 12
5722: MUL
5723: PPUSH
5724: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5728: LD_ADDR_VAR 0 2
5732: PUSH
5733: LD_INT 3
5735: PPUSH
5736: LD_INT 5
5738: PPUSH
5739: CALL_OW 12
5743: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5744: LD_ADDR_VAR 0 1
5748: PUSH
5749: LD_EXP 34
5753: PUSH
5754: LD_INT 0
5756: PUSH
5757: EMPTY
5758: LIST
5759: DIFF
5760: PUSH
5761: FOR_IN
5762: IFFALSE 5811
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5764: LD_VAR 0 2
5768: PPUSH
5769: LD_EXP 39
5773: PUSH
5774: LD_VAR 0 1
5778: ARRAY
5779: PUSH
5780: LD_INT 1
5782: ARRAY
5783: PPUSH
5784: LD_EXP 39
5788: PUSH
5789: LD_VAR 0 1
5793: ARRAY
5794: PUSH
5795: LD_INT 2
5797: ARRAY
5798: PPUSH
5799: LD_INT 20
5801: PPUSH
5802: LD_INT 1
5804: PPUSH
5805: CALL_OW 56
5809: GO 5761
5811: POP
5812: POP
// enable ;
5813: ENABLE
// end ; end_of_file
5814: PPOPN 2
5816: END
// every 20 20$00 trigger apemanNumber do
5817: LD_EXP 46
5821: IFFALSE 5854
5823: GO 5825
5825: DISABLE
// begin enable ;
5826: ENABLE
// if apeLevel >= 8 then
5827: LD_EXP 51
5831: PUSH
5832: LD_INT 8
5834: GREATEREQUAL
5835: IFFALSE 5840
// disable else
5837: DISABLE
5838: GO 5854
// apeLevel := apeLevel + 1 ;
5840: LD_ADDR_EXP 51
5844: PUSH
5845: LD_EXP 51
5849: PUSH
5850: LD_INT 1
5852: PLUS
5853: ST_TO_ADDR
// end ;
5854: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5855: LD_EXP 46
5859: PUSH
5860: LD_EXP 47
5864: LESS
5865: IFFALSE 6005
5867: GO 5869
5869: DISABLE
5870: LD_INT 0
5872: PPUSH
5873: PPUSH
5874: PPUSH
5875: PPUSH
// begin enable ;
5876: ENABLE
// for i := 1 to apemanPos do
5877: LD_ADDR_VAR 0 1
5881: PUSH
5882: DOUBLE
5883: LD_INT 1
5885: DEC
5886: ST_TO_ADDR
5887: LD_EXP 49
5891: PUSH
5892: FOR_TO
5893: IFFALSE 6003
// begin if apemanPlayerCount [ i ] then
5895: LD_EXP 50
5899: PUSH
5900: LD_VAR 0 1
5904: ARRAY
5905: IFFALSE 6001
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5907: LD_EXP 50
5911: PUSH
5912: LD_VAR 0 1
5916: ARRAY
5917: PUSH
5918: LD_EXP 49
5922: PUSH
5923: LD_VAR 0 1
5927: ARRAY
5928: GREATER
5929: IFFALSE 6001
// begin ape := PrepareApeman ;
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: CALL 6524 0 0
5940: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5941: LD_VAR 0 2
5945: PPUSH
5946: LD_EXP 52
5950: PUSH
5951: LD_VAR 0 1
5955: ARRAY
5956: PPUSH
5957: LD_INT 0
5959: PPUSH
5960: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5964: LD_ADDR_EXP 49
5968: PUSH
5969: LD_EXP 49
5973: PPUSH
5974: LD_VAR 0 1
5978: PPUSH
5979: LD_EXP 49
5983: PUSH
5984: LD_VAR 0 1
5988: ARRAY
5989: PUSH
5990: LD_VAR 0 2
5994: UNION
5995: PPUSH
5996: CALL_OW 1
6000: ST_TO_ADDR
// end ; end ; end ;
6001: GO 5892
6003: POP
6004: POP
// end ;
6005: PPOPN 4
6007: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6008: LD_INT 0
6010: PPUSH
6011: PPUSH
6012: PPUSH
6013: PPUSH
6014: PPUSH
6015: PPUSH
6016: PPUSH
// playersAmount := 0 ;
6017: LD_ADDR_VAR 0 3
6021: PUSH
6022: LD_INT 0
6024: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6025: LD_ADDR_VAR 0 7
6029: PUSH
6030: LD_INT 1
6032: PUSH
6033: LD_INT 2
6035: PUSH
6036: LD_INT 3
6038: PUSH
6039: LD_INT 4
6041: PUSH
6042: LD_INT 5
6044: PUSH
6045: LD_INT 6
6047: PUSH
6048: LD_INT 7
6050: PUSH
6051: LD_INT 8
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6064: LD_ADDR_EXP 52
6068: PUSH
6069: LD_INT 0
6071: PUSH
6072: LD_INT 0
6074: PUSH
6075: LD_INT 0
6077: PUSH
6078: LD_INT 0
6080: PUSH
6081: LD_INT 0
6083: PUSH
6084: LD_INT 0
6086: PUSH
6087: LD_INT 0
6089: PUSH
6090: LD_INT 0
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: ST_TO_ADDR
// for j = 1 to Side_Positions do
6103: LD_ADDR_VAR 0 4
6107: PUSH
6108: DOUBLE
6109: LD_INT 1
6111: DEC
6112: ST_TO_ADDR
6113: LD_EXP 34
6117: PUSH
6118: FOR_TO
6119: IFFALSE 6186
// if Side_Positions [ j ] then
6121: LD_EXP 34
6125: PUSH
6126: LD_VAR 0 4
6130: ARRAY
6131: IFFALSE 6184
// begin playersAmount := playersAmount + 1 ;
6133: LD_ADDR_VAR 0 3
6137: PUSH
6138: LD_VAR 0 3
6142: PUSH
6143: LD_INT 1
6145: PLUS
6146: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6147: LD_ADDR_EXP 52
6151: PUSH
6152: LD_EXP 52
6156: PPUSH
6157: LD_VAR 0 4
6161: PPUSH
6162: LD_VAR 0 7
6166: PUSH
6167: LD_EXP 34
6171: PUSH
6172: LD_VAR 0 4
6176: ARRAY
6177: ARRAY
6178: PPUSH
6179: CALL_OW 1
6183: ST_TO_ADDR
// end ;
6184: GO 6118
6186: POP
6187: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6188: LD_ADDR_EXP 48
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: LD_EXP 25
6200: MUL
6201: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6202: LD_ADDR_EXP 46
6206: PUSH
6207: LD_VAR 0 3
6211: PUSH
6212: LD_EXP 48
6216: MUL
6217: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6218: LD_ADDR_EXP 47
6222: PUSH
6223: LD_EXP 46
6227: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6228: LD_ADDR_EXP 49
6232: PUSH
6233: LD_INT 0
6235: PUSH
6236: LD_INT 0
6238: PUSH
6239: LD_INT 0
6241: PUSH
6242: LD_INT 0
6244: PUSH
6245: LD_INT 0
6247: PUSH
6248: LD_INT 0
6250: PUSH
6251: LD_INT 0
6253: PUSH
6254: LD_INT 0
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6267: LD_ADDR_EXP 50
6271: PUSH
6272: LD_INT 0
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: LD_INT 0
6280: PUSH
6281: LD_INT 0
6283: PUSH
6284: LD_INT 0
6286: PUSH
6287: LD_INT 0
6289: PUSH
6290: LD_INT 0
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: ST_TO_ADDR
// apeLevel := 1 ;
6306: LD_ADDR_EXP 51
6310: PUSH
6311: LD_INT 1
6313: ST_TO_ADDR
// if not apemanNumber then
6314: LD_EXP 46
6318: NOT
6319: IFFALSE 6323
// exit ;
6321: GO 6519
// for i := 1 to apemanPerPlayer do
6323: LD_ADDR_VAR 0 2
6327: PUSH
6328: DOUBLE
6329: LD_INT 1
6331: DEC
6332: ST_TO_ADDR
6333: LD_EXP 48
6337: PUSH
6338: FOR_TO
6339: IFFALSE 6517
// begin for j := 1 to Side_Positions do
6341: LD_ADDR_VAR 0 4
6345: PUSH
6346: DOUBLE
6347: LD_INT 1
6349: DEC
6350: ST_TO_ADDR
6351: LD_EXP 34
6355: PUSH
6356: FOR_TO
6357: IFFALSE 6513
// if Side_Positions [ j ] then
6359: LD_EXP 34
6363: PUSH
6364: LD_VAR 0 4
6368: ARRAY
6369: IFFALSE 6511
// begin pos := Side_Positions [ j ] ;
6371: LD_ADDR_VAR 0 6
6375: PUSH
6376: LD_EXP 34
6380: PUSH
6381: LD_VAR 0 4
6385: ARRAY
6386: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6387: LD_ADDR_EXP 50
6391: PUSH
6392: LD_EXP 50
6396: PPUSH
6397: LD_VAR 0 4
6401: PPUSH
6402: LD_EXP 50
6406: PUSH
6407: LD_VAR 0 4
6411: ARRAY
6412: PUSH
6413: LD_INT 1
6415: PLUS
6416: PPUSH
6417: CALL_OW 1
6421: ST_TO_ADDR
// ape := PrepareApeman ;
6422: LD_ADDR_VAR 0 5
6426: PUSH
6427: CALL 6524 0 0
6431: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6432: LD_ADDR_EXP 49
6436: PUSH
6437: LD_EXP 49
6441: PPUSH
6442: LD_VAR 0 4
6446: PPUSH
6447: LD_EXP 49
6451: PUSH
6452: LD_VAR 0 4
6456: ARRAY
6457: PPUSH
6458: LD_EXP 49
6462: PUSH
6463: LD_VAR 0 4
6467: ARRAY
6468: PUSH
6469: LD_INT 1
6471: PLUS
6472: PPUSH
6473: LD_VAR 0 5
6477: PPUSH
6478: CALL_OW 1
6482: PPUSH
6483: CALL_OW 1
6487: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6488: LD_VAR 0 5
6492: PPUSH
6493: LD_EXP 52
6497: PUSH
6498: LD_VAR 0 4
6502: ARRAY
6503: PPUSH
6504: LD_INT 0
6506: PPUSH
6507: CALL_OW 49
// end ;
6511: GO 6356
6513: POP
6514: POP
// end ;
6515: GO 6338
6517: POP
6518: POP
// end ;
6519: LD_VAR 0 1
6523: RET
// export function PrepareApeman ; var bonus ; begin
6524: LD_INT 0
6526: PPUSH
6527: PPUSH
// uc_side := 0 ;
6528: LD_ADDR_OWVAR 20
6532: PUSH
6533: LD_INT 0
6535: ST_TO_ADDR
// uc_nation := 0 ;
6536: LD_ADDR_OWVAR 21
6540: PUSH
6541: LD_INT 0
6543: ST_TO_ADDR
// InitHc ;
6544: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: LD_INT 1
6555: NEG
6556: PUSH
6557: LD_INT 0
6559: PUSH
6560: LD_INT 1
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 25
6570: PUSH
6571: LD_INT 12
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PPUSH
6578: CALL_OW 69
6582: PUSH
6583: LD_INT 3
6585: MOD
6586: PUSH
6587: LD_INT 1
6589: PLUS
6590: ARRAY
6591: ST_TO_ADDR
// hc_class := class_apeman ;
6592: LD_ADDR_OWVAR 28
6596: PUSH
6597: LD_INT 12
6599: ST_TO_ADDR
// hc_gallery :=  ;
6600: LD_ADDR_OWVAR 33
6604: PUSH
6605: LD_STRING 
6607: ST_TO_ADDR
// hc_name :=  ;
6608: LD_ADDR_OWVAR 26
6612: PUSH
6613: LD_STRING 
6615: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6616: LD_ADDR_OWVAR 31
6620: PUSH
6621: LD_EXP 51
6625: PUSH
6626: LD_VAR 0 2
6630: PLUS
6631: PUSH
6632: LD_EXP 51
6636: PUSH
6637: LD_VAR 0 2
6641: PLUS
6642: PUSH
6643: LD_EXP 51
6647: PUSH
6648: LD_VAR 0 2
6652: PLUS
6653: PUSH
6654: LD_EXP 51
6658: PUSH
6659: LD_VAR 0 2
6663: PLUS
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6671: LD_ADDR_OWVAR 35
6675: PUSH
6676: LD_INT 10
6678: PUSH
6679: LD_VAR 0 2
6683: MUL
6684: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6685: LD_ADDR_OWVAR 29
6689: PUSH
6690: LD_INT 12
6692: PUSH
6693: LD_INT 12
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: ST_TO_ADDR
// result := CreateHuman ;
6700: LD_ADDR_VAR 0 1
6704: PUSH
6705: CALL_OW 44
6709: ST_TO_ADDR
// end ;
6710: LD_VAR 0 1
6714: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6715: LD_INT 0
6717: PPUSH
6718: PPUSH
6719: PPUSH
// if not ape then
6720: LD_VAR 0 1
6724: NOT
6725: IFFALSE 6729
// exit ;
6727: GO 6854
// side := GetSide ( ape ) ;
6729: LD_ADDR_VAR 0 3
6733: PUSH
6734: LD_VAR 0 1
6738: PPUSH
6739: CALL_OW 255
6743: ST_TO_ADDR
// if not side then
6744: LD_VAR 0 3
6748: NOT
6749: IFFALSE 6803
// begin for i = 1 to apemanPos do
6751: LD_ADDR_VAR 0 4
6755: PUSH
6756: DOUBLE
6757: LD_INT 1
6759: DEC
6760: ST_TO_ADDR
6761: LD_EXP 49
6765: PUSH
6766: FOR_TO
6767: IFFALSE 6801
// if ape in apemanPos [ i ] then
6769: LD_VAR 0 1
6773: PUSH
6774: LD_EXP 49
6778: PUSH
6779: LD_VAR 0 4
6783: ARRAY
6784: IN
6785: IFFALSE 6799
// begin side := i ;
6787: LD_ADDR_VAR 0 3
6791: PUSH
6792: LD_VAR 0 4
6796: ST_TO_ADDR
// break ;
6797: GO 6801
// end ;
6799: GO 6766
6801: POP
6802: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6803: LD_ADDR_EXP 49
6807: PUSH
6808: LD_EXP 49
6812: PPUSH
6813: LD_VAR 0 3
6817: PPUSH
6818: LD_EXP 49
6822: PUSH
6823: LD_VAR 0 3
6827: ARRAY
6828: PUSH
6829: LD_VAR 0 1
6833: DIFF
6834: PPUSH
6835: CALL_OW 1
6839: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6840: LD_ADDR_EXP 46
6844: PUSH
6845: LD_EXP 46
6849: PUSH
6850: LD_INT 1
6852: MINUS
6853: ST_TO_ADDR
// end ; end_of_file
6854: LD_VAR 0 2
6858: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6859: LD_VAR 0 1
6863: PPUSH
6864: CALL_OW 266
6868: PUSH
6869: LD_INT 0
6871: PUSH
6872: LD_INT 1
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: IN
6879: IFFALSE 6904
// SetBName ( b , @ & GetSide ( b ) ) ;
6881: LD_VAR 0 1
6885: PPUSH
6886: LD_STRING @
6888: PUSH
6889: LD_VAR 0 1
6893: PPUSH
6894: CALL_OW 255
6898: STR
6899: PPUSH
6900: CALL_OW 500
// end ;
6904: PPOPN 2
6906: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6907: LD_VAR 0 1
6911: PPUSH
6912: CALL_OW 266
6916: PUSH
6917: LD_INT 0
6919: PUSH
6920: LD_INT 1
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: IN
6927: IFFALSE 6952
// SetBName ( b , @ & GetSide ( b ) ) ;
6929: LD_VAR 0 1
6933: PPUSH
6934: LD_STRING @
6936: PUSH
6937: LD_VAR 0 1
6941: PPUSH
6942: CALL_OW 255
6946: STR
6947: PPUSH
6948: CALL_OW 500
// end ;
6952: PPOPN 3
6954: END
// on VehicleConstructed ( veh , fac ) do var side ;
6955: LD_INT 0
6957: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6958: LD_VAR 0 1
6962: PPUSH
6963: CALL_OW 263
6967: PUSH
6968: LD_INT 5
6970: EQUAL
6971: IFFALSE 7113
// begin side := GetSide ( veh ) ;
6973: LD_ADDR_VAR 0 3
6977: PUSH
6978: LD_VAR 0 1
6982: PPUSH
6983: CALL_OW 255
6987: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6988: LD_ADDR_EXP 49
6992: PUSH
6993: LD_EXP 49
6997: PPUSH
6998: LD_VAR 0 3
7002: PPUSH
7003: LD_EXP 49
7007: PUSH
7008: LD_VAR 0 3
7012: ARRAY
7013: PPUSH
7014: LD_INT 52
7016: PUSH
7017: EMPTY
7018: LIST
7019: PPUSH
7020: CALL_OW 72
7024: PUSH
7025: LD_INT 22
7027: PUSH
7028: LD_VAR 0 3
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: LD_INT 33
7042: PUSH
7043: LD_INT 5
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 25
7052: PUSH
7053: LD_INT 12
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 25
7062: PUSH
7063: LD_INT 15
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 25
7072: PUSH
7073: LD_INT 16
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 25
7082: PUSH
7083: LD_INT 17
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PPUSH
7102: CALL_OW 69
7106: UNION
7107: PPUSH
7108: CALL_OW 1
7112: ST_TO_ADDR
// end ; end ;
7113: PPOPN 3
7115: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7116: LD_INT 0
7118: PPUSH
7119: PPUSH
7120: PPUSH
7121: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7122: LD_VAR 0 1
7126: PPUSH
7127: CALL_OW 257
7131: PUSH
7132: LD_INT 12
7134: PUSH
7135: LD_INT 15
7137: PUSH
7138: LD_INT 17
7140: PUSH
7141: LD_INT 16
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: IN
7150: PUSH
7151: LD_VAR 0 1
7155: PPUSH
7156: CALL_OW 263
7160: PUSH
7161: LD_INT 5
7163: EQUAL
7164: OR
7165: IFFALSE 7176
// ApeKilled ( j ) ;
7167: LD_VAR 0 1
7171: PPUSH
7172: CALL 6715 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7176: LD_VAR 0 1
7180: PPUSH
7181: CALL_OW 266
7185: PUSH
7186: LD_INT 0
7188: PUSH
7189: LD_INT 1
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: IN
7196: IFFALSE 7278
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7198: LD_ADDR_VAR 0 4
7202: PUSH
7203: LD_EXP 34
7207: PUSH
7208: LD_VAR 0 1
7212: PPUSH
7213: CALL_OW 255
7217: ARRAY
7218: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7219: LD_ADDR_VAR 0 2
7223: PUSH
7224: LD_EXP 39
7228: PUSH
7229: LD_VAR 0 4
7233: ARRAY
7234: PUSH
7235: LD_INT 1
7237: ARRAY
7238: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7239: LD_ADDR_VAR 0 3
7243: PUSH
7244: LD_EXP 39
7248: PUSH
7249: LD_VAR 0 4
7253: ARRAY
7254: PUSH
7255: LD_INT 2
7257: ARRAY
7258: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7259: LD_VAR 0 2
7263: PPUSH
7264: LD_VAR 0 3
7268: PPUSH
7269: CALL_OW 420
7273: PPUSH
7274: CALL_OW 419
// end ; end ;
7278: PPOPN 5
7280: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7281: LD_VAR 0 1
7285: PPUSH
7286: LD_VAR 0 2
7290: PPUSH
7291: LD_VAR 0 3
7295: PPUSH
7296: LD_OWVAR 2
7300: PPUSH
7301: CALL 7683 0 4
7305: PPOPN 3
7307: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7308: LD_INT 0
7310: PPUSH
7311: PPUSH
// for un in battle_flags_id do
7312: LD_ADDR_VAR 0 2
7316: PUSH
7317: LD_EXP 44
7321: PUSH
7322: FOR_IN
7323: IFFALSE 7398
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7325: LD_VAR 0 2
7329: PPUSH
7330: LD_INT 1
7332: PUSH
7333: LD_LOC 9
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 2
7344: PUSH
7345: LD_LOC 9
7349: PUSH
7350: LD_INT 2
7352: DIV
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: LD_LOC 9
7365: PUSH
7366: LD_INT 5
7368: DIV
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 20
7376: PUSH
7377: LD_LOC 9
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 423
7396: GO 7322
7398: POP
7399: POP
// end ;
7400: LD_VAR 0 1
7404: RET
// every 1 do var un ;
7405: GO 7407
7407: DISABLE
7408: LD_INT 0
7410: PPUSH
// begin if not def_morale_flags then
7411: LD_EXP 9
7415: NOT
7416: IFFALSE 7420
// exit ;
7418: GO 7497
// if not morale_decreasing_time then
7420: LD_EXP 24
7424: NOT
7425: IFFALSE 7429
// exit ;
7427: GO 7497
// strength = 100 ;
7429: LD_ADDR_LOC 9
7433: PUSH
7434: LD_INT 100
7436: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7437: LD_EXP 24
7441: PPUSH
7442: CALL_OW 67
// strength := strength - 1 ;
7446: LD_ADDR_LOC 9
7450: PUSH
7451: LD_LOC 9
7455: PUSH
7456: LD_INT 1
7458: MINUS
7459: ST_TO_ADDR
// Update_Flags ;
7460: CALL 7308 0 0
// until not strength ;
7464: LD_LOC 9
7468: NOT
7469: IFFALSE 7437
// for un in battle_flags_id do
7471: LD_ADDR_VAR 0 1
7475: PUSH
7476: LD_EXP 44
7480: PUSH
7481: FOR_IN
7482: IFFALSE 7495
// KillBattleFlag ( un ) ;
7484: LD_VAR 0 1
7488: PPUSH
7489: CALL_OW 419
7493: GO 7481
7495: POP
7496: POP
// end ; end_of_file
7497: PPOPN 1
7499: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7500: LD_INT 0
7502: PPUSH
7503: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7504: LD_ADDR_VAR 0 2
7508: PUSH
7509: LD_STRING #Multi1x1-Time
7511: PUSH
7512: LD_OWVAR 1
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: ST_TO_ADDR
// if WaitServerStrings then
7521: LD_EXP 54
7525: IFFALSE 7543
// AllStrings = AllStrings ^ WaitServerStrings ;
7527: LD_ADDR_VAR 0 2
7531: PUSH
7532: LD_VAR 0 2
7536: PUSH
7537: LD_EXP 54
7541: ADD
7542: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7543: LD_INT 0
7545: PUSH
7546: LD_EXP 29
7550: PUSH
7551: LD_OWVAR 1
7555: MINUS
7556: LESSEQUAL
7557: IFFALSE 7588
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7559: LD_ADDR_VAR 0 2
7563: PUSH
7564: LD_VAR 0 2
7568: PUSH
7569: LD_STRING #allowedsibbomb
7571: PUSH
7572: LD_EXP 29
7576: PUSH
7577: LD_OWVAR 1
7581: MINUS
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: ADD
7587: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7588: LD_INT 0
7590: PUSH
7591: LD_EXP 57
7595: PUSH
7596: LD_OWVAR 1
7600: MINUS
7601: LESSEQUAL
7602: IFFALSE 7633
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7604: LD_ADDR_VAR 0 2
7608: PUSH
7609: LD_VAR 0 2
7613: PUSH
7614: LD_STRING #builduptime
7616: PUSH
7617: LD_EXP 57
7621: PUSH
7622: LD_OWVAR 1
7626: MINUS
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: ADD
7632: ST_TO_ADDR
// if ( ExtraStrings ) then
7633: LD_EXP 53
7637: IFFALSE 7659
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7639: LD_ADDR_VAR 0 2
7643: PUSH
7644: LD_VAR 0 2
7648: PUSH
7649: LD_STRING 
7651: ADD
7652: PUSH
7653: LD_EXP 53
7657: ADD
7658: ST_TO_ADDR
// Display_Strings := AllStrings ;
7659: LD_ADDR_OWVAR 47
7663: PUSH
7664: LD_VAR 0 2
7668: ST_TO_ADDR
// end ;
7669: LD_VAR 0 1
7673: RET
// every 0 0$1 do
7674: GO 7676
7676: DISABLE
// begin ShowTimer ;
7677: CALL 7500 0 0
// enable ;
7681: ENABLE
// end ; end_of_file
7682: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7683: LD_INT 0
7685: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7686: LD_VAR 0 1
7690: PPUSH
7691: CALL_OW 255
7695: PUSH
7696: LD_VAR 0 4
7700: EQUAL
7701: IFFALSE 7720
// begin SetAchievement ( ACH_RAD ) ;
7703: LD_STRING ACH_RAD
7705: PPUSH
7706: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7710: LD_STRING ACH_NL
7712: PPUSH
7713: LD_INT 1
7715: PPUSH
7716: CALL_OW 564
// end end ;
7720: LD_VAR 0 5
7724: RET
// export function SA_Win ( side ) ; begin
7725: LD_INT 0
7727: PPUSH
// case side of 1 :
7728: LD_VAR 0 1
7732: PUSH
7733: LD_INT 1
7735: DOUBLE
7736: EQUAL
7737: IFTRUE 7741
7739: GO 7754
7741: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7742: LD_STRING ACH_AH
7744: PPUSH
7745: LD_INT 1
7747: PPUSH
7748: CALL_OW 564
7752: GO 7917
7754: LD_INT 2
7756: DOUBLE
7757: EQUAL
7758: IFTRUE 7762
7760: GO 7775
7762: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7763: LD_STRING ACH_E
7765: PPUSH
7766: LD_INT 1
7768: PPUSH
7769: CALL_OW 564
7773: GO 7917
7775: LD_INT 3
7777: DOUBLE
7778: EQUAL
7779: IFTRUE 7783
7781: GO 7796
7783: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7784: LD_STRING ACH_OOL
7786: PPUSH
7787: LD_INT 1
7789: PPUSH
7790: CALL_OW 564
7794: GO 7917
7796: LD_INT 1
7798: PUSH
7799: LD_INT 2
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: DOUBLE
7806: EQUAL
7807: IFTRUE 7811
7809: GO 7836
7811: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7812: LD_STRING ACH_AH
7814: PPUSH
7815: LD_REAL  5.00000000000000E-0001
7818: PPUSH
7819: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7823: LD_STRING ACH_E
7825: PPUSH
7826: LD_REAL  5.00000000000000E-0001
7829: PPUSH
7830: CALL_OW 564
// end ; [ 2 , 3 ] :
7834: GO 7917
7836: LD_INT 2
7838: PUSH
7839: LD_INT 3
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: DOUBLE
7846: EQUAL
7847: IFTRUE 7851
7849: GO 7876
7851: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7852: LD_STRING ACH_OOL
7854: PPUSH
7855: LD_REAL  5.00000000000000E-0001
7858: PPUSH
7859: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7863: LD_STRING ACH_E
7865: PPUSH
7866: LD_REAL  5.00000000000000E-0001
7869: PPUSH
7870: CALL_OW 564
// end ; [ 3 , 1 ] :
7874: GO 7917
7876: LD_INT 3
7878: PUSH
7879: LD_INT 1
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: DOUBLE
7886: EQUAL
7887: IFTRUE 7891
7889: GO 7916
7891: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7892: LD_STRING ACH_AH
7894: PPUSH
7895: LD_REAL  5.00000000000000E-0001
7898: PPUSH
7899: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7903: LD_STRING ACH_OOL
7905: PPUSH
7906: LD_REAL  5.00000000000000E-0001
7909: PPUSH
7910: CALL_OW 564
// end ; end ;
7914: GO 7917
7916: POP
// end ; end_of_file
7917: LD_VAR 0 2
7921: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7922: LD_INT 0
7924: PPUSH
7925: PPUSH
// enable ( 98 ) ;
7926: LD_INT 98
7928: ENABLE_MARKED
// GameEnded = false ;
7929: LD_ADDR_LOC 15
7933: PUSH
7934: LD_INT 0
7936: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7937: LD_ADDR_LOC 14
7941: PUSH
7942: LD_INT 0
7944: PUSH
7945: LD_INT 0
7947: PUSH
7948: LD_INT 0
7950: PUSH
7951: LD_INT 0
7953: PUSH
7954: LD_INT 0
7956: PUSH
7957: LD_INT 0
7959: PUSH
7960: LD_INT 0
7962: PUSH
7963: LD_INT 0
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: ST_TO_ADDR
// unfoged = false ;
7976: LD_ADDR_LOC 16
7980: PUSH
7981: LD_INT 0
7983: ST_TO_ADDR
// defeated_specs := [ ] ;
7984: LD_ADDR_LOC 17
7988: PUSH
7989: EMPTY
7990: ST_TO_ADDR
// for i = 1 to side_positions do
7991: LD_ADDR_VAR 0 2
7995: PUSH
7996: DOUBLE
7997: LD_INT 1
7999: DEC
8000: ST_TO_ADDR
8001: LD_EXP 34
8005: PUSH
8006: FOR_TO
8007: IFFALSE 8047
// if not side_positions [ i ] then
8009: LD_EXP 34
8013: PUSH
8014: LD_VAR 0 2
8018: ARRAY
8019: NOT
8020: IFFALSE 8045
// defeated = replace ( defeated , i , true ) ;
8022: LD_ADDR_LOC 14
8026: PUSH
8027: LD_LOC 14
8031: PPUSH
8032: LD_VAR 0 2
8036: PPUSH
8037: LD_INT 1
8039: PPUSH
8040: CALL_OW 1
8044: ST_TO_ADDR
8045: GO 8006
8047: POP
8048: POP
// end ;
8049: LD_VAR 0 1
8053: RET
// function CanWinLoose ; begin
8054: LD_INT 0
8056: PPUSH
// Result := true ;
8057: LD_ADDR_VAR 0 1
8061: PUSH
8062: LD_INT 1
8064: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8065: CALL_OW 518
8069: PUSH
8070: CALL_OW 519
8074: PUSH
8075: LD_INT 0
8077: GREATER
8078: AND
8079: IFFALSE 8089
// Result := false ;
8081: LD_ADDR_VAR 0 1
8085: PUSH
8086: LD_INT 0
8088: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8089: CALL_OW 531
8093: PUSH
8094: CALL_OW 519
8098: PUSH
8099: LD_INT 1
8101: GREATER
8102: AND
8103: IFFALSE 8113
// Result := false ;
8105: LD_ADDR_VAR 0 1
8109: PUSH
8110: LD_INT 0
8112: ST_TO_ADDR
// end ;
8113: LD_VAR 0 1
8117: RET
// export function HasPower ( i ) ; var k , h ; begin
8118: LD_INT 0
8120: PPUSH
8121: PPUSH
8122: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8123: LD_VAR 0 1
8127: PPUSH
8128: CALL_OW 108
8132: NOT
8133: PUSH
8134: LD_EXP 33
8138: PUSH
8139: LD_VAR 0 1
8143: ARRAY
8144: NOT
8145: AND
8146: PUSH
8147: LD_OWVAR 4
8151: AND
8152: IFFALSE 8164
// begin result = false ;
8154: LD_ADDR_VAR 0 2
8158: PUSH
8159: LD_INT 0
8161: ST_TO_ADDR
// end else
8162: GO 8459
// case def_win_rules of 0 :
8164: LD_EXP 30
8168: PUSH
8169: LD_INT 0
8171: DOUBLE
8172: EQUAL
8173: IFTRUE 8177
8175: GO 8340
8177: POP
// if def_people_respawning then
8178: LD_EXP 11
8182: IFFALSE 8273
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8184: LD_ADDR_VAR 0 2
8188: PUSH
8189: LD_INT 22
8191: PUSH
8192: LD_VAR 0 1
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 2
8203: PUSH
8204: LD_INT 21
8206: PUSH
8207: LD_INT 1
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 33
8216: PUSH
8217: LD_INT 3
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 33
8226: PUSH
8227: LD_INT 5
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 30
8236: PUSH
8237: LD_INT 0
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: LD_INT 30
8246: PUSH
8247: LD_INT 1
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: PPUSH
8266: CALL_OW 69
8270: ST_TO_ADDR
8271: GO 8338
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8273: LD_ADDR_VAR 0 2
8277: PUSH
8278: LD_INT 22
8280: PUSH
8281: LD_VAR 0 1
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: LD_INT 21
8295: PUSH
8296: LD_INT 1
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 33
8305: PUSH
8306: LD_INT 3
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: LD_INT 33
8315: PUSH
8316: LD_INT 5
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PPUSH
8333: CALL_OW 69
8337: ST_TO_ADDR
8338: GO 8459
8340: LD_INT 1
8342: DOUBLE
8343: EQUAL
8344: IFTRUE 8348
8346: GO 8387
8348: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8349: LD_ADDR_VAR 0 2
8353: PUSH
8354: LD_INT 22
8356: PUSH
8357: LD_VAR 0 1
8361: PUSH
8362: EMPTY
8363: LIST
8364: LIST
8365: PUSH
8366: LD_INT 21
8368: PUSH
8369: LD_INT 1
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PPUSH
8380: CALL_OW 69
8384: ST_TO_ADDR
8385: GO 8459
8387: LD_INT 2
8389: DOUBLE
8390: EQUAL
8391: IFTRUE 8395
8393: GO 8458
8395: POP
// begin h = false ;
8396: LD_ADDR_VAR 0 4
8400: PUSH
8401: LD_INT 0
8403: ST_TO_ADDR
// for k in heroes [ i ] do
8404: LD_ADDR_VAR 0 3
8408: PUSH
8409: LD_EXP 45
8413: PUSH
8414: LD_VAR 0 1
8418: ARRAY
8419: PUSH
8420: FOR_IN
8421: IFFALSE 8444
// if IsLive ( k ) then
8423: LD_VAR 0 3
8427: PPUSH
8428: CALL_OW 300
8432: IFFALSE 8442
// h = true ;
8434: LD_ADDR_VAR 0 4
8438: PUSH
8439: LD_INT 1
8441: ST_TO_ADDR
8442: GO 8420
8444: POP
8445: POP
// Result := h ;
8446: LD_ADDR_VAR 0 2
8450: PUSH
8451: LD_VAR 0 4
8455: ST_TO_ADDR
// end ; end ;
8456: GO 8459
8458: POP
// end ;
8459: LD_VAR 0 2
8463: RET
// function AlliedSides ( i , j ) ; begin
8464: LD_INT 0
8466: PPUSH
// Result := false ;
8467: LD_ADDR_VAR 0 3
8471: PUSH
8472: LD_INT 0
8474: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8475: LD_VAR 0 1
8479: PPUSH
8480: LD_VAR 0 2
8484: PPUSH
8485: CALL_OW 81
8489: PUSH
8490: LD_INT 1
8492: EQUAL
8493: PUSH
8494: LD_VAR 0 2
8498: PPUSH
8499: LD_VAR 0 1
8503: PPUSH
8504: CALL_OW 81
8508: PUSH
8509: LD_INT 1
8511: EQUAL
8512: AND
8513: PUSH
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 83
8523: AND
8524: PUSH
8525: LD_VAR 0 2
8529: PPUSH
8530: CALL_OW 83
8534: AND
8535: IFFALSE 8545
// Result := true ;
8537: LD_ADDR_VAR 0 3
8541: PUSH
8542: LD_INT 1
8544: ST_TO_ADDR
// end ;
8545: LD_VAR 0 3
8549: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8550: CALL 8054 0 0
8554: PUSH
8555: LD_LOC 15
8559: NOT
8560: AND
8561: IFFALSE 8577
8563: GO 8565
8565: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8566: LD_ADDR_EXP 54
8570: PUSH
8571: LD_STRING #Player-Ended
8573: PUSH
8574: EMPTY
8575: LIST
8576: ST_TO_ADDR
8577: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8578: CALL 8054 0 0
8582: PUSH
8583: LD_LOC 15
8587: AND
8588: IFFALSE 8597
8590: GO 8592
8592: DISABLE
// YouLostInMultiplayer ;
8593: CALL_OW 107
8597: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8598: CALL 8054 0 0
8602: NOT
8603: PUSH
8604: CALL_OW 531
8608: NOT
8609: AND
8610: IFFALSE 8626
8612: GO 8614
8614: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8615: LD_ADDR_EXP 54
8619: PUSH
8620: LD_STRING #server-wait
8622: PUSH
8623: EMPTY
8624: LIST
8625: ST_TO_ADDR
8626: END
// every 100 trigger IAmSpec do
8627: CALL_OW 531
8631: IFFALSE 8647
8633: GO 8635
8635: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8636: LD_ADDR_EXP 54
8640: PUSH
8641: LD_STRING #Player-IAmSpec
8643: PUSH
8644: EMPTY
8645: LIST
8646: ST_TO_ADDR
8647: END
// every 100 trigger GameEnded and IAmSpec do
8648: LD_LOC 15
8652: PUSH
8653: CALL_OW 531
8657: AND
8658: IFFALSE 8667
8660: GO 8662
8662: DISABLE
// YouLostInMultiplayer ;
8663: CALL_OW 107
8667: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8668: CALL 8054 0 0
8672: PUSH
8673: LD_LOC 15
8677: NOT
8678: AND
8679: IFFALSE 8695
8681: GO 8683
8683: DISABLE
// WaitServerStrings = [ $player-win ] ;
8684: LD_ADDR_EXP 54
8688: PUSH
8689: LD_STRING $player-win
8691: PUSH
8692: EMPTY
8693: LIST
8694: ST_TO_ADDR
8695: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8696: CALL 8054 0 0
8700: PUSH
8701: LD_LOC 15
8705: AND
8706: IFFALSE 8730
8708: GO 8710
8710: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8711: LD_EXP 35
8715: PUSH
8716: LD_OWVAR 7
8720: ARRAY
8721: PPUSH
8722: CALL 7725 0 1
// YouWinInMultiplayer ;
8726: CALL_OW 106
// end ;
8730: END
// every 100 trigger isEditor marked 401 do
8731: LD_OWVAR 84
8735: IFFALSE 8751
8737: GO 8739
8739: DISABLE
// Debug_Strings = [ You won ] ;
8740: LD_ADDR_OWVAR 48
8744: PUSH
8745: LD_STRING You won
8747: PUSH
8748: EMPTY
8749: LIST
8750: ST_TO_ADDR
8751: END
// every 100 trigger isEditor marked 400 do
8752: LD_OWVAR 84
8756: IFFALSE 8772
8758: GO 8760
8760: DISABLE
// Debug_Strings = [ You loss ] ;
8761: LD_ADDR_OWVAR 48
8765: PUSH
8766: LD_STRING You loss
8768: PUSH
8769: EMPTY
8770: LIST
8771: ST_TO_ADDR
8772: END
// every 100 marked 98 do var i , un ;
8773: GO 8775
8775: DISABLE
8776: LD_INT 0
8778: PPUSH
8779: PPUSH
// begin for i = 1 to side_positions do
8780: LD_ADDR_VAR 0 1
8784: PUSH
8785: DOUBLE
8786: LD_INT 1
8788: DEC
8789: ST_TO_ADDR
8790: LD_EXP 34
8794: PUSH
8795: FOR_TO
8796: IFFALSE 8883
// begin if side_positions [ i ] then
8798: LD_EXP 34
8802: PUSH
8803: LD_VAR 0 1
8807: ARRAY
8808: IFFALSE 8881
// if not HasPower ( i ) and not defeated [ i ] then
8810: LD_VAR 0 1
8814: PPUSH
8815: CALL 8118 0 1
8819: NOT
8820: PUSH
8821: LD_LOC 14
8825: PUSH
8826: LD_VAR 0 1
8830: ARRAY
8831: NOT
8832: AND
8833: IFFALSE 8881
// begin defeated = replace ( defeated , i , true ) ;
8835: LD_ADDR_LOC 14
8839: PUSH
8840: LD_LOC 14
8844: PPUSH
8845: LD_VAR 0 1
8849: PPUSH
8850: LD_INT 1
8852: PPUSH
8853: CALL_OW 1
8857: ST_TO_ADDR
// if i = mp_player_side then
8858: LD_VAR 0 1
8862: PUSH
8863: LD_OWVAR 7
8867: EQUAL
8868: IFFALSE 8881
// begin Multiplayer_Loose_Message ;
8870: CALL_OW 521
// SetPlayerSpectator ( ) ;
8874: CALL_OW 572
// enable ( 400 ) ;
8878: LD_INT 400
8880: ENABLE_MARKED
// end ; end ; end ;
8881: GO 8795
8883: POP
8884: POP
// DidGameEnd ;
8885: CALL 8900 0 0
// if not GameEnded then
8889: LD_LOC 15
8893: NOT
8894: IFFALSE 8897
// enable ;
8896: ENABLE
// end ;
8897: PPOPN 2
8899: END
// function DidGameEnd ; var i , k , enemy ; begin
8900: LD_INT 0
8902: PPUSH
8903: PPUSH
8904: PPUSH
8905: PPUSH
// enemy = [ ] ;
8906: LD_ADDR_VAR 0 4
8910: PUSH
8911: EMPTY
8912: ST_TO_ADDR
// for i = 1 to side_positions do
8913: LD_ADDR_VAR 0 2
8917: PUSH
8918: DOUBLE
8919: LD_INT 1
8921: DEC
8922: ST_TO_ADDR
8923: LD_EXP 34
8927: PUSH
8928: FOR_TO
8929: IFFALSE 9023
// if not defeated [ i ] then
8931: LD_LOC 14
8935: PUSH
8936: LD_VAR 0 2
8940: ARRAY
8941: NOT
8942: IFFALSE 9021
// for k = 1 to side_positions do
8944: LD_ADDR_VAR 0 3
8948: PUSH
8949: DOUBLE
8950: LD_INT 1
8952: DEC
8953: ST_TO_ADDR
8954: LD_EXP 34
8958: PUSH
8959: FOR_TO
8960: IFFALSE 9019
// if not defeated [ k ] then
8962: LD_LOC 14
8966: PUSH
8967: LD_VAR 0 3
8971: ARRAY
8972: NOT
8973: IFFALSE 9017
// if not AlliedSides ( i , k ) then
8975: LD_VAR 0 2
8979: PPUSH
8980: LD_VAR 0 3
8984: PPUSH
8985: CALL 8464 0 2
8989: NOT
8990: IFFALSE 9017
// enemy = enemy ^ [ i , k ] ;
8992: LD_ADDR_VAR 0 4
8996: PUSH
8997: LD_VAR 0 4
9001: PUSH
9002: LD_VAR 0 2
9006: PUSH
9007: LD_VAR 0 3
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: ADD
9016: ST_TO_ADDR
9017: GO 8959
9019: POP
9020: POP
9021: GO 8928
9023: POP
9024: POP
// if not enemy then
9025: LD_VAR 0 4
9029: NOT
9030: IFFALSE 9056
// begin GameEnded = true ;
9032: LD_ADDR_LOC 15
9036: PUSH
9037: LD_INT 1
9039: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9040: LD_LOC 14
9044: PUSH
9045: LD_OWVAR 7
9049: ARRAY
9050: NOT
9051: IFFALSE 9056
// enable ( 401 ) ;
9053: LD_INT 401
9055: ENABLE_MARKED
// end ; end ;
9056: LD_VAR 0 1
9060: RET
// function unfog ; var k , friends ; begin
9061: LD_INT 0
9063: PPUSH
9064: PPUSH
9065: PPUSH
// for k = 1 to side_positions do
9066: LD_ADDR_VAR 0 2
9070: PUSH
9071: DOUBLE
9072: LD_INT 1
9074: DEC
9075: ST_TO_ADDR
9076: LD_EXP 34
9080: PUSH
9081: FOR_TO
9082: IFFALSE 9138
// if not defeated [ k ] then
9084: LD_LOC 14
9088: PUSH
9089: LD_VAR 0 2
9093: ARRAY
9094: NOT
9095: IFFALSE 9136
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9097: LD_OWVAR 7
9101: PPUSH
9102: LD_VAR 0 2
9106: PPUSH
9107: CALL_OW 81
9111: PUSH
9112: LD_INT 1
9114: PUSH
9115: EMPTY
9116: LIST
9117: IN
9118: IFFALSE 9136
// friends = friends ^ k ;
9120: LD_ADDR_VAR 0 3
9124: PUSH
9125: LD_VAR 0 3
9129: PUSH
9130: LD_VAR 0 2
9134: ADD
9135: ST_TO_ADDR
9136: GO 9081
9138: POP
9139: POP
// if not friends then
9140: LD_VAR 0 3
9144: NOT
9145: IFFALSE 9159
// begin SetPlayerSpectator ( ) ;
9147: CALL_OW 572
// unfoged = true ;
9151: LD_ADDR_LOC 16
9155: PUSH
9156: LD_INT 1
9158: ST_TO_ADDR
// end ; end ;
9159: LD_VAR 0 1
9163: RET
// export function MakeGameEnd ; begin
9164: LD_INT 0
9166: PPUSH
// SetPlayerSpectator ( ) ;
9167: CALL_OW 572
// unfoged = true ;
9171: LD_ADDR_LOC 16
9175: PUSH
9176: LD_INT 1
9178: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9179: LD_INT 175
9181: PPUSH
9182: CALL_OW 67
// GameEnded = true ;
9186: LD_ADDR_LOC 15
9190: PUSH
9191: LD_INT 1
9193: ST_TO_ADDR
// end ;
9194: LD_VAR 0 1
9198: RET
// export function GetGameEnded ; begin
9199: LD_INT 0
9201: PPUSH
// result = GameEnded ;
9202: LD_ADDR_VAR 0 1
9206: PUSH
9207: LD_LOC 15
9211: ST_TO_ADDR
// end ; end_of_file
9212: LD_VAR 0 1
9216: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9217: LD_INT 0
9219: PPUSH
9220: PPUSH
9221: PPUSH
// for side = 1 to 8 do
9222: LD_ADDR_VAR 0 2
9226: PUSH
9227: DOUBLE
9228: LD_INT 1
9230: DEC
9231: ST_TO_ADDR
9232: LD_INT 8
9234: PUSH
9235: FOR_TO
9236: IFFALSE 9357
// begin for i = 1 to 72 do
9238: LD_ADDR_VAR 0 3
9242: PUSH
9243: DOUBLE
9244: LD_INT 1
9246: DEC
9247: ST_TO_ADDR
9248: LD_INT 72
9250: PUSH
9251: FOR_TO
9252: IFFALSE 9283
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9254: LD_VAR 0 3
9258: PPUSH
9259: LD_VAR 0 2
9263: PPUSH
9264: LD_INT 0
9266: PPUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: CALL_OW 565
9276: PPUSH
9277: CALL_OW 322
9281: GO 9251
9283: POP
9284: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9285: LD_INT 73
9287: PPUSH
9288: LD_VAR 0 2
9292: PPUSH
9293: LD_INT 0
9295: PPUSH
9296: LD_INT 25
9298: PPUSH
9299: CALL_OW 565
9303: PPUSH
9304: CALL_OW 322
// for i = 0 to 40 do
9308: LD_ADDR_VAR 0 3
9312: PUSH
9313: DOUBLE
9314: LD_INT 0
9316: DEC
9317: ST_TO_ADDR
9318: LD_INT 40
9320: PUSH
9321: FOR_TO
9322: IFFALSE 9353
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9324: LD_VAR 0 3
9328: PPUSH
9329: LD_VAR 0 2
9333: PPUSH
9334: LD_INT 1
9336: PPUSH
9337: LD_VAR 0 3
9341: PPUSH
9342: CALL_OW 565
9346: PPUSH
9347: CALL_OW 324
9351: GO 9321
9353: POP
9354: POP
// end ;
9355: GO 9235
9357: POP
9358: POP
// end ;
9359: LD_VAR 0 1
9363: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9364: LD_INT 0
9366: PPUSH
9367: PPUSH
9368: PPUSH
// for side = 1 to 8 do
9369: LD_ADDR_VAR 0 3
9373: PUSH
9374: DOUBLE
9375: LD_INT 1
9377: DEC
9378: ST_TO_ADDR
9379: LD_INT 8
9381: PUSH
9382: FOR_TO
9383: IFFALSE 13379
// begin for i = 1 to 73 do
9385: LD_ADDR_VAR 0 4
9389: PUSH
9390: DOUBLE
9391: LD_INT 1
9393: DEC
9394: ST_TO_ADDR
9395: LD_INT 73
9397: PUSH
9398: FOR_TO
9399: IFFALSE 9420
// SetTech ( i , side , state_disabled ) ;
9401: LD_VAR 0 4
9405: PPUSH
9406: LD_VAR 0 3
9410: PPUSH
9411: LD_INT 0
9413: PPUSH
9414: CALL_OW 322
9418: GO 9398
9420: POP
9421: POP
// for i = 0 to 40 do
9422: LD_ADDR_VAR 0 4
9426: PUSH
9427: DOUBLE
9428: LD_INT 0
9430: DEC
9431: ST_TO_ADDR
9432: LD_INT 40
9434: PUSH
9435: FOR_TO
9436: IFFALSE 9457
// SetRestrict ( i , side , false ) ;
9438: LD_VAR 0 4
9442: PPUSH
9443: LD_VAR 0 3
9447: PPUSH
9448: LD_INT 0
9450: PPUSH
9451: CALL_OW 324
9455: GO 9435
9457: POP
9458: POP
// case level of 1 :
9459: LD_VAR 0 1
9463: PUSH
9464: LD_INT 1
9466: DOUBLE
9467: EQUAL
9468: IFTRUE 9472
9470: GO 9625
9472: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9473: LD_INT 35
9475: PPUSH
9476: LD_VAR 0 3
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9488: LD_INT 45
9490: PPUSH
9491: LD_VAR 0 3
9495: PPUSH
9496: LD_INT 1
9498: PPUSH
9499: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9503: LD_INT 46
9505: PPUSH
9506: LD_VAR 0 3
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9518: LD_INT 47
9520: PPUSH
9521: LD_VAR 0 3
9525: PPUSH
9526: LD_INT 1
9528: PPUSH
9529: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9533: LD_INT 0
9535: PPUSH
9536: LD_VAR 0 3
9540: PPUSH
9541: LD_INT 1
9543: PPUSH
9544: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9548: LD_INT 2
9550: PPUSH
9551: LD_VAR 0 3
9555: PPUSH
9556: LD_INT 1
9558: PPUSH
9559: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9563: LD_INT 4
9565: PPUSH
9566: LD_VAR 0 3
9570: PPUSH
9571: LD_INT 1
9573: PPUSH
9574: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9578: LD_INT 6
9580: PPUSH
9581: LD_VAR 0 3
9585: PPUSH
9586: LD_INT 1
9588: PPUSH
9589: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9593: LD_INT 29
9595: PPUSH
9596: LD_VAR 0 3
9600: PPUSH
9601: LD_INT 1
9603: PPUSH
9604: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9608: LD_INT 31
9610: PPUSH
9611: LD_VAR 0 3
9615: PPUSH
9616: LD_INT 1
9618: PPUSH
9619: CALL_OW 324
// end ; 2 :
9623: GO 13377
9625: LD_INT 2
9627: DOUBLE
9628: EQUAL
9629: IFTRUE 9633
9631: GO 9831
9633: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9634: LD_INT 35
9636: PPUSH
9637: LD_VAR 0 3
9641: PPUSH
9642: LD_INT 1
9644: PPUSH
9645: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9649: LD_INT 45
9651: PPUSH
9652: LD_VAR 0 3
9656: PPUSH
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9664: LD_INT 46
9666: PPUSH
9667: LD_VAR 0 3
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9679: LD_INT 47
9681: PPUSH
9682: LD_VAR 0 3
9686: PPUSH
9687: LD_INT 1
9689: PPUSH
9690: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9694: LD_INT 1
9696: PPUSH
9697: LD_VAR 0 3
9701: PPUSH
9702: LD_INT 1
9704: PPUSH
9705: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9709: LD_INT 2
9711: PPUSH
9712: LD_VAR 0 3
9716: PPUSH
9717: LD_INT 1
9719: PPUSH
9720: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9724: LD_INT 11
9726: PPUSH
9727: LD_VAR 0 3
9731: PPUSH
9732: LD_INT 1
9734: PPUSH
9735: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9739: LD_INT 0
9741: PPUSH
9742: LD_VAR 0 3
9746: PPUSH
9747: LD_INT 1
9749: PPUSH
9750: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9754: LD_INT 2
9756: PPUSH
9757: LD_VAR 0 3
9761: PPUSH
9762: LD_INT 1
9764: PPUSH
9765: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9769: LD_INT 4
9771: PPUSH
9772: LD_VAR 0 3
9776: PPUSH
9777: LD_INT 1
9779: PPUSH
9780: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9784: LD_INT 6
9786: PPUSH
9787: LD_VAR 0 3
9791: PPUSH
9792: LD_INT 1
9794: PPUSH
9795: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9799: LD_INT 29
9801: PPUSH
9802: LD_VAR 0 3
9806: PPUSH
9807: LD_INT 1
9809: PPUSH
9810: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9814: LD_INT 31
9816: PPUSH
9817: LD_VAR 0 3
9821: PPUSH
9822: LD_INT 1
9824: PPUSH
9825: CALL_OW 324
// end ; 3 :
9829: GO 13377
9831: LD_INT 3
9833: DOUBLE
9834: EQUAL
9835: IFTRUE 9839
9837: GO 10292
9839: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9840: LD_INT 35
9842: PPUSH
9843: LD_VAR 0 3
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9855: LD_INT 45
9857: PPUSH
9858: LD_VAR 0 3
9862: PPUSH
9863: LD_INT 1
9865: PPUSH
9866: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9870: LD_INT 46
9872: PPUSH
9873: LD_VAR 0 3
9877: PPUSH
9878: LD_INT 1
9880: PPUSH
9881: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9885: LD_INT 47
9887: PPUSH
9888: LD_VAR 0 3
9892: PPUSH
9893: LD_INT 1
9895: PPUSH
9896: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9900: LD_INT 1
9902: PPUSH
9903: LD_VAR 0 3
9907: PPUSH
9908: LD_INT 1
9910: PPUSH
9911: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9915: LD_INT 2
9917: PPUSH
9918: LD_VAR 0 3
9922: PPUSH
9923: LD_INT 1
9925: PPUSH
9926: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9930: LD_INT 11
9932: PPUSH
9933: LD_VAR 0 3
9937: PPUSH
9938: LD_INT 1
9940: PPUSH
9941: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9945: LD_INT 48
9947: PPUSH
9948: LD_VAR 0 3
9952: PPUSH
9953: LD_INT 1
9955: PPUSH
9956: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9960: LD_INT 69
9962: PPUSH
9963: LD_VAR 0 3
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9975: LD_INT 39
9977: PPUSH
9978: LD_VAR 0 3
9982: PPUSH
9983: LD_INT 1
9985: PPUSH
9986: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9990: LD_INT 43
9992: PPUSH
9993: LD_VAR 0 3
9997: PPUSH
9998: LD_INT 1
10000: PPUSH
10001: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10005: LD_INT 51
10007: PPUSH
10008: LD_VAR 0 3
10012: PPUSH
10013: LD_INT 1
10015: PPUSH
10016: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10020: LD_INT 6
10022: PPUSH
10023: LD_VAR 0 3
10027: PPUSH
10028: LD_INT 1
10030: PPUSH
10031: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10035: LD_INT 0
10037: PPUSH
10038: LD_VAR 0 3
10042: PPUSH
10043: LD_INT 1
10045: PPUSH
10046: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10050: LD_INT 2
10052: PPUSH
10053: LD_VAR 0 3
10057: PPUSH
10058: LD_INT 1
10060: PPUSH
10061: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10065: LD_INT 3
10067: PPUSH
10068: LD_VAR 0 3
10072: PPUSH
10073: LD_INT 1
10075: PPUSH
10076: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10080: LD_INT 4
10082: PPUSH
10083: LD_VAR 0 3
10087: PPUSH
10088: LD_INT 1
10090: PPUSH
10091: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10095: LD_INT 6
10097: PPUSH
10098: LD_VAR 0 3
10102: PPUSH
10103: LD_INT 1
10105: PPUSH
10106: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10110: LD_INT 7
10112: PPUSH
10113: LD_VAR 0 3
10117: PPUSH
10118: LD_INT 1
10120: PPUSH
10121: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10125: LD_INT 8
10127: PPUSH
10128: LD_VAR 0 3
10132: PPUSH
10133: LD_INT 1
10135: PPUSH
10136: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10140: LD_INT 10
10142: PPUSH
10143: LD_VAR 0 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10155: LD_INT 15
10157: PPUSH
10158: LD_VAR 0 3
10162: PPUSH
10163: LD_INT 1
10165: PPUSH
10166: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10170: LD_INT 16
10172: PPUSH
10173: LD_VAR 0 3
10177: PPUSH
10178: LD_INT 1
10180: PPUSH
10181: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10185: LD_INT 17
10187: PPUSH
10188: LD_VAR 0 3
10192: PPUSH
10193: LD_INT 1
10195: PPUSH
10196: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10200: LD_INT 20
10202: PPUSH
10203: LD_VAR 0 3
10207: PPUSH
10208: LD_INT 1
10210: PPUSH
10211: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10215: LD_INT 26
10217: PPUSH
10218: LD_VAR 0 3
10222: PPUSH
10223: LD_INT 1
10225: PPUSH
10226: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10230: LD_INT 27
10232: PPUSH
10233: LD_VAR 0 3
10237: PPUSH
10238: LD_INT 1
10240: PPUSH
10241: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10245: LD_INT 29
10247: PPUSH
10248: LD_VAR 0 3
10252: PPUSH
10253: LD_INT 1
10255: PPUSH
10256: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10260: LD_INT 31
10262: PPUSH
10263: LD_VAR 0 3
10267: PPUSH
10268: LD_INT 1
10270: PPUSH
10271: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10275: LD_INT 32
10277: PPUSH
10278: LD_VAR 0 3
10282: PPUSH
10283: LD_INT 1
10285: PPUSH
10286: CALL_OW 324
// end ; 4 :
10290: GO 13377
10292: LD_INT 4
10294: DOUBLE
10295: EQUAL
10296: IFTRUE 10300
10298: GO 11248
10300: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10301: LD_INT 35
10303: PPUSH
10304: LD_VAR 0 3
10308: PPUSH
10309: LD_INT 1
10311: PPUSH
10312: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10316: LD_INT 45
10318: PPUSH
10319: LD_VAR 0 3
10323: PPUSH
10324: LD_INT 1
10326: PPUSH
10327: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10331: LD_INT 46
10333: PPUSH
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_INT 1
10341: PPUSH
10342: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10346: LD_INT 47
10348: PPUSH
10349: LD_VAR 0 3
10353: PPUSH
10354: LD_INT 1
10356: PPUSH
10357: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10361: LD_INT 1
10363: PPUSH
10364: LD_VAR 0 3
10368: PPUSH
10369: LD_INT 1
10371: PPUSH
10372: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10376: LD_INT 2
10378: PPUSH
10379: LD_VAR 0 3
10383: PPUSH
10384: LD_INT 1
10386: PPUSH
10387: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10391: LD_INT 11
10393: PPUSH
10394: LD_VAR 0 3
10398: PPUSH
10399: LD_INT 1
10401: PPUSH
10402: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10406: LD_INT 20
10408: PPUSH
10409: LD_VAR 0 3
10413: PPUSH
10414: LD_INT 1
10416: PPUSH
10417: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10421: LD_INT 48
10423: PPUSH
10424: LD_VAR 0 3
10428: PPUSH
10429: LD_INT 1
10431: PPUSH
10432: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10436: LD_INT 49
10438: PPUSH
10439: LD_VAR 0 3
10443: PPUSH
10444: LD_INT 1
10446: PPUSH
10447: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10451: LD_INT 69
10453: PPUSH
10454: LD_VAR 0 3
10458: PPUSH
10459: LD_INT 1
10461: PPUSH
10462: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10466: LD_INT 39
10468: PPUSH
10469: LD_VAR 0 3
10473: PPUSH
10474: LD_INT 1
10476: PPUSH
10477: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10481: LD_INT 34
10483: PPUSH
10484: LD_VAR 0 3
10488: PPUSH
10489: LD_INT 1
10491: PPUSH
10492: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10496: LD_INT 42
10498: PPUSH
10499: LD_VAR 0 3
10503: PPUSH
10504: LD_INT 1
10506: PPUSH
10507: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10511: LD_INT 44
10513: PPUSH
10514: LD_VAR 0 3
10518: PPUSH
10519: LD_INT 1
10521: PPUSH
10522: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10526: LD_INT 41
10528: PPUSH
10529: LD_VAR 0 3
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10541: LD_INT 43
10543: PPUSH
10544: LD_VAR 0 3
10548: PPUSH
10549: LD_INT 1
10551: PPUSH
10552: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10556: LD_INT 70
10558: PPUSH
10559: LD_VAR 0 3
10563: PPUSH
10564: LD_INT 1
10566: PPUSH
10567: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10571: LD_INT 51
10573: PPUSH
10574: LD_VAR 0 3
10578: PPUSH
10579: LD_INT 1
10581: PPUSH
10582: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10586: LD_INT 52
10588: PPUSH
10589: LD_VAR 0 3
10593: PPUSH
10594: LD_INT 1
10596: PPUSH
10597: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10601: LD_INT 6
10603: PPUSH
10604: LD_VAR 0 3
10608: PPUSH
10609: LD_INT 1
10611: PPUSH
10612: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10616: LD_INT 15
10618: PPUSH
10619: LD_VAR 0 3
10623: PPUSH
10624: LD_INT 1
10626: PPUSH
10627: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10631: LD_INT 7
10633: PPUSH
10634: LD_VAR 0 3
10638: PPUSH
10639: LD_INT 1
10641: PPUSH
10642: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10646: LD_INT 12
10648: PPUSH
10649: LD_VAR 0 3
10653: PPUSH
10654: LD_INT 1
10656: PPUSH
10657: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10661: LD_INT 18
10663: PPUSH
10664: LD_VAR 0 3
10668: PPUSH
10669: LD_INT 1
10671: PPUSH
10672: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10676: LD_INT 60
10678: PPUSH
10679: LD_VAR 0 3
10683: PPUSH
10684: LD_INT 1
10686: PPUSH
10687: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10691: LD_INT 9
10693: PPUSH
10694: LD_VAR 0 3
10698: PPUSH
10699: LD_INT 1
10701: PPUSH
10702: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10706: LD_INT 30
10708: PPUSH
10709: LD_VAR 0 3
10713: PPUSH
10714: LD_INT 1
10716: PPUSH
10717: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10721: LD_INT 37
10723: PPUSH
10724: LD_VAR 0 3
10728: PPUSH
10729: LD_INT 1
10731: PPUSH
10732: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10736: LD_INT 5
10738: PPUSH
10739: LD_VAR 0 3
10743: PPUSH
10744: LD_INT 1
10746: PPUSH
10747: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10751: LD_INT 66
10753: PPUSH
10754: LD_VAR 0 3
10758: PPUSH
10759: LD_INT 1
10761: PPUSH
10762: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10766: LD_INT 21
10768: PPUSH
10769: LD_VAR 0 3
10773: PPUSH
10774: LD_INT 1
10776: PPUSH
10777: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10781: LD_INT 22
10783: PPUSH
10784: LD_VAR 0 3
10788: PPUSH
10789: LD_INT 1
10791: PPUSH
10792: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10796: LD_INT 54
10798: PPUSH
10799: LD_VAR 0 3
10803: PPUSH
10804: LD_INT 1
10806: PPUSH
10807: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10811: LD_INT 0
10813: PPUSH
10814: LD_VAR 0 3
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10826: LD_INT 1
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: LD_INT 1
10836: PPUSH
10837: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10841: LD_INT 2
10843: PPUSH
10844: LD_VAR 0 3
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10856: LD_INT 3
10858: PPUSH
10859: LD_VAR 0 3
10863: PPUSH
10864: LD_INT 1
10866: PPUSH
10867: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10871: LD_INT 4
10873: PPUSH
10874: LD_VAR 0 3
10878: PPUSH
10879: LD_INT 1
10881: PPUSH
10882: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10886: LD_INT 5
10888: PPUSH
10889: LD_VAR 0 3
10893: PPUSH
10894: LD_INT 1
10896: PPUSH
10897: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10901: LD_INT 6
10903: PPUSH
10904: LD_VAR 0 3
10908: PPUSH
10909: LD_INT 1
10911: PPUSH
10912: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10916: LD_INT 7
10918: PPUSH
10919: LD_VAR 0 3
10923: PPUSH
10924: LD_INT 1
10926: PPUSH
10927: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10931: LD_INT 8
10933: PPUSH
10934: LD_VAR 0 3
10938: PPUSH
10939: LD_INT 1
10941: PPUSH
10942: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10946: LD_INT 10
10948: PPUSH
10949: LD_VAR 0 3
10953: PPUSH
10954: LD_INT 1
10956: PPUSH
10957: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10961: LD_INT 11
10963: PPUSH
10964: LD_VAR 0 3
10968: PPUSH
10969: LD_INT 1
10971: PPUSH
10972: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10976: LD_INT 12
10978: PPUSH
10979: LD_VAR 0 3
10983: PPUSH
10984: LD_INT 1
10986: PPUSH
10987: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10991: LD_INT 13
10993: PPUSH
10994: LD_VAR 0 3
10998: PPUSH
10999: LD_INT 1
11001: PPUSH
11002: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11006: LD_INT 14
11008: PPUSH
11009: LD_VAR 0 3
11013: PPUSH
11014: LD_INT 1
11016: PPUSH
11017: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11021: LD_INT 15
11023: PPUSH
11024: LD_VAR 0 3
11028: PPUSH
11029: LD_INT 1
11031: PPUSH
11032: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11036: LD_INT 16
11038: PPUSH
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_INT 1
11046: PPUSH
11047: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11051: LD_INT 17
11053: PPUSH
11054: LD_VAR 0 3
11058: PPUSH
11059: LD_INT 1
11061: PPUSH
11062: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11066: LD_INT 19
11068: PPUSH
11069: LD_VAR 0 3
11073: PPUSH
11074: LD_INT 1
11076: PPUSH
11077: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11081: LD_INT 20
11083: PPUSH
11084: LD_VAR 0 3
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11096: LD_INT 21
11098: PPUSH
11099: LD_VAR 0 3
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11111: LD_INT 23
11113: PPUSH
11114: LD_VAR 0 3
11118: PPUSH
11119: LD_INT 1
11121: PPUSH
11122: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11126: LD_INT 26
11128: PPUSH
11129: LD_VAR 0 3
11133: PPUSH
11134: LD_INT 1
11136: PPUSH
11137: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11141: LD_INT 27
11143: PPUSH
11144: LD_VAR 0 3
11148: PPUSH
11149: LD_INT 1
11151: PPUSH
11152: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11156: LD_INT 28
11158: PPUSH
11159: LD_VAR 0 3
11163: PPUSH
11164: LD_INT 1
11166: PPUSH
11167: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11171: LD_INT 29
11173: PPUSH
11174: LD_VAR 0 3
11178: PPUSH
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11186: LD_INT 30
11188: PPUSH
11189: LD_VAR 0 3
11193: PPUSH
11194: LD_INT 1
11196: PPUSH
11197: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11201: LD_INT 31
11203: PPUSH
11204: LD_VAR 0 3
11208: PPUSH
11209: LD_INT 1
11211: PPUSH
11212: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11216: LD_INT 32
11218: PPUSH
11219: LD_VAR 0 3
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11231: LD_INT 36
11233: PPUSH
11234: LD_VAR 0 3
11238: PPUSH
11239: LD_INT 1
11241: PPUSH
11242: CALL_OW 324
// end ; 5 :
11246: GO 13377
11248: LD_INT 5
11250: DOUBLE
11251: EQUAL
11252: IFTRUE 11256
11254: GO 12369
11256: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11257: LD_INT 35
11259: PPUSH
11260: LD_VAR 0 3
11264: PPUSH
11265: LD_INT 1
11267: PPUSH
11268: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11272: LD_INT 45
11274: PPUSH
11275: LD_VAR 0 3
11279: PPUSH
11280: LD_INT 1
11282: PPUSH
11283: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11287: LD_INT 46
11289: PPUSH
11290: LD_VAR 0 3
11294: PPUSH
11295: LD_INT 1
11297: PPUSH
11298: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11302: LD_INT 47
11304: PPUSH
11305: LD_VAR 0 3
11309: PPUSH
11310: LD_INT 1
11312: PPUSH
11313: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11317: LD_INT 1
11319: PPUSH
11320: LD_VAR 0 3
11324: PPUSH
11325: LD_INT 1
11327: PPUSH
11328: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11332: LD_INT 2
11334: PPUSH
11335: LD_VAR 0 3
11339: PPUSH
11340: LD_INT 1
11342: PPUSH
11343: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11347: LD_INT 11
11349: PPUSH
11350: LD_VAR 0 3
11354: PPUSH
11355: LD_INT 1
11357: PPUSH
11358: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11362: LD_INT 20
11364: PPUSH
11365: LD_VAR 0 3
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11377: LD_INT 48
11379: PPUSH
11380: LD_VAR 0 3
11384: PPUSH
11385: LD_INT 1
11387: PPUSH
11388: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11392: LD_INT 49
11394: PPUSH
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 1
11402: PPUSH
11403: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11407: LD_INT 69
11409: PPUSH
11410: LD_VAR 0 3
11414: PPUSH
11415: LD_INT 1
11417: PPUSH
11418: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11422: LD_INT 39
11424: PPUSH
11425: LD_VAR 0 3
11429: PPUSH
11430: LD_INT 1
11432: PPUSH
11433: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11437: LD_INT 34
11439: PPUSH
11440: LD_VAR 0 3
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11452: LD_INT 42
11454: PPUSH
11455: LD_VAR 0 3
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11467: LD_INT 44
11469: PPUSH
11470: LD_VAR 0 3
11474: PPUSH
11475: LD_INT 1
11477: PPUSH
11478: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11482: LD_INT 41
11484: PPUSH
11485: LD_VAR 0 3
11489: PPUSH
11490: LD_INT 1
11492: PPUSH
11493: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11497: LD_INT 40
11499: PPUSH
11500: LD_VAR 0 3
11504: PPUSH
11505: LD_INT 1
11507: PPUSH
11508: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11512: LD_INT 43
11514: PPUSH
11515: LD_VAR 0 3
11519: PPUSH
11520: LD_INT 1
11522: PPUSH
11523: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11527: LD_INT 70
11529: PPUSH
11530: LD_VAR 0 3
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11542: LD_INT 51
11544: PPUSH
11545: LD_VAR 0 3
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11557: LD_INT 52
11559: PPUSH
11560: LD_VAR 0 3
11564: PPUSH
11565: LD_INT 1
11567: PPUSH
11568: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11572: LD_INT 6
11574: PPUSH
11575: LD_VAR 0 3
11579: PPUSH
11580: LD_INT 1
11582: PPUSH
11583: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11587: LD_INT 15
11589: PPUSH
11590: LD_VAR 0 3
11594: PPUSH
11595: LD_INT 1
11597: PPUSH
11598: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11602: LD_INT 7
11604: PPUSH
11605: LD_VAR 0 3
11609: PPUSH
11610: LD_INT 1
11612: PPUSH
11613: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11617: LD_INT 12
11619: PPUSH
11620: LD_VAR 0 3
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11632: LD_INT 17
11634: PPUSH
11635: LD_VAR 0 3
11639: PPUSH
11640: LD_INT 1
11642: PPUSH
11643: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11647: LD_INT 18
11649: PPUSH
11650: LD_VAR 0 3
11654: PPUSH
11655: LD_INT 1
11657: PPUSH
11658: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11662: LD_INT 60
11664: PPUSH
11665: LD_VAR 0 3
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11677: LD_INT 32
11679: PPUSH
11680: LD_VAR 0 3
11684: PPUSH
11685: LD_INT 1
11687: PPUSH
11688: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11692: LD_INT 9
11694: PPUSH
11695: LD_VAR 0 3
11699: PPUSH
11700: LD_INT 1
11702: PPUSH
11703: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11707: LD_INT 57
11709: PPUSH
11710: LD_VAR 0 3
11714: PPUSH
11715: LD_INT 1
11717: PPUSH
11718: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11722: LD_INT 30
11724: PPUSH
11725: LD_VAR 0 3
11729: PPUSH
11730: LD_INT 1
11732: PPUSH
11733: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11737: LD_INT 37
11739: PPUSH
11740: LD_VAR 0 3
11744: PPUSH
11745: LD_INT 1
11747: PPUSH
11748: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11752: LD_INT 63
11754: PPUSH
11755: LD_VAR 0 3
11759: PPUSH
11760: LD_INT 1
11762: PPUSH
11763: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11767: LD_INT 3
11769: PPUSH
11770: LD_VAR 0 3
11774: PPUSH
11775: LD_INT 1
11777: PPUSH
11778: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11782: LD_INT 4
11784: PPUSH
11785: LD_VAR 0 3
11789: PPUSH
11790: LD_INT 1
11792: PPUSH
11793: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11797: LD_INT 5
11799: PPUSH
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_INT 1
11807: PPUSH
11808: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11812: LD_INT 66
11814: PPUSH
11815: LD_VAR 0 3
11819: PPUSH
11820: LD_INT 1
11822: PPUSH
11823: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11827: LD_INT 21
11829: PPUSH
11830: LD_VAR 0 3
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11842: LD_INT 22
11844: PPUSH
11845: LD_VAR 0 3
11849: PPUSH
11850: LD_INT 1
11852: PPUSH
11853: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11857: LD_INT 19
11859: PPUSH
11860: LD_VAR 0 3
11864: PPUSH
11865: LD_INT 1
11867: PPUSH
11868: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11872: LD_INT 54
11874: PPUSH
11875: LD_VAR 0 3
11879: PPUSH
11880: LD_INT 1
11882: PPUSH
11883: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11887: LD_INT 55
11889: PPUSH
11890: LD_VAR 0 3
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11902: LD_INT 0
11904: PPUSH
11905: LD_VAR 0 3
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11917: LD_INT 1
11919: PPUSH
11920: LD_VAR 0 3
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11932: LD_INT 2
11934: PPUSH
11935: LD_VAR 0 3
11939: PPUSH
11940: LD_INT 1
11942: PPUSH
11943: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11947: LD_INT 3
11949: PPUSH
11950: LD_VAR 0 3
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11962: LD_INT 4
11964: PPUSH
11965: LD_VAR 0 3
11969: PPUSH
11970: LD_INT 1
11972: PPUSH
11973: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11977: LD_INT 5
11979: PPUSH
11980: LD_VAR 0 3
11984: PPUSH
11985: LD_INT 1
11987: PPUSH
11988: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11992: LD_INT 6
11994: PPUSH
11995: LD_VAR 0 3
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12007: LD_INT 7
12009: PPUSH
12010: LD_VAR 0 3
12014: PPUSH
12015: LD_INT 1
12017: PPUSH
12018: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12022: LD_INT 8
12024: PPUSH
12025: LD_VAR 0 3
12029: PPUSH
12030: LD_INT 1
12032: PPUSH
12033: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12037: LD_INT 10
12039: PPUSH
12040: LD_VAR 0 3
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12052: LD_INT 11
12054: PPUSH
12055: LD_VAR 0 3
12059: PPUSH
12060: LD_INT 1
12062: PPUSH
12063: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12067: LD_INT 12
12069: PPUSH
12070: LD_VAR 0 3
12074: PPUSH
12075: LD_INT 1
12077: PPUSH
12078: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12082: LD_INT 13
12084: PPUSH
12085: LD_VAR 0 3
12089: PPUSH
12090: LD_INT 1
12092: PPUSH
12093: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12097: LD_INT 14
12099: PPUSH
12100: LD_VAR 0 3
12104: PPUSH
12105: LD_INT 1
12107: PPUSH
12108: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12112: LD_INT 15
12114: PPUSH
12115: LD_VAR 0 3
12119: PPUSH
12120: LD_INT 1
12122: PPUSH
12123: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12127: LD_INT 16
12129: PPUSH
12130: LD_VAR 0 3
12134: PPUSH
12135: LD_INT 1
12137: PPUSH
12138: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12142: LD_INT 17
12144: PPUSH
12145: LD_VAR 0 3
12149: PPUSH
12150: LD_INT 1
12152: PPUSH
12153: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12157: LD_INT 18
12159: PPUSH
12160: LD_VAR 0 3
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12172: LD_INT 19
12174: PPUSH
12175: LD_VAR 0 3
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12187: LD_INT 20
12189: PPUSH
12190: LD_VAR 0 3
12194: PPUSH
12195: LD_INT 1
12197: PPUSH
12198: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12202: LD_INT 21
12204: PPUSH
12205: LD_VAR 0 3
12209: PPUSH
12210: LD_INT 1
12212: PPUSH
12213: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12217: LD_INT 23
12219: PPUSH
12220: LD_VAR 0 3
12224: PPUSH
12225: LD_INT 1
12227: PPUSH
12228: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12232: LD_INT 26
12234: PPUSH
12235: LD_VAR 0 3
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12247: LD_INT 27
12249: PPUSH
12250: LD_VAR 0 3
12254: PPUSH
12255: LD_INT 1
12257: PPUSH
12258: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12262: LD_INT 28
12264: PPUSH
12265: LD_VAR 0 3
12269: PPUSH
12270: LD_INT 1
12272: PPUSH
12273: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12277: LD_INT 29
12279: PPUSH
12280: LD_VAR 0 3
12284: PPUSH
12285: LD_INT 1
12287: PPUSH
12288: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12292: LD_INT 30
12294: PPUSH
12295: LD_VAR 0 3
12299: PPUSH
12300: LD_INT 1
12302: PPUSH
12303: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12307: LD_INT 31
12309: PPUSH
12310: LD_VAR 0 3
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12322: LD_INT 32
12324: PPUSH
12325: LD_VAR 0 3
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12337: LD_INT 33
12339: PPUSH
12340: LD_VAR 0 3
12344: PPUSH
12345: LD_INT 1
12347: PPUSH
12348: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12352: LD_INT 36
12354: PPUSH
12355: LD_VAR 0 3
12359: PPUSH
12360: LD_INT 1
12362: PPUSH
12363: CALL_OW 324
// end ; 6 :
12367: GO 13377
12369: LD_INT 6
12371: DOUBLE
12372: EQUAL
12373: IFTRUE 12377
12375: GO 13302
12377: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12378: LD_INT 35
12380: PPUSH
12381: LD_VAR 0 3
12385: PPUSH
12386: LD_INT 1
12388: PPUSH
12389: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12393: LD_INT 45
12395: PPUSH
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_INT 1
12403: PPUSH
12404: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12408: LD_INT 46
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: LD_INT 1
12418: PPUSH
12419: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12423: LD_INT 47
12425: PPUSH
12426: LD_VAR 0 3
12430: PPUSH
12431: LD_INT 1
12433: PPUSH
12434: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12438: LD_INT 1
12440: PPUSH
12441: LD_VAR 0 3
12445: PPUSH
12446: LD_INT 1
12448: PPUSH
12449: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12453: LD_INT 2
12455: PPUSH
12456: LD_VAR 0 3
12460: PPUSH
12461: LD_INT 1
12463: PPUSH
12464: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12468: LD_INT 11
12470: PPUSH
12471: LD_VAR 0 3
12475: PPUSH
12476: LD_INT 1
12478: PPUSH
12479: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12483: LD_INT 20
12485: PPUSH
12486: LD_VAR 0 3
12490: PPUSH
12491: LD_INT 1
12493: PPUSH
12494: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12498: LD_INT 48
12500: PPUSH
12501: LD_VAR 0 3
12505: PPUSH
12506: LD_INT 1
12508: PPUSH
12509: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12513: LD_INT 49
12515: PPUSH
12516: LD_VAR 0 3
12520: PPUSH
12521: LD_INT 1
12523: PPUSH
12524: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12528: LD_INT 50
12530: PPUSH
12531: LD_VAR 0 3
12535: PPUSH
12536: LD_INT 1
12538: PPUSH
12539: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12543: LD_INT 69
12545: PPUSH
12546: LD_VAR 0 3
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12558: LD_INT 39
12560: PPUSH
12561: LD_VAR 0 3
12565: PPUSH
12566: LD_INT 1
12568: PPUSH
12569: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12573: LD_INT 34
12575: PPUSH
12576: LD_VAR 0 3
12580: PPUSH
12581: LD_INT 1
12583: PPUSH
12584: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12588: LD_INT 42
12590: PPUSH
12591: LD_VAR 0 3
12595: PPUSH
12596: LD_INT 1
12598: PPUSH
12599: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12603: LD_INT 44
12605: PPUSH
12606: LD_VAR 0 3
12610: PPUSH
12611: LD_INT 1
12613: PPUSH
12614: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12618: LD_INT 41
12620: PPUSH
12621: LD_VAR 0 3
12625: PPUSH
12626: LD_INT 1
12628: PPUSH
12629: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12633: LD_INT 13
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: LD_INT 1
12643: PPUSH
12644: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12648: LD_INT 40
12650: PPUSH
12651: LD_VAR 0 3
12655: PPUSH
12656: LD_INT 1
12658: PPUSH
12659: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12663: LD_INT 43
12665: PPUSH
12666: LD_VAR 0 3
12670: PPUSH
12671: LD_INT 1
12673: PPUSH
12674: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12678: LD_INT 70
12680: PPUSH
12681: LD_VAR 0 3
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12693: LD_INT 23
12695: PPUSH
12696: LD_VAR 0 3
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12708: LD_INT 51
12710: PPUSH
12711: LD_VAR 0 3
12715: PPUSH
12716: LD_INT 1
12718: PPUSH
12719: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12723: LD_INT 52
12725: PPUSH
12726: LD_VAR 0 3
12730: PPUSH
12731: LD_INT 1
12733: PPUSH
12734: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12738: LD_INT 6
12740: PPUSH
12741: LD_VAR 0 3
12745: PPUSH
12746: LD_INT 1
12748: PPUSH
12749: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12753: LD_INT 15
12755: PPUSH
12756: LD_VAR 0 3
12760: PPUSH
12761: LD_INT 1
12763: PPUSH
12764: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12768: LD_INT 7
12770: PPUSH
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12783: LD_INT 12
12785: PPUSH
12786: LD_VAR 0 3
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12798: LD_INT 10
12800: PPUSH
12801: LD_VAR 0 3
12805: PPUSH
12806: LD_INT 1
12808: PPUSH
12809: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12813: LD_INT 17
12815: PPUSH
12816: LD_VAR 0 3
12820: PPUSH
12821: LD_INT 1
12823: PPUSH
12824: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12828: LD_INT 18
12830: PPUSH
12831: LD_VAR 0 3
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12843: LD_INT 60
12845: PPUSH
12846: LD_VAR 0 3
12850: PPUSH
12851: LD_INT 1
12853: PPUSH
12854: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12858: LD_INT 61
12860: PPUSH
12861: LD_VAR 0 3
12865: PPUSH
12866: LD_INT 1
12868: PPUSH
12869: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12873: LD_INT 32
12875: PPUSH
12876: LD_VAR 0 3
12880: PPUSH
12881: LD_INT 1
12883: PPUSH
12884: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12888: LD_INT 27
12890: PPUSH
12891: LD_VAR 0 3
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12903: LD_INT 36
12905: PPUSH
12906: LD_VAR 0 3
12910: PPUSH
12911: LD_INT 1
12913: PPUSH
12914: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12918: LD_INT 33
12920: PPUSH
12921: LD_VAR 0 3
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12933: LD_INT 9
12935: PPUSH
12936: LD_VAR 0 3
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12948: LD_INT 38
12950: PPUSH
12951: LD_VAR 0 3
12955: PPUSH
12956: LD_INT 1
12958: PPUSH
12959: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12963: LD_INT 57
12965: PPUSH
12966: LD_VAR 0 3
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12978: LD_INT 58
12980: PPUSH
12981: LD_VAR 0 3
12985: PPUSH
12986: LD_INT 1
12988: PPUSH
12989: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12993: LD_INT 28
12995: PPUSH
12996: LD_VAR 0 3
13000: PPUSH
13001: LD_INT 1
13003: PPUSH
13004: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13008: LD_INT 29
13010: PPUSH
13011: LD_VAR 0 3
13015: PPUSH
13016: LD_INT 1
13018: PPUSH
13019: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13023: LD_INT 30
13025: PPUSH
13026: LD_VAR 0 3
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13038: LD_INT 37
13040: PPUSH
13041: LD_VAR 0 3
13045: PPUSH
13046: LD_INT 1
13048: PPUSH
13049: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13053: LD_INT 63
13055: PPUSH
13056: LD_VAR 0 3
13060: PPUSH
13061: LD_INT 1
13063: PPUSH
13064: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13068: LD_INT 64
13070: PPUSH
13071: LD_VAR 0 3
13075: PPUSH
13076: LD_INT 1
13078: PPUSH
13079: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13083: LD_INT 3
13085: PPUSH
13086: LD_VAR 0 3
13090: PPUSH
13091: LD_INT 1
13093: PPUSH
13094: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13098: LD_INT 4
13100: PPUSH
13101: LD_VAR 0 3
13105: PPUSH
13106: LD_INT 1
13108: PPUSH
13109: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13113: LD_INT 5
13115: PPUSH
13116: LD_VAR 0 3
13120: PPUSH
13121: LD_INT 1
13123: PPUSH
13124: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13128: LD_INT 8
13130: PPUSH
13131: LD_VAR 0 3
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13143: LD_INT 66
13145: PPUSH
13146: LD_VAR 0 3
13150: PPUSH
13151: LD_INT 1
13153: PPUSH
13154: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13158: LD_INT 67
13160: PPUSH
13161: LD_VAR 0 3
13165: PPUSH
13166: LD_INT 1
13168: PPUSH
13169: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13173: LD_INT 21
13175: PPUSH
13176: LD_VAR 0 3
13180: PPUSH
13181: LD_INT 1
13183: PPUSH
13184: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13188: LD_INT 22
13190: PPUSH
13191: LD_VAR 0 3
13195: PPUSH
13196: LD_INT 1
13198: PPUSH
13199: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13203: LD_INT 19
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: LD_INT 1
13213: PPUSH
13214: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13218: LD_INT 26
13220: PPUSH
13221: LD_VAR 0 3
13225: PPUSH
13226: LD_INT 1
13228: PPUSH
13229: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13233: LD_INT 54
13235: PPUSH
13236: LD_VAR 0 3
13240: PPUSH
13241: LD_INT 1
13243: PPUSH
13244: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13248: LD_INT 55
13250: PPUSH
13251: LD_VAR 0 3
13255: PPUSH
13256: LD_INT 1
13258: PPUSH
13259: CALL_OW 322
// for i = 0 to 39 do
13263: LD_ADDR_VAR 0 4
13267: PUSH
13268: DOUBLE
13269: LD_INT 0
13271: DEC
13272: ST_TO_ADDR
13273: LD_INT 39
13275: PUSH
13276: FOR_TO
13277: IFFALSE 13298
// SetRestrict ( i , side , true ) ;
13279: LD_VAR 0 4
13283: PPUSH
13284: LD_VAR 0 3
13288: PPUSH
13289: LD_INT 1
13291: PPUSH
13292: CALL_OW 324
13296: GO 13276
13298: POP
13299: POP
// end ; else
13300: GO 13377
13302: POP
// begin for i = 1 to 73 do
13303: LD_ADDR_VAR 0 4
13307: PUSH
13308: DOUBLE
13309: LD_INT 1
13311: DEC
13312: ST_TO_ADDR
13313: LD_INT 73
13315: PUSH
13316: FOR_TO
13317: IFFALSE 13338
// SetTech ( i , side , state_enabled ) ;
13319: LD_VAR 0 4
13323: PPUSH
13324: LD_VAR 0 3
13328: PPUSH
13329: LD_INT 1
13331: PPUSH
13332: CALL_OW 322
13336: GO 13316
13338: POP
13339: POP
// for i = 0 to 39 do
13340: LD_ADDR_VAR 0 4
13344: PUSH
13345: DOUBLE
13346: LD_INT 0
13348: DEC
13349: ST_TO_ADDR
13350: LD_INT 39
13352: PUSH
13353: FOR_TO
13354: IFFALSE 13375
// SetRestrict ( i , side , true ) ;
13356: LD_VAR 0 4
13360: PPUSH
13361: LD_VAR 0 3
13365: PPUSH
13366: LD_INT 1
13368: PPUSH
13369: CALL_OW 324
13373: GO 13353
13375: POP
13376: POP
// end ; end ; end ;
13377: GO 9382
13379: POP
13380: POP
// end ; end_of_file
13381: LD_VAR 0 2
13385: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13386: LD_INT 0
13388: PPUSH
13389: PPUSH
13390: PPUSH
13391: PPUSH
13392: PPUSH
13393: PPUSH
13394: PPUSH
13395: PPUSH
13396: PPUSH
// for i := 1 to 8 do
13397: LD_ADDR_VAR 0 2
13401: PUSH
13402: DOUBLE
13403: LD_INT 1
13405: DEC
13406: ST_TO_ADDR
13407: LD_INT 8
13409: PUSH
13410: FOR_TO
13411: IFFALSE 13795
// begin if Side_Positions [ i ] then
13413: LD_EXP 34
13417: PUSH
13418: LD_VAR 0 2
13422: ARRAY
13423: IFFALSE 13793
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13425: LD_ADDR_VAR 0 7
13429: PUSH
13430: LD_INT 22
13432: PUSH
13433: LD_VAR 0 2
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 21
13444: PUSH
13445: LD_INT 1
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PPUSH
13456: CALL_OW 69
13460: PUSH
13461: LD_INT 0
13463: PLUS
13464: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13465: LD_ADDR_VAR 0 9
13469: PUSH
13470: LD_INT 22
13472: PUSH
13473: LD_VAR 0 2
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 2
13484: PUSH
13485: LD_INT 30
13487: PUSH
13488: LD_INT 0
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 30
13497: PUSH
13498: LD_INT 1
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: LIST
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PPUSH
13514: CALL_OW 69
13518: ST_TO_ADDR
// crates := 0 ;
13519: LD_ADDR_VAR 0 4
13523: PUSH
13524: LD_INT 0
13526: ST_TO_ADDR
// oil := 0 ;
13527: LD_ADDR_VAR 0 5
13531: PUSH
13532: LD_INT 0
13534: ST_TO_ADDR
// sib := 0 ;
13535: LD_ADDR_VAR 0 6
13539: PUSH
13540: LD_INT 0
13542: ST_TO_ADDR
// if bases then
13543: LD_VAR 0 9
13547: IFFALSE 13653
// begin for j in bases do
13549: LD_ADDR_VAR 0 3
13553: PUSH
13554: LD_VAR 0 9
13558: PUSH
13559: FOR_IN
13560: IFFALSE 13651
// begin base := GetBase ( j ) ;
13562: LD_ADDR_VAR 0 8
13566: PUSH
13567: LD_VAR 0 3
13571: PPUSH
13572: CALL_OW 274
13576: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13577: LD_ADDR_VAR 0 4
13581: PUSH
13582: LD_VAR 0 4
13586: PUSH
13587: LD_VAR 0 8
13591: PPUSH
13592: LD_INT 1
13594: PPUSH
13595: CALL_OW 275
13599: PLUS
13600: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13601: LD_ADDR_VAR 0 5
13605: PUSH
13606: LD_VAR 0 5
13610: PUSH
13611: LD_VAR 0 8
13615: PPUSH
13616: LD_INT 2
13618: PPUSH
13619: CALL_OW 275
13623: PLUS
13624: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13625: LD_ADDR_VAR 0 6
13629: PUSH
13630: LD_VAR 0 6
13634: PUSH
13635: LD_VAR 0 8
13639: PPUSH
13640: LD_INT 3
13642: PPUSH
13643: CALL_OW 275
13647: PLUS
13648: ST_TO_ADDR
// end ;
13649: GO 13559
13651: POP
13652: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13653: LD_STRING setSpecText(
13655: PUSH
13656: LD_VAR 0 2
13660: STR
13661: PUSH
13662: LD_STRING ,
13664: STR
13665: PUSH
13666: LD_INT 2
13668: STR
13669: PUSH
13670: LD_STRING ,
13672: STR
13673: PUSH
13674: LD_VAR 0 4
13678: STR
13679: PUSH
13680: LD_STRING )
13682: STR
13683: PPUSH
13684: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13688: LD_STRING setSpecText(
13690: PUSH
13691: LD_VAR 0 2
13695: STR
13696: PUSH
13697: LD_STRING ,
13699: STR
13700: PUSH
13701: LD_INT 3
13703: STR
13704: PUSH
13705: LD_STRING ,
13707: STR
13708: PUSH
13709: LD_VAR 0 5
13713: STR
13714: PUSH
13715: LD_STRING )
13717: STR
13718: PPUSH
13719: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13723: LD_STRING setSpecText(
13725: PUSH
13726: LD_VAR 0 2
13730: STR
13731: PUSH
13732: LD_STRING ,
13734: STR
13735: PUSH
13736: LD_INT 4
13738: STR
13739: PUSH
13740: LD_STRING ,
13742: STR
13743: PUSH
13744: LD_VAR 0 6
13748: STR
13749: PUSH
13750: LD_STRING )
13752: STR
13753: PPUSH
13754: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13758: LD_STRING setSpecText(
13760: PUSH
13761: LD_VAR 0 2
13765: STR
13766: PUSH
13767: LD_STRING ,
13769: STR
13770: PUSH
13771: LD_INT 5
13773: STR
13774: PUSH
13775: LD_STRING ,
13777: STR
13778: PUSH
13779: LD_VAR 0 7
13783: STR
13784: PUSH
13785: LD_STRING )
13787: STR
13788: PPUSH
13789: CALL_OW 559
// end ; end ;
13793: GO 13410
13795: POP
13796: POP
// end ;
13797: LD_VAR 0 1
13801: RET
// every 0 0$1 do
13802: GO 13804
13804: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13805: LD_STRING setSpecLogoNumber(
13807: PUSH
13808: LD_INT 2
13810: STR
13811: PUSH
13812: LD_STRING ,
13814: STR
13815: PUSH
13816: LD_INT 1
13818: STR
13819: PUSH
13820: LD_STRING )
13822: STR
13823: PPUSH
13824: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13828: LD_STRING setSpecLogoNumber(
13830: PUSH
13831: LD_INT 3
13833: STR
13834: PUSH
13835: LD_STRING ,
13837: STR
13838: PUSH
13839: LD_INT 2
13841: STR
13842: PUSH
13843: LD_STRING )
13845: STR
13846: PPUSH
13847: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13851: LD_STRING setSpecLogoNumber(
13853: PUSH
13854: LD_INT 4
13856: STR
13857: PUSH
13858: LD_STRING ,
13860: STR
13861: PUSH
13862: LD_INT 3
13864: STR
13865: PUSH
13866: LD_STRING )
13868: STR
13869: PPUSH
13870: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13874: LD_STRING setSpecLogoNumber(
13876: PUSH
13877: LD_INT 5
13879: STR
13880: PUSH
13881: LD_STRING ,
13883: STR
13884: PUSH
13885: LD_INT 4
13887: STR
13888: PUSH
13889: LD_STRING )
13891: STR
13892: PPUSH
13893: CALL_OW 559
// end ;
13897: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13898: LD_INT 2
13900: PUSH
13901: LD_INT 30
13903: PUSH
13904: LD_INT 0
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 30
13913: PUSH
13914: LD_INT 1
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: PPUSH
13926: CALL_OW 69
13930: IFFALSE 13940
13932: GO 13934
13934: DISABLE
// begin enable ;
13935: ENABLE
// UpdateSpectatorBar ;
13936: CALL 13386 0 0
// end ; end_of_file
13940: END
// var respawn , inqueue ; export function init_respawning ; begin
13941: LD_INT 0
13943: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13944: LD_ADDR_LOC 18
13948: PUSH
13949: LD_INT 1
13951: PPUSH
13952: LD_INT 8
13954: PPUSH
13955: CALL_OW 12
13959: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13960: LD_ADDR_LOC 19
13964: PUSH
13965: LD_INT 0
13967: PUSH
13968: LD_INT 0
13970: PUSH
13971: LD_INT 0
13973: PUSH
13974: LD_INT 0
13976: PUSH
13977: LD_INT 0
13979: PUSH
13980: LD_INT 0
13982: PUSH
13983: LD_INT 0
13985: PUSH
13986: LD_INT 0
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: ST_TO_ADDR
// end ;
13999: LD_VAR 0 1
14003: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14004: GO 14006
14006: DISABLE
14007: LD_INT 0
14009: PPUSH
14010: PPUSH
14011: PPUSH
// begin if respawning_time_max = 0 then
14012: LD_EXP 28
14016: PUSH
14017: LD_INT 0
14019: EQUAL
14020: IFFALSE 14024
// exit ;
14022: GO 14432
// if respawn = 8 then
14024: LD_LOC 18
14028: PUSH
14029: LD_INT 8
14031: EQUAL
14032: IFFALSE 14044
// respawn := 1 else
14034: LD_ADDR_LOC 18
14038: PUSH
14039: LD_INT 1
14041: ST_TO_ADDR
14042: GO 14058
// respawn := respawn + 1 ;
14044: LD_ADDR_LOC 18
14048: PUSH
14049: LD_LOC 18
14053: PUSH
14054: LD_INT 1
14056: PLUS
14057: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14058: LD_EXP 34
14062: PUSH
14063: LD_LOC 18
14067: ARRAY
14068: PUSH
14069: LD_LOC 19
14073: PUSH
14074: LD_LOC 18
14078: ARRAY
14079: NOT
14080: AND
14081: IFFALSE 14431
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14083: LD_ADDR_VAR 0 1
14087: PUSH
14088: LD_INT 21
14090: PUSH
14091: LD_INT 1
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 22
14100: PUSH
14101: LD_LOC 18
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 3
14112: PUSH
14113: LD_INT 23
14115: PUSH
14116: LD_INT 0
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: PPUSH
14129: CALL_OW 69
14133: ST_TO_ADDR
// if n < number_of_people then
14134: LD_VAR 0 1
14138: PUSH
14139: LD_EXP 19
14143: LESS
14144: IFFALSE 14428
// begin aktresp := respawn ;
14146: LD_ADDR_VAR 0 3
14150: PUSH
14151: LD_LOC 18
14155: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14156: LD_ADDR_LOC 19
14160: PUSH
14161: LD_LOC 19
14165: PPUSH
14166: LD_VAR 0 3
14170: PPUSH
14171: LD_INT 1
14173: PPUSH
14174: CALL_OW 1
14178: ST_TO_ADDR
// enable ;
14179: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14180: LD_EXP 27
14184: PPUSH
14185: LD_EXP 28
14189: PPUSH
14190: CALL_OW 12
14194: PPUSH
14195: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14199: LD_ADDR_LOC 19
14203: PUSH
14204: LD_LOC 19
14208: PPUSH
14209: LD_VAR 0 3
14213: PPUSH
14214: LD_INT 0
14216: PPUSH
14217: CALL_OW 1
14221: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14222: LD_ADDR_VAR 0 2
14226: PUSH
14227: LD_INT 21
14229: PUSH
14230: LD_INT 3
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 2
14239: PUSH
14240: LD_INT 30
14242: PUSH
14243: LD_INT 0
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 30
14252: PUSH
14253: LD_INT 1
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 50
14267: PUSH
14268: EMPTY
14269: LIST
14270: PUSH
14271: LD_INT 22
14273: PUSH
14274: LD_VAR 0 3
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: PPUSH
14289: CALL_OW 69
14293: ST_TO_ADDR
// if dep = 0 then
14294: LD_VAR 0 2
14298: PUSH
14299: LD_INT 0
14301: EQUAL
14302: IFFALSE 14306
// exit ;
14304: GO 14432
// hc_name :=  ;
14306: LD_ADDR_OWVAR 26
14310: PUSH
14311: LD_STRING 
14313: ST_TO_ADDR
// hc_importance := 0 ;
14314: LD_ADDR_OWVAR 32
14318: PUSH
14319: LD_INT 0
14321: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14322: LD_INT 0
14324: PPUSH
14325: LD_INT 0
14327: PPUSH
14328: LD_EXP 20
14332: PUSH
14333: LD_INT 2
14335: DIV
14336: PPUSH
14337: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14341: LD_ADDR_OWVAR 21
14345: PUSH
14346: LD_EXP 35
14350: PUSH
14351: LD_VAR 0 3
14355: ARRAY
14356: ST_TO_ADDR
// uc_side := aktresp ;
14357: LD_ADDR_OWVAR 20
14361: PUSH
14362: LD_VAR 0 3
14366: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14367: LD_ADDR_VAR 0 2
14371: PUSH
14372: LD_VAR 0 2
14376: PUSH
14377: LD_INT 1
14379: PPUSH
14380: LD_VAR 0 2
14384: PPUSH
14385: CALL_OW 12
14389: ARRAY
14390: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14391: CALL_OW 44
14395: PPUSH
14396: LD_VAR 0 2
14400: PPUSH
14401: CALL_OW 250
14405: PPUSH
14406: LD_VAR 0 2
14410: PPUSH
14411: CALL_OW 251
14415: PPUSH
14416: LD_INT 7
14418: PPUSH
14419: LD_INT 1
14421: PPUSH
14422: CALL_OW 50
// end else
14426: GO 14429
// enable ;
14428: ENABLE
// end else
14429: GO 14432
// enable ;
14431: ENABLE
// end ; end_of_file
14432: PPOPN 3
14434: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14435: LD_INT 0
14437: PPUSH
14438: PPUSH
14439: PPUSH
// BuildUpTime_Delay = 0 ;
14440: LD_ADDR_EXP 57
14444: PUSH
14445: LD_INT 0
14447: ST_TO_ADDR
// if not def_builduptime then
14448: LD_EXP 14
14452: NOT
14453: IFFALSE 14457
// exit ;
14455: GO 14640
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14457: LD_ADDR_EXP 57
14461: PUSH
14462: LD_INT 8400
14464: PUSH
14465: LD_INT 2100
14467: PUSH
14468: LD_EXP 14
14472: MUL
14473: PLUS
14474: ST_TO_ADDR
// BuildUpTimeActive := true ;
14475: LD_ADDR_EXP 56
14479: PUSH
14480: LD_INT 1
14482: ST_TO_ADDR
// for i := 1 to 8 do
14483: LD_ADDR_VAR 0 2
14487: PUSH
14488: DOUBLE
14489: LD_INT 1
14491: DEC
14492: ST_TO_ADDR
14493: LD_INT 8
14495: PUSH
14496: FOR_TO
14497: IFFALSE 14638
// if Side_Positions [ i ] then
14499: LD_EXP 34
14503: PUSH
14504: LD_VAR 0 2
14508: ARRAY
14509: IFFALSE 14636
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14511: LD_EXP 55
14515: PUSH
14516: LD_EXP 34
14520: PUSH
14521: LD_VAR 0 2
14525: ARRAY
14526: ARRAY
14527: PPUSH
14528: LD_INT 5
14530: PPUSH
14531: CALL_OW 424
// for j := 1 to 8 do
14535: LD_ADDR_VAR 0 3
14539: PUSH
14540: DOUBLE
14541: LD_INT 1
14543: DEC
14544: ST_TO_ADDR
14545: LD_INT 8
14547: PUSH
14548: FOR_TO
14549: IFFALSE 14634
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14551: LD_EXP 34
14555: PUSH
14556: LD_VAR 0 3
14560: ARRAY
14561: PUSH
14562: LD_EXP 31
14566: PUSH
14567: LD_VAR 0 2
14571: ARRAY
14572: PUSH
14573: LD_EXP 31
14577: PUSH
14578: LD_VAR 0 3
14582: ARRAY
14583: NONEQUAL
14584: PUSH
14585: LD_EXP 36
14589: NOT
14590: PUSH
14591: LD_VAR 0 2
14595: PUSH
14596: LD_VAR 0 3
14600: NONEQUAL
14601: AND
14602: OR
14603: AND
14604: IFFALSE 14632
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14606: LD_VAR 0 3
14610: PPUSH
14611: LD_EXP 55
14615: PUSH
14616: LD_EXP 34
14620: PUSH
14621: LD_VAR 0 2
14625: ARRAY
14626: ARRAY
14627: PPUSH
14628: CALL_OW 333
14632: GO 14548
14634: POP
14635: POP
// end ;
14636: GO 14496
14638: POP
14639: POP
// end ;
14640: LD_VAR 0 1
14644: RET
// export function EndBuildUp ; var i , j ; begin
14645: LD_INT 0
14647: PPUSH
14648: PPUSH
14649: PPUSH
// BuildUpTimeActive := false ;
14650: LD_ADDR_EXP 56
14654: PUSH
14655: LD_INT 0
14657: ST_TO_ADDR
// for i := 1 to 8 do
14658: LD_ADDR_VAR 0 2
14662: PUSH
14663: DOUBLE
14664: LD_INT 1
14666: DEC
14667: ST_TO_ADDR
14668: LD_INT 8
14670: PUSH
14671: FOR_TO
14672: IFFALSE 14813
// if Side_Positions [ i ] then
14674: LD_EXP 34
14678: PUSH
14679: LD_VAR 0 2
14683: ARRAY
14684: IFFALSE 14811
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14686: LD_EXP 55
14690: PUSH
14691: LD_EXP 34
14695: PUSH
14696: LD_VAR 0 2
14700: ARRAY
14701: ARRAY
14702: PPUSH
14703: LD_INT 0
14705: PPUSH
14706: CALL_OW 424
// for j := 1 to 8 do
14710: LD_ADDR_VAR 0 3
14714: PUSH
14715: DOUBLE
14716: LD_INT 1
14718: DEC
14719: ST_TO_ADDR
14720: LD_INT 8
14722: PUSH
14723: FOR_TO
14724: IFFALSE 14809
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14726: LD_EXP 34
14730: PUSH
14731: LD_VAR 0 3
14735: ARRAY
14736: PUSH
14737: LD_EXP 31
14741: PUSH
14742: LD_VAR 0 2
14746: ARRAY
14747: PUSH
14748: LD_EXP 31
14752: PUSH
14753: LD_VAR 0 3
14757: ARRAY
14758: NONEQUAL
14759: PUSH
14760: LD_EXP 36
14764: NOT
14765: PUSH
14766: LD_VAR 0 2
14770: PUSH
14771: LD_VAR 0 3
14775: NONEQUAL
14776: AND
14777: OR
14778: AND
14779: IFFALSE 14807
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14781: LD_VAR 0 3
14785: PPUSH
14786: LD_EXP 55
14790: PUSH
14791: LD_EXP 34
14795: PUSH
14796: LD_VAR 0 2
14800: ARRAY
14801: ARRAY
14802: PPUSH
14803: CALL_OW 334
14807: GO 14723
14809: POP
14810: POP
// end ;
14811: GO 14671
14813: POP
14814: POP
// end ;
14815: LD_VAR 0 1
14819: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14820: LD_EXP 56
14824: IFFALSE 14999
14826: GO 14828
14828: DISABLE
14829: LD_INT 0
14831: PPUSH
14832: PPUSH
// begin for i := 1 to 8 do
14833: LD_ADDR_VAR 0 1
14837: PUSH
14838: DOUBLE
14839: LD_INT 1
14841: DEC
14842: ST_TO_ADDR
14843: LD_INT 8
14845: PUSH
14846: FOR_TO
14847: IFFALSE 14996
// if Side_Positions [ i ] then
14849: LD_EXP 34
14853: PUSH
14854: LD_VAR 0 1
14858: ARRAY
14859: IFFALSE 14994
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14861: LD_ADDR_VAR 0 2
14865: PUSH
14866: LD_EXP 55
14870: PUSH
14871: LD_EXP 34
14875: PUSH
14876: LD_VAR 0 1
14880: ARRAY
14881: ARRAY
14882: PPUSH
14883: LD_INT 2
14885: PUSH
14886: LD_INT 21
14888: PUSH
14889: LD_INT 1
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PUSH
14896: LD_INT 21
14898: PUSH
14899: LD_INT 2
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 22
14913: PUSH
14914: LD_OWVAR 2
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PPUSH
14927: CALL_OW 70
14931: PUSH
14932: FOR_IN
14933: IFFALSE 14992
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14935: LD_EXP 31
14939: PUSH
14940: LD_VAR 0 1
14944: ARRAY
14945: PUSH
14946: LD_EXP 31
14950: PUSH
14951: LD_OWVAR 2
14955: ARRAY
14956: NONEQUAL
14957: PUSH
14958: LD_EXP 36
14962: NOT
14963: PUSH
14964: LD_VAR 0 1
14968: PUSH
14969: LD_OWVAR 2
14973: NONEQUAL
14974: AND
14975: OR
14976: IFFALSE 14990
// ComMoveToArea ( un , BuildUpEscape ) ;
14978: LD_VAR 0 2
14982: PPUSH
14983: LD_INT 17
14985: PPUSH
14986: CALL_OW 113
14990: GO 14932
14992: POP
14993: POP
14994: GO 14846
14996: POP
14997: POP
// enable ;
14998: ENABLE
// end ;
14999: PPOPN 2
15001: END
// every 0 0$1 trigger def_builduptime do
15002: LD_EXP 14
15006: IFFALSE 15032
15008: GO 15010
15010: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15011: LD_INT 8400
15013: PUSH
15014: LD_EXP 14
15018: PUSH
15019: LD_INT 2100
15021: MUL
15022: PLUS
15023: PPUSH
15024: CALL_OW 67
// EndBuildUp ;
15028: CALL 14645 0 0
// end ;
15032: END
