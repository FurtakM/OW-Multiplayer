// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 36
 372: PUSH
 373: LD_EXP 31
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 600
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 577: LD_ADDR_VAR 0 3
 581: PUSH
 582: LD_INT 22
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_win_rules = 0 ;
 590: LD_ADDR_EXP 30
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// end else
 598: GO 732
// begin Randomize ;
 600: CALL_OW 10
// def_base_level := 2 ;
 604: LD_ADDR_EXP 1
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_amount_of_people := 2 ;
 612: LD_ADDR_EXP 2
 616: PUSH
 617: LD_INT 2
 619: ST_TO_ADDR
// def_skill_level := 1 ;
 620: LD_ADDR_EXP 3
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// def_starting_resources := 2 ;
 628: LD_ADDR_EXP 4
 632: PUSH
 633: LD_INT 2
 635: ST_TO_ADDR
// def_shipments_density := 50 ;
 636: LD_ADDR_EXP 5
 640: PUSH
 641: LD_INT 50
 643: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 644: LD_ADDR_EXP 6
 648: PUSH
 649: LD_INT 2
 651: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 2
 659: ST_TO_ADDR
// def_shared_vision := 1 ;
 660: LD_ADDR_EXP 8
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_morale_flags := 1 ;
 668: LD_ADDR_EXP 9
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_siberite_detection := 1 ;
 676: LD_ADDR_EXP 10
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// def_people_respawning := 2 ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_INT 2
 691: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 692: LD_ADDR_EXP 12
 696: PUSH
 697: LD_INT 3
 699: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 700: LD_ADDR_EXP 13
 704: PUSH
 705: LD_INT 2
 707: ST_TO_ADDR
// def_builduptime := 1 ;
 708: LD_ADDR_EXP 14
 712: PUSH
 713: LD_INT 1
 715: ST_TO_ADDR
// tech_level = 4 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 4
 723: ST_TO_ADDR
// def_win_rules = 0 ;
 724: LD_ADDR_EXP 30
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// end ; if isSGUI then
 732: LD_OWVAR 83
 736: IFFALSE 744
// setMpTechs ( ) else
 738: CALL 9063 0 0
 742: GO 757
// SetMpTechLevel ( tech_level + 1 ) ;
 744: LD_VAR 0 3
 748: PUSH
 749: LD_INT 1
 751: PLUS
 752: PPUSH
 753: CALL 9210 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_INT 0
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 1
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_EXP 1
 780: PUSH
 781: LD_INT 1
 783: PLUS
 784: ARRAY
 785: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 786: LD_ADDR_EXP 18
 790: PUSH
 791: LD_INT 0
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_INT 1
 812: PLUS
 813: ARRAY
 814: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 9
 822: PUSH
 823: LD_INT 12
 825: PUSH
 826: LD_INT 15
 828: PUSH
 829: LD_INT 24
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_EXP 2
 842: PUSH
 843: LD_INT 1
 845: PLUS
 846: ARRAY
 847: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 848: LD_ADDR_EXP 20
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 3
 875: PUSH
 876: LD_INT 1
 878: PLUS
 879: ARRAY
 880: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 881: LD_ADDR_EXP 22
 885: PUSH
 886: LD_INT 0
 888: PUSH
 889: LD_INT 0
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 30
 902: PUSH
 903: LD_INT 0
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 50
 916: PUSH
 917: LD_INT 20
 919: PUSH
 920: LD_INT 0
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 80
 930: PUSH
 931: LD_INT 40
 933: PUSH
 934: LD_INT 20
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: PUSH
 948: LD_EXP 4
 952: PUSH
 953: LD_INT 1
 955: PLUS
 956: ARRAY
 957: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 958: LD_ADDR_EXP 21
 962: PUSH
 963: LD_INT 10
 965: PUSH
 966: EMPTY
 967: LIST
 968: PUSH
 969: LD_INT 7
 971: PUSH
 972: LD_INT 14
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 18
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 10
 998: PUSH
 999: LD_INT 15
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PUSH
1017: LD_EXP 4
1021: PUSH
1022: LD_INT 1
1024: PLUS
1025: ARRAY
1026: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1027: LD_ADDR_EXP 23
1031: PUSH
1032: LD_INT 150
1034: PUSH
1035: LD_EXP 5
1039: MINUS
1040: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1041: LD_ADDR_EXP 27
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 10500
1051: PUSH
1052: LD_INT 6300
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: LD_EXP 11
1064: PUSH
1065: LD_INT 1
1067: PLUS
1068: ARRAY
1069: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1070: LD_ADDR_EXP 28
1074: PUSH
1075: LD_INT 0
1077: PUSH
1078: LD_INT 31500
1080: PUSH
1081: LD_INT 10500
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_EXP 11
1093: PUSH
1094: LD_INT 1
1096: PLUS
1097: ARRAY
1098: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1099: LD_ADDR_EXP 25
1103: PUSH
1104: LD_INT 0
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 3
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 12
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1132: LD_ADDR_EXP 24
1136: PUSH
1137: LD_INT 1
1139: NEG
1140: PUSH
1141: LD_INT 350
1143: PUSH
1144: LD_INT 700
1146: PUSH
1147: LD_INT 1400
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 9
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// battle_flags_id := [ ] ;
1170: LD_ADDR_EXP 44
1174: PUSH
1175: EMPTY
1176: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1177: LD_EXP 13
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: IFFALSE 1197
// siberite_bomb_Delay = 0 else
1187: LD_ADDR_EXP 29
1191: PUSH
1192: LD_INT 0
1194: ST_TO_ADDR
1195: GO 1219
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1197: LD_ADDR_EXP 29
1201: PUSH
1202: LD_EXP 13
1206: PUSH
1207: LD_INT 1
1209: MINUS
1210: PUSH
1211: LD_INT 21000
1213: MUL
1214: PUSH
1215: LD_INT 1
1217: PLUS
1218: ST_TO_ADDR
// end ;
1219: LD_VAR 0 1
1223: RET
// function init_map ; var i , j ; begin
1224: LD_INT 0
1226: PPUSH
1227: PPUSH
1228: PPUSH
// normal_oil_deposits_locations := [ [ 36 , 6 ] , [ 103 , 5 ] , [ 163 , 9 ] , [ 200 , 51 ] , [ 54 , 86 ] , [ 134 , 154 ] , [ 177 , 151 ] , [ 239 , 152 ] ] ;
1229: LD_ADDR_EXP 40
1233: PUSH
1234: LD_INT 36
1236: PUSH
1237: LD_INT 6
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 103
1246: PUSH
1247: LD_INT 5
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 163
1256: PUSH
1257: LD_INT 9
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 200
1266: PUSH
1267: LD_INT 51
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 54
1276: PUSH
1277: LD_INT 86
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 134
1286: PUSH
1287: LD_INT 154
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 177
1296: PUSH
1297: LD_INT 151
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 239
1306: PUSH
1307: LD_INT 152
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 56 , 6 ] , [ 62 , 7 ] , [ 186 , 17 ] , [ 219 , 87 ] , [ 83 , 131 ] , [ 114 , 153 ] , [ 214 , 156 ] , [ 221 , 105 ] ] ;
1324: LD_ADDR_EXP 41
1328: PUSH
1329: LD_INT 56
1331: PUSH
1332: LD_INT 6
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 62
1341: PUSH
1342: LD_INT 7
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 186
1351: PUSH
1352: LD_INT 17
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 219
1361: PUSH
1362: LD_INT 87
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 83
1371: PUSH
1372: LD_INT 131
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 114
1381: PUSH
1382: LD_INT 153
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 214
1391: PUSH
1392: LD_INT 156
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 221
1401: PUSH
1402: LD_INT 105
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 26 , 32 ] , [ 115 , 31 ] , [ 142 , 34 ] , [ 175 , 54 ] , [ 84 , 100 ] , [ 133 , 122 ] , [ 161 , 122 ] , [ 214 , 121 ] ] ;
1419: LD_ADDR_EXP 42
1423: PUSH
1424: LD_INT 26
1426: PUSH
1427: LD_INT 32
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 115
1436: PUSH
1437: LD_INT 31
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 142
1446: PUSH
1447: LD_INT 34
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 175
1456: PUSH
1457: LD_INT 54
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 84
1466: PUSH
1467: LD_INT 100
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 133
1476: PUSH
1477: LD_INT 122
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 161
1486: PUSH
1487: LD_INT 122
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 214
1496: PUSH
1497: LD_INT 121
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: ST_TO_ADDR
// depot_def := [ [ 32 , 17 , 2 ] , [ 95 , 16 , 3 ] , [ 154 , 14 , 3 ] , [ 188 , 54 , 4 ] , [ 65 , 97 , 1 ] , [ 136 , 144 , 5 ] , [ 182 , 145 , 0 ] , [ 234 , 140 , 5 ] ] ;
1514: LD_ADDR_EXP 37
1518: PUSH
1519: LD_INT 32
1521: PUSH
1522: LD_INT 17
1524: PUSH
1525: LD_INT 2
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 95
1535: PUSH
1536: LD_INT 16
1538: PUSH
1539: LD_INT 3
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 154
1549: PUSH
1550: LD_INT 14
1552: PUSH
1553: LD_INT 3
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 188
1563: PUSH
1564: LD_INT 54
1566: PUSH
1567: LD_INT 4
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: PUSH
1575: LD_INT 65
1577: PUSH
1578: LD_INT 97
1580: PUSH
1581: LD_INT 1
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 136
1591: PUSH
1592: LD_INT 144
1594: PUSH
1595: LD_INT 5
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 182
1605: PUSH
1606: LD_INT 145
1608: PUSH
1609: LD_INT 0
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 234
1619: PUSH
1620: LD_INT 140
1622: PUSH
1623: LD_INT 5
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: ST_TO_ADDR
// for i in depot_def do
1641: LD_ADDR_VAR 0 2
1645: PUSH
1646: LD_EXP 37
1650: PUSH
1651: FOR_IN
1652: IFFALSE 1728
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1654: LD_ADDR_EXP 39
1658: PUSH
1659: LD_EXP 39
1663: PUSH
1664: LD_VAR 0 2
1668: PUSH
1669: LD_INT 1
1671: ARRAY
1672: PPUSH
1673: LD_VAR 0 2
1677: PUSH
1678: LD_INT 3
1680: ARRAY
1681: PPUSH
1682: LD_INT 4
1684: NEG
1685: PPUSH
1686: CALL_OW 272
1690: PUSH
1691: LD_VAR 0 2
1695: PUSH
1696: LD_INT 2
1698: ARRAY
1699: PPUSH
1700: LD_VAR 0 2
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: PPUSH
1709: LD_INT 4
1711: NEG
1712: PPUSH
1713: CALL_OW 273
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: EMPTY
1723: LIST
1724: ADD
1725: ST_TO_ADDR
1726: GO 1651
1728: POP
1729: POP
// breastworks_def := [ [ [ 54 , 30 , 5 ] , [ 21 , 30 , 0 ] , [ 41 , 33 , 5 ] ] , [ [ 113 , 34 , 5 ] , [ 97 , 35 , 0 ] , [ 82 , 27 , 0 ] ] , [ [ 165 , 32 , 5 ] , [ 150 , 33 , 0 ] , [ 134 , 19 , 0 ] ] , [ [ 196 , 75 , 0 ] , [ 179 , 66 , 0 ] , [ 171 , 48 , 1 ] ] , [ [ 69 , 82 , 3 ] , [ 82 , 93 , 4 ] , [ 90 , 110 , 4 ] ] , [ [ 114 , 130 , 2 ] , [ 123 , 123 , 2 ] , [ 140 , 125 , 3 ] ] , [ [ 187 , 125 , 2 ] , [ 176 , 123 , 2 ] , [ 166 , 125 , 3 ] ] , [ [ 213 , 128 , 2 ] , [ 222 , 122 , 2 ] , [ 234 , 121 , 2 ] ] ] ;
1730: LD_ADDR_EXP 38
1734: PUSH
1735: LD_INT 54
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 5
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 21
1751: PUSH
1752: LD_INT 30
1754: PUSH
1755: LD_INT 0
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 41
1765: PUSH
1766: LD_INT 33
1768: PUSH
1769: LD_INT 5
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: PUSH
1782: LD_INT 113
1784: PUSH
1785: LD_INT 34
1787: PUSH
1788: LD_INT 5
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 97
1798: PUSH
1799: LD_INT 35
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 82
1812: PUSH
1813: LD_INT 27
1815: PUSH
1816: LD_INT 0
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 165
1831: PUSH
1832: LD_INT 32
1834: PUSH
1835: LD_INT 5
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 150
1845: PUSH
1846: LD_INT 33
1848: PUSH
1849: LD_INT 0
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 134
1859: PUSH
1860: LD_INT 19
1862: PUSH
1863: LD_INT 0
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 196
1878: PUSH
1879: LD_INT 75
1881: PUSH
1882: LD_INT 0
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 179
1892: PUSH
1893: LD_INT 66
1895: PUSH
1896: LD_INT 0
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 171
1906: PUSH
1907: LD_INT 48
1909: PUSH
1910: LD_INT 1
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 69
1925: PUSH
1926: LD_INT 82
1928: PUSH
1929: LD_INT 3
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 82
1939: PUSH
1940: LD_INT 93
1942: PUSH
1943: LD_INT 4
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 90
1953: PUSH
1954: LD_INT 110
1956: PUSH
1957: LD_INT 4
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 114
1972: PUSH
1973: LD_INT 130
1975: PUSH
1976: LD_INT 2
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 123
1986: PUSH
1987: LD_INT 123
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 140
2000: PUSH
2001: LD_INT 125
2003: PUSH
2004: LD_INT 3
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 187
2019: PUSH
2020: LD_INT 125
2022: PUSH
2023: LD_INT 2
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 176
2033: PUSH
2034: LD_INT 123
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: LIST
2044: PUSH
2045: LD_INT 166
2047: PUSH
2048: LD_INT 125
2050: PUSH
2051: LD_INT 3
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 213
2066: PUSH
2067: LD_INT 128
2069: PUSH
2070: LD_INT 2
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: LD_INT 222
2080: PUSH
2081: LD_INT 122
2083: PUSH
2084: LD_INT 2
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 234
2094: PUSH
2095: LD_INT 121
2097: PUSH
2098: LD_INT 2
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: ST_TO_ADDR
// for i = 1 to Side_Positions do
2121: LD_ADDR_VAR 0 2
2125: PUSH
2126: DOUBLE
2127: LD_INT 1
2129: DEC
2130: ST_TO_ADDR
2131: LD_EXP 34
2135: PUSH
2136: FOR_TO
2137: IFFALSE 2260
// begin if not Side_Positions [ i ] then
2139: LD_EXP 34
2143: PUSH
2144: LD_VAR 0 2
2148: ARRAY
2149: NOT
2150: IFFALSE 2154
// continue ;
2152: GO 2136
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2154: LD_EXP 40
2158: PUSH
2159: LD_EXP 34
2163: PUSH
2164: LD_VAR 0 2
2168: ARRAY
2169: ARRAY
2170: PUSH
2171: LD_INT 1
2173: ARRAY
2174: PPUSH
2175: LD_EXP 40
2179: PUSH
2180: LD_EXP 34
2184: PUSH
2185: LD_VAR 0 2
2189: ARRAY
2190: ARRAY
2191: PUSH
2192: LD_INT 2
2194: ARRAY
2195: PPUSH
2196: LD_INT 2
2198: PPUSH
2199: CALL_OW 62
// if def_extra_oil_deposits then
2203: LD_EXP 6
2207: IFFALSE 2258
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2209: LD_EXP 41
2213: PUSH
2214: LD_EXP 34
2218: PUSH
2219: LD_VAR 0 2
2223: ARRAY
2224: ARRAY
2225: PUSH
2226: LD_INT 1
2228: ARRAY
2229: PPUSH
2230: LD_EXP 41
2234: PUSH
2235: LD_EXP 34
2239: PUSH
2240: LD_VAR 0 2
2244: ARRAY
2245: ARRAY
2246: PUSH
2247: LD_INT 2
2249: ARRAY
2250: PPUSH
2251: LD_INT 2
2253: PPUSH
2254: CALL_OW 62
// end ;
2258: GO 2136
2260: POP
2261: POP
// if def_extra_sib_deposits then
2262: LD_EXP 7
2266: IFFALSE 2354
// for i = 1 to Side_Positions do
2268: LD_ADDR_VAR 0 2
2272: PUSH
2273: DOUBLE
2274: LD_INT 1
2276: DEC
2277: ST_TO_ADDR
2278: LD_EXP 34
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2352
// begin if not Side_Positions [ i ] then
2286: LD_EXP 34
2290: PUSH
2291: LD_VAR 0 2
2295: ARRAY
2296: NOT
2297: IFFALSE 2301
// continue ;
2299: GO 2283
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2301: LD_EXP 42
2305: PUSH
2306: LD_EXP 34
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: ARRAY
2317: PUSH
2318: LD_INT 1
2320: ARRAY
2321: PPUSH
2322: LD_EXP 42
2326: PUSH
2327: LD_EXP 34
2331: PUSH
2332: LD_VAR 0 2
2336: ARRAY
2337: ARRAY
2338: PUSH
2339: LD_INT 2
2341: ARRAY
2342: PPUSH
2343: LD_INT 3
2345: PPUSH
2346: CALL_OW 62
// end ;
2350: GO 2283
2352: POP
2353: POP
// end ;
2354: LD_VAR 0 1
2358: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2359: LD_INT 0
2361: PPUSH
2362: PPUSH
2363: PPUSH
// if not Team_Game then
2364: LD_EXP 36
2368: NOT
2369: IFFALSE 2467
// begin for i = 1 to 8 do
2371: LD_ADDR_VAR 0 2
2375: PUSH
2376: DOUBLE
2377: LD_INT 1
2379: DEC
2380: ST_TO_ADDR
2381: LD_INT 8
2383: PUSH
2384: FOR_TO
2385: IFFALSE 2463
// for j = 1 to 8 do
2387: LD_ADDR_VAR 0 3
2391: PUSH
2392: DOUBLE
2393: LD_INT 1
2395: DEC
2396: ST_TO_ADDR
2397: LD_INT 8
2399: PUSH
2400: FOR_TO
2401: IFFALSE 2459
// if i <> j then
2403: LD_VAR 0 2
2407: PUSH
2408: LD_VAR 0 3
2412: NONEQUAL
2413: IFFALSE 2437
// SetAttitude ( i , j , att_neutral , true ) else
2415: LD_VAR 0 2
2419: PPUSH
2420: LD_VAR 0 3
2424: PPUSH
2425: LD_INT 0
2427: PPUSH
2428: LD_INT 1
2430: PPUSH
2431: CALL_OW 80
2435: GO 2457
// SetAttitude ( i , j , att_friend , true ) ;
2437: LD_VAR 0 2
2441: PPUSH
2442: LD_VAR 0 3
2446: PPUSH
2447: LD_INT 1
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL_OW 80
2457: GO 2400
2459: POP
2460: POP
2461: GO 2384
2463: POP
2464: POP
// end else
2465: GO 2642
// begin if def_shared_vision then
2467: LD_EXP 8
2471: IFFALSE 2536
// begin for i in Teams do
2473: LD_ADDR_VAR 0 2
2477: PUSH
2478: LD_EXP 32
2482: PUSH
2483: FOR_IN
2484: IFFALSE 2534
// for j = 2 to i do
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: DOUBLE
2492: LD_INT 2
2494: DEC
2495: ST_TO_ADDR
2496: LD_VAR 0 2
2500: PUSH
2501: FOR_TO
2502: IFFALSE 2530
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2504: LD_VAR 0 2
2508: PUSH
2509: LD_VAR 0 3
2513: ARRAY
2514: PPUSH
2515: LD_VAR 0 2
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: PPUSH
2524: CALL_OW 343
2528: GO 2501
2530: POP
2531: POP
2532: GO 2483
2534: POP
2535: POP
// end ; for i = 1 to 8 do
2536: LD_ADDR_VAR 0 2
2540: PUSH
2541: DOUBLE
2542: LD_INT 1
2544: DEC
2545: ST_TO_ADDR
2546: LD_INT 8
2548: PUSH
2549: FOR_TO
2550: IFFALSE 2640
// for j = 1 to 8 do
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: DOUBLE
2558: LD_INT 1
2560: DEC
2561: ST_TO_ADDR
2562: LD_INT 8
2564: PUSH
2565: FOR_TO
2566: IFFALSE 2636
// if Side_Teams [ i ] = Side_Teams [ j ] then
2568: LD_EXP 31
2572: PUSH
2573: LD_VAR 0 2
2577: ARRAY
2578: PUSH
2579: LD_EXP 31
2583: PUSH
2584: LD_VAR 0 3
2588: ARRAY
2589: EQUAL
2590: IFFALSE 2614
// SetAttitude ( i , j , att_friend , true ) else
2592: LD_VAR 0 2
2596: PPUSH
2597: LD_VAR 0 3
2601: PPUSH
2602: LD_INT 1
2604: PPUSH
2605: LD_INT 1
2607: PPUSH
2608: CALL_OW 80
2612: GO 2634
// SetAttitude ( i , j , att_enemy , true ) ;
2614: LD_VAR 0 2
2618: PPUSH
2619: LD_VAR 0 3
2623: PPUSH
2624: LD_INT 2
2626: PPUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 80
2634: GO 2565
2636: POP
2637: POP
2638: GO 2549
2640: POP
2641: POP
// end ; end ;
2642: LD_VAR 0 1
2646: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2647: LD_INT 0
2649: PPUSH
2650: PPUSH
2651: PPUSH
2652: PPUSH
// result := [ ] ;
2653: LD_ADDR_VAR 0 7
2657: PUSH
2658: EMPTY
2659: ST_TO_ADDR
// for i := 1 to count do
2660: LD_ADDR_VAR 0 8
2664: PUSH
2665: DOUBLE
2666: LD_INT 1
2668: DEC
2669: ST_TO_ADDR
2670: LD_VAR 0 1
2674: PUSH
2675: FOR_TO
2676: IFFALSE 3094
// begin uc_direction := Rand ( 0 , 5 ) ;
2678: LD_ADDR_OWVAR 24
2682: PUSH
2683: LD_INT 0
2685: PPUSH
2686: LD_INT 5
2688: PPUSH
2689: CALL_OW 12
2693: ST_TO_ADDR
// if commander then
2694: LD_LOC 1
2698: IFFALSE 2807
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2700: LD_ADDR_OWVAR 26
2704: PUSH
2705: LD_OWVAR 19
2709: PUSH
2710: LD_OWVAR 20
2714: ARRAY
2715: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2716: LD_INT 1
2718: PPUSH
2719: LD_INT 2
2721: PPUSH
2722: CALL_OW 12
2726: PPUSH
2727: LD_VAR 0 2
2731: PPUSH
2732: LD_EXP 20
2736: PUSH
2737: LD_INT 2
2739: PLUS
2740: PPUSH
2741: CALL_OW 380
// hc_importance := 105 ;
2745: LD_ADDR_OWVAR 32
2749: PUSH
2750: LD_INT 105
2752: ST_TO_ADDR
// commander := false ;
2753: LD_ADDR_LOC 1
2757: PUSH
2758: LD_INT 0
2760: ST_TO_ADDR
// if Multiplayer then
2761: LD_OWVAR 4
2765: IFFALSE 2805
// begin hc_gallery := MULTIAVATARS ;
2767: LD_ADDR_OWVAR 33
2771: PUSH
2772: LD_STRING MULTIAVATARS
2774: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2775: LD_ADDR_OWVAR 34
2779: PUSH
2780: LD_OWVAR 20
2784: PPUSH
2785: CALL_OW 525
2789: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2790: LD_ADDR_OWVAR 27
2794: PUSH
2795: LD_OWVAR 20
2799: PPUSH
2800: CALL_OW 526
2804: ST_TO_ADDR
// end ; end else
2805: GO 2870
// begin hc_name :=  ;
2807: LD_ADDR_OWVAR 26
2811: PUSH
2812: LD_STRING 
2814: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2815: LD_INT 1
2817: PPUSH
2818: LD_INT 2
2820: PPUSH
2821: CALL_OW 12
2825: PPUSH
2826: LD_VAR 0 2
2830: PPUSH
2831: LD_EXP 20
2835: PPUSH
2836: CALL_OW 380
// hc_importance := 0 ;
2840: LD_ADDR_OWVAR 32
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// if Multiplayer then
2848: LD_OWVAR 4
2852: IFFALSE 2870
// begin hc_gallery :=  ;
2854: LD_ADDR_OWVAR 33
2858: PUSH
2859: LD_STRING 
2861: ST_TO_ADDR
// hc_face_number := 0 ;
2862: LD_ADDR_OWVAR 34
2866: PUSH
2867: LD_INT 0
2869: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2870: LD_ADDR_VAR 0 10
2874: PUSH
2875: CALL_OW 44
2879: ST_TO_ADDR
// if global_defined then
2880: LD_LOC 3
2884: IFFALSE 3024
// begin if ( cl = class_soldier ) then
2886: LD_VAR 0 2
2890: PUSH
2891: LD_INT 1
2893: EQUAL
2894: IFFALSE 2914
// j := i + soldiers_created else
2896: LD_ADDR_VAR 0 9
2900: PUSH
2901: LD_VAR 0 8
2905: PUSH
2906: LD_LOC 4
2910: PLUS
2911: ST_TO_ADDR
2912: GO 2924
// j := i ;
2914: LD_ADDR_VAR 0 9
2918: PUSH
2919: LD_VAR 0 8
2923: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2924: LD_LOC 2
2928: PUSH
2929: LD_VAR 0 2
2933: ARRAY
2934: PUSH
2935: LD_VAR 0 9
2939: ARRAY
2940: PPUSH
2941: LD_VAR 0 10
2945: PPUSH
2946: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2950: LD_VAR 0 10
2954: PPUSH
2955: LD_INT 2
2957: PPUSH
2958: LD_LOC 2
2962: PUSH
2963: LD_VAR 0 2
2967: ARRAY
2968: PUSH
2969: LD_VAR 0 9
2973: ARRAY
2974: PPUSH
2975: LD_INT 2
2977: PPUSH
2978: CALL_OW 260
2982: PPUSH
2983: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2987: LD_VAR 0 10
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_LOC 2
2999: PUSH
3000: LD_VAR 0 2
3004: ARRAY
3005: PUSH
3006: LD_VAR 0 9
3010: ARRAY
3011: PPUSH
3012: LD_INT 1
3014: PPUSH
3015: CALL_OW 260
3019: PPUSH
3020: CALL_OW 239
// end ; if building then
3024: LD_VAR 0 6
3028: IFFALSE 3046
// PlaceHumanInUnit ( un , building ) else
3030: LD_VAR 0 10
3034: PPUSH
3035: LD_VAR 0 6
3039: PPUSH
3040: CALL_OW 52
3044: GO 3073
// PlaceUnitXYR ( un , x , y , r , false ) ;
3046: LD_VAR 0 10
3050: PPUSH
3051: LD_VAR 0 3
3055: PPUSH
3056: LD_VAR 0 4
3060: PPUSH
3061: LD_VAR 0 5
3065: PPUSH
3066: LD_INT 0
3068: PPUSH
3069: CALL_OW 50
// result := result ^ [ un ] ;
3073: LD_ADDR_VAR 0 7
3077: PUSH
3078: LD_VAR 0 7
3082: PUSH
3083: LD_VAR 0 10
3087: PUSH
3088: EMPTY
3089: LIST
3090: ADD
3091: ST_TO_ADDR
// end ;
3092: GO 2675
3094: POP
3095: POP
// if not global_defined then
3096: LD_LOC 3
3100: NOT
3101: IFFALSE 3179
// if ( global_units >= cl ) then
3103: LD_LOC 2
3107: PUSH
3108: LD_VAR 0 2
3112: GREATEREQUAL
3113: IFFALSE 3154
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3115: LD_ADDR_LOC 2
3119: PUSH
3120: LD_LOC 2
3124: PPUSH
3125: LD_VAR 0 2
3129: PPUSH
3130: LD_LOC 2
3134: PUSH
3135: LD_VAR 0 2
3139: ARRAY
3140: PUSH
3141: LD_VAR 0 7
3145: ADD
3146: PPUSH
3147: CALL_OW 1
3151: ST_TO_ADDR
3152: GO 3179
// global_units := Replace ( global_units , cl , result ) ;
3154: LD_ADDR_LOC 2
3158: PUSH
3159: LD_LOC 2
3163: PPUSH
3164: LD_VAR 0 2
3168: PPUSH
3169: LD_VAR 0 7
3173: PPUSH
3174: CALL_OW 1
3178: ST_TO_ADDR
// if commander then
3179: LD_LOC 1
3183: IFFALSE 3230
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3185: LD_ADDR_EXP 45
3189: PUSH
3190: LD_EXP 45
3194: PPUSH
3195: LD_OWVAR 20
3199: PPUSH
3200: LD_EXP 45
3204: PUSH
3205: LD_OWVAR 20
3209: ARRAY
3210: PUSH
3211: LD_VAR 0 10
3215: ADD
3216: PPUSH
3217: CALL_OW 1
3221: ST_TO_ADDR
// commander := false ;
3222: LD_ADDR_LOC 1
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// end ; end ;
3230: LD_VAR 0 7
3234: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3235: LD_INT 0
3237: PPUSH
3238: PPUSH
3239: PPUSH
3240: PPUSH
3241: PPUSH
3242: PPUSH
3243: PPUSH
3244: PPUSH
3245: PPUSH
// if side in [ 0 , 9 ] then
3246: LD_VAR 0 1
3250: PUSH
3251: LD_INT 0
3253: PUSH
3254: LD_INT 9
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: IN
3261: IFFALSE 3265
// exit ;
3263: GO 4315
// pos := Side_Positions [ side ] ;
3265: LD_ADDR_VAR 0 3
3269: PUSH
3270: LD_EXP 34
3274: PUSH
3275: LD_VAR 0 1
3279: ARRAY
3280: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3281: LD_ADDR_OWVAR 21
3285: PUSH
3286: LD_EXP 35
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: ST_TO_ADDR
// uc_side := side ;
3297: LD_ADDR_OWVAR 20
3301: PUSH
3302: LD_VAR 0 1
3306: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3307: LD_ADDR_VAR 0 4
3311: PUSH
3312: LD_EXP 37
3316: PUSH
3317: LD_VAR 0 3
3321: ARRAY
3322: PUSH
3323: LD_INT 1
3325: ARRAY
3326: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3327: LD_ADDR_VAR 0 5
3331: PUSH
3332: LD_EXP 37
3336: PUSH
3337: LD_VAR 0 3
3341: ARRAY
3342: PUSH
3343: LD_INT 2
3345: ARRAY
3346: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3347: LD_ADDR_VAR 0 6
3351: PUSH
3352: LD_EXP 37
3356: PUSH
3357: LD_VAR 0 3
3361: ARRAY
3362: PUSH
3363: LD_INT 3
3365: ARRAY
3366: ST_TO_ADDR
// if is_depot then
3367: LD_EXP 17
3371: IFFALSE 3504
// begin bc_type = b_depot ;
3373: LD_ADDR_OWVAR 42
3377: PUSH
3378: LD_INT 0
3380: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3381: LD_ADDR_VAR 0 10
3385: PUSH
3386: LD_VAR 0 4
3390: PPUSH
3391: LD_VAR 0 5
3395: PPUSH
3396: LD_VAR 0 6
3400: PPUSH
3401: CALL_OW 47
3405: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3406: LD_VAR 0 10
3410: PPUSH
3411: LD_STRING @
3413: PUSH
3414: LD_VAR 0 1
3418: STR
3419: PPUSH
3420: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3424: LD_VAR 0 10
3428: PPUSH
3429: CALL_OW 274
3433: PPUSH
3434: LD_INT 1
3436: PPUSH
3437: LD_EXP 22
3441: PUSH
3442: LD_INT 1
3444: ARRAY
3445: PPUSH
3446: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3450: LD_VAR 0 10
3454: PPUSH
3455: CALL_OW 274
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: LD_EXP 22
3467: PUSH
3468: LD_INT 2
3470: ARRAY
3471: PPUSH
3472: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3476: LD_VAR 0 10
3480: PPUSH
3481: CALL_OW 274
3485: PPUSH
3486: LD_INT 3
3488: PPUSH
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 3
3496: ARRAY
3497: PPUSH
3498: CALL_OW 277
// end else
3502: GO 3648
// begin for i := 1 to 3 do
3504: LD_ADDR_VAR 0 7
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_INT 3
3516: PUSH
3517: FOR_TO
3518: IFFALSE 3646
// begin r := starting_resources [ i ] ;
3520: LD_ADDR_VAR 0 8
3524: PUSH
3525: LD_EXP 22
3529: PUSH
3530: LD_VAR 0 7
3534: ARRAY
3535: ST_TO_ADDR
// while r >= 10 do
3536: LD_VAR 0 8
3540: PUSH
3541: LD_INT 10
3543: GREATEREQUAL
3544: IFFALSE 3644
// if r > 50 then
3546: LD_VAR 0 8
3550: PUSH
3551: LD_INT 50
3553: GREATER
3554: IFFALSE 3600
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3556: LD_VAR 0 7
3560: PPUSH
3561: LD_INT 5
3563: PPUSH
3564: LD_VAR 0 4
3568: PPUSH
3569: LD_VAR 0 5
3573: PPUSH
3574: LD_INT 4
3576: PPUSH
3577: LD_INT 0
3579: PPUSH
3580: CALL_OW 60
// r := r - 50 ;
3584: LD_ADDR_VAR 0 8
3588: PUSH
3589: LD_VAR 0 8
3593: PUSH
3594: LD_INT 50
3596: MINUS
3597: ST_TO_ADDR
// end else
3598: GO 3642
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3600: LD_VAR 0 7
3604: PPUSH
3605: LD_VAR 0 8
3609: PUSH
3610: LD_INT 10
3612: DIV
3613: PPUSH
3614: LD_VAR 0 4
3618: PPUSH
3619: LD_VAR 0 5
3623: PPUSH
3624: LD_INT 4
3626: PPUSH
3627: LD_INT 0
3629: PPUSH
3630: CALL_OW 60
// r := 0 ;
3634: LD_ADDR_VAR 0 8
3638: PUSH
3639: LD_INT 0
3641: ST_TO_ADDR
// end ;
3642: GO 3536
// end ;
3644: GO 3517
3646: POP
3647: POP
// end ; for r in starting_crates do
3648: LD_ADDR_VAR 0 8
3652: PUSH
3653: LD_EXP 21
3657: PUSH
3658: FOR_IN
3659: IFFALSE 3691
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3661: LD_INT 1
3663: PPUSH
3664: LD_INT 5
3666: PPUSH
3667: LD_VAR 0 4
3671: PPUSH
3672: LD_VAR 0 5
3676: PPUSH
3677: LD_VAR 0 8
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 60
3689: GO 3658
3691: POP
3692: POP
// if def_morale_flags then
3693: LD_EXP 9
3697: IFFALSE 3836
// begin x := start_def [ pos ] [ 1 ] ;
3699: LD_ADDR_VAR 0 4
3703: PUSH
3704: LD_EXP 39
3708: PUSH
3709: LD_VAR 0 3
3713: ARRAY
3714: PUSH
3715: LD_INT 1
3717: ARRAY
3718: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3719: LD_ADDR_VAR 0 5
3723: PUSH
3724: LD_EXP 39
3728: PUSH
3729: LD_VAR 0 3
3733: ARRAY
3734: PUSH
3735: LD_INT 2
3737: ARRAY
3738: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3739: LD_VAR 0 4
3743: PPUSH
3744: LD_VAR 0 5
3748: PPUSH
3749: LD_INT 12
3751: PPUSH
3752: LD_INT 2
3754: PPUSH
3755: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3759: LD_ADDR_EXP 44
3763: PUSH
3764: LD_EXP 44
3768: PUSH
3769: LD_VAR 0 1
3773: PPUSH
3774: LD_VAR 0 4
3778: PPUSH
3779: LD_VAR 0 5
3783: PPUSH
3784: LD_INT 1
3786: PUSH
3787: LD_INT 100
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 2
3796: PUSH
3797: LD_INT 50
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 3
3806: PUSH
3807: LD_INT 20
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 20
3816: PUSH
3817: LD_INT 100
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: PPUSH
3830: CALL_OW 418
3834: ADD
3835: ST_TO_ADDR
// end ; commander := true ;
3836: LD_ADDR_LOC 1
3840: PUSH
3841: LD_INT 1
3843: ST_TO_ADDR
// soldiers_created := 0 ;
3844: LD_ADDR_LOC 4
3848: PUSH
3849: LD_INT 0
3851: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3852: LD_ADDR_VAR 0 7
3856: PUSH
3857: DOUBLE
3858: LD_INT 1
3860: DEC
3861: ST_TO_ADDR
3862: LD_EXP 18
3866: PUSH
3867: FOR_TO
3868: IFFALSE 4021
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3870: LD_ADDR_VAR 0 4
3874: PUSH
3875: LD_EXP 38
3879: PUSH
3880: LD_VAR 0 3
3884: ARRAY
3885: PUSH
3886: LD_VAR 0 7
3890: ARRAY
3891: PUSH
3892: LD_INT 1
3894: ARRAY
3895: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3896: LD_ADDR_VAR 0 5
3900: PUSH
3901: LD_EXP 38
3905: PUSH
3906: LD_VAR 0 3
3910: ARRAY
3911: PUSH
3912: LD_VAR 0 7
3916: ARRAY
3917: PUSH
3918: LD_INT 2
3920: ARRAY
3921: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3922: LD_ADDR_VAR 0 6
3926: PUSH
3927: LD_EXP 38
3931: PUSH
3932: LD_VAR 0 3
3936: ARRAY
3937: PUSH
3938: LD_VAR 0 7
3942: ARRAY
3943: PUSH
3944: LD_INT 3
3946: ARRAY
3947: ST_TO_ADDR
// bc_type := b_breastwork ;
3948: LD_ADDR_OWVAR 42
3952: PUSH
3953: LD_INT 31
3955: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3956: LD_ADDR_VAR 0 9
3960: PUSH
3961: LD_VAR 0 4
3965: PPUSH
3966: LD_VAR 0 5
3970: PPUSH
3971: LD_VAR 0 6
3975: PPUSH
3976: CALL_OW 47
3980: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3981: LD_INT 1
3983: PPUSH
3984: LD_INT 1
3986: PPUSH
3987: LD_INT 0
3989: PPUSH
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: LD_VAR 0 9
4000: PPUSH
4001: CALL 2647 0 6
// soldiers_created := soldiers_created + 1 ;
4005: LD_ADDR_LOC 4
4009: PUSH
4010: LD_LOC 4
4014: PUSH
4015: LD_INT 1
4017: PLUS
4018: ST_TO_ADDR
// end ;
4019: GO 3867
4021: POP
4022: POP
// x := start_def [ pos ] [ 1 ] ;
4023: LD_ADDR_VAR 0 4
4027: PUSH
4028: LD_EXP 39
4032: PUSH
4033: LD_VAR 0 3
4037: ARRAY
4038: PUSH
4039: LD_INT 1
4041: ARRAY
4042: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4043: LD_ADDR_VAR 0 5
4047: PUSH
4048: LD_EXP 39
4052: PUSH
4053: LD_VAR 0 3
4057: ARRAY
4058: PUSH
4059: LD_INT 2
4061: ARRAY
4062: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4063: LD_LOC 8
4067: PUSH
4068: LD_EXP 18
4072: MINUS
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_VAR 0 4
4081: PPUSH
4082: LD_VAR 0 5
4086: PPUSH
4087: LD_INT 5
4089: PPUSH
4090: LD_INT 0
4092: PPUSH
4093: CALL 2647 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4097: LD_LOC 5
4101: PPUSH
4102: LD_INT 2
4104: PPUSH
4105: LD_VAR 0 4
4109: PPUSH
4110: LD_VAR 0 5
4114: PPUSH
4115: LD_INT 5
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL 2647 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4125: LD_LOC 7
4129: PPUSH
4130: LD_INT 3
4132: PPUSH
4133: LD_VAR 0 4
4137: PPUSH
4138: LD_VAR 0 5
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: LD_INT 0
4148: PPUSH
4149: CALL 2647 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4153: LD_LOC 6
4157: PPUSH
4158: LD_INT 4
4160: PPUSH
4161: LD_VAR 0 4
4165: PPUSH
4166: LD_VAR 0 5
4170: PPUSH
4171: LD_INT 5
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL 2647 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4181: LD_EXP 10
4185: PUSH
4186: LD_INT 20
4188: PPUSH
4189: LD_VAR 0 1
4193: PPUSH
4194: CALL_OW 321
4198: PUSH
4199: LD_INT 1
4201: EQUAL
4202: AND
4203: IFFALSE 4220
// SetTech ( tech_SibDet , side , state_researched ) ;
4205: LD_INT 20
4207: PPUSH
4208: LD_VAR 0 1
4212: PPUSH
4213: LD_INT 2
4215: PPUSH
4216: CALL_OW 322
// if def_siberite_bomb = 1 then
4220: LD_EXP 13
4224: PUSH
4225: LD_INT 1
4227: EQUAL
4228: IFFALSE 4262
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4230: LD_INT 25
4232: PPUSH
4233: LD_VAR 0 1
4237: PPUSH
4238: LD_INT 1
4240: PPUSH
4241: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4245: LD_INT 73
4247: PPUSH
4248: LD_VAR 0 1
4252: PPUSH
4253: LD_INT 1
4255: PPUSH
4256: CALL_OW 322
// end else
4260: GO 4292
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4262: LD_INT 25
4264: PPUSH
4265: LD_VAR 0 1
4269: PPUSH
4270: LD_INT 0
4272: PPUSH
4273: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4277: LD_INT 73
4279: PPUSH
4280: LD_VAR 0 1
4284: PPUSH
4285: LD_INT 0
4287: PPUSH
4288: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4292: LD_INT 24
4294: PPUSH
4295: LD_VAR 0 1
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 322
// global_defined := true ;
4307: LD_ADDR_LOC 3
4311: PUSH
4312: LD_INT 1
4314: ST_TO_ADDR
// end ;
4315: LD_VAR 0 2
4319: RET
// function prepare_sides ; var i ; begin
4320: LD_INT 0
4322: PPUSH
4323: PPUSH
// global_units := [ ] ;
4324: LD_ADDR_LOC 2
4328: PUSH
4329: EMPTY
4330: ST_TO_ADDR
// global_defined := false ;
4331: LD_ADDR_LOC 3
4335: PUSH
4336: LD_INT 0
4338: ST_TO_ADDR
// CountClassMembers ;
4339: CALL 4389 0 0
// for i := 1 to 8 do
4343: LD_ADDR_VAR 0 2
4347: PUSH
4348: DOUBLE
4349: LD_INT 1
4351: DEC
4352: ST_TO_ADDR
4353: LD_INT 8
4355: PUSH
4356: FOR_TO
4357: IFFALSE 4382
// if Side_Positions [ i ] then
4359: LD_EXP 34
4363: PUSH
4364: LD_VAR 0 2
4368: ARRAY
4369: IFFALSE 4380
// prepare_side ( i ) ;
4371: LD_VAR 0 2
4375: PPUSH
4376: CALL 3235 0 1
4380: GO 4356
4382: POP
4383: POP
// end ;
4384: LD_VAR 0 1
4388: RET
// function CountClassMembers ; var Mode ; begin
4389: LD_INT 0
4391: PPUSH
4392: PPUSH
// if No_Mechs then
4393: LD_EXP 15
4397: IFFALSE 4409
// Mode := 2 else
4399: LD_ADDR_VAR 0 2
4403: PUSH
4404: LD_INT 2
4406: ST_TO_ADDR
4407: GO 4417
// Mode := 1 ;
4409: LD_ADDR_VAR 0 2
4413: PUSH
4414: LD_INT 1
4416: ST_TO_ADDR
// neng := number_of_people ;
4417: LD_ADDR_LOC 5
4421: PUSH
4422: LD_EXP 19
4426: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4427: LD_ADDR_LOC 8
4431: PUSH
4432: LD_LOC 5
4436: PUSH
4437: LD_INT 4
4439: PUSH
4440: LD_INT 3
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_VAR 0 2
4451: ARRAY
4452: DIV
4453: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4454: LD_LOC 8
4458: PUSH
4459: LD_EXP 18
4463: LESS
4464: IFFALSE 4476
// nsol := number_of_breastworks ;
4466: LD_ADDR_LOC 8
4470: PUSH
4471: LD_EXP 18
4475: ST_TO_ADDR
// neng := neng - nsol ;
4476: LD_ADDR_LOC 5
4480: PUSH
4481: LD_LOC 5
4485: PUSH
4486: LD_LOC 8
4490: MINUS
4491: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4492: LD_ADDR_LOC 6
4496: PUSH
4497: LD_LOC 5
4501: PUSH
4502: LD_INT 3
4504: PUSH
4505: LD_INT 2
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_VAR 0 2
4516: ARRAY
4517: DIV
4518: ST_TO_ADDR
// if ( nsci < 1 ) then
4519: LD_LOC 6
4523: PUSH
4524: LD_INT 1
4526: LESS
4527: IFFALSE 4537
// nsci := 1 ;
4529: LD_ADDR_LOC 6
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// neng := neng - nsci ;
4537: LD_ADDR_LOC 5
4541: PUSH
4542: LD_LOC 5
4546: PUSH
4547: LD_LOC 6
4551: MINUS
4552: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4553: LD_ADDR_LOC 7
4557: PUSH
4558: LD_LOC 5
4562: PUSH
4563: LD_INT 2
4565: DIV
4566: PUSH
4567: LD_INT 0
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: LD_VAR 0 2
4578: ARRAY
4579: ST_TO_ADDR
// neng := neng - nmech ;
4580: LD_ADDR_LOC 5
4584: PUSH
4585: LD_LOC 5
4589: PUSH
4590: LD_LOC 7
4594: MINUS
4595: ST_TO_ADDR
// if ( neng < 1 ) then
4596: LD_LOC 5
4600: PUSH
4601: LD_INT 1
4603: LESS
4604: IFFALSE 4614
// neng := 1 ;
4606: LD_ADDR_LOC 5
4610: PUSH
4611: LD_INT 1
4613: ST_TO_ADDR
// end ;
4614: LD_VAR 0 1
4618: RET
// starting begin disable ( 98 ) ;
4619: LD_INT 98
4621: DISABLE_MARKED
// disable ( 99 ) ;
4622: LD_INT 99
4624: DISABLE_MARKED
// disable ( 400 ) ;
4625: LD_INT 400
4627: DISABLE_MARKED
// disable ( 401 ) ;
4628: LD_INT 401
4630: DISABLE_MARKED
// mp_selectmsg := true ;
4631: LD_ADDR_OWVAR 13
4635: PUSH
4636: LD_INT 1
4638: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4639: CALL 68 0 0
// init_map ;
4643: CALL 1224 0 0
// init_respawning ;
4647: CALL 13787 0 0
// set_shared_visions_and_alliances ;
4651: CALL 2359 0 0
// ResetFog ;
4655: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4659: LD_OWVAR 2
4663: PPUSH
4664: CALL_OW 520
// AnimateTrees ( true ) ;
4668: LD_INT 1
4670: PPUSH
4671: CALL_OW 573
// prepare_sides ;
4675: CALL 4320 0 0
// Init_Win_Condition ;
4679: CALL 7768 0 0
// ShowTimer ;
4683: CALL 7346 0 0
// music_nat := Side_Nations [ your_side ] ;
4687: LD_ADDR_OWVAR 71
4691: PUSH
4692: LD_EXP 35
4696: PUSH
4697: LD_OWVAR 2
4701: ARRAY
4702: ST_TO_ADDR
// if IAmSpec then
4703: CALL_OW 531
4707: IFFALSE 4731
// begin fogoff ( true ) ;
4709: LD_INT 1
4711: PPUSH
4712: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4716: LD_INT 130
4718: PPUSH
4719: LD_INT 100
4721: PPUSH
4722: CALL_OW 86
// enable ( 400 ) ;
4726: LD_INT 400
4728: ENABLE_MARKED
// end else
4729: GO 4777
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4731: LD_EXP 39
4735: PUSH
4736: LD_EXP 34
4740: PUSH
4741: LD_OWVAR 2
4745: ARRAY
4746: ARRAY
4747: PUSH
4748: LD_INT 1
4750: ARRAY
4751: PPUSH
4752: LD_EXP 39
4756: PUSH
4757: LD_EXP 34
4761: PUSH
4762: LD_OWVAR 2
4766: ARRAY
4767: ARRAY
4768: PUSH
4769: LD_INT 2
4771: ARRAY
4772: PPUSH
4773: CALL_OW 86
// end ; InitApeman ;
4777: CALL 5854 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
4781: LD_ADDR_EXP 55
4785: PUSH
4786: LD_INT 9
4788: PUSH
4789: LD_INT 10
4791: PUSH
4792: LD_INT 11
4794: PUSH
4795: LD_INT 12
4797: PUSH
4798: LD_INT 13
4800: PUSH
4801: LD_INT 14
4803: PUSH
4804: LD_INT 15
4806: PUSH
4807: LD_INT 16
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: ST_TO_ADDR
// BeginBuildUp ;
4820: CALL 14281 0 0
// end ;
4824: END
// every 0 0$1 do
4825: GO 4827
4827: DISABLE
// if ( def_siberite_bomb > 1 ) then
4828: LD_EXP 13
4832: PUSH
4833: LD_INT 1
4835: GREATER
4836: IFFALSE 4851
// begin wait ( siberite_bomb_Delay ) ;
4838: LD_EXP 29
4842: PPUSH
4843: CALL_OW 67
// EnableSibFiss ;
4847: CALL 4852 0 0
// end ;
4851: END
// function EnableSibFiss ; var i ; begin
4852: LD_INT 0
4854: PPUSH
4855: PPUSH
// for i := 1 to 8 do
4856: LD_ADDR_VAR 0 2
4860: PUSH
4861: DOUBLE
4862: LD_INT 1
4864: DEC
4865: ST_TO_ADDR
4866: LD_INT 8
4868: PUSH
4869: FOR_TO
4870: IFFALSE 4916
// if Side_Positions [ i ] then
4872: LD_EXP 34
4876: PUSH
4877: LD_VAR 0 2
4881: ARRAY
4882: IFFALSE 4914
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4884: LD_INT 25
4886: PPUSH
4887: LD_VAR 0 2
4891: PPUSH
4892: LD_INT 1
4894: PPUSH
4895: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4899: LD_INT 73
4901: PPUSH
4902: LD_VAR 0 2
4906: PPUSH
4907: LD_INT 1
4909: PPUSH
4910: CALL_OW 322
// end ;
4914: GO 4869
4916: POP
4917: POP
// end ; end_of_file
4918: LD_VAR 0 1
4922: RET
// every 0 0$25 + 0 0$1.0 do
4923: GO 4925
4925: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4926: LD_INT 20
4928: PPUSH
4929: LD_INT 1
4931: PPUSH
4932: CALL_OW 287
4936: PUSH
4937: LD_INT 200
4939: PUSH
4940: LD_EXP 23
4944: MINUS
4945: PUSH
4946: LD_INT 50
4948: DIVREAL
4949: PUSH
4950: LD_INT 5
4952: MUL
4953: LESS
4954: IFFALSE 4977
// CreateCratesArea ( Rand ( 3 , 4 ) , Between1 , true ) ;
4956: LD_INT 3
4958: PPUSH
4959: LD_INT 4
4961: PPUSH
4962: CALL_OW 12
4966: PPUSH
4967: LD_INT 20
4969: PPUSH
4970: LD_INT 1
4972: PPUSH
4973: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4977: LD_INT 21
4979: PPUSH
4980: LD_INT 1
4982: PPUSH
4983: CALL_OW 287
4987: PUSH
4988: LD_INT 200
4990: PUSH
4991: LD_EXP 23
4995: MINUS
4996: PUSH
4997: LD_INT 50
4999: DIVREAL
5000: PUSH
5001: LD_INT 5
5003: MUL
5004: LESS
5005: IFFALSE 5028
// CreateCratesArea ( Rand ( 3 , 4 ) , Between2 , true ) ;
5007: LD_INT 3
5009: PPUSH
5010: LD_INT 4
5012: PPUSH
5013: CALL_OW 12
5017: PPUSH
5018: LD_INT 21
5020: PPUSH
5021: LD_INT 1
5023: PPUSH
5024: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5028: LD_INT 22
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: CALL_OW 287
5038: PUSH
5039: LD_INT 200
5041: PUSH
5042: LD_EXP 23
5046: MINUS
5047: PUSH
5048: LD_INT 50
5050: DIVREAL
5051: PUSH
5052: LD_INT 5
5054: MUL
5055: LESS
5056: IFFALSE 5079
// CreateCratesArea ( Rand ( 3 , 4 ) , Between3 , true ) ;
5058: LD_INT 3
5060: PPUSH
5061: LD_INT 4
5063: PPUSH
5064: CALL_OW 12
5068: PPUSH
5069: LD_INT 22
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5079: LD_INT 23
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: CALL_OW 287
5089: PUSH
5090: LD_INT 200
5092: PUSH
5093: LD_EXP 23
5097: MINUS
5098: PUSH
5099: LD_INT 50
5101: DIVREAL
5102: PUSH
5103: LD_INT 5
5105: MUL
5106: LESS
5107: IFFALSE 5130
// CreateCratesArea ( Rand ( 3 , 4 ) , Between4 , true ) ;
5109: LD_INT 3
5111: PPUSH
5112: LD_INT 4
5114: PPUSH
5115: CALL_OW 12
5119: PPUSH
5120: LD_INT 23
5122: PPUSH
5123: LD_INT 1
5125: PPUSH
5126: CALL_OW 55
// if GetResourceArea ( Center1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5130: LD_INT 18
5132: PPUSH
5133: LD_INT 1
5135: PPUSH
5136: CALL_OW 287
5140: PUSH
5141: LD_INT 200
5143: PUSH
5144: LD_EXP 23
5148: MINUS
5149: PUSH
5150: LD_INT 25
5152: DIVREAL
5153: PUSH
5154: LD_INT 5
5156: MUL
5157: LESS
5158: IFFALSE 5173
// CreateCratesArea ( 5 , Center1 , true ) ;
5160: LD_INT 5
5162: PPUSH
5163: LD_INT 18
5165: PPUSH
5166: LD_INT 1
5168: PPUSH
5169: CALL_OW 55
// if GetResourceArea ( Center2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5173: LD_INT 19
5175: PPUSH
5176: LD_INT 1
5178: PPUSH
5179: CALL_OW 287
5183: PUSH
5184: LD_INT 200
5186: PUSH
5187: LD_EXP 23
5191: MINUS
5192: PUSH
5193: LD_INT 25
5195: DIVREAL
5196: PUSH
5197: LD_INT 5
5199: MUL
5200: LESS
5201: IFFALSE 5216
// CreateCratesArea ( 5 , Center2 , true ) ;
5203: LD_INT 5
5205: PPUSH
5206: LD_INT 19
5208: PPUSH
5209: LD_INT 1
5211: PPUSH
5212: CALL_OW 55
// enable ;
5216: ENABLE
// end ;
5217: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5218: GO 5220
5220: DISABLE
5221: LD_INT 0
5223: PPUSH
5224: PPUSH
// begin case tick of 1 .. 1 1$0 :
5225: LD_OWVAR 1
5229: PUSH
5230: LD_INT 1
5232: DOUBLE
5233: GREATEREQUAL
5234: IFFALSE 5242
5236: LD_INT 2100
5238: DOUBLE
5239: LESSEQUAL
5240: IFTRUE 5244
5242: GO 5272
5244: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5245: LD_EXP 23
5249: PUSH
5250: LD_INT 100
5252: DIVREAL
5253: PUSH
5254: LD_INT 525
5256: PPUSH
5257: LD_INT 1050
5259: PPUSH
5260: CALL_OW 12
5264: MUL
5265: PPUSH
5266: CALL_OW 67
5270: GO 5574
5272: LD_INT 2100
5274: PUSH
5275: LD_INT 1
5277: PLUS
5278: DOUBLE
5279: GREATEREQUAL
5280: IFFALSE 5288
5282: LD_INT 10500
5284: DOUBLE
5285: LESSEQUAL
5286: IFTRUE 5290
5288: GO 5318
5290: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5291: LD_EXP 23
5295: PUSH
5296: LD_INT 100
5298: DIVREAL
5299: PUSH
5300: LD_INT 1050
5302: PPUSH
5303: LD_INT 1750
5305: PPUSH
5306: CALL_OW 12
5310: MUL
5311: PPUSH
5312: CALL_OW 67
5316: GO 5574
5318: LD_INT 10500
5320: PUSH
5321: LD_INT 1
5323: PLUS
5324: DOUBLE
5325: GREATEREQUAL
5326: IFFALSE 5334
5328: LD_INT 21000
5330: DOUBLE
5331: LESSEQUAL
5332: IFTRUE 5336
5334: GO 5364
5336: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5337: LD_EXP 23
5341: PUSH
5342: LD_INT 100
5344: DIVREAL
5345: PUSH
5346: LD_INT 1750
5348: PPUSH
5349: LD_INT 2100
5351: PPUSH
5352: CALL_OW 12
5356: MUL
5357: PPUSH
5358: CALL_OW 67
5362: GO 5574
5364: LD_INT 21000
5366: PUSH
5367: LD_INT 1
5369: PLUS
5370: DOUBLE
5371: GREATEREQUAL
5372: IFFALSE 5380
5374: LD_INT 42000
5376: DOUBLE
5377: LESSEQUAL
5378: IFTRUE 5382
5380: GO 5410
5382: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5383: LD_EXP 23
5387: PUSH
5388: LD_INT 100
5390: DIVREAL
5391: PUSH
5392: LD_INT 2100
5394: PPUSH
5395: LD_INT 2275
5397: PPUSH
5398: CALL_OW 12
5402: MUL
5403: PPUSH
5404: CALL_OW 67
5408: GO 5574
5410: LD_INT 42000
5412: PUSH
5413: LD_INT 1
5415: PLUS
5416: DOUBLE
5417: GREATEREQUAL
5418: IFFALSE 5426
5420: LD_INT 63000
5422: DOUBLE
5423: LESSEQUAL
5424: IFTRUE 5428
5426: GO 5456
5428: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5429: LD_EXP 23
5433: PUSH
5434: LD_INT 100
5436: DIVREAL
5437: PUSH
5438: LD_INT 2275
5440: PPUSH
5441: LD_INT 2450
5443: PPUSH
5444: CALL_OW 12
5448: MUL
5449: PPUSH
5450: CALL_OW 67
5454: GO 5574
5456: LD_INT 63000
5458: PUSH
5459: LD_INT 1
5461: PLUS
5462: DOUBLE
5463: GREATEREQUAL
5464: IFFALSE 5472
5466: LD_INT 105000
5468: DOUBLE
5469: LESSEQUAL
5470: IFTRUE 5474
5472: GO 5502
5474: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5475: LD_EXP 23
5479: PUSH
5480: LD_INT 100
5482: DIVREAL
5483: PUSH
5484: LD_INT 2450
5486: PPUSH
5487: LD_INT 2800
5489: PPUSH
5490: CALL_OW 12
5494: MUL
5495: PPUSH
5496: CALL_OW 67
5500: GO 5574
5502: LD_INT 105000
5504: PUSH
5505: LD_INT 1
5507: PLUS
5508: DOUBLE
5509: GREATEREQUAL
5510: IFFALSE 5518
5512: LD_INT 630000
5514: DOUBLE
5515: LESSEQUAL
5516: IFTRUE 5520
5518: GO 5548
5520: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5521: LD_EXP 23
5525: PUSH
5526: LD_INT 100
5528: DIVREAL
5529: PUSH
5530: LD_INT 2800
5532: PPUSH
5533: LD_INT 3500
5535: PPUSH
5536: CALL_OW 12
5540: MUL
5541: PPUSH
5542: CALL_OW 67
5546: GO 5574
5548: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5549: LD_EXP 23
5553: PUSH
5554: LD_INT 100
5556: DIVREAL
5557: PUSH
5558: LD_INT 3500
5560: PPUSH
5561: LD_INT 3850
5563: PPUSH
5564: CALL_OW 12
5568: MUL
5569: PPUSH
5570: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5574: LD_ADDR_VAR 0 2
5578: PUSH
5579: LD_INT 3
5581: PPUSH
5582: LD_INT 5
5584: PPUSH
5585: CALL_OW 12
5589: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5590: LD_ADDR_VAR 0 1
5594: PUSH
5595: LD_EXP 34
5599: PUSH
5600: LD_INT 0
5602: PUSH
5603: EMPTY
5604: LIST
5605: DIFF
5606: PUSH
5607: FOR_IN
5608: IFFALSE 5657
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5610: LD_VAR 0 2
5614: PPUSH
5615: LD_EXP 39
5619: PUSH
5620: LD_VAR 0 1
5624: ARRAY
5625: PUSH
5626: LD_INT 1
5628: ARRAY
5629: PPUSH
5630: LD_EXP 39
5634: PUSH
5635: LD_VAR 0 1
5639: ARRAY
5640: PUSH
5641: LD_INT 2
5643: ARRAY
5644: PPUSH
5645: LD_INT 20
5647: PPUSH
5648: LD_INT 1
5650: PPUSH
5651: CALL_OW 56
5655: GO 5607
5657: POP
5658: POP
// enable ;
5659: ENABLE
// end ; end_of_file
5660: PPOPN 2
5662: END
// every 20 20$00 trigger apemanNumber do
5663: LD_EXP 46
5667: IFFALSE 5700
5669: GO 5671
5671: DISABLE
// begin enable ;
5672: ENABLE
// if apeLevel >= 8 then
5673: LD_EXP 51
5677: PUSH
5678: LD_INT 8
5680: GREATEREQUAL
5681: IFFALSE 5686
// disable else
5683: DISABLE
5684: GO 5700
// apeLevel := apeLevel + 1 ;
5686: LD_ADDR_EXP 51
5690: PUSH
5691: LD_EXP 51
5695: PUSH
5696: LD_INT 1
5698: PLUS
5699: ST_TO_ADDR
// end ;
5700: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5701: LD_EXP 46
5705: PUSH
5706: LD_EXP 47
5710: LESS
5711: IFFALSE 5851
5713: GO 5715
5715: DISABLE
5716: LD_INT 0
5718: PPUSH
5719: PPUSH
5720: PPUSH
5721: PPUSH
// begin enable ;
5722: ENABLE
// for i := 1 to apemanPos do
5723: LD_ADDR_VAR 0 1
5727: PUSH
5728: DOUBLE
5729: LD_INT 1
5731: DEC
5732: ST_TO_ADDR
5733: LD_EXP 49
5737: PUSH
5738: FOR_TO
5739: IFFALSE 5849
// begin if apemanPlayerCount [ i ] then
5741: LD_EXP 50
5745: PUSH
5746: LD_VAR 0 1
5750: ARRAY
5751: IFFALSE 5847
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5753: LD_EXP 50
5757: PUSH
5758: LD_VAR 0 1
5762: ARRAY
5763: PUSH
5764: LD_EXP 49
5768: PUSH
5769: LD_VAR 0 1
5773: ARRAY
5774: GREATER
5775: IFFALSE 5847
// begin ape := PrepareApeman ;
5777: LD_ADDR_VAR 0 2
5781: PUSH
5782: CALL 6370 0 0
5786: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_EXP 52
5796: PUSH
5797: LD_VAR 0 1
5801: ARRAY
5802: PPUSH
5803: LD_INT 0
5805: PPUSH
5806: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5810: LD_ADDR_EXP 49
5814: PUSH
5815: LD_EXP 49
5819: PPUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: LD_EXP 49
5829: PUSH
5830: LD_VAR 0 1
5834: ARRAY
5835: PUSH
5836: LD_VAR 0 2
5840: UNION
5841: PPUSH
5842: CALL_OW 1
5846: ST_TO_ADDR
// end ; end ; end ;
5847: GO 5738
5849: POP
5850: POP
// end ;
5851: PPOPN 4
5853: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5854: LD_INT 0
5856: PPUSH
5857: PPUSH
5858: PPUSH
5859: PPUSH
5860: PPUSH
5861: PPUSH
5862: PPUSH
// playersAmount := 0 ;
5863: LD_ADDR_VAR 0 3
5867: PUSH
5868: LD_INT 0
5870: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
5871: LD_ADDR_VAR 0 7
5875: PUSH
5876: LD_INT 1
5878: PUSH
5879: LD_INT 2
5881: PUSH
5882: LD_INT 3
5884: PUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: LD_INT 7
5896: PUSH
5897: LD_INT 8
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5910: LD_ADDR_EXP 52
5914: PUSH
5915: LD_INT 0
5917: PUSH
5918: LD_INT 0
5920: PUSH
5921: LD_INT 0
5923: PUSH
5924: LD_INT 0
5926: PUSH
5927: LD_INT 0
5929: PUSH
5930: LD_INT 0
5932: PUSH
5933: LD_INT 0
5935: PUSH
5936: LD_INT 0
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: ST_TO_ADDR
// for j = 1 to Side_Positions do
5949: LD_ADDR_VAR 0 4
5953: PUSH
5954: DOUBLE
5955: LD_INT 1
5957: DEC
5958: ST_TO_ADDR
5959: LD_EXP 34
5963: PUSH
5964: FOR_TO
5965: IFFALSE 6032
// if Side_Positions [ j ] then
5967: LD_EXP 34
5971: PUSH
5972: LD_VAR 0 4
5976: ARRAY
5977: IFFALSE 6030
// begin playersAmount := playersAmount + 1 ;
5979: LD_ADDR_VAR 0 3
5983: PUSH
5984: LD_VAR 0 3
5988: PUSH
5989: LD_INT 1
5991: PLUS
5992: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5993: LD_ADDR_EXP 52
5997: PUSH
5998: LD_EXP 52
6002: PPUSH
6003: LD_VAR 0 4
6007: PPUSH
6008: LD_VAR 0 7
6012: PUSH
6013: LD_EXP 34
6017: PUSH
6018: LD_VAR 0 4
6022: ARRAY
6023: ARRAY
6024: PPUSH
6025: CALL_OW 1
6029: ST_TO_ADDR
// end ;
6030: GO 5964
6032: POP
6033: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6034: LD_ADDR_EXP 48
6038: PUSH
6039: LD_INT 3
6041: PUSH
6042: LD_EXP 25
6046: MUL
6047: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6048: LD_ADDR_EXP 46
6052: PUSH
6053: LD_VAR 0 3
6057: PUSH
6058: LD_EXP 48
6062: MUL
6063: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6064: LD_ADDR_EXP 47
6068: PUSH
6069: LD_EXP 46
6073: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6074: LD_ADDR_EXP 49
6078: PUSH
6079: LD_INT 0
6081: PUSH
6082: LD_INT 0
6084: PUSH
6085: LD_INT 0
6087: PUSH
6088: LD_INT 0
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: LD_INT 0
6096: PUSH
6097: LD_INT 0
6099: PUSH
6100: LD_INT 0
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6113: LD_ADDR_EXP 50
6117: PUSH
6118: LD_INT 0
6120: PUSH
6121: LD_INT 0
6123: PUSH
6124: LD_INT 0
6126: PUSH
6127: LD_INT 0
6129: PUSH
6130: LD_INT 0
6132: PUSH
6133: LD_INT 0
6135: PUSH
6136: LD_INT 0
6138: PUSH
6139: LD_INT 0
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: ST_TO_ADDR
// apeLevel := 1 ;
6152: LD_ADDR_EXP 51
6156: PUSH
6157: LD_INT 1
6159: ST_TO_ADDR
// if not apemanNumber then
6160: LD_EXP 46
6164: NOT
6165: IFFALSE 6169
// exit ;
6167: GO 6365
// for i := 1 to apemanPerPlayer do
6169: LD_ADDR_VAR 0 2
6173: PUSH
6174: DOUBLE
6175: LD_INT 1
6177: DEC
6178: ST_TO_ADDR
6179: LD_EXP 48
6183: PUSH
6184: FOR_TO
6185: IFFALSE 6363
// begin for j := 1 to Side_Positions do
6187: LD_ADDR_VAR 0 4
6191: PUSH
6192: DOUBLE
6193: LD_INT 1
6195: DEC
6196: ST_TO_ADDR
6197: LD_EXP 34
6201: PUSH
6202: FOR_TO
6203: IFFALSE 6359
// if Side_Positions [ j ] then
6205: LD_EXP 34
6209: PUSH
6210: LD_VAR 0 4
6214: ARRAY
6215: IFFALSE 6357
// begin pos := Side_Positions [ j ] ;
6217: LD_ADDR_VAR 0 6
6221: PUSH
6222: LD_EXP 34
6226: PUSH
6227: LD_VAR 0 4
6231: ARRAY
6232: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6233: LD_ADDR_EXP 50
6237: PUSH
6238: LD_EXP 50
6242: PPUSH
6243: LD_VAR 0 4
6247: PPUSH
6248: LD_EXP 50
6252: PUSH
6253: LD_VAR 0 4
6257: ARRAY
6258: PUSH
6259: LD_INT 1
6261: PLUS
6262: PPUSH
6263: CALL_OW 1
6267: ST_TO_ADDR
// ape := PrepareApeman ;
6268: LD_ADDR_VAR 0 5
6272: PUSH
6273: CALL 6370 0 0
6277: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6278: LD_ADDR_EXP 49
6282: PUSH
6283: LD_EXP 49
6287: PPUSH
6288: LD_VAR 0 4
6292: PPUSH
6293: LD_EXP 49
6297: PUSH
6298: LD_VAR 0 4
6302: ARRAY
6303: PPUSH
6304: LD_EXP 49
6308: PUSH
6309: LD_VAR 0 4
6313: ARRAY
6314: PUSH
6315: LD_INT 1
6317: PLUS
6318: PPUSH
6319: LD_VAR 0 5
6323: PPUSH
6324: CALL_OW 1
6328: PPUSH
6329: CALL_OW 1
6333: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6334: LD_VAR 0 5
6338: PPUSH
6339: LD_EXP 52
6343: PUSH
6344: LD_VAR 0 4
6348: ARRAY
6349: PPUSH
6350: LD_INT 0
6352: PPUSH
6353: CALL_OW 49
// end ;
6357: GO 6202
6359: POP
6360: POP
// end ;
6361: GO 6184
6363: POP
6364: POP
// end ;
6365: LD_VAR 0 1
6369: RET
// export function PrepareApeman ; var bonus ; begin
6370: LD_INT 0
6372: PPUSH
6373: PPUSH
// uc_side := 0 ;
6374: LD_ADDR_OWVAR 20
6378: PUSH
6379: LD_INT 0
6381: ST_TO_ADDR
// uc_nation := 0 ;
6382: LD_ADDR_OWVAR 21
6386: PUSH
6387: LD_INT 0
6389: ST_TO_ADDR
// InitHc ;
6390: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6394: LD_ADDR_VAR 0 2
6398: PUSH
6399: LD_INT 1
6401: NEG
6402: PUSH
6403: LD_INT 0
6405: PUSH
6406: LD_INT 1
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: PUSH
6414: LD_INT 25
6416: PUSH
6417: LD_INT 12
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PPUSH
6424: CALL_OW 69
6428: PUSH
6429: LD_INT 3
6431: MOD
6432: PUSH
6433: LD_INT 1
6435: PLUS
6436: ARRAY
6437: ST_TO_ADDR
// hc_class := class_apeman ;
6438: LD_ADDR_OWVAR 28
6442: PUSH
6443: LD_INT 12
6445: ST_TO_ADDR
// hc_gallery :=  ;
6446: LD_ADDR_OWVAR 33
6450: PUSH
6451: LD_STRING 
6453: ST_TO_ADDR
// hc_name :=  ;
6454: LD_ADDR_OWVAR 26
6458: PUSH
6459: LD_STRING 
6461: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6462: LD_ADDR_OWVAR 31
6466: PUSH
6467: LD_EXP 51
6471: PUSH
6472: LD_VAR 0 2
6476: PLUS
6477: PUSH
6478: LD_EXP 51
6482: PUSH
6483: LD_VAR 0 2
6487: PLUS
6488: PUSH
6489: LD_EXP 51
6493: PUSH
6494: LD_VAR 0 2
6498: PLUS
6499: PUSH
6500: LD_EXP 51
6504: PUSH
6505: LD_VAR 0 2
6509: PLUS
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6517: LD_ADDR_OWVAR 35
6521: PUSH
6522: LD_INT 10
6524: PUSH
6525: LD_VAR 0 2
6529: MUL
6530: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6531: LD_ADDR_OWVAR 29
6535: PUSH
6536: LD_INT 12
6538: PUSH
6539: LD_INT 10
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: ST_TO_ADDR
// result := CreateHuman ;
6546: LD_ADDR_VAR 0 1
6550: PUSH
6551: CALL_OW 44
6555: ST_TO_ADDR
// end ;
6556: LD_VAR 0 1
6560: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6561: LD_INT 0
6563: PPUSH
6564: PPUSH
6565: PPUSH
// if not ape then
6566: LD_VAR 0 1
6570: NOT
6571: IFFALSE 6575
// exit ;
6573: GO 6700
// side := GetSide ( ape ) ;
6575: LD_ADDR_VAR 0 3
6579: PUSH
6580: LD_VAR 0 1
6584: PPUSH
6585: CALL_OW 255
6589: ST_TO_ADDR
// if not side then
6590: LD_VAR 0 3
6594: NOT
6595: IFFALSE 6649
// begin for i = 1 to apemanPos do
6597: LD_ADDR_VAR 0 4
6601: PUSH
6602: DOUBLE
6603: LD_INT 1
6605: DEC
6606: ST_TO_ADDR
6607: LD_EXP 49
6611: PUSH
6612: FOR_TO
6613: IFFALSE 6647
// if ape in apemanPos [ i ] then
6615: LD_VAR 0 1
6619: PUSH
6620: LD_EXP 49
6624: PUSH
6625: LD_VAR 0 4
6629: ARRAY
6630: IN
6631: IFFALSE 6645
// begin side := i ;
6633: LD_ADDR_VAR 0 3
6637: PUSH
6638: LD_VAR 0 4
6642: ST_TO_ADDR
// break ;
6643: GO 6647
// end ;
6645: GO 6612
6647: POP
6648: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6649: LD_ADDR_EXP 49
6653: PUSH
6654: LD_EXP 49
6658: PPUSH
6659: LD_VAR 0 3
6663: PPUSH
6664: LD_EXP 49
6668: PUSH
6669: LD_VAR 0 3
6673: ARRAY
6674: PUSH
6675: LD_VAR 0 1
6679: DIFF
6680: PPUSH
6681: CALL_OW 1
6685: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6686: LD_ADDR_EXP 46
6690: PUSH
6691: LD_EXP 46
6695: PUSH
6696: LD_INT 1
6698: MINUS
6699: ST_TO_ADDR
// end ; end_of_file
6700: LD_VAR 0 2
6704: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6705: LD_VAR 0 1
6709: PPUSH
6710: CALL_OW 266
6714: PUSH
6715: LD_INT 0
6717: PUSH
6718: LD_INT 1
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: IN
6725: IFFALSE 6750
// SetBName ( b , @ & GetSide ( b ) ) ;
6727: LD_VAR 0 1
6731: PPUSH
6732: LD_STRING @
6734: PUSH
6735: LD_VAR 0 1
6739: PPUSH
6740: CALL_OW 255
6744: STR
6745: PPUSH
6746: CALL_OW 500
// end ;
6750: PPOPN 2
6752: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 266
6762: PUSH
6763: LD_INT 0
6765: PUSH
6766: LD_INT 1
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: IN
6773: IFFALSE 6798
// SetBName ( b , @ & GetSide ( b ) ) ;
6775: LD_VAR 0 1
6779: PPUSH
6780: LD_STRING @
6782: PUSH
6783: LD_VAR 0 1
6787: PPUSH
6788: CALL_OW 255
6792: STR
6793: PPUSH
6794: CALL_OW 500
// end ;
6798: PPOPN 3
6800: END
// on VehicleConstructed ( veh , fac ) do var side ;
6801: LD_INT 0
6803: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6804: LD_VAR 0 1
6808: PPUSH
6809: CALL_OW 263
6813: PUSH
6814: LD_INT 5
6816: EQUAL
6817: IFFALSE 6959
// begin side := GetSide ( veh ) ;
6819: LD_ADDR_VAR 0 3
6823: PUSH
6824: LD_VAR 0 1
6828: PPUSH
6829: CALL_OW 255
6833: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6834: LD_ADDR_EXP 49
6838: PUSH
6839: LD_EXP 49
6843: PPUSH
6844: LD_VAR 0 3
6848: PPUSH
6849: LD_EXP 49
6853: PUSH
6854: LD_VAR 0 3
6858: ARRAY
6859: PPUSH
6860: LD_INT 52
6862: PUSH
6863: EMPTY
6864: LIST
6865: PPUSH
6866: CALL_OW 72
6870: PUSH
6871: LD_INT 22
6873: PUSH
6874: LD_VAR 0 3
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 2
6885: PUSH
6886: LD_INT 33
6888: PUSH
6889: LD_INT 5
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 25
6898: PUSH
6899: LD_INT 12
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 25
6908: PUSH
6909: LD_INT 15
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 25
6918: PUSH
6919: LD_INT 16
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 25
6928: PUSH
6929: LD_INT 17
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PPUSH
6948: CALL_OW 69
6952: UNION
6953: PPUSH
6954: CALL_OW 1
6958: ST_TO_ADDR
// end ; end ;
6959: PPOPN 3
6961: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6962: LD_INT 0
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6968: LD_VAR 0 1
6972: PPUSH
6973: CALL_OW 257
6977: PUSH
6978: LD_INT 12
6980: PUSH
6981: LD_INT 15
6983: PUSH
6984: LD_INT 17
6986: PUSH
6987: LD_INT 16
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: IN
6996: PUSH
6997: LD_VAR 0 1
7001: PPUSH
7002: CALL_OW 263
7006: PUSH
7007: LD_INT 5
7009: EQUAL
7010: OR
7011: IFFALSE 7022
// ApeKilled ( j ) ;
7013: LD_VAR 0 1
7017: PPUSH
7018: CALL 6561 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7022: LD_VAR 0 1
7026: PPUSH
7027: CALL_OW 266
7031: PUSH
7032: LD_INT 0
7034: PUSH
7035: LD_INT 1
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: IN
7042: IFFALSE 7124
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7044: LD_ADDR_VAR 0 4
7048: PUSH
7049: LD_EXP 34
7053: PUSH
7054: LD_VAR 0 1
7058: PPUSH
7059: CALL_OW 255
7063: ARRAY
7064: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7065: LD_ADDR_VAR 0 2
7069: PUSH
7070: LD_EXP 39
7074: PUSH
7075: LD_VAR 0 4
7079: ARRAY
7080: PUSH
7081: LD_INT 1
7083: ARRAY
7084: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7085: LD_ADDR_VAR 0 3
7089: PUSH
7090: LD_EXP 39
7094: PUSH
7095: LD_VAR 0 4
7099: ARRAY
7100: PUSH
7101: LD_INT 2
7103: ARRAY
7104: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7105: LD_VAR 0 2
7109: PPUSH
7110: LD_VAR 0 3
7114: PPUSH
7115: CALL_OW 420
7119: PPUSH
7120: CALL_OW 419
// end ; end ;
7124: PPOPN 5
7126: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7127: LD_VAR 0 1
7131: PPUSH
7132: LD_VAR 0 2
7136: PPUSH
7137: LD_VAR 0 3
7141: PPUSH
7142: LD_OWVAR 2
7146: PPUSH
7147: CALL 7529 0 4
7151: PPOPN 3
7153: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7154: LD_INT 0
7156: PPUSH
7157: PPUSH
// for un in battle_flags_id do
7158: LD_ADDR_VAR 0 2
7162: PUSH
7163: LD_EXP 44
7167: PUSH
7168: FOR_IN
7169: IFFALSE 7244
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7171: LD_VAR 0 2
7175: PPUSH
7176: LD_INT 1
7178: PUSH
7179: LD_LOC 9
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 2
7190: PUSH
7191: LD_LOC 9
7195: PUSH
7196: LD_INT 2
7198: DIV
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: LD_INT 3
7206: PUSH
7207: LD_LOC 9
7211: PUSH
7212: LD_INT 5
7214: DIV
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: LD_INT 20
7222: PUSH
7223: LD_LOC 9
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: PPUSH
7238: CALL_OW 423
7242: GO 7168
7244: POP
7245: POP
// end ;
7246: LD_VAR 0 1
7250: RET
// every 1 do var un ;
7251: GO 7253
7253: DISABLE
7254: LD_INT 0
7256: PPUSH
// begin if not def_morale_flags then
7257: LD_EXP 9
7261: NOT
7262: IFFALSE 7266
// exit ;
7264: GO 7343
// if not morale_decreasing_time then
7266: LD_EXP 24
7270: NOT
7271: IFFALSE 7275
// exit ;
7273: GO 7343
// strength = 100 ;
7275: LD_ADDR_LOC 9
7279: PUSH
7280: LD_INT 100
7282: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7283: LD_EXP 24
7287: PPUSH
7288: CALL_OW 67
// strength := strength - 1 ;
7292: LD_ADDR_LOC 9
7296: PUSH
7297: LD_LOC 9
7301: PUSH
7302: LD_INT 1
7304: MINUS
7305: ST_TO_ADDR
// Update_Flags ;
7306: CALL 7154 0 0
// until not strength ;
7310: LD_LOC 9
7314: NOT
7315: IFFALSE 7283
// for un in battle_flags_id do
7317: LD_ADDR_VAR 0 1
7321: PUSH
7322: LD_EXP 44
7326: PUSH
7327: FOR_IN
7328: IFFALSE 7341
// KillBattleFlag ( un ) ;
7330: LD_VAR 0 1
7334: PPUSH
7335: CALL_OW 419
7339: GO 7327
7341: POP
7342: POP
// end ; end_of_file
7343: PPOPN 1
7345: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7346: LD_INT 0
7348: PPUSH
7349: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7350: LD_ADDR_VAR 0 2
7354: PUSH
7355: LD_STRING #Multi1x1-Time
7357: PUSH
7358: LD_OWVAR 1
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: ST_TO_ADDR
// if WaitServerStrings then
7367: LD_EXP 54
7371: IFFALSE 7389
// AllStrings = AllStrings ^ WaitServerStrings ;
7373: LD_ADDR_VAR 0 2
7377: PUSH
7378: LD_VAR 0 2
7382: PUSH
7383: LD_EXP 54
7387: ADD
7388: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7389: LD_INT 0
7391: PUSH
7392: LD_EXP 29
7396: PUSH
7397: LD_OWVAR 1
7401: MINUS
7402: LESSEQUAL
7403: IFFALSE 7434
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7405: LD_ADDR_VAR 0 2
7409: PUSH
7410: LD_VAR 0 2
7414: PUSH
7415: LD_STRING #allowedsibbomb
7417: PUSH
7418: LD_EXP 29
7422: PUSH
7423: LD_OWVAR 1
7427: MINUS
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: ADD
7433: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7434: LD_INT 0
7436: PUSH
7437: LD_EXP 57
7441: PUSH
7442: LD_OWVAR 1
7446: MINUS
7447: LESSEQUAL
7448: IFFALSE 7479
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7450: LD_ADDR_VAR 0 2
7454: PUSH
7455: LD_VAR 0 2
7459: PUSH
7460: LD_STRING #builduptime
7462: PUSH
7463: LD_EXP 57
7467: PUSH
7468: LD_OWVAR 1
7472: MINUS
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: ADD
7478: ST_TO_ADDR
// if ( ExtraStrings ) then
7479: LD_EXP 53
7483: IFFALSE 7505
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7485: LD_ADDR_VAR 0 2
7489: PUSH
7490: LD_VAR 0 2
7494: PUSH
7495: LD_STRING 
7497: ADD
7498: PUSH
7499: LD_EXP 53
7503: ADD
7504: ST_TO_ADDR
// Display_Strings := AllStrings ;
7505: LD_ADDR_OWVAR 47
7509: PUSH
7510: LD_VAR 0 2
7514: ST_TO_ADDR
// end ;
7515: LD_VAR 0 1
7519: RET
// every 0 0$1 do
7520: GO 7522
7522: DISABLE
// begin ShowTimer ;
7523: CALL 7346 0 0
// enable ;
7527: ENABLE
// end ; end_of_file
7528: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7529: LD_INT 0
7531: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7532: LD_VAR 0 1
7536: PPUSH
7537: CALL_OW 255
7541: PUSH
7542: LD_VAR 0 4
7546: EQUAL
7547: IFFALSE 7566
// begin SetAchievement ( ACH_RAD ) ;
7549: LD_STRING ACH_RAD
7551: PPUSH
7552: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7556: LD_STRING ACH_NL
7558: PPUSH
7559: LD_INT 1
7561: PPUSH
7562: CALL_OW 564
// end end ;
7566: LD_VAR 0 5
7570: RET
// export function SA_Win ( side ) ; begin
7571: LD_INT 0
7573: PPUSH
// case side of 1 :
7574: LD_VAR 0 1
7578: PUSH
7579: LD_INT 1
7581: DOUBLE
7582: EQUAL
7583: IFTRUE 7587
7585: GO 7600
7587: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7588: LD_STRING ACH_AH
7590: PPUSH
7591: LD_INT 1
7593: PPUSH
7594: CALL_OW 564
7598: GO 7763
7600: LD_INT 2
7602: DOUBLE
7603: EQUAL
7604: IFTRUE 7608
7606: GO 7621
7608: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7609: LD_STRING ACH_E
7611: PPUSH
7612: LD_INT 1
7614: PPUSH
7615: CALL_OW 564
7619: GO 7763
7621: LD_INT 3
7623: DOUBLE
7624: EQUAL
7625: IFTRUE 7629
7627: GO 7642
7629: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7630: LD_STRING ACH_OOL
7632: PPUSH
7633: LD_INT 1
7635: PPUSH
7636: CALL_OW 564
7640: GO 7763
7642: LD_INT 1
7644: PUSH
7645: LD_INT 2
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: DOUBLE
7652: EQUAL
7653: IFTRUE 7657
7655: GO 7682
7657: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7658: LD_STRING ACH_AH
7660: PPUSH
7661: LD_REAL  5.00000000000000E-0001
7664: PPUSH
7665: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7669: LD_STRING ACH_E
7671: PPUSH
7672: LD_REAL  5.00000000000000E-0001
7675: PPUSH
7676: CALL_OW 564
// end ; [ 2 , 3 ] :
7680: GO 7763
7682: LD_INT 2
7684: PUSH
7685: LD_INT 3
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: DOUBLE
7692: EQUAL
7693: IFTRUE 7697
7695: GO 7722
7697: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7698: LD_STRING ACH_OOL
7700: PPUSH
7701: LD_REAL  5.00000000000000E-0001
7704: PPUSH
7705: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7709: LD_STRING ACH_E
7711: PPUSH
7712: LD_REAL  5.00000000000000E-0001
7715: PPUSH
7716: CALL_OW 564
// end ; [ 3 , 1 ] :
7720: GO 7763
7722: LD_INT 3
7724: PUSH
7725: LD_INT 1
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: DOUBLE
7732: EQUAL
7733: IFTRUE 7737
7735: GO 7762
7737: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7738: LD_STRING ACH_AH
7740: PPUSH
7741: LD_REAL  5.00000000000000E-0001
7744: PPUSH
7745: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7749: LD_STRING ACH_OOL
7751: PPUSH
7752: LD_REAL  5.00000000000000E-0001
7755: PPUSH
7756: CALL_OW 564
// end ; end ;
7760: GO 7763
7762: POP
// end ; end_of_file
7763: LD_VAR 0 2
7767: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7768: LD_INT 0
7770: PPUSH
7771: PPUSH
// enable ( 98 ) ;
7772: LD_INT 98
7774: ENABLE_MARKED
// GameEnded = false ;
7775: LD_ADDR_LOC 15
7779: PUSH
7780: LD_INT 0
7782: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7783: LD_ADDR_LOC 14
7787: PUSH
7788: LD_INT 0
7790: PUSH
7791: LD_INT 0
7793: PUSH
7794: LD_INT 0
7796: PUSH
7797: LD_INT 0
7799: PUSH
7800: LD_INT 0
7802: PUSH
7803: LD_INT 0
7805: PUSH
7806: LD_INT 0
7808: PUSH
7809: LD_INT 0
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: ST_TO_ADDR
// unfoged = false ;
7822: LD_ADDR_LOC 16
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// defeated_specs := [ ] ;
7830: LD_ADDR_LOC 17
7834: PUSH
7835: EMPTY
7836: ST_TO_ADDR
// for i = 1 to side_positions do
7837: LD_ADDR_VAR 0 2
7841: PUSH
7842: DOUBLE
7843: LD_INT 1
7845: DEC
7846: ST_TO_ADDR
7847: LD_EXP 34
7851: PUSH
7852: FOR_TO
7853: IFFALSE 7893
// if not side_positions [ i ] then
7855: LD_EXP 34
7859: PUSH
7860: LD_VAR 0 2
7864: ARRAY
7865: NOT
7866: IFFALSE 7891
// defeated = replace ( defeated , i , true ) ;
7868: LD_ADDR_LOC 14
7872: PUSH
7873: LD_LOC 14
7877: PPUSH
7878: LD_VAR 0 2
7882: PPUSH
7883: LD_INT 1
7885: PPUSH
7886: CALL_OW 1
7890: ST_TO_ADDR
7891: GO 7852
7893: POP
7894: POP
// end ;
7895: LD_VAR 0 1
7899: RET
// function CanWinLoose ; begin
7900: LD_INT 0
7902: PPUSH
// Result := true ;
7903: LD_ADDR_VAR 0 1
7907: PUSH
7908: LD_INT 1
7910: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7911: CALL_OW 518
7915: PUSH
7916: CALL_OW 519
7920: PUSH
7921: LD_INT 0
7923: GREATER
7924: AND
7925: IFFALSE 7935
// Result := false ;
7927: LD_ADDR_VAR 0 1
7931: PUSH
7932: LD_INT 0
7934: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7935: CALL_OW 531
7939: PUSH
7940: CALL_OW 519
7944: PUSH
7945: LD_INT 1
7947: GREATER
7948: AND
7949: IFFALSE 7959
// Result := false ;
7951: LD_ADDR_VAR 0 1
7955: PUSH
7956: LD_INT 0
7958: ST_TO_ADDR
// end ;
7959: LD_VAR 0 1
7963: RET
// export function HasPower ( i ) ; var k , h ; begin
7964: LD_INT 0
7966: PPUSH
7967: PPUSH
7968: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7969: LD_VAR 0 1
7973: PPUSH
7974: CALL_OW 108
7978: NOT
7979: PUSH
7980: LD_EXP 33
7984: PUSH
7985: LD_VAR 0 1
7989: ARRAY
7990: NOT
7991: AND
7992: PUSH
7993: LD_OWVAR 4
7997: AND
7998: IFFALSE 8010
// begin result = false ;
8000: LD_ADDR_VAR 0 2
8004: PUSH
8005: LD_INT 0
8007: ST_TO_ADDR
// end else
8008: GO 8305
// case def_win_rules of 0 :
8010: LD_EXP 30
8014: PUSH
8015: LD_INT 0
8017: DOUBLE
8018: EQUAL
8019: IFTRUE 8023
8021: GO 8186
8023: POP
// if def_people_respawning then
8024: LD_EXP 11
8028: IFFALSE 8119
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8030: LD_ADDR_VAR 0 2
8034: PUSH
8035: LD_INT 22
8037: PUSH
8038: LD_VAR 0 1
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 2
8049: PUSH
8050: LD_INT 21
8052: PUSH
8053: LD_INT 1
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 33
8062: PUSH
8063: LD_INT 3
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: LD_INT 33
8072: PUSH
8073: LD_INT 5
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 30
8082: PUSH
8083: LD_INT 0
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: LD_INT 30
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PPUSH
8112: CALL_OW 69
8116: ST_TO_ADDR
8117: GO 8184
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8119: LD_ADDR_VAR 0 2
8123: PUSH
8124: LD_INT 22
8126: PUSH
8127: LD_VAR 0 1
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PUSH
8136: LD_INT 2
8138: PUSH
8139: LD_INT 21
8141: PUSH
8142: LD_INT 1
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: PUSH
8149: LD_INT 33
8151: PUSH
8152: LD_INT 3
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PUSH
8159: LD_INT 33
8161: PUSH
8162: LD_INT 5
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PPUSH
8179: CALL_OW 69
8183: ST_TO_ADDR
8184: GO 8305
8186: LD_INT 1
8188: DOUBLE
8189: EQUAL
8190: IFTRUE 8194
8192: GO 8233
8194: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8195: LD_ADDR_VAR 0 2
8199: PUSH
8200: LD_INT 22
8202: PUSH
8203: LD_VAR 0 1
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 21
8214: PUSH
8215: LD_INT 1
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 69
8230: ST_TO_ADDR
8231: GO 8305
8233: LD_INT 2
8235: DOUBLE
8236: EQUAL
8237: IFTRUE 8241
8239: GO 8304
8241: POP
// begin h = false ;
8242: LD_ADDR_VAR 0 4
8246: PUSH
8247: LD_INT 0
8249: ST_TO_ADDR
// for k in heroes [ i ] do
8250: LD_ADDR_VAR 0 3
8254: PUSH
8255: LD_EXP 45
8259: PUSH
8260: LD_VAR 0 1
8264: ARRAY
8265: PUSH
8266: FOR_IN
8267: IFFALSE 8290
// if IsLive ( k ) then
8269: LD_VAR 0 3
8273: PPUSH
8274: CALL_OW 300
8278: IFFALSE 8288
// h = true ;
8280: LD_ADDR_VAR 0 4
8284: PUSH
8285: LD_INT 1
8287: ST_TO_ADDR
8288: GO 8266
8290: POP
8291: POP
// Result := h ;
8292: LD_ADDR_VAR 0 2
8296: PUSH
8297: LD_VAR 0 4
8301: ST_TO_ADDR
// end ; end ;
8302: GO 8305
8304: POP
// end ;
8305: LD_VAR 0 2
8309: RET
// function AlliedSides ( i , j ) ; begin
8310: LD_INT 0
8312: PPUSH
// Result := false ;
8313: LD_ADDR_VAR 0 3
8317: PUSH
8318: LD_INT 0
8320: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8321: LD_VAR 0 1
8325: PPUSH
8326: LD_VAR 0 2
8330: PPUSH
8331: CALL_OW 81
8335: PUSH
8336: LD_INT 1
8338: EQUAL
8339: PUSH
8340: LD_VAR 0 2
8344: PPUSH
8345: LD_VAR 0 1
8349: PPUSH
8350: CALL_OW 81
8354: PUSH
8355: LD_INT 1
8357: EQUAL
8358: AND
8359: PUSH
8360: LD_VAR 0 1
8364: PPUSH
8365: CALL_OW 83
8369: AND
8370: PUSH
8371: LD_VAR 0 2
8375: PPUSH
8376: CALL_OW 83
8380: AND
8381: IFFALSE 8391
// Result := true ;
8383: LD_ADDR_VAR 0 3
8387: PUSH
8388: LD_INT 1
8390: ST_TO_ADDR
// end ;
8391: LD_VAR 0 3
8395: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8396: CALL 7900 0 0
8400: PUSH
8401: LD_LOC 15
8405: NOT
8406: AND
8407: IFFALSE 8423
8409: GO 8411
8411: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8412: LD_ADDR_EXP 54
8416: PUSH
8417: LD_STRING #Player-Ended
8419: PUSH
8420: EMPTY
8421: LIST
8422: ST_TO_ADDR
8423: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8424: CALL 7900 0 0
8428: PUSH
8429: LD_LOC 15
8433: AND
8434: IFFALSE 8443
8436: GO 8438
8438: DISABLE
// YouLostInMultiplayer ;
8439: CALL_OW 107
8443: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8444: CALL 7900 0 0
8448: NOT
8449: PUSH
8450: CALL_OW 531
8454: NOT
8455: AND
8456: IFFALSE 8472
8458: GO 8460
8460: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8461: LD_ADDR_EXP 54
8465: PUSH
8466: LD_STRING #server-wait
8468: PUSH
8469: EMPTY
8470: LIST
8471: ST_TO_ADDR
8472: END
// every 100 trigger IAmSpec do
8473: CALL_OW 531
8477: IFFALSE 8493
8479: GO 8481
8481: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8482: LD_ADDR_EXP 54
8486: PUSH
8487: LD_STRING #Player-IAmSpec
8489: PUSH
8490: EMPTY
8491: LIST
8492: ST_TO_ADDR
8493: END
// every 100 trigger GameEnded and IAmSpec do
8494: LD_LOC 15
8498: PUSH
8499: CALL_OW 531
8503: AND
8504: IFFALSE 8513
8506: GO 8508
8508: DISABLE
// YouLostInMultiplayer ;
8509: CALL_OW 107
8513: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8514: CALL 7900 0 0
8518: PUSH
8519: LD_LOC 15
8523: NOT
8524: AND
8525: IFFALSE 8541
8527: GO 8529
8529: DISABLE
// WaitServerStrings = [ $player-win ] ;
8530: LD_ADDR_EXP 54
8534: PUSH
8535: LD_STRING $player-win
8537: PUSH
8538: EMPTY
8539: LIST
8540: ST_TO_ADDR
8541: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8542: CALL 7900 0 0
8546: PUSH
8547: LD_LOC 15
8551: AND
8552: IFFALSE 8576
8554: GO 8556
8556: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8557: LD_EXP 35
8561: PUSH
8562: LD_OWVAR 7
8566: ARRAY
8567: PPUSH
8568: CALL 7571 0 1
// YouWinInMultiplayer ;
8572: CALL_OW 106
// end ;
8576: END
// every 100 trigger isEditor marked 401 do
8577: LD_OWVAR 84
8581: IFFALSE 8597
8583: GO 8585
8585: DISABLE
// Debug_Strings = [ You won ] ;
8586: LD_ADDR_OWVAR 48
8590: PUSH
8591: LD_STRING You won
8593: PUSH
8594: EMPTY
8595: LIST
8596: ST_TO_ADDR
8597: END
// every 100 trigger isEditor marked 400 do
8598: LD_OWVAR 84
8602: IFFALSE 8618
8604: GO 8606
8606: DISABLE
// Debug_Strings = [ You loss ] ;
8607: LD_ADDR_OWVAR 48
8611: PUSH
8612: LD_STRING You loss
8614: PUSH
8615: EMPTY
8616: LIST
8617: ST_TO_ADDR
8618: END
// every 100 marked 98 do var i , un ;
8619: GO 8621
8621: DISABLE
8622: LD_INT 0
8624: PPUSH
8625: PPUSH
// begin for i = 1 to side_positions do
8626: LD_ADDR_VAR 0 1
8630: PUSH
8631: DOUBLE
8632: LD_INT 1
8634: DEC
8635: ST_TO_ADDR
8636: LD_EXP 34
8640: PUSH
8641: FOR_TO
8642: IFFALSE 8729
// begin if side_positions [ i ] then
8644: LD_EXP 34
8648: PUSH
8649: LD_VAR 0 1
8653: ARRAY
8654: IFFALSE 8727
// if not HasPower ( i ) and not defeated [ i ] then
8656: LD_VAR 0 1
8660: PPUSH
8661: CALL 7964 0 1
8665: NOT
8666: PUSH
8667: LD_LOC 14
8671: PUSH
8672: LD_VAR 0 1
8676: ARRAY
8677: NOT
8678: AND
8679: IFFALSE 8727
// begin defeated = replace ( defeated , i , true ) ;
8681: LD_ADDR_LOC 14
8685: PUSH
8686: LD_LOC 14
8690: PPUSH
8691: LD_VAR 0 1
8695: PPUSH
8696: LD_INT 1
8698: PPUSH
8699: CALL_OW 1
8703: ST_TO_ADDR
// if i = mp_player_side then
8704: LD_VAR 0 1
8708: PUSH
8709: LD_OWVAR 7
8713: EQUAL
8714: IFFALSE 8727
// begin Multiplayer_Loose_Message ;
8716: CALL_OW 521
// SetPlayerSpectator ( ) ;
8720: CALL_OW 572
// enable ( 400 ) ;
8724: LD_INT 400
8726: ENABLE_MARKED
// end ; end ; end ;
8727: GO 8641
8729: POP
8730: POP
// DidGameEnd ;
8731: CALL 8746 0 0
// if not GameEnded then
8735: LD_LOC 15
8739: NOT
8740: IFFALSE 8743
// enable ;
8742: ENABLE
// end ;
8743: PPOPN 2
8745: END
// function DidGameEnd ; var i , k , enemy ; begin
8746: LD_INT 0
8748: PPUSH
8749: PPUSH
8750: PPUSH
8751: PPUSH
// enemy = [ ] ;
8752: LD_ADDR_VAR 0 4
8756: PUSH
8757: EMPTY
8758: ST_TO_ADDR
// for i = 1 to side_positions do
8759: LD_ADDR_VAR 0 2
8763: PUSH
8764: DOUBLE
8765: LD_INT 1
8767: DEC
8768: ST_TO_ADDR
8769: LD_EXP 34
8773: PUSH
8774: FOR_TO
8775: IFFALSE 8869
// if not defeated [ i ] then
8777: LD_LOC 14
8781: PUSH
8782: LD_VAR 0 2
8786: ARRAY
8787: NOT
8788: IFFALSE 8867
// for k = 1 to side_positions do
8790: LD_ADDR_VAR 0 3
8794: PUSH
8795: DOUBLE
8796: LD_INT 1
8798: DEC
8799: ST_TO_ADDR
8800: LD_EXP 34
8804: PUSH
8805: FOR_TO
8806: IFFALSE 8865
// if not defeated [ k ] then
8808: LD_LOC 14
8812: PUSH
8813: LD_VAR 0 3
8817: ARRAY
8818: NOT
8819: IFFALSE 8863
// if not AlliedSides ( i , k ) then
8821: LD_VAR 0 2
8825: PPUSH
8826: LD_VAR 0 3
8830: PPUSH
8831: CALL 8310 0 2
8835: NOT
8836: IFFALSE 8863
// enemy = enemy ^ [ i , k ] ;
8838: LD_ADDR_VAR 0 4
8842: PUSH
8843: LD_VAR 0 4
8847: PUSH
8848: LD_VAR 0 2
8852: PUSH
8853: LD_VAR 0 3
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: ADD
8862: ST_TO_ADDR
8863: GO 8805
8865: POP
8866: POP
8867: GO 8774
8869: POP
8870: POP
// if not enemy then
8871: LD_VAR 0 4
8875: NOT
8876: IFFALSE 8902
// begin GameEnded = true ;
8878: LD_ADDR_LOC 15
8882: PUSH
8883: LD_INT 1
8885: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8886: LD_LOC 14
8890: PUSH
8891: LD_OWVAR 7
8895: ARRAY
8896: NOT
8897: IFFALSE 8902
// enable ( 401 ) ;
8899: LD_INT 401
8901: ENABLE_MARKED
// end ; end ;
8902: LD_VAR 0 1
8906: RET
// function unfog ; var k , friends ; begin
8907: LD_INT 0
8909: PPUSH
8910: PPUSH
8911: PPUSH
// for k = 1 to side_positions do
8912: LD_ADDR_VAR 0 2
8916: PUSH
8917: DOUBLE
8918: LD_INT 1
8920: DEC
8921: ST_TO_ADDR
8922: LD_EXP 34
8926: PUSH
8927: FOR_TO
8928: IFFALSE 8984
// if not defeated [ k ] then
8930: LD_LOC 14
8934: PUSH
8935: LD_VAR 0 2
8939: ARRAY
8940: NOT
8941: IFFALSE 8982
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8943: LD_OWVAR 7
8947: PPUSH
8948: LD_VAR 0 2
8952: PPUSH
8953: CALL_OW 81
8957: PUSH
8958: LD_INT 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: IN
8964: IFFALSE 8982
// friends = friends ^ k ;
8966: LD_ADDR_VAR 0 3
8970: PUSH
8971: LD_VAR 0 3
8975: PUSH
8976: LD_VAR 0 2
8980: ADD
8981: ST_TO_ADDR
8982: GO 8927
8984: POP
8985: POP
// if not friends then
8986: LD_VAR 0 3
8990: NOT
8991: IFFALSE 9005
// begin SetPlayerSpectator ( ) ;
8993: CALL_OW 572
// unfoged = true ;
8997: LD_ADDR_LOC 16
9001: PUSH
9002: LD_INT 1
9004: ST_TO_ADDR
// end ; end ;
9005: LD_VAR 0 1
9009: RET
// export function MakeGameEnd ; begin
9010: LD_INT 0
9012: PPUSH
// SetPlayerSpectator ( ) ;
9013: CALL_OW 572
// unfoged = true ;
9017: LD_ADDR_LOC 16
9021: PUSH
9022: LD_INT 1
9024: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9025: LD_INT 175
9027: PPUSH
9028: CALL_OW 67
// GameEnded = true ;
9032: LD_ADDR_LOC 15
9036: PUSH
9037: LD_INT 1
9039: ST_TO_ADDR
// end ;
9040: LD_VAR 0 1
9044: RET
// export function GetGameEnded ; begin
9045: LD_INT 0
9047: PPUSH
// result = GameEnded ;
9048: LD_ADDR_VAR 0 1
9052: PUSH
9053: LD_LOC 15
9057: ST_TO_ADDR
// end ; end_of_file
9058: LD_VAR 0 1
9062: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9063: LD_INT 0
9065: PPUSH
9066: PPUSH
9067: PPUSH
// for side = 1 to 8 do
9068: LD_ADDR_VAR 0 2
9072: PUSH
9073: DOUBLE
9074: LD_INT 1
9076: DEC
9077: ST_TO_ADDR
9078: LD_INT 8
9080: PUSH
9081: FOR_TO
9082: IFFALSE 9203
// begin for i = 1 to 72 do
9084: LD_ADDR_VAR 0 3
9088: PUSH
9089: DOUBLE
9090: LD_INT 1
9092: DEC
9093: ST_TO_ADDR
9094: LD_INT 72
9096: PUSH
9097: FOR_TO
9098: IFFALSE 9129
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9100: LD_VAR 0 3
9104: PPUSH
9105: LD_VAR 0 2
9109: PPUSH
9110: LD_INT 0
9112: PPUSH
9113: LD_VAR 0 3
9117: PPUSH
9118: CALL_OW 565
9122: PPUSH
9123: CALL_OW 322
9127: GO 9097
9129: POP
9130: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9131: LD_INT 73
9133: PPUSH
9134: LD_VAR 0 2
9138: PPUSH
9139: LD_INT 0
9141: PPUSH
9142: LD_INT 25
9144: PPUSH
9145: CALL_OW 565
9149: PPUSH
9150: CALL_OW 322
// for i = 0 to 40 do
9154: LD_ADDR_VAR 0 3
9158: PUSH
9159: DOUBLE
9160: LD_INT 0
9162: DEC
9163: ST_TO_ADDR
9164: LD_INT 40
9166: PUSH
9167: FOR_TO
9168: IFFALSE 9199
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9170: LD_VAR 0 3
9174: PPUSH
9175: LD_VAR 0 2
9179: PPUSH
9180: LD_INT 1
9182: PPUSH
9183: LD_VAR 0 3
9187: PPUSH
9188: CALL_OW 565
9192: PPUSH
9193: CALL_OW 324
9197: GO 9167
9199: POP
9200: POP
// end ;
9201: GO 9081
9203: POP
9204: POP
// end ;
9205: LD_VAR 0 1
9209: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9210: LD_INT 0
9212: PPUSH
9213: PPUSH
9214: PPUSH
// for side = 1 to 8 do
9215: LD_ADDR_VAR 0 3
9219: PUSH
9220: DOUBLE
9221: LD_INT 1
9223: DEC
9224: ST_TO_ADDR
9225: LD_INT 8
9227: PUSH
9228: FOR_TO
9229: IFFALSE 13225
// begin for i = 1 to 73 do
9231: LD_ADDR_VAR 0 4
9235: PUSH
9236: DOUBLE
9237: LD_INT 1
9239: DEC
9240: ST_TO_ADDR
9241: LD_INT 73
9243: PUSH
9244: FOR_TO
9245: IFFALSE 9266
// SetTech ( i , side , state_disabled ) ;
9247: LD_VAR 0 4
9251: PPUSH
9252: LD_VAR 0 3
9256: PPUSH
9257: LD_INT 0
9259: PPUSH
9260: CALL_OW 322
9264: GO 9244
9266: POP
9267: POP
// for i = 0 to 40 do
9268: LD_ADDR_VAR 0 4
9272: PUSH
9273: DOUBLE
9274: LD_INT 0
9276: DEC
9277: ST_TO_ADDR
9278: LD_INT 40
9280: PUSH
9281: FOR_TO
9282: IFFALSE 9303
// SetRestrict ( i , side , false ) ;
9284: LD_VAR 0 4
9288: PPUSH
9289: LD_VAR 0 3
9293: PPUSH
9294: LD_INT 0
9296: PPUSH
9297: CALL_OW 324
9301: GO 9281
9303: POP
9304: POP
// case level of 1 :
9305: LD_VAR 0 1
9309: PUSH
9310: LD_INT 1
9312: DOUBLE
9313: EQUAL
9314: IFTRUE 9318
9316: GO 9471
9318: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9319: LD_INT 35
9321: PPUSH
9322: LD_VAR 0 3
9326: PPUSH
9327: LD_INT 1
9329: PPUSH
9330: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9334: LD_INT 45
9336: PPUSH
9337: LD_VAR 0 3
9341: PPUSH
9342: LD_INT 1
9344: PPUSH
9345: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9349: LD_INT 46
9351: PPUSH
9352: LD_VAR 0 3
9356: PPUSH
9357: LD_INT 1
9359: PPUSH
9360: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9364: LD_INT 47
9366: PPUSH
9367: LD_VAR 0 3
9371: PPUSH
9372: LD_INT 1
9374: PPUSH
9375: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9379: LD_INT 0
9381: PPUSH
9382: LD_VAR 0 3
9386: PPUSH
9387: LD_INT 1
9389: PPUSH
9390: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9394: LD_INT 2
9396: PPUSH
9397: LD_VAR 0 3
9401: PPUSH
9402: LD_INT 1
9404: PPUSH
9405: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9409: LD_INT 4
9411: PPUSH
9412: LD_VAR 0 3
9416: PPUSH
9417: LD_INT 1
9419: PPUSH
9420: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9424: LD_INT 6
9426: PPUSH
9427: LD_VAR 0 3
9431: PPUSH
9432: LD_INT 1
9434: PPUSH
9435: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9439: LD_INT 29
9441: PPUSH
9442: LD_VAR 0 3
9446: PPUSH
9447: LD_INT 1
9449: PPUSH
9450: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9454: LD_INT 31
9456: PPUSH
9457: LD_VAR 0 3
9461: PPUSH
9462: LD_INT 1
9464: PPUSH
9465: CALL_OW 324
// end ; 2 :
9469: GO 13223
9471: LD_INT 2
9473: DOUBLE
9474: EQUAL
9475: IFTRUE 9479
9477: GO 9677
9479: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9480: LD_INT 35
9482: PPUSH
9483: LD_VAR 0 3
9487: PPUSH
9488: LD_INT 1
9490: PPUSH
9491: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9495: LD_INT 45
9497: PPUSH
9498: LD_VAR 0 3
9502: PPUSH
9503: LD_INT 1
9505: PPUSH
9506: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9510: LD_INT 46
9512: PPUSH
9513: LD_VAR 0 3
9517: PPUSH
9518: LD_INT 1
9520: PPUSH
9521: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9525: LD_INT 47
9527: PPUSH
9528: LD_VAR 0 3
9532: PPUSH
9533: LD_INT 1
9535: PPUSH
9536: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9540: LD_INT 1
9542: PPUSH
9543: LD_VAR 0 3
9547: PPUSH
9548: LD_INT 1
9550: PPUSH
9551: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9555: LD_INT 2
9557: PPUSH
9558: LD_VAR 0 3
9562: PPUSH
9563: LD_INT 1
9565: PPUSH
9566: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9570: LD_INT 11
9572: PPUSH
9573: LD_VAR 0 3
9577: PPUSH
9578: LD_INT 1
9580: PPUSH
9581: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9585: LD_INT 0
9587: PPUSH
9588: LD_VAR 0 3
9592: PPUSH
9593: LD_INT 1
9595: PPUSH
9596: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9600: LD_INT 2
9602: PPUSH
9603: LD_VAR 0 3
9607: PPUSH
9608: LD_INT 1
9610: PPUSH
9611: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9615: LD_INT 4
9617: PPUSH
9618: LD_VAR 0 3
9622: PPUSH
9623: LD_INT 1
9625: PPUSH
9626: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9630: LD_INT 6
9632: PPUSH
9633: LD_VAR 0 3
9637: PPUSH
9638: LD_INT 1
9640: PPUSH
9641: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9645: LD_INT 29
9647: PPUSH
9648: LD_VAR 0 3
9652: PPUSH
9653: LD_INT 1
9655: PPUSH
9656: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9660: LD_INT 31
9662: PPUSH
9663: LD_VAR 0 3
9667: PPUSH
9668: LD_INT 1
9670: PPUSH
9671: CALL_OW 324
// end ; 3 :
9675: GO 13223
9677: LD_INT 3
9679: DOUBLE
9680: EQUAL
9681: IFTRUE 9685
9683: GO 10138
9685: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9686: LD_INT 35
9688: PPUSH
9689: LD_VAR 0 3
9693: PPUSH
9694: LD_INT 1
9696: PPUSH
9697: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9701: LD_INT 45
9703: PPUSH
9704: LD_VAR 0 3
9708: PPUSH
9709: LD_INT 1
9711: PPUSH
9712: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9716: LD_INT 46
9718: PPUSH
9719: LD_VAR 0 3
9723: PPUSH
9724: LD_INT 1
9726: PPUSH
9727: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9731: LD_INT 47
9733: PPUSH
9734: LD_VAR 0 3
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9746: LD_INT 1
9748: PPUSH
9749: LD_VAR 0 3
9753: PPUSH
9754: LD_INT 1
9756: PPUSH
9757: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9761: LD_INT 2
9763: PPUSH
9764: LD_VAR 0 3
9768: PPUSH
9769: LD_INT 1
9771: PPUSH
9772: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9776: LD_INT 11
9778: PPUSH
9779: LD_VAR 0 3
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9791: LD_INT 48
9793: PPUSH
9794: LD_VAR 0 3
9798: PPUSH
9799: LD_INT 1
9801: PPUSH
9802: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9806: LD_INT 69
9808: PPUSH
9809: LD_VAR 0 3
9813: PPUSH
9814: LD_INT 1
9816: PPUSH
9817: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9821: LD_INT 39
9823: PPUSH
9824: LD_VAR 0 3
9828: PPUSH
9829: LD_INT 1
9831: PPUSH
9832: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9836: LD_INT 43
9838: PPUSH
9839: LD_VAR 0 3
9843: PPUSH
9844: LD_INT 1
9846: PPUSH
9847: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9851: LD_INT 51
9853: PPUSH
9854: LD_VAR 0 3
9858: PPUSH
9859: LD_INT 1
9861: PPUSH
9862: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9866: LD_INT 6
9868: PPUSH
9869: LD_VAR 0 3
9873: PPUSH
9874: LD_INT 1
9876: PPUSH
9877: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9881: LD_INT 0
9883: PPUSH
9884: LD_VAR 0 3
9888: PPUSH
9889: LD_INT 1
9891: PPUSH
9892: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9896: LD_INT 2
9898: PPUSH
9899: LD_VAR 0 3
9903: PPUSH
9904: LD_INT 1
9906: PPUSH
9907: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9911: LD_INT 3
9913: PPUSH
9914: LD_VAR 0 3
9918: PPUSH
9919: LD_INT 1
9921: PPUSH
9922: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9926: LD_INT 4
9928: PPUSH
9929: LD_VAR 0 3
9933: PPUSH
9934: LD_INT 1
9936: PPUSH
9937: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9941: LD_INT 6
9943: PPUSH
9944: LD_VAR 0 3
9948: PPUSH
9949: LD_INT 1
9951: PPUSH
9952: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9956: LD_INT 7
9958: PPUSH
9959: LD_VAR 0 3
9963: PPUSH
9964: LD_INT 1
9966: PPUSH
9967: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9971: LD_INT 8
9973: PPUSH
9974: LD_VAR 0 3
9978: PPUSH
9979: LD_INT 1
9981: PPUSH
9982: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9986: LD_INT 10
9988: PPUSH
9989: LD_VAR 0 3
9993: PPUSH
9994: LD_INT 1
9996: PPUSH
9997: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10001: LD_INT 15
10003: PPUSH
10004: LD_VAR 0 3
10008: PPUSH
10009: LD_INT 1
10011: PPUSH
10012: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10016: LD_INT 16
10018: PPUSH
10019: LD_VAR 0 3
10023: PPUSH
10024: LD_INT 1
10026: PPUSH
10027: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10031: LD_INT 17
10033: PPUSH
10034: LD_VAR 0 3
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10046: LD_INT 20
10048: PPUSH
10049: LD_VAR 0 3
10053: PPUSH
10054: LD_INT 1
10056: PPUSH
10057: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10061: LD_INT 26
10063: PPUSH
10064: LD_VAR 0 3
10068: PPUSH
10069: LD_INT 1
10071: PPUSH
10072: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10076: LD_INT 27
10078: PPUSH
10079: LD_VAR 0 3
10083: PPUSH
10084: LD_INT 1
10086: PPUSH
10087: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10091: LD_INT 29
10093: PPUSH
10094: LD_VAR 0 3
10098: PPUSH
10099: LD_INT 1
10101: PPUSH
10102: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10106: LD_INT 31
10108: PPUSH
10109: LD_VAR 0 3
10113: PPUSH
10114: LD_INT 1
10116: PPUSH
10117: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10121: LD_INT 32
10123: PPUSH
10124: LD_VAR 0 3
10128: PPUSH
10129: LD_INT 1
10131: PPUSH
10132: CALL_OW 324
// end ; 4 :
10136: GO 13223
10138: LD_INT 4
10140: DOUBLE
10141: EQUAL
10142: IFTRUE 10146
10144: GO 11094
10146: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10147: LD_INT 35
10149: PPUSH
10150: LD_VAR 0 3
10154: PPUSH
10155: LD_INT 1
10157: PPUSH
10158: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10162: LD_INT 45
10164: PPUSH
10165: LD_VAR 0 3
10169: PPUSH
10170: LD_INT 1
10172: PPUSH
10173: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10177: LD_INT 46
10179: PPUSH
10180: LD_VAR 0 3
10184: PPUSH
10185: LD_INT 1
10187: PPUSH
10188: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10192: LD_INT 47
10194: PPUSH
10195: LD_VAR 0 3
10199: PPUSH
10200: LD_INT 1
10202: PPUSH
10203: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10207: LD_INT 1
10209: PPUSH
10210: LD_VAR 0 3
10214: PPUSH
10215: LD_INT 1
10217: PPUSH
10218: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10222: LD_INT 2
10224: PPUSH
10225: LD_VAR 0 3
10229: PPUSH
10230: LD_INT 1
10232: PPUSH
10233: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10237: LD_INT 11
10239: PPUSH
10240: LD_VAR 0 3
10244: PPUSH
10245: LD_INT 1
10247: PPUSH
10248: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10252: LD_INT 20
10254: PPUSH
10255: LD_VAR 0 3
10259: PPUSH
10260: LD_INT 1
10262: PPUSH
10263: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10267: LD_INT 48
10269: PPUSH
10270: LD_VAR 0 3
10274: PPUSH
10275: LD_INT 1
10277: PPUSH
10278: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10282: LD_INT 49
10284: PPUSH
10285: LD_VAR 0 3
10289: PPUSH
10290: LD_INT 1
10292: PPUSH
10293: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10297: LD_INT 69
10299: PPUSH
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_INT 1
10307: PPUSH
10308: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10312: LD_INT 39
10314: PPUSH
10315: LD_VAR 0 3
10319: PPUSH
10320: LD_INT 1
10322: PPUSH
10323: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10327: LD_INT 34
10329: PPUSH
10330: LD_VAR 0 3
10334: PPUSH
10335: LD_INT 1
10337: PPUSH
10338: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10342: LD_INT 42
10344: PPUSH
10345: LD_VAR 0 3
10349: PPUSH
10350: LD_INT 1
10352: PPUSH
10353: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10357: LD_INT 44
10359: PPUSH
10360: LD_VAR 0 3
10364: PPUSH
10365: LD_INT 1
10367: PPUSH
10368: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10372: LD_INT 41
10374: PPUSH
10375: LD_VAR 0 3
10379: PPUSH
10380: LD_INT 1
10382: PPUSH
10383: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10387: LD_INT 43
10389: PPUSH
10390: LD_VAR 0 3
10394: PPUSH
10395: LD_INT 1
10397: PPUSH
10398: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10402: LD_INT 70
10404: PPUSH
10405: LD_VAR 0 3
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10417: LD_INT 51
10419: PPUSH
10420: LD_VAR 0 3
10424: PPUSH
10425: LD_INT 1
10427: PPUSH
10428: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10432: LD_INT 52
10434: PPUSH
10435: LD_VAR 0 3
10439: PPUSH
10440: LD_INT 1
10442: PPUSH
10443: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10447: LD_INT 6
10449: PPUSH
10450: LD_VAR 0 3
10454: PPUSH
10455: LD_INT 1
10457: PPUSH
10458: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10462: LD_INT 15
10464: PPUSH
10465: LD_VAR 0 3
10469: PPUSH
10470: LD_INT 1
10472: PPUSH
10473: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10477: LD_INT 7
10479: PPUSH
10480: LD_VAR 0 3
10484: PPUSH
10485: LD_INT 1
10487: PPUSH
10488: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10492: LD_INT 12
10494: PPUSH
10495: LD_VAR 0 3
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10507: LD_INT 18
10509: PPUSH
10510: LD_VAR 0 3
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10522: LD_INT 60
10524: PPUSH
10525: LD_VAR 0 3
10529: PPUSH
10530: LD_INT 1
10532: PPUSH
10533: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10537: LD_INT 9
10539: PPUSH
10540: LD_VAR 0 3
10544: PPUSH
10545: LD_INT 1
10547: PPUSH
10548: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10552: LD_INT 30
10554: PPUSH
10555: LD_VAR 0 3
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10567: LD_INT 37
10569: PPUSH
10570: LD_VAR 0 3
10574: PPUSH
10575: LD_INT 1
10577: PPUSH
10578: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10582: LD_INT 5
10584: PPUSH
10585: LD_VAR 0 3
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10597: LD_INT 66
10599: PPUSH
10600: LD_VAR 0 3
10604: PPUSH
10605: LD_INT 1
10607: PPUSH
10608: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10612: LD_INT 21
10614: PPUSH
10615: LD_VAR 0 3
10619: PPUSH
10620: LD_INT 1
10622: PPUSH
10623: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10627: LD_INT 22
10629: PPUSH
10630: LD_VAR 0 3
10634: PPUSH
10635: LD_INT 1
10637: PPUSH
10638: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10642: LD_INT 54
10644: PPUSH
10645: LD_VAR 0 3
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10657: LD_INT 0
10659: PPUSH
10660: LD_VAR 0 3
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10672: LD_INT 1
10674: PPUSH
10675: LD_VAR 0 3
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10687: LD_INT 2
10689: PPUSH
10690: LD_VAR 0 3
10694: PPUSH
10695: LD_INT 1
10697: PPUSH
10698: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10702: LD_INT 3
10704: PPUSH
10705: LD_VAR 0 3
10709: PPUSH
10710: LD_INT 1
10712: PPUSH
10713: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10717: LD_INT 4
10719: PPUSH
10720: LD_VAR 0 3
10724: PPUSH
10725: LD_INT 1
10727: PPUSH
10728: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10732: LD_INT 5
10734: PPUSH
10735: LD_VAR 0 3
10739: PPUSH
10740: LD_INT 1
10742: PPUSH
10743: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10747: LD_INT 6
10749: PPUSH
10750: LD_VAR 0 3
10754: PPUSH
10755: LD_INT 1
10757: PPUSH
10758: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10762: LD_INT 7
10764: PPUSH
10765: LD_VAR 0 3
10769: PPUSH
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10777: LD_INT 8
10779: PPUSH
10780: LD_VAR 0 3
10784: PPUSH
10785: LD_INT 1
10787: PPUSH
10788: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10792: LD_INT 10
10794: PPUSH
10795: LD_VAR 0 3
10799: PPUSH
10800: LD_INT 1
10802: PPUSH
10803: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10807: LD_INT 11
10809: PPUSH
10810: LD_VAR 0 3
10814: PPUSH
10815: LD_INT 1
10817: PPUSH
10818: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10822: LD_INT 12
10824: PPUSH
10825: LD_VAR 0 3
10829: PPUSH
10830: LD_INT 1
10832: PPUSH
10833: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10837: LD_INT 13
10839: PPUSH
10840: LD_VAR 0 3
10844: PPUSH
10845: LD_INT 1
10847: PPUSH
10848: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10852: LD_INT 14
10854: PPUSH
10855: LD_VAR 0 3
10859: PPUSH
10860: LD_INT 1
10862: PPUSH
10863: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10867: LD_INT 15
10869: PPUSH
10870: LD_VAR 0 3
10874: PPUSH
10875: LD_INT 1
10877: PPUSH
10878: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10882: LD_INT 16
10884: PPUSH
10885: LD_VAR 0 3
10889: PPUSH
10890: LD_INT 1
10892: PPUSH
10893: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10897: LD_INT 17
10899: PPUSH
10900: LD_VAR 0 3
10904: PPUSH
10905: LD_INT 1
10907: PPUSH
10908: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10912: LD_INT 19
10914: PPUSH
10915: LD_VAR 0 3
10919: PPUSH
10920: LD_INT 1
10922: PPUSH
10923: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10927: LD_INT 20
10929: PPUSH
10930: LD_VAR 0 3
10934: PPUSH
10935: LD_INT 1
10937: PPUSH
10938: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10942: LD_INT 21
10944: PPUSH
10945: LD_VAR 0 3
10949: PPUSH
10950: LD_INT 1
10952: PPUSH
10953: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10957: LD_INT 23
10959: PPUSH
10960: LD_VAR 0 3
10964: PPUSH
10965: LD_INT 1
10967: PPUSH
10968: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10972: LD_INT 26
10974: PPUSH
10975: LD_VAR 0 3
10979: PPUSH
10980: LD_INT 1
10982: PPUSH
10983: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10987: LD_INT 27
10989: PPUSH
10990: LD_VAR 0 3
10994: PPUSH
10995: LD_INT 1
10997: PPUSH
10998: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11002: LD_INT 28
11004: PPUSH
11005: LD_VAR 0 3
11009: PPUSH
11010: LD_INT 1
11012: PPUSH
11013: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11017: LD_INT 29
11019: PPUSH
11020: LD_VAR 0 3
11024: PPUSH
11025: LD_INT 1
11027: PPUSH
11028: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11032: LD_INT 30
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: LD_INT 1
11042: PPUSH
11043: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11047: LD_INT 31
11049: PPUSH
11050: LD_VAR 0 3
11054: PPUSH
11055: LD_INT 1
11057: PPUSH
11058: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11062: LD_INT 32
11064: PPUSH
11065: LD_VAR 0 3
11069: PPUSH
11070: LD_INT 1
11072: PPUSH
11073: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11077: LD_INT 36
11079: PPUSH
11080: LD_VAR 0 3
11084: PPUSH
11085: LD_INT 1
11087: PPUSH
11088: CALL_OW 324
// end ; 5 :
11092: GO 13223
11094: LD_INT 5
11096: DOUBLE
11097: EQUAL
11098: IFTRUE 11102
11100: GO 12215
11102: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11103: LD_INT 35
11105: PPUSH
11106: LD_VAR 0 3
11110: PPUSH
11111: LD_INT 1
11113: PPUSH
11114: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11118: LD_INT 45
11120: PPUSH
11121: LD_VAR 0 3
11125: PPUSH
11126: LD_INT 1
11128: PPUSH
11129: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11133: LD_INT 46
11135: PPUSH
11136: LD_VAR 0 3
11140: PPUSH
11141: LD_INT 1
11143: PPUSH
11144: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11148: LD_INT 47
11150: PPUSH
11151: LD_VAR 0 3
11155: PPUSH
11156: LD_INT 1
11158: PPUSH
11159: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11163: LD_INT 1
11165: PPUSH
11166: LD_VAR 0 3
11170: PPUSH
11171: LD_INT 1
11173: PPUSH
11174: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11178: LD_INT 2
11180: PPUSH
11181: LD_VAR 0 3
11185: PPUSH
11186: LD_INT 1
11188: PPUSH
11189: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11193: LD_INT 11
11195: PPUSH
11196: LD_VAR 0 3
11200: PPUSH
11201: LD_INT 1
11203: PPUSH
11204: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11208: LD_INT 20
11210: PPUSH
11211: LD_VAR 0 3
11215: PPUSH
11216: LD_INT 1
11218: PPUSH
11219: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11223: LD_INT 48
11225: PPUSH
11226: LD_VAR 0 3
11230: PPUSH
11231: LD_INT 1
11233: PPUSH
11234: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11238: LD_INT 49
11240: PPUSH
11241: LD_VAR 0 3
11245: PPUSH
11246: LD_INT 1
11248: PPUSH
11249: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11253: LD_INT 69
11255: PPUSH
11256: LD_VAR 0 3
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11268: LD_INT 39
11270: PPUSH
11271: LD_VAR 0 3
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11283: LD_INT 34
11285: PPUSH
11286: LD_VAR 0 3
11290: PPUSH
11291: LD_INT 1
11293: PPUSH
11294: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11298: LD_INT 42
11300: PPUSH
11301: LD_VAR 0 3
11305: PPUSH
11306: LD_INT 1
11308: PPUSH
11309: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11313: LD_INT 44
11315: PPUSH
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 1
11323: PPUSH
11324: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11328: LD_INT 41
11330: PPUSH
11331: LD_VAR 0 3
11335: PPUSH
11336: LD_INT 1
11338: PPUSH
11339: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11343: LD_INT 40
11345: PPUSH
11346: LD_VAR 0 3
11350: PPUSH
11351: LD_INT 1
11353: PPUSH
11354: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11358: LD_INT 43
11360: PPUSH
11361: LD_VAR 0 3
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11373: LD_INT 70
11375: PPUSH
11376: LD_VAR 0 3
11380: PPUSH
11381: LD_INT 1
11383: PPUSH
11384: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11388: LD_INT 51
11390: PPUSH
11391: LD_VAR 0 3
11395: PPUSH
11396: LD_INT 1
11398: PPUSH
11399: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11403: LD_INT 52
11405: PPUSH
11406: LD_VAR 0 3
11410: PPUSH
11411: LD_INT 1
11413: PPUSH
11414: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11418: LD_INT 6
11420: PPUSH
11421: LD_VAR 0 3
11425: PPUSH
11426: LD_INT 1
11428: PPUSH
11429: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11433: LD_INT 15
11435: PPUSH
11436: LD_VAR 0 3
11440: PPUSH
11441: LD_INT 1
11443: PPUSH
11444: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11448: LD_INT 7
11450: PPUSH
11451: LD_VAR 0 3
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11463: LD_INT 12
11465: PPUSH
11466: LD_VAR 0 3
11470: PPUSH
11471: LD_INT 1
11473: PPUSH
11474: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11478: LD_INT 17
11480: PPUSH
11481: LD_VAR 0 3
11485: PPUSH
11486: LD_INT 1
11488: PPUSH
11489: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11493: LD_INT 18
11495: PPUSH
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 1
11503: PPUSH
11504: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11508: LD_INT 60
11510: PPUSH
11511: LD_VAR 0 3
11515: PPUSH
11516: LD_INT 1
11518: PPUSH
11519: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11523: LD_INT 32
11525: PPUSH
11526: LD_VAR 0 3
11530: PPUSH
11531: LD_INT 1
11533: PPUSH
11534: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11538: LD_INT 9
11540: PPUSH
11541: LD_VAR 0 3
11545: PPUSH
11546: LD_INT 1
11548: PPUSH
11549: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11553: LD_INT 57
11555: PPUSH
11556: LD_VAR 0 3
11560: PPUSH
11561: LD_INT 1
11563: PPUSH
11564: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11568: LD_INT 30
11570: PPUSH
11571: LD_VAR 0 3
11575: PPUSH
11576: LD_INT 1
11578: PPUSH
11579: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11583: LD_INT 37
11585: PPUSH
11586: LD_VAR 0 3
11590: PPUSH
11591: LD_INT 1
11593: PPUSH
11594: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11598: LD_INT 63
11600: PPUSH
11601: LD_VAR 0 3
11605: PPUSH
11606: LD_INT 1
11608: PPUSH
11609: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11613: LD_INT 3
11615: PPUSH
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 1
11623: PPUSH
11624: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11628: LD_INT 4
11630: PPUSH
11631: LD_VAR 0 3
11635: PPUSH
11636: LD_INT 1
11638: PPUSH
11639: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11643: LD_INT 5
11645: PPUSH
11646: LD_VAR 0 3
11650: PPUSH
11651: LD_INT 1
11653: PPUSH
11654: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11658: LD_INT 66
11660: PPUSH
11661: LD_VAR 0 3
11665: PPUSH
11666: LD_INT 1
11668: PPUSH
11669: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11673: LD_INT 21
11675: PPUSH
11676: LD_VAR 0 3
11680: PPUSH
11681: LD_INT 1
11683: PPUSH
11684: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11688: LD_INT 22
11690: PPUSH
11691: LD_VAR 0 3
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11703: LD_INT 19
11705: PPUSH
11706: LD_VAR 0 3
11710: PPUSH
11711: LD_INT 1
11713: PPUSH
11714: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11718: LD_INT 54
11720: PPUSH
11721: LD_VAR 0 3
11725: PPUSH
11726: LD_INT 1
11728: PPUSH
11729: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11733: LD_INT 55
11735: PPUSH
11736: LD_VAR 0 3
11740: PPUSH
11741: LD_INT 1
11743: PPUSH
11744: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11748: LD_INT 0
11750: PPUSH
11751: LD_VAR 0 3
11755: PPUSH
11756: LD_INT 1
11758: PPUSH
11759: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11763: LD_INT 1
11765: PPUSH
11766: LD_VAR 0 3
11770: PPUSH
11771: LD_INT 1
11773: PPUSH
11774: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11778: LD_INT 2
11780: PPUSH
11781: LD_VAR 0 3
11785: PPUSH
11786: LD_INT 1
11788: PPUSH
11789: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11793: LD_INT 3
11795: PPUSH
11796: LD_VAR 0 3
11800: PPUSH
11801: LD_INT 1
11803: PPUSH
11804: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11808: LD_INT 4
11810: PPUSH
11811: LD_VAR 0 3
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11823: LD_INT 5
11825: PPUSH
11826: LD_VAR 0 3
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11838: LD_INT 6
11840: PPUSH
11841: LD_VAR 0 3
11845: PPUSH
11846: LD_INT 1
11848: PPUSH
11849: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11853: LD_INT 7
11855: PPUSH
11856: LD_VAR 0 3
11860: PPUSH
11861: LD_INT 1
11863: PPUSH
11864: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11868: LD_INT 8
11870: PPUSH
11871: LD_VAR 0 3
11875: PPUSH
11876: LD_INT 1
11878: PPUSH
11879: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11883: LD_INT 10
11885: PPUSH
11886: LD_VAR 0 3
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11898: LD_INT 11
11900: PPUSH
11901: LD_VAR 0 3
11905: PPUSH
11906: LD_INT 1
11908: PPUSH
11909: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11913: LD_INT 12
11915: PPUSH
11916: LD_VAR 0 3
11920: PPUSH
11921: LD_INT 1
11923: PPUSH
11924: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11928: LD_INT 13
11930: PPUSH
11931: LD_VAR 0 3
11935: PPUSH
11936: LD_INT 1
11938: PPUSH
11939: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11943: LD_INT 14
11945: PPUSH
11946: LD_VAR 0 3
11950: PPUSH
11951: LD_INT 1
11953: PPUSH
11954: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11958: LD_INT 15
11960: PPUSH
11961: LD_VAR 0 3
11965: PPUSH
11966: LD_INT 1
11968: PPUSH
11969: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11973: LD_INT 16
11975: PPUSH
11976: LD_VAR 0 3
11980: PPUSH
11981: LD_INT 1
11983: PPUSH
11984: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11988: LD_INT 17
11990: PPUSH
11991: LD_VAR 0 3
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12003: LD_INT 18
12005: PPUSH
12006: LD_VAR 0 3
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12018: LD_INT 19
12020: PPUSH
12021: LD_VAR 0 3
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12033: LD_INT 20
12035: PPUSH
12036: LD_VAR 0 3
12040: PPUSH
12041: LD_INT 1
12043: PPUSH
12044: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12048: LD_INT 21
12050: PPUSH
12051: LD_VAR 0 3
12055: PPUSH
12056: LD_INT 1
12058: PPUSH
12059: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12063: LD_INT 23
12065: PPUSH
12066: LD_VAR 0 3
12070: PPUSH
12071: LD_INT 1
12073: PPUSH
12074: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12078: LD_INT 26
12080: PPUSH
12081: LD_VAR 0 3
12085: PPUSH
12086: LD_INT 1
12088: PPUSH
12089: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12093: LD_INT 27
12095: PPUSH
12096: LD_VAR 0 3
12100: PPUSH
12101: LD_INT 1
12103: PPUSH
12104: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12108: LD_INT 28
12110: PPUSH
12111: LD_VAR 0 3
12115: PPUSH
12116: LD_INT 1
12118: PPUSH
12119: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12123: LD_INT 29
12125: PPUSH
12126: LD_VAR 0 3
12130: PPUSH
12131: LD_INT 1
12133: PPUSH
12134: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12138: LD_INT 30
12140: PPUSH
12141: LD_VAR 0 3
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12153: LD_INT 31
12155: PPUSH
12156: LD_VAR 0 3
12160: PPUSH
12161: LD_INT 1
12163: PPUSH
12164: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12168: LD_INT 32
12170: PPUSH
12171: LD_VAR 0 3
12175: PPUSH
12176: LD_INT 1
12178: PPUSH
12179: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12183: LD_INT 33
12185: PPUSH
12186: LD_VAR 0 3
12190: PPUSH
12191: LD_INT 1
12193: PPUSH
12194: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12198: LD_INT 36
12200: PPUSH
12201: LD_VAR 0 3
12205: PPUSH
12206: LD_INT 1
12208: PPUSH
12209: CALL_OW 324
// end ; 6 :
12213: GO 13223
12215: LD_INT 6
12217: DOUBLE
12218: EQUAL
12219: IFTRUE 12223
12221: GO 13148
12223: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12224: LD_INT 35
12226: PPUSH
12227: LD_VAR 0 3
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12239: LD_INT 45
12241: PPUSH
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12254: LD_INT 46
12256: PPUSH
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12269: LD_INT 47
12271: PPUSH
12272: LD_VAR 0 3
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12284: LD_INT 1
12286: PPUSH
12287: LD_VAR 0 3
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12299: LD_INT 2
12301: PPUSH
12302: LD_VAR 0 3
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12314: LD_INT 11
12316: PPUSH
12317: LD_VAR 0 3
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12329: LD_INT 20
12331: PPUSH
12332: LD_VAR 0 3
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12344: LD_INT 48
12346: PPUSH
12347: LD_VAR 0 3
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12359: LD_INT 49
12361: PPUSH
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 1
12369: PPUSH
12370: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12374: LD_INT 50
12376: PPUSH
12377: LD_VAR 0 3
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12389: LD_INT 69
12391: PPUSH
12392: LD_VAR 0 3
12396: PPUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12404: LD_INT 39
12406: PPUSH
12407: LD_VAR 0 3
12411: PPUSH
12412: LD_INT 1
12414: PPUSH
12415: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12419: LD_INT 34
12421: PPUSH
12422: LD_VAR 0 3
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12434: LD_INT 42
12436: PPUSH
12437: LD_VAR 0 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12449: LD_INT 44
12451: PPUSH
12452: LD_VAR 0 3
12456: PPUSH
12457: LD_INT 1
12459: PPUSH
12460: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12464: LD_INT 41
12466: PPUSH
12467: LD_VAR 0 3
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12479: LD_INT 13
12481: PPUSH
12482: LD_VAR 0 3
12486: PPUSH
12487: LD_INT 1
12489: PPUSH
12490: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12494: LD_INT 40
12496: PPUSH
12497: LD_VAR 0 3
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12509: LD_INT 43
12511: PPUSH
12512: LD_VAR 0 3
12516: PPUSH
12517: LD_INT 1
12519: PPUSH
12520: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12524: LD_INT 70
12526: PPUSH
12527: LD_VAR 0 3
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12539: LD_INT 23
12541: PPUSH
12542: LD_VAR 0 3
12546: PPUSH
12547: LD_INT 1
12549: PPUSH
12550: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12554: LD_INT 51
12556: PPUSH
12557: LD_VAR 0 3
12561: PPUSH
12562: LD_INT 1
12564: PPUSH
12565: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12569: LD_INT 52
12571: PPUSH
12572: LD_VAR 0 3
12576: PPUSH
12577: LD_INT 1
12579: PPUSH
12580: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12584: LD_INT 6
12586: PPUSH
12587: LD_VAR 0 3
12591: PPUSH
12592: LD_INT 1
12594: PPUSH
12595: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12599: LD_INT 15
12601: PPUSH
12602: LD_VAR 0 3
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12614: LD_INT 7
12616: PPUSH
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12629: LD_INT 12
12631: PPUSH
12632: LD_VAR 0 3
12636: PPUSH
12637: LD_INT 1
12639: PPUSH
12640: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12644: LD_INT 10
12646: PPUSH
12647: LD_VAR 0 3
12651: PPUSH
12652: LD_INT 1
12654: PPUSH
12655: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12659: LD_INT 17
12661: PPUSH
12662: LD_VAR 0 3
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12674: LD_INT 18
12676: PPUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_INT 1
12684: PPUSH
12685: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12689: LD_INT 60
12691: PPUSH
12692: LD_VAR 0 3
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12704: LD_INT 61
12706: PPUSH
12707: LD_VAR 0 3
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12719: LD_INT 32
12721: PPUSH
12722: LD_VAR 0 3
12726: PPUSH
12727: LD_INT 1
12729: PPUSH
12730: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12734: LD_INT 27
12736: PPUSH
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 1
12744: PPUSH
12745: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12749: LD_INT 36
12751: PPUSH
12752: LD_VAR 0 3
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12764: LD_INT 33
12766: PPUSH
12767: LD_VAR 0 3
12771: PPUSH
12772: LD_INT 1
12774: PPUSH
12775: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12779: LD_INT 9
12781: PPUSH
12782: LD_VAR 0 3
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12794: LD_INT 38
12796: PPUSH
12797: LD_VAR 0 3
12801: PPUSH
12802: LD_INT 1
12804: PPUSH
12805: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12809: LD_INT 57
12811: PPUSH
12812: LD_VAR 0 3
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12824: LD_INT 58
12826: PPUSH
12827: LD_VAR 0 3
12831: PPUSH
12832: LD_INT 1
12834: PPUSH
12835: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12839: LD_INT 28
12841: PPUSH
12842: LD_VAR 0 3
12846: PPUSH
12847: LD_INT 1
12849: PPUSH
12850: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12854: LD_INT 29
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: LD_INT 1
12864: PPUSH
12865: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12869: LD_INT 30
12871: PPUSH
12872: LD_VAR 0 3
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12884: LD_INT 37
12886: PPUSH
12887: LD_VAR 0 3
12891: PPUSH
12892: LD_INT 1
12894: PPUSH
12895: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12899: LD_INT 63
12901: PPUSH
12902: LD_VAR 0 3
12906: PPUSH
12907: LD_INT 1
12909: PPUSH
12910: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12914: LD_INT 64
12916: PPUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: LD_INT 1
12924: PPUSH
12925: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12929: LD_INT 3
12931: PPUSH
12932: LD_VAR 0 3
12936: PPUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12944: LD_INT 4
12946: PPUSH
12947: LD_VAR 0 3
12951: PPUSH
12952: LD_INT 1
12954: PPUSH
12955: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12959: LD_INT 5
12961: PPUSH
12962: LD_VAR 0 3
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12974: LD_INT 8
12976: PPUSH
12977: LD_VAR 0 3
12981: PPUSH
12982: LD_INT 1
12984: PPUSH
12985: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12989: LD_INT 66
12991: PPUSH
12992: LD_VAR 0 3
12996: PPUSH
12997: LD_INT 1
12999: PPUSH
13000: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13004: LD_INT 67
13006: PPUSH
13007: LD_VAR 0 3
13011: PPUSH
13012: LD_INT 1
13014: PPUSH
13015: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13019: LD_INT 21
13021: PPUSH
13022: LD_VAR 0 3
13026: PPUSH
13027: LD_INT 1
13029: PPUSH
13030: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13034: LD_INT 22
13036: PPUSH
13037: LD_VAR 0 3
13041: PPUSH
13042: LD_INT 1
13044: PPUSH
13045: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13049: LD_INT 19
13051: PPUSH
13052: LD_VAR 0 3
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13064: LD_INT 26
13066: PPUSH
13067: LD_VAR 0 3
13071: PPUSH
13072: LD_INT 1
13074: PPUSH
13075: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13079: LD_INT 54
13081: PPUSH
13082: LD_VAR 0 3
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13094: LD_INT 55
13096: PPUSH
13097: LD_VAR 0 3
13101: PPUSH
13102: LD_INT 1
13104: PPUSH
13105: CALL_OW 322
// for i = 0 to 39 do
13109: LD_ADDR_VAR 0 4
13113: PUSH
13114: DOUBLE
13115: LD_INT 0
13117: DEC
13118: ST_TO_ADDR
13119: LD_INT 39
13121: PUSH
13122: FOR_TO
13123: IFFALSE 13144
// SetRestrict ( i , side , true ) ;
13125: LD_VAR 0 4
13129: PPUSH
13130: LD_VAR 0 3
13134: PPUSH
13135: LD_INT 1
13137: PPUSH
13138: CALL_OW 324
13142: GO 13122
13144: POP
13145: POP
// end ; else
13146: GO 13223
13148: POP
// begin for i = 1 to 73 do
13149: LD_ADDR_VAR 0 4
13153: PUSH
13154: DOUBLE
13155: LD_INT 1
13157: DEC
13158: ST_TO_ADDR
13159: LD_INT 73
13161: PUSH
13162: FOR_TO
13163: IFFALSE 13184
// SetTech ( i , side , state_enabled ) ;
13165: LD_VAR 0 4
13169: PPUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: CALL_OW 322
13182: GO 13162
13184: POP
13185: POP
// for i = 0 to 39 do
13186: LD_ADDR_VAR 0 4
13190: PUSH
13191: DOUBLE
13192: LD_INT 0
13194: DEC
13195: ST_TO_ADDR
13196: LD_INT 39
13198: PUSH
13199: FOR_TO
13200: IFFALSE 13221
// SetRestrict ( i , side , true ) ;
13202: LD_VAR 0 4
13206: PPUSH
13207: LD_VAR 0 3
13211: PPUSH
13212: LD_INT 1
13214: PPUSH
13215: CALL_OW 324
13219: GO 13199
13221: POP
13222: POP
// end ; end ; end ;
13223: GO 9228
13225: POP
13226: POP
// end ; end_of_file
13227: LD_VAR 0 2
13231: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13232: LD_INT 0
13234: PPUSH
13235: PPUSH
13236: PPUSH
13237: PPUSH
13238: PPUSH
13239: PPUSH
13240: PPUSH
13241: PPUSH
13242: PPUSH
// for i := 1 to 8 do
13243: LD_ADDR_VAR 0 2
13247: PUSH
13248: DOUBLE
13249: LD_INT 1
13251: DEC
13252: ST_TO_ADDR
13253: LD_INT 8
13255: PUSH
13256: FOR_TO
13257: IFFALSE 13641
// begin if Side_Positions [ i ] then
13259: LD_EXP 34
13263: PUSH
13264: LD_VAR 0 2
13268: ARRAY
13269: IFFALSE 13639
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13271: LD_ADDR_VAR 0 7
13275: PUSH
13276: LD_INT 22
13278: PUSH
13279: LD_VAR 0 2
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 21
13290: PUSH
13291: LD_INT 1
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PPUSH
13302: CALL_OW 69
13306: PUSH
13307: LD_INT 0
13309: PLUS
13310: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13311: LD_ADDR_VAR 0 9
13315: PUSH
13316: LD_INT 22
13318: PUSH
13319: LD_VAR 0 2
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 2
13330: PUSH
13331: LD_INT 30
13333: PUSH
13334: LD_INT 0
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 30
13343: PUSH
13344: LD_INT 1
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: LIST
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PPUSH
13360: CALL_OW 69
13364: ST_TO_ADDR
// crates := 0 ;
13365: LD_ADDR_VAR 0 4
13369: PUSH
13370: LD_INT 0
13372: ST_TO_ADDR
// oil := 0 ;
13373: LD_ADDR_VAR 0 5
13377: PUSH
13378: LD_INT 0
13380: ST_TO_ADDR
// sib := 0 ;
13381: LD_ADDR_VAR 0 6
13385: PUSH
13386: LD_INT 0
13388: ST_TO_ADDR
// if bases then
13389: LD_VAR 0 9
13393: IFFALSE 13499
// begin for j in bases do
13395: LD_ADDR_VAR 0 3
13399: PUSH
13400: LD_VAR 0 9
13404: PUSH
13405: FOR_IN
13406: IFFALSE 13497
// begin base := GetBase ( j ) ;
13408: LD_ADDR_VAR 0 8
13412: PUSH
13413: LD_VAR 0 3
13417: PPUSH
13418: CALL_OW 274
13422: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13423: LD_ADDR_VAR 0 4
13427: PUSH
13428: LD_VAR 0 4
13432: PUSH
13433: LD_VAR 0 8
13437: PPUSH
13438: LD_INT 1
13440: PPUSH
13441: CALL_OW 275
13445: PLUS
13446: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13447: LD_ADDR_VAR 0 5
13451: PUSH
13452: LD_VAR 0 5
13456: PUSH
13457: LD_VAR 0 8
13461: PPUSH
13462: LD_INT 2
13464: PPUSH
13465: CALL_OW 275
13469: PLUS
13470: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13471: LD_ADDR_VAR 0 6
13475: PUSH
13476: LD_VAR 0 6
13480: PUSH
13481: LD_VAR 0 8
13485: PPUSH
13486: LD_INT 3
13488: PPUSH
13489: CALL_OW 275
13493: PLUS
13494: ST_TO_ADDR
// end ;
13495: GO 13405
13497: POP
13498: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13499: LD_STRING setSpecText(
13501: PUSH
13502: LD_VAR 0 2
13506: STR
13507: PUSH
13508: LD_STRING ,
13510: STR
13511: PUSH
13512: LD_INT 2
13514: STR
13515: PUSH
13516: LD_STRING ,
13518: STR
13519: PUSH
13520: LD_VAR 0 4
13524: STR
13525: PUSH
13526: LD_STRING )
13528: STR
13529: PPUSH
13530: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13534: LD_STRING setSpecText(
13536: PUSH
13537: LD_VAR 0 2
13541: STR
13542: PUSH
13543: LD_STRING ,
13545: STR
13546: PUSH
13547: LD_INT 3
13549: STR
13550: PUSH
13551: LD_STRING ,
13553: STR
13554: PUSH
13555: LD_VAR 0 5
13559: STR
13560: PUSH
13561: LD_STRING )
13563: STR
13564: PPUSH
13565: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13569: LD_STRING setSpecText(
13571: PUSH
13572: LD_VAR 0 2
13576: STR
13577: PUSH
13578: LD_STRING ,
13580: STR
13581: PUSH
13582: LD_INT 4
13584: STR
13585: PUSH
13586: LD_STRING ,
13588: STR
13589: PUSH
13590: LD_VAR 0 6
13594: STR
13595: PUSH
13596: LD_STRING )
13598: STR
13599: PPUSH
13600: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13604: LD_STRING setSpecText(
13606: PUSH
13607: LD_VAR 0 2
13611: STR
13612: PUSH
13613: LD_STRING ,
13615: STR
13616: PUSH
13617: LD_INT 5
13619: STR
13620: PUSH
13621: LD_STRING ,
13623: STR
13624: PUSH
13625: LD_VAR 0 7
13629: STR
13630: PUSH
13631: LD_STRING )
13633: STR
13634: PPUSH
13635: CALL_OW 559
// end ; end ;
13639: GO 13256
13641: POP
13642: POP
// end ;
13643: LD_VAR 0 1
13647: RET
// every 0 0$1 do
13648: GO 13650
13650: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13651: LD_STRING setSpecLogoNumber(
13653: PUSH
13654: LD_INT 2
13656: STR
13657: PUSH
13658: LD_STRING ,
13660: STR
13661: PUSH
13662: LD_INT 1
13664: STR
13665: PUSH
13666: LD_STRING )
13668: STR
13669: PPUSH
13670: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13674: LD_STRING setSpecLogoNumber(
13676: PUSH
13677: LD_INT 3
13679: STR
13680: PUSH
13681: LD_STRING ,
13683: STR
13684: PUSH
13685: LD_INT 2
13687: STR
13688: PUSH
13689: LD_STRING )
13691: STR
13692: PPUSH
13693: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13697: LD_STRING setSpecLogoNumber(
13699: PUSH
13700: LD_INT 4
13702: STR
13703: PUSH
13704: LD_STRING ,
13706: STR
13707: PUSH
13708: LD_INT 3
13710: STR
13711: PUSH
13712: LD_STRING )
13714: STR
13715: PPUSH
13716: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13720: LD_STRING setSpecLogoNumber(
13722: PUSH
13723: LD_INT 5
13725: STR
13726: PUSH
13727: LD_STRING ,
13729: STR
13730: PUSH
13731: LD_INT 4
13733: STR
13734: PUSH
13735: LD_STRING )
13737: STR
13738: PPUSH
13739: CALL_OW 559
// end ;
13743: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13744: LD_INT 2
13746: PUSH
13747: LD_INT 30
13749: PUSH
13750: LD_INT 0
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 30
13759: PUSH
13760: LD_INT 1
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: LIST
13771: PPUSH
13772: CALL_OW 69
13776: IFFALSE 13786
13778: GO 13780
13780: DISABLE
// begin enable ;
13781: ENABLE
// UpdateSpectatorBar ;
13782: CALL 13232 0 0
// end ; end_of_file
13786: END
// var respawn , inqueue ; export function init_respawning ; begin
13787: LD_INT 0
13789: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13790: LD_ADDR_LOC 18
13794: PUSH
13795: LD_INT 1
13797: PPUSH
13798: LD_INT 8
13800: PPUSH
13801: CALL_OW 12
13805: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13806: LD_ADDR_LOC 19
13810: PUSH
13811: LD_INT 0
13813: PUSH
13814: LD_INT 0
13816: PUSH
13817: LD_INT 0
13819: PUSH
13820: LD_INT 0
13822: PUSH
13823: LD_INT 0
13825: PUSH
13826: LD_INT 0
13828: PUSH
13829: LD_INT 0
13831: PUSH
13832: LD_INT 0
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: ST_TO_ADDR
// end ;
13845: LD_VAR 0 1
13849: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13850: GO 13852
13852: DISABLE
13853: LD_INT 0
13855: PPUSH
13856: PPUSH
13857: PPUSH
// begin if respawning_time_max = 0 then
13858: LD_EXP 28
13862: PUSH
13863: LD_INT 0
13865: EQUAL
13866: IFFALSE 13870
// exit ;
13868: GO 14278
// if respawn = 8 then
13870: LD_LOC 18
13874: PUSH
13875: LD_INT 8
13877: EQUAL
13878: IFFALSE 13890
// respawn := 1 else
13880: LD_ADDR_LOC 18
13884: PUSH
13885: LD_INT 1
13887: ST_TO_ADDR
13888: GO 13904
// respawn := respawn + 1 ;
13890: LD_ADDR_LOC 18
13894: PUSH
13895: LD_LOC 18
13899: PUSH
13900: LD_INT 1
13902: PLUS
13903: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13904: LD_EXP 34
13908: PUSH
13909: LD_LOC 18
13913: ARRAY
13914: PUSH
13915: LD_LOC 19
13919: PUSH
13920: LD_LOC 18
13924: ARRAY
13925: NOT
13926: AND
13927: IFFALSE 14277
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13929: LD_ADDR_VAR 0 1
13933: PUSH
13934: LD_INT 21
13936: PUSH
13937: LD_INT 1
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_INT 22
13946: PUSH
13947: LD_LOC 18
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 3
13958: PUSH
13959: LD_INT 23
13961: PUSH
13962: LD_INT 0
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: PPUSH
13975: CALL_OW 69
13979: ST_TO_ADDR
// if n < number_of_people then
13980: LD_VAR 0 1
13984: PUSH
13985: LD_EXP 19
13989: LESS
13990: IFFALSE 14274
// begin aktresp := respawn ;
13992: LD_ADDR_VAR 0 3
13996: PUSH
13997: LD_LOC 18
14001: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14002: LD_ADDR_LOC 19
14006: PUSH
14007: LD_LOC 19
14011: PPUSH
14012: LD_VAR 0 3
14016: PPUSH
14017: LD_INT 1
14019: PPUSH
14020: CALL_OW 1
14024: ST_TO_ADDR
// enable ;
14025: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14026: LD_EXP 27
14030: PPUSH
14031: LD_EXP 28
14035: PPUSH
14036: CALL_OW 12
14040: PPUSH
14041: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14045: LD_ADDR_LOC 19
14049: PUSH
14050: LD_LOC 19
14054: PPUSH
14055: LD_VAR 0 3
14059: PPUSH
14060: LD_INT 0
14062: PPUSH
14063: CALL_OW 1
14067: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14068: LD_ADDR_VAR 0 2
14072: PUSH
14073: LD_INT 21
14075: PUSH
14076: LD_INT 3
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 2
14085: PUSH
14086: LD_INT 30
14088: PUSH
14089: LD_INT 0
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 30
14098: PUSH
14099: LD_INT 1
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 50
14113: PUSH
14114: EMPTY
14115: LIST
14116: PUSH
14117: LD_INT 22
14119: PUSH
14120: LD_VAR 0 3
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: PPUSH
14135: CALL_OW 69
14139: ST_TO_ADDR
// if dep = 0 then
14140: LD_VAR 0 2
14144: PUSH
14145: LD_INT 0
14147: EQUAL
14148: IFFALSE 14152
// exit ;
14150: GO 14278
// hc_name :=  ;
14152: LD_ADDR_OWVAR 26
14156: PUSH
14157: LD_STRING 
14159: ST_TO_ADDR
// hc_importance := 0 ;
14160: LD_ADDR_OWVAR 32
14164: PUSH
14165: LD_INT 0
14167: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14168: LD_INT 0
14170: PPUSH
14171: LD_INT 0
14173: PPUSH
14174: LD_EXP 20
14178: PUSH
14179: LD_INT 2
14181: DIV
14182: PPUSH
14183: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14187: LD_ADDR_OWVAR 21
14191: PUSH
14192: LD_EXP 35
14196: PUSH
14197: LD_VAR 0 3
14201: ARRAY
14202: ST_TO_ADDR
// uc_side := aktresp ;
14203: LD_ADDR_OWVAR 20
14207: PUSH
14208: LD_VAR 0 3
14212: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14213: LD_ADDR_VAR 0 2
14217: PUSH
14218: LD_VAR 0 2
14222: PUSH
14223: LD_INT 1
14225: PPUSH
14226: LD_VAR 0 2
14230: PPUSH
14231: CALL_OW 12
14235: ARRAY
14236: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14237: CALL_OW 44
14241: PPUSH
14242: LD_VAR 0 2
14246: PPUSH
14247: CALL_OW 250
14251: PPUSH
14252: LD_VAR 0 2
14256: PPUSH
14257: CALL_OW 251
14261: PPUSH
14262: LD_INT 7
14264: PPUSH
14265: LD_INT 1
14267: PPUSH
14268: CALL_OW 50
// end else
14272: GO 14275
// enable ;
14274: ENABLE
// end else
14275: GO 14278
// enable ;
14277: ENABLE
// end ; end_of_file
14278: PPOPN 3
14280: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14281: LD_INT 0
14283: PPUSH
14284: PPUSH
14285: PPUSH
// BuildUpTime_Delay = 0 ;
14286: LD_ADDR_EXP 57
14290: PUSH
14291: LD_INT 0
14293: ST_TO_ADDR
// if not def_builduptime then
14294: LD_EXP 14
14298: NOT
14299: IFFALSE 14303
// exit ;
14301: GO 14486
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14303: LD_ADDR_EXP 57
14307: PUSH
14308: LD_INT 8400
14310: PUSH
14311: LD_INT 2100
14313: PUSH
14314: LD_EXP 14
14318: MUL
14319: PLUS
14320: ST_TO_ADDR
// BuildUpTimeActive := true ;
14321: LD_ADDR_EXP 56
14325: PUSH
14326: LD_INT 1
14328: ST_TO_ADDR
// for i := 1 to 8 do
14329: LD_ADDR_VAR 0 2
14333: PUSH
14334: DOUBLE
14335: LD_INT 1
14337: DEC
14338: ST_TO_ADDR
14339: LD_INT 8
14341: PUSH
14342: FOR_TO
14343: IFFALSE 14484
// if Side_Positions [ i ] then
14345: LD_EXP 34
14349: PUSH
14350: LD_VAR 0 2
14354: ARRAY
14355: IFFALSE 14482
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14357: LD_EXP 55
14361: PUSH
14362: LD_EXP 34
14366: PUSH
14367: LD_VAR 0 2
14371: ARRAY
14372: ARRAY
14373: PPUSH
14374: LD_INT 5
14376: PPUSH
14377: CALL_OW 424
// for j := 1 to 8 do
14381: LD_ADDR_VAR 0 3
14385: PUSH
14386: DOUBLE
14387: LD_INT 1
14389: DEC
14390: ST_TO_ADDR
14391: LD_INT 8
14393: PUSH
14394: FOR_TO
14395: IFFALSE 14480
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14397: LD_EXP 34
14401: PUSH
14402: LD_VAR 0 3
14406: ARRAY
14407: PUSH
14408: LD_EXP 31
14412: PUSH
14413: LD_VAR 0 2
14417: ARRAY
14418: PUSH
14419: LD_EXP 31
14423: PUSH
14424: LD_VAR 0 3
14428: ARRAY
14429: NONEQUAL
14430: PUSH
14431: LD_EXP 36
14435: NOT
14436: PUSH
14437: LD_VAR 0 2
14441: PUSH
14442: LD_VAR 0 3
14446: NONEQUAL
14447: AND
14448: OR
14449: AND
14450: IFFALSE 14478
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14452: LD_VAR 0 3
14456: PPUSH
14457: LD_EXP 55
14461: PUSH
14462: LD_EXP 34
14466: PUSH
14467: LD_VAR 0 2
14471: ARRAY
14472: ARRAY
14473: PPUSH
14474: CALL_OW 333
14478: GO 14394
14480: POP
14481: POP
// end ;
14482: GO 14342
14484: POP
14485: POP
// end ;
14486: LD_VAR 0 1
14490: RET
// export function EndBuildUp ; var i , j ; begin
14491: LD_INT 0
14493: PPUSH
14494: PPUSH
14495: PPUSH
// BuildUpTimeActive := false ;
14496: LD_ADDR_EXP 56
14500: PUSH
14501: LD_INT 0
14503: ST_TO_ADDR
// for i := 1 to 8 do
14504: LD_ADDR_VAR 0 2
14508: PUSH
14509: DOUBLE
14510: LD_INT 1
14512: DEC
14513: ST_TO_ADDR
14514: LD_INT 8
14516: PUSH
14517: FOR_TO
14518: IFFALSE 14659
// if Side_Positions [ i ] then
14520: LD_EXP 34
14524: PUSH
14525: LD_VAR 0 2
14529: ARRAY
14530: IFFALSE 14657
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14532: LD_EXP 55
14536: PUSH
14537: LD_EXP 34
14541: PUSH
14542: LD_VAR 0 2
14546: ARRAY
14547: ARRAY
14548: PPUSH
14549: LD_INT 0
14551: PPUSH
14552: CALL_OW 424
// for j := 1 to 8 do
14556: LD_ADDR_VAR 0 3
14560: PUSH
14561: DOUBLE
14562: LD_INT 1
14564: DEC
14565: ST_TO_ADDR
14566: LD_INT 8
14568: PUSH
14569: FOR_TO
14570: IFFALSE 14655
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14572: LD_EXP 34
14576: PUSH
14577: LD_VAR 0 3
14581: ARRAY
14582: PUSH
14583: LD_EXP 31
14587: PUSH
14588: LD_VAR 0 2
14592: ARRAY
14593: PUSH
14594: LD_EXP 31
14598: PUSH
14599: LD_VAR 0 3
14603: ARRAY
14604: NONEQUAL
14605: PUSH
14606: LD_EXP 36
14610: NOT
14611: PUSH
14612: LD_VAR 0 2
14616: PUSH
14617: LD_VAR 0 3
14621: NONEQUAL
14622: AND
14623: OR
14624: AND
14625: IFFALSE 14653
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14627: LD_VAR 0 3
14631: PPUSH
14632: LD_EXP 55
14636: PUSH
14637: LD_EXP 34
14641: PUSH
14642: LD_VAR 0 2
14646: ARRAY
14647: ARRAY
14648: PPUSH
14649: CALL_OW 334
14653: GO 14569
14655: POP
14656: POP
// end ;
14657: GO 14517
14659: POP
14660: POP
// end ;
14661: LD_VAR 0 1
14665: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14666: LD_EXP 56
14670: IFFALSE 14845
14672: GO 14674
14674: DISABLE
14675: LD_INT 0
14677: PPUSH
14678: PPUSH
// begin for i := 1 to 8 do
14679: LD_ADDR_VAR 0 1
14683: PUSH
14684: DOUBLE
14685: LD_INT 1
14687: DEC
14688: ST_TO_ADDR
14689: LD_INT 8
14691: PUSH
14692: FOR_TO
14693: IFFALSE 14842
// if Side_Positions [ i ] then
14695: LD_EXP 34
14699: PUSH
14700: LD_VAR 0 1
14704: ARRAY
14705: IFFALSE 14840
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14707: LD_ADDR_VAR 0 2
14711: PUSH
14712: LD_EXP 55
14716: PUSH
14717: LD_EXP 34
14721: PUSH
14722: LD_VAR 0 1
14726: ARRAY
14727: ARRAY
14728: PPUSH
14729: LD_INT 2
14731: PUSH
14732: LD_INT 21
14734: PUSH
14735: LD_INT 1
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 21
14744: PUSH
14745: LD_INT 2
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 22
14759: PUSH
14760: LD_OWVAR 2
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PPUSH
14773: CALL_OW 70
14777: PUSH
14778: FOR_IN
14779: IFFALSE 14838
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14781: LD_EXP 31
14785: PUSH
14786: LD_VAR 0 1
14790: ARRAY
14791: PUSH
14792: LD_EXP 31
14796: PUSH
14797: LD_OWVAR 2
14801: ARRAY
14802: NONEQUAL
14803: PUSH
14804: LD_EXP 36
14808: NOT
14809: PUSH
14810: LD_VAR 0 1
14814: PUSH
14815: LD_OWVAR 2
14819: NONEQUAL
14820: AND
14821: OR
14822: IFFALSE 14836
// ComMoveToArea ( un , BuildUpEscape ) ;
14824: LD_VAR 0 2
14828: PPUSH
14829: LD_INT 17
14831: PPUSH
14832: CALL_OW 113
14836: GO 14778
14838: POP
14839: POP
14840: GO 14692
14842: POP
14843: POP
// enable ;
14844: ENABLE
// end ;
14845: PPOPN 2
14847: END
// every 0 0$1 trigger def_builduptime do
14848: LD_EXP 14
14852: IFFALSE 14878
14854: GO 14856
14856: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14857: LD_INT 8400
14859: PUSH
14860: LD_EXP 14
14864: PUSH
14865: LD_INT 2100
14867: MUL
14868: PLUS
14869: PPUSH
14870: CALL_OW 67
// EndBuildUp ;
14874: CALL 14491 0 0
// end ;
14878: END
