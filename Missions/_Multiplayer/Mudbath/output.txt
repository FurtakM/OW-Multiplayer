// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 36
 372: PUSH
 373: LD_EXP 31
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 600
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 577: LD_ADDR_VAR 0 3
 581: PUSH
 582: LD_INT 22
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_win_rules = 0 ;
 590: LD_ADDR_EXP 30
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// end else
 598: GO 732
// begin Randomize ;
 600: CALL_OW 10
// def_base_level := 2 ;
 604: LD_ADDR_EXP 1
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_amount_of_people := 2 ;
 612: LD_ADDR_EXP 2
 616: PUSH
 617: LD_INT 2
 619: ST_TO_ADDR
// def_skill_level := 1 ;
 620: LD_ADDR_EXP 3
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// def_starting_resources := 2 ;
 628: LD_ADDR_EXP 4
 632: PUSH
 633: LD_INT 2
 635: ST_TO_ADDR
// def_shipments_density := 50 ;
 636: LD_ADDR_EXP 5
 640: PUSH
 641: LD_INT 50
 643: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 644: LD_ADDR_EXP 6
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 2
 659: ST_TO_ADDR
// def_shared_vision := 1 ;
 660: LD_ADDR_EXP 8
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_morale_flags := 1 ;
 668: LD_ADDR_EXP 9
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_siberite_detection := 1 ;
 676: LD_ADDR_EXP 10
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// def_people_respawning := 2 ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_INT 2
 691: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 692: LD_ADDR_EXP 12
 696: PUSH
 697: LD_INT 3
 699: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 700: LD_ADDR_EXP 13
 704: PUSH
 705: LD_INT 2
 707: ST_TO_ADDR
// def_builduptime := 1 ;
 708: LD_ADDR_EXP 14
 712: PUSH
 713: LD_INT 1
 715: ST_TO_ADDR
// tech_level = 4 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 4
 723: ST_TO_ADDR
// def_win_rules = 0 ;
 724: LD_ADDR_EXP 30
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// end ; if isSGUI then
 732: LD_OWVAR 83
 736: IFFALSE 744
// setMpTechs ( ) else
 738: CALL 9053 0 0
 742: GO 757
// SetMpTechLevel ( tech_level + 1 ) ;
 744: LD_VAR 0 3
 748: PUSH
 749: LD_INT 1
 751: PLUS
 752: PPUSH
 753: CALL 9200 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_INT 0
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 1
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_EXP 1
 780: PUSH
 781: LD_INT 1
 783: PLUS
 784: ARRAY
 785: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 786: LD_ADDR_EXP 18
 790: PUSH
 791: LD_INT 0
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_INT 1
 812: PLUS
 813: ARRAY
 814: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 9
 822: PUSH
 823: LD_INT 12
 825: PUSH
 826: LD_INT 15
 828: PUSH
 829: LD_INT 24
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_EXP 2
 842: PUSH
 843: LD_INT 1
 845: PLUS
 846: ARRAY
 847: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 848: LD_ADDR_EXP 20
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 3
 875: PUSH
 876: LD_INT 1
 878: PLUS
 879: ARRAY
 880: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 881: LD_ADDR_EXP 22
 885: PUSH
 886: LD_INT 0
 888: PUSH
 889: LD_INT 0
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 30
 902: PUSH
 903: LD_INT 0
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 50
 916: PUSH
 917: LD_INT 20
 919: PUSH
 920: LD_INT 0
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 80
 930: PUSH
 931: LD_INT 40
 933: PUSH
 934: LD_INT 20
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: PUSH
 948: LD_EXP 4
 952: PUSH
 953: LD_INT 1
 955: PLUS
 956: ARRAY
 957: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 958: LD_ADDR_EXP 21
 962: PUSH
 963: LD_INT 10
 965: PUSH
 966: EMPTY
 967: LIST
 968: PUSH
 969: LD_INT 7
 971: PUSH
 972: LD_INT 14
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 18
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 10
 998: PUSH
 999: LD_INT 15
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PUSH
1017: LD_EXP 4
1021: PUSH
1022: LD_INT 1
1024: PLUS
1025: ARRAY
1026: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1027: LD_ADDR_EXP 23
1031: PUSH
1032: LD_INT 150
1034: PUSH
1035: LD_EXP 5
1039: MINUS
1040: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1041: LD_ADDR_EXP 27
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 10500
1051: PUSH
1052: LD_INT 6300
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: LD_EXP 11
1064: PUSH
1065: LD_INT 1
1067: PLUS
1068: ARRAY
1069: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1070: LD_ADDR_EXP 28
1074: PUSH
1075: LD_INT 0
1077: PUSH
1078: LD_INT 31500
1080: PUSH
1081: LD_INT 10500
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_EXP 11
1093: PUSH
1094: LD_INT 1
1096: PLUS
1097: ARRAY
1098: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1099: LD_ADDR_EXP 25
1103: PUSH
1104: LD_INT 0
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 3
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 12
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1132: LD_ADDR_EXP 24
1136: PUSH
1137: LD_INT 1
1139: NEG
1140: PUSH
1141: LD_INT 350
1143: PUSH
1144: LD_INT 700
1146: PUSH
1147: LD_INT 1400
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 9
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// battle_flags_id := [ ] ;
1170: LD_ADDR_EXP 44
1174: PUSH
1175: EMPTY
1176: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1177: LD_EXP 13
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: IFFALSE 1197
// siberite_bomb_Delay = 0 else
1187: LD_ADDR_EXP 29
1191: PUSH
1192: LD_INT 0
1194: ST_TO_ADDR
1195: GO 1219
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1197: LD_ADDR_EXP 29
1201: PUSH
1202: LD_EXP 13
1206: PUSH
1207: LD_INT 1
1209: MINUS
1210: PUSH
1211: LD_INT 21000
1213: MUL
1214: PUSH
1215: LD_INT 1
1217: PLUS
1218: ST_TO_ADDR
// end ;
1219: LD_VAR 0 1
1223: RET
// function init_map ; var i , j ; begin
1224: LD_INT 0
1226: PPUSH
1227: PPUSH
1228: PPUSH
// normal_oil_deposits_locations := [ [ 36 , 6 ] , [ 103 , 5 ] , [ 163 , 9 ] , [ 200 , 51 ] , [ 54 , 86 ] , [ 134 , 154 ] , [ 177 , 151 ] , [ 239 , 152 ] ] ;
1229: LD_ADDR_EXP 40
1233: PUSH
1234: LD_INT 36
1236: PUSH
1237: LD_INT 6
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 103
1246: PUSH
1247: LD_INT 5
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 163
1256: PUSH
1257: LD_INT 9
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 200
1266: PUSH
1267: LD_INT 51
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 54
1276: PUSH
1277: LD_INT 86
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 134
1286: PUSH
1287: LD_INT 154
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 177
1296: PUSH
1297: LD_INT 151
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 239
1306: PUSH
1307: LD_INT 152
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 54 , 6 ] , [ 68 , 6 ] , [ 126 , 7 ] , [ 214 , 83 ] , [ 79 , 120 ] , [ 115 , 150 ] , [ 207 , 150 ] , [ 216 , 148 ] ] ;
1324: LD_ADDR_EXP 41
1328: PUSH
1329: LD_INT 54
1331: PUSH
1332: LD_INT 6
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 68
1341: PUSH
1342: LD_INT 6
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 126
1351: PUSH
1352: LD_INT 7
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 214
1361: PUSH
1362: LD_INT 83
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 79
1371: PUSH
1372: LD_INT 120
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 115
1381: PUSH
1382: LD_INT 150
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 207
1391: PUSH
1392: LD_INT 150
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 216
1401: PUSH
1402: LD_INT 148
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 26 , 32 ] , [ 78 , 16 ] , [ 160 , 32 ] , [ 177 , 60 ] , [ 84 , 100 ] , [ 136 , 126 ] , [ 191 , 129 ] , [ 214 , 121 ] ] ;
1419: LD_ADDR_EXP 42
1423: PUSH
1424: LD_INT 26
1426: PUSH
1427: LD_INT 32
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 78
1436: PUSH
1437: LD_INT 16
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 160
1446: PUSH
1447: LD_INT 32
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 177
1456: PUSH
1457: LD_INT 60
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 84
1466: PUSH
1467: LD_INT 100
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 136
1476: PUSH
1477: LD_INT 126
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 191
1486: PUSH
1487: LD_INT 129
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 214
1496: PUSH
1497: LD_INT 121
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: ST_TO_ADDR
// depot_def := [ [ 32 , 17 , 2 ] , [ 95 , 16 , 3 ] , [ 154 , 14 , 3 ] , [ 195 , 58 , 4 ] , [ 65 , 97 , 1 ] , [ 136 , 144 , 5 ] , [ 186 , 144 , 0 ] , [ 234 , 140 , 5 ] ] ;
1514: LD_ADDR_EXP 37
1518: PUSH
1519: LD_INT 32
1521: PUSH
1522: LD_INT 17
1524: PUSH
1525: LD_INT 2
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 95
1535: PUSH
1536: LD_INT 16
1538: PUSH
1539: LD_INT 3
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 154
1549: PUSH
1550: LD_INT 14
1552: PUSH
1553: LD_INT 3
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 195
1563: PUSH
1564: LD_INT 58
1566: PUSH
1567: LD_INT 4
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: PUSH
1575: LD_INT 65
1577: PUSH
1578: LD_INT 97
1580: PUSH
1581: LD_INT 1
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 136
1591: PUSH
1592: LD_INT 144
1594: PUSH
1595: LD_INT 5
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 186
1605: PUSH
1606: LD_INT 144
1608: PUSH
1609: LD_INT 0
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 234
1619: PUSH
1620: LD_INT 140
1622: PUSH
1623: LD_INT 5
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: ST_TO_ADDR
// for i in depot_def do
1641: LD_ADDR_VAR 0 2
1645: PUSH
1646: LD_EXP 37
1650: PUSH
1651: FOR_IN
1652: IFFALSE 1728
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1654: LD_ADDR_EXP 39
1658: PUSH
1659: LD_EXP 39
1663: PUSH
1664: LD_VAR 0 2
1668: PUSH
1669: LD_INT 1
1671: ARRAY
1672: PPUSH
1673: LD_VAR 0 2
1677: PUSH
1678: LD_INT 3
1680: ARRAY
1681: PPUSH
1682: LD_INT 4
1684: NEG
1685: PPUSH
1686: CALL_OW 272
1690: PUSH
1691: LD_VAR 0 2
1695: PUSH
1696: LD_INT 2
1698: ARRAY
1699: PPUSH
1700: LD_VAR 0 2
1704: PUSH
1705: LD_INT 3
1707: ARRAY
1708: PPUSH
1709: LD_INT 4
1711: NEG
1712: PPUSH
1713: CALL_OW 273
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: EMPTY
1723: LIST
1724: ADD
1725: ST_TO_ADDR
1726: GO 1651
1728: POP
1729: POP
// breastworks_def := [ [ [ 54 , 30 , 5 ] , [ 21 , 30 , 0 ] , [ 41 , 33 , 5 ] ] , [ [ 113 , 34 , 5 ] , [ 97 , 35 , 0 ] , [ 82 , 27 , 0 ] ] , [ [ 165 , 32 , 5 ] , [ 150 , 33 , 0 ] , [ 134 , 19 , 0 ] ] , [ [ 196 , 75 , 0 ] , [ 179 , 66 , 0 ] , [ 171 , 48 , 1 ] ] , [ [ 69 , 82 , 3 ] , [ 82 , 93 , 4 ] , [ 90 , 110 , 4 ] ] , [ [ 114 , 130 , 2 ] , [ 123 , 123 , 2 ] , [ 140 , 125 , 3 ] ] , [ [ 187 , 125 , 2 ] , [ 176 , 123 , 2 ] , [ 166 , 125 , 3 ] ] , [ [ 213 , 128 , 2 ] , [ 222 , 122 , 2 ] , [ 234 , 121 , 2 ] ] ] ;
1730: LD_ADDR_EXP 38
1734: PUSH
1735: LD_INT 54
1737: PUSH
1738: LD_INT 30
1740: PUSH
1741: LD_INT 5
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 21
1751: PUSH
1752: LD_INT 30
1754: PUSH
1755: LD_INT 0
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 41
1765: PUSH
1766: LD_INT 33
1768: PUSH
1769: LD_INT 5
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: PUSH
1782: LD_INT 113
1784: PUSH
1785: LD_INT 34
1787: PUSH
1788: LD_INT 5
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 97
1798: PUSH
1799: LD_INT 35
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 82
1812: PUSH
1813: LD_INT 27
1815: PUSH
1816: LD_INT 0
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 165
1831: PUSH
1832: LD_INT 32
1834: PUSH
1835: LD_INT 5
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 150
1845: PUSH
1846: LD_INT 33
1848: PUSH
1849: LD_INT 0
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 134
1859: PUSH
1860: LD_INT 19
1862: PUSH
1863: LD_INT 0
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 196
1878: PUSH
1879: LD_INT 75
1881: PUSH
1882: LD_INT 0
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 179
1892: PUSH
1893: LD_INT 66
1895: PUSH
1896: LD_INT 0
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 171
1906: PUSH
1907: LD_INT 48
1909: PUSH
1910: LD_INT 1
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 69
1925: PUSH
1926: LD_INT 82
1928: PUSH
1929: LD_INT 3
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 82
1939: PUSH
1940: LD_INT 93
1942: PUSH
1943: LD_INT 4
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 90
1953: PUSH
1954: LD_INT 110
1956: PUSH
1957: LD_INT 4
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 114
1972: PUSH
1973: LD_INT 130
1975: PUSH
1976: LD_INT 2
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 123
1986: PUSH
1987: LD_INT 123
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 140
2000: PUSH
2001: LD_INT 125
2003: PUSH
2004: LD_INT 3
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 187
2019: PUSH
2020: LD_INT 125
2022: PUSH
2023: LD_INT 2
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 176
2033: PUSH
2034: LD_INT 123
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: LIST
2044: PUSH
2045: LD_INT 166
2047: PUSH
2048: LD_INT 125
2050: PUSH
2051: LD_INT 3
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 213
2066: PUSH
2067: LD_INT 128
2069: PUSH
2070: LD_INT 2
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: PUSH
2078: LD_INT 222
2080: PUSH
2081: LD_INT 122
2083: PUSH
2084: LD_INT 2
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 234
2094: PUSH
2095: LD_INT 121
2097: PUSH
2098: LD_INT 2
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: ST_TO_ADDR
// for i = 1 to Side_Positions do
2121: LD_ADDR_VAR 0 2
2125: PUSH
2126: DOUBLE
2127: LD_INT 1
2129: DEC
2130: ST_TO_ADDR
2131: LD_EXP 34
2135: PUSH
2136: FOR_TO
2137: IFFALSE 2260
// begin if not Side_Positions [ i ] then
2139: LD_EXP 34
2143: PUSH
2144: LD_VAR 0 2
2148: ARRAY
2149: NOT
2150: IFFALSE 2154
// continue ;
2152: GO 2136
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2154: LD_EXP 40
2158: PUSH
2159: LD_EXP 34
2163: PUSH
2164: LD_VAR 0 2
2168: ARRAY
2169: ARRAY
2170: PUSH
2171: LD_INT 1
2173: ARRAY
2174: PPUSH
2175: LD_EXP 40
2179: PUSH
2180: LD_EXP 34
2184: PUSH
2185: LD_VAR 0 2
2189: ARRAY
2190: ARRAY
2191: PUSH
2192: LD_INT 2
2194: ARRAY
2195: PPUSH
2196: LD_INT 2
2198: PPUSH
2199: CALL_OW 62
// if def_extra_oil_deposits then
2203: LD_EXP 6
2207: IFFALSE 2258
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2209: LD_EXP 41
2213: PUSH
2214: LD_EXP 34
2218: PUSH
2219: LD_VAR 0 2
2223: ARRAY
2224: ARRAY
2225: PUSH
2226: LD_INT 1
2228: ARRAY
2229: PPUSH
2230: LD_EXP 41
2234: PUSH
2235: LD_EXP 34
2239: PUSH
2240: LD_VAR 0 2
2244: ARRAY
2245: ARRAY
2246: PUSH
2247: LD_INT 2
2249: ARRAY
2250: PPUSH
2251: LD_INT 2
2253: PPUSH
2254: CALL_OW 62
// end ;
2258: GO 2136
2260: POP
2261: POP
// if def_extra_sib_deposits then
2262: LD_EXP 7
2266: IFFALSE 2354
// for i = 1 to Side_Positions do
2268: LD_ADDR_VAR 0 2
2272: PUSH
2273: DOUBLE
2274: LD_INT 1
2276: DEC
2277: ST_TO_ADDR
2278: LD_EXP 34
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2352
// begin if not Side_Positions [ i ] then
2286: LD_EXP 34
2290: PUSH
2291: LD_VAR 0 2
2295: ARRAY
2296: NOT
2297: IFFALSE 2301
// continue ;
2299: GO 2283
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2301: LD_EXP 42
2305: PUSH
2306: LD_EXP 34
2310: PUSH
2311: LD_VAR 0 2
2315: ARRAY
2316: ARRAY
2317: PUSH
2318: LD_INT 1
2320: ARRAY
2321: PPUSH
2322: LD_EXP 42
2326: PUSH
2327: LD_EXP 34
2331: PUSH
2332: LD_VAR 0 2
2336: ARRAY
2337: ARRAY
2338: PUSH
2339: LD_INT 2
2341: ARRAY
2342: PPUSH
2343: LD_INT 3
2345: PPUSH
2346: CALL_OW 62
// end ;
2350: GO 2283
2352: POP
2353: POP
// end ;
2354: LD_VAR 0 1
2358: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2359: LD_INT 0
2361: PPUSH
2362: PPUSH
2363: PPUSH
// if not Team_Game then
2364: LD_EXP 36
2368: NOT
2369: IFFALSE 2467
// begin for i = 1 to 8 do
2371: LD_ADDR_VAR 0 2
2375: PUSH
2376: DOUBLE
2377: LD_INT 1
2379: DEC
2380: ST_TO_ADDR
2381: LD_INT 8
2383: PUSH
2384: FOR_TO
2385: IFFALSE 2463
// for j = 1 to 8 do
2387: LD_ADDR_VAR 0 3
2391: PUSH
2392: DOUBLE
2393: LD_INT 1
2395: DEC
2396: ST_TO_ADDR
2397: LD_INT 8
2399: PUSH
2400: FOR_TO
2401: IFFALSE 2459
// if i <> j then
2403: LD_VAR 0 2
2407: PUSH
2408: LD_VAR 0 3
2412: NONEQUAL
2413: IFFALSE 2437
// SetAttitude ( i , j , att_neutral , true ) else
2415: LD_VAR 0 2
2419: PPUSH
2420: LD_VAR 0 3
2424: PPUSH
2425: LD_INT 0
2427: PPUSH
2428: LD_INT 1
2430: PPUSH
2431: CALL_OW 80
2435: GO 2457
// SetAttitude ( i , j , att_friend , true ) ;
2437: LD_VAR 0 2
2441: PPUSH
2442: LD_VAR 0 3
2446: PPUSH
2447: LD_INT 1
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL_OW 80
2457: GO 2400
2459: POP
2460: POP
2461: GO 2384
2463: POP
2464: POP
// end else
2465: GO 2642
// begin if def_shared_vision then
2467: LD_EXP 8
2471: IFFALSE 2536
// begin for i in Teams do
2473: LD_ADDR_VAR 0 2
2477: PUSH
2478: LD_EXP 32
2482: PUSH
2483: FOR_IN
2484: IFFALSE 2534
// for j = 2 to i do
2486: LD_ADDR_VAR 0 3
2490: PUSH
2491: DOUBLE
2492: LD_INT 2
2494: DEC
2495: ST_TO_ADDR
2496: LD_VAR 0 2
2500: PUSH
2501: FOR_TO
2502: IFFALSE 2530
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2504: LD_VAR 0 2
2508: PUSH
2509: LD_VAR 0 3
2513: ARRAY
2514: PPUSH
2515: LD_VAR 0 2
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: PPUSH
2524: CALL_OW 343
2528: GO 2501
2530: POP
2531: POP
2532: GO 2483
2534: POP
2535: POP
// end ; for i = 1 to 8 do
2536: LD_ADDR_VAR 0 2
2540: PUSH
2541: DOUBLE
2542: LD_INT 1
2544: DEC
2545: ST_TO_ADDR
2546: LD_INT 8
2548: PUSH
2549: FOR_TO
2550: IFFALSE 2640
// for j = 1 to 8 do
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: DOUBLE
2558: LD_INT 1
2560: DEC
2561: ST_TO_ADDR
2562: LD_INT 8
2564: PUSH
2565: FOR_TO
2566: IFFALSE 2636
// if Side_Teams [ i ] = Side_Teams [ j ] then
2568: LD_EXP 31
2572: PUSH
2573: LD_VAR 0 2
2577: ARRAY
2578: PUSH
2579: LD_EXP 31
2583: PUSH
2584: LD_VAR 0 3
2588: ARRAY
2589: EQUAL
2590: IFFALSE 2614
// SetAttitude ( i , j , att_friend , true ) else
2592: LD_VAR 0 2
2596: PPUSH
2597: LD_VAR 0 3
2601: PPUSH
2602: LD_INT 1
2604: PPUSH
2605: LD_INT 1
2607: PPUSH
2608: CALL_OW 80
2612: GO 2634
// SetAttitude ( i , j , att_enemy , true ) ;
2614: LD_VAR 0 2
2618: PPUSH
2619: LD_VAR 0 3
2623: PPUSH
2624: LD_INT 2
2626: PPUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 80
2634: GO 2565
2636: POP
2637: POP
2638: GO 2549
2640: POP
2641: POP
// end ; end ;
2642: LD_VAR 0 1
2646: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2647: LD_INT 0
2649: PPUSH
2650: PPUSH
2651: PPUSH
2652: PPUSH
// result := [ ] ;
2653: LD_ADDR_VAR 0 7
2657: PUSH
2658: EMPTY
2659: ST_TO_ADDR
// for i := 1 to count do
2660: LD_ADDR_VAR 0 8
2664: PUSH
2665: DOUBLE
2666: LD_INT 1
2668: DEC
2669: ST_TO_ADDR
2670: LD_VAR 0 1
2674: PUSH
2675: FOR_TO
2676: IFFALSE 3094
// begin uc_direction := Rand ( 0 , 5 ) ;
2678: LD_ADDR_OWVAR 24
2682: PUSH
2683: LD_INT 0
2685: PPUSH
2686: LD_INT 5
2688: PPUSH
2689: CALL_OW 12
2693: ST_TO_ADDR
// if commander then
2694: LD_LOC 1
2698: IFFALSE 2807
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2700: LD_ADDR_OWVAR 26
2704: PUSH
2705: LD_OWVAR 19
2709: PUSH
2710: LD_OWVAR 20
2714: ARRAY
2715: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2716: LD_INT 1
2718: PPUSH
2719: LD_INT 2
2721: PPUSH
2722: CALL_OW 12
2726: PPUSH
2727: LD_VAR 0 2
2731: PPUSH
2732: LD_EXP 20
2736: PUSH
2737: LD_INT 2
2739: PLUS
2740: PPUSH
2741: CALL_OW 380
// hc_importance := 105 ;
2745: LD_ADDR_OWVAR 32
2749: PUSH
2750: LD_INT 105
2752: ST_TO_ADDR
// commander := false ;
2753: LD_ADDR_LOC 1
2757: PUSH
2758: LD_INT 0
2760: ST_TO_ADDR
// if Multiplayer then
2761: LD_OWVAR 4
2765: IFFALSE 2805
// begin hc_gallery := MULTIAVATARS ;
2767: LD_ADDR_OWVAR 33
2771: PUSH
2772: LD_STRING MULTIAVATARS
2774: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2775: LD_ADDR_OWVAR 34
2779: PUSH
2780: LD_OWVAR 20
2784: PPUSH
2785: CALL_OW 525
2789: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2790: LD_ADDR_OWVAR 27
2794: PUSH
2795: LD_OWVAR 20
2799: PPUSH
2800: CALL_OW 526
2804: ST_TO_ADDR
// end ; end else
2805: GO 2870
// begin hc_name :=  ;
2807: LD_ADDR_OWVAR 26
2811: PUSH
2812: LD_STRING 
2814: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2815: LD_INT 1
2817: PPUSH
2818: LD_INT 2
2820: PPUSH
2821: CALL_OW 12
2825: PPUSH
2826: LD_VAR 0 2
2830: PPUSH
2831: LD_EXP 20
2835: PPUSH
2836: CALL_OW 380
// hc_importance := 0 ;
2840: LD_ADDR_OWVAR 32
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// if Multiplayer then
2848: LD_OWVAR 4
2852: IFFALSE 2870
// begin hc_gallery :=  ;
2854: LD_ADDR_OWVAR 33
2858: PUSH
2859: LD_STRING 
2861: ST_TO_ADDR
// hc_face_number := 0 ;
2862: LD_ADDR_OWVAR 34
2866: PUSH
2867: LD_INT 0
2869: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2870: LD_ADDR_VAR 0 10
2874: PUSH
2875: CALL_OW 44
2879: ST_TO_ADDR
// if global_defined then
2880: LD_LOC 3
2884: IFFALSE 3024
// begin if ( cl = class_soldier ) then
2886: LD_VAR 0 2
2890: PUSH
2891: LD_INT 1
2893: EQUAL
2894: IFFALSE 2914
// j := i + soldiers_created else
2896: LD_ADDR_VAR 0 9
2900: PUSH
2901: LD_VAR 0 8
2905: PUSH
2906: LD_LOC 4
2910: PLUS
2911: ST_TO_ADDR
2912: GO 2924
// j := i ;
2914: LD_ADDR_VAR 0 9
2918: PUSH
2919: LD_VAR 0 8
2923: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2924: LD_LOC 2
2928: PUSH
2929: LD_VAR 0 2
2933: ARRAY
2934: PUSH
2935: LD_VAR 0 9
2939: ARRAY
2940: PPUSH
2941: LD_VAR 0 10
2945: PPUSH
2946: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2950: LD_VAR 0 10
2954: PPUSH
2955: LD_INT 2
2957: PPUSH
2958: LD_LOC 2
2962: PUSH
2963: LD_VAR 0 2
2967: ARRAY
2968: PUSH
2969: LD_VAR 0 9
2973: ARRAY
2974: PPUSH
2975: LD_INT 2
2977: PPUSH
2978: CALL_OW 260
2982: PPUSH
2983: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2987: LD_VAR 0 10
2991: PPUSH
2992: LD_INT 1
2994: PPUSH
2995: LD_LOC 2
2999: PUSH
3000: LD_VAR 0 2
3004: ARRAY
3005: PUSH
3006: LD_VAR 0 9
3010: ARRAY
3011: PPUSH
3012: LD_INT 1
3014: PPUSH
3015: CALL_OW 260
3019: PPUSH
3020: CALL_OW 239
// end ; if building then
3024: LD_VAR 0 6
3028: IFFALSE 3046
// PlaceHumanInUnit ( un , building ) else
3030: LD_VAR 0 10
3034: PPUSH
3035: LD_VAR 0 6
3039: PPUSH
3040: CALL_OW 52
3044: GO 3073
// PlaceUnitXYR ( un , x , y , r , false ) ;
3046: LD_VAR 0 10
3050: PPUSH
3051: LD_VAR 0 3
3055: PPUSH
3056: LD_VAR 0 4
3060: PPUSH
3061: LD_VAR 0 5
3065: PPUSH
3066: LD_INT 0
3068: PPUSH
3069: CALL_OW 50
// result := result ^ [ un ] ;
3073: LD_ADDR_VAR 0 7
3077: PUSH
3078: LD_VAR 0 7
3082: PUSH
3083: LD_VAR 0 10
3087: PUSH
3088: EMPTY
3089: LIST
3090: ADD
3091: ST_TO_ADDR
// end ;
3092: GO 2675
3094: POP
3095: POP
// if not global_defined then
3096: LD_LOC 3
3100: NOT
3101: IFFALSE 3179
// if ( global_units >= cl ) then
3103: LD_LOC 2
3107: PUSH
3108: LD_VAR 0 2
3112: GREATEREQUAL
3113: IFFALSE 3154
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3115: LD_ADDR_LOC 2
3119: PUSH
3120: LD_LOC 2
3124: PPUSH
3125: LD_VAR 0 2
3129: PPUSH
3130: LD_LOC 2
3134: PUSH
3135: LD_VAR 0 2
3139: ARRAY
3140: PUSH
3141: LD_VAR 0 7
3145: ADD
3146: PPUSH
3147: CALL_OW 1
3151: ST_TO_ADDR
3152: GO 3179
// global_units := Replace ( global_units , cl , result ) ;
3154: LD_ADDR_LOC 2
3158: PUSH
3159: LD_LOC 2
3163: PPUSH
3164: LD_VAR 0 2
3168: PPUSH
3169: LD_VAR 0 7
3173: PPUSH
3174: CALL_OW 1
3178: ST_TO_ADDR
// if commander then
3179: LD_LOC 1
3183: IFFALSE 3230
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3185: LD_ADDR_EXP 45
3189: PUSH
3190: LD_EXP 45
3194: PPUSH
3195: LD_OWVAR 20
3199: PPUSH
3200: LD_EXP 45
3204: PUSH
3205: LD_OWVAR 20
3209: ARRAY
3210: PUSH
3211: LD_VAR 0 10
3215: ADD
3216: PPUSH
3217: CALL_OW 1
3221: ST_TO_ADDR
// commander := false ;
3222: LD_ADDR_LOC 1
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// end ; end ;
3230: LD_VAR 0 7
3234: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3235: LD_INT 0
3237: PPUSH
3238: PPUSH
3239: PPUSH
3240: PPUSH
3241: PPUSH
3242: PPUSH
3243: PPUSH
3244: PPUSH
3245: PPUSH
// if side in [ 0 , 9 ] then
3246: LD_VAR 0 1
3250: PUSH
3251: LD_INT 0
3253: PUSH
3254: LD_INT 9
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: IN
3261: IFFALSE 3265
// exit ;
3263: GO 4315
// pos := Side_Positions [ side ] ;
3265: LD_ADDR_VAR 0 3
3269: PUSH
3270: LD_EXP 34
3274: PUSH
3275: LD_VAR 0 1
3279: ARRAY
3280: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3281: LD_ADDR_OWVAR 21
3285: PUSH
3286: LD_EXP 35
3290: PUSH
3291: LD_VAR 0 1
3295: ARRAY
3296: ST_TO_ADDR
// uc_side := side ;
3297: LD_ADDR_OWVAR 20
3301: PUSH
3302: LD_VAR 0 1
3306: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3307: LD_ADDR_VAR 0 4
3311: PUSH
3312: LD_EXP 37
3316: PUSH
3317: LD_VAR 0 3
3321: ARRAY
3322: PUSH
3323: LD_INT 1
3325: ARRAY
3326: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3327: LD_ADDR_VAR 0 5
3331: PUSH
3332: LD_EXP 37
3336: PUSH
3337: LD_VAR 0 3
3341: ARRAY
3342: PUSH
3343: LD_INT 2
3345: ARRAY
3346: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3347: LD_ADDR_VAR 0 6
3351: PUSH
3352: LD_EXP 37
3356: PUSH
3357: LD_VAR 0 3
3361: ARRAY
3362: PUSH
3363: LD_INT 3
3365: ARRAY
3366: ST_TO_ADDR
// if is_depot then
3367: LD_EXP 17
3371: IFFALSE 3504
// begin bc_type = b_depot ;
3373: LD_ADDR_OWVAR 42
3377: PUSH
3378: LD_INT 0
3380: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3381: LD_ADDR_VAR 0 10
3385: PUSH
3386: LD_VAR 0 4
3390: PPUSH
3391: LD_VAR 0 5
3395: PPUSH
3396: LD_VAR 0 6
3400: PPUSH
3401: CALL_OW 47
3405: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3406: LD_VAR 0 10
3410: PPUSH
3411: LD_STRING @
3413: PUSH
3414: LD_VAR 0 1
3418: STR
3419: PPUSH
3420: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3424: LD_VAR 0 10
3428: PPUSH
3429: CALL_OW 274
3433: PPUSH
3434: LD_INT 1
3436: PPUSH
3437: LD_EXP 22
3441: PUSH
3442: LD_INT 1
3444: ARRAY
3445: PPUSH
3446: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3450: LD_VAR 0 10
3454: PPUSH
3455: CALL_OW 274
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: LD_EXP 22
3467: PUSH
3468: LD_INT 2
3470: ARRAY
3471: PPUSH
3472: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3476: LD_VAR 0 10
3480: PPUSH
3481: CALL_OW 274
3485: PPUSH
3486: LD_INT 3
3488: PPUSH
3489: LD_EXP 22
3493: PUSH
3494: LD_INT 3
3496: ARRAY
3497: PPUSH
3498: CALL_OW 277
// end else
3502: GO 3648
// begin for i := 1 to 3 do
3504: LD_ADDR_VAR 0 7
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_INT 3
3516: PUSH
3517: FOR_TO
3518: IFFALSE 3646
// begin r := starting_resources [ i ] ;
3520: LD_ADDR_VAR 0 8
3524: PUSH
3525: LD_EXP 22
3529: PUSH
3530: LD_VAR 0 7
3534: ARRAY
3535: ST_TO_ADDR
// while r >= 10 do
3536: LD_VAR 0 8
3540: PUSH
3541: LD_INT 10
3543: GREATEREQUAL
3544: IFFALSE 3644
// if r > 50 then
3546: LD_VAR 0 8
3550: PUSH
3551: LD_INT 50
3553: GREATER
3554: IFFALSE 3600
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3556: LD_VAR 0 7
3560: PPUSH
3561: LD_INT 5
3563: PPUSH
3564: LD_VAR 0 4
3568: PPUSH
3569: LD_VAR 0 5
3573: PPUSH
3574: LD_INT 4
3576: PPUSH
3577: LD_INT 0
3579: PPUSH
3580: CALL_OW 60
// r := r - 50 ;
3584: LD_ADDR_VAR 0 8
3588: PUSH
3589: LD_VAR 0 8
3593: PUSH
3594: LD_INT 50
3596: MINUS
3597: ST_TO_ADDR
// end else
3598: GO 3642
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3600: LD_VAR 0 7
3604: PPUSH
3605: LD_VAR 0 8
3609: PUSH
3610: LD_INT 10
3612: DIV
3613: PPUSH
3614: LD_VAR 0 4
3618: PPUSH
3619: LD_VAR 0 5
3623: PPUSH
3624: LD_INT 4
3626: PPUSH
3627: LD_INT 0
3629: PPUSH
3630: CALL_OW 60
// r := 0 ;
3634: LD_ADDR_VAR 0 8
3638: PUSH
3639: LD_INT 0
3641: ST_TO_ADDR
// end ;
3642: GO 3536
// end ;
3644: GO 3517
3646: POP
3647: POP
// end ; for r in starting_crates do
3648: LD_ADDR_VAR 0 8
3652: PUSH
3653: LD_EXP 21
3657: PUSH
3658: FOR_IN
3659: IFFALSE 3691
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3661: LD_INT 1
3663: PPUSH
3664: LD_INT 5
3666: PPUSH
3667: LD_VAR 0 4
3671: PPUSH
3672: LD_VAR 0 5
3676: PPUSH
3677: LD_VAR 0 8
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 60
3689: GO 3658
3691: POP
3692: POP
// if def_morale_flags then
3693: LD_EXP 9
3697: IFFALSE 3836
// begin x := start_def [ pos ] [ 1 ] ;
3699: LD_ADDR_VAR 0 4
3703: PUSH
3704: LD_EXP 39
3708: PUSH
3709: LD_VAR 0 3
3713: ARRAY
3714: PUSH
3715: LD_INT 1
3717: ARRAY
3718: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3719: LD_ADDR_VAR 0 5
3723: PUSH
3724: LD_EXP 39
3728: PUSH
3729: LD_VAR 0 3
3733: ARRAY
3734: PUSH
3735: LD_INT 2
3737: ARRAY
3738: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3739: LD_VAR 0 4
3743: PPUSH
3744: LD_VAR 0 5
3748: PPUSH
3749: LD_INT 12
3751: PPUSH
3752: LD_INT 2
3754: PPUSH
3755: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3759: LD_ADDR_EXP 44
3763: PUSH
3764: LD_EXP 44
3768: PUSH
3769: LD_VAR 0 1
3773: PPUSH
3774: LD_VAR 0 4
3778: PPUSH
3779: LD_VAR 0 5
3783: PPUSH
3784: LD_INT 1
3786: PUSH
3787: LD_INT 100
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 2
3796: PUSH
3797: LD_INT 50
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 3
3806: PUSH
3807: LD_INT 20
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 20
3816: PUSH
3817: LD_INT 100
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: PPUSH
3830: CALL_OW 418
3834: ADD
3835: ST_TO_ADDR
// end ; commander := true ;
3836: LD_ADDR_LOC 1
3840: PUSH
3841: LD_INT 1
3843: ST_TO_ADDR
// soldiers_created := 0 ;
3844: LD_ADDR_LOC 4
3848: PUSH
3849: LD_INT 0
3851: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3852: LD_ADDR_VAR 0 7
3856: PUSH
3857: DOUBLE
3858: LD_INT 1
3860: DEC
3861: ST_TO_ADDR
3862: LD_EXP 18
3866: PUSH
3867: FOR_TO
3868: IFFALSE 4021
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3870: LD_ADDR_VAR 0 4
3874: PUSH
3875: LD_EXP 38
3879: PUSH
3880: LD_VAR 0 3
3884: ARRAY
3885: PUSH
3886: LD_VAR 0 7
3890: ARRAY
3891: PUSH
3892: LD_INT 1
3894: ARRAY
3895: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3896: LD_ADDR_VAR 0 5
3900: PUSH
3901: LD_EXP 38
3905: PUSH
3906: LD_VAR 0 3
3910: ARRAY
3911: PUSH
3912: LD_VAR 0 7
3916: ARRAY
3917: PUSH
3918: LD_INT 2
3920: ARRAY
3921: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3922: LD_ADDR_VAR 0 6
3926: PUSH
3927: LD_EXP 38
3931: PUSH
3932: LD_VAR 0 3
3936: ARRAY
3937: PUSH
3938: LD_VAR 0 7
3942: ARRAY
3943: PUSH
3944: LD_INT 3
3946: ARRAY
3947: ST_TO_ADDR
// bc_type := b_breastwork ;
3948: LD_ADDR_OWVAR 42
3952: PUSH
3953: LD_INT 31
3955: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3956: LD_ADDR_VAR 0 9
3960: PUSH
3961: LD_VAR 0 4
3965: PPUSH
3966: LD_VAR 0 5
3970: PPUSH
3971: LD_VAR 0 6
3975: PPUSH
3976: CALL_OW 47
3980: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3981: LD_INT 1
3983: PPUSH
3984: LD_INT 1
3986: PPUSH
3987: LD_INT 0
3989: PPUSH
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: LD_VAR 0 9
4000: PPUSH
4001: CALL 2647 0 6
// soldiers_created := soldiers_created + 1 ;
4005: LD_ADDR_LOC 4
4009: PUSH
4010: LD_LOC 4
4014: PUSH
4015: LD_INT 1
4017: PLUS
4018: ST_TO_ADDR
// end ;
4019: GO 3867
4021: POP
4022: POP
// x := start_def [ pos ] [ 1 ] ;
4023: LD_ADDR_VAR 0 4
4027: PUSH
4028: LD_EXP 39
4032: PUSH
4033: LD_VAR 0 3
4037: ARRAY
4038: PUSH
4039: LD_INT 1
4041: ARRAY
4042: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4043: LD_ADDR_VAR 0 5
4047: PUSH
4048: LD_EXP 39
4052: PUSH
4053: LD_VAR 0 3
4057: ARRAY
4058: PUSH
4059: LD_INT 2
4061: ARRAY
4062: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4063: LD_LOC 8
4067: PUSH
4068: LD_EXP 18
4072: MINUS
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: LD_VAR 0 4
4081: PPUSH
4082: LD_VAR 0 5
4086: PPUSH
4087: LD_INT 5
4089: PPUSH
4090: LD_INT 0
4092: PPUSH
4093: CALL 2647 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4097: LD_LOC 5
4101: PPUSH
4102: LD_INT 2
4104: PPUSH
4105: LD_VAR 0 4
4109: PPUSH
4110: LD_VAR 0 5
4114: PPUSH
4115: LD_INT 5
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL 2647 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4125: LD_LOC 7
4129: PPUSH
4130: LD_INT 3
4132: PPUSH
4133: LD_VAR 0 4
4137: PPUSH
4138: LD_VAR 0 5
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: LD_INT 0
4148: PPUSH
4149: CALL 2647 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4153: LD_LOC 6
4157: PPUSH
4158: LD_INT 4
4160: PPUSH
4161: LD_VAR 0 4
4165: PPUSH
4166: LD_VAR 0 5
4170: PPUSH
4171: LD_INT 5
4173: PPUSH
4174: LD_INT 0
4176: PPUSH
4177: CALL 2647 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4181: LD_EXP 10
4185: PUSH
4186: LD_INT 20
4188: PPUSH
4189: LD_VAR 0 1
4193: PPUSH
4194: CALL_OW 321
4198: PUSH
4199: LD_INT 1
4201: EQUAL
4202: AND
4203: IFFALSE 4220
// SetTech ( tech_SibDet , side , state_researched ) ;
4205: LD_INT 20
4207: PPUSH
4208: LD_VAR 0 1
4212: PPUSH
4213: LD_INT 2
4215: PPUSH
4216: CALL_OW 322
// if def_siberite_bomb = 1 then
4220: LD_EXP 13
4224: PUSH
4225: LD_INT 1
4227: EQUAL
4228: IFFALSE 4262
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4230: LD_INT 25
4232: PPUSH
4233: LD_VAR 0 1
4237: PPUSH
4238: LD_INT 1
4240: PPUSH
4241: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4245: LD_INT 73
4247: PPUSH
4248: LD_VAR 0 1
4252: PPUSH
4253: LD_INT 1
4255: PPUSH
4256: CALL_OW 322
// end else
4260: GO 4292
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4262: LD_INT 25
4264: PPUSH
4265: LD_VAR 0 1
4269: PPUSH
4270: LD_INT 0
4272: PPUSH
4273: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4277: LD_INT 73
4279: PPUSH
4280: LD_VAR 0 1
4284: PPUSH
4285: LD_INT 0
4287: PPUSH
4288: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4292: LD_INT 24
4294: PPUSH
4295: LD_VAR 0 1
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL_OW 322
// global_defined := true ;
4307: LD_ADDR_LOC 3
4311: PUSH
4312: LD_INT 1
4314: ST_TO_ADDR
// end ;
4315: LD_VAR 0 2
4319: RET
// function prepare_sides ; var i ; begin
4320: LD_INT 0
4322: PPUSH
4323: PPUSH
// global_units := [ ] ;
4324: LD_ADDR_LOC 2
4328: PUSH
4329: EMPTY
4330: ST_TO_ADDR
// global_defined := false ;
4331: LD_ADDR_LOC 3
4335: PUSH
4336: LD_INT 0
4338: ST_TO_ADDR
// CountClassMembers ;
4339: CALL 4389 0 0
// for i := 1 to 8 do
4343: LD_ADDR_VAR 0 2
4347: PUSH
4348: DOUBLE
4349: LD_INT 1
4351: DEC
4352: ST_TO_ADDR
4353: LD_INT 8
4355: PUSH
4356: FOR_TO
4357: IFFALSE 4382
// if Side_Positions [ i ] then
4359: LD_EXP 34
4363: PUSH
4364: LD_VAR 0 2
4368: ARRAY
4369: IFFALSE 4380
// prepare_side ( i ) ;
4371: LD_VAR 0 2
4375: PPUSH
4376: CALL 3235 0 1
4380: GO 4356
4382: POP
4383: POP
// end ;
4384: LD_VAR 0 1
4388: RET
// function CountClassMembers ; var Mode ; begin
4389: LD_INT 0
4391: PPUSH
4392: PPUSH
// if No_Mechs then
4393: LD_EXP 15
4397: IFFALSE 4409
// Mode := 2 else
4399: LD_ADDR_VAR 0 2
4403: PUSH
4404: LD_INT 2
4406: ST_TO_ADDR
4407: GO 4417
// Mode := 1 ;
4409: LD_ADDR_VAR 0 2
4413: PUSH
4414: LD_INT 1
4416: ST_TO_ADDR
// neng := number_of_people ;
4417: LD_ADDR_LOC 5
4421: PUSH
4422: LD_EXP 19
4426: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4427: LD_ADDR_LOC 8
4431: PUSH
4432: LD_LOC 5
4436: PUSH
4437: LD_INT 4
4439: PUSH
4440: LD_INT 3
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: PUSH
4447: LD_VAR 0 2
4451: ARRAY
4452: DIV
4453: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4454: LD_LOC 8
4458: PUSH
4459: LD_EXP 18
4463: LESS
4464: IFFALSE 4476
// nsol := number_of_breastworks ;
4466: LD_ADDR_LOC 8
4470: PUSH
4471: LD_EXP 18
4475: ST_TO_ADDR
// neng := neng - nsol ;
4476: LD_ADDR_LOC 5
4480: PUSH
4481: LD_LOC 5
4485: PUSH
4486: LD_LOC 8
4490: MINUS
4491: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4492: LD_ADDR_LOC 6
4496: PUSH
4497: LD_LOC 5
4501: PUSH
4502: LD_INT 3
4504: PUSH
4505: LD_INT 2
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_VAR 0 2
4516: ARRAY
4517: DIV
4518: ST_TO_ADDR
// if ( nsci < 1 ) then
4519: LD_LOC 6
4523: PUSH
4524: LD_INT 1
4526: LESS
4527: IFFALSE 4537
// nsci := 1 ;
4529: LD_ADDR_LOC 6
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// neng := neng - nsci ;
4537: LD_ADDR_LOC 5
4541: PUSH
4542: LD_LOC 5
4546: PUSH
4547: LD_LOC 6
4551: MINUS
4552: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4553: LD_ADDR_LOC 7
4557: PUSH
4558: LD_LOC 5
4562: PUSH
4563: LD_INT 2
4565: DIV
4566: PUSH
4567: LD_INT 0
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: PUSH
4574: LD_VAR 0 2
4578: ARRAY
4579: ST_TO_ADDR
// neng := neng - nmech ;
4580: LD_ADDR_LOC 5
4584: PUSH
4585: LD_LOC 5
4589: PUSH
4590: LD_LOC 7
4594: MINUS
4595: ST_TO_ADDR
// if ( neng < 1 ) then
4596: LD_LOC 5
4600: PUSH
4601: LD_INT 1
4603: LESS
4604: IFFALSE 4614
// neng := 1 ;
4606: LD_ADDR_LOC 5
4610: PUSH
4611: LD_INT 1
4613: ST_TO_ADDR
// end ;
4614: LD_VAR 0 1
4618: RET
// starting begin disable ( 98 ) ;
4619: LD_INT 98
4621: DISABLE_MARKED
// disable ( 99 ) ;
4622: LD_INT 99
4624: DISABLE_MARKED
// disable ( 400 ) ;
4625: LD_INT 400
4627: DISABLE_MARKED
// disable ( 401 ) ;
4628: LD_INT 401
4630: DISABLE_MARKED
// mp_selectmsg := true ;
4631: LD_ADDR_OWVAR 13
4635: PUSH
4636: LD_INT 1
4638: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4639: CALL 68 0 0
// init_map ;
4643: CALL 1224 0 0
// init_respawning ;
4647: CALL 13777 0 0
// set_shared_visions_and_alliances ;
4651: CALL 2359 0 0
// ResetFog ;
4655: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4659: LD_OWVAR 2
4663: PPUSH
4664: CALL_OW 520
// AnimateTrees ( true ) ;
4668: LD_INT 1
4670: PPUSH
4671: CALL_OW 573
// prepare_sides ;
4675: CALL 4320 0 0
// Init_Win_Condition ;
4679: CALL 7758 0 0
// ShowTimer ;
4683: CALL 7336 0 0
// music_nat := Side_Nations [ your_side ] ;
4687: LD_ADDR_OWVAR 71
4691: PUSH
4692: LD_EXP 35
4696: PUSH
4697: LD_OWVAR 2
4701: ARRAY
4702: ST_TO_ADDR
// if IAmSpec then
4703: CALL_OW 531
4707: IFFALSE 4731
// begin fogoff ( true ) ;
4709: LD_INT 1
4711: PPUSH
4712: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4716: LD_INT 130
4718: PPUSH
4719: LD_INT 100
4721: PPUSH
4722: CALL_OW 86
// enable ( 400 ) ;
4726: LD_INT 400
4728: ENABLE_MARKED
// end else
4729: GO 4777
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4731: LD_EXP 39
4735: PUSH
4736: LD_EXP 34
4740: PUSH
4741: LD_OWVAR 2
4745: ARRAY
4746: ARRAY
4747: PUSH
4748: LD_INT 1
4750: ARRAY
4751: PPUSH
4752: LD_EXP 39
4756: PUSH
4757: LD_EXP 34
4761: PUSH
4762: LD_OWVAR 2
4766: ARRAY
4767: ARRAY
4768: PUSH
4769: LD_INT 2
4771: ARRAY
4772: PPUSH
4773: CALL_OW 86
// end ; InitApeman ;
4777: CALL 5854 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
4781: LD_ADDR_EXP 55
4785: PUSH
4786: LD_INT 9
4788: PUSH
4789: LD_INT 10
4791: PUSH
4792: LD_INT 11
4794: PUSH
4795: LD_INT 12
4797: PUSH
4798: LD_INT 13
4800: PUSH
4801: LD_INT 14
4803: PUSH
4804: LD_INT 15
4806: PUSH
4807: LD_INT 16
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: ST_TO_ADDR
// BeginBuildUp ;
4820: CALL 14271 0 0
// end ;
4824: END
// every 0 0$1 do
4825: GO 4827
4827: DISABLE
// if ( def_siberite_bomb > 1 ) then
4828: LD_EXP 13
4832: PUSH
4833: LD_INT 1
4835: GREATER
4836: IFFALSE 4851
// begin wait ( siberite_bomb_Delay ) ;
4838: LD_EXP 29
4842: PPUSH
4843: CALL_OW 67
// EnableSibFiss ;
4847: CALL 4852 0 0
// end ;
4851: END
// function EnableSibFiss ; var i ; begin
4852: LD_INT 0
4854: PPUSH
4855: PPUSH
// for i := 1 to 8 do
4856: LD_ADDR_VAR 0 2
4860: PUSH
4861: DOUBLE
4862: LD_INT 1
4864: DEC
4865: ST_TO_ADDR
4866: LD_INT 8
4868: PUSH
4869: FOR_TO
4870: IFFALSE 4916
// if Side_Positions [ i ] then
4872: LD_EXP 34
4876: PUSH
4877: LD_VAR 0 2
4881: ARRAY
4882: IFFALSE 4914
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4884: LD_INT 25
4886: PPUSH
4887: LD_VAR 0 2
4891: PPUSH
4892: LD_INT 1
4894: PPUSH
4895: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4899: LD_INT 73
4901: PPUSH
4902: LD_VAR 0 2
4906: PPUSH
4907: LD_INT 1
4909: PPUSH
4910: CALL_OW 322
// end ;
4914: GO 4869
4916: POP
4917: POP
// end ; end_of_file
4918: LD_VAR 0 1
4922: RET
// every 0 0$25 + 0 0$1.0 do
4923: GO 4925
4925: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4926: LD_INT 20
4928: PPUSH
4929: LD_INT 1
4931: PPUSH
4932: CALL_OW 287
4936: PUSH
4937: LD_INT 200
4939: PUSH
4940: LD_EXP 23
4944: MINUS
4945: PUSH
4946: LD_INT 50
4948: DIVREAL
4949: PUSH
4950: LD_INT 5
4952: MUL
4953: LESS
4954: IFFALSE 4977
// CreateCratesArea ( Rand ( 3 , 4 ) , Between1 , true ) ;
4956: LD_INT 3
4958: PPUSH
4959: LD_INT 4
4961: PPUSH
4962: CALL_OW 12
4966: PPUSH
4967: LD_INT 20
4969: PPUSH
4970: LD_INT 1
4972: PPUSH
4973: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4977: LD_INT 21
4979: PPUSH
4980: LD_INT 1
4982: PPUSH
4983: CALL_OW 287
4987: PUSH
4988: LD_INT 200
4990: PUSH
4991: LD_EXP 23
4995: MINUS
4996: PUSH
4997: LD_INT 50
4999: DIVREAL
5000: PUSH
5001: LD_INT 5
5003: MUL
5004: LESS
5005: IFFALSE 5028
// CreateCratesArea ( Rand ( 3 , 4 ) , Between2 , true ) ;
5007: LD_INT 3
5009: PPUSH
5010: LD_INT 4
5012: PPUSH
5013: CALL_OW 12
5017: PPUSH
5018: LD_INT 21
5020: PPUSH
5021: LD_INT 1
5023: PPUSH
5024: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5028: LD_INT 22
5030: PPUSH
5031: LD_INT 1
5033: PPUSH
5034: CALL_OW 287
5038: PUSH
5039: LD_INT 200
5041: PUSH
5042: LD_EXP 23
5046: MINUS
5047: PUSH
5048: LD_INT 50
5050: DIVREAL
5051: PUSH
5052: LD_INT 5
5054: MUL
5055: LESS
5056: IFFALSE 5079
// CreateCratesArea ( Rand ( 3 , 4 ) , Between3 , true ) ;
5058: LD_INT 3
5060: PPUSH
5061: LD_INT 4
5063: PPUSH
5064: CALL_OW 12
5068: PPUSH
5069: LD_INT 22
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5079: LD_INT 23
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: CALL_OW 287
5089: PUSH
5090: LD_INT 200
5092: PUSH
5093: LD_EXP 23
5097: MINUS
5098: PUSH
5099: LD_INT 50
5101: DIVREAL
5102: PUSH
5103: LD_INT 5
5105: MUL
5106: LESS
5107: IFFALSE 5130
// CreateCratesArea ( Rand ( 3 , 4 ) , Between4 , true ) ;
5109: LD_INT 3
5111: PPUSH
5112: LD_INT 4
5114: PPUSH
5115: CALL_OW 12
5119: PPUSH
5120: LD_INT 23
5122: PPUSH
5123: LD_INT 1
5125: PPUSH
5126: CALL_OW 55
// if GetResourceArea ( Center1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5130: LD_INT 18
5132: PPUSH
5133: LD_INT 1
5135: PPUSH
5136: CALL_OW 287
5140: PUSH
5141: LD_INT 200
5143: PUSH
5144: LD_EXP 23
5148: MINUS
5149: PUSH
5150: LD_INT 25
5152: DIVREAL
5153: PUSH
5154: LD_INT 5
5156: MUL
5157: LESS
5158: IFFALSE 5173
// CreateCratesArea ( 5 , Center1 , true ) ;
5160: LD_INT 5
5162: PPUSH
5163: LD_INT 18
5165: PPUSH
5166: LD_INT 1
5168: PPUSH
5169: CALL_OW 55
// if GetResourceArea ( Center2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5173: LD_INT 19
5175: PPUSH
5176: LD_INT 1
5178: PPUSH
5179: CALL_OW 287
5183: PUSH
5184: LD_INT 200
5186: PUSH
5187: LD_EXP 23
5191: MINUS
5192: PUSH
5193: LD_INT 25
5195: DIVREAL
5196: PUSH
5197: LD_INT 5
5199: MUL
5200: LESS
5201: IFFALSE 5216
// CreateCratesArea ( 5 , Center2 , true ) ;
5203: LD_INT 5
5205: PPUSH
5206: LD_INT 19
5208: PPUSH
5209: LD_INT 1
5211: PPUSH
5212: CALL_OW 55
// enable ;
5216: ENABLE
// end ;
5217: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5218: GO 5220
5220: DISABLE
5221: LD_INT 0
5223: PPUSH
5224: PPUSH
// begin case tick of 1 .. 1 1$0 :
5225: LD_OWVAR 1
5229: PUSH
5230: LD_INT 1
5232: DOUBLE
5233: GREATEREQUAL
5234: IFFALSE 5242
5236: LD_INT 2100
5238: DOUBLE
5239: LESSEQUAL
5240: IFTRUE 5244
5242: GO 5272
5244: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5245: LD_EXP 23
5249: PUSH
5250: LD_INT 100
5252: DIVREAL
5253: PUSH
5254: LD_INT 525
5256: PPUSH
5257: LD_INT 1050
5259: PPUSH
5260: CALL_OW 12
5264: MUL
5265: PPUSH
5266: CALL_OW 67
5270: GO 5574
5272: LD_INT 2100
5274: PUSH
5275: LD_INT 1
5277: PLUS
5278: DOUBLE
5279: GREATEREQUAL
5280: IFFALSE 5288
5282: LD_INT 10500
5284: DOUBLE
5285: LESSEQUAL
5286: IFTRUE 5290
5288: GO 5318
5290: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5291: LD_EXP 23
5295: PUSH
5296: LD_INT 100
5298: DIVREAL
5299: PUSH
5300: LD_INT 1050
5302: PPUSH
5303: LD_INT 1750
5305: PPUSH
5306: CALL_OW 12
5310: MUL
5311: PPUSH
5312: CALL_OW 67
5316: GO 5574
5318: LD_INT 10500
5320: PUSH
5321: LD_INT 1
5323: PLUS
5324: DOUBLE
5325: GREATEREQUAL
5326: IFFALSE 5334
5328: LD_INT 21000
5330: DOUBLE
5331: LESSEQUAL
5332: IFTRUE 5336
5334: GO 5364
5336: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5337: LD_EXP 23
5341: PUSH
5342: LD_INT 100
5344: DIVREAL
5345: PUSH
5346: LD_INT 1750
5348: PPUSH
5349: LD_INT 2100
5351: PPUSH
5352: CALL_OW 12
5356: MUL
5357: PPUSH
5358: CALL_OW 67
5362: GO 5574
5364: LD_INT 21000
5366: PUSH
5367: LD_INT 1
5369: PLUS
5370: DOUBLE
5371: GREATEREQUAL
5372: IFFALSE 5380
5374: LD_INT 42000
5376: DOUBLE
5377: LESSEQUAL
5378: IFTRUE 5382
5380: GO 5410
5382: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5383: LD_EXP 23
5387: PUSH
5388: LD_INT 100
5390: DIVREAL
5391: PUSH
5392: LD_INT 2100
5394: PPUSH
5395: LD_INT 2275
5397: PPUSH
5398: CALL_OW 12
5402: MUL
5403: PPUSH
5404: CALL_OW 67
5408: GO 5574
5410: LD_INT 42000
5412: PUSH
5413: LD_INT 1
5415: PLUS
5416: DOUBLE
5417: GREATEREQUAL
5418: IFFALSE 5426
5420: LD_INT 63000
5422: DOUBLE
5423: LESSEQUAL
5424: IFTRUE 5428
5426: GO 5456
5428: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5429: LD_EXP 23
5433: PUSH
5434: LD_INT 100
5436: DIVREAL
5437: PUSH
5438: LD_INT 2275
5440: PPUSH
5441: LD_INT 2450
5443: PPUSH
5444: CALL_OW 12
5448: MUL
5449: PPUSH
5450: CALL_OW 67
5454: GO 5574
5456: LD_INT 63000
5458: PUSH
5459: LD_INT 1
5461: PLUS
5462: DOUBLE
5463: GREATEREQUAL
5464: IFFALSE 5472
5466: LD_INT 105000
5468: DOUBLE
5469: LESSEQUAL
5470: IFTRUE 5474
5472: GO 5502
5474: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5475: LD_EXP 23
5479: PUSH
5480: LD_INT 100
5482: DIVREAL
5483: PUSH
5484: LD_INT 2450
5486: PPUSH
5487: LD_INT 2800
5489: PPUSH
5490: CALL_OW 12
5494: MUL
5495: PPUSH
5496: CALL_OW 67
5500: GO 5574
5502: LD_INT 105000
5504: PUSH
5505: LD_INT 1
5507: PLUS
5508: DOUBLE
5509: GREATEREQUAL
5510: IFFALSE 5518
5512: LD_INT 630000
5514: DOUBLE
5515: LESSEQUAL
5516: IFTRUE 5520
5518: GO 5548
5520: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5521: LD_EXP 23
5525: PUSH
5526: LD_INT 100
5528: DIVREAL
5529: PUSH
5530: LD_INT 2800
5532: PPUSH
5533: LD_INT 3500
5535: PPUSH
5536: CALL_OW 12
5540: MUL
5541: PPUSH
5542: CALL_OW 67
5546: GO 5574
5548: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5549: LD_EXP 23
5553: PUSH
5554: LD_INT 100
5556: DIVREAL
5557: PUSH
5558: LD_INT 3500
5560: PPUSH
5561: LD_INT 3850
5563: PPUSH
5564: CALL_OW 12
5568: MUL
5569: PPUSH
5570: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5574: LD_ADDR_VAR 0 2
5578: PUSH
5579: LD_INT 3
5581: PPUSH
5582: LD_INT 5
5584: PPUSH
5585: CALL_OW 12
5589: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5590: LD_ADDR_VAR 0 1
5594: PUSH
5595: LD_EXP 34
5599: PUSH
5600: LD_INT 0
5602: PUSH
5603: EMPTY
5604: LIST
5605: DIFF
5606: PUSH
5607: FOR_IN
5608: IFFALSE 5657
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5610: LD_VAR 0 2
5614: PPUSH
5615: LD_EXP 39
5619: PUSH
5620: LD_VAR 0 1
5624: ARRAY
5625: PUSH
5626: LD_INT 1
5628: ARRAY
5629: PPUSH
5630: LD_EXP 39
5634: PUSH
5635: LD_VAR 0 1
5639: ARRAY
5640: PUSH
5641: LD_INT 2
5643: ARRAY
5644: PPUSH
5645: LD_INT 20
5647: PPUSH
5648: LD_INT 1
5650: PPUSH
5651: CALL_OW 56
5655: GO 5607
5657: POP
5658: POP
// enable ;
5659: ENABLE
// end ; end_of_file
5660: PPOPN 2
5662: END
// every 20 20$00 trigger apemanNumber do
5663: LD_EXP 46
5667: IFFALSE 5700
5669: GO 5671
5671: DISABLE
// begin enable ;
5672: ENABLE
// if apeLevel >= 8 then
5673: LD_EXP 51
5677: PUSH
5678: LD_INT 8
5680: GREATEREQUAL
5681: IFFALSE 5686
// disable else
5683: DISABLE
5684: GO 5700
// apeLevel := apeLevel + 1 ;
5686: LD_ADDR_EXP 51
5690: PUSH
5691: LD_EXP 51
5695: PUSH
5696: LD_INT 1
5698: PLUS
5699: ST_TO_ADDR
// end ;
5700: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5701: LD_EXP 46
5705: PUSH
5706: LD_EXP 47
5710: LESS
5711: IFFALSE 5851
5713: GO 5715
5715: DISABLE
5716: LD_INT 0
5718: PPUSH
5719: PPUSH
5720: PPUSH
5721: PPUSH
// begin enable ;
5722: ENABLE
// for i := 1 to apemanPos do
5723: LD_ADDR_VAR 0 1
5727: PUSH
5728: DOUBLE
5729: LD_INT 1
5731: DEC
5732: ST_TO_ADDR
5733: LD_EXP 49
5737: PUSH
5738: FOR_TO
5739: IFFALSE 5849
// begin if apemanPlayerCount [ i ] then
5741: LD_EXP 50
5745: PUSH
5746: LD_VAR 0 1
5750: ARRAY
5751: IFFALSE 5847
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5753: LD_EXP 50
5757: PUSH
5758: LD_VAR 0 1
5762: ARRAY
5763: PUSH
5764: LD_EXP 49
5768: PUSH
5769: LD_VAR 0 1
5773: ARRAY
5774: GREATER
5775: IFFALSE 5847
// begin ape := PrepareApeman ;
5777: LD_ADDR_VAR 0 2
5781: PUSH
5782: CALL 6370 0 0
5786: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5787: LD_VAR 0 2
5791: PPUSH
5792: LD_EXP 52
5796: PUSH
5797: LD_VAR 0 1
5801: ARRAY
5802: PPUSH
5803: LD_INT 0
5805: PPUSH
5806: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5810: LD_ADDR_EXP 49
5814: PUSH
5815: LD_EXP 49
5819: PPUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: LD_EXP 49
5829: PUSH
5830: LD_VAR 0 1
5834: ARRAY
5835: PUSH
5836: LD_VAR 0 2
5840: UNION
5841: PPUSH
5842: CALL_OW 1
5846: ST_TO_ADDR
// end ; end ; end ;
5847: GO 5738
5849: POP
5850: POP
// end ;
5851: PPOPN 4
5853: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5854: LD_INT 0
5856: PPUSH
5857: PPUSH
5858: PPUSH
5859: PPUSH
5860: PPUSH
5861: PPUSH
5862: PPUSH
// playersAmount := 0 ;
5863: LD_ADDR_VAR 0 3
5867: PUSH
5868: LD_INT 0
5870: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
5871: LD_ADDR_VAR 0 7
5875: PUSH
5876: LD_INT 1
5878: PUSH
5879: LD_INT 2
5881: PUSH
5882: LD_INT 3
5884: PUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 5
5890: PUSH
5891: LD_INT 6
5893: PUSH
5894: LD_INT 7
5896: PUSH
5897: LD_INT 8
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5910: LD_ADDR_EXP 52
5914: PUSH
5915: LD_INT 0
5917: PUSH
5918: LD_INT 0
5920: PUSH
5921: LD_INT 0
5923: PUSH
5924: LD_INT 0
5926: PUSH
5927: LD_INT 0
5929: PUSH
5930: LD_INT 0
5932: PUSH
5933: LD_INT 0
5935: PUSH
5936: LD_INT 0
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: ST_TO_ADDR
// for j = 1 to Side_Positions do
5949: LD_ADDR_VAR 0 4
5953: PUSH
5954: DOUBLE
5955: LD_INT 1
5957: DEC
5958: ST_TO_ADDR
5959: LD_EXP 34
5963: PUSH
5964: FOR_TO
5965: IFFALSE 6032
// if Side_Positions [ j ] then
5967: LD_EXP 34
5971: PUSH
5972: LD_VAR 0 4
5976: ARRAY
5977: IFFALSE 6030
// begin playersAmount := playersAmount + 1 ;
5979: LD_ADDR_VAR 0 3
5983: PUSH
5984: LD_VAR 0 3
5988: PUSH
5989: LD_INT 1
5991: PLUS
5992: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5993: LD_ADDR_EXP 52
5997: PUSH
5998: LD_EXP 52
6002: PPUSH
6003: LD_VAR 0 4
6007: PPUSH
6008: LD_VAR 0 7
6012: PUSH
6013: LD_EXP 34
6017: PUSH
6018: LD_VAR 0 4
6022: ARRAY
6023: ARRAY
6024: PPUSH
6025: CALL_OW 1
6029: ST_TO_ADDR
// end ;
6030: GO 5964
6032: POP
6033: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6034: LD_ADDR_EXP 48
6038: PUSH
6039: LD_INT 3
6041: PUSH
6042: LD_EXP 25
6046: MUL
6047: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6048: LD_ADDR_EXP 46
6052: PUSH
6053: LD_VAR 0 3
6057: PUSH
6058: LD_EXP 48
6062: MUL
6063: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6064: LD_ADDR_EXP 47
6068: PUSH
6069: LD_EXP 46
6073: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6074: LD_ADDR_EXP 49
6078: PUSH
6079: LD_INT 0
6081: PUSH
6082: LD_INT 0
6084: PUSH
6085: LD_INT 0
6087: PUSH
6088: LD_INT 0
6090: PUSH
6091: LD_INT 0
6093: PUSH
6094: LD_INT 0
6096: PUSH
6097: LD_INT 0
6099: PUSH
6100: LD_INT 0
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6113: LD_ADDR_EXP 50
6117: PUSH
6118: LD_INT 0
6120: PUSH
6121: LD_INT 0
6123: PUSH
6124: LD_INT 0
6126: PUSH
6127: LD_INT 0
6129: PUSH
6130: LD_INT 0
6132: PUSH
6133: LD_INT 0
6135: PUSH
6136: LD_INT 0
6138: PUSH
6139: LD_INT 0
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: ST_TO_ADDR
// apeLevel := 1 ;
6152: LD_ADDR_EXP 51
6156: PUSH
6157: LD_INT 1
6159: ST_TO_ADDR
// if not apemanNumber then
6160: LD_EXP 46
6164: NOT
6165: IFFALSE 6169
// exit ;
6167: GO 6365
// for i := 1 to apemanPerPlayer do
6169: LD_ADDR_VAR 0 2
6173: PUSH
6174: DOUBLE
6175: LD_INT 1
6177: DEC
6178: ST_TO_ADDR
6179: LD_EXP 48
6183: PUSH
6184: FOR_TO
6185: IFFALSE 6363
// begin for j := 1 to Side_Positions do
6187: LD_ADDR_VAR 0 4
6191: PUSH
6192: DOUBLE
6193: LD_INT 1
6195: DEC
6196: ST_TO_ADDR
6197: LD_EXP 34
6201: PUSH
6202: FOR_TO
6203: IFFALSE 6359
// if Side_Positions [ j ] then
6205: LD_EXP 34
6209: PUSH
6210: LD_VAR 0 4
6214: ARRAY
6215: IFFALSE 6357
// begin pos := Side_Positions [ j ] ;
6217: LD_ADDR_VAR 0 6
6221: PUSH
6222: LD_EXP 34
6226: PUSH
6227: LD_VAR 0 4
6231: ARRAY
6232: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6233: LD_ADDR_EXP 50
6237: PUSH
6238: LD_EXP 50
6242: PPUSH
6243: LD_VAR 0 4
6247: PPUSH
6248: LD_EXP 50
6252: PUSH
6253: LD_VAR 0 4
6257: ARRAY
6258: PUSH
6259: LD_INT 1
6261: PLUS
6262: PPUSH
6263: CALL_OW 1
6267: ST_TO_ADDR
// ape := PrepareApeman ;
6268: LD_ADDR_VAR 0 5
6272: PUSH
6273: CALL 6370 0 0
6277: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6278: LD_ADDR_EXP 49
6282: PUSH
6283: LD_EXP 49
6287: PPUSH
6288: LD_VAR 0 4
6292: PPUSH
6293: LD_EXP 49
6297: PUSH
6298: LD_VAR 0 4
6302: ARRAY
6303: PPUSH
6304: LD_EXP 49
6308: PUSH
6309: LD_VAR 0 4
6313: ARRAY
6314: PUSH
6315: LD_INT 1
6317: PLUS
6318: PPUSH
6319: LD_VAR 0 5
6323: PPUSH
6324: CALL_OW 1
6328: PPUSH
6329: CALL_OW 1
6333: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6334: LD_VAR 0 5
6338: PPUSH
6339: LD_EXP 52
6343: PUSH
6344: LD_VAR 0 4
6348: ARRAY
6349: PPUSH
6350: LD_INT 0
6352: PPUSH
6353: CALL_OW 49
// end ;
6357: GO 6202
6359: POP
6360: POP
// end ;
6361: GO 6184
6363: POP
6364: POP
// end ;
6365: LD_VAR 0 1
6369: RET
// export function PrepareApeman ; var bonus ; begin
6370: LD_INT 0
6372: PPUSH
6373: PPUSH
// uc_side := 0 ;
6374: LD_ADDR_OWVAR 20
6378: PUSH
6379: LD_INT 0
6381: ST_TO_ADDR
// uc_nation := 0 ;
6382: LD_ADDR_OWVAR 21
6386: PUSH
6387: LD_INT 0
6389: ST_TO_ADDR
// InitHc ;
6390: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6394: LD_ADDR_VAR 0 2
6398: PUSH
6399: LD_INT 1
6401: NEG
6402: PUSH
6403: LD_INT 0
6405: PUSH
6406: LD_INT 1
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: PUSH
6414: LD_OWVAR 1
6418: PUSH
6419: LD_INT 3
6421: MOD
6422: PUSH
6423: LD_INT 1
6425: PLUS
6426: ARRAY
6427: ST_TO_ADDR
// hc_class := class_apeman ;
6428: LD_ADDR_OWVAR 28
6432: PUSH
6433: LD_INT 12
6435: ST_TO_ADDR
// hc_gallery :=  ;
6436: LD_ADDR_OWVAR 33
6440: PUSH
6441: LD_STRING 
6443: ST_TO_ADDR
// hc_name :=  ;
6444: LD_ADDR_OWVAR 26
6448: PUSH
6449: LD_STRING 
6451: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6452: LD_ADDR_OWVAR 31
6456: PUSH
6457: LD_EXP 51
6461: PUSH
6462: LD_VAR 0 2
6466: PLUS
6467: PUSH
6468: LD_EXP 51
6472: PUSH
6473: LD_VAR 0 2
6477: PLUS
6478: PUSH
6479: LD_EXP 51
6483: PUSH
6484: LD_VAR 0 2
6488: PLUS
6489: PUSH
6490: LD_EXP 51
6494: PUSH
6495: LD_VAR 0 2
6499: PLUS
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6507: LD_ADDR_OWVAR 35
6511: PUSH
6512: LD_INT 10
6514: PUSH
6515: LD_VAR 0 2
6519: MUL
6520: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6521: LD_ADDR_OWVAR 29
6525: PUSH
6526: LD_INT 12
6528: PUSH
6529: LD_INT 10
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: ST_TO_ADDR
// result := CreateHuman ;
6536: LD_ADDR_VAR 0 1
6540: PUSH
6541: CALL_OW 44
6545: ST_TO_ADDR
// end ;
6546: LD_VAR 0 1
6550: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6551: LD_INT 0
6553: PPUSH
6554: PPUSH
6555: PPUSH
// if not ape then
6556: LD_VAR 0 1
6560: NOT
6561: IFFALSE 6565
// exit ;
6563: GO 6690
// side := GetSide ( ape ) ;
6565: LD_ADDR_VAR 0 3
6569: PUSH
6570: LD_VAR 0 1
6574: PPUSH
6575: CALL_OW 255
6579: ST_TO_ADDR
// if not side then
6580: LD_VAR 0 3
6584: NOT
6585: IFFALSE 6639
// begin for i = 1 to apemanPos do
6587: LD_ADDR_VAR 0 4
6591: PUSH
6592: DOUBLE
6593: LD_INT 1
6595: DEC
6596: ST_TO_ADDR
6597: LD_EXP 49
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6637
// if ape in apemanPos [ i ] then
6605: LD_VAR 0 1
6609: PUSH
6610: LD_EXP 49
6614: PUSH
6615: LD_VAR 0 4
6619: ARRAY
6620: IN
6621: IFFALSE 6635
// begin side := i ;
6623: LD_ADDR_VAR 0 3
6627: PUSH
6628: LD_VAR 0 4
6632: ST_TO_ADDR
// break ;
6633: GO 6637
// end ;
6635: GO 6602
6637: POP
6638: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6639: LD_ADDR_EXP 49
6643: PUSH
6644: LD_EXP 49
6648: PPUSH
6649: LD_VAR 0 3
6653: PPUSH
6654: LD_EXP 49
6658: PUSH
6659: LD_VAR 0 3
6663: ARRAY
6664: PUSH
6665: LD_VAR 0 1
6669: DIFF
6670: PPUSH
6671: CALL_OW 1
6675: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6676: LD_ADDR_EXP 46
6680: PUSH
6681: LD_EXP 46
6685: PUSH
6686: LD_INT 1
6688: MINUS
6689: ST_TO_ADDR
// end ; end_of_file
6690: LD_VAR 0 2
6694: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6695: LD_VAR 0 1
6699: PPUSH
6700: CALL_OW 266
6704: PUSH
6705: LD_INT 0
6707: PUSH
6708: LD_INT 1
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: IN
6715: IFFALSE 6740
// SetBName ( b , @ & GetSide ( b ) ) ;
6717: LD_VAR 0 1
6721: PPUSH
6722: LD_STRING @
6724: PUSH
6725: LD_VAR 0 1
6729: PPUSH
6730: CALL_OW 255
6734: STR
6735: PPUSH
6736: CALL_OW 500
// end ;
6740: PPOPN 2
6742: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6743: LD_VAR 0 1
6747: PPUSH
6748: CALL_OW 266
6752: PUSH
6753: LD_INT 0
6755: PUSH
6756: LD_INT 1
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: IN
6763: IFFALSE 6788
// SetBName ( b , @ & GetSide ( b ) ) ;
6765: LD_VAR 0 1
6769: PPUSH
6770: LD_STRING @
6772: PUSH
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 255
6782: STR
6783: PPUSH
6784: CALL_OW 500
// end ;
6788: PPOPN 3
6790: END
// on VehicleConstructed ( veh , fac ) do var side ;
6791: LD_INT 0
6793: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6794: LD_VAR 0 1
6798: PPUSH
6799: CALL_OW 263
6803: PUSH
6804: LD_INT 5
6806: EQUAL
6807: IFFALSE 6949
// begin side := GetSide ( veh ) ;
6809: LD_ADDR_VAR 0 3
6813: PUSH
6814: LD_VAR 0 1
6818: PPUSH
6819: CALL_OW 255
6823: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6824: LD_ADDR_EXP 49
6828: PUSH
6829: LD_EXP 49
6833: PPUSH
6834: LD_VAR 0 3
6838: PPUSH
6839: LD_EXP 49
6843: PUSH
6844: LD_VAR 0 3
6848: ARRAY
6849: PPUSH
6850: LD_INT 52
6852: PUSH
6853: EMPTY
6854: LIST
6855: PPUSH
6856: CALL_OW 72
6860: PUSH
6861: LD_INT 22
6863: PUSH
6864: LD_VAR 0 3
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: LD_INT 2
6875: PUSH
6876: LD_INT 33
6878: PUSH
6879: LD_INT 5
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: LD_INT 25
6888: PUSH
6889: LD_INT 12
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 25
6898: PUSH
6899: LD_INT 15
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 25
6908: PUSH
6909: LD_INT 16
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 25
6918: PUSH
6919: LD_INT 17
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PPUSH
6938: CALL_OW 69
6942: UNION
6943: PPUSH
6944: CALL_OW 1
6948: ST_TO_ADDR
// end ; end ;
6949: PPOPN 3
6951: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6952: LD_INT 0
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6958: LD_VAR 0 1
6962: PPUSH
6963: CALL_OW 257
6967: PUSH
6968: LD_INT 12
6970: PUSH
6971: LD_INT 15
6973: PUSH
6974: LD_INT 17
6976: PUSH
6977: LD_INT 16
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: IN
6986: PUSH
6987: LD_VAR 0 1
6991: PPUSH
6992: CALL_OW 263
6996: PUSH
6997: LD_INT 5
6999: EQUAL
7000: OR
7001: IFFALSE 7012
// ApeKilled ( j ) ;
7003: LD_VAR 0 1
7007: PPUSH
7008: CALL 6551 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7012: LD_VAR 0 1
7016: PPUSH
7017: CALL_OW 266
7021: PUSH
7022: LD_INT 0
7024: PUSH
7025: LD_INT 1
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: IN
7032: IFFALSE 7114
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7034: LD_ADDR_VAR 0 4
7038: PUSH
7039: LD_EXP 34
7043: PUSH
7044: LD_VAR 0 1
7048: PPUSH
7049: CALL_OW 255
7053: ARRAY
7054: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7055: LD_ADDR_VAR 0 2
7059: PUSH
7060: LD_EXP 39
7064: PUSH
7065: LD_VAR 0 4
7069: ARRAY
7070: PUSH
7071: LD_INT 1
7073: ARRAY
7074: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7075: LD_ADDR_VAR 0 3
7079: PUSH
7080: LD_EXP 39
7084: PUSH
7085: LD_VAR 0 4
7089: ARRAY
7090: PUSH
7091: LD_INT 2
7093: ARRAY
7094: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7095: LD_VAR 0 2
7099: PPUSH
7100: LD_VAR 0 3
7104: PPUSH
7105: CALL_OW 420
7109: PPUSH
7110: CALL_OW 419
// end ; end ;
7114: PPOPN 5
7116: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7117: LD_VAR 0 1
7121: PPUSH
7122: LD_VAR 0 2
7126: PPUSH
7127: LD_VAR 0 3
7131: PPUSH
7132: LD_OWVAR 2
7136: PPUSH
7137: CALL 7519 0 4
7141: PPOPN 3
7143: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7144: LD_INT 0
7146: PPUSH
7147: PPUSH
// for un in battle_flags_id do
7148: LD_ADDR_VAR 0 2
7152: PUSH
7153: LD_EXP 44
7157: PUSH
7158: FOR_IN
7159: IFFALSE 7234
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7161: LD_VAR 0 2
7165: PPUSH
7166: LD_INT 1
7168: PUSH
7169: LD_LOC 9
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 2
7180: PUSH
7181: LD_LOC 9
7185: PUSH
7186: LD_INT 2
7188: DIV
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 3
7196: PUSH
7197: LD_LOC 9
7201: PUSH
7202: LD_INT 5
7204: DIV
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: LD_INT 20
7212: PUSH
7213: LD_LOC 9
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: PPUSH
7228: CALL_OW 423
7232: GO 7158
7234: POP
7235: POP
// end ;
7236: LD_VAR 0 1
7240: RET
// every 1 do var un ;
7241: GO 7243
7243: DISABLE
7244: LD_INT 0
7246: PPUSH
// begin if not def_morale_flags then
7247: LD_EXP 9
7251: NOT
7252: IFFALSE 7256
// exit ;
7254: GO 7333
// if not morale_decreasing_time then
7256: LD_EXP 24
7260: NOT
7261: IFFALSE 7265
// exit ;
7263: GO 7333
// strength = 100 ;
7265: LD_ADDR_LOC 9
7269: PUSH
7270: LD_INT 100
7272: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7273: LD_EXP 24
7277: PPUSH
7278: CALL_OW 67
// strength := strength - 1 ;
7282: LD_ADDR_LOC 9
7286: PUSH
7287: LD_LOC 9
7291: PUSH
7292: LD_INT 1
7294: MINUS
7295: ST_TO_ADDR
// Update_Flags ;
7296: CALL 7144 0 0
// until not strength ;
7300: LD_LOC 9
7304: NOT
7305: IFFALSE 7273
// for un in battle_flags_id do
7307: LD_ADDR_VAR 0 1
7311: PUSH
7312: LD_EXP 44
7316: PUSH
7317: FOR_IN
7318: IFFALSE 7331
// KillBattleFlag ( un ) ;
7320: LD_VAR 0 1
7324: PPUSH
7325: CALL_OW 419
7329: GO 7317
7331: POP
7332: POP
// end ; end_of_file
7333: PPOPN 1
7335: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7336: LD_INT 0
7338: PPUSH
7339: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7340: LD_ADDR_VAR 0 2
7344: PUSH
7345: LD_STRING #Multi1x1-Time
7347: PUSH
7348: LD_OWVAR 1
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: ST_TO_ADDR
// if WaitServerStrings then
7357: LD_EXP 54
7361: IFFALSE 7379
// AllStrings = AllStrings ^ WaitServerStrings ;
7363: LD_ADDR_VAR 0 2
7367: PUSH
7368: LD_VAR 0 2
7372: PUSH
7373: LD_EXP 54
7377: ADD
7378: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7379: LD_INT 0
7381: PUSH
7382: LD_EXP 29
7386: PUSH
7387: LD_OWVAR 1
7391: MINUS
7392: LESSEQUAL
7393: IFFALSE 7424
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7395: LD_ADDR_VAR 0 2
7399: PUSH
7400: LD_VAR 0 2
7404: PUSH
7405: LD_STRING #allowedsibbomb
7407: PUSH
7408: LD_EXP 29
7412: PUSH
7413: LD_OWVAR 1
7417: MINUS
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: ADD
7423: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7424: LD_INT 0
7426: PUSH
7427: LD_EXP 57
7431: PUSH
7432: LD_OWVAR 1
7436: MINUS
7437: LESSEQUAL
7438: IFFALSE 7469
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7440: LD_ADDR_VAR 0 2
7444: PUSH
7445: LD_VAR 0 2
7449: PUSH
7450: LD_STRING #builduptime
7452: PUSH
7453: LD_EXP 57
7457: PUSH
7458: LD_OWVAR 1
7462: MINUS
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: ADD
7468: ST_TO_ADDR
// if ( ExtraStrings ) then
7469: LD_EXP 53
7473: IFFALSE 7495
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7475: LD_ADDR_VAR 0 2
7479: PUSH
7480: LD_VAR 0 2
7484: PUSH
7485: LD_STRING 
7487: ADD
7488: PUSH
7489: LD_EXP 53
7493: ADD
7494: ST_TO_ADDR
// Display_Strings := AllStrings ;
7495: LD_ADDR_OWVAR 47
7499: PUSH
7500: LD_VAR 0 2
7504: ST_TO_ADDR
// end ;
7505: LD_VAR 0 1
7509: RET
// every 0 0$1 do
7510: GO 7512
7512: DISABLE
// begin ShowTimer ;
7513: CALL 7336 0 0
// enable ;
7517: ENABLE
// end ; end_of_file
7518: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7519: LD_INT 0
7521: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 255
7531: PUSH
7532: LD_VAR 0 4
7536: EQUAL
7537: IFFALSE 7556
// begin SetAchievement ( ACH_RAD ) ;
7539: LD_STRING ACH_RAD
7541: PPUSH
7542: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7546: LD_STRING ACH_NL
7548: PPUSH
7549: LD_INT 1
7551: PPUSH
7552: CALL_OW 564
// end end ;
7556: LD_VAR 0 5
7560: RET
// export function SA_Win ( side ) ; begin
7561: LD_INT 0
7563: PPUSH
// case side of 1 :
7564: LD_VAR 0 1
7568: PUSH
7569: LD_INT 1
7571: DOUBLE
7572: EQUAL
7573: IFTRUE 7577
7575: GO 7590
7577: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7578: LD_STRING ACH_AH
7580: PPUSH
7581: LD_INT 1
7583: PPUSH
7584: CALL_OW 564
7588: GO 7753
7590: LD_INT 2
7592: DOUBLE
7593: EQUAL
7594: IFTRUE 7598
7596: GO 7611
7598: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7599: LD_STRING ACH_E
7601: PPUSH
7602: LD_INT 1
7604: PPUSH
7605: CALL_OW 564
7609: GO 7753
7611: LD_INT 3
7613: DOUBLE
7614: EQUAL
7615: IFTRUE 7619
7617: GO 7632
7619: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7620: LD_STRING ACH_OOL
7622: PPUSH
7623: LD_INT 1
7625: PPUSH
7626: CALL_OW 564
7630: GO 7753
7632: LD_INT 1
7634: PUSH
7635: LD_INT 2
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: DOUBLE
7642: EQUAL
7643: IFTRUE 7647
7645: GO 7672
7647: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7648: LD_STRING ACH_AH
7650: PPUSH
7651: LD_REAL  5.00000000000000E-0001
7654: PPUSH
7655: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7659: LD_STRING ACH_E
7661: PPUSH
7662: LD_REAL  5.00000000000000E-0001
7665: PPUSH
7666: CALL_OW 564
// end ; [ 2 , 3 ] :
7670: GO 7753
7672: LD_INT 2
7674: PUSH
7675: LD_INT 3
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: DOUBLE
7682: EQUAL
7683: IFTRUE 7687
7685: GO 7712
7687: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7688: LD_STRING ACH_OOL
7690: PPUSH
7691: LD_REAL  5.00000000000000E-0001
7694: PPUSH
7695: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7699: LD_STRING ACH_E
7701: PPUSH
7702: LD_REAL  5.00000000000000E-0001
7705: PPUSH
7706: CALL_OW 564
// end ; [ 3 , 1 ] :
7710: GO 7753
7712: LD_INT 3
7714: PUSH
7715: LD_INT 1
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: DOUBLE
7722: EQUAL
7723: IFTRUE 7727
7725: GO 7752
7727: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7728: LD_STRING ACH_AH
7730: PPUSH
7731: LD_REAL  5.00000000000000E-0001
7734: PPUSH
7735: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7739: LD_STRING ACH_OOL
7741: PPUSH
7742: LD_REAL  5.00000000000000E-0001
7745: PPUSH
7746: CALL_OW 564
// end ; end ;
7750: GO 7753
7752: POP
// end ; end_of_file
7753: LD_VAR 0 2
7757: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7758: LD_INT 0
7760: PPUSH
7761: PPUSH
// enable ( 98 ) ;
7762: LD_INT 98
7764: ENABLE_MARKED
// GameEnded = false ;
7765: LD_ADDR_LOC 15
7769: PUSH
7770: LD_INT 0
7772: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7773: LD_ADDR_LOC 14
7777: PUSH
7778: LD_INT 0
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: LD_INT 0
7786: PUSH
7787: LD_INT 0
7789: PUSH
7790: LD_INT 0
7792: PUSH
7793: LD_INT 0
7795: PUSH
7796: LD_INT 0
7798: PUSH
7799: LD_INT 0
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: ST_TO_ADDR
// unfoged = false ;
7812: LD_ADDR_LOC 16
7816: PUSH
7817: LD_INT 0
7819: ST_TO_ADDR
// defeated_specs := [ ] ;
7820: LD_ADDR_LOC 17
7824: PUSH
7825: EMPTY
7826: ST_TO_ADDR
// for i = 1 to side_positions do
7827: LD_ADDR_VAR 0 2
7831: PUSH
7832: DOUBLE
7833: LD_INT 1
7835: DEC
7836: ST_TO_ADDR
7837: LD_EXP 34
7841: PUSH
7842: FOR_TO
7843: IFFALSE 7883
// if not side_positions [ i ] then
7845: LD_EXP 34
7849: PUSH
7850: LD_VAR 0 2
7854: ARRAY
7855: NOT
7856: IFFALSE 7881
// defeated = replace ( defeated , i , true ) ;
7858: LD_ADDR_LOC 14
7862: PUSH
7863: LD_LOC 14
7867: PPUSH
7868: LD_VAR 0 2
7872: PPUSH
7873: LD_INT 1
7875: PPUSH
7876: CALL_OW 1
7880: ST_TO_ADDR
7881: GO 7842
7883: POP
7884: POP
// end ;
7885: LD_VAR 0 1
7889: RET
// function CanWinLoose ; begin
7890: LD_INT 0
7892: PPUSH
// Result := true ;
7893: LD_ADDR_VAR 0 1
7897: PUSH
7898: LD_INT 1
7900: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7901: CALL_OW 518
7905: PUSH
7906: CALL_OW 519
7910: PUSH
7911: LD_INT 0
7913: GREATER
7914: AND
7915: IFFALSE 7925
// Result := false ;
7917: LD_ADDR_VAR 0 1
7921: PUSH
7922: LD_INT 0
7924: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7925: CALL_OW 531
7929: PUSH
7930: CALL_OW 519
7934: PUSH
7935: LD_INT 1
7937: GREATER
7938: AND
7939: IFFALSE 7949
// Result := false ;
7941: LD_ADDR_VAR 0 1
7945: PUSH
7946: LD_INT 0
7948: ST_TO_ADDR
// end ;
7949: LD_VAR 0 1
7953: RET
// export function HasPower ( i ) ; var k , h ; begin
7954: LD_INT 0
7956: PPUSH
7957: PPUSH
7958: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7959: LD_VAR 0 1
7963: PPUSH
7964: CALL_OW 108
7968: NOT
7969: PUSH
7970: LD_EXP 33
7974: PUSH
7975: LD_VAR 0 1
7979: ARRAY
7980: NOT
7981: AND
7982: PUSH
7983: LD_OWVAR 4
7987: AND
7988: IFFALSE 8000
// begin result = false ;
7990: LD_ADDR_VAR 0 2
7994: PUSH
7995: LD_INT 0
7997: ST_TO_ADDR
// end else
7998: GO 8295
// case def_win_rules of 0 :
8000: LD_EXP 30
8004: PUSH
8005: LD_INT 0
8007: DOUBLE
8008: EQUAL
8009: IFTRUE 8013
8011: GO 8176
8013: POP
// if def_people_respawning then
8014: LD_EXP 11
8018: IFFALSE 8109
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8020: LD_ADDR_VAR 0 2
8024: PUSH
8025: LD_INT 22
8027: PUSH
8028: LD_VAR 0 1
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 2
8039: PUSH
8040: LD_INT 21
8042: PUSH
8043: LD_INT 1
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 33
8052: PUSH
8053: LD_INT 3
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 33
8062: PUSH
8063: LD_INT 5
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: LD_INT 30
8072: PUSH
8073: LD_INT 0
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 30
8082: PUSH
8083: LD_INT 1
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PPUSH
8102: CALL_OW 69
8106: ST_TO_ADDR
8107: GO 8174
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8109: LD_ADDR_VAR 0 2
8113: PUSH
8114: LD_INT 22
8116: PUSH
8117: LD_VAR 0 1
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PUSH
8126: LD_INT 2
8128: PUSH
8129: LD_INT 21
8131: PUSH
8132: LD_INT 1
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: LD_INT 33
8141: PUSH
8142: LD_INT 3
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: PUSH
8149: LD_INT 33
8151: PUSH
8152: LD_INT 5
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: PPUSH
8169: CALL_OW 69
8173: ST_TO_ADDR
8174: GO 8295
8176: LD_INT 1
8178: DOUBLE
8179: EQUAL
8180: IFTRUE 8184
8182: GO 8223
8184: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8185: LD_ADDR_VAR 0 2
8189: PUSH
8190: LD_INT 22
8192: PUSH
8193: LD_VAR 0 1
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 21
8204: PUSH
8205: LD_INT 1
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PPUSH
8216: CALL_OW 69
8220: ST_TO_ADDR
8221: GO 8295
8223: LD_INT 2
8225: DOUBLE
8226: EQUAL
8227: IFTRUE 8231
8229: GO 8294
8231: POP
// begin h = false ;
8232: LD_ADDR_VAR 0 4
8236: PUSH
8237: LD_INT 0
8239: ST_TO_ADDR
// for k in heroes [ i ] do
8240: LD_ADDR_VAR 0 3
8244: PUSH
8245: LD_EXP 45
8249: PUSH
8250: LD_VAR 0 1
8254: ARRAY
8255: PUSH
8256: FOR_IN
8257: IFFALSE 8280
// if IsLive ( k ) then
8259: LD_VAR 0 3
8263: PPUSH
8264: CALL_OW 300
8268: IFFALSE 8278
// h = true ;
8270: LD_ADDR_VAR 0 4
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
8278: GO 8256
8280: POP
8281: POP
// Result := h ;
8282: LD_ADDR_VAR 0 2
8286: PUSH
8287: LD_VAR 0 4
8291: ST_TO_ADDR
// end ; end ;
8292: GO 8295
8294: POP
// end ;
8295: LD_VAR 0 2
8299: RET
// function AlliedSides ( i , j ) ; begin
8300: LD_INT 0
8302: PPUSH
// Result := false ;
8303: LD_ADDR_VAR 0 3
8307: PUSH
8308: LD_INT 0
8310: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8311: LD_VAR 0 1
8315: PPUSH
8316: LD_VAR 0 2
8320: PPUSH
8321: CALL_OW 81
8325: PUSH
8326: LD_INT 1
8328: EQUAL
8329: PUSH
8330: LD_VAR 0 2
8334: PPUSH
8335: LD_VAR 0 1
8339: PPUSH
8340: CALL_OW 81
8344: PUSH
8345: LD_INT 1
8347: EQUAL
8348: AND
8349: PUSH
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 83
8359: AND
8360: PUSH
8361: LD_VAR 0 2
8365: PPUSH
8366: CALL_OW 83
8370: AND
8371: IFFALSE 8381
// Result := true ;
8373: LD_ADDR_VAR 0 3
8377: PUSH
8378: LD_INT 1
8380: ST_TO_ADDR
// end ;
8381: LD_VAR 0 3
8385: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8386: CALL 7890 0 0
8390: PUSH
8391: LD_LOC 15
8395: NOT
8396: AND
8397: IFFALSE 8413
8399: GO 8401
8401: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8402: LD_ADDR_EXP 54
8406: PUSH
8407: LD_STRING #Player-Ended
8409: PUSH
8410: EMPTY
8411: LIST
8412: ST_TO_ADDR
8413: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8414: CALL 7890 0 0
8418: PUSH
8419: LD_LOC 15
8423: AND
8424: IFFALSE 8433
8426: GO 8428
8428: DISABLE
// YouLostInMultiplayer ;
8429: CALL_OW 107
8433: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8434: CALL 7890 0 0
8438: NOT
8439: PUSH
8440: CALL_OW 531
8444: NOT
8445: AND
8446: IFFALSE 8462
8448: GO 8450
8450: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8451: LD_ADDR_EXP 54
8455: PUSH
8456: LD_STRING #server-wait
8458: PUSH
8459: EMPTY
8460: LIST
8461: ST_TO_ADDR
8462: END
// every 100 trigger IAmSpec do
8463: CALL_OW 531
8467: IFFALSE 8483
8469: GO 8471
8471: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8472: LD_ADDR_EXP 54
8476: PUSH
8477: LD_STRING #Player-IAmSpec
8479: PUSH
8480: EMPTY
8481: LIST
8482: ST_TO_ADDR
8483: END
// every 100 trigger GameEnded and IAmSpec do
8484: LD_LOC 15
8488: PUSH
8489: CALL_OW 531
8493: AND
8494: IFFALSE 8503
8496: GO 8498
8498: DISABLE
// YouLostInMultiplayer ;
8499: CALL_OW 107
8503: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8504: CALL 7890 0 0
8508: PUSH
8509: LD_LOC 15
8513: NOT
8514: AND
8515: IFFALSE 8531
8517: GO 8519
8519: DISABLE
// WaitServerStrings = [ $player-win ] ;
8520: LD_ADDR_EXP 54
8524: PUSH
8525: LD_STRING $player-win
8527: PUSH
8528: EMPTY
8529: LIST
8530: ST_TO_ADDR
8531: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8532: CALL 7890 0 0
8536: PUSH
8537: LD_LOC 15
8541: AND
8542: IFFALSE 8566
8544: GO 8546
8546: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8547: LD_EXP 35
8551: PUSH
8552: LD_OWVAR 7
8556: ARRAY
8557: PPUSH
8558: CALL 7561 0 1
// YouWinInMultiplayer ;
8562: CALL_OW 106
// end ;
8566: END
// every 100 trigger isEditor marked 401 do
8567: LD_OWVAR 84
8571: IFFALSE 8587
8573: GO 8575
8575: DISABLE
// Debug_Strings = [ You won ] ;
8576: LD_ADDR_OWVAR 48
8580: PUSH
8581: LD_STRING You won
8583: PUSH
8584: EMPTY
8585: LIST
8586: ST_TO_ADDR
8587: END
// every 100 trigger isEditor marked 400 do
8588: LD_OWVAR 84
8592: IFFALSE 8608
8594: GO 8596
8596: DISABLE
// Debug_Strings = [ You loss ] ;
8597: LD_ADDR_OWVAR 48
8601: PUSH
8602: LD_STRING You loss
8604: PUSH
8605: EMPTY
8606: LIST
8607: ST_TO_ADDR
8608: END
// every 100 marked 98 do var i , un ;
8609: GO 8611
8611: DISABLE
8612: LD_INT 0
8614: PPUSH
8615: PPUSH
// begin for i = 1 to side_positions do
8616: LD_ADDR_VAR 0 1
8620: PUSH
8621: DOUBLE
8622: LD_INT 1
8624: DEC
8625: ST_TO_ADDR
8626: LD_EXP 34
8630: PUSH
8631: FOR_TO
8632: IFFALSE 8719
// begin if side_positions [ i ] then
8634: LD_EXP 34
8638: PUSH
8639: LD_VAR 0 1
8643: ARRAY
8644: IFFALSE 8717
// if not HasPower ( i ) and not defeated [ i ] then
8646: LD_VAR 0 1
8650: PPUSH
8651: CALL 7954 0 1
8655: NOT
8656: PUSH
8657: LD_LOC 14
8661: PUSH
8662: LD_VAR 0 1
8666: ARRAY
8667: NOT
8668: AND
8669: IFFALSE 8717
// begin defeated = replace ( defeated , i , true ) ;
8671: LD_ADDR_LOC 14
8675: PUSH
8676: LD_LOC 14
8680: PPUSH
8681: LD_VAR 0 1
8685: PPUSH
8686: LD_INT 1
8688: PPUSH
8689: CALL_OW 1
8693: ST_TO_ADDR
// if i = mp_player_side then
8694: LD_VAR 0 1
8698: PUSH
8699: LD_OWVAR 7
8703: EQUAL
8704: IFFALSE 8717
// begin Multiplayer_Loose_Message ;
8706: CALL_OW 521
// SetPlayerSpectator ( ) ;
8710: CALL_OW 572
// enable ( 400 ) ;
8714: LD_INT 400
8716: ENABLE_MARKED
// end ; end ; end ;
8717: GO 8631
8719: POP
8720: POP
// DidGameEnd ;
8721: CALL 8736 0 0
// if not GameEnded then
8725: LD_LOC 15
8729: NOT
8730: IFFALSE 8733
// enable ;
8732: ENABLE
// end ;
8733: PPOPN 2
8735: END
// function DidGameEnd ; var i , k , enemy ; begin
8736: LD_INT 0
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
// enemy = [ ] ;
8742: LD_ADDR_VAR 0 4
8746: PUSH
8747: EMPTY
8748: ST_TO_ADDR
// for i = 1 to side_positions do
8749: LD_ADDR_VAR 0 2
8753: PUSH
8754: DOUBLE
8755: LD_INT 1
8757: DEC
8758: ST_TO_ADDR
8759: LD_EXP 34
8763: PUSH
8764: FOR_TO
8765: IFFALSE 8859
// if not defeated [ i ] then
8767: LD_LOC 14
8771: PUSH
8772: LD_VAR 0 2
8776: ARRAY
8777: NOT
8778: IFFALSE 8857
// for k = 1 to side_positions do
8780: LD_ADDR_VAR 0 3
8784: PUSH
8785: DOUBLE
8786: LD_INT 1
8788: DEC
8789: ST_TO_ADDR
8790: LD_EXP 34
8794: PUSH
8795: FOR_TO
8796: IFFALSE 8855
// if not defeated [ k ] then
8798: LD_LOC 14
8802: PUSH
8803: LD_VAR 0 3
8807: ARRAY
8808: NOT
8809: IFFALSE 8853
// if not AlliedSides ( i , k ) then
8811: LD_VAR 0 2
8815: PPUSH
8816: LD_VAR 0 3
8820: PPUSH
8821: CALL 8300 0 2
8825: NOT
8826: IFFALSE 8853
// enemy = enemy ^ [ i , k ] ;
8828: LD_ADDR_VAR 0 4
8832: PUSH
8833: LD_VAR 0 4
8837: PUSH
8838: LD_VAR 0 2
8842: PUSH
8843: LD_VAR 0 3
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: ADD
8852: ST_TO_ADDR
8853: GO 8795
8855: POP
8856: POP
8857: GO 8764
8859: POP
8860: POP
// if not enemy then
8861: LD_VAR 0 4
8865: NOT
8866: IFFALSE 8892
// begin GameEnded = true ;
8868: LD_ADDR_LOC 15
8872: PUSH
8873: LD_INT 1
8875: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8876: LD_LOC 14
8880: PUSH
8881: LD_OWVAR 7
8885: ARRAY
8886: NOT
8887: IFFALSE 8892
// enable ( 401 ) ;
8889: LD_INT 401
8891: ENABLE_MARKED
// end ; end ;
8892: LD_VAR 0 1
8896: RET
// function unfog ; var k , friends ; begin
8897: LD_INT 0
8899: PPUSH
8900: PPUSH
8901: PPUSH
// for k = 1 to side_positions do
8902: LD_ADDR_VAR 0 2
8906: PUSH
8907: DOUBLE
8908: LD_INT 1
8910: DEC
8911: ST_TO_ADDR
8912: LD_EXP 34
8916: PUSH
8917: FOR_TO
8918: IFFALSE 8974
// if not defeated [ k ] then
8920: LD_LOC 14
8924: PUSH
8925: LD_VAR 0 2
8929: ARRAY
8930: NOT
8931: IFFALSE 8972
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8933: LD_OWVAR 7
8937: PPUSH
8938: LD_VAR 0 2
8942: PPUSH
8943: CALL_OW 81
8947: PUSH
8948: LD_INT 1
8950: PUSH
8951: EMPTY
8952: LIST
8953: IN
8954: IFFALSE 8972
// friends = friends ^ k ;
8956: LD_ADDR_VAR 0 3
8960: PUSH
8961: LD_VAR 0 3
8965: PUSH
8966: LD_VAR 0 2
8970: ADD
8971: ST_TO_ADDR
8972: GO 8917
8974: POP
8975: POP
// if not friends then
8976: LD_VAR 0 3
8980: NOT
8981: IFFALSE 8995
// begin SetPlayerSpectator ( ) ;
8983: CALL_OW 572
// unfoged = true ;
8987: LD_ADDR_LOC 16
8991: PUSH
8992: LD_INT 1
8994: ST_TO_ADDR
// end ; end ;
8995: LD_VAR 0 1
8999: RET
// export function MakeGameEnd ; begin
9000: LD_INT 0
9002: PPUSH
// SetPlayerSpectator ( ) ;
9003: CALL_OW 572
// unfoged = true ;
9007: LD_ADDR_LOC 16
9011: PUSH
9012: LD_INT 1
9014: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9015: LD_INT 175
9017: PPUSH
9018: CALL_OW 67
// GameEnded = true ;
9022: LD_ADDR_LOC 15
9026: PUSH
9027: LD_INT 1
9029: ST_TO_ADDR
// end ;
9030: LD_VAR 0 1
9034: RET
// export function GetGameEnded ; begin
9035: LD_INT 0
9037: PPUSH
// result = GameEnded ;
9038: LD_ADDR_VAR 0 1
9042: PUSH
9043: LD_LOC 15
9047: ST_TO_ADDR
// end ; end_of_file
9048: LD_VAR 0 1
9052: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9053: LD_INT 0
9055: PPUSH
9056: PPUSH
9057: PPUSH
// for side = 1 to 8 do
9058: LD_ADDR_VAR 0 2
9062: PUSH
9063: DOUBLE
9064: LD_INT 1
9066: DEC
9067: ST_TO_ADDR
9068: LD_INT 8
9070: PUSH
9071: FOR_TO
9072: IFFALSE 9193
// begin for i = 1 to 72 do
9074: LD_ADDR_VAR 0 3
9078: PUSH
9079: DOUBLE
9080: LD_INT 1
9082: DEC
9083: ST_TO_ADDR
9084: LD_INT 72
9086: PUSH
9087: FOR_TO
9088: IFFALSE 9119
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9090: LD_VAR 0 3
9094: PPUSH
9095: LD_VAR 0 2
9099: PPUSH
9100: LD_INT 0
9102: PPUSH
9103: LD_VAR 0 3
9107: PPUSH
9108: CALL_OW 565
9112: PPUSH
9113: CALL_OW 322
9117: GO 9087
9119: POP
9120: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9121: LD_INT 73
9123: PPUSH
9124: LD_VAR 0 2
9128: PPUSH
9129: LD_INT 0
9131: PPUSH
9132: LD_INT 25
9134: PPUSH
9135: CALL_OW 565
9139: PPUSH
9140: CALL_OW 322
// for i = 0 to 40 do
9144: LD_ADDR_VAR 0 3
9148: PUSH
9149: DOUBLE
9150: LD_INT 0
9152: DEC
9153: ST_TO_ADDR
9154: LD_INT 40
9156: PUSH
9157: FOR_TO
9158: IFFALSE 9189
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9160: LD_VAR 0 3
9164: PPUSH
9165: LD_VAR 0 2
9169: PPUSH
9170: LD_INT 1
9172: PPUSH
9173: LD_VAR 0 3
9177: PPUSH
9178: CALL_OW 565
9182: PPUSH
9183: CALL_OW 324
9187: GO 9157
9189: POP
9190: POP
// end ;
9191: GO 9071
9193: POP
9194: POP
// end ;
9195: LD_VAR 0 1
9199: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9200: LD_INT 0
9202: PPUSH
9203: PPUSH
9204: PPUSH
// for side = 1 to 8 do
9205: LD_ADDR_VAR 0 3
9209: PUSH
9210: DOUBLE
9211: LD_INT 1
9213: DEC
9214: ST_TO_ADDR
9215: LD_INT 8
9217: PUSH
9218: FOR_TO
9219: IFFALSE 13215
// begin for i = 1 to 73 do
9221: LD_ADDR_VAR 0 4
9225: PUSH
9226: DOUBLE
9227: LD_INT 1
9229: DEC
9230: ST_TO_ADDR
9231: LD_INT 73
9233: PUSH
9234: FOR_TO
9235: IFFALSE 9256
// SetTech ( i , side , state_disabled ) ;
9237: LD_VAR 0 4
9241: PPUSH
9242: LD_VAR 0 3
9246: PPUSH
9247: LD_INT 0
9249: PPUSH
9250: CALL_OW 322
9254: GO 9234
9256: POP
9257: POP
// for i = 0 to 40 do
9258: LD_ADDR_VAR 0 4
9262: PUSH
9263: DOUBLE
9264: LD_INT 0
9266: DEC
9267: ST_TO_ADDR
9268: LD_INT 40
9270: PUSH
9271: FOR_TO
9272: IFFALSE 9293
// SetRestrict ( i , side , false ) ;
9274: LD_VAR 0 4
9278: PPUSH
9279: LD_VAR 0 3
9283: PPUSH
9284: LD_INT 0
9286: PPUSH
9287: CALL_OW 324
9291: GO 9271
9293: POP
9294: POP
// case level of 1 :
9295: LD_VAR 0 1
9299: PUSH
9300: LD_INT 1
9302: DOUBLE
9303: EQUAL
9304: IFTRUE 9308
9306: GO 9461
9308: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9309: LD_INT 35
9311: PPUSH
9312: LD_VAR 0 3
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9324: LD_INT 45
9326: PPUSH
9327: LD_VAR 0 3
9331: PPUSH
9332: LD_INT 1
9334: PPUSH
9335: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9339: LD_INT 46
9341: PPUSH
9342: LD_VAR 0 3
9346: PPUSH
9347: LD_INT 1
9349: PPUSH
9350: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9354: LD_INT 47
9356: PPUSH
9357: LD_VAR 0 3
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9369: LD_INT 0
9371: PPUSH
9372: LD_VAR 0 3
9376: PPUSH
9377: LD_INT 1
9379: PPUSH
9380: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9384: LD_INT 2
9386: PPUSH
9387: LD_VAR 0 3
9391: PPUSH
9392: LD_INT 1
9394: PPUSH
9395: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9399: LD_INT 4
9401: PPUSH
9402: LD_VAR 0 3
9406: PPUSH
9407: LD_INT 1
9409: PPUSH
9410: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9414: LD_INT 6
9416: PPUSH
9417: LD_VAR 0 3
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9429: LD_INT 29
9431: PPUSH
9432: LD_VAR 0 3
9436: PPUSH
9437: LD_INT 1
9439: PPUSH
9440: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9444: LD_INT 31
9446: PPUSH
9447: LD_VAR 0 3
9451: PPUSH
9452: LD_INT 1
9454: PPUSH
9455: CALL_OW 324
// end ; 2 :
9459: GO 13213
9461: LD_INT 2
9463: DOUBLE
9464: EQUAL
9465: IFTRUE 9469
9467: GO 9667
9469: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9470: LD_INT 35
9472: PPUSH
9473: LD_VAR 0 3
9477: PPUSH
9478: LD_INT 1
9480: PPUSH
9481: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9485: LD_INT 45
9487: PPUSH
9488: LD_VAR 0 3
9492: PPUSH
9493: LD_INT 1
9495: PPUSH
9496: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9500: LD_INT 46
9502: PPUSH
9503: LD_VAR 0 3
9507: PPUSH
9508: LD_INT 1
9510: PPUSH
9511: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9515: LD_INT 47
9517: PPUSH
9518: LD_VAR 0 3
9522: PPUSH
9523: LD_INT 1
9525: PPUSH
9526: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9530: LD_INT 1
9532: PPUSH
9533: LD_VAR 0 3
9537: PPUSH
9538: LD_INT 1
9540: PPUSH
9541: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9545: LD_INT 2
9547: PPUSH
9548: LD_VAR 0 3
9552: PPUSH
9553: LD_INT 1
9555: PPUSH
9556: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9560: LD_INT 11
9562: PPUSH
9563: LD_VAR 0 3
9567: PPUSH
9568: LD_INT 1
9570: PPUSH
9571: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9575: LD_INT 0
9577: PPUSH
9578: LD_VAR 0 3
9582: PPUSH
9583: LD_INT 1
9585: PPUSH
9586: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9590: LD_INT 2
9592: PPUSH
9593: LD_VAR 0 3
9597: PPUSH
9598: LD_INT 1
9600: PPUSH
9601: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9605: LD_INT 4
9607: PPUSH
9608: LD_VAR 0 3
9612: PPUSH
9613: LD_INT 1
9615: PPUSH
9616: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9620: LD_INT 6
9622: PPUSH
9623: LD_VAR 0 3
9627: PPUSH
9628: LD_INT 1
9630: PPUSH
9631: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9635: LD_INT 29
9637: PPUSH
9638: LD_VAR 0 3
9642: PPUSH
9643: LD_INT 1
9645: PPUSH
9646: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9650: LD_INT 31
9652: PPUSH
9653: LD_VAR 0 3
9657: PPUSH
9658: LD_INT 1
9660: PPUSH
9661: CALL_OW 324
// end ; 3 :
9665: GO 13213
9667: LD_INT 3
9669: DOUBLE
9670: EQUAL
9671: IFTRUE 9675
9673: GO 10128
9675: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9676: LD_INT 35
9678: PPUSH
9679: LD_VAR 0 3
9683: PPUSH
9684: LD_INT 1
9686: PPUSH
9687: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9691: LD_INT 45
9693: PPUSH
9694: LD_VAR 0 3
9698: PPUSH
9699: LD_INT 1
9701: PPUSH
9702: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9706: LD_INT 46
9708: PPUSH
9709: LD_VAR 0 3
9713: PPUSH
9714: LD_INT 1
9716: PPUSH
9717: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9721: LD_INT 47
9723: PPUSH
9724: LD_VAR 0 3
9728: PPUSH
9729: LD_INT 1
9731: PPUSH
9732: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9736: LD_INT 1
9738: PPUSH
9739: LD_VAR 0 3
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9751: LD_INT 2
9753: PPUSH
9754: LD_VAR 0 3
9758: PPUSH
9759: LD_INT 1
9761: PPUSH
9762: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9766: LD_INT 11
9768: PPUSH
9769: LD_VAR 0 3
9773: PPUSH
9774: LD_INT 1
9776: PPUSH
9777: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9781: LD_INT 48
9783: PPUSH
9784: LD_VAR 0 3
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9796: LD_INT 69
9798: PPUSH
9799: LD_VAR 0 3
9803: PPUSH
9804: LD_INT 1
9806: PPUSH
9807: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9811: LD_INT 39
9813: PPUSH
9814: LD_VAR 0 3
9818: PPUSH
9819: LD_INT 1
9821: PPUSH
9822: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9826: LD_INT 43
9828: PPUSH
9829: LD_VAR 0 3
9833: PPUSH
9834: LD_INT 1
9836: PPUSH
9837: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9841: LD_INT 51
9843: PPUSH
9844: LD_VAR 0 3
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9856: LD_INT 6
9858: PPUSH
9859: LD_VAR 0 3
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9871: LD_INT 0
9873: PPUSH
9874: LD_VAR 0 3
9878: PPUSH
9879: LD_INT 1
9881: PPUSH
9882: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9886: LD_INT 2
9888: PPUSH
9889: LD_VAR 0 3
9893: PPUSH
9894: LD_INT 1
9896: PPUSH
9897: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9901: LD_INT 3
9903: PPUSH
9904: LD_VAR 0 3
9908: PPUSH
9909: LD_INT 1
9911: PPUSH
9912: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9916: LD_INT 4
9918: PPUSH
9919: LD_VAR 0 3
9923: PPUSH
9924: LD_INT 1
9926: PPUSH
9927: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9931: LD_INT 6
9933: PPUSH
9934: LD_VAR 0 3
9938: PPUSH
9939: LD_INT 1
9941: PPUSH
9942: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9946: LD_INT 7
9948: PPUSH
9949: LD_VAR 0 3
9953: PPUSH
9954: LD_INT 1
9956: PPUSH
9957: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9961: LD_INT 8
9963: PPUSH
9964: LD_VAR 0 3
9968: PPUSH
9969: LD_INT 1
9971: PPUSH
9972: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9976: LD_INT 10
9978: PPUSH
9979: LD_VAR 0 3
9983: PPUSH
9984: LD_INT 1
9986: PPUSH
9987: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9991: LD_INT 15
9993: PPUSH
9994: LD_VAR 0 3
9998: PPUSH
9999: LD_INT 1
10001: PPUSH
10002: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10006: LD_INT 16
10008: PPUSH
10009: LD_VAR 0 3
10013: PPUSH
10014: LD_INT 1
10016: PPUSH
10017: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10021: LD_INT 17
10023: PPUSH
10024: LD_VAR 0 3
10028: PPUSH
10029: LD_INT 1
10031: PPUSH
10032: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10036: LD_INT 20
10038: PPUSH
10039: LD_VAR 0 3
10043: PPUSH
10044: LD_INT 1
10046: PPUSH
10047: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10051: LD_INT 26
10053: PPUSH
10054: LD_VAR 0 3
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10066: LD_INT 27
10068: PPUSH
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_INT 1
10076: PPUSH
10077: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10081: LD_INT 29
10083: PPUSH
10084: LD_VAR 0 3
10088: PPUSH
10089: LD_INT 1
10091: PPUSH
10092: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10096: LD_INT 31
10098: PPUSH
10099: LD_VAR 0 3
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10111: LD_INT 32
10113: PPUSH
10114: LD_VAR 0 3
10118: PPUSH
10119: LD_INT 1
10121: PPUSH
10122: CALL_OW 324
// end ; 4 :
10126: GO 13213
10128: LD_INT 4
10130: DOUBLE
10131: EQUAL
10132: IFTRUE 10136
10134: GO 11084
10136: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10137: LD_INT 35
10139: PPUSH
10140: LD_VAR 0 3
10144: PPUSH
10145: LD_INT 1
10147: PPUSH
10148: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10152: LD_INT 45
10154: PPUSH
10155: LD_VAR 0 3
10159: PPUSH
10160: LD_INT 1
10162: PPUSH
10163: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10167: LD_INT 46
10169: PPUSH
10170: LD_VAR 0 3
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10182: LD_INT 47
10184: PPUSH
10185: LD_VAR 0 3
10189: PPUSH
10190: LD_INT 1
10192: PPUSH
10193: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10197: LD_INT 1
10199: PPUSH
10200: LD_VAR 0 3
10204: PPUSH
10205: LD_INT 1
10207: PPUSH
10208: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10212: LD_INT 2
10214: PPUSH
10215: LD_VAR 0 3
10219: PPUSH
10220: LD_INT 1
10222: PPUSH
10223: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10227: LD_INT 11
10229: PPUSH
10230: LD_VAR 0 3
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10242: LD_INT 20
10244: PPUSH
10245: LD_VAR 0 3
10249: PPUSH
10250: LD_INT 1
10252: PPUSH
10253: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10257: LD_INT 48
10259: PPUSH
10260: LD_VAR 0 3
10264: PPUSH
10265: LD_INT 1
10267: PPUSH
10268: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10272: LD_INT 49
10274: PPUSH
10275: LD_VAR 0 3
10279: PPUSH
10280: LD_INT 1
10282: PPUSH
10283: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10287: LD_INT 69
10289: PPUSH
10290: LD_VAR 0 3
10294: PPUSH
10295: LD_INT 1
10297: PPUSH
10298: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10302: LD_INT 39
10304: PPUSH
10305: LD_VAR 0 3
10309: PPUSH
10310: LD_INT 1
10312: PPUSH
10313: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10317: LD_INT 34
10319: PPUSH
10320: LD_VAR 0 3
10324: PPUSH
10325: LD_INT 1
10327: PPUSH
10328: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10332: LD_INT 42
10334: PPUSH
10335: LD_VAR 0 3
10339: PPUSH
10340: LD_INT 1
10342: PPUSH
10343: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10347: LD_INT 44
10349: PPUSH
10350: LD_VAR 0 3
10354: PPUSH
10355: LD_INT 1
10357: PPUSH
10358: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10362: LD_INT 41
10364: PPUSH
10365: LD_VAR 0 3
10369: PPUSH
10370: LD_INT 1
10372: PPUSH
10373: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10377: LD_INT 43
10379: PPUSH
10380: LD_VAR 0 3
10384: PPUSH
10385: LD_INT 1
10387: PPUSH
10388: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10392: LD_INT 70
10394: PPUSH
10395: LD_VAR 0 3
10399: PPUSH
10400: LD_INT 1
10402: PPUSH
10403: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10407: LD_INT 51
10409: PPUSH
10410: LD_VAR 0 3
10414: PPUSH
10415: LD_INT 1
10417: PPUSH
10418: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10422: LD_INT 52
10424: PPUSH
10425: LD_VAR 0 3
10429: PPUSH
10430: LD_INT 1
10432: PPUSH
10433: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10437: LD_INT 6
10439: PPUSH
10440: LD_VAR 0 3
10444: PPUSH
10445: LD_INT 1
10447: PPUSH
10448: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10452: LD_INT 15
10454: PPUSH
10455: LD_VAR 0 3
10459: PPUSH
10460: LD_INT 1
10462: PPUSH
10463: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10467: LD_INT 7
10469: PPUSH
10470: LD_VAR 0 3
10474: PPUSH
10475: LD_INT 1
10477: PPUSH
10478: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10482: LD_INT 12
10484: PPUSH
10485: LD_VAR 0 3
10489: PPUSH
10490: LD_INT 1
10492: PPUSH
10493: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10497: LD_INT 18
10499: PPUSH
10500: LD_VAR 0 3
10504: PPUSH
10505: LD_INT 1
10507: PPUSH
10508: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10512: LD_INT 60
10514: PPUSH
10515: LD_VAR 0 3
10519: PPUSH
10520: LD_INT 1
10522: PPUSH
10523: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10527: LD_INT 9
10529: PPUSH
10530: LD_VAR 0 3
10534: PPUSH
10535: LD_INT 1
10537: PPUSH
10538: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10542: LD_INT 30
10544: PPUSH
10545: LD_VAR 0 3
10549: PPUSH
10550: LD_INT 1
10552: PPUSH
10553: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10557: LD_INT 37
10559: PPUSH
10560: LD_VAR 0 3
10564: PPUSH
10565: LD_INT 1
10567: PPUSH
10568: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10572: LD_INT 5
10574: PPUSH
10575: LD_VAR 0 3
10579: PPUSH
10580: LD_INT 1
10582: PPUSH
10583: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10587: LD_INT 66
10589: PPUSH
10590: LD_VAR 0 3
10594: PPUSH
10595: LD_INT 1
10597: PPUSH
10598: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10602: LD_INT 21
10604: PPUSH
10605: LD_VAR 0 3
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10617: LD_INT 22
10619: PPUSH
10620: LD_VAR 0 3
10624: PPUSH
10625: LD_INT 1
10627: PPUSH
10628: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10632: LD_INT 54
10634: PPUSH
10635: LD_VAR 0 3
10639: PPUSH
10640: LD_INT 1
10642: PPUSH
10643: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10647: LD_INT 0
10649: PPUSH
10650: LD_VAR 0 3
10654: PPUSH
10655: LD_INT 1
10657: PPUSH
10658: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10662: LD_INT 1
10664: PPUSH
10665: LD_VAR 0 3
10669: PPUSH
10670: LD_INT 1
10672: PPUSH
10673: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10677: LD_INT 2
10679: PPUSH
10680: LD_VAR 0 3
10684: PPUSH
10685: LD_INT 1
10687: PPUSH
10688: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10692: LD_INT 3
10694: PPUSH
10695: LD_VAR 0 3
10699: PPUSH
10700: LD_INT 1
10702: PPUSH
10703: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10707: LD_INT 4
10709: PPUSH
10710: LD_VAR 0 3
10714: PPUSH
10715: LD_INT 1
10717: PPUSH
10718: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10722: LD_INT 5
10724: PPUSH
10725: LD_VAR 0 3
10729: PPUSH
10730: LD_INT 1
10732: PPUSH
10733: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10737: LD_INT 6
10739: PPUSH
10740: LD_VAR 0 3
10744: PPUSH
10745: LD_INT 1
10747: PPUSH
10748: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10752: LD_INT 7
10754: PPUSH
10755: LD_VAR 0 3
10759: PPUSH
10760: LD_INT 1
10762: PPUSH
10763: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10767: LD_INT 8
10769: PPUSH
10770: LD_VAR 0 3
10774: PPUSH
10775: LD_INT 1
10777: PPUSH
10778: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10782: LD_INT 10
10784: PPUSH
10785: LD_VAR 0 3
10789: PPUSH
10790: LD_INT 1
10792: PPUSH
10793: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10797: LD_INT 11
10799: PPUSH
10800: LD_VAR 0 3
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10812: LD_INT 12
10814: PPUSH
10815: LD_VAR 0 3
10819: PPUSH
10820: LD_INT 1
10822: PPUSH
10823: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10827: LD_INT 13
10829: PPUSH
10830: LD_VAR 0 3
10834: PPUSH
10835: LD_INT 1
10837: PPUSH
10838: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10842: LD_INT 14
10844: PPUSH
10845: LD_VAR 0 3
10849: PPUSH
10850: LD_INT 1
10852: PPUSH
10853: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10857: LD_INT 15
10859: PPUSH
10860: LD_VAR 0 3
10864: PPUSH
10865: LD_INT 1
10867: PPUSH
10868: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10872: LD_INT 16
10874: PPUSH
10875: LD_VAR 0 3
10879: PPUSH
10880: LD_INT 1
10882: PPUSH
10883: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10887: LD_INT 17
10889: PPUSH
10890: LD_VAR 0 3
10894: PPUSH
10895: LD_INT 1
10897: PPUSH
10898: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10902: LD_INT 19
10904: PPUSH
10905: LD_VAR 0 3
10909: PPUSH
10910: LD_INT 1
10912: PPUSH
10913: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10917: LD_INT 20
10919: PPUSH
10920: LD_VAR 0 3
10924: PPUSH
10925: LD_INT 1
10927: PPUSH
10928: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10932: LD_INT 21
10934: PPUSH
10935: LD_VAR 0 3
10939: PPUSH
10940: LD_INT 1
10942: PPUSH
10943: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10947: LD_INT 23
10949: PPUSH
10950: LD_VAR 0 3
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10962: LD_INT 26
10964: PPUSH
10965: LD_VAR 0 3
10969: PPUSH
10970: LD_INT 1
10972: PPUSH
10973: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10977: LD_INT 27
10979: PPUSH
10980: LD_VAR 0 3
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10992: LD_INT 28
10994: PPUSH
10995: LD_VAR 0 3
10999: PPUSH
11000: LD_INT 1
11002: PPUSH
11003: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11007: LD_INT 29
11009: PPUSH
11010: LD_VAR 0 3
11014: PPUSH
11015: LD_INT 1
11017: PPUSH
11018: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11022: LD_INT 30
11024: PPUSH
11025: LD_VAR 0 3
11029: PPUSH
11030: LD_INT 1
11032: PPUSH
11033: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11037: LD_INT 31
11039: PPUSH
11040: LD_VAR 0 3
11044: PPUSH
11045: LD_INT 1
11047: PPUSH
11048: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11052: LD_INT 32
11054: PPUSH
11055: LD_VAR 0 3
11059: PPUSH
11060: LD_INT 1
11062: PPUSH
11063: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11067: LD_INT 36
11069: PPUSH
11070: LD_VAR 0 3
11074: PPUSH
11075: LD_INT 1
11077: PPUSH
11078: CALL_OW 324
// end ; 5 :
11082: GO 13213
11084: LD_INT 5
11086: DOUBLE
11087: EQUAL
11088: IFTRUE 11092
11090: GO 12205
11092: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11093: LD_INT 35
11095: PPUSH
11096: LD_VAR 0 3
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11108: LD_INT 45
11110: PPUSH
11111: LD_VAR 0 3
11115: PPUSH
11116: LD_INT 1
11118: PPUSH
11119: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11123: LD_INT 46
11125: PPUSH
11126: LD_VAR 0 3
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11138: LD_INT 47
11140: PPUSH
11141: LD_VAR 0 3
11145: PPUSH
11146: LD_INT 1
11148: PPUSH
11149: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11153: LD_INT 1
11155: PPUSH
11156: LD_VAR 0 3
11160: PPUSH
11161: LD_INT 1
11163: PPUSH
11164: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11168: LD_INT 2
11170: PPUSH
11171: LD_VAR 0 3
11175: PPUSH
11176: LD_INT 1
11178: PPUSH
11179: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11183: LD_INT 11
11185: PPUSH
11186: LD_VAR 0 3
11190: PPUSH
11191: LD_INT 1
11193: PPUSH
11194: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11198: LD_INT 20
11200: PPUSH
11201: LD_VAR 0 3
11205: PPUSH
11206: LD_INT 1
11208: PPUSH
11209: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11213: LD_INT 48
11215: PPUSH
11216: LD_VAR 0 3
11220: PPUSH
11221: LD_INT 1
11223: PPUSH
11224: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11228: LD_INT 49
11230: PPUSH
11231: LD_VAR 0 3
11235: PPUSH
11236: LD_INT 1
11238: PPUSH
11239: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11243: LD_INT 69
11245: PPUSH
11246: LD_VAR 0 3
11250: PPUSH
11251: LD_INT 1
11253: PPUSH
11254: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11258: LD_INT 39
11260: PPUSH
11261: LD_VAR 0 3
11265: PPUSH
11266: LD_INT 1
11268: PPUSH
11269: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11273: LD_INT 34
11275: PPUSH
11276: LD_VAR 0 3
11280: PPUSH
11281: LD_INT 1
11283: PPUSH
11284: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11288: LD_INT 42
11290: PPUSH
11291: LD_VAR 0 3
11295: PPUSH
11296: LD_INT 1
11298: PPUSH
11299: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11303: LD_INT 44
11305: PPUSH
11306: LD_VAR 0 3
11310: PPUSH
11311: LD_INT 1
11313: PPUSH
11314: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11318: LD_INT 41
11320: PPUSH
11321: LD_VAR 0 3
11325: PPUSH
11326: LD_INT 1
11328: PPUSH
11329: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11333: LD_INT 40
11335: PPUSH
11336: LD_VAR 0 3
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11348: LD_INT 43
11350: PPUSH
11351: LD_VAR 0 3
11355: PPUSH
11356: LD_INT 1
11358: PPUSH
11359: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11363: LD_INT 70
11365: PPUSH
11366: LD_VAR 0 3
11370: PPUSH
11371: LD_INT 1
11373: PPUSH
11374: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11378: LD_INT 51
11380: PPUSH
11381: LD_VAR 0 3
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11393: LD_INT 52
11395: PPUSH
11396: LD_VAR 0 3
11400: PPUSH
11401: LD_INT 1
11403: PPUSH
11404: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11408: LD_INT 6
11410: PPUSH
11411: LD_VAR 0 3
11415: PPUSH
11416: LD_INT 1
11418: PPUSH
11419: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11423: LD_INT 15
11425: PPUSH
11426: LD_VAR 0 3
11430: PPUSH
11431: LD_INT 1
11433: PPUSH
11434: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11438: LD_INT 7
11440: PPUSH
11441: LD_VAR 0 3
11445: PPUSH
11446: LD_INT 1
11448: PPUSH
11449: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11453: LD_INT 12
11455: PPUSH
11456: LD_VAR 0 3
11460: PPUSH
11461: LD_INT 1
11463: PPUSH
11464: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11468: LD_INT 17
11470: PPUSH
11471: LD_VAR 0 3
11475: PPUSH
11476: LD_INT 1
11478: PPUSH
11479: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11483: LD_INT 18
11485: PPUSH
11486: LD_VAR 0 3
11490: PPUSH
11491: LD_INT 1
11493: PPUSH
11494: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11498: LD_INT 60
11500: PPUSH
11501: LD_VAR 0 3
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11513: LD_INT 32
11515: PPUSH
11516: LD_VAR 0 3
11520: PPUSH
11521: LD_INT 1
11523: PPUSH
11524: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11528: LD_INT 9
11530: PPUSH
11531: LD_VAR 0 3
11535: PPUSH
11536: LD_INT 1
11538: PPUSH
11539: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11543: LD_INT 57
11545: PPUSH
11546: LD_VAR 0 3
11550: PPUSH
11551: LD_INT 1
11553: PPUSH
11554: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11558: LD_INT 30
11560: PPUSH
11561: LD_VAR 0 3
11565: PPUSH
11566: LD_INT 1
11568: PPUSH
11569: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11573: LD_INT 37
11575: PPUSH
11576: LD_VAR 0 3
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11588: LD_INT 63
11590: PPUSH
11591: LD_VAR 0 3
11595: PPUSH
11596: LD_INT 1
11598: PPUSH
11599: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11603: LD_INT 3
11605: PPUSH
11606: LD_VAR 0 3
11610: PPUSH
11611: LD_INT 1
11613: PPUSH
11614: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11618: LD_INT 4
11620: PPUSH
11621: LD_VAR 0 3
11625: PPUSH
11626: LD_INT 1
11628: PPUSH
11629: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11633: LD_INT 5
11635: PPUSH
11636: LD_VAR 0 3
11640: PPUSH
11641: LD_INT 1
11643: PPUSH
11644: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11648: LD_INT 66
11650: PPUSH
11651: LD_VAR 0 3
11655: PPUSH
11656: LD_INT 1
11658: PPUSH
11659: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11663: LD_INT 21
11665: PPUSH
11666: LD_VAR 0 3
11670: PPUSH
11671: LD_INT 1
11673: PPUSH
11674: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11678: LD_INT 22
11680: PPUSH
11681: LD_VAR 0 3
11685: PPUSH
11686: LD_INT 1
11688: PPUSH
11689: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11693: LD_INT 19
11695: PPUSH
11696: LD_VAR 0 3
11700: PPUSH
11701: LD_INT 1
11703: PPUSH
11704: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11708: LD_INT 54
11710: PPUSH
11711: LD_VAR 0 3
11715: PPUSH
11716: LD_INT 1
11718: PPUSH
11719: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11723: LD_INT 55
11725: PPUSH
11726: LD_VAR 0 3
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11738: LD_INT 0
11740: PPUSH
11741: LD_VAR 0 3
11745: PPUSH
11746: LD_INT 1
11748: PPUSH
11749: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11753: LD_INT 1
11755: PPUSH
11756: LD_VAR 0 3
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11768: LD_INT 2
11770: PPUSH
11771: LD_VAR 0 3
11775: PPUSH
11776: LD_INT 1
11778: PPUSH
11779: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11783: LD_INT 3
11785: PPUSH
11786: LD_VAR 0 3
11790: PPUSH
11791: LD_INT 1
11793: PPUSH
11794: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11798: LD_INT 4
11800: PPUSH
11801: LD_VAR 0 3
11805: PPUSH
11806: LD_INT 1
11808: PPUSH
11809: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11813: LD_INT 5
11815: PPUSH
11816: LD_VAR 0 3
11820: PPUSH
11821: LD_INT 1
11823: PPUSH
11824: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11828: LD_INT 6
11830: PPUSH
11831: LD_VAR 0 3
11835: PPUSH
11836: LD_INT 1
11838: PPUSH
11839: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11843: LD_INT 7
11845: PPUSH
11846: LD_VAR 0 3
11850: PPUSH
11851: LD_INT 1
11853: PPUSH
11854: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11858: LD_INT 8
11860: PPUSH
11861: LD_VAR 0 3
11865: PPUSH
11866: LD_INT 1
11868: PPUSH
11869: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11873: LD_INT 10
11875: PPUSH
11876: LD_VAR 0 3
11880: PPUSH
11881: LD_INT 1
11883: PPUSH
11884: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11888: LD_INT 11
11890: PPUSH
11891: LD_VAR 0 3
11895: PPUSH
11896: LD_INT 1
11898: PPUSH
11899: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11903: LD_INT 12
11905: PPUSH
11906: LD_VAR 0 3
11910: PPUSH
11911: LD_INT 1
11913: PPUSH
11914: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11918: LD_INT 13
11920: PPUSH
11921: LD_VAR 0 3
11925: PPUSH
11926: LD_INT 1
11928: PPUSH
11929: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11933: LD_INT 14
11935: PPUSH
11936: LD_VAR 0 3
11940: PPUSH
11941: LD_INT 1
11943: PPUSH
11944: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11948: LD_INT 15
11950: PPUSH
11951: LD_VAR 0 3
11955: PPUSH
11956: LD_INT 1
11958: PPUSH
11959: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11963: LD_INT 16
11965: PPUSH
11966: LD_VAR 0 3
11970: PPUSH
11971: LD_INT 1
11973: PPUSH
11974: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11978: LD_INT 17
11980: PPUSH
11981: LD_VAR 0 3
11985: PPUSH
11986: LD_INT 1
11988: PPUSH
11989: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11993: LD_INT 18
11995: PPUSH
11996: LD_VAR 0 3
12000: PPUSH
12001: LD_INT 1
12003: PPUSH
12004: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12008: LD_INT 19
12010: PPUSH
12011: LD_VAR 0 3
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12023: LD_INT 20
12025: PPUSH
12026: LD_VAR 0 3
12030: PPUSH
12031: LD_INT 1
12033: PPUSH
12034: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12038: LD_INT 21
12040: PPUSH
12041: LD_VAR 0 3
12045: PPUSH
12046: LD_INT 1
12048: PPUSH
12049: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12053: LD_INT 23
12055: PPUSH
12056: LD_VAR 0 3
12060: PPUSH
12061: LD_INT 1
12063: PPUSH
12064: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12068: LD_INT 26
12070: PPUSH
12071: LD_VAR 0 3
12075: PPUSH
12076: LD_INT 1
12078: PPUSH
12079: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12083: LD_INT 27
12085: PPUSH
12086: LD_VAR 0 3
12090: PPUSH
12091: LD_INT 1
12093: PPUSH
12094: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12098: LD_INT 28
12100: PPUSH
12101: LD_VAR 0 3
12105: PPUSH
12106: LD_INT 1
12108: PPUSH
12109: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12113: LD_INT 29
12115: PPUSH
12116: LD_VAR 0 3
12120: PPUSH
12121: LD_INT 1
12123: PPUSH
12124: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12128: LD_INT 30
12130: PPUSH
12131: LD_VAR 0 3
12135: PPUSH
12136: LD_INT 1
12138: PPUSH
12139: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12143: LD_INT 31
12145: PPUSH
12146: LD_VAR 0 3
12150: PPUSH
12151: LD_INT 1
12153: PPUSH
12154: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12158: LD_INT 32
12160: PPUSH
12161: LD_VAR 0 3
12165: PPUSH
12166: LD_INT 1
12168: PPUSH
12169: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12173: LD_INT 33
12175: PPUSH
12176: LD_VAR 0 3
12180: PPUSH
12181: LD_INT 1
12183: PPUSH
12184: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12188: LD_INT 36
12190: PPUSH
12191: LD_VAR 0 3
12195: PPUSH
12196: LD_INT 1
12198: PPUSH
12199: CALL_OW 324
// end ; 6 :
12203: GO 13213
12205: LD_INT 6
12207: DOUBLE
12208: EQUAL
12209: IFTRUE 12213
12211: GO 13138
12213: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12214: LD_INT 35
12216: PPUSH
12217: LD_VAR 0 3
12221: PPUSH
12222: LD_INT 1
12224: PPUSH
12225: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12229: LD_INT 45
12231: PPUSH
12232: LD_VAR 0 3
12236: PPUSH
12237: LD_INT 1
12239: PPUSH
12240: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12244: LD_INT 46
12246: PPUSH
12247: LD_VAR 0 3
12251: PPUSH
12252: LD_INT 1
12254: PPUSH
12255: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12259: LD_INT 47
12261: PPUSH
12262: LD_VAR 0 3
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12274: LD_INT 1
12276: PPUSH
12277: LD_VAR 0 3
12281: PPUSH
12282: LD_INT 1
12284: PPUSH
12285: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12289: LD_INT 2
12291: PPUSH
12292: LD_VAR 0 3
12296: PPUSH
12297: LD_INT 1
12299: PPUSH
12300: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12304: LD_INT 11
12306: PPUSH
12307: LD_VAR 0 3
12311: PPUSH
12312: LD_INT 1
12314: PPUSH
12315: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12319: LD_INT 20
12321: PPUSH
12322: LD_VAR 0 3
12326: PPUSH
12327: LD_INT 1
12329: PPUSH
12330: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12334: LD_INT 48
12336: PPUSH
12337: LD_VAR 0 3
12341: PPUSH
12342: LD_INT 1
12344: PPUSH
12345: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12349: LD_INT 49
12351: PPUSH
12352: LD_VAR 0 3
12356: PPUSH
12357: LD_INT 1
12359: PPUSH
12360: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12364: LD_INT 50
12366: PPUSH
12367: LD_VAR 0 3
12371: PPUSH
12372: LD_INT 1
12374: PPUSH
12375: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12379: LD_INT 69
12381: PPUSH
12382: LD_VAR 0 3
12386: PPUSH
12387: LD_INT 1
12389: PPUSH
12390: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12394: LD_INT 39
12396: PPUSH
12397: LD_VAR 0 3
12401: PPUSH
12402: LD_INT 1
12404: PPUSH
12405: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12409: LD_INT 34
12411: PPUSH
12412: LD_VAR 0 3
12416: PPUSH
12417: LD_INT 1
12419: PPUSH
12420: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12424: LD_INT 42
12426: PPUSH
12427: LD_VAR 0 3
12431: PPUSH
12432: LD_INT 1
12434: PPUSH
12435: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12439: LD_INT 44
12441: PPUSH
12442: LD_VAR 0 3
12446: PPUSH
12447: LD_INT 1
12449: PPUSH
12450: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12454: LD_INT 41
12456: PPUSH
12457: LD_VAR 0 3
12461: PPUSH
12462: LD_INT 1
12464: PPUSH
12465: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12469: LD_INT 13
12471: PPUSH
12472: LD_VAR 0 3
12476: PPUSH
12477: LD_INT 1
12479: PPUSH
12480: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12484: LD_INT 40
12486: PPUSH
12487: LD_VAR 0 3
12491: PPUSH
12492: LD_INT 1
12494: PPUSH
12495: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12499: LD_INT 43
12501: PPUSH
12502: LD_VAR 0 3
12506: PPUSH
12507: LD_INT 1
12509: PPUSH
12510: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12514: LD_INT 70
12516: PPUSH
12517: LD_VAR 0 3
12521: PPUSH
12522: LD_INT 1
12524: PPUSH
12525: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12529: LD_INT 23
12531: PPUSH
12532: LD_VAR 0 3
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12544: LD_INT 51
12546: PPUSH
12547: LD_VAR 0 3
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12559: LD_INT 52
12561: PPUSH
12562: LD_VAR 0 3
12566: PPUSH
12567: LD_INT 1
12569: PPUSH
12570: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12574: LD_INT 6
12576: PPUSH
12577: LD_VAR 0 3
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12589: LD_INT 15
12591: PPUSH
12592: LD_VAR 0 3
12596: PPUSH
12597: LD_INT 1
12599: PPUSH
12600: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12604: LD_INT 7
12606: PPUSH
12607: LD_VAR 0 3
12611: PPUSH
12612: LD_INT 1
12614: PPUSH
12615: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12619: LD_INT 12
12621: PPUSH
12622: LD_VAR 0 3
12626: PPUSH
12627: LD_INT 1
12629: PPUSH
12630: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12634: LD_INT 10
12636: PPUSH
12637: LD_VAR 0 3
12641: PPUSH
12642: LD_INT 1
12644: PPUSH
12645: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12649: LD_INT 17
12651: PPUSH
12652: LD_VAR 0 3
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12664: LD_INT 18
12666: PPUSH
12667: LD_VAR 0 3
12671: PPUSH
12672: LD_INT 1
12674: PPUSH
12675: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12679: LD_INT 60
12681: PPUSH
12682: LD_VAR 0 3
12686: PPUSH
12687: LD_INT 1
12689: PPUSH
12690: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12694: LD_INT 61
12696: PPUSH
12697: LD_VAR 0 3
12701: PPUSH
12702: LD_INT 1
12704: PPUSH
12705: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12709: LD_INT 32
12711: PPUSH
12712: LD_VAR 0 3
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12724: LD_INT 27
12726: PPUSH
12727: LD_VAR 0 3
12731: PPUSH
12732: LD_INT 1
12734: PPUSH
12735: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12739: LD_INT 36
12741: PPUSH
12742: LD_VAR 0 3
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12754: LD_INT 33
12756: PPUSH
12757: LD_VAR 0 3
12761: PPUSH
12762: LD_INT 1
12764: PPUSH
12765: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12769: LD_INT 9
12771: PPUSH
12772: LD_VAR 0 3
12776: PPUSH
12777: LD_INT 1
12779: PPUSH
12780: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12784: LD_INT 38
12786: PPUSH
12787: LD_VAR 0 3
12791: PPUSH
12792: LD_INT 1
12794: PPUSH
12795: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12799: LD_INT 57
12801: PPUSH
12802: LD_VAR 0 3
12806: PPUSH
12807: LD_INT 1
12809: PPUSH
12810: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12814: LD_INT 58
12816: PPUSH
12817: LD_VAR 0 3
12821: PPUSH
12822: LD_INT 1
12824: PPUSH
12825: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12829: LD_INT 28
12831: PPUSH
12832: LD_VAR 0 3
12836: PPUSH
12837: LD_INT 1
12839: PPUSH
12840: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12844: LD_INT 29
12846: PPUSH
12847: LD_VAR 0 3
12851: PPUSH
12852: LD_INT 1
12854: PPUSH
12855: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12859: LD_INT 30
12861: PPUSH
12862: LD_VAR 0 3
12866: PPUSH
12867: LD_INT 1
12869: PPUSH
12870: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12874: LD_INT 37
12876: PPUSH
12877: LD_VAR 0 3
12881: PPUSH
12882: LD_INT 1
12884: PPUSH
12885: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12889: LD_INT 63
12891: PPUSH
12892: LD_VAR 0 3
12896: PPUSH
12897: LD_INT 1
12899: PPUSH
12900: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12904: LD_INT 64
12906: PPUSH
12907: LD_VAR 0 3
12911: PPUSH
12912: LD_INT 1
12914: PPUSH
12915: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12919: LD_INT 3
12921: PPUSH
12922: LD_VAR 0 3
12926: PPUSH
12927: LD_INT 1
12929: PPUSH
12930: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12934: LD_INT 4
12936: PPUSH
12937: LD_VAR 0 3
12941: PPUSH
12942: LD_INT 1
12944: PPUSH
12945: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12949: LD_INT 5
12951: PPUSH
12952: LD_VAR 0 3
12956: PPUSH
12957: LD_INT 1
12959: PPUSH
12960: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12964: LD_INT 8
12966: PPUSH
12967: LD_VAR 0 3
12971: PPUSH
12972: LD_INT 1
12974: PPUSH
12975: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12979: LD_INT 66
12981: PPUSH
12982: LD_VAR 0 3
12986: PPUSH
12987: LD_INT 1
12989: PPUSH
12990: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12994: LD_INT 67
12996: PPUSH
12997: LD_VAR 0 3
13001: PPUSH
13002: LD_INT 1
13004: PPUSH
13005: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13009: LD_INT 21
13011: PPUSH
13012: LD_VAR 0 3
13016: PPUSH
13017: LD_INT 1
13019: PPUSH
13020: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13024: LD_INT 22
13026: PPUSH
13027: LD_VAR 0 3
13031: PPUSH
13032: LD_INT 1
13034: PPUSH
13035: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13039: LD_INT 19
13041: PPUSH
13042: LD_VAR 0 3
13046: PPUSH
13047: LD_INT 1
13049: PPUSH
13050: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13054: LD_INT 26
13056: PPUSH
13057: LD_VAR 0 3
13061: PPUSH
13062: LD_INT 1
13064: PPUSH
13065: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13069: LD_INT 54
13071: PPUSH
13072: LD_VAR 0 3
13076: PPUSH
13077: LD_INT 1
13079: PPUSH
13080: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13084: LD_INT 55
13086: PPUSH
13087: LD_VAR 0 3
13091: PPUSH
13092: LD_INT 1
13094: PPUSH
13095: CALL_OW 322
// for i = 0 to 39 do
13099: LD_ADDR_VAR 0 4
13103: PUSH
13104: DOUBLE
13105: LD_INT 0
13107: DEC
13108: ST_TO_ADDR
13109: LD_INT 39
13111: PUSH
13112: FOR_TO
13113: IFFALSE 13134
// SetRestrict ( i , side , true ) ;
13115: LD_VAR 0 4
13119: PPUSH
13120: LD_VAR 0 3
13124: PPUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 324
13132: GO 13112
13134: POP
13135: POP
// end ; else
13136: GO 13213
13138: POP
// begin for i = 1 to 73 do
13139: LD_ADDR_VAR 0 4
13143: PUSH
13144: DOUBLE
13145: LD_INT 1
13147: DEC
13148: ST_TO_ADDR
13149: LD_INT 73
13151: PUSH
13152: FOR_TO
13153: IFFALSE 13174
// SetTech ( i , side , state_enabled ) ;
13155: LD_VAR 0 4
13159: PPUSH
13160: LD_VAR 0 3
13164: PPUSH
13165: LD_INT 1
13167: PPUSH
13168: CALL_OW 322
13172: GO 13152
13174: POP
13175: POP
// for i = 0 to 39 do
13176: LD_ADDR_VAR 0 4
13180: PUSH
13181: DOUBLE
13182: LD_INT 0
13184: DEC
13185: ST_TO_ADDR
13186: LD_INT 39
13188: PUSH
13189: FOR_TO
13190: IFFALSE 13211
// SetRestrict ( i , side , true ) ;
13192: LD_VAR 0 4
13196: PPUSH
13197: LD_VAR 0 3
13201: PPUSH
13202: LD_INT 1
13204: PPUSH
13205: CALL_OW 324
13209: GO 13189
13211: POP
13212: POP
// end ; end ; end ;
13213: GO 9218
13215: POP
13216: POP
// end ; end_of_file
13217: LD_VAR 0 2
13221: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13222: LD_INT 0
13224: PPUSH
13225: PPUSH
13226: PPUSH
13227: PPUSH
13228: PPUSH
13229: PPUSH
13230: PPUSH
13231: PPUSH
13232: PPUSH
// for i := 1 to 8 do
13233: LD_ADDR_VAR 0 2
13237: PUSH
13238: DOUBLE
13239: LD_INT 1
13241: DEC
13242: ST_TO_ADDR
13243: LD_INT 8
13245: PUSH
13246: FOR_TO
13247: IFFALSE 13631
// begin if Side_Positions [ i ] then
13249: LD_EXP 34
13253: PUSH
13254: LD_VAR 0 2
13258: ARRAY
13259: IFFALSE 13629
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13261: LD_ADDR_VAR 0 7
13265: PUSH
13266: LD_INT 22
13268: PUSH
13269: LD_VAR 0 2
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 21
13280: PUSH
13281: LD_INT 1
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PPUSH
13292: CALL_OW 69
13296: PUSH
13297: LD_INT 0
13299: PLUS
13300: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13301: LD_ADDR_VAR 0 9
13305: PUSH
13306: LD_INT 22
13308: PUSH
13309: LD_VAR 0 2
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 2
13320: PUSH
13321: LD_INT 30
13323: PUSH
13324: LD_INT 0
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 30
13333: PUSH
13334: LD_INT 1
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PPUSH
13350: CALL_OW 69
13354: ST_TO_ADDR
// crates := 0 ;
13355: LD_ADDR_VAR 0 4
13359: PUSH
13360: LD_INT 0
13362: ST_TO_ADDR
// oil := 0 ;
13363: LD_ADDR_VAR 0 5
13367: PUSH
13368: LD_INT 0
13370: ST_TO_ADDR
// sib := 0 ;
13371: LD_ADDR_VAR 0 6
13375: PUSH
13376: LD_INT 0
13378: ST_TO_ADDR
// if bases then
13379: LD_VAR 0 9
13383: IFFALSE 13489
// begin for j in bases do
13385: LD_ADDR_VAR 0 3
13389: PUSH
13390: LD_VAR 0 9
13394: PUSH
13395: FOR_IN
13396: IFFALSE 13487
// begin base := GetBase ( j ) ;
13398: LD_ADDR_VAR 0 8
13402: PUSH
13403: LD_VAR 0 3
13407: PPUSH
13408: CALL_OW 274
13412: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13413: LD_ADDR_VAR 0 4
13417: PUSH
13418: LD_VAR 0 4
13422: PUSH
13423: LD_VAR 0 8
13427: PPUSH
13428: LD_INT 1
13430: PPUSH
13431: CALL_OW 275
13435: PLUS
13436: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13437: LD_ADDR_VAR 0 5
13441: PUSH
13442: LD_VAR 0 5
13446: PUSH
13447: LD_VAR 0 8
13451: PPUSH
13452: LD_INT 2
13454: PPUSH
13455: CALL_OW 275
13459: PLUS
13460: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13461: LD_ADDR_VAR 0 6
13465: PUSH
13466: LD_VAR 0 6
13470: PUSH
13471: LD_VAR 0 8
13475: PPUSH
13476: LD_INT 3
13478: PPUSH
13479: CALL_OW 275
13483: PLUS
13484: ST_TO_ADDR
// end ;
13485: GO 13395
13487: POP
13488: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13489: LD_STRING setSpecText(
13491: PUSH
13492: LD_VAR 0 2
13496: STR
13497: PUSH
13498: LD_STRING ,
13500: STR
13501: PUSH
13502: LD_INT 2
13504: STR
13505: PUSH
13506: LD_STRING ,
13508: STR
13509: PUSH
13510: LD_VAR 0 4
13514: STR
13515: PUSH
13516: LD_STRING )
13518: STR
13519: PPUSH
13520: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13524: LD_STRING setSpecText(
13526: PUSH
13527: LD_VAR 0 2
13531: STR
13532: PUSH
13533: LD_STRING ,
13535: STR
13536: PUSH
13537: LD_INT 3
13539: STR
13540: PUSH
13541: LD_STRING ,
13543: STR
13544: PUSH
13545: LD_VAR 0 5
13549: STR
13550: PUSH
13551: LD_STRING )
13553: STR
13554: PPUSH
13555: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13559: LD_STRING setSpecText(
13561: PUSH
13562: LD_VAR 0 2
13566: STR
13567: PUSH
13568: LD_STRING ,
13570: STR
13571: PUSH
13572: LD_INT 4
13574: STR
13575: PUSH
13576: LD_STRING ,
13578: STR
13579: PUSH
13580: LD_VAR 0 6
13584: STR
13585: PUSH
13586: LD_STRING )
13588: STR
13589: PPUSH
13590: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13594: LD_STRING setSpecText(
13596: PUSH
13597: LD_VAR 0 2
13601: STR
13602: PUSH
13603: LD_STRING ,
13605: STR
13606: PUSH
13607: LD_INT 5
13609: STR
13610: PUSH
13611: LD_STRING ,
13613: STR
13614: PUSH
13615: LD_VAR 0 7
13619: STR
13620: PUSH
13621: LD_STRING )
13623: STR
13624: PPUSH
13625: CALL_OW 559
// end ; end ;
13629: GO 13246
13631: POP
13632: POP
// end ;
13633: LD_VAR 0 1
13637: RET
// every 0 0$1 do
13638: GO 13640
13640: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13641: LD_STRING setSpecLogoNumber(
13643: PUSH
13644: LD_INT 2
13646: STR
13647: PUSH
13648: LD_STRING ,
13650: STR
13651: PUSH
13652: LD_INT 1
13654: STR
13655: PUSH
13656: LD_STRING )
13658: STR
13659: PPUSH
13660: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13664: LD_STRING setSpecLogoNumber(
13666: PUSH
13667: LD_INT 3
13669: STR
13670: PUSH
13671: LD_STRING ,
13673: STR
13674: PUSH
13675: LD_INT 2
13677: STR
13678: PUSH
13679: LD_STRING )
13681: STR
13682: PPUSH
13683: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13687: LD_STRING setSpecLogoNumber(
13689: PUSH
13690: LD_INT 4
13692: STR
13693: PUSH
13694: LD_STRING ,
13696: STR
13697: PUSH
13698: LD_INT 3
13700: STR
13701: PUSH
13702: LD_STRING )
13704: STR
13705: PPUSH
13706: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13710: LD_STRING setSpecLogoNumber(
13712: PUSH
13713: LD_INT 5
13715: STR
13716: PUSH
13717: LD_STRING ,
13719: STR
13720: PUSH
13721: LD_INT 4
13723: STR
13724: PUSH
13725: LD_STRING )
13727: STR
13728: PPUSH
13729: CALL_OW 559
// end ;
13733: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13734: LD_INT 2
13736: PUSH
13737: LD_INT 30
13739: PUSH
13740: LD_INT 0
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 30
13749: PUSH
13750: LD_INT 1
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: LIST
13761: PPUSH
13762: CALL_OW 69
13766: IFFALSE 13776
13768: GO 13770
13770: DISABLE
// begin enable ;
13771: ENABLE
// UpdateSpectatorBar ;
13772: CALL 13222 0 0
// end ; end_of_file
13776: END
// var respawn , inqueue ; export function init_respawning ; begin
13777: LD_INT 0
13779: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13780: LD_ADDR_LOC 18
13784: PUSH
13785: LD_INT 1
13787: PPUSH
13788: LD_INT 8
13790: PPUSH
13791: CALL_OW 12
13795: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13796: LD_ADDR_LOC 19
13800: PUSH
13801: LD_INT 0
13803: PUSH
13804: LD_INT 0
13806: PUSH
13807: LD_INT 0
13809: PUSH
13810: LD_INT 0
13812: PUSH
13813: LD_INT 0
13815: PUSH
13816: LD_INT 0
13818: PUSH
13819: LD_INT 0
13821: PUSH
13822: LD_INT 0
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: ST_TO_ADDR
// end ;
13835: LD_VAR 0 1
13839: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13840: GO 13842
13842: DISABLE
13843: LD_INT 0
13845: PPUSH
13846: PPUSH
13847: PPUSH
// begin if respawning_time_max = 0 then
13848: LD_EXP 28
13852: PUSH
13853: LD_INT 0
13855: EQUAL
13856: IFFALSE 13860
// exit ;
13858: GO 14268
// if respawn = 8 then
13860: LD_LOC 18
13864: PUSH
13865: LD_INT 8
13867: EQUAL
13868: IFFALSE 13880
// respawn := 1 else
13870: LD_ADDR_LOC 18
13874: PUSH
13875: LD_INT 1
13877: ST_TO_ADDR
13878: GO 13894
// respawn := respawn + 1 ;
13880: LD_ADDR_LOC 18
13884: PUSH
13885: LD_LOC 18
13889: PUSH
13890: LD_INT 1
13892: PLUS
13893: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13894: LD_EXP 34
13898: PUSH
13899: LD_LOC 18
13903: ARRAY
13904: PUSH
13905: LD_LOC 19
13909: PUSH
13910: LD_LOC 18
13914: ARRAY
13915: NOT
13916: AND
13917: IFFALSE 14267
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13919: LD_ADDR_VAR 0 1
13923: PUSH
13924: LD_INT 21
13926: PUSH
13927: LD_INT 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: LD_INT 22
13936: PUSH
13937: LD_LOC 18
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 3
13948: PUSH
13949: LD_INT 23
13951: PUSH
13952: LD_INT 0
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: PPUSH
13965: CALL_OW 69
13969: ST_TO_ADDR
// if n < number_of_people then
13970: LD_VAR 0 1
13974: PUSH
13975: LD_EXP 19
13979: LESS
13980: IFFALSE 14264
// begin aktresp := respawn ;
13982: LD_ADDR_VAR 0 3
13986: PUSH
13987: LD_LOC 18
13991: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13992: LD_ADDR_LOC 19
13996: PUSH
13997: LD_LOC 19
14001: PPUSH
14002: LD_VAR 0 3
14006: PPUSH
14007: LD_INT 1
14009: PPUSH
14010: CALL_OW 1
14014: ST_TO_ADDR
// enable ;
14015: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14016: LD_EXP 27
14020: PPUSH
14021: LD_EXP 28
14025: PPUSH
14026: CALL_OW 12
14030: PPUSH
14031: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14035: LD_ADDR_LOC 19
14039: PUSH
14040: LD_LOC 19
14044: PPUSH
14045: LD_VAR 0 3
14049: PPUSH
14050: LD_INT 0
14052: PPUSH
14053: CALL_OW 1
14057: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14058: LD_ADDR_VAR 0 2
14062: PUSH
14063: LD_INT 21
14065: PUSH
14066: LD_INT 3
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 2
14075: PUSH
14076: LD_INT 30
14078: PUSH
14079: LD_INT 0
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: LD_INT 30
14088: PUSH
14089: LD_INT 1
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: LIST
14100: PUSH
14101: LD_INT 50
14103: PUSH
14104: EMPTY
14105: LIST
14106: PUSH
14107: LD_INT 22
14109: PUSH
14110: LD_VAR 0 3
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: PPUSH
14125: CALL_OW 69
14129: ST_TO_ADDR
// if dep = 0 then
14130: LD_VAR 0 2
14134: PUSH
14135: LD_INT 0
14137: EQUAL
14138: IFFALSE 14142
// exit ;
14140: GO 14268
// hc_name :=  ;
14142: LD_ADDR_OWVAR 26
14146: PUSH
14147: LD_STRING 
14149: ST_TO_ADDR
// hc_importance := 0 ;
14150: LD_ADDR_OWVAR 32
14154: PUSH
14155: LD_INT 0
14157: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14158: LD_INT 0
14160: PPUSH
14161: LD_INT 0
14163: PPUSH
14164: LD_EXP 20
14168: PUSH
14169: LD_INT 2
14171: DIV
14172: PPUSH
14173: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14177: LD_ADDR_OWVAR 21
14181: PUSH
14182: LD_EXP 35
14186: PUSH
14187: LD_VAR 0 3
14191: ARRAY
14192: ST_TO_ADDR
// uc_side := aktresp ;
14193: LD_ADDR_OWVAR 20
14197: PUSH
14198: LD_VAR 0 3
14202: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14203: LD_ADDR_VAR 0 2
14207: PUSH
14208: LD_VAR 0 2
14212: PUSH
14213: LD_INT 1
14215: PPUSH
14216: LD_VAR 0 2
14220: PPUSH
14221: CALL_OW 12
14225: ARRAY
14226: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14227: CALL_OW 44
14231: PPUSH
14232: LD_VAR 0 2
14236: PPUSH
14237: CALL_OW 250
14241: PPUSH
14242: LD_VAR 0 2
14246: PPUSH
14247: CALL_OW 251
14251: PPUSH
14252: LD_INT 7
14254: PPUSH
14255: LD_INT 1
14257: PPUSH
14258: CALL_OW 50
// end else
14262: GO 14265
// enable ;
14264: ENABLE
// end else
14265: GO 14268
// enable ;
14267: ENABLE
// end ; end_of_file
14268: PPOPN 3
14270: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14271: LD_INT 0
14273: PPUSH
14274: PPUSH
14275: PPUSH
// BuildUpTime_Delay = 0 ;
14276: LD_ADDR_EXP 57
14280: PUSH
14281: LD_INT 0
14283: ST_TO_ADDR
// if not def_builduptime then
14284: LD_EXP 14
14288: NOT
14289: IFFALSE 14293
// exit ;
14291: GO 14476
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14293: LD_ADDR_EXP 57
14297: PUSH
14298: LD_INT 8400
14300: PUSH
14301: LD_INT 2100
14303: PUSH
14304: LD_EXP 14
14308: MUL
14309: PLUS
14310: ST_TO_ADDR
// BuildUpTimeActive := true ;
14311: LD_ADDR_EXP 56
14315: PUSH
14316: LD_INT 1
14318: ST_TO_ADDR
// for i := 1 to 8 do
14319: LD_ADDR_VAR 0 2
14323: PUSH
14324: DOUBLE
14325: LD_INT 1
14327: DEC
14328: ST_TO_ADDR
14329: LD_INT 8
14331: PUSH
14332: FOR_TO
14333: IFFALSE 14474
// if Side_Positions [ i ] then
14335: LD_EXP 34
14339: PUSH
14340: LD_VAR 0 2
14344: ARRAY
14345: IFFALSE 14472
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14347: LD_EXP 55
14351: PUSH
14352: LD_EXP 34
14356: PUSH
14357: LD_VAR 0 2
14361: ARRAY
14362: ARRAY
14363: PPUSH
14364: LD_INT 5
14366: PPUSH
14367: CALL_OW 424
// for j := 1 to 8 do
14371: LD_ADDR_VAR 0 3
14375: PUSH
14376: DOUBLE
14377: LD_INT 1
14379: DEC
14380: ST_TO_ADDR
14381: LD_INT 8
14383: PUSH
14384: FOR_TO
14385: IFFALSE 14470
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14387: LD_EXP 34
14391: PUSH
14392: LD_VAR 0 3
14396: ARRAY
14397: PUSH
14398: LD_EXP 31
14402: PUSH
14403: LD_VAR 0 2
14407: ARRAY
14408: PUSH
14409: LD_EXP 31
14413: PUSH
14414: LD_VAR 0 3
14418: ARRAY
14419: NONEQUAL
14420: PUSH
14421: LD_EXP 36
14425: NOT
14426: PUSH
14427: LD_VAR 0 2
14431: PUSH
14432: LD_VAR 0 3
14436: NONEQUAL
14437: AND
14438: OR
14439: AND
14440: IFFALSE 14468
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14442: LD_VAR 0 3
14446: PPUSH
14447: LD_EXP 55
14451: PUSH
14452: LD_EXP 34
14456: PUSH
14457: LD_VAR 0 2
14461: ARRAY
14462: ARRAY
14463: PPUSH
14464: CALL_OW 333
14468: GO 14384
14470: POP
14471: POP
// end ;
14472: GO 14332
14474: POP
14475: POP
// end ;
14476: LD_VAR 0 1
14480: RET
// export function EndBuildUp ; var i , j ; begin
14481: LD_INT 0
14483: PPUSH
14484: PPUSH
14485: PPUSH
// BuildUpTimeActive := false ;
14486: LD_ADDR_EXP 56
14490: PUSH
14491: LD_INT 0
14493: ST_TO_ADDR
// for i := 1 to 8 do
14494: LD_ADDR_VAR 0 2
14498: PUSH
14499: DOUBLE
14500: LD_INT 1
14502: DEC
14503: ST_TO_ADDR
14504: LD_INT 8
14506: PUSH
14507: FOR_TO
14508: IFFALSE 14649
// if Side_Positions [ i ] then
14510: LD_EXP 34
14514: PUSH
14515: LD_VAR 0 2
14519: ARRAY
14520: IFFALSE 14647
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14522: LD_EXP 55
14526: PUSH
14527: LD_EXP 34
14531: PUSH
14532: LD_VAR 0 2
14536: ARRAY
14537: ARRAY
14538: PPUSH
14539: LD_INT 0
14541: PPUSH
14542: CALL_OW 424
// for j := 1 to 8 do
14546: LD_ADDR_VAR 0 3
14550: PUSH
14551: DOUBLE
14552: LD_INT 1
14554: DEC
14555: ST_TO_ADDR
14556: LD_INT 8
14558: PUSH
14559: FOR_TO
14560: IFFALSE 14645
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14562: LD_EXP 34
14566: PUSH
14567: LD_VAR 0 3
14571: ARRAY
14572: PUSH
14573: LD_EXP 31
14577: PUSH
14578: LD_VAR 0 2
14582: ARRAY
14583: PUSH
14584: LD_EXP 31
14588: PUSH
14589: LD_VAR 0 3
14593: ARRAY
14594: NONEQUAL
14595: PUSH
14596: LD_EXP 36
14600: NOT
14601: PUSH
14602: LD_VAR 0 2
14606: PUSH
14607: LD_VAR 0 3
14611: NONEQUAL
14612: AND
14613: OR
14614: AND
14615: IFFALSE 14643
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14617: LD_VAR 0 3
14621: PPUSH
14622: LD_EXP 55
14626: PUSH
14627: LD_EXP 34
14631: PUSH
14632: LD_VAR 0 2
14636: ARRAY
14637: ARRAY
14638: PPUSH
14639: CALL_OW 334
14643: GO 14559
14645: POP
14646: POP
// end ;
14647: GO 14507
14649: POP
14650: POP
// end ;
14651: LD_VAR 0 1
14655: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14656: LD_EXP 56
14660: IFFALSE 14835
14662: GO 14664
14664: DISABLE
14665: LD_INT 0
14667: PPUSH
14668: PPUSH
// begin for i := 1 to 8 do
14669: LD_ADDR_VAR 0 1
14673: PUSH
14674: DOUBLE
14675: LD_INT 1
14677: DEC
14678: ST_TO_ADDR
14679: LD_INT 8
14681: PUSH
14682: FOR_TO
14683: IFFALSE 14832
// if Side_Positions [ i ] then
14685: LD_EXP 34
14689: PUSH
14690: LD_VAR 0 1
14694: ARRAY
14695: IFFALSE 14830
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14697: LD_ADDR_VAR 0 2
14701: PUSH
14702: LD_EXP 55
14706: PUSH
14707: LD_EXP 34
14711: PUSH
14712: LD_VAR 0 1
14716: ARRAY
14717: ARRAY
14718: PPUSH
14719: LD_INT 2
14721: PUSH
14722: LD_INT 21
14724: PUSH
14725: LD_INT 1
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 21
14734: PUSH
14735: LD_INT 2
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 22
14749: PUSH
14750: LD_OWVAR 2
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PPUSH
14763: CALL_OW 70
14767: PUSH
14768: FOR_IN
14769: IFFALSE 14828
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14771: LD_EXP 31
14775: PUSH
14776: LD_VAR 0 1
14780: ARRAY
14781: PUSH
14782: LD_EXP 31
14786: PUSH
14787: LD_OWVAR 2
14791: ARRAY
14792: NONEQUAL
14793: PUSH
14794: LD_EXP 36
14798: NOT
14799: PUSH
14800: LD_VAR 0 1
14804: PUSH
14805: LD_OWVAR 2
14809: NONEQUAL
14810: AND
14811: OR
14812: IFFALSE 14826
// ComMoveToArea ( un , BuildUpEscape ) ;
14814: LD_VAR 0 2
14818: PPUSH
14819: LD_INT 17
14821: PPUSH
14822: CALL_OW 113
14826: GO 14768
14828: POP
14829: POP
14830: GO 14682
14832: POP
14833: POP
// enable ;
14834: ENABLE
// end ;
14835: PPOPN 2
14837: END
// every 0 0$1 trigger def_builduptime do
14838: LD_EXP 14
14842: IFFALSE 14868
14844: GO 14846
14846: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14847: LD_INT 8400
14849: PUSH
14850: LD_EXP 14
14854: PUSH
14855: LD_INT 2100
14857: MUL
14858: PLUS
14859: PPUSH
14860: CALL_OW 67
// EndBuildUp ;
14864: CALL 14481 0 0
// end ;
14868: END
