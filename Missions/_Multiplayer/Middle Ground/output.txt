// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 15
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 33
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 34
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 32
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 31
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 15
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 33
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 30
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 34
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 32
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 31
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 35
 372: PUSH
 373: LD_EXP 30
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 587
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 5 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 5
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 564: LD_ADDR_VAR 0 3
 568: PUSH
 569: LD_INT 22
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_win_rules = 0 ;
 577: LD_ADDR_EXP 29
 581: PUSH
 582: LD_INT 0
 584: ST_TO_ADDR
// end else
 585: GO 711
// begin Randomize ;
 587: CALL_OW 10
// def_base_level := 1 ;
 591: LD_ADDR_EXP 1
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// def_amount_of_people := 0 ;
 599: LD_ADDR_EXP 2
 603: PUSH
 604: LD_INT 0
 606: ST_TO_ADDR
// def_skill_level := 1 ;
 607: LD_ADDR_EXP 3
 611: PUSH
 612: LD_INT 1
 614: ST_TO_ADDR
// def_starting_resources := 2 ;
 615: LD_ADDR_EXP 4
 619: PUSH
 620: LD_INT 2
 622: ST_TO_ADDR
// def_shipments_density := 50 ;
 623: LD_ADDR_EXP 5
 627: PUSH
 628: LD_INT 50
 630: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 631: LD_ADDR_EXP 6
 635: PUSH
 636: LD_INT 0
 638: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 639: LD_ADDR_EXP 7
 643: PUSH
 644: LD_INT 1
 646: ST_TO_ADDR
// def_shared_vision := 1 ;
 647: LD_ADDR_EXP 8
 651: PUSH
 652: LD_INT 1
 654: ST_TO_ADDR
// def_morale_flags := 1 ;
 655: LD_ADDR_EXP 9
 659: PUSH
 660: LD_INT 1
 662: ST_TO_ADDR
// def_siberite_detection := 1 ;
 663: LD_ADDR_EXP 10
 667: PUSH
 668: LD_INT 1
 670: ST_TO_ADDR
// def_people_respawning := 2 ;
 671: LD_ADDR_EXP 11
 675: PUSH
 676: LD_INT 2
 678: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
 679: LD_ADDR_EXP 12
 683: PUSH
 684: LD_INT 1
 686: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 687: LD_ADDR_EXP 13
 691: PUSH
 692: LD_INT 2
 694: ST_TO_ADDR
// tech_level = 4 ;
 695: LD_ADDR_VAR 0 3
 699: PUSH
 700: LD_INT 4
 702: ST_TO_ADDR
// def_win_rules = 0 ;
 703: LD_ADDR_EXP 29
 707: PUSH
 708: LD_INT 0
 710: ST_TO_ADDR
// end ; if isSGUI then
 711: LD_OWVAR 83
 715: IFFALSE 723
// setMpTechs ( ) else
 717: CALL 8515 0 0
 721: GO 736
// SetMpTechLevel ( tech_level + 1 ) ;
 723: LD_VAR 0 3
 727: PUSH
 728: LD_INT 1
 730: PLUS
 731: PPUSH
 732: CALL 8662 0 1
// is_depot := [ 0 , 1 ] [ def_base_level + 1 ] ;
 736: LD_ADDR_EXP 16
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 1
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: LD_EXP 1
 755: PUSH
 756: LD_INT 1
 758: PLUS
 759: ARRAY
 760: ST_TO_ADDR
// number_of_people := [ 6 , 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 761: LD_ADDR_EXP 18
 765: PUSH
 766: LD_INT 6
 768: PUSH
 769: LD_INT 9
 771: PUSH
 772: LD_INT 12
 774: PUSH
 775: LD_INT 15
 777: PUSH
 778: LD_INT 24
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: PUSH
 788: LD_EXP 2
 792: PUSH
 793: LD_INT 1
 795: PLUS
 796: ARRAY
 797: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 798: LD_ADDR_EXP 19
 802: PUSH
 803: LD_INT 2
 805: PUSH
 806: LD_INT 3
 808: PUSH
 809: LD_INT 4
 811: PUSH
 812: LD_INT 5
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_EXP 3
 825: PUSH
 826: LD_INT 1
 828: PLUS
 829: ARRAY
 830: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 831: LD_ADDR_EXP 21
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: LD_INT 0
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: PUSH
 850: LD_INT 30
 852: PUSH
 853: LD_INT 0
 855: PUSH
 856: LD_INT 0
 858: PUSH
 859: EMPTY
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 50
 866: PUSH
 867: LD_INT 20
 869: PUSH
 870: LD_INT 0
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: LIST
 877: PUSH
 878: LD_INT 80
 880: PUSH
 881: LD_INT 40
 883: PUSH
 884: LD_INT 20
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: LIST
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: PUSH
 898: LD_EXP 4
 902: PUSH
 903: LD_INT 1
 905: PLUS
 906: ARRAY
 907: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 908: LD_ADDR_EXP 20
 912: PUSH
 913: LD_INT 10
 915: PUSH
 916: EMPTY
 917: LIST
 918: PUSH
 919: LD_INT 7
 921: PUSH
 922: LD_INT 14
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 6
 931: PUSH
 932: LD_INT 12
 934: PUSH
 935: LD_INT 18
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_INT 5
 945: PUSH
 946: LD_INT 10
 948: PUSH
 949: LD_INT 15
 951: PUSH
 952: LD_INT 20
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: LIST
 966: PUSH
 967: LD_EXP 4
 971: PUSH
 972: LD_INT 1
 974: PLUS
 975: ARRAY
 976: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
 977: LD_ADDR_EXP 22
 981: PUSH
 982: LD_INT 150
 984: PUSH
 985: LD_EXP 5
 989: MINUS
 990: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
 991: LD_ADDR_EXP 26
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 10500
1001: PUSH
1002: LD_INT 6300
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: PUSH
1010: LD_EXP 11
1014: PUSH
1015: LD_INT 1
1017: PLUS
1018: ARRAY
1019: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1020: LD_ADDR_EXP 27
1024: PUSH
1025: LD_INT 0
1027: PUSH
1028: LD_INT 31500
1030: PUSH
1031: LD_INT 10500
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: PUSH
1039: LD_EXP 11
1043: PUSH
1044: LD_INT 1
1046: PLUS
1047: ARRAY
1048: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 ] [ def_amount_of_apemen + 1 ] ;
1049: LD_ADDR_EXP 24
1053: PUSH
1054: LD_INT 0
1056: PUSH
1057: LD_INT 1
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: LD_EXP 12
1068: PUSH
1069: LD_INT 1
1071: PLUS
1072: ARRAY
1073: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1074: LD_ADDR_EXP 23
1078: PUSH
1079: LD_INT 1
1081: NEG
1082: PUSH
1083: LD_INT 350
1085: PUSH
1086: LD_INT 700
1088: PUSH
1089: LD_INT 1400
1091: PUSH
1092: LD_INT 0
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: LD_EXP 9
1106: PUSH
1107: LD_INT 1
1109: PLUS
1110: ARRAY
1111: ST_TO_ADDR
// battle_flags_id := [ ] ;
1112: LD_ADDR_EXP 43
1116: PUSH
1117: EMPTY
1118: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1119: LD_EXP 13
1123: PUSH
1124: LD_INT 0
1126: EQUAL
1127: IFFALSE 1139
// siberite_bomb_Delay = 0 else
1129: LD_ADDR_EXP 28
1133: PUSH
1134: LD_INT 0
1136: ST_TO_ADDR
1137: GO 1161
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1139: LD_ADDR_EXP 28
1143: PUSH
1144: LD_EXP 13
1148: PUSH
1149: LD_INT 1
1151: MINUS
1152: PUSH
1153: LD_INT 21000
1155: MUL
1156: PUSH
1157: LD_INT 1
1159: PLUS
1160: ST_TO_ADDR
// end ;
1161: LD_VAR 0 1
1165: RET
// function init_map ; var i , j ; begin
1166: LD_INT 0
1168: PPUSH
1169: PPUSH
1170: PPUSH
// normal_oil_deposits_locations := [ [ 8 , 7 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 188 , 105 ] ] ;
1171: LD_ADDR_EXP 39
1175: PUSH
1176: LD_INT 8
1178: PUSH
1179: LD_INT 7
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: LD_INT 0
1188: PUSH
1189: LD_INT 0
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: LD_INT 0
1198: PUSH
1199: LD_INT 0
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 0
1208: PUSH
1209: LD_INT 0
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: LD_INT 0
1218: PUSH
1219: LD_INT 0
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PUSH
1226: LD_INT 0
1228: PUSH
1229: LD_INT 0
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 0
1238: PUSH
1239: LD_INT 0
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 188
1248: PUSH
1249: LD_INT 105
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 0 , 0 ] , [ 30 , 49 ] , [ 92 , 31 ] , [ 139 , 13 ] , [ 149 , 50 ] , [ 64 , 113 ] , [ 116 , 126 ] , [ 0 , 0 ] ] ;
1266: LD_ADDR_EXP 40
1270: PUSH
1271: LD_INT 0
1273: PUSH
1274: LD_INT 0
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 30
1283: PUSH
1284: LD_INT 49
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 92
1293: PUSH
1294: LD_INT 31
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 139
1303: PUSH
1304: LD_INT 13
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 149
1313: PUSH
1314: LD_INT 50
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 64
1323: PUSH
1324: LD_INT 113
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 116
1333: PUSH
1334: LD_INT 126
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: LD_INT 0
1343: PUSH
1344: LD_INT 0
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 25 , 4 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 0 , 0 ] , [ 179 , 121 ] ] ;
1361: LD_ADDR_EXP 41
1365: PUSH
1366: LD_INT 25
1368: PUSH
1369: LD_INT 4
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 0
1378: PUSH
1379: LD_INT 0
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 0
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 0
1398: PUSH
1399: LD_INT 0
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: LD_INT 0
1408: PUSH
1409: LD_INT 0
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PUSH
1416: LD_INT 0
1418: PUSH
1419: LD_INT 0
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: LD_INT 0
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PUSH
1436: LD_INT 179
1438: PUSH
1439: LD_INT 121
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 0 , 0 ] , [ 85 , 7 ] , [ 113 , 5 ] , [ 52 , 61 ] , [ 168 , 70 ] , [ 89 , 115 ] , [ 143 , 125 ] , [ 0 , 0 ] ] ;
1456: LD_ADDR_EXP 42
1460: PUSH
1461: LD_INT 0
1463: PUSH
1464: LD_INT 0
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PUSH
1471: LD_INT 85
1473: PUSH
1474: LD_INT 7
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 113
1483: PUSH
1484: LD_INT 5
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: PUSH
1491: LD_INT 52
1493: PUSH
1494: LD_INT 61
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: PUSH
1501: LD_INT 168
1503: PUSH
1504: LD_INT 70
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PUSH
1511: LD_INT 89
1513: PUSH
1514: LD_INT 115
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 143
1523: PUSH
1524: LD_INT 125
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 0
1533: PUSH
1534: LD_INT 0
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// depot_def := [ [ 16 , 6 , 3 ] , [ 74 , 6 , 3 ] , [ 127 , 6 , 3 ] , [ 37 , 61 , 0 ] , [ 162 , 58 , 3 ] , [ 80 , 128 , 0 ] , [ 130 , 131 , 5 ] , [ 193 , 120 , 5 ] ] ;
1551: LD_ADDR_EXP 36
1555: PUSH
1556: LD_INT 16
1558: PUSH
1559: LD_INT 6
1561: PUSH
1562: LD_INT 3
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 74
1572: PUSH
1573: LD_INT 6
1575: PUSH
1576: LD_INT 3
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: PUSH
1584: LD_INT 127
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: LD_INT 3
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: LD_INT 37
1600: PUSH
1601: LD_INT 61
1603: PUSH
1604: LD_INT 0
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 162
1614: PUSH
1615: LD_INT 58
1617: PUSH
1618: LD_INT 3
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 80
1628: PUSH
1629: LD_INT 128
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 130
1642: PUSH
1643: LD_INT 131
1645: PUSH
1646: LD_INT 5
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 193
1656: PUSH
1657: LD_INT 120
1659: PUSH
1660: LD_INT 5
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: ST_TO_ADDR
// for i in depot_def do
1678: LD_ADDR_VAR 0 2
1682: PUSH
1683: LD_EXP 36
1687: PUSH
1688: FOR_IN
1689: IFFALSE 1765
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1691: LD_ADDR_EXP 38
1695: PUSH
1696: LD_EXP 38
1700: PUSH
1701: LD_VAR 0 2
1705: PUSH
1706: LD_INT 1
1708: ARRAY
1709: PPUSH
1710: LD_VAR 0 2
1714: PUSH
1715: LD_INT 3
1717: ARRAY
1718: PPUSH
1719: LD_INT 4
1721: NEG
1722: PPUSH
1723: CALL_OW 272
1727: PUSH
1728: LD_VAR 0 2
1732: PUSH
1733: LD_INT 2
1735: ARRAY
1736: PPUSH
1737: LD_VAR 0 2
1741: PUSH
1742: LD_INT 3
1744: ARRAY
1745: PPUSH
1746: LD_INT 4
1748: NEG
1749: PPUSH
1750: CALL_OW 273
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: EMPTY
1760: LIST
1761: ADD
1762: ST_TO_ADDR
1763: GO 1688
1765: POP
1766: POP
// for i = 1 to Side_Positions do
1767: LD_ADDR_VAR 0 2
1771: PUSH
1772: DOUBLE
1773: LD_INT 1
1775: DEC
1776: ST_TO_ADDR
1777: LD_EXP 33
1781: PUSH
1782: FOR_TO
1783: IFFALSE 1958
// begin if not Side_Positions [ i ] then
1785: LD_EXP 33
1789: PUSH
1790: LD_VAR 0 2
1794: ARRAY
1795: NOT
1796: IFFALSE 1800
// continue ;
1798: GO 1782
// if normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] > 0 then
1800: LD_EXP 39
1804: PUSH
1805: LD_EXP 33
1809: PUSH
1810: LD_VAR 0 2
1814: ARRAY
1815: ARRAY
1816: PUSH
1817: LD_INT 1
1819: ARRAY
1820: PUSH
1821: LD_INT 0
1823: GREATER
1824: IFFALSE 1875
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
1826: LD_EXP 39
1830: PUSH
1831: LD_EXP 33
1835: PUSH
1836: LD_VAR 0 2
1840: ARRAY
1841: ARRAY
1842: PUSH
1843: LD_INT 1
1845: ARRAY
1846: PPUSH
1847: LD_EXP 39
1851: PUSH
1852: LD_EXP 33
1856: PUSH
1857: LD_VAR 0 2
1861: ARRAY
1862: ARRAY
1863: PUSH
1864: LD_INT 2
1866: ARRAY
1867: PPUSH
1868: LD_INT 2
1870: PPUSH
1871: CALL_OW 62
// if def_extra_oil_deposits then
1875: LD_EXP 6
1879: IFFALSE 1956
// if extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] > 0 then
1881: LD_EXP 40
1885: PUSH
1886: LD_EXP 33
1890: PUSH
1891: LD_VAR 0 2
1895: ARRAY
1896: ARRAY
1897: PUSH
1898: LD_INT 1
1900: ARRAY
1901: PUSH
1902: LD_INT 0
1904: GREATER
1905: IFFALSE 1956
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
1907: LD_EXP 40
1911: PUSH
1912: LD_EXP 33
1916: PUSH
1917: LD_VAR 0 2
1921: ARRAY
1922: ARRAY
1923: PUSH
1924: LD_INT 1
1926: ARRAY
1927: PPUSH
1928: LD_EXP 40
1932: PUSH
1933: LD_EXP 33
1937: PUSH
1938: LD_VAR 0 2
1942: ARRAY
1943: ARRAY
1944: PUSH
1945: LD_INT 2
1947: ARRAY
1948: PPUSH
1949: LD_INT 2
1951: PPUSH
1952: CALL_OW 62
// end ;
1956: GO 1782
1958: POP
1959: POP
// if def_extra_sib_deposits then
1960: LD_EXP 7
1964: IFFALSE 2159
// for i = 1 to Side_Positions do
1966: LD_ADDR_VAR 0 2
1970: PUSH
1971: DOUBLE
1972: LD_INT 1
1974: DEC
1975: ST_TO_ADDR
1976: LD_EXP 33
1980: PUSH
1981: FOR_TO
1982: IFFALSE 2157
// begin if not Side_Positions [ i ] then
1984: LD_EXP 33
1988: PUSH
1989: LD_VAR 0 2
1993: ARRAY
1994: NOT
1995: IFFALSE 1999
// continue ;
1997: GO 1981
// if normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] > 0 then
1999: LD_EXP 41
2003: PUSH
2004: LD_EXP 33
2008: PUSH
2009: LD_VAR 0 2
2013: ARRAY
2014: ARRAY
2015: PUSH
2016: LD_INT 1
2018: ARRAY
2019: PUSH
2020: LD_INT 0
2022: GREATER
2023: IFFALSE 2074
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2025: LD_EXP 41
2029: PUSH
2030: LD_EXP 33
2034: PUSH
2035: LD_VAR 0 2
2039: ARRAY
2040: ARRAY
2041: PUSH
2042: LD_INT 1
2044: ARRAY
2045: PPUSH
2046: LD_EXP 41
2050: PUSH
2051: LD_EXP 33
2055: PUSH
2056: LD_VAR 0 2
2060: ARRAY
2061: ARRAY
2062: PUSH
2063: LD_INT 2
2065: ARRAY
2066: PPUSH
2067: LD_INT 3
2069: PPUSH
2070: CALL_OW 62
// if def_extra_sib_deposits then
2074: LD_EXP 7
2078: IFFALSE 2155
// if extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] > 0 then
2080: LD_EXP 42
2084: PUSH
2085: LD_EXP 33
2089: PUSH
2090: LD_VAR 0 2
2094: ARRAY
2095: ARRAY
2096: PUSH
2097: LD_INT 1
2099: ARRAY
2100: PUSH
2101: LD_INT 0
2103: GREATER
2104: IFFALSE 2155
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2106: LD_EXP 42
2110: PUSH
2111: LD_EXP 33
2115: PUSH
2116: LD_VAR 0 2
2120: ARRAY
2121: ARRAY
2122: PUSH
2123: LD_INT 1
2125: ARRAY
2126: PPUSH
2127: LD_EXP 42
2131: PUSH
2132: LD_EXP 33
2136: PUSH
2137: LD_VAR 0 2
2141: ARRAY
2142: ARRAY
2143: PUSH
2144: LD_INT 2
2146: ARRAY
2147: PPUSH
2148: LD_INT 3
2150: PPUSH
2151: CALL_OW 62
// end ;
2155: GO 1981
2157: POP
2158: POP
// end ;
2159: LD_VAR 0 1
2163: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2164: LD_INT 0
2166: PPUSH
2167: PPUSH
2168: PPUSH
// if not Team_Game then
2169: LD_EXP 35
2173: NOT
2174: IFFALSE 2272
// begin for i = 1 to 8 do
2176: LD_ADDR_VAR 0 2
2180: PUSH
2181: DOUBLE
2182: LD_INT 1
2184: DEC
2185: ST_TO_ADDR
2186: LD_INT 8
2188: PUSH
2189: FOR_TO
2190: IFFALSE 2268
// for j = 1 to 8 do
2192: LD_ADDR_VAR 0 3
2196: PUSH
2197: DOUBLE
2198: LD_INT 1
2200: DEC
2201: ST_TO_ADDR
2202: LD_INT 8
2204: PUSH
2205: FOR_TO
2206: IFFALSE 2264
// if i <> j then
2208: LD_VAR 0 2
2212: PUSH
2213: LD_VAR 0 3
2217: NONEQUAL
2218: IFFALSE 2242
// SetAttitude ( i , j , att_neutral , true ) else
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_VAR 0 3
2229: PPUSH
2230: LD_INT 0
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL_OW 80
2240: GO 2262
// SetAttitude ( i , j , att_friend , true ) ;
2242: LD_VAR 0 2
2246: PPUSH
2247: LD_VAR 0 3
2251: PPUSH
2252: LD_INT 1
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: CALL_OW 80
2262: GO 2205
2264: POP
2265: POP
2266: GO 2189
2268: POP
2269: POP
// end else
2270: GO 2447
// begin if def_shared_vision then
2272: LD_EXP 8
2276: IFFALSE 2341
// begin for i in Teams do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: LD_EXP 31
2287: PUSH
2288: FOR_IN
2289: IFFALSE 2339
// for j = 2 to i do
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: DOUBLE
2297: LD_INT 2
2299: DEC
2300: ST_TO_ADDR
2301: LD_VAR 0 2
2305: PUSH
2306: FOR_TO
2307: IFFALSE 2335
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2309: LD_VAR 0 2
2313: PUSH
2314: LD_VAR 0 3
2318: ARRAY
2319: PPUSH
2320: LD_VAR 0 2
2324: PUSH
2325: LD_INT 1
2327: ARRAY
2328: PPUSH
2329: CALL_OW 343
2333: GO 2306
2335: POP
2336: POP
2337: GO 2288
2339: POP
2340: POP
// end ; for i = 1 to 8 do
2341: LD_ADDR_VAR 0 2
2345: PUSH
2346: DOUBLE
2347: LD_INT 1
2349: DEC
2350: ST_TO_ADDR
2351: LD_INT 8
2353: PUSH
2354: FOR_TO
2355: IFFALSE 2445
// for j = 1 to 8 do
2357: LD_ADDR_VAR 0 3
2361: PUSH
2362: DOUBLE
2363: LD_INT 1
2365: DEC
2366: ST_TO_ADDR
2367: LD_INT 8
2369: PUSH
2370: FOR_TO
2371: IFFALSE 2441
// if Side_Teams [ i ] = Side_Teams [ j ] then
2373: LD_EXP 30
2377: PUSH
2378: LD_VAR 0 2
2382: ARRAY
2383: PUSH
2384: LD_EXP 30
2388: PUSH
2389: LD_VAR 0 3
2393: ARRAY
2394: EQUAL
2395: IFFALSE 2419
// SetAttitude ( i , j , att_friend , true ) else
2397: LD_VAR 0 2
2401: PPUSH
2402: LD_VAR 0 3
2406: PPUSH
2407: LD_INT 1
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: CALL_OW 80
2417: GO 2439
// SetAttitude ( i , j , att_enemy , true ) ;
2419: LD_VAR 0 2
2423: PPUSH
2424: LD_VAR 0 3
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: LD_INT 1
2434: PPUSH
2435: CALL_OW 80
2439: GO 2370
2441: POP
2442: POP
2443: GO 2354
2445: POP
2446: POP
// end ; end ;
2447: LD_VAR 0 1
2451: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2452: LD_INT 0
2454: PPUSH
2455: PPUSH
2456: PPUSH
2457: PPUSH
// result := [ ] ;
2458: LD_ADDR_VAR 0 7
2462: PUSH
2463: EMPTY
2464: ST_TO_ADDR
// for i := 1 to count do
2465: LD_ADDR_VAR 0 8
2469: PUSH
2470: DOUBLE
2471: LD_INT 1
2473: DEC
2474: ST_TO_ADDR
2475: LD_VAR 0 1
2479: PUSH
2480: FOR_TO
2481: IFFALSE 2899
// begin uc_direction := Rand ( 0 , 5 ) ;
2483: LD_ADDR_OWVAR 24
2487: PUSH
2488: LD_INT 0
2490: PPUSH
2491: LD_INT 5
2493: PPUSH
2494: CALL_OW 12
2498: ST_TO_ADDR
// if commander then
2499: LD_LOC 1
2503: IFFALSE 2612
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2505: LD_ADDR_OWVAR 26
2509: PUSH
2510: LD_OWVAR 19
2514: PUSH
2515: LD_OWVAR 20
2519: ARRAY
2520: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2521: LD_INT 1
2523: PPUSH
2524: LD_INT 2
2526: PPUSH
2527: CALL_OW 12
2531: PPUSH
2532: LD_VAR 0 2
2536: PPUSH
2537: LD_EXP 19
2541: PUSH
2542: LD_INT 2
2544: PLUS
2545: PPUSH
2546: CALL_OW 380
// hc_importance := 105 ;
2550: LD_ADDR_OWVAR 32
2554: PUSH
2555: LD_INT 105
2557: ST_TO_ADDR
// commander := false ;
2558: LD_ADDR_LOC 1
2562: PUSH
2563: LD_INT 0
2565: ST_TO_ADDR
// if Multiplayer then
2566: LD_OWVAR 4
2570: IFFALSE 2610
// begin hc_gallery := MULTIAVATARS ;
2572: LD_ADDR_OWVAR 33
2576: PUSH
2577: LD_STRING MULTIAVATARS
2579: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2580: LD_ADDR_OWVAR 34
2584: PUSH
2585: LD_OWVAR 20
2589: PPUSH
2590: CALL_OW 525
2594: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2595: LD_ADDR_OWVAR 27
2599: PUSH
2600: LD_OWVAR 20
2604: PPUSH
2605: CALL_OW 526
2609: ST_TO_ADDR
// end ; end else
2610: GO 2675
// begin hc_name :=  ;
2612: LD_ADDR_OWVAR 26
2616: PUSH
2617: LD_STRING 
2619: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 2
2625: PPUSH
2626: CALL_OW 12
2630: PPUSH
2631: LD_VAR 0 2
2635: PPUSH
2636: LD_EXP 19
2640: PPUSH
2641: CALL_OW 380
// hc_importance := 0 ;
2645: LD_ADDR_OWVAR 32
2649: PUSH
2650: LD_INT 0
2652: ST_TO_ADDR
// if Multiplayer then
2653: LD_OWVAR 4
2657: IFFALSE 2675
// begin hc_gallery :=  ;
2659: LD_ADDR_OWVAR 33
2663: PUSH
2664: LD_STRING 
2666: ST_TO_ADDR
// hc_face_number := 0 ;
2667: LD_ADDR_OWVAR 34
2671: PUSH
2672: LD_INT 0
2674: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2675: LD_ADDR_VAR 0 10
2679: PUSH
2680: CALL_OW 44
2684: ST_TO_ADDR
// if global_defined then
2685: LD_LOC 3
2689: IFFALSE 2829
// begin if ( cl = class_soldier ) then
2691: LD_VAR 0 2
2695: PUSH
2696: LD_INT 1
2698: EQUAL
2699: IFFALSE 2719
// j := i + soldiers_created else
2701: LD_ADDR_VAR 0 9
2705: PUSH
2706: LD_VAR 0 8
2710: PUSH
2711: LD_LOC 4
2715: PLUS
2716: ST_TO_ADDR
2717: GO 2729
// j := i ;
2719: LD_ADDR_VAR 0 9
2723: PUSH
2724: LD_VAR 0 8
2728: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2729: LD_LOC 2
2733: PUSH
2734: LD_VAR 0 2
2738: ARRAY
2739: PUSH
2740: LD_VAR 0 9
2744: ARRAY
2745: PPUSH
2746: LD_VAR 0 10
2750: PPUSH
2751: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2755: LD_VAR 0 10
2759: PPUSH
2760: LD_INT 2
2762: PPUSH
2763: LD_LOC 2
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PUSH
2774: LD_VAR 0 9
2778: ARRAY
2779: PPUSH
2780: LD_INT 2
2782: PPUSH
2783: CALL_OW 260
2787: PPUSH
2788: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2792: LD_VAR 0 10
2796: PPUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_LOC 2
2804: PUSH
2805: LD_VAR 0 2
2809: ARRAY
2810: PUSH
2811: LD_VAR 0 9
2815: ARRAY
2816: PPUSH
2817: LD_INT 1
2819: PPUSH
2820: CALL_OW 260
2824: PPUSH
2825: CALL_OW 239
// end ; if building then
2829: LD_VAR 0 6
2833: IFFALSE 2851
// PlaceHumanInUnit ( un , building ) else
2835: LD_VAR 0 10
2839: PPUSH
2840: LD_VAR 0 6
2844: PPUSH
2845: CALL_OW 52
2849: GO 2878
// PlaceUnitXYR ( un , x , y , r , false ) ;
2851: LD_VAR 0 10
2855: PPUSH
2856: LD_VAR 0 3
2860: PPUSH
2861: LD_VAR 0 4
2865: PPUSH
2866: LD_VAR 0 5
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 50
// result := result ^ [ un ] ;
2878: LD_ADDR_VAR 0 7
2882: PUSH
2883: LD_VAR 0 7
2887: PUSH
2888: LD_VAR 0 10
2892: PUSH
2893: EMPTY
2894: LIST
2895: ADD
2896: ST_TO_ADDR
// end ;
2897: GO 2480
2899: POP
2900: POP
// if not global_defined then
2901: LD_LOC 3
2905: NOT
2906: IFFALSE 2984
// if ( global_units >= cl ) then
2908: LD_LOC 2
2912: PUSH
2913: LD_VAR 0 2
2917: GREATEREQUAL
2918: IFFALSE 2959
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2920: LD_ADDR_LOC 2
2924: PUSH
2925: LD_LOC 2
2929: PPUSH
2930: LD_VAR 0 2
2934: PPUSH
2935: LD_LOC 2
2939: PUSH
2940: LD_VAR 0 2
2944: ARRAY
2945: PUSH
2946: LD_VAR 0 7
2950: ADD
2951: PPUSH
2952: CALL_OW 1
2956: ST_TO_ADDR
2957: GO 2984
// global_units := Replace ( global_units , cl , result ) ;
2959: LD_ADDR_LOC 2
2963: PUSH
2964: LD_LOC 2
2968: PPUSH
2969: LD_VAR 0 2
2973: PPUSH
2974: LD_VAR 0 7
2978: PPUSH
2979: CALL_OW 1
2983: ST_TO_ADDR
// if commander then
2984: LD_LOC 1
2988: IFFALSE 3035
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2990: LD_ADDR_EXP 44
2994: PUSH
2995: LD_EXP 44
2999: PPUSH
3000: LD_OWVAR 20
3004: PPUSH
3005: LD_EXP 44
3009: PUSH
3010: LD_OWVAR 20
3014: ARRAY
3015: PUSH
3016: LD_VAR 0 10
3020: ADD
3021: PPUSH
3022: CALL_OW 1
3026: ST_TO_ADDR
// commander := false ;
3027: LD_ADDR_LOC 1
3031: PUSH
3032: LD_INT 0
3034: ST_TO_ADDR
// end ; end ;
3035: LD_VAR 0 7
3039: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3040: LD_INT 0
3042: PPUSH
3043: PPUSH
3044: PPUSH
3045: PPUSH
3046: PPUSH
3047: PPUSH
3048: PPUSH
3049: PPUSH
3050: PPUSH
// if side in [ 0 , 9 ] then
3051: LD_VAR 0 1
3055: PUSH
3056: LD_INT 0
3058: PUSH
3059: LD_INT 9
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: IN
3066: IFFALSE 3070
// exit ;
3068: GO 3989
// pos := Side_Positions [ side ] ;
3070: LD_ADDR_VAR 0 3
3074: PUSH
3075: LD_EXP 33
3079: PUSH
3080: LD_VAR 0 1
3084: ARRAY
3085: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3086: LD_ADDR_OWVAR 21
3090: PUSH
3091: LD_EXP 34
3095: PUSH
3096: LD_VAR 0 1
3100: ARRAY
3101: ST_TO_ADDR
// uc_side := side ;
3102: LD_ADDR_OWVAR 20
3106: PUSH
3107: LD_VAR 0 1
3111: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3112: LD_ADDR_VAR 0 4
3116: PUSH
3117: LD_EXP 36
3121: PUSH
3122: LD_VAR 0 3
3126: ARRAY
3127: PUSH
3128: LD_INT 1
3130: ARRAY
3131: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3132: LD_ADDR_VAR 0 5
3136: PUSH
3137: LD_EXP 36
3141: PUSH
3142: LD_VAR 0 3
3146: ARRAY
3147: PUSH
3148: LD_INT 2
3150: ARRAY
3151: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3152: LD_ADDR_VAR 0 6
3156: PUSH
3157: LD_EXP 36
3161: PUSH
3162: LD_VAR 0 3
3166: ARRAY
3167: PUSH
3168: LD_INT 3
3170: ARRAY
3171: ST_TO_ADDR
// if is_depot then
3172: LD_EXP 16
3176: IFFALSE 3309
// begin bc_type = b_depot ;
3178: LD_ADDR_OWVAR 42
3182: PUSH
3183: LD_INT 0
3185: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3186: LD_ADDR_VAR 0 10
3190: PUSH
3191: LD_VAR 0 4
3195: PPUSH
3196: LD_VAR 0 5
3200: PPUSH
3201: LD_VAR 0 6
3205: PPUSH
3206: CALL_OW 47
3210: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3211: LD_VAR 0 10
3215: PPUSH
3216: LD_STRING @
3218: PUSH
3219: LD_VAR 0 1
3223: STR
3224: PPUSH
3225: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3229: LD_VAR 0 10
3233: PPUSH
3234: CALL_OW 274
3238: PPUSH
3239: LD_INT 1
3241: PPUSH
3242: LD_EXP 21
3246: PUSH
3247: LD_INT 1
3249: ARRAY
3250: PPUSH
3251: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3255: LD_VAR 0 10
3259: PPUSH
3260: CALL_OW 274
3264: PPUSH
3265: LD_INT 2
3267: PPUSH
3268: LD_EXP 21
3272: PUSH
3273: LD_INT 2
3275: ARRAY
3276: PPUSH
3277: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3281: LD_VAR 0 10
3285: PPUSH
3286: CALL_OW 274
3290: PPUSH
3291: LD_INT 3
3293: PPUSH
3294: LD_EXP 21
3298: PUSH
3299: LD_INT 3
3301: ARRAY
3302: PPUSH
3303: CALL_OW 277
// end else
3307: GO 3453
// begin for i := 1 to 3 do
3309: LD_ADDR_VAR 0 7
3313: PUSH
3314: DOUBLE
3315: LD_INT 1
3317: DEC
3318: ST_TO_ADDR
3319: LD_INT 3
3321: PUSH
3322: FOR_TO
3323: IFFALSE 3451
// begin r := starting_resources [ i ] ;
3325: LD_ADDR_VAR 0 8
3329: PUSH
3330: LD_EXP 21
3334: PUSH
3335: LD_VAR 0 7
3339: ARRAY
3340: ST_TO_ADDR
// while r >= 10 do
3341: LD_VAR 0 8
3345: PUSH
3346: LD_INT 10
3348: GREATEREQUAL
3349: IFFALSE 3449
// if r > 50 then
3351: LD_VAR 0 8
3355: PUSH
3356: LD_INT 50
3358: GREATER
3359: IFFALSE 3405
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3361: LD_VAR 0 7
3365: PPUSH
3366: LD_INT 5
3368: PPUSH
3369: LD_VAR 0 4
3373: PPUSH
3374: LD_VAR 0 5
3378: PPUSH
3379: LD_INT 4
3381: PPUSH
3382: LD_INT 0
3384: PPUSH
3385: CALL_OW 60
// r := r - 50 ;
3389: LD_ADDR_VAR 0 8
3393: PUSH
3394: LD_VAR 0 8
3398: PUSH
3399: LD_INT 50
3401: MINUS
3402: ST_TO_ADDR
// end else
3403: GO 3447
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3405: LD_VAR 0 7
3409: PPUSH
3410: LD_VAR 0 8
3414: PUSH
3415: LD_INT 10
3417: DIV
3418: PPUSH
3419: LD_VAR 0 4
3423: PPUSH
3424: LD_VAR 0 5
3428: PPUSH
3429: LD_INT 4
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: CALL_OW 60
// r := 0 ;
3439: LD_ADDR_VAR 0 8
3443: PUSH
3444: LD_INT 0
3446: ST_TO_ADDR
// end ;
3447: GO 3341
// end ;
3449: GO 3322
3451: POP
3452: POP
// end ; for r in starting_crates do
3453: LD_ADDR_VAR 0 8
3457: PUSH
3458: LD_EXP 20
3462: PUSH
3463: FOR_IN
3464: IFFALSE 3496
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3466: LD_INT 1
3468: PPUSH
3469: LD_INT 5
3471: PPUSH
3472: LD_VAR 0 4
3476: PPUSH
3477: LD_VAR 0 5
3481: PPUSH
3482: LD_VAR 0 8
3486: PPUSH
3487: LD_INT 0
3489: PPUSH
3490: CALL_OW 60
3494: GO 3463
3496: POP
3497: POP
// if def_morale_flags then
3498: LD_EXP 9
3502: IFFALSE 3641
// begin x := start_def [ pos ] [ 1 ] ;
3504: LD_ADDR_VAR 0 4
3508: PUSH
3509: LD_EXP 38
3513: PUSH
3514: LD_VAR 0 3
3518: ARRAY
3519: PUSH
3520: LD_INT 1
3522: ARRAY
3523: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3524: LD_ADDR_VAR 0 5
3528: PUSH
3529: LD_EXP 38
3533: PUSH
3534: LD_VAR 0 3
3538: ARRAY
3539: PUSH
3540: LD_INT 2
3542: ARRAY
3543: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3544: LD_VAR 0 4
3548: PPUSH
3549: LD_VAR 0 5
3553: PPUSH
3554: LD_INT 12
3556: PPUSH
3557: LD_INT 2
3559: PPUSH
3560: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3564: LD_ADDR_EXP 43
3568: PUSH
3569: LD_EXP 43
3573: PUSH
3574: LD_VAR 0 1
3578: PPUSH
3579: LD_VAR 0 4
3583: PPUSH
3584: LD_VAR 0 5
3588: PPUSH
3589: LD_INT 1
3591: PUSH
3592: LD_INT 100
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 2
3601: PUSH
3602: LD_INT 50
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PUSH
3609: LD_INT 3
3611: PUSH
3612: LD_INT 20
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: PUSH
3619: LD_INT 20
3621: PUSH
3622: LD_INT 100
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: PPUSH
3635: CALL_OW 418
3639: ADD
3640: ST_TO_ADDR
// end ; commander := true ;
3641: LD_ADDR_LOC 1
3645: PUSH
3646: LD_INT 1
3648: ST_TO_ADDR
// soldiers_created := 0 ;
3649: LD_ADDR_LOC 4
3653: PUSH
3654: LD_INT 0
3656: ST_TO_ADDR
// dir = depot_def [ pos ] [ 3 ] ;
3657: LD_ADDR_VAR 0 6
3661: PUSH
3662: LD_EXP 36
3666: PUSH
3667: LD_VAR 0 3
3671: ARRAY
3672: PUSH
3673: LD_INT 3
3675: ARRAY
3676: ST_TO_ADDR
// x := ShiftX ( depot_def [ pos ] [ 1 ] , dir , 8 ) ;
3677: LD_ADDR_VAR 0 4
3681: PUSH
3682: LD_EXP 36
3686: PUSH
3687: LD_VAR 0 3
3691: ARRAY
3692: PUSH
3693: LD_INT 1
3695: ARRAY
3696: PPUSH
3697: LD_VAR 0 6
3701: PPUSH
3702: LD_INT 8
3704: PPUSH
3705: CALL_OW 272
3709: ST_TO_ADDR
// y := ShiftY ( depot_def [ pos ] [ 2 ] , dir , 8 ) ;
3710: LD_ADDR_VAR 0 5
3714: PUSH
3715: LD_EXP 36
3719: PUSH
3720: LD_VAR 0 3
3724: ARRAY
3725: PUSH
3726: LD_INT 2
3728: ARRAY
3729: PPUSH
3730: LD_VAR 0 6
3734: PPUSH
3735: LD_INT 8
3737: PPUSH
3738: CALL_OW 273
3742: ST_TO_ADDR
// prepare_people ( nsol , class_soldier , x , y , 5 , 0 ) ;
3743: LD_LOC 8
3747: PPUSH
3748: LD_INT 1
3750: PPUSH
3751: LD_VAR 0 4
3755: PPUSH
3756: LD_VAR 0 5
3760: PPUSH
3761: LD_INT 5
3763: PPUSH
3764: LD_INT 0
3766: PPUSH
3767: CALL 2452 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3771: LD_LOC 5
3775: PPUSH
3776: LD_INT 2
3778: PPUSH
3779: LD_VAR 0 4
3783: PPUSH
3784: LD_VAR 0 5
3788: PPUSH
3789: LD_INT 5
3791: PPUSH
3792: LD_INT 0
3794: PPUSH
3795: CALL 2452 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3799: LD_LOC 7
3803: PPUSH
3804: LD_INT 3
3806: PPUSH
3807: LD_VAR 0 4
3811: PPUSH
3812: LD_VAR 0 5
3816: PPUSH
3817: LD_INT 5
3819: PPUSH
3820: LD_INT 0
3822: PPUSH
3823: CALL 2452 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3827: LD_LOC 6
3831: PPUSH
3832: LD_INT 4
3834: PPUSH
3835: LD_VAR 0 4
3839: PPUSH
3840: LD_VAR 0 5
3844: PPUSH
3845: LD_INT 5
3847: PPUSH
3848: LD_INT 0
3850: PPUSH
3851: CALL 2452 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3855: LD_EXP 10
3859: PUSH
3860: LD_INT 20
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: CALL_OW 321
3872: PUSH
3873: LD_INT 1
3875: EQUAL
3876: AND
3877: IFFALSE 3894
// SetTech ( tech_SibDet , side , state_researched ) ;
3879: LD_INT 20
3881: PPUSH
3882: LD_VAR 0 1
3886: PPUSH
3887: LD_INT 2
3889: PPUSH
3890: CALL_OW 322
// if def_siberite_bomb = 1 then
3894: LD_EXP 13
3898: PUSH
3899: LD_INT 1
3901: EQUAL
3902: IFFALSE 3936
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3904: LD_INT 25
3906: PPUSH
3907: LD_VAR 0 1
3911: PPUSH
3912: LD_INT 1
3914: PPUSH
3915: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3919: LD_INT 73
3921: PPUSH
3922: LD_VAR 0 1
3926: PPUSH
3927: LD_INT 1
3929: PPUSH
3930: CALL_OW 322
// end else
3934: GO 3966
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3936: LD_INT 25
3938: PPUSH
3939: LD_VAR 0 1
3943: PPUSH
3944: LD_INT 0
3946: PPUSH
3947: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3951: LD_INT 73
3953: PPUSH
3954: LD_VAR 0 1
3958: PPUSH
3959: LD_INT 0
3961: PPUSH
3962: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3966: LD_INT 24
3968: PPUSH
3969: LD_VAR 0 1
3973: PPUSH
3974: LD_INT 0
3976: PPUSH
3977: CALL_OW 322
// global_defined := true ;
3981: LD_ADDR_LOC 3
3985: PUSH
3986: LD_INT 1
3988: ST_TO_ADDR
// end ;
3989: LD_VAR 0 2
3993: RET
// function prepare_sides ; var i ; begin
3994: LD_INT 0
3996: PPUSH
3997: PPUSH
// global_units := [ ] ;
3998: LD_ADDR_LOC 2
4002: PUSH
4003: EMPTY
4004: ST_TO_ADDR
// global_defined := false ;
4005: LD_ADDR_LOC 3
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// CountClassMembers ;
4013: CALL 4063 0 0
// for i := 1 to 8 do
4017: LD_ADDR_VAR 0 2
4021: PUSH
4022: DOUBLE
4023: LD_INT 1
4025: DEC
4026: ST_TO_ADDR
4027: LD_INT 8
4029: PUSH
4030: FOR_TO
4031: IFFALSE 4056
// if Side_Positions [ i ] then
4033: LD_EXP 33
4037: PUSH
4038: LD_VAR 0 2
4042: ARRAY
4043: IFFALSE 4054
// prepare_side ( i ) ;
4045: LD_VAR 0 2
4049: PPUSH
4050: CALL 3040 0 1
4054: GO 4030
4056: POP
4057: POP
// end ;
4058: LD_VAR 0 1
4062: RET
// function CountClassMembers ; var Mode ; begin
4063: LD_INT 0
4065: PPUSH
4066: PPUSH
// if No_Mechs then
4067: LD_EXP 14
4071: IFFALSE 4083
// Mode := 2 else
4073: LD_ADDR_VAR 0 2
4077: PUSH
4078: LD_INT 2
4080: ST_TO_ADDR
4081: GO 4091
// Mode := 1 ;
4083: LD_ADDR_VAR 0 2
4087: PUSH
4088: LD_INT 1
4090: ST_TO_ADDR
// neng := number_of_people ;
4091: LD_ADDR_LOC 5
4095: PUSH
4096: LD_EXP 18
4100: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4101: LD_ADDR_LOC 8
4105: PUSH
4106: LD_LOC 5
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 3
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 2
4125: ARRAY
4126: DIV
4127: ST_TO_ADDR
// neng := neng - nsol ;
4128: LD_ADDR_LOC 5
4132: PUSH
4133: LD_LOC 5
4137: PUSH
4138: LD_LOC 8
4142: MINUS
4143: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4144: LD_ADDR_LOC 6
4148: PUSH
4149: LD_LOC 5
4153: PUSH
4154: LD_INT 3
4156: PUSH
4157: LD_INT 2
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: LD_VAR 0 2
4168: ARRAY
4169: DIV
4170: ST_TO_ADDR
// if ( nsci < 1 ) then
4171: LD_LOC 6
4175: PUSH
4176: LD_INT 1
4178: LESS
4179: IFFALSE 4189
// nsci := 1 ;
4181: LD_ADDR_LOC 6
4185: PUSH
4186: LD_INT 1
4188: ST_TO_ADDR
// neng := neng - nsci ;
4189: LD_ADDR_LOC 5
4193: PUSH
4194: LD_LOC 5
4198: PUSH
4199: LD_LOC 6
4203: MINUS
4204: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4205: LD_ADDR_LOC 7
4209: PUSH
4210: LD_LOC 5
4214: PUSH
4215: LD_INT 2
4217: DIV
4218: PUSH
4219: LD_INT 0
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: LD_VAR 0 2
4230: ARRAY
4231: ST_TO_ADDR
// neng := neng - nmech ;
4232: LD_ADDR_LOC 5
4236: PUSH
4237: LD_LOC 5
4241: PUSH
4242: LD_LOC 7
4246: MINUS
4247: ST_TO_ADDR
// if ( neng < 1 ) then
4248: LD_LOC 5
4252: PUSH
4253: LD_INT 1
4255: LESS
4256: IFFALSE 4266
// neng := 1 ;
4258: LD_ADDR_LOC 5
4262: PUSH
4263: LD_INT 1
4265: ST_TO_ADDR
// end ;
4266: LD_VAR 0 1
4270: RET
// starting begin disable ( 98 ) ;
4271: LD_INT 98
4273: DISABLE_MARKED
// disable ( 99 ) ;
4274: LD_INT 99
4276: DISABLE_MARKED
// disable ( 400 ) ;
4277: LD_INT 400
4279: DISABLE_MARKED
// disable ( 401 ) ;
4280: LD_INT 401
4282: DISABLE_MARKED
// mp_selectmsg := true ;
4283: LD_ADDR_OWVAR 13
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4291: CALL 68 0 0
// init_map ;
4295: CALL 1166 0 0
// init_respawning ;
4299: CALL 13100 0 0
// set_shared_visions_and_alliances ;
4303: CALL 2164 0 0
// ResetFog ;
4307: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4311: LD_OWVAR 2
4315: PPUSH
4316: CALL_OW 520
// AnimateTrees ( true ) ;
4320: LD_INT 1
4322: PPUSH
4323: CALL_OW 573
// prepare_sides ;
4327: CALL 3994 0 0
// Init_Win_Condition ;
4331: CALL 7220 0 0
// ShowTimer ;
4335: CALL 6843 0 0
// music_nat := Side_Nations [ your_side ] ;
4339: LD_ADDR_OWVAR 71
4343: PUSH
4344: LD_EXP 34
4348: PUSH
4349: LD_OWVAR 2
4353: ARRAY
4354: ST_TO_ADDR
// if IAmSpec then
4355: CALL_OW 531
4359: IFFALSE 4383
// begin fogoff ( true ) ;
4361: LD_INT 1
4363: PPUSH
4364: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4368: LD_INT 130
4370: PPUSH
4371: LD_INT 100
4373: PPUSH
4374: CALL_OW 86
// enable ( 400 ) ;
4378: LD_INT 400
4380: ENABLE_MARKED
// end else
4381: GO 4429
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4383: LD_EXP 38
4387: PUSH
4388: LD_EXP 33
4392: PUSH
4393: LD_OWVAR 2
4397: ARRAY
4398: ARRAY
4399: PUSH
4400: LD_INT 1
4402: ARRAY
4403: PPUSH
4404: LD_EXP 38
4408: PUSH
4409: LD_EXP 33
4413: PUSH
4414: LD_OWVAR 2
4418: ARRAY
4419: ARRAY
4420: PUSH
4421: LD_INT 2
4423: ARRAY
4424: PPUSH
4425: CALL_OW 86
// end ; InitApeman ;
4429: CALL 5361 0 0
// end ;
4433: END
// every 0 0$1 do
4434: GO 4436
4436: DISABLE
// if ( def_siberite_bomb > 1 ) then
4437: LD_EXP 13
4441: PUSH
4442: LD_INT 1
4444: GREATER
4445: IFFALSE 4460
// begin wait ( siberite_bomb_Delay ) ;
4447: LD_EXP 28
4451: PPUSH
4452: CALL_OW 67
// EnableSibFiss ;
4456: CALL 4461 0 0
// end ;
4460: END
// function EnableSibFiss ; var i ; begin
4461: LD_INT 0
4463: PPUSH
4464: PPUSH
// for i := 1 to 8 do
4465: LD_ADDR_VAR 0 2
4469: PUSH
4470: DOUBLE
4471: LD_INT 1
4473: DEC
4474: ST_TO_ADDR
4475: LD_INT 8
4477: PUSH
4478: FOR_TO
4479: IFFALSE 4525
// if Side_Positions [ i ] then
4481: LD_EXP 33
4485: PUSH
4486: LD_VAR 0 2
4490: ARRAY
4491: IFFALSE 4523
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4493: LD_INT 25
4495: PPUSH
4496: LD_VAR 0 2
4500: PPUSH
4501: LD_INT 1
4503: PPUSH
4504: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4508: LD_INT 73
4510: PPUSH
4511: LD_VAR 0 2
4515: PPUSH
4516: LD_INT 1
4518: PPUSH
4519: CALL_OW 322
// end ;
4523: GO 4478
4525: POP
4526: POP
// end ; end_of_file
4527: LD_VAR 0 1
4531: RET
// every 0 0$25 + 0 0$1.0 do
4532: GO 4534
4534: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4535: LD_INT 1
4537: PPUSH
4538: LD_INT 1
4540: PPUSH
4541: CALL_OW 287
4545: PUSH
4546: LD_INT 200
4548: PUSH
4549: LD_EXP 22
4553: MINUS
4554: PUSH
4555: LD_INT 50
4557: DIVREAL
4558: PUSH
4559: LD_INT 5
4561: MUL
4562: LESS
4563: IFFALSE 4586
// CreateCratesArea ( Rand ( 3 , 4 ) , Between1 , true ) ;
4565: LD_INT 3
4567: PPUSH
4568: LD_INT 4
4570: PPUSH
4571: CALL_OW 12
4575: PPUSH
4576: LD_INT 1
4578: PPUSH
4579: LD_INT 1
4581: PPUSH
4582: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4586: LD_INT 2
4588: PPUSH
4589: LD_INT 1
4591: PPUSH
4592: CALL_OW 287
4596: PUSH
4597: LD_INT 200
4599: PUSH
4600: LD_EXP 22
4604: MINUS
4605: PUSH
4606: LD_INT 50
4608: DIVREAL
4609: PUSH
4610: LD_INT 5
4612: MUL
4613: LESS
4614: IFFALSE 4637
// CreateCratesArea ( Rand ( 3 , 4 ) , Between2 , true ) ;
4616: LD_INT 3
4618: PPUSH
4619: LD_INT 4
4621: PPUSH
4622: CALL_OW 12
4626: PPUSH
4627: LD_INT 2
4629: PPUSH
4630: LD_INT 1
4632: PPUSH
4633: CALL_OW 55
// if GetResourceArea ( Center1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4637: LD_INT 3
4639: PPUSH
4640: LD_INT 1
4642: PPUSH
4643: CALL_OW 287
4647: PUSH
4648: LD_INT 200
4650: PUSH
4651: LD_EXP 22
4655: MINUS
4656: PUSH
4657: LD_INT 25
4659: DIVREAL
4660: PUSH
4661: LD_INT 5
4663: MUL
4664: LESS
4665: IFFALSE 4680
// CreateCratesArea ( 5 , Center1 , true ) ;
4667: LD_INT 5
4669: PPUSH
4670: LD_INT 3
4672: PPUSH
4673: LD_INT 1
4675: PPUSH
4676: CALL_OW 55
// if GetResourceArea ( Center2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4680: LD_INT 4
4682: PPUSH
4683: LD_INT 1
4685: PPUSH
4686: CALL_OW 287
4690: PUSH
4691: LD_INT 200
4693: PUSH
4694: LD_EXP 22
4698: MINUS
4699: PUSH
4700: LD_INT 25
4702: DIVREAL
4703: PUSH
4704: LD_INT 5
4706: MUL
4707: LESS
4708: IFFALSE 4723
// CreateCratesArea ( 5 , Center2 , true ) ;
4710: LD_INT 5
4712: PPUSH
4713: LD_INT 4
4715: PPUSH
4716: LD_INT 1
4718: PPUSH
4719: CALL_OW 55
// enable ;
4723: ENABLE
// end ;
4724: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4725: GO 4727
4727: DISABLE
4728: LD_INT 0
4730: PPUSH
4731: PPUSH
// begin case tick of 1 .. 1 1$0 :
4732: LD_OWVAR 1
4736: PUSH
4737: LD_INT 1
4739: DOUBLE
4740: GREATEREQUAL
4741: IFFALSE 4749
4743: LD_INT 2100
4745: DOUBLE
4746: LESSEQUAL
4747: IFTRUE 4751
4749: GO 4779
4751: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4752: LD_EXP 22
4756: PUSH
4757: LD_INT 100
4759: DIVREAL
4760: PUSH
4761: LD_INT 525
4763: PPUSH
4764: LD_INT 1050
4766: PPUSH
4767: CALL_OW 12
4771: MUL
4772: PPUSH
4773: CALL_OW 67
4777: GO 5081
4779: LD_INT 2100
4781: PUSH
4782: LD_INT 1
4784: PLUS
4785: DOUBLE
4786: GREATEREQUAL
4787: IFFALSE 4795
4789: LD_INT 10500
4791: DOUBLE
4792: LESSEQUAL
4793: IFTRUE 4797
4795: GO 4825
4797: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4798: LD_EXP 22
4802: PUSH
4803: LD_INT 100
4805: DIVREAL
4806: PUSH
4807: LD_INT 1050
4809: PPUSH
4810: LD_INT 1750
4812: PPUSH
4813: CALL_OW 12
4817: MUL
4818: PPUSH
4819: CALL_OW 67
4823: GO 5081
4825: LD_INT 10500
4827: PUSH
4828: LD_INT 1
4830: PLUS
4831: DOUBLE
4832: GREATEREQUAL
4833: IFFALSE 4841
4835: LD_INT 21000
4837: DOUBLE
4838: LESSEQUAL
4839: IFTRUE 4843
4841: GO 4871
4843: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4844: LD_EXP 22
4848: PUSH
4849: LD_INT 100
4851: DIVREAL
4852: PUSH
4853: LD_INT 1750
4855: PPUSH
4856: LD_INT 2100
4858: PPUSH
4859: CALL_OW 12
4863: MUL
4864: PPUSH
4865: CALL_OW 67
4869: GO 5081
4871: LD_INT 21000
4873: PUSH
4874: LD_INT 1
4876: PLUS
4877: DOUBLE
4878: GREATEREQUAL
4879: IFFALSE 4887
4881: LD_INT 42000
4883: DOUBLE
4884: LESSEQUAL
4885: IFTRUE 4889
4887: GO 4917
4889: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4890: LD_EXP 22
4894: PUSH
4895: LD_INT 100
4897: DIVREAL
4898: PUSH
4899: LD_INT 2100
4901: PPUSH
4902: LD_INT 2275
4904: PPUSH
4905: CALL_OW 12
4909: MUL
4910: PPUSH
4911: CALL_OW 67
4915: GO 5081
4917: LD_INT 42000
4919: PUSH
4920: LD_INT 1
4922: PLUS
4923: DOUBLE
4924: GREATEREQUAL
4925: IFFALSE 4933
4927: LD_INT 63000
4929: DOUBLE
4930: LESSEQUAL
4931: IFTRUE 4935
4933: GO 4963
4935: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4936: LD_EXP 22
4940: PUSH
4941: LD_INT 100
4943: DIVREAL
4944: PUSH
4945: LD_INT 2275
4947: PPUSH
4948: LD_INT 2450
4950: PPUSH
4951: CALL_OW 12
4955: MUL
4956: PPUSH
4957: CALL_OW 67
4961: GO 5081
4963: LD_INT 63000
4965: PUSH
4966: LD_INT 1
4968: PLUS
4969: DOUBLE
4970: GREATEREQUAL
4971: IFFALSE 4979
4973: LD_INT 105000
4975: DOUBLE
4976: LESSEQUAL
4977: IFTRUE 4981
4979: GO 5009
4981: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4982: LD_EXP 22
4986: PUSH
4987: LD_INT 100
4989: DIVREAL
4990: PUSH
4991: LD_INT 2450
4993: PPUSH
4994: LD_INT 2800
4996: PPUSH
4997: CALL_OW 12
5001: MUL
5002: PPUSH
5003: CALL_OW 67
5007: GO 5081
5009: LD_INT 105000
5011: PUSH
5012: LD_INT 1
5014: PLUS
5015: DOUBLE
5016: GREATEREQUAL
5017: IFFALSE 5025
5019: LD_INT 630000
5021: DOUBLE
5022: LESSEQUAL
5023: IFTRUE 5027
5025: GO 5055
5027: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5028: LD_EXP 22
5032: PUSH
5033: LD_INT 100
5035: DIVREAL
5036: PUSH
5037: LD_INT 2800
5039: PPUSH
5040: LD_INT 3500
5042: PPUSH
5043: CALL_OW 12
5047: MUL
5048: PPUSH
5049: CALL_OW 67
5053: GO 5081
5055: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5056: LD_EXP 22
5060: PUSH
5061: LD_INT 100
5063: DIVREAL
5064: PUSH
5065: LD_INT 3500
5067: PPUSH
5068: LD_INT 3850
5070: PPUSH
5071: CALL_OW 12
5075: MUL
5076: PPUSH
5077: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5081: LD_ADDR_VAR 0 2
5085: PUSH
5086: LD_INT 3
5088: PPUSH
5089: LD_INT 5
5091: PPUSH
5092: CALL_OW 12
5096: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5097: LD_ADDR_VAR 0 1
5101: PUSH
5102: LD_EXP 33
5106: PUSH
5107: LD_INT 0
5109: PUSH
5110: EMPTY
5111: LIST
5112: DIFF
5113: PUSH
5114: FOR_IN
5115: IFFALSE 5164
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5117: LD_VAR 0 2
5121: PPUSH
5122: LD_EXP 38
5126: PUSH
5127: LD_VAR 0 1
5131: ARRAY
5132: PUSH
5133: LD_INT 1
5135: ARRAY
5136: PPUSH
5137: LD_EXP 38
5141: PUSH
5142: LD_VAR 0 1
5146: ARRAY
5147: PUSH
5148: LD_INT 2
5150: ARRAY
5151: PPUSH
5152: LD_INT 20
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 56
5162: GO 5114
5164: POP
5165: POP
// enable ;
5166: ENABLE
// end ; end_of_file
5167: PPOPN 2
5169: END
// every 20 20$00 trigger apemanNumber do
5170: LD_EXP 45
5174: IFFALSE 5207
5176: GO 5178
5178: DISABLE
// begin enable ;
5179: ENABLE
// if apeLevel >= 8 then
5180: LD_EXP 50
5184: PUSH
5185: LD_INT 8
5187: GREATEREQUAL
5188: IFFALSE 5193
// disable else
5190: DISABLE
5191: GO 5207
// apeLevel := apeLevel + 1 ;
5193: LD_ADDR_EXP 50
5197: PUSH
5198: LD_EXP 50
5202: PUSH
5203: LD_INT 1
5205: PLUS
5206: ST_TO_ADDR
// end ;
5207: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5208: LD_EXP 45
5212: PUSH
5213: LD_EXP 46
5217: LESS
5218: IFFALSE 5358
5220: GO 5222
5222: DISABLE
5223: LD_INT 0
5225: PPUSH
5226: PPUSH
5227: PPUSH
5228: PPUSH
// begin enable ;
5229: ENABLE
// for i := 1 to apemanPos do
5230: LD_ADDR_VAR 0 1
5234: PUSH
5235: DOUBLE
5236: LD_INT 1
5238: DEC
5239: ST_TO_ADDR
5240: LD_EXP 48
5244: PUSH
5245: FOR_TO
5246: IFFALSE 5356
// begin if apemanPlayerCount [ i ] then
5248: LD_EXP 49
5252: PUSH
5253: LD_VAR 0 1
5257: ARRAY
5258: IFFALSE 5354
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5260: LD_EXP 49
5264: PUSH
5265: LD_VAR 0 1
5269: ARRAY
5270: PUSH
5271: LD_EXP 48
5275: PUSH
5276: LD_VAR 0 1
5280: ARRAY
5281: GREATER
5282: IFFALSE 5354
// begin ape := PrepareApeman ;
5284: LD_ADDR_VAR 0 2
5288: PUSH
5289: CALL 5877 0 0
5293: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5294: LD_VAR 0 2
5298: PPUSH
5299: LD_EXP 51
5303: PUSH
5304: LD_VAR 0 1
5308: ARRAY
5309: PPUSH
5310: LD_INT 0
5312: PPUSH
5313: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5317: LD_ADDR_EXP 48
5321: PUSH
5322: LD_EXP 48
5326: PPUSH
5327: LD_VAR 0 1
5331: PPUSH
5332: LD_EXP 48
5336: PUSH
5337: LD_VAR 0 1
5341: ARRAY
5342: PUSH
5343: LD_VAR 0 2
5347: UNION
5348: PPUSH
5349: CALL_OW 1
5353: ST_TO_ADDR
// end ; end ; end ;
5354: GO 5245
5356: POP
5357: POP
// end ;
5358: PPOPN 4
5360: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5361: LD_INT 0
5363: PPUSH
5364: PPUSH
5365: PPUSH
5366: PPUSH
5367: PPUSH
5368: PPUSH
5369: PPUSH
// playersAmount := 0 ;
5370: LD_ADDR_VAR 0 3
5374: PUSH
5375: LD_INT 0
5377: ST_TO_ADDR
// _apeAreas := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 , ApeArea7 , ApeArea8 ] ;
5378: LD_ADDR_VAR 0 7
5382: PUSH
5383: LD_INT 5
5385: PUSH
5386: LD_INT 6
5388: PUSH
5389: LD_INT 7
5391: PUSH
5392: LD_INT 8
5394: PUSH
5395: LD_INT 9
5397: PUSH
5398: LD_INT 10
5400: PUSH
5401: LD_INT 11
5403: PUSH
5404: LD_INT 12
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5417: LD_ADDR_EXP 51
5421: PUSH
5422: LD_INT 0
5424: PUSH
5425: LD_INT 0
5427: PUSH
5428: LD_INT 0
5430: PUSH
5431: LD_INT 0
5433: PUSH
5434: LD_INT 0
5436: PUSH
5437: LD_INT 0
5439: PUSH
5440: LD_INT 0
5442: PUSH
5443: LD_INT 0
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: ST_TO_ADDR
// for j = 1 to Side_Positions do
5456: LD_ADDR_VAR 0 4
5460: PUSH
5461: DOUBLE
5462: LD_INT 1
5464: DEC
5465: ST_TO_ADDR
5466: LD_EXP 33
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5539
// if Side_Positions [ j ] then
5474: LD_EXP 33
5478: PUSH
5479: LD_VAR 0 4
5483: ARRAY
5484: IFFALSE 5537
// begin playersAmount := playersAmount + 1 ;
5486: LD_ADDR_VAR 0 3
5490: PUSH
5491: LD_VAR 0 3
5495: PUSH
5496: LD_INT 1
5498: PLUS
5499: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5500: LD_ADDR_EXP 51
5504: PUSH
5505: LD_EXP 51
5509: PPUSH
5510: LD_VAR 0 4
5514: PPUSH
5515: LD_VAR 0 7
5519: PUSH
5520: LD_EXP 33
5524: PUSH
5525: LD_VAR 0 4
5529: ARRAY
5530: ARRAY
5531: PPUSH
5532: CALL_OW 1
5536: ST_TO_ADDR
// end ;
5537: GO 5471
5539: POP
5540: POP
// apemanPerPlayer := 1 * amount_of_apemen ;
5541: LD_ADDR_EXP 47
5545: PUSH
5546: LD_INT 1
5548: PUSH
5549: LD_EXP 24
5553: MUL
5554: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5555: LD_ADDR_EXP 45
5559: PUSH
5560: LD_VAR 0 3
5564: PUSH
5565: LD_EXP 47
5569: MUL
5570: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5571: LD_ADDR_EXP 46
5575: PUSH
5576: LD_EXP 45
5580: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5581: LD_ADDR_EXP 48
5585: PUSH
5586: LD_INT 0
5588: PUSH
5589: LD_INT 0
5591: PUSH
5592: LD_INT 0
5594: PUSH
5595: LD_INT 0
5597: PUSH
5598: LD_INT 0
5600: PUSH
5601: LD_INT 0
5603: PUSH
5604: LD_INT 0
5606: PUSH
5607: LD_INT 0
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5620: LD_ADDR_EXP 49
5624: PUSH
5625: LD_INT 0
5627: PUSH
5628: LD_INT 0
5630: PUSH
5631: LD_INT 0
5633: PUSH
5634: LD_INT 0
5636: PUSH
5637: LD_INT 0
5639: PUSH
5640: LD_INT 0
5642: PUSH
5643: LD_INT 0
5645: PUSH
5646: LD_INT 0
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: ST_TO_ADDR
// apeLevel := 1 ;
5659: LD_ADDR_EXP 50
5663: PUSH
5664: LD_INT 1
5666: ST_TO_ADDR
// if not apemanNumber then
5667: LD_EXP 45
5671: NOT
5672: IFFALSE 5676
// exit ;
5674: GO 5872
// for i := 1 to apemanPerPlayer do
5676: LD_ADDR_VAR 0 2
5680: PUSH
5681: DOUBLE
5682: LD_INT 1
5684: DEC
5685: ST_TO_ADDR
5686: LD_EXP 47
5690: PUSH
5691: FOR_TO
5692: IFFALSE 5870
// begin for j := 1 to Side_Positions do
5694: LD_ADDR_VAR 0 4
5698: PUSH
5699: DOUBLE
5700: LD_INT 1
5702: DEC
5703: ST_TO_ADDR
5704: LD_EXP 33
5708: PUSH
5709: FOR_TO
5710: IFFALSE 5866
// if Side_Positions [ j ] then
5712: LD_EXP 33
5716: PUSH
5717: LD_VAR 0 4
5721: ARRAY
5722: IFFALSE 5864
// begin pos := Side_Positions [ j ] ;
5724: LD_ADDR_VAR 0 6
5728: PUSH
5729: LD_EXP 33
5733: PUSH
5734: LD_VAR 0 4
5738: ARRAY
5739: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5740: LD_ADDR_EXP 49
5744: PUSH
5745: LD_EXP 49
5749: PPUSH
5750: LD_VAR 0 4
5754: PPUSH
5755: LD_EXP 49
5759: PUSH
5760: LD_VAR 0 4
5764: ARRAY
5765: PUSH
5766: LD_INT 1
5768: PLUS
5769: PPUSH
5770: CALL_OW 1
5774: ST_TO_ADDR
// ape := PrepareApeman ;
5775: LD_ADDR_VAR 0 5
5779: PUSH
5780: CALL 5877 0 0
5784: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5785: LD_ADDR_EXP 48
5789: PUSH
5790: LD_EXP 48
5794: PPUSH
5795: LD_VAR 0 4
5799: PPUSH
5800: LD_EXP 48
5804: PUSH
5805: LD_VAR 0 4
5809: ARRAY
5810: PPUSH
5811: LD_EXP 48
5815: PUSH
5816: LD_VAR 0 4
5820: ARRAY
5821: PUSH
5822: LD_INT 1
5824: PLUS
5825: PPUSH
5826: LD_VAR 0 5
5830: PPUSH
5831: CALL_OW 1
5835: PPUSH
5836: CALL_OW 1
5840: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5841: LD_VAR 0 5
5845: PPUSH
5846: LD_EXP 51
5850: PUSH
5851: LD_VAR 0 4
5855: ARRAY
5856: PPUSH
5857: LD_INT 0
5859: PPUSH
5860: CALL_OW 49
// end ;
5864: GO 5709
5866: POP
5867: POP
// end ;
5868: GO 5691
5870: POP
5871: POP
// end ;
5872: LD_VAR 0 1
5876: RET
// export function PrepareApeman ; var bonus ; begin
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
// uc_side := 0 ;
5881: LD_ADDR_OWVAR 20
5885: PUSH
5886: LD_INT 0
5888: ST_TO_ADDR
// uc_nation := 0 ;
5889: LD_ADDR_OWVAR 21
5893: PUSH
5894: LD_INT 0
5896: ST_TO_ADDR
// InitHc ;
5897: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: LD_INT 1
5908: NEG
5909: PUSH
5910: LD_INT 0
5912: PUSH
5913: LD_INT 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: LIST
5920: PUSH
5921: LD_OWVAR 1
5925: PUSH
5926: LD_INT 3
5928: MOD
5929: PUSH
5930: LD_INT 1
5932: PLUS
5933: ARRAY
5934: ST_TO_ADDR
// hc_class := class_apeman ;
5935: LD_ADDR_OWVAR 28
5939: PUSH
5940: LD_INT 12
5942: ST_TO_ADDR
// hc_gallery :=  ;
5943: LD_ADDR_OWVAR 33
5947: PUSH
5948: LD_STRING 
5950: ST_TO_ADDR
// hc_name :=  ;
5951: LD_ADDR_OWVAR 26
5955: PUSH
5956: LD_STRING 
5958: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5959: LD_ADDR_OWVAR 31
5963: PUSH
5964: LD_EXP 50
5968: PUSH
5969: LD_VAR 0 2
5973: PLUS
5974: PUSH
5975: LD_EXP 50
5979: PUSH
5980: LD_VAR 0 2
5984: PLUS
5985: PUSH
5986: LD_EXP 50
5990: PUSH
5991: LD_VAR 0 2
5995: PLUS
5996: PUSH
5997: LD_EXP 50
6001: PUSH
6002: LD_VAR 0 2
6006: PLUS
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6014: LD_ADDR_OWVAR 35
6018: PUSH
6019: LD_INT 10
6021: PUSH
6022: LD_VAR 0 2
6026: MUL
6027: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6028: LD_ADDR_OWVAR 29
6032: PUSH
6033: LD_INT 12
6035: PUSH
6036: LD_INT 10
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: ST_TO_ADDR
// result := CreateHuman ;
6043: LD_ADDR_VAR 0 1
6047: PUSH
6048: CALL_OW 44
6052: ST_TO_ADDR
// end ;
6053: LD_VAR 0 1
6057: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6058: LD_INT 0
6060: PPUSH
6061: PPUSH
6062: PPUSH
// if not ape then
6063: LD_VAR 0 1
6067: NOT
6068: IFFALSE 6072
// exit ;
6070: GO 6197
// side := GetSide ( ape ) ;
6072: LD_ADDR_VAR 0 3
6076: PUSH
6077: LD_VAR 0 1
6081: PPUSH
6082: CALL_OW 255
6086: ST_TO_ADDR
// if not side then
6087: LD_VAR 0 3
6091: NOT
6092: IFFALSE 6146
// begin for i = 1 to apemanPos do
6094: LD_ADDR_VAR 0 4
6098: PUSH
6099: DOUBLE
6100: LD_INT 1
6102: DEC
6103: ST_TO_ADDR
6104: LD_EXP 48
6108: PUSH
6109: FOR_TO
6110: IFFALSE 6144
// if ape in apemanPos [ i ] then
6112: LD_VAR 0 1
6116: PUSH
6117: LD_EXP 48
6121: PUSH
6122: LD_VAR 0 4
6126: ARRAY
6127: IN
6128: IFFALSE 6142
// begin side := i ;
6130: LD_ADDR_VAR 0 3
6134: PUSH
6135: LD_VAR 0 4
6139: ST_TO_ADDR
// break ;
6140: GO 6144
// end ;
6142: GO 6109
6144: POP
6145: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6146: LD_ADDR_EXP 48
6150: PUSH
6151: LD_EXP 48
6155: PPUSH
6156: LD_VAR 0 3
6160: PPUSH
6161: LD_EXP 48
6165: PUSH
6166: LD_VAR 0 3
6170: ARRAY
6171: PUSH
6172: LD_VAR 0 1
6176: DIFF
6177: PPUSH
6178: CALL_OW 1
6182: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6183: LD_ADDR_EXP 45
6187: PUSH
6188: LD_EXP 45
6192: PUSH
6193: LD_INT 1
6195: MINUS
6196: ST_TO_ADDR
// end ; end_of_file
6197: LD_VAR 0 2
6201: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6202: LD_VAR 0 1
6206: PPUSH
6207: CALL_OW 266
6211: PUSH
6212: LD_INT 0
6214: PUSH
6215: LD_INT 1
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: IN
6222: IFFALSE 6247
// SetBName ( b , @ & GetSide ( b ) ) ;
6224: LD_VAR 0 1
6228: PPUSH
6229: LD_STRING @
6231: PUSH
6232: LD_VAR 0 1
6236: PPUSH
6237: CALL_OW 255
6241: STR
6242: PPUSH
6243: CALL_OW 500
// end ;
6247: PPOPN 2
6249: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6250: LD_VAR 0 1
6254: PPUSH
6255: CALL_OW 266
6259: PUSH
6260: LD_INT 0
6262: PUSH
6263: LD_INT 1
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: IN
6270: IFFALSE 6295
// SetBName ( b , @ & GetSide ( b ) ) ;
6272: LD_VAR 0 1
6276: PPUSH
6277: LD_STRING @
6279: PUSH
6280: LD_VAR 0 1
6284: PPUSH
6285: CALL_OW 255
6289: STR
6290: PPUSH
6291: CALL_OW 500
// end ;
6295: PPOPN 3
6297: END
// on VehicleConstructed ( veh , fac ) do var side ;
6298: LD_INT 0
6300: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6301: LD_VAR 0 1
6305: PPUSH
6306: CALL_OW 263
6310: PUSH
6311: LD_INT 5
6313: EQUAL
6314: IFFALSE 6456
// begin side := GetSide ( veh ) ;
6316: LD_ADDR_VAR 0 3
6320: PUSH
6321: LD_VAR 0 1
6325: PPUSH
6326: CALL_OW 255
6330: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6331: LD_ADDR_EXP 48
6335: PUSH
6336: LD_EXP 48
6340: PPUSH
6341: LD_VAR 0 3
6345: PPUSH
6346: LD_EXP 48
6350: PUSH
6351: LD_VAR 0 3
6355: ARRAY
6356: PPUSH
6357: LD_INT 52
6359: PUSH
6360: EMPTY
6361: LIST
6362: PPUSH
6363: CALL_OW 72
6367: PUSH
6368: LD_INT 22
6370: PUSH
6371: LD_VAR 0 3
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 2
6382: PUSH
6383: LD_INT 33
6385: PUSH
6386: LD_INT 5
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: PUSH
6393: LD_INT 25
6395: PUSH
6396: LD_INT 12
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PUSH
6403: LD_INT 25
6405: PUSH
6406: LD_INT 15
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: LD_INT 25
6415: PUSH
6416: LD_INT 16
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 25
6425: PUSH
6426: LD_INT 17
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PPUSH
6445: CALL_OW 69
6449: UNION
6450: PPUSH
6451: CALL_OW 1
6455: ST_TO_ADDR
// end ; end ;
6456: PPOPN 3
6458: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6459: LD_INT 0
6461: PPUSH
6462: PPUSH
6463: PPUSH
6464: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6465: LD_VAR 0 1
6469: PPUSH
6470: CALL_OW 257
6474: PUSH
6475: LD_INT 12
6477: PUSH
6478: LD_INT 15
6480: PUSH
6481: LD_INT 17
6483: PUSH
6484: LD_INT 16
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: IN
6493: PUSH
6494: LD_VAR 0 1
6498: PPUSH
6499: CALL_OW 263
6503: PUSH
6504: LD_INT 5
6506: EQUAL
6507: OR
6508: IFFALSE 6519
// ApeKilled ( j ) ;
6510: LD_VAR 0 1
6514: PPUSH
6515: CALL 6058 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6519: LD_VAR 0 1
6523: PPUSH
6524: CALL_OW 266
6528: PUSH
6529: LD_INT 0
6531: PUSH
6532: LD_INT 1
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: IN
6539: IFFALSE 6621
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6541: LD_ADDR_VAR 0 4
6545: PUSH
6546: LD_EXP 33
6550: PUSH
6551: LD_VAR 0 1
6555: PPUSH
6556: CALL_OW 255
6560: ARRAY
6561: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6562: LD_ADDR_VAR 0 2
6566: PUSH
6567: LD_EXP 38
6571: PUSH
6572: LD_VAR 0 4
6576: ARRAY
6577: PUSH
6578: LD_INT 1
6580: ARRAY
6581: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: LD_EXP 38
6591: PUSH
6592: LD_VAR 0 4
6596: ARRAY
6597: PUSH
6598: LD_INT 2
6600: ARRAY
6601: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6602: LD_VAR 0 2
6606: PPUSH
6607: LD_VAR 0 3
6611: PPUSH
6612: CALL_OW 420
6616: PPUSH
6617: CALL_OW 419
// end ; end ;
6621: PPOPN 5
6623: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6624: LD_VAR 0 1
6628: PPUSH
6629: LD_VAR 0 2
6633: PPUSH
6634: LD_VAR 0 3
6638: PPUSH
6639: LD_OWVAR 2
6643: PPUSH
6644: CALL 6981 0 4
6648: PPOPN 3
6650: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6651: LD_INT 0
6653: PPUSH
6654: PPUSH
// for un in battle_flags_id do
6655: LD_ADDR_VAR 0 2
6659: PUSH
6660: LD_EXP 43
6664: PUSH
6665: FOR_IN
6666: IFFALSE 6741
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6668: LD_VAR 0 2
6672: PPUSH
6673: LD_INT 1
6675: PUSH
6676: LD_LOC 9
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PUSH
6685: LD_INT 2
6687: PUSH
6688: LD_LOC 9
6692: PUSH
6693: LD_INT 2
6695: DIV
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: LD_LOC 9
6708: PUSH
6709: LD_INT 5
6711: DIV
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: LD_INT 20
6719: PUSH
6720: LD_LOC 9
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PPUSH
6735: CALL_OW 423
6739: GO 6665
6741: POP
6742: POP
// end ;
6743: LD_VAR 0 1
6747: RET
// every 1 do var un ;
6748: GO 6750
6750: DISABLE
6751: LD_INT 0
6753: PPUSH
// begin if not def_morale_flags then
6754: LD_EXP 9
6758: NOT
6759: IFFALSE 6763
// exit ;
6761: GO 6840
// if not morale_decreasing_time then
6763: LD_EXP 23
6767: NOT
6768: IFFALSE 6772
// exit ;
6770: GO 6840
// strength = 100 ;
6772: LD_ADDR_LOC 9
6776: PUSH
6777: LD_INT 100
6779: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6780: LD_EXP 23
6784: PPUSH
6785: CALL_OW 67
// strength := strength - 1 ;
6789: LD_ADDR_LOC 9
6793: PUSH
6794: LD_LOC 9
6798: PUSH
6799: LD_INT 1
6801: MINUS
6802: ST_TO_ADDR
// Update_Flags ;
6803: CALL 6651 0 0
// until not strength ;
6807: LD_LOC 9
6811: NOT
6812: IFFALSE 6780
// for un in battle_flags_id do
6814: LD_ADDR_VAR 0 1
6818: PUSH
6819: LD_EXP 43
6823: PUSH
6824: FOR_IN
6825: IFFALSE 6838
// KillBattleFlag ( un ) ;
6827: LD_VAR 0 1
6831: PPUSH
6832: CALL_OW 419
6836: GO 6824
6838: POP
6839: POP
// end ; end_of_file
6840: PPOPN 1
6842: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6843: LD_INT 0
6845: PPUSH
6846: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6847: LD_ADDR_VAR 0 2
6851: PUSH
6852: LD_STRING #Multi1x1-Time
6854: PUSH
6855: LD_OWVAR 1
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: ST_TO_ADDR
// if WaitServerStrings then
6864: LD_EXP 53
6868: IFFALSE 6886
// AllStrings = AllStrings ^ WaitServerStrings ;
6870: LD_ADDR_VAR 0 2
6874: PUSH
6875: LD_VAR 0 2
6879: PUSH
6880: LD_EXP 53
6884: ADD
6885: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6886: LD_INT 0
6888: PUSH
6889: LD_EXP 28
6893: PUSH
6894: LD_OWVAR 1
6898: MINUS
6899: LESSEQUAL
6900: IFFALSE 6931
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6902: LD_ADDR_VAR 0 2
6906: PUSH
6907: LD_VAR 0 2
6911: PUSH
6912: LD_STRING #allowedsibbomb
6914: PUSH
6915: LD_EXP 28
6919: PUSH
6920: LD_OWVAR 1
6924: MINUS
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: ADD
6930: ST_TO_ADDR
// if ( ExtraStrings ) then
6931: LD_EXP 52
6935: IFFALSE 6957
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6937: LD_ADDR_VAR 0 2
6941: PUSH
6942: LD_VAR 0 2
6946: PUSH
6947: LD_STRING 
6949: ADD
6950: PUSH
6951: LD_EXP 52
6955: ADD
6956: ST_TO_ADDR
// Display_Strings := AllStrings ;
6957: LD_ADDR_OWVAR 47
6961: PUSH
6962: LD_VAR 0 2
6966: ST_TO_ADDR
// end ;
6967: LD_VAR 0 1
6971: RET
// every 0 0$1 do
6972: GO 6974
6974: DISABLE
// begin ShowTimer ;
6975: CALL 6843 0 0
// enable ;
6979: ENABLE
// end ; end_of_file
6980: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
6981: LD_INT 0
6983: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
6984: LD_VAR 0 1
6988: PPUSH
6989: CALL_OW 255
6993: PUSH
6994: LD_VAR 0 4
6998: EQUAL
6999: IFFALSE 7018
// begin SetAchievement ( ACH_RAD ) ;
7001: LD_STRING ACH_RAD
7003: PPUSH
7004: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7008: LD_STRING ACH_NL
7010: PPUSH
7011: LD_INT 1
7013: PPUSH
7014: CALL_OW 564
// end end ;
7018: LD_VAR 0 5
7022: RET
// export function SA_Win ( side ) ; begin
7023: LD_INT 0
7025: PPUSH
// case side of 1 :
7026: LD_VAR 0 1
7030: PUSH
7031: LD_INT 1
7033: DOUBLE
7034: EQUAL
7035: IFTRUE 7039
7037: GO 7052
7039: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7040: LD_STRING ACH_AH
7042: PPUSH
7043: LD_INT 1
7045: PPUSH
7046: CALL_OW 564
7050: GO 7215
7052: LD_INT 2
7054: DOUBLE
7055: EQUAL
7056: IFTRUE 7060
7058: GO 7073
7060: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7061: LD_STRING ACH_E
7063: PPUSH
7064: LD_INT 1
7066: PPUSH
7067: CALL_OW 564
7071: GO 7215
7073: LD_INT 3
7075: DOUBLE
7076: EQUAL
7077: IFTRUE 7081
7079: GO 7094
7081: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7082: LD_STRING ACH_OOL
7084: PPUSH
7085: LD_INT 1
7087: PPUSH
7088: CALL_OW 564
7092: GO 7215
7094: LD_INT 1
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: DOUBLE
7104: EQUAL
7105: IFTRUE 7109
7107: GO 7134
7109: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7110: LD_STRING ACH_AH
7112: PPUSH
7113: LD_REAL  5.00000000000000E-0001
7116: PPUSH
7117: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7121: LD_STRING ACH_E
7123: PPUSH
7124: LD_REAL  5.00000000000000E-0001
7127: PPUSH
7128: CALL_OW 564
// end ; [ 2 , 3 ] :
7132: GO 7215
7134: LD_INT 2
7136: PUSH
7137: LD_INT 3
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: DOUBLE
7144: EQUAL
7145: IFTRUE 7149
7147: GO 7174
7149: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7150: LD_STRING ACH_OOL
7152: PPUSH
7153: LD_REAL  5.00000000000000E-0001
7156: PPUSH
7157: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7161: LD_STRING ACH_E
7163: PPUSH
7164: LD_REAL  5.00000000000000E-0001
7167: PPUSH
7168: CALL_OW 564
// end ; [ 3 , 1 ] :
7172: GO 7215
7174: LD_INT 3
7176: PUSH
7177: LD_INT 1
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: DOUBLE
7184: EQUAL
7185: IFTRUE 7189
7187: GO 7214
7189: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7190: LD_STRING ACH_AH
7192: PPUSH
7193: LD_REAL  5.00000000000000E-0001
7196: PPUSH
7197: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7201: LD_STRING ACH_OOL
7203: PPUSH
7204: LD_REAL  5.00000000000000E-0001
7207: PPUSH
7208: CALL_OW 564
// end ; end ;
7212: GO 7215
7214: POP
// end ; end_of_file
7215: LD_VAR 0 2
7219: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7220: LD_INT 0
7222: PPUSH
7223: PPUSH
// enable ( 98 ) ;
7224: LD_INT 98
7226: ENABLE_MARKED
// GameEnded = false ;
7227: LD_ADDR_LOC 15
7231: PUSH
7232: LD_INT 0
7234: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7235: LD_ADDR_LOC 14
7239: PUSH
7240: LD_INT 0
7242: PUSH
7243: LD_INT 0
7245: PUSH
7246: LD_INT 0
7248: PUSH
7249: LD_INT 0
7251: PUSH
7252: LD_INT 0
7254: PUSH
7255: LD_INT 0
7257: PUSH
7258: LD_INT 0
7260: PUSH
7261: LD_INT 0
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: ST_TO_ADDR
// unfoged = false ;
7274: LD_ADDR_LOC 16
7278: PUSH
7279: LD_INT 0
7281: ST_TO_ADDR
// defeated_specs := [ ] ;
7282: LD_ADDR_LOC 17
7286: PUSH
7287: EMPTY
7288: ST_TO_ADDR
// for i = 1 to side_positions do
7289: LD_ADDR_VAR 0 2
7293: PUSH
7294: DOUBLE
7295: LD_INT 1
7297: DEC
7298: ST_TO_ADDR
7299: LD_EXP 33
7303: PUSH
7304: FOR_TO
7305: IFFALSE 7345
// if not side_positions [ i ] then
7307: LD_EXP 33
7311: PUSH
7312: LD_VAR 0 2
7316: ARRAY
7317: NOT
7318: IFFALSE 7343
// defeated = replace ( defeated , i , true ) ;
7320: LD_ADDR_LOC 14
7324: PUSH
7325: LD_LOC 14
7329: PPUSH
7330: LD_VAR 0 2
7334: PPUSH
7335: LD_INT 1
7337: PPUSH
7338: CALL_OW 1
7342: ST_TO_ADDR
7343: GO 7304
7345: POP
7346: POP
// end ;
7347: LD_VAR 0 1
7351: RET
// function CanWinLoose ; begin
7352: LD_INT 0
7354: PPUSH
// Result := true ;
7355: LD_ADDR_VAR 0 1
7359: PUSH
7360: LD_INT 1
7362: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7363: CALL_OW 518
7367: PUSH
7368: CALL_OW 519
7372: PUSH
7373: LD_INT 0
7375: GREATER
7376: AND
7377: IFFALSE 7387
// Result := false ;
7379: LD_ADDR_VAR 0 1
7383: PUSH
7384: LD_INT 0
7386: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7387: CALL_OW 531
7391: PUSH
7392: CALL_OW 519
7396: PUSH
7397: LD_INT 1
7399: GREATER
7400: AND
7401: IFFALSE 7411
// Result := false ;
7403: LD_ADDR_VAR 0 1
7407: PUSH
7408: LD_INT 0
7410: ST_TO_ADDR
// end ;
7411: LD_VAR 0 1
7415: RET
// export function HasPower ( i ) ; var k , h ; begin
7416: LD_INT 0
7418: PPUSH
7419: PPUSH
7420: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7421: LD_VAR 0 1
7425: PPUSH
7426: CALL_OW 108
7430: NOT
7431: PUSH
7432: LD_EXP 32
7436: PUSH
7437: LD_VAR 0 1
7441: ARRAY
7442: NOT
7443: AND
7444: PUSH
7445: LD_OWVAR 4
7449: AND
7450: IFFALSE 7462
// begin result = false ;
7452: LD_ADDR_VAR 0 2
7456: PUSH
7457: LD_INT 0
7459: ST_TO_ADDR
// end else
7460: GO 7757
// case def_win_rules of 0 :
7462: LD_EXP 29
7466: PUSH
7467: LD_INT 0
7469: DOUBLE
7470: EQUAL
7471: IFTRUE 7475
7473: GO 7638
7475: POP
// if def_people_respawning then
7476: LD_EXP 11
7480: IFFALSE 7571
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7482: LD_ADDR_VAR 0 2
7486: PUSH
7487: LD_INT 22
7489: PUSH
7490: LD_VAR 0 1
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 2
7501: PUSH
7502: LD_INT 21
7504: PUSH
7505: LD_INT 1
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 33
7514: PUSH
7515: LD_INT 3
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: LD_INT 33
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 30
7534: PUSH
7535: LD_INT 0
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: PUSH
7542: LD_INT 30
7544: PUSH
7545: LD_INT 1
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PPUSH
7564: CALL_OW 69
7568: ST_TO_ADDR
7569: GO 7636
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7571: LD_ADDR_VAR 0 2
7575: PUSH
7576: LD_INT 22
7578: PUSH
7579: LD_VAR 0 1
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: LD_INT 2
7590: PUSH
7591: LD_INT 21
7593: PUSH
7594: LD_INT 1
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: LD_INT 33
7603: PUSH
7604: LD_INT 3
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PUSH
7611: LD_INT 33
7613: PUSH
7614: LD_INT 5
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: PPUSH
7631: CALL_OW 69
7635: ST_TO_ADDR
7636: GO 7757
7638: LD_INT 1
7640: DOUBLE
7641: EQUAL
7642: IFTRUE 7646
7644: GO 7685
7646: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7647: LD_ADDR_VAR 0 2
7651: PUSH
7652: LD_INT 22
7654: PUSH
7655: LD_VAR 0 1
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PPUSH
7678: CALL_OW 69
7682: ST_TO_ADDR
7683: GO 7757
7685: LD_INT 2
7687: DOUBLE
7688: EQUAL
7689: IFTRUE 7693
7691: GO 7756
7693: POP
// begin h = false ;
7694: LD_ADDR_VAR 0 4
7698: PUSH
7699: LD_INT 0
7701: ST_TO_ADDR
// for k in heroes [ i ] do
7702: LD_ADDR_VAR 0 3
7706: PUSH
7707: LD_EXP 44
7711: PUSH
7712: LD_VAR 0 1
7716: ARRAY
7717: PUSH
7718: FOR_IN
7719: IFFALSE 7742
// if IsLive ( k ) then
7721: LD_VAR 0 3
7725: PPUSH
7726: CALL_OW 300
7730: IFFALSE 7740
// h = true ;
7732: LD_ADDR_VAR 0 4
7736: PUSH
7737: LD_INT 1
7739: ST_TO_ADDR
7740: GO 7718
7742: POP
7743: POP
// Result := h ;
7744: LD_ADDR_VAR 0 2
7748: PUSH
7749: LD_VAR 0 4
7753: ST_TO_ADDR
// end ; end ;
7754: GO 7757
7756: POP
// end ;
7757: LD_VAR 0 2
7761: RET
// function AlliedSides ( i , j ) ; begin
7762: LD_INT 0
7764: PPUSH
// Result := false ;
7765: LD_ADDR_VAR 0 3
7769: PUSH
7770: LD_INT 0
7772: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7773: LD_VAR 0 1
7777: PPUSH
7778: LD_VAR 0 2
7782: PPUSH
7783: CALL_OW 81
7787: PUSH
7788: LD_INT 1
7790: EQUAL
7791: PUSH
7792: LD_VAR 0 2
7796: PPUSH
7797: LD_VAR 0 1
7801: PPUSH
7802: CALL_OW 81
7806: PUSH
7807: LD_INT 1
7809: EQUAL
7810: AND
7811: PUSH
7812: LD_VAR 0 1
7816: PPUSH
7817: CALL_OW 83
7821: AND
7822: PUSH
7823: LD_VAR 0 2
7827: PPUSH
7828: CALL_OW 83
7832: AND
7833: IFFALSE 7843
// Result := true ;
7835: LD_ADDR_VAR 0 3
7839: PUSH
7840: LD_INT 1
7842: ST_TO_ADDR
// end ;
7843: LD_VAR 0 3
7847: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
7848: CALL 7352 0 0
7852: PUSH
7853: LD_LOC 15
7857: NOT
7858: AND
7859: IFFALSE 7875
7861: GO 7863
7863: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
7864: LD_ADDR_EXP 53
7868: PUSH
7869: LD_STRING #Player-Ended
7871: PUSH
7872: EMPTY
7873: LIST
7874: ST_TO_ADDR
7875: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
7876: CALL 7352 0 0
7880: PUSH
7881: LD_LOC 15
7885: AND
7886: IFFALSE 7895
7888: GO 7890
7890: DISABLE
// YouLostInMultiplayer ;
7891: CALL_OW 107
7895: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
7896: CALL 7352 0 0
7900: NOT
7901: PUSH
7902: CALL_OW 531
7906: NOT
7907: AND
7908: IFFALSE 7924
7910: GO 7912
7912: DISABLE
// WaitServerStrings = [ #server-wait ] ;
7913: LD_ADDR_EXP 53
7917: PUSH
7918: LD_STRING #server-wait
7920: PUSH
7921: EMPTY
7922: LIST
7923: ST_TO_ADDR
7924: END
// every 100 trigger IAmSpec do
7925: CALL_OW 531
7929: IFFALSE 7945
7931: GO 7933
7933: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
7934: LD_ADDR_EXP 53
7938: PUSH
7939: LD_STRING #Player-IAmSpec
7941: PUSH
7942: EMPTY
7943: LIST
7944: ST_TO_ADDR
7945: END
// every 100 trigger GameEnded and IAmSpec do
7946: LD_LOC 15
7950: PUSH
7951: CALL_OW 531
7955: AND
7956: IFFALSE 7965
7958: GO 7960
7960: DISABLE
// YouLostInMultiplayer ;
7961: CALL_OW 107
7965: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
7966: CALL 7352 0 0
7970: PUSH
7971: LD_LOC 15
7975: NOT
7976: AND
7977: IFFALSE 7993
7979: GO 7981
7981: DISABLE
// WaitServerStrings = [ $player-win ] ;
7982: LD_ADDR_EXP 53
7986: PUSH
7987: LD_STRING $player-win
7989: PUSH
7990: EMPTY
7991: LIST
7992: ST_TO_ADDR
7993: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
7994: CALL 7352 0 0
7998: PUSH
7999: LD_LOC 15
8003: AND
8004: IFFALSE 8028
8006: GO 8008
8008: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8009: LD_EXP 34
8013: PUSH
8014: LD_OWVAR 7
8018: ARRAY
8019: PPUSH
8020: CALL 7023 0 1
// YouWinInMultiplayer ;
8024: CALL_OW 106
// end ;
8028: END
// every 100 trigger isEditor marked 401 do
8029: LD_OWVAR 84
8033: IFFALSE 8049
8035: GO 8037
8037: DISABLE
// Debug_Strings = [ You won ] ;
8038: LD_ADDR_OWVAR 48
8042: PUSH
8043: LD_STRING You won
8045: PUSH
8046: EMPTY
8047: LIST
8048: ST_TO_ADDR
8049: END
// every 100 trigger isEditor marked 400 do
8050: LD_OWVAR 84
8054: IFFALSE 8070
8056: GO 8058
8058: DISABLE
// Debug_Strings = [ You loss ] ;
8059: LD_ADDR_OWVAR 48
8063: PUSH
8064: LD_STRING You loss
8066: PUSH
8067: EMPTY
8068: LIST
8069: ST_TO_ADDR
8070: END
// every 100 marked 98 do var i , un ;
8071: GO 8073
8073: DISABLE
8074: LD_INT 0
8076: PPUSH
8077: PPUSH
// begin for i = 1 to side_positions do
8078: LD_ADDR_VAR 0 1
8082: PUSH
8083: DOUBLE
8084: LD_INT 1
8086: DEC
8087: ST_TO_ADDR
8088: LD_EXP 33
8092: PUSH
8093: FOR_TO
8094: IFFALSE 8181
// begin if side_positions [ i ] then
8096: LD_EXP 33
8100: PUSH
8101: LD_VAR 0 1
8105: ARRAY
8106: IFFALSE 8179
// if not HasPower ( i ) and not defeated [ i ] then
8108: LD_VAR 0 1
8112: PPUSH
8113: CALL 7416 0 1
8117: NOT
8118: PUSH
8119: LD_LOC 14
8123: PUSH
8124: LD_VAR 0 1
8128: ARRAY
8129: NOT
8130: AND
8131: IFFALSE 8179
// begin defeated = replace ( defeated , i , true ) ;
8133: LD_ADDR_LOC 14
8137: PUSH
8138: LD_LOC 14
8142: PPUSH
8143: LD_VAR 0 1
8147: PPUSH
8148: LD_INT 1
8150: PPUSH
8151: CALL_OW 1
8155: ST_TO_ADDR
// if i = mp_player_side then
8156: LD_VAR 0 1
8160: PUSH
8161: LD_OWVAR 7
8165: EQUAL
8166: IFFALSE 8179
// begin Multiplayer_Loose_Message ;
8168: CALL_OW 521
// SetPlayerSpectator ( ) ;
8172: CALL_OW 572
// enable ( 400 ) ;
8176: LD_INT 400
8178: ENABLE_MARKED
// end ; end ; end ;
8179: GO 8093
8181: POP
8182: POP
// DidGameEnd ;
8183: CALL 8198 0 0
// if not GameEnded then
8187: LD_LOC 15
8191: NOT
8192: IFFALSE 8195
// enable ;
8194: ENABLE
// end ;
8195: PPOPN 2
8197: END
// function DidGameEnd ; var i , k , enemy ; begin
8198: LD_INT 0
8200: PPUSH
8201: PPUSH
8202: PPUSH
8203: PPUSH
// enemy = [ ] ;
8204: LD_ADDR_VAR 0 4
8208: PUSH
8209: EMPTY
8210: ST_TO_ADDR
// for i = 1 to side_positions do
8211: LD_ADDR_VAR 0 2
8215: PUSH
8216: DOUBLE
8217: LD_INT 1
8219: DEC
8220: ST_TO_ADDR
8221: LD_EXP 33
8225: PUSH
8226: FOR_TO
8227: IFFALSE 8321
// if not defeated [ i ] then
8229: LD_LOC 14
8233: PUSH
8234: LD_VAR 0 2
8238: ARRAY
8239: NOT
8240: IFFALSE 8319
// for k = 1 to side_positions do
8242: LD_ADDR_VAR 0 3
8246: PUSH
8247: DOUBLE
8248: LD_INT 1
8250: DEC
8251: ST_TO_ADDR
8252: LD_EXP 33
8256: PUSH
8257: FOR_TO
8258: IFFALSE 8317
// if not defeated [ k ] then
8260: LD_LOC 14
8264: PUSH
8265: LD_VAR 0 3
8269: ARRAY
8270: NOT
8271: IFFALSE 8315
// if not AlliedSides ( i , k ) then
8273: LD_VAR 0 2
8277: PPUSH
8278: LD_VAR 0 3
8282: PPUSH
8283: CALL 7762 0 2
8287: NOT
8288: IFFALSE 8315
// enemy = enemy ^ [ i , k ] ;
8290: LD_ADDR_VAR 0 4
8294: PUSH
8295: LD_VAR 0 4
8299: PUSH
8300: LD_VAR 0 2
8304: PUSH
8305: LD_VAR 0 3
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: ADD
8314: ST_TO_ADDR
8315: GO 8257
8317: POP
8318: POP
8319: GO 8226
8321: POP
8322: POP
// if not enemy then
8323: LD_VAR 0 4
8327: NOT
8328: IFFALSE 8354
// begin GameEnded = true ;
8330: LD_ADDR_LOC 15
8334: PUSH
8335: LD_INT 1
8337: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8338: LD_LOC 14
8342: PUSH
8343: LD_OWVAR 7
8347: ARRAY
8348: NOT
8349: IFFALSE 8354
// enable ( 401 ) ;
8351: LD_INT 401
8353: ENABLE_MARKED
// end ; end ;
8354: LD_VAR 0 1
8358: RET
// function unfog ; var k , friends ; begin
8359: LD_INT 0
8361: PPUSH
8362: PPUSH
8363: PPUSH
// for k = 1 to side_positions do
8364: LD_ADDR_VAR 0 2
8368: PUSH
8369: DOUBLE
8370: LD_INT 1
8372: DEC
8373: ST_TO_ADDR
8374: LD_EXP 33
8378: PUSH
8379: FOR_TO
8380: IFFALSE 8436
// if not defeated [ k ] then
8382: LD_LOC 14
8386: PUSH
8387: LD_VAR 0 2
8391: ARRAY
8392: NOT
8393: IFFALSE 8434
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8395: LD_OWVAR 7
8399: PPUSH
8400: LD_VAR 0 2
8404: PPUSH
8405: CALL_OW 81
8409: PUSH
8410: LD_INT 1
8412: PUSH
8413: EMPTY
8414: LIST
8415: IN
8416: IFFALSE 8434
// friends = friends ^ k ;
8418: LD_ADDR_VAR 0 3
8422: PUSH
8423: LD_VAR 0 3
8427: PUSH
8428: LD_VAR 0 2
8432: ADD
8433: ST_TO_ADDR
8434: GO 8379
8436: POP
8437: POP
// if not friends then
8438: LD_VAR 0 3
8442: NOT
8443: IFFALSE 8457
// begin SetPlayerSpectator ( ) ;
8445: CALL_OW 572
// unfoged = true ;
8449: LD_ADDR_LOC 16
8453: PUSH
8454: LD_INT 1
8456: ST_TO_ADDR
// end ; end ;
8457: LD_VAR 0 1
8461: RET
// export function MakeGameEnd ; begin
8462: LD_INT 0
8464: PPUSH
// SetPlayerSpectator ( ) ;
8465: CALL_OW 572
// unfoged = true ;
8469: LD_ADDR_LOC 16
8473: PUSH
8474: LD_INT 1
8476: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8477: LD_INT 175
8479: PPUSH
8480: CALL_OW 67
// GameEnded = true ;
8484: LD_ADDR_LOC 15
8488: PUSH
8489: LD_INT 1
8491: ST_TO_ADDR
// end ;
8492: LD_VAR 0 1
8496: RET
// export function GetGameEnded ; begin
8497: LD_INT 0
8499: PPUSH
// result = GameEnded ;
8500: LD_ADDR_VAR 0 1
8504: PUSH
8505: LD_LOC 15
8509: ST_TO_ADDR
// end ; end_of_file
8510: LD_VAR 0 1
8514: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8515: LD_INT 0
8517: PPUSH
8518: PPUSH
8519: PPUSH
// for side = 1 to 8 do
8520: LD_ADDR_VAR 0 2
8524: PUSH
8525: DOUBLE
8526: LD_INT 1
8528: DEC
8529: ST_TO_ADDR
8530: LD_INT 8
8532: PUSH
8533: FOR_TO
8534: IFFALSE 8655
// begin for i = 1 to 72 do
8536: LD_ADDR_VAR 0 3
8540: PUSH
8541: DOUBLE
8542: LD_INT 1
8544: DEC
8545: ST_TO_ADDR
8546: LD_INT 72
8548: PUSH
8549: FOR_TO
8550: IFFALSE 8581
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8552: LD_VAR 0 3
8556: PPUSH
8557: LD_VAR 0 2
8561: PPUSH
8562: LD_INT 0
8564: PPUSH
8565: LD_VAR 0 3
8569: PPUSH
8570: CALL_OW 565
8574: PPUSH
8575: CALL_OW 322
8579: GO 8549
8581: POP
8582: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8583: LD_INT 73
8585: PPUSH
8586: LD_VAR 0 2
8590: PPUSH
8591: LD_INT 0
8593: PPUSH
8594: LD_INT 25
8596: PPUSH
8597: CALL_OW 565
8601: PPUSH
8602: CALL_OW 322
// for i = 0 to 40 do
8606: LD_ADDR_VAR 0 3
8610: PUSH
8611: DOUBLE
8612: LD_INT 0
8614: DEC
8615: ST_TO_ADDR
8616: LD_INT 40
8618: PUSH
8619: FOR_TO
8620: IFFALSE 8651
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8622: LD_VAR 0 3
8626: PPUSH
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_INT 1
8634: PPUSH
8635: LD_VAR 0 3
8639: PPUSH
8640: CALL_OW 565
8644: PPUSH
8645: CALL_OW 324
8649: GO 8619
8651: POP
8652: POP
// end ;
8653: GO 8533
8655: POP
8656: POP
// end ;
8657: LD_VAR 0 1
8661: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8662: LD_INT 0
8664: PPUSH
8665: PPUSH
8666: PPUSH
// for side = 1 to 8 do
8667: LD_ADDR_VAR 0 3
8671: PUSH
8672: DOUBLE
8673: LD_INT 1
8675: DEC
8676: ST_TO_ADDR
8677: LD_INT 8
8679: PUSH
8680: FOR_TO
8681: IFFALSE 12677
// begin for i = 1 to 73 do
8683: LD_ADDR_VAR 0 4
8687: PUSH
8688: DOUBLE
8689: LD_INT 1
8691: DEC
8692: ST_TO_ADDR
8693: LD_INT 73
8695: PUSH
8696: FOR_TO
8697: IFFALSE 8718
// SetTech ( i , side , state_disabled ) ;
8699: LD_VAR 0 4
8703: PPUSH
8704: LD_VAR 0 3
8708: PPUSH
8709: LD_INT 0
8711: PPUSH
8712: CALL_OW 322
8716: GO 8696
8718: POP
8719: POP
// for i = 0 to 40 do
8720: LD_ADDR_VAR 0 4
8724: PUSH
8725: DOUBLE
8726: LD_INT 0
8728: DEC
8729: ST_TO_ADDR
8730: LD_INT 40
8732: PUSH
8733: FOR_TO
8734: IFFALSE 8755
// SetRestrict ( i , side , false ) ;
8736: LD_VAR 0 4
8740: PPUSH
8741: LD_VAR 0 3
8745: PPUSH
8746: LD_INT 0
8748: PPUSH
8749: CALL_OW 324
8753: GO 8733
8755: POP
8756: POP
// case level of 1 :
8757: LD_VAR 0 1
8761: PUSH
8762: LD_INT 1
8764: DOUBLE
8765: EQUAL
8766: IFTRUE 8770
8768: GO 8923
8770: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8771: LD_INT 35
8773: PPUSH
8774: LD_VAR 0 3
8778: PPUSH
8779: LD_INT 1
8781: PPUSH
8782: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8786: LD_INT 45
8788: PPUSH
8789: LD_VAR 0 3
8793: PPUSH
8794: LD_INT 1
8796: PPUSH
8797: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8801: LD_INT 46
8803: PPUSH
8804: LD_VAR 0 3
8808: PPUSH
8809: LD_INT 1
8811: PPUSH
8812: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8816: LD_INT 47
8818: PPUSH
8819: LD_VAR 0 3
8823: PPUSH
8824: LD_INT 1
8826: PPUSH
8827: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8831: LD_INT 0
8833: PPUSH
8834: LD_VAR 0 3
8838: PPUSH
8839: LD_INT 1
8841: PPUSH
8842: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8846: LD_INT 2
8848: PPUSH
8849: LD_VAR 0 3
8853: PPUSH
8854: LD_INT 1
8856: PPUSH
8857: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8861: LD_INT 4
8863: PPUSH
8864: LD_VAR 0 3
8868: PPUSH
8869: LD_INT 1
8871: PPUSH
8872: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8876: LD_INT 6
8878: PPUSH
8879: LD_VAR 0 3
8883: PPUSH
8884: LD_INT 1
8886: PPUSH
8887: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8891: LD_INT 29
8893: PPUSH
8894: LD_VAR 0 3
8898: PPUSH
8899: LD_INT 1
8901: PPUSH
8902: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8906: LD_INT 31
8908: PPUSH
8909: LD_VAR 0 3
8913: PPUSH
8914: LD_INT 1
8916: PPUSH
8917: CALL_OW 324
// end ; 2 :
8921: GO 12675
8923: LD_INT 2
8925: DOUBLE
8926: EQUAL
8927: IFTRUE 8931
8929: GO 9129
8931: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8932: LD_INT 35
8934: PPUSH
8935: LD_VAR 0 3
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8947: LD_INT 45
8949: PPUSH
8950: LD_VAR 0 3
8954: PPUSH
8955: LD_INT 1
8957: PPUSH
8958: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8962: LD_INT 46
8964: PPUSH
8965: LD_VAR 0 3
8969: PPUSH
8970: LD_INT 1
8972: PPUSH
8973: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8977: LD_INT 47
8979: PPUSH
8980: LD_VAR 0 3
8984: PPUSH
8985: LD_INT 1
8987: PPUSH
8988: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8992: LD_INT 1
8994: PPUSH
8995: LD_VAR 0 3
8999: PPUSH
9000: LD_INT 1
9002: PPUSH
9003: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9007: LD_INT 2
9009: PPUSH
9010: LD_VAR 0 3
9014: PPUSH
9015: LD_INT 1
9017: PPUSH
9018: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9022: LD_INT 11
9024: PPUSH
9025: LD_VAR 0 3
9029: PPUSH
9030: LD_INT 1
9032: PPUSH
9033: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9037: LD_INT 0
9039: PPUSH
9040: LD_VAR 0 3
9044: PPUSH
9045: LD_INT 1
9047: PPUSH
9048: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9052: LD_INT 2
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: LD_INT 1
9062: PPUSH
9063: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9067: LD_INT 4
9069: PPUSH
9070: LD_VAR 0 3
9074: PPUSH
9075: LD_INT 1
9077: PPUSH
9078: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9082: LD_INT 6
9084: PPUSH
9085: LD_VAR 0 3
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9097: LD_INT 29
9099: PPUSH
9100: LD_VAR 0 3
9104: PPUSH
9105: LD_INT 1
9107: PPUSH
9108: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9112: LD_INT 31
9114: PPUSH
9115: LD_VAR 0 3
9119: PPUSH
9120: LD_INT 1
9122: PPUSH
9123: CALL_OW 324
// end ; 3 :
9127: GO 12675
9129: LD_INT 3
9131: DOUBLE
9132: EQUAL
9133: IFTRUE 9137
9135: GO 9590
9137: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9138: LD_INT 35
9140: PPUSH
9141: LD_VAR 0 3
9145: PPUSH
9146: LD_INT 1
9148: PPUSH
9149: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9153: LD_INT 45
9155: PPUSH
9156: LD_VAR 0 3
9160: PPUSH
9161: LD_INT 1
9163: PPUSH
9164: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9168: LD_INT 46
9170: PPUSH
9171: LD_VAR 0 3
9175: PPUSH
9176: LD_INT 1
9178: PPUSH
9179: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9183: LD_INT 47
9185: PPUSH
9186: LD_VAR 0 3
9190: PPUSH
9191: LD_INT 1
9193: PPUSH
9194: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9198: LD_INT 1
9200: PPUSH
9201: LD_VAR 0 3
9205: PPUSH
9206: LD_INT 1
9208: PPUSH
9209: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9213: LD_INT 2
9215: PPUSH
9216: LD_VAR 0 3
9220: PPUSH
9221: LD_INT 1
9223: PPUSH
9224: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9228: LD_INT 11
9230: PPUSH
9231: LD_VAR 0 3
9235: PPUSH
9236: LD_INT 1
9238: PPUSH
9239: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9243: LD_INT 48
9245: PPUSH
9246: LD_VAR 0 3
9250: PPUSH
9251: LD_INT 1
9253: PPUSH
9254: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9258: LD_INT 69
9260: PPUSH
9261: LD_VAR 0 3
9265: PPUSH
9266: LD_INT 1
9268: PPUSH
9269: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9273: LD_INT 39
9275: PPUSH
9276: LD_VAR 0 3
9280: PPUSH
9281: LD_INT 1
9283: PPUSH
9284: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9288: LD_INT 43
9290: PPUSH
9291: LD_VAR 0 3
9295: PPUSH
9296: LD_INT 1
9298: PPUSH
9299: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9303: LD_INT 51
9305: PPUSH
9306: LD_VAR 0 3
9310: PPUSH
9311: LD_INT 1
9313: PPUSH
9314: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9318: LD_INT 6
9320: PPUSH
9321: LD_VAR 0 3
9325: PPUSH
9326: LD_INT 1
9328: PPUSH
9329: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9333: LD_INT 0
9335: PPUSH
9336: LD_VAR 0 3
9340: PPUSH
9341: LD_INT 1
9343: PPUSH
9344: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9348: LD_INT 2
9350: PPUSH
9351: LD_VAR 0 3
9355: PPUSH
9356: LD_INT 1
9358: PPUSH
9359: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9363: LD_INT 3
9365: PPUSH
9366: LD_VAR 0 3
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9378: LD_INT 4
9380: PPUSH
9381: LD_VAR 0 3
9385: PPUSH
9386: LD_INT 1
9388: PPUSH
9389: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9393: LD_INT 6
9395: PPUSH
9396: LD_VAR 0 3
9400: PPUSH
9401: LD_INT 1
9403: PPUSH
9404: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9408: LD_INT 7
9410: PPUSH
9411: LD_VAR 0 3
9415: PPUSH
9416: LD_INT 1
9418: PPUSH
9419: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9423: LD_INT 8
9425: PPUSH
9426: LD_VAR 0 3
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9438: LD_INT 10
9440: PPUSH
9441: LD_VAR 0 3
9445: PPUSH
9446: LD_INT 1
9448: PPUSH
9449: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9453: LD_INT 15
9455: PPUSH
9456: LD_VAR 0 3
9460: PPUSH
9461: LD_INT 1
9463: PPUSH
9464: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9468: LD_INT 16
9470: PPUSH
9471: LD_VAR 0 3
9475: PPUSH
9476: LD_INT 1
9478: PPUSH
9479: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9483: LD_INT 17
9485: PPUSH
9486: LD_VAR 0 3
9490: PPUSH
9491: LD_INT 1
9493: PPUSH
9494: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9498: LD_INT 20
9500: PPUSH
9501: LD_VAR 0 3
9505: PPUSH
9506: LD_INT 1
9508: PPUSH
9509: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9513: LD_INT 26
9515: PPUSH
9516: LD_VAR 0 3
9520: PPUSH
9521: LD_INT 1
9523: PPUSH
9524: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9528: LD_INT 27
9530: PPUSH
9531: LD_VAR 0 3
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9543: LD_INT 29
9545: PPUSH
9546: LD_VAR 0 3
9550: PPUSH
9551: LD_INT 1
9553: PPUSH
9554: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9558: LD_INT 31
9560: PPUSH
9561: LD_VAR 0 3
9565: PPUSH
9566: LD_INT 1
9568: PPUSH
9569: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9573: LD_INT 32
9575: PPUSH
9576: LD_VAR 0 3
9580: PPUSH
9581: LD_INT 1
9583: PPUSH
9584: CALL_OW 324
// end ; 4 :
9588: GO 12675
9590: LD_INT 4
9592: DOUBLE
9593: EQUAL
9594: IFTRUE 9598
9596: GO 10546
9598: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9599: LD_INT 35
9601: PPUSH
9602: LD_VAR 0 3
9606: PPUSH
9607: LD_INT 1
9609: PPUSH
9610: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9614: LD_INT 45
9616: PPUSH
9617: LD_VAR 0 3
9621: PPUSH
9622: LD_INT 1
9624: PPUSH
9625: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9629: LD_INT 46
9631: PPUSH
9632: LD_VAR 0 3
9636: PPUSH
9637: LD_INT 1
9639: PPUSH
9640: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9644: LD_INT 47
9646: PPUSH
9647: LD_VAR 0 3
9651: PPUSH
9652: LD_INT 1
9654: PPUSH
9655: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9659: LD_INT 1
9661: PPUSH
9662: LD_VAR 0 3
9666: PPUSH
9667: LD_INT 1
9669: PPUSH
9670: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9674: LD_INT 2
9676: PPUSH
9677: LD_VAR 0 3
9681: PPUSH
9682: LD_INT 1
9684: PPUSH
9685: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9689: LD_INT 11
9691: PPUSH
9692: LD_VAR 0 3
9696: PPUSH
9697: LD_INT 1
9699: PPUSH
9700: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9704: LD_INT 20
9706: PPUSH
9707: LD_VAR 0 3
9711: PPUSH
9712: LD_INT 1
9714: PPUSH
9715: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9719: LD_INT 48
9721: PPUSH
9722: LD_VAR 0 3
9726: PPUSH
9727: LD_INT 1
9729: PPUSH
9730: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9734: LD_INT 49
9736: PPUSH
9737: LD_VAR 0 3
9741: PPUSH
9742: LD_INT 1
9744: PPUSH
9745: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9749: LD_INT 69
9751: PPUSH
9752: LD_VAR 0 3
9756: PPUSH
9757: LD_INT 1
9759: PPUSH
9760: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9764: LD_INT 39
9766: PPUSH
9767: LD_VAR 0 3
9771: PPUSH
9772: LD_INT 1
9774: PPUSH
9775: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9779: LD_INT 34
9781: PPUSH
9782: LD_VAR 0 3
9786: PPUSH
9787: LD_INT 1
9789: PPUSH
9790: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9794: LD_INT 42
9796: PPUSH
9797: LD_VAR 0 3
9801: PPUSH
9802: LD_INT 1
9804: PPUSH
9805: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9809: LD_INT 44
9811: PPUSH
9812: LD_VAR 0 3
9816: PPUSH
9817: LD_INT 1
9819: PPUSH
9820: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9824: LD_INT 41
9826: PPUSH
9827: LD_VAR 0 3
9831: PPUSH
9832: LD_INT 1
9834: PPUSH
9835: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9839: LD_INT 43
9841: PPUSH
9842: LD_VAR 0 3
9846: PPUSH
9847: LD_INT 1
9849: PPUSH
9850: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9854: LD_INT 70
9856: PPUSH
9857: LD_VAR 0 3
9861: PPUSH
9862: LD_INT 1
9864: PPUSH
9865: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9869: LD_INT 51
9871: PPUSH
9872: LD_VAR 0 3
9876: PPUSH
9877: LD_INT 1
9879: PPUSH
9880: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9884: LD_INT 52
9886: PPUSH
9887: LD_VAR 0 3
9891: PPUSH
9892: LD_INT 1
9894: PPUSH
9895: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9899: LD_INT 6
9901: PPUSH
9902: LD_VAR 0 3
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9914: LD_INT 15
9916: PPUSH
9917: LD_VAR 0 3
9921: PPUSH
9922: LD_INT 1
9924: PPUSH
9925: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9929: LD_INT 7
9931: PPUSH
9932: LD_VAR 0 3
9936: PPUSH
9937: LD_INT 1
9939: PPUSH
9940: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9944: LD_INT 12
9946: PPUSH
9947: LD_VAR 0 3
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9959: LD_INT 18
9961: PPUSH
9962: LD_VAR 0 3
9966: PPUSH
9967: LD_INT 1
9969: PPUSH
9970: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9974: LD_INT 60
9976: PPUSH
9977: LD_VAR 0 3
9981: PPUSH
9982: LD_INT 1
9984: PPUSH
9985: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9989: LD_INT 9
9991: PPUSH
9992: LD_VAR 0 3
9996: PPUSH
9997: LD_INT 1
9999: PPUSH
10000: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10004: LD_INT 30
10006: PPUSH
10007: LD_VAR 0 3
10011: PPUSH
10012: LD_INT 1
10014: PPUSH
10015: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10019: LD_INT 37
10021: PPUSH
10022: LD_VAR 0 3
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10034: LD_INT 5
10036: PPUSH
10037: LD_VAR 0 3
10041: PPUSH
10042: LD_INT 1
10044: PPUSH
10045: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10049: LD_INT 66
10051: PPUSH
10052: LD_VAR 0 3
10056: PPUSH
10057: LD_INT 1
10059: PPUSH
10060: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10064: LD_INT 21
10066: PPUSH
10067: LD_VAR 0 3
10071: PPUSH
10072: LD_INT 1
10074: PPUSH
10075: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10079: LD_INT 22
10081: PPUSH
10082: LD_VAR 0 3
10086: PPUSH
10087: LD_INT 1
10089: PPUSH
10090: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10094: LD_INT 54
10096: PPUSH
10097: LD_VAR 0 3
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10109: LD_INT 0
10111: PPUSH
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 1
10119: PPUSH
10120: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10124: LD_INT 1
10126: PPUSH
10127: LD_VAR 0 3
10131: PPUSH
10132: LD_INT 1
10134: PPUSH
10135: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10139: LD_INT 2
10141: PPUSH
10142: LD_VAR 0 3
10146: PPUSH
10147: LD_INT 1
10149: PPUSH
10150: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10154: LD_INT 3
10156: PPUSH
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 1
10164: PPUSH
10165: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10169: LD_INT 4
10171: PPUSH
10172: LD_VAR 0 3
10176: PPUSH
10177: LD_INT 1
10179: PPUSH
10180: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10184: LD_INT 5
10186: PPUSH
10187: LD_VAR 0 3
10191: PPUSH
10192: LD_INT 1
10194: PPUSH
10195: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10199: LD_INT 6
10201: PPUSH
10202: LD_VAR 0 3
10206: PPUSH
10207: LD_INT 1
10209: PPUSH
10210: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10214: LD_INT 7
10216: PPUSH
10217: LD_VAR 0 3
10221: PPUSH
10222: LD_INT 1
10224: PPUSH
10225: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10229: LD_INT 8
10231: PPUSH
10232: LD_VAR 0 3
10236: PPUSH
10237: LD_INT 1
10239: PPUSH
10240: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10244: LD_INT 10
10246: PPUSH
10247: LD_VAR 0 3
10251: PPUSH
10252: LD_INT 1
10254: PPUSH
10255: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10259: LD_INT 11
10261: PPUSH
10262: LD_VAR 0 3
10266: PPUSH
10267: LD_INT 1
10269: PPUSH
10270: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10274: LD_INT 12
10276: PPUSH
10277: LD_VAR 0 3
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10289: LD_INT 13
10291: PPUSH
10292: LD_VAR 0 3
10296: PPUSH
10297: LD_INT 1
10299: PPUSH
10300: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10304: LD_INT 14
10306: PPUSH
10307: LD_VAR 0 3
10311: PPUSH
10312: LD_INT 1
10314: PPUSH
10315: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10319: LD_INT 15
10321: PPUSH
10322: LD_VAR 0 3
10326: PPUSH
10327: LD_INT 1
10329: PPUSH
10330: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10334: LD_INT 16
10336: PPUSH
10337: LD_VAR 0 3
10341: PPUSH
10342: LD_INT 1
10344: PPUSH
10345: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10349: LD_INT 17
10351: PPUSH
10352: LD_VAR 0 3
10356: PPUSH
10357: LD_INT 1
10359: PPUSH
10360: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10364: LD_INT 19
10366: PPUSH
10367: LD_VAR 0 3
10371: PPUSH
10372: LD_INT 1
10374: PPUSH
10375: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10379: LD_INT 20
10381: PPUSH
10382: LD_VAR 0 3
10386: PPUSH
10387: LD_INT 1
10389: PPUSH
10390: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10394: LD_INT 21
10396: PPUSH
10397: LD_VAR 0 3
10401: PPUSH
10402: LD_INT 1
10404: PPUSH
10405: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10409: LD_INT 23
10411: PPUSH
10412: LD_VAR 0 3
10416: PPUSH
10417: LD_INT 1
10419: PPUSH
10420: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10424: LD_INT 26
10426: PPUSH
10427: LD_VAR 0 3
10431: PPUSH
10432: LD_INT 1
10434: PPUSH
10435: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10439: LD_INT 27
10441: PPUSH
10442: LD_VAR 0 3
10446: PPUSH
10447: LD_INT 1
10449: PPUSH
10450: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10454: LD_INT 28
10456: PPUSH
10457: LD_VAR 0 3
10461: PPUSH
10462: LD_INT 1
10464: PPUSH
10465: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10469: LD_INT 29
10471: PPUSH
10472: LD_VAR 0 3
10476: PPUSH
10477: LD_INT 1
10479: PPUSH
10480: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10484: LD_INT 30
10486: PPUSH
10487: LD_VAR 0 3
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10499: LD_INT 31
10501: PPUSH
10502: LD_VAR 0 3
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10514: LD_INT 32
10516: PPUSH
10517: LD_VAR 0 3
10521: PPUSH
10522: LD_INT 1
10524: PPUSH
10525: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10529: LD_INT 36
10531: PPUSH
10532: LD_VAR 0 3
10536: PPUSH
10537: LD_INT 1
10539: PPUSH
10540: CALL_OW 324
// end ; 5 :
10544: GO 12675
10546: LD_INT 5
10548: DOUBLE
10549: EQUAL
10550: IFTRUE 10554
10552: GO 11667
10554: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10555: LD_INT 35
10557: PPUSH
10558: LD_VAR 0 3
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10570: LD_INT 45
10572: PPUSH
10573: LD_VAR 0 3
10577: PPUSH
10578: LD_INT 1
10580: PPUSH
10581: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10585: LD_INT 46
10587: PPUSH
10588: LD_VAR 0 3
10592: PPUSH
10593: LD_INT 1
10595: PPUSH
10596: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10600: LD_INT 47
10602: PPUSH
10603: LD_VAR 0 3
10607: PPUSH
10608: LD_INT 1
10610: PPUSH
10611: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10615: LD_INT 1
10617: PPUSH
10618: LD_VAR 0 3
10622: PPUSH
10623: LD_INT 1
10625: PPUSH
10626: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10630: LD_INT 2
10632: PPUSH
10633: LD_VAR 0 3
10637: PPUSH
10638: LD_INT 1
10640: PPUSH
10641: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10645: LD_INT 11
10647: PPUSH
10648: LD_VAR 0 3
10652: PPUSH
10653: LD_INT 1
10655: PPUSH
10656: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10660: LD_INT 20
10662: PPUSH
10663: LD_VAR 0 3
10667: PPUSH
10668: LD_INT 1
10670: PPUSH
10671: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10675: LD_INT 48
10677: PPUSH
10678: LD_VAR 0 3
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10690: LD_INT 49
10692: PPUSH
10693: LD_VAR 0 3
10697: PPUSH
10698: LD_INT 1
10700: PPUSH
10701: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10705: LD_INT 69
10707: PPUSH
10708: LD_VAR 0 3
10712: PPUSH
10713: LD_INT 1
10715: PPUSH
10716: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10720: LD_INT 39
10722: PPUSH
10723: LD_VAR 0 3
10727: PPUSH
10728: LD_INT 1
10730: PPUSH
10731: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10735: LD_INT 34
10737: PPUSH
10738: LD_VAR 0 3
10742: PPUSH
10743: LD_INT 1
10745: PPUSH
10746: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10750: LD_INT 42
10752: PPUSH
10753: LD_VAR 0 3
10757: PPUSH
10758: LD_INT 1
10760: PPUSH
10761: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10765: LD_INT 44
10767: PPUSH
10768: LD_VAR 0 3
10772: PPUSH
10773: LD_INT 1
10775: PPUSH
10776: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10780: LD_INT 41
10782: PPUSH
10783: LD_VAR 0 3
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
10795: LD_INT 40
10797: PPUSH
10798: LD_VAR 0 3
10802: PPUSH
10803: LD_INT 1
10805: PPUSH
10806: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10810: LD_INT 43
10812: PPUSH
10813: LD_VAR 0 3
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10825: LD_INT 70
10827: PPUSH
10828: LD_VAR 0 3
10832: PPUSH
10833: LD_INT 1
10835: PPUSH
10836: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10840: LD_INT 51
10842: PPUSH
10843: LD_VAR 0 3
10847: PPUSH
10848: LD_INT 1
10850: PPUSH
10851: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10855: LD_INT 52
10857: PPUSH
10858: LD_VAR 0 3
10862: PPUSH
10863: LD_INT 1
10865: PPUSH
10866: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10870: LD_INT 6
10872: PPUSH
10873: LD_VAR 0 3
10877: PPUSH
10878: LD_INT 1
10880: PPUSH
10881: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10885: LD_INT 15
10887: PPUSH
10888: LD_VAR 0 3
10892: PPUSH
10893: LD_INT 1
10895: PPUSH
10896: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10900: LD_INT 7
10902: PPUSH
10903: LD_VAR 0 3
10907: PPUSH
10908: LD_INT 1
10910: PPUSH
10911: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10915: LD_INT 12
10917: PPUSH
10918: LD_VAR 0 3
10922: PPUSH
10923: LD_INT 1
10925: PPUSH
10926: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10930: LD_INT 17
10932: PPUSH
10933: LD_VAR 0 3
10937: PPUSH
10938: LD_INT 1
10940: PPUSH
10941: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10945: LD_INT 18
10947: PPUSH
10948: LD_VAR 0 3
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10960: LD_INT 60
10962: PPUSH
10963: LD_VAR 0 3
10967: PPUSH
10968: LD_INT 1
10970: PPUSH
10971: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10975: LD_INT 32
10977: PPUSH
10978: LD_VAR 0 3
10982: PPUSH
10983: LD_INT 1
10985: PPUSH
10986: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10990: LD_INT 9
10992: PPUSH
10993: LD_VAR 0 3
10997: PPUSH
10998: LD_INT 1
11000: PPUSH
11001: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11005: LD_INT 57
11007: PPUSH
11008: LD_VAR 0 3
11012: PPUSH
11013: LD_INT 1
11015: PPUSH
11016: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11020: LD_INT 30
11022: PPUSH
11023: LD_VAR 0 3
11027: PPUSH
11028: LD_INT 1
11030: PPUSH
11031: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11035: LD_INT 37
11037: PPUSH
11038: LD_VAR 0 3
11042: PPUSH
11043: LD_INT 1
11045: PPUSH
11046: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11050: LD_INT 63
11052: PPUSH
11053: LD_VAR 0 3
11057: PPUSH
11058: LD_INT 1
11060: PPUSH
11061: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11065: LD_INT 3
11067: PPUSH
11068: LD_VAR 0 3
11072: PPUSH
11073: LD_INT 1
11075: PPUSH
11076: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11080: LD_INT 4
11082: PPUSH
11083: LD_VAR 0 3
11087: PPUSH
11088: LD_INT 1
11090: PPUSH
11091: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11095: LD_INT 5
11097: PPUSH
11098: LD_VAR 0 3
11102: PPUSH
11103: LD_INT 1
11105: PPUSH
11106: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11110: LD_INT 66
11112: PPUSH
11113: LD_VAR 0 3
11117: PPUSH
11118: LD_INT 1
11120: PPUSH
11121: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11125: LD_INT 21
11127: PPUSH
11128: LD_VAR 0 3
11132: PPUSH
11133: LD_INT 1
11135: PPUSH
11136: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11140: LD_INT 22
11142: PPUSH
11143: LD_VAR 0 3
11147: PPUSH
11148: LD_INT 1
11150: PPUSH
11151: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11155: LD_INT 19
11157: PPUSH
11158: LD_VAR 0 3
11162: PPUSH
11163: LD_INT 1
11165: PPUSH
11166: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11170: LD_INT 54
11172: PPUSH
11173: LD_VAR 0 3
11177: PPUSH
11178: LD_INT 1
11180: PPUSH
11181: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11185: LD_INT 55
11187: PPUSH
11188: LD_VAR 0 3
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11200: LD_INT 0
11202: PPUSH
11203: LD_VAR 0 3
11207: PPUSH
11208: LD_INT 1
11210: PPUSH
11211: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11215: LD_INT 1
11217: PPUSH
11218: LD_VAR 0 3
11222: PPUSH
11223: LD_INT 1
11225: PPUSH
11226: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11230: LD_INT 2
11232: PPUSH
11233: LD_VAR 0 3
11237: PPUSH
11238: LD_INT 1
11240: PPUSH
11241: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11245: LD_INT 3
11247: PPUSH
11248: LD_VAR 0 3
11252: PPUSH
11253: LD_INT 1
11255: PPUSH
11256: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11260: LD_INT 4
11262: PPUSH
11263: LD_VAR 0 3
11267: PPUSH
11268: LD_INT 1
11270: PPUSH
11271: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11275: LD_INT 5
11277: PPUSH
11278: LD_VAR 0 3
11282: PPUSH
11283: LD_INT 1
11285: PPUSH
11286: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11290: LD_INT 6
11292: PPUSH
11293: LD_VAR 0 3
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11305: LD_INT 7
11307: PPUSH
11308: LD_VAR 0 3
11312: PPUSH
11313: LD_INT 1
11315: PPUSH
11316: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11320: LD_INT 8
11322: PPUSH
11323: LD_VAR 0 3
11327: PPUSH
11328: LD_INT 1
11330: PPUSH
11331: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11335: LD_INT 10
11337: PPUSH
11338: LD_VAR 0 3
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11350: LD_INT 11
11352: PPUSH
11353: LD_VAR 0 3
11357: PPUSH
11358: LD_INT 1
11360: PPUSH
11361: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11365: LD_INT 12
11367: PPUSH
11368: LD_VAR 0 3
11372: PPUSH
11373: LD_INT 1
11375: PPUSH
11376: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11380: LD_INT 13
11382: PPUSH
11383: LD_VAR 0 3
11387: PPUSH
11388: LD_INT 1
11390: PPUSH
11391: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11395: LD_INT 14
11397: PPUSH
11398: LD_VAR 0 3
11402: PPUSH
11403: LD_INT 1
11405: PPUSH
11406: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11410: LD_INT 15
11412: PPUSH
11413: LD_VAR 0 3
11417: PPUSH
11418: LD_INT 1
11420: PPUSH
11421: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11425: LD_INT 16
11427: PPUSH
11428: LD_VAR 0 3
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11440: LD_INT 17
11442: PPUSH
11443: LD_VAR 0 3
11447: PPUSH
11448: LD_INT 1
11450: PPUSH
11451: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11455: LD_INT 18
11457: PPUSH
11458: LD_VAR 0 3
11462: PPUSH
11463: LD_INT 1
11465: PPUSH
11466: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11470: LD_INT 19
11472: PPUSH
11473: LD_VAR 0 3
11477: PPUSH
11478: LD_INT 1
11480: PPUSH
11481: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11485: LD_INT 20
11487: PPUSH
11488: LD_VAR 0 3
11492: PPUSH
11493: LD_INT 1
11495: PPUSH
11496: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11500: LD_INT 21
11502: PPUSH
11503: LD_VAR 0 3
11507: PPUSH
11508: LD_INT 1
11510: PPUSH
11511: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11515: LD_INT 23
11517: PPUSH
11518: LD_VAR 0 3
11522: PPUSH
11523: LD_INT 1
11525: PPUSH
11526: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11530: LD_INT 26
11532: PPUSH
11533: LD_VAR 0 3
11537: PPUSH
11538: LD_INT 1
11540: PPUSH
11541: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11545: LD_INT 27
11547: PPUSH
11548: LD_VAR 0 3
11552: PPUSH
11553: LD_INT 1
11555: PPUSH
11556: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11560: LD_INT 28
11562: PPUSH
11563: LD_VAR 0 3
11567: PPUSH
11568: LD_INT 1
11570: PPUSH
11571: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11575: LD_INT 29
11577: PPUSH
11578: LD_VAR 0 3
11582: PPUSH
11583: LD_INT 1
11585: PPUSH
11586: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11590: LD_INT 30
11592: PPUSH
11593: LD_VAR 0 3
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11605: LD_INT 31
11607: PPUSH
11608: LD_VAR 0 3
11612: PPUSH
11613: LD_INT 1
11615: PPUSH
11616: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11620: LD_INT 32
11622: PPUSH
11623: LD_VAR 0 3
11627: PPUSH
11628: LD_INT 1
11630: PPUSH
11631: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11635: LD_INT 33
11637: PPUSH
11638: LD_VAR 0 3
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11650: LD_INT 36
11652: PPUSH
11653: LD_VAR 0 3
11657: PPUSH
11658: LD_INT 1
11660: PPUSH
11661: CALL_OW 324
// end ; 6 :
11665: GO 12675
11667: LD_INT 6
11669: DOUBLE
11670: EQUAL
11671: IFTRUE 11675
11673: GO 12600
11675: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11676: LD_INT 35
11678: PPUSH
11679: LD_VAR 0 3
11683: PPUSH
11684: LD_INT 1
11686: PPUSH
11687: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11691: LD_INT 45
11693: PPUSH
11694: LD_VAR 0 3
11698: PPUSH
11699: LD_INT 1
11701: PPUSH
11702: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11706: LD_INT 46
11708: PPUSH
11709: LD_VAR 0 3
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11721: LD_INT 47
11723: PPUSH
11724: LD_VAR 0 3
11728: PPUSH
11729: LD_INT 1
11731: PPUSH
11732: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11736: LD_INT 1
11738: PPUSH
11739: LD_VAR 0 3
11743: PPUSH
11744: LD_INT 1
11746: PPUSH
11747: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11751: LD_INT 2
11753: PPUSH
11754: LD_VAR 0 3
11758: PPUSH
11759: LD_INT 1
11761: PPUSH
11762: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11766: LD_INT 11
11768: PPUSH
11769: LD_VAR 0 3
11773: PPUSH
11774: LD_INT 1
11776: PPUSH
11777: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11781: LD_INT 20
11783: PPUSH
11784: LD_VAR 0 3
11788: PPUSH
11789: LD_INT 1
11791: PPUSH
11792: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11796: LD_INT 48
11798: PPUSH
11799: LD_VAR 0 3
11803: PPUSH
11804: LD_INT 1
11806: PPUSH
11807: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11811: LD_INT 49
11813: PPUSH
11814: LD_VAR 0 3
11818: PPUSH
11819: LD_INT 1
11821: PPUSH
11822: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
11826: LD_INT 50
11828: PPUSH
11829: LD_VAR 0 3
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11841: LD_INT 69
11843: PPUSH
11844: LD_VAR 0 3
11848: PPUSH
11849: LD_INT 1
11851: PPUSH
11852: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11856: LD_INT 39
11858: PPUSH
11859: LD_VAR 0 3
11863: PPUSH
11864: LD_INT 1
11866: PPUSH
11867: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11871: LD_INT 34
11873: PPUSH
11874: LD_VAR 0 3
11878: PPUSH
11879: LD_INT 1
11881: PPUSH
11882: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11886: LD_INT 42
11888: PPUSH
11889: LD_VAR 0 3
11893: PPUSH
11894: LD_INT 1
11896: PPUSH
11897: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11901: LD_INT 44
11903: PPUSH
11904: LD_VAR 0 3
11908: PPUSH
11909: LD_INT 1
11911: PPUSH
11912: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11916: LD_INT 41
11918: PPUSH
11919: LD_VAR 0 3
11923: PPUSH
11924: LD_INT 1
11926: PPUSH
11927: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11931: LD_INT 13
11933: PPUSH
11934: LD_VAR 0 3
11938: PPUSH
11939: LD_INT 1
11941: PPUSH
11942: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11946: LD_INT 40
11948: PPUSH
11949: LD_VAR 0 3
11953: PPUSH
11954: LD_INT 1
11956: PPUSH
11957: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11961: LD_INT 43
11963: PPUSH
11964: LD_VAR 0 3
11968: PPUSH
11969: LD_INT 1
11971: PPUSH
11972: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11976: LD_INT 70
11978: PPUSH
11979: LD_VAR 0 3
11983: PPUSH
11984: LD_INT 1
11986: PPUSH
11987: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11991: LD_INT 23
11993: PPUSH
11994: LD_VAR 0 3
11998: PPUSH
11999: LD_INT 1
12001: PPUSH
12002: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12006: LD_INT 51
12008: PPUSH
12009: LD_VAR 0 3
12013: PPUSH
12014: LD_INT 1
12016: PPUSH
12017: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12021: LD_INT 52
12023: PPUSH
12024: LD_VAR 0 3
12028: PPUSH
12029: LD_INT 1
12031: PPUSH
12032: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12036: LD_INT 6
12038: PPUSH
12039: LD_VAR 0 3
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12051: LD_INT 15
12053: PPUSH
12054: LD_VAR 0 3
12058: PPUSH
12059: LD_INT 1
12061: PPUSH
12062: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12066: LD_INT 7
12068: PPUSH
12069: LD_VAR 0 3
12073: PPUSH
12074: LD_INT 1
12076: PPUSH
12077: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12081: LD_INT 12
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: LD_INT 1
12091: PPUSH
12092: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12096: LD_INT 10
12098: PPUSH
12099: LD_VAR 0 3
12103: PPUSH
12104: LD_INT 1
12106: PPUSH
12107: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12111: LD_INT 17
12113: PPUSH
12114: LD_VAR 0 3
12118: PPUSH
12119: LD_INT 1
12121: PPUSH
12122: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12126: LD_INT 18
12128: PPUSH
12129: LD_VAR 0 3
12133: PPUSH
12134: LD_INT 1
12136: PPUSH
12137: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12141: LD_INT 60
12143: PPUSH
12144: LD_VAR 0 3
12148: PPUSH
12149: LD_INT 1
12151: PPUSH
12152: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12156: LD_INT 61
12158: PPUSH
12159: LD_VAR 0 3
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12171: LD_INT 32
12173: PPUSH
12174: LD_VAR 0 3
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12186: LD_INT 27
12188: PPUSH
12189: LD_VAR 0 3
12193: PPUSH
12194: LD_INT 1
12196: PPUSH
12197: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12201: LD_INT 36
12203: PPUSH
12204: LD_VAR 0 3
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12216: LD_INT 33
12218: PPUSH
12219: LD_VAR 0 3
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12231: LD_INT 9
12233: PPUSH
12234: LD_VAR 0 3
12238: PPUSH
12239: LD_INT 1
12241: PPUSH
12242: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12246: LD_INT 38
12248: PPUSH
12249: LD_VAR 0 3
12253: PPUSH
12254: LD_INT 1
12256: PPUSH
12257: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12261: LD_INT 57
12263: PPUSH
12264: LD_VAR 0 3
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12276: LD_INT 58
12278: PPUSH
12279: LD_VAR 0 3
12283: PPUSH
12284: LD_INT 1
12286: PPUSH
12287: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12291: LD_INT 28
12293: PPUSH
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 1
12301: PPUSH
12302: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12306: LD_INT 29
12308: PPUSH
12309: LD_VAR 0 3
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12321: LD_INT 30
12323: PPUSH
12324: LD_VAR 0 3
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12336: LD_INT 37
12338: PPUSH
12339: LD_VAR 0 3
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12351: LD_INT 63
12353: PPUSH
12354: LD_VAR 0 3
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12366: LD_INT 64
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12381: LD_INT 3
12383: PPUSH
12384: LD_VAR 0 3
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12396: LD_INT 4
12398: PPUSH
12399: LD_VAR 0 3
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12411: LD_INT 5
12413: PPUSH
12414: LD_VAR 0 3
12418: PPUSH
12419: LD_INT 1
12421: PPUSH
12422: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12426: LD_INT 8
12428: PPUSH
12429: LD_VAR 0 3
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12441: LD_INT 66
12443: PPUSH
12444: LD_VAR 0 3
12448: PPUSH
12449: LD_INT 1
12451: PPUSH
12452: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12456: LD_INT 67
12458: PPUSH
12459: LD_VAR 0 3
12463: PPUSH
12464: LD_INT 1
12466: PPUSH
12467: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12471: LD_INT 21
12473: PPUSH
12474: LD_VAR 0 3
12478: PPUSH
12479: LD_INT 1
12481: PPUSH
12482: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12486: LD_INT 22
12488: PPUSH
12489: LD_VAR 0 3
12493: PPUSH
12494: LD_INT 1
12496: PPUSH
12497: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12501: LD_INT 19
12503: PPUSH
12504: LD_VAR 0 3
12508: PPUSH
12509: LD_INT 1
12511: PPUSH
12512: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12516: LD_INT 26
12518: PPUSH
12519: LD_VAR 0 3
12523: PPUSH
12524: LD_INT 1
12526: PPUSH
12527: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12531: LD_INT 54
12533: PPUSH
12534: LD_VAR 0 3
12538: PPUSH
12539: LD_INT 1
12541: PPUSH
12542: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12546: LD_INT 55
12548: PPUSH
12549: LD_VAR 0 3
12553: PPUSH
12554: LD_INT 1
12556: PPUSH
12557: CALL_OW 322
// for i = 0 to 39 do
12561: LD_ADDR_VAR 0 4
12565: PUSH
12566: DOUBLE
12567: LD_INT 0
12569: DEC
12570: ST_TO_ADDR
12571: LD_INT 39
12573: PUSH
12574: FOR_TO
12575: IFFALSE 12596
// SetRestrict ( i , side , true ) ;
12577: LD_VAR 0 4
12581: PPUSH
12582: LD_VAR 0 3
12586: PPUSH
12587: LD_INT 1
12589: PPUSH
12590: CALL_OW 324
12594: GO 12574
12596: POP
12597: POP
// end ; else
12598: GO 12675
12600: POP
// begin for i = 1 to 73 do
12601: LD_ADDR_VAR 0 4
12605: PUSH
12606: DOUBLE
12607: LD_INT 1
12609: DEC
12610: ST_TO_ADDR
12611: LD_INT 73
12613: PUSH
12614: FOR_TO
12615: IFFALSE 12636
// SetTech ( i , side , state_enabled ) ;
12617: LD_VAR 0 4
12621: PPUSH
12622: LD_VAR 0 3
12626: PPUSH
12627: LD_INT 1
12629: PPUSH
12630: CALL_OW 322
12634: GO 12614
12636: POP
12637: POP
// for i = 0 to 39 do
12638: LD_ADDR_VAR 0 4
12642: PUSH
12643: DOUBLE
12644: LD_INT 0
12646: DEC
12647: ST_TO_ADDR
12648: LD_INT 39
12650: PUSH
12651: FOR_TO
12652: IFFALSE 12673
// SetRestrict ( i , side , true ) ;
12654: LD_VAR 0 4
12658: PPUSH
12659: LD_VAR 0 3
12663: PPUSH
12664: LD_INT 1
12666: PPUSH
12667: CALL_OW 324
12671: GO 12651
12673: POP
12674: POP
// end ; end ; end ;
12675: GO 8680
12677: POP
12678: POP
// end ; end_of_file
12679: LD_VAR 0 2
12683: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12684: LD_INT 0
12686: PPUSH
12687: PPUSH
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
12692: PPUSH
12693: PPUSH
12694: PPUSH
// for i := 1 to 8 do
12695: LD_ADDR_VAR 0 2
12699: PUSH
12700: DOUBLE
12701: LD_INT 1
12703: DEC
12704: ST_TO_ADDR
12705: LD_INT 8
12707: PUSH
12708: FOR_TO
12709: IFFALSE 13093
// begin if Side_Positions [ i ] then
12711: LD_EXP 33
12715: PUSH
12716: LD_VAR 0 2
12720: ARRAY
12721: IFFALSE 13091
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12723: LD_ADDR_VAR 0 7
12727: PUSH
12728: LD_INT 22
12730: PUSH
12731: LD_VAR 0 2
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 21
12742: PUSH
12743: LD_INT 1
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PPUSH
12754: CALL_OW 69
12758: PUSH
12759: LD_INT 0
12761: PLUS
12762: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12763: LD_ADDR_VAR 0 9
12767: PUSH
12768: LD_INT 22
12770: PUSH
12771: LD_VAR 0 2
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: LD_INT 2
12782: PUSH
12783: LD_INT 30
12785: PUSH
12786: LD_INT 0
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 30
12795: PUSH
12796: LD_INT 1
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PPUSH
12812: CALL_OW 69
12816: ST_TO_ADDR
// crates := 0 ;
12817: LD_ADDR_VAR 0 4
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// oil := 0 ;
12825: LD_ADDR_VAR 0 5
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// sib := 0 ;
12833: LD_ADDR_VAR 0 6
12837: PUSH
12838: LD_INT 0
12840: ST_TO_ADDR
// if bases then
12841: LD_VAR 0 9
12845: IFFALSE 12951
// begin for j in bases do
12847: LD_ADDR_VAR 0 3
12851: PUSH
12852: LD_VAR 0 9
12856: PUSH
12857: FOR_IN
12858: IFFALSE 12949
// begin base := GetBase ( j ) ;
12860: LD_ADDR_VAR 0 8
12864: PUSH
12865: LD_VAR 0 3
12869: PPUSH
12870: CALL_OW 274
12874: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
12875: LD_ADDR_VAR 0 4
12879: PUSH
12880: LD_VAR 0 4
12884: PUSH
12885: LD_VAR 0 8
12889: PPUSH
12890: LD_INT 1
12892: PPUSH
12893: CALL_OW 275
12897: PLUS
12898: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12899: LD_ADDR_VAR 0 5
12903: PUSH
12904: LD_VAR 0 5
12908: PUSH
12909: LD_VAR 0 8
12913: PPUSH
12914: LD_INT 2
12916: PPUSH
12917: CALL_OW 275
12921: PLUS
12922: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12923: LD_ADDR_VAR 0 6
12927: PUSH
12928: LD_VAR 0 6
12932: PUSH
12933: LD_VAR 0 8
12937: PPUSH
12938: LD_INT 3
12940: PPUSH
12941: CALL_OW 275
12945: PLUS
12946: ST_TO_ADDR
// end ;
12947: GO 12857
12949: POP
12950: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12951: LD_STRING setSpecText(
12953: PUSH
12954: LD_VAR 0 2
12958: STR
12959: PUSH
12960: LD_STRING ,
12962: STR
12963: PUSH
12964: LD_INT 2
12966: STR
12967: PUSH
12968: LD_STRING ,
12970: STR
12971: PUSH
12972: LD_VAR 0 4
12976: STR
12977: PUSH
12978: LD_STRING )
12980: STR
12981: PPUSH
12982: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12986: LD_STRING setSpecText(
12988: PUSH
12989: LD_VAR 0 2
12993: STR
12994: PUSH
12995: LD_STRING ,
12997: STR
12998: PUSH
12999: LD_INT 3
13001: STR
13002: PUSH
13003: LD_STRING ,
13005: STR
13006: PUSH
13007: LD_VAR 0 5
13011: STR
13012: PUSH
13013: LD_STRING )
13015: STR
13016: PPUSH
13017: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13021: LD_STRING setSpecText(
13023: PUSH
13024: LD_VAR 0 2
13028: STR
13029: PUSH
13030: LD_STRING ,
13032: STR
13033: PUSH
13034: LD_INT 4
13036: STR
13037: PUSH
13038: LD_STRING ,
13040: STR
13041: PUSH
13042: LD_VAR 0 6
13046: STR
13047: PUSH
13048: LD_STRING )
13050: STR
13051: PPUSH
13052: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13056: LD_STRING setSpecText(
13058: PUSH
13059: LD_VAR 0 2
13063: STR
13064: PUSH
13065: LD_STRING ,
13067: STR
13068: PUSH
13069: LD_INT 5
13071: STR
13072: PUSH
13073: LD_STRING ,
13075: STR
13076: PUSH
13077: LD_VAR 0 7
13081: STR
13082: PUSH
13083: LD_STRING )
13085: STR
13086: PPUSH
13087: CALL_OW 559
// end ; end ;
13091: GO 12708
13093: POP
13094: POP
// end ; end_of_file
13095: LD_VAR 0 1
13099: RET
// var respawn , inqueue ; export function init_respawning ; begin
13100: LD_INT 0
13102: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13103: LD_ADDR_LOC 18
13107: PUSH
13108: LD_INT 1
13110: PPUSH
13111: LD_INT 8
13113: PPUSH
13114: CALL_OW 12
13118: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13119: LD_ADDR_LOC 19
13123: PUSH
13124: LD_INT 0
13126: PUSH
13127: LD_INT 0
13129: PUSH
13130: LD_INT 0
13132: PUSH
13133: LD_INT 0
13135: PUSH
13136: LD_INT 0
13138: PUSH
13139: LD_INT 0
13141: PUSH
13142: LD_INT 0
13144: PUSH
13145: LD_INT 0
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: ST_TO_ADDR
// end ;
13158: LD_VAR 0 1
13162: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13163: GO 13165
13165: DISABLE
13166: LD_INT 0
13168: PPUSH
13169: PPUSH
13170: PPUSH
// begin if respawning_time_max = 0 then
13171: LD_EXP 27
13175: PUSH
13176: LD_INT 0
13178: EQUAL
13179: IFFALSE 13183
// exit ;
13181: GO 13591
// if respawn = 8 then
13183: LD_LOC 18
13187: PUSH
13188: LD_INT 8
13190: EQUAL
13191: IFFALSE 13203
// respawn := 1 else
13193: LD_ADDR_LOC 18
13197: PUSH
13198: LD_INT 1
13200: ST_TO_ADDR
13201: GO 13217
// respawn := respawn + 1 ;
13203: LD_ADDR_LOC 18
13207: PUSH
13208: LD_LOC 18
13212: PUSH
13213: LD_INT 1
13215: PLUS
13216: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13217: LD_EXP 33
13221: PUSH
13222: LD_LOC 18
13226: ARRAY
13227: PUSH
13228: LD_LOC 19
13232: PUSH
13233: LD_LOC 18
13237: ARRAY
13238: NOT
13239: AND
13240: IFFALSE 13590
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13242: LD_ADDR_VAR 0 1
13246: PUSH
13247: LD_INT 21
13249: PUSH
13250: LD_INT 1
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 22
13259: PUSH
13260: LD_LOC 18
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PUSH
13269: LD_INT 3
13271: PUSH
13272: LD_INT 23
13274: PUSH
13275: LD_INT 0
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: PPUSH
13288: CALL_OW 69
13292: ST_TO_ADDR
// if n < number_of_people then
13293: LD_VAR 0 1
13297: PUSH
13298: LD_EXP 18
13302: LESS
13303: IFFALSE 13587
// begin aktresp := respawn ;
13305: LD_ADDR_VAR 0 3
13309: PUSH
13310: LD_LOC 18
13314: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13315: LD_ADDR_LOC 19
13319: PUSH
13320: LD_LOC 19
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 1
13337: ST_TO_ADDR
// enable ;
13338: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13339: LD_EXP 26
13343: PPUSH
13344: LD_EXP 27
13348: PPUSH
13349: CALL_OW 12
13353: PPUSH
13354: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13358: LD_ADDR_LOC 19
13362: PUSH
13363: LD_LOC 19
13367: PPUSH
13368: LD_VAR 0 3
13372: PPUSH
13373: LD_INT 0
13375: PPUSH
13376: CALL_OW 1
13380: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13381: LD_ADDR_VAR 0 2
13385: PUSH
13386: LD_INT 21
13388: PUSH
13389: LD_INT 3
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 2
13398: PUSH
13399: LD_INT 30
13401: PUSH
13402: LD_INT 0
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 30
13411: PUSH
13412: LD_INT 1
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 50
13426: PUSH
13427: EMPTY
13428: LIST
13429: PUSH
13430: LD_INT 22
13432: PUSH
13433: LD_VAR 0 3
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: PPUSH
13448: CALL_OW 69
13452: ST_TO_ADDR
// if dep = 0 then
13453: LD_VAR 0 2
13457: PUSH
13458: LD_INT 0
13460: EQUAL
13461: IFFALSE 13465
// exit ;
13463: GO 13591
// hc_name :=  ;
13465: LD_ADDR_OWVAR 26
13469: PUSH
13470: LD_STRING 
13472: ST_TO_ADDR
// hc_importance := 0 ;
13473: LD_ADDR_OWVAR 32
13477: PUSH
13478: LD_INT 0
13480: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13481: LD_INT 0
13483: PPUSH
13484: LD_INT 0
13486: PPUSH
13487: LD_EXP 19
13491: PUSH
13492: LD_INT 2
13494: DIV
13495: PPUSH
13496: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13500: LD_ADDR_OWVAR 21
13504: PUSH
13505: LD_EXP 34
13509: PUSH
13510: LD_VAR 0 3
13514: ARRAY
13515: ST_TO_ADDR
// uc_side := aktresp ;
13516: LD_ADDR_OWVAR 20
13520: PUSH
13521: LD_VAR 0 3
13525: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13526: LD_ADDR_VAR 0 2
13530: PUSH
13531: LD_VAR 0 2
13535: PUSH
13536: LD_INT 1
13538: PPUSH
13539: LD_VAR 0 2
13543: PPUSH
13544: CALL_OW 12
13548: ARRAY
13549: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
13550: CALL_OW 44
13554: PPUSH
13555: LD_VAR 0 2
13559: PPUSH
13560: CALL_OW 250
13564: PPUSH
13565: LD_VAR 0 2
13569: PPUSH
13570: CALL_OW 251
13574: PPUSH
13575: LD_INT 7
13577: PPUSH
13578: LD_INT 1
13580: PPUSH
13581: CALL_OW 50
// end else
13585: GO 13588
// enable ;
13587: ENABLE
// end else
13588: GO 13591
// enable ;
13590: ENABLE
// end ;
13591: PPOPN 3
13593: END
