// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime , def_Sheik , def_Mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , Sheik , Mastodont ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 18
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 36
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 33
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 37
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 35
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 34
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 18
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 2 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 2
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 36
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 33
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 37
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 35
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 34
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 38
 372: PUSH
 373: LD_EXP 33
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 626
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_Sheik = GetMultiplayerSetting ( 21 ) ;
 577: LD_ADDR_EXP 15
 581: PUSH
 582: LD_INT 21
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 590: LD_ADDR_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 603: LD_ADDR_EXP 16
 607: PUSH
 608: LD_INT 23
 610: PPUSH
 611: CALL_OW 426
 615: ST_TO_ADDR
// def_win_rules = 0 ;
 616: LD_ADDR_EXP 32
 620: PUSH
 621: LD_INT 0
 623: ST_TO_ADDR
// end else
 624: GO 774
// begin Randomize ;
 626: CALL_OW 10
// def_base_level := 2 ;
 630: LD_ADDR_EXP 1
 634: PUSH
 635: LD_INT 2
 637: ST_TO_ADDR
// def_amount_of_people := 2 ;
 638: LD_ADDR_EXP 2
 642: PUSH
 643: LD_INT 2
 645: ST_TO_ADDR
// def_skill_level := 1 ;
 646: LD_ADDR_EXP 3
 650: PUSH
 651: LD_INT 1
 653: ST_TO_ADDR
// def_starting_resources := 2 ;
 654: LD_ADDR_EXP 4
 658: PUSH
 659: LD_INT 2
 661: ST_TO_ADDR
// def_shipments_density := 50 ;
 662: LD_ADDR_EXP 5
 666: PUSH
 667: LD_INT 50
 669: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 670: LD_ADDR_EXP 6
 674: PUSH
 675: LD_INT 1
 677: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 678: LD_ADDR_EXP 7
 682: PUSH
 683: LD_INT 2
 685: ST_TO_ADDR
// def_shared_vision := 1 ;
 686: LD_ADDR_EXP 8
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// def_morale_flags := 1 ;
 694: LD_ADDR_EXP 9
 698: PUSH
 699: LD_INT 1
 701: ST_TO_ADDR
// def_siberite_detection := 1 ;
 702: LD_ADDR_EXP 10
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// def_people_respawning := 2 ;
 710: LD_ADDR_EXP 11
 714: PUSH
 715: LD_INT 2
 717: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 718: LD_ADDR_EXP 12
 722: PUSH
 723: LD_INT 3
 725: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 726: LD_ADDR_EXP 13
 730: PUSH
 731: LD_INT 2
 733: ST_TO_ADDR
// def_builduptime := 1 ;
 734: LD_ADDR_EXP 14
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_Sheik = 2 ;
 742: LD_ADDR_EXP 15
 746: PUSH
 747: LD_INT 2
 749: ST_TO_ADDR
// tech_level = 4 ;
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: LD_INT 4
 757: ST_TO_ADDR
// def_mastodont := 0 ;
 758: LD_ADDR_EXP 16
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_win_rules = 0 ;
 766: LD_ADDR_EXP 32
 770: PUSH
 771: LD_INT 0
 773: ST_TO_ADDR
// end ; if isSGUI then
 774: LD_OWVAR 83
 778: IFFALSE 786
// setMpTechs ( ) else
 780: CALL 9851 0 0
 784: GO 799
// SetMpTechLevel ( tech_level + 1 ) ;
 786: LD_VAR 0 3
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: PPUSH
 795: CALL 9998 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 799: LD_ADDR_EXP 19
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 1
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_EXP 1
 822: PUSH
 823: LD_INT 1
 825: PLUS
 826: ARRAY
 827: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 828: LD_ADDR_EXP 20
 832: PUSH
 833: LD_INT 0
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 3
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_EXP 1
 851: PUSH
 852: LD_INT 1
 854: PLUS
 855: ARRAY
 856: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 857: LD_ADDR_EXP 21
 861: PUSH
 862: LD_INT 9
 864: PUSH
 865: LD_INT 12
 867: PUSH
 868: LD_INT 15
 870: PUSH
 871: LD_INT 24
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: PUSH
 880: LD_EXP 2
 884: PUSH
 885: LD_INT 1
 887: PLUS
 888: ARRAY
 889: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 890: LD_ADDR_EXP 22
 894: PUSH
 895: LD_INT 2
 897: PUSH
 898: LD_INT 3
 900: PUSH
 901: LD_INT 4
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_EXP 3
 917: PUSH
 918: LD_INT 1
 920: PLUS
 921: ARRAY
 922: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 923: LD_ADDR_EXP 24
 927: PUSH
 928: LD_INT 0
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 30
 944: PUSH
 945: LD_INT 0
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PUSH
 956: LD_INT 50
 958: PUSH
 959: LD_INT 20
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: PUSH
 970: LD_INT 80
 972: PUSH
 973: LD_INT 40
 975: PUSH
 976: LD_INT 20
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: PUSH
 990: LD_EXP 4
 994: PUSH
 995: LD_INT 1
 997: PLUS
 998: ARRAY
 999: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1000: LD_ADDR_EXP 23
1004: PUSH
1005: LD_INT 10
1007: PUSH
1008: EMPTY
1009: LIST
1010: PUSH
1011: LD_INT 7
1013: PUSH
1014: LD_INT 14
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 6
1023: PUSH
1024: LD_INT 12
1026: PUSH
1027: LD_INT 18
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 10
1040: PUSH
1041: LD_INT 15
1043: PUSH
1044: LD_INT 20
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_EXP 4
1063: PUSH
1064: LD_INT 1
1066: PLUS
1067: ARRAY
1068: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1069: LD_ADDR_EXP 25
1073: PUSH
1074: LD_INT 150
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_INT 1
1084: PLUS
1085: MINUS
1086: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1087: LD_ADDR_EXP 29
1091: PUSH
1092: LD_INT 0
1094: PUSH
1095: LD_INT 10500
1097: PUSH
1098: LD_INT 6300
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_EXP 11
1110: PUSH
1111: LD_INT 1
1113: PLUS
1114: ARRAY
1115: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1116: LD_ADDR_EXP 30
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 31500
1126: PUSH
1127: LD_INT 10500
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_EXP 11
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1145: LD_ADDR_EXP 27
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: LD_INT 3
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_EXP 12
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: ARRAY
1177: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1178: LD_ADDR_EXP 26
1182: PUSH
1183: LD_INT 1
1185: NEG
1186: PUSH
1187: LD_INT 350
1189: PUSH
1190: LD_INT 700
1192: PUSH
1193: LD_INT 1400
1195: PUSH
1196: LD_INT 0
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: PUSH
1206: LD_EXP 9
1210: PUSH
1211: LD_INT 1
1213: PLUS
1214: ARRAY
1215: ST_TO_ADDR
// battle_flags_id := [ ] ;
1216: LD_ADDR_EXP 46
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// Sheik := [ 0 , 1 , 2 ] [ def_Sheik + 1 ] ;
1223: LD_ADDR_EXP 47
1227: PUSH
1228: LD_INT 0
1230: PUSH
1231: LD_INT 1
1233: PUSH
1234: LD_INT 2
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: LD_EXP 15
1246: PUSH
1247: LD_INT 1
1249: PLUS
1250: ARRAY
1251: ST_TO_ADDR
// Mastodont := 8 ;
1252: LD_ADDR_EXP 48
1256: PUSH
1257: LD_INT 8
1259: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1260: LD_EXP 13
1264: PUSH
1265: LD_INT 0
1267: EQUAL
1268: IFFALSE 1280
// siberite_bomb_Delay = 0 else
1270: LD_ADDR_EXP 31
1274: PUSH
1275: LD_INT 0
1277: ST_TO_ADDR
1278: GO 1302
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1280: LD_ADDR_EXP 31
1284: PUSH
1285: LD_EXP 13
1289: PUSH
1290: LD_INT 1
1292: MINUS
1293: PUSH
1294: LD_INT 21000
1296: MUL
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ST_TO_ADDR
// end ;
1302: LD_VAR 0 1
1306: RET
// function init_map ; var i , j ; begin
1307: LD_INT 0
1309: PPUSH
1310: PPUSH
1311: PPUSH
// normal_oil_deposits_locations := [ [ 61 , 60 ] , [ 105 , 67 ] , [ 106 , 43 ] , [ 220 , 10 ] , [ 188 , 284 ] , [ 278 , 241 ] , [ 277 , 204 ] , [ 320 , 220 ] ] ;
1312: LD_ADDR_EXP 42
1316: PUSH
1317: LD_INT 61
1319: PUSH
1320: LD_INT 60
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 105
1329: PUSH
1330: LD_INT 67
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 106
1339: PUSH
1340: LD_INT 43
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 220
1349: PUSH
1350: LD_INT 10
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: LD_INT 188
1359: PUSH
1360: LD_INT 284
1362: PUSH
1363: EMPTY
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 278
1369: PUSH
1370: LD_INT 241
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 277
1379: PUSH
1380: LD_INT 204
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: LD_INT 320
1389: PUSH
1390: LD_INT 220
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 36 , 57 ] , [ 98 , 53 ] , [ 106 , 12 ] , [ 247 , 20 ] , [ 139 , 263 ] , [ 280 , 280 ] , [ 274 , 215 ] , [ 345 , 223 ] ] ;
1407: LD_ADDR_EXP 43
1411: PUSH
1412: LD_INT 36
1414: PUSH
1415: LD_INT 57
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 98
1424: PUSH
1425: LD_INT 53
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 106
1434: PUSH
1435: LD_INT 12
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 247
1444: PUSH
1445: LD_INT 20
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 139
1454: PUSH
1455: LD_INT 263
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 280
1464: PUSH
1465: LD_INT 280
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 274
1474: PUSH
1475: LD_INT 215
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 345
1484: PUSH
1485: LD_INT 223
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 52 , 91 ] , [ 129 , 74 ] , [ 93 , 16 ] , [ 244 , 38 ] , [ 146 , 250 ] , [ 300 , 276 ] , [ 253 , 200 ] , [ 330 , 190 ] ] ;
1502: LD_ADDR_EXP 44
1506: PUSH
1507: LD_INT 52
1509: PUSH
1510: LD_INT 91
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: LD_INT 129
1519: PUSH
1520: LD_INT 74
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PUSH
1527: LD_INT 93
1529: PUSH
1530: LD_INT 16
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PUSH
1537: LD_INT 244
1539: PUSH
1540: LD_INT 38
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 146
1549: PUSH
1550: LD_INT 250
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: LD_INT 300
1559: PUSH
1560: LD_INT 276
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 253
1569: PUSH
1570: LD_INT 200
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 330
1579: PUSH
1580: LD_INT 190
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 88 , 88 ] , [ 117 , 103 ] , [ 137 , 45 ] , [ 193 , 3 ] , [ 202 , 296 ] , [ 247 , 239 ] , [ 270 , 169 ] , [ 293 , 186 ] ] ;
1597: LD_ADDR_EXP 45
1601: PUSH
1602: LD_INT 88
1604: PUSH
1605: LD_INT 88
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 117
1614: PUSH
1615: LD_INT 103
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: LD_INT 137
1624: PUSH
1625: LD_INT 45
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: PUSH
1632: LD_INT 193
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 202
1644: PUSH
1645: LD_INT 296
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: LD_INT 247
1654: PUSH
1655: LD_INT 239
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 270
1664: PUSH
1665: LD_INT 169
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: LD_INT 293
1674: PUSH
1675: LD_INT 186
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: ST_TO_ADDR
// depot_def := [ [ 58 , 73 , 2 ] , [ 116 , 79 , 3 ] , [ 110 , 30 , 1 ] , [ 223 , 25 , 3 ] , [ 168 , 266 , 0 ] , [ 276 , 256 , 4 ] , [ 262 , 189 , 0 ] , [ 324 , 203 , 5 ] ] ;
1692: LD_ADDR_EXP 39
1696: PUSH
1697: LD_INT 58
1699: PUSH
1700: LD_INT 73
1702: PUSH
1703: LD_INT 2
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 116
1713: PUSH
1714: LD_INT 79
1716: PUSH
1717: LD_INT 3
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 110
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 1
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 223
1741: PUSH
1742: LD_INT 25
1744: PUSH
1745: LD_INT 3
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 168
1755: PUSH
1756: LD_INT 266
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 276
1769: PUSH
1770: LD_INT 256
1772: PUSH
1773: LD_INT 4
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 262
1783: PUSH
1784: LD_INT 189
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: LD_INT 324
1797: PUSH
1798: LD_INT 203
1800: PUSH
1801: LD_INT 5
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: ST_TO_ADDR
// for i in depot_def do
1819: LD_ADDR_VAR 0 2
1823: PUSH
1824: LD_EXP 39
1828: PUSH
1829: FOR_IN
1830: IFFALSE 1906
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1832: LD_ADDR_EXP 41
1836: PUSH
1837: LD_EXP 41
1841: PUSH
1842: LD_VAR 0 2
1846: PUSH
1847: LD_INT 1
1849: ARRAY
1850: PPUSH
1851: LD_VAR 0 2
1855: PUSH
1856: LD_INT 3
1858: ARRAY
1859: PPUSH
1860: LD_INT 4
1862: NEG
1863: PPUSH
1864: CALL_OW 272
1868: PUSH
1869: LD_VAR 0 2
1873: PUSH
1874: LD_INT 2
1876: ARRAY
1877: PPUSH
1878: LD_VAR 0 2
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PPUSH
1887: LD_INT 4
1889: NEG
1890: PPUSH
1891: CALL_OW 273
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: EMPTY
1901: LIST
1902: ADD
1903: ST_TO_ADDR
1904: GO 1829
1906: POP
1907: POP
// breastworks_def := [ [ [ 72 , 97 , 5 ] , [ 82 , 85 , 4 ] , [ 66 , 66 , 4 ] ] , [ [ 119 , 99 , 0 ] , [ 140 , 98 , 5 ] , [ 126 , 66 , 4 ] ] , [ [ 113 , 16 , 4 ] , [ 130 , 38 , 5 ] , [ 111 , 42 , 0 ] ] , [ [ 218 , 36 , 0 ] , [ 240 , 40 , 5 ] , [ 205 , 24 , 1 ] ] , [ [ 174 , 250 , 3 ] , [ 151 , 248 , 2 ] , [ 193 , 272 , 4 ] ] , [ [ 252 , 246 , 1 ] , [ 263 , 267 , 1 ] , [ 270 , 238 , 3 ] ] , [ [ 240 , 173 , 2 ] , [ 261 , 173 , 2 ] , [ 256 , 208 , 1 ] ] , [ [ 311 , 181 , 2 ] , [ 298 , 190 , 2 ] , [ 312 , 212 , 1 ] ] ] ;
1908: LD_ADDR_EXP 40
1912: PUSH
1913: LD_INT 72
1915: PUSH
1916: LD_INT 97
1918: PUSH
1919: LD_INT 5
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 82
1929: PUSH
1930: LD_INT 85
1932: PUSH
1933: LD_INT 4
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 66
1943: PUSH
1944: LD_INT 66
1946: PUSH
1947: LD_INT 4
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 119
1962: PUSH
1963: LD_INT 99
1965: PUSH
1966: LD_INT 0
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 140
1976: PUSH
1977: LD_INT 98
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 126
1990: PUSH
1991: LD_INT 66
1993: PUSH
1994: LD_INT 4
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 113
2009: PUSH
2010: LD_INT 16
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 130
2023: PUSH
2024: LD_INT 38
2026: PUSH
2027: LD_INT 5
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 111
2037: PUSH
2038: LD_INT 42
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 218
2056: PUSH
2057: LD_INT 36
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: LD_INT 240
2070: PUSH
2071: LD_INT 40
2073: PUSH
2074: LD_INT 5
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 205
2084: PUSH
2085: LD_INT 24
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 174
2103: PUSH
2104: LD_INT 250
2106: PUSH
2107: LD_INT 3
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 151
2117: PUSH
2118: LD_INT 248
2120: PUSH
2121: LD_INT 2
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 193
2131: PUSH
2132: LD_INT 272
2134: PUSH
2135: LD_INT 4
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 252
2150: PUSH
2151: LD_INT 246
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 263
2164: PUSH
2165: LD_INT 267
2167: PUSH
2168: LD_INT 1
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 270
2178: PUSH
2179: LD_INT 238
2181: PUSH
2182: LD_INT 3
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 240
2197: PUSH
2198: LD_INT 173
2200: PUSH
2201: LD_INT 2
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 261
2211: PUSH
2212: LD_INT 173
2214: PUSH
2215: LD_INT 2
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 256
2225: PUSH
2226: LD_INT 208
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 311
2244: PUSH
2245: LD_INT 181
2247: PUSH
2248: LD_INT 2
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 298
2258: PUSH
2259: LD_INT 190
2261: PUSH
2262: LD_INT 2
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 312
2272: PUSH
2273: LD_INT 212
2275: PUSH
2276: LD_INT 1
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: ST_TO_ADDR
// for i = 1 to Side_Positions do
2299: LD_ADDR_VAR 0 2
2303: PUSH
2304: DOUBLE
2305: LD_INT 1
2307: DEC
2308: ST_TO_ADDR
2309: LD_EXP 36
2313: PUSH
2314: FOR_TO
2315: IFFALSE 2438
// begin if not Side_Positions [ i ] then
2317: LD_EXP 36
2321: PUSH
2322: LD_VAR 0 2
2326: ARRAY
2327: NOT
2328: IFFALSE 2332
// continue ;
2330: GO 2314
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2332: LD_EXP 42
2336: PUSH
2337: LD_EXP 36
2341: PUSH
2342: LD_VAR 0 2
2346: ARRAY
2347: ARRAY
2348: PUSH
2349: LD_INT 1
2351: ARRAY
2352: PPUSH
2353: LD_EXP 42
2357: PUSH
2358: LD_EXP 36
2362: PUSH
2363: LD_VAR 0 2
2367: ARRAY
2368: ARRAY
2369: PUSH
2370: LD_INT 2
2372: ARRAY
2373: PPUSH
2374: LD_INT 2
2376: PPUSH
2377: CALL_OW 62
// if def_extra_oil_deposits then
2381: LD_EXP 6
2385: IFFALSE 2436
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2387: LD_EXP 43
2391: PUSH
2392: LD_EXP 36
2396: PUSH
2397: LD_VAR 0 2
2401: ARRAY
2402: ARRAY
2403: PUSH
2404: LD_INT 1
2406: ARRAY
2407: PPUSH
2408: LD_EXP 43
2412: PUSH
2413: LD_EXP 36
2417: PUSH
2418: LD_VAR 0 2
2422: ARRAY
2423: ARRAY
2424: PUSH
2425: LD_INT 2
2427: ARRAY
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: CALL_OW 62
// end ;
2436: GO 2314
2438: POP
2439: POP
// if def_extra_sib_deposits then
2440: LD_EXP 7
2444: IFFALSE 2591
// for i = 1 to Side_Positions do
2446: LD_ADDR_VAR 0 2
2450: PUSH
2451: DOUBLE
2452: LD_INT 1
2454: DEC
2455: ST_TO_ADDR
2456: LD_EXP 36
2460: PUSH
2461: FOR_TO
2462: IFFALSE 2589
// begin if not Side_Positions [ i ] then
2464: LD_EXP 36
2468: PUSH
2469: LD_VAR 0 2
2473: ARRAY
2474: NOT
2475: IFFALSE 2479
// continue ;
2477: GO 2461
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2479: LD_EXP 44
2483: PUSH
2484: LD_EXP 36
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: ARRAY
2495: PUSH
2496: LD_INT 1
2498: ARRAY
2499: PPUSH
2500: LD_EXP 44
2504: PUSH
2505: LD_EXP 36
2509: PUSH
2510: LD_VAR 0 2
2514: ARRAY
2515: ARRAY
2516: PUSH
2517: LD_INT 2
2519: ARRAY
2520: PPUSH
2521: LD_INT 3
2523: PPUSH
2524: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2528: LD_EXP 7
2532: PUSH
2533: LD_INT 2
2535: EQUAL
2536: IFFALSE 2587
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2538: LD_EXP 45
2542: PUSH
2543: LD_EXP 36
2547: PUSH
2548: LD_VAR 0 2
2552: ARRAY
2553: ARRAY
2554: PUSH
2555: LD_INT 1
2557: ARRAY
2558: PPUSH
2559: LD_EXP 45
2563: PUSH
2564: LD_EXP 36
2568: PUSH
2569: LD_VAR 0 2
2573: ARRAY
2574: ARRAY
2575: PUSH
2576: LD_INT 2
2578: ARRAY
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: CALL_OW 62
// end ;
2587: GO 2461
2589: POP
2590: POP
// end ;
2591: LD_VAR 0 1
2595: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2596: LD_INT 0
2598: PPUSH
2599: PPUSH
2600: PPUSH
// if not Team_Game then
2601: LD_EXP 38
2605: NOT
2606: IFFALSE 2704
// begin for i = 1 to 8 do
2608: LD_ADDR_VAR 0 2
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 8
2620: PUSH
2621: FOR_TO
2622: IFFALSE 2700
// for j = 1 to 8 do
2624: LD_ADDR_VAR 0 3
2628: PUSH
2629: DOUBLE
2630: LD_INT 1
2632: DEC
2633: ST_TO_ADDR
2634: LD_INT 8
2636: PUSH
2637: FOR_TO
2638: IFFALSE 2696
// if i <> j then
2640: LD_VAR 0 2
2644: PUSH
2645: LD_VAR 0 3
2649: NONEQUAL
2650: IFFALSE 2674
// SetAttitude ( i , j , att_neutral , true ) else
2652: LD_VAR 0 2
2656: PPUSH
2657: LD_VAR 0 3
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 80
2672: GO 2694
// SetAttitude ( i , j , att_friend , true ) ;
2674: LD_VAR 0 2
2678: PPUSH
2679: LD_VAR 0 3
2683: PPUSH
2684: LD_INT 1
2686: PPUSH
2687: LD_INT 1
2689: PPUSH
2690: CALL_OW 80
2694: GO 2637
2696: POP
2697: POP
2698: GO 2621
2700: POP
2701: POP
// end else
2702: GO 2879
// begin if def_shared_vision then
2704: LD_EXP 8
2708: IFFALSE 2773
// begin for i in Teams do
2710: LD_ADDR_VAR 0 2
2714: PUSH
2715: LD_EXP 34
2719: PUSH
2720: FOR_IN
2721: IFFALSE 2771
// for j = 2 to i do
2723: LD_ADDR_VAR 0 3
2727: PUSH
2728: DOUBLE
2729: LD_INT 2
2731: DEC
2732: ST_TO_ADDR
2733: LD_VAR 0 2
2737: PUSH
2738: FOR_TO
2739: IFFALSE 2767
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2741: LD_VAR 0 2
2745: PUSH
2746: LD_VAR 0 3
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 2
2756: PUSH
2757: LD_INT 1
2759: ARRAY
2760: PPUSH
2761: CALL_OW 343
2765: GO 2738
2767: POP
2768: POP
2769: GO 2720
2771: POP
2772: POP
// end ; for i = 1 to 8 do
2773: LD_ADDR_VAR 0 2
2777: PUSH
2778: DOUBLE
2779: LD_INT 1
2781: DEC
2782: ST_TO_ADDR
2783: LD_INT 8
2785: PUSH
2786: FOR_TO
2787: IFFALSE 2877
// for j = 1 to 8 do
2789: LD_ADDR_VAR 0 3
2793: PUSH
2794: DOUBLE
2795: LD_INT 1
2797: DEC
2798: ST_TO_ADDR
2799: LD_INT 8
2801: PUSH
2802: FOR_TO
2803: IFFALSE 2873
// if Side_Teams [ i ] = Side_Teams [ j ] then
2805: LD_EXP 33
2809: PUSH
2810: LD_VAR 0 2
2814: ARRAY
2815: PUSH
2816: LD_EXP 33
2820: PUSH
2821: LD_VAR 0 3
2825: ARRAY
2826: EQUAL
2827: IFFALSE 2851
// SetAttitude ( i , j , att_friend , true ) else
2829: LD_VAR 0 2
2833: PPUSH
2834: LD_VAR 0 3
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: LD_INT 1
2844: PPUSH
2845: CALL_OW 80
2849: GO 2871
// SetAttitude ( i , j , att_enemy , true ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_VAR 0 3
2860: PPUSH
2861: LD_INT 2
2863: PPUSH
2864: LD_INT 1
2866: PPUSH
2867: CALL_OW 80
2871: GO 2802
2873: POP
2874: POP
2875: GO 2786
2877: POP
2878: POP
// end ; end ;
2879: LD_VAR 0 1
2883: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2884: LD_INT 0
2886: PPUSH
2887: PPUSH
2888: PPUSH
2889: PPUSH
// result := [ ] ;
2890: LD_ADDR_VAR 0 7
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// for i := 1 to count do
2897: LD_ADDR_VAR 0 8
2901: PUSH
2902: DOUBLE
2903: LD_INT 1
2905: DEC
2906: ST_TO_ADDR
2907: LD_VAR 0 1
2911: PUSH
2912: FOR_TO
2913: IFFALSE 3461
// begin uc_direction := Rand ( 0 , 5 ) ;
2915: LD_ADDR_OWVAR 24
2919: PUSH
2920: LD_INT 0
2922: PPUSH
2923: LD_INT 5
2925: PPUSH
2926: CALL_OW 12
2930: ST_TO_ADDR
// if commander then
2931: LD_LOC 1
2935: IFFALSE 3090
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2937: LD_ADDR_OWVAR 26
2941: PUSH
2942: LD_OWVAR 19
2946: PUSH
2947: LD_OWVAR 20
2951: ARRAY
2952: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2953: LD_INT 1
2955: PPUSH
2956: LD_INT 2
2958: PPUSH
2959: CALL_OW 12
2963: PPUSH
2964: LD_VAR 0 2
2968: PPUSH
2969: LD_EXP 22
2973: PUSH
2974: LD_INT 2
2976: PLUS
2977: PPUSH
2978: CALL_OW 380
// hc_importance := 105 ;
2982: LD_ADDR_OWVAR 32
2986: PUSH
2987: LD_INT 105
2989: ST_TO_ADDR
// commander := false ;
2990: LD_ADDR_LOC 1
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// if Multiplayer then
2998: LD_OWVAR 4
3002: IFFALSE 3088
// begin if Sheik = 1 and uc_nation = 2 then
3004: LD_EXP 47
3008: PUSH
3009: LD_INT 1
3011: EQUAL
3012: PUSH
3013: LD_OWVAR 21
3017: PUSH
3018: LD_INT 2
3020: EQUAL
3021: AND
3022: IFFALSE 3050
// begin hc_gallery :=  ;
3024: LD_ADDR_OWVAR 33
3028: PUSH
3029: LD_STRING 
3031: ST_TO_ADDR
// hc_class := class_desert_warior ;
3032: LD_ADDR_OWVAR 28
3036: PUSH
3037: LD_INT 11
3039: ST_TO_ADDR
// hc_sex := sex_male ;
3040: LD_ADDR_OWVAR 27
3044: PUSH
3045: LD_INT 1
3047: ST_TO_ADDR
// end else
3048: GO 3088
// begin hc_gallery := MULTIAVATARS ;
3050: LD_ADDR_OWVAR 33
3054: PUSH
3055: LD_STRING MULTIAVATARS
3057: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3058: LD_ADDR_OWVAR 34
3062: PUSH
3063: LD_OWVAR 20
3067: PPUSH
3068: CALL_OW 525
3072: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3073: LD_ADDR_OWVAR 27
3077: PUSH
3078: LD_OWVAR 20
3082: PPUSH
3083: CALL_OW 526
3087: ST_TO_ADDR
// end ; end ; end else
3088: GO 3226
// begin hc_name :=  ;
3090: LD_ADDR_OWVAR 26
3094: PUSH
3095: LD_STRING 
3097: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3098: LD_INT 1
3100: PPUSH
3101: LD_INT 2
3103: PPUSH
3104: CALL_OW 12
3108: PPUSH
3109: LD_VAR 0 2
3113: PPUSH
3114: LD_EXP 22
3118: PPUSH
3119: CALL_OW 380
// hc_importance := 0 ;
3123: LD_ADDR_OWVAR 32
3127: PUSH
3128: LD_INT 0
3130: ST_TO_ADDR
// if cl = class_desert_warior and Sheik = 2 then
3131: LD_VAR 0 2
3135: PUSH
3136: LD_INT 11
3138: EQUAL
3139: PUSH
3140: LD_EXP 47
3144: PUSH
3145: LD_INT 2
3147: EQUAL
3148: AND
3149: IFFALSE 3204
// begin commander := true ;
3151: LD_ADDR_LOC 1
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3159: LD_INT 1
3161: PPUSH
3162: LD_INT 2
3164: PPUSH
3165: CALL_OW 12
3169: PPUSH
3170: LD_VAR 0 2
3174: PPUSH
3175: LD_EXP 22
3179: PUSH
3180: LD_INT 2
3182: PLUS
3183: PPUSH
3184: CALL_OW 380
// hc_importance := 105 ;
3188: LD_ADDR_OWVAR 32
3192: PUSH
3193: LD_INT 105
3195: ST_TO_ADDR
// commander := false ;
3196: LD_ADDR_LOC 1
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// end ; if Multiplayer then
3204: LD_OWVAR 4
3208: IFFALSE 3226
// begin hc_gallery :=  ;
3210: LD_ADDR_OWVAR 33
3214: PUSH
3215: LD_STRING 
3217: ST_TO_ADDR
// hc_face_number := 0 ;
3218: LD_ADDR_OWVAR 34
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3226: LD_ADDR_VAR 0 10
3230: PUSH
3231: CALL_OW 44
3235: ST_TO_ADDR
// if global_defined and not cl = class_desert_warior then
3236: LD_LOC 3
3240: PUSH
3241: LD_VAR 0 2
3245: PUSH
3246: LD_INT 11
3248: EQUAL
3249: NOT
3250: AND
3251: IFFALSE 3391
// begin if ( cl = class_soldier ) then
3253: LD_VAR 0 2
3257: PUSH
3258: LD_INT 1
3260: EQUAL
3261: IFFALSE 3281
// j := i + soldiers_created else
3263: LD_ADDR_VAR 0 9
3267: PUSH
3268: LD_VAR 0 8
3272: PUSH
3273: LD_LOC 4
3277: PLUS
3278: ST_TO_ADDR
3279: GO 3291
// j := i ;
3281: LD_ADDR_VAR 0 9
3285: PUSH
3286: LD_VAR 0 8
3290: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3291: LD_LOC 2
3295: PUSH
3296: LD_VAR 0 2
3300: ARRAY
3301: PUSH
3302: LD_VAR 0 9
3306: ARRAY
3307: PPUSH
3308: LD_VAR 0 10
3312: PPUSH
3313: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3317: LD_VAR 0 10
3321: PPUSH
3322: LD_INT 2
3324: PPUSH
3325: LD_LOC 2
3329: PUSH
3330: LD_VAR 0 2
3334: ARRAY
3335: PUSH
3336: LD_VAR 0 9
3340: ARRAY
3341: PPUSH
3342: LD_INT 2
3344: PPUSH
3345: CALL_OW 260
3349: PPUSH
3350: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3354: LD_VAR 0 10
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_LOC 2
3366: PUSH
3367: LD_VAR 0 2
3371: ARRAY
3372: PUSH
3373: LD_VAR 0 9
3377: ARRAY
3378: PPUSH
3379: LD_INT 1
3381: PPUSH
3382: CALL_OW 260
3386: PPUSH
3387: CALL_OW 239
// end ; if building then
3391: LD_VAR 0 6
3395: IFFALSE 3413
// PlaceHumanInUnit ( un , building ) else
3397: LD_VAR 0 10
3401: PPUSH
3402: LD_VAR 0 6
3406: PPUSH
3407: CALL_OW 52
3411: GO 3440
// PlaceUnitXYR ( un , x , y , r , false ) ;
3413: LD_VAR 0 10
3417: PPUSH
3418: LD_VAR 0 3
3422: PPUSH
3423: LD_VAR 0 4
3427: PPUSH
3428: LD_VAR 0 5
3432: PPUSH
3433: LD_INT 0
3435: PPUSH
3436: CALL_OW 50
// result := result ^ [ un ] ;
3440: LD_ADDR_VAR 0 7
3444: PUSH
3445: LD_VAR 0 7
3449: PUSH
3450: LD_VAR 0 10
3454: PUSH
3455: EMPTY
3456: LIST
3457: ADD
3458: ST_TO_ADDR
// end ;
3459: GO 2912
3461: POP
3462: POP
// if not global_defined then
3463: LD_LOC 3
3467: NOT
3468: IFFALSE 3546
// if ( global_units >= cl ) then
3470: LD_LOC 2
3474: PUSH
3475: LD_VAR 0 2
3479: GREATEREQUAL
3480: IFFALSE 3521
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3482: LD_ADDR_LOC 2
3486: PUSH
3487: LD_LOC 2
3491: PPUSH
3492: LD_VAR 0 2
3496: PPUSH
3497: LD_LOC 2
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PUSH
3508: LD_VAR 0 7
3512: ADD
3513: PPUSH
3514: CALL_OW 1
3518: ST_TO_ADDR
3519: GO 3546
// global_units := Replace ( global_units , cl , result ) ;
3521: LD_ADDR_LOC 2
3525: PUSH
3526: LD_LOC 2
3530: PPUSH
3531: LD_VAR 0 2
3535: PPUSH
3536: LD_VAR 0 7
3540: PPUSH
3541: CALL_OW 1
3545: ST_TO_ADDR
// if commander then
3546: LD_LOC 1
3550: IFFALSE 3597
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3552: LD_ADDR_EXP 49
3556: PUSH
3557: LD_EXP 49
3561: PPUSH
3562: LD_OWVAR 20
3566: PPUSH
3567: LD_EXP 49
3571: PUSH
3572: LD_OWVAR 20
3576: ARRAY
3577: PUSH
3578: LD_VAR 0 10
3582: ADD
3583: PPUSH
3584: CALL_OW 1
3588: ST_TO_ADDR
// commander := false ;
3589: LD_ADDR_LOC 1
3593: PUSH
3594: LD_INT 0
3596: ST_TO_ADDR
// end ; end ;
3597: LD_VAR 0 7
3601: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3602: LD_INT 0
3604: PPUSH
3605: PPUSH
// uc_side := 0 ;
3606: LD_ADDR_OWVAR 20
3610: PUSH
3611: LD_INT 0
3613: ST_TO_ADDR
// uc_nation := 0 ;
3614: LD_ADDR_OWVAR 21
3618: PUSH
3619: LD_INT 0
3621: ST_TO_ADDR
// vc_chassis := 31 ;
3622: LD_ADDR_OWVAR 37
3626: PUSH
3627: LD_INT 31
3629: ST_TO_ADDR
// vc_control := control_rider ;
3630: LD_ADDR_OWVAR 38
3634: PUSH
3635: LD_INT 4
3637: ST_TO_ADDR
// if def_mastodont = 1 then
3638: LD_EXP 16
3642: PUSH
3643: LD_INT 1
3645: EQUAL
3646: IFFALSE 3685
// for i = 1 to n do
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 1
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3683
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3666: CALL_OW 45
3670: PPUSH
3671: LD_INT 18
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 49
3681: GO 3663
3683: POP
3684: POP
// if def_mastodont = 2 then
3685: LD_EXP 16
3689: PUSH
3690: LD_INT 2
3692: EQUAL
3693: IFFALSE 3732
// for i = 1 to n do
3695: LD_ADDR_VAR 0 3
3699: PUSH
3700: DOUBLE
3701: LD_INT 1
3703: DEC
3704: ST_TO_ADDR
3705: LD_VAR 0 1
3709: PUSH
3710: FOR_TO
3711: IFFALSE 3730
// PlaceUnitArea ( CreateVehicle , MastodontSpawn2 , false ) ;
3713: CALL_OW 45
3717: PPUSH
3718: LD_INT 19
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: CALL_OW 49
3728: GO 3710
3730: POP
3731: POP
// if def_mastodont = 3 then
3732: LD_EXP 16
3736: PUSH
3737: LD_INT 3
3739: EQUAL
3740: IFFALSE 3779
// for i = 1 to n do
3742: LD_ADDR_VAR 0 3
3746: PUSH
3747: DOUBLE
3748: LD_INT 1
3750: DEC
3751: ST_TO_ADDR
3752: LD_VAR 0 1
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3777
// PlaceUnitArea ( CreateVehicle , MastodontSpawn3 , false ) ;
3760: CALL_OW 45
3764: PPUSH
3765: LD_INT 20
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 49
3775: GO 3757
3777: POP
3778: POP
// end ;
3779: LD_VAR 0 2
3783: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
// if side in [ 0 , 9 ] then
3795: LD_VAR 0 1
3799: PUSH
3800: LD_INT 0
3802: PUSH
3803: LD_INT 9
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: IN
3810: IFFALSE 3814
// exit ;
3812: GO 4910
// pos := Side_Positions [ side ] ;
3814: LD_ADDR_VAR 0 3
3818: PUSH
3819: LD_EXP 36
3823: PUSH
3824: LD_VAR 0 1
3828: ARRAY
3829: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3830: LD_ADDR_OWVAR 21
3834: PUSH
3835: LD_EXP 37
3839: PUSH
3840: LD_VAR 0 1
3844: ARRAY
3845: ST_TO_ADDR
// uc_side := side ;
3846: LD_ADDR_OWVAR 20
3850: PUSH
3851: LD_VAR 0 1
3855: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3856: LD_ADDR_VAR 0 4
3860: PUSH
3861: LD_EXP 39
3865: PUSH
3866: LD_VAR 0 3
3870: ARRAY
3871: PUSH
3872: LD_INT 1
3874: ARRAY
3875: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3876: LD_ADDR_VAR 0 5
3880: PUSH
3881: LD_EXP 39
3885: PUSH
3886: LD_VAR 0 3
3890: ARRAY
3891: PUSH
3892: LD_INT 2
3894: ARRAY
3895: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3896: LD_ADDR_VAR 0 6
3900: PUSH
3901: LD_EXP 39
3905: PUSH
3906: LD_VAR 0 3
3910: ARRAY
3911: PUSH
3912: LD_INT 3
3914: ARRAY
3915: ST_TO_ADDR
// if is_depot then
3916: LD_EXP 19
3920: IFFALSE 4053
// begin bc_type = b_depot ;
3922: LD_ADDR_OWVAR 42
3926: PUSH
3927: LD_INT 0
3929: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3930: LD_ADDR_VAR 0 10
3934: PUSH
3935: LD_VAR 0 4
3939: PPUSH
3940: LD_VAR 0 5
3944: PPUSH
3945: LD_VAR 0 6
3949: PPUSH
3950: CALL_OW 47
3954: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3955: LD_VAR 0 10
3959: PPUSH
3960: LD_STRING @
3962: PUSH
3963: LD_VAR 0 1
3967: STR
3968: PPUSH
3969: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3973: LD_VAR 0 10
3977: PPUSH
3978: CALL_OW 274
3982: PPUSH
3983: LD_INT 1
3985: PPUSH
3986: LD_EXP 24
3990: PUSH
3991: LD_INT 1
3993: ARRAY
3994: PPUSH
3995: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3999: LD_VAR 0 10
4003: PPUSH
4004: CALL_OW 274
4008: PPUSH
4009: LD_INT 2
4011: PPUSH
4012: LD_EXP 24
4016: PUSH
4017: LD_INT 2
4019: ARRAY
4020: PPUSH
4021: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4025: LD_VAR 0 10
4029: PPUSH
4030: CALL_OW 274
4034: PPUSH
4035: LD_INT 3
4037: PPUSH
4038: LD_EXP 24
4042: PUSH
4043: LD_INT 3
4045: ARRAY
4046: PPUSH
4047: CALL_OW 277
// end else
4051: GO 4197
// begin for i := 1 to 3 do
4053: LD_ADDR_VAR 0 7
4057: PUSH
4058: DOUBLE
4059: LD_INT 1
4061: DEC
4062: ST_TO_ADDR
4063: LD_INT 3
4065: PUSH
4066: FOR_TO
4067: IFFALSE 4195
// begin r := starting_resources [ i ] ;
4069: LD_ADDR_VAR 0 8
4073: PUSH
4074: LD_EXP 24
4078: PUSH
4079: LD_VAR 0 7
4083: ARRAY
4084: ST_TO_ADDR
// while r >= 10 do
4085: LD_VAR 0 8
4089: PUSH
4090: LD_INT 10
4092: GREATEREQUAL
4093: IFFALSE 4193
// if r > 50 then
4095: LD_VAR 0 8
4099: PUSH
4100: LD_INT 50
4102: GREATER
4103: IFFALSE 4149
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4105: LD_VAR 0 7
4109: PPUSH
4110: LD_INT 5
4112: PPUSH
4113: LD_VAR 0 4
4117: PPUSH
4118: LD_VAR 0 5
4122: PPUSH
4123: LD_INT 4
4125: PPUSH
4126: LD_INT 0
4128: PPUSH
4129: CALL_OW 60
// r := r - 50 ;
4133: LD_ADDR_VAR 0 8
4137: PUSH
4138: LD_VAR 0 8
4142: PUSH
4143: LD_INT 50
4145: MINUS
4146: ST_TO_ADDR
// end else
4147: GO 4191
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4149: LD_VAR 0 7
4153: PPUSH
4154: LD_VAR 0 8
4158: PUSH
4159: LD_INT 10
4161: DIV
4162: PPUSH
4163: LD_VAR 0 4
4167: PPUSH
4168: LD_VAR 0 5
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 60
// r := 0 ;
4183: LD_ADDR_VAR 0 8
4187: PUSH
4188: LD_INT 0
4190: ST_TO_ADDR
// end ;
4191: GO 4085
// end ;
4193: GO 4066
4195: POP
4196: POP
// end ; for r in starting_crates do
4197: LD_ADDR_VAR 0 8
4201: PUSH
4202: LD_EXP 23
4206: PUSH
4207: FOR_IN
4208: IFFALSE 4240
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 5
4215: PPUSH
4216: LD_VAR 0 4
4220: PPUSH
4221: LD_VAR 0 5
4225: PPUSH
4226: LD_VAR 0 8
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 60
4238: GO 4207
4240: POP
4241: POP
// if def_morale_flags then
4242: LD_EXP 9
4246: IFFALSE 4385
// begin x := start_def [ pos ] [ 1 ] ;
4248: LD_ADDR_VAR 0 4
4252: PUSH
4253: LD_EXP 41
4257: PUSH
4258: LD_VAR 0 3
4262: ARRAY
4263: PUSH
4264: LD_INT 1
4266: ARRAY
4267: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4268: LD_ADDR_VAR 0 5
4272: PUSH
4273: LD_EXP 41
4277: PUSH
4278: LD_VAR 0 3
4282: ARRAY
4283: PUSH
4284: LD_INT 2
4286: ARRAY
4287: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4288: LD_VAR 0 4
4292: PPUSH
4293: LD_VAR 0 5
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: LD_INT 2
4303: PPUSH
4304: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4308: LD_ADDR_EXP 46
4312: PUSH
4313: LD_EXP 46
4317: PUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: LD_VAR 0 4
4327: PPUSH
4328: LD_VAR 0 5
4332: PPUSH
4333: LD_INT 1
4335: PUSH
4336: LD_INT 100
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: LD_INT 50
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: LD_INT 20
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 20
4365: PUSH
4366: LD_INT 100
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 418
4383: ADD
4384: ST_TO_ADDR
// end ; commander := true ;
4385: LD_ADDR_LOC 1
4389: PUSH
4390: LD_INT 1
4392: ST_TO_ADDR
// soldiers_created := 0 ;
4393: LD_ADDR_LOC 4
4397: PUSH
4398: LD_INT 0
4400: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4401: LD_ADDR_VAR 0 7
4405: PUSH
4406: DOUBLE
4407: LD_INT 1
4409: DEC
4410: ST_TO_ADDR
4411: LD_EXP 20
4415: PUSH
4416: FOR_TO
4417: IFFALSE 4570
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4419: LD_ADDR_VAR 0 4
4423: PUSH
4424: LD_EXP 40
4428: PUSH
4429: LD_VAR 0 3
4433: ARRAY
4434: PUSH
4435: LD_VAR 0 7
4439: ARRAY
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4445: LD_ADDR_VAR 0 5
4449: PUSH
4450: LD_EXP 40
4454: PUSH
4455: LD_VAR 0 3
4459: ARRAY
4460: PUSH
4461: LD_VAR 0 7
4465: ARRAY
4466: PUSH
4467: LD_INT 2
4469: ARRAY
4470: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4471: LD_ADDR_VAR 0 6
4475: PUSH
4476: LD_EXP 40
4480: PUSH
4481: LD_VAR 0 3
4485: ARRAY
4486: PUSH
4487: LD_VAR 0 7
4491: ARRAY
4492: PUSH
4493: LD_INT 3
4495: ARRAY
4496: ST_TO_ADDR
// bc_type := b_breastwork ;
4497: LD_ADDR_OWVAR 42
4501: PUSH
4502: LD_INT 31
4504: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4505: LD_ADDR_VAR 0 9
4509: PUSH
4510: LD_VAR 0 4
4514: PPUSH
4515: LD_VAR 0 5
4519: PPUSH
4520: LD_VAR 0 6
4524: PPUSH
4525: CALL_OW 47
4529: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4530: LD_INT 1
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: LD_INT 0
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: LD_INT 0
4544: PPUSH
4545: LD_VAR 0 9
4549: PPUSH
4550: CALL 2884 0 6
// soldiers_created := soldiers_created + 1 ;
4554: LD_ADDR_LOC 4
4558: PUSH
4559: LD_LOC 4
4563: PUSH
4564: LD_INT 1
4566: PLUS
4567: ST_TO_ADDR
// end ;
4568: GO 4416
4570: POP
4571: POP
// x := start_def [ pos ] [ 1 ] ;
4572: LD_ADDR_VAR 0 4
4576: PUSH
4577: LD_EXP 41
4581: PUSH
4582: LD_VAR 0 3
4586: ARRAY
4587: PUSH
4588: LD_INT 1
4590: ARRAY
4591: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4592: LD_ADDR_VAR 0 5
4596: PUSH
4597: LD_EXP 41
4601: PUSH
4602: LD_VAR 0 3
4606: ARRAY
4607: PUSH
4608: LD_INT 2
4610: ARRAY
4611: ST_TO_ADDR
// if Sheik = 2 and uc_nation = nation_arabian then
4612: LD_EXP 47
4616: PUSH
4617: LD_INT 2
4619: EQUAL
4620: PUSH
4621: LD_OWVAR 21
4625: PUSH
4626: LD_INT 2
4628: EQUAL
4629: AND
4630: IFFALSE 4658
// prepare_people ( 1 , class_desert_warior , x , y , 5 , 0 ) ;
4632: LD_INT 1
4634: PPUSH
4635: LD_INT 11
4637: PPUSH
4638: LD_VAR 0 4
4642: PPUSH
4643: LD_VAR 0 5
4647: PPUSH
4648: LD_INT 5
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: CALL 2884 0 6
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4658: LD_LOC 8
4662: PUSH
4663: LD_EXP 20
4667: MINUS
4668: PPUSH
4669: LD_INT 1
4671: PPUSH
4672: LD_VAR 0 4
4676: PPUSH
4677: LD_VAR 0 5
4681: PPUSH
4682: LD_INT 5
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL 2884 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4692: LD_LOC 5
4696: PPUSH
4697: LD_INT 2
4699: PPUSH
4700: LD_VAR 0 4
4704: PPUSH
4705: LD_VAR 0 5
4709: PPUSH
4710: LD_INT 5
4712: PPUSH
4713: LD_INT 0
4715: PPUSH
4716: CALL 2884 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4720: LD_LOC 7
4724: PPUSH
4725: LD_INT 3
4727: PPUSH
4728: LD_VAR 0 4
4732: PPUSH
4733: LD_VAR 0 5
4737: PPUSH
4738: LD_INT 5
4740: PPUSH
4741: LD_INT 0
4743: PPUSH
4744: CALL 2884 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4748: LD_LOC 6
4752: PPUSH
4753: LD_INT 4
4755: PPUSH
4756: LD_VAR 0 4
4760: PPUSH
4761: LD_VAR 0 5
4765: PPUSH
4766: LD_INT 5
4768: PPUSH
4769: LD_INT 0
4771: PPUSH
4772: CALL 2884 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4776: LD_EXP 10
4780: PUSH
4781: LD_INT 20
4783: PPUSH
4784: LD_VAR 0 1
4788: PPUSH
4789: CALL_OW 321
4793: PUSH
4794: LD_INT 1
4796: EQUAL
4797: AND
4798: IFFALSE 4815
// SetTech ( tech_SibDet , side , state_researched ) ;
4800: LD_INT 20
4802: PPUSH
4803: LD_VAR 0 1
4807: PPUSH
4808: LD_INT 2
4810: PPUSH
4811: CALL_OW 322
// if def_siberite_bomb = 1 then
4815: LD_EXP 13
4819: PUSH
4820: LD_INT 1
4822: EQUAL
4823: IFFALSE 4857
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4825: LD_INT 25
4827: PPUSH
4828: LD_VAR 0 1
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4840: LD_INT 73
4842: PPUSH
4843: LD_VAR 0 1
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: CALL_OW 322
// end else
4855: GO 4887
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4857: LD_INT 25
4859: PPUSH
4860: LD_VAR 0 1
4864: PPUSH
4865: LD_INT 0
4867: PPUSH
4868: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4872: LD_INT 73
4874: PPUSH
4875: LD_VAR 0 1
4879: PPUSH
4880: LD_INT 0
4882: PPUSH
4883: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4887: LD_INT 24
4889: PPUSH
4890: LD_VAR 0 1
4894: PPUSH
4895: LD_INT 0
4897: PPUSH
4898: CALL_OW 322
// global_defined := true ;
4902: LD_ADDR_LOC 3
4906: PUSH
4907: LD_INT 1
4909: ST_TO_ADDR
// end ;
4910: LD_VAR 0 2
4914: RET
// function prepare_sides ; var i ; begin
4915: LD_INT 0
4917: PPUSH
4918: PPUSH
// global_units := [ ] ;
4919: LD_ADDR_LOC 2
4923: PUSH
4924: EMPTY
4925: ST_TO_ADDR
// global_defined := false ;
4926: LD_ADDR_LOC 3
4930: PUSH
4931: LD_INT 0
4933: ST_TO_ADDR
// CountClassMembers ;
4934: CALL 4999 0 0
// for i := 1 to 8 do
4938: LD_ADDR_VAR 0 2
4942: PUSH
4943: DOUBLE
4944: LD_INT 1
4946: DEC
4947: ST_TO_ADDR
4948: LD_INT 8
4950: PUSH
4951: FOR_TO
4952: IFFALSE 4977
// if Side_Positions [ i ] then
4954: LD_EXP 36
4958: PUSH
4959: LD_VAR 0 2
4963: ARRAY
4964: IFFALSE 4975
// prepare_side ( i ) ;
4966: LD_VAR 0 2
4970: PPUSH
4971: CALL 3784 0 1
4975: GO 4951
4977: POP
4978: POP
// if def_mastodont then
4979: LD_EXP 16
4983: IFFALSE 4994
// prepare_mastodonts ( Mastodont ) ;
4985: LD_EXP 48
4989: PPUSH
4990: CALL 3602 0 1
// end ;
4994: LD_VAR 0 1
4998: RET
// function CountClassMembers ; var Mode ; begin
4999: LD_INT 0
5001: PPUSH
5002: PPUSH
// if No_Mechs then
5003: LD_EXP 17
5007: IFFALSE 5019
// Mode := 2 else
5009: LD_ADDR_VAR 0 2
5013: PUSH
5014: LD_INT 2
5016: ST_TO_ADDR
5017: GO 5027
// Mode := 1 ;
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// neng := number_of_people ;
5027: LD_ADDR_LOC 5
5031: PUSH
5032: LD_EXP 21
5036: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5037: LD_ADDR_LOC 8
5041: PUSH
5042: LD_LOC 5
5046: PUSH
5047: LD_INT 4
5049: PUSH
5050: LD_INT 3
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_VAR 0 2
5061: ARRAY
5062: DIV
5063: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5064: LD_LOC 8
5068: PUSH
5069: LD_EXP 20
5073: LESS
5074: IFFALSE 5086
// nsol := number_of_breastworks ;
5076: LD_ADDR_LOC 8
5080: PUSH
5081: LD_EXP 20
5085: ST_TO_ADDR
// neng := neng - nsol ;
5086: LD_ADDR_LOC 5
5090: PUSH
5091: LD_LOC 5
5095: PUSH
5096: LD_LOC 8
5100: MINUS
5101: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5102: LD_ADDR_LOC 6
5106: PUSH
5107: LD_LOC 5
5111: PUSH
5112: LD_INT 3
5114: PUSH
5115: LD_INT 2
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PUSH
5122: LD_VAR 0 2
5126: ARRAY
5127: DIV
5128: ST_TO_ADDR
// if ( nsci < 1 ) then
5129: LD_LOC 6
5133: PUSH
5134: LD_INT 1
5136: LESS
5137: IFFALSE 5147
// nsci := 1 ;
5139: LD_ADDR_LOC 6
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// neng := neng - nsci ;
5147: LD_ADDR_LOC 5
5151: PUSH
5152: LD_LOC 5
5156: PUSH
5157: LD_LOC 6
5161: MINUS
5162: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5163: LD_ADDR_LOC 7
5167: PUSH
5168: LD_LOC 5
5172: PUSH
5173: LD_INT 2
5175: DIV
5176: PUSH
5177: LD_INT 0
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PUSH
5184: LD_VAR 0 2
5188: ARRAY
5189: ST_TO_ADDR
// neng := neng - nmech ;
5190: LD_ADDR_LOC 5
5194: PUSH
5195: LD_LOC 5
5199: PUSH
5200: LD_LOC 7
5204: MINUS
5205: ST_TO_ADDR
// if ( neng < 1 ) then
5206: LD_LOC 5
5210: PUSH
5211: LD_INT 1
5213: LESS
5214: IFFALSE 5224
// neng := 1 ;
5216: LD_ADDR_LOC 5
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// end ;
5224: LD_VAR 0 1
5228: RET
// starting begin disable ( 98 ) ;
5229: LD_INT 98
5231: DISABLE_MARKED
// disable ( 99 ) ;
5232: LD_INT 99
5234: DISABLE_MARKED
// disable ( 400 ) ;
5235: LD_INT 400
5237: DISABLE_MARKED
// disable ( 401 ) ;
5238: LD_INT 401
5240: DISABLE_MARKED
// mp_selectmsg := true ;
5241: LD_ADDR_OWVAR 13
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5249: CALL 68 0 0
// init_map ;
5253: CALL 1307 0 0
// init_respawning ;
5257: CALL 14575 0 0
// set_shared_visions_and_alliances ;
5261: CALL 2596 0 0
// ResetFog ;
5265: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5269: LD_OWVAR 2
5273: PPUSH
5274: CALL_OW 520
// AnimateTrees ( true ) ;
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 573
// prepare_sides ;
5285: CALL 4915 0 0
// Init_Win_Condition ;
5289: CALL 8556 0 0
// ShowTimer ;
5293: CALL 8117 0 0
// music_nat := Side_Nations [ your_side ] ;
5297: LD_ADDR_OWVAR 71
5301: PUSH
5302: LD_EXP 37
5306: PUSH
5307: LD_OWVAR 2
5311: ARRAY
5312: ST_TO_ADDR
// if IAmSpec then
5313: CALL_OW 531
5317: IFFALSE 5341
// begin fogoff ( true ) ;
5319: LD_INT 1
5321: PPUSH
5322: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
5326: LD_INT 130
5328: PPUSH
5329: LD_INT 100
5331: PPUSH
5332: CALL_OW 86
// enable ( 400 ) ;
5336: LD_INT 400
5338: ENABLE_MARKED
// end else
5339: GO 5387
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5341: LD_EXP 41
5345: PUSH
5346: LD_EXP 36
5350: PUSH
5351: LD_OWVAR 2
5355: ARRAY
5356: ARRAY
5357: PUSH
5358: LD_INT 1
5360: ARRAY
5361: PPUSH
5362: LD_EXP 41
5366: PUSH
5367: LD_EXP 36
5371: PUSH
5372: LD_OWVAR 2
5376: ARRAY
5377: ARRAY
5378: PUSH
5379: LD_INT 2
5381: ARRAY
5382: PPUSH
5383: CALL_OW 86
// end ; InitApeman ;
5387: CALL 6625 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
5391: LD_ADDR_EXP 59
5395: PUSH
5396: LD_INT 9
5398: PUSH
5399: LD_INT 10
5401: PUSH
5402: LD_INT 11
5404: PUSH
5405: LD_INT 12
5407: PUSH
5408: LD_INT 13
5410: PUSH
5411: LD_INT 14
5413: PUSH
5414: LD_INT 15
5416: PUSH
5417: LD_INT 16
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: ST_TO_ADDR
// BeginBuildUp ;
5430: CALL 15069 0 0
// end ;
5434: END
// every 0 0$1 do
5435: GO 5437
5437: DISABLE
// if ( def_siberite_bomb > 1 ) then
5438: LD_EXP 13
5442: PUSH
5443: LD_INT 1
5445: GREATER
5446: IFFALSE 5461
// begin wait ( siberite_bomb_Delay ) ;
5448: LD_EXP 31
5452: PPUSH
5453: CALL_OW 67
// EnableSibFiss ;
5457: CALL 5462 0 0
// end ;
5461: END
// function EnableSibFiss ; var i ; begin
5462: LD_INT 0
5464: PPUSH
5465: PPUSH
// for i := 1 to 8 do
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: DOUBLE
5472: LD_INT 1
5474: DEC
5475: ST_TO_ADDR
5476: LD_INT 8
5478: PUSH
5479: FOR_TO
5480: IFFALSE 5526
// if Side_Positions [ i ] then
5482: LD_EXP 36
5486: PUSH
5487: LD_VAR 0 2
5491: ARRAY
5492: IFFALSE 5524
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5494: LD_INT 25
5496: PPUSH
5497: LD_VAR 0 2
5501: PPUSH
5502: LD_INT 1
5504: PPUSH
5505: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5509: LD_INT 73
5511: PPUSH
5512: LD_VAR 0 2
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: CALL_OW 322
// end ;
5524: GO 5479
5526: POP
5527: POP
// end ; end_of_file
5528: LD_VAR 0 1
5532: RET
// every 0 0$25 + 0 0$1.0 do
5533: GO 5535
5535: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5536: LD_INT 22
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: CALL_OW 287
5546: PUSH
5547: LD_INT 200
5549: PUSH
5550: LD_EXP 25
5554: MINUS
5555: PUSH
5556: LD_INT 25
5558: DIVREAL
5559: PUSH
5560: LD_INT 5
5562: MUL
5563: LESS
5564: IFFALSE 5587
// CreateCratesArea ( Rand ( 3 , 4 ) , Between1 , true ) ;
5566: LD_INT 3
5568: PPUSH
5569: LD_INT 4
5571: PPUSH
5572: CALL_OW 12
5576: PPUSH
5577: LD_INT 22
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5587: LD_INT 23
5589: PPUSH
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 287
5597: PUSH
5598: LD_INT 200
5600: PUSH
5601: LD_EXP 25
5605: MINUS
5606: PUSH
5607: LD_INT 25
5609: DIVREAL
5610: PUSH
5611: LD_INT 5
5613: MUL
5614: LESS
5615: IFFALSE 5638
// CreateCratesArea ( Rand ( 3 , 4 ) , Between2 , true ) ;
5617: LD_INT 3
5619: PPUSH
5620: LD_INT 4
5622: PPUSH
5623: CALL_OW 12
5627: PPUSH
5628: LD_INT 23
5630: PPUSH
5631: LD_INT 1
5633: PPUSH
5634: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5638: LD_INT 24
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 287
5648: PUSH
5649: LD_INT 200
5651: PUSH
5652: LD_EXP 25
5656: MINUS
5657: PUSH
5658: LD_INT 25
5660: DIVREAL
5661: PUSH
5662: LD_INT 5
5664: MUL
5665: LESS
5666: IFFALSE 5689
// CreateCratesArea ( Rand ( 3 , 4 ) , Between3 , true ) ;
5668: LD_INT 3
5670: PPUSH
5671: LD_INT 4
5673: PPUSH
5674: CALL_OW 12
5678: PPUSH
5679: LD_INT 24
5681: PPUSH
5682: LD_INT 1
5684: PPUSH
5685: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5689: LD_INT 25
5691: PPUSH
5692: LD_INT 1
5694: PPUSH
5695: CALL_OW 287
5699: PUSH
5700: LD_INT 200
5702: PUSH
5703: LD_EXP 25
5707: MINUS
5708: PUSH
5709: LD_INT 25
5711: DIVREAL
5712: PUSH
5713: LD_INT 5
5715: MUL
5716: LESS
5717: IFFALSE 5740
// CreateCratesArea ( Rand ( 3 , 4 ) , Between4 , true ) ;
5719: LD_INT 3
5721: PPUSH
5722: LD_INT 4
5724: PPUSH
5725: CALL_OW 12
5729: PPUSH
5730: LD_INT 25
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: CALL_OW 55
// if GetResourceArea ( Ring1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5740: LD_INT 26
5742: PPUSH
5743: LD_INT 1
5745: PPUSH
5746: CALL_OW 287
5750: PUSH
5751: LD_INT 200
5753: PUSH
5754: LD_EXP 25
5758: MINUS
5759: PUSH
5760: LD_INT 50
5762: DIVREAL
5763: PUSH
5764: LD_INT 5
5766: MUL
5767: LESS
5768: IFFALSE 5791
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring1 , true ) ;
5770: LD_INT 3
5772: PPUSH
5773: LD_INT 4
5775: PPUSH
5776: CALL_OW 12
5780: PPUSH
5781: LD_INT 26
5783: PPUSH
5784: LD_INT 1
5786: PPUSH
5787: CALL_OW 55
// if GetResourceArea ( Ring2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5791: LD_INT 27
5793: PPUSH
5794: LD_INT 1
5796: PPUSH
5797: CALL_OW 287
5801: PUSH
5802: LD_INT 200
5804: PUSH
5805: LD_EXP 25
5809: MINUS
5810: PUSH
5811: LD_INT 50
5813: DIVREAL
5814: PUSH
5815: LD_INT 5
5817: MUL
5818: LESS
5819: IFFALSE 5842
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring2 , true ) ;
5821: LD_INT 3
5823: PPUSH
5824: LD_INT 4
5826: PPUSH
5827: CALL_OW 12
5831: PPUSH
5832: LD_INT 27
5834: PPUSH
5835: LD_INT 1
5837: PPUSH
5838: CALL_OW 55
// if GetResourceArea ( Ring3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5842: LD_INT 28
5844: PPUSH
5845: LD_INT 1
5847: PPUSH
5848: CALL_OW 287
5852: PUSH
5853: LD_INT 200
5855: PUSH
5856: LD_EXP 25
5860: MINUS
5861: PUSH
5862: LD_INT 50
5864: DIVREAL
5865: PUSH
5866: LD_INT 5
5868: MUL
5869: LESS
5870: IFFALSE 5893
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring3 , true ) ;
5872: LD_INT 3
5874: PPUSH
5875: LD_INT 4
5877: PPUSH
5878: CALL_OW 12
5882: PPUSH
5883: LD_INT 28
5885: PPUSH
5886: LD_INT 1
5888: PPUSH
5889: CALL_OW 55
// if GetResourceArea ( Ring4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5893: LD_INT 29
5895: PPUSH
5896: LD_INT 1
5898: PPUSH
5899: CALL_OW 287
5903: PUSH
5904: LD_INT 200
5906: PUSH
5907: LD_EXP 25
5911: MINUS
5912: PUSH
5913: LD_INT 50
5915: DIVREAL
5916: PUSH
5917: LD_INT 5
5919: MUL
5920: LESS
5921: IFFALSE 5944
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring4 , true ) ;
5923: LD_INT 3
5925: PPUSH
5926: LD_INT 4
5928: PPUSH
5929: CALL_OW 12
5933: PPUSH
5934: LD_INT 29
5936: PPUSH
5937: LD_INT 1
5939: PPUSH
5940: CALL_OW 55
// if GetResourceArea ( MZCenter , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5944: LD_INT 21
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: CALL_OW 287
5954: PUSH
5955: LD_INT 200
5957: PUSH
5958: LD_EXP 25
5962: MINUS
5963: PUSH
5964: LD_INT 25
5966: DIVREAL
5967: PUSH
5968: LD_INT 5
5970: MUL
5971: LESS
5972: IFFALSE 5987
// CreateCratesArea ( 5 , MZCenter , true ) ;
5974: LD_INT 5
5976: PPUSH
5977: LD_INT 21
5979: PPUSH
5980: LD_INT 1
5982: PPUSH
5983: CALL_OW 55
// enable ;
5987: ENABLE
// end ;
5988: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5989: GO 5991
5991: DISABLE
5992: LD_INT 0
5994: PPUSH
5995: PPUSH
// begin case tick of 1 .. 1 1$0 :
5996: LD_OWVAR 1
6000: PUSH
6001: LD_INT 1
6003: DOUBLE
6004: GREATEREQUAL
6005: IFFALSE 6013
6007: LD_INT 2100
6009: DOUBLE
6010: LESSEQUAL
6011: IFTRUE 6015
6013: GO 6043
6015: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
6016: LD_EXP 25
6020: PUSH
6021: LD_INT 100
6023: DIVREAL
6024: PUSH
6025: LD_INT 525
6027: PPUSH
6028: LD_INT 1050
6030: PPUSH
6031: CALL_OW 12
6035: MUL
6036: PPUSH
6037: CALL_OW 67
6041: GO 6345
6043: LD_INT 2100
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: DOUBLE
6050: GREATEREQUAL
6051: IFFALSE 6059
6053: LD_INT 10500
6055: DOUBLE
6056: LESSEQUAL
6057: IFTRUE 6061
6059: GO 6089
6061: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
6062: LD_EXP 25
6066: PUSH
6067: LD_INT 100
6069: DIVREAL
6070: PUSH
6071: LD_INT 1050
6073: PPUSH
6074: LD_INT 1750
6076: PPUSH
6077: CALL_OW 12
6081: MUL
6082: PPUSH
6083: CALL_OW 67
6087: GO 6345
6089: LD_INT 10500
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: DOUBLE
6096: GREATEREQUAL
6097: IFFALSE 6105
6099: LD_INT 21000
6101: DOUBLE
6102: LESSEQUAL
6103: IFTRUE 6107
6105: GO 6135
6107: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
6108: LD_EXP 25
6112: PUSH
6113: LD_INT 100
6115: DIVREAL
6116: PUSH
6117: LD_INT 1750
6119: PPUSH
6120: LD_INT 2100
6122: PPUSH
6123: CALL_OW 12
6127: MUL
6128: PPUSH
6129: CALL_OW 67
6133: GO 6345
6135: LD_INT 21000
6137: PUSH
6138: LD_INT 1
6140: PLUS
6141: DOUBLE
6142: GREATEREQUAL
6143: IFFALSE 6151
6145: LD_INT 42000
6147: DOUBLE
6148: LESSEQUAL
6149: IFTRUE 6153
6151: GO 6181
6153: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6154: LD_EXP 25
6158: PUSH
6159: LD_INT 100
6161: DIVREAL
6162: PUSH
6163: LD_INT 2100
6165: PPUSH
6166: LD_INT 2275
6168: PPUSH
6169: CALL_OW 12
6173: MUL
6174: PPUSH
6175: CALL_OW 67
6179: GO 6345
6181: LD_INT 42000
6183: PUSH
6184: LD_INT 1
6186: PLUS
6187: DOUBLE
6188: GREATEREQUAL
6189: IFFALSE 6197
6191: LD_INT 63000
6193: DOUBLE
6194: LESSEQUAL
6195: IFTRUE 6199
6197: GO 6227
6199: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6200: LD_EXP 25
6204: PUSH
6205: LD_INT 100
6207: DIVREAL
6208: PUSH
6209: LD_INT 2275
6211: PPUSH
6212: LD_INT 2450
6214: PPUSH
6215: CALL_OW 12
6219: MUL
6220: PPUSH
6221: CALL_OW 67
6225: GO 6345
6227: LD_INT 63000
6229: PUSH
6230: LD_INT 1
6232: PLUS
6233: DOUBLE
6234: GREATEREQUAL
6235: IFFALSE 6243
6237: LD_INT 105000
6239: DOUBLE
6240: LESSEQUAL
6241: IFTRUE 6245
6243: GO 6273
6245: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6246: LD_EXP 25
6250: PUSH
6251: LD_INT 100
6253: DIVREAL
6254: PUSH
6255: LD_INT 2450
6257: PPUSH
6258: LD_INT 2800
6260: PPUSH
6261: CALL_OW 12
6265: MUL
6266: PPUSH
6267: CALL_OW 67
6271: GO 6345
6273: LD_INT 105000
6275: PUSH
6276: LD_INT 1
6278: PLUS
6279: DOUBLE
6280: GREATEREQUAL
6281: IFFALSE 6289
6283: LD_INT 630000
6285: DOUBLE
6286: LESSEQUAL
6287: IFTRUE 6291
6289: GO 6319
6291: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
6292: LD_EXP 25
6296: PUSH
6297: LD_INT 100
6299: DIVREAL
6300: PUSH
6301: LD_INT 2800
6303: PPUSH
6304: LD_INT 3500
6306: PPUSH
6307: CALL_OW 12
6311: MUL
6312: PPUSH
6313: CALL_OW 67
6317: GO 6345
6319: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
6320: LD_EXP 25
6324: PUSH
6325: LD_INT 100
6327: DIVREAL
6328: PUSH
6329: LD_INT 3500
6331: PPUSH
6332: LD_INT 3850
6334: PPUSH
6335: CALL_OW 12
6339: MUL
6340: PPUSH
6341: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6345: LD_ADDR_VAR 0 2
6349: PUSH
6350: LD_INT 3
6352: PPUSH
6353: LD_INT 5
6355: PPUSH
6356: CALL_OW 12
6360: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6361: LD_ADDR_VAR 0 1
6365: PUSH
6366: LD_EXP 36
6370: PUSH
6371: LD_INT 0
6373: PUSH
6374: EMPTY
6375: LIST
6376: DIFF
6377: PUSH
6378: FOR_IN
6379: IFFALSE 6428
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
6381: LD_VAR 0 2
6385: PPUSH
6386: LD_EXP 41
6390: PUSH
6391: LD_VAR 0 1
6395: ARRAY
6396: PUSH
6397: LD_INT 1
6399: ARRAY
6400: PPUSH
6401: LD_EXP 41
6405: PUSH
6406: LD_VAR 0 1
6410: ARRAY
6411: PUSH
6412: LD_INT 2
6414: ARRAY
6415: PPUSH
6416: LD_INT 20
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 56
6426: GO 6378
6428: POP
6429: POP
// enable ;
6430: ENABLE
// end ; end_of_file
6431: PPOPN 2
6433: END
// every 20 20$00 trigger apemanNumber do
6434: LD_EXP 50
6438: IFFALSE 6471
6440: GO 6442
6442: DISABLE
// begin enable ;
6443: ENABLE
// if apeLevel >= 8 then
6444: LD_EXP 55
6448: PUSH
6449: LD_INT 8
6451: GREATEREQUAL
6452: IFFALSE 6457
// disable else
6454: DISABLE
6455: GO 6471
// apeLevel := apeLevel + 1 ;
6457: LD_ADDR_EXP 55
6461: PUSH
6462: LD_EXP 55
6466: PUSH
6467: LD_INT 1
6469: PLUS
6470: ST_TO_ADDR
// end ;
6471: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6472: LD_EXP 50
6476: PUSH
6477: LD_EXP 51
6481: LESS
6482: IFFALSE 6622
6484: GO 6486
6486: DISABLE
6487: LD_INT 0
6489: PPUSH
6490: PPUSH
6491: PPUSH
6492: PPUSH
// begin enable ;
6493: ENABLE
// for i := 1 to apemanPos do
6494: LD_ADDR_VAR 0 1
6498: PUSH
6499: DOUBLE
6500: LD_INT 1
6502: DEC
6503: ST_TO_ADDR
6504: LD_EXP 53
6508: PUSH
6509: FOR_TO
6510: IFFALSE 6620
// begin if apemanPlayerCount [ i ] then
6512: LD_EXP 54
6516: PUSH
6517: LD_VAR 0 1
6521: ARRAY
6522: IFFALSE 6618
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6524: LD_EXP 54
6528: PUSH
6529: LD_VAR 0 1
6533: ARRAY
6534: PUSH
6535: LD_EXP 53
6539: PUSH
6540: LD_VAR 0 1
6544: ARRAY
6545: GREATER
6546: IFFALSE 6618
// begin ape := PrepareApeman ;
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: CALL 7141 0 0
6557: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6558: LD_VAR 0 2
6562: PPUSH
6563: LD_EXP 56
6567: PUSH
6568: LD_VAR 0 1
6572: ARRAY
6573: PPUSH
6574: LD_INT 0
6576: PPUSH
6577: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6581: LD_ADDR_EXP 53
6585: PUSH
6586: LD_EXP 53
6590: PPUSH
6591: LD_VAR 0 1
6595: PPUSH
6596: LD_EXP 53
6600: PUSH
6601: LD_VAR 0 1
6605: ARRAY
6606: PUSH
6607: LD_VAR 0 2
6611: UNION
6612: PPUSH
6613: CALL_OW 1
6617: ST_TO_ADDR
// end ; end ; end ;
6618: GO 6509
6620: POP
6621: POP
// end ;
6622: PPOPN 4
6624: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6625: LD_INT 0
6627: PPUSH
6628: PPUSH
6629: PPUSH
6630: PPUSH
6631: PPUSH
6632: PPUSH
6633: PPUSH
// playersAmount := 0 ;
6634: LD_ADDR_VAR 0 3
6638: PUSH
6639: LD_INT 0
6641: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6642: LD_ADDR_VAR 0 7
6646: PUSH
6647: LD_INT 1
6649: PUSH
6650: LD_INT 2
6652: PUSH
6653: LD_INT 3
6655: PUSH
6656: LD_INT 4
6658: PUSH
6659: LD_INT 5
6661: PUSH
6662: LD_INT 6
6664: PUSH
6665: LD_INT 7
6667: PUSH
6668: LD_INT 8
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6681: LD_ADDR_EXP 56
6685: PUSH
6686: LD_INT 0
6688: PUSH
6689: LD_INT 0
6691: PUSH
6692: LD_INT 0
6694: PUSH
6695: LD_INT 0
6697: PUSH
6698: LD_INT 0
6700: PUSH
6701: LD_INT 0
6703: PUSH
6704: LD_INT 0
6706: PUSH
6707: LD_INT 0
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: ST_TO_ADDR
// for j = 1 to Side_Positions do
6720: LD_ADDR_VAR 0 4
6724: PUSH
6725: DOUBLE
6726: LD_INT 1
6728: DEC
6729: ST_TO_ADDR
6730: LD_EXP 36
6734: PUSH
6735: FOR_TO
6736: IFFALSE 6803
// if Side_Positions [ j ] then
6738: LD_EXP 36
6742: PUSH
6743: LD_VAR 0 4
6747: ARRAY
6748: IFFALSE 6801
// begin playersAmount := playersAmount + 1 ;
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_VAR 0 3
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6764: LD_ADDR_EXP 56
6768: PUSH
6769: LD_EXP 56
6773: PPUSH
6774: LD_VAR 0 4
6778: PPUSH
6779: LD_VAR 0 7
6783: PUSH
6784: LD_EXP 36
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: ARRAY
6795: PPUSH
6796: CALL_OW 1
6800: ST_TO_ADDR
// end ;
6801: GO 6735
6803: POP
6804: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6805: LD_ADDR_EXP 52
6809: PUSH
6810: LD_INT 3
6812: PUSH
6813: LD_EXP 27
6817: MUL
6818: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6819: LD_ADDR_EXP 50
6823: PUSH
6824: LD_VAR 0 3
6828: PUSH
6829: LD_EXP 52
6833: MUL
6834: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6835: LD_ADDR_EXP 51
6839: PUSH
6840: LD_EXP 50
6844: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6845: LD_ADDR_EXP 53
6849: PUSH
6850: LD_INT 0
6852: PUSH
6853: LD_INT 0
6855: PUSH
6856: LD_INT 0
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: LD_INT 0
6864: PUSH
6865: LD_INT 0
6867: PUSH
6868: LD_INT 0
6870: PUSH
6871: LD_INT 0
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6884: LD_ADDR_EXP 54
6888: PUSH
6889: LD_INT 0
6891: PUSH
6892: LD_INT 0
6894: PUSH
6895: LD_INT 0
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: LD_INT 0
6903: PUSH
6904: LD_INT 0
6906: PUSH
6907: LD_INT 0
6909: PUSH
6910: LD_INT 0
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: ST_TO_ADDR
// apeLevel := 1 ;
6923: LD_ADDR_EXP 55
6927: PUSH
6928: LD_INT 1
6930: ST_TO_ADDR
// if not apemanNumber then
6931: LD_EXP 50
6935: NOT
6936: IFFALSE 6940
// exit ;
6938: GO 7136
// for i := 1 to apemanPerPlayer do
6940: LD_ADDR_VAR 0 2
6944: PUSH
6945: DOUBLE
6946: LD_INT 1
6948: DEC
6949: ST_TO_ADDR
6950: LD_EXP 52
6954: PUSH
6955: FOR_TO
6956: IFFALSE 7134
// begin for j := 1 to Side_Positions do
6958: LD_ADDR_VAR 0 4
6962: PUSH
6963: DOUBLE
6964: LD_INT 1
6966: DEC
6967: ST_TO_ADDR
6968: LD_EXP 36
6972: PUSH
6973: FOR_TO
6974: IFFALSE 7130
// if Side_Positions [ j ] then
6976: LD_EXP 36
6980: PUSH
6981: LD_VAR 0 4
6985: ARRAY
6986: IFFALSE 7128
// begin pos := Side_Positions [ j ] ;
6988: LD_ADDR_VAR 0 6
6992: PUSH
6993: LD_EXP 36
6997: PUSH
6998: LD_VAR 0 4
7002: ARRAY
7003: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7004: LD_ADDR_EXP 54
7008: PUSH
7009: LD_EXP 54
7013: PPUSH
7014: LD_VAR 0 4
7018: PPUSH
7019: LD_EXP 54
7023: PUSH
7024: LD_VAR 0 4
7028: ARRAY
7029: PUSH
7030: LD_INT 1
7032: PLUS
7033: PPUSH
7034: CALL_OW 1
7038: ST_TO_ADDR
// ape := PrepareApeman ;
7039: LD_ADDR_VAR 0 5
7043: PUSH
7044: CALL 7141 0 0
7048: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7049: LD_ADDR_EXP 53
7053: PUSH
7054: LD_EXP 53
7058: PPUSH
7059: LD_VAR 0 4
7063: PPUSH
7064: LD_EXP 53
7068: PUSH
7069: LD_VAR 0 4
7073: ARRAY
7074: PPUSH
7075: LD_EXP 53
7079: PUSH
7080: LD_VAR 0 4
7084: ARRAY
7085: PUSH
7086: LD_INT 1
7088: PLUS
7089: PPUSH
7090: LD_VAR 0 5
7094: PPUSH
7095: CALL_OW 1
7099: PPUSH
7100: CALL_OW 1
7104: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7105: LD_VAR 0 5
7109: PPUSH
7110: LD_EXP 56
7114: PUSH
7115: LD_VAR 0 4
7119: ARRAY
7120: PPUSH
7121: LD_INT 0
7123: PPUSH
7124: CALL_OW 49
// end ;
7128: GO 6973
7130: POP
7131: POP
// end ;
7132: GO 6955
7134: POP
7135: POP
// end ;
7136: LD_VAR 0 1
7140: RET
// export function PrepareApeman ; var bonus ; begin
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
// uc_side := 0 ;
7145: LD_ADDR_OWVAR 20
7149: PUSH
7150: LD_INT 0
7152: ST_TO_ADDR
// uc_nation := 0 ;
7153: LD_ADDR_OWVAR 21
7157: PUSH
7158: LD_INT 0
7160: ST_TO_ADDR
// InitHc ;
7161: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_INT 1
7172: NEG
7173: PUSH
7174: LD_INT 0
7176: PUSH
7177: LD_INT 1
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 25
7187: PUSH
7188: LD_INT 12
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PPUSH
7195: CALL_OW 69
7199: PUSH
7200: LD_INT 3
7202: MOD
7203: PUSH
7204: LD_INT 1
7206: PLUS
7207: ARRAY
7208: ST_TO_ADDR
// hc_class := class_apeman ;
7209: LD_ADDR_OWVAR 28
7213: PUSH
7214: LD_INT 12
7216: ST_TO_ADDR
// hc_gallery :=  ;
7217: LD_ADDR_OWVAR 33
7221: PUSH
7222: LD_STRING 
7224: ST_TO_ADDR
// hc_name :=  ;
7225: LD_ADDR_OWVAR 26
7229: PUSH
7230: LD_STRING 
7232: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7233: LD_ADDR_OWVAR 31
7237: PUSH
7238: LD_EXP 55
7242: PUSH
7243: LD_VAR 0 2
7247: PLUS
7248: PUSH
7249: LD_EXP 55
7253: PUSH
7254: LD_VAR 0 2
7258: PLUS
7259: PUSH
7260: LD_EXP 55
7264: PUSH
7265: LD_VAR 0 2
7269: PLUS
7270: PUSH
7271: LD_EXP 55
7275: PUSH
7276: LD_VAR 0 2
7280: PLUS
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7288: LD_ADDR_OWVAR 35
7292: PUSH
7293: LD_INT 10
7295: PUSH
7296: LD_VAR 0 2
7300: MUL
7301: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7302: LD_ADDR_OWVAR 29
7306: PUSH
7307: LD_INT 12
7309: PUSH
7310: LD_INT 10
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: ST_TO_ADDR
// result := CreateHuman ;
7317: LD_ADDR_VAR 0 1
7321: PUSH
7322: CALL_OW 44
7326: ST_TO_ADDR
// end ;
7327: LD_VAR 0 1
7331: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7332: LD_INT 0
7334: PPUSH
7335: PPUSH
7336: PPUSH
// if not ape then
7337: LD_VAR 0 1
7341: NOT
7342: IFFALSE 7346
// exit ;
7344: GO 7471
// side := GetSide ( ape ) ;
7346: LD_ADDR_VAR 0 3
7350: PUSH
7351: LD_VAR 0 1
7355: PPUSH
7356: CALL_OW 255
7360: ST_TO_ADDR
// if not side then
7361: LD_VAR 0 3
7365: NOT
7366: IFFALSE 7420
// begin for i = 1 to apemanPos do
7368: LD_ADDR_VAR 0 4
7372: PUSH
7373: DOUBLE
7374: LD_INT 1
7376: DEC
7377: ST_TO_ADDR
7378: LD_EXP 53
7382: PUSH
7383: FOR_TO
7384: IFFALSE 7418
// if ape in apemanPos [ i ] then
7386: LD_VAR 0 1
7390: PUSH
7391: LD_EXP 53
7395: PUSH
7396: LD_VAR 0 4
7400: ARRAY
7401: IN
7402: IFFALSE 7416
// begin side := i ;
7404: LD_ADDR_VAR 0 3
7408: PUSH
7409: LD_VAR 0 4
7413: ST_TO_ADDR
// break ;
7414: GO 7418
// end ;
7416: GO 7383
7418: POP
7419: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7420: LD_ADDR_EXP 53
7424: PUSH
7425: LD_EXP 53
7429: PPUSH
7430: LD_VAR 0 3
7434: PPUSH
7435: LD_EXP 53
7439: PUSH
7440: LD_VAR 0 3
7444: ARRAY
7445: PUSH
7446: LD_VAR 0 1
7450: DIFF
7451: PPUSH
7452: CALL_OW 1
7456: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7457: LD_ADDR_EXP 50
7461: PUSH
7462: LD_EXP 50
7466: PUSH
7467: LD_INT 1
7469: MINUS
7470: ST_TO_ADDR
// end ; end_of_file
7471: LD_VAR 0 2
7475: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7476: LD_VAR 0 1
7480: PPUSH
7481: CALL_OW 266
7485: PUSH
7486: LD_INT 0
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: IN
7496: IFFALSE 7521
// SetBName ( b , @ & GetSide ( b ) ) ;
7498: LD_VAR 0 1
7502: PPUSH
7503: LD_STRING @
7505: PUSH
7506: LD_VAR 0 1
7510: PPUSH
7511: CALL_OW 255
7515: STR
7516: PPUSH
7517: CALL_OW 500
// end ;
7521: PPOPN 2
7523: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7524: LD_VAR 0 1
7528: PPUSH
7529: CALL_OW 266
7533: PUSH
7534: LD_INT 0
7536: PUSH
7537: LD_INT 1
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: IN
7544: IFFALSE 7569
// SetBName ( b , @ & GetSide ( b ) ) ;
7546: LD_VAR 0 1
7550: PPUSH
7551: LD_STRING @
7553: PUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: CALL_OW 255
7563: STR
7564: PPUSH
7565: CALL_OW 500
// end ;
7569: PPOPN 3
7571: END
// on VehicleConstructed ( veh , fac ) do var side ;
7572: LD_INT 0
7574: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 263
7584: PUSH
7585: LD_INT 5
7587: EQUAL
7588: IFFALSE 7730
// begin side := GetSide ( veh ) ;
7590: LD_ADDR_VAR 0 3
7594: PUSH
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 255
7604: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7605: LD_ADDR_EXP 53
7609: PUSH
7610: LD_EXP 53
7614: PPUSH
7615: LD_VAR 0 3
7619: PPUSH
7620: LD_EXP 53
7624: PUSH
7625: LD_VAR 0 3
7629: ARRAY
7630: PPUSH
7631: LD_INT 52
7633: PUSH
7634: EMPTY
7635: LIST
7636: PPUSH
7637: CALL_OW 72
7641: PUSH
7642: LD_INT 22
7644: PUSH
7645: LD_VAR 0 3
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: LD_INT 2
7656: PUSH
7657: LD_INT 33
7659: PUSH
7660: LD_INT 5
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_INT 25
7669: PUSH
7670: LD_INT 12
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PUSH
7677: LD_INT 25
7679: PUSH
7680: LD_INT 15
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 25
7689: PUSH
7690: LD_INT 16
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 25
7699: PUSH
7700: LD_INT 17
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: PPUSH
7719: CALL_OW 69
7723: UNION
7724: PPUSH
7725: CALL_OW 1
7729: ST_TO_ADDR
// end ; end ;
7730: PPOPN 3
7732: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
7738: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 257
7748: PUSH
7749: LD_INT 12
7751: PUSH
7752: LD_INT 15
7754: PUSH
7755: LD_INT 17
7757: PUSH
7758: LD_INT 16
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: IN
7767: PUSH
7768: LD_VAR 0 1
7772: PPUSH
7773: CALL_OW 263
7777: PUSH
7778: LD_INT 5
7780: EQUAL
7781: OR
7782: IFFALSE 7793
// ApeKilled ( j ) ;
7784: LD_VAR 0 1
7788: PPUSH
7789: CALL 7332 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7793: LD_VAR 0 1
7797: PPUSH
7798: CALL_OW 266
7802: PUSH
7803: LD_INT 0
7805: PUSH
7806: LD_INT 1
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: IN
7813: IFFALSE 7895
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7815: LD_ADDR_VAR 0 4
7819: PUSH
7820: LD_EXP 36
7824: PUSH
7825: LD_VAR 0 1
7829: PPUSH
7830: CALL_OW 255
7834: ARRAY
7835: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7836: LD_ADDR_VAR 0 2
7840: PUSH
7841: LD_EXP 41
7845: PUSH
7846: LD_VAR 0 4
7850: ARRAY
7851: PUSH
7852: LD_INT 1
7854: ARRAY
7855: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7856: LD_ADDR_VAR 0 3
7860: PUSH
7861: LD_EXP 41
7865: PUSH
7866: LD_VAR 0 4
7870: ARRAY
7871: PUSH
7872: LD_INT 2
7874: ARRAY
7875: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7876: LD_VAR 0 2
7880: PPUSH
7881: LD_VAR 0 3
7885: PPUSH
7886: CALL_OW 420
7890: PPUSH
7891: CALL_OW 419
// end ; end ;
7895: PPOPN 5
7897: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7898: LD_VAR 0 1
7902: PPUSH
7903: LD_VAR 0 2
7907: PPUSH
7908: LD_VAR 0 3
7912: PPUSH
7913: LD_OWVAR 2
7917: PPUSH
7918: CALL 8317 0 4
7922: PPOPN 3
7924: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7925: LD_INT 0
7927: PPUSH
7928: PPUSH
// for un in battle_flags_id do
7929: LD_ADDR_VAR 0 2
7933: PUSH
7934: LD_EXP 46
7938: PUSH
7939: FOR_IN
7940: IFFALSE 8015
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7942: LD_VAR 0 2
7946: PPUSH
7947: LD_INT 1
7949: PUSH
7950: LD_LOC 9
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: LD_INT 2
7961: PUSH
7962: LD_LOC 9
7966: PUSH
7967: LD_INT 2
7969: DIV
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 3
7977: PUSH
7978: LD_LOC 9
7982: PUSH
7983: LD_INT 5
7985: DIV
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 20
7993: PUSH
7994: LD_LOC 9
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: PPUSH
8009: CALL_OW 423
8013: GO 7939
8015: POP
8016: POP
// end ;
8017: LD_VAR 0 1
8021: RET
// every 1 do var un ;
8022: GO 8024
8024: DISABLE
8025: LD_INT 0
8027: PPUSH
// begin if not def_morale_flags then
8028: LD_EXP 9
8032: NOT
8033: IFFALSE 8037
// exit ;
8035: GO 8114
// if not morale_decreasing_time then
8037: LD_EXP 26
8041: NOT
8042: IFFALSE 8046
// exit ;
8044: GO 8114
// strength = 100 ;
8046: LD_ADDR_LOC 9
8050: PUSH
8051: LD_INT 100
8053: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8054: LD_EXP 26
8058: PPUSH
8059: CALL_OW 67
// strength := strength - 1 ;
8063: LD_ADDR_LOC 9
8067: PUSH
8068: LD_LOC 9
8072: PUSH
8073: LD_INT 1
8075: MINUS
8076: ST_TO_ADDR
// Update_Flags ;
8077: CALL 7925 0 0
// until not strength ;
8081: LD_LOC 9
8085: NOT
8086: IFFALSE 8054
// for un in battle_flags_id do
8088: LD_ADDR_VAR 0 1
8092: PUSH
8093: LD_EXP 46
8097: PUSH
8098: FOR_IN
8099: IFFALSE 8112
// KillBattleFlag ( un ) ;
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 419
8110: GO 8098
8112: POP
8113: POP
// end ; end_of_file
8114: PPOPN 1
8116: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
8117: LD_INT 0
8119: PPUSH
8120: PPUSH
// AllStrings := [ #gamespeed , game_speed - 4 ] ^ [ #Multi1x1-Time , tick ] ;
8121: LD_ADDR_VAR 0 2
8125: PUSH
8126: LD_STRING #gamespeed
8128: PUSH
8129: LD_OWVAR 65
8133: PUSH
8134: LD_INT 4
8136: MINUS
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: LD_STRING #Multi1x1-Time
8144: PUSH
8145: LD_OWVAR 1
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: ADD
8154: ST_TO_ADDR
// if WaitServerStrings then
8155: LD_EXP 58
8159: IFFALSE 8177
// AllStrings = AllStrings ^ WaitServerStrings ;
8161: LD_ADDR_VAR 0 2
8165: PUSH
8166: LD_VAR 0 2
8170: PUSH
8171: LD_EXP 58
8175: ADD
8176: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8177: LD_INT 0
8179: PUSH
8180: LD_EXP 31
8184: PUSH
8185: LD_OWVAR 1
8189: MINUS
8190: LESSEQUAL
8191: IFFALSE 8222
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8193: LD_ADDR_VAR 0 2
8197: PUSH
8198: LD_VAR 0 2
8202: PUSH
8203: LD_STRING #allowedsibbomb
8205: PUSH
8206: LD_EXP 31
8210: PUSH
8211: LD_OWVAR 1
8215: MINUS
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: ADD
8221: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8222: LD_INT 0
8224: PUSH
8225: LD_EXP 61
8229: PUSH
8230: LD_OWVAR 1
8234: MINUS
8235: LESSEQUAL
8236: IFFALSE 8267
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
8238: LD_ADDR_VAR 0 2
8242: PUSH
8243: LD_VAR 0 2
8247: PUSH
8248: LD_STRING #builduptime
8250: PUSH
8251: LD_EXP 61
8255: PUSH
8256: LD_OWVAR 1
8260: MINUS
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: ADD
8266: ST_TO_ADDR
// if ( ExtraStrings ) then
8267: LD_EXP 57
8271: IFFALSE 8293
// AllStrings := AllStrings ^  ^ ExtraStrings ;
8273: LD_ADDR_VAR 0 2
8277: PUSH
8278: LD_VAR 0 2
8282: PUSH
8283: LD_STRING 
8285: ADD
8286: PUSH
8287: LD_EXP 57
8291: ADD
8292: ST_TO_ADDR
// Display_Strings := AllStrings ;
8293: LD_ADDR_OWVAR 47
8297: PUSH
8298: LD_VAR 0 2
8302: ST_TO_ADDR
// end ;
8303: LD_VAR 0 1
8307: RET
// every 0 0$1 do
8308: GO 8310
8310: DISABLE
// begin ShowTimer ;
8311: CALL 8117 0 0
// enable ;
8315: ENABLE
// end ; end_of_file
8316: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8317: LD_INT 0
8319: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8320: LD_VAR 0 1
8324: PPUSH
8325: CALL_OW 255
8329: PUSH
8330: LD_VAR 0 4
8334: EQUAL
8335: IFFALSE 8354
// begin SetAchievement ( ACH_RAD ) ;
8337: LD_STRING ACH_RAD
8339: PPUSH
8340: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8344: LD_STRING ACH_NL
8346: PPUSH
8347: LD_INT 1
8349: PPUSH
8350: CALL_OW 564
// end end ;
8354: LD_VAR 0 5
8358: RET
// export function SA_Win ( side ) ; begin
8359: LD_INT 0
8361: PPUSH
// case side of 1 :
8362: LD_VAR 0 1
8366: PUSH
8367: LD_INT 1
8369: DOUBLE
8370: EQUAL
8371: IFTRUE 8375
8373: GO 8388
8375: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8376: LD_STRING ACH_AH
8378: PPUSH
8379: LD_INT 1
8381: PPUSH
8382: CALL_OW 564
8386: GO 8551
8388: LD_INT 2
8390: DOUBLE
8391: EQUAL
8392: IFTRUE 8396
8394: GO 8409
8396: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8397: LD_STRING ACH_E
8399: PPUSH
8400: LD_INT 1
8402: PPUSH
8403: CALL_OW 564
8407: GO 8551
8409: LD_INT 3
8411: DOUBLE
8412: EQUAL
8413: IFTRUE 8417
8415: GO 8430
8417: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8418: LD_STRING ACH_OOL
8420: PPUSH
8421: LD_INT 1
8423: PPUSH
8424: CALL_OW 564
8428: GO 8551
8430: LD_INT 1
8432: PUSH
8433: LD_INT 2
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: DOUBLE
8440: EQUAL
8441: IFTRUE 8445
8443: GO 8470
8445: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8446: LD_STRING ACH_AH
8448: PPUSH
8449: LD_REAL  5.00000000000000E-0001
8452: PPUSH
8453: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8457: LD_STRING ACH_E
8459: PPUSH
8460: LD_REAL  5.00000000000000E-0001
8463: PPUSH
8464: CALL_OW 564
// end ; [ 2 , 3 ] :
8468: GO 8551
8470: LD_INT 2
8472: PUSH
8473: LD_INT 3
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: DOUBLE
8480: EQUAL
8481: IFTRUE 8485
8483: GO 8510
8485: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8486: LD_STRING ACH_OOL
8488: PPUSH
8489: LD_REAL  5.00000000000000E-0001
8492: PPUSH
8493: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8497: LD_STRING ACH_E
8499: PPUSH
8500: LD_REAL  5.00000000000000E-0001
8503: PPUSH
8504: CALL_OW 564
// end ; [ 3 , 1 ] :
8508: GO 8551
8510: LD_INT 3
8512: PUSH
8513: LD_INT 1
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: DOUBLE
8520: EQUAL
8521: IFTRUE 8525
8523: GO 8550
8525: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8526: LD_STRING ACH_AH
8528: PPUSH
8529: LD_REAL  5.00000000000000E-0001
8532: PPUSH
8533: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8537: LD_STRING ACH_OOL
8539: PPUSH
8540: LD_REAL  5.00000000000000E-0001
8543: PPUSH
8544: CALL_OW 564
// end ; end ;
8548: GO 8551
8550: POP
// end ; end_of_file
8551: LD_VAR 0 2
8555: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8556: LD_INT 0
8558: PPUSH
8559: PPUSH
// enable ( 98 ) ;
8560: LD_INT 98
8562: ENABLE_MARKED
// GameEnded = false ;
8563: LD_ADDR_LOC 15
8567: PUSH
8568: LD_INT 0
8570: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8571: LD_ADDR_LOC 14
8575: PUSH
8576: LD_INT 0
8578: PUSH
8579: LD_INT 0
8581: PUSH
8582: LD_INT 0
8584: PUSH
8585: LD_INT 0
8587: PUSH
8588: LD_INT 0
8590: PUSH
8591: LD_INT 0
8593: PUSH
8594: LD_INT 0
8596: PUSH
8597: LD_INT 0
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: ST_TO_ADDR
// unfoged = false ;
8610: LD_ADDR_LOC 16
8614: PUSH
8615: LD_INT 0
8617: ST_TO_ADDR
// defeated_specs := [ ] ;
8618: LD_ADDR_LOC 17
8622: PUSH
8623: EMPTY
8624: ST_TO_ADDR
// for i = 1 to side_positions do
8625: LD_ADDR_VAR 0 2
8629: PUSH
8630: DOUBLE
8631: LD_INT 1
8633: DEC
8634: ST_TO_ADDR
8635: LD_EXP 36
8639: PUSH
8640: FOR_TO
8641: IFFALSE 8681
// if not side_positions [ i ] then
8643: LD_EXP 36
8647: PUSH
8648: LD_VAR 0 2
8652: ARRAY
8653: NOT
8654: IFFALSE 8679
// defeated = replace ( defeated , i , true ) ;
8656: LD_ADDR_LOC 14
8660: PUSH
8661: LD_LOC 14
8665: PPUSH
8666: LD_VAR 0 2
8670: PPUSH
8671: LD_INT 1
8673: PPUSH
8674: CALL_OW 1
8678: ST_TO_ADDR
8679: GO 8640
8681: POP
8682: POP
// end ;
8683: LD_VAR 0 1
8687: RET
// function CanWinLoose ; begin
8688: LD_INT 0
8690: PPUSH
// Result := true ;
8691: LD_ADDR_VAR 0 1
8695: PUSH
8696: LD_INT 1
8698: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8699: CALL_OW 518
8703: PUSH
8704: CALL_OW 519
8708: PUSH
8709: LD_INT 0
8711: GREATER
8712: AND
8713: IFFALSE 8723
// Result := false ;
8715: LD_ADDR_VAR 0 1
8719: PUSH
8720: LD_INT 0
8722: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8723: CALL_OW 531
8727: PUSH
8728: CALL_OW 519
8732: PUSH
8733: LD_INT 1
8735: GREATER
8736: AND
8737: IFFALSE 8747
// Result := false ;
8739: LD_ADDR_VAR 0 1
8743: PUSH
8744: LD_INT 0
8746: ST_TO_ADDR
// end ;
8747: LD_VAR 0 1
8751: RET
// export function HasPower ( i ) ; var k , h ; begin
8752: LD_INT 0
8754: PPUSH
8755: PPUSH
8756: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8757: LD_VAR 0 1
8761: PPUSH
8762: CALL_OW 108
8766: NOT
8767: PUSH
8768: LD_EXP 35
8772: PUSH
8773: LD_VAR 0 1
8777: ARRAY
8778: NOT
8779: AND
8780: PUSH
8781: LD_OWVAR 4
8785: AND
8786: IFFALSE 8798
// begin result = false ;
8788: LD_ADDR_VAR 0 2
8792: PUSH
8793: LD_INT 0
8795: ST_TO_ADDR
// end else
8796: GO 9093
// case def_win_rules of 0 :
8798: LD_EXP 32
8802: PUSH
8803: LD_INT 0
8805: DOUBLE
8806: EQUAL
8807: IFTRUE 8811
8809: GO 8974
8811: POP
// if def_people_respawning then
8812: LD_EXP 11
8816: IFFALSE 8907
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8818: LD_ADDR_VAR 0 2
8822: PUSH
8823: LD_INT 22
8825: PUSH
8826: LD_VAR 0 1
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 2
8837: PUSH
8838: LD_INT 21
8840: PUSH
8841: LD_INT 1
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 33
8850: PUSH
8851: LD_INT 3
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: LD_INT 33
8860: PUSH
8861: LD_INT 5
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PUSH
8868: LD_INT 30
8870: PUSH
8871: LD_INT 0
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 30
8880: PUSH
8881: LD_INT 1
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PPUSH
8900: CALL_OW 69
8904: ST_TO_ADDR
8905: GO 8972
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8907: LD_ADDR_VAR 0 2
8911: PUSH
8912: LD_INT 22
8914: PUSH
8915: LD_VAR 0 1
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PUSH
8924: LD_INT 2
8926: PUSH
8927: LD_INT 21
8929: PUSH
8930: LD_INT 1
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 33
8939: PUSH
8940: LD_INT 3
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: LD_INT 33
8949: PUSH
8950: LD_INT 5
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PPUSH
8967: CALL_OW 69
8971: ST_TO_ADDR
8972: GO 9093
8974: LD_INT 1
8976: DOUBLE
8977: EQUAL
8978: IFTRUE 8982
8980: GO 9021
8982: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8983: LD_ADDR_VAR 0 2
8987: PUSH
8988: LD_INT 22
8990: PUSH
8991: LD_VAR 0 1
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PUSH
9000: LD_INT 21
9002: PUSH
9003: LD_INT 1
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PPUSH
9014: CALL_OW 69
9018: ST_TO_ADDR
9019: GO 9093
9021: LD_INT 2
9023: DOUBLE
9024: EQUAL
9025: IFTRUE 9029
9027: GO 9092
9029: POP
// begin h = false ;
9030: LD_ADDR_VAR 0 4
9034: PUSH
9035: LD_INT 0
9037: ST_TO_ADDR
// for k in heroes [ i ] do
9038: LD_ADDR_VAR 0 3
9042: PUSH
9043: LD_EXP 49
9047: PUSH
9048: LD_VAR 0 1
9052: ARRAY
9053: PUSH
9054: FOR_IN
9055: IFFALSE 9078
// if IsLive ( k ) then
9057: LD_VAR 0 3
9061: PPUSH
9062: CALL_OW 300
9066: IFFALSE 9076
// h = true ;
9068: LD_ADDR_VAR 0 4
9072: PUSH
9073: LD_INT 1
9075: ST_TO_ADDR
9076: GO 9054
9078: POP
9079: POP
// Result := h ;
9080: LD_ADDR_VAR 0 2
9084: PUSH
9085: LD_VAR 0 4
9089: ST_TO_ADDR
// end ; end ;
9090: GO 9093
9092: POP
// end ;
9093: LD_VAR 0 2
9097: RET
// function AlliedSides ( i , j ) ; begin
9098: LD_INT 0
9100: PPUSH
// Result := false ;
9101: LD_ADDR_VAR 0 3
9105: PUSH
9106: LD_INT 0
9108: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9109: LD_VAR 0 1
9113: PPUSH
9114: LD_VAR 0 2
9118: PPUSH
9119: CALL_OW 81
9123: PUSH
9124: LD_INT 1
9126: EQUAL
9127: PUSH
9128: LD_VAR 0 2
9132: PPUSH
9133: LD_VAR 0 1
9137: PPUSH
9138: CALL_OW 81
9142: PUSH
9143: LD_INT 1
9145: EQUAL
9146: AND
9147: PUSH
9148: LD_VAR 0 1
9152: PPUSH
9153: CALL_OW 83
9157: AND
9158: PUSH
9159: LD_VAR 0 2
9163: PPUSH
9164: CALL_OW 83
9168: AND
9169: IFFALSE 9179
// Result := true ;
9171: LD_ADDR_VAR 0 3
9175: PUSH
9176: LD_INT 1
9178: ST_TO_ADDR
// end ;
9179: LD_VAR 0 3
9183: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9184: CALL 8688 0 0
9188: PUSH
9189: LD_LOC 15
9193: NOT
9194: AND
9195: IFFALSE 9211
9197: GO 9199
9199: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9200: LD_ADDR_EXP 58
9204: PUSH
9205: LD_STRING #Player-Ended
9207: PUSH
9208: EMPTY
9209: LIST
9210: ST_TO_ADDR
9211: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9212: CALL 8688 0 0
9216: PUSH
9217: LD_LOC 15
9221: AND
9222: IFFALSE 9231
9224: GO 9226
9226: DISABLE
// YouLostInMultiplayer ;
9227: CALL_OW 107
9231: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9232: CALL 8688 0 0
9236: NOT
9237: PUSH
9238: CALL_OW 531
9242: NOT
9243: AND
9244: IFFALSE 9260
9246: GO 9248
9248: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9249: LD_ADDR_EXP 58
9253: PUSH
9254: LD_STRING #server-wait
9256: PUSH
9257: EMPTY
9258: LIST
9259: ST_TO_ADDR
9260: END
// every 100 trigger IAmSpec do
9261: CALL_OW 531
9265: IFFALSE 9281
9267: GO 9269
9269: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9270: LD_ADDR_EXP 58
9274: PUSH
9275: LD_STRING #Player-IAmSpec
9277: PUSH
9278: EMPTY
9279: LIST
9280: ST_TO_ADDR
9281: END
// every 100 trigger GameEnded and IAmSpec do
9282: LD_LOC 15
9286: PUSH
9287: CALL_OW 531
9291: AND
9292: IFFALSE 9301
9294: GO 9296
9296: DISABLE
// YouLostInMultiplayer ;
9297: CALL_OW 107
9301: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9302: CALL 8688 0 0
9306: PUSH
9307: LD_LOC 15
9311: NOT
9312: AND
9313: IFFALSE 9329
9315: GO 9317
9317: DISABLE
// WaitServerStrings = [ $player-win ] ;
9318: LD_ADDR_EXP 58
9322: PUSH
9323: LD_STRING $player-win
9325: PUSH
9326: EMPTY
9327: LIST
9328: ST_TO_ADDR
9329: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9330: CALL 8688 0 0
9334: PUSH
9335: LD_LOC 15
9339: AND
9340: IFFALSE 9364
9342: GO 9344
9344: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9345: LD_EXP 37
9349: PUSH
9350: LD_OWVAR 7
9354: ARRAY
9355: PPUSH
9356: CALL 8359 0 1
// YouWinInMultiplayer ;
9360: CALL_OW 106
// end ;
9364: END
// every 100 trigger isEditor marked 401 do
9365: LD_OWVAR 84
9369: IFFALSE 9385
9371: GO 9373
9373: DISABLE
// Debug_Strings = [ You won ] ;
9374: LD_ADDR_OWVAR 48
9378: PUSH
9379: LD_STRING You won
9381: PUSH
9382: EMPTY
9383: LIST
9384: ST_TO_ADDR
9385: END
// every 100 trigger isEditor marked 400 do
9386: LD_OWVAR 84
9390: IFFALSE 9406
9392: GO 9394
9394: DISABLE
// Debug_Strings = [ You loss ] ;
9395: LD_ADDR_OWVAR 48
9399: PUSH
9400: LD_STRING You loss
9402: PUSH
9403: EMPTY
9404: LIST
9405: ST_TO_ADDR
9406: END
// every 100 marked 98 do var i , un ;
9407: GO 9409
9409: DISABLE
9410: LD_INT 0
9412: PPUSH
9413: PPUSH
// begin for i = 1 to side_positions do
9414: LD_ADDR_VAR 0 1
9418: PUSH
9419: DOUBLE
9420: LD_INT 1
9422: DEC
9423: ST_TO_ADDR
9424: LD_EXP 36
9428: PUSH
9429: FOR_TO
9430: IFFALSE 9517
// begin if side_positions [ i ] then
9432: LD_EXP 36
9436: PUSH
9437: LD_VAR 0 1
9441: ARRAY
9442: IFFALSE 9515
// if not HasPower ( i ) and not defeated [ i ] then
9444: LD_VAR 0 1
9448: PPUSH
9449: CALL 8752 0 1
9453: NOT
9454: PUSH
9455: LD_LOC 14
9459: PUSH
9460: LD_VAR 0 1
9464: ARRAY
9465: NOT
9466: AND
9467: IFFALSE 9515
// begin defeated = replace ( defeated , i , true ) ;
9469: LD_ADDR_LOC 14
9473: PUSH
9474: LD_LOC 14
9478: PPUSH
9479: LD_VAR 0 1
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: CALL_OW 1
9491: ST_TO_ADDR
// if i = mp_player_side then
9492: LD_VAR 0 1
9496: PUSH
9497: LD_OWVAR 7
9501: EQUAL
9502: IFFALSE 9515
// begin Multiplayer_Loose_Message ;
9504: CALL_OW 521
// SetPlayerSpectator ( ) ;
9508: CALL_OW 572
// enable ( 400 ) ;
9512: LD_INT 400
9514: ENABLE_MARKED
// end ; end ; end ;
9515: GO 9429
9517: POP
9518: POP
// DidGameEnd ;
9519: CALL 9534 0 0
// if not GameEnded then
9523: LD_LOC 15
9527: NOT
9528: IFFALSE 9531
// enable ;
9530: ENABLE
// end ;
9531: PPOPN 2
9533: END
// function DidGameEnd ; var i , k , enemy ; begin
9534: LD_INT 0
9536: PPUSH
9537: PPUSH
9538: PPUSH
9539: PPUSH
// enemy = [ ] ;
9540: LD_ADDR_VAR 0 4
9544: PUSH
9545: EMPTY
9546: ST_TO_ADDR
// for i = 1 to side_positions do
9547: LD_ADDR_VAR 0 2
9551: PUSH
9552: DOUBLE
9553: LD_INT 1
9555: DEC
9556: ST_TO_ADDR
9557: LD_EXP 36
9561: PUSH
9562: FOR_TO
9563: IFFALSE 9657
// if not defeated [ i ] then
9565: LD_LOC 14
9569: PUSH
9570: LD_VAR 0 2
9574: ARRAY
9575: NOT
9576: IFFALSE 9655
// for k = 1 to side_positions do
9578: LD_ADDR_VAR 0 3
9582: PUSH
9583: DOUBLE
9584: LD_INT 1
9586: DEC
9587: ST_TO_ADDR
9588: LD_EXP 36
9592: PUSH
9593: FOR_TO
9594: IFFALSE 9653
// if not defeated [ k ] then
9596: LD_LOC 14
9600: PUSH
9601: LD_VAR 0 3
9605: ARRAY
9606: NOT
9607: IFFALSE 9651
// if not AlliedSides ( i , k ) then
9609: LD_VAR 0 2
9613: PPUSH
9614: LD_VAR 0 3
9618: PPUSH
9619: CALL 9098 0 2
9623: NOT
9624: IFFALSE 9651
// enemy = enemy ^ [ i , k ] ;
9626: LD_ADDR_VAR 0 4
9630: PUSH
9631: LD_VAR 0 4
9635: PUSH
9636: LD_VAR 0 2
9640: PUSH
9641: LD_VAR 0 3
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: ADD
9650: ST_TO_ADDR
9651: GO 9593
9653: POP
9654: POP
9655: GO 9562
9657: POP
9658: POP
// if not enemy then
9659: LD_VAR 0 4
9663: NOT
9664: IFFALSE 9690
// begin GameEnded = true ;
9666: LD_ADDR_LOC 15
9670: PUSH
9671: LD_INT 1
9673: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9674: LD_LOC 14
9678: PUSH
9679: LD_OWVAR 7
9683: ARRAY
9684: NOT
9685: IFFALSE 9690
// enable ( 401 ) ;
9687: LD_INT 401
9689: ENABLE_MARKED
// end ; end ;
9690: LD_VAR 0 1
9694: RET
// function unfog ; var k , friends ; begin
9695: LD_INT 0
9697: PPUSH
9698: PPUSH
9699: PPUSH
// for k = 1 to side_positions do
9700: LD_ADDR_VAR 0 2
9704: PUSH
9705: DOUBLE
9706: LD_INT 1
9708: DEC
9709: ST_TO_ADDR
9710: LD_EXP 36
9714: PUSH
9715: FOR_TO
9716: IFFALSE 9772
// if not defeated [ k ] then
9718: LD_LOC 14
9722: PUSH
9723: LD_VAR 0 2
9727: ARRAY
9728: NOT
9729: IFFALSE 9770
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9731: LD_OWVAR 7
9735: PPUSH
9736: LD_VAR 0 2
9740: PPUSH
9741: CALL_OW 81
9745: PUSH
9746: LD_INT 1
9748: PUSH
9749: EMPTY
9750: LIST
9751: IN
9752: IFFALSE 9770
// friends = friends ^ k ;
9754: LD_ADDR_VAR 0 3
9758: PUSH
9759: LD_VAR 0 3
9763: PUSH
9764: LD_VAR 0 2
9768: ADD
9769: ST_TO_ADDR
9770: GO 9715
9772: POP
9773: POP
// if not friends then
9774: LD_VAR 0 3
9778: NOT
9779: IFFALSE 9793
// begin SetPlayerSpectator ( ) ;
9781: CALL_OW 572
// unfoged = true ;
9785: LD_ADDR_LOC 16
9789: PUSH
9790: LD_INT 1
9792: ST_TO_ADDR
// end ; end ;
9793: LD_VAR 0 1
9797: RET
// export function MakeGameEnd ; begin
9798: LD_INT 0
9800: PPUSH
// SetPlayerSpectator ( ) ;
9801: CALL_OW 572
// unfoged = true ;
9805: LD_ADDR_LOC 16
9809: PUSH
9810: LD_INT 1
9812: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9813: LD_INT 175
9815: PPUSH
9816: CALL_OW 67
// GameEnded = true ;
9820: LD_ADDR_LOC 15
9824: PUSH
9825: LD_INT 1
9827: ST_TO_ADDR
// end ;
9828: LD_VAR 0 1
9832: RET
// export function GetGameEnded ; begin
9833: LD_INT 0
9835: PPUSH
// result = GameEnded ;
9836: LD_ADDR_VAR 0 1
9840: PUSH
9841: LD_LOC 15
9845: ST_TO_ADDR
// end ; end_of_file
9846: LD_VAR 0 1
9850: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9851: LD_INT 0
9853: PPUSH
9854: PPUSH
9855: PPUSH
// for side = 1 to 8 do
9856: LD_ADDR_VAR 0 2
9860: PUSH
9861: DOUBLE
9862: LD_INT 1
9864: DEC
9865: ST_TO_ADDR
9866: LD_INT 8
9868: PUSH
9869: FOR_TO
9870: IFFALSE 9991
// begin for i = 1 to 72 do
9872: LD_ADDR_VAR 0 3
9876: PUSH
9877: DOUBLE
9878: LD_INT 1
9880: DEC
9881: ST_TO_ADDR
9882: LD_INT 72
9884: PUSH
9885: FOR_TO
9886: IFFALSE 9917
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9888: LD_VAR 0 3
9892: PPUSH
9893: LD_VAR 0 2
9897: PPUSH
9898: LD_INT 0
9900: PPUSH
9901: LD_VAR 0 3
9905: PPUSH
9906: CALL_OW 565
9910: PPUSH
9911: CALL_OW 322
9915: GO 9885
9917: POP
9918: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9919: LD_INT 73
9921: PPUSH
9922: LD_VAR 0 2
9926: PPUSH
9927: LD_INT 0
9929: PPUSH
9930: LD_INT 25
9932: PPUSH
9933: CALL_OW 565
9937: PPUSH
9938: CALL_OW 322
// for i = 0 to 40 do
9942: LD_ADDR_VAR 0 3
9946: PUSH
9947: DOUBLE
9948: LD_INT 0
9950: DEC
9951: ST_TO_ADDR
9952: LD_INT 40
9954: PUSH
9955: FOR_TO
9956: IFFALSE 9987
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9958: LD_VAR 0 3
9962: PPUSH
9963: LD_VAR 0 2
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: LD_VAR 0 3
9975: PPUSH
9976: CALL_OW 565
9980: PPUSH
9981: CALL_OW 324
9985: GO 9955
9987: POP
9988: POP
// end ;
9989: GO 9869
9991: POP
9992: POP
// end ;
9993: LD_VAR 0 1
9997: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9998: LD_INT 0
10000: PPUSH
10001: PPUSH
10002: PPUSH
// for side = 1 to 8 do
10003: LD_ADDR_VAR 0 3
10007: PUSH
10008: DOUBLE
10009: LD_INT 1
10011: DEC
10012: ST_TO_ADDR
10013: LD_INT 8
10015: PUSH
10016: FOR_TO
10017: IFFALSE 14013
// begin for i = 1 to 73 do
10019: LD_ADDR_VAR 0 4
10023: PUSH
10024: DOUBLE
10025: LD_INT 1
10027: DEC
10028: ST_TO_ADDR
10029: LD_INT 73
10031: PUSH
10032: FOR_TO
10033: IFFALSE 10054
// SetTech ( i , side , state_disabled ) ;
10035: LD_VAR 0 4
10039: PPUSH
10040: LD_VAR 0 3
10044: PPUSH
10045: LD_INT 0
10047: PPUSH
10048: CALL_OW 322
10052: GO 10032
10054: POP
10055: POP
// for i = 0 to 40 do
10056: LD_ADDR_VAR 0 4
10060: PUSH
10061: DOUBLE
10062: LD_INT 0
10064: DEC
10065: ST_TO_ADDR
10066: LD_INT 40
10068: PUSH
10069: FOR_TO
10070: IFFALSE 10091
// SetRestrict ( i , side , false ) ;
10072: LD_VAR 0 4
10076: PPUSH
10077: LD_VAR 0 3
10081: PPUSH
10082: LD_INT 0
10084: PPUSH
10085: CALL_OW 324
10089: GO 10069
10091: POP
10092: POP
// case level of 1 :
10093: LD_VAR 0 1
10097: PUSH
10098: LD_INT 1
10100: DOUBLE
10101: EQUAL
10102: IFTRUE 10106
10104: GO 10259
10106: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10107: LD_INT 35
10109: PPUSH
10110: LD_VAR 0 3
10114: PPUSH
10115: LD_INT 1
10117: PPUSH
10118: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10122: LD_INT 45
10124: PPUSH
10125: LD_VAR 0 3
10129: PPUSH
10130: LD_INT 1
10132: PPUSH
10133: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10137: LD_INT 46
10139: PPUSH
10140: LD_VAR 0 3
10144: PPUSH
10145: LD_INT 1
10147: PPUSH
10148: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10152: LD_INT 47
10154: PPUSH
10155: LD_VAR 0 3
10159: PPUSH
10160: LD_INT 1
10162: PPUSH
10163: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10167: LD_INT 0
10169: PPUSH
10170: LD_VAR 0 3
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10182: LD_INT 2
10184: PPUSH
10185: LD_VAR 0 3
10189: PPUSH
10190: LD_INT 1
10192: PPUSH
10193: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10197: LD_INT 4
10199: PPUSH
10200: LD_VAR 0 3
10204: PPUSH
10205: LD_INT 1
10207: PPUSH
10208: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10212: LD_INT 6
10214: PPUSH
10215: LD_VAR 0 3
10219: PPUSH
10220: LD_INT 1
10222: PPUSH
10223: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10227: LD_INT 29
10229: PPUSH
10230: LD_VAR 0 3
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10242: LD_INT 31
10244: PPUSH
10245: LD_VAR 0 3
10249: PPUSH
10250: LD_INT 1
10252: PPUSH
10253: CALL_OW 324
// end ; 2 :
10257: GO 14011
10259: LD_INT 2
10261: DOUBLE
10262: EQUAL
10263: IFTRUE 10267
10265: GO 10465
10267: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10268: LD_INT 35
10270: PPUSH
10271: LD_VAR 0 3
10275: PPUSH
10276: LD_INT 1
10278: PPUSH
10279: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10283: LD_INT 45
10285: PPUSH
10286: LD_VAR 0 3
10290: PPUSH
10291: LD_INT 1
10293: PPUSH
10294: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10298: LD_INT 46
10300: PPUSH
10301: LD_VAR 0 3
10305: PPUSH
10306: LD_INT 1
10308: PPUSH
10309: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10313: LD_INT 47
10315: PPUSH
10316: LD_VAR 0 3
10320: PPUSH
10321: LD_INT 1
10323: PPUSH
10324: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10328: LD_INT 1
10330: PPUSH
10331: LD_VAR 0 3
10335: PPUSH
10336: LD_INT 1
10338: PPUSH
10339: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10343: LD_INT 2
10345: PPUSH
10346: LD_VAR 0 3
10350: PPUSH
10351: LD_INT 1
10353: PPUSH
10354: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10358: LD_INT 11
10360: PPUSH
10361: LD_VAR 0 3
10365: PPUSH
10366: LD_INT 1
10368: PPUSH
10369: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10373: LD_INT 0
10375: PPUSH
10376: LD_VAR 0 3
10380: PPUSH
10381: LD_INT 1
10383: PPUSH
10384: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10388: LD_INT 2
10390: PPUSH
10391: LD_VAR 0 3
10395: PPUSH
10396: LD_INT 1
10398: PPUSH
10399: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10403: LD_INT 4
10405: PPUSH
10406: LD_VAR 0 3
10410: PPUSH
10411: LD_INT 1
10413: PPUSH
10414: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10418: LD_INT 6
10420: PPUSH
10421: LD_VAR 0 3
10425: PPUSH
10426: LD_INT 1
10428: PPUSH
10429: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10433: LD_INT 29
10435: PPUSH
10436: LD_VAR 0 3
10440: PPUSH
10441: LD_INT 1
10443: PPUSH
10444: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10448: LD_INT 31
10450: PPUSH
10451: LD_VAR 0 3
10455: PPUSH
10456: LD_INT 1
10458: PPUSH
10459: CALL_OW 324
// end ; 3 :
10463: GO 14011
10465: LD_INT 3
10467: DOUBLE
10468: EQUAL
10469: IFTRUE 10473
10471: GO 10926
10473: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10474: LD_INT 35
10476: PPUSH
10477: LD_VAR 0 3
10481: PPUSH
10482: LD_INT 1
10484: PPUSH
10485: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10489: LD_INT 45
10491: PPUSH
10492: LD_VAR 0 3
10496: PPUSH
10497: LD_INT 1
10499: PPUSH
10500: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10504: LD_INT 46
10506: PPUSH
10507: LD_VAR 0 3
10511: PPUSH
10512: LD_INT 1
10514: PPUSH
10515: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10519: LD_INT 47
10521: PPUSH
10522: LD_VAR 0 3
10526: PPUSH
10527: LD_INT 1
10529: PPUSH
10530: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10534: LD_INT 1
10536: PPUSH
10537: LD_VAR 0 3
10541: PPUSH
10542: LD_INT 1
10544: PPUSH
10545: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10549: LD_INT 2
10551: PPUSH
10552: LD_VAR 0 3
10556: PPUSH
10557: LD_INT 1
10559: PPUSH
10560: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10564: LD_INT 11
10566: PPUSH
10567: LD_VAR 0 3
10571: PPUSH
10572: LD_INT 1
10574: PPUSH
10575: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10579: LD_INT 48
10581: PPUSH
10582: LD_VAR 0 3
10586: PPUSH
10587: LD_INT 1
10589: PPUSH
10590: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10594: LD_INT 69
10596: PPUSH
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 1
10604: PPUSH
10605: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10609: LD_INT 39
10611: PPUSH
10612: LD_VAR 0 3
10616: PPUSH
10617: LD_INT 1
10619: PPUSH
10620: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10624: LD_INT 43
10626: PPUSH
10627: LD_VAR 0 3
10631: PPUSH
10632: LD_INT 1
10634: PPUSH
10635: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10639: LD_INT 51
10641: PPUSH
10642: LD_VAR 0 3
10646: PPUSH
10647: LD_INT 1
10649: PPUSH
10650: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10654: LD_INT 6
10656: PPUSH
10657: LD_VAR 0 3
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10669: LD_INT 0
10671: PPUSH
10672: LD_VAR 0 3
10676: PPUSH
10677: LD_INT 1
10679: PPUSH
10680: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10684: LD_INT 2
10686: PPUSH
10687: LD_VAR 0 3
10691: PPUSH
10692: LD_INT 1
10694: PPUSH
10695: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10699: LD_INT 3
10701: PPUSH
10702: LD_VAR 0 3
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10714: LD_INT 4
10716: PPUSH
10717: LD_VAR 0 3
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10729: LD_INT 6
10731: PPUSH
10732: LD_VAR 0 3
10736: PPUSH
10737: LD_INT 1
10739: PPUSH
10740: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10744: LD_INT 7
10746: PPUSH
10747: LD_VAR 0 3
10751: PPUSH
10752: LD_INT 1
10754: PPUSH
10755: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10759: LD_INT 8
10761: PPUSH
10762: LD_VAR 0 3
10766: PPUSH
10767: LD_INT 1
10769: PPUSH
10770: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10774: LD_INT 10
10776: PPUSH
10777: LD_VAR 0 3
10781: PPUSH
10782: LD_INT 1
10784: PPUSH
10785: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10789: LD_INT 15
10791: PPUSH
10792: LD_VAR 0 3
10796: PPUSH
10797: LD_INT 1
10799: PPUSH
10800: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10804: LD_INT 16
10806: PPUSH
10807: LD_VAR 0 3
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10819: LD_INT 17
10821: PPUSH
10822: LD_VAR 0 3
10826: PPUSH
10827: LD_INT 1
10829: PPUSH
10830: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10834: LD_INT 20
10836: PPUSH
10837: LD_VAR 0 3
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10849: LD_INT 26
10851: PPUSH
10852: LD_VAR 0 3
10856: PPUSH
10857: LD_INT 1
10859: PPUSH
10860: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10864: LD_INT 27
10866: PPUSH
10867: LD_VAR 0 3
10871: PPUSH
10872: LD_INT 1
10874: PPUSH
10875: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10879: LD_INT 29
10881: PPUSH
10882: LD_VAR 0 3
10886: PPUSH
10887: LD_INT 1
10889: PPUSH
10890: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10894: LD_INT 31
10896: PPUSH
10897: LD_VAR 0 3
10901: PPUSH
10902: LD_INT 1
10904: PPUSH
10905: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10909: LD_INT 32
10911: PPUSH
10912: LD_VAR 0 3
10916: PPUSH
10917: LD_INT 1
10919: PPUSH
10920: CALL_OW 324
// end ; 4 :
10924: GO 14011
10926: LD_INT 4
10928: DOUBLE
10929: EQUAL
10930: IFTRUE 10934
10932: GO 11882
10934: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10935: LD_INT 35
10937: PPUSH
10938: LD_VAR 0 3
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10950: LD_INT 45
10952: PPUSH
10953: LD_VAR 0 3
10957: PPUSH
10958: LD_INT 1
10960: PPUSH
10961: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10965: LD_INT 46
10967: PPUSH
10968: LD_VAR 0 3
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10980: LD_INT 47
10982: PPUSH
10983: LD_VAR 0 3
10987: PPUSH
10988: LD_INT 1
10990: PPUSH
10991: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10995: LD_INT 1
10997: PPUSH
10998: LD_VAR 0 3
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11010: LD_INT 2
11012: PPUSH
11013: LD_VAR 0 3
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11025: LD_INT 11
11027: PPUSH
11028: LD_VAR 0 3
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11040: LD_INT 20
11042: PPUSH
11043: LD_VAR 0 3
11047: PPUSH
11048: LD_INT 1
11050: PPUSH
11051: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11055: LD_INT 48
11057: PPUSH
11058: LD_VAR 0 3
11062: PPUSH
11063: LD_INT 1
11065: PPUSH
11066: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11070: LD_INT 49
11072: PPUSH
11073: LD_VAR 0 3
11077: PPUSH
11078: LD_INT 1
11080: PPUSH
11081: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11085: LD_INT 69
11087: PPUSH
11088: LD_VAR 0 3
11092: PPUSH
11093: LD_INT 1
11095: PPUSH
11096: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11100: LD_INT 39
11102: PPUSH
11103: LD_VAR 0 3
11107: PPUSH
11108: LD_INT 1
11110: PPUSH
11111: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11115: LD_INT 34
11117: PPUSH
11118: LD_VAR 0 3
11122: PPUSH
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11130: LD_INT 42
11132: PPUSH
11133: LD_VAR 0 3
11137: PPUSH
11138: LD_INT 1
11140: PPUSH
11141: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11145: LD_INT 44
11147: PPUSH
11148: LD_VAR 0 3
11152: PPUSH
11153: LD_INT 1
11155: PPUSH
11156: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11160: LD_INT 41
11162: PPUSH
11163: LD_VAR 0 3
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11175: LD_INT 43
11177: PPUSH
11178: LD_VAR 0 3
11182: PPUSH
11183: LD_INT 1
11185: PPUSH
11186: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11190: LD_INT 70
11192: PPUSH
11193: LD_VAR 0 3
11197: PPUSH
11198: LD_INT 1
11200: PPUSH
11201: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11205: LD_INT 51
11207: PPUSH
11208: LD_VAR 0 3
11212: PPUSH
11213: LD_INT 1
11215: PPUSH
11216: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11220: LD_INT 52
11222: PPUSH
11223: LD_VAR 0 3
11227: PPUSH
11228: LD_INT 1
11230: PPUSH
11231: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11235: LD_INT 6
11237: PPUSH
11238: LD_VAR 0 3
11242: PPUSH
11243: LD_INT 1
11245: PPUSH
11246: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11250: LD_INT 15
11252: PPUSH
11253: LD_VAR 0 3
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11265: LD_INT 7
11267: PPUSH
11268: LD_VAR 0 3
11272: PPUSH
11273: LD_INT 1
11275: PPUSH
11276: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11280: LD_INT 12
11282: PPUSH
11283: LD_VAR 0 3
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11295: LD_INT 18
11297: PPUSH
11298: LD_VAR 0 3
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11310: LD_INT 60
11312: PPUSH
11313: LD_VAR 0 3
11317: PPUSH
11318: LD_INT 1
11320: PPUSH
11321: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11325: LD_INT 9
11327: PPUSH
11328: LD_VAR 0 3
11332: PPUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11340: LD_INT 30
11342: PPUSH
11343: LD_VAR 0 3
11347: PPUSH
11348: LD_INT 1
11350: PPUSH
11351: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11355: LD_INT 37
11357: PPUSH
11358: LD_VAR 0 3
11362: PPUSH
11363: LD_INT 1
11365: PPUSH
11366: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11370: LD_INT 5
11372: PPUSH
11373: LD_VAR 0 3
11377: PPUSH
11378: LD_INT 1
11380: PPUSH
11381: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11385: LD_INT 66
11387: PPUSH
11388: LD_VAR 0 3
11392: PPUSH
11393: LD_INT 1
11395: PPUSH
11396: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11400: LD_INT 21
11402: PPUSH
11403: LD_VAR 0 3
11407: PPUSH
11408: LD_INT 1
11410: PPUSH
11411: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11415: LD_INT 22
11417: PPUSH
11418: LD_VAR 0 3
11422: PPUSH
11423: LD_INT 1
11425: PPUSH
11426: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11430: LD_INT 54
11432: PPUSH
11433: LD_VAR 0 3
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11445: LD_INT 0
11447: PPUSH
11448: LD_VAR 0 3
11452: PPUSH
11453: LD_INT 1
11455: PPUSH
11456: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11460: LD_INT 1
11462: PPUSH
11463: LD_VAR 0 3
11467: PPUSH
11468: LD_INT 1
11470: PPUSH
11471: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11475: LD_INT 2
11477: PPUSH
11478: LD_VAR 0 3
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11490: LD_INT 3
11492: PPUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 1
11500: PPUSH
11501: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11505: LD_INT 4
11507: PPUSH
11508: LD_VAR 0 3
11512: PPUSH
11513: LD_INT 1
11515: PPUSH
11516: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11520: LD_INT 5
11522: PPUSH
11523: LD_VAR 0 3
11527: PPUSH
11528: LD_INT 1
11530: PPUSH
11531: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11535: LD_INT 6
11537: PPUSH
11538: LD_VAR 0 3
11542: PPUSH
11543: LD_INT 1
11545: PPUSH
11546: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11550: LD_INT 7
11552: PPUSH
11553: LD_VAR 0 3
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11565: LD_INT 8
11567: PPUSH
11568: LD_VAR 0 3
11572: PPUSH
11573: LD_INT 1
11575: PPUSH
11576: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11580: LD_INT 10
11582: PPUSH
11583: LD_VAR 0 3
11587: PPUSH
11588: LD_INT 1
11590: PPUSH
11591: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11595: LD_INT 11
11597: PPUSH
11598: LD_VAR 0 3
11602: PPUSH
11603: LD_INT 1
11605: PPUSH
11606: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11610: LD_INT 12
11612: PPUSH
11613: LD_VAR 0 3
11617: PPUSH
11618: LD_INT 1
11620: PPUSH
11621: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11625: LD_INT 13
11627: PPUSH
11628: LD_VAR 0 3
11632: PPUSH
11633: LD_INT 1
11635: PPUSH
11636: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11640: LD_INT 14
11642: PPUSH
11643: LD_VAR 0 3
11647: PPUSH
11648: LD_INT 1
11650: PPUSH
11651: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11655: LD_INT 15
11657: PPUSH
11658: LD_VAR 0 3
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11670: LD_INT 16
11672: PPUSH
11673: LD_VAR 0 3
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11685: LD_INT 17
11687: PPUSH
11688: LD_VAR 0 3
11692: PPUSH
11693: LD_INT 1
11695: PPUSH
11696: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11700: LD_INT 19
11702: PPUSH
11703: LD_VAR 0 3
11707: PPUSH
11708: LD_INT 1
11710: PPUSH
11711: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11715: LD_INT 20
11717: PPUSH
11718: LD_VAR 0 3
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11730: LD_INT 21
11732: PPUSH
11733: LD_VAR 0 3
11737: PPUSH
11738: LD_INT 1
11740: PPUSH
11741: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11745: LD_INT 23
11747: PPUSH
11748: LD_VAR 0 3
11752: PPUSH
11753: LD_INT 1
11755: PPUSH
11756: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11760: LD_INT 26
11762: PPUSH
11763: LD_VAR 0 3
11767: PPUSH
11768: LD_INT 1
11770: PPUSH
11771: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11775: LD_INT 27
11777: PPUSH
11778: LD_VAR 0 3
11782: PPUSH
11783: LD_INT 1
11785: PPUSH
11786: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11790: LD_INT 28
11792: PPUSH
11793: LD_VAR 0 3
11797: PPUSH
11798: LD_INT 1
11800: PPUSH
11801: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11805: LD_INT 29
11807: PPUSH
11808: LD_VAR 0 3
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11820: LD_INT 30
11822: PPUSH
11823: LD_VAR 0 3
11827: PPUSH
11828: LD_INT 1
11830: PPUSH
11831: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11835: LD_INT 31
11837: PPUSH
11838: LD_VAR 0 3
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11850: LD_INT 32
11852: PPUSH
11853: LD_VAR 0 3
11857: PPUSH
11858: LD_INT 1
11860: PPUSH
11861: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11865: LD_INT 36
11867: PPUSH
11868: LD_VAR 0 3
11872: PPUSH
11873: LD_INT 1
11875: PPUSH
11876: CALL_OW 324
// end ; 5 :
11880: GO 14011
11882: LD_INT 5
11884: DOUBLE
11885: EQUAL
11886: IFTRUE 11890
11888: GO 13003
11890: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11891: LD_INT 35
11893: PPUSH
11894: LD_VAR 0 3
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11906: LD_INT 45
11908: PPUSH
11909: LD_VAR 0 3
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11921: LD_INT 46
11923: PPUSH
11924: LD_VAR 0 3
11928: PPUSH
11929: LD_INT 1
11931: PPUSH
11932: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11936: LD_INT 47
11938: PPUSH
11939: LD_VAR 0 3
11943: PPUSH
11944: LD_INT 1
11946: PPUSH
11947: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11951: LD_INT 1
11953: PPUSH
11954: LD_VAR 0 3
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11966: LD_INT 2
11968: PPUSH
11969: LD_VAR 0 3
11973: PPUSH
11974: LD_INT 1
11976: PPUSH
11977: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11981: LD_INT 11
11983: PPUSH
11984: LD_VAR 0 3
11988: PPUSH
11989: LD_INT 1
11991: PPUSH
11992: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11996: LD_INT 20
11998: PPUSH
11999: LD_VAR 0 3
12003: PPUSH
12004: LD_INT 1
12006: PPUSH
12007: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12011: LD_INT 48
12013: PPUSH
12014: LD_VAR 0 3
12018: PPUSH
12019: LD_INT 1
12021: PPUSH
12022: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12026: LD_INT 49
12028: PPUSH
12029: LD_VAR 0 3
12033: PPUSH
12034: LD_INT 1
12036: PPUSH
12037: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12041: LD_INT 69
12043: PPUSH
12044: LD_VAR 0 3
12048: PPUSH
12049: LD_INT 1
12051: PPUSH
12052: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12056: LD_INT 39
12058: PPUSH
12059: LD_VAR 0 3
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12071: LD_INT 34
12073: PPUSH
12074: LD_VAR 0 3
12078: PPUSH
12079: LD_INT 1
12081: PPUSH
12082: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12086: LD_INT 42
12088: PPUSH
12089: LD_VAR 0 3
12093: PPUSH
12094: LD_INT 1
12096: PPUSH
12097: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12101: LD_INT 44
12103: PPUSH
12104: LD_VAR 0 3
12108: PPUSH
12109: LD_INT 1
12111: PPUSH
12112: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12116: LD_INT 41
12118: PPUSH
12119: LD_VAR 0 3
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12131: LD_INT 40
12133: PPUSH
12134: LD_VAR 0 3
12138: PPUSH
12139: LD_INT 1
12141: PPUSH
12142: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12146: LD_INT 43
12148: PPUSH
12149: LD_VAR 0 3
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12161: LD_INT 70
12163: PPUSH
12164: LD_VAR 0 3
12168: PPUSH
12169: LD_INT 1
12171: PPUSH
12172: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12176: LD_INT 51
12178: PPUSH
12179: LD_VAR 0 3
12183: PPUSH
12184: LD_INT 1
12186: PPUSH
12187: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12191: LD_INT 52
12193: PPUSH
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12206: LD_INT 6
12208: PPUSH
12209: LD_VAR 0 3
12213: PPUSH
12214: LD_INT 1
12216: PPUSH
12217: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12221: LD_INT 15
12223: PPUSH
12224: LD_VAR 0 3
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12236: LD_INT 7
12238: PPUSH
12239: LD_VAR 0 3
12243: PPUSH
12244: LD_INT 1
12246: PPUSH
12247: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12251: LD_INT 12
12253: PPUSH
12254: LD_VAR 0 3
12258: PPUSH
12259: LD_INT 1
12261: PPUSH
12262: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12266: LD_INT 17
12268: PPUSH
12269: LD_VAR 0 3
12273: PPUSH
12274: LD_INT 1
12276: PPUSH
12277: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12281: LD_INT 18
12283: PPUSH
12284: LD_VAR 0 3
12288: PPUSH
12289: LD_INT 1
12291: PPUSH
12292: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12296: LD_INT 60
12298: PPUSH
12299: LD_VAR 0 3
12303: PPUSH
12304: LD_INT 1
12306: PPUSH
12307: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12311: LD_INT 32
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: LD_INT 1
12321: PPUSH
12322: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12326: LD_INT 9
12328: PPUSH
12329: LD_VAR 0 3
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12341: LD_INT 57
12343: PPUSH
12344: LD_VAR 0 3
12348: PPUSH
12349: LD_INT 1
12351: PPUSH
12352: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12356: LD_INT 30
12358: PPUSH
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 1
12366: PPUSH
12367: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12371: LD_INT 37
12373: PPUSH
12374: LD_VAR 0 3
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12386: LD_INT 63
12388: PPUSH
12389: LD_VAR 0 3
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12401: LD_INT 3
12403: PPUSH
12404: LD_VAR 0 3
12408: PPUSH
12409: LD_INT 1
12411: PPUSH
12412: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12416: LD_INT 4
12418: PPUSH
12419: LD_VAR 0 3
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12431: LD_INT 5
12433: PPUSH
12434: LD_VAR 0 3
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12446: LD_INT 66
12448: PPUSH
12449: LD_VAR 0 3
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12461: LD_INT 21
12463: PPUSH
12464: LD_VAR 0 3
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12476: LD_INT 22
12478: PPUSH
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12491: LD_INT 19
12493: PPUSH
12494: LD_VAR 0 3
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12506: LD_INT 54
12508: PPUSH
12509: LD_VAR 0 3
12513: PPUSH
12514: LD_INT 1
12516: PPUSH
12517: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12521: LD_INT 55
12523: PPUSH
12524: LD_VAR 0 3
12528: PPUSH
12529: LD_INT 1
12531: PPUSH
12532: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12536: LD_INT 0
12538: PPUSH
12539: LD_VAR 0 3
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12551: LD_INT 1
12553: PPUSH
12554: LD_VAR 0 3
12558: PPUSH
12559: LD_INT 1
12561: PPUSH
12562: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12566: LD_INT 2
12568: PPUSH
12569: LD_VAR 0 3
12573: PPUSH
12574: LD_INT 1
12576: PPUSH
12577: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12581: LD_INT 3
12583: PPUSH
12584: LD_VAR 0 3
12588: PPUSH
12589: LD_INT 1
12591: PPUSH
12592: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12596: LD_INT 4
12598: PPUSH
12599: LD_VAR 0 3
12603: PPUSH
12604: LD_INT 1
12606: PPUSH
12607: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12611: LD_INT 5
12613: PPUSH
12614: LD_VAR 0 3
12618: PPUSH
12619: LD_INT 1
12621: PPUSH
12622: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12626: LD_INT 6
12628: PPUSH
12629: LD_VAR 0 3
12633: PPUSH
12634: LD_INT 1
12636: PPUSH
12637: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12641: LD_INT 7
12643: PPUSH
12644: LD_VAR 0 3
12648: PPUSH
12649: LD_INT 1
12651: PPUSH
12652: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12656: LD_INT 8
12658: PPUSH
12659: LD_VAR 0 3
12663: PPUSH
12664: LD_INT 1
12666: PPUSH
12667: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12671: LD_INT 10
12673: PPUSH
12674: LD_VAR 0 3
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12686: LD_INT 11
12688: PPUSH
12689: LD_VAR 0 3
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12701: LD_INT 12
12703: PPUSH
12704: LD_VAR 0 3
12708: PPUSH
12709: LD_INT 1
12711: PPUSH
12712: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12716: LD_INT 13
12718: PPUSH
12719: LD_VAR 0 3
12723: PPUSH
12724: LD_INT 1
12726: PPUSH
12727: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12731: LD_INT 14
12733: PPUSH
12734: LD_VAR 0 3
12738: PPUSH
12739: LD_INT 1
12741: PPUSH
12742: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12746: LD_INT 15
12748: PPUSH
12749: LD_VAR 0 3
12753: PPUSH
12754: LD_INT 1
12756: PPUSH
12757: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12761: LD_INT 16
12763: PPUSH
12764: LD_VAR 0 3
12768: PPUSH
12769: LD_INT 1
12771: PPUSH
12772: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12776: LD_INT 17
12778: PPUSH
12779: LD_VAR 0 3
12783: PPUSH
12784: LD_INT 1
12786: PPUSH
12787: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12791: LD_INT 18
12793: PPUSH
12794: LD_VAR 0 3
12798: PPUSH
12799: LD_INT 1
12801: PPUSH
12802: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12806: LD_INT 19
12808: PPUSH
12809: LD_VAR 0 3
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12821: LD_INT 20
12823: PPUSH
12824: LD_VAR 0 3
12828: PPUSH
12829: LD_INT 1
12831: PPUSH
12832: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12836: LD_INT 21
12838: PPUSH
12839: LD_VAR 0 3
12843: PPUSH
12844: LD_INT 1
12846: PPUSH
12847: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12851: LD_INT 23
12853: PPUSH
12854: LD_VAR 0 3
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12866: LD_INT 26
12868: PPUSH
12869: LD_VAR 0 3
12873: PPUSH
12874: LD_INT 1
12876: PPUSH
12877: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12881: LD_INT 27
12883: PPUSH
12884: LD_VAR 0 3
12888: PPUSH
12889: LD_INT 1
12891: PPUSH
12892: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12896: LD_INT 28
12898: PPUSH
12899: LD_VAR 0 3
12903: PPUSH
12904: LD_INT 1
12906: PPUSH
12907: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12911: LD_INT 29
12913: PPUSH
12914: LD_VAR 0 3
12918: PPUSH
12919: LD_INT 1
12921: PPUSH
12922: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12926: LD_INT 30
12928: PPUSH
12929: LD_VAR 0 3
12933: PPUSH
12934: LD_INT 1
12936: PPUSH
12937: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12941: LD_INT 31
12943: PPUSH
12944: LD_VAR 0 3
12948: PPUSH
12949: LD_INT 1
12951: PPUSH
12952: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12956: LD_INT 32
12958: PPUSH
12959: LD_VAR 0 3
12963: PPUSH
12964: LD_INT 1
12966: PPUSH
12967: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12971: LD_INT 33
12973: PPUSH
12974: LD_VAR 0 3
12978: PPUSH
12979: LD_INT 1
12981: PPUSH
12982: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12986: LD_INT 36
12988: PPUSH
12989: LD_VAR 0 3
12993: PPUSH
12994: LD_INT 1
12996: PPUSH
12997: CALL_OW 324
// end ; 6 :
13001: GO 14011
13003: LD_INT 6
13005: DOUBLE
13006: EQUAL
13007: IFTRUE 13011
13009: GO 13936
13011: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13012: LD_INT 35
13014: PPUSH
13015: LD_VAR 0 3
13019: PPUSH
13020: LD_INT 1
13022: PPUSH
13023: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13027: LD_INT 45
13029: PPUSH
13030: LD_VAR 0 3
13034: PPUSH
13035: LD_INT 1
13037: PPUSH
13038: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13042: LD_INT 46
13044: PPUSH
13045: LD_VAR 0 3
13049: PPUSH
13050: LD_INT 1
13052: PPUSH
13053: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13057: LD_INT 47
13059: PPUSH
13060: LD_VAR 0 3
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13072: LD_INT 1
13074: PPUSH
13075: LD_VAR 0 3
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13087: LD_INT 2
13089: PPUSH
13090: LD_VAR 0 3
13094: PPUSH
13095: LD_INT 1
13097: PPUSH
13098: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13102: LD_INT 11
13104: PPUSH
13105: LD_VAR 0 3
13109: PPUSH
13110: LD_INT 1
13112: PPUSH
13113: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13117: LD_INT 20
13119: PPUSH
13120: LD_VAR 0 3
13124: PPUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13132: LD_INT 48
13134: PPUSH
13135: LD_VAR 0 3
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13147: LD_INT 49
13149: PPUSH
13150: LD_VAR 0 3
13154: PPUSH
13155: LD_INT 1
13157: PPUSH
13158: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13162: LD_INT 50
13164: PPUSH
13165: LD_VAR 0 3
13169: PPUSH
13170: LD_INT 1
13172: PPUSH
13173: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13177: LD_INT 69
13179: PPUSH
13180: LD_VAR 0 3
13184: PPUSH
13185: LD_INT 1
13187: PPUSH
13188: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13192: LD_INT 39
13194: PPUSH
13195: LD_VAR 0 3
13199: PPUSH
13200: LD_INT 1
13202: PPUSH
13203: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13207: LD_INT 34
13209: PPUSH
13210: LD_VAR 0 3
13214: PPUSH
13215: LD_INT 1
13217: PPUSH
13218: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13222: LD_INT 42
13224: PPUSH
13225: LD_VAR 0 3
13229: PPUSH
13230: LD_INT 1
13232: PPUSH
13233: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13237: LD_INT 44
13239: PPUSH
13240: LD_VAR 0 3
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13252: LD_INT 41
13254: PPUSH
13255: LD_VAR 0 3
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13267: LD_INT 13
13269: PPUSH
13270: LD_VAR 0 3
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13282: LD_INT 40
13284: PPUSH
13285: LD_VAR 0 3
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13297: LD_INT 43
13299: PPUSH
13300: LD_VAR 0 3
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13312: LD_INT 70
13314: PPUSH
13315: LD_VAR 0 3
13319: PPUSH
13320: LD_INT 1
13322: PPUSH
13323: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13327: LD_INT 23
13329: PPUSH
13330: LD_VAR 0 3
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13342: LD_INT 51
13344: PPUSH
13345: LD_VAR 0 3
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13357: LD_INT 52
13359: PPUSH
13360: LD_VAR 0 3
13364: PPUSH
13365: LD_INT 1
13367: PPUSH
13368: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13372: LD_INT 6
13374: PPUSH
13375: LD_VAR 0 3
13379: PPUSH
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13387: LD_INT 15
13389: PPUSH
13390: LD_VAR 0 3
13394: PPUSH
13395: LD_INT 1
13397: PPUSH
13398: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13402: LD_INT 7
13404: PPUSH
13405: LD_VAR 0 3
13409: PPUSH
13410: LD_INT 1
13412: PPUSH
13413: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13417: LD_INT 12
13419: PPUSH
13420: LD_VAR 0 3
13424: PPUSH
13425: LD_INT 1
13427: PPUSH
13428: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13432: LD_INT 10
13434: PPUSH
13435: LD_VAR 0 3
13439: PPUSH
13440: LD_INT 1
13442: PPUSH
13443: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13447: LD_INT 17
13449: PPUSH
13450: LD_VAR 0 3
13454: PPUSH
13455: LD_INT 1
13457: PPUSH
13458: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13462: LD_INT 18
13464: PPUSH
13465: LD_VAR 0 3
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13477: LD_INT 60
13479: PPUSH
13480: LD_VAR 0 3
13484: PPUSH
13485: LD_INT 1
13487: PPUSH
13488: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13492: LD_INT 61
13494: PPUSH
13495: LD_VAR 0 3
13499: PPUSH
13500: LD_INT 1
13502: PPUSH
13503: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13507: LD_INT 32
13509: PPUSH
13510: LD_VAR 0 3
13514: PPUSH
13515: LD_INT 1
13517: PPUSH
13518: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13522: LD_INT 27
13524: PPUSH
13525: LD_VAR 0 3
13529: PPUSH
13530: LD_INT 1
13532: PPUSH
13533: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13537: LD_INT 36
13539: PPUSH
13540: LD_VAR 0 3
13544: PPUSH
13545: LD_INT 1
13547: PPUSH
13548: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13552: LD_INT 33
13554: PPUSH
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 1
13562: PPUSH
13563: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13567: LD_INT 9
13569: PPUSH
13570: LD_VAR 0 3
13574: PPUSH
13575: LD_INT 1
13577: PPUSH
13578: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13582: LD_INT 38
13584: PPUSH
13585: LD_VAR 0 3
13589: PPUSH
13590: LD_INT 1
13592: PPUSH
13593: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13597: LD_INT 57
13599: PPUSH
13600: LD_VAR 0 3
13604: PPUSH
13605: LD_INT 1
13607: PPUSH
13608: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13612: LD_INT 58
13614: PPUSH
13615: LD_VAR 0 3
13619: PPUSH
13620: LD_INT 1
13622: PPUSH
13623: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13627: LD_INT 28
13629: PPUSH
13630: LD_VAR 0 3
13634: PPUSH
13635: LD_INT 1
13637: PPUSH
13638: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13642: LD_INT 29
13644: PPUSH
13645: LD_VAR 0 3
13649: PPUSH
13650: LD_INT 1
13652: PPUSH
13653: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13657: LD_INT 30
13659: PPUSH
13660: LD_VAR 0 3
13664: PPUSH
13665: LD_INT 1
13667: PPUSH
13668: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13672: LD_INT 37
13674: PPUSH
13675: LD_VAR 0 3
13679: PPUSH
13680: LD_INT 1
13682: PPUSH
13683: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13687: LD_INT 63
13689: PPUSH
13690: LD_VAR 0 3
13694: PPUSH
13695: LD_INT 1
13697: PPUSH
13698: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13702: LD_INT 64
13704: PPUSH
13705: LD_VAR 0 3
13709: PPUSH
13710: LD_INT 1
13712: PPUSH
13713: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13717: LD_INT 3
13719: PPUSH
13720: LD_VAR 0 3
13724: PPUSH
13725: LD_INT 1
13727: PPUSH
13728: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13732: LD_INT 4
13734: PPUSH
13735: LD_VAR 0 3
13739: PPUSH
13740: LD_INT 1
13742: PPUSH
13743: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13747: LD_INT 5
13749: PPUSH
13750: LD_VAR 0 3
13754: PPUSH
13755: LD_INT 1
13757: PPUSH
13758: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13762: LD_INT 8
13764: PPUSH
13765: LD_VAR 0 3
13769: PPUSH
13770: LD_INT 1
13772: PPUSH
13773: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13777: LD_INT 66
13779: PPUSH
13780: LD_VAR 0 3
13784: PPUSH
13785: LD_INT 1
13787: PPUSH
13788: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13792: LD_INT 67
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: LD_INT 1
13802: PPUSH
13803: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13807: LD_INT 21
13809: PPUSH
13810: LD_VAR 0 3
13814: PPUSH
13815: LD_INT 1
13817: PPUSH
13818: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13822: LD_INT 22
13824: PPUSH
13825: LD_VAR 0 3
13829: PPUSH
13830: LD_INT 1
13832: PPUSH
13833: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13837: LD_INT 19
13839: PPUSH
13840: LD_VAR 0 3
13844: PPUSH
13845: LD_INT 1
13847: PPUSH
13848: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13852: LD_INT 26
13854: PPUSH
13855: LD_VAR 0 3
13859: PPUSH
13860: LD_INT 1
13862: PPUSH
13863: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13867: LD_INT 54
13869: PPUSH
13870: LD_VAR 0 3
13874: PPUSH
13875: LD_INT 1
13877: PPUSH
13878: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13882: LD_INT 55
13884: PPUSH
13885: LD_VAR 0 3
13889: PPUSH
13890: LD_INT 1
13892: PPUSH
13893: CALL_OW 322
// for i = 0 to 39 do
13897: LD_ADDR_VAR 0 4
13901: PUSH
13902: DOUBLE
13903: LD_INT 0
13905: DEC
13906: ST_TO_ADDR
13907: LD_INT 39
13909: PUSH
13910: FOR_TO
13911: IFFALSE 13932
// SetRestrict ( i , side , true ) ;
13913: LD_VAR 0 4
13917: PPUSH
13918: LD_VAR 0 3
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: CALL_OW 324
13930: GO 13910
13932: POP
13933: POP
// end ; else
13934: GO 14011
13936: POP
// begin for i = 1 to 73 do
13937: LD_ADDR_VAR 0 4
13941: PUSH
13942: DOUBLE
13943: LD_INT 1
13945: DEC
13946: ST_TO_ADDR
13947: LD_INT 73
13949: PUSH
13950: FOR_TO
13951: IFFALSE 13972
// SetTech ( i , side , state_enabled ) ;
13953: LD_VAR 0 4
13957: PPUSH
13958: LD_VAR 0 3
13962: PPUSH
13963: LD_INT 1
13965: PPUSH
13966: CALL_OW 322
13970: GO 13950
13972: POP
13973: POP
// for i = 0 to 39 do
13974: LD_ADDR_VAR 0 4
13978: PUSH
13979: DOUBLE
13980: LD_INT 0
13982: DEC
13983: ST_TO_ADDR
13984: LD_INT 39
13986: PUSH
13987: FOR_TO
13988: IFFALSE 14009
// SetRestrict ( i , side , true ) ;
13990: LD_VAR 0 4
13994: PPUSH
13995: LD_VAR 0 3
13999: PPUSH
14000: LD_INT 1
14002: PPUSH
14003: CALL_OW 324
14007: GO 13987
14009: POP
14010: POP
// end ; end ; end ;
14011: GO 10016
14013: POP
14014: POP
// end ; end_of_file
14015: LD_VAR 0 2
14019: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
14020: LD_INT 0
14022: PPUSH
14023: PPUSH
14024: PPUSH
14025: PPUSH
14026: PPUSH
14027: PPUSH
14028: PPUSH
14029: PPUSH
14030: PPUSH
// for i := 1 to 8 do
14031: LD_ADDR_VAR 0 2
14035: PUSH
14036: DOUBLE
14037: LD_INT 1
14039: DEC
14040: ST_TO_ADDR
14041: LD_INT 8
14043: PUSH
14044: FOR_TO
14045: IFFALSE 14429
// begin if Side_Positions [ i ] then
14047: LD_EXP 36
14051: PUSH
14052: LD_VAR 0 2
14056: ARRAY
14057: IFFALSE 14427
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
14059: LD_ADDR_VAR 0 7
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_VAR 0 2
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 21
14078: PUSH
14079: LD_INT 1
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PPUSH
14090: CALL_OW 69
14094: PUSH
14095: LD_INT 0
14097: PLUS
14098: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14099: LD_ADDR_VAR 0 9
14103: PUSH
14104: LD_INT 22
14106: PUSH
14107: LD_VAR 0 2
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 2
14118: PUSH
14119: LD_INT 30
14121: PUSH
14122: LD_INT 0
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 30
14131: PUSH
14132: LD_INT 1
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: LIST
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PPUSH
14148: CALL_OW 69
14152: ST_TO_ADDR
// crates := 0 ;
14153: LD_ADDR_VAR 0 4
14157: PUSH
14158: LD_INT 0
14160: ST_TO_ADDR
// oil := 0 ;
14161: LD_ADDR_VAR 0 5
14165: PUSH
14166: LD_INT 0
14168: ST_TO_ADDR
// sib := 0 ;
14169: LD_ADDR_VAR 0 6
14173: PUSH
14174: LD_INT 0
14176: ST_TO_ADDR
// if bases then
14177: LD_VAR 0 9
14181: IFFALSE 14287
// begin for j in bases do
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: LD_VAR 0 9
14192: PUSH
14193: FOR_IN
14194: IFFALSE 14285
// begin base := GetBase ( j ) ;
14196: LD_ADDR_VAR 0 8
14200: PUSH
14201: LD_VAR 0 3
14205: PPUSH
14206: CALL_OW 274
14210: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14211: LD_ADDR_VAR 0 4
14215: PUSH
14216: LD_VAR 0 4
14220: PUSH
14221: LD_VAR 0 8
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: CALL_OW 275
14233: PLUS
14234: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14235: LD_ADDR_VAR 0 5
14239: PUSH
14240: LD_VAR 0 5
14244: PUSH
14245: LD_VAR 0 8
14249: PPUSH
14250: LD_INT 2
14252: PPUSH
14253: CALL_OW 275
14257: PLUS
14258: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14259: LD_ADDR_VAR 0 6
14263: PUSH
14264: LD_VAR 0 6
14268: PUSH
14269: LD_VAR 0 8
14273: PPUSH
14274: LD_INT 3
14276: PPUSH
14277: CALL_OW 275
14281: PLUS
14282: ST_TO_ADDR
// end ;
14283: GO 14193
14285: POP
14286: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14287: LD_STRING setSpecText(
14289: PUSH
14290: LD_VAR 0 2
14294: STR
14295: PUSH
14296: LD_STRING ,
14298: STR
14299: PUSH
14300: LD_INT 2
14302: STR
14303: PUSH
14304: LD_STRING ,
14306: STR
14307: PUSH
14308: LD_VAR 0 4
14312: STR
14313: PUSH
14314: LD_STRING )
14316: STR
14317: PPUSH
14318: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14322: LD_STRING setSpecText(
14324: PUSH
14325: LD_VAR 0 2
14329: STR
14330: PUSH
14331: LD_STRING ,
14333: STR
14334: PUSH
14335: LD_INT 3
14337: STR
14338: PUSH
14339: LD_STRING ,
14341: STR
14342: PUSH
14343: LD_VAR 0 5
14347: STR
14348: PUSH
14349: LD_STRING )
14351: STR
14352: PPUSH
14353: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14357: LD_STRING setSpecText(
14359: PUSH
14360: LD_VAR 0 2
14364: STR
14365: PUSH
14366: LD_STRING ,
14368: STR
14369: PUSH
14370: LD_INT 4
14372: STR
14373: PUSH
14374: LD_STRING ,
14376: STR
14377: PUSH
14378: LD_VAR 0 6
14382: STR
14383: PUSH
14384: LD_STRING )
14386: STR
14387: PPUSH
14388: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14392: LD_STRING setSpecText(
14394: PUSH
14395: LD_VAR 0 2
14399: STR
14400: PUSH
14401: LD_STRING ,
14403: STR
14404: PUSH
14405: LD_INT 5
14407: STR
14408: PUSH
14409: LD_STRING ,
14411: STR
14412: PUSH
14413: LD_VAR 0 7
14417: STR
14418: PUSH
14419: LD_STRING )
14421: STR
14422: PPUSH
14423: CALL_OW 559
// end ; end ;
14427: GO 14044
14429: POP
14430: POP
// end ;
14431: LD_VAR 0 1
14435: RET
// every 0 0$1 do
14436: GO 14438
14438: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14439: LD_STRING setSpecLogoNumber(
14441: PUSH
14442: LD_INT 2
14444: STR
14445: PUSH
14446: LD_STRING ,
14448: STR
14449: PUSH
14450: LD_INT 1
14452: STR
14453: PUSH
14454: LD_STRING )
14456: STR
14457: PPUSH
14458: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14462: LD_STRING setSpecLogoNumber(
14464: PUSH
14465: LD_INT 3
14467: STR
14468: PUSH
14469: LD_STRING ,
14471: STR
14472: PUSH
14473: LD_INT 2
14475: STR
14476: PUSH
14477: LD_STRING )
14479: STR
14480: PPUSH
14481: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14485: LD_STRING setSpecLogoNumber(
14487: PUSH
14488: LD_INT 4
14490: STR
14491: PUSH
14492: LD_STRING ,
14494: STR
14495: PUSH
14496: LD_INT 3
14498: STR
14499: PUSH
14500: LD_STRING )
14502: STR
14503: PPUSH
14504: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14508: LD_STRING setSpecLogoNumber(
14510: PUSH
14511: LD_INT 5
14513: STR
14514: PUSH
14515: LD_STRING ,
14517: STR
14518: PUSH
14519: LD_INT 4
14521: STR
14522: PUSH
14523: LD_STRING )
14525: STR
14526: PPUSH
14527: CALL_OW 559
// end ;
14531: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14532: LD_INT 2
14534: PUSH
14535: LD_INT 30
14537: PUSH
14538: LD_INT 0
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: LD_INT 30
14547: PUSH
14548: LD_INT 1
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: LIST
14559: PPUSH
14560: CALL_OW 69
14564: IFFALSE 14574
14566: GO 14568
14568: DISABLE
// begin enable ;
14569: ENABLE
// UpdateSpectatorBar ;
14570: CALL 14020 0 0
// end ; end_of_file
14574: END
// var respawn , inqueue ; export function init_respawning ; begin
14575: LD_INT 0
14577: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14578: LD_ADDR_LOC 18
14582: PUSH
14583: LD_INT 1
14585: PPUSH
14586: LD_INT 8
14588: PPUSH
14589: CALL_OW 12
14593: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14594: LD_ADDR_LOC 19
14598: PUSH
14599: LD_INT 0
14601: PUSH
14602: LD_INT 0
14604: PUSH
14605: LD_INT 0
14607: PUSH
14608: LD_INT 0
14610: PUSH
14611: LD_INT 0
14613: PUSH
14614: LD_INT 0
14616: PUSH
14617: LD_INT 0
14619: PUSH
14620: LD_INT 0
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: ST_TO_ADDR
// end ;
14633: LD_VAR 0 1
14637: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14638: GO 14640
14640: DISABLE
14641: LD_INT 0
14643: PPUSH
14644: PPUSH
14645: PPUSH
// begin if respawning_time_max = 0 then
14646: LD_EXP 30
14650: PUSH
14651: LD_INT 0
14653: EQUAL
14654: IFFALSE 14658
// exit ;
14656: GO 15066
// if respawn = 8 then
14658: LD_LOC 18
14662: PUSH
14663: LD_INT 8
14665: EQUAL
14666: IFFALSE 14678
// respawn := 1 else
14668: LD_ADDR_LOC 18
14672: PUSH
14673: LD_INT 1
14675: ST_TO_ADDR
14676: GO 14692
// respawn := respawn + 1 ;
14678: LD_ADDR_LOC 18
14682: PUSH
14683: LD_LOC 18
14687: PUSH
14688: LD_INT 1
14690: PLUS
14691: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14692: LD_EXP 36
14696: PUSH
14697: LD_LOC 18
14701: ARRAY
14702: PUSH
14703: LD_LOC 19
14707: PUSH
14708: LD_LOC 18
14712: ARRAY
14713: NOT
14714: AND
14715: IFFALSE 15065
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14717: LD_ADDR_VAR 0 1
14721: PUSH
14722: LD_INT 21
14724: PUSH
14725: LD_INT 1
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 22
14734: PUSH
14735: LD_LOC 18
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 3
14746: PUSH
14747: LD_INT 23
14749: PUSH
14750: LD_INT 0
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: PPUSH
14763: CALL_OW 69
14767: ST_TO_ADDR
// if n < number_of_people then
14768: LD_VAR 0 1
14772: PUSH
14773: LD_EXP 21
14777: LESS
14778: IFFALSE 15062
// begin aktresp := respawn ;
14780: LD_ADDR_VAR 0 3
14784: PUSH
14785: LD_LOC 18
14789: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14790: LD_ADDR_LOC 19
14794: PUSH
14795: LD_LOC 19
14799: PPUSH
14800: LD_VAR 0 3
14804: PPUSH
14805: LD_INT 1
14807: PPUSH
14808: CALL_OW 1
14812: ST_TO_ADDR
// enable ;
14813: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14814: LD_EXP 29
14818: PPUSH
14819: LD_EXP 30
14823: PPUSH
14824: CALL_OW 12
14828: PPUSH
14829: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14833: LD_ADDR_LOC 19
14837: PUSH
14838: LD_LOC 19
14842: PPUSH
14843: LD_VAR 0 3
14847: PPUSH
14848: LD_INT 0
14850: PPUSH
14851: CALL_OW 1
14855: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14856: LD_ADDR_VAR 0 2
14860: PUSH
14861: LD_INT 21
14863: PUSH
14864: LD_INT 3
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 2
14873: PUSH
14874: LD_INT 30
14876: PUSH
14877: LD_INT 0
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: LD_INT 30
14886: PUSH
14887: LD_INT 1
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 50
14901: PUSH
14902: EMPTY
14903: LIST
14904: PUSH
14905: LD_INT 22
14907: PUSH
14908: LD_VAR 0 3
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: PPUSH
14923: CALL_OW 69
14927: ST_TO_ADDR
// if dep = 0 then
14928: LD_VAR 0 2
14932: PUSH
14933: LD_INT 0
14935: EQUAL
14936: IFFALSE 14940
// exit ;
14938: GO 15066
// hc_name :=  ;
14940: LD_ADDR_OWVAR 26
14944: PUSH
14945: LD_STRING 
14947: ST_TO_ADDR
// hc_importance := 0 ;
14948: LD_ADDR_OWVAR 32
14952: PUSH
14953: LD_INT 0
14955: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14956: LD_INT 0
14958: PPUSH
14959: LD_INT 0
14961: PPUSH
14962: LD_EXP 22
14966: PUSH
14967: LD_INT 2
14969: DIV
14970: PPUSH
14971: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14975: LD_ADDR_OWVAR 21
14979: PUSH
14980: LD_EXP 37
14984: PUSH
14985: LD_VAR 0 3
14989: ARRAY
14990: ST_TO_ADDR
// uc_side := aktresp ;
14991: LD_ADDR_OWVAR 20
14995: PUSH
14996: LD_VAR 0 3
15000: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
15001: LD_ADDR_VAR 0 2
15005: PUSH
15006: LD_VAR 0 2
15010: PUSH
15011: LD_INT 1
15013: PPUSH
15014: LD_VAR 0 2
15018: PPUSH
15019: CALL_OW 12
15023: ARRAY
15024: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
15025: CALL_OW 44
15029: PPUSH
15030: LD_VAR 0 2
15034: PPUSH
15035: CALL_OW 250
15039: PPUSH
15040: LD_VAR 0 2
15044: PPUSH
15045: CALL_OW 251
15049: PPUSH
15050: LD_INT 7
15052: PPUSH
15053: LD_INT 1
15055: PPUSH
15056: CALL_OW 50
// end else
15060: GO 15063
// enable ;
15062: ENABLE
// end else
15063: GO 15066
// enable ;
15065: ENABLE
// end ; end_of_file
15066: PPOPN 3
15068: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
15069: LD_INT 0
15071: PPUSH
15072: PPUSH
15073: PPUSH
// BuildUpTime_Delay = 0 ;
15074: LD_ADDR_EXP 61
15078: PUSH
15079: LD_INT 0
15081: ST_TO_ADDR
// if not def_builduptime then
15082: LD_EXP 14
15086: NOT
15087: IFFALSE 15091
// exit ;
15089: GO 15274
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
15091: LD_ADDR_EXP 61
15095: PUSH
15096: LD_INT 8400
15098: PUSH
15099: LD_INT 2100
15101: PUSH
15102: LD_EXP 14
15106: MUL
15107: PLUS
15108: ST_TO_ADDR
// BuildUpTimeActive := true ;
15109: LD_ADDR_EXP 60
15113: PUSH
15114: LD_INT 1
15116: ST_TO_ADDR
// for i := 1 to 8 do
15117: LD_ADDR_VAR 0 2
15121: PUSH
15122: DOUBLE
15123: LD_INT 1
15125: DEC
15126: ST_TO_ADDR
15127: LD_INT 8
15129: PUSH
15130: FOR_TO
15131: IFFALSE 15272
// if Side_Positions [ i ] then
15133: LD_EXP 36
15137: PUSH
15138: LD_VAR 0 2
15142: ARRAY
15143: IFFALSE 15270
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
15145: LD_EXP 59
15149: PUSH
15150: LD_EXP 36
15154: PUSH
15155: LD_VAR 0 2
15159: ARRAY
15160: ARRAY
15161: PPUSH
15162: LD_INT 5
15164: PPUSH
15165: CALL_OW 424
// for j := 1 to 8 do
15169: LD_ADDR_VAR 0 3
15173: PUSH
15174: DOUBLE
15175: LD_INT 1
15177: DEC
15178: ST_TO_ADDR
15179: LD_INT 8
15181: PUSH
15182: FOR_TO
15183: IFFALSE 15268
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15185: LD_EXP 36
15189: PUSH
15190: LD_VAR 0 3
15194: ARRAY
15195: PUSH
15196: LD_EXP 33
15200: PUSH
15201: LD_VAR 0 2
15205: ARRAY
15206: PUSH
15207: LD_EXP 33
15211: PUSH
15212: LD_VAR 0 3
15216: ARRAY
15217: NONEQUAL
15218: PUSH
15219: LD_EXP 38
15223: NOT
15224: PUSH
15225: LD_VAR 0 2
15229: PUSH
15230: LD_VAR 0 3
15234: NONEQUAL
15235: AND
15236: OR
15237: AND
15238: IFFALSE 15266
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15240: LD_VAR 0 3
15244: PPUSH
15245: LD_EXP 59
15249: PUSH
15250: LD_EXP 36
15254: PUSH
15255: LD_VAR 0 2
15259: ARRAY
15260: ARRAY
15261: PPUSH
15262: CALL_OW 333
15266: GO 15182
15268: POP
15269: POP
// end ;
15270: GO 15130
15272: POP
15273: POP
// end ;
15274: LD_VAR 0 1
15278: RET
// export function EndBuildUp ; var i , j ; begin
15279: LD_INT 0
15281: PPUSH
15282: PPUSH
15283: PPUSH
// BuildUpTimeActive := false ;
15284: LD_ADDR_EXP 60
15288: PUSH
15289: LD_INT 0
15291: ST_TO_ADDR
// for i := 1 to 8 do
15292: LD_ADDR_VAR 0 2
15296: PUSH
15297: DOUBLE
15298: LD_INT 1
15300: DEC
15301: ST_TO_ADDR
15302: LD_INT 8
15304: PUSH
15305: FOR_TO
15306: IFFALSE 15447
// if Side_Positions [ i ] then
15308: LD_EXP 36
15312: PUSH
15313: LD_VAR 0 2
15317: ARRAY
15318: IFFALSE 15445
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
15320: LD_EXP 59
15324: PUSH
15325: LD_EXP 36
15329: PUSH
15330: LD_VAR 0 2
15334: ARRAY
15335: ARRAY
15336: PPUSH
15337: LD_INT 0
15339: PPUSH
15340: CALL_OW 424
// for j := 1 to 8 do
15344: LD_ADDR_VAR 0 3
15348: PUSH
15349: DOUBLE
15350: LD_INT 1
15352: DEC
15353: ST_TO_ADDR
15354: LD_INT 8
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15443
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15360: LD_EXP 36
15364: PUSH
15365: LD_VAR 0 3
15369: ARRAY
15370: PUSH
15371: LD_EXP 33
15375: PUSH
15376: LD_VAR 0 2
15380: ARRAY
15381: PUSH
15382: LD_EXP 33
15386: PUSH
15387: LD_VAR 0 3
15391: ARRAY
15392: NONEQUAL
15393: PUSH
15394: LD_EXP 38
15398: NOT
15399: PUSH
15400: LD_VAR 0 2
15404: PUSH
15405: LD_VAR 0 3
15409: NONEQUAL
15410: AND
15411: OR
15412: AND
15413: IFFALSE 15441
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15415: LD_VAR 0 3
15419: PPUSH
15420: LD_EXP 59
15424: PUSH
15425: LD_EXP 36
15429: PUSH
15430: LD_VAR 0 2
15434: ARRAY
15435: ARRAY
15436: PPUSH
15437: CALL_OW 334
15441: GO 15357
15443: POP
15444: POP
// end ;
15445: GO 15305
15447: POP
15448: POP
// end ;
15449: LD_VAR 0 1
15453: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
15454: LD_EXP 60
15458: IFFALSE 15633
15460: GO 15462
15462: DISABLE
15463: LD_INT 0
15465: PPUSH
15466: PPUSH
// begin for i := 1 to 8 do
15467: LD_ADDR_VAR 0 1
15471: PUSH
15472: DOUBLE
15473: LD_INT 1
15475: DEC
15476: ST_TO_ADDR
15477: LD_INT 8
15479: PUSH
15480: FOR_TO
15481: IFFALSE 15630
// if Side_Positions [ i ] then
15483: LD_EXP 36
15487: PUSH
15488: LD_VAR 0 1
15492: ARRAY
15493: IFFALSE 15628
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
15495: LD_ADDR_VAR 0 2
15499: PUSH
15500: LD_EXP 59
15504: PUSH
15505: LD_EXP 36
15509: PUSH
15510: LD_VAR 0 1
15514: ARRAY
15515: ARRAY
15516: PPUSH
15517: LD_INT 2
15519: PUSH
15520: LD_INT 21
15522: PUSH
15523: LD_INT 1
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: LD_INT 21
15532: PUSH
15533: LD_INT 2
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 22
15547: PUSH
15548: LD_OWVAR 2
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PPUSH
15561: CALL_OW 70
15565: PUSH
15566: FOR_IN
15567: IFFALSE 15626
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
15569: LD_EXP 33
15573: PUSH
15574: LD_VAR 0 1
15578: ARRAY
15579: PUSH
15580: LD_EXP 33
15584: PUSH
15585: LD_OWVAR 2
15589: ARRAY
15590: NONEQUAL
15591: PUSH
15592: LD_EXP 38
15596: NOT
15597: PUSH
15598: LD_VAR 0 1
15602: PUSH
15603: LD_OWVAR 2
15607: NONEQUAL
15608: AND
15609: OR
15610: IFFALSE 15624
// ComMoveToArea ( un , BuildUpEscape ) ;
15612: LD_VAR 0 2
15616: PPUSH
15617: LD_INT 17
15619: PPUSH
15620: CALL_OW 113
15624: GO 15566
15626: POP
15627: POP
15628: GO 15480
15630: POP
15631: POP
// enable ;
15632: ENABLE
// end ;
15633: PPOPN 2
15635: END
// every 0 0$1 trigger def_builduptime do
15636: LD_EXP 14
15640: IFFALSE 15666
15642: GO 15644
15644: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15645: LD_INT 8400
15647: PUSH
15648: LD_EXP 14
15652: PUSH
15653: LD_INT 2100
15655: MUL
15656: PLUS
15657: PPUSH
15658: CALL_OW 67
// EndBuildUp ;
15662: CALL 15279 0 0
// end ;
15666: END
