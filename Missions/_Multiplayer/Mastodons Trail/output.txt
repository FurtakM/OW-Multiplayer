// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime , def_Sheik , def_Mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , Sheik , Mastodont ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 18
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 36
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 33
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 37
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 35
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 34
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 18
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 2 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 2
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 36
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 33
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 37
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 35
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 34
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 38
 372: PUSH
 373: LD_EXP 33
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 626
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_Sheik = GetMultiplayerSetting ( 21 ) ;
 577: LD_ADDR_EXP 15
 581: PUSH
 582: LD_INT 21
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 590: LD_ADDR_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 603: LD_ADDR_EXP 16
 607: PUSH
 608: LD_INT 23
 610: PPUSH
 611: CALL_OW 426
 615: ST_TO_ADDR
// def_win_rules = 0 ;
 616: LD_ADDR_EXP 32
 620: PUSH
 621: LD_INT 0
 623: ST_TO_ADDR
// end else
 624: GO 774
// begin Randomize ;
 626: CALL_OW 10
// def_base_level := 2 ;
 630: LD_ADDR_EXP 1
 634: PUSH
 635: LD_INT 2
 637: ST_TO_ADDR
// def_amount_of_people := 2 ;
 638: LD_ADDR_EXP 2
 642: PUSH
 643: LD_INT 2
 645: ST_TO_ADDR
// def_skill_level := 1 ;
 646: LD_ADDR_EXP 3
 650: PUSH
 651: LD_INT 1
 653: ST_TO_ADDR
// def_starting_resources := 2 ;
 654: LD_ADDR_EXP 4
 658: PUSH
 659: LD_INT 2
 661: ST_TO_ADDR
// def_shipments_density := 50 ;
 662: LD_ADDR_EXP 5
 666: PUSH
 667: LD_INT 50
 669: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 670: LD_ADDR_EXP 6
 674: PUSH
 675: LD_INT 1
 677: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 678: LD_ADDR_EXP 7
 682: PUSH
 683: LD_INT 2
 685: ST_TO_ADDR
// def_shared_vision := 1 ;
 686: LD_ADDR_EXP 8
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// def_morale_flags := 1 ;
 694: LD_ADDR_EXP 9
 698: PUSH
 699: LD_INT 1
 701: ST_TO_ADDR
// def_siberite_detection := 1 ;
 702: LD_ADDR_EXP 10
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// def_people_respawning := 2 ;
 710: LD_ADDR_EXP 11
 714: PUSH
 715: LD_INT 2
 717: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 718: LD_ADDR_EXP 12
 722: PUSH
 723: LD_INT 3
 725: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 726: LD_ADDR_EXP 13
 730: PUSH
 731: LD_INT 2
 733: ST_TO_ADDR
// def_builduptime := 1 ;
 734: LD_ADDR_EXP 14
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_Sheik = 2 ;
 742: LD_ADDR_EXP 15
 746: PUSH
 747: LD_INT 2
 749: ST_TO_ADDR
// tech_level = 4 ;
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: LD_INT 4
 757: ST_TO_ADDR
// def_mastodont := 0 ;
 758: LD_ADDR_EXP 16
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_win_rules = 0 ;
 766: LD_ADDR_EXP 32
 770: PUSH
 771: LD_INT 0
 773: ST_TO_ADDR
// end ; if isSGUI then
 774: LD_OWVAR 83
 778: IFFALSE 786
// setMpTechs ( ) else
 780: CALL 9824 0 0
 784: GO 799
// SetMpTechLevel ( tech_level + 1 ) ;
 786: LD_VAR 0 3
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: PPUSH
 795: CALL 9971 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 799: LD_ADDR_EXP 19
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 1
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_EXP 1
 822: PUSH
 823: LD_INT 1
 825: PLUS
 826: ARRAY
 827: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 828: LD_ADDR_EXP 20
 832: PUSH
 833: LD_INT 0
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 3
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_EXP 1
 851: PUSH
 852: LD_INT 1
 854: PLUS
 855: ARRAY
 856: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 857: LD_ADDR_EXP 21
 861: PUSH
 862: LD_INT 9
 864: PUSH
 865: LD_INT 12
 867: PUSH
 868: LD_INT 15
 870: PUSH
 871: LD_INT 24
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: PUSH
 880: LD_EXP 2
 884: PUSH
 885: LD_INT 1
 887: PLUS
 888: ARRAY
 889: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 890: LD_ADDR_EXP 22
 894: PUSH
 895: LD_INT 2
 897: PUSH
 898: LD_INT 3
 900: PUSH
 901: LD_INT 4
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_EXP 3
 917: PUSH
 918: LD_INT 1
 920: PLUS
 921: ARRAY
 922: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 923: LD_ADDR_EXP 24
 927: PUSH
 928: LD_INT 0
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 30
 944: PUSH
 945: LD_INT 0
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PUSH
 956: LD_INT 50
 958: PUSH
 959: LD_INT 20
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: PUSH
 970: LD_INT 80
 972: PUSH
 973: LD_INT 40
 975: PUSH
 976: LD_INT 20
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: PUSH
 990: LD_EXP 4
 994: PUSH
 995: LD_INT 1
 997: PLUS
 998: ARRAY
 999: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1000: LD_ADDR_EXP 23
1004: PUSH
1005: LD_INT 10
1007: PUSH
1008: EMPTY
1009: LIST
1010: PUSH
1011: LD_INT 7
1013: PUSH
1014: LD_INT 14
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 6
1023: PUSH
1024: LD_INT 12
1026: PUSH
1027: LD_INT 18
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 10
1040: PUSH
1041: LD_INT 15
1043: PUSH
1044: LD_INT 20
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_EXP 4
1063: PUSH
1064: LD_INT 1
1066: PLUS
1067: ARRAY
1068: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1069: LD_ADDR_EXP 25
1073: PUSH
1074: LD_INT 150
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_INT 1
1084: PLUS
1085: MINUS
1086: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1087: LD_ADDR_EXP 29
1091: PUSH
1092: LD_INT 0
1094: PUSH
1095: LD_INT 10500
1097: PUSH
1098: LD_INT 6300
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_EXP 11
1110: PUSH
1111: LD_INT 1
1113: PLUS
1114: ARRAY
1115: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1116: LD_ADDR_EXP 30
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 31500
1126: PUSH
1127: LD_INT 10500
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_EXP 11
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1145: LD_ADDR_EXP 27
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: LD_INT 3
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_EXP 12
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: ARRAY
1177: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1178: LD_ADDR_EXP 26
1182: PUSH
1183: LD_INT 1
1185: NEG
1186: PUSH
1187: LD_INT 350
1189: PUSH
1190: LD_INT 700
1192: PUSH
1193: LD_INT 1400
1195: PUSH
1196: LD_INT 0
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: PUSH
1206: LD_EXP 9
1210: PUSH
1211: LD_INT 1
1213: PLUS
1214: ARRAY
1215: ST_TO_ADDR
// battle_flags_id := [ ] ;
1216: LD_ADDR_EXP 46
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// Sheik := [ 0 , 1 , 2 ] [ def_Sheik + 1 ] ;
1223: LD_ADDR_EXP 47
1227: PUSH
1228: LD_INT 0
1230: PUSH
1231: LD_INT 1
1233: PUSH
1234: LD_INT 2
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: LD_EXP 15
1246: PUSH
1247: LD_INT 1
1249: PLUS
1250: ARRAY
1251: ST_TO_ADDR
// Mastodont := 8 ;
1252: LD_ADDR_EXP 48
1256: PUSH
1257: LD_INT 8
1259: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1260: LD_EXP 13
1264: PUSH
1265: LD_INT 0
1267: EQUAL
1268: IFFALSE 1280
// siberite_bomb_Delay = 0 else
1270: LD_ADDR_EXP 31
1274: PUSH
1275: LD_INT 0
1277: ST_TO_ADDR
1278: GO 1302
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1280: LD_ADDR_EXP 31
1284: PUSH
1285: LD_EXP 13
1289: PUSH
1290: LD_INT 1
1292: MINUS
1293: PUSH
1294: LD_INT 21000
1296: MUL
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ST_TO_ADDR
// end ;
1302: LD_VAR 0 1
1306: RET
// function init_map ; var i , j ; begin
1307: LD_INT 0
1309: PPUSH
1310: PPUSH
1311: PPUSH
// normal_oil_deposits_locations := [ [ 61 , 60 ] , [ 105 , 67 ] , [ 106 , 43 ] , [ 220 , 10 ] , [ 188 , 284 ] , [ 278 , 241 ] , [ 277 , 204 ] , [ 320 , 220 ] ] ;
1312: LD_ADDR_EXP 42
1316: PUSH
1317: LD_INT 61
1319: PUSH
1320: LD_INT 60
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 105
1329: PUSH
1330: LD_INT 67
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 106
1339: PUSH
1340: LD_INT 43
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 220
1349: PUSH
1350: LD_INT 10
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: LD_INT 188
1359: PUSH
1360: LD_INT 284
1362: PUSH
1363: EMPTY
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 278
1369: PUSH
1370: LD_INT 241
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 277
1379: PUSH
1380: LD_INT 204
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: LD_INT 320
1389: PUSH
1390: LD_INT 220
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 36 , 57 ] , [ 98 , 53 ] , [ 106 , 12 ] , [ 247 , 20 ] , [ 139 , 263 ] , [ 280 , 280 ] , [ 274 , 215 ] , [ 345 , 223 ] ] ;
1407: LD_ADDR_EXP 43
1411: PUSH
1412: LD_INT 36
1414: PUSH
1415: LD_INT 57
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 98
1424: PUSH
1425: LD_INT 53
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 106
1434: PUSH
1435: LD_INT 12
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 247
1444: PUSH
1445: LD_INT 20
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 139
1454: PUSH
1455: LD_INT 263
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 280
1464: PUSH
1465: LD_INT 280
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 274
1474: PUSH
1475: LD_INT 215
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 345
1484: PUSH
1485: LD_INT 223
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 52 , 91 ] , [ 129 , 74 ] , [ 93 , 16 ] , [ 244 , 38 ] , [ 146 , 250 ] , [ 300 , 276 ] , [ 253 , 200 ] , [ 330 , 190 ] ] ;
1502: LD_ADDR_EXP 44
1506: PUSH
1507: LD_INT 52
1509: PUSH
1510: LD_INT 91
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: LD_INT 129
1519: PUSH
1520: LD_INT 74
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PUSH
1527: LD_INT 93
1529: PUSH
1530: LD_INT 16
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PUSH
1537: LD_INT 244
1539: PUSH
1540: LD_INT 38
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 146
1549: PUSH
1550: LD_INT 250
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: LD_INT 300
1559: PUSH
1560: LD_INT 276
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 253
1569: PUSH
1570: LD_INT 200
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 330
1579: PUSH
1580: LD_INT 190
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 88 , 88 ] , [ 117 , 103 ] , [ 137 , 45 ] , [ 193 , 3 ] , [ 202 , 296 ] , [ 247 , 239 ] , [ 270 , 169 ] , [ 293 , 186 ] ] ;
1597: LD_ADDR_EXP 45
1601: PUSH
1602: LD_INT 88
1604: PUSH
1605: LD_INT 88
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 117
1614: PUSH
1615: LD_INT 103
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: LD_INT 137
1624: PUSH
1625: LD_INT 45
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: PUSH
1632: LD_INT 193
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 202
1644: PUSH
1645: LD_INT 296
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: LD_INT 247
1654: PUSH
1655: LD_INT 239
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 270
1664: PUSH
1665: LD_INT 169
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: LD_INT 293
1674: PUSH
1675: LD_INT 186
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: ST_TO_ADDR
// depot_def := [ [ 58 , 73 , 2 ] , [ 116 , 79 , 3 ] , [ 110 , 30 , 1 ] , [ 223 , 25 , 3 ] , [ 168 , 266 , 0 ] , [ 276 , 256 , 4 ] , [ 262 , 189 , 0 ] , [ 324 , 203 , 5 ] ] ;
1692: LD_ADDR_EXP 39
1696: PUSH
1697: LD_INT 58
1699: PUSH
1700: LD_INT 73
1702: PUSH
1703: LD_INT 2
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 116
1713: PUSH
1714: LD_INT 79
1716: PUSH
1717: LD_INT 3
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 110
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 1
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 223
1741: PUSH
1742: LD_INT 25
1744: PUSH
1745: LD_INT 3
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 168
1755: PUSH
1756: LD_INT 266
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 276
1769: PUSH
1770: LD_INT 256
1772: PUSH
1773: LD_INT 4
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 262
1783: PUSH
1784: LD_INT 189
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: LD_INT 324
1797: PUSH
1798: LD_INT 203
1800: PUSH
1801: LD_INT 5
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: ST_TO_ADDR
// for i in depot_def do
1819: LD_ADDR_VAR 0 2
1823: PUSH
1824: LD_EXP 39
1828: PUSH
1829: FOR_IN
1830: IFFALSE 1906
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1832: LD_ADDR_EXP 41
1836: PUSH
1837: LD_EXP 41
1841: PUSH
1842: LD_VAR 0 2
1846: PUSH
1847: LD_INT 1
1849: ARRAY
1850: PPUSH
1851: LD_VAR 0 2
1855: PUSH
1856: LD_INT 3
1858: ARRAY
1859: PPUSH
1860: LD_INT 4
1862: NEG
1863: PPUSH
1864: CALL_OW 272
1868: PUSH
1869: LD_VAR 0 2
1873: PUSH
1874: LD_INT 2
1876: ARRAY
1877: PPUSH
1878: LD_VAR 0 2
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PPUSH
1887: LD_INT 4
1889: NEG
1890: PPUSH
1891: CALL_OW 273
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: EMPTY
1901: LIST
1902: ADD
1903: ST_TO_ADDR
1904: GO 1829
1906: POP
1907: POP
// breastworks_def := [ [ [ 72 , 97 , 5 ] , [ 82 , 85 , 4 ] , [ 66 , 66 , 4 ] ] , [ [ 119 , 99 , 0 ] , [ 140 , 98 , 5 ] , [ 126 , 66 , 4 ] ] , [ [ 113 , 16 , 4 ] , [ 130 , 38 , 5 ] , [ 111 , 42 , 0 ] ] , [ [ 218 , 36 , 0 ] , [ 240 , 40 , 5 ] , [ 205 , 24 , 1 ] ] , [ [ 174 , 250 , 3 ] , [ 151 , 248 , 2 ] , [ 193 , 272 , 4 ] ] , [ [ 252 , 246 , 1 ] , [ 263 , 267 , 1 ] , [ 270 , 238 , 3 ] ] , [ [ 240 , 173 , 2 ] , [ 261 , 173 , 2 ] , [ 256 , 208 , 1 ] ] , [ [ 311 , 181 , 2 ] , [ 298 , 190 , 2 ] , [ 312 , 212 , 1 ] ] ] ;
1908: LD_ADDR_EXP 40
1912: PUSH
1913: LD_INT 72
1915: PUSH
1916: LD_INT 97
1918: PUSH
1919: LD_INT 5
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 82
1929: PUSH
1930: LD_INT 85
1932: PUSH
1933: LD_INT 4
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 66
1943: PUSH
1944: LD_INT 66
1946: PUSH
1947: LD_INT 4
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 119
1962: PUSH
1963: LD_INT 99
1965: PUSH
1966: LD_INT 0
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 140
1976: PUSH
1977: LD_INT 98
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 126
1990: PUSH
1991: LD_INT 66
1993: PUSH
1994: LD_INT 4
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 113
2009: PUSH
2010: LD_INT 16
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 130
2023: PUSH
2024: LD_INT 38
2026: PUSH
2027: LD_INT 5
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 111
2037: PUSH
2038: LD_INT 42
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 218
2056: PUSH
2057: LD_INT 36
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: LD_INT 240
2070: PUSH
2071: LD_INT 40
2073: PUSH
2074: LD_INT 5
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 205
2084: PUSH
2085: LD_INT 24
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 174
2103: PUSH
2104: LD_INT 250
2106: PUSH
2107: LD_INT 3
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 151
2117: PUSH
2118: LD_INT 248
2120: PUSH
2121: LD_INT 2
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 193
2131: PUSH
2132: LD_INT 272
2134: PUSH
2135: LD_INT 4
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 252
2150: PUSH
2151: LD_INT 246
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 263
2164: PUSH
2165: LD_INT 267
2167: PUSH
2168: LD_INT 1
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 270
2178: PUSH
2179: LD_INT 238
2181: PUSH
2182: LD_INT 3
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 240
2197: PUSH
2198: LD_INT 173
2200: PUSH
2201: LD_INT 2
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 261
2211: PUSH
2212: LD_INT 173
2214: PUSH
2215: LD_INT 2
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 256
2225: PUSH
2226: LD_INT 208
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 311
2244: PUSH
2245: LD_INT 181
2247: PUSH
2248: LD_INT 2
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 298
2258: PUSH
2259: LD_INT 190
2261: PUSH
2262: LD_INT 2
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 312
2272: PUSH
2273: LD_INT 212
2275: PUSH
2276: LD_INT 1
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: ST_TO_ADDR
// for i = 1 to Side_Positions do
2299: LD_ADDR_VAR 0 2
2303: PUSH
2304: DOUBLE
2305: LD_INT 1
2307: DEC
2308: ST_TO_ADDR
2309: LD_EXP 36
2313: PUSH
2314: FOR_TO
2315: IFFALSE 2438
// begin if not Side_Positions [ i ] then
2317: LD_EXP 36
2321: PUSH
2322: LD_VAR 0 2
2326: ARRAY
2327: NOT
2328: IFFALSE 2332
// continue ;
2330: GO 2314
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2332: LD_EXP 42
2336: PUSH
2337: LD_EXP 36
2341: PUSH
2342: LD_VAR 0 2
2346: ARRAY
2347: ARRAY
2348: PUSH
2349: LD_INT 1
2351: ARRAY
2352: PPUSH
2353: LD_EXP 42
2357: PUSH
2358: LD_EXP 36
2362: PUSH
2363: LD_VAR 0 2
2367: ARRAY
2368: ARRAY
2369: PUSH
2370: LD_INT 2
2372: ARRAY
2373: PPUSH
2374: LD_INT 2
2376: PPUSH
2377: CALL_OW 62
// if def_extra_oil_deposits then
2381: LD_EXP 6
2385: IFFALSE 2436
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2387: LD_EXP 43
2391: PUSH
2392: LD_EXP 36
2396: PUSH
2397: LD_VAR 0 2
2401: ARRAY
2402: ARRAY
2403: PUSH
2404: LD_INT 1
2406: ARRAY
2407: PPUSH
2408: LD_EXP 43
2412: PUSH
2413: LD_EXP 36
2417: PUSH
2418: LD_VAR 0 2
2422: ARRAY
2423: ARRAY
2424: PUSH
2425: LD_INT 2
2427: ARRAY
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: CALL_OW 62
// end ;
2436: GO 2314
2438: POP
2439: POP
// if def_extra_sib_deposits then
2440: LD_EXP 7
2444: IFFALSE 2591
// for i = 1 to Side_Positions do
2446: LD_ADDR_VAR 0 2
2450: PUSH
2451: DOUBLE
2452: LD_INT 1
2454: DEC
2455: ST_TO_ADDR
2456: LD_EXP 36
2460: PUSH
2461: FOR_TO
2462: IFFALSE 2589
// begin if not Side_Positions [ i ] then
2464: LD_EXP 36
2468: PUSH
2469: LD_VAR 0 2
2473: ARRAY
2474: NOT
2475: IFFALSE 2479
// continue ;
2477: GO 2461
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2479: LD_EXP 44
2483: PUSH
2484: LD_EXP 36
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: ARRAY
2495: PUSH
2496: LD_INT 1
2498: ARRAY
2499: PPUSH
2500: LD_EXP 44
2504: PUSH
2505: LD_EXP 36
2509: PUSH
2510: LD_VAR 0 2
2514: ARRAY
2515: ARRAY
2516: PUSH
2517: LD_INT 2
2519: ARRAY
2520: PPUSH
2521: LD_INT 3
2523: PPUSH
2524: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2528: LD_EXP 7
2532: PUSH
2533: LD_INT 2
2535: EQUAL
2536: IFFALSE 2587
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2538: LD_EXP 45
2542: PUSH
2543: LD_EXP 36
2547: PUSH
2548: LD_VAR 0 2
2552: ARRAY
2553: ARRAY
2554: PUSH
2555: LD_INT 1
2557: ARRAY
2558: PPUSH
2559: LD_EXP 45
2563: PUSH
2564: LD_EXP 36
2568: PUSH
2569: LD_VAR 0 2
2573: ARRAY
2574: ARRAY
2575: PUSH
2576: LD_INT 2
2578: ARRAY
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: CALL_OW 62
// end ;
2587: GO 2461
2589: POP
2590: POP
// end ;
2591: LD_VAR 0 1
2595: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2596: LD_INT 0
2598: PPUSH
2599: PPUSH
2600: PPUSH
// if not Team_Game then
2601: LD_EXP 38
2605: NOT
2606: IFFALSE 2704
// begin for i = 1 to 8 do
2608: LD_ADDR_VAR 0 2
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 8
2620: PUSH
2621: FOR_TO
2622: IFFALSE 2700
// for j = 1 to 8 do
2624: LD_ADDR_VAR 0 3
2628: PUSH
2629: DOUBLE
2630: LD_INT 1
2632: DEC
2633: ST_TO_ADDR
2634: LD_INT 8
2636: PUSH
2637: FOR_TO
2638: IFFALSE 2696
// if i <> j then
2640: LD_VAR 0 2
2644: PUSH
2645: LD_VAR 0 3
2649: NONEQUAL
2650: IFFALSE 2674
// SetAttitude ( i , j , att_neutral , true ) else
2652: LD_VAR 0 2
2656: PPUSH
2657: LD_VAR 0 3
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 80
2672: GO 2694
// SetAttitude ( i , j , att_friend , true ) ;
2674: LD_VAR 0 2
2678: PPUSH
2679: LD_VAR 0 3
2683: PPUSH
2684: LD_INT 1
2686: PPUSH
2687: LD_INT 1
2689: PPUSH
2690: CALL_OW 80
2694: GO 2637
2696: POP
2697: POP
2698: GO 2621
2700: POP
2701: POP
// end else
2702: GO 2879
// begin if def_shared_vision then
2704: LD_EXP 8
2708: IFFALSE 2773
// begin for i in Teams do
2710: LD_ADDR_VAR 0 2
2714: PUSH
2715: LD_EXP 34
2719: PUSH
2720: FOR_IN
2721: IFFALSE 2771
// for j = 2 to i do
2723: LD_ADDR_VAR 0 3
2727: PUSH
2728: DOUBLE
2729: LD_INT 2
2731: DEC
2732: ST_TO_ADDR
2733: LD_VAR 0 2
2737: PUSH
2738: FOR_TO
2739: IFFALSE 2767
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2741: LD_VAR 0 2
2745: PUSH
2746: LD_VAR 0 3
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 2
2756: PUSH
2757: LD_INT 1
2759: ARRAY
2760: PPUSH
2761: CALL_OW 343
2765: GO 2738
2767: POP
2768: POP
2769: GO 2720
2771: POP
2772: POP
// end ; for i = 1 to 8 do
2773: LD_ADDR_VAR 0 2
2777: PUSH
2778: DOUBLE
2779: LD_INT 1
2781: DEC
2782: ST_TO_ADDR
2783: LD_INT 8
2785: PUSH
2786: FOR_TO
2787: IFFALSE 2877
// for j = 1 to 8 do
2789: LD_ADDR_VAR 0 3
2793: PUSH
2794: DOUBLE
2795: LD_INT 1
2797: DEC
2798: ST_TO_ADDR
2799: LD_INT 8
2801: PUSH
2802: FOR_TO
2803: IFFALSE 2873
// if Side_Teams [ i ] = Side_Teams [ j ] then
2805: LD_EXP 33
2809: PUSH
2810: LD_VAR 0 2
2814: ARRAY
2815: PUSH
2816: LD_EXP 33
2820: PUSH
2821: LD_VAR 0 3
2825: ARRAY
2826: EQUAL
2827: IFFALSE 2851
// SetAttitude ( i , j , att_friend , true ) else
2829: LD_VAR 0 2
2833: PPUSH
2834: LD_VAR 0 3
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: LD_INT 1
2844: PPUSH
2845: CALL_OW 80
2849: GO 2871
// SetAttitude ( i , j , att_enemy , true ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_VAR 0 3
2860: PPUSH
2861: LD_INT 2
2863: PPUSH
2864: LD_INT 1
2866: PPUSH
2867: CALL_OW 80
2871: GO 2802
2873: POP
2874: POP
2875: GO 2786
2877: POP
2878: POP
// end ; end ;
2879: LD_VAR 0 1
2883: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2884: LD_INT 0
2886: PPUSH
2887: PPUSH
2888: PPUSH
2889: PPUSH
// result := [ ] ;
2890: LD_ADDR_VAR 0 7
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// for i := 1 to count do
2897: LD_ADDR_VAR 0 8
2901: PUSH
2902: DOUBLE
2903: LD_INT 1
2905: DEC
2906: ST_TO_ADDR
2907: LD_VAR 0 1
2911: PUSH
2912: FOR_TO
2913: IFFALSE 3461
// begin uc_direction := Rand ( 0 , 5 ) ;
2915: LD_ADDR_OWVAR 24
2919: PUSH
2920: LD_INT 0
2922: PPUSH
2923: LD_INT 5
2925: PPUSH
2926: CALL_OW 12
2930: ST_TO_ADDR
// if commander then
2931: LD_LOC 1
2935: IFFALSE 3090
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2937: LD_ADDR_OWVAR 26
2941: PUSH
2942: LD_OWVAR 19
2946: PUSH
2947: LD_OWVAR 20
2951: ARRAY
2952: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2953: LD_INT 1
2955: PPUSH
2956: LD_INT 2
2958: PPUSH
2959: CALL_OW 12
2963: PPUSH
2964: LD_VAR 0 2
2968: PPUSH
2969: LD_EXP 22
2973: PUSH
2974: LD_INT 2
2976: PLUS
2977: PPUSH
2978: CALL_OW 380
// hc_importance := 105 ;
2982: LD_ADDR_OWVAR 32
2986: PUSH
2987: LD_INT 105
2989: ST_TO_ADDR
// commander := false ;
2990: LD_ADDR_LOC 1
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// if Multiplayer then
2998: LD_OWVAR 4
3002: IFFALSE 3088
// begin if Sheik = 1 and uc_nation = 2 then
3004: LD_EXP 47
3008: PUSH
3009: LD_INT 1
3011: EQUAL
3012: PUSH
3013: LD_OWVAR 21
3017: PUSH
3018: LD_INT 2
3020: EQUAL
3021: AND
3022: IFFALSE 3050
// begin hc_gallery :=  ;
3024: LD_ADDR_OWVAR 33
3028: PUSH
3029: LD_STRING 
3031: ST_TO_ADDR
// hc_class := class_desert_warior ;
3032: LD_ADDR_OWVAR 28
3036: PUSH
3037: LD_INT 11
3039: ST_TO_ADDR
// hc_sex := sex_male ;
3040: LD_ADDR_OWVAR 27
3044: PUSH
3045: LD_INT 1
3047: ST_TO_ADDR
// end else
3048: GO 3088
// begin hc_gallery := MULTIAVATARS ;
3050: LD_ADDR_OWVAR 33
3054: PUSH
3055: LD_STRING MULTIAVATARS
3057: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3058: LD_ADDR_OWVAR 34
3062: PUSH
3063: LD_OWVAR 20
3067: PPUSH
3068: CALL_OW 525
3072: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3073: LD_ADDR_OWVAR 27
3077: PUSH
3078: LD_OWVAR 20
3082: PPUSH
3083: CALL_OW 526
3087: ST_TO_ADDR
// end ; end ; end else
3088: GO 3226
// begin hc_name :=  ;
3090: LD_ADDR_OWVAR 26
3094: PUSH
3095: LD_STRING 
3097: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3098: LD_INT 1
3100: PPUSH
3101: LD_INT 2
3103: PPUSH
3104: CALL_OW 12
3108: PPUSH
3109: LD_VAR 0 2
3113: PPUSH
3114: LD_EXP 22
3118: PPUSH
3119: CALL_OW 380
// hc_importance := 0 ;
3123: LD_ADDR_OWVAR 32
3127: PUSH
3128: LD_INT 0
3130: ST_TO_ADDR
// if cl = class_desert_warior and Sheik = 2 then
3131: LD_VAR 0 2
3135: PUSH
3136: LD_INT 11
3138: EQUAL
3139: PUSH
3140: LD_EXP 47
3144: PUSH
3145: LD_INT 2
3147: EQUAL
3148: AND
3149: IFFALSE 3204
// begin commander := true ;
3151: LD_ADDR_LOC 1
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3159: LD_INT 1
3161: PPUSH
3162: LD_INT 2
3164: PPUSH
3165: CALL_OW 12
3169: PPUSH
3170: LD_VAR 0 2
3174: PPUSH
3175: LD_EXP 22
3179: PUSH
3180: LD_INT 2
3182: PLUS
3183: PPUSH
3184: CALL_OW 380
// hc_importance := 105 ;
3188: LD_ADDR_OWVAR 32
3192: PUSH
3193: LD_INT 105
3195: ST_TO_ADDR
// commander := false ;
3196: LD_ADDR_LOC 1
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// end ; if Multiplayer then
3204: LD_OWVAR 4
3208: IFFALSE 3226
// begin hc_gallery :=  ;
3210: LD_ADDR_OWVAR 33
3214: PUSH
3215: LD_STRING 
3217: ST_TO_ADDR
// hc_face_number := 0 ;
3218: LD_ADDR_OWVAR 34
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3226: LD_ADDR_VAR 0 10
3230: PUSH
3231: CALL_OW 44
3235: ST_TO_ADDR
// if global_defined and not cl = class_desert_warior then
3236: LD_LOC 3
3240: PUSH
3241: LD_VAR 0 2
3245: PUSH
3246: LD_INT 11
3248: EQUAL
3249: NOT
3250: AND
3251: IFFALSE 3391
// begin if ( cl = class_soldier ) then
3253: LD_VAR 0 2
3257: PUSH
3258: LD_INT 1
3260: EQUAL
3261: IFFALSE 3281
// j := i + soldiers_created else
3263: LD_ADDR_VAR 0 9
3267: PUSH
3268: LD_VAR 0 8
3272: PUSH
3273: LD_LOC 4
3277: PLUS
3278: ST_TO_ADDR
3279: GO 3291
// j := i ;
3281: LD_ADDR_VAR 0 9
3285: PUSH
3286: LD_VAR 0 8
3290: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3291: LD_LOC 2
3295: PUSH
3296: LD_VAR 0 2
3300: ARRAY
3301: PUSH
3302: LD_VAR 0 9
3306: ARRAY
3307: PPUSH
3308: LD_VAR 0 10
3312: PPUSH
3313: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3317: LD_VAR 0 10
3321: PPUSH
3322: LD_INT 2
3324: PPUSH
3325: LD_LOC 2
3329: PUSH
3330: LD_VAR 0 2
3334: ARRAY
3335: PUSH
3336: LD_VAR 0 9
3340: ARRAY
3341: PPUSH
3342: LD_INT 2
3344: PPUSH
3345: CALL_OW 260
3349: PPUSH
3350: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3354: LD_VAR 0 10
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_LOC 2
3366: PUSH
3367: LD_VAR 0 2
3371: ARRAY
3372: PUSH
3373: LD_VAR 0 9
3377: ARRAY
3378: PPUSH
3379: LD_INT 1
3381: PPUSH
3382: CALL_OW 260
3386: PPUSH
3387: CALL_OW 239
// end ; if building then
3391: LD_VAR 0 6
3395: IFFALSE 3413
// PlaceHumanInUnit ( un , building ) else
3397: LD_VAR 0 10
3401: PPUSH
3402: LD_VAR 0 6
3406: PPUSH
3407: CALL_OW 52
3411: GO 3440
// PlaceUnitXYR ( un , x , y , r , false ) ;
3413: LD_VAR 0 10
3417: PPUSH
3418: LD_VAR 0 3
3422: PPUSH
3423: LD_VAR 0 4
3427: PPUSH
3428: LD_VAR 0 5
3432: PPUSH
3433: LD_INT 0
3435: PPUSH
3436: CALL_OW 50
// result := result ^ [ un ] ;
3440: LD_ADDR_VAR 0 7
3444: PUSH
3445: LD_VAR 0 7
3449: PUSH
3450: LD_VAR 0 10
3454: PUSH
3455: EMPTY
3456: LIST
3457: ADD
3458: ST_TO_ADDR
// end ;
3459: GO 2912
3461: POP
3462: POP
// if not global_defined then
3463: LD_LOC 3
3467: NOT
3468: IFFALSE 3546
// if ( global_units >= cl ) then
3470: LD_LOC 2
3474: PUSH
3475: LD_VAR 0 2
3479: GREATEREQUAL
3480: IFFALSE 3521
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3482: LD_ADDR_LOC 2
3486: PUSH
3487: LD_LOC 2
3491: PPUSH
3492: LD_VAR 0 2
3496: PPUSH
3497: LD_LOC 2
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PUSH
3508: LD_VAR 0 7
3512: ADD
3513: PPUSH
3514: CALL_OW 1
3518: ST_TO_ADDR
3519: GO 3546
// global_units := Replace ( global_units , cl , result ) ;
3521: LD_ADDR_LOC 2
3525: PUSH
3526: LD_LOC 2
3530: PPUSH
3531: LD_VAR 0 2
3535: PPUSH
3536: LD_VAR 0 7
3540: PPUSH
3541: CALL_OW 1
3545: ST_TO_ADDR
// if commander then
3546: LD_LOC 1
3550: IFFALSE 3597
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3552: LD_ADDR_EXP 49
3556: PUSH
3557: LD_EXP 49
3561: PPUSH
3562: LD_OWVAR 20
3566: PPUSH
3567: LD_EXP 49
3571: PUSH
3572: LD_OWVAR 20
3576: ARRAY
3577: PUSH
3578: LD_VAR 0 10
3582: ADD
3583: PPUSH
3584: CALL_OW 1
3588: ST_TO_ADDR
// commander := false ;
3589: LD_ADDR_LOC 1
3593: PUSH
3594: LD_INT 0
3596: ST_TO_ADDR
// end ; end ;
3597: LD_VAR 0 7
3601: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3602: LD_INT 0
3604: PPUSH
3605: PPUSH
// uc_side := 0 ;
3606: LD_ADDR_OWVAR 20
3610: PUSH
3611: LD_INT 0
3613: ST_TO_ADDR
// uc_nation := 0 ;
3614: LD_ADDR_OWVAR 21
3618: PUSH
3619: LD_INT 0
3621: ST_TO_ADDR
// vc_chassis := 31 ;
3622: LD_ADDR_OWVAR 37
3626: PUSH
3627: LD_INT 31
3629: ST_TO_ADDR
// vc_control := control_rider ;
3630: LD_ADDR_OWVAR 38
3634: PUSH
3635: LD_INT 4
3637: ST_TO_ADDR
// if def_mastodont = 1 then
3638: LD_EXP 16
3642: PUSH
3643: LD_INT 1
3645: EQUAL
3646: IFFALSE 3685
// for i = 1 to n do
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 1
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3683
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3666: CALL_OW 45
3670: PPUSH
3671: LD_INT 18
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 49
3681: GO 3663
3683: POP
3684: POP
// if def_mastodont = 2 then
3685: LD_EXP 16
3689: PUSH
3690: LD_INT 2
3692: EQUAL
3693: IFFALSE 3732
// for i = 1 to n do
3695: LD_ADDR_VAR 0 3
3699: PUSH
3700: DOUBLE
3701: LD_INT 1
3703: DEC
3704: ST_TO_ADDR
3705: LD_VAR 0 1
3709: PUSH
3710: FOR_TO
3711: IFFALSE 3730
// PlaceUnitArea ( CreateVehicle , MastodontSpawn2 , false ) ;
3713: CALL_OW 45
3717: PPUSH
3718: LD_INT 19
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: CALL_OW 49
3728: GO 3710
3730: POP
3731: POP
// if def_mastodont = 3 then
3732: LD_EXP 16
3736: PUSH
3737: LD_INT 3
3739: EQUAL
3740: IFFALSE 3779
// for i = 1 to n do
3742: LD_ADDR_VAR 0 3
3746: PUSH
3747: DOUBLE
3748: LD_INT 1
3750: DEC
3751: ST_TO_ADDR
3752: LD_VAR 0 1
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3777
// PlaceUnitArea ( CreateVehicle , MastodontSpawn3 , false ) ;
3760: CALL_OW 45
3764: PPUSH
3765: LD_INT 20
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 49
3775: GO 3757
3777: POP
3778: POP
// end ;
3779: LD_VAR 0 2
3783: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
// if side in [ 0 , 9 ] then
3795: LD_VAR 0 1
3799: PUSH
3800: LD_INT 0
3802: PUSH
3803: LD_INT 9
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: IN
3810: IFFALSE 3814
// exit ;
3812: GO 4910
// pos := Side_Positions [ side ] ;
3814: LD_ADDR_VAR 0 3
3818: PUSH
3819: LD_EXP 36
3823: PUSH
3824: LD_VAR 0 1
3828: ARRAY
3829: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3830: LD_ADDR_OWVAR 21
3834: PUSH
3835: LD_EXP 37
3839: PUSH
3840: LD_VAR 0 1
3844: ARRAY
3845: ST_TO_ADDR
// uc_side := side ;
3846: LD_ADDR_OWVAR 20
3850: PUSH
3851: LD_VAR 0 1
3855: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3856: LD_ADDR_VAR 0 4
3860: PUSH
3861: LD_EXP 39
3865: PUSH
3866: LD_VAR 0 3
3870: ARRAY
3871: PUSH
3872: LD_INT 1
3874: ARRAY
3875: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3876: LD_ADDR_VAR 0 5
3880: PUSH
3881: LD_EXP 39
3885: PUSH
3886: LD_VAR 0 3
3890: ARRAY
3891: PUSH
3892: LD_INT 2
3894: ARRAY
3895: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3896: LD_ADDR_VAR 0 6
3900: PUSH
3901: LD_EXP 39
3905: PUSH
3906: LD_VAR 0 3
3910: ARRAY
3911: PUSH
3912: LD_INT 3
3914: ARRAY
3915: ST_TO_ADDR
// if is_depot then
3916: LD_EXP 19
3920: IFFALSE 4053
// begin bc_type = b_depot ;
3922: LD_ADDR_OWVAR 42
3926: PUSH
3927: LD_INT 0
3929: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3930: LD_ADDR_VAR 0 10
3934: PUSH
3935: LD_VAR 0 4
3939: PPUSH
3940: LD_VAR 0 5
3944: PPUSH
3945: LD_VAR 0 6
3949: PPUSH
3950: CALL_OW 47
3954: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3955: LD_VAR 0 10
3959: PPUSH
3960: LD_STRING @
3962: PUSH
3963: LD_VAR 0 1
3967: STR
3968: PPUSH
3969: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3973: LD_VAR 0 10
3977: PPUSH
3978: CALL_OW 274
3982: PPUSH
3983: LD_INT 1
3985: PPUSH
3986: LD_EXP 24
3990: PUSH
3991: LD_INT 1
3993: ARRAY
3994: PPUSH
3995: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3999: LD_VAR 0 10
4003: PPUSH
4004: CALL_OW 274
4008: PPUSH
4009: LD_INT 2
4011: PPUSH
4012: LD_EXP 24
4016: PUSH
4017: LD_INT 2
4019: ARRAY
4020: PPUSH
4021: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4025: LD_VAR 0 10
4029: PPUSH
4030: CALL_OW 274
4034: PPUSH
4035: LD_INT 3
4037: PPUSH
4038: LD_EXP 24
4042: PUSH
4043: LD_INT 3
4045: ARRAY
4046: PPUSH
4047: CALL_OW 277
// end else
4051: GO 4197
// begin for i := 1 to 3 do
4053: LD_ADDR_VAR 0 7
4057: PUSH
4058: DOUBLE
4059: LD_INT 1
4061: DEC
4062: ST_TO_ADDR
4063: LD_INT 3
4065: PUSH
4066: FOR_TO
4067: IFFALSE 4195
// begin r := starting_resources [ i ] ;
4069: LD_ADDR_VAR 0 8
4073: PUSH
4074: LD_EXP 24
4078: PUSH
4079: LD_VAR 0 7
4083: ARRAY
4084: ST_TO_ADDR
// while r >= 10 do
4085: LD_VAR 0 8
4089: PUSH
4090: LD_INT 10
4092: GREATEREQUAL
4093: IFFALSE 4193
// if r > 50 then
4095: LD_VAR 0 8
4099: PUSH
4100: LD_INT 50
4102: GREATER
4103: IFFALSE 4149
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4105: LD_VAR 0 7
4109: PPUSH
4110: LD_INT 5
4112: PPUSH
4113: LD_VAR 0 4
4117: PPUSH
4118: LD_VAR 0 5
4122: PPUSH
4123: LD_INT 4
4125: PPUSH
4126: LD_INT 0
4128: PPUSH
4129: CALL_OW 60
// r := r - 50 ;
4133: LD_ADDR_VAR 0 8
4137: PUSH
4138: LD_VAR 0 8
4142: PUSH
4143: LD_INT 50
4145: MINUS
4146: ST_TO_ADDR
// end else
4147: GO 4191
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4149: LD_VAR 0 7
4153: PPUSH
4154: LD_VAR 0 8
4158: PUSH
4159: LD_INT 10
4161: DIV
4162: PPUSH
4163: LD_VAR 0 4
4167: PPUSH
4168: LD_VAR 0 5
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 60
// r := 0 ;
4183: LD_ADDR_VAR 0 8
4187: PUSH
4188: LD_INT 0
4190: ST_TO_ADDR
// end ;
4191: GO 4085
// end ;
4193: GO 4066
4195: POP
4196: POP
// end ; for r in starting_crates do
4197: LD_ADDR_VAR 0 8
4201: PUSH
4202: LD_EXP 23
4206: PUSH
4207: FOR_IN
4208: IFFALSE 4240
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 5
4215: PPUSH
4216: LD_VAR 0 4
4220: PPUSH
4221: LD_VAR 0 5
4225: PPUSH
4226: LD_VAR 0 8
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 60
4238: GO 4207
4240: POP
4241: POP
// if def_morale_flags then
4242: LD_EXP 9
4246: IFFALSE 4385
// begin x := start_def [ pos ] [ 1 ] ;
4248: LD_ADDR_VAR 0 4
4252: PUSH
4253: LD_EXP 41
4257: PUSH
4258: LD_VAR 0 3
4262: ARRAY
4263: PUSH
4264: LD_INT 1
4266: ARRAY
4267: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4268: LD_ADDR_VAR 0 5
4272: PUSH
4273: LD_EXP 41
4277: PUSH
4278: LD_VAR 0 3
4282: ARRAY
4283: PUSH
4284: LD_INT 2
4286: ARRAY
4287: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4288: LD_VAR 0 4
4292: PPUSH
4293: LD_VAR 0 5
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: LD_INT 2
4303: PPUSH
4304: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4308: LD_ADDR_EXP 46
4312: PUSH
4313: LD_EXP 46
4317: PUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: LD_VAR 0 4
4327: PPUSH
4328: LD_VAR 0 5
4332: PPUSH
4333: LD_INT 1
4335: PUSH
4336: LD_INT 100
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: LD_INT 50
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: LD_INT 20
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 20
4365: PUSH
4366: LD_INT 100
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 418
4383: ADD
4384: ST_TO_ADDR
// end ; commander := true ;
4385: LD_ADDR_LOC 1
4389: PUSH
4390: LD_INT 1
4392: ST_TO_ADDR
// soldiers_created := 0 ;
4393: LD_ADDR_LOC 4
4397: PUSH
4398: LD_INT 0
4400: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4401: LD_ADDR_VAR 0 7
4405: PUSH
4406: DOUBLE
4407: LD_INT 1
4409: DEC
4410: ST_TO_ADDR
4411: LD_EXP 20
4415: PUSH
4416: FOR_TO
4417: IFFALSE 4570
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4419: LD_ADDR_VAR 0 4
4423: PUSH
4424: LD_EXP 40
4428: PUSH
4429: LD_VAR 0 3
4433: ARRAY
4434: PUSH
4435: LD_VAR 0 7
4439: ARRAY
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4445: LD_ADDR_VAR 0 5
4449: PUSH
4450: LD_EXP 40
4454: PUSH
4455: LD_VAR 0 3
4459: ARRAY
4460: PUSH
4461: LD_VAR 0 7
4465: ARRAY
4466: PUSH
4467: LD_INT 2
4469: ARRAY
4470: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4471: LD_ADDR_VAR 0 6
4475: PUSH
4476: LD_EXP 40
4480: PUSH
4481: LD_VAR 0 3
4485: ARRAY
4486: PUSH
4487: LD_VAR 0 7
4491: ARRAY
4492: PUSH
4493: LD_INT 3
4495: ARRAY
4496: ST_TO_ADDR
// bc_type := b_breastwork ;
4497: LD_ADDR_OWVAR 42
4501: PUSH
4502: LD_INT 31
4504: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4505: LD_ADDR_VAR 0 9
4509: PUSH
4510: LD_VAR 0 4
4514: PPUSH
4515: LD_VAR 0 5
4519: PPUSH
4520: LD_VAR 0 6
4524: PPUSH
4525: CALL_OW 47
4529: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4530: LD_INT 1
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: LD_INT 0
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: LD_INT 0
4544: PPUSH
4545: LD_VAR 0 9
4549: PPUSH
4550: CALL 2884 0 6
// soldiers_created := soldiers_created + 1 ;
4554: LD_ADDR_LOC 4
4558: PUSH
4559: LD_LOC 4
4563: PUSH
4564: LD_INT 1
4566: PLUS
4567: ST_TO_ADDR
// end ;
4568: GO 4416
4570: POP
4571: POP
// x := start_def [ pos ] [ 1 ] ;
4572: LD_ADDR_VAR 0 4
4576: PUSH
4577: LD_EXP 41
4581: PUSH
4582: LD_VAR 0 3
4586: ARRAY
4587: PUSH
4588: LD_INT 1
4590: ARRAY
4591: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4592: LD_ADDR_VAR 0 5
4596: PUSH
4597: LD_EXP 41
4601: PUSH
4602: LD_VAR 0 3
4606: ARRAY
4607: PUSH
4608: LD_INT 2
4610: ARRAY
4611: ST_TO_ADDR
// if Sheik = 2 and uc_nation = nation_arabian then
4612: LD_EXP 47
4616: PUSH
4617: LD_INT 2
4619: EQUAL
4620: PUSH
4621: LD_OWVAR 21
4625: PUSH
4626: LD_INT 2
4628: EQUAL
4629: AND
4630: IFFALSE 4658
// prepare_people ( 1 , class_desert_warior , x , y , 5 , 0 ) ;
4632: LD_INT 1
4634: PPUSH
4635: LD_INT 11
4637: PPUSH
4638: LD_VAR 0 4
4642: PPUSH
4643: LD_VAR 0 5
4647: PPUSH
4648: LD_INT 5
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: CALL 2884 0 6
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4658: LD_LOC 8
4662: PUSH
4663: LD_EXP 20
4667: MINUS
4668: PPUSH
4669: LD_INT 1
4671: PPUSH
4672: LD_VAR 0 4
4676: PPUSH
4677: LD_VAR 0 5
4681: PPUSH
4682: LD_INT 5
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL 2884 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4692: LD_LOC 5
4696: PPUSH
4697: LD_INT 2
4699: PPUSH
4700: LD_VAR 0 4
4704: PPUSH
4705: LD_VAR 0 5
4709: PPUSH
4710: LD_INT 5
4712: PPUSH
4713: LD_INT 0
4715: PPUSH
4716: CALL 2884 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4720: LD_LOC 7
4724: PPUSH
4725: LD_INT 3
4727: PPUSH
4728: LD_VAR 0 4
4732: PPUSH
4733: LD_VAR 0 5
4737: PPUSH
4738: LD_INT 5
4740: PPUSH
4741: LD_INT 0
4743: PPUSH
4744: CALL 2884 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4748: LD_LOC 6
4752: PPUSH
4753: LD_INT 4
4755: PPUSH
4756: LD_VAR 0 4
4760: PPUSH
4761: LD_VAR 0 5
4765: PPUSH
4766: LD_INT 5
4768: PPUSH
4769: LD_INT 0
4771: PPUSH
4772: CALL 2884 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4776: LD_EXP 10
4780: PUSH
4781: LD_INT 20
4783: PPUSH
4784: LD_VAR 0 1
4788: PPUSH
4789: CALL_OW 321
4793: PUSH
4794: LD_INT 1
4796: EQUAL
4797: AND
4798: IFFALSE 4815
// SetTech ( tech_SibDet , side , state_researched ) ;
4800: LD_INT 20
4802: PPUSH
4803: LD_VAR 0 1
4807: PPUSH
4808: LD_INT 2
4810: PPUSH
4811: CALL_OW 322
// if def_siberite_bomb = 1 then
4815: LD_EXP 13
4819: PUSH
4820: LD_INT 1
4822: EQUAL
4823: IFFALSE 4857
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4825: LD_INT 25
4827: PPUSH
4828: LD_VAR 0 1
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4840: LD_INT 73
4842: PPUSH
4843: LD_VAR 0 1
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: CALL_OW 322
// end else
4855: GO 4887
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4857: LD_INT 25
4859: PPUSH
4860: LD_VAR 0 1
4864: PPUSH
4865: LD_INT 0
4867: PPUSH
4868: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4872: LD_INT 73
4874: PPUSH
4875: LD_VAR 0 1
4879: PPUSH
4880: LD_INT 0
4882: PPUSH
4883: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4887: LD_INT 24
4889: PPUSH
4890: LD_VAR 0 1
4894: PPUSH
4895: LD_INT 0
4897: PPUSH
4898: CALL_OW 322
// global_defined := true ;
4902: LD_ADDR_LOC 3
4906: PUSH
4907: LD_INT 1
4909: ST_TO_ADDR
// end ;
4910: LD_VAR 0 2
4914: RET
// function prepare_sides ; var i ; begin
4915: LD_INT 0
4917: PPUSH
4918: PPUSH
// global_units := [ ] ;
4919: LD_ADDR_LOC 2
4923: PUSH
4924: EMPTY
4925: ST_TO_ADDR
// global_defined := false ;
4926: LD_ADDR_LOC 3
4930: PUSH
4931: LD_INT 0
4933: ST_TO_ADDR
// CountClassMembers ;
4934: CALL 4999 0 0
// for i := 1 to 8 do
4938: LD_ADDR_VAR 0 2
4942: PUSH
4943: DOUBLE
4944: LD_INT 1
4946: DEC
4947: ST_TO_ADDR
4948: LD_INT 8
4950: PUSH
4951: FOR_TO
4952: IFFALSE 4977
// if Side_Positions [ i ] then
4954: LD_EXP 36
4958: PUSH
4959: LD_VAR 0 2
4963: ARRAY
4964: IFFALSE 4975
// prepare_side ( i ) ;
4966: LD_VAR 0 2
4970: PPUSH
4971: CALL 3784 0 1
4975: GO 4951
4977: POP
4978: POP
// if def_mastodont then
4979: LD_EXP 16
4983: IFFALSE 4994
// prepare_mastodonts ( Mastodont ) ;
4985: LD_EXP 48
4989: PPUSH
4990: CALL 3602 0 1
// end ;
4994: LD_VAR 0 1
4998: RET
// function CountClassMembers ; var Mode ; begin
4999: LD_INT 0
5001: PPUSH
5002: PPUSH
// if No_Mechs then
5003: LD_EXP 17
5007: IFFALSE 5019
// Mode := 2 else
5009: LD_ADDR_VAR 0 2
5013: PUSH
5014: LD_INT 2
5016: ST_TO_ADDR
5017: GO 5027
// Mode := 1 ;
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// neng := number_of_people ;
5027: LD_ADDR_LOC 5
5031: PUSH
5032: LD_EXP 21
5036: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5037: LD_ADDR_LOC 8
5041: PUSH
5042: LD_LOC 5
5046: PUSH
5047: LD_INT 4
5049: PUSH
5050: LD_INT 3
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_VAR 0 2
5061: ARRAY
5062: DIV
5063: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5064: LD_LOC 8
5068: PUSH
5069: LD_EXP 20
5073: LESS
5074: IFFALSE 5086
// nsol := number_of_breastworks ;
5076: LD_ADDR_LOC 8
5080: PUSH
5081: LD_EXP 20
5085: ST_TO_ADDR
// neng := neng - nsol ;
5086: LD_ADDR_LOC 5
5090: PUSH
5091: LD_LOC 5
5095: PUSH
5096: LD_LOC 8
5100: MINUS
5101: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5102: LD_ADDR_LOC 6
5106: PUSH
5107: LD_LOC 5
5111: PUSH
5112: LD_INT 3
5114: PUSH
5115: LD_INT 2
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PUSH
5122: LD_VAR 0 2
5126: ARRAY
5127: DIV
5128: ST_TO_ADDR
// if ( nsci < 1 ) then
5129: LD_LOC 6
5133: PUSH
5134: LD_INT 1
5136: LESS
5137: IFFALSE 5147
// nsci := 1 ;
5139: LD_ADDR_LOC 6
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// neng := neng - nsci ;
5147: LD_ADDR_LOC 5
5151: PUSH
5152: LD_LOC 5
5156: PUSH
5157: LD_LOC 6
5161: MINUS
5162: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5163: LD_ADDR_LOC 7
5167: PUSH
5168: LD_LOC 5
5172: PUSH
5173: LD_INT 2
5175: DIV
5176: PUSH
5177: LD_INT 0
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PUSH
5184: LD_VAR 0 2
5188: ARRAY
5189: ST_TO_ADDR
// neng := neng - nmech ;
5190: LD_ADDR_LOC 5
5194: PUSH
5195: LD_LOC 5
5199: PUSH
5200: LD_LOC 7
5204: MINUS
5205: ST_TO_ADDR
// if ( neng < 1 ) then
5206: LD_LOC 5
5210: PUSH
5211: LD_INT 1
5213: LESS
5214: IFFALSE 5224
// neng := 1 ;
5216: LD_ADDR_LOC 5
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// end ;
5224: LD_VAR 0 1
5228: RET
// starting begin disable ( 98 ) ;
5229: LD_INT 98
5231: DISABLE_MARKED
// disable ( 99 ) ;
5232: LD_INT 99
5234: DISABLE_MARKED
// disable ( 400 ) ;
5235: LD_INT 400
5237: DISABLE_MARKED
// disable ( 401 ) ;
5238: LD_INT 401
5240: DISABLE_MARKED
// mp_selectmsg := true ;
5241: LD_ADDR_OWVAR 13
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5249: CALL 68 0 0
// init_map ;
5253: CALL 1307 0 0
// init_respawning ;
5257: CALL 14548 0 0
// set_shared_visions_and_alliances ;
5261: CALL 2596 0 0
// ResetFog ;
5265: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5269: LD_OWVAR 2
5273: PPUSH
5274: CALL_OW 520
// AnimateTrees ( true ) ;
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 573
// prepare_sides ;
5285: CALL 4915 0 0
// Init_Win_Condition ;
5289: CALL 8529 0 0
// ShowTimer ;
5293: CALL 8107 0 0
// music_nat := Side_Nations [ your_side ] ;
5297: LD_ADDR_OWVAR 71
5301: PUSH
5302: LD_EXP 37
5306: PUSH
5307: LD_OWVAR 2
5311: ARRAY
5312: ST_TO_ADDR
// if IAmSpec then
5313: CALL_OW 531
5317: IFFALSE 5341
// begin fogoff ( true ) ;
5319: LD_INT 1
5321: PPUSH
5322: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
5326: LD_INT 130
5328: PPUSH
5329: LD_INT 100
5331: PPUSH
5332: CALL_OW 86
// enable ( 400 ) ;
5336: LD_INT 400
5338: ENABLE_MARKED
// end else
5339: GO 5387
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5341: LD_EXP 41
5345: PUSH
5346: LD_EXP 36
5350: PUSH
5351: LD_OWVAR 2
5355: ARRAY
5356: ARRAY
5357: PUSH
5358: LD_INT 1
5360: ARRAY
5361: PPUSH
5362: LD_EXP 41
5366: PUSH
5367: LD_EXP 36
5371: PUSH
5372: LD_OWVAR 2
5376: ARRAY
5377: ARRAY
5378: PUSH
5379: LD_INT 2
5381: ARRAY
5382: PPUSH
5383: CALL_OW 86
// end ; InitApeman ;
5387: CALL 6625 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
5391: LD_ADDR_EXP 59
5395: PUSH
5396: LD_INT 9
5398: PUSH
5399: LD_INT 10
5401: PUSH
5402: LD_INT 11
5404: PUSH
5405: LD_INT 12
5407: PUSH
5408: LD_INT 13
5410: PUSH
5411: LD_INT 14
5413: PUSH
5414: LD_INT 15
5416: PUSH
5417: LD_INT 16
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: ST_TO_ADDR
// BeginBuildUp ;
5430: CALL 15042 0 0
// end ;
5434: END
// every 0 0$1 do
5435: GO 5437
5437: DISABLE
// if ( def_siberite_bomb > 1 ) then
5438: LD_EXP 13
5442: PUSH
5443: LD_INT 1
5445: GREATER
5446: IFFALSE 5461
// begin wait ( siberite_bomb_Delay ) ;
5448: LD_EXP 31
5452: PPUSH
5453: CALL_OW 67
// EnableSibFiss ;
5457: CALL 5462 0 0
// end ;
5461: END
// function EnableSibFiss ; var i ; begin
5462: LD_INT 0
5464: PPUSH
5465: PPUSH
// for i := 1 to 8 do
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: DOUBLE
5472: LD_INT 1
5474: DEC
5475: ST_TO_ADDR
5476: LD_INT 8
5478: PUSH
5479: FOR_TO
5480: IFFALSE 5526
// if Side_Positions [ i ] then
5482: LD_EXP 36
5486: PUSH
5487: LD_VAR 0 2
5491: ARRAY
5492: IFFALSE 5524
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5494: LD_INT 25
5496: PPUSH
5497: LD_VAR 0 2
5501: PPUSH
5502: LD_INT 1
5504: PPUSH
5505: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5509: LD_INT 73
5511: PPUSH
5512: LD_VAR 0 2
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: CALL_OW 322
// end ;
5524: GO 5479
5526: POP
5527: POP
// end ; end_of_file
5528: LD_VAR 0 1
5532: RET
// every 0 0$25 + 0 0$1.0 do
5533: GO 5535
5535: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5536: LD_INT 22
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: CALL_OW 287
5546: PUSH
5547: LD_INT 200
5549: PUSH
5550: LD_EXP 25
5554: MINUS
5555: PUSH
5556: LD_INT 25
5558: DIVREAL
5559: PUSH
5560: LD_INT 5
5562: MUL
5563: LESS
5564: IFFALSE 5587
// CreateCratesArea ( Rand ( 3 , 4 ) , Between1 , true ) ;
5566: LD_INT 3
5568: PPUSH
5569: LD_INT 4
5571: PPUSH
5572: CALL_OW 12
5576: PPUSH
5577: LD_INT 22
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5587: LD_INT 23
5589: PPUSH
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 287
5597: PUSH
5598: LD_INT 200
5600: PUSH
5601: LD_EXP 25
5605: MINUS
5606: PUSH
5607: LD_INT 25
5609: DIVREAL
5610: PUSH
5611: LD_INT 5
5613: MUL
5614: LESS
5615: IFFALSE 5638
// CreateCratesArea ( Rand ( 3 , 4 ) , Between2 , true ) ;
5617: LD_INT 3
5619: PPUSH
5620: LD_INT 4
5622: PPUSH
5623: CALL_OW 12
5627: PPUSH
5628: LD_INT 23
5630: PPUSH
5631: LD_INT 1
5633: PPUSH
5634: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5638: LD_INT 24
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 287
5648: PUSH
5649: LD_INT 200
5651: PUSH
5652: LD_EXP 25
5656: MINUS
5657: PUSH
5658: LD_INT 25
5660: DIVREAL
5661: PUSH
5662: LD_INT 5
5664: MUL
5665: LESS
5666: IFFALSE 5689
// CreateCratesArea ( Rand ( 3 , 4 ) , Between3 , true ) ;
5668: LD_INT 3
5670: PPUSH
5671: LD_INT 4
5673: PPUSH
5674: CALL_OW 12
5678: PPUSH
5679: LD_INT 24
5681: PPUSH
5682: LD_INT 1
5684: PPUSH
5685: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5689: LD_INT 25
5691: PPUSH
5692: LD_INT 1
5694: PPUSH
5695: CALL_OW 287
5699: PUSH
5700: LD_INT 200
5702: PUSH
5703: LD_EXP 25
5707: MINUS
5708: PUSH
5709: LD_INT 25
5711: DIVREAL
5712: PUSH
5713: LD_INT 5
5715: MUL
5716: LESS
5717: IFFALSE 5740
// CreateCratesArea ( Rand ( 3 , 4 ) , Between4 , true ) ;
5719: LD_INT 3
5721: PPUSH
5722: LD_INT 4
5724: PPUSH
5725: CALL_OW 12
5729: PPUSH
5730: LD_INT 25
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: CALL_OW 55
// if GetResourceArea ( Ring1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5740: LD_INT 26
5742: PPUSH
5743: LD_INT 1
5745: PPUSH
5746: CALL_OW 287
5750: PUSH
5751: LD_INT 200
5753: PUSH
5754: LD_EXP 25
5758: MINUS
5759: PUSH
5760: LD_INT 50
5762: DIVREAL
5763: PUSH
5764: LD_INT 5
5766: MUL
5767: LESS
5768: IFFALSE 5791
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring1 , true ) ;
5770: LD_INT 3
5772: PPUSH
5773: LD_INT 4
5775: PPUSH
5776: CALL_OW 12
5780: PPUSH
5781: LD_INT 26
5783: PPUSH
5784: LD_INT 1
5786: PPUSH
5787: CALL_OW 55
// if GetResourceArea ( Ring2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5791: LD_INT 27
5793: PPUSH
5794: LD_INT 1
5796: PPUSH
5797: CALL_OW 287
5801: PUSH
5802: LD_INT 200
5804: PUSH
5805: LD_EXP 25
5809: MINUS
5810: PUSH
5811: LD_INT 50
5813: DIVREAL
5814: PUSH
5815: LD_INT 5
5817: MUL
5818: LESS
5819: IFFALSE 5842
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring2 , true ) ;
5821: LD_INT 3
5823: PPUSH
5824: LD_INT 4
5826: PPUSH
5827: CALL_OW 12
5831: PPUSH
5832: LD_INT 27
5834: PPUSH
5835: LD_INT 1
5837: PPUSH
5838: CALL_OW 55
// if GetResourceArea ( Ring3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5842: LD_INT 28
5844: PPUSH
5845: LD_INT 1
5847: PPUSH
5848: CALL_OW 287
5852: PUSH
5853: LD_INT 200
5855: PUSH
5856: LD_EXP 25
5860: MINUS
5861: PUSH
5862: LD_INT 50
5864: DIVREAL
5865: PUSH
5866: LD_INT 5
5868: MUL
5869: LESS
5870: IFFALSE 5893
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring3 , true ) ;
5872: LD_INT 3
5874: PPUSH
5875: LD_INT 4
5877: PPUSH
5878: CALL_OW 12
5882: PPUSH
5883: LD_INT 28
5885: PPUSH
5886: LD_INT 1
5888: PPUSH
5889: CALL_OW 55
// if GetResourceArea ( Ring4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5893: LD_INT 29
5895: PPUSH
5896: LD_INT 1
5898: PPUSH
5899: CALL_OW 287
5903: PUSH
5904: LD_INT 200
5906: PUSH
5907: LD_EXP 25
5911: MINUS
5912: PUSH
5913: LD_INT 50
5915: DIVREAL
5916: PUSH
5917: LD_INT 5
5919: MUL
5920: LESS
5921: IFFALSE 5944
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring4 , true ) ;
5923: LD_INT 3
5925: PPUSH
5926: LD_INT 4
5928: PPUSH
5929: CALL_OW 12
5933: PPUSH
5934: LD_INT 29
5936: PPUSH
5937: LD_INT 1
5939: PPUSH
5940: CALL_OW 55
// if GetResourceArea ( MZCenter , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5944: LD_INT 21
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: CALL_OW 287
5954: PUSH
5955: LD_INT 200
5957: PUSH
5958: LD_EXP 25
5962: MINUS
5963: PUSH
5964: LD_INT 25
5966: DIVREAL
5967: PUSH
5968: LD_INT 5
5970: MUL
5971: LESS
5972: IFFALSE 5987
// CreateCratesArea ( 5 , MZCenter , true ) ;
5974: LD_INT 5
5976: PPUSH
5977: LD_INT 21
5979: PPUSH
5980: LD_INT 1
5982: PPUSH
5983: CALL_OW 55
// enable ;
5987: ENABLE
// end ;
5988: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5989: GO 5991
5991: DISABLE
5992: LD_INT 0
5994: PPUSH
5995: PPUSH
// begin case tick of 1 .. 1 1$0 :
5996: LD_OWVAR 1
6000: PUSH
6001: LD_INT 1
6003: DOUBLE
6004: GREATEREQUAL
6005: IFFALSE 6013
6007: LD_INT 2100
6009: DOUBLE
6010: LESSEQUAL
6011: IFTRUE 6015
6013: GO 6043
6015: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
6016: LD_EXP 25
6020: PUSH
6021: LD_INT 100
6023: DIVREAL
6024: PUSH
6025: LD_INT 525
6027: PPUSH
6028: LD_INT 1050
6030: PPUSH
6031: CALL_OW 12
6035: MUL
6036: PPUSH
6037: CALL_OW 67
6041: GO 6345
6043: LD_INT 2100
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: DOUBLE
6050: GREATEREQUAL
6051: IFFALSE 6059
6053: LD_INT 10500
6055: DOUBLE
6056: LESSEQUAL
6057: IFTRUE 6061
6059: GO 6089
6061: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
6062: LD_EXP 25
6066: PUSH
6067: LD_INT 100
6069: DIVREAL
6070: PUSH
6071: LD_INT 1050
6073: PPUSH
6074: LD_INT 1750
6076: PPUSH
6077: CALL_OW 12
6081: MUL
6082: PPUSH
6083: CALL_OW 67
6087: GO 6345
6089: LD_INT 10500
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: DOUBLE
6096: GREATEREQUAL
6097: IFFALSE 6105
6099: LD_INT 21000
6101: DOUBLE
6102: LESSEQUAL
6103: IFTRUE 6107
6105: GO 6135
6107: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
6108: LD_EXP 25
6112: PUSH
6113: LD_INT 100
6115: DIVREAL
6116: PUSH
6117: LD_INT 1750
6119: PPUSH
6120: LD_INT 2100
6122: PPUSH
6123: CALL_OW 12
6127: MUL
6128: PPUSH
6129: CALL_OW 67
6133: GO 6345
6135: LD_INT 21000
6137: PUSH
6138: LD_INT 1
6140: PLUS
6141: DOUBLE
6142: GREATEREQUAL
6143: IFFALSE 6151
6145: LD_INT 42000
6147: DOUBLE
6148: LESSEQUAL
6149: IFTRUE 6153
6151: GO 6181
6153: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6154: LD_EXP 25
6158: PUSH
6159: LD_INT 100
6161: DIVREAL
6162: PUSH
6163: LD_INT 2100
6165: PPUSH
6166: LD_INT 2275
6168: PPUSH
6169: CALL_OW 12
6173: MUL
6174: PPUSH
6175: CALL_OW 67
6179: GO 6345
6181: LD_INT 42000
6183: PUSH
6184: LD_INT 1
6186: PLUS
6187: DOUBLE
6188: GREATEREQUAL
6189: IFFALSE 6197
6191: LD_INT 63000
6193: DOUBLE
6194: LESSEQUAL
6195: IFTRUE 6199
6197: GO 6227
6199: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6200: LD_EXP 25
6204: PUSH
6205: LD_INT 100
6207: DIVREAL
6208: PUSH
6209: LD_INT 2275
6211: PPUSH
6212: LD_INT 2450
6214: PPUSH
6215: CALL_OW 12
6219: MUL
6220: PPUSH
6221: CALL_OW 67
6225: GO 6345
6227: LD_INT 63000
6229: PUSH
6230: LD_INT 1
6232: PLUS
6233: DOUBLE
6234: GREATEREQUAL
6235: IFFALSE 6243
6237: LD_INT 105000
6239: DOUBLE
6240: LESSEQUAL
6241: IFTRUE 6245
6243: GO 6273
6245: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6246: LD_EXP 25
6250: PUSH
6251: LD_INT 100
6253: DIVREAL
6254: PUSH
6255: LD_INT 2450
6257: PPUSH
6258: LD_INT 2800
6260: PPUSH
6261: CALL_OW 12
6265: MUL
6266: PPUSH
6267: CALL_OW 67
6271: GO 6345
6273: LD_INT 105000
6275: PUSH
6276: LD_INT 1
6278: PLUS
6279: DOUBLE
6280: GREATEREQUAL
6281: IFFALSE 6289
6283: LD_INT 630000
6285: DOUBLE
6286: LESSEQUAL
6287: IFTRUE 6291
6289: GO 6319
6291: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
6292: LD_EXP 25
6296: PUSH
6297: LD_INT 100
6299: DIVREAL
6300: PUSH
6301: LD_INT 2800
6303: PPUSH
6304: LD_INT 3500
6306: PPUSH
6307: CALL_OW 12
6311: MUL
6312: PPUSH
6313: CALL_OW 67
6317: GO 6345
6319: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
6320: LD_EXP 25
6324: PUSH
6325: LD_INT 100
6327: DIVREAL
6328: PUSH
6329: LD_INT 3500
6331: PPUSH
6332: LD_INT 3850
6334: PPUSH
6335: CALL_OW 12
6339: MUL
6340: PPUSH
6341: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6345: LD_ADDR_VAR 0 2
6349: PUSH
6350: LD_INT 3
6352: PPUSH
6353: LD_INT 5
6355: PPUSH
6356: CALL_OW 12
6360: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6361: LD_ADDR_VAR 0 1
6365: PUSH
6366: LD_EXP 36
6370: PUSH
6371: LD_INT 0
6373: PUSH
6374: EMPTY
6375: LIST
6376: DIFF
6377: PUSH
6378: FOR_IN
6379: IFFALSE 6428
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
6381: LD_VAR 0 2
6385: PPUSH
6386: LD_EXP 41
6390: PUSH
6391: LD_VAR 0 1
6395: ARRAY
6396: PUSH
6397: LD_INT 1
6399: ARRAY
6400: PPUSH
6401: LD_EXP 41
6405: PUSH
6406: LD_VAR 0 1
6410: ARRAY
6411: PUSH
6412: LD_INT 2
6414: ARRAY
6415: PPUSH
6416: LD_INT 20
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 56
6426: GO 6378
6428: POP
6429: POP
// enable ;
6430: ENABLE
// end ; end_of_file
6431: PPOPN 2
6433: END
// every 20 20$00 trigger apemanNumber do
6434: LD_EXP 50
6438: IFFALSE 6471
6440: GO 6442
6442: DISABLE
// begin enable ;
6443: ENABLE
// if apeLevel >= 8 then
6444: LD_EXP 55
6448: PUSH
6449: LD_INT 8
6451: GREATEREQUAL
6452: IFFALSE 6457
// disable else
6454: DISABLE
6455: GO 6471
// apeLevel := apeLevel + 1 ;
6457: LD_ADDR_EXP 55
6461: PUSH
6462: LD_EXP 55
6466: PUSH
6467: LD_INT 1
6469: PLUS
6470: ST_TO_ADDR
// end ;
6471: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6472: LD_EXP 50
6476: PUSH
6477: LD_EXP 51
6481: LESS
6482: IFFALSE 6622
6484: GO 6486
6486: DISABLE
6487: LD_INT 0
6489: PPUSH
6490: PPUSH
6491: PPUSH
6492: PPUSH
// begin enable ;
6493: ENABLE
// for i := 1 to apemanPos do
6494: LD_ADDR_VAR 0 1
6498: PUSH
6499: DOUBLE
6500: LD_INT 1
6502: DEC
6503: ST_TO_ADDR
6504: LD_EXP 53
6508: PUSH
6509: FOR_TO
6510: IFFALSE 6620
// begin if apemanPlayerCount [ i ] then
6512: LD_EXP 54
6516: PUSH
6517: LD_VAR 0 1
6521: ARRAY
6522: IFFALSE 6618
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6524: LD_EXP 54
6528: PUSH
6529: LD_VAR 0 1
6533: ARRAY
6534: PUSH
6535: LD_EXP 53
6539: PUSH
6540: LD_VAR 0 1
6544: ARRAY
6545: GREATER
6546: IFFALSE 6618
// begin ape := PrepareApeman ;
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: CALL 7141 0 0
6557: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6558: LD_VAR 0 2
6562: PPUSH
6563: LD_EXP 56
6567: PUSH
6568: LD_VAR 0 1
6572: ARRAY
6573: PPUSH
6574: LD_INT 0
6576: PPUSH
6577: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6581: LD_ADDR_EXP 53
6585: PUSH
6586: LD_EXP 53
6590: PPUSH
6591: LD_VAR 0 1
6595: PPUSH
6596: LD_EXP 53
6600: PUSH
6601: LD_VAR 0 1
6605: ARRAY
6606: PUSH
6607: LD_VAR 0 2
6611: UNION
6612: PPUSH
6613: CALL_OW 1
6617: ST_TO_ADDR
// end ; end ; end ;
6618: GO 6509
6620: POP
6621: POP
// end ;
6622: PPOPN 4
6624: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6625: LD_INT 0
6627: PPUSH
6628: PPUSH
6629: PPUSH
6630: PPUSH
6631: PPUSH
6632: PPUSH
6633: PPUSH
// playersAmount := 0 ;
6634: LD_ADDR_VAR 0 3
6638: PUSH
6639: LD_INT 0
6641: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6642: LD_ADDR_VAR 0 7
6646: PUSH
6647: LD_INT 1
6649: PUSH
6650: LD_INT 2
6652: PUSH
6653: LD_INT 3
6655: PUSH
6656: LD_INT 4
6658: PUSH
6659: LD_INT 5
6661: PUSH
6662: LD_INT 6
6664: PUSH
6665: LD_INT 7
6667: PUSH
6668: LD_INT 8
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6681: LD_ADDR_EXP 56
6685: PUSH
6686: LD_INT 0
6688: PUSH
6689: LD_INT 0
6691: PUSH
6692: LD_INT 0
6694: PUSH
6695: LD_INT 0
6697: PUSH
6698: LD_INT 0
6700: PUSH
6701: LD_INT 0
6703: PUSH
6704: LD_INT 0
6706: PUSH
6707: LD_INT 0
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: ST_TO_ADDR
// for j = 1 to Side_Positions do
6720: LD_ADDR_VAR 0 4
6724: PUSH
6725: DOUBLE
6726: LD_INT 1
6728: DEC
6729: ST_TO_ADDR
6730: LD_EXP 36
6734: PUSH
6735: FOR_TO
6736: IFFALSE 6803
// if Side_Positions [ j ] then
6738: LD_EXP 36
6742: PUSH
6743: LD_VAR 0 4
6747: ARRAY
6748: IFFALSE 6801
// begin playersAmount := playersAmount + 1 ;
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_VAR 0 3
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6764: LD_ADDR_EXP 56
6768: PUSH
6769: LD_EXP 56
6773: PPUSH
6774: LD_VAR 0 4
6778: PPUSH
6779: LD_VAR 0 7
6783: PUSH
6784: LD_EXP 36
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: ARRAY
6795: PPUSH
6796: CALL_OW 1
6800: ST_TO_ADDR
// end ;
6801: GO 6735
6803: POP
6804: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6805: LD_ADDR_EXP 52
6809: PUSH
6810: LD_INT 3
6812: PUSH
6813: LD_EXP 27
6817: MUL
6818: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6819: LD_ADDR_EXP 50
6823: PUSH
6824: LD_VAR 0 3
6828: PUSH
6829: LD_EXP 52
6833: MUL
6834: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6835: LD_ADDR_EXP 51
6839: PUSH
6840: LD_EXP 50
6844: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6845: LD_ADDR_EXP 53
6849: PUSH
6850: LD_INT 0
6852: PUSH
6853: LD_INT 0
6855: PUSH
6856: LD_INT 0
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: LD_INT 0
6864: PUSH
6865: LD_INT 0
6867: PUSH
6868: LD_INT 0
6870: PUSH
6871: LD_INT 0
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6884: LD_ADDR_EXP 54
6888: PUSH
6889: LD_INT 0
6891: PUSH
6892: LD_INT 0
6894: PUSH
6895: LD_INT 0
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: LD_INT 0
6903: PUSH
6904: LD_INT 0
6906: PUSH
6907: LD_INT 0
6909: PUSH
6910: LD_INT 0
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: ST_TO_ADDR
// apeLevel := 1 ;
6923: LD_ADDR_EXP 55
6927: PUSH
6928: LD_INT 1
6930: ST_TO_ADDR
// if not apemanNumber then
6931: LD_EXP 50
6935: NOT
6936: IFFALSE 6940
// exit ;
6938: GO 7136
// for i := 1 to apemanPerPlayer do
6940: LD_ADDR_VAR 0 2
6944: PUSH
6945: DOUBLE
6946: LD_INT 1
6948: DEC
6949: ST_TO_ADDR
6950: LD_EXP 52
6954: PUSH
6955: FOR_TO
6956: IFFALSE 7134
// begin for j := 1 to Side_Positions do
6958: LD_ADDR_VAR 0 4
6962: PUSH
6963: DOUBLE
6964: LD_INT 1
6966: DEC
6967: ST_TO_ADDR
6968: LD_EXP 36
6972: PUSH
6973: FOR_TO
6974: IFFALSE 7130
// if Side_Positions [ j ] then
6976: LD_EXP 36
6980: PUSH
6981: LD_VAR 0 4
6985: ARRAY
6986: IFFALSE 7128
// begin pos := Side_Positions [ j ] ;
6988: LD_ADDR_VAR 0 6
6992: PUSH
6993: LD_EXP 36
6997: PUSH
6998: LD_VAR 0 4
7002: ARRAY
7003: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7004: LD_ADDR_EXP 54
7008: PUSH
7009: LD_EXP 54
7013: PPUSH
7014: LD_VAR 0 4
7018: PPUSH
7019: LD_EXP 54
7023: PUSH
7024: LD_VAR 0 4
7028: ARRAY
7029: PUSH
7030: LD_INT 1
7032: PLUS
7033: PPUSH
7034: CALL_OW 1
7038: ST_TO_ADDR
// ape := PrepareApeman ;
7039: LD_ADDR_VAR 0 5
7043: PUSH
7044: CALL 7141 0 0
7048: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7049: LD_ADDR_EXP 53
7053: PUSH
7054: LD_EXP 53
7058: PPUSH
7059: LD_VAR 0 4
7063: PPUSH
7064: LD_EXP 53
7068: PUSH
7069: LD_VAR 0 4
7073: ARRAY
7074: PPUSH
7075: LD_EXP 53
7079: PUSH
7080: LD_VAR 0 4
7084: ARRAY
7085: PUSH
7086: LD_INT 1
7088: PLUS
7089: PPUSH
7090: LD_VAR 0 5
7094: PPUSH
7095: CALL_OW 1
7099: PPUSH
7100: CALL_OW 1
7104: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7105: LD_VAR 0 5
7109: PPUSH
7110: LD_EXP 56
7114: PUSH
7115: LD_VAR 0 4
7119: ARRAY
7120: PPUSH
7121: LD_INT 0
7123: PPUSH
7124: CALL_OW 49
// end ;
7128: GO 6973
7130: POP
7131: POP
// end ;
7132: GO 6955
7134: POP
7135: POP
// end ;
7136: LD_VAR 0 1
7140: RET
// export function PrepareApeman ; var bonus ; begin
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
// uc_side := 0 ;
7145: LD_ADDR_OWVAR 20
7149: PUSH
7150: LD_INT 0
7152: ST_TO_ADDR
// uc_nation := 0 ;
7153: LD_ADDR_OWVAR 21
7157: PUSH
7158: LD_INT 0
7160: ST_TO_ADDR
// InitHc ;
7161: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_INT 1
7172: NEG
7173: PUSH
7174: LD_INT 0
7176: PUSH
7177: LD_INT 1
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_OWVAR 1
7189: PUSH
7190: LD_INT 3
7192: MOD
7193: PUSH
7194: LD_INT 1
7196: PLUS
7197: ARRAY
7198: ST_TO_ADDR
// hc_class := class_apeman ;
7199: LD_ADDR_OWVAR 28
7203: PUSH
7204: LD_INT 12
7206: ST_TO_ADDR
// hc_gallery :=  ;
7207: LD_ADDR_OWVAR 33
7211: PUSH
7212: LD_STRING 
7214: ST_TO_ADDR
// hc_name :=  ;
7215: LD_ADDR_OWVAR 26
7219: PUSH
7220: LD_STRING 
7222: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7223: LD_ADDR_OWVAR 31
7227: PUSH
7228: LD_EXP 55
7232: PUSH
7233: LD_VAR 0 2
7237: PLUS
7238: PUSH
7239: LD_EXP 55
7243: PUSH
7244: LD_VAR 0 2
7248: PLUS
7249: PUSH
7250: LD_EXP 55
7254: PUSH
7255: LD_VAR 0 2
7259: PLUS
7260: PUSH
7261: LD_EXP 55
7265: PUSH
7266: LD_VAR 0 2
7270: PLUS
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7278: LD_ADDR_OWVAR 35
7282: PUSH
7283: LD_INT 10
7285: PUSH
7286: LD_VAR 0 2
7290: MUL
7291: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7292: LD_ADDR_OWVAR 29
7296: PUSH
7297: LD_INT 12
7299: PUSH
7300: LD_INT 10
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: ST_TO_ADDR
// result := CreateHuman ;
7307: LD_ADDR_VAR 0 1
7311: PUSH
7312: CALL_OW 44
7316: ST_TO_ADDR
// end ;
7317: LD_VAR 0 1
7321: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7322: LD_INT 0
7324: PPUSH
7325: PPUSH
7326: PPUSH
// if not ape then
7327: LD_VAR 0 1
7331: NOT
7332: IFFALSE 7336
// exit ;
7334: GO 7461
// side := GetSide ( ape ) ;
7336: LD_ADDR_VAR 0 3
7340: PUSH
7341: LD_VAR 0 1
7345: PPUSH
7346: CALL_OW 255
7350: ST_TO_ADDR
// if not side then
7351: LD_VAR 0 3
7355: NOT
7356: IFFALSE 7410
// begin for i = 1 to apemanPos do
7358: LD_ADDR_VAR 0 4
7362: PUSH
7363: DOUBLE
7364: LD_INT 1
7366: DEC
7367: ST_TO_ADDR
7368: LD_EXP 53
7372: PUSH
7373: FOR_TO
7374: IFFALSE 7408
// if ape in apemanPos [ i ] then
7376: LD_VAR 0 1
7380: PUSH
7381: LD_EXP 53
7385: PUSH
7386: LD_VAR 0 4
7390: ARRAY
7391: IN
7392: IFFALSE 7406
// begin side := i ;
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_VAR 0 4
7403: ST_TO_ADDR
// break ;
7404: GO 7408
// end ;
7406: GO 7373
7408: POP
7409: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7410: LD_ADDR_EXP 53
7414: PUSH
7415: LD_EXP 53
7419: PPUSH
7420: LD_VAR 0 3
7424: PPUSH
7425: LD_EXP 53
7429: PUSH
7430: LD_VAR 0 3
7434: ARRAY
7435: PUSH
7436: LD_VAR 0 1
7440: DIFF
7441: PPUSH
7442: CALL_OW 1
7446: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7447: LD_ADDR_EXP 50
7451: PUSH
7452: LD_EXP 50
7456: PUSH
7457: LD_INT 1
7459: MINUS
7460: ST_TO_ADDR
// end ; end_of_file
7461: LD_VAR 0 2
7465: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 266
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: LD_INT 1
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: IN
7486: IFFALSE 7511
// SetBName ( b , @ & GetSide ( b ) ) ;
7488: LD_VAR 0 1
7492: PPUSH
7493: LD_STRING @
7495: PUSH
7496: LD_VAR 0 1
7500: PPUSH
7501: CALL_OW 255
7505: STR
7506: PPUSH
7507: CALL_OW 500
// end ;
7511: PPOPN 2
7513: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7514: LD_VAR 0 1
7518: PPUSH
7519: CALL_OW 266
7523: PUSH
7524: LD_INT 0
7526: PUSH
7527: LD_INT 1
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: IN
7534: IFFALSE 7559
// SetBName ( b , @ & GetSide ( b ) ) ;
7536: LD_VAR 0 1
7540: PPUSH
7541: LD_STRING @
7543: PUSH
7544: LD_VAR 0 1
7548: PPUSH
7549: CALL_OW 255
7553: STR
7554: PPUSH
7555: CALL_OW 500
// end ;
7559: PPOPN 3
7561: END
// on VehicleConstructed ( veh , fac ) do var side ;
7562: LD_INT 0
7564: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 263
7574: PUSH
7575: LD_INT 5
7577: EQUAL
7578: IFFALSE 7720
// begin side := GetSide ( veh ) ;
7580: LD_ADDR_VAR 0 3
7584: PUSH
7585: LD_VAR 0 1
7589: PPUSH
7590: CALL_OW 255
7594: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7595: LD_ADDR_EXP 53
7599: PUSH
7600: LD_EXP 53
7604: PPUSH
7605: LD_VAR 0 3
7609: PPUSH
7610: LD_EXP 53
7614: PUSH
7615: LD_VAR 0 3
7619: ARRAY
7620: PPUSH
7621: LD_INT 52
7623: PUSH
7624: EMPTY
7625: LIST
7626: PPUSH
7627: CALL_OW 72
7631: PUSH
7632: LD_INT 22
7634: PUSH
7635: LD_VAR 0 3
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 2
7646: PUSH
7647: LD_INT 33
7649: PUSH
7650: LD_INT 5
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: LD_INT 25
7659: PUSH
7660: LD_INT 12
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_INT 25
7669: PUSH
7670: LD_INT 15
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PUSH
7677: LD_INT 25
7679: PUSH
7680: LD_INT 16
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 25
7689: PUSH
7690: LD_INT 17
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PPUSH
7709: CALL_OW 69
7713: UNION
7714: PPUSH
7715: CALL_OW 1
7719: ST_TO_ADDR
// end ; end ;
7720: PPOPN 3
7722: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7723: LD_INT 0
7725: PPUSH
7726: PPUSH
7727: PPUSH
7728: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7729: LD_VAR 0 1
7733: PPUSH
7734: CALL_OW 257
7738: PUSH
7739: LD_INT 12
7741: PUSH
7742: LD_INT 15
7744: PUSH
7745: LD_INT 17
7747: PUSH
7748: LD_INT 16
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: IN
7757: PUSH
7758: LD_VAR 0 1
7762: PPUSH
7763: CALL_OW 263
7767: PUSH
7768: LD_INT 5
7770: EQUAL
7771: OR
7772: IFFALSE 7783
// ApeKilled ( j ) ;
7774: LD_VAR 0 1
7778: PPUSH
7779: CALL 7322 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7783: LD_VAR 0 1
7787: PPUSH
7788: CALL_OW 266
7792: PUSH
7793: LD_INT 0
7795: PUSH
7796: LD_INT 1
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: IN
7803: IFFALSE 7885
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7805: LD_ADDR_VAR 0 4
7809: PUSH
7810: LD_EXP 36
7814: PUSH
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 255
7824: ARRAY
7825: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7826: LD_ADDR_VAR 0 2
7830: PUSH
7831: LD_EXP 41
7835: PUSH
7836: LD_VAR 0 4
7840: ARRAY
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7846: LD_ADDR_VAR 0 3
7850: PUSH
7851: LD_EXP 41
7855: PUSH
7856: LD_VAR 0 4
7860: ARRAY
7861: PUSH
7862: LD_INT 2
7864: ARRAY
7865: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7866: LD_VAR 0 2
7870: PPUSH
7871: LD_VAR 0 3
7875: PPUSH
7876: CALL_OW 420
7880: PPUSH
7881: CALL_OW 419
// end ; end ;
7885: PPOPN 5
7887: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7888: LD_VAR 0 1
7892: PPUSH
7893: LD_VAR 0 2
7897: PPUSH
7898: LD_VAR 0 3
7902: PPUSH
7903: LD_OWVAR 2
7907: PPUSH
7908: CALL 8290 0 4
7912: PPOPN 3
7914: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7915: LD_INT 0
7917: PPUSH
7918: PPUSH
// for un in battle_flags_id do
7919: LD_ADDR_VAR 0 2
7923: PUSH
7924: LD_EXP 46
7928: PUSH
7929: FOR_IN
7930: IFFALSE 8005
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7932: LD_VAR 0 2
7936: PPUSH
7937: LD_INT 1
7939: PUSH
7940: LD_LOC 9
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 2
7951: PUSH
7952: LD_LOC 9
7956: PUSH
7957: LD_INT 2
7959: DIV
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 3
7967: PUSH
7968: LD_LOC 9
7972: PUSH
7973: LD_INT 5
7975: DIV
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 20
7983: PUSH
7984: LD_LOC 9
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PPUSH
7999: CALL_OW 423
8003: GO 7929
8005: POP
8006: POP
// end ;
8007: LD_VAR 0 1
8011: RET
// every 1 do var un ;
8012: GO 8014
8014: DISABLE
8015: LD_INT 0
8017: PPUSH
// begin if not def_morale_flags then
8018: LD_EXP 9
8022: NOT
8023: IFFALSE 8027
// exit ;
8025: GO 8104
// if not morale_decreasing_time then
8027: LD_EXP 26
8031: NOT
8032: IFFALSE 8036
// exit ;
8034: GO 8104
// strength = 100 ;
8036: LD_ADDR_LOC 9
8040: PUSH
8041: LD_INT 100
8043: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8044: LD_EXP 26
8048: PPUSH
8049: CALL_OW 67
// strength := strength - 1 ;
8053: LD_ADDR_LOC 9
8057: PUSH
8058: LD_LOC 9
8062: PUSH
8063: LD_INT 1
8065: MINUS
8066: ST_TO_ADDR
// Update_Flags ;
8067: CALL 7915 0 0
// until not strength ;
8071: LD_LOC 9
8075: NOT
8076: IFFALSE 8044
// for un in battle_flags_id do
8078: LD_ADDR_VAR 0 1
8082: PUSH
8083: LD_EXP 46
8087: PUSH
8088: FOR_IN
8089: IFFALSE 8102
// KillBattleFlag ( un ) ;
8091: LD_VAR 0 1
8095: PPUSH
8096: CALL_OW 419
8100: GO 8088
8102: POP
8103: POP
// end ; end_of_file
8104: PPOPN 1
8106: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
8107: LD_INT 0
8109: PPUSH
8110: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
8111: LD_ADDR_VAR 0 2
8115: PUSH
8116: LD_STRING #Multi1x1-Time
8118: PUSH
8119: LD_OWVAR 1
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: ST_TO_ADDR
// if WaitServerStrings then
8128: LD_EXP 58
8132: IFFALSE 8150
// AllStrings = AllStrings ^ WaitServerStrings ;
8134: LD_ADDR_VAR 0 2
8138: PUSH
8139: LD_VAR 0 2
8143: PUSH
8144: LD_EXP 58
8148: ADD
8149: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8150: LD_INT 0
8152: PUSH
8153: LD_EXP 31
8157: PUSH
8158: LD_OWVAR 1
8162: MINUS
8163: LESSEQUAL
8164: IFFALSE 8195
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8166: LD_ADDR_VAR 0 2
8170: PUSH
8171: LD_VAR 0 2
8175: PUSH
8176: LD_STRING #allowedsibbomb
8178: PUSH
8179: LD_EXP 31
8183: PUSH
8184: LD_OWVAR 1
8188: MINUS
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: ADD
8194: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8195: LD_INT 0
8197: PUSH
8198: LD_EXP 61
8202: PUSH
8203: LD_OWVAR 1
8207: MINUS
8208: LESSEQUAL
8209: IFFALSE 8240
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
8211: LD_ADDR_VAR 0 2
8215: PUSH
8216: LD_VAR 0 2
8220: PUSH
8221: LD_STRING #builduptime
8223: PUSH
8224: LD_EXP 61
8228: PUSH
8229: LD_OWVAR 1
8233: MINUS
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: ADD
8239: ST_TO_ADDR
// if ( ExtraStrings ) then
8240: LD_EXP 57
8244: IFFALSE 8266
// AllStrings := AllStrings ^  ^ ExtraStrings ;
8246: LD_ADDR_VAR 0 2
8250: PUSH
8251: LD_VAR 0 2
8255: PUSH
8256: LD_STRING 
8258: ADD
8259: PUSH
8260: LD_EXP 57
8264: ADD
8265: ST_TO_ADDR
// Display_Strings := AllStrings ;
8266: LD_ADDR_OWVAR 47
8270: PUSH
8271: LD_VAR 0 2
8275: ST_TO_ADDR
// end ;
8276: LD_VAR 0 1
8280: RET
// every 0 0$1 do
8281: GO 8283
8283: DISABLE
// begin ShowTimer ;
8284: CALL 8107 0 0
// enable ;
8288: ENABLE
// end ; end_of_file
8289: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8290: LD_INT 0
8292: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8293: LD_VAR 0 1
8297: PPUSH
8298: CALL_OW 255
8302: PUSH
8303: LD_VAR 0 4
8307: EQUAL
8308: IFFALSE 8327
// begin SetAchievement ( ACH_RAD ) ;
8310: LD_STRING ACH_RAD
8312: PPUSH
8313: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8317: LD_STRING ACH_NL
8319: PPUSH
8320: LD_INT 1
8322: PPUSH
8323: CALL_OW 564
// end end ;
8327: LD_VAR 0 5
8331: RET
// export function SA_Win ( side ) ; begin
8332: LD_INT 0
8334: PPUSH
// case side of 1 :
8335: LD_VAR 0 1
8339: PUSH
8340: LD_INT 1
8342: DOUBLE
8343: EQUAL
8344: IFTRUE 8348
8346: GO 8361
8348: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8349: LD_STRING ACH_AH
8351: PPUSH
8352: LD_INT 1
8354: PPUSH
8355: CALL_OW 564
8359: GO 8524
8361: LD_INT 2
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8382
8369: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8370: LD_STRING ACH_E
8372: PPUSH
8373: LD_INT 1
8375: PPUSH
8376: CALL_OW 564
8380: GO 8524
8382: LD_INT 3
8384: DOUBLE
8385: EQUAL
8386: IFTRUE 8390
8388: GO 8403
8390: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8391: LD_STRING ACH_OOL
8393: PPUSH
8394: LD_INT 1
8396: PPUSH
8397: CALL_OW 564
8401: GO 8524
8403: LD_INT 1
8405: PUSH
8406: LD_INT 2
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: DOUBLE
8413: EQUAL
8414: IFTRUE 8418
8416: GO 8443
8418: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8419: LD_STRING ACH_AH
8421: PPUSH
8422: LD_REAL  5.00000000000000E-0001
8425: PPUSH
8426: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8430: LD_STRING ACH_E
8432: PPUSH
8433: LD_REAL  5.00000000000000E-0001
8436: PPUSH
8437: CALL_OW 564
// end ; [ 2 , 3 ] :
8441: GO 8524
8443: LD_INT 2
8445: PUSH
8446: LD_INT 3
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: DOUBLE
8453: EQUAL
8454: IFTRUE 8458
8456: GO 8483
8458: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8459: LD_STRING ACH_OOL
8461: PPUSH
8462: LD_REAL  5.00000000000000E-0001
8465: PPUSH
8466: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8470: LD_STRING ACH_E
8472: PPUSH
8473: LD_REAL  5.00000000000000E-0001
8476: PPUSH
8477: CALL_OW 564
// end ; [ 3 , 1 ] :
8481: GO 8524
8483: LD_INT 3
8485: PUSH
8486: LD_INT 1
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: DOUBLE
8493: EQUAL
8494: IFTRUE 8498
8496: GO 8523
8498: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8499: LD_STRING ACH_AH
8501: PPUSH
8502: LD_REAL  5.00000000000000E-0001
8505: PPUSH
8506: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8510: LD_STRING ACH_OOL
8512: PPUSH
8513: LD_REAL  5.00000000000000E-0001
8516: PPUSH
8517: CALL_OW 564
// end ; end ;
8521: GO 8524
8523: POP
// end ; end_of_file
8524: LD_VAR 0 2
8528: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8529: LD_INT 0
8531: PPUSH
8532: PPUSH
// enable ( 98 ) ;
8533: LD_INT 98
8535: ENABLE_MARKED
// GameEnded = false ;
8536: LD_ADDR_LOC 15
8540: PUSH
8541: LD_INT 0
8543: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8544: LD_ADDR_LOC 14
8548: PUSH
8549: LD_INT 0
8551: PUSH
8552: LD_INT 0
8554: PUSH
8555: LD_INT 0
8557: PUSH
8558: LD_INT 0
8560: PUSH
8561: LD_INT 0
8563: PUSH
8564: LD_INT 0
8566: PUSH
8567: LD_INT 0
8569: PUSH
8570: LD_INT 0
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: ST_TO_ADDR
// unfoged = false ;
8583: LD_ADDR_LOC 16
8587: PUSH
8588: LD_INT 0
8590: ST_TO_ADDR
// defeated_specs := [ ] ;
8591: LD_ADDR_LOC 17
8595: PUSH
8596: EMPTY
8597: ST_TO_ADDR
// for i = 1 to side_positions do
8598: LD_ADDR_VAR 0 2
8602: PUSH
8603: DOUBLE
8604: LD_INT 1
8606: DEC
8607: ST_TO_ADDR
8608: LD_EXP 36
8612: PUSH
8613: FOR_TO
8614: IFFALSE 8654
// if not side_positions [ i ] then
8616: LD_EXP 36
8620: PUSH
8621: LD_VAR 0 2
8625: ARRAY
8626: NOT
8627: IFFALSE 8652
// defeated = replace ( defeated , i , true ) ;
8629: LD_ADDR_LOC 14
8633: PUSH
8634: LD_LOC 14
8638: PPUSH
8639: LD_VAR 0 2
8643: PPUSH
8644: LD_INT 1
8646: PPUSH
8647: CALL_OW 1
8651: ST_TO_ADDR
8652: GO 8613
8654: POP
8655: POP
// end ;
8656: LD_VAR 0 1
8660: RET
// function CanWinLoose ; begin
8661: LD_INT 0
8663: PPUSH
// Result := true ;
8664: LD_ADDR_VAR 0 1
8668: PUSH
8669: LD_INT 1
8671: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8672: CALL_OW 518
8676: PUSH
8677: CALL_OW 519
8681: PUSH
8682: LD_INT 0
8684: GREATER
8685: AND
8686: IFFALSE 8696
// Result := false ;
8688: LD_ADDR_VAR 0 1
8692: PUSH
8693: LD_INT 0
8695: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8696: CALL_OW 531
8700: PUSH
8701: CALL_OW 519
8705: PUSH
8706: LD_INT 1
8708: GREATER
8709: AND
8710: IFFALSE 8720
// Result := false ;
8712: LD_ADDR_VAR 0 1
8716: PUSH
8717: LD_INT 0
8719: ST_TO_ADDR
// end ;
8720: LD_VAR 0 1
8724: RET
// export function HasPower ( i ) ; var k , h ; begin
8725: LD_INT 0
8727: PPUSH
8728: PPUSH
8729: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8730: LD_VAR 0 1
8734: PPUSH
8735: CALL_OW 108
8739: NOT
8740: PUSH
8741: LD_EXP 35
8745: PUSH
8746: LD_VAR 0 1
8750: ARRAY
8751: NOT
8752: AND
8753: PUSH
8754: LD_OWVAR 4
8758: AND
8759: IFFALSE 8771
// begin result = false ;
8761: LD_ADDR_VAR 0 2
8765: PUSH
8766: LD_INT 0
8768: ST_TO_ADDR
// end else
8769: GO 9066
// case def_win_rules of 0 :
8771: LD_EXP 32
8775: PUSH
8776: LD_INT 0
8778: DOUBLE
8779: EQUAL
8780: IFTRUE 8784
8782: GO 8947
8784: POP
// if def_people_respawning then
8785: LD_EXP 11
8789: IFFALSE 8880
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8791: LD_ADDR_VAR 0 2
8795: PUSH
8796: LD_INT 22
8798: PUSH
8799: LD_VAR 0 1
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: LD_INT 2
8810: PUSH
8811: LD_INT 21
8813: PUSH
8814: LD_INT 1
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PUSH
8821: LD_INT 33
8823: PUSH
8824: LD_INT 3
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PUSH
8831: LD_INT 33
8833: PUSH
8834: LD_INT 5
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 30
8843: PUSH
8844: LD_INT 0
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: LD_INT 30
8853: PUSH
8854: LD_INT 1
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PPUSH
8873: CALL_OW 69
8877: ST_TO_ADDR
8878: GO 8945
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8880: LD_ADDR_VAR 0 2
8884: PUSH
8885: LD_INT 22
8887: PUSH
8888: LD_VAR 0 1
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PUSH
8897: LD_INT 2
8899: PUSH
8900: LD_INT 21
8902: PUSH
8903: LD_INT 1
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: PUSH
8910: LD_INT 33
8912: PUSH
8913: LD_INT 3
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 33
8922: PUSH
8923: LD_INT 5
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 69
8944: ST_TO_ADDR
8945: GO 9066
8947: LD_INT 1
8949: DOUBLE
8950: EQUAL
8951: IFTRUE 8955
8953: GO 8994
8955: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8956: LD_ADDR_VAR 0 2
8960: PUSH
8961: LD_INT 22
8963: PUSH
8964: LD_VAR 0 1
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PUSH
8973: LD_INT 21
8975: PUSH
8976: LD_INT 1
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: PPUSH
8987: CALL_OW 69
8991: ST_TO_ADDR
8992: GO 9066
8994: LD_INT 2
8996: DOUBLE
8997: EQUAL
8998: IFTRUE 9002
9000: GO 9065
9002: POP
// begin h = false ;
9003: LD_ADDR_VAR 0 4
9007: PUSH
9008: LD_INT 0
9010: ST_TO_ADDR
// for k in heroes [ i ] do
9011: LD_ADDR_VAR 0 3
9015: PUSH
9016: LD_EXP 49
9020: PUSH
9021: LD_VAR 0 1
9025: ARRAY
9026: PUSH
9027: FOR_IN
9028: IFFALSE 9051
// if IsLive ( k ) then
9030: LD_VAR 0 3
9034: PPUSH
9035: CALL_OW 300
9039: IFFALSE 9049
// h = true ;
9041: LD_ADDR_VAR 0 4
9045: PUSH
9046: LD_INT 1
9048: ST_TO_ADDR
9049: GO 9027
9051: POP
9052: POP
// Result := h ;
9053: LD_ADDR_VAR 0 2
9057: PUSH
9058: LD_VAR 0 4
9062: ST_TO_ADDR
// end ; end ;
9063: GO 9066
9065: POP
// end ;
9066: LD_VAR 0 2
9070: RET
// function AlliedSides ( i , j ) ; begin
9071: LD_INT 0
9073: PPUSH
// Result := false ;
9074: LD_ADDR_VAR 0 3
9078: PUSH
9079: LD_INT 0
9081: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9082: LD_VAR 0 1
9086: PPUSH
9087: LD_VAR 0 2
9091: PPUSH
9092: CALL_OW 81
9096: PUSH
9097: LD_INT 1
9099: EQUAL
9100: PUSH
9101: LD_VAR 0 2
9105: PPUSH
9106: LD_VAR 0 1
9110: PPUSH
9111: CALL_OW 81
9115: PUSH
9116: LD_INT 1
9118: EQUAL
9119: AND
9120: PUSH
9121: LD_VAR 0 1
9125: PPUSH
9126: CALL_OW 83
9130: AND
9131: PUSH
9132: LD_VAR 0 2
9136: PPUSH
9137: CALL_OW 83
9141: AND
9142: IFFALSE 9152
// Result := true ;
9144: LD_ADDR_VAR 0 3
9148: PUSH
9149: LD_INT 1
9151: ST_TO_ADDR
// end ;
9152: LD_VAR 0 3
9156: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9157: CALL 8661 0 0
9161: PUSH
9162: LD_LOC 15
9166: NOT
9167: AND
9168: IFFALSE 9184
9170: GO 9172
9172: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9173: LD_ADDR_EXP 58
9177: PUSH
9178: LD_STRING #Player-Ended
9180: PUSH
9181: EMPTY
9182: LIST
9183: ST_TO_ADDR
9184: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9185: CALL 8661 0 0
9189: PUSH
9190: LD_LOC 15
9194: AND
9195: IFFALSE 9204
9197: GO 9199
9199: DISABLE
// YouLostInMultiplayer ;
9200: CALL_OW 107
9204: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9205: CALL 8661 0 0
9209: NOT
9210: PUSH
9211: CALL_OW 531
9215: NOT
9216: AND
9217: IFFALSE 9233
9219: GO 9221
9221: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9222: LD_ADDR_EXP 58
9226: PUSH
9227: LD_STRING #server-wait
9229: PUSH
9230: EMPTY
9231: LIST
9232: ST_TO_ADDR
9233: END
// every 100 trigger IAmSpec do
9234: CALL_OW 531
9238: IFFALSE 9254
9240: GO 9242
9242: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9243: LD_ADDR_EXP 58
9247: PUSH
9248: LD_STRING #Player-IAmSpec
9250: PUSH
9251: EMPTY
9252: LIST
9253: ST_TO_ADDR
9254: END
// every 100 trigger GameEnded and IAmSpec do
9255: LD_LOC 15
9259: PUSH
9260: CALL_OW 531
9264: AND
9265: IFFALSE 9274
9267: GO 9269
9269: DISABLE
// YouLostInMultiplayer ;
9270: CALL_OW 107
9274: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9275: CALL 8661 0 0
9279: PUSH
9280: LD_LOC 15
9284: NOT
9285: AND
9286: IFFALSE 9302
9288: GO 9290
9290: DISABLE
// WaitServerStrings = [ $player-win ] ;
9291: LD_ADDR_EXP 58
9295: PUSH
9296: LD_STRING $player-win
9298: PUSH
9299: EMPTY
9300: LIST
9301: ST_TO_ADDR
9302: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9303: CALL 8661 0 0
9307: PUSH
9308: LD_LOC 15
9312: AND
9313: IFFALSE 9337
9315: GO 9317
9317: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9318: LD_EXP 37
9322: PUSH
9323: LD_OWVAR 7
9327: ARRAY
9328: PPUSH
9329: CALL 8332 0 1
// YouWinInMultiplayer ;
9333: CALL_OW 106
// end ;
9337: END
// every 100 trigger isEditor marked 401 do
9338: LD_OWVAR 84
9342: IFFALSE 9358
9344: GO 9346
9346: DISABLE
// Debug_Strings = [ You won ] ;
9347: LD_ADDR_OWVAR 48
9351: PUSH
9352: LD_STRING You won
9354: PUSH
9355: EMPTY
9356: LIST
9357: ST_TO_ADDR
9358: END
// every 100 trigger isEditor marked 400 do
9359: LD_OWVAR 84
9363: IFFALSE 9379
9365: GO 9367
9367: DISABLE
// Debug_Strings = [ You loss ] ;
9368: LD_ADDR_OWVAR 48
9372: PUSH
9373: LD_STRING You loss
9375: PUSH
9376: EMPTY
9377: LIST
9378: ST_TO_ADDR
9379: END
// every 100 marked 98 do var i , un ;
9380: GO 9382
9382: DISABLE
9383: LD_INT 0
9385: PPUSH
9386: PPUSH
// begin for i = 1 to side_positions do
9387: LD_ADDR_VAR 0 1
9391: PUSH
9392: DOUBLE
9393: LD_INT 1
9395: DEC
9396: ST_TO_ADDR
9397: LD_EXP 36
9401: PUSH
9402: FOR_TO
9403: IFFALSE 9490
// begin if side_positions [ i ] then
9405: LD_EXP 36
9409: PUSH
9410: LD_VAR 0 1
9414: ARRAY
9415: IFFALSE 9488
// if not HasPower ( i ) and not defeated [ i ] then
9417: LD_VAR 0 1
9421: PPUSH
9422: CALL 8725 0 1
9426: NOT
9427: PUSH
9428: LD_LOC 14
9432: PUSH
9433: LD_VAR 0 1
9437: ARRAY
9438: NOT
9439: AND
9440: IFFALSE 9488
// begin defeated = replace ( defeated , i , true ) ;
9442: LD_ADDR_LOC 14
9446: PUSH
9447: LD_LOC 14
9451: PPUSH
9452: LD_VAR 0 1
9456: PPUSH
9457: LD_INT 1
9459: PPUSH
9460: CALL_OW 1
9464: ST_TO_ADDR
// if i = mp_player_side then
9465: LD_VAR 0 1
9469: PUSH
9470: LD_OWVAR 7
9474: EQUAL
9475: IFFALSE 9488
// begin Multiplayer_Loose_Message ;
9477: CALL_OW 521
// SetPlayerSpectator ( ) ;
9481: CALL_OW 572
// enable ( 400 ) ;
9485: LD_INT 400
9487: ENABLE_MARKED
// end ; end ; end ;
9488: GO 9402
9490: POP
9491: POP
// DidGameEnd ;
9492: CALL 9507 0 0
// if not GameEnded then
9496: LD_LOC 15
9500: NOT
9501: IFFALSE 9504
// enable ;
9503: ENABLE
// end ;
9504: PPOPN 2
9506: END
// function DidGameEnd ; var i , k , enemy ; begin
9507: LD_INT 0
9509: PPUSH
9510: PPUSH
9511: PPUSH
9512: PPUSH
// enemy = [ ] ;
9513: LD_ADDR_VAR 0 4
9517: PUSH
9518: EMPTY
9519: ST_TO_ADDR
// for i = 1 to side_positions do
9520: LD_ADDR_VAR 0 2
9524: PUSH
9525: DOUBLE
9526: LD_INT 1
9528: DEC
9529: ST_TO_ADDR
9530: LD_EXP 36
9534: PUSH
9535: FOR_TO
9536: IFFALSE 9630
// if not defeated [ i ] then
9538: LD_LOC 14
9542: PUSH
9543: LD_VAR 0 2
9547: ARRAY
9548: NOT
9549: IFFALSE 9628
// for k = 1 to side_positions do
9551: LD_ADDR_VAR 0 3
9555: PUSH
9556: DOUBLE
9557: LD_INT 1
9559: DEC
9560: ST_TO_ADDR
9561: LD_EXP 36
9565: PUSH
9566: FOR_TO
9567: IFFALSE 9626
// if not defeated [ k ] then
9569: LD_LOC 14
9573: PUSH
9574: LD_VAR 0 3
9578: ARRAY
9579: NOT
9580: IFFALSE 9624
// if not AlliedSides ( i , k ) then
9582: LD_VAR 0 2
9586: PPUSH
9587: LD_VAR 0 3
9591: PPUSH
9592: CALL 9071 0 2
9596: NOT
9597: IFFALSE 9624
// enemy = enemy ^ [ i , k ] ;
9599: LD_ADDR_VAR 0 4
9603: PUSH
9604: LD_VAR 0 4
9608: PUSH
9609: LD_VAR 0 2
9613: PUSH
9614: LD_VAR 0 3
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: ADD
9623: ST_TO_ADDR
9624: GO 9566
9626: POP
9627: POP
9628: GO 9535
9630: POP
9631: POP
// if not enemy then
9632: LD_VAR 0 4
9636: NOT
9637: IFFALSE 9663
// begin GameEnded = true ;
9639: LD_ADDR_LOC 15
9643: PUSH
9644: LD_INT 1
9646: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9647: LD_LOC 14
9651: PUSH
9652: LD_OWVAR 7
9656: ARRAY
9657: NOT
9658: IFFALSE 9663
// enable ( 401 ) ;
9660: LD_INT 401
9662: ENABLE_MARKED
// end ; end ;
9663: LD_VAR 0 1
9667: RET
// function unfog ; var k , friends ; begin
9668: LD_INT 0
9670: PPUSH
9671: PPUSH
9672: PPUSH
// for k = 1 to side_positions do
9673: LD_ADDR_VAR 0 2
9677: PUSH
9678: DOUBLE
9679: LD_INT 1
9681: DEC
9682: ST_TO_ADDR
9683: LD_EXP 36
9687: PUSH
9688: FOR_TO
9689: IFFALSE 9745
// if not defeated [ k ] then
9691: LD_LOC 14
9695: PUSH
9696: LD_VAR 0 2
9700: ARRAY
9701: NOT
9702: IFFALSE 9743
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9704: LD_OWVAR 7
9708: PPUSH
9709: LD_VAR 0 2
9713: PPUSH
9714: CALL_OW 81
9718: PUSH
9719: LD_INT 1
9721: PUSH
9722: EMPTY
9723: LIST
9724: IN
9725: IFFALSE 9743
// friends = friends ^ k ;
9727: LD_ADDR_VAR 0 3
9731: PUSH
9732: LD_VAR 0 3
9736: PUSH
9737: LD_VAR 0 2
9741: ADD
9742: ST_TO_ADDR
9743: GO 9688
9745: POP
9746: POP
// if not friends then
9747: LD_VAR 0 3
9751: NOT
9752: IFFALSE 9766
// begin SetPlayerSpectator ( ) ;
9754: CALL_OW 572
// unfoged = true ;
9758: LD_ADDR_LOC 16
9762: PUSH
9763: LD_INT 1
9765: ST_TO_ADDR
// end ; end ;
9766: LD_VAR 0 1
9770: RET
// export function MakeGameEnd ; begin
9771: LD_INT 0
9773: PPUSH
// SetPlayerSpectator ( ) ;
9774: CALL_OW 572
// unfoged = true ;
9778: LD_ADDR_LOC 16
9782: PUSH
9783: LD_INT 1
9785: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9786: LD_INT 175
9788: PPUSH
9789: CALL_OW 67
// GameEnded = true ;
9793: LD_ADDR_LOC 15
9797: PUSH
9798: LD_INT 1
9800: ST_TO_ADDR
// end ;
9801: LD_VAR 0 1
9805: RET
// export function GetGameEnded ; begin
9806: LD_INT 0
9808: PPUSH
// result = GameEnded ;
9809: LD_ADDR_VAR 0 1
9813: PUSH
9814: LD_LOC 15
9818: ST_TO_ADDR
// end ; end_of_file
9819: LD_VAR 0 1
9823: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9824: LD_INT 0
9826: PPUSH
9827: PPUSH
9828: PPUSH
// for side = 1 to 8 do
9829: LD_ADDR_VAR 0 2
9833: PUSH
9834: DOUBLE
9835: LD_INT 1
9837: DEC
9838: ST_TO_ADDR
9839: LD_INT 8
9841: PUSH
9842: FOR_TO
9843: IFFALSE 9964
// begin for i = 1 to 72 do
9845: LD_ADDR_VAR 0 3
9849: PUSH
9850: DOUBLE
9851: LD_INT 1
9853: DEC
9854: ST_TO_ADDR
9855: LD_INT 72
9857: PUSH
9858: FOR_TO
9859: IFFALSE 9890
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9861: LD_VAR 0 3
9865: PPUSH
9866: LD_VAR 0 2
9870: PPUSH
9871: LD_INT 0
9873: PPUSH
9874: LD_VAR 0 3
9878: PPUSH
9879: CALL_OW 565
9883: PPUSH
9884: CALL_OW 322
9888: GO 9858
9890: POP
9891: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9892: LD_INT 73
9894: PPUSH
9895: LD_VAR 0 2
9899: PPUSH
9900: LD_INT 0
9902: PPUSH
9903: LD_INT 25
9905: PPUSH
9906: CALL_OW 565
9910: PPUSH
9911: CALL_OW 322
// for i = 0 to 40 do
9915: LD_ADDR_VAR 0 3
9919: PUSH
9920: DOUBLE
9921: LD_INT 0
9923: DEC
9924: ST_TO_ADDR
9925: LD_INT 40
9927: PUSH
9928: FOR_TO
9929: IFFALSE 9960
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9931: LD_VAR 0 3
9935: PPUSH
9936: LD_VAR 0 2
9940: PPUSH
9941: LD_INT 1
9943: PPUSH
9944: LD_VAR 0 3
9948: PPUSH
9949: CALL_OW 565
9953: PPUSH
9954: CALL_OW 324
9958: GO 9928
9960: POP
9961: POP
// end ;
9962: GO 9842
9964: POP
9965: POP
// end ;
9966: LD_VAR 0 1
9970: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9971: LD_INT 0
9973: PPUSH
9974: PPUSH
9975: PPUSH
// for side = 1 to 8 do
9976: LD_ADDR_VAR 0 3
9980: PUSH
9981: DOUBLE
9982: LD_INT 1
9984: DEC
9985: ST_TO_ADDR
9986: LD_INT 8
9988: PUSH
9989: FOR_TO
9990: IFFALSE 13986
// begin for i = 1 to 73 do
9992: LD_ADDR_VAR 0 4
9996: PUSH
9997: DOUBLE
9998: LD_INT 1
10000: DEC
10001: ST_TO_ADDR
10002: LD_INT 73
10004: PUSH
10005: FOR_TO
10006: IFFALSE 10027
// SetTech ( i , side , state_disabled ) ;
10008: LD_VAR 0 4
10012: PPUSH
10013: LD_VAR 0 3
10017: PPUSH
10018: LD_INT 0
10020: PPUSH
10021: CALL_OW 322
10025: GO 10005
10027: POP
10028: POP
// for i = 0 to 40 do
10029: LD_ADDR_VAR 0 4
10033: PUSH
10034: DOUBLE
10035: LD_INT 0
10037: DEC
10038: ST_TO_ADDR
10039: LD_INT 40
10041: PUSH
10042: FOR_TO
10043: IFFALSE 10064
// SetRestrict ( i , side , false ) ;
10045: LD_VAR 0 4
10049: PPUSH
10050: LD_VAR 0 3
10054: PPUSH
10055: LD_INT 0
10057: PPUSH
10058: CALL_OW 324
10062: GO 10042
10064: POP
10065: POP
// case level of 1 :
10066: LD_VAR 0 1
10070: PUSH
10071: LD_INT 1
10073: DOUBLE
10074: EQUAL
10075: IFTRUE 10079
10077: GO 10232
10079: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10080: LD_INT 35
10082: PPUSH
10083: LD_VAR 0 3
10087: PPUSH
10088: LD_INT 1
10090: PPUSH
10091: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10095: LD_INT 45
10097: PPUSH
10098: LD_VAR 0 3
10102: PPUSH
10103: LD_INT 1
10105: PPUSH
10106: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10110: LD_INT 46
10112: PPUSH
10113: LD_VAR 0 3
10117: PPUSH
10118: LD_INT 1
10120: PPUSH
10121: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10125: LD_INT 47
10127: PPUSH
10128: LD_VAR 0 3
10132: PPUSH
10133: LD_INT 1
10135: PPUSH
10136: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10140: LD_INT 0
10142: PPUSH
10143: LD_VAR 0 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10155: LD_INT 2
10157: PPUSH
10158: LD_VAR 0 3
10162: PPUSH
10163: LD_INT 1
10165: PPUSH
10166: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10170: LD_INT 4
10172: PPUSH
10173: LD_VAR 0 3
10177: PPUSH
10178: LD_INT 1
10180: PPUSH
10181: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10185: LD_INT 6
10187: PPUSH
10188: LD_VAR 0 3
10192: PPUSH
10193: LD_INT 1
10195: PPUSH
10196: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10200: LD_INT 29
10202: PPUSH
10203: LD_VAR 0 3
10207: PPUSH
10208: LD_INT 1
10210: PPUSH
10211: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10215: LD_INT 31
10217: PPUSH
10218: LD_VAR 0 3
10222: PPUSH
10223: LD_INT 1
10225: PPUSH
10226: CALL_OW 324
// end ; 2 :
10230: GO 13984
10232: LD_INT 2
10234: DOUBLE
10235: EQUAL
10236: IFTRUE 10240
10238: GO 10438
10240: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10241: LD_INT 35
10243: PPUSH
10244: LD_VAR 0 3
10248: PPUSH
10249: LD_INT 1
10251: PPUSH
10252: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10256: LD_INT 45
10258: PPUSH
10259: LD_VAR 0 3
10263: PPUSH
10264: LD_INT 1
10266: PPUSH
10267: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10271: LD_INT 46
10273: PPUSH
10274: LD_VAR 0 3
10278: PPUSH
10279: LD_INT 1
10281: PPUSH
10282: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10286: LD_INT 47
10288: PPUSH
10289: LD_VAR 0 3
10293: PPUSH
10294: LD_INT 1
10296: PPUSH
10297: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10301: LD_INT 1
10303: PPUSH
10304: LD_VAR 0 3
10308: PPUSH
10309: LD_INT 1
10311: PPUSH
10312: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10316: LD_INT 2
10318: PPUSH
10319: LD_VAR 0 3
10323: PPUSH
10324: LD_INT 1
10326: PPUSH
10327: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10331: LD_INT 11
10333: PPUSH
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_INT 1
10341: PPUSH
10342: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10346: LD_INT 0
10348: PPUSH
10349: LD_VAR 0 3
10353: PPUSH
10354: LD_INT 1
10356: PPUSH
10357: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10361: LD_INT 2
10363: PPUSH
10364: LD_VAR 0 3
10368: PPUSH
10369: LD_INT 1
10371: PPUSH
10372: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10376: LD_INT 4
10378: PPUSH
10379: LD_VAR 0 3
10383: PPUSH
10384: LD_INT 1
10386: PPUSH
10387: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10391: LD_INT 6
10393: PPUSH
10394: LD_VAR 0 3
10398: PPUSH
10399: LD_INT 1
10401: PPUSH
10402: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10406: LD_INT 29
10408: PPUSH
10409: LD_VAR 0 3
10413: PPUSH
10414: LD_INT 1
10416: PPUSH
10417: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10421: LD_INT 31
10423: PPUSH
10424: LD_VAR 0 3
10428: PPUSH
10429: LD_INT 1
10431: PPUSH
10432: CALL_OW 324
// end ; 3 :
10436: GO 13984
10438: LD_INT 3
10440: DOUBLE
10441: EQUAL
10442: IFTRUE 10446
10444: GO 10899
10446: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10447: LD_INT 35
10449: PPUSH
10450: LD_VAR 0 3
10454: PPUSH
10455: LD_INT 1
10457: PPUSH
10458: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10462: LD_INT 45
10464: PPUSH
10465: LD_VAR 0 3
10469: PPUSH
10470: LD_INT 1
10472: PPUSH
10473: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10477: LD_INT 46
10479: PPUSH
10480: LD_VAR 0 3
10484: PPUSH
10485: LD_INT 1
10487: PPUSH
10488: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10492: LD_INT 47
10494: PPUSH
10495: LD_VAR 0 3
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10507: LD_INT 1
10509: PPUSH
10510: LD_VAR 0 3
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10522: LD_INT 2
10524: PPUSH
10525: LD_VAR 0 3
10529: PPUSH
10530: LD_INT 1
10532: PPUSH
10533: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10537: LD_INT 11
10539: PPUSH
10540: LD_VAR 0 3
10544: PPUSH
10545: LD_INT 1
10547: PPUSH
10548: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10552: LD_INT 48
10554: PPUSH
10555: LD_VAR 0 3
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10567: LD_INT 69
10569: PPUSH
10570: LD_VAR 0 3
10574: PPUSH
10575: LD_INT 1
10577: PPUSH
10578: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10582: LD_INT 39
10584: PPUSH
10585: LD_VAR 0 3
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10597: LD_INT 43
10599: PPUSH
10600: LD_VAR 0 3
10604: PPUSH
10605: LD_INT 1
10607: PPUSH
10608: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10612: LD_INT 51
10614: PPUSH
10615: LD_VAR 0 3
10619: PPUSH
10620: LD_INT 1
10622: PPUSH
10623: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10627: LD_INT 6
10629: PPUSH
10630: LD_VAR 0 3
10634: PPUSH
10635: LD_INT 1
10637: PPUSH
10638: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10642: LD_INT 0
10644: PPUSH
10645: LD_VAR 0 3
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10657: LD_INT 2
10659: PPUSH
10660: LD_VAR 0 3
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10672: LD_INT 3
10674: PPUSH
10675: LD_VAR 0 3
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10687: LD_INT 4
10689: PPUSH
10690: LD_VAR 0 3
10694: PPUSH
10695: LD_INT 1
10697: PPUSH
10698: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10702: LD_INT 6
10704: PPUSH
10705: LD_VAR 0 3
10709: PPUSH
10710: LD_INT 1
10712: PPUSH
10713: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10717: LD_INT 7
10719: PPUSH
10720: LD_VAR 0 3
10724: PPUSH
10725: LD_INT 1
10727: PPUSH
10728: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10732: LD_INT 8
10734: PPUSH
10735: LD_VAR 0 3
10739: PPUSH
10740: LD_INT 1
10742: PPUSH
10743: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10747: LD_INT 10
10749: PPUSH
10750: LD_VAR 0 3
10754: PPUSH
10755: LD_INT 1
10757: PPUSH
10758: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10762: LD_INT 15
10764: PPUSH
10765: LD_VAR 0 3
10769: PPUSH
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10777: LD_INT 16
10779: PPUSH
10780: LD_VAR 0 3
10784: PPUSH
10785: LD_INT 1
10787: PPUSH
10788: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10792: LD_INT 17
10794: PPUSH
10795: LD_VAR 0 3
10799: PPUSH
10800: LD_INT 1
10802: PPUSH
10803: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10807: LD_INT 20
10809: PPUSH
10810: LD_VAR 0 3
10814: PPUSH
10815: LD_INT 1
10817: PPUSH
10818: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10822: LD_INT 26
10824: PPUSH
10825: LD_VAR 0 3
10829: PPUSH
10830: LD_INT 1
10832: PPUSH
10833: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10837: LD_INT 27
10839: PPUSH
10840: LD_VAR 0 3
10844: PPUSH
10845: LD_INT 1
10847: PPUSH
10848: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10852: LD_INT 29
10854: PPUSH
10855: LD_VAR 0 3
10859: PPUSH
10860: LD_INT 1
10862: PPUSH
10863: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10867: LD_INT 31
10869: PPUSH
10870: LD_VAR 0 3
10874: PPUSH
10875: LD_INT 1
10877: PPUSH
10878: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10882: LD_INT 32
10884: PPUSH
10885: LD_VAR 0 3
10889: PPUSH
10890: LD_INT 1
10892: PPUSH
10893: CALL_OW 324
// end ; 4 :
10897: GO 13984
10899: LD_INT 4
10901: DOUBLE
10902: EQUAL
10903: IFTRUE 10907
10905: GO 11855
10907: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10908: LD_INT 35
10910: PPUSH
10911: LD_VAR 0 3
10915: PPUSH
10916: LD_INT 1
10918: PPUSH
10919: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10923: LD_INT 45
10925: PPUSH
10926: LD_VAR 0 3
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10938: LD_INT 46
10940: PPUSH
10941: LD_VAR 0 3
10945: PPUSH
10946: LD_INT 1
10948: PPUSH
10949: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10953: LD_INT 47
10955: PPUSH
10956: LD_VAR 0 3
10960: PPUSH
10961: LD_INT 1
10963: PPUSH
10964: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10968: LD_INT 1
10970: PPUSH
10971: LD_VAR 0 3
10975: PPUSH
10976: LD_INT 1
10978: PPUSH
10979: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10983: LD_INT 2
10985: PPUSH
10986: LD_VAR 0 3
10990: PPUSH
10991: LD_INT 1
10993: PPUSH
10994: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10998: LD_INT 11
11000: PPUSH
11001: LD_VAR 0 3
11005: PPUSH
11006: LD_INT 1
11008: PPUSH
11009: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11013: LD_INT 20
11015: PPUSH
11016: LD_VAR 0 3
11020: PPUSH
11021: LD_INT 1
11023: PPUSH
11024: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11028: LD_INT 48
11030: PPUSH
11031: LD_VAR 0 3
11035: PPUSH
11036: LD_INT 1
11038: PPUSH
11039: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11043: LD_INT 49
11045: PPUSH
11046: LD_VAR 0 3
11050: PPUSH
11051: LD_INT 1
11053: PPUSH
11054: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11058: LD_INT 69
11060: PPUSH
11061: LD_VAR 0 3
11065: PPUSH
11066: LD_INT 1
11068: PPUSH
11069: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11073: LD_INT 39
11075: PPUSH
11076: LD_VAR 0 3
11080: PPUSH
11081: LD_INT 1
11083: PPUSH
11084: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11088: LD_INT 34
11090: PPUSH
11091: LD_VAR 0 3
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11103: LD_INT 42
11105: PPUSH
11106: LD_VAR 0 3
11110: PPUSH
11111: LD_INT 1
11113: PPUSH
11114: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11118: LD_INT 44
11120: PPUSH
11121: LD_VAR 0 3
11125: PPUSH
11126: LD_INT 1
11128: PPUSH
11129: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11133: LD_INT 41
11135: PPUSH
11136: LD_VAR 0 3
11140: PPUSH
11141: LD_INT 1
11143: PPUSH
11144: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11148: LD_INT 43
11150: PPUSH
11151: LD_VAR 0 3
11155: PPUSH
11156: LD_INT 1
11158: PPUSH
11159: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11163: LD_INT 70
11165: PPUSH
11166: LD_VAR 0 3
11170: PPUSH
11171: LD_INT 1
11173: PPUSH
11174: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11178: LD_INT 51
11180: PPUSH
11181: LD_VAR 0 3
11185: PPUSH
11186: LD_INT 1
11188: PPUSH
11189: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11193: LD_INT 52
11195: PPUSH
11196: LD_VAR 0 3
11200: PPUSH
11201: LD_INT 1
11203: PPUSH
11204: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11208: LD_INT 6
11210: PPUSH
11211: LD_VAR 0 3
11215: PPUSH
11216: LD_INT 1
11218: PPUSH
11219: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11223: LD_INT 15
11225: PPUSH
11226: LD_VAR 0 3
11230: PPUSH
11231: LD_INT 1
11233: PPUSH
11234: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11238: LD_INT 7
11240: PPUSH
11241: LD_VAR 0 3
11245: PPUSH
11246: LD_INT 1
11248: PPUSH
11249: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11253: LD_INT 12
11255: PPUSH
11256: LD_VAR 0 3
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11268: LD_INT 18
11270: PPUSH
11271: LD_VAR 0 3
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11283: LD_INT 60
11285: PPUSH
11286: LD_VAR 0 3
11290: PPUSH
11291: LD_INT 1
11293: PPUSH
11294: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11298: LD_INT 9
11300: PPUSH
11301: LD_VAR 0 3
11305: PPUSH
11306: LD_INT 1
11308: PPUSH
11309: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11313: LD_INT 30
11315: PPUSH
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 1
11323: PPUSH
11324: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11328: LD_INT 37
11330: PPUSH
11331: LD_VAR 0 3
11335: PPUSH
11336: LD_INT 1
11338: PPUSH
11339: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11343: LD_INT 5
11345: PPUSH
11346: LD_VAR 0 3
11350: PPUSH
11351: LD_INT 1
11353: PPUSH
11354: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11358: LD_INT 66
11360: PPUSH
11361: LD_VAR 0 3
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11373: LD_INT 21
11375: PPUSH
11376: LD_VAR 0 3
11380: PPUSH
11381: LD_INT 1
11383: PPUSH
11384: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11388: LD_INT 22
11390: PPUSH
11391: LD_VAR 0 3
11395: PPUSH
11396: LD_INT 1
11398: PPUSH
11399: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11403: LD_INT 54
11405: PPUSH
11406: LD_VAR 0 3
11410: PPUSH
11411: LD_INT 1
11413: PPUSH
11414: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11418: LD_INT 0
11420: PPUSH
11421: LD_VAR 0 3
11425: PPUSH
11426: LD_INT 1
11428: PPUSH
11429: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11433: LD_INT 1
11435: PPUSH
11436: LD_VAR 0 3
11440: PPUSH
11441: LD_INT 1
11443: PPUSH
11444: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11448: LD_INT 2
11450: PPUSH
11451: LD_VAR 0 3
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11463: LD_INT 3
11465: PPUSH
11466: LD_VAR 0 3
11470: PPUSH
11471: LD_INT 1
11473: PPUSH
11474: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11478: LD_INT 4
11480: PPUSH
11481: LD_VAR 0 3
11485: PPUSH
11486: LD_INT 1
11488: PPUSH
11489: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11493: LD_INT 5
11495: PPUSH
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 1
11503: PPUSH
11504: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11508: LD_INT 6
11510: PPUSH
11511: LD_VAR 0 3
11515: PPUSH
11516: LD_INT 1
11518: PPUSH
11519: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11523: LD_INT 7
11525: PPUSH
11526: LD_VAR 0 3
11530: PPUSH
11531: LD_INT 1
11533: PPUSH
11534: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11538: LD_INT 8
11540: PPUSH
11541: LD_VAR 0 3
11545: PPUSH
11546: LD_INT 1
11548: PPUSH
11549: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11553: LD_INT 10
11555: PPUSH
11556: LD_VAR 0 3
11560: PPUSH
11561: LD_INT 1
11563: PPUSH
11564: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11568: LD_INT 11
11570: PPUSH
11571: LD_VAR 0 3
11575: PPUSH
11576: LD_INT 1
11578: PPUSH
11579: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11583: LD_INT 12
11585: PPUSH
11586: LD_VAR 0 3
11590: PPUSH
11591: LD_INT 1
11593: PPUSH
11594: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11598: LD_INT 13
11600: PPUSH
11601: LD_VAR 0 3
11605: PPUSH
11606: LD_INT 1
11608: PPUSH
11609: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11613: LD_INT 14
11615: PPUSH
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 1
11623: PPUSH
11624: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11628: LD_INT 15
11630: PPUSH
11631: LD_VAR 0 3
11635: PPUSH
11636: LD_INT 1
11638: PPUSH
11639: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11643: LD_INT 16
11645: PPUSH
11646: LD_VAR 0 3
11650: PPUSH
11651: LD_INT 1
11653: PPUSH
11654: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11658: LD_INT 17
11660: PPUSH
11661: LD_VAR 0 3
11665: PPUSH
11666: LD_INT 1
11668: PPUSH
11669: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11673: LD_INT 19
11675: PPUSH
11676: LD_VAR 0 3
11680: PPUSH
11681: LD_INT 1
11683: PPUSH
11684: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11688: LD_INT 20
11690: PPUSH
11691: LD_VAR 0 3
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11703: LD_INT 21
11705: PPUSH
11706: LD_VAR 0 3
11710: PPUSH
11711: LD_INT 1
11713: PPUSH
11714: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11718: LD_INT 23
11720: PPUSH
11721: LD_VAR 0 3
11725: PPUSH
11726: LD_INT 1
11728: PPUSH
11729: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11733: LD_INT 26
11735: PPUSH
11736: LD_VAR 0 3
11740: PPUSH
11741: LD_INT 1
11743: PPUSH
11744: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11748: LD_INT 27
11750: PPUSH
11751: LD_VAR 0 3
11755: PPUSH
11756: LD_INT 1
11758: PPUSH
11759: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11763: LD_INT 28
11765: PPUSH
11766: LD_VAR 0 3
11770: PPUSH
11771: LD_INT 1
11773: PPUSH
11774: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11778: LD_INT 29
11780: PPUSH
11781: LD_VAR 0 3
11785: PPUSH
11786: LD_INT 1
11788: PPUSH
11789: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11793: LD_INT 30
11795: PPUSH
11796: LD_VAR 0 3
11800: PPUSH
11801: LD_INT 1
11803: PPUSH
11804: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11808: LD_INT 31
11810: PPUSH
11811: LD_VAR 0 3
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11823: LD_INT 32
11825: PPUSH
11826: LD_VAR 0 3
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11838: LD_INT 36
11840: PPUSH
11841: LD_VAR 0 3
11845: PPUSH
11846: LD_INT 1
11848: PPUSH
11849: CALL_OW 324
// end ; 5 :
11853: GO 13984
11855: LD_INT 5
11857: DOUBLE
11858: EQUAL
11859: IFTRUE 11863
11861: GO 12976
11863: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11864: LD_INT 35
11866: PPUSH
11867: LD_VAR 0 3
11871: PPUSH
11872: LD_INT 1
11874: PPUSH
11875: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11879: LD_INT 45
11881: PPUSH
11882: LD_VAR 0 3
11886: PPUSH
11887: LD_INT 1
11889: PPUSH
11890: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11894: LD_INT 46
11896: PPUSH
11897: LD_VAR 0 3
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11909: LD_INT 47
11911: PPUSH
11912: LD_VAR 0 3
11916: PPUSH
11917: LD_INT 1
11919: PPUSH
11920: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11924: LD_INT 1
11926: PPUSH
11927: LD_VAR 0 3
11931: PPUSH
11932: LD_INT 1
11934: PPUSH
11935: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11939: LD_INT 2
11941: PPUSH
11942: LD_VAR 0 3
11946: PPUSH
11947: LD_INT 1
11949: PPUSH
11950: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11954: LD_INT 11
11956: PPUSH
11957: LD_VAR 0 3
11961: PPUSH
11962: LD_INT 1
11964: PPUSH
11965: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11969: LD_INT 20
11971: PPUSH
11972: LD_VAR 0 3
11976: PPUSH
11977: LD_INT 1
11979: PPUSH
11980: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11984: LD_INT 48
11986: PPUSH
11987: LD_VAR 0 3
11991: PPUSH
11992: LD_INT 1
11994: PPUSH
11995: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11999: LD_INT 49
12001: PPUSH
12002: LD_VAR 0 3
12006: PPUSH
12007: LD_INT 1
12009: PPUSH
12010: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12014: LD_INT 69
12016: PPUSH
12017: LD_VAR 0 3
12021: PPUSH
12022: LD_INT 1
12024: PPUSH
12025: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12029: LD_INT 39
12031: PPUSH
12032: LD_VAR 0 3
12036: PPUSH
12037: LD_INT 1
12039: PPUSH
12040: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12044: LD_INT 34
12046: PPUSH
12047: LD_VAR 0 3
12051: PPUSH
12052: LD_INT 1
12054: PPUSH
12055: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12059: LD_INT 42
12061: PPUSH
12062: LD_VAR 0 3
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12074: LD_INT 44
12076: PPUSH
12077: LD_VAR 0 3
12081: PPUSH
12082: LD_INT 1
12084: PPUSH
12085: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12089: LD_INT 41
12091: PPUSH
12092: LD_VAR 0 3
12096: PPUSH
12097: LD_INT 1
12099: PPUSH
12100: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12104: LD_INT 40
12106: PPUSH
12107: LD_VAR 0 3
12111: PPUSH
12112: LD_INT 1
12114: PPUSH
12115: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12119: LD_INT 43
12121: PPUSH
12122: LD_VAR 0 3
12126: PPUSH
12127: LD_INT 1
12129: PPUSH
12130: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12134: LD_INT 70
12136: PPUSH
12137: LD_VAR 0 3
12141: PPUSH
12142: LD_INT 1
12144: PPUSH
12145: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12149: LD_INT 51
12151: PPUSH
12152: LD_VAR 0 3
12156: PPUSH
12157: LD_INT 1
12159: PPUSH
12160: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12164: LD_INT 52
12166: PPUSH
12167: LD_VAR 0 3
12171: PPUSH
12172: LD_INT 1
12174: PPUSH
12175: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12179: LD_INT 6
12181: PPUSH
12182: LD_VAR 0 3
12186: PPUSH
12187: LD_INT 1
12189: PPUSH
12190: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12194: LD_INT 15
12196: PPUSH
12197: LD_VAR 0 3
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12209: LD_INT 7
12211: PPUSH
12212: LD_VAR 0 3
12216: PPUSH
12217: LD_INT 1
12219: PPUSH
12220: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12224: LD_INT 12
12226: PPUSH
12227: LD_VAR 0 3
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12239: LD_INT 17
12241: PPUSH
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12254: LD_INT 18
12256: PPUSH
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12269: LD_INT 60
12271: PPUSH
12272: LD_VAR 0 3
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12284: LD_INT 32
12286: PPUSH
12287: LD_VAR 0 3
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12299: LD_INT 9
12301: PPUSH
12302: LD_VAR 0 3
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12314: LD_INT 57
12316: PPUSH
12317: LD_VAR 0 3
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12329: LD_INT 30
12331: PPUSH
12332: LD_VAR 0 3
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12344: LD_INT 37
12346: PPUSH
12347: LD_VAR 0 3
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12359: LD_INT 63
12361: PPUSH
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 1
12369: PPUSH
12370: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12374: LD_INT 3
12376: PPUSH
12377: LD_VAR 0 3
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12389: LD_INT 4
12391: PPUSH
12392: LD_VAR 0 3
12396: PPUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12404: LD_INT 5
12406: PPUSH
12407: LD_VAR 0 3
12411: PPUSH
12412: LD_INT 1
12414: PPUSH
12415: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12419: LD_INT 66
12421: PPUSH
12422: LD_VAR 0 3
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12434: LD_INT 21
12436: PPUSH
12437: LD_VAR 0 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12449: LD_INT 22
12451: PPUSH
12452: LD_VAR 0 3
12456: PPUSH
12457: LD_INT 1
12459: PPUSH
12460: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12464: LD_INT 19
12466: PPUSH
12467: LD_VAR 0 3
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12479: LD_INT 54
12481: PPUSH
12482: LD_VAR 0 3
12486: PPUSH
12487: LD_INT 1
12489: PPUSH
12490: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12494: LD_INT 55
12496: PPUSH
12497: LD_VAR 0 3
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12509: LD_INT 0
12511: PPUSH
12512: LD_VAR 0 3
12516: PPUSH
12517: LD_INT 1
12519: PPUSH
12520: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12524: LD_INT 1
12526: PPUSH
12527: LD_VAR 0 3
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12539: LD_INT 2
12541: PPUSH
12542: LD_VAR 0 3
12546: PPUSH
12547: LD_INT 1
12549: PPUSH
12550: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12554: LD_INT 3
12556: PPUSH
12557: LD_VAR 0 3
12561: PPUSH
12562: LD_INT 1
12564: PPUSH
12565: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12569: LD_INT 4
12571: PPUSH
12572: LD_VAR 0 3
12576: PPUSH
12577: LD_INT 1
12579: PPUSH
12580: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12584: LD_INT 5
12586: PPUSH
12587: LD_VAR 0 3
12591: PPUSH
12592: LD_INT 1
12594: PPUSH
12595: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12599: LD_INT 6
12601: PPUSH
12602: LD_VAR 0 3
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12614: LD_INT 7
12616: PPUSH
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12629: LD_INT 8
12631: PPUSH
12632: LD_VAR 0 3
12636: PPUSH
12637: LD_INT 1
12639: PPUSH
12640: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12644: LD_INT 10
12646: PPUSH
12647: LD_VAR 0 3
12651: PPUSH
12652: LD_INT 1
12654: PPUSH
12655: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12659: LD_INT 11
12661: PPUSH
12662: LD_VAR 0 3
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12674: LD_INT 12
12676: PPUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_INT 1
12684: PPUSH
12685: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12689: LD_INT 13
12691: PPUSH
12692: LD_VAR 0 3
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12704: LD_INT 14
12706: PPUSH
12707: LD_VAR 0 3
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12719: LD_INT 15
12721: PPUSH
12722: LD_VAR 0 3
12726: PPUSH
12727: LD_INT 1
12729: PPUSH
12730: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12734: LD_INT 16
12736: PPUSH
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 1
12744: PPUSH
12745: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12749: LD_INT 17
12751: PPUSH
12752: LD_VAR 0 3
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12764: LD_INT 18
12766: PPUSH
12767: LD_VAR 0 3
12771: PPUSH
12772: LD_INT 1
12774: PPUSH
12775: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12779: LD_INT 19
12781: PPUSH
12782: LD_VAR 0 3
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12794: LD_INT 20
12796: PPUSH
12797: LD_VAR 0 3
12801: PPUSH
12802: LD_INT 1
12804: PPUSH
12805: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12809: LD_INT 21
12811: PPUSH
12812: LD_VAR 0 3
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12824: LD_INT 23
12826: PPUSH
12827: LD_VAR 0 3
12831: PPUSH
12832: LD_INT 1
12834: PPUSH
12835: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12839: LD_INT 26
12841: PPUSH
12842: LD_VAR 0 3
12846: PPUSH
12847: LD_INT 1
12849: PPUSH
12850: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12854: LD_INT 27
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: LD_INT 1
12864: PPUSH
12865: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12869: LD_INT 28
12871: PPUSH
12872: LD_VAR 0 3
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12884: LD_INT 29
12886: PPUSH
12887: LD_VAR 0 3
12891: PPUSH
12892: LD_INT 1
12894: PPUSH
12895: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12899: LD_INT 30
12901: PPUSH
12902: LD_VAR 0 3
12906: PPUSH
12907: LD_INT 1
12909: PPUSH
12910: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12914: LD_INT 31
12916: PPUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: LD_INT 1
12924: PPUSH
12925: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12929: LD_INT 32
12931: PPUSH
12932: LD_VAR 0 3
12936: PPUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12944: LD_INT 33
12946: PPUSH
12947: LD_VAR 0 3
12951: PPUSH
12952: LD_INT 1
12954: PPUSH
12955: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12959: LD_INT 36
12961: PPUSH
12962: LD_VAR 0 3
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: CALL_OW 324
// end ; 6 :
12974: GO 13984
12976: LD_INT 6
12978: DOUBLE
12979: EQUAL
12980: IFTRUE 12984
12982: GO 13909
12984: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12985: LD_INT 35
12987: PPUSH
12988: LD_VAR 0 3
12992: PPUSH
12993: LD_INT 1
12995: PPUSH
12996: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13000: LD_INT 45
13002: PPUSH
13003: LD_VAR 0 3
13007: PPUSH
13008: LD_INT 1
13010: PPUSH
13011: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13015: LD_INT 46
13017: PPUSH
13018: LD_VAR 0 3
13022: PPUSH
13023: LD_INT 1
13025: PPUSH
13026: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13030: LD_INT 47
13032: PPUSH
13033: LD_VAR 0 3
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13045: LD_INT 1
13047: PPUSH
13048: LD_VAR 0 3
13052: PPUSH
13053: LD_INT 1
13055: PPUSH
13056: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13060: LD_INT 2
13062: PPUSH
13063: LD_VAR 0 3
13067: PPUSH
13068: LD_INT 1
13070: PPUSH
13071: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13075: LD_INT 11
13077: PPUSH
13078: LD_VAR 0 3
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13090: LD_INT 20
13092: PPUSH
13093: LD_VAR 0 3
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13105: LD_INT 48
13107: PPUSH
13108: LD_VAR 0 3
13112: PPUSH
13113: LD_INT 1
13115: PPUSH
13116: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13120: LD_INT 49
13122: PPUSH
13123: LD_VAR 0 3
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13135: LD_INT 50
13137: PPUSH
13138: LD_VAR 0 3
13142: PPUSH
13143: LD_INT 1
13145: PPUSH
13146: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13150: LD_INT 69
13152: PPUSH
13153: LD_VAR 0 3
13157: PPUSH
13158: LD_INT 1
13160: PPUSH
13161: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13165: LD_INT 39
13167: PPUSH
13168: LD_VAR 0 3
13172: PPUSH
13173: LD_INT 1
13175: PPUSH
13176: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13180: LD_INT 34
13182: PPUSH
13183: LD_VAR 0 3
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13195: LD_INT 42
13197: PPUSH
13198: LD_VAR 0 3
13202: PPUSH
13203: LD_INT 1
13205: PPUSH
13206: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13210: LD_INT 44
13212: PPUSH
13213: LD_VAR 0 3
13217: PPUSH
13218: LD_INT 1
13220: PPUSH
13221: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13225: LD_INT 41
13227: PPUSH
13228: LD_VAR 0 3
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13240: LD_INT 13
13242: PPUSH
13243: LD_VAR 0 3
13247: PPUSH
13248: LD_INT 1
13250: PPUSH
13251: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13255: LD_INT 40
13257: PPUSH
13258: LD_VAR 0 3
13262: PPUSH
13263: LD_INT 1
13265: PPUSH
13266: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13270: LD_INT 43
13272: PPUSH
13273: LD_VAR 0 3
13277: PPUSH
13278: LD_INT 1
13280: PPUSH
13281: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13285: LD_INT 70
13287: PPUSH
13288: LD_VAR 0 3
13292: PPUSH
13293: LD_INT 1
13295: PPUSH
13296: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13300: LD_INT 23
13302: PPUSH
13303: LD_VAR 0 3
13307: PPUSH
13308: LD_INT 1
13310: PPUSH
13311: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13315: LD_INT 51
13317: PPUSH
13318: LD_VAR 0 3
13322: PPUSH
13323: LD_INT 1
13325: PPUSH
13326: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13330: LD_INT 52
13332: PPUSH
13333: LD_VAR 0 3
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13345: LD_INT 6
13347: PPUSH
13348: LD_VAR 0 3
13352: PPUSH
13353: LD_INT 1
13355: PPUSH
13356: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13360: LD_INT 15
13362: PPUSH
13363: LD_VAR 0 3
13367: PPUSH
13368: LD_INT 1
13370: PPUSH
13371: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13375: LD_INT 7
13377: PPUSH
13378: LD_VAR 0 3
13382: PPUSH
13383: LD_INT 1
13385: PPUSH
13386: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13390: LD_INT 12
13392: PPUSH
13393: LD_VAR 0 3
13397: PPUSH
13398: LD_INT 1
13400: PPUSH
13401: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13405: LD_INT 10
13407: PPUSH
13408: LD_VAR 0 3
13412: PPUSH
13413: LD_INT 1
13415: PPUSH
13416: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13420: LD_INT 17
13422: PPUSH
13423: LD_VAR 0 3
13427: PPUSH
13428: LD_INT 1
13430: PPUSH
13431: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13435: LD_INT 18
13437: PPUSH
13438: LD_VAR 0 3
13442: PPUSH
13443: LD_INT 1
13445: PPUSH
13446: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13450: LD_INT 60
13452: PPUSH
13453: LD_VAR 0 3
13457: PPUSH
13458: LD_INT 1
13460: PPUSH
13461: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13465: LD_INT 61
13467: PPUSH
13468: LD_VAR 0 3
13472: PPUSH
13473: LD_INT 1
13475: PPUSH
13476: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13480: LD_INT 32
13482: PPUSH
13483: LD_VAR 0 3
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13495: LD_INT 27
13497: PPUSH
13498: LD_VAR 0 3
13502: PPUSH
13503: LD_INT 1
13505: PPUSH
13506: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13510: LD_INT 36
13512: PPUSH
13513: LD_VAR 0 3
13517: PPUSH
13518: LD_INT 1
13520: PPUSH
13521: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13525: LD_INT 33
13527: PPUSH
13528: LD_VAR 0 3
13532: PPUSH
13533: LD_INT 1
13535: PPUSH
13536: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13540: LD_INT 9
13542: PPUSH
13543: LD_VAR 0 3
13547: PPUSH
13548: LD_INT 1
13550: PPUSH
13551: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13555: LD_INT 38
13557: PPUSH
13558: LD_VAR 0 3
13562: PPUSH
13563: LD_INT 1
13565: PPUSH
13566: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13570: LD_INT 57
13572: PPUSH
13573: LD_VAR 0 3
13577: PPUSH
13578: LD_INT 1
13580: PPUSH
13581: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13585: LD_INT 58
13587: PPUSH
13588: LD_VAR 0 3
13592: PPUSH
13593: LD_INT 1
13595: PPUSH
13596: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13600: LD_INT 28
13602: PPUSH
13603: LD_VAR 0 3
13607: PPUSH
13608: LD_INT 1
13610: PPUSH
13611: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13615: LD_INT 29
13617: PPUSH
13618: LD_VAR 0 3
13622: PPUSH
13623: LD_INT 1
13625: PPUSH
13626: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13630: LD_INT 30
13632: PPUSH
13633: LD_VAR 0 3
13637: PPUSH
13638: LD_INT 1
13640: PPUSH
13641: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13645: LD_INT 37
13647: PPUSH
13648: LD_VAR 0 3
13652: PPUSH
13653: LD_INT 1
13655: PPUSH
13656: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13660: LD_INT 63
13662: PPUSH
13663: LD_VAR 0 3
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13675: LD_INT 64
13677: PPUSH
13678: LD_VAR 0 3
13682: PPUSH
13683: LD_INT 1
13685: PPUSH
13686: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13690: LD_INT 3
13692: PPUSH
13693: LD_VAR 0 3
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13705: LD_INT 4
13707: PPUSH
13708: LD_VAR 0 3
13712: PPUSH
13713: LD_INT 1
13715: PPUSH
13716: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13720: LD_INT 5
13722: PPUSH
13723: LD_VAR 0 3
13727: PPUSH
13728: LD_INT 1
13730: PPUSH
13731: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13735: LD_INT 8
13737: PPUSH
13738: LD_VAR 0 3
13742: PPUSH
13743: LD_INT 1
13745: PPUSH
13746: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13750: LD_INT 66
13752: PPUSH
13753: LD_VAR 0 3
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13765: LD_INT 67
13767: PPUSH
13768: LD_VAR 0 3
13772: PPUSH
13773: LD_INT 1
13775: PPUSH
13776: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13780: LD_INT 21
13782: PPUSH
13783: LD_VAR 0 3
13787: PPUSH
13788: LD_INT 1
13790: PPUSH
13791: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13795: LD_INT 22
13797: PPUSH
13798: LD_VAR 0 3
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13810: LD_INT 19
13812: PPUSH
13813: LD_VAR 0 3
13817: PPUSH
13818: LD_INT 1
13820: PPUSH
13821: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13825: LD_INT 26
13827: PPUSH
13828: LD_VAR 0 3
13832: PPUSH
13833: LD_INT 1
13835: PPUSH
13836: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13840: LD_INT 54
13842: PPUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13855: LD_INT 55
13857: PPUSH
13858: LD_VAR 0 3
13862: PPUSH
13863: LD_INT 1
13865: PPUSH
13866: CALL_OW 322
// for i = 0 to 39 do
13870: LD_ADDR_VAR 0 4
13874: PUSH
13875: DOUBLE
13876: LD_INT 0
13878: DEC
13879: ST_TO_ADDR
13880: LD_INT 39
13882: PUSH
13883: FOR_TO
13884: IFFALSE 13905
// SetRestrict ( i , side , true ) ;
13886: LD_VAR 0 4
13890: PPUSH
13891: LD_VAR 0 3
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 324
13903: GO 13883
13905: POP
13906: POP
// end ; else
13907: GO 13984
13909: POP
// begin for i = 1 to 73 do
13910: LD_ADDR_VAR 0 4
13914: PUSH
13915: DOUBLE
13916: LD_INT 1
13918: DEC
13919: ST_TO_ADDR
13920: LD_INT 73
13922: PUSH
13923: FOR_TO
13924: IFFALSE 13945
// SetTech ( i , side , state_enabled ) ;
13926: LD_VAR 0 4
13930: PPUSH
13931: LD_VAR 0 3
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: CALL_OW 322
13943: GO 13923
13945: POP
13946: POP
// for i = 0 to 39 do
13947: LD_ADDR_VAR 0 4
13951: PUSH
13952: DOUBLE
13953: LD_INT 0
13955: DEC
13956: ST_TO_ADDR
13957: LD_INT 39
13959: PUSH
13960: FOR_TO
13961: IFFALSE 13982
// SetRestrict ( i , side , true ) ;
13963: LD_VAR 0 4
13967: PPUSH
13968: LD_VAR 0 3
13972: PPUSH
13973: LD_INT 1
13975: PPUSH
13976: CALL_OW 324
13980: GO 13960
13982: POP
13983: POP
// end ; end ; end ;
13984: GO 9989
13986: POP
13987: POP
// end ; end_of_file
13988: LD_VAR 0 2
13992: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13993: LD_INT 0
13995: PPUSH
13996: PPUSH
13997: PPUSH
13998: PPUSH
13999: PPUSH
14000: PPUSH
14001: PPUSH
14002: PPUSH
14003: PPUSH
// for i := 1 to 8 do
14004: LD_ADDR_VAR 0 2
14008: PUSH
14009: DOUBLE
14010: LD_INT 1
14012: DEC
14013: ST_TO_ADDR
14014: LD_INT 8
14016: PUSH
14017: FOR_TO
14018: IFFALSE 14402
// begin if Side_Positions [ i ] then
14020: LD_EXP 36
14024: PUSH
14025: LD_VAR 0 2
14029: ARRAY
14030: IFFALSE 14400
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
14032: LD_ADDR_VAR 0 7
14036: PUSH
14037: LD_INT 22
14039: PUSH
14040: LD_VAR 0 2
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 21
14051: PUSH
14052: LD_INT 1
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PPUSH
14063: CALL_OW 69
14067: PUSH
14068: LD_INT 0
14070: PLUS
14071: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14072: LD_ADDR_VAR 0 9
14076: PUSH
14077: LD_INT 22
14079: PUSH
14080: LD_VAR 0 2
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 2
14091: PUSH
14092: LD_INT 30
14094: PUSH
14095: LD_INT 0
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: LD_INT 30
14104: PUSH
14105: LD_INT 1
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PPUSH
14121: CALL_OW 69
14125: ST_TO_ADDR
// crates := 0 ;
14126: LD_ADDR_VAR 0 4
14130: PUSH
14131: LD_INT 0
14133: ST_TO_ADDR
// oil := 0 ;
14134: LD_ADDR_VAR 0 5
14138: PUSH
14139: LD_INT 0
14141: ST_TO_ADDR
// sib := 0 ;
14142: LD_ADDR_VAR 0 6
14146: PUSH
14147: LD_INT 0
14149: ST_TO_ADDR
// if bases then
14150: LD_VAR 0 9
14154: IFFALSE 14260
// begin for j in bases do
14156: LD_ADDR_VAR 0 3
14160: PUSH
14161: LD_VAR 0 9
14165: PUSH
14166: FOR_IN
14167: IFFALSE 14258
// begin base := GetBase ( j ) ;
14169: LD_ADDR_VAR 0 8
14173: PUSH
14174: LD_VAR 0 3
14178: PPUSH
14179: CALL_OW 274
14183: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14184: LD_ADDR_VAR 0 4
14188: PUSH
14189: LD_VAR 0 4
14193: PUSH
14194: LD_VAR 0 8
14198: PPUSH
14199: LD_INT 1
14201: PPUSH
14202: CALL_OW 275
14206: PLUS
14207: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14208: LD_ADDR_VAR 0 5
14212: PUSH
14213: LD_VAR 0 5
14217: PUSH
14218: LD_VAR 0 8
14222: PPUSH
14223: LD_INT 2
14225: PPUSH
14226: CALL_OW 275
14230: PLUS
14231: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14232: LD_ADDR_VAR 0 6
14236: PUSH
14237: LD_VAR 0 6
14241: PUSH
14242: LD_VAR 0 8
14246: PPUSH
14247: LD_INT 3
14249: PPUSH
14250: CALL_OW 275
14254: PLUS
14255: ST_TO_ADDR
// end ;
14256: GO 14166
14258: POP
14259: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14260: LD_STRING setSpecText(
14262: PUSH
14263: LD_VAR 0 2
14267: STR
14268: PUSH
14269: LD_STRING ,
14271: STR
14272: PUSH
14273: LD_INT 2
14275: STR
14276: PUSH
14277: LD_STRING ,
14279: STR
14280: PUSH
14281: LD_VAR 0 4
14285: STR
14286: PUSH
14287: LD_STRING )
14289: STR
14290: PPUSH
14291: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14295: LD_STRING setSpecText(
14297: PUSH
14298: LD_VAR 0 2
14302: STR
14303: PUSH
14304: LD_STRING ,
14306: STR
14307: PUSH
14308: LD_INT 3
14310: STR
14311: PUSH
14312: LD_STRING ,
14314: STR
14315: PUSH
14316: LD_VAR 0 5
14320: STR
14321: PUSH
14322: LD_STRING )
14324: STR
14325: PPUSH
14326: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14330: LD_STRING setSpecText(
14332: PUSH
14333: LD_VAR 0 2
14337: STR
14338: PUSH
14339: LD_STRING ,
14341: STR
14342: PUSH
14343: LD_INT 4
14345: STR
14346: PUSH
14347: LD_STRING ,
14349: STR
14350: PUSH
14351: LD_VAR 0 6
14355: STR
14356: PUSH
14357: LD_STRING )
14359: STR
14360: PPUSH
14361: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14365: LD_STRING setSpecText(
14367: PUSH
14368: LD_VAR 0 2
14372: STR
14373: PUSH
14374: LD_STRING ,
14376: STR
14377: PUSH
14378: LD_INT 5
14380: STR
14381: PUSH
14382: LD_STRING ,
14384: STR
14385: PUSH
14386: LD_VAR 0 7
14390: STR
14391: PUSH
14392: LD_STRING )
14394: STR
14395: PPUSH
14396: CALL_OW 559
// end ; end ;
14400: GO 14017
14402: POP
14403: POP
// end ;
14404: LD_VAR 0 1
14408: RET
// every 0 0$1 do
14409: GO 14411
14411: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14412: LD_STRING setSpecLogoNumber(
14414: PUSH
14415: LD_INT 2
14417: STR
14418: PUSH
14419: LD_STRING ,
14421: STR
14422: PUSH
14423: LD_INT 1
14425: STR
14426: PUSH
14427: LD_STRING )
14429: STR
14430: PPUSH
14431: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14435: LD_STRING setSpecLogoNumber(
14437: PUSH
14438: LD_INT 3
14440: STR
14441: PUSH
14442: LD_STRING ,
14444: STR
14445: PUSH
14446: LD_INT 2
14448: STR
14449: PUSH
14450: LD_STRING )
14452: STR
14453: PPUSH
14454: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14458: LD_STRING setSpecLogoNumber(
14460: PUSH
14461: LD_INT 4
14463: STR
14464: PUSH
14465: LD_STRING ,
14467: STR
14468: PUSH
14469: LD_INT 3
14471: STR
14472: PUSH
14473: LD_STRING )
14475: STR
14476: PPUSH
14477: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14481: LD_STRING setSpecLogoNumber(
14483: PUSH
14484: LD_INT 5
14486: STR
14487: PUSH
14488: LD_STRING ,
14490: STR
14491: PUSH
14492: LD_INT 4
14494: STR
14495: PUSH
14496: LD_STRING )
14498: STR
14499: PPUSH
14500: CALL_OW 559
// end ;
14504: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14505: LD_INT 2
14507: PUSH
14508: LD_INT 30
14510: PUSH
14511: LD_INT 0
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 30
14520: PUSH
14521: LD_INT 1
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: EMPTY
14529: LIST
14530: LIST
14531: LIST
14532: PPUSH
14533: CALL_OW 69
14537: IFFALSE 14547
14539: GO 14541
14541: DISABLE
// begin enable ;
14542: ENABLE
// UpdateSpectatorBar ;
14543: CALL 13993 0 0
// end ; end_of_file
14547: END
// var respawn , inqueue ; export function init_respawning ; begin
14548: LD_INT 0
14550: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14551: LD_ADDR_LOC 18
14555: PUSH
14556: LD_INT 1
14558: PPUSH
14559: LD_INT 8
14561: PPUSH
14562: CALL_OW 12
14566: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14567: LD_ADDR_LOC 19
14571: PUSH
14572: LD_INT 0
14574: PUSH
14575: LD_INT 0
14577: PUSH
14578: LD_INT 0
14580: PUSH
14581: LD_INT 0
14583: PUSH
14584: LD_INT 0
14586: PUSH
14587: LD_INT 0
14589: PUSH
14590: LD_INT 0
14592: PUSH
14593: LD_INT 0
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: ST_TO_ADDR
// end ;
14606: LD_VAR 0 1
14610: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14611: GO 14613
14613: DISABLE
14614: LD_INT 0
14616: PPUSH
14617: PPUSH
14618: PPUSH
// begin if respawning_time_max = 0 then
14619: LD_EXP 30
14623: PUSH
14624: LD_INT 0
14626: EQUAL
14627: IFFALSE 14631
// exit ;
14629: GO 15039
// if respawn = 8 then
14631: LD_LOC 18
14635: PUSH
14636: LD_INT 8
14638: EQUAL
14639: IFFALSE 14651
// respawn := 1 else
14641: LD_ADDR_LOC 18
14645: PUSH
14646: LD_INT 1
14648: ST_TO_ADDR
14649: GO 14665
// respawn := respawn + 1 ;
14651: LD_ADDR_LOC 18
14655: PUSH
14656: LD_LOC 18
14660: PUSH
14661: LD_INT 1
14663: PLUS
14664: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14665: LD_EXP 36
14669: PUSH
14670: LD_LOC 18
14674: ARRAY
14675: PUSH
14676: LD_LOC 19
14680: PUSH
14681: LD_LOC 18
14685: ARRAY
14686: NOT
14687: AND
14688: IFFALSE 15038
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14690: LD_ADDR_VAR 0 1
14694: PUSH
14695: LD_INT 21
14697: PUSH
14698: LD_INT 1
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 22
14707: PUSH
14708: LD_LOC 18
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 3
14719: PUSH
14720: LD_INT 23
14722: PUSH
14723: LD_INT 0
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: PPUSH
14736: CALL_OW 69
14740: ST_TO_ADDR
// if n < number_of_people then
14741: LD_VAR 0 1
14745: PUSH
14746: LD_EXP 21
14750: LESS
14751: IFFALSE 15035
// begin aktresp := respawn ;
14753: LD_ADDR_VAR 0 3
14757: PUSH
14758: LD_LOC 18
14762: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14763: LD_ADDR_LOC 19
14767: PUSH
14768: LD_LOC 19
14772: PPUSH
14773: LD_VAR 0 3
14777: PPUSH
14778: LD_INT 1
14780: PPUSH
14781: CALL_OW 1
14785: ST_TO_ADDR
// enable ;
14786: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14787: LD_EXP 29
14791: PPUSH
14792: LD_EXP 30
14796: PPUSH
14797: CALL_OW 12
14801: PPUSH
14802: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14806: LD_ADDR_LOC 19
14810: PUSH
14811: LD_LOC 19
14815: PPUSH
14816: LD_VAR 0 3
14820: PPUSH
14821: LD_INT 0
14823: PPUSH
14824: CALL_OW 1
14828: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14829: LD_ADDR_VAR 0 2
14833: PUSH
14834: LD_INT 21
14836: PUSH
14837: LD_INT 3
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 2
14846: PUSH
14847: LD_INT 30
14849: PUSH
14850: LD_INT 0
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 30
14859: PUSH
14860: LD_INT 1
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 50
14874: PUSH
14875: EMPTY
14876: LIST
14877: PUSH
14878: LD_INT 22
14880: PUSH
14881: LD_VAR 0 3
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: PPUSH
14896: CALL_OW 69
14900: ST_TO_ADDR
// if dep = 0 then
14901: LD_VAR 0 2
14905: PUSH
14906: LD_INT 0
14908: EQUAL
14909: IFFALSE 14913
// exit ;
14911: GO 15039
// hc_name :=  ;
14913: LD_ADDR_OWVAR 26
14917: PUSH
14918: LD_STRING 
14920: ST_TO_ADDR
// hc_importance := 0 ;
14921: LD_ADDR_OWVAR 32
14925: PUSH
14926: LD_INT 0
14928: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14929: LD_INT 0
14931: PPUSH
14932: LD_INT 0
14934: PPUSH
14935: LD_EXP 22
14939: PUSH
14940: LD_INT 2
14942: DIV
14943: PPUSH
14944: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14948: LD_ADDR_OWVAR 21
14952: PUSH
14953: LD_EXP 37
14957: PUSH
14958: LD_VAR 0 3
14962: ARRAY
14963: ST_TO_ADDR
// uc_side := aktresp ;
14964: LD_ADDR_OWVAR 20
14968: PUSH
14969: LD_VAR 0 3
14973: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14974: LD_ADDR_VAR 0 2
14978: PUSH
14979: LD_VAR 0 2
14983: PUSH
14984: LD_INT 1
14986: PPUSH
14987: LD_VAR 0 2
14991: PPUSH
14992: CALL_OW 12
14996: ARRAY
14997: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14998: CALL_OW 44
15002: PPUSH
15003: LD_VAR 0 2
15007: PPUSH
15008: CALL_OW 250
15012: PPUSH
15013: LD_VAR 0 2
15017: PPUSH
15018: CALL_OW 251
15022: PPUSH
15023: LD_INT 7
15025: PPUSH
15026: LD_INT 1
15028: PPUSH
15029: CALL_OW 50
// end else
15033: GO 15036
// enable ;
15035: ENABLE
// end else
15036: GO 15039
// enable ;
15038: ENABLE
// end ; end_of_file
15039: PPOPN 3
15041: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
15042: LD_INT 0
15044: PPUSH
15045: PPUSH
15046: PPUSH
// BuildUpTime_Delay = 0 ;
15047: LD_ADDR_EXP 61
15051: PUSH
15052: LD_INT 0
15054: ST_TO_ADDR
// if not def_builduptime then
15055: LD_EXP 14
15059: NOT
15060: IFFALSE 15064
// exit ;
15062: GO 15247
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
15064: LD_ADDR_EXP 61
15068: PUSH
15069: LD_INT 8400
15071: PUSH
15072: LD_INT 2100
15074: PUSH
15075: LD_EXP 14
15079: MUL
15080: PLUS
15081: ST_TO_ADDR
// BuildUpTimeActive := true ;
15082: LD_ADDR_EXP 60
15086: PUSH
15087: LD_INT 1
15089: ST_TO_ADDR
// for i := 1 to 8 do
15090: LD_ADDR_VAR 0 2
15094: PUSH
15095: DOUBLE
15096: LD_INT 1
15098: DEC
15099: ST_TO_ADDR
15100: LD_INT 8
15102: PUSH
15103: FOR_TO
15104: IFFALSE 15245
// if Side_Positions [ i ] then
15106: LD_EXP 36
15110: PUSH
15111: LD_VAR 0 2
15115: ARRAY
15116: IFFALSE 15243
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
15118: LD_EXP 59
15122: PUSH
15123: LD_EXP 36
15127: PUSH
15128: LD_VAR 0 2
15132: ARRAY
15133: ARRAY
15134: PPUSH
15135: LD_INT 5
15137: PPUSH
15138: CALL_OW 424
// for j := 1 to 8 do
15142: LD_ADDR_VAR 0 3
15146: PUSH
15147: DOUBLE
15148: LD_INT 1
15150: DEC
15151: ST_TO_ADDR
15152: LD_INT 8
15154: PUSH
15155: FOR_TO
15156: IFFALSE 15241
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15158: LD_EXP 36
15162: PUSH
15163: LD_VAR 0 3
15167: ARRAY
15168: PUSH
15169: LD_EXP 33
15173: PUSH
15174: LD_VAR 0 2
15178: ARRAY
15179: PUSH
15180: LD_EXP 33
15184: PUSH
15185: LD_VAR 0 3
15189: ARRAY
15190: NONEQUAL
15191: PUSH
15192: LD_EXP 38
15196: NOT
15197: PUSH
15198: LD_VAR 0 2
15202: PUSH
15203: LD_VAR 0 3
15207: NONEQUAL
15208: AND
15209: OR
15210: AND
15211: IFFALSE 15239
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15213: LD_VAR 0 3
15217: PPUSH
15218: LD_EXP 59
15222: PUSH
15223: LD_EXP 36
15227: PUSH
15228: LD_VAR 0 2
15232: ARRAY
15233: ARRAY
15234: PPUSH
15235: CALL_OW 333
15239: GO 15155
15241: POP
15242: POP
// end ;
15243: GO 15103
15245: POP
15246: POP
// end ;
15247: LD_VAR 0 1
15251: RET
// export function EndBuildUp ; var i , j ; begin
15252: LD_INT 0
15254: PPUSH
15255: PPUSH
15256: PPUSH
// BuildUpTimeActive := false ;
15257: LD_ADDR_EXP 60
15261: PUSH
15262: LD_INT 0
15264: ST_TO_ADDR
// for i := 1 to 8 do
15265: LD_ADDR_VAR 0 2
15269: PUSH
15270: DOUBLE
15271: LD_INT 1
15273: DEC
15274: ST_TO_ADDR
15275: LD_INT 8
15277: PUSH
15278: FOR_TO
15279: IFFALSE 15420
// if Side_Positions [ i ] then
15281: LD_EXP 36
15285: PUSH
15286: LD_VAR 0 2
15290: ARRAY
15291: IFFALSE 15418
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
15293: LD_EXP 59
15297: PUSH
15298: LD_EXP 36
15302: PUSH
15303: LD_VAR 0 2
15307: ARRAY
15308: ARRAY
15309: PPUSH
15310: LD_INT 0
15312: PPUSH
15313: CALL_OW 424
// for j := 1 to 8 do
15317: LD_ADDR_VAR 0 3
15321: PUSH
15322: DOUBLE
15323: LD_INT 1
15325: DEC
15326: ST_TO_ADDR
15327: LD_INT 8
15329: PUSH
15330: FOR_TO
15331: IFFALSE 15416
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15333: LD_EXP 36
15337: PUSH
15338: LD_VAR 0 3
15342: ARRAY
15343: PUSH
15344: LD_EXP 33
15348: PUSH
15349: LD_VAR 0 2
15353: ARRAY
15354: PUSH
15355: LD_EXP 33
15359: PUSH
15360: LD_VAR 0 3
15364: ARRAY
15365: NONEQUAL
15366: PUSH
15367: LD_EXP 38
15371: NOT
15372: PUSH
15373: LD_VAR 0 2
15377: PUSH
15378: LD_VAR 0 3
15382: NONEQUAL
15383: AND
15384: OR
15385: AND
15386: IFFALSE 15414
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15388: LD_VAR 0 3
15392: PPUSH
15393: LD_EXP 59
15397: PUSH
15398: LD_EXP 36
15402: PUSH
15403: LD_VAR 0 2
15407: ARRAY
15408: ARRAY
15409: PPUSH
15410: CALL_OW 334
15414: GO 15330
15416: POP
15417: POP
// end ;
15418: GO 15278
15420: POP
15421: POP
// end ;
15422: LD_VAR 0 1
15426: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
15427: LD_EXP 60
15431: IFFALSE 15606
15433: GO 15435
15435: DISABLE
15436: LD_INT 0
15438: PPUSH
15439: PPUSH
// begin for i := 1 to 8 do
15440: LD_ADDR_VAR 0 1
15444: PUSH
15445: DOUBLE
15446: LD_INT 1
15448: DEC
15449: ST_TO_ADDR
15450: LD_INT 8
15452: PUSH
15453: FOR_TO
15454: IFFALSE 15603
// if Side_Positions [ i ] then
15456: LD_EXP 36
15460: PUSH
15461: LD_VAR 0 1
15465: ARRAY
15466: IFFALSE 15601
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
15468: LD_ADDR_VAR 0 2
15472: PUSH
15473: LD_EXP 59
15477: PUSH
15478: LD_EXP 36
15482: PUSH
15483: LD_VAR 0 1
15487: ARRAY
15488: ARRAY
15489: PPUSH
15490: LD_INT 2
15492: PUSH
15493: LD_INT 21
15495: PUSH
15496: LD_INT 1
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 21
15505: PUSH
15506: LD_INT 2
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 22
15520: PUSH
15521: LD_OWVAR 2
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PPUSH
15534: CALL_OW 70
15538: PUSH
15539: FOR_IN
15540: IFFALSE 15599
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
15542: LD_EXP 33
15546: PUSH
15547: LD_VAR 0 1
15551: ARRAY
15552: PUSH
15553: LD_EXP 33
15557: PUSH
15558: LD_OWVAR 2
15562: ARRAY
15563: NONEQUAL
15564: PUSH
15565: LD_EXP 38
15569: NOT
15570: PUSH
15571: LD_VAR 0 1
15575: PUSH
15576: LD_OWVAR 2
15580: NONEQUAL
15581: AND
15582: OR
15583: IFFALSE 15597
// ComMoveToArea ( un , BuildUpEscape ) ;
15585: LD_VAR 0 2
15589: PPUSH
15590: LD_INT 17
15592: PPUSH
15593: CALL_OW 113
15597: GO 15539
15599: POP
15600: POP
15601: GO 15453
15603: POP
15604: POP
// enable ;
15605: ENABLE
// end ;
15606: PPOPN 2
15608: END
// every 0 0$1 trigger def_builduptime do
15609: LD_EXP 14
15613: IFFALSE 15639
15615: GO 15617
15617: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15618: LD_INT 8400
15620: PUSH
15621: LD_EXP 14
15625: PUSH
15626: LD_INT 2100
15628: MUL
15629: PLUS
15630: PPUSH
15631: CALL_OW 67
// EndBuildUp ;
15635: CALL 15252 0 0
// end ;
15639: END
