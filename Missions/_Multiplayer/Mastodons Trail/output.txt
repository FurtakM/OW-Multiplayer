// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , mastodont ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 36
 372: PUSH
 373: LD_EXP 31
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 595
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 1
 480: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 481: LD_ADDR_EXP 8
 485: PUSH
 486: LD_INT 10
 488: PPUSH
 489: CALL_OW 426
 493: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 494: LD_ADDR_EXP 9
 498: PUSH
 499: LD_INT 11
 501: PPUSH
 502: CALL_OW 426
 506: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_INT 12
 514: PPUSH
 515: CALL_OW 426
 519: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 520: LD_ADDR_EXP 11
 524: PUSH
 525: LD_INT 13
 527: PPUSH
 528: CALL_OW 426
 532: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 533: LD_ADDR_EXP 12
 537: PUSH
 538: LD_INT 14
 540: PPUSH
 541: CALL_OW 426
 545: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 546: LD_ADDR_EXP 13
 550: PUSH
 551: LD_INT 17
 553: PPUSH
 554: CALL_OW 426
 558: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 559: LD_ADDR_EXP 14
 563: PUSH
 564: LD_INT 20
 566: PPUSH
 567: CALL_OW 426
 571: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 572: LD_ADDR_VAR 0 3
 576: PUSH
 577: LD_INT 22
 579: PPUSH
 580: CALL_OW 426
 584: ST_TO_ADDR
// def_win_rules = 0 ;
 585: LD_ADDR_EXP 30
 589: PUSH
 590: LD_INT 0
 592: ST_TO_ADDR
// end else
 593: GO 727
// begin Randomize ;
 595: CALL_OW 10
// def_base_level := 2 ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_INT 2
 606: ST_TO_ADDR
// def_amount_of_people := 2 ;
 607: LD_ADDR_EXP 2
 611: PUSH
 612: LD_INT 2
 614: ST_TO_ADDR
// def_skill_level := 1 ;
 615: LD_ADDR_EXP 3
 619: PUSH
 620: LD_INT 1
 622: ST_TO_ADDR
// def_starting_resources := 2 ;
 623: LD_ADDR_EXP 4
 627: PUSH
 628: LD_INT 2
 630: ST_TO_ADDR
// def_shipments_density := 1 ;
 631: LD_ADDR_EXP 5
 635: PUSH
 636: LD_INT 1
 638: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 639: LD_ADDR_EXP 6
 643: PUSH
 644: LD_INT 0
 646: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 647: LD_ADDR_EXP 7
 651: PUSH
 652: LD_INT 1
 654: ST_TO_ADDR
// def_shared_vision := 1 ;
 655: LD_ADDR_EXP 8
 659: PUSH
 660: LD_INT 1
 662: ST_TO_ADDR
// def_morale_flags := 1 ;
 663: LD_ADDR_EXP 9
 667: PUSH
 668: LD_INT 1
 670: ST_TO_ADDR
// def_siberite_detection := 1 ;
 671: LD_ADDR_EXP 10
 675: PUSH
 676: LD_INT 1
 678: ST_TO_ADDR
// def_people_respawning := 2 ;
 679: LD_ADDR_EXP 11
 683: PUSH
 684: LD_INT 2
 686: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 687: LD_ADDR_EXP 12
 691: PUSH
 692: LD_INT 3
 694: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 695: LD_ADDR_EXP 13
 699: PUSH
 700: LD_INT 2
 702: ST_TO_ADDR
// def_builduptime := 1 ;
 703: LD_ADDR_EXP 14
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// tech_level = 4 ;
 711: LD_ADDR_VAR 0 3
 715: PUSH
 716: LD_INT 4
 718: ST_TO_ADDR
// def_win_rules = 0 ;
 719: LD_ADDR_EXP 30
 723: PUSH
 724: LD_INT 0
 726: ST_TO_ADDR
// end ; if isSGUI then
 727: LD_OWVAR 83
 731: IFFALSE 739
// setMpTechs ( ) else
 733: CALL 9467 0 0
 737: GO 752
// SetMpTechLevel ( tech_level + 1 ) ;
 739: LD_VAR 0 3
 743: PUSH
 744: LD_INT 1
 746: PLUS
 747: PPUSH
 748: CALL 9614 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 752: LD_ADDR_EXP 17
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 1
 762: PUSH
 763: LD_INT 1
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_EXP 1
 775: PUSH
 776: LD_INT 1
 778: PLUS
 779: ARRAY
 780: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 781: LD_ADDR_EXP 18
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: LD_INT 3
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: LIST
 799: PUSH
 800: LD_EXP 1
 804: PUSH
 805: LD_INT 1
 807: PLUS
 808: ARRAY
 809: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 810: LD_ADDR_EXP 19
 814: PUSH
 815: LD_INT 9
 817: PUSH
 818: LD_INT 12
 820: PUSH
 821: LD_INT 15
 823: PUSH
 824: LD_INT 24
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: PUSH
 833: LD_EXP 2
 837: PUSH
 838: LD_INT 1
 840: PLUS
 841: ARRAY
 842: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 843: LD_ADDR_EXP 20
 847: PUSH
 848: LD_INT 2
 850: PUSH
 851: LD_INT 3
 853: PUSH
 854: LD_INT 4
 856: PUSH
 857: LD_INT 5
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_EXP 3
 870: PUSH
 871: LD_INT 1
 873: PLUS
 874: ARRAY
 875: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 876: LD_ADDR_EXP 22
 880: PUSH
 881: LD_INT 0
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 0
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: LD_INT 30
 897: PUSH
 898: LD_INT 0
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: PUSH
 909: LD_INT 50
 911: PUSH
 912: LD_INT 20
 914: PUSH
 915: LD_INT 0
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: LIST
 922: PUSH
 923: LD_INT 80
 925: PUSH
 926: LD_INT 40
 928: PUSH
 929: LD_INT 20
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_EXP 4
 947: PUSH
 948: LD_INT 1
 950: PLUS
 951: ARRAY
 952: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 953: LD_ADDR_EXP 21
 957: PUSH
 958: LD_INT 10
 960: PUSH
 961: EMPTY
 962: LIST
 963: PUSH
 964: LD_INT 7
 966: PUSH
 967: LD_INT 14
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: LD_INT 6
 976: PUSH
 977: LD_INT 12
 979: PUSH
 980: LD_INT 18
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_INT 5
 990: PUSH
 991: LD_INT 10
 993: PUSH
 994: LD_INT 15
 996: PUSH
 997: LD_INT 20
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_EXP 4
1016: PUSH
1017: LD_INT 1
1019: PLUS
1020: ARRAY
1021: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1022: LD_ADDR_EXP 23
1026: PUSH
1027: LD_INT 150
1029: PUSH
1030: LD_EXP 5
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: MINUS
1039: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1040: LD_ADDR_EXP 27
1044: PUSH
1045: LD_INT 0
1047: PUSH
1048: LD_INT 10500
1050: PUSH
1051: LD_INT 6300
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_EXP 11
1063: PUSH
1064: LD_INT 1
1066: PLUS
1067: ARRAY
1068: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1069: LD_ADDR_EXP 28
1073: PUSH
1074: LD_INT 0
1076: PUSH
1077: LD_INT 31500
1079: PUSH
1080: LD_INT 10500
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_EXP 11
1092: PUSH
1093: LD_INT 1
1095: PLUS
1096: ARRAY
1097: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1098: LD_ADDR_EXP 25
1102: PUSH
1103: LD_INT 0
1105: PUSH
1106: LD_INT 1
1108: PUSH
1109: LD_INT 2
1111: PUSH
1112: LD_INT 3
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: LIST
1120: PUSH
1121: LD_EXP 12
1125: PUSH
1126: LD_INT 1
1128: PLUS
1129: ARRAY
1130: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1131: LD_ADDR_EXP 24
1135: PUSH
1136: LD_INT 1
1138: NEG
1139: PUSH
1140: LD_INT 350
1142: PUSH
1143: LD_INT 700
1145: PUSH
1146: LD_INT 1400
1148: PUSH
1149: LD_INT 0
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_EXP 9
1163: PUSH
1164: LD_INT 1
1166: PLUS
1167: ARRAY
1168: ST_TO_ADDR
// battle_flags_id := [ ] ;
1169: LD_ADDR_EXP 44
1173: PUSH
1174: EMPTY
1175: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1176: LD_ADDR_EXP 29
1180: PUSH
1181: LD_INT 0
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 63000
1189: PUSH
1190: LD_INT 126000
1192: PUSH
1193: LD_INT 189000
1195: PUSH
1196: LD_INT 252000
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_EXP 13
1211: PUSH
1212: LD_INT 1
1214: PLUS
1215: ARRAY
1216: ST_TO_ADDR
// mastodont := 8 ;
1217: LD_ADDR_EXP 45
1221: PUSH
1222: LD_INT 8
1224: ST_TO_ADDR
// end ;
1225: LD_VAR 0 1
1229: RET
// function init_map ; var i , j ; begin
1230: LD_INT 0
1232: PPUSH
1233: PPUSH
1234: PPUSH
// normal_oil_deposits_locations := [ [ 61 , 60 ] , [ 105 , 67 ] , [ 106 , 43 ] , [ 220 , 10 ] , [ 188 , 284 ] , [ 278 , 241 ] , [ 277 , 204 ] , [ 320 , 220 ] ] ;
1235: LD_ADDR_EXP 40
1239: PUSH
1240: LD_INT 61
1242: PUSH
1243: LD_INT 60
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 105
1252: PUSH
1253: LD_INT 67
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: LD_INT 106
1262: PUSH
1263: LD_INT 43
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_INT 220
1272: PUSH
1273: LD_INT 10
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 188
1282: PUSH
1283: LD_INT 284
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: LD_INT 278
1292: PUSH
1293: LD_INT 241
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: PUSH
1300: LD_INT 277
1302: PUSH
1303: LD_INT 204
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PUSH
1310: LD_INT 320
1312: PUSH
1313: LD_INT 220
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: ST_TO_ADDR
// extra_oil_deposits_locations := [ ] ;
1330: LD_ADDR_EXP 41
1334: PUSH
1335: EMPTY
1336: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 52 , 91 ] , [ 129 , 74 ] , [ 93 , 16 ] , [ 244 , 38 ] , [ 146 , 250 ] , [ 300 , 276 ] , [ 253 , 200 ] , [ 330 , 190 ] ] ;
1337: LD_ADDR_EXP 42
1341: PUSH
1342: LD_INT 52
1344: PUSH
1345: LD_INT 91
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 129
1354: PUSH
1355: LD_INT 74
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 93
1364: PUSH
1365: LD_INT 16
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PUSH
1372: LD_INT 244
1374: PUSH
1375: LD_INT 38
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 146
1384: PUSH
1385: LD_INT 250
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 300
1394: PUSH
1395: LD_INT 276
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: LD_INT 253
1404: PUSH
1405: LD_INT 200
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 330
1414: PUSH
1415: LD_INT 190
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1432: LD_ADDR_EXP 43
1436: PUSH
1437: EMPTY
1438: ST_TO_ADDR
// depot_def := [ [ 58 , 73 , 2 ] , [ 116 , 79 , 3 ] , [ 110 , 30 , 1 ] , [ 223 , 25 , 3 ] , [ 168 , 266 , 0 ] , [ 276 , 256 , 4 ] , [ 262 , 189 , 0 ] , [ 324 , 203 , 5 ] ] ;
1439: LD_ADDR_EXP 37
1443: PUSH
1444: LD_INT 58
1446: PUSH
1447: LD_INT 73
1449: PUSH
1450: LD_INT 2
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: PUSH
1458: LD_INT 116
1460: PUSH
1461: LD_INT 79
1463: PUSH
1464: LD_INT 3
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 110
1474: PUSH
1475: LD_INT 30
1477: PUSH
1478: LD_INT 1
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 223
1488: PUSH
1489: LD_INT 25
1491: PUSH
1492: LD_INT 3
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 168
1502: PUSH
1503: LD_INT 266
1505: PUSH
1506: LD_INT 0
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 276
1516: PUSH
1517: LD_INT 256
1519: PUSH
1520: LD_INT 4
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: PUSH
1528: LD_INT 262
1530: PUSH
1531: LD_INT 189
1533: PUSH
1534: LD_INT 0
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: LIST
1541: PUSH
1542: LD_INT 324
1544: PUSH
1545: LD_INT 203
1547: PUSH
1548: LD_INT 5
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: ST_TO_ADDR
// for i in depot_def do
1566: LD_ADDR_VAR 0 2
1570: PUSH
1571: LD_EXP 37
1575: PUSH
1576: FOR_IN
1577: IFFALSE 1653
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1579: LD_ADDR_EXP 39
1583: PUSH
1584: LD_EXP 39
1588: PUSH
1589: LD_VAR 0 2
1593: PUSH
1594: LD_INT 1
1596: ARRAY
1597: PPUSH
1598: LD_VAR 0 2
1602: PUSH
1603: LD_INT 3
1605: ARRAY
1606: PPUSH
1607: LD_INT 4
1609: NEG
1610: PPUSH
1611: CALL_OW 272
1615: PUSH
1616: LD_VAR 0 2
1620: PUSH
1621: LD_INT 2
1623: ARRAY
1624: PPUSH
1625: LD_VAR 0 2
1629: PUSH
1630: LD_INT 3
1632: ARRAY
1633: PPUSH
1634: LD_INT 4
1636: NEG
1637: PPUSH
1638: CALL_OW 273
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: EMPTY
1648: LIST
1649: ADD
1650: ST_TO_ADDR
1651: GO 1576
1653: POP
1654: POP
// breastworks_def := [ [ [ 72 , 97 , 5 ] , [ 82 , 85 , 4 ] , [ 66 , 66 , 4 ] ] , [ [ 119 , 99 , 0 ] , [ 143 , 98 , 5 ] , [ 126 , 66 , 4 ] ] , [ [ 113 , 16 , 4 ] , [ 130 , 38 , 5 ] , [ 111 , 42 , 0 ] ] , [ [ 218 , 36 , 0 ] , [ 240 , 40 , 5 ] , [ 205 , 24 , 1 ] ] , [ [ 174 , 250 , 3 ] , [ 151 , 248 , 2 ] , [ 193 , 272 , 4 ] ] , [ [ 248 , 249 , 1 ] , [ 263 , 267 , 1 ] , [ 270 , 238 , 3 ] ] , [ [ 239 , 173 , 2 ] , [ 261 , 173 , 2 ] , [ 256 , 208 , 1 ] ] , [ [ 311 , 181 , 2 ] , [ 298 , 190 , 2 ] , [ 312 , 212 , 1 ] ] ] ;
1655: LD_ADDR_EXP 38
1659: PUSH
1660: LD_INT 72
1662: PUSH
1663: LD_INT 97
1665: PUSH
1666: LD_INT 5
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 82
1676: PUSH
1677: LD_INT 85
1679: PUSH
1680: LD_INT 4
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 66
1690: PUSH
1691: LD_INT 66
1693: PUSH
1694: LD_INT 4
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 119
1709: PUSH
1710: LD_INT 99
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 143
1723: PUSH
1724: LD_INT 98
1726: PUSH
1727: LD_INT 5
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 126
1737: PUSH
1738: LD_INT 66
1740: PUSH
1741: LD_INT 4
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: LIST
1753: PUSH
1754: LD_INT 113
1756: PUSH
1757: LD_INT 16
1759: PUSH
1760: LD_INT 4
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 130
1770: PUSH
1771: LD_INT 38
1773: PUSH
1774: LD_INT 5
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: PUSH
1782: LD_INT 111
1784: PUSH
1785: LD_INT 42
1787: PUSH
1788: LD_INT 0
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 218
1803: PUSH
1804: LD_INT 36
1806: PUSH
1807: LD_INT 0
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PUSH
1815: LD_INT 240
1817: PUSH
1818: LD_INT 40
1820: PUSH
1821: LD_INT 5
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 205
1831: PUSH
1832: LD_INT 24
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 174
1850: PUSH
1851: LD_INT 250
1853: PUSH
1854: LD_INT 3
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 151
1864: PUSH
1865: LD_INT 248
1867: PUSH
1868: LD_INT 2
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 193
1878: PUSH
1879: LD_INT 272
1881: PUSH
1882: LD_INT 4
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_INT 248
1897: PUSH
1898: LD_INT 249
1900: PUSH
1901: LD_INT 1
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 263
1911: PUSH
1912: LD_INT 267
1914: PUSH
1915: LD_INT 1
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 270
1925: PUSH
1926: LD_INT 238
1928: PUSH
1929: LD_INT 3
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 239
1944: PUSH
1945: LD_INT 173
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 261
1958: PUSH
1959: LD_INT 173
1961: PUSH
1962: LD_INT 2
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 256
1972: PUSH
1973: LD_INT 208
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 311
1991: PUSH
1992: LD_INT 181
1994: PUSH
1995: LD_INT 2
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 298
2005: PUSH
2006: LD_INT 190
2008: PUSH
2009: LD_INT 2
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 312
2019: PUSH
2020: LD_INT 212
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: ST_TO_ADDR
// for i = 1 to Side_Positions do
2046: LD_ADDR_VAR 0 2
2050: PUSH
2051: DOUBLE
2052: LD_INT 1
2054: DEC
2055: ST_TO_ADDR
2056: LD_EXP 34
2060: PUSH
2061: FOR_TO
2062: IFFALSE 2192
// begin if not Side_Positions [ i ] then
2064: LD_EXP 34
2068: PUSH
2069: LD_VAR 0 2
2073: ARRAY
2074: NOT
2075: IFFALSE 2079
// continue ;
2077: GO 2061
// if def_extra_oil_deposits then
2079: LD_EXP 6
2083: IFFALSE 2141
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2085: LD_ADDR_VAR 0 3
2089: PUSH
2090: LD_EXP 41
2094: PUSH
2095: LD_EXP 34
2099: PUSH
2100: LD_VAR 0 2
2104: ARRAY
2105: ARRAY
2106: PUSH
2107: FOR_IN
2108: IFFALSE 2137
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2110: LD_VAR 0 3
2114: PUSH
2115: LD_INT 1
2117: ARRAY
2118: PPUSH
2119: LD_VAR 0 3
2123: PUSH
2124: LD_INT 2
2126: ARRAY
2127: PPUSH
2128: LD_INT 2
2130: PPUSH
2131: CALL_OW 62
2135: GO 2107
2137: POP
2138: POP
2139: GO 2190
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2141: LD_EXP 40
2145: PUSH
2146: LD_EXP 34
2150: PUSH
2151: LD_VAR 0 2
2155: ARRAY
2156: ARRAY
2157: PUSH
2158: LD_INT 1
2160: ARRAY
2161: PPUSH
2162: LD_EXP 40
2166: PUSH
2167: LD_EXP 34
2171: PUSH
2172: LD_VAR 0 2
2176: ARRAY
2177: ARRAY
2178: PUSH
2179: LD_INT 2
2181: ARRAY
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL_OW 62
// end ;
2190: GO 2061
2192: POP
2193: POP
// if def_extra_sib_deposits then
2194: LD_EXP 7
2198: IFFALSE 2352
// for i = 1 to Side_Positions do
2200: LD_ADDR_VAR 0 2
2204: PUSH
2205: DOUBLE
2206: LD_INT 1
2208: DEC
2209: ST_TO_ADDR
2210: LD_EXP 34
2214: PUSH
2215: FOR_TO
2216: IFFALSE 2350
// begin if not Side_Positions [ i ] then
2218: LD_EXP 34
2222: PUSH
2223: LD_VAR 0 2
2227: ARRAY
2228: NOT
2229: IFFALSE 2233
// continue ;
2231: GO 2215
// if def_extra_sib_deposits = 2 then
2233: LD_EXP 7
2237: PUSH
2238: LD_INT 2
2240: EQUAL
2241: IFFALSE 2299
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2243: LD_ADDR_VAR 0 3
2247: PUSH
2248: LD_EXP 43
2252: PUSH
2253: LD_EXP 34
2257: PUSH
2258: LD_VAR 0 2
2262: ARRAY
2263: ARRAY
2264: PUSH
2265: FOR_IN
2266: IFFALSE 2295
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2268: LD_VAR 0 3
2272: PUSH
2273: LD_INT 1
2275: ARRAY
2276: PPUSH
2277: LD_VAR 0 3
2281: PUSH
2282: LD_INT 2
2284: ARRAY
2285: PPUSH
2286: LD_INT 3
2288: PPUSH
2289: CALL_OW 62
2293: GO 2265
2295: POP
2296: POP
2297: GO 2348
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2299: LD_EXP 42
2303: PUSH
2304: LD_EXP 34
2308: PUSH
2309: LD_VAR 0 2
2313: ARRAY
2314: ARRAY
2315: PUSH
2316: LD_INT 1
2318: ARRAY
2319: PPUSH
2320: LD_EXP 42
2324: PUSH
2325: LD_EXP 34
2329: PUSH
2330: LD_VAR 0 2
2334: ARRAY
2335: ARRAY
2336: PUSH
2337: LD_INT 2
2339: ARRAY
2340: PPUSH
2341: LD_INT 3
2343: PPUSH
2344: CALL_OW 62
// end ;
2348: GO 2215
2350: POP
2351: POP
// end ;
2352: LD_VAR 0 1
2356: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2357: LD_INT 0
2359: PPUSH
2360: PPUSH
2361: PPUSH
// if not Team_Game then
2362: LD_EXP 36
2366: NOT
2367: IFFALSE 2465
// begin for i = 1 to 8 do
2369: LD_ADDR_VAR 0 2
2373: PUSH
2374: DOUBLE
2375: LD_INT 1
2377: DEC
2378: ST_TO_ADDR
2379: LD_INT 8
2381: PUSH
2382: FOR_TO
2383: IFFALSE 2461
// for j = 1 to 8 do
2385: LD_ADDR_VAR 0 3
2389: PUSH
2390: DOUBLE
2391: LD_INT 1
2393: DEC
2394: ST_TO_ADDR
2395: LD_INT 8
2397: PUSH
2398: FOR_TO
2399: IFFALSE 2457
// if i <> j then
2401: LD_VAR 0 2
2405: PUSH
2406: LD_VAR 0 3
2410: NONEQUAL
2411: IFFALSE 2435
// SetAttitude ( i , j , att_neutral , true ) else
2413: LD_VAR 0 2
2417: PPUSH
2418: LD_VAR 0 3
2422: PPUSH
2423: LD_INT 0
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: CALL_OW 80
2433: GO 2455
// SetAttitude ( i , j , att_friend , true ) ;
2435: LD_VAR 0 2
2439: PPUSH
2440: LD_VAR 0 3
2444: PPUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 1
2450: PPUSH
2451: CALL_OW 80
2455: GO 2398
2457: POP
2458: POP
2459: GO 2382
2461: POP
2462: POP
// end else
2463: GO 2640
// begin if def_shared_vision then
2465: LD_EXP 8
2469: IFFALSE 2534
// begin for i in Teams do
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: LD_EXP 32
2480: PUSH
2481: FOR_IN
2482: IFFALSE 2532
// for j = 2 to i do
2484: LD_ADDR_VAR 0 3
2488: PUSH
2489: DOUBLE
2490: LD_INT 2
2492: DEC
2493: ST_TO_ADDR
2494: LD_VAR 0 2
2498: PUSH
2499: FOR_TO
2500: IFFALSE 2528
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2502: LD_VAR 0 2
2506: PUSH
2507: LD_VAR 0 3
2511: ARRAY
2512: PPUSH
2513: LD_VAR 0 2
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 343
2526: GO 2499
2528: POP
2529: POP
2530: GO 2481
2532: POP
2533: POP
// end ; for i = 1 to 8 do
2534: LD_ADDR_VAR 0 2
2538: PUSH
2539: DOUBLE
2540: LD_INT 1
2542: DEC
2543: ST_TO_ADDR
2544: LD_INT 8
2546: PUSH
2547: FOR_TO
2548: IFFALSE 2638
// for j = 1 to 8 do
2550: LD_ADDR_VAR 0 3
2554: PUSH
2555: DOUBLE
2556: LD_INT 1
2558: DEC
2559: ST_TO_ADDR
2560: LD_INT 8
2562: PUSH
2563: FOR_TO
2564: IFFALSE 2634
// if Side_Teams [ i ] = Side_Teams [ j ] then
2566: LD_EXP 31
2570: PUSH
2571: LD_VAR 0 2
2575: ARRAY
2576: PUSH
2577: LD_EXP 31
2581: PUSH
2582: LD_VAR 0 3
2586: ARRAY
2587: EQUAL
2588: IFFALSE 2612
// SetAttitude ( i , j , att_friend , true ) else
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_VAR 0 3
2599: PPUSH
2600: LD_INT 1
2602: PPUSH
2603: LD_INT 1
2605: PPUSH
2606: CALL_OW 80
2610: GO 2632
// SetAttitude ( i , j , att_enemy , true ) ;
2612: LD_VAR 0 2
2616: PPUSH
2617: LD_VAR 0 3
2621: PPUSH
2622: LD_INT 2
2624: PPUSH
2625: LD_INT 1
2627: PPUSH
2628: CALL_OW 80
2632: GO 2563
2634: POP
2635: POP
2636: GO 2547
2638: POP
2639: POP
// end ; end ;
2640: LD_VAR 0 1
2644: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2645: LD_INT 0
2647: PPUSH
2648: PPUSH
2649: PPUSH
2650: PPUSH
// result := [ ] ;
2651: LD_ADDR_VAR 0 7
2655: PUSH
2656: EMPTY
2657: ST_TO_ADDR
// for i := 1 to count do
2658: LD_ADDR_VAR 0 8
2662: PUSH
2663: DOUBLE
2664: LD_INT 1
2666: DEC
2667: ST_TO_ADDR
2668: LD_VAR 0 1
2672: PUSH
2673: FOR_TO
2674: IFFALSE 3092
// begin uc_direction := Rand ( 0 , 5 ) ;
2676: LD_ADDR_OWVAR 24
2680: PUSH
2681: LD_INT 0
2683: PPUSH
2684: LD_INT 5
2686: PPUSH
2687: CALL_OW 12
2691: ST_TO_ADDR
// if commander then
2692: LD_LOC 1
2696: IFFALSE 2805
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2698: LD_ADDR_OWVAR 26
2702: PUSH
2703: LD_OWVAR 19
2707: PUSH
2708: LD_OWVAR 20
2712: ARRAY
2713: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2714: LD_INT 1
2716: PPUSH
2717: LD_INT 2
2719: PPUSH
2720: CALL_OW 12
2724: PPUSH
2725: LD_VAR 0 2
2729: PPUSH
2730: LD_EXP 20
2734: PUSH
2735: LD_INT 2
2737: PLUS
2738: PPUSH
2739: CALL_OW 380
// hc_importance := 105 ;
2743: LD_ADDR_OWVAR 32
2747: PUSH
2748: LD_INT 105
2750: ST_TO_ADDR
// commander := false ;
2751: LD_ADDR_LOC 1
2755: PUSH
2756: LD_INT 0
2758: ST_TO_ADDR
// if Multiplayer then
2759: LD_OWVAR 4
2763: IFFALSE 2803
// begin hc_gallery := MULTIAVATARS ;
2765: LD_ADDR_OWVAR 33
2769: PUSH
2770: LD_STRING MULTIAVATARS
2772: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2773: LD_ADDR_OWVAR 34
2777: PUSH
2778: LD_OWVAR 20
2782: PPUSH
2783: CALL_OW 525
2787: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2788: LD_ADDR_OWVAR 27
2792: PUSH
2793: LD_OWVAR 20
2797: PPUSH
2798: CALL_OW 526
2802: ST_TO_ADDR
// end ; end else
2803: GO 2868
// begin hc_name :=  ;
2805: LD_ADDR_OWVAR 26
2809: PUSH
2810: LD_STRING 
2812: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2813: LD_INT 1
2815: PPUSH
2816: LD_INT 2
2818: PPUSH
2819: CALL_OW 12
2823: PPUSH
2824: LD_VAR 0 2
2828: PPUSH
2829: LD_EXP 20
2833: PPUSH
2834: CALL_OW 380
// hc_importance := 0 ;
2838: LD_ADDR_OWVAR 32
2842: PUSH
2843: LD_INT 0
2845: ST_TO_ADDR
// if Multiplayer then
2846: LD_OWVAR 4
2850: IFFALSE 2868
// begin hc_gallery :=  ;
2852: LD_ADDR_OWVAR 33
2856: PUSH
2857: LD_STRING 
2859: ST_TO_ADDR
// hc_face_number := 0 ;
2860: LD_ADDR_OWVAR 34
2864: PUSH
2865: LD_INT 0
2867: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2868: LD_ADDR_VAR 0 10
2872: PUSH
2873: CALL_OW 44
2877: ST_TO_ADDR
// if global_defined then
2878: LD_LOC 3
2882: IFFALSE 3022
// begin if ( cl = class_soldier ) then
2884: LD_VAR 0 2
2888: PUSH
2889: LD_INT 1
2891: EQUAL
2892: IFFALSE 2912
// j := i + soldiers_created else
2894: LD_ADDR_VAR 0 9
2898: PUSH
2899: LD_VAR 0 8
2903: PUSH
2904: LD_LOC 4
2908: PLUS
2909: ST_TO_ADDR
2910: GO 2922
// j := i ;
2912: LD_ADDR_VAR 0 9
2916: PUSH
2917: LD_VAR 0 8
2921: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2922: LD_LOC 2
2926: PUSH
2927: LD_VAR 0 2
2931: ARRAY
2932: PUSH
2933: LD_VAR 0 9
2937: ARRAY
2938: PPUSH
2939: LD_VAR 0 10
2943: PPUSH
2944: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2948: LD_VAR 0 10
2952: PPUSH
2953: LD_INT 2
2955: PPUSH
2956: LD_LOC 2
2960: PUSH
2961: LD_VAR 0 2
2965: ARRAY
2966: PUSH
2967: LD_VAR 0 9
2971: ARRAY
2972: PPUSH
2973: LD_INT 2
2975: PPUSH
2976: CALL_OW 260
2980: PPUSH
2981: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2985: LD_VAR 0 10
2989: PPUSH
2990: LD_INT 1
2992: PPUSH
2993: LD_LOC 2
2997: PUSH
2998: LD_VAR 0 2
3002: ARRAY
3003: PUSH
3004: LD_VAR 0 9
3008: ARRAY
3009: PPUSH
3010: LD_INT 1
3012: PPUSH
3013: CALL_OW 260
3017: PPUSH
3018: CALL_OW 239
// end ; if building then
3022: LD_VAR 0 6
3026: IFFALSE 3044
// PlaceHumanInUnit ( un , building ) else
3028: LD_VAR 0 10
3032: PPUSH
3033: LD_VAR 0 6
3037: PPUSH
3038: CALL_OW 52
3042: GO 3071
// PlaceUnitXYR ( un , x , y , r , false ) ;
3044: LD_VAR 0 10
3048: PPUSH
3049: LD_VAR 0 3
3053: PPUSH
3054: LD_VAR 0 4
3058: PPUSH
3059: LD_VAR 0 5
3063: PPUSH
3064: LD_INT 0
3066: PPUSH
3067: CALL_OW 50
// result := result ^ [ un ] ;
3071: LD_ADDR_VAR 0 7
3075: PUSH
3076: LD_VAR 0 7
3080: PUSH
3081: LD_VAR 0 10
3085: PUSH
3086: EMPTY
3087: LIST
3088: ADD
3089: ST_TO_ADDR
// end ;
3090: GO 2673
3092: POP
3093: POP
// if not global_defined then
3094: LD_LOC 3
3098: NOT
3099: IFFALSE 3177
// if ( global_units >= cl ) then
3101: LD_LOC 2
3105: PUSH
3106: LD_VAR 0 2
3110: GREATEREQUAL
3111: IFFALSE 3152
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3113: LD_ADDR_LOC 2
3117: PUSH
3118: LD_LOC 2
3122: PPUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: LD_LOC 2
3132: PUSH
3133: LD_VAR 0 2
3137: ARRAY
3138: PUSH
3139: LD_VAR 0 7
3143: ADD
3144: PPUSH
3145: CALL_OW 1
3149: ST_TO_ADDR
3150: GO 3177
// global_units := Replace ( global_units , cl , result ) ;
3152: LD_ADDR_LOC 2
3156: PUSH
3157: LD_LOC 2
3161: PPUSH
3162: LD_VAR 0 2
3166: PPUSH
3167: LD_VAR 0 7
3171: PPUSH
3172: CALL_OW 1
3176: ST_TO_ADDR
// if commander then
3177: LD_LOC 1
3181: IFFALSE 3228
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3183: LD_ADDR_EXP 46
3187: PUSH
3188: LD_EXP 46
3192: PPUSH
3193: LD_OWVAR 20
3197: PPUSH
3198: LD_EXP 46
3202: PUSH
3203: LD_OWVAR 20
3207: ARRAY
3208: PUSH
3209: LD_VAR 0 10
3213: ADD
3214: PPUSH
3215: CALL_OW 1
3219: ST_TO_ADDR
// commander := false ;
3220: LD_ADDR_LOC 1
3224: PUSH
3225: LD_INT 0
3227: ST_TO_ADDR
// end ; end ;
3228: LD_VAR 0 7
3232: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3233: LD_INT 0
3235: PPUSH
3236: PPUSH
// uc_side := 0 ;
3237: LD_ADDR_OWVAR 20
3241: PUSH
3242: LD_INT 0
3244: ST_TO_ADDR
// uc_nation := 0 ;
3245: LD_ADDR_OWVAR 21
3249: PUSH
3250: LD_INT 0
3252: ST_TO_ADDR
// vc_chassis := 31 ;
3253: LD_ADDR_OWVAR 37
3257: PUSH
3258: LD_INT 31
3260: ST_TO_ADDR
// vc_control := control_rider ;
3261: LD_ADDR_OWVAR 38
3265: PUSH
3266: LD_INT 4
3268: ST_TO_ADDR
// for i = 1 to n do
3269: LD_ADDR_VAR 0 3
3273: PUSH
3274: DOUBLE
3275: LD_INT 1
3277: DEC
3278: ST_TO_ADDR
3279: LD_VAR 0 1
3283: PUSH
3284: FOR_TO
3285: IFFALSE 3304
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3287: CALL_OW 45
3291: PPUSH
3292: LD_INT 19
3294: PPUSH
3295: LD_INT 0
3297: PPUSH
3298: CALL_OW 49
3302: GO 3284
3304: POP
3305: POP
// end ;
3306: LD_VAR 0 2
3310: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3311: LD_INT 0
3313: PPUSH
3314: PPUSH
3315: PPUSH
3316: PPUSH
3317: PPUSH
3318: PPUSH
3319: PPUSH
3320: PPUSH
3321: PPUSH
// if side in [ 0 , 9 ] then
3322: LD_VAR 0 1
3326: PUSH
3327: LD_INT 0
3329: PUSH
3330: LD_INT 9
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: IN
3337: IFFALSE 3341
// exit ;
3339: GO 4391
// pos := Side_Positions [ side ] ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: LD_EXP 34
3350: PUSH
3351: LD_VAR 0 1
3355: ARRAY
3356: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3357: LD_ADDR_OWVAR 21
3361: PUSH
3362: LD_EXP 35
3366: PUSH
3367: LD_VAR 0 1
3371: ARRAY
3372: ST_TO_ADDR
// uc_side := side ;
3373: LD_ADDR_OWVAR 20
3377: PUSH
3378: LD_VAR 0 1
3382: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3383: LD_ADDR_VAR 0 4
3387: PUSH
3388: LD_EXP 37
3392: PUSH
3393: LD_VAR 0 3
3397: ARRAY
3398: PUSH
3399: LD_INT 1
3401: ARRAY
3402: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3403: LD_ADDR_VAR 0 5
3407: PUSH
3408: LD_EXP 37
3412: PUSH
3413: LD_VAR 0 3
3417: ARRAY
3418: PUSH
3419: LD_INT 2
3421: ARRAY
3422: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3423: LD_ADDR_VAR 0 6
3427: PUSH
3428: LD_EXP 37
3432: PUSH
3433: LD_VAR 0 3
3437: ARRAY
3438: PUSH
3439: LD_INT 3
3441: ARRAY
3442: ST_TO_ADDR
// if is_depot then
3443: LD_EXP 17
3447: IFFALSE 3580
// begin bc_type = b_depot ;
3449: LD_ADDR_OWVAR 42
3453: PUSH
3454: LD_INT 0
3456: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3457: LD_ADDR_VAR 0 10
3461: PUSH
3462: LD_VAR 0 4
3466: PPUSH
3467: LD_VAR 0 5
3471: PPUSH
3472: LD_VAR 0 6
3476: PPUSH
3477: CALL_OW 47
3481: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3482: LD_VAR 0 10
3486: PPUSH
3487: LD_STRING @
3489: PUSH
3490: LD_VAR 0 1
3494: STR
3495: PPUSH
3496: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3500: LD_VAR 0 10
3504: PPUSH
3505: CALL_OW 274
3509: PPUSH
3510: LD_INT 1
3512: PPUSH
3513: LD_EXP 22
3517: PUSH
3518: LD_INT 1
3520: ARRAY
3521: PPUSH
3522: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3526: LD_VAR 0 10
3530: PPUSH
3531: CALL_OW 274
3535: PPUSH
3536: LD_INT 2
3538: PPUSH
3539: LD_EXP 22
3543: PUSH
3544: LD_INT 2
3546: ARRAY
3547: PPUSH
3548: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3552: LD_VAR 0 10
3556: PPUSH
3557: CALL_OW 274
3561: PPUSH
3562: LD_INT 3
3564: PPUSH
3565: LD_EXP 22
3569: PUSH
3570: LD_INT 3
3572: ARRAY
3573: PPUSH
3574: CALL_OW 277
// end else
3578: GO 3724
// begin for i := 1 to 3 do
3580: LD_ADDR_VAR 0 7
3584: PUSH
3585: DOUBLE
3586: LD_INT 1
3588: DEC
3589: ST_TO_ADDR
3590: LD_INT 3
3592: PUSH
3593: FOR_TO
3594: IFFALSE 3722
// begin r := starting_resources [ i ] ;
3596: LD_ADDR_VAR 0 8
3600: PUSH
3601: LD_EXP 22
3605: PUSH
3606: LD_VAR 0 7
3610: ARRAY
3611: ST_TO_ADDR
// while r >= 10 do
3612: LD_VAR 0 8
3616: PUSH
3617: LD_INT 10
3619: GREATEREQUAL
3620: IFFALSE 3720
// if r > 50 then
3622: LD_VAR 0 8
3626: PUSH
3627: LD_INT 50
3629: GREATER
3630: IFFALSE 3676
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3632: LD_VAR 0 7
3636: PPUSH
3637: LD_INT 5
3639: PPUSH
3640: LD_VAR 0 4
3644: PPUSH
3645: LD_VAR 0 5
3649: PPUSH
3650: LD_INT 4
3652: PPUSH
3653: LD_INT 0
3655: PPUSH
3656: CALL_OW 60
// r := r - 50 ;
3660: LD_ADDR_VAR 0 8
3664: PUSH
3665: LD_VAR 0 8
3669: PUSH
3670: LD_INT 50
3672: MINUS
3673: ST_TO_ADDR
// end else
3674: GO 3718
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3676: LD_VAR 0 7
3680: PPUSH
3681: LD_VAR 0 8
3685: PUSH
3686: LD_INT 10
3688: DIV
3689: PPUSH
3690: LD_VAR 0 4
3694: PPUSH
3695: LD_VAR 0 5
3699: PPUSH
3700: LD_INT 4
3702: PPUSH
3703: LD_INT 0
3705: PPUSH
3706: CALL_OW 60
// r := 0 ;
3710: LD_ADDR_VAR 0 8
3714: PUSH
3715: LD_INT 0
3717: ST_TO_ADDR
// end ;
3718: GO 3612
// end ;
3720: GO 3593
3722: POP
3723: POP
// end ; for r in starting_crates do
3724: LD_ADDR_VAR 0 8
3728: PUSH
3729: LD_EXP 21
3733: PUSH
3734: FOR_IN
3735: IFFALSE 3767
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3737: LD_INT 1
3739: PPUSH
3740: LD_INT 5
3742: PPUSH
3743: LD_VAR 0 4
3747: PPUSH
3748: LD_VAR 0 5
3752: PPUSH
3753: LD_VAR 0 8
3757: PPUSH
3758: LD_INT 0
3760: PPUSH
3761: CALL_OW 60
3765: GO 3734
3767: POP
3768: POP
// if def_morale_flags then
3769: LD_EXP 9
3773: IFFALSE 3912
// begin x := start_def [ pos ] [ 1 ] ;
3775: LD_ADDR_VAR 0 4
3779: PUSH
3780: LD_EXP 39
3784: PUSH
3785: LD_VAR 0 3
3789: ARRAY
3790: PUSH
3791: LD_INT 1
3793: ARRAY
3794: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3795: LD_ADDR_VAR 0 5
3799: PUSH
3800: LD_EXP 39
3804: PUSH
3805: LD_VAR 0 3
3809: ARRAY
3810: PUSH
3811: LD_INT 2
3813: ARRAY
3814: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3815: LD_VAR 0 4
3819: PPUSH
3820: LD_VAR 0 5
3824: PPUSH
3825: LD_INT 12
3827: PPUSH
3828: LD_INT 2
3830: PPUSH
3831: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3835: LD_ADDR_EXP 44
3839: PUSH
3840: LD_EXP 44
3844: PUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_VAR 0 4
3854: PPUSH
3855: LD_VAR 0 5
3859: PPUSH
3860: LD_INT 1
3862: PUSH
3863: LD_INT 100
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: PUSH
3870: LD_INT 2
3872: PUSH
3873: LD_INT 50
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 3
3882: PUSH
3883: LD_INT 20
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PUSH
3890: LD_INT 20
3892: PUSH
3893: LD_INT 100
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: PPUSH
3906: CALL_OW 418
3910: ADD
3911: ST_TO_ADDR
// end ; commander := true ;
3912: LD_ADDR_LOC 1
3916: PUSH
3917: LD_INT 1
3919: ST_TO_ADDR
// soldiers_created := 0 ;
3920: LD_ADDR_LOC 4
3924: PUSH
3925: LD_INT 0
3927: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3928: LD_ADDR_VAR 0 7
3932: PUSH
3933: DOUBLE
3934: LD_INT 1
3936: DEC
3937: ST_TO_ADDR
3938: LD_EXP 18
3942: PUSH
3943: FOR_TO
3944: IFFALSE 4097
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3946: LD_ADDR_VAR 0 4
3950: PUSH
3951: LD_EXP 38
3955: PUSH
3956: LD_VAR 0 3
3960: ARRAY
3961: PUSH
3962: LD_VAR 0 7
3966: ARRAY
3967: PUSH
3968: LD_INT 1
3970: ARRAY
3971: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3972: LD_ADDR_VAR 0 5
3976: PUSH
3977: LD_EXP 38
3981: PUSH
3982: LD_VAR 0 3
3986: ARRAY
3987: PUSH
3988: LD_VAR 0 7
3992: ARRAY
3993: PUSH
3994: LD_INT 2
3996: ARRAY
3997: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3998: LD_ADDR_VAR 0 6
4002: PUSH
4003: LD_EXP 38
4007: PUSH
4008: LD_VAR 0 3
4012: ARRAY
4013: PUSH
4014: LD_VAR 0 7
4018: ARRAY
4019: PUSH
4020: LD_INT 3
4022: ARRAY
4023: ST_TO_ADDR
// bc_type := b_breastwork ;
4024: LD_ADDR_OWVAR 42
4028: PUSH
4029: LD_INT 31
4031: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4032: LD_ADDR_VAR 0 9
4036: PUSH
4037: LD_VAR 0 4
4041: PPUSH
4042: LD_VAR 0 5
4046: PPUSH
4047: LD_VAR 0 6
4051: PPUSH
4052: CALL_OW 47
4056: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4057: LD_INT 1
4059: PPUSH
4060: LD_INT 1
4062: PPUSH
4063: LD_INT 0
4065: PPUSH
4066: LD_INT 0
4068: PPUSH
4069: LD_INT 0
4071: PPUSH
4072: LD_VAR 0 9
4076: PPUSH
4077: CALL 2645 0 6
// soldiers_created := soldiers_created + 1 ;
4081: LD_ADDR_LOC 4
4085: PUSH
4086: LD_LOC 4
4090: PUSH
4091: LD_INT 1
4093: PLUS
4094: ST_TO_ADDR
// end ;
4095: GO 3943
4097: POP
4098: POP
// x := start_def [ pos ] [ 1 ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_EXP 39
4108: PUSH
4109: LD_VAR 0 3
4113: ARRAY
4114: PUSH
4115: LD_INT 1
4117: ARRAY
4118: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4119: LD_ADDR_VAR 0 5
4123: PUSH
4124: LD_EXP 39
4128: PUSH
4129: LD_VAR 0 3
4133: ARRAY
4134: PUSH
4135: LD_INT 2
4137: ARRAY
4138: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4139: LD_LOC 8
4143: PUSH
4144: LD_EXP 18
4148: MINUS
4149: PPUSH
4150: LD_INT 1
4152: PPUSH
4153: LD_VAR 0 4
4157: PPUSH
4158: LD_VAR 0 5
4162: PPUSH
4163: LD_INT 5
4165: PPUSH
4166: LD_INT 0
4168: PPUSH
4169: CALL 2645 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4173: LD_LOC 5
4177: PPUSH
4178: LD_INT 2
4180: PPUSH
4181: LD_VAR 0 4
4185: PPUSH
4186: LD_VAR 0 5
4190: PPUSH
4191: LD_INT 5
4193: PPUSH
4194: LD_INT 0
4196: PPUSH
4197: CALL 2645 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4201: LD_LOC 7
4205: PPUSH
4206: LD_INT 3
4208: PPUSH
4209: LD_VAR 0 4
4213: PPUSH
4214: LD_VAR 0 5
4218: PPUSH
4219: LD_INT 5
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL 2645 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4229: LD_LOC 6
4233: PPUSH
4234: LD_INT 4
4236: PPUSH
4237: LD_VAR 0 4
4241: PPUSH
4242: LD_VAR 0 5
4246: PPUSH
4247: LD_INT 5
4249: PPUSH
4250: LD_INT 0
4252: PPUSH
4253: CALL 2645 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4257: LD_EXP 10
4261: PUSH
4262: LD_INT 20
4264: PPUSH
4265: LD_VAR 0 1
4269: PPUSH
4270: CALL_OW 321
4274: PUSH
4275: LD_INT 1
4277: EQUAL
4278: AND
4279: IFFALSE 4296
// SetTech ( tech_SibDet , side , state_researched ) ;
4281: LD_INT 20
4283: PPUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: CALL_OW 322
// if def_siberite_bomb = 1 then
4296: LD_EXP 13
4300: PUSH
4301: LD_INT 1
4303: EQUAL
4304: IFFALSE 4338
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4306: LD_INT 25
4308: PPUSH
4309: LD_VAR 0 1
4313: PPUSH
4314: LD_INT 1
4316: PPUSH
4317: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4321: LD_INT 73
4323: PPUSH
4324: LD_VAR 0 1
4328: PPUSH
4329: LD_INT 1
4331: PPUSH
4332: CALL_OW 322
// end else
4336: GO 4368
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4338: LD_INT 25
4340: PPUSH
4341: LD_VAR 0 1
4345: PPUSH
4346: LD_INT 0
4348: PPUSH
4349: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4353: LD_INT 73
4355: PPUSH
4356: LD_VAR 0 1
4360: PPUSH
4361: LD_INT 0
4363: PPUSH
4364: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4368: LD_INT 24
4370: PPUSH
4371: LD_VAR 0 1
4375: PPUSH
4376: LD_INT 0
4378: PPUSH
4379: CALL_OW 322
// global_defined := true ;
4383: LD_ADDR_LOC 3
4387: PUSH
4388: LD_INT 1
4390: ST_TO_ADDR
// end ;
4391: LD_VAR 0 2
4395: RET
// function prepare_sides ; var i ; begin
4396: LD_INT 0
4398: PPUSH
4399: PPUSH
// global_units := [ ] ;
4400: LD_ADDR_LOC 2
4404: PUSH
4405: EMPTY
4406: ST_TO_ADDR
// global_defined := false ;
4407: LD_ADDR_LOC 3
4411: PUSH
4412: LD_INT 0
4414: ST_TO_ADDR
// CountClassMembers ;
4415: CALL 4474 0 0
// for i := 1 to 8 do
4419: LD_ADDR_VAR 0 2
4423: PUSH
4424: DOUBLE
4425: LD_INT 1
4427: DEC
4428: ST_TO_ADDR
4429: LD_INT 8
4431: PUSH
4432: FOR_TO
4433: IFFALSE 4458
// if Side_Positions [ i ] then
4435: LD_EXP 34
4439: PUSH
4440: LD_VAR 0 2
4444: ARRAY
4445: IFFALSE 4456
// prepare_side ( i ) ;
4447: LD_VAR 0 2
4451: PPUSH
4452: CALL 3311 0 1
4456: GO 4432
4458: POP
4459: POP
// prepare_mastodonts ( mastodont ) ;
4460: LD_EXP 45
4464: PPUSH
4465: CALL 3233 0 1
// end ;
4469: LD_VAR 0 1
4473: RET
// function CountClassMembers ; var Mode ; begin
4474: LD_INT 0
4476: PPUSH
4477: PPUSH
// if No_Mechs then
4478: LD_EXP 15
4482: IFFALSE 4494
// Mode := 2 else
4484: LD_ADDR_VAR 0 2
4488: PUSH
4489: LD_INT 2
4491: ST_TO_ADDR
4492: GO 4502
// Mode := 1 ;
4494: LD_ADDR_VAR 0 2
4498: PUSH
4499: LD_INT 1
4501: ST_TO_ADDR
// neng := number_of_people ;
4502: LD_ADDR_LOC 5
4506: PUSH
4507: LD_EXP 19
4511: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4512: LD_ADDR_LOC 8
4516: PUSH
4517: LD_LOC 5
4521: PUSH
4522: LD_INT 4
4524: PUSH
4525: LD_INT 3
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: LD_VAR 0 2
4536: ARRAY
4537: DIV
4538: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4539: LD_LOC 8
4543: PUSH
4544: LD_EXP 18
4548: LESS
4549: IFFALSE 4561
// nsol := number_of_breastworks ;
4551: LD_ADDR_LOC 8
4555: PUSH
4556: LD_EXP 18
4560: ST_TO_ADDR
// neng := neng - nsol ;
4561: LD_ADDR_LOC 5
4565: PUSH
4566: LD_LOC 5
4570: PUSH
4571: LD_LOC 8
4575: MINUS
4576: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4577: LD_ADDR_LOC 6
4581: PUSH
4582: LD_LOC 5
4586: PUSH
4587: LD_INT 3
4589: PUSH
4590: LD_INT 2
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_VAR 0 2
4601: ARRAY
4602: DIV
4603: ST_TO_ADDR
// if ( nsci < 1 ) then
4604: LD_LOC 6
4608: PUSH
4609: LD_INT 1
4611: LESS
4612: IFFALSE 4622
// nsci := 1 ;
4614: LD_ADDR_LOC 6
4618: PUSH
4619: LD_INT 1
4621: ST_TO_ADDR
// neng := neng - nsci ;
4622: LD_ADDR_LOC 5
4626: PUSH
4627: LD_LOC 5
4631: PUSH
4632: LD_LOC 6
4636: MINUS
4637: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4638: LD_ADDR_LOC 7
4642: PUSH
4643: LD_LOC 5
4647: PUSH
4648: LD_INT 2
4650: DIV
4651: PUSH
4652: LD_INT 0
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: PUSH
4659: LD_VAR 0 2
4663: ARRAY
4664: ST_TO_ADDR
// neng := neng - nmech ;
4665: LD_ADDR_LOC 5
4669: PUSH
4670: LD_LOC 5
4674: PUSH
4675: LD_LOC 7
4679: MINUS
4680: ST_TO_ADDR
// if ( neng < 1 ) then
4681: LD_LOC 5
4685: PUSH
4686: LD_INT 1
4688: LESS
4689: IFFALSE 4699
// neng := 1 ;
4691: LD_ADDR_LOC 5
4695: PUSH
4696: LD_INT 1
4698: ST_TO_ADDR
// end ;
4699: LD_VAR 0 1
4703: RET
// starting begin disable ( 98 ) ;
4704: LD_INT 98
4706: DISABLE_MARKED
// disable ( 99 ) ;
4707: LD_INT 99
4709: DISABLE_MARKED
// disable ( 400 ) ;
4710: LD_INT 400
4712: DISABLE_MARKED
// disable ( 401 ) ;
4713: LD_INT 401
4715: DISABLE_MARKED
// mp_selectmsg := true ;
4716: LD_ADDR_OWVAR 13
4720: PUSH
4721: LD_INT 1
4723: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4724: CALL 68 0 0
// init_map ;
4728: CALL 1230 0 0
// init_respawning ;
4732: CALL 14191 0 0
// set_shared_visions_and_alliances ;
4736: CALL 2357 0 0
// ResetFog ;
4740: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4744: LD_OWVAR 2
4748: PPUSH
4749: CALL_OW 520
// AnimateTrees ( true ) ;
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 573
// prepare_sides ;
4760: CALL 4396 0 0
// Init_Win_Condition ;
4764: CALL 8172 0 0
// ShowTimer ;
4768: CALL 7152 0 0
// music_nat := Side_Nations [ your_side ] ;
4772: LD_ADDR_OWVAR 71
4776: PUSH
4777: LD_EXP 35
4781: PUSH
4782: LD_OWVAR 2
4786: ARRAY
4787: ST_TO_ADDR
// if IAmSpec then
4788: CALL_OW 531
4792: IFFALSE 4816
// begin fogoff ( true ) ;
4794: LD_INT 1
4796: PPUSH
4797: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4801: LD_INT 130
4803: PPUSH
4804: LD_INT 100
4806: PPUSH
4807: CALL_OW 86
// enable ( 400 ) ;
4811: LD_INT 400
4813: ENABLE_MARKED
// end else
4814: GO 4862
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4816: LD_EXP 39
4820: PUSH
4821: LD_EXP 34
4825: PUSH
4826: LD_OWVAR 2
4830: ARRAY
4831: ARRAY
4832: PUSH
4833: LD_INT 1
4835: ARRAY
4836: PPUSH
4837: LD_EXP 39
4841: PUSH
4842: LD_EXP 34
4846: PUSH
4847: LD_OWVAR 2
4851: ARRAY
4852: ARRAY
4853: PUSH
4854: LD_INT 2
4856: ARRAY
4857: PPUSH
4858: CALL_OW 86
// end ; InitApeman ;
4862: CALL 5670 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
4866: LD_ADDR_EXP 56
4870: PUSH
4871: LD_INT 9
4873: PUSH
4874: LD_INT 10
4876: PUSH
4877: LD_INT 11
4879: PUSH
4880: LD_INT 12
4882: PUSH
4883: LD_INT 13
4885: PUSH
4886: LD_INT 14
4888: PUSH
4889: LD_INT 15
4891: PUSH
4892: LD_INT 16
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: ST_TO_ADDR
// BeginBuildUp ;
4905: CALL 7335 0 0
// end ;
4909: END
// every 0 0$1 do
4910: GO 4912
4912: DISABLE
// if ( def_siberite_bomb > 1 ) then
4913: LD_EXP 13
4917: PUSH
4918: LD_INT 1
4920: GREATER
4921: IFFALSE 4936
// begin wait ( siberite_bomb_Delay ) ;
4923: LD_EXP 29
4927: PPUSH
4928: CALL_OW 67
// EnableSibFiss ;
4932: CALL 4937 0 0
// end ;
4936: END
// function EnableSibFiss ; var i ; begin
4937: LD_INT 0
4939: PPUSH
4940: PPUSH
// for i := 1 to 8 do
4941: LD_ADDR_VAR 0 2
4945: PUSH
4946: DOUBLE
4947: LD_INT 1
4949: DEC
4950: ST_TO_ADDR
4951: LD_INT 8
4953: PUSH
4954: FOR_TO
4955: IFFALSE 5001
// if Side_Positions [ i ] then
4957: LD_EXP 34
4961: PUSH
4962: LD_VAR 0 2
4966: ARRAY
4967: IFFALSE 4999
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4969: LD_INT 25
4971: PPUSH
4972: LD_VAR 0 2
4976: PPUSH
4977: LD_INT 1
4979: PPUSH
4980: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4984: LD_INT 73
4986: PPUSH
4987: LD_VAR 0 2
4991: PPUSH
4992: LD_INT 1
4994: PPUSH
4995: CALL_OW 322
// end ;
4999: GO 4954
5001: POP
5002: POP
// end ; end_of_file
5003: LD_VAR 0 1
5007: RET
// every 1 1$0 + 0 0$0.3 do
5008: GO 5010
5010: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
5011: LD_INT 4
5013: PPUSH
5014: LD_INT 5
5016: PPUSH
5017: CALL_OW 12
5021: PPUSH
5022: LD_INT 18
5024: PPUSH
5025: LD_INT 1
5027: PPUSH
5028: CALL_OW 55
// enable ;
5032: ENABLE
// end ;
5033: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5034: GO 5036
5036: DISABLE
5037: LD_INT 0
5039: PPUSH
5040: PPUSH
// begin case tick of 1 .. 1 1$0 :
5041: LD_OWVAR 1
5045: PUSH
5046: LD_INT 1
5048: DOUBLE
5049: GREATEREQUAL
5050: IFFALSE 5058
5052: LD_INT 2100
5054: DOUBLE
5055: LESSEQUAL
5056: IFTRUE 5060
5058: GO 5088
5060: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5061: LD_EXP 23
5065: PUSH
5066: LD_INT 100
5068: DIVREAL
5069: PUSH
5070: LD_INT 350
5072: PPUSH
5073: LD_INT 1050
5075: PPUSH
5076: CALL_OW 12
5080: MUL
5081: PPUSH
5082: CALL_OW 67
5086: GO 5390
5088: LD_INT 2100
5090: PUSH
5091: LD_INT 1
5093: PLUS
5094: DOUBLE
5095: GREATEREQUAL
5096: IFFALSE 5104
5098: LD_INT 10500
5100: DOUBLE
5101: LESSEQUAL
5102: IFTRUE 5106
5104: GO 5134
5106: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5107: LD_EXP 23
5111: PUSH
5112: LD_INT 100
5114: DIVREAL
5115: PUSH
5116: LD_INT 1050
5118: PPUSH
5119: LD_INT 1575
5121: PPUSH
5122: CALL_OW 12
5126: MUL
5127: PPUSH
5128: CALL_OW 67
5132: GO 5390
5134: LD_INT 10500
5136: PUSH
5137: LD_INT 1
5139: PLUS
5140: DOUBLE
5141: GREATEREQUAL
5142: IFFALSE 5150
5144: LD_INT 21000
5146: DOUBLE
5147: LESSEQUAL
5148: IFTRUE 5152
5150: GO 5180
5152: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5153: LD_EXP 23
5157: PUSH
5158: LD_INT 100
5160: DIVREAL
5161: PUSH
5162: LD_INT 1575
5164: PPUSH
5165: LD_INT 2100
5167: PPUSH
5168: CALL_OW 12
5172: MUL
5173: PPUSH
5174: CALL_OW 67
5178: GO 5390
5180: LD_INT 21000
5182: PUSH
5183: LD_INT 1
5185: PLUS
5186: DOUBLE
5187: GREATEREQUAL
5188: IFFALSE 5196
5190: LD_INT 42000
5192: DOUBLE
5193: LESSEQUAL
5194: IFTRUE 5198
5196: GO 5226
5198: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5199: LD_EXP 23
5203: PUSH
5204: LD_INT 100
5206: DIVREAL
5207: PUSH
5208: LD_INT 2100
5210: PPUSH
5211: LD_INT 2625
5213: PPUSH
5214: CALL_OW 12
5218: MUL
5219: PPUSH
5220: CALL_OW 67
5224: GO 5390
5226: LD_INT 42000
5228: PUSH
5229: LD_INT 1
5231: PLUS
5232: DOUBLE
5233: GREATEREQUAL
5234: IFFALSE 5242
5236: LD_INT 63000
5238: DOUBLE
5239: LESSEQUAL
5240: IFTRUE 5244
5242: GO 5272
5244: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5245: LD_EXP 23
5249: PUSH
5250: LD_INT 100
5252: DIVREAL
5253: PUSH
5254: LD_INT 2625
5256: PPUSH
5257: LD_INT 3150
5259: PPUSH
5260: CALL_OW 12
5264: MUL
5265: PPUSH
5266: CALL_OW 67
5270: GO 5390
5272: LD_INT 63000
5274: PUSH
5275: LD_INT 1
5277: PLUS
5278: DOUBLE
5279: GREATEREQUAL
5280: IFFALSE 5288
5282: LD_INT 105000
5284: DOUBLE
5285: LESSEQUAL
5286: IFTRUE 5290
5288: GO 5318
5290: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5291: LD_EXP 23
5295: PUSH
5296: LD_INT 100
5298: DIVREAL
5299: PUSH
5300: LD_INT 3150
5302: PPUSH
5303: LD_INT 3675
5305: PPUSH
5306: CALL_OW 12
5310: MUL
5311: PPUSH
5312: CALL_OW 67
5316: GO 5390
5318: LD_INT 105000
5320: PUSH
5321: LD_INT 1
5323: PLUS
5324: DOUBLE
5325: GREATEREQUAL
5326: IFFALSE 5334
5328: LD_INT 630000
5330: DOUBLE
5331: LESSEQUAL
5332: IFTRUE 5336
5334: GO 5364
5336: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5337: LD_EXP 23
5341: PUSH
5342: LD_INT 100
5344: DIVREAL
5345: PUSH
5346: LD_INT 3675
5348: PPUSH
5349: LD_INT 4200
5351: PPUSH
5352: CALL_OW 12
5356: MUL
5357: PPUSH
5358: CALL_OW 67
5362: GO 5390
5364: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5365: LD_EXP 23
5369: PUSH
5370: LD_INT 100
5372: DIVREAL
5373: PUSH
5374: LD_INT 4200
5376: PPUSH
5377: LD_INT 5250
5379: PPUSH
5380: CALL_OW 12
5384: MUL
5385: PPUSH
5386: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5390: LD_ADDR_VAR 0 2
5394: PUSH
5395: LD_INT 3
5397: PPUSH
5398: LD_INT 5
5400: PPUSH
5401: CALL_OW 12
5405: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5406: LD_ADDR_VAR 0 1
5410: PUSH
5411: LD_EXP 34
5415: PUSH
5416: LD_INT 0
5418: PUSH
5419: EMPTY
5420: LIST
5421: DIFF
5422: PUSH
5423: FOR_IN
5424: IFFALSE 5473
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5426: LD_VAR 0 2
5430: PPUSH
5431: LD_EXP 39
5435: PUSH
5436: LD_VAR 0 1
5440: ARRAY
5441: PUSH
5442: LD_INT 1
5444: ARRAY
5445: PPUSH
5446: LD_EXP 39
5450: PUSH
5451: LD_VAR 0 1
5455: ARRAY
5456: PUSH
5457: LD_INT 2
5459: ARRAY
5460: PPUSH
5461: LD_INT 20
5463: PPUSH
5464: LD_INT 1
5466: PPUSH
5467: CALL_OW 56
5471: GO 5423
5473: POP
5474: POP
// enable ;
5475: ENABLE
// end ; end_of_file
5476: PPOPN 2
5478: END
// every 20 20$00 trigger apemanNumber do
5479: LD_EXP 47
5483: IFFALSE 5516
5485: GO 5487
5487: DISABLE
// begin enable ;
5488: ENABLE
// if apeLevel >= 8 then
5489: LD_EXP 52
5493: PUSH
5494: LD_INT 8
5496: GREATEREQUAL
5497: IFFALSE 5502
// disable else
5499: DISABLE
5500: GO 5516
// apeLevel := apeLevel + 1 ;
5502: LD_ADDR_EXP 52
5506: PUSH
5507: LD_EXP 52
5511: PUSH
5512: LD_INT 1
5514: PLUS
5515: ST_TO_ADDR
// end ;
5516: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5517: LD_EXP 47
5521: PUSH
5522: LD_EXP 48
5526: LESS
5527: IFFALSE 5667
5529: GO 5531
5531: DISABLE
5532: LD_INT 0
5534: PPUSH
5535: PPUSH
5536: PPUSH
5537: PPUSH
// begin enable ;
5538: ENABLE
// for i := 1 to apemanPos do
5539: LD_ADDR_VAR 0 1
5543: PUSH
5544: DOUBLE
5545: LD_INT 1
5547: DEC
5548: ST_TO_ADDR
5549: LD_EXP 50
5553: PUSH
5554: FOR_TO
5555: IFFALSE 5665
// begin if apemanPlayerCount [ i ] then
5557: LD_EXP 51
5561: PUSH
5562: LD_VAR 0 1
5566: ARRAY
5567: IFFALSE 5663
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5569: LD_EXP 51
5573: PUSH
5574: LD_VAR 0 1
5578: ARRAY
5579: PUSH
5580: LD_EXP 50
5584: PUSH
5585: LD_VAR 0 1
5589: ARRAY
5590: GREATER
5591: IFFALSE 5663
// begin ape := PrepareApeman ;
5593: LD_ADDR_VAR 0 2
5597: PUSH
5598: CALL 6186 0 0
5602: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5603: LD_VAR 0 2
5607: PPUSH
5608: LD_EXP 53
5612: PUSH
5613: LD_VAR 0 1
5617: ARRAY
5618: PPUSH
5619: LD_INT 0
5621: PPUSH
5622: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5626: LD_ADDR_EXP 50
5630: PUSH
5631: LD_EXP 50
5635: PPUSH
5636: LD_VAR 0 1
5640: PPUSH
5641: LD_EXP 50
5645: PUSH
5646: LD_VAR 0 1
5650: ARRAY
5651: PUSH
5652: LD_VAR 0 2
5656: UNION
5657: PPUSH
5658: CALL_OW 1
5662: ST_TO_ADDR
// end ; end ; end ;
5663: GO 5554
5665: POP
5666: POP
// end ;
5667: PPOPN 4
5669: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5670: LD_INT 0
5672: PPUSH
5673: PPUSH
5674: PPUSH
5675: PPUSH
5676: PPUSH
5677: PPUSH
5678: PPUSH
// playersAmount := 0 ;
5679: LD_ADDR_VAR 0 3
5683: PUSH
5684: LD_INT 0
5686: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
5687: LD_ADDR_VAR 0 7
5691: PUSH
5692: LD_INT 1
5694: PUSH
5695: LD_INT 2
5697: PUSH
5698: LD_INT 3
5700: PUSH
5701: LD_INT 4
5703: PUSH
5704: LD_INT 5
5706: PUSH
5707: LD_INT 6
5709: PUSH
5710: LD_INT 7
5712: PUSH
5713: LD_INT 8
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5726: LD_ADDR_EXP 53
5730: PUSH
5731: LD_INT 0
5733: PUSH
5734: LD_INT 0
5736: PUSH
5737: LD_INT 0
5739: PUSH
5740: LD_INT 0
5742: PUSH
5743: LD_INT 0
5745: PUSH
5746: LD_INT 0
5748: PUSH
5749: LD_INT 0
5751: PUSH
5752: LD_INT 0
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: LIST
5764: ST_TO_ADDR
// for j = 1 to Side_Positions do
5765: LD_ADDR_VAR 0 4
5769: PUSH
5770: DOUBLE
5771: LD_INT 1
5773: DEC
5774: ST_TO_ADDR
5775: LD_EXP 34
5779: PUSH
5780: FOR_TO
5781: IFFALSE 5848
// if Side_Positions [ j ] then
5783: LD_EXP 34
5787: PUSH
5788: LD_VAR 0 4
5792: ARRAY
5793: IFFALSE 5846
// begin playersAmount := playersAmount + 1 ;
5795: LD_ADDR_VAR 0 3
5799: PUSH
5800: LD_VAR 0 3
5804: PUSH
5805: LD_INT 1
5807: PLUS
5808: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5809: LD_ADDR_EXP 53
5813: PUSH
5814: LD_EXP 53
5818: PPUSH
5819: LD_VAR 0 4
5823: PPUSH
5824: LD_VAR 0 7
5828: PUSH
5829: LD_EXP 34
5833: PUSH
5834: LD_VAR 0 4
5838: ARRAY
5839: ARRAY
5840: PPUSH
5841: CALL_OW 1
5845: ST_TO_ADDR
// end ;
5846: GO 5780
5848: POP
5849: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5850: LD_ADDR_EXP 49
5854: PUSH
5855: LD_INT 3
5857: PUSH
5858: LD_EXP 25
5862: MUL
5863: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5864: LD_ADDR_EXP 47
5868: PUSH
5869: LD_VAR 0 3
5873: PUSH
5874: LD_EXP 49
5878: MUL
5879: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5880: LD_ADDR_EXP 48
5884: PUSH
5885: LD_EXP 47
5889: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5890: LD_ADDR_EXP 50
5894: PUSH
5895: LD_INT 0
5897: PUSH
5898: LD_INT 0
5900: PUSH
5901: LD_INT 0
5903: PUSH
5904: LD_INT 0
5906: PUSH
5907: LD_INT 0
5909: PUSH
5910: LD_INT 0
5912: PUSH
5913: LD_INT 0
5915: PUSH
5916: LD_INT 0
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5929: LD_ADDR_EXP 51
5933: PUSH
5934: LD_INT 0
5936: PUSH
5937: LD_INT 0
5939: PUSH
5940: LD_INT 0
5942: PUSH
5943: LD_INT 0
5945: PUSH
5946: LD_INT 0
5948: PUSH
5949: LD_INT 0
5951: PUSH
5952: LD_INT 0
5954: PUSH
5955: LD_INT 0
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: ST_TO_ADDR
// apeLevel := 1 ;
5968: LD_ADDR_EXP 52
5972: PUSH
5973: LD_INT 1
5975: ST_TO_ADDR
// if not apemanNumber then
5976: LD_EXP 47
5980: NOT
5981: IFFALSE 5985
// exit ;
5983: GO 6181
// for i := 1 to apemanPerPlayer do
5985: LD_ADDR_VAR 0 2
5989: PUSH
5990: DOUBLE
5991: LD_INT 1
5993: DEC
5994: ST_TO_ADDR
5995: LD_EXP 49
5999: PUSH
6000: FOR_TO
6001: IFFALSE 6179
// begin for j := 1 to Side_Positions do
6003: LD_ADDR_VAR 0 4
6007: PUSH
6008: DOUBLE
6009: LD_INT 1
6011: DEC
6012: ST_TO_ADDR
6013: LD_EXP 34
6017: PUSH
6018: FOR_TO
6019: IFFALSE 6175
// if Side_Positions [ j ] then
6021: LD_EXP 34
6025: PUSH
6026: LD_VAR 0 4
6030: ARRAY
6031: IFFALSE 6173
// begin pos := Side_Positions [ j ] ;
6033: LD_ADDR_VAR 0 6
6037: PUSH
6038: LD_EXP 34
6042: PUSH
6043: LD_VAR 0 4
6047: ARRAY
6048: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6049: LD_ADDR_EXP 51
6053: PUSH
6054: LD_EXP 51
6058: PPUSH
6059: LD_VAR 0 4
6063: PPUSH
6064: LD_EXP 51
6068: PUSH
6069: LD_VAR 0 4
6073: ARRAY
6074: PUSH
6075: LD_INT 1
6077: PLUS
6078: PPUSH
6079: CALL_OW 1
6083: ST_TO_ADDR
// ape := PrepareApeman ;
6084: LD_ADDR_VAR 0 5
6088: PUSH
6089: CALL 6186 0 0
6093: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6094: LD_ADDR_EXP 50
6098: PUSH
6099: LD_EXP 50
6103: PPUSH
6104: LD_VAR 0 4
6108: PPUSH
6109: LD_EXP 50
6113: PUSH
6114: LD_VAR 0 4
6118: ARRAY
6119: PPUSH
6120: LD_EXP 50
6124: PUSH
6125: LD_VAR 0 4
6129: ARRAY
6130: PUSH
6131: LD_INT 1
6133: PLUS
6134: PPUSH
6135: LD_VAR 0 5
6139: PPUSH
6140: CALL_OW 1
6144: PPUSH
6145: CALL_OW 1
6149: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6150: LD_VAR 0 5
6154: PPUSH
6155: LD_EXP 53
6159: PUSH
6160: LD_VAR 0 4
6164: ARRAY
6165: PPUSH
6166: LD_INT 0
6168: PPUSH
6169: CALL_OW 49
// end ;
6173: GO 6018
6175: POP
6176: POP
// end ;
6177: GO 6000
6179: POP
6180: POP
// end ;
6181: LD_VAR 0 1
6185: RET
// export function PrepareApeman ; var bonus ; begin
6186: LD_INT 0
6188: PPUSH
6189: PPUSH
// uc_side := 0 ;
6190: LD_ADDR_OWVAR 20
6194: PUSH
6195: LD_INT 0
6197: ST_TO_ADDR
// uc_nation := 0 ;
6198: LD_ADDR_OWVAR 21
6202: PUSH
6203: LD_INT 0
6205: ST_TO_ADDR
// InitHc ;
6206: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6210: LD_ADDR_VAR 0 2
6214: PUSH
6215: LD_INT 1
6217: NEG
6218: PUSH
6219: LD_INT 0
6221: PUSH
6222: LD_INT 1
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: LD_OWVAR 1
6234: PUSH
6235: LD_INT 3
6237: MOD
6238: PUSH
6239: LD_INT 1
6241: PLUS
6242: ARRAY
6243: ST_TO_ADDR
// hc_class := class_apeman ;
6244: LD_ADDR_OWVAR 28
6248: PUSH
6249: LD_INT 12
6251: ST_TO_ADDR
// hc_gallery :=  ;
6252: LD_ADDR_OWVAR 33
6256: PUSH
6257: LD_STRING 
6259: ST_TO_ADDR
// hc_name :=  ;
6260: LD_ADDR_OWVAR 26
6264: PUSH
6265: LD_STRING 
6267: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6268: LD_ADDR_OWVAR 31
6272: PUSH
6273: LD_EXP 52
6277: PUSH
6278: LD_VAR 0 2
6282: PLUS
6283: PUSH
6284: LD_EXP 52
6288: PUSH
6289: LD_VAR 0 2
6293: PLUS
6294: PUSH
6295: LD_EXP 52
6299: PUSH
6300: LD_VAR 0 2
6304: PLUS
6305: PUSH
6306: LD_EXP 52
6310: PUSH
6311: LD_VAR 0 2
6315: PLUS
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6323: LD_ADDR_OWVAR 35
6327: PUSH
6328: LD_INT 10
6330: PUSH
6331: LD_VAR 0 2
6335: MUL
6336: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6337: LD_ADDR_OWVAR 29
6341: PUSH
6342: LD_INT 12
6344: PUSH
6345: LD_INT 10
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: ST_TO_ADDR
// result := CreateHuman ;
6352: LD_ADDR_VAR 0 1
6356: PUSH
6357: CALL_OW 44
6361: ST_TO_ADDR
// end ;
6362: LD_VAR 0 1
6366: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6367: LD_INT 0
6369: PPUSH
6370: PPUSH
6371: PPUSH
// if not ape then
6372: LD_VAR 0 1
6376: NOT
6377: IFFALSE 6381
// exit ;
6379: GO 6506
// side := GetSide ( ape ) ;
6381: LD_ADDR_VAR 0 3
6385: PUSH
6386: LD_VAR 0 1
6390: PPUSH
6391: CALL_OW 255
6395: ST_TO_ADDR
// if not side then
6396: LD_VAR 0 3
6400: NOT
6401: IFFALSE 6455
// begin for i = 1 to apemanPos do
6403: LD_ADDR_VAR 0 4
6407: PUSH
6408: DOUBLE
6409: LD_INT 1
6411: DEC
6412: ST_TO_ADDR
6413: LD_EXP 50
6417: PUSH
6418: FOR_TO
6419: IFFALSE 6453
// if ape in apemanPos [ i ] then
6421: LD_VAR 0 1
6425: PUSH
6426: LD_EXP 50
6430: PUSH
6431: LD_VAR 0 4
6435: ARRAY
6436: IN
6437: IFFALSE 6451
// begin side := i ;
6439: LD_ADDR_VAR 0 3
6443: PUSH
6444: LD_VAR 0 4
6448: ST_TO_ADDR
// break ;
6449: GO 6453
// end ;
6451: GO 6418
6453: POP
6454: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6455: LD_ADDR_EXP 50
6459: PUSH
6460: LD_EXP 50
6464: PPUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_EXP 50
6474: PUSH
6475: LD_VAR 0 3
6479: ARRAY
6480: PUSH
6481: LD_VAR 0 1
6485: DIFF
6486: PPUSH
6487: CALL_OW 1
6491: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6492: LD_ADDR_EXP 47
6496: PUSH
6497: LD_EXP 47
6501: PUSH
6502: LD_INT 1
6504: MINUS
6505: ST_TO_ADDR
// end ; end_of_file
6506: LD_VAR 0 2
6510: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 266
6520: PUSH
6521: LD_INT 0
6523: PUSH
6524: LD_INT 1
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: IN
6531: IFFALSE 6556
// SetBName ( b , @ & GetSide ( b ) ) ;
6533: LD_VAR 0 1
6537: PPUSH
6538: LD_STRING @
6540: PUSH
6541: LD_VAR 0 1
6545: PPUSH
6546: CALL_OW 255
6550: STR
6551: PPUSH
6552: CALL_OW 500
// end ;
6556: PPOPN 2
6558: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6559: LD_VAR 0 1
6563: PPUSH
6564: CALL_OW 266
6568: PUSH
6569: LD_INT 0
6571: PUSH
6572: LD_INT 1
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: IN
6579: IFFALSE 6604
// SetBName ( b , @ & GetSide ( b ) ) ;
6581: LD_VAR 0 1
6585: PPUSH
6586: LD_STRING @
6588: PUSH
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL_OW 255
6598: STR
6599: PPUSH
6600: CALL_OW 500
// end ;
6604: PPOPN 3
6606: END
// on VehicleConstructed ( veh , fac ) do var side ;
6607: LD_INT 0
6609: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6610: LD_VAR 0 1
6614: PPUSH
6615: CALL_OW 263
6619: PUSH
6620: LD_INT 5
6622: EQUAL
6623: IFFALSE 6765
// begin side := GetSide ( veh ) ;
6625: LD_ADDR_VAR 0 3
6629: PUSH
6630: LD_VAR 0 1
6634: PPUSH
6635: CALL_OW 255
6639: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6640: LD_ADDR_EXP 50
6644: PUSH
6645: LD_EXP 50
6649: PPUSH
6650: LD_VAR 0 3
6654: PPUSH
6655: LD_EXP 50
6659: PUSH
6660: LD_VAR 0 3
6664: ARRAY
6665: PPUSH
6666: LD_INT 52
6668: PUSH
6669: EMPTY
6670: LIST
6671: PPUSH
6672: CALL_OW 72
6676: PUSH
6677: LD_INT 22
6679: PUSH
6680: LD_VAR 0 3
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: PUSH
6689: LD_INT 2
6691: PUSH
6692: LD_INT 33
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 25
6704: PUSH
6705: LD_INT 12
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 25
6714: PUSH
6715: LD_INT 15
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: LD_INT 25
6724: PUSH
6725: LD_INT 16
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: LD_INT 25
6734: PUSH
6735: LD_INT 17
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: PPUSH
6754: CALL_OW 69
6758: UNION
6759: PPUSH
6760: CALL_OW 1
6764: ST_TO_ADDR
// end ; end ;
6765: PPOPN 3
6767: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6768: LD_INT 0
6770: PPUSH
6771: PPUSH
6772: PPUSH
6773: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6774: LD_VAR 0 1
6778: PPUSH
6779: CALL_OW 257
6783: PUSH
6784: LD_INT 12
6786: PUSH
6787: LD_INT 15
6789: PUSH
6790: LD_INT 17
6792: PUSH
6793: LD_INT 16
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: IN
6802: PUSH
6803: LD_VAR 0 1
6807: PPUSH
6808: CALL_OW 263
6812: PUSH
6813: LD_INT 5
6815: EQUAL
6816: OR
6817: IFFALSE 6828
// ApeKilled ( j ) ;
6819: LD_VAR 0 1
6823: PPUSH
6824: CALL 6367 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6828: LD_VAR 0 1
6832: PPUSH
6833: CALL_OW 266
6837: PUSH
6838: LD_INT 0
6840: PUSH
6841: LD_INT 1
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: IN
6848: IFFALSE 6930
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6850: LD_ADDR_VAR 0 4
6854: PUSH
6855: LD_EXP 34
6859: PUSH
6860: LD_VAR 0 1
6864: PPUSH
6865: CALL_OW 255
6869: ARRAY
6870: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6871: LD_ADDR_VAR 0 2
6875: PUSH
6876: LD_EXP 39
6880: PUSH
6881: LD_VAR 0 4
6885: ARRAY
6886: PUSH
6887: LD_INT 1
6889: ARRAY
6890: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6891: LD_ADDR_VAR 0 3
6895: PUSH
6896: LD_EXP 39
6900: PUSH
6901: LD_VAR 0 4
6905: ARRAY
6906: PUSH
6907: LD_INT 2
6909: ARRAY
6910: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6911: LD_VAR 0 2
6915: PPUSH
6916: LD_VAR 0 3
6920: PPUSH
6921: CALL_OW 420
6925: PPUSH
6926: CALL_OW 419
// end ; end ;
6930: PPOPN 5
6932: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6933: LD_VAR 0 1
6937: PPUSH
6938: LD_VAR 0 2
6942: PPUSH
6943: LD_VAR 0 3
6947: PPUSH
6948: LD_OWVAR 2
6952: PPUSH
6953: CALL 7933 0 4
6957: PPOPN 3
6959: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6960: LD_INT 0
6962: PPUSH
6963: PPUSH
// for un in battle_flags_id do
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: LD_EXP 44
6973: PUSH
6974: FOR_IN
6975: IFFALSE 7050
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6977: LD_VAR 0 2
6981: PPUSH
6982: LD_INT 1
6984: PUSH
6985: LD_LOC 9
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 2
6996: PUSH
6997: LD_LOC 9
7001: PUSH
7002: LD_INT 2
7004: DIV
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 3
7012: PUSH
7013: LD_LOC 9
7017: PUSH
7018: LD_INT 5
7020: DIV
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 20
7028: PUSH
7029: LD_LOC 9
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: PPUSH
7044: CALL_OW 423
7048: GO 6974
7050: POP
7051: POP
// end ;
7052: LD_VAR 0 1
7056: RET
// every 1 do var un ;
7057: GO 7059
7059: DISABLE
7060: LD_INT 0
7062: PPUSH
// begin if not def_morale_flags then
7063: LD_EXP 9
7067: NOT
7068: IFFALSE 7072
// exit ;
7070: GO 7149
// if not morale_decreasing_time then
7072: LD_EXP 24
7076: NOT
7077: IFFALSE 7081
// exit ;
7079: GO 7149
// strength = 100 ;
7081: LD_ADDR_LOC 9
7085: PUSH
7086: LD_INT 100
7088: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7089: LD_EXP 24
7093: PPUSH
7094: CALL_OW 67
// strength := strength - 1 ;
7098: LD_ADDR_LOC 9
7102: PUSH
7103: LD_LOC 9
7107: PUSH
7108: LD_INT 1
7110: MINUS
7111: ST_TO_ADDR
// Update_Flags ;
7112: CALL 6960 0 0
// until not strength ;
7116: LD_LOC 9
7120: NOT
7121: IFFALSE 7089
// for un in battle_flags_id do
7123: LD_ADDR_VAR 0 1
7127: PUSH
7128: LD_EXP 44
7132: PUSH
7133: FOR_IN
7134: IFFALSE 7147
// KillBattleFlag ( un ) ;
7136: LD_VAR 0 1
7140: PPUSH
7141: CALL_OW 419
7145: GO 7133
7147: POP
7148: POP
// end ; end_of_file
7149: PPOPN 1
7151: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7152: LD_INT 0
7154: PPUSH
7155: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7156: LD_ADDR_VAR 0 2
7160: PUSH
7161: LD_STRING #Multi1x1-Time
7163: PUSH
7164: LD_OWVAR 1
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: ST_TO_ADDR
// if WaitServerStrings then
7173: LD_EXP 55
7177: IFFALSE 7195
// AllStrings = AllStrings ^ WaitServerStrings ;
7179: LD_ADDR_VAR 0 2
7183: PUSH
7184: LD_VAR 0 2
7188: PUSH
7189: LD_EXP 55
7193: ADD
7194: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7195: LD_INT 0
7197: PUSH
7198: LD_EXP 29
7202: PUSH
7203: LD_OWVAR 1
7207: MINUS
7208: LESSEQUAL
7209: IFFALSE 7240
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7211: LD_ADDR_VAR 0 2
7215: PUSH
7216: LD_VAR 0 2
7220: PUSH
7221: LD_STRING #allowedsibbomb
7223: PUSH
7224: LD_EXP 29
7228: PUSH
7229: LD_OWVAR 1
7233: MINUS
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: ADD
7239: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7240: LD_INT 0
7242: PUSH
7243: LD_EXP 58
7247: PUSH
7248: LD_OWVAR 1
7252: MINUS
7253: LESSEQUAL
7254: IFFALSE 7285
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7256: LD_ADDR_VAR 0 2
7260: PUSH
7261: LD_VAR 0 2
7265: PUSH
7266: LD_STRING #builduptime
7268: PUSH
7269: LD_EXP 58
7273: PUSH
7274: LD_OWVAR 1
7278: MINUS
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: ADD
7284: ST_TO_ADDR
// if ( ExtraStrings ) then
7285: LD_EXP 54
7289: IFFALSE 7311
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7291: LD_ADDR_VAR 0 2
7295: PUSH
7296: LD_VAR 0 2
7300: PUSH
7301: LD_STRING 
7303: ADD
7304: PUSH
7305: LD_EXP 54
7309: ADD
7310: ST_TO_ADDR
// Display_Strings := AllStrings ;
7311: LD_ADDR_OWVAR 47
7315: PUSH
7316: LD_VAR 0 2
7320: ST_TO_ADDR
// end ;
7321: LD_VAR 0 1
7325: RET
// every 0 0$1 do
7326: GO 7328
7328: DISABLE
// begin ShowTimer ;
7329: CALL 7152 0 0
// enable ;
7333: ENABLE
// end ; end_of_file
7334: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
// BuildUpTime_Delay = 0 ;
7340: LD_ADDR_EXP 58
7344: PUSH
7345: LD_INT 0
7347: ST_TO_ADDR
// if not def_builduptime then
7348: LD_EXP 14
7352: NOT
7353: IFFALSE 7357
// exit ;
7355: GO 7540
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
7357: LD_ADDR_EXP 58
7361: PUSH
7362: LD_INT 8400
7364: PUSH
7365: LD_INT 2100
7367: PUSH
7368: LD_EXP 14
7372: MUL
7373: PLUS
7374: ST_TO_ADDR
// BuildUpTimeActive := true ;
7375: LD_ADDR_EXP 57
7379: PUSH
7380: LD_INT 1
7382: ST_TO_ADDR
// for i := 1 to 8 do
7383: LD_ADDR_VAR 0 2
7387: PUSH
7388: DOUBLE
7389: LD_INT 1
7391: DEC
7392: ST_TO_ADDR
7393: LD_INT 8
7395: PUSH
7396: FOR_TO
7397: IFFALSE 7538
// if Side_Positions [ i ] then
7399: LD_EXP 34
7403: PUSH
7404: LD_VAR 0 2
7408: ARRAY
7409: IFFALSE 7536
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
7411: LD_EXP 56
7415: PUSH
7416: LD_EXP 34
7420: PUSH
7421: LD_VAR 0 2
7425: ARRAY
7426: ARRAY
7427: PPUSH
7428: LD_INT 5
7430: PPUSH
7431: CALL_OW 424
// for j := 1 to 8 do
7435: LD_ADDR_VAR 0 3
7439: PUSH
7440: DOUBLE
7441: LD_INT 1
7443: DEC
7444: ST_TO_ADDR
7445: LD_INT 8
7447: PUSH
7448: FOR_TO
7449: IFFALSE 7534
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
7451: LD_EXP 34
7455: PUSH
7456: LD_VAR 0 3
7460: ARRAY
7461: PUSH
7462: LD_EXP 31
7466: PUSH
7467: LD_VAR 0 2
7471: ARRAY
7472: PUSH
7473: LD_EXP 31
7477: PUSH
7478: LD_VAR 0 3
7482: ARRAY
7483: NONEQUAL
7484: PUSH
7485: LD_EXP 36
7489: NOT
7490: PUSH
7491: LD_VAR 0 2
7495: PUSH
7496: LD_VAR 0 3
7500: NONEQUAL
7501: AND
7502: OR
7503: AND
7504: IFFALSE 7532
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7506: LD_VAR 0 3
7510: PPUSH
7511: LD_EXP 56
7515: PUSH
7516: LD_EXP 34
7520: PUSH
7521: LD_VAR 0 2
7525: ARRAY
7526: ARRAY
7527: PPUSH
7528: CALL_OW 333
7532: GO 7448
7534: POP
7535: POP
// end ;
7536: GO 7396
7538: POP
7539: POP
// end ;
7540: LD_VAR 0 1
7544: RET
// export function EndBuildUp ; var i , j ; begin
7545: LD_INT 0
7547: PPUSH
7548: PPUSH
7549: PPUSH
// BuildUpTimeActive := false ;
7550: LD_ADDR_EXP 57
7554: PUSH
7555: LD_INT 0
7557: ST_TO_ADDR
// for i := 1 to 8 do
7558: LD_ADDR_VAR 0 2
7562: PUSH
7563: DOUBLE
7564: LD_INT 1
7566: DEC
7567: ST_TO_ADDR
7568: LD_INT 8
7570: PUSH
7571: FOR_TO
7572: IFFALSE 7713
// if Side_Positions [ i ] then
7574: LD_EXP 34
7578: PUSH
7579: LD_VAR 0 2
7583: ARRAY
7584: IFFALSE 7711
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
7586: LD_EXP 56
7590: PUSH
7591: LD_EXP 34
7595: PUSH
7596: LD_VAR 0 2
7600: ARRAY
7601: ARRAY
7602: PPUSH
7603: LD_INT 0
7605: PPUSH
7606: CALL_OW 424
// for j := 1 to 8 do
7610: LD_ADDR_VAR 0 3
7614: PUSH
7615: DOUBLE
7616: LD_INT 1
7618: DEC
7619: ST_TO_ADDR
7620: LD_INT 8
7622: PUSH
7623: FOR_TO
7624: IFFALSE 7709
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
7626: LD_EXP 34
7630: PUSH
7631: LD_VAR 0 3
7635: ARRAY
7636: PUSH
7637: LD_EXP 31
7641: PUSH
7642: LD_VAR 0 2
7646: ARRAY
7647: PUSH
7648: LD_EXP 31
7652: PUSH
7653: LD_VAR 0 3
7657: ARRAY
7658: NONEQUAL
7659: PUSH
7660: LD_EXP 36
7664: NOT
7665: PUSH
7666: LD_VAR 0 2
7670: PUSH
7671: LD_VAR 0 3
7675: NONEQUAL
7676: AND
7677: OR
7678: AND
7679: IFFALSE 7707
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7681: LD_VAR 0 3
7685: PPUSH
7686: LD_EXP 56
7690: PUSH
7691: LD_EXP 34
7695: PUSH
7696: LD_VAR 0 2
7700: ARRAY
7701: ARRAY
7702: PPUSH
7703: CALL_OW 334
7707: GO 7623
7709: POP
7710: POP
// end ;
7711: GO 7571
7713: POP
7714: POP
// end ;
7715: LD_VAR 0 1
7719: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
7720: LD_EXP 57
7724: IFFALSE 7899
7726: GO 7728
7728: DISABLE
7729: LD_INT 0
7731: PPUSH
7732: PPUSH
// begin for i := 1 to 8 do
7733: LD_ADDR_VAR 0 1
7737: PUSH
7738: DOUBLE
7739: LD_INT 1
7741: DEC
7742: ST_TO_ADDR
7743: LD_INT 8
7745: PUSH
7746: FOR_TO
7747: IFFALSE 7896
// if Side_Positions [ i ] then
7749: LD_EXP 34
7753: PUSH
7754: LD_VAR 0 1
7758: ARRAY
7759: IFFALSE 7894
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
7761: LD_ADDR_VAR 0 2
7765: PUSH
7766: LD_EXP 56
7770: PUSH
7771: LD_EXP 34
7775: PUSH
7776: LD_VAR 0 1
7780: ARRAY
7781: ARRAY
7782: PPUSH
7783: LD_INT 2
7785: PUSH
7786: LD_INT 21
7788: PUSH
7789: LD_INT 1
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: LD_INT 21
7798: PUSH
7799: LD_INT 2
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 22
7813: PUSH
7814: LD_OWVAR 2
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PPUSH
7827: CALL_OW 70
7831: PUSH
7832: FOR_IN
7833: IFFALSE 7892
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
7835: LD_EXP 31
7839: PUSH
7840: LD_VAR 0 1
7844: ARRAY
7845: PUSH
7846: LD_EXP 31
7850: PUSH
7851: LD_OWVAR 2
7855: ARRAY
7856: NONEQUAL
7857: PUSH
7858: LD_EXP 36
7862: NOT
7863: PUSH
7864: LD_VAR 0 1
7868: PUSH
7869: LD_OWVAR 2
7873: NONEQUAL
7874: AND
7875: OR
7876: IFFALSE 7890
// ComMoveToArea ( un , BuildUpEscape ) ;
7878: LD_VAR 0 2
7882: PPUSH
7883: LD_INT 17
7885: PPUSH
7886: CALL_OW 113
7890: GO 7832
7892: POP
7893: POP
7894: GO 7746
7896: POP
7897: POP
// enable ;
7898: ENABLE
// end ;
7899: PPOPN 2
7901: END
// every 0 0$1 trigger def_builduptime do
7902: LD_EXP 14
7906: IFFALSE 7932
7908: GO 7910
7910: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
7911: LD_INT 8400
7913: PUSH
7914: LD_EXP 14
7918: PUSH
7919: LD_INT 2100
7921: MUL
7922: PLUS
7923: PPUSH
7924: CALL_OW 67
// EndBuildUp ;
7928: CALL 7545 0 0
// end ; end_of_file
7932: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7933: LD_INT 0
7935: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7936: LD_VAR 0 1
7940: PPUSH
7941: CALL_OW 255
7945: PUSH
7946: LD_VAR 0 4
7950: EQUAL
7951: IFFALSE 7970
// begin SetAchievement ( ACH_RAD ) ;
7953: LD_STRING ACH_RAD
7955: PPUSH
7956: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7960: LD_STRING ACH_NL
7962: PPUSH
7963: LD_INT 1
7965: PPUSH
7966: CALL_OW 564
// end end ;
7970: LD_VAR 0 5
7974: RET
// export function SA_Win ( side ) ; begin
7975: LD_INT 0
7977: PPUSH
// case side of 1 :
7978: LD_VAR 0 1
7982: PUSH
7983: LD_INT 1
7985: DOUBLE
7986: EQUAL
7987: IFTRUE 7991
7989: GO 8004
7991: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7992: LD_STRING ACH_AH
7994: PPUSH
7995: LD_INT 1
7997: PPUSH
7998: CALL_OW 564
8002: GO 8167
8004: LD_INT 2
8006: DOUBLE
8007: EQUAL
8008: IFTRUE 8012
8010: GO 8025
8012: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8013: LD_STRING ACH_E
8015: PPUSH
8016: LD_INT 1
8018: PPUSH
8019: CALL_OW 564
8023: GO 8167
8025: LD_INT 3
8027: DOUBLE
8028: EQUAL
8029: IFTRUE 8033
8031: GO 8046
8033: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8034: LD_STRING ACH_OOL
8036: PPUSH
8037: LD_INT 1
8039: PPUSH
8040: CALL_OW 564
8044: GO 8167
8046: LD_INT 1
8048: PUSH
8049: LD_INT 2
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: DOUBLE
8056: EQUAL
8057: IFTRUE 8061
8059: GO 8086
8061: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8062: LD_STRING ACH_AH
8064: PPUSH
8065: LD_REAL  5.00000000000000E-0001
8068: PPUSH
8069: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8073: LD_STRING ACH_E
8075: PPUSH
8076: LD_REAL  5.00000000000000E-0001
8079: PPUSH
8080: CALL_OW 564
// end ; [ 2 , 3 ] :
8084: GO 8167
8086: LD_INT 2
8088: PUSH
8089: LD_INT 3
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: DOUBLE
8096: EQUAL
8097: IFTRUE 8101
8099: GO 8126
8101: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8102: LD_STRING ACH_OOL
8104: PPUSH
8105: LD_REAL  5.00000000000000E-0001
8108: PPUSH
8109: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8113: LD_STRING ACH_E
8115: PPUSH
8116: LD_REAL  5.00000000000000E-0001
8119: PPUSH
8120: CALL_OW 564
// end ; [ 3 , 1 ] :
8124: GO 8167
8126: LD_INT 3
8128: PUSH
8129: LD_INT 1
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: DOUBLE
8136: EQUAL
8137: IFTRUE 8141
8139: GO 8166
8141: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8142: LD_STRING ACH_AH
8144: PPUSH
8145: LD_REAL  5.00000000000000E-0001
8148: PPUSH
8149: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8153: LD_STRING ACH_OOL
8155: PPUSH
8156: LD_REAL  5.00000000000000E-0001
8159: PPUSH
8160: CALL_OW 564
// end ; end ;
8164: GO 8167
8166: POP
// end ; end_of_file
8167: LD_VAR 0 2
8171: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8172: LD_INT 0
8174: PPUSH
8175: PPUSH
// enable ( 98 ) ;
8176: LD_INT 98
8178: ENABLE_MARKED
// GameEnded = false ;
8179: LD_ADDR_LOC 15
8183: PUSH
8184: LD_INT 0
8186: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8187: LD_ADDR_LOC 14
8191: PUSH
8192: LD_INT 0
8194: PUSH
8195: LD_INT 0
8197: PUSH
8198: LD_INT 0
8200: PUSH
8201: LD_INT 0
8203: PUSH
8204: LD_INT 0
8206: PUSH
8207: LD_INT 0
8209: PUSH
8210: LD_INT 0
8212: PUSH
8213: LD_INT 0
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: ST_TO_ADDR
// unfoged = false ;
8226: LD_ADDR_LOC 16
8230: PUSH
8231: LD_INT 0
8233: ST_TO_ADDR
// defeated_specs := [ ] ;
8234: LD_ADDR_LOC 17
8238: PUSH
8239: EMPTY
8240: ST_TO_ADDR
// for i = 1 to side_positions do
8241: LD_ADDR_VAR 0 2
8245: PUSH
8246: DOUBLE
8247: LD_INT 1
8249: DEC
8250: ST_TO_ADDR
8251: LD_EXP 34
8255: PUSH
8256: FOR_TO
8257: IFFALSE 8297
// if not side_positions [ i ] then
8259: LD_EXP 34
8263: PUSH
8264: LD_VAR 0 2
8268: ARRAY
8269: NOT
8270: IFFALSE 8295
// defeated = replace ( defeated , i , true ) ;
8272: LD_ADDR_LOC 14
8276: PUSH
8277: LD_LOC 14
8281: PPUSH
8282: LD_VAR 0 2
8286: PPUSH
8287: LD_INT 1
8289: PPUSH
8290: CALL_OW 1
8294: ST_TO_ADDR
8295: GO 8256
8297: POP
8298: POP
// end ;
8299: LD_VAR 0 1
8303: RET
// function CanWinLoose ; begin
8304: LD_INT 0
8306: PPUSH
// Result := true ;
8307: LD_ADDR_VAR 0 1
8311: PUSH
8312: LD_INT 1
8314: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8315: CALL_OW 518
8319: PUSH
8320: CALL_OW 519
8324: PUSH
8325: LD_INT 0
8327: GREATER
8328: AND
8329: IFFALSE 8339
// Result := false ;
8331: LD_ADDR_VAR 0 1
8335: PUSH
8336: LD_INT 0
8338: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8339: CALL_OW 531
8343: PUSH
8344: CALL_OW 519
8348: PUSH
8349: LD_INT 1
8351: GREATER
8352: AND
8353: IFFALSE 8363
// Result := false ;
8355: LD_ADDR_VAR 0 1
8359: PUSH
8360: LD_INT 0
8362: ST_TO_ADDR
// end ;
8363: LD_VAR 0 1
8367: RET
// export function HasPower ( i ) ; var k , h ; begin
8368: LD_INT 0
8370: PPUSH
8371: PPUSH
8372: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8373: LD_VAR 0 1
8377: PPUSH
8378: CALL_OW 108
8382: NOT
8383: PUSH
8384: LD_EXP 33
8388: PUSH
8389: LD_VAR 0 1
8393: ARRAY
8394: NOT
8395: AND
8396: PUSH
8397: LD_OWVAR 4
8401: AND
8402: IFFALSE 8414
// begin result = false ;
8404: LD_ADDR_VAR 0 2
8408: PUSH
8409: LD_INT 0
8411: ST_TO_ADDR
// end else
8412: GO 8709
// case def_win_rules of 0 :
8414: LD_EXP 30
8418: PUSH
8419: LD_INT 0
8421: DOUBLE
8422: EQUAL
8423: IFTRUE 8427
8425: GO 8590
8427: POP
// if def_people_respawning then
8428: LD_EXP 11
8432: IFFALSE 8523
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8434: LD_ADDR_VAR 0 2
8438: PUSH
8439: LD_INT 22
8441: PUSH
8442: LD_VAR 0 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 2
8453: PUSH
8454: LD_INT 21
8456: PUSH
8457: LD_INT 1
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 33
8466: PUSH
8467: LD_INT 3
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 33
8476: PUSH
8477: LD_INT 5
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: LD_INT 30
8486: PUSH
8487: LD_INT 0
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: LD_INT 30
8496: PUSH
8497: LD_INT 1
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PPUSH
8516: CALL_OW 69
8520: ST_TO_ADDR
8521: GO 8588
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8523: LD_ADDR_VAR 0 2
8527: PUSH
8528: LD_INT 22
8530: PUSH
8531: LD_VAR 0 1
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: LD_INT 2
8542: PUSH
8543: LD_INT 21
8545: PUSH
8546: LD_INT 1
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 33
8555: PUSH
8556: LD_INT 3
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: LD_INT 33
8565: PUSH
8566: LD_INT 5
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: PPUSH
8583: CALL_OW 69
8587: ST_TO_ADDR
8588: GO 8709
8590: LD_INT 1
8592: DOUBLE
8593: EQUAL
8594: IFTRUE 8598
8596: GO 8637
8598: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8599: LD_ADDR_VAR 0 2
8603: PUSH
8604: LD_INT 22
8606: PUSH
8607: LD_VAR 0 1
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: LD_INT 21
8618: PUSH
8619: LD_INT 1
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PPUSH
8630: CALL_OW 69
8634: ST_TO_ADDR
8635: GO 8709
8637: LD_INT 2
8639: DOUBLE
8640: EQUAL
8641: IFTRUE 8645
8643: GO 8708
8645: POP
// begin h = false ;
8646: LD_ADDR_VAR 0 4
8650: PUSH
8651: LD_INT 0
8653: ST_TO_ADDR
// for k in heroes [ i ] do
8654: LD_ADDR_VAR 0 3
8658: PUSH
8659: LD_EXP 46
8663: PUSH
8664: LD_VAR 0 1
8668: ARRAY
8669: PUSH
8670: FOR_IN
8671: IFFALSE 8694
// if IsLive ( k ) then
8673: LD_VAR 0 3
8677: PPUSH
8678: CALL_OW 300
8682: IFFALSE 8692
// h = true ;
8684: LD_ADDR_VAR 0 4
8688: PUSH
8689: LD_INT 1
8691: ST_TO_ADDR
8692: GO 8670
8694: POP
8695: POP
// Result := h ;
8696: LD_ADDR_VAR 0 2
8700: PUSH
8701: LD_VAR 0 4
8705: ST_TO_ADDR
// end ; end ;
8706: GO 8709
8708: POP
// end ;
8709: LD_VAR 0 2
8713: RET
// function AlliedSides ( i , j ) ; begin
8714: LD_INT 0
8716: PPUSH
// Result := false ;
8717: LD_ADDR_VAR 0 3
8721: PUSH
8722: LD_INT 0
8724: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8725: LD_VAR 0 1
8729: PPUSH
8730: LD_VAR 0 2
8734: PPUSH
8735: CALL_OW 81
8739: PUSH
8740: LD_INT 1
8742: EQUAL
8743: PUSH
8744: LD_VAR 0 2
8748: PPUSH
8749: LD_VAR 0 1
8753: PPUSH
8754: CALL_OW 81
8758: PUSH
8759: LD_INT 1
8761: EQUAL
8762: AND
8763: PUSH
8764: LD_VAR 0 1
8768: PPUSH
8769: CALL_OW 83
8773: AND
8774: PUSH
8775: LD_VAR 0 2
8779: PPUSH
8780: CALL_OW 83
8784: AND
8785: IFFALSE 8795
// Result := true ;
8787: LD_ADDR_VAR 0 3
8791: PUSH
8792: LD_INT 1
8794: ST_TO_ADDR
// end ;
8795: LD_VAR 0 3
8799: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8800: CALL 8304 0 0
8804: PUSH
8805: LD_LOC 15
8809: NOT
8810: AND
8811: IFFALSE 8827
8813: GO 8815
8815: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8816: LD_ADDR_EXP 55
8820: PUSH
8821: LD_STRING #Player-Ended
8823: PUSH
8824: EMPTY
8825: LIST
8826: ST_TO_ADDR
8827: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8828: CALL 8304 0 0
8832: PUSH
8833: LD_LOC 15
8837: AND
8838: IFFALSE 8847
8840: GO 8842
8842: DISABLE
// YouLostInMultiplayer ;
8843: CALL_OW 107
8847: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8848: CALL 8304 0 0
8852: NOT
8853: PUSH
8854: CALL_OW 531
8858: NOT
8859: AND
8860: IFFALSE 8876
8862: GO 8864
8864: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8865: LD_ADDR_EXP 55
8869: PUSH
8870: LD_STRING #server-wait
8872: PUSH
8873: EMPTY
8874: LIST
8875: ST_TO_ADDR
8876: END
// every 100 trigger IAmSpec do
8877: CALL_OW 531
8881: IFFALSE 8897
8883: GO 8885
8885: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8886: LD_ADDR_EXP 55
8890: PUSH
8891: LD_STRING #Player-IAmSpec
8893: PUSH
8894: EMPTY
8895: LIST
8896: ST_TO_ADDR
8897: END
// every 100 trigger GameEnded and IAmSpec do
8898: LD_LOC 15
8902: PUSH
8903: CALL_OW 531
8907: AND
8908: IFFALSE 8917
8910: GO 8912
8912: DISABLE
// YouLostInMultiplayer ;
8913: CALL_OW 107
8917: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8918: CALL 8304 0 0
8922: PUSH
8923: LD_LOC 15
8927: NOT
8928: AND
8929: IFFALSE 8945
8931: GO 8933
8933: DISABLE
// WaitServerStrings = [ $player-win ] ;
8934: LD_ADDR_EXP 55
8938: PUSH
8939: LD_STRING $player-win
8941: PUSH
8942: EMPTY
8943: LIST
8944: ST_TO_ADDR
8945: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8946: CALL 8304 0 0
8950: PUSH
8951: LD_LOC 15
8955: AND
8956: IFFALSE 8980
8958: GO 8960
8960: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8961: LD_EXP 35
8965: PUSH
8966: LD_OWVAR 7
8970: ARRAY
8971: PPUSH
8972: CALL 7975 0 1
// YouWinInMultiplayer ;
8976: CALL_OW 106
// end ;
8980: END
// every 100 trigger isEditor marked 401 do
8981: LD_OWVAR 84
8985: IFFALSE 9001
8987: GO 8989
8989: DISABLE
// Debug_Strings = [ You won ] ;
8990: LD_ADDR_OWVAR 48
8994: PUSH
8995: LD_STRING You won
8997: PUSH
8998: EMPTY
8999: LIST
9000: ST_TO_ADDR
9001: END
// every 100 trigger isEditor marked 400 do
9002: LD_OWVAR 84
9006: IFFALSE 9022
9008: GO 9010
9010: DISABLE
// Debug_Strings = [ You loss ] ;
9011: LD_ADDR_OWVAR 48
9015: PUSH
9016: LD_STRING You loss
9018: PUSH
9019: EMPTY
9020: LIST
9021: ST_TO_ADDR
9022: END
// every 100 marked 98 do var i , un ;
9023: GO 9025
9025: DISABLE
9026: LD_INT 0
9028: PPUSH
9029: PPUSH
// begin for i = 1 to side_positions do
9030: LD_ADDR_VAR 0 1
9034: PUSH
9035: DOUBLE
9036: LD_INT 1
9038: DEC
9039: ST_TO_ADDR
9040: LD_EXP 34
9044: PUSH
9045: FOR_TO
9046: IFFALSE 9133
// begin if side_positions [ i ] then
9048: LD_EXP 34
9052: PUSH
9053: LD_VAR 0 1
9057: ARRAY
9058: IFFALSE 9131
// if not HasPower ( i ) and not defeated [ i ] then
9060: LD_VAR 0 1
9064: PPUSH
9065: CALL 8368 0 1
9069: NOT
9070: PUSH
9071: LD_LOC 14
9075: PUSH
9076: LD_VAR 0 1
9080: ARRAY
9081: NOT
9082: AND
9083: IFFALSE 9131
// begin defeated = replace ( defeated , i , true ) ;
9085: LD_ADDR_LOC 14
9089: PUSH
9090: LD_LOC 14
9094: PPUSH
9095: LD_VAR 0 1
9099: PPUSH
9100: LD_INT 1
9102: PPUSH
9103: CALL_OW 1
9107: ST_TO_ADDR
// if i = mp_player_side then
9108: LD_VAR 0 1
9112: PUSH
9113: LD_OWVAR 7
9117: EQUAL
9118: IFFALSE 9131
// begin Multiplayer_Loose_Message ;
9120: CALL_OW 521
// SetPlayerSpectator ( ) ;
9124: CALL_OW 572
// enable ( 400 ) ;
9128: LD_INT 400
9130: ENABLE_MARKED
// end ; end ; end ;
9131: GO 9045
9133: POP
9134: POP
// DidGameEnd ;
9135: CALL 9150 0 0
// if not GameEnded then
9139: LD_LOC 15
9143: NOT
9144: IFFALSE 9147
// enable ;
9146: ENABLE
// end ;
9147: PPOPN 2
9149: END
// function DidGameEnd ; var i , k , enemy ; begin
9150: LD_INT 0
9152: PPUSH
9153: PPUSH
9154: PPUSH
9155: PPUSH
// enemy = [ ] ;
9156: LD_ADDR_VAR 0 4
9160: PUSH
9161: EMPTY
9162: ST_TO_ADDR
// for i = 1 to side_positions do
9163: LD_ADDR_VAR 0 2
9167: PUSH
9168: DOUBLE
9169: LD_INT 1
9171: DEC
9172: ST_TO_ADDR
9173: LD_EXP 34
9177: PUSH
9178: FOR_TO
9179: IFFALSE 9273
// if not defeated [ i ] then
9181: LD_LOC 14
9185: PUSH
9186: LD_VAR 0 2
9190: ARRAY
9191: NOT
9192: IFFALSE 9271
// for k = 1 to side_positions do
9194: LD_ADDR_VAR 0 3
9198: PUSH
9199: DOUBLE
9200: LD_INT 1
9202: DEC
9203: ST_TO_ADDR
9204: LD_EXP 34
9208: PUSH
9209: FOR_TO
9210: IFFALSE 9269
// if not defeated [ k ] then
9212: LD_LOC 14
9216: PUSH
9217: LD_VAR 0 3
9221: ARRAY
9222: NOT
9223: IFFALSE 9267
// if not AlliedSides ( i , k ) then
9225: LD_VAR 0 2
9229: PPUSH
9230: LD_VAR 0 3
9234: PPUSH
9235: CALL 8714 0 2
9239: NOT
9240: IFFALSE 9267
// enemy = enemy ^ [ i , k ] ;
9242: LD_ADDR_VAR 0 4
9246: PUSH
9247: LD_VAR 0 4
9251: PUSH
9252: LD_VAR 0 2
9256: PUSH
9257: LD_VAR 0 3
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: ADD
9266: ST_TO_ADDR
9267: GO 9209
9269: POP
9270: POP
9271: GO 9178
9273: POP
9274: POP
// if not enemy then
9275: LD_VAR 0 4
9279: NOT
9280: IFFALSE 9306
// begin GameEnded = true ;
9282: LD_ADDR_LOC 15
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9290: LD_LOC 14
9294: PUSH
9295: LD_OWVAR 7
9299: ARRAY
9300: NOT
9301: IFFALSE 9306
// enable ( 401 ) ;
9303: LD_INT 401
9305: ENABLE_MARKED
// end ; end ;
9306: LD_VAR 0 1
9310: RET
// function unfog ; var k , friends ; begin
9311: LD_INT 0
9313: PPUSH
9314: PPUSH
9315: PPUSH
// for k = 1 to side_positions do
9316: LD_ADDR_VAR 0 2
9320: PUSH
9321: DOUBLE
9322: LD_INT 1
9324: DEC
9325: ST_TO_ADDR
9326: LD_EXP 34
9330: PUSH
9331: FOR_TO
9332: IFFALSE 9388
// if not defeated [ k ] then
9334: LD_LOC 14
9338: PUSH
9339: LD_VAR 0 2
9343: ARRAY
9344: NOT
9345: IFFALSE 9386
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9347: LD_OWVAR 7
9351: PPUSH
9352: LD_VAR 0 2
9356: PPUSH
9357: CALL_OW 81
9361: PUSH
9362: LD_INT 1
9364: PUSH
9365: EMPTY
9366: LIST
9367: IN
9368: IFFALSE 9386
// friends = friends ^ k ;
9370: LD_ADDR_VAR 0 3
9374: PUSH
9375: LD_VAR 0 3
9379: PUSH
9380: LD_VAR 0 2
9384: ADD
9385: ST_TO_ADDR
9386: GO 9331
9388: POP
9389: POP
// if not friends then
9390: LD_VAR 0 3
9394: NOT
9395: IFFALSE 9409
// begin SetPlayerSpectator ( ) ;
9397: CALL_OW 572
// unfoged = true ;
9401: LD_ADDR_LOC 16
9405: PUSH
9406: LD_INT 1
9408: ST_TO_ADDR
// end ; end ;
9409: LD_VAR 0 1
9413: RET
// export function MakeGameEnd ; begin
9414: LD_INT 0
9416: PPUSH
// SetPlayerSpectator ( ) ;
9417: CALL_OW 572
// unfoged = true ;
9421: LD_ADDR_LOC 16
9425: PUSH
9426: LD_INT 1
9428: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9429: LD_INT 175
9431: PPUSH
9432: CALL_OW 67
// GameEnded = true ;
9436: LD_ADDR_LOC 15
9440: PUSH
9441: LD_INT 1
9443: ST_TO_ADDR
// end ;
9444: LD_VAR 0 1
9448: RET
// export function GetGameEnded ; begin
9449: LD_INT 0
9451: PPUSH
// result = GameEnded ;
9452: LD_ADDR_VAR 0 1
9456: PUSH
9457: LD_LOC 15
9461: ST_TO_ADDR
// end ; end_of_file
9462: LD_VAR 0 1
9466: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9467: LD_INT 0
9469: PPUSH
9470: PPUSH
9471: PPUSH
// for side = 1 to 8 do
9472: LD_ADDR_VAR 0 2
9476: PUSH
9477: DOUBLE
9478: LD_INT 1
9480: DEC
9481: ST_TO_ADDR
9482: LD_INT 8
9484: PUSH
9485: FOR_TO
9486: IFFALSE 9607
// begin for i = 1 to 72 do
9488: LD_ADDR_VAR 0 3
9492: PUSH
9493: DOUBLE
9494: LD_INT 1
9496: DEC
9497: ST_TO_ADDR
9498: LD_INT 72
9500: PUSH
9501: FOR_TO
9502: IFFALSE 9533
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9504: LD_VAR 0 3
9508: PPUSH
9509: LD_VAR 0 2
9513: PPUSH
9514: LD_INT 0
9516: PPUSH
9517: LD_VAR 0 3
9521: PPUSH
9522: CALL_OW 565
9526: PPUSH
9527: CALL_OW 322
9531: GO 9501
9533: POP
9534: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9535: LD_INT 73
9537: PPUSH
9538: LD_VAR 0 2
9542: PPUSH
9543: LD_INT 0
9545: PPUSH
9546: LD_INT 25
9548: PPUSH
9549: CALL_OW 565
9553: PPUSH
9554: CALL_OW 322
// for i = 0 to 40 do
9558: LD_ADDR_VAR 0 3
9562: PUSH
9563: DOUBLE
9564: LD_INT 0
9566: DEC
9567: ST_TO_ADDR
9568: LD_INT 40
9570: PUSH
9571: FOR_TO
9572: IFFALSE 9603
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9574: LD_VAR 0 3
9578: PPUSH
9579: LD_VAR 0 2
9583: PPUSH
9584: LD_INT 1
9586: PPUSH
9587: LD_VAR 0 3
9591: PPUSH
9592: CALL_OW 565
9596: PPUSH
9597: CALL_OW 324
9601: GO 9571
9603: POP
9604: POP
// end ;
9605: GO 9485
9607: POP
9608: POP
// end ;
9609: LD_VAR 0 1
9613: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9614: LD_INT 0
9616: PPUSH
9617: PPUSH
9618: PPUSH
// for side = 1 to 8 do
9619: LD_ADDR_VAR 0 3
9623: PUSH
9624: DOUBLE
9625: LD_INT 1
9627: DEC
9628: ST_TO_ADDR
9629: LD_INT 8
9631: PUSH
9632: FOR_TO
9633: IFFALSE 13629
// begin for i = 1 to 73 do
9635: LD_ADDR_VAR 0 4
9639: PUSH
9640: DOUBLE
9641: LD_INT 1
9643: DEC
9644: ST_TO_ADDR
9645: LD_INT 73
9647: PUSH
9648: FOR_TO
9649: IFFALSE 9670
// SetTech ( i , side , state_disabled ) ;
9651: LD_VAR 0 4
9655: PPUSH
9656: LD_VAR 0 3
9660: PPUSH
9661: LD_INT 0
9663: PPUSH
9664: CALL_OW 322
9668: GO 9648
9670: POP
9671: POP
// for i = 0 to 40 do
9672: LD_ADDR_VAR 0 4
9676: PUSH
9677: DOUBLE
9678: LD_INT 0
9680: DEC
9681: ST_TO_ADDR
9682: LD_INT 40
9684: PUSH
9685: FOR_TO
9686: IFFALSE 9707
// SetRestrict ( i , side , false ) ;
9688: LD_VAR 0 4
9692: PPUSH
9693: LD_VAR 0 3
9697: PPUSH
9698: LD_INT 0
9700: PPUSH
9701: CALL_OW 324
9705: GO 9685
9707: POP
9708: POP
// case level of 1 :
9709: LD_VAR 0 1
9713: PUSH
9714: LD_INT 1
9716: DOUBLE
9717: EQUAL
9718: IFTRUE 9722
9720: GO 9875
9722: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9723: LD_INT 35
9725: PPUSH
9726: LD_VAR 0 3
9730: PPUSH
9731: LD_INT 1
9733: PPUSH
9734: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9738: LD_INT 45
9740: PPUSH
9741: LD_VAR 0 3
9745: PPUSH
9746: LD_INT 1
9748: PPUSH
9749: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9753: LD_INT 46
9755: PPUSH
9756: LD_VAR 0 3
9760: PPUSH
9761: LD_INT 1
9763: PPUSH
9764: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9768: LD_INT 47
9770: PPUSH
9771: LD_VAR 0 3
9775: PPUSH
9776: LD_INT 1
9778: PPUSH
9779: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9783: LD_INT 0
9785: PPUSH
9786: LD_VAR 0 3
9790: PPUSH
9791: LD_INT 1
9793: PPUSH
9794: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9798: LD_INT 2
9800: PPUSH
9801: LD_VAR 0 3
9805: PPUSH
9806: LD_INT 1
9808: PPUSH
9809: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9813: LD_INT 4
9815: PPUSH
9816: LD_VAR 0 3
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9828: LD_INT 6
9830: PPUSH
9831: LD_VAR 0 3
9835: PPUSH
9836: LD_INT 1
9838: PPUSH
9839: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9843: LD_INT 29
9845: PPUSH
9846: LD_VAR 0 3
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9858: LD_INT 31
9860: PPUSH
9861: LD_VAR 0 3
9865: PPUSH
9866: LD_INT 1
9868: PPUSH
9869: CALL_OW 324
// end ; 2 :
9873: GO 13627
9875: LD_INT 2
9877: DOUBLE
9878: EQUAL
9879: IFTRUE 9883
9881: GO 10081
9883: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9884: LD_INT 35
9886: PPUSH
9887: LD_VAR 0 3
9891: PPUSH
9892: LD_INT 1
9894: PPUSH
9895: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9899: LD_INT 45
9901: PPUSH
9902: LD_VAR 0 3
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9914: LD_INT 46
9916: PPUSH
9917: LD_VAR 0 3
9921: PPUSH
9922: LD_INT 1
9924: PPUSH
9925: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9929: LD_INT 47
9931: PPUSH
9932: LD_VAR 0 3
9936: PPUSH
9937: LD_INT 1
9939: PPUSH
9940: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9944: LD_INT 1
9946: PPUSH
9947: LD_VAR 0 3
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9959: LD_INT 2
9961: PPUSH
9962: LD_VAR 0 3
9966: PPUSH
9967: LD_INT 1
9969: PPUSH
9970: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9974: LD_INT 11
9976: PPUSH
9977: LD_VAR 0 3
9981: PPUSH
9982: LD_INT 1
9984: PPUSH
9985: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9989: LD_INT 0
9991: PPUSH
9992: LD_VAR 0 3
9996: PPUSH
9997: LD_INT 1
9999: PPUSH
10000: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10004: LD_INT 2
10006: PPUSH
10007: LD_VAR 0 3
10011: PPUSH
10012: LD_INT 1
10014: PPUSH
10015: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10019: LD_INT 4
10021: PPUSH
10022: LD_VAR 0 3
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10034: LD_INT 6
10036: PPUSH
10037: LD_VAR 0 3
10041: PPUSH
10042: LD_INT 1
10044: PPUSH
10045: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10049: LD_INT 29
10051: PPUSH
10052: LD_VAR 0 3
10056: PPUSH
10057: LD_INT 1
10059: PPUSH
10060: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10064: LD_INT 31
10066: PPUSH
10067: LD_VAR 0 3
10071: PPUSH
10072: LD_INT 1
10074: PPUSH
10075: CALL_OW 324
// end ; 3 :
10079: GO 13627
10081: LD_INT 3
10083: DOUBLE
10084: EQUAL
10085: IFTRUE 10089
10087: GO 10542
10089: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10090: LD_INT 35
10092: PPUSH
10093: LD_VAR 0 3
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10105: LD_INT 45
10107: PPUSH
10108: LD_VAR 0 3
10112: PPUSH
10113: LD_INT 1
10115: PPUSH
10116: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10120: LD_INT 46
10122: PPUSH
10123: LD_VAR 0 3
10127: PPUSH
10128: LD_INT 1
10130: PPUSH
10131: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10135: LD_INT 47
10137: PPUSH
10138: LD_VAR 0 3
10142: PPUSH
10143: LD_INT 1
10145: PPUSH
10146: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10150: LD_INT 1
10152: PPUSH
10153: LD_VAR 0 3
10157: PPUSH
10158: LD_INT 1
10160: PPUSH
10161: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10165: LD_INT 2
10167: PPUSH
10168: LD_VAR 0 3
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10180: LD_INT 11
10182: PPUSH
10183: LD_VAR 0 3
10187: PPUSH
10188: LD_INT 1
10190: PPUSH
10191: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10195: LD_INT 48
10197: PPUSH
10198: LD_VAR 0 3
10202: PPUSH
10203: LD_INT 1
10205: PPUSH
10206: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10210: LD_INT 69
10212: PPUSH
10213: LD_VAR 0 3
10217: PPUSH
10218: LD_INT 1
10220: PPUSH
10221: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10225: LD_INT 39
10227: PPUSH
10228: LD_VAR 0 3
10232: PPUSH
10233: LD_INT 1
10235: PPUSH
10236: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10240: LD_INT 43
10242: PPUSH
10243: LD_VAR 0 3
10247: PPUSH
10248: LD_INT 1
10250: PPUSH
10251: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10255: LD_INT 51
10257: PPUSH
10258: LD_VAR 0 3
10262: PPUSH
10263: LD_INT 1
10265: PPUSH
10266: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10270: LD_INT 6
10272: PPUSH
10273: LD_VAR 0 3
10277: PPUSH
10278: LD_INT 1
10280: PPUSH
10281: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10285: LD_INT 0
10287: PPUSH
10288: LD_VAR 0 3
10292: PPUSH
10293: LD_INT 1
10295: PPUSH
10296: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10300: LD_INT 2
10302: PPUSH
10303: LD_VAR 0 3
10307: PPUSH
10308: LD_INT 1
10310: PPUSH
10311: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10315: LD_INT 3
10317: PPUSH
10318: LD_VAR 0 3
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10330: LD_INT 4
10332: PPUSH
10333: LD_VAR 0 3
10337: PPUSH
10338: LD_INT 1
10340: PPUSH
10341: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10345: LD_INT 6
10347: PPUSH
10348: LD_VAR 0 3
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10360: LD_INT 7
10362: PPUSH
10363: LD_VAR 0 3
10367: PPUSH
10368: LD_INT 1
10370: PPUSH
10371: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10375: LD_INT 8
10377: PPUSH
10378: LD_VAR 0 3
10382: PPUSH
10383: LD_INT 1
10385: PPUSH
10386: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10390: LD_INT 10
10392: PPUSH
10393: LD_VAR 0 3
10397: PPUSH
10398: LD_INT 1
10400: PPUSH
10401: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10405: LD_INT 15
10407: PPUSH
10408: LD_VAR 0 3
10412: PPUSH
10413: LD_INT 1
10415: PPUSH
10416: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10420: LD_INT 16
10422: PPUSH
10423: LD_VAR 0 3
10427: PPUSH
10428: LD_INT 1
10430: PPUSH
10431: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10435: LD_INT 17
10437: PPUSH
10438: LD_VAR 0 3
10442: PPUSH
10443: LD_INT 1
10445: PPUSH
10446: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10450: LD_INT 20
10452: PPUSH
10453: LD_VAR 0 3
10457: PPUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10465: LD_INT 26
10467: PPUSH
10468: LD_VAR 0 3
10472: PPUSH
10473: LD_INT 1
10475: PPUSH
10476: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10480: LD_INT 27
10482: PPUSH
10483: LD_VAR 0 3
10487: PPUSH
10488: LD_INT 1
10490: PPUSH
10491: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10495: LD_INT 29
10497: PPUSH
10498: LD_VAR 0 3
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10510: LD_INT 31
10512: PPUSH
10513: LD_VAR 0 3
10517: PPUSH
10518: LD_INT 1
10520: PPUSH
10521: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10525: LD_INT 32
10527: PPUSH
10528: LD_VAR 0 3
10532: PPUSH
10533: LD_INT 1
10535: PPUSH
10536: CALL_OW 324
// end ; 4 :
10540: GO 13627
10542: LD_INT 4
10544: DOUBLE
10545: EQUAL
10546: IFTRUE 10550
10548: GO 11498
10550: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10551: LD_INT 35
10553: PPUSH
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_INT 1
10561: PPUSH
10562: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10566: LD_INT 45
10568: PPUSH
10569: LD_VAR 0 3
10573: PPUSH
10574: LD_INT 1
10576: PPUSH
10577: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10581: LD_INT 46
10583: PPUSH
10584: LD_VAR 0 3
10588: PPUSH
10589: LD_INT 1
10591: PPUSH
10592: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10596: LD_INT 47
10598: PPUSH
10599: LD_VAR 0 3
10603: PPUSH
10604: LD_INT 1
10606: PPUSH
10607: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10611: LD_INT 1
10613: PPUSH
10614: LD_VAR 0 3
10618: PPUSH
10619: LD_INT 1
10621: PPUSH
10622: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10626: LD_INT 2
10628: PPUSH
10629: LD_VAR 0 3
10633: PPUSH
10634: LD_INT 1
10636: PPUSH
10637: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10641: LD_INT 11
10643: PPUSH
10644: LD_VAR 0 3
10648: PPUSH
10649: LD_INT 1
10651: PPUSH
10652: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10656: LD_INT 20
10658: PPUSH
10659: LD_VAR 0 3
10663: PPUSH
10664: LD_INT 1
10666: PPUSH
10667: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10671: LD_INT 48
10673: PPUSH
10674: LD_VAR 0 3
10678: PPUSH
10679: LD_INT 1
10681: PPUSH
10682: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10686: LD_INT 49
10688: PPUSH
10689: LD_VAR 0 3
10693: PPUSH
10694: LD_INT 1
10696: PPUSH
10697: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10701: LD_INT 69
10703: PPUSH
10704: LD_VAR 0 3
10708: PPUSH
10709: LD_INT 1
10711: PPUSH
10712: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10716: LD_INT 39
10718: PPUSH
10719: LD_VAR 0 3
10723: PPUSH
10724: LD_INT 1
10726: PPUSH
10727: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10731: LD_INT 34
10733: PPUSH
10734: LD_VAR 0 3
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10746: LD_INT 42
10748: PPUSH
10749: LD_VAR 0 3
10753: PPUSH
10754: LD_INT 1
10756: PPUSH
10757: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10761: LD_INT 44
10763: PPUSH
10764: LD_VAR 0 3
10768: PPUSH
10769: LD_INT 1
10771: PPUSH
10772: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10776: LD_INT 41
10778: PPUSH
10779: LD_VAR 0 3
10783: PPUSH
10784: LD_INT 1
10786: PPUSH
10787: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10791: LD_INT 43
10793: PPUSH
10794: LD_VAR 0 3
10798: PPUSH
10799: LD_INT 1
10801: PPUSH
10802: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10806: LD_INT 70
10808: PPUSH
10809: LD_VAR 0 3
10813: PPUSH
10814: LD_INT 1
10816: PPUSH
10817: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10821: LD_INT 51
10823: PPUSH
10824: LD_VAR 0 3
10828: PPUSH
10829: LD_INT 1
10831: PPUSH
10832: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10836: LD_INT 52
10838: PPUSH
10839: LD_VAR 0 3
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10851: LD_INT 6
10853: PPUSH
10854: LD_VAR 0 3
10858: PPUSH
10859: LD_INT 1
10861: PPUSH
10862: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10866: LD_INT 15
10868: PPUSH
10869: LD_VAR 0 3
10873: PPUSH
10874: LD_INT 1
10876: PPUSH
10877: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10881: LD_INT 7
10883: PPUSH
10884: LD_VAR 0 3
10888: PPUSH
10889: LD_INT 1
10891: PPUSH
10892: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10896: LD_INT 12
10898: PPUSH
10899: LD_VAR 0 3
10903: PPUSH
10904: LD_INT 1
10906: PPUSH
10907: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10911: LD_INT 18
10913: PPUSH
10914: LD_VAR 0 3
10918: PPUSH
10919: LD_INT 1
10921: PPUSH
10922: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10926: LD_INT 60
10928: PPUSH
10929: LD_VAR 0 3
10933: PPUSH
10934: LD_INT 1
10936: PPUSH
10937: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10941: LD_INT 9
10943: PPUSH
10944: LD_VAR 0 3
10948: PPUSH
10949: LD_INT 1
10951: PPUSH
10952: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10956: LD_INT 30
10958: PPUSH
10959: LD_VAR 0 3
10963: PPUSH
10964: LD_INT 1
10966: PPUSH
10967: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10971: LD_INT 37
10973: PPUSH
10974: LD_VAR 0 3
10978: PPUSH
10979: LD_INT 1
10981: PPUSH
10982: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10986: LD_INT 5
10988: PPUSH
10989: LD_VAR 0 3
10993: PPUSH
10994: LD_INT 1
10996: PPUSH
10997: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11001: LD_INT 66
11003: PPUSH
11004: LD_VAR 0 3
11008: PPUSH
11009: LD_INT 1
11011: PPUSH
11012: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11016: LD_INT 21
11018: PPUSH
11019: LD_VAR 0 3
11023: PPUSH
11024: LD_INT 1
11026: PPUSH
11027: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11031: LD_INT 22
11033: PPUSH
11034: LD_VAR 0 3
11038: PPUSH
11039: LD_INT 1
11041: PPUSH
11042: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11046: LD_INT 54
11048: PPUSH
11049: LD_VAR 0 3
11053: PPUSH
11054: LD_INT 1
11056: PPUSH
11057: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11061: LD_INT 0
11063: PPUSH
11064: LD_VAR 0 3
11068: PPUSH
11069: LD_INT 1
11071: PPUSH
11072: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11076: LD_INT 1
11078: PPUSH
11079: LD_VAR 0 3
11083: PPUSH
11084: LD_INT 1
11086: PPUSH
11087: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11091: LD_INT 2
11093: PPUSH
11094: LD_VAR 0 3
11098: PPUSH
11099: LD_INT 1
11101: PPUSH
11102: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11106: LD_INT 3
11108: PPUSH
11109: LD_VAR 0 3
11113: PPUSH
11114: LD_INT 1
11116: PPUSH
11117: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11121: LD_INT 4
11123: PPUSH
11124: LD_VAR 0 3
11128: PPUSH
11129: LD_INT 1
11131: PPUSH
11132: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11136: LD_INT 5
11138: PPUSH
11139: LD_VAR 0 3
11143: PPUSH
11144: LD_INT 1
11146: PPUSH
11147: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11151: LD_INT 6
11153: PPUSH
11154: LD_VAR 0 3
11158: PPUSH
11159: LD_INT 1
11161: PPUSH
11162: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11166: LD_INT 7
11168: PPUSH
11169: LD_VAR 0 3
11173: PPUSH
11174: LD_INT 1
11176: PPUSH
11177: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11181: LD_INT 8
11183: PPUSH
11184: LD_VAR 0 3
11188: PPUSH
11189: LD_INT 1
11191: PPUSH
11192: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11196: LD_INT 10
11198: PPUSH
11199: LD_VAR 0 3
11203: PPUSH
11204: LD_INT 1
11206: PPUSH
11207: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11211: LD_INT 11
11213: PPUSH
11214: LD_VAR 0 3
11218: PPUSH
11219: LD_INT 1
11221: PPUSH
11222: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11226: LD_INT 12
11228: PPUSH
11229: LD_VAR 0 3
11233: PPUSH
11234: LD_INT 1
11236: PPUSH
11237: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11241: LD_INT 13
11243: PPUSH
11244: LD_VAR 0 3
11248: PPUSH
11249: LD_INT 1
11251: PPUSH
11252: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11256: LD_INT 14
11258: PPUSH
11259: LD_VAR 0 3
11263: PPUSH
11264: LD_INT 1
11266: PPUSH
11267: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11271: LD_INT 15
11273: PPUSH
11274: LD_VAR 0 3
11278: PPUSH
11279: LD_INT 1
11281: PPUSH
11282: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11286: LD_INT 16
11288: PPUSH
11289: LD_VAR 0 3
11293: PPUSH
11294: LD_INT 1
11296: PPUSH
11297: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11301: LD_INT 17
11303: PPUSH
11304: LD_VAR 0 3
11308: PPUSH
11309: LD_INT 1
11311: PPUSH
11312: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11316: LD_INT 19
11318: PPUSH
11319: LD_VAR 0 3
11323: PPUSH
11324: LD_INT 1
11326: PPUSH
11327: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11331: LD_INT 20
11333: PPUSH
11334: LD_VAR 0 3
11338: PPUSH
11339: LD_INT 1
11341: PPUSH
11342: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11346: LD_INT 21
11348: PPUSH
11349: LD_VAR 0 3
11353: PPUSH
11354: LD_INT 1
11356: PPUSH
11357: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11361: LD_INT 23
11363: PPUSH
11364: LD_VAR 0 3
11368: PPUSH
11369: LD_INT 1
11371: PPUSH
11372: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11376: LD_INT 26
11378: PPUSH
11379: LD_VAR 0 3
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11391: LD_INT 27
11393: PPUSH
11394: LD_VAR 0 3
11398: PPUSH
11399: LD_INT 1
11401: PPUSH
11402: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11406: LD_INT 28
11408: PPUSH
11409: LD_VAR 0 3
11413: PPUSH
11414: LD_INT 1
11416: PPUSH
11417: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11421: LD_INT 29
11423: PPUSH
11424: LD_VAR 0 3
11428: PPUSH
11429: LD_INT 1
11431: PPUSH
11432: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11436: LD_INT 30
11438: PPUSH
11439: LD_VAR 0 3
11443: PPUSH
11444: LD_INT 1
11446: PPUSH
11447: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11451: LD_INT 31
11453: PPUSH
11454: LD_VAR 0 3
11458: PPUSH
11459: LD_INT 1
11461: PPUSH
11462: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11466: LD_INT 32
11468: PPUSH
11469: LD_VAR 0 3
11473: PPUSH
11474: LD_INT 1
11476: PPUSH
11477: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11481: LD_INT 36
11483: PPUSH
11484: LD_VAR 0 3
11488: PPUSH
11489: LD_INT 1
11491: PPUSH
11492: CALL_OW 324
// end ; 5 :
11496: GO 13627
11498: LD_INT 5
11500: DOUBLE
11501: EQUAL
11502: IFTRUE 11506
11504: GO 12619
11506: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11507: LD_INT 35
11509: PPUSH
11510: LD_VAR 0 3
11514: PPUSH
11515: LD_INT 1
11517: PPUSH
11518: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11522: LD_INT 45
11524: PPUSH
11525: LD_VAR 0 3
11529: PPUSH
11530: LD_INT 1
11532: PPUSH
11533: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11537: LD_INT 46
11539: PPUSH
11540: LD_VAR 0 3
11544: PPUSH
11545: LD_INT 1
11547: PPUSH
11548: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11552: LD_INT 47
11554: PPUSH
11555: LD_VAR 0 3
11559: PPUSH
11560: LD_INT 1
11562: PPUSH
11563: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11567: LD_INT 1
11569: PPUSH
11570: LD_VAR 0 3
11574: PPUSH
11575: LD_INT 1
11577: PPUSH
11578: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11582: LD_INT 2
11584: PPUSH
11585: LD_VAR 0 3
11589: PPUSH
11590: LD_INT 1
11592: PPUSH
11593: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11597: LD_INT 11
11599: PPUSH
11600: LD_VAR 0 3
11604: PPUSH
11605: LD_INT 1
11607: PPUSH
11608: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11612: LD_INT 20
11614: PPUSH
11615: LD_VAR 0 3
11619: PPUSH
11620: LD_INT 1
11622: PPUSH
11623: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11627: LD_INT 48
11629: PPUSH
11630: LD_VAR 0 3
11634: PPUSH
11635: LD_INT 1
11637: PPUSH
11638: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11642: LD_INT 49
11644: PPUSH
11645: LD_VAR 0 3
11649: PPUSH
11650: LD_INT 1
11652: PPUSH
11653: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11657: LD_INT 69
11659: PPUSH
11660: LD_VAR 0 3
11664: PPUSH
11665: LD_INT 1
11667: PPUSH
11668: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11672: LD_INT 39
11674: PPUSH
11675: LD_VAR 0 3
11679: PPUSH
11680: LD_INT 1
11682: PPUSH
11683: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11687: LD_INT 34
11689: PPUSH
11690: LD_VAR 0 3
11694: PPUSH
11695: LD_INT 1
11697: PPUSH
11698: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11702: LD_INT 42
11704: PPUSH
11705: LD_VAR 0 3
11709: PPUSH
11710: LD_INT 1
11712: PPUSH
11713: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11717: LD_INT 44
11719: PPUSH
11720: LD_VAR 0 3
11724: PPUSH
11725: LD_INT 1
11727: PPUSH
11728: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11732: LD_INT 41
11734: PPUSH
11735: LD_VAR 0 3
11739: PPUSH
11740: LD_INT 1
11742: PPUSH
11743: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11747: LD_INT 40
11749: PPUSH
11750: LD_VAR 0 3
11754: PPUSH
11755: LD_INT 1
11757: PPUSH
11758: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11762: LD_INT 43
11764: PPUSH
11765: LD_VAR 0 3
11769: PPUSH
11770: LD_INT 1
11772: PPUSH
11773: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11777: LD_INT 70
11779: PPUSH
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 1
11787: PPUSH
11788: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11792: LD_INT 51
11794: PPUSH
11795: LD_VAR 0 3
11799: PPUSH
11800: LD_INT 1
11802: PPUSH
11803: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11807: LD_INT 52
11809: PPUSH
11810: LD_VAR 0 3
11814: PPUSH
11815: LD_INT 1
11817: PPUSH
11818: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11822: LD_INT 6
11824: PPUSH
11825: LD_VAR 0 3
11829: PPUSH
11830: LD_INT 1
11832: PPUSH
11833: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11837: LD_INT 15
11839: PPUSH
11840: LD_VAR 0 3
11844: PPUSH
11845: LD_INT 1
11847: PPUSH
11848: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11852: LD_INT 7
11854: PPUSH
11855: LD_VAR 0 3
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11867: LD_INT 12
11869: PPUSH
11870: LD_VAR 0 3
11874: PPUSH
11875: LD_INT 1
11877: PPUSH
11878: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11882: LD_INT 17
11884: PPUSH
11885: LD_VAR 0 3
11889: PPUSH
11890: LD_INT 1
11892: PPUSH
11893: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11897: LD_INT 18
11899: PPUSH
11900: LD_VAR 0 3
11904: PPUSH
11905: LD_INT 1
11907: PPUSH
11908: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11912: LD_INT 60
11914: PPUSH
11915: LD_VAR 0 3
11919: PPUSH
11920: LD_INT 1
11922: PPUSH
11923: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11927: LD_INT 32
11929: PPUSH
11930: LD_VAR 0 3
11934: PPUSH
11935: LD_INT 1
11937: PPUSH
11938: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11942: LD_INT 9
11944: PPUSH
11945: LD_VAR 0 3
11949: PPUSH
11950: LD_INT 1
11952: PPUSH
11953: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11957: LD_INT 57
11959: PPUSH
11960: LD_VAR 0 3
11964: PPUSH
11965: LD_INT 1
11967: PPUSH
11968: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11972: LD_INT 30
11974: PPUSH
11975: LD_VAR 0 3
11979: PPUSH
11980: LD_INT 1
11982: PPUSH
11983: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11987: LD_INT 37
11989: PPUSH
11990: LD_VAR 0 3
11994: PPUSH
11995: LD_INT 1
11997: PPUSH
11998: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12002: LD_INT 63
12004: PPUSH
12005: LD_VAR 0 3
12009: PPUSH
12010: LD_INT 1
12012: PPUSH
12013: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12017: LD_INT 3
12019: PPUSH
12020: LD_VAR 0 3
12024: PPUSH
12025: LD_INT 1
12027: PPUSH
12028: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12032: LD_INT 4
12034: PPUSH
12035: LD_VAR 0 3
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12047: LD_INT 5
12049: PPUSH
12050: LD_VAR 0 3
12054: PPUSH
12055: LD_INT 1
12057: PPUSH
12058: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12062: LD_INT 66
12064: PPUSH
12065: LD_VAR 0 3
12069: PPUSH
12070: LD_INT 1
12072: PPUSH
12073: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12077: LD_INT 21
12079: PPUSH
12080: LD_VAR 0 3
12084: PPUSH
12085: LD_INT 1
12087: PPUSH
12088: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12092: LD_INT 22
12094: PPUSH
12095: LD_VAR 0 3
12099: PPUSH
12100: LD_INT 1
12102: PPUSH
12103: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12107: LD_INT 19
12109: PPUSH
12110: LD_VAR 0 3
12114: PPUSH
12115: LD_INT 1
12117: PPUSH
12118: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12122: LD_INT 54
12124: PPUSH
12125: LD_VAR 0 3
12129: PPUSH
12130: LD_INT 1
12132: PPUSH
12133: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12137: LD_INT 55
12139: PPUSH
12140: LD_VAR 0 3
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12152: LD_INT 0
12154: PPUSH
12155: LD_VAR 0 3
12159: PPUSH
12160: LD_INT 1
12162: PPUSH
12163: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12167: LD_INT 1
12169: PPUSH
12170: LD_VAR 0 3
12174: PPUSH
12175: LD_INT 1
12177: PPUSH
12178: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12182: LD_INT 2
12184: PPUSH
12185: LD_VAR 0 3
12189: PPUSH
12190: LD_INT 1
12192: PPUSH
12193: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12197: LD_INT 3
12199: PPUSH
12200: LD_VAR 0 3
12204: PPUSH
12205: LD_INT 1
12207: PPUSH
12208: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12212: LD_INT 4
12214: PPUSH
12215: LD_VAR 0 3
12219: PPUSH
12220: LD_INT 1
12222: PPUSH
12223: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12227: LD_INT 5
12229: PPUSH
12230: LD_VAR 0 3
12234: PPUSH
12235: LD_INT 1
12237: PPUSH
12238: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12242: LD_INT 6
12244: PPUSH
12245: LD_VAR 0 3
12249: PPUSH
12250: LD_INT 1
12252: PPUSH
12253: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12257: LD_INT 7
12259: PPUSH
12260: LD_VAR 0 3
12264: PPUSH
12265: LD_INT 1
12267: PPUSH
12268: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12272: LD_INT 8
12274: PPUSH
12275: LD_VAR 0 3
12279: PPUSH
12280: LD_INT 1
12282: PPUSH
12283: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12287: LD_INT 10
12289: PPUSH
12290: LD_VAR 0 3
12294: PPUSH
12295: LD_INT 1
12297: PPUSH
12298: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12302: LD_INT 11
12304: PPUSH
12305: LD_VAR 0 3
12309: PPUSH
12310: LD_INT 1
12312: PPUSH
12313: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12317: LD_INT 12
12319: PPUSH
12320: LD_VAR 0 3
12324: PPUSH
12325: LD_INT 1
12327: PPUSH
12328: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12332: LD_INT 13
12334: PPUSH
12335: LD_VAR 0 3
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12347: LD_INT 14
12349: PPUSH
12350: LD_VAR 0 3
12354: PPUSH
12355: LD_INT 1
12357: PPUSH
12358: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12362: LD_INT 15
12364: PPUSH
12365: LD_VAR 0 3
12369: PPUSH
12370: LD_INT 1
12372: PPUSH
12373: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12377: LD_INT 16
12379: PPUSH
12380: LD_VAR 0 3
12384: PPUSH
12385: LD_INT 1
12387: PPUSH
12388: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12392: LD_INT 17
12394: PPUSH
12395: LD_VAR 0 3
12399: PPUSH
12400: LD_INT 1
12402: PPUSH
12403: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12407: LD_INT 18
12409: PPUSH
12410: LD_VAR 0 3
12414: PPUSH
12415: LD_INT 1
12417: PPUSH
12418: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12422: LD_INT 19
12424: PPUSH
12425: LD_VAR 0 3
12429: PPUSH
12430: LD_INT 1
12432: PPUSH
12433: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12437: LD_INT 20
12439: PPUSH
12440: LD_VAR 0 3
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12452: LD_INT 21
12454: PPUSH
12455: LD_VAR 0 3
12459: PPUSH
12460: LD_INT 1
12462: PPUSH
12463: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12467: LD_INT 23
12469: PPUSH
12470: LD_VAR 0 3
12474: PPUSH
12475: LD_INT 1
12477: PPUSH
12478: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12482: LD_INT 26
12484: PPUSH
12485: LD_VAR 0 3
12489: PPUSH
12490: LD_INT 1
12492: PPUSH
12493: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12497: LD_INT 27
12499: PPUSH
12500: LD_VAR 0 3
12504: PPUSH
12505: LD_INT 1
12507: PPUSH
12508: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12512: LD_INT 28
12514: PPUSH
12515: LD_VAR 0 3
12519: PPUSH
12520: LD_INT 1
12522: PPUSH
12523: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12527: LD_INT 29
12529: PPUSH
12530: LD_VAR 0 3
12534: PPUSH
12535: LD_INT 1
12537: PPUSH
12538: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12542: LD_INT 30
12544: PPUSH
12545: LD_VAR 0 3
12549: PPUSH
12550: LD_INT 1
12552: PPUSH
12553: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12557: LD_INT 31
12559: PPUSH
12560: LD_VAR 0 3
12564: PPUSH
12565: LD_INT 1
12567: PPUSH
12568: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12572: LD_INT 32
12574: PPUSH
12575: LD_VAR 0 3
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12587: LD_INT 33
12589: PPUSH
12590: LD_VAR 0 3
12594: PPUSH
12595: LD_INT 1
12597: PPUSH
12598: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12602: LD_INT 36
12604: PPUSH
12605: LD_VAR 0 3
12609: PPUSH
12610: LD_INT 1
12612: PPUSH
12613: CALL_OW 324
// end ; 6 :
12617: GO 13627
12619: LD_INT 6
12621: DOUBLE
12622: EQUAL
12623: IFTRUE 12627
12625: GO 13552
12627: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12628: LD_INT 35
12630: PPUSH
12631: LD_VAR 0 3
12635: PPUSH
12636: LD_INT 1
12638: PPUSH
12639: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12643: LD_INT 45
12645: PPUSH
12646: LD_VAR 0 3
12650: PPUSH
12651: LD_INT 1
12653: PPUSH
12654: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12658: LD_INT 46
12660: PPUSH
12661: LD_VAR 0 3
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12673: LD_INT 47
12675: PPUSH
12676: LD_VAR 0 3
12680: PPUSH
12681: LD_INT 1
12683: PPUSH
12684: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12688: LD_INT 1
12690: PPUSH
12691: LD_VAR 0 3
12695: PPUSH
12696: LD_INT 1
12698: PPUSH
12699: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12703: LD_INT 2
12705: PPUSH
12706: LD_VAR 0 3
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12718: LD_INT 11
12720: PPUSH
12721: LD_VAR 0 3
12725: PPUSH
12726: LD_INT 1
12728: PPUSH
12729: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12733: LD_INT 20
12735: PPUSH
12736: LD_VAR 0 3
12740: PPUSH
12741: LD_INT 1
12743: PPUSH
12744: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12748: LD_INT 48
12750: PPUSH
12751: LD_VAR 0 3
12755: PPUSH
12756: LD_INT 1
12758: PPUSH
12759: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12763: LD_INT 49
12765: PPUSH
12766: LD_VAR 0 3
12770: PPUSH
12771: LD_INT 1
12773: PPUSH
12774: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12778: LD_INT 50
12780: PPUSH
12781: LD_VAR 0 3
12785: PPUSH
12786: LD_INT 1
12788: PPUSH
12789: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12793: LD_INT 69
12795: PPUSH
12796: LD_VAR 0 3
12800: PPUSH
12801: LD_INT 1
12803: PPUSH
12804: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12808: LD_INT 39
12810: PPUSH
12811: LD_VAR 0 3
12815: PPUSH
12816: LD_INT 1
12818: PPUSH
12819: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12823: LD_INT 34
12825: PPUSH
12826: LD_VAR 0 3
12830: PPUSH
12831: LD_INT 1
12833: PPUSH
12834: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12838: LD_INT 42
12840: PPUSH
12841: LD_VAR 0 3
12845: PPUSH
12846: LD_INT 1
12848: PPUSH
12849: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12853: LD_INT 44
12855: PPUSH
12856: LD_VAR 0 3
12860: PPUSH
12861: LD_INT 1
12863: PPUSH
12864: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12868: LD_INT 41
12870: PPUSH
12871: LD_VAR 0 3
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12883: LD_INT 13
12885: PPUSH
12886: LD_VAR 0 3
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12898: LD_INT 40
12900: PPUSH
12901: LD_VAR 0 3
12905: PPUSH
12906: LD_INT 1
12908: PPUSH
12909: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12913: LD_INT 43
12915: PPUSH
12916: LD_VAR 0 3
12920: PPUSH
12921: LD_INT 1
12923: PPUSH
12924: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12928: LD_INT 70
12930: PPUSH
12931: LD_VAR 0 3
12935: PPUSH
12936: LD_INT 1
12938: PPUSH
12939: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12943: LD_INT 23
12945: PPUSH
12946: LD_VAR 0 3
12950: PPUSH
12951: LD_INT 1
12953: PPUSH
12954: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12958: LD_INT 51
12960: PPUSH
12961: LD_VAR 0 3
12965: PPUSH
12966: LD_INT 1
12968: PPUSH
12969: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12973: LD_INT 52
12975: PPUSH
12976: LD_VAR 0 3
12980: PPUSH
12981: LD_INT 1
12983: PPUSH
12984: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12988: LD_INT 6
12990: PPUSH
12991: LD_VAR 0 3
12995: PPUSH
12996: LD_INT 1
12998: PPUSH
12999: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13003: LD_INT 15
13005: PPUSH
13006: LD_VAR 0 3
13010: PPUSH
13011: LD_INT 1
13013: PPUSH
13014: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13018: LD_INT 7
13020: PPUSH
13021: LD_VAR 0 3
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13033: LD_INT 12
13035: PPUSH
13036: LD_VAR 0 3
13040: PPUSH
13041: LD_INT 1
13043: PPUSH
13044: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13048: LD_INT 10
13050: PPUSH
13051: LD_VAR 0 3
13055: PPUSH
13056: LD_INT 1
13058: PPUSH
13059: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13063: LD_INT 17
13065: PPUSH
13066: LD_VAR 0 3
13070: PPUSH
13071: LD_INT 1
13073: PPUSH
13074: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13078: LD_INT 18
13080: PPUSH
13081: LD_VAR 0 3
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13093: LD_INT 60
13095: PPUSH
13096: LD_VAR 0 3
13100: PPUSH
13101: LD_INT 1
13103: PPUSH
13104: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13108: LD_INT 61
13110: PPUSH
13111: LD_VAR 0 3
13115: PPUSH
13116: LD_INT 1
13118: PPUSH
13119: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13123: LD_INT 32
13125: PPUSH
13126: LD_VAR 0 3
13130: PPUSH
13131: LD_INT 1
13133: PPUSH
13134: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13138: LD_INT 27
13140: PPUSH
13141: LD_VAR 0 3
13145: PPUSH
13146: LD_INT 1
13148: PPUSH
13149: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13153: LD_INT 36
13155: PPUSH
13156: LD_VAR 0 3
13160: PPUSH
13161: LD_INT 1
13163: PPUSH
13164: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13168: LD_INT 33
13170: PPUSH
13171: LD_VAR 0 3
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13183: LD_INT 9
13185: PPUSH
13186: LD_VAR 0 3
13190: PPUSH
13191: LD_INT 1
13193: PPUSH
13194: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13198: LD_INT 38
13200: PPUSH
13201: LD_VAR 0 3
13205: PPUSH
13206: LD_INT 1
13208: PPUSH
13209: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13213: LD_INT 57
13215: PPUSH
13216: LD_VAR 0 3
13220: PPUSH
13221: LD_INT 1
13223: PPUSH
13224: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13228: LD_INT 58
13230: PPUSH
13231: LD_VAR 0 3
13235: PPUSH
13236: LD_INT 1
13238: PPUSH
13239: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13243: LD_INT 28
13245: PPUSH
13246: LD_VAR 0 3
13250: PPUSH
13251: LD_INT 1
13253: PPUSH
13254: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13258: LD_INT 29
13260: PPUSH
13261: LD_VAR 0 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13273: LD_INT 30
13275: PPUSH
13276: LD_VAR 0 3
13280: PPUSH
13281: LD_INT 1
13283: PPUSH
13284: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13288: LD_INT 37
13290: PPUSH
13291: LD_VAR 0 3
13295: PPUSH
13296: LD_INT 1
13298: PPUSH
13299: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13303: LD_INT 63
13305: PPUSH
13306: LD_VAR 0 3
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13318: LD_INT 64
13320: PPUSH
13321: LD_VAR 0 3
13325: PPUSH
13326: LD_INT 1
13328: PPUSH
13329: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13333: LD_INT 3
13335: PPUSH
13336: LD_VAR 0 3
13340: PPUSH
13341: LD_INT 1
13343: PPUSH
13344: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13348: LD_INT 4
13350: PPUSH
13351: LD_VAR 0 3
13355: PPUSH
13356: LD_INT 1
13358: PPUSH
13359: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13363: LD_INT 5
13365: PPUSH
13366: LD_VAR 0 3
13370: PPUSH
13371: LD_INT 1
13373: PPUSH
13374: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13378: LD_INT 8
13380: PPUSH
13381: LD_VAR 0 3
13385: PPUSH
13386: LD_INT 1
13388: PPUSH
13389: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13393: LD_INT 66
13395: PPUSH
13396: LD_VAR 0 3
13400: PPUSH
13401: LD_INT 1
13403: PPUSH
13404: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13408: LD_INT 67
13410: PPUSH
13411: LD_VAR 0 3
13415: PPUSH
13416: LD_INT 1
13418: PPUSH
13419: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13423: LD_INT 21
13425: PPUSH
13426: LD_VAR 0 3
13430: PPUSH
13431: LD_INT 1
13433: PPUSH
13434: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13438: LD_INT 22
13440: PPUSH
13441: LD_VAR 0 3
13445: PPUSH
13446: LD_INT 1
13448: PPUSH
13449: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13453: LD_INT 19
13455: PPUSH
13456: LD_VAR 0 3
13460: PPUSH
13461: LD_INT 1
13463: PPUSH
13464: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13468: LD_INT 26
13470: PPUSH
13471: LD_VAR 0 3
13475: PPUSH
13476: LD_INT 1
13478: PPUSH
13479: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13483: LD_INT 54
13485: PPUSH
13486: LD_VAR 0 3
13490: PPUSH
13491: LD_INT 1
13493: PPUSH
13494: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13498: LD_INT 55
13500: PPUSH
13501: LD_VAR 0 3
13505: PPUSH
13506: LD_INT 1
13508: PPUSH
13509: CALL_OW 322
// for i = 0 to 39 do
13513: LD_ADDR_VAR 0 4
13517: PUSH
13518: DOUBLE
13519: LD_INT 0
13521: DEC
13522: ST_TO_ADDR
13523: LD_INT 39
13525: PUSH
13526: FOR_TO
13527: IFFALSE 13548
// SetRestrict ( i , side , true ) ;
13529: LD_VAR 0 4
13533: PPUSH
13534: LD_VAR 0 3
13538: PPUSH
13539: LD_INT 1
13541: PPUSH
13542: CALL_OW 324
13546: GO 13526
13548: POP
13549: POP
// end ; else
13550: GO 13627
13552: POP
// begin for i = 1 to 73 do
13553: LD_ADDR_VAR 0 4
13557: PUSH
13558: DOUBLE
13559: LD_INT 1
13561: DEC
13562: ST_TO_ADDR
13563: LD_INT 73
13565: PUSH
13566: FOR_TO
13567: IFFALSE 13588
// SetTech ( i , side , state_enabled ) ;
13569: LD_VAR 0 4
13573: PPUSH
13574: LD_VAR 0 3
13578: PPUSH
13579: LD_INT 1
13581: PPUSH
13582: CALL_OW 322
13586: GO 13566
13588: POP
13589: POP
// for i = 0 to 39 do
13590: LD_ADDR_VAR 0 4
13594: PUSH
13595: DOUBLE
13596: LD_INT 0
13598: DEC
13599: ST_TO_ADDR
13600: LD_INT 39
13602: PUSH
13603: FOR_TO
13604: IFFALSE 13625
// SetRestrict ( i , side , true ) ;
13606: LD_VAR 0 4
13610: PPUSH
13611: LD_VAR 0 3
13615: PPUSH
13616: LD_INT 1
13618: PPUSH
13619: CALL_OW 324
13623: GO 13603
13625: POP
13626: POP
// end ; end ; end ;
13627: GO 9632
13629: POP
13630: POP
// end ; end_of_file
13631: LD_VAR 0 2
13635: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13636: LD_INT 0
13638: PPUSH
13639: PPUSH
13640: PPUSH
13641: PPUSH
13642: PPUSH
13643: PPUSH
13644: PPUSH
13645: PPUSH
13646: PPUSH
// for i := 1 to 8 do
13647: LD_ADDR_VAR 0 2
13651: PUSH
13652: DOUBLE
13653: LD_INT 1
13655: DEC
13656: ST_TO_ADDR
13657: LD_INT 8
13659: PUSH
13660: FOR_TO
13661: IFFALSE 14045
// begin if Side_Positions [ i ] then
13663: LD_EXP 34
13667: PUSH
13668: LD_VAR 0 2
13672: ARRAY
13673: IFFALSE 14043
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13675: LD_ADDR_VAR 0 7
13679: PUSH
13680: LD_INT 22
13682: PUSH
13683: LD_VAR 0 2
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 21
13694: PUSH
13695: LD_INT 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PPUSH
13706: CALL_OW 69
13710: PUSH
13711: LD_INT 0
13713: PLUS
13714: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13715: LD_ADDR_VAR 0 9
13719: PUSH
13720: LD_INT 22
13722: PUSH
13723: LD_VAR 0 2
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 2
13734: PUSH
13735: LD_INT 30
13737: PUSH
13738: LD_INT 0
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: LD_INT 30
13747: PUSH
13748: LD_INT 1
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PPUSH
13764: CALL_OW 69
13768: ST_TO_ADDR
// crates := 0 ;
13769: LD_ADDR_VAR 0 4
13773: PUSH
13774: LD_INT 0
13776: ST_TO_ADDR
// oil := 0 ;
13777: LD_ADDR_VAR 0 5
13781: PUSH
13782: LD_INT 0
13784: ST_TO_ADDR
// sib := 0 ;
13785: LD_ADDR_VAR 0 6
13789: PUSH
13790: LD_INT 0
13792: ST_TO_ADDR
// if bases then
13793: LD_VAR 0 9
13797: IFFALSE 13903
// begin for j in bases do
13799: LD_ADDR_VAR 0 3
13803: PUSH
13804: LD_VAR 0 9
13808: PUSH
13809: FOR_IN
13810: IFFALSE 13901
// begin base := GetBase ( j ) ;
13812: LD_ADDR_VAR 0 8
13816: PUSH
13817: LD_VAR 0 3
13821: PPUSH
13822: CALL_OW 274
13826: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13827: LD_ADDR_VAR 0 4
13831: PUSH
13832: LD_VAR 0 4
13836: PUSH
13837: LD_VAR 0 8
13841: PPUSH
13842: LD_INT 1
13844: PPUSH
13845: CALL_OW 275
13849: PLUS
13850: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13851: LD_ADDR_VAR 0 5
13855: PUSH
13856: LD_VAR 0 5
13860: PUSH
13861: LD_VAR 0 8
13865: PPUSH
13866: LD_INT 2
13868: PPUSH
13869: CALL_OW 275
13873: PLUS
13874: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13875: LD_ADDR_VAR 0 6
13879: PUSH
13880: LD_VAR 0 6
13884: PUSH
13885: LD_VAR 0 8
13889: PPUSH
13890: LD_INT 3
13892: PPUSH
13893: CALL_OW 275
13897: PLUS
13898: ST_TO_ADDR
// end ;
13899: GO 13809
13901: POP
13902: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13903: LD_STRING setSpecText(
13905: PUSH
13906: LD_VAR 0 2
13910: STR
13911: PUSH
13912: LD_STRING ,
13914: STR
13915: PUSH
13916: LD_INT 2
13918: STR
13919: PUSH
13920: LD_STRING ,
13922: STR
13923: PUSH
13924: LD_VAR 0 4
13928: STR
13929: PUSH
13930: LD_STRING )
13932: STR
13933: PPUSH
13934: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13938: LD_STRING setSpecText(
13940: PUSH
13941: LD_VAR 0 2
13945: STR
13946: PUSH
13947: LD_STRING ,
13949: STR
13950: PUSH
13951: LD_INT 3
13953: STR
13954: PUSH
13955: LD_STRING ,
13957: STR
13958: PUSH
13959: LD_VAR 0 5
13963: STR
13964: PUSH
13965: LD_STRING )
13967: STR
13968: PPUSH
13969: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13973: LD_STRING setSpecText(
13975: PUSH
13976: LD_VAR 0 2
13980: STR
13981: PUSH
13982: LD_STRING ,
13984: STR
13985: PUSH
13986: LD_INT 4
13988: STR
13989: PUSH
13990: LD_STRING ,
13992: STR
13993: PUSH
13994: LD_VAR 0 6
13998: STR
13999: PUSH
14000: LD_STRING )
14002: STR
14003: PPUSH
14004: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14008: LD_STRING setSpecText(
14010: PUSH
14011: LD_VAR 0 2
14015: STR
14016: PUSH
14017: LD_STRING ,
14019: STR
14020: PUSH
14021: LD_INT 5
14023: STR
14024: PUSH
14025: LD_STRING ,
14027: STR
14028: PUSH
14029: LD_VAR 0 7
14033: STR
14034: PUSH
14035: LD_STRING )
14037: STR
14038: PPUSH
14039: CALL_OW 559
// end ; end ;
14043: GO 13660
14045: POP
14046: POP
// end ;
14047: LD_VAR 0 1
14051: RET
// every 0 0$1 do
14052: GO 14054
14054: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14055: LD_STRING setSpecLogoNumber(
14057: PUSH
14058: LD_INT 2
14060: STR
14061: PUSH
14062: LD_STRING ,
14064: STR
14065: PUSH
14066: LD_INT 1
14068: STR
14069: PUSH
14070: LD_STRING )
14072: STR
14073: PPUSH
14074: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14078: LD_STRING setSpecLogoNumber(
14080: PUSH
14081: LD_INT 3
14083: STR
14084: PUSH
14085: LD_STRING ,
14087: STR
14088: PUSH
14089: LD_INT 2
14091: STR
14092: PUSH
14093: LD_STRING )
14095: STR
14096: PPUSH
14097: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14101: LD_STRING setSpecLogoNumber(
14103: PUSH
14104: LD_INT 4
14106: STR
14107: PUSH
14108: LD_STRING ,
14110: STR
14111: PUSH
14112: LD_INT 3
14114: STR
14115: PUSH
14116: LD_STRING )
14118: STR
14119: PPUSH
14120: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14124: LD_STRING setSpecLogoNumber(
14126: PUSH
14127: LD_INT 5
14129: STR
14130: PUSH
14131: LD_STRING ,
14133: STR
14134: PUSH
14135: LD_INT 4
14137: STR
14138: PUSH
14139: LD_STRING )
14141: STR
14142: PPUSH
14143: CALL_OW 559
// end ;
14147: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14148: LD_INT 2
14150: PUSH
14151: LD_INT 30
14153: PUSH
14154: LD_INT 0
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 30
14163: PUSH
14164: LD_INT 1
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: PPUSH
14176: CALL_OW 69
14180: IFFALSE 14190
14182: GO 14184
14184: DISABLE
// begin enable ;
14185: ENABLE
// UpdateSpectatorBar ;
14186: CALL 13636 0 0
// end ; end_of_file
14190: END
// var respawn , inqueue ; export function init_respawning ; begin
14191: LD_INT 0
14193: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14194: LD_ADDR_LOC 18
14198: PUSH
14199: LD_INT 1
14201: PPUSH
14202: LD_INT 8
14204: PPUSH
14205: CALL_OW 12
14209: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14210: LD_ADDR_LOC 19
14214: PUSH
14215: LD_INT 0
14217: PUSH
14218: LD_INT 0
14220: PUSH
14221: LD_INT 0
14223: PUSH
14224: LD_INT 0
14226: PUSH
14227: LD_INT 0
14229: PUSH
14230: LD_INT 0
14232: PUSH
14233: LD_INT 0
14235: PUSH
14236: LD_INT 0
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: ST_TO_ADDR
// end ;
14249: LD_VAR 0 1
14253: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14254: GO 14256
14256: DISABLE
14257: LD_INT 0
14259: PPUSH
14260: PPUSH
14261: PPUSH
// begin if respawning_time_max = 0 then
14262: LD_EXP 28
14266: PUSH
14267: LD_INT 0
14269: EQUAL
14270: IFFALSE 14274
// exit ;
14272: GO 14682
// if respawn = 8 then
14274: LD_LOC 18
14278: PUSH
14279: LD_INT 8
14281: EQUAL
14282: IFFALSE 14294
// respawn := 1 else
14284: LD_ADDR_LOC 18
14288: PUSH
14289: LD_INT 1
14291: ST_TO_ADDR
14292: GO 14308
// respawn := respawn + 1 ;
14294: LD_ADDR_LOC 18
14298: PUSH
14299: LD_LOC 18
14303: PUSH
14304: LD_INT 1
14306: PLUS
14307: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14308: LD_EXP 34
14312: PUSH
14313: LD_LOC 18
14317: ARRAY
14318: PUSH
14319: LD_LOC 19
14323: PUSH
14324: LD_LOC 18
14328: ARRAY
14329: NOT
14330: AND
14331: IFFALSE 14681
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14333: LD_ADDR_VAR 0 1
14337: PUSH
14338: LD_INT 21
14340: PUSH
14341: LD_INT 1
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 22
14350: PUSH
14351: LD_LOC 18
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 3
14362: PUSH
14363: LD_INT 23
14365: PUSH
14366: LD_INT 0
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: PPUSH
14379: CALL_OW 69
14383: ST_TO_ADDR
// if n < number_of_people then
14384: LD_VAR 0 1
14388: PUSH
14389: LD_EXP 19
14393: LESS
14394: IFFALSE 14678
// begin aktresp := respawn ;
14396: LD_ADDR_VAR 0 3
14400: PUSH
14401: LD_LOC 18
14405: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14406: LD_ADDR_LOC 19
14410: PUSH
14411: LD_LOC 19
14415: PPUSH
14416: LD_VAR 0 3
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 1
14428: ST_TO_ADDR
// enable ;
14429: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14430: LD_EXP 27
14434: PPUSH
14435: LD_EXP 28
14439: PPUSH
14440: CALL_OW 12
14444: PPUSH
14445: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14449: LD_ADDR_LOC 19
14453: PUSH
14454: LD_LOC 19
14458: PPUSH
14459: LD_VAR 0 3
14463: PPUSH
14464: LD_INT 0
14466: PPUSH
14467: CALL_OW 1
14471: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14472: LD_ADDR_VAR 0 2
14476: PUSH
14477: LD_INT 21
14479: PUSH
14480: LD_INT 3
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 2
14489: PUSH
14490: LD_INT 30
14492: PUSH
14493: LD_INT 0
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 30
14502: PUSH
14503: LD_INT 1
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: PUSH
14515: LD_INT 50
14517: PUSH
14518: EMPTY
14519: LIST
14520: PUSH
14521: LD_INT 22
14523: PUSH
14524: LD_VAR 0 3
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: PPUSH
14539: CALL_OW 69
14543: ST_TO_ADDR
// if dep = 0 then
14544: LD_VAR 0 2
14548: PUSH
14549: LD_INT 0
14551: EQUAL
14552: IFFALSE 14556
// exit ;
14554: GO 14682
// hc_name :=  ;
14556: LD_ADDR_OWVAR 26
14560: PUSH
14561: LD_STRING 
14563: ST_TO_ADDR
// hc_importance := 0 ;
14564: LD_ADDR_OWVAR 32
14568: PUSH
14569: LD_INT 0
14571: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14572: LD_INT 0
14574: PPUSH
14575: LD_INT 0
14577: PPUSH
14578: LD_EXP 20
14582: PUSH
14583: LD_INT 2
14585: DIV
14586: PPUSH
14587: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14591: LD_ADDR_OWVAR 21
14595: PUSH
14596: LD_EXP 35
14600: PUSH
14601: LD_VAR 0 3
14605: ARRAY
14606: ST_TO_ADDR
// uc_side := aktresp ;
14607: LD_ADDR_OWVAR 20
14611: PUSH
14612: LD_VAR 0 3
14616: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14617: LD_ADDR_VAR 0 2
14621: PUSH
14622: LD_VAR 0 2
14626: PUSH
14627: LD_INT 1
14629: PPUSH
14630: LD_VAR 0 2
14634: PPUSH
14635: CALL_OW 12
14639: ARRAY
14640: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14641: CALL_OW 44
14645: PPUSH
14646: LD_VAR 0 2
14650: PPUSH
14651: CALL_OW 250
14655: PPUSH
14656: LD_VAR 0 2
14660: PPUSH
14661: CALL_OW 251
14665: PPUSH
14666: LD_INT 7
14668: PPUSH
14669: LD_INT 1
14671: PPUSH
14672: CALL_OW 50
// end else
14676: GO 14679
// enable ;
14678: ENABLE
// end else
14679: GO 14682
// enable ;
14681: ENABLE
// end ;
14682: PPOPN 3
14684: END
