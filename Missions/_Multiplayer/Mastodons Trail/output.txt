// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime , def_Sheik , def_Mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , Sheik , Mastodont ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 18
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 36
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 33
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 37
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 35
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 34
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 18
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 2 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 2
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 36
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 33
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 37
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 35
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 34
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 38
 372: PUSH
 373: LD_EXP 33
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 621
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 1
 480: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 481: LD_ADDR_EXP 8
 485: PUSH
 486: LD_INT 10
 488: PPUSH
 489: CALL_OW 426
 493: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 494: LD_ADDR_EXP 9
 498: PUSH
 499: LD_INT 11
 501: PPUSH
 502: CALL_OW 426
 506: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_INT 12
 514: PPUSH
 515: CALL_OW 426
 519: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 520: LD_ADDR_EXP 11
 524: PUSH
 525: LD_INT 13
 527: PPUSH
 528: CALL_OW 426
 532: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 533: LD_ADDR_EXP 12
 537: PUSH
 538: LD_INT 14
 540: PPUSH
 541: CALL_OW 426
 545: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 546: LD_ADDR_EXP 13
 550: PUSH
 551: LD_INT 17
 553: PPUSH
 554: CALL_OW 426
 558: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 559: LD_ADDR_EXP 14
 563: PUSH
 564: LD_INT 20
 566: PPUSH
 567: CALL_OW 426
 571: ST_TO_ADDR
// def_Sheik = GetMultiplayerSetting ( 21 ) ;
 572: LD_ADDR_EXP 15
 576: PUSH
 577: LD_INT 21
 579: PPUSH
 580: CALL_OW 426
 584: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 585: LD_ADDR_VAR 0 3
 589: PUSH
 590: LD_INT 22
 592: PPUSH
 593: CALL_OW 426
 597: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 598: LD_ADDR_EXP 16
 602: PUSH
 603: LD_INT 23
 605: PPUSH
 606: CALL_OW 426
 610: ST_TO_ADDR
// def_win_rules = 0 ;
 611: LD_ADDR_EXP 32
 615: PUSH
 616: LD_INT 0
 618: ST_TO_ADDR
// end else
 619: GO 769
// begin Randomize ;
 621: CALL_OW 10
// def_base_level := 2 ;
 625: LD_ADDR_EXP 1
 629: PUSH
 630: LD_INT 2
 632: ST_TO_ADDR
// def_amount_of_people := 2 ;
 633: LD_ADDR_EXP 2
 637: PUSH
 638: LD_INT 2
 640: ST_TO_ADDR
// def_skill_level := 1 ;
 641: LD_ADDR_EXP 3
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
// def_starting_resources := 2 ;
 649: LD_ADDR_EXP 4
 653: PUSH
 654: LD_INT 2
 656: ST_TO_ADDR
// def_shipments_density := 50 ;
 657: LD_ADDR_EXP 5
 661: PUSH
 662: LD_INT 50
 664: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 665: LD_ADDR_EXP 6
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 673: LD_ADDR_EXP 7
 677: PUSH
 678: LD_INT 2
 680: ST_TO_ADDR
// def_shared_vision := 1 ;
 681: LD_ADDR_EXP 8
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_morale_flags := 1 ;
 689: LD_ADDR_EXP 9
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_siberite_detection := 1 ;
 697: LD_ADDR_EXP 10
 701: PUSH
 702: LD_INT 1
 704: ST_TO_ADDR
// def_people_respawning := 2 ;
 705: LD_ADDR_EXP 11
 709: PUSH
 710: LD_INT 2
 712: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 713: LD_ADDR_EXP 12
 717: PUSH
 718: LD_INT 3
 720: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 721: LD_ADDR_EXP 13
 725: PUSH
 726: LD_INT 2
 728: ST_TO_ADDR
// def_builduptime := 1 ;
 729: LD_ADDR_EXP 14
 733: PUSH
 734: LD_INT 1
 736: ST_TO_ADDR
// def_Sheik = 2 ;
 737: LD_ADDR_EXP 15
 741: PUSH
 742: LD_INT 2
 744: ST_TO_ADDR
// tech_level = 4 ;
 745: LD_ADDR_VAR 0 3
 749: PUSH
 750: LD_INT 4
 752: ST_TO_ADDR
// def_mastodont := 0 ;
 753: LD_ADDR_EXP 16
 757: PUSH
 758: LD_INT 0
 760: ST_TO_ADDR
// def_win_rules = 0 ;
 761: LD_ADDR_EXP 32
 765: PUSH
 766: LD_INT 0
 768: ST_TO_ADDR
// end ; if isSGUI then
 769: LD_OWVAR 83
 773: IFFALSE 781
// setMpTechs ( ) else
 775: CALL 9399 0 0
 779: GO 794
// SetMpTechLevel ( tech_level + 1 ) ;
 781: LD_VAR 0 3
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: CALL 9546 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 794: LD_ADDR_EXP 19
 798: PUSH
 799: LD_INT 0
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 1
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: LIST
 812: PUSH
 813: LD_EXP 1
 817: PUSH
 818: LD_INT 1
 820: PLUS
 821: ARRAY
 822: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 823: LD_ADDR_EXP 20
 827: PUSH
 828: LD_INT 0
 830: PUSH
 831: LD_INT 0
 833: PUSH
 834: LD_INT 3
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: PUSH
 842: LD_EXP 1
 846: PUSH
 847: LD_INT 1
 849: PLUS
 850: ARRAY
 851: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 852: LD_ADDR_EXP 21
 856: PUSH
 857: LD_INT 9
 859: PUSH
 860: LD_INT 12
 862: PUSH
 863: LD_INT 15
 865: PUSH
 866: LD_INT 24
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: LIST
 874: PUSH
 875: LD_EXP 2
 879: PUSH
 880: LD_INT 1
 882: PLUS
 883: ARRAY
 884: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 885: LD_ADDR_EXP 22
 889: PUSH
 890: LD_INT 2
 892: PUSH
 893: LD_INT 3
 895: PUSH
 896: LD_INT 4
 898: PUSH
 899: LD_INT 5
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: PUSH
 908: LD_EXP 3
 912: PUSH
 913: LD_INT 1
 915: PLUS
 916: ARRAY
 917: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 918: LD_ADDR_EXP 24
 922: PUSH
 923: LD_INT 0
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 0
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: LIST
 936: PUSH
 937: LD_INT 30
 939: PUSH
 940: LD_INT 0
 942: PUSH
 943: LD_INT 0
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: LIST
 950: PUSH
 951: LD_INT 50
 953: PUSH
 954: LD_INT 20
 956: PUSH
 957: LD_INT 0
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 80
 967: PUSH
 968: LD_INT 40
 970: PUSH
 971: LD_INT 20
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: LIST
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_EXP 4
 989: PUSH
 990: LD_INT 1
 992: PLUS
 993: ARRAY
 994: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 995: LD_ADDR_EXP 23
 999: PUSH
1000: LD_INT 10
1002: PUSH
1003: EMPTY
1004: LIST
1005: PUSH
1006: LD_INT 7
1008: PUSH
1009: LD_INT 14
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: LD_INT 12
1021: PUSH
1022: LD_INT 18
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: PUSH
1030: LD_INT 5
1032: PUSH
1033: LD_INT 10
1035: PUSH
1036: LD_INT 15
1038: PUSH
1039: LD_INT 20
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: PUSH
1054: LD_EXP 4
1058: PUSH
1059: LD_INT 1
1061: PLUS
1062: ARRAY
1063: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1064: LD_ADDR_EXP 25
1068: PUSH
1069: LD_INT 150
1071: PUSH
1072: LD_EXP 5
1076: PUSH
1077: LD_INT 1
1079: PLUS
1080: MINUS
1081: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1082: LD_ADDR_EXP 29
1086: PUSH
1087: LD_INT 0
1089: PUSH
1090: LD_INT 10500
1092: PUSH
1093: LD_INT 6300
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: PUSH
1101: LD_EXP 11
1105: PUSH
1106: LD_INT 1
1108: PLUS
1109: ARRAY
1110: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1111: LD_ADDR_EXP 30
1115: PUSH
1116: LD_INT 0
1118: PUSH
1119: LD_INT 31500
1121: PUSH
1122: LD_INT 10500
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: PUSH
1130: LD_EXP 11
1134: PUSH
1135: LD_INT 1
1137: PLUS
1138: ARRAY
1139: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1140: LD_ADDR_EXP 27
1144: PUSH
1145: LD_INT 0
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 3
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_EXP 12
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: ARRAY
1172: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1173: LD_ADDR_EXP 26
1177: PUSH
1178: LD_INT 1
1180: NEG
1181: PUSH
1182: LD_INT 350
1184: PUSH
1185: LD_INT 700
1187: PUSH
1188: LD_INT 1400
1190: PUSH
1191: LD_INT 0
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: LD_EXP 9
1205: PUSH
1206: LD_INT 1
1208: PLUS
1209: ARRAY
1210: ST_TO_ADDR
// battle_flags_id := [ ] ;
1211: LD_ADDR_EXP 46
1215: PUSH
1216: EMPTY
1217: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1218: LD_ADDR_EXP 31
1222: PUSH
1223: LD_INT 0
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: LD_INT 63000
1231: PUSH
1232: LD_INT 126000
1234: PUSH
1235: LD_INT 189000
1237: PUSH
1238: LD_INT 252000
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: PUSH
1249: LD_EXP 13
1253: PUSH
1254: LD_INT 1
1256: PLUS
1257: ARRAY
1258: ST_TO_ADDR
// Sheik := [ 0 , 1 , 2 ] [ def_Sheik + 1 ] ;
1259: LD_ADDR_EXP 47
1263: PUSH
1264: LD_INT 0
1266: PUSH
1267: LD_INT 1
1269: PUSH
1270: LD_INT 2
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PUSH
1278: LD_EXP 15
1282: PUSH
1283: LD_INT 1
1285: PLUS
1286: ARRAY
1287: ST_TO_ADDR
// Mastodont := 8 ;
1288: LD_ADDR_EXP 48
1292: PUSH
1293: LD_INT 8
1295: ST_TO_ADDR
// end ;
1296: LD_VAR 0 1
1300: RET
// function init_map ; var i , j ; begin
1301: LD_INT 0
1303: PPUSH
1304: PPUSH
1305: PPUSH
// normal_oil_deposits_locations := [ [ 61 , 60 ] , [ 105 , 67 ] , [ 106 , 43 ] , [ 220 , 10 ] , [ 188 , 284 ] , [ 278 , 241 ] , [ 277 , 204 ] , [ 320 , 220 ] ] ;
1306: LD_ADDR_EXP 42
1310: PUSH
1311: LD_INT 61
1313: PUSH
1314: LD_INT 60
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 105
1323: PUSH
1324: LD_INT 67
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 106
1333: PUSH
1334: LD_INT 43
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: LD_INT 220
1343: PUSH
1344: LD_INT 10
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: PUSH
1351: LD_INT 188
1353: PUSH
1354: LD_INT 284
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PUSH
1361: LD_INT 278
1363: PUSH
1364: LD_INT 241
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 277
1373: PUSH
1374: LD_INT 204
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: PUSH
1381: LD_INT 320
1383: PUSH
1384: LD_INT 220
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 36 , 57 ] , [ 98 , 53 ] , [ 106 , 12 ] , [ 247 , 20 ] , [ 139 , 263 ] , [ 280 , 280 ] , [ 274 , 215 ] , [ 345 , 223 ] ] ;
1401: LD_ADDR_EXP 43
1405: PUSH
1406: LD_INT 36
1408: PUSH
1409: LD_INT 57
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PUSH
1416: LD_INT 98
1418: PUSH
1419: LD_INT 53
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: PUSH
1426: LD_INT 106
1428: PUSH
1429: LD_INT 12
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: PUSH
1436: LD_INT 247
1438: PUSH
1439: LD_INT 20
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: PUSH
1446: LD_INT 139
1448: PUSH
1449: LD_INT 263
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 280
1458: PUSH
1459: LD_INT 280
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: LD_INT 274
1468: PUSH
1469: LD_INT 215
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 345
1478: PUSH
1479: LD_INT 223
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 52 , 91 ] , [ 129 , 74 ] , [ 93 , 16 ] , [ 244 , 38 ] , [ 146 , 250 ] , [ 300 , 276 ] , [ 253 , 200 ] , [ 330 , 190 ] ] ;
1496: LD_ADDR_EXP 44
1500: PUSH
1501: LD_INT 52
1503: PUSH
1504: LD_INT 91
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PUSH
1511: LD_INT 129
1513: PUSH
1514: LD_INT 74
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 93
1523: PUSH
1524: LD_INT 16
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 244
1533: PUSH
1534: LD_INT 38
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PUSH
1541: LD_INT 146
1543: PUSH
1544: LD_INT 250
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: PUSH
1551: LD_INT 300
1553: PUSH
1554: LD_INT 276
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 253
1563: PUSH
1564: LD_INT 200
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: LD_INT 330
1573: PUSH
1574: LD_INT 190
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 88 , 88 ] , [ 117 , 103 ] , [ 137 , 45 ] , [ 193 , 3 ] , [ 202 , 296 ] , [ 247 , 239 ] , [ 270 , 169 ] , [ 293 , 186 ] ] ;
1591: LD_ADDR_EXP 45
1595: PUSH
1596: LD_INT 88
1598: PUSH
1599: LD_INT 88
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: LD_INT 117
1608: PUSH
1609: LD_INT 103
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 137
1618: PUSH
1619: LD_INT 45
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 193
1628: PUSH
1629: LD_INT 3
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 202
1638: PUSH
1639: LD_INT 296
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: LD_INT 247
1648: PUSH
1649: LD_INT 239
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 270
1658: PUSH
1659: LD_INT 169
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: LD_INT 293
1668: PUSH
1669: LD_INT 186
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: ST_TO_ADDR
// depot_def := [ [ 58 , 73 , 2 ] , [ 116 , 79 , 3 ] , [ 110 , 30 , 1 ] , [ 223 , 25 , 3 ] , [ 168 , 266 , 0 ] , [ 276 , 256 , 4 ] , [ 262 , 189 , 0 ] , [ 324 , 203 , 5 ] ] ;
1686: LD_ADDR_EXP 39
1690: PUSH
1691: LD_INT 58
1693: PUSH
1694: LD_INT 73
1696: PUSH
1697: LD_INT 2
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 116
1707: PUSH
1708: LD_INT 79
1710: PUSH
1711: LD_INT 3
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 110
1721: PUSH
1722: LD_INT 30
1724: PUSH
1725: LD_INT 1
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 223
1735: PUSH
1736: LD_INT 25
1738: PUSH
1739: LD_INT 3
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 168
1749: PUSH
1750: LD_INT 266
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 276
1763: PUSH
1764: LD_INT 256
1766: PUSH
1767: LD_INT 4
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: LD_INT 262
1777: PUSH
1778: LD_INT 189
1780: PUSH
1781: LD_INT 0
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: LIST
1788: PUSH
1789: LD_INT 324
1791: PUSH
1792: LD_INT 203
1794: PUSH
1795: LD_INT 5
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: LIST
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: ST_TO_ADDR
// for i in depot_def do
1813: LD_ADDR_VAR 0 2
1817: PUSH
1818: LD_EXP 39
1822: PUSH
1823: FOR_IN
1824: IFFALSE 1900
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1826: LD_ADDR_EXP 41
1830: PUSH
1831: LD_EXP 41
1835: PUSH
1836: LD_VAR 0 2
1840: PUSH
1841: LD_INT 1
1843: ARRAY
1844: PPUSH
1845: LD_VAR 0 2
1849: PUSH
1850: LD_INT 3
1852: ARRAY
1853: PPUSH
1854: LD_INT 4
1856: NEG
1857: PPUSH
1858: CALL_OW 272
1862: PUSH
1863: LD_VAR 0 2
1867: PUSH
1868: LD_INT 2
1870: ARRAY
1871: PPUSH
1872: LD_VAR 0 2
1876: PUSH
1877: LD_INT 3
1879: ARRAY
1880: PPUSH
1881: LD_INT 4
1883: NEG
1884: PPUSH
1885: CALL_OW 273
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: ADD
1897: ST_TO_ADDR
1898: GO 1823
1900: POP
1901: POP
// breastworks_def := [ [ [ 72 , 97 , 5 ] , [ 82 , 85 , 4 ] , [ 66 , 66 , 4 ] ] , [ [ 119 , 99 , 0 ] , [ 140 , 98 , 5 ] , [ 126 , 66 , 4 ] ] , [ [ 113 , 16 , 4 ] , [ 130 , 38 , 5 ] , [ 111 , 42 , 0 ] ] , [ [ 218 , 36 , 0 ] , [ 240 , 40 , 5 ] , [ 205 , 24 , 1 ] ] , [ [ 174 , 250 , 3 ] , [ 151 , 248 , 2 ] , [ 193 , 272 , 4 ] ] , [ [ 252 , 246 , 1 ] , [ 263 , 267 , 1 ] , [ 270 , 238 , 3 ] ] , [ [ 240 , 173 , 2 ] , [ 261 , 173 , 2 ] , [ 256 , 208 , 1 ] ] , [ [ 311 , 181 , 2 ] , [ 298 , 190 , 2 ] , [ 312 , 212 , 1 ] ] ] ;
1902: LD_ADDR_EXP 40
1906: PUSH
1907: LD_INT 72
1909: PUSH
1910: LD_INT 97
1912: PUSH
1913: LD_INT 5
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 82
1923: PUSH
1924: LD_INT 85
1926: PUSH
1927: LD_INT 4
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 66
1937: PUSH
1938: LD_INT 66
1940: PUSH
1941: LD_INT 4
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: LIST
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 119
1956: PUSH
1957: LD_INT 99
1959: PUSH
1960: LD_INT 0
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 140
1970: PUSH
1971: LD_INT 98
1973: PUSH
1974: LD_INT 5
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 126
1984: PUSH
1985: LD_INT 66
1987: PUSH
1988: LD_INT 4
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 113
2003: PUSH
2004: LD_INT 16
2006: PUSH
2007: LD_INT 4
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 130
2017: PUSH
2018: LD_INT 38
2020: PUSH
2021: LD_INT 5
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 111
2031: PUSH
2032: LD_INT 42
2034: PUSH
2035: LD_INT 0
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 218
2050: PUSH
2051: LD_INT 36
2053: PUSH
2054: LD_INT 0
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 240
2064: PUSH
2065: LD_INT 40
2067: PUSH
2068: LD_INT 5
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: LIST
2075: PUSH
2076: LD_INT 205
2078: PUSH
2079: LD_INT 24
2081: PUSH
2082: LD_INT 1
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 174
2097: PUSH
2098: LD_INT 250
2100: PUSH
2101: LD_INT 3
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 151
2111: PUSH
2112: LD_INT 248
2114: PUSH
2115: LD_INT 2
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 193
2125: PUSH
2126: LD_INT 272
2128: PUSH
2129: LD_INT 4
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: LD_INT 252
2144: PUSH
2145: LD_INT 246
2147: PUSH
2148: LD_INT 1
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: PUSH
2156: LD_INT 263
2158: PUSH
2159: LD_INT 267
2161: PUSH
2162: LD_INT 1
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: PUSH
2170: LD_INT 270
2172: PUSH
2173: LD_INT 238
2175: PUSH
2176: LD_INT 3
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: LIST
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: LIST
2188: PUSH
2189: LD_INT 240
2191: PUSH
2192: LD_INT 173
2194: PUSH
2195: LD_INT 2
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 261
2205: PUSH
2206: LD_INT 173
2208: PUSH
2209: LD_INT 2
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: LIST
2216: PUSH
2217: LD_INT 256
2219: PUSH
2220: LD_INT 208
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: LIST
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 311
2238: PUSH
2239: LD_INT 181
2241: PUSH
2242: LD_INT 2
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 298
2252: PUSH
2253: LD_INT 190
2255: PUSH
2256: LD_INT 2
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: LIST
2263: PUSH
2264: LD_INT 312
2266: PUSH
2267: LD_INT 212
2269: PUSH
2270: LD_INT 1
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: LIST
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: LIST
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: ST_TO_ADDR
// for i = 1 to Side_Positions do
2293: LD_ADDR_VAR 0 2
2297: PUSH
2298: DOUBLE
2299: LD_INT 1
2301: DEC
2302: ST_TO_ADDR
2303: LD_EXP 36
2307: PUSH
2308: FOR_TO
2309: IFFALSE 2408
// begin if not Side_Positions [ i ] then
2311: LD_EXP 36
2315: PUSH
2316: LD_VAR 0 2
2320: ARRAY
2321: NOT
2322: IFFALSE 2326
// continue ;
2324: GO 2308
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2326: LD_EXP 42
2330: PUSH
2331: LD_VAR 0 2
2335: ARRAY
2336: PUSH
2337: LD_INT 1
2339: ARRAY
2340: PPUSH
2341: LD_EXP 42
2345: PUSH
2346: LD_VAR 0 2
2350: ARRAY
2351: PUSH
2352: LD_INT 2
2354: ARRAY
2355: PPUSH
2356: LD_INT 2
2358: PPUSH
2359: CALL_OW 62
// if def_extra_oil_deposits then
2363: LD_EXP 6
2367: IFFALSE 2406
// CreateDepositXY ( extra_oil_deposits_locations [ i ] [ 1 ] , extra_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2369: LD_EXP 43
2373: PUSH
2374: LD_VAR 0 2
2378: ARRAY
2379: PUSH
2380: LD_INT 1
2382: ARRAY
2383: PPUSH
2384: LD_EXP 43
2388: PUSH
2389: LD_VAR 0 2
2393: ARRAY
2394: PUSH
2395: LD_INT 2
2397: ARRAY
2398: PPUSH
2399: LD_INT 2
2401: PPUSH
2402: CALL_OW 62
// end ;
2406: GO 2308
2408: POP
2409: POP
// if def_extra_sib_deposits then
2410: LD_EXP 7
2414: IFFALSE 2537
// for i = 1 to Side_Positions do
2416: LD_ADDR_VAR 0 2
2420: PUSH
2421: DOUBLE
2422: LD_INT 1
2424: DEC
2425: ST_TO_ADDR
2426: LD_EXP 36
2430: PUSH
2431: FOR_TO
2432: IFFALSE 2535
// begin if not Side_Positions [ i ] then
2434: LD_EXP 36
2438: PUSH
2439: LD_VAR 0 2
2443: ARRAY
2444: NOT
2445: IFFALSE 2449
// continue ;
2447: GO 2431
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2449: LD_EXP 44
2453: PUSH
2454: LD_VAR 0 2
2458: ARRAY
2459: PUSH
2460: LD_INT 1
2462: ARRAY
2463: PPUSH
2464: LD_EXP 44
2468: PUSH
2469: LD_VAR 0 2
2473: ARRAY
2474: PUSH
2475: LD_INT 2
2477: ARRAY
2478: PPUSH
2479: LD_INT 3
2481: PPUSH
2482: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2486: LD_EXP 7
2490: PUSH
2491: LD_INT 2
2493: EQUAL
2494: IFFALSE 2533
// CreateDepositXY ( extra_sib_deposits_locations [ i ] [ 1 ] , extra_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2496: LD_EXP 45
2500: PUSH
2501: LD_VAR 0 2
2505: ARRAY
2506: PUSH
2507: LD_INT 1
2509: ARRAY
2510: PPUSH
2511: LD_EXP 45
2515: PUSH
2516: LD_VAR 0 2
2520: ARRAY
2521: PUSH
2522: LD_INT 2
2524: ARRAY
2525: PPUSH
2526: LD_INT 3
2528: PPUSH
2529: CALL_OW 62
// end ;
2533: GO 2431
2535: POP
2536: POP
// end ;
2537: LD_VAR 0 1
2541: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2542: LD_INT 0
2544: PPUSH
2545: PPUSH
2546: PPUSH
// if not Team_Game then
2547: LD_EXP 38
2551: NOT
2552: IFFALSE 2650
// begin for i = 1 to 8 do
2554: LD_ADDR_VAR 0 2
2558: PUSH
2559: DOUBLE
2560: LD_INT 1
2562: DEC
2563: ST_TO_ADDR
2564: LD_INT 8
2566: PUSH
2567: FOR_TO
2568: IFFALSE 2646
// for j = 1 to 8 do
2570: LD_ADDR_VAR 0 3
2574: PUSH
2575: DOUBLE
2576: LD_INT 1
2578: DEC
2579: ST_TO_ADDR
2580: LD_INT 8
2582: PUSH
2583: FOR_TO
2584: IFFALSE 2642
// if i <> j then
2586: LD_VAR 0 2
2590: PUSH
2591: LD_VAR 0 3
2595: NONEQUAL
2596: IFFALSE 2620
// SetAttitude ( i , j , att_neutral , true ) else
2598: LD_VAR 0 2
2602: PPUSH
2603: LD_VAR 0 3
2607: PPUSH
2608: LD_INT 0
2610: PPUSH
2611: LD_INT 1
2613: PPUSH
2614: CALL_OW 80
2618: GO 2640
// SetAttitude ( i , j , att_friend , true ) ;
2620: LD_VAR 0 2
2624: PPUSH
2625: LD_VAR 0 3
2629: PPUSH
2630: LD_INT 1
2632: PPUSH
2633: LD_INT 1
2635: PPUSH
2636: CALL_OW 80
2640: GO 2583
2642: POP
2643: POP
2644: GO 2567
2646: POP
2647: POP
// end else
2648: GO 2825
// begin if def_shared_vision then
2650: LD_EXP 8
2654: IFFALSE 2719
// begin for i in Teams do
2656: LD_ADDR_VAR 0 2
2660: PUSH
2661: LD_EXP 34
2665: PUSH
2666: FOR_IN
2667: IFFALSE 2717
// for j = 2 to i do
2669: LD_ADDR_VAR 0 3
2673: PUSH
2674: DOUBLE
2675: LD_INT 2
2677: DEC
2678: ST_TO_ADDR
2679: LD_VAR 0 2
2683: PUSH
2684: FOR_TO
2685: IFFALSE 2713
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2687: LD_VAR 0 2
2691: PUSH
2692: LD_VAR 0 3
2696: ARRAY
2697: PPUSH
2698: LD_VAR 0 2
2702: PUSH
2703: LD_INT 1
2705: ARRAY
2706: PPUSH
2707: CALL_OW 343
2711: GO 2684
2713: POP
2714: POP
2715: GO 2666
2717: POP
2718: POP
// end ; for i = 1 to 8 do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_INT 8
2731: PUSH
2732: FOR_TO
2733: IFFALSE 2823
// for j = 1 to 8 do
2735: LD_ADDR_VAR 0 3
2739: PUSH
2740: DOUBLE
2741: LD_INT 1
2743: DEC
2744: ST_TO_ADDR
2745: LD_INT 8
2747: PUSH
2748: FOR_TO
2749: IFFALSE 2819
// if Side_Teams [ i ] = Side_Teams [ j ] then
2751: LD_EXP 33
2755: PUSH
2756: LD_VAR 0 2
2760: ARRAY
2761: PUSH
2762: LD_EXP 33
2766: PUSH
2767: LD_VAR 0 3
2771: ARRAY
2772: EQUAL
2773: IFFALSE 2797
// SetAttitude ( i , j , att_friend , true ) else
2775: LD_VAR 0 2
2779: PPUSH
2780: LD_VAR 0 3
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: CALL_OW 80
2795: GO 2817
// SetAttitude ( i , j , att_enemy , true ) ;
2797: LD_VAR 0 2
2801: PPUSH
2802: LD_VAR 0 3
2806: PPUSH
2807: LD_INT 2
2809: PPUSH
2810: LD_INT 1
2812: PPUSH
2813: CALL_OW 80
2817: GO 2748
2819: POP
2820: POP
2821: GO 2732
2823: POP
2824: POP
// end ; end ;
2825: LD_VAR 0 1
2829: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2830: LD_INT 0
2832: PPUSH
2833: PPUSH
2834: PPUSH
2835: PPUSH
// result := [ ] ;
2836: LD_ADDR_VAR 0 7
2840: PUSH
2841: EMPTY
2842: ST_TO_ADDR
// for i := 1 to count do
2843: LD_ADDR_VAR 0 8
2847: PUSH
2848: DOUBLE
2849: LD_INT 1
2851: DEC
2852: ST_TO_ADDR
2853: LD_VAR 0 1
2857: PUSH
2858: FOR_TO
2859: IFFALSE 3386
// begin uc_direction := Rand ( 0 , 5 ) ;
2861: LD_ADDR_OWVAR 24
2865: PUSH
2866: LD_INT 0
2868: PPUSH
2869: LD_INT 5
2871: PPUSH
2872: CALL_OW 12
2876: ST_TO_ADDR
// if commander then
2877: LD_LOC 1
2881: IFFALSE 3036
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2883: LD_ADDR_OWVAR 26
2887: PUSH
2888: LD_OWVAR 19
2892: PUSH
2893: LD_OWVAR 20
2897: ARRAY
2898: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2899: LD_INT 1
2901: PPUSH
2902: LD_INT 2
2904: PPUSH
2905: CALL_OW 12
2909: PPUSH
2910: LD_VAR 0 2
2914: PPUSH
2915: LD_EXP 22
2919: PUSH
2920: LD_INT 2
2922: PLUS
2923: PPUSH
2924: CALL_OW 380
// hc_importance := 105 ;
2928: LD_ADDR_OWVAR 32
2932: PUSH
2933: LD_INT 105
2935: ST_TO_ADDR
// commander := false ;
2936: LD_ADDR_LOC 1
2940: PUSH
2941: LD_INT 0
2943: ST_TO_ADDR
// if Multiplayer then
2944: LD_OWVAR 4
2948: IFFALSE 3034
// begin if Sheik = 1 and uc_nation = 2 then
2950: LD_EXP 47
2954: PUSH
2955: LD_INT 1
2957: EQUAL
2958: PUSH
2959: LD_OWVAR 21
2963: PUSH
2964: LD_INT 2
2966: EQUAL
2967: AND
2968: IFFALSE 2996
// begin hc_gallery :=  ;
2970: LD_ADDR_OWVAR 33
2974: PUSH
2975: LD_STRING 
2977: ST_TO_ADDR
// hc_class := class_desert_warior ;
2978: LD_ADDR_OWVAR 28
2982: PUSH
2983: LD_INT 11
2985: ST_TO_ADDR
// hc_sex := sex_male ;
2986: LD_ADDR_OWVAR 27
2990: PUSH
2991: LD_INT 1
2993: ST_TO_ADDR
// end else
2994: GO 3034
// begin hc_gallery := MULTIAVATARS ;
2996: LD_ADDR_OWVAR 33
3000: PUSH
3001: LD_STRING MULTIAVATARS
3003: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3004: LD_ADDR_OWVAR 34
3008: PUSH
3009: LD_OWVAR 20
3013: PPUSH
3014: CALL_OW 525
3018: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3019: LD_ADDR_OWVAR 27
3023: PUSH
3024: LD_OWVAR 20
3028: PPUSH
3029: CALL_OW 526
3033: ST_TO_ADDR
// end ; end ; end else
3034: GO 3162
// begin hc_name :=  ;
3036: LD_ADDR_OWVAR 26
3040: PUSH
3041: LD_STRING 
3043: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3044: LD_INT 1
3046: PPUSH
3047: LD_INT 2
3049: PPUSH
3050: CALL_OW 12
3054: PPUSH
3055: LD_VAR 0 2
3059: PPUSH
3060: LD_EXP 22
3064: PPUSH
3065: CALL_OW 380
// hc_importance := 0 ;
3069: LD_ADDR_OWVAR 32
3073: PUSH
3074: LD_INT 0
3076: ST_TO_ADDR
// if cl = class_desert_warior then
3077: LD_VAR 0 2
3081: PUSH
3082: LD_INT 11
3084: EQUAL
3085: IFFALSE 3140
// begin commander := true ;
3087: LD_ADDR_LOC 1
3091: PUSH
3092: LD_INT 1
3094: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3095: LD_INT 1
3097: PPUSH
3098: LD_INT 2
3100: PPUSH
3101: CALL_OW 12
3105: PPUSH
3106: LD_VAR 0 2
3110: PPUSH
3111: LD_EXP 22
3115: PUSH
3116: LD_INT 2
3118: PLUS
3119: PPUSH
3120: CALL_OW 380
// hc_importance := 105 ;
3124: LD_ADDR_OWVAR 32
3128: PUSH
3129: LD_INT 105
3131: ST_TO_ADDR
// commander := false ;
3132: LD_ADDR_LOC 1
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// end ; if Multiplayer then
3140: LD_OWVAR 4
3144: IFFALSE 3162
// begin hc_gallery :=  ;
3146: LD_ADDR_OWVAR 33
3150: PUSH
3151: LD_STRING 
3153: ST_TO_ADDR
// hc_face_number := 0 ;
3154: LD_ADDR_OWVAR 34
3158: PUSH
3159: LD_INT 0
3161: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3162: LD_ADDR_VAR 0 10
3166: PUSH
3167: CALL_OW 44
3171: ST_TO_ADDR
// if global_defined then
3172: LD_LOC 3
3176: IFFALSE 3316
// begin if ( cl = class_soldier ) then
3178: LD_VAR 0 2
3182: PUSH
3183: LD_INT 1
3185: EQUAL
3186: IFFALSE 3206
// j := i + soldiers_created else
3188: LD_ADDR_VAR 0 9
3192: PUSH
3193: LD_VAR 0 8
3197: PUSH
3198: LD_LOC 4
3202: PLUS
3203: ST_TO_ADDR
3204: GO 3216
// j := i ;
3206: LD_ADDR_VAR 0 9
3210: PUSH
3211: LD_VAR 0 8
3215: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3216: LD_LOC 2
3220: PUSH
3221: LD_VAR 0 2
3225: ARRAY
3226: PUSH
3227: LD_VAR 0 9
3231: ARRAY
3232: PPUSH
3233: LD_VAR 0 10
3237: PPUSH
3238: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3242: LD_VAR 0 10
3246: PPUSH
3247: LD_INT 2
3249: PPUSH
3250: LD_LOC 2
3254: PUSH
3255: LD_VAR 0 2
3259: ARRAY
3260: PUSH
3261: LD_VAR 0 9
3265: ARRAY
3266: PPUSH
3267: LD_INT 2
3269: PPUSH
3270: CALL_OW 260
3274: PPUSH
3275: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3279: LD_VAR 0 10
3283: PPUSH
3284: LD_INT 1
3286: PPUSH
3287: LD_LOC 2
3291: PUSH
3292: LD_VAR 0 2
3296: ARRAY
3297: PUSH
3298: LD_VAR 0 9
3302: ARRAY
3303: PPUSH
3304: LD_INT 1
3306: PPUSH
3307: CALL_OW 260
3311: PPUSH
3312: CALL_OW 239
// end ; if building then
3316: LD_VAR 0 6
3320: IFFALSE 3338
// PlaceHumanInUnit ( un , building ) else
3322: LD_VAR 0 10
3326: PPUSH
3327: LD_VAR 0 6
3331: PPUSH
3332: CALL_OW 52
3336: GO 3365
// PlaceUnitXYR ( un , x , y , r , false ) ;
3338: LD_VAR 0 10
3342: PPUSH
3343: LD_VAR 0 3
3347: PPUSH
3348: LD_VAR 0 4
3352: PPUSH
3353: LD_VAR 0 5
3357: PPUSH
3358: LD_INT 0
3360: PPUSH
3361: CALL_OW 50
// result := result ^ [ un ] ;
3365: LD_ADDR_VAR 0 7
3369: PUSH
3370: LD_VAR 0 7
3374: PUSH
3375: LD_VAR 0 10
3379: PUSH
3380: EMPTY
3381: LIST
3382: ADD
3383: ST_TO_ADDR
// end ;
3384: GO 2858
3386: POP
3387: POP
// if not global_defined then
3388: LD_LOC 3
3392: NOT
3393: IFFALSE 3471
// if ( global_units >= cl ) then
3395: LD_LOC 2
3399: PUSH
3400: LD_VAR 0 2
3404: GREATEREQUAL
3405: IFFALSE 3446
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3407: LD_ADDR_LOC 2
3411: PUSH
3412: LD_LOC 2
3416: PPUSH
3417: LD_VAR 0 2
3421: PPUSH
3422: LD_LOC 2
3426: PUSH
3427: LD_VAR 0 2
3431: ARRAY
3432: PUSH
3433: LD_VAR 0 7
3437: ADD
3438: PPUSH
3439: CALL_OW 1
3443: ST_TO_ADDR
3444: GO 3471
// global_units := Replace ( global_units , cl , result ) ;
3446: LD_ADDR_LOC 2
3450: PUSH
3451: LD_LOC 2
3455: PPUSH
3456: LD_VAR 0 2
3460: PPUSH
3461: LD_VAR 0 7
3465: PPUSH
3466: CALL_OW 1
3470: ST_TO_ADDR
// if commander then
3471: LD_LOC 1
3475: IFFALSE 3522
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3477: LD_ADDR_EXP 49
3481: PUSH
3482: LD_EXP 49
3486: PPUSH
3487: LD_OWVAR 20
3491: PPUSH
3492: LD_EXP 49
3496: PUSH
3497: LD_OWVAR 20
3501: ARRAY
3502: PUSH
3503: LD_VAR 0 10
3507: ADD
3508: PPUSH
3509: CALL_OW 1
3513: ST_TO_ADDR
// commander := false ;
3514: LD_ADDR_LOC 1
3518: PUSH
3519: LD_INT 0
3521: ST_TO_ADDR
// end ; end ;
3522: LD_VAR 0 7
3526: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3527: LD_INT 0
3529: PPUSH
3530: PPUSH
// uc_side := 0 ;
3531: LD_ADDR_OWVAR 20
3535: PUSH
3536: LD_INT 0
3538: ST_TO_ADDR
// uc_nation := 0 ;
3539: LD_ADDR_OWVAR 21
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// vc_chassis := 31 ;
3547: LD_ADDR_OWVAR 37
3551: PUSH
3552: LD_INT 31
3554: ST_TO_ADDR
// vc_control := control_rider ;
3555: LD_ADDR_OWVAR 38
3559: PUSH
3560: LD_INT 4
3562: ST_TO_ADDR
// if def_mastodont = 1 then
3563: LD_EXP 16
3567: PUSH
3568: LD_INT 1
3570: EQUAL
3571: IFFALSE 3610
// for i = 1 to n do
3573: LD_ADDR_VAR 0 3
3577: PUSH
3578: DOUBLE
3579: LD_INT 1
3581: DEC
3582: ST_TO_ADDR
3583: LD_VAR 0 1
3587: PUSH
3588: FOR_TO
3589: IFFALSE 3608
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3591: CALL_OW 45
3595: PPUSH
3596: LD_INT 19
3598: PPUSH
3599: LD_INT 0
3601: PPUSH
3602: CALL_OW 49
3606: GO 3588
3608: POP
3609: POP
// if def_mastodont = 2 then
3610: LD_EXP 16
3614: PUSH
3615: LD_INT 2
3617: EQUAL
3618: IFFALSE 3657
// for i = 1 to n do
3620: LD_ADDR_VAR 0 3
3624: PUSH
3625: DOUBLE
3626: LD_INT 1
3628: DEC
3629: ST_TO_ADDR
3630: LD_VAR 0 1
3634: PUSH
3635: FOR_TO
3636: IFFALSE 3655
// PlaceUnitArea ( CreateVehicle , MastodontSpawn2 , false ) ;
3638: CALL_OW 45
3642: PPUSH
3643: LD_INT 21
3645: PPUSH
3646: LD_INT 0
3648: PPUSH
3649: CALL_OW 49
3653: GO 3635
3655: POP
3656: POP
// if def_mastodont = 3 then
3657: LD_EXP 16
3661: PUSH
3662: LD_INT 3
3664: EQUAL
3665: IFFALSE 3704
// for i = 1 to n do
3667: LD_ADDR_VAR 0 3
3671: PUSH
3672: DOUBLE
3673: LD_INT 1
3675: DEC
3676: ST_TO_ADDR
3677: LD_VAR 0 1
3681: PUSH
3682: FOR_TO
3683: IFFALSE 3702
// PlaceUnitArea ( CreateVehicle , MastodontSpawn3 , false ) ;
3685: CALL_OW 45
3689: PPUSH
3690: LD_INT 22
3692: PPUSH
3693: LD_INT 0
3695: PPUSH
3696: CALL_OW 49
3700: GO 3682
3702: POP
3703: POP
// end ;
3704: LD_VAR 0 2
3708: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3709: LD_INT 0
3711: PPUSH
3712: PPUSH
3713: PPUSH
3714: PPUSH
3715: PPUSH
3716: PPUSH
3717: PPUSH
3718: PPUSH
3719: PPUSH
// if side in [ 0 , 9 ] then
3720: LD_VAR 0 1
3724: PUSH
3725: LD_INT 0
3727: PUSH
3728: LD_INT 9
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: IN
3735: IFFALSE 3739
// exit ;
3737: GO 4835
// pos := Side_Positions [ side ] ;
3739: LD_ADDR_VAR 0 3
3743: PUSH
3744: LD_EXP 36
3748: PUSH
3749: LD_VAR 0 1
3753: ARRAY
3754: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3755: LD_ADDR_OWVAR 21
3759: PUSH
3760: LD_EXP 37
3764: PUSH
3765: LD_VAR 0 1
3769: ARRAY
3770: ST_TO_ADDR
// uc_side := side ;
3771: LD_ADDR_OWVAR 20
3775: PUSH
3776: LD_VAR 0 1
3780: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3781: LD_ADDR_VAR 0 4
3785: PUSH
3786: LD_EXP 39
3790: PUSH
3791: LD_VAR 0 3
3795: ARRAY
3796: PUSH
3797: LD_INT 1
3799: ARRAY
3800: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3801: LD_ADDR_VAR 0 5
3805: PUSH
3806: LD_EXP 39
3810: PUSH
3811: LD_VAR 0 3
3815: ARRAY
3816: PUSH
3817: LD_INT 2
3819: ARRAY
3820: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3821: LD_ADDR_VAR 0 6
3825: PUSH
3826: LD_EXP 39
3830: PUSH
3831: LD_VAR 0 3
3835: ARRAY
3836: PUSH
3837: LD_INT 3
3839: ARRAY
3840: ST_TO_ADDR
// if is_depot then
3841: LD_EXP 19
3845: IFFALSE 3978
// begin bc_type = b_depot ;
3847: LD_ADDR_OWVAR 42
3851: PUSH
3852: LD_INT 0
3854: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3855: LD_ADDR_VAR 0 10
3859: PUSH
3860: LD_VAR 0 4
3864: PPUSH
3865: LD_VAR 0 5
3869: PPUSH
3870: LD_VAR 0 6
3874: PPUSH
3875: CALL_OW 47
3879: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3880: LD_VAR 0 10
3884: PPUSH
3885: LD_STRING @
3887: PUSH
3888: LD_VAR 0 1
3892: STR
3893: PPUSH
3894: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3898: LD_VAR 0 10
3902: PPUSH
3903: CALL_OW 274
3907: PPUSH
3908: LD_INT 1
3910: PPUSH
3911: LD_EXP 24
3915: PUSH
3916: LD_INT 1
3918: ARRAY
3919: PPUSH
3920: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3924: LD_VAR 0 10
3928: PPUSH
3929: CALL_OW 274
3933: PPUSH
3934: LD_INT 2
3936: PPUSH
3937: LD_EXP 24
3941: PUSH
3942: LD_INT 2
3944: ARRAY
3945: PPUSH
3946: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3950: LD_VAR 0 10
3954: PPUSH
3955: CALL_OW 274
3959: PPUSH
3960: LD_INT 3
3962: PPUSH
3963: LD_EXP 24
3967: PUSH
3968: LD_INT 3
3970: ARRAY
3971: PPUSH
3972: CALL_OW 277
// end else
3976: GO 4122
// begin for i := 1 to 3 do
3978: LD_ADDR_VAR 0 7
3982: PUSH
3983: DOUBLE
3984: LD_INT 1
3986: DEC
3987: ST_TO_ADDR
3988: LD_INT 3
3990: PUSH
3991: FOR_TO
3992: IFFALSE 4120
// begin r := starting_resources [ i ] ;
3994: LD_ADDR_VAR 0 8
3998: PUSH
3999: LD_EXP 24
4003: PUSH
4004: LD_VAR 0 7
4008: ARRAY
4009: ST_TO_ADDR
// while r >= 10 do
4010: LD_VAR 0 8
4014: PUSH
4015: LD_INT 10
4017: GREATEREQUAL
4018: IFFALSE 4118
// if r > 50 then
4020: LD_VAR 0 8
4024: PUSH
4025: LD_INT 50
4027: GREATER
4028: IFFALSE 4074
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4030: LD_VAR 0 7
4034: PPUSH
4035: LD_INT 5
4037: PPUSH
4038: LD_VAR 0 4
4042: PPUSH
4043: LD_VAR 0 5
4047: PPUSH
4048: LD_INT 4
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 60
// r := r - 50 ;
4058: LD_ADDR_VAR 0 8
4062: PUSH
4063: LD_VAR 0 8
4067: PUSH
4068: LD_INT 50
4070: MINUS
4071: ST_TO_ADDR
// end else
4072: GO 4116
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4074: LD_VAR 0 7
4078: PPUSH
4079: LD_VAR 0 8
4083: PUSH
4084: LD_INT 10
4086: DIV
4087: PPUSH
4088: LD_VAR 0 4
4092: PPUSH
4093: LD_VAR 0 5
4097: PPUSH
4098: LD_INT 4
4100: PPUSH
4101: LD_INT 0
4103: PPUSH
4104: CALL_OW 60
// r := 0 ;
4108: LD_ADDR_VAR 0 8
4112: PUSH
4113: LD_INT 0
4115: ST_TO_ADDR
// end ;
4116: GO 4010
// end ;
4118: GO 3991
4120: POP
4121: POP
// end ; for r in starting_crates do
4122: LD_ADDR_VAR 0 8
4126: PUSH
4127: LD_EXP 23
4131: PUSH
4132: FOR_IN
4133: IFFALSE 4165
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 5
4140: PPUSH
4141: LD_VAR 0 4
4145: PPUSH
4146: LD_VAR 0 5
4150: PPUSH
4151: LD_VAR 0 8
4155: PPUSH
4156: LD_INT 0
4158: PPUSH
4159: CALL_OW 60
4163: GO 4132
4165: POP
4166: POP
// if def_morale_flags then
4167: LD_EXP 9
4171: IFFALSE 4310
// begin x := start_def [ pos ] [ 1 ] ;
4173: LD_ADDR_VAR 0 4
4177: PUSH
4178: LD_EXP 41
4182: PUSH
4183: LD_VAR 0 3
4187: ARRAY
4188: PUSH
4189: LD_INT 1
4191: ARRAY
4192: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4193: LD_ADDR_VAR 0 5
4197: PUSH
4198: LD_EXP 41
4202: PUSH
4203: LD_VAR 0 3
4207: ARRAY
4208: PUSH
4209: LD_INT 2
4211: ARRAY
4212: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4213: LD_VAR 0 4
4217: PPUSH
4218: LD_VAR 0 5
4222: PPUSH
4223: LD_INT 12
4225: PPUSH
4226: LD_INT 2
4228: PPUSH
4229: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4233: LD_ADDR_EXP 46
4237: PUSH
4238: LD_EXP 46
4242: PUSH
4243: LD_VAR 0 1
4247: PPUSH
4248: LD_VAR 0 4
4252: PPUSH
4253: LD_VAR 0 5
4257: PPUSH
4258: LD_INT 1
4260: PUSH
4261: LD_INT 100
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: PUSH
4268: LD_INT 2
4270: PUSH
4271: LD_INT 50
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PUSH
4278: LD_INT 3
4280: PUSH
4281: LD_INT 20
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_INT 20
4290: PUSH
4291: LD_INT 100
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: PPUSH
4304: CALL_OW 418
4308: ADD
4309: ST_TO_ADDR
// end ; commander := true ;
4310: LD_ADDR_LOC 1
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// soldiers_created := 0 ;
4318: LD_ADDR_LOC 4
4322: PUSH
4323: LD_INT 0
4325: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4326: LD_ADDR_VAR 0 7
4330: PUSH
4331: DOUBLE
4332: LD_INT 1
4334: DEC
4335: ST_TO_ADDR
4336: LD_EXP 20
4340: PUSH
4341: FOR_TO
4342: IFFALSE 4495
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4344: LD_ADDR_VAR 0 4
4348: PUSH
4349: LD_EXP 40
4353: PUSH
4354: LD_VAR 0 3
4358: ARRAY
4359: PUSH
4360: LD_VAR 0 7
4364: ARRAY
4365: PUSH
4366: LD_INT 1
4368: ARRAY
4369: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4370: LD_ADDR_VAR 0 5
4374: PUSH
4375: LD_EXP 40
4379: PUSH
4380: LD_VAR 0 3
4384: ARRAY
4385: PUSH
4386: LD_VAR 0 7
4390: ARRAY
4391: PUSH
4392: LD_INT 2
4394: ARRAY
4395: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4396: LD_ADDR_VAR 0 6
4400: PUSH
4401: LD_EXP 40
4405: PUSH
4406: LD_VAR 0 3
4410: ARRAY
4411: PUSH
4412: LD_VAR 0 7
4416: ARRAY
4417: PUSH
4418: LD_INT 3
4420: ARRAY
4421: ST_TO_ADDR
// bc_type := b_breastwork ;
4422: LD_ADDR_OWVAR 42
4426: PUSH
4427: LD_INT 31
4429: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4430: LD_ADDR_VAR 0 9
4434: PUSH
4435: LD_VAR 0 4
4439: PPUSH
4440: LD_VAR 0 5
4444: PPUSH
4445: LD_VAR 0 6
4449: PPUSH
4450: CALL_OW 47
4454: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4455: LD_INT 1
4457: PPUSH
4458: LD_INT 1
4460: PPUSH
4461: LD_INT 0
4463: PPUSH
4464: LD_INT 0
4466: PPUSH
4467: LD_INT 0
4469: PPUSH
4470: LD_VAR 0 9
4474: PPUSH
4475: CALL 2830 0 6
// soldiers_created := soldiers_created + 1 ;
4479: LD_ADDR_LOC 4
4483: PUSH
4484: LD_LOC 4
4488: PUSH
4489: LD_INT 1
4491: PLUS
4492: ST_TO_ADDR
// end ;
4493: GO 4341
4495: POP
4496: POP
// x := start_def [ pos ] [ 1 ] ;
4497: LD_ADDR_VAR 0 4
4501: PUSH
4502: LD_EXP 41
4506: PUSH
4507: LD_VAR 0 3
4511: ARRAY
4512: PUSH
4513: LD_INT 1
4515: ARRAY
4516: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4517: LD_ADDR_VAR 0 5
4521: PUSH
4522: LD_EXP 41
4526: PUSH
4527: LD_VAR 0 3
4531: ARRAY
4532: PUSH
4533: LD_INT 2
4535: ARRAY
4536: ST_TO_ADDR
// if Sheik = 2 and uc_nation = nation_arabian then
4537: LD_EXP 47
4541: PUSH
4542: LD_INT 2
4544: EQUAL
4545: PUSH
4546: LD_OWVAR 21
4550: PUSH
4551: LD_INT 2
4553: EQUAL
4554: AND
4555: IFFALSE 4583
// prepare_people ( 1 , class_desert_warior , x , y , 5 , 0 ) ;
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 11
4562: PPUSH
4563: LD_VAR 0 4
4567: PPUSH
4568: LD_VAR 0 5
4572: PPUSH
4573: LD_INT 5
4575: PPUSH
4576: LD_INT 0
4578: PPUSH
4579: CALL 2830 0 6
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4583: LD_LOC 8
4587: PUSH
4588: LD_EXP 20
4592: MINUS
4593: PPUSH
4594: LD_INT 1
4596: PPUSH
4597: LD_VAR 0 4
4601: PPUSH
4602: LD_VAR 0 5
4606: PPUSH
4607: LD_INT 5
4609: PPUSH
4610: LD_INT 0
4612: PPUSH
4613: CALL 2830 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4617: LD_LOC 5
4621: PPUSH
4622: LD_INT 2
4624: PPUSH
4625: LD_VAR 0 4
4629: PPUSH
4630: LD_VAR 0 5
4634: PPUSH
4635: LD_INT 5
4637: PPUSH
4638: LD_INT 0
4640: PPUSH
4641: CALL 2830 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4645: LD_LOC 7
4649: PPUSH
4650: LD_INT 3
4652: PPUSH
4653: LD_VAR 0 4
4657: PPUSH
4658: LD_VAR 0 5
4662: PPUSH
4663: LD_INT 5
4665: PPUSH
4666: LD_INT 0
4668: PPUSH
4669: CALL 2830 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4673: LD_LOC 6
4677: PPUSH
4678: LD_INT 4
4680: PPUSH
4681: LD_VAR 0 4
4685: PPUSH
4686: LD_VAR 0 5
4690: PPUSH
4691: LD_INT 5
4693: PPUSH
4694: LD_INT 0
4696: PPUSH
4697: CALL 2830 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4701: LD_EXP 10
4705: PUSH
4706: LD_INT 20
4708: PPUSH
4709: LD_VAR 0 1
4713: PPUSH
4714: CALL_OW 321
4718: PUSH
4719: LD_INT 1
4721: EQUAL
4722: AND
4723: IFFALSE 4740
// SetTech ( tech_SibDet , side , state_researched ) ;
4725: LD_INT 20
4727: PPUSH
4728: LD_VAR 0 1
4732: PPUSH
4733: LD_INT 2
4735: PPUSH
4736: CALL_OW 322
// if def_siberite_bomb = 1 then
4740: LD_EXP 13
4744: PUSH
4745: LD_INT 1
4747: EQUAL
4748: IFFALSE 4782
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4750: LD_INT 25
4752: PPUSH
4753: LD_VAR 0 1
4757: PPUSH
4758: LD_INT 1
4760: PPUSH
4761: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4765: LD_INT 73
4767: PPUSH
4768: LD_VAR 0 1
4772: PPUSH
4773: LD_INT 1
4775: PPUSH
4776: CALL_OW 322
// end else
4780: GO 4812
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4782: LD_INT 25
4784: PPUSH
4785: LD_VAR 0 1
4789: PPUSH
4790: LD_INT 0
4792: PPUSH
4793: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4797: LD_INT 73
4799: PPUSH
4800: LD_VAR 0 1
4804: PPUSH
4805: LD_INT 0
4807: PPUSH
4808: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4812: LD_INT 24
4814: PPUSH
4815: LD_VAR 0 1
4819: PPUSH
4820: LD_INT 0
4822: PPUSH
4823: CALL_OW 322
// global_defined := true ;
4827: LD_ADDR_LOC 3
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// end ;
4835: LD_VAR 0 2
4839: RET
// function prepare_sides ; var i ; begin
4840: LD_INT 0
4842: PPUSH
4843: PPUSH
// global_units := [ ] ;
4844: LD_ADDR_LOC 2
4848: PUSH
4849: EMPTY
4850: ST_TO_ADDR
// global_defined := false ;
4851: LD_ADDR_LOC 3
4855: PUSH
4856: LD_INT 0
4858: ST_TO_ADDR
// CountClassMembers ;
4859: CALL 4924 0 0
// for i := 1 to 8 do
4863: LD_ADDR_VAR 0 2
4867: PUSH
4868: DOUBLE
4869: LD_INT 1
4871: DEC
4872: ST_TO_ADDR
4873: LD_INT 8
4875: PUSH
4876: FOR_TO
4877: IFFALSE 4902
// if Side_Positions [ i ] then
4879: LD_EXP 36
4883: PUSH
4884: LD_VAR 0 2
4888: ARRAY
4889: IFFALSE 4900
// prepare_side ( i ) ;
4891: LD_VAR 0 2
4895: PPUSH
4896: CALL 3709 0 1
4900: GO 4876
4902: POP
4903: POP
// if def_mastodont then
4904: LD_EXP 16
4908: IFFALSE 4919
// prepare_mastodonts ( Mastodont ) ;
4910: LD_EXP 48
4914: PPUSH
4915: CALL 3527 0 1
// end ;
4919: LD_VAR 0 1
4923: RET
// function CountClassMembers ; var Mode ; begin
4924: LD_INT 0
4926: PPUSH
4927: PPUSH
// if No_Mechs then
4928: LD_EXP 17
4932: IFFALSE 4944
// Mode := 2 else
4934: LD_ADDR_VAR 0 2
4938: PUSH
4939: LD_INT 2
4941: ST_TO_ADDR
4942: GO 4952
// Mode := 1 ;
4944: LD_ADDR_VAR 0 2
4948: PUSH
4949: LD_INT 1
4951: ST_TO_ADDR
// neng := number_of_people ;
4952: LD_ADDR_LOC 5
4956: PUSH
4957: LD_EXP 21
4961: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4962: LD_ADDR_LOC 8
4966: PUSH
4967: LD_LOC 5
4971: PUSH
4972: LD_INT 4
4974: PUSH
4975: LD_INT 3
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: LD_VAR 0 2
4986: ARRAY
4987: DIV
4988: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4989: LD_LOC 8
4993: PUSH
4994: LD_EXP 20
4998: LESS
4999: IFFALSE 5011
// nsol := number_of_breastworks ;
5001: LD_ADDR_LOC 8
5005: PUSH
5006: LD_EXP 20
5010: ST_TO_ADDR
// neng := neng - nsol ;
5011: LD_ADDR_LOC 5
5015: PUSH
5016: LD_LOC 5
5020: PUSH
5021: LD_LOC 8
5025: MINUS
5026: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5027: LD_ADDR_LOC 6
5031: PUSH
5032: LD_LOC 5
5036: PUSH
5037: LD_INT 3
5039: PUSH
5040: LD_INT 2
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PUSH
5047: LD_VAR 0 2
5051: ARRAY
5052: DIV
5053: ST_TO_ADDR
// if ( nsci < 1 ) then
5054: LD_LOC 6
5058: PUSH
5059: LD_INT 1
5061: LESS
5062: IFFALSE 5072
// nsci := 1 ;
5064: LD_ADDR_LOC 6
5068: PUSH
5069: LD_INT 1
5071: ST_TO_ADDR
// neng := neng - nsci ;
5072: LD_ADDR_LOC 5
5076: PUSH
5077: LD_LOC 5
5081: PUSH
5082: LD_LOC 6
5086: MINUS
5087: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5088: LD_ADDR_LOC 7
5092: PUSH
5093: LD_LOC 5
5097: PUSH
5098: LD_INT 2
5100: DIV
5101: PUSH
5102: LD_INT 0
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PUSH
5109: LD_VAR 0 2
5113: ARRAY
5114: ST_TO_ADDR
// neng := neng - nmech ;
5115: LD_ADDR_LOC 5
5119: PUSH
5120: LD_LOC 5
5124: PUSH
5125: LD_LOC 7
5129: MINUS
5130: ST_TO_ADDR
// if ( neng < 1 ) then
5131: LD_LOC 5
5135: PUSH
5136: LD_INT 1
5138: LESS
5139: IFFALSE 5149
// neng := 1 ;
5141: LD_ADDR_LOC 5
5145: PUSH
5146: LD_INT 1
5148: ST_TO_ADDR
// end ;
5149: LD_VAR 0 1
5153: RET
// starting begin disable ( 98 ) ;
5154: LD_INT 98
5156: DISABLE_MARKED
// disable ( 99 ) ;
5157: LD_INT 99
5159: DISABLE_MARKED
// disable ( 400 ) ;
5160: LD_INT 400
5162: DISABLE_MARKED
// disable ( 401 ) ;
5163: LD_INT 401
5165: DISABLE_MARKED
// mp_selectmsg := true ;
5166: LD_ADDR_OWVAR 13
5170: PUSH
5171: LD_INT 1
5173: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5174: CALL 68 0 0
// init_map ;
5178: CALL 1301 0 0
// init_respawning ;
5182: CALL 14123 0 0
// set_shared_visions_and_alliances ;
5186: CALL 2542 0 0
// ResetFog ;
5190: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5194: LD_OWVAR 2
5198: PPUSH
5199: CALL_OW 520
// AnimateTrees ( true ) ;
5203: LD_INT 1
5205: PPUSH
5206: CALL_OW 573
// prepare_sides ;
5210: CALL 4840 0 0
// Init_Win_Condition ;
5214: CALL 8104 0 0
// ShowTimer ;
5218: CALL 7665 0 0
// music_nat := Side_Nations [ your_side ] ;
5222: LD_ADDR_OWVAR 71
5226: PUSH
5227: LD_EXP 37
5231: PUSH
5232: LD_OWVAR 2
5236: ARRAY
5237: ST_TO_ADDR
// if IAmSpec then
5238: CALL_OW 531
5242: IFFALSE 5266
// begin fogoff ( true ) ;
5244: LD_INT 1
5246: PPUSH
5247: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
5251: LD_INT 130
5253: PPUSH
5254: LD_INT 100
5256: PPUSH
5257: CALL_OW 86
// enable ( 400 ) ;
5261: LD_INT 400
5263: ENABLE_MARKED
// end else
5264: GO 5312
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5266: LD_EXP 41
5270: PUSH
5271: LD_EXP 36
5275: PUSH
5276: LD_OWVAR 2
5280: ARRAY
5281: ARRAY
5282: PUSH
5283: LD_INT 1
5285: ARRAY
5286: PPUSH
5287: LD_EXP 41
5291: PUSH
5292: LD_EXP 36
5296: PUSH
5297: LD_OWVAR 2
5301: ARRAY
5302: ARRAY
5303: PUSH
5304: LD_INT 2
5306: ARRAY
5307: PPUSH
5308: CALL_OW 86
// end ; InitApeman ;
5312: CALL 6183 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
5316: LD_ADDR_EXP 59
5320: PUSH
5321: LD_INT 9
5323: PUSH
5324: LD_INT 10
5326: PUSH
5327: LD_INT 11
5329: PUSH
5330: LD_INT 12
5332: PUSH
5333: LD_INT 13
5335: PUSH
5336: LD_INT 14
5338: PUSH
5339: LD_INT 15
5341: PUSH
5342: LD_INT 16
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: ST_TO_ADDR
// BeginBuildUp ;
5355: CALL 14617 0 0
// end ;
5359: END
// every 0 0$1 do
5360: GO 5362
5362: DISABLE
// if ( def_siberite_bomb > 1 ) then
5363: LD_EXP 13
5367: PUSH
5368: LD_INT 1
5370: GREATER
5371: IFFALSE 5386
// begin wait ( siberite_bomb_Delay ) ;
5373: LD_EXP 31
5377: PPUSH
5378: CALL_OW 67
// EnableSibFiss ;
5382: CALL 5387 0 0
// end ;
5386: END
// function EnableSibFiss ; var i ; begin
5387: LD_INT 0
5389: PPUSH
5390: PPUSH
// for i := 1 to 8 do
5391: LD_ADDR_VAR 0 2
5395: PUSH
5396: DOUBLE
5397: LD_INT 1
5399: DEC
5400: ST_TO_ADDR
5401: LD_INT 8
5403: PUSH
5404: FOR_TO
5405: IFFALSE 5451
// if Side_Positions [ i ] then
5407: LD_EXP 36
5411: PUSH
5412: LD_VAR 0 2
5416: ARRAY
5417: IFFALSE 5449
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5419: LD_INT 25
5421: PPUSH
5422: LD_VAR 0 2
5426: PPUSH
5427: LD_INT 1
5429: PPUSH
5430: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5434: LD_INT 73
5436: PPUSH
5437: LD_VAR 0 2
5441: PPUSH
5442: LD_INT 1
5444: PPUSH
5445: CALL_OW 322
// end ;
5449: GO 5404
5451: POP
5452: POP
// end ; end_of_file
5453: LD_VAR 0 1
5457: RET
// every 0 0$25 + 0 0$1.0 do
5458: GO 5460
5460: DISABLE
// begin if GetResourceArea ( MZBaseArea3 , mat_cans ) < 20 then
5461: LD_INT 23
5463: PPUSH
5464: LD_INT 1
5466: PPUSH
5467: CALL_OW 287
5471: PUSH
5472: LD_INT 20
5474: LESS
5475: IFFALSE 5498
// CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea3 , true ) ;
5477: LD_INT 4
5479: PPUSH
5480: LD_INT 5
5482: PPUSH
5483: CALL_OW 12
5487: PPUSH
5488: LD_INT 23
5490: PPUSH
5491: LD_INT 1
5493: PPUSH
5494: CALL_OW 55
// enable ;
5498: ENABLE
// end ;
5499: END
// every 1 1$25 + 0 0$0.3 do
5500: GO 5502
5502: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
5503: LD_INT 4
5505: PPUSH
5506: LD_INT 5
5508: PPUSH
5509: CALL_OW 12
5513: PPUSH
5514: LD_INT 18
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: CALL_OW 55
// CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea2 , true ) ;
5524: LD_INT 4
5526: PPUSH
5527: LD_INT 5
5529: PPUSH
5530: CALL_OW 12
5534: PPUSH
5535: LD_INT 20
5537: PPUSH
5538: LD_INT 1
5540: PPUSH
5541: CALL_OW 55
// enable ;
5545: ENABLE
// end ;
5546: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5547: GO 5549
5549: DISABLE
5550: LD_INT 0
5552: PPUSH
5553: PPUSH
// begin case tick of 1 .. 1 1$0 :
5554: LD_OWVAR 1
5558: PUSH
5559: LD_INT 1
5561: DOUBLE
5562: GREATEREQUAL
5563: IFFALSE 5571
5565: LD_INT 2100
5567: DOUBLE
5568: LESSEQUAL
5569: IFTRUE 5573
5571: GO 5601
5573: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5574: LD_EXP 25
5578: PUSH
5579: LD_INT 100
5581: DIVREAL
5582: PUSH
5583: LD_INT 525
5585: PPUSH
5586: LD_INT 1050
5588: PPUSH
5589: CALL_OW 12
5593: MUL
5594: PPUSH
5595: CALL_OW 67
5599: GO 5903
5601: LD_INT 2100
5603: PUSH
5604: LD_INT 1
5606: PLUS
5607: DOUBLE
5608: GREATEREQUAL
5609: IFFALSE 5617
5611: LD_INT 10500
5613: DOUBLE
5614: LESSEQUAL
5615: IFTRUE 5619
5617: GO 5647
5619: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5620: LD_EXP 25
5624: PUSH
5625: LD_INT 100
5627: DIVREAL
5628: PUSH
5629: LD_INT 1050
5631: PPUSH
5632: LD_INT 1750
5634: PPUSH
5635: CALL_OW 12
5639: MUL
5640: PPUSH
5641: CALL_OW 67
5645: GO 5903
5647: LD_INT 10500
5649: PUSH
5650: LD_INT 1
5652: PLUS
5653: DOUBLE
5654: GREATEREQUAL
5655: IFFALSE 5663
5657: LD_INT 21000
5659: DOUBLE
5660: LESSEQUAL
5661: IFTRUE 5665
5663: GO 5693
5665: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5666: LD_EXP 25
5670: PUSH
5671: LD_INT 100
5673: DIVREAL
5674: PUSH
5675: LD_INT 1750
5677: PPUSH
5678: LD_INT 2100
5680: PPUSH
5681: CALL_OW 12
5685: MUL
5686: PPUSH
5687: CALL_OW 67
5691: GO 5903
5693: LD_INT 21000
5695: PUSH
5696: LD_INT 1
5698: PLUS
5699: DOUBLE
5700: GREATEREQUAL
5701: IFFALSE 5709
5703: LD_INT 42000
5705: DOUBLE
5706: LESSEQUAL
5707: IFTRUE 5711
5709: GO 5739
5711: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5712: LD_EXP 25
5716: PUSH
5717: LD_INT 100
5719: DIVREAL
5720: PUSH
5721: LD_INT 2100
5723: PPUSH
5724: LD_INT 2275
5726: PPUSH
5727: CALL_OW 12
5731: MUL
5732: PPUSH
5733: CALL_OW 67
5737: GO 5903
5739: LD_INT 42000
5741: PUSH
5742: LD_INT 1
5744: PLUS
5745: DOUBLE
5746: GREATEREQUAL
5747: IFFALSE 5755
5749: LD_INT 63000
5751: DOUBLE
5752: LESSEQUAL
5753: IFTRUE 5757
5755: GO 5785
5757: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5758: LD_EXP 25
5762: PUSH
5763: LD_INT 100
5765: DIVREAL
5766: PUSH
5767: LD_INT 2275
5769: PPUSH
5770: LD_INT 2450
5772: PPUSH
5773: CALL_OW 12
5777: MUL
5778: PPUSH
5779: CALL_OW 67
5783: GO 5903
5785: LD_INT 63000
5787: PUSH
5788: LD_INT 1
5790: PLUS
5791: DOUBLE
5792: GREATEREQUAL
5793: IFFALSE 5801
5795: LD_INT 105000
5797: DOUBLE
5798: LESSEQUAL
5799: IFTRUE 5803
5801: GO 5831
5803: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5804: LD_EXP 25
5808: PUSH
5809: LD_INT 100
5811: DIVREAL
5812: PUSH
5813: LD_INT 2450
5815: PPUSH
5816: LD_INT 2800
5818: PPUSH
5819: CALL_OW 12
5823: MUL
5824: PPUSH
5825: CALL_OW 67
5829: GO 5903
5831: LD_INT 105000
5833: PUSH
5834: LD_INT 1
5836: PLUS
5837: DOUBLE
5838: GREATEREQUAL
5839: IFFALSE 5847
5841: LD_INT 630000
5843: DOUBLE
5844: LESSEQUAL
5845: IFTRUE 5849
5847: GO 5877
5849: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5850: LD_EXP 25
5854: PUSH
5855: LD_INT 100
5857: DIVREAL
5858: PUSH
5859: LD_INT 2800
5861: PPUSH
5862: LD_INT 3500
5864: PPUSH
5865: CALL_OW 12
5869: MUL
5870: PPUSH
5871: CALL_OW 67
5875: GO 5903
5877: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5878: LD_EXP 25
5882: PUSH
5883: LD_INT 100
5885: DIVREAL
5886: PUSH
5887: LD_INT 3500
5889: PPUSH
5890: LD_INT 3850
5892: PPUSH
5893: CALL_OW 12
5897: MUL
5898: PPUSH
5899: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5903: LD_ADDR_VAR 0 2
5907: PUSH
5908: LD_INT 3
5910: PPUSH
5911: LD_INT 5
5913: PPUSH
5914: CALL_OW 12
5918: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5919: LD_ADDR_VAR 0 1
5923: PUSH
5924: LD_EXP 36
5928: PUSH
5929: LD_INT 0
5931: PUSH
5932: EMPTY
5933: LIST
5934: DIFF
5935: PUSH
5936: FOR_IN
5937: IFFALSE 5986
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5939: LD_VAR 0 2
5943: PPUSH
5944: LD_EXP 41
5948: PUSH
5949: LD_VAR 0 1
5953: ARRAY
5954: PUSH
5955: LD_INT 1
5957: ARRAY
5958: PPUSH
5959: LD_EXP 41
5963: PUSH
5964: LD_VAR 0 1
5968: ARRAY
5969: PUSH
5970: LD_INT 2
5972: ARRAY
5973: PPUSH
5974: LD_INT 20
5976: PPUSH
5977: LD_INT 1
5979: PPUSH
5980: CALL_OW 56
5984: GO 5936
5986: POP
5987: POP
// enable ;
5988: ENABLE
// end ; end_of_file
5989: PPOPN 2
5991: END
// every 20 20$00 trigger apemanNumber do
5992: LD_EXP 50
5996: IFFALSE 6029
5998: GO 6000
6000: DISABLE
// begin enable ;
6001: ENABLE
// if apeLevel >= 8 then
6002: LD_EXP 55
6006: PUSH
6007: LD_INT 8
6009: GREATEREQUAL
6010: IFFALSE 6015
// disable else
6012: DISABLE
6013: GO 6029
// apeLevel := apeLevel + 1 ;
6015: LD_ADDR_EXP 55
6019: PUSH
6020: LD_EXP 55
6024: PUSH
6025: LD_INT 1
6027: PLUS
6028: ST_TO_ADDR
// end ;
6029: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6030: LD_EXP 50
6034: PUSH
6035: LD_EXP 51
6039: LESS
6040: IFFALSE 6180
6042: GO 6044
6044: DISABLE
6045: LD_INT 0
6047: PPUSH
6048: PPUSH
6049: PPUSH
6050: PPUSH
// begin enable ;
6051: ENABLE
// for i := 1 to apemanPos do
6052: LD_ADDR_VAR 0 1
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_EXP 53
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6178
// begin if apemanPlayerCount [ i ] then
6070: LD_EXP 54
6074: PUSH
6075: LD_VAR 0 1
6079: ARRAY
6080: IFFALSE 6176
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6082: LD_EXP 54
6086: PUSH
6087: LD_VAR 0 1
6091: ARRAY
6092: PUSH
6093: LD_EXP 53
6097: PUSH
6098: LD_VAR 0 1
6102: ARRAY
6103: GREATER
6104: IFFALSE 6176
// begin ape := PrepareApeman ;
6106: LD_ADDR_VAR 0 2
6110: PUSH
6111: CALL 6699 0 0
6115: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_EXP 56
6125: PUSH
6126: LD_VAR 0 1
6130: ARRAY
6131: PPUSH
6132: LD_INT 0
6134: PPUSH
6135: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6139: LD_ADDR_EXP 53
6143: PUSH
6144: LD_EXP 53
6148: PPUSH
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_EXP 53
6158: PUSH
6159: LD_VAR 0 1
6163: ARRAY
6164: PUSH
6165: LD_VAR 0 2
6169: UNION
6170: PPUSH
6171: CALL_OW 1
6175: ST_TO_ADDR
// end ; end ; end ;
6176: GO 6067
6178: POP
6179: POP
// end ;
6180: PPOPN 4
6182: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6183: LD_INT 0
6185: PPUSH
6186: PPUSH
6187: PPUSH
6188: PPUSH
6189: PPUSH
6190: PPUSH
6191: PPUSH
// playersAmount := 0 ;
6192: LD_ADDR_VAR 0 3
6196: PUSH
6197: LD_INT 0
6199: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6200: LD_ADDR_VAR 0 7
6204: PUSH
6205: LD_INT 1
6207: PUSH
6208: LD_INT 2
6210: PUSH
6211: LD_INT 3
6213: PUSH
6214: LD_INT 4
6216: PUSH
6217: LD_INT 5
6219: PUSH
6220: LD_INT 6
6222: PUSH
6223: LD_INT 7
6225: PUSH
6226: LD_INT 8
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6239: LD_ADDR_EXP 56
6243: PUSH
6244: LD_INT 0
6246: PUSH
6247: LD_INT 0
6249: PUSH
6250: LD_INT 0
6252: PUSH
6253: LD_INT 0
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: LD_INT 0
6261: PUSH
6262: LD_INT 0
6264: PUSH
6265: LD_INT 0
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: ST_TO_ADDR
// for j = 1 to Side_Positions do
6278: LD_ADDR_VAR 0 4
6282: PUSH
6283: DOUBLE
6284: LD_INT 1
6286: DEC
6287: ST_TO_ADDR
6288: LD_EXP 36
6292: PUSH
6293: FOR_TO
6294: IFFALSE 6361
// if Side_Positions [ j ] then
6296: LD_EXP 36
6300: PUSH
6301: LD_VAR 0 4
6305: ARRAY
6306: IFFALSE 6359
// begin playersAmount := playersAmount + 1 ;
6308: LD_ADDR_VAR 0 3
6312: PUSH
6313: LD_VAR 0 3
6317: PUSH
6318: LD_INT 1
6320: PLUS
6321: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6322: LD_ADDR_EXP 56
6326: PUSH
6327: LD_EXP 56
6331: PPUSH
6332: LD_VAR 0 4
6336: PPUSH
6337: LD_VAR 0 7
6341: PUSH
6342: LD_EXP 36
6346: PUSH
6347: LD_VAR 0 4
6351: ARRAY
6352: ARRAY
6353: PPUSH
6354: CALL_OW 1
6358: ST_TO_ADDR
// end ;
6359: GO 6293
6361: POP
6362: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6363: LD_ADDR_EXP 52
6367: PUSH
6368: LD_INT 3
6370: PUSH
6371: LD_EXP 27
6375: MUL
6376: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6377: LD_ADDR_EXP 50
6381: PUSH
6382: LD_VAR 0 3
6386: PUSH
6387: LD_EXP 52
6391: MUL
6392: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6393: LD_ADDR_EXP 51
6397: PUSH
6398: LD_EXP 50
6402: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6403: LD_ADDR_EXP 53
6407: PUSH
6408: LD_INT 0
6410: PUSH
6411: LD_INT 0
6413: PUSH
6414: LD_INT 0
6416: PUSH
6417: LD_INT 0
6419: PUSH
6420: LD_INT 0
6422: PUSH
6423: LD_INT 0
6425: PUSH
6426: LD_INT 0
6428: PUSH
6429: LD_INT 0
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6442: LD_ADDR_EXP 54
6446: PUSH
6447: LD_INT 0
6449: PUSH
6450: LD_INT 0
6452: PUSH
6453: LD_INT 0
6455: PUSH
6456: LD_INT 0
6458: PUSH
6459: LD_INT 0
6461: PUSH
6462: LD_INT 0
6464: PUSH
6465: LD_INT 0
6467: PUSH
6468: LD_INT 0
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: ST_TO_ADDR
// apeLevel := 1 ;
6481: LD_ADDR_EXP 55
6485: PUSH
6486: LD_INT 1
6488: ST_TO_ADDR
// if not apemanNumber then
6489: LD_EXP 50
6493: NOT
6494: IFFALSE 6498
// exit ;
6496: GO 6694
// for i := 1 to apemanPerPlayer do
6498: LD_ADDR_VAR 0 2
6502: PUSH
6503: DOUBLE
6504: LD_INT 1
6506: DEC
6507: ST_TO_ADDR
6508: LD_EXP 52
6512: PUSH
6513: FOR_TO
6514: IFFALSE 6692
// begin for j := 1 to Side_Positions do
6516: LD_ADDR_VAR 0 4
6520: PUSH
6521: DOUBLE
6522: LD_INT 1
6524: DEC
6525: ST_TO_ADDR
6526: LD_EXP 36
6530: PUSH
6531: FOR_TO
6532: IFFALSE 6688
// if Side_Positions [ j ] then
6534: LD_EXP 36
6538: PUSH
6539: LD_VAR 0 4
6543: ARRAY
6544: IFFALSE 6686
// begin pos := Side_Positions [ j ] ;
6546: LD_ADDR_VAR 0 6
6550: PUSH
6551: LD_EXP 36
6555: PUSH
6556: LD_VAR 0 4
6560: ARRAY
6561: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6562: LD_ADDR_EXP 54
6566: PUSH
6567: LD_EXP 54
6571: PPUSH
6572: LD_VAR 0 4
6576: PPUSH
6577: LD_EXP 54
6581: PUSH
6582: LD_VAR 0 4
6586: ARRAY
6587: PUSH
6588: LD_INT 1
6590: PLUS
6591: PPUSH
6592: CALL_OW 1
6596: ST_TO_ADDR
// ape := PrepareApeman ;
6597: LD_ADDR_VAR 0 5
6601: PUSH
6602: CALL 6699 0 0
6606: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6607: LD_ADDR_EXP 53
6611: PUSH
6612: LD_EXP 53
6616: PPUSH
6617: LD_VAR 0 4
6621: PPUSH
6622: LD_EXP 53
6626: PUSH
6627: LD_VAR 0 4
6631: ARRAY
6632: PPUSH
6633: LD_EXP 53
6637: PUSH
6638: LD_VAR 0 4
6642: ARRAY
6643: PUSH
6644: LD_INT 1
6646: PLUS
6647: PPUSH
6648: LD_VAR 0 5
6652: PPUSH
6653: CALL_OW 1
6657: PPUSH
6658: CALL_OW 1
6662: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6663: LD_VAR 0 5
6667: PPUSH
6668: LD_EXP 56
6672: PUSH
6673: LD_VAR 0 4
6677: ARRAY
6678: PPUSH
6679: LD_INT 0
6681: PPUSH
6682: CALL_OW 49
// end ;
6686: GO 6531
6688: POP
6689: POP
// end ;
6690: GO 6513
6692: POP
6693: POP
// end ;
6694: LD_VAR 0 1
6698: RET
// export function PrepareApeman ; var bonus ; begin
6699: LD_INT 0
6701: PPUSH
6702: PPUSH
// uc_side := 0 ;
6703: LD_ADDR_OWVAR 20
6707: PUSH
6708: LD_INT 0
6710: ST_TO_ADDR
// uc_nation := 0 ;
6711: LD_ADDR_OWVAR 21
6715: PUSH
6716: LD_INT 0
6718: ST_TO_ADDR
// InitHc ;
6719: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6723: LD_ADDR_VAR 0 2
6727: PUSH
6728: LD_INT 1
6730: NEG
6731: PUSH
6732: LD_INT 0
6734: PUSH
6735: LD_INT 1
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: LD_OWVAR 1
6747: PUSH
6748: LD_INT 3
6750: MOD
6751: PUSH
6752: LD_INT 1
6754: PLUS
6755: ARRAY
6756: ST_TO_ADDR
// hc_class := class_apeman ;
6757: LD_ADDR_OWVAR 28
6761: PUSH
6762: LD_INT 12
6764: ST_TO_ADDR
// hc_gallery :=  ;
6765: LD_ADDR_OWVAR 33
6769: PUSH
6770: LD_STRING 
6772: ST_TO_ADDR
// hc_name :=  ;
6773: LD_ADDR_OWVAR 26
6777: PUSH
6778: LD_STRING 
6780: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6781: LD_ADDR_OWVAR 31
6785: PUSH
6786: LD_EXP 55
6790: PUSH
6791: LD_VAR 0 2
6795: PLUS
6796: PUSH
6797: LD_EXP 55
6801: PUSH
6802: LD_VAR 0 2
6806: PLUS
6807: PUSH
6808: LD_EXP 55
6812: PUSH
6813: LD_VAR 0 2
6817: PLUS
6818: PUSH
6819: LD_EXP 55
6823: PUSH
6824: LD_VAR 0 2
6828: PLUS
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6836: LD_ADDR_OWVAR 35
6840: PUSH
6841: LD_INT 10
6843: PUSH
6844: LD_VAR 0 2
6848: MUL
6849: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6850: LD_ADDR_OWVAR 29
6854: PUSH
6855: LD_INT 12
6857: PUSH
6858: LD_INT 10
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: ST_TO_ADDR
// result := CreateHuman ;
6865: LD_ADDR_VAR 0 1
6869: PUSH
6870: CALL_OW 44
6874: ST_TO_ADDR
// end ;
6875: LD_VAR 0 1
6879: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6880: LD_INT 0
6882: PPUSH
6883: PPUSH
6884: PPUSH
// if not ape then
6885: LD_VAR 0 1
6889: NOT
6890: IFFALSE 6894
// exit ;
6892: GO 7019
// side := GetSide ( ape ) ;
6894: LD_ADDR_VAR 0 3
6898: PUSH
6899: LD_VAR 0 1
6903: PPUSH
6904: CALL_OW 255
6908: ST_TO_ADDR
// if not side then
6909: LD_VAR 0 3
6913: NOT
6914: IFFALSE 6968
// begin for i = 1 to apemanPos do
6916: LD_ADDR_VAR 0 4
6920: PUSH
6921: DOUBLE
6922: LD_INT 1
6924: DEC
6925: ST_TO_ADDR
6926: LD_EXP 53
6930: PUSH
6931: FOR_TO
6932: IFFALSE 6966
// if ape in apemanPos [ i ] then
6934: LD_VAR 0 1
6938: PUSH
6939: LD_EXP 53
6943: PUSH
6944: LD_VAR 0 4
6948: ARRAY
6949: IN
6950: IFFALSE 6964
// begin side := i ;
6952: LD_ADDR_VAR 0 3
6956: PUSH
6957: LD_VAR 0 4
6961: ST_TO_ADDR
// break ;
6962: GO 6966
// end ;
6964: GO 6931
6966: POP
6967: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6968: LD_ADDR_EXP 53
6972: PUSH
6973: LD_EXP 53
6977: PPUSH
6978: LD_VAR 0 3
6982: PPUSH
6983: LD_EXP 53
6987: PUSH
6988: LD_VAR 0 3
6992: ARRAY
6993: PUSH
6994: LD_VAR 0 1
6998: DIFF
6999: PPUSH
7000: CALL_OW 1
7004: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7005: LD_ADDR_EXP 50
7009: PUSH
7010: LD_EXP 50
7014: PUSH
7015: LD_INT 1
7017: MINUS
7018: ST_TO_ADDR
// end ; end_of_file
7019: LD_VAR 0 2
7023: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7024: LD_VAR 0 1
7028: PPUSH
7029: CALL_OW 266
7033: PUSH
7034: LD_INT 0
7036: PUSH
7037: LD_INT 1
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: IN
7044: IFFALSE 7069
// SetBName ( b , @ & GetSide ( b ) ) ;
7046: LD_VAR 0 1
7050: PPUSH
7051: LD_STRING @
7053: PUSH
7054: LD_VAR 0 1
7058: PPUSH
7059: CALL_OW 255
7063: STR
7064: PPUSH
7065: CALL_OW 500
// end ;
7069: PPOPN 2
7071: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 266
7081: PUSH
7082: LD_INT 0
7084: PUSH
7085: LD_INT 1
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: IN
7092: IFFALSE 7117
// SetBName ( b , @ & GetSide ( b ) ) ;
7094: LD_VAR 0 1
7098: PPUSH
7099: LD_STRING @
7101: PUSH
7102: LD_VAR 0 1
7106: PPUSH
7107: CALL_OW 255
7111: STR
7112: PPUSH
7113: CALL_OW 500
// end ;
7117: PPOPN 3
7119: END
// on VehicleConstructed ( veh , fac ) do var side ;
7120: LD_INT 0
7122: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7123: LD_VAR 0 1
7127: PPUSH
7128: CALL_OW 263
7132: PUSH
7133: LD_INT 5
7135: EQUAL
7136: IFFALSE 7278
// begin side := GetSide ( veh ) ;
7138: LD_ADDR_VAR 0 3
7142: PUSH
7143: LD_VAR 0 1
7147: PPUSH
7148: CALL_OW 255
7152: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7153: LD_ADDR_EXP 53
7157: PUSH
7158: LD_EXP 53
7162: PPUSH
7163: LD_VAR 0 3
7167: PPUSH
7168: LD_EXP 53
7172: PUSH
7173: LD_VAR 0 3
7177: ARRAY
7178: PPUSH
7179: LD_INT 52
7181: PUSH
7182: EMPTY
7183: LIST
7184: PPUSH
7185: CALL_OW 72
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_VAR 0 3
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: PUSH
7202: LD_INT 2
7204: PUSH
7205: LD_INT 33
7207: PUSH
7208: LD_INT 5
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 25
7217: PUSH
7218: LD_INT 12
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 25
7227: PUSH
7228: LD_INT 15
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 16
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 25
7247: PUSH
7248: LD_INT 17
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 69
7271: UNION
7272: PPUSH
7273: CALL_OW 1
7277: ST_TO_ADDR
// end ; end ;
7278: PPOPN 3
7280: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7281: LD_INT 0
7283: PPUSH
7284: PPUSH
7285: PPUSH
7286: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7287: LD_VAR 0 1
7291: PPUSH
7292: CALL_OW 257
7296: PUSH
7297: LD_INT 12
7299: PUSH
7300: LD_INT 15
7302: PUSH
7303: LD_INT 17
7305: PUSH
7306: LD_INT 16
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: IN
7315: PUSH
7316: LD_VAR 0 1
7320: PPUSH
7321: CALL_OW 263
7325: PUSH
7326: LD_INT 5
7328: EQUAL
7329: OR
7330: IFFALSE 7341
// ApeKilled ( j ) ;
7332: LD_VAR 0 1
7336: PPUSH
7337: CALL 6880 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7341: LD_VAR 0 1
7345: PPUSH
7346: CALL_OW 266
7350: PUSH
7351: LD_INT 0
7353: PUSH
7354: LD_INT 1
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: IN
7361: IFFALSE 7443
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7363: LD_ADDR_VAR 0 4
7367: PUSH
7368: LD_EXP 36
7372: PUSH
7373: LD_VAR 0 1
7377: PPUSH
7378: CALL_OW 255
7382: ARRAY
7383: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7384: LD_ADDR_VAR 0 2
7388: PUSH
7389: LD_EXP 41
7393: PUSH
7394: LD_VAR 0 4
7398: ARRAY
7399: PUSH
7400: LD_INT 1
7402: ARRAY
7403: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7404: LD_ADDR_VAR 0 3
7408: PUSH
7409: LD_EXP 41
7413: PUSH
7414: LD_VAR 0 4
7418: ARRAY
7419: PUSH
7420: LD_INT 2
7422: ARRAY
7423: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7424: LD_VAR 0 2
7428: PPUSH
7429: LD_VAR 0 3
7433: PPUSH
7434: CALL_OW 420
7438: PPUSH
7439: CALL_OW 419
// end ; end ;
7443: PPOPN 5
7445: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_VAR 0 2
7455: PPUSH
7456: LD_VAR 0 3
7460: PPUSH
7461: LD_OWVAR 2
7465: PPUSH
7466: CALL 7865 0 4
7470: PPOPN 3
7472: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7473: LD_INT 0
7475: PPUSH
7476: PPUSH
// for un in battle_flags_id do
7477: LD_ADDR_VAR 0 2
7481: PUSH
7482: LD_EXP 46
7486: PUSH
7487: FOR_IN
7488: IFFALSE 7563
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7490: LD_VAR 0 2
7494: PPUSH
7495: LD_INT 1
7497: PUSH
7498: LD_LOC 9
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: PUSH
7507: LD_INT 2
7509: PUSH
7510: LD_LOC 9
7514: PUSH
7515: LD_INT 2
7517: DIV
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 3
7525: PUSH
7526: LD_LOC 9
7530: PUSH
7531: LD_INT 5
7533: DIV
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 20
7541: PUSH
7542: LD_LOC 9
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: PPUSH
7557: CALL_OW 423
7561: GO 7487
7563: POP
7564: POP
// end ;
7565: LD_VAR 0 1
7569: RET
// every 1 do var un ;
7570: GO 7572
7572: DISABLE
7573: LD_INT 0
7575: PPUSH
// begin if not def_morale_flags then
7576: LD_EXP 9
7580: NOT
7581: IFFALSE 7585
// exit ;
7583: GO 7662
// if not morale_decreasing_time then
7585: LD_EXP 26
7589: NOT
7590: IFFALSE 7594
// exit ;
7592: GO 7662
// strength = 100 ;
7594: LD_ADDR_LOC 9
7598: PUSH
7599: LD_INT 100
7601: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7602: LD_EXP 26
7606: PPUSH
7607: CALL_OW 67
// strength := strength - 1 ;
7611: LD_ADDR_LOC 9
7615: PUSH
7616: LD_LOC 9
7620: PUSH
7621: LD_INT 1
7623: MINUS
7624: ST_TO_ADDR
// Update_Flags ;
7625: CALL 7473 0 0
// until not strength ;
7629: LD_LOC 9
7633: NOT
7634: IFFALSE 7602
// for un in battle_flags_id do
7636: LD_ADDR_VAR 0 1
7640: PUSH
7641: LD_EXP 46
7645: PUSH
7646: FOR_IN
7647: IFFALSE 7660
// KillBattleFlag ( un ) ;
7649: LD_VAR 0 1
7653: PPUSH
7654: CALL_OW 419
7658: GO 7646
7660: POP
7661: POP
// end ; end_of_file
7662: PPOPN 1
7664: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7665: LD_INT 0
7667: PPUSH
7668: PPUSH
// AllStrings := [ #gamespeed , game_speed - 4 ] ^ [ #Multi1x1-Time , tick ] ;
7669: LD_ADDR_VAR 0 2
7673: PUSH
7674: LD_STRING #gamespeed
7676: PUSH
7677: LD_OWVAR 65
7681: PUSH
7682: LD_INT 4
7684: MINUS
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_STRING #Multi1x1-Time
7692: PUSH
7693: LD_OWVAR 1
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: ADD
7702: ST_TO_ADDR
// if WaitServerStrings then
7703: LD_EXP 58
7707: IFFALSE 7725
// AllStrings = AllStrings ^ WaitServerStrings ;
7709: LD_ADDR_VAR 0 2
7713: PUSH
7714: LD_VAR 0 2
7718: PUSH
7719: LD_EXP 58
7723: ADD
7724: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7725: LD_INT 0
7727: PUSH
7728: LD_EXP 31
7732: PUSH
7733: LD_OWVAR 1
7737: MINUS
7738: LESSEQUAL
7739: IFFALSE 7770
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7741: LD_ADDR_VAR 0 2
7745: PUSH
7746: LD_VAR 0 2
7750: PUSH
7751: LD_STRING #allowedsibbomb
7753: PUSH
7754: LD_EXP 31
7758: PUSH
7759: LD_OWVAR 1
7763: MINUS
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: ADD
7769: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7770: LD_INT 0
7772: PUSH
7773: LD_EXP 61
7777: PUSH
7778: LD_OWVAR 1
7782: MINUS
7783: LESSEQUAL
7784: IFFALSE 7815
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7786: LD_ADDR_VAR 0 2
7790: PUSH
7791: LD_VAR 0 2
7795: PUSH
7796: LD_STRING #builduptime
7798: PUSH
7799: LD_EXP 61
7803: PUSH
7804: LD_OWVAR 1
7808: MINUS
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: ADD
7814: ST_TO_ADDR
// if ( ExtraStrings ) then
7815: LD_EXP 57
7819: IFFALSE 7841
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7821: LD_ADDR_VAR 0 2
7825: PUSH
7826: LD_VAR 0 2
7830: PUSH
7831: LD_STRING 
7833: ADD
7834: PUSH
7835: LD_EXP 57
7839: ADD
7840: ST_TO_ADDR
// Display_Strings := AllStrings ;
7841: LD_ADDR_OWVAR 47
7845: PUSH
7846: LD_VAR 0 2
7850: ST_TO_ADDR
// end ;
7851: LD_VAR 0 1
7855: RET
// every 0 0$1 do
7856: GO 7858
7858: DISABLE
// begin ShowTimer ;
7859: CALL 7665 0 0
// enable ;
7863: ENABLE
// end ; end_of_file
7864: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7865: LD_INT 0
7867: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7868: LD_VAR 0 1
7872: PPUSH
7873: CALL_OW 255
7877: PUSH
7878: LD_VAR 0 4
7882: EQUAL
7883: IFFALSE 7902
// begin SetAchievement ( ACH_RAD ) ;
7885: LD_STRING ACH_RAD
7887: PPUSH
7888: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7892: LD_STRING ACH_NL
7894: PPUSH
7895: LD_INT 1
7897: PPUSH
7898: CALL_OW 564
// end end ;
7902: LD_VAR 0 5
7906: RET
// export function SA_Win ( side ) ; begin
7907: LD_INT 0
7909: PPUSH
// case side of 1 :
7910: LD_VAR 0 1
7914: PUSH
7915: LD_INT 1
7917: DOUBLE
7918: EQUAL
7919: IFTRUE 7923
7921: GO 7936
7923: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7924: LD_STRING ACH_AH
7926: PPUSH
7927: LD_INT 1
7929: PPUSH
7930: CALL_OW 564
7934: GO 8099
7936: LD_INT 2
7938: DOUBLE
7939: EQUAL
7940: IFTRUE 7944
7942: GO 7957
7944: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7945: LD_STRING ACH_E
7947: PPUSH
7948: LD_INT 1
7950: PPUSH
7951: CALL_OW 564
7955: GO 8099
7957: LD_INT 3
7959: DOUBLE
7960: EQUAL
7961: IFTRUE 7965
7963: GO 7978
7965: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7966: LD_STRING ACH_OOL
7968: PPUSH
7969: LD_INT 1
7971: PPUSH
7972: CALL_OW 564
7976: GO 8099
7978: LD_INT 1
7980: PUSH
7981: LD_INT 2
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: DOUBLE
7988: EQUAL
7989: IFTRUE 7993
7991: GO 8018
7993: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7994: LD_STRING ACH_AH
7996: PPUSH
7997: LD_REAL  5.00000000000000E-0001
8000: PPUSH
8001: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8005: LD_STRING ACH_E
8007: PPUSH
8008: LD_REAL  5.00000000000000E-0001
8011: PPUSH
8012: CALL_OW 564
// end ; [ 2 , 3 ] :
8016: GO 8099
8018: LD_INT 2
8020: PUSH
8021: LD_INT 3
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: DOUBLE
8028: EQUAL
8029: IFTRUE 8033
8031: GO 8058
8033: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8034: LD_STRING ACH_OOL
8036: PPUSH
8037: LD_REAL  5.00000000000000E-0001
8040: PPUSH
8041: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8045: LD_STRING ACH_E
8047: PPUSH
8048: LD_REAL  5.00000000000000E-0001
8051: PPUSH
8052: CALL_OW 564
// end ; [ 3 , 1 ] :
8056: GO 8099
8058: LD_INT 3
8060: PUSH
8061: LD_INT 1
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: DOUBLE
8068: EQUAL
8069: IFTRUE 8073
8071: GO 8098
8073: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8074: LD_STRING ACH_AH
8076: PPUSH
8077: LD_REAL  5.00000000000000E-0001
8080: PPUSH
8081: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8085: LD_STRING ACH_OOL
8087: PPUSH
8088: LD_REAL  5.00000000000000E-0001
8091: PPUSH
8092: CALL_OW 564
// end ; end ;
8096: GO 8099
8098: POP
// end ; end_of_file
8099: LD_VAR 0 2
8103: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8104: LD_INT 0
8106: PPUSH
8107: PPUSH
// enable ( 98 ) ;
8108: LD_INT 98
8110: ENABLE_MARKED
// GameEnded = false ;
8111: LD_ADDR_LOC 15
8115: PUSH
8116: LD_INT 0
8118: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8119: LD_ADDR_LOC 14
8123: PUSH
8124: LD_INT 0
8126: PUSH
8127: LD_INT 0
8129: PUSH
8130: LD_INT 0
8132: PUSH
8133: LD_INT 0
8135: PUSH
8136: LD_INT 0
8138: PUSH
8139: LD_INT 0
8141: PUSH
8142: LD_INT 0
8144: PUSH
8145: LD_INT 0
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: ST_TO_ADDR
// unfoged = false ;
8158: LD_ADDR_LOC 16
8162: PUSH
8163: LD_INT 0
8165: ST_TO_ADDR
// defeated_specs := [ ] ;
8166: LD_ADDR_LOC 17
8170: PUSH
8171: EMPTY
8172: ST_TO_ADDR
// for i = 1 to side_positions do
8173: LD_ADDR_VAR 0 2
8177: PUSH
8178: DOUBLE
8179: LD_INT 1
8181: DEC
8182: ST_TO_ADDR
8183: LD_EXP 36
8187: PUSH
8188: FOR_TO
8189: IFFALSE 8229
// if not side_positions [ i ] then
8191: LD_EXP 36
8195: PUSH
8196: LD_VAR 0 2
8200: ARRAY
8201: NOT
8202: IFFALSE 8227
// defeated = replace ( defeated , i , true ) ;
8204: LD_ADDR_LOC 14
8208: PUSH
8209: LD_LOC 14
8213: PPUSH
8214: LD_VAR 0 2
8218: PPUSH
8219: LD_INT 1
8221: PPUSH
8222: CALL_OW 1
8226: ST_TO_ADDR
8227: GO 8188
8229: POP
8230: POP
// end ;
8231: LD_VAR 0 1
8235: RET
// function CanWinLoose ; begin
8236: LD_INT 0
8238: PPUSH
// Result := true ;
8239: LD_ADDR_VAR 0 1
8243: PUSH
8244: LD_INT 1
8246: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8247: CALL_OW 518
8251: PUSH
8252: CALL_OW 519
8256: PUSH
8257: LD_INT 0
8259: GREATER
8260: AND
8261: IFFALSE 8271
// Result := false ;
8263: LD_ADDR_VAR 0 1
8267: PUSH
8268: LD_INT 0
8270: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8271: CALL_OW 531
8275: PUSH
8276: CALL_OW 519
8280: PUSH
8281: LD_INT 1
8283: GREATER
8284: AND
8285: IFFALSE 8295
// Result := false ;
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: LD_INT 0
8294: ST_TO_ADDR
// end ;
8295: LD_VAR 0 1
8299: RET
// export function HasPower ( i ) ; var k , h ; begin
8300: LD_INT 0
8302: PPUSH
8303: PPUSH
8304: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8305: LD_VAR 0 1
8309: PPUSH
8310: CALL_OW 108
8314: NOT
8315: PUSH
8316: LD_EXP 35
8320: PUSH
8321: LD_VAR 0 1
8325: ARRAY
8326: NOT
8327: AND
8328: PUSH
8329: LD_OWVAR 4
8333: AND
8334: IFFALSE 8346
// begin result = false ;
8336: LD_ADDR_VAR 0 2
8340: PUSH
8341: LD_INT 0
8343: ST_TO_ADDR
// end else
8344: GO 8641
// case def_win_rules of 0 :
8346: LD_EXP 32
8350: PUSH
8351: LD_INT 0
8353: DOUBLE
8354: EQUAL
8355: IFTRUE 8359
8357: GO 8522
8359: POP
// if def_people_respawning then
8360: LD_EXP 11
8364: IFFALSE 8455
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8366: LD_ADDR_VAR 0 2
8370: PUSH
8371: LD_INT 22
8373: PUSH
8374: LD_VAR 0 1
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: LD_INT 2
8385: PUSH
8386: LD_INT 21
8388: PUSH
8389: LD_INT 1
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: LD_INT 33
8398: PUSH
8399: LD_INT 3
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: LD_INT 33
8408: PUSH
8409: LD_INT 5
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PUSH
8416: LD_INT 30
8418: PUSH
8419: LD_INT 0
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 30
8428: PUSH
8429: LD_INT 1
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PPUSH
8448: CALL_OW 69
8452: ST_TO_ADDR
8453: GO 8520
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8455: LD_ADDR_VAR 0 2
8459: PUSH
8460: LD_INT 22
8462: PUSH
8463: LD_VAR 0 1
8467: PUSH
8468: EMPTY
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 2
8474: PUSH
8475: LD_INT 21
8477: PUSH
8478: LD_INT 1
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 33
8487: PUSH
8488: LD_INT 3
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PUSH
8495: LD_INT 33
8497: PUSH
8498: LD_INT 5
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PPUSH
8515: CALL_OW 69
8519: ST_TO_ADDR
8520: GO 8641
8522: LD_INT 1
8524: DOUBLE
8525: EQUAL
8526: IFTRUE 8530
8528: GO 8569
8530: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8531: LD_ADDR_VAR 0 2
8535: PUSH
8536: LD_INT 22
8538: PUSH
8539: LD_VAR 0 1
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: LD_INT 21
8550: PUSH
8551: LD_INT 1
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PPUSH
8562: CALL_OW 69
8566: ST_TO_ADDR
8567: GO 8641
8569: LD_INT 2
8571: DOUBLE
8572: EQUAL
8573: IFTRUE 8577
8575: GO 8640
8577: POP
// begin h = false ;
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: LD_INT 0
8585: ST_TO_ADDR
// for k in heroes [ i ] do
8586: LD_ADDR_VAR 0 3
8590: PUSH
8591: LD_EXP 49
8595: PUSH
8596: LD_VAR 0 1
8600: ARRAY
8601: PUSH
8602: FOR_IN
8603: IFFALSE 8626
// if IsLive ( k ) then
8605: LD_VAR 0 3
8609: PPUSH
8610: CALL_OW 300
8614: IFFALSE 8624
// h = true ;
8616: LD_ADDR_VAR 0 4
8620: PUSH
8621: LD_INT 1
8623: ST_TO_ADDR
8624: GO 8602
8626: POP
8627: POP
// Result := h ;
8628: LD_ADDR_VAR 0 2
8632: PUSH
8633: LD_VAR 0 4
8637: ST_TO_ADDR
// end ; end ;
8638: GO 8641
8640: POP
// end ;
8641: LD_VAR 0 2
8645: RET
// function AlliedSides ( i , j ) ; begin
8646: LD_INT 0
8648: PPUSH
// Result := false ;
8649: LD_ADDR_VAR 0 3
8653: PUSH
8654: LD_INT 0
8656: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8657: LD_VAR 0 1
8661: PPUSH
8662: LD_VAR 0 2
8666: PPUSH
8667: CALL_OW 81
8671: PUSH
8672: LD_INT 1
8674: EQUAL
8675: PUSH
8676: LD_VAR 0 2
8680: PPUSH
8681: LD_VAR 0 1
8685: PPUSH
8686: CALL_OW 81
8690: PUSH
8691: LD_INT 1
8693: EQUAL
8694: AND
8695: PUSH
8696: LD_VAR 0 1
8700: PPUSH
8701: CALL_OW 83
8705: AND
8706: PUSH
8707: LD_VAR 0 2
8711: PPUSH
8712: CALL_OW 83
8716: AND
8717: IFFALSE 8727
// Result := true ;
8719: LD_ADDR_VAR 0 3
8723: PUSH
8724: LD_INT 1
8726: ST_TO_ADDR
// end ;
8727: LD_VAR 0 3
8731: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8732: CALL 8236 0 0
8736: PUSH
8737: LD_LOC 15
8741: NOT
8742: AND
8743: IFFALSE 8759
8745: GO 8747
8747: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8748: LD_ADDR_EXP 58
8752: PUSH
8753: LD_STRING #Player-Ended
8755: PUSH
8756: EMPTY
8757: LIST
8758: ST_TO_ADDR
8759: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8760: CALL 8236 0 0
8764: PUSH
8765: LD_LOC 15
8769: AND
8770: IFFALSE 8779
8772: GO 8774
8774: DISABLE
// YouLostInMultiplayer ;
8775: CALL_OW 107
8779: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8780: CALL 8236 0 0
8784: NOT
8785: PUSH
8786: CALL_OW 531
8790: NOT
8791: AND
8792: IFFALSE 8808
8794: GO 8796
8796: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8797: LD_ADDR_EXP 58
8801: PUSH
8802: LD_STRING #server-wait
8804: PUSH
8805: EMPTY
8806: LIST
8807: ST_TO_ADDR
8808: END
// every 100 trigger IAmSpec do
8809: CALL_OW 531
8813: IFFALSE 8829
8815: GO 8817
8817: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8818: LD_ADDR_EXP 58
8822: PUSH
8823: LD_STRING #Player-IAmSpec
8825: PUSH
8826: EMPTY
8827: LIST
8828: ST_TO_ADDR
8829: END
// every 100 trigger GameEnded and IAmSpec do
8830: LD_LOC 15
8834: PUSH
8835: CALL_OW 531
8839: AND
8840: IFFALSE 8849
8842: GO 8844
8844: DISABLE
// YouLostInMultiplayer ;
8845: CALL_OW 107
8849: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8850: CALL 8236 0 0
8854: PUSH
8855: LD_LOC 15
8859: NOT
8860: AND
8861: IFFALSE 8877
8863: GO 8865
8865: DISABLE
// WaitServerStrings = [ $player-win ] ;
8866: LD_ADDR_EXP 58
8870: PUSH
8871: LD_STRING $player-win
8873: PUSH
8874: EMPTY
8875: LIST
8876: ST_TO_ADDR
8877: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8878: CALL 8236 0 0
8882: PUSH
8883: LD_LOC 15
8887: AND
8888: IFFALSE 8912
8890: GO 8892
8892: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8893: LD_EXP 37
8897: PUSH
8898: LD_OWVAR 7
8902: ARRAY
8903: PPUSH
8904: CALL 7907 0 1
// YouWinInMultiplayer ;
8908: CALL_OW 106
// end ;
8912: END
// every 100 trigger isEditor marked 401 do
8913: LD_OWVAR 84
8917: IFFALSE 8933
8919: GO 8921
8921: DISABLE
// Debug_Strings = [ You won ] ;
8922: LD_ADDR_OWVAR 48
8926: PUSH
8927: LD_STRING You won
8929: PUSH
8930: EMPTY
8931: LIST
8932: ST_TO_ADDR
8933: END
// every 100 trigger isEditor marked 400 do
8934: LD_OWVAR 84
8938: IFFALSE 8954
8940: GO 8942
8942: DISABLE
// Debug_Strings = [ You loss ] ;
8943: LD_ADDR_OWVAR 48
8947: PUSH
8948: LD_STRING You loss
8950: PUSH
8951: EMPTY
8952: LIST
8953: ST_TO_ADDR
8954: END
// every 100 marked 98 do var i , un ;
8955: GO 8957
8957: DISABLE
8958: LD_INT 0
8960: PPUSH
8961: PPUSH
// begin for i = 1 to side_positions do
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_EXP 36
8976: PUSH
8977: FOR_TO
8978: IFFALSE 9065
// begin if side_positions [ i ] then
8980: LD_EXP 36
8984: PUSH
8985: LD_VAR 0 1
8989: ARRAY
8990: IFFALSE 9063
// if not HasPower ( i ) and not defeated [ i ] then
8992: LD_VAR 0 1
8996: PPUSH
8997: CALL 8300 0 1
9001: NOT
9002: PUSH
9003: LD_LOC 14
9007: PUSH
9008: LD_VAR 0 1
9012: ARRAY
9013: NOT
9014: AND
9015: IFFALSE 9063
// begin defeated = replace ( defeated , i , true ) ;
9017: LD_ADDR_LOC 14
9021: PUSH
9022: LD_LOC 14
9026: PPUSH
9027: LD_VAR 0 1
9031: PPUSH
9032: LD_INT 1
9034: PPUSH
9035: CALL_OW 1
9039: ST_TO_ADDR
// if i = mp_player_side then
9040: LD_VAR 0 1
9044: PUSH
9045: LD_OWVAR 7
9049: EQUAL
9050: IFFALSE 9063
// begin Multiplayer_Loose_Message ;
9052: CALL_OW 521
// SetPlayerSpectator ( ) ;
9056: CALL_OW 572
// enable ( 400 ) ;
9060: LD_INT 400
9062: ENABLE_MARKED
// end ; end ; end ;
9063: GO 8977
9065: POP
9066: POP
// DidGameEnd ;
9067: CALL 9082 0 0
// if not GameEnded then
9071: LD_LOC 15
9075: NOT
9076: IFFALSE 9079
// enable ;
9078: ENABLE
// end ;
9079: PPOPN 2
9081: END
// function DidGameEnd ; var i , k , enemy ; begin
9082: LD_INT 0
9084: PPUSH
9085: PPUSH
9086: PPUSH
9087: PPUSH
// enemy = [ ] ;
9088: LD_ADDR_VAR 0 4
9092: PUSH
9093: EMPTY
9094: ST_TO_ADDR
// for i = 1 to side_positions do
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: DOUBLE
9101: LD_INT 1
9103: DEC
9104: ST_TO_ADDR
9105: LD_EXP 36
9109: PUSH
9110: FOR_TO
9111: IFFALSE 9205
// if not defeated [ i ] then
9113: LD_LOC 14
9117: PUSH
9118: LD_VAR 0 2
9122: ARRAY
9123: NOT
9124: IFFALSE 9203
// for k = 1 to side_positions do
9126: LD_ADDR_VAR 0 3
9130: PUSH
9131: DOUBLE
9132: LD_INT 1
9134: DEC
9135: ST_TO_ADDR
9136: LD_EXP 36
9140: PUSH
9141: FOR_TO
9142: IFFALSE 9201
// if not defeated [ k ] then
9144: LD_LOC 14
9148: PUSH
9149: LD_VAR 0 3
9153: ARRAY
9154: NOT
9155: IFFALSE 9199
// if not AlliedSides ( i , k ) then
9157: LD_VAR 0 2
9161: PPUSH
9162: LD_VAR 0 3
9166: PPUSH
9167: CALL 8646 0 2
9171: NOT
9172: IFFALSE 9199
// enemy = enemy ^ [ i , k ] ;
9174: LD_ADDR_VAR 0 4
9178: PUSH
9179: LD_VAR 0 4
9183: PUSH
9184: LD_VAR 0 2
9188: PUSH
9189: LD_VAR 0 3
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: ADD
9198: ST_TO_ADDR
9199: GO 9141
9201: POP
9202: POP
9203: GO 9110
9205: POP
9206: POP
// if not enemy then
9207: LD_VAR 0 4
9211: NOT
9212: IFFALSE 9238
// begin GameEnded = true ;
9214: LD_ADDR_LOC 15
9218: PUSH
9219: LD_INT 1
9221: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9222: LD_LOC 14
9226: PUSH
9227: LD_OWVAR 7
9231: ARRAY
9232: NOT
9233: IFFALSE 9238
// enable ( 401 ) ;
9235: LD_INT 401
9237: ENABLE_MARKED
// end ; end ;
9238: LD_VAR 0 1
9242: RET
// function unfog ; var k , friends ; begin
9243: LD_INT 0
9245: PPUSH
9246: PPUSH
9247: PPUSH
// for k = 1 to side_positions do
9248: LD_ADDR_VAR 0 2
9252: PUSH
9253: DOUBLE
9254: LD_INT 1
9256: DEC
9257: ST_TO_ADDR
9258: LD_EXP 36
9262: PUSH
9263: FOR_TO
9264: IFFALSE 9320
// if not defeated [ k ] then
9266: LD_LOC 14
9270: PUSH
9271: LD_VAR 0 2
9275: ARRAY
9276: NOT
9277: IFFALSE 9318
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9279: LD_OWVAR 7
9283: PPUSH
9284: LD_VAR 0 2
9288: PPUSH
9289: CALL_OW 81
9293: PUSH
9294: LD_INT 1
9296: PUSH
9297: EMPTY
9298: LIST
9299: IN
9300: IFFALSE 9318
// friends = friends ^ k ;
9302: LD_ADDR_VAR 0 3
9306: PUSH
9307: LD_VAR 0 3
9311: PUSH
9312: LD_VAR 0 2
9316: ADD
9317: ST_TO_ADDR
9318: GO 9263
9320: POP
9321: POP
// if not friends then
9322: LD_VAR 0 3
9326: NOT
9327: IFFALSE 9341
// begin SetPlayerSpectator ( ) ;
9329: CALL_OW 572
// unfoged = true ;
9333: LD_ADDR_LOC 16
9337: PUSH
9338: LD_INT 1
9340: ST_TO_ADDR
// end ; end ;
9341: LD_VAR 0 1
9345: RET
// export function MakeGameEnd ; begin
9346: LD_INT 0
9348: PPUSH
// SetPlayerSpectator ( ) ;
9349: CALL_OW 572
// unfoged = true ;
9353: LD_ADDR_LOC 16
9357: PUSH
9358: LD_INT 1
9360: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9361: LD_INT 175
9363: PPUSH
9364: CALL_OW 67
// GameEnded = true ;
9368: LD_ADDR_LOC 15
9372: PUSH
9373: LD_INT 1
9375: ST_TO_ADDR
// end ;
9376: LD_VAR 0 1
9380: RET
// export function GetGameEnded ; begin
9381: LD_INT 0
9383: PPUSH
// result = GameEnded ;
9384: LD_ADDR_VAR 0 1
9388: PUSH
9389: LD_LOC 15
9393: ST_TO_ADDR
// end ; end_of_file
9394: LD_VAR 0 1
9398: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9399: LD_INT 0
9401: PPUSH
9402: PPUSH
9403: PPUSH
// for side = 1 to 8 do
9404: LD_ADDR_VAR 0 2
9408: PUSH
9409: DOUBLE
9410: LD_INT 1
9412: DEC
9413: ST_TO_ADDR
9414: LD_INT 8
9416: PUSH
9417: FOR_TO
9418: IFFALSE 9539
// begin for i = 1 to 72 do
9420: LD_ADDR_VAR 0 3
9424: PUSH
9425: DOUBLE
9426: LD_INT 1
9428: DEC
9429: ST_TO_ADDR
9430: LD_INT 72
9432: PUSH
9433: FOR_TO
9434: IFFALSE 9465
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_VAR 0 2
9445: PPUSH
9446: LD_INT 0
9448: PPUSH
9449: LD_VAR 0 3
9453: PPUSH
9454: CALL_OW 565
9458: PPUSH
9459: CALL_OW 322
9463: GO 9433
9465: POP
9466: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9467: LD_INT 73
9469: PPUSH
9470: LD_VAR 0 2
9474: PPUSH
9475: LD_INT 0
9477: PPUSH
9478: LD_INT 25
9480: PPUSH
9481: CALL_OW 565
9485: PPUSH
9486: CALL_OW 322
// for i = 0 to 40 do
9490: LD_ADDR_VAR 0 3
9494: PUSH
9495: DOUBLE
9496: LD_INT 0
9498: DEC
9499: ST_TO_ADDR
9500: LD_INT 40
9502: PUSH
9503: FOR_TO
9504: IFFALSE 9535
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9506: LD_VAR 0 3
9510: PPUSH
9511: LD_VAR 0 2
9515: PPUSH
9516: LD_INT 1
9518: PPUSH
9519: LD_VAR 0 3
9523: PPUSH
9524: CALL_OW 565
9528: PPUSH
9529: CALL_OW 324
9533: GO 9503
9535: POP
9536: POP
// end ;
9537: GO 9417
9539: POP
9540: POP
// end ;
9541: LD_VAR 0 1
9545: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9546: LD_INT 0
9548: PPUSH
9549: PPUSH
9550: PPUSH
// for side = 1 to 8 do
9551: LD_ADDR_VAR 0 3
9555: PUSH
9556: DOUBLE
9557: LD_INT 1
9559: DEC
9560: ST_TO_ADDR
9561: LD_INT 8
9563: PUSH
9564: FOR_TO
9565: IFFALSE 13561
// begin for i = 1 to 73 do
9567: LD_ADDR_VAR 0 4
9571: PUSH
9572: DOUBLE
9573: LD_INT 1
9575: DEC
9576: ST_TO_ADDR
9577: LD_INT 73
9579: PUSH
9580: FOR_TO
9581: IFFALSE 9602
// SetTech ( i , side , state_disabled ) ;
9583: LD_VAR 0 4
9587: PPUSH
9588: LD_VAR 0 3
9592: PPUSH
9593: LD_INT 0
9595: PPUSH
9596: CALL_OW 322
9600: GO 9580
9602: POP
9603: POP
// for i = 0 to 40 do
9604: LD_ADDR_VAR 0 4
9608: PUSH
9609: DOUBLE
9610: LD_INT 0
9612: DEC
9613: ST_TO_ADDR
9614: LD_INT 40
9616: PUSH
9617: FOR_TO
9618: IFFALSE 9639
// SetRestrict ( i , side , false ) ;
9620: LD_VAR 0 4
9624: PPUSH
9625: LD_VAR 0 3
9629: PPUSH
9630: LD_INT 0
9632: PPUSH
9633: CALL_OW 324
9637: GO 9617
9639: POP
9640: POP
// case level of 1 :
9641: LD_VAR 0 1
9645: PUSH
9646: LD_INT 1
9648: DOUBLE
9649: EQUAL
9650: IFTRUE 9654
9652: GO 9807
9654: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9655: LD_INT 35
9657: PPUSH
9658: LD_VAR 0 3
9662: PPUSH
9663: LD_INT 1
9665: PPUSH
9666: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9670: LD_INT 45
9672: PPUSH
9673: LD_VAR 0 3
9677: PPUSH
9678: LD_INT 1
9680: PPUSH
9681: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9685: LD_INT 46
9687: PPUSH
9688: LD_VAR 0 3
9692: PPUSH
9693: LD_INT 1
9695: PPUSH
9696: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9700: LD_INT 47
9702: PPUSH
9703: LD_VAR 0 3
9707: PPUSH
9708: LD_INT 1
9710: PPUSH
9711: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9715: LD_INT 0
9717: PPUSH
9718: LD_VAR 0 3
9722: PPUSH
9723: LD_INT 1
9725: PPUSH
9726: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9730: LD_INT 2
9732: PPUSH
9733: LD_VAR 0 3
9737: PPUSH
9738: LD_INT 1
9740: PPUSH
9741: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9745: LD_INT 4
9747: PPUSH
9748: LD_VAR 0 3
9752: PPUSH
9753: LD_INT 1
9755: PPUSH
9756: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9760: LD_INT 6
9762: PPUSH
9763: LD_VAR 0 3
9767: PPUSH
9768: LD_INT 1
9770: PPUSH
9771: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9775: LD_INT 29
9777: PPUSH
9778: LD_VAR 0 3
9782: PPUSH
9783: LD_INT 1
9785: PPUSH
9786: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9790: LD_INT 31
9792: PPUSH
9793: LD_VAR 0 3
9797: PPUSH
9798: LD_INT 1
9800: PPUSH
9801: CALL_OW 324
// end ; 2 :
9805: GO 13559
9807: LD_INT 2
9809: DOUBLE
9810: EQUAL
9811: IFTRUE 9815
9813: GO 10013
9815: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9816: LD_INT 35
9818: PPUSH
9819: LD_VAR 0 3
9823: PPUSH
9824: LD_INT 1
9826: PPUSH
9827: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9831: LD_INT 45
9833: PPUSH
9834: LD_VAR 0 3
9838: PPUSH
9839: LD_INT 1
9841: PPUSH
9842: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9846: LD_INT 46
9848: PPUSH
9849: LD_VAR 0 3
9853: PPUSH
9854: LD_INT 1
9856: PPUSH
9857: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9861: LD_INT 47
9863: PPUSH
9864: LD_VAR 0 3
9868: PPUSH
9869: LD_INT 1
9871: PPUSH
9872: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9876: LD_INT 1
9878: PPUSH
9879: LD_VAR 0 3
9883: PPUSH
9884: LD_INT 1
9886: PPUSH
9887: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9891: LD_INT 2
9893: PPUSH
9894: LD_VAR 0 3
9898: PPUSH
9899: LD_INT 1
9901: PPUSH
9902: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9906: LD_INT 11
9908: PPUSH
9909: LD_VAR 0 3
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9921: LD_INT 0
9923: PPUSH
9924: LD_VAR 0 3
9928: PPUSH
9929: LD_INT 1
9931: PPUSH
9932: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9936: LD_INT 2
9938: PPUSH
9939: LD_VAR 0 3
9943: PPUSH
9944: LD_INT 1
9946: PPUSH
9947: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9951: LD_INT 4
9953: PPUSH
9954: LD_VAR 0 3
9958: PPUSH
9959: LD_INT 1
9961: PPUSH
9962: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9966: LD_INT 6
9968: PPUSH
9969: LD_VAR 0 3
9973: PPUSH
9974: LD_INT 1
9976: PPUSH
9977: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9981: LD_INT 29
9983: PPUSH
9984: LD_VAR 0 3
9988: PPUSH
9989: LD_INT 1
9991: PPUSH
9992: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9996: LD_INT 31
9998: PPUSH
9999: LD_VAR 0 3
10003: PPUSH
10004: LD_INT 1
10006: PPUSH
10007: CALL_OW 324
// end ; 3 :
10011: GO 13559
10013: LD_INT 3
10015: DOUBLE
10016: EQUAL
10017: IFTRUE 10021
10019: GO 10474
10021: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10022: LD_INT 35
10024: PPUSH
10025: LD_VAR 0 3
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10037: LD_INT 45
10039: PPUSH
10040: LD_VAR 0 3
10044: PPUSH
10045: LD_INT 1
10047: PPUSH
10048: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10052: LD_INT 46
10054: PPUSH
10055: LD_VAR 0 3
10059: PPUSH
10060: LD_INT 1
10062: PPUSH
10063: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10067: LD_INT 47
10069: PPUSH
10070: LD_VAR 0 3
10074: PPUSH
10075: LD_INT 1
10077: PPUSH
10078: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10082: LD_INT 1
10084: PPUSH
10085: LD_VAR 0 3
10089: PPUSH
10090: LD_INT 1
10092: PPUSH
10093: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10097: LD_INT 2
10099: PPUSH
10100: LD_VAR 0 3
10104: PPUSH
10105: LD_INT 1
10107: PPUSH
10108: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10112: LD_INT 11
10114: PPUSH
10115: LD_VAR 0 3
10119: PPUSH
10120: LD_INT 1
10122: PPUSH
10123: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10127: LD_INT 48
10129: PPUSH
10130: LD_VAR 0 3
10134: PPUSH
10135: LD_INT 1
10137: PPUSH
10138: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10142: LD_INT 69
10144: PPUSH
10145: LD_VAR 0 3
10149: PPUSH
10150: LD_INT 1
10152: PPUSH
10153: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10157: LD_INT 39
10159: PPUSH
10160: LD_VAR 0 3
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10172: LD_INT 43
10174: PPUSH
10175: LD_VAR 0 3
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10187: LD_INT 51
10189: PPUSH
10190: LD_VAR 0 3
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10202: LD_INT 6
10204: PPUSH
10205: LD_VAR 0 3
10209: PPUSH
10210: LD_INT 1
10212: PPUSH
10213: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10217: LD_INT 0
10219: PPUSH
10220: LD_VAR 0 3
10224: PPUSH
10225: LD_INT 1
10227: PPUSH
10228: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10232: LD_INT 2
10234: PPUSH
10235: LD_VAR 0 3
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10247: LD_INT 3
10249: PPUSH
10250: LD_VAR 0 3
10254: PPUSH
10255: LD_INT 1
10257: PPUSH
10258: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10262: LD_INT 4
10264: PPUSH
10265: LD_VAR 0 3
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10277: LD_INT 6
10279: PPUSH
10280: LD_VAR 0 3
10284: PPUSH
10285: LD_INT 1
10287: PPUSH
10288: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10292: LD_INT 7
10294: PPUSH
10295: LD_VAR 0 3
10299: PPUSH
10300: LD_INT 1
10302: PPUSH
10303: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10307: LD_INT 8
10309: PPUSH
10310: LD_VAR 0 3
10314: PPUSH
10315: LD_INT 1
10317: PPUSH
10318: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10322: LD_INT 10
10324: PPUSH
10325: LD_VAR 0 3
10329: PPUSH
10330: LD_INT 1
10332: PPUSH
10333: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10337: LD_INT 15
10339: PPUSH
10340: LD_VAR 0 3
10344: PPUSH
10345: LD_INT 1
10347: PPUSH
10348: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10352: LD_INT 16
10354: PPUSH
10355: LD_VAR 0 3
10359: PPUSH
10360: LD_INT 1
10362: PPUSH
10363: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10367: LD_INT 17
10369: PPUSH
10370: LD_VAR 0 3
10374: PPUSH
10375: LD_INT 1
10377: PPUSH
10378: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10382: LD_INT 20
10384: PPUSH
10385: LD_VAR 0 3
10389: PPUSH
10390: LD_INT 1
10392: PPUSH
10393: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10397: LD_INT 26
10399: PPUSH
10400: LD_VAR 0 3
10404: PPUSH
10405: LD_INT 1
10407: PPUSH
10408: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10412: LD_INT 27
10414: PPUSH
10415: LD_VAR 0 3
10419: PPUSH
10420: LD_INT 1
10422: PPUSH
10423: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10427: LD_INT 29
10429: PPUSH
10430: LD_VAR 0 3
10434: PPUSH
10435: LD_INT 1
10437: PPUSH
10438: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10442: LD_INT 31
10444: PPUSH
10445: LD_VAR 0 3
10449: PPUSH
10450: LD_INT 1
10452: PPUSH
10453: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10457: LD_INT 32
10459: PPUSH
10460: LD_VAR 0 3
10464: PPUSH
10465: LD_INT 1
10467: PPUSH
10468: CALL_OW 324
// end ; 4 :
10472: GO 13559
10474: LD_INT 4
10476: DOUBLE
10477: EQUAL
10478: IFTRUE 10482
10480: GO 11430
10482: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10483: LD_INT 35
10485: PPUSH
10486: LD_VAR 0 3
10490: PPUSH
10491: LD_INT 1
10493: PPUSH
10494: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10498: LD_INT 45
10500: PPUSH
10501: LD_VAR 0 3
10505: PPUSH
10506: LD_INT 1
10508: PPUSH
10509: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10513: LD_INT 46
10515: PPUSH
10516: LD_VAR 0 3
10520: PPUSH
10521: LD_INT 1
10523: PPUSH
10524: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10528: LD_INT 47
10530: PPUSH
10531: LD_VAR 0 3
10535: PPUSH
10536: LD_INT 1
10538: PPUSH
10539: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10543: LD_INT 1
10545: PPUSH
10546: LD_VAR 0 3
10550: PPUSH
10551: LD_INT 1
10553: PPUSH
10554: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10558: LD_INT 2
10560: PPUSH
10561: LD_VAR 0 3
10565: PPUSH
10566: LD_INT 1
10568: PPUSH
10569: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10573: LD_INT 11
10575: PPUSH
10576: LD_VAR 0 3
10580: PPUSH
10581: LD_INT 1
10583: PPUSH
10584: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10588: LD_INT 20
10590: PPUSH
10591: LD_VAR 0 3
10595: PPUSH
10596: LD_INT 1
10598: PPUSH
10599: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10603: LD_INT 48
10605: PPUSH
10606: LD_VAR 0 3
10610: PPUSH
10611: LD_INT 1
10613: PPUSH
10614: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10618: LD_INT 49
10620: PPUSH
10621: LD_VAR 0 3
10625: PPUSH
10626: LD_INT 1
10628: PPUSH
10629: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10633: LD_INT 69
10635: PPUSH
10636: LD_VAR 0 3
10640: PPUSH
10641: LD_INT 1
10643: PPUSH
10644: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10648: LD_INT 39
10650: PPUSH
10651: LD_VAR 0 3
10655: PPUSH
10656: LD_INT 1
10658: PPUSH
10659: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10663: LD_INT 34
10665: PPUSH
10666: LD_VAR 0 3
10670: PPUSH
10671: LD_INT 1
10673: PPUSH
10674: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10678: LD_INT 42
10680: PPUSH
10681: LD_VAR 0 3
10685: PPUSH
10686: LD_INT 1
10688: PPUSH
10689: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10693: LD_INT 44
10695: PPUSH
10696: LD_VAR 0 3
10700: PPUSH
10701: LD_INT 1
10703: PPUSH
10704: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10708: LD_INT 41
10710: PPUSH
10711: LD_VAR 0 3
10715: PPUSH
10716: LD_INT 1
10718: PPUSH
10719: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10723: LD_INT 43
10725: PPUSH
10726: LD_VAR 0 3
10730: PPUSH
10731: LD_INT 1
10733: PPUSH
10734: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10738: LD_INT 70
10740: PPUSH
10741: LD_VAR 0 3
10745: PPUSH
10746: LD_INT 1
10748: PPUSH
10749: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10753: LD_INT 51
10755: PPUSH
10756: LD_VAR 0 3
10760: PPUSH
10761: LD_INT 1
10763: PPUSH
10764: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10768: LD_INT 52
10770: PPUSH
10771: LD_VAR 0 3
10775: PPUSH
10776: LD_INT 1
10778: PPUSH
10779: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10783: LD_INT 6
10785: PPUSH
10786: LD_VAR 0 3
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10798: LD_INT 15
10800: PPUSH
10801: LD_VAR 0 3
10805: PPUSH
10806: LD_INT 1
10808: PPUSH
10809: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10813: LD_INT 7
10815: PPUSH
10816: LD_VAR 0 3
10820: PPUSH
10821: LD_INT 1
10823: PPUSH
10824: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10828: LD_INT 12
10830: PPUSH
10831: LD_VAR 0 3
10835: PPUSH
10836: LD_INT 1
10838: PPUSH
10839: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10843: LD_INT 18
10845: PPUSH
10846: LD_VAR 0 3
10850: PPUSH
10851: LD_INT 1
10853: PPUSH
10854: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10858: LD_INT 60
10860: PPUSH
10861: LD_VAR 0 3
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10873: LD_INT 9
10875: PPUSH
10876: LD_VAR 0 3
10880: PPUSH
10881: LD_INT 1
10883: PPUSH
10884: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10888: LD_INT 30
10890: PPUSH
10891: LD_VAR 0 3
10895: PPUSH
10896: LD_INT 1
10898: PPUSH
10899: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10903: LD_INT 37
10905: PPUSH
10906: LD_VAR 0 3
10910: PPUSH
10911: LD_INT 1
10913: PPUSH
10914: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10918: LD_INT 5
10920: PPUSH
10921: LD_VAR 0 3
10925: PPUSH
10926: LD_INT 1
10928: PPUSH
10929: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10933: LD_INT 66
10935: PPUSH
10936: LD_VAR 0 3
10940: PPUSH
10941: LD_INT 1
10943: PPUSH
10944: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10948: LD_INT 21
10950: PPUSH
10951: LD_VAR 0 3
10955: PPUSH
10956: LD_INT 1
10958: PPUSH
10959: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10963: LD_INT 22
10965: PPUSH
10966: LD_VAR 0 3
10970: PPUSH
10971: LD_INT 1
10973: PPUSH
10974: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10978: LD_INT 54
10980: PPUSH
10981: LD_VAR 0 3
10985: PPUSH
10986: LD_INT 1
10988: PPUSH
10989: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10993: LD_INT 0
10995: PPUSH
10996: LD_VAR 0 3
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11008: LD_INT 1
11010: PPUSH
11011: LD_VAR 0 3
11015: PPUSH
11016: LD_INT 1
11018: PPUSH
11019: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11023: LD_INT 2
11025: PPUSH
11026: LD_VAR 0 3
11030: PPUSH
11031: LD_INT 1
11033: PPUSH
11034: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11038: LD_INT 3
11040: PPUSH
11041: LD_VAR 0 3
11045: PPUSH
11046: LD_INT 1
11048: PPUSH
11049: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11053: LD_INT 4
11055: PPUSH
11056: LD_VAR 0 3
11060: PPUSH
11061: LD_INT 1
11063: PPUSH
11064: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11068: LD_INT 5
11070: PPUSH
11071: LD_VAR 0 3
11075: PPUSH
11076: LD_INT 1
11078: PPUSH
11079: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11083: LD_INT 6
11085: PPUSH
11086: LD_VAR 0 3
11090: PPUSH
11091: LD_INT 1
11093: PPUSH
11094: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11098: LD_INT 7
11100: PPUSH
11101: LD_VAR 0 3
11105: PPUSH
11106: LD_INT 1
11108: PPUSH
11109: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11113: LD_INT 8
11115: PPUSH
11116: LD_VAR 0 3
11120: PPUSH
11121: LD_INT 1
11123: PPUSH
11124: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11128: LD_INT 10
11130: PPUSH
11131: LD_VAR 0 3
11135: PPUSH
11136: LD_INT 1
11138: PPUSH
11139: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11143: LD_INT 11
11145: PPUSH
11146: LD_VAR 0 3
11150: PPUSH
11151: LD_INT 1
11153: PPUSH
11154: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11158: LD_INT 12
11160: PPUSH
11161: LD_VAR 0 3
11165: PPUSH
11166: LD_INT 1
11168: PPUSH
11169: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11173: LD_INT 13
11175: PPUSH
11176: LD_VAR 0 3
11180: PPUSH
11181: LD_INT 1
11183: PPUSH
11184: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11188: LD_INT 14
11190: PPUSH
11191: LD_VAR 0 3
11195: PPUSH
11196: LD_INT 1
11198: PPUSH
11199: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11203: LD_INT 15
11205: PPUSH
11206: LD_VAR 0 3
11210: PPUSH
11211: LD_INT 1
11213: PPUSH
11214: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11218: LD_INT 16
11220: PPUSH
11221: LD_VAR 0 3
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11233: LD_INT 17
11235: PPUSH
11236: LD_VAR 0 3
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11248: LD_INT 19
11250: PPUSH
11251: LD_VAR 0 3
11255: PPUSH
11256: LD_INT 1
11258: PPUSH
11259: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11263: LD_INT 20
11265: PPUSH
11266: LD_VAR 0 3
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11278: LD_INT 21
11280: PPUSH
11281: LD_VAR 0 3
11285: PPUSH
11286: LD_INT 1
11288: PPUSH
11289: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11293: LD_INT 23
11295: PPUSH
11296: LD_VAR 0 3
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11308: LD_INT 26
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11323: LD_INT 27
11325: PPUSH
11326: LD_VAR 0 3
11330: PPUSH
11331: LD_INT 1
11333: PPUSH
11334: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11338: LD_INT 28
11340: PPUSH
11341: LD_VAR 0 3
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11353: LD_INT 29
11355: PPUSH
11356: LD_VAR 0 3
11360: PPUSH
11361: LD_INT 1
11363: PPUSH
11364: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11368: LD_INT 30
11370: PPUSH
11371: LD_VAR 0 3
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11383: LD_INT 31
11385: PPUSH
11386: LD_VAR 0 3
11390: PPUSH
11391: LD_INT 1
11393: PPUSH
11394: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11398: LD_INT 32
11400: PPUSH
11401: LD_VAR 0 3
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11413: LD_INT 36
11415: PPUSH
11416: LD_VAR 0 3
11420: PPUSH
11421: LD_INT 1
11423: PPUSH
11424: CALL_OW 324
// end ; 5 :
11428: GO 13559
11430: LD_INT 5
11432: DOUBLE
11433: EQUAL
11434: IFTRUE 11438
11436: GO 12551
11438: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11439: LD_INT 35
11441: PPUSH
11442: LD_VAR 0 3
11446: PPUSH
11447: LD_INT 1
11449: PPUSH
11450: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11454: LD_INT 45
11456: PPUSH
11457: LD_VAR 0 3
11461: PPUSH
11462: LD_INT 1
11464: PPUSH
11465: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11469: LD_INT 46
11471: PPUSH
11472: LD_VAR 0 3
11476: PPUSH
11477: LD_INT 1
11479: PPUSH
11480: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11484: LD_INT 47
11486: PPUSH
11487: LD_VAR 0 3
11491: PPUSH
11492: LD_INT 1
11494: PPUSH
11495: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11499: LD_INT 1
11501: PPUSH
11502: LD_VAR 0 3
11506: PPUSH
11507: LD_INT 1
11509: PPUSH
11510: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11514: LD_INT 2
11516: PPUSH
11517: LD_VAR 0 3
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11529: LD_INT 11
11531: PPUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11544: LD_INT 20
11546: PPUSH
11547: LD_VAR 0 3
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11559: LD_INT 48
11561: PPUSH
11562: LD_VAR 0 3
11566: PPUSH
11567: LD_INT 1
11569: PPUSH
11570: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11574: LD_INT 49
11576: PPUSH
11577: LD_VAR 0 3
11581: PPUSH
11582: LD_INT 1
11584: PPUSH
11585: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11589: LD_INT 69
11591: PPUSH
11592: LD_VAR 0 3
11596: PPUSH
11597: LD_INT 1
11599: PPUSH
11600: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11604: LD_INT 39
11606: PPUSH
11607: LD_VAR 0 3
11611: PPUSH
11612: LD_INT 1
11614: PPUSH
11615: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11619: LD_INT 34
11621: PPUSH
11622: LD_VAR 0 3
11626: PPUSH
11627: LD_INT 1
11629: PPUSH
11630: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11634: LD_INT 42
11636: PPUSH
11637: LD_VAR 0 3
11641: PPUSH
11642: LD_INT 1
11644: PPUSH
11645: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11649: LD_INT 44
11651: PPUSH
11652: LD_VAR 0 3
11656: PPUSH
11657: LD_INT 1
11659: PPUSH
11660: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11664: LD_INT 41
11666: PPUSH
11667: LD_VAR 0 3
11671: PPUSH
11672: LD_INT 1
11674: PPUSH
11675: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11679: LD_INT 40
11681: PPUSH
11682: LD_VAR 0 3
11686: PPUSH
11687: LD_INT 1
11689: PPUSH
11690: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11694: LD_INT 43
11696: PPUSH
11697: LD_VAR 0 3
11701: PPUSH
11702: LD_INT 1
11704: PPUSH
11705: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11709: LD_INT 70
11711: PPUSH
11712: LD_VAR 0 3
11716: PPUSH
11717: LD_INT 1
11719: PPUSH
11720: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11724: LD_INT 51
11726: PPUSH
11727: LD_VAR 0 3
11731: PPUSH
11732: LD_INT 1
11734: PPUSH
11735: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11739: LD_INT 52
11741: PPUSH
11742: LD_VAR 0 3
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11754: LD_INT 6
11756: PPUSH
11757: LD_VAR 0 3
11761: PPUSH
11762: LD_INT 1
11764: PPUSH
11765: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11769: LD_INT 15
11771: PPUSH
11772: LD_VAR 0 3
11776: PPUSH
11777: LD_INT 1
11779: PPUSH
11780: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11784: LD_INT 7
11786: PPUSH
11787: LD_VAR 0 3
11791: PPUSH
11792: LD_INT 1
11794: PPUSH
11795: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11799: LD_INT 12
11801: PPUSH
11802: LD_VAR 0 3
11806: PPUSH
11807: LD_INT 1
11809: PPUSH
11810: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11814: LD_INT 17
11816: PPUSH
11817: LD_VAR 0 3
11821: PPUSH
11822: LD_INT 1
11824: PPUSH
11825: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11829: LD_INT 18
11831: PPUSH
11832: LD_VAR 0 3
11836: PPUSH
11837: LD_INT 1
11839: PPUSH
11840: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11844: LD_INT 60
11846: PPUSH
11847: LD_VAR 0 3
11851: PPUSH
11852: LD_INT 1
11854: PPUSH
11855: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11859: LD_INT 32
11861: PPUSH
11862: LD_VAR 0 3
11866: PPUSH
11867: LD_INT 1
11869: PPUSH
11870: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11874: LD_INT 9
11876: PPUSH
11877: LD_VAR 0 3
11881: PPUSH
11882: LD_INT 1
11884: PPUSH
11885: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11889: LD_INT 57
11891: PPUSH
11892: LD_VAR 0 3
11896: PPUSH
11897: LD_INT 1
11899: PPUSH
11900: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11904: LD_INT 30
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: LD_INT 1
11914: PPUSH
11915: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11919: LD_INT 37
11921: PPUSH
11922: LD_VAR 0 3
11926: PPUSH
11927: LD_INT 1
11929: PPUSH
11930: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11934: LD_INT 63
11936: PPUSH
11937: LD_VAR 0 3
11941: PPUSH
11942: LD_INT 1
11944: PPUSH
11945: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11949: LD_INT 3
11951: PPUSH
11952: LD_VAR 0 3
11956: PPUSH
11957: LD_INT 1
11959: PPUSH
11960: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11964: LD_INT 4
11966: PPUSH
11967: LD_VAR 0 3
11971: PPUSH
11972: LD_INT 1
11974: PPUSH
11975: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11979: LD_INT 5
11981: PPUSH
11982: LD_VAR 0 3
11986: PPUSH
11987: LD_INT 1
11989: PPUSH
11990: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11994: LD_INT 66
11996: PPUSH
11997: LD_VAR 0 3
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12009: LD_INT 21
12011: PPUSH
12012: LD_VAR 0 3
12016: PPUSH
12017: LD_INT 1
12019: PPUSH
12020: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12024: LD_INT 22
12026: PPUSH
12027: LD_VAR 0 3
12031: PPUSH
12032: LD_INT 1
12034: PPUSH
12035: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12039: LD_INT 19
12041: PPUSH
12042: LD_VAR 0 3
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12054: LD_INT 54
12056: PPUSH
12057: LD_VAR 0 3
12061: PPUSH
12062: LD_INT 1
12064: PPUSH
12065: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12069: LD_INT 55
12071: PPUSH
12072: LD_VAR 0 3
12076: PPUSH
12077: LD_INT 1
12079: PPUSH
12080: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12084: LD_INT 0
12086: PPUSH
12087: LD_VAR 0 3
12091: PPUSH
12092: LD_INT 1
12094: PPUSH
12095: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12099: LD_INT 1
12101: PPUSH
12102: LD_VAR 0 3
12106: PPUSH
12107: LD_INT 1
12109: PPUSH
12110: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12114: LD_INT 2
12116: PPUSH
12117: LD_VAR 0 3
12121: PPUSH
12122: LD_INT 1
12124: PPUSH
12125: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12129: LD_INT 3
12131: PPUSH
12132: LD_VAR 0 3
12136: PPUSH
12137: LD_INT 1
12139: PPUSH
12140: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12144: LD_INT 4
12146: PPUSH
12147: LD_VAR 0 3
12151: PPUSH
12152: LD_INT 1
12154: PPUSH
12155: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12159: LD_INT 5
12161: PPUSH
12162: LD_VAR 0 3
12166: PPUSH
12167: LD_INT 1
12169: PPUSH
12170: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12174: LD_INT 6
12176: PPUSH
12177: LD_VAR 0 3
12181: PPUSH
12182: LD_INT 1
12184: PPUSH
12185: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12189: LD_INT 7
12191: PPUSH
12192: LD_VAR 0 3
12196: PPUSH
12197: LD_INT 1
12199: PPUSH
12200: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12204: LD_INT 8
12206: PPUSH
12207: LD_VAR 0 3
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12219: LD_INT 10
12221: PPUSH
12222: LD_VAR 0 3
12226: PPUSH
12227: LD_INT 1
12229: PPUSH
12230: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12234: LD_INT 11
12236: PPUSH
12237: LD_VAR 0 3
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12249: LD_INT 12
12251: PPUSH
12252: LD_VAR 0 3
12256: PPUSH
12257: LD_INT 1
12259: PPUSH
12260: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12264: LD_INT 13
12266: PPUSH
12267: LD_VAR 0 3
12271: PPUSH
12272: LD_INT 1
12274: PPUSH
12275: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12279: LD_INT 14
12281: PPUSH
12282: LD_VAR 0 3
12286: PPUSH
12287: LD_INT 1
12289: PPUSH
12290: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12294: LD_INT 15
12296: PPUSH
12297: LD_VAR 0 3
12301: PPUSH
12302: LD_INT 1
12304: PPUSH
12305: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12309: LD_INT 16
12311: PPUSH
12312: LD_VAR 0 3
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12324: LD_INT 17
12326: PPUSH
12327: LD_VAR 0 3
12331: PPUSH
12332: LD_INT 1
12334: PPUSH
12335: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12339: LD_INT 18
12341: PPUSH
12342: LD_VAR 0 3
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12354: LD_INT 19
12356: PPUSH
12357: LD_VAR 0 3
12361: PPUSH
12362: LD_INT 1
12364: PPUSH
12365: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12369: LD_INT 20
12371: PPUSH
12372: LD_VAR 0 3
12376: PPUSH
12377: LD_INT 1
12379: PPUSH
12380: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12384: LD_INT 21
12386: PPUSH
12387: LD_VAR 0 3
12391: PPUSH
12392: LD_INT 1
12394: PPUSH
12395: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12399: LD_INT 23
12401: PPUSH
12402: LD_VAR 0 3
12406: PPUSH
12407: LD_INT 1
12409: PPUSH
12410: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12414: LD_INT 26
12416: PPUSH
12417: LD_VAR 0 3
12421: PPUSH
12422: LD_INT 1
12424: PPUSH
12425: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12429: LD_INT 27
12431: PPUSH
12432: LD_VAR 0 3
12436: PPUSH
12437: LD_INT 1
12439: PPUSH
12440: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12444: LD_INT 28
12446: PPUSH
12447: LD_VAR 0 3
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12459: LD_INT 29
12461: PPUSH
12462: LD_VAR 0 3
12466: PPUSH
12467: LD_INT 1
12469: PPUSH
12470: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12474: LD_INT 30
12476: PPUSH
12477: LD_VAR 0 3
12481: PPUSH
12482: LD_INT 1
12484: PPUSH
12485: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12489: LD_INT 31
12491: PPUSH
12492: LD_VAR 0 3
12496: PPUSH
12497: LD_INT 1
12499: PPUSH
12500: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12504: LD_INT 32
12506: PPUSH
12507: LD_VAR 0 3
12511: PPUSH
12512: LD_INT 1
12514: PPUSH
12515: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12519: LD_INT 33
12521: PPUSH
12522: LD_VAR 0 3
12526: PPUSH
12527: LD_INT 1
12529: PPUSH
12530: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12534: LD_INT 36
12536: PPUSH
12537: LD_VAR 0 3
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 324
// end ; 6 :
12549: GO 13559
12551: LD_INT 6
12553: DOUBLE
12554: EQUAL
12555: IFTRUE 12559
12557: GO 13484
12559: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12560: LD_INT 35
12562: PPUSH
12563: LD_VAR 0 3
12567: PPUSH
12568: LD_INT 1
12570: PPUSH
12571: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12575: LD_INT 45
12577: PPUSH
12578: LD_VAR 0 3
12582: PPUSH
12583: LD_INT 1
12585: PPUSH
12586: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12590: LD_INT 46
12592: PPUSH
12593: LD_VAR 0 3
12597: PPUSH
12598: LD_INT 1
12600: PPUSH
12601: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12605: LD_INT 47
12607: PPUSH
12608: LD_VAR 0 3
12612: PPUSH
12613: LD_INT 1
12615: PPUSH
12616: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12620: LD_INT 1
12622: PPUSH
12623: LD_VAR 0 3
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12635: LD_INT 2
12637: PPUSH
12638: LD_VAR 0 3
12642: PPUSH
12643: LD_INT 1
12645: PPUSH
12646: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12650: LD_INT 11
12652: PPUSH
12653: LD_VAR 0 3
12657: PPUSH
12658: LD_INT 1
12660: PPUSH
12661: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12665: LD_INT 20
12667: PPUSH
12668: LD_VAR 0 3
12672: PPUSH
12673: LD_INT 1
12675: PPUSH
12676: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12680: LD_INT 48
12682: PPUSH
12683: LD_VAR 0 3
12687: PPUSH
12688: LD_INT 1
12690: PPUSH
12691: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12695: LD_INT 49
12697: PPUSH
12698: LD_VAR 0 3
12702: PPUSH
12703: LD_INT 1
12705: PPUSH
12706: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12710: LD_INT 50
12712: PPUSH
12713: LD_VAR 0 3
12717: PPUSH
12718: LD_INT 1
12720: PPUSH
12721: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12725: LD_INT 69
12727: PPUSH
12728: LD_VAR 0 3
12732: PPUSH
12733: LD_INT 1
12735: PPUSH
12736: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12740: LD_INT 39
12742: PPUSH
12743: LD_VAR 0 3
12747: PPUSH
12748: LD_INT 1
12750: PPUSH
12751: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12755: LD_INT 34
12757: PPUSH
12758: LD_VAR 0 3
12762: PPUSH
12763: LD_INT 1
12765: PPUSH
12766: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12770: LD_INT 42
12772: PPUSH
12773: LD_VAR 0 3
12777: PPUSH
12778: LD_INT 1
12780: PPUSH
12781: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12785: LD_INT 44
12787: PPUSH
12788: LD_VAR 0 3
12792: PPUSH
12793: LD_INT 1
12795: PPUSH
12796: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12800: LD_INT 41
12802: PPUSH
12803: LD_VAR 0 3
12807: PPUSH
12808: LD_INT 1
12810: PPUSH
12811: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12815: LD_INT 13
12817: PPUSH
12818: LD_VAR 0 3
12822: PPUSH
12823: LD_INT 1
12825: PPUSH
12826: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12830: LD_INT 40
12832: PPUSH
12833: LD_VAR 0 3
12837: PPUSH
12838: LD_INT 1
12840: PPUSH
12841: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12845: LD_INT 43
12847: PPUSH
12848: LD_VAR 0 3
12852: PPUSH
12853: LD_INT 1
12855: PPUSH
12856: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12860: LD_INT 70
12862: PPUSH
12863: LD_VAR 0 3
12867: PPUSH
12868: LD_INT 1
12870: PPUSH
12871: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12875: LD_INT 23
12877: PPUSH
12878: LD_VAR 0 3
12882: PPUSH
12883: LD_INT 1
12885: PPUSH
12886: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12890: LD_INT 51
12892: PPUSH
12893: LD_VAR 0 3
12897: PPUSH
12898: LD_INT 1
12900: PPUSH
12901: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12905: LD_INT 52
12907: PPUSH
12908: LD_VAR 0 3
12912: PPUSH
12913: LD_INT 1
12915: PPUSH
12916: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12920: LD_INT 6
12922: PPUSH
12923: LD_VAR 0 3
12927: PPUSH
12928: LD_INT 1
12930: PPUSH
12931: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12935: LD_INT 15
12937: PPUSH
12938: LD_VAR 0 3
12942: PPUSH
12943: LD_INT 1
12945: PPUSH
12946: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12950: LD_INT 7
12952: PPUSH
12953: LD_VAR 0 3
12957: PPUSH
12958: LD_INT 1
12960: PPUSH
12961: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12965: LD_INT 12
12967: PPUSH
12968: LD_VAR 0 3
12972: PPUSH
12973: LD_INT 1
12975: PPUSH
12976: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12980: LD_INT 10
12982: PPUSH
12983: LD_VAR 0 3
12987: PPUSH
12988: LD_INT 1
12990: PPUSH
12991: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12995: LD_INT 17
12997: PPUSH
12998: LD_VAR 0 3
13002: PPUSH
13003: LD_INT 1
13005: PPUSH
13006: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13010: LD_INT 18
13012: PPUSH
13013: LD_VAR 0 3
13017: PPUSH
13018: LD_INT 1
13020: PPUSH
13021: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13025: LD_INT 60
13027: PPUSH
13028: LD_VAR 0 3
13032: PPUSH
13033: LD_INT 1
13035: PPUSH
13036: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13040: LD_INT 61
13042: PPUSH
13043: LD_VAR 0 3
13047: PPUSH
13048: LD_INT 1
13050: PPUSH
13051: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13055: LD_INT 32
13057: PPUSH
13058: LD_VAR 0 3
13062: PPUSH
13063: LD_INT 1
13065: PPUSH
13066: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13070: LD_INT 27
13072: PPUSH
13073: LD_VAR 0 3
13077: PPUSH
13078: LD_INT 1
13080: PPUSH
13081: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13085: LD_INT 36
13087: PPUSH
13088: LD_VAR 0 3
13092: PPUSH
13093: LD_INT 1
13095: PPUSH
13096: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13100: LD_INT 33
13102: PPUSH
13103: LD_VAR 0 3
13107: PPUSH
13108: LD_INT 1
13110: PPUSH
13111: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13115: LD_INT 9
13117: PPUSH
13118: LD_VAR 0 3
13122: PPUSH
13123: LD_INT 1
13125: PPUSH
13126: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13130: LD_INT 38
13132: PPUSH
13133: LD_VAR 0 3
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13145: LD_INT 57
13147: PPUSH
13148: LD_VAR 0 3
13152: PPUSH
13153: LD_INT 1
13155: PPUSH
13156: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13160: LD_INT 58
13162: PPUSH
13163: LD_VAR 0 3
13167: PPUSH
13168: LD_INT 1
13170: PPUSH
13171: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13175: LD_INT 28
13177: PPUSH
13178: LD_VAR 0 3
13182: PPUSH
13183: LD_INT 1
13185: PPUSH
13186: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13190: LD_INT 29
13192: PPUSH
13193: LD_VAR 0 3
13197: PPUSH
13198: LD_INT 1
13200: PPUSH
13201: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13205: LD_INT 30
13207: PPUSH
13208: LD_VAR 0 3
13212: PPUSH
13213: LD_INT 1
13215: PPUSH
13216: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13220: LD_INT 37
13222: PPUSH
13223: LD_VAR 0 3
13227: PPUSH
13228: LD_INT 1
13230: PPUSH
13231: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13235: LD_INT 63
13237: PPUSH
13238: LD_VAR 0 3
13242: PPUSH
13243: LD_INT 1
13245: PPUSH
13246: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13250: LD_INT 64
13252: PPUSH
13253: LD_VAR 0 3
13257: PPUSH
13258: LD_INT 1
13260: PPUSH
13261: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13265: LD_INT 3
13267: PPUSH
13268: LD_VAR 0 3
13272: PPUSH
13273: LD_INT 1
13275: PPUSH
13276: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13280: LD_INT 4
13282: PPUSH
13283: LD_VAR 0 3
13287: PPUSH
13288: LD_INT 1
13290: PPUSH
13291: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13295: LD_INT 5
13297: PPUSH
13298: LD_VAR 0 3
13302: PPUSH
13303: LD_INT 1
13305: PPUSH
13306: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13310: LD_INT 8
13312: PPUSH
13313: LD_VAR 0 3
13317: PPUSH
13318: LD_INT 1
13320: PPUSH
13321: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13325: LD_INT 66
13327: PPUSH
13328: LD_VAR 0 3
13332: PPUSH
13333: LD_INT 1
13335: PPUSH
13336: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13340: LD_INT 67
13342: PPUSH
13343: LD_VAR 0 3
13347: PPUSH
13348: LD_INT 1
13350: PPUSH
13351: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13355: LD_INT 21
13357: PPUSH
13358: LD_VAR 0 3
13362: PPUSH
13363: LD_INT 1
13365: PPUSH
13366: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13370: LD_INT 22
13372: PPUSH
13373: LD_VAR 0 3
13377: PPUSH
13378: LD_INT 1
13380: PPUSH
13381: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13385: LD_INT 19
13387: PPUSH
13388: LD_VAR 0 3
13392: PPUSH
13393: LD_INT 1
13395: PPUSH
13396: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13400: LD_INT 26
13402: PPUSH
13403: LD_VAR 0 3
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13415: LD_INT 54
13417: PPUSH
13418: LD_VAR 0 3
13422: PPUSH
13423: LD_INT 1
13425: PPUSH
13426: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13430: LD_INT 55
13432: PPUSH
13433: LD_VAR 0 3
13437: PPUSH
13438: LD_INT 1
13440: PPUSH
13441: CALL_OW 322
// for i = 0 to 39 do
13445: LD_ADDR_VAR 0 4
13449: PUSH
13450: DOUBLE
13451: LD_INT 0
13453: DEC
13454: ST_TO_ADDR
13455: LD_INT 39
13457: PUSH
13458: FOR_TO
13459: IFFALSE 13480
// SetRestrict ( i , side , true ) ;
13461: LD_VAR 0 4
13465: PPUSH
13466: LD_VAR 0 3
13470: PPUSH
13471: LD_INT 1
13473: PPUSH
13474: CALL_OW 324
13478: GO 13458
13480: POP
13481: POP
// end ; else
13482: GO 13559
13484: POP
// begin for i = 1 to 73 do
13485: LD_ADDR_VAR 0 4
13489: PUSH
13490: DOUBLE
13491: LD_INT 1
13493: DEC
13494: ST_TO_ADDR
13495: LD_INT 73
13497: PUSH
13498: FOR_TO
13499: IFFALSE 13520
// SetTech ( i , side , state_enabled ) ;
13501: LD_VAR 0 4
13505: PPUSH
13506: LD_VAR 0 3
13510: PPUSH
13511: LD_INT 1
13513: PPUSH
13514: CALL_OW 322
13518: GO 13498
13520: POP
13521: POP
// for i = 0 to 39 do
13522: LD_ADDR_VAR 0 4
13526: PUSH
13527: DOUBLE
13528: LD_INT 0
13530: DEC
13531: ST_TO_ADDR
13532: LD_INT 39
13534: PUSH
13535: FOR_TO
13536: IFFALSE 13557
// SetRestrict ( i , side , true ) ;
13538: LD_VAR 0 4
13542: PPUSH
13543: LD_VAR 0 3
13547: PPUSH
13548: LD_INT 1
13550: PPUSH
13551: CALL_OW 324
13555: GO 13535
13557: POP
13558: POP
// end ; end ; end ;
13559: GO 9564
13561: POP
13562: POP
// end ; end_of_file
13563: LD_VAR 0 2
13567: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13568: LD_INT 0
13570: PPUSH
13571: PPUSH
13572: PPUSH
13573: PPUSH
13574: PPUSH
13575: PPUSH
13576: PPUSH
13577: PPUSH
13578: PPUSH
// for i := 1 to 8 do
13579: LD_ADDR_VAR 0 2
13583: PUSH
13584: DOUBLE
13585: LD_INT 1
13587: DEC
13588: ST_TO_ADDR
13589: LD_INT 8
13591: PUSH
13592: FOR_TO
13593: IFFALSE 13977
// begin if Side_Positions [ i ] then
13595: LD_EXP 36
13599: PUSH
13600: LD_VAR 0 2
13604: ARRAY
13605: IFFALSE 13975
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13607: LD_ADDR_VAR 0 7
13611: PUSH
13612: LD_INT 22
13614: PUSH
13615: LD_VAR 0 2
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 21
13626: PUSH
13627: LD_INT 1
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PPUSH
13638: CALL_OW 69
13642: PUSH
13643: LD_INT 0
13645: PLUS
13646: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13647: LD_ADDR_VAR 0 9
13651: PUSH
13652: LD_INT 22
13654: PUSH
13655: LD_VAR 0 2
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: LD_INT 30
13669: PUSH
13670: LD_INT 0
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 30
13679: PUSH
13680: LD_INT 1
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PPUSH
13696: CALL_OW 69
13700: ST_TO_ADDR
// crates := 0 ;
13701: LD_ADDR_VAR 0 4
13705: PUSH
13706: LD_INT 0
13708: ST_TO_ADDR
// oil := 0 ;
13709: LD_ADDR_VAR 0 5
13713: PUSH
13714: LD_INT 0
13716: ST_TO_ADDR
// sib := 0 ;
13717: LD_ADDR_VAR 0 6
13721: PUSH
13722: LD_INT 0
13724: ST_TO_ADDR
// if bases then
13725: LD_VAR 0 9
13729: IFFALSE 13835
// begin for j in bases do
13731: LD_ADDR_VAR 0 3
13735: PUSH
13736: LD_VAR 0 9
13740: PUSH
13741: FOR_IN
13742: IFFALSE 13833
// begin base := GetBase ( j ) ;
13744: LD_ADDR_VAR 0 8
13748: PUSH
13749: LD_VAR 0 3
13753: PPUSH
13754: CALL_OW 274
13758: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13759: LD_ADDR_VAR 0 4
13763: PUSH
13764: LD_VAR 0 4
13768: PUSH
13769: LD_VAR 0 8
13773: PPUSH
13774: LD_INT 1
13776: PPUSH
13777: CALL_OW 275
13781: PLUS
13782: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13783: LD_ADDR_VAR 0 5
13787: PUSH
13788: LD_VAR 0 5
13792: PUSH
13793: LD_VAR 0 8
13797: PPUSH
13798: LD_INT 2
13800: PPUSH
13801: CALL_OW 275
13805: PLUS
13806: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13807: LD_ADDR_VAR 0 6
13811: PUSH
13812: LD_VAR 0 6
13816: PUSH
13817: LD_VAR 0 8
13821: PPUSH
13822: LD_INT 3
13824: PPUSH
13825: CALL_OW 275
13829: PLUS
13830: ST_TO_ADDR
// end ;
13831: GO 13741
13833: POP
13834: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13835: LD_STRING setSpecText(
13837: PUSH
13838: LD_VAR 0 2
13842: STR
13843: PUSH
13844: LD_STRING ,
13846: STR
13847: PUSH
13848: LD_INT 2
13850: STR
13851: PUSH
13852: LD_STRING ,
13854: STR
13855: PUSH
13856: LD_VAR 0 4
13860: STR
13861: PUSH
13862: LD_STRING )
13864: STR
13865: PPUSH
13866: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13870: LD_STRING setSpecText(
13872: PUSH
13873: LD_VAR 0 2
13877: STR
13878: PUSH
13879: LD_STRING ,
13881: STR
13882: PUSH
13883: LD_INT 3
13885: STR
13886: PUSH
13887: LD_STRING ,
13889: STR
13890: PUSH
13891: LD_VAR 0 5
13895: STR
13896: PUSH
13897: LD_STRING )
13899: STR
13900: PPUSH
13901: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13905: LD_STRING setSpecText(
13907: PUSH
13908: LD_VAR 0 2
13912: STR
13913: PUSH
13914: LD_STRING ,
13916: STR
13917: PUSH
13918: LD_INT 4
13920: STR
13921: PUSH
13922: LD_STRING ,
13924: STR
13925: PUSH
13926: LD_VAR 0 6
13930: STR
13931: PUSH
13932: LD_STRING )
13934: STR
13935: PPUSH
13936: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13940: LD_STRING setSpecText(
13942: PUSH
13943: LD_VAR 0 2
13947: STR
13948: PUSH
13949: LD_STRING ,
13951: STR
13952: PUSH
13953: LD_INT 5
13955: STR
13956: PUSH
13957: LD_STRING ,
13959: STR
13960: PUSH
13961: LD_VAR 0 7
13965: STR
13966: PUSH
13967: LD_STRING )
13969: STR
13970: PPUSH
13971: CALL_OW 559
// end ; end ;
13975: GO 13592
13977: POP
13978: POP
// end ;
13979: LD_VAR 0 1
13983: RET
// every 0 0$1 do
13984: GO 13986
13986: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13987: LD_STRING setSpecLogoNumber(
13989: PUSH
13990: LD_INT 2
13992: STR
13993: PUSH
13994: LD_STRING ,
13996: STR
13997: PUSH
13998: LD_INT 1
14000: STR
14001: PUSH
14002: LD_STRING )
14004: STR
14005: PPUSH
14006: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14010: LD_STRING setSpecLogoNumber(
14012: PUSH
14013: LD_INT 3
14015: STR
14016: PUSH
14017: LD_STRING ,
14019: STR
14020: PUSH
14021: LD_INT 2
14023: STR
14024: PUSH
14025: LD_STRING )
14027: STR
14028: PPUSH
14029: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14033: LD_STRING setSpecLogoNumber(
14035: PUSH
14036: LD_INT 4
14038: STR
14039: PUSH
14040: LD_STRING ,
14042: STR
14043: PUSH
14044: LD_INT 3
14046: STR
14047: PUSH
14048: LD_STRING )
14050: STR
14051: PPUSH
14052: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14056: LD_STRING setSpecLogoNumber(
14058: PUSH
14059: LD_INT 5
14061: STR
14062: PUSH
14063: LD_STRING ,
14065: STR
14066: PUSH
14067: LD_INT 4
14069: STR
14070: PUSH
14071: LD_STRING )
14073: STR
14074: PPUSH
14075: CALL_OW 559
// end ;
14079: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14080: LD_INT 2
14082: PUSH
14083: LD_INT 30
14085: PUSH
14086: LD_INT 0
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 30
14095: PUSH
14096: LD_INT 1
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: LIST
14107: PPUSH
14108: CALL_OW 69
14112: IFFALSE 14122
14114: GO 14116
14116: DISABLE
// begin enable ;
14117: ENABLE
// UpdateSpectatorBar ;
14118: CALL 13568 0 0
// end ; end_of_file
14122: END
// var respawn , inqueue ; export function init_respawning ; begin
14123: LD_INT 0
14125: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14126: LD_ADDR_LOC 18
14130: PUSH
14131: LD_INT 1
14133: PPUSH
14134: LD_INT 8
14136: PPUSH
14137: CALL_OW 12
14141: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14142: LD_ADDR_LOC 19
14146: PUSH
14147: LD_INT 0
14149: PUSH
14150: LD_INT 0
14152: PUSH
14153: LD_INT 0
14155: PUSH
14156: LD_INT 0
14158: PUSH
14159: LD_INT 0
14161: PUSH
14162: LD_INT 0
14164: PUSH
14165: LD_INT 0
14167: PUSH
14168: LD_INT 0
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: ST_TO_ADDR
// end ;
14181: LD_VAR 0 1
14185: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14186: GO 14188
14188: DISABLE
14189: LD_INT 0
14191: PPUSH
14192: PPUSH
14193: PPUSH
// begin if respawning_time_max = 0 then
14194: LD_EXP 30
14198: PUSH
14199: LD_INT 0
14201: EQUAL
14202: IFFALSE 14206
// exit ;
14204: GO 14614
// if respawn = 8 then
14206: LD_LOC 18
14210: PUSH
14211: LD_INT 8
14213: EQUAL
14214: IFFALSE 14226
// respawn := 1 else
14216: LD_ADDR_LOC 18
14220: PUSH
14221: LD_INT 1
14223: ST_TO_ADDR
14224: GO 14240
// respawn := respawn + 1 ;
14226: LD_ADDR_LOC 18
14230: PUSH
14231: LD_LOC 18
14235: PUSH
14236: LD_INT 1
14238: PLUS
14239: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14240: LD_EXP 36
14244: PUSH
14245: LD_LOC 18
14249: ARRAY
14250: PUSH
14251: LD_LOC 19
14255: PUSH
14256: LD_LOC 18
14260: ARRAY
14261: NOT
14262: AND
14263: IFFALSE 14613
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14265: LD_ADDR_VAR 0 1
14269: PUSH
14270: LD_INT 21
14272: PUSH
14273: LD_INT 1
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 22
14282: PUSH
14283: LD_LOC 18
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 3
14294: PUSH
14295: LD_INT 23
14297: PUSH
14298: LD_INT 0
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: PPUSH
14311: CALL_OW 69
14315: ST_TO_ADDR
// if n < number_of_people then
14316: LD_VAR 0 1
14320: PUSH
14321: LD_EXP 21
14325: LESS
14326: IFFALSE 14610
// begin aktresp := respawn ;
14328: LD_ADDR_VAR 0 3
14332: PUSH
14333: LD_LOC 18
14337: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14338: LD_ADDR_LOC 19
14342: PUSH
14343: LD_LOC 19
14347: PPUSH
14348: LD_VAR 0 3
14352: PPUSH
14353: LD_INT 1
14355: PPUSH
14356: CALL_OW 1
14360: ST_TO_ADDR
// enable ;
14361: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14362: LD_EXP 29
14366: PPUSH
14367: LD_EXP 30
14371: PPUSH
14372: CALL_OW 12
14376: PPUSH
14377: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14381: LD_ADDR_LOC 19
14385: PUSH
14386: LD_LOC 19
14390: PPUSH
14391: LD_VAR 0 3
14395: PPUSH
14396: LD_INT 0
14398: PPUSH
14399: CALL_OW 1
14403: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14404: LD_ADDR_VAR 0 2
14408: PUSH
14409: LD_INT 21
14411: PUSH
14412: LD_INT 3
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 2
14421: PUSH
14422: LD_INT 30
14424: PUSH
14425: LD_INT 0
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 30
14434: PUSH
14435: LD_INT 1
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 50
14449: PUSH
14450: EMPTY
14451: LIST
14452: PUSH
14453: LD_INT 22
14455: PUSH
14456: LD_VAR 0 3
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: PPUSH
14471: CALL_OW 69
14475: ST_TO_ADDR
// if dep = 0 then
14476: LD_VAR 0 2
14480: PUSH
14481: LD_INT 0
14483: EQUAL
14484: IFFALSE 14488
// exit ;
14486: GO 14614
// hc_name :=  ;
14488: LD_ADDR_OWVAR 26
14492: PUSH
14493: LD_STRING 
14495: ST_TO_ADDR
// hc_importance := 0 ;
14496: LD_ADDR_OWVAR 32
14500: PUSH
14501: LD_INT 0
14503: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14504: LD_INT 0
14506: PPUSH
14507: LD_INT 0
14509: PPUSH
14510: LD_EXP 22
14514: PUSH
14515: LD_INT 2
14517: DIV
14518: PPUSH
14519: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14523: LD_ADDR_OWVAR 21
14527: PUSH
14528: LD_EXP 37
14532: PUSH
14533: LD_VAR 0 3
14537: ARRAY
14538: ST_TO_ADDR
// uc_side := aktresp ;
14539: LD_ADDR_OWVAR 20
14543: PUSH
14544: LD_VAR 0 3
14548: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14549: LD_ADDR_VAR 0 2
14553: PUSH
14554: LD_VAR 0 2
14558: PUSH
14559: LD_INT 1
14561: PPUSH
14562: LD_VAR 0 2
14566: PPUSH
14567: CALL_OW 12
14571: ARRAY
14572: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14573: CALL_OW 44
14577: PPUSH
14578: LD_VAR 0 2
14582: PPUSH
14583: CALL_OW 250
14587: PPUSH
14588: LD_VAR 0 2
14592: PPUSH
14593: CALL_OW 251
14597: PPUSH
14598: LD_INT 7
14600: PPUSH
14601: LD_INT 1
14603: PPUSH
14604: CALL_OW 50
// end else
14608: GO 14611
// enable ;
14610: ENABLE
// end else
14611: GO 14614
// enable ;
14613: ENABLE
// end ; end_of_file
14614: PPOPN 3
14616: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14617: LD_INT 0
14619: PPUSH
14620: PPUSH
14621: PPUSH
// BuildUpTime_Delay = 0 ;
14622: LD_ADDR_EXP 61
14626: PUSH
14627: LD_INT 0
14629: ST_TO_ADDR
// if not def_builduptime then
14630: LD_EXP 14
14634: NOT
14635: IFFALSE 14639
// exit ;
14637: GO 14822
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14639: LD_ADDR_EXP 61
14643: PUSH
14644: LD_INT 8400
14646: PUSH
14647: LD_INT 2100
14649: PUSH
14650: LD_EXP 14
14654: MUL
14655: PLUS
14656: ST_TO_ADDR
// BuildUpTimeActive := true ;
14657: LD_ADDR_EXP 60
14661: PUSH
14662: LD_INT 1
14664: ST_TO_ADDR
// for i := 1 to 8 do
14665: LD_ADDR_VAR 0 2
14669: PUSH
14670: DOUBLE
14671: LD_INT 1
14673: DEC
14674: ST_TO_ADDR
14675: LD_INT 8
14677: PUSH
14678: FOR_TO
14679: IFFALSE 14820
// if Side_Positions [ i ] then
14681: LD_EXP 36
14685: PUSH
14686: LD_VAR 0 2
14690: ARRAY
14691: IFFALSE 14818
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14693: LD_EXP 59
14697: PUSH
14698: LD_EXP 36
14702: PUSH
14703: LD_VAR 0 2
14707: ARRAY
14708: ARRAY
14709: PPUSH
14710: LD_INT 5
14712: PPUSH
14713: CALL_OW 424
// for j := 1 to 8 do
14717: LD_ADDR_VAR 0 3
14721: PUSH
14722: DOUBLE
14723: LD_INT 1
14725: DEC
14726: ST_TO_ADDR
14727: LD_INT 8
14729: PUSH
14730: FOR_TO
14731: IFFALSE 14816
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14733: LD_EXP 36
14737: PUSH
14738: LD_VAR 0 3
14742: ARRAY
14743: PUSH
14744: LD_EXP 33
14748: PUSH
14749: LD_VAR 0 2
14753: ARRAY
14754: PUSH
14755: LD_EXP 33
14759: PUSH
14760: LD_VAR 0 3
14764: ARRAY
14765: NONEQUAL
14766: PUSH
14767: LD_EXP 38
14771: NOT
14772: PUSH
14773: LD_VAR 0 2
14777: PUSH
14778: LD_VAR 0 3
14782: NONEQUAL
14783: AND
14784: OR
14785: AND
14786: IFFALSE 14814
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14788: LD_VAR 0 3
14792: PPUSH
14793: LD_EXP 59
14797: PUSH
14798: LD_EXP 36
14802: PUSH
14803: LD_VAR 0 2
14807: ARRAY
14808: ARRAY
14809: PPUSH
14810: CALL_OW 333
14814: GO 14730
14816: POP
14817: POP
// end ;
14818: GO 14678
14820: POP
14821: POP
// end ;
14822: LD_VAR 0 1
14826: RET
// export function EndBuildUp ; var i , j ; begin
14827: LD_INT 0
14829: PPUSH
14830: PPUSH
14831: PPUSH
// BuildUpTimeActive := false ;
14832: LD_ADDR_EXP 60
14836: PUSH
14837: LD_INT 0
14839: ST_TO_ADDR
// for i := 1 to 8 do
14840: LD_ADDR_VAR 0 2
14844: PUSH
14845: DOUBLE
14846: LD_INT 1
14848: DEC
14849: ST_TO_ADDR
14850: LD_INT 8
14852: PUSH
14853: FOR_TO
14854: IFFALSE 14995
// if Side_Positions [ i ] then
14856: LD_EXP 36
14860: PUSH
14861: LD_VAR 0 2
14865: ARRAY
14866: IFFALSE 14993
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14868: LD_EXP 59
14872: PUSH
14873: LD_EXP 36
14877: PUSH
14878: LD_VAR 0 2
14882: ARRAY
14883: ARRAY
14884: PPUSH
14885: LD_INT 0
14887: PPUSH
14888: CALL_OW 424
// for j := 1 to 8 do
14892: LD_ADDR_VAR 0 3
14896: PUSH
14897: DOUBLE
14898: LD_INT 1
14900: DEC
14901: ST_TO_ADDR
14902: LD_INT 8
14904: PUSH
14905: FOR_TO
14906: IFFALSE 14991
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14908: LD_EXP 36
14912: PUSH
14913: LD_VAR 0 3
14917: ARRAY
14918: PUSH
14919: LD_EXP 33
14923: PUSH
14924: LD_VAR 0 2
14928: ARRAY
14929: PUSH
14930: LD_EXP 33
14934: PUSH
14935: LD_VAR 0 3
14939: ARRAY
14940: NONEQUAL
14941: PUSH
14942: LD_EXP 38
14946: NOT
14947: PUSH
14948: LD_VAR 0 2
14952: PUSH
14953: LD_VAR 0 3
14957: NONEQUAL
14958: AND
14959: OR
14960: AND
14961: IFFALSE 14989
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14963: LD_VAR 0 3
14967: PPUSH
14968: LD_EXP 59
14972: PUSH
14973: LD_EXP 36
14977: PUSH
14978: LD_VAR 0 2
14982: ARRAY
14983: ARRAY
14984: PPUSH
14985: CALL_OW 334
14989: GO 14905
14991: POP
14992: POP
// end ;
14993: GO 14853
14995: POP
14996: POP
// end ;
14997: LD_VAR 0 1
15001: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
15002: LD_EXP 60
15006: IFFALSE 15181
15008: GO 15010
15010: DISABLE
15011: LD_INT 0
15013: PPUSH
15014: PPUSH
// begin for i := 1 to 8 do
15015: LD_ADDR_VAR 0 1
15019: PUSH
15020: DOUBLE
15021: LD_INT 1
15023: DEC
15024: ST_TO_ADDR
15025: LD_INT 8
15027: PUSH
15028: FOR_TO
15029: IFFALSE 15178
// if Side_Positions [ i ] then
15031: LD_EXP 36
15035: PUSH
15036: LD_VAR 0 1
15040: ARRAY
15041: IFFALSE 15176
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
15043: LD_ADDR_VAR 0 2
15047: PUSH
15048: LD_EXP 59
15052: PUSH
15053: LD_EXP 36
15057: PUSH
15058: LD_VAR 0 1
15062: ARRAY
15063: ARRAY
15064: PPUSH
15065: LD_INT 2
15067: PUSH
15068: LD_INT 21
15070: PUSH
15071: LD_INT 1
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 21
15080: PUSH
15081: LD_INT 2
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 22
15095: PUSH
15096: LD_OWVAR 2
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 70
15113: PUSH
15114: FOR_IN
15115: IFFALSE 15174
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
15117: LD_EXP 33
15121: PUSH
15122: LD_VAR 0 1
15126: ARRAY
15127: PUSH
15128: LD_EXP 33
15132: PUSH
15133: LD_OWVAR 2
15137: ARRAY
15138: NONEQUAL
15139: PUSH
15140: LD_EXP 38
15144: NOT
15145: PUSH
15146: LD_VAR 0 1
15150: PUSH
15151: LD_OWVAR 2
15155: NONEQUAL
15156: AND
15157: OR
15158: IFFALSE 15172
// ComMoveToArea ( un , BuildUpEscape ) ;
15160: LD_VAR 0 2
15164: PPUSH
15165: LD_INT 17
15167: PPUSH
15168: CALL_OW 113
15172: GO 15114
15174: POP
15175: POP
15176: GO 15028
15178: POP
15179: POP
// enable ;
15180: ENABLE
// end ;
15181: PPOPN 2
15183: END
// every 0 0$1 trigger def_builduptime do
15184: LD_EXP 14
15188: IFFALSE 15214
15190: GO 15192
15192: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15193: LD_INT 8400
15195: PUSH
15196: LD_EXP 14
15200: PUSH
15201: LD_INT 2100
15203: MUL
15204: PLUS
15205: PPUSH
15206: CALL_OW 67
// EndBuildUp ;
15210: CALL 14827 0 0
// end ;
15214: END
