// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime , def_Sheik , def_Mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , Sheik , Mastodont ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 18
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 36
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 33
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 37
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 35
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 34
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 18
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 2 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 2
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 36
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 33
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 37
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 35
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 34
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 38
 372: PUSH
 373: LD_EXP 33
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 626
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_Sheik = GetMultiplayerSetting ( 21 ) ;
 577: LD_ADDR_EXP 15
 581: PUSH
 582: LD_INT 21
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 590: LD_ADDR_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 603: LD_ADDR_EXP 16
 607: PUSH
 608: LD_INT 23
 610: PPUSH
 611: CALL_OW 426
 615: ST_TO_ADDR
// def_win_rules = 0 ;
 616: LD_ADDR_EXP 32
 620: PUSH
 621: LD_INT 0
 623: ST_TO_ADDR
// end else
 624: GO 774
// begin Randomize ;
 626: CALL_OW 10
// def_base_level := 2 ;
 630: LD_ADDR_EXP 1
 634: PUSH
 635: LD_INT 2
 637: ST_TO_ADDR
// def_amount_of_people := 2 ;
 638: LD_ADDR_EXP 2
 642: PUSH
 643: LD_INT 2
 645: ST_TO_ADDR
// def_skill_level := 1 ;
 646: LD_ADDR_EXP 3
 650: PUSH
 651: LD_INT 1
 653: ST_TO_ADDR
// def_starting_resources := 2 ;
 654: LD_ADDR_EXP 4
 658: PUSH
 659: LD_INT 2
 661: ST_TO_ADDR
// def_shipments_density := 50 ;
 662: LD_ADDR_EXP 5
 666: PUSH
 667: LD_INT 50
 669: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 670: LD_ADDR_EXP 6
 674: PUSH
 675: LD_INT 1
 677: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 678: LD_ADDR_EXP 7
 682: PUSH
 683: LD_INT 2
 685: ST_TO_ADDR
// def_shared_vision := 1 ;
 686: LD_ADDR_EXP 8
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// def_morale_flags := 1 ;
 694: LD_ADDR_EXP 9
 698: PUSH
 699: LD_INT 1
 701: ST_TO_ADDR
// def_siberite_detection := 1 ;
 702: LD_ADDR_EXP 10
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// def_people_respawning := 2 ;
 710: LD_ADDR_EXP 11
 714: PUSH
 715: LD_INT 2
 717: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 718: LD_ADDR_EXP 12
 722: PUSH
 723: LD_INT 3
 725: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 726: LD_ADDR_EXP 13
 730: PUSH
 731: LD_INT 2
 733: ST_TO_ADDR
// def_builduptime := 1 ;
 734: LD_ADDR_EXP 14
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_Sheik = 2 ;
 742: LD_ADDR_EXP 15
 746: PUSH
 747: LD_INT 2
 749: ST_TO_ADDR
// tech_level = 4 ;
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: LD_INT 4
 757: ST_TO_ADDR
// def_mastodont := 0 ;
 758: LD_ADDR_EXP 16
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_win_rules = 0 ;
 766: LD_ADDR_EXP 32
 770: PUSH
 771: LD_INT 0
 773: ST_TO_ADDR
// end ; if isSGUI then
 774: LD_OWVAR 83
 778: IFFALSE 786
// setMpTechs ( ) else
 780: CALL 9834 0 0
 784: GO 799
// SetMpTechLevel ( tech_level + 1 ) ;
 786: LD_VAR 0 3
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: PPUSH
 795: CALL 9981 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 799: LD_ADDR_EXP 19
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 1
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_EXP 1
 822: PUSH
 823: LD_INT 1
 825: PLUS
 826: ARRAY
 827: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 828: LD_ADDR_EXP 20
 832: PUSH
 833: LD_INT 0
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 3
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_EXP 1
 851: PUSH
 852: LD_INT 1
 854: PLUS
 855: ARRAY
 856: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 857: LD_ADDR_EXP 21
 861: PUSH
 862: LD_INT 9
 864: PUSH
 865: LD_INT 12
 867: PUSH
 868: LD_INT 15
 870: PUSH
 871: LD_INT 24
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: PUSH
 880: LD_EXP 2
 884: PUSH
 885: LD_INT 1
 887: PLUS
 888: ARRAY
 889: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 890: LD_ADDR_EXP 22
 894: PUSH
 895: LD_INT 2
 897: PUSH
 898: LD_INT 3
 900: PUSH
 901: LD_INT 4
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_EXP 3
 917: PUSH
 918: LD_INT 1
 920: PLUS
 921: ARRAY
 922: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 923: LD_ADDR_EXP 24
 927: PUSH
 928: LD_INT 0
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 30
 944: PUSH
 945: LD_INT 0
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PUSH
 956: LD_INT 50
 958: PUSH
 959: LD_INT 20
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: PUSH
 970: LD_INT 80
 972: PUSH
 973: LD_INT 40
 975: PUSH
 976: LD_INT 20
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: PUSH
 990: LD_EXP 4
 994: PUSH
 995: LD_INT 1
 997: PLUS
 998: ARRAY
 999: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1000: LD_ADDR_EXP 23
1004: PUSH
1005: LD_INT 10
1007: PUSH
1008: EMPTY
1009: LIST
1010: PUSH
1011: LD_INT 7
1013: PUSH
1014: LD_INT 14
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 6
1023: PUSH
1024: LD_INT 12
1026: PUSH
1027: LD_INT 18
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 10
1040: PUSH
1041: LD_INT 15
1043: PUSH
1044: LD_INT 20
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_EXP 4
1063: PUSH
1064: LD_INT 1
1066: PLUS
1067: ARRAY
1068: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1069: LD_ADDR_EXP 25
1073: PUSH
1074: LD_INT 150
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_INT 1
1084: PLUS
1085: MINUS
1086: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1087: LD_ADDR_EXP 29
1091: PUSH
1092: LD_INT 0
1094: PUSH
1095: LD_INT 10500
1097: PUSH
1098: LD_INT 6300
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_EXP 11
1110: PUSH
1111: LD_INT 1
1113: PLUS
1114: ARRAY
1115: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1116: LD_ADDR_EXP 30
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 31500
1126: PUSH
1127: LD_INT 10500
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_EXP 11
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1145: LD_ADDR_EXP 27
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: LD_INT 3
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_EXP 12
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: ARRAY
1177: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1178: LD_ADDR_EXP 26
1182: PUSH
1183: LD_INT 1
1185: NEG
1186: PUSH
1187: LD_INT 350
1189: PUSH
1190: LD_INT 700
1192: PUSH
1193: LD_INT 1400
1195: PUSH
1196: LD_INT 0
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: PUSH
1206: LD_EXP 9
1210: PUSH
1211: LD_INT 1
1213: PLUS
1214: ARRAY
1215: ST_TO_ADDR
// battle_flags_id := [ ] ;
1216: LD_ADDR_EXP 46
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// Sheik := [ 0 , 1 , 2 ] [ def_Sheik + 1 ] ;
1223: LD_ADDR_EXP 47
1227: PUSH
1228: LD_INT 0
1230: PUSH
1231: LD_INT 1
1233: PUSH
1234: LD_INT 2
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: LD_EXP 15
1246: PUSH
1247: LD_INT 1
1249: PLUS
1250: ARRAY
1251: ST_TO_ADDR
// Mastodont := 8 ;
1252: LD_ADDR_EXP 48
1256: PUSH
1257: LD_INT 8
1259: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1260: LD_EXP 13
1264: PUSH
1265: LD_INT 0
1267: EQUAL
1268: IFFALSE 1280
// siberite_bomb_Delay = 0 else
1270: LD_ADDR_EXP 31
1274: PUSH
1275: LD_INT 0
1277: ST_TO_ADDR
1278: GO 1302
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1280: LD_ADDR_EXP 31
1284: PUSH
1285: LD_EXP 13
1289: PUSH
1290: LD_INT 1
1292: MINUS
1293: PUSH
1294: LD_INT 21000
1296: MUL
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ST_TO_ADDR
// end ;
1302: LD_VAR 0 1
1306: RET
// function init_map ; var i , j ; begin
1307: LD_INT 0
1309: PPUSH
1310: PPUSH
1311: PPUSH
// normal_oil_deposits_locations := [ [ 61 , 60 ] , [ 105 , 67 ] , [ 106 , 43 ] , [ 220 , 10 ] , [ 188 , 284 ] , [ 278 , 241 ] , [ 277 , 204 ] , [ 320 , 220 ] ] ;
1312: LD_ADDR_EXP 42
1316: PUSH
1317: LD_INT 61
1319: PUSH
1320: LD_INT 60
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 105
1329: PUSH
1330: LD_INT 67
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 106
1339: PUSH
1340: LD_INT 43
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 220
1349: PUSH
1350: LD_INT 10
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: LD_INT 188
1359: PUSH
1360: LD_INT 284
1362: PUSH
1363: EMPTY
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 278
1369: PUSH
1370: LD_INT 241
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 277
1379: PUSH
1380: LD_INT 204
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: LD_INT 320
1389: PUSH
1390: LD_INT 220
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 36 , 57 ] , [ 98 , 53 ] , [ 106 , 12 ] , [ 247 , 20 ] , [ 139 , 263 ] , [ 280 , 280 ] , [ 274 , 215 ] , [ 345 , 223 ] ] ;
1407: LD_ADDR_EXP 43
1411: PUSH
1412: LD_INT 36
1414: PUSH
1415: LD_INT 57
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 98
1424: PUSH
1425: LD_INT 53
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 106
1434: PUSH
1435: LD_INT 12
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 247
1444: PUSH
1445: LD_INT 20
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 139
1454: PUSH
1455: LD_INT 263
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 280
1464: PUSH
1465: LD_INT 280
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 274
1474: PUSH
1475: LD_INT 215
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 345
1484: PUSH
1485: LD_INT 223
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 52 , 91 ] , [ 129 , 74 ] , [ 93 , 16 ] , [ 244 , 38 ] , [ 146 , 250 ] , [ 300 , 276 ] , [ 253 , 200 ] , [ 330 , 190 ] ] ;
1502: LD_ADDR_EXP 44
1506: PUSH
1507: LD_INT 52
1509: PUSH
1510: LD_INT 91
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: LD_INT 129
1519: PUSH
1520: LD_INT 74
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PUSH
1527: LD_INT 93
1529: PUSH
1530: LD_INT 16
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PUSH
1537: LD_INT 244
1539: PUSH
1540: LD_INT 38
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 146
1549: PUSH
1550: LD_INT 250
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: LD_INT 300
1559: PUSH
1560: LD_INT 276
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 253
1569: PUSH
1570: LD_INT 200
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 330
1579: PUSH
1580: LD_INT 190
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 88 , 88 ] , [ 117 , 103 ] , [ 137 , 45 ] , [ 193 , 3 ] , [ 202 , 296 ] , [ 247 , 239 ] , [ 270 , 169 ] , [ 293 , 186 ] ] ;
1597: LD_ADDR_EXP 45
1601: PUSH
1602: LD_INT 88
1604: PUSH
1605: LD_INT 88
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 117
1614: PUSH
1615: LD_INT 103
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: LD_INT 137
1624: PUSH
1625: LD_INT 45
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: PUSH
1632: LD_INT 193
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 202
1644: PUSH
1645: LD_INT 296
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: LD_INT 247
1654: PUSH
1655: LD_INT 239
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 270
1664: PUSH
1665: LD_INT 169
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: LD_INT 293
1674: PUSH
1675: LD_INT 186
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: ST_TO_ADDR
// depot_def := [ [ 58 , 73 , 2 ] , [ 116 , 79 , 3 ] , [ 110 , 30 , 1 ] , [ 223 , 25 , 3 ] , [ 168 , 266 , 0 ] , [ 276 , 256 , 4 ] , [ 262 , 189 , 0 ] , [ 324 , 203 , 5 ] ] ;
1692: LD_ADDR_EXP 39
1696: PUSH
1697: LD_INT 58
1699: PUSH
1700: LD_INT 73
1702: PUSH
1703: LD_INT 2
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 116
1713: PUSH
1714: LD_INT 79
1716: PUSH
1717: LD_INT 3
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 110
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 1
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 223
1741: PUSH
1742: LD_INT 25
1744: PUSH
1745: LD_INT 3
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 168
1755: PUSH
1756: LD_INT 266
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 276
1769: PUSH
1770: LD_INT 256
1772: PUSH
1773: LD_INT 4
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 262
1783: PUSH
1784: LD_INT 189
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: LD_INT 324
1797: PUSH
1798: LD_INT 203
1800: PUSH
1801: LD_INT 5
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: ST_TO_ADDR
// for i in depot_def do
1819: LD_ADDR_VAR 0 2
1823: PUSH
1824: LD_EXP 39
1828: PUSH
1829: FOR_IN
1830: IFFALSE 1906
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1832: LD_ADDR_EXP 41
1836: PUSH
1837: LD_EXP 41
1841: PUSH
1842: LD_VAR 0 2
1846: PUSH
1847: LD_INT 1
1849: ARRAY
1850: PPUSH
1851: LD_VAR 0 2
1855: PUSH
1856: LD_INT 3
1858: ARRAY
1859: PPUSH
1860: LD_INT 4
1862: NEG
1863: PPUSH
1864: CALL_OW 272
1868: PUSH
1869: LD_VAR 0 2
1873: PUSH
1874: LD_INT 2
1876: ARRAY
1877: PPUSH
1878: LD_VAR 0 2
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PPUSH
1887: LD_INT 4
1889: NEG
1890: PPUSH
1891: CALL_OW 273
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: EMPTY
1901: LIST
1902: ADD
1903: ST_TO_ADDR
1904: GO 1829
1906: POP
1907: POP
// breastworks_def := [ [ [ 72 , 97 , 5 ] , [ 82 , 85 , 4 ] , [ 66 , 66 , 4 ] ] , [ [ 119 , 99 , 0 ] , [ 140 , 98 , 5 ] , [ 126 , 66 , 4 ] ] , [ [ 113 , 16 , 4 ] , [ 130 , 38 , 5 ] , [ 111 , 42 , 0 ] ] , [ [ 218 , 36 , 0 ] , [ 240 , 40 , 5 ] , [ 205 , 24 , 1 ] ] , [ [ 174 , 250 , 3 ] , [ 151 , 248 , 2 ] , [ 193 , 272 , 4 ] ] , [ [ 252 , 246 , 1 ] , [ 263 , 267 , 1 ] , [ 270 , 238 , 3 ] ] , [ [ 240 , 173 , 2 ] , [ 261 , 173 , 2 ] , [ 256 , 208 , 1 ] ] , [ [ 311 , 181 , 2 ] , [ 298 , 190 , 2 ] , [ 312 , 212 , 1 ] ] ] ;
1908: LD_ADDR_EXP 40
1912: PUSH
1913: LD_INT 72
1915: PUSH
1916: LD_INT 97
1918: PUSH
1919: LD_INT 5
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 82
1929: PUSH
1930: LD_INT 85
1932: PUSH
1933: LD_INT 4
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 66
1943: PUSH
1944: LD_INT 66
1946: PUSH
1947: LD_INT 4
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 119
1962: PUSH
1963: LD_INT 99
1965: PUSH
1966: LD_INT 0
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 140
1976: PUSH
1977: LD_INT 98
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 126
1990: PUSH
1991: LD_INT 66
1993: PUSH
1994: LD_INT 4
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 113
2009: PUSH
2010: LD_INT 16
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 130
2023: PUSH
2024: LD_INT 38
2026: PUSH
2027: LD_INT 5
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 111
2037: PUSH
2038: LD_INT 42
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 218
2056: PUSH
2057: LD_INT 36
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: LD_INT 240
2070: PUSH
2071: LD_INT 40
2073: PUSH
2074: LD_INT 5
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 205
2084: PUSH
2085: LD_INT 24
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 174
2103: PUSH
2104: LD_INT 250
2106: PUSH
2107: LD_INT 3
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 151
2117: PUSH
2118: LD_INT 248
2120: PUSH
2121: LD_INT 2
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 193
2131: PUSH
2132: LD_INT 272
2134: PUSH
2135: LD_INT 4
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 252
2150: PUSH
2151: LD_INT 246
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 263
2164: PUSH
2165: LD_INT 267
2167: PUSH
2168: LD_INT 1
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 270
2178: PUSH
2179: LD_INT 238
2181: PUSH
2182: LD_INT 3
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 240
2197: PUSH
2198: LD_INT 173
2200: PUSH
2201: LD_INT 2
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 261
2211: PUSH
2212: LD_INT 173
2214: PUSH
2215: LD_INT 2
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 256
2225: PUSH
2226: LD_INT 208
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 311
2244: PUSH
2245: LD_INT 181
2247: PUSH
2248: LD_INT 2
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 298
2258: PUSH
2259: LD_INT 190
2261: PUSH
2262: LD_INT 2
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 312
2272: PUSH
2273: LD_INT 212
2275: PUSH
2276: LD_INT 1
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: ST_TO_ADDR
// for i = 1 to Side_Positions do
2299: LD_ADDR_VAR 0 2
2303: PUSH
2304: DOUBLE
2305: LD_INT 1
2307: DEC
2308: ST_TO_ADDR
2309: LD_EXP 36
2313: PUSH
2314: FOR_TO
2315: IFFALSE 2438
// begin if not Side_Positions [ i ] then
2317: LD_EXP 36
2321: PUSH
2322: LD_VAR 0 2
2326: ARRAY
2327: NOT
2328: IFFALSE 2332
// continue ;
2330: GO 2314
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2332: LD_EXP 42
2336: PUSH
2337: LD_EXP 36
2341: PUSH
2342: LD_VAR 0 2
2346: ARRAY
2347: ARRAY
2348: PUSH
2349: LD_INT 1
2351: ARRAY
2352: PPUSH
2353: LD_EXP 42
2357: PUSH
2358: LD_EXP 36
2362: PUSH
2363: LD_VAR 0 2
2367: ARRAY
2368: ARRAY
2369: PUSH
2370: LD_INT 2
2372: ARRAY
2373: PPUSH
2374: LD_INT 2
2376: PPUSH
2377: CALL_OW 62
// if def_extra_oil_deposits then
2381: LD_EXP 6
2385: IFFALSE 2436
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2387: LD_EXP 43
2391: PUSH
2392: LD_EXP 36
2396: PUSH
2397: LD_VAR 0 2
2401: ARRAY
2402: ARRAY
2403: PUSH
2404: LD_INT 1
2406: ARRAY
2407: PPUSH
2408: LD_EXP 43
2412: PUSH
2413: LD_EXP 36
2417: PUSH
2418: LD_VAR 0 2
2422: ARRAY
2423: ARRAY
2424: PUSH
2425: LD_INT 2
2427: ARRAY
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: CALL_OW 62
// end ;
2436: GO 2314
2438: POP
2439: POP
// if def_extra_sib_deposits then
2440: LD_EXP 7
2444: IFFALSE 2591
// for i = 1 to Side_Positions do
2446: LD_ADDR_VAR 0 2
2450: PUSH
2451: DOUBLE
2452: LD_INT 1
2454: DEC
2455: ST_TO_ADDR
2456: LD_EXP 36
2460: PUSH
2461: FOR_TO
2462: IFFALSE 2589
// begin if not Side_Positions [ i ] then
2464: LD_EXP 36
2468: PUSH
2469: LD_VAR 0 2
2473: ARRAY
2474: NOT
2475: IFFALSE 2479
// continue ;
2477: GO 2461
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2479: LD_EXP 44
2483: PUSH
2484: LD_EXP 36
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: ARRAY
2495: PUSH
2496: LD_INT 1
2498: ARRAY
2499: PPUSH
2500: LD_EXP 44
2504: PUSH
2505: LD_EXP 36
2509: PUSH
2510: LD_VAR 0 2
2514: ARRAY
2515: ARRAY
2516: PUSH
2517: LD_INT 2
2519: ARRAY
2520: PPUSH
2521: LD_INT 3
2523: PPUSH
2524: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2528: LD_EXP 7
2532: PUSH
2533: LD_INT 2
2535: EQUAL
2536: IFFALSE 2587
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2538: LD_EXP 45
2542: PUSH
2543: LD_EXP 36
2547: PUSH
2548: LD_VAR 0 2
2552: ARRAY
2553: ARRAY
2554: PUSH
2555: LD_INT 1
2557: ARRAY
2558: PPUSH
2559: LD_EXP 45
2563: PUSH
2564: LD_EXP 36
2568: PUSH
2569: LD_VAR 0 2
2573: ARRAY
2574: ARRAY
2575: PUSH
2576: LD_INT 2
2578: ARRAY
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: CALL_OW 62
// end ;
2587: GO 2461
2589: POP
2590: POP
// end ;
2591: LD_VAR 0 1
2595: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2596: LD_INT 0
2598: PPUSH
2599: PPUSH
2600: PPUSH
// if not Team_Game then
2601: LD_EXP 38
2605: NOT
2606: IFFALSE 2704
// begin for i = 1 to 8 do
2608: LD_ADDR_VAR 0 2
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 8
2620: PUSH
2621: FOR_TO
2622: IFFALSE 2700
// for j = 1 to 8 do
2624: LD_ADDR_VAR 0 3
2628: PUSH
2629: DOUBLE
2630: LD_INT 1
2632: DEC
2633: ST_TO_ADDR
2634: LD_INT 8
2636: PUSH
2637: FOR_TO
2638: IFFALSE 2696
// if i <> j then
2640: LD_VAR 0 2
2644: PUSH
2645: LD_VAR 0 3
2649: NONEQUAL
2650: IFFALSE 2674
// SetAttitude ( i , j , att_neutral , true ) else
2652: LD_VAR 0 2
2656: PPUSH
2657: LD_VAR 0 3
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 80
2672: GO 2694
// SetAttitude ( i , j , att_friend , true ) ;
2674: LD_VAR 0 2
2678: PPUSH
2679: LD_VAR 0 3
2683: PPUSH
2684: LD_INT 1
2686: PPUSH
2687: LD_INT 1
2689: PPUSH
2690: CALL_OW 80
2694: GO 2637
2696: POP
2697: POP
2698: GO 2621
2700: POP
2701: POP
// end else
2702: GO 2879
// begin if def_shared_vision then
2704: LD_EXP 8
2708: IFFALSE 2773
// begin for i in Teams do
2710: LD_ADDR_VAR 0 2
2714: PUSH
2715: LD_EXP 34
2719: PUSH
2720: FOR_IN
2721: IFFALSE 2771
// for j = 2 to i do
2723: LD_ADDR_VAR 0 3
2727: PUSH
2728: DOUBLE
2729: LD_INT 2
2731: DEC
2732: ST_TO_ADDR
2733: LD_VAR 0 2
2737: PUSH
2738: FOR_TO
2739: IFFALSE 2767
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2741: LD_VAR 0 2
2745: PUSH
2746: LD_VAR 0 3
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 2
2756: PUSH
2757: LD_INT 1
2759: ARRAY
2760: PPUSH
2761: CALL_OW 343
2765: GO 2738
2767: POP
2768: POP
2769: GO 2720
2771: POP
2772: POP
// end ; for i = 1 to 8 do
2773: LD_ADDR_VAR 0 2
2777: PUSH
2778: DOUBLE
2779: LD_INT 1
2781: DEC
2782: ST_TO_ADDR
2783: LD_INT 8
2785: PUSH
2786: FOR_TO
2787: IFFALSE 2877
// for j = 1 to 8 do
2789: LD_ADDR_VAR 0 3
2793: PUSH
2794: DOUBLE
2795: LD_INT 1
2797: DEC
2798: ST_TO_ADDR
2799: LD_INT 8
2801: PUSH
2802: FOR_TO
2803: IFFALSE 2873
// if Side_Teams [ i ] = Side_Teams [ j ] then
2805: LD_EXP 33
2809: PUSH
2810: LD_VAR 0 2
2814: ARRAY
2815: PUSH
2816: LD_EXP 33
2820: PUSH
2821: LD_VAR 0 3
2825: ARRAY
2826: EQUAL
2827: IFFALSE 2851
// SetAttitude ( i , j , att_friend , true ) else
2829: LD_VAR 0 2
2833: PPUSH
2834: LD_VAR 0 3
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: LD_INT 1
2844: PPUSH
2845: CALL_OW 80
2849: GO 2871
// SetAttitude ( i , j , att_enemy , true ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_VAR 0 3
2860: PPUSH
2861: LD_INT 2
2863: PPUSH
2864: LD_INT 1
2866: PPUSH
2867: CALL_OW 80
2871: GO 2802
2873: POP
2874: POP
2875: GO 2786
2877: POP
2878: POP
// end ; end ;
2879: LD_VAR 0 1
2883: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2884: LD_INT 0
2886: PPUSH
2887: PPUSH
2888: PPUSH
2889: PPUSH
// result := [ ] ;
2890: LD_ADDR_VAR 0 7
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// for i := 1 to count do
2897: LD_ADDR_VAR 0 8
2901: PUSH
2902: DOUBLE
2903: LD_INT 1
2905: DEC
2906: ST_TO_ADDR
2907: LD_VAR 0 1
2911: PUSH
2912: FOR_TO
2913: IFFALSE 3461
// begin uc_direction := Rand ( 0 , 5 ) ;
2915: LD_ADDR_OWVAR 24
2919: PUSH
2920: LD_INT 0
2922: PPUSH
2923: LD_INT 5
2925: PPUSH
2926: CALL_OW 12
2930: ST_TO_ADDR
// if commander then
2931: LD_LOC 1
2935: IFFALSE 3090
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2937: LD_ADDR_OWVAR 26
2941: PUSH
2942: LD_OWVAR 19
2946: PUSH
2947: LD_OWVAR 20
2951: ARRAY
2952: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2953: LD_INT 1
2955: PPUSH
2956: LD_INT 2
2958: PPUSH
2959: CALL_OW 12
2963: PPUSH
2964: LD_VAR 0 2
2968: PPUSH
2969: LD_EXP 22
2973: PUSH
2974: LD_INT 2
2976: PLUS
2977: PPUSH
2978: CALL_OW 380
// hc_importance := 105 ;
2982: LD_ADDR_OWVAR 32
2986: PUSH
2987: LD_INT 105
2989: ST_TO_ADDR
// commander := false ;
2990: LD_ADDR_LOC 1
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// if Multiplayer then
2998: LD_OWVAR 4
3002: IFFALSE 3088
// begin if Sheik = 1 and uc_nation = 2 then
3004: LD_EXP 47
3008: PUSH
3009: LD_INT 1
3011: EQUAL
3012: PUSH
3013: LD_OWVAR 21
3017: PUSH
3018: LD_INT 2
3020: EQUAL
3021: AND
3022: IFFALSE 3050
// begin hc_gallery :=  ;
3024: LD_ADDR_OWVAR 33
3028: PUSH
3029: LD_STRING 
3031: ST_TO_ADDR
// hc_class := class_desert_warior ;
3032: LD_ADDR_OWVAR 28
3036: PUSH
3037: LD_INT 11
3039: ST_TO_ADDR
// hc_sex := sex_male ;
3040: LD_ADDR_OWVAR 27
3044: PUSH
3045: LD_INT 1
3047: ST_TO_ADDR
// end else
3048: GO 3088
// begin hc_gallery := MULTIAVATARS ;
3050: LD_ADDR_OWVAR 33
3054: PUSH
3055: LD_STRING MULTIAVATARS
3057: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3058: LD_ADDR_OWVAR 34
3062: PUSH
3063: LD_OWVAR 20
3067: PPUSH
3068: CALL_OW 525
3072: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3073: LD_ADDR_OWVAR 27
3077: PUSH
3078: LD_OWVAR 20
3082: PPUSH
3083: CALL_OW 526
3087: ST_TO_ADDR
// end ; end ; end else
3088: GO 3226
// begin hc_name :=  ;
3090: LD_ADDR_OWVAR 26
3094: PUSH
3095: LD_STRING 
3097: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3098: LD_INT 1
3100: PPUSH
3101: LD_INT 2
3103: PPUSH
3104: CALL_OW 12
3108: PPUSH
3109: LD_VAR 0 2
3113: PPUSH
3114: LD_EXP 22
3118: PPUSH
3119: CALL_OW 380
// hc_importance := 0 ;
3123: LD_ADDR_OWVAR 32
3127: PUSH
3128: LD_INT 0
3130: ST_TO_ADDR
// if cl = class_desert_warior and Sheik = 2 then
3131: LD_VAR 0 2
3135: PUSH
3136: LD_INT 11
3138: EQUAL
3139: PUSH
3140: LD_EXP 47
3144: PUSH
3145: LD_INT 2
3147: EQUAL
3148: AND
3149: IFFALSE 3204
// begin commander := true ;
3151: LD_ADDR_LOC 1
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3159: LD_INT 1
3161: PPUSH
3162: LD_INT 2
3164: PPUSH
3165: CALL_OW 12
3169: PPUSH
3170: LD_VAR 0 2
3174: PPUSH
3175: LD_EXP 22
3179: PUSH
3180: LD_INT 2
3182: PLUS
3183: PPUSH
3184: CALL_OW 380
// hc_importance := 105 ;
3188: LD_ADDR_OWVAR 32
3192: PUSH
3193: LD_INT 105
3195: ST_TO_ADDR
// commander := false ;
3196: LD_ADDR_LOC 1
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// end ; if Multiplayer then
3204: LD_OWVAR 4
3208: IFFALSE 3226
// begin hc_gallery :=  ;
3210: LD_ADDR_OWVAR 33
3214: PUSH
3215: LD_STRING 
3217: ST_TO_ADDR
// hc_face_number := 0 ;
3218: LD_ADDR_OWVAR 34
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3226: LD_ADDR_VAR 0 10
3230: PUSH
3231: CALL_OW 44
3235: ST_TO_ADDR
// if global_defined and not cl = class_desert_warior then
3236: LD_LOC 3
3240: PUSH
3241: LD_VAR 0 2
3245: PUSH
3246: LD_INT 11
3248: EQUAL
3249: NOT
3250: AND
3251: IFFALSE 3391
// begin if ( cl = class_soldier ) then
3253: LD_VAR 0 2
3257: PUSH
3258: LD_INT 1
3260: EQUAL
3261: IFFALSE 3281
// j := i + soldiers_created else
3263: LD_ADDR_VAR 0 9
3267: PUSH
3268: LD_VAR 0 8
3272: PUSH
3273: LD_LOC 4
3277: PLUS
3278: ST_TO_ADDR
3279: GO 3291
// j := i ;
3281: LD_ADDR_VAR 0 9
3285: PUSH
3286: LD_VAR 0 8
3290: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3291: LD_LOC 2
3295: PUSH
3296: LD_VAR 0 2
3300: ARRAY
3301: PUSH
3302: LD_VAR 0 9
3306: ARRAY
3307: PPUSH
3308: LD_VAR 0 10
3312: PPUSH
3313: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3317: LD_VAR 0 10
3321: PPUSH
3322: LD_INT 2
3324: PPUSH
3325: LD_LOC 2
3329: PUSH
3330: LD_VAR 0 2
3334: ARRAY
3335: PUSH
3336: LD_VAR 0 9
3340: ARRAY
3341: PPUSH
3342: LD_INT 2
3344: PPUSH
3345: CALL_OW 260
3349: PPUSH
3350: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3354: LD_VAR 0 10
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_LOC 2
3366: PUSH
3367: LD_VAR 0 2
3371: ARRAY
3372: PUSH
3373: LD_VAR 0 9
3377: ARRAY
3378: PPUSH
3379: LD_INT 1
3381: PPUSH
3382: CALL_OW 260
3386: PPUSH
3387: CALL_OW 239
// end ; if building then
3391: LD_VAR 0 6
3395: IFFALSE 3413
// PlaceHumanInUnit ( un , building ) else
3397: LD_VAR 0 10
3401: PPUSH
3402: LD_VAR 0 6
3406: PPUSH
3407: CALL_OW 52
3411: GO 3440
// PlaceUnitXYR ( un , x , y , r , false ) ;
3413: LD_VAR 0 10
3417: PPUSH
3418: LD_VAR 0 3
3422: PPUSH
3423: LD_VAR 0 4
3427: PPUSH
3428: LD_VAR 0 5
3432: PPUSH
3433: LD_INT 0
3435: PPUSH
3436: CALL_OW 50
// result := result ^ [ un ] ;
3440: LD_ADDR_VAR 0 7
3444: PUSH
3445: LD_VAR 0 7
3449: PUSH
3450: LD_VAR 0 10
3454: PUSH
3455: EMPTY
3456: LIST
3457: ADD
3458: ST_TO_ADDR
// end ;
3459: GO 2912
3461: POP
3462: POP
// if not global_defined then
3463: LD_LOC 3
3467: NOT
3468: IFFALSE 3546
// if ( global_units >= cl ) then
3470: LD_LOC 2
3474: PUSH
3475: LD_VAR 0 2
3479: GREATEREQUAL
3480: IFFALSE 3521
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3482: LD_ADDR_LOC 2
3486: PUSH
3487: LD_LOC 2
3491: PPUSH
3492: LD_VAR 0 2
3496: PPUSH
3497: LD_LOC 2
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PUSH
3508: LD_VAR 0 7
3512: ADD
3513: PPUSH
3514: CALL_OW 1
3518: ST_TO_ADDR
3519: GO 3546
// global_units := Replace ( global_units , cl , result ) ;
3521: LD_ADDR_LOC 2
3525: PUSH
3526: LD_LOC 2
3530: PPUSH
3531: LD_VAR 0 2
3535: PPUSH
3536: LD_VAR 0 7
3540: PPUSH
3541: CALL_OW 1
3545: ST_TO_ADDR
// if commander then
3546: LD_LOC 1
3550: IFFALSE 3597
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3552: LD_ADDR_EXP 49
3556: PUSH
3557: LD_EXP 49
3561: PPUSH
3562: LD_OWVAR 20
3566: PPUSH
3567: LD_EXP 49
3571: PUSH
3572: LD_OWVAR 20
3576: ARRAY
3577: PUSH
3578: LD_VAR 0 10
3582: ADD
3583: PPUSH
3584: CALL_OW 1
3588: ST_TO_ADDR
// commander := false ;
3589: LD_ADDR_LOC 1
3593: PUSH
3594: LD_INT 0
3596: ST_TO_ADDR
// end ; end ;
3597: LD_VAR 0 7
3601: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3602: LD_INT 0
3604: PPUSH
3605: PPUSH
// uc_side := 0 ;
3606: LD_ADDR_OWVAR 20
3610: PUSH
3611: LD_INT 0
3613: ST_TO_ADDR
// uc_nation := 0 ;
3614: LD_ADDR_OWVAR 21
3618: PUSH
3619: LD_INT 0
3621: ST_TO_ADDR
// vc_chassis := 31 ;
3622: LD_ADDR_OWVAR 37
3626: PUSH
3627: LD_INT 31
3629: ST_TO_ADDR
// vc_control := control_rider ;
3630: LD_ADDR_OWVAR 38
3634: PUSH
3635: LD_INT 4
3637: ST_TO_ADDR
// if def_mastodont = 1 then
3638: LD_EXP 16
3642: PUSH
3643: LD_INT 1
3645: EQUAL
3646: IFFALSE 3685
// for i = 1 to n do
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 1
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3683
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3666: CALL_OW 45
3670: PPUSH
3671: LD_INT 18
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 49
3681: GO 3663
3683: POP
3684: POP
// if def_mastodont = 2 then
3685: LD_EXP 16
3689: PUSH
3690: LD_INT 2
3692: EQUAL
3693: IFFALSE 3732
// for i = 1 to n do
3695: LD_ADDR_VAR 0 3
3699: PUSH
3700: DOUBLE
3701: LD_INT 1
3703: DEC
3704: ST_TO_ADDR
3705: LD_VAR 0 1
3709: PUSH
3710: FOR_TO
3711: IFFALSE 3730
// PlaceUnitArea ( CreateVehicle , MastodontSpawn2 , false ) ;
3713: CALL_OW 45
3717: PPUSH
3718: LD_INT 19
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: CALL_OW 49
3728: GO 3710
3730: POP
3731: POP
// if def_mastodont = 3 then
3732: LD_EXP 16
3736: PUSH
3737: LD_INT 3
3739: EQUAL
3740: IFFALSE 3779
// for i = 1 to n do
3742: LD_ADDR_VAR 0 3
3746: PUSH
3747: DOUBLE
3748: LD_INT 1
3750: DEC
3751: ST_TO_ADDR
3752: LD_VAR 0 1
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3777
// PlaceUnitArea ( CreateVehicle , MastodontSpawn3 , false ) ;
3760: CALL_OW 45
3764: PPUSH
3765: LD_INT 20
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 49
3775: GO 3757
3777: POP
3778: POP
// end ;
3779: LD_VAR 0 2
3783: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
// if side in [ 0 , 9 ] then
3795: LD_VAR 0 1
3799: PUSH
3800: LD_INT 0
3802: PUSH
3803: LD_INT 9
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: IN
3810: IFFALSE 3814
// exit ;
3812: GO 4910
// pos := Side_Positions [ side ] ;
3814: LD_ADDR_VAR 0 3
3818: PUSH
3819: LD_EXP 36
3823: PUSH
3824: LD_VAR 0 1
3828: ARRAY
3829: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3830: LD_ADDR_OWVAR 21
3834: PUSH
3835: LD_EXP 37
3839: PUSH
3840: LD_VAR 0 1
3844: ARRAY
3845: ST_TO_ADDR
// uc_side := side ;
3846: LD_ADDR_OWVAR 20
3850: PUSH
3851: LD_VAR 0 1
3855: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3856: LD_ADDR_VAR 0 4
3860: PUSH
3861: LD_EXP 39
3865: PUSH
3866: LD_VAR 0 3
3870: ARRAY
3871: PUSH
3872: LD_INT 1
3874: ARRAY
3875: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3876: LD_ADDR_VAR 0 5
3880: PUSH
3881: LD_EXP 39
3885: PUSH
3886: LD_VAR 0 3
3890: ARRAY
3891: PUSH
3892: LD_INT 2
3894: ARRAY
3895: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3896: LD_ADDR_VAR 0 6
3900: PUSH
3901: LD_EXP 39
3905: PUSH
3906: LD_VAR 0 3
3910: ARRAY
3911: PUSH
3912: LD_INT 3
3914: ARRAY
3915: ST_TO_ADDR
// if is_depot then
3916: LD_EXP 19
3920: IFFALSE 4053
// begin bc_type = b_depot ;
3922: LD_ADDR_OWVAR 42
3926: PUSH
3927: LD_INT 0
3929: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3930: LD_ADDR_VAR 0 10
3934: PUSH
3935: LD_VAR 0 4
3939: PPUSH
3940: LD_VAR 0 5
3944: PPUSH
3945: LD_VAR 0 6
3949: PPUSH
3950: CALL_OW 47
3954: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3955: LD_VAR 0 10
3959: PPUSH
3960: LD_STRING @
3962: PUSH
3963: LD_VAR 0 1
3967: STR
3968: PPUSH
3969: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3973: LD_VAR 0 10
3977: PPUSH
3978: CALL_OW 274
3982: PPUSH
3983: LD_INT 1
3985: PPUSH
3986: LD_EXP 24
3990: PUSH
3991: LD_INT 1
3993: ARRAY
3994: PPUSH
3995: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3999: LD_VAR 0 10
4003: PPUSH
4004: CALL_OW 274
4008: PPUSH
4009: LD_INT 2
4011: PPUSH
4012: LD_EXP 24
4016: PUSH
4017: LD_INT 2
4019: ARRAY
4020: PPUSH
4021: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4025: LD_VAR 0 10
4029: PPUSH
4030: CALL_OW 274
4034: PPUSH
4035: LD_INT 3
4037: PPUSH
4038: LD_EXP 24
4042: PUSH
4043: LD_INT 3
4045: ARRAY
4046: PPUSH
4047: CALL_OW 277
// end else
4051: GO 4197
// begin for i := 1 to 3 do
4053: LD_ADDR_VAR 0 7
4057: PUSH
4058: DOUBLE
4059: LD_INT 1
4061: DEC
4062: ST_TO_ADDR
4063: LD_INT 3
4065: PUSH
4066: FOR_TO
4067: IFFALSE 4195
// begin r := starting_resources [ i ] ;
4069: LD_ADDR_VAR 0 8
4073: PUSH
4074: LD_EXP 24
4078: PUSH
4079: LD_VAR 0 7
4083: ARRAY
4084: ST_TO_ADDR
// while r >= 10 do
4085: LD_VAR 0 8
4089: PUSH
4090: LD_INT 10
4092: GREATEREQUAL
4093: IFFALSE 4193
// if r > 50 then
4095: LD_VAR 0 8
4099: PUSH
4100: LD_INT 50
4102: GREATER
4103: IFFALSE 4149
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4105: LD_VAR 0 7
4109: PPUSH
4110: LD_INT 5
4112: PPUSH
4113: LD_VAR 0 4
4117: PPUSH
4118: LD_VAR 0 5
4122: PPUSH
4123: LD_INT 4
4125: PPUSH
4126: LD_INT 0
4128: PPUSH
4129: CALL_OW 60
// r := r - 50 ;
4133: LD_ADDR_VAR 0 8
4137: PUSH
4138: LD_VAR 0 8
4142: PUSH
4143: LD_INT 50
4145: MINUS
4146: ST_TO_ADDR
// end else
4147: GO 4191
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4149: LD_VAR 0 7
4153: PPUSH
4154: LD_VAR 0 8
4158: PUSH
4159: LD_INT 10
4161: DIV
4162: PPUSH
4163: LD_VAR 0 4
4167: PPUSH
4168: LD_VAR 0 5
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 60
// r := 0 ;
4183: LD_ADDR_VAR 0 8
4187: PUSH
4188: LD_INT 0
4190: ST_TO_ADDR
// end ;
4191: GO 4085
// end ;
4193: GO 4066
4195: POP
4196: POP
// end ; for r in starting_crates do
4197: LD_ADDR_VAR 0 8
4201: PUSH
4202: LD_EXP 23
4206: PUSH
4207: FOR_IN
4208: IFFALSE 4240
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 5
4215: PPUSH
4216: LD_VAR 0 4
4220: PPUSH
4221: LD_VAR 0 5
4225: PPUSH
4226: LD_VAR 0 8
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 60
4238: GO 4207
4240: POP
4241: POP
// if def_morale_flags then
4242: LD_EXP 9
4246: IFFALSE 4385
// begin x := start_def [ pos ] [ 1 ] ;
4248: LD_ADDR_VAR 0 4
4252: PUSH
4253: LD_EXP 41
4257: PUSH
4258: LD_VAR 0 3
4262: ARRAY
4263: PUSH
4264: LD_INT 1
4266: ARRAY
4267: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4268: LD_ADDR_VAR 0 5
4272: PUSH
4273: LD_EXP 41
4277: PUSH
4278: LD_VAR 0 3
4282: ARRAY
4283: PUSH
4284: LD_INT 2
4286: ARRAY
4287: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4288: LD_VAR 0 4
4292: PPUSH
4293: LD_VAR 0 5
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: LD_INT 2
4303: PPUSH
4304: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4308: LD_ADDR_EXP 46
4312: PUSH
4313: LD_EXP 46
4317: PUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: LD_VAR 0 4
4327: PPUSH
4328: LD_VAR 0 5
4332: PPUSH
4333: LD_INT 1
4335: PUSH
4336: LD_INT 100
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: LD_INT 50
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: LD_INT 20
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 20
4365: PUSH
4366: LD_INT 100
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 418
4383: ADD
4384: ST_TO_ADDR
// end ; commander := true ;
4385: LD_ADDR_LOC 1
4389: PUSH
4390: LD_INT 1
4392: ST_TO_ADDR
// soldiers_created := 0 ;
4393: LD_ADDR_LOC 4
4397: PUSH
4398: LD_INT 0
4400: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4401: LD_ADDR_VAR 0 7
4405: PUSH
4406: DOUBLE
4407: LD_INT 1
4409: DEC
4410: ST_TO_ADDR
4411: LD_EXP 20
4415: PUSH
4416: FOR_TO
4417: IFFALSE 4570
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4419: LD_ADDR_VAR 0 4
4423: PUSH
4424: LD_EXP 40
4428: PUSH
4429: LD_VAR 0 3
4433: ARRAY
4434: PUSH
4435: LD_VAR 0 7
4439: ARRAY
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4445: LD_ADDR_VAR 0 5
4449: PUSH
4450: LD_EXP 40
4454: PUSH
4455: LD_VAR 0 3
4459: ARRAY
4460: PUSH
4461: LD_VAR 0 7
4465: ARRAY
4466: PUSH
4467: LD_INT 2
4469: ARRAY
4470: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4471: LD_ADDR_VAR 0 6
4475: PUSH
4476: LD_EXP 40
4480: PUSH
4481: LD_VAR 0 3
4485: ARRAY
4486: PUSH
4487: LD_VAR 0 7
4491: ARRAY
4492: PUSH
4493: LD_INT 3
4495: ARRAY
4496: ST_TO_ADDR
// bc_type := b_breastwork ;
4497: LD_ADDR_OWVAR 42
4501: PUSH
4502: LD_INT 31
4504: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4505: LD_ADDR_VAR 0 9
4509: PUSH
4510: LD_VAR 0 4
4514: PPUSH
4515: LD_VAR 0 5
4519: PPUSH
4520: LD_VAR 0 6
4524: PPUSH
4525: CALL_OW 47
4529: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4530: LD_INT 1
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: LD_INT 0
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: LD_INT 0
4544: PPUSH
4545: LD_VAR 0 9
4549: PPUSH
4550: CALL 2884 0 6
// soldiers_created := soldiers_created + 1 ;
4554: LD_ADDR_LOC 4
4558: PUSH
4559: LD_LOC 4
4563: PUSH
4564: LD_INT 1
4566: PLUS
4567: ST_TO_ADDR
// end ;
4568: GO 4416
4570: POP
4571: POP
// x := start_def [ pos ] [ 1 ] ;
4572: LD_ADDR_VAR 0 4
4576: PUSH
4577: LD_EXP 41
4581: PUSH
4582: LD_VAR 0 3
4586: ARRAY
4587: PUSH
4588: LD_INT 1
4590: ARRAY
4591: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4592: LD_ADDR_VAR 0 5
4596: PUSH
4597: LD_EXP 41
4601: PUSH
4602: LD_VAR 0 3
4606: ARRAY
4607: PUSH
4608: LD_INT 2
4610: ARRAY
4611: ST_TO_ADDR
// if Sheik = 2 and uc_nation = nation_arabian then
4612: LD_EXP 47
4616: PUSH
4617: LD_INT 2
4619: EQUAL
4620: PUSH
4621: LD_OWVAR 21
4625: PUSH
4626: LD_INT 2
4628: EQUAL
4629: AND
4630: IFFALSE 4658
// prepare_people ( 1 , class_desert_warior , x , y , 5 , 0 ) ;
4632: LD_INT 1
4634: PPUSH
4635: LD_INT 11
4637: PPUSH
4638: LD_VAR 0 4
4642: PPUSH
4643: LD_VAR 0 5
4647: PPUSH
4648: LD_INT 5
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: CALL 2884 0 6
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4658: LD_LOC 8
4662: PUSH
4663: LD_EXP 20
4667: MINUS
4668: PPUSH
4669: LD_INT 1
4671: PPUSH
4672: LD_VAR 0 4
4676: PPUSH
4677: LD_VAR 0 5
4681: PPUSH
4682: LD_INT 5
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL 2884 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4692: LD_LOC 5
4696: PPUSH
4697: LD_INT 2
4699: PPUSH
4700: LD_VAR 0 4
4704: PPUSH
4705: LD_VAR 0 5
4709: PPUSH
4710: LD_INT 5
4712: PPUSH
4713: LD_INT 0
4715: PPUSH
4716: CALL 2884 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4720: LD_LOC 7
4724: PPUSH
4725: LD_INT 3
4727: PPUSH
4728: LD_VAR 0 4
4732: PPUSH
4733: LD_VAR 0 5
4737: PPUSH
4738: LD_INT 5
4740: PPUSH
4741: LD_INT 0
4743: PPUSH
4744: CALL 2884 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4748: LD_LOC 6
4752: PPUSH
4753: LD_INT 4
4755: PPUSH
4756: LD_VAR 0 4
4760: PPUSH
4761: LD_VAR 0 5
4765: PPUSH
4766: LD_INT 5
4768: PPUSH
4769: LD_INT 0
4771: PPUSH
4772: CALL 2884 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4776: LD_EXP 10
4780: PUSH
4781: LD_INT 20
4783: PPUSH
4784: LD_VAR 0 1
4788: PPUSH
4789: CALL_OW 321
4793: PUSH
4794: LD_INT 1
4796: EQUAL
4797: AND
4798: IFFALSE 4815
// SetTech ( tech_SibDet , side , state_researched ) ;
4800: LD_INT 20
4802: PPUSH
4803: LD_VAR 0 1
4807: PPUSH
4808: LD_INT 2
4810: PPUSH
4811: CALL_OW 322
// if def_siberite_bomb = 1 then
4815: LD_EXP 13
4819: PUSH
4820: LD_INT 1
4822: EQUAL
4823: IFFALSE 4857
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4825: LD_INT 25
4827: PPUSH
4828: LD_VAR 0 1
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4840: LD_INT 73
4842: PPUSH
4843: LD_VAR 0 1
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: CALL_OW 322
// end else
4855: GO 4887
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4857: LD_INT 25
4859: PPUSH
4860: LD_VAR 0 1
4864: PPUSH
4865: LD_INT 0
4867: PPUSH
4868: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4872: LD_INT 73
4874: PPUSH
4875: LD_VAR 0 1
4879: PPUSH
4880: LD_INT 0
4882: PPUSH
4883: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4887: LD_INT 24
4889: PPUSH
4890: LD_VAR 0 1
4894: PPUSH
4895: LD_INT 0
4897: PPUSH
4898: CALL_OW 322
// global_defined := true ;
4902: LD_ADDR_LOC 3
4906: PUSH
4907: LD_INT 1
4909: ST_TO_ADDR
// end ;
4910: LD_VAR 0 2
4914: RET
// function prepare_sides ; var i ; begin
4915: LD_INT 0
4917: PPUSH
4918: PPUSH
// global_units := [ ] ;
4919: LD_ADDR_LOC 2
4923: PUSH
4924: EMPTY
4925: ST_TO_ADDR
// global_defined := false ;
4926: LD_ADDR_LOC 3
4930: PUSH
4931: LD_INT 0
4933: ST_TO_ADDR
// CountClassMembers ;
4934: CALL 4999 0 0
// for i := 1 to 8 do
4938: LD_ADDR_VAR 0 2
4942: PUSH
4943: DOUBLE
4944: LD_INT 1
4946: DEC
4947: ST_TO_ADDR
4948: LD_INT 8
4950: PUSH
4951: FOR_TO
4952: IFFALSE 4977
// if Side_Positions [ i ] then
4954: LD_EXP 36
4958: PUSH
4959: LD_VAR 0 2
4963: ARRAY
4964: IFFALSE 4975
// prepare_side ( i ) ;
4966: LD_VAR 0 2
4970: PPUSH
4971: CALL 3784 0 1
4975: GO 4951
4977: POP
4978: POP
// if def_mastodont then
4979: LD_EXP 16
4983: IFFALSE 4994
// prepare_mastodonts ( Mastodont ) ;
4985: LD_EXP 48
4989: PPUSH
4990: CALL 3602 0 1
// end ;
4994: LD_VAR 0 1
4998: RET
// function CountClassMembers ; var Mode ; begin
4999: LD_INT 0
5001: PPUSH
5002: PPUSH
// if No_Mechs then
5003: LD_EXP 17
5007: IFFALSE 5019
// Mode := 2 else
5009: LD_ADDR_VAR 0 2
5013: PUSH
5014: LD_INT 2
5016: ST_TO_ADDR
5017: GO 5027
// Mode := 1 ;
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// neng := number_of_people ;
5027: LD_ADDR_LOC 5
5031: PUSH
5032: LD_EXP 21
5036: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5037: LD_ADDR_LOC 8
5041: PUSH
5042: LD_LOC 5
5046: PUSH
5047: LD_INT 4
5049: PUSH
5050: LD_INT 3
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_VAR 0 2
5061: ARRAY
5062: DIV
5063: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5064: LD_LOC 8
5068: PUSH
5069: LD_EXP 20
5073: LESS
5074: IFFALSE 5086
// nsol := number_of_breastworks ;
5076: LD_ADDR_LOC 8
5080: PUSH
5081: LD_EXP 20
5085: ST_TO_ADDR
// neng := neng - nsol ;
5086: LD_ADDR_LOC 5
5090: PUSH
5091: LD_LOC 5
5095: PUSH
5096: LD_LOC 8
5100: MINUS
5101: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5102: LD_ADDR_LOC 6
5106: PUSH
5107: LD_LOC 5
5111: PUSH
5112: LD_INT 3
5114: PUSH
5115: LD_INT 2
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PUSH
5122: LD_VAR 0 2
5126: ARRAY
5127: DIV
5128: ST_TO_ADDR
// if ( nsci < 1 ) then
5129: LD_LOC 6
5133: PUSH
5134: LD_INT 1
5136: LESS
5137: IFFALSE 5147
// nsci := 1 ;
5139: LD_ADDR_LOC 6
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// neng := neng - nsci ;
5147: LD_ADDR_LOC 5
5151: PUSH
5152: LD_LOC 5
5156: PUSH
5157: LD_LOC 6
5161: MINUS
5162: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5163: LD_ADDR_LOC 7
5167: PUSH
5168: LD_LOC 5
5172: PUSH
5173: LD_INT 2
5175: DIV
5176: PUSH
5177: LD_INT 0
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PUSH
5184: LD_VAR 0 2
5188: ARRAY
5189: ST_TO_ADDR
// neng := neng - nmech ;
5190: LD_ADDR_LOC 5
5194: PUSH
5195: LD_LOC 5
5199: PUSH
5200: LD_LOC 7
5204: MINUS
5205: ST_TO_ADDR
// if ( neng < 1 ) then
5206: LD_LOC 5
5210: PUSH
5211: LD_INT 1
5213: LESS
5214: IFFALSE 5224
// neng := 1 ;
5216: LD_ADDR_LOC 5
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// end ;
5224: LD_VAR 0 1
5228: RET
// starting begin disable ( 98 ) ;
5229: LD_INT 98
5231: DISABLE_MARKED
// disable ( 99 ) ;
5232: LD_INT 99
5234: DISABLE_MARKED
// disable ( 400 ) ;
5235: LD_INT 400
5237: DISABLE_MARKED
// disable ( 401 ) ;
5238: LD_INT 401
5240: DISABLE_MARKED
// mp_selectmsg := true ;
5241: LD_ADDR_OWVAR 13
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5249: CALL 68 0 0
// init_map ;
5253: CALL 1307 0 0
// init_respawning ;
5257: CALL 14558 0 0
// set_shared_visions_and_alliances ;
5261: CALL 2596 0 0
// ResetFog ;
5265: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5269: LD_OWVAR 2
5273: PPUSH
5274: CALL_OW 520
// AnimateTrees ( true ) ;
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 573
// prepare_sides ;
5285: CALL 4915 0 0
// Init_Win_Condition ;
5289: CALL 8539 0 0
// ShowTimer ;
5293: CALL 8117 0 0
// music_nat := Side_Nations [ your_side ] ;
5297: LD_ADDR_OWVAR 71
5301: PUSH
5302: LD_EXP 37
5306: PUSH
5307: LD_OWVAR 2
5311: ARRAY
5312: ST_TO_ADDR
// if IAmSpec then
5313: CALL_OW 531
5317: IFFALSE 5341
// begin fogoff ( true ) ;
5319: LD_INT 1
5321: PPUSH
5322: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
5326: LD_INT 130
5328: PPUSH
5329: LD_INT 100
5331: PPUSH
5332: CALL_OW 86
// enable ( 400 ) ;
5336: LD_INT 400
5338: ENABLE_MARKED
// end else
5339: GO 5387
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5341: LD_EXP 41
5345: PUSH
5346: LD_EXP 36
5350: PUSH
5351: LD_OWVAR 2
5355: ARRAY
5356: ARRAY
5357: PUSH
5358: LD_INT 1
5360: ARRAY
5361: PPUSH
5362: LD_EXP 41
5366: PUSH
5367: LD_EXP 36
5371: PUSH
5372: LD_OWVAR 2
5376: ARRAY
5377: ARRAY
5378: PUSH
5379: LD_INT 2
5381: ARRAY
5382: PPUSH
5383: CALL_OW 86
// end ; InitApeman ;
5387: CALL 6625 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
5391: LD_ADDR_EXP 59
5395: PUSH
5396: LD_INT 9
5398: PUSH
5399: LD_INT 10
5401: PUSH
5402: LD_INT 11
5404: PUSH
5405: LD_INT 12
5407: PUSH
5408: LD_INT 13
5410: PUSH
5411: LD_INT 14
5413: PUSH
5414: LD_INT 15
5416: PUSH
5417: LD_INT 16
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: ST_TO_ADDR
// BeginBuildUp ;
5430: CALL 15052 0 0
// end ;
5434: END
// every 0 0$1 do
5435: GO 5437
5437: DISABLE
// if ( def_siberite_bomb > 1 ) then
5438: LD_EXP 13
5442: PUSH
5443: LD_INT 1
5445: GREATER
5446: IFFALSE 5461
// begin wait ( siberite_bomb_Delay ) ;
5448: LD_EXP 31
5452: PPUSH
5453: CALL_OW 67
// EnableSibFiss ;
5457: CALL 5462 0 0
// end ;
5461: END
// function EnableSibFiss ; var i ; begin
5462: LD_INT 0
5464: PPUSH
5465: PPUSH
// for i := 1 to 8 do
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: DOUBLE
5472: LD_INT 1
5474: DEC
5475: ST_TO_ADDR
5476: LD_INT 8
5478: PUSH
5479: FOR_TO
5480: IFFALSE 5526
// if Side_Positions [ i ] then
5482: LD_EXP 36
5486: PUSH
5487: LD_VAR 0 2
5491: ARRAY
5492: IFFALSE 5524
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5494: LD_INT 25
5496: PPUSH
5497: LD_VAR 0 2
5501: PPUSH
5502: LD_INT 1
5504: PPUSH
5505: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5509: LD_INT 73
5511: PPUSH
5512: LD_VAR 0 2
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: CALL_OW 322
// end ;
5524: GO 5479
5526: POP
5527: POP
// end ; end_of_file
5528: LD_VAR 0 1
5532: RET
// every 0 0$25 + 0 0$1.0 do
5533: GO 5535
5535: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5536: LD_INT 22
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: CALL_OW 287
5546: PUSH
5547: LD_INT 200
5549: PUSH
5550: LD_EXP 25
5554: MINUS
5555: PUSH
5556: LD_INT 25
5558: DIVREAL
5559: PUSH
5560: LD_INT 5
5562: MUL
5563: LESS
5564: IFFALSE 5587
// CreateCratesArea ( Rand ( 3 , 4 ) , Between1 , true ) ;
5566: LD_INT 3
5568: PPUSH
5569: LD_INT 4
5571: PPUSH
5572: CALL_OW 12
5576: PPUSH
5577: LD_INT 22
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5587: LD_INT 23
5589: PPUSH
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 287
5597: PUSH
5598: LD_INT 200
5600: PUSH
5601: LD_EXP 25
5605: MINUS
5606: PUSH
5607: LD_INT 25
5609: DIVREAL
5610: PUSH
5611: LD_INT 5
5613: MUL
5614: LESS
5615: IFFALSE 5638
// CreateCratesArea ( Rand ( 3 , 4 ) , Between2 , true ) ;
5617: LD_INT 3
5619: PPUSH
5620: LD_INT 4
5622: PPUSH
5623: CALL_OW 12
5627: PPUSH
5628: LD_INT 23
5630: PPUSH
5631: LD_INT 1
5633: PPUSH
5634: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5638: LD_INT 24
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 287
5648: PUSH
5649: LD_INT 200
5651: PUSH
5652: LD_EXP 25
5656: MINUS
5657: PUSH
5658: LD_INT 25
5660: DIVREAL
5661: PUSH
5662: LD_INT 5
5664: MUL
5665: LESS
5666: IFFALSE 5689
// CreateCratesArea ( Rand ( 3 , 4 ) , Between3 , true ) ;
5668: LD_INT 3
5670: PPUSH
5671: LD_INT 4
5673: PPUSH
5674: CALL_OW 12
5678: PPUSH
5679: LD_INT 24
5681: PPUSH
5682: LD_INT 1
5684: PPUSH
5685: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5689: LD_INT 25
5691: PPUSH
5692: LD_INT 1
5694: PPUSH
5695: CALL_OW 287
5699: PUSH
5700: LD_INT 200
5702: PUSH
5703: LD_EXP 25
5707: MINUS
5708: PUSH
5709: LD_INT 25
5711: DIVREAL
5712: PUSH
5713: LD_INT 5
5715: MUL
5716: LESS
5717: IFFALSE 5740
// CreateCratesArea ( Rand ( 3 , 4 ) , Between4 , true ) ;
5719: LD_INT 3
5721: PPUSH
5722: LD_INT 4
5724: PPUSH
5725: CALL_OW 12
5729: PPUSH
5730: LD_INT 25
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: CALL_OW 55
// if GetResourceArea ( Ring1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5740: LD_INT 26
5742: PPUSH
5743: LD_INT 1
5745: PPUSH
5746: CALL_OW 287
5750: PUSH
5751: LD_INT 200
5753: PUSH
5754: LD_EXP 25
5758: MINUS
5759: PUSH
5760: LD_INT 50
5762: DIVREAL
5763: PUSH
5764: LD_INT 5
5766: MUL
5767: LESS
5768: IFFALSE 5791
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring1 , true ) ;
5770: LD_INT 3
5772: PPUSH
5773: LD_INT 4
5775: PPUSH
5776: CALL_OW 12
5780: PPUSH
5781: LD_INT 26
5783: PPUSH
5784: LD_INT 1
5786: PPUSH
5787: CALL_OW 55
// if GetResourceArea ( Ring2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5791: LD_INT 27
5793: PPUSH
5794: LD_INT 1
5796: PPUSH
5797: CALL_OW 287
5801: PUSH
5802: LD_INT 200
5804: PUSH
5805: LD_EXP 25
5809: MINUS
5810: PUSH
5811: LD_INT 50
5813: DIVREAL
5814: PUSH
5815: LD_INT 5
5817: MUL
5818: LESS
5819: IFFALSE 5842
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring2 , true ) ;
5821: LD_INT 3
5823: PPUSH
5824: LD_INT 4
5826: PPUSH
5827: CALL_OW 12
5831: PPUSH
5832: LD_INT 27
5834: PPUSH
5835: LD_INT 1
5837: PPUSH
5838: CALL_OW 55
// if GetResourceArea ( Ring3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5842: LD_INT 28
5844: PPUSH
5845: LD_INT 1
5847: PPUSH
5848: CALL_OW 287
5852: PUSH
5853: LD_INT 200
5855: PUSH
5856: LD_EXP 25
5860: MINUS
5861: PUSH
5862: LD_INT 50
5864: DIVREAL
5865: PUSH
5866: LD_INT 5
5868: MUL
5869: LESS
5870: IFFALSE 5893
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring3 , true ) ;
5872: LD_INT 3
5874: PPUSH
5875: LD_INT 4
5877: PPUSH
5878: CALL_OW 12
5882: PPUSH
5883: LD_INT 28
5885: PPUSH
5886: LD_INT 1
5888: PPUSH
5889: CALL_OW 55
// if GetResourceArea ( Ring4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5893: LD_INT 29
5895: PPUSH
5896: LD_INT 1
5898: PPUSH
5899: CALL_OW 287
5903: PUSH
5904: LD_INT 200
5906: PUSH
5907: LD_EXP 25
5911: MINUS
5912: PUSH
5913: LD_INT 50
5915: DIVREAL
5916: PUSH
5917: LD_INT 5
5919: MUL
5920: LESS
5921: IFFALSE 5944
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring4 , true ) ;
5923: LD_INT 3
5925: PPUSH
5926: LD_INT 4
5928: PPUSH
5929: CALL_OW 12
5933: PPUSH
5934: LD_INT 29
5936: PPUSH
5937: LD_INT 1
5939: PPUSH
5940: CALL_OW 55
// if GetResourceArea ( MZCenter , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5944: LD_INT 21
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: CALL_OW 287
5954: PUSH
5955: LD_INT 200
5957: PUSH
5958: LD_EXP 25
5962: MINUS
5963: PUSH
5964: LD_INT 25
5966: DIVREAL
5967: PUSH
5968: LD_INT 5
5970: MUL
5971: LESS
5972: IFFALSE 5987
// CreateCratesArea ( 5 , MZCenter , true ) ;
5974: LD_INT 5
5976: PPUSH
5977: LD_INT 21
5979: PPUSH
5980: LD_INT 1
5982: PPUSH
5983: CALL_OW 55
// enable ;
5987: ENABLE
// end ;
5988: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5989: GO 5991
5991: DISABLE
5992: LD_INT 0
5994: PPUSH
5995: PPUSH
// begin case tick of 1 .. 1 1$0 :
5996: LD_OWVAR 1
6000: PUSH
6001: LD_INT 1
6003: DOUBLE
6004: GREATEREQUAL
6005: IFFALSE 6013
6007: LD_INT 2100
6009: DOUBLE
6010: LESSEQUAL
6011: IFTRUE 6015
6013: GO 6043
6015: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
6016: LD_EXP 25
6020: PUSH
6021: LD_INT 100
6023: DIVREAL
6024: PUSH
6025: LD_INT 525
6027: PPUSH
6028: LD_INT 1050
6030: PPUSH
6031: CALL_OW 12
6035: MUL
6036: PPUSH
6037: CALL_OW 67
6041: GO 6345
6043: LD_INT 2100
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: DOUBLE
6050: GREATEREQUAL
6051: IFFALSE 6059
6053: LD_INT 10500
6055: DOUBLE
6056: LESSEQUAL
6057: IFTRUE 6061
6059: GO 6089
6061: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
6062: LD_EXP 25
6066: PUSH
6067: LD_INT 100
6069: DIVREAL
6070: PUSH
6071: LD_INT 1050
6073: PPUSH
6074: LD_INT 1750
6076: PPUSH
6077: CALL_OW 12
6081: MUL
6082: PPUSH
6083: CALL_OW 67
6087: GO 6345
6089: LD_INT 10500
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: DOUBLE
6096: GREATEREQUAL
6097: IFFALSE 6105
6099: LD_INT 21000
6101: DOUBLE
6102: LESSEQUAL
6103: IFTRUE 6107
6105: GO 6135
6107: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
6108: LD_EXP 25
6112: PUSH
6113: LD_INT 100
6115: DIVREAL
6116: PUSH
6117: LD_INT 1750
6119: PPUSH
6120: LD_INT 2100
6122: PPUSH
6123: CALL_OW 12
6127: MUL
6128: PPUSH
6129: CALL_OW 67
6133: GO 6345
6135: LD_INT 21000
6137: PUSH
6138: LD_INT 1
6140: PLUS
6141: DOUBLE
6142: GREATEREQUAL
6143: IFFALSE 6151
6145: LD_INT 42000
6147: DOUBLE
6148: LESSEQUAL
6149: IFTRUE 6153
6151: GO 6181
6153: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6154: LD_EXP 25
6158: PUSH
6159: LD_INT 100
6161: DIVREAL
6162: PUSH
6163: LD_INT 2100
6165: PPUSH
6166: LD_INT 2275
6168: PPUSH
6169: CALL_OW 12
6173: MUL
6174: PPUSH
6175: CALL_OW 67
6179: GO 6345
6181: LD_INT 42000
6183: PUSH
6184: LD_INT 1
6186: PLUS
6187: DOUBLE
6188: GREATEREQUAL
6189: IFFALSE 6197
6191: LD_INT 63000
6193: DOUBLE
6194: LESSEQUAL
6195: IFTRUE 6199
6197: GO 6227
6199: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6200: LD_EXP 25
6204: PUSH
6205: LD_INT 100
6207: DIVREAL
6208: PUSH
6209: LD_INT 2275
6211: PPUSH
6212: LD_INT 2450
6214: PPUSH
6215: CALL_OW 12
6219: MUL
6220: PPUSH
6221: CALL_OW 67
6225: GO 6345
6227: LD_INT 63000
6229: PUSH
6230: LD_INT 1
6232: PLUS
6233: DOUBLE
6234: GREATEREQUAL
6235: IFFALSE 6243
6237: LD_INT 105000
6239: DOUBLE
6240: LESSEQUAL
6241: IFTRUE 6245
6243: GO 6273
6245: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6246: LD_EXP 25
6250: PUSH
6251: LD_INT 100
6253: DIVREAL
6254: PUSH
6255: LD_INT 2450
6257: PPUSH
6258: LD_INT 2800
6260: PPUSH
6261: CALL_OW 12
6265: MUL
6266: PPUSH
6267: CALL_OW 67
6271: GO 6345
6273: LD_INT 105000
6275: PUSH
6276: LD_INT 1
6278: PLUS
6279: DOUBLE
6280: GREATEREQUAL
6281: IFFALSE 6289
6283: LD_INT 630000
6285: DOUBLE
6286: LESSEQUAL
6287: IFTRUE 6291
6289: GO 6319
6291: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
6292: LD_EXP 25
6296: PUSH
6297: LD_INT 100
6299: DIVREAL
6300: PUSH
6301: LD_INT 2800
6303: PPUSH
6304: LD_INT 3500
6306: PPUSH
6307: CALL_OW 12
6311: MUL
6312: PPUSH
6313: CALL_OW 67
6317: GO 6345
6319: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
6320: LD_EXP 25
6324: PUSH
6325: LD_INT 100
6327: DIVREAL
6328: PUSH
6329: LD_INT 3500
6331: PPUSH
6332: LD_INT 3850
6334: PPUSH
6335: CALL_OW 12
6339: MUL
6340: PPUSH
6341: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6345: LD_ADDR_VAR 0 2
6349: PUSH
6350: LD_INT 3
6352: PPUSH
6353: LD_INT 5
6355: PPUSH
6356: CALL_OW 12
6360: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6361: LD_ADDR_VAR 0 1
6365: PUSH
6366: LD_EXP 36
6370: PUSH
6371: LD_INT 0
6373: PUSH
6374: EMPTY
6375: LIST
6376: DIFF
6377: PUSH
6378: FOR_IN
6379: IFFALSE 6428
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
6381: LD_VAR 0 2
6385: PPUSH
6386: LD_EXP 41
6390: PUSH
6391: LD_VAR 0 1
6395: ARRAY
6396: PUSH
6397: LD_INT 1
6399: ARRAY
6400: PPUSH
6401: LD_EXP 41
6405: PUSH
6406: LD_VAR 0 1
6410: ARRAY
6411: PUSH
6412: LD_INT 2
6414: ARRAY
6415: PPUSH
6416: LD_INT 20
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 56
6426: GO 6378
6428: POP
6429: POP
// enable ;
6430: ENABLE
// end ; end_of_file
6431: PPOPN 2
6433: END
// every 20 20$00 trigger apemanNumber do
6434: LD_EXP 50
6438: IFFALSE 6471
6440: GO 6442
6442: DISABLE
// begin enable ;
6443: ENABLE
// if apeLevel >= 8 then
6444: LD_EXP 55
6448: PUSH
6449: LD_INT 8
6451: GREATEREQUAL
6452: IFFALSE 6457
// disable else
6454: DISABLE
6455: GO 6471
// apeLevel := apeLevel + 1 ;
6457: LD_ADDR_EXP 55
6461: PUSH
6462: LD_EXP 55
6466: PUSH
6467: LD_INT 1
6469: PLUS
6470: ST_TO_ADDR
// end ;
6471: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6472: LD_EXP 50
6476: PUSH
6477: LD_EXP 51
6481: LESS
6482: IFFALSE 6622
6484: GO 6486
6486: DISABLE
6487: LD_INT 0
6489: PPUSH
6490: PPUSH
6491: PPUSH
6492: PPUSH
// begin enable ;
6493: ENABLE
// for i := 1 to apemanPos do
6494: LD_ADDR_VAR 0 1
6498: PUSH
6499: DOUBLE
6500: LD_INT 1
6502: DEC
6503: ST_TO_ADDR
6504: LD_EXP 53
6508: PUSH
6509: FOR_TO
6510: IFFALSE 6620
// begin if apemanPlayerCount [ i ] then
6512: LD_EXP 54
6516: PUSH
6517: LD_VAR 0 1
6521: ARRAY
6522: IFFALSE 6618
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6524: LD_EXP 54
6528: PUSH
6529: LD_VAR 0 1
6533: ARRAY
6534: PUSH
6535: LD_EXP 53
6539: PUSH
6540: LD_VAR 0 1
6544: ARRAY
6545: GREATER
6546: IFFALSE 6618
// begin ape := PrepareApeman ;
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: CALL 7141 0 0
6557: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6558: LD_VAR 0 2
6562: PPUSH
6563: LD_EXP 56
6567: PUSH
6568: LD_VAR 0 1
6572: ARRAY
6573: PPUSH
6574: LD_INT 0
6576: PPUSH
6577: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6581: LD_ADDR_EXP 53
6585: PUSH
6586: LD_EXP 53
6590: PPUSH
6591: LD_VAR 0 1
6595: PPUSH
6596: LD_EXP 53
6600: PUSH
6601: LD_VAR 0 1
6605: ARRAY
6606: PUSH
6607: LD_VAR 0 2
6611: UNION
6612: PPUSH
6613: CALL_OW 1
6617: ST_TO_ADDR
// end ; end ; end ;
6618: GO 6509
6620: POP
6621: POP
// end ;
6622: PPOPN 4
6624: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6625: LD_INT 0
6627: PPUSH
6628: PPUSH
6629: PPUSH
6630: PPUSH
6631: PPUSH
6632: PPUSH
6633: PPUSH
// playersAmount := 0 ;
6634: LD_ADDR_VAR 0 3
6638: PUSH
6639: LD_INT 0
6641: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6642: LD_ADDR_VAR 0 7
6646: PUSH
6647: LD_INT 1
6649: PUSH
6650: LD_INT 2
6652: PUSH
6653: LD_INT 3
6655: PUSH
6656: LD_INT 4
6658: PUSH
6659: LD_INT 5
6661: PUSH
6662: LD_INT 6
6664: PUSH
6665: LD_INT 7
6667: PUSH
6668: LD_INT 8
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6681: LD_ADDR_EXP 56
6685: PUSH
6686: LD_INT 0
6688: PUSH
6689: LD_INT 0
6691: PUSH
6692: LD_INT 0
6694: PUSH
6695: LD_INT 0
6697: PUSH
6698: LD_INT 0
6700: PUSH
6701: LD_INT 0
6703: PUSH
6704: LD_INT 0
6706: PUSH
6707: LD_INT 0
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: ST_TO_ADDR
// for j = 1 to Side_Positions do
6720: LD_ADDR_VAR 0 4
6724: PUSH
6725: DOUBLE
6726: LD_INT 1
6728: DEC
6729: ST_TO_ADDR
6730: LD_EXP 36
6734: PUSH
6735: FOR_TO
6736: IFFALSE 6803
// if Side_Positions [ j ] then
6738: LD_EXP 36
6742: PUSH
6743: LD_VAR 0 4
6747: ARRAY
6748: IFFALSE 6801
// begin playersAmount := playersAmount + 1 ;
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_VAR 0 3
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6764: LD_ADDR_EXP 56
6768: PUSH
6769: LD_EXP 56
6773: PPUSH
6774: LD_VAR 0 4
6778: PPUSH
6779: LD_VAR 0 7
6783: PUSH
6784: LD_EXP 36
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: ARRAY
6795: PPUSH
6796: CALL_OW 1
6800: ST_TO_ADDR
// end ;
6801: GO 6735
6803: POP
6804: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6805: LD_ADDR_EXP 52
6809: PUSH
6810: LD_INT 3
6812: PUSH
6813: LD_EXP 27
6817: MUL
6818: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6819: LD_ADDR_EXP 50
6823: PUSH
6824: LD_VAR 0 3
6828: PUSH
6829: LD_EXP 52
6833: MUL
6834: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6835: LD_ADDR_EXP 51
6839: PUSH
6840: LD_EXP 50
6844: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6845: LD_ADDR_EXP 53
6849: PUSH
6850: LD_INT 0
6852: PUSH
6853: LD_INT 0
6855: PUSH
6856: LD_INT 0
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: LD_INT 0
6864: PUSH
6865: LD_INT 0
6867: PUSH
6868: LD_INT 0
6870: PUSH
6871: LD_INT 0
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6884: LD_ADDR_EXP 54
6888: PUSH
6889: LD_INT 0
6891: PUSH
6892: LD_INT 0
6894: PUSH
6895: LD_INT 0
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: LD_INT 0
6903: PUSH
6904: LD_INT 0
6906: PUSH
6907: LD_INT 0
6909: PUSH
6910: LD_INT 0
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: ST_TO_ADDR
// apeLevel := 1 ;
6923: LD_ADDR_EXP 55
6927: PUSH
6928: LD_INT 1
6930: ST_TO_ADDR
// if not apemanNumber then
6931: LD_EXP 50
6935: NOT
6936: IFFALSE 6940
// exit ;
6938: GO 7136
// for i := 1 to apemanPerPlayer do
6940: LD_ADDR_VAR 0 2
6944: PUSH
6945: DOUBLE
6946: LD_INT 1
6948: DEC
6949: ST_TO_ADDR
6950: LD_EXP 52
6954: PUSH
6955: FOR_TO
6956: IFFALSE 7134
// begin for j := 1 to Side_Positions do
6958: LD_ADDR_VAR 0 4
6962: PUSH
6963: DOUBLE
6964: LD_INT 1
6966: DEC
6967: ST_TO_ADDR
6968: LD_EXP 36
6972: PUSH
6973: FOR_TO
6974: IFFALSE 7130
// if Side_Positions [ j ] then
6976: LD_EXP 36
6980: PUSH
6981: LD_VAR 0 4
6985: ARRAY
6986: IFFALSE 7128
// begin pos := Side_Positions [ j ] ;
6988: LD_ADDR_VAR 0 6
6992: PUSH
6993: LD_EXP 36
6997: PUSH
6998: LD_VAR 0 4
7002: ARRAY
7003: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7004: LD_ADDR_EXP 54
7008: PUSH
7009: LD_EXP 54
7013: PPUSH
7014: LD_VAR 0 4
7018: PPUSH
7019: LD_EXP 54
7023: PUSH
7024: LD_VAR 0 4
7028: ARRAY
7029: PUSH
7030: LD_INT 1
7032: PLUS
7033: PPUSH
7034: CALL_OW 1
7038: ST_TO_ADDR
// ape := PrepareApeman ;
7039: LD_ADDR_VAR 0 5
7043: PUSH
7044: CALL 7141 0 0
7048: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7049: LD_ADDR_EXP 53
7053: PUSH
7054: LD_EXP 53
7058: PPUSH
7059: LD_VAR 0 4
7063: PPUSH
7064: LD_EXP 53
7068: PUSH
7069: LD_VAR 0 4
7073: ARRAY
7074: PPUSH
7075: LD_EXP 53
7079: PUSH
7080: LD_VAR 0 4
7084: ARRAY
7085: PUSH
7086: LD_INT 1
7088: PLUS
7089: PPUSH
7090: LD_VAR 0 5
7094: PPUSH
7095: CALL_OW 1
7099: PPUSH
7100: CALL_OW 1
7104: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7105: LD_VAR 0 5
7109: PPUSH
7110: LD_EXP 56
7114: PUSH
7115: LD_VAR 0 4
7119: ARRAY
7120: PPUSH
7121: LD_INT 0
7123: PPUSH
7124: CALL_OW 49
// end ;
7128: GO 6973
7130: POP
7131: POP
// end ;
7132: GO 6955
7134: POP
7135: POP
// end ;
7136: LD_VAR 0 1
7140: RET
// export function PrepareApeman ; var bonus ; begin
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
// uc_side := 0 ;
7145: LD_ADDR_OWVAR 20
7149: PUSH
7150: LD_INT 0
7152: ST_TO_ADDR
// uc_nation := 0 ;
7153: LD_ADDR_OWVAR 21
7157: PUSH
7158: LD_INT 0
7160: ST_TO_ADDR
// InitHc ;
7161: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_INT 1
7172: NEG
7173: PUSH
7174: LD_INT 0
7176: PUSH
7177: LD_INT 1
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 25
7187: PUSH
7188: LD_INT 12
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PPUSH
7195: CALL_OW 69
7199: PUSH
7200: LD_INT 3
7202: MOD
7203: PUSH
7204: LD_INT 1
7206: PLUS
7207: ARRAY
7208: ST_TO_ADDR
// hc_class := class_apeman ;
7209: LD_ADDR_OWVAR 28
7213: PUSH
7214: LD_INT 12
7216: ST_TO_ADDR
// hc_gallery :=  ;
7217: LD_ADDR_OWVAR 33
7221: PUSH
7222: LD_STRING 
7224: ST_TO_ADDR
// hc_name :=  ;
7225: LD_ADDR_OWVAR 26
7229: PUSH
7230: LD_STRING 
7232: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7233: LD_ADDR_OWVAR 31
7237: PUSH
7238: LD_EXP 55
7242: PUSH
7243: LD_VAR 0 2
7247: PLUS
7248: PUSH
7249: LD_EXP 55
7253: PUSH
7254: LD_VAR 0 2
7258: PLUS
7259: PUSH
7260: LD_EXP 55
7264: PUSH
7265: LD_VAR 0 2
7269: PLUS
7270: PUSH
7271: LD_EXP 55
7275: PUSH
7276: LD_VAR 0 2
7280: PLUS
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7288: LD_ADDR_OWVAR 35
7292: PUSH
7293: LD_INT 10
7295: PUSH
7296: LD_VAR 0 2
7300: MUL
7301: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7302: LD_ADDR_OWVAR 29
7306: PUSH
7307: LD_INT 12
7309: PUSH
7310: LD_INT 12
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: ST_TO_ADDR
// result := CreateHuman ;
7317: LD_ADDR_VAR 0 1
7321: PUSH
7322: CALL_OW 44
7326: ST_TO_ADDR
// end ;
7327: LD_VAR 0 1
7331: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7332: LD_INT 0
7334: PPUSH
7335: PPUSH
7336: PPUSH
// if not ape then
7337: LD_VAR 0 1
7341: NOT
7342: IFFALSE 7346
// exit ;
7344: GO 7471
// side := GetSide ( ape ) ;
7346: LD_ADDR_VAR 0 3
7350: PUSH
7351: LD_VAR 0 1
7355: PPUSH
7356: CALL_OW 255
7360: ST_TO_ADDR
// if not side then
7361: LD_VAR 0 3
7365: NOT
7366: IFFALSE 7420
// begin for i = 1 to apemanPos do
7368: LD_ADDR_VAR 0 4
7372: PUSH
7373: DOUBLE
7374: LD_INT 1
7376: DEC
7377: ST_TO_ADDR
7378: LD_EXP 53
7382: PUSH
7383: FOR_TO
7384: IFFALSE 7418
// if ape in apemanPos [ i ] then
7386: LD_VAR 0 1
7390: PUSH
7391: LD_EXP 53
7395: PUSH
7396: LD_VAR 0 4
7400: ARRAY
7401: IN
7402: IFFALSE 7416
// begin side := i ;
7404: LD_ADDR_VAR 0 3
7408: PUSH
7409: LD_VAR 0 4
7413: ST_TO_ADDR
// break ;
7414: GO 7418
// end ;
7416: GO 7383
7418: POP
7419: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7420: LD_ADDR_EXP 53
7424: PUSH
7425: LD_EXP 53
7429: PPUSH
7430: LD_VAR 0 3
7434: PPUSH
7435: LD_EXP 53
7439: PUSH
7440: LD_VAR 0 3
7444: ARRAY
7445: PUSH
7446: LD_VAR 0 1
7450: DIFF
7451: PPUSH
7452: CALL_OW 1
7456: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7457: LD_ADDR_EXP 50
7461: PUSH
7462: LD_EXP 50
7466: PUSH
7467: LD_INT 1
7469: MINUS
7470: ST_TO_ADDR
// end ; end_of_file
7471: LD_VAR 0 2
7475: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7476: LD_VAR 0 1
7480: PPUSH
7481: CALL_OW 266
7485: PUSH
7486: LD_INT 0
7488: PUSH
7489: LD_INT 1
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: IN
7496: IFFALSE 7521
// SetBName ( b , @ & GetSide ( b ) ) ;
7498: LD_VAR 0 1
7502: PPUSH
7503: LD_STRING @
7505: PUSH
7506: LD_VAR 0 1
7510: PPUSH
7511: CALL_OW 255
7515: STR
7516: PPUSH
7517: CALL_OW 500
// end ;
7521: PPOPN 2
7523: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7524: LD_VAR 0 1
7528: PPUSH
7529: CALL_OW 266
7533: PUSH
7534: LD_INT 0
7536: PUSH
7537: LD_INT 1
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: IN
7544: IFFALSE 7569
// SetBName ( b , @ & GetSide ( b ) ) ;
7546: LD_VAR 0 1
7550: PPUSH
7551: LD_STRING @
7553: PUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: CALL_OW 255
7563: STR
7564: PPUSH
7565: CALL_OW 500
// end ;
7569: PPOPN 3
7571: END
// on VehicleConstructed ( veh , fac ) do var side ;
7572: LD_INT 0
7574: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 263
7584: PUSH
7585: LD_INT 5
7587: EQUAL
7588: IFFALSE 7730
// begin side := GetSide ( veh ) ;
7590: LD_ADDR_VAR 0 3
7594: PUSH
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 255
7604: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7605: LD_ADDR_EXP 53
7609: PUSH
7610: LD_EXP 53
7614: PPUSH
7615: LD_VAR 0 3
7619: PPUSH
7620: LD_EXP 53
7624: PUSH
7625: LD_VAR 0 3
7629: ARRAY
7630: PPUSH
7631: LD_INT 52
7633: PUSH
7634: EMPTY
7635: LIST
7636: PPUSH
7637: CALL_OW 72
7641: PUSH
7642: LD_INT 22
7644: PUSH
7645: LD_VAR 0 3
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: LD_INT 2
7656: PUSH
7657: LD_INT 33
7659: PUSH
7660: LD_INT 5
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_INT 25
7669: PUSH
7670: LD_INT 12
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PUSH
7677: LD_INT 25
7679: PUSH
7680: LD_INT 15
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 25
7689: PUSH
7690: LD_INT 16
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 25
7699: PUSH
7700: LD_INT 17
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: PPUSH
7719: CALL_OW 69
7723: UNION
7724: PPUSH
7725: CALL_OW 1
7729: ST_TO_ADDR
// end ; end ;
7730: PPOPN 3
7732: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
7738: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 257
7748: PUSH
7749: LD_INT 12
7751: PUSH
7752: LD_INT 15
7754: PUSH
7755: LD_INT 17
7757: PUSH
7758: LD_INT 16
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: IN
7767: PUSH
7768: LD_VAR 0 1
7772: PPUSH
7773: CALL_OW 263
7777: PUSH
7778: LD_INT 5
7780: EQUAL
7781: OR
7782: IFFALSE 7793
// ApeKilled ( j ) ;
7784: LD_VAR 0 1
7788: PPUSH
7789: CALL 7332 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7793: LD_VAR 0 1
7797: PPUSH
7798: CALL_OW 266
7802: PUSH
7803: LD_INT 0
7805: PUSH
7806: LD_INT 1
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: IN
7813: IFFALSE 7895
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7815: LD_ADDR_VAR 0 4
7819: PUSH
7820: LD_EXP 36
7824: PUSH
7825: LD_VAR 0 1
7829: PPUSH
7830: CALL_OW 255
7834: ARRAY
7835: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7836: LD_ADDR_VAR 0 2
7840: PUSH
7841: LD_EXP 41
7845: PUSH
7846: LD_VAR 0 4
7850: ARRAY
7851: PUSH
7852: LD_INT 1
7854: ARRAY
7855: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7856: LD_ADDR_VAR 0 3
7860: PUSH
7861: LD_EXP 41
7865: PUSH
7866: LD_VAR 0 4
7870: ARRAY
7871: PUSH
7872: LD_INT 2
7874: ARRAY
7875: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7876: LD_VAR 0 2
7880: PPUSH
7881: LD_VAR 0 3
7885: PPUSH
7886: CALL_OW 420
7890: PPUSH
7891: CALL_OW 419
// end ; end ;
7895: PPOPN 5
7897: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7898: LD_VAR 0 1
7902: PPUSH
7903: LD_VAR 0 2
7907: PPUSH
7908: LD_VAR 0 3
7912: PPUSH
7913: LD_OWVAR 2
7917: PPUSH
7918: CALL 8300 0 4
7922: PPOPN 3
7924: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7925: LD_INT 0
7927: PPUSH
7928: PPUSH
// for un in battle_flags_id do
7929: LD_ADDR_VAR 0 2
7933: PUSH
7934: LD_EXP 46
7938: PUSH
7939: FOR_IN
7940: IFFALSE 8015
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7942: LD_VAR 0 2
7946: PPUSH
7947: LD_INT 1
7949: PUSH
7950: LD_LOC 9
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: LD_INT 2
7961: PUSH
7962: LD_LOC 9
7966: PUSH
7967: LD_INT 2
7969: DIV
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 3
7977: PUSH
7978: LD_LOC 9
7982: PUSH
7983: LD_INT 5
7985: DIV
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 20
7993: PUSH
7994: LD_LOC 9
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: PPUSH
8009: CALL_OW 423
8013: GO 7939
8015: POP
8016: POP
// end ;
8017: LD_VAR 0 1
8021: RET
// every 1 do var un ;
8022: GO 8024
8024: DISABLE
8025: LD_INT 0
8027: PPUSH
// begin if not def_morale_flags then
8028: LD_EXP 9
8032: NOT
8033: IFFALSE 8037
// exit ;
8035: GO 8114
// if not morale_decreasing_time then
8037: LD_EXP 26
8041: NOT
8042: IFFALSE 8046
// exit ;
8044: GO 8114
// strength = 100 ;
8046: LD_ADDR_LOC 9
8050: PUSH
8051: LD_INT 100
8053: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8054: LD_EXP 26
8058: PPUSH
8059: CALL_OW 67
// strength := strength - 1 ;
8063: LD_ADDR_LOC 9
8067: PUSH
8068: LD_LOC 9
8072: PUSH
8073: LD_INT 1
8075: MINUS
8076: ST_TO_ADDR
// Update_Flags ;
8077: CALL 7925 0 0
// until not strength ;
8081: LD_LOC 9
8085: NOT
8086: IFFALSE 8054
// for un in battle_flags_id do
8088: LD_ADDR_VAR 0 1
8092: PUSH
8093: LD_EXP 46
8097: PUSH
8098: FOR_IN
8099: IFFALSE 8112
// KillBattleFlag ( un ) ;
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 419
8110: GO 8098
8112: POP
8113: POP
// end ; end_of_file
8114: PPOPN 1
8116: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
8117: LD_INT 0
8119: PPUSH
8120: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
8121: LD_ADDR_VAR 0 2
8125: PUSH
8126: LD_STRING #Multi1x1-Time
8128: PUSH
8129: LD_OWVAR 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: ST_TO_ADDR
// if WaitServerStrings then
8138: LD_EXP 58
8142: IFFALSE 8160
// AllStrings = AllStrings ^ WaitServerStrings ;
8144: LD_ADDR_VAR 0 2
8148: PUSH
8149: LD_VAR 0 2
8153: PUSH
8154: LD_EXP 58
8158: ADD
8159: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8160: LD_INT 0
8162: PUSH
8163: LD_EXP 31
8167: PUSH
8168: LD_OWVAR 1
8172: MINUS
8173: LESSEQUAL
8174: IFFALSE 8205
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8176: LD_ADDR_VAR 0 2
8180: PUSH
8181: LD_VAR 0 2
8185: PUSH
8186: LD_STRING #allowedsibbomb
8188: PUSH
8189: LD_EXP 31
8193: PUSH
8194: LD_OWVAR 1
8198: MINUS
8199: PUSH
8200: EMPTY
8201: LIST
8202: LIST
8203: ADD
8204: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8205: LD_INT 0
8207: PUSH
8208: LD_EXP 61
8212: PUSH
8213: LD_OWVAR 1
8217: MINUS
8218: LESSEQUAL
8219: IFFALSE 8250
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
8221: LD_ADDR_VAR 0 2
8225: PUSH
8226: LD_VAR 0 2
8230: PUSH
8231: LD_STRING #builduptime
8233: PUSH
8234: LD_EXP 61
8238: PUSH
8239: LD_OWVAR 1
8243: MINUS
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: ADD
8249: ST_TO_ADDR
// if ( ExtraStrings ) then
8250: LD_EXP 57
8254: IFFALSE 8276
// AllStrings := AllStrings ^  ^ ExtraStrings ;
8256: LD_ADDR_VAR 0 2
8260: PUSH
8261: LD_VAR 0 2
8265: PUSH
8266: LD_STRING 
8268: ADD
8269: PUSH
8270: LD_EXP 57
8274: ADD
8275: ST_TO_ADDR
// Display_Strings := AllStrings ;
8276: LD_ADDR_OWVAR 47
8280: PUSH
8281: LD_VAR 0 2
8285: ST_TO_ADDR
// end ;
8286: LD_VAR 0 1
8290: RET
// every 0 0$1 do
8291: GO 8293
8293: DISABLE
// begin ShowTimer ;
8294: CALL 8117 0 0
// enable ;
8298: ENABLE
// end ; end_of_file
8299: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8300: LD_INT 0
8302: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8303: LD_VAR 0 1
8307: PPUSH
8308: CALL_OW 255
8312: PUSH
8313: LD_VAR 0 4
8317: EQUAL
8318: IFFALSE 8337
// begin SetAchievement ( ACH_RAD ) ;
8320: LD_STRING ACH_RAD
8322: PPUSH
8323: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8327: LD_STRING ACH_NL
8329: PPUSH
8330: LD_INT 1
8332: PPUSH
8333: CALL_OW 564
// end end ;
8337: LD_VAR 0 5
8341: RET
// export function SA_Win ( side ) ; begin
8342: LD_INT 0
8344: PPUSH
// case side of 1 :
8345: LD_VAR 0 1
8349: PUSH
8350: LD_INT 1
8352: DOUBLE
8353: EQUAL
8354: IFTRUE 8358
8356: GO 8371
8358: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8359: LD_STRING ACH_AH
8361: PPUSH
8362: LD_INT 1
8364: PPUSH
8365: CALL_OW 564
8369: GO 8534
8371: LD_INT 2
8373: DOUBLE
8374: EQUAL
8375: IFTRUE 8379
8377: GO 8392
8379: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8380: LD_STRING ACH_E
8382: PPUSH
8383: LD_INT 1
8385: PPUSH
8386: CALL_OW 564
8390: GO 8534
8392: LD_INT 3
8394: DOUBLE
8395: EQUAL
8396: IFTRUE 8400
8398: GO 8413
8400: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8401: LD_STRING ACH_OOL
8403: PPUSH
8404: LD_INT 1
8406: PPUSH
8407: CALL_OW 564
8411: GO 8534
8413: LD_INT 1
8415: PUSH
8416: LD_INT 2
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: DOUBLE
8423: EQUAL
8424: IFTRUE 8428
8426: GO 8453
8428: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8429: LD_STRING ACH_AH
8431: PPUSH
8432: LD_REAL  5.00000000000000E-0001
8435: PPUSH
8436: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8440: LD_STRING ACH_E
8442: PPUSH
8443: LD_REAL  5.00000000000000E-0001
8446: PPUSH
8447: CALL_OW 564
// end ; [ 2 , 3 ] :
8451: GO 8534
8453: LD_INT 2
8455: PUSH
8456: LD_INT 3
8458: PUSH
8459: EMPTY
8460: LIST
8461: LIST
8462: DOUBLE
8463: EQUAL
8464: IFTRUE 8468
8466: GO 8493
8468: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8469: LD_STRING ACH_OOL
8471: PPUSH
8472: LD_REAL  5.00000000000000E-0001
8475: PPUSH
8476: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8480: LD_STRING ACH_E
8482: PPUSH
8483: LD_REAL  5.00000000000000E-0001
8486: PPUSH
8487: CALL_OW 564
// end ; [ 3 , 1 ] :
8491: GO 8534
8493: LD_INT 3
8495: PUSH
8496: LD_INT 1
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: DOUBLE
8503: EQUAL
8504: IFTRUE 8508
8506: GO 8533
8508: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8509: LD_STRING ACH_AH
8511: PPUSH
8512: LD_REAL  5.00000000000000E-0001
8515: PPUSH
8516: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8520: LD_STRING ACH_OOL
8522: PPUSH
8523: LD_REAL  5.00000000000000E-0001
8526: PPUSH
8527: CALL_OW 564
// end ; end ;
8531: GO 8534
8533: POP
// end ; end_of_file
8534: LD_VAR 0 2
8538: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8539: LD_INT 0
8541: PPUSH
8542: PPUSH
// enable ( 98 ) ;
8543: LD_INT 98
8545: ENABLE_MARKED
// GameEnded = false ;
8546: LD_ADDR_LOC 15
8550: PUSH
8551: LD_INT 0
8553: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8554: LD_ADDR_LOC 14
8558: PUSH
8559: LD_INT 0
8561: PUSH
8562: LD_INT 0
8564: PUSH
8565: LD_INT 0
8567: PUSH
8568: LD_INT 0
8570: PUSH
8571: LD_INT 0
8573: PUSH
8574: LD_INT 0
8576: PUSH
8577: LD_INT 0
8579: PUSH
8580: LD_INT 0
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: ST_TO_ADDR
// unfoged = false ;
8593: LD_ADDR_LOC 16
8597: PUSH
8598: LD_INT 0
8600: ST_TO_ADDR
// defeated_specs := [ ] ;
8601: LD_ADDR_LOC 17
8605: PUSH
8606: EMPTY
8607: ST_TO_ADDR
// for i = 1 to side_positions do
8608: LD_ADDR_VAR 0 2
8612: PUSH
8613: DOUBLE
8614: LD_INT 1
8616: DEC
8617: ST_TO_ADDR
8618: LD_EXP 36
8622: PUSH
8623: FOR_TO
8624: IFFALSE 8664
// if not side_positions [ i ] then
8626: LD_EXP 36
8630: PUSH
8631: LD_VAR 0 2
8635: ARRAY
8636: NOT
8637: IFFALSE 8662
// defeated = replace ( defeated , i , true ) ;
8639: LD_ADDR_LOC 14
8643: PUSH
8644: LD_LOC 14
8648: PPUSH
8649: LD_VAR 0 2
8653: PPUSH
8654: LD_INT 1
8656: PPUSH
8657: CALL_OW 1
8661: ST_TO_ADDR
8662: GO 8623
8664: POP
8665: POP
// end ;
8666: LD_VAR 0 1
8670: RET
// function CanWinLoose ; begin
8671: LD_INT 0
8673: PPUSH
// Result := true ;
8674: LD_ADDR_VAR 0 1
8678: PUSH
8679: LD_INT 1
8681: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8682: CALL_OW 518
8686: PUSH
8687: CALL_OW 519
8691: PUSH
8692: LD_INT 0
8694: GREATER
8695: AND
8696: IFFALSE 8706
// Result := false ;
8698: LD_ADDR_VAR 0 1
8702: PUSH
8703: LD_INT 0
8705: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8706: CALL_OW 531
8710: PUSH
8711: CALL_OW 519
8715: PUSH
8716: LD_INT 1
8718: GREATER
8719: AND
8720: IFFALSE 8730
// Result := false ;
8722: LD_ADDR_VAR 0 1
8726: PUSH
8727: LD_INT 0
8729: ST_TO_ADDR
// end ;
8730: LD_VAR 0 1
8734: RET
// export function HasPower ( i ) ; var k , h ; begin
8735: LD_INT 0
8737: PPUSH
8738: PPUSH
8739: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8740: LD_VAR 0 1
8744: PPUSH
8745: CALL_OW 108
8749: NOT
8750: PUSH
8751: LD_EXP 35
8755: PUSH
8756: LD_VAR 0 1
8760: ARRAY
8761: NOT
8762: AND
8763: PUSH
8764: LD_OWVAR 4
8768: AND
8769: IFFALSE 8781
// begin result = false ;
8771: LD_ADDR_VAR 0 2
8775: PUSH
8776: LD_INT 0
8778: ST_TO_ADDR
// end else
8779: GO 9076
// case def_win_rules of 0 :
8781: LD_EXP 32
8785: PUSH
8786: LD_INT 0
8788: DOUBLE
8789: EQUAL
8790: IFTRUE 8794
8792: GO 8957
8794: POP
// if def_people_respawning then
8795: LD_EXP 11
8799: IFFALSE 8890
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8801: LD_ADDR_VAR 0 2
8805: PUSH
8806: LD_INT 22
8808: PUSH
8809: LD_VAR 0 1
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PUSH
8818: LD_INT 2
8820: PUSH
8821: LD_INT 21
8823: PUSH
8824: LD_INT 1
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PUSH
8831: LD_INT 33
8833: PUSH
8834: LD_INT 3
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: LD_INT 33
8843: PUSH
8844: LD_INT 5
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: LD_INT 30
8853: PUSH
8854: LD_INT 0
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 30
8863: PUSH
8864: LD_INT 1
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PPUSH
8883: CALL_OW 69
8887: ST_TO_ADDR
8888: GO 8955
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8890: LD_ADDR_VAR 0 2
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_VAR 0 1
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 2
8909: PUSH
8910: LD_INT 21
8912: PUSH
8913: LD_INT 1
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 33
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 33
8932: PUSH
8933: LD_INT 5
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PPUSH
8950: CALL_OW 69
8954: ST_TO_ADDR
8955: GO 9076
8957: LD_INT 1
8959: DOUBLE
8960: EQUAL
8961: IFTRUE 8965
8963: GO 9004
8965: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8966: LD_ADDR_VAR 0 2
8970: PUSH
8971: LD_INT 22
8973: PUSH
8974: LD_VAR 0 1
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 21
8985: PUSH
8986: LD_INT 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: PPUSH
8997: CALL_OW 69
9001: ST_TO_ADDR
9002: GO 9076
9004: LD_INT 2
9006: DOUBLE
9007: EQUAL
9008: IFTRUE 9012
9010: GO 9075
9012: POP
// begin h = false ;
9013: LD_ADDR_VAR 0 4
9017: PUSH
9018: LD_INT 0
9020: ST_TO_ADDR
// for k in heroes [ i ] do
9021: LD_ADDR_VAR 0 3
9025: PUSH
9026: LD_EXP 49
9030: PUSH
9031: LD_VAR 0 1
9035: ARRAY
9036: PUSH
9037: FOR_IN
9038: IFFALSE 9061
// if IsLive ( k ) then
9040: LD_VAR 0 3
9044: PPUSH
9045: CALL_OW 300
9049: IFFALSE 9059
// h = true ;
9051: LD_ADDR_VAR 0 4
9055: PUSH
9056: LD_INT 1
9058: ST_TO_ADDR
9059: GO 9037
9061: POP
9062: POP
// Result := h ;
9063: LD_ADDR_VAR 0 2
9067: PUSH
9068: LD_VAR 0 4
9072: ST_TO_ADDR
// end ; end ;
9073: GO 9076
9075: POP
// end ;
9076: LD_VAR 0 2
9080: RET
// function AlliedSides ( i , j ) ; begin
9081: LD_INT 0
9083: PPUSH
// Result := false ;
9084: LD_ADDR_VAR 0 3
9088: PUSH
9089: LD_INT 0
9091: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9092: LD_VAR 0 1
9096: PPUSH
9097: LD_VAR 0 2
9101: PPUSH
9102: CALL_OW 81
9106: PUSH
9107: LD_INT 1
9109: EQUAL
9110: PUSH
9111: LD_VAR 0 2
9115: PPUSH
9116: LD_VAR 0 1
9120: PPUSH
9121: CALL_OW 81
9125: PUSH
9126: LD_INT 1
9128: EQUAL
9129: AND
9130: PUSH
9131: LD_VAR 0 1
9135: PPUSH
9136: CALL_OW 83
9140: AND
9141: PUSH
9142: LD_VAR 0 2
9146: PPUSH
9147: CALL_OW 83
9151: AND
9152: IFFALSE 9162
// Result := true ;
9154: LD_ADDR_VAR 0 3
9158: PUSH
9159: LD_INT 1
9161: ST_TO_ADDR
// end ;
9162: LD_VAR 0 3
9166: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9167: CALL 8671 0 0
9171: PUSH
9172: LD_LOC 15
9176: NOT
9177: AND
9178: IFFALSE 9194
9180: GO 9182
9182: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9183: LD_ADDR_EXP 58
9187: PUSH
9188: LD_STRING #Player-Ended
9190: PUSH
9191: EMPTY
9192: LIST
9193: ST_TO_ADDR
9194: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9195: CALL 8671 0 0
9199: PUSH
9200: LD_LOC 15
9204: AND
9205: IFFALSE 9214
9207: GO 9209
9209: DISABLE
// YouLostInMultiplayer ;
9210: CALL_OW 107
9214: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9215: CALL 8671 0 0
9219: NOT
9220: PUSH
9221: CALL_OW 531
9225: NOT
9226: AND
9227: IFFALSE 9243
9229: GO 9231
9231: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9232: LD_ADDR_EXP 58
9236: PUSH
9237: LD_STRING #server-wait
9239: PUSH
9240: EMPTY
9241: LIST
9242: ST_TO_ADDR
9243: END
// every 100 trigger IAmSpec do
9244: CALL_OW 531
9248: IFFALSE 9264
9250: GO 9252
9252: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9253: LD_ADDR_EXP 58
9257: PUSH
9258: LD_STRING #Player-IAmSpec
9260: PUSH
9261: EMPTY
9262: LIST
9263: ST_TO_ADDR
9264: END
// every 100 trigger GameEnded and IAmSpec do
9265: LD_LOC 15
9269: PUSH
9270: CALL_OW 531
9274: AND
9275: IFFALSE 9284
9277: GO 9279
9279: DISABLE
// YouLostInMultiplayer ;
9280: CALL_OW 107
9284: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9285: CALL 8671 0 0
9289: PUSH
9290: LD_LOC 15
9294: NOT
9295: AND
9296: IFFALSE 9312
9298: GO 9300
9300: DISABLE
// WaitServerStrings = [ $player-win ] ;
9301: LD_ADDR_EXP 58
9305: PUSH
9306: LD_STRING $player-win
9308: PUSH
9309: EMPTY
9310: LIST
9311: ST_TO_ADDR
9312: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9313: CALL 8671 0 0
9317: PUSH
9318: LD_LOC 15
9322: AND
9323: IFFALSE 9347
9325: GO 9327
9327: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9328: LD_EXP 37
9332: PUSH
9333: LD_OWVAR 7
9337: ARRAY
9338: PPUSH
9339: CALL 8342 0 1
// YouWinInMultiplayer ;
9343: CALL_OW 106
// end ;
9347: END
// every 100 trigger isEditor marked 401 do
9348: LD_OWVAR 84
9352: IFFALSE 9368
9354: GO 9356
9356: DISABLE
// Debug_Strings = [ You won ] ;
9357: LD_ADDR_OWVAR 48
9361: PUSH
9362: LD_STRING You won
9364: PUSH
9365: EMPTY
9366: LIST
9367: ST_TO_ADDR
9368: END
// every 100 trigger isEditor marked 400 do
9369: LD_OWVAR 84
9373: IFFALSE 9389
9375: GO 9377
9377: DISABLE
// Debug_Strings = [ You loss ] ;
9378: LD_ADDR_OWVAR 48
9382: PUSH
9383: LD_STRING You loss
9385: PUSH
9386: EMPTY
9387: LIST
9388: ST_TO_ADDR
9389: END
// every 100 marked 98 do var i , un ;
9390: GO 9392
9392: DISABLE
9393: LD_INT 0
9395: PPUSH
9396: PPUSH
// begin for i = 1 to side_positions do
9397: LD_ADDR_VAR 0 1
9401: PUSH
9402: DOUBLE
9403: LD_INT 1
9405: DEC
9406: ST_TO_ADDR
9407: LD_EXP 36
9411: PUSH
9412: FOR_TO
9413: IFFALSE 9500
// begin if side_positions [ i ] then
9415: LD_EXP 36
9419: PUSH
9420: LD_VAR 0 1
9424: ARRAY
9425: IFFALSE 9498
// if not HasPower ( i ) and not defeated [ i ] then
9427: LD_VAR 0 1
9431: PPUSH
9432: CALL 8735 0 1
9436: NOT
9437: PUSH
9438: LD_LOC 14
9442: PUSH
9443: LD_VAR 0 1
9447: ARRAY
9448: NOT
9449: AND
9450: IFFALSE 9498
// begin defeated = replace ( defeated , i , true ) ;
9452: LD_ADDR_LOC 14
9456: PUSH
9457: LD_LOC 14
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: LD_INT 1
9469: PPUSH
9470: CALL_OW 1
9474: ST_TO_ADDR
// if i = mp_player_side then
9475: LD_VAR 0 1
9479: PUSH
9480: LD_OWVAR 7
9484: EQUAL
9485: IFFALSE 9498
// begin Multiplayer_Loose_Message ;
9487: CALL_OW 521
// SetPlayerSpectator ( ) ;
9491: CALL_OW 572
// enable ( 400 ) ;
9495: LD_INT 400
9497: ENABLE_MARKED
// end ; end ; end ;
9498: GO 9412
9500: POP
9501: POP
// DidGameEnd ;
9502: CALL 9517 0 0
// if not GameEnded then
9506: LD_LOC 15
9510: NOT
9511: IFFALSE 9514
// enable ;
9513: ENABLE
// end ;
9514: PPOPN 2
9516: END
// function DidGameEnd ; var i , k , enemy ; begin
9517: LD_INT 0
9519: PPUSH
9520: PPUSH
9521: PPUSH
9522: PPUSH
// enemy = [ ] ;
9523: LD_ADDR_VAR 0 4
9527: PUSH
9528: EMPTY
9529: ST_TO_ADDR
// for i = 1 to side_positions do
9530: LD_ADDR_VAR 0 2
9534: PUSH
9535: DOUBLE
9536: LD_INT 1
9538: DEC
9539: ST_TO_ADDR
9540: LD_EXP 36
9544: PUSH
9545: FOR_TO
9546: IFFALSE 9640
// if not defeated [ i ] then
9548: LD_LOC 14
9552: PUSH
9553: LD_VAR 0 2
9557: ARRAY
9558: NOT
9559: IFFALSE 9638
// for k = 1 to side_positions do
9561: LD_ADDR_VAR 0 3
9565: PUSH
9566: DOUBLE
9567: LD_INT 1
9569: DEC
9570: ST_TO_ADDR
9571: LD_EXP 36
9575: PUSH
9576: FOR_TO
9577: IFFALSE 9636
// if not defeated [ k ] then
9579: LD_LOC 14
9583: PUSH
9584: LD_VAR 0 3
9588: ARRAY
9589: NOT
9590: IFFALSE 9634
// if not AlliedSides ( i , k ) then
9592: LD_VAR 0 2
9596: PPUSH
9597: LD_VAR 0 3
9601: PPUSH
9602: CALL 9081 0 2
9606: NOT
9607: IFFALSE 9634
// enemy = enemy ^ [ i , k ] ;
9609: LD_ADDR_VAR 0 4
9613: PUSH
9614: LD_VAR 0 4
9618: PUSH
9619: LD_VAR 0 2
9623: PUSH
9624: LD_VAR 0 3
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: ADD
9633: ST_TO_ADDR
9634: GO 9576
9636: POP
9637: POP
9638: GO 9545
9640: POP
9641: POP
// if not enemy then
9642: LD_VAR 0 4
9646: NOT
9647: IFFALSE 9673
// begin GameEnded = true ;
9649: LD_ADDR_LOC 15
9653: PUSH
9654: LD_INT 1
9656: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9657: LD_LOC 14
9661: PUSH
9662: LD_OWVAR 7
9666: ARRAY
9667: NOT
9668: IFFALSE 9673
// enable ( 401 ) ;
9670: LD_INT 401
9672: ENABLE_MARKED
// end ; end ;
9673: LD_VAR 0 1
9677: RET
// function unfog ; var k , friends ; begin
9678: LD_INT 0
9680: PPUSH
9681: PPUSH
9682: PPUSH
// for k = 1 to side_positions do
9683: LD_ADDR_VAR 0 2
9687: PUSH
9688: DOUBLE
9689: LD_INT 1
9691: DEC
9692: ST_TO_ADDR
9693: LD_EXP 36
9697: PUSH
9698: FOR_TO
9699: IFFALSE 9755
// if not defeated [ k ] then
9701: LD_LOC 14
9705: PUSH
9706: LD_VAR 0 2
9710: ARRAY
9711: NOT
9712: IFFALSE 9753
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9714: LD_OWVAR 7
9718: PPUSH
9719: LD_VAR 0 2
9723: PPUSH
9724: CALL_OW 81
9728: PUSH
9729: LD_INT 1
9731: PUSH
9732: EMPTY
9733: LIST
9734: IN
9735: IFFALSE 9753
// friends = friends ^ k ;
9737: LD_ADDR_VAR 0 3
9741: PUSH
9742: LD_VAR 0 3
9746: PUSH
9747: LD_VAR 0 2
9751: ADD
9752: ST_TO_ADDR
9753: GO 9698
9755: POP
9756: POP
// if not friends then
9757: LD_VAR 0 3
9761: NOT
9762: IFFALSE 9776
// begin SetPlayerSpectator ( ) ;
9764: CALL_OW 572
// unfoged = true ;
9768: LD_ADDR_LOC 16
9772: PUSH
9773: LD_INT 1
9775: ST_TO_ADDR
// end ; end ;
9776: LD_VAR 0 1
9780: RET
// export function MakeGameEnd ; begin
9781: LD_INT 0
9783: PPUSH
// SetPlayerSpectator ( ) ;
9784: CALL_OW 572
// unfoged = true ;
9788: LD_ADDR_LOC 16
9792: PUSH
9793: LD_INT 1
9795: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9796: LD_INT 175
9798: PPUSH
9799: CALL_OW 67
// GameEnded = true ;
9803: LD_ADDR_LOC 15
9807: PUSH
9808: LD_INT 1
9810: ST_TO_ADDR
// end ;
9811: LD_VAR 0 1
9815: RET
// export function GetGameEnded ; begin
9816: LD_INT 0
9818: PPUSH
// result = GameEnded ;
9819: LD_ADDR_VAR 0 1
9823: PUSH
9824: LD_LOC 15
9828: ST_TO_ADDR
// end ; end_of_file
9829: LD_VAR 0 1
9833: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9834: LD_INT 0
9836: PPUSH
9837: PPUSH
9838: PPUSH
// for side = 1 to 8 do
9839: LD_ADDR_VAR 0 2
9843: PUSH
9844: DOUBLE
9845: LD_INT 1
9847: DEC
9848: ST_TO_ADDR
9849: LD_INT 8
9851: PUSH
9852: FOR_TO
9853: IFFALSE 9974
// begin for i = 1 to 72 do
9855: LD_ADDR_VAR 0 3
9859: PUSH
9860: DOUBLE
9861: LD_INT 1
9863: DEC
9864: ST_TO_ADDR
9865: LD_INT 72
9867: PUSH
9868: FOR_TO
9869: IFFALSE 9900
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9871: LD_VAR 0 3
9875: PPUSH
9876: LD_VAR 0 2
9880: PPUSH
9881: LD_INT 0
9883: PPUSH
9884: LD_VAR 0 3
9888: PPUSH
9889: CALL_OW 565
9893: PPUSH
9894: CALL_OW 322
9898: GO 9868
9900: POP
9901: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9902: LD_INT 73
9904: PPUSH
9905: LD_VAR 0 2
9909: PPUSH
9910: LD_INT 0
9912: PPUSH
9913: LD_INT 25
9915: PPUSH
9916: CALL_OW 565
9920: PPUSH
9921: CALL_OW 322
// for i = 0 to 40 do
9925: LD_ADDR_VAR 0 3
9929: PUSH
9930: DOUBLE
9931: LD_INT 0
9933: DEC
9934: ST_TO_ADDR
9935: LD_INT 40
9937: PUSH
9938: FOR_TO
9939: IFFALSE 9970
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9941: LD_VAR 0 3
9945: PPUSH
9946: LD_VAR 0 2
9950: PPUSH
9951: LD_INT 1
9953: PPUSH
9954: LD_VAR 0 3
9958: PPUSH
9959: CALL_OW 565
9963: PPUSH
9964: CALL_OW 324
9968: GO 9938
9970: POP
9971: POP
// end ;
9972: GO 9852
9974: POP
9975: POP
// end ;
9976: LD_VAR 0 1
9980: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9981: LD_INT 0
9983: PPUSH
9984: PPUSH
9985: PPUSH
// for side = 1 to 8 do
9986: LD_ADDR_VAR 0 3
9990: PUSH
9991: DOUBLE
9992: LD_INT 1
9994: DEC
9995: ST_TO_ADDR
9996: LD_INT 8
9998: PUSH
9999: FOR_TO
10000: IFFALSE 13996
// begin for i = 1 to 73 do
10002: LD_ADDR_VAR 0 4
10006: PUSH
10007: DOUBLE
10008: LD_INT 1
10010: DEC
10011: ST_TO_ADDR
10012: LD_INT 73
10014: PUSH
10015: FOR_TO
10016: IFFALSE 10037
// SetTech ( i , side , state_disabled ) ;
10018: LD_VAR 0 4
10022: PPUSH
10023: LD_VAR 0 3
10027: PPUSH
10028: LD_INT 0
10030: PPUSH
10031: CALL_OW 322
10035: GO 10015
10037: POP
10038: POP
// for i = 0 to 40 do
10039: LD_ADDR_VAR 0 4
10043: PUSH
10044: DOUBLE
10045: LD_INT 0
10047: DEC
10048: ST_TO_ADDR
10049: LD_INT 40
10051: PUSH
10052: FOR_TO
10053: IFFALSE 10074
// SetRestrict ( i , side , false ) ;
10055: LD_VAR 0 4
10059: PPUSH
10060: LD_VAR 0 3
10064: PPUSH
10065: LD_INT 0
10067: PPUSH
10068: CALL_OW 324
10072: GO 10052
10074: POP
10075: POP
// case level of 1 :
10076: LD_VAR 0 1
10080: PUSH
10081: LD_INT 1
10083: DOUBLE
10084: EQUAL
10085: IFTRUE 10089
10087: GO 10242
10089: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10090: LD_INT 35
10092: PPUSH
10093: LD_VAR 0 3
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10105: LD_INT 45
10107: PPUSH
10108: LD_VAR 0 3
10112: PPUSH
10113: LD_INT 1
10115: PPUSH
10116: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10120: LD_INT 46
10122: PPUSH
10123: LD_VAR 0 3
10127: PPUSH
10128: LD_INT 1
10130: PPUSH
10131: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10135: LD_INT 47
10137: PPUSH
10138: LD_VAR 0 3
10142: PPUSH
10143: LD_INT 1
10145: PPUSH
10146: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10150: LD_INT 0
10152: PPUSH
10153: LD_VAR 0 3
10157: PPUSH
10158: LD_INT 1
10160: PPUSH
10161: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10165: LD_INT 2
10167: PPUSH
10168: LD_VAR 0 3
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10180: LD_INT 4
10182: PPUSH
10183: LD_VAR 0 3
10187: PPUSH
10188: LD_INT 1
10190: PPUSH
10191: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10195: LD_INT 6
10197: PPUSH
10198: LD_VAR 0 3
10202: PPUSH
10203: LD_INT 1
10205: PPUSH
10206: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10210: LD_INT 29
10212: PPUSH
10213: LD_VAR 0 3
10217: PPUSH
10218: LD_INT 1
10220: PPUSH
10221: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10225: LD_INT 31
10227: PPUSH
10228: LD_VAR 0 3
10232: PPUSH
10233: LD_INT 1
10235: PPUSH
10236: CALL_OW 324
// end ; 2 :
10240: GO 13994
10242: LD_INT 2
10244: DOUBLE
10245: EQUAL
10246: IFTRUE 10250
10248: GO 10448
10250: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10251: LD_INT 35
10253: PPUSH
10254: LD_VAR 0 3
10258: PPUSH
10259: LD_INT 1
10261: PPUSH
10262: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10266: LD_INT 45
10268: PPUSH
10269: LD_VAR 0 3
10273: PPUSH
10274: LD_INT 1
10276: PPUSH
10277: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10281: LD_INT 46
10283: PPUSH
10284: LD_VAR 0 3
10288: PPUSH
10289: LD_INT 1
10291: PPUSH
10292: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10296: LD_INT 47
10298: PPUSH
10299: LD_VAR 0 3
10303: PPUSH
10304: LD_INT 1
10306: PPUSH
10307: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10311: LD_INT 1
10313: PPUSH
10314: LD_VAR 0 3
10318: PPUSH
10319: LD_INT 1
10321: PPUSH
10322: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10326: LD_INT 2
10328: PPUSH
10329: LD_VAR 0 3
10333: PPUSH
10334: LD_INT 1
10336: PPUSH
10337: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10341: LD_INT 11
10343: PPUSH
10344: LD_VAR 0 3
10348: PPUSH
10349: LD_INT 1
10351: PPUSH
10352: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10356: LD_INT 0
10358: PPUSH
10359: LD_VAR 0 3
10363: PPUSH
10364: LD_INT 1
10366: PPUSH
10367: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10371: LD_INT 2
10373: PPUSH
10374: LD_VAR 0 3
10378: PPUSH
10379: LD_INT 1
10381: PPUSH
10382: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10386: LD_INT 4
10388: PPUSH
10389: LD_VAR 0 3
10393: PPUSH
10394: LD_INT 1
10396: PPUSH
10397: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10401: LD_INT 6
10403: PPUSH
10404: LD_VAR 0 3
10408: PPUSH
10409: LD_INT 1
10411: PPUSH
10412: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10416: LD_INT 29
10418: PPUSH
10419: LD_VAR 0 3
10423: PPUSH
10424: LD_INT 1
10426: PPUSH
10427: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10431: LD_INT 31
10433: PPUSH
10434: LD_VAR 0 3
10438: PPUSH
10439: LD_INT 1
10441: PPUSH
10442: CALL_OW 324
// end ; 3 :
10446: GO 13994
10448: LD_INT 3
10450: DOUBLE
10451: EQUAL
10452: IFTRUE 10456
10454: GO 10909
10456: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10457: LD_INT 35
10459: PPUSH
10460: LD_VAR 0 3
10464: PPUSH
10465: LD_INT 1
10467: PPUSH
10468: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10472: LD_INT 45
10474: PPUSH
10475: LD_VAR 0 3
10479: PPUSH
10480: LD_INT 1
10482: PPUSH
10483: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10487: LD_INT 46
10489: PPUSH
10490: LD_VAR 0 3
10494: PPUSH
10495: LD_INT 1
10497: PPUSH
10498: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10502: LD_INT 47
10504: PPUSH
10505: LD_VAR 0 3
10509: PPUSH
10510: LD_INT 1
10512: PPUSH
10513: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10517: LD_INT 1
10519: PPUSH
10520: LD_VAR 0 3
10524: PPUSH
10525: LD_INT 1
10527: PPUSH
10528: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10532: LD_INT 2
10534: PPUSH
10535: LD_VAR 0 3
10539: PPUSH
10540: LD_INT 1
10542: PPUSH
10543: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10547: LD_INT 11
10549: PPUSH
10550: LD_VAR 0 3
10554: PPUSH
10555: LD_INT 1
10557: PPUSH
10558: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10562: LD_INT 48
10564: PPUSH
10565: LD_VAR 0 3
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10577: LD_INT 69
10579: PPUSH
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 1
10587: PPUSH
10588: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10592: LD_INT 39
10594: PPUSH
10595: LD_VAR 0 3
10599: PPUSH
10600: LD_INT 1
10602: PPUSH
10603: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10607: LD_INT 43
10609: PPUSH
10610: LD_VAR 0 3
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10622: LD_INT 51
10624: PPUSH
10625: LD_VAR 0 3
10629: PPUSH
10630: LD_INT 1
10632: PPUSH
10633: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10637: LD_INT 6
10639: PPUSH
10640: LD_VAR 0 3
10644: PPUSH
10645: LD_INT 1
10647: PPUSH
10648: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10652: LD_INT 0
10654: PPUSH
10655: LD_VAR 0 3
10659: PPUSH
10660: LD_INT 1
10662: PPUSH
10663: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10667: LD_INT 2
10669: PPUSH
10670: LD_VAR 0 3
10674: PPUSH
10675: LD_INT 1
10677: PPUSH
10678: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10682: LD_INT 3
10684: PPUSH
10685: LD_VAR 0 3
10689: PPUSH
10690: LD_INT 1
10692: PPUSH
10693: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10697: LD_INT 4
10699: PPUSH
10700: LD_VAR 0 3
10704: PPUSH
10705: LD_INT 1
10707: PPUSH
10708: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10712: LD_INT 6
10714: PPUSH
10715: LD_VAR 0 3
10719: PPUSH
10720: LD_INT 1
10722: PPUSH
10723: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10727: LD_INT 7
10729: PPUSH
10730: LD_VAR 0 3
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10742: LD_INT 8
10744: PPUSH
10745: LD_VAR 0 3
10749: PPUSH
10750: LD_INT 1
10752: PPUSH
10753: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10757: LD_INT 10
10759: PPUSH
10760: LD_VAR 0 3
10764: PPUSH
10765: LD_INT 1
10767: PPUSH
10768: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10772: LD_INT 15
10774: PPUSH
10775: LD_VAR 0 3
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10787: LD_INT 16
10789: PPUSH
10790: LD_VAR 0 3
10794: PPUSH
10795: LD_INT 1
10797: PPUSH
10798: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10802: LD_INT 17
10804: PPUSH
10805: LD_VAR 0 3
10809: PPUSH
10810: LD_INT 1
10812: PPUSH
10813: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10817: LD_INT 20
10819: PPUSH
10820: LD_VAR 0 3
10824: PPUSH
10825: LD_INT 1
10827: PPUSH
10828: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10832: LD_INT 26
10834: PPUSH
10835: LD_VAR 0 3
10839: PPUSH
10840: LD_INT 1
10842: PPUSH
10843: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10847: LD_INT 27
10849: PPUSH
10850: LD_VAR 0 3
10854: PPUSH
10855: LD_INT 1
10857: PPUSH
10858: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10862: LD_INT 29
10864: PPUSH
10865: LD_VAR 0 3
10869: PPUSH
10870: LD_INT 1
10872: PPUSH
10873: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10877: LD_INT 31
10879: PPUSH
10880: LD_VAR 0 3
10884: PPUSH
10885: LD_INT 1
10887: PPUSH
10888: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10892: LD_INT 32
10894: PPUSH
10895: LD_VAR 0 3
10899: PPUSH
10900: LD_INT 1
10902: PPUSH
10903: CALL_OW 324
// end ; 4 :
10907: GO 13994
10909: LD_INT 4
10911: DOUBLE
10912: EQUAL
10913: IFTRUE 10917
10915: GO 11865
10917: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10918: LD_INT 35
10920: PPUSH
10921: LD_VAR 0 3
10925: PPUSH
10926: LD_INT 1
10928: PPUSH
10929: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10933: LD_INT 45
10935: PPUSH
10936: LD_VAR 0 3
10940: PPUSH
10941: LD_INT 1
10943: PPUSH
10944: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10948: LD_INT 46
10950: PPUSH
10951: LD_VAR 0 3
10955: PPUSH
10956: LD_INT 1
10958: PPUSH
10959: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10963: LD_INT 47
10965: PPUSH
10966: LD_VAR 0 3
10970: PPUSH
10971: LD_INT 1
10973: PPUSH
10974: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10978: LD_INT 1
10980: PPUSH
10981: LD_VAR 0 3
10985: PPUSH
10986: LD_INT 1
10988: PPUSH
10989: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10993: LD_INT 2
10995: PPUSH
10996: LD_VAR 0 3
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11008: LD_INT 11
11010: PPUSH
11011: LD_VAR 0 3
11015: PPUSH
11016: LD_INT 1
11018: PPUSH
11019: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11023: LD_INT 20
11025: PPUSH
11026: LD_VAR 0 3
11030: PPUSH
11031: LD_INT 1
11033: PPUSH
11034: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11038: LD_INT 48
11040: PPUSH
11041: LD_VAR 0 3
11045: PPUSH
11046: LD_INT 1
11048: PPUSH
11049: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11053: LD_INT 49
11055: PPUSH
11056: LD_VAR 0 3
11060: PPUSH
11061: LD_INT 1
11063: PPUSH
11064: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11068: LD_INT 69
11070: PPUSH
11071: LD_VAR 0 3
11075: PPUSH
11076: LD_INT 1
11078: PPUSH
11079: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11083: LD_INT 39
11085: PPUSH
11086: LD_VAR 0 3
11090: PPUSH
11091: LD_INT 1
11093: PPUSH
11094: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11098: LD_INT 34
11100: PPUSH
11101: LD_VAR 0 3
11105: PPUSH
11106: LD_INT 1
11108: PPUSH
11109: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11113: LD_INT 42
11115: PPUSH
11116: LD_VAR 0 3
11120: PPUSH
11121: LD_INT 1
11123: PPUSH
11124: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11128: LD_INT 44
11130: PPUSH
11131: LD_VAR 0 3
11135: PPUSH
11136: LD_INT 1
11138: PPUSH
11139: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11143: LD_INT 41
11145: PPUSH
11146: LD_VAR 0 3
11150: PPUSH
11151: LD_INT 1
11153: PPUSH
11154: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11158: LD_INT 43
11160: PPUSH
11161: LD_VAR 0 3
11165: PPUSH
11166: LD_INT 1
11168: PPUSH
11169: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11173: LD_INT 70
11175: PPUSH
11176: LD_VAR 0 3
11180: PPUSH
11181: LD_INT 1
11183: PPUSH
11184: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11188: LD_INT 51
11190: PPUSH
11191: LD_VAR 0 3
11195: PPUSH
11196: LD_INT 1
11198: PPUSH
11199: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11203: LD_INT 52
11205: PPUSH
11206: LD_VAR 0 3
11210: PPUSH
11211: LD_INT 1
11213: PPUSH
11214: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11218: LD_INT 6
11220: PPUSH
11221: LD_VAR 0 3
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11233: LD_INT 15
11235: PPUSH
11236: LD_VAR 0 3
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11248: LD_INT 7
11250: PPUSH
11251: LD_VAR 0 3
11255: PPUSH
11256: LD_INT 1
11258: PPUSH
11259: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11263: LD_INT 12
11265: PPUSH
11266: LD_VAR 0 3
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11278: LD_INT 18
11280: PPUSH
11281: LD_VAR 0 3
11285: PPUSH
11286: LD_INT 1
11288: PPUSH
11289: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11293: LD_INT 60
11295: PPUSH
11296: LD_VAR 0 3
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11308: LD_INT 9
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11323: LD_INT 30
11325: PPUSH
11326: LD_VAR 0 3
11330: PPUSH
11331: LD_INT 1
11333: PPUSH
11334: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11338: LD_INT 37
11340: PPUSH
11341: LD_VAR 0 3
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11353: LD_INT 5
11355: PPUSH
11356: LD_VAR 0 3
11360: PPUSH
11361: LD_INT 1
11363: PPUSH
11364: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11368: LD_INT 66
11370: PPUSH
11371: LD_VAR 0 3
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11383: LD_INT 21
11385: PPUSH
11386: LD_VAR 0 3
11390: PPUSH
11391: LD_INT 1
11393: PPUSH
11394: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11398: LD_INT 22
11400: PPUSH
11401: LD_VAR 0 3
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11413: LD_INT 54
11415: PPUSH
11416: LD_VAR 0 3
11420: PPUSH
11421: LD_INT 1
11423: PPUSH
11424: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11428: LD_INT 0
11430: PPUSH
11431: LD_VAR 0 3
11435: PPUSH
11436: LD_INT 1
11438: PPUSH
11439: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11443: LD_INT 1
11445: PPUSH
11446: LD_VAR 0 3
11450: PPUSH
11451: LD_INT 1
11453: PPUSH
11454: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11458: LD_INT 2
11460: PPUSH
11461: LD_VAR 0 3
11465: PPUSH
11466: LD_INT 1
11468: PPUSH
11469: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11473: LD_INT 3
11475: PPUSH
11476: LD_VAR 0 3
11480: PPUSH
11481: LD_INT 1
11483: PPUSH
11484: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11488: LD_INT 4
11490: PPUSH
11491: LD_VAR 0 3
11495: PPUSH
11496: LD_INT 1
11498: PPUSH
11499: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11503: LD_INT 5
11505: PPUSH
11506: LD_VAR 0 3
11510: PPUSH
11511: LD_INT 1
11513: PPUSH
11514: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11518: LD_INT 6
11520: PPUSH
11521: LD_VAR 0 3
11525: PPUSH
11526: LD_INT 1
11528: PPUSH
11529: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11533: LD_INT 7
11535: PPUSH
11536: LD_VAR 0 3
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11548: LD_INT 8
11550: PPUSH
11551: LD_VAR 0 3
11555: PPUSH
11556: LD_INT 1
11558: PPUSH
11559: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11563: LD_INT 10
11565: PPUSH
11566: LD_VAR 0 3
11570: PPUSH
11571: LD_INT 1
11573: PPUSH
11574: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11578: LD_INT 11
11580: PPUSH
11581: LD_VAR 0 3
11585: PPUSH
11586: LD_INT 1
11588: PPUSH
11589: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11593: LD_INT 12
11595: PPUSH
11596: LD_VAR 0 3
11600: PPUSH
11601: LD_INT 1
11603: PPUSH
11604: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11608: LD_INT 13
11610: PPUSH
11611: LD_VAR 0 3
11615: PPUSH
11616: LD_INT 1
11618: PPUSH
11619: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11623: LD_INT 14
11625: PPUSH
11626: LD_VAR 0 3
11630: PPUSH
11631: LD_INT 1
11633: PPUSH
11634: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11638: LD_INT 15
11640: PPUSH
11641: LD_VAR 0 3
11645: PPUSH
11646: LD_INT 1
11648: PPUSH
11649: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11653: LD_INT 16
11655: PPUSH
11656: LD_VAR 0 3
11660: PPUSH
11661: LD_INT 1
11663: PPUSH
11664: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11668: LD_INT 17
11670: PPUSH
11671: LD_VAR 0 3
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11683: LD_INT 19
11685: PPUSH
11686: LD_VAR 0 3
11690: PPUSH
11691: LD_INT 1
11693: PPUSH
11694: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11698: LD_INT 20
11700: PPUSH
11701: LD_VAR 0 3
11705: PPUSH
11706: LD_INT 1
11708: PPUSH
11709: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11713: LD_INT 21
11715: PPUSH
11716: LD_VAR 0 3
11720: PPUSH
11721: LD_INT 1
11723: PPUSH
11724: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11728: LD_INT 23
11730: PPUSH
11731: LD_VAR 0 3
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11743: LD_INT 26
11745: PPUSH
11746: LD_VAR 0 3
11750: PPUSH
11751: LD_INT 1
11753: PPUSH
11754: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11758: LD_INT 27
11760: PPUSH
11761: LD_VAR 0 3
11765: PPUSH
11766: LD_INT 1
11768: PPUSH
11769: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11773: LD_INT 28
11775: PPUSH
11776: LD_VAR 0 3
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11788: LD_INT 29
11790: PPUSH
11791: LD_VAR 0 3
11795: PPUSH
11796: LD_INT 1
11798: PPUSH
11799: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11803: LD_INT 30
11805: PPUSH
11806: LD_VAR 0 3
11810: PPUSH
11811: LD_INT 1
11813: PPUSH
11814: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11818: LD_INT 31
11820: PPUSH
11821: LD_VAR 0 3
11825: PPUSH
11826: LD_INT 1
11828: PPUSH
11829: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11833: LD_INT 32
11835: PPUSH
11836: LD_VAR 0 3
11840: PPUSH
11841: LD_INT 1
11843: PPUSH
11844: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11848: LD_INT 36
11850: PPUSH
11851: LD_VAR 0 3
11855: PPUSH
11856: LD_INT 1
11858: PPUSH
11859: CALL_OW 324
// end ; 5 :
11863: GO 13994
11865: LD_INT 5
11867: DOUBLE
11868: EQUAL
11869: IFTRUE 11873
11871: GO 12986
11873: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11874: LD_INT 35
11876: PPUSH
11877: LD_VAR 0 3
11881: PPUSH
11882: LD_INT 1
11884: PPUSH
11885: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11889: LD_INT 45
11891: PPUSH
11892: LD_VAR 0 3
11896: PPUSH
11897: LD_INT 1
11899: PPUSH
11900: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11904: LD_INT 46
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: LD_INT 1
11914: PPUSH
11915: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11919: LD_INT 47
11921: PPUSH
11922: LD_VAR 0 3
11926: PPUSH
11927: LD_INT 1
11929: PPUSH
11930: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11934: LD_INT 1
11936: PPUSH
11937: LD_VAR 0 3
11941: PPUSH
11942: LD_INT 1
11944: PPUSH
11945: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11949: LD_INT 2
11951: PPUSH
11952: LD_VAR 0 3
11956: PPUSH
11957: LD_INT 1
11959: PPUSH
11960: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11964: LD_INT 11
11966: PPUSH
11967: LD_VAR 0 3
11971: PPUSH
11972: LD_INT 1
11974: PPUSH
11975: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11979: LD_INT 20
11981: PPUSH
11982: LD_VAR 0 3
11986: PPUSH
11987: LD_INT 1
11989: PPUSH
11990: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11994: LD_INT 48
11996: PPUSH
11997: LD_VAR 0 3
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12009: LD_INT 49
12011: PPUSH
12012: LD_VAR 0 3
12016: PPUSH
12017: LD_INT 1
12019: PPUSH
12020: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12024: LD_INT 69
12026: PPUSH
12027: LD_VAR 0 3
12031: PPUSH
12032: LD_INT 1
12034: PPUSH
12035: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12039: LD_INT 39
12041: PPUSH
12042: LD_VAR 0 3
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12054: LD_INT 34
12056: PPUSH
12057: LD_VAR 0 3
12061: PPUSH
12062: LD_INT 1
12064: PPUSH
12065: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12069: LD_INT 42
12071: PPUSH
12072: LD_VAR 0 3
12076: PPUSH
12077: LD_INT 1
12079: PPUSH
12080: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12084: LD_INT 44
12086: PPUSH
12087: LD_VAR 0 3
12091: PPUSH
12092: LD_INT 1
12094: PPUSH
12095: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12099: LD_INT 41
12101: PPUSH
12102: LD_VAR 0 3
12106: PPUSH
12107: LD_INT 1
12109: PPUSH
12110: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12114: LD_INT 40
12116: PPUSH
12117: LD_VAR 0 3
12121: PPUSH
12122: LD_INT 1
12124: PPUSH
12125: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12129: LD_INT 43
12131: PPUSH
12132: LD_VAR 0 3
12136: PPUSH
12137: LD_INT 1
12139: PPUSH
12140: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12144: LD_INT 70
12146: PPUSH
12147: LD_VAR 0 3
12151: PPUSH
12152: LD_INT 1
12154: PPUSH
12155: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12159: LD_INT 51
12161: PPUSH
12162: LD_VAR 0 3
12166: PPUSH
12167: LD_INT 1
12169: PPUSH
12170: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12174: LD_INT 52
12176: PPUSH
12177: LD_VAR 0 3
12181: PPUSH
12182: LD_INT 1
12184: PPUSH
12185: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12189: LD_INT 6
12191: PPUSH
12192: LD_VAR 0 3
12196: PPUSH
12197: LD_INT 1
12199: PPUSH
12200: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12204: LD_INT 15
12206: PPUSH
12207: LD_VAR 0 3
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12219: LD_INT 7
12221: PPUSH
12222: LD_VAR 0 3
12226: PPUSH
12227: LD_INT 1
12229: PPUSH
12230: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12234: LD_INT 12
12236: PPUSH
12237: LD_VAR 0 3
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12249: LD_INT 17
12251: PPUSH
12252: LD_VAR 0 3
12256: PPUSH
12257: LD_INT 1
12259: PPUSH
12260: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12264: LD_INT 18
12266: PPUSH
12267: LD_VAR 0 3
12271: PPUSH
12272: LD_INT 1
12274: PPUSH
12275: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12279: LD_INT 60
12281: PPUSH
12282: LD_VAR 0 3
12286: PPUSH
12287: LD_INT 1
12289: PPUSH
12290: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12294: LD_INT 32
12296: PPUSH
12297: LD_VAR 0 3
12301: PPUSH
12302: LD_INT 1
12304: PPUSH
12305: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12309: LD_INT 9
12311: PPUSH
12312: LD_VAR 0 3
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12324: LD_INT 57
12326: PPUSH
12327: LD_VAR 0 3
12331: PPUSH
12332: LD_INT 1
12334: PPUSH
12335: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12339: LD_INT 30
12341: PPUSH
12342: LD_VAR 0 3
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12354: LD_INT 37
12356: PPUSH
12357: LD_VAR 0 3
12361: PPUSH
12362: LD_INT 1
12364: PPUSH
12365: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12369: LD_INT 63
12371: PPUSH
12372: LD_VAR 0 3
12376: PPUSH
12377: LD_INT 1
12379: PPUSH
12380: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12384: LD_INT 3
12386: PPUSH
12387: LD_VAR 0 3
12391: PPUSH
12392: LD_INT 1
12394: PPUSH
12395: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12399: LD_INT 4
12401: PPUSH
12402: LD_VAR 0 3
12406: PPUSH
12407: LD_INT 1
12409: PPUSH
12410: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12414: LD_INT 5
12416: PPUSH
12417: LD_VAR 0 3
12421: PPUSH
12422: LD_INT 1
12424: PPUSH
12425: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12429: LD_INT 66
12431: PPUSH
12432: LD_VAR 0 3
12436: PPUSH
12437: LD_INT 1
12439: PPUSH
12440: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12444: LD_INT 21
12446: PPUSH
12447: LD_VAR 0 3
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12459: LD_INT 22
12461: PPUSH
12462: LD_VAR 0 3
12466: PPUSH
12467: LD_INT 1
12469: PPUSH
12470: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12474: LD_INT 19
12476: PPUSH
12477: LD_VAR 0 3
12481: PPUSH
12482: LD_INT 1
12484: PPUSH
12485: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12489: LD_INT 54
12491: PPUSH
12492: LD_VAR 0 3
12496: PPUSH
12497: LD_INT 1
12499: PPUSH
12500: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12504: LD_INT 55
12506: PPUSH
12507: LD_VAR 0 3
12511: PPUSH
12512: LD_INT 1
12514: PPUSH
12515: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12519: LD_INT 0
12521: PPUSH
12522: LD_VAR 0 3
12526: PPUSH
12527: LD_INT 1
12529: PPUSH
12530: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12534: LD_INT 1
12536: PPUSH
12537: LD_VAR 0 3
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12549: LD_INT 2
12551: PPUSH
12552: LD_VAR 0 3
12556: PPUSH
12557: LD_INT 1
12559: PPUSH
12560: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12564: LD_INT 3
12566: PPUSH
12567: LD_VAR 0 3
12571: PPUSH
12572: LD_INT 1
12574: PPUSH
12575: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12579: LD_INT 4
12581: PPUSH
12582: LD_VAR 0 3
12586: PPUSH
12587: LD_INT 1
12589: PPUSH
12590: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12594: LD_INT 5
12596: PPUSH
12597: LD_VAR 0 3
12601: PPUSH
12602: LD_INT 1
12604: PPUSH
12605: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12609: LD_INT 6
12611: PPUSH
12612: LD_VAR 0 3
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12624: LD_INT 7
12626: PPUSH
12627: LD_VAR 0 3
12631: PPUSH
12632: LD_INT 1
12634: PPUSH
12635: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12639: LD_INT 8
12641: PPUSH
12642: LD_VAR 0 3
12646: PPUSH
12647: LD_INT 1
12649: PPUSH
12650: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12654: LD_INT 10
12656: PPUSH
12657: LD_VAR 0 3
12661: PPUSH
12662: LD_INT 1
12664: PPUSH
12665: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12669: LD_INT 11
12671: PPUSH
12672: LD_VAR 0 3
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12684: LD_INT 12
12686: PPUSH
12687: LD_VAR 0 3
12691: PPUSH
12692: LD_INT 1
12694: PPUSH
12695: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12699: LD_INT 13
12701: PPUSH
12702: LD_VAR 0 3
12706: PPUSH
12707: LD_INT 1
12709: PPUSH
12710: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12714: LD_INT 14
12716: PPUSH
12717: LD_VAR 0 3
12721: PPUSH
12722: LD_INT 1
12724: PPUSH
12725: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12729: LD_INT 15
12731: PPUSH
12732: LD_VAR 0 3
12736: PPUSH
12737: LD_INT 1
12739: PPUSH
12740: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12744: LD_INT 16
12746: PPUSH
12747: LD_VAR 0 3
12751: PPUSH
12752: LD_INT 1
12754: PPUSH
12755: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12759: LD_INT 17
12761: PPUSH
12762: LD_VAR 0 3
12766: PPUSH
12767: LD_INT 1
12769: PPUSH
12770: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12774: LD_INT 18
12776: PPUSH
12777: LD_VAR 0 3
12781: PPUSH
12782: LD_INT 1
12784: PPUSH
12785: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12789: LD_INT 19
12791: PPUSH
12792: LD_VAR 0 3
12796: PPUSH
12797: LD_INT 1
12799: PPUSH
12800: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12804: LD_INT 20
12806: PPUSH
12807: LD_VAR 0 3
12811: PPUSH
12812: LD_INT 1
12814: PPUSH
12815: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12819: LD_INT 21
12821: PPUSH
12822: LD_VAR 0 3
12826: PPUSH
12827: LD_INT 1
12829: PPUSH
12830: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12834: LD_INT 23
12836: PPUSH
12837: LD_VAR 0 3
12841: PPUSH
12842: LD_INT 1
12844: PPUSH
12845: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12849: LD_INT 26
12851: PPUSH
12852: LD_VAR 0 3
12856: PPUSH
12857: LD_INT 1
12859: PPUSH
12860: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12864: LD_INT 27
12866: PPUSH
12867: LD_VAR 0 3
12871: PPUSH
12872: LD_INT 1
12874: PPUSH
12875: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12879: LD_INT 28
12881: PPUSH
12882: LD_VAR 0 3
12886: PPUSH
12887: LD_INT 1
12889: PPUSH
12890: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12894: LD_INT 29
12896: PPUSH
12897: LD_VAR 0 3
12901: PPUSH
12902: LD_INT 1
12904: PPUSH
12905: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12909: LD_INT 30
12911: PPUSH
12912: LD_VAR 0 3
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12924: LD_INT 31
12926: PPUSH
12927: LD_VAR 0 3
12931: PPUSH
12932: LD_INT 1
12934: PPUSH
12935: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12939: LD_INT 32
12941: PPUSH
12942: LD_VAR 0 3
12946: PPUSH
12947: LD_INT 1
12949: PPUSH
12950: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12954: LD_INT 33
12956: PPUSH
12957: LD_VAR 0 3
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12969: LD_INT 36
12971: PPUSH
12972: LD_VAR 0 3
12976: PPUSH
12977: LD_INT 1
12979: PPUSH
12980: CALL_OW 324
// end ; 6 :
12984: GO 13994
12986: LD_INT 6
12988: DOUBLE
12989: EQUAL
12990: IFTRUE 12994
12992: GO 13919
12994: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12995: LD_INT 35
12997: PPUSH
12998: LD_VAR 0 3
13002: PPUSH
13003: LD_INT 1
13005: PPUSH
13006: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13010: LD_INT 45
13012: PPUSH
13013: LD_VAR 0 3
13017: PPUSH
13018: LD_INT 1
13020: PPUSH
13021: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13025: LD_INT 46
13027: PPUSH
13028: LD_VAR 0 3
13032: PPUSH
13033: LD_INT 1
13035: PPUSH
13036: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13040: LD_INT 47
13042: PPUSH
13043: LD_VAR 0 3
13047: PPUSH
13048: LD_INT 1
13050: PPUSH
13051: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13055: LD_INT 1
13057: PPUSH
13058: LD_VAR 0 3
13062: PPUSH
13063: LD_INT 1
13065: PPUSH
13066: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13070: LD_INT 2
13072: PPUSH
13073: LD_VAR 0 3
13077: PPUSH
13078: LD_INT 1
13080: PPUSH
13081: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13085: LD_INT 11
13087: PPUSH
13088: LD_VAR 0 3
13092: PPUSH
13093: LD_INT 1
13095: PPUSH
13096: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13100: LD_INT 20
13102: PPUSH
13103: LD_VAR 0 3
13107: PPUSH
13108: LD_INT 1
13110: PPUSH
13111: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13115: LD_INT 48
13117: PPUSH
13118: LD_VAR 0 3
13122: PPUSH
13123: LD_INT 1
13125: PPUSH
13126: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13130: LD_INT 49
13132: PPUSH
13133: LD_VAR 0 3
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13145: LD_INT 50
13147: PPUSH
13148: LD_VAR 0 3
13152: PPUSH
13153: LD_INT 1
13155: PPUSH
13156: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13160: LD_INT 69
13162: PPUSH
13163: LD_VAR 0 3
13167: PPUSH
13168: LD_INT 1
13170: PPUSH
13171: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13175: LD_INT 39
13177: PPUSH
13178: LD_VAR 0 3
13182: PPUSH
13183: LD_INT 1
13185: PPUSH
13186: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13190: LD_INT 34
13192: PPUSH
13193: LD_VAR 0 3
13197: PPUSH
13198: LD_INT 1
13200: PPUSH
13201: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13205: LD_INT 42
13207: PPUSH
13208: LD_VAR 0 3
13212: PPUSH
13213: LD_INT 1
13215: PPUSH
13216: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13220: LD_INT 44
13222: PPUSH
13223: LD_VAR 0 3
13227: PPUSH
13228: LD_INT 1
13230: PPUSH
13231: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13235: LD_INT 41
13237: PPUSH
13238: LD_VAR 0 3
13242: PPUSH
13243: LD_INT 1
13245: PPUSH
13246: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13250: LD_INT 13
13252: PPUSH
13253: LD_VAR 0 3
13257: PPUSH
13258: LD_INT 1
13260: PPUSH
13261: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13265: LD_INT 40
13267: PPUSH
13268: LD_VAR 0 3
13272: PPUSH
13273: LD_INT 1
13275: PPUSH
13276: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13280: LD_INT 43
13282: PPUSH
13283: LD_VAR 0 3
13287: PPUSH
13288: LD_INT 1
13290: PPUSH
13291: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13295: LD_INT 70
13297: PPUSH
13298: LD_VAR 0 3
13302: PPUSH
13303: LD_INT 1
13305: PPUSH
13306: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13310: LD_INT 23
13312: PPUSH
13313: LD_VAR 0 3
13317: PPUSH
13318: LD_INT 1
13320: PPUSH
13321: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13325: LD_INT 51
13327: PPUSH
13328: LD_VAR 0 3
13332: PPUSH
13333: LD_INT 1
13335: PPUSH
13336: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13340: LD_INT 52
13342: PPUSH
13343: LD_VAR 0 3
13347: PPUSH
13348: LD_INT 1
13350: PPUSH
13351: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13355: LD_INT 6
13357: PPUSH
13358: LD_VAR 0 3
13362: PPUSH
13363: LD_INT 1
13365: PPUSH
13366: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13370: LD_INT 15
13372: PPUSH
13373: LD_VAR 0 3
13377: PPUSH
13378: LD_INT 1
13380: PPUSH
13381: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13385: LD_INT 7
13387: PPUSH
13388: LD_VAR 0 3
13392: PPUSH
13393: LD_INT 1
13395: PPUSH
13396: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13400: LD_INT 12
13402: PPUSH
13403: LD_VAR 0 3
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13415: LD_INT 10
13417: PPUSH
13418: LD_VAR 0 3
13422: PPUSH
13423: LD_INT 1
13425: PPUSH
13426: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13430: LD_INT 17
13432: PPUSH
13433: LD_VAR 0 3
13437: PPUSH
13438: LD_INT 1
13440: PPUSH
13441: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13445: LD_INT 18
13447: PPUSH
13448: LD_VAR 0 3
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13460: LD_INT 60
13462: PPUSH
13463: LD_VAR 0 3
13467: PPUSH
13468: LD_INT 1
13470: PPUSH
13471: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13475: LD_INT 61
13477: PPUSH
13478: LD_VAR 0 3
13482: PPUSH
13483: LD_INT 1
13485: PPUSH
13486: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13490: LD_INT 32
13492: PPUSH
13493: LD_VAR 0 3
13497: PPUSH
13498: LD_INT 1
13500: PPUSH
13501: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13505: LD_INT 27
13507: PPUSH
13508: LD_VAR 0 3
13512: PPUSH
13513: LD_INT 1
13515: PPUSH
13516: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13520: LD_INT 36
13522: PPUSH
13523: LD_VAR 0 3
13527: PPUSH
13528: LD_INT 1
13530: PPUSH
13531: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13535: LD_INT 33
13537: PPUSH
13538: LD_VAR 0 3
13542: PPUSH
13543: LD_INT 1
13545: PPUSH
13546: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13550: LD_INT 9
13552: PPUSH
13553: LD_VAR 0 3
13557: PPUSH
13558: LD_INT 1
13560: PPUSH
13561: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13565: LD_INT 38
13567: PPUSH
13568: LD_VAR 0 3
13572: PPUSH
13573: LD_INT 1
13575: PPUSH
13576: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13580: LD_INT 57
13582: PPUSH
13583: LD_VAR 0 3
13587: PPUSH
13588: LD_INT 1
13590: PPUSH
13591: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13595: LD_INT 58
13597: PPUSH
13598: LD_VAR 0 3
13602: PPUSH
13603: LD_INT 1
13605: PPUSH
13606: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13610: LD_INT 28
13612: PPUSH
13613: LD_VAR 0 3
13617: PPUSH
13618: LD_INT 1
13620: PPUSH
13621: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13625: LD_INT 29
13627: PPUSH
13628: LD_VAR 0 3
13632: PPUSH
13633: LD_INT 1
13635: PPUSH
13636: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13640: LD_INT 30
13642: PPUSH
13643: LD_VAR 0 3
13647: PPUSH
13648: LD_INT 1
13650: PPUSH
13651: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13655: LD_INT 37
13657: PPUSH
13658: LD_VAR 0 3
13662: PPUSH
13663: LD_INT 1
13665: PPUSH
13666: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13670: LD_INT 63
13672: PPUSH
13673: LD_VAR 0 3
13677: PPUSH
13678: LD_INT 1
13680: PPUSH
13681: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13685: LD_INT 64
13687: PPUSH
13688: LD_VAR 0 3
13692: PPUSH
13693: LD_INT 1
13695: PPUSH
13696: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13700: LD_INT 3
13702: PPUSH
13703: LD_VAR 0 3
13707: PPUSH
13708: LD_INT 1
13710: PPUSH
13711: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13715: LD_INT 4
13717: PPUSH
13718: LD_VAR 0 3
13722: PPUSH
13723: LD_INT 1
13725: PPUSH
13726: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13730: LD_INT 5
13732: PPUSH
13733: LD_VAR 0 3
13737: PPUSH
13738: LD_INT 1
13740: PPUSH
13741: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13745: LD_INT 8
13747: PPUSH
13748: LD_VAR 0 3
13752: PPUSH
13753: LD_INT 1
13755: PPUSH
13756: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13760: LD_INT 66
13762: PPUSH
13763: LD_VAR 0 3
13767: PPUSH
13768: LD_INT 1
13770: PPUSH
13771: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13775: LD_INT 67
13777: PPUSH
13778: LD_VAR 0 3
13782: PPUSH
13783: LD_INT 1
13785: PPUSH
13786: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13790: LD_INT 21
13792: PPUSH
13793: LD_VAR 0 3
13797: PPUSH
13798: LD_INT 1
13800: PPUSH
13801: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13805: LD_INT 22
13807: PPUSH
13808: LD_VAR 0 3
13812: PPUSH
13813: LD_INT 1
13815: PPUSH
13816: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13820: LD_INT 19
13822: PPUSH
13823: LD_VAR 0 3
13827: PPUSH
13828: LD_INT 1
13830: PPUSH
13831: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13835: LD_INT 26
13837: PPUSH
13838: LD_VAR 0 3
13842: PPUSH
13843: LD_INT 1
13845: PPUSH
13846: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13850: LD_INT 54
13852: PPUSH
13853: LD_VAR 0 3
13857: PPUSH
13858: LD_INT 1
13860: PPUSH
13861: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13865: LD_INT 55
13867: PPUSH
13868: LD_VAR 0 3
13872: PPUSH
13873: LD_INT 1
13875: PPUSH
13876: CALL_OW 322
// for i = 0 to 39 do
13880: LD_ADDR_VAR 0 4
13884: PUSH
13885: DOUBLE
13886: LD_INT 0
13888: DEC
13889: ST_TO_ADDR
13890: LD_INT 39
13892: PUSH
13893: FOR_TO
13894: IFFALSE 13915
// SetRestrict ( i , side , true ) ;
13896: LD_VAR 0 4
13900: PPUSH
13901: LD_VAR 0 3
13905: PPUSH
13906: LD_INT 1
13908: PPUSH
13909: CALL_OW 324
13913: GO 13893
13915: POP
13916: POP
// end ; else
13917: GO 13994
13919: POP
// begin for i = 1 to 73 do
13920: LD_ADDR_VAR 0 4
13924: PUSH
13925: DOUBLE
13926: LD_INT 1
13928: DEC
13929: ST_TO_ADDR
13930: LD_INT 73
13932: PUSH
13933: FOR_TO
13934: IFFALSE 13955
// SetTech ( i , side , state_enabled ) ;
13936: LD_VAR 0 4
13940: PPUSH
13941: LD_VAR 0 3
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 322
13953: GO 13933
13955: POP
13956: POP
// for i = 0 to 39 do
13957: LD_ADDR_VAR 0 4
13961: PUSH
13962: DOUBLE
13963: LD_INT 0
13965: DEC
13966: ST_TO_ADDR
13967: LD_INT 39
13969: PUSH
13970: FOR_TO
13971: IFFALSE 13992
// SetRestrict ( i , side , true ) ;
13973: LD_VAR 0 4
13977: PPUSH
13978: LD_VAR 0 3
13982: PPUSH
13983: LD_INT 1
13985: PPUSH
13986: CALL_OW 324
13990: GO 13970
13992: POP
13993: POP
// end ; end ; end ;
13994: GO 9999
13996: POP
13997: POP
// end ; end_of_file
13998: LD_VAR 0 2
14002: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
14003: LD_INT 0
14005: PPUSH
14006: PPUSH
14007: PPUSH
14008: PPUSH
14009: PPUSH
14010: PPUSH
14011: PPUSH
14012: PPUSH
14013: PPUSH
// for i := 1 to 8 do
14014: LD_ADDR_VAR 0 2
14018: PUSH
14019: DOUBLE
14020: LD_INT 1
14022: DEC
14023: ST_TO_ADDR
14024: LD_INT 8
14026: PUSH
14027: FOR_TO
14028: IFFALSE 14412
// begin if Side_Positions [ i ] then
14030: LD_EXP 36
14034: PUSH
14035: LD_VAR 0 2
14039: ARRAY
14040: IFFALSE 14410
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
14042: LD_ADDR_VAR 0 7
14046: PUSH
14047: LD_INT 22
14049: PUSH
14050: LD_VAR 0 2
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: LD_INT 21
14061: PUSH
14062: LD_INT 1
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PPUSH
14073: CALL_OW 69
14077: PUSH
14078: LD_INT 0
14080: PLUS
14081: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14082: LD_ADDR_VAR 0 9
14086: PUSH
14087: LD_INT 22
14089: PUSH
14090: LD_VAR 0 2
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 2
14101: PUSH
14102: LD_INT 30
14104: PUSH
14105: LD_INT 0
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: LD_INT 30
14114: PUSH
14115: LD_INT 1
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PPUSH
14131: CALL_OW 69
14135: ST_TO_ADDR
// crates := 0 ;
14136: LD_ADDR_VAR 0 4
14140: PUSH
14141: LD_INT 0
14143: ST_TO_ADDR
// oil := 0 ;
14144: LD_ADDR_VAR 0 5
14148: PUSH
14149: LD_INT 0
14151: ST_TO_ADDR
// sib := 0 ;
14152: LD_ADDR_VAR 0 6
14156: PUSH
14157: LD_INT 0
14159: ST_TO_ADDR
// if bases then
14160: LD_VAR 0 9
14164: IFFALSE 14270
// begin for j in bases do
14166: LD_ADDR_VAR 0 3
14170: PUSH
14171: LD_VAR 0 9
14175: PUSH
14176: FOR_IN
14177: IFFALSE 14268
// begin base := GetBase ( j ) ;
14179: LD_ADDR_VAR 0 8
14183: PUSH
14184: LD_VAR 0 3
14188: PPUSH
14189: CALL_OW 274
14193: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14194: LD_ADDR_VAR 0 4
14198: PUSH
14199: LD_VAR 0 4
14203: PUSH
14204: LD_VAR 0 8
14208: PPUSH
14209: LD_INT 1
14211: PPUSH
14212: CALL_OW 275
14216: PLUS
14217: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14218: LD_ADDR_VAR 0 5
14222: PUSH
14223: LD_VAR 0 5
14227: PUSH
14228: LD_VAR 0 8
14232: PPUSH
14233: LD_INT 2
14235: PPUSH
14236: CALL_OW 275
14240: PLUS
14241: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14242: LD_ADDR_VAR 0 6
14246: PUSH
14247: LD_VAR 0 6
14251: PUSH
14252: LD_VAR 0 8
14256: PPUSH
14257: LD_INT 3
14259: PPUSH
14260: CALL_OW 275
14264: PLUS
14265: ST_TO_ADDR
// end ;
14266: GO 14176
14268: POP
14269: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14270: LD_STRING setSpecText(
14272: PUSH
14273: LD_VAR 0 2
14277: STR
14278: PUSH
14279: LD_STRING ,
14281: STR
14282: PUSH
14283: LD_INT 2
14285: STR
14286: PUSH
14287: LD_STRING ,
14289: STR
14290: PUSH
14291: LD_VAR 0 4
14295: STR
14296: PUSH
14297: LD_STRING )
14299: STR
14300: PPUSH
14301: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14305: LD_STRING setSpecText(
14307: PUSH
14308: LD_VAR 0 2
14312: STR
14313: PUSH
14314: LD_STRING ,
14316: STR
14317: PUSH
14318: LD_INT 3
14320: STR
14321: PUSH
14322: LD_STRING ,
14324: STR
14325: PUSH
14326: LD_VAR 0 5
14330: STR
14331: PUSH
14332: LD_STRING )
14334: STR
14335: PPUSH
14336: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14340: LD_STRING setSpecText(
14342: PUSH
14343: LD_VAR 0 2
14347: STR
14348: PUSH
14349: LD_STRING ,
14351: STR
14352: PUSH
14353: LD_INT 4
14355: STR
14356: PUSH
14357: LD_STRING ,
14359: STR
14360: PUSH
14361: LD_VAR 0 6
14365: STR
14366: PUSH
14367: LD_STRING )
14369: STR
14370: PPUSH
14371: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14375: LD_STRING setSpecText(
14377: PUSH
14378: LD_VAR 0 2
14382: STR
14383: PUSH
14384: LD_STRING ,
14386: STR
14387: PUSH
14388: LD_INT 5
14390: STR
14391: PUSH
14392: LD_STRING ,
14394: STR
14395: PUSH
14396: LD_VAR 0 7
14400: STR
14401: PUSH
14402: LD_STRING )
14404: STR
14405: PPUSH
14406: CALL_OW 559
// end ; end ;
14410: GO 14027
14412: POP
14413: POP
// end ;
14414: LD_VAR 0 1
14418: RET
// every 0 0$1 do
14419: GO 14421
14421: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14422: LD_STRING setSpecLogoNumber(
14424: PUSH
14425: LD_INT 2
14427: STR
14428: PUSH
14429: LD_STRING ,
14431: STR
14432: PUSH
14433: LD_INT 1
14435: STR
14436: PUSH
14437: LD_STRING )
14439: STR
14440: PPUSH
14441: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14445: LD_STRING setSpecLogoNumber(
14447: PUSH
14448: LD_INT 3
14450: STR
14451: PUSH
14452: LD_STRING ,
14454: STR
14455: PUSH
14456: LD_INT 2
14458: STR
14459: PUSH
14460: LD_STRING )
14462: STR
14463: PPUSH
14464: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14468: LD_STRING setSpecLogoNumber(
14470: PUSH
14471: LD_INT 4
14473: STR
14474: PUSH
14475: LD_STRING ,
14477: STR
14478: PUSH
14479: LD_INT 3
14481: STR
14482: PUSH
14483: LD_STRING )
14485: STR
14486: PPUSH
14487: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14491: LD_STRING setSpecLogoNumber(
14493: PUSH
14494: LD_INT 5
14496: STR
14497: PUSH
14498: LD_STRING ,
14500: STR
14501: PUSH
14502: LD_INT 4
14504: STR
14505: PUSH
14506: LD_STRING )
14508: STR
14509: PPUSH
14510: CALL_OW 559
// end ;
14514: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14515: LD_INT 2
14517: PUSH
14518: LD_INT 30
14520: PUSH
14521: LD_INT 0
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 30
14530: PUSH
14531: LD_INT 1
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: LIST
14542: PPUSH
14543: CALL_OW 69
14547: IFFALSE 14557
14549: GO 14551
14551: DISABLE
// begin enable ;
14552: ENABLE
// UpdateSpectatorBar ;
14553: CALL 14003 0 0
// end ; end_of_file
14557: END
// var respawn , inqueue ; export function init_respawning ; begin
14558: LD_INT 0
14560: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14561: LD_ADDR_LOC 18
14565: PUSH
14566: LD_INT 1
14568: PPUSH
14569: LD_INT 8
14571: PPUSH
14572: CALL_OW 12
14576: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14577: LD_ADDR_LOC 19
14581: PUSH
14582: LD_INT 0
14584: PUSH
14585: LD_INT 0
14587: PUSH
14588: LD_INT 0
14590: PUSH
14591: LD_INT 0
14593: PUSH
14594: LD_INT 0
14596: PUSH
14597: LD_INT 0
14599: PUSH
14600: LD_INT 0
14602: PUSH
14603: LD_INT 0
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: ST_TO_ADDR
// end ;
14616: LD_VAR 0 1
14620: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14621: GO 14623
14623: DISABLE
14624: LD_INT 0
14626: PPUSH
14627: PPUSH
14628: PPUSH
// begin if respawning_time_max = 0 then
14629: LD_EXP 30
14633: PUSH
14634: LD_INT 0
14636: EQUAL
14637: IFFALSE 14641
// exit ;
14639: GO 15049
// if respawn = 8 then
14641: LD_LOC 18
14645: PUSH
14646: LD_INT 8
14648: EQUAL
14649: IFFALSE 14661
// respawn := 1 else
14651: LD_ADDR_LOC 18
14655: PUSH
14656: LD_INT 1
14658: ST_TO_ADDR
14659: GO 14675
// respawn := respawn + 1 ;
14661: LD_ADDR_LOC 18
14665: PUSH
14666: LD_LOC 18
14670: PUSH
14671: LD_INT 1
14673: PLUS
14674: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14675: LD_EXP 36
14679: PUSH
14680: LD_LOC 18
14684: ARRAY
14685: PUSH
14686: LD_LOC 19
14690: PUSH
14691: LD_LOC 18
14695: ARRAY
14696: NOT
14697: AND
14698: IFFALSE 15048
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14700: LD_ADDR_VAR 0 1
14704: PUSH
14705: LD_INT 21
14707: PUSH
14708: LD_INT 1
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_LOC 18
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: LD_INT 3
14729: PUSH
14730: LD_INT 23
14732: PUSH
14733: LD_INT 0
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: PPUSH
14746: CALL_OW 69
14750: ST_TO_ADDR
// if n < number_of_people then
14751: LD_VAR 0 1
14755: PUSH
14756: LD_EXP 21
14760: LESS
14761: IFFALSE 15045
// begin aktresp := respawn ;
14763: LD_ADDR_VAR 0 3
14767: PUSH
14768: LD_LOC 18
14772: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14773: LD_ADDR_LOC 19
14777: PUSH
14778: LD_LOC 19
14782: PPUSH
14783: LD_VAR 0 3
14787: PPUSH
14788: LD_INT 1
14790: PPUSH
14791: CALL_OW 1
14795: ST_TO_ADDR
// enable ;
14796: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14797: LD_EXP 29
14801: PPUSH
14802: LD_EXP 30
14806: PPUSH
14807: CALL_OW 12
14811: PPUSH
14812: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14816: LD_ADDR_LOC 19
14820: PUSH
14821: LD_LOC 19
14825: PPUSH
14826: LD_VAR 0 3
14830: PPUSH
14831: LD_INT 0
14833: PPUSH
14834: CALL_OW 1
14838: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14839: LD_ADDR_VAR 0 2
14843: PUSH
14844: LD_INT 21
14846: PUSH
14847: LD_INT 3
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 2
14856: PUSH
14857: LD_INT 30
14859: PUSH
14860: LD_INT 0
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 30
14869: PUSH
14870: LD_INT 1
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: PUSH
14882: LD_INT 50
14884: PUSH
14885: EMPTY
14886: LIST
14887: PUSH
14888: LD_INT 22
14890: PUSH
14891: LD_VAR 0 3
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: PPUSH
14906: CALL_OW 69
14910: ST_TO_ADDR
// if dep = 0 then
14911: LD_VAR 0 2
14915: PUSH
14916: LD_INT 0
14918: EQUAL
14919: IFFALSE 14923
// exit ;
14921: GO 15049
// hc_name :=  ;
14923: LD_ADDR_OWVAR 26
14927: PUSH
14928: LD_STRING 
14930: ST_TO_ADDR
// hc_importance := 0 ;
14931: LD_ADDR_OWVAR 32
14935: PUSH
14936: LD_INT 0
14938: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14939: LD_INT 0
14941: PPUSH
14942: LD_INT 0
14944: PPUSH
14945: LD_EXP 22
14949: PUSH
14950: LD_INT 2
14952: DIV
14953: PPUSH
14954: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14958: LD_ADDR_OWVAR 21
14962: PUSH
14963: LD_EXP 37
14967: PUSH
14968: LD_VAR 0 3
14972: ARRAY
14973: ST_TO_ADDR
// uc_side := aktresp ;
14974: LD_ADDR_OWVAR 20
14978: PUSH
14979: LD_VAR 0 3
14983: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14984: LD_ADDR_VAR 0 2
14988: PUSH
14989: LD_VAR 0 2
14993: PUSH
14994: LD_INT 1
14996: PPUSH
14997: LD_VAR 0 2
15001: PPUSH
15002: CALL_OW 12
15006: ARRAY
15007: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
15008: CALL_OW 44
15012: PPUSH
15013: LD_VAR 0 2
15017: PPUSH
15018: CALL_OW 250
15022: PPUSH
15023: LD_VAR 0 2
15027: PPUSH
15028: CALL_OW 251
15032: PPUSH
15033: LD_INT 7
15035: PPUSH
15036: LD_INT 1
15038: PPUSH
15039: CALL_OW 50
// end else
15043: GO 15046
// enable ;
15045: ENABLE
// end else
15046: GO 15049
// enable ;
15048: ENABLE
// end ; end_of_file
15049: PPOPN 3
15051: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
15052: LD_INT 0
15054: PPUSH
15055: PPUSH
15056: PPUSH
// BuildUpTime_Delay = 0 ;
15057: LD_ADDR_EXP 61
15061: PUSH
15062: LD_INT 0
15064: ST_TO_ADDR
// if not def_builduptime then
15065: LD_EXP 14
15069: NOT
15070: IFFALSE 15074
// exit ;
15072: GO 15257
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
15074: LD_ADDR_EXP 61
15078: PUSH
15079: LD_INT 8400
15081: PUSH
15082: LD_INT 2100
15084: PUSH
15085: LD_EXP 14
15089: MUL
15090: PLUS
15091: ST_TO_ADDR
// BuildUpTimeActive := true ;
15092: LD_ADDR_EXP 60
15096: PUSH
15097: LD_INT 1
15099: ST_TO_ADDR
// for i := 1 to 8 do
15100: LD_ADDR_VAR 0 2
15104: PUSH
15105: DOUBLE
15106: LD_INT 1
15108: DEC
15109: ST_TO_ADDR
15110: LD_INT 8
15112: PUSH
15113: FOR_TO
15114: IFFALSE 15255
// if Side_Positions [ i ] then
15116: LD_EXP 36
15120: PUSH
15121: LD_VAR 0 2
15125: ARRAY
15126: IFFALSE 15253
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
15128: LD_EXP 59
15132: PUSH
15133: LD_EXP 36
15137: PUSH
15138: LD_VAR 0 2
15142: ARRAY
15143: ARRAY
15144: PPUSH
15145: LD_INT 5
15147: PPUSH
15148: CALL_OW 424
// for j := 1 to 8 do
15152: LD_ADDR_VAR 0 3
15156: PUSH
15157: DOUBLE
15158: LD_INT 1
15160: DEC
15161: ST_TO_ADDR
15162: LD_INT 8
15164: PUSH
15165: FOR_TO
15166: IFFALSE 15251
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15168: LD_EXP 36
15172: PUSH
15173: LD_VAR 0 3
15177: ARRAY
15178: PUSH
15179: LD_EXP 33
15183: PUSH
15184: LD_VAR 0 2
15188: ARRAY
15189: PUSH
15190: LD_EXP 33
15194: PUSH
15195: LD_VAR 0 3
15199: ARRAY
15200: NONEQUAL
15201: PUSH
15202: LD_EXP 38
15206: NOT
15207: PUSH
15208: LD_VAR 0 2
15212: PUSH
15213: LD_VAR 0 3
15217: NONEQUAL
15218: AND
15219: OR
15220: AND
15221: IFFALSE 15249
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15223: LD_VAR 0 3
15227: PPUSH
15228: LD_EXP 59
15232: PUSH
15233: LD_EXP 36
15237: PUSH
15238: LD_VAR 0 2
15242: ARRAY
15243: ARRAY
15244: PPUSH
15245: CALL_OW 333
15249: GO 15165
15251: POP
15252: POP
// end ;
15253: GO 15113
15255: POP
15256: POP
// end ;
15257: LD_VAR 0 1
15261: RET
// export function EndBuildUp ; var i , j ; begin
15262: LD_INT 0
15264: PPUSH
15265: PPUSH
15266: PPUSH
// BuildUpTimeActive := false ;
15267: LD_ADDR_EXP 60
15271: PUSH
15272: LD_INT 0
15274: ST_TO_ADDR
// for i := 1 to 8 do
15275: LD_ADDR_VAR 0 2
15279: PUSH
15280: DOUBLE
15281: LD_INT 1
15283: DEC
15284: ST_TO_ADDR
15285: LD_INT 8
15287: PUSH
15288: FOR_TO
15289: IFFALSE 15430
// if Side_Positions [ i ] then
15291: LD_EXP 36
15295: PUSH
15296: LD_VAR 0 2
15300: ARRAY
15301: IFFALSE 15428
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
15303: LD_EXP 59
15307: PUSH
15308: LD_EXP 36
15312: PUSH
15313: LD_VAR 0 2
15317: ARRAY
15318: ARRAY
15319: PPUSH
15320: LD_INT 0
15322: PPUSH
15323: CALL_OW 424
// for j := 1 to 8 do
15327: LD_ADDR_VAR 0 3
15331: PUSH
15332: DOUBLE
15333: LD_INT 1
15335: DEC
15336: ST_TO_ADDR
15337: LD_INT 8
15339: PUSH
15340: FOR_TO
15341: IFFALSE 15426
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15343: LD_EXP 36
15347: PUSH
15348: LD_VAR 0 3
15352: ARRAY
15353: PUSH
15354: LD_EXP 33
15358: PUSH
15359: LD_VAR 0 2
15363: ARRAY
15364: PUSH
15365: LD_EXP 33
15369: PUSH
15370: LD_VAR 0 3
15374: ARRAY
15375: NONEQUAL
15376: PUSH
15377: LD_EXP 38
15381: NOT
15382: PUSH
15383: LD_VAR 0 2
15387: PUSH
15388: LD_VAR 0 3
15392: NONEQUAL
15393: AND
15394: OR
15395: AND
15396: IFFALSE 15424
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15398: LD_VAR 0 3
15402: PPUSH
15403: LD_EXP 59
15407: PUSH
15408: LD_EXP 36
15412: PUSH
15413: LD_VAR 0 2
15417: ARRAY
15418: ARRAY
15419: PPUSH
15420: CALL_OW 334
15424: GO 15340
15426: POP
15427: POP
// end ;
15428: GO 15288
15430: POP
15431: POP
// end ;
15432: LD_VAR 0 1
15436: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
15437: LD_EXP 60
15441: IFFALSE 15616
15443: GO 15445
15445: DISABLE
15446: LD_INT 0
15448: PPUSH
15449: PPUSH
// begin for i := 1 to 8 do
15450: LD_ADDR_VAR 0 1
15454: PUSH
15455: DOUBLE
15456: LD_INT 1
15458: DEC
15459: ST_TO_ADDR
15460: LD_INT 8
15462: PUSH
15463: FOR_TO
15464: IFFALSE 15613
// if Side_Positions [ i ] then
15466: LD_EXP 36
15470: PUSH
15471: LD_VAR 0 1
15475: ARRAY
15476: IFFALSE 15611
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
15478: LD_ADDR_VAR 0 2
15482: PUSH
15483: LD_EXP 59
15487: PUSH
15488: LD_EXP 36
15492: PUSH
15493: LD_VAR 0 1
15497: ARRAY
15498: ARRAY
15499: PPUSH
15500: LD_INT 2
15502: PUSH
15503: LD_INT 21
15505: PUSH
15506: LD_INT 1
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: LD_INT 21
15515: PUSH
15516: LD_INT 2
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: EMPTY
15524: LIST
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 22
15530: PUSH
15531: LD_OWVAR 2
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PPUSH
15544: CALL_OW 70
15548: PUSH
15549: FOR_IN
15550: IFFALSE 15609
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
15552: LD_EXP 33
15556: PUSH
15557: LD_VAR 0 1
15561: ARRAY
15562: PUSH
15563: LD_EXP 33
15567: PUSH
15568: LD_OWVAR 2
15572: ARRAY
15573: NONEQUAL
15574: PUSH
15575: LD_EXP 38
15579: NOT
15580: PUSH
15581: LD_VAR 0 1
15585: PUSH
15586: LD_OWVAR 2
15590: NONEQUAL
15591: AND
15592: OR
15593: IFFALSE 15607
// ComMoveToArea ( un , BuildUpEscape ) ;
15595: LD_VAR 0 2
15599: PPUSH
15600: LD_INT 17
15602: PPUSH
15603: CALL_OW 113
15607: GO 15549
15609: POP
15610: POP
15611: GO 15463
15613: POP
15614: POP
// enable ;
15615: ENABLE
// end ;
15616: PPOPN 2
15618: END
// every 0 0$1 trigger def_builduptime do
15619: LD_EXP 14
15623: IFFALSE 15649
15625: GO 15627
15627: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15628: LD_INT 8400
15630: PUSH
15631: LD_EXP 14
15635: PUSH
15636: LD_INT 2100
15638: MUL
15639: PLUS
15640: PPUSH
15641: CALL_OW 67
// EndBuildUp ;
15645: CALL 15262 0 0
// end ;
15649: END
