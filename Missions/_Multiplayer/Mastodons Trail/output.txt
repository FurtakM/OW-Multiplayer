// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime , def_Sheik , def_Mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , Sheik , Mastodont ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 18
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 36
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 33
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 37
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 35
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 34
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 18
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 2 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 2
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 36
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 33
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 37
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 35
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 34
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 38
 372: PUSH
 373: LD_EXP 33
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 626
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_Sheik = GetMultiplayerSetting ( 21 ) ;
 577: LD_ADDR_EXP 15
 581: PUSH
 582: LD_INT 21
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 590: LD_ADDR_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 603: LD_ADDR_EXP 16
 607: PUSH
 608: LD_INT 23
 610: PPUSH
 611: CALL_OW 426
 615: ST_TO_ADDR
// def_win_rules = 0 ;
 616: LD_ADDR_EXP 32
 620: PUSH
 621: LD_INT 0
 623: ST_TO_ADDR
// end else
 624: GO 774
// begin Randomize ;
 626: CALL_OW 10
// def_base_level := 2 ;
 630: LD_ADDR_EXP 1
 634: PUSH
 635: LD_INT 2
 637: ST_TO_ADDR
// def_amount_of_people := 2 ;
 638: LD_ADDR_EXP 2
 642: PUSH
 643: LD_INT 2
 645: ST_TO_ADDR
// def_skill_level := 1 ;
 646: LD_ADDR_EXP 3
 650: PUSH
 651: LD_INT 1
 653: ST_TO_ADDR
// def_starting_resources := 2 ;
 654: LD_ADDR_EXP 4
 658: PUSH
 659: LD_INT 2
 661: ST_TO_ADDR
// def_shipments_density := 50 ;
 662: LD_ADDR_EXP 5
 666: PUSH
 667: LD_INT 50
 669: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 670: LD_ADDR_EXP 6
 674: PUSH
 675: LD_INT 1
 677: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 678: LD_ADDR_EXP 7
 682: PUSH
 683: LD_INT 2
 685: ST_TO_ADDR
// def_shared_vision := 1 ;
 686: LD_ADDR_EXP 8
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// def_morale_flags := 1 ;
 694: LD_ADDR_EXP 9
 698: PUSH
 699: LD_INT 1
 701: ST_TO_ADDR
// def_siberite_detection := 1 ;
 702: LD_ADDR_EXP 10
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// def_people_respawning := 2 ;
 710: LD_ADDR_EXP 11
 714: PUSH
 715: LD_INT 2
 717: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 718: LD_ADDR_EXP 12
 722: PUSH
 723: LD_INT 3
 725: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 726: LD_ADDR_EXP 13
 730: PUSH
 731: LD_INT 2
 733: ST_TO_ADDR
// def_builduptime := 1 ;
 734: LD_ADDR_EXP 14
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_Sheik = 2 ;
 742: LD_ADDR_EXP 15
 746: PUSH
 747: LD_INT 2
 749: ST_TO_ADDR
// tech_level = 4 ;
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: LD_INT 4
 757: ST_TO_ADDR
// def_mastodont := 0 ;
 758: LD_ADDR_EXP 16
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_win_rules = 0 ;
 766: LD_ADDR_EXP 32
 770: PUSH
 771: LD_INT 0
 773: ST_TO_ADDR
// end ; if isSGUI then
 774: LD_OWVAR 83
 778: IFFALSE 786
// setMpTechs ( ) else
 780: CALL 9812 0 0
 784: GO 799
// SetMpTechLevel ( tech_level + 1 ) ;
 786: LD_VAR 0 3
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: PPUSH
 795: CALL 9959 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 799: LD_ADDR_EXP 19
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 1
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_EXP 1
 822: PUSH
 823: LD_INT 1
 825: PLUS
 826: ARRAY
 827: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 828: LD_ADDR_EXP 20
 832: PUSH
 833: LD_INT 0
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 3
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_EXP 1
 851: PUSH
 852: LD_INT 1
 854: PLUS
 855: ARRAY
 856: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 857: LD_ADDR_EXP 21
 861: PUSH
 862: LD_INT 9
 864: PUSH
 865: LD_INT 12
 867: PUSH
 868: LD_INT 15
 870: PUSH
 871: LD_INT 24
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: PUSH
 880: LD_EXP 2
 884: PUSH
 885: LD_INT 1
 887: PLUS
 888: ARRAY
 889: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 890: LD_ADDR_EXP 22
 894: PUSH
 895: LD_INT 2
 897: PUSH
 898: LD_INT 3
 900: PUSH
 901: LD_INT 4
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_EXP 3
 917: PUSH
 918: LD_INT 1
 920: PLUS
 921: ARRAY
 922: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 923: LD_ADDR_EXP 24
 927: PUSH
 928: LD_INT 0
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 30
 944: PUSH
 945: LD_INT 0
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PUSH
 956: LD_INT 50
 958: PUSH
 959: LD_INT 20
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: PUSH
 970: LD_INT 80
 972: PUSH
 973: LD_INT 40
 975: PUSH
 976: LD_INT 20
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: PUSH
 990: LD_EXP 4
 994: PUSH
 995: LD_INT 1
 997: PLUS
 998: ARRAY
 999: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1000: LD_ADDR_EXP 23
1004: PUSH
1005: LD_INT 10
1007: PUSH
1008: EMPTY
1009: LIST
1010: PUSH
1011: LD_INT 7
1013: PUSH
1014: LD_INT 14
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 6
1023: PUSH
1024: LD_INT 12
1026: PUSH
1027: LD_INT 18
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 10
1040: PUSH
1041: LD_INT 15
1043: PUSH
1044: LD_INT 20
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_EXP 4
1063: PUSH
1064: LD_INT 1
1066: PLUS
1067: ARRAY
1068: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1069: LD_ADDR_EXP 25
1073: PUSH
1074: LD_INT 150
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_INT 1
1084: PLUS
1085: MINUS
1086: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1087: LD_ADDR_EXP 29
1091: PUSH
1092: LD_INT 0
1094: PUSH
1095: LD_INT 10500
1097: PUSH
1098: LD_INT 6300
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_EXP 11
1110: PUSH
1111: LD_INT 1
1113: PLUS
1114: ARRAY
1115: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1116: LD_ADDR_EXP 30
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 31500
1126: PUSH
1127: LD_INT 10500
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_EXP 11
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1145: LD_ADDR_EXP 27
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: LD_INT 3
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_EXP 12
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: ARRAY
1177: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1178: LD_ADDR_EXP 26
1182: PUSH
1183: LD_INT 1
1185: NEG
1186: PUSH
1187: LD_INT 350
1189: PUSH
1190: LD_INT 700
1192: PUSH
1193: LD_INT 1400
1195: PUSH
1196: LD_INT 0
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: PUSH
1206: LD_EXP 9
1210: PUSH
1211: LD_INT 1
1213: PLUS
1214: ARRAY
1215: ST_TO_ADDR
// battle_flags_id := [ ] ;
1216: LD_ADDR_EXP 46
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// Sheik := [ 0 , 1 , 2 ] [ def_Sheik + 1 ] ;
1223: LD_ADDR_EXP 47
1227: PUSH
1228: LD_INT 0
1230: PUSH
1231: LD_INT 1
1233: PUSH
1234: LD_INT 2
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: LD_EXP 15
1246: PUSH
1247: LD_INT 1
1249: PLUS
1250: ARRAY
1251: ST_TO_ADDR
// Mastodont := 8 ;
1252: LD_ADDR_EXP 48
1256: PUSH
1257: LD_INT 8
1259: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1260: LD_EXP 13
1264: PUSH
1265: LD_INT 0
1267: EQUAL
1268: IFFALSE 1280
// siberite_bomb_Delay = 0 else
1270: LD_ADDR_EXP 31
1274: PUSH
1275: LD_INT 0
1277: ST_TO_ADDR
1278: GO 1302
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1280: LD_ADDR_EXP 31
1284: PUSH
1285: LD_EXP 13
1289: PUSH
1290: LD_INT 1
1292: MINUS
1293: PUSH
1294: LD_INT 21000
1296: MUL
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ST_TO_ADDR
// end ;
1302: LD_VAR 0 1
1306: RET
// function init_map ; var i , j ; begin
1307: LD_INT 0
1309: PPUSH
1310: PPUSH
1311: PPUSH
// normal_oil_deposits_locations := [ [ 61 , 60 ] , [ 105 , 67 ] , [ 106 , 43 ] , [ 220 , 10 ] , [ 188 , 284 ] , [ 278 , 241 ] , [ 277 , 204 ] , [ 320 , 220 ] ] ;
1312: LD_ADDR_EXP 42
1316: PUSH
1317: LD_INT 61
1319: PUSH
1320: LD_INT 60
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 105
1329: PUSH
1330: LD_INT 67
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 106
1339: PUSH
1340: LD_INT 43
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 220
1349: PUSH
1350: LD_INT 10
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: LD_INT 188
1359: PUSH
1360: LD_INT 284
1362: PUSH
1363: EMPTY
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 278
1369: PUSH
1370: LD_INT 241
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 277
1379: PUSH
1380: LD_INT 204
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: LD_INT 320
1389: PUSH
1390: LD_INT 220
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 36 , 57 ] , [ 98 , 53 ] , [ 106 , 12 ] , [ 247 , 20 ] , [ 139 , 263 ] , [ 280 , 280 ] , [ 274 , 215 ] , [ 345 , 223 ] ] ;
1407: LD_ADDR_EXP 43
1411: PUSH
1412: LD_INT 36
1414: PUSH
1415: LD_INT 57
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 98
1424: PUSH
1425: LD_INT 53
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 106
1434: PUSH
1435: LD_INT 12
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 247
1444: PUSH
1445: LD_INT 20
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 139
1454: PUSH
1455: LD_INT 263
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 280
1464: PUSH
1465: LD_INT 280
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 274
1474: PUSH
1475: LD_INT 215
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 345
1484: PUSH
1485: LD_INT 223
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 52 , 91 ] , [ 129 , 74 ] , [ 93 , 16 ] , [ 244 , 38 ] , [ 146 , 250 ] , [ 300 , 276 ] , [ 253 , 200 ] , [ 330 , 190 ] ] ;
1502: LD_ADDR_EXP 44
1506: PUSH
1507: LD_INT 52
1509: PUSH
1510: LD_INT 91
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: LD_INT 129
1519: PUSH
1520: LD_INT 74
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PUSH
1527: LD_INT 93
1529: PUSH
1530: LD_INT 16
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PUSH
1537: LD_INT 244
1539: PUSH
1540: LD_INT 38
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 146
1549: PUSH
1550: LD_INT 250
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: LD_INT 300
1559: PUSH
1560: LD_INT 276
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 253
1569: PUSH
1570: LD_INT 200
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 330
1579: PUSH
1580: LD_INT 190
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 88 , 88 ] , [ 117 , 103 ] , [ 137 , 45 ] , [ 193 , 3 ] , [ 202 , 296 ] , [ 247 , 239 ] , [ 270 , 169 ] , [ 293 , 186 ] ] ;
1597: LD_ADDR_EXP 45
1601: PUSH
1602: LD_INT 88
1604: PUSH
1605: LD_INT 88
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 117
1614: PUSH
1615: LD_INT 103
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: LD_INT 137
1624: PUSH
1625: LD_INT 45
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: PUSH
1632: LD_INT 193
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 202
1644: PUSH
1645: LD_INT 296
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: LD_INT 247
1654: PUSH
1655: LD_INT 239
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 270
1664: PUSH
1665: LD_INT 169
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: LD_INT 293
1674: PUSH
1675: LD_INT 186
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: ST_TO_ADDR
// depot_def := [ [ 58 , 73 , 2 ] , [ 116 , 79 , 3 ] , [ 110 , 30 , 1 ] , [ 223 , 25 , 3 ] , [ 168 , 266 , 0 ] , [ 276 , 256 , 4 ] , [ 262 , 189 , 0 ] , [ 324 , 203 , 5 ] ] ;
1692: LD_ADDR_EXP 39
1696: PUSH
1697: LD_INT 58
1699: PUSH
1700: LD_INT 73
1702: PUSH
1703: LD_INT 2
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 116
1713: PUSH
1714: LD_INT 79
1716: PUSH
1717: LD_INT 3
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 110
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 1
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 223
1741: PUSH
1742: LD_INT 25
1744: PUSH
1745: LD_INT 3
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 168
1755: PUSH
1756: LD_INT 266
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 276
1769: PUSH
1770: LD_INT 256
1772: PUSH
1773: LD_INT 4
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 262
1783: PUSH
1784: LD_INT 189
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: LD_INT 324
1797: PUSH
1798: LD_INT 203
1800: PUSH
1801: LD_INT 5
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: ST_TO_ADDR
// for i in depot_def do
1819: LD_ADDR_VAR 0 2
1823: PUSH
1824: LD_EXP 39
1828: PUSH
1829: FOR_IN
1830: IFFALSE 1906
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1832: LD_ADDR_EXP 41
1836: PUSH
1837: LD_EXP 41
1841: PUSH
1842: LD_VAR 0 2
1846: PUSH
1847: LD_INT 1
1849: ARRAY
1850: PPUSH
1851: LD_VAR 0 2
1855: PUSH
1856: LD_INT 3
1858: ARRAY
1859: PPUSH
1860: LD_INT 4
1862: NEG
1863: PPUSH
1864: CALL_OW 272
1868: PUSH
1869: LD_VAR 0 2
1873: PUSH
1874: LD_INT 2
1876: ARRAY
1877: PPUSH
1878: LD_VAR 0 2
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PPUSH
1887: LD_INT 4
1889: NEG
1890: PPUSH
1891: CALL_OW 273
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: EMPTY
1901: LIST
1902: ADD
1903: ST_TO_ADDR
1904: GO 1829
1906: POP
1907: POP
// breastworks_def := [ [ [ 72 , 97 , 5 ] , [ 82 , 85 , 4 ] , [ 66 , 66 , 4 ] ] , [ [ 119 , 99 , 0 ] , [ 140 , 98 , 5 ] , [ 126 , 66 , 4 ] ] , [ [ 113 , 16 , 4 ] , [ 130 , 38 , 5 ] , [ 111 , 42 , 0 ] ] , [ [ 218 , 36 , 0 ] , [ 240 , 40 , 5 ] , [ 205 , 24 , 1 ] ] , [ [ 174 , 250 , 3 ] , [ 151 , 248 , 2 ] , [ 193 , 272 , 4 ] ] , [ [ 252 , 246 , 1 ] , [ 263 , 267 , 1 ] , [ 270 , 238 , 3 ] ] , [ [ 240 , 173 , 2 ] , [ 261 , 173 , 2 ] , [ 256 , 208 , 1 ] ] , [ [ 311 , 181 , 2 ] , [ 298 , 190 , 2 ] , [ 312 , 212 , 1 ] ] ] ;
1908: LD_ADDR_EXP 40
1912: PUSH
1913: LD_INT 72
1915: PUSH
1916: LD_INT 97
1918: PUSH
1919: LD_INT 5
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 82
1929: PUSH
1930: LD_INT 85
1932: PUSH
1933: LD_INT 4
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 66
1943: PUSH
1944: LD_INT 66
1946: PUSH
1947: LD_INT 4
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 119
1962: PUSH
1963: LD_INT 99
1965: PUSH
1966: LD_INT 0
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 140
1976: PUSH
1977: LD_INT 98
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 126
1990: PUSH
1991: LD_INT 66
1993: PUSH
1994: LD_INT 4
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 113
2009: PUSH
2010: LD_INT 16
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 130
2023: PUSH
2024: LD_INT 38
2026: PUSH
2027: LD_INT 5
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 111
2037: PUSH
2038: LD_INT 42
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 218
2056: PUSH
2057: LD_INT 36
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: LD_INT 240
2070: PUSH
2071: LD_INT 40
2073: PUSH
2074: LD_INT 5
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 205
2084: PUSH
2085: LD_INT 24
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 174
2103: PUSH
2104: LD_INT 250
2106: PUSH
2107: LD_INT 3
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 151
2117: PUSH
2118: LD_INT 248
2120: PUSH
2121: LD_INT 2
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 193
2131: PUSH
2132: LD_INT 272
2134: PUSH
2135: LD_INT 4
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 252
2150: PUSH
2151: LD_INT 246
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 263
2164: PUSH
2165: LD_INT 267
2167: PUSH
2168: LD_INT 1
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 270
2178: PUSH
2179: LD_INT 238
2181: PUSH
2182: LD_INT 3
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 240
2197: PUSH
2198: LD_INT 173
2200: PUSH
2201: LD_INT 2
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 261
2211: PUSH
2212: LD_INT 173
2214: PUSH
2215: LD_INT 2
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 256
2225: PUSH
2226: LD_INT 208
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 311
2244: PUSH
2245: LD_INT 181
2247: PUSH
2248: LD_INT 2
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 298
2258: PUSH
2259: LD_INT 190
2261: PUSH
2262: LD_INT 2
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 312
2272: PUSH
2273: LD_INT 212
2275: PUSH
2276: LD_INT 1
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: ST_TO_ADDR
// for i = 1 to Side_Positions do
2299: LD_ADDR_VAR 0 2
2303: PUSH
2304: DOUBLE
2305: LD_INT 1
2307: DEC
2308: ST_TO_ADDR
2309: LD_EXP 36
2313: PUSH
2314: FOR_TO
2315: IFFALSE 2438
// begin if not Side_Positions [ i ] then
2317: LD_EXP 36
2321: PUSH
2322: LD_VAR 0 2
2326: ARRAY
2327: NOT
2328: IFFALSE 2332
// continue ;
2330: GO 2314
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2332: LD_EXP 42
2336: PUSH
2337: LD_EXP 36
2341: PUSH
2342: LD_VAR 0 2
2346: ARRAY
2347: ARRAY
2348: PUSH
2349: LD_INT 1
2351: ARRAY
2352: PPUSH
2353: LD_EXP 42
2357: PUSH
2358: LD_EXP 36
2362: PUSH
2363: LD_VAR 0 2
2367: ARRAY
2368: ARRAY
2369: PUSH
2370: LD_INT 2
2372: ARRAY
2373: PPUSH
2374: LD_INT 2
2376: PPUSH
2377: CALL_OW 62
// if def_extra_oil_deposits then
2381: LD_EXP 6
2385: IFFALSE 2436
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2387: LD_EXP 43
2391: PUSH
2392: LD_EXP 36
2396: PUSH
2397: LD_VAR 0 2
2401: ARRAY
2402: ARRAY
2403: PUSH
2404: LD_INT 1
2406: ARRAY
2407: PPUSH
2408: LD_EXP 43
2412: PUSH
2413: LD_EXP 36
2417: PUSH
2418: LD_VAR 0 2
2422: ARRAY
2423: ARRAY
2424: PUSH
2425: LD_INT 2
2427: ARRAY
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: CALL_OW 62
// end ;
2436: GO 2314
2438: POP
2439: POP
// if def_extra_sib_deposits then
2440: LD_EXP 7
2444: IFFALSE 2591
// for i = 1 to Side_Positions do
2446: LD_ADDR_VAR 0 2
2450: PUSH
2451: DOUBLE
2452: LD_INT 1
2454: DEC
2455: ST_TO_ADDR
2456: LD_EXP 36
2460: PUSH
2461: FOR_TO
2462: IFFALSE 2589
// begin if not Side_Positions [ i ] then
2464: LD_EXP 36
2468: PUSH
2469: LD_VAR 0 2
2473: ARRAY
2474: NOT
2475: IFFALSE 2479
// continue ;
2477: GO 2461
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2479: LD_EXP 44
2483: PUSH
2484: LD_EXP 36
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: ARRAY
2495: PUSH
2496: LD_INT 1
2498: ARRAY
2499: PPUSH
2500: LD_EXP 44
2504: PUSH
2505: LD_EXP 36
2509: PUSH
2510: LD_VAR 0 2
2514: ARRAY
2515: ARRAY
2516: PUSH
2517: LD_INT 2
2519: ARRAY
2520: PPUSH
2521: LD_INT 3
2523: PPUSH
2524: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2528: LD_EXP 7
2532: PUSH
2533: LD_INT 2
2535: EQUAL
2536: IFFALSE 2587
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2538: LD_EXP 45
2542: PUSH
2543: LD_EXP 36
2547: PUSH
2548: LD_VAR 0 2
2552: ARRAY
2553: ARRAY
2554: PUSH
2555: LD_INT 1
2557: ARRAY
2558: PPUSH
2559: LD_EXP 45
2563: PUSH
2564: LD_EXP 36
2568: PUSH
2569: LD_VAR 0 2
2573: ARRAY
2574: ARRAY
2575: PUSH
2576: LD_INT 2
2578: ARRAY
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: CALL_OW 62
// end ;
2587: GO 2461
2589: POP
2590: POP
// end ;
2591: LD_VAR 0 1
2595: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2596: LD_INT 0
2598: PPUSH
2599: PPUSH
2600: PPUSH
// if not Team_Game then
2601: LD_EXP 38
2605: NOT
2606: IFFALSE 2704
// begin for i = 1 to 8 do
2608: LD_ADDR_VAR 0 2
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 8
2620: PUSH
2621: FOR_TO
2622: IFFALSE 2700
// for j = 1 to 8 do
2624: LD_ADDR_VAR 0 3
2628: PUSH
2629: DOUBLE
2630: LD_INT 1
2632: DEC
2633: ST_TO_ADDR
2634: LD_INT 8
2636: PUSH
2637: FOR_TO
2638: IFFALSE 2696
// if i <> j then
2640: LD_VAR 0 2
2644: PUSH
2645: LD_VAR 0 3
2649: NONEQUAL
2650: IFFALSE 2674
// SetAttitude ( i , j , att_neutral , true ) else
2652: LD_VAR 0 2
2656: PPUSH
2657: LD_VAR 0 3
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 80
2672: GO 2694
// SetAttitude ( i , j , att_friend , true ) ;
2674: LD_VAR 0 2
2678: PPUSH
2679: LD_VAR 0 3
2683: PPUSH
2684: LD_INT 1
2686: PPUSH
2687: LD_INT 1
2689: PPUSH
2690: CALL_OW 80
2694: GO 2637
2696: POP
2697: POP
2698: GO 2621
2700: POP
2701: POP
// end else
2702: GO 2879
// begin if def_shared_vision then
2704: LD_EXP 8
2708: IFFALSE 2773
// begin for i in Teams do
2710: LD_ADDR_VAR 0 2
2714: PUSH
2715: LD_EXP 34
2719: PUSH
2720: FOR_IN
2721: IFFALSE 2771
// for j = 2 to i do
2723: LD_ADDR_VAR 0 3
2727: PUSH
2728: DOUBLE
2729: LD_INT 2
2731: DEC
2732: ST_TO_ADDR
2733: LD_VAR 0 2
2737: PUSH
2738: FOR_TO
2739: IFFALSE 2767
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2741: LD_VAR 0 2
2745: PUSH
2746: LD_VAR 0 3
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 2
2756: PUSH
2757: LD_INT 1
2759: ARRAY
2760: PPUSH
2761: CALL_OW 343
2765: GO 2738
2767: POP
2768: POP
2769: GO 2720
2771: POP
2772: POP
// end ; for i = 1 to 8 do
2773: LD_ADDR_VAR 0 2
2777: PUSH
2778: DOUBLE
2779: LD_INT 1
2781: DEC
2782: ST_TO_ADDR
2783: LD_INT 8
2785: PUSH
2786: FOR_TO
2787: IFFALSE 2877
// for j = 1 to 8 do
2789: LD_ADDR_VAR 0 3
2793: PUSH
2794: DOUBLE
2795: LD_INT 1
2797: DEC
2798: ST_TO_ADDR
2799: LD_INT 8
2801: PUSH
2802: FOR_TO
2803: IFFALSE 2873
// if Side_Teams [ i ] = Side_Teams [ j ] then
2805: LD_EXP 33
2809: PUSH
2810: LD_VAR 0 2
2814: ARRAY
2815: PUSH
2816: LD_EXP 33
2820: PUSH
2821: LD_VAR 0 3
2825: ARRAY
2826: EQUAL
2827: IFFALSE 2851
// SetAttitude ( i , j , att_friend , true ) else
2829: LD_VAR 0 2
2833: PPUSH
2834: LD_VAR 0 3
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: LD_INT 1
2844: PPUSH
2845: CALL_OW 80
2849: GO 2871
// SetAttitude ( i , j , att_enemy , true ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_VAR 0 3
2860: PPUSH
2861: LD_INT 2
2863: PPUSH
2864: LD_INT 1
2866: PPUSH
2867: CALL_OW 80
2871: GO 2802
2873: POP
2874: POP
2875: GO 2786
2877: POP
2878: POP
// end ; end ;
2879: LD_VAR 0 1
2883: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2884: LD_INT 0
2886: PPUSH
2887: PPUSH
2888: PPUSH
2889: PPUSH
// result := [ ] ;
2890: LD_ADDR_VAR 0 7
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// for i := 1 to count do
2897: LD_ADDR_VAR 0 8
2901: PUSH
2902: DOUBLE
2903: LD_INT 1
2905: DEC
2906: ST_TO_ADDR
2907: LD_VAR 0 1
2911: PUSH
2912: FOR_TO
2913: IFFALSE 3461
// begin uc_direction := Rand ( 0 , 5 ) ;
2915: LD_ADDR_OWVAR 24
2919: PUSH
2920: LD_INT 0
2922: PPUSH
2923: LD_INT 5
2925: PPUSH
2926: CALL_OW 12
2930: ST_TO_ADDR
// if commander then
2931: LD_LOC 1
2935: IFFALSE 3090
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2937: LD_ADDR_OWVAR 26
2941: PUSH
2942: LD_OWVAR 19
2946: PUSH
2947: LD_OWVAR 20
2951: ARRAY
2952: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2953: LD_INT 1
2955: PPUSH
2956: LD_INT 2
2958: PPUSH
2959: CALL_OW 12
2963: PPUSH
2964: LD_VAR 0 2
2968: PPUSH
2969: LD_EXP 22
2973: PUSH
2974: LD_INT 2
2976: PLUS
2977: PPUSH
2978: CALL_OW 380
// hc_importance := 105 ;
2982: LD_ADDR_OWVAR 32
2986: PUSH
2987: LD_INT 105
2989: ST_TO_ADDR
// commander := false ;
2990: LD_ADDR_LOC 1
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// if Multiplayer then
2998: LD_OWVAR 4
3002: IFFALSE 3088
// begin if Sheik = 1 and uc_nation = 2 then
3004: LD_EXP 47
3008: PUSH
3009: LD_INT 1
3011: EQUAL
3012: PUSH
3013: LD_OWVAR 21
3017: PUSH
3018: LD_INT 2
3020: EQUAL
3021: AND
3022: IFFALSE 3050
// begin hc_gallery :=  ;
3024: LD_ADDR_OWVAR 33
3028: PUSH
3029: LD_STRING 
3031: ST_TO_ADDR
// hc_class := class_desert_warior ;
3032: LD_ADDR_OWVAR 28
3036: PUSH
3037: LD_INT 11
3039: ST_TO_ADDR
// hc_sex := sex_male ;
3040: LD_ADDR_OWVAR 27
3044: PUSH
3045: LD_INT 1
3047: ST_TO_ADDR
// end else
3048: GO 3088
// begin hc_gallery := MULTIAVATARS ;
3050: LD_ADDR_OWVAR 33
3054: PUSH
3055: LD_STRING MULTIAVATARS
3057: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3058: LD_ADDR_OWVAR 34
3062: PUSH
3063: LD_OWVAR 20
3067: PPUSH
3068: CALL_OW 525
3072: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3073: LD_ADDR_OWVAR 27
3077: PUSH
3078: LD_OWVAR 20
3082: PPUSH
3083: CALL_OW 526
3087: ST_TO_ADDR
// end ; end ; end else
3088: GO 3226
// begin hc_name :=  ;
3090: LD_ADDR_OWVAR 26
3094: PUSH
3095: LD_STRING 
3097: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3098: LD_INT 1
3100: PPUSH
3101: LD_INT 2
3103: PPUSH
3104: CALL_OW 12
3108: PPUSH
3109: LD_VAR 0 2
3113: PPUSH
3114: LD_EXP 22
3118: PPUSH
3119: CALL_OW 380
// hc_importance := 0 ;
3123: LD_ADDR_OWVAR 32
3127: PUSH
3128: LD_INT 0
3130: ST_TO_ADDR
// if cl = class_desert_warior and Sheik = 2 then
3131: LD_VAR 0 2
3135: PUSH
3136: LD_INT 11
3138: EQUAL
3139: PUSH
3140: LD_EXP 47
3144: PUSH
3145: LD_INT 2
3147: EQUAL
3148: AND
3149: IFFALSE 3204
// begin commander := true ;
3151: LD_ADDR_LOC 1
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3159: LD_INT 1
3161: PPUSH
3162: LD_INT 2
3164: PPUSH
3165: CALL_OW 12
3169: PPUSH
3170: LD_VAR 0 2
3174: PPUSH
3175: LD_EXP 22
3179: PUSH
3180: LD_INT 2
3182: PLUS
3183: PPUSH
3184: CALL_OW 380
// hc_importance := 105 ;
3188: LD_ADDR_OWVAR 32
3192: PUSH
3193: LD_INT 105
3195: ST_TO_ADDR
// commander := false ;
3196: LD_ADDR_LOC 1
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// end ; if Multiplayer then
3204: LD_OWVAR 4
3208: IFFALSE 3226
// begin hc_gallery :=  ;
3210: LD_ADDR_OWVAR 33
3214: PUSH
3215: LD_STRING 
3217: ST_TO_ADDR
// hc_face_number := 0 ;
3218: LD_ADDR_OWVAR 34
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3226: LD_ADDR_VAR 0 10
3230: PUSH
3231: CALL_OW 44
3235: ST_TO_ADDR
// if global_defined and not cl = class_desert_warior then
3236: LD_LOC 3
3240: PUSH
3241: LD_VAR 0 2
3245: PUSH
3246: LD_INT 11
3248: EQUAL
3249: NOT
3250: AND
3251: IFFALSE 3391
// begin if ( cl = class_soldier ) then
3253: LD_VAR 0 2
3257: PUSH
3258: LD_INT 1
3260: EQUAL
3261: IFFALSE 3281
// j := i + soldiers_created else
3263: LD_ADDR_VAR 0 9
3267: PUSH
3268: LD_VAR 0 8
3272: PUSH
3273: LD_LOC 4
3277: PLUS
3278: ST_TO_ADDR
3279: GO 3291
// j := i ;
3281: LD_ADDR_VAR 0 9
3285: PUSH
3286: LD_VAR 0 8
3290: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3291: LD_LOC 2
3295: PUSH
3296: LD_VAR 0 2
3300: ARRAY
3301: PUSH
3302: LD_VAR 0 9
3306: ARRAY
3307: PPUSH
3308: LD_VAR 0 10
3312: PPUSH
3313: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3317: LD_VAR 0 10
3321: PPUSH
3322: LD_INT 2
3324: PPUSH
3325: LD_LOC 2
3329: PUSH
3330: LD_VAR 0 2
3334: ARRAY
3335: PUSH
3336: LD_VAR 0 9
3340: ARRAY
3341: PPUSH
3342: LD_INT 2
3344: PPUSH
3345: CALL_OW 260
3349: PPUSH
3350: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3354: LD_VAR 0 10
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_LOC 2
3366: PUSH
3367: LD_VAR 0 2
3371: ARRAY
3372: PUSH
3373: LD_VAR 0 9
3377: ARRAY
3378: PPUSH
3379: LD_INT 1
3381: PPUSH
3382: CALL_OW 260
3386: PPUSH
3387: CALL_OW 239
// end ; if building then
3391: LD_VAR 0 6
3395: IFFALSE 3413
// PlaceHumanInUnit ( un , building ) else
3397: LD_VAR 0 10
3401: PPUSH
3402: LD_VAR 0 6
3406: PPUSH
3407: CALL_OW 52
3411: GO 3440
// PlaceUnitXYR ( un , x , y , r , false ) ;
3413: LD_VAR 0 10
3417: PPUSH
3418: LD_VAR 0 3
3422: PPUSH
3423: LD_VAR 0 4
3427: PPUSH
3428: LD_VAR 0 5
3432: PPUSH
3433: LD_INT 0
3435: PPUSH
3436: CALL_OW 50
// result := result ^ [ un ] ;
3440: LD_ADDR_VAR 0 7
3444: PUSH
3445: LD_VAR 0 7
3449: PUSH
3450: LD_VAR 0 10
3454: PUSH
3455: EMPTY
3456: LIST
3457: ADD
3458: ST_TO_ADDR
// end ;
3459: GO 2912
3461: POP
3462: POP
// if not global_defined then
3463: LD_LOC 3
3467: NOT
3468: IFFALSE 3546
// if ( global_units >= cl ) then
3470: LD_LOC 2
3474: PUSH
3475: LD_VAR 0 2
3479: GREATEREQUAL
3480: IFFALSE 3521
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3482: LD_ADDR_LOC 2
3486: PUSH
3487: LD_LOC 2
3491: PPUSH
3492: LD_VAR 0 2
3496: PPUSH
3497: LD_LOC 2
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PUSH
3508: LD_VAR 0 7
3512: ADD
3513: PPUSH
3514: CALL_OW 1
3518: ST_TO_ADDR
3519: GO 3546
// global_units := Replace ( global_units , cl , result ) ;
3521: LD_ADDR_LOC 2
3525: PUSH
3526: LD_LOC 2
3530: PPUSH
3531: LD_VAR 0 2
3535: PPUSH
3536: LD_VAR 0 7
3540: PPUSH
3541: CALL_OW 1
3545: ST_TO_ADDR
// if commander then
3546: LD_LOC 1
3550: IFFALSE 3597
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3552: LD_ADDR_EXP 49
3556: PUSH
3557: LD_EXP 49
3561: PPUSH
3562: LD_OWVAR 20
3566: PPUSH
3567: LD_EXP 49
3571: PUSH
3572: LD_OWVAR 20
3576: ARRAY
3577: PUSH
3578: LD_VAR 0 10
3582: ADD
3583: PPUSH
3584: CALL_OW 1
3588: ST_TO_ADDR
// commander := false ;
3589: LD_ADDR_LOC 1
3593: PUSH
3594: LD_INT 0
3596: ST_TO_ADDR
// end ; end ;
3597: LD_VAR 0 7
3601: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3602: LD_INT 0
3604: PPUSH
3605: PPUSH
// uc_side := 0 ;
3606: LD_ADDR_OWVAR 20
3610: PUSH
3611: LD_INT 0
3613: ST_TO_ADDR
// uc_nation := 0 ;
3614: LD_ADDR_OWVAR 21
3618: PUSH
3619: LD_INT 0
3621: ST_TO_ADDR
// vc_chassis := 31 ;
3622: LD_ADDR_OWVAR 37
3626: PUSH
3627: LD_INT 31
3629: ST_TO_ADDR
// vc_control := control_rider ;
3630: LD_ADDR_OWVAR 38
3634: PUSH
3635: LD_INT 4
3637: ST_TO_ADDR
// if def_mastodont = 1 then
3638: LD_EXP 16
3642: PUSH
3643: LD_INT 1
3645: EQUAL
3646: IFFALSE 3685
// for i = 1 to n do
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 1
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3683
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3666: CALL_OW 45
3670: PPUSH
3671: LD_INT 18
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 49
3681: GO 3663
3683: POP
3684: POP
// if def_mastodont = 2 then
3685: LD_EXP 16
3689: PUSH
3690: LD_INT 2
3692: EQUAL
3693: IFFALSE 3732
// for i = 1 to n do
3695: LD_ADDR_VAR 0 3
3699: PUSH
3700: DOUBLE
3701: LD_INT 1
3703: DEC
3704: ST_TO_ADDR
3705: LD_VAR 0 1
3709: PUSH
3710: FOR_TO
3711: IFFALSE 3730
// PlaceUnitArea ( CreateVehicle , MastodontSpawn2 , false ) ;
3713: CALL_OW 45
3717: PPUSH
3718: LD_INT 19
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: CALL_OW 49
3728: GO 3710
3730: POP
3731: POP
// if def_mastodont = 3 then
3732: LD_EXP 16
3736: PUSH
3737: LD_INT 3
3739: EQUAL
3740: IFFALSE 3779
// for i = 1 to n do
3742: LD_ADDR_VAR 0 3
3746: PUSH
3747: DOUBLE
3748: LD_INT 1
3750: DEC
3751: ST_TO_ADDR
3752: LD_VAR 0 1
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3777
// PlaceUnitArea ( CreateVehicle , MastodontSpawn3 , false ) ;
3760: CALL_OW 45
3764: PPUSH
3765: LD_INT 20
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 49
3775: GO 3757
3777: POP
3778: POP
// end ;
3779: LD_VAR 0 2
3783: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
// if side in [ 0 , 9 ] then
3795: LD_VAR 0 1
3799: PUSH
3800: LD_INT 0
3802: PUSH
3803: LD_INT 9
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: IN
3810: IFFALSE 3814
// exit ;
3812: GO 4910
// pos := Side_Positions [ side ] ;
3814: LD_ADDR_VAR 0 3
3818: PUSH
3819: LD_EXP 36
3823: PUSH
3824: LD_VAR 0 1
3828: ARRAY
3829: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3830: LD_ADDR_OWVAR 21
3834: PUSH
3835: LD_EXP 37
3839: PUSH
3840: LD_VAR 0 1
3844: ARRAY
3845: ST_TO_ADDR
// uc_side := side ;
3846: LD_ADDR_OWVAR 20
3850: PUSH
3851: LD_VAR 0 1
3855: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3856: LD_ADDR_VAR 0 4
3860: PUSH
3861: LD_EXP 39
3865: PUSH
3866: LD_VAR 0 3
3870: ARRAY
3871: PUSH
3872: LD_INT 1
3874: ARRAY
3875: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3876: LD_ADDR_VAR 0 5
3880: PUSH
3881: LD_EXP 39
3885: PUSH
3886: LD_VAR 0 3
3890: ARRAY
3891: PUSH
3892: LD_INT 2
3894: ARRAY
3895: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3896: LD_ADDR_VAR 0 6
3900: PUSH
3901: LD_EXP 39
3905: PUSH
3906: LD_VAR 0 3
3910: ARRAY
3911: PUSH
3912: LD_INT 3
3914: ARRAY
3915: ST_TO_ADDR
// if is_depot then
3916: LD_EXP 19
3920: IFFALSE 4053
// begin bc_type = b_depot ;
3922: LD_ADDR_OWVAR 42
3926: PUSH
3927: LD_INT 0
3929: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3930: LD_ADDR_VAR 0 10
3934: PUSH
3935: LD_VAR 0 4
3939: PPUSH
3940: LD_VAR 0 5
3944: PPUSH
3945: LD_VAR 0 6
3949: PPUSH
3950: CALL_OW 47
3954: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3955: LD_VAR 0 10
3959: PPUSH
3960: LD_STRING @
3962: PUSH
3963: LD_VAR 0 1
3967: STR
3968: PPUSH
3969: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3973: LD_VAR 0 10
3977: PPUSH
3978: CALL_OW 274
3982: PPUSH
3983: LD_INT 1
3985: PPUSH
3986: LD_EXP 24
3990: PUSH
3991: LD_INT 1
3993: ARRAY
3994: PPUSH
3995: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3999: LD_VAR 0 10
4003: PPUSH
4004: CALL_OW 274
4008: PPUSH
4009: LD_INT 2
4011: PPUSH
4012: LD_EXP 24
4016: PUSH
4017: LD_INT 2
4019: ARRAY
4020: PPUSH
4021: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4025: LD_VAR 0 10
4029: PPUSH
4030: CALL_OW 274
4034: PPUSH
4035: LD_INT 3
4037: PPUSH
4038: LD_EXP 24
4042: PUSH
4043: LD_INT 3
4045: ARRAY
4046: PPUSH
4047: CALL_OW 277
// end else
4051: GO 4197
// begin for i := 1 to 3 do
4053: LD_ADDR_VAR 0 7
4057: PUSH
4058: DOUBLE
4059: LD_INT 1
4061: DEC
4062: ST_TO_ADDR
4063: LD_INT 3
4065: PUSH
4066: FOR_TO
4067: IFFALSE 4195
// begin r := starting_resources [ i ] ;
4069: LD_ADDR_VAR 0 8
4073: PUSH
4074: LD_EXP 24
4078: PUSH
4079: LD_VAR 0 7
4083: ARRAY
4084: ST_TO_ADDR
// while r >= 10 do
4085: LD_VAR 0 8
4089: PUSH
4090: LD_INT 10
4092: GREATEREQUAL
4093: IFFALSE 4193
// if r > 50 then
4095: LD_VAR 0 8
4099: PUSH
4100: LD_INT 50
4102: GREATER
4103: IFFALSE 4149
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4105: LD_VAR 0 7
4109: PPUSH
4110: LD_INT 5
4112: PPUSH
4113: LD_VAR 0 4
4117: PPUSH
4118: LD_VAR 0 5
4122: PPUSH
4123: LD_INT 4
4125: PPUSH
4126: LD_INT 0
4128: PPUSH
4129: CALL_OW 60
// r := r - 50 ;
4133: LD_ADDR_VAR 0 8
4137: PUSH
4138: LD_VAR 0 8
4142: PUSH
4143: LD_INT 50
4145: MINUS
4146: ST_TO_ADDR
// end else
4147: GO 4191
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4149: LD_VAR 0 7
4153: PPUSH
4154: LD_VAR 0 8
4158: PUSH
4159: LD_INT 10
4161: DIV
4162: PPUSH
4163: LD_VAR 0 4
4167: PPUSH
4168: LD_VAR 0 5
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 60
// r := 0 ;
4183: LD_ADDR_VAR 0 8
4187: PUSH
4188: LD_INT 0
4190: ST_TO_ADDR
// end ;
4191: GO 4085
// end ;
4193: GO 4066
4195: POP
4196: POP
// end ; for r in starting_crates do
4197: LD_ADDR_VAR 0 8
4201: PUSH
4202: LD_EXP 23
4206: PUSH
4207: FOR_IN
4208: IFFALSE 4240
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 5
4215: PPUSH
4216: LD_VAR 0 4
4220: PPUSH
4221: LD_VAR 0 5
4225: PPUSH
4226: LD_VAR 0 8
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 60
4238: GO 4207
4240: POP
4241: POP
// if def_morale_flags then
4242: LD_EXP 9
4246: IFFALSE 4385
// begin x := start_def [ pos ] [ 1 ] ;
4248: LD_ADDR_VAR 0 4
4252: PUSH
4253: LD_EXP 41
4257: PUSH
4258: LD_VAR 0 3
4262: ARRAY
4263: PUSH
4264: LD_INT 1
4266: ARRAY
4267: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4268: LD_ADDR_VAR 0 5
4272: PUSH
4273: LD_EXP 41
4277: PUSH
4278: LD_VAR 0 3
4282: ARRAY
4283: PUSH
4284: LD_INT 2
4286: ARRAY
4287: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4288: LD_VAR 0 4
4292: PPUSH
4293: LD_VAR 0 5
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: LD_INT 2
4303: PPUSH
4304: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4308: LD_ADDR_EXP 46
4312: PUSH
4313: LD_EXP 46
4317: PUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: LD_VAR 0 4
4327: PPUSH
4328: LD_VAR 0 5
4332: PPUSH
4333: LD_INT 1
4335: PUSH
4336: LD_INT 100
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: LD_INT 50
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: LD_INT 20
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 20
4365: PUSH
4366: LD_INT 100
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 418
4383: ADD
4384: ST_TO_ADDR
// end ; commander := true ;
4385: LD_ADDR_LOC 1
4389: PUSH
4390: LD_INT 1
4392: ST_TO_ADDR
// soldiers_created := 0 ;
4393: LD_ADDR_LOC 4
4397: PUSH
4398: LD_INT 0
4400: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4401: LD_ADDR_VAR 0 7
4405: PUSH
4406: DOUBLE
4407: LD_INT 1
4409: DEC
4410: ST_TO_ADDR
4411: LD_EXP 20
4415: PUSH
4416: FOR_TO
4417: IFFALSE 4570
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4419: LD_ADDR_VAR 0 4
4423: PUSH
4424: LD_EXP 40
4428: PUSH
4429: LD_VAR 0 3
4433: ARRAY
4434: PUSH
4435: LD_VAR 0 7
4439: ARRAY
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4445: LD_ADDR_VAR 0 5
4449: PUSH
4450: LD_EXP 40
4454: PUSH
4455: LD_VAR 0 3
4459: ARRAY
4460: PUSH
4461: LD_VAR 0 7
4465: ARRAY
4466: PUSH
4467: LD_INT 2
4469: ARRAY
4470: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4471: LD_ADDR_VAR 0 6
4475: PUSH
4476: LD_EXP 40
4480: PUSH
4481: LD_VAR 0 3
4485: ARRAY
4486: PUSH
4487: LD_VAR 0 7
4491: ARRAY
4492: PUSH
4493: LD_INT 3
4495: ARRAY
4496: ST_TO_ADDR
// bc_type := b_breastwork ;
4497: LD_ADDR_OWVAR 42
4501: PUSH
4502: LD_INT 31
4504: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4505: LD_ADDR_VAR 0 9
4509: PUSH
4510: LD_VAR 0 4
4514: PPUSH
4515: LD_VAR 0 5
4519: PPUSH
4520: LD_VAR 0 6
4524: PPUSH
4525: CALL_OW 47
4529: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4530: LD_INT 1
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: LD_INT 0
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: LD_INT 0
4544: PPUSH
4545: LD_VAR 0 9
4549: PPUSH
4550: CALL 2884 0 6
// soldiers_created := soldiers_created + 1 ;
4554: LD_ADDR_LOC 4
4558: PUSH
4559: LD_LOC 4
4563: PUSH
4564: LD_INT 1
4566: PLUS
4567: ST_TO_ADDR
// end ;
4568: GO 4416
4570: POP
4571: POP
// x := start_def [ pos ] [ 1 ] ;
4572: LD_ADDR_VAR 0 4
4576: PUSH
4577: LD_EXP 41
4581: PUSH
4582: LD_VAR 0 3
4586: ARRAY
4587: PUSH
4588: LD_INT 1
4590: ARRAY
4591: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4592: LD_ADDR_VAR 0 5
4596: PUSH
4597: LD_EXP 41
4601: PUSH
4602: LD_VAR 0 3
4606: ARRAY
4607: PUSH
4608: LD_INT 2
4610: ARRAY
4611: ST_TO_ADDR
// if Sheik = 2 and uc_nation = nation_arabian then
4612: LD_EXP 47
4616: PUSH
4617: LD_INT 2
4619: EQUAL
4620: PUSH
4621: LD_OWVAR 21
4625: PUSH
4626: LD_INT 2
4628: EQUAL
4629: AND
4630: IFFALSE 4658
// prepare_people ( 1 , class_desert_warior , x , y , 5 , 0 ) ;
4632: LD_INT 1
4634: PPUSH
4635: LD_INT 11
4637: PPUSH
4638: LD_VAR 0 4
4642: PPUSH
4643: LD_VAR 0 5
4647: PPUSH
4648: LD_INT 5
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: CALL 2884 0 6
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4658: LD_LOC 8
4662: PUSH
4663: LD_EXP 20
4667: MINUS
4668: PPUSH
4669: LD_INT 1
4671: PPUSH
4672: LD_VAR 0 4
4676: PPUSH
4677: LD_VAR 0 5
4681: PPUSH
4682: LD_INT 5
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL 2884 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4692: LD_LOC 5
4696: PPUSH
4697: LD_INT 2
4699: PPUSH
4700: LD_VAR 0 4
4704: PPUSH
4705: LD_VAR 0 5
4709: PPUSH
4710: LD_INT 5
4712: PPUSH
4713: LD_INT 0
4715: PPUSH
4716: CALL 2884 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4720: LD_LOC 7
4724: PPUSH
4725: LD_INT 3
4727: PPUSH
4728: LD_VAR 0 4
4732: PPUSH
4733: LD_VAR 0 5
4737: PPUSH
4738: LD_INT 5
4740: PPUSH
4741: LD_INT 0
4743: PPUSH
4744: CALL 2884 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4748: LD_LOC 6
4752: PPUSH
4753: LD_INT 4
4755: PPUSH
4756: LD_VAR 0 4
4760: PPUSH
4761: LD_VAR 0 5
4765: PPUSH
4766: LD_INT 5
4768: PPUSH
4769: LD_INT 0
4771: PPUSH
4772: CALL 2884 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4776: LD_EXP 10
4780: PUSH
4781: LD_INT 20
4783: PPUSH
4784: LD_VAR 0 1
4788: PPUSH
4789: CALL_OW 321
4793: PUSH
4794: LD_INT 1
4796: EQUAL
4797: AND
4798: IFFALSE 4815
// SetTech ( tech_SibDet , side , state_researched ) ;
4800: LD_INT 20
4802: PPUSH
4803: LD_VAR 0 1
4807: PPUSH
4808: LD_INT 2
4810: PPUSH
4811: CALL_OW 322
// if def_siberite_bomb = 1 then
4815: LD_EXP 13
4819: PUSH
4820: LD_INT 1
4822: EQUAL
4823: IFFALSE 4857
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4825: LD_INT 25
4827: PPUSH
4828: LD_VAR 0 1
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4840: LD_INT 73
4842: PPUSH
4843: LD_VAR 0 1
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: CALL_OW 322
// end else
4855: GO 4887
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4857: LD_INT 25
4859: PPUSH
4860: LD_VAR 0 1
4864: PPUSH
4865: LD_INT 0
4867: PPUSH
4868: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4872: LD_INT 73
4874: PPUSH
4875: LD_VAR 0 1
4879: PPUSH
4880: LD_INT 0
4882: PPUSH
4883: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4887: LD_INT 24
4889: PPUSH
4890: LD_VAR 0 1
4894: PPUSH
4895: LD_INT 0
4897: PPUSH
4898: CALL_OW 322
// global_defined := true ;
4902: LD_ADDR_LOC 3
4906: PUSH
4907: LD_INT 1
4909: ST_TO_ADDR
// end ;
4910: LD_VAR 0 2
4914: RET
// function prepare_sides ; var i ; begin
4915: LD_INT 0
4917: PPUSH
4918: PPUSH
// global_units := [ ] ;
4919: LD_ADDR_LOC 2
4923: PUSH
4924: EMPTY
4925: ST_TO_ADDR
// global_defined := false ;
4926: LD_ADDR_LOC 3
4930: PUSH
4931: LD_INT 0
4933: ST_TO_ADDR
// CountClassMembers ;
4934: CALL 4999 0 0
// for i := 1 to 8 do
4938: LD_ADDR_VAR 0 2
4942: PUSH
4943: DOUBLE
4944: LD_INT 1
4946: DEC
4947: ST_TO_ADDR
4948: LD_INT 8
4950: PUSH
4951: FOR_TO
4952: IFFALSE 4977
// if Side_Positions [ i ] then
4954: LD_EXP 36
4958: PUSH
4959: LD_VAR 0 2
4963: ARRAY
4964: IFFALSE 4975
// prepare_side ( i ) ;
4966: LD_VAR 0 2
4970: PPUSH
4971: CALL 3784 0 1
4975: GO 4951
4977: POP
4978: POP
// if def_mastodont then
4979: LD_EXP 16
4983: IFFALSE 4994
// prepare_mastodonts ( Mastodont ) ;
4985: LD_EXP 48
4989: PPUSH
4990: CALL 3602 0 1
// end ;
4994: LD_VAR 0 1
4998: RET
// function CountClassMembers ; var Mode ; begin
4999: LD_INT 0
5001: PPUSH
5002: PPUSH
// if No_Mechs then
5003: LD_EXP 17
5007: IFFALSE 5019
// Mode := 2 else
5009: LD_ADDR_VAR 0 2
5013: PUSH
5014: LD_INT 2
5016: ST_TO_ADDR
5017: GO 5027
// Mode := 1 ;
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// neng := number_of_people ;
5027: LD_ADDR_LOC 5
5031: PUSH
5032: LD_EXP 21
5036: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5037: LD_ADDR_LOC 8
5041: PUSH
5042: LD_LOC 5
5046: PUSH
5047: LD_INT 4
5049: PUSH
5050: LD_INT 3
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_VAR 0 2
5061: ARRAY
5062: DIV
5063: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5064: LD_LOC 8
5068: PUSH
5069: LD_EXP 20
5073: LESS
5074: IFFALSE 5086
// nsol := number_of_breastworks ;
5076: LD_ADDR_LOC 8
5080: PUSH
5081: LD_EXP 20
5085: ST_TO_ADDR
// neng := neng - nsol ;
5086: LD_ADDR_LOC 5
5090: PUSH
5091: LD_LOC 5
5095: PUSH
5096: LD_LOC 8
5100: MINUS
5101: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5102: LD_ADDR_LOC 6
5106: PUSH
5107: LD_LOC 5
5111: PUSH
5112: LD_INT 3
5114: PUSH
5115: LD_INT 2
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PUSH
5122: LD_VAR 0 2
5126: ARRAY
5127: DIV
5128: ST_TO_ADDR
// if ( nsci < 1 ) then
5129: LD_LOC 6
5133: PUSH
5134: LD_INT 1
5136: LESS
5137: IFFALSE 5147
// nsci := 1 ;
5139: LD_ADDR_LOC 6
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// neng := neng - nsci ;
5147: LD_ADDR_LOC 5
5151: PUSH
5152: LD_LOC 5
5156: PUSH
5157: LD_LOC 6
5161: MINUS
5162: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5163: LD_ADDR_LOC 7
5167: PUSH
5168: LD_LOC 5
5172: PUSH
5173: LD_INT 2
5175: DIV
5176: PUSH
5177: LD_INT 0
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PUSH
5184: LD_VAR 0 2
5188: ARRAY
5189: ST_TO_ADDR
// neng := neng - nmech ;
5190: LD_ADDR_LOC 5
5194: PUSH
5195: LD_LOC 5
5199: PUSH
5200: LD_LOC 7
5204: MINUS
5205: ST_TO_ADDR
// if ( neng < 1 ) then
5206: LD_LOC 5
5210: PUSH
5211: LD_INT 1
5213: LESS
5214: IFFALSE 5224
// neng := 1 ;
5216: LD_ADDR_LOC 5
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// end ;
5224: LD_VAR 0 1
5228: RET
// starting begin disable ( 98 ) ;
5229: LD_INT 98
5231: DISABLE_MARKED
// disable ( 99 ) ;
5232: LD_INT 99
5234: DISABLE_MARKED
// disable ( 400 ) ;
5235: LD_INT 400
5237: DISABLE_MARKED
// disable ( 401 ) ;
5238: LD_INT 401
5240: DISABLE_MARKED
// mp_selectmsg := true ;
5241: LD_ADDR_OWVAR 13
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5249: CALL 68 0 0
// init_map ;
5253: CALL 1307 0 0
// init_respawning ;
5257: CALL 14536 0 0
// set_shared_visions_and_alliances ;
5261: CALL 2596 0 0
// ResetFog ;
5265: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5269: LD_OWVAR 2
5273: PPUSH
5274: CALL_OW 520
// AnimateTrees ( true ) ;
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 573
// prepare_sides ;
5285: CALL 4915 0 0
// Init_Win_Condition ;
5289: CALL 8517 0 0
// ShowTimer ;
5293: CALL 8095 0 0
// music_nat := Side_Nations [ your_side ] ;
5297: LD_ADDR_OWVAR 71
5301: PUSH
5302: LD_EXP 37
5306: PUSH
5307: LD_OWVAR 2
5311: ARRAY
5312: ST_TO_ADDR
// if IAmSpec then
5313: CALL_OW 531
5317: IFFALSE 5341
// begin fogoff ( true ) ;
5319: LD_INT 1
5321: PPUSH
5322: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
5326: LD_INT 130
5328: PPUSH
5329: LD_INT 100
5331: PPUSH
5332: CALL_OW 86
// enable ( 400 ) ;
5336: LD_INT 400
5338: ENABLE_MARKED
// end else
5339: GO 5387
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5341: LD_EXP 41
5345: PUSH
5346: LD_EXP 36
5350: PUSH
5351: LD_OWVAR 2
5355: ARRAY
5356: ARRAY
5357: PUSH
5358: LD_INT 1
5360: ARRAY
5361: PPUSH
5362: LD_EXP 41
5366: PUSH
5367: LD_EXP 36
5371: PUSH
5372: LD_OWVAR 2
5376: ARRAY
5377: ARRAY
5378: PUSH
5379: LD_INT 2
5381: ARRAY
5382: PPUSH
5383: CALL_OW 86
// end ; InitApeman ;
5387: CALL 6625 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
5391: LD_ADDR_EXP 59
5395: PUSH
5396: LD_INT 9
5398: PUSH
5399: LD_INT 10
5401: PUSH
5402: LD_INT 11
5404: PUSH
5405: LD_INT 12
5407: PUSH
5408: LD_INT 13
5410: PUSH
5411: LD_INT 14
5413: PUSH
5414: LD_INT 15
5416: PUSH
5417: LD_INT 16
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: ST_TO_ADDR
// BeginBuildUp ;
5430: CALL 15030 0 0
// end ;
5434: END
// every 0 0$1 do
5435: GO 5437
5437: DISABLE
// if ( def_siberite_bomb > 1 ) then
5438: LD_EXP 13
5442: PUSH
5443: LD_INT 1
5445: GREATER
5446: IFFALSE 5461
// begin wait ( siberite_bomb_Delay ) ;
5448: LD_EXP 31
5452: PPUSH
5453: CALL_OW 67
// EnableSibFiss ;
5457: CALL 5462 0 0
// end ;
5461: END
// function EnableSibFiss ; var i ; begin
5462: LD_INT 0
5464: PPUSH
5465: PPUSH
// for i := 1 to 8 do
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: DOUBLE
5472: LD_INT 1
5474: DEC
5475: ST_TO_ADDR
5476: LD_INT 8
5478: PUSH
5479: FOR_TO
5480: IFFALSE 5526
// if Side_Positions [ i ] then
5482: LD_EXP 36
5486: PUSH
5487: LD_VAR 0 2
5491: ARRAY
5492: IFFALSE 5524
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5494: LD_INT 25
5496: PPUSH
5497: LD_VAR 0 2
5501: PPUSH
5502: LD_INT 1
5504: PPUSH
5505: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5509: LD_INT 73
5511: PPUSH
5512: LD_VAR 0 2
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: CALL_OW 322
// end ;
5524: GO 5479
5526: POP
5527: POP
// end ; end_of_file
5528: LD_VAR 0 1
5532: RET
// every 0 0$25 + 0 0$1.0 do
5533: GO 5535
5535: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5536: LD_INT 22
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: CALL_OW 287
5546: PUSH
5547: LD_INT 200
5549: PUSH
5550: LD_EXP 25
5554: MINUS
5555: PUSH
5556: LD_INT 25
5558: DIVREAL
5559: PUSH
5560: LD_INT 5
5562: MUL
5563: LESS
5564: IFFALSE 5587
// CreateCratesArea ( Rand ( 3 , 4 ) , Between1 , true ) ;
5566: LD_INT 3
5568: PPUSH
5569: LD_INT 4
5571: PPUSH
5572: CALL_OW 12
5576: PPUSH
5577: LD_INT 22
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5587: LD_INT 23
5589: PPUSH
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 287
5597: PUSH
5598: LD_INT 200
5600: PUSH
5601: LD_EXP 25
5605: MINUS
5606: PUSH
5607: LD_INT 25
5609: DIVREAL
5610: PUSH
5611: LD_INT 5
5613: MUL
5614: LESS
5615: IFFALSE 5638
// CreateCratesArea ( Rand ( 3 , 4 ) , Between2 , true ) ;
5617: LD_INT 3
5619: PPUSH
5620: LD_INT 4
5622: PPUSH
5623: CALL_OW 12
5627: PPUSH
5628: LD_INT 23
5630: PPUSH
5631: LD_INT 1
5633: PPUSH
5634: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5638: LD_INT 24
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 287
5648: PUSH
5649: LD_INT 200
5651: PUSH
5652: LD_EXP 25
5656: MINUS
5657: PUSH
5658: LD_INT 25
5660: DIVREAL
5661: PUSH
5662: LD_INT 5
5664: MUL
5665: LESS
5666: IFFALSE 5689
// CreateCratesArea ( Rand ( 3 , 4 ) , Between3 , true ) ;
5668: LD_INT 3
5670: PPUSH
5671: LD_INT 4
5673: PPUSH
5674: CALL_OW 12
5678: PPUSH
5679: LD_INT 24
5681: PPUSH
5682: LD_INT 1
5684: PPUSH
5685: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5689: LD_INT 25
5691: PPUSH
5692: LD_INT 1
5694: PPUSH
5695: CALL_OW 287
5699: PUSH
5700: LD_INT 200
5702: PUSH
5703: LD_EXP 25
5707: MINUS
5708: PUSH
5709: LD_INT 25
5711: DIVREAL
5712: PUSH
5713: LD_INT 5
5715: MUL
5716: LESS
5717: IFFALSE 5740
// CreateCratesArea ( Rand ( 3 , 4 ) , Between4 , true ) ;
5719: LD_INT 3
5721: PPUSH
5722: LD_INT 4
5724: PPUSH
5725: CALL_OW 12
5729: PPUSH
5730: LD_INT 25
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: CALL_OW 55
// if GetResourceArea ( Ring1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5740: LD_INT 26
5742: PPUSH
5743: LD_INT 1
5745: PPUSH
5746: CALL_OW 287
5750: PUSH
5751: LD_INT 200
5753: PUSH
5754: LD_EXP 25
5758: MINUS
5759: PUSH
5760: LD_INT 50
5762: DIVREAL
5763: PUSH
5764: LD_INT 5
5766: MUL
5767: LESS
5768: IFFALSE 5791
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring1 , true ) ;
5770: LD_INT 3
5772: PPUSH
5773: LD_INT 4
5775: PPUSH
5776: CALL_OW 12
5780: PPUSH
5781: LD_INT 26
5783: PPUSH
5784: LD_INT 1
5786: PPUSH
5787: CALL_OW 55
// if GetResourceArea ( Ring2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5791: LD_INT 27
5793: PPUSH
5794: LD_INT 1
5796: PPUSH
5797: CALL_OW 287
5801: PUSH
5802: LD_INT 200
5804: PUSH
5805: LD_EXP 25
5809: MINUS
5810: PUSH
5811: LD_INT 50
5813: DIVREAL
5814: PUSH
5815: LD_INT 5
5817: MUL
5818: LESS
5819: IFFALSE 5842
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring2 , true ) ;
5821: LD_INT 3
5823: PPUSH
5824: LD_INT 4
5826: PPUSH
5827: CALL_OW 12
5831: PPUSH
5832: LD_INT 27
5834: PPUSH
5835: LD_INT 1
5837: PPUSH
5838: CALL_OW 55
// if GetResourceArea ( Ring3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5842: LD_INT 28
5844: PPUSH
5845: LD_INT 1
5847: PPUSH
5848: CALL_OW 287
5852: PUSH
5853: LD_INT 200
5855: PUSH
5856: LD_EXP 25
5860: MINUS
5861: PUSH
5862: LD_INT 50
5864: DIVREAL
5865: PUSH
5866: LD_INT 5
5868: MUL
5869: LESS
5870: IFFALSE 5893
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring3 , true ) ;
5872: LD_INT 3
5874: PPUSH
5875: LD_INT 4
5877: PPUSH
5878: CALL_OW 12
5882: PPUSH
5883: LD_INT 28
5885: PPUSH
5886: LD_INT 1
5888: PPUSH
5889: CALL_OW 55
// if GetResourceArea ( Ring4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5893: LD_INT 29
5895: PPUSH
5896: LD_INT 1
5898: PPUSH
5899: CALL_OW 287
5903: PUSH
5904: LD_INT 200
5906: PUSH
5907: LD_EXP 25
5911: MINUS
5912: PUSH
5913: LD_INT 50
5915: DIVREAL
5916: PUSH
5917: LD_INT 5
5919: MUL
5920: LESS
5921: IFFALSE 5944
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring4 , true ) ;
5923: LD_INT 3
5925: PPUSH
5926: LD_INT 4
5928: PPUSH
5929: CALL_OW 12
5933: PPUSH
5934: LD_INT 29
5936: PPUSH
5937: LD_INT 1
5939: PPUSH
5940: CALL_OW 55
// if GetResourceArea ( MZCenter , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5944: LD_INT 21
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: CALL_OW 287
5954: PUSH
5955: LD_INT 200
5957: PUSH
5958: LD_EXP 25
5962: MINUS
5963: PUSH
5964: LD_INT 25
5966: DIVREAL
5967: PUSH
5968: LD_INT 5
5970: MUL
5971: LESS
5972: IFFALSE 5987
// CreateCratesArea ( 5 , MZCenter , true ) ;
5974: LD_INT 5
5976: PPUSH
5977: LD_INT 21
5979: PPUSH
5980: LD_INT 1
5982: PPUSH
5983: CALL_OW 55
// enable ;
5987: ENABLE
// end ;
5988: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5989: GO 5991
5991: DISABLE
5992: LD_INT 0
5994: PPUSH
5995: PPUSH
// begin case tick of 1 .. 1 1$0 :
5996: LD_OWVAR 1
6000: PUSH
6001: LD_INT 1
6003: DOUBLE
6004: GREATEREQUAL
6005: IFFALSE 6013
6007: LD_INT 2100
6009: DOUBLE
6010: LESSEQUAL
6011: IFTRUE 6015
6013: GO 6043
6015: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
6016: LD_EXP 25
6020: PUSH
6021: LD_INT 100
6023: DIVREAL
6024: PUSH
6025: LD_INT 525
6027: PPUSH
6028: LD_INT 1050
6030: PPUSH
6031: CALL_OW 12
6035: MUL
6036: PPUSH
6037: CALL_OW 67
6041: GO 6345
6043: LD_INT 2100
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: DOUBLE
6050: GREATEREQUAL
6051: IFFALSE 6059
6053: LD_INT 10500
6055: DOUBLE
6056: LESSEQUAL
6057: IFTRUE 6061
6059: GO 6089
6061: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
6062: LD_EXP 25
6066: PUSH
6067: LD_INT 100
6069: DIVREAL
6070: PUSH
6071: LD_INT 1050
6073: PPUSH
6074: LD_INT 1750
6076: PPUSH
6077: CALL_OW 12
6081: MUL
6082: PPUSH
6083: CALL_OW 67
6087: GO 6345
6089: LD_INT 10500
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: DOUBLE
6096: GREATEREQUAL
6097: IFFALSE 6105
6099: LD_INT 21000
6101: DOUBLE
6102: LESSEQUAL
6103: IFTRUE 6107
6105: GO 6135
6107: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
6108: LD_EXP 25
6112: PUSH
6113: LD_INT 100
6115: DIVREAL
6116: PUSH
6117: LD_INT 1750
6119: PPUSH
6120: LD_INT 2100
6122: PPUSH
6123: CALL_OW 12
6127: MUL
6128: PPUSH
6129: CALL_OW 67
6133: GO 6345
6135: LD_INT 21000
6137: PUSH
6138: LD_INT 1
6140: PLUS
6141: DOUBLE
6142: GREATEREQUAL
6143: IFFALSE 6151
6145: LD_INT 42000
6147: DOUBLE
6148: LESSEQUAL
6149: IFTRUE 6153
6151: GO 6181
6153: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6154: LD_EXP 25
6158: PUSH
6159: LD_INT 100
6161: DIVREAL
6162: PUSH
6163: LD_INT 2100
6165: PPUSH
6166: LD_INT 2275
6168: PPUSH
6169: CALL_OW 12
6173: MUL
6174: PPUSH
6175: CALL_OW 67
6179: GO 6345
6181: LD_INT 42000
6183: PUSH
6184: LD_INT 1
6186: PLUS
6187: DOUBLE
6188: GREATEREQUAL
6189: IFFALSE 6197
6191: LD_INT 63000
6193: DOUBLE
6194: LESSEQUAL
6195: IFTRUE 6199
6197: GO 6227
6199: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6200: LD_EXP 25
6204: PUSH
6205: LD_INT 100
6207: DIVREAL
6208: PUSH
6209: LD_INT 2275
6211: PPUSH
6212: LD_INT 2450
6214: PPUSH
6215: CALL_OW 12
6219: MUL
6220: PPUSH
6221: CALL_OW 67
6225: GO 6345
6227: LD_INT 63000
6229: PUSH
6230: LD_INT 1
6232: PLUS
6233: DOUBLE
6234: GREATEREQUAL
6235: IFFALSE 6243
6237: LD_INT 105000
6239: DOUBLE
6240: LESSEQUAL
6241: IFTRUE 6245
6243: GO 6273
6245: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6246: LD_EXP 25
6250: PUSH
6251: LD_INT 100
6253: DIVREAL
6254: PUSH
6255: LD_INT 2450
6257: PPUSH
6258: LD_INT 2800
6260: PPUSH
6261: CALL_OW 12
6265: MUL
6266: PPUSH
6267: CALL_OW 67
6271: GO 6345
6273: LD_INT 105000
6275: PUSH
6276: LD_INT 1
6278: PLUS
6279: DOUBLE
6280: GREATEREQUAL
6281: IFFALSE 6289
6283: LD_INT 630000
6285: DOUBLE
6286: LESSEQUAL
6287: IFTRUE 6291
6289: GO 6319
6291: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
6292: LD_EXP 25
6296: PUSH
6297: LD_INT 100
6299: DIVREAL
6300: PUSH
6301: LD_INT 2800
6303: PPUSH
6304: LD_INT 3500
6306: PPUSH
6307: CALL_OW 12
6311: MUL
6312: PPUSH
6313: CALL_OW 67
6317: GO 6345
6319: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
6320: LD_EXP 25
6324: PUSH
6325: LD_INT 100
6327: DIVREAL
6328: PUSH
6329: LD_INT 3500
6331: PPUSH
6332: LD_INT 3850
6334: PPUSH
6335: CALL_OW 12
6339: MUL
6340: PPUSH
6341: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6345: LD_ADDR_VAR 0 2
6349: PUSH
6350: LD_INT 3
6352: PPUSH
6353: LD_INT 5
6355: PPUSH
6356: CALL_OW 12
6360: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6361: LD_ADDR_VAR 0 1
6365: PUSH
6366: LD_EXP 36
6370: PUSH
6371: LD_INT 0
6373: PUSH
6374: EMPTY
6375: LIST
6376: DIFF
6377: PUSH
6378: FOR_IN
6379: IFFALSE 6428
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
6381: LD_VAR 0 2
6385: PPUSH
6386: LD_EXP 41
6390: PUSH
6391: LD_VAR 0 1
6395: ARRAY
6396: PUSH
6397: LD_INT 1
6399: ARRAY
6400: PPUSH
6401: LD_EXP 41
6405: PUSH
6406: LD_VAR 0 1
6410: ARRAY
6411: PUSH
6412: LD_INT 2
6414: ARRAY
6415: PPUSH
6416: LD_INT 20
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 56
6426: GO 6378
6428: POP
6429: POP
// enable ;
6430: ENABLE
// end ; end_of_file
6431: PPOPN 2
6433: END
// every 20 20$00 trigger apemanNumber do
6434: LD_EXP 50
6438: IFFALSE 6471
6440: GO 6442
6442: DISABLE
// begin enable ;
6443: ENABLE
// if apeLevel >= 8 then
6444: LD_EXP 55
6448: PUSH
6449: LD_INT 8
6451: GREATEREQUAL
6452: IFFALSE 6457
// disable else
6454: DISABLE
6455: GO 6471
// apeLevel := apeLevel + 1 ;
6457: LD_ADDR_EXP 55
6461: PUSH
6462: LD_EXP 55
6466: PUSH
6467: LD_INT 1
6469: PLUS
6470: ST_TO_ADDR
// end ;
6471: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6472: LD_EXP 50
6476: PUSH
6477: LD_EXP 51
6481: LESS
6482: IFFALSE 6622
6484: GO 6486
6486: DISABLE
6487: LD_INT 0
6489: PPUSH
6490: PPUSH
6491: PPUSH
6492: PPUSH
// begin enable ;
6493: ENABLE
// for i := 1 to apemanPos do
6494: LD_ADDR_VAR 0 1
6498: PUSH
6499: DOUBLE
6500: LD_INT 1
6502: DEC
6503: ST_TO_ADDR
6504: LD_EXP 53
6508: PUSH
6509: FOR_TO
6510: IFFALSE 6620
// begin if apemanPlayerCount [ i ] then
6512: LD_EXP 54
6516: PUSH
6517: LD_VAR 0 1
6521: ARRAY
6522: IFFALSE 6618
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6524: LD_EXP 54
6528: PUSH
6529: LD_VAR 0 1
6533: ARRAY
6534: PUSH
6535: LD_EXP 53
6539: PUSH
6540: LD_VAR 0 1
6544: ARRAY
6545: GREATER
6546: IFFALSE 6618
// begin ape := PrepareApeman ;
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: CALL 7141 0 0
6557: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6558: LD_VAR 0 2
6562: PPUSH
6563: LD_EXP 56
6567: PUSH
6568: LD_VAR 0 1
6572: ARRAY
6573: PPUSH
6574: LD_INT 0
6576: PPUSH
6577: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6581: LD_ADDR_EXP 53
6585: PUSH
6586: LD_EXP 53
6590: PPUSH
6591: LD_VAR 0 1
6595: PPUSH
6596: LD_EXP 53
6600: PUSH
6601: LD_VAR 0 1
6605: ARRAY
6606: PUSH
6607: LD_VAR 0 2
6611: UNION
6612: PPUSH
6613: CALL_OW 1
6617: ST_TO_ADDR
// end ; end ; end ;
6618: GO 6509
6620: POP
6621: POP
// end ;
6622: PPOPN 4
6624: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6625: LD_INT 0
6627: PPUSH
6628: PPUSH
6629: PPUSH
6630: PPUSH
6631: PPUSH
6632: PPUSH
6633: PPUSH
// playersAmount := 0 ;
6634: LD_ADDR_VAR 0 3
6638: PUSH
6639: LD_INT 0
6641: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6642: LD_ADDR_VAR 0 7
6646: PUSH
6647: LD_INT 1
6649: PUSH
6650: LD_INT 2
6652: PUSH
6653: LD_INT 3
6655: PUSH
6656: LD_INT 4
6658: PUSH
6659: LD_INT 5
6661: PUSH
6662: LD_INT 6
6664: PUSH
6665: LD_INT 7
6667: PUSH
6668: LD_INT 8
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6681: LD_ADDR_EXP 56
6685: PUSH
6686: LD_INT 0
6688: PUSH
6689: LD_INT 0
6691: PUSH
6692: LD_INT 0
6694: PUSH
6695: LD_INT 0
6697: PUSH
6698: LD_INT 0
6700: PUSH
6701: LD_INT 0
6703: PUSH
6704: LD_INT 0
6706: PUSH
6707: LD_INT 0
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: ST_TO_ADDR
// for j = 1 to Side_Positions do
6720: LD_ADDR_VAR 0 4
6724: PUSH
6725: DOUBLE
6726: LD_INT 1
6728: DEC
6729: ST_TO_ADDR
6730: LD_EXP 36
6734: PUSH
6735: FOR_TO
6736: IFFALSE 6803
// if Side_Positions [ j ] then
6738: LD_EXP 36
6742: PUSH
6743: LD_VAR 0 4
6747: ARRAY
6748: IFFALSE 6801
// begin playersAmount := playersAmount + 1 ;
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_VAR 0 3
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6764: LD_ADDR_EXP 56
6768: PUSH
6769: LD_EXP 56
6773: PPUSH
6774: LD_VAR 0 4
6778: PPUSH
6779: LD_VAR 0 7
6783: PUSH
6784: LD_EXP 36
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: ARRAY
6795: PPUSH
6796: CALL_OW 1
6800: ST_TO_ADDR
// end ;
6801: GO 6735
6803: POP
6804: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6805: LD_ADDR_EXP 52
6809: PUSH
6810: LD_INT 3
6812: PUSH
6813: LD_EXP 27
6817: MUL
6818: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6819: LD_ADDR_EXP 50
6823: PUSH
6824: LD_VAR 0 3
6828: PUSH
6829: LD_EXP 52
6833: MUL
6834: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6835: LD_ADDR_EXP 51
6839: PUSH
6840: LD_EXP 50
6844: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6845: LD_ADDR_EXP 53
6849: PUSH
6850: LD_INT 0
6852: PUSH
6853: LD_INT 0
6855: PUSH
6856: LD_INT 0
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: LD_INT 0
6864: PUSH
6865: LD_INT 0
6867: PUSH
6868: LD_INT 0
6870: PUSH
6871: LD_INT 0
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6884: LD_ADDR_EXP 54
6888: PUSH
6889: LD_INT 0
6891: PUSH
6892: LD_INT 0
6894: PUSH
6895: LD_INT 0
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: LD_INT 0
6903: PUSH
6904: LD_INT 0
6906: PUSH
6907: LD_INT 0
6909: PUSH
6910: LD_INT 0
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: ST_TO_ADDR
// apeLevel := 1 ;
6923: LD_ADDR_EXP 55
6927: PUSH
6928: LD_INT 1
6930: ST_TO_ADDR
// if not apemanNumber then
6931: LD_EXP 50
6935: NOT
6936: IFFALSE 6940
// exit ;
6938: GO 7136
// for i := 1 to apemanPerPlayer do
6940: LD_ADDR_VAR 0 2
6944: PUSH
6945: DOUBLE
6946: LD_INT 1
6948: DEC
6949: ST_TO_ADDR
6950: LD_EXP 52
6954: PUSH
6955: FOR_TO
6956: IFFALSE 7134
// begin for j := 1 to Side_Positions do
6958: LD_ADDR_VAR 0 4
6962: PUSH
6963: DOUBLE
6964: LD_INT 1
6966: DEC
6967: ST_TO_ADDR
6968: LD_EXP 36
6972: PUSH
6973: FOR_TO
6974: IFFALSE 7130
// if Side_Positions [ j ] then
6976: LD_EXP 36
6980: PUSH
6981: LD_VAR 0 4
6985: ARRAY
6986: IFFALSE 7128
// begin pos := Side_Positions [ j ] ;
6988: LD_ADDR_VAR 0 6
6992: PUSH
6993: LD_EXP 36
6997: PUSH
6998: LD_VAR 0 4
7002: ARRAY
7003: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7004: LD_ADDR_EXP 54
7008: PUSH
7009: LD_EXP 54
7013: PPUSH
7014: LD_VAR 0 4
7018: PPUSH
7019: LD_EXP 54
7023: PUSH
7024: LD_VAR 0 4
7028: ARRAY
7029: PUSH
7030: LD_INT 1
7032: PLUS
7033: PPUSH
7034: CALL_OW 1
7038: ST_TO_ADDR
// ape := PrepareApeman ;
7039: LD_ADDR_VAR 0 5
7043: PUSH
7044: CALL 7141 0 0
7048: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7049: LD_ADDR_EXP 53
7053: PUSH
7054: LD_EXP 53
7058: PPUSH
7059: LD_VAR 0 4
7063: PPUSH
7064: LD_EXP 53
7068: PUSH
7069: LD_VAR 0 4
7073: ARRAY
7074: PPUSH
7075: LD_EXP 53
7079: PUSH
7080: LD_VAR 0 4
7084: ARRAY
7085: PUSH
7086: LD_INT 1
7088: PLUS
7089: PPUSH
7090: LD_VAR 0 5
7094: PPUSH
7095: CALL_OW 1
7099: PPUSH
7100: CALL_OW 1
7104: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7105: LD_VAR 0 5
7109: PPUSH
7110: LD_EXP 56
7114: PUSH
7115: LD_VAR 0 4
7119: ARRAY
7120: PPUSH
7121: LD_INT 0
7123: PPUSH
7124: CALL_OW 49
// end ;
7128: GO 6973
7130: POP
7131: POP
// end ;
7132: GO 6955
7134: POP
7135: POP
// end ;
7136: LD_VAR 0 1
7140: RET
// export function PrepareApeman ; var bonus ; begin
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
// uc_side := 0 ;
7145: LD_ADDR_OWVAR 20
7149: PUSH
7150: LD_INT 0
7152: ST_TO_ADDR
// uc_nation := 0 ;
7153: LD_ADDR_OWVAR 21
7157: PUSH
7158: LD_INT 0
7160: ST_TO_ADDR
// InitHc ;
7161: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_INT 1
7172: NEG
7173: PUSH
7174: LD_INT 0
7176: PUSH
7177: LD_INT 1
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 25
7187: PUSH
7188: LD_INT 12
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PPUSH
7195: CALL_OW 69
7199: PUSH
7200: LD_INT 3
7202: MOD
7203: PUSH
7204: LD_INT 1
7206: PLUS
7207: ARRAY
7208: ST_TO_ADDR
// hc_class := class_apeman ;
7209: LD_ADDR_OWVAR 28
7213: PUSH
7214: LD_INT 12
7216: ST_TO_ADDR
// hc_gallery :=  ;
7217: LD_ADDR_OWVAR 33
7221: PUSH
7222: LD_STRING 
7224: ST_TO_ADDR
// hc_name :=  ;
7225: LD_ADDR_OWVAR 26
7229: PUSH
7230: LD_STRING 
7232: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7233: LD_ADDR_OWVAR 31
7237: PUSH
7238: LD_EXP 55
7242: PUSH
7243: LD_VAR 0 2
7247: PLUS
7248: PUSH
7249: LD_EXP 55
7253: PUSH
7254: LD_VAR 0 2
7258: PLUS
7259: PUSH
7260: LD_EXP 55
7264: PUSH
7265: LD_VAR 0 2
7269: PLUS
7270: PUSH
7271: LD_EXP 55
7275: PUSH
7276: LD_VAR 0 2
7280: PLUS
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7288: LD_ADDR_OWVAR 35
7292: PUSH
7293: LD_INT 10
7295: PUSH
7296: LD_VAR 0 2
7300: MUL
7301: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7302: LD_ADDR_OWVAR 29
7306: PUSH
7307: LD_INT 12
7309: PUSH
7310: LD_INT 12
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: ST_TO_ADDR
// result := CreateHuman ;
7317: LD_ADDR_VAR 0 1
7321: PUSH
7322: CALL_OW 44
7326: ST_TO_ADDR
// end ;
7327: LD_VAR 0 1
7331: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
7332: LD_INT 0
7334: PPUSH
7335: PPUSH
7336: PPUSH
// if not ape then
7337: LD_VAR 0 1
7341: NOT
7342: IFFALSE 7346
// exit ;
7344: GO 7449
// for i = 1 to apemanPos do
7346: LD_ADDR_VAR 0 4
7350: PUSH
7351: DOUBLE
7352: LD_INT 1
7354: DEC
7355: ST_TO_ADDR
7356: LD_EXP 53
7360: PUSH
7361: FOR_TO
7362: IFFALSE 7396
// if ape in apemanPos [ i ] then
7364: LD_VAR 0 1
7368: PUSH
7369: LD_EXP 53
7373: PUSH
7374: LD_VAR 0 4
7378: ARRAY
7379: IN
7380: IFFALSE 7394
// begin s := i ;
7382: LD_ADDR_VAR 0 3
7386: PUSH
7387: LD_VAR 0 4
7391: ST_TO_ADDR
// break ;
7392: GO 7396
// end ;
7394: GO 7361
7396: POP
7397: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
7398: LD_ADDR_EXP 53
7402: PUSH
7403: LD_EXP 53
7407: PPUSH
7408: LD_VAR 0 3
7412: PPUSH
7413: LD_EXP 53
7417: PUSH
7418: LD_VAR 0 3
7422: ARRAY
7423: PUSH
7424: LD_VAR 0 1
7428: DIFF
7429: PPUSH
7430: CALL_OW 1
7434: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7435: LD_ADDR_EXP 50
7439: PUSH
7440: LD_EXP 50
7444: PUSH
7445: LD_INT 1
7447: MINUS
7448: ST_TO_ADDR
// end ; end_of_file
7449: LD_VAR 0 2
7453: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7454: LD_VAR 0 1
7458: PPUSH
7459: CALL_OW 266
7463: PUSH
7464: LD_INT 0
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: IN
7474: IFFALSE 7499
// SetBName ( b , @ & GetSide ( b ) ) ;
7476: LD_VAR 0 1
7480: PPUSH
7481: LD_STRING @
7483: PUSH
7484: LD_VAR 0 1
7488: PPUSH
7489: CALL_OW 255
7493: STR
7494: PPUSH
7495: CALL_OW 500
// end ;
7499: PPOPN 2
7501: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7502: LD_VAR 0 1
7506: PPUSH
7507: CALL_OW 266
7511: PUSH
7512: LD_INT 0
7514: PUSH
7515: LD_INT 1
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: IN
7522: IFFALSE 7547
// SetBName ( b , @ & GetSide ( b ) ) ;
7524: LD_VAR 0 1
7528: PPUSH
7529: LD_STRING @
7531: PUSH
7532: LD_VAR 0 1
7536: PPUSH
7537: CALL_OW 255
7541: STR
7542: PPUSH
7543: CALL_OW 500
// end ;
7547: PPOPN 3
7549: END
// on VehicleConstructed ( veh , fac ) do var side ;
7550: LD_INT 0
7552: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7553: LD_VAR 0 1
7557: PPUSH
7558: CALL_OW 263
7562: PUSH
7563: LD_INT 5
7565: EQUAL
7566: IFFALSE 7708
// begin side := GetSide ( veh ) ;
7568: LD_ADDR_VAR 0 3
7572: PUSH
7573: LD_VAR 0 1
7577: PPUSH
7578: CALL_OW 255
7582: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7583: LD_ADDR_EXP 53
7587: PUSH
7588: LD_EXP 53
7592: PPUSH
7593: LD_VAR 0 3
7597: PPUSH
7598: LD_EXP 53
7602: PUSH
7603: LD_VAR 0 3
7607: ARRAY
7608: PPUSH
7609: LD_INT 52
7611: PUSH
7612: EMPTY
7613: LIST
7614: PPUSH
7615: CALL_OW 72
7619: PUSH
7620: LD_INT 22
7622: PUSH
7623: LD_VAR 0 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 33
7637: PUSH
7638: LD_INT 5
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 25
7647: PUSH
7648: LD_INT 12
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 25
7657: PUSH
7658: LD_INT 15
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 25
7667: PUSH
7668: LD_INT 16
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: LD_INT 25
7677: PUSH
7678: LD_INT 17
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PPUSH
7697: CALL_OW 69
7701: UNION
7702: PPUSH
7703: CALL_OW 1
7707: ST_TO_ADDR
// end ; end ;
7708: PPOPN 3
7710: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7711: LD_INT 0
7713: PPUSH
7714: PPUSH
7715: PPUSH
7716: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7717: LD_VAR 0 1
7721: PPUSH
7722: CALL_OW 257
7726: PUSH
7727: LD_INT 12
7729: PUSH
7730: LD_INT 15
7732: PUSH
7733: LD_INT 17
7735: PUSH
7736: LD_INT 16
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: IN
7745: PUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 263
7755: PUSH
7756: LD_INT 5
7758: EQUAL
7759: OR
7760: IFFALSE 7771
// ApeKilled ( j ) ;
7762: LD_VAR 0 1
7766: PPUSH
7767: CALL 7332 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 266
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: LD_INT 1
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: IN
7791: IFFALSE 7873
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7793: LD_ADDR_VAR 0 4
7797: PUSH
7798: LD_EXP 36
7802: PUSH
7803: LD_VAR 0 1
7807: PPUSH
7808: CALL_OW 255
7812: ARRAY
7813: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7814: LD_ADDR_VAR 0 2
7818: PUSH
7819: LD_EXP 41
7823: PUSH
7824: LD_VAR 0 4
7828: ARRAY
7829: PUSH
7830: LD_INT 1
7832: ARRAY
7833: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7834: LD_ADDR_VAR 0 3
7838: PUSH
7839: LD_EXP 41
7843: PUSH
7844: LD_VAR 0 4
7848: ARRAY
7849: PUSH
7850: LD_INT 2
7852: ARRAY
7853: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7854: LD_VAR 0 2
7858: PPUSH
7859: LD_VAR 0 3
7863: PPUSH
7864: CALL_OW 420
7868: PPUSH
7869: CALL_OW 419
// end ; end ;
7873: PPOPN 5
7875: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7876: LD_VAR 0 1
7880: PPUSH
7881: LD_VAR 0 2
7885: PPUSH
7886: LD_VAR 0 3
7890: PPUSH
7891: LD_OWVAR 2
7895: PPUSH
7896: CALL 8278 0 4
7900: PPOPN 3
7902: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7903: LD_INT 0
7905: PPUSH
7906: PPUSH
// for un in battle_flags_id do
7907: LD_ADDR_VAR 0 2
7911: PUSH
7912: LD_EXP 46
7916: PUSH
7917: FOR_IN
7918: IFFALSE 7993
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7920: LD_VAR 0 2
7924: PPUSH
7925: LD_INT 1
7927: PUSH
7928: LD_LOC 9
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 2
7939: PUSH
7940: LD_LOC 9
7944: PUSH
7945: LD_INT 2
7947: DIV
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PUSH
7953: LD_INT 3
7955: PUSH
7956: LD_LOC 9
7960: PUSH
7961: LD_INT 5
7963: DIV
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: LD_INT 20
7971: PUSH
7972: LD_LOC 9
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: PPUSH
7987: CALL_OW 423
7991: GO 7917
7993: POP
7994: POP
// end ;
7995: LD_VAR 0 1
7999: RET
// every 1 do var un ;
8000: GO 8002
8002: DISABLE
8003: LD_INT 0
8005: PPUSH
// begin if not def_morale_flags then
8006: LD_EXP 9
8010: NOT
8011: IFFALSE 8015
// exit ;
8013: GO 8092
// if not morale_decreasing_time then
8015: LD_EXP 26
8019: NOT
8020: IFFALSE 8024
// exit ;
8022: GO 8092
// strength = 100 ;
8024: LD_ADDR_LOC 9
8028: PUSH
8029: LD_INT 100
8031: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8032: LD_EXP 26
8036: PPUSH
8037: CALL_OW 67
// strength := strength - 1 ;
8041: LD_ADDR_LOC 9
8045: PUSH
8046: LD_LOC 9
8050: PUSH
8051: LD_INT 1
8053: MINUS
8054: ST_TO_ADDR
// Update_Flags ;
8055: CALL 7903 0 0
// until not strength ;
8059: LD_LOC 9
8063: NOT
8064: IFFALSE 8032
// for un in battle_flags_id do
8066: LD_ADDR_VAR 0 1
8070: PUSH
8071: LD_EXP 46
8075: PUSH
8076: FOR_IN
8077: IFFALSE 8090
// KillBattleFlag ( un ) ;
8079: LD_VAR 0 1
8083: PPUSH
8084: CALL_OW 419
8088: GO 8076
8090: POP
8091: POP
// end ; end_of_file
8092: PPOPN 1
8094: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
8095: LD_INT 0
8097: PPUSH
8098: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
8099: LD_ADDR_VAR 0 2
8103: PUSH
8104: LD_STRING #Multi1x1-Time
8106: PUSH
8107: LD_OWVAR 1
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: ST_TO_ADDR
// if WaitServerStrings then
8116: LD_EXP 58
8120: IFFALSE 8138
// AllStrings = AllStrings ^ WaitServerStrings ;
8122: LD_ADDR_VAR 0 2
8126: PUSH
8127: LD_VAR 0 2
8131: PUSH
8132: LD_EXP 58
8136: ADD
8137: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8138: LD_INT 0
8140: PUSH
8141: LD_EXP 31
8145: PUSH
8146: LD_OWVAR 1
8150: MINUS
8151: LESSEQUAL
8152: IFFALSE 8183
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8154: LD_ADDR_VAR 0 2
8158: PUSH
8159: LD_VAR 0 2
8163: PUSH
8164: LD_STRING #allowedsibbomb
8166: PUSH
8167: LD_EXP 31
8171: PUSH
8172: LD_OWVAR 1
8176: MINUS
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: ADD
8182: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8183: LD_INT 0
8185: PUSH
8186: LD_EXP 61
8190: PUSH
8191: LD_OWVAR 1
8195: MINUS
8196: LESSEQUAL
8197: IFFALSE 8228
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
8199: LD_ADDR_VAR 0 2
8203: PUSH
8204: LD_VAR 0 2
8208: PUSH
8209: LD_STRING #builduptime
8211: PUSH
8212: LD_EXP 61
8216: PUSH
8217: LD_OWVAR 1
8221: MINUS
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: ADD
8227: ST_TO_ADDR
// if ( ExtraStrings ) then
8228: LD_EXP 57
8232: IFFALSE 8254
// AllStrings := AllStrings ^  ^ ExtraStrings ;
8234: LD_ADDR_VAR 0 2
8238: PUSH
8239: LD_VAR 0 2
8243: PUSH
8244: LD_STRING 
8246: ADD
8247: PUSH
8248: LD_EXP 57
8252: ADD
8253: ST_TO_ADDR
// Display_Strings := AllStrings ;
8254: LD_ADDR_OWVAR 47
8258: PUSH
8259: LD_VAR 0 2
8263: ST_TO_ADDR
// end ;
8264: LD_VAR 0 1
8268: RET
// every 0 0$1 do
8269: GO 8271
8271: DISABLE
// begin ShowTimer ;
8272: CALL 8095 0 0
// enable ;
8276: ENABLE
// end ; end_of_file
8277: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8278: LD_INT 0
8280: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8281: LD_VAR 0 1
8285: PPUSH
8286: CALL_OW 255
8290: PUSH
8291: LD_VAR 0 4
8295: EQUAL
8296: IFFALSE 8315
// begin SetAchievement ( ACH_RAD ) ;
8298: LD_STRING ACH_RAD
8300: PPUSH
8301: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8305: LD_STRING ACH_NL
8307: PPUSH
8308: LD_INT 1
8310: PPUSH
8311: CALL_OW 564
// end end ;
8315: LD_VAR 0 5
8319: RET
// export function SA_Win ( side ) ; begin
8320: LD_INT 0
8322: PPUSH
// case side of 1 :
8323: LD_VAR 0 1
8327: PUSH
8328: LD_INT 1
8330: DOUBLE
8331: EQUAL
8332: IFTRUE 8336
8334: GO 8349
8336: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8337: LD_STRING ACH_AH
8339: PPUSH
8340: LD_INT 1
8342: PPUSH
8343: CALL_OW 564
8347: GO 8512
8349: LD_INT 2
8351: DOUBLE
8352: EQUAL
8353: IFTRUE 8357
8355: GO 8370
8357: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8358: LD_STRING ACH_E
8360: PPUSH
8361: LD_INT 1
8363: PPUSH
8364: CALL_OW 564
8368: GO 8512
8370: LD_INT 3
8372: DOUBLE
8373: EQUAL
8374: IFTRUE 8378
8376: GO 8391
8378: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8379: LD_STRING ACH_OOL
8381: PPUSH
8382: LD_INT 1
8384: PPUSH
8385: CALL_OW 564
8389: GO 8512
8391: LD_INT 1
8393: PUSH
8394: LD_INT 2
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: DOUBLE
8401: EQUAL
8402: IFTRUE 8406
8404: GO 8431
8406: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8407: LD_STRING ACH_AH
8409: PPUSH
8410: LD_REAL  5.00000000000000E-0001
8413: PPUSH
8414: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8418: LD_STRING ACH_E
8420: PPUSH
8421: LD_REAL  5.00000000000000E-0001
8424: PPUSH
8425: CALL_OW 564
// end ; [ 2 , 3 ] :
8429: GO 8512
8431: LD_INT 2
8433: PUSH
8434: LD_INT 3
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: DOUBLE
8441: EQUAL
8442: IFTRUE 8446
8444: GO 8471
8446: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8447: LD_STRING ACH_OOL
8449: PPUSH
8450: LD_REAL  5.00000000000000E-0001
8453: PPUSH
8454: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8458: LD_STRING ACH_E
8460: PPUSH
8461: LD_REAL  5.00000000000000E-0001
8464: PPUSH
8465: CALL_OW 564
// end ; [ 3 , 1 ] :
8469: GO 8512
8471: LD_INT 3
8473: PUSH
8474: LD_INT 1
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: DOUBLE
8481: EQUAL
8482: IFTRUE 8486
8484: GO 8511
8486: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8487: LD_STRING ACH_AH
8489: PPUSH
8490: LD_REAL  5.00000000000000E-0001
8493: PPUSH
8494: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8498: LD_STRING ACH_OOL
8500: PPUSH
8501: LD_REAL  5.00000000000000E-0001
8504: PPUSH
8505: CALL_OW 564
// end ; end ;
8509: GO 8512
8511: POP
// end ; end_of_file
8512: LD_VAR 0 2
8516: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8517: LD_INT 0
8519: PPUSH
8520: PPUSH
// enable ( 98 ) ;
8521: LD_INT 98
8523: ENABLE_MARKED
// GameEnded = false ;
8524: LD_ADDR_LOC 15
8528: PUSH
8529: LD_INT 0
8531: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8532: LD_ADDR_LOC 14
8536: PUSH
8537: LD_INT 0
8539: PUSH
8540: LD_INT 0
8542: PUSH
8543: LD_INT 0
8545: PUSH
8546: LD_INT 0
8548: PUSH
8549: LD_INT 0
8551: PUSH
8552: LD_INT 0
8554: PUSH
8555: LD_INT 0
8557: PUSH
8558: LD_INT 0
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: ST_TO_ADDR
// unfoged = false ;
8571: LD_ADDR_LOC 16
8575: PUSH
8576: LD_INT 0
8578: ST_TO_ADDR
// defeated_specs := [ ] ;
8579: LD_ADDR_LOC 17
8583: PUSH
8584: EMPTY
8585: ST_TO_ADDR
// for i = 1 to side_positions do
8586: LD_ADDR_VAR 0 2
8590: PUSH
8591: DOUBLE
8592: LD_INT 1
8594: DEC
8595: ST_TO_ADDR
8596: LD_EXP 36
8600: PUSH
8601: FOR_TO
8602: IFFALSE 8642
// if not side_positions [ i ] then
8604: LD_EXP 36
8608: PUSH
8609: LD_VAR 0 2
8613: ARRAY
8614: NOT
8615: IFFALSE 8640
// defeated = replace ( defeated , i , true ) ;
8617: LD_ADDR_LOC 14
8621: PUSH
8622: LD_LOC 14
8626: PPUSH
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_INT 1
8634: PPUSH
8635: CALL_OW 1
8639: ST_TO_ADDR
8640: GO 8601
8642: POP
8643: POP
// end ;
8644: LD_VAR 0 1
8648: RET
// function CanWinLoose ; begin
8649: LD_INT 0
8651: PPUSH
// Result := true ;
8652: LD_ADDR_VAR 0 1
8656: PUSH
8657: LD_INT 1
8659: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8660: CALL_OW 518
8664: PUSH
8665: CALL_OW 519
8669: PUSH
8670: LD_INT 0
8672: GREATER
8673: AND
8674: IFFALSE 8684
// Result := false ;
8676: LD_ADDR_VAR 0 1
8680: PUSH
8681: LD_INT 0
8683: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8684: CALL_OW 531
8688: PUSH
8689: CALL_OW 519
8693: PUSH
8694: LD_INT 1
8696: GREATER
8697: AND
8698: IFFALSE 8708
// Result := false ;
8700: LD_ADDR_VAR 0 1
8704: PUSH
8705: LD_INT 0
8707: ST_TO_ADDR
// end ;
8708: LD_VAR 0 1
8712: RET
// export function HasPower ( i ) ; var k , h ; begin
8713: LD_INT 0
8715: PPUSH
8716: PPUSH
8717: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8718: LD_VAR 0 1
8722: PPUSH
8723: CALL_OW 108
8727: NOT
8728: PUSH
8729: LD_EXP 35
8733: PUSH
8734: LD_VAR 0 1
8738: ARRAY
8739: NOT
8740: AND
8741: PUSH
8742: LD_OWVAR 4
8746: AND
8747: IFFALSE 8759
// begin result = false ;
8749: LD_ADDR_VAR 0 2
8753: PUSH
8754: LD_INT 0
8756: ST_TO_ADDR
// end else
8757: GO 9054
// case def_win_rules of 0 :
8759: LD_EXP 32
8763: PUSH
8764: LD_INT 0
8766: DOUBLE
8767: EQUAL
8768: IFTRUE 8772
8770: GO 8935
8772: POP
// if def_people_respawning then
8773: LD_EXP 11
8777: IFFALSE 8868
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8779: LD_ADDR_VAR 0 2
8783: PUSH
8784: LD_INT 22
8786: PUSH
8787: LD_VAR 0 1
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: LD_INT 2
8798: PUSH
8799: LD_INT 21
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 33
8811: PUSH
8812: LD_INT 3
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 33
8821: PUSH
8822: LD_INT 5
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_INT 30
8831: PUSH
8832: LD_INT 0
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 30
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PPUSH
8861: CALL_OW 69
8865: ST_TO_ADDR
8866: GO 8933
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8868: LD_ADDR_VAR 0 2
8872: PUSH
8873: LD_INT 22
8875: PUSH
8876: LD_VAR 0 1
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: PUSH
8885: LD_INT 2
8887: PUSH
8888: LD_INT 21
8890: PUSH
8891: LD_INT 1
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 33
8900: PUSH
8901: LD_INT 3
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 33
8910: PUSH
8911: LD_INT 5
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PPUSH
8928: CALL_OW 69
8932: ST_TO_ADDR
8933: GO 9054
8935: LD_INT 1
8937: DOUBLE
8938: EQUAL
8939: IFTRUE 8943
8941: GO 8982
8943: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_INT 22
8951: PUSH
8952: LD_VAR 0 1
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 21
8963: PUSH
8964: LD_INT 1
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PPUSH
8975: CALL_OW 69
8979: ST_TO_ADDR
8980: GO 9054
8982: LD_INT 2
8984: DOUBLE
8985: EQUAL
8986: IFTRUE 8990
8988: GO 9053
8990: POP
// begin h = false ;
8991: LD_ADDR_VAR 0 4
8995: PUSH
8996: LD_INT 0
8998: ST_TO_ADDR
// for k in heroes [ i ] do
8999: LD_ADDR_VAR 0 3
9003: PUSH
9004: LD_EXP 49
9008: PUSH
9009: LD_VAR 0 1
9013: ARRAY
9014: PUSH
9015: FOR_IN
9016: IFFALSE 9039
// if IsLive ( k ) then
9018: LD_VAR 0 3
9022: PPUSH
9023: CALL_OW 300
9027: IFFALSE 9037
// h = true ;
9029: LD_ADDR_VAR 0 4
9033: PUSH
9034: LD_INT 1
9036: ST_TO_ADDR
9037: GO 9015
9039: POP
9040: POP
// Result := h ;
9041: LD_ADDR_VAR 0 2
9045: PUSH
9046: LD_VAR 0 4
9050: ST_TO_ADDR
// end ; end ;
9051: GO 9054
9053: POP
// end ;
9054: LD_VAR 0 2
9058: RET
// function AlliedSides ( i , j ) ; begin
9059: LD_INT 0
9061: PPUSH
// Result := false ;
9062: LD_ADDR_VAR 0 3
9066: PUSH
9067: LD_INT 0
9069: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9070: LD_VAR 0 1
9074: PPUSH
9075: LD_VAR 0 2
9079: PPUSH
9080: CALL_OW 81
9084: PUSH
9085: LD_INT 1
9087: EQUAL
9088: PUSH
9089: LD_VAR 0 2
9093: PPUSH
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL_OW 81
9103: PUSH
9104: LD_INT 1
9106: EQUAL
9107: AND
9108: PUSH
9109: LD_VAR 0 1
9113: PPUSH
9114: CALL_OW 83
9118: AND
9119: PUSH
9120: LD_VAR 0 2
9124: PPUSH
9125: CALL_OW 83
9129: AND
9130: IFFALSE 9140
// Result := true ;
9132: LD_ADDR_VAR 0 3
9136: PUSH
9137: LD_INT 1
9139: ST_TO_ADDR
// end ;
9140: LD_VAR 0 3
9144: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9145: CALL 8649 0 0
9149: PUSH
9150: LD_LOC 15
9154: NOT
9155: AND
9156: IFFALSE 9172
9158: GO 9160
9160: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9161: LD_ADDR_EXP 58
9165: PUSH
9166: LD_STRING #Player-Ended
9168: PUSH
9169: EMPTY
9170: LIST
9171: ST_TO_ADDR
9172: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9173: CALL 8649 0 0
9177: PUSH
9178: LD_LOC 15
9182: AND
9183: IFFALSE 9192
9185: GO 9187
9187: DISABLE
// YouLostInMultiplayer ;
9188: CALL_OW 107
9192: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9193: CALL 8649 0 0
9197: NOT
9198: PUSH
9199: CALL_OW 531
9203: NOT
9204: AND
9205: IFFALSE 9221
9207: GO 9209
9209: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9210: LD_ADDR_EXP 58
9214: PUSH
9215: LD_STRING #server-wait
9217: PUSH
9218: EMPTY
9219: LIST
9220: ST_TO_ADDR
9221: END
// every 100 trigger IAmSpec do
9222: CALL_OW 531
9226: IFFALSE 9242
9228: GO 9230
9230: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9231: LD_ADDR_EXP 58
9235: PUSH
9236: LD_STRING #Player-IAmSpec
9238: PUSH
9239: EMPTY
9240: LIST
9241: ST_TO_ADDR
9242: END
// every 100 trigger GameEnded and IAmSpec do
9243: LD_LOC 15
9247: PUSH
9248: CALL_OW 531
9252: AND
9253: IFFALSE 9262
9255: GO 9257
9257: DISABLE
// YouLostInMultiplayer ;
9258: CALL_OW 107
9262: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9263: CALL 8649 0 0
9267: PUSH
9268: LD_LOC 15
9272: NOT
9273: AND
9274: IFFALSE 9290
9276: GO 9278
9278: DISABLE
// WaitServerStrings = [ $player-win ] ;
9279: LD_ADDR_EXP 58
9283: PUSH
9284: LD_STRING $player-win
9286: PUSH
9287: EMPTY
9288: LIST
9289: ST_TO_ADDR
9290: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9291: CALL 8649 0 0
9295: PUSH
9296: LD_LOC 15
9300: AND
9301: IFFALSE 9325
9303: GO 9305
9305: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9306: LD_EXP 37
9310: PUSH
9311: LD_OWVAR 7
9315: ARRAY
9316: PPUSH
9317: CALL 8320 0 1
// YouWinInMultiplayer ;
9321: CALL_OW 106
// end ;
9325: END
// every 100 trigger isEditor marked 401 do
9326: LD_OWVAR 84
9330: IFFALSE 9346
9332: GO 9334
9334: DISABLE
// Debug_Strings = [ You won ] ;
9335: LD_ADDR_OWVAR 48
9339: PUSH
9340: LD_STRING You won
9342: PUSH
9343: EMPTY
9344: LIST
9345: ST_TO_ADDR
9346: END
// every 100 trigger isEditor marked 400 do
9347: LD_OWVAR 84
9351: IFFALSE 9367
9353: GO 9355
9355: DISABLE
// Debug_Strings = [ You loss ] ;
9356: LD_ADDR_OWVAR 48
9360: PUSH
9361: LD_STRING You loss
9363: PUSH
9364: EMPTY
9365: LIST
9366: ST_TO_ADDR
9367: END
// every 100 marked 98 do var i , un ;
9368: GO 9370
9370: DISABLE
9371: LD_INT 0
9373: PPUSH
9374: PPUSH
// begin for i = 1 to side_positions do
9375: LD_ADDR_VAR 0 1
9379: PUSH
9380: DOUBLE
9381: LD_INT 1
9383: DEC
9384: ST_TO_ADDR
9385: LD_EXP 36
9389: PUSH
9390: FOR_TO
9391: IFFALSE 9478
// begin if side_positions [ i ] then
9393: LD_EXP 36
9397: PUSH
9398: LD_VAR 0 1
9402: ARRAY
9403: IFFALSE 9476
// if not HasPower ( i ) and not defeated [ i ] then
9405: LD_VAR 0 1
9409: PPUSH
9410: CALL 8713 0 1
9414: NOT
9415: PUSH
9416: LD_LOC 14
9420: PUSH
9421: LD_VAR 0 1
9425: ARRAY
9426: NOT
9427: AND
9428: IFFALSE 9476
// begin defeated = replace ( defeated , i , true ) ;
9430: LD_ADDR_LOC 14
9434: PUSH
9435: LD_LOC 14
9439: PPUSH
9440: LD_VAR 0 1
9444: PPUSH
9445: LD_INT 1
9447: PPUSH
9448: CALL_OW 1
9452: ST_TO_ADDR
// if i = mp_player_side then
9453: LD_VAR 0 1
9457: PUSH
9458: LD_OWVAR 7
9462: EQUAL
9463: IFFALSE 9476
// begin Multiplayer_Loose_Message ;
9465: CALL_OW 521
// SetPlayerSpectator ( ) ;
9469: CALL_OW 572
// enable ( 400 ) ;
9473: LD_INT 400
9475: ENABLE_MARKED
// end ; end ; end ;
9476: GO 9390
9478: POP
9479: POP
// DidGameEnd ;
9480: CALL 9495 0 0
// if not GameEnded then
9484: LD_LOC 15
9488: NOT
9489: IFFALSE 9492
// enable ;
9491: ENABLE
// end ;
9492: PPOPN 2
9494: END
// function DidGameEnd ; var i , k , enemy ; begin
9495: LD_INT 0
9497: PPUSH
9498: PPUSH
9499: PPUSH
9500: PPUSH
// enemy = [ ] ;
9501: LD_ADDR_VAR 0 4
9505: PUSH
9506: EMPTY
9507: ST_TO_ADDR
// for i = 1 to side_positions do
9508: LD_ADDR_VAR 0 2
9512: PUSH
9513: DOUBLE
9514: LD_INT 1
9516: DEC
9517: ST_TO_ADDR
9518: LD_EXP 36
9522: PUSH
9523: FOR_TO
9524: IFFALSE 9618
// if not defeated [ i ] then
9526: LD_LOC 14
9530: PUSH
9531: LD_VAR 0 2
9535: ARRAY
9536: NOT
9537: IFFALSE 9616
// for k = 1 to side_positions do
9539: LD_ADDR_VAR 0 3
9543: PUSH
9544: DOUBLE
9545: LD_INT 1
9547: DEC
9548: ST_TO_ADDR
9549: LD_EXP 36
9553: PUSH
9554: FOR_TO
9555: IFFALSE 9614
// if not defeated [ k ] then
9557: LD_LOC 14
9561: PUSH
9562: LD_VAR 0 3
9566: ARRAY
9567: NOT
9568: IFFALSE 9612
// if not AlliedSides ( i , k ) then
9570: LD_VAR 0 2
9574: PPUSH
9575: LD_VAR 0 3
9579: PPUSH
9580: CALL 9059 0 2
9584: NOT
9585: IFFALSE 9612
// enemy = enemy ^ [ i , k ] ;
9587: LD_ADDR_VAR 0 4
9591: PUSH
9592: LD_VAR 0 4
9596: PUSH
9597: LD_VAR 0 2
9601: PUSH
9602: LD_VAR 0 3
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: ADD
9611: ST_TO_ADDR
9612: GO 9554
9614: POP
9615: POP
9616: GO 9523
9618: POP
9619: POP
// if not enemy then
9620: LD_VAR 0 4
9624: NOT
9625: IFFALSE 9651
// begin GameEnded = true ;
9627: LD_ADDR_LOC 15
9631: PUSH
9632: LD_INT 1
9634: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9635: LD_LOC 14
9639: PUSH
9640: LD_OWVAR 7
9644: ARRAY
9645: NOT
9646: IFFALSE 9651
// enable ( 401 ) ;
9648: LD_INT 401
9650: ENABLE_MARKED
// end ; end ;
9651: LD_VAR 0 1
9655: RET
// function unfog ; var k , friends ; begin
9656: LD_INT 0
9658: PPUSH
9659: PPUSH
9660: PPUSH
// for k = 1 to side_positions do
9661: LD_ADDR_VAR 0 2
9665: PUSH
9666: DOUBLE
9667: LD_INT 1
9669: DEC
9670: ST_TO_ADDR
9671: LD_EXP 36
9675: PUSH
9676: FOR_TO
9677: IFFALSE 9733
// if not defeated [ k ] then
9679: LD_LOC 14
9683: PUSH
9684: LD_VAR 0 2
9688: ARRAY
9689: NOT
9690: IFFALSE 9731
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9692: LD_OWVAR 7
9696: PPUSH
9697: LD_VAR 0 2
9701: PPUSH
9702: CALL_OW 81
9706: PUSH
9707: LD_INT 1
9709: PUSH
9710: EMPTY
9711: LIST
9712: IN
9713: IFFALSE 9731
// friends = friends ^ k ;
9715: LD_ADDR_VAR 0 3
9719: PUSH
9720: LD_VAR 0 3
9724: PUSH
9725: LD_VAR 0 2
9729: ADD
9730: ST_TO_ADDR
9731: GO 9676
9733: POP
9734: POP
// if not friends then
9735: LD_VAR 0 3
9739: NOT
9740: IFFALSE 9754
// begin SetPlayerSpectator ( ) ;
9742: CALL_OW 572
// unfoged = true ;
9746: LD_ADDR_LOC 16
9750: PUSH
9751: LD_INT 1
9753: ST_TO_ADDR
// end ; end ;
9754: LD_VAR 0 1
9758: RET
// export function MakeGameEnd ; begin
9759: LD_INT 0
9761: PPUSH
// SetPlayerSpectator ( ) ;
9762: CALL_OW 572
// unfoged = true ;
9766: LD_ADDR_LOC 16
9770: PUSH
9771: LD_INT 1
9773: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9774: LD_INT 175
9776: PPUSH
9777: CALL_OW 67
// GameEnded = true ;
9781: LD_ADDR_LOC 15
9785: PUSH
9786: LD_INT 1
9788: ST_TO_ADDR
// end ;
9789: LD_VAR 0 1
9793: RET
// export function GetGameEnded ; begin
9794: LD_INT 0
9796: PPUSH
// result = GameEnded ;
9797: LD_ADDR_VAR 0 1
9801: PUSH
9802: LD_LOC 15
9806: ST_TO_ADDR
// end ; end_of_file
9807: LD_VAR 0 1
9811: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9812: LD_INT 0
9814: PPUSH
9815: PPUSH
9816: PPUSH
// for side = 1 to 8 do
9817: LD_ADDR_VAR 0 2
9821: PUSH
9822: DOUBLE
9823: LD_INT 1
9825: DEC
9826: ST_TO_ADDR
9827: LD_INT 8
9829: PUSH
9830: FOR_TO
9831: IFFALSE 9952
// begin for i = 1 to 72 do
9833: LD_ADDR_VAR 0 3
9837: PUSH
9838: DOUBLE
9839: LD_INT 1
9841: DEC
9842: ST_TO_ADDR
9843: LD_INT 72
9845: PUSH
9846: FOR_TO
9847: IFFALSE 9878
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9849: LD_VAR 0 3
9853: PPUSH
9854: LD_VAR 0 2
9858: PPUSH
9859: LD_INT 0
9861: PPUSH
9862: LD_VAR 0 3
9866: PPUSH
9867: CALL_OW 565
9871: PPUSH
9872: CALL_OW 322
9876: GO 9846
9878: POP
9879: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9880: LD_INT 73
9882: PPUSH
9883: LD_VAR 0 2
9887: PPUSH
9888: LD_INT 0
9890: PPUSH
9891: LD_INT 25
9893: PPUSH
9894: CALL_OW 565
9898: PPUSH
9899: CALL_OW 322
// for i = 0 to 40 do
9903: LD_ADDR_VAR 0 3
9907: PUSH
9908: DOUBLE
9909: LD_INT 0
9911: DEC
9912: ST_TO_ADDR
9913: LD_INT 40
9915: PUSH
9916: FOR_TO
9917: IFFALSE 9948
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9919: LD_VAR 0 3
9923: PPUSH
9924: LD_VAR 0 2
9928: PPUSH
9929: LD_INT 1
9931: PPUSH
9932: LD_VAR 0 3
9936: PPUSH
9937: CALL_OW 565
9941: PPUSH
9942: CALL_OW 324
9946: GO 9916
9948: POP
9949: POP
// end ;
9950: GO 9830
9952: POP
9953: POP
// end ;
9954: LD_VAR 0 1
9958: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9959: LD_INT 0
9961: PPUSH
9962: PPUSH
9963: PPUSH
// for side = 1 to 8 do
9964: LD_ADDR_VAR 0 3
9968: PUSH
9969: DOUBLE
9970: LD_INT 1
9972: DEC
9973: ST_TO_ADDR
9974: LD_INT 8
9976: PUSH
9977: FOR_TO
9978: IFFALSE 13974
// begin for i = 1 to 73 do
9980: LD_ADDR_VAR 0 4
9984: PUSH
9985: DOUBLE
9986: LD_INT 1
9988: DEC
9989: ST_TO_ADDR
9990: LD_INT 73
9992: PUSH
9993: FOR_TO
9994: IFFALSE 10015
// SetTech ( i , side , state_disabled ) ;
9996: LD_VAR 0 4
10000: PPUSH
10001: LD_VAR 0 3
10005: PPUSH
10006: LD_INT 0
10008: PPUSH
10009: CALL_OW 322
10013: GO 9993
10015: POP
10016: POP
// for i = 0 to 40 do
10017: LD_ADDR_VAR 0 4
10021: PUSH
10022: DOUBLE
10023: LD_INT 0
10025: DEC
10026: ST_TO_ADDR
10027: LD_INT 40
10029: PUSH
10030: FOR_TO
10031: IFFALSE 10052
// SetRestrict ( i , side , false ) ;
10033: LD_VAR 0 4
10037: PPUSH
10038: LD_VAR 0 3
10042: PPUSH
10043: LD_INT 0
10045: PPUSH
10046: CALL_OW 324
10050: GO 10030
10052: POP
10053: POP
// case level of 1 :
10054: LD_VAR 0 1
10058: PUSH
10059: LD_INT 1
10061: DOUBLE
10062: EQUAL
10063: IFTRUE 10067
10065: GO 10220
10067: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10068: LD_INT 35
10070: PPUSH
10071: LD_VAR 0 3
10075: PPUSH
10076: LD_INT 1
10078: PPUSH
10079: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10083: LD_INT 45
10085: PPUSH
10086: LD_VAR 0 3
10090: PPUSH
10091: LD_INT 1
10093: PPUSH
10094: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10098: LD_INT 46
10100: PPUSH
10101: LD_VAR 0 3
10105: PPUSH
10106: LD_INT 1
10108: PPUSH
10109: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10113: LD_INT 47
10115: PPUSH
10116: LD_VAR 0 3
10120: PPUSH
10121: LD_INT 1
10123: PPUSH
10124: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10128: LD_INT 0
10130: PPUSH
10131: LD_VAR 0 3
10135: PPUSH
10136: LD_INT 1
10138: PPUSH
10139: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10143: LD_INT 2
10145: PPUSH
10146: LD_VAR 0 3
10150: PPUSH
10151: LD_INT 1
10153: PPUSH
10154: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10158: LD_INT 4
10160: PPUSH
10161: LD_VAR 0 3
10165: PPUSH
10166: LD_INT 1
10168: PPUSH
10169: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10173: LD_INT 6
10175: PPUSH
10176: LD_VAR 0 3
10180: PPUSH
10181: LD_INT 1
10183: PPUSH
10184: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10188: LD_INT 29
10190: PPUSH
10191: LD_VAR 0 3
10195: PPUSH
10196: LD_INT 1
10198: PPUSH
10199: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10203: LD_INT 31
10205: PPUSH
10206: LD_VAR 0 3
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 324
// end ; 2 :
10218: GO 13972
10220: LD_INT 2
10222: DOUBLE
10223: EQUAL
10224: IFTRUE 10228
10226: GO 10426
10228: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10229: LD_INT 35
10231: PPUSH
10232: LD_VAR 0 3
10236: PPUSH
10237: LD_INT 1
10239: PPUSH
10240: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10244: LD_INT 45
10246: PPUSH
10247: LD_VAR 0 3
10251: PPUSH
10252: LD_INT 1
10254: PPUSH
10255: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10259: LD_INT 46
10261: PPUSH
10262: LD_VAR 0 3
10266: PPUSH
10267: LD_INT 1
10269: PPUSH
10270: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10274: LD_INT 47
10276: PPUSH
10277: LD_VAR 0 3
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10289: LD_INT 1
10291: PPUSH
10292: LD_VAR 0 3
10296: PPUSH
10297: LD_INT 1
10299: PPUSH
10300: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10304: LD_INT 2
10306: PPUSH
10307: LD_VAR 0 3
10311: PPUSH
10312: LD_INT 1
10314: PPUSH
10315: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10319: LD_INT 11
10321: PPUSH
10322: LD_VAR 0 3
10326: PPUSH
10327: LD_INT 1
10329: PPUSH
10330: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10334: LD_INT 0
10336: PPUSH
10337: LD_VAR 0 3
10341: PPUSH
10342: LD_INT 1
10344: PPUSH
10345: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10349: LD_INT 2
10351: PPUSH
10352: LD_VAR 0 3
10356: PPUSH
10357: LD_INT 1
10359: PPUSH
10360: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10364: LD_INT 4
10366: PPUSH
10367: LD_VAR 0 3
10371: PPUSH
10372: LD_INT 1
10374: PPUSH
10375: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10379: LD_INT 6
10381: PPUSH
10382: LD_VAR 0 3
10386: PPUSH
10387: LD_INT 1
10389: PPUSH
10390: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10394: LD_INT 29
10396: PPUSH
10397: LD_VAR 0 3
10401: PPUSH
10402: LD_INT 1
10404: PPUSH
10405: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10409: LD_INT 31
10411: PPUSH
10412: LD_VAR 0 3
10416: PPUSH
10417: LD_INT 1
10419: PPUSH
10420: CALL_OW 324
// end ; 3 :
10424: GO 13972
10426: LD_INT 3
10428: DOUBLE
10429: EQUAL
10430: IFTRUE 10434
10432: GO 10887
10434: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10435: LD_INT 35
10437: PPUSH
10438: LD_VAR 0 3
10442: PPUSH
10443: LD_INT 1
10445: PPUSH
10446: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10450: LD_INT 45
10452: PPUSH
10453: LD_VAR 0 3
10457: PPUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10465: LD_INT 46
10467: PPUSH
10468: LD_VAR 0 3
10472: PPUSH
10473: LD_INT 1
10475: PPUSH
10476: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10480: LD_INT 47
10482: PPUSH
10483: LD_VAR 0 3
10487: PPUSH
10488: LD_INT 1
10490: PPUSH
10491: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10495: LD_INT 1
10497: PPUSH
10498: LD_VAR 0 3
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10510: LD_INT 2
10512: PPUSH
10513: LD_VAR 0 3
10517: PPUSH
10518: LD_INT 1
10520: PPUSH
10521: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10525: LD_INT 11
10527: PPUSH
10528: LD_VAR 0 3
10532: PPUSH
10533: LD_INT 1
10535: PPUSH
10536: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10540: LD_INT 48
10542: PPUSH
10543: LD_VAR 0 3
10547: PPUSH
10548: LD_INT 1
10550: PPUSH
10551: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10555: LD_INT 69
10557: PPUSH
10558: LD_VAR 0 3
10562: PPUSH
10563: LD_INT 1
10565: PPUSH
10566: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10570: LD_INT 39
10572: PPUSH
10573: LD_VAR 0 3
10577: PPUSH
10578: LD_INT 1
10580: PPUSH
10581: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10585: LD_INT 43
10587: PPUSH
10588: LD_VAR 0 3
10592: PPUSH
10593: LD_INT 1
10595: PPUSH
10596: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10600: LD_INT 51
10602: PPUSH
10603: LD_VAR 0 3
10607: PPUSH
10608: LD_INT 1
10610: PPUSH
10611: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10615: LD_INT 6
10617: PPUSH
10618: LD_VAR 0 3
10622: PPUSH
10623: LD_INT 1
10625: PPUSH
10626: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10630: LD_INT 0
10632: PPUSH
10633: LD_VAR 0 3
10637: PPUSH
10638: LD_INT 1
10640: PPUSH
10641: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10645: LD_INT 2
10647: PPUSH
10648: LD_VAR 0 3
10652: PPUSH
10653: LD_INT 1
10655: PPUSH
10656: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10660: LD_INT 3
10662: PPUSH
10663: LD_VAR 0 3
10667: PPUSH
10668: LD_INT 1
10670: PPUSH
10671: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10675: LD_INT 4
10677: PPUSH
10678: LD_VAR 0 3
10682: PPUSH
10683: LD_INT 1
10685: PPUSH
10686: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10690: LD_INT 6
10692: PPUSH
10693: LD_VAR 0 3
10697: PPUSH
10698: LD_INT 1
10700: PPUSH
10701: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10705: LD_INT 7
10707: PPUSH
10708: LD_VAR 0 3
10712: PPUSH
10713: LD_INT 1
10715: PPUSH
10716: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10720: LD_INT 8
10722: PPUSH
10723: LD_VAR 0 3
10727: PPUSH
10728: LD_INT 1
10730: PPUSH
10731: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10735: LD_INT 10
10737: PPUSH
10738: LD_VAR 0 3
10742: PPUSH
10743: LD_INT 1
10745: PPUSH
10746: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10750: LD_INT 15
10752: PPUSH
10753: LD_VAR 0 3
10757: PPUSH
10758: LD_INT 1
10760: PPUSH
10761: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10765: LD_INT 16
10767: PPUSH
10768: LD_VAR 0 3
10772: PPUSH
10773: LD_INT 1
10775: PPUSH
10776: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10780: LD_INT 17
10782: PPUSH
10783: LD_VAR 0 3
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10795: LD_INT 20
10797: PPUSH
10798: LD_VAR 0 3
10802: PPUSH
10803: LD_INT 1
10805: PPUSH
10806: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10810: LD_INT 26
10812: PPUSH
10813: LD_VAR 0 3
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10825: LD_INT 27
10827: PPUSH
10828: LD_VAR 0 3
10832: PPUSH
10833: LD_INT 1
10835: PPUSH
10836: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10840: LD_INT 29
10842: PPUSH
10843: LD_VAR 0 3
10847: PPUSH
10848: LD_INT 1
10850: PPUSH
10851: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10855: LD_INT 31
10857: PPUSH
10858: LD_VAR 0 3
10862: PPUSH
10863: LD_INT 1
10865: PPUSH
10866: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10870: LD_INT 32
10872: PPUSH
10873: LD_VAR 0 3
10877: PPUSH
10878: LD_INT 1
10880: PPUSH
10881: CALL_OW 324
// end ; 4 :
10885: GO 13972
10887: LD_INT 4
10889: DOUBLE
10890: EQUAL
10891: IFTRUE 10895
10893: GO 11843
10895: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10896: LD_INT 35
10898: PPUSH
10899: LD_VAR 0 3
10903: PPUSH
10904: LD_INT 1
10906: PPUSH
10907: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10911: LD_INT 45
10913: PPUSH
10914: LD_VAR 0 3
10918: PPUSH
10919: LD_INT 1
10921: PPUSH
10922: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10926: LD_INT 46
10928: PPUSH
10929: LD_VAR 0 3
10933: PPUSH
10934: LD_INT 1
10936: PPUSH
10937: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10941: LD_INT 47
10943: PPUSH
10944: LD_VAR 0 3
10948: PPUSH
10949: LD_INT 1
10951: PPUSH
10952: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10956: LD_INT 1
10958: PPUSH
10959: LD_VAR 0 3
10963: PPUSH
10964: LD_INT 1
10966: PPUSH
10967: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10971: LD_INT 2
10973: PPUSH
10974: LD_VAR 0 3
10978: PPUSH
10979: LD_INT 1
10981: PPUSH
10982: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10986: LD_INT 11
10988: PPUSH
10989: LD_VAR 0 3
10993: PPUSH
10994: LD_INT 1
10996: PPUSH
10997: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11001: LD_INT 20
11003: PPUSH
11004: LD_VAR 0 3
11008: PPUSH
11009: LD_INT 1
11011: PPUSH
11012: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11016: LD_INT 48
11018: PPUSH
11019: LD_VAR 0 3
11023: PPUSH
11024: LD_INT 1
11026: PPUSH
11027: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11031: LD_INT 49
11033: PPUSH
11034: LD_VAR 0 3
11038: PPUSH
11039: LD_INT 1
11041: PPUSH
11042: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11046: LD_INT 69
11048: PPUSH
11049: LD_VAR 0 3
11053: PPUSH
11054: LD_INT 1
11056: PPUSH
11057: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11061: LD_INT 39
11063: PPUSH
11064: LD_VAR 0 3
11068: PPUSH
11069: LD_INT 1
11071: PPUSH
11072: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11076: LD_INT 34
11078: PPUSH
11079: LD_VAR 0 3
11083: PPUSH
11084: LD_INT 1
11086: PPUSH
11087: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11091: LD_INT 42
11093: PPUSH
11094: LD_VAR 0 3
11098: PPUSH
11099: LD_INT 1
11101: PPUSH
11102: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11106: LD_INT 44
11108: PPUSH
11109: LD_VAR 0 3
11113: PPUSH
11114: LD_INT 1
11116: PPUSH
11117: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11121: LD_INT 41
11123: PPUSH
11124: LD_VAR 0 3
11128: PPUSH
11129: LD_INT 1
11131: PPUSH
11132: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11136: LD_INT 43
11138: PPUSH
11139: LD_VAR 0 3
11143: PPUSH
11144: LD_INT 1
11146: PPUSH
11147: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11151: LD_INT 70
11153: PPUSH
11154: LD_VAR 0 3
11158: PPUSH
11159: LD_INT 1
11161: PPUSH
11162: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11166: LD_INT 51
11168: PPUSH
11169: LD_VAR 0 3
11173: PPUSH
11174: LD_INT 1
11176: PPUSH
11177: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11181: LD_INT 52
11183: PPUSH
11184: LD_VAR 0 3
11188: PPUSH
11189: LD_INT 1
11191: PPUSH
11192: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11196: LD_INT 6
11198: PPUSH
11199: LD_VAR 0 3
11203: PPUSH
11204: LD_INT 1
11206: PPUSH
11207: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11211: LD_INT 15
11213: PPUSH
11214: LD_VAR 0 3
11218: PPUSH
11219: LD_INT 1
11221: PPUSH
11222: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11226: LD_INT 7
11228: PPUSH
11229: LD_VAR 0 3
11233: PPUSH
11234: LD_INT 1
11236: PPUSH
11237: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11241: LD_INT 12
11243: PPUSH
11244: LD_VAR 0 3
11248: PPUSH
11249: LD_INT 1
11251: PPUSH
11252: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11256: LD_INT 18
11258: PPUSH
11259: LD_VAR 0 3
11263: PPUSH
11264: LD_INT 1
11266: PPUSH
11267: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11271: LD_INT 60
11273: PPUSH
11274: LD_VAR 0 3
11278: PPUSH
11279: LD_INT 1
11281: PPUSH
11282: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11286: LD_INT 9
11288: PPUSH
11289: LD_VAR 0 3
11293: PPUSH
11294: LD_INT 1
11296: PPUSH
11297: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11301: LD_INT 30
11303: PPUSH
11304: LD_VAR 0 3
11308: PPUSH
11309: LD_INT 1
11311: PPUSH
11312: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11316: LD_INT 37
11318: PPUSH
11319: LD_VAR 0 3
11323: PPUSH
11324: LD_INT 1
11326: PPUSH
11327: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11331: LD_INT 5
11333: PPUSH
11334: LD_VAR 0 3
11338: PPUSH
11339: LD_INT 1
11341: PPUSH
11342: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11346: LD_INT 66
11348: PPUSH
11349: LD_VAR 0 3
11353: PPUSH
11354: LD_INT 1
11356: PPUSH
11357: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11361: LD_INT 21
11363: PPUSH
11364: LD_VAR 0 3
11368: PPUSH
11369: LD_INT 1
11371: PPUSH
11372: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11376: LD_INT 22
11378: PPUSH
11379: LD_VAR 0 3
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11391: LD_INT 54
11393: PPUSH
11394: LD_VAR 0 3
11398: PPUSH
11399: LD_INT 1
11401: PPUSH
11402: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11406: LD_INT 0
11408: PPUSH
11409: LD_VAR 0 3
11413: PPUSH
11414: LD_INT 1
11416: PPUSH
11417: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11421: LD_INT 1
11423: PPUSH
11424: LD_VAR 0 3
11428: PPUSH
11429: LD_INT 1
11431: PPUSH
11432: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11436: LD_INT 2
11438: PPUSH
11439: LD_VAR 0 3
11443: PPUSH
11444: LD_INT 1
11446: PPUSH
11447: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11451: LD_INT 3
11453: PPUSH
11454: LD_VAR 0 3
11458: PPUSH
11459: LD_INT 1
11461: PPUSH
11462: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11466: LD_INT 4
11468: PPUSH
11469: LD_VAR 0 3
11473: PPUSH
11474: LD_INT 1
11476: PPUSH
11477: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11481: LD_INT 5
11483: PPUSH
11484: LD_VAR 0 3
11488: PPUSH
11489: LD_INT 1
11491: PPUSH
11492: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11496: LD_INT 6
11498: PPUSH
11499: LD_VAR 0 3
11503: PPUSH
11504: LD_INT 1
11506: PPUSH
11507: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11511: LD_INT 7
11513: PPUSH
11514: LD_VAR 0 3
11518: PPUSH
11519: LD_INT 1
11521: PPUSH
11522: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11526: LD_INT 8
11528: PPUSH
11529: LD_VAR 0 3
11533: PPUSH
11534: LD_INT 1
11536: PPUSH
11537: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11541: LD_INT 10
11543: PPUSH
11544: LD_VAR 0 3
11548: PPUSH
11549: LD_INT 1
11551: PPUSH
11552: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11556: LD_INT 11
11558: PPUSH
11559: LD_VAR 0 3
11563: PPUSH
11564: LD_INT 1
11566: PPUSH
11567: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11571: LD_INT 12
11573: PPUSH
11574: LD_VAR 0 3
11578: PPUSH
11579: LD_INT 1
11581: PPUSH
11582: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11586: LD_INT 13
11588: PPUSH
11589: LD_VAR 0 3
11593: PPUSH
11594: LD_INT 1
11596: PPUSH
11597: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11601: LD_INT 14
11603: PPUSH
11604: LD_VAR 0 3
11608: PPUSH
11609: LD_INT 1
11611: PPUSH
11612: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11616: LD_INT 15
11618: PPUSH
11619: LD_VAR 0 3
11623: PPUSH
11624: LD_INT 1
11626: PPUSH
11627: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11631: LD_INT 16
11633: PPUSH
11634: LD_VAR 0 3
11638: PPUSH
11639: LD_INT 1
11641: PPUSH
11642: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11646: LD_INT 17
11648: PPUSH
11649: LD_VAR 0 3
11653: PPUSH
11654: LD_INT 1
11656: PPUSH
11657: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11661: LD_INT 19
11663: PPUSH
11664: LD_VAR 0 3
11668: PPUSH
11669: LD_INT 1
11671: PPUSH
11672: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11676: LD_INT 20
11678: PPUSH
11679: LD_VAR 0 3
11683: PPUSH
11684: LD_INT 1
11686: PPUSH
11687: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11691: LD_INT 21
11693: PPUSH
11694: LD_VAR 0 3
11698: PPUSH
11699: LD_INT 1
11701: PPUSH
11702: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11706: LD_INT 23
11708: PPUSH
11709: LD_VAR 0 3
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11721: LD_INT 26
11723: PPUSH
11724: LD_VAR 0 3
11728: PPUSH
11729: LD_INT 1
11731: PPUSH
11732: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11736: LD_INT 27
11738: PPUSH
11739: LD_VAR 0 3
11743: PPUSH
11744: LD_INT 1
11746: PPUSH
11747: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11751: LD_INT 28
11753: PPUSH
11754: LD_VAR 0 3
11758: PPUSH
11759: LD_INT 1
11761: PPUSH
11762: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11766: LD_INT 29
11768: PPUSH
11769: LD_VAR 0 3
11773: PPUSH
11774: LD_INT 1
11776: PPUSH
11777: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11781: LD_INT 30
11783: PPUSH
11784: LD_VAR 0 3
11788: PPUSH
11789: LD_INT 1
11791: PPUSH
11792: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11796: LD_INT 31
11798: PPUSH
11799: LD_VAR 0 3
11803: PPUSH
11804: LD_INT 1
11806: PPUSH
11807: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11811: LD_INT 32
11813: PPUSH
11814: LD_VAR 0 3
11818: PPUSH
11819: LD_INT 1
11821: PPUSH
11822: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11826: LD_INT 36
11828: PPUSH
11829: LD_VAR 0 3
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: CALL_OW 324
// end ; 5 :
11841: GO 13972
11843: LD_INT 5
11845: DOUBLE
11846: EQUAL
11847: IFTRUE 11851
11849: GO 12964
11851: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11852: LD_INT 35
11854: PPUSH
11855: LD_VAR 0 3
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11867: LD_INT 45
11869: PPUSH
11870: LD_VAR 0 3
11874: PPUSH
11875: LD_INT 1
11877: PPUSH
11878: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11882: LD_INT 46
11884: PPUSH
11885: LD_VAR 0 3
11889: PPUSH
11890: LD_INT 1
11892: PPUSH
11893: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11897: LD_INT 47
11899: PPUSH
11900: LD_VAR 0 3
11904: PPUSH
11905: LD_INT 1
11907: PPUSH
11908: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11912: LD_INT 1
11914: PPUSH
11915: LD_VAR 0 3
11919: PPUSH
11920: LD_INT 1
11922: PPUSH
11923: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11927: LD_INT 2
11929: PPUSH
11930: LD_VAR 0 3
11934: PPUSH
11935: LD_INT 1
11937: PPUSH
11938: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11942: LD_INT 11
11944: PPUSH
11945: LD_VAR 0 3
11949: PPUSH
11950: LD_INT 1
11952: PPUSH
11953: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11957: LD_INT 20
11959: PPUSH
11960: LD_VAR 0 3
11964: PPUSH
11965: LD_INT 1
11967: PPUSH
11968: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11972: LD_INT 48
11974: PPUSH
11975: LD_VAR 0 3
11979: PPUSH
11980: LD_INT 1
11982: PPUSH
11983: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11987: LD_INT 49
11989: PPUSH
11990: LD_VAR 0 3
11994: PPUSH
11995: LD_INT 1
11997: PPUSH
11998: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12002: LD_INT 69
12004: PPUSH
12005: LD_VAR 0 3
12009: PPUSH
12010: LD_INT 1
12012: PPUSH
12013: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12017: LD_INT 39
12019: PPUSH
12020: LD_VAR 0 3
12024: PPUSH
12025: LD_INT 1
12027: PPUSH
12028: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12032: LD_INT 34
12034: PPUSH
12035: LD_VAR 0 3
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12047: LD_INT 42
12049: PPUSH
12050: LD_VAR 0 3
12054: PPUSH
12055: LD_INT 1
12057: PPUSH
12058: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12062: LD_INT 44
12064: PPUSH
12065: LD_VAR 0 3
12069: PPUSH
12070: LD_INT 1
12072: PPUSH
12073: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12077: LD_INT 41
12079: PPUSH
12080: LD_VAR 0 3
12084: PPUSH
12085: LD_INT 1
12087: PPUSH
12088: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12092: LD_INT 40
12094: PPUSH
12095: LD_VAR 0 3
12099: PPUSH
12100: LD_INT 1
12102: PPUSH
12103: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12107: LD_INT 43
12109: PPUSH
12110: LD_VAR 0 3
12114: PPUSH
12115: LD_INT 1
12117: PPUSH
12118: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12122: LD_INT 70
12124: PPUSH
12125: LD_VAR 0 3
12129: PPUSH
12130: LD_INT 1
12132: PPUSH
12133: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12137: LD_INT 51
12139: PPUSH
12140: LD_VAR 0 3
12144: PPUSH
12145: LD_INT 1
12147: PPUSH
12148: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12152: LD_INT 52
12154: PPUSH
12155: LD_VAR 0 3
12159: PPUSH
12160: LD_INT 1
12162: PPUSH
12163: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12167: LD_INT 6
12169: PPUSH
12170: LD_VAR 0 3
12174: PPUSH
12175: LD_INT 1
12177: PPUSH
12178: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12182: LD_INT 15
12184: PPUSH
12185: LD_VAR 0 3
12189: PPUSH
12190: LD_INT 1
12192: PPUSH
12193: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12197: LD_INT 7
12199: PPUSH
12200: LD_VAR 0 3
12204: PPUSH
12205: LD_INT 1
12207: PPUSH
12208: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12212: LD_INT 12
12214: PPUSH
12215: LD_VAR 0 3
12219: PPUSH
12220: LD_INT 1
12222: PPUSH
12223: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12227: LD_INT 17
12229: PPUSH
12230: LD_VAR 0 3
12234: PPUSH
12235: LD_INT 1
12237: PPUSH
12238: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12242: LD_INT 18
12244: PPUSH
12245: LD_VAR 0 3
12249: PPUSH
12250: LD_INT 1
12252: PPUSH
12253: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12257: LD_INT 60
12259: PPUSH
12260: LD_VAR 0 3
12264: PPUSH
12265: LD_INT 1
12267: PPUSH
12268: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12272: LD_INT 32
12274: PPUSH
12275: LD_VAR 0 3
12279: PPUSH
12280: LD_INT 1
12282: PPUSH
12283: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12287: LD_INT 9
12289: PPUSH
12290: LD_VAR 0 3
12294: PPUSH
12295: LD_INT 1
12297: PPUSH
12298: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12302: LD_INT 57
12304: PPUSH
12305: LD_VAR 0 3
12309: PPUSH
12310: LD_INT 1
12312: PPUSH
12313: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12317: LD_INT 30
12319: PPUSH
12320: LD_VAR 0 3
12324: PPUSH
12325: LD_INT 1
12327: PPUSH
12328: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12332: LD_INT 37
12334: PPUSH
12335: LD_VAR 0 3
12339: PPUSH
12340: LD_INT 1
12342: PPUSH
12343: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12347: LD_INT 63
12349: PPUSH
12350: LD_VAR 0 3
12354: PPUSH
12355: LD_INT 1
12357: PPUSH
12358: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12362: LD_INT 3
12364: PPUSH
12365: LD_VAR 0 3
12369: PPUSH
12370: LD_INT 1
12372: PPUSH
12373: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12377: LD_INT 4
12379: PPUSH
12380: LD_VAR 0 3
12384: PPUSH
12385: LD_INT 1
12387: PPUSH
12388: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12392: LD_INT 5
12394: PPUSH
12395: LD_VAR 0 3
12399: PPUSH
12400: LD_INT 1
12402: PPUSH
12403: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12407: LD_INT 66
12409: PPUSH
12410: LD_VAR 0 3
12414: PPUSH
12415: LD_INT 1
12417: PPUSH
12418: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12422: LD_INT 21
12424: PPUSH
12425: LD_VAR 0 3
12429: PPUSH
12430: LD_INT 1
12432: PPUSH
12433: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12437: LD_INT 22
12439: PPUSH
12440: LD_VAR 0 3
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12452: LD_INT 19
12454: PPUSH
12455: LD_VAR 0 3
12459: PPUSH
12460: LD_INT 1
12462: PPUSH
12463: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12467: LD_INT 54
12469: PPUSH
12470: LD_VAR 0 3
12474: PPUSH
12475: LD_INT 1
12477: PPUSH
12478: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12482: LD_INT 55
12484: PPUSH
12485: LD_VAR 0 3
12489: PPUSH
12490: LD_INT 1
12492: PPUSH
12493: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12497: LD_INT 0
12499: PPUSH
12500: LD_VAR 0 3
12504: PPUSH
12505: LD_INT 1
12507: PPUSH
12508: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12512: LD_INT 1
12514: PPUSH
12515: LD_VAR 0 3
12519: PPUSH
12520: LD_INT 1
12522: PPUSH
12523: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12527: LD_INT 2
12529: PPUSH
12530: LD_VAR 0 3
12534: PPUSH
12535: LD_INT 1
12537: PPUSH
12538: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12542: LD_INT 3
12544: PPUSH
12545: LD_VAR 0 3
12549: PPUSH
12550: LD_INT 1
12552: PPUSH
12553: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12557: LD_INT 4
12559: PPUSH
12560: LD_VAR 0 3
12564: PPUSH
12565: LD_INT 1
12567: PPUSH
12568: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12572: LD_INT 5
12574: PPUSH
12575: LD_VAR 0 3
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12587: LD_INT 6
12589: PPUSH
12590: LD_VAR 0 3
12594: PPUSH
12595: LD_INT 1
12597: PPUSH
12598: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12602: LD_INT 7
12604: PPUSH
12605: LD_VAR 0 3
12609: PPUSH
12610: LD_INT 1
12612: PPUSH
12613: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12617: LD_INT 8
12619: PPUSH
12620: LD_VAR 0 3
12624: PPUSH
12625: LD_INT 1
12627: PPUSH
12628: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12632: LD_INT 10
12634: PPUSH
12635: LD_VAR 0 3
12639: PPUSH
12640: LD_INT 1
12642: PPUSH
12643: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12647: LD_INT 11
12649: PPUSH
12650: LD_VAR 0 3
12654: PPUSH
12655: LD_INT 1
12657: PPUSH
12658: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12662: LD_INT 12
12664: PPUSH
12665: LD_VAR 0 3
12669: PPUSH
12670: LD_INT 1
12672: PPUSH
12673: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12677: LD_INT 13
12679: PPUSH
12680: LD_VAR 0 3
12684: PPUSH
12685: LD_INT 1
12687: PPUSH
12688: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12692: LD_INT 14
12694: PPUSH
12695: LD_VAR 0 3
12699: PPUSH
12700: LD_INT 1
12702: PPUSH
12703: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12707: LD_INT 15
12709: PPUSH
12710: LD_VAR 0 3
12714: PPUSH
12715: LD_INT 1
12717: PPUSH
12718: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12722: LD_INT 16
12724: PPUSH
12725: LD_VAR 0 3
12729: PPUSH
12730: LD_INT 1
12732: PPUSH
12733: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12737: LD_INT 17
12739: PPUSH
12740: LD_VAR 0 3
12744: PPUSH
12745: LD_INT 1
12747: PPUSH
12748: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12752: LD_INT 18
12754: PPUSH
12755: LD_VAR 0 3
12759: PPUSH
12760: LD_INT 1
12762: PPUSH
12763: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12767: LD_INT 19
12769: PPUSH
12770: LD_VAR 0 3
12774: PPUSH
12775: LD_INT 1
12777: PPUSH
12778: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12782: LD_INT 20
12784: PPUSH
12785: LD_VAR 0 3
12789: PPUSH
12790: LD_INT 1
12792: PPUSH
12793: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12797: LD_INT 21
12799: PPUSH
12800: LD_VAR 0 3
12804: PPUSH
12805: LD_INT 1
12807: PPUSH
12808: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12812: LD_INT 23
12814: PPUSH
12815: LD_VAR 0 3
12819: PPUSH
12820: LD_INT 1
12822: PPUSH
12823: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12827: LD_INT 26
12829: PPUSH
12830: LD_VAR 0 3
12834: PPUSH
12835: LD_INT 1
12837: PPUSH
12838: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12842: LD_INT 27
12844: PPUSH
12845: LD_VAR 0 3
12849: PPUSH
12850: LD_INT 1
12852: PPUSH
12853: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12857: LD_INT 28
12859: PPUSH
12860: LD_VAR 0 3
12864: PPUSH
12865: LD_INT 1
12867: PPUSH
12868: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12872: LD_INT 29
12874: PPUSH
12875: LD_VAR 0 3
12879: PPUSH
12880: LD_INT 1
12882: PPUSH
12883: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12887: LD_INT 30
12889: PPUSH
12890: LD_VAR 0 3
12894: PPUSH
12895: LD_INT 1
12897: PPUSH
12898: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12902: LD_INT 31
12904: PPUSH
12905: LD_VAR 0 3
12909: PPUSH
12910: LD_INT 1
12912: PPUSH
12913: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12917: LD_INT 32
12919: PPUSH
12920: LD_VAR 0 3
12924: PPUSH
12925: LD_INT 1
12927: PPUSH
12928: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12932: LD_INT 33
12934: PPUSH
12935: LD_VAR 0 3
12939: PPUSH
12940: LD_INT 1
12942: PPUSH
12943: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12947: LD_INT 36
12949: PPUSH
12950: LD_VAR 0 3
12954: PPUSH
12955: LD_INT 1
12957: PPUSH
12958: CALL_OW 324
// end ; 6 :
12962: GO 13972
12964: LD_INT 6
12966: DOUBLE
12967: EQUAL
12968: IFTRUE 12972
12970: GO 13897
12972: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12973: LD_INT 35
12975: PPUSH
12976: LD_VAR 0 3
12980: PPUSH
12981: LD_INT 1
12983: PPUSH
12984: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12988: LD_INT 45
12990: PPUSH
12991: LD_VAR 0 3
12995: PPUSH
12996: LD_INT 1
12998: PPUSH
12999: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13003: LD_INT 46
13005: PPUSH
13006: LD_VAR 0 3
13010: PPUSH
13011: LD_INT 1
13013: PPUSH
13014: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13018: LD_INT 47
13020: PPUSH
13021: LD_VAR 0 3
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13033: LD_INT 1
13035: PPUSH
13036: LD_VAR 0 3
13040: PPUSH
13041: LD_INT 1
13043: PPUSH
13044: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13048: LD_INT 2
13050: PPUSH
13051: LD_VAR 0 3
13055: PPUSH
13056: LD_INT 1
13058: PPUSH
13059: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13063: LD_INT 11
13065: PPUSH
13066: LD_VAR 0 3
13070: PPUSH
13071: LD_INT 1
13073: PPUSH
13074: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13078: LD_INT 20
13080: PPUSH
13081: LD_VAR 0 3
13085: PPUSH
13086: LD_INT 1
13088: PPUSH
13089: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13093: LD_INT 48
13095: PPUSH
13096: LD_VAR 0 3
13100: PPUSH
13101: LD_INT 1
13103: PPUSH
13104: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13108: LD_INT 49
13110: PPUSH
13111: LD_VAR 0 3
13115: PPUSH
13116: LD_INT 1
13118: PPUSH
13119: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13123: LD_INT 50
13125: PPUSH
13126: LD_VAR 0 3
13130: PPUSH
13131: LD_INT 1
13133: PPUSH
13134: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13138: LD_INT 69
13140: PPUSH
13141: LD_VAR 0 3
13145: PPUSH
13146: LD_INT 1
13148: PPUSH
13149: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13153: LD_INT 39
13155: PPUSH
13156: LD_VAR 0 3
13160: PPUSH
13161: LD_INT 1
13163: PPUSH
13164: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13168: LD_INT 34
13170: PPUSH
13171: LD_VAR 0 3
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13183: LD_INT 42
13185: PPUSH
13186: LD_VAR 0 3
13190: PPUSH
13191: LD_INT 1
13193: PPUSH
13194: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13198: LD_INT 44
13200: PPUSH
13201: LD_VAR 0 3
13205: PPUSH
13206: LD_INT 1
13208: PPUSH
13209: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13213: LD_INT 41
13215: PPUSH
13216: LD_VAR 0 3
13220: PPUSH
13221: LD_INT 1
13223: PPUSH
13224: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13228: LD_INT 13
13230: PPUSH
13231: LD_VAR 0 3
13235: PPUSH
13236: LD_INT 1
13238: PPUSH
13239: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13243: LD_INT 40
13245: PPUSH
13246: LD_VAR 0 3
13250: PPUSH
13251: LD_INT 1
13253: PPUSH
13254: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13258: LD_INT 43
13260: PPUSH
13261: LD_VAR 0 3
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13273: LD_INT 70
13275: PPUSH
13276: LD_VAR 0 3
13280: PPUSH
13281: LD_INT 1
13283: PPUSH
13284: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13288: LD_INT 23
13290: PPUSH
13291: LD_VAR 0 3
13295: PPUSH
13296: LD_INT 1
13298: PPUSH
13299: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13303: LD_INT 51
13305: PPUSH
13306: LD_VAR 0 3
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13318: LD_INT 52
13320: PPUSH
13321: LD_VAR 0 3
13325: PPUSH
13326: LD_INT 1
13328: PPUSH
13329: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13333: LD_INT 6
13335: PPUSH
13336: LD_VAR 0 3
13340: PPUSH
13341: LD_INT 1
13343: PPUSH
13344: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13348: LD_INT 15
13350: PPUSH
13351: LD_VAR 0 3
13355: PPUSH
13356: LD_INT 1
13358: PPUSH
13359: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13363: LD_INT 7
13365: PPUSH
13366: LD_VAR 0 3
13370: PPUSH
13371: LD_INT 1
13373: PPUSH
13374: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13378: LD_INT 12
13380: PPUSH
13381: LD_VAR 0 3
13385: PPUSH
13386: LD_INT 1
13388: PPUSH
13389: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13393: LD_INT 10
13395: PPUSH
13396: LD_VAR 0 3
13400: PPUSH
13401: LD_INT 1
13403: PPUSH
13404: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13408: LD_INT 17
13410: PPUSH
13411: LD_VAR 0 3
13415: PPUSH
13416: LD_INT 1
13418: PPUSH
13419: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13423: LD_INT 18
13425: PPUSH
13426: LD_VAR 0 3
13430: PPUSH
13431: LD_INT 1
13433: PPUSH
13434: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13438: LD_INT 60
13440: PPUSH
13441: LD_VAR 0 3
13445: PPUSH
13446: LD_INT 1
13448: PPUSH
13449: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13453: LD_INT 61
13455: PPUSH
13456: LD_VAR 0 3
13460: PPUSH
13461: LD_INT 1
13463: PPUSH
13464: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13468: LD_INT 32
13470: PPUSH
13471: LD_VAR 0 3
13475: PPUSH
13476: LD_INT 1
13478: PPUSH
13479: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13483: LD_INT 27
13485: PPUSH
13486: LD_VAR 0 3
13490: PPUSH
13491: LD_INT 1
13493: PPUSH
13494: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13498: LD_INT 36
13500: PPUSH
13501: LD_VAR 0 3
13505: PPUSH
13506: LD_INT 1
13508: PPUSH
13509: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13513: LD_INT 33
13515: PPUSH
13516: LD_VAR 0 3
13520: PPUSH
13521: LD_INT 1
13523: PPUSH
13524: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13528: LD_INT 9
13530: PPUSH
13531: LD_VAR 0 3
13535: PPUSH
13536: LD_INT 1
13538: PPUSH
13539: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13543: LD_INT 38
13545: PPUSH
13546: LD_VAR 0 3
13550: PPUSH
13551: LD_INT 1
13553: PPUSH
13554: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13558: LD_INT 57
13560: PPUSH
13561: LD_VAR 0 3
13565: PPUSH
13566: LD_INT 1
13568: PPUSH
13569: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13573: LD_INT 58
13575: PPUSH
13576: LD_VAR 0 3
13580: PPUSH
13581: LD_INT 1
13583: PPUSH
13584: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13588: LD_INT 28
13590: PPUSH
13591: LD_VAR 0 3
13595: PPUSH
13596: LD_INT 1
13598: PPUSH
13599: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13603: LD_INT 29
13605: PPUSH
13606: LD_VAR 0 3
13610: PPUSH
13611: LD_INT 1
13613: PPUSH
13614: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13618: LD_INT 30
13620: PPUSH
13621: LD_VAR 0 3
13625: PPUSH
13626: LD_INT 1
13628: PPUSH
13629: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13633: LD_INT 37
13635: PPUSH
13636: LD_VAR 0 3
13640: PPUSH
13641: LD_INT 1
13643: PPUSH
13644: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13648: LD_INT 63
13650: PPUSH
13651: LD_VAR 0 3
13655: PPUSH
13656: LD_INT 1
13658: PPUSH
13659: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13663: LD_INT 64
13665: PPUSH
13666: LD_VAR 0 3
13670: PPUSH
13671: LD_INT 1
13673: PPUSH
13674: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13678: LD_INT 3
13680: PPUSH
13681: LD_VAR 0 3
13685: PPUSH
13686: LD_INT 1
13688: PPUSH
13689: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13693: LD_INT 4
13695: PPUSH
13696: LD_VAR 0 3
13700: PPUSH
13701: LD_INT 1
13703: PPUSH
13704: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13708: LD_INT 5
13710: PPUSH
13711: LD_VAR 0 3
13715: PPUSH
13716: LD_INT 1
13718: PPUSH
13719: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13723: LD_INT 8
13725: PPUSH
13726: LD_VAR 0 3
13730: PPUSH
13731: LD_INT 1
13733: PPUSH
13734: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13738: LD_INT 66
13740: PPUSH
13741: LD_VAR 0 3
13745: PPUSH
13746: LD_INT 1
13748: PPUSH
13749: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13753: LD_INT 67
13755: PPUSH
13756: LD_VAR 0 3
13760: PPUSH
13761: LD_INT 1
13763: PPUSH
13764: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13768: LD_INT 21
13770: PPUSH
13771: LD_VAR 0 3
13775: PPUSH
13776: LD_INT 1
13778: PPUSH
13779: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13783: LD_INT 22
13785: PPUSH
13786: LD_VAR 0 3
13790: PPUSH
13791: LD_INT 1
13793: PPUSH
13794: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13798: LD_INT 19
13800: PPUSH
13801: LD_VAR 0 3
13805: PPUSH
13806: LD_INT 1
13808: PPUSH
13809: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13813: LD_INT 26
13815: PPUSH
13816: LD_VAR 0 3
13820: PPUSH
13821: LD_INT 1
13823: PPUSH
13824: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13828: LD_INT 54
13830: PPUSH
13831: LD_VAR 0 3
13835: PPUSH
13836: LD_INT 1
13838: PPUSH
13839: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13843: LD_INT 55
13845: PPUSH
13846: LD_VAR 0 3
13850: PPUSH
13851: LD_INT 1
13853: PPUSH
13854: CALL_OW 322
// for i = 0 to 39 do
13858: LD_ADDR_VAR 0 4
13862: PUSH
13863: DOUBLE
13864: LD_INT 0
13866: DEC
13867: ST_TO_ADDR
13868: LD_INT 39
13870: PUSH
13871: FOR_TO
13872: IFFALSE 13893
// SetRestrict ( i , side , true ) ;
13874: LD_VAR 0 4
13878: PPUSH
13879: LD_VAR 0 3
13883: PPUSH
13884: LD_INT 1
13886: PPUSH
13887: CALL_OW 324
13891: GO 13871
13893: POP
13894: POP
// end ; else
13895: GO 13972
13897: POP
// begin for i = 1 to 73 do
13898: LD_ADDR_VAR 0 4
13902: PUSH
13903: DOUBLE
13904: LD_INT 1
13906: DEC
13907: ST_TO_ADDR
13908: LD_INT 73
13910: PUSH
13911: FOR_TO
13912: IFFALSE 13933
// SetTech ( i , side , state_enabled ) ;
13914: LD_VAR 0 4
13918: PPUSH
13919: LD_VAR 0 3
13923: PPUSH
13924: LD_INT 1
13926: PPUSH
13927: CALL_OW 322
13931: GO 13911
13933: POP
13934: POP
// for i = 0 to 39 do
13935: LD_ADDR_VAR 0 4
13939: PUSH
13940: DOUBLE
13941: LD_INT 0
13943: DEC
13944: ST_TO_ADDR
13945: LD_INT 39
13947: PUSH
13948: FOR_TO
13949: IFFALSE 13970
// SetRestrict ( i , side , true ) ;
13951: LD_VAR 0 4
13955: PPUSH
13956: LD_VAR 0 3
13960: PPUSH
13961: LD_INT 1
13963: PPUSH
13964: CALL_OW 324
13968: GO 13948
13970: POP
13971: POP
// end ; end ; end ;
13972: GO 9977
13974: POP
13975: POP
// end ; end_of_file
13976: LD_VAR 0 2
13980: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13981: LD_INT 0
13983: PPUSH
13984: PPUSH
13985: PPUSH
13986: PPUSH
13987: PPUSH
13988: PPUSH
13989: PPUSH
13990: PPUSH
13991: PPUSH
// for i := 1 to 8 do
13992: LD_ADDR_VAR 0 2
13996: PUSH
13997: DOUBLE
13998: LD_INT 1
14000: DEC
14001: ST_TO_ADDR
14002: LD_INT 8
14004: PUSH
14005: FOR_TO
14006: IFFALSE 14390
// begin if Side_Positions [ i ] then
14008: LD_EXP 36
14012: PUSH
14013: LD_VAR 0 2
14017: ARRAY
14018: IFFALSE 14388
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
14020: LD_ADDR_VAR 0 7
14024: PUSH
14025: LD_INT 22
14027: PUSH
14028: LD_VAR 0 2
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 21
14039: PUSH
14040: LD_INT 1
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PPUSH
14051: CALL_OW 69
14055: PUSH
14056: LD_INT 0
14058: PLUS
14059: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14060: LD_ADDR_VAR 0 9
14064: PUSH
14065: LD_INT 22
14067: PUSH
14068: LD_VAR 0 2
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PUSH
14077: LD_INT 2
14079: PUSH
14080: LD_INT 30
14082: PUSH
14083: LD_INT 0
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 30
14092: PUSH
14093: LD_INT 1
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: LIST
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PPUSH
14109: CALL_OW 69
14113: ST_TO_ADDR
// crates := 0 ;
14114: LD_ADDR_VAR 0 4
14118: PUSH
14119: LD_INT 0
14121: ST_TO_ADDR
// oil := 0 ;
14122: LD_ADDR_VAR 0 5
14126: PUSH
14127: LD_INT 0
14129: ST_TO_ADDR
// sib := 0 ;
14130: LD_ADDR_VAR 0 6
14134: PUSH
14135: LD_INT 0
14137: ST_TO_ADDR
// if bases then
14138: LD_VAR 0 9
14142: IFFALSE 14248
// begin for j in bases do
14144: LD_ADDR_VAR 0 3
14148: PUSH
14149: LD_VAR 0 9
14153: PUSH
14154: FOR_IN
14155: IFFALSE 14246
// begin base := GetBase ( j ) ;
14157: LD_ADDR_VAR 0 8
14161: PUSH
14162: LD_VAR 0 3
14166: PPUSH
14167: CALL_OW 274
14171: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14172: LD_ADDR_VAR 0 4
14176: PUSH
14177: LD_VAR 0 4
14181: PUSH
14182: LD_VAR 0 8
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: CALL_OW 275
14194: PLUS
14195: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14196: LD_ADDR_VAR 0 5
14200: PUSH
14201: LD_VAR 0 5
14205: PUSH
14206: LD_VAR 0 8
14210: PPUSH
14211: LD_INT 2
14213: PPUSH
14214: CALL_OW 275
14218: PLUS
14219: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14220: LD_ADDR_VAR 0 6
14224: PUSH
14225: LD_VAR 0 6
14229: PUSH
14230: LD_VAR 0 8
14234: PPUSH
14235: LD_INT 3
14237: PPUSH
14238: CALL_OW 275
14242: PLUS
14243: ST_TO_ADDR
// end ;
14244: GO 14154
14246: POP
14247: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14248: LD_STRING setSpecText(
14250: PUSH
14251: LD_VAR 0 2
14255: STR
14256: PUSH
14257: LD_STRING ,
14259: STR
14260: PUSH
14261: LD_INT 2
14263: STR
14264: PUSH
14265: LD_STRING ,
14267: STR
14268: PUSH
14269: LD_VAR 0 4
14273: STR
14274: PUSH
14275: LD_STRING )
14277: STR
14278: PPUSH
14279: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14283: LD_STRING setSpecText(
14285: PUSH
14286: LD_VAR 0 2
14290: STR
14291: PUSH
14292: LD_STRING ,
14294: STR
14295: PUSH
14296: LD_INT 3
14298: STR
14299: PUSH
14300: LD_STRING ,
14302: STR
14303: PUSH
14304: LD_VAR 0 5
14308: STR
14309: PUSH
14310: LD_STRING )
14312: STR
14313: PPUSH
14314: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14318: LD_STRING setSpecText(
14320: PUSH
14321: LD_VAR 0 2
14325: STR
14326: PUSH
14327: LD_STRING ,
14329: STR
14330: PUSH
14331: LD_INT 4
14333: STR
14334: PUSH
14335: LD_STRING ,
14337: STR
14338: PUSH
14339: LD_VAR 0 6
14343: STR
14344: PUSH
14345: LD_STRING )
14347: STR
14348: PPUSH
14349: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14353: LD_STRING setSpecText(
14355: PUSH
14356: LD_VAR 0 2
14360: STR
14361: PUSH
14362: LD_STRING ,
14364: STR
14365: PUSH
14366: LD_INT 5
14368: STR
14369: PUSH
14370: LD_STRING ,
14372: STR
14373: PUSH
14374: LD_VAR 0 7
14378: STR
14379: PUSH
14380: LD_STRING )
14382: STR
14383: PPUSH
14384: CALL_OW 559
// end ; end ;
14388: GO 14005
14390: POP
14391: POP
// end ;
14392: LD_VAR 0 1
14396: RET
// every 0 0$1 do
14397: GO 14399
14399: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14400: LD_STRING setSpecLogoNumber(
14402: PUSH
14403: LD_INT 2
14405: STR
14406: PUSH
14407: LD_STRING ,
14409: STR
14410: PUSH
14411: LD_INT 1
14413: STR
14414: PUSH
14415: LD_STRING )
14417: STR
14418: PPUSH
14419: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14423: LD_STRING setSpecLogoNumber(
14425: PUSH
14426: LD_INT 3
14428: STR
14429: PUSH
14430: LD_STRING ,
14432: STR
14433: PUSH
14434: LD_INT 2
14436: STR
14437: PUSH
14438: LD_STRING )
14440: STR
14441: PPUSH
14442: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14446: LD_STRING setSpecLogoNumber(
14448: PUSH
14449: LD_INT 4
14451: STR
14452: PUSH
14453: LD_STRING ,
14455: STR
14456: PUSH
14457: LD_INT 3
14459: STR
14460: PUSH
14461: LD_STRING )
14463: STR
14464: PPUSH
14465: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14469: LD_STRING setSpecLogoNumber(
14471: PUSH
14472: LD_INT 5
14474: STR
14475: PUSH
14476: LD_STRING ,
14478: STR
14479: PUSH
14480: LD_INT 4
14482: STR
14483: PUSH
14484: LD_STRING )
14486: STR
14487: PPUSH
14488: CALL_OW 559
// end ;
14492: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14493: LD_INT 2
14495: PUSH
14496: LD_INT 30
14498: PUSH
14499: LD_INT 0
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 30
14508: PUSH
14509: LD_INT 1
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: LIST
14520: PPUSH
14521: CALL_OW 69
14525: IFFALSE 14535
14527: GO 14529
14529: DISABLE
// begin enable ;
14530: ENABLE
// UpdateSpectatorBar ;
14531: CALL 13981 0 0
// end ; end_of_file
14535: END
// var respawn , inqueue ; export function init_respawning ; begin
14536: LD_INT 0
14538: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14539: LD_ADDR_LOC 18
14543: PUSH
14544: LD_INT 1
14546: PPUSH
14547: LD_INT 8
14549: PPUSH
14550: CALL_OW 12
14554: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14555: LD_ADDR_LOC 19
14559: PUSH
14560: LD_INT 0
14562: PUSH
14563: LD_INT 0
14565: PUSH
14566: LD_INT 0
14568: PUSH
14569: LD_INT 0
14571: PUSH
14572: LD_INT 0
14574: PUSH
14575: LD_INT 0
14577: PUSH
14578: LD_INT 0
14580: PUSH
14581: LD_INT 0
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: ST_TO_ADDR
// end ;
14594: LD_VAR 0 1
14598: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14599: GO 14601
14601: DISABLE
14602: LD_INT 0
14604: PPUSH
14605: PPUSH
14606: PPUSH
// begin if respawning_time_max = 0 then
14607: LD_EXP 30
14611: PUSH
14612: LD_INT 0
14614: EQUAL
14615: IFFALSE 14619
// exit ;
14617: GO 15027
// if respawn = 8 then
14619: LD_LOC 18
14623: PUSH
14624: LD_INT 8
14626: EQUAL
14627: IFFALSE 14639
// respawn := 1 else
14629: LD_ADDR_LOC 18
14633: PUSH
14634: LD_INT 1
14636: ST_TO_ADDR
14637: GO 14653
// respawn := respawn + 1 ;
14639: LD_ADDR_LOC 18
14643: PUSH
14644: LD_LOC 18
14648: PUSH
14649: LD_INT 1
14651: PLUS
14652: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14653: LD_EXP 36
14657: PUSH
14658: LD_LOC 18
14662: ARRAY
14663: PUSH
14664: LD_LOC 19
14668: PUSH
14669: LD_LOC 18
14673: ARRAY
14674: NOT
14675: AND
14676: IFFALSE 15026
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14678: LD_ADDR_VAR 0 1
14682: PUSH
14683: LD_INT 21
14685: PUSH
14686: LD_INT 1
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PUSH
14693: LD_INT 22
14695: PUSH
14696: LD_LOC 18
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 3
14707: PUSH
14708: LD_INT 23
14710: PUSH
14711: LD_INT 0
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PPUSH
14724: CALL_OW 69
14728: ST_TO_ADDR
// if n < number_of_people then
14729: LD_VAR 0 1
14733: PUSH
14734: LD_EXP 21
14738: LESS
14739: IFFALSE 15023
// begin aktresp := respawn ;
14741: LD_ADDR_VAR 0 3
14745: PUSH
14746: LD_LOC 18
14750: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14751: LD_ADDR_LOC 19
14755: PUSH
14756: LD_LOC 19
14760: PPUSH
14761: LD_VAR 0 3
14765: PPUSH
14766: LD_INT 1
14768: PPUSH
14769: CALL_OW 1
14773: ST_TO_ADDR
// enable ;
14774: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14775: LD_EXP 29
14779: PPUSH
14780: LD_EXP 30
14784: PPUSH
14785: CALL_OW 12
14789: PPUSH
14790: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14794: LD_ADDR_LOC 19
14798: PUSH
14799: LD_LOC 19
14803: PPUSH
14804: LD_VAR 0 3
14808: PPUSH
14809: LD_INT 0
14811: PPUSH
14812: CALL_OW 1
14816: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14817: LD_ADDR_VAR 0 2
14821: PUSH
14822: LD_INT 21
14824: PUSH
14825: LD_INT 3
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 2
14834: PUSH
14835: LD_INT 30
14837: PUSH
14838: LD_INT 0
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 30
14847: PUSH
14848: LD_INT 1
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 50
14862: PUSH
14863: EMPTY
14864: LIST
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_VAR 0 3
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 69
14888: ST_TO_ADDR
// if dep = 0 then
14889: LD_VAR 0 2
14893: PUSH
14894: LD_INT 0
14896: EQUAL
14897: IFFALSE 14901
// exit ;
14899: GO 15027
// hc_name :=  ;
14901: LD_ADDR_OWVAR 26
14905: PUSH
14906: LD_STRING 
14908: ST_TO_ADDR
// hc_importance := 0 ;
14909: LD_ADDR_OWVAR 32
14913: PUSH
14914: LD_INT 0
14916: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14917: LD_INT 0
14919: PPUSH
14920: LD_INT 0
14922: PPUSH
14923: LD_EXP 22
14927: PUSH
14928: LD_INT 2
14930: DIV
14931: PPUSH
14932: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14936: LD_ADDR_OWVAR 21
14940: PUSH
14941: LD_EXP 37
14945: PUSH
14946: LD_VAR 0 3
14950: ARRAY
14951: ST_TO_ADDR
// uc_side := aktresp ;
14952: LD_ADDR_OWVAR 20
14956: PUSH
14957: LD_VAR 0 3
14961: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14962: LD_ADDR_VAR 0 2
14966: PUSH
14967: LD_VAR 0 2
14971: PUSH
14972: LD_INT 1
14974: PPUSH
14975: LD_VAR 0 2
14979: PPUSH
14980: CALL_OW 12
14984: ARRAY
14985: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14986: CALL_OW 44
14990: PPUSH
14991: LD_VAR 0 2
14995: PPUSH
14996: CALL_OW 250
15000: PPUSH
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL_OW 251
15010: PPUSH
15011: LD_INT 7
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 50
// end else
15021: GO 15024
// enable ;
15023: ENABLE
// end else
15024: GO 15027
// enable ;
15026: ENABLE
// end ; end_of_file
15027: PPOPN 3
15029: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
15030: LD_INT 0
15032: PPUSH
15033: PPUSH
15034: PPUSH
// BuildUpTime_Delay = 0 ;
15035: LD_ADDR_EXP 61
15039: PUSH
15040: LD_INT 0
15042: ST_TO_ADDR
// if not def_builduptime then
15043: LD_EXP 14
15047: NOT
15048: IFFALSE 15052
// exit ;
15050: GO 15235
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
15052: LD_ADDR_EXP 61
15056: PUSH
15057: LD_INT 8400
15059: PUSH
15060: LD_INT 2100
15062: PUSH
15063: LD_EXP 14
15067: MUL
15068: PLUS
15069: ST_TO_ADDR
// BuildUpTimeActive := true ;
15070: LD_ADDR_EXP 60
15074: PUSH
15075: LD_INT 1
15077: ST_TO_ADDR
// for i := 1 to 8 do
15078: LD_ADDR_VAR 0 2
15082: PUSH
15083: DOUBLE
15084: LD_INT 1
15086: DEC
15087: ST_TO_ADDR
15088: LD_INT 8
15090: PUSH
15091: FOR_TO
15092: IFFALSE 15233
// if Side_Positions [ i ] then
15094: LD_EXP 36
15098: PUSH
15099: LD_VAR 0 2
15103: ARRAY
15104: IFFALSE 15231
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
15106: LD_EXP 59
15110: PUSH
15111: LD_EXP 36
15115: PUSH
15116: LD_VAR 0 2
15120: ARRAY
15121: ARRAY
15122: PPUSH
15123: LD_INT 5
15125: PPUSH
15126: CALL_OW 424
// for j := 1 to 8 do
15130: LD_ADDR_VAR 0 3
15134: PUSH
15135: DOUBLE
15136: LD_INT 1
15138: DEC
15139: ST_TO_ADDR
15140: LD_INT 8
15142: PUSH
15143: FOR_TO
15144: IFFALSE 15229
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15146: LD_EXP 36
15150: PUSH
15151: LD_VAR 0 3
15155: ARRAY
15156: PUSH
15157: LD_EXP 33
15161: PUSH
15162: LD_VAR 0 2
15166: ARRAY
15167: PUSH
15168: LD_EXP 33
15172: PUSH
15173: LD_VAR 0 3
15177: ARRAY
15178: NONEQUAL
15179: PUSH
15180: LD_EXP 38
15184: NOT
15185: PUSH
15186: LD_VAR 0 2
15190: PUSH
15191: LD_VAR 0 3
15195: NONEQUAL
15196: AND
15197: OR
15198: AND
15199: IFFALSE 15227
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15201: LD_VAR 0 3
15205: PPUSH
15206: LD_EXP 59
15210: PUSH
15211: LD_EXP 36
15215: PUSH
15216: LD_VAR 0 2
15220: ARRAY
15221: ARRAY
15222: PPUSH
15223: CALL_OW 333
15227: GO 15143
15229: POP
15230: POP
// end ;
15231: GO 15091
15233: POP
15234: POP
// end ;
15235: LD_VAR 0 1
15239: RET
// export function EndBuildUp ; var i , j ; begin
15240: LD_INT 0
15242: PPUSH
15243: PPUSH
15244: PPUSH
// BuildUpTimeActive := false ;
15245: LD_ADDR_EXP 60
15249: PUSH
15250: LD_INT 0
15252: ST_TO_ADDR
// for i := 1 to 8 do
15253: LD_ADDR_VAR 0 2
15257: PUSH
15258: DOUBLE
15259: LD_INT 1
15261: DEC
15262: ST_TO_ADDR
15263: LD_INT 8
15265: PUSH
15266: FOR_TO
15267: IFFALSE 15408
// if Side_Positions [ i ] then
15269: LD_EXP 36
15273: PUSH
15274: LD_VAR 0 2
15278: ARRAY
15279: IFFALSE 15406
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
15281: LD_EXP 59
15285: PUSH
15286: LD_EXP 36
15290: PUSH
15291: LD_VAR 0 2
15295: ARRAY
15296: ARRAY
15297: PPUSH
15298: LD_INT 0
15300: PPUSH
15301: CALL_OW 424
// for j := 1 to 8 do
15305: LD_ADDR_VAR 0 3
15309: PUSH
15310: DOUBLE
15311: LD_INT 1
15313: DEC
15314: ST_TO_ADDR
15315: LD_INT 8
15317: PUSH
15318: FOR_TO
15319: IFFALSE 15404
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15321: LD_EXP 36
15325: PUSH
15326: LD_VAR 0 3
15330: ARRAY
15331: PUSH
15332: LD_EXP 33
15336: PUSH
15337: LD_VAR 0 2
15341: ARRAY
15342: PUSH
15343: LD_EXP 33
15347: PUSH
15348: LD_VAR 0 3
15352: ARRAY
15353: NONEQUAL
15354: PUSH
15355: LD_EXP 38
15359: NOT
15360: PUSH
15361: LD_VAR 0 2
15365: PUSH
15366: LD_VAR 0 3
15370: NONEQUAL
15371: AND
15372: OR
15373: AND
15374: IFFALSE 15402
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15376: LD_VAR 0 3
15380: PPUSH
15381: LD_EXP 59
15385: PUSH
15386: LD_EXP 36
15390: PUSH
15391: LD_VAR 0 2
15395: ARRAY
15396: ARRAY
15397: PPUSH
15398: CALL_OW 334
15402: GO 15318
15404: POP
15405: POP
// end ;
15406: GO 15266
15408: POP
15409: POP
// end ;
15410: LD_VAR 0 1
15414: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
15415: LD_EXP 60
15419: IFFALSE 15594
15421: GO 15423
15423: DISABLE
15424: LD_INT 0
15426: PPUSH
15427: PPUSH
// begin for i := 1 to 8 do
15428: LD_ADDR_VAR 0 1
15432: PUSH
15433: DOUBLE
15434: LD_INT 1
15436: DEC
15437: ST_TO_ADDR
15438: LD_INT 8
15440: PUSH
15441: FOR_TO
15442: IFFALSE 15591
// if Side_Positions [ i ] then
15444: LD_EXP 36
15448: PUSH
15449: LD_VAR 0 1
15453: ARRAY
15454: IFFALSE 15589
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
15456: LD_ADDR_VAR 0 2
15460: PUSH
15461: LD_EXP 59
15465: PUSH
15466: LD_EXP 36
15470: PUSH
15471: LD_VAR 0 1
15475: ARRAY
15476: ARRAY
15477: PPUSH
15478: LD_INT 2
15480: PUSH
15481: LD_INT 21
15483: PUSH
15484: LD_INT 1
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 21
15493: PUSH
15494: LD_INT 2
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 22
15508: PUSH
15509: LD_OWVAR 2
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PPUSH
15522: CALL_OW 70
15526: PUSH
15527: FOR_IN
15528: IFFALSE 15587
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
15530: LD_EXP 33
15534: PUSH
15535: LD_VAR 0 1
15539: ARRAY
15540: PUSH
15541: LD_EXP 33
15545: PUSH
15546: LD_OWVAR 2
15550: ARRAY
15551: NONEQUAL
15552: PUSH
15553: LD_EXP 38
15557: NOT
15558: PUSH
15559: LD_VAR 0 1
15563: PUSH
15564: LD_OWVAR 2
15568: NONEQUAL
15569: AND
15570: OR
15571: IFFALSE 15585
// ComMoveToArea ( un , BuildUpEscape ) ;
15573: LD_VAR 0 2
15577: PPUSH
15578: LD_INT 17
15580: PPUSH
15581: CALL_OW 113
15585: GO 15527
15587: POP
15588: POP
15589: GO 15441
15591: POP
15592: POP
// enable ;
15593: ENABLE
// end ;
15594: PPOPN 2
15596: END
// every 0 0$1 trigger def_builduptime do
15597: LD_EXP 14
15601: IFFALSE 15627
15603: GO 15605
15605: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15606: LD_INT 8400
15608: PUSH
15609: LD_EXP 14
15613: PUSH
15614: LD_INT 2100
15616: MUL
15617: PLUS
15618: PPUSH
15619: CALL_OW 67
// EndBuildUp ;
15623: CALL 15240 0 0
// end ;
15627: END
