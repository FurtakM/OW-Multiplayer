// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime , def_Sheik , def_Mastodont ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , Sheik , Mastodont ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 18
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 36
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 33
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 37
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 35
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 34
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 18
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 2 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 2
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 36
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 33
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 37
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 35
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 34
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 38
 372: PUSH
 373: LD_EXP 33
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 626
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_Sheik = GetMultiplayerSetting ( 21 ) ;
 577: LD_ADDR_EXP 15
 581: PUSH
 582: LD_INT 21
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 590: LD_ADDR_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_mastodont := GetMultiplayerSetting ( 23 ) ;
 603: LD_ADDR_EXP 16
 607: PUSH
 608: LD_INT 23
 610: PPUSH
 611: CALL_OW 426
 615: ST_TO_ADDR
// def_win_rules = 0 ;
 616: LD_ADDR_EXP 32
 620: PUSH
 621: LD_INT 0
 623: ST_TO_ADDR
// end else
 624: GO 774
// begin Randomize ;
 626: CALL_OW 10
// def_base_level := 2 ;
 630: LD_ADDR_EXP 1
 634: PUSH
 635: LD_INT 2
 637: ST_TO_ADDR
// def_amount_of_people := 2 ;
 638: LD_ADDR_EXP 2
 642: PUSH
 643: LD_INT 2
 645: ST_TO_ADDR
// def_skill_level := 1 ;
 646: LD_ADDR_EXP 3
 650: PUSH
 651: LD_INT 1
 653: ST_TO_ADDR
// def_starting_resources := 2 ;
 654: LD_ADDR_EXP 4
 658: PUSH
 659: LD_INT 2
 661: ST_TO_ADDR
// def_shipments_density := 50 ;
 662: LD_ADDR_EXP 5
 666: PUSH
 667: LD_INT 50
 669: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
 670: LD_ADDR_EXP 6
 674: PUSH
 675: LD_INT 1
 677: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 678: LD_ADDR_EXP 7
 682: PUSH
 683: LD_INT 2
 685: ST_TO_ADDR
// def_shared_vision := 1 ;
 686: LD_ADDR_EXP 8
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// def_morale_flags := 1 ;
 694: LD_ADDR_EXP 9
 698: PUSH
 699: LD_INT 1
 701: ST_TO_ADDR
// def_siberite_detection := 1 ;
 702: LD_ADDR_EXP 10
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// def_people_respawning := 2 ;
 710: LD_ADDR_EXP 11
 714: PUSH
 715: LD_INT 2
 717: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 718: LD_ADDR_EXP 12
 722: PUSH
 723: LD_INT 3
 725: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 726: LD_ADDR_EXP 13
 730: PUSH
 731: LD_INT 2
 733: ST_TO_ADDR
// def_builduptime := 1 ;
 734: LD_ADDR_EXP 14
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_Sheik = 2 ;
 742: LD_ADDR_EXP 15
 746: PUSH
 747: LD_INT 2
 749: ST_TO_ADDR
// tech_level = 4 ;
 750: LD_ADDR_VAR 0 3
 754: PUSH
 755: LD_INT 4
 757: ST_TO_ADDR
// def_mastodont := 0 ;
 758: LD_ADDR_EXP 16
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_win_rules = 0 ;
 766: LD_ADDR_EXP 32
 770: PUSH
 771: LD_INT 0
 773: ST_TO_ADDR
// end ; if isSGUI then
 774: LD_OWVAR 83
 778: IFFALSE 786
// setMpTechs ( ) else
 780: CALL 9841 0 0
 784: GO 799
// SetMpTechLevel ( tech_level + 1 ) ;
 786: LD_VAR 0 3
 790: PUSH
 791: LD_INT 1
 793: PLUS
 794: PPUSH
 795: CALL 9988 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 799: LD_ADDR_EXP 19
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 1
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_EXP 1
 822: PUSH
 823: LD_INT 1
 825: PLUS
 826: ARRAY
 827: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 828: LD_ADDR_EXP 20
 832: PUSH
 833: LD_INT 0
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 3
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_EXP 1
 851: PUSH
 852: LD_INT 1
 854: PLUS
 855: ARRAY
 856: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 857: LD_ADDR_EXP 21
 861: PUSH
 862: LD_INT 9
 864: PUSH
 865: LD_INT 12
 867: PUSH
 868: LD_INT 15
 870: PUSH
 871: LD_INT 24
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: PUSH
 880: LD_EXP 2
 884: PUSH
 885: LD_INT 1
 887: PLUS
 888: ARRAY
 889: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 890: LD_ADDR_EXP 22
 894: PUSH
 895: LD_INT 2
 897: PUSH
 898: LD_INT 3
 900: PUSH
 901: LD_INT 4
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_EXP 3
 917: PUSH
 918: LD_INT 1
 920: PLUS
 921: ARRAY
 922: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 923: LD_ADDR_EXP 24
 927: PUSH
 928: LD_INT 0
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 30
 944: PUSH
 945: LD_INT 0
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: LIST
 955: PUSH
 956: LD_INT 50
 958: PUSH
 959: LD_INT 20
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: PUSH
 970: LD_INT 80
 972: PUSH
 973: LD_INT 40
 975: PUSH
 976: LD_INT 20
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: PUSH
 990: LD_EXP 4
 994: PUSH
 995: LD_INT 1
 997: PLUS
 998: ARRAY
 999: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1000: LD_ADDR_EXP 23
1004: PUSH
1005: LD_INT 10
1007: PUSH
1008: EMPTY
1009: LIST
1010: PUSH
1011: LD_INT 7
1013: PUSH
1014: LD_INT 14
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 6
1023: PUSH
1024: LD_INT 12
1026: PUSH
1027: LD_INT 18
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 10
1040: PUSH
1041: LD_INT 15
1043: PUSH
1044: LD_INT 20
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_EXP 4
1063: PUSH
1064: LD_INT 1
1066: PLUS
1067: ARRAY
1068: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1069: LD_ADDR_EXP 25
1073: PUSH
1074: LD_INT 150
1076: PUSH
1077: LD_EXP 5
1081: PUSH
1082: LD_INT 1
1084: PLUS
1085: MINUS
1086: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1087: LD_ADDR_EXP 29
1091: PUSH
1092: LD_INT 0
1094: PUSH
1095: LD_INT 10500
1097: PUSH
1098: LD_INT 6300
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_EXP 11
1110: PUSH
1111: LD_INT 1
1113: PLUS
1114: ARRAY
1115: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1116: LD_ADDR_EXP 30
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: LD_INT 31500
1126: PUSH
1127: LD_INT 10500
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_EXP 11
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1145: LD_ADDR_EXP 27
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: LD_INT 3
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_EXP 12
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: ARRAY
1177: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1178: LD_ADDR_EXP 26
1182: PUSH
1183: LD_INT 1
1185: NEG
1186: PUSH
1187: LD_INT 350
1189: PUSH
1190: LD_INT 700
1192: PUSH
1193: LD_INT 1400
1195: PUSH
1196: LD_INT 0
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: LIST
1203: LIST
1204: LIST
1205: PUSH
1206: LD_EXP 9
1210: PUSH
1211: LD_INT 1
1213: PLUS
1214: ARRAY
1215: ST_TO_ADDR
// battle_flags_id := [ ] ;
1216: LD_ADDR_EXP 46
1220: PUSH
1221: EMPTY
1222: ST_TO_ADDR
// Sheik := [ 0 , 1 , 2 ] [ def_Sheik + 1 ] ;
1223: LD_ADDR_EXP 47
1227: PUSH
1228: LD_INT 0
1230: PUSH
1231: LD_INT 1
1233: PUSH
1234: LD_INT 2
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: PUSH
1242: LD_EXP 15
1246: PUSH
1247: LD_INT 1
1249: PLUS
1250: ARRAY
1251: ST_TO_ADDR
// Mastodont := 8 ;
1252: LD_ADDR_EXP 48
1256: PUSH
1257: LD_INT 8
1259: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1260: LD_EXP 13
1264: PUSH
1265: LD_INT 0
1267: EQUAL
1268: IFFALSE 1280
// siberite_bomb_Delay = 0 else
1270: LD_ADDR_EXP 31
1274: PUSH
1275: LD_INT 0
1277: ST_TO_ADDR
1278: GO 1302
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1280: LD_ADDR_EXP 31
1284: PUSH
1285: LD_EXP 13
1289: PUSH
1290: LD_INT 1
1292: MINUS
1293: PUSH
1294: LD_INT 21000
1296: MUL
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ST_TO_ADDR
// end ;
1302: LD_VAR 0 1
1306: RET
// function init_map ; var i , j ; begin
1307: LD_INT 0
1309: PPUSH
1310: PPUSH
1311: PPUSH
// normal_oil_deposits_locations := [ [ 61 , 60 ] , [ 105 , 67 ] , [ 106 , 43 ] , [ 220 , 10 ] , [ 188 , 284 ] , [ 278 , 241 ] , [ 277 , 204 ] , [ 320 , 220 ] ] ;
1312: LD_ADDR_EXP 42
1316: PUSH
1317: LD_INT 61
1319: PUSH
1320: LD_INT 60
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 105
1329: PUSH
1330: LD_INT 67
1332: PUSH
1333: EMPTY
1334: LIST
1335: LIST
1336: PUSH
1337: LD_INT 106
1339: PUSH
1340: LD_INT 43
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 220
1349: PUSH
1350: LD_INT 10
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: LD_INT 188
1359: PUSH
1360: LD_INT 284
1362: PUSH
1363: EMPTY
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 278
1369: PUSH
1370: LD_INT 241
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 277
1379: PUSH
1380: LD_INT 204
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: LD_INT 320
1389: PUSH
1390: LD_INT 220
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: LIST
1406: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 36 , 57 ] , [ 98 , 53 ] , [ 106 , 12 ] , [ 247 , 20 ] , [ 139 , 263 ] , [ 280 , 280 ] , [ 274 , 215 ] , [ 345 , 223 ] ] ;
1407: LD_ADDR_EXP 43
1411: PUSH
1412: LD_INT 36
1414: PUSH
1415: LD_INT 57
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 98
1424: PUSH
1425: LD_INT 53
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 106
1434: PUSH
1435: LD_INT 12
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 247
1444: PUSH
1445: LD_INT 20
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 139
1454: PUSH
1455: LD_INT 263
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 280
1464: PUSH
1465: LD_INT 280
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 274
1474: PUSH
1475: LD_INT 215
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 345
1484: PUSH
1485: LD_INT 223
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 52 , 91 ] , [ 129 , 74 ] , [ 93 , 16 ] , [ 244 , 38 ] , [ 146 , 250 ] , [ 300 , 276 ] , [ 253 , 200 ] , [ 330 , 190 ] ] ;
1502: LD_ADDR_EXP 44
1506: PUSH
1507: LD_INT 52
1509: PUSH
1510: LD_INT 91
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: LD_INT 129
1519: PUSH
1520: LD_INT 74
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PUSH
1527: LD_INT 93
1529: PUSH
1530: LD_INT 16
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PUSH
1537: LD_INT 244
1539: PUSH
1540: LD_INT 38
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 146
1549: PUSH
1550: LD_INT 250
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: LD_INT 300
1559: PUSH
1560: LD_INT 276
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 253
1569: PUSH
1570: LD_INT 200
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 330
1579: PUSH
1580: LD_INT 190
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 88 , 88 ] , [ 117 , 103 ] , [ 137 , 45 ] , [ 193 , 3 ] , [ 202 , 296 ] , [ 247 , 239 ] , [ 270 , 169 ] , [ 293 , 186 ] ] ;
1597: LD_ADDR_EXP 45
1601: PUSH
1602: LD_INT 88
1604: PUSH
1605: LD_INT 88
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 117
1614: PUSH
1615: LD_INT 103
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: LD_INT 137
1624: PUSH
1625: LD_INT 45
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: PUSH
1632: LD_INT 193
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 202
1644: PUSH
1645: LD_INT 296
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: LD_INT 247
1654: PUSH
1655: LD_INT 239
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 270
1664: PUSH
1665: LD_INT 169
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: LD_INT 293
1674: PUSH
1675: LD_INT 186
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: ST_TO_ADDR
// depot_def := [ [ 58 , 73 , 2 ] , [ 116 , 79 , 3 ] , [ 110 , 30 , 1 ] , [ 223 , 25 , 3 ] , [ 168 , 266 , 0 ] , [ 276 , 256 , 4 ] , [ 262 , 189 , 0 ] , [ 324 , 203 , 5 ] ] ;
1692: LD_ADDR_EXP 39
1696: PUSH
1697: LD_INT 58
1699: PUSH
1700: LD_INT 73
1702: PUSH
1703: LD_INT 2
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 116
1713: PUSH
1714: LD_INT 79
1716: PUSH
1717: LD_INT 3
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 110
1727: PUSH
1728: LD_INT 30
1730: PUSH
1731: LD_INT 1
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 223
1741: PUSH
1742: LD_INT 25
1744: PUSH
1745: LD_INT 3
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 168
1755: PUSH
1756: LD_INT 266
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 276
1769: PUSH
1770: LD_INT 256
1772: PUSH
1773: LD_INT 4
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 262
1783: PUSH
1784: LD_INT 189
1786: PUSH
1787: LD_INT 0
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: LD_INT 324
1797: PUSH
1798: LD_INT 203
1800: PUSH
1801: LD_INT 5
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: ST_TO_ADDR
// for i in depot_def do
1819: LD_ADDR_VAR 0 2
1823: PUSH
1824: LD_EXP 39
1828: PUSH
1829: FOR_IN
1830: IFFALSE 1906
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1832: LD_ADDR_EXP 41
1836: PUSH
1837: LD_EXP 41
1841: PUSH
1842: LD_VAR 0 2
1846: PUSH
1847: LD_INT 1
1849: ARRAY
1850: PPUSH
1851: LD_VAR 0 2
1855: PUSH
1856: LD_INT 3
1858: ARRAY
1859: PPUSH
1860: LD_INT 4
1862: NEG
1863: PPUSH
1864: CALL_OW 272
1868: PUSH
1869: LD_VAR 0 2
1873: PUSH
1874: LD_INT 2
1876: ARRAY
1877: PPUSH
1878: LD_VAR 0 2
1882: PUSH
1883: LD_INT 3
1885: ARRAY
1886: PPUSH
1887: LD_INT 4
1889: NEG
1890: PPUSH
1891: CALL_OW 273
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: EMPTY
1901: LIST
1902: ADD
1903: ST_TO_ADDR
1904: GO 1829
1906: POP
1907: POP
// breastworks_def := [ [ [ 72 , 97 , 5 ] , [ 82 , 85 , 4 ] , [ 66 , 66 , 4 ] ] , [ [ 119 , 99 , 0 ] , [ 140 , 98 , 5 ] , [ 126 , 66 , 4 ] ] , [ [ 113 , 16 , 4 ] , [ 130 , 38 , 5 ] , [ 111 , 42 , 0 ] ] , [ [ 218 , 36 , 0 ] , [ 240 , 40 , 5 ] , [ 205 , 24 , 1 ] ] , [ [ 174 , 250 , 3 ] , [ 151 , 248 , 2 ] , [ 193 , 272 , 4 ] ] , [ [ 252 , 246 , 1 ] , [ 263 , 267 , 1 ] , [ 270 , 238 , 3 ] ] , [ [ 240 , 173 , 2 ] , [ 261 , 173 , 2 ] , [ 256 , 208 , 1 ] ] , [ [ 311 , 181 , 2 ] , [ 298 , 190 , 2 ] , [ 312 , 212 , 1 ] ] ] ;
1908: LD_ADDR_EXP 40
1912: PUSH
1913: LD_INT 72
1915: PUSH
1916: LD_INT 97
1918: PUSH
1919: LD_INT 5
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 82
1929: PUSH
1930: LD_INT 85
1932: PUSH
1933: LD_INT 4
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 66
1943: PUSH
1944: LD_INT 66
1946: PUSH
1947: LD_INT 4
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 119
1962: PUSH
1963: LD_INT 99
1965: PUSH
1966: LD_INT 0
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 140
1976: PUSH
1977: LD_INT 98
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: PUSH
1988: LD_INT 126
1990: PUSH
1991: LD_INT 66
1993: PUSH
1994: LD_INT 4
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 113
2009: PUSH
2010: LD_INT 16
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 130
2023: PUSH
2024: LD_INT 38
2026: PUSH
2027: LD_INT 5
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 111
2037: PUSH
2038: LD_INT 42
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 218
2056: PUSH
2057: LD_INT 36
2059: PUSH
2060: LD_INT 0
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: LD_INT 240
2070: PUSH
2071: LD_INT 40
2073: PUSH
2074: LD_INT 5
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 205
2084: PUSH
2085: LD_INT 24
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 174
2103: PUSH
2104: LD_INT 250
2106: PUSH
2107: LD_INT 3
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 151
2117: PUSH
2118: LD_INT 248
2120: PUSH
2121: LD_INT 2
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 193
2131: PUSH
2132: LD_INT 272
2134: PUSH
2135: LD_INT 4
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 252
2150: PUSH
2151: LD_INT 246
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 263
2164: PUSH
2165: LD_INT 267
2167: PUSH
2168: LD_INT 1
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 270
2178: PUSH
2179: LD_INT 238
2181: PUSH
2182: LD_INT 3
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 240
2197: PUSH
2198: LD_INT 173
2200: PUSH
2201: LD_INT 2
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 261
2211: PUSH
2212: LD_INT 173
2214: PUSH
2215: LD_INT 2
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 256
2225: PUSH
2226: LD_INT 208
2228: PUSH
2229: LD_INT 1
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 311
2244: PUSH
2245: LD_INT 181
2247: PUSH
2248: LD_INT 2
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 298
2258: PUSH
2259: LD_INT 190
2261: PUSH
2262: LD_INT 2
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 312
2272: PUSH
2273: LD_INT 212
2275: PUSH
2276: LD_INT 1
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: ST_TO_ADDR
// for i = 1 to Side_Positions do
2299: LD_ADDR_VAR 0 2
2303: PUSH
2304: DOUBLE
2305: LD_INT 1
2307: DEC
2308: ST_TO_ADDR
2309: LD_EXP 36
2313: PUSH
2314: FOR_TO
2315: IFFALSE 2438
// begin if not Side_Positions [ i ] then
2317: LD_EXP 36
2321: PUSH
2322: LD_VAR 0 2
2326: ARRAY
2327: NOT
2328: IFFALSE 2332
// continue ;
2330: GO 2314
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2332: LD_EXP 42
2336: PUSH
2337: LD_EXP 36
2341: PUSH
2342: LD_VAR 0 2
2346: ARRAY
2347: ARRAY
2348: PUSH
2349: LD_INT 1
2351: ARRAY
2352: PPUSH
2353: LD_EXP 42
2357: PUSH
2358: LD_EXP 36
2362: PUSH
2363: LD_VAR 0 2
2367: ARRAY
2368: ARRAY
2369: PUSH
2370: LD_INT 2
2372: ARRAY
2373: PPUSH
2374: LD_INT 2
2376: PPUSH
2377: CALL_OW 62
// if def_extra_oil_deposits then
2381: LD_EXP 6
2385: IFFALSE 2436
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2387: LD_EXP 43
2391: PUSH
2392: LD_EXP 36
2396: PUSH
2397: LD_VAR 0 2
2401: ARRAY
2402: ARRAY
2403: PUSH
2404: LD_INT 1
2406: ARRAY
2407: PPUSH
2408: LD_EXP 43
2412: PUSH
2413: LD_EXP 36
2417: PUSH
2418: LD_VAR 0 2
2422: ARRAY
2423: ARRAY
2424: PUSH
2425: LD_INT 2
2427: ARRAY
2428: PPUSH
2429: LD_INT 2
2431: PPUSH
2432: CALL_OW 62
// end ;
2436: GO 2314
2438: POP
2439: POP
// if def_extra_sib_deposits then
2440: LD_EXP 7
2444: IFFALSE 2591
// for i = 1 to Side_Positions do
2446: LD_ADDR_VAR 0 2
2450: PUSH
2451: DOUBLE
2452: LD_INT 1
2454: DEC
2455: ST_TO_ADDR
2456: LD_EXP 36
2460: PUSH
2461: FOR_TO
2462: IFFALSE 2589
// begin if not Side_Positions [ i ] then
2464: LD_EXP 36
2468: PUSH
2469: LD_VAR 0 2
2473: ARRAY
2474: NOT
2475: IFFALSE 2479
// continue ;
2477: GO 2461
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2479: LD_EXP 44
2483: PUSH
2484: LD_EXP 36
2488: PUSH
2489: LD_VAR 0 2
2493: ARRAY
2494: ARRAY
2495: PUSH
2496: LD_INT 1
2498: ARRAY
2499: PPUSH
2500: LD_EXP 44
2504: PUSH
2505: LD_EXP 36
2509: PUSH
2510: LD_VAR 0 2
2514: ARRAY
2515: ARRAY
2516: PUSH
2517: LD_INT 2
2519: ARRAY
2520: PPUSH
2521: LD_INT 3
2523: PPUSH
2524: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2528: LD_EXP 7
2532: PUSH
2533: LD_INT 2
2535: EQUAL
2536: IFFALSE 2587
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2538: LD_EXP 45
2542: PUSH
2543: LD_EXP 36
2547: PUSH
2548: LD_VAR 0 2
2552: ARRAY
2553: ARRAY
2554: PUSH
2555: LD_INT 1
2557: ARRAY
2558: PPUSH
2559: LD_EXP 45
2563: PUSH
2564: LD_EXP 36
2568: PUSH
2569: LD_VAR 0 2
2573: ARRAY
2574: ARRAY
2575: PUSH
2576: LD_INT 2
2578: ARRAY
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: CALL_OW 62
// end ;
2587: GO 2461
2589: POP
2590: POP
// end ;
2591: LD_VAR 0 1
2595: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2596: LD_INT 0
2598: PPUSH
2599: PPUSH
2600: PPUSH
// if not Team_Game then
2601: LD_EXP 38
2605: NOT
2606: IFFALSE 2704
// begin for i = 1 to 8 do
2608: LD_ADDR_VAR 0 2
2612: PUSH
2613: DOUBLE
2614: LD_INT 1
2616: DEC
2617: ST_TO_ADDR
2618: LD_INT 8
2620: PUSH
2621: FOR_TO
2622: IFFALSE 2700
// for j = 1 to 8 do
2624: LD_ADDR_VAR 0 3
2628: PUSH
2629: DOUBLE
2630: LD_INT 1
2632: DEC
2633: ST_TO_ADDR
2634: LD_INT 8
2636: PUSH
2637: FOR_TO
2638: IFFALSE 2696
// if i <> j then
2640: LD_VAR 0 2
2644: PUSH
2645: LD_VAR 0 3
2649: NONEQUAL
2650: IFFALSE 2674
// SetAttitude ( i , j , att_neutral , true ) else
2652: LD_VAR 0 2
2656: PPUSH
2657: LD_VAR 0 3
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 80
2672: GO 2694
// SetAttitude ( i , j , att_friend , true ) ;
2674: LD_VAR 0 2
2678: PPUSH
2679: LD_VAR 0 3
2683: PPUSH
2684: LD_INT 1
2686: PPUSH
2687: LD_INT 1
2689: PPUSH
2690: CALL_OW 80
2694: GO 2637
2696: POP
2697: POP
2698: GO 2621
2700: POP
2701: POP
// end else
2702: GO 2879
// begin if def_shared_vision then
2704: LD_EXP 8
2708: IFFALSE 2773
// begin for i in Teams do
2710: LD_ADDR_VAR 0 2
2714: PUSH
2715: LD_EXP 34
2719: PUSH
2720: FOR_IN
2721: IFFALSE 2771
// for j = 2 to i do
2723: LD_ADDR_VAR 0 3
2727: PUSH
2728: DOUBLE
2729: LD_INT 2
2731: DEC
2732: ST_TO_ADDR
2733: LD_VAR 0 2
2737: PUSH
2738: FOR_TO
2739: IFFALSE 2767
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2741: LD_VAR 0 2
2745: PUSH
2746: LD_VAR 0 3
2750: ARRAY
2751: PPUSH
2752: LD_VAR 0 2
2756: PUSH
2757: LD_INT 1
2759: ARRAY
2760: PPUSH
2761: CALL_OW 343
2765: GO 2738
2767: POP
2768: POP
2769: GO 2720
2771: POP
2772: POP
// end ; for i = 1 to 8 do
2773: LD_ADDR_VAR 0 2
2777: PUSH
2778: DOUBLE
2779: LD_INT 1
2781: DEC
2782: ST_TO_ADDR
2783: LD_INT 8
2785: PUSH
2786: FOR_TO
2787: IFFALSE 2877
// for j = 1 to 8 do
2789: LD_ADDR_VAR 0 3
2793: PUSH
2794: DOUBLE
2795: LD_INT 1
2797: DEC
2798: ST_TO_ADDR
2799: LD_INT 8
2801: PUSH
2802: FOR_TO
2803: IFFALSE 2873
// if Side_Teams [ i ] = Side_Teams [ j ] then
2805: LD_EXP 33
2809: PUSH
2810: LD_VAR 0 2
2814: ARRAY
2815: PUSH
2816: LD_EXP 33
2820: PUSH
2821: LD_VAR 0 3
2825: ARRAY
2826: EQUAL
2827: IFFALSE 2851
// SetAttitude ( i , j , att_friend , true ) else
2829: LD_VAR 0 2
2833: PPUSH
2834: LD_VAR 0 3
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: LD_INT 1
2844: PPUSH
2845: CALL_OW 80
2849: GO 2871
// SetAttitude ( i , j , att_enemy , true ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_VAR 0 3
2860: PPUSH
2861: LD_INT 2
2863: PPUSH
2864: LD_INT 1
2866: PPUSH
2867: CALL_OW 80
2871: GO 2802
2873: POP
2874: POP
2875: GO 2786
2877: POP
2878: POP
// end ; end ;
2879: LD_VAR 0 1
2883: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2884: LD_INT 0
2886: PPUSH
2887: PPUSH
2888: PPUSH
2889: PPUSH
// result := [ ] ;
2890: LD_ADDR_VAR 0 7
2894: PUSH
2895: EMPTY
2896: ST_TO_ADDR
// for i := 1 to count do
2897: LD_ADDR_VAR 0 8
2901: PUSH
2902: DOUBLE
2903: LD_INT 1
2905: DEC
2906: ST_TO_ADDR
2907: LD_VAR 0 1
2911: PUSH
2912: FOR_TO
2913: IFFALSE 3461
// begin uc_direction := Rand ( 0 , 5 ) ;
2915: LD_ADDR_OWVAR 24
2919: PUSH
2920: LD_INT 0
2922: PPUSH
2923: LD_INT 5
2925: PPUSH
2926: CALL_OW 12
2930: ST_TO_ADDR
// if commander then
2931: LD_LOC 1
2935: IFFALSE 3090
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2937: LD_ADDR_OWVAR 26
2941: PUSH
2942: LD_OWVAR 19
2946: PUSH
2947: LD_OWVAR 20
2951: ARRAY
2952: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2953: LD_INT 1
2955: PPUSH
2956: LD_INT 2
2958: PPUSH
2959: CALL_OW 12
2963: PPUSH
2964: LD_VAR 0 2
2968: PPUSH
2969: LD_EXP 22
2973: PUSH
2974: LD_INT 2
2976: PLUS
2977: PPUSH
2978: CALL_OW 380
// hc_importance := 105 ;
2982: LD_ADDR_OWVAR 32
2986: PUSH
2987: LD_INT 105
2989: ST_TO_ADDR
// commander := false ;
2990: LD_ADDR_LOC 1
2994: PUSH
2995: LD_INT 0
2997: ST_TO_ADDR
// if Multiplayer then
2998: LD_OWVAR 4
3002: IFFALSE 3088
// begin if Sheik = 1 and uc_nation = 2 then
3004: LD_EXP 47
3008: PUSH
3009: LD_INT 1
3011: EQUAL
3012: PUSH
3013: LD_OWVAR 21
3017: PUSH
3018: LD_INT 2
3020: EQUAL
3021: AND
3022: IFFALSE 3050
// begin hc_gallery :=  ;
3024: LD_ADDR_OWVAR 33
3028: PUSH
3029: LD_STRING 
3031: ST_TO_ADDR
// hc_class := class_desert_warior ;
3032: LD_ADDR_OWVAR 28
3036: PUSH
3037: LD_INT 11
3039: ST_TO_ADDR
// hc_sex := sex_male ;
3040: LD_ADDR_OWVAR 27
3044: PUSH
3045: LD_INT 1
3047: ST_TO_ADDR
// end else
3048: GO 3088
// begin hc_gallery := MULTIAVATARS ;
3050: LD_ADDR_OWVAR 33
3054: PUSH
3055: LD_STRING MULTIAVATARS
3057: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3058: LD_ADDR_OWVAR 34
3062: PUSH
3063: LD_OWVAR 20
3067: PPUSH
3068: CALL_OW 525
3072: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3073: LD_ADDR_OWVAR 27
3077: PUSH
3078: LD_OWVAR 20
3082: PPUSH
3083: CALL_OW 526
3087: ST_TO_ADDR
// end ; end ; end else
3088: GO 3226
// begin hc_name :=  ;
3090: LD_ADDR_OWVAR 26
3094: PUSH
3095: LD_STRING 
3097: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3098: LD_INT 1
3100: PPUSH
3101: LD_INT 2
3103: PPUSH
3104: CALL_OW 12
3108: PPUSH
3109: LD_VAR 0 2
3113: PPUSH
3114: LD_EXP 22
3118: PPUSH
3119: CALL_OW 380
// hc_importance := 0 ;
3123: LD_ADDR_OWVAR 32
3127: PUSH
3128: LD_INT 0
3130: ST_TO_ADDR
// if cl = class_desert_warior and Sheik = 2 then
3131: LD_VAR 0 2
3135: PUSH
3136: LD_INT 11
3138: EQUAL
3139: PUSH
3140: LD_EXP 47
3144: PUSH
3145: LD_INT 2
3147: EQUAL
3148: AND
3149: IFFALSE 3204
// begin commander := true ;
3151: LD_ADDR_LOC 1
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3159: LD_INT 1
3161: PPUSH
3162: LD_INT 2
3164: PPUSH
3165: CALL_OW 12
3169: PPUSH
3170: LD_VAR 0 2
3174: PPUSH
3175: LD_EXP 22
3179: PUSH
3180: LD_INT 2
3182: PLUS
3183: PPUSH
3184: CALL_OW 380
// hc_importance := 105 ;
3188: LD_ADDR_OWVAR 32
3192: PUSH
3193: LD_INT 105
3195: ST_TO_ADDR
// commander := false ;
3196: LD_ADDR_LOC 1
3200: PUSH
3201: LD_INT 0
3203: ST_TO_ADDR
// end ; if Multiplayer then
3204: LD_OWVAR 4
3208: IFFALSE 3226
// begin hc_gallery :=  ;
3210: LD_ADDR_OWVAR 33
3214: PUSH
3215: LD_STRING 
3217: ST_TO_ADDR
// hc_face_number := 0 ;
3218: LD_ADDR_OWVAR 34
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3226: LD_ADDR_VAR 0 10
3230: PUSH
3231: CALL_OW 44
3235: ST_TO_ADDR
// if global_defined and not cl = class_desert_warior then
3236: LD_LOC 3
3240: PUSH
3241: LD_VAR 0 2
3245: PUSH
3246: LD_INT 11
3248: EQUAL
3249: NOT
3250: AND
3251: IFFALSE 3391
// begin if ( cl = class_soldier ) then
3253: LD_VAR 0 2
3257: PUSH
3258: LD_INT 1
3260: EQUAL
3261: IFFALSE 3281
// j := i + soldiers_created else
3263: LD_ADDR_VAR 0 9
3267: PUSH
3268: LD_VAR 0 8
3272: PUSH
3273: LD_LOC 4
3277: PLUS
3278: ST_TO_ADDR
3279: GO 3291
// j := i ;
3281: LD_ADDR_VAR 0 9
3285: PUSH
3286: LD_VAR 0 8
3290: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3291: LD_LOC 2
3295: PUSH
3296: LD_VAR 0 2
3300: ARRAY
3301: PUSH
3302: LD_VAR 0 9
3306: ARRAY
3307: PPUSH
3308: LD_VAR 0 10
3312: PPUSH
3313: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3317: LD_VAR 0 10
3321: PPUSH
3322: LD_INT 2
3324: PPUSH
3325: LD_LOC 2
3329: PUSH
3330: LD_VAR 0 2
3334: ARRAY
3335: PUSH
3336: LD_VAR 0 9
3340: ARRAY
3341: PPUSH
3342: LD_INT 2
3344: PPUSH
3345: CALL_OW 260
3349: PPUSH
3350: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3354: LD_VAR 0 10
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_LOC 2
3366: PUSH
3367: LD_VAR 0 2
3371: ARRAY
3372: PUSH
3373: LD_VAR 0 9
3377: ARRAY
3378: PPUSH
3379: LD_INT 1
3381: PPUSH
3382: CALL_OW 260
3386: PPUSH
3387: CALL_OW 239
// end ; if building then
3391: LD_VAR 0 6
3395: IFFALSE 3413
// PlaceHumanInUnit ( un , building ) else
3397: LD_VAR 0 10
3401: PPUSH
3402: LD_VAR 0 6
3406: PPUSH
3407: CALL_OW 52
3411: GO 3440
// PlaceUnitXYR ( un , x , y , r , false ) ;
3413: LD_VAR 0 10
3417: PPUSH
3418: LD_VAR 0 3
3422: PPUSH
3423: LD_VAR 0 4
3427: PPUSH
3428: LD_VAR 0 5
3432: PPUSH
3433: LD_INT 0
3435: PPUSH
3436: CALL_OW 50
// result := result ^ [ un ] ;
3440: LD_ADDR_VAR 0 7
3444: PUSH
3445: LD_VAR 0 7
3449: PUSH
3450: LD_VAR 0 10
3454: PUSH
3455: EMPTY
3456: LIST
3457: ADD
3458: ST_TO_ADDR
// end ;
3459: GO 2912
3461: POP
3462: POP
// if not global_defined then
3463: LD_LOC 3
3467: NOT
3468: IFFALSE 3546
// if ( global_units >= cl ) then
3470: LD_LOC 2
3474: PUSH
3475: LD_VAR 0 2
3479: GREATEREQUAL
3480: IFFALSE 3521
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3482: LD_ADDR_LOC 2
3486: PUSH
3487: LD_LOC 2
3491: PPUSH
3492: LD_VAR 0 2
3496: PPUSH
3497: LD_LOC 2
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PUSH
3508: LD_VAR 0 7
3512: ADD
3513: PPUSH
3514: CALL_OW 1
3518: ST_TO_ADDR
3519: GO 3546
// global_units := Replace ( global_units , cl , result ) ;
3521: LD_ADDR_LOC 2
3525: PUSH
3526: LD_LOC 2
3530: PPUSH
3531: LD_VAR 0 2
3535: PPUSH
3536: LD_VAR 0 7
3540: PPUSH
3541: CALL_OW 1
3545: ST_TO_ADDR
// if commander then
3546: LD_LOC 1
3550: IFFALSE 3597
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3552: LD_ADDR_EXP 49
3556: PUSH
3557: LD_EXP 49
3561: PPUSH
3562: LD_OWVAR 20
3566: PPUSH
3567: LD_EXP 49
3571: PUSH
3572: LD_OWVAR 20
3576: ARRAY
3577: PUSH
3578: LD_VAR 0 10
3582: ADD
3583: PPUSH
3584: CALL_OW 1
3588: ST_TO_ADDR
// commander := false ;
3589: LD_ADDR_LOC 1
3593: PUSH
3594: LD_INT 0
3596: ST_TO_ADDR
// end ; end ;
3597: LD_VAR 0 7
3601: RET
// function prepare_mastodonts ( n ) ; var i ; begin
3602: LD_INT 0
3604: PPUSH
3605: PPUSH
// uc_side := 0 ;
3606: LD_ADDR_OWVAR 20
3610: PUSH
3611: LD_INT 0
3613: ST_TO_ADDR
// uc_nation := 0 ;
3614: LD_ADDR_OWVAR 21
3618: PUSH
3619: LD_INT 0
3621: ST_TO_ADDR
// vc_chassis := 31 ;
3622: LD_ADDR_OWVAR 37
3626: PUSH
3627: LD_INT 31
3629: ST_TO_ADDR
// vc_control := control_rider ;
3630: LD_ADDR_OWVAR 38
3634: PUSH
3635: LD_INT 4
3637: ST_TO_ADDR
// if def_mastodont = 1 then
3638: LD_EXP 16
3642: PUSH
3643: LD_INT 1
3645: EQUAL
3646: IFFALSE 3685
// for i = 1 to n do
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: DOUBLE
3654: LD_INT 1
3656: DEC
3657: ST_TO_ADDR
3658: LD_VAR 0 1
3662: PUSH
3663: FOR_TO
3664: IFFALSE 3683
// PlaceUnitArea ( CreateVehicle , MastodontSpawn , false ) ;
3666: CALL_OW 45
3670: PPUSH
3671: LD_INT 18
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 49
3681: GO 3663
3683: POP
3684: POP
// if def_mastodont = 2 then
3685: LD_EXP 16
3689: PUSH
3690: LD_INT 2
3692: EQUAL
3693: IFFALSE 3732
// for i = 1 to n do
3695: LD_ADDR_VAR 0 3
3699: PUSH
3700: DOUBLE
3701: LD_INT 1
3703: DEC
3704: ST_TO_ADDR
3705: LD_VAR 0 1
3709: PUSH
3710: FOR_TO
3711: IFFALSE 3730
// PlaceUnitArea ( CreateVehicle , MastodontSpawn2 , false ) ;
3713: CALL_OW 45
3717: PPUSH
3718: LD_INT 19
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: CALL_OW 49
3728: GO 3710
3730: POP
3731: POP
// if def_mastodont = 3 then
3732: LD_EXP 16
3736: PUSH
3737: LD_INT 3
3739: EQUAL
3740: IFFALSE 3779
// for i = 1 to n do
3742: LD_ADDR_VAR 0 3
3746: PUSH
3747: DOUBLE
3748: LD_INT 1
3750: DEC
3751: ST_TO_ADDR
3752: LD_VAR 0 1
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3777
// PlaceUnitArea ( CreateVehicle , MastodontSpawn3 , false ) ;
3760: CALL_OW 45
3764: PPUSH
3765: LD_INT 20
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 49
3775: GO 3757
3777: POP
3778: POP
// end ;
3779: LD_VAR 0 2
3783: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
3788: PPUSH
3789: PPUSH
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
// if side in [ 0 , 9 ] then
3795: LD_VAR 0 1
3799: PUSH
3800: LD_INT 0
3802: PUSH
3803: LD_INT 9
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: IN
3810: IFFALSE 3814
// exit ;
3812: GO 4910
// pos := Side_Positions [ side ] ;
3814: LD_ADDR_VAR 0 3
3818: PUSH
3819: LD_EXP 36
3823: PUSH
3824: LD_VAR 0 1
3828: ARRAY
3829: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3830: LD_ADDR_OWVAR 21
3834: PUSH
3835: LD_EXP 37
3839: PUSH
3840: LD_VAR 0 1
3844: ARRAY
3845: ST_TO_ADDR
// uc_side := side ;
3846: LD_ADDR_OWVAR 20
3850: PUSH
3851: LD_VAR 0 1
3855: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3856: LD_ADDR_VAR 0 4
3860: PUSH
3861: LD_EXP 39
3865: PUSH
3866: LD_VAR 0 3
3870: ARRAY
3871: PUSH
3872: LD_INT 1
3874: ARRAY
3875: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3876: LD_ADDR_VAR 0 5
3880: PUSH
3881: LD_EXP 39
3885: PUSH
3886: LD_VAR 0 3
3890: ARRAY
3891: PUSH
3892: LD_INT 2
3894: ARRAY
3895: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3896: LD_ADDR_VAR 0 6
3900: PUSH
3901: LD_EXP 39
3905: PUSH
3906: LD_VAR 0 3
3910: ARRAY
3911: PUSH
3912: LD_INT 3
3914: ARRAY
3915: ST_TO_ADDR
// if is_depot then
3916: LD_EXP 19
3920: IFFALSE 4053
// begin bc_type = b_depot ;
3922: LD_ADDR_OWVAR 42
3926: PUSH
3927: LD_INT 0
3929: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3930: LD_ADDR_VAR 0 10
3934: PUSH
3935: LD_VAR 0 4
3939: PPUSH
3940: LD_VAR 0 5
3944: PPUSH
3945: LD_VAR 0 6
3949: PPUSH
3950: CALL_OW 47
3954: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3955: LD_VAR 0 10
3959: PPUSH
3960: LD_STRING @
3962: PUSH
3963: LD_VAR 0 1
3967: STR
3968: PPUSH
3969: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3973: LD_VAR 0 10
3977: PPUSH
3978: CALL_OW 274
3982: PPUSH
3983: LD_INT 1
3985: PPUSH
3986: LD_EXP 24
3990: PUSH
3991: LD_INT 1
3993: ARRAY
3994: PPUSH
3995: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3999: LD_VAR 0 10
4003: PPUSH
4004: CALL_OW 274
4008: PPUSH
4009: LD_INT 2
4011: PPUSH
4012: LD_EXP 24
4016: PUSH
4017: LD_INT 2
4019: ARRAY
4020: PPUSH
4021: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4025: LD_VAR 0 10
4029: PPUSH
4030: CALL_OW 274
4034: PPUSH
4035: LD_INT 3
4037: PPUSH
4038: LD_EXP 24
4042: PUSH
4043: LD_INT 3
4045: ARRAY
4046: PPUSH
4047: CALL_OW 277
// end else
4051: GO 4197
// begin for i := 1 to 3 do
4053: LD_ADDR_VAR 0 7
4057: PUSH
4058: DOUBLE
4059: LD_INT 1
4061: DEC
4062: ST_TO_ADDR
4063: LD_INT 3
4065: PUSH
4066: FOR_TO
4067: IFFALSE 4195
// begin r := starting_resources [ i ] ;
4069: LD_ADDR_VAR 0 8
4073: PUSH
4074: LD_EXP 24
4078: PUSH
4079: LD_VAR 0 7
4083: ARRAY
4084: ST_TO_ADDR
// while r >= 10 do
4085: LD_VAR 0 8
4089: PUSH
4090: LD_INT 10
4092: GREATEREQUAL
4093: IFFALSE 4193
// if r > 50 then
4095: LD_VAR 0 8
4099: PUSH
4100: LD_INT 50
4102: GREATER
4103: IFFALSE 4149
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4105: LD_VAR 0 7
4109: PPUSH
4110: LD_INT 5
4112: PPUSH
4113: LD_VAR 0 4
4117: PPUSH
4118: LD_VAR 0 5
4122: PPUSH
4123: LD_INT 4
4125: PPUSH
4126: LD_INT 0
4128: PPUSH
4129: CALL_OW 60
// r := r - 50 ;
4133: LD_ADDR_VAR 0 8
4137: PUSH
4138: LD_VAR 0 8
4142: PUSH
4143: LD_INT 50
4145: MINUS
4146: ST_TO_ADDR
// end else
4147: GO 4191
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4149: LD_VAR 0 7
4153: PPUSH
4154: LD_VAR 0 8
4158: PUSH
4159: LD_INT 10
4161: DIV
4162: PPUSH
4163: LD_VAR 0 4
4167: PPUSH
4168: LD_VAR 0 5
4172: PPUSH
4173: LD_INT 4
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 60
// r := 0 ;
4183: LD_ADDR_VAR 0 8
4187: PUSH
4188: LD_INT 0
4190: ST_TO_ADDR
// end ;
4191: GO 4085
// end ;
4193: GO 4066
4195: POP
4196: POP
// end ; for r in starting_crates do
4197: LD_ADDR_VAR 0 8
4201: PUSH
4202: LD_EXP 23
4206: PUSH
4207: FOR_IN
4208: IFFALSE 4240
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4210: LD_INT 1
4212: PPUSH
4213: LD_INT 5
4215: PPUSH
4216: LD_VAR 0 4
4220: PPUSH
4221: LD_VAR 0 5
4225: PPUSH
4226: LD_VAR 0 8
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 60
4238: GO 4207
4240: POP
4241: POP
// if def_morale_flags then
4242: LD_EXP 9
4246: IFFALSE 4385
// begin x := start_def [ pos ] [ 1 ] ;
4248: LD_ADDR_VAR 0 4
4252: PUSH
4253: LD_EXP 41
4257: PUSH
4258: LD_VAR 0 3
4262: ARRAY
4263: PUSH
4264: LD_INT 1
4266: ARRAY
4267: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4268: LD_ADDR_VAR 0 5
4272: PUSH
4273: LD_EXP 41
4277: PUSH
4278: LD_VAR 0 3
4282: ARRAY
4283: PUSH
4284: LD_INT 2
4286: ARRAY
4287: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4288: LD_VAR 0 4
4292: PPUSH
4293: LD_VAR 0 5
4297: PPUSH
4298: LD_INT 12
4300: PPUSH
4301: LD_INT 2
4303: PPUSH
4304: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4308: LD_ADDR_EXP 46
4312: PUSH
4313: LD_EXP 46
4317: PUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: LD_VAR 0 4
4327: PPUSH
4328: LD_VAR 0 5
4332: PPUSH
4333: LD_INT 1
4335: PUSH
4336: LD_INT 100
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: PUSH
4343: LD_INT 2
4345: PUSH
4346: LD_INT 50
4348: PUSH
4349: EMPTY
4350: LIST
4351: LIST
4352: PUSH
4353: LD_INT 3
4355: PUSH
4356: LD_INT 20
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: PUSH
4363: LD_INT 20
4365: PUSH
4366: LD_INT 100
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 418
4383: ADD
4384: ST_TO_ADDR
// end ; commander := true ;
4385: LD_ADDR_LOC 1
4389: PUSH
4390: LD_INT 1
4392: ST_TO_ADDR
// soldiers_created := 0 ;
4393: LD_ADDR_LOC 4
4397: PUSH
4398: LD_INT 0
4400: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4401: LD_ADDR_VAR 0 7
4405: PUSH
4406: DOUBLE
4407: LD_INT 1
4409: DEC
4410: ST_TO_ADDR
4411: LD_EXP 20
4415: PUSH
4416: FOR_TO
4417: IFFALSE 4570
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4419: LD_ADDR_VAR 0 4
4423: PUSH
4424: LD_EXP 40
4428: PUSH
4429: LD_VAR 0 3
4433: ARRAY
4434: PUSH
4435: LD_VAR 0 7
4439: ARRAY
4440: PUSH
4441: LD_INT 1
4443: ARRAY
4444: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4445: LD_ADDR_VAR 0 5
4449: PUSH
4450: LD_EXP 40
4454: PUSH
4455: LD_VAR 0 3
4459: ARRAY
4460: PUSH
4461: LD_VAR 0 7
4465: ARRAY
4466: PUSH
4467: LD_INT 2
4469: ARRAY
4470: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4471: LD_ADDR_VAR 0 6
4475: PUSH
4476: LD_EXP 40
4480: PUSH
4481: LD_VAR 0 3
4485: ARRAY
4486: PUSH
4487: LD_VAR 0 7
4491: ARRAY
4492: PUSH
4493: LD_INT 3
4495: ARRAY
4496: ST_TO_ADDR
// bc_type := b_breastwork ;
4497: LD_ADDR_OWVAR 42
4501: PUSH
4502: LD_INT 31
4504: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4505: LD_ADDR_VAR 0 9
4509: PUSH
4510: LD_VAR 0 4
4514: PPUSH
4515: LD_VAR 0 5
4519: PPUSH
4520: LD_VAR 0 6
4524: PPUSH
4525: CALL_OW 47
4529: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4530: LD_INT 1
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: LD_INT 0
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: LD_INT 0
4544: PPUSH
4545: LD_VAR 0 9
4549: PPUSH
4550: CALL 2884 0 6
// soldiers_created := soldiers_created + 1 ;
4554: LD_ADDR_LOC 4
4558: PUSH
4559: LD_LOC 4
4563: PUSH
4564: LD_INT 1
4566: PLUS
4567: ST_TO_ADDR
// end ;
4568: GO 4416
4570: POP
4571: POP
// x := start_def [ pos ] [ 1 ] ;
4572: LD_ADDR_VAR 0 4
4576: PUSH
4577: LD_EXP 41
4581: PUSH
4582: LD_VAR 0 3
4586: ARRAY
4587: PUSH
4588: LD_INT 1
4590: ARRAY
4591: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4592: LD_ADDR_VAR 0 5
4596: PUSH
4597: LD_EXP 41
4601: PUSH
4602: LD_VAR 0 3
4606: ARRAY
4607: PUSH
4608: LD_INT 2
4610: ARRAY
4611: ST_TO_ADDR
// if Sheik = 2 and uc_nation = nation_arabian then
4612: LD_EXP 47
4616: PUSH
4617: LD_INT 2
4619: EQUAL
4620: PUSH
4621: LD_OWVAR 21
4625: PUSH
4626: LD_INT 2
4628: EQUAL
4629: AND
4630: IFFALSE 4658
// prepare_people ( 1 , class_desert_warior , x , y , 5 , 0 ) ;
4632: LD_INT 1
4634: PPUSH
4635: LD_INT 11
4637: PPUSH
4638: LD_VAR 0 4
4642: PPUSH
4643: LD_VAR 0 5
4647: PPUSH
4648: LD_INT 5
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: CALL 2884 0 6
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4658: LD_LOC 8
4662: PUSH
4663: LD_EXP 20
4667: MINUS
4668: PPUSH
4669: LD_INT 1
4671: PPUSH
4672: LD_VAR 0 4
4676: PPUSH
4677: LD_VAR 0 5
4681: PPUSH
4682: LD_INT 5
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL 2884 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4692: LD_LOC 5
4696: PPUSH
4697: LD_INT 2
4699: PPUSH
4700: LD_VAR 0 4
4704: PPUSH
4705: LD_VAR 0 5
4709: PPUSH
4710: LD_INT 5
4712: PPUSH
4713: LD_INT 0
4715: PPUSH
4716: CALL 2884 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4720: LD_LOC 7
4724: PPUSH
4725: LD_INT 3
4727: PPUSH
4728: LD_VAR 0 4
4732: PPUSH
4733: LD_VAR 0 5
4737: PPUSH
4738: LD_INT 5
4740: PPUSH
4741: LD_INT 0
4743: PPUSH
4744: CALL 2884 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4748: LD_LOC 6
4752: PPUSH
4753: LD_INT 4
4755: PPUSH
4756: LD_VAR 0 4
4760: PPUSH
4761: LD_VAR 0 5
4765: PPUSH
4766: LD_INT 5
4768: PPUSH
4769: LD_INT 0
4771: PPUSH
4772: CALL 2884 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4776: LD_EXP 10
4780: PUSH
4781: LD_INT 20
4783: PPUSH
4784: LD_VAR 0 1
4788: PPUSH
4789: CALL_OW 321
4793: PUSH
4794: LD_INT 1
4796: EQUAL
4797: AND
4798: IFFALSE 4815
// SetTech ( tech_SibDet , side , state_researched ) ;
4800: LD_INT 20
4802: PPUSH
4803: LD_VAR 0 1
4807: PPUSH
4808: LD_INT 2
4810: PPUSH
4811: CALL_OW 322
// if def_siberite_bomb = 1 then
4815: LD_EXP 13
4819: PUSH
4820: LD_INT 1
4822: EQUAL
4823: IFFALSE 4857
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4825: LD_INT 25
4827: PPUSH
4828: LD_VAR 0 1
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4840: LD_INT 73
4842: PPUSH
4843: LD_VAR 0 1
4847: PPUSH
4848: LD_INT 1
4850: PPUSH
4851: CALL_OW 322
// end else
4855: GO 4887
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4857: LD_INT 25
4859: PPUSH
4860: LD_VAR 0 1
4864: PPUSH
4865: LD_INT 0
4867: PPUSH
4868: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4872: LD_INT 73
4874: PPUSH
4875: LD_VAR 0 1
4879: PPUSH
4880: LD_INT 0
4882: PPUSH
4883: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4887: LD_INT 24
4889: PPUSH
4890: LD_VAR 0 1
4894: PPUSH
4895: LD_INT 0
4897: PPUSH
4898: CALL_OW 322
// global_defined := true ;
4902: LD_ADDR_LOC 3
4906: PUSH
4907: LD_INT 1
4909: ST_TO_ADDR
// end ;
4910: LD_VAR 0 2
4914: RET
// function prepare_sides ; var i ; begin
4915: LD_INT 0
4917: PPUSH
4918: PPUSH
// global_units := [ ] ;
4919: LD_ADDR_LOC 2
4923: PUSH
4924: EMPTY
4925: ST_TO_ADDR
// global_defined := false ;
4926: LD_ADDR_LOC 3
4930: PUSH
4931: LD_INT 0
4933: ST_TO_ADDR
// CountClassMembers ;
4934: CALL 4999 0 0
// for i := 1 to 8 do
4938: LD_ADDR_VAR 0 2
4942: PUSH
4943: DOUBLE
4944: LD_INT 1
4946: DEC
4947: ST_TO_ADDR
4948: LD_INT 8
4950: PUSH
4951: FOR_TO
4952: IFFALSE 4977
// if Side_Positions [ i ] then
4954: LD_EXP 36
4958: PUSH
4959: LD_VAR 0 2
4963: ARRAY
4964: IFFALSE 4975
// prepare_side ( i ) ;
4966: LD_VAR 0 2
4970: PPUSH
4971: CALL 3784 0 1
4975: GO 4951
4977: POP
4978: POP
// if def_mastodont then
4979: LD_EXP 16
4983: IFFALSE 4994
// prepare_mastodonts ( Mastodont ) ;
4985: LD_EXP 48
4989: PPUSH
4990: CALL 3602 0 1
// end ;
4994: LD_VAR 0 1
4998: RET
// function CountClassMembers ; var Mode ; begin
4999: LD_INT 0
5001: PPUSH
5002: PPUSH
// if No_Mechs then
5003: LD_EXP 17
5007: IFFALSE 5019
// Mode := 2 else
5009: LD_ADDR_VAR 0 2
5013: PUSH
5014: LD_INT 2
5016: ST_TO_ADDR
5017: GO 5027
// Mode := 1 ;
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_INT 1
5026: ST_TO_ADDR
// neng := number_of_people ;
5027: LD_ADDR_LOC 5
5031: PUSH
5032: LD_EXP 21
5036: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5037: LD_ADDR_LOC 8
5041: PUSH
5042: LD_LOC 5
5046: PUSH
5047: LD_INT 4
5049: PUSH
5050: LD_INT 3
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_VAR 0 2
5061: ARRAY
5062: DIV
5063: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5064: LD_LOC 8
5068: PUSH
5069: LD_EXP 20
5073: LESS
5074: IFFALSE 5086
// nsol := number_of_breastworks ;
5076: LD_ADDR_LOC 8
5080: PUSH
5081: LD_EXP 20
5085: ST_TO_ADDR
// neng := neng - nsol ;
5086: LD_ADDR_LOC 5
5090: PUSH
5091: LD_LOC 5
5095: PUSH
5096: LD_LOC 8
5100: MINUS
5101: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5102: LD_ADDR_LOC 6
5106: PUSH
5107: LD_LOC 5
5111: PUSH
5112: LD_INT 3
5114: PUSH
5115: LD_INT 2
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PUSH
5122: LD_VAR 0 2
5126: ARRAY
5127: DIV
5128: ST_TO_ADDR
// if ( nsci < 1 ) then
5129: LD_LOC 6
5133: PUSH
5134: LD_INT 1
5136: LESS
5137: IFFALSE 5147
// nsci := 1 ;
5139: LD_ADDR_LOC 6
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// neng := neng - nsci ;
5147: LD_ADDR_LOC 5
5151: PUSH
5152: LD_LOC 5
5156: PUSH
5157: LD_LOC 6
5161: MINUS
5162: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5163: LD_ADDR_LOC 7
5167: PUSH
5168: LD_LOC 5
5172: PUSH
5173: LD_INT 2
5175: DIV
5176: PUSH
5177: LD_INT 0
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PUSH
5184: LD_VAR 0 2
5188: ARRAY
5189: ST_TO_ADDR
// neng := neng - nmech ;
5190: LD_ADDR_LOC 5
5194: PUSH
5195: LD_LOC 5
5199: PUSH
5200: LD_LOC 7
5204: MINUS
5205: ST_TO_ADDR
// if ( neng < 1 ) then
5206: LD_LOC 5
5210: PUSH
5211: LD_INT 1
5213: LESS
5214: IFFALSE 5224
// neng := 1 ;
5216: LD_ADDR_LOC 5
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// end ;
5224: LD_VAR 0 1
5228: RET
// starting begin disable ( 98 ) ;
5229: LD_INT 98
5231: DISABLE_MARKED
// disable ( 99 ) ;
5232: LD_INT 99
5234: DISABLE_MARKED
// disable ( 400 ) ;
5235: LD_INT 400
5237: DISABLE_MARKED
// disable ( 401 ) ;
5238: LD_INT 401
5240: DISABLE_MARKED
// mp_selectmsg := true ;
5241: LD_ADDR_OWVAR 13
5245: PUSH
5246: LD_INT 1
5248: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5249: CALL 68 0 0
// init_map ;
5253: CALL 1307 0 0
// init_respawning ;
5257: CALL 14565 0 0
// set_shared_visions_and_alliances ;
5261: CALL 2596 0 0
// ResetFog ;
5265: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5269: LD_OWVAR 2
5273: PPUSH
5274: CALL_OW 520
// AnimateTrees ( true ) ;
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 573
// prepare_sides ;
5285: CALL 4915 0 0
// Init_Win_Condition ;
5289: CALL 8546 0 0
// ShowTimer ;
5293: CALL 8107 0 0
// music_nat := Side_Nations [ your_side ] ;
5297: LD_ADDR_OWVAR 71
5301: PUSH
5302: LD_EXP 37
5306: PUSH
5307: LD_OWVAR 2
5311: ARRAY
5312: ST_TO_ADDR
// if IAmSpec then
5313: CALL_OW 531
5317: IFFALSE 5341
// begin fogoff ( true ) ;
5319: LD_INT 1
5321: PPUSH
5322: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
5326: LD_INT 130
5328: PPUSH
5329: LD_INT 100
5331: PPUSH
5332: CALL_OW 86
// enable ( 400 ) ;
5336: LD_INT 400
5338: ENABLE_MARKED
// end else
5339: GO 5387
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5341: LD_EXP 41
5345: PUSH
5346: LD_EXP 36
5350: PUSH
5351: LD_OWVAR 2
5355: ARRAY
5356: ARRAY
5357: PUSH
5358: LD_INT 1
5360: ARRAY
5361: PPUSH
5362: LD_EXP 41
5366: PUSH
5367: LD_EXP 36
5371: PUSH
5372: LD_OWVAR 2
5376: ARRAY
5377: ARRAY
5378: PUSH
5379: LD_INT 2
5381: ARRAY
5382: PPUSH
5383: CALL_OW 86
// end ; InitApeman ;
5387: CALL 6625 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
5391: LD_ADDR_EXP 59
5395: PUSH
5396: LD_INT 9
5398: PUSH
5399: LD_INT 10
5401: PUSH
5402: LD_INT 11
5404: PUSH
5405: LD_INT 12
5407: PUSH
5408: LD_INT 13
5410: PUSH
5411: LD_INT 14
5413: PUSH
5414: LD_INT 15
5416: PUSH
5417: LD_INT 16
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: ST_TO_ADDR
// BeginBuildUp ;
5430: CALL 15059 0 0
// end ;
5434: END
// every 0 0$1 do
5435: GO 5437
5437: DISABLE
// if ( def_siberite_bomb > 1 ) then
5438: LD_EXP 13
5442: PUSH
5443: LD_INT 1
5445: GREATER
5446: IFFALSE 5461
// begin wait ( siberite_bomb_Delay ) ;
5448: LD_EXP 31
5452: PPUSH
5453: CALL_OW 67
// EnableSibFiss ;
5457: CALL 5462 0 0
// end ;
5461: END
// function EnableSibFiss ; var i ; begin
5462: LD_INT 0
5464: PPUSH
5465: PPUSH
// for i := 1 to 8 do
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: DOUBLE
5472: LD_INT 1
5474: DEC
5475: ST_TO_ADDR
5476: LD_INT 8
5478: PUSH
5479: FOR_TO
5480: IFFALSE 5526
// if Side_Positions [ i ] then
5482: LD_EXP 36
5486: PUSH
5487: LD_VAR 0 2
5491: ARRAY
5492: IFFALSE 5524
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5494: LD_INT 25
5496: PPUSH
5497: LD_VAR 0 2
5501: PPUSH
5502: LD_INT 1
5504: PPUSH
5505: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5509: LD_INT 73
5511: PPUSH
5512: LD_VAR 0 2
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: CALL_OW 322
// end ;
5524: GO 5479
5526: POP
5527: POP
// end ; end_of_file
5528: LD_VAR 0 1
5532: RET
// every 0 0$25 + 0 0$1.0 do
5533: GO 5535
5535: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5536: LD_INT 22
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: CALL_OW 287
5546: PUSH
5547: LD_INT 200
5549: PUSH
5550: LD_EXP 25
5554: MINUS
5555: PUSH
5556: LD_INT 25
5558: DIVREAL
5559: PUSH
5560: LD_INT 5
5562: MUL
5563: LESS
5564: IFFALSE 5587
// CreateCratesArea ( Rand ( 3 , 4 ) , Between1 , true ) ;
5566: LD_INT 3
5568: PPUSH
5569: LD_INT 4
5571: PPUSH
5572: CALL_OW 12
5576: PPUSH
5577: LD_INT 22
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5587: LD_INT 23
5589: PPUSH
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 287
5597: PUSH
5598: LD_INT 200
5600: PUSH
5601: LD_EXP 25
5605: MINUS
5606: PUSH
5607: LD_INT 25
5609: DIVREAL
5610: PUSH
5611: LD_INT 5
5613: MUL
5614: LESS
5615: IFFALSE 5638
// CreateCratesArea ( Rand ( 3 , 4 ) , Between2 , true ) ;
5617: LD_INT 3
5619: PPUSH
5620: LD_INT 4
5622: PPUSH
5623: CALL_OW 12
5627: PPUSH
5628: LD_INT 23
5630: PPUSH
5631: LD_INT 1
5633: PPUSH
5634: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5638: LD_INT 24
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 287
5648: PUSH
5649: LD_INT 200
5651: PUSH
5652: LD_EXP 25
5656: MINUS
5657: PUSH
5658: LD_INT 25
5660: DIVREAL
5661: PUSH
5662: LD_INT 5
5664: MUL
5665: LESS
5666: IFFALSE 5689
// CreateCratesArea ( Rand ( 3 , 4 ) , Between3 , true ) ;
5668: LD_INT 3
5670: PPUSH
5671: LD_INT 4
5673: PPUSH
5674: CALL_OW 12
5678: PPUSH
5679: LD_INT 24
5681: PPUSH
5682: LD_INT 1
5684: PPUSH
5685: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5689: LD_INT 25
5691: PPUSH
5692: LD_INT 1
5694: PPUSH
5695: CALL_OW 287
5699: PUSH
5700: LD_INT 200
5702: PUSH
5703: LD_EXP 25
5707: MINUS
5708: PUSH
5709: LD_INT 25
5711: DIVREAL
5712: PUSH
5713: LD_INT 5
5715: MUL
5716: LESS
5717: IFFALSE 5740
// CreateCratesArea ( Rand ( 3 , 4 ) , Between4 , true ) ;
5719: LD_INT 3
5721: PPUSH
5722: LD_INT 4
5724: PPUSH
5725: CALL_OW 12
5729: PPUSH
5730: LD_INT 25
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: CALL_OW 55
// if GetResourceArea ( Ring1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5740: LD_INT 26
5742: PPUSH
5743: LD_INT 1
5745: PPUSH
5746: CALL_OW 287
5750: PUSH
5751: LD_INT 200
5753: PUSH
5754: LD_EXP 25
5758: MINUS
5759: PUSH
5760: LD_INT 50
5762: DIVREAL
5763: PUSH
5764: LD_INT 5
5766: MUL
5767: LESS
5768: IFFALSE 5791
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring1 , true ) ;
5770: LD_INT 3
5772: PPUSH
5773: LD_INT 4
5775: PPUSH
5776: CALL_OW 12
5780: PPUSH
5781: LD_INT 26
5783: PPUSH
5784: LD_INT 1
5786: PPUSH
5787: CALL_OW 55
// if GetResourceArea ( Ring2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5791: LD_INT 27
5793: PPUSH
5794: LD_INT 1
5796: PPUSH
5797: CALL_OW 287
5801: PUSH
5802: LD_INT 200
5804: PUSH
5805: LD_EXP 25
5809: MINUS
5810: PUSH
5811: LD_INT 50
5813: DIVREAL
5814: PUSH
5815: LD_INT 5
5817: MUL
5818: LESS
5819: IFFALSE 5842
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring2 , true ) ;
5821: LD_INT 3
5823: PPUSH
5824: LD_INT 4
5826: PPUSH
5827: CALL_OW 12
5831: PPUSH
5832: LD_INT 27
5834: PPUSH
5835: LD_INT 1
5837: PPUSH
5838: CALL_OW 55
// if GetResourceArea ( Ring3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5842: LD_INT 28
5844: PPUSH
5845: LD_INT 1
5847: PPUSH
5848: CALL_OW 287
5852: PUSH
5853: LD_INT 200
5855: PUSH
5856: LD_EXP 25
5860: MINUS
5861: PUSH
5862: LD_INT 50
5864: DIVREAL
5865: PUSH
5866: LD_INT 5
5868: MUL
5869: LESS
5870: IFFALSE 5893
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring3 , true ) ;
5872: LD_INT 3
5874: PPUSH
5875: LD_INT 4
5877: PPUSH
5878: CALL_OW 12
5882: PPUSH
5883: LD_INT 28
5885: PPUSH
5886: LD_INT 1
5888: PPUSH
5889: CALL_OW 55
// if GetResourceArea ( Ring4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5893: LD_INT 29
5895: PPUSH
5896: LD_INT 1
5898: PPUSH
5899: CALL_OW 287
5903: PUSH
5904: LD_INT 200
5906: PUSH
5907: LD_EXP 25
5911: MINUS
5912: PUSH
5913: LD_INT 50
5915: DIVREAL
5916: PUSH
5917: LD_INT 5
5919: MUL
5920: LESS
5921: IFFALSE 5944
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring4 , true ) ;
5923: LD_INT 3
5925: PPUSH
5926: LD_INT 4
5928: PPUSH
5929: CALL_OW 12
5933: PPUSH
5934: LD_INT 29
5936: PPUSH
5937: LD_INT 1
5939: PPUSH
5940: CALL_OW 55
// if GetResourceArea ( MZCenter , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5944: LD_INT 21
5946: PPUSH
5947: LD_INT 1
5949: PPUSH
5950: CALL_OW 287
5954: PUSH
5955: LD_INT 200
5957: PUSH
5958: LD_EXP 25
5962: MINUS
5963: PUSH
5964: LD_INT 25
5966: DIVREAL
5967: PUSH
5968: LD_INT 5
5970: MUL
5971: LESS
5972: IFFALSE 5987
// CreateCratesArea ( 5 , MZCenter , true ) ;
5974: LD_INT 5
5976: PPUSH
5977: LD_INT 21
5979: PPUSH
5980: LD_INT 1
5982: PPUSH
5983: CALL_OW 55
// enable ;
5987: ENABLE
// end ;
5988: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5989: GO 5991
5991: DISABLE
5992: LD_INT 0
5994: PPUSH
5995: PPUSH
// begin case tick of 1 .. 1 1$0 :
5996: LD_OWVAR 1
6000: PUSH
6001: LD_INT 1
6003: DOUBLE
6004: GREATEREQUAL
6005: IFFALSE 6013
6007: LD_INT 2100
6009: DOUBLE
6010: LESSEQUAL
6011: IFTRUE 6015
6013: GO 6043
6015: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
6016: LD_EXP 25
6020: PUSH
6021: LD_INT 100
6023: DIVREAL
6024: PUSH
6025: LD_INT 525
6027: PPUSH
6028: LD_INT 1050
6030: PPUSH
6031: CALL_OW 12
6035: MUL
6036: PPUSH
6037: CALL_OW 67
6041: GO 6345
6043: LD_INT 2100
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: DOUBLE
6050: GREATEREQUAL
6051: IFFALSE 6059
6053: LD_INT 10500
6055: DOUBLE
6056: LESSEQUAL
6057: IFTRUE 6061
6059: GO 6089
6061: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
6062: LD_EXP 25
6066: PUSH
6067: LD_INT 100
6069: DIVREAL
6070: PUSH
6071: LD_INT 1050
6073: PPUSH
6074: LD_INT 1750
6076: PPUSH
6077: CALL_OW 12
6081: MUL
6082: PPUSH
6083: CALL_OW 67
6087: GO 6345
6089: LD_INT 10500
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: DOUBLE
6096: GREATEREQUAL
6097: IFFALSE 6105
6099: LD_INT 21000
6101: DOUBLE
6102: LESSEQUAL
6103: IFTRUE 6107
6105: GO 6135
6107: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
6108: LD_EXP 25
6112: PUSH
6113: LD_INT 100
6115: DIVREAL
6116: PUSH
6117: LD_INT 1750
6119: PPUSH
6120: LD_INT 2100
6122: PPUSH
6123: CALL_OW 12
6127: MUL
6128: PPUSH
6129: CALL_OW 67
6133: GO 6345
6135: LD_INT 21000
6137: PUSH
6138: LD_INT 1
6140: PLUS
6141: DOUBLE
6142: GREATEREQUAL
6143: IFFALSE 6151
6145: LD_INT 42000
6147: DOUBLE
6148: LESSEQUAL
6149: IFTRUE 6153
6151: GO 6181
6153: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6154: LD_EXP 25
6158: PUSH
6159: LD_INT 100
6161: DIVREAL
6162: PUSH
6163: LD_INT 2100
6165: PPUSH
6166: LD_INT 2275
6168: PPUSH
6169: CALL_OW 12
6173: MUL
6174: PPUSH
6175: CALL_OW 67
6179: GO 6345
6181: LD_INT 42000
6183: PUSH
6184: LD_INT 1
6186: PLUS
6187: DOUBLE
6188: GREATEREQUAL
6189: IFFALSE 6197
6191: LD_INT 63000
6193: DOUBLE
6194: LESSEQUAL
6195: IFTRUE 6199
6197: GO 6227
6199: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6200: LD_EXP 25
6204: PUSH
6205: LD_INT 100
6207: DIVREAL
6208: PUSH
6209: LD_INT 2275
6211: PPUSH
6212: LD_INT 2450
6214: PPUSH
6215: CALL_OW 12
6219: MUL
6220: PPUSH
6221: CALL_OW 67
6225: GO 6345
6227: LD_INT 63000
6229: PUSH
6230: LD_INT 1
6232: PLUS
6233: DOUBLE
6234: GREATEREQUAL
6235: IFFALSE 6243
6237: LD_INT 105000
6239: DOUBLE
6240: LESSEQUAL
6241: IFTRUE 6245
6243: GO 6273
6245: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6246: LD_EXP 25
6250: PUSH
6251: LD_INT 100
6253: DIVREAL
6254: PUSH
6255: LD_INT 2450
6257: PPUSH
6258: LD_INT 2800
6260: PPUSH
6261: CALL_OW 12
6265: MUL
6266: PPUSH
6267: CALL_OW 67
6271: GO 6345
6273: LD_INT 105000
6275: PUSH
6276: LD_INT 1
6278: PLUS
6279: DOUBLE
6280: GREATEREQUAL
6281: IFFALSE 6289
6283: LD_INT 630000
6285: DOUBLE
6286: LESSEQUAL
6287: IFTRUE 6291
6289: GO 6319
6291: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
6292: LD_EXP 25
6296: PUSH
6297: LD_INT 100
6299: DIVREAL
6300: PUSH
6301: LD_INT 2800
6303: PPUSH
6304: LD_INT 3500
6306: PPUSH
6307: CALL_OW 12
6311: MUL
6312: PPUSH
6313: CALL_OW 67
6317: GO 6345
6319: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
6320: LD_EXP 25
6324: PUSH
6325: LD_INT 100
6327: DIVREAL
6328: PUSH
6329: LD_INT 3500
6331: PPUSH
6332: LD_INT 3850
6334: PPUSH
6335: CALL_OW 12
6339: MUL
6340: PPUSH
6341: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6345: LD_ADDR_VAR 0 2
6349: PUSH
6350: LD_INT 3
6352: PPUSH
6353: LD_INT 5
6355: PPUSH
6356: CALL_OW 12
6360: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6361: LD_ADDR_VAR 0 1
6365: PUSH
6366: LD_EXP 36
6370: PUSH
6371: LD_INT 0
6373: PUSH
6374: EMPTY
6375: LIST
6376: DIFF
6377: PUSH
6378: FOR_IN
6379: IFFALSE 6428
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
6381: LD_VAR 0 2
6385: PPUSH
6386: LD_EXP 41
6390: PUSH
6391: LD_VAR 0 1
6395: ARRAY
6396: PUSH
6397: LD_INT 1
6399: ARRAY
6400: PPUSH
6401: LD_EXP 41
6405: PUSH
6406: LD_VAR 0 1
6410: ARRAY
6411: PUSH
6412: LD_INT 2
6414: ARRAY
6415: PPUSH
6416: LD_INT 20
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 56
6426: GO 6378
6428: POP
6429: POP
// enable ;
6430: ENABLE
// end ; end_of_file
6431: PPOPN 2
6433: END
// every 20 20$00 trigger apemanNumber do
6434: LD_EXP 50
6438: IFFALSE 6471
6440: GO 6442
6442: DISABLE
// begin enable ;
6443: ENABLE
// if apeLevel >= 8 then
6444: LD_EXP 55
6448: PUSH
6449: LD_INT 8
6451: GREATEREQUAL
6452: IFFALSE 6457
// disable else
6454: DISABLE
6455: GO 6471
// apeLevel := apeLevel + 1 ;
6457: LD_ADDR_EXP 55
6461: PUSH
6462: LD_EXP 55
6466: PUSH
6467: LD_INT 1
6469: PLUS
6470: ST_TO_ADDR
// end ;
6471: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6472: LD_EXP 50
6476: PUSH
6477: LD_EXP 51
6481: LESS
6482: IFFALSE 6622
6484: GO 6486
6486: DISABLE
6487: LD_INT 0
6489: PPUSH
6490: PPUSH
6491: PPUSH
6492: PPUSH
// begin enable ;
6493: ENABLE
// for i := 1 to apemanPos do
6494: LD_ADDR_VAR 0 1
6498: PUSH
6499: DOUBLE
6500: LD_INT 1
6502: DEC
6503: ST_TO_ADDR
6504: LD_EXP 53
6508: PUSH
6509: FOR_TO
6510: IFFALSE 6620
// begin if apemanPlayerCount [ i ] then
6512: LD_EXP 54
6516: PUSH
6517: LD_VAR 0 1
6521: ARRAY
6522: IFFALSE 6618
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6524: LD_EXP 54
6528: PUSH
6529: LD_VAR 0 1
6533: ARRAY
6534: PUSH
6535: LD_EXP 53
6539: PUSH
6540: LD_VAR 0 1
6544: ARRAY
6545: GREATER
6546: IFFALSE 6618
// begin ape := PrepareApeman ;
6548: LD_ADDR_VAR 0 2
6552: PUSH
6553: CALL 7141 0 0
6557: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6558: LD_VAR 0 2
6562: PPUSH
6563: LD_EXP 56
6567: PUSH
6568: LD_VAR 0 1
6572: ARRAY
6573: PPUSH
6574: LD_INT 0
6576: PPUSH
6577: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6581: LD_ADDR_EXP 53
6585: PUSH
6586: LD_EXP 53
6590: PPUSH
6591: LD_VAR 0 1
6595: PPUSH
6596: LD_EXP 53
6600: PUSH
6601: LD_VAR 0 1
6605: ARRAY
6606: PUSH
6607: LD_VAR 0 2
6611: UNION
6612: PPUSH
6613: CALL_OW 1
6617: ST_TO_ADDR
// end ; end ; end ;
6618: GO 6509
6620: POP
6621: POP
// end ;
6622: PPOPN 4
6624: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6625: LD_INT 0
6627: PPUSH
6628: PPUSH
6629: PPUSH
6630: PPUSH
6631: PPUSH
6632: PPUSH
6633: PPUSH
// playersAmount := 0 ;
6634: LD_ADDR_VAR 0 3
6638: PUSH
6639: LD_INT 0
6641: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6642: LD_ADDR_VAR 0 7
6646: PUSH
6647: LD_INT 1
6649: PUSH
6650: LD_INT 2
6652: PUSH
6653: LD_INT 3
6655: PUSH
6656: LD_INT 4
6658: PUSH
6659: LD_INT 5
6661: PUSH
6662: LD_INT 6
6664: PUSH
6665: LD_INT 7
6667: PUSH
6668: LD_INT 8
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6681: LD_ADDR_EXP 56
6685: PUSH
6686: LD_INT 0
6688: PUSH
6689: LD_INT 0
6691: PUSH
6692: LD_INT 0
6694: PUSH
6695: LD_INT 0
6697: PUSH
6698: LD_INT 0
6700: PUSH
6701: LD_INT 0
6703: PUSH
6704: LD_INT 0
6706: PUSH
6707: LD_INT 0
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: ST_TO_ADDR
// for j = 1 to Side_Positions do
6720: LD_ADDR_VAR 0 4
6724: PUSH
6725: DOUBLE
6726: LD_INT 1
6728: DEC
6729: ST_TO_ADDR
6730: LD_EXP 36
6734: PUSH
6735: FOR_TO
6736: IFFALSE 6803
// if Side_Positions [ j ] then
6738: LD_EXP 36
6742: PUSH
6743: LD_VAR 0 4
6747: ARRAY
6748: IFFALSE 6801
// begin playersAmount := playersAmount + 1 ;
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_VAR 0 3
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6764: LD_ADDR_EXP 56
6768: PUSH
6769: LD_EXP 56
6773: PPUSH
6774: LD_VAR 0 4
6778: PPUSH
6779: LD_VAR 0 7
6783: PUSH
6784: LD_EXP 36
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: ARRAY
6795: PPUSH
6796: CALL_OW 1
6800: ST_TO_ADDR
// end ;
6801: GO 6735
6803: POP
6804: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6805: LD_ADDR_EXP 52
6809: PUSH
6810: LD_INT 3
6812: PUSH
6813: LD_EXP 27
6817: MUL
6818: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6819: LD_ADDR_EXP 50
6823: PUSH
6824: LD_VAR 0 3
6828: PUSH
6829: LD_EXP 52
6833: MUL
6834: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6835: LD_ADDR_EXP 51
6839: PUSH
6840: LD_EXP 50
6844: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6845: LD_ADDR_EXP 53
6849: PUSH
6850: LD_INT 0
6852: PUSH
6853: LD_INT 0
6855: PUSH
6856: LD_INT 0
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: LD_INT 0
6864: PUSH
6865: LD_INT 0
6867: PUSH
6868: LD_INT 0
6870: PUSH
6871: LD_INT 0
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6884: LD_ADDR_EXP 54
6888: PUSH
6889: LD_INT 0
6891: PUSH
6892: LD_INT 0
6894: PUSH
6895: LD_INT 0
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: LD_INT 0
6903: PUSH
6904: LD_INT 0
6906: PUSH
6907: LD_INT 0
6909: PUSH
6910: LD_INT 0
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: ST_TO_ADDR
// apeLevel := 1 ;
6923: LD_ADDR_EXP 55
6927: PUSH
6928: LD_INT 1
6930: ST_TO_ADDR
// if not apemanNumber then
6931: LD_EXP 50
6935: NOT
6936: IFFALSE 6940
// exit ;
6938: GO 7136
// for i := 1 to apemanPerPlayer do
6940: LD_ADDR_VAR 0 2
6944: PUSH
6945: DOUBLE
6946: LD_INT 1
6948: DEC
6949: ST_TO_ADDR
6950: LD_EXP 52
6954: PUSH
6955: FOR_TO
6956: IFFALSE 7134
// begin for j := 1 to Side_Positions do
6958: LD_ADDR_VAR 0 4
6962: PUSH
6963: DOUBLE
6964: LD_INT 1
6966: DEC
6967: ST_TO_ADDR
6968: LD_EXP 36
6972: PUSH
6973: FOR_TO
6974: IFFALSE 7130
// if Side_Positions [ j ] then
6976: LD_EXP 36
6980: PUSH
6981: LD_VAR 0 4
6985: ARRAY
6986: IFFALSE 7128
// begin pos := Side_Positions [ j ] ;
6988: LD_ADDR_VAR 0 6
6992: PUSH
6993: LD_EXP 36
6997: PUSH
6998: LD_VAR 0 4
7002: ARRAY
7003: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7004: LD_ADDR_EXP 54
7008: PUSH
7009: LD_EXP 54
7013: PPUSH
7014: LD_VAR 0 4
7018: PPUSH
7019: LD_EXP 54
7023: PUSH
7024: LD_VAR 0 4
7028: ARRAY
7029: PUSH
7030: LD_INT 1
7032: PLUS
7033: PPUSH
7034: CALL_OW 1
7038: ST_TO_ADDR
// ape := PrepareApeman ;
7039: LD_ADDR_VAR 0 5
7043: PUSH
7044: CALL 7141 0 0
7048: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7049: LD_ADDR_EXP 53
7053: PUSH
7054: LD_EXP 53
7058: PPUSH
7059: LD_VAR 0 4
7063: PPUSH
7064: LD_EXP 53
7068: PUSH
7069: LD_VAR 0 4
7073: ARRAY
7074: PPUSH
7075: LD_EXP 53
7079: PUSH
7080: LD_VAR 0 4
7084: ARRAY
7085: PUSH
7086: LD_INT 1
7088: PLUS
7089: PPUSH
7090: LD_VAR 0 5
7094: PPUSH
7095: CALL_OW 1
7099: PPUSH
7100: CALL_OW 1
7104: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7105: LD_VAR 0 5
7109: PPUSH
7110: LD_EXP 56
7114: PUSH
7115: LD_VAR 0 4
7119: ARRAY
7120: PPUSH
7121: LD_INT 0
7123: PPUSH
7124: CALL_OW 49
// end ;
7128: GO 6973
7130: POP
7131: POP
// end ;
7132: GO 6955
7134: POP
7135: POP
// end ;
7136: LD_VAR 0 1
7140: RET
// export function PrepareApeman ; var bonus ; begin
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
// uc_side := 0 ;
7145: LD_ADDR_OWVAR 20
7149: PUSH
7150: LD_INT 0
7152: ST_TO_ADDR
// uc_nation := 0 ;
7153: LD_ADDR_OWVAR 21
7157: PUSH
7158: LD_INT 0
7160: ST_TO_ADDR
// InitHc ;
7161: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_INT 1
7172: NEG
7173: PUSH
7174: LD_INT 0
7176: PUSH
7177: LD_INT 1
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_OWVAR 1
7189: PUSH
7190: LD_INT 3
7192: MOD
7193: PUSH
7194: LD_INT 1
7196: PLUS
7197: ARRAY
7198: ST_TO_ADDR
// hc_class := class_apeman ;
7199: LD_ADDR_OWVAR 28
7203: PUSH
7204: LD_INT 12
7206: ST_TO_ADDR
// hc_gallery :=  ;
7207: LD_ADDR_OWVAR 33
7211: PUSH
7212: LD_STRING 
7214: ST_TO_ADDR
// hc_name :=  ;
7215: LD_ADDR_OWVAR 26
7219: PUSH
7220: LD_STRING 
7222: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7223: LD_ADDR_OWVAR 31
7227: PUSH
7228: LD_EXP 55
7232: PUSH
7233: LD_VAR 0 2
7237: PLUS
7238: PUSH
7239: LD_EXP 55
7243: PUSH
7244: LD_VAR 0 2
7248: PLUS
7249: PUSH
7250: LD_EXP 55
7254: PUSH
7255: LD_VAR 0 2
7259: PLUS
7260: PUSH
7261: LD_EXP 55
7265: PUSH
7266: LD_VAR 0 2
7270: PLUS
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7278: LD_ADDR_OWVAR 35
7282: PUSH
7283: LD_INT 10
7285: PUSH
7286: LD_VAR 0 2
7290: MUL
7291: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7292: LD_ADDR_OWVAR 29
7296: PUSH
7297: LD_INT 12
7299: PUSH
7300: LD_INT 10
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: ST_TO_ADDR
// result := CreateHuman ;
7307: LD_ADDR_VAR 0 1
7311: PUSH
7312: CALL_OW 44
7316: ST_TO_ADDR
// end ;
7317: LD_VAR 0 1
7321: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7322: LD_INT 0
7324: PPUSH
7325: PPUSH
7326: PPUSH
// if not ape then
7327: LD_VAR 0 1
7331: NOT
7332: IFFALSE 7336
// exit ;
7334: GO 7461
// side := GetSide ( ape ) ;
7336: LD_ADDR_VAR 0 3
7340: PUSH
7341: LD_VAR 0 1
7345: PPUSH
7346: CALL_OW 255
7350: ST_TO_ADDR
// if not side then
7351: LD_VAR 0 3
7355: NOT
7356: IFFALSE 7410
// begin for i = 1 to apemanPos do
7358: LD_ADDR_VAR 0 4
7362: PUSH
7363: DOUBLE
7364: LD_INT 1
7366: DEC
7367: ST_TO_ADDR
7368: LD_EXP 53
7372: PUSH
7373: FOR_TO
7374: IFFALSE 7408
// if ape in apemanPos [ i ] then
7376: LD_VAR 0 1
7380: PUSH
7381: LD_EXP 53
7385: PUSH
7386: LD_VAR 0 4
7390: ARRAY
7391: IN
7392: IFFALSE 7406
// begin side := i ;
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_VAR 0 4
7403: ST_TO_ADDR
// break ;
7404: GO 7408
// end ;
7406: GO 7373
7408: POP
7409: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7410: LD_ADDR_EXP 53
7414: PUSH
7415: LD_EXP 53
7419: PPUSH
7420: LD_VAR 0 3
7424: PPUSH
7425: LD_EXP 53
7429: PUSH
7430: LD_VAR 0 3
7434: ARRAY
7435: PUSH
7436: LD_VAR 0 1
7440: DIFF
7441: PPUSH
7442: CALL_OW 1
7446: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7447: LD_ADDR_EXP 50
7451: PUSH
7452: LD_EXP 50
7456: PUSH
7457: LD_INT 1
7459: MINUS
7460: ST_TO_ADDR
// end ; end_of_file
7461: LD_VAR 0 2
7465: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7466: LD_VAR 0 1
7470: PPUSH
7471: CALL_OW 266
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: LD_INT 1
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: IN
7486: IFFALSE 7511
// SetBName ( b , @ & GetSide ( b ) ) ;
7488: LD_VAR 0 1
7492: PPUSH
7493: LD_STRING @
7495: PUSH
7496: LD_VAR 0 1
7500: PPUSH
7501: CALL_OW 255
7505: STR
7506: PPUSH
7507: CALL_OW 500
// end ;
7511: PPOPN 2
7513: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7514: LD_VAR 0 1
7518: PPUSH
7519: CALL_OW 266
7523: PUSH
7524: LD_INT 0
7526: PUSH
7527: LD_INT 1
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: IN
7534: IFFALSE 7559
// SetBName ( b , @ & GetSide ( b ) ) ;
7536: LD_VAR 0 1
7540: PPUSH
7541: LD_STRING @
7543: PUSH
7544: LD_VAR 0 1
7548: PPUSH
7549: CALL_OW 255
7553: STR
7554: PPUSH
7555: CALL_OW 500
// end ;
7559: PPOPN 3
7561: END
// on VehicleConstructed ( veh , fac ) do var side ;
7562: LD_INT 0
7564: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 263
7574: PUSH
7575: LD_INT 5
7577: EQUAL
7578: IFFALSE 7720
// begin side := GetSide ( veh ) ;
7580: LD_ADDR_VAR 0 3
7584: PUSH
7585: LD_VAR 0 1
7589: PPUSH
7590: CALL_OW 255
7594: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7595: LD_ADDR_EXP 53
7599: PUSH
7600: LD_EXP 53
7604: PPUSH
7605: LD_VAR 0 3
7609: PPUSH
7610: LD_EXP 53
7614: PUSH
7615: LD_VAR 0 3
7619: ARRAY
7620: PPUSH
7621: LD_INT 52
7623: PUSH
7624: EMPTY
7625: LIST
7626: PPUSH
7627: CALL_OW 72
7631: PUSH
7632: LD_INT 22
7634: PUSH
7635: LD_VAR 0 3
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 2
7646: PUSH
7647: LD_INT 33
7649: PUSH
7650: LD_INT 5
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: LD_INT 25
7659: PUSH
7660: LD_INT 12
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_INT 25
7669: PUSH
7670: LD_INT 15
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PUSH
7677: LD_INT 25
7679: PUSH
7680: LD_INT 16
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 25
7689: PUSH
7690: LD_INT 17
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: PPUSH
7709: CALL_OW 69
7713: UNION
7714: PPUSH
7715: CALL_OW 1
7719: ST_TO_ADDR
// end ; end ;
7720: PPOPN 3
7722: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7723: LD_INT 0
7725: PPUSH
7726: PPUSH
7727: PPUSH
7728: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7729: LD_VAR 0 1
7733: PPUSH
7734: CALL_OW 257
7738: PUSH
7739: LD_INT 12
7741: PUSH
7742: LD_INT 15
7744: PUSH
7745: LD_INT 17
7747: PUSH
7748: LD_INT 16
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: IN
7757: PUSH
7758: LD_VAR 0 1
7762: PPUSH
7763: CALL_OW 263
7767: PUSH
7768: LD_INT 5
7770: EQUAL
7771: OR
7772: IFFALSE 7783
// ApeKilled ( j ) ;
7774: LD_VAR 0 1
7778: PPUSH
7779: CALL 7322 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7783: LD_VAR 0 1
7787: PPUSH
7788: CALL_OW 266
7792: PUSH
7793: LD_INT 0
7795: PUSH
7796: LD_INT 1
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: IN
7803: IFFALSE 7885
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7805: LD_ADDR_VAR 0 4
7809: PUSH
7810: LD_EXP 36
7814: PUSH
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 255
7824: ARRAY
7825: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7826: LD_ADDR_VAR 0 2
7830: PUSH
7831: LD_EXP 41
7835: PUSH
7836: LD_VAR 0 4
7840: ARRAY
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7846: LD_ADDR_VAR 0 3
7850: PUSH
7851: LD_EXP 41
7855: PUSH
7856: LD_VAR 0 4
7860: ARRAY
7861: PUSH
7862: LD_INT 2
7864: ARRAY
7865: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7866: LD_VAR 0 2
7870: PPUSH
7871: LD_VAR 0 3
7875: PPUSH
7876: CALL_OW 420
7880: PPUSH
7881: CALL_OW 419
// end ; end ;
7885: PPOPN 5
7887: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7888: LD_VAR 0 1
7892: PPUSH
7893: LD_VAR 0 2
7897: PPUSH
7898: LD_VAR 0 3
7902: PPUSH
7903: LD_OWVAR 2
7907: PPUSH
7908: CALL 8307 0 4
7912: PPOPN 3
7914: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7915: LD_INT 0
7917: PPUSH
7918: PPUSH
// for un in battle_flags_id do
7919: LD_ADDR_VAR 0 2
7923: PUSH
7924: LD_EXP 46
7928: PUSH
7929: FOR_IN
7930: IFFALSE 8005
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7932: LD_VAR 0 2
7936: PPUSH
7937: LD_INT 1
7939: PUSH
7940: LD_LOC 9
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 2
7951: PUSH
7952: LD_LOC 9
7956: PUSH
7957: LD_INT 2
7959: DIV
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 3
7967: PUSH
7968: LD_LOC 9
7972: PUSH
7973: LD_INT 5
7975: DIV
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 20
7983: PUSH
7984: LD_LOC 9
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PPUSH
7999: CALL_OW 423
8003: GO 7929
8005: POP
8006: POP
// end ;
8007: LD_VAR 0 1
8011: RET
// every 1 do var un ;
8012: GO 8014
8014: DISABLE
8015: LD_INT 0
8017: PPUSH
// begin if not def_morale_flags then
8018: LD_EXP 9
8022: NOT
8023: IFFALSE 8027
// exit ;
8025: GO 8104
// if not morale_decreasing_time then
8027: LD_EXP 26
8031: NOT
8032: IFFALSE 8036
// exit ;
8034: GO 8104
// strength = 100 ;
8036: LD_ADDR_LOC 9
8040: PUSH
8041: LD_INT 100
8043: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8044: LD_EXP 26
8048: PPUSH
8049: CALL_OW 67
// strength := strength - 1 ;
8053: LD_ADDR_LOC 9
8057: PUSH
8058: LD_LOC 9
8062: PUSH
8063: LD_INT 1
8065: MINUS
8066: ST_TO_ADDR
// Update_Flags ;
8067: CALL 7915 0 0
// until not strength ;
8071: LD_LOC 9
8075: NOT
8076: IFFALSE 8044
// for un in battle_flags_id do
8078: LD_ADDR_VAR 0 1
8082: PUSH
8083: LD_EXP 46
8087: PUSH
8088: FOR_IN
8089: IFFALSE 8102
// KillBattleFlag ( un ) ;
8091: LD_VAR 0 1
8095: PPUSH
8096: CALL_OW 419
8100: GO 8088
8102: POP
8103: POP
// end ; end_of_file
8104: PPOPN 1
8106: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
8107: LD_INT 0
8109: PPUSH
8110: PPUSH
// AllStrings := [ #gamespeed , game_speed - 4 ] ^ [ #Multi1x1-Time , tick ] ;
8111: LD_ADDR_VAR 0 2
8115: PUSH
8116: LD_STRING #gamespeed
8118: PUSH
8119: LD_OWVAR 65
8123: PUSH
8124: LD_INT 4
8126: MINUS
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_STRING #Multi1x1-Time
8134: PUSH
8135: LD_OWVAR 1
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: ADD
8144: ST_TO_ADDR
// if WaitServerStrings then
8145: LD_EXP 58
8149: IFFALSE 8167
// AllStrings = AllStrings ^ WaitServerStrings ;
8151: LD_ADDR_VAR 0 2
8155: PUSH
8156: LD_VAR 0 2
8160: PUSH
8161: LD_EXP 58
8165: ADD
8166: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8167: LD_INT 0
8169: PUSH
8170: LD_EXP 31
8174: PUSH
8175: LD_OWVAR 1
8179: MINUS
8180: LESSEQUAL
8181: IFFALSE 8212
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8183: LD_ADDR_VAR 0 2
8187: PUSH
8188: LD_VAR 0 2
8192: PUSH
8193: LD_STRING #allowedsibbomb
8195: PUSH
8196: LD_EXP 31
8200: PUSH
8201: LD_OWVAR 1
8205: MINUS
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: ADD
8211: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8212: LD_INT 0
8214: PUSH
8215: LD_EXP 61
8219: PUSH
8220: LD_OWVAR 1
8224: MINUS
8225: LESSEQUAL
8226: IFFALSE 8257
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
8228: LD_ADDR_VAR 0 2
8232: PUSH
8233: LD_VAR 0 2
8237: PUSH
8238: LD_STRING #builduptime
8240: PUSH
8241: LD_EXP 61
8245: PUSH
8246: LD_OWVAR 1
8250: MINUS
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: ADD
8256: ST_TO_ADDR
// if ( ExtraStrings ) then
8257: LD_EXP 57
8261: IFFALSE 8283
// AllStrings := AllStrings ^  ^ ExtraStrings ;
8263: LD_ADDR_VAR 0 2
8267: PUSH
8268: LD_VAR 0 2
8272: PUSH
8273: LD_STRING 
8275: ADD
8276: PUSH
8277: LD_EXP 57
8281: ADD
8282: ST_TO_ADDR
// Display_Strings := AllStrings ;
8283: LD_ADDR_OWVAR 47
8287: PUSH
8288: LD_VAR 0 2
8292: ST_TO_ADDR
// end ;
8293: LD_VAR 0 1
8297: RET
// every 0 0$1 do
8298: GO 8300
8300: DISABLE
// begin ShowTimer ;
8301: CALL 8107 0 0
// enable ;
8305: ENABLE
// end ; end_of_file
8306: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8307: LD_INT 0
8309: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8310: LD_VAR 0 1
8314: PPUSH
8315: CALL_OW 255
8319: PUSH
8320: LD_VAR 0 4
8324: EQUAL
8325: IFFALSE 8344
// begin SetAchievement ( ACH_RAD ) ;
8327: LD_STRING ACH_RAD
8329: PPUSH
8330: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8334: LD_STRING ACH_NL
8336: PPUSH
8337: LD_INT 1
8339: PPUSH
8340: CALL_OW 564
// end end ;
8344: LD_VAR 0 5
8348: RET
// export function SA_Win ( side ) ; begin
8349: LD_INT 0
8351: PPUSH
// case side of 1 :
8352: LD_VAR 0 1
8356: PUSH
8357: LD_INT 1
8359: DOUBLE
8360: EQUAL
8361: IFTRUE 8365
8363: GO 8378
8365: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8366: LD_STRING ACH_AH
8368: PPUSH
8369: LD_INT 1
8371: PPUSH
8372: CALL_OW 564
8376: GO 8541
8378: LD_INT 2
8380: DOUBLE
8381: EQUAL
8382: IFTRUE 8386
8384: GO 8399
8386: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8387: LD_STRING ACH_E
8389: PPUSH
8390: LD_INT 1
8392: PPUSH
8393: CALL_OW 564
8397: GO 8541
8399: LD_INT 3
8401: DOUBLE
8402: EQUAL
8403: IFTRUE 8407
8405: GO 8420
8407: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8408: LD_STRING ACH_OOL
8410: PPUSH
8411: LD_INT 1
8413: PPUSH
8414: CALL_OW 564
8418: GO 8541
8420: LD_INT 1
8422: PUSH
8423: LD_INT 2
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: DOUBLE
8430: EQUAL
8431: IFTRUE 8435
8433: GO 8460
8435: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8436: LD_STRING ACH_AH
8438: PPUSH
8439: LD_REAL  5.00000000000000E-0001
8442: PPUSH
8443: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8447: LD_STRING ACH_E
8449: PPUSH
8450: LD_REAL  5.00000000000000E-0001
8453: PPUSH
8454: CALL_OW 564
// end ; [ 2 , 3 ] :
8458: GO 8541
8460: LD_INT 2
8462: PUSH
8463: LD_INT 3
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: DOUBLE
8470: EQUAL
8471: IFTRUE 8475
8473: GO 8500
8475: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8476: LD_STRING ACH_OOL
8478: PPUSH
8479: LD_REAL  5.00000000000000E-0001
8482: PPUSH
8483: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8487: LD_STRING ACH_E
8489: PPUSH
8490: LD_REAL  5.00000000000000E-0001
8493: PPUSH
8494: CALL_OW 564
// end ; [ 3 , 1 ] :
8498: GO 8541
8500: LD_INT 3
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: DOUBLE
8510: EQUAL
8511: IFTRUE 8515
8513: GO 8540
8515: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8516: LD_STRING ACH_AH
8518: PPUSH
8519: LD_REAL  5.00000000000000E-0001
8522: PPUSH
8523: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8527: LD_STRING ACH_OOL
8529: PPUSH
8530: LD_REAL  5.00000000000000E-0001
8533: PPUSH
8534: CALL_OW 564
// end ; end ;
8538: GO 8541
8540: POP
// end ; end_of_file
8541: LD_VAR 0 2
8545: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
// enable ( 98 ) ;
8550: LD_INT 98
8552: ENABLE_MARKED
// GameEnded = false ;
8553: LD_ADDR_LOC 15
8557: PUSH
8558: LD_INT 0
8560: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8561: LD_ADDR_LOC 14
8565: PUSH
8566: LD_INT 0
8568: PUSH
8569: LD_INT 0
8571: PUSH
8572: LD_INT 0
8574: PUSH
8575: LD_INT 0
8577: PUSH
8578: LD_INT 0
8580: PUSH
8581: LD_INT 0
8583: PUSH
8584: LD_INT 0
8586: PUSH
8587: LD_INT 0
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: ST_TO_ADDR
// unfoged = false ;
8600: LD_ADDR_LOC 16
8604: PUSH
8605: LD_INT 0
8607: ST_TO_ADDR
// defeated_specs := [ ] ;
8608: LD_ADDR_LOC 17
8612: PUSH
8613: EMPTY
8614: ST_TO_ADDR
// for i = 1 to side_positions do
8615: LD_ADDR_VAR 0 2
8619: PUSH
8620: DOUBLE
8621: LD_INT 1
8623: DEC
8624: ST_TO_ADDR
8625: LD_EXP 36
8629: PUSH
8630: FOR_TO
8631: IFFALSE 8671
// if not side_positions [ i ] then
8633: LD_EXP 36
8637: PUSH
8638: LD_VAR 0 2
8642: ARRAY
8643: NOT
8644: IFFALSE 8669
// defeated = replace ( defeated , i , true ) ;
8646: LD_ADDR_LOC 14
8650: PUSH
8651: LD_LOC 14
8655: PPUSH
8656: LD_VAR 0 2
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 1
8668: ST_TO_ADDR
8669: GO 8630
8671: POP
8672: POP
// end ;
8673: LD_VAR 0 1
8677: RET
// function CanWinLoose ; begin
8678: LD_INT 0
8680: PPUSH
// Result := true ;
8681: LD_ADDR_VAR 0 1
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8689: CALL_OW 518
8693: PUSH
8694: CALL_OW 519
8698: PUSH
8699: LD_INT 0
8701: GREATER
8702: AND
8703: IFFALSE 8713
// Result := false ;
8705: LD_ADDR_VAR 0 1
8709: PUSH
8710: LD_INT 0
8712: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8713: CALL_OW 531
8717: PUSH
8718: CALL_OW 519
8722: PUSH
8723: LD_INT 1
8725: GREATER
8726: AND
8727: IFFALSE 8737
// Result := false ;
8729: LD_ADDR_VAR 0 1
8733: PUSH
8734: LD_INT 0
8736: ST_TO_ADDR
// end ;
8737: LD_VAR 0 1
8741: RET
// export function HasPower ( i ) ; var k , h ; begin
8742: LD_INT 0
8744: PPUSH
8745: PPUSH
8746: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8747: LD_VAR 0 1
8751: PPUSH
8752: CALL_OW 108
8756: NOT
8757: PUSH
8758: LD_EXP 35
8762: PUSH
8763: LD_VAR 0 1
8767: ARRAY
8768: NOT
8769: AND
8770: PUSH
8771: LD_OWVAR 4
8775: AND
8776: IFFALSE 8788
// begin result = false ;
8778: LD_ADDR_VAR 0 2
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// end else
8786: GO 9083
// case def_win_rules of 0 :
8788: LD_EXP 32
8792: PUSH
8793: LD_INT 0
8795: DOUBLE
8796: EQUAL
8797: IFTRUE 8801
8799: GO 8964
8801: POP
// if def_people_respawning then
8802: LD_EXP 11
8806: IFFALSE 8897
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8808: LD_ADDR_VAR 0 2
8812: PUSH
8813: LD_INT 22
8815: PUSH
8816: LD_VAR 0 1
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PUSH
8825: LD_INT 2
8827: PUSH
8828: LD_INT 21
8830: PUSH
8831: LD_INT 1
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PUSH
8838: LD_INT 33
8840: PUSH
8841: LD_INT 3
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 33
8850: PUSH
8851: LD_INT 5
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PUSH
8858: LD_INT 30
8860: PUSH
8861: LD_INT 0
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PUSH
8868: LD_INT 30
8870: PUSH
8871: LD_INT 1
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PPUSH
8890: CALL_OW 69
8894: ST_TO_ADDR
8895: GO 8962
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8897: LD_ADDR_VAR 0 2
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_VAR 0 1
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 2
8916: PUSH
8917: LD_INT 21
8919: PUSH
8920: LD_INT 1
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 33
8929: PUSH
8930: LD_INT 3
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 33
8939: PUSH
8940: LD_INT 5
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PPUSH
8957: CALL_OW 69
8961: ST_TO_ADDR
8962: GO 9083
8964: LD_INT 1
8966: DOUBLE
8967: EQUAL
8968: IFTRUE 8972
8970: GO 9011
8972: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8973: LD_ADDR_VAR 0 2
8977: PUSH
8978: LD_INT 22
8980: PUSH
8981: LD_VAR 0 1
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PUSH
8990: LD_INT 21
8992: PUSH
8993: LD_INT 1
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PPUSH
9004: CALL_OW 69
9008: ST_TO_ADDR
9009: GO 9083
9011: LD_INT 2
9013: DOUBLE
9014: EQUAL
9015: IFTRUE 9019
9017: GO 9082
9019: POP
// begin h = false ;
9020: LD_ADDR_VAR 0 4
9024: PUSH
9025: LD_INT 0
9027: ST_TO_ADDR
// for k in heroes [ i ] do
9028: LD_ADDR_VAR 0 3
9032: PUSH
9033: LD_EXP 49
9037: PUSH
9038: LD_VAR 0 1
9042: ARRAY
9043: PUSH
9044: FOR_IN
9045: IFFALSE 9068
// if IsLive ( k ) then
9047: LD_VAR 0 3
9051: PPUSH
9052: CALL_OW 300
9056: IFFALSE 9066
// h = true ;
9058: LD_ADDR_VAR 0 4
9062: PUSH
9063: LD_INT 1
9065: ST_TO_ADDR
9066: GO 9044
9068: POP
9069: POP
// Result := h ;
9070: LD_ADDR_VAR 0 2
9074: PUSH
9075: LD_VAR 0 4
9079: ST_TO_ADDR
// end ; end ;
9080: GO 9083
9082: POP
// end ;
9083: LD_VAR 0 2
9087: RET
// function AlliedSides ( i , j ) ; begin
9088: LD_INT 0
9090: PPUSH
// Result := false ;
9091: LD_ADDR_VAR 0 3
9095: PUSH
9096: LD_INT 0
9098: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9099: LD_VAR 0 1
9103: PPUSH
9104: LD_VAR 0 2
9108: PPUSH
9109: CALL_OW 81
9113: PUSH
9114: LD_INT 1
9116: EQUAL
9117: PUSH
9118: LD_VAR 0 2
9122: PPUSH
9123: LD_VAR 0 1
9127: PPUSH
9128: CALL_OW 81
9132: PUSH
9133: LD_INT 1
9135: EQUAL
9136: AND
9137: PUSH
9138: LD_VAR 0 1
9142: PPUSH
9143: CALL_OW 83
9147: AND
9148: PUSH
9149: LD_VAR 0 2
9153: PPUSH
9154: CALL_OW 83
9158: AND
9159: IFFALSE 9169
// Result := true ;
9161: LD_ADDR_VAR 0 3
9165: PUSH
9166: LD_INT 1
9168: ST_TO_ADDR
// end ;
9169: LD_VAR 0 3
9173: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9174: CALL 8678 0 0
9178: PUSH
9179: LD_LOC 15
9183: NOT
9184: AND
9185: IFFALSE 9201
9187: GO 9189
9189: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9190: LD_ADDR_EXP 58
9194: PUSH
9195: LD_STRING #Player-Ended
9197: PUSH
9198: EMPTY
9199: LIST
9200: ST_TO_ADDR
9201: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9202: CALL 8678 0 0
9206: PUSH
9207: LD_LOC 15
9211: AND
9212: IFFALSE 9221
9214: GO 9216
9216: DISABLE
// YouLostInMultiplayer ;
9217: CALL_OW 107
9221: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9222: CALL 8678 0 0
9226: NOT
9227: PUSH
9228: CALL_OW 531
9232: NOT
9233: AND
9234: IFFALSE 9250
9236: GO 9238
9238: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9239: LD_ADDR_EXP 58
9243: PUSH
9244: LD_STRING #server-wait
9246: PUSH
9247: EMPTY
9248: LIST
9249: ST_TO_ADDR
9250: END
// every 100 trigger IAmSpec do
9251: CALL_OW 531
9255: IFFALSE 9271
9257: GO 9259
9259: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9260: LD_ADDR_EXP 58
9264: PUSH
9265: LD_STRING #Player-IAmSpec
9267: PUSH
9268: EMPTY
9269: LIST
9270: ST_TO_ADDR
9271: END
// every 100 trigger GameEnded and IAmSpec do
9272: LD_LOC 15
9276: PUSH
9277: CALL_OW 531
9281: AND
9282: IFFALSE 9291
9284: GO 9286
9286: DISABLE
// YouLostInMultiplayer ;
9287: CALL_OW 107
9291: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9292: CALL 8678 0 0
9296: PUSH
9297: LD_LOC 15
9301: NOT
9302: AND
9303: IFFALSE 9319
9305: GO 9307
9307: DISABLE
// WaitServerStrings = [ $player-win ] ;
9308: LD_ADDR_EXP 58
9312: PUSH
9313: LD_STRING $player-win
9315: PUSH
9316: EMPTY
9317: LIST
9318: ST_TO_ADDR
9319: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9320: CALL 8678 0 0
9324: PUSH
9325: LD_LOC 15
9329: AND
9330: IFFALSE 9354
9332: GO 9334
9334: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9335: LD_EXP 37
9339: PUSH
9340: LD_OWVAR 7
9344: ARRAY
9345: PPUSH
9346: CALL 8349 0 1
// YouWinInMultiplayer ;
9350: CALL_OW 106
// end ;
9354: END
// every 100 trigger isEditor marked 401 do
9355: LD_OWVAR 84
9359: IFFALSE 9375
9361: GO 9363
9363: DISABLE
// Debug_Strings = [ You won ] ;
9364: LD_ADDR_OWVAR 48
9368: PUSH
9369: LD_STRING You won
9371: PUSH
9372: EMPTY
9373: LIST
9374: ST_TO_ADDR
9375: END
// every 100 trigger isEditor marked 400 do
9376: LD_OWVAR 84
9380: IFFALSE 9396
9382: GO 9384
9384: DISABLE
// Debug_Strings = [ You loss ] ;
9385: LD_ADDR_OWVAR 48
9389: PUSH
9390: LD_STRING You loss
9392: PUSH
9393: EMPTY
9394: LIST
9395: ST_TO_ADDR
9396: END
// every 100 marked 98 do var i , un ;
9397: GO 9399
9399: DISABLE
9400: LD_INT 0
9402: PPUSH
9403: PPUSH
// begin for i = 1 to side_positions do
9404: LD_ADDR_VAR 0 1
9408: PUSH
9409: DOUBLE
9410: LD_INT 1
9412: DEC
9413: ST_TO_ADDR
9414: LD_EXP 36
9418: PUSH
9419: FOR_TO
9420: IFFALSE 9507
// begin if side_positions [ i ] then
9422: LD_EXP 36
9426: PUSH
9427: LD_VAR 0 1
9431: ARRAY
9432: IFFALSE 9505
// if not HasPower ( i ) and not defeated [ i ] then
9434: LD_VAR 0 1
9438: PPUSH
9439: CALL 8742 0 1
9443: NOT
9444: PUSH
9445: LD_LOC 14
9449: PUSH
9450: LD_VAR 0 1
9454: ARRAY
9455: NOT
9456: AND
9457: IFFALSE 9505
// begin defeated = replace ( defeated , i , true ) ;
9459: LD_ADDR_LOC 14
9463: PUSH
9464: LD_LOC 14
9468: PPUSH
9469: LD_VAR 0 1
9473: PPUSH
9474: LD_INT 1
9476: PPUSH
9477: CALL_OW 1
9481: ST_TO_ADDR
// if i = mp_player_side then
9482: LD_VAR 0 1
9486: PUSH
9487: LD_OWVAR 7
9491: EQUAL
9492: IFFALSE 9505
// begin Multiplayer_Loose_Message ;
9494: CALL_OW 521
// SetPlayerSpectator ( ) ;
9498: CALL_OW 572
// enable ( 400 ) ;
9502: LD_INT 400
9504: ENABLE_MARKED
// end ; end ; end ;
9505: GO 9419
9507: POP
9508: POP
// DidGameEnd ;
9509: CALL 9524 0 0
// if not GameEnded then
9513: LD_LOC 15
9517: NOT
9518: IFFALSE 9521
// enable ;
9520: ENABLE
// end ;
9521: PPOPN 2
9523: END
// function DidGameEnd ; var i , k , enemy ; begin
9524: LD_INT 0
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
// enemy = [ ] ;
9530: LD_ADDR_VAR 0 4
9534: PUSH
9535: EMPTY
9536: ST_TO_ADDR
// for i = 1 to side_positions do
9537: LD_ADDR_VAR 0 2
9541: PUSH
9542: DOUBLE
9543: LD_INT 1
9545: DEC
9546: ST_TO_ADDR
9547: LD_EXP 36
9551: PUSH
9552: FOR_TO
9553: IFFALSE 9647
// if not defeated [ i ] then
9555: LD_LOC 14
9559: PUSH
9560: LD_VAR 0 2
9564: ARRAY
9565: NOT
9566: IFFALSE 9645
// for k = 1 to side_positions do
9568: LD_ADDR_VAR 0 3
9572: PUSH
9573: DOUBLE
9574: LD_INT 1
9576: DEC
9577: ST_TO_ADDR
9578: LD_EXP 36
9582: PUSH
9583: FOR_TO
9584: IFFALSE 9643
// if not defeated [ k ] then
9586: LD_LOC 14
9590: PUSH
9591: LD_VAR 0 3
9595: ARRAY
9596: NOT
9597: IFFALSE 9641
// if not AlliedSides ( i , k ) then
9599: LD_VAR 0 2
9603: PPUSH
9604: LD_VAR 0 3
9608: PPUSH
9609: CALL 9088 0 2
9613: NOT
9614: IFFALSE 9641
// enemy = enemy ^ [ i , k ] ;
9616: LD_ADDR_VAR 0 4
9620: PUSH
9621: LD_VAR 0 4
9625: PUSH
9626: LD_VAR 0 2
9630: PUSH
9631: LD_VAR 0 3
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: ADD
9640: ST_TO_ADDR
9641: GO 9583
9643: POP
9644: POP
9645: GO 9552
9647: POP
9648: POP
// if not enemy then
9649: LD_VAR 0 4
9653: NOT
9654: IFFALSE 9680
// begin GameEnded = true ;
9656: LD_ADDR_LOC 15
9660: PUSH
9661: LD_INT 1
9663: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9664: LD_LOC 14
9668: PUSH
9669: LD_OWVAR 7
9673: ARRAY
9674: NOT
9675: IFFALSE 9680
// enable ( 401 ) ;
9677: LD_INT 401
9679: ENABLE_MARKED
// end ; end ;
9680: LD_VAR 0 1
9684: RET
// function unfog ; var k , friends ; begin
9685: LD_INT 0
9687: PPUSH
9688: PPUSH
9689: PPUSH
// for k = 1 to side_positions do
9690: LD_ADDR_VAR 0 2
9694: PUSH
9695: DOUBLE
9696: LD_INT 1
9698: DEC
9699: ST_TO_ADDR
9700: LD_EXP 36
9704: PUSH
9705: FOR_TO
9706: IFFALSE 9762
// if not defeated [ k ] then
9708: LD_LOC 14
9712: PUSH
9713: LD_VAR 0 2
9717: ARRAY
9718: NOT
9719: IFFALSE 9760
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9721: LD_OWVAR 7
9725: PPUSH
9726: LD_VAR 0 2
9730: PPUSH
9731: CALL_OW 81
9735: PUSH
9736: LD_INT 1
9738: PUSH
9739: EMPTY
9740: LIST
9741: IN
9742: IFFALSE 9760
// friends = friends ^ k ;
9744: LD_ADDR_VAR 0 3
9748: PUSH
9749: LD_VAR 0 3
9753: PUSH
9754: LD_VAR 0 2
9758: ADD
9759: ST_TO_ADDR
9760: GO 9705
9762: POP
9763: POP
// if not friends then
9764: LD_VAR 0 3
9768: NOT
9769: IFFALSE 9783
// begin SetPlayerSpectator ( ) ;
9771: CALL_OW 572
// unfoged = true ;
9775: LD_ADDR_LOC 16
9779: PUSH
9780: LD_INT 1
9782: ST_TO_ADDR
// end ; end ;
9783: LD_VAR 0 1
9787: RET
// export function MakeGameEnd ; begin
9788: LD_INT 0
9790: PPUSH
// SetPlayerSpectator ( ) ;
9791: CALL_OW 572
// unfoged = true ;
9795: LD_ADDR_LOC 16
9799: PUSH
9800: LD_INT 1
9802: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9803: LD_INT 175
9805: PPUSH
9806: CALL_OW 67
// GameEnded = true ;
9810: LD_ADDR_LOC 15
9814: PUSH
9815: LD_INT 1
9817: ST_TO_ADDR
// end ;
9818: LD_VAR 0 1
9822: RET
// export function GetGameEnded ; begin
9823: LD_INT 0
9825: PPUSH
// result = GameEnded ;
9826: LD_ADDR_VAR 0 1
9830: PUSH
9831: LD_LOC 15
9835: ST_TO_ADDR
// end ; end_of_file
9836: LD_VAR 0 1
9840: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9841: LD_INT 0
9843: PPUSH
9844: PPUSH
9845: PPUSH
// for side = 1 to 8 do
9846: LD_ADDR_VAR 0 2
9850: PUSH
9851: DOUBLE
9852: LD_INT 1
9854: DEC
9855: ST_TO_ADDR
9856: LD_INT 8
9858: PUSH
9859: FOR_TO
9860: IFFALSE 9981
// begin for i = 1 to 72 do
9862: LD_ADDR_VAR 0 3
9866: PUSH
9867: DOUBLE
9868: LD_INT 1
9870: DEC
9871: ST_TO_ADDR
9872: LD_INT 72
9874: PUSH
9875: FOR_TO
9876: IFFALSE 9907
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9878: LD_VAR 0 3
9882: PPUSH
9883: LD_VAR 0 2
9887: PPUSH
9888: LD_INT 0
9890: PPUSH
9891: LD_VAR 0 3
9895: PPUSH
9896: CALL_OW 565
9900: PPUSH
9901: CALL_OW 322
9905: GO 9875
9907: POP
9908: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9909: LD_INT 73
9911: PPUSH
9912: LD_VAR 0 2
9916: PPUSH
9917: LD_INT 0
9919: PPUSH
9920: LD_INT 25
9922: PPUSH
9923: CALL_OW 565
9927: PPUSH
9928: CALL_OW 322
// for i = 0 to 40 do
9932: LD_ADDR_VAR 0 3
9936: PUSH
9937: DOUBLE
9938: LD_INT 0
9940: DEC
9941: ST_TO_ADDR
9942: LD_INT 40
9944: PUSH
9945: FOR_TO
9946: IFFALSE 9977
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9948: LD_VAR 0 3
9952: PPUSH
9953: LD_VAR 0 2
9957: PPUSH
9958: LD_INT 1
9960: PPUSH
9961: LD_VAR 0 3
9965: PPUSH
9966: CALL_OW 565
9970: PPUSH
9971: CALL_OW 324
9975: GO 9945
9977: POP
9978: POP
// end ;
9979: GO 9859
9981: POP
9982: POP
// end ;
9983: LD_VAR 0 1
9987: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9988: LD_INT 0
9990: PPUSH
9991: PPUSH
9992: PPUSH
// for side = 1 to 8 do
9993: LD_ADDR_VAR 0 3
9997: PUSH
9998: DOUBLE
9999: LD_INT 1
10001: DEC
10002: ST_TO_ADDR
10003: LD_INT 8
10005: PUSH
10006: FOR_TO
10007: IFFALSE 14003
// begin for i = 1 to 73 do
10009: LD_ADDR_VAR 0 4
10013: PUSH
10014: DOUBLE
10015: LD_INT 1
10017: DEC
10018: ST_TO_ADDR
10019: LD_INT 73
10021: PUSH
10022: FOR_TO
10023: IFFALSE 10044
// SetTech ( i , side , state_disabled ) ;
10025: LD_VAR 0 4
10029: PPUSH
10030: LD_VAR 0 3
10034: PPUSH
10035: LD_INT 0
10037: PPUSH
10038: CALL_OW 322
10042: GO 10022
10044: POP
10045: POP
// for i = 0 to 40 do
10046: LD_ADDR_VAR 0 4
10050: PUSH
10051: DOUBLE
10052: LD_INT 0
10054: DEC
10055: ST_TO_ADDR
10056: LD_INT 40
10058: PUSH
10059: FOR_TO
10060: IFFALSE 10081
// SetRestrict ( i , side , false ) ;
10062: LD_VAR 0 4
10066: PPUSH
10067: LD_VAR 0 3
10071: PPUSH
10072: LD_INT 0
10074: PPUSH
10075: CALL_OW 324
10079: GO 10059
10081: POP
10082: POP
// case level of 1 :
10083: LD_VAR 0 1
10087: PUSH
10088: LD_INT 1
10090: DOUBLE
10091: EQUAL
10092: IFTRUE 10096
10094: GO 10249
10096: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10097: LD_INT 35
10099: PPUSH
10100: LD_VAR 0 3
10104: PPUSH
10105: LD_INT 1
10107: PPUSH
10108: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10112: LD_INT 45
10114: PPUSH
10115: LD_VAR 0 3
10119: PPUSH
10120: LD_INT 1
10122: PPUSH
10123: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10127: LD_INT 46
10129: PPUSH
10130: LD_VAR 0 3
10134: PPUSH
10135: LD_INT 1
10137: PPUSH
10138: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10142: LD_INT 47
10144: PPUSH
10145: LD_VAR 0 3
10149: PPUSH
10150: LD_INT 1
10152: PPUSH
10153: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10157: LD_INT 0
10159: PPUSH
10160: LD_VAR 0 3
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10172: LD_INT 2
10174: PPUSH
10175: LD_VAR 0 3
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10187: LD_INT 4
10189: PPUSH
10190: LD_VAR 0 3
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10202: LD_INT 6
10204: PPUSH
10205: LD_VAR 0 3
10209: PPUSH
10210: LD_INT 1
10212: PPUSH
10213: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10217: LD_INT 29
10219: PPUSH
10220: LD_VAR 0 3
10224: PPUSH
10225: LD_INT 1
10227: PPUSH
10228: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10232: LD_INT 31
10234: PPUSH
10235: LD_VAR 0 3
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: CALL_OW 324
// end ; 2 :
10247: GO 14001
10249: LD_INT 2
10251: DOUBLE
10252: EQUAL
10253: IFTRUE 10257
10255: GO 10455
10257: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10258: LD_INT 35
10260: PPUSH
10261: LD_VAR 0 3
10265: PPUSH
10266: LD_INT 1
10268: PPUSH
10269: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10273: LD_INT 45
10275: PPUSH
10276: LD_VAR 0 3
10280: PPUSH
10281: LD_INT 1
10283: PPUSH
10284: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10288: LD_INT 46
10290: PPUSH
10291: LD_VAR 0 3
10295: PPUSH
10296: LD_INT 1
10298: PPUSH
10299: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10303: LD_INT 47
10305: PPUSH
10306: LD_VAR 0 3
10310: PPUSH
10311: LD_INT 1
10313: PPUSH
10314: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10318: LD_INT 1
10320: PPUSH
10321: LD_VAR 0 3
10325: PPUSH
10326: LD_INT 1
10328: PPUSH
10329: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10333: LD_INT 2
10335: PPUSH
10336: LD_VAR 0 3
10340: PPUSH
10341: LD_INT 1
10343: PPUSH
10344: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10348: LD_INT 11
10350: PPUSH
10351: LD_VAR 0 3
10355: PPUSH
10356: LD_INT 1
10358: PPUSH
10359: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10363: LD_INT 0
10365: PPUSH
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 1
10373: PPUSH
10374: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10378: LD_INT 2
10380: PPUSH
10381: LD_VAR 0 3
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10393: LD_INT 4
10395: PPUSH
10396: LD_VAR 0 3
10400: PPUSH
10401: LD_INT 1
10403: PPUSH
10404: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10408: LD_INT 6
10410: PPUSH
10411: LD_VAR 0 3
10415: PPUSH
10416: LD_INT 1
10418: PPUSH
10419: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10423: LD_INT 29
10425: PPUSH
10426: LD_VAR 0 3
10430: PPUSH
10431: LD_INT 1
10433: PPUSH
10434: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10438: LD_INT 31
10440: PPUSH
10441: LD_VAR 0 3
10445: PPUSH
10446: LD_INT 1
10448: PPUSH
10449: CALL_OW 324
// end ; 3 :
10453: GO 14001
10455: LD_INT 3
10457: DOUBLE
10458: EQUAL
10459: IFTRUE 10463
10461: GO 10916
10463: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10464: LD_INT 35
10466: PPUSH
10467: LD_VAR 0 3
10471: PPUSH
10472: LD_INT 1
10474: PPUSH
10475: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10479: LD_INT 45
10481: PPUSH
10482: LD_VAR 0 3
10486: PPUSH
10487: LD_INT 1
10489: PPUSH
10490: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10494: LD_INT 46
10496: PPUSH
10497: LD_VAR 0 3
10501: PPUSH
10502: LD_INT 1
10504: PPUSH
10505: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10509: LD_INT 47
10511: PPUSH
10512: LD_VAR 0 3
10516: PPUSH
10517: LD_INT 1
10519: PPUSH
10520: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10524: LD_INT 1
10526: PPUSH
10527: LD_VAR 0 3
10531: PPUSH
10532: LD_INT 1
10534: PPUSH
10535: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10539: LD_INT 2
10541: PPUSH
10542: LD_VAR 0 3
10546: PPUSH
10547: LD_INT 1
10549: PPUSH
10550: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10554: LD_INT 11
10556: PPUSH
10557: LD_VAR 0 3
10561: PPUSH
10562: LD_INT 1
10564: PPUSH
10565: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10569: LD_INT 48
10571: PPUSH
10572: LD_VAR 0 3
10576: PPUSH
10577: LD_INT 1
10579: PPUSH
10580: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10584: LD_INT 69
10586: PPUSH
10587: LD_VAR 0 3
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10599: LD_INT 39
10601: PPUSH
10602: LD_VAR 0 3
10606: PPUSH
10607: LD_INT 1
10609: PPUSH
10610: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10614: LD_INT 43
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: LD_INT 1
10624: PPUSH
10625: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10629: LD_INT 51
10631: PPUSH
10632: LD_VAR 0 3
10636: PPUSH
10637: LD_INT 1
10639: PPUSH
10640: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10644: LD_INT 6
10646: PPUSH
10647: LD_VAR 0 3
10651: PPUSH
10652: LD_INT 1
10654: PPUSH
10655: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10659: LD_INT 0
10661: PPUSH
10662: LD_VAR 0 3
10666: PPUSH
10667: LD_INT 1
10669: PPUSH
10670: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10674: LD_INT 2
10676: PPUSH
10677: LD_VAR 0 3
10681: PPUSH
10682: LD_INT 1
10684: PPUSH
10685: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10689: LD_INT 3
10691: PPUSH
10692: LD_VAR 0 3
10696: PPUSH
10697: LD_INT 1
10699: PPUSH
10700: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10704: LD_INT 4
10706: PPUSH
10707: LD_VAR 0 3
10711: PPUSH
10712: LD_INT 1
10714: PPUSH
10715: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10719: LD_INT 6
10721: PPUSH
10722: LD_VAR 0 3
10726: PPUSH
10727: LD_INT 1
10729: PPUSH
10730: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10734: LD_INT 7
10736: PPUSH
10737: LD_VAR 0 3
10741: PPUSH
10742: LD_INT 1
10744: PPUSH
10745: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10749: LD_INT 8
10751: PPUSH
10752: LD_VAR 0 3
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10764: LD_INT 10
10766: PPUSH
10767: LD_VAR 0 3
10771: PPUSH
10772: LD_INT 1
10774: PPUSH
10775: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10779: LD_INT 15
10781: PPUSH
10782: LD_VAR 0 3
10786: PPUSH
10787: LD_INT 1
10789: PPUSH
10790: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10794: LD_INT 16
10796: PPUSH
10797: LD_VAR 0 3
10801: PPUSH
10802: LD_INT 1
10804: PPUSH
10805: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10809: LD_INT 17
10811: PPUSH
10812: LD_VAR 0 3
10816: PPUSH
10817: LD_INT 1
10819: PPUSH
10820: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10824: LD_INT 20
10826: PPUSH
10827: LD_VAR 0 3
10831: PPUSH
10832: LD_INT 1
10834: PPUSH
10835: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10839: LD_INT 26
10841: PPUSH
10842: LD_VAR 0 3
10846: PPUSH
10847: LD_INT 1
10849: PPUSH
10850: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10854: LD_INT 27
10856: PPUSH
10857: LD_VAR 0 3
10861: PPUSH
10862: LD_INT 1
10864: PPUSH
10865: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10869: LD_INT 29
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: LD_INT 1
10879: PPUSH
10880: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10884: LD_INT 31
10886: PPUSH
10887: LD_VAR 0 3
10891: PPUSH
10892: LD_INT 1
10894: PPUSH
10895: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10899: LD_INT 32
10901: PPUSH
10902: LD_VAR 0 3
10906: PPUSH
10907: LD_INT 1
10909: PPUSH
10910: CALL_OW 324
// end ; 4 :
10914: GO 14001
10916: LD_INT 4
10918: DOUBLE
10919: EQUAL
10920: IFTRUE 10924
10922: GO 11872
10924: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10925: LD_INT 35
10927: PPUSH
10928: LD_VAR 0 3
10932: PPUSH
10933: LD_INT 1
10935: PPUSH
10936: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10940: LD_INT 45
10942: PPUSH
10943: LD_VAR 0 3
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10955: LD_INT 46
10957: PPUSH
10958: LD_VAR 0 3
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10970: LD_INT 47
10972: PPUSH
10973: LD_VAR 0 3
10977: PPUSH
10978: LD_INT 1
10980: PPUSH
10981: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10985: LD_INT 1
10987: PPUSH
10988: LD_VAR 0 3
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11000: LD_INT 2
11002: PPUSH
11003: LD_VAR 0 3
11007: PPUSH
11008: LD_INT 1
11010: PPUSH
11011: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11015: LD_INT 11
11017: PPUSH
11018: LD_VAR 0 3
11022: PPUSH
11023: LD_INT 1
11025: PPUSH
11026: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11030: LD_INT 20
11032: PPUSH
11033: LD_VAR 0 3
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11045: LD_INT 48
11047: PPUSH
11048: LD_VAR 0 3
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11060: LD_INT 49
11062: PPUSH
11063: LD_VAR 0 3
11067: PPUSH
11068: LD_INT 1
11070: PPUSH
11071: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11075: LD_INT 69
11077: PPUSH
11078: LD_VAR 0 3
11082: PPUSH
11083: LD_INT 1
11085: PPUSH
11086: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11090: LD_INT 39
11092: PPUSH
11093: LD_VAR 0 3
11097: PPUSH
11098: LD_INT 1
11100: PPUSH
11101: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11105: LD_INT 34
11107: PPUSH
11108: LD_VAR 0 3
11112: PPUSH
11113: LD_INT 1
11115: PPUSH
11116: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11120: LD_INT 42
11122: PPUSH
11123: LD_VAR 0 3
11127: PPUSH
11128: LD_INT 1
11130: PPUSH
11131: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11135: LD_INT 44
11137: PPUSH
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11150: LD_INT 41
11152: PPUSH
11153: LD_VAR 0 3
11157: PPUSH
11158: LD_INT 1
11160: PPUSH
11161: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11165: LD_INT 43
11167: PPUSH
11168: LD_VAR 0 3
11172: PPUSH
11173: LD_INT 1
11175: PPUSH
11176: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11180: LD_INT 70
11182: PPUSH
11183: LD_VAR 0 3
11187: PPUSH
11188: LD_INT 1
11190: PPUSH
11191: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11195: LD_INT 51
11197: PPUSH
11198: LD_VAR 0 3
11202: PPUSH
11203: LD_INT 1
11205: PPUSH
11206: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11210: LD_INT 52
11212: PPUSH
11213: LD_VAR 0 3
11217: PPUSH
11218: LD_INT 1
11220: PPUSH
11221: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11225: LD_INT 6
11227: PPUSH
11228: LD_VAR 0 3
11232: PPUSH
11233: LD_INT 1
11235: PPUSH
11236: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11240: LD_INT 15
11242: PPUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: LD_INT 1
11250: PPUSH
11251: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11255: LD_INT 7
11257: PPUSH
11258: LD_VAR 0 3
11262: PPUSH
11263: LD_INT 1
11265: PPUSH
11266: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11270: LD_INT 12
11272: PPUSH
11273: LD_VAR 0 3
11277: PPUSH
11278: LD_INT 1
11280: PPUSH
11281: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11285: LD_INT 18
11287: PPUSH
11288: LD_VAR 0 3
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11300: LD_INT 60
11302: PPUSH
11303: LD_VAR 0 3
11307: PPUSH
11308: LD_INT 1
11310: PPUSH
11311: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11315: LD_INT 9
11317: PPUSH
11318: LD_VAR 0 3
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11330: LD_INT 30
11332: PPUSH
11333: LD_VAR 0 3
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11345: LD_INT 37
11347: PPUSH
11348: LD_VAR 0 3
11352: PPUSH
11353: LD_INT 1
11355: PPUSH
11356: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11360: LD_INT 5
11362: PPUSH
11363: LD_VAR 0 3
11367: PPUSH
11368: LD_INT 1
11370: PPUSH
11371: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11375: LD_INT 66
11377: PPUSH
11378: LD_VAR 0 3
11382: PPUSH
11383: LD_INT 1
11385: PPUSH
11386: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11390: LD_INT 21
11392: PPUSH
11393: LD_VAR 0 3
11397: PPUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11405: LD_INT 22
11407: PPUSH
11408: LD_VAR 0 3
11412: PPUSH
11413: LD_INT 1
11415: PPUSH
11416: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11420: LD_INT 54
11422: PPUSH
11423: LD_VAR 0 3
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11435: LD_INT 0
11437: PPUSH
11438: LD_VAR 0 3
11442: PPUSH
11443: LD_INT 1
11445: PPUSH
11446: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11450: LD_INT 1
11452: PPUSH
11453: LD_VAR 0 3
11457: PPUSH
11458: LD_INT 1
11460: PPUSH
11461: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11465: LD_INT 2
11467: PPUSH
11468: LD_VAR 0 3
11472: PPUSH
11473: LD_INT 1
11475: PPUSH
11476: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11480: LD_INT 3
11482: PPUSH
11483: LD_VAR 0 3
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11495: LD_INT 4
11497: PPUSH
11498: LD_VAR 0 3
11502: PPUSH
11503: LD_INT 1
11505: PPUSH
11506: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11510: LD_INT 5
11512: PPUSH
11513: LD_VAR 0 3
11517: PPUSH
11518: LD_INT 1
11520: PPUSH
11521: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11525: LD_INT 6
11527: PPUSH
11528: LD_VAR 0 3
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11540: LD_INT 7
11542: PPUSH
11543: LD_VAR 0 3
11547: PPUSH
11548: LD_INT 1
11550: PPUSH
11551: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11555: LD_INT 8
11557: PPUSH
11558: LD_VAR 0 3
11562: PPUSH
11563: LD_INT 1
11565: PPUSH
11566: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11570: LD_INT 10
11572: PPUSH
11573: LD_VAR 0 3
11577: PPUSH
11578: LD_INT 1
11580: PPUSH
11581: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11585: LD_INT 11
11587: PPUSH
11588: LD_VAR 0 3
11592: PPUSH
11593: LD_INT 1
11595: PPUSH
11596: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11600: LD_INT 12
11602: PPUSH
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_INT 1
11610: PPUSH
11611: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11615: LD_INT 13
11617: PPUSH
11618: LD_VAR 0 3
11622: PPUSH
11623: LD_INT 1
11625: PPUSH
11626: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11630: LD_INT 14
11632: PPUSH
11633: LD_VAR 0 3
11637: PPUSH
11638: LD_INT 1
11640: PPUSH
11641: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11645: LD_INT 15
11647: PPUSH
11648: LD_VAR 0 3
11652: PPUSH
11653: LD_INT 1
11655: PPUSH
11656: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11660: LD_INT 16
11662: PPUSH
11663: LD_VAR 0 3
11667: PPUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11675: LD_INT 17
11677: PPUSH
11678: LD_VAR 0 3
11682: PPUSH
11683: LD_INT 1
11685: PPUSH
11686: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11690: LD_INT 19
11692: PPUSH
11693: LD_VAR 0 3
11697: PPUSH
11698: LD_INT 1
11700: PPUSH
11701: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11705: LD_INT 20
11707: PPUSH
11708: LD_VAR 0 3
11712: PPUSH
11713: LD_INT 1
11715: PPUSH
11716: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11720: LD_INT 21
11722: PPUSH
11723: LD_VAR 0 3
11727: PPUSH
11728: LD_INT 1
11730: PPUSH
11731: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11735: LD_INT 23
11737: PPUSH
11738: LD_VAR 0 3
11742: PPUSH
11743: LD_INT 1
11745: PPUSH
11746: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11750: LD_INT 26
11752: PPUSH
11753: LD_VAR 0 3
11757: PPUSH
11758: LD_INT 1
11760: PPUSH
11761: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11765: LD_INT 27
11767: PPUSH
11768: LD_VAR 0 3
11772: PPUSH
11773: LD_INT 1
11775: PPUSH
11776: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11780: LD_INT 28
11782: PPUSH
11783: LD_VAR 0 3
11787: PPUSH
11788: LD_INT 1
11790: PPUSH
11791: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11795: LD_INT 29
11797: PPUSH
11798: LD_VAR 0 3
11802: PPUSH
11803: LD_INT 1
11805: PPUSH
11806: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11810: LD_INT 30
11812: PPUSH
11813: LD_VAR 0 3
11817: PPUSH
11818: LD_INT 1
11820: PPUSH
11821: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11825: LD_INT 31
11827: PPUSH
11828: LD_VAR 0 3
11832: PPUSH
11833: LD_INT 1
11835: PPUSH
11836: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11840: LD_INT 32
11842: PPUSH
11843: LD_VAR 0 3
11847: PPUSH
11848: LD_INT 1
11850: PPUSH
11851: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11855: LD_INT 36
11857: PPUSH
11858: LD_VAR 0 3
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: CALL_OW 324
// end ; 5 :
11870: GO 14001
11872: LD_INT 5
11874: DOUBLE
11875: EQUAL
11876: IFTRUE 11880
11878: GO 12993
11880: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11881: LD_INT 35
11883: PPUSH
11884: LD_VAR 0 3
11888: PPUSH
11889: LD_INT 1
11891: PPUSH
11892: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11896: LD_INT 45
11898: PPUSH
11899: LD_VAR 0 3
11903: PPUSH
11904: LD_INT 1
11906: PPUSH
11907: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11911: LD_INT 46
11913: PPUSH
11914: LD_VAR 0 3
11918: PPUSH
11919: LD_INT 1
11921: PPUSH
11922: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11926: LD_INT 47
11928: PPUSH
11929: LD_VAR 0 3
11933: PPUSH
11934: LD_INT 1
11936: PPUSH
11937: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11941: LD_INT 1
11943: PPUSH
11944: LD_VAR 0 3
11948: PPUSH
11949: LD_INT 1
11951: PPUSH
11952: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11956: LD_INT 2
11958: PPUSH
11959: LD_VAR 0 3
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11971: LD_INT 11
11973: PPUSH
11974: LD_VAR 0 3
11978: PPUSH
11979: LD_INT 1
11981: PPUSH
11982: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11986: LD_INT 20
11988: PPUSH
11989: LD_VAR 0 3
11993: PPUSH
11994: LD_INT 1
11996: PPUSH
11997: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12001: LD_INT 48
12003: PPUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: LD_INT 1
12011: PPUSH
12012: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12016: LD_INT 49
12018: PPUSH
12019: LD_VAR 0 3
12023: PPUSH
12024: LD_INT 1
12026: PPUSH
12027: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12031: LD_INT 69
12033: PPUSH
12034: LD_VAR 0 3
12038: PPUSH
12039: LD_INT 1
12041: PPUSH
12042: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12046: LD_INT 39
12048: PPUSH
12049: LD_VAR 0 3
12053: PPUSH
12054: LD_INT 1
12056: PPUSH
12057: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12061: LD_INT 34
12063: PPUSH
12064: LD_VAR 0 3
12068: PPUSH
12069: LD_INT 1
12071: PPUSH
12072: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12076: LD_INT 42
12078: PPUSH
12079: LD_VAR 0 3
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12091: LD_INT 44
12093: PPUSH
12094: LD_VAR 0 3
12098: PPUSH
12099: LD_INT 1
12101: PPUSH
12102: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12106: LD_INT 41
12108: PPUSH
12109: LD_VAR 0 3
12113: PPUSH
12114: LD_INT 1
12116: PPUSH
12117: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12121: LD_INT 40
12123: PPUSH
12124: LD_VAR 0 3
12128: PPUSH
12129: LD_INT 1
12131: PPUSH
12132: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12136: LD_INT 43
12138: PPUSH
12139: LD_VAR 0 3
12143: PPUSH
12144: LD_INT 1
12146: PPUSH
12147: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12151: LD_INT 70
12153: PPUSH
12154: LD_VAR 0 3
12158: PPUSH
12159: LD_INT 1
12161: PPUSH
12162: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12166: LD_INT 51
12168: PPUSH
12169: LD_VAR 0 3
12173: PPUSH
12174: LD_INT 1
12176: PPUSH
12177: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12181: LD_INT 52
12183: PPUSH
12184: LD_VAR 0 3
12188: PPUSH
12189: LD_INT 1
12191: PPUSH
12192: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12196: LD_INT 6
12198: PPUSH
12199: LD_VAR 0 3
12203: PPUSH
12204: LD_INT 1
12206: PPUSH
12207: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12211: LD_INT 15
12213: PPUSH
12214: LD_VAR 0 3
12218: PPUSH
12219: LD_INT 1
12221: PPUSH
12222: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12226: LD_INT 7
12228: PPUSH
12229: LD_VAR 0 3
12233: PPUSH
12234: LD_INT 1
12236: PPUSH
12237: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12241: LD_INT 12
12243: PPUSH
12244: LD_VAR 0 3
12248: PPUSH
12249: LD_INT 1
12251: PPUSH
12252: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12256: LD_INT 17
12258: PPUSH
12259: LD_VAR 0 3
12263: PPUSH
12264: LD_INT 1
12266: PPUSH
12267: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12271: LD_INT 18
12273: PPUSH
12274: LD_VAR 0 3
12278: PPUSH
12279: LD_INT 1
12281: PPUSH
12282: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12286: LD_INT 60
12288: PPUSH
12289: LD_VAR 0 3
12293: PPUSH
12294: LD_INT 1
12296: PPUSH
12297: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12301: LD_INT 32
12303: PPUSH
12304: LD_VAR 0 3
12308: PPUSH
12309: LD_INT 1
12311: PPUSH
12312: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12316: LD_INT 9
12318: PPUSH
12319: LD_VAR 0 3
12323: PPUSH
12324: LD_INT 1
12326: PPUSH
12327: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12331: LD_INT 57
12333: PPUSH
12334: LD_VAR 0 3
12338: PPUSH
12339: LD_INT 1
12341: PPUSH
12342: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12346: LD_INT 30
12348: PPUSH
12349: LD_VAR 0 3
12353: PPUSH
12354: LD_INT 1
12356: PPUSH
12357: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12361: LD_INT 37
12363: PPUSH
12364: LD_VAR 0 3
12368: PPUSH
12369: LD_INT 1
12371: PPUSH
12372: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12376: LD_INT 63
12378: PPUSH
12379: LD_VAR 0 3
12383: PPUSH
12384: LD_INT 1
12386: PPUSH
12387: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12391: LD_INT 3
12393: PPUSH
12394: LD_VAR 0 3
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12406: LD_INT 4
12408: PPUSH
12409: LD_VAR 0 3
12413: PPUSH
12414: LD_INT 1
12416: PPUSH
12417: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12421: LD_INT 5
12423: PPUSH
12424: LD_VAR 0 3
12428: PPUSH
12429: LD_INT 1
12431: PPUSH
12432: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12436: LD_INT 66
12438: PPUSH
12439: LD_VAR 0 3
12443: PPUSH
12444: LD_INT 1
12446: PPUSH
12447: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12451: LD_INT 21
12453: PPUSH
12454: LD_VAR 0 3
12458: PPUSH
12459: LD_INT 1
12461: PPUSH
12462: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12466: LD_INT 22
12468: PPUSH
12469: LD_VAR 0 3
12473: PPUSH
12474: LD_INT 1
12476: PPUSH
12477: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12481: LD_INT 19
12483: PPUSH
12484: LD_VAR 0 3
12488: PPUSH
12489: LD_INT 1
12491: PPUSH
12492: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12496: LD_INT 54
12498: PPUSH
12499: LD_VAR 0 3
12503: PPUSH
12504: LD_INT 1
12506: PPUSH
12507: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12511: LD_INT 55
12513: PPUSH
12514: LD_VAR 0 3
12518: PPUSH
12519: LD_INT 1
12521: PPUSH
12522: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12526: LD_INT 0
12528: PPUSH
12529: LD_VAR 0 3
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12541: LD_INT 1
12543: PPUSH
12544: LD_VAR 0 3
12548: PPUSH
12549: LD_INT 1
12551: PPUSH
12552: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12556: LD_INT 2
12558: PPUSH
12559: LD_VAR 0 3
12563: PPUSH
12564: LD_INT 1
12566: PPUSH
12567: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12571: LD_INT 3
12573: PPUSH
12574: LD_VAR 0 3
12578: PPUSH
12579: LD_INT 1
12581: PPUSH
12582: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12586: LD_INT 4
12588: PPUSH
12589: LD_VAR 0 3
12593: PPUSH
12594: LD_INT 1
12596: PPUSH
12597: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12601: LD_INT 5
12603: PPUSH
12604: LD_VAR 0 3
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12616: LD_INT 6
12618: PPUSH
12619: LD_VAR 0 3
12623: PPUSH
12624: LD_INT 1
12626: PPUSH
12627: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12631: LD_INT 7
12633: PPUSH
12634: LD_VAR 0 3
12638: PPUSH
12639: LD_INT 1
12641: PPUSH
12642: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12646: LD_INT 8
12648: PPUSH
12649: LD_VAR 0 3
12653: PPUSH
12654: LD_INT 1
12656: PPUSH
12657: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12661: LD_INT 10
12663: PPUSH
12664: LD_VAR 0 3
12668: PPUSH
12669: LD_INT 1
12671: PPUSH
12672: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12676: LD_INT 11
12678: PPUSH
12679: LD_VAR 0 3
12683: PPUSH
12684: LD_INT 1
12686: PPUSH
12687: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12691: LD_INT 12
12693: PPUSH
12694: LD_VAR 0 3
12698: PPUSH
12699: LD_INT 1
12701: PPUSH
12702: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12706: LD_INT 13
12708: PPUSH
12709: LD_VAR 0 3
12713: PPUSH
12714: LD_INT 1
12716: PPUSH
12717: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12721: LD_INT 14
12723: PPUSH
12724: LD_VAR 0 3
12728: PPUSH
12729: LD_INT 1
12731: PPUSH
12732: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12736: LD_INT 15
12738: PPUSH
12739: LD_VAR 0 3
12743: PPUSH
12744: LD_INT 1
12746: PPUSH
12747: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12751: LD_INT 16
12753: PPUSH
12754: LD_VAR 0 3
12758: PPUSH
12759: LD_INT 1
12761: PPUSH
12762: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12766: LD_INT 17
12768: PPUSH
12769: LD_VAR 0 3
12773: PPUSH
12774: LD_INT 1
12776: PPUSH
12777: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12781: LD_INT 18
12783: PPUSH
12784: LD_VAR 0 3
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12796: LD_INT 19
12798: PPUSH
12799: LD_VAR 0 3
12803: PPUSH
12804: LD_INT 1
12806: PPUSH
12807: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12811: LD_INT 20
12813: PPUSH
12814: LD_VAR 0 3
12818: PPUSH
12819: LD_INT 1
12821: PPUSH
12822: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12826: LD_INT 21
12828: PPUSH
12829: LD_VAR 0 3
12833: PPUSH
12834: LD_INT 1
12836: PPUSH
12837: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12841: LD_INT 23
12843: PPUSH
12844: LD_VAR 0 3
12848: PPUSH
12849: LD_INT 1
12851: PPUSH
12852: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12856: LD_INT 26
12858: PPUSH
12859: LD_VAR 0 3
12863: PPUSH
12864: LD_INT 1
12866: PPUSH
12867: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12871: LD_INT 27
12873: PPUSH
12874: LD_VAR 0 3
12878: PPUSH
12879: LD_INT 1
12881: PPUSH
12882: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12886: LD_INT 28
12888: PPUSH
12889: LD_VAR 0 3
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12901: LD_INT 29
12903: PPUSH
12904: LD_VAR 0 3
12908: PPUSH
12909: LD_INT 1
12911: PPUSH
12912: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12916: LD_INT 30
12918: PPUSH
12919: LD_VAR 0 3
12923: PPUSH
12924: LD_INT 1
12926: PPUSH
12927: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12931: LD_INT 31
12933: PPUSH
12934: LD_VAR 0 3
12938: PPUSH
12939: LD_INT 1
12941: PPUSH
12942: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12946: LD_INT 32
12948: PPUSH
12949: LD_VAR 0 3
12953: PPUSH
12954: LD_INT 1
12956: PPUSH
12957: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12961: LD_INT 33
12963: PPUSH
12964: LD_VAR 0 3
12968: PPUSH
12969: LD_INT 1
12971: PPUSH
12972: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12976: LD_INT 36
12978: PPUSH
12979: LD_VAR 0 3
12983: PPUSH
12984: LD_INT 1
12986: PPUSH
12987: CALL_OW 324
// end ; 6 :
12991: GO 14001
12993: LD_INT 6
12995: DOUBLE
12996: EQUAL
12997: IFTRUE 13001
12999: GO 13926
13001: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13002: LD_INT 35
13004: PPUSH
13005: LD_VAR 0 3
13009: PPUSH
13010: LD_INT 1
13012: PPUSH
13013: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13017: LD_INT 45
13019: PPUSH
13020: LD_VAR 0 3
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13032: LD_INT 46
13034: PPUSH
13035: LD_VAR 0 3
13039: PPUSH
13040: LD_INT 1
13042: PPUSH
13043: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13047: LD_INT 47
13049: PPUSH
13050: LD_VAR 0 3
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13062: LD_INT 1
13064: PPUSH
13065: LD_VAR 0 3
13069: PPUSH
13070: LD_INT 1
13072: PPUSH
13073: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13077: LD_INT 2
13079: PPUSH
13080: LD_VAR 0 3
13084: PPUSH
13085: LD_INT 1
13087: PPUSH
13088: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13092: LD_INT 11
13094: PPUSH
13095: LD_VAR 0 3
13099: PPUSH
13100: LD_INT 1
13102: PPUSH
13103: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13107: LD_INT 20
13109: PPUSH
13110: LD_VAR 0 3
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13122: LD_INT 48
13124: PPUSH
13125: LD_VAR 0 3
13129: PPUSH
13130: LD_INT 1
13132: PPUSH
13133: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13137: LD_INT 49
13139: PPUSH
13140: LD_VAR 0 3
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13152: LD_INT 50
13154: PPUSH
13155: LD_VAR 0 3
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13167: LD_INT 69
13169: PPUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13182: LD_INT 39
13184: PPUSH
13185: LD_VAR 0 3
13189: PPUSH
13190: LD_INT 1
13192: PPUSH
13193: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13197: LD_INT 34
13199: PPUSH
13200: LD_VAR 0 3
13204: PPUSH
13205: LD_INT 1
13207: PPUSH
13208: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13212: LD_INT 42
13214: PPUSH
13215: LD_VAR 0 3
13219: PPUSH
13220: LD_INT 1
13222: PPUSH
13223: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13227: LD_INT 44
13229: PPUSH
13230: LD_VAR 0 3
13234: PPUSH
13235: LD_INT 1
13237: PPUSH
13238: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13242: LD_INT 41
13244: PPUSH
13245: LD_VAR 0 3
13249: PPUSH
13250: LD_INT 1
13252: PPUSH
13253: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13257: LD_INT 13
13259: PPUSH
13260: LD_VAR 0 3
13264: PPUSH
13265: LD_INT 1
13267: PPUSH
13268: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13272: LD_INT 40
13274: PPUSH
13275: LD_VAR 0 3
13279: PPUSH
13280: LD_INT 1
13282: PPUSH
13283: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13287: LD_INT 43
13289: PPUSH
13290: LD_VAR 0 3
13294: PPUSH
13295: LD_INT 1
13297: PPUSH
13298: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13302: LD_INT 70
13304: PPUSH
13305: LD_VAR 0 3
13309: PPUSH
13310: LD_INT 1
13312: PPUSH
13313: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13317: LD_INT 23
13319: PPUSH
13320: LD_VAR 0 3
13324: PPUSH
13325: LD_INT 1
13327: PPUSH
13328: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13332: LD_INT 51
13334: PPUSH
13335: LD_VAR 0 3
13339: PPUSH
13340: LD_INT 1
13342: PPUSH
13343: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13347: LD_INT 52
13349: PPUSH
13350: LD_VAR 0 3
13354: PPUSH
13355: LD_INT 1
13357: PPUSH
13358: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13362: LD_INT 6
13364: PPUSH
13365: LD_VAR 0 3
13369: PPUSH
13370: LD_INT 1
13372: PPUSH
13373: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13377: LD_INT 15
13379: PPUSH
13380: LD_VAR 0 3
13384: PPUSH
13385: LD_INT 1
13387: PPUSH
13388: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13392: LD_INT 7
13394: PPUSH
13395: LD_VAR 0 3
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13407: LD_INT 12
13409: PPUSH
13410: LD_VAR 0 3
13414: PPUSH
13415: LD_INT 1
13417: PPUSH
13418: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13422: LD_INT 10
13424: PPUSH
13425: LD_VAR 0 3
13429: PPUSH
13430: LD_INT 1
13432: PPUSH
13433: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13437: LD_INT 17
13439: PPUSH
13440: LD_VAR 0 3
13444: PPUSH
13445: LD_INT 1
13447: PPUSH
13448: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13452: LD_INT 18
13454: PPUSH
13455: LD_VAR 0 3
13459: PPUSH
13460: LD_INT 1
13462: PPUSH
13463: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13467: LD_INT 60
13469: PPUSH
13470: LD_VAR 0 3
13474: PPUSH
13475: LD_INT 1
13477: PPUSH
13478: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13482: LD_INT 61
13484: PPUSH
13485: LD_VAR 0 3
13489: PPUSH
13490: LD_INT 1
13492: PPUSH
13493: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13497: LD_INT 32
13499: PPUSH
13500: LD_VAR 0 3
13504: PPUSH
13505: LD_INT 1
13507: PPUSH
13508: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13512: LD_INT 27
13514: PPUSH
13515: LD_VAR 0 3
13519: PPUSH
13520: LD_INT 1
13522: PPUSH
13523: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13527: LD_INT 36
13529: PPUSH
13530: LD_VAR 0 3
13534: PPUSH
13535: LD_INT 1
13537: PPUSH
13538: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13542: LD_INT 33
13544: PPUSH
13545: LD_VAR 0 3
13549: PPUSH
13550: LD_INT 1
13552: PPUSH
13553: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13557: LD_INT 9
13559: PPUSH
13560: LD_VAR 0 3
13564: PPUSH
13565: LD_INT 1
13567: PPUSH
13568: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13572: LD_INT 38
13574: PPUSH
13575: LD_VAR 0 3
13579: PPUSH
13580: LD_INT 1
13582: PPUSH
13583: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13587: LD_INT 57
13589: PPUSH
13590: LD_VAR 0 3
13594: PPUSH
13595: LD_INT 1
13597: PPUSH
13598: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13602: LD_INT 58
13604: PPUSH
13605: LD_VAR 0 3
13609: PPUSH
13610: LD_INT 1
13612: PPUSH
13613: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13617: LD_INT 28
13619: PPUSH
13620: LD_VAR 0 3
13624: PPUSH
13625: LD_INT 1
13627: PPUSH
13628: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13632: LD_INT 29
13634: PPUSH
13635: LD_VAR 0 3
13639: PPUSH
13640: LD_INT 1
13642: PPUSH
13643: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13647: LD_INT 30
13649: PPUSH
13650: LD_VAR 0 3
13654: PPUSH
13655: LD_INT 1
13657: PPUSH
13658: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13662: LD_INT 37
13664: PPUSH
13665: LD_VAR 0 3
13669: PPUSH
13670: LD_INT 1
13672: PPUSH
13673: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13677: LD_INT 63
13679: PPUSH
13680: LD_VAR 0 3
13684: PPUSH
13685: LD_INT 1
13687: PPUSH
13688: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13692: LD_INT 64
13694: PPUSH
13695: LD_VAR 0 3
13699: PPUSH
13700: LD_INT 1
13702: PPUSH
13703: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13707: LD_INT 3
13709: PPUSH
13710: LD_VAR 0 3
13714: PPUSH
13715: LD_INT 1
13717: PPUSH
13718: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13722: LD_INT 4
13724: PPUSH
13725: LD_VAR 0 3
13729: PPUSH
13730: LD_INT 1
13732: PPUSH
13733: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13737: LD_INT 5
13739: PPUSH
13740: LD_VAR 0 3
13744: PPUSH
13745: LD_INT 1
13747: PPUSH
13748: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13752: LD_INT 8
13754: PPUSH
13755: LD_VAR 0 3
13759: PPUSH
13760: LD_INT 1
13762: PPUSH
13763: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13767: LD_INT 66
13769: PPUSH
13770: LD_VAR 0 3
13774: PPUSH
13775: LD_INT 1
13777: PPUSH
13778: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13782: LD_INT 67
13784: PPUSH
13785: LD_VAR 0 3
13789: PPUSH
13790: LD_INT 1
13792: PPUSH
13793: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13797: LD_INT 21
13799: PPUSH
13800: LD_VAR 0 3
13804: PPUSH
13805: LD_INT 1
13807: PPUSH
13808: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13812: LD_INT 22
13814: PPUSH
13815: LD_VAR 0 3
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13827: LD_INT 19
13829: PPUSH
13830: LD_VAR 0 3
13834: PPUSH
13835: LD_INT 1
13837: PPUSH
13838: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13842: LD_INT 26
13844: PPUSH
13845: LD_VAR 0 3
13849: PPUSH
13850: LD_INT 1
13852: PPUSH
13853: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13857: LD_INT 54
13859: PPUSH
13860: LD_VAR 0 3
13864: PPUSH
13865: LD_INT 1
13867: PPUSH
13868: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13872: LD_INT 55
13874: PPUSH
13875: LD_VAR 0 3
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 322
// for i = 0 to 39 do
13887: LD_ADDR_VAR 0 4
13891: PUSH
13892: DOUBLE
13893: LD_INT 0
13895: DEC
13896: ST_TO_ADDR
13897: LD_INT 39
13899: PUSH
13900: FOR_TO
13901: IFFALSE 13922
// SetRestrict ( i , side , true ) ;
13903: LD_VAR 0 4
13907: PPUSH
13908: LD_VAR 0 3
13912: PPUSH
13913: LD_INT 1
13915: PPUSH
13916: CALL_OW 324
13920: GO 13900
13922: POP
13923: POP
// end ; else
13924: GO 14001
13926: POP
// begin for i = 1 to 73 do
13927: LD_ADDR_VAR 0 4
13931: PUSH
13932: DOUBLE
13933: LD_INT 1
13935: DEC
13936: ST_TO_ADDR
13937: LD_INT 73
13939: PUSH
13940: FOR_TO
13941: IFFALSE 13962
// SetTech ( i , side , state_enabled ) ;
13943: LD_VAR 0 4
13947: PPUSH
13948: LD_VAR 0 3
13952: PPUSH
13953: LD_INT 1
13955: PPUSH
13956: CALL_OW 322
13960: GO 13940
13962: POP
13963: POP
// for i = 0 to 39 do
13964: LD_ADDR_VAR 0 4
13968: PUSH
13969: DOUBLE
13970: LD_INT 0
13972: DEC
13973: ST_TO_ADDR
13974: LD_INT 39
13976: PUSH
13977: FOR_TO
13978: IFFALSE 13999
// SetRestrict ( i , side , true ) ;
13980: LD_VAR 0 4
13984: PPUSH
13985: LD_VAR 0 3
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 324
13997: GO 13977
13999: POP
14000: POP
// end ; end ; end ;
14001: GO 10006
14003: POP
14004: POP
// end ; end_of_file
14005: LD_VAR 0 2
14009: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
14010: LD_INT 0
14012: PPUSH
14013: PPUSH
14014: PPUSH
14015: PPUSH
14016: PPUSH
14017: PPUSH
14018: PPUSH
14019: PPUSH
14020: PPUSH
// for i := 1 to 8 do
14021: LD_ADDR_VAR 0 2
14025: PUSH
14026: DOUBLE
14027: LD_INT 1
14029: DEC
14030: ST_TO_ADDR
14031: LD_INT 8
14033: PUSH
14034: FOR_TO
14035: IFFALSE 14419
// begin if Side_Positions [ i ] then
14037: LD_EXP 36
14041: PUSH
14042: LD_VAR 0 2
14046: ARRAY
14047: IFFALSE 14417
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
14049: LD_ADDR_VAR 0 7
14053: PUSH
14054: LD_INT 22
14056: PUSH
14057: LD_VAR 0 2
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 21
14068: PUSH
14069: LD_INT 1
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PPUSH
14080: CALL_OW 69
14084: PUSH
14085: LD_INT 0
14087: PLUS
14088: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14089: LD_ADDR_VAR 0 9
14093: PUSH
14094: LD_INT 22
14096: PUSH
14097: LD_VAR 0 2
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 2
14108: PUSH
14109: LD_INT 30
14111: PUSH
14112: LD_INT 0
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 30
14121: PUSH
14122: LD_INT 1
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PPUSH
14138: CALL_OW 69
14142: ST_TO_ADDR
// crates := 0 ;
14143: LD_ADDR_VAR 0 4
14147: PUSH
14148: LD_INT 0
14150: ST_TO_ADDR
// oil := 0 ;
14151: LD_ADDR_VAR 0 5
14155: PUSH
14156: LD_INT 0
14158: ST_TO_ADDR
// sib := 0 ;
14159: LD_ADDR_VAR 0 6
14163: PUSH
14164: LD_INT 0
14166: ST_TO_ADDR
// if bases then
14167: LD_VAR 0 9
14171: IFFALSE 14277
// begin for j in bases do
14173: LD_ADDR_VAR 0 3
14177: PUSH
14178: LD_VAR 0 9
14182: PUSH
14183: FOR_IN
14184: IFFALSE 14275
// begin base := GetBase ( j ) ;
14186: LD_ADDR_VAR 0 8
14190: PUSH
14191: LD_VAR 0 3
14195: PPUSH
14196: CALL_OW 274
14200: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14201: LD_ADDR_VAR 0 4
14205: PUSH
14206: LD_VAR 0 4
14210: PUSH
14211: LD_VAR 0 8
14215: PPUSH
14216: LD_INT 1
14218: PPUSH
14219: CALL_OW 275
14223: PLUS
14224: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14225: LD_ADDR_VAR 0 5
14229: PUSH
14230: LD_VAR 0 5
14234: PUSH
14235: LD_VAR 0 8
14239: PPUSH
14240: LD_INT 2
14242: PPUSH
14243: CALL_OW 275
14247: PLUS
14248: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14249: LD_ADDR_VAR 0 6
14253: PUSH
14254: LD_VAR 0 6
14258: PUSH
14259: LD_VAR 0 8
14263: PPUSH
14264: LD_INT 3
14266: PPUSH
14267: CALL_OW 275
14271: PLUS
14272: ST_TO_ADDR
// end ;
14273: GO 14183
14275: POP
14276: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14277: LD_STRING setSpecText(
14279: PUSH
14280: LD_VAR 0 2
14284: STR
14285: PUSH
14286: LD_STRING ,
14288: STR
14289: PUSH
14290: LD_INT 2
14292: STR
14293: PUSH
14294: LD_STRING ,
14296: STR
14297: PUSH
14298: LD_VAR 0 4
14302: STR
14303: PUSH
14304: LD_STRING )
14306: STR
14307: PPUSH
14308: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14312: LD_STRING setSpecText(
14314: PUSH
14315: LD_VAR 0 2
14319: STR
14320: PUSH
14321: LD_STRING ,
14323: STR
14324: PUSH
14325: LD_INT 3
14327: STR
14328: PUSH
14329: LD_STRING ,
14331: STR
14332: PUSH
14333: LD_VAR 0 5
14337: STR
14338: PUSH
14339: LD_STRING )
14341: STR
14342: PPUSH
14343: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14347: LD_STRING setSpecText(
14349: PUSH
14350: LD_VAR 0 2
14354: STR
14355: PUSH
14356: LD_STRING ,
14358: STR
14359: PUSH
14360: LD_INT 4
14362: STR
14363: PUSH
14364: LD_STRING ,
14366: STR
14367: PUSH
14368: LD_VAR 0 6
14372: STR
14373: PUSH
14374: LD_STRING )
14376: STR
14377: PPUSH
14378: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14382: LD_STRING setSpecText(
14384: PUSH
14385: LD_VAR 0 2
14389: STR
14390: PUSH
14391: LD_STRING ,
14393: STR
14394: PUSH
14395: LD_INT 5
14397: STR
14398: PUSH
14399: LD_STRING ,
14401: STR
14402: PUSH
14403: LD_VAR 0 7
14407: STR
14408: PUSH
14409: LD_STRING )
14411: STR
14412: PPUSH
14413: CALL_OW 559
// end ; end ;
14417: GO 14034
14419: POP
14420: POP
// end ;
14421: LD_VAR 0 1
14425: RET
// every 0 0$1 do
14426: GO 14428
14428: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14429: LD_STRING setSpecLogoNumber(
14431: PUSH
14432: LD_INT 2
14434: STR
14435: PUSH
14436: LD_STRING ,
14438: STR
14439: PUSH
14440: LD_INT 1
14442: STR
14443: PUSH
14444: LD_STRING )
14446: STR
14447: PPUSH
14448: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14452: LD_STRING setSpecLogoNumber(
14454: PUSH
14455: LD_INT 3
14457: STR
14458: PUSH
14459: LD_STRING ,
14461: STR
14462: PUSH
14463: LD_INT 2
14465: STR
14466: PUSH
14467: LD_STRING )
14469: STR
14470: PPUSH
14471: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14475: LD_STRING setSpecLogoNumber(
14477: PUSH
14478: LD_INT 4
14480: STR
14481: PUSH
14482: LD_STRING ,
14484: STR
14485: PUSH
14486: LD_INT 3
14488: STR
14489: PUSH
14490: LD_STRING )
14492: STR
14493: PPUSH
14494: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14498: LD_STRING setSpecLogoNumber(
14500: PUSH
14501: LD_INT 5
14503: STR
14504: PUSH
14505: LD_STRING ,
14507: STR
14508: PUSH
14509: LD_INT 4
14511: STR
14512: PUSH
14513: LD_STRING )
14515: STR
14516: PPUSH
14517: CALL_OW 559
// end ;
14521: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14522: LD_INT 2
14524: PUSH
14525: LD_INT 30
14527: PUSH
14528: LD_INT 0
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PUSH
14535: LD_INT 30
14537: PUSH
14538: LD_INT 1
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: LIST
14549: PPUSH
14550: CALL_OW 69
14554: IFFALSE 14564
14556: GO 14558
14558: DISABLE
// begin enable ;
14559: ENABLE
// UpdateSpectatorBar ;
14560: CALL 14010 0 0
// end ; end_of_file
14564: END
// var respawn , inqueue ; export function init_respawning ; begin
14565: LD_INT 0
14567: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14568: LD_ADDR_LOC 18
14572: PUSH
14573: LD_INT 1
14575: PPUSH
14576: LD_INT 8
14578: PPUSH
14579: CALL_OW 12
14583: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14584: LD_ADDR_LOC 19
14588: PUSH
14589: LD_INT 0
14591: PUSH
14592: LD_INT 0
14594: PUSH
14595: LD_INT 0
14597: PUSH
14598: LD_INT 0
14600: PUSH
14601: LD_INT 0
14603: PUSH
14604: LD_INT 0
14606: PUSH
14607: LD_INT 0
14609: PUSH
14610: LD_INT 0
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: ST_TO_ADDR
// end ;
14623: LD_VAR 0 1
14627: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14628: GO 14630
14630: DISABLE
14631: LD_INT 0
14633: PPUSH
14634: PPUSH
14635: PPUSH
// begin if respawning_time_max = 0 then
14636: LD_EXP 30
14640: PUSH
14641: LD_INT 0
14643: EQUAL
14644: IFFALSE 14648
// exit ;
14646: GO 15056
// if respawn = 8 then
14648: LD_LOC 18
14652: PUSH
14653: LD_INT 8
14655: EQUAL
14656: IFFALSE 14668
// respawn := 1 else
14658: LD_ADDR_LOC 18
14662: PUSH
14663: LD_INT 1
14665: ST_TO_ADDR
14666: GO 14682
// respawn := respawn + 1 ;
14668: LD_ADDR_LOC 18
14672: PUSH
14673: LD_LOC 18
14677: PUSH
14678: LD_INT 1
14680: PLUS
14681: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14682: LD_EXP 36
14686: PUSH
14687: LD_LOC 18
14691: ARRAY
14692: PUSH
14693: LD_LOC 19
14697: PUSH
14698: LD_LOC 18
14702: ARRAY
14703: NOT
14704: AND
14705: IFFALSE 15055
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14707: LD_ADDR_VAR 0 1
14711: PUSH
14712: LD_INT 21
14714: PUSH
14715: LD_INT 1
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 22
14724: PUSH
14725: LD_LOC 18
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 3
14736: PUSH
14737: LD_INT 23
14739: PUSH
14740: LD_INT 0
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: PPUSH
14753: CALL_OW 69
14757: ST_TO_ADDR
// if n < number_of_people then
14758: LD_VAR 0 1
14762: PUSH
14763: LD_EXP 21
14767: LESS
14768: IFFALSE 15052
// begin aktresp := respawn ;
14770: LD_ADDR_VAR 0 3
14774: PUSH
14775: LD_LOC 18
14779: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14780: LD_ADDR_LOC 19
14784: PUSH
14785: LD_LOC 19
14789: PPUSH
14790: LD_VAR 0 3
14794: PPUSH
14795: LD_INT 1
14797: PPUSH
14798: CALL_OW 1
14802: ST_TO_ADDR
// enable ;
14803: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14804: LD_EXP 29
14808: PPUSH
14809: LD_EXP 30
14813: PPUSH
14814: CALL_OW 12
14818: PPUSH
14819: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14823: LD_ADDR_LOC 19
14827: PUSH
14828: LD_LOC 19
14832: PPUSH
14833: LD_VAR 0 3
14837: PPUSH
14838: LD_INT 0
14840: PPUSH
14841: CALL_OW 1
14845: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14846: LD_ADDR_VAR 0 2
14850: PUSH
14851: LD_INT 21
14853: PUSH
14854: LD_INT 3
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 2
14863: PUSH
14864: LD_INT 30
14866: PUSH
14867: LD_INT 0
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PUSH
14874: LD_INT 30
14876: PUSH
14877: LD_INT 1
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 50
14891: PUSH
14892: EMPTY
14893: LIST
14894: PUSH
14895: LD_INT 22
14897: PUSH
14898: LD_VAR 0 3
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 69
14917: ST_TO_ADDR
// if dep = 0 then
14918: LD_VAR 0 2
14922: PUSH
14923: LD_INT 0
14925: EQUAL
14926: IFFALSE 14930
// exit ;
14928: GO 15056
// hc_name :=  ;
14930: LD_ADDR_OWVAR 26
14934: PUSH
14935: LD_STRING 
14937: ST_TO_ADDR
// hc_importance := 0 ;
14938: LD_ADDR_OWVAR 32
14942: PUSH
14943: LD_INT 0
14945: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14946: LD_INT 0
14948: PPUSH
14949: LD_INT 0
14951: PPUSH
14952: LD_EXP 22
14956: PUSH
14957: LD_INT 2
14959: DIV
14960: PPUSH
14961: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14965: LD_ADDR_OWVAR 21
14969: PUSH
14970: LD_EXP 37
14974: PUSH
14975: LD_VAR 0 3
14979: ARRAY
14980: ST_TO_ADDR
// uc_side := aktresp ;
14981: LD_ADDR_OWVAR 20
14985: PUSH
14986: LD_VAR 0 3
14990: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14991: LD_ADDR_VAR 0 2
14995: PUSH
14996: LD_VAR 0 2
15000: PUSH
15001: LD_INT 1
15003: PPUSH
15004: LD_VAR 0 2
15008: PPUSH
15009: CALL_OW 12
15013: ARRAY
15014: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
15015: CALL_OW 44
15019: PPUSH
15020: LD_VAR 0 2
15024: PPUSH
15025: CALL_OW 250
15029: PPUSH
15030: LD_VAR 0 2
15034: PPUSH
15035: CALL_OW 251
15039: PPUSH
15040: LD_INT 7
15042: PPUSH
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 50
// end else
15050: GO 15053
// enable ;
15052: ENABLE
// end else
15053: GO 15056
// enable ;
15055: ENABLE
// end ; end_of_file
15056: PPOPN 3
15058: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
15059: LD_INT 0
15061: PPUSH
15062: PPUSH
15063: PPUSH
// BuildUpTime_Delay = 0 ;
15064: LD_ADDR_EXP 61
15068: PUSH
15069: LD_INT 0
15071: ST_TO_ADDR
// if not def_builduptime then
15072: LD_EXP 14
15076: NOT
15077: IFFALSE 15081
// exit ;
15079: GO 15264
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
15081: LD_ADDR_EXP 61
15085: PUSH
15086: LD_INT 8400
15088: PUSH
15089: LD_INT 2100
15091: PUSH
15092: LD_EXP 14
15096: MUL
15097: PLUS
15098: ST_TO_ADDR
// BuildUpTimeActive := true ;
15099: LD_ADDR_EXP 60
15103: PUSH
15104: LD_INT 1
15106: ST_TO_ADDR
// for i := 1 to 8 do
15107: LD_ADDR_VAR 0 2
15111: PUSH
15112: DOUBLE
15113: LD_INT 1
15115: DEC
15116: ST_TO_ADDR
15117: LD_INT 8
15119: PUSH
15120: FOR_TO
15121: IFFALSE 15262
// if Side_Positions [ i ] then
15123: LD_EXP 36
15127: PUSH
15128: LD_VAR 0 2
15132: ARRAY
15133: IFFALSE 15260
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
15135: LD_EXP 59
15139: PUSH
15140: LD_EXP 36
15144: PUSH
15145: LD_VAR 0 2
15149: ARRAY
15150: ARRAY
15151: PPUSH
15152: LD_INT 5
15154: PPUSH
15155: CALL_OW 424
// for j := 1 to 8 do
15159: LD_ADDR_VAR 0 3
15163: PUSH
15164: DOUBLE
15165: LD_INT 1
15167: DEC
15168: ST_TO_ADDR
15169: LD_INT 8
15171: PUSH
15172: FOR_TO
15173: IFFALSE 15258
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15175: LD_EXP 36
15179: PUSH
15180: LD_VAR 0 3
15184: ARRAY
15185: PUSH
15186: LD_EXP 33
15190: PUSH
15191: LD_VAR 0 2
15195: ARRAY
15196: PUSH
15197: LD_EXP 33
15201: PUSH
15202: LD_VAR 0 3
15206: ARRAY
15207: NONEQUAL
15208: PUSH
15209: LD_EXP 38
15213: NOT
15214: PUSH
15215: LD_VAR 0 2
15219: PUSH
15220: LD_VAR 0 3
15224: NONEQUAL
15225: AND
15226: OR
15227: AND
15228: IFFALSE 15256
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15230: LD_VAR 0 3
15234: PPUSH
15235: LD_EXP 59
15239: PUSH
15240: LD_EXP 36
15244: PUSH
15245: LD_VAR 0 2
15249: ARRAY
15250: ARRAY
15251: PPUSH
15252: CALL_OW 333
15256: GO 15172
15258: POP
15259: POP
// end ;
15260: GO 15120
15262: POP
15263: POP
// end ;
15264: LD_VAR 0 1
15268: RET
// export function EndBuildUp ; var i , j ; begin
15269: LD_INT 0
15271: PPUSH
15272: PPUSH
15273: PPUSH
// BuildUpTimeActive := false ;
15274: LD_ADDR_EXP 60
15278: PUSH
15279: LD_INT 0
15281: ST_TO_ADDR
// for i := 1 to 8 do
15282: LD_ADDR_VAR 0 2
15286: PUSH
15287: DOUBLE
15288: LD_INT 1
15290: DEC
15291: ST_TO_ADDR
15292: LD_INT 8
15294: PUSH
15295: FOR_TO
15296: IFFALSE 15437
// if Side_Positions [ i ] then
15298: LD_EXP 36
15302: PUSH
15303: LD_VAR 0 2
15307: ARRAY
15308: IFFALSE 15435
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
15310: LD_EXP 59
15314: PUSH
15315: LD_EXP 36
15319: PUSH
15320: LD_VAR 0 2
15324: ARRAY
15325: ARRAY
15326: PPUSH
15327: LD_INT 0
15329: PPUSH
15330: CALL_OW 424
// for j := 1 to 8 do
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: DOUBLE
15340: LD_INT 1
15342: DEC
15343: ST_TO_ADDR
15344: LD_INT 8
15346: PUSH
15347: FOR_TO
15348: IFFALSE 15433
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15350: LD_EXP 36
15354: PUSH
15355: LD_VAR 0 3
15359: ARRAY
15360: PUSH
15361: LD_EXP 33
15365: PUSH
15366: LD_VAR 0 2
15370: ARRAY
15371: PUSH
15372: LD_EXP 33
15376: PUSH
15377: LD_VAR 0 3
15381: ARRAY
15382: NONEQUAL
15383: PUSH
15384: LD_EXP 38
15388: NOT
15389: PUSH
15390: LD_VAR 0 2
15394: PUSH
15395: LD_VAR 0 3
15399: NONEQUAL
15400: AND
15401: OR
15402: AND
15403: IFFALSE 15431
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15405: LD_VAR 0 3
15409: PPUSH
15410: LD_EXP 59
15414: PUSH
15415: LD_EXP 36
15419: PUSH
15420: LD_VAR 0 2
15424: ARRAY
15425: ARRAY
15426: PPUSH
15427: CALL_OW 334
15431: GO 15347
15433: POP
15434: POP
// end ;
15435: GO 15295
15437: POP
15438: POP
// end ;
15439: LD_VAR 0 1
15443: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
15444: LD_EXP 60
15448: IFFALSE 15623
15450: GO 15452
15452: DISABLE
15453: LD_INT 0
15455: PPUSH
15456: PPUSH
// begin for i := 1 to 8 do
15457: LD_ADDR_VAR 0 1
15461: PUSH
15462: DOUBLE
15463: LD_INT 1
15465: DEC
15466: ST_TO_ADDR
15467: LD_INT 8
15469: PUSH
15470: FOR_TO
15471: IFFALSE 15620
// if Side_Positions [ i ] then
15473: LD_EXP 36
15477: PUSH
15478: LD_VAR 0 1
15482: ARRAY
15483: IFFALSE 15618
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
15485: LD_ADDR_VAR 0 2
15489: PUSH
15490: LD_EXP 59
15494: PUSH
15495: LD_EXP 36
15499: PUSH
15500: LD_VAR 0 1
15504: ARRAY
15505: ARRAY
15506: PPUSH
15507: LD_INT 2
15509: PUSH
15510: LD_INT 21
15512: PUSH
15513: LD_INT 1
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 21
15522: PUSH
15523: LD_INT 2
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 22
15537: PUSH
15538: LD_OWVAR 2
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PPUSH
15551: CALL_OW 70
15555: PUSH
15556: FOR_IN
15557: IFFALSE 15616
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
15559: LD_EXP 33
15563: PUSH
15564: LD_VAR 0 1
15568: ARRAY
15569: PUSH
15570: LD_EXP 33
15574: PUSH
15575: LD_OWVAR 2
15579: ARRAY
15580: NONEQUAL
15581: PUSH
15582: LD_EXP 38
15586: NOT
15587: PUSH
15588: LD_VAR 0 1
15592: PUSH
15593: LD_OWVAR 2
15597: NONEQUAL
15598: AND
15599: OR
15600: IFFALSE 15614
// ComMoveToArea ( un , BuildUpEscape ) ;
15602: LD_VAR 0 2
15606: PPUSH
15607: LD_INT 17
15609: PPUSH
15610: CALL_OW 113
15614: GO 15556
15616: POP
15617: POP
15618: GO 15470
15620: POP
15621: POP
// enable ;
15622: ENABLE
// end ;
15623: PPOPN 2
15625: END
// every 0 0$1 trigger def_builduptime do
15626: LD_EXP 14
15630: IFFALSE 15656
15632: GO 15634
15634: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15635: LD_INT 8400
15637: PUSH
15638: LD_EXP 14
15642: PUSH
15643: LD_INT 2100
15645: MUL
15646: PLUS
15647: PPUSH
15648: CALL_OW 67
// EndBuildUp ;
15652: CALL 15269 0 0
// end ;
15656: END
