// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 386: LD_ADDR_EXP 36
 390: PUSH
 391: LD_EXP 31
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: EMPTY
 400: LIST
 401: DIFF
 402: PUSH
 403: LD_INT 1
 405: GREATER
 406: ST_TO_ADDR
// if Multiplayer then
 407: LD_OWVAR 4
 411: IFFALSE 613
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 413: LD_ADDR_EXP 1
 417: PUSH
 418: LD_INT 0
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 426: LD_ADDR_EXP 2
 430: PUSH
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 439: LD_ADDR_EXP 3
 443: PUSH
 444: LD_INT 2
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 452: LD_ADDR_EXP 4
 456: PUSH
 457: LD_INT 3
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 465: LD_ADDR_EXP 5
 469: PUSH
 470: LD_INT 4
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 478: LD_ADDR_EXP 6
 482: PUSH
 483: LD_INT 5
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 491: LD_ADDR_EXP 7
 495: PUSH
 496: LD_INT 1
 498: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 499: LD_ADDR_EXP 8
 503: PUSH
 504: LD_INT 10
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 512: LD_ADDR_EXP 9
 516: PUSH
 517: LD_INT 11
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 525: LD_ADDR_EXP 10
 529: PUSH
 530: LD_INT 12
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 538: LD_ADDR_EXP 11
 542: PUSH
 543: LD_INT 13
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 551: LD_ADDR_EXP 12
 555: PUSH
 556: LD_INT 14
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 564: LD_ADDR_EXP 13
 568: PUSH
 569: LD_INT 17
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 577: LD_ADDR_EXP 14
 581: PUSH
 582: LD_INT 20
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 590: LD_ADDR_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_win_rules = 0 ;
 603: LD_ADDR_EXP 30
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// end else
 611: GO 745
// begin Randomize ;
 613: CALL_OW 10
// def_base_level := 2 ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 2
 624: ST_TO_ADDR
// def_amount_of_people := 0 ;
 625: LD_ADDR_EXP 2
 629: PUSH
 630: LD_INT 0
 632: ST_TO_ADDR
// def_skill_level := 1 ;
 633: LD_ADDR_EXP 3
 637: PUSH
 638: LD_INT 1
 640: ST_TO_ADDR
// def_starting_resources := 2 ;
 641: LD_ADDR_EXP 4
 645: PUSH
 646: LD_INT 2
 648: ST_TO_ADDR
// def_shipments_density := 1 ;
 649: LD_ADDR_EXP 5
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 657: LD_ADDR_EXP 6
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 665: LD_ADDR_EXP 7
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// def_shared_vision := 1 ;
 673: LD_ADDR_EXP 8
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_morale_flags := 1 ;
 681: LD_ADDR_EXP 9
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_siberite_detection := 1 ;
 689: LD_ADDR_EXP 10
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_people_respawning := 2 ;
 697: LD_ADDR_EXP 11
 701: PUSH
 702: LD_INT 2
 704: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 705: LD_ADDR_EXP 12
 709: PUSH
 710: LD_INT 3
 712: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 713: LD_ADDR_EXP 13
 717: PUSH
 718: LD_INT 0
 720: ST_TO_ADDR
// def_builduptime := 1 ;
 721: LD_ADDR_EXP 14
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// tech_level = 4 ;
 729: LD_ADDR_VAR 0 3
 733: PUSH
 734: LD_INT 4
 736: ST_TO_ADDR
// def_win_rules = 0 ;
 737: LD_ADDR_EXP 30
 741: PUSH
 742: LD_INT 0
 744: ST_TO_ADDR
// end ; if isSGUI then
 745: LD_OWVAR 83
 749: IFFALSE 757
// setMpTechs ( ) else
 751: CALL 9598 0 0
 755: GO 770
// SetMpTechLevel ( tech_level + 1 ) ;
 757: LD_VAR 0 3
 761: PUSH
 762: LD_INT 1
 764: PLUS
 765: PPUSH
 766: CALL 9745 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 770: LD_ADDR_EXP 17
 774: PUSH
 775: LD_INT 0
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 1
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: PUSH
 789: LD_EXP 1
 793: PUSH
 794: LD_INT 1
 796: PLUS
 797: ARRAY
 798: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 799: LD_ADDR_EXP 18
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_EXP 1
 822: PUSH
 823: LD_INT 1
 825: PLUS
 826: ARRAY
 827: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 828: LD_ADDR_EXP 19
 832: PUSH
 833: LD_INT 9
 835: PUSH
 836: LD_INT 12
 838: PUSH
 839: LD_INT 15
 841: PUSH
 842: LD_INT 24
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: PUSH
 851: LD_EXP 2
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: ARRAY
 860: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 861: LD_ADDR_EXP 20
 865: PUSH
 866: LD_INT 2
 868: PUSH
 869: LD_INT 3
 871: PUSH
 872: LD_INT 4
 874: PUSH
 875: LD_INT 5
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_EXP 3
 888: PUSH
 889: LD_INT 1
 891: PLUS
 892: ARRAY
 893: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 894: LD_ADDR_EXP 22
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 30
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: PUSH
 927: LD_INT 50
 929: PUSH
 930: LD_INT 20
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 80
 943: PUSH
 944: LD_INT 40
 946: PUSH
 947: LD_INT 20
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: PUSH
 961: LD_EXP 4
 965: PUSH
 966: LD_INT 1
 968: PLUS
 969: ARRAY
 970: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 971: LD_ADDR_EXP 21
 975: PUSH
 976: LD_INT 10
 978: PUSH
 979: EMPTY
 980: LIST
 981: PUSH
 982: LD_INT 7
 984: PUSH
 985: LD_INT 14
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 6
 994: PUSH
 995: LD_INT 12
 997: PUSH
 998: LD_INT 18
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_INT 5
1008: PUSH
1009: LD_INT 10
1011: PUSH
1012: LD_INT 15
1014: PUSH
1015: LD_INT 20
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: PUSH
1030: LD_EXP 4
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: ARRAY
1039: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 ] [ def_shipments_density + 1 ] ;
1040: LD_ADDR_EXP 23
1044: PUSH
1045: LD_INT 150
1047: PUSH
1048: LD_INT 125
1050: PUSH
1051: LD_INT 100
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_EXP 5
1063: PUSH
1064: LD_INT 1
1066: PLUS
1067: ARRAY
1068: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1069: LD_ADDR_EXP 27
1073: PUSH
1074: LD_INT 0
1076: PUSH
1077: LD_INT 10500
1079: PUSH
1080: LD_INT 6300
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_EXP 11
1092: PUSH
1093: LD_INT 1
1095: PLUS
1096: ARRAY
1097: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1098: LD_ADDR_EXP 28
1102: PUSH
1103: LD_INT 0
1105: PUSH
1106: LD_INT 31500
1108: PUSH
1109: LD_INT 10500
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: LD_EXP 11
1121: PUSH
1122: LD_INT 1
1124: PLUS
1125: ARRAY
1126: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1127: LD_ADDR_EXP 25
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: LD_INT 1
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: PUSH
1150: LD_EXP 12
1154: PUSH
1155: LD_INT 1
1157: PLUS
1158: ARRAY
1159: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1160: LD_ADDR_EXP 24
1164: PUSH
1165: LD_INT 1
1167: NEG
1168: PUSH
1169: LD_INT 350
1171: PUSH
1172: LD_INT 700
1174: PUSH
1175: LD_INT 1400
1177: PUSH
1178: LD_INT 0
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: LD_EXP 9
1192: PUSH
1193: LD_INT 1
1195: PLUS
1196: ARRAY
1197: ST_TO_ADDR
// battle_flags_id = [ ] ;
1198: LD_ADDR_EXP 44
1202: PUSH
1203: EMPTY
1204: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1205: LD_ADDR_EXP 29
1209: PUSH
1210: LD_INT 0
1212: PUSH
1213: LD_INT 1
1215: PUSH
1216: LD_INT 63000
1218: PUSH
1219: LD_INT 126000
1221: PUSH
1222: LD_INT 189000
1224: PUSH
1225: LD_INT 252000
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: PUSH
1236: LD_EXP 13
1240: PUSH
1241: LD_INT 1
1243: PLUS
1244: ARRAY
1245: ST_TO_ADDR
// end ;
1246: LD_VAR 0 1
1250: RET
// function init_map ; var i , j ; begin
1251: LD_INT 0
1253: PPUSH
1254: PPUSH
1255: PPUSH
// normal_oil_deposits_locations := [ [ 17 , 4 ] , [ 72 , 5 ] , [ 157 , 22 ] , [ 205 , 111 ] , [ 221 , 195 ] , [ 169 , 196 ] , [ 93 , 177 ] , [ 52 , 92 ] ] ;
1256: LD_ADDR_EXP 40
1260: PUSH
1261: LD_INT 17
1263: PUSH
1264: LD_INT 4
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 72
1273: PUSH
1274: LD_INT 5
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 157
1283: PUSH
1284: LD_INT 22
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 205
1293: PUSH
1294: LD_INT 111
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 221
1303: PUSH
1304: LD_INT 195
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 169
1313: PUSH
1314: LD_INT 196
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 93
1323: PUSH
1324: LD_INT 177
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 52
1333: PUSH
1334: LD_INT 92
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 17 , 4 ] , [ 16 , 23 ] ] , [ [ 72 , 5 ] , [ 88 , 28 ] ] , [ [ 157 , 22 ] , [ 133 , 12 ] ] , [ [ 205 , 111 ] , [ 200 , 95 ] ] , [ [ 221 , 195 ] , [ 249 , 190 ] ] , [ [ 169 , 196 ] , [ 180 , 197 ] ] , [ [ 93 , 177 ] , [ 114 , 194 ] ] , [ [ 52 , 92 ] , [ 58 , 107 ] ] ] ;
1351: LD_ADDR_EXP 41
1355: PUSH
1356: LD_INT 17
1358: PUSH
1359: LD_INT 4
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 16
1368: PUSH
1369: LD_INT 23
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: PUSH
1380: LD_INT 72
1382: PUSH
1383: LD_INT 5
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 88
1392: PUSH
1393: LD_INT 28
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 157
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 133
1416: PUSH
1417: LD_INT 12
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 205
1430: PUSH
1431: LD_INT 111
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: PUSH
1438: LD_INT 200
1440: PUSH
1441: LD_INT 95
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 221
1454: PUSH
1455: LD_INT 195
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 249
1464: PUSH
1465: LD_INT 190
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 169
1478: PUSH
1479: LD_INT 196
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 180
1488: PUSH
1489: LD_INT 197
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 93
1502: PUSH
1503: LD_INT 177
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 114
1512: PUSH
1513: LD_INT 194
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 52
1526: PUSH
1527: LD_INT 92
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 58
1536: PUSH
1537: LD_INT 107
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 12 , 12 ] , [ 99 , 19 ] , [ 139 , 5 ] , [ 207 , 100 ] , [ 244 , 181 ] , [ 183 , 196 ] , [ 117 , 195 ] , [ 54 , 104 ] ] ;
1558: LD_ADDR_EXP 42
1562: PUSH
1563: LD_INT 12
1565: PUSH
1566: LD_INT 12
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 99
1575: PUSH
1576: LD_INT 19
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 139
1585: PUSH
1586: LD_INT 5
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 207
1595: PUSH
1596: LD_INT 100
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 244
1605: PUSH
1606: LD_INT 181
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 183
1615: PUSH
1616: LD_INT 196
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 117
1625: PUSH
1626: LD_INT 195
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 54
1635: PUSH
1636: LD_INT 104
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1653: LD_ADDR_EXP 43
1657: PUSH
1658: EMPTY
1659: ST_TO_ADDR
// depot_def := [ [ 32 , 24 , 2 ] , [ 87 , 18 , 3 ] , [ 146 , 28 , 3 ] , [ 188 , 103 , 4 ] , [ 224 , 180 , 5 ] , [ 168 , 180 , 0 ] , [ 105 , 170 , 0 ] , [ 71 , 102 , 1 ] ] ;
1660: LD_ADDR_EXP 37
1664: PUSH
1665: LD_INT 32
1667: PUSH
1668: LD_INT 24
1670: PUSH
1671: LD_INT 2
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: LD_INT 87
1681: PUSH
1682: LD_INT 18
1684: PUSH
1685: LD_INT 3
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_INT 146
1695: PUSH
1696: LD_INT 28
1698: PUSH
1699: LD_INT 3
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 188
1709: PUSH
1710: LD_INT 103
1712: PUSH
1713: LD_INT 4
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 224
1723: PUSH
1724: LD_INT 180
1726: PUSH
1727: LD_INT 5
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 168
1737: PUSH
1738: LD_INT 180
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 105
1751: PUSH
1752: LD_INT 170
1754: PUSH
1755: LD_INT 0
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 71
1765: PUSH
1766: LD_INT 102
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: ST_TO_ADDR
// for i in depot_def do
1787: LD_ADDR_VAR 0 2
1791: PUSH
1792: LD_EXP 37
1796: PUSH
1797: FOR_IN
1798: IFFALSE 1874
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1800: LD_ADDR_EXP 39
1804: PUSH
1805: LD_EXP 39
1809: PUSH
1810: LD_VAR 0 2
1814: PUSH
1815: LD_INT 1
1817: ARRAY
1818: PPUSH
1819: LD_VAR 0 2
1823: PUSH
1824: LD_INT 3
1826: ARRAY
1827: PPUSH
1828: LD_INT 4
1830: NEG
1831: PPUSH
1832: CALL_OW 272
1836: PUSH
1837: LD_VAR 0 2
1841: PUSH
1842: LD_INT 2
1844: ARRAY
1845: PPUSH
1846: LD_VAR 0 2
1850: PUSH
1851: LD_INT 3
1853: ARRAY
1854: PPUSH
1855: LD_INT 4
1857: NEG
1858: PPUSH
1859: CALL_OW 273
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: ADD
1871: ST_TO_ADDR
1872: GO 1797
1874: POP
1875: POP
// breastworks_def := [ [ [ 50 , 40 , 5 ] , [ 47 , 17 , 4 ] , [ 29 , 39 , 0 ] ] , [ [ 107 , 27 , 4 ] , [ 67 , 10 , 1 ] , [ 91 , 35 , 0 ] ] , [ [ 165 , 44 , 5 ] , [ 123 , 16 , 2 ] , [ 141 , 39 , 0 ] ] , [ [ 179 , 85 , 3 ] , [ 172 , 102 , 1 ] , [ 196 , 118 , 5 ] ] , [ [ 210 , 182 , 1 ] , [ 226 , 164 , 3 ] , [ 209 , 164 , 2 ] ] , [ [ 156 , 183 , 1 ] , [ 184 , 184 , 4 ] , [ 161 , 166 , 3 ] ] , [ [ 86 , 156 , 2 ] , [ 124 , 180 , 4 ] , [ 106 , 155 , 3 ] ] , [ [ 87 , 102 , 4 ] , [ 63 , 83 , 3 ] , [ 79 , 120 , 0 ] ] ] ;
1876: LD_ADDR_EXP 38
1880: PUSH
1881: LD_INT 50
1883: PUSH
1884: LD_INT 40
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_INT 47
1897: PUSH
1898: LD_INT 17
1900: PUSH
1901: LD_INT 4
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 29
1911: PUSH
1912: LD_INT 39
1914: PUSH
1915: LD_INT 0
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 107
1930: PUSH
1931: LD_INT 27
1933: PUSH
1934: LD_INT 4
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 67
1944: PUSH
1945: LD_INT 10
1947: PUSH
1948: LD_INT 1
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 91
1958: PUSH
1959: LD_INT 35
1961: PUSH
1962: LD_INT 0
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 165
1977: PUSH
1978: LD_INT 44
1980: PUSH
1981: LD_INT 5
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 123
1991: PUSH
1992: LD_INT 16
1994: PUSH
1995: LD_INT 2
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 141
2005: PUSH
2006: LD_INT 39
2008: PUSH
2009: LD_INT 0
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 179
2024: PUSH
2025: LD_INT 85
2027: PUSH
2028: LD_INT 3
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 172
2038: PUSH
2039: LD_INT 102
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_INT 196
2052: PUSH
2053: LD_INT 118
2055: PUSH
2056: LD_INT 5
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 210
2071: PUSH
2072: LD_INT 182
2074: PUSH
2075: LD_INT 1
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 226
2085: PUSH
2086: LD_INT 164
2088: PUSH
2089: LD_INT 3
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 209
2099: PUSH
2100: LD_INT 164
2102: PUSH
2103: LD_INT 2
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 156
2118: PUSH
2119: LD_INT 183
2121: PUSH
2122: LD_INT 1
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 184
2132: PUSH
2133: LD_INT 184
2135: PUSH
2136: LD_INT 4
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 161
2146: PUSH
2147: LD_INT 166
2149: PUSH
2150: LD_INT 3
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 86
2165: PUSH
2166: LD_INT 156
2168: PUSH
2169: LD_INT 2
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 124
2179: PUSH
2180: LD_INT 180
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 106
2193: PUSH
2194: LD_INT 155
2196: PUSH
2197: LD_INT 3
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 87
2212: PUSH
2213: LD_INT 102
2215: PUSH
2216: LD_INT 4
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 63
2226: PUSH
2227: LD_INT 83
2229: PUSH
2230: LD_INT 3
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 79
2240: PUSH
2241: LD_INT 120
2243: PUSH
2244: LD_INT 0
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: LIST
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: ST_TO_ADDR
// for i = 1 to Side_Positions do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_EXP 34
2281: PUSH
2282: FOR_TO
2283: IFFALSE 2413
// begin if not Side_Positions [ i ] then
2285: LD_EXP 34
2289: PUSH
2290: LD_VAR 0 2
2294: ARRAY
2295: NOT
2296: IFFALSE 2300
// continue ;
2298: GO 2282
// if def_extra_oil_deposits then
2300: LD_EXP 6
2304: IFFALSE 2362
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_EXP 41
2315: PUSH
2316: LD_EXP 34
2320: PUSH
2321: LD_VAR 0 2
2325: ARRAY
2326: ARRAY
2327: PUSH
2328: FOR_IN
2329: IFFALSE 2358
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2331: LD_VAR 0 3
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_VAR 0 3
2344: PUSH
2345: LD_INT 2
2347: ARRAY
2348: PPUSH
2349: LD_INT 2
2351: PPUSH
2352: CALL_OW 62
2356: GO 2328
2358: POP
2359: POP
2360: GO 2411
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2362: LD_EXP 40
2366: PUSH
2367: LD_EXP 34
2371: PUSH
2372: LD_VAR 0 2
2376: ARRAY
2377: ARRAY
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PPUSH
2383: LD_EXP 40
2387: PUSH
2388: LD_EXP 34
2392: PUSH
2393: LD_VAR 0 2
2397: ARRAY
2398: ARRAY
2399: PUSH
2400: LD_INT 2
2402: ARRAY
2403: PPUSH
2404: LD_INT 2
2406: PPUSH
2407: CALL_OW 62
// end ;
2411: GO 2282
2413: POP
2414: POP
// if def_extra_sib_deposits then
2415: LD_EXP 7
2419: IFFALSE 2573
// for i = 1 to Side_Positions do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_EXP 34
2435: PUSH
2436: FOR_TO
2437: IFFALSE 2571
// begin if not Side_Positions [ i ] then
2439: LD_EXP 34
2443: PUSH
2444: LD_VAR 0 2
2448: ARRAY
2449: NOT
2450: IFFALSE 2454
// continue ;
2452: GO 2436
// if def_extra_sib_deposits = 2 then
2454: LD_EXP 7
2458: PUSH
2459: LD_INT 2
2461: EQUAL
2462: IFFALSE 2520
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2464: LD_ADDR_VAR 0 3
2468: PUSH
2469: LD_EXP 43
2473: PUSH
2474: LD_EXP 34
2478: PUSH
2479: LD_VAR 0 2
2483: ARRAY
2484: ARRAY
2485: PUSH
2486: FOR_IN
2487: IFFALSE 2516
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2489: LD_VAR 0 3
2493: PUSH
2494: LD_INT 1
2496: ARRAY
2497: PPUSH
2498: LD_VAR 0 3
2502: PUSH
2503: LD_INT 2
2505: ARRAY
2506: PPUSH
2507: LD_INT 3
2509: PPUSH
2510: CALL_OW 62
2514: GO 2486
2516: POP
2517: POP
2518: GO 2569
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2520: LD_EXP 42
2524: PUSH
2525: LD_EXP 34
2529: PUSH
2530: LD_VAR 0 2
2534: ARRAY
2535: ARRAY
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: LD_EXP 42
2545: PUSH
2546: LD_EXP 34
2550: PUSH
2551: LD_VAR 0 2
2555: ARRAY
2556: ARRAY
2557: PUSH
2558: LD_INT 2
2560: ARRAY
2561: PPUSH
2562: LD_INT 3
2564: PPUSH
2565: CALL_OW 62
// end ;
2569: GO 2436
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
2582: PPUSH
// if not Team_Game then
2583: LD_EXP 36
2587: NOT
2588: IFFALSE 2686
// begin for i = 1 to 8 do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: DOUBLE
2596: LD_INT 1
2598: DEC
2599: ST_TO_ADDR
2600: LD_INT 8
2602: PUSH
2603: FOR_TO
2604: IFFALSE 2682
// for j = 1 to 8 do
2606: LD_ADDR_VAR 0 3
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 8
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2678
// if i <> j then
2622: LD_VAR 0 2
2626: PUSH
2627: LD_VAR 0 3
2631: NONEQUAL
2632: IFFALSE 2656
// SetAttitude ( i , j , att_neutral , true ) else
2634: LD_VAR 0 2
2638: PPUSH
2639: LD_VAR 0 3
2643: PPUSH
2644: LD_INT 0
2646: PPUSH
2647: LD_INT 1
2649: PPUSH
2650: CALL_OW 80
2654: GO 2676
// SetAttitude ( i , j , att_friend , true ) ;
2656: LD_VAR 0 2
2660: PPUSH
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 1
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 80
2676: GO 2619
2678: POP
2679: POP
2680: GO 2603
2682: POP
2683: POP
// end else
2684: GO 2861
// begin if def_shared_vision then
2686: LD_EXP 8
2690: IFFALSE 2755
// begin for i in Teams do
2692: LD_ADDR_VAR 0 2
2696: PUSH
2697: LD_EXP 32
2701: PUSH
2702: FOR_IN
2703: IFFALSE 2753
// for j = 2 to i do
2705: LD_ADDR_VAR 0 3
2709: PUSH
2710: DOUBLE
2711: LD_INT 2
2713: DEC
2714: ST_TO_ADDR
2715: LD_VAR 0 2
2719: PUSH
2720: FOR_TO
2721: IFFALSE 2749
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2723: LD_VAR 0 2
2727: PUSH
2728: LD_VAR 0 3
2732: ARRAY
2733: PPUSH
2734: LD_VAR 0 2
2738: PUSH
2739: LD_INT 1
2741: ARRAY
2742: PPUSH
2743: CALL_OW 343
2747: GO 2720
2749: POP
2750: POP
2751: GO 2702
2753: POP
2754: POP
// end ; for i = 1 to 8 do
2755: LD_ADDR_VAR 0 2
2759: PUSH
2760: DOUBLE
2761: LD_INT 1
2763: DEC
2764: ST_TO_ADDR
2765: LD_INT 8
2767: PUSH
2768: FOR_TO
2769: IFFALSE 2859
// for j = 1 to 8 do
2771: LD_ADDR_VAR 0 3
2775: PUSH
2776: DOUBLE
2777: LD_INT 1
2779: DEC
2780: ST_TO_ADDR
2781: LD_INT 8
2783: PUSH
2784: FOR_TO
2785: IFFALSE 2855
// if Side_Teams [ i ] = Side_Teams [ j ] then
2787: LD_EXP 31
2791: PUSH
2792: LD_VAR 0 2
2796: ARRAY
2797: PUSH
2798: LD_EXP 31
2802: PUSH
2803: LD_VAR 0 3
2807: ARRAY
2808: EQUAL
2809: IFFALSE 2833
// SetAttitude ( i , j , att_friend , true ) else
2811: LD_VAR 0 2
2815: PPUSH
2816: LD_VAR 0 3
2820: PPUSH
2821: LD_INT 1
2823: PPUSH
2824: LD_INT 1
2826: PPUSH
2827: CALL_OW 80
2831: GO 2853
// SetAttitude ( i , j , att_enemy , true ) ;
2833: LD_VAR 0 2
2837: PPUSH
2838: LD_VAR 0 3
2842: PPUSH
2843: LD_INT 2
2845: PPUSH
2846: LD_INT 1
2848: PPUSH
2849: CALL_OW 80
2853: GO 2784
2855: POP
2856: POP
2857: GO 2768
2859: POP
2860: POP
// end ; end ;
2861: LD_VAR 0 1
2865: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2866: LD_INT 0
2868: PPUSH
2869: PPUSH
2870: PPUSH
2871: PPUSH
// result := [ ] ;
2872: LD_ADDR_VAR 0 7
2876: PUSH
2877: EMPTY
2878: ST_TO_ADDR
// for i := 1 to count do
2879: LD_ADDR_VAR 0 8
2883: PUSH
2884: DOUBLE
2885: LD_INT 1
2887: DEC
2888: ST_TO_ADDR
2889: LD_VAR 0 1
2893: PUSH
2894: FOR_TO
2895: IFFALSE 3313
// begin uc_direction := Rand ( 0 , 5 ) ;
2897: LD_ADDR_OWVAR 24
2901: PUSH
2902: LD_INT 0
2904: PPUSH
2905: LD_INT 5
2907: PPUSH
2908: CALL_OW 12
2912: ST_TO_ADDR
// if commander then
2913: LD_LOC 1
2917: IFFALSE 3026
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2919: LD_ADDR_OWVAR 26
2923: PUSH
2924: LD_OWVAR 19
2928: PUSH
2929: LD_OWVAR 20
2933: ARRAY
2934: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 2
2940: PPUSH
2941: CALL_OW 12
2945: PPUSH
2946: LD_VAR 0 2
2950: PPUSH
2951: LD_EXP 20
2955: PUSH
2956: LD_INT 2
2958: PLUS
2959: PPUSH
2960: CALL_OW 380
// hc_importance := 105 ;
2964: LD_ADDR_OWVAR 32
2968: PUSH
2969: LD_INT 105
2971: ST_TO_ADDR
// commander := false ;
2972: LD_ADDR_LOC 1
2976: PUSH
2977: LD_INT 0
2979: ST_TO_ADDR
// if Multiplayer then
2980: LD_OWVAR 4
2984: IFFALSE 3024
// begin hc_gallery := MULTIAVATARS ;
2986: LD_ADDR_OWVAR 33
2990: PUSH
2991: LD_STRING MULTIAVATARS
2993: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2994: LD_ADDR_OWVAR 34
2998: PUSH
2999: LD_OWVAR 20
3003: PPUSH
3004: CALL_OW 525
3008: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3009: LD_ADDR_OWVAR 27
3013: PUSH
3014: LD_OWVAR 20
3018: PPUSH
3019: CALL_OW 526
3023: ST_TO_ADDR
// end ; end else
3024: GO 3089
// begin hc_name :=  ;
3026: LD_ADDR_OWVAR 26
3030: PUSH
3031: LD_STRING 
3033: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3034: LD_INT 1
3036: PPUSH
3037: LD_INT 2
3039: PPUSH
3040: CALL_OW 12
3044: PPUSH
3045: LD_VAR 0 2
3049: PPUSH
3050: LD_EXP 20
3054: PPUSH
3055: CALL_OW 380
// hc_importance := 0 ;
3059: LD_ADDR_OWVAR 32
3063: PUSH
3064: LD_INT 0
3066: ST_TO_ADDR
// if Multiplayer then
3067: LD_OWVAR 4
3071: IFFALSE 3089
// begin hc_gallery :=  ;
3073: LD_ADDR_OWVAR 33
3077: PUSH
3078: LD_STRING 
3080: ST_TO_ADDR
// hc_face_number := 0 ;
3081: LD_ADDR_OWVAR 34
3085: PUSH
3086: LD_INT 0
3088: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3089: LD_ADDR_VAR 0 10
3093: PUSH
3094: CALL_OW 44
3098: ST_TO_ADDR
// if global_defined then
3099: LD_LOC 3
3103: IFFALSE 3243
// begin if ( cl = class_soldier ) then
3105: LD_VAR 0 2
3109: PUSH
3110: LD_INT 1
3112: EQUAL
3113: IFFALSE 3133
// j := i + soldiers_created else
3115: LD_ADDR_VAR 0 9
3119: PUSH
3120: LD_VAR 0 8
3124: PUSH
3125: LD_LOC 4
3129: PLUS
3130: ST_TO_ADDR
3131: GO 3143
// j := i ;
3133: LD_ADDR_VAR 0 9
3137: PUSH
3138: LD_VAR 0 8
3142: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3143: LD_LOC 2
3147: PUSH
3148: LD_VAR 0 2
3152: ARRAY
3153: PUSH
3154: LD_VAR 0 9
3158: ARRAY
3159: PPUSH
3160: LD_VAR 0 10
3164: PPUSH
3165: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3169: LD_VAR 0 10
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_LOC 2
3181: PUSH
3182: LD_VAR 0 2
3186: ARRAY
3187: PUSH
3188: LD_VAR 0 9
3192: ARRAY
3193: PPUSH
3194: LD_INT 2
3196: PPUSH
3197: CALL_OW 260
3201: PPUSH
3202: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3206: LD_VAR 0 10
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: LD_LOC 2
3218: PUSH
3219: LD_VAR 0 2
3223: ARRAY
3224: PUSH
3225: LD_VAR 0 9
3229: ARRAY
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL_OW 260
3238: PPUSH
3239: CALL_OW 239
// end ; if building then
3243: LD_VAR 0 6
3247: IFFALSE 3265
// PlaceHumanInUnit ( un , building ) else
3249: LD_VAR 0 10
3253: PPUSH
3254: LD_VAR 0 6
3258: PPUSH
3259: CALL_OW 52
3263: GO 3292
// PlaceUnitXYR ( un , x , y , r , false ) ;
3265: LD_VAR 0 10
3269: PPUSH
3270: LD_VAR 0 3
3274: PPUSH
3275: LD_VAR 0 4
3279: PPUSH
3280: LD_VAR 0 5
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL_OW 50
// result := result ^ [ un ] ;
3292: LD_ADDR_VAR 0 7
3296: PUSH
3297: LD_VAR 0 7
3301: PUSH
3302: LD_VAR 0 10
3306: PUSH
3307: EMPTY
3308: LIST
3309: ADD
3310: ST_TO_ADDR
// end ;
3311: GO 2894
3313: POP
3314: POP
// if not global_defined then
3315: LD_LOC 3
3319: NOT
3320: IFFALSE 3398
// if ( global_units >= cl ) then
3322: LD_LOC 2
3326: PUSH
3327: LD_VAR 0 2
3331: GREATEREQUAL
3332: IFFALSE 3373
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3334: LD_ADDR_LOC 2
3338: PUSH
3339: LD_LOC 2
3343: PPUSH
3344: LD_VAR 0 2
3348: PPUSH
3349: LD_LOC 2
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PUSH
3360: LD_VAR 0 7
3364: ADD
3365: PPUSH
3366: CALL_OW 1
3370: ST_TO_ADDR
3371: GO 3398
// global_units := Replace ( global_units , cl , result ) ;
3373: LD_ADDR_LOC 2
3377: PUSH
3378: LD_LOC 2
3382: PPUSH
3383: LD_VAR 0 2
3387: PPUSH
3388: LD_VAR 0 7
3392: PPUSH
3393: CALL_OW 1
3397: ST_TO_ADDR
// if commander then
3398: LD_LOC 1
3402: IFFALSE 3449
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3404: LD_ADDR_EXP 45
3408: PUSH
3409: LD_EXP 45
3413: PPUSH
3414: LD_OWVAR 20
3418: PPUSH
3419: LD_EXP 45
3423: PUSH
3424: LD_OWVAR 20
3428: ARRAY
3429: PUSH
3430: LD_VAR 0 10
3434: ADD
3435: PPUSH
3436: CALL_OW 1
3440: ST_TO_ADDR
// commander := false ;
3441: LD_ADDR_LOC 1
3445: PUSH
3446: LD_INT 0
3448: ST_TO_ADDR
// end ; end ;
3449: LD_VAR 0 7
3453: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
// if side in [ 0 , 9 ] then
3465: LD_VAR 0 1
3469: PUSH
3470: LD_INT 0
3472: PUSH
3473: LD_INT 9
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: IN
3480: IFFALSE 3484
// exit ;
3482: GO 4534
// pos := Side_Positions [ side ] ;
3484: LD_ADDR_VAR 0 3
3488: PUSH
3489: LD_EXP 34
3493: PUSH
3494: LD_VAR 0 1
3498: ARRAY
3499: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3500: LD_ADDR_OWVAR 21
3504: PUSH
3505: LD_EXP 35
3509: PUSH
3510: LD_VAR 0 1
3514: ARRAY
3515: ST_TO_ADDR
// uc_side := side ;
3516: LD_ADDR_OWVAR 20
3520: PUSH
3521: LD_VAR 0 1
3525: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3526: LD_ADDR_VAR 0 4
3530: PUSH
3531: LD_EXP 37
3535: PUSH
3536: LD_VAR 0 3
3540: ARRAY
3541: PUSH
3542: LD_INT 1
3544: ARRAY
3545: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3546: LD_ADDR_VAR 0 5
3550: PUSH
3551: LD_EXP 37
3555: PUSH
3556: LD_VAR 0 3
3560: ARRAY
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3566: LD_ADDR_VAR 0 6
3570: PUSH
3571: LD_EXP 37
3575: PUSH
3576: LD_VAR 0 3
3580: ARRAY
3581: PUSH
3582: LD_INT 3
3584: ARRAY
3585: ST_TO_ADDR
// if is_depot then
3586: LD_EXP 17
3590: IFFALSE 3723
// begin bc_type = b_depot ;
3592: LD_ADDR_OWVAR 42
3596: PUSH
3597: LD_INT 0
3599: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3600: LD_ADDR_VAR 0 10
3604: PUSH
3605: LD_VAR 0 4
3609: PPUSH
3610: LD_VAR 0 5
3614: PPUSH
3615: LD_VAR 0 6
3619: PPUSH
3620: CALL_OW 47
3624: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3625: LD_VAR 0 10
3629: PPUSH
3630: LD_STRING @
3632: PUSH
3633: LD_VAR 0 1
3637: STR
3638: PPUSH
3639: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3643: LD_VAR 0 10
3647: PPUSH
3648: CALL_OW 274
3652: PPUSH
3653: LD_INT 1
3655: PPUSH
3656: LD_EXP 22
3660: PUSH
3661: LD_INT 1
3663: ARRAY
3664: PPUSH
3665: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3669: LD_VAR 0 10
3673: PPUSH
3674: CALL_OW 274
3678: PPUSH
3679: LD_INT 2
3681: PPUSH
3682: LD_EXP 22
3686: PUSH
3687: LD_INT 2
3689: ARRAY
3690: PPUSH
3691: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3695: LD_VAR 0 10
3699: PPUSH
3700: CALL_OW 274
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_EXP 22
3712: PUSH
3713: LD_INT 3
3715: ARRAY
3716: PPUSH
3717: CALL_OW 277
// end else
3721: GO 3867
// begin for i := 1 to 3 do
3723: LD_ADDR_VAR 0 7
3727: PUSH
3728: DOUBLE
3729: LD_INT 1
3731: DEC
3732: ST_TO_ADDR
3733: LD_INT 3
3735: PUSH
3736: FOR_TO
3737: IFFALSE 3865
// begin r := starting_resources [ i ] ;
3739: LD_ADDR_VAR 0 8
3743: PUSH
3744: LD_EXP 22
3748: PUSH
3749: LD_VAR 0 7
3753: ARRAY
3754: ST_TO_ADDR
// while r >= 10 do
3755: LD_VAR 0 8
3759: PUSH
3760: LD_INT 10
3762: GREATEREQUAL
3763: IFFALSE 3863
// if r > 50 then
3765: LD_VAR 0 8
3769: PUSH
3770: LD_INT 50
3772: GREATER
3773: IFFALSE 3819
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3775: LD_VAR 0 7
3779: PPUSH
3780: LD_INT 5
3782: PPUSH
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_VAR 0 5
3792: PPUSH
3793: LD_INT 4
3795: PPUSH
3796: LD_INT 0
3798: PPUSH
3799: CALL_OW 60
// r := r - 50 ;
3803: LD_ADDR_VAR 0 8
3807: PUSH
3808: LD_VAR 0 8
3812: PUSH
3813: LD_INT 50
3815: MINUS
3816: ST_TO_ADDR
// end else
3817: GO 3861
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3819: LD_VAR 0 7
3823: PPUSH
3824: LD_VAR 0 8
3828: PUSH
3829: LD_INT 10
3831: DIV
3832: PPUSH
3833: LD_VAR 0 4
3837: PPUSH
3838: LD_VAR 0 5
3842: PPUSH
3843: LD_INT 4
3845: PPUSH
3846: LD_INT 0
3848: PPUSH
3849: CALL_OW 60
// r := 0 ;
3853: LD_ADDR_VAR 0 8
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// end ;
3861: GO 3755
// end ;
3863: GO 3736
3865: POP
3866: POP
// end ; for r in starting_crates do
3867: LD_ADDR_VAR 0 8
3871: PUSH
3872: LD_EXP 21
3876: PUSH
3877: FOR_IN
3878: IFFALSE 3910
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3880: LD_INT 1
3882: PPUSH
3883: LD_INT 5
3885: PPUSH
3886: LD_VAR 0 4
3890: PPUSH
3891: LD_VAR 0 5
3895: PPUSH
3896: LD_VAR 0 8
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL_OW 60
3908: GO 3877
3910: POP
3911: POP
// if def_morale_flags then
3912: LD_EXP 9
3916: IFFALSE 4055
// begin x := start_def [ pos ] [ 1 ] ;
3918: LD_ADDR_VAR 0 4
3922: PUSH
3923: LD_EXP 39
3927: PUSH
3928: LD_VAR 0 3
3932: ARRAY
3933: PUSH
3934: LD_INT 1
3936: ARRAY
3937: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3938: LD_ADDR_VAR 0 5
3942: PUSH
3943: LD_EXP 39
3947: PUSH
3948: LD_VAR 0 3
3952: ARRAY
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3958: LD_VAR 0 4
3962: PPUSH
3963: LD_VAR 0 5
3967: PPUSH
3968: LD_INT 12
3970: PPUSH
3971: LD_INT 2
3973: PPUSH
3974: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3978: LD_ADDR_EXP 44
3982: PUSH
3983: LD_EXP 44
3987: PUSH
3988: LD_VAR 0 1
3992: PPUSH
3993: LD_VAR 0 4
3997: PPUSH
3998: LD_VAR 0 5
4002: PPUSH
4003: LD_INT 1
4005: PUSH
4006: LD_INT 100
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 50
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 3
4025: PUSH
4026: LD_INT 20
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: LD_INT 20
4035: PUSH
4036: LD_INT 100
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: PPUSH
4049: CALL_OW 418
4053: ADD
4054: ST_TO_ADDR
// end ; commander := true ;
4055: LD_ADDR_LOC 1
4059: PUSH
4060: LD_INT 1
4062: ST_TO_ADDR
// soldiers_created := 0 ;
4063: LD_ADDR_LOC 4
4067: PUSH
4068: LD_INT 0
4070: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4071: LD_ADDR_VAR 0 7
4075: PUSH
4076: DOUBLE
4077: LD_INT 1
4079: DEC
4080: ST_TO_ADDR
4081: LD_EXP 18
4085: PUSH
4086: FOR_TO
4087: IFFALSE 4240
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4089: LD_ADDR_VAR 0 4
4093: PUSH
4094: LD_EXP 38
4098: PUSH
4099: LD_VAR 0 3
4103: ARRAY
4104: PUSH
4105: LD_VAR 0 7
4109: ARRAY
4110: PUSH
4111: LD_INT 1
4113: ARRAY
4114: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4115: LD_ADDR_VAR 0 5
4119: PUSH
4120: LD_EXP 38
4124: PUSH
4125: LD_VAR 0 3
4129: ARRAY
4130: PUSH
4131: LD_VAR 0 7
4135: ARRAY
4136: PUSH
4137: LD_INT 2
4139: ARRAY
4140: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4141: LD_ADDR_VAR 0 6
4145: PUSH
4146: LD_EXP 38
4150: PUSH
4151: LD_VAR 0 3
4155: ARRAY
4156: PUSH
4157: LD_VAR 0 7
4161: ARRAY
4162: PUSH
4163: LD_INT 3
4165: ARRAY
4166: ST_TO_ADDR
// bc_type := b_breastwork ;
4167: LD_ADDR_OWVAR 42
4171: PUSH
4172: LD_INT 31
4174: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4175: LD_ADDR_VAR 0 9
4179: PUSH
4180: LD_VAR 0 4
4184: PPUSH
4185: LD_VAR 0 5
4189: PPUSH
4190: LD_VAR 0 6
4194: PPUSH
4195: CALL_OW 47
4199: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4200: LD_INT 1
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: LD_INT 0
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: LD_VAR 0 9
4219: PPUSH
4220: CALL 2866 0 6
// soldiers_created := soldiers_created + 1 ;
4224: LD_ADDR_LOC 4
4228: PUSH
4229: LD_LOC 4
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: ST_TO_ADDR
// end ;
4238: GO 4086
4240: POP
4241: POP
// x := start_def [ pos ] [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_EXP 39
4251: PUSH
4252: LD_VAR 0 3
4256: ARRAY
4257: PUSH
4258: LD_INT 1
4260: ARRAY
4261: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4262: LD_ADDR_VAR 0 5
4266: PUSH
4267: LD_EXP 39
4271: PUSH
4272: LD_VAR 0 3
4276: ARRAY
4277: PUSH
4278: LD_INT 2
4280: ARRAY
4281: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4282: LD_LOC 8
4286: PUSH
4287: LD_EXP 18
4291: MINUS
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 4
4300: PPUSH
4301: LD_VAR 0 5
4305: PPUSH
4306: LD_INT 5
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL 2866 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4316: LD_LOC 5
4320: PPUSH
4321: LD_INT 2
4323: PPUSH
4324: LD_VAR 0 4
4328: PPUSH
4329: LD_VAR 0 5
4333: PPUSH
4334: LD_INT 5
4336: PPUSH
4337: LD_INT 0
4339: PPUSH
4340: CALL 2866 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4344: LD_LOC 7
4348: PPUSH
4349: LD_INT 3
4351: PPUSH
4352: LD_VAR 0 4
4356: PPUSH
4357: LD_VAR 0 5
4361: PPUSH
4362: LD_INT 5
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL 2866 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4372: LD_LOC 6
4376: PPUSH
4377: LD_INT 4
4379: PPUSH
4380: LD_VAR 0 4
4384: PPUSH
4385: LD_VAR 0 5
4389: PPUSH
4390: LD_INT 5
4392: PPUSH
4393: LD_INT 0
4395: PPUSH
4396: CALL 2866 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4400: LD_EXP 10
4404: PUSH
4405: LD_INT 20
4407: PPUSH
4408: LD_VAR 0 1
4412: PPUSH
4413: CALL_OW 321
4417: PUSH
4418: LD_INT 1
4420: EQUAL
4421: AND
4422: IFFALSE 4439
// SetTech ( tech_SibDet , side , state_researched ) ;
4424: LD_INT 20
4426: PPUSH
4427: LD_VAR 0 1
4431: PPUSH
4432: LD_INT 2
4434: PPUSH
4435: CALL_OW 322
// if def_siberite_bomb = 1 then
4439: LD_EXP 13
4443: PUSH
4444: LD_INT 1
4446: EQUAL
4447: IFFALSE 4481
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4449: LD_INT 25
4451: PPUSH
4452: LD_VAR 0 1
4456: PPUSH
4457: LD_INT 1
4459: PPUSH
4460: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4464: LD_INT 73
4466: PPUSH
4467: LD_VAR 0 1
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL_OW 322
// end else
4479: GO 4511
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4481: LD_INT 25
4483: PPUSH
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4496: LD_INT 73
4498: PPUSH
4499: LD_VAR 0 1
4503: PPUSH
4504: LD_INT 0
4506: PPUSH
4507: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4511: LD_INT 24
4513: PPUSH
4514: LD_VAR 0 1
4518: PPUSH
4519: LD_INT 0
4521: PPUSH
4522: CALL_OW 322
// global_defined := true ;
4526: LD_ADDR_LOC 3
4530: PUSH
4531: LD_INT 1
4533: ST_TO_ADDR
// end ;
4534: LD_VAR 0 2
4538: RET
// function prepare_sides ; var i ; begin
4539: LD_INT 0
4541: PPUSH
4542: PPUSH
// global_units := [ ] ;
4543: LD_ADDR_LOC 2
4547: PUSH
4548: EMPTY
4549: ST_TO_ADDR
// global_defined := false ;
4550: LD_ADDR_LOC 3
4554: PUSH
4555: LD_INT 0
4557: ST_TO_ADDR
// CountClassMembers ;
4558: CALL 4608 0 0
// for i := 1 to 8 do
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: DOUBLE
4568: LD_INT 1
4570: DEC
4571: ST_TO_ADDR
4572: LD_INT 8
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4601
// if Side_Positions [ i ] then
4578: LD_EXP 34
4582: PUSH
4583: LD_VAR 0 2
4587: ARRAY
4588: IFFALSE 4599
// prepare_side ( i ) ;
4590: LD_VAR 0 2
4594: PPUSH
4595: CALL 3454 0 1
4599: GO 4575
4601: POP
4602: POP
// end ;
4603: LD_VAR 0 1
4607: RET
// function CountClassMembers ; var Mode ; begin
4608: LD_INT 0
4610: PPUSH
4611: PPUSH
// if No_Mechs then
4612: LD_EXP 15
4616: IFFALSE 4628
// Mode := 2 else
4618: LD_ADDR_VAR 0 2
4622: PUSH
4623: LD_INT 2
4625: ST_TO_ADDR
4626: GO 4636
// Mode := 1 ;
4628: LD_ADDR_VAR 0 2
4632: PUSH
4633: LD_INT 1
4635: ST_TO_ADDR
// neng := number_of_people ;
4636: LD_ADDR_LOC 5
4640: PUSH
4641: LD_EXP 19
4645: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4646: LD_ADDR_LOC 8
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 4
4658: PUSH
4659: LD_INT 3
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4673: LD_LOC 8
4677: PUSH
4678: LD_EXP 18
4682: LESS
4683: IFFALSE 4695
// nsol := number_of_breastworks ;
4685: LD_ADDR_LOC 8
4689: PUSH
4690: LD_EXP 18
4694: ST_TO_ADDR
// neng := neng - nsol ;
4695: LD_ADDR_LOC 5
4699: PUSH
4700: LD_LOC 5
4704: PUSH
4705: LD_LOC 8
4709: MINUS
4710: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4711: LD_ADDR_LOC 6
4715: PUSH
4716: LD_LOC 5
4720: PUSH
4721: LD_INT 3
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_VAR 0 2
4735: ARRAY
4736: DIV
4737: ST_TO_ADDR
// if ( nsci < 1 ) then
4738: LD_LOC 6
4742: PUSH
4743: LD_INT 1
4745: LESS
4746: IFFALSE 4756
// nsci := 1 ;
4748: LD_ADDR_LOC 6
4752: PUSH
4753: LD_INT 1
4755: ST_TO_ADDR
// neng := neng - nsci ;
4756: LD_ADDR_LOC 5
4760: PUSH
4761: LD_LOC 5
4765: PUSH
4766: LD_LOC 6
4770: MINUS
4771: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4772: LD_ADDR_LOC 7
4776: PUSH
4777: LD_LOC 5
4781: PUSH
4782: LD_INT 2
4784: DIV
4785: PUSH
4786: LD_INT 0
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_VAR 0 2
4797: ARRAY
4798: ST_TO_ADDR
// neng := neng - nmech ;
4799: LD_ADDR_LOC 5
4803: PUSH
4804: LD_LOC 5
4808: PUSH
4809: LD_LOC 7
4813: MINUS
4814: ST_TO_ADDR
// if ( neng < 1 ) then
4815: LD_LOC 5
4819: PUSH
4820: LD_INT 1
4822: LESS
4823: IFFALSE 4833
// neng := 1 ;
4825: LD_ADDR_LOC 5
4829: PUSH
4830: LD_INT 1
4832: ST_TO_ADDR
// end ;
4833: LD_VAR 0 1
4837: RET
// starting begin disable ( 98 ) ;
4838: LD_INT 98
4840: DISABLE_MARKED
// disable ( 99 ) ;
4841: LD_INT 99
4843: DISABLE_MARKED
// disable ( 400 ) ;
4844: LD_INT 400
4846: DISABLE_MARKED
// disable ( 401 ) ;
4847: LD_INT 401
4849: DISABLE_MARKED
// mp_selectmsg := true ;
4850: LD_ADDR_OWVAR 13
4854: PUSH
4855: LD_INT 1
4857: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4858: CALL 68 0 0
// init_map ;
4862: CALL 1251 0 0
// init_respawning ;
4866: CALL 14322 0 0
// set_shared_visions_and_alliances ;
4870: CALL 2578 0 0
// ResetFog ;
4874: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4878: LD_OWVAR 2
4882: PPUSH
4883: CALL_OW 520
// AnimateTrees ( true ) ;
4887: LD_INT 1
4889: PPUSH
4890: CALL_OW 573
// prepare_sides ;
4894: CALL 4539 0 0
// Init_Win_Condition ;
4898: CALL 8303 0 0
// ShowTimer ;
4902: CALL 7283 0 0
// music_nat := Side_Nations [ your_side ] ;
4906: LD_ADDR_OWVAR 71
4910: PUSH
4911: LD_EXP 35
4915: PUSH
4916: LD_OWVAR 2
4920: ARRAY
4921: ST_TO_ADDR
// if IAmSpec then
4922: CALL_OW 531
4926: IFFALSE 4950
// begin fogoff ( true ) ;
4928: LD_INT 1
4930: PPUSH
4931: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4935: LD_INT 130
4937: PPUSH
4938: LD_INT 100
4940: PPUSH
4941: CALL_OW 86
// enable ( 400 ) ;
4945: LD_INT 400
4947: ENABLE_MARKED
// end else
4948: GO 4996
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4950: LD_EXP 39
4954: PUSH
4955: LD_EXP 34
4959: PUSH
4960: LD_OWVAR 2
4964: ARRAY
4965: ARRAY
4966: PUSH
4967: LD_INT 1
4969: ARRAY
4970: PPUSH
4971: LD_EXP 39
4975: PUSH
4976: LD_EXP 34
4980: PUSH
4981: LD_OWVAR 2
4985: ARRAY
4986: ARRAY
4987: PUSH
4988: LD_INT 2
4990: ARRAY
4991: PPUSH
4992: CALL_OW 86
// end ; InitApeman ;
4996: CALL 5801 0 0
// BuildUpAreas := [ bt1 , bt2 , bt3 , bt4 , bt5 , bt6 , bt7 , bt8 ] ;
5000: LD_ADDR_EXP 55
5004: PUSH
5005: LD_INT 9
5007: PUSH
5008: LD_INT 10
5010: PUSH
5011: LD_INT 11
5013: PUSH
5014: LD_INT 12
5016: PUSH
5017: LD_INT 13
5019: PUSH
5020: LD_INT 14
5022: PUSH
5023: LD_INT 15
5025: PUSH
5026: LD_INT 16
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: ST_TO_ADDR
// BeginBuildUp ;
5039: CALL 7466 0 0
// end ;
5043: END
// every 0 0$1 do
5044: GO 5046
5046: DISABLE
// if ( def_siberite_bomb > 1 ) then
5047: LD_EXP 13
5051: PUSH
5052: LD_INT 1
5054: GREATER
5055: IFFALSE 5070
// begin wait ( siberite_bomb_Delay ) ;
5057: LD_EXP 29
5061: PPUSH
5062: CALL_OW 67
// EnableSibFiss ;
5066: CALL 5071 0 0
// end ;
5070: END
// function EnableSibFiss ; var i ; begin
5071: LD_INT 0
5073: PPUSH
5074: PPUSH
// for i := 1 to 8 do
5075: LD_ADDR_VAR 0 2
5079: PUSH
5080: DOUBLE
5081: LD_INT 1
5083: DEC
5084: ST_TO_ADDR
5085: LD_INT 8
5087: PUSH
5088: FOR_TO
5089: IFFALSE 5135
// if Side_Positions [ i ] then
5091: LD_EXP 34
5095: PUSH
5096: LD_VAR 0 2
5100: ARRAY
5101: IFFALSE 5133
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5103: LD_INT 25
5105: PPUSH
5106: LD_VAR 0 2
5110: PPUSH
5111: LD_INT 1
5113: PPUSH
5114: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5118: LD_INT 73
5120: PPUSH
5121: LD_VAR 0 2
5125: PPUSH
5126: LD_INT 1
5128: PPUSH
5129: CALL_OW 322
// end ;
5133: GO 5088
5135: POP
5136: POP
// end ; end_of_file
5137: LD_VAR 0 1
5141: RET
// every 1 1$0 + 0 0$0.3 do
5142: GO 5144
5144: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5145: LD_INT 4
5147: PPUSH
5148: LD_INT 5
5150: PPUSH
5151: CALL_OW 12
5155: PPUSH
5156: LD_INT 1
5158: PPUSH
5159: CALL_OW 57
// enable ;
5163: ENABLE
// end ;
5164: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5165: GO 5167
5167: DISABLE
5168: LD_INT 0
5170: PPUSH
5171: PPUSH
// begin case tick of 1 .. 1 1$0 :
5172: LD_OWVAR 1
5176: PUSH
5177: LD_INT 1
5179: DOUBLE
5180: GREATEREQUAL
5181: IFFALSE 5189
5183: LD_INT 2100
5185: DOUBLE
5186: LESSEQUAL
5187: IFTRUE 5191
5189: GO 5219
5191: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5192: LD_EXP 23
5196: PUSH
5197: LD_INT 100
5199: DIVREAL
5200: PUSH
5201: LD_INT 350
5203: PPUSH
5204: LD_INT 700
5206: PPUSH
5207: CALL_OW 12
5211: MUL
5212: PPUSH
5213: CALL_OW 67
5217: GO 5521
5219: LD_INT 2100
5221: PUSH
5222: LD_INT 1
5224: PLUS
5225: DOUBLE
5226: GREATEREQUAL
5227: IFFALSE 5235
5229: LD_INT 10500
5231: DOUBLE
5232: LESSEQUAL
5233: IFTRUE 5237
5235: GO 5265
5237: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5238: LD_EXP 23
5242: PUSH
5243: LD_INT 100
5245: DIVREAL
5246: PUSH
5247: LD_INT 700
5249: PPUSH
5250: LD_INT 1225
5252: PPUSH
5253: CALL_OW 12
5257: MUL
5258: PPUSH
5259: CALL_OW 67
5263: GO 5521
5265: LD_INT 10500
5267: PUSH
5268: LD_INT 1
5270: PLUS
5271: DOUBLE
5272: GREATEREQUAL
5273: IFFALSE 5281
5275: LD_INT 21000
5277: DOUBLE
5278: LESSEQUAL
5279: IFTRUE 5283
5281: GO 5311
5283: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$45 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5284: LD_EXP 23
5288: PUSH
5289: LD_INT 100
5291: DIVREAL
5292: PUSH
5293: LD_INT 1225
5295: PPUSH
5296: LD_INT 1575
5298: PPUSH
5299: CALL_OW 12
5303: MUL
5304: PPUSH
5305: CALL_OW 67
5309: GO 5521
5311: LD_INT 21000
5313: PUSH
5314: LD_INT 1
5316: PLUS
5317: DOUBLE
5318: GREATEREQUAL
5319: IFFALSE 5327
5321: LD_INT 42000
5323: DOUBLE
5324: LESSEQUAL
5325: IFTRUE 5329
5327: GO 5357
5329: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 0 0$55 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5330: LD_EXP 23
5334: PUSH
5335: LD_INT 100
5337: DIVREAL
5338: PUSH
5339: LD_INT 1575
5341: PPUSH
5342: LD_INT 1925
5344: PPUSH
5345: CALL_OW 12
5349: MUL
5350: PPUSH
5351: CALL_OW 67
5355: GO 5521
5357: LD_INT 42000
5359: PUSH
5360: LD_INT 1
5362: PLUS
5363: DOUBLE
5364: GREATEREQUAL
5365: IFFALSE 5373
5367: LD_INT 63000
5369: DOUBLE
5370: LESSEQUAL
5371: IFTRUE 5375
5373: GO 5403
5375: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$55 , 1 1$05 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5376: LD_EXP 23
5380: PUSH
5381: LD_INT 100
5383: DIVREAL
5384: PUSH
5385: LD_INT 1925
5387: PPUSH
5388: LD_INT 2275
5390: PPUSH
5391: CALL_OW 12
5395: MUL
5396: PPUSH
5397: CALL_OW 67
5401: GO 5521
5403: LD_INT 63000
5405: PUSH
5406: LD_INT 1
5408: PLUS
5409: DOUBLE
5410: GREATEREQUAL
5411: IFFALSE 5419
5413: LD_INT 105000
5415: DOUBLE
5416: LESSEQUAL
5417: IFTRUE 5421
5419: GO 5449
5421: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$15 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5422: LD_EXP 23
5426: PUSH
5427: LD_INT 100
5429: DIVREAL
5430: PUSH
5431: LD_INT 2275
5433: PPUSH
5434: LD_INT 2625
5436: PPUSH
5437: CALL_OW 12
5441: MUL
5442: PPUSH
5443: CALL_OW 67
5447: GO 5521
5449: LD_INT 105000
5451: PUSH
5452: LD_INT 1
5454: PLUS
5455: DOUBLE
5456: GREATEREQUAL
5457: IFFALSE 5465
5459: LD_INT 630000
5461: DOUBLE
5462: LESSEQUAL
5463: IFTRUE 5467
5465: GO 5495
5467: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; else
5468: LD_EXP 23
5472: PUSH
5473: LD_INT 100
5475: DIVREAL
5476: PUSH
5477: LD_INT 2625
5479: PPUSH
5480: LD_INT 3150
5482: PPUSH
5483: CALL_OW 12
5487: MUL
5488: PPUSH
5489: CALL_OW 67
5493: GO 5521
5495: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; end ;
5496: LD_EXP 23
5500: PUSH
5501: LD_INT 100
5503: DIVREAL
5504: PUSH
5505: LD_INT 3150
5507: PPUSH
5508: LD_INT 3675
5510: PPUSH
5511: CALL_OW 12
5515: MUL
5516: PPUSH
5517: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: LD_INT 3
5528: PPUSH
5529: LD_INT 5
5531: PPUSH
5532: CALL_OW 12
5536: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5537: LD_ADDR_VAR 0 1
5541: PUSH
5542: LD_EXP 34
5546: PUSH
5547: LD_INT 0
5549: PUSH
5550: EMPTY
5551: LIST
5552: DIFF
5553: PUSH
5554: FOR_IN
5555: IFFALSE 5604
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5557: LD_VAR 0 2
5561: PPUSH
5562: LD_EXP 39
5566: PUSH
5567: LD_VAR 0 1
5571: ARRAY
5572: PUSH
5573: LD_INT 1
5575: ARRAY
5576: PPUSH
5577: LD_EXP 39
5581: PUSH
5582: LD_VAR 0 1
5586: ARRAY
5587: PUSH
5588: LD_INT 2
5590: ARRAY
5591: PPUSH
5592: LD_INT 20
5594: PPUSH
5595: LD_INT 1
5597: PPUSH
5598: CALL_OW 56
5602: GO 5554
5604: POP
5605: POP
// enable ;
5606: ENABLE
// end ; end_of_file
5607: PPOPN 2
5609: END
// every 20 20$00 trigger apemanNumber do
5610: LD_EXP 46
5614: IFFALSE 5647
5616: GO 5618
5618: DISABLE
// begin enable ;
5619: ENABLE
// if apeLevel >= 8 then
5620: LD_EXP 51
5624: PUSH
5625: LD_INT 8
5627: GREATEREQUAL
5628: IFFALSE 5633
// disable else
5630: DISABLE
5631: GO 5647
// apeLevel := apeLevel + 1 ;
5633: LD_ADDR_EXP 51
5637: PUSH
5638: LD_EXP 51
5642: PUSH
5643: LD_INT 1
5645: PLUS
5646: ST_TO_ADDR
// end ;
5647: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5648: LD_EXP 46
5652: PUSH
5653: LD_EXP 47
5657: LESS
5658: IFFALSE 5798
5660: GO 5662
5662: DISABLE
5663: LD_INT 0
5665: PPUSH
5666: PPUSH
5667: PPUSH
5668: PPUSH
// begin enable ;
5669: ENABLE
// for i := 1 to apemanPos do
5670: LD_ADDR_VAR 0 1
5674: PUSH
5675: DOUBLE
5676: LD_INT 1
5678: DEC
5679: ST_TO_ADDR
5680: LD_EXP 49
5684: PUSH
5685: FOR_TO
5686: IFFALSE 5796
// begin if apemanPlayerCount [ i ] then
5688: LD_EXP 50
5692: PUSH
5693: LD_VAR 0 1
5697: ARRAY
5698: IFFALSE 5794
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5700: LD_EXP 50
5704: PUSH
5705: LD_VAR 0 1
5709: ARRAY
5710: PUSH
5711: LD_EXP 49
5715: PUSH
5716: LD_VAR 0 1
5720: ARRAY
5721: GREATER
5722: IFFALSE 5794
// begin ape := PrepareApeman ;
5724: LD_ADDR_VAR 0 2
5728: PUSH
5729: CALL 6317 0 0
5733: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5734: LD_VAR 0 2
5738: PPUSH
5739: LD_EXP 52
5743: PUSH
5744: LD_VAR 0 1
5748: ARRAY
5749: PPUSH
5750: LD_INT 0
5752: PPUSH
5753: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5757: LD_ADDR_EXP 49
5761: PUSH
5762: LD_EXP 49
5766: PPUSH
5767: LD_VAR 0 1
5771: PPUSH
5772: LD_EXP 49
5776: PUSH
5777: LD_VAR 0 1
5781: ARRAY
5782: PUSH
5783: LD_VAR 0 2
5787: UNION
5788: PPUSH
5789: CALL_OW 1
5793: ST_TO_ADDR
// end ; end ; end ;
5794: GO 5685
5796: POP
5797: POP
// end ;
5798: PPOPN 4
5800: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5801: LD_INT 0
5803: PPUSH
5804: PPUSH
5805: PPUSH
5806: PPUSH
5807: PPUSH
5808: PPUSH
5809: PPUSH
// playersAmount := 0 ;
5810: LD_ADDR_VAR 0 3
5814: PUSH
5815: LD_INT 0
5817: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
5818: LD_ADDR_VAR 0 7
5822: PUSH
5823: LD_INT 1
5825: PUSH
5826: LD_INT 2
5828: PUSH
5829: LD_INT 3
5831: PUSH
5832: LD_INT 4
5834: PUSH
5835: LD_INT 5
5837: PUSH
5838: LD_INT 6
5840: PUSH
5841: LD_INT 7
5843: PUSH
5844: LD_INT 8
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5857: LD_ADDR_EXP 52
5861: PUSH
5862: LD_INT 0
5864: PUSH
5865: LD_INT 0
5867: PUSH
5868: LD_INT 0
5870: PUSH
5871: LD_INT 0
5873: PUSH
5874: LD_INT 0
5876: PUSH
5877: LD_INT 0
5879: PUSH
5880: LD_INT 0
5882: PUSH
5883: LD_INT 0
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: ST_TO_ADDR
// for j = 1 to Side_Positions do
5896: LD_ADDR_VAR 0 4
5900: PUSH
5901: DOUBLE
5902: LD_INT 1
5904: DEC
5905: ST_TO_ADDR
5906: LD_EXP 34
5910: PUSH
5911: FOR_TO
5912: IFFALSE 5979
// if Side_Positions [ j ] then
5914: LD_EXP 34
5918: PUSH
5919: LD_VAR 0 4
5923: ARRAY
5924: IFFALSE 5977
// begin playersAmount := playersAmount + 1 ;
5926: LD_ADDR_VAR 0 3
5930: PUSH
5931: LD_VAR 0 3
5935: PUSH
5936: LD_INT 1
5938: PLUS
5939: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5940: LD_ADDR_EXP 52
5944: PUSH
5945: LD_EXP 52
5949: PPUSH
5950: LD_VAR 0 4
5954: PPUSH
5955: LD_VAR 0 7
5959: PUSH
5960: LD_EXP 34
5964: PUSH
5965: LD_VAR 0 4
5969: ARRAY
5970: ARRAY
5971: PPUSH
5972: CALL_OW 1
5976: ST_TO_ADDR
// end ;
5977: GO 5911
5979: POP
5980: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5981: LD_ADDR_EXP 48
5985: PUSH
5986: LD_INT 3
5988: PUSH
5989: LD_EXP 25
5993: MUL
5994: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5995: LD_ADDR_EXP 46
5999: PUSH
6000: LD_VAR 0 3
6004: PUSH
6005: LD_EXP 48
6009: MUL
6010: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6011: LD_ADDR_EXP 47
6015: PUSH
6016: LD_EXP 46
6020: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6021: LD_ADDR_EXP 49
6025: PUSH
6026: LD_INT 0
6028: PUSH
6029: LD_INT 0
6031: PUSH
6032: LD_INT 0
6034: PUSH
6035: LD_INT 0
6037: PUSH
6038: LD_INT 0
6040: PUSH
6041: LD_INT 0
6043: PUSH
6044: LD_INT 0
6046: PUSH
6047: LD_INT 0
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6060: LD_ADDR_EXP 50
6064: PUSH
6065: LD_INT 0
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: LD_INT 0
6079: PUSH
6080: LD_INT 0
6082: PUSH
6083: LD_INT 0
6085: PUSH
6086: LD_INT 0
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: ST_TO_ADDR
// apeLevel := 1 ;
6099: LD_ADDR_EXP 51
6103: PUSH
6104: LD_INT 1
6106: ST_TO_ADDR
// if not apemanNumber then
6107: LD_EXP 46
6111: NOT
6112: IFFALSE 6116
// exit ;
6114: GO 6312
// for i := 1 to apemanPerPlayer do
6116: LD_ADDR_VAR 0 2
6120: PUSH
6121: DOUBLE
6122: LD_INT 1
6124: DEC
6125: ST_TO_ADDR
6126: LD_EXP 48
6130: PUSH
6131: FOR_TO
6132: IFFALSE 6310
// begin for j := 1 to Side_Positions do
6134: LD_ADDR_VAR 0 4
6138: PUSH
6139: DOUBLE
6140: LD_INT 1
6142: DEC
6143: ST_TO_ADDR
6144: LD_EXP 34
6148: PUSH
6149: FOR_TO
6150: IFFALSE 6306
// if Side_Positions [ j ] then
6152: LD_EXP 34
6156: PUSH
6157: LD_VAR 0 4
6161: ARRAY
6162: IFFALSE 6304
// begin pos := Side_Positions [ j ] ;
6164: LD_ADDR_VAR 0 6
6168: PUSH
6169: LD_EXP 34
6173: PUSH
6174: LD_VAR 0 4
6178: ARRAY
6179: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6180: LD_ADDR_EXP 50
6184: PUSH
6185: LD_EXP 50
6189: PPUSH
6190: LD_VAR 0 4
6194: PPUSH
6195: LD_EXP 50
6199: PUSH
6200: LD_VAR 0 4
6204: ARRAY
6205: PUSH
6206: LD_INT 1
6208: PLUS
6209: PPUSH
6210: CALL_OW 1
6214: ST_TO_ADDR
// ape := PrepareApeman ;
6215: LD_ADDR_VAR 0 5
6219: PUSH
6220: CALL 6317 0 0
6224: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6225: LD_ADDR_EXP 49
6229: PUSH
6230: LD_EXP 49
6234: PPUSH
6235: LD_VAR 0 4
6239: PPUSH
6240: LD_EXP 49
6244: PUSH
6245: LD_VAR 0 4
6249: ARRAY
6250: PPUSH
6251: LD_EXP 49
6255: PUSH
6256: LD_VAR 0 4
6260: ARRAY
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: PPUSH
6266: LD_VAR 0 5
6270: PPUSH
6271: CALL_OW 1
6275: PPUSH
6276: CALL_OW 1
6280: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6281: LD_VAR 0 5
6285: PPUSH
6286: LD_EXP 52
6290: PUSH
6291: LD_VAR 0 4
6295: ARRAY
6296: PPUSH
6297: LD_INT 0
6299: PPUSH
6300: CALL_OW 49
// end ;
6304: GO 6149
6306: POP
6307: POP
// end ;
6308: GO 6131
6310: POP
6311: POP
// end ;
6312: LD_VAR 0 1
6316: RET
// export function PrepareApeman ; var bonus ; begin
6317: LD_INT 0
6319: PPUSH
6320: PPUSH
// uc_side := 0 ;
6321: LD_ADDR_OWVAR 20
6325: PUSH
6326: LD_INT 0
6328: ST_TO_ADDR
// uc_nation := 0 ;
6329: LD_ADDR_OWVAR 21
6333: PUSH
6334: LD_INT 0
6336: ST_TO_ADDR
// InitHc ;
6337: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6341: LD_ADDR_VAR 0 2
6345: PUSH
6346: LD_INT 1
6348: NEG
6349: PUSH
6350: LD_INT 0
6352: PUSH
6353: LD_INT 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: PUSH
6361: LD_OWVAR 1
6365: PUSH
6366: LD_INT 3
6368: MOD
6369: PUSH
6370: LD_INT 1
6372: PLUS
6373: ARRAY
6374: ST_TO_ADDR
// hc_class := class_apeman ;
6375: LD_ADDR_OWVAR 28
6379: PUSH
6380: LD_INT 12
6382: ST_TO_ADDR
// hc_gallery :=  ;
6383: LD_ADDR_OWVAR 33
6387: PUSH
6388: LD_STRING 
6390: ST_TO_ADDR
// hc_name :=  ;
6391: LD_ADDR_OWVAR 26
6395: PUSH
6396: LD_STRING 
6398: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6399: LD_ADDR_OWVAR 31
6403: PUSH
6404: LD_EXP 51
6408: PUSH
6409: LD_VAR 0 2
6413: PLUS
6414: PUSH
6415: LD_EXP 51
6419: PUSH
6420: LD_VAR 0 2
6424: PLUS
6425: PUSH
6426: LD_EXP 51
6430: PUSH
6431: LD_VAR 0 2
6435: PLUS
6436: PUSH
6437: LD_EXP 51
6441: PUSH
6442: LD_VAR 0 2
6446: PLUS
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6454: LD_ADDR_OWVAR 35
6458: PUSH
6459: LD_INT 10
6461: PUSH
6462: LD_VAR 0 2
6466: MUL
6467: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6468: LD_ADDR_OWVAR 29
6472: PUSH
6473: LD_INT 12
6475: PUSH
6476: LD_INT 10
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: ST_TO_ADDR
// result := CreateHuman ;
6483: LD_ADDR_VAR 0 1
6487: PUSH
6488: CALL_OW 44
6492: ST_TO_ADDR
// end ;
6493: LD_VAR 0 1
6497: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6498: LD_INT 0
6500: PPUSH
6501: PPUSH
6502: PPUSH
// if not ape then
6503: LD_VAR 0 1
6507: NOT
6508: IFFALSE 6512
// exit ;
6510: GO 6637
// side := GetSide ( ape ) ;
6512: LD_ADDR_VAR 0 3
6516: PUSH
6517: LD_VAR 0 1
6521: PPUSH
6522: CALL_OW 255
6526: ST_TO_ADDR
// if not side then
6527: LD_VAR 0 3
6531: NOT
6532: IFFALSE 6586
// begin for i = 1 to apemanPos do
6534: LD_ADDR_VAR 0 4
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_EXP 49
6548: PUSH
6549: FOR_TO
6550: IFFALSE 6584
// if ape in apemanPos [ i ] then
6552: LD_VAR 0 1
6556: PUSH
6557: LD_EXP 49
6561: PUSH
6562: LD_VAR 0 4
6566: ARRAY
6567: IN
6568: IFFALSE 6582
// begin side := i ;
6570: LD_ADDR_VAR 0 3
6574: PUSH
6575: LD_VAR 0 4
6579: ST_TO_ADDR
// break ;
6580: GO 6584
// end ;
6582: GO 6549
6584: POP
6585: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6586: LD_ADDR_EXP 49
6590: PUSH
6591: LD_EXP 49
6595: PPUSH
6596: LD_VAR 0 3
6600: PPUSH
6601: LD_EXP 49
6605: PUSH
6606: LD_VAR 0 3
6610: ARRAY
6611: PUSH
6612: LD_VAR 0 1
6616: DIFF
6617: PPUSH
6618: CALL_OW 1
6622: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6623: LD_ADDR_EXP 46
6627: PUSH
6628: LD_EXP 46
6632: PUSH
6633: LD_INT 1
6635: MINUS
6636: ST_TO_ADDR
// end ; end_of_file
6637: LD_VAR 0 2
6641: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6642: LD_VAR 0 1
6646: PPUSH
6647: CALL_OW 266
6651: PUSH
6652: LD_INT 0
6654: PUSH
6655: LD_INT 1
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: IN
6662: IFFALSE 6687
// SetBName ( b , @ & GetSide ( b ) ) ;
6664: LD_VAR 0 1
6668: PPUSH
6669: LD_STRING @
6671: PUSH
6672: LD_VAR 0 1
6676: PPUSH
6677: CALL_OW 255
6681: STR
6682: PPUSH
6683: CALL_OW 500
// end ;
6687: PPOPN 2
6689: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 266
6699: PUSH
6700: LD_INT 0
6702: PUSH
6703: LD_INT 1
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: IN
6710: IFFALSE 6735
// SetBName ( b , @ & GetSide ( b ) ) ;
6712: LD_VAR 0 1
6716: PPUSH
6717: LD_STRING @
6719: PUSH
6720: LD_VAR 0 1
6724: PPUSH
6725: CALL_OW 255
6729: STR
6730: PPUSH
6731: CALL_OW 500
// end ;
6735: PPOPN 3
6737: END
// on VehicleConstructed ( veh , fac ) do var side ;
6738: LD_INT 0
6740: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6741: LD_VAR 0 1
6745: PPUSH
6746: CALL_OW 263
6750: PUSH
6751: LD_INT 5
6753: EQUAL
6754: IFFALSE 6896
// begin side := GetSide ( veh ) ;
6756: LD_ADDR_VAR 0 3
6760: PUSH
6761: LD_VAR 0 1
6765: PPUSH
6766: CALL_OW 255
6770: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6771: LD_ADDR_EXP 49
6775: PUSH
6776: LD_EXP 49
6780: PPUSH
6781: LD_VAR 0 3
6785: PPUSH
6786: LD_EXP 49
6790: PUSH
6791: LD_VAR 0 3
6795: ARRAY
6796: PPUSH
6797: LD_INT 52
6799: PUSH
6800: EMPTY
6801: LIST
6802: PPUSH
6803: CALL_OW 72
6807: PUSH
6808: LD_INT 22
6810: PUSH
6811: LD_VAR 0 3
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: LD_INT 2
6822: PUSH
6823: LD_INT 33
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 25
6835: PUSH
6836: LD_INT 12
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 25
6845: PUSH
6846: LD_INT 15
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 25
6855: PUSH
6856: LD_INT 16
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: PUSH
6863: LD_INT 25
6865: PUSH
6866: LD_INT 17
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PPUSH
6885: CALL_OW 69
6889: UNION
6890: PPUSH
6891: CALL_OW 1
6895: ST_TO_ADDR
// end ; end ;
6896: PPOPN 3
6898: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6899: LD_INT 0
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6905: LD_VAR 0 1
6909: PPUSH
6910: CALL_OW 257
6914: PUSH
6915: LD_INT 12
6917: PUSH
6918: LD_INT 15
6920: PUSH
6921: LD_INT 17
6923: PUSH
6924: LD_INT 16
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: IN
6933: PUSH
6934: LD_VAR 0 1
6938: PPUSH
6939: CALL_OW 263
6943: PUSH
6944: LD_INT 5
6946: EQUAL
6947: OR
6948: IFFALSE 6959
// ApeKilled ( j ) ;
6950: LD_VAR 0 1
6954: PPUSH
6955: CALL 6498 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6959: LD_VAR 0 1
6963: PPUSH
6964: CALL_OW 266
6968: PUSH
6969: LD_INT 0
6971: PUSH
6972: LD_INT 1
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: IN
6979: IFFALSE 7061
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6981: LD_ADDR_VAR 0 4
6985: PUSH
6986: LD_EXP 34
6990: PUSH
6991: LD_VAR 0 1
6995: PPUSH
6996: CALL_OW 255
7000: ARRAY
7001: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7002: LD_ADDR_VAR 0 2
7006: PUSH
7007: LD_EXP 39
7011: PUSH
7012: LD_VAR 0 4
7016: ARRAY
7017: PUSH
7018: LD_INT 1
7020: ARRAY
7021: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7022: LD_ADDR_VAR 0 3
7026: PUSH
7027: LD_EXP 39
7031: PUSH
7032: LD_VAR 0 4
7036: ARRAY
7037: PUSH
7038: LD_INT 2
7040: ARRAY
7041: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7042: LD_VAR 0 2
7046: PPUSH
7047: LD_VAR 0 3
7051: PPUSH
7052: CALL_OW 420
7056: PPUSH
7057: CALL_OW 419
// end ; end ;
7061: PPOPN 5
7063: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7064: LD_VAR 0 1
7068: PPUSH
7069: LD_VAR 0 2
7073: PPUSH
7074: LD_VAR 0 3
7078: PPUSH
7079: LD_OWVAR 2
7083: PPUSH
7084: CALL 8064 0 4
7088: PPOPN 3
7090: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7091: LD_INT 0
7093: PPUSH
7094: PPUSH
// for un in battle_flags_id do
7095: LD_ADDR_VAR 0 2
7099: PUSH
7100: LD_EXP 44
7104: PUSH
7105: FOR_IN
7106: IFFALSE 7181
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7108: LD_VAR 0 2
7112: PPUSH
7113: LD_INT 1
7115: PUSH
7116: LD_LOC 9
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: LD_LOC 9
7132: PUSH
7133: LD_INT 2
7135: DIV
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 3
7143: PUSH
7144: LD_LOC 9
7148: PUSH
7149: LD_INT 5
7151: DIV
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 20
7159: PUSH
7160: LD_LOC 9
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: PPUSH
7175: CALL_OW 423
7179: GO 7105
7181: POP
7182: POP
// end ;
7183: LD_VAR 0 1
7187: RET
// every 1 do var un ;
7188: GO 7190
7190: DISABLE
7191: LD_INT 0
7193: PPUSH
// begin if not def_morale_flags then
7194: LD_EXP 9
7198: NOT
7199: IFFALSE 7203
// exit ;
7201: GO 7280
// if not morale_decreasing_time then
7203: LD_EXP 24
7207: NOT
7208: IFFALSE 7212
// exit ;
7210: GO 7280
// strength = 100 ;
7212: LD_ADDR_LOC 9
7216: PUSH
7217: LD_INT 100
7219: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7220: LD_EXP 24
7224: PPUSH
7225: CALL_OW 67
// strength := strength - 1 ;
7229: LD_ADDR_LOC 9
7233: PUSH
7234: LD_LOC 9
7238: PUSH
7239: LD_INT 1
7241: MINUS
7242: ST_TO_ADDR
// Update_Flags ;
7243: CALL 7091 0 0
// until not strength ;
7247: LD_LOC 9
7251: NOT
7252: IFFALSE 7220
// for un in battle_flags_id do
7254: LD_ADDR_VAR 0 1
7258: PUSH
7259: LD_EXP 44
7263: PUSH
7264: FOR_IN
7265: IFFALSE 7278
// KillBattleFlag ( un ) ;
7267: LD_VAR 0 1
7271: PPUSH
7272: CALL_OW 419
7276: GO 7264
7278: POP
7279: POP
// end ; end_of_file
7280: PPOPN 1
7282: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7283: LD_INT 0
7285: PPUSH
7286: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7287: LD_ADDR_VAR 0 2
7291: PUSH
7292: LD_STRING #Multi1x1-Time
7294: PUSH
7295: LD_OWVAR 1
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: ST_TO_ADDR
// if WaitServerStrings then
7304: LD_EXP 54
7308: IFFALSE 7326
// AllStrings = AllStrings ^ WaitServerStrings ;
7310: LD_ADDR_VAR 0 2
7314: PUSH
7315: LD_VAR 0 2
7319: PUSH
7320: LD_EXP 54
7324: ADD
7325: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7326: LD_INT 0
7328: PUSH
7329: LD_EXP 29
7333: PUSH
7334: LD_OWVAR 1
7338: MINUS
7339: LESSEQUAL
7340: IFFALSE 7371
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7342: LD_ADDR_VAR 0 2
7346: PUSH
7347: LD_VAR 0 2
7351: PUSH
7352: LD_STRING #allowedsibbomb
7354: PUSH
7355: LD_EXP 29
7359: PUSH
7360: LD_OWVAR 1
7364: MINUS
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: ADD
7370: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7371: LD_INT 0
7373: PUSH
7374: LD_EXP 57
7378: PUSH
7379: LD_OWVAR 1
7383: MINUS
7384: LESSEQUAL
7385: IFFALSE 7416
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7387: LD_ADDR_VAR 0 2
7391: PUSH
7392: LD_VAR 0 2
7396: PUSH
7397: LD_STRING #builduptime
7399: PUSH
7400: LD_EXP 57
7404: PUSH
7405: LD_OWVAR 1
7409: MINUS
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: ADD
7415: ST_TO_ADDR
// if ( ExtraStrings ) then
7416: LD_EXP 53
7420: IFFALSE 7442
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7422: LD_ADDR_VAR 0 2
7426: PUSH
7427: LD_VAR 0 2
7431: PUSH
7432: LD_STRING 
7434: ADD
7435: PUSH
7436: LD_EXP 53
7440: ADD
7441: ST_TO_ADDR
// Display_Strings := AllStrings ;
7442: LD_ADDR_OWVAR 47
7446: PUSH
7447: LD_VAR 0 2
7451: ST_TO_ADDR
// end ;
7452: LD_VAR 0 1
7456: RET
// every 0 0$1 do
7457: GO 7459
7459: DISABLE
// begin ShowTimer ;
7460: CALL 7283 0 0
// enable ;
7464: ENABLE
// end ; end_of_file
7465: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
7466: LD_INT 0
7468: PPUSH
7469: PPUSH
7470: PPUSH
// BuildUpTime_Delay = 0 ;
7471: LD_ADDR_EXP 57
7475: PUSH
7476: LD_INT 0
7478: ST_TO_ADDR
// if not def_builduptime then
7479: LD_EXP 14
7483: NOT
7484: IFFALSE 7488
// exit ;
7486: GO 7671
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
7488: LD_ADDR_EXP 57
7492: PUSH
7493: LD_INT 8400
7495: PUSH
7496: LD_INT 2100
7498: PUSH
7499: LD_EXP 14
7503: MUL
7504: PLUS
7505: ST_TO_ADDR
// BuildUpTimeActive := true ;
7506: LD_ADDR_EXP 56
7510: PUSH
7511: LD_INT 1
7513: ST_TO_ADDR
// for i := 1 to 8 do
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: DOUBLE
7520: LD_INT 1
7522: DEC
7523: ST_TO_ADDR
7524: LD_INT 8
7526: PUSH
7527: FOR_TO
7528: IFFALSE 7669
// if Side_Positions [ i ] then
7530: LD_EXP 34
7534: PUSH
7535: LD_VAR 0 2
7539: ARRAY
7540: IFFALSE 7667
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
7542: LD_EXP 55
7546: PUSH
7547: LD_EXP 34
7551: PUSH
7552: LD_VAR 0 2
7556: ARRAY
7557: ARRAY
7558: PPUSH
7559: LD_INT 5
7561: PPUSH
7562: CALL_OW 424
// for j := 1 to 8 do
7566: LD_ADDR_VAR 0 3
7570: PUSH
7571: DOUBLE
7572: LD_INT 1
7574: DEC
7575: ST_TO_ADDR
7576: LD_INT 8
7578: PUSH
7579: FOR_TO
7580: IFFALSE 7665
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
7582: LD_EXP 34
7586: PUSH
7587: LD_VAR 0 3
7591: ARRAY
7592: PUSH
7593: LD_EXP 31
7597: PUSH
7598: LD_VAR 0 2
7602: ARRAY
7603: PUSH
7604: LD_EXP 31
7608: PUSH
7609: LD_VAR 0 3
7613: ARRAY
7614: NONEQUAL
7615: PUSH
7616: LD_EXP 36
7620: NOT
7621: PUSH
7622: LD_VAR 0 2
7626: PUSH
7627: LD_VAR 0 3
7631: NONEQUAL
7632: AND
7633: OR
7634: AND
7635: IFFALSE 7663
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7637: LD_VAR 0 3
7641: PPUSH
7642: LD_EXP 55
7646: PUSH
7647: LD_EXP 34
7651: PUSH
7652: LD_VAR 0 2
7656: ARRAY
7657: ARRAY
7658: PPUSH
7659: CALL_OW 333
7663: GO 7579
7665: POP
7666: POP
// end ;
7667: GO 7527
7669: POP
7670: POP
// end ;
7671: LD_VAR 0 1
7675: RET
// export function EndBuildUp ; var i , j ; begin
7676: LD_INT 0
7678: PPUSH
7679: PPUSH
7680: PPUSH
// BuildUpTimeActive := false ;
7681: LD_ADDR_EXP 56
7685: PUSH
7686: LD_INT 0
7688: ST_TO_ADDR
// for i := 1 to 8 do
7689: LD_ADDR_VAR 0 2
7693: PUSH
7694: DOUBLE
7695: LD_INT 1
7697: DEC
7698: ST_TO_ADDR
7699: LD_INT 8
7701: PUSH
7702: FOR_TO
7703: IFFALSE 7844
// if Side_Positions [ i ] then
7705: LD_EXP 34
7709: PUSH
7710: LD_VAR 0 2
7714: ARRAY
7715: IFFALSE 7842
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
7717: LD_EXP 55
7721: PUSH
7722: LD_EXP 34
7726: PUSH
7727: LD_VAR 0 2
7731: ARRAY
7732: ARRAY
7733: PPUSH
7734: LD_INT 0
7736: PPUSH
7737: CALL_OW 424
// for j := 1 to 8 do
7741: LD_ADDR_VAR 0 3
7745: PUSH
7746: DOUBLE
7747: LD_INT 1
7749: DEC
7750: ST_TO_ADDR
7751: LD_INT 8
7753: PUSH
7754: FOR_TO
7755: IFFALSE 7840
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
7757: LD_EXP 34
7761: PUSH
7762: LD_VAR 0 3
7766: ARRAY
7767: PUSH
7768: LD_EXP 31
7772: PUSH
7773: LD_VAR 0 2
7777: ARRAY
7778: PUSH
7779: LD_EXP 31
7783: PUSH
7784: LD_VAR 0 3
7788: ARRAY
7789: NONEQUAL
7790: PUSH
7791: LD_EXP 36
7795: NOT
7796: PUSH
7797: LD_VAR 0 2
7801: PUSH
7802: LD_VAR 0 3
7806: NONEQUAL
7807: AND
7808: OR
7809: AND
7810: IFFALSE 7838
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
7812: LD_VAR 0 3
7816: PPUSH
7817: LD_EXP 55
7821: PUSH
7822: LD_EXP 34
7826: PUSH
7827: LD_VAR 0 2
7831: ARRAY
7832: ARRAY
7833: PPUSH
7834: CALL_OW 334
7838: GO 7754
7840: POP
7841: POP
// end ;
7842: GO 7702
7844: POP
7845: POP
// end ;
7846: LD_VAR 0 1
7850: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
7851: LD_EXP 56
7855: IFFALSE 8030
7857: GO 7859
7859: DISABLE
7860: LD_INT 0
7862: PPUSH
7863: PPUSH
// begin for i := 1 to 8 do
7864: LD_ADDR_VAR 0 1
7868: PUSH
7869: DOUBLE
7870: LD_INT 1
7872: DEC
7873: ST_TO_ADDR
7874: LD_INT 8
7876: PUSH
7877: FOR_TO
7878: IFFALSE 8027
// if Side_Positions [ i ] then
7880: LD_EXP 34
7884: PUSH
7885: LD_VAR 0 1
7889: ARRAY
7890: IFFALSE 8025
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
7892: LD_ADDR_VAR 0 2
7896: PUSH
7897: LD_EXP 55
7901: PUSH
7902: LD_EXP 34
7906: PUSH
7907: LD_VAR 0 1
7911: ARRAY
7912: ARRAY
7913: PPUSH
7914: LD_INT 2
7916: PUSH
7917: LD_INT 21
7919: PUSH
7920: LD_INT 1
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 21
7929: PUSH
7930: LD_INT 2
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 22
7944: PUSH
7945: LD_OWVAR 2
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: PPUSH
7958: CALL_OW 70
7962: PUSH
7963: FOR_IN
7964: IFFALSE 8023
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
7966: LD_EXP 31
7970: PUSH
7971: LD_VAR 0 1
7975: ARRAY
7976: PUSH
7977: LD_EXP 31
7981: PUSH
7982: LD_OWVAR 2
7986: ARRAY
7987: NONEQUAL
7988: PUSH
7989: LD_EXP 36
7993: NOT
7994: PUSH
7995: LD_VAR 0 1
7999: PUSH
8000: LD_OWVAR 2
8004: NONEQUAL
8005: AND
8006: OR
8007: IFFALSE 8021
// ComMoveToArea ( un , BuildUpEscape ) ;
8009: LD_VAR 0 2
8013: PPUSH
8014: LD_INT 17
8016: PPUSH
8017: CALL_OW 113
8021: GO 7963
8023: POP
8024: POP
8025: GO 7877
8027: POP
8028: POP
// enable ;
8029: ENABLE
// end ;
8030: PPOPN 2
8032: END
// every 0 0$1 trigger def_builduptime do
8033: LD_EXP 14
8037: IFFALSE 8063
8039: GO 8041
8041: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
8042: LD_INT 8400
8044: PUSH
8045: LD_EXP 14
8049: PUSH
8050: LD_INT 2100
8052: MUL
8053: PLUS
8054: PPUSH
8055: CALL_OW 67
// EndBuildUp ;
8059: CALL 7676 0 0
// end ; end_of_file
8063: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8064: LD_INT 0
8066: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8067: LD_VAR 0 1
8071: PPUSH
8072: CALL_OW 255
8076: PUSH
8077: LD_VAR 0 4
8081: EQUAL
8082: IFFALSE 8101
// begin SetAchievement ( ACH_RAD ) ;
8084: LD_STRING ACH_RAD
8086: PPUSH
8087: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8091: LD_STRING ACH_NL
8093: PPUSH
8094: LD_INT 1
8096: PPUSH
8097: CALL_OW 564
// end end ;
8101: LD_VAR 0 5
8105: RET
// export function SA_Win ( side ) ; begin
8106: LD_INT 0
8108: PPUSH
// case side of 1 :
8109: LD_VAR 0 1
8113: PUSH
8114: LD_INT 1
8116: DOUBLE
8117: EQUAL
8118: IFTRUE 8122
8120: GO 8135
8122: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8123: LD_STRING ACH_AH
8125: PPUSH
8126: LD_INT 1
8128: PPUSH
8129: CALL_OW 564
8133: GO 8298
8135: LD_INT 2
8137: DOUBLE
8138: EQUAL
8139: IFTRUE 8143
8141: GO 8156
8143: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8144: LD_STRING ACH_E
8146: PPUSH
8147: LD_INT 1
8149: PPUSH
8150: CALL_OW 564
8154: GO 8298
8156: LD_INT 3
8158: DOUBLE
8159: EQUAL
8160: IFTRUE 8164
8162: GO 8177
8164: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8165: LD_STRING ACH_OOL
8167: PPUSH
8168: LD_INT 1
8170: PPUSH
8171: CALL_OW 564
8175: GO 8298
8177: LD_INT 1
8179: PUSH
8180: LD_INT 2
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: DOUBLE
8187: EQUAL
8188: IFTRUE 8192
8190: GO 8217
8192: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8193: LD_STRING ACH_AH
8195: PPUSH
8196: LD_REAL  5.00000000000000E-0001
8199: PPUSH
8200: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8204: LD_STRING ACH_E
8206: PPUSH
8207: LD_REAL  5.00000000000000E-0001
8210: PPUSH
8211: CALL_OW 564
// end ; [ 2 , 3 ] :
8215: GO 8298
8217: LD_INT 2
8219: PUSH
8220: LD_INT 3
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: DOUBLE
8227: EQUAL
8228: IFTRUE 8232
8230: GO 8257
8232: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8233: LD_STRING ACH_OOL
8235: PPUSH
8236: LD_REAL  5.00000000000000E-0001
8239: PPUSH
8240: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8244: LD_STRING ACH_E
8246: PPUSH
8247: LD_REAL  5.00000000000000E-0001
8250: PPUSH
8251: CALL_OW 564
// end ; [ 3 , 1 ] :
8255: GO 8298
8257: LD_INT 3
8259: PUSH
8260: LD_INT 1
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: DOUBLE
8267: EQUAL
8268: IFTRUE 8272
8270: GO 8297
8272: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8273: LD_STRING ACH_AH
8275: PPUSH
8276: LD_REAL  5.00000000000000E-0001
8279: PPUSH
8280: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8284: LD_STRING ACH_OOL
8286: PPUSH
8287: LD_REAL  5.00000000000000E-0001
8290: PPUSH
8291: CALL_OW 564
// end ; end ;
8295: GO 8298
8297: POP
// end ; end_of_file
8298: LD_VAR 0 2
8302: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8303: LD_INT 0
8305: PPUSH
8306: PPUSH
// enable ( 98 ) ;
8307: LD_INT 98
8309: ENABLE_MARKED
// GameEnded = false ;
8310: LD_ADDR_LOC 15
8314: PUSH
8315: LD_INT 0
8317: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8318: LD_ADDR_LOC 14
8322: PUSH
8323: LD_INT 0
8325: PUSH
8326: LD_INT 0
8328: PUSH
8329: LD_INT 0
8331: PUSH
8332: LD_INT 0
8334: PUSH
8335: LD_INT 0
8337: PUSH
8338: LD_INT 0
8340: PUSH
8341: LD_INT 0
8343: PUSH
8344: LD_INT 0
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: ST_TO_ADDR
// unfoged = false ;
8357: LD_ADDR_LOC 16
8361: PUSH
8362: LD_INT 0
8364: ST_TO_ADDR
// defeated_specs := [ ] ;
8365: LD_ADDR_LOC 17
8369: PUSH
8370: EMPTY
8371: ST_TO_ADDR
// for i = 1 to side_positions do
8372: LD_ADDR_VAR 0 2
8376: PUSH
8377: DOUBLE
8378: LD_INT 1
8380: DEC
8381: ST_TO_ADDR
8382: LD_EXP 34
8386: PUSH
8387: FOR_TO
8388: IFFALSE 8428
// if not side_positions [ i ] then
8390: LD_EXP 34
8394: PUSH
8395: LD_VAR 0 2
8399: ARRAY
8400: NOT
8401: IFFALSE 8426
// defeated = replace ( defeated , i , true ) ;
8403: LD_ADDR_LOC 14
8407: PUSH
8408: LD_LOC 14
8412: PPUSH
8413: LD_VAR 0 2
8417: PPUSH
8418: LD_INT 1
8420: PPUSH
8421: CALL_OW 1
8425: ST_TO_ADDR
8426: GO 8387
8428: POP
8429: POP
// end ;
8430: LD_VAR 0 1
8434: RET
// function CanWinLoose ; begin
8435: LD_INT 0
8437: PPUSH
// Result := true ;
8438: LD_ADDR_VAR 0 1
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8446: CALL_OW 518
8450: PUSH
8451: CALL_OW 519
8455: PUSH
8456: LD_INT 0
8458: GREATER
8459: AND
8460: IFFALSE 8470
// Result := false ;
8462: LD_ADDR_VAR 0 1
8466: PUSH
8467: LD_INT 0
8469: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8470: CALL_OW 531
8474: PUSH
8475: CALL_OW 519
8479: PUSH
8480: LD_INT 1
8482: GREATER
8483: AND
8484: IFFALSE 8494
// Result := false ;
8486: LD_ADDR_VAR 0 1
8490: PUSH
8491: LD_INT 0
8493: ST_TO_ADDR
// end ;
8494: LD_VAR 0 1
8498: RET
// export function HasPower ( i ) ; var k , h ; begin
8499: LD_INT 0
8501: PPUSH
8502: PPUSH
8503: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8504: LD_VAR 0 1
8508: PPUSH
8509: CALL_OW 108
8513: NOT
8514: PUSH
8515: LD_EXP 33
8519: PUSH
8520: LD_VAR 0 1
8524: ARRAY
8525: NOT
8526: AND
8527: PUSH
8528: LD_OWVAR 4
8532: AND
8533: IFFALSE 8545
// begin result = false ;
8535: LD_ADDR_VAR 0 2
8539: PUSH
8540: LD_INT 0
8542: ST_TO_ADDR
// end else
8543: GO 8840
// case def_win_rules of 0 :
8545: LD_EXP 30
8549: PUSH
8550: LD_INT 0
8552: DOUBLE
8553: EQUAL
8554: IFTRUE 8558
8556: GO 8721
8558: POP
// if def_people_respawning then
8559: LD_EXP 11
8563: IFFALSE 8654
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8565: LD_ADDR_VAR 0 2
8569: PUSH
8570: LD_INT 22
8572: PUSH
8573: LD_VAR 0 1
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: LD_INT 2
8584: PUSH
8585: LD_INT 21
8587: PUSH
8588: LD_INT 1
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 33
8597: PUSH
8598: LD_INT 3
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: LD_INT 33
8607: PUSH
8608: LD_INT 5
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PUSH
8615: LD_INT 30
8617: PUSH
8618: LD_INT 0
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: PUSH
8625: LD_INT 30
8627: PUSH
8628: LD_INT 1
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PPUSH
8647: CALL_OW 69
8651: ST_TO_ADDR
8652: GO 8719
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8654: LD_ADDR_VAR 0 2
8658: PUSH
8659: LD_INT 22
8661: PUSH
8662: LD_VAR 0 1
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: LD_INT 2
8673: PUSH
8674: LD_INT 21
8676: PUSH
8677: LD_INT 1
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 33
8686: PUSH
8687: LD_INT 3
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 33
8696: PUSH
8697: LD_INT 5
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 69
8718: ST_TO_ADDR
8719: GO 8840
8721: LD_INT 1
8723: DOUBLE
8724: EQUAL
8725: IFTRUE 8729
8727: GO 8768
8729: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8730: LD_ADDR_VAR 0 2
8734: PUSH
8735: LD_INT 22
8737: PUSH
8738: LD_VAR 0 1
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: LD_INT 21
8749: PUSH
8750: LD_INT 1
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL_OW 69
8765: ST_TO_ADDR
8766: GO 8840
8768: LD_INT 2
8770: DOUBLE
8771: EQUAL
8772: IFTRUE 8776
8774: GO 8839
8776: POP
// begin h = false ;
8777: LD_ADDR_VAR 0 4
8781: PUSH
8782: LD_INT 0
8784: ST_TO_ADDR
// for k in heroes [ i ] do
8785: LD_ADDR_VAR 0 3
8789: PUSH
8790: LD_EXP 45
8794: PUSH
8795: LD_VAR 0 1
8799: ARRAY
8800: PUSH
8801: FOR_IN
8802: IFFALSE 8825
// if IsLive ( k ) then
8804: LD_VAR 0 3
8808: PPUSH
8809: CALL_OW 300
8813: IFFALSE 8823
// h = true ;
8815: LD_ADDR_VAR 0 4
8819: PUSH
8820: LD_INT 1
8822: ST_TO_ADDR
8823: GO 8801
8825: POP
8826: POP
// Result := h ;
8827: LD_ADDR_VAR 0 2
8831: PUSH
8832: LD_VAR 0 4
8836: ST_TO_ADDR
// end ; end ;
8837: GO 8840
8839: POP
// end ;
8840: LD_VAR 0 2
8844: RET
// function AlliedSides ( i , j ) ; begin
8845: LD_INT 0
8847: PPUSH
// Result := false ;
8848: LD_ADDR_VAR 0 3
8852: PUSH
8853: LD_INT 0
8855: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8856: LD_VAR 0 1
8860: PPUSH
8861: LD_VAR 0 2
8865: PPUSH
8866: CALL_OW 81
8870: PUSH
8871: LD_INT 1
8873: EQUAL
8874: PUSH
8875: LD_VAR 0 2
8879: PPUSH
8880: LD_VAR 0 1
8884: PPUSH
8885: CALL_OW 81
8889: PUSH
8890: LD_INT 1
8892: EQUAL
8893: AND
8894: PUSH
8895: LD_VAR 0 1
8899: PPUSH
8900: CALL_OW 83
8904: AND
8905: PUSH
8906: LD_VAR 0 2
8910: PPUSH
8911: CALL_OW 83
8915: AND
8916: IFFALSE 8926
// Result := true ;
8918: LD_ADDR_VAR 0 3
8922: PUSH
8923: LD_INT 1
8925: ST_TO_ADDR
// end ;
8926: LD_VAR 0 3
8930: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8931: CALL 8435 0 0
8935: PUSH
8936: LD_LOC 15
8940: NOT
8941: AND
8942: IFFALSE 8958
8944: GO 8946
8946: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8947: LD_ADDR_EXP 54
8951: PUSH
8952: LD_STRING #Player-Ended
8954: PUSH
8955: EMPTY
8956: LIST
8957: ST_TO_ADDR
8958: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8959: CALL 8435 0 0
8963: PUSH
8964: LD_LOC 15
8968: AND
8969: IFFALSE 8978
8971: GO 8973
8973: DISABLE
// YouLostInMultiplayer ;
8974: CALL_OW 107
8978: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8979: CALL 8435 0 0
8983: NOT
8984: PUSH
8985: CALL_OW 531
8989: NOT
8990: AND
8991: IFFALSE 9007
8993: GO 8995
8995: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8996: LD_ADDR_EXP 54
9000: PUSH
9001: LD_STRING #server-wait
9003: PUSH
9004: EMPTY
9005: LIST
9006: ST_TO_ADDR
9007: END
// every 100 trigger IAmSpec do
9008: CALL_OW 531
9012: IFFALSE 9028
9014: GO 9016
9016: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9017: LD_ADDR_EXP 54
9021: PUSH
9022: LD_STRING #Player-IAmSpec
9024: PUSH
9025: EMPTY
9026: LIST
9027: ST_TO_ADDR
9028: END
// every 100 trigger GameEnded and IAmSpec do
9029: LD_LOC 15
9033: PUSH
9034: CALL_OW 531
9038: AND
9039: IFFALSE 9048
9041: GO 9043
9043: DISABLE
// YouLostInMultiplayer ;
9044: CALL_OW 107
9048: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9049: CALL 8435 0 0
9053: PUSH
9054: LD_LOC 15
9058: NOT
9059: AND
9060: IFFALSE 9076
9062: GO 9064
9064: DISABLE
// WaitServerStrings = [ $player-win ] ;
9065: LD_ADDR_EXP 54
9069: PUSH
9070: LD_STRING $player-win
9072: PUSH
9073: EMPTY
9074: LIST
9075: ST_TO_ADDR
9076: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9077: CALL 8435 0 0
9081: PUSH
9082: LD_LOC 15
9086: AND
9087: IFFALSE 9111
9089: GO 9091
9091: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9092: LD_EXP 35
9096: PUSH
9097: LD_OWVAR 7
9101: ARRAY
9102: PPUSH
9103: CALL 8106 0 1
// YouWinInMultiplayer ;
9107: CALL_OW 106
// end ;
9111: END
// every 100 trigger isEditor marked 401 do
9112: LD_OWVAR 84
9116: IFFALSE 9132
9118: GO 9120
9120: DISABLE
// Debug_Strings = [ You won ] ;
9121: LD_ADDR_OWVAR 48
9125: PUSH
9126: LD_STRING You won
9128: PUSH
9129: EMPTY
9130: LIST
9131: ST_TO_ADDR
9132: END
// every 100 trigger isEditor marked 400 do
9133: LD_OWVAR 84
9137: IFFALSE 9153
9139: GO 9141
9141: DISABLE
// Debug_Strings = [ You loss ] ;
9142: LD_ADDR_OWVAR 48
9146: PUSH
9147: LD_STRING You loss
9149: PUSH
9150: EMPTY
9151: LIST
9152: ST_TO_ADDR
9153: END
// every 100 marked 98 do var i , un ;
9154: GO 9156
9156: DISABLE
9157: LD_INT 0
9159: PPUSH
9160: PPUSH
// begin for i = 1 to side_positions do
9161: LD_ADDR_VAR 0 1
9165: PUSH
9166: DOUBLE
9167: LD_INT 1
9169: DEC
9170: ST_TO_ADDR
9171: LD_EXP 34
9175: PUSH
9176: FOR_TO
9177: IFFALSE 9264
// begin if side_positions [ i ] then
9179: LD_EXP 34
9183: PUSH
9184: LD_VAR 0 1
9188: ARRAY
9189: IFFALSE 9262
// if not HasPower ( i ) and not defeated [ i ] then
9191: LD_VAR 0 1
9195: PPUSH
9196: CALL 8499 0 1
9200: NOT
9201: PUSH
9202: LD_LOC 14
9206: PUSH
9207: LD_VAR 0 1
9211: ARRAY
9212: NOT
9213: AND
9214: IFFALSE 9262
// begin defeated = replace ( defeated , i , true ) ;
9216: LD_ADDR_LOC 14
9220: PUSH
9221: LD_LOC 14
9225: PPUSH
9226: LD_VAR 0 1
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: CALL_OW 1
9238: ST_TO_ADDR
// if i = mp_player_side then
9239: LD_VAR 0 1
9243: PUSH
9244: LD_OWVAR 7
9248: EQUAL
9249: IFFALSE 9262
// begin Multiplayer_Loose_Message ;
9251: CALL_OW 521
// SetPlayerSpectator ( ) ;
9255: CALL_OW 572
// enable ( 400 ) ;
9259: LD_INT 400
9261: ENABLE_MARKED
// end ; end ; end ;
9262: GO 9176
9264: POP
9265: POP
// DidGameEnd ;
9266: CALL 9281 0 0
// if not GameEnded then
9270: LD_LOC 15
9274: NOT
9275: IFFALSE 9278
// enable ;
9277: ENABLE
// end ;
9278: PPOPN 2
9280: END
// function DidGameEnd ; var i , k , enemy ; begin
9281: LD_INT 0
9283: PPUSH
9284: PPUSH
9285: PPUSH
9286: PPUSH
// enemy = [ ] ;
9287: LD_ADDR_VAR 0 4
9291: PUSH
9292: EMPTY
9293: ST_TO_ADDR
// for i = 1 to side_positions do
9294: LD_ADDR_VAR 0 2
9298: PUSH
9299: DOUBLE
9300: LD_INT 1
9302: DEC
9303: ST_TO_ADDR
9304: LD_EXP 34
9308: PUSH
9309: FOR_TO
9310: IFFALSE 9404
// if not defeated [ i ] then
9312: LD_LOC 14
9316: PUSH
9317: LD_VAR 0 2
9321: ARRAY
9322: NOT
9323: IFFALSE 9402
// for k = 1 to side_positions do
9325: LD_ADDR_VAR 0 3
9329: PUSH
9330: DOUBLE
9331: LD_INT 1
9333: DEC
9334: ST_TO_ADDR
9335: LD_EXP 34
9339: PUSH
9340: FOR_TO
9341: IFFALSE 9400
// if not defeated [ k ] then
9343: LD_LOC 14
9347: PUSH
9348: LD_VAR 0 3
9352: ARRAY
9353: NOT
9354: IFFALSE 9398
// if not AlliedSides ( i , k ) then
9356: LD_VAR 0 2
9360: PPUSH
9361: LD_VAR 0 3
9365: PPUSH
9366: CALL 8845 0 2
9370: NOT
9371: IFFALSE 9398
// enemy = enemy ^ [ i , k ] ;
9373: LD_ADDR_VAR 0 4
9377: PUSH
9378: LD_VAR 0 4
9382: PUSH
9383: LD_VAR 0 2
9387: PUSH
9388: LD_VAR 0 3
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: ADD
9397: ST_TO_ADDR
9398: GO 9340
9400: POP
9401: POP
9402: GO 9309
9404: POP
9405: POP
// if not enemy then
9406: LD_VAR 0 4
9410: NOT
9411: IFFALSE 9437
// begin GameEnded = true ;
9413: LD_ADDR_LOC 15
9417: PUSH
9418: LD_INT 1
9420: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9421: LD_LOC 14
9425: PUSH
9426: LD_OWVAR 7
9430: ARRAY
9431: NOT
9432: IFFALSE 9437
// enable ( 401 ) ;
9434: LD_INT 401
9436: ENABLE_MARKED
// end ; end ;
9437: LD_VAR 0 1
9441: RET
// function unfog ; var k , friends ; begin
9442: LD_INT 0
9444: PPUSH
9445: PPUSH
9446: PPUSH
// for k = 1 to side_positions do
9447: LD_ADDR_VAR 0 2
9451: PUSH
9452: DOUBLE
9453: LD_INT 1
9455: DEC
9456: ST_TO_ADDR
9457: LD_EXP 34
9461: PUSH
9462: FOR_TO
9463: IFFALSE 9519
// if not defeated [ k ] then
9465: LD_LOC 14
9469: PUSH
9470: LD_VAR 0 2
9474: ARRAY
9475: NOT
9476: IFFALSE 9517
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9478: LD_OWVAR 7
9482: PPUSH
9483: LD_VAR 0 2
9487: PPUSH
9488: CALL_OW 81
9492: PUSH
9493: LD_INT 1
9495: PUSH
9496: EMPTY
9497: LIST
9498: IN
9499: IFFALSE 9517
// friends = friends ^ k ;
9501: LD_ADDR_VAR 0 3
9505: PUSH
9506: LD_VAR 0 3
9510: PUSH
9511: LD_VAR 0 2
9515: ADD
9516: ST_TO_ADDR
9517: GO 9462
9519: POP
9520: POP
// if not friends then
9521: LD_VAR 0 3
9525: NOT
9526: IFFALSE 9540
// begin SetPlayerSpectator ( ) ;
9528: CALL_OW 572
// unfoged = true ;
9532: LD_ADDR_LOC 16
9536: PUSH
9537: LD_INT 1
9539: ST_TO_ADDR
// end ; end ;
9540: LD_VAR 0 1
9544: RET
// export function MakeGameEnd ; begin
9545: LD_INT 0
9547: PPUSH
// SetPlayerSpectator ( ) ;
9548: CALL_OW 572
// unfoged = true ;
9552: LD_ADDR_LOC 16
9556: PUSH
9557: LD_INT 1
9559: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9560: LD_INT 175
9562: PPUSH
9563: CALL_OW 67
// GameEnded = true ;
9567: LD_ADDR_LOC 15
9571: PUSH
9572: LD_INT 1
9574: ST_TO_ADDR
// end ;
9575: LD_VAR 0 1
9579: RET
// export function GetGameEnded ; begin
9580: LD_INT 0
9582: PPUSH
// result = GameEnded ;
9583: LD_ADDR_VAR 0 1
9587: PUSH
9588: LD_LOC 15
9592: ST_TO_ADDR
// end ; end_of_file
9593: LD_VAR 0 1
9597: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9598: LD_INT 0
9600: PPUSH
9601: PPUSH
9602: PPUSH
// for side = 1 to 8 do
9603: LD_ADDR_VAR 0 2
9607: PUSH
9608: DOUBLE
9609: LD_INT 1
9611: DEC
9612: ST_TO_ADDR
9613: LD_INT 8
9615: PUSH
9616: FOR_TO
9617: IFFALSE 9738
// begin for i = 1 to 72 do
9619: LD_ADDR_VAR 0 3
9623: PUSH
9624: DOUBLE
9625: LD_INT 1
9627: DEC
9628: ST_TO_ADDR
9629: LD_INT 72
9631: PUSH
9632: FOR_TO
9633: IFFALSE 9664
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9635: LD_VAR 0 3
9639: PPUSH
9640: LD_VAR 0 2
9644: PPUSH
9645: LD_INT 0
9647: PPUSH
9648: LD_VAR 0 3
9652: PPUSH
9653: CALL_OW 565
9657: PPUSH
9658: CALL_OW 322
9662: GO 9632
9664: POP
9665: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9666: LD_INT 73
9668: PPUSH
9669: LD_VAR 0 2
9673: PPUSH
9674: LD_INT 0
9676: PPUSH
9677: LD_INT 25
9679: PPUSH
9680: CALL_OW 565
9684: PPUSH
9685: CALL_OW 322
// for i = 0 to 40 do
9689: LD_ADDR_VAR 0 3
9693: PUSH
9694: DOUBLE
9695: LD_INT 0
9697: DEC
9698: ST_TO_ADDR
9699: LD_INT 40
9701: PUSH
9702: FOR_TO
9703: IFFALSE 9734
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9705: LD_VAR 0 3
9709: PPUSH
9710: LD_VAR 0 2
9714: PPUSH
9715: LD_INT 1
9717: PPUSH
9718: LD_VAR 0 3
9722: PPUSH
9723: CALL_OW 565
9727: PPUSH
9728: CALL_OW 324
9732: GO 9702
9734: POP
9735: POP
// end ;
9736: GO 9616
9738: POP
9739: POP
// end ;
9740: LD_VAR 0 1
9744: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9745: LD_INT 0
9747: PPUSH
9748: PPUSH
9749: PPUSH
// for side = 1 to 8 do
9750: LD_ADDR_VAR 0 3
9754: PUSH
9755: DOUBLE
9756: LD_INT 1
9758: DEC
9759: ST_TO_ADDR
9760: LD_INT 8
9762: PUSH
9763: FOR_TO
9764: IFFALSE 13760
// begin for i = 1 to 73 do
9766: LD_ADDR_VAR 0 4
9770: PUSH
9771: DOUBLE
9772: LD_INT 1
9774: DEC
9775: ST_TO_ADDR
9776: LD_INT 73
9778: PUSH
9779: FOR_TO
9780: IFFALSE 9801
// SetTech ( i , side , state_disabled ) ;
9782: LD_VAR 0 4
9786: PPUSH
9787: LD_VAR 0 3
9791: PPUSH
9792: LD_INT 0
9794: PPUSH
9795: CALL_OW 322
9799: GO 9779
9801: POP
9802: POP
// for i = 0 to 40 do
9803: LD_ADDR_VAR 0 4
9807: PUSH
9808: DOUBLE
9809: LD_INT 0
9811: DEC
9812: ST_TO_ADDR
9813: LD_INT 40
9815: PUSH
9816: FOR_TO
9817: IFFALSE 9838
// SetRestrict ( i , side , false ) ;
9819: LD_VAR 0 4
9823: PPUSH
9824: LD_VAR 0 3
9828: PPUSH
9829: LD_INT 0
9831: PPUSH
9832: CALL_OW 324
9836: GO 9816
9838: POP
9839: POP
// case level of 1 :
9840: LD_VAR 0 1
9844: PUSH
9845: LD_INT 1
9847: DOUBLE
9848: EQUAL
9849: IFTRUE 9853
9851: GO 10006
9853: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9854: LD_INT 35
9856: PPUSH
9857: LD_VAR 0 3
9861: PPUSH
9862: LD_INT 1
9864: PPUSH
9865: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9869: LD_INT 45
9871: PPUSH
9872: LD_VAR 0 3
9876: PPUSH
9877: LD_INT 1
9879: PPUSH
9880: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9884: LD_INT 46
9886: PPUSH
9887: LD_VAR 0 3
9891: PPUSH
9892: LD_INT 1
9894: PPUSH
9895: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9899: LD_INT 47
9901: PPUSH
9902: LD_VAR 0 3
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9914: LD_INT 0
9916: PPUSH
9917: LD_VAR 0 3
9921: PPUSH
9922: LD_INT 1
9924: PPUSH
9925: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9929: LD_INT 2
9931: PPUSH
9932: LD_VAR 0 3
9936: PPUSH
9937: LD_INT 1
9939: PPUSH
9940: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9944: LD_INT 4
9946: PPUSH
9947: LD_VAR 0 3
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9959: LD_INT 6
9961: PPUSH
9962: LD_VAR 0 3
9966: PPUSH
9967: LD_INT 1
9969: PPUSH
9970: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9974: LD_INT 29
9976: PPUSH
9977: LD_VAR 0 3
9981: PPUSH
9982: LD_INT 1
9984: PPUSH
9985: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9989: LD_INT 31
9991: PPUSH
9992: LD_VAR 0 3
9996: PPUSH
9997: LD_INT 1
9999: PPUSH
10000: CALL_OW 324
// end ; 2 :
10004: GO 13758
10006: LD_INT 2
10008: DOUBLE
10009: EQUAL
10010: IFTRUE 10014
10012: GO 10212
10014: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10015: LD_INT 35
10017: PPUSH
10018: LD_VAR 0 3
10022: PPUSH
10023: LD_INT 1
10025: PPUSH
10026: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10030: LD_INT 45
10032: PPUSH
10033: LD_VAR 0 3
10037: PPUSH
10038: LD_INT 1
10040: PPUSH
10041: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10045: LD_INT 46
10047: PPUSH
10048: LD_VAR 0 3
10052: PPUSH
10053: LD_INT 1
10055: PPUSH
10056: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10060: LD_INT 47
10062: PPUSH
10063: LD_VAR 0 3
10067: PPUSH
10068: LD_INT 1
10070: PPUSH
10071: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10075: LD_INT 1
10077: PPUSH
10078: LD_VAR 0 3
10082: PPUSH
10083: LD_INT 1
10085: PPUSH
10086: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10090: LD_INT 2
10092: PPUSH
10093: LD_VAR 0 3
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10105: LD_INT 11
10107: PPUSH
10108: LD_VAR 0 3
10112: PPUSH
10113: LD_INT 1
10115: PPUSH
10116: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10120: LD_INT 0
10122: PPUSH
10123: LD_VAR 0 3
10127: PPUSH
10128: LD_INT 1
10130: PPUSH
10131: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10135: LD_INT 2
10137: PPUSH
10138: LD_VAR 0 3
10142: PPUSH
10143: LD_INT 1
10145: PPUSH
10146: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10150: LD_INT 4
10152: PPUSH
10153: LD_VAR 0 3
10157: PPUSH
10158: LD_INT 1
10160: PPUSH
10161: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10165: LD_INT 6
10167: PPUSH
10168: LD_VAR 0 3
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10180: LD_INT 29
10182: PPUSH
10183: LD_VAR 0 3
10187: PPUSH
10188: LD_INT 1
10190: PPUSH
10191: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10195: LD_INT 31
10197: PPUSH
10198: LD_VAR 0 3
10202: PPUSH
10203: LD_INT 1
10205: PPUSH
10206: CALL_OW 324
// end ; 3 :
10210: GO 13758
10212: LD_INT 3
10214: DOUBLE
10215: EQUAL
10216: IFTRUE 10220
10218: GO 10673
10220: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10221: LD_INT 35
10223: PPUSH
10224: LD_VAR 0 3
10228: PPUSH
10229: LD_INT 1
10231: PPUSH
10232: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10236: LD_INT 45
10238: PPUSH
10239: LD_VAR 0 3
10243: PPUSH
10244: LD_INT 1
10246: PPUSH
10247: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10251: LD_INT 46
10253: PPUSH
10254: LD_VAR 0 3
10258: PPUSH
10259: LD_INT 1
10261: PPUSH
10262: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10266: LD_INT 47
10268: PPUSH
10269: LD_VAR 0 3
10273: PPUSH
10274: LD_INT 1
10276: PPUSH
10277: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10281: LD_INT 1
10283: PPUSH
10284: LD_VAR 0 3
10288: PPUSH
10289: LD_INT 1
10291: PPUSH
10292: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10296: LD_INT 2
10298: PPUSH
10299: LD_VAR 0 3
10303: PPUSH
10304: LD_INT 1
10306: PPUSH
10307: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10311: LD_INT 11
10313: PPUSH
10314: LD_VAR 0 3
10318: PPUSH
10319: LD_INT 1
10321: PPUSH
10322: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10326: LD_INT 48
10328: PPUSH
10329: LD_VAR 0 3
10333: PPUSH
10334: LD_INT 1
10336: PPUSH
10337: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10341: LD_INT 69
10343: PPUSH
10344: LD_VAR 0 3
10348: PPUSH
10349: LD_INT 1
10351: PPUSH
10352: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10356: LD_INT 39
10358: PPUSH
10359: LD_VAR 0 3
10363: PPUSH
10364: LD_INT 1
10366: PPUSH
10367: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10371: LD_INT 43
10373: PPUSH
10374: LD_VAR 0 3
10378: PPUSH
10379: LD_INT 1
10381: PPUSH
10382: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10386: LD_INT 51
10388: PPUSH
10389: LD_VAR 0 3
10393: PPUSH
10394: LD_INT 1
10396: PPUSH
10397: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10401: LD_INT 6
10403: PPUSH
10404: LD_VAR 0 3
10408: PPUSH
10409: LD_INT 1
10411: PPUSH
10412: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10416: LD_INT 0
10418: PPUSH
10419: LD_VAR 0 3
10423: PPUSH
10424: LD_INT 1
10426: PPUSH
10427: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10431: LD_INT 2
10433: PPUSH
10434: LD_VAR 0 3
10438: PPUSH
10439: LD_INT 1
10441: PPUSH
10442: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10446: LD_INT 3
10448: PPUSH
10449: LD_VAR 0 3
10453: PPUSH
10454: LD_INT 1
10456: PPUSH
10457: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10461: LD_INT 4
10463: PPUSH
10464: LD_VAR 0 3
10468: PPUSH
10469: LD_INT 1
10471: PPUSH
10472: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10476: LD_INT 6
10478: PPUSH
10479: LD_VAR 0 3
10483: PPUSH
10484: LD_INT 1
10486: PPUSH
10487: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10491: LD_INT 7
10493: PPUSH
10494: LD_VAR 0 3
10498: PPUSH
10499: LD_INT 1
10501: PPUSH
10502: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10506: LD_INT 8
10508: PPUSH
10509: LD_VAR 0 3
10513: PPUSH
10514: LD_INT 1
10516: PPUSH
10517: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10521: LD_INT 10
10523: PPUSH
10524: LD_VAR 0 3
10528: PPUSH
10529: LD_INT 1
10531: PPUSH
10532: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10536: LD_INT 15
10538: PPUSH
10539: LD_VAR 0 3
10543: PPUSH
10544: LD_INT 1
10546: PPUSH
10547: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10551: LD_INT 16
10553: PPUSH
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_INT 1
10561: PPUSH
10562: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10566: LD_INT 17
10568: PPUSH
10569: LD_VAR 0 3
10573: PPUSH
10574: LD_INT 1
10576: PPUSH
10577: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10581: LD_INT 20
10583: PPUSH
10584: LD_VAR 0 3
10588: PPUSH
10589: LD_INT 1
10591: PPUSH
10592: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10596: LD_INT 26
10598: PPUSH
10599: LD_VAR 0 3
10603: PPUSH
10604: LD_INT 1
10606: PPUSH
10607: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10611: LD_INT 27
10613: PPUSH
10614: LD_VAR 0 3
10618: PPUSH
10619: LD_INT 1
10621: PPUSH
10622: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10626: LD_INT 29
10628: PPUSH
10629: LD_VAR 0 3
10633: PPUSH
10634: LD_INT 1
10636: PPUSH
10637: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10641: LD_INT 31
10643: PPUSH
10644: LD_VAR 0 3
10648: PPUSH
10649: LD_INT 1
10651: PPUSH
10652: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10656: LD_INT 32
10658: PPUSH
10659: LD_VAR 0 3
10663: PPUSH
10664: LD_INT 1
10666: PPUSH
10667: CALL_OW 324
// end ; 4 :
10671: GO 13758
10673: LD_INT 4
10675: DOUBLE
10676: EQUAL
10677: IFTRUE 10681
10679: GO 11629
10681: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10682: LD_INT 35
10684: PPUSH
10685: LD_VAR 0 3
10689: PPUSH
10690: LD_INT 1
10692: PPUSH
10693: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10697: LD_INT 45
10699: PPUSH
10700: LD_VAR 0 3
10704: PPUSH
10705: LD_INT 1
10707: PPUSH
10708: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10712: LD_INT 46
10714: PPUSH
10715: LD_VAR 0 3
10719: PPUSH
10720: LD_INT 1
10722: PPUSH
10723: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10727: LD_INT 47
10729: PPUSH
10730: LD_VAR 0 3
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10742: LD_INT 1
10744: PPUSH
10745: LD_VAR 0 3
10749: PPUSH
10750: LD_INT 1
10752: PPUSH
10753: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10757: LD_INT 2
10759: PPUSH
10760: LD_VAR 0 3
10764: PPUSH
10765: LD_INT 1
10767: PPUSH
10768: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10772: LD_INT 11
10774: PPUSH
10775: LD_VAR 0 3
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10787: LD_INT 20
10789: PPUSH
10790: LD_VAR 0 3
10794: PPUSH
10795: LD_INT 1
10797: PPUSH
10798: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10802: LD_INT 48
10804: PPUSH
10805: LD_VAR 0 3
10809: PPUSH
10810: LD_INT 1
10812: PPUSH
10813: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10817: LD_INT 49
10819: PPUSH
10820: LD_VAR 0 3
10824: PPUSH
10825: LD_INT 1
10827: PPUSH
10828: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10832: LD_INT 69
10834: PPUSH
10835: LD_VAR 0 3
10839: PPUSH
10840: LD_INT 1
10842: PPUSH
10843: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10847: LD_INT 39
10849: PPUSH
10850: LD_VAR 0 3
10854: PPUSH
10855: LD_INT 1
10857: PPUSH
10858: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10862: LD_INT 34
10864: PPUSH
10865: LD_VAR 0 3
10869: PPUSH
10870: LD_INT 1
10872: PPUSH
10873: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10877: LD_INT 42
10879: PPUSH
10880: LD_VAR 0 3
10884: PPUSH
10885: LD_INT 1
10887: PPUSH
10888: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10892: LD_INT 44
10894: PPUSH
10895: LD_VAR 0 3
10899: PPUSH
10900: LD_INT 1
10902: PPUSH
10903: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10907: LD_INT 41
10909: PPUSH
10910: LD_VAR 0 3
10914: PPUSH
10915: LD_INT 1
10917: PPUSH
10918: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10922: LD_INT 43
10924: PPUSH
10925: LD_VAR 0 3
10929: PPUSH
10930: LD_INT 1
10932: PPUSH
10933: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10937: LD_INT 70
10939: PPUSH
10940: LD_VAR 0 3
10944: PPUSH
10945: LD_INT 1
10947: PPUSH
10948: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10952: LD_INT 51
10954: PPUSH
10955: LD_VAR 0 3
10959: PPUSH
10960: LD_INT 1
10962: PPUSH
10963: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10967: LD_INT 52
10969: PPUSH
10970: LD_VAR 0 3
10974: PPUSH
10975: LD_INT 1
10977: PPUSH
10978: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10982: LD_INT 6
10984: PPUSH
10985: LD_VAR 0 3
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10997: LD_INT 15
10999: PPUSH
11000: LD_VAR 0 3
11004: PPUSH
11005: LD_INT 1
11007: PPUSH
11008: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11012: LD_INT 7
11014: PPUSH
11015: LD_VAR 0 3
11019: PPUSH
11020: LD_INT 1
11022: PPUSH
11023: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11027: LD_INT 12
11029: PPUSH
11030: LD_VAR 0 3
11034: PPUSH
11035: LD_INT 1
11037: PPUSH
11038: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11042: LD_INT 18
11044: PPUSH
11045: LD_VAR 0 3
11049: PPUSH
11050: LD_INT 1
11052: PPUSH
11053: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11057: LD_INT 60
11059: PPUSH
11060: LD_VAR 0 3
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11072: LD_INT 9
11074: PPUSH
11075: LD_VAR 0 3
11079: PPUSH
11080: LD_INT 1
11082: PPUSH
11083: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11087: LD_INT 30
11089: PPUSH
11090: LD_VAR 0 3
11094: PPUSH
11095: LD_INT 1
11097: PPUSH
11098: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11102: LD_INT 37
11104: PPUSH
11105: LD_VAR 0 3
11109: PPUSH
11110: LD_INT 1
11112: PPUSH
11113: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11117: LD_INT 5
11119: PPUSH
11120: LD_VAR 0 3
11124: PPUSH
11125: LD_INT 1
11127: PPUSH
11128: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11132: LD_INT 66
11134: PPUSH
11135: LD_VAR 0 3
11139: PPUSH
11140: LD_INT 1
11142: PPUSH
11143: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11147: LD_INT 21
11149: PPUSH
11150: LD_VAR 0 3
11154: PPUSH
11155: LD_INT 1
11157: PPUSH
11158: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11162: LD_INT 22
11164: PPUSH
11165: LD_VAR 0 3
11169: PPUSH
11170: LD_INT 1
11172: PPUSH
11173: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11177: LD_INT 54
11179: PPUSH
11180: LD_VAR 0 3
11184: PPUSH
11185: LD_INT 1
11187: PPUSH
11188: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11192: LD_INT 0
11194: PPUSH
11195: LD_VAR 0 3
11199: PPUSH
11200: LD_INT 1
11202: PPUSH
11203: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11207: LD_INT 1
11209: PPUSH
11210: LD_VAR 0 3
11214: PPUSH
11215: LD_INT 1
11217: PPUSH
11218: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11222: LD_INT 2
11224: PPUSH
11225: LD_VAR 0 3
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11237: LD_INT 3
11239: PPUSH
11240: LD_VAR 0 3
11244: PPUSH
11245: LD_INT 1
11247: PPUSH
11248: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11252: LD_INT 4
11254: PPUSH
11255: LD_VAR 0 3
11259: PPUSH
11260: LD_INT 1
11262: PPUSH
11263: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11267: LD_INT 5
11269: PPUSH
11270: LD_VAR 0 3
11274: PPUSH
11275: LD_INT 1
11277: PPUSH
11278: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11282: LD_INT 6
11284: PPUSH
11285: LD_VAR 0 3
11289: PPUSH
11290: LD_INT 1
11292: PPUSH
11293: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11297: LD_INT 7
11299: PPUSH
11300: LD_VAR 0 3
11304: PPUSH
11305: LD_INT 1
11307: PPUSH
11308: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11312: LD_INT 8
11314: PPUSH
11315: LD_VAR 0 3
11319: PPUSH
11320: LD_INT 1
11322: PPUSH
11323: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11327: LD_INT 10
11329: PPUSH
11330: LD_VAR 0 3
11334: PPUSH
11335: LD_INT 1
11337: PPUSH
11338: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11342: LD_INT 11
11344: PPUSH
11345: LD_VAR 0 3
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11357: LD_INT 12
11359: PPUSH
11360: LD_VAR 0 3
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11372: LD_INT 13
11374: PPUSH
11375: LD_VAR 0 3
11379: PPUSH
11380: LD_INT 1
11382: PPUSH
11383: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11387: LD_INT 14
11389: PPUSH
11390: LD_VAR 0 3
11394: PPUSH
11395: LD_INT 1
11397: PPUSH
11398: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11402: LD_INT 15
11404: PPUSH
11405: LD_VAR 0 3
11409: PPUSH
11410: LD_INT 1
11412: PPUSH
11413: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11417: LD_INT 16
11419: PPUSH
11420: LD_VAR 0 3
11424: PPUSH
11425: LD_INT 1
11427: PPUSH
11428: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11432: LD_INT 17
11434: PPUSH
11435: LD_VAR 0 3
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11447: LD_INT 19
11449: PPUSH
11450: LD_VAR 0 3
11454: PPUSH
11455: LD_INT 1
11457: PPUSH
11458: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11462: LD_INT 20
11464: PPUSH
11465: LD_VAR 0 3
11469: PPUSH
11470: LD_INT 1
11472: PPUSH
11473: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11477: LD_INT 21
11479: PPUSH
11480: LD_VAR 0 3
11484: PPUSH
11485: LD_INT 1
11487: PPUSH
11488: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11492: LD_INT 23
11494: PPUSH
11495: LD_VAR 0 3
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11507: LD_INT 26
11509: PPUSH
11510: LD_VAR 0 3
11514: PPUSH
11515: LD_INT 1
11517: PPUSH
11518: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11522: LD_INT 27
11524: PPUSH
11525: LD_VAR 0 3
11529: PPUSH
11530: LD_INT 1
11532: PPUSH
11533: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11537: LD_INT 28
11539: PPUSH
11540: LD_VAR 0 3
11544: PPUSH
11545: LD_INT 1
11547: PPUSH
11548: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11552: LD_INT 29
11554: PPUSH
11555: LD_VAR 0 3
11559: PPUSH
11560: LD_INT 1
11562: PPUSH
11563: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11567: LD_INT 30
11569: PPUSH
11570: LD_VAR 0 3
11574: PPUSH
11575: LD_INT 1
11577: PPUSH
11578: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11582: LD_INT 31
11584: PPUSH
11585: LD_VAR 0 3
11589: PPUSH
11590: LD_INT 1
11592: PPUSH
11593: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11597: LD_INT 32
11599: PPUSH
11600: LD_VAR 0 3
11604: PPUSH
11605: LD_INT 1
11607: PPUSH
11608: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11612: LD_INT 36
11614: PPUSH
11615: LD_VAR 0 3
11619: PPUSH
11620: LD_INT 1
11622: PPUSH
11623: CALL_OW 324
// end ; 5 :
11627: GO 13758
11629: LD_INT 5
11631: DOUBLE
11632: EQUAL
11633: IFTRUE 11637
11635: GO 12750
11637: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11638: LD_INT 35
11640: PPUSH
11641: LD_VAR 0 3
11645: PPUSH
11646: LD_INT 1
11648: PPUSH
11649: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11653: LD_INT 45
11655: PPUSH
11656: LD_VAR 0 3
11660: PPUSH
11661: LD_INT 1
11663: PPUSH
11664: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11668: LD_INT 46
11670: PPUSH
11671: LD_VAR 0 3
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11683: LD_INT 47
11685: PPUSH
11686: LD_VAR 0 3
11690: PPUSH
11691: LD_INT 1
11693: PPUSH
11694: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11698: LD_INT 1
11700: PPUSH
11701: LD_VAR 0 3
11705: PPUSH
11706: LD_INT 1
11708: PPUSH
11709: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11713: LD_INT 2
11715: PPUSH
11716: LD_VAR 0 3
11720: PPUSH
11721: LD_INT 1
11723: PPUSH
11724: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11728: LD_INT 11
11730: PPUSH
11731: LD_VAR 0 3
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11743: LD_INT 20
11745: PPUSH
11746: LD_VAR 0 3
11750: PPUSH
11751: LD_INT 1
11753: PPUSH
11754: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11758: LD_INT 48
11760: PPUSH
11761: LD_VAR 0 3
11765: PPUSH
11766: LD_INT 1
11768: PPUSH
11769: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11773: LD_INT 49
11775: PPUSH
11776: LD_VAR 0 3
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11788: LD_INT 69
11790: PPUSH
11791: LD_VAR 0 3
11795: PPUSH
11796: LD_INT 1
11798: PPUSH
11799: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11803: LD_INT 39
11805: PPUSH
11806: LD_VAR 0 3
11810: PPUSH
11811: LD_INT 1
11813: PPUSH
11814: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11818: LD_INT 34
11820: PPUSH
11821: LD_VAR 0 3
11825: PPUSH
11826: LD_INT 1
11828: PPUSH
11829: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11833: LD_INT 42
11835: PPUSH
11836: LD_VAR 0 3
11840: PPUSH
11841: LD_INT 1
11843: PPUSH
11844: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11848: LD_INT 44
11850: PPUSH
11851: LD_VAR 0 3
11855: PPUSH
11856: LD_INT 1
11858: PPUSH
11859: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11863: LD_INT 41
11865: PPUSH
11866: LD_VAR 0 3
11870: PPUSH
11871: LD_INT 1
11873: PPUSH
11874: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11878: LD_INT 40
11880: PPUSH
11881: LD_VAR 0 3
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11893: LD_INT 43
11895: PPUSH
11896: LD_VAR 0 3
11900: PPUSH
11901: LD_INT 1
11903: PPUSH
11904: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11908: LD_INT 70
11910: PPUSH
11911: LD_VAR 0 3
11915: PPUSH
11916: LD_INT 1
11918: PPUSH
11919: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11923: LD_INT 51
11925: PPUSH
11926: LD_VAR 0 3
11930: PPUSH
11931: LD_INT 1
11933: PPUSH
11934: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11938: LD_INT 52
11940: PPUSH
11941: LD_VAR 0 3
11945: PPUSH
11946: LD_INT 1
11948: PPUSH
11949: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11953: LD_INT 6
11955: PPUSH
11956: LD_VAR 0 3
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11968: LD_INT 15
11970: PPUSH
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_INT 1
11978: PPUSH
11979: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11983: LD_INT 7
11985: PPUSH
11986: LD_VAR 0 3
11990: PPUSH
11991: LD_INT 1
11993: PPUSH
11994: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11998: LD_INT 12
12000: PPUSH
12001: LD_VAR 0 3
12005: PPUSH
12006: LD_INT 1
12008: PPUSH
12009: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12013: LD_INT 17
12015: PPUSH
12016: LD_VAR 0 3
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12028: LD_INT 18
12030: PPUSH
12031: LD_VAR 0 3
12035: PPUSH
12036: LD_INT 1
12038: PPUSH
12039: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12043: LD_INT 60
12045: PPUSH
12046: LD_VAR 0 3
12050: PPUSH
12051: LD_INT 1
12053: PPUSH
12054: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12058: LD_INT 32
12060: PPUSH
12061: LD_VAR 0 3
12065: PPUSH
12066: LD_INT 1
12068: PPUSH
12069: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12073: LD_INT 9
12075: PPUSH
12076: LD_VAR 0 3
12080: PPUSH
12081: LD_INT 1
12083: PPUSH
12084: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12088: LD_INT 57
12090: PPUSH
12091: LD_VAR 0 3
12095: PPUSH
12096: LD_INT 1
12098: PPUSH
12099: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12103: LD_INT 30
12105: PPUSH
12106: LD_VAR 0 3
12110: PPUSH
12111: LD_INT 1
12113: PPUSH
12114: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12118: LD_INT 37
12120: PPUSH
12121: LD_VAR 0 3
12125: PPUSH
12126: LD_INT 1
12128: PPUSH
12129: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12133: LD_INT 63
12135: PPUSH
12136: LD_VAR 0 3
12140: PPUSH
12141: LD_INT 1
12143: PPUSH
12144: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12148: LD_INT 3
12150: PPUSH
12151: LD_VAR 0 3
12155: PPUSH
12156: LD_INT 1
12158: PPUSH
12159: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12163: LD_INT 4
12165: PPUSH
12166: LD_VAR 0 3
12170: PPUSH
12171: LD_INT 1
12173: PPUSH
12174: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12178: LD_INT 5
12180: PPUSH
12181: LD_VAR 0 3
12185: PPUSH
12186: LD_INT 1
12188: PPUSH
12189: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12193: LD_INT 66
12195: PPUSH
12196: LD_VAR 0 3
12200: PPUSH
12201: LD_INT 1
12203: PPUSH
12204: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12208: LD_INT 21
12210: PPUSH
12211: LD_VAR 0 3
12215: PPUSH
12216: LD_INT 1
12218: PPUSH
12219: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12223: LD_INT 22
12225: PPUSH
12226: LD_VAR 0 3
12230: PPUSH
12231: LD_INT 1
12233: PPUSH
12234: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12238: LD_INT 19
12240: PPUSH
12241: LD_VAR 0 3
12245: PPUSH
12246: LD_INT 1
12248: PPUSH
12249: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12253: LD_INT 54
12255: PPUSH
12256: LD_VAR 0 3
12260: PPUSH
12261: LD_INT 1
12263: PPUSH
12264: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12268: LD_INT 55
12270: PPUSH
12271: LD_VAR 0 3
12275: PPUSH
12276: LD_INT 1
12278: PPUSH
12279: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12283: LD_INT 0
12285: PPUSH
12286: LD_VAR 0 3
12290: PPUSH
12291: LD_INT 1
12293: PPUSH
12294: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12298: LD_INT 1
12300: PPUSH
12301: LD_VAR 0 3
12305: PPUSH
12306: LD_INT 1
12308: PPUSH
12309: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12313: LD_INT 2
12315: PPUSH
12316: LD_VAR 0 3
12320: PPUSH
12321: LD_INT 1
12323: PPUSH
12324: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12328: LD_INT 3
12330: PPUSH
12331: LD_VAR 0 3
12335: PPUSH
12336: LD_INT 1
12338: PPUSH
12339: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12343: LD_INT 4
12345: PPUSH
12346: LD_VAR 0 3
12350: PPUSH
12351: LD_INT 1
12353: PPUSH
12354: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12358: LD_INT 5
12360: PPUSH
12361: LD_VAR 0 3
12365: PPUSH
12366: LD_INT 1
12368: PPUSH
12369: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12373: LD_INT 6
12375: PPUSH
12376: LD_VAR 0 3
12380: PPUSH
12381: LD_INT 1
12383: PPUSH
12384: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12388: LD_INT 7
12390: PPUSH
12391: LD_VAR 0 3
12395: PPUSH
12396: LD_INT 1
12398: PPUSH
12399: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12403: LD_INT 8
12405: PPUSH
12406: LD_VAR 0 3
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12418: LD_INT 10
12420: PPUSH
12421: LD_VAR 0 3
12425: PPUSH
12426: LD_INT 1
12428: PPUSH
12429: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12433: LD_INT 11
12435: PPUSH
12436: LD_VAR 0 3
12440: PPUSH
12441: LD_INT 1
12443: PPUSH
12444: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12448: LD_INT 12
12450: PPUSH
12451: LD_VAR 0 3
12455: PPUSH
12456: LD_INT 1
12458: PPUSH
12459: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12463: LD_INT 13
12465: PPUSH
12466: LD_VAR 0 3
12470: PPUSH
12471: LD_INT 1
12473: PPUSH
12474: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12478: LD_INT 14
12480: PPUSH
12481: LD_VAR 0 3
12485: PPUSH
12486: LD_INT 1
12488: PPUSH
12489: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12493: LD_INT 15
12495: PPUSH
12496: LD_VAR 0 3
12500: PPUSH
12501: LD_INT 1
12503: PPUSH
12504: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12508: LD_INT 16
12510: PPUSH
12511: LD_VAR 0 3
12515: PPUSH
12516: LD_INT 1
12518: PPUSH
12519: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12523: LD_INT 17
12525: PPUSH
12526: LD_VAR 0 3
12530: PPUSH
12531: LD_INT 1
12533: PPUSH
12534: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12538: LD_INT 18
12540: PPUSH
12541: LD_VAR 0 3
12545: PPUSH
12546: LD_INT 1
12548: PPUSH
12549: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12553: LD_INT 19
12555: PPUSH
12556: LD_VAR 0 3
12560: PPUSH
12561: LD_INT 1
12563: PPUSH
12564: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12568: LD_INT 20
12570: PPUSH
12571: LD_VAR 0 3
12575: PPUSH
12576: LD_INT 1
12578: PPUSH
12579: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12583: LD_INT 21
12585: PPUSH
12586: LD_VAR 0 3
12590: PPUSH
12591: LD_INT 1
12593: PPUSH
12594: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12598: LD_INT 23
12600: PPUSH
12601: LD_VAR 0 3
12605: PPUSH
12606: LD_INT 1
12608: PPUSH
12609: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12613: LD_INT 26
12615: PPUSH
12616: LD_VAR 0 3
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12628: LD_INT 27
12630: PPUSH
12631: LD_VAR 0 3
12635: PPUSH
12636: LD_INT 1
12638: PPUSH
12639: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12643: LD_INT 28
12645: PPUSH
12646: LD_VAR 0 3
12650: PPUSH
12651: LD_INT 1
12653: PPUSH
12654: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12658: LD_INT 29
12660: PPUSH
12661: LD_VAR 0 3
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12673: LD_INT 30
12675: PPUSH
12676: LD_VAR 0 3
12680: PPUSH
12681: LD_INT 1
12683: PPUSH
12684: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12688: LD_INT 31
12690: PPUSH
12691: LD_VAR 0 3
12695: PPUSH
12696: LD_INT 1
12698: PPUSH
12699: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12703: LD_INT 32
12705: PPUSH
12706: LD_VAR 0 3
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12718: LD_INT 33
12720: PPUSH
12721: LD_VAR 0 3
12725: PPUSH
12726: LD_INT 1
12728: PPUSH
12729: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12733: LD_INT 36
12735: PPUSH
12736: LD_VAR 0 3
12740: PPUSH
12741: LD_INT 1
12743: PPUSH
12744: CALL_OW 324
// end ; 6 :
12748: GO 13758
12750: LD_INT 6
12752: DOUBLE
12753: EQUAL
12754: IFTRUE 12758
12756: GO 13683
12758: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12759: LD_INT 35
12761: PPUSH
12762: LD_VAR 0 3
12766: PPUSH
12767: LD_INT 1
12769: PPUSH
12770: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12774: LD_INT 45
12776: PPUSH
12777: LD_VAR 0 3
12781: PPUSH
12782: LD_INT 1
12784: PPUSH
12785: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12789: LD_INT 46
12791: PPUSH
12792: LD_VAR 0 3
12796: PPUSH
12797: LD_INT 1
12799: PPUSH
12800: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12804: LD_INT 47
12806: PPUSH
12807: LD_VAR 0 3
12811: PPUSH
12812: LD_INT 1
12814: PPUSH
12815: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12819: LD_INT 1
12821: PPUSH
12822: LD_VAR 0 3
12826: PPUSH
12827: LD_INT 1
12829: PPUSH
12830: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12834: LD_INT 2
12836: PPUSH
12837: LD_VAR 0 3
12841: PPUSH
12842: LD_INT 1
12844: PPUSH
12845: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12849: LD_INT 11
12851: PPUSH
12852: LD_VAR 0 3
12856: PPUSH
12857: LD_INT 1
12859: PPUSH
12860: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12864: LD_INT 20
12866: PPUSH
12867: LD_VAR 0 3
12871: PPUSH
12872: LD_INT 1
12874: PPUSH
12875: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12879: LD_INT 48
12881: PPUSH
12882: LD_VAR 0 3
12886: PPUSH
12887: LD_INT 1
12889: PPUSH
12890: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12894: LD_INT 49
12896: PPUSH
12897: LD_VAR 0 3
12901: PPUSH
12902: LD_INT 1
12904: PPUSH
12905: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12909: LD_INT 50
12911: PPUSH
12912: LD_VAR 0 3
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12924: LD_INT 69
12926: PPUSH
12927: LD_VAR 0 3
12931: PPUSH
12932: LD_INT 1
12934: PPUSH
12935: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12939: LD_INT 39
12941: PPUSH
12942: LD_VAR 0 3
12946: PPUSH
12947: LD_INT 1
12949: PPUSH
12950: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12954: LD_INT 34
12956: PPUSH
12957: LD_VAR 0 3
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12969: LD_INT 42
12971: PPUSH
12972: LD_VAR 0 3
12976: PPUSH
12977: LD_INT 1
12979: PPUSH
12980: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12984: LD_INT 44
12986: PPUSH
12987: LD_VAR 0 3
12991: PPUSH
12992: LD_INT 1
12994: PPUSH
12995: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12999: LD_INT 41
13001: PPUSH
13002: LD_VAR 0 3
13006: PPUSH
13007: LD_INT 1
13009: PPUSH
13010: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13014: LD_INT 13
13016: PPUSH
13017: LD_VAR 0 3
13021: PPUSH
13022: LD_INT 1
13024: PPUSH
13025: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13029: LD_INT 40
13031: PPUSH
13032: LD_VAR 0 3
13036: PPUSH
13037: LD_INT 1
13039: PPUSH
13040: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13044: LD_INT 43
13046: PPUSH
13047: LD_VAR 0 3
13051: PPUSH
13052: LD_INT 1
13054: PPUSH
13055: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13059: LD_INT 70
13061: PPUSH
13062: LD_VAR 0 3
13066: PPUSH
13067: LD_INT 1
13069: PPUSH
13070: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13074: LD_INT 23
13076: PPUSH
13077: LD_VAR 0 3
13081: PPUSH
13082: LD_INT 1
13084: PPUSH
13085: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13089: LD_INT 51
13091: PPUSH
13092: LD_VAR 0 3
13096: PPUSH
13097: LD_INT 1
13099: PPUSH
13100: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13104: LD_INT 52
13106: PPUSH
13107: LD_VAR 0 3
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13119: LD_INT 6
13121: PPUSH
13122: LD_VAR 0 3
13126: PPUSH
13127: LD_INT 1
13129: PPUSH
13130: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13134: LD_INT 15
13136: PPUSH
13137: LD_VAR 0 3
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13149: LD_INT 7
13151: PPUSH
13152: LD_VAR 0 3
13156: PPUSH
13157: LD_INT 1
13159: PPUSH
13160: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13164: LD_INT 12
13166: PPUSH
13167: LD_VAR 0 3
13171: PPUSH
13172: LD_INT 1
13174: PPUSH
13175: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13179: LD_INT 10
13181: PPUSH
13182: LD_VAR 0 3
13186: PPUSH
13187: LD_INT 1
13189: PPUSH
13190: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13194: LD_INT 17
13196: PPUSH
13197: LD_VAR 0 3
13201: PPUSH
13202: LD_INT 1
13204: PPUSH
13205: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13209: LD_INT 18
13211: PPUSH
13212: LD_VAR 0 3
13216: PPUSH
13217: LD_INT 1
13219: PPUSH
13220: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13224: LD_INT 60
13226: PPUSH
13227: LD_VAR 0 3
13231: PPUSH
13232: LD_INT 1
13234: PPUSH
13235: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13239: LD_INT 61
13241: PPUSH
13242: LD_VAR 0 3
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13254: LD_INT 32
13256: PPUSH
13257: LD_VAR 0 3
13261: PPUSH
13262: LD_INT 1
13264: PPUSH
13265: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13269: LD_INT 27
13271: PPUSH
13272: LD_VAR 0 3
13276: PPUSH
13277: LD_INT 1
13279: PPUSH
13280: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13284: LD_INT 36
13286: PPUSH
13287: LD_VAR 0 3
13291: PPUSH
13292: LD_INT 1
13294: PPUSH
13295: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13299: LD_INT 33
13301: PPUSH
13302: LD_VAR 0 3
13306: PPUSH
13307: LD_INT 1
13309: PPUSH
13310: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13314: LD_INT 9
13316: PPUSH
13317: LD_VAR 0 3
13321: PPUSH
13322: LD_INT 1
13324: PPUSH
13325: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13329: LD_INT 38
13331: PPUSH
13332: LD_VAR 0 3
13336: PPUSH
13337: LD_INT 1
13339: PPUSH
13340: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13344: LD_INT 57
13346: PPUSH
13347: LD_VAR 0 3
13351: PPUSH
13352: LD_INT 1
13354: PPUSH
13355: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13359: LD_INT 58
13361: PPUSH
13362: LD_VAR 0 3
13366: PPUSH
13367: LD_INT 1
13369: PPUSH
13370: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13374: LD_INT 28
13376: PPUSH
13377: LD_VAR 0 3
13381: PPUSH
13382: LD_INT 1
13384: PPUSH
13385: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13389: LD_INT 29
13391: PPUSH
13392: LD_VAR 0 3
13396: PPUSH
13397: LD_INT 1
13399: PPUSH
13400: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13404: LD_INT 30
13406: PPUSH
13407: LD_VAR 0 3
13411: PPUSH
13412: LD_INT 1
13414: PPUSH
13415: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13419: LD_INT 37
13421: PPUSH
13422: LD_VAR 0 3
13426: PPUSH
13427: LD_INT 1
13429: PPUSH
13430: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13434: LD_INT 63
13436: PPUSH
13437: LD_VAR 0 3
13441: PPUSH
13442: LD_INT 1
13444: PPUSH
13445: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13449: LD_INT 64
13451: PPUSH
13452: LD_VAR 0 3
13456: PPUSH
13457: LD_INT 1
13459: PPUSH
13460: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13464: LD_INT 3
13466: PPUSH
13467: LD_VAR 0 3
13471: PPUSH
13472: LD_INT 1
13474: PPUSH
13475: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13479: LD_INT 4
13481: PPUSH
13482: LD_VAR 0 3
13486: PPUSH
13487: LD_INT 1
13489: PPUSH
13490: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13494: LD_INT 5
13496: PPUSH
13497: LD_VAR 0 3
13501: PPUSH
13502: LD_INT 1
13504: PPUSH
13505: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13509: LD_INT 8
13511: PPUSH
13512: LD_VAR 0 3
13516: PPUSH
13517: LD_INT 1
13519: PPUSH
13520: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13524: LD_INT 66
13526: PPUSH
13527: LD_VAR 0 3
13531: PPUSH
13532: LD_INT 1
13534: PPUSH
13535: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13539: LD_INT 67
13541: PPUSH
13542: LD_VAR 0 3
13546: PPUSH
13547: LD_INT 1
13549: PPUSH
13550: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13554: LD_INT 21
13556: PPUSH
13557: LD_VAR 0 3
13561: PPUSH
13562: LD_INT 1
13564: PPUSH
13565: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13569: LD_INT 22
13571: PPUSH
13572: LD_VAR 0 3
13576: PPUSH
13577: LD_INT 1
13579: PPUSH
13580: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13584: LD_INT 19
13586: PPUSH
13587: LD_VAR 0 3
13591: PPUSH
13592: LD_INT 1
13594: PPUSH
13595: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13599: LD_INT 26
13601: PPUSH
13602: LD_VAR 0 3
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13614: LD_INT 54
13616: PPUSH
13617: LD_VAR 0 3
13621: PPUSH
13622: LD_INT 1
13624: PPUSH
13625: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13629: LD_INT 55
13631: PPUSH
13632: LD_VAR 0 3
13636: PPUSH
13637: LD_INT 1
13639: PPUSH
13640: CALL_OW 322
// for i = 0 to 39 do
13644: LD_ADDR_VAR 0 4
13648: PUSH
13649: DOUBLE
13650: LD_INT 0
13652: DEC
13653: ST_TO_ADDR
13654: LD_INT 39
13656: PUSH
13657: FOR_TO
13658: IFFALSE 13679
// SetRestrict ( i , side , true ) ;
13660: LD_VAR 0 4
13664: PPUSH
13665: LD_VAR 0 3
13669: PPUSH
13670: LD_INT 1
13672: PPUSH
13673: CALL_OW 324
13677: GO 13657
13679: POP
13680: POP
// end ; else
13681: GO 13758
13683: POP
// begin for i = 1 to 73 do
13684: LD_ADDR_VAR 0 4
13688: PUSH
13689: DOUBLE
13690: LD_INT 1
13692: DEC
13693: ST_TO_ADDR
13694: LD_INT 73
13696: PUSH
13697: FOR_TO
13698: IFFALSE 13719
// SetTech ( i , side , state_enabled ) ;
13700: LD_VAR 0 4
13704: PPUSH
13705: LD_VAR 0 3
13709: PPUSH
13710: LD_INT 1
13712: PPUSH
13713: CALL_OW 322
13717: GO 13697
13719: POP
13720: POP
// for i = 0 to 39 do
13721: LD_ADDR_VAR 0 4
13725: PUSH
13726: DOUBLE
13727: LD_INT 0
13729: DEC
13730: ST_TO_ADDR
13731: LD_INT 39
13733: PUSH
13734: FOR_TO
13735: IFFALSE 13756
// SetRestrict ( i , side , true ) ;
13737: LD_VAR 0 4
13741: PPUSH
13742: LD_VAR 0 3
13746: PPUSH
13747: LD_INT 1
13749: PPUSH
13750: CALL_OW 324
13754: GO 13734
13756: POP
13757: POP
// end ; end ; end ;
13758: GO 9763
13760: POP
13761: POP
// end ; end_of_file
13762: LD_VAR 0 2
13766: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13767: LD_INT 0
13769: PPUSH
13770: PPUSH
13771: PPUSH
13772: PPUSH
13773: PPUSH
13774: PPUSH
13775: PPUSH
13776: PPUSH
13777: PPUSH
// for i := 1 to 8 do
13778: LD_ADDR_VAR 0 2
13782: PUSH
13783: DOUBLE
13784: LD_INT 1
13786: DEC
13787: ST_TO_ADDR
13788: LD_INT 8
13790: PUSH
13791: FOR_TO
13792: IFFALSE 14176
// begin if Side_Positions [ i ] then
13794: LD_EXP 34
13798: PUSH
13799: LD_VAR 0 2
13803: ARRAY
13804: IFFALSE 14174
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13806: LD_ADDR_VAR 0 7
13810: PUSH
13811: LD_INT 22
13813: PUSH
13814: LD_VAR 0 2
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 21
13825: PUSH
13826: LD_INT 1
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PPUSH
13837: CALL_OW 69
13841: PUSH
13842: LD_INT 0
13844: PLUS
13845: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13846: LD_ADDR_VAR 0 9
13850: PUSH
13851: LD_INT 22
13853: PUSH
13854: LD_VAR 0 2
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PUSH
13863: LD_INT 2
13865: PUSH
13866: LD_INT 30
13868: PUSH
13869: LD_INT 0
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: LD_INT 30
13878: PUSH
13879: LD_INT 1
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: LIST
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PPUSH
13895: CALL_OW 69
13899: ST_TO_ADDR
// crates := 0 ;
13900: LD_ADDR_VAR 0 4
13904: PUSH
13905: LD_INT 0
13907: ST_TO_ADDR
// oil := 0 ;
13908: LD_ADDR_VAR 0 5
13912: PUSH
13913: LD_INT 0
13915: ST_TO_ADDR
// sib := 0 ;
13916: LD_ADDR_VAR 0 6
13920: PUSH
13921: LD_INT 0
13923: ST_TO_ADDR
// if bases then
13924: LD_VAR 0 9
13928: IFFALSE 14034
// begin for j in bases do
13930: LD_ADDR_VAR 0 3
13934: PUSH
13935: LD_VAR 0 9
13939: PUSH
13940: FOR_IN
13941: IFFALSE 14032
// begin base := GetBase ( j ) ;
13943: LD_ADDR_VAR 0 8
13947: PUSH
13948: LD_VAR 0 3
13952: PPUSH
13953: CALL_OW 274
13957: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13958: LD_ADDR_VAR 0 4
13962: PUSH
13963: LD_VAR 0 4
13967: PUSH
13968: LD_VAR 0 8
13972: PPUSH
13973: LD_INT 1
13975: PPUSH
13976: CALL_OW 275
13980: PLUS
13981: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13982: LD_ADDR_VAR 0 5
13986: PUSH
13987: LD_VAR 0 5
13991: PUSH
13992: LD_VAR 0 8
13996: PPUSH
13997: LD_INT 2
13999: PPUSH
14000: CALL_OW 275
14004: PLUS
14005: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14006: LD_ADDR_VAR 0 6
14010: PUSH
14011: LD_VAR 0 6
14015: PUSH
14016: LD_VAR 0 8
14020: PPUSH
14021: LD_INT 3
14023: PPUSH
14024: CALL_OW 275
14028: PLUS
14029: ST_TO_ADDR
// end ;
14030: GO 13940
14032: POP
14033: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14034: LD_STRING setSpecText(
14036: PUSH
14037: LD_VAR 0 2
14041: STR
14042: PUSH
14043: LD_STRING ,
14045: STR
14046: PUSH
14047: LD_INT 2
14049: STR
14050: PUSH
14051: LD_STRING ,
14053: STR
14054: PUSH
14055: LD_VAR 0 4
14059: STR
14060: PUSH
14061: LD_STRING )
14063: STR
14064: PPUSH
14065: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14069: LD_STRING setSpecText(
14071: PUSH
14072: LD_VAR 0 2
14076: STR
14077: PUSH
14078: LD_STRING ,
14080: STR
14081: PUSH
14082: LD_INT 3
14084: STR
14085: PUSH
14086: LD_STRING ,
14088: STR
14089: PUSH
14090: LD_VAR 0 5
14094: STR
14095: PUSH
14096: LD_STRING )
14098: STR
14099: PPUSH
14100: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14104: LD_STRING setSpecText(
14106: PUSH
14107: LD_VAR 0 2
14111: STR
14112: PUSH
14113: LD_STRING ,
14115: STR
14116: PUSH
14117: LD_INT 4
14119: STR
14120: PUSH
14121: LD_STRING ,
14123: STR
14124: PUSH
14125: LD_VAR 0 6
14129: STR
14130: PUSH
14131: LD_STRING )
14133: STR
14134: PPUSH
14135: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14139: LD_STRING setSpecText(
14141: PUSH
14142: LD_VAR 0 2
14146: STR
14147: PUSH
14148: LD_STRING ,
14150: STR
14151: PUSH
14152: LD_INT 5
14154: STR
14155: PUSH
14156: LD_STRING ,
14158: STR
14159: PUSH
14160: LD_VAR 0 7
14164: STR
14165: PUSH
14166: LD_STRING )
14168: STR
14169: PPUSH
14170: CALL_OW 559
// end ; end ;
14174: GO 13791
14176: POP
14177: POP
// end ;
14178: LD_VAR 0 1
14182: RET
// every 0 0$1 do
14183: GO 14185
14185: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14186: LD_STRING setSpecLogoNumber(
14188: PUSH
14189: LD_INT 2
14191: STR
14192: PUSH
14193: LD_STRING ,
14195: STR
14196: PUSH
14197: LD_INT 1
14199: STR
14200: PUSH
14201: LD_STRING )
14203: STR
14204: PPUSH
14205: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14209: LD_STRING setSpecLogoNumber(
14211: PUSH
14212: LD_INT 3
14214: STR
14215: PUSH
14216: LD_STRING ,
14218: STR
14219: PUSH
14220: LD_INT 2
14222: STR
14223: PUSH
14224: LD_STRING )
14226: STR
14227: PPUSH
14228: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14232: LD_STRING setSpecLogoNumber(
14234: PUSH
14235: LD_INT 4
14237: STR
14238: PUSH
14239: LD_STRING ,
14241: STR
14242: PUSH
14243: LD_INT 3
14245: STR
14246: PUSH
14247: LD_STRING )
14249: STR
14250: PPUSH
14251: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14255: LD_STRING setSpecLogoNumber(
14257: PUSH
14258: LD_INT 5
14260: STR
14261: PUSH
14262: LD_STRING ,
14264: STR
14265: PUSH
14266: LD_INT 4
14268: STR
14269: PUSH
14270: LD_STRING )
14272: STR
14273: PPUSH
14274: CALL_OW 559
// end ;
14278: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14279: LD_INT 2
14281: PUSH
14282: LD_INT 30
14284: PUSH
14285: LD_INT 0
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 30
14294: PUSH
14295: LD_INT 1
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: IFFALSE 14321
14313: GO 14315
14315: DISABLE
// begin enable ;
14316: ENABLE
// UpdateSpectatorBar ;
14317: CALL 13767 0 0
// end ; end_of_file
14321: END
// var respawn , inqueue ; export function init_respawning ; begin
14322: LD_INT 0
14324: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14325: LD_ADDR_LOC 18
14329: PUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 8
14335: PPUSH
14336: CALL_OW 12
14340: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14341: LD_ADDR_LOC 19
14345: PUSH
14346: LD_INT 0
14348: PUSH
14349: LD_INT 0
14351: PUSH
14352: LD_INT 0
14354: PUSH
14355: LD_INT 0
14357: PUSH
14358: LD_INT 0
14360: PUSH
14361: LD_INT 0
14363: PUSH
14364: LD_INT 0
14366: PUSH
14367: LD_INT 0
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: ST_TO_ADDR
// end ;
14380: LD_VAR 0 1
14384: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14385: GO 14387
14387: DISABLE
14388: LD_INT 0
14390: PPUSH
14391: PPUSH
14392: PPUSH
// begin if respawning_time_max = 0 then
14393: LD_EXP 28
14397: PUSH
14398: LD_INT 0
14400: EQUAL
14401: IFFALSE 14405
// exit ;
14403: GO 14813
// if respawn = 8 then
14405: LD_LOC 18
14409: PUSH
14410: LD_INT 8
14412: EQUAL
14413: IFFALSE 14425
// respawn := 1 else
14415: LD_ADDR_LOC 18
14419: PUSH
14420: LD_INT 1
14422: ST_TO_ADDR
14423: GO 14439
// respawn := respawn + 1 ;
14425: LD_ADDR_LOC 18
14429: PUSH
14430: LD_LOC 18
14434: PUSH
14435: LD_INT 1
14437: PLUS
14438: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14439: LD_EXP 34
14443: PUSH
14444: LD_LOC 18
14448: ARRAY
14449: PUSH
14450: LD_LOC 19
14454: PUSH
14455: LD_LOC 18
14459: ARRAY
14460: NOT
14461: AND
14462: IFFALSE 14812
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14464: LD_ADDR_VAR 0 1
14468: PUSH
14469: LD_INT 21
14471: PUSH
14472: LD_INT 1
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 22
14481: PUSH
14482: LD_LOC 18
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 3
14493: PUSH
14494: LD_INT 23
14496: PUSH
14497: LD_INT 0
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: PPUSH
14510: CALL_OW 69
14514: ST_TO_ADDR
// if n < number_of_people then
14515: LD_VAR 0 1
14519: PUSH
14520: LD_EXP 19
14524: LESS
14525: IFFALSE 14809
// begin aktresp := respawn ;
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: LD_LOC 18
14536: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14537: LD_ADDR_LOC 19
14541: PUSH
14542: LD_LOC 19
14546: PPUSH
14547: LD_VAR 0 3
14551: PPUSH
14552: LD_INT 1
14554: PPUSH
14555: CALL_OW 1
14559: ST_TO_ADDR
// enable ;
14560: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14561: LD_EXP 27
14565: PPUSH
14566: LD_EXP 28
14570: PPUSH
14571: CALL_OW 12
14575: PPUSH
14576: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14580: LD_ADDR_LOC 19
14584: PUSH
14585: LD_LOC 19
14589: PPUSH
14590: LD_VAR 0 3
14594: PPUSH
14595: LD_INT 0
14597: PPUSH
14598: CALL_OW 1
14602: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14603: LD_ADDR_VAR 0 2
14607: PUSH
14608: LD_INT 21
14610: PUSH
14611: LD_INT 3
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: LD_INT 2
14620: PUSH
14621: LD_INT 30
14623: PUSH
14624: LD_INT 0
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 30
14633: PUSH
14634: LD_INT 1
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: PUSH
14646: LD_INT 50
14648: PUSH
14649: EMPTY
14650: LIST
14651: PUSH
14652: LD_INT 22
14654: PUSH
14655: LD_VAR 0 3
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL_OW 69
14674: ST_TO_ADDR
// if dep = 0 then
14675: LD_VAR 0 2
14679: PUSH
14680: LD_INT 0
14682: EQUAL
14683: IFFALSE 14687
// exit ;
14685: GO 14813
// hc_name :=  ;
14687: LD_ADDR_OWVAR 26
14691: PUSH
14692: LD_STRING 
14694: ST_TO_ADDR
// hc_importance := 0 ;
14695: LD_ADDR_OWVAR 32
14699: PUSH
14700: LD_INT 0
14702: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14703: LD_INT 0
14705: PPUSH
14706: LD_INT 0
14708: PPUSH
14709: LD_EXP 20
14713: PUSH
14714: LD_INT 2
14716: DIV
14717: PPUSH
14718: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14722: LD_ADDR_OWVAR 21
14726: PUSH
14727: LD_EXP 35
14731: PUSH
14732: LD_VAR 0 3
14736: ARRAY
14737: ST_TO_ADDR
// uc_side := aktresp ;
14738: LD_ADDR_OWVAR 20
14742: PUSH
14743: LD_VAR 0 3
14747: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14748: LD_ADDR_VAR 0 2
14752: PUSH
14753: LD_VAR 0 2
14757: PUSH
14758: LD_INT 1
14760: PPUSH
14761: LD_VAR 0 2
14765: PPUSH
14766: CALL_OW 12
14770: ARRAY
14771: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14772: CALL_OW 44
14776: PPUSH
14777: LD_VAR 0 2
14781: PPUSH
14782: CALL_OW 250
14786: PPUSH
14787: LD_VAR 0 2
14791: PPUSH
14792: CALL_OW 251
14796: PPUSH
14797: LD_INT 7
14799: PPUSH
14800: LD_INT 1
14802: PPUSH
14803: CALL_OW 50
// end else
14807: GO 14810
// enable ;
14809: ENABLE
// end else
14810: GO 14813
// enable ;
14812: ENABLE
// end ;
14813: PPOPN 3
14815: END
