// export Neutral ; export def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_shared_vision , def_morale_flags , def_siberite_detection , def_second_oil , def_amount_of_apemen , def_find_people , def_lost_people , def_other_nation , def_vehicles_too ; export is_depot , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , battle_flags_id , chance_loose , chance_find , amount_of_apemen ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export buildings_def , start_def ; export commander ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if MultiPlayer then
  11: LD_OWVAR 4
  15: IFFALSE 69
// begin Your_Side = mp_player_side ;
  17: LD_ADDR_OWVAR 2
  21: PUSH
  22: LD_OWVAR 7
  26: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  27: LD_ADDR_EXP 29
  31: PUSH
  32: LD_OWVAR 17
  36: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  37: LD_ADDR_EXP 27
  41: PUSH
  42: LD_OWVAR 15
  46: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  47: LD_ADDR_EXP 30
  51: PUSH
  52: LD_OWVAR 16
  56: ST_TO_ADDR
// Teams = mp_teams ;
  57: LD_ADDR_EXP 28
  61: PUSH
  62: LD_OWVAR 12
  66: ST_TO_ADDR
// end else
  67: GO 223
// begin Your_Side = 4 ;
  69: LD_ADDR_OWVAR 2
  73: PUSH
  74: LD_INT 4
  76: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
  77: LD_ADDR_EXP 29
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 3
  87: PUSH
  88: LD_INT 0
  90: PUSH
  91: LD_INT 1
  93: PUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 2
  99: PUSH
 100: LD_INT 4
 102: PUSH
 103: LD_INT 0
 105: PUSH
 106: EMPTY
 107: LIST
 108: LIST
 109: LIST
 110: LIST
 111: LIST
 112: LIST
 113: LIST
 114: LIST
 115: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 116: LD_ADDR_EXP 27
 120: PUSH
 121: LD_INT 0
 123: PUSH
 124: LD_INT 1
 126: PUSH
 127: LD_INT 0
 129: PUSH
 130: LD_INT 2
 132: PUSH
 133: LD_INT 0
 135: PUSH
 136: LD_INT 1
 138: PUSH
 139: LD_INT 2
 141: PUSH
 142: LD_INT 0
 144: PUSH
 145: EMPTY
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 3 , 0 , 3 , 3 , 0 ] ;
 155: LD_ADDR_EXP 30
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 3
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 3
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 0
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 7 , 4 ] ] ;
 194: LD_ADDR_EXP 28
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 6
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 7
 211: PUSH
 212: LD_INT 4
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// end ; if MultiPlayer then
 223: LD_OWVAR 4
 227: IFFALSE 439
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 229: LD_ADDR_EXP 2
 233: PUSH
 234: LD_INT 0
 236: PPUSH
 237: CALL_OW 426
 241: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 242: LD_ADDR_EXP 3
 246: PUSH
 247: LD_INT 1
 249: PPUSH
 250: CALL_OW 426
 254: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 255: LD_ADDR_EXP 4
 259: PUSH
 260: LD_INT 2
 262: PPUSH
 263: CALL_OW 426
 267: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 268: LD_ADDR_EXP 5
 272: PUSH
 273: LD_INT 3
 275: PPUSH
 276: CALL_OW 426
 280: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 281: LD_ADDR_EXP 6
 285: PUSH
 286: LD_INT 4
 288: PPUSH
 289: CALL_OW 426
 293: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 294: LD_ADDR_EXP 7
 298: PUSH
 299: LD_INT 10
 301: PPUSH
 302: CALL_OW 426
 306: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 307: LD_ADDR_EXP 8
 311: PUSH
 312: LD_INT 11
 314: PPUSH
 315: CALL_OW 426
 319: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 320: LD_ADDR_EXP 9
 324: PUSH
 325: LD_INT 12
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 333: LD_ADDR_EXP 11
 337: PUSH
 338: LD_INT 13
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_find_people = GetMultiplayerSetting ( 14 ) ;
 346: LD_ADDR_EXP 12
 350: PUSH
 351: LD_INT 14
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_lost_people = GetMultiplayerSetting ( 15 ) ;
 359: LD_ADDR_EXP 13
 363: PUSH
 364: LD_INT 15
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_second_oil = GetMultiplayerSetting ( 16 ) ;
 372: LD_ADDR_EXP 10
 376: PUSH
 377: LD_INT 16
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_other_nation = GetMultiplayerSetting ( 17 ) ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 17
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_vehicles_too = GetMultiplayerSetting ( 18 ) ;
 398: LD_ADDR_EXP 15
 402: PUSH
 403: LD_INT 18
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_game_rules = GetMultiplayerSetting ( 21 ) ;
 411: LD_ADDR_EXP 38
 415: PUSH
 416: LD_INT 21
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 424: LD_ADDR_VAR 0 9
 428: PUSH
 429: LD_INT 22
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// end else
 437: GO 571
// begin randomize ;
 439: CALL_OW 10
// def_base_level = 3 ;
 443: LD_ADDR_EXP 2
 447: PUSH
 448: LD_INT 3
 450: ST_TO_ADDR
// def_amount_of_people = 1 ;
 451: LD_ADDR_EXP 3
 455: PUSH
 456: LD_INT 1
 458: ST_TO_ADDR
// def_initial_level = 1 ;
 459: LD_ADDR_EXP 4
 463: PUSH
 464: LD_INT 1
 466: ST_TO_ADDR
// def_starting_resources = 2 ;
 467: LD_ADDR_EXP 5
 471: PUSH
 472: LD_INT 2
 474: ST_TO_ADDR
// def_shipments_density = 1 ;
 475: LD_ADDR_EXP 6
 479: PUSH
 480: LD_INT 1
 482: ST_TO_ADDR
// def_shared_vision = 1 ;
 483: LD_ADDR_EXP 7
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// def_morale_flags = 1 ;
 491: LD_ADDR_EXP 8
 495: PUSH
 496: LD_INT 1
 498: ST_TO_ADDR
// def_siberite_detection = 1 ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 1
 506: ST_TO_ADDR
// def_amount_of_apemen = 1 ;
 507: LD_ADDR_EXP 11
 511: PUSH
 512: LD_INT 1
 514: ST_TO_ADDR
// def_find_people = 2 ;
 515: LD_ADDR_EXP 12
 519: PUSH
 520: LD_INT 2
 522: ST_TO_ADDR
// def_second_oil = 1 ;
 523: LD_ADDR_EXP 10
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// def_lost_people = 1 ;
 531: LD_ADDR_EXP 13
 535: PUSH
 536: LD_INT 1
 538: ST_TO_ADDR
// def_other_nation = 1 ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_INT 1
 546: ST_TO_ADDR
// def_vehicles_too = 0 ;
 547: LD_ADDR_EXP 15
 551: PUSH
 552: LD_INT 0
 554: ST_TO_ADDR
// def_game_rules = 0 ;
 555: LD_ADDR_EXP 38
 559: PUSH
 560: LD_INT 0
 562: ST_TO_ADDR
// tech_level = 4 ;
 563: LD_ADDR_VAR 0 9
 567: PUSH
 568: LD_INT 4
 570: ST_TO_ADDR
// end ; InitGameRules ;
 571: CALL 13247 0 0
// if def_game_rules = 0 then
 575: LD_EXP 38
 579: PUSH
 580: LD_INT 0
 582: EQUAL
 583: IFFALSE 610
// begin if isSGUI then
 585: LD_OWVAR 83
 589: IFFALSE 597
// setMpTechs ( ) else
 591: CALL 15864 0 0
 595: GO 610
// begin SetMpTechLevel ( tech_level + 1 ) ;
 597: LD_VAR 0 9
 601: PUSH
 602: LD_INT 1
 604: PLUS
 605: PPUSH
 606: CALL 16011 0 1
// end ; end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 610: LD_ADDR_EXP 16
 614: PUSH
 615: LD_INT 0
 617: PUSH
 618: LD_INT 1
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: LD_INT 1
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: PUSH
 633: LD_EXP 2
 637: PUSH
 638: LD_INT 1
 640: PLUS
 641: ARRAY
 642: ST_TO_ADDR
// initial_level = [ 1 , 2 , 3 , 5 , 7 ] [ def_initial_level + 1 ] ;
 643: LD_ADDR_EXP 18
 647: PUSH
 648: LD_INT 1
 650: PUSH
 651: LD_INT 2
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 7
 662: PUSH
 663: EMPTY
 664: LIST
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_EXP 4
 674: PUSH
 675: LD_INT 1
 677: PLUS
 678: ARRAY
 679: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 680: LD_ADDR_EXP 20
 684: PUSH
 685: LD_INT 0
 687: PUSH
 688: LD_INT 0
 690: PUSH
 691: LD_INT 0
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 30
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 50
 715: PUSH
 716: LD_INT 20
 718: PUSH
 719: LD_INT 0
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PUSH
 727: LD_INT 80
 729: PUSH
 730: LD_INT 40
 732: PUSH
 733: LD_INT 20
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: LIST
 745: LIST
 746: PUSH
 747: LD_EXP 5
 751: PUSH
 752: LD_INT 1
 754: PLUS
 755: ARRAY
 756: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_EXP 3
 766: PUSH
 767: LD_INT 4
 769: PLUS
 770: ST_TO_ADDR
// shipments_density := 18 + ( def_shipments_density ) * 38 ;
 771: LD_ADDR_EXP 21
 775: PUSH
 776: LD_INT 18
 778: PUSH
 779: LD_EXP 6
 783: PUSH
 784: LD_INT 38
 786: MUL
 787: PLUS
 788: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
 789: LD_ADDR_EXP 26
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: LD_INT 6
 802: PUSH
 803: LD_INT 9
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: PUSH
 812: LD_EXP 11
 816: PUSH
 817: LD_INT 1
 819: PLUS
 820: ARRAY
 821: ST_TO_ADDR
// if def_find_people then
 822: LD_EXP 12
 826: IFFALSE 860
// chance_find = 20 * ( 100 - ( ( def_find_people - 1 ) * 10 ) / 100 ) else
 828: LD_ADDR_EXP 25
 832: PUSH
 833: LD_INT 20
 835: PUSH
 836: LD_INT 100
 838: PUSH
 839: LD_EXP 12
 843: PUSH
 844: LD_INT 1
 846: MINUS
 847: PUSH
 848: LD_INT 10
 850: MUL
 851: PUSH
 852: LD_INT 100
 854: DIVREAL
 855: MINUS
 856: MUL
 857: ST_TO_ADDR
 858: GO 868
// chance_find = 21 ;
 860: LD_ADDR_EXP 25
 864: PUSH
 865: LD_INT 21
 867: ST_TO_ADDR
// if def_lost_people then
 868: LD_EXP 13
 872: IFFALSE 906
// chance_loose = 500 * ( 100 - ( ( def_find_people - 1 ) * 12 ) / 100 ) else
 874: LD_ADDR_EXP 24
 878: PUSH
 879: LD_INT 500
 881: PUSH
 882: LD_INT 100
 884: PUSH
 885: LD_EXP 12
 889: PUSH
 890: LD_INT 1
 892: MINUS
 893: PUSH
 894: LD_INT 12
 896: MUL
 897: PUSH
 898: LD_INT 100
 900: DIVREAL
 901: MINUS
 902: MUL
 903: ST_TO_ADDR
 904: GO 914
// chance_loose = 0 ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_INT 0
 913: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
 914: LD_ADDR_EXP 22
 918: PUSH
 919: LD_INT 1
 921: NEG
 922: PUSH
 923: LD_INT 350
 925: PUSH
 926: LD_INT 700
 928: PUSH
 929: LD_INT 1400
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_EXP 8
 946: PUSH
 947: LD_INT 1
 949: PLUS
 950: ARRAY
 951: ST_TO_ADDR
// battle_flags_id = [ ] ;
 952: LD_ADDR_EXP 23
 956: PUSH
 957: EMPTY
 958: ST_TO_ADDR
// end ;
 959: LD_VAR 0 1
 963: RET
// function prepare_map_coordinates ; begin
 964: LD_INT 0
 966: PPUSH
// start_def = [ [ 24 , 13 ] , [ 93 , 12 ] , [ 53 , 79 ] , [ 147 , 86 ] ] ;
 967: LD_ADDR_EXP 33
 971: PUSH
 972: LD_INT 24
 974: PUSH
 975: LD_INT 13
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 93
 984: PUSH
 985: LD_INT 12
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 53
 994: PUSH
 995: LD_INT 79
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 147
1004: PUSH
1005: LD_INT 86
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: ST_TO_ADDR
// case def_base_level of 0 :
1018: LD_EXP 2
1022: PUSH
1023: LD_INT 0
1025: DOUBLE
1026: EQUAL
1027: IFTRUE 1031
1029: GO 1053
1031: POP
// begin buildings_def = [ [ ] , [ ] , [ ] , [ ] ] ;
1032: LD_ADDR_EXP 32
1036: PUSH
1037: EMPTY
1038: PUSH
1039: EMPTY
1040: PUSH
1041: EMPTY
1042: PUSH
1043: EMPTY
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// end ; 1 :
1051: GO 2740
1053: LD_INT 1
1055: DOUBLE
1056: EQUAL
1057: IFTRUE 1061
1059: GO 1159
1061: POP
// begin buildings_def = [ [ [ b_depot , 16 , 5 , 3 ] ] , [ [ b_depot , 89 , 5 , 3 ] ] , [ [ b_depot , 56 , 91 , 0 ] ] , [ [ b_depot , 151 , 94 , 0 ] ] ] ;
1062: LD_ADDR_EXP 32
1066: PUSH
1067: LD_INT 0
1069: PUSH
1070: LD_INT 16
1072: PUSH
1073: LD_INT 5
1075: PUSH
1076: LD_INT 3
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: PUSH
1085: EMPTY
1086: LIST
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 89
1093: PUSH
1094: LD_INT 5
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: EMPTY
1107: LIST
1108: PUSH
1109: LD_INT 0
1111: PUSH
1112: LD_INT 56
1114: PUSH
1115: LD_INT 91
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: EMPTY
1128: LIST
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 151
1135: PUSH
1136: LD_INT 94
1138: PUSH
1139: LD_INT 0
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: ST_TO_ADDR
// end ; 2 :
1157: GO 2740
1159: LD_INT 2
1161: DOUBLE
1162: EQUAL
1163: IFTRUE 1167
1165: GO 1797
1167: POP
// begin buildings_def = [ [ [ b_depot , 16 , 5 , 3 ] , [ b_oil_mine , 9 , 4 , 0 ] , [ b_lab , 16 , 14 , 0 ] , [ b_workshop , 26 , 7 , 3 ] , [ b_armoury , 41 , 16 , 5 ] , [ b_breastwork , 24 , 21 , 0 ] , [ b_breastwork , 41 , 25 , 5 ] , [ b_oil_power , 10 , 9 , 1 ] ] , [ [ b_depot , 89 , 5 , 3 ] , [ b_oil_mine , 97 , 3 , 4 ] , [ b_lab , 100 , 10 , 4 ] , [ b_workshop , 88 , 17 , 2 ] , [ b_armoury , 87 , 25 , 2 ] , [ b_breastwork , 96 , 25 , 0 ] , [ b_breastwork , 72 , 13 , 0 ] , [ b_oil_power , 94 , 4 , 1 ] ] , [ [ b_depot , 56 , 91 , 0 ] , [ b_oil_mine , 51 , 88 , 0 ] , [ b_lab , 61 , 84 , 4 ] , [ b_workshop , 46 , 80 , 0 ] , [ b_armoury , 52 , 72 , 3 ] , [ b_breastwork , 43 , 66 , 3 ] , [ b_breastwork , 61 , 75 , 3 ] , [ b_oil_power , 61 , 90 , 3 ] ] , [ [ b_depot , 151 , 94 , 0 ] , [ b_oil_mine , 160 , 87 , 3 ] , [ b_lab , 159 , 94 , 5 ] , [ b_workshop , 146 , 80 , 3 ] , [ b_armoury , 139 , 91 , 1 ] , [ b_breastwork , 148 , 73 , 3 ] , [ b_breastwork , 140 , 71 , 2 ] , [ b_oil_power , 146 , 97 , 3 ] ] ] ;
1168: LD_ADDR_EXP 32
1172: PUSH
1173: LD_INT 0
1175: PUSH
1176: LD_INT 16
1178: PUSH
1179: LD_INT 5
1181: PUSH
1182: LD_INT 3
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: PUSH
1191: LD_INT 29
1193: PUSH
1194: LD_INT 9
1196: PUSH
1197: LD_INT 4
1199: PUSH
1200: LD_INT 0
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: PUSH
1209: LD_INT 6
1211: PUSH
1212: LD_INT 16
1214: PUSH
1215: LD_INT 14
1217: PUSH
1218: LD_INT 0
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: LD_INT 26
1232: PUSH
1233: LD_INT 7
1235: PUSH
1236: LD_INT 3
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: PUSH
1245: LD_INT 4
1247: PUSH
1248: LD_INT 41
1250: PUSH
1251: LD_INT 16
1253: PUSH
1254: LD_INT 5
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 31
1265: PUSH
1266: LD_INT 24
1268: PUSH
1269: LD_INT 21
1271: PUSH
1272: LD_INT 0
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 31
1283: PUSH
1284: LD_INT 41
1286: PUSH
1287: LD_INT 25
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: PUSH
1299: LD_INT 26
1301: PUSH
1302: LD_INT 10
1304: PUSH
1305: LD_INT 9
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 0
1329: PUSH
1330: LD_INT 89
1332: PUSH
1333: LD_INT 5
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: PUSH
1345: LD_INT 29
1347: PUSH
1348: LD_INT 97
1350: PUSH
1351: LD_INT 3
1353: PUSH
1354: LD_INT 4
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 6
1365: PUSH
1366: LD_INT 100
1368: PUSH
1369: LD_INT 10
1371: PUSH
1372: LD_INT 4
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: PUSH
1381: LD_INT 2
1383: PUSH
1384: LD_INT 88
1386: PUSH
1387: LD_INT 17
1389: PUSH
1390: LD_INT 2
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 4
1401: PUSH
1402: LD_INT 87
1404: PUSH
1405: LD_INT 25
1407: PUSH
1408: LD_INT 2
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 31
1419: PUSH
1420: LD_INT 96
1422: PUSH
1423: LD_INT 25
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: PUSH
1435: LD_INT 31
1437: PUSH
1438: LD_INT 72
1440: PUSH
1441: LD_INT 13
1443: PUSH
1444: LD_INT 0
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: PUSH
1453: LD_INT 26
1455: PUSH
1456: LD_INT 94
1458: PUSH
1459: LD_INT 4
1461: PUSH
1462: LD_INT 1
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 0
1483: PUSH
1484: LD_INT 56
1486: PUSH
1487: LD_INT 91
1489: PUSH
1490: LD_INT 0
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 29
1501: PUSH
1502: LD_INT 51
1504: PUSH
1505: LD_INT 88
1507: PUSH
1508: LD_INT 0
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PUSH
1517: LD_INT 6
1519: PUSH
1520: LD_INT 61
1522: PUSH
1523: LD_INT 84
1525: PUSH
1526: LD_INT 4
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 46
1540: PUSH
1541: LD_INT 80
1543: PUSH
1544: LD_INT 0
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 4
1555: PUSH
1556: LD_INT 52
1558: PUSH
1559: LD_INT 72
1561: PUSH
1562: LD_INT 3
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: LD_INT 31
1573: PUSH
1574: LD_INT 43
1576: PUSH
1577: LD_INT 66
1579: PUSH
1580: LD_INT 3
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 31
1591: PUSH
1592: LD_INT 61
1594: PUSH
1595: LD_INT 75
1597: PUSH
1598: LD_INT 3
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 26
1609: PUSH
1610: LD_INT 61
1612: PUSH
1613: LD_INT 90
1615: PUSH
1616: LD_INT 3
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: LD_INT 151
1640: PUSH
1641: LD_INT 94
1643: PUSH
1644: LD_INT 0
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: PUSH
1653: LD_INT 29
1655: PUSH
1656: LD_INT 160
1658: PUSH
1659: LD_INT 87
1661: PUSH
1662: LD_INT 3
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 6
1673: PUSH
1674: LD_INT 159
1676: PUSH
1677: LD_INT 94
1679: PUSH
1680: LD_INT 5
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: LD_INT 146
1694: PUSH
1695: LD_INT 80
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 4
1709: PUSH
1710: LD_INT 139
1712: PUSH
1713: LD_INT 91
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 31
1727: PUSH
1728: LD_INT 148
1730: PUSH
1731: LD_INT 73
1733: PUSH
1734: LD_INT 3
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 31
1745: PUSH
1746: LD_INT 140
1748: PUSH
1749: LD_INT 71
1751: PUSH
1752: LD_INT 2
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 26
1763: PUSH
1764: LD_INT 146
1766: PUSH
1767: LD_INT 97
1769: PUSH
1770: LD_INT 3
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: ST_TO_ADDR
// end ; 3 :
1795: GO 2740
1797: LD_INT 3
1799: DOUBLE
1800: EQUAL
1801: IFTRUE 1805
1803: GO 2739
1805: POP
// begin buildings_def = [ [ [ b_warehouse , 16 , 5 , 3 ] , [ b_oil_mine , 9 , 4 , 4 ] , [ b_lab , 16 , 14 , 0 ] , [ b_factory , 26 , 7 , 3 ] , [ b_barracks , 41 , 16 , 5 ] , [ b_bunker , 24 , 21 , 0 ] , [ b_bunker , 40 , 24 , 5 ] , [ b_ext_gun , 26 , 3 , 3 ] , [ b_ext_track , 23 , 4 , 2 ] , [ b_oil_power , 10 , 9 , 1 ] , [ b_siberite_power , 32 , 3 , 1 ] , [ b_siberite_mine , 37 , 24 , 5 ] ] , [ [ b_warehouse , 89 , 5 , 3 ] , [ b_oil_mine , 97 , 3 , 4 ] , [ b_lab , 100 , 10 , 4 ] , [ b_factory , 88 , 17 , 2 ] , [ b_barracks , 87 , 25 , 2 ] , [ b_bunker , 100 , 31 , 5 ] , [ b_bunker , 72 , 13 , 0 ] , [ b_ext_gun , 84 , 13 , 2 ] , [ b_ext_track , 88 , 14 , 3 ] , [ b_oil_power , 94 , 4 , 1 ] , [ b_siberite_power , 66 , 3 , 1 ] , [ b_siberite_mine , 71 , 4 , 2 ] ] , [ [ b_warehouse , 56 , 91 , 0 ] , [ b_oil_mine , 51 , 88 , 0 ] , [ b_lab , 61 , 84 , 4 ] , [ b_factory , 46 , 80 , 0 ] , [ b_barracks , 50 , 64 , 3 ] , [ b_bunker , 42 , 57 , 1 ] , [ b_bunker , 60 , 72 , 3 ] , [ b_ext_gun , 46 , 84 , 0 ] , [ b_ext_track , 43 , 80 , 1 ] , [ b_oil_power , 61 , 90 , 3 ] , [ b_siberite_power , 38 , 72 , 3 ] , [ b_siberite_mine , 35 , 59 , 1 ] ] , [ [ b_warehouse , 151 , 94 , 0 ] , [ b_oil_mine , 160 , 87 , 3 ] , [ b_lab , 159 , 94 , 5 ] , [ b_factory , 146 , 80 , 3 ] , [ b_barracks , 129 , 89 , 1 ] , [ b_bunker , 133 , 63 , 3 ] , [ b_bunker , 141 , 62 , 3 ] , [ b_ext_gun , 143 , 77 , 2 ] , [ b_ext_track , 142 , 80 , 1 ] , [ b_oil_power , 146 , 97 , 3 ] , [ b_siberite_power , 155 , 80 , 3 ] , [ b_siberite_mine , 135 , 83 , 4 ] ] ] ;
1806: LD_ADDR_EXP 32
1810: PUSH
1811: LD_INT 1
1813: PUSH
1814: LD_INT 16
1816: PUSH
1817: LD_INT 5
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 29
1831: PUSH
1832: LD_INT 9
1834: PUSH
1835: LD_INT 4
1837: PUSH
1838: LD_INT 4
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: PUSH
1847: LD_INT 6
1849: PUSH
1850: LD_INT 16
1852: PUSH
1853: LD_INT 14
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 3
1867: PUSH
1868: LD_INT 26
1870: PUSH
1871: LD_INT 7
1873: PUSH
1874: LD_INT 3
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: LD_INT 41
1888: PUSH
1889: LD_INT 16
1891: PUSH
1892: LD_INT 5
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 32
1903: PUSH
1904: LD_INT 24
1906: PUSH
1907: LD_INT 21
1909: PUSH
1910: LD_INT 0
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 32
1921: PUSH
1922: LD_INT 40
1924: PUSH
1925: LD_INT 24
1927: PUSH
1928: LD_INT 5
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 17
1939: PUSH
1940: LD_INT 26
1942: PUSH
1943: LD_INT 3
1945: PUSH
1946: LD_INT 3
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 16
1957: PUSH
1958: LD_INT 23
1960: PUSH
1961: LD_INT 4
1963: PUSH
1964: LD_INT 2
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 26
1975: PUSH
1976: LD_INT 10
1978: PUSH
1979: LD_INT 9
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PUSH
1991: LD_INT 28
1993: PUSH
1994: LD_INT 32
1996: PUSH
1997: LD_INT 3
1999: PUSH
2000: LD_INT 1
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 30
2011: PUSH
2012: LD_INT 37
2014: PUSH
2015: LD_INT 24
2017: PUSH
2018: LD_INT 5
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 1
2043: PUSH
2044: LD_INT 89
2046: PUSH
2047: LD_INT 5
2049: PUSH
2050: LD_INT 3
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 29
2061: PUSH
2062: LD_INT 97
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: LD_INT 4
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 6
2079: PUSH
2080: LD_INT 100
2082: PUSH
2083: LD_INT 10
2085: PUSH
2086: LD_INT 4
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 3
2097: PUSH
2098: LD_INT 88
2100: PUSH
2101: LD_INT 17
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 5
2115: PUSH
2116: LD_INT 87
2118: PUSH
2119: LD_INT 25
2121: PUSH
2122: LD_INT 2
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 32
2133: PUSH
2134: LD_INT 100
2136: PUSH
2137: LD_INT 31
2139: PUSH
2140: LD_INT 5
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 32
2151: PUSH
2152: LD_INT 72
2154: PUSH
2155: LD_INT 13
2157: PUSH
2158: LD_INT 0
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 17
2169: PUSH
2170: LD_INT 84
2172: PUSH
2173: LD_INT 13
2175: PUSH
2176: LD_INT 2
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 16
2187: PUSH
2188: LD_INT 88
2190: PUSH
2191: LD_INT 14
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 26
2205: PUSH
2206: LD_INT 94
2208: PUSH
2209: LD_INT 4
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PUSH
2221: LD_INT 28
2223: PUSH
2224: LD_INT 66
2226: PUSH
2227: LD_INT 3
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 30
2241: PUSH
2242: LD_INT 71
2244: PUSH
2245: LD_INT 4
2247: PUSH
2248: LD_INT 2
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: LD_INT 56
2276: PUSH
2277: LD_INT 91
2279: PUSH
2280: LD_INT 0
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: LD_INT 29
2291: PUSH
2292: LD_INT 51
2294: PUSH
2295: LD_INT 88
2297: PUSH
2298: LD_INT 0
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: PUSH
2307: LD_INT 6
2309: PUSH
2310: LD_INT 61
2312: PUSH
2313: LD_INT 84
2315: PUSH
2316: LD_INT 4
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 3
2327: PUSH
2328: LD_INT 46
2330: PUSH
2331: LD_INT 80
2333: PUSH
2334: LD_INT 0
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 5
2345: PUSH
2346: LD_INT 50
2348: PUSH
2349: LD_INT 64
2351: PUSH
2352: LD_INT 3
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 32
2363: PUSH
2364: LD_INT 42
2366: PUSH
2367: LD_INT 57
2369: PUSH
2370: LD_INT 1
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 32
2381: PUSH
2382: LD_INT 60
2384: PUSH
2385: LD_INT 72
2387: PUSH
2388: LD_INT 3
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 17
2399: PUSH
2400: LD_INT 46
2402: PUSH
2403: LD_INT 84
2405: PUSH
2406: LD_INT 0
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 16
2417: PUSH
2418: LD_INT 43
2420: PUSH
2421: LD_INT 80
2423: PUSH
2424: LD_INT 1
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 26
2435: PUSH
2436: LD_INT 61
2438: PUSH
2439: LD_INT 90
2441: PUSH
2442: LD_INT 3
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 28
2453: PUSH
2454: LD_INT 38
2456: PUSH
2457: LD_INT 72
2459: PUSH
2460: LD_INT 3
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 30
2471: PUSH
2472: LD_INT 35
2474: PUSH
2475: LD_INT 59
2477: PUSH
2478: LD_INT 1
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 1
2503: PUSH
2504: LD_INT 151
2506: PUSH
2507: LD_INT 94
2509: PUSH
2510: LD_INT 0
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 29
2521: PUSH
2522: LD_INT 160
2524: PUSH
2525: LD_INT 87
2527: PUSH
2528: LD_INT 3
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: PUSH
2537: LD_INT 6
2539: PUSH
2540: LD_INT 159
2542: PUSH
2543: LD_INT 94
2545: PUSH
2546: LD_INT 5
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: PUSH
2555: LD_INT 3
2557: PUSH
2558: LD_INT 146
2560: PUSH
2561: LD_INT 80
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: PUSH
2573: LD_INT 5
2575: PUSH
2576: LD_INT 129
2578: PUSH
2579: LD_INT 89
2581: PUSH
2582: LD_INT 1
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 32
2593: PUSH
2594: LD_INT 133
2596: PUSH
2597: LD_INT 63
2599: PUSH
2600: LD_INT 3
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_INT 32
2611: PUSH
2612: LD_INT 141
2614: PUSH
2615: LD_INT 62
2617: PUSH
2618: LD_INT 3
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 17
2629: PUSH
2630: LD_INT 143
2632: PUSH
2633: LD_INT 77
2635: PUSH
2636: LD_INT 2
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: PUSH
2645: LD_INT 16
2647: PUSH
2648: LD_INT 142
2650: PUSH
2651: LD_INT 80
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_INT 26
2665: PUSH
2666: LD_INT 146
2668: PUSH
2669: LD_INT 97
2671: PUSH
2672: LD_INT 3
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 28
2683: PUSH
2684: LD_INT 155
2686: PUSH
2687: LD_INT 80
2689: PUSH
2690: LD_INT 3
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 30
2701: PUSH
2702: LD_INT 135
2704: PUSH
2705: LD_INT 83
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: ST_TO_ADDR
// end ; end ;
2737: GO 2740
2739: POP
// end ;
2740: LD_VAR 0 1
2744: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2745: LD_INT 0
2747: PPUSH
2748: PPUSH
2749: PPUSH
// Team_Game := 0 ;
2750: LD_ADDR_EXP 31
2754: PUSH
2755: LD_INT 0
2757: ST_TO_ADDR
// for i = 1 to 8 do
2758: LD_ADDR_VAR 0 2
2762: PUSH
2763: DOUBLE
2764: LD_INT 1
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 8
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2798
// Team_Game := Team_Game + Side_Teams [ i ] ;
2774: LD_ADDR_EXP 31
2778: PUSH
2779: LD_EXP 31
2783: PUSH
2784: LD_EXP 27
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: PLUS
2795: ST_TO_ADDR
2796: GO 2771
2798: POP
2799: POP
// if not Team_Game then
2800: LD_EXP 31
2804: NOT
2805: IFFALSE 2817
// Team_Game := false else
2807: LD_ADDR_EXP 31
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
2815: GO 2825
// Team_Game := true ;
2817: LD_ADDR_EXP 31
2821: PUSH
2822: LD_INT 1
2824: ST_TO_ADDR
// if not Team_Game then
2825: LD_EXP 31
2829: NOT
2830: IFFALSE 2928
// begin for i = 1 to 8 do
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: DOUBLE
2838: LD_INT 1
2840: DEC
2841: ST_TO_ADDR
2842: LD_INT 8
2844: PUSH
2845: FOR_TO
2846: IFFALSE 2924
// for j = 1 to 8 do
2848: LD_ADDR_VAR 0 3
2852: PUSH
2853: DOUBLE
2854: LD_INT 1
2856: DEC
2857: ST_TO_ADDR
2858: LD_INT 8
2860: PUSH
2861: FOR_TO
2862: IFFALSE 2920
// if i <> j then
2864: LD_VAR 0 2
2868: PUSH
2869: LD_VAR 0 3
2873: NONEQUAL
2874: IFFALSE 2898
// SetAttitude ( i , j , att_neutral , true ) else
2876: LD_VAR 0 2
2880: PPUSH
2881: LD_VAR 0 3
2885: PPUSH
2886: LD_INT 0
2888: PPUSH
2889: LD_INT 1
2891: PPUSH
2892: CALL_OW 80
2896: GO 2918
// SetAttitude ( i , j , att_friend , true ) ;
2898: LD_VAR 0 2
2902: PPUSH
2903: LD_VAR 0 3
2907: PPUSH
2908: LD_INT 1
2910: PPUSH
2911: LD_INT 1
2913: PPUSH
2914: CALL_OW 80
2918: GO 2861
2920: POP
2921: POP
2922: GO 2845
2924: POP
2925: POP
// end else
2926: GO 3103
// begin if def_shared_vision then
2928: LD_EXP 7
2932: IFFALSE 2997
// begin for i in Teams do
2934: LD_ADDR_VAR 0 2
2938: PUSH
2939: LD_EXP 28
2943: PUSH
2944: FOR_IN
2945: IFFALSE 2995
// for j = 2 to i do
2947: LD_ADDR_VAR 0 3
2951: PUSH
2952: DOUBLE
2953: LD_INT 2
2955: DEC
2956: ST_TO_ADDR
2957: LD_VAR 0 2
2961: PUSH
2962: FOR_TO
2963: IFFALSE 2991
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2965: LD_VAR 0 2
2969: PUSH
2970: LD_VAR 0 3
2974: ARRAY
2975: PPUSH
2976: LD_VAR 0 2
2980: PUSH
2981: LD_INT 1
2983: ARRAY
2984: PPUSH
2985: CALL_OW 343
2989: GO 2962
2991: POP
2992: POP
2993: GO 2944
2995: POP
2996: POP
// end ; for i = 1 to 8 do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_INT 8
3009: PUSH
3010: FOR_TO
3011: IFFALSE 3101
// for j = 1 to 8 do
3013: LD_ADDR_VAR 0 3
3017: PUSH
3018: DOUBLE
3019: LD_INT 1
3021: DEC
3022: ST_TO_ADDR
3023: LD_INT 8
3025: PUSH
3026: FOR_TO
3027: IFFALSE 3097
// if Side_Teams [ i ] = Side_Teams [ j ] then
3029: LD_EXP 27
3033: PUSH
3034: LD_VAR 0 2
3038: ARRAY
3039: PUSH
3040: LD_EXP 27
3044: PUSH
3045: LD_VAR 0 3
3049: ARRAY
3050: EQUAL
3051: IFFALSE 3075
// SetAttitude ( i , j , att_friend , true ) else
3053: LD_VAR 0 2
3057: PPUSH
3058: LD_VAR 0 3
3062: PPUSH
3063: LD_INT 1
3065: PPUSH
3066: LD_INT 1
3068: PPUSH
3069: CALL_OW 80
3073: GO 3095
// SetAttitude ( i , j , att_enemy , true ) ;
3075: LD_VAR 0 2
3079: PPUSH
3080: LD_VAR 0 3
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: LD_INT 1
3090: PPUSH
3091: CALL_OW 80
3095: GO 3026
3097: POP
3098: POP
3099: GO 3010
3101: POP
3102: POP
// end ; end ;
3103: LD_VAR 0 1
3107: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
3108: LD_INT 0
3110: PPUSH
3111: PPUSH
3112: PPUSH
3113: PPUSH
// result := [ ] ;
3114: LD_ADDR_VAR 0 8
3118: PUSH
3119: EMPTY
3120: ST_TO_ADDR
// for i := 1 to count do
3121: LD_ADDR_VAR 0 9
3125: PUSH
3126: DOUBLE
3127: LD_INT 1
3129: DEC
3130: ST_TO_ADDR
3131: LD_VAR 0 2
3135: PUSH
3136: FOR_TO
3137: IFFALSE 3531
// begin uc_direction := Rand ( 0 , 5 ) ;
3139: LD_ADDR_OWVAR 24
3143: PUSH
3144: LD_INT 0
3146: PPUSH
3147: LD_INT 5
3149: PPUSH
3150: CALL_OW 12
3154: ST_TO_ADDR
// if commander then
3155: LD_FROM_VAR 0 7
3159: IFFALSE 3268
// begin hc_name := mp_sides_players_names [ side ] ;
3161: LD_ADDR_OWVAR 26
3165: PUSH
3166: LD_OWVAR 19
3170: PUSH
3171: LD_VAR 0 1
3175: ARRAY
3176: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
3177: LD_INT 1
3179: PPUSH
3180: LD_INT 2
3182: PPUSH
3183: CALL_OW 12
3187: PPUSH
3188: LD_VAR 0 3
3192: PPUSH
3193: LD_EXP 18
3197: PUSH
3198: LD_INT 2
3200: PLUS
3201: PPUSH
3202: CALL_OW 380
// hc_importance := 105 ;
3206: LD_ADDR_OWVAR 32
3210: PUSH
3211: LD_INT 105
3213: ST_TO_ADDR
// commander := false ;
3214: LD_VAR 0 7
3218: PUSH
3219: LD_INT 0
3221: ST_TO_ADDR
// if Multiplayer then
3222: LD_OWVAR 4
3226: IFFALSE 3266
// begin hc_gallery := MULTIAVATARS ;
3228: LD_ADDR_OWVAR 33
3232: PUSH
3233: LD_STRING MULTIAVATARS
3235: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
3236: LD_ADDR_OWVAR 34
3240: PUSH
3241: LD_VAR 0 1
3245: PPUSH
3246: CALL_OW 525
3250: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
3251: LD_ADDR_OWVAR 27
3255: PUSH
3256: LD_VAR 0 1
3260: PPUSH
3261: CALL_OW 526
3265: ST_TO_ADDR
// end ; end else
3266: GO 3331
// begin hc_name :=  ;
3268: LD_ADDR_OWVAR 26
3272: PUSH
3273: LD_STRING 
3275: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
3276: LD_INT 1
3278: PPUSH
3279: LD_INT 2
3281: PPUSH
3282: CALL_OW 12
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: LD_EXP 18
3296: PPUSH
3297: CALL_OW 380
// hc_importance := 0 ;
3301: LD_ADDR_OWVAR 32
3305: PUSH
3306: LD_INT 0
3308: ST_TO_ADDR
// if Multiplayer then
3309: LD_OWVAR 4
3313: IFFALSE 3331
// begin hc_gallery :=  ;
3315: LD_ADDR_OWVAR 33
3319: PUSH
3320: LD_STRING 
3322: ST_TO_ADDR
// hc_face_number := 0 ;
3323: LD_ADDR_OWVAR 34
3327: PUSH
3328: LD_INT 0
3330: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3331: LD_ADDR_VAR 0 11
3335: PUSH
3336: CALL_OW 44
3340: ST_TO_ADDR
// if global_defined then
3341: LD_LOC 2
3345: IFFALSE 3483
// begin j := i ;
3347: LD_ADDR_VAR 0 10
3351: PUSH
3352: LD_VAR 0 9
3356: ST_TO_ADDR
// if cl = class_soldier then
3357: LD_VAR 0 3
3361: PUSH
3362: LD_INT 1
3364: EQUAL
3365: IFFALSE 3383
// j := i + soldiers_created ;
3367: LD_ADDR_VAR 0 10
3371: PUSH
3372: LD_VAR 0 9
3376: PUSH
3377: LD_LOC 3
3381: PLUS
3382: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3383: LD_LOC 1
3387: PUSH
3388: LD_VAR 0 3
3392: ARRAY
3393: PUSH
3394: LD_VAR 0 10
3398: ARRAY
3399: PPUSH
3400: LD_VAR 0 11
3404: PPUSH
3405: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3409: LD_VAR 0 11
3413: PPUSH
3414: LD_INT 2
3416: PPUSH
3417: LD_LOC 1
3421: PUSH
3422: LD_VAR 0 3
3426: ARRAY
3427: PUSH
3428: LD_VAR 0 10
3432: ARRAY
3433: PPUSH
3434: LD_INT 2
3436: PPUSH
3437: CALL_OW 260
3441: PPUSH
3442: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3446: LD_VAR 0 11
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_LOC 1
3458: PUSH
3459: LD_VAR 0 3
3463: ARRAY
3464: PUSH
3465: LD_VAR 0 10
3469: ARRAY
3470: PPUSH
3471: LD_INT 1
3473: PPUSH
3474: CALL_OW 260
3478: PPUSH
3479: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
3483: LD_VAR 0 11
3487: PPUSH
3488: LD_VAR 0 4
3492: PPUSH
3493: LD_VAR 0 5
3497: PPUSH
3498: LD_VAR 0 6
3502: PPUSH
3503: LD_INT 0
3505: PPUSH
3506: CALL_OW 50
// result := result ^ [ un ] ;
3510: LD_ADDR_VAR 0 8
3514: PUSH
3515: LD_VAR 0 8
3519: PUSH
3520: LD_VAR 0 11
3524: PUSH
3525: EMPTY
3526: LIST
3527: ADD
3528: ST_TO_ADDR
// end ;
3529: GO 3136
3531: POP
3532: POP
// if not global_defined then
3533: LD_LOC 2
3537: NOT
3538: IFFALSE 3600
// if cl = class_soldier and global_units then
3540: LD_VAR 0 3
3544: PUSH
3545: LD_INT 1
3547: EQUAL
3548: PUSH
3549: LD_LOC 1
3553: AND
3554: IFFALSE 3581
// global_units := [ global_units [ 1 ] ^ result ] else
3556: LD_ADDR_LOC 1
3560: PUSH
3561: LD_LOC 1
3565: PUSH
3566: LD_INT 1
3568: ARRAY
3569: PUSH
3570: LD_VAR 0 8
3574: ADD
3575: PUSH
3576: EMPTY
3577: LIST
3578: ST_TO_ADDR
3579: GO 3600
// global_units := global_units ^ [ result ] end ;
3581: LD_ADDR_LOC 1
3585: PUSH
3586: LD_LOC 1
3590: PUSH
3591: LD_VAR 0 8
3595: PUSH
3596: EMPTY
3597: LIST
3598: ADD
3599: ST_TO_ADDR
3600: LD_VAR 0 8
3604: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3605: LD_INT 0
3607: PPUSH
3608: PPUSH
3609: PPUSH
3610: PPUSH
3611: PPUSH
3612: PPUSH
3613: PPUSH
3614: PPUSH
3615: PPUSH
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
// pos := Side_Positions [ side ] ;
3620: LD_ADDR_VAR 0 3
3624: PUSH
3625: LD_EXP 29
3629: PUSH
3630: LD_VAR 0 1
3634: ARRAY
3635: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3636: LD_ADDR_OWVAR 21
3640: PUSH
3641: LD_EXP 30
3645: PUSH
3646: LD_VAR 0 1
3650: ARRAY
3651: ST_TO_ADDR
// uc_side := side ;
3652: LD_ADDR_OWVAR 20
3656: PUSH
3657: LD_VAR 0 1
3661: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
3662: LD_ADDR_OWVAR 44
3666: PUSH
3667: LD_INT 9
3669: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3670: LD_ADDR_OWVAR 45
3674: PUSH
3675: LD_INT 9
3677: ST_TO_ADDR
// for i in buildings_def [ pos ] do
3678: LD_ADDR_VAR 0 6
3682: PUSH
3683: LD_EXP 32
3687: PUSH
3688: LD_VAR 0 3
3692: ARRAY
3693: PUSH
3694: FOR_IN
3695: IFFALSE 3792
// begin bc_type = i [ 1 ] ;
3697: LD_ADDR_OWVAR 42
3701: PUSH
3702: LD_VAR 0 6
3706: PUSH
3707: LD_INT 1
3709: ARRAY
3710: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3711: LD_VAR 0 6
3715: PUSH
3716: LD_INT 2
3718: ARRAY
3719: PPUSH
3720: LD_VAR 0 6
3724: PUSH
3725: LD_INT 3
3727: ARRAY
3728: PPUSH
3729: LD_VAR 0 6
3733: PUSH
3734: LD_INT 4
3736: ARRAY
3737: PPUSH
3738: CALL_OW 47
// x := buildings_def [ pos ] [ 1 ] [ 2 ] ;
3742: LD_ADDR_VAR 0 4
3746: PUSH
3747: LD_EXP 32
3751: PUSH
3752: LD_VAR 0 3
3756: ARRAY
3757: PUSH
3758: LD_INT 1
3760: ARRAY
3761: PUSH
3762: LD_INT 2
3764: ARRAY
3765: ST_TO_ADDR
// y := buildings_def [ pos ] [ 1 ] [ 2 ] ;
3766: LD_ADDR_VAR 0 5
3770: PUSH
3771: LD_EXP 32
3775: PUSH
3776: LD_VAR 0 3
3780: ARRAY
3781: PUSH
3782: LD_INT 1
3784: ARRAY
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: ST_TO_ADDR
// end ;
3790: GO 3694
3792: POP
3793: POP
// if is_depot then
3794: LD_EXP 16
3798: IFFALSE 3948
// begin dep = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3800: LD_ADDR_VAR 0 10
3804: PUSH
3805: LD_INT 22
3807: PUSH
3808: LD_VAR 0 1
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: PUSH
3817: LD_INT 2
3819: PUSH
3820: LD_INT 30
3822: PUSH
3823: LD_INT 0
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 30
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PPUSH
3849: CALL_OW 69
3853: ST_TO_ADDR
// dep = dep [ 1 ] ;
3854: LD_ADDR_VAR 0 10
3858: PUSH
3859: LD_VAR 0 10
3863: PUSH
3864: LD_INT 1
3866: ARRAY
3867: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3868: LD_VAR 0 10
3872: PPUSH
3873: CALL_OW 274
3877: PPUSH
3878: LD_INT 1
3880: PPUSH
3881: LD_EXP 20
3885: PUSH
3886: LD_INT 1
3888: ARRAY
3889: PPUSH
3890: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3894: LD_VAR 0 10
3898: PPUSH
3899: CALL_OW 274
3903: PPUSH
3904: LD_INT 2
3906: PPUSH
3907: LD_EXP 20
3911: PUSH
3912: LD_INT 2
3914: ARRAY
3915: PPUSH
3916: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3920: LD_VAR 0 10
3924: PPUSH
3925: CALL_OW 274
3929: PPUSH
3930: LD_INT 3
3932: PPUSH
3933: LD_EXP 20
3937: PUSH
3938: LD_INT 3
3940: ARRAY
3941: PPUSH
3942: CALL_OW 277
// end else
3946: GO 4092
// begin for i := 1 to 3 do
3948: LD_ADDR_VAR 0 6
3952: PUSH
3953: DOUBLE
3954: LD_INT 1
3956: DEC
3957: ST_TO_ADDR
3958: LD_INT 3
3960: PUSH
3961: FOR_TO
3962: IFFALSE 4090
// begin r := starting_resources [ i ] ;
3964: LD_ADDR_VAR 0 7
3968: PUSH
3969: LD_EXP 20
3973: PUSH
3974: LD_VAR 0 6
3978: ARRAY
3979: ST_TO_ADDR
// while r >= 10 do
3980: LD_VAR 0 7
3984: PUSH
3985: LD_INT 10
3987: GREATEREQUAL
3988: IFFALSE 4088
// if r > 50 then
3990: LD_VAR 0 7
3994: PUSH
3995: LD_INT 50
3997: GREATER
3998: IFFALSE 4044
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4000: LD_VAR 0 6
4004: PPUSH
4005: LD_INT 5
4007: PPUSH
4008: LD_VAR 0 4
4012: PPUSH
4013: LD_VAR 0 5
4017: PPUSH
4018: LD_INT 4
4020: PPUSH
4021: LD_INT 0
4023: PPUSH
4024: CALL_OW 60
// r := r - 50 ;
4028: LD_ADDR_VAR 0 7
4032: PUSH
4033: LD_VAR 0 7
4037: PUSH
4038: LD_INT 50
4040: MINUS
4041: ST_TO_ADDR
// end else
4042: GO 4086
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4044: LD_VAR 0 6
4048: PPUSH
4049: LD_VAR 0 7
4053: PUSH
4054: LD_INT 10
4056: DIV
4057: PPUSH
4058: LD_VAR 0 4
4062: PPUSH
4063: LD_VAR 0 5
4067: PPUSH
4068: LD_INT 4
4070: PPUSH
4071: LD_INT 0
4073: PPUSH
4074: CALL_OW 60
// r := 0 ;
4078: LD_ADDR_VAR 0 7
4082: PUSH
4083: LD_INT 0
4085: ST_TO_ADDR
// end ;
4086: GO 3980
// end ;
4088: GO 3961
4090: POP
4091: POP
// end ; x := start_def [ pos ] [ 1 ] ;
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_EXP 33
4101: PUSH
4102: LD_VAR 0 3
4106: ARRAY
4107: PUSH
4108: LD_INT 1
4110: ARRAY
4111: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4112: LD_ADDR_VAR 0 5
4116: PUSH
4117: LD_EXP 33
4121: PUSH
4122: LD_VAR 0 3
4126: ARRAY
4127: PUSH
4128: LD_INT 2
4130: ARRAY
4131: ST_TO_ADDR
// if def_morale_flags then
4132: LD_EXP 8
4136: IFFALSE 4215
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4138: LD_ADDR_EXP 23
4142: PUSH
4143: LD_EXP 23
4147: PUSH
4148: LD_VAR 0 1
4152: PPUSH
4153: LD_VAR 0 4
4157: PPUSH
4158: LD_VAR 0 5
4162: PPUSH
4163: LD_INT 1
4165: PUSH
4166: LD_INT 100
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 2
4175: PUSH
4176: LD_INT 50
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 3
4185: PUSH
4186: LD_INT 20
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 20
4195: PUSH
4196: LD_INT 100
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PPUSH
4209: CALL_OW 418
4213: ADD
4214: ST_TO_ADDR
// neng := number_of_people ;
4215: LD_ADDR_VAR 0 11
4219: PUSH
4220: LD_EXP 17
4224: ST_TO_ADDR
// nsol := 2 ;
4225: LD_ADDR_VAR 0 14
4229: PUSH
4230: LD_INT 2
4232: ST_TO_ADDR
// if nsol < neng div 4 then
4233: LD_VAR 0 14
4237: PUSH
4238: LD_VAR 0 11
4242: PUSH
4243: LD_INT 4
4245: DIV
4246: LESS
4247: IFFALSE 4263
// nsol := neng div 4 ;
4249: LD_ADDR_VAR 0 14
4253: PUSH
4254: LD_VAR 0 11
4258: PUSH
4259: LD_INT 4
4261: DIV
4262: ST_TO_ADDR
// neng := neng - nsol ;
4263: LD_ADDR_VAR 0 11
4267: PUSH
4268: LD_VAR 0 11
4272: PUSH
4273: LD_VAR 0 14
4277: MINUS
4278: ST_TO_ADDR
// nsci := neng div 3 ;
4279: LD_ADDR_VAR 0 12
4283: PUSH
4284: LD_VAR 0 11
4288: PUSH
4289: LD_INT 3
4291: DIV
4292: ST_TO_ADDR
// if nsci < 1 then
4293: LD_VAR 0 12
4297: PUSH
4298: LD_INT 1
4300: LESS
4301: IFFALSE 4311
// nsci := 1 ;
4303: LD_ADDR_VAR 0 12
4307: PUSH
4308: LD_INT 1
4310: ST_TO_ADDR
// neng := neng - nsci ;
4311: LD_ADDR_VAR 0 11
4315: PUSH
4316: LD_VAR 0 11
4320: PUSH
4321: LD_VAR 0 12
4325: MINUS
4326: ST_TO_ADDR
// nmech := neng div 2 ;
4327: LD_ADDR_VAR 0 13
4331: PUSH
4332: LD_VAR 0 11
4336: PUSH
4337: LD_INT 2
4339: DIV
4340: ST_TO_ADDR
// neng := neng - nmech ;
4341: LD_ADDR_VAR 0 11
4345: PUSH
4346: LD_VAR 0 11
4350: PUSH
4351: LD_VAR 0 13
4355: MINUS
4356: ST_TO_ADDR
// if neng < 1 then
4357: LD_VAR 0 11
4361: PUSH
4362: LD_INT 1
4364: LESS
4365: IFFALSE 4375
// neng := 1 ;
4367: LD_ADDR_VAR 0 11
4371: PUSH
4372: LD_INT 1
4374: ST_TO_ADDR
// commander := true ;
4375: LD_ADDR_EXP 34
4379: PUSH
4380: LD_INT 1
4382: ST_TO_ADDR
// soldiers_created := 0 ;
4383: LD_ADDR_LOC 3
4387: PUSH
4388: LD_INT 0
4390: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4391: LD_ADDR_VAR 0 4
4395: PUSH
4396: LD_EXP 33
4400: PUSH
4401: LD_VAR 0 3
4405: ARRAY
4406: PUSH
4407: LD_INT 1
4409: ARRAY
4410: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4411: LD_ADDR_VAR 0 5
4415: PUSH
4416: LD_EXP 33
4420: PUSH
4421: LD_VAR 0 3
4425: ARRAY
4426: PUSH
4427: LD_INT 2
4429: ARRAY
4430: ST_TO_ADDR
// prepare_people ( side , nsol , class_soldier , x , y , 5 , commander ) ;
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 14
4440: PPUSH
4441: LD_INT 1
4443: PPUSH
4444: LD_VAR 0 4
4448: PPUSH
4449: LD_VAR 0 5
4453: PPUSH
4454: LD_INT 5
4456: PPUSH
4457: LD_ADDR_EXP 34
4461: PPUSH
4462: CALL 3108 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
4466: LD_VAR 0 1
4470: PPUSH
4471: LD_VAR 0 11
4475: PPUSH
4476: LD_INT 2
4478: PPUSH
4479: LD_VAR 0 4
4483: PPUSH
4484: LD_VAR 0 5
4488: PPUSH
4489: LD_INT 5
4491: PPUSH
4492: LD_ADDR_EXP 34
4496: PPUSH
4497: CALL 3108 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_VAR 0 13
4510: PPUSH
4511: LD_INT 3
4513: PPUSH
4514: LD_VAR 0 4
4518: PPUSH
4519: LD_VAR 0 5
4523: PPUSH
4524: LD_INT 5
4526: PPUSH
4527: LD_ADDR_EXP 34
4531: PPUSH
4532: CALL 3108 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
4536: LD_VAR 0 1
4540: PPUSH
4541: LD_VAR 0 12
4545: PPUSH
4546: LD_INT 4
4548: PPUSH
4549: LD_VAR 0 4
4553: PPUSH
4554: LD_VAR 0 5
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_ADDR_EXP 34
4566: PPUSH
4567: CALL 3108 0 7
// if not global_defined then
4571: LD_LOC 2
4575: NOT
4576: IFFALSE 4586
// global_defined := true ;
4578: LD_ADDR_LOC 2
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4586: LD_EXP 9
4590: PUSH
4591: LD_INT 20
4593: PPUSH
4594: LD_VAR 0 1
4598: PPUSH
4599: CALL_OW 321
4603: PUSH
4604: LD_INT 1
4606: EQUAL
4607: AND
4608: IFFALSE 4625
// SetTech ( tech_SibDet , side , state_researched ) ;
4610: LD_INT 20
4612: PPUSH
4613: LD_VAR 0 1
4617: PPUSH
4618: LD_INT 2
4620: PPUSH
4621: CALL_OW 322
// end ;
4625: LD_VAR 0 2
4629: RET
// function prepare_sides ; var i ; begin
4630: LD_INT 0
4632: PPUSH
4633: PPUSH
// global_units := [ ] ;
4634: LD_ADDR_LOC 1
4638: PUSH
4639: EMPTY
4640: ST_TO_ADDR
// global_defined := false ;
4641: LD_ADDR_LOC 2
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// for i := 1 to 8 do
4649: LD_ADDR_VAR 0 2
4653: PUSH
4654: DOUBLE
4655: LD_INT 1
4657: DEC
4658: ST_TO_ADDR
4659: LD_INT 8
4661: PUSH
4662: FOR_TO
4663: IFFALSE 4940
// if Side_Positions [ i ] then
4665: LD_EXP 29
4669: PUSH
4670: LD_VAR 0 2
4674: ARRAY
4675: IFFALSE 4938
// begin if def_base_level > 1 then
4677: LD_EXP 2
4681: PUSH
4682: LD_INT 1
4684: GREATER
4685: IFFALSE 4803
// case Side_Positions [ i ] of 1 :
4687: LD_EXP 29
4691: PUSH
4692: LD_VAR 0 2
4696: ARRAY
4697: PUSH
4698: LD_INT 1
4700: DOUBLE
4701: EQUAL
4702: IFTRUE 4706
4704: GO 4724
4706: POP
// SetResourceVisibility ( 9 , 4 , i ) ; 2 :
4707: LD_INT 9
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: LD_VAR 0 2
4717: PPUSH
4718: CALL_OW 441
4722: GO 4803
4724: LD_INT 2
4726: DOUBLE
4727: EQUAL
4728: IFTRUE 4732
4730: GO 4750
4732: POP
// SetResourceVisibility ( 97 , 3 , i ) ; 3 :
4733: LD_INT 97
4735: PPUSH
4736: LD_INT 3
4738: PPUSH
4739: LD_VAR 0 2
4743: PPUSH
4744: CALL_OW 441
4748: GO 4803
4750: LD_INT 3
4752: DOUBLE
4753: EQUAL
4754: IFTRUE 4758
4756: GO 4776
4758: POP
// SetResourceVisibility ( 51 , 88 , i ) ; 4 :
4759: LD_INT 51
4761: PPUSH
4762: LD_INT 88
4764: PPUSH
4765: LD_VAR 0 2
4769: PPUSH
4770: CALL_OW 441
4774: GO 4803
4776: LD_INT 4
4778: DOUBLE
4779: EQUAL
4780: IFTRUE 4784
4782: GO 4802
4784: POP
// SetResourceVisibility ( 160 , 87 , i ) ; end ;
4785: LD_INT 160
4787: PPUSH
4788: LD_INT 87
4790: PPUSH
4791: LD_VAR 0 2
4795: PPUSH
4796: CALL_OW 441
4800: GO 4803
4802: POP
// if def_base_level > 2 then
4803: LD_EXP 2
4807: PUSH
4808: LD_INT 2
4810: GREATER
4811: IFFALSE 4929
// case Side_Positions [ i ] of 1 :
4813: LD_EXP 29
4817: PUSH
4818: LD_VAR 0 2
4822: ARRAY
4823: PUSH
4824: LD_INT 1
4826: DOUBLE
4827: EQUAL
4828: IFTRUE 4832
4830: GO 4850
4832: POP
// SetResourceVisibility ( 37 , 24 , i ) ; 2 :
4833: LD_INT 37
4835: PPUSH
4836: LD_INT 24
4838: PPUSH
4839: LD_VAR 0 2
4843: PPUSH
4844: CALL_OW 441
4848: GO 4929
4850: LD_INT 2
4852: DOUBLE
4853: EQUAL
4854: IFTRUE 4858
4856: GO 4876
4858: POP
// SetResourceVisibility ( 71 , 4 , i ) ; 3 :
4859: LD_INT 71
4861: PPUSH
4862: LD_INT 4
4864: PPUSH
4865: LD_VAR 0 2
4869: PPUSH
4870: CALL_OW 441
4874: GO 4929
4876: LD_INT 3
4878: DOUBLE
4879: EQUAL
4880: IFTRUE 4884
4882: GO 4902
4884: POP
// SetResourceVisibility ( 35 , 59 , i ) ; 4 :
4885: LD_INT 35
4887: PPUSH
4888: LD_INT 59
4890: PPUSH
4891: LD_VAR 0 2
4895: PPUSH
4896: CALL_OW 441
4900: GO 4929
4902: LD_INT 4
4904: DOUBLE
4905: EQUAL
4906: IFTRUE 4910
4908: GO 4928
4910: POP
// SetResourceVisibility ( 135 , 83 , i ) ; end ;
4911: LD_INT 135
4913: PPUSH
4914: LD_INT 83
4916: PPUSH
4917: LD_VAR 0 2
4921: PPUSH
4922: CALL_OW 441
4926: GO 4929
4928: POP
// prepare_side ( i ) ;
4929: LD_VAR 0 2
4933: PPUSH
4934: CALL 3605 0 1
// end ;
4938: GO 4662
4940: POP
4941: POP
// end ;
4942: LD_VAR 0 1
4946: RET
// function second_oil ; var i ; begin
4947: LD_INT 0
4949: PPUSH
4950: PPUSH
// if def_second_oil then
4951: LD_EXP 10
4955: IFFALSE 5079
// for i := 1 to 4 do
4957: LD_ADDR_VAR 0 2
4961: PUSH
4962: DOUBLE
4963: LD_INT 1
4965: DEC
4966: ST_TO_ADDR
4967: LD_INT 4
4969: PUSH
4970: FOR_TO
4971: IFFALSE 5077
// case i of 1 :
4973: LD_VAR 0 2
4977: PUSH
4978: LD_INT 1
4980: DOUBLE
4981: EQUAL
4982: IFTRUE 4986
4984: GO 5002
4986: POP
// CreateDepositXY ( 37 , 9 , mat_oil ) ; 2 :
4987: LD_INT 37
4989: PPUSH
4990: LD_INT 9
4992: PPUSH
4993: LD_INT 2
4995: PPUSH
4996: CALL_OW 62
5000: GO 5075
5002: LD_INT 2
5004: DOUBLE
5005: EQUAL
5006: IFTRUE 5010
5008: GO 5026
5010: POP
// CreateDepositXY ( 104 , 36 , mat_oil ) ; 3 :
5011: LD_INT 104
5013: PPUSH
5014: LD_INT 36
5016: PPUSH
5017: LD_INT 2
5019: PPUSH
5020: CALL_OW 62
5024: GO 5075
5026: LD_INT 3
5028: DOUBLE
5029: EQUAL
5030: IFTRUE 5034
5032: GO 5050
5034: POP
// CreateDepositXY ( 70 , 75 , mat_oil ) ; 4 :
5035: LD_INT 70
5037: PPUSH
5038: LD_INT 75
5040: PPUSH
5041: LD_INT 2
5043: PPUSH
5044: CALL_OW 62
5048: GO 5075
5050: LD_INT 4
5052: DOUBLE
5053: EQUAL
5054: IFTRUE 5058
5056: GO 5074
5058: POP
// CreateDepositXY ( 145 , 67 , mat_oil ) ; end ;
5059: LD_INT 145
5061: PPUSH
5062: LD_INT 67
5064: PPUSH
5065: LD_INT 2
5067: PPUSH
5068: CALL_OW 62
5072: GO 5075
5074: POP
5075: GO 4970
5077: POP
5078: POP
// end ;
5079: LD_VAR 0 1
5083: RET
// starting begin disable ( 98 ) ;
5084: LD_INT 98
5086: DISABLE_MARKED
// disable ( 99 ) ;
5087: LD_INT 99
5089: DISABLE_MARKED
// disable ( 400 ) ;
5090: LD_INT 400
5092: DISABLE_MARKED
// disable ( 401 ) ;
5093: LD_INT 401
5095: DISABLE_MARKED
// mp_selectmsg := true ;
5096: LD_ADDR_OWVAR 13
5100: PUSH
5101: LD_INT 1
5103: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5104: CALL 0 0 0
// prepare_map_coordinates ;
5108: CALL 964 0 0
// set_shared_visions_and_alliances ;
5112: CALL 2745 0 0
// prepare_sides ;
5116: CALL 4630 0 0
// Init_Win_Condition ;
5120: CALL 12362 0 0
// InitLimits ;
5124: CALL 13602 0 0
// ShowTimer ;
5128: CALL 14539 0 0
// second_oil ;
5132: CALL 4947 0 0
// init_shipments_and_respawning ;
5136: CALL 5191 0 0
// vygeneruj_lidi_na_ztraceni ;
5140: CALL 6070 0 0
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5144: LD_EXP 33
5148: PUSH
5149: LD_EXP 29
5153: PUSH
5154: LD_OWVAR 2
5158: ARRAY
5159: ARRAY
5160: PUSH
5161: LD_INT 1
5163: ARRAY
5164: PPUSH
5165: LD_EXP 33
5169: PUSH
5170: LD_EXP 29
5174: PUSH
5175: LD_OWVAR 2
5179: ARRAY
5180: ARRAY
5181: PUSH
5182: LD_INT 2
5184: ARRAY
5185: PPUSH
5186: CALL_OW 86
// end ; end_of_file
5190: END
// var shipment , inqueue ; export function init_shipments_and_respawning ; begin
5191: LD_INT 0
5193: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5194: LD_ADDR_LOC 4
5198: PUSH
5199: LD_INT 0
5201: PPUSH
5202: LD_INT 3
5204: PPUSH
5205: CALL_OW 12
5209: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5210: LD_ADDR_LOC 5
5214: PUSH
5215: LD_INT 0
5217: PUSH
5218: LD_INT 0
5220: PUSH
5221: LD_INT 0
5223: PUSH
5224: LD_INT 0
5226: PUSH
5227: LD_INT 0
5229: PUSH
5230: LD_INT 0
5232: PUSH
5233: LD_INT 0
5235: PUSH
5236: LD_INT 0
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: ST_TO_ADDR
// end ;
5249: LD_VAR 0 1
5253: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5254: GO 5256
5256: DISABLE
5257: LD_INT 0
5259: PPUSH
// begin case tick of 1 .. 1 1$0 :
5260: LD_OWVAR 1
5264: PUSH
5265: LD_INT 1
5267: DOUBLE
5268: GREATEREQUAL
5269: IFFALSE 5277
5271: LD_INT 2100
5273: DOUBLE
5274: LESSEQUAL
5275: IFTRUE 5279
5277: GO 5290
5279: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5280: LD_ADDR_VAR 0 1
5284: PUSH
5285: LD_INT 150
5287: ST_TO_ADDR
5288: GO 5473
5290: LD_INT 2100
5292: PUSH
5293: LD_INT 1
5295: PLUS
5296: DOUBLE
5297: GREATEREQUAL
5298: IFFALSE 5306
5300: LD_INT 10500
5302: DOUBLE
5303: LESSEQUAL
5304: IFTRUE 5308
5306: GO 5319
5308: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5309: LD_ADDR_VAR 0 1
5313: PUSH
5314: LD_INT 100
5316: ST_TO_ADDR
5317: GO 5473
5319: LD_INT 10500
5321: PUSH
5322: LD_INT 1
5324: PLUS
5325: DOUBLE
5326: GREATEREQUAL
5327: IFFALSE 5335
5329: LD_INT 21000
5331: DOUBLE
5332: LESSEQUAL
5333: IFTRUE 5337
5335: GO 5348
5337: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5338: LD_ADDR_VAR 0 1
5342: PUSH
5343: LD_INT 90
5345: ST_TO_ADDR
5346: GO 5473
5348: LD_INT 21000
5350: PUSH
5351: LD_INT 1
5353: PLUS
5354: DOUBLE
5355: GREATEREQUAL
5356: IFFALSE 5364
5358: LD_INT 42000
5360: DOUBLE
5361: LESSEQUAL
5362: IFTRUE 5366
5364: GO 5377
5366: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5367: LD_ADDR_VAR 0 1
5371: PUSH
5372: LD_INT 70
5374: ST_TO_ADDR
5375: GO 5473
5377: LD_INT 42000
5379: PUSH
5380: LD_INT 1
5382: PLUS
5383: DOUBLE
5384: GREATEREQUAL
5385: IFFALSE 5393
5387: LD_INT 63000
5389: DOUBLE
5390: LESSEQUAL
5391: IFTRUE 5395
5393: GO 5406
5395: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5396: LD_ADDR_VAR 0 1
5400: PUSH
5401: LD_INT 60
5403: ST_TO_ADDR
5404: GO 5473
5406: LD_INT 63000
5408: PUSH
5409: LD_INT 1
5411: PLUS
5412: DOUBLE
5413: GREATEREQUAL
5414: IFFALSE 5422
5416: LD_INT 105000
5418: DOUBLE
5419: LESSEQUAL
5420: IFTRUE 5424
5422: GO 5435
5424: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5425: LD_ADDR_VAR 0 1
5429: PUSH
5430: LD_INT 35
5432: ST_TO_ADDR
5433: GO 5473
5435: LD_INT 105000
5437: PUSH
5438: LD_INT 1
5440: PLUS
5441: DOUBLE
5442: GREATEREQUAL
5443: IFFALSE 5451
5445: LD_INT 630000
5447: DOUBLE
5448: LESSEQUAL
5449: IFTRUE 5453
5451: GO 5464
5453: POP
// d := 20 ; else
5454: LD_ADDR_VAR 0 1
5458: PUSH
5459: LD_INT 20
5461: ST_TO_ADDR
5462: GO 5473
5464: POP
// d := 0 ; end ;
5465: LD_ADDR_VAR 0 1
5469: PUSH
5470: LD_INT 0
5472: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5473: LD_INT 1
5475: PPUSH
5476: LD_INT 10000
5478: PPUSH
5479: CALL_OW 12
5483: PUSH
5484: LD_VAR 0 1
5488: PUSH
5489: LD_EXP 21
5493: MUL
5494: LESSEQUAL
5495: IFFALSE 5557
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5497: LD_INT 1
5499: PPUSH
5500: LD_INT 140
5502: PPUSH
5503: CALL_OW 12
5507: PPUSH
5508: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5512: LD_ADDR_LOC 4
5516: PUSH
5517: LD_LOC 4
5521: PUSH
5522: LD_INT 1
5524: PLUS
5525: PUSH
5526: LD_INT 4
5528: MOD
5529: ST_TO_ADDR
// CreateCratesArea ( Rand ( 3 , 5 ) , q1 + shipment , true ) ;
5530: LD_INT 3
5532: PPUSH
5533: LD_INT 5
5535: PPUSH
5536: CALL_OW 12
5540: PPUSH
5541: LD_INT 1
5543: PUSH
5544: LD_LOC 4
5548: PLUS
5549: PPUSH
5550: LD_INT 1
5552: PPUSH
5553: CALL_OW 55
// end ; enable ;
5557: ENABLE
// end ; end_of_file
5558: PPOPN 1
5560: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5561: LD_VAR 0 1
5565: PPUSH
5566: CALL_OW 266
5570: PUSH
5571: LD_INT 0
5573: PUSH
5574: LD_INT 1
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: IN
5581: IFFALSE 5606
// SetBName ( b , @ & GetSide ( b ) ) ;
5583: LD_VAR 0 1
5587: PPUSH
5588: LD_STRING @
5590: PUSH
5591: LD_VAR 0 1
5595: PPUSH
5596: CALL_OW 255
5600: STR
5601: PPUSH
5602: CALL_OW 500
// if def_game_rules then
5606: LD_EXP 38
5610: IFFALSE 5647
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
5612: LD_VAR 0 1
5616: PPUSH
5617: LD_VAR 0 1
5621: PPUSH
5622: CALL_OW 266
5626: PPUSH
5627: LD_VAR 0 1
5631: PPUSH
5632: CALL_OW 255
5636: PPUSH
5637: LD_INT 0
5639: PPUSH
5640: LD_INT 1
5642: PPUSH
5643: CALL 14003 0 5
// end ;
5647: PPOPN 2
5649: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5650: LD_VAR 0 1
5654: PPUSH
5655: CALL_OW 266
5659: PUSH
5660: LD_INT 0
5662: PUSH
5663: LD_INT 1
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: IN
5670: IFFALSE 5695
// SetBName ( b , @ & GetSide ( b ) ) ;
5672: LD_VAR 0 1
5676: PPUSH
5677: LD_STRING @
5679: PUSH
5680: LD_VAR 0 1
5684: PPUSH
5685: CALL_OW 255
5689: STR
5690: PPUSH
5691: CALL_OW 500
// if def_game_rules then
5695: LD_EXP 38
5699: IFFALSE 5738
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
5701: LD_VAR 0 1
5705: PPUSH
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 266
5715: PPUSH
5716: LD_VAR 0 1
5720: PPUSH
5721: CALL_OW 255
5725: PPUSH
5726: LD_VAR 0 2
5730: PPUSH
5731: LD_INT 1
5733: PPUSH
5734: CALL 14003 0 5
// end ;
5738: PPOPN 3
5740: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
5741: LD_INT 0
5743: PPUSH
5744: PPUSH
5745: PPUSH
5746: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
5747: LD_VAR 0 1
5751: PPUSH
5752: CALL_OW 255
5756: PUSH
5757: LD_INT 0
5759: EQUAL
5760: PUSH
5761: LD_VAR 0 1
5765: PPUSH
5766: CALL_OW 257
5770: PUSH
5771: LD_INT 12
5773: EQUAL
5774: AND
5775: IFFALSE 5781
// CheckApemenAmount ;
5777: CALL 14756 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
5781: LD_VAR 0 1
5785: PPUSH
5786: CALL_OW 266
5790: PUSH
5791: LD_INT 0
5793: PUSH
5794: LD_INT 1
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: IN
5801: IFFALSE 5883
// begin pos := Side_Positions [ GetSide ( j ) ] ;
5803: LD_ADDR_VAR 0 4
5807: PUSH
5808: LD_EXP 29
5812: PUSH
5813: LD_VAR 0 1
5817: PPUSH
5818: CALL_OW 255
5822: ARRAY
5823: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
5824: LD_ADDR_VAR 0 2
5828: PUSH
5829: LD_EXP 33
5833: PUSH
5834: LD_VAR 0 4
5838: ARRAY
5839: PUSH
5840: LD_INT 1
5842: ARRAY
5843: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
5844: LD_ADDR_VAR 0 3
5848: PUSH
5849: LD_EXP 33
5853: PUSH
5854: LD_VAR 0 4
5858: ARRAY
5859: PUSH
5860: LD_INT 2
5862: ARRAY
5863: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
5864: LD_VAR 0 2
5868: PPUSH
5869: LD_VAR 0 3
5873: PPUSH
5874: CALL_OW 420
5878: PPUSH
5879: CALL_OW 419
// end ; if def_game_rules then
5883: LD_EXP 38
5887: IFFALSE 5986
// if ( GetType ( j ) = 3 ) then
5889: LD_VAR 0 1
5893: PPUSH
5894: CALL_OW 247
5898: PUSH
5899: LD_INT 3
5901: EQUAL
5902: IFFALSE 5942
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
5904: LD_VAR 0 1
5908: PPUSH
5909: LD_VAR 0 1
5913: PPUSH
5914: CALL_OW 266
5918: PPUSH
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 255
5928: PPUSH
5929: LD_INT 0
5931: PPUSH
5932: LD_INT 1
5934: NEG
5935: PPUSH
5936: CALL 14003 0 5
5940: GO 5986
// if ( GetChassis ( j ) = 25 ) then
5942: LD_VAR 0 1
5946: PPUSH
5947: CALL_OW 265
5951: PUSH
5952: LD_INT 25
5954: EQUAL
5955: IFFALSE 5986
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_INT 37
5964: PPUSH
5965: LD_VAR 0 1
5969: PPUSH
5970: CALL_OW 255
5974: PPUSH
5975: LD_INT 0
5977: PPUSH
5978: LD_INT 1
5980: NEG
5981: PPUSH
5982: CALL 14003 0 5
// end ;
5986: PPOPN 5
5988: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
5989: LD_EXP 38
5993: PUSH
5994: LD_VAR 0 1
5998: PPUSH
5999: CALL_OW 265
6003: PUSH
6004: LD_INT 25
6006: EQUAL
6007: AND
6008: IFFALSE 6040
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6010: LD_VAR 0 1
6014: PPUSH
6015: LD_INT 37
6017: PPUSH
6018: LD_VAR 0 1
6022: PPUSH
6023: CALL_OW 255
6027: PPUSH
6028: LD_VAR 0 3
6032: PPUSH
6033: LD_INT 1
6035: PPUSH
6036: CALL 14003 0 5
// end ;
6040: PPOPN 4
6042: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6043: LD_VAR 0 1
6047: PPUSH
6048: LD_VAR 0 2
6052: PPUSH
6053: LD_VAR 0 3
6057: PPUSH
6058: LD_OWVAR 2
6062: PPUSH
6063: CALL 15625 0 4
6067: PPOPN 3
6069: END
// export ZMIZELI_LIDI ; export POINTY ; export function vygeneruj_lidi_na_ztraceni ; var i , j , k ; var pom , pom1 ; var barva ; begin
6070: LD_INT 0
6072: PPUSH
6073: PPUSH
6074: PPUSH
6075: PPUSH
6076: PPUSH
6077: PPUSH
6078: PPUSH
// ZMIZELI_LIDI = [ ] ;
6079: LD_ADDR_EXP 35
6083: PUSH
6084: EMPTY
6085: ST_TO_ADDR
// for j := 1 to 4 do
6086: LD_ADDR_VAR 0 3
6090: PUSH
6091: DOUBLE
6092: LD_INT 1
6094: DEC
6095: ST_TO_ADDR
6096: LD_INT 4
6098: PUSH
6099: FOR_TO
6100: IFFALSE 6263
// begin pom1 = [ ] ;
6102: LD_ADDR_VAR 0 6
6106: PUSH
6107: EMPTY
6108: ST_TO_ADDR
// for k := 1 to 8 do
6109: LD_ADDR_VAR 0 4
6113: PUSH
6114: DOUBLE
6115: LD_INT 1
6117: DEC
6118: ST_TO_ADDR
6119: LD_INT 8
6121: PUSH
6122: FOR_TO
6123: IFFALSE 6157
// if Side_Positions [ k ] = j then
6125: LD_EXP 29
6129: PUSH
6130: LD_VAR 0 4
6134: ARRAY
6135: PUSH
6136: LD_VAR 0 3
6140: EQUAL
6141: IFFALSE 6155
// begin barva = k ;
6143: LD_ADDR_VAR 0 7
6147: PUSH
6148: LD_VAR 0 4
6152: ST_TO_ADDR
// break ;
6153: GO 6157
// end ;
6155: GO 6122
6157: POP
6158: POP
// for i := 1 to 5 do
6159: LD_ADDR_VAR 0 2
6163: PUSH
6164: DOUBLE
6165: LD_INT 1
6167: DEC
6168: ST_TO_ADDR
6169: LD_INT 5
6171: PUSH
6172: FOR_TO
6173: IFFALSE 6240
// begin if Prob ( 10 ) and def_vehicles_too then
6175: LD_INT 10
6177: PPUSH
6178: CALL_OW 13
6182: PUSH
6183: LD_EXP 15
6187: AND
6188: IFFALSE 6207
// pom = vytvor_nove_auto ( barva ) else
6190: LD_ADDR_VAR 0 5
6194: PUSH
6195: LD_VAR 0 7
6199: PPUSH
6200: CALL 7010 0 1
6204: ST_TO_ADDR
6205: GO 6222
// pom = vytvor_noveho_cloveka ( barva ) ;
6207: LD_ADDR_VAR 0 5
6211: PUSH
6212: LD_VAR 0 7
6216: PPUSH
6217: CALL 6289 0 1
6221: ST_TO_ADDR
// pom1 = pom1 ^ pom ;
6222: LD_ADDR_VAR 0 6
6226: PUSH
6227: LD_VAR 0 6
6231: PUSH
6232: LD_VAR 0 5
6236: ADD
6237: ST_TO_ADDR
// end ;
6238: GO 6172
6240: POP
6241: POP
// ZMIZELI_LIDI = ZMIZELI_LIDI ^ [ pom1 ] ;
6242: LD_ADDR_EXP 35
6246: PUSH
6247: LD_EXP 35
6251: PUSH
6252: LD_VAR 0 6
6256: PUSH
6257: EMPTY
6258: LIST
6259: ADD
6260: ST_TO_ADDR
// end ;
6261: GO 6099
6263: POP
6264: POP
// POINTY = [ [ ] , [ ] , [ ] , [ ] ] ;
6265: LD_ADDR_EXP 36
6269: PUSH
6270: EMPTY
6271: PUSH
6272: EMPTY
6273: PUSH
6274: EMPTY
6275: PUSH
6276: EMPTY
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: ST_TO_ADDR
// end ;
6284: LD_VAR 0 1
6288: RET
// function vytvor_noveho_cloveka ( b ) ; var pom , pom1 ; var cla ; var i ; var sidy ; var poc ; var ah ; var pommm ; begin
6289: LD_INT 0
6291: PPUSH
6292: PPUSH
6293: PPUSH
6294: PPUSH
6295: PPUSH
6296: PPUSH
6297: PPUSH
6298: PPUSH
6299: PPUSH
// if def_other_nation then
6300: LD_EXP 14
6304: IFFALSE 6324
// pom = Rand ( 1 , 11 ) else
6306: LD_ADDR_VAR 0 3
6310: PUSH
6311: LD_INT 1
6313: PPUSH
6314: LD_INT 11
6316: PPUSH
6317: CALL_OW 12
6321: ST_TO_ADDR
6322: GO 6520
// begin pommm = Rand ( 1 , 8 ) ;
6324: LD_ADDR_VAR 0 10
6328: PUSH
6329: LD_INT 1
6331: PPUSH
6332: LD_INT 8
6334: PPUSH
6335: CALL_OW 12
6339: ST_TO_ADDR
// case Side_Nations [ b ] of nation_american :
6340: LD_EXP 30
6344: PUSH
6345: LD_VAR 0 1
6349: ARRAY
6350: PUSH
6351: LD_INT 1
6353: DOUBLE
6354: EQUAL
6355: IFTRUE 6359
6357: GO 6407
6359: POP
// pom = [ 1 , 2 , 5 , 6 , 7 , 8 , 9 , 5 ] [ pommm ] ; nation_arabian :
6360: LD_ADDR_VAR 0 3
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: LD_INT 2
6370: PUSH
6371: LD_INT 5
6373: PUSH
6374: LD_INT 6
6376: PUSH
6377: LD_INT 7
6379: PUSH
6380: LD_INT 8
6382: PUSH
6383: LD_INT 9
6385: PUSH
6386: LD_INT 5
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: PUSH
6399: LD_VAR 0 10
6403: ARRAY
6404: ST_TO_ADDR
6405: GO 6520
6407: LD_INT 2
6409: DOUBLE
6410: EQUAL
6411: IFTRUE 6415
6413: GO 6463
6415: POP
// pom = [ 1 , 3 , 4 , 5 , 6 , 7 , 8 , 10 ] [ pommm ] ; nation_russian :
6416: LD_ADDR_VAR 0 3
6420: PUSH
6421: LD_INT 1
6423: PUSH
6424: LD_INT 3
6426: PUSH
6427: LD_INT 4
6429: PUSH
6430: LD_INT 5
6432: PUSH
6433: LD_INT 6
6435: PUSH
6436: LD_INT 7
6438: PUSH
6439: LD_INT 8
6441: PUSH
6442: LD_INT 10
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PUSH
6455: LD_VAR 0 10
6459: ARRAY
6460: ST_TO_ADDR
6461: GO 6520
6463: LD_INT 3
6465: DOUBLE
6466: EQUAL
6467: IFTRUE 6471
6469: GO 6519
6471: POP
// pom = [ 1 , 2 , 3 , 5 , 6 , 7 , 8 , 11 ] [ pommm ] ; end ;
6472: LD_ADDR_VAR 0 3
6476: PUSH
6477: LD_INT 1
6479: PUSH
6480: LD_INT 2
6482: PUSH
6483: LD_INT 3
6485: PUSH
6486: LD_INT 5
6488: PUSH
6489: LD_INT 6
6491: PUSH
6492: LD_INT 7
6494: PUSH
6495: LD_INT 8
6497: PUSH
6498: LD_INT 11
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: PUSH
6511: LD_VAR 0 10
6515: ARRAY
6516: ST_TO_ADDR
6517: GO 6520
6519: POP
// end ; case pom of 1 :
6520: LD_VAR 0 3
6524: PUSH
6525: LD_INT 1
6527: DOUBLE
6528: EQUAL
6529: IFTRUE 6533
6531: GO 6544
6533: POP
// cla = class_apeman ; 2 :
6534: LD_ADDR_VAR 0 5
6538: PUSH
6539: LD_INT 12
6541: ST_TO_ADDR
6542: GO 6735
6544: LD_INT 2
6546: DOUBLE
6547: EQUAL
6548: IFTRUE 6552
6550: GO 6563
6552: POP
// cla = class_apeman_engineer ; 3 :
6553: LD_ADDR_VAR 0 5
6557: PUSH
6558: LD_INT 16
6560: ST_TO_ADDR
6561: GO 6735
6563: LD_INT 3
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6582
6571: POP
// cla = class_apeman_soldier ; 4 :
6572: LD_ADDR_VAR 0 5
6576: PUSH
6577: LD_INT 15
6579: ST_TO_ADDR
6580: GO 6735
6582: LD_INT 4
6584: DOUBLE
6585: EQUAL
6586: IFTRUE 6590
6588: GO 6601
6590: POP
// cla = class_apeman_kamikaze ; 5 :
6591: LD_ADDR_VAR 0 5
6595: PUSH
6596: LD_INT 17
6598: ST_TO_ADDR
6599: GO 6735
6601: LD_INT 5
6603: DOUBLE
6604: EQUAL
6605: IFTRUE 6609
6607: GO 6620
6609: POP
// cla = class_soldier ; 6 :
6610: LD_ADDR_VAR 0 5
6614: PUSH
6615: LD_INT 1
6617: ST_TO_ADDR
6618: GO 6735
6620: LD_INT 6
6622: DOUBLE
6623: EQUAL
6624: IFTRUE 6628
6626: GO 6639
6628: POP
// cla = class_mechanic ; 7 :
6629: LD_ADDR_VAR 0 5
6633: PUSH
6634: LD_INT 3
6636: ST_TO_ADDR
6637: GO 6735
6639: LD_INT 7
6641: DOUBLE
6642: EQUAL
6643: IFTRUE 6647
6645: GO 6658
6647: POP
// cla = class_engineer ; 8 :
6648: LD_ADDR_VAR 0 5
6652: PUSH
6653: LD_INT 2
6655: ST_TO_ADDR
6656: GO 6735
6658: LD_INT 8
6660: DOUBLE
6661: EQUAL
6662: IFTRUE 6666
6664: GO 6677
6666: POP
// cla = class_scientistic ; 9 :
6667: LD_ADDR_VAR 0 5
6671: PUSH
6672: LD_INT 4
6674: ST_TO_ADDR
6675: GO 6735
6677: LD_INT 9
6679: DOUBLE
6680: EQUAL
6681: IFTRUE 6685
6683: GO 6696
6685: POP
// cla = class_sniper ; 10 :
6686: LD_ADDR_VAR 0 5
6690: PUSH
6691: LD_INT 5
6693: ST_TO_ADDR
6694: GO 6735
6696: LD_INT 10
6698: DOUBLE
6699: EQUAL
6700: IFTRUE 6704
6702: GO 6715
6704: POP
// cla = class_mortar ; 11 :
6705: LD_ADDR_VAR 0 5
6709: PUSH
6710: LD_INT 8
6712: ST_TO_ADDR
6713: GO 6735
6715: LD_INT 11
6717: DOUBLE
6718: EQUAL
6719: IFTRUE 6723
6721: GO 6734
6723: POP
// cla = class_bazooker ; end ;
6724: LD_ADDR_VAR 0 5
6728: PUSH
6729: LD_INT 9
6731: ST_TO_ADDR
6732: GO 6735
6734: POP
// uc_side = b ;
6735: LD_ADDR_OWVAR 20
6739: PUSH
6740: LD_VAR 0 1
6744: ST_TO_ADDR
// if pom <= 4 then
6745: LD_VAR 0 3
6749: PUSH
6750: LD_INT 4
6752: LESSEQUAL
6753: IFFALSE 6765
// uc_nation = nation_nature else
6755: LD_ADDR_OWVAR 21
6759: PUSH
6760: LD_INT 0
6762: ST_TO_ADDR
6763: GO 6868
// begin if def_other_nation then
6765: LD_EXP 14
6769: IFFALSE 6789
// pom1 = Rand ( 1 , 3 ) else
6771: LD_ADDR_VAR 0 4
6775: PUSH
6776: LD_INT 1
6778: PPUSH
6779: LD_INT 3
6781: PPUSH
6782: CALL_OW 12
6786: ST_TO_ADDR
6787: GO 6805
// pom1 = Side_Nations [ b ] ;
6789: LD_ADDR_VAR 0 4
6793: PUSH
6794: LD_EXP 30
6798: PUSH
6799: LD_VAR 0 1
6803: ARRAY
6804: ST_TO_ADDR
// case pom1 of 1 :
6805: LD_VAR 0 4
6809: PUSH
6810: LD_INT 1
6812: DOUBLE
6813: EQUAL
6814: IFTRUE 6818
6816: GO 6829
6818: POP
// uc_nation = nation_american ; 2 :
6819: LD_ADDR_OWVAR 21
6823: PUSH
6824: LD_INT 1
6826: ST_TO_ADDR
6827: GO 6868
6829: LD_INT 2
6831: DOUBLE
6832: EQUAL
6833: IFTRUE 6837
6835: GO 6848
6837: POP
// uc_nation = nation_arabian ; 3 :
6838: LD_ADDR_OWVAR 21
6842: PUSH
6843: LD_INT 2
6845: ST_TO_ADDR
6846: GO 6868
6848: LD_INT 3
6850: DOUBLE
6851: EQUAL
6852: IFTRUE 6856
6854: GO 6867
6856: POP
// uc_nation = nation_russian ; end ;
6857: LD_ADDR_OWVAR 21
6861: PUSH
6862: LD_INT 3
6864: ST_TO_ADDR
6865: GO 6868
6867: POP
// end ; ah = get_human ( get_sex , cla , Rand ( 1 , 5 ) ,  ) ;
6868: LD_ADDR_VAR 0 9
6872: PUSH
6873: CALL 6975 0 0
6877: PPUSH
6878: LD_VAR 0 5
6882: PPUSH
6883: LD_INT 1
6885: PPUSH
6886: LD_INT 5
6888: PPUSH
6889: CALL_OW 12
6893: PPUSH
6894: LD_STRING 
6896: PPUSH
6897: CALL 6917 0 4
6901: ST_TO_ADDR
// result := ah ;
6902: LD_ADDR_VAR 0 2
6906: PUSH
6907: LD_VAR 0 9
6911: ST_TO_ADDR
// end ;
6912: LD_VAR 0 2
6916: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
6917: LD_INT 0
6919: PPUSH
6920: PPUSH
// PrepareHuman ( sex , clas , level ) ;
6921: LD_VAR 0 1
6925: PPUSH
6926: LD_VAR 0 2
6930: PPUSH
6931: LD_VAR 0 3
6935: PPUSH
6936: CALL_OW 380
// hc_name := name ;
6940: LD_ADDR_OWVAR 26
6944: PUSH
6945: LD_VAR 0 4
6949: ST_TO_ADDR
// pom = CreateHuman ;
6950: LD_ADDR_VAR 0 6
6954: PUSH
6955: CALL_OW 44
6959: ST_TO_ADDR
// result := pom ;
6960: LD_ADDR_VAR 0 5
6964: PUSH
6965: LD_VAR 0 6
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 5
6974: RET
// function get_sex ; begin
6975: LD_INT 0
6977: PPUSH
// if Prob ( 20 ) then
6978: LD_INT 20
6980: PPUSH
6981: CALL_OW 13
6985: IFFALSE 6997
// result = sex_female else
6987: LD_ADDR_VAR 0 1
6991: PUSH
6992: LD_INT 2
6994: ST_TO_ADDR
6995: GO 7005
// result = sex_male ;
6997: LD_ADDR_VAR 0 1
7001: PUSH
7002: LD_INT 1
7004: ST_TO_ADDR
// end ;
7005: LD_VAR 0 1
7009: RET
// function vytvor_nove_auto ( b ) ; var cat ; var a ; var pom ; var av ; begin
7010: LD_INT 0
7012: PPUSH
7013: PPUSH
7014: PPUSH
7015: PPUSH
7016: PPUSH
// uc_side = b ;
7017: LD_ADDR_OWVAR 20
7021: PUSH
7022: LD_VAR 0 1
7026: ST_TO_ADDR
// if def_other_nation then
7027: LD_EXP 14
7031: IFFALSE 7051
// cat = Rand ( 1 , 3 ) else
7033: LD_ADDR_VAR 0 3
7037: PUSH
7038: LD_INT 1
7040: PPUSH
7041: LD_INT 3
7043: PPUSH
7044: CALL_OW 12
7048: ST_TO_ADDR
7049: GO 7120
// case Side_Nations [ b ] of nation_american :
7051: LD_EXP 30
7055: PUSH
7056: LD_VAR 0 1
7060: ARRAY
7061: PUSH
7062: LD_INT 1
7064: DOUBLE
7065: EQUAL
7066: IFTRUE 7070
7068: GO 7081
7070: POP
// cat = 1 ; nation_arabian :
7071: LD_ADDR_VAR 0 3
7075: PUSH
7076: LD_INT 1
7078: ST_TO_ADDR
7079: GO 7120
7081: LD_INT 2
7083: DOUBLE
7084: EQUAL
7085: IFTRUE 7089
7087: GO 7100
7089: POP
// cat = 2 ; nation_russian :
7090: LD_ADDR_VAR 0 3
7094: PUSH
7095: LD_INT 2
7097: ST_TO_ADDR
7098: GO 7120
7100: LD_INT 3
7102: DOUBLE
7103: EQUAL
7104: IFTRUE 7108
7106: GO 7119
7108: POP
// cat = 3 ; end ;
7109: LD_ADDR_VAR 0 3
7113: PUSH
7114: LD_INT 3
7116: ST_TO_ADDR
7117: GO 7120
7119: POP
// case cat of 1 :
7120: LD_VAR 0 3
7124: PUSH
7125: LD_INT 1
7127: DOUBLE
7128: EQUAL
7129: IFTRUE 7133
7131: GO 7154
7133: POP
// begin uc_nation = nation_american ;
7134: LD_ADDR_OWVAR 21
7138: PUSH
7139: LD_INT 1
7141: ST_TO_ADDR
// pom = get_random_design_am ;
7142: LD_ADDR_VAR 0 5
7146: PUSH
7147: CALL 7294 0 0
7151: ST_TO_ADDR
// end ; 2 :
7152: GO 7213
7154: LD_INT 2
7156: DOUBLE
7157: EQUAL
7158: IFTRUE 7162
7160: GO 7183
7162: POP
// begin uc_nation = nation_arabian ;
7163: LD_ADDR_OWVAR 21
7167: PUSH
7168: LD_INT 2
7170: ST_TO_ADDR
// pom = get_random_design_ar ;
7171: LD_ADDR_VAR 0 5
7175: PUSH
7176: CALL 7960 0 0
7180: ST_TO_ADDR
// end ; 3 :
7181: GO 7213
7183: LD_INT 3
7185: DOUBLE
7186: EQUAL
7187: IFTRUE 7191
7189: GO 7212
7191: POP
// begin uc_nation = nation_russian ;
7192: LD_ADDR_OWVAR 21
7196: PUSH
7197: LD_INT 3
7199: ST_TO_ADDR
// pom = get_random_design_ru ;
7200: LD_ADDR_VAR 0 5
7204: PUSH
7205: CALL 8525 0 0
7209: ST_TO_ADDR
// end ; end ;
7210: GO 7213
7212: POP
// vc_chassis = pom [ 1 ] ;
7213: LD_ADDR_OWVAR 37
7217: PUSH
7218: LD_VAR 0 5
7222: PUSH
7223: LD_INT 1
7225: ARRAY
7226: ST_TO_ADDR
// vc_engine = pom [ 2 ] ;
7227: LD_ADDR_OWVAR 39
7231: PUSH
7232: LD_VAR 0 5
7236: PUSH
7237: LD_INT 2
7239: ARRAY
7240: ST_TO_ADDR
// vc_weapon = pom [ 3 ] ;
7241: LD_ADDR_OWVAR 40
7245: PUSH
7246: LD_VAR 0 5
7250: PUSH
7251: LD_INT 3
7253: ARRAY
7254: ST_TO_ADDR
// vc_control = pom [ 4 ] ;
7255: LD_ADDR_OWVAR 38
7259: PUSH
7260: LD_VAR 0 5
7264: PUSH
7265: LD_INT 4
7267: ARRAY
7268: ST_TO_ADDR
// av = CreateVehicle ;
7269: LD_ADDR_VAR 0 6
7273: PUSH
7274: CALL_OW 45
7278: ST_TO_ADDR
// result := av ;
7279: LD_ADDR_VAR 0 2
7283: PUSH
7284: LD_VAR 0 6
7288: ST_TO_ADDR
// end ;
7289: LD_VAR 0 2
7293: RET
// function get_random_design_am ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
7294: LD_INT 0
7296: PPUSH
7297: PPUSH
7298: PPUSH
7299: PPUSH
7300: PPUSH
7301: PPUSH
7302: PPUSH
7303: PPUSH
7304: PPUSH
7305: PPUSH
// pom1 = Rand ( 1 , 12 ) ;
7306: LD_ADDR_VAR 0 2
7310: PUSH
7311: LD_INT 1
7313: PPUSH
7314: LD_INT 12
7316: PPUSH
7317: CALL_OW 12
7321: ST_TO_ADDR
// case pom1 of 1 :
7322: LD_VAR 0 2
7326: PUSH
7327: LD_INT 1
7329: DOUBLE
7330: EQUAL
7331: IFTRUE 7335
7333: GO 7346
7335: POP
// aa3 = us_machine_gun ; 2 :
7336: LD_ADDR_VAR 0 9
7340: PUSH
7341: LD_INT 2
7343: ST_TO_ADDR
7344: GO 7556
7346: LD_INT 2
7348: DOUBLE
7349: EQUAL
7350: IFTRUE 7354
7352: GO 7365
7354: POP
// aa3 = us_light_gun ; 3 :
7355: LD_ADDR_VAR 0 9
7359: PUSH
7360: LD_INT 3
7362: ST_TO_ADDR
7363: GO 7556
7365: LD_INT 3
7367: DOUBLE
7368: EQUAL
7369: IFTRUE 7373
7371: GO 7384
7373: POP
// aa3 = us_gatling_gun ; 4 :
7374: LD_ADDR_VAR 0 9
7378: PUSH
7379: LD_INT 4
7381: ST_TO_ADDR
7382: GO 7556
7384: LD_INT 4
7386: DOUBLE
7387: EQUAL
7388: IFTRUE 7392
7390: GO 7403
7392: POP
// aa3 = us_double_gun ; 5 :
7393: LD_ADDR_VAR 0 9
7397: PUSH
7398: LD_INT 5
7400: ST_TO_ADDR
7401: GO 7556
7403: LD_INT 5
7405: DOUBLE
7406: EQUAL
7407: IFTRUE 7411
7409: GO 7422
7411: POP
// aa3 = us_heavy_gun ; 6 :
7412: LD_ADDR_VAR 0 9
7416: PUSH
7417: LD_INT 6
7419: ST_TO_ADDR
7420: GO 7556
7422: LD_INT 6
7424: DOUBLE
7425: EQUAL
7426: IFTRUE 7430
7428: GO 7441
7430: POP
// aa3 = us_rocket_launcher ; 7 :
7431: LD_ADDR_VAR 0 9
7435: PUSH
7436: LD_INT 7
7438: ST_TO_ADDR
7439: GO 7556
7441: LD_INT 7
7443: DOUBLE
7444: EQUAL
7445: IFTRUE 7449
7447: GO 7460
7449: POP
// aa3 = us_laser ; 8 :
7450: LD_ADDR_VAR 0 9
7454: PUSH
7455: LD_INT 9
7457: ST_TO_ADDR
7458: GO 7556
7460: LD_INT 8
7462: DOUBLE
7463: EQUAL
7464: IFTRUE 7468
7466: GO 7479
7468: POP
// aa3 = us_double_laser ; 9 :
7469: LD_ADDR_VAR 0 9
7473: PUSH
7474: LD_INT 10
7476: ST_TO_ADDR
7477: GO 7556
7479: LD_INT 9
7481: DOUBLE
7482: EQUAL
7483: IFTRUE 7487
7485: GO 7498
7487: POP
// aa3 = us_radar ; 10 :
7488: LD_ADDR_VAR 0 9
7492: PUSH
7493: LD_INT 11
7495: ST_TO_ADDR
7496: GO 7556
7498: LD_INT 10
7500: DOUBLE
7501: EQUAL
7502: IFTRUE 7506
7504: GO 7517
7506: POP
// aa3 = us_cargo_bay ; 11 :
7507: LD_ADDR_VAR 0 9
7511: PUSH
7512: LD_INT 12
7514: ST_TO_ADDR
7515: GO 7556
7517: LD_INT 11
7519: DOUBLE
7520: EQUAL
7521: IFTRUE 7525
7523: GO 7536
7525: POP
// aa3 = us_crane ; 12 :
7526: LD_ADDR_VAR 0 9
7530: PUSH
7531: LD_INT 13
7533: ST_TO_ADDR
7534: GO 7556
7536: LD_INT 12
7538: DOUBLE
7539: EQUAL
7540: IFTRUE 7544
7542: GO 7555
7544: POP
// aa3 = us_bulldozer ; end ;
7545: LD_ADDR_VAR 0 9
7549: PUSH
7550: LD_INT 14
7552: ST_TO_ADDR
7553: GO 7556
7555: POP
// if pom1 in [ 5 , 8 , 12 ] then
7556: LD_VAR 0 2
7560: PUSH
7561: LD_INT 5
7563: PUSH
7564: LD_INT 8
7566: PUSH
7567: LD_INT 12
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: IN
7575: IFFALSE 7595
// pom2 = Rand ( 4 , 5 ) else
7577: LD_ADDR_VAR 0 3
7581: PUSH
7582: LD_INT 4
7584: PPUSH
7585: LD_INT 5
7587: PPUSH
7588: CALL_OW 12
7592: ST_TO_ADDR
7593: GO 7646
// if pom1 in [ 1 , 9 ] then
7595: LD_VAR 0 2
7599: PUSH
7600: LD_INT 1
7602: PUSH
7603: LD_INT 9
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: IN
7610: IFFALSE 7630
// pom2 = Rand ( 1 , 5 ) else
7612: LD_ADDR_VAR 0 3
7616: PUSH
7617: LD_INT 1
7619: PPUSH
7620: LD_INT 5
7622: PPUSH
7623: CALL_OW 12
7627: ST_TO_ADDR
7628: GO 7646
// pom2 = Rand ( 2 , 5 ) ;
7630: LD_ADDR_VAR 0 3
7634: PUSH
7635: LD_INT 2
7637: PPUSH
7638: LD_INT 5
7640: PPUSH
7641: CALL_OW 12
7645: ST_TO_ADDR
// case pom2 of 1 :
7646: LD_VAR 0 3
7650: PUSH
7651: LD_INT 1
7653: DOUBLE
7654: EQUAL
7655: IFTRUE 7659
7657: GO 7670
7659: POP
// aa1 = us_light_wheeled ; 2 :
7660: LD_ADDR_VAR 0 7
7664: PUSH
7665: LD_INT 1
7667: ST_TO_ADDR
7668: GO 7747
7670: LD_INT 2
7672: DOUBLE
7673: EQUAL
7674: IFTRUE 7678
7676: GO 7689
7678: POP
// aa1 = us_medium_wheeled ; 3 :
7679: LD_ADDR_VAR 0 7
7683: PUSH
7684: LD_INT 2
7686: ST_TO_ADDR
7687: GO 7747
7689: LD_INT 3
7691: DOUBLE
7692: EQUAL
7693: IFTRUE 7697
7695: GO 7708
7697: POP
// aa1 = us_medium_tracked ; 4 :
7698: LD_ADDR_VAR 0 7
7702: PUSH
7703: LD_INT 3
7705: ST_TO_ADDR
7706: GO 7747
7708: LD_INT 4
7710: DOUBLE
7711: EQUAL
7712: IFTRUE 7716
7714: GO 7727
7716: POP
// aa1 = us_heavy_tracked ; 5 :
7717: LD_ADDR_VAR 0 7
7721: PUSH
7722: LD_INT 4
7724: ST_TO_ADDR
7725: GO 7747
7727: LD_INT 5
7729: DOUBLE
7730: EQUAL
7731: IFTRUE 7735
7733: GO 7746
7735: POP
// aa1 = us_morphling ; end ;
7736: LD_ADDR_VAR 0 7
7740: PUSH
7741: LD_INT 5
7743: ST_TO_ADDR
7744: GO 7747
7746: POP
// if pom2 < 4 then
7747: LD_VAR 0 3
7751: PUSH
7752: LD_INT 4
7754: LESS
7755: IFFALSE 7775
// pom3 = Rand ( 1 , 3 ) else
7757: LD_ADDR_VAR 0 4
7761: PUSH
7762: LD_INT 1
7764: PPUSH
7765: LD_INT 3
7767: PPUSH
7768: CALL_OW 12
7772: ST_TO_ADDR
7773: GO 7791
// pom3 = Rand ( 2 , 3 ) ;
7775: LD_ADDR_VAR 0 4
7779: PUSH
7780: LD_INT 2
7782: PPUSH
7783: LD_INT 3
7785: PPUSH
7786: CALL_OW 12
7790: ST_TO_ADDR
// case pom3 of 1 :
7791: LD_VAR 0 4
7795: PUSH
7796: LD_INT 1
7798: DOUBLE
7799: EQUAL
7800: IFTRUE 7804
7802: GO 7815
7804: POP
// aa2 = engine_solar ; 2 :
7805: LD_ADDR_VAR 0 8
7809: PUSH
7810: LD_INT 2
7812: ST_TO_ADDR
7813: GO 7854
7815: LD_INT 2
7817: DOUBLE
7818: EQUAL
7819: IFTRUE 7823
7821: GO 7834
7823: POP
// aa2 = engine_combustion ; 3 :
7824: LD_ADDR_VAR 0 8
7828: PUSH
7829: LD_INT 1
7831: ST_TO_ADDR
7832: GO 7854
7834: LD_INT 3
7836: DOUBLE
7837: EQUAL
7838: IFTRUE 7842
7840: GO 7853
7842: POP
// aa2 = engine_siberite ; end ;
7843: LD_ADDR_VAR 0 8
7847: PUSH
7848: LD_INT 3
7850: ST_TO_ADDR
7851: GO 7854
7853: POP
// pom4 = Rand ( 1 , 2 ) ;
7854: LD_ADDR_VAR 0 5
7858: PUSH
7859: LD_INT 1
7861: PPUSH
7862: LD_INT 2
7864: PPUSH
7865: CALL_OW 12
7869: ST_TO_ADDR
// case pom4 of 1 :
7870: LD_VAR 0 5
7874: PUSH
7875: LD_INT 1
7877: DOUBLE
7878: EQUAL
7879: IFTRUE 7883
7881: GO 7894
7883: POP
// aa4 = control_manual ; 2 :
7884: LD_ADDR_VAR 0 10
7888: PUSH
7889: LD_INT 1
7891: ST_TO_ADDR
7892: GO 7914
7894: LD_INT 2
7896: DOUBLE
7897: EQUAL
7898: IFTRUE 7902
7900: GO 7913
7902: POP
// aa4 = control_computer ; end ;
7903: LD_ADDR_VAR 0 10
7907: PUSH
7908: LD_INT 3
7910: ST_TO_ADDR
7911: GO 7914
7913: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
7914: LD_ADDR_VAR 0 6
7918: PUSH
7919: LD_VAR 0 7
7923: PUSH
7924: LD_VAR 0 8
7928: PUSH
7929: LD_VAR 0 9
7933: PUSH
7934: LD_VAR 0 10
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: ST_TO_ADDR
// result = aa ;
7945: LD_ADDR_VAR 0 1
7949: PUSH
7950: LD_VAR 0 6
7954: ST_TO_ADDR
// end ;
7955: LD_VAR 0 1
7959: RET
// function get_random_design_ar ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
7960: LD_INT 0
7962: PPUSH
7963: PPUSH
7964: PPUSH
7965: PPUSH
7966: PPUSH
7967: PPUSH
7968: PPUSH
7969: PPUSH
7970: PPUSH
7971: PPUSH
// pom1 = Rand ( 1 , 11 ) ;
7972: LD_ADDR_VAR 0 2
7976: PUSH
7977: LD_INT 1
7979: PPUSH
7980: LD_INT 11
7982: PPUSH
7983: CALL_OW 12
7987: ST_TO_ADDR
// case pom1 of 1 :
7988: LD_VAR 0 2
7992: PUSH
7993: LD_INT 1
7995: DOUBLE
7996: EQUAL
7997: IFTRUE 8001
7999: GO 8012
8001: POP
// aa3 = ar_multimissile_ballista ; 2 :
8002: LD_ADDR_VAR 0 9
8006: PUSH
8007: LD_INT 22
8009: ST_TO_ADDR
8010: GO 8203
8012: LD_INT 2
8014: DOUBLE
8015: EQUAL
8016: IFTRUE 8020
8018: GO 8031
8020: POP
// aa3 = ar_light_gun ; 3 :
8021: LD_ADDR_VAR 0 9
8025: PUSH
8026: LD_INT 23
8028: ST_TO_ADDR
8029: GO 8203
8031: LD_INT 3
8033: DOUBLE
8034: EQUAL
8035: IFTRUE 8039
8037: GO 8050
8039: POP
// aa3 = ar_double_machine_gun ; 4 :
8040: LD_ADDR_VAR 0 9
8044: PUSH
8045: LD_INT 24
8047: ST_TO_ADDR
8048: GO 8203
8050: LD_INT 4
8052: DOUBLE
8053: EQUAL
8054: IFTRUE 8058
8056: GO 8069
8058: POP
// aa3 = ar_gatling_gun ; 5 :
8059: LD_ADDR_VAR 0 9
8063: PUSH
8064: LD_INT 25
8066: ST_TO_ADDR
8067: GO 8203
8069: LD_INT 5
8071: DOUBLE
8072: EQUAL
8073: IFTRUE 8077
8075: GO 8088
8077: POP
// aa3 = ar_flame_thrower ; 6 :
8078: LD_ADDR_VAR 0 9
8082: PUSH
8083: LD_INT 26
8085: ST_TO_ADDR
8086: GO 8203
8088: LD_INT 6
8090: DOUBLE
8091: EQUAL
8092: IFTRUE 8096
8094: GO 8107
8096: POP
// aa3 = ar_gun ; 7 :
8097: LD_ADDR_VAR 0 9
8101: PUSH
8102: LD_INT 27
8104: ST_TO_ADDR
8105: GO 8203
8107: LD_INT 7
8109: DOUBLE
8110: EQUAL
8111: IFTRUE 8115
8113: GO 8126
8115: POP
// aa3 = ar_rocket_launcher ; 8 :
8116: LD_ADDR_VAR 0 9
8120: PUSH
8121: LD_INT 28
8123: ST_TO_ADDR
8124: GO 8203
8126: LD_INT 8
8128: DOUBLE
8129: EQUAL
8130: IFTRUE 8134
8132: GO 8145
8134: POP
// aa3 = ar_selfpropelled_bomb ; 9 :
8135: LD_ADDR_VAR 0 9
8139: PUSH
8140: LD_INT 29
8142: ST_TO_ADDR
8143: GO 8203
8145: LD_INT 9
8147: DOUBLE
8148: EQUAL
8149: IFTRUE 8153
8151: GO 8164
8153: POP
// aa3 = ar_radar ; 10 :
8154: LD_ADDR_VAR 0 9
8158: PUSH
8159: LD_INT 30
8161: ST_TO_ADDR
8162: GO 8203
8164: LD_INT 10
8166: DOUBLE
8167: EQUAL
8168: IFTRUE 8172
8170: GO 8183
8172: POP
// aa3 = ar_control_tower ; 11 :
8173: LD_ADDR_VAR 0 9
8177: PUSH
8178: LD_INT 31
8180: ST_TO_ADDR
8181: GO 8203
8183: LD_INT 11
8185: DOUBLE
8186: EQUAL
8187: IFTRUE 8191
8189: GO 8202
8191: POP
// aa3 = us_cargo_bay ; end ;
8192: LD_ADDR_VAR 0 9
8196: PUSH
8197: LD_INT 12
8199: ST_TO_ADDR
8200: GO 8203
8202: POP
// if pom1 in [ 1 , 2 , 3 ] then
8203: LD_VAR 0 2
8207: PUSH
8208: LD_INT 1
8210: PUSH
8211: LD_INT 2
8213: PUSH
8214: LD_INT 3
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: IN
8222: IFFALSE 8242
// pom2 = Rand ( 1 , 4 ) else
8224: LD_ADDR_VAR 0 3
8228: PUSH
8229: LD_INT 1
8231: PPUSH
8232: LD_INT 4
8234: PPUSH
8235: CALL_OW 12
8239: ST_TO_ADDR
8240: GO 8258
// pom2 = Rand ( 3 , 4 ) ;
8242: LD_ADDR_VAR 0 3
8246: PUSH
8247: LD_INT 3
8249: PPUSH
8250: LD_INT 4
8252: PPUSH
8253: CALL_OW 12
8257: ST_TO_ADDR
// case pom2 of 1 :
8258: LD_VAR 0 3
8262: PUSH
8263: LD_INT 1
8265: DOUBLE
8266: EQUAL
8267: IFTRUE 8271
8269: GO 8282
8271: POP
// aa1 = ar_hovercraft ; 2 :
8272: LD_ADDR_VAR 0 7
8276: PUSH
8277: LD_INT 11
8279: ST_TO_ADDR
8280: GO 8340
8282: LD_INT 2
8284: DOUBLE
8285: EQUAL
8286: IFTRUE 8290
8288: GO 8301
8290: POP
// aa1 = ar_light_trike ; 3 :
8291: LD_ADDR_VAR 0 7
8295: PUSH
8296: LD_INT 12
8298: ST_TO_ADDR
8299: GO 8340
8301: LD_INT 3
8303: DOUBLE
8304: EQUAL
8305: IFTRUE 8309
8307: GO 8320
8309: POP
// aa1 = ar_medium_trike ; 4 :
8310: LD_ADDR_VAR 0 7
8314: PUSH
8315: LD_INT 13
8317: ST_TO_ADDR
8318: GO 8340
8320: LD_INT 4
8322: DOUBLE
8323: EQUAL
8324: IFTRUE 8328
8326: GO 8339
8328: POP
// aa1 = ar_half_tracked ; end ;
8329: LD_ADDR_VAR 0 7
8333: PUSH
8334: LD_INT 14
8336: ST_TO_ADDR
8337: GO 8340
8339: POP
// pom3 = Rand ( 1 , 3 ) ;
8340: LD_ADDR_VAR 0 4
8344: PUSH
8345: LD_INT 1
8347: PPUSH
8348: LD_INT 3
8350: PPUSH
8351: CALL_OW 12
8355: ST_TO_ADDR
// case pom3 of 1 :
8356: LD_VAR 0 4
8360: PUSH
8361: LD_INT 1
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8380
8369: POP
// aa2 = engine_solar ; 2 :
8370: LD_ADDR_VAR 0 8
8374: PUSH
8375: LD_INT 2
8377: ST_TO_ADDR
8378: GO 8419
8380: LD_INT 2
8382: DOUBLE
8383: EQUAL
8384: IFTRUE 8388
8386: GO 8399
8388: POP
// aa2 = engine_combustion ; 3 :
8389: LD_ADDR_VAR 0 8
8393: PUSH
8394: LD_INT 1
8396: ST_TO_ADDR
8397: GO 8419
8399: LD_INT 3
8401: DOUBLE
8402: EQUAL
8403: IFTRUE 8407
8405: GO 8418
8407: POP
// aa2 = engine_siberite ; end ;
8408: LD_ADDR_VAR 0 8
8412: PUSH
8413: LD_INT 3
8415: ST_TO_ADDR
8416: GO 8419
8418: POP
// pom4 = Rand ( 1 , 2 ) ;
8419: LD_ADDR_VAR 0 5
8423: PUSH
8424: LD_INT 1
8426: PPUSH
8427: LD_INT 2
8429: PPUSH
8430: CALL_OW 12
8434: ST_TO_ADDR
// case pom4 of 1 :
8435: LD_VAR 0 5
8439: PUSH
8440: LD_INT 1
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8459
8448: POP
// aa4 = control_manual ; 2 :
8449: LD_ADDR_VAR 0 10
8453: PUSH
8454: LD_INT 1
8456: ST_TO_ADDR
8457: GO 8479
8459: LD_INT 2
8461: DOUBLE
8462: EQUAL
8463: IFTRUE 8467
8465: GO 8478
8467: POP
// aa4 = control_apeman ; end ;
8468: LD_ADDR_VAR 0 10
8472: PUSH
8473: LD_INT 5
8475: ST_TO_ADDR
8476: GO 8479
8478: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
8479: LD_ADDR_VAR 0 6
8483: PUSH
8484: LD_VAR 0 7
8488: PUSH
8489: LD_VAR 0 8
8493: PUSH
8494: LD_VAR 0 9
8498: PUSH
8499: LD_VAR 0 10
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: ST_TO_ADDR
// result = aa ;
8510: LD_ADDR_VAR 0 1
8514: PUSH
8515: LD_VAR 0 6
8519: ST_TO_ADDR
// end ;
8520: LD_VAR 0 1
8524: RET
// function get_random_design_ru ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
8525: LD_INT 0
8527: PPUSH
8528: PPUSH
8529: PPUSH
8530: PPUSH
8531: PPUSH
8532: PPUSH
8533: PPUSH
8534: PPUSH
8535: PPUSH
8536: PPUSH
// pom1 = Rand ( 1 , 10 ) ;
8537: LD_ADDR_VAR 0 2
8541: PUSH
8542: LD_INT 1
8544: PPUSH
8545: LD_INT 10
8547: PPUSH
8548: CALL_OW 12
8552: ST_TO_ADDR
// case pom1 of 1 :
8553: LD_VAR 0 2
8557: PUSH
8558: LD_INT 1
8560: DOUBLE
8561: EQUAL
8562: IFTRUE 8566
8564: GO 8577
8566: POP
// aa3 = ru_heavy_machine_gun ; 2 :
8567: LD_ADDR_VAR 0 9
8571: PUSH
8572: LD_INT 42
8574: ST_TO_ADDR
8575: GO 8749
8577: LD_INT 2
8579: DOUBLE
8580: EQUAL
8581: IFTRUE 8585
8583: GO 8596
8585: POP
// aa3 = ru_gatling_gun ; 3 :
8586: LD_ADDR_VAR 0 9
8590: PUSH
8591: LD_INT 43
8593: ST_TO_ADDR
8594: GO 8749
8596: LD_INT 3
8598: DOUBLE
8599: EQUAL
8600: IFTRUE 8604
8602: GO 8615
8604: POP
// aa3 = ru_gun ; 4 :
8605: LD_ADDR_VAR 0 9
8609: PUSH
8610: LD_INT 44
8612: ST_TO_ADDR
8613: GO 8749
8615: LD_INT 4
8617: DOUBLE
8618: EQUAL
8619: IFTRUE 8623
8621: GO 8634
8623: POP
// aa3 = ru_rocket_launcher ; 5 :
8624: LD_ADDR_VAR 0 9
8628: PUSH
8629: LD_INT 45
8631: ST_TO_ADDR
8632: GO 8749
8634: LD_INT 5
8636: DOUBLE
8637: EQUAL
8638: IFTRUE 8642
8640: GO 8653
8642: POP
// aa3 = ru_heavy_gun ; 6 :
8643: LD_ADDR_VAR 0 9
8647: PUSH
8648: LD_INT 46
8650: ST_TO_ADDR
8651: GO 8749
8653: LD_INT 6
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8672
8661: POP
// aa3 = ru_rocket ; 7 :
8662: LD_ADDR_VAR 0 9
8666: PUSH
8667: LD_INT 47
8669: ST_TO_ADDR
8670: GO 8749
8672: LD_INT 7
8674: DOUBLE
8675: EQUAL
8676: IFTRUE 8680
8678: GO 8691
8680: POP
// aa3 = ru_time_lapser ; 8 :
8681: LD_ADDR_VAR 0 9
8685: PUSH
8686: LD_INT 49
8688: ST_TO_ADDR
8689: GO 8749
8691: LD_INT 8
8693: DOUBLE
8694: EQUAL
8695: IFTRUE 8699
8697: GO 8710
8699: POP
// aa3 = ru_cargo_bay ; 9 :
8700: LD_ADDR_VAR 0 9
8704: PUSH
8705: LD_INT 51
8707: ST_TO_ADDR
8708: GO 8749
8710: LD_INT 9
8712: DOUBLE
8713: EQUAL
8714: IFTRUE 8718
8716: GO 8729
8718: POP
// aa3 = ru_crane ; 10 :
8719: LD_ADDR_VAR 0 9
8723: PUSH
8724: LD_INT 52
8726: ST_TO_ADDR
8727: GO 8749
8729: LD_INT 10
8731: DOUBLE
8732: EQUAL
8733: IFTRUE 8737
8735: GO 8748
8737: POP
// aa3 = ru_bulldozer ; end ;
8738: LD_ADDR_VAR 0 9
8742: PUSH
8743: LD_INT 53
8745: ST_TO_ADDR
8746: GO 8749
8748: POP
// if pom1 in [ 1 , 2 , 3 , 4 ] then
8749: LD_VAR 0 2
8753: PUSH
8754: LD_INT 1
8756: PUSH
8757: LD_INT 2
8759: PUSH
8760: LD_INT 3
8762: PUSH
8763: LD_INT 4
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: IN
8772: IFFALSE 8792
// pom2 = Rand ( 1 , 4 ) else
8774: LD_ADDR_VAR 0 3
8778: PUSH
8779: LD_INT 1
8781: PPUSH
8782: LD_INT 4
8784: PPUSH
8785: CALL_OW 12
8789: ST_TO_ADDR
8790: GO 8808
// pom2 = Rand ( 3 , 4 ) ;
8792: LD_ADDR_VAR 0 3
8796: PUSH
8797: LD_INT 3
8799: PPUSH
8800: LD_INT 4
8802: PPUSH
8803: CALL_OW 12
8807: ST_TO_ADDR
// case pom2 of 1 :
8808: LD_VAR 0 3
8812: PUSH
8813: LD_INT 1
8815: DOUBLE
8816: EQUAL
8817: IFTRUE 8821
8819: GO 8832
8821: POP
// aa1 = ru_medium_wheeled ; 2 :
8822: LD_ADDR_VAR 0 7
8826: PUSH
8827: LD_INT 21
8829: ST_TO_ADDR
8830: GO 8890
8832: LD_INT 2
8834: DOUBLE
8835: EQUAL
8836: IFTRUE 8840
8838: GO 8851
8840: POP
// aa1 = ru_medium_tracked ; 3 :
8841: LD_ADDR_VAR 0 7
8845: PUSH
8846: LD_INT 22
8848: ST_TO_ADDR
8849: GO 8890
8851: LD_INT 3
8853: DOUBLE
8854: EQUAL
8855: IFTRUE 8859
8857: GO 8870
8859: POP
// aa1 = ru_heavy_wheeled ; 4 :
8860: LD_ADDR_VAR 0 7
8864: PUSH
8865: LD_INT 23
8867: ST_TO_ADDR
8868: GO 8890
8870: LD_INT 4
8872: DOUBLE
8873: EQUAL
8874: IFTRUE 8878
8876: GO 8889
8878: POP
// aa1 = ru_heavy_tracked ; end ;
8879: LD_ADDR_VAR 0 7
8883: PUSH
8884: LD_INT 24
8886: ST_TO_ADDR
8887: GO 8890
8889: POP
// pom3 = Rand ( 1 , 2 ) ;
8890: LD_ADDR_VAR 0 4
8894: PUSH
8895: LD_INT 1
8897: PPUSH
8898: LD_INT 2
8900: PPUSH
8901: CALL_OW 12
8905: ST_TO_ADDR
// case pom3 of 1 :
8906: LD_VAR 0 4
8910: PUSH
8911: LD_INT 1
8913: DOUBLE
8914: EQUAL
8915: IFTRUE 8919
8917: GO 8930
8919: POP
// aa2 = engine_combustion ; 2 :
8920: LD_ADDR_VAR 0 8
8924: PUSH
8925: LD_INT 1
8927: ST_TO_ADDR
8928: GO 8950
8930: LD_INT 2
8932: DOUBLE
8933: EQUAL
8934: IFTRUE 8938
8936: GO 8949
8938: POP
// aa2 = engine_siberite ; end ;
8939: LD_ADDR_VAR 0 8
8943: PUSH
8944: LD_INT 3
8946: ST_TO_ADDR
8947: GO 8950
8949: POP
// pom4 = Rand ( 1 , 2 ) ;
8950: LD_ADDR_VAR 0 5
8954: PUSH
8955: LD_INT 1
8957: PPUSH
8958: LD_INT 2
8960: PPUSH
8961: CALL_OW 12
8965: ST_TO_ADDR
// case pom4 of 1 :
8966: LD_VAR 0 5
8970: PUSH
8971: LD_INT 1
8973: DOUBLE
8974: EQUAL
8975: IFTRUE 8979
8977: GO 8990
8979: POP
// aa4 = control_manual ; 2 :
8980: LD_ADDR_VAR 0 10
8984: PUSH
8985: LD_INT 1
8987: ST_TO_ADDR
8988: GO 9010
8990: LD_INT 2
8992: DOUBLE
8993: EQUAL
8994: IFTRUE 8998
8996: GO 9009
8998: POP
// aa4 = control_computer ; end ;
8999: LD_ADDR_VAR 0 10
9003: PUSH
9004: LD_INT 3
9006: ST_TO_ADDR
9007: GO 9010
9009: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
9010: LD_ADDR_VAR 0 6
9014: PUSH
9015: LD_VAR 0 7
9019: PUSH
9020: LD_VAR 0 8
9024: PUSH
9025: LD_VAR 0 9
9029: PUSH
9030: LD_VAR 0 10
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: ST_TO_ADDR
// result = aa ;
9041: LD_ADDR_VAR 0 1
9045: PUSH
9046: LD_VAR 0 6
9050: ST_TO_ADDR
// end ;
9051: LD_VAR 0 1
9055: RET
// every 0 0$1 trigger FilterUnitsInArea ( zona , [ f_not , [ f_side , 0 ] ] ) > 0 do var zony ; var pom , i ; var UN ; var p1 , p2 ;
9056: LD_INT 25
9058: PPUSH
9059: LD_INT 3
9061: PUSH
9062: LD_INT 22
9064: PUSH
9065: LD_INT 0
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: PPUSH
9076: CALL_OW 70
9080: PUSH
9081: LD_INT 0
9083: GREATER
9084: IFFALSE 9277
9086: GO 9088
9088: DISABLE
9089: LD_INT 0
9091: PPUSH
9092: PPUSH
9093: PPUSH
9094: PPUSH
9095: PPUSH
9096: PPUSH
// begin zony = [ z1 , z2 , z3 , z4 , z5 , z6 , z7 , z8 , z9 , z10 , z11 , z12 , z13 , z14 , z15 , z16 , z17 , z18 , z19 , z20 ] ;
9097: LD_ADDR_VAR 0 1
9101: PUSH
9102: LD_INT 5
9104: PUSH
9105: LD_INT 6
9107: PUSH
9108: LD_INT 7
9110: PUSH
9111: LD_INT 8
9113: PUSH
9114: LD_INT 9
9116: PUSH
9117: LD_INT 10
9119: PUSH
9120: LD_INT 11
9122: PUSH
9123: LD_INT 12
9125: PUSH
9126: LD_INT 20
9128: PUSH
9129: LD_INT 13
9131: PUSH
9132: LD_INT 14
9134: PUSH
9135: LD_INT 21
9137: PUSH
9138: LD_INT 15
9140: PUSH
9141: LD_INT 16
9143: PUSH
9144: LD_INT 17
9146: PUSH
9147: LD_INT 18
9149: PUSH
9150: LD_INT 19
9152: PUSH
9153: LD_INT 22
9155: PUSH
9156: LD_INT 23
9158: PUSH
9159: LD_INT 24
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: ST_TO_ADDR
// for i in zony do
9184: LD_ADDR_VAR 0 3
9188: PUSH
9189: LD_VAR 0 1
9193: PUSH
9194: FOR_IN
9195: IFFALSE 9274
// begin pom = FilterUnitsInArea ( i , [ f_not , [ f_side , 0 ] ] ) ;
9197: LD_ADDR_VAR 0 2
9201: PUSH
9202: LD_VAR 0 3
9206: PPUSH
9207: LD_INT 3
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 0
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PPUSH
9224: CALL_OW 70
9228: ST_TO_ADDR
// if pom > 0 then
9229: LD_VAR 0 2
9233: PUSH
9234: LD_INT 0
9236: GREATER
9237: IFFALSE 9272
// begin p1 = GetSide ( pom [ 1 ] ) ;
9239: LD_ADDR_VAR 0 5
9243: PUSH
9244: LD_VAR 0 2
9248: PUSH
9249: LD_INT 1
9251: ARRAY
9252: PPUSH
9253: CALL_OW 255
9257: ST_TO_ADDR
// zapis_do_fronty ( i , p1 ) ;
9258: LD_VAR 0 3
9262: PPUSH
9263: LD_VAR 0 5
9267: PPUSH
9268: CALL 9425 0 2
// end ; end ;
9272: GO 9194
9274: POP
9275: POP
// enable ;
9276: ENABLE
// end ;
9277: PPOPN 6
9279: END
// every 0 0$3 do var poc ; var p1 , p2 ; var j , i ;
9280: GO 9282
9282: DISABLE
9283: LD_INT 0
9285: PPUSH
9286: PPUSH
9287: PPUSH
9288: PPUSH
9289: PPUSH
// begin poc = 1 ;
9290: LD_ADDR_VAR 0 1
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// for i in POINTY do
9298: LD_ADDR_VAR 0 5
9302: PUSH
9303: LD_EXP 36
9307: PUSH
9308: FOR_IN
9309: IFFALSE 9419
// begin if i >= chance_find then
9311: LD_VAR 0 5
9315: PUSH
9316: LD_EXP 25
9320: GREATEREQUAL
9321: IFFALSE 9403
// begin for j = 1 to 8 do
9323: LD_ADDR_VAR 0 4
9327: PUSH
9328: DOUBLE
9329: LD_INT 1
9331: DEC
9332: ST_TO_ADDR
9333: LD_INT 8
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9371
// if Side_Positions [ j ] = poc then
9339: LD_EXP 29
9343: PUSH
9344: LD_VAR 0 4
9348: ARRAY
9349: PUSH
9350: LD_VAR 0 1
9354: EQUAL
9355: IFFALSE 9369
// begin p1 = j ;
9357: LD_ADDR_VAR 0 2
9361: PUSH
9362: LD_VAR 0 4
9366: ST_TO_ADDR
// break ;
9367: GO 9371
// end ;
9369: GO 9336
9371: POP
9372: POP
// p2 = Side_Nations [ j ] ;
9373: LD_ADDR_VAR 0 3
9377: PUSH
9378: LD_EXP 30
9382: PUSH
9383: LD_VAR 0 4
9387: ARRAY
9388: ST_TO_ADDR
// find_clovicka ( p1 , p2 ) ;
9389: LD_VAR 0 2
9393: PPUSH
9394: LD_VAR 0 3
9398: PPUSH
9399: CALL 9749 0 2
// end ; poc = poc + 1 ;
9403: LD_ADDR_VAR 0 1
9407: PUSH
9408: LD_VAR 0 1
9412: PUSH
9413: LD_INT 1
9415: PLUS
9416: ST_TO_ADDR
// end ;
9417: GO 9308
9419: POP
9420: POP
// enable ;
9421: ENABLE
// end ;
9422: PPOPN 5
9424: END
// function zapis_do_fronty ( zo , side ) ; var pom ; begin
9425: LD_INT 0
9427: PPUSH
9428: PPUSH
// pom = 0 ;
9429: LD_ADDR_VAR 0 4
9433: PUSH
9434: LD_INT 0
9436: ST_TO_ADDR
// pom = Side_Positions [ side ] ;
9437: LD_ADDR_VAR 0 4
9441: PUSH
9442: LD_EXP 29
9446: PUSH
9447: LD_VAR 0 2
9451: ARRAY
9452: ST_TO_ADDR
// if pom = 0 then
9453: LD_VAR 0 4
9457: PUSH
9458: LD_INT 0
9460: EQUAL
9461: IFFALSE 9470
// msg ( konec ... chyba ) ;
9463: LD_STRING konec ... chyba
9465: PPUSH
9466: CALL_OW 100
// case pom of 1 :
9470: LD_VAR 0 4
9474: PUSH
9475: LD_INT 1
9477: DOUBLE
9478: EQUAL
9479: IFTRUE 9483
9481: GO 9542
9483: POP
// POINTY = [ POINTY [ 1 ] union [ zo ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] ] ; 2 :
9484: LD_ADDR_EXP 36
9488: PUSH
9489: LD_EXP 36
9493: PUSH
9494: LD_INT 1
9496: ARRAY
9497: PUSH
9498: LD_VAR 0 1
9502: PUSH
9503: EMPTY
9504: LIST
9505: UNION
9506: PUSH
9507: LD_EXP 36
9511: PUSH
9512: LD_INT 2
9514: ARRAY
9515: PUSH
9516: LD_EXP 36
9520: PUSH
9521: LD_INT 3
9523: ARRAY
9524: PUSH
9525: LD_EXP 36
9529: PUSH
9530: LD_INT 4
9532: ARRAY
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: ST_TO_ADDR
9540: GO 9744
9542: LD_INT 2
9544: DOUBLE
9545: EQUAL
9546: IFTRUE 9550
9548: GO 9609
9550: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] union [ zo ] , POINTY [ 3 ] , POINTY [ 4 ] ] ; 3 :
9551: LD_ADDR_EXP 36
9555: PUSH
9556: LD_EXP 36
9560: PUSH
9561: LD_INT 1
9563: ARRAY
9564: PUSH
9565: LD_EXP 36
9569: PUSH
9570: LD_INT 2
9572: ARRAY
9573: PUSH
9574: LD_VAR 0 1
9578: PUSH
9579: EMPTY
9580: LIST
9581: UNION
9582: PUSH
9583: LD_EXP 36
9587: PUSH
9588: LD_INT 3
9590: ARRAY
9591: PUSH
9592: LD_EXP 36
9596: PUSH
9597: LD_INT 4
9599: ARRAY
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: ST_TO_ADDR
9607: GO 9744
9609: LD_INT 3
9611: DOUBLE
9612: EQUAL
9613: IFTRUE 9617
9615: GO 9676
9617: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] union [ zo ] , POINTY [ 4 ] ] ; 4 :
9618: LD_ADDR_EXP 36
9622: PUSH
9623: LD_EXP 36
9627: PUSH
9628: LD_INT 1
9630: ARRAY
9631: PUSH
9632: LD_EXP 36
9636: PUSH
9637: LD_INT 2
9639: ARRAY
9640: PUSH
9641: LD_EXP 36
9645: PUSH
9646: LD_INT 3
9648: ARRAY
9649: PUSH
9650: LD_VAR 0 1
9654: PUSH
9655: EMPTY
9656: LIST
9657: UNION
9658: PUSH
9659: LD_EXP 36
9663: PUSH
9664: LD_INT 4
9666: ARRAY
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: ST_TO_ADDR
9674: GO 9744
9676: LD_INT 4
9678: DOUBLE
9679: EQUAL
9680: IFTRUE 9684
9682: GO 9743
9684: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] union [ zo ] ] ; end ;
9685: LD_ADDR_EXP 36
9689: PUSH
9690: LD_EXP 36
9694: PUSH
9695: LD_INT 1
9697: ARRAY
9698: PUSH
9699: LD_EXP 36
9703: PUSH
9704: LD_INT 2
9706: ARRAY
9707: PUSH
9708: LD_EXP 36
9712: PUSH
9713: LD_INT 3
9715: ARRAY
9716: PUSH
9717: LD_EXP 36
9721: PUSH
9722: LD_INT 4
9724: ARRAY
9725: PUSH
9726: LD_VAR 0 1
9730: PUSH
9731: EMPTY
9732: LIST
9733: UNION
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: ST_TO_ADDR
9741: GO 9744
9743: POP
// end ;
9744: LD_VAR 0 3
9748: RET
// function find_clovicka ( side , nat ) ; var pom ; var un ; var unat ; var pomridic ; var pozice ; begin
9749: LD_INT 0
9751: PPUSH
9752: PPUSH
9753: PPUSH
9754: PPUSH
9755: PPUSH
9756: PPUSH
// pozice = Side_Positions [ side ] ;
9757: LD_ADDR_VAR 0 8
9761: PUSH
9762: LD_EXP 29
9766: PUSH
9767: LD_VAR 0 1
9771: ARRAY
9772: ST_TO_ADDR
// wait ( Rand ( 1 , 0 0$10 ) ) ;
9773: LD_INT 1
9775: PPUSH
9776: LD_INT 350
9778: PPUSH
9779: CALL_OW 12
9783: PPUSH
9784: CALL_OW 67
// pom = Rand ( 1 , ZMIZELI_LIDI [ pozice ] + 0 ) ;
9788: LD_ADDR_VAR 0 4
9792: PUSH
9793: LD_INT 1
9795: PPUSH
9796: LD_EXP 35
9800: PUSH
9801: LD_VAR 0 8
9805: ARRAY
9806: PUSH
9807: LD_INT 0
9809: PLUS
9810: PPUSH
9811: CALL_OW 12
9815: ST_TO_ADDR
// un = ZMIZELI_LIDI [ pozice ] [ pom ] ;
9816: LD_ADDR_VAR 0 5
9820: PUSH
9821: LD_EXP 35
9825: PUSH
9826: LD_VAR 0 8
9830: ARRAY
9831: PUSH
9832: LD_VAR 0 4
9836: ARRAY
9837: ST_TO_ADDR
// SetSide ( un , side ) ;
9838: LD_VAR 0 5
9842: PPUSH
9843: LD_VAR 0 1
9847: PPUSH
9848: CALL_OW 235
// if GetType ( un ) = unit_vehicle then
9852: LD_VAR 0 5
9856: PPUSH
9857: CALL_OW 247
9861: PUSH
9862: LD_INT 2
9864: EQUAL
9865: IFFALSE 9986
// if GetControl ( un ) = control_manual then
9867: LD_VAR 0 5
9871: PPUSH
9872: CALL_OW 263
9876: PUSH
9877: LD_INT 1
9879: EQUAL
9880: IFFALSE 9986
// if IsDrivenBy ( un ) = 0 then
9882: LD_VAR 0 5
9886: PPUSH
9887: CALL_OW 311
9891: PUSH
9892: LD_INT 0
9894: EQUAL
9895: IFFALSE 9957
// begin uc_side = side ;
9897: LD_ADDR_OWVAR 20
9901: PUSH
9902: LD_VAR 0 1
9906: ST_TO_ADDR
// uc_nation = nat ;
9907: LD_ADDR_OWVAR 21
9911: PUSH
9912: LD_VAR 0 2
9916: ST_TO_ADDR
// pomridic = get_human ( get_sex , class_mechanic , 1 ,  ) ;
9917: LD_ADDR_VAR 0 7
9921: PUSH
9922: CALL 6975 0 0
9926: PPUSH
9927: LD_INT 3
9929: PPUSH
9930: LD_INT 1
9932: PPUSH
9933: LD_STRING 
9935: PPUSH
9936: CALL 6917 0 4
9940: ST_TO_ADDR
// PlaceHumanInUnit ( pomridic , un ) ;
9941: LD_VAR 0 7
9945: PPUSH
9946: LD_VAR 0 5
9950: PPUSH
9951: CALL_OW 52
// end else
9955: GO 9986
// begin pomridic = IsDrivenBy ( un ) ;
9957: LD_ADDR_VAR 0 7
9961: PUSH
9962: LD_VAR 0 5
9966: PPUSH
9967: CALL_OW 311
9971: ST_TO_ADDR
// SetSide ( pomridic , side ) ;
9972: LD_VAR 0 7
9976: PPUSH
9977: LD_VAR 0 1
9981: PPUSH
9982: CALL_OW 235
// end ; if IsDrivenBy ( un ) > 0 then
9986: LD_VAR 0 5
9990: PPUSH
9991: CALL_OW 311
9995: PUSH
9996: LD_INT 0
9998: GREATER
9999: IFFALSE 10020
// SetTag ( IsDrivenBy ( un ) , 0 ) else
10001: LD_VAR 0 5
10005: PPUSH
10006: CALL_OW 311
10010: PPUSH
10011: LD_INT 0
10013: PPUSH
10014: CALL_OW 109
10018: GO 10032
// SetTag ( un , 0 ) ;
10020: LD_VAR 0 5
10024: PPUSH
10025: LD_INT 0
10027: PPUSH
10028: CALL_OW 109
// PlaceUnitArea ( un , new_people , true ) ;
10032: LD_VAR 0 5
10036: PPUSH
10037: LD_INT 26
10039: PPUSH
10040: LD_INT 1
10042: PPUSH
10043: CALL_OW 49
// case pozice of 1 :
10047: LD_VAR 0 8
10051: PUSH
10052: LD_INT 1
10054: DOUBLE
10055: EQUAL
10056: IFTRUE 10060
10058: GO 10156
10060: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] diff un , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ;
10061: LD_ADDR_EXP 35
10065: PUSH
10066: LD_EXP 35
10070: PUSH
10071: LD_INT 1
10073: ARRAY
10074: PUSH
10075: LD_VAR 0 5
10079: DIFF
10080: PUSH
10081: LD_EXP 35
10085: PUSH
10086: LD_INT 2
10088: ARRAY
10089: PUSH
10090: LD_EXP 35
10094: PUSH
10095: LD_INT 3
10097: ARRAY
10098: PUSH
10099: LD_EXP 35
10103: PUSH
10104: LD_INT 4
10106: ARRAY
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: ST_TO_ADDR
// POINTY = [ [ ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] ] ;
10114: LD_ADDR_EXP 36
10118: PUSH
10119: EMPTY
10120: PUSH
10121: LD_EXP 36
10125: PUSH
10126: LD_INT 2
10128: ARRAY
10129: PUSH
10130: LD_EXP 36
10134: PUSH
10135: LD_INT 3
10137: ARRAY
10138: PUSH
10139: LD_EXP 36
10143: PUSH
10144: LD_INT 4
10146: ARRAY
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: ST_TO_ADDR
// end ; 2 :
10154: GO 10469
10156: LD_INT 2
10158: DOUBLE
10159: EQUAL
10160: IFTRUE 10164
10162: GO 10260
10164: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] diff un , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ;
10165: LD_ADDR_EXP 35
10169: PUSH
10170: LD_EXP 35
10174: PUSH
10175: LD_INT 1
10177: ARRAY
10178: PUSH
10179: LD_EXP 35
10183: PUSH
10184: LD_INT 2
10186: ARRAY
10187: PUSH
10188: LD_VAR 0 5
10192: DIFF
10193: PUSH
10194: LD_EXP 35
10198: PUSH
10199: LD_INT 3
10201: ARRAY
10202: PUSH
10203: LD_EXP 35
10207: PUSH
10208: LD_INT 4
10210: ARRAY
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , [ ] , POINTY [ 3 ] , POINTY [ 4 ] ] ;
10218: LD_ADDR_EXP 36
10222: PUSH
10223: LD_EXP 36
10227: PUSH
10228: LD_INT 1
10230: ARRAY
10231: PUSH
10232: EMPTY
10233: PUSH
10234: LD_EXP 36
10238: PUSH
10239: LD_INT 3
10241: ARRAY
10242: PUSH
10243: LD_EXP 36
10247: PUSH
10248: LD_INT 4
10250: ARRAY
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: ST_TO_ADDR
// end ; 3 :
10258: GO 10469
10260: LD_INT 3
10262: DOUBLE
10263: EQUAL
10264: IFTRUE 10268
10266: GO 10364
10268: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] diff un , ZMIZELI_LIDI [ 4 ] ] ;
10269: LD_ADDR_EXP 35
10273: PUSH
10274: LD_EXP 35
10278: PUSH
10279: LD_INT 1
10281: ARRAY
10282: PUSH
10283: LD_EXP 35
10287: PUSH
10288: LD_INT 2
10290: ARRAY
10291: PUSH
10292: LD_EXP 35
10296: PUSH
10297: LD_INT 3
10299: ARRAY
10300: PUSH
10301: LD_VAR 0 5
10305: DIFF
10306: PUSH
10307: LD_EXP 35
10311: PUSH
10312: LD_INT 4
10314: ARRAY
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , [ ] , POINTY [ 4 ] ] ;
10322: LD_ADDR_EXP 36
10326: PUSH
10327: LD_EXP 36
10331: PUSH
10332: LD_INT 1
10334: ARRAY
10335: PUSH
10336: LD_EXP 36
10340: PUSH
10341: LD_INT 2
10343: ARRAY
10344: PUSH
10345: EMPTY
10346: PUSH
10347: LD_EXP 36
10351: PUSH
10352: LD_INT 4
10354: ARRAY
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: ST_TO_ADDR
// end ; 4 :
10362: GO 10469
10364: LD_INT 4
10366: DOUBLE
10367: EQUAL
10368: IFTRUE 10372
10370: GO 10468
10372: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] diff un ] ;
10373: LD_ADDR_EXP 35
10377: PUSH
10378: LD_EXP 35
10382: PUSH
10383: LD_INT 1
10385: ARRAY
10386: PUSH
10387: LD_EXP 35
10391: PUSH
10392: LD_INT 2
10394: ARRAY
10395: PUSH
10396: LD_EXP 35
10400: PUSH
10401: LD_INT 3
10403: ARRAY
10404: PUSH
10405: LD_EXP 35
10409: PUSH
10410: LD_INT 4
10412: ARRAY
10413: PUSH
10414: LD_VAR 0 5
10418: DIFF
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] , [ ] ] ;
10426: LD_ADDR_EXP 36
10430: PUSH
10431: LD_EXP 36
10435: PUSH
10436: LD_INT 1
10438: ARRAY
10439: PUSH
10440: LD_EXP 36
10444: PUSH
10445: LD_INT 2
10447: ARRAY
10448: PUSH
10449: LD_EXP 36
10453: PUSH
10454: LD_INT 3
10456: ARRAY
10457: PUSH
10458: EMPTY
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: ST_TO_ADDR
// end ; end ;
10466: GO 10469
10468: POP
// wait ( 1 1$0 ) ;
10469: LD_INT 2100
10471: PPUSH
10472: CALL_OW 67
// end ;
10476: LD_VAR 0 3
10480: RET
// every 1 1$0 do var i , k ; var pom ; var barva ; var ZL ;
10481: GO 10483
10483: DISABLE
10484: LD_INT 0
10486: PPUSH
10487: PPUSH
10488: PPUSH
10489: PPUSH
10490: PPUSH
// begin for i := 1 to 4 do
10491: LD_ADDR_VAR 0 1
10495: PUSH
10496: DOUBLE
10497: LD_INT 1
10499: DEC
10500: ST_TO_ADDR
10501: LD_INT 4
10503: PUSH
10504: FOR_TO
10505: IFFALSE 10860
// if ZMIZELI_LIDI [ i ] < 5 then
10507: LD_EXP 35
10511: PUSH
10512: LD_VAR 0 1
10516: ARRAY
10517: PUSH
10518: LD_INT 5
10520: LESS
10521: IFFALSE 10858
// begin for k := 1 to 8 do
10523: LD_ADDR_VAR 0 2
10527: PUSH
10528: DOUBLE
10529: LD_INT 1
10531: DEC
10532: ST_TO_ADDR
10533: LD_INT 8
10535: PUSH
10536: FOR_TO
10537: IFFALSE 10571
// if Side_Positions [ k ] = i then
10539: LD_EXP 29
10543: PUSH
10544: LD_VAR 0 2
10548: ARRAY
10549: PUSH
10550: LD_VAR 0 1
10554: EQUAL
10555: IFFALSE 10569
// begin barva = k ;
10557: LD_ADDR_VAR 0 4
10561: PUSH
10562: LD_VAR 0 2
10566: ST_TO_ADDR
// break ;
10567: GO 10571
// end ;
10569: GO 10536
10571: POP
10572: POP
// if Prob ( 10 ) then
10573: LD_INT 10
10575: PPUSH
10576: CALL_OW 13
10580: IFFALSE 10599
// pom = vytvor_nove_auto ( barva ) else
10582: LD_ADDR_VAR 0 3
10586: PUSH
10587: LD_VAR 0 4
10591: PPUSH
10592: CALL 7010 0 1
10596: ST_TO_ADDR
10597: GO 10614
// pom = vytvor_noveho_cloveka ( barva ) ;
10599: LD_ADDR_VAR 0 3
10603: PUSH
10604: LD_VAR 0 4
10608: PPUSH
10609: CALL 6289 0 1
10613: ST_TO_ADDR
// ZL = ZMIZELI_LIDI [ i ] ^ pom ;
10614: LD_ADDR_VAR 0 5
10618: PUSH
10619: LD_EXP 35
10623: PUSH
10624: LD_VAR 0 1
10628: ARRAY
10629: PUSH
10630: LD_VAR 0 3
10634: ADD
10635: ST_TO_ADDR
// case i of 1 :
10636: LD_VAR 0 1
10640: PUSH
10641: LD_INT 1
10643: DOUBLE
10644: EQUAL
10645: IFTRUE 10649
10647: GO 10695
10649: POP
// ZMIZELI_LIDI = [ ZL , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 2 :
10650: LD_ADDR_EXP 35
10654: PUSH
10655: LD_VAR 0 5
10659: PUSH
10660: LD_EXP 35
10664: PUSH
10665: LD_INT 2
10667: ARRAY
10668: PUSH
10669: LD_EXP 35
10673: PUSH
10674: LD_INT 3
10676: ARRAY
10677: PUSH
10678: LD_EXP 35
10682: PUSH
10683: LD_INT 4
10685: ARRAY
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: ST_TO_ADDR
10693: GO 10858
10695: LD_INT 2
10697: DOUBLE
10698: EQUAL
10699: IFTRUE 10703
10701: GO 10749
10703: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZL , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 3 :
10704: LD_ADDR_EXP 35
10708: PUSH
10709: LD_EXP 35
10713: PUSH
10714: LD_INT 1
10716: ARRAY
10717: PUSH
10718: LD_VAR 0 5
10722: PUSH
10723: LD_EXP 35
10727: PUSH
10728: LD_INT 3
10730: ARRAY
10731: PUSH
10732: LD_EXP 35
10736: PUSH
10737: LD_INT 4
10739: ARRAY
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: ST_TO_ADDR
10747: GO 10858
10749: LD_INT 3
10751: DOUBLE
10752: EQUAL
10753: IFTRUE 10757
10755: GO 10803
10757: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZL , ZMIZELI_LIDI [ 4 ] ] ; 4 :
10758: LD_ADDR_EXP 35
10762: PUSH
10763: LD_EXP 35
10767: PUSH
10768: LD_INT 1
10770: ARRAY
10771: PUSH
10772: LD_EXP 35
10776: PUSH
10777: LD_INT 2
10779: ARRAY
10780: PUSH
10781: LD_VAR 0 5
10785: PUSH
10786: LD_EXP 35
10790: PUSH
10791: LD_INT 4
10793: ARRAY
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: ST_TO_ADDR
10801: GO 10858
10803: LD_INT 4
10805: DOUBLE
10806: EQUAL
10807: IFTRUE 10811
10809: GO 10857
10811: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZL ] ; end ;
10812: LD_ADDR_EXP 35
10816: PUSH
10817: LD_EXP 35
10821: PUSH
10822: LD_INT 1
10824: ARRAY
10825: PUSH
10826: LD_EXP 35
10830: PUSH
10831: LD_INT 2
10833: ARRAY
10834: PUSH
10835: LD_EXP 35
10839: PUSH
10840: LD_INT 3
10842: ARRAY
10843: PUSH
10844: LD_VAR 0 5
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: ST_TO_ADDR
10855: GO 10858
10857: POP
// end ;
10858: GO 10504
10860: POP
10861: POP
// enable ;
10862: ENABLE
// end ;
10863: PPOPN 5
10865: END
// every 0 0$3 do var i ; var poz ; var txt , text ;
10866: GO 10868
10868: DISABLE
10869: LD_INT 0
10871: PPUSH
10872: PPUSH
10873: PPUSH
10874: PPUSH
// begin for i := 1 to 8 do
10875: LD_ADDR_VAR 0 1
10879: PUSH
10880: DOUBLE
10881: LD_INT 1
10883: DEC
10884: ST_TO_ADDR
10885: LD_INT 8
10887: PUSH
10888: FOR_TO
10889: IFFALSE 10988
// begin poz = Side_Positions [ i ] ;
10891: LD_ADDR_VAR 0 2
10895: PUSH
10896: LD_EXP 29
10900: PUSH
10901: LD_VAR 0 1
10905: ARRAY
10906: ST_TO_ADDR
// if poz > 0 and Your_Side = i then
10907: LD_VAR 0 2
10911: PUSH
10912: LD_INT 0
10914: GREATER
10915: PUSH
10916: LD_OWVAR 2
10920: PUSH
10921: LD_VAR 0 1
10925: EQUAL
10926: AND
10927: IFFALSE 10986
// begin txt = POINTY [ poz ] + 0 ;
10929: LD_ADDR_VAR 0 3
10933: PUSH
10934: LD_EXP 36
10938: PUSH
10939: LD_VAR 0 2
10943: ARRAY
10944: PUSH
10945: LD_INT 0
10947: PLUS
10948: ST_TO_ADDR
// text = txt &  of  & chance_find &  points found ;
10949: LD_ADDR_VAR 0 4
10953: PUSH
10954: LD_VAR 0 3
10958: PUSH
10959: LD_STRING  of 
10961: STR
10962: PUSH
10963: LD_EXP 25
10967: STR
10968: PUSH
10969: LD_STRING  points found
10971: STR
10972: ST_TO_ADDR
// ExtraStrings = [ text ] ;
10973: LD_ADDR_EXP 39
10977: PUSH
10978: LD_VAR 0 4
10982: PUSH
10983: EMPTY
10984: LIST
10985: ST_TO_ADDR
// end ; end ;
10986: GO 10888
10988: POP
10989: POP
// enable ;
10990: ENABLE
// end ;
10991: PPOPN 4
10993: END
// every 0 0$3 trigger chance_loose <> 0 do var i , j ; var pom , pom1 ; var apes ; var zo ; var dist ; var zmena ;
10994: LD_EXP 24
10998: PUSH
10999: LD_INT 0
11001: NONEQUAL
11002: IFFALSE 11575
11004: GO 11006
11006: DISABLE
11007: LD_INT 0
11009: PPUSH
11010: PPUSH
11011: PPUSH
11012: PPUSH
11013: PPUSH
11014: PPUSH
11015: PPUSH
11016: PPUSH
// begin apes = [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] ;
11017: LD_ADDR_VAR 0 5
11021: PUSH
11022: LD_INT 12
11024: PUSH
11025: LD_INT 16
11027: PUSH
11028: LD_INT 17
11030: PUSH
11031: LD_INT 15
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: ST_TO_ADDR
// for i := 1 to 8 do
11040: LD_ADDR_VAR 0 1
11044: PUSH
11045: DOUBLE
11046: LD_INT 1
11048: DEC
11049: ST_TO_ADDR
11050: LD_INT 8
11052: PUSH
11053: FOR_TO
11054: IFFALSE 11572
// begin case Side_Positions [ i ] of 1 :
11056: LD_EXP 29
11060: PUSH
11061: LD_VAR 0 1
11065: ARRAY
11066: PUSH
11067: LD_INT 1
11069: DOUBLE
11070: EQUAL
11071: IFTRUE 11075
11073: GO 11086
11075: POP
// zo = Base1 ; 2 :
11076: LD_ADDR_VAR 0 6
11080: PUSH
11081: LD_INT 27
11083: ST_TO_ADDR
11084: GO 11146
11086: LD_INT 2
11088: DOUBLE
11089: EQUAL
11090: IFTRUE 11094
11092: GO 11105
11094: POP
// zo = Base2 ; 3 :
11095: LD_ADDR_VAR 0 6
11099: PUSH
11100: LD_INT 28
11102: ST_TO_ADDR
11103: GO 11146
11105: LD_INT 3
11107: DOUBLE
11108: EQUAL
11109: IFTRUE 11113
11111: GO 11124
11113: POP
// zo = Base3 ; 4 :
11114: LD_ADDR_VAR 0 6
11118: PUSH
11119: LD_INT 29
11121: ST_TO_ADDR
11122: GO 11146
11124: LD_INT 4
11126: DOUBLE
11127: EQUAL
11128: IFTRUE 11132
11130: GO 11143
11132: POP
// zo = Base4 ; else
11133: LD_ADDR_VAR 0 6
11137: PUSH
11138: LD_INT 30
11140: ST_TO_ADDR
11141: GO 11146
11143: POP
// continue ; end ;
11144: GO 11053
// pom = FilterUnitsExceptArea ( zo , [ [ f_side , i ] , [ f_type , unit_human ] ] ) ;
11146: LD_ADDR_VAR 0 3
11150: PUSH
11151: LD_VAR 0 6
11155: PPUSH
11156: LD_INT 22
11158: PUSH
11159: LD_VAR 0 1
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 21
11170: PUSH
11171: LD_INT 1
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PPUSH
11182: CALL_OW 71
11186: ST_TO_ADDR
// pom1 = FilterUnitsExceptArea ( zo , [ [ f_side , i ] , [ f_type , unit_vehicle ] ] ) ;
11187: LD_ADDR_VAR 0 4
11191: PUSH
11192: LD_VAR 0 6
11196: PPUSH
11197: LD_INT 22
11199: PUSH
11200: LD_VAR 0 1
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 21
11211: PUSH
11212: LD_INT 2
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 71
11227: ST_TO_ADDR
// for j in pom1 do
11228: LD_ADDR_VAR 0 2
11232: PUSH
11233: LD_VAR 0 4
11237: PUSH
11238: FOR_IN
11239: IFFALSE 11279
// if IsDrivenBy ( j ) <> 0 then
11241: LD_VAR 0 2
11245: PPUSH
11246: CALL_OW 311
11250: PUSH
11251: LD_INT 0
11253: NONEQUAL
11254: IFFALSE 11277
// pom = pom ^ IsDrivenBy ( j ) ;
11256: LD_ADDR_VAR 0 3
11260: PUSH
11261: LD_VAR 0 3
11265: PUSH
11266: LD_VAR 0 2
11270: PPUSH
11271: CALL_OW 311
11275: ADD
11276: ST_TO_ADDR
11277: GO 11238
11279: POP
11280: POP
// for j in pom do
11281: LD_ADDR_VAR 0 2
11285: PUSH
11286: LD_VAR 0 3
11290: PUSH
11291: FOR_IN
11292: IFFALSE 11329
// if GetClass ( j ) in apes then
11294: LD_VAR 0 2
11298: PPUSH
11299: CALL_OW 257
11303: PUSH
11304: LD_VAR 0 5
11308: IN
11309: IFFALSE 11327
// pom = pom diff j ;
11311: LD_ADDR_VAR 0 3
11315: PUSH
11316: LD_VAR 0 3
11320: PUSH
11321: LD_VAR 0 2
11325: DIFF
11326: ST_TO_ADDR
11327: GO 11291
11329: POP
11330: POP
// for j in pom do
11331: LD_ADDR_VAR 0 2
11335: PUSH
11336: LD_VAR 0 3
11340: PUSH
11341: FOR_IN
11342: IFFALSE 11568
// begin dist = GetDistUnitArea ( j , zo ) ;
11344: LD_ADDR_VAR 0 7
11348: PUSH
11349: LD_VAR 0 2
11353: PPUSH
11354: LD_VAR 0 6
11358: PPUSH
11359: CALL_OW 299
11363: ST_TO_ADDR
// case dist of 1 .. 5 :
11364: LD_VAR 0 7
11368: PUSH
11369: LD_INT 1
11371: DOUBLE
11372: GREATEREQUAL
11373: IFFALSE 11381
11375: LD_INT 5
11377: DOUBLE
11378: LESSEQUAL
11379: IFTRUE 11383
11381: GO 11394
11383: POP
// zmena = 1 ; 5 .. 10 :
11384: LD_ADDR_VAR 0 8
11388: PUSH
11389: LD_INT 1
11391: ST_TO_ADDR
11392: GO 11503
11394: LD_INT 5
11396: DOUBLE
11397: GREATEREQUAL
11398: IFFALSE 11406
11400: LD_INT 10
11402: DOUBLE
11403: LESSEQUAL
11404: IFTRUE 11408
11406: GO 11419
11408: POP
// zmena = 2 ; 10 .. 15 :
11409: LD_ADDR_VAR 0 8
11413: PUSH
11414: LD_INT 2
11416: ST_TO_ADDR
11417: GO 11503
11419: LD_INT 10
11421: DOUBLE
11422: GREATEREQUAL
11423: IFFALSE 11431
11425: LD_INT 15
11427: DOUBLE
11428: LESSEQUAL
11429: IFTRUE 11433
11431: GO 11444
11433: POP
// zmena = 3 ; 15 .. 25 :
11434: LD_ADDR_VAR 0 8
11438: PUSH
11439: LD_INT 3
11441: ST_TO_ADDR
11442: GO 11503
11444: LD_INT 15
11446: DOUBLE
11447: GREATEREQUAL
11448: IFFALSE 11456
11450: LD_INT 25
11452: DOUBLE
11453: LESSEQUAL
11454: IFTRUE 11458
11456: GO 11469
11458: POP
// zmena = 4 ; 25 .. 35 :
11459: LD_ADDR_VAR 0 8
11463: PUSH
11464: LD_INT 4
11466: ST_TO_ADDR
11467: GO 11503
11469: LD_INT 25
11471: DOUBLE
11472: GREATEREQUAL
11473: IFFALSE 11481
11475: LD_INT 35
11477: DOUBLE
11478: LESSEQUAL
11479: IFTRUE 11483
11481: GO 11494
11483: POP
// zmena = 5 ; else
11484: LD_ADDR_VAR 0 8
11488: PUSH
11489: LD_INT 5
11491: ST_TO_ADDR
11492: GO 11503
11494: POP
// zmena = 6 ; end ;
11495: LD_ADDR_VAR 0 8
11499: PUSH
11500: LD_INT 6
11502: ST_TO_ADDR
// SetTag ( j , GetTag ( j ) + zmena ) ;
11503: LD_VAR 0 2
11507: PPUSH
11508: LD_VAR 0 2
11512: PPUSH
11513: CALL_OW 110
11517: PUSH
11518: LD_VAR 0 8
11522: PLUS
11523: PPUSH
11524: CALL_OW 109
// if GetTag ( j ) > chance_loose then
11528: LD_VAR 0 2
11532: PPUSH
11533: CALL_OW 110
11537: PUSH
11538: LD_EXP 24
11542: GREATER
11543: IFFALSE 11566
// begin SetTag ( j , 0 ) ;
11545: LD_VAR 0 2
11549: PPUSH
11550: LD_INT 0
11552: PPUSH
11553: CALL_OW 109
// odeber_jednotku ( j ) ;
11557: LD_VAR 0 2
11561: PPUSH
11562: CALL 11578 0 1
// end ; end ;
11566: GO 11341
11568: POP
11569: POP
// end ;
11570: GO 11053
11572: POP
11573: POP
// enable ;
11574: ENABLE
// end ;
11575: PPOPN 8
11577: END
// function odeber_jednotku ( jedn ) ; var pom ; begin
11578: LD_INT 0
11580: PPUSH
11581: PPUSH
// if IsInUnit ( jedn ) then
11582: LD_VAR 0 1
11586: PPUSH
11587: CALL_OW 310
11591: IFFALSE 11634
// if GetType ( IsInUnit ( jedn ) ) = unit_vehicle then
11593: LD_VAR 0 1
11597: PPUSH
11598: CALL_OW 310
11602: PPUSH
11603: CALL_OW 247
11607: PUSH
11608: LD_INT 2
11610: EQUAL
11611: IFFALSE 11634
// if def_vehicles_too then
11613: LD_EXP 15
11617: IFFALSE 11634
// jedn = IsInUnit ( jedn ) ;
11619: LD_ADDR_VAR 0 1
11623: PUSH
11624: LD_VAR 0 1
11628: PPUSH
11629: CALL_OW 310
11633: ST_TO_ADDR
// if def_other_nation and Prob ( 25 ) then
11634: LD_EXP 14
11638: PUSH
11639: LD_INT 25
11641: PPUSH
11642: CALL_OW 13
11646: AND
11647: IFFALSE 11667
// pom = Rand ( 1 , 4 ) else
11649: LD_ADDR_VAR 0 3
11653: PUSH
11654: LD_INT 1
11656: PPUSH
11657: LD_INT 4
11659: PPUSH
11660: CALL_OW 12
11664: ST_TO_ADDR
11665: GO 11688
// pom = Side_Positions [ GetSide ( jedn ) ] ;
11667: LD_ADDR_VAR 0 3
11671: PUSH
11672: LD_EXP 29
11676: PUSH
11677: LD_VAR 0 1
11681: PPUSH
11682: CALL_OW 255
11686: ARRAY
11687: ST_TO_ADDR
// case pom of 1 :
11688: LD_VAR 0 3
11692: PUSH
11693: LD_INT 1
11695: DOUBLE
11696: EQUAL
11697: IFTRUE 11701
11699: GO 11757
11701: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] ^ jedn , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 2 :
11702: LD_ADDR_EXP 35
11706: PUSH
11707: LD_EXP 35
11711: PUSH
11712: LD_INT 1
11714: ARRAY
11715: PUSH
11716: LD_VAR 0 1
11720: ADD
11721: PUSH
11722: LD_EXP 35
11726: PUSH
11727: LD_INT 2
11729: ARRAY
11730: PUSH
11731: LD_EXP 35
11735: PUSH
11736: LD_INT 3
11738: ARRAY
11739: PUSH
11740: LD_EXP 35
11744: PUSH
11745: LD_INT 4
11747: ARRAY
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: ST_TO_ADDR
11755: GO 11950
11757: LD_INT 2
11759: DOUBLE
11760: EQUAL
11761: IFTRUE 11765
11763: GO 11821
11765: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] ^ jedn , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 3 :
11766: LD_ADDR_EXP 35
11770: PUSH
11771: LD_EXP 35
11775: PUSH
11776: LD_INT 1
11778: ARRAY
11779: PUSH
11780: LD_EXP 35
11784: PUSH
11785: LD_INT 2
11787: ARRAY
11788: PUSH
11789: LD_VAR 0 1
11793: ADD
11794: PUSH
11795: LD_EXP 35
11799: PUSH
11800: LD_INT 3
11802: ARRAY
11803: PUSH
11804: LD_EXP 35
11808: PUSH
11809: LD_INT 4
11811: ARRAY
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: ST_TO_ADDR
11819: GO 11950
11821: LD_INT 3
11823: DOUBLE
11824: EQUAL
11825: IFTRUE 11829
11827: GO 11885
11829: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] ^ jedn , ZMIZELI_LIDI [ 4 ] ] ; 4 :
11830: LD_ADDR_EXP 35
11834: PUSH
11835: LD_EXP 35
11839: PUSH
11840: LD_INT 1
11842: ARRAY
11843: PUSH
11844: LD_EXP 35
11848: PUSH
11849: LD_INT 2
11851: ARRAY
11852: PUSH
11853: LD_EXP 35
11857: PUSH
11858: LD_INT 3
11860: ARRAY
11861: PUSH
11862: LD_VAR 0 1
11866: ADD
11867: PUSH
11868: LD_EXP 35
11872: PUSH
11873: LD_INT 4
11875: ARRAY
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: ST_TO_ADDR
11883: GO 11950
11885: LD_INT 4
11887: DOUBLE
11888: EQUAL
11889: IFTRUE 11893
11891: GO 11949
11893: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ^ jedn ] ; end ;
11894: LD_ADDR_EXP 35
11898: PUSH
11899: LD_EXP 35
11903: PUSH
11904: LD_INT 1
11906: ARRAY
11907: PUSH
11908: LD_EXP 35
11912: PUSH
11913: LD_INT 2
11915: ARRAY
11916: PUSH
11917: LD_EXP 35
11921: PUSH
11922: LD_INT 3
11924: ARRAY
11925: PUSH
11926: LD_EXP 35
11930: PUSH
11931: LD_INT 4
11933: ARRAY
11934: PUSH
11935: LD_VAR 0 1
11939: ADD
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: ST_TO_ADDR
11947: GO 11950
11949: POP
// RemoveUnit ( jedn ) ;
11950: LD_VAR 0 1
11954: PPUSH
11955: CALL_OW 64
// end ;
11959: LD_VAR 0 2
11963: RET
// every 0 0$5 trigger chance_loose <> 0 do var i , j ; var pom , pom1 ; var apes ; var zo ;
11964: LD_EXP 24
11968: PUSH
11969: LD_INT 0
11971: NONEQUAL
11972: IFFALSE 12359
11974: GO 11976
11976: DISABLE
11977: LD_INT 0
11979: PPUSH
11980: PPUSH
11981: PPUSH
11982: PPUSH
11983: PPUSH
11984: PPUSH
// begin apes = [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] ;
11985: LD_ADDR_VAR 0 5
11989: PUSH
11990: LD_INT 12
11992: PUSH
11993: LD_INT 16
11995: PUSH
11996: LD_INT 17
11998: PUSH
11999: LD_INT 15
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: ST_TO_ADDR
// for i := 1 to 8 do
12008: LD_ADDR_VAR 0 1
12012: PUSH
12013: DOUBLE
12014: LD_INT 1
12016: DEC
12017: ST_TO_ADDR
12018: LD_INT 8
12020: PUSH
12021: FOR_TO
12022: IFFALSE 12356
// begin case Side_Positions [ i ] of 1 :
12024: LD_EXP 29
12028: PUSH
12029: LD_VAR 0 1
12033: ARRAY
12034: PUSH
12035: LD_INT 1
12037: DOUBLE
12038: EQUAL
12039: IFTRUE 12043
12041: GO 12054
12043: POP
// zo = Base1 ; 2 :
12044: LD_ADDR_VAR 0 6
12048: PUSH
12049: LD_INT 27
12051: ST_TO_ADDR
12052: GO 12114
12054: LD_INT 2
12056: DOUBLE
12057: EQUAL
12058: IFTRUE 12062
12060: GO 12073
12062: POP
// zo = Base2 ; 3 :
12063: LD_ADDR_VAR 0 6
12067: PUSH
12068: LD_INT 28
12070: ST_TO_ADDR
12071: GO 12114
12073: LD_INT 3
12075: DOUBLE
12076: EQUAL
12077: IFTRUE 12081
12079: GO 12092
12081: POP
// zo = Base3 ; 4 :
12082: LD_ADDR_VAR 0 6
12086: PUSH
12087: LD_INT 29
12089: ST_TO_ADDR
12090: GO 12114
12092: LD_INT 4
12094: DOUBLE
12095: EQUAL
12096: IFTRUE 12100
12098: GO 12111
12100: POP
// zo = Base4 ; else
12101: LD_ADDR_VAR 0 6
12105: PUSH
12106: LD_INT 30
12108: ST_TO_ADDR
12109: GO 12114
12111: POP
// continue ; end ;
12112: GO 12021
// pom = FilterUnitsInArea ( zo , [ [ f_side , i ] , [ f_type , unit_human ] ] ) ;
12114: LD_ADDR_VAR 0 3
12118: PUSH
12119: LD_VAR 0 6
12123: PPUSH
12124: LD_INT 22
12126: PUSH
12127: LD_VAR 0 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 21
12138: PUSH
12139: LD_INT 1
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PPUSH
12150: CALL_OW 70
12154: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( zo , [ [ f_side , i ] , [ f_type , unit_vehicle ] ] ) ;
12155: LD_ADDR_VAR 0 4
12159: PUSH
12160: LD_VAR 0 6
12164: PPUSH
12165: LD_INT 22
12167: PUSH
12168: LD_VAR 0 1
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 21
12179: PUSH
12180: LD_INT 2
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PPUSH
12191: CALL_OW 70
12195: ST_TO_ADDR
// for j in pom1 do
12196: LD_ADDR_VAR 0 2
12200: PUSH
12201: LD_VAR 0 4
12205: PUSH
12206: FOR_IN
12207: IFFALSE 12247
// if IsDrivenBy ( j ) <> 0 then
12209: LD_VAR 0 2
12213: PPUSH
12214: CALL_OW 311
12218: PUSH
12219: LD_INT 0
12221: NONEQUAL
12222: IFFALSE 12245
// pom = pom ^ IsDrivenBy ( j ) ;
12224: LD_ADDR_VAR 0 3
12228: PUSH
12229: LD_VAR 0 3
12233: PUSH
12234: LD_VAR 0 2
12238: PPUSH
12239: CALL_OW 311
12243: ADD
12244: ST_TO_ADDR
12245: GO 12206
12247: POP
12248: POP
// for j in pom do
12249: LD_ADDR_VAR 0 2
12253: PUSH
12254: LD_VAR 0 3
12258: PUSH
12259: FOR_IN
12260: IFFALSE 12297
// if GetClass ( j ) in apes then
12262: LD_VAR 0 2
12266: PPUSH
12267: CALL_OW 257
12271: PUSH
12272: LD_VAR 0 5
12276: IN
12277: IFFALSE 12295
// pom = pom diff j ;
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: LD_VAR 0 3
12288: PUSH
12289: LD_VAR 0 2
12293: DIFF
12294: ST_TO_ADDR
12295: GO 12259
12297: POP
12298: POP
// for j in pom do
12299: LD_ADDR_VAR 0 2
12303: PUSH
12304: LD_VAR 0 3
12308: PUSH
12309: FOR_IN
12310: IFFALSE 12352
// if GetTag ( j ) > 0 then
12312: LD_VAR 0 2
12316: PPUSH
12317: CALL_OW 110
12321: PUSH
12322: LD_INT 0
12324: GREATER
12325: IFFALSE 12350
// SetTag ( j , GetTag ( j ) - 1 ) ;
12327: LD_VAR 0 2
12331: PPUSH
12332: LD_VAR 0 2
12336: PPUSH
12337: CALL_OW 110
12341: PUSH
12342: LD_INT 1
12344: MINUS
12345: PPUSH
12346: CALL_OW 109
12350: GO 12309
12352: POP
12353: POP
// end ;
12354: GO 12021
12356: POP
12357: POP
// enable ;
12358: ENABLE
// end ; end_of_file
12359: PPOPN 6
12361: END
// export function Init_Win_Condition ; begin
12362: LD_INT 0
12364: PPUSH
// disable ( 98 ) ;
12365: LD_INT 98
12367: DISABLE_MARKED
// disable ( 99 ) ;
12368: LD_INT 99
12370: DISABLE_MARKED
// if Team_Game then
12371: LD_EXP 31
12375: IFFALSE 12382
// enable ( 98 ) else
12377: LD_INT 98
12379: ENABLE_MARKED
12380: GO 12385
// enable ( 99 ) ;
12382: LD_INT 99
12384: ENABLE_MARKED
// end ;
12385: LD_VAR 0 1
12389: RET
// function CanWinLoose ; begin
12390: LD_INT 0
12392: PPUSH
// Result := true ;
12393: LD_ADDR_VAR 0 1
12397: PUSH
12398: LD_INT 1
12400: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12401: CALL_OW 518
12405: PUSH
12406: CALL_OW 519
12410: PUSH
12411: LD_INT 0
12413: GREATER
12414: AND
12415: IFFALSE 12425
// Result := false ;
12417: LD_ADDR_VAR 0 1
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12425: CALL_OW 531
12429: PUSH
12430: CALL_OW 519
12434: PUSH
12435: LD_INT 1
12437: GREATER
12438: AND
12439: IFFALSE 12449
// Result := false ;
12441: LD_ADDR_VAR 0 1
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// end ;
12449: LD_VAR 0 1
12453: RET
// function HasPower ( i ) ; begin
12454: LD_INT 0
12456: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12457: LD_ADDR_VAR 0 2
12461: PUSH
12462: LD_INT 22
12464: PUSH
12465: LD_VAR 0 1
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: LD_INT 21
12479: PUSH
12480: LD_INT 1
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 33
12489: PUSH
12490: LD_INT 3
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: LD_INT 33
12499: PUSH
12500: LD_INT 5
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PPUSH
12517: CALL_OW 69
12521: ST_TO_ADDR
// end ;
12522: LD_VAR 0 2
12526: RET
// function AlliedSides ( i , j ) ; begin
12527: LD_INT 0
12529: PPUSH
// Result := false ;
12530: LD_ADDR_VAR 0 3
12534: PUSH
12535: LD_INT 0
12537: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
12538: LD_VAR 0 1
12542: PPUSH
12543: LD_VAR 0 2
12547: PPUSH
12548: CALL_OW 81
12552: PUSH
12553: LD_INT 1
12555: EQUAL
12556: PUSH
12557: LD_VAR 0 2
12561: PPUSH
12562: LD_VAR 0 1
12566: PPUSH
12567: CALL_OW 81
12571: PUSH
12572: LD_INT 1
12574: EQUAL
12575: AND
12576: PUSH
12577: LD_VAR 0 1
12581: PPUSH
12582: CALL_OW 83
12586: AND
12587: PUSH
12588: LD_VAR 0 2
12592: PPUSH
12593: CALL_OW 83
12597: AND
12598: IFFALSE 12608
// Result := true ;
12600: LD_ADDR_VAR 0 3
12604: PUSH
12605: LD_INT 1
12607: ST_TO_ADDR
// end ;
12608: LD_VAR 0 3
12612: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
12613: CALL 12390 0 0
12617: IFFALSE 12626
12619: GO 12621
12621: DISABLE
// YouLostInMultiplayer ;
12622: CALL_OW 107
12626: END
// every 0 0$3 trigger CanWinLoose marked 401 do
12627: CALL 12390 0 0
12631: IFFALSE 12655
12633: GO 12635
12635: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
12636: LD_EXP 30
12640: PUSH
12641: LD_OWVAR 2
12645: ARRAY
12646: PPUSH
12647: CALL 15667 0 1
// YouWinInMultiplayer ;
12651: CALL_OW 106
// end ;
12655: END
// every 0 0$3 marked 98 do var i , CanWin ;
12656: GO 12658
12658: DISABLE
12659: LD_INT 0
12661: PPUSH
12662: PPUSH
// begin if not HasPower ( your_side ) then
12663: LD_OWVAR 2
12667: PPUSH
12668: CALL 12454 0 1
12672: NOT
12673: IFFALSE 12684
// begin Multiplayer_Loose_Message ;
12675: CALL_OW 521
// enable ( 400 ) ;
12679: LD_INT 400
12681: ENABLE_MARKED
// end else
12682: GO 12817
// begin CanWin := true ;
12684: LD_ADDR_VAR 0 2
12688: PUSH
12689: LD_INT 1
12691: ST_TO_ADDR
// for i := 1 to 8 do
12692: LD_ADDR_VAR 0 1
12696: PUSH
12697: DOUBLE
12698: LD_INT 1
12700: DEC
12701: ST_TO_ADDR
12702: LD_INT 8
12704: PUSH
12705: FOR_TO
12706: IFFALSE 12803
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12708: LD_EXP 29
12712: PUSH
12713: LD_VAR 0 1
12717: ARRAY
12718: PUSH
12719: LD_VAR 0 1
12723: PPUSH
12724: CALL_OW 108
12728: AND
12729: PUSH
12730: LD_VAR 0 1
12734: PUSH
12735: LD_OWVAR 2
12739: NONEQUAL
12740: AND
12741: IFFALSE 12801
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
12743: LD_EXP 27
12747: PUSH
12748: LD_VAR 0 1
12752: ARRAY
12753: NOT
12754: PUSH
12755: LD_EXP 27
12759: PUSH
12760: LD_VAR 0 1
12764: ARRAY
12765: PUSH
12766: LD_EXP 27
12770: PUSH
12771: LD_OWVAR 2
12775: ARRAY
12776: NONEQUAL
12777: OR
12778: IFFALSE 12801
// if HasPower ( i ) then
12780: LD_VAR 0 1
12784: PPUSH
12785: CALL 12454 0 1
12789: IFFALSE 12801
// begin CanWin := false ;
12791: LD_ADDR_VAR 0 2
12795: PUSH
12796: LD_INT 0
12798: ST_TO_ADDR
// break ;
12799: GO 12803
// end ;
12801: GO 12705
12803: POP
12804: POP
// if CanWin then
12805: LD_VAR 0 2
12809: IFFALSE 12816
// enable ( 401 ) else
12811: LD_INT 401
12813: ENABLE_MARKED
12814: GO 12817
// enable ;
12816: ENABLE
// end ; end ;
12817: PPOPN 2
12819: END
// every 0 0$3 marked 99 do var i , CanWin ;
12820: GO 12822
12822: DISABLE
12823: LD_INT 0
12825: PPUSH
12826: PPUSH
// begin if not HasPower ( your_side ) then
12827: LD_OWVAR 2
12831: PPUSH
12832: CALL 12454 0 1
12836: NOT
12837: IFFALSE 12848
// begin Multiplayer_Loose_Message ;
12839: CALL_OW 521
// enable ( 400 ) ;
12843: LD_INT 400
12845: ENABLE_MARKED
// end else
12846: GO 12961
// begin CanWin := true ;
12848: LD_ADDR_VAR 0 2
12852: PUSH
12853: LD_INT 1
12855: ST_TO_ADDR
// for i := 1 to 8 do
12856: LD_ADDR_VAR 0 1
12860: PUSH
12861: DOUBLE
12862: LD_INT 1
12864: DEC
12865: ST_TO_ADDR
12866: LD_INT 8
12868: PUSH
12869: FOR_TO
12870: IFFALSE 12947
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12872: LD_EXP 29
12876: PUSH
12877: LD_VAR 0 1
12881: ARRAY
12882: PUSH
12883: LD_VAR 0 1
12887: PPUSH
12888: CALL_OW 108
12892: AND
12893: PUSH
12894: LD_VAR 0 1
12898: PUSH
12899: LD_OWVAR 2
12903: NONEQUAL
12904: AND
12905: IFFALSE 12945
// if not AlliedSides ( i , your_side ) then
12907: LD_VAR 0 1
12911: PPUSH
12912: LD_OWVAR 2
12916: PPUSH
12917: CALL 12527 0 2
12921: NOT
12922: IFFALSE 12945
// if HasPower ( i ) then
12924: LD_VAR 0 1
12928: PPUSH
12929: CALL 12454 0 1
12933: IFFALSE 12945
// begin CanWin := false ;
12935: LD_ADDR_VAR 0 2
12939: PUSH
12940: LD_INT 0
12942: ST_TO_ADDR
// break ;
12943: GO 12947
// end ;
12945: GO 12869
12947: POP
12948: POP
// if CanWin then
12949: LD_VAR 0 2
12953: IFFALSE 12960
// enable ( 401 ) else
12955: LD_INT 401
12957: ENABLE_MARKED
12958: GO 12961
// enable ;
12960: ENABLE
// end ; end ; end_of_file
12961: PPOPN 2
12963: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
12964: LD_INT 0
12966: PPUSH
12967: PPUSH
// for un in battle_flags_id do
12968: LD_ADDR_VAR 0 2
12972: PUSH
12973: LD_EXP 23
12977: PUSH
12978: FOR_IN
12979: IFFALSE 13054
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
12981: LD_VAR 0 2
12985: PPUSH
12986: LD_INT 1
12988: PUSH
12989: LD_LOC 6
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 2
13000: PUSH
13001: LD_LOC 6
13005: PUSH
13006: LD_INT 2
13008: DIV
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: LD_INT 3
13016: PUSH
13017: LD_LOC 6
13021: PUSH
13022: LD_INT 5
13024: DIV
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 20
13032: PUSH
13033: LD_LOC 6
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: PPUSH
13048: CALL_OW 423
13052: GO 12978
13054: POP
13055: POP
// end ;
13056: LD_VAR 0 1
13060: RET
// every 0 0$0.1 do var un ;
13061: GO 13063
13063: DISABLE
13064: LD_INT 0
13066: PPUSH
// begin if not def_morale_flags then
13067: LD_EXP 8
13071: NOT
13072: IFFALSE 13076
// exit ;
13074: GO 13153
// if not morale_decreasing_time then
13076: LD_EXP 22
13080: NOT
13081: IFFALSE 13085
// exit ;
13083: GO 13153
// strength = 100 ;
13085: LD_ADDR_LOC 6
13089: PUSH
13090: LD_INT 100
13092: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13093: LD_EXP 22
13097: PPUSH
13098: CALL_OW 67
// strength := strength - 1 ;
13102: LD_ADDR_LOC 6
13106: PUSH
13107: LD_LOC 6
13111: PUSH
13112: LD_INT 1
13114: MINUS
13115: ST_TO_ADDR
// Update_Flags ;
13116: CALL 12964 0 0
// until not strength ;
13120: LD_LOC 6
13124: NOT
13125: IFFALSE 13093
// for un in battle_flags_id do
13127: LD_ADDR_VAR 0 1
13131: PUSH
13132: LD_EXP 23
13136: PUSH
13137: FOR_IN
13138: IFFALSE 13151
// KillBattleFlag ( un ) ;
13140: LD_VAR 0 1
13144: PPUSH
13145: CALL_OW 419
13149: GO 13137
13151: POP
13152: POP
// end ; end_of_file
13153: PPOPN 1
13155: END
// export Game_Type , def_game_rules ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13156: LD_INT 0
13158: PPUSH
13159: PPUSH
// if ( not IAmSpec ) then
13160: CALL_OW 531
13164: NOT
13165: IFFALSE 13181
// Result := Limits_Info ^  ;
13167: LD_ADDR_VAR 0 1
13171: PUSH
13172: LD_LOC 18
13176: PUSH
13177: LD_STRING 
13179: ADD
13180: ST_TO_ADDR
// for i := 1 to 8 do
13181: LD_ADDR_VAR 0 2
13185: PUSH
13186: DOUBLE
13187: LD_INT 1
13189: DEC
13190: ST_TO_ADDR
13191: LD_INT 8
13193: PUSH
13194: FOR_TO
13195: IFFALSE 13240
// if Cheaters [ i ] then
13197: LD_LOC 19
13201: PUSH
13202: LD_VAR 0 2
13206: ARRAY
13207: IFFALSE 13238
// Result := Result ^ [ #Cheater , i , i ] ;
13209: LD_ADDR_VAR 0 1
13213: PUSH
13214: LD_VAR 0 1
13218: PUSH
13219: LD_STRING #Cheater
13221: PUSH
13222: LD_VAR 0 2
13226: PUSH
13227: LD_VAR 0 2
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: ADD
13237: ST_TO_ADDR
13238: GO 13194
13240: POP
13241: POP
// end ;
13242: LD_VAR 0 1
13246: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
13247: LD_INT 0
13249: PPUSH
13250: PPUSH
13251: PPUSH
13252: PPUSH
13253: PPUSH
// case def_game_rules of 0 :
13254: LD_EXP 38
13258: PUSH
13259: LD_INT 0
13261: DOUBLE
13262: EQUAL
13263: IFTRUE 13267
13265: GO 13272
13267: POP
// exit ; 1 :
13268: GO 13597
13270: GO 13497
13272: LD_INT 1
13274: DOUBLE
13275: EQUAL
13276: IFTRUE 13280
13278: GO 13496
13280: POP
// begin def_base_level = 0 ;
13281: LD_ADDR_EXP 2
13285: PUSH
13286: LD_INT 0
13288: ST_TO_ADDR
// def_amount_of_people = 0 ;
13289: LD_ADDR_EXP 3
13293: PUSH
13294: LD_INT 0
13296: ST_TO_ADDR
// def_initial_level = 0 ;
13297: LD_ADDR_EXP 4
13301: PUSH
13302: LD_INT 0
13304: ST_TO_ADDR
// def_starting_resources = 1 ;
13305: LD_ADDR_EXP 5
13309: PUSH
13310: LD_INT 1
13312: ST_TO_ADDR
// def_shipments_density = 0 ;
13313: LD_ADDR_EXP 6
13317: PUSH
13318: LD_INT 0
13320: ST_TO_ADDR
// def_shared_vision = 1 ;
13321: LD_ADDR_EXP 7
13325: PUSH
13326: LD_INT 1
13328: ST_TO_ADDR
// def_morale_flags = 1 ;
13329: LD_ADDR_EXP 8
13333: PUSH
13334: LD_INT 1
13336: ST_TO_ADDR
// def_siberite_detection = 0 ;
13337: LD_ADDR_EXP 9
13341: PUSH
13342: LD_INT 0
13344: ST_TO_ADDR
// def_amount_of_apemen = 1 ;
13345: LD_ADDR_EXP 11
13349: PUSH
13350: LD_INT 1
13352: ST_TO_ADDR
// def_find_people = 0 ;
13353: LD_ADDR_EXP 12
13357: PUSH
13358: LD_INT 0
13360: ST_TO_ADDR
// def_lost_people = 0 ;
13361: LD_ADDR_EXP 13
13365: PUSH
13366: LD_INT 0
13368: ST_TO_ADDR
// def_second_oil = 0 ;
13369: LD_ADDR_EXP 10
13373: PUSH
13374: LD_INT 0
13376: ST_TO_ADDR
// def_other_nation = 0 ;
13377: LD_ADDR_EXP 14
13381: PUSH
13382: LD_INT 0
13384: ST_TO_ADDR
// def_vehicles_too = 0 ;
13385: LD_ADDR_EXP 15
13389: PUSH
13390: LD_INT 0
13392: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13393: LD_ADDR_VAR 0 2
13397: PUSH
13398: EMPTY
13399: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13400: LD_ADDR_VAR 0 3
13404: PUSH
13405: EMPTY
13406: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13407: LD_ADDR_LOC 13
13411: PUSH
13412: EMPTY
13413: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13414: LD_ADDR_LOC 14
13418: PUSH
13419: EMPTY
13420: ST_TO_ADDR
// Banned_Controls := [ ] ;
13421: LD_ADDR_LOC 15
13425: PUSH
13426: EMPTY
13427: ST_TO_ADDR
// Banned_Engines := [ ] ;
13428: LD_ADDR_LOC 16
13432: PUSH
13433: EMPTY
13434: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13435: LD_ADDR_LOC 11
13439: PUSH
13440: LD_INT 37
13442: PUSH
13443: EMPTY
13444: LIST
13445: PUSH
13446: LD_INT 4
13448: PUSH
13449: LD_INT 5
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 31
13458: PUSH
13459: LD_INT 32
13461: PUSH
13462: LD_INT 33
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: LIST
13474: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 , 3 ] ;
13475: LD_ADDR_LOC 12
13479: PUSH
13480: LD_INT 1
13482: PUSH
13483: LD_INT 1
13485: PUSH
13486: LD_INT 3
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: ST_TO_ADDR
// end ; end ;
13494: GO 13497
13496: POP
// for i := 1 to 8 do
13497: LD_ADDR_VAR 0 4
13501: PUSH
13502: DOUBLE
13503: LD_INT 1
13505: DEC
13506: ST_TO_ADDR
13507: LD_INT 8
13509: PUSH
13510: FOR_TO
13511: IFFALSE 13595
// if Side_Positions [ i ] then
13513: LD_EXP 29
13517: PUSH
13518: LD_VAR 0 4
13522: ARRAY
13523: IFFALSE 13593
// begin for j in Unavailable_Techs do
13525: LD_ADDR_VAR 0 5
13529: PUSH
13530: LD_VAR 0 2
13534: PUSH
13535: FOR_IN
13536: IFFALSE 13557
// SetTech ( j , i , 0 ) ;
13538: LD_VAR 0 5
13542: PPUSH
13543: LD_VAR 0 4
13547: PPUSH
13548: LD_INT 0
13550: PPUSH
13551: CALL_OW 322
13555: GO 13535
13557: POP
13558: POP
// for j in Unavailable_Builds do
13559: LD_ADDR_VAR 0 5
13563: PUSH
13564: LD_VAR 0 3
13568: PUSH
13569: FOR_IN
13570: IFFALSE 13591
// SetRestrict ( j , i , 0 ) ;
13572: LD_VAR 0 5
13576: PPUSH
13577: LD_VAR 0 4
13581: PPUSH
13582: LD_INT 0
13584: PPUSH
13585: CALL_OW 324
13589: GO 13569
13591: POP
13592: POP
// end ;
13593: GO 13510
13595: POP
13596: POP
// end ;
13597: LD_VAR 0 1
13601: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
13602: LD_INT 0
13604: PPUSH
13605: PPUSH
13606: PPUSH
13607: PPUSH
13608: PPUSH
13609: PPUSH
13610: PPUSH
// for i := 1 to Restricted_Builds do
13611: LD_ADDR_VAR 0 2
13615: PUSH
13616: DOUBLE
13617: LD_INT 1
13619: DEC
13620: ST_TO_ADDR
13621: LD_LOC 11
13625: PUSH
13626: FOR_TO
13627: IFFALSE 13937
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
13629: LD_LOC 11
13633: PUSH
13634: LD_VAR 0 2
13638: ARRAY
13639: PUSH
13640: LD_INT 1
13642: ARRAY
13643: PUSH
13644: LD_INT 31
13646: DOUBLE
13647: EQUAL
13648: IFTRUE 13664
13650: LD_INT 32
13652: DOUBLE
13653: EQUAL
13654: IFTRUE 13664
13656: LD_INT 33
13658: DOUBLE
13659: EQUAL
13660: IFTRUE 13664
13662: GO 13675
13664: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
13665: LD_ADDR_VAR 0 6
13669: PUSH
13670: LD_STRING #Turrets
13672: ST_TO_ADDR
13673: GO 13720
13675: LD_INT 4
13677: DOUBLE
13678: EQUAL
13679: IFTRUE 13689
13681: LD_INT 5
13683: DOUBLE
13684: EQUAL
13685: IFTRUE 13689
13687: GO 13700
13689: POP
// btype := #Armouries ; b_Behemoth :
13690: LD_ADDR_VAR 0 6
13694: PUSH
13695: LD_STRING #Armouries
13697: ST_TO_ADDR
13698: GO 13720
13700: LD_INT 37
13702: DOUBLE
13703: EQUAL
13704: IFTRUE 13708
13706: GO 13719
13708: POP
// btype := #Behemoths ; end ;
13709: LD_ADDR_VAR 0 6
13713: PUSH
13714: LD_STRING #Behemoths
13716: ST_TO_ADDR
13717: GO 13720
13719: POP
// list := [ ] ;
13720: LD_ADDR_VAR 0 7
13724: PUSH
13725: EMPTY
13726: ST_TO_ADDR
// for j := 1 to 8 do
13727: LD_ADDR_VAR 0 3
13731: PUSH
13732: DOUBLE
13733: LD_INT 1
13735: DEC
13736: ST_TO_ADDR
13737: LD_INT 8
13739: PUSH
13740: FOR_TO
13741: IFFALSE 13834
// if Side_Positions [ j ] then
13743: LD_EXP 29
13747: PUSH
13748: LD_VAR 0 3
13752: ARRAY
13753: IFFALSE 13832
// begin amount := 0 ;
13755: LD_ADDR_VAR 0 5
13759: PUSH
13760: LD_INT 0
13762: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
13763: LD_ADDR_VAR 0 4
13767: PUSH
13768: LD_LOC 11
13772: PUSH
13773: LD_VAR 0 2
13777: ARRAY
13778: PUSH
13779: FOR_IN
13780: IFFALSE 13828
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
13782: LD_ADDR_VAR 0 5
13786: PUSH
13787: LD_VAR 0 5
13791: PUSH
13792: LD_INT 22
13794: PUSH
13795: LD_VAR 0 3
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 30
13806: PUSH
13807: LD_VAR 0 4
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PPUSH
13820: CALL_OW 69
13824: PLUS
13825: ST_TO_ADDR
13826: GO 13779
13828: POP
13829: POP
// break ;
13830: GO 13834
// end ;
13832: GO 13740
13834: POP
13835: POP
// list := [ ] ;
13836: LD_ADDR_VAR 0 7
13840: PUSH
13841: EMPTY
13842: ST_TO_ADDR
// for j := 1 to 8 do
13843: LD_ADDR_VAR 0 3
13847: PUSH
13848: DOUBLE
13849: LD_INT 1
13851: DEC
13852: ST_TO_ADDR
13853: LD_INT 8
13855: PUSH
13856: FOR_TO
13857: IFFALSE 13877
// list := list ^ amount ;
13859: LD_ADDR_VAR 0 7
13863: PUSH
13864: LD_VAR 0 7
13868: PUSH
13869: LD_VAR 0 5
13873: ADD
13874: ST_TO_ADDR
13875: GO 13856
13877: POP
13878: POP
// Already_Built := Already_Built ^ [ list ] ;
13879: LD_ADDR_LOC 17
13883: PUSH
13884: LD_LOC 17
13888: PUSH
13889: LD_VAR 0 7
13893: PUSH
13894: EMPTY
13895: LIST
13896: ADD
13897: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13898: LD_ADDR_LOC 18
13902: PUSH
13903: LD_LOC 18
13907: PUSH
13908: LD_VAR 0 6
13912: PUSH
13913: LD_VAR 0 5
13917: PUSH
13918: LD_LOC 12
13922: PUSH
13923: LD_VAR 0 2
13927: ARRAY
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: LIST
13933: ADD
13934: ST_TO_ADDR
// end ;
13935: GO 13626
13937: POP
13938: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13939: LD_ADDR_LOC 19
13943: PUSH
13944: LD_INT 0
13946: PUSH
13947: LD_INT 0
13949: PUSH
13950: LD_INT 0
13952: PUSH
13953: LD_INT 0
13955: PUSH
13956: LD_INT 0
13958: PUSH
13959: LD_INT 0
13961: PUSH
13962: LD_INT 0
13964: PUSH
13965: LD_INT 0
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: ST_TO_ADDR
// if Limits_Info then
13978: LD_LOC 18
13982: IFFALSE 13998
// Limits_Info := #Limits ^ Limits_Info ;
13984: LD_ADDR_LOC 18
13988: PUSH
13989: LD_STRING #Limits
13991: PUSH
13992: LD_LOC 18
13996: ADD
13997: ST_TO_ADDR
// end ;
13998: LD_VAR 0 1
14002: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
14003: LD_INT 0
14005: PPUSH
14006: PPUSH
14007: PPUSH
14008: PPUSH
// for i := 1 to Restricted_Builds do
14009: LD_ADDR_VAR 0 7
14013: PUSH
14014: DOUBLE
14015: LD_INT 1
14017: DEC
14018: ST_TO_ADDR
14019: LD_LOC 11
14023: PUSH
14024: FOR_TO
14025: IFFALSE 14448
// if BType in Restricted_Builds [ i ] then
14027: LD_VAR 0 2
14031: PUSH
14032: LD_LOC 11
14036: PUSH
14037: LD_VAR 0 7
14041: ARRAY
14042: IN
14043: IFFALSE 14446
// begin if old_side then
14045: LD_VAR 0 4
14049: IFFALSE 14175
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
14051: LD_LOC 17
14055: PUSH
14056: LD_VAR 0 7
14060: ARRAY
14061: PUSH
14062: LD_VAR 0 3
14066: ARRAY
14067: PUSH
14068: LD_VAR 0 5
14072: PLUS
14073: PUSH
14074: LD_LOC 12
14078: PUSH
14079: LD_VAR 0 7
14083: ARRAY
14084: GREATER
14085: IFFALSE 14111
// begin SetSide ( un , old_side ) ;
14087: LD_VAR 0 1
14091: PPUSH
14092: LD_VAR 0 4
14096: PPUSH
14097: CALL_OW 235
// count := 0 ;
14101: LD_ADDR_VAR 0 5
14105: PUSH
14106: LD_INT 0
14108: ST_TO_ADDR
// end else
14109: GO 14175
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
14111: LD_ADDR_LOC 17
14115: PUSH
14116: LD_LOC 17
14120: PPUSH
14121: LD_VAR 0 7
14125: PPUSH
14126: LD_LOC 17
14130: PUSH
14131: LD_VAR 0 7
14135: ARRAY
14136: PPUSH
14137: LD_VAR 0 4
14141: PPUSH
14142: LD_LOC 17
14146: PUSH
14147: LD_VAR 0 7
14151: ARRAY
14152: PUSH
14153: LD_VAR 0 4
14157: ARRAY
14158: PUSH
14159: LD_VAR 0 5
14163: MINUS
14164: PPUSH
14165: CALL_OW 1
14169: PPUSH
14170: CALL_OW 1
14174: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
14175: LD_ADDR_LOC 17
14179: PUSH
14180: LD_LOC 17
14184: PPUSH
14185: LD_VAR 0 7
14189: PPUSH
14190: LD_LOC 17
14194: PUSH
14195: LD_VAR 0 7
14199: ARRAY
14200: PPUSH
14201: LD_VAR 0 3
14205: PPUSH
14206: LD_LOC 17
14210: PUSH
14211: LD_VAR 0 7
14215: ARRAY
14216: PUSH
14217: LD_VAR 0 3
14221: ARRAY
14222: PUSH
14223: LD_VAR 0 5
14227: PLUS
14228: PPUSH
14229: CALL_OW 1
14233: PPUSH
14234: CALL_OW 1
14238: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
14239: LD_VAR 0 5
14243: PUSH
14244: LD_INT 0
14246: NONEQUAL
14247: PUSH
14248: LD_VAR 0 3
14252: PUSH
14253: LD_OWVAR 2
14257: EQUAL
14258: AND
14259: IFFALSE 14302
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
14261: LD_ADDR_LOC 18
14265: PUSH
14266: LD_LOC 18
14270: PPUSH
14271: LD_INT 3
14273: PUSH
14274: LD_VAR 0 7
14278: MUL
14279: PPUSH
14280: LD_LOC 17
14284: PUSH
14285: LD_VAR 0 7
14289: ARRAY
14290: PUSH
14291: LD_VAR 0 3
14295: ARRAY
14296: PPUSH
14297: CALL_OW 1
14301: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
14302: LD_LOC 17
14306: PUSH
14307: LD_VAR 0 7
14311: ARRAY
14312: PUSH
14313: LD_VAR 0 3
14317: ARRAY
14318: PUSH
14319: LD_LOC 12
14323: PUSH
14324: LD_VAR 0 7
14328: ARRAY
14329: GREATER
14330: IFFALSE 14357
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
14332: LD_ADDR_LOC 19
14336: PUSH
14337: LD_LOC 19
14341: PPUSH
14342: LD_VAR 0 3
14346: PPUSH
14347: LD_INT 1
14349: PPUSH
14350: CALL_OW 1
14354: ST_TO_ADDR
// end else
14355: GO 14444
// begin for j := 1 to Restricted_Builds do
14357: LD_ADDR_VAR 0 8
14361: PUSH
14362: DOUBLE
14363: LD_INT 1
14365: DEC
14366: ST_TO_ADDR
14367: LD_LOC 11
14371: PUSH
14372: FOR_TO
14373: IFFALSE 14417
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
14375: LD_LOC 17
14379: PUSH
14380: LD_VAR 0 8
14384: ARRAY
14385: PUSH
14386: LD_VAR 0 3
14390: ARRAY
14391: PUSH
14392: LD_LOC 12
14396: PUSH
14397: LD_VAR 0 8
14401: ARRAY
14402: GREATER
14403: IFFALSE 14415
// begin Is_Cheater := true ;
14405: LD_ADDR_VAR 0 9
14409: PUSH
14410: LD_INT 1
14412: ST_TO_ADDR
// break ;
14413: GO 14417
// end ;
14415: GO 14372
14417: POP
14418: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
14419: LD_ADDR_LOC 19
14423: PUSH
14424: LD_LOC 19
14428: PPUSH
14429: LD_VAR 0 3
14433: PPUSH
14434: LD_VAR 0 9
14438: PPUSH
14439: CALL_OW 1
14443: ST_TO_ADDR
// end ; break ;
14444: GO 14448
// end ;
14446: GO 14024
14448: POP
14449: POP
// end ;
14450: LD_VAR 0 6
14454: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
14455: LD_VAR 0 5
14459: PUSH
14460: LD_LOC 13
14464: IN
14465: PUSH
14466: LD_VAR 0 2
14470: PUSH
14471: LD_LOC 14
14475: IN
14476: OR
14477: PUSH
14478: LD_VAR 0 4
14482: PUSH
14483: LD_LOC 15
14487: IN
14488: OR
14489: PUSH
14490: LD_VAR 0 3
14494: PUSH
14495: LD_LOC 16
14499: IN
14500: OR
14501: IFFALSE 14512
// ComCancel ( factory ) ;
14503: LD_VAR 0 1
14507: PPUSH
14508: CALL_OW 127
// end ;
14512: PPOPN 5
14514: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
14515: LD_VAR 0 2
14519: PUSH
14520: LD_LOC 13
14524: IN
14525: IFFALSE 14536
// ComCancel ( building ) ;
14527: LD_VAR 0 1
14531: PPUSH
14532: CALL_OW 127
// end ; end_of_file
14536: PPOPN 2
14538: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
14539: LD_INT 0
14541: PPUSH
14542: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
14543: LD_ADDR_VAR 0 2
14547: PUSH
14548: LD_STRING #Multi1x1-Time
14550: PUSH
14551: LD_OWVAR 1
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: ST_TO_ADDR
// if ( ExtraStrings ) then
14560: LD_EXP 39
14564: IFFALSE 14586
// AllStrings := AllStrings ^  ^ ExtraStrings ;
14566: LD_ADDR_VAR 0 2
14570: PUSH
14571: LD_VAR 0 2
14575: PUSH
14576: LD_STRING 
14578: ADD
14579: PUSH
14580: LD_EXP 39
14584: ADD
14585: ST_TO_ADDR
// if ( LimitsStrings ) then
14586: CALL 13156 0 0
14590: IFFALSE 14612
// AllStrings := AllStrings ^  ^ LimitsStrings ;
14592: LD_ADDR_VAR 0 2
14596: PUSH
14597: LD_VAR 0 2
14601: PUSH
14602: LD_STRING 
14604: ADD
14605: PUSH
14606: CALL 13156 0 0
14610: ADD
14611: ST_TO_ADDR
// Display_Strings := AllStrings ;
14612: LD_ADDR_OWVAR 47
14616: PUSH
14617: LD_VAR 0 2
14621: ST_TO_ADDR
// end ;
14622: LD_VAR 0 1
14626: RET
// every 0 0$1 do
14627: GO 14629
14629: DISABLE
// begin ShowTimer ;
14630: CALL 14539 0 0
// enable ;
14634: ENABLE
// end ; end_of_file
14635: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
14636: GO 14638
14638: DISABLE
14639: LD_INT 0
14641: PPUSH
// begin _apemenIncrement := 0 ;
14642: LD_ADDR_LOC 20
14646: PUSH
14647: LD_INT 0
14649: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
14650: LD_ADDR_LOC 22
14654: PUSH
14655: LD_INT 0
14657: ST_TO_ADDR
// _isSpawning := true ;
14658: LD_ADDR_LOC 24
14662: PUSH
14663: LD_INT 1
14665: ST_TO_ADDR
// _wildApemenAmount := 0 ;
14666: LD_ADDR_LOC 25
14670: PUSH
14671: LD_INT 0
14673: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
14674: LD_ADDR_VAR 0 1
14678: PUSH
14679: LD_EXP 29
14683: PUSH
14684: LD_INT 0
14686: PUSH
14687: EMPTY
14688: LIST
14689: DIFF
14690: PUSH
14691: FOR_IN
14692: IFFALSE 14710
// _apemenIncrement := _apemenIncrement + 1 ;
14694: LD_ADDR_LOC 20
14698: PUSH
14699: LD_LOC 20
14703: PUSH
14704: LD_INT 1
14706: PLUS
14707: ST_TO_ADDR
14708: GO 14691
14710: POP
14711: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
14712: LD_ADDR_LOC 21
14716: PUSH
14717: LD_LOC 20
14721: PUSH
14722: LD_EXP 26
14726: MUL
14727: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
14728: LD_ADDR_LOC 23
14732: PUSH
14733: LD_LOC 21
14737: PUSH
14738: LD_INT 2
14740: DIVREAL
14741: ST_TO_ADDR
// prepare_apemen ;
14742: CALL 14834 0 0
// end ;
14746: PPOPN 1
14748: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
14749: CALL 14756 0 0
// end ;
14753: PPOPN 2
14755: END
// export function CheckApemenAmount ; begin
14756: LD_INT 0
14758: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
14759: LD_ADDR_LOC 25
14763: PUSH
14764: LD_LOC 25
14768: PUSH
14769: LD_INT 1
14771: MINUS
14772: ST_TO_ADDR
// if _isSpawning then
14773: LD_LOC 24
14777: IFFALSE 14781
// exit ;
14779: GO 14829
// if _wildApemenAmount <= ( _apemenThreshold ) then
14781: LD_LOC 25
14785: PUSH
14786: LD_LOC 23
14790: LESSEQUAL
14791: IFFALSE 14829
// begin if _apemenSkillLevel < 8 then
14793: LD_LOC 22
14797: PUSH
14798: LD_INT 8
14800: LESS
14801: IFFALSE 14817
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
14803: LD_ADDR_LOC 22
14807: PUSH
14808: LD_LOC 22
14812: PUSH
14813: LD_INT 1
14815: PLUS
14816: ST_TO_ADDR
// _isSpawning := true ;
14817: LD_ADDR_LOC 24
14821: PUSH
14822: LD_INT 1
14824: ST_TO_ADDR
// prepare_apemen ;
14825: CALL 14834 0 0
// end ; end ;
14829: LD_VAR 0 1
14833: RET
// function prepare_apemen ; var i ; begin
14834: LD_INT 0
14836: PPUSH
14837: PPUSH
// if not amount_of_apemen then
14838: LD_EXP 26
14842: NOT
14843: IFFALSE 14847
// exit ;
14845: GO 15026
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
14847: LD_INT 1050
14849: PPUSH
14850: LD_INT 3150
14852: PPUSH
14853: CALL_OW 12
14857: PPUSH
14858: CALL_OW 67
// apeman_init ;
14862: CALL 15031 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
14866: LD_ADDR_VAR 0 2
14870: PUSH
14871: LD_EXP 29
14875: PUSH
14876: LD_INT 0
14878: PUSH
14879: EMPTY
14880: LIST
14881: DIFF
14882: PUSH
14883: FOR_IN
14884: IFFALSE 14988
// begin if i = 1 then
14886: LD_VAR 0 2
14890: PUSH
14891: LD_INT 1
14893: EQUAL
14894: IFFALSE 14911
// PlaceUnitArea ( CreateHuman , op1 , false ) ;
14896: CALL_OW 44
14900: PPUSH
14901: LD_INT 31
14903: PPUSH
14904: LD_INT 0
14906: PPUSH
14907: CALL_OW 49
// if i = 2 then
14911: LD_VAR 0 2
14915: PUSH
14916: LD_INT 2
14918: EQUAL
14919: IFFALSE 14936
// PlaceUnitArea ( CreateHuman , op2 , false ) ;
14921: CALL_OW 44
14925: PPUSH
14926: LD_INT 32
14928: PPUSH
14929: LD_INT 0
14931: PPUSH
14932: CALL_OW 49
// if i = 3 then
14936: LD_VAR 0 2
14940: PUSH
14941: LD_INT 3
14943: EQUAL
14944: IFFALSE 14961
// PlaceUnitArea ( CreateHuman , op3 , false ) ;
14946: CALL_OW 44
14950: PPUSH
14951: LD_INT 33
14953: PPUSH
14954: LD_INT 0
14956: PPUSH
14957: CALL_OW 49
// if i = 4 then
14961: LD_VAR 0 2
14965: PUSH
14966: LD_INT 4
14968: EQUAL
14969: IFFALSE 14986
// PlaceUnitArea ( CreateHuman , op4 , false ) ;
14971: CALL_OW 44
14975: PPUSH
14976: LD_INT 34
14978: PPUSH
14979: LD_INT 0
14981: PPUSH
14982: CALL_OW 49
// end ;
14986: GO 14883
14988: POP
14989: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
14990: LD_ADDR_LOC 25
14994: PUSH
14995: LD_LOC 25
14999: PUSH
15000: LD_LOC 20
15004: PLUS
15005: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
15006: LD_LOC 25
15010: PUSH
15011: LD_LOC 21
15015: GREATEREQUAL
15016: IFFALSE 14847
// _isSpawning := false ;
15018: LD_ADDR_LOC 24
15022: PUSH
15023: LD_INT 0
15025: ST_TO_ADDR
// end ;
15026: LD_VAR 0 1
15030: RET
// function apeman_init ; var ape_names ; begin
15031: LD_INT 0
15033: PPUSH
15034: PPUSH
// ape_names = [ Tupoun , Opoce , Opka , Butrus , Bubu , Condor , Kuklajs , Simon , Ugh , Urgh , Argh , Aargh , Hrumph , Grumph , Oorg , Eghrr , Rrrr , Bark , Wraughrr , :-) , Semik , Hrgh , Hur , Havran , Nazghul , Brutal , Kato Zluta Opoce , Monkey , Yeargh , Marta , Batman , Barkman , Xcenovsk , David Love , Freon , Stoupik , Quik , Jam Prckovic Laren , CFC , Kvakous , Sumys , Agent , Nazghul , Havran , Vrana , Havranek , Carlos Frank , Tekar , Andy , Angela , Janina , Shipanze , Simpan , Nazghulik , Potrusil , Potrus , Butrus , Potrusil , Simon , Auuu , NEMO , Silena opice , Meuznenapadazadnejmeno , Uhrun , Marmelada , Negr , Fnuk , Slim , Kvak , Dave , Bruntal , Arnie , Polda , Jen , Siddha , Silnickar , Bukvice , Zalud , Elvis , Nazghul , Chruadfa , Nazghul , Kato Yellow Ape , Cpt. Ape , King Of The Hill , Pterinochilus , Bad Platypus , Really Bad Ape , Looser , Looser , Looser , Megadeth , Mad Ape , Wraughhhh , ":) ] ;
15035: LD_ADDR_VAR 0 2
15039: PUSH
15040: LD_STRING Tupoun
15042: PUSH
15043: LD_STRING Opoce
15045: PUSH
15046: LD_STRING Opka
15048: PUSH
15049: LD_STRING Butrus
15051: PUSH
15052: LD_STRING Bubu
15054: PUSH
15055: LD_STRING Condor
15057: PUSH
15058: LD_STRING Kuklajs
15060: PUSH
15061: LD_STRING Simon
15063: PUSH
15064: LD_STRING Ugh
15066: PUSH
15067: LD_STRING Urgh
15069: PUSH
15070: LD_STRING Argh
15072: PUSH
15073: LD_STRING Aargh
15075: PUSH
15076: LD_STRING Hrumph
15078: PUSH
15079: LD_STRING Grumph
15081: PUSH
15082: LD_STRING Oorg
15084: PUSH
15085: LD_STRING Eghrr
15087: PUSH
15088: LD_STRING Rrrr
15090: PUSH
15091: LD_STRING Bark
15093: PUSH
15094: LD_STRING Wraughrr
15096: PUSH
15097: LD_STRING :-)
15099: PUSH
15100: LD_STRING Semik
15102: PUSH
15103: LD_STRING Hrgh
15105: PUSH
15106: LD_STRING Hur
15108: PUSH
15109: LD_STRING Havran
15111: PUSH
15112: LD_STRING Nazghul
15114: PUSH
15115: LD_STRING Brutal
15117: PUSH
15118: LD_STRING Kato Zluta Opoce
15120: PUSH
15121: LD_STRING Monkey
15123: PUSH
15124: LD_STRING Yeargh
15126: PUSH
15127: LD_STRING Marta
15129: PUSH
15130: LD_STRING Batman
15132: PUSH
15133: LD_STRING Barkman
15135: PUSH
15136: LD_STRING Xcenovsk
15138: PUSH
15139: LD_STRING David Love
15141: PUSH
15142: LD_STRING Freon
15144: PUSH
15145: LD_STRING Stoupik
15147: PUSH
15148: LD_STRING Quik
15150: PUSH
15151: LD_STRING Jam Prckovic Laren
15153: PUSH
15154: LD_STRING CFC
15156: PUSH
15157: LD_STRING Kvakous
15159: PUSH
15160: LD_STRING Sumys
15162: PUSH
15163: LD_STRING Agent
15165: PUSH
15166: LD_STRING Nazghul
15168: PUSH
15169: LD_STRING Havran
15171: PUSH
15172: LD_STRING Vrana
15174: PUSH
15175: LD_STRING Havranek
15177: PUSH
15178: LD_STRING Carlos Frank
15180: PUSH
15181: LD_STRING Tekar
15183: PUSH
15184: LD_STRING Andy
15186: PUSH
15187: LD_STRING Angela
15189: PUSH
15190: LD_STRING Janina
15192: PUSH
15193: LD_STRING Shipanze
15195: PUSH
15196: LD_STRING Simpan
15198: PUSH
15199: LD_STRING Nazghulik
15201: PUSH
15202: LD_STRING Potrusil
15204: PUSH
15205: LD_STRING Potrus
15207: PUSH
15208: LD_STRING Butrus
15210: PUSH
15211: LD_STRING Potrusil
15213: PUSH
15214: LD_STRING Simon
15216: PUSH
15217: LD_STRING Auuu
15219: PUSH
15220: LD_STRING NEMO
15222: PUSH
15223: LD_STRING Silena opice
15225: PUSH
15226: LD_STRING Meuznenapadazadnejmeno
15228: PUSH
15229: LD_STRING Uhrun
15231: PUSH
15232: LD_STRING Marmelada
15234: PUSH
15235: LD_STRING Negr
15237: PUSH
15238: LD_STRING Fnuk
15240: PUSH
15241: LD_STRING Slim
15243: PUSH
15244: LD_STRING Kvak
15246: PUSH
15247: LD_STRING Dave
15249: PUSH
15250: LD_STRING Bruntal
15252: PUSH
15253: LD_STRING Arnie
15255: PUSH
15256: LD_STRING Polda
15258: PUSH
15259: LD_STRING Jen
15261: PUSH
15262: LD_STRING Siddha
15264: PUSH
15265: LD_STRING Silnickar
15267: PUSH
15268: LD_STRING Bukvice
15270: PUSH
15271: LD_STRING Zalud
15273: PUSH
15274: LD_STRING Elvis
15276: PUSH
15277: LD_STRING Nazghul
15279: PUSH
15280: LD_STRING Chruadfa
15282: PUSH
15283: LD_STRING Nazghul
15285: PUSH
15286: LD_STRING Kato Yellow Ape
15288: PUSH
15289: LD_STRING Cpt. Ape
15291: PUSH
15292: LD_STRING King Of The Hill
15294: PUSH
15295: LD_STRING Pterinochilus
15297: PUSH
15298: LD_STRING Bad Platypus
15300: PUSH
15301: LD_STRING Really Bad Ape
15303: PUSH
15304: LD_STRING Looser
15306: PUSH
15307: LD_STRING Looser
15309: PUSH
15310: LD_STRING Looser
15312: PUSH
15313: LD_STRING Megadeth
15315: PUSH
15316: LD_STRING Mad Ape
15318: PUSH
15319: LD_STRING Wraughhhh
15321: PUSH
15322: LD_STRING ":)
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: ST_TO_ADDR
// uc_side := 0 ;
15422: LD_ADDR_OWVAR 20
15426: PUSH
15427: LD_INT 0
15429: ST_TO_ADDR
// uc_nation := nation_nature ;
15430: LD_ADDR_OWVAR 21
15434: PUSH
15435: LD_INT 0
15437: ST_TO_ADDR
// hc_class := class_apeman ;
15438: LD_ADDR_OWVAR 28
15442: PUSH
15443: LD_INT 12
15445: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
15446: LD_ADDR_OWVAR 30
15450: PUSH
15451: LD_INT 2
15453: PUSH
15454: LD_INT 2
15456: PUSH
15457: LD_INT 2
15459: PUSH
15460: LD_INT 2
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
15469: LD_ADDR_OWVAR 31
15473: PUSH
15474: LD_INT 0
15476: PPUSH
15477: LD_INT 2
15479: PPUSH
15480: CALL_OW 12
15484: PUSH
15485: LD_LOC 22
15489: PLUS
15490: PUSH
15491: LD_INT 0
15493: PPUSH
15494: LD_INT 2
15496: PPUSH
15497: CALL_OW 12
15501: PUSH
15502: LD_LOC 22
15506: PLUS
15507: PUSH
15508: LD_INT 0
15510: PPUSH
15511: LD_INT 2
15513: PPUSH
15514: CALL_OW 12
15518: PUSH
15519: LD_LOC 22
15523: PLUS
15524: PUSH
15525: LD_INT 0
15527: PPUSH
15528: LD_INT 2
15530: PPUSH
15531: CALL_OW 12
15535: PUSH
15536: LD_LOC 22
15540: PLUS
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
15548: LD_ADDR_OWVAR 29
15552: PUSH
15553: LD_INT 10
15555: PUSH
15556: LD_INT 12
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: ST_TO_ADDR
// hc_sex := sex_male ;
15563: LD_ADDR_OWVAR 27
15567: PUSH
15568: LD_INT 1
15570: ST_TO_ADDR
// hc_name := ape_names [ Rand ( 1 , ape_names ) ] ;
15571: LD_ADDR_OWVAR 26
15575: PUSH
15576: LD_VAR 0 2
15580: PUSH
15581: LD_INT 1
15583: PPUSH
15584: LD_VAR 0 2
15588: PPUSH
15589: CALL_OW 12
15593: ARRAY
15594: ST_TO_ADDR
// hc_importance := 0 ;
15595: LD_ADDR_OWVAR 32
15599: PUSH
15600: LD_INT 0
15602: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
15603: LD_ADDR_OWVAR 35
15607: PUSH
15608: LD_INT 20
15610: NEG
15611: PPUSH
15612: LD_INT 20
15614: PPUSH
15615: CALL_OW 12
15619: ST_TO_ADDR
// end ; end_of_file
15620: LD_VAR 0 1
15624: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
15625: LD_INT 0
15627: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
15628: LD_VAR 0 1
15632: PPUSH
15633: CALL_OW 255
15637: PUSH
15638: LD_VAR 0 4
15642: EQUAL
15643: IFFALSE 15662
// begin SetAchievement ( ACH_RAD ) ;
15645: LD_STRING ACH_RAD
15647: PPUSH
15648: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
15652: LD_STRING ACH_NL
15654: PPUSH
15655: LD_INT 1
15657: PPUSH
15658: CALL_OW 564
// end end ;
15662: LD_VAR 0 5
15666: RET
// export function SA_Win ( side ) ; begin
15667: LD_INT 0
15669: PPUSH
// case side of 1 :
15670: LD_VAR 0 1
15674: PUSH
15675: LD_INT 1
15677: DOUBLE
15678: EQUAL
15679: IFTRUE 15683
15681: GO 15696
15683: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
15684: LD_STRING ACH_AH
15686: PPUSH
15687: LD_INT 1
15689: PPUSH
15690: CALL_OW 564
15694: GO 15859
15696: LD_INT 2
15698: DOUBLE
15699: EQUAL
15700: IFTRUE 15704
15702: GO 15717
15704: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
15705: LD_STRING ACH_E
15707: PPUSH
15708: LD_INT 1
15710: PPUSH
15711: CALL_OW 564
15715: GO 15859
15717: LD_INT 3
15719: DOUBLE
15720: EQUAL
15721: IFTRUE 15725
15723: GO 15738
15725: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
15726: LD_STRING ACH_OOL
15728: PPUSH
15729: LD_INT 1
15731: PPUSH
15732: CALL_OW 564
15736: GO 15859
15738: LD_INT 1
15740: PUSH
15741: LD_INT 2
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: DOUBLE
15748: EQUAL
15749: IFTRUE 15753
15751: GO 15778
15753: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15754: LD_STRING ACH_AH
15756: PPUSH
15757: LD_REAL  5.00000000000000E-0001
15760: PPUSH
15761: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15765: LD_STRING ACH_E
15767: PPUSH
15768: LD_REAL  5.00000000000000E-0001
15771: PPUSH
15772: CALL_OW 564
// end ; [ 2 , 3 ] :
15776: GO 15859
15778: LD_INT 2
15780: PUSH
15781: LD_INT 3
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: DOUBLE
15788: EQUAL
15789: IFTRUE 15793
15791: GO 15818
15793: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
15794: LD_STRING ACH_OOL
15796: PPUSH
15797: LD_REAL  5.00000000000000E-0001
15800: PPUSH
15801: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15805: LD_STRING ACH_E
15807: PPUSH
15808: LD_REAL  5.00000000000000E-0001
15811: PPUSH
15812: CALL_OW 564
// end ; [ 3 , 1 ] :
15816: GO 15859
15818: LD_INT 3
15820: PUSH
15821: LD_INT 1
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: DOUBLE
15828: EQUAL
15829: IFTRUE 15833
15831: GO 15858
15833: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15834: LD_STRING ACH_AH
15836: PPUSH
15837: LD_REAL  5.00000000000000E-0001
15840: PPUSH
15841: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
15845: LD_STRING ACH_OOL
15847: PPUSH
15848: LD_REAL  5.00000000000000E-0001
15851: PPUSH
15852: CALL_OW 564
// end ; end ;
15856: GO 15859
15858: POP
// end ; end_of_file
15859: LD_VAR 0 2
15863: RET
// export function SetMpTechs ( ) ; var side , i ; begin
15864: LD_INT 0
15866: PPUSH
15867: PPUSH
15868: PPUSH
// for side = 1 to 8 do
15869: LD_ADDR_VAR 0 2
15873: PUSH
15874: DOUBLE
15875: LD_INT 1
15877: DEC
15878: ST_TO_ADDR
15879: LD_INT 8
15881: PUSH
15882: FOR_TO
15883: IFFALSE 16004
// begin for i = 1 to 72 do
15885: LD_ADDR_VAR 0 3
15889: PUSH
15890: DOUBLE
15891: LD_INT 1
15893: DEC
15894: ST_TO_ADDR
15895: LD_INT 72
15897: PUSH
15898: FOR_TO
15899: IFFALSE 15930
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15901: LD_VAR 0 3
15905: PPUSH
15906: LD_VAR 0 2
15910: PPUSH
15911: LD_INT 0
15913: PPUSH
15914: LD_VAR 0 3
15918: PPUSH
15919: CALL_OW 565
15923: PPUSH
15924: CALL_OW 322
15928: GO 15898
15930: POP
15931: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15932: LD_INT 73
15934: PPUSH
15935: LD_VAR 0 2
15939: PPUSH
15940: LD_INT 0
15942: PPUSH
15943: LD_INT 25
15945: PPUSH
15946: CALL_OW 565
15950: PPUSH
15951: CALL_OW 322
// for i = 0 to 40 do
15955: LD_ADDR_VAR 0 3
15959: PUSH
15960: DOUBLE
15961: LD_INT 0
15963: DEC
15964: ST_TO_ADDR
15965: LD_INT 40
15967: PUSH
15968: FOR_TO
15969: IFFALSE 16000
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15971: LD_VAR 0 3
15975: PPUSH
15976: LD_VAR 0 2
15980: PPUSH
15981: LD_INT 1
15983: PPUSH
15984: LD_VAR 0 3
15988: PPUSH
15989: CALL_OW 565
15993: PPUSH
15994: CALL_OW 324
15998: GO 15968
16000: POP
16001: POP
// end ;
16002: GO 15882
16004: POP
16005: POP
// end ;
16006: LD_VAR 0 1
16010: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
16011: LD_INT 0
16013: PPUSH
16014: PPUSH
16015: PPUSH
// for side = 1 to 8 do
16016: LD_ADDR_VAR 0 3
16020: PUSH
16021: DOUBLE
16022: LD_INT 1
16024: DEC
16025: ST_TO_ADDR
16026: LD_INT 8
16028: PUSH
16029: FOR_TO
16030: IFFALSE 20026
// begin for i = 1 to 73 do
16032: LD_ADDR_VAR 0 4
16036: PUSH
16037: DOUBLE
16038: LD_INT 1
16040: DEC
16041: ST_TO_ADDR
16042: LD_INT 73
16044: PUSH
16045: FOR_TO
16046: IFFALSE 16067
// SetTech ( i , side , state_disabled ) ;
16048: LD_VAR 0 4
16052: PPUSH
16053: LD_VAR 0 3
16057: PPUSH
16058: LD_INT 0
16060: PPUSH
16061: CALL_OW 322
16065: GO 16045
16067: POP
16068: POP
// for i = 0 to 40 do
16069: LD_ADDR_VAR 0 4
16073: PUSH
16074: DOUBLE
16075: LD_INT 0
16077: DEC
16078: ST_TO_ADDR
16079: LD_INT 40
16081: PUSH
16082: FOR_TO
16083: IFFALSE 16104
// SetRestrict ( i , side , false ) ;
16085: LD_VAR 0 4
16089: PPUSH
16090: LD_VAR 0 3
16094: PPUSH
16095: LD_INT 0
16097: PPUSH
16098: CALL_OW 324
16102: GO 16082
16104: POP
16105: POP
// case level of 1 :
16106: LD_VAR 0 1
16110: PUSH
16111: LD_INT 1
16113: DOUBLE
16114: EQUAL
16115: IFTRUE 16119
16117: GO 16272
16119: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16120: LD_INT 35
16122: PPUSH
16123: LD_VAR 0 3
16127: PPUSH
16128: LD_INT 1
16130: PPUSH
16131: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16135: LD_INT 45
16137: PPUSH
16138: LD_VAR 0 3
16142: PPUSH
16143: LD_INT 1
16145: PPUSH
16146: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16150: LD_INT 46
16152: PPUSH
16153: LD_VAR 0 3
16157: PPUSH
16158: LD_INT 1
16160: PPUSH
16161: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16165: LD_INT 47
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: LD_INT 1
16175: PPUSH
16176: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16180: LD_INT 0
16182: PPUSH
16183: LD_VAR 0 3
16187: PPUSH
16188: LD_INT 1
16190: PPUSH
16191: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16195: LD_INT 2
16197: PPUSH
16198: LD_VAR 0 3
16202: PPUSH
16203: LD_INT 1
16205: PPUSH
16206: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16210: LD_INT 4
16212: PPUSH
16213: LD_VAR 0 3
16217: PPUSH
16218: LD_INT 1
16220: PPUSH
16221: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16225: LD_INT 6
16227: PPUSH
16228: LD_VAR 0 3
16232: PPUSH
16233: LD_INT 1
16235: PPUSH
16236: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16240: LD_INT 29
16242: PPUSH
16243: LD_VAR 0 3
16247: PPUSH
16248: LD_INT 1
16250: PPUSH
16251: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16255: LD_INT 31
16257: PPUSH
16258: LD_VAR 0 3
16262: PPUSH
16263: LD_INT 1
16265: PPUSH
16266: CALL_OW 324
// end ; 2 :
16270: GO 20024
16272: LD_INT 2
16274: DOUBLE
16275: EQUAL
16276: IFTRUE 16280
16278: GO 16478
16280: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16281: LD_INT 35
16283: PPUSH
16284: LD_VAR 0 3
16288: PPUSH
16289: LD_INT 1
16291: PPUSH
16292: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16296: LD_INT 45
16298: PPUSH
16299: LD_VAR 0 3
16303: PPUSH
16304: LD_INT 1
16306: PPUSH
16307: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16311: LD_INT 46
16313: PPUSH
16314: LD_VAR 0 3
16318: PPUSH
16319: LD_INT 1
16321: PPUSH
16322: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16326: LD_INT 47
16328: PPUSH
16329: LD_VAR 0 3
16333: PPUSH
16334: LD_INT 1
16336: PPUSH
16337: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16341: LD_INT 1
16343: PPUSH
16344: LD_VAR 0 3
16348: PPUSH
16349: LD_INT 1
16351: PPUSH
16352: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16356: LD_INT 2
16358: PPUSH
16359: LD_VAR 0 3
16363: PPUSH
16364: LD_INT 1
16366: PPUSH
16367: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16371: LD_INT 11
16373: PPUSH
16374: LD_VAR 0 3
16378: PPUSH
16379: LD_INT 1
16381: PPUSH
16382: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16386: LD_INT 0
16388: PPUSH
16389: LD_VAR 0 3
16393: PPUSH
16394: LD_INT 1
16396: PPUSH
16397: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16401: LD_INT 2
16403: PPUSH
16404: LD_VAR 0 3
16408: PPUSH
16409: LD_INT 1
16411: PPUSH
16412: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16416: LD_INT 4
16418: PPUSH
16419: LD_VAR 0 3
16423: PPUSH
16424: LD_INT 1
16426: PPUSH
16427: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16431: LD_INT 6
16433: PPUSH
16434: LD_VAR 0 3
16438: PPUSH
16439: LD_INT 1
16441: PPUSH
16442: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16446: LD_INT 29
16448: PPUSH
16449: LD_VAR 0 3
16453: PPUSH
16454: LD_INT 1
16456: PPUSH
16457: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16461: LD_INT 31
16463: PPUSH
16464: LD_VAR 0 3
16468: PPUSH
16469: LD_INT 1
16471: PPUSH
16472: CALL_OW 324
// end ; 3 :
16476: GO 20024
16478: LD_INT 3
16480: DOUBLE
16481: EQUAL
16482: IFTRUE 16486
16484: GO 16939
16486: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16487: LD_INT 35
16489: PPUSH
16490: LD_VAR 0 3
16494: PPUSH
16495: LD_INT 1
16497: PPUSH
16498: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16502: LD_INT 45
16504: PPUSH
16505: LD_VAR 0 3
16509: PPUSH
16510: LD_INT 1
16512: PPUSH
16513: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16517: LD_INT 46
16519: PPUSH
16520: LD_VAR 0 3
16524: PPUSH
16525: LD_INT 1
16527: PPUSH
16528: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16532: LD_INT 47
16534: PPUSH
16535: LD_VAR 0 3
16539: PPUSH
16540: LD_INT 1
16542: PPUSH
16543: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16547: LD_INT 1
16549: PPUSH
16550: LD_VAR 0 3
16554: PPUSH
16555: LD_INT 1
16557: PPUSH
16558: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16562: LD_INT 2
16564: PPUSH
16565: LD_VAR 0 3
16569: PPUSH
16570: LD_INT 1
16572: PPUSH
16573: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16577: LD_INT 11
16579: PPUSH
16580: LD_VAR 0 3
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16592: LD_INT 48
16594: PPUSH
16595: LD_VAR 0 3
16599: PPUSH
16600: LD_INT 1
16602: PPUSH
16603: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16607: LD_INT 69
16609: PPUSH
16610: LD_VAR 0 3
16614: PPUSH
16615: LD_INT 1
16617: PPUSH
16618: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16622: LD_INT 39
16624: PPUSH
16625: LD_VAR 0 3
16629: PPUSH
16630: LD_INT 1
16632: PPUSH
16633: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16637: LD_INT 43
16639: PPUSH
16640: LD_VAR 0 3
16644: PPUSH
16645: LD_INT 1
16647: PPUSH
16648: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16652: LD_INT 51
16654: PPUSH
16655: LD_VAR 0 3
16659: PPUSH
16660: LD_INT 1
16662: PPUSH
16663: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16667: LD_INT 6
16669: PPUSH
16670: LD_VAR 0 3
16674: PPUSH
16675: LD_INT 1
16677: PPUSH
16678: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16682: LD_INT 0
16684: PPUSH
16685: LD_VAR 0 3
16689: PPUSH
16690: LD_INT 1
16692: PPUSH
16693: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16697: LD_INT 2
16699: PPUSH
16700: LD_VAR 0 3
16704: PPUSH
16705: LD_INT 1
16707: PPUSH
16708: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16712: LD_INT 3
16714: PPUSH
16715: LD_VAR 0 3
16719: PPUSH
16720: LD_INT 1
16722: PPUSH
16723: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16727: LD_INT 4
16729: PPUSH
16730: LD_VAR 0 3
16734: PPUSH
16735: LD_INT 1
16737: PPUSH
16738: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16742: LD_INT 6
16744: PPUSH
16745: LD_VAR 0 3
16749: PPUSH
16750: LD_INT 1
16752: PPUSH
16753: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16757: LD_INT 7
16759: PPUSH
16760: LD_VAR 0 3
16764: PPUSH
16765: LD_INT 1
16767: PPUSH
16768: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16772: LD_INT 8
16774: PPUSH
16775: LD_VAR 0 3
16779: PPUSH
16780: LD_INT 1
16782: PPUSH
16783: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16787: LD_INT 10
16789: PPUSH
16790: LD_VAR 0 3
16794: PPUSH
16795: LD_INT 1
16797: PPUSH
16798: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16802: LD_INT 15
16804: PPUSH
16805: LD_VAR 0 3
16809: PPUSH
16810: LD_INT 1
16812: PPUSH
16813: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16817: LD_INT 16
16819: PPUSH
16820: LD_VAR 0 3
16824: PPUSH
16825: LD_INT 1
16827: PPUSH
16828: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16832: LD_INT 17
16834: PPUSH
16835: LD_VAR 0 3
16839: PPUSH
16840: LD_INT 1
16842: PPUSH
16843: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16847: LD_INT 20
16849: PPUSH
16850: LD_VAR 0 3
16854: PPUSH
16855: LD_INT 1
16857: PPUSH
16858: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16862: LD_INT 26
16864: PPUSH
16865: LD_VAR 0 3
16869: PPUSH
16870: LD_INT 1
16872: PPUSH
16873: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16877: LD_INT 27
16879: PPUSH
16880: LD_VAR 0 3
16884: PPUSH
16885: LD_INT 1
16887: PPUSH
16888: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16892: LD_INT 29
16894: PPUSH
16895: LD_VAR 0 3
16899: PPUSH
16900: LD_INT 1
16902: PPUSH
16903: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16907: LD_INT 31
16909: PPUSH
16910: LD_VAR 0 3
16914: PPUSH
16915: LD_INT 1
16917: PPUSH
16918: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16922: LD_INT 32
16924: PPUSH
16925: LD_VAR 0 3
16929: PPUSH
16930: LD_INT 1
16932: PPUSH
16933: CALL_OW 324
// end ; 4 :
16937: GO 20024
16939: LD_INT 4
16941: DOUBLE
16942: EQUAL
16943: IFTRUE 16947
16945: GO 17895
16947: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16948: LD_INT 35
16950: PPUSH
16951: LD_VAR 0 3
16955: PPUSH
16956: LD_INT 1
16958: PPUSH
16959: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16963: LD_INT 45
16965: PPUSH
16966: LD_VAR 0 3
16970: PPUSH
16971: LD_INT 1
16973: PPUSH
16974: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16978: LD_INT 46
16980: PPUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 1
16988: PPUSH
16989: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16993: LD_INT 47
16995: PPUSH
16996: LD_VAR 0 3
17000: PPUSH
17001: LD_INT 1
17003: PPUSH
17004: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17008: LD_INT 1
17010: PPUSH
17011: LD_VAR 0 3
17015: PPUSH
17016: LD_INT 1
17018: PPUSH
17019: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17023: LD_INT 2
17025: PPUSH
17026: LD_VAR 0 3
17030: PPUSH
17031: LD_INT 1
17033: PPUSH
17034: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17038: LD_INT 11
17040: PPUSH
17041: LD_VAR 0 3
17045: PPUSH
17046: LD_INT 1
17048: PPUSH
17049: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17053: LD_INT 20
17055: PPUSH
17056: LD_VAR 0 3
17060: PPUSH
17061: LD_INT 1
17063: PPUSH
17064: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17068: LD_INT 48
17070: PPUSH
17071: LD_VAR 0 3
17075: PPUSH
17076: LD_INT 1
17078: PPUSH
17079: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17083: LD_INT 49
17085: PPUSH
17086: LD_VAR 0 3
17090: PPUSH
17091: LD_INT 1
17093: PPUSH
17094: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17098: LD_INT 69
17100: PPUSH
17101: LD_VAR 0 3
17105: PPUSH
17106: LD_INT 1
17108: PPUSH
17109: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17113: LD_INT 39
17115: PPUSH
17116: LD_VAR 0 3
17120: PPUSH
17121: LD_INT 1
17123: PPUSH
17124: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17128: LD_INT 34
17130: PPUSH
17131: LD_VAR 0 3
17135: PPUSH
17136: LD_INT 1
17138: PPUSH
17139: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17143: LD_INT 42
17145: PPUSH
17146: LD_VAR 0 3
17150: PPUSH
17151: LD_INT 1
17153: PPUSH
17154: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17158: LD_INT 44
17160: PPUSH
17161: LD_VAR 0 3
17165: PPUSH
17166: LD_INT 1
17168: PPUSH
17169: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17173: LD_INT 41
17175: PPUSH
17176: LD_VAR 0 3
17180: PPUSH
17181: LD_INT 1
17183: PPUSH
17184: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17188: LD_INT 43
17190: PPUSH
17191: LD_VAR 0 3
17195: PPUSH
17196: LD_INT 1
17198: PPUSH
17199: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17203: LD_INT 70
17205: PPUSH
17206: LD_VAR 0 3
17210: PPUSH
17211: LD_INT 1
17213: PPUSH
17214: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17218: LD_INT 51
17220: PPUSH
17221: LD_VAR 0 3
17225: PPUSH
17226: LD_INT 1
17228: PPUSH
17229: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17233: LD_INT 52
17235: PPUSH
17236: LD_VAR 0 3
17240: PPUSH
17241: LD_INT 1
17243: PPUSH
17244: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17248: LD_INT 6
17250: PPUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_INT 1
17258: PPUSH
17259: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17263: LD_INT 15
17265: PPUSH
17266: LD_VAR 0 3
17270: PPUSH
17271: LD_INT 1
17273: PPUSH
17274: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17278: LD_INT 7
17280: PPUSH
17281: LD_VAR 0 3
17285: PPUSH
17286: LD_INT 1
17288: PPUSH
17289: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17293: LD_INT 12
17295: PPUSH
17296: LD_VAR 0 3
17300: PPUSH
17301: LD_INT 1
17303: PPUSH
17304: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17308: LD_INT 18
17310: PPUSH
17311: LD_VAR 0 3
17315: PPUSH
17316: LD_INT 1
17318: PPUSH
17319: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17323: LD_INT 60
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: LD_INT 1
17333: PPUSH
17334: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17338: LD_INT 9
17340: PPUSH
17341: LD_VAR 0 3
17345: PPUSH
17346: LD_INT 1
17348: PPUSH
17349: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17353: LD_INT 30
17355: PPUSH
17356: LD_VAR 0 3
17360: PPUSH
17361: LD_INT 1
17363: PPUSH
17364: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17368: LD_INT 37
17370: PPUSH
17371: LD_VAR 0 3
17375: PPUSH
17376: LD_INT 1
17378: PPUSH
17379: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17383: LD_INT 5
17385: PPUSH
17386: LD_VAR 0 3
17390: PPUSH
17391: LD_INT 1
17393: PPUSH
17394: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17398: LD_INT 66
17400: PPUSH
17401: LD_VAR 0 3
17405: PPUSH
17406: LD_INT 1
17408: PPUSH
17409: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17413: LD_INT 21
17415: PPUSH
17416: LD_VAR 0 3
17420: PPUSH
17421: LD_INT 1
17423: PPUSH
17424: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17428: LD_INT 22
17430: PPUSH
17431: LD_VAR 0 3
17435: PPUSH
17436: LD_INT 1
17438: PPUSH
17439: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17443: LD_INT 54
17445: PPUSH
17446: LD_VAR 0 3
17450: PPUSH
17451: LD_INT 1
17453: PPUSH
17454: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17458: LD_INT 0
17460: PPUSH
17461: LD_VAR 0 3
17465: PPUSH
17466: LD_INT 1
17468: PPUSH
17469: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17473: LD_INT 1
17475: PPUSH
17476: LD_VAR 0 3
17480: PPUSH
17481: LD_INT 1
17483: PPUSH
17484: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17488: LD_INT 2
17490: PPUSH
17491: LD_VAR 0 3
17495: PPUSH
17496: LD_INT 1
17498: PPUSH
17499: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17503: LD_INT 3
17505: PPUSH
17506: LD_VAR 0 3
17510: PPUSH
17511: LD_INT 1
17513: PPUSH
17514: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17518: LD_INT 4
17520: PPUSH
17521: LD_VAR 0 3
17525: PPUSH
17526: LD_INT 1
17528: PPUSH
17529: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17533: LD_INT 5
17535: PPUSH
17536: LD_VAR 0 3
17540: PPUSH
17541: LD_INT 1
17543: PPUSH
17544: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17548: LD_INT 6
17550: PPUSH
17551: LD_VAR 0 3
17555: PPUSH
17556: LD_INT 1
17558: PPUSH
17559: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17563: LD_INT 7
17565: PPUSH
17566: LD_VAR 0 3
17570: PPUSH
17571: LD_INT 1
17573: PPUSH
17574: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17578: LD_INT 8
17580: PPUSH
17581: LD_VAR 0 3
17585: PPUSH
17586: LD_INT 1
17588: PPUSH
17589: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17593: LD_INT 10
17595: PPUSH
17596: LD_VAR 0 3
17600: PPUSH
17601: LD_INT 1
17603: PPUSH
17604: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17608: LD_INT 11
17610: PPUSH
17611: LD_VAR 0 3
17615: PPUSH
17616: LD_INT 1
17618: PPUSH
17619: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17623: LD_INT 12
17625: PPUSH
17626: LD_VAR 0 3
17630: PPUSH
17631: LD_INT 1
17633: PPUSH
17634: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17638: LD_INT 13
17640: PPUSH
17641: LD_VAR 0 3
17645: PPUSH
17646: LD_INT 1
17648: PPUSH
17649: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17653: LD_INT 14
17655: PPUSH
17656: LD_VAR 0 3
17660: PPUSH
17661: LD_INT 1
17663: PPUSH
17664: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17668: LD_INT 15
17670: PPUSH
17671: LD_VAR 0 3
17675: PPUSH
17676: LD_INT 1
17678: PPUSH
17679: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17683: LD_INT 16
17685: PPUSH
17686: LD_VAR 0 3
17690: PPUSH
17691: LD_INT 1
17693: PPUSH
17694: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17698: LD_INT 17
17700: PPUSH
17701: LD_VAR 0 3
17705: PPUSH
17706: LD_INT 1
17708: PPUSH
17709: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17713: LD_INT 19
17715: PPUSH
17716: LD_VAR 0 3
17720: PPUSH
17721: LD_INT 1
17723: PPUSH
17724: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17728: LD_INT 20
17730: PPUSH
17731: LD_VAR 0 3
17735: PPUSH
17736: LD_INT 1
17738: PPUSH
17739: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17743: LD_INT 21
17745: PPUSH
17746: LD_VAR 0 3
17750: PPUSH
17751: LD_INT 1
17753: PPUSH
17754: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17758: LD_INT 23
17760: PPUSH
17761: LD_VAR 0 3
17765: PPUSH
17766: LD_INT 1
17768: PPUSH
17769: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17773: LD_INT 26
17775: PPUSH
17776: LD_VAR 0 3
17780: PPUSH
17781: LD_INT 1
17783: PPUSH
17784: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17788: LD_INT 27
17790: PPUSH
17791: LD_VAR 0 3
17795: PPUSH
17796: LD_INT 1
17798: PPUSH
17799: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17803: LD_INT 28
17805: PPUSH
17806: LD_VAR 0 3
17810: PPUSH
17811: LD_INT 1
17813: PPUSH
17814: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17818: LD_INT 29
17820: PPUSH
17821: LD_VAR 0 3
17825: PPUSH
17826: LD_INT 1
17828: PPUSH
17829: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17833: LD_INT 30
17835: PPUSH
17836: LD_VAR 0 3
17840: PPUSH
17841: LD_INT 1
17843: PPUSH
17844: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17848: LD_INT 31
17850: PPUSH
17851: LD_VAR 0 3
17855: PPUSH
17856: LD_INT 1
17858: PPUSH
17859: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17863: LD_INT 32
17865: PPUSH
17866: LD_VAR 0 3
17870: PPUSH
17871: LD_INT 1
17873: PPUSH
17874: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17878: LD_INT 36
17880: PPUSH
17881: LD_VAR 0 3
17885: PPUSH
17886: LD_INT 1
17888: PPUSH
17889: CALL_OW 324
// end ; 5 :
17893: GO 20024
17895: LD_INT 5
17897: DOUBLE
17898: EQUAL
17899: IFTRUE 17903
17901: GO 19016
17903: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17904: LD_INT 35
17906: PPUSH
17907: LD_VAR 0 3
17911: PPUSH
17912: LD_INT 1
17914: PPUSH
17915: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17919: LD_INT 45
17921: PPUSH
17922: LD_VAR 0 3
17926: PPUSH
17927: LD_INT 1
17929: PPUSH
17930: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17934: LD_INT 46
17936: PPUSH
17937: LD_VAR 0 3
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17949: LD_INT 47
17951: PPUSH
17952: LD_VAR 0 3
17956: PPUSH
17957: LD_INT 1
17959: PPUSH
17960: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17964: LD_INT 1
17966: PPUSH
17967: LD_VAR 0 3
17971: PPUSH
17972: LD_INT 1
17974: PPUSH
17975: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17979: LD_INT 2
17981: PPUSH
17982: LD_VAR 0 3
17986: PPUSH
17987: LD_INT 1
17989: PPUSH
17990: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17994: LD_INT 11
17996: PPUSH
17997: LD_VAR 0 3
18001: PPUSH
18002: LD_INT 1
18004: PPUSH
18005: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18009: LD_INT 20
18011: PPUSH
18012: LD_VAR 0 3
18016: PPUSH
18017: LD_INT 1
18019: PPUSH
18020: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18024: LD_INT 48
18026: PPUSH
18027: LD_VAR 0 3
18031: PPUSH
18032: LD_INT 1
18034: PPUSH
18035: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18039: LD_INT 49
18041: PPUSH
18042: LD_VAR 0 3
18046: PPUSH
18047: LD_INT 1
18049: PPUSH
18050: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18054: LD_INT 69
18056: PPUSH
18057: LD_VAR 0 3
18061: PPUSH
18062: LD_INT 1
18064: PPUSH
18065: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18069: LD_INT 39
18071: PPUSH
18072: LD_VAR 0 3
18076: PPUSH
18077: LD_INT 1
18079: PPUSH
18080: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18084: LD_INT 34
18086: PPUSH
18087: LD_VAR 0 3
18091: PPUSH
18092: LD_INT 1
18094: PPUSH
18095: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18099: LD_INT 42
18101: PPUSH
18102: LD_VAR 0 3
18106: PPUSH
18107: LD_INT 1
18109: PPUSH
18110: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18114: LD_INT 44
18116: PPUSH
18117: LD_VAR 0 3
18121: PPUSH
18122: LD_INT 1
18124: PPUSH
18125: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18129: LD_INT 41
18131: PPUSH
18132: LD_VAR 0 3
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18144: LD_INT 40
18146: PPUSH
18147: LD_VAR 0 3
18151: PPUSH
18152: LD_INT 1
18154: PPUSH
18155: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18159: LD_INT 43
18161: PPUSH
18162: LD_VAR 0 3
18166: PPUSH
18167: LD_INT 1
18169: PPUSH
18170: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18174: LD_INT 70
18176: PPUSH
18177: LD_VAR 0 3
18181: PPUSH
18182: LD_INT 1
18184: PPUSH
18185: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18189: LD_INT 51
18191: PPUSH
18192: LD_VAR 0 3
18196: PPUSH
18197: LD_INT 1
18199: PPUSH
18200: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18204: LD_INT 52
18206: PPUSH
18207: LD_VAR 0 3
18211: PPUSH
18212: LD_INT 1
18214: PPUSH
18215: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18219: LD_INT 6
18221: PPUSH
18222: LD_VAR 0 3
18226: PPUSH
18227: LD_INT 1
18229: PPUSH
18230: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18234: LD_INT 15
18236: PPUSH
18237: LD_VAR 0 3
18241: PPUSH
18242: LD_INT 1
18244: PPUSH
18245: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18249: LD_INT 7
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: LD_INT 1
18259: PPUSH
18260: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18264: LD_INT 12
18266: PPUSH
18267: LD_VAR 0 3
18271: PPUSH
18272: LD_INT 1
18274: PPUSH
18275: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
18279: LD_INT 17
18281: PPUSH
18282: LD_VAR 0 3
18286: PPUSH
18287: LD_INT 1
18289: PPUSH
18290: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18294: LD_INT 18
18296: PPUSH
18297: LD_VAR 0 3
18301: PPUSH
18302: LD_INT 1
18304: PPUSH
18305: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18309: LD_INT 60
18311: PPUSH
18312: LD_VAR 0 3
18316: PPUSH
18317: LD_INT 1
18319: PPUSH
18320: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18324: LD_INT 32
18326: PPUSH
18327: LD_VAR 0 3
18331: PPUSH
18332: LD_INT 1
18334: PPUSH
18335: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18339: LD_INT 9
18341: PPUSH
18342: LD_VAR 0 3
18346: PPUSH
18347: LD_INT 1
18349: PPUSH
18350: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18354: LD_INT 57
18356: PPUSH
18357: LD_VAR 0 3
18361: PPUSH
18362: LD_INT 1
18364: PPUSH
18365: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18369: LD_INT 30
18371: PPUSH
18372: LD_VAR 0 3
18376: PPUSH
18377: LD_INT 1
18379: PPUSH
18380: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18384: LD_INT 37
18386: PPUSH
18387: LD_VAR 0 3
18391: PPUSH
18392: LD_INT 1
18394: PPUSH
18395: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18399: LD_INT 63
18401: PPUSH
18402: LD_VAR 0 3
18406: PPUSH
18407: LD_INT 1
18409: PPUSH
18410: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18414: LD_INT 3
18416: PPUSH
18417: LD_VAR 0 3
18421: PPUSH
18422: LD_INT 1
18424: PPUSH
18425: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18429: LD_INT 4
18431: PPUSH
18432: LD_VAR 0 3
18436: PPUSH
18437: LD_INT 1
18439: PPUSH
18440: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18444: LD_INT 5
18446: PPUSH
18447: LD_VAR 0 3
18451: PPUSH
18452: LD_INT 1
18454: PPUSH
18455: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18459: LD_INT 66
18461: PPUSH
18462: LD_VAR 0 3
18466: PPUSH
18467: LD_INT 1
18469: PPUSH
18470: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18474: LD_INT 21
18476: PPUSH
18477: LD_VAR 0 3
18481: PPUSH
18482: LD_INT 1
18484: PPUSH
18485: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18489: LD_INT 22
18491: PPUSH
18492: LD_VAR 0 3
18496: PPUSH
18497: LD_INT 1
18499: PPUSH
18500: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18504: LD_INT 19
18506: PPUSH
18507: LD_VAR 0 3
18511: PPUSH
18512: LD_INT 1
18514: PPUSH
18515: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18519: LD_INT 54
18521: PPUSH
18522: LD_VAR 0 3
18526: PPUSH
18527: LD_INT 1
18529: PPUSH
18530: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18534: LD_INT 55
18536: PPUSH
18537: LD_VAR 0 3
18541: PPUSH
18542: LD_INT 1
18544: PPUSH
18545: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18549: LD_INT 0
18551: PPUSH
18552: LD_VAR 0 3
18556: PPUSH
18557: LD_INT 1
18559: PPUSH
18560: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18564: LD_INT 1
18566: PPUSH
18567: LD_VAR 0 3
18571: PPUSH
18572: LD_INT 1
18574: PPUSH
18575: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18579: LD_INT 2
18581: PPUSH
18582: LD_VAR 0 3
18586: PPUSH
18587: LD_INT 1
18589: PPUSH
18590: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18594: LD_INT 3
18596: PPUSH
18597: LD_VAR 0 3
18601: PPUSH
18602: LD_INT 1
18604: PPUSH
18605: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18609: LD_INT 4
18611: PPUSH
18612: LD_VAR 0 3
18616: PPUSH
18617: LD_INT 1
18619: PPUSH
18620: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18624: LD_INT 5
18626: PPUSH
18627: LD_VAR 0 3
18631: PPUSH
18632: LD_INT 1
18634: PPUSH
18635: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18639: LD_INT 6
18641: PPUSH
18642: LD_VAR 0 3
18646: PPUSH
18647: LD_INT 1
18649: PPUSH
18650: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18654: LD_INT 7
18656: PPUSH
18657: LD_VAR 0 3
18661: PPUSH
18662: LD_INT 1
18664: PPUSH
18665: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18669: LD_INT 8
18671: PPUSH
18672: LD_VAR 0 3
18676: PPUSH
18677: LD_INT 1
18679: PPUSH
18680: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18684: LD_INT 10
18686: PPUSH
18687: LD_VAR 0 3
18691: PPUSH
18692: LD_INT 1
18694: PPUSH
18695: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18699: LD_INT 11
18701: PPUSH
18702: LD_VAR 0 3
18706: PPUSH
18707: LD_INT 1
18709: PPUSH
18710: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18714: LD_INT 12
18716: PPUSH
18717: LD_VAR 0 3
18721: PPUSH
18722: LD_INT 1
18724: PPUSH
18725: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18729: LD_INT 13
18731: PPUSH
18732: LD_VAR 0 3
18736: PPUSH
18737: LD_INT 1
18739: PPUSH
18740: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18744: LD_INT 14
18746: PPUSH
18747: LD_VAR 0 3
18751: PPUSH
18752: LD_INT 1
18754: PPUSH
18755: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18759: LD_INT 15
18761: PPUSH
18762: LD_VAR 0 3
18766: PPUSH
18767: LD_INT 1
18769: PPUSH
18770: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18774: LD_INT 16
18776: PPUSH
18777: LD_VAR 0 3
18781: PPUSH
18782: LD_INT 1
18784: PPUSH
18785: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18789: LD_INT 17
18791: PPUSH
18792: LD_VAR 0 3
18796: PPUSH
18797: LD_INT 1
18799: PPUSH
18800: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18804: LD_INT 18
18806: PPUSH
18807: LD_VAR 0 3
18811: PPUSH
18812: LD_INT 1
18814: PPUSH
18815: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18819: LD_INT 19
18821: PPUSH
18822: LD_VAR 0 3
18826: PPUSH
18827: LD_INT 1
18829: PPUSH
18830: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18834: LD_INT 20
18836: PPUSH
18837: LD_VAR 0 3
18841: PPUSH
18842: LD_INT 1
18844: PPUSH
18845: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18849: LD_INT 21
18851: PPUSH
18852: LD_VAR 0 3
18856: PPUSH
18857: LD_INT 1
18859: PPUSH
18860: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18864: LD_INT 23
18866: PPUSH
18867: LD_VAR 0 3
18871: PPUSH
18872: LD_INT 1
18874: PPUSH
18875: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18879: LD_INT 26
18881: PPUSH
18882: LD_VAR 0 3
18886: PPUSH
18887: LD_INT 1
18889: PPUSH
18890: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18894: LD_INT 27
18896: PPUSH
18897: LD_VAR 0 3
18901: PPUSH
18902: LD_INT 1
18904: PPUSH
18905: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18909: LD_INT 28
18911: PPUSH
18912: LD_VAR 0 3
18916: PPUSH
18917: LD_INT 1
18919: PPUSH
18920: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18924: LD_INT 29
18926: PPUSH
18927: LD_VAR 0 3
18931: PPUSH
18932: LD_INT 1
18934: PPUSH
18935: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18939: LD_INT 30
18941: PPUSH
18942: LD_VAR 0 3
18946: PPUSH
18947: LD_INT 1
18949: PPUSH
18950: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18954: LD_INT 31
18956: PPUSH
18957: LD_VAR 0 3
18961: PPUSH
18962: LD_INT 1
18964: PPUSH
18965: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18969: LD_INT 32
18971: PPUSH
18972: LD_VAR 0 3
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18984: LD_INT 33
18986: PPUSH
18987: LD_VAR 0 3
18991: PPUSH
18992: LD_INT 1
18994: PPUSH
18995: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18999: LD_INT 36
19001: PPUSH
19002: LD_VAR 0 3
19006: PPUSH
19007: LD_INT 1
19009: PPUSH
19010: CALL_OW 324
// end ; 6 :
19014: GO 20024
19016: LD_INT 6
19018: DOUBLE
19019: EQUAL
19020: IFTRUE 19024
19022: GO 19949
19024: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19025: LD_INT 35
19027: PPUSH
19028: LD_VAR 0 3
19032: PPUSH
19033: LD_INT 1
19035: PPUSH
19036: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19040: LD_INT 45
19042: PPUSH
19043: LD_VAR 0 3
19047: PPUSH
19048: LD_INT 1
19050: PPUSH
19051: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19055: LD_INT 46
19057: PPUSH
19058: LD_VAR 0 3
19062: PPUSH
19063: LD_INT 1
19065: PPUSH
19066: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19070: LD_INT 47
19072: PPUSH
19073: LD_VAR 0 3
19077: PPUSH
19078: LD_INT 1
19080: PPUSH
19081: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19085: LD_INT 1
19087: PPUSH
19088: LD_VAR 0 3
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19100: LD_INT 2
19102: PPUSH
19103: LD_VAR 0 3
19107: PPUSH
19108: LD_INT 1
19110: PPUSH
19111: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19115: LD_INT 11
19117: PPUSH
19118: LD_VAR 0 3
19122: PPUSH
19123: LD_INT 1
19125: PPUSH
19126: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19130: LD_INT 20
19132: PPUSH
19133: LD_VAR 0 3
19137: PPUSH
19138: LD_INT 1
19140: PPUSH
19141: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19145: LD_INT 48
19147: PPUSH
19148: LD_VAR 0 3
19152: PPUSH
19153: LD_INT 1
19155: PPUSH
19156: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19160: LD_INT 49
19162: PPUSH
19163: LD_VAR 0 3
19167: PPUSH
19168: LD_INT 1
19170: PPUSH
19171: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
19175: LD_INT 50
19177: PPUSH
19178: LD_VAR 0 3
19182: PPUSH
19183: LD_INT 1
19185: PPUSH
19186: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19190: LD_INT 69
19192: PPUSH
19193: LD_VAR 0 3
19197: PPUSH
19198: LD_INT 1
19200: PPUSH
19201: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19205: LD_INT 39
19207: PPUSH
19208: LD_VAR 0 3
19212: PPUSH
19213: LD_INT 1
19215: PPUSH
19216: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19220: LD_INT 34
19222: PPUSH
19223: LD_VAR 0 3
19227: PPUSH
19228: LD_INT 1
19230: PPUSH
19231: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
19235: LD_INT 42
19237: PPUSH
19238: LD_VAR 0 3
19242: PPUSH
19243: LD_INT 1
19245: PPUSH
19246: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
19250: LD_INT 44
19252: PPUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: LD_INT 1
19260: PPUSH
19261: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
19265: LD_INT 41
19267: PPUSH
19268: LD_VAR 0 3
19272: PPUSH
19273: LD_INT 1
19275: PPUSH
19276: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
19280: LD_INT 13
19282: PPUSH
19283: LD_VAR 0 3
19287: PPUSH
19288: LD_INT 1
19290: PPUSH
19291: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
19295: LD_INT 40
19297: PPUSH
19298: LD_VAR 0 3
19302: PPUSH
19303: LD_INT 1
19305: PPUSH
19306: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19310: LD_INT 43
19312: PPUSH
19313: LD_VAR 0 3
19317: PPUSH
19318: LD_INT 1
19320: PPUSH
19321: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19325: LD_INT 70
19327: PPUSH
19328: LD_VAR 0 3
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
19340: LD_INT 23
19342: PPUSH
19343: LD_VAR 0 3
19347: PPUSH
19348: LD_INT 1
19350: PPUSH
19351: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19355: LD_INT 51
19357: PPUSH
19358: LD_VAR 0 3
19362: PPUSH
19363: LD_INT 1
19365: PPUSH
19366: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19370: LD_INT 52
19372: PPUSH
19373: LD_VAR 0 3
19377: PPUSH
19378: LD_INT 1
19380: PPUSH
19381: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19385: LD_INT 6
19387: PPUSH
19388: LD_VAR 0 3
19392: PPUSH
19393: LD_INT 1
19395: PPUSH
19396: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19400: LD_INT 15
19402: PPUSH
19403: LD_VAR 0 3
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19415: LD_INT 7
19417: PPUSH
19418: LD_VAR 0 3
19422: PPUSH
19423: LD_INT 1
19425: PPUSH
19426: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19430: LD_INT 12
19432: PPUSH
19433: LD_VAR 0 3
19437: PPUSH
19438: LD_INT 1
19440: PPUSH
19441: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19445: LD_INT 10
19447: PPUSH
19448: LD_VAR 0 3
19452: PPUSH
19453: LD_INT 1
19455: PPUSH
19456: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19460: LD_INT 17
19462: PPUSH
19463: LD_VAR 0 3
19467: PPUSH
19468: LD_INT 1
19470: PPUSH
19471: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19475: LD_INT 18
19477: PPUSH
19478: LD_VAR 0 3
19482: PPUSH
19483: LD_INT 1
19485: PPUSH
19486: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19490: LD_INT 60
19492: PPUSH
19493: LD_VAR 0 3
19497: PPUSH
19498: LD_INT 1
19500: PPUSH
19501: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19505: LD_INT 61
19507: PPUSH
19508: LD_VAR 0 3
19512: PPUSH
19513: LD_INT 1
19515: PPUSH
19516: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19520: LD_INT 32
19522: PPUSH
19523: LD_VAR 0 3
19527: PPUSH
19528: LD_INT 1
19530: PPUSH
19531: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19535: LD_INT 27
19537: PPUSH
19538: LD_VAR 0 3
19542: PPUSH
19543: LD_INT 1
19545: PPUSH
19546: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19550: LD_INT 36
19552: PPUSH
19553: LD_VAR 0 3
19557: PPUSH
19558: LD_INT 1
19560: PPUSH
19561: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19565: LD_INT 33
19567: PPUSH
19568: LD_VAR 0 3
19572: PPUSH
19573: LD_INT 1
19575: PPUSH
19576: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19580: LD_INT 9
19582: PPUSH
19583: LD_VAR 0 3
19587: PPUSH
19588: LD_INT 1
19590: PPUSH
19591: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19595: LD_INT 38
19597: PPUSH
19598: LD_VAR 0 3
19602: PPUSH
19603: LD_INT 1
19605: PPUSH
19606: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19610: LD_INT 57
19612: PPUSH
19613: LD_VAR 0 3
19617: PPUSH
19618: LD_INT 1
19620: PPUSH
19621: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19625: LD_INT 58
19627: PPUSH
19628: LD_VAR 0 3
19632: PPUSH
19633: LD_INT 1
19635: PPUSH
19636: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19640: LD_INT 28
19642: PPUSH
19643: LD_VAR 0 3
19647: PPUSH
19648: LD_INT 1
19650: PPUSH
19651: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19655: LD_INT 29
19657: PPUSH
19658: LD_VAR 0 3
19662: PPUSH
19663: LD_INT 1
19665: PPUSH
19666: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19670: LD_INT 30
19672: PPUSH
19673: LD_VAR 0 3
19677: PPUSH
19678: LD_INT 1
19680: PPUSH
19681: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19685: LD_INT 37
19687: PPUSH
19688: LD_VAR 0 3
19692: PPUSH
19693: LD_INT 1
19695: PPUSH
19696: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19700: LD_INT 63
19702: PPUSH
19703: LD_VAR 0 3
19707: PPUSH
19708: LD_INT 1
19710: PPUSH
19711: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19715: LD_INT 64
19717: PPUSH
19718: LD_VAR 0 3
19722: PPUSH
19723: LD_INT 1
19725: PPUSH
19726: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19730: LD_INT 3
19732: PPUSH
19733: LD_VAR 0 3
19737: PPUSH
19738: LD_INT 1
19740: PPUSH
19741: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19745: LD_INT 4
19747: PPUSH
19748: LD_VAR 0 3
19752: PPUSH
19753: LD_INT 1
19755: PPUSH
19756: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19760: LD_INT 5
19762: PPUSH
19763: LD_VAR 0 3
19767: PPUSH
19768: LD_INT 1
19770: PPUSH
19771: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19775: LD_INT 8
19777: PPUSH
19778: LD_VAR 0 3
19782: PPUSH
19783: LD_INT 1
19785: PPUSH
19786: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19790: LD_INT 66
19792: PPUSH
19793: LD_VAR 0 3
19797: PPUSH
19798: LD_INT 1
19800: PPUSH
19801: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19805: LD_INT 67
19807: PPUSH
19808: LD_VAR 0 3
19812: PPUSH
19813: LD_INT 1
19815: PPUSH
19816: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19820: LD_INT 21
19822: PPUSH
19823: LD_VAR 0 3
19827: PPUSH
19828: LD_INT 1
19830: PPUSH
19831: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19835: LD_INT 22
19837: PPUSH
19838: LD_VAR 0 3
19842: PPUSH
19843: LD_INT 1
19845: PPUSH
19846: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19850: LD_INT 19
19852: PPUSH
19853: LD_VAR 0 3
19857: PPUSH
19858: LD_INT 1
19860: PPUSH
19861: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19865: LD_INT 26
19867: PPUSH
19868: LD_VAR 0 3
19872: PPUSH
19873: LD_INT 1
19875: PPUSH
19876: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19880: LD_INT 54
19882: PPUSH
19883: LD_VAR 0 3
19887: PPUSH
19888: LD_INT 1
19890: PPUSH
19891: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19895: LD_INT 55
19897: PPUSH
19898: LD_VAR 0 3
19902: PPUSH
19903: LD_INT 1
19905: PPUSH
19906: CALL_OW 322
// for i = 0 to 39 do
19910: LD_ADDR_VAR 0 4
19914: PUSH
19915: DOUBLE
19916: LD_INT 0
19918: DEC
19919: ST_TO_ADDR
19920: LD_INT 39
19922: PUSH
19923: FOR_TO
19924: IFFALSE 19945
// SetRestrict ( i , side , true ) ;
19926: LD_VAR 0 4
19930: PPUSH
19931: LD_VAR 0 3
19935: PPUSH
19936: LD_INT 1
19938: PPUSH
19939: CALL_OW 324
19943: GO 19923
19945: POP
19946: POP
// end ; else
19947: GO 20024
19949: POP
// begin for i = 1 to 73 do
19950: LD_ADDR_VAR 0 4
19954: PUSH
19955: DOUBLE
19956: LD_INT 1
19958: DEC
19959: ST_TO_ADDR
19960: LD_INT 73
19962: PUSH
19963: FOR_TO
19964: IFFALSE 19985
// SetTech ( i , side , state_enabled ) ;
19966: LD_VAR 0 4
19970: PPUSH
19971: LD_VAR 0 3
19975: PPUSH
19976: LD_INT 1
19978: PPUSH
19979: CALL_OW 322
19983: GO 19963
19985: POP
19986: POP
// for i = 0 to 39 do
19987: LD_ADDR_VAR 0 4
19991: PUSH
19992: DOUBLE
19993: LD_INT 0
19995: DEC
19996: ST_TO_ADDR
19997: LD_INT 39
19999: PUSH
20000: FOR_TO
20001: IFFALSE 20022
// SetRestrict ( i , side , true ) ;
20003: LD_VAR 0 4
20007: PPUSH
20008: LD_VAR 0 3
20012: PPUSH
20013: LD_INT 1
20015: PPUSH
20016: CALL_OW 324
20020: GO 20000
20022: POP
20023: POP
// end ; end ; end ;
20024: GO 16029
20026: POP
20027: POP
// end ;
20028: LD_VAR 0 2
20032: RET
