// export Neutral ; export def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_shared_vision , def_morale_flags , def_siberite_detection , def_second_oil , def_amount_of_apemen , def_find_people , def_lost_people , def_other_nation , def_vehicles_too ; export is_depot , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , battle_flags_id , chance_loose , chance_find , amount_of_apemen ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export buildings_def , start_def ; export commander ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if MultiPlayer then
  11: LD_OWVAR 4
  15: IFFALSE 69
// begin Your_Side = mp_player_side ;
  17: LD_ADDR_OWVAR 2
  21: PUSH
  22: LD_OWVAR 7
  26: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  27: LD_ADDR_EXP 29
  31: PUSH
  32: LD_OWVAR 17
  36: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  37: LD_ADDR_EXP 27
  41: PUSH
  42: LD_OWVAR 15
  46: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  47: LD_ADDR_EXP 30
  51: PUSH
  52: LD_OWVAR 16
  56: ST_TO_ADDR
// Teams = mp_teams ;
  57: LD_ADDR_EXP 28
  61: PUSH
  62: LD_OWVAR 12
  66: ST_TO_ADDR
// end else
  67: GO 223
// begin Your_Side = 4 ;
  69: LD_ADDR_OWVAR 2
  73: PUSH
  74: LD_INT 4
  76: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
  77: LD_ADDR_EXP 29
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 3
  87: PUSH
  88: LD_INT 0
  90: PUSH
  91: LD_INT 1
  93: PUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 2
  99: PUSH
 100: LD_INT 4
 102: PUSH
 103: LD_INT 0
 105: PUSH
 106: EMPTY
 107: LIST
 108: LIST
 109: LIST
 110: LIST
 111: LIST
 112: LIST
 113: LIST
 114: LIST
 115: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 116: LD_ADDR_EXP 27
 120: PUSH
 121: LD_INT 0
 123: PUSH
 124: LD_INT 1
 126: PUSH
 127: LD_INT 0
 129: PUSH
 130: LD_INT 2
 132: PUSH
 133: LD_INT 0
 135: PUSH
 136: LD_INT 1
 138: PUSH
 139: LD_INT 2
 141: PUSH
 142: LD_INT 0
 144: PUSH
 145: EMPTY
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 3 , 0 , 3 , 3 , 0 ] ;
 155: LD_ADDR_EXP 30
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 3
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 3
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 0
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 7 , 4 ] ] ;
 194: LD_ADDR_EXP 28
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 6
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 7
 211: PUSH
 212: LD_INT 4
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// end ; if MultiPlayer then
 223: LD_OWVAR 4
 227: IFFALSE 439
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 229: LD_ADDR_EXP 2
 233: PUSH
 234: LD_INT 0
 236: PPUSH
 237: CALL_OW 426
 241: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 242: LD_ADDR_EXP 3
 246: PUSH
 247: LD_INT 1
 249: PPUSH
 250: CALL_OW 426
 254: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 255: LD_ADDR_EXP 4
 259: PUSH
 260: LD_INT 2
 262: PPUSH
 263: CALL_OW 426
 267: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 268: LD_ADDR_EXP 5
 272: PUSH
 273: LD_INT 3
 275: PPUSH
 276: CALL_OW 426
 280: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 281: LD_ADDR_EXP 6
 285: PUSH
 286: LD_INT 4
 288: PPUSH
 289: CALL_OW 426
 293: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 294: LD_ADDR_EXP 7
 298: PUSH
 299: LD_INT 10
 301: PPUSH
 302: CALL_OW 426
 306: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 307: LD_ADDR_EXP 8
 311: PUSH
 312: LD_INT 11
 314: PPUSH
 315: CALL_OW 426
 319: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 320: LD_ADDR_EXP 9
 324: PUSH
 325: LD_INT 12
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 333: LD_ADDR_EXP 11
 337: PUSH
 338: LD_INT 13
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_find_people = GetMultiplayerSetting ( 14 ) ;
 346: LD_ADDR_EXP 12
 350: PUSH
 351: LD_INT 14
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_lost_people = GetMultiplayerSetting ( 15 ) ;
 359: LD_ADDR_EXP 13
 363: PUSH
 364: LD_INT 15
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_second_oil = GetMultiplayerSetting ( 16 ) ;
 372: LD_ADDR_EXP 10
 376: PUSH
 377: LD_INT 16
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_other_nation = GetMultiplayerSetting ( 17 ) ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 17
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_vehicles_too = GetMultiplayerSetting ( 18 ) ;
 398: LD_ADDR_EXP 15
 402: PUSH
 403: LD_INT 18
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_game_rules = GetMultiplayerSetting ( 21 ) ;
 411: LD_ADDR_EXP 38
 415: PUSH
 416: LD_INT 21
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 424: LD_ADDR_VAR 0 9
 428: PUSH
 429: LD_INT 22
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// end else
 437: GO 571
// begin randomize ;
 439: CALL_OW 10
// def_base_level = 3 ;
 443: LD_ADDR_EXP 2
 447: PUSH
 448: LD_INT 3
 450: ST_TO_ADDR
// def_amount_of_people = 1 ;
 451: LD_ADDR_EXP 3
 455: PUSH
 456: LD_INT 1
 458: ST_TO_ADDR
// def_initial_level = 1 ;
 459: LD_ADDR_EXP 4
 463: PUSH
 464: LD_INT 1
 466: ST_TO_ADDR
// def_starting_resources = 2 ;
 467: LD_ADDR_EXP 5
 471: PUSH
 472: LD_INT 2
 474: ST_TO_ADDR
// def_shipments_density = 1 ;
 475: LD_ADDR_EXP 6
 479: PUSH
 480: LD_INT 1
 482: ST_TO_ADDR
// def_shared_vision = 1 ;
 483: LD_ADDR_EXP 7
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// def_morale_flags = 1 ;
 491: LD_ADDR_EXP 8
 495: PUSH
 496: LD_INT 1
 498: ST_TO_ADDR
// def_siberite_detection = 1 ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 1
 506: ST_TO_ADDR
// def_amount_of_apemen = 1 ;
 507: LD_ADDR_EXP 11
 511: PUSH
 512: LD_INT 1
 514: ST_TO_ADDR
// def_find_people = 2 ;
 515: LD_ADDR_EXP 12
 519: PUSH
 520: LD_INT 2
 522: ST_TO_ADDR
// def_second_oil = 1 ;
 523: LD_ADDR_EXP 10
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// def_lost_people = 1 ;
 531: LD_ADDR_EXP 13
 535: PUSH
 536: LD_INT 1
 538: ST_TO_ADDR
// def_other_nation = 1 ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_INT 1
 546: ST_TO_ADDR
// def_vehicles_too = 0 ;
 547: LD_ADDR_EXP 15
 551: PUSH
 552: LD_INT 0
 554: ST_TO_ADDR
// def_game_rules = 0 ;
 555: LD_ADDR_EXP 38
 559: PUSH
 560: LD_INT 0
 562: ST_TO_ADDR
// tech_level = 4 ;
 563: LD_ADDR_VAR 0 9
 567: PUSH
 568: LD_INT 4
 570: ST_TO_ADDR
// end ; InitGameRules ;
 571: CALL 13235 0 0
// if def_game_rules = 0 then
 575: LD_EXP 38
 579: PUSH
 580: LD_INT 0
 582: EQUAL
 583: IFFALSE 610
// begin if isSGUI then
 585: LD_OWVAR 83
 589: IFFALSE 597
// setMpTechs ( ) else
 591: CALL 15852 0 0
 595: GO 610
// begin SetMpTechLevel ( tech_level + 1 ) ;
 597: LD_VAR 0 9
 601: PUSH
 602: LD_INT 1
 604: PLUS
 605: PPUSH
 606: CALL 15999 0 1
// end ; end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 610: LD_ADDR_EXP 16
 614: PUSH
 615: LD_INT 0
 617: PUSH
 618: LD_INT 1
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: LD_INT 1
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: PUSH
 633: LD_EXP 2
 637: PUSH
 638: LD_INT 1
 640: PLUS
 641: ARRAY
 642: ST_TO_ADDR
// initial_level = [ 1 , 2 , 3 , 5 , 7 ] [ def_initial_level + 1 ] ;
 643: LD_ADDR_EXP 18
 647: PUSH
 648: LD_INT 1
 650: PUSH
 651: LD_INT 2
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 7
 662: PUSH
 663: EMPTY
 664: LIST
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_EXP 4
 674: PUSH
 675: LD_INT 1
 677: PLUS
 678: ARRAY
 679: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 680: LD_ADDR_EXP 20
 684: PUSH
 685: LD_INT 0
 687: PUSH
 688: LD_INT 0
 690: PUSH
 691: LD_INT 0
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 30
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 50
 715: PUSH
 716: LD_INT 20
 718: PUSH
 719: LD_INT 0
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PUSH
 727: LD_INT 80
 729: PUSH
 730: LD_INT 40
 732: PUSH
 733: LD_INT 20
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: LIST
 745: LIST
 746: PUSH
 747: LD_EXP 5
 751: PUSH
 752: LD_INT 1
 754: PLUS
 755: ARRAY
 756: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_EXP 3
 766: PUSH
 767: LD_INT 4
 769: PLUS
 770: ST_TO_ADDR
// shipments_density := 18 + ( def_shipments_density ) * 38 ;
 771: LD_ADDR_EXP 21
 775: PUSH
 776: LD_INT 18
 778: PUSH
 779: LD_EXP 6
 783: PUSH
 784: LD_INT 38
 786: MUL
 787: PLUS
 788: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
 789: LD_ADDR_EXP 26
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: LD_INT 6
 802: PUSH
 803: LD_INT 9
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: PUSH
 812: LD_EXP 11
 816: PUSH
 817: LD_INT 1
 819: PLUS
 820: ARRAY
 821: ST_TO_ADDR
// if def_find_people then
 822: LD_EXP 12
 826: IFFALSE 860
// chance_find = 20 * ( 100 - ( ( def_find_people - 1 ) * 10 ) / 100 ) else
 828: LD_ADDR_EXP 25
 832: PUSH
 833: LD_INT 20
 835: PUSH
 836: LD_INT 100
 838: PUSH
 839: LD_EXP 12
 843: PUSH
 844: LD_INT 1
 846: MINUS
 847: PUSH
 848: LD_INT 10
 850: MUL
 851: PUSH
 852: LD_INT 100
 854: DIVREAL
 855: MINUS
 856: MUL
 857: ST_TO_ADDR
 858: GO 868
// chance_find = 21 ;
 860: LD_ADDR_EXP 25
 864: PUSH
 865: LD_INT 21
 867: ST_TO_ADDR
// if def_lost_people then
 868: LD_EXP 13
 872: IFFALSE 906
// chance_loose = 500 * ( 100 - ( ( def_find_people - 1 ) * 12 ) / 100 ) else
 874: LD_ADDR_EXP 24
 878: PUSH
 879: LD_INT 500
 881: PUSH
 882: LD_INT 100
 884: PUSH
 885: LD_EXP 12
 889: PUSH
 890: LD_INT 1
 892: MINUS
 893: PUSH
 894: LD_INT 12
 896: MUL
 897: PUSH
 898: LD_INT 100
 900: DIVREAL
 901: MINUS
 902: MUL
 903: ST_TO_ADDR
 904: GO 914
// chance_loose = 0 ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_INT 0
 913: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
 914: LD_ADDR_EXP 22
 918: PUSH
 919: LD_INT 1
 921: NEG
 922: PUSH
 923: LD_INT 350
 925: PUSH
 926: LD_INT 700
 928: PUSH
 929: LD_INT 1400
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_EXP 8
 946: PUSH
 947: LD_INT 1
 949: PLUS
 950: ARRAY
 951: ST_TO_ADDR
// battle_flags_id = [ ] ;
 952: LD_ADDR_EXP 23
 956: PUSH
 957: EMPTY
 958: ST_TO_ADDR
// end ;
 959: LD_VAR 0 1
 963: RET
// function prepare_map_coordinates ; begin
 964: LD_INT 0
 966: PPUSH
// start_def = [ [ 24 , 13 ] , [ 93 , 12 ] , [ 53 , 79 ] , [ 147 , 86 ] ] ;
 967: LD_ADDR_EXP 33
 971: PUSH
 972: LD_INT 24
 974: PUSH
 975: LD_INT 13
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 93
 984: PUSH
 985: LD_INT 12
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 53
 994: PUSH
 995: LD_INT 79
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 147
1004: PUSH
1005: LD_INT 86
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: ST_TO_ADDR
// case def_base_level of 0 :
1018: LD_EXP 2
1022: PUSH
1023: LD_INT 0
1025: DOUBLE
1026: EQUAL
1027: IFTRUE 1031
1029: GO 1053
1031: POP
// begin buildings_def = [ [ ] , [ ] , [ ] , [ ] ] ;
1032: LD_ADDR_EXP 32
1036: PUSH
1037: EMPTY
1038: PUSH
1039: EMPTY
1040: PUSH
1041: EMPTY
1042: PUSH
1043: EMPTY
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// end ; 1 :
1051: GO 2740
1053: LD_INT 1
1055: DOUBLE
1056: EQUAL
1057: IFTRUE 1061
1059: GO 1159
1061: POP
// begin buildings_def = [ [ [ b_depot , 16 , 5 , 3 ] ] , [ [ b_depot , 89 , 5 , 3 ] ] , [ [ b_depot , 56 , 91 , 0 ] ] , [ [ b_depot , 151 , 94 , 0 ] ] ] ;
1062: LD_ADDR_EXP 32
1066: PUSH
1067: LD_INT 0
1069: PUSH
1070: LD_INT 16
1072: PUSH
1073: LD_INT 5
1075: PUSH
1076: LD_INT 3
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: PUSH
1085: EMPTY
1086: LIST
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 89
1093: PUSH
1094: LD_INT 5
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: EMPTY
1107: LIST
1108: PUSH
1109: LD_INT 0
1111: PUSH
1112: LD_INT 56
1114: PUSH
1115: LD_INT 91
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: EMPTY
1128: LIST
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 151
1135: PUSH
1136: LD_INT 94
1138: PUSH
1139: LD_INT 0
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: ST_TO_ADDR
// end ; 2 :
1157: GO 2740
1159: LD_INT 2
1161: DOUBLE
1162: EQUAL
1163: IFTRUE 1167
1165: GO 1797
1167: POP
// begin buildings_def = [ [ [ b_depot , 16 , 5 , 3 ] , [ b_oil_mine , 9 , 4 , 0 ] , [ b_lab , 16 , 14 , 0 ] , [ b_workshop , 26 , 7 , 3 ] , [ b_armoury , 41 , 16 , 5 ] , [ b_breastwork , 24 , 21 , 0 ] , [ b_breastwork , 41 , 25 , 5 ] , [ b_oil_power , 10 , 9 , 1 ] ] , [ [ b_depot , 89 , 5 , 3 ] , [ b_oil_mine , 97 , 3 , 4 ] , [ b_lab , 100 , 10 , 4 ] , [ b_workshop , 88 , 17 , 2 ] , [ b_armoury , 87 , 25 , 2 ] , [ b_breastwork , 96 , 25 , 0 ] , [ b_breastwork , 72 , 13 , 0 ] , [ b_oil_power , 94 , 4 , 1 ] ] , [ [ b_depot , 56 , 91 , 0 ] , [ b_oil_mine , 51 , 88 , 0 ] , [ b_lab , 61 , 84 , 4 ] , [ b_workshop , 46 , 80 , 0 ] , [ b_armoury , 52 , 72 , 3 ] , [ b_breastwork , 43 , 66 , 3 ] , [ b_breastwork , 61 , 75 , 3 ] , [ b_oil_power , 61 , 90 , 3 ] ] , [ [ b_depot , 151 , 94 , 0 ] , [ b_oil_mine , 160 , 87 , 3 ] , [ b_lab , 159 , 94 , 5 ] , [ b_workshop , 146 , 80 , 3 ] , [ b_armoury , 139 , 91 , 1 ] , [ b_breastwork , 148 , 73 , 3 ] , [ b_breastwork , 140 , 71 , 2 ] , [ b_oil_power , 146 , 97 , 3 ] ] ] ;
1168: LD_ADDR_EXP 32
1172: PUSH
1173: LD_INT 0
1175: PUSH
1176: LD_INT 16
1178: PUSH
1179: LD_INT 5
1181: PUSH
1182: LD_INT 3
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: PUSH
1191: LD_INT 29
1193: PUSH
1194: LD_INT 9
1196: PUSH
1197: LD_INT 4
1199: PUSH
1200: LD_INT 0
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: PUSH
1209: LD_INT 6
1211: PUSH
1212: LD_INT 16
1214: PUSH
1215: LD_INT 14
1217: PUSH
1218: LD_INT 0
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: LD_INT 26
1232: PUSH
1233: LD_INT 7
1235: PUSH
1236: LD_INT 3
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: PUSH
1245: LD_INT 4
1247: PUSH
1248: LD_INT 41
1250: PUSH
1251: LD_INT 16
1253: PUSH
1254: LD_INT 5
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 31
1265: PUSH
1266: LD_INT 24
1268: PUSH
1269: LD_INT 21
1271: PUSH
1272: LD_INT 0
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 31
1283: PUSH
1284: LD_INT 41
1286: PUSH
1287: LD_INT 25
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: PUSH
1299: LD_INT 26
1301: PUSH
1302: LD_INT 10
1304: PUSH
1305: LD_INT 9
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 0
1329: PUSH
1330: LD_INT 89
1332: PUSH
1333: LD_INT 5
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: PUSH
1345: LD_INT 29
1347: PUSH
1348: LD_INT 97
1350: PUSH
1351: LD_INT 3
1353: PUSH
1354: LD_INT 4
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 6
1365: PUSH
1366: LD_INT 100
1368: PUSH
1369: LD_INT 10
1371: PUSH
1372: LD_INT 4
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: PUSH
1381: LD_INT 2
1383: PUSH
1384: LD_INT 88
1386: PUSH
1387: LD_INT 17
1389: PUSH
1390: LD_INT 2
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 4
1401: PUSH
1402: LD_INT 87
1404: PUSH
1405: LD_INT 25
1407: PUSH
1408: LD_INT 2
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 31
1419: PUSH
1420: LD_INT 96
1422: PUSH
1423: LD_INT 25
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: PUSH
1435: LD_INT 31
1437: PUSH
1438: LD_INT 72
1440: PUSH
1441: LD_INT 13
1443: PUSH
1444: LD_INT 0
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: PUSH
1453: LD_INT 26
1455: PUSH
1456: LD_INT 94
1458: PUSH
1459: LD_INT 4
1461: PUSH
1462: LD_INT 1
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 0
1483: PUSH
1484: LD_INT 56
1486: PUSH
1487: LD_INT 91
1489: PUSH
1490: LD_INT 0
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 29
1501: PUSH
1502: LD_INT 51
1504: PUSH
1505: LD_INT 88
1507: PUSH
1508: LD_INT 0
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PUSH
1517: LD_INT 6
1519: PUSH
1520: LD_INT 61
1522: PUSH
1523: LD_INT 84
1525: PUSH
1526: LD_INT 4
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 46
1540: PUSH
1541: LD_INT 80
1543: PUSH
1544: LD_INT 0
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 4
1555: PUSH
1556: LD_INT 52
1558: PUSH
1559: LD_INT 72
1561: PUSH
1562: LD_INT 3
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: LD_INT 31
1573: PUSH
1574: LD_INT 43
1576: PUSH
1577: LD_INT 66
1579: PUSH
1580: LD_INT 3
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 31
1591: PUSH
1592: LD_INT 61
1594: PUSH
1595: LD_INT 75
1597: PUSH
1598: LD_INT 3
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 26
1609: PUSH
1610: LD_INT 61
1612: PUSH
1613: LD_INT 90
1615: PUSH
1616: LD_INT 3
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: LD_INT 151
1640: PUSH
1641: LD_INT 94
1643: PUSH
1644: LD_INT 0
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: PUSH
1653: LD_INT 29
1655: PUSH
1656: LD_INT 160
1658: PUSH
1659: LD_INT 87
1661: PUSH
1662: LD_INT 3
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 6
1673: PUSH
1674: LD_INT 159
1676: PUSH
1677: LD_INT 94
1679: PUSH
1680: LD_INT 5
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: LD_INT 146
1694: PUSH
1695: LD_INT 80
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 4
1709: PUSH
1710: LD_INT 139
1712: PUSH
1713: LD_INT 91
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 31
1727: PUSH
1728: LD_INT 148
1730: PUSH
1731: LD_INT 73
1733: PUSH
1734: LD_INT 3
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 31
1745: PUSH
1746: LD_INT 140
1748: PUSH
1749: LD_INT 71
1751: PUSH
1752: LD_INT 2
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 26
1763: PUSH
1764: LD_INT 146
1766: PUSH
1767: LD_INT 97
1769: PUSH
1770: LD_INT 3
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: ST_TO_ADDR
// end ; 3 :
1795: GO 2740
1797: LD_INT 3
1799: DOUBLE
1800: EQUAL
1801: IFTRUE 1805
1803: GO 2739
1805: POP
// begin buildings_def = [ [ [ b_warehouse , 16 , 5 , 3 ] , [ b_oil_mine , 9 , 4 , 4 ] , [ b_lab , 16 , 14 , 0 ] , [ b_factory , 26 , 7 , 3 ] , [ b_barracks , 41 , 16 , 5 ] , [ b_bunker , 24 , 21 , 0 ] , [ b_bunker , 40 , 24 , 5 ] , [ b_ext_gun , 26 , 3 , 3 ] , [ b_ext_track , 23 , 4 , 2 ] , [ b_oil_power , 10 , 9 , 1 ] , [ b_siberite_power , 32 , 3 , 1 ] , [ b_siberite_mine , 37 , 24 , 5 ] ] , [ [ b_warehouse , 89 , 5 , 3 ] , [ b_oil_mine , 97 , 3 , 4 ] , [ b_lab , 100 , 10 , 4 ] , [ b_factory , 88 , 17 , 2 ] , [ b_barracks , 87 , 25 , 2 ] , [ b_bunker , 100 , 31 , 5 ] , [ b_bunker , 72 , 13 , 0 ] , [ b_ext_gun , 84 , 13 , 2 ] , [ b_ext_track , 88 , 14 , 3 ] , [ b_oil_power , 94 , 4 , 1 ] , [ b_siberite_power , 66 , 3 , 1 ] , [ b_siberite_mine , 71 , 4 , 2 ] ] , [ [ b_warehouse , 56 , 91 , 0 ] , [ b_oil_mine , 51 , 88 , 0 ] , [ b_lab , 61 , 84 , 4 ] , [ b_factory , 46 , 80 , 0 ] , [ b_barracks , 50 , 64 , 3 ] , [ b_bunker , 42 , 57 , 1 ] , [ b_bunker , 60 , 72 , 3 ] , [ b_ext_gun , 46 , 84 , 0 ] , [ b_ext_track , 43 , 80 , 1 ] , [ b_oil_power , 61 , 90 , 3 ] , [ b_siberite_power , 38 , 72 , 3 ] , [ b_siberite_mine , 35 , 59 , 1 ] ] , [ [ b_warehouse , 151 , 94 , 0 ] , [ b_oil_mine , 160 , 87 , 3 ] , [ b_lab , 159 , 94 , 5 ] , [ b_factory , 146 , 80 , 3 ] , [ b_barracks , 129 , 89 , 1 ] , [ b_bunker , 133 , 63 , 3 ] , [ b_bunker , 141 , 62 , 3 ] , [ b_ext_gun , 143 , 77 , 2 ] , [ b_ext_track , 142 , 80 , 1 ] , [ b_oil_power , 146 , 97 , 3 ] , [ b_siberite_power , 155 , 80 , 3 ] , [ b_siberite_mine , 135 , 83 , 4 ] ] ] ;
1806: LD_ADDR_EXP 32
1810: PUSH
1811: LD_INT 1
1813: PUSH
1814: LD_INT 16
1816: PUSH
1817: LD_INT 5
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 29
1831: PUSH
1832: LD_INT 9
1834: PUSH
1835: LD_INT 4
1837: PUSH
1838: LD_INT 4
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: PUSH
1847: LD_INT 6
1849: PUSH
1850: LD_INT 16
1852: PUSH
1853: LD_INT 14
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 3
1867: PUSH
1868: LD_INT 26
1870: PUSH
1871: LD_INT 7
1873: PUSH
1874: LD_INT 3
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: LD_INT 41
1888: PUSH
1889: LD_INT 16
1891: PUSH
1892: LD_INT 5
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 32
1903: PUSH
1904: LD_INT 24
1906: PUSH
1907: LD_INT 21
1909: PUSH
1910: LD_INT 0
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 32
1921: PUSH
1922: LD_INT 40
1924: PUSH
1925: LD_INT 24
1927: PUSH
1928: LD_INT 5
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 17
1939: PUSH
1940: LD_INT 26
1942: PUSH
1943: LD_INT 3
1945: PUSH
1946: LD_INT 3
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 16
1957: PUSH
1958: LD_INT 23
1960: PUSH
1961: LD_INT 4
1963: PUSH
1964: LD_INT 2
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 26
1975: PUSH
1976: LD_INT 10
1978: PUSH
1979: LD_INT 9
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PUSH
1991: LD_INT 28
1993: PUSH
1994: LD_INT 32
1996: PUSH
1997: LD_INT 3
1999: PUSH
2000: LD_INT 1
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 30
2011: PUSH
2012: LD_INT 37
2014: PUSH
2015: LD_INT 24
2017: PUSH
2018: LD_INT 5
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 1
2043: PUSH
2044: LD_INT 89
2046: PUSH
2047: LD_INT 5
2049: PUSH
2050: LD_INT 3
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 29
2061: PUSH
2062: LD_INT 97
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: LD_INT 4
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 6
2079: PUSH
2080: LD_INT 100
2082: PUSH
2083: LD_INT 10
2085: PUSH
2086: LD_INT 4
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 3
2097: PUSH
2098: LD_INT 88
2100: PUSH
2101: LD_INT 17
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 5
2115: PUSH
2116: LD_INT 87
2118: PUSH
2119: LD_INT 25
2121: PUSH
2122: LD_INT 2
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 32
2133: PUSH
2134: LD_INT 100
2136: PUSH
2137: LD_INT 31
2139: PUSH
2140: LD_INT 5
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 32
2151: PUSH
2152: LD_INT 72
2154: PUSH
2155: LD_INT 13
2157: PUSH
2158: LD_INT 0
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 17
2169: PUSH
2170: LD_INT 84
2172: PUSH
2173: LD_INT 13
2175: PUSH
2176: LD_INT 2
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 16
2187: PUSH
2188: LD_INT 88
2190: PUSH
2191: LD_INT 14
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 26
2205: PUSH
2206: LD_INT 94
2208: PUSH
2209: LD_INT 4
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PUSH
2221: LD_INT 28
2223: PUSH
2224: LD_INT 66
2226: PUSH
2227: LD_INT 3
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 30
2241: PUSH
2242: LD_INT 71
2244: PUSH
2245: LD_INT 4
2247: PUSH
2248: LD_INT 2
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: LD_INT 56
2276: PUSH
2277: LD_INT 91
2279: PUSH
2280: LD_INT 0
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: LD_INT 29
2291: PUSH
2292: LD_INT 51
2294: PUSH
2295: LD_INT 88
2297: PUSH
2298: LD_INT 0
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: PUSH
2307: LD_INT 6
2309: PUSH
2310: LD_INT 61
2312: PUSH
2313: LD_INT 84
2315: PUSH
2316: LD_INT 4
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 3
2327: PUSH
2328: LD_INT 46
2330: PUSH
2331: LD_INT 80
2333: PUSH
2334: LD_INT 0
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 5
2345: PUSH
2346: LD_INT 50
2348: PUSH
2349: LD_INT 64
2351: PUSH
2352: LD_INT 3
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 32
2363: PUSH
2364: LD_INT 42
2366: PUSH
2367: LD_INT 57
2369: PUSH
2370: LD_INT 1
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 32
2381: PUSH
2382: LD_INT 60
2384: PUSH
2385: LD_INT 72
2387: PUSH
2388: LD_INT 3
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 17
2399: PUSH
2400: LD_INT 46
2402: PUSH
2403: LD_INT 84
2405: PUSH
2406: LD_INT 0
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 16
2417: PUSH
2418: LD_INT 43
2420: PUSH
2421: LD_INT 80
2423: PUSH
2424: LD_INT 1
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 26
2435: PUSH
2436: LD_INT 61
2438: PUSH
2439: LD_INT 90
2441: PUSH
2442: LD_INT 3
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 28
2453: PUSH
2454: LD_INT 38
2456: PUSH
2457: LD_INT 72
2459: PUSH
2460: LD_INT 3
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 30
2471: PUSH
2472: LD_INT 35
2474: PUSH
2475: LD_INT 59
2477: PUSH
2478: LD_INT 1
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 1
2503: PUSH
2504: LD_INT 151
2506: PUSH
2507: LD_INT 94
2509: PUSH
2510: LD_INT 0
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 29
2521: PUSH
2522: LD_INT 160
2524: PUSH
2525: LD_INT 87
2527: PUSH
2528: LD_INT 3
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: PUSH
2537: LD_INT 6
2539: PUSH
2540: LD_INT 159
2542: PUSH
2543: LD_INT 94
2545: PUSH
2546: LD_INT 5
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: PUSH
2555: LD_INT 3
2557: PUSH
2558: LD_INT 146
2560: PUSH
2561: LD_INT 80
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: PUSH
2573: LD_INT 5
2575: PUSH
2576: LD_INT 129
2578: PUSH
2579: LD_INT 89
2581: PUSH
2582: LD_INT 1
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 32
2593: PUSH
2594: LD_INT 133
2596: PUSH
2597: LD_INT 63
2599: PUSH
2600: LD_INT 3
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_INT 32
2611: PUSH
2612: LD_INT 141
2614: PUSH
2615: LD_INT 62
2617: PUSH
2618: LD_INT 3
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 17
2629: PUSH
2630: LD_INT 143
2632: PUSH
2633: LD_INT 77
2635: PUSH
2636: LD_INT 2
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: PUSH
2645: LD_INT 16
2647: PUSH
2648: LD_INT 142
2650: PUSH
2651: LD_INT 80
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_INT 26
2665: PUSH
2666: LD_INT 146
2668: PUSH
2669: LD_INT 97
2671: PUSH
2672: LD_INT 3
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 28
2683: PUSH
2684: LD_INT 155
2686: PUSH
2687: LD_INT 80
2689: PUSH
2690: LD_INT 3
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 30
2701: PUSH
2702: LD_INT 135
2704: PUSH
2705: LD_INT 83
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: ST_TO_ADDR
// end ; end ;
2737: GO 2740
2739: POP
// end ;
2740: LD_VAR 0 1
2744: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2745: LD_INT 0
2747: PPUSH
2748: PPUSH
2749: PPUSH
// Team_Game := 0 ;
2750: LD_ADDR_EXP 31
2754: PUSH
2755: LD_INT 0
2757: ST_TO_ADDR
// for i = 1 to 8 do
2758: LD_ADDR_VAR 0 2
2762: PUSH
2763: DOUBLE
2764: LD_INT 1
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 8
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2798
// Team_Game := Team_Game + Side_Teams [ i ] ;
2774: LD_ADDR_EXP 31
2778: PUSH
2779: LD_EXP 31
2783: PUSH
2784: LD_EXP 27
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: PLUS
2795: ST_TO_ADDR
2796: GO 2771
2798: POP
2799: POP
// if not Team_Game then
2800: LD_EXP 31
2804: NOT
2805: IFFALSE 2817
// Team_Game := false else
2807: LD_ADDR_EXP 31
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
2815: GO 2825
// Team_Game := true ;
2817: LD_ADDR_EXP 31
2821: PUSH
2822: LD_INT 1
2824: ST_TO_ADDR
// if not Team_Game then
2825: LD_EXP 31
2829: NOT
2830: IFFALSE 2928
// begin for i = 1 to 8 do
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: DOUBLE
2838: LD_INT 1
2840: DEC
2841: ST_TO_ADDR
2842: LD_INT 8
2844: PUSH
2845: FOR_TO
2846: IFFALSE 2924
// for j = 1 to 8 do
2848: LD_ADDR_VAR 0 3
2852: PUSH
2853: DOUBLE
2854: LD_INT 1
2856: DEC
2857: ST_TO_ADDR
2858: LD_INT 8
2860: PUSH
2861: FOR_TO
2862: IFFALSE 2920
// if i <> j then
2864: LD_VAR 0 2
2868: PUSH
2869: LD_VAR 0 3
2873: NONEQUAL
2874: IFFALSE 2898
// SetAttitude ( i , j , att_neutral , true ) else
2876: LD_VAR 0 2
2880: PPUSH
2881: LD_VAR 0 3
2885: PPUSH
2886: LD_INT 0
2888: PPUSH
2889: LD_INT 1
2891: PPUSH
2892: CALL_OW 80
2896: GO 2918
// SetAttitude ( i , j , att_friend , true ) ;
2898: LD_VAR 0 2
2902: PPUSH
2903: LD_VAR 0 3
2907: PPUSH
2908: LD_INT 1
2910: PPUSH
2911: LD_INT 1
2913: PPUSH
2914: CALL_OW 80
2918: GO 2861
2920: POP
2921: POP
2922: GO 2845
2924: POP
2925: POP
// end else
2926: GO 3103
// begin if def_shared_vision then
2928: LD_EXP 7
2932: IFFALSE 2997
// begin for i in Teams do
2934: LD_ADDR_VAR 0 2
2938: PUSH
2939: LD_EXP 28
2943: PUSH
2944: FOR_IN
2945: IFFALSE 2995
// for j = 2 to i do
2947: LD_ADDR_VAR 0 3
2951: PUSH
2952: DOUBLE
2953: LD_INT 2
2955: DEC
2956: ST_TO_ADDR
2957: LD_VAR 0 2
2961: PUSH
2962: FOR_TO
2963: IFFALSE 2991
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2965: LD_VAR 0 2
2969: PUSH
2970: LD_VAR 0 3
2974: ARRAY
2975: PPUSH
2976: LD_VAR 0 2
2980: PUSH
2981: LD_INT 1
2983: ARRAY
2984: PPUSH
2985: CALL_OW 343
2989: GO 2962
2991: POP
2992: POP
2993: GO 2944
2995: POP
2996: POP
// end ; for i = 1 to 8 do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_INT 8
3009: PUSH
3010: FOR_TO
3011: IFFALSE 3101
// for j = 1 to 8 do
3013: LD_ADDR_VAR 0 3
3017: PUSH
3018: DOUBLE
3019: LD_INT 1
3021: DEC
3022: ST_TO_ADDR
3023: LD_INT 8
3025: PUSH
3026: FOR_TO
3027: IFFALSE 3097
// if Side_Teams [ i ] = Side_Teams [ j ] then
3029: LD_EXP 27
3033: PUSH
3034: LD_VAR 0 2
3038: ARRAY
3039: PUSH
3040: LD_EXP 27
3044: PUSH
3045: LD_VAR 0 3
3049: ARRAY
3050: EQUAL
3051: IFFALSE 3075
// SetAttitude ( i , j , att_friend , true ) else
3053: LD_VAR 0 2
3057: PPUSH
3058: LD_VAR 0 3
3062: PPUSH
3063: LD_INT 1
3065: PPUSH
3066: LD_INT 1
3068: PPUSH
3069: CALL_OW 80
3073: GO 3095
// SetAttitude ( i , j , att_enemy , true ) ;
3075: LD_VAR 0 2
3079: PPUSH
3080: LD_VAR 0 3
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: LD_INT 1
3090: PPUSH
3091: CALL_OW 80
3095: GO 3026
3097: POP
3098: POP
3099: GO 3010
3101: POP
3102: POP
// end ; end ;
3103: LD_VAR 0 1
3107: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
3108: LD_INT 0
3110: PPUSH
3111: PPUSH
3112: PPUSH
3113: PPUSH
// result := [ ] ;
3114: LD_ADDR_VAR 0 8
3118: PUSH
3119: EMPTY
3120: ST_TO_ADDR
// for i := 1 to count do
3121: LD_ADDR_VAR 0 9
3125: PUSH
3126: DOUBLE
3127: LD_INT 1
3129: DEC
3130: ST_TO_ADDR
3131: LD_VAR 0 2
3135: PUSH
3136: FOR_TO
3137: IFFALSE 3531
// begin uc_direction := Rand ( 0 , 5 ) ;
3139: LD_ADDR_OWVAR 24
3143: PUSH
3144: LD_INT 0
3146: PPUSH
3147: LD_INT 5
3149: PPUSH
3150: CALL_OW 12
3154: ST_TO_ADDR
// if commander then
3155: LD_FROM_VAR 0 7
3159: IFFALSE 3268
// begin hc_name := mp_sides_players_names [ side ] ;
3161: LD_ADDR_OWVAR 26
3165: PUSH
3166: LD_OWVAR 19
3170: PUSH
3171: LD_VAR 0 1
3175: ARRAY
3176: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
3177: LD_INT 1
3179: PPUSH
3180: LD_INT 2
3182: PPUSH
3183: CALL_OW 12
3187: PPUSH
3188: LD_VAR 0 3
3192: PPUSH
3193: LD_EXP 18
3197: PUSH
3198: LD_INT 2
3200: PLUS
3201: PPUSH
3202: CALL_OW 380
// hc_importance := 105 ;
3206: LD_ADDR_OWVAR 32
3210: PUSH
3211: LD_INT 105
3213: ST_TO_ADDR
// commander := false ;
3214: LD_VAR 0 7
3218: PUSH
3219: LD_INT 0
3221: ST_TO_ADDR
// if Multiplayer then
3222: LD_OWVAR 4
3226: IFFALSE 3266
// begin hc_gallery := MULTIAVATARS ;
3228: LD_ADDR_OWVAR 33
3232: PUSH
3233: LD_STRING MULTIAVATARS
3235: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
3236: LD_ADDR_OWVAR 34
3240: PUSH
3241: LD_VAR 0 1
3245: PPUSH
3246: CALL_OW 525
3250: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
3251: LD_ADDR_OWVAR 27
3255: PUSH
3256: LD_VAR 0 1
3260: PPUSH
3261: CALL_OW 526
3265: ST_TO_ADDR
// end ; end else
3266: GO 3331
// begin hc_name :=  ;
3268: LD_ADDR_OWVAR 26
3272: PUSH
3273: LD_STRING 
3275: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
3276: LD_INT 1
3278: PPUSH
3279: LD_INT 2
3281: PPUSH
3282: CALL_OW 12
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: LD_EXP 18
3296: PPUSH
3297: CALL_OW 380
// hc_importance := 0 ;
3301: LD_ADDR_OWVAR 32
3305: PUSH
3306: LD_INT 0
3308: ST_TO_ADDR
// if Multiplayer then
3309: LD_OWVAR 4
3313: IFFALSE 3331
// begin hc_gallery :=  ;
3315: LD_ADDR_OWVAR 33
3319: PUSH
3320: LD_STRING 
3322: ST_TO_ADDR
// hc_face_number := 0 ;
3323: LD_ADDR_OWVAR 34
3327: PUSH
3328: LD_INT 0
3330: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3331: LD_ADDR_VAR 0 11
3335: PUSH
3336: CALL_OW 44
3340: ST_TO_ADDR
// if global_defined then
3341: LD_LOC 2
3345: IFFALSE 3483
// begin j := i ;
3347: LD_ADDR_VAR 0 10
3351: PUSH
3352: LD_VAR 0 9
3356: ST_TO_ADDR
// if cl = class_soldier then
3357: LD_VAR 0 3
3361: PUSH
3362: LD_INT 1
3364: EQUAL
3365: IFFALSE 3383
// j := i + soldiers_created ;
3367: LD_ADDR_VAR 0 10
3371: PUSH
3372: LD_VAR 0 9
3376: PUSH
3377: LD_LOC 3
3381: PLUS
3382: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3383: LD_LOC 1
3387: PUSH
3388: LD_VAR 0 3
3392: ARRAY
3393: PUSH
3394: LD_VAR 0 10
3398: ARRAY
3399: PPUSH
3400: LD_VAR 0 11
3404: PPUSH
3405: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3409: LD_VAR 0 11
3413: PPUSH
3414: LD_INT 2
3416: PPUSH
3417: LD_LOC 1
3421: PUSH
3422: LD_VAR 0 3
3426: ARRAY
3427: PUSH
3428: LD_VAR 0 10
3432: ARRAY
3433: PPUSH
3434: LD_INT 2
3436: PPUSH
3437: CALL_OW 260
3441: PPUSH
3442: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3446: LD_VAR 0 11
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_LOC 1
3458: PUSH
3459: LD_VAR 0 3
3463: ARRAY
3464: PUSH
3465: LD_VAR 0 10
3469: ARRAY
3470: PPUSH
3471: LD_INT 1
3473: PPUSH
3474: CALL_OW 260
3478: PPUSH
3479: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
3483: LD_VAR 0 11
3487: PPUSH
3488: LD_VAR 0 4
3492: PPUSH
3493: LD_VAR 0 5
3497: PPUSH
3498: LD_VAR 0 6
3502: PPUSH
3503: LD_INT 0
3505: PPUSH
3506: CALL_OW 50
// result := result ^ [ un ] ;
3510: LD_ADDR_VAR 0 8
3514: PUSH
3515: LD_VAR 0 8
3519: PUSH
3520: LD_VAR 0 11
3524: PUSH
3525: EMPTY
3526: LIST
3527: ADD
3528: ST_TO_ADDR
// end ;
3529: GO 3136
3531: POP
3532: POP
// if not global_defined then
3533: LD_LOC 2
3537: NOT
3538: IFFALSE 3600
// if cl = class_soldier and global_units then
3540: LD_VAR 0 3
3544: PUSH
3545: LD_INT 1
3547: EQUAL
3548: PUSH
3549: LD_LOC 1
3553: AND
3554: IFFALSE 3581
// global_units := [ global_units [ 1 ] ^ result ] else
3556: LD_ADDR_LOC 1
3560: PUSH
3561: LD_LOC 1
3565: PUSH
3566: LD_INT 1
3568: ARRAY
3569: PUSH
3570: LD_VAR 0 8
3574: ADD
3575: PUSH
3576: EMPTY
3577: LIST
3578: ST_TO_ADDR
3579: GO 3600
// global_units := global_units ^ [ result ] end ;
3581: LD_ADDR_LOC 1
3585: PUSH
3586: LD_LOC 1
3590: PUSH
3591: LD_VAR 0 8
3595: PUSH
3596: EMPTY
3597: LIST
3598: ADD
3599: ST_TO_ADDR
3600: LD_VAR 0 8
3604: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3605: LD_INT 0
3607: PPUSH
3608: PPUSH
3609: PPUSH
3610: PPUSH
3611: PPUSH
3612: PPUSH
3613: PPUSH
3614: PPUSH
3615: PPUSH
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
// pos := Side_Positions [ side ] ;
3620: LD_ADDR_VAR 0 3
3624: PUSH
3625: LD_EXP 29
3629: PUSH
3630: LD_VAR 0 1
3634: ARRAY
3635: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3636: LD_ADDR_OWVAR 21
3640: PUSH
3641: LD_EXP 30
3645: PUSH
3646: LD_VAR 0 1
3650: ARRAY
3651: ST_TO_ADDR
// uc_side := side ;
3652: LD_ADDR_OWVAR 20
3656: PUSH
3657: LD_VAR 0 1
3661: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
3662: LD_ADDR_OWVAR 44
3666: PUSH
3667: LD_INT 9
3669: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3670: LD_ADDR_OWVAR 45
3674: PUSH
3675: LD_INT 9
3677: ST_TO_ADDR
// for i in buildings_def [ pos ] do
3678: LD_ADDR_VAR 0 6
3682: PUSH
3683: LD_EXP 32
3687: PUSH
3688: LD_VAR 0 3
3692: ARRAY
3693: PUSH
3694: FOR_IN
3695: IFFALSE 3792
// begin bc_type = i [ 1 ] ;
3697: LD_ADDR_OWVAR 42
3701: PUSH
3702: LD_VAR 0 6
3706: PUSH
3707: LD_INT 1
3709: ARRAY
3710: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3711: LD_VAR 0 6
3715: PUSH
3716: LD_INT 2
3718: ARRAY
3719: PPUSH
3720: LD_VAR 0 6
3724: PUSH
3725: LD_INT 3
3727: ARRAY
3728: PPUSH
3729: LD_VAR 0 6
3733: PUSH
3734: LD_INT 4
3736: ARRAY
3737: PPUSH
3738: CALL_OW 47
// x := buildings_def [ pos ] [ 1 ] [ 2 ] ;
3742: LD_ADDR_VAR 0 4
3746: PUSH
3747: LD_EXP 32
3751: PUSH
3752: LD_VAR 0 3
3756: ARRAY
3757: PUSH
3758: LD_INT 1
3760: ARRAY
3761: PUSH
3762: LD_INT 2
3764: ARRAY
3765: ST_TO_ADDR
// y := buildings_def [ pos ] [ 1 ] [ 2 ] ;
3766: LD_ADDR_VAR 0 5
3770: PUSH
3771: LD_EXP 32
3775: PUSH
3776: LD_VAR 0 3
3780: ARRAY
3781: PUSH
3782: LD_INT 1
3784: ARRAY
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: ST_TO_ADDR
// end ;
3790: GO 3694
3792: POP
3793: POP
// if is_depot then
3794: LD_EXP 16
3798: IFFALSE 3948
// begin dep = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3800: LD_ADDR_VAR 0 10
3804: PUSH
3805: LD_INT 22
3807: PUSH
3808: LD_VAR 0 1
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: PUSH
3817: LD_INT 2
3819: PUSH
3820: LD_INT 30
3822: PUSH
3823: LD_INT 0
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 30
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PPUSH
3849: CALL_OW 69
3853: ST_TO_ADDR
// dep = dep [ 1 ] ;
3854: LD_ADDR_VAR 0 10
3858: PUSH
3859: LD_VAR 0 10
3863: PUSH
3864: LD_INT 1
3866: ARRAY
3867: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3868: LD_VAR 0 10
3872: PPUSH
3873: CALL_OW 274
3877: PPUSH
3878: LD_INT 1
3880: PPUSH
3881: LD_EXP 20
3885: PUSH
3886: LD_INT 1
3888: ARRAY
3889: PPUSH
3890: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3894: LD_VAR 0 10
3898: PPUSH
3899: CALL_OW 274
3903: PPUSH
3904: LD_INT 2
3906: PPUSH
3907: LD_EXP 20
3911: PUSH
3912: LD_INT 2
3914: ARRAY
3915: PPUSH
3916: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3920: LD_VAR 0 10
3924: PPUSH
3925: CALL_OW 274
3929: PPUSH
3930: LD_INT 3
3932: PPUSH
3933: LD_EXP 20
3937: PUSH
3938: LD_INT 3
3940: ARRAY
3941: PPUSH
3942: CALL_OW 277
// end else
3946: GO 4092
// begin for i := 1 to 3 do
3948: LD_ADDR_VAR 0 6
3952: PUSH
3953: DOUBLE
3954: LD_INT 1
3956: DEC
3957: ST_TO_ADDR
3958: LD_INT 3
3960: PUSH
3961: FOR_TO
3962: IFFALSE 4090
// begin r := starting_resources [ i ] ;
3964: LD_ADDR_VAR 0 7
3968: PUSH
3969: LD_EXP 20
3973: PUSH
3974: LD_VAR 0 6
3978: ARRAY
3979: ST_TO_ADDR
// while r >= 10 do
3980: LD_VAR 0 7
3984: PUSH
3985: LD_INT 10
3987: GREATEREQUAL
3988: IFFALSE 4088
// if r > 50 then
3990: LD_VAR 0 7
3994: PUSH
3995: LD_INT 50
3997: GREATER
3998: IFFALSE 4044
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4000: LD_VAR 0 6
4004: PPUSH
4005: LD_INT 5
4007: PPUSH
4008: LD_VAR 0 4
4012: PPUSH
4013: LD_VAR 0 5
4017: PPUSH
4018: LD_INT 4
4020: PPUSH
4021: LD_INT 0
4023: PPUSH
4024: CALL_OW 60
// r := r - 50 ;
4028: LD_ADDR_VAR 0 7
4032: PUSH
4033: LD_VAR 0 7
4037: PUSH
4038: LD_INT 50
4040: MINUS
4041: ST_TO_ADDR
// end else
4042: GO 4086
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4044: LD_VAR 0 6
4048: PPUSH
4049: LD_VAR 0 7
4053: PUSH
4054: LD_INT 10
4056: DIV
4057: PPUSH
4058: LD_VAR 0 4
4062: PPUSH
4063: LD_VAR 0 5
4067: PPUSH
4068: LD_INT 4
4070: PPUSH
4071: LD_INT 0
4073: PPUSH
4074: CALL_OW 60
// r := 0 ;
4078: LD_ADDR_VAR 0 7
4082: PUSH
4083: LD_INT 0
4085: ST_TO_ADDR
// end ;
4086: GO 3980
// end ;
4088: GO 3961
4090: POP
4091: POP
// end ; x := start_def [ pos ] [ 1 ] ;
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_EXP 33
4101: PUSH
4102: LD_VAR 0 3
4106: ARRAY
4107: PUSH
4108: LD_INT 1
4110: ARRAY
4111: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4112: LD_ADDR_VAR 0 5
4116: PUSH
4117: LD_EXP 33
4121: PUSH
4122: LD_VAR 0 3
4126: ARRAY
4127: PUSH
4128: LD_INT 2
4130: ARRAY
4131: ST_TO_ADDR
// if def_morale_flags then
4132: LD_EXP 8
4136: IFFALSE 4215
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4138: LD_ADDR_EXP 23
4142: PUSH
4143: LD_EXP 23
4147: PUSH
4148: LD_VAR 0 1
4152: PPUSH
4153: LD_VAR 0 4
4157: PPUSH
4158: LD_VAR 0 5
4162: PPUSH
4163: LD_INT 1
4165: PUSH
4166: LD_INT 100
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 2
4175: PUSH
4176: LD_INT 50
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 3
4185: PUSH
4186: LD_INT 20
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 20
4195: PUSH
4196: LD_INT 100
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PPUSH
4209: CALL_OW 418
4213: ADD
4214: ST_TO_ADDR
// neng := number_of_people ;
4215: LD_ADDR_VAR 0 11
4219: PUSH
4220: LD_EXP 17
4224: ST_TO_ADDR
// nsol := 2 ;
4225: LD_ADDR_VAR 0 14
4229: PUSH
4230: LD_INT 2
4232: ST_TO_ADDR
// if nsol < neng div 4 then
4233: LD_VAR 0 14
4237: PUSH
4238: LD_VAR 0 11
4242: PUSH
4243: LD_INT 4
4245: DIV
4246: LESS
4247: IFFALSE 4263
// nsol := neng div 4 ;
4249: LD_ADDR_VAR 0 14
4253: PUSH
4254: LD_VAR 0 11
4258: PUSH
4259: LD_INT 4
4261: DIV
4262: ST_TO_ADDR
// neng := neng - nsol ;
4263: LD_ADDR_VAR 0 11
4267: PUSH
4268: LD_VAR 0 11
4272: PUSH
4273: LD_VAR 0 14
4277: MINUS
4278: ST_TO_ADDR
// nsci := neng div 3 ;
4279: LD_ADDR_VAR 0 12
4283: PUSH
4284: LD_VAR 0 11
4288: PUSH
4289: LD_INT 3
4291: DIV
4292: ST_TO_ADDR
// if nsci < 1 then
4293: LD_VAR 0 12
4297: PUSH
4298: LD_INT 1
4300: LESS
4301: IFFALSE 4311
// nsci := 1 ;
4303: LD_ADDR_VAR 0 12
4307: PUSH
4308: LD_INT 1
4310: ST_TO_ADDR
// neng := neng - nsci ;
4311: LD_ADDR_VAR 0 11
4315: PUSH
4316: LD_VAR 0 11
4320: PUSH
4321: LD_VAR 0 12
4325: MINUS
4326: ST_TO_ADDR
// nmech := neng div 2 ;
4327: LD_ADDR_VAR 0 13
4331: PUSH
4332: LD_VAR 0 11
4336: PUSH
4337: LD_INT 2
4339: DIV
4340: ST_TO_ADDR
// neng := neng - nmech ;
4341: LD_ADDR_VAR 0 11
4345: PUSH
4346: LD_VAR 0 11
4350: PUSH
4351: LD_VAR 0 13
4355: MINUS
4356: ST_TO_ADDR
// if neng < 1 then
4357: LD_VAR 0 11
4361: PUSH
4362: LD_INT 1
4364: LESS
4365: IFFALSE 4375
// neng := 1 ;
4367: LD_ADDR_VAR 0 11
4371: PUSH
4372: LD_INT 1
4374: ST_TO_ADDR
// commander := true ;
4375: LD_ADDR_EXP 34
4379: PUSH
4380: LD_INT 1
4382: ST_TO_ADDR
// soldiers_created := 0 ;
4383: LD_ADDR_LOC 3
4387: PUSH
4388: LD_INT 0
4390: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4391: LD_ADDR_VAR 0 4
4395: PUSH
4396: LD_EXP 33
4400: PUSH
4401: LD_VAR 0 3
4405: ARRAY
4406: PUSH
4407: LD_INT 1
4409: ARRAY
4410: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4411: LD_ADDR_VAR 0 5
4415: PUSH
4416: LD_EXP 33
4420: PUSH
4421: LD_VAR 0 3
4425: ARRAY
4426: PUSH
4427: LD_INT 2
4429: ARRAY
4430: ST_TO_ADDR
// prepare_people ( side , nsol , class_soldier , x , y , 5 , commander ) ;
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 14
4440: PPUSH
4441: LD_INT 1
4443: PPUSH
4444: LD_VAR 0 4
4448: PPUSH
4449: LD_VAR 0 5
4453: PPUSH
4454: LD_INT 5
4456: PPUSH
4457: LD_ADDR_EXP 34
4461: PPUSH
4462: CALL 3108 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
4466: LD_VAR 0 1
4470: PPUSH
4471: LD_VAR 0 11
4475: PPUSH
4476: LD_INT 2
4478: PPUSH
4479: LD_VAR 0 4
4483: PPUSH
4484: LD_VAR 0 5
4488: PPUSH
4489: LD_INT 5
4491: PPUSH
4492: LD_ADDR_EXP 34
4496: PPUSH
4497: CALL 3108 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_VAR 0 13
4510: PPUSH
4511: LD_INT 3
4513: PPUSH
4514: LD_VAR 0 4
4518: PPUSH
4519: LD_VAR 0 5
4523: PPUSH
4524: LD_INT 5
4526: PPUSH
4527: LD_ADDR_EXP 34
4531: PPUSH
4532: CALL 3108 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
4536: LD_VAR 0 1
4540: PPUSH
4541: LD_VAR 0 12
4545: PPUSH
4546: LD_INT 4
4548: PPUSH
4549: LD_VAR 0 4
4553: PPUSH
4554: LD_VAR 0 5
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_ADDR_EXP 34
4566: PPUSH
4567: CALL 3108 0 7
// if not global_defined then
4571: LD_LOC 2
4575: NOT
4576: IFFALSE 4586
// global_defined := true ;
4578: LD_ADDR_LOC 2
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4586: LD_EXP 9
4590: PUSH
4591: LD_INT 20
4593: PPUSH
4594: LD_VAR 0 1
4598: PPUSH
4599: CALL_OW 321
4603: PUSH
4604: LD_INT 1
4606: EQUAL
4607: AND
4608: IFFALSE 4625
// SetTech ( tech_SibDet , side , state_researched ) ;
4610: LD_INT 20
4612: PPUSH
4613: LD_VAR 0 1
4617: PPUSH
4618: LD_INT 2
4620: PPUSH
4621: CALL_OW 322
// end ;
4625: LD_VAR 0 2
4629: RET
// function prepare_sides ; var i ; begin
4630: LD_INT 0
4632: PPUSH
4633: PPUSH
// global_units := [ ] ;
4634: LD_ADDR_LOC 1
4638: PUSH
4639: EMPTY
4640: ST_TO_ADDR
// global_defined := false ;
4641: LD_ADDR_LOC 2
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// for i := 1 to 8 do
4649: LD_ADDR_VAR 0 2
4653: PUSH
4654: DOUBLE
4655: LD_INT 1
4657: DEC
4658: ST_TO_ADDR
4659: LD_INT 8
4661: PUSH
4662: FOR_TO
4663: IFFALSE 4940
// if Side_Positions [ i ] then
4665: LD_EXP 29
4669: PUSH
4670: LD_VAR 0 2
4674: ARRAY
4675: IFFALSE 4938
// begin if def_base_level > 1 then
4677: LD_EXP 2
4681: PUSH
4682: LD_INT 1
4684: GREATER
4685: IFFALSE 4803
// case Side_Positions [ i ] of 1 :
4687: LD_EXP 29
4691: PUSH
4692: LD_VAR 0 2
4696: ARRAY
4697: PUSH
4698: LD_INT 1
4700: DOUBLE
4701: EQUAL
4702: IFTRUE 4706
4704: GO 4724
4706: POP
// SetResourceVisibility ( 9 , 4 , i ) ; 2 :
4707: LD_INT 9
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: LD_VAR 0 2
4717: PPUSH
4718: CALL_OW 441
4722: GO 4803
4724: LD_INT 2
4726: DOUBLE
4727: EQUAL
4728: IFTRUE 4732
4730: GO 4750
4732: POP
// SetResourceVisibility ( 97 , 3 , i ) ; 3 :
4733: LD_INT 97
4735: PPUSH
4736: LD_INT 3
4738: PPUSH
4739: LD_VAR 0 2
4743: PPUSH
4744: CALL_OW 441
4748: GO 4803
4750: LD_INT 3
4752: DOUBLE
4753: EQUAL
4754: IFTRUE 4758
4756: GO 4776
4758: POP
// SetResourceVisibility ( 51 , 88 , i ) ; 4 :
4759: LD_INT 51
4761: PPUSH
4762: LD_INT 88
4764: PPUSH
4765: LD_VAR 0 2
4769: PPUSH
4770: CALL_OW 441
4774: GO 4803
4776: LD_INT 4
4778: DOUBLE
4779: EQUAL
4780: IFTRUE 4784
4782: GO 4802
4784: POP
// SetResourceVisibility ( 160 , 87 , i ) ; end ;
4785: LD_INT 160
4787: PPUSH
4788: LD_INT 87
4790: PPUSH
4791: LD_VAR 0 2
4795: PPUSH
4796: CALL_OW 441
4800: GO 4803
4802: POP
// if def_base_level > 2 then
4803: LD_EXP 2
4807: PUSH
4808: LD_INT 2
4810: GREATER
4811: IFFALSE 4929
// case Side_Positions [ i ] of 1 :
4813: LD_EXP 29
4817: PUSH
4818: LD_VAR 0 2
4822: ARRAY
4823: PUSH
4824: LD_INT 1
4826: DOUBLE
4827: EQUAL
4828: IFTRUE 4832
4830: GO 4850
4832: POP
// SetResourceVisibility ( 37 , 24 , i ) ; 2 :
4833: LD_INT 37
4835: PPUSH
4836: LD_INT 24
4838: PPUSH
4839: LD_VAR 0 2
4843: PPUSH
4844: CALL_OW 441
4848: GO 4929
4850: LD_INT 2
4852: DOUBLE
4853: EQUAL
4854: IFTRUE 4858
4856: GO 4876
4858: POP
// SetResourceVisibility ( 71 , 4 , i ) ; 3 :
4859: LD_INT 71
4861: PPUSH
4862: LD_INT 4
4864: PPUSH
4865: LD_VAR 0 2
4869: PPUSH
4870: CALL_OW 441
4874: GO 4929
4876: LD_INT 3
4878: DOUBLE
4879: EQUAL
4880: IFTRUE 4884
4882: GO 4902
4884: POP
// SetResourceVisibility ( 35 , 59 , i ) ; 4 :
4885: LD_INT 35
4887: PPUSH
4888: LD_INT 59
4890: PPUSH
4891: LD_VAR 0 2
4895: PPUSH
4896: CALL_OW 441
4900: GO 4929
4902: LD_INT 4
4904: DOUBLE
4905: EQUAL
4906: IFTRUE 4910
4908: GO 4928
4910: POP
// SetResourceVisibility ( 135 , 83 , i ) ; end ;
4911: LD_INT 135
4913: PPUSH
4914: LD_INT 83
4916: PPUSH
4917: LD_VAR 0 2
4921: PPUSH
4922: CALL_OW 441
4926: GO 4929
4928: POP
// prepare_side ( i ) ;
4929: LD_VAR 0 2
4933: PPUSH
4934: CALL 3605 0 1
// end ;
4938: GO 4662
4940: POP
4941: POP
// end ;
4942: LD_VAR 0 1
4946: RET
// function second_oil ; var i ; begin
4947: LD_INT 0
4949: PPUSH
4950: PPUSH
// if def_second_oil then
4951: LD_EXP 10
4955: IFFALSE 5079
// for i := 1 to 4 do
4957: LD_ADDR_VAR 0 2
4961: PUSH
4962: DOUBLE
4963: LD_INT 1
4965: DEC
4966: ST_TO_ADDR
4967: LD_INT 4
4969: PUSH
4970: FOR_TO
4971: IFFALSE 5077
// case i of 1 :
4973: LD_VAR 0 2
4977: PUSH
4978: LD_INT 1
4980: DOUBLE
4981: EQUAL
4982: IFTRUE 4986
4984: GO 5002
4986: POP
// CreateDepositXY ( 37 , 9 , mat_oil ) ; 2 :
4987: LD_INT 37
4989: PPUSH
4990: LD_INT 9
4992: PPUSH
4993: LD_INT 2
4995: PPUSH
4996: CALL_OW 62
5000: GO 5075
5002: LD_INT 2
5004: DOUBLE
5005: EQUAL
5006: IFTRUE 5010
5008: GO 5026
5010: POP
// CreateDepositXY ( 104 , 36 , mat_oil ) ; 3 :
5011: LD_INT 104
5013: PPUSH
5014: LD_INT 36
5016: PPUSH
5017: LD_INT 2
5019: PPUSH
5020: CALL_OW 62
5024: GO 5075
5026: LD_INT 3
5028: DOUBLE
5029: EQUAL
5030: IFTRUE 5034
5032: GO 5050
5034: POP
// CreateDepositXY ( 70 , 75 , mat_oil ) ; 4 :
5035: LD_INT 70
5037: PPUSH
5038: LD_INT 75
5040: PPUSH
5041: LD_INT 2
5043: PPUSH
5044: CALL_OW 62
5048: GO 5075
5050: LD_INT 4
5052: DOUBLE
5053: EQUAL
5054: IFTRUE 5058
5056: GO 5074
5058: POP
// CreateDepositXY ( 145 , 67 , mat_oil ) ; end ;
5059: LD_INT 145
5061: PPUSH
5062: LD_INT 67
5064: PPUSH
5065: LD_INT 2
5067: PPUSH
5068: CALL_OW 62
5072: GO 5075
5074: POP
5075: GO 4970
5077: POP
5078: POP
// end ;
5079: LD_VAR 0 1
5083: RET
// starting begin mp_selectmsg := true ;
5084: LD_ADDR_OWVAR 13
5088: PUSH
5089: LD_INT 1
5091: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5092: CALL 0 0 0
// prepare_map_coordinates ;
5096: CALL 964 0 0
// set_shared_visions_and_alliances ;
5100: CALL 2745 0 0
// prepare_sides ;
5104: CALL 4630 0 0
// Init_Win_Condition ;
5108: CALL 12350 0 0
// InitLimits ;
5112: CALL 13590 0 0
// ShowTimer ;
5116: CALL 14527 0 0
// second_oil ;
5120: CALL 4947 0 0
// init_shipments_and_respawning ;
5124: CALL 5179 0 0
// vygeneruj_lidi_na_ztraceni ;
5128: CALL 6058 0 0
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5132: LD_EXP 33
5136: PUSH
5137: LD_EXP 29
5141: PUSH
5142: LD_OWVAR 2
5146: ARRAY
5147: ARRAY
5148: PUSH
5149: LD_INT 1
5151: ARRAY
5152: PPUSH
5153: LD_EXP 33
5157: PUSH
5158: LD_EXP 29
5162: PUSH
5163: LD_OWVAR 2
5167: ARRAY
5168: ARRAY
5169: PUSH
5170: LD_INT 2
5172: ARRAY
5173: PPUSH
5174: CALL_OW 86
// end ; end_of_file
5178: END
// var shipment , inqueue ; export function init_shipments_and_respawning ; begin
5179: LD_INT 0
5181: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5182: LD_ADDR_LOC 4
5186: PUSH
5187: LD_INT 0
5189: PPUSH
5190: LD_INT 3
5192: PPUSH
5193: CALL_OW 12
5197: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5198: LD_ADDR_LOC 5
5202: PUSH
5203: LD_INT 0
5205: PUSH
5206: LD_INT 0
5208: PUSH
5209: LD_INT 0
5211: PUSH
5212: LD_INT 0
5214: PUSH
5215: LD_INT 0
5217: PUSH
5218: LD_INT 0
5220: PUSH
5221: LD_INT 0
5223: PUSH
5224: LD_INT 0
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: ST_TO_ADDR
// end ;
5237: LD_VAR 0 1
5241: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5242: GO 5244
5244: DISABLE
5245: LD_INT 0
5247: PPUSH
// begin case tick of 1 .. 1 1$0 :
5248: LD_OWVAR 1
5252: PUSH
5253: LD_INT 1
5255: DOUBLE
5256: GREATEREQUAL
5257: IFFALSE 5265
5259: LD_INT 2100
5261: DOUBLE
5262: LESSEQUAL
5263: IFTRUE 5267
5265: GO 5278
5267: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5268: LD_ADDR_VAR 0 1
5272: PUSH
5273: LD_INT 150
5275: ST_TO_ADDR
5276: GO 5461
5278: LD_INT 2100
5280: PUSH
5281: LD_INT 1
5283: PLUS
5284: DOUBLE
5285: GREATEREQUAL
5286: IFFALSE 5294
5288: LD_INT 10500
5290: DOUBLE
5291: LESSEQUAL
5292: IFTRUE 5296
5294: GO 5307
5296: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5297: LD_ADDR_VAR 0 1
5301: PUSH
5302: LD_INT 100
5304: ST_TO_ADDR
5305: GO 5461
5307: LD_INT 10500
5309: PUSH
5310: LD_INT 1
5312: PLUS
5313: DOUBLE
5314: GREATEREQUAL
5315: IFFALSE 5323
5317: LD_INT 21000
5319: DOUBLE
5320: LESSEQUAL
5321: IFTRUE 5325
5323: GO 5336
5325: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5326: LD_ADDR_VAR 0 1
5330: PUSH
5331: LD_INT 90
5333: ST_TO_ADDR
5334: GO 5461
5336: LD_INT 21000
5338: PUSH
5339: LD_INT 1
5341: PLUS
5342: DOUBLE
5343: GREATEREQUAL
5344: IFFALSE 5352
5346: LD_INT 42000
5348: DOUBLE
5349: LESSEQUAL
5350: IFTRUE 5354
5352: GO 5365
5354: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5355: LD_ADDR_VAR 0 1
5359: PUSH
5360: LD_INT 70
5362: ST_TO_ADDR
5363: GO 5461
5365: LD_INT 42000
5367: PUSH
5368: LD_INT 1
5370: PLUS
5371: DOUBLE
5372: GREATEREQUAL
5373: IFFALSE 5381
5375: LD_INT 63000
5377: DOUBLE
5378: LESSEQUAL
5379: IFTRUE 5383
5381: GO 5394
5383: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5384: LD_ADDR_VAR 0 1
5388: PUSH
5389: LD_INT 60
5391: ST_TO_ADDR
5392: GO 5461
5394: LD_INT 63000
5396: PUSH
5397: LD_INT 1
5399: PLUS
5400: DOUBLE
5401: GREATEREQUAL
5402: IFFALSE 5410
5404: LD_INT 105000
5406: DOUBLE
5407: LESSEQUAL
5408: IFTRUE 5412
5410: GO 5423
5412: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5413: LD_ADDR_VAR 0 1
5417: PUSH
5418: LD_INT 35
5420: ST_TO_ADDR
5421: GO 5461
5423: LD_INT 105000
5425: PUSH
5426: LD_INT 1
5428: PLUS
5429: DOUBLE
5430: GREATEREQUAL
5431: IFFALSE 5439
5433: LD_INT 630000
5435: DOUBLE
5436: LESSEQUAL
5437: IFTRUE 5441
5439: GO 5452
5441: POP
// d := 20 ; else
5442: LD_ADDR_VAR 0 1
5446: PUSH
5447: LD_INT 20
5449: ST_TO_ADDR
5450: GO 5461
5452: POP
// d := 0 ; end ;
5453: LD_ADDR_VAR 0 1
5457: PUSH
5458: LD_INT 0
5460: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5461: LD_INT 1
5463: PPUSH
5464: LD_INT 10000
5466: PPUSH
5467: CALL_OW 12
5471: PUSH
5472: LD_VAR 0 1
5476: PUSH
5477: LD_EXP 21
5481: MUL
5482: LESSEQUAL
5483: IFFALSE 5545
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5485: LD_INT 1
5487: PPUSH
5488: LD_INT 140
5490: PPUSH
5491: CALL_OW 12
5495: PPUSH
5496: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5500: LD_ADDR_LOC 4
5504: PUSH
5505: LD_LOC 4
5509: PUSH
5510: LD_INT 1
5512: PLUS
5513: PUSH
5514: LD_INT 4
5516: MOD
5517: ST_TO_ADDR
// CreateCratesArea ( Rand ( 3 , 5 ) , q1 + shipment , true ) ;
5518: LD_INT 3
5520: PPUSH
5521: LD_INT 5
5523: PPUSH
5524: CALL_OW 12
5528: PPUSH
5529: LD_INT 1
5531: PUSH
5532: LD_LOC 4
5536: PLUS
5537: PPUSH
5538: LD_INT 1
5540: PPUSH
5541: CALL_OW 55
// end ; enable ;
5545: ENABLE
// end ; end_of_file
5546: PPOPN 1
5548: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5549: LD_VAR 0 1
5553: PPUSH
5554: CALL_OW 266
5558: PUSH
5559: LD_INT 0
5561: PUSH
5562: LD_INT 1
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: IN
5569: IFFALSE 5594
// SetBName ( b , @ & GetSide ( b ) ) ;
5571: LD_VAR 0 1
5575: PPUSH
5576: LD_STRING @
5578: PUSH
5579: LD_VAR 0 1
5583: PPUSH
5584: CALL_OW 255
5588: STR
5589: PPUSH
5590: CALL_OW 500
// if def_game_rules then
5594: LD_EXP 38
5598: IFFALSE 5635
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
5600: LD_VAR 0 1
5604: PPUSH
5605: LD_VAR 0 1
5609: PPUSH
5610: CALL_OW 266
5614: PPUSH
5615: LD_VAR 0 1
5619: PPUSH
5620: CALL_OW 255
5624: PPUSH
5625: LD_INT 0
5627: PPUSH
5628: LD_INT 1
5630: PPUSH
5631: CALL 13991 0 5
// end ;
5635: PPOPN 2
5637: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5638: LD_VAR 0 1
5642: PPUSH
5643: CALL_OW 266
5647: PUSH
5648: LD_INT 0
5650: PUSH
5651: LD_INT 1
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: IN
5658: IFFALSE 5683
// SetBName ( b , @ & GetSide ( b ) ) ;
5660: LD_VAR 0 1
5664: PPUSH
5665: LD_STRING @
5667: PUSH
5668: LD_VAR 0 1
5672: PPUSH
5673: CALL_OW 255
5677: STR
5678: PPUSH
5679: CALL_OW 500
// if def_game_rules then
5683: LD_EXP 38
5687: IFFALSE 5726
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
5689: LD_VAR 0 1
5693: PPUSH
5694: LD_VAR 0 1
5698: PPUSH
5699: CALL_OW 266
5703: PPUSH
5704: LD_VAR 0 1
5708: PPUSH
5709: CALL_OW 255
5713: PPUSH
5714: LD_VAR 0 2
5718: PPUSH
5719: LD_INT 1
5721: PPUSH
5722: CALL 13991 0 5
// end ;
5726: PPOPN 3
5728: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
5729: LD_INT 0
5731: PPUSH
5732: PPUSH
5733: PPUSH
5734: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
5735: LD_VAR 0 1
5739: PPUSH
5740: CALL_OW 255
5744: PUSH
5745: LD_INT 0
5747: EQUAL
5748: PUSH
5749: LD_VAR 0 1
5753: PPUSH
5754: CALL_OW 257
5758: PUSH
5759: LD_INT 12
5761: EQUAL
5762: AND
5763: IFFALSE 5769
// CheckApemenAmount ;
5765: CALL 14744 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
5769: LD_VAR 0 1
5773: PPUSH
5774: CALL_OW 266
5778: PUSH
5779: LD_INT 0
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: IN
5789: IFFALSE 5871
// begin pos := Side_Positions [ GetSide ( j ) ] ;
5791: LD_ADDR_VAR 0 4
5795: PUSH
5796: LD_EXP 29
5800: PUSH
5801: LD_VAR 0 1
5805: PPUSH
5806: CALL_OW 255
5810: ARRAY
5811: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
5812: LD_ADDR_VAR 0 2
5816: PUSH
5817: LD_EXP 33
5821: PUSH
5822: LD_VAR 0 4
5826: ARRAY
5827: PUSH
5828: LD_INT 1
5830: ARRAY
5831: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
5832: LD_ADDR_VAR 0 3
5836: PUSH
5837: LD_EXP 33
5841: PUSH
5842: LD_VAR 0 4
5846: ARRAY
5847: PUSH
5848: LD_INT 2
5850: ARRAY
5851: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
5852: LD_VAR 0 2
5856: PPUSH
5857: LD_VAR 0 3
5861: PPUSH
5862: CALL_OW 420
5866: PPUSH
5867: CALL_OW 419
// end ; if def_game_rules then
5871: LD_EXP 38
5875: IFFALSE 5974
// if ( GetType ( j ) = 3 ) then
5877: LD_VAR 0 1
5881: PPUSH
5882: CALL_OW 247
5886: PUSH
5887: LD_INT 3
5889: EQUAL
5890: IFFALSE 5930
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
5892: LD_VAR 0 1
5896: PPUSH
5897: LD_VAR 0 1
5901: PPUSH
5902: CALL_OW 266
5906: PPUSH
5907: LD_VAR 0 1
5911: PPUSH
5912: CALL_OW 255
5916: PPUSH
5917: LD_INT 0
5919: PPUSH
5920: LD_INT 1
5922: NEG
5923: PPUSH
5924: CALL 13991 0 5
5928: GO 5974
// if ( GetChassis ( j ) = 25 ) then
5930: LD_VAR 0 1
5934: PPUSH
5935: CALL_OW 265
5939: PUSH
5940: LD_INT 25
5942: EQUAL
5943: IFFALSE 5974
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
5945: LD_VAR 0 1
5949: PPUSH
5950: LD_INT 37
5952: PPUSH
5953: LD_VAR 0 1
5957: PPUSH
5958: CALL_OW 255
5962: PPUSH
5963: LD_INT 0
5965: PPUSH
5966: LD_INT 1
5968: NEG
5969: PPUSH
5970: CALL 13991 0 5
// end ;
5974: PPOPN 5
5976: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
5977: LD_EXP 38
5981: PUSH
5982: LD_VAR 0 1
5986: PPUSH
5987: CALL_OW 265
5991: PUSH
5992: LD_INT 25
5994: EQUAL
5995: AND
5996: IFFALSE 6028
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
5998: LD_VAR 0 1
6002: PPUSH
6003: LD_INT 37
6005: PPUSH
6006: LD_VAR 0 1
6010: PPUSH
6011: CALL_OW 255
6015: PPUSH
6016: LD_VAR 0 3
6020: PPUSH
6021: LD_INT 1
6023: PPUSH
6024: CALL 13991 0 5
// end ;
6028: PPOPN 4
6030: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6031: LD_VAR 0 1
6035: PPUSH
6036: LD_VAR 0 2
6040: PPUSH
6041: LD_VAR 0 3
6045: PPUSH
6046: LD_OWVAR 2
6050: PPUSH
6051: CALL 15613 0 4
6055: PPOPN 3
6057: END
// export ZMIZELI_LIDI ; export POINTY ; export function vygeneruj_lidi_na_ztraceni ; var i , j , k ; var pom , pom1 ; var barva ; begin
6058: LD_INT 0
6060: PPUSH
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
6065: PPUSH
6066: PPUSH
// ZMIZELI_LIDI = [ ] ;
6067: LD_ADDR_EXP 35
6071: PUSH
6072: EMPTY
6073: ST_TO_ADDR
// for j := 1 to 4 do
6074: LD_ADDR_VAR 0 3
6078: PUSH
6079: DOUBLE
6080: LD_INT 1
6082: DEC
6083: ST_TO_ADDR
6084: LD_INT 4
6086: PUSH
6087: FOR_TO
6088: IFFALSE 6251
// begin pom1 = [ ] ;
6090: LD_ADDR_VAR 0 6
6094: PUSH
6095: EMPTY
6096: ST_TO_ADDR
// for k := 1 to 8 do
6097: LD_ADDR_VAR 0 4
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 8
6109: PUSH
6110: FOR_TO
6111: IFFALSE 6145
// if Side_Positions [ k ] = j then
6113: LD_EXP 29
6117: PUSH
6118: LD_VAR 0 4
6122: ARRAY
6123: PUSH
6124: LD_VAR 0 3
6128: EQUAL
6129: IFFALSE 6143
// begin barva = k ;
6131: LD_ADDR_VAR 0 7
6135: PUSH
6136: LD_VAR 0 4
6140: ST_TO_ADDR
// break ;
6141: GO 6145
// end ;
6143: GO 6110
6145: POP
6146: POP
// for i := 1 to 5 do
6147: LD_ADDR_VAR 0 2
6151: PUSH
6152: DOUBLE
6153: LD_INT 1
6155: DEC
6156: ST_TO_ADDR
6157: LD_INT 5
6159: PUSH
6160: FOR_TO
6161: IFFALSE 6228
// begin if Prob ( 10 ) and def_vehicles_too then
6163: LD_INT 10
6165: PPUSH
6166: CALL_OW 13
6170: PUSH
6171: LD_EXP 15
6175: AND
6176: IFFALSE 6195
// pom = vytvor_nove_auto ( barva ) else
6178: LD_ADDR_VAR 0 5
6182: PUSH
6183: LD_VAR 0 7
6187: PPUSH
6188: CALL 6998 0 1
6192: ST_TO_ADDR
6193: GO 6210
// pom = vytvor_noveho_cloveka ( barva ) ;
6195: LD_ADDR_VAR 0 5
6199: PUSH
6200: LD_VAR 0 7
6204: PPUSH
6205: CALL 6277 0 1
6209: ST_TO_ADDR
// pom1 = pom1 ^ pom ;
6210: LD_ADDR_VAR 0 6
6214: PUSH
6215: LD_VAR 0 6
6219: PUSH
6220: LD_VAR 0 5
6224: ADD
6225: ST_TO_ADDR
// end ;
6226: GO 6160
6228: POP
6229: POP
// ZMIZELI_LIDI = ZMIZELI_LIDI ^ [ pom1 ] ;
6230: LD_ADDR_EXP 35
6234: PUSH
6235: LD_EXP 35
6239: PUSH
6240: LD_VAR 0 6
6244: PUSH
6245: EMPTY
6246: LIST
6247: ADD
6248: ST_TO_ADDR
// end ;
6249: GO 6087
6251: POP
6252: POP
// POINTY = [ [ ] , [ ] , [ ] , [ ] ] ;
6253: LD_ADDR_EXP 36
6257: PUSH
6258: EMPTY
6259: PUSH
6260: EMPTY
6261: PUSH
6262: EMPTY
6263: PUSH
6264: EMPTY
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: ST_TO_ADDR
// end ;
6272: LD_VAR 0 1
6276: RET
// function vytvor_noveho_cloveka ( b ) ; var pom , pom1 ; var cla ; var i ; var sidy ; var poc ; var ah ; var pommm ; begin
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
6281: PPUSH
6282: PPUSH
6283: PPUSH
6284: PPUSH
6285: PPUSH
6286: PPUSH
6287: PPUSH
// if def_other_nation then
6288: LD_EXP 14
6292: IFFALSE 6312
// pom = Rand ( 1 , 11 ) else
6294: LD_ADDR_VAR 0 3
6298: PUSH
6299: LD_INT 1
6301: PPUSH
6302: LD_INT 11
6304: PPUSH
6305: CALL_OW 12
6309: ST_TO_ADDR
6310: GO 6508
// begin pommm = Rand ( 1 , 8 ) ;
6312: LD_ADDR_VAR 0 10
6316: PUSH
6317: LD_INT 1
6319: PPUSH
6320: LD_INT 8
6322: PPUSH
6323: CALL_OW 12
6327: ST_TO_ADDR
// case Side_Nations [ b ] of nation_american :
6328: LD_EXP 30
6332: PUSH
6333: LD_VAR 0 1
6337: ARRAY
6338: PUSH
6339: LD_INT 1
6341: DOUBLE
6342: EQUAL
6343: IFTRUE 6347
6345: GO 6395
6347: POP
// pom = [ 1 , 2 , 5 , 6 , 7 , 8 , 9 , 5 ] [ pommm ] ; nation_arabian :
6348: LD_ADDR_VAR 0 3
6352: PUSH
6353: LD_INT 1
6355: PUSH
6356: LD_INT 2
6358: PUSH
6359: LD_INT 5
6361: PUSH
6362: LD_INT 6
6364: PUSH
6365: LD_INT 7
6367: PUSH
6368: LD_INT 8
6370: PUSH
6371: LD_INT 9
6373: PUSH
6374: LD_INT 5
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: PUSH
6387: LD_VAR 0 10
6391: ARRAY
6392: ST_TO_ADDR
6393: GO 6508
6395: LD_INT 2
6397: DOUBLE
6398: EQUAL
6399: IFTRUE 6403
6401: GO 6451
6403: POP
// pom = [ 1 , 3 , 4 , 5 , 6 , 7 , 8 , 10 ] [ pommm ] ; nation_russian :
6404: LD_ADDR_VAR 0 3
6408: PUSH
6409: LD_INT 1
6411: PUSH
6412: LD_INT 3
6414: PUSH
6415: LD_INT 4
6417: PUSH
6418: LD_INT 5
6420: PUSH
6421: LD_INT 6
6423: PUSH
6424: LD_INT 7
6426: PUSH
6427: LD_INT 8
6429: PUSH
6430: LD_INT 10
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_VAR 0 10
6447: ARRAY
6448: ST_TO_ADDR
6449: GO 6508
6451: LD_INT 3
6453: DOUBLE
6454: EQUAL
6455: IFTRUE 6459
6457: GO 6507
6459: POP
// pom = [ 1 , 2 , 3 , 5 , 6 , 7 , 8 , 11 ] [ pommm ] ; end ;
6460: LD_ADDR_VAR 0 3
6464: PUSH
6465: LD_INT 1
6467: PUSH
6468: LD_INT 2
6470: PUSH
6471: LD_INT 3
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: LD_INT 6
6479: PUSH
6480: LD_INT 7
6482: PUSH
6483: LD_INT 8
6485: PUSH
6486: LD_INT 11
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: PUSH
6499: LD_VAR 0 10
6503: ARRAY
6504: ST_TO_ADDR
6505: GO 6508
6507: POP
// end ; case pom of 1 :
6508: LD_VAR 0 3
6512: PUSH
6513: LD_INT 1
6515: DOUBLE
6516: EQUAL
6517: IFTRUE 6521
6519: GO 6532
6521: POP
// cla = class_apeman ; 2 :
6522: LD_ADDR_VAR 0 5
6526: PUSH
6527: LD_INT 12
6529: ST_TO_ADDR
6530: GO 6723
6532: LD_INT 2
6534: DOUBLE
6535: EQUAL
6536: IFTRUE 6540
6538: GO 6551
6540: POP
// cla = class_apeman_engineer ; 3 :
6541: LD_ADDR_VAR 0 5
6545: PUSH
6546: LD_INT 16
6548: ST_TO_ADDR
6549: GO 6723
6551: LD_INT 3
6553: DOUBLE
6554: EQUAL
6555: IFTRUE 6559
6557: GO 6570
6559: POP
// cla = class_apeman_soldier ; 4 :
6560: LD_ADDR_VAR 0 5
6564: PUSH
6565: LD_INT 15
6567: ST_TO_ADDR
6568: GO 6723
6570: LD_INT 4
6572: DOUBLE
6573: EQUAL
6574: IFTRUE 6578
6576: GO 6589
6578: POP
// cla = class_apeman_kamikaze ; 5 :
6579: LD_ADDR_VAR 0 5
6583: PUSH
6584: LD_INT 17
6586: ST_TO_ADDR
6587: GO 6723
6589: LD_INT 5
6591: DOUBLE
6592: EQUAL
6593: IFTRUE 6597
6595: GO 6608
6597: POP
// cla = class_soldier ; 6 :
6598: LD_ADDR_VAR 0 5
6602: PUSH
6603: LD_INT 1
6605: ST_TO_ADDR
6606: GO 6723
6608: LD_INT 6
6610: DOUBLE
6611: EQUAL
6612: IFTRUE 6616
6614: GO 6627
6616: POP
// cla = class_mechanic ; 7 :
6617: LD_ADDR_VAR 0 5
6621: PUSH
6622: LD_INT 3
6624: ST_TO_ADDR
6625: GO 6723
6627: LD_INT 7
6629: DOUBLE
6630: EQUAL
6631: IFTRUE 6635
6633: GO 6646
6635: POP
// cla = class_engineer ; 8 :
6636: LD_ADDR_VAR 0 5
6640: PUSH
6641: LD_INT 2
6643: ST_TO_ADDR
6644: GO 6723
6646: LD_INT 8
6648: DOUBLE
6649: EQUAL
6650: IFTRUE 6654
6652: GO 6665
6654: POP
// cla = class_scientistic ; 9 :
6655: LD_ADDR_VAR 0 5
6659: PUSH
6660: LD_INT 4
6662: ST_TO_ADDR
6663: GO 6723
6665: LD_INT 9
6667: DOUBLE
6668: EQUAL
6669: IFTRUE 6673
6671: GO 6684
6673: POP
// cla = class_sniper ; 10 :
6674: LD_ADDR_VAR 0 5
6678: PUSH
6679: LD_INT 5
6681: ST_TO_ADDR
6682: GO 6723
6684: LD_INT 10
6686: DOUBLE
6687: EQUAL
6688: IFTRUE 6692
6690: GO 6703
6692: POP
// cla = class_mortar ; 11 :
6693: LD_ADDR_VAR 0 5
6697: PUSH
6698: LD_INT 8
6700: ST_TO_ADDR
6701: GO 6723
6703: LD_INT 11
6705: DOUBLE
6706: EQUAL
6707: IFTRUE 6711
6709: GO 6722
6711: POP
// cla = class_bazooker ; end ;
6712: LD_ADDR_VAR 0 5
6716: PUSH
6717: LD_INT 9
6719: ST_TO_ADDR
6720: GO 6723
6722: POP
// uc_side = b ;
6723: LD_ADDR_OWVAR 20
6727: PUSH
6728: LD_VAR 0 1
6732: ST_TO_ADDR
// if pom <= 4 then
6733: LD_VAR 0 3
6737: PUSH
6738: LD_INT 4
6740: LESSEQUAL
6741: IFFALSE 6753
// uc_nation = nation_nature else
6743: LD_ADDR_OWVAR 21
6747: PUSH
6748: LD_INT 0
6750: ST_TO_ADDR
6751: GO 6856
// begin if def_other_nation then
6753: LD_EXP 14
6757: IFFALSE 6777
// pom1 = Rand ( 1 , 3 ) else
6759: LD_ADDR_VAR 0 4
6763: PUSH
6764: LD_INT 1
6766: PPUSH
6767: LD_INT 3
6769: PPUSH
6770: CALL_OW 12
6774: ST_TO_ADDR
6775: GO 6793
// pom1 = Side_Nations [ b ] ;
6777: LD_ADDR_VAR 0 4
6781: PUSH
6782: LD_EXP 30
6786: PUSH
6787: LD_VAR 0 1
6791: ARRAY
6792: ST_TO_ADDR
// case pom1 of 1 :
6793: LD_VAR 0 4
6797: PUSH
6798: LD_INT 1
6800: DOUBLE
6801: EQUAL
6802: IFTRUE 6806
6804: GO 6817
6806: POP
// uc_nation = nation_american ; 2 :
6807: LD_ADDR_OWVAR 21
6811: PUSH
6812: LD_INT 1
6814: ST_TO_ADDR
6815: GO 6856
6817: LD_INT 2
6819: DOUBLE
6820: EQUAL
6821: IFTRUE 6825
6823: GO 6836
6825: POP
// uc_nation = nation_arabian ; 3 :
6826: LD_ADDR_OWVAR 21
6830: PUSH
6831: LD_INT 2
6833: ST_TO_ADDR
6834: GO 6856
6836: LD_INT 3
6838: DOUBLE
6839: EQUAL
6840: IFTRUE 6844
6842: GO 6855
6844: POP
// uc_nation = nation_russian ; end ;
6845: LD_ADDR_OWVAR 21
6849: PUSH
6850: LD_INT 3
6852: ST_TO_ADDR
6853: GO 6856
6855: POP
// end ; ah = get_human ( get_sex , cla , Rand ( 1 , 5 ) ,  ) ;
6856: LD_ADDR_VAR 0 9
6860: PUSH
6861: CALL 6963 0 0
6865: PPUSH
6866: LD_VAR 0 5
6870: PPUSH
6871: LD_INT 1
6873: PPUSH
6874: LD_INT 5
6876: PPUSH
6877: CALL_OW 12
6881: PPUSH
6882: LD_STRING 
6884: PPUSH
6885: CALL 6905 0 4
6889: ST_TO_ADDR
// result := ah ;
6890: LD_ADDR_VAR 0 2
6894: PUSH
6895: LD_VAR 0 9
6899: ST_TO_ADDR
// end ;
6900: LD_VAR 0 2
6904: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
6905: LD_INT 0
6907: PPUSH
6908: PPUSH
// PrepareHuman ( sex , clas , level ) ;
6909: LD_VAR 0 1
6913: PPUSH
6914: LD_VAR 0 2
6918: PPUSH
6919: LD_VAR 0 3
6923: PPUSH
6924: CALL_OW 380
// hc_name := name ;
6928: LD_ADDR_OWVAR 26
6932: PUSH
6933: LD_VAR 0 4
6937: ST_TO_ADDR
// pom = CreateHuman ;
6938: LD_ADDR_VAR 0 6
6942: PUSH
6943: CALL_OW 44
6947: ST_TO_ADDR
// result := pom ;
6948: LD_ADDR_VAR 0 5
6952: PUSH
6953: LD_VAR 0 6
6957: ST_TO_ADDR
// end ;
6958: LD_VAR 0 5
6962: RET
// function get_sex ; begin
6963: LD_INT 0
6965: PPUSH
// if Prob ( 20 ) then
6966: LD_INT 20
6968: PPUSH
6969: CALL_OW 13
6973: IFFALSE 6985
// result = sex_female else
6975: LD_ADDR_VAR 0 1
6979: PUSH
6980: LD_INT 2
6982: ST_TO_ADDR
6983: GO 6993
// result = sex_male ;
6985: LD_ADDR_VAR 0 1
6989: PUSH
6990: LD_INT 1
6992: ST_TO_ADDR
// end ;
6993: LD_VAR 0 1
6997: RET
// function vytvor_nove_auto ( b ) ; var cat ; var a ; var pom ; var av ; begin
6998: LD_INT 0
7000: PPUSH
7001: PPUSH
7002: PPUSH
7003: PPUSH
7004: PPUSH
// uc_side = b ;
7005: LD_ADDR_OWVAR 20
7009: PUSH
7010: LD_VAR 0 1
7014: ST_TO_ADDR
// if def_other_nation then
7015: LD_EXP 14
7019: IFFALSE 7039
// cat = Rand ( 1 , 3 ) else
7021: LD_ADDR_VAR 0 3
7025: PUSH
7026: LD_INT 1
7028: PPUSH
7029: LD_INT 3
7031: PPUSH
7032: CALL_OW 12
7036: ST_TO_ADDR
7037: GO 7108
// case Side_Nations [ b ] of nation_american :
7039: LD_EXP 30
7043: PUSH
7044: LD_VAR 0 1
7048: ARRAY
7049: PUSH
7050: LD_INT 1
7052: DOUBLE
7053: EQUAL
7054: IFTRUE 7058
7056: GO 7069
7058: POP
// cat = 1 ; nation_arabian :
7059: LD_ADDR_VAR 0 3
7063: PUSH
7064: LD_INT 1
7066: ST_TO_ADDR
7067: GO 7108
7069: LD_INT 2
7071: DOUBLE
7072: EQUAL
7073: IFTRUE 7077
7075: GO 7088
7077: POP
// cat = 2 ; nation_russian :
7078: LD_ADDR_VAR 0 3
7082: PUSH
7083: LD_INT 2
7085: ST_TO_ADDR
7086: GO 7108
7088: LD_INT 3
7090: DOUBLE
7091: EQUAL
7092: IFTRUE 7096
7094: GO 7107
7096: POP
// cat = 3 ; end ;
7097: LD_ADDR_VAR 0 3
7101: PUSH
7102: LD_INT 3
7104: ST_TO_ADDR
7105: GO 7108
7107: POP
// case cat of 1 :
7108: LD_VAR 0 3
7112: PUSH
7113: LD_INT 1
7115: DOUBLE
7116: EQUAL
7117: IFTRUE 7121
7119: GO 7142
7121: POP
// begin uc_nation = nation_american ;
7122: LD_ADDR_OWVAR 21
7126: PUSH
7127: LD_INT 1
7129: ST_TO_ADDR
// pom = get_random_design_am ;
7130: LD_ADDR_VAR 0 5
7134: PUSH
7135: CALL 7282 0 0
7139: ST_TO_ADDR
// end ; 2 :
7140: GO 7201
7142: LD_INT 2
7144: DOUBLE
7145: EQUAL
7146: IFTRUE 7150
7148: GO 7171
7150: POP
// begin uc_nation = nation_arabian ;
7151: LD_ADDR_OWVAR 21
7155: PUSH
7156: LD_INT 2
7158: ST_TO_ADDR
// pom = get_random_design_ar ;
7159: LD_ADDR_VAR 0 5
7163: PUSH
7164: CALL 7948 0 0
7168: ST_TO_ADDR
// end ; 3 :
7169: GO 7201
7171: LD_INT 3
7173: DOUBLE
7174: EQUAL
7175: IFTRUE 7179
7177: GO 7200
7179: POP
// begin uc_nation = nation_russian ;
7180: LD_ADDR_OWVAR 21
7184: PUSH
7185: LD_INT 3
7187: ST_TO_ADDR
// pom = get_random_design_ru ;
7188: LD_ADDR_VAR 0 5
7192: PUSH
7193: CALL 8513 0 0
7197: ST_TO_ADDR
// end ; end ;
7198: GO 7201
7200: POP
// vc_chassis = pom [ 1 ] ;
7201: LD_ADDR_OWVAR 37
7205: PUSH
7206: LD_VAR 0 5
7210: PUSH
7211: LD_INT 1
7213: ARRAY
7214: ST_TO_ADDR
// vc_engine = pom [ 2 ] ;
7215: LD_ADDR_OWVAR 39
7219: PUSH
7220: LD_VAR 0 5
7224: PUSH
7225: LD_INT 2
7227: ARRAY
7228: ST_TO_ADDR
// vc_weapon = pom [ 3 ] ;
7229: LD_ADDR_OWVAR 40
7233: PUSH
7234: LD_VAR 0 5
7238: PUSH
7239: LD_INT 3
7241: ARRAY
7242: ST_TO_ADDR
// vc_control = pom [ 4 ] ;
7243: LD_ADDR_OWVAR 38
7247: PUSH
7248: LD_VAR 0 5
7252: PUSH
7253: LD_INT 4
7255: ARRAY
7256: ST_TO_ADDR
// av = CreateVehicle ;
7257: LD_ADDR_VAR 0 6
7261: PUSH
7262: CALL_OW 45
7266: ST_TO_ADDR
// result := av ;
7267: LD_ADDR_VAR 0 2
7271: PUSH
7272: LD_VAR 0 6
7276: ST_TO_ADDR
// end ;
7277: LD_VAR 0 2
7281: RET
// function get_random_design_am ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
7282: LD_INT 0
7284: PPUSH
7285: PPUSH
7286: PPUSH
7287: PPUSH
7288: PPUSH
7289: PPUSH
7290: PPUSH
7291: PPUSH
7292: PPUSH
7293: PPUSH
// pom1 = Rand ( 1 , 12 ) ;
7294: LD_ADDR_VAR 0 2
7298: PUSH
7299: LD_INT 1
7301: PPUSH
7302: LD_INT 12
7304: PPUSH
7305: CALL_OW 12
7309: ST_TO_ADDR
// case pom1 of 1 :
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 1
7317: DOUBLE
7318: EQUAL
7319: IFTRUE 7323
7321: GO 7334
7323: POP
// aa3 = us_machine_gun ; 2 :
7324: LD_ADDR_VAR 0 9
7328: PUSH
7329: LD_INT 2
7331: ST_TO_ADDR
7332: GO 7544
7334: LD_INT 2
7336: DOUBLE
7337: EQUAL
7338: IFTRUE 7342
7340: GO 7353
7342: POP
// aa3 = us_light_gun ; 3 :
7343: LD_ADDR_VAR 0 9
7347: PUSH
7348: LD_INT 3
7350: ST_TO_ADDR
7351: GO 7544
7353: LD_INT 3
7355: DOUBLE
7356: EQUAL
7357: IFTRUE 7361
7359: GO 7372
7361: POP
// aa3 = us_gatling_gun ; 4 :
7362: LD_ADDR_VAR 0 9
7366: PUSH
7367: LD_INT 4
7369: ST_TO_ADDR
7370: GO 7544
7372: LD_INT 4
7374: DOUBLE
7375: EQUAL
7376: IFTRUE 7380
7378: GO 7391
7380: POP
// aa3 = us_double_gun ; 5 :
7381: LD_ADDR_VAR 0 9
7385: PUSH
7386: LD_INT 5
7388: ST_TO_ADDR
7389: GO 7544
7391: LD_INT 5
7393: DOUBLE
7394: EQUAL
7395: IFTRUE 7399
7397: GO 7410
7399: POP
// aa3 = us_heavy_gun ; 6 :
7400: LD_ADDR_VAR 0 9
7404: PUSH
7405: LD_INT 6
7407: ST_TO_ADDR
7408: GO 7544
7410: LD_INT 6
7412: DOUBLE
7413: EQUAL
7414: IFTRUE 7418
7416: GO 7429
7418: POP
// aa3 = us_rocket_launcher ; 7 :
7419: LD_ADDR_VAR 0 9
7423: PUSH
7424: LD_INT 7
7426: ST_TO_ADDR
7427: GO 7544
7429: LD_INT 7
7431: DOUBLE
7432: EQUAL
7433: IFTRUE 7437
7435: GO 7448
7437: POP
// aa3 = us_laser ; 8 :
7438: LD_ADDR_VAR 0 9
7442: PUSH
7443: LD_INT 9
7445: ST_TO_ADDR
7446: GO 7544
7448: LD_INT 8
7450: DOUBLE
7451: EQUAL
7452: IFTRUE 7456
7454: GO 7467
7456: POP
// aa3 = us_double_laser ; 9 :
7457: LD_ADDR_VAR 0 9
7461: PUSH
7462: LD_INT 10
7464: ST_TO_ADDR
7465: GO 7544
7467: LD_INT 9
7469: DOUBLE
7470: EQUAL
7471: IFTRUE 7475
7473: GO 7486
7475: POP
// aa3 = us_radar ; 10 :
7476: LD_ADDR_VAR 0 9
7480: PUSH
7481: LD_INT 11
7483: ST_TO_ADDR
7484: GO 7544
7486: LD_INT 10
7488: DOUBLE
7489: EQUAL
7490: IFTRUE 7494
7492: GO 7505
7494: POP
// aa3 = us_cargo_bay ; 11 :
7495: LD_ADDR_VAR 0 9
7499: PUSH
7500: LD_INT 12
7502: ST_TO_ADDR
7503: GO 7544
7505: LD_INT 11
7507: DOUBLE
7508: EQUAL
7509: IFTRUE 7513
7511: GO 7524
7513: POP
// aa3 = us_crane ; 12 :
7514: LD_ADDR_VAR 0 9
7518: PUSH
7519: LD_INT 13
7521: ST_TO_ADDR
7522: GO 7544
7524: LD_INT 12
7526: DOUBLE
7527: EQUAL
7528: IFTRUE 7532
7530: GO 7543
7532: POP
// aa3 = us_bulldozer ; end ;
7533: LD_ADDR_VAR 0 9
7537: PUSH
7538: LD_INT 14
7540: ST_TO_ADDR
7541: GO 7544
7543: POP
// if pom1 in [ 5 , 8 , 12 ] then
7544: LD_VAR 0 2
7548: PUSH
7549: LD_INT 5
7551: PUSH
7552: LD_INT 8
7554: PUSH
7555: LD_INT 12
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: IN
7563: IFFALSE 7583
// pom2 = Rand ( 4 , 5 ) else
7565: LD_ADDR_VAR 0 3
7569: PUSH
7570: LD_INT 4
7572: PPUSH
7573: LD_INT 5
7575: PPUSH
7576: CALL_OW 12
7580: ST_TO_ADDR
7581: GO 7634
// if pom1 in [ 1 , 9 ] then
7583: LD_VAR 0 2
7587: PUSH
7588: LD_INT 1
7590: PUSH
7591: LD_INT 9
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: IN
7598: IFFALSE 7618
// pom2 = Rand ( 1 , 5 ) else
7600: LD_ADDR_VAR 0 3
7604: PUSH
7605: LD_INT 1
7607: PPUSH
7608: LD_INT 5
7610: PPUSH
7611: CALL_OW 12
7615: ST_TO_ADDR
7616: GO 7634
// pom2 = Rand ( 2 , 5 ) ;
7618: LD_ADDR_VAR 0 3
7622: PUSH
7623: LD_INT 2
7625: PPUSH
7626: LD_INT 5
7628: PPUSH
7629: CALL_OW 12
7633: ST_TO_ADDR
// case pom2 of 1 :
7634: LD_VAR 0 3
7638: PUSH
7639: LD_INT 1
7641: DOUBLE
7642: EQUAL
7643: IFTRUE 7647
7645: GO 7658
7647: POP
// aa1 = us_light_wheeled ; 2 :
7648: LD_ADDR_VAR 0 7
7652: PUSH
7653: LD_INT 1
7655: ST_TO_ADDR
7656: GO 7735
7658: LD_INT 2
7660: DOUBLE
7661: EQUAL
7662: IFTRUE 7666
7664: GO 7677
7666: POP
// aa1 = us_medium_wheeled ; 3 :
7667: LD_ADDR_VAR 0 7
7671: PUSH
7672: LD_INT 2
7674: ST_TO_ADDR
7675: GO 7735
7677: LD_INT 3
7679: DOUBLE
7680: EQUAL
7681: IFTRUE 7685
7683: GO 7696
7685: POP
// aa1 = us_medium_tracked ; 4 :
7686: LD_ADDR_VAR 0 7
7690: PUSH
7691: LD_INT 3
7693: ST_TO_ADDR
7694: GO 7735
7696: LD_INT 4
7698: DOUBLE
7699: EQUAL
7700: IFTRUE 7704
7702: GO 7715
7704: POP
// aa1 = us_heavy_tracked ; 5 :
7705: LD_ADDR_VAR 0 7
7709: PUSH
7710: LD_INT 4
7712: ST_TO_ADDR
7713: GO 7735
7715: LD_INT 5
7717: DOUBLE
7718: EQUAL
7719: IFTRUE 7723
7721: GO 7734
7723: POP
// aa1 = us_morphling ; end ;
7724: LD_ADDR_VAR 0 7
7728: PUSH
7729: LD_INT 5
7731: ST_TO_ADDR
7732: GO 7735
7734: POP
// if pom2 < 4 then
7735: LD_VAR 0 3
7739: PUSH
7740: LD_INT 4
7742: LESS
7743: IFFALSE 7763
// pom3 = Rand ( 1 , 3 ) else
7745: LD_ADDR_VAR 0 4
7749: PUSH
7750: LD_INT 1
7752: PPUSH
7753: LD_INT 3
7755: PPUSH
7756: CALL_OW 12
7760: ST_TO_ADDR
7761: GO 7779
// pom3 = Rand ( 2 , 3 ) ;
7763: LD_ADDR_VAR 0 4
7767: PUSH
7768: LD_INT 2
7770: PPUSH
7771: LD_INT 3
7773: PPUSH
7774: CALL_OW 12
7778: ST_TO_ADDR
// case pom3 of 1 :
7779: LD_VAR 0 4
7783: PUSH
7784: LD_INT 1
7786: DOUBLE
7787: EQUAL
7788: IFTRUE 7792
7790: GO 7803
7792: POP
// aa2 = engine_solar ; 2 :
7793: LD_ADDR_VAR 0 8
7797: PUSH
7798: LD_INT 2
7800: ST_TO_ADDR
7801: GO 7842
7803: LD_INT 2
7805: DOUBLE
7806: EQUAL
7807: IFTRUE 7811
7809: GO 7822
7811: POP
// aa2 = engine_combustion ; 3 :
7812: LD_ADDR_VAR 0 8
7816: PUSH
7817: LD_INT 1
7819: ST_TO_ADDR
7820: GO 7842
7822: LD_INT 3
7824: DOUBLE
7825: EQUAL
7826: IFTRUE 7830
7828: GO 7841
7830: POP
// aa2 = engine_siberite ; end ;
7831: LD_ADDR_VAR 0 8
7835: PUSH
7836: LD_INT 3
7838: ST_TO_ADDR
7839: GO 7842
7841: POP
// pom4 = Rand ( 1 , 2 ) ;
7842: LD_ADDR_VAR 0 5
7846: PUSH
7847: LD_INT 1
7849: PPUSH
7850: LD_INT 2
7852: PPUSH
7853: CALL_OW 12
7857: ST_TO_ADDR
// case pom4 of 1 :
7858: LD_VAR 0 5
7862: PUSH
7863: LD_INT 1
7865: DOUBLE
7866: EQUAL
7867: IFTRUE 7871
7869: GO 7882
7871: POP
// aa4 = control_manual ; 2 :
7872: LD_ADDR_VAR 0 10
7876: PUSH
7877: LD_INT 1
7879: ST_TO_ADDR
7880: GO 7902
7882: LD_INT 2
7884: DOUBLE
7885: EQUAL
7886: IFTRUE 7890
7888: GO 7901
7890: POP
// aa4 = control_computer ; end ;
7891: LD_ADDR_VAR 0 10
7895: PUSH
7896: LD_INT 3
7898: ST_TO_ADDR
7899: GO 7902
7901: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
7902: LD_ADDR_VAR 0 6
7906: PUSH
7907: LD_VAR 0 7
7911: PUSH
7912: LD_VAR 0 8
7916: PUSH
7917: LD_VAR 0 9
7921: PUSH
7922: LD_VAR 0 10
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: ST_TO_ADDR
// result = aa ;
7933: LD_ADDR_VAR 0 1
7937: PUSH
7938: LD_VAR 0 6
7942: ST_TO_ADDR
// end ;
7943: LD_VAR 0 1
7947: RET
// function get_random_design_ar ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
7948: LD_INT 0
7950: PPUSH
7951: PPUSH
7952: PPUSH
7953: PPUSH
7954: PPUSH
7955: PPUSH
7956: PPUSH
7957: PPUSH
7958: PPUSH
7959: PPUSH
// pom1 = Rand ( 1 , 11 ) ;
7960: LD_ADDR_VAR 0 2
7964: PUSH
7965: LD_INT 1
7967: PPUSH
7968: LD_INT 11
7970: PPUSH
7971: CALL_OW 12
7975: ST_TO_ADDR
// case pom1 of 1 :
7976: LD_VAR 0 2
7980: PUSH
7981: LD_INT 1
7983: DOUBLE
7984: EQUAL
7985: IFTRUE 7989
7987: GO 8000
7989: POP
// aa3 = ar_multimissile_ballista ; 2 :
7990: LD_ADDR_VAR 0 9
7994: PUSH
7995: LD_INT 22
7997: ST_TO_ADDR
7998: GO 8191
8000: LD_INT 2
8002: DOUBLE
8003: EQUAL
8004: IFTRUE 8008
8006: GO 8019
8008: POP
// aa3 = ar_light_gun ; 3 :
8009: LD_ADDR_VAR 0 9
8013: PUSH
8014: LD_INT 23
8016: ST_TO_ADDR
8017: GO 8191
8019: LD_INT 3
8021: DOUBLE
8022: EQUAL
8023: IFTRUE 8027
8025: GO 8038
8027: POP
// aa3 = ar_double_machine_gun ; 4 :
8028: LD_ADDR_VAR 0 9
8032: PUSH
8033: LD_INT 24
8035: ST_TO_ADDR
8036: GO 8191
8038: LD_INT 4
8040: DOUBLE
8041: EQUAL
8042: IFTRUE 8046
8044: GO 8057
8046: POP
// aa3 = ar_gatling_gun ; 5 :
8047: LD_ADDR_VAR 0 9
8051: PUSH
8052: LD_INT 25
8054: ST_TO_ADDR
8055: GO 8191
8057: LD_INT 5
8059: DOUBLE
8060: EQUAL
8061: IFTRUE 8065
8063: GO 8076
8065: POP
// aa3 = ar_flame_thrower ; 6 :
8066: LD_ADDR_VAR 0 9
8070: PUSH
8071: LD_INT 26
8073: ST_TO_ADDR
8074: GO 8191
8076: LD_INT 6
8078: DOUBLE
8079: EQUAL
8080: IFTRUE 8084
8082: GO 8095
8084: POP
// aa3 = ar_gun ; 7 :
8085: LD_ADDR_VAR 0 9
8089: PUSH
8090: LD_INT 27
8092: ST_TO_ADDR
8093: GO 8191
8095: LD_INT 7
8097: DOUBLE
8098: EQUAL
8099: IFTRUE 8103
8101: GO 8114
8103: POP
// aa3 = ar_rocket_launcher ; 8 :
8104: LD_ADDR_VAR 0 9
8108: PUSH
8109: LD_INT 28
8111: ST_TO_ADDR
8112: GO 8191
8114: LD_INT 8
8116: DOUBLE
8117: EQUAL
8118: IFTRUE 8122
8120: GO 8133
8122: POP
// aa3 = ar_selfpropelled_bomb ; 9 :
8123: LD_ADDR_VAR 0 9
8127: PUSH
8128: LD_INT 29
8130: ST_TO_ADDR
8131: GO 8191
8133: LD_INT 9
8135: DOUBLE
8136: EQUAL
8137: IFTRUE 8141
8139: GO 8152
8141: POP
// aa3 = ar_radar ; 10 :
8142: LD_ADDR_VAR 0 9
8146: PUSH
8147: LD_INT 30
8149: ST_TO_ADDR
8150: GO 8191
8152: LD_INT 10
8154: DOUBLE
8155: EQUAL
8156: IFTRUE 8160
8158: GO 8171
8160: POP
// aa3 = ar_control_tower ; 11 :
8161: LD_ADDR_VAR 0 9
8165: PUSH
8166: LD_INT 31
8168: ST_TO_ADDR
8169: GO 8191
8171: LD_INT 11
8173: DOUBLE
8174: EQUAL
8175: IFTRUE 8179
8177: GO 8190
8179: POP
// aa3 = us_cargo_bay ; end ;
8180: LD_ADDR_VAR 0 9
8184: PUSH
8185: LD_INT 12
8187: ST_TO_ADDR
8188: GO 8191
8190: POP
// if pom1 in [ 1 , 2 , 3 ] then
8191: LD_VAR 0 2
8195: PUSH
8196: LD_INT 1
8198: PUSH
8199: LD_INT 2
8201: PUSH
8202: LD_INT 3
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: LIST
8209: IN
8210: IFFALSE 8230
// pom2 = Rand ( 1 , 4 ) else
8212: LD_ADDR_VAR 0 3
8216: PUSH
8217: LD_INT 1
8219: PPUSH
8220: LD_INT 4
8222: PPUSH
8223: CALL_OW 12
8227: ST_TO_ADDR
8228: GO 8246
// pom2 = Rand ( 3 , 4 ) ;
8230: LD_ADDR_VAR 0 3
8234: PUSH
8235: LD_INT 3
8237: PPUSH
8238: LD_INT 4
8240: PPUSH
8241: CALL_OW 12
8245: ST_TO_ADDR
// case pom2 of 1 :
8246: LD_VAR 0 3
8250: PUSH
8251: LD_INT 1
8253: DOUBLE
8254: EQUAL
8255: IFTRUE 8259
8257: GO 8270
8259: POP
// aa1 = ar_hovercraft ; 2 :
8260: LD_ADDR_VAR 0 7
8264: PUSH
8265: LD_INT 11
8267: ST_TO_ADDR
8268: GO 8328
8270: LD_INT 2
8272: DOUBLE
8273: EQUAL
8274: IFTRUE 8278
8276: GO 8289
8278: POP
// aa1 = ar_light_trike ; 3 :
8279: LD_ADDR_VAR 0 7
8283: PUSH
8284: LD_INT 12
8286: ST_TO_ADDR
8287: GO 8328
8289: LD_INT 3
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8308
8297: POP
// aa1 = ar_medium_trike ; 4 :
8298: LD_ADDR_VAR 0 7
8302: PUSH
8303: LD_INT 13
8305: ST_TO_ADDR
8306: GO 8328
8308: LD_INT 4
8310: DOUBLE
8311: EQUAL
8312: IFTRUE 8316
8314: GO 8327
8316: POP
// aa1 = ar_half_tracked ; end ;
8317: LD_ADDR_VAR 0 7
8321: PUSH
8322: LD_INT 14
8324: ST_TO_ADDR
8325: GO 8328
8327: POP
// pom3 = Rand ( 1 , 3 ) ;
8328: LD_ADDR_VAR 0 4
8332: PUSH
8333: LD_INT 1
8335: PPUSH
8336: LD_INT 3
8338: PPUSH
8339: CALL_OW 12
8343: ST_TO_ADDR
// case pom3 of 1 :
8344: LD_VAR 0 4
8348: PUSH
8349: LD_INT 1
8351: DOUBLE
8352: EQUAL
8353: IFTRUE 8357
8355: GO 8368
8357: POP
// aa2 = engine_solar ; 2 :
8358: LD_ADDR_VAR 0 8
8362: PUSH
8363: LD_INT 2
8365: ST_TO_ADDR
8366: GO 8407
8368: LD_INT 2
8370: DOUBLE
8371: EQUAL
8372: IFTRUE 8376
8374: GO 8387
8376: POP
// aa2 = engine_combustion ; 3 :
8377: LD_ADDR_VAR 0 8
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
8385: GO 8407
8387: LD_INT 3
8389: DOUBLE
8390: EQUAL
8391: IFTRUE 8395
8393: GO 8406
8395: POP
// aa2 = engine_siberite ; end ;
8396: LD_ADDR_VAR 0 8
8400: PUSH
8401: LD_INT 3
8403: ST_TO_ADDR
8404: GO 8407
8406: POP
// pom4 = Rand ( 1 , 2 ) ;
8407: LD_ADDR_VAR 0 5
8411: PUSH
8412: LD_INT 1
8414: PPUSH
8415: LD_INT 2
8417: PPUSH
8418: CALL_OW 12
8422: ST_TO_ADDR
// case pom4 of 1 :
8423: LD_VAR 0 5
8427: PUSH
8428: LD_INT 1
8430: DOUBLE
8431: EQUAL
8432: IFTRUE 8436
8434: GO 8447
8436: POP
// aa4 = control_manual ; 2 :
8437: LD_ADDR_VAR 0 10
8441: PUSH
8442: LD_INT 1
8444: ST_TO_ADDR
8445: GO 8467
8447: LD_INT 2
8449: DOUBLE
8450: EQUAL
8451: IFTRUE 8455
8453: GO 8466
8455: POP
// aa4 = control_apeman ; end ;
8456: LD_ADDR_VAR 0 10
8460: PUSH
8461: LD_INT 5
8463: ST_TO_ADDR
8464: GO 8467
8466: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
8467: LD_ADDR_VAR 0 6
8471: PUSH
8472: LD_VAR 0 7
8476: PUSH
8477: LD_VAR 0 8
8481: PUSH
8482: LD_VAR 0 9
8486: PUSH
8487: LD_VAR 0 10
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: ST_TO_ADDR
// result = aa ;
8498: LD_ADDR_VAR 0 1
8502: PUSH
8503: LD_VAR 0 6
8507: ST_TO_ADDR
// end ;
8508: LD_VAR 0 1
8512: RET
// function get_random_design_ru ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
8513: LD_INT 0
8515: PPUSH
8516: PPUSH
8517: PPUSH
8518: PPUSH
8519: PPUSH
8520: PPUSH
8521: PPUSH
8522: PPUSH
8523: PPUSH
8524: PPUSH
// pom1 = Rand ( 1 , 10 ) ;
8525: LD_ADDR_VAR 0 2
8529: PUSH
8530: LD_INT 1
8532: PPUSH
8533: LD_INT 10
8535: PPUSH
8536: CALL_OW 12
8540: ST_TO_ADDR
// case pom1 of 1 :
8541: LD_VAR 0 2
8545: PUSH
8546: LD_INT 1
8548: DOUBLE
8549: EQUAL
8550: IFTRUE 8554
8552: GO 8565
8554: POP
// aa3 = ru_heavy_machine_gun ; 2 :
8555: LD_ADDR_VAR 0 9
8559: PUSH
8560: LD_INT 42
8562: ST_TO_ADDR
8563: GO 8737
8565: LD_INT 2
8567: DOUBLE
8568: EQUAL
8569: IFTRUE 8573
8571: GO 8584
8573: POP
// aa3 = ru_gatling_gun ; 3 :
8574: LD_ADDR_VAR 0 9
8578: PUSH
8579: LD_INT 43
8581: ST_TO_ADDR
8582: GO 8737
8584: LD_INT 3
8586: DOUBLE
8587: EQUAL
8588: IFTRUE 8592
8590: GO 8603
8592: POP
// aa3 = ru_gun ; 4 :
8593: LD_ADDR_VAR 0 9
8597: PUSH
8598: LD_INT 44
8600: ST_TO_ADDR
8601: GO 8737
8603: LD_INT 4
8605: DOUBLE
8606: EQUAL
8607: IFTRUE 8611
8609: GO 8622
8611: POP
// aa3 = ru_rocket_launcher ; 5 :
8612: LD_ADDR_VAR 0 9
8616: PUSH
8617: LD_INT 45
8619: ST_TO_ADDR
8620: GO 8737
8622: LD_INT 5
8624: DOUBLE
8625: EQUAL
8626: IFTRUE 8630
8628: GO 8641
8630: POP
// aa3 = ru_heavy_gun ; 6 :
8631: LD_ADDR_VAR 0 9
8635: PUSH
8636: LD_INT 46
8638: ST_TO_ADDR
8639: GO 8737
8641: LD_INT 6
8643: DOUBLE
8644: EQUAL
8645: IFTRUE 8649
8647: GO 8660
8649: POP
// aa3 = ru_rocket ; 7 :
8650: LD_ADDR_VAR 0 9
8654: PUSH
8655: LD_INT 47
8657: ST_TO_ADDR
8658: GO 8737
8660: LD_INT 7
8662: DOUBLE
8663: EQUAL
8664: IFTRUE 8668
8666: GO 8679
8668: POP
// aa3 = ru_time_lapser ; 8 :
8669: LD_ADDR_VAR 0 9
8673: PUSH
8674: LD_INT 49
8676: ST_TO_ADDR
8677: GO 8737
8679: LD_INT 8
8681: DOUBLE
8682: EQUAL
8683: IFTRUE 8687
8685: GO 8698
8687: POP
// aa3 = ru_cargo_bay ; 9 :
8688: LD_ADDR_VAR 0 9
8692: PUSH
8693: LD_INT 51
8695: ST_TO_ADDR
8696: GO 8737
8698: LD_INT 9
8700: DOUBLE
8701: EQUAL
8702: IFTRUE 8706
8704: GO 8717
8706: POP
// aa3 = ru_crane ; 10 :
8707: LD_ADDR_VAR 0 9
8711: PUSH
8712: LD_INT 52
8714: ST_TO_ADDR
8715: GO 8737
8717: LD_INT 10
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8736
8725: POP
// aa3 = ru_bulldozer ; end ;
8726: LD_ADDR_VAR 0 9
8730: PUSH
8731: LD_INT 53
8733: ST_TO_ADDR
8734: GO 8737
8736: POP
// if pom1 in [ 1 , 2 , 3 , 4 ] then
8737: LD_VAR 0 2
8741: PUSH
8742: LD_INT 1
8744: PUSH
8745: LD_INT 2
8747: PUSH
8748: LD_INT 3
8750: PUSH
8751: LD_INT 4
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: IN
8760: IFFALSE 8780
// pom2 = Rand ( 1 , 4 ) else
8762: LD_ADDR_VAR 0 3
8766: PUSH
8767: LD_INT 1
8769: PPUSH
8770: LD_INT 4
8772: PPUSH
8773: CALL_OW 12
8777: ST_TO_ADDR
8778: GO 8796
// pom2 = Rand ( 3 , 4 ) ;
8780: LD_ADDR_VAR 0 3
8784: PUSH
8785: LD_INT 3
8787: PPUSH
8788: LD_INT 4
8790: PPUSH
8791: CALL_OW 12
8795: ST_TO_ADDR
// case pom2 of 1 :
8796: LD_VAR 0 3
8800: PUSH
8801: LD_INT 1
8803: DOUBLE
8804: EQUAL
8805: IFTRUE 8809
8807: GO 8820
8809: POP
// aa1 = ru_medium_wheeled ; 2 :
8810: LD_ADDR_VAR 0 7
8814: PUSH
8815: LD_INT 21
8817: ST_TO_ADDR
8818: GO 8878
8820: LD_INT 2
8822: DOUBLE
8823: EQUAL
8824: IFTRUE 8828
8826: GO 8839
8828: POP
// aa1 = ru_medium_tracked ; 3 :
8829: LD_ADDR_VAR 0 7
8833: PUSH
8834: LD_INT 22
8836: ST_TO_ADDR
8837: GO 8878
8839: LD_INT 3
8841: DOUBLE
8842: EQUAL
8843: IFTRUE 8847
8845: GO 8858
8847: POP
// aa1 = ru_heavy_wheeled ; 4 :
8848: LD_ADDR_VAR 0 7
8852: PUSH
8853: LD_INT 23
8855: ST_TO_ADDR
8856: GO 8878
8858: LD_INT 4
8860: DOUBLE
8861: EQUAL
8862: IFTRUE 8866
8864: GO 8877
8866: POP
// aa1 = ru_heavy_tracked ; end ;
8867: LD_ADDR_VAR 0 7
8871: PUSH
8872: LD_INT 24
8874: ST_TO_ADDR
8875: GO 8878
8877: POP
// pom3 = Rand ( 1 , 2 ) ;
8878: LD_ADDR_VAR 0 4
8882: PUSH
8883: LD_INT 1
8885: PPUSH
8886: LD_INT 2
8888: PPUSH
8889: CALL_OW 12
8893: ST_TO_ADDR
// case pom3 of 1 :
8894: LD_VAR 0 4
8898: PUSH
8899: LD_INT 1
8901: DOUBLE
8902: EQUAL
8903: IFTRUE 8907
8905: GO 8918
8907: POP
// aa2 = engine_combustion ; 2 :
8908: LD_ADDR_VAR 0 8
8912: PUSH
8913: LD_INT 1
8915: ST_TO_ADDR
8916: GO 8938
8918: LD_INT 2
8920: DOUBLE
8921: EQUAL
8922: IFTRUE 8926
8924: GO 8937
8926: POP
// aa2 = engine_siberite ; end ;
8927: LD_ADDR_VAR 0 8
8931: PUSH
8932: LD_INT 3
8934: ST_TO_ADDR
8935: GO 8938
8937: POP
// pom4 = Rand ( 1 , 2 ) ;
8938: LD_ADDR_VAR 0 5
8942: PUSH
8943: LD_INT 1
8945: PPUSH
8946: LD_INT 2
8948: PPUSH
8949: CALL_OW 12
8953: ST_TO_ADDR
// case pom4 of 1 :
8954: LD_VAR 0 5
8958: PUSH
8959: LD_INT 1
8961: DOUBLE
8962: EQUAL
8963: IFTRUE 8967
8965: GO 8978
8967: POP
// aa4 = control_manual ; 2 :
8968: LD_ADDR_VAR 0 10
8972: PUSH
8973: LD_INT 1
8975: ST_TO_ADDR
8976: GO 8998
8978: LD_INT 2
8980: DOUBLE
8981: EQUAL
8982: IFTRUE 8986
8984: GO 8997
8986: POP
// aa4 = control_computer ; end ;
8987: LD_ADDR_VAR 0 10
8991: PUSH
8992: LD_INT 3
8994: ST_TO_ADDR
8995: GO 8998
8997: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
8998: LD_ADDR_VAR 0 6
9002: PUSH
9003: LD_VAR 0 7
9007: PUSH
9008: LD_VAR 0 8
9012: PUSH
9013: LD_VAR 0 9
9017: PUSH
9018: LD_VAR 0 10
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: ST_TO_ADDR
// result = aa ;
9029: LD_ADDR_VAR 0 1
9033: PUSH
9034: LD_VAR 0 6
9038: ST_TO_ADDR
// end ;
9039: LD_VAR 0 1
9043: RET
// every 0 0$1 trigger FilterUnitsInArea ( zona , [ f_not , [ f_side , 0 ] ] ) > 0 do var zony ; var pom , i ; var UN ; var p1 , p2 ;
9044: LD_INT 25
9046: PPUSH
9047: LD_INT 3
9049: PUSH
9050: LD_INT 22
9052: PUSH
9053: LD_INT 0
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PPUSH
9064: CALL_OW 70
9068: PUSH
9069: LD_INT 0
9071: GREATER
9072: IFFALSE 9265
9074: GO 9076
9076: DISABLE
9077: LD_INT 0
9079: PPUSH
9080: PPUSH
9081: PPUSH
9082: PPUSH
9083: PPUSH
9084: PPUSH
// begin zony = [ z1 , z2 , z3 , z4 , z5 , z6 , z7 , z8 , z9 , z10 , z11 , z12 , z13 , z14 , z15 , z16 , z17 , z18 , z19 , z20 ] ;
9085: LD_ADDR_VAR 0 1
9089: PUSH
9090: LD_INT 5
9092: PUSH
9093: LD_INT 6
9095: PUSH
9096: LD_INT 7
9098: PUSH
9099: LD_INT 8
9101: PUSH
9102: LD_INT 9
9104: PUSH
9105: LD_INT 10
9107: PUSH
9108: LD_INT 11
9110: PUSH
9111: LD_INT 12
9113: PUSH
9114: LD_INT 20
9116: PUSH
9117: LD_INT 13
9119: PUSH
9120: LD_INT 14
9122: PUSH
9123: LD_INT 21
9125: PUSH
9126: LD_INT 15
9128: PUSH
9129: LD_INT 16
9131: PUSH
9132: LD_INT 17
9134: PUSH
9135: LD_INT 18
9137: PUSH
9138: LD_INT 19
9140: PUSH
9141: LD_INT 22
9143: PUSH
9144: LD_INT 23
9146: PUSH
9147: LD_INT 24
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: ST_TO_ADDR
// for i in zony do
9172: LD_ADDR_VAR 0 3
9176: PUSH
9177: LD_VAR 0 1
9181: PUSH
9182: FOR_IN
9183: IFFALSE 9262
// begin pom = FilterUnitsInArea ( i , [ f_not , [ f_side , 0 ] ] ) ;
9185: LD_ADDR_VAR 0 2
9189: PUSH
9190: LD_VAR 0 3
9194: PPUSH
9195: LD_INT 3
9197: PUSH
9198: LD_INT 22
9200: PUSH
9201: LD_INT 0
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PPUSH
9212: CALL_OW 70
9216: ST_TO_ADDR
// if pom > 0 then
9217: LD_VAR 0 2
9221: PUSH
9222: LD_INT 0
9224: GREATER
9225: IFFALSE 9260
// begin p1 = GetSide ( pom [ 1 ] ) ;
9227: LD_ADDR_VAR 0 5
9231: PUSH
9232: LD_VAR 0 2
9236: PUSH
9237: LD_INT 1
9239: ARRAY
9240: PPUSH
9241: CALL_OW 255
9245: ST_TO_ADDR
// zapis_do_fronty ( i , p1 ) ;
9246: LD_VAR 0 3
9250: PPUSH
9251: LD_VAR 0 5
9255: PPUSH
9256: CALL 9413 0 2
// end ; end ;
9260: GO 9182
9262: POP
9263: POP
// enable ;
9264: ENABLE
// end ;
9265: PPOPN 6
9267: END
// every 0 0$3 do var poc ; var p1 , p2 ; var j , i ;
9268: GO 9270
9270: DISABLE
9271: LD_INT 0
9273: PPUSH
9274: PPUSH
9275: PPUSH
9276: PPUSH
9277: PPUSH
// begin poc = 1 ;
9278: LD_ADDR_VAR 0 1
9282: PUSH
9283: LD_INT 1
9285: ST_TO_ADDR
// for i in POINTY do
9286: LD_ADDR_VAR 0 5
9290: PUSH
9291: LD_EXP 36
9295: PUSH
9296: FOR_IN
9297: IFFALSE 9407
// begin if i >= chance_find then
9299: LD_VAR 0 5
9303: PUSH
9304: LD_EXP 25
9308: GREATEREQUAL
9309: IFFALSE 9391
// begin for j = 1 to 8 do
9311: LD_ADDR_VAR 0 4
9315: PUSH
9316: DOUBLE
9317: LD_INT 1
9319: DEC
9320: ST_TO_ADDR
9321: LD_INT 8
9323: PUSH
9324: FOR_TO
9325: IFFALSE 9359
// if Side_Positions [ j ] = poc then
9327: LD_EXP 29
9331: PUSH
9332: LD_VAR 0 4
9336: ARRAY
9337: PUSH
9338: LD_VAR 0 1
9342: EQUAL
9343: IFFALSE 9357
// begin p1 = j ;
9345: LD_ADDR_VAR 0 2
9349: PUSH
9350: LD_VAR 0 4
9354: ST_TO_ADDR
// break ;
9355: GO 9359
// end ;
9357: GO 9324
9359: POP
9360: POP
// p2 = Side_Nations [ j ] ;
9361: LD_ADDR_VAR 0 3
9365: PUSH
9366: LD_EXP 30
9370: PUSH
9371: LD_VAR 0 4
9375: ARRAY
9376: ST_TO_ADDR
// find_clovicka ( p1 , p2 ) ;
9377: LD_VAR 0 2
9381: PPUSH
9382: LD_VAR 0 3
9386: PPUSH
9387: CALL 9737 0 2
// end ; poc = poc + 1 ;
9391: LD_ADDR_VAR 0 1
9395: PUSH
9396: LD_VAR 0 1
9400: PUSH
9401: LD_INT 1
9403: PLUS
9404: ST_TO_ADDR
// end ;
9405: GO 9296
9407: POP
9408: POP
// enable ;
9409: ENABLE
// end ;
9410: PPOPN 5
9412: END
// function zapis_do_fronty ( zo , side ) ; var pom ; begin
9413: LD_INT 0
9415: PPUSH
9416: PPUSH
// pom = 0 ;
9417: LD_ADDR_VAR 0 4
9421: PUSH
9422: LD_INT 0
9424: ST_TO_ADDR
// pom = Side_Positions [ side ] ;
9425: LD_ADDR_VAR 0 4
9429: PUSH
9430: LD_EXP 29
9434: PUSH
9435: LD_VAR 0 2
9439: ARRAY
9440: ST_TO_ADDR
// if pom = 0 then
9441: LD_VAR 0 4
9445: PUSH
9446: LD_INT 0
9448: EQUAL
9449: IFFALSE 9458
// msg ( konec ... chyba ) ;
9451: LD_STRING konec ... chyba
9453: PPUSH
9454: CALL_OW 100
// case pom of 1 :
9458: LD_VAR 0 4
9462: PUSH
9463: LD_INT 1
9465: DOUBLE
9466: EQUAL
9467: IFTRUE 9471
9469: GO 9530
9471: POP
// POINTY = [ POINTY [ 1 ] union [ zo ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] ] ; 2 :
9472: LD_ADDR_EXP 36
9476: PUSH
9477: LD_EXP 36
9481: PUSH
9482: LD_INT 1
9484: ARRAY
9485: PUSH
9486: LD_VAR 0 1
9490: PUSH
9491: EMPTY
9492: LIST
9493: UNION
9494: PUSH
9495: LD_EXP 36
9499: PUSH
9500: LD_INT 2
9502: ARRAY
9503: PUSH
9504: LD_EXP 36
9508: PUSH
9509: LD_INT 3
9511: ARRAY
9512: PUSH
9513: LD_EXP 36
9517: PUSH
9518: LD_INT 4
9520: ARRAY
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: ST_TO_ADDR
9528: GO 9732
9530: LD_INT 2
9532: DOUBLE
9533: EQUAL
9534: IFTRUE 9538
9536: GO 9597
9538: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] union [ zo ] , POINTY [ 3 ] , POINTY [ 4 ] ] ; 3 :
9539: LD_ADDR_EXP 36
9543: PUSH
9544: LD_EXP 36
9548: PUSH
9549: LD_INT 1
9551: ARRAY
9552: PUSH
9553: LD_EXP 36
9557: PUSH
9558: LD_INT 2
9560: ARRAY
9561: PUSH
9562: LD_VAR 0 1
9566: PUSH
9567: EMPTY
9568: LIST
9569: UNION
9570: PUSH
9571: LD_EXP 36
9575: PUSH
9576: LD_INT 3
9578: ARRAY
9579: PUSH
9580: LD_EXP 36
9584: PUSH
9585: LD_INT 4
9587: ARRAY
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: ST_TO_ADDR
9595: GO 9732
9597: LD_INT 3
9599: DOUBLE
9600: EQUAL
9601: IFTRUE 9605
9603: GO 9664
9605: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] union [ zo ] , POINTY [ 4 ] ] ; 4 :
9606: LD_ADDR_EXP 36
9610: PUSH
9611: LD_EXP 36
9615: PUSH
9616: LD_INT 1
9618: ARRAY
9619: PUSH
9620: LD_EXP 36
9624: PUSH
9625: LD_INT 2
9627: ARRAY
9628: PUSH
9629: LD_EXP 36
9633: PUSH
9634: LD_INT 3
9636: ARRAY
9637: PUSH
9638: LD_VAR 0 1
9642: PUSH
9643: EMPTY
9644: LIST
9645: UNION
9646: PUSH
9647: LD_EXP 36
9651: PUSH
9652: LD_INT 4
9654: ARRAY
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: ST_TO_ADDR
9662: GO 9732
9664: LD_INT 4
9666: DOUBLE
9667: EQUAL
9668: IFTRUE 9672
9670: GO 9731
9672: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] union [ zo ] ] ; end ;
9673: LD_ADDR_EXP 36
9677: PUSH
9678: LD_EXP 36
9682: PUSH
9683: LD_INT 1
9685: ARRAY
9686: PUSH
9687: LD_EXP 36
9691: PUSH
9692: LD_INT 2
9694: ARRAY
9695: PUSH
9696: LD_EXP 36
9700: PUSH
9701: LD_INT 3
9703: ARRAY
9704: PUSH
9705: LD_EXP 36
9709: PUSH
9710: LD_INT 4
9712: ARRAY
9713: PUSH
9714: LD_VAR 0 1
9718: PUSH
9719: EMPTY
9720: LIST
9721: UNION
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: ST_TO_ADDR
9729: GO 9732
9731: POP
// end ;
9732: LD_VAR 0 3
9736: RET
// function find_clovicka ( side , nat ) ; var pom ; var un ; var unat ; var pomridic ; var pozice ; begin
9737: LD_INT 0
9739: PPUSH
9740: PPUSH
9741: PPUSH
9742: PPUSH
9743: PPUSH
9744: PPUSH
// pozice = Side_Positions [ side ] ;
9745: LD_ADDR_VAR 0 8
9749: PUSH
9750: LD_EXP 29
9754: PUSH
9755: LD_VAR 0 1
9759: ARRAY
9760: ST_TO_ADDR
// wait ( Rand ( 1 , 0 0$10 ) ) ;
9761: LD_INT 1
9763: PPUSH
9764: LD_INT 350
9766: PPUSH
9767: CALL_OW 12
9771: PPUSH
9772: CALL_OW 67
// pom = Rand ( 1 , ZMIZELI_LIDI [ pozice ] + 0 ) ;
9776: LD_ADDR_VAR 0 4
9780: PUSH
9781: LD_INT 1
9783: PPUSH
9784: LD_EXP 35
9788: PUSH
9789: LD_VAR 0 8
9793: ARRAY
9794: PUSH
9795: LD_INT 0
9797: PLUS
9798: PPUSH
9799: CALL_OW 12
9803: ST_TO_ADDR
// un = ZMIZELI_LIDI [ pozice ] [ pom ] ;
9804: LD_ADDR_VAR 0 5
9808: PUSH
9809: LD_EXP 35
9813: PUSH
9814: LD_VAR 0 8
9818: ARRAY
9819: PUSH
9820: LD_VAR 0 4
9824: ARRAY
9825: ST_TO_ADDR
// SetSide ( un , side ) ;
9826: LD_VAR 0 5
9830: PPUSH
9831: LD_VAR 0 1
9835: PPUSH
9836: CALL_OW 235
// if GetType ( un ) = unit_vehicle then
9840: LD_VAR 0 5
9844: PPUSH
9845: CALL_OW 247
9849: PUSH
9850: LD_INT 2
9852: EQUAL
9853: IFFALSE 9974
// if GetControl ( un ) = control_manual then
9855: LD_VAR 0 5
9859: PPUSH
9860: CALL_OW 263
9864: PUSH
9865: LD_INT 1
9867: EQUAL
9868: IFFALSE 9974
// if IsDrivenBy ( un ) = 0 then
9870: LD_VAR 0 5
9874: PPUSH
9875: CALL_OW 311
9879: PUSH
9880: LD_INT 0
9882: EQUAL
9883: IFFALSE 9945
// begin uc_side = side ;
9885: LD_ADDR_OWVAR 20
9889: PUSH
9890: LD_VAR 0 1
9894: ST_TO_ADDR
// uc_nation = nat ;
9895: LD_ADDR_OWVAR 21
9899: PUSH
9900: LD_VAR 0 2
9904: ST_TO_ADDR
// pomridic = get_human ( get_sex , class_mechanic , 1 ,  ) ;
9905: LD_ADDR_VAR 0 7
9909: PUSH
9910: CALL 6963 0 0
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: LD_INT 1
9920: PPUSH
9921: LD_STRING 
9923: PPUSH
9924: CALL 6905 0 4
9928: ST_TO_ADDR
// PlaceHumanInUnit ( pomridic , un ) ;
9929: LD_VAR 0 7
9933: PPUSH
9934: LD_VAR 0 5
9938: PPUSH
9939: CALL_OW 52
// end else
9943: GO 9974
// begin pomridic = IsDrivenBy ( un ) ;
9945: LD_ADDR_VAR 0 7
9949: PUSH
9950: LD_VAR 0 5
9954: PPUSH
9955: CALL_OW 311
9959: ST_TO_ADDR
// SetSide ( pomridic , side ) ;
9960: LD_VAR 0 7
9964: PPUSH
9965: LD_VAR 0 1
9969: PPUSH
9970: CALL_OW 235
// end ; if IsDrivenBy ( un ) > 0 then
9974: LD_VAR 0 5
9978: PPUSH
9979: CALL_OW 311
9983: PUSH
9984: LD_INT 0
9986: GREATER
9987: IFFALSE 10008
// SetTag ( IsDrivenBy ( un ) , 0 ) else
9989: LD_VAR 0 5
9993: PPUSH
9994: CALL_OW 311
9998: PPUSH
9999: LD_INT 0
10001: PPUSH
10002: CALL_OW 109
10006: GO 10020
// SetTag ( un , 0 ) ;
10008: LD_VAR 0 5
10012: PPUSH
10013: LD_INT 0
10015: PPUSH
10016: CALL_OW 109
// PlaceUnitArea ( un , new_people , true ) ;
10020: LD_VAR 0 5
10024: PPUSH
10025: LD_INT 26
10027: PPUSH
10028: LD_INT 1
10030: PPUSH
10031: CALL_OW 49
// case pozice of 1 :
10035: LD_VAR 0 8
10039: PUSH
10040: LD_INT 1
10042: DOUBLE
10043: EQUAL
10044: IFTRUE 10048
10046: GO 10144
10048: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] diff un , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ;
10049: LD_ADDR_EXP 35
10053: PUSH
10054: LD_EXP 35
10058: PUSH
10059: LD_INT 1
10061: ARRAY
10062: PUSH
10063: LD_VAR 0 5
10067: DIFF
10068: PUSH
10069: LD_EXP 35
10073: PUSH
10074: LD_INT 2
10076: ARRAY
10077: PUSH
10078: LD_EXP 35
10082: PUSH
10083: LD_INT 3
10085: ARRAY
10086: PUSH
10087: LD_EXP 35
10091: PUSH
10092: LD_INT 4
10094: ARRAY
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: ST_TO_ADDR
// POINTY = [ [ ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] ] ;
10102: LD_ADDR_EXP 36
10106: PUSH
10107: EMPTY
10108: PUSH
10109: LD_EXP 36
10113: PUSH
10114: LD_INT 2
10116: ARRAY
10117: PUSH
10118: LD_EXP 36
10122: PUSH
10123: LD_INT 3
10125: ARRAY
10126: PUSH
10127: LD_EXP 36
10131: PUSH
10132: LD_INT 4
10134: ARRAY
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: ST_TO_ADDR
// end ; 2 :
10142: GO 10457
10144: LD_INT 2
10146: DOUBLE
10147: EQUAL
10148: IFTRUE 10152
10150: GO 10248
10152: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] diff un , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ;
10153: LD_ADDR_EXP 35
10157: PUSH
10158: LD_EXP 35
10162: PUSH
10163: LD_INT 1
10165: ARRAY
10166: PUSH
10167: LD_EXP 35
10171: PUSH
10172: LD_INT 2
10174: ARRAY
10175: PUSH
10176: LD_VAR 0 5
10180: DIFF
10181: PUSH
10182: LD_EXP 35
10186: PUSH
10187: LD_INT 3
10189: ARRAY
10190: PUSH
10191: LD_EXP 35
10195: PUSH
10196: LD_INT 4
10198: ARRAY
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , [ ] , POINTY [ 3 ] , POINTY [ 4 ] ] ;
10206: LD_ADDR_EXP 36
10210: PUSH
10211: LD_EXP 36
10215: PUSH
10216: LD_INT 1
10218: ARRAY
10219: PUSH
10220: EMPTY
10221: PUSH
10222: LD_EXP 36
10226: PUSH
10227: LD_INT 3
10229: ARRAY
10230: PUSH
10231: LD_EXP 36
10235: PUSH
10236: LD_INT 4
10238: ARRAY
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: ST_TO_ADDR
// end ; 3 :
10246: GO 10457
10248: LD_INT 3
10250: DOUBLE
10251: EQUAL
10252: IFTRUE 10256
10254: GO 10352
10256: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] diff un , ZMIZELI_LIDI [ 4 ] ] ;
10257: LD_ADDR_EXP 35
10261: PUSH
10262: LD_EXP 35
10266: PUSH
10267: LD_INT 1
10269: ARRAY
10270: PUSH
10271: LD_EXP 35
10275: PUSH
10276: LD_INT 2
10278: ARRAY
10279: PUSH
10280: LD_EXP 35
10284: PUSH
10285: LD_INT 3
10287: ARRAY
10288: PUSH
10289: LD_VAR 0 5
10293: DIFF
10294: PUSH
10295: LD_EXP 35
10299: PUSH
10300: LD_INT 4
10302: ARRAY
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , [ ] , POINTY [ 4 ] ] ;
10310: LD_ADDR_EXP 36
10314: PUSH
10315: LD_EXP 36
10319: PUSH
10320: LD_INT 1
10322: ARRAY
10323: PUSH
10324: LD_EXP 36
10328: PUSH
10329: LD_INT 2
10331: ARRAY
10332: PUSH
10333: EMPTY
10334: PUSH
10335: LD_EXP 36
10339: PUSH
10340: LD_INT 4
10342: ARRAY
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: ST_TO_ADDR
// end ; 4 :
10350: GO 10457
10352: LD_INT 4
10354: DOUBLE
10355: EQUAL
10356: IFTRUE 10360
10358: GO 10456
10360: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] diff un ] ;
10361: LD_ADDR_EXP 35
10365: PUSH
10366: LD_EXP 35
10370: PUSH
10371: LD_INT 1
10373: ARRAY
10374: PUSH
10375: LD_EXP 35
10379: PUSH
10380: LD_INT 2
10382: ARRAY
10383: PUSH
10384: LD_EXP 35
10388: PUSH
10389: LD_INT 3
10391: ARRAY
10392: PUSH
10393: LD_EXP 35
10397: PUSH
10398: LD_INT 4
10400: ARRAY
10401: PUSH
10402: LD_VAR 0 5
10406: DIFF
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] , [ ] ] ;
10414: LD_ADDR_EXP 36
10418: PUSH
10419: LD_EXP 36
10423: PUSH
10424: LD_INT 1
10426: ARRAY
10427: PUSH
10428: LD_EXP 36
10432: PUSH
10433: LD_INT 2
10435: ARRAY
10436: PUSH
10437: LD_EXP 36
10441: PUSH
10442: LD_INT 3
10444: ARRAY
10445: PUSH
10446: EMPTY
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: ST_TO_ADDR
// end ; end ;
10454: GO 10457
10456: POP
// wait ( 1 1$0 ) ;
10457: LD_INT 2100
10459: PPUSH
10460: CALL_OW 67
// end ;
10464: LD_VAR 0 3
10468: RET
// every 1 1$0 do var i , k ; var pom ; var barva ; var ZL ;
10469: GO 10471
10471: DISABLE
10472: LD_INT 0
10474: PPUSH
10475: PPUSH
10476: PPUSH
10477: PPUSH
10478: PPUSH
// begin for i := 1 to 4 do
10479: LD_ADDR_VAR 0 1
10483: PUSH
10484: DOUBLE
10485: LD_INT 1
10487: DEC
10488: ST_TO_ADDR
10489: LD_INT 4
10491: PUSH
10492: FOR_TO
10493: IFFALSE 10848
// if ZMIZELI_LIDI [ i ] < 5 then
10495: LD_EXP 35
10499: PUSH
10500: LD_VAR 0 1
10504: ARRAY
10505: PUSH
10506: LD_INT 5
10508: LESS
10509: IFFALSE 10846
// begin for k := 1 to 8 do
10511: LD_ADDR_VAR 0 2
10515: PUSH
10516: DOUBLE
10517: LD_INT 1
10519: DEC
10520: ST_TO_ADDR
10521: LD_INT 8
10523: PUSH
10524: FOR_TO
10525: IFFALSE 10559
// if Side_Positions [ k ] = i then
10527: LD_EXP 29
10531: PUSH
10532: LD_VAR 0 2
10536: ARRAY
10537: PUSH
10538: LD_VAR 0 1
10542: EQUAL
10543: IFFALSE 10557
// begin barva = k ;
10545: LD_ADDR_VAR 0 4
10549: PUSH
10550: LD_VAR 0 2
10554: ST_TO_ADDR
// break ;
10555: GO 10559
// end ;
10557: GO 10524
10559: POP
10560: POP
// if Prob ( 10 ) then
10561: LD_INT 10
10563: PPUSH
10564: CALL_OW 13
10568: IFFALSE 10587
// pom = vytvor_nove_auto ( barva ) else
10570: LD_ADDR_VAR 0 3
10574: PUSH
10575: LD_VAR 0 4
10579: PPUSH
10580: CALL 6998 0 1
10584: ST_TO_ADDR
10585: GO 10602
// pom = vytvor_noveho_cloveka ( barva ) ;
10587: LD_ADDR_VAR 0 3
10591: PUSH
10592: LD_VAR 0 4
10596: PPUSH
10597: CALL 6277 0 1
10601: ST_TO_ADDR
// ZL = ZMIZELI_LIDI [ i ] ^ pom ;
10602: LD_ADDR_VAR 0 5
10606: PUSH
10607: LD_EXP 35
10611: PUSH
10612: LD_VAR 0 1
10616: ARRAY
10617: PUSH
10618: LD_VAR 0 3
10622: ADD
10623: ST_TO_ADDR
// case i of 1 :
10624: LD_VAR 0 1
10628: PUSH
10629: LD_INT 1
10631: DOUBLE
10632: EQUAL
10633: IFTRUE 10637
10635: GO 10683
10637: POP
// ZMIZELI_LIDI = [ ZL , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 2 :
10638: LD_ADDR_EXP 35
10642: PUSH
10643: LD_VAR 0 5
10647: PUSH
10648: LD_EXP 35
10652: PUSH
10653: LD_INT 2
10655: ARRAY
10656: PUSH
10657: LD_EXP 35
10661: PUSH
10662: LD_INT 3
10664: ARRAY
10665: PUSH
10666: LD_EXP 35
10670: PUSH
10671: LD_INT 4
10673: ARRAY
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: ST_TO_ADDR
10681: GO 10846
10683: LD_INT 2
10685: DOUBLE
10686: EQUAL
10687: IFTRUE 10691
10689: GO 10737
10691: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZL , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 3 :
10692: LD_ADDR_EXP 35
10696: PUSH
10697: LD_EXP 35
10701: PUSH
10702: LD_INT 1
10704: ARRAY
10705: PUSH
10706: LD_VAR 0 5
10710: PUSH
10711: LD_EXP 35
10715: PUSH
10716: LD_INT 3
10718: ARRAY
10719: PUSH
10720: LD_EXP 35
10724: PUSH
10725: LD_INT 4
10727: ARRAY
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: ST_TO_ADDR
10735: GO 10846
10737: LD_INT 3
10739: DOUBLE
10740: EQUAL
10741: IFTRUE 10745
10743: GO 10791
10745: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZL , ZMIZELI_LIDI [ 4 ] ] ; 4 :
10746: LD_ADDR_EXP 35
10750: PUSH
10751: LD_EXP 35
10755: PUSH
10756: LD_INT 1
10758: ARRAY
10759: PUSH
10760: LD_EXP 35
10764: PUSH
10765: LD_INT 2
10767: ARRAY
10768: PUSH
10769: LD_VAR 0 5
10773: PUSH
10774: LD_EXP 35
10778: PUSH
10779: LD_INT 4
10781: ARRAY
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: ST_TO_ADDR
10789: GO 10846
10791: LD_INT 4
10793: DOUBLE
10794: EQUAL
10795: IFTRUE 10799
10797: GO 10845
10799: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZL ] ; end ;
10800: LD_ADDR_EXP 35
10804: PUSH
10805: LD_EXP 35
10809: PUSH
10810: LD_INT 1
10812: ARRAY
10813: PUSH
10814: LD_EXP 35
10818: PUSH
10819: LD_INT 2
10821: ARRAY
10822: PUSH
10823: LD_EXP 35
10827: PUSH
10828: LD_INT 3
10830: ARRAY
10831: PUSH
10832: LD_VAR 0 5
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: ST_TO_ADDR
10843: GO 10846
10845: POP
// end ;
10846: GO 10492
10848: POP
10849: POP
// enable ;
10850: ENABLE
// end ;
10851: PPOPN 5
10853: END
// every 0 0$3 do var i ; var poz ; var txt , text ;
10854: GO 10856
10856: DISABLE
10857: LD_INT 0
10859: PPUSH
10860: PPUSH
10861: PPUSH
10862: PPUSH
// begin for i := 1 to 8 do
10863: LD_ADDR_VAR 0 1
10867: PUSH
10868: DOUBLE
10869: LD_INT 1
10871: DEC
10872: ST_TO_ADDR
10873: LD_INT 8
10875: PUSH
10876: FOR_TO
10877: IFFALSE 10976
// begin poz = Side_Positions [ i ] ;
10879: LD_ADDR_VAR 0 2
10883: PUSH
10884: LD_EXP 29
10888: PUSH
10889: LD_VAR 0 1
10893: ARRAY
10894: ST_TO_ADDR
// if poz > 0 and Your_Side = i then
10895: LD_VAR 0 2
10899: PUSH
10900: LD_INT 0
10902: GREATER
10903: PUSH
10904: LD_OWVAR 2
10908: PUSH
10909: LD_VAR 0 1
10913: EQUAL
10914: AND
10915: IFFALSE 10974
// begin txt = POINTY [ poz ] + 0 ;
10917: LD_ADDR_VAR 0 3
10921: PUSH
10922: LD_EXP 36
10926: PUSH
10927: LD_VAR 0 2
10931: ARRAY
10932: PUSH
10933: LD_INT 0
10935: PLUS
10936: ST_TO_ADDR
// text = txt &  of  & chance_find &  points found ;
10937: LD_ADDR_VAR 0 4
10941: PUSH
10942: LD_VAR 0 3
10946: PUSH
10947: LD_STRING  of 
10949: STR
10950: PUSH
10951: LD_EXP 25
10955: STR
10956: PUSH
10957: LD_STRING  points found
10959: STR
10960: ST_TO_ADDR
// ExtraStrings = [ text ] ;
10961: LD_ADDR_EXP 39
10965: PUSH
10966: LD_VAR 0 4
10970: PUSH
10971: EMPTY
10972: LIST
10973: ST_TO_ADDR
// end ; end ;
10974: GO 10876
10976: POP
10977: POP
// enable ;
10978: ENABLE
// end ;
10979: PPOPN 4
10981: END
// every 0 0$3 trigger chance_loose <> 0 do var i , j ; var pom , pom1 ; var apes ; var zo ; var dist ; var zmena ;
10982: LD_EXP 24
10986: PUSH
10987: LD_INT 0
10989: NONEQUAL
10990: IFFALSE 11563
10992: GO 10994
10994: DISABLE
10995: LD_INT 0
10997: PPUSH
10998: PPUSH
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
11003: PPUSH
11004: PPUSH
// begin apes = [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] ;
11005: LD_ADDR_VAR 0 5
11009: PUSH
11010: LD_INT 12
11012: PUSH
11013: LD_INT 16
11015: PUSH
11016: LD_INT 17
11018: PUSH
11019: LD_INT 15
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: ST_TO_ADDR
// for i := 1 to 8 do
11028: LD_ADDR_VAR 0 1
11032: PUSH
11033: DOUBLE
11034: LD_INT 1
11036: DEC
11037: ST_TO_ADDR
11038: LD_INT 8
11040: PUSH
11041: FOR_TO
11042: IFFALSE 11560
// begin case Side_Positions [ i ] of 1 :
11044: LD_EXP 29
11048: PUSH
11049: LD_VAR 0 1
11053: ARRAY
11054: PUSH
11055: LD_INT 1
11057: DOUBLE
11058: EQUAL
11059: IFTRUE 11063
11061: GO 11074
11063: POP
// zo = Base1 ; 2 :
11064: LD_ADDR_VAR 0 6
11068: PUSH
11069: LD_INT 27
11071: ST_TO_ADDR
11072: GO 11134
11074: LD_INT 2
11076: DOUBLE
11077: EQUAL
11078: IFTRUE 11082
11080: GO 11093
11082: POP
// zo = Base2 ; 3 :
11083: LD_ADDR_VAR 0 6
11087: PUSH
11088: LD_INT 28
11090: ST_TO_ADDR
11091: GO 11134
11093: LD_INT 3
11095: DOUBLE
11096: EQUAL
11097: IFTRUE 11101
11099: GO 11112
11101: POP
// zo = Base3 ; 4 :
11102: LD_ADDR_VAR 0 6
11106: PUSH
11107: LD_INT 29
11109: ST_TO_ADDR
11110: GO 11134
11112: LD_INT 4
11114: DOUBLE
11115: EQUAL
11116: IFTRUE 11120
11118: GO 11131
11120: POP
// zo = Base4 ; else
11121: LD_ADDR_VAR 0 6
11125: PUSH
11126: LD_INT 30
11128: ST_TO_ADDR
11129: GO 11134
11131: POP
// continue ; end ;
11132: GO 11041
// pom = FilterUnitsExceptArea ( zo , [ [ f_side , i ] , [ f_type , unit_human ] ] ) ;
11134: LD_ADDR_VAR 0 3
11138: PUSH
11139: LD_VAR 0 6
11143: PPUSH
11144: LD_INT 22
11146: PUSH
11147: LD_VAR 0 1
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: PUSH
11156: LD_INT 21
11158: PUSH
11159: LD_INT 1
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PPUSH
11170: CALL_OW 71
11174: ST_TO_ADDR
// pom1 = FilterUnitsExceptArea ( zo , [ [ f_side , i ] , [ f_type , unit_vehicle ] ] ) ;
11175: LD_ADDR_VAR 0 4
11179: PUSH
11180: LD_VAR 0 6
11184: PPUSH
11185: LD_INT 22
11187: PUSH
11188: LD_VAR 0 1
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 21
11199: PUSH
11200: LD_INT 2
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PPUSH
11211: CALL_OW 71
11215: ST_TO_ADDR
// for j in pom1 do
11216: LD_ADDR_VAR 0 2
11220: PUSH
11221: LD_VAR 0 4
11225: PUSH
11226: FOR_IN
11227: IFFALSE 11267
// if IsDrivenBy ( j ) <> 0 then
11229: LD_VAR 0 2
11233: PPUSH
11234: CALL_OW 311
11238: PUSH
11239: LD_INT 0
11241: NONEQUAL
11242: IFFALSE 11265
// pom = pom ^ IsDrivenBy ( j ) ;
11244: LD_ADDR_VAR 0 3
11248: PUSH
11249: LD_VAR 0 3
11253: PUSH
11254: LD_VAR 0 2
11258: PPUSH
11259: CALL_OW 311
11263: ADD
11264: ST_TO_ADDR
11265: GO 11226
11267: POP
11268: POP
// for j in pom do
11269: LD_ADDR_VAR 0 2
11273: PUSH
11274: LD_VAR 0 3
11278: PUSH
11279: FOR_IN
11280: IFFALSE 11317
// if GetClass ( j ) in apes then
11282: LD_VAR 0 2
11286: PPUSH
11287: CALL_OW 257
11291: PUSH
11292: LD_VAR 0 5
11296: IN
11297: IFFALSE 11315
// pom = pom diff j ;
11299: LD_ADDR_VAR 0 3
11303: PUSH
11304: LD_VAR 0 3
11308: PUSH
11309: LD_VAR 0 2
11313: DIFF
11314: ST_TO_ADDR
11315: GO 11279
11317: POP
11318: POP
// for j in pom do
11319: LD_ADDR_VAR 0 2
11323: PUSH
11324: LD_VAR 0 3
11328: PUSH
11329: FOR_IN
11330: IFFALSE 11556
// begin dist = GetDistUnitArea ( j , zo ) ;
11332: LD_ADDR_VAR 0 7
11336: PUSH
11337: LD_VAR 0 2
11341: PPUSH
11342: LD_VAR 0 6
11346: PPUSH
11347: CALL_OW 299
11351: ST_TO_ADDR
// case dist of 1 .. 5 :
11352: LD_VAR 0 7
11356: PUSH
11357: LD_INT 1
11359: DOUBLE
11360: GREATEREQUAL
11361: IFFALSE 11369
11363: LD_INT 5
11365: DOUBLE
11366: LESSEQUAL
11367: IFTRUE 11371
11369: GO 11382
11371: POP
// zmena = 1 ; 5 .. 10 :
11372: LD_ADDR_VAR 0 8
11376: PUSH
11377: LD_INT 1
11379: ST_TO_ADDR
11380: GO 11491
11382: LD_INT 5
11384: DOUBLE
11385: GREATEREQUAL
11386: IFFALSE 11394
11388: LD_INT 10
11390: DOUBLE
11391: LESSEQUAL
11392: IFTRUE 11396
11394: GO 11407
11396: POP
// zmena = 2 ; 10 .. 15 :
11397: LD_ADDR_VAR 0 8
11401: PUSH
11402: LD_INT 2
11404: ST_TO_ADDR
11405: GO 11491
11407: LD_INT 10
11409: DOUBLE
11410: GREATEREQUAL
11411: IFFALSE 11419
11413: LD_INT 15
11415: DOUBLE
11416: LESSEQUAL
11417: IFTRUE 11421
11419: GO 11432
11421: POP
// zmena = 3 ; 15 .. 25 :
11422: LD_ADDR_VAR 0 8
11426: PUSH
11427: LD_INT 3
11429: ST_TO_ADDR
11430: GO 11491
11432: LD_INT 15
11434: DOUBLE
11435: GREATEREQUAL
11436: IFFALSE 11444
11438: LD_INT 25
11440: DOUBLE
11441: LESSEQUAL
11442: IFTRUE 11446
11444: GO 11457
11446: POP
// zmena = 4 ; 25 .. 35 :
11447: LD_ADDR_VAR 0 8
11451: PUSH
11452: LD_INT 4
11454: ST_TO_ADDR
11455: GO 11491
11457: LD_INT 25
11459: DOUBLE
11460: GREATEREQUAL
11461: IFFALSE 11469
11463: LD_INT 35
11465: DOUBLE
11466: LESSEQUAL
11467: IFTRUE 11471
11469: GO 11482
11471: POP
// zmena = 5 ; else
11472: LD_ADDR_VAR 0 8
11476: PUSH
11477: LD_INT 5
11479: ST_TO_ADDR
11480: GO 11491
11482: POP
// zmena = 6 ; end ;
11483: LD_ADDR_VAR 0 8
11487: PUSH
11488: LD_INT 6
11490: ST_TO_ADDR
// SetTag ( j , GetTag ( j ) + zmena ) ;
11491: LD_VAR 0 2
11495: PPUSH
11496: LD_VAR 0 2
11500: PPUSH
11501: CALL_OW 110
11505: PUSH
11506: LD_VAR 0 8
11510: PLUS
11511: PPUSH
11512: CALL_OW 109
// if GetTag ( j ) > chance_loose then
11516: LD_VAR 0 2
11520: PPUSH
11521: CALL_OW 110
11525: PUSH
11526: LD_EXP 24
11530: GREATER
11531: IFFALSE 11554
// begin SetTag ( j , 0 ) ;
11533: LD_VAR 0 2
11537: PPUSH
11538: LD_INT 0
11540: PPUSH
11541: CALL_OW 109
// odeber_jednotku ( j ) ;
11545: LD_VAR 0 2
11549: PPUSH
11550: CALL 11566 0 1
// end ; end ;
11554: GO 11329
11556: POP
11557: POP
// end ;
11558: GO 11041
11560: POP
11561: POP
// enable ;
11562: ENABLE
// end ;
11563: PPOPN 8
11565: END
// function odeber_jednotku ( jedn ) ; var pom ; begin
11566: LD_INT 0
11568: PPUSH
11569: PPUSH
// if IsInUnit ( jedn ) then
11570: LD_VAR 0 1
11574: PPUSH
11575: CALL_OW 310
11579: IFFALSE 11622
// if GetType ( IsInUnit ( jedn ) ) = unit_vehicle then
11581: LD_VAR 0 1
11585: PPUSH
11586: CALL_OW 310
11590: PPUSH
11591: CALL_OW 247
11595: PUSH
11596: LD_INT 2
11598: EQUAL
11599: IFFALSE 11622
// if def_vehicles_too then
11601: LD_EXP 15
11605: IFFALSE 11622
// jedn = IsInUnit ( jedn ) ;
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: LD_VAR 0 1
11616: PPUSH
11617: CALL_OW 310
11621: ST_TO_ADDR
// if def_other_nation and Prob ( 25 ) then
11622: LD_EXP 14
11626: PUSH
11627: LD_INT 25
11629: PPUSH
11630: CALL_OW 13
11634: AND
11635: IFFALSE 11655
// pom = Rand ( 1 , 4 ) else
11637: LD_ADDR_VAR 0 3
11641: PUSH
11642: LD_INT 1
11644: PPUSH
11645: LD_INT 4
11647: PPUSH
11648: CALL_OW 12
11652: ST_TO_ADDR
11653: GO 11676
// pom = Side_Positions [ GetSide ( jedn ) ] ;
11655: LD_ADDR_VAR 0 3
11659: PUSH
11660: LD_EXP 29
11664: PUSH
11665: LD_VAR 0 1
11669: PPUSH
11670: CALL_OW 255
11674: ARRAY
11675: ST_TO_ADDR
// case pom of 1 :
11676: LD_VAR 0 3
11680: PUSH
11681: LD_INT 1
11683: DOUBLE
11684: EQUAL
11685: IFTRUE 11689
11687: GO 11745
11689: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] ^ jedn , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 2 :
11690: LD_ADDR_EXP 35
11694: PUSH
11695: LD_EXP 35
11699: PUSH
11700: LD_INT 1
11702: ARRAY
11703: PUSH
11704: LD_VAR 0 1
11708: ADD
11709: PUSH
11710: LD_EXP 35
11714: PUSH
11715: LD_INT 2
11717: ARRAY
11718: PUSH
11719: LD_EXP 35
11723: PUSH
11724: LD_INT 3
11726: ARRAY
11727: PUSH
11728: LD_EXP 35
11732: PUSH
11733: LD_INT 4
11735: ARRAY
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: ST_TO_ADDR
11743: GO 11938
11745: LD_INT 2
11747: DOUBLE
11748: EQUAL
11749: IFTRUE 11753
11751: GO 11809
11753: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] ^ jedn , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 3 :
11754: LD_ADDR_EXP 35
11758: PUSH
11759: LD_EXP 35
11763: PUSH
11764: LD_INT 1
11766: ARRAY
11767: PUSH
11768: LD_EXP 35
11772: PUSH
11773: LD_INT 2
11775: ARRAY
11776: PUSH
11777: LD_VAR 0 1
11781: ADD
11782: PUSH
11783: LD_EXP 35
11787: PUSH
11788: LD_INT 3
11790: ARRAY
11791: PUSH
11792: LD_EXP 35
11796: PUSH
11797: LD_INT 4
11799: ARRAY
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: ST_TO_ADDR
11807: GO 11938
11809: LD_INT 3
11811: DOUBLE
11812: EQUAL
11813: IFTRUE 11817
11815: GO 11873
11817: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] ^ jedn , ZMIZELI_LIDI [ 4 ] ] ; 4 :
11818: LD_ADDR_EXP 35
11822: PUSH
11823: LD_EXP 35
11827: PUSH
11828: LD_INT 1
11830: ARRAY
11831: PUSH
11832: LD_EXP 35
11836: PUSH
11837: LD_INT 2
11839: ARRAY
11840: PUSH
11841: LD_EXP 35
11845: PUSH
11846: LD_INT 3
11848: ARRAY
11849: PUSH
11850: LD_VAR 0 1
11854: ADD
11855: PUSH
11856: LD_EXP 35
11860: PUSH
11861: LD_INT 4
11863: ARRAY
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: ST_TO_ADDR
11871: GO 11938
11873: LD_INT 4
11875: DOUBLE
11876: EQUAL
11877: IFTRUE 11881
11879: GO 11937
11881: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ^ jedn ] ; end ;
11882: LD_ADDR_EXP 35
11886: PUSH
11887: LD_EXP 35
11891: PUSH
11892: LD_INT 1
11894: ARRAY
11895: PUSH
11896: LD_EXP 35
11900: PUSH
11901: LD_INT 2
11903: ARRAY
11904: PUSH
11905: LD_EXP 35
11909: PUSH
11910: LD_INT 3
11912: ARRAY
11913: PUSH
11914: LD_EXP 35
11918: PUSH
11919: LD_INT 4
11921: ARRAY
11922: PUSH
11923: LD_VAR 0 1
11927: ADD
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: ST_TO_ADDR
11935: GO 11938
11937: POP
// RemoveUnit ( jedn ) ;
11938: LD_VAR 0 1
11942: PPUSH
11943: CALL_OW 64
// end ;
11947: LD_VAR 0 2
11951: RET
// every 0 0$5 trigger chance_loose <> 0 do var i , j ; var pom , pom1 ; var apes ; var zo ;
11952: LD_EXP 24
11956: PUSH
11957: LD_INT 0
11959: NONEQUAL
11960: IFFALSE 12347
11962: GO 11964
11964: DISABLE
11965: LD_INT 0
11967: PPUSH
11968: PPUSH
11969: PPUSH
11970: PPUSH
11971: PPUSH
11972: PPUSH
// begin apes = [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] ;
11973: LD_ADDR_VAR 0 5
11977: PUSH
11978: LD_INT 12
11980: PUSH
11981: LD_INT 16
11983: PUSH
11984: LD_INT 17
11986: PUSH
11987: LD_INT 15
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: ST_TO_ADDR
// for i := 1 to 8 do
11996: LD_ADDR_VAR 0 1
12000: PUSH
12001: DOUBLE
12002: LD_INT 1
12004: DEC
12005: ST_TO_ADDR
12006: LD_INT 8
12008: PUSH
12009: FOR_TO
12010: IFFALSE 12344
// begin case Side_Positions [ i ] of 1 :
12012: LD_EXP 29
12016: PUSH
12017: LD_VAR 0 1
12021: ARRAY
12022: PUSH
12023: LD_INT 1
12025: DOUBLE
12026: EQUAL
12027: IFTRUE 12031
12029: GO 12042
12031: POP
// zo = Base1 ; 2 :
12032: LD_ADDR_VAR 0 6
12036: PUSH
12037: LD_INT 27
12039: ST_TO_ADDR
12040: GO 12102
12042: LD_INT 2
12044: DOUBLE
12045: EQUAL
12046: IFTRUE 12050
12048: GO 12061
12050: POP
// zo = Base2 ; 3 :
12051: LD_ADDR_VAR 0 6
12055: PUSH
12056: LD_INT 28
12058: ST_TO_ADDR
12059: GO 12102
12061: LD_INT 3
12063: DOUBLE
12064: EQUAL
12065: IFTRUE 12069
12067: GO 12080
12069: POP
// zo = Base3 ; 4 :
12070: LD_ADDR_VAR 0 6
12074: PUSH
12075: LD_INT 29
12077: ST_TO_ADDR
12078: GO 12102
12080: LD_INT 4
12082: DOUBLE
12083: EQUAL
12084: IFTRUE 12088
12086: GO 12099
12088: POP
// zo = Base4 ; else
12089: LD_ADDR_VAR 0 6
12093: PUSH
12094: LD_INT 30
12096: ST_TO_ADDR
12097: GO 12102
12099: POP
// continue ; end ;
12100: GO 12009
// pom = FilterUnitsInArea ( zo , [ [ f_side , i ] , [ f_type , unit_human ] ] ) ;
12102: LD_ADDR_VAR 0 3
12106: PUSH
12107: LD_VAR 0 6
12111: PPUSH
12112: LD_INT 22
12114: PUSH
12115: LD_VAR 0 1
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 21
12126: PUSH
12127: LD_INT 1
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PPUSH
12138: CALL_OW 70
12142: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( zo , [ [ f_side , i ] , [ f_type , unit_vehicle ] ] ) ;
12143: LD_ADDR_VAR 0 4
12147: PUSH
12148: LD_VAR 0 6
12152: PPUSH
12153: LD_INT 22
12155: PUSH
12156: LD_VAR 0 1
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 21
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PPUSH
12179: CALL_OW 70
12183: ST_TO_ADDR
// for j in pom1 do
12184: LD_ADDR_VAR 0 2
12188: PUSH
12189: LD_VAR 0 4
12193: PUSH
12194: FOR_IN
12195: IFFALSE 12235
// if IsDrivenBy ( j ) <> 0 then
12197: LD_VAR 0 2
12201: PPUSH
12202: CALL_OW 311
12206: PUSH
12207: LD_INT 0
12209: NONEQUAL
12210: IFFALSE 12233
// pom = pom ^ IsDrivenBy ( j ) ;
12212: LD_ADDR_VAR 0 3
12216: PUSH
12217: LD_VAR 0 3
12221: PUSH
12222: LD_VAR 0 2
12226: PPUSH
12227: CALL_OW 311
12231: ADD
12232: ST_TO_ADDR
12233: GO 12194
12235: POP
12236: POP
// for j in pom do
12237: LD_ADDR_VAR 0 2
12241: PUSH
12242: LD_VAR 0 3
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12285
// if GetClass ( j ) in apes then
12250: LD_VAR 0 2
12254: PPUSH
12255: CALL_OW 257
12259: PUSH
12260: LD_VAR 0 5
12264: IN
12265: IFFALSE 12283
// pom = pom diff j ;
12267: LD_ADDR_VAR 0 3
12271: PUSH
12272: LD_VAR 0 3
12276: PUSH
12277: LD_VAR 0 2
12281: DIFF
12282: ST_TO_ADDR
12283: GO 12247
12285: POP
12286: POP
// for j in pom do
12287: LD_ADDR_VAR 0 2
12291: PUSH
12292: LD_VAR 0 3
12296: PUSH
12297: FOR_IN
12298: IFFALSE 12340
// if GetTag ( j ) > 0 then
12300: LD_VAR 0 2
12304: PPUSH
12305: CALL_OW 110
12309: PUSH
12310: LD_INT 0
12312: GREATER
12313: IFFALSE 12338
// SetTag ( j , GetTag ( j ) - 1 ) ;
12315: LD_VAR 0 2
12319: PPUSH
12320: LD_VAR 0 2
12324: PPUSH
12325: CALL_OW 110
12329: PUSH
12330: LD_INT 1
12332: MINUS
12333: PPUSH
12334: CALL_OW 109
12338: GO 12297
12340: POP
12341: POP
// end ;
12342: GO 12009
12344: POP
12345: POP
// enable ;
12346: ENABLE
// end ; end_of_file
12347: PPOPN 6
12349: END
// export function Init_Win_Condition ; begin
12350: LD_INT 0
12352: PPUSH
// disable ( 98 ) ;
12353: LD_INT 98
12355: DISABLE_MARKED
// disable ( 99 ) ;
12356: LD_INT 99
12358: DISABLE_MARKED
// if Team_Game then
12359: LD_EXP 31
12363: IFFALSE 12370
// enable ( 98 ) else
12365: LD_INT 98
12367: ENABLE_MARKED
12368: GO 12373
// enable ( 99 ) ;
12370: LD_INT 99
12372: ENABLE_MARKED
// end ;
12373: LD_VAR 0 1
12377: RET
// function CanWinLoose ; begin
12378: LD_INT 0
12380: PPUSH
// Result := true ;
12381: LD_ADDR_VAR 0 1
12385: PUSH
12386: LD_INT 1
12388: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12389: CALL_OW 518
12393: PUSH
12394: CALL_OW 519
12398: PUSH
12399: LD_INT 0
12401: GREATER
12402: AND
12403: IFFALSE 12413
// Result := false ;
12405: LD_ADDR_VAR 0 1
12409: PUSH
12410: LD_INT 0
12412: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12413: CALL_OW 531
12417: PUSH
12418: CALL_OW 519
12422: PUSH
12423: LD_INT 1
12425: GREATER
12426: AND
12427: IFFALSE 12437
// Result := false ;
12429: LD_ADDR_VAR 0 1
12433: PUSH
12434: LD_INT 0
12436: ST_TO_ADDR
// end ;
12437: LD_VAR 0 1
12441: RET
// function HasPower ( i ) ; begin
12442: LD_INT 0
12444: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12445: LD_ADDR_VAR 0 2
12449: PUSH
12450: LD_INT 22
12452: PUSH
12453: LD_VAR 0 1
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 2
12464: PUSH
12465: LD_INT 21
12467: PUSH
12468: LD_INT 1
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 33
12477: PUSH
12478: LD_INT 3
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 33
12487: PUSH
12488: LD_INT 5
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PPUSH
12505: CALL_OW 69
12509: ST_TO_ADDR
// end ;
12510: LD_VAR 0 2
12514: RET
// function AlliedSides ( i , j ) ; begin
12515: LD_INT 0
12517: PPUSH
// Result := false ;
12518: LD_ADDR_VAR 0 3
12522: PUSH
12523: LD_INT 0
12525: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
12526: LD_VAR 0 1
12530: PPUSH
12531: LD_VAR 0 2
12535: PPUSH
12536: CALL_OW 81
12540: PUSH
12541: LD_INT 1
12543: EQUAL
12544: PUSH
12545: LD_VAR 0 2
12549: PPUSH
12550: LD_VAR 0 1
12554: PPUSH
12555: CALL_OW 81
12559: PUSH
12560: LD_INT 1
12562: EQUAL
12563: AND
12564: PUSH
12565: LD_VAR 0 1
12569: PPUSH
12570: CALL_OW 83
12574: AND
12575: PUSH
12576: LD_VAR 0 2
12580: PPUSH
12581: CALL_OW 83
12585: AND
12586: IFFALSE 12596
// Result := true ;
12588: LD_ADDR_VAR 0 3
12592: PUSH
12593: LD_INT 1
12595: ST_TO_ADDR
// end ;
12596: LD_VAR 0 3
12600: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
12601: CALL 12378 0 0
12605: IFFALSE 12614
12607: GO 12609
12609: DISABLE
// YouLostInMultiplayer ;
12610: CALL_OW 107
12614: END
// every 0 0$3 trigger CanWinLoose marked 401 do
12615: CALL 12378 0 0
12619: IFFALSE 12643
12621: GO 12623
12623: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
12624: LD_EXP 30
12628: PUSH
12629: LD_OWVAR 2
12633: ARRAY
12634: PPUSH
12635: CALL 15655 0 1
// YouWinInMultiplayer ;
12639: CALL_OW 106
// end ;
12643: END
// every 0 0$3 marked 98 do var i , CanWin ;
12644: GO 12646
12646: DISABLE
12647: LD_INT 0
12649: PPUSH
12650: PPUSH
// begin if not HasPower ( your_side ) then
12651: LD_OWVAR 2
12655: PPUSH
12656: CALL 12442 0 1
12660: NOT
12661: IFFALSE 12672
// begin Multiplayer_Loose_Message ;
12663: CALL_OW 521
// enable ( 400 ) ;
12667: LD_INT 400
12669: ENABLE_MARKED
// end else
12670: GO 12805
// begin CanWin := true ;
12672: LD_ADDR_VAR 0 2
12676: PUSH
12677: LD_INT 1
12679: ST_TO_ADDR
// for i := 1 to 8 do
12680: LD_ADDR_VAR 0 1
12684: PUSH
12685: DOUBLE
12686: LD_INT 1
12688: DEC
12689: ST_TO_ADDR
12690: LD_INT 8
12692: PUSH
12693: FOR_TO
12694: IFFALSE 12791
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12696: LD_EXP 29
12700: PUSH
12701: LD_VAR 0 1
12705: ARRAY
12706: PUSH
12707: LD_VAR 0 1
12711: PPUSH
12712: CALL_OW 108
12716: AND
12717: PUSH
12718: LD_VAR 0 1
12722: PUSH
12723: LD_OWVAR 2
12727: NONEQUAL
12728: AND
12729: IFFALSE 12789
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
12731: LD_EXP 27
12735: PUSH
12736: LD_VAR 0 1
12740: ARRAY
12741: NOT
12742: PUSH
12743: LD_EXP 27
12747: PUSH
12748: LD_VAR 0 1
12752: ARRAY
12753: PUSH
12754: LD_EXP 27
12758: PUSH
12759: LD_OWVAR 2
12763: ARRAY
12764: NONEQUAL
12765: OR
12766: IFFALSE 12789
// if HasPower ( i ) then
12768: LD_VAR 0 1
12772: PPUSH
12773: CALL 12442 0 1
12777: IFFALSE 12789
// begin CanWin := false ;
12779: LD_ADDR_VAR 0 2
12783: PUSH
12784: LD_INT 0
12786: ST_TO_ADDR
// break ;
12787: GO 12791
// end ;
12789: GO 12693
12791: POP
12792: POP
// if CanWin then
12793: LD_VAR 0 2
12797: IFFALSE 12804
// enable ( 401 ) else
12799: LD_INT 401
12801: ENABLE_MARKED
12802: GO 12805
// enable ;
12804: ENABLE
// end ; end ;
12805: PPOPN 2
12807: END
// every 0 0$3 marked 99 do var i , CanWin ;
12808: GO 12810
12810: DISABLE
12811: LD_INT 0
12813: PPUSH
12814: PPUSH
// begin if not HasPower ( your_side ) then
12815: LD_OWVAR 2
12819: PPUSH
12820: CALL 12442 0 1
12824: NOT
12825: IFFALSE 12836
// begin Multiplayer_Loose_Message ;
12827: CALL_OW 521
// enable ( 400 ) ;
12831: LD_INT 400
12833: ENABLE_MARKED
// end else
12834: GO 12949
// begin CanWin := true ;
12836: LD_ADDR_VAR 0 2
12840: PUSH
12841: LD_INT 1
12843: ST_TO_ADDR
// for i := 1 to 8 do
12844: LD_ADDR_VAR 0 1
12848: PUSH
12849: DOUBLE
12850: LD_INT 1
12852: DEC
12853: ST_TO_ADDR
12854: LD_INT 8
12856: PUSH
12857: FOR_TO
12858: IFFALSE 12935
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12860: LD_EXP 29
12864: PUSH
12865: LD_VAR 0 1
12869: ARRAY
12870: PUSH
12871: LD_VAR 0 1
12875: PPUSH
12876: CALL_OW 108
12880: AND
12881: PUSH
12882: LD_VAR 0 1
12886: PUSH
12887: LD_OWVAR 2
12891: NONEQUAL
12892: AND
12893: IFFALSE 12933
// if not AlliedSides ( i , your_side ) then
12895: LD_VAR 0 1
12899: PPUSH
12900: LD_OWVAR 2
12904: PPUSH
12905: CALL 12515 0 2
12909: NOT
12910: IFFALSE 12933
// if HasPower ( i ) then
12912: LD_VAR 0 1
12916: PPUSH
12917: CALL 12442 0 1
12921: IFFALSE 12933
// begin CanWin := false ;
12923: LD_ADDR_VAR 0 2
12927: PUSH
12928: LD_INT 0
12930: ST_TO_ADDR
// break ;
12931: GO 12935
// end ;
12933: GO 12857
12935: POP
12936: POP
// if CanWin then
12937: LD_VAR 0 2
12941: IFFALSE 12948
// enable ( 401 ) else
12943: LD_INT 401
12945: ENABLE_MARKED
12946: GO 12949
// enable ;
12948: ENABLE
// end ; end ; end_of_file
12949: PPOPN 2
12951: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
12952: LD_INT 0
12954: PPUSH
12955: PPUSH
// for un in battle_flags_id do
12956: LD_ADDR_VAR 0 2
12960: PUSH
12961: LD_EXP 23
12965: PUSH
12966: FOR_IN
12967: IFFALSE 13042
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
12969: LD_VAR 0 2
12973: PPUSH
12974: LD_INT 1
12976: PUSH
12977: LD_LOC 6
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: LD_INT 2
12988: PUSH
12989: LD_LOC 6
12993: PUSH
12994: LD_INT 2
12996: DIV
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 3
13004: PUSH
13005: LD_LOC 6
13009: PUSH
13010: LD_INT 5
13012: DIV
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 20
13020: PUSH
13021: LD_LOC 6
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: PPUSH
13036: CALL_OW 423
13040: GO 12966
13042: POP
13043: POP
// end ;
13044: LD_VAR 0 1
13048: RET
// every 0 0$0.1 do var un ;
13049: GO 13051
13051: DISABLE
13052: LD_INT 0
13054: PPUSH
// begin if not def_morale_flags then
13055: LD_EXP 8
13059: NOT
13060: IFFALSE 13064
// exit ;
13062: GO 13141
// if not morale_decreasing_time then
13064: LD_EXP 22
13068: NOT
13069: IFFALSE 13073
// exit ;
13071: GO 13141
// strength = 100 ;
13073: LD_ADDR_LOC 6
13077: PUSH
13078: LD_INT 100
13080: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13081: LD_EXP 22
13085: PPUSH
13086: CALL_OW 67
// strength := strength - 1 ;
13090: LD_ADDR_LOC 6
13094: PUSH
13095: LD_LOC 6
13099: PUSH
13100: LD_INT 1
13102: MINUS
13103: ST_TO_ADDR
// Update_Flags ;
13104: CALL 12952 0 0
// until not strength ;
13108: LD_LOC 6
13112: NOT
13113: IFFALSE 13081
// for un in battle_flags_id do
13115: LD_ADDR_VAR 0 1
13119: PUSH
13120: LD_EXP 23
13124: PUSH
13125: FOR_IN
13126: IFFALSE 13139
// KillBattleFlag ( un ) ;
13128: LD_VAR 0 1
13132: PPUSH
13133: CALL_OW 419
13137: GO 13125
13139: POP
13140: POP
// end ; end_of_file
13141: PPOPN 1
13143: END
// export Game_Type , def_game_rules ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13144: LD_INT 0
13146: PPUSH
13147: PPUSH
// if ( not IAmSpec ) then
13148: CALL_OW 531
13152: NOT
13153: IFFALSE 13169
// Result := Limits_Info ^  ;
13155: LD_ADDR_VAR 0 1
13159: PUSH
13160: LD_LOC 18
13164: PUSH
13165: LD_STRING 
13167: ADD
13168: ST_TO_ADDR
// for i := 1 to 8 do
13169: LD_ADDR_VAR 0 2
13173: PUSH
13174: DOUBLE
13175: LD_INT 1
13177: DEC
13178: ST_TO_ADDR
13179: LD_INT 8
13181: PUSH
13182: FOR_TO
13183: IFFALSE 13228
// if Cheaters [ i ] then
13185: LD_LOC 19
13189: PUSH
13190: LD_VAR 0 2
13194: ARRAY
13195: IFFALSE 13226
// Result := Result ^ [ #Cheater , i , i ] ;
13197: LD_ADDR_VAR 0 1
13201: PUSH
13202: LD_VAR 0 1
13206: PUSH
13207: LD_STRING #Cheater
13209: PUSH
13210: LD_VAR 0 2
13214: PUSH
13215: LD_VAR 0 2
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: LIST
13224: ADD
13225: ST_TO_ADDR
13226: GO 13182
13228: POP
13229: POP
// end ;
13230: LD_VAR 0 1
13234: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
13235: LD_INT 0
13237: PPUSH
13238: PPUSH
13239: PPUSH
13240: PPUSH
13241: PPUSH
// case def_game_rules of 0 :
13242: LD_EXP 38
13246: PUSH
13247: LD_INT 0
13249: DOUBLE
13250: EQUAL
13251: IFTRUE 13255
13253: GO 13260
13255: POP
// exit ; 1 :
13256: GO 13585
13258: GO 13485
13260: LD_INT 1
13262: DOUBLE
13263: EQUAL
13264: IFTRUE 13268
13266: GO 13484
13268: POP
// begin def_base_level = 0 ;
13269: LD_ADDR_EXP 2
13273: PUSH
13274: LD_INT 0
13276: ST_TO_ADDR
// def_amount_of_people = 0 ;
13277: LD_ADDR_EXP 3
13281: PUSH
13282: LD_INT 0
13284: ST_TO_ADDR
// def_initial_level = 0 ;
13285: LD_ADDR_EXP 4
13289: PUSH
13290: LD_INT 0
13292: ST_TO_ADDR
// def_starting_resources = 1 ;
13293: LD_ADDR_EXP 5
13297: PUSH
13298: LD_INT 1
13300: ST_TO_ADDR
// def_shipments_density = 0 ;
13301: LD_ADDR_EXP 6
13305: PUSH
13306: LD_INT 0
13308: ST_TO_ADDR
// def_shared_vision = 1 ;
13309: LD_ADDR_EXP 7
13313: PUSH
13314: LD_INT 1
13316: ST_TO_ADDR
// def_morale_flags = 1 ;
13317: LD_ADDR_EXP 8
13321: PUSH
13322: LD_INT 1
13324: ST_TO_ADDR
// def_siberite_detection = 0 ;
13325: LD_ADDR_EXP 9
13329: PUSH
13330: LD_INT 0
13332: ST_TO_ADDR
// def_amount_of_apemen = 1 ;
13333: LD_ADDR_EXP 11
13337: PUSH
13338: LD_INT 1
13340: ST_TO_ADDR
// def_find_people = 0 ;
13341: LD_ADDR_EXP 12
13345: PUSH
13346: LD_INT 0
13348: ST_TO_ADDR
// def_lost_people = 0 ;
13349: LD_ADDR_EXP 13
13353: PUSH
13354: LD_INT 0
13356: ST_TO_ADDR
// def_second_oil = 0 ;
13357: LD_ADDR_EXP 10
13361: PUSH
13362: LD_INT 0
13364: ST_TO_ADDR
// def_other_nation = 0 ;
13365: LD_ADDR_EXP 14
13369: PUSH
13370: LD_INT 0
13372: ST_TO_ADDR
// def_vehicles_too = 0 ;
13373: LD_ADDR_EXP 15
13377: PUSH
13378: LD_INT 0
13380: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13381: LD_ADDR_VAR 0 2
13385: PUSH
13386: EMPTY
13387: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13388: LD_ADDR_VAR 0 3
13392: PUSH
13393: EMPTY
13394: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13395: LD_ADDR_LOC 13
13399: PUSH
13400: EMPTY
13401: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13402: LD_ADDR_LOC 14
13406: PUSH
13407: EMPTY
13408: ST_TO_ADDR
// Banned_Controls := [ ] ;
13409: LD_ADDR_LOC 15
13413: PUSH
13414: EMPTY
13415: ST_TO_ADDR
// Banned_Engines := [ ] ;
13416: LD_ADDR_LOC 16
13420: PUSH
13421: EMPTY
13422: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13423: LD_ADDR_LOC 11
13427: PUSH
13428: LD_INT 37
13430: PUSH
13431: EMPTY
13432: LIST
13433: PUSH
13434: LD_INT 4
13436: PUSH
13437: LD_INT 5
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 31
13446: PUSH
13447: LD_INT 32
13449: PUSH
13450: LD_INT 33
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 , 3 ] ;
13463: LD_ADDR_LOC 12
13467: PUSH
13468: LD_INT 1
13470: PUSH
13471: LD_INT 1
13473: PUSH
13474: LD_INT 3
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: LIST
13481: ST_TO_ADDR
// end ; end ;
13482: GO 13485
13484: POP
// for i := 1 to 8 do
13485: LD_ADDR_VAR 0 4
13489: PUSH
13490: DOUBLE
13491: LD_INT 1
13493: DEC
13494: ST_TO_ADDR
13495: LD_INT 8
13497: PUSH
13498: FOR_TO
13499: IFFALSE 13583
// if Side_Positions [ i ] then
13501: LD_EXP 29
13505: PUSH
13506: LD_VAR 0 4
13510: ARRAY
13511: IFFALSE 13581
// begin for j in Unavailable_Techs do
13513: LD_ADDR_VAR 0 5
13517: PUSH
13518: LD_VAR 0 2
13522: PUSH
13523: FOR_IN
13524: IFFALSE 13545
// SetTech ( j , i , 0 ) ;
13526: LD_VAR 0 5
13530: PPUSH
13531: LD_VAR 0 4
13535: PPUSH
13536: LD_INT 0
13538: PPUSH
13539: CALL_OW 322
13543: GO 13523
13545: POP
13546: POP
// for j in Unavailable_Builds do
13547: LD_ADDR_VAR 0 5
13551: PUSH
13552: LD_VAR 0 3
13556: PUSH
13557: FOR_IN
13558: IFFALSE 13579
// SetRestrict ( j , i , 0 ) ;
13560: LD_VAR 0 5
13564: PPUSH
13565: LD_VAR 0 4
13569: PPUSH
13570: LD_INT 0
13572: PPUSH
13573: CALL_OW 324
13577: GO 13557
13579: POP
13580: POP
// end ;
13581: GO 13498
13583: POP
13584: POP
// end ;
13585: LD_VAR 0 1
13589: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
13590: LD_INT 0
13592: PPUSH
13593: PPUSH
13594: PPUSH
13595: PPUSH
13596: PPUSH
13597: PPUSH
13598: PPUSH
// for i := 1 to Restricted_Builds do
13599: LD_ADDR_VAR 0 2
13603: PUSH
13604: DOUBLE
13605: LD_INT 1
13607: DEC
13608: ST_TO_ADDR
13609: LD_LOC 11
13613: PUSH
13614: FOR_TO
13615: IFFALSE 13925
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
13617: LD_LOC 11
13621: PUSH
13622: LD_VAR 0 2
13626: ARRAY
13627: PUSH
13628: LD_INT 1
13630: ARRAY
13631: PUSH
13632: LD_INT 31
13634: DOUBLE
13635: EQUAL
13636: IFTRUE 13652
13638: LD_INT 32
13640: DOUBLE
13641: EQUAL
13642: IFTRUE 13652
13644: LD_INT 33
13646: DOUBLE
13647: EQUAL
13648: IFTRUE 13652
13650: GO 13663
13652: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
13653: LD_ADDR_VAR 0 6
13657: PUSH
13658: LD_STRING #Turrets
13660: ST_TO_ADDR
13661: GO 13708
13663: LD_INT 4
13665: DOUBLE
13666: EQUAL
13667: IFTRUE 13677
13669: LD_INT 5
13671: DOUBLE
13672: EQUAL
13673: IFTRUE 13677
13675: GO 13688
13677: POP
// btype := #Armouries ; b_Behemoth :
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: LD_STRING #Armouries
13685: ST_TO_ADDR
13686: GO 13708
13688: LD_INT 37
13690: DOUBLE
13691: EQUAL
13692: IFTRUE 13696
13694: GO 13707
13696: POP
// btype := #Behemoths ; end ;
13697: LD_ADDR_VAR 0 6
13701: PUSH
13702: LD_STRING #Behemoths
13704: ST_TO_ADDR
13705: GO 13708
13707: POP
// list := [ ] ;
13708: LD_ADDR_VAR 0 7
13712: PUSH
13713: EMPTY
13714: ST_TO_ADDR
// for j := 1 to 8 do
13715: LD_ADDR_VAR 0 3
13719: PUSH
13720: DOUBLE
13721: LD_INT 1
13723: DEC
13724: ST_TO_ADDR
13725: LD_INT 8
13727: PUSH
13728: FOR_TO
13729: IFFALSE 13822
// if Side_Positions [ j ] then
13731: LD_EXP 29
13735: PUSH
13736: LD_VAR 0 3
13740: ARRAY
13741: IFFALSE 13820
// begin amount := 0 ;
13743: LD_ADDR_VAR 0 5
13747: PUSH
13748: LD_INT 0
13750: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
13751: LD_ADDR_VAR 0 4
13755: PUSH
13756: LD_LOC 11
13760: PUSH
13761: LD_VAR 0 2
13765: ARRAY
13766: PUSH
13767: FOR_IN
13768: IFFALSE 13816
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
13770: LD_ADDR_VAR 0 5
13774: PUSH
13775: LD_VAR 0 5
13779: PUSH
13780: LD_INT 22
13782: PUSH
13783: LD_VAR 0 3
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 30
13794: PUSH
13795: LD_VAR 0 4
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PPUSH
13808: CALL_OW 69
13812: PLUS
13813: ST_TO_ADDR
13814: GO 13767
13816: POP
13817: POP
// break ;
13818: GO 13822
// end ;
13820: GO 13728
13822: POP
13823: POP
// list := [ ] ;
13824: LD_ADDR_VAR 0 7
13828: PUSH
13829: EMPTY
13830: ST_TO_ADDR
// for j := 1 to 8 do
13831: LD_ADDR_VAR 0 3
13835: PUSH
13836: DOUBLE
13837: LD_INT 1
13839: DEC
13840: ST_TO_ADDR
13841: LD_INT 8
13843: PUSH
13844: FOR_TO
13845: IFFALSE 13865
// list := list ^ amount ;
13847: LD_ADDR_VAR 0 7
13851: PUSH
13852: LD_VAR 0 7
13856: PUSH
13857: LD_VAR 0 5
13861: ADD
13862: ST_TO_ADDR
13863: GO 13844
13865: POP
13866: POP
// Already_Built := Already_Built ^ [ list ] ;
13867: LD_ADDR_LOC 17
13871: PUSH
13872: LD_LOC 17
13876: PUSH
13877: LD_VAR 0 7
13881: PUSH
13882: EMPTY
13883: LIST
13884: ADD
13885: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13886: LD_ADDR_LOC 18
13890: PUSH
13891: LD_LOC 18
13895: PUSH
13896: LD_VAR 0 6
13900: PUSH
13901: LD_VAR 0 5
13905: PUSH
13906: LD_LOC 12
13910: PUSH
13911: LD_VAR 0 2
13915: ARRAY
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: ADD
13922: ST_TO_ADDR
// end ;
13923: GO 13614
13925: POP
13926: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13927: LD_ADDR_LOC 19
13931: PUSH
13932: LD_INT 0
13934: PUSH
13935: LD_INT 0
13937: PUSH
13938: LD_INT 0
13940: PUSH
13941: LD_INT 0
13943: PUSH
13944: LD_INT 0
13946: PUSH
13947: LD_INT 0
13949: PUSH
13950: LD_INT 0
13952: PUSH
13953: LD_INT 0
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: ST_TO_ADDR
// if Limits_Info then
13966: LD_LOC 18
13970: IFFALSE 13986
// Limits_Info := #Limits ^ Limits_Info ;
13972: LD_ADDR_LOC 18
13976: PUSH
13977: LD_STRING #Limits
13979: PUSH
13980: LD_LOC 18
13984: ADD
13985: ST_TO_ADDR
// end ;
13986: LD_VAR 0 1
13990: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13991: LD_INT 0
13993: PPUSH
13994: PPUSH
13995: PPUSH
13996: PPUSH
// for i := 1 to Restricted_Builds do
13997: LD_ADDR_VAR 0 7
14001: PUSH
14002: DOUBLE
14003: LD_INT 1
14005: DEC
14006: ST_TO_ADDR
14007: LD_LOC 11
14011: PUSH
14012: FOR_TO
14013: IFFALSE 14436
// if BType in Restricted_Builds [ i ] then
14015: LD_VAR 0 2
14019: PUSH
14020: LD_LOC 11
14024: PUSH
14025: LD_VAR 0 7
14029: ARRAY
14030: IN
14031: IFFALSE 14434
// begin if old_side then
14033: LD_VAR 0 4
14037: IFFALSE 14163
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
14039: LD_LOC 17
14043: PUSH
14044: LD_VAR 0 7
14048: ARRAY
14049: PUSH
14050: LD_VAR 0 3
14054: ARRAY
14055: PUSH
14056: LD_VAR 0 5
14060: PLUS
14061: PUSH
14062: LD_LOC 12
14066: PUSH
14067: LD_VAR 0 7
14071: ARRAY
14072: GREATER
14073: IFFALSE 14099
// begin SetSide ( un , old_side ) ;
14075: LD_VAR 0 1
14079: PPUSH
14080: LD_VAR 0 4
14084: PPUSH
14085: CALL_OW 235
// count := 0 ;
14089: LD_ADDR_VAR 0 5
14093: PUSH
14094: LD_INT 0
14096: ST_TO_ADDR
// end else
14097: GO 14163
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
14099: LD_ADDR_LOC 17
14103: PUSH
14104: LD_LOC 17
14108: PPUSH
14109: LD_VAR 0 7
14113: PPUSH
14114: LD_LOC 17
14118: PUSH
14119: LD_VAR 0 7
14123: ARRAY
14124: PPUSH
14125: LD_VAR 0 4
14129: PPUSH
14130: LD_LOC 17
14134: PUSH
14135: LD_VAR 0 7
14139: ARRAY
14140: PUSH
14141: LD_VAR 0 4
14145: ARRAY
14146: PUSH
14147: LD_VAR 0 5
14151: MINUS
14152: PPUSH
14153: CALL_OW 1
14157: PPUSH
14158: CALL_OW 1
14162: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
14163: LD_ADDR_LOC 17
14167: PUSH
14168: LD_LOC 17
14172: PPUSH
14173: LD_VAR 0 7
14177: PPUSH
14178: LD_LOC 17
14182: PUSH
14183: LD_VAR 0 7
14187: ARRAY
14188: PPUSH
14189: LD_VAR 0 3
14193: PPUSH
14194: LD_LOC 17
14198: PUSH
14199: LD_VAR 0 7
14203: ARRAY
14204: PUSH
14205: LD_VAR 0 3
14209: ARRAY
14210: PUSH
14211: LD_VAR 0 5
14215: PLUS
14216: PPUSH
14217: CALL_OW 1
14221: PPUSH
14222: CALL_OW 1
14226: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
14227: LD_VAR 0 5
14231: PUSH
14232: LD_INT 0
14234: NONEQUAL
14235: PUSH
14236: LD_VAR 0 3
14240: PUSH
14241: LD_OWVAR 2
14245: EQUAL
14246: AND
14247: IFFALSE 14290
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
14249: LD_ADDR_LOC 18
14253: PUSH
14254: LD_LOC 18
14258: PPUSH
14259: LD_INT 3
14261: PUSH
14262: LD_VAR 0 7
14266: MUL
14267: PPUSH
14268: LD_LOC 17
14272: PUSH
14273: LD_VAR 0 7
14277: ARRAY
14278: PUSH
14279: LD_VAR 0 3
14283: ARRAY
14284: PPUSH
14285: CALL_OW 1
14289: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
14290: LD_LOC 17
14294: PUSH
14295: LD_VAR 0 7
14299: ARRAY
14300: PUSH
14301: LD_VAR 0 3
14305: ARRAY
14306: PUSH
14307: LD_LOC 12
14311: PUSH
14312: LD_VAR 0 7
14316: ARRAY
14317: GREATER
14318: IFFALSE 14345
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
14320: LD_ADDR_LOC 19
14324: PUSH
14325: LD_LOC 19
14329: PPUSH
14330: LD_VAR 0 3
14334: PPUSH
14335: LD_INT 1
14337: PPUSH
14338: CALL_OW 1
14342: ST_TO_ADDR
// end else
14343: GO 14432
// begin for j := 1 to Restricted_Builds do
14345: LD_ADDR_VAR 0 8
14349: PUSH
14350: DOUBLE
14351: LD_INT 1
14353: DEC
14354: ST_TO_ADDR
14355: LD_LOC 11
14359: PUSH
14360: FOR_TO
14361: IFFALSE 14405
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
14363: LD_LOC 17
14367: PUSH
14368: LD_VAR 0 8
14372: ARRAY
14373: PUSH
14374: LD_VAR 0 3
14378: ARRAY
14379: PUSH
14380: LD_LOC 12
14384: PUSH
14385: LD_VAR 0 8
14389: ARRAY
14390: GREATER
14391: IFFALSE 14403
// begin Is_Cheater := true ;
14393: LD_ADDR_VAR 0 9
14397: PUSH
14398: LD_INT 1
14400: ST_TO_ADDR
// break ;
14401: GO 14405
// end ;
14403: GO 14360
14405: POP
14406: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
14407: LD_ADDR_LOC 19
14411: PUSH
14412: LD_LOC 19
14416: PPUSH
14417: LD_VAR 0 3
14421: PPUSH
14422: LD_VAR 0 9
14426: PPUSH
14427: CALL_OW 1
14431: ST_TO_ADDR
// end ; break ;
14432: GO 14436
// end ;
14434: GO 14012
14436: POP
14437: POP
// end ;
14438: LD_VAR 0 6
14442: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
14443: LD_VAR 0 5
14447: PUSH
14448: LD_LOC 13
14452: IN
14453: PUSH
14454: LD_VAR 0 2
14458: PUSH
14459: LD_LOC 14
14463: IN
14464: OR
14465: PUSH
14466: LD_VAR 0 4
14470: PUSH
14471: LD_LOC 15
14475: IN
14476: OR
14477: PUSH
14478: LD_VAR 0 3
14482: PUSH
14483: LD_LOC 16
14487: IN
14488: OR
14489: IFFALSE 14500
// ComCancel ( factory ) ;
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 127
// end ;
14500: PPOPN 5
14502: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
14503: LD_VAR 0 2
14507: PUSH
14508: LD_LOC 13
14512: IN
14513: IFFALSE 14524
// ComCancel ( building ) ;
14515: LD_VAR 0 1
14519: PPUSH
14520: CALL_OW 127
// end ; end_of_file
14524: PPOPN 2
14526: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
14527: LD_INT 0
14529: PPUSH
14530: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
14531: LD_ADDR_VAR 0 2
14535: PUSH
14536: LD_STRING #Multi1x1-Time
14538: PUSH
14539: LD_OWVAR 1
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: ST_TO_ADDR
// if ( ExtraStrings ) then
14548: LD_EXP 39
14552: IFFALSE 14574
// AllStrings := AllStrings ^  ^ ExtraStrings ;
14554: LD_ADDR_VAR 0 2
14558: PUSH
14559: LD_VAR 0 2
14563: PUSH
14564: LD_STRING 
14566: ADD
14567: PUSH
14568: LD_EXP 39
14572: ADD
14573: ST_TO_ADDR
// if ( LimitsStrings ) then
14574: CALL 13144 0 0
14578: IFFALSE 14600
// AllStrings := AllStrings ^  ^ LimitsStrings ;
14580: LD_ADDR_VAR 0 2
14584: PUSH
14585: LD_VAR 0 2
14589: PUSH
14590: LD_STRING 
14592: ADD
14593: PUSH
14594: CALL 13144 0 0
14598: ADD
14599: ST_TO_ADDR
// Display_Strings := AllStrings ;
14600: LD_ADDR_OWVAR 47
14604: PUSH
14605: LD_VAR 0 2
14609: ST_TO_ADDR
// end ;
14610: LD_VAR 0 1
14614: RET
// every 0 0$1 do
14615: GO 14617
14617: DISABLE
// begin ShowTimer ;
14618: CALL 14527 0 0
// enable ;
14622: ENABLE
// end ; end_of_file
14623: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
14624: GO 14626
14626: DISABLE
14627: LD_INT 0
14629: PPUSH
// begin _apemenIncrement := 0 ;
14630: LD_ADDR_LOC 20
14634: PUSH
14635: LD_INT 0
14637: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
14638: LD_ADDR_LOC 22
14642: PUSH
14643: LD_INT 0
14645: ST_TO_ADDR
// _isSpawning := true ;
14646: LD_ADDR_LOC 24
14650: PUSH
14651: LD_INT 1
14653: ST_TO_ADDR
// _wildApemenAmount := 0 ;
14654: LD_ADDR_LOC 25
14658: PUSH
14659: LD_INT 0
14661: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
14662: LD_ADDR_VAR 0 1
14666: PUSH
14667: LD_EXP 29
14671: PUSH
14672: LD_INT 0
14674: PUSH
14675: EMPTY
14676: LIST
14677: DIFF
14678: PUSH
14679: FOR_IN
14680: IFFALSE 14698
// _apemenIncrement := _apemenIncrement + 1 ;
14682: LD_ADDR_LOC 20
14686: PUSH
14687: LD_LOC 20
14691: PUSH
14692: LD_INT 1
14694: PLUS
14695: ST_TO_ADDR
14696: GO 14679
14698: POP
14699: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
14700: LD_ADDR_LOC 21
14704: PUSH
14705: LD_LOC 20
14709: PUSH
14710: LD_EXP 26
14714: MUL
14715: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
14716: LD_ADDR_LOC 23
14720: PUSH
14721: LD_LOC 21
14725: PUSH
14726: LD_INT 2
14728: DIVREAL
14729: ST_TO_ADDR
// prepare_apemen ;
14730: CALL 14822 0 0
// end ;
14734: PPOPN 1
14736: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
14737: CALL 14744 0 0
// end ;
14741: PPOPN 2
14743: END
// export function CheckApemenAmount ; begin
14744: LD_INT 0
14746: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
14747: LD_ADDR_LOC 25
14751: PUSH
14752: LD_LOC 25
14756: PUSH
14757: LD_INT 1
14759: MINUS
14760: ST_TO_ADDR
// if _isSpawning then
14761: LD_LOC 24
14765: IFFALSE 14769
// exit ;
14767: GO 14817
// if _wildApemenAmount <= ( _apemenThreshold ) then
14769: LD_LOC 25
14773: PUSH
14774: LD_LOC 23
14778: LESSEQUAL
14779: IFFALSE 14817
// begin if _apemenSkillLevel < 8 then
14781: LD_LOC 22
14785: PUSH
14786: LD_INT 8
14788: LESS
14789: IFFALSE 14805
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
14791: LD_ADDR_LOC 22
14795: PUSH
14796: LD_LOC 22
14800: PUSH
14801: LD_INT 1
14803: PLUS
14804: ST_TO_ADDR
// _isSpawning := true ;
14805: LD_ADDR_LOC 24
14809: PUSH
14810: LD_INT 1
14812: ST_TO_ADDR
// prepare_apemen ;
14813: CALL 14822 0 0
// end ; end ;
14817: LD_VAR 0 1
14821: RET
// function prepare_apemen ; var i ; begin
14822: LD_INT 0
14824: PPUSH
14825: PPUSH
// if not amount_of_apemen then
14826: LD_EXP 26
14830: NOT
14831: IFFALSE 14835
// exit ;
14833: GO 15014
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
14835: LD_INT 1050
14837: PPUSH
14838: LD_INT 3150
14840: PPUSH
14841: CALL_OW 12
14845: PPUSH
14846: CALL_OW 67
// apeman_init ;
14850: CALL 15019 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
14854: LD_ADDR_VAR 0 2
14858: PUSH
14859: LD_EXP 29
14863: PUSH
14864: LD_INT 0
14866: PUSH
14867: EMPTY
14868: LIST
14869: DIFF
14870: PUSH
14871: FOR_IN
14872: IFFALSE 14976
// begin if i = 1 then
14874: LD_VAR 0 2
14878: PUSH
14879: LD_INT 1
14881: EQUAL
14882: IFFALSE 14899
// PlaceUnitArea ( CreateHuman , op1 , false ) ;
14884: CALL_OW 44
14888: PPUSH
14889: LD_INT 31
14891: PPUSH
14892: LD_INT 0
14894: PPUSH
14895: CALL_OW 49
// if i = 2 then
14899: LD_VAR 0 2
14903: PUSH
14904: LD_INT 2
14906: EQUAL
14907: IFFALSE 14924
// PlaceUnitArea ( CreateHuman , op2 , false ) ;
14909: CALL_OW 44
14913: PPUSH
14914: LD_INT 32
14916: PPUSH
14917: LD_INT 0
14919: PPUSH
14920: CALL_OW 49
// if i = 3 then
14924: LD_VAR 0 2
14928: PUSH
14929: LD_INT 3
14931: EQUAL
14932: IFFALSE 14949
// PlaceUnitArea ( CreateHuman , op3 , false ) ;
14934: CALL_OW 44
14938: PPUSH
14939: LD_INT 33
14941: PPUSH
14942: LD_INT 0
14944: PPUSH
14945: CALL_OW 49
// if i = 4 then
14949: LD_VAR 0 2
14953: PUSH
14954: LD_INT 4
14956: EQUAL
14957: IFFALSE 14974
// PlaceUnitArea ( CreateHuman , op4 , false ) ;
14959: CALL_OW 44
14963: PPUSH
14964: LD_INT 34
14966: PPUSH
14967: LD_INT 0
14969: PPUSH
14970: CALL_OW 49
// end ;
14974: GO 14871
14976: POP
14977: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
14978: LD_ADDR_LOC 25
14982: PUSH
14983: LD_LOC 25
14987: PUSH
14988: LD_LOC 20
14992: PLUS
14993: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
14994: LD_LOC 25
14998: PUSH
14999: LD_LOC 21
15003: GREATEREQUAL
15004: IFFALSE 14835
// _isSpawning := false ;
15006: LD_ADDR_LOC 24
15010: PUSH
15011: LD_INT 0
15013: ST_TO_ADDR
// end ;
15014: LD_VAR 0 1
15018: RET
// function apeman_init ; var ape_names ; begin
15019: LD_INT 0
15021: PPUSH
15022: PPUSH
// ape_names = [ Tupoun , Opoce , Opka , Butrus , Bubu , Condor , Kuklajs , Simon , Ugh , Urgh , Argh , Aargh , Hrumph , Grumph , Oorg , Eghrr , Rrrr , Bark , Wraughrr , :-) , Semik , Hrgh , Hur , Havran , Nazghul , Brutal , Kato Zluta Opoce , Monkey , Yeargh , Marta , Batman , Barkman , Xcenovsk , David Love , Freon , Stoupik , Quik , Jam Prckovic Laren , CFC , Kvakous , Sumys , Agent , Nazghul , Havran , Vrana , Havranek , Carlos Frank , Tekar , Andy , Angela , Janina , Shipanze , Simpan , Nazghulik , Potrusil , Potrus , Butrus , Potrusil , Simon , Auuu , NEMO , Silena opice , Meuznenapadazadnejmeno , Uhrun , Marmelada , Negr , Fnuk , Slim , Kvak , Dave , Bruntal , Arnie , Polda , Jen , Siddha , Silnickar , Bukvice , Zalud , Elvis , Nazghul , Chruadfa , Nazghul , Kato Yellow Ape , Cpt. Ape , King Of The Hill , Pterinochilus , Bad Platypus , Really Bad Ape , Looser , Looser , Looser , Megadeth , Mad Ape , Wraughhhh , ":) ] ;
15023: LD_ADDR_VAR 0 2
15027: PUSH
15028: LD_STRING Tupoun
15030: PUSH
15031: LD_STRING Opoce
15033: PUSH
15034: LD_STRING Opka
15036: PUSH
15037: LD_STRING Butrus
15039: PUSH
15040: LD_STRING Bubu
15042: PUSH
15043: LD_STRING Condor
15045: PUSH
15046: LD_STRING Kuklajs
15048: PUSH
15049: LD_STRING Simon
15051: PUSH
15052: LD_STRING Ugh
15054: PUSH
15055: LD_STRING Urgh
15057: PUSH
15058: LD_STRING Argh
15060: PUSH
15061: LD_STRING Aargh
15063: PUSH
15064: LD_STRING Hrumph
15066: PUSH
15067: LD_STRING Grumph
15069: PUSH
15070: LD_STRING Oorg
15072: PUSH
15073: LD_STRING Eghrr
15075: PUSH
15076: LD_STRING Rrrr
15078: PUSH
15079: LD_STRING Bark
15081: PUSH
15082: LD_STRING Wraughrr
15084: PUSH
15085: LD_STRING :-)
15087: PUSH
15088: LD_STRING Semik
15090: PUSH
15091: LD_STRING Hrgh
15093: PUSH
15094: LD_STRING Hur
15096: PUSH
15097: LD_STRING Havran
15099: PUSH
15100: LD_STRING Nazghul
15102: PUSH
15103: LD_STRING Brutal
15105: PUSH
15106: LD_STRING Kato Zluta Opoce
15108: PUSH
15109: LD_STRING Monkey
15111: PUSH
15112: LD_STRING Yeargh
15114: PUSH
15115: LD_STRING Marta
15117: PUSH
15118: LD_STRING Batman
15120: PUSH
15121: LD_STRING Barkman
15123: PUSH
15124: LD_STRING Xcenovsk
15126: PUSH
15127: LD_STRING David Love
15129: PUSH
15130: LD_STRING Freon
15132: PUSH
15133: LD_STRING Stoupik
15135: PUSH
15136: LD_STRING Quik
15138: PUSH
15139: LD_STRING Jam Prckovic Laren
15141: PUSH
15142: LD_STRING CFC
15144: PUSH
15145: LD_STRING Kvakous
15147: PUSH
15148: LD_STRING Sumys
15150: PUSH
15151: LD_STRING Agent
15153: PUSH
15154: LD_STRING Nazghul
15156: PUSH
15157: LD_STRING Havran
15159: PUSH
15160: LD_STRING Vrana
15162: PUSH
15163: LD_STRING Havranek
15165: PUSH
15166: LD_STRING Carlos Frank
15168: PUSH
15169: LD_STRING Tekar
15171: PUSH
15172: LD_STRING Andy
15174: PUSH
15175: LD_STRING Angela
15177: PUSH
15178: LD_STRING Janina
15180: PUSH
15181: LD_STRING Shipanze
15183: PUSH
15184: LD_STRING Simpan
15186: PUSH
15187: LD_STRING Nazghulik
15189: PUSH
15190: LD_STRING Potrusil
15192: PUSH
15193: LD_STRING Potrus
15195: PUSH
15196: LD_STRING Butrus
15198: PUSH
15199: LD_STRING Potrusil
15201: PUSH
15202: LD_STRING Simon
15204: PUSH
15205: LD_STRING Auuu
15207: PUSH
15208: LD_STRING NEMO
15210: PUSH
15211: LD_STRING Silena opice
15213: PUSH
15214: LD_STRING Meuznenapadazadnejmeno
15216: PUSH
15217: LD_STRING Uhrun
15219: PUSH
15220: LD_STRING Marmelada
15222: PUSH
15223: LD_STRING Negr
15225: PUSH
15226: LD_STRING Fnuk
15228: PUSH
15229: LD_STRING Slim
15231: PUSH
15232: LD_STRING Kvak
15234: PUSH
15235: LD_STRING Dave
15237: PUSH
15238: LD_STRING Bruntal
15240: PUSH
15241: LD_STRING Arnie
15243: PUSH
15244: LD_STRING Polda
15246: PUSH
15247: LD_STRING Jen
15249: PUSH
15250: LD_STRING Siddha
15252: PUSH
15253: LD_STRING Silnickar
15255: PUSH
15256: LD_STRING Bukvice
15258: PUSH
15259: LD_STRING Zalud
15261: PUSH
15262: LD_STRING Elvis
15264: PUSH
15265: LD_STRING Nazghul
15267: PUSH
15268: LD_STRING Chruadfa
15270: PUSH
15271: LD_STRING Nazghul
15273: PUSH
15274: LD_STRING Kato Yellow Ape
15276: PUSH
15277: LD_STRING Cpt. Ape
15279: PUSH
15280: LD_STRING King Of The Hill
15282: PUSH
15283: LD_STRING Pterinochilus
15285: PUSH
15286: LD_STRING Bad Platypus
15288: PUSH
15289: LD_STRING Really Bad Ape
15291: PUSH
15292: LD_STRING Looser
15294: PUSH
15295: LD_STRING Looser
15297: PUSH
15298: LD_STRING Looser
15300: PUSH
15301: LD_STRING Megadeth
15303: PUSH
15304: LD_STRING Mad Ape
15306: PUSH
15307: LD_STRING Wraughhhh
15309: PUSH
15310: LD_STRING ":)
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: ST_TO_ADDR
// uc_side := 0 ;
15410: LD_ADDR_OWVAR 20
15414: PUSH
15415: LD_INT 0
15417: ST_TO_ADDR
// uc_nation := nation_nature ;
15418: LD_ADDR_OWVAR 21
15422: PUSH
15423: LD_INT 0
15425: ST_TO_ADDR
// hc_class := class_apeman ;
15426: LD_ADDR_OWVAR 28
15430: PUSH
15431: LD_INT 12
15433: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
15434: LD_ADDR_OWVAR 30
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: LD_INT 2
15444: PUSH
15445: LD_INT 2
15447: PUSH
15448: LD_INT 2
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
15457: LD_ADDR_OWVAR 31
15461: PUSH
15462: LD_INT 0
15464: PPUSH
15465: LD_INT 2
15467: PPUSH
15468: CALL_OW 12
15472: PUSH
15473: LD_LOC 22
15477: PLUS
15478: PUSH
15479: LD_INT 0
15481: PPUSH
15482: LD_INT 2
15484: PPUSH
15485: CALL_OW 12
15489: PUSH
15490: LD_LOC 22
15494: PLUS
15495: PUSH
15496: LD_INT 0
15498: PPUSH
15499: LD_INT 2
15501: PPUSH
15502: CALL_OW 12
15506: PUSH
15507: LD_LOC 22
15511: PLUS
15512: PUSH
15513: LD_INT 0
15515: PPUSH
15516: LD_INT 2
15518: PPUSH
15519: CALL_OW 12
15523: PUSH
15524: LD_LOC 22
15528: PLUS
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
15536: LD_ADDR_OWVAR 29
15540: PUSH
15541: LD_INT 10
15543: PUSH
15544: LD_INT 12
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: ST_TO_ADDR
// hc_sex := sex_male ;
15551: LD_ADDR_OWVAR 27
15555: PUSH
15556: LD_INT 1
15558: ST_TO_ADDR
// hc_name := ape_names [ Rand ( 1 , ape_names ) ] ;
15559: LD_ADDR_OWVAR 26
15563: PUSH
15564: LD_VAR 0 2
15568: PUSH
15569: LD_INT 1
15571: PPUSH
15572: LD_VAR 0 2
15576: PPUSH
15577: CALL_OW 12
15581: ARRAY
15582: ST_TO_ADDR
// hc_importance := 0 ;
15583: LD_ADDR_OWVAR 32
15587: PUSH
15588: LD_INT 0
15590: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
15591: LD_ADDR_OWVAR 35
15595: PUSH
15596: LD_INT 20
15598: NEG
15599: PPUSH
15600: LD_INT 20
15602: PPUSH
15603: CALL_OW 12
15607: ST_TO_ADDR
// end ; end_of_file
15608: LD_VAR 0 1
15612: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
15613: LD_INT 0
15615: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
15616: LD_VAR 0 1
15620: PPUSH
15621: CALL_OW 255
15625: PUSH
15626: LD_VAR 0 4
15630: EQUAL
15631: IFFALSE 15650
// begin SetAchievement ( ACH_RAD ) ;
15633: LD_STRING ACH_RAD
15635: PPUSH
15636: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
15640: LD_STRING ACH_NL
15642: PPUSH
15643: LD_INT 1
15645: PPUSH
15646: CALL_OW 564
// end end ;
15650: LD_VAR 0 5
15654: RET
// export function SA_Win ( side ) ; begin
15655: LD_INT 0
15657: PPUSH
// case side of 1 :
15658: LD_VAR 0 1
15662: PUSH
15663: LD_INT 1
15665: DOUBLE
15666: EQUAL
15667: IFTRUE 15671
15669: GO 15684
15671: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
15672: LD_STRING ACH_AH
15674: PPUSH
15675: LD_INT 1
15677: PPUSH
15678: CALL_OW 564
15682: GO 15847
15684: LD_INT 2
15686: DOUBLE
15687: EQUAL
15688: IFTRUE 15692
15690: GO 15705
15692: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
15693: LD_STRING ACH_E
15695: PPUSH
15696: LD_INT 1
15698: PPUSH
15699: CALL_OW 564
15703: GO 15847
15705: LD_INT 3
15707: DOUBLE
15708: EQUAL
15709: IFTRUE 15713
15711: GO 15726
15713: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
15714: LD_STRING ACH_OOL
15716: PPUSH
15717: LD_INT 1
15719: PPUSH
15720: CALL_OW 564
15724: GO 15847
15726: LD_INT 1
15728: PUSH
15729: LD_INT 2
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: DOUBLE
15736: EQUAL
15737: IFTRUE 15741
15739: GO 15766
15741: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15742: LD_STRING ACH_AH
15744: PPUSH
15745: LD_REAL  5.00000000000000E-0001
15748: PPUSH
15749: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15753: LD_STRING ACH_E
15755: PPUSH
15756: LD_REAL  5.00000000000000E-0001
15759: PPUSH
15760: CALL_OW 564
// end ; [ 2 , 3 ] :
15764: GO 15847
15766: LD_INT 2
15768: PUSH
15769: LD_INT 3
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: DOUBLE
15776: EQUAL
15777: IFTRUE 15781
15779: GO 15806
15781: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
15782: LD_STRING ACH_OOL
15784: PPUSH
15785: LD_REAL  5.00000000000000E-0001
15788: PPUSH
15789: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15793: LD_STRING ACH_E
15795: PPUSH
15796: LD_REAL  5.00000000000000E-0001
15799: PPUSH
15800: CALL_OW 564
// end ; [ 3 , 1 ] :
15804: GO 15847
15806: LD_INT 3
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: DOUBLE
15816: EQUAL
15817: IFTRUE 15821
15819: GO 15846
15821: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15822: LD_STRING ACH_AH
15824: PPUSH
15825: LD_REAL  5.00000000000000E-0001
15828: PPUSH
15829: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
15833: LD_STRING ACH_OOL
15835: PPUSH
15836: LD_REAL  5.00000000000000E-0001
15839: PPUSH
15840: CALL_OW 564
// end ; end ;
15844: GO 15847
15846: POP
// end ; end_of_file
15847: LD_VAR 0 2
15851: RET
// export function SetMpTechs ( ) ; var side , i ; begin
15852: LD_INT 0
15854: PPUSH
15855: PPUSH
15856: PPUSH
// for side = 1 to 8 do
15857: LD_ADDR_VAR 0 2
15861: PUSH
15862: DOUBLE
15863: LD_INT 1
15865: DEC
15866: ST_TO_ADDR
15867: LD_INT 8
15869: PUSH
15870: FOR_TO
15871: IFFALSE 15992
// begin for i = 1 to 72 do
15873: LD_ADDR_VAR 0 3
15877: PUSH
15878: DOUBLE
15879: LD_INT 1
15881: DEC
15882: ST_TO_ADDR
15883: LD_INT 72
15885: PUSH
15886: FOR_TO
15887: IFFALSE 15918
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15889: LD_VAR 0 3
15893: PPUSH
15894: LD_VAR 0 2
15898: PPUSH
15899: LD_INT 0
15901: PPUSH
15902: LD_VAR 0 3
15906: PPUSH
15907: CALL_OW 565
15911: PPUSH
15912: CALL_OW 322
15916: GO 15886
15918: POP
15919: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15920: LD_INT 73
15922: PPUSH
15923: LD_VAR 0 2
15927: PPUSH
15928: LD_INT 0
15930: PPUSH
15931: LD_INT 25
15933: PPUSH
15934: CALL_OW 565
15938: PPUSH
15939: CALL_OW 322
// for i = 0 to 40 do
15943: LD_ADDR_VAR 0 3
15947: PUSH
15948: DOUBLE
15949: LD_INT 0
15951: DEC
15952: ST_TO_ADDR
15953: LD_INT 40
15955: PUSH
15956: FOR_TO
15957: IFFALSE 15988
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15959: LD_VAR 0 3
15963: PPUSH
15964: LD_VAR 0 2
15968: PPUSH
15969: LD_INT 1
15971: PPUSH
15972: LD_VAR 0 3
15976: PPUSH
15977: CALL_OW 565
15981: PPUSH
15982: CALL_OW 324
15986: GO 15956
15988: POP
15989: POP
// end ;
15990: GO 15870
15992: POP
15993: POP
// end ;
15994: LD_VAR 0 1
15998: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15999: LD_INT 0
16001: PPUSH
16002: PPUSH
16003: PPUSH
// for side = 1 to 8 do
16004: LD_ADDR_VAR 0 3
16008: PUSH
16009: DOUBLE
16010: LD_INT 1
16012: DEC
16013: ST_TO_ADDR
16014: LD_INT 8
16016: PUSH
16017: FOR_TO
16018: IFFALSE 20014
// begin for i = 1 to 73 do
16020: LD_ADDR_VAR 0 4
16024: PUSH
16025: DOUBLE
16026: LD_INT 1
16028: DEC
16029: ST_TO_ADDR
16030: LD_INT 73
16032: PUSH
16033: FOR_TO
16034: IFFALSE 16055
// SetTech ( i , side , state_disabled ) ;
16036: LD_VAR 0 4
16040: PPUSH
16041: LD_VAR 0 3
16045: PPUSH
16046: LD_INT 0
16048: PPUSH
16049: CALL_OW 322
16053: GO 16033
16055: POP
16056: POP
// for i = 0 to 40 do
16057: LD_ADDR_VAR 0 4
16061: PUSH
16062: DOUBLE
16063: LD_INT 0
16065: DEC
16066: ST_TO_ADDR
16067: LD_INT 40
16069: PUSH
16070: FOR_TO
16071: IFFALSE 16092
// SetRestrict ( i , side , false ) ;
16073: LD_VAR 0 4
16077: PPUSH
16078: LD_VAR 0 3
16082: PPUSH
16083: LD_INT 0
16085: PPUSH
16086: CALL_OW 324
16090: GO 16070
16092: POP
16093: POP
// case level of 1 :
16094: LD_VAR 0 1
16098: PUSH
16099: LD_INT 1
16101: DOUBLE
16102: EQUAL
16103: IFTRUE 16107
16105: GO 16260
16107: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16108: LD_INT 35
16110: PPUSH
16111: LD_VAR 0 3
16115: PPUSH
16116: LD_INT 1
16118: PPUSH
16119: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16123: LD_INT 45
16125: PPUSH
16126: LD_VAR 0 3
16130: PPUSH
16131: LD_INT 1
16133: PPUSH
16134: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16138: LD_INT 46
16140: PPUSH
16141: LD_VAR 0 3
16145: PPUSH
16146: LD_INT 1
16148: PPUSH
16149: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16153: LD_INT 47
16155: PPUSH
16156: LD_VAR 0 3
16160: PPUSH
16161: LD_INT 1
16163: PPUSH
16164: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16168: LD_INT 0
16170: PPUSH
16171: LD_VAR 0 3
16175: PPUSH
16176: LD_INT 1
16178: PPUSH
16179: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16183: LD_INT 2
16185: PPUSH
16186: LD_VAR 0 3
16190: PPUSH
16191: LD_INT 1
16193: PPUSH
16194: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16198: LD_INT 4
16200: PPUSH
16201: LD_VAR 0 3
16205: PPUSH
16206: LD_INT 1
16208: PPUSH
16209: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16213: LD_INT 6
16215: PPUSH
16216: LD_VAR 0 3
16220: PPUSH
16221: LD_INT 1
16223: PPUSH
16224: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16228: LD_INT 29
16230: PPUSH
16231: LD_VAR 0 3
16235: PPUSH
16236: LD_INT 1
16238: PPUSH
16239: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16243: LD_INT 31
16245: PPUSH
16246: LD_VAR 0 3
16250: PPUSH
16251: LD_INT 1
16253: PPUSH
16254: CALL_OW 324
// end ; 2 :
16258: GO 20012
16260: LD_INT 2
16262: DOUBLE
16263: EQUAL
16264: IFTRUE 16268
16266: GO 16466
16268: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16269: LD_INT 35
16271: PPUSH
16272: LD_VAR 0 3
16276: PPUSH
16277: LD_INT 1
16279: PPUSH
16280: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16284: LD_INT 45
16286: PPUSH
16287: LD_VAR 0 3
16291: PPUSH
16292: LD_INT 1
16294: PPUSH
16295: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16299: LD_INT 46
16301: PPUSH
16302: LD_VAR 0 3
16306: PPUSH
16307: LD_INT 1
16309: PPUSH
16310: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16314: LD_INT 47
16316: PPUSH
16317: LD_VAR 0 3
16321: PPUSH
16322: LD_INT 1
16324: PPUSH
16325: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16329: LD_INT 1
16331: PPUSH
16332: LD_VAR 0 3
16336: PPUSH
16337: LD_INT 1
16339: PPUSH
16340: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16344: LD_INT 2
16346: PPUSH
16347: LD_VAR 0 3
16351: PPUSH
16352: LD_INT 1
16354: PPUSH
16355: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16359: LD_INT 11
16361: PPUSH
16362: LD_VAR 0 3
16366: PPUSH
16367: LD_INT 1
16369: PPUSH
16370: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16374: LD_INT 0
16376: PPUSH
16377: LD_VAR 0 3
16381: PPUSH
16382: LD_INT 1
16384: PPUSH
16385: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16389: LD_INT 2
16391: PPUSH
16392: LD_VAR 0 3
16396: PPUSH
16397: LD_INT 1
16399: PPUSH
16400: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16404: LD_INT 4
16406: PPUSH
16407: LD_VAR 0 3
16411: PPUSH
16412: LD_INT 1
16414: PPUSH
16415: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16419: LD_INT 6
16421: PPUSH
16422: LD_VAR 0 3
16426: PPUSH
16427: LD_INT 1
16429: PPUSH
16430: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16434: LD_INT 29
16436: PPUSH
16437: LD_VAR 0 3
16441: PPUSH
16442: LD_INT 1
16444: PPUSH
16445: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16449: LD_INT 31
16451: PPUSH
16452: LD_VAR 0 3
16456: PPUSH
16457: LD_INT 1
16459: PPUSH
16460: CALL_OW 324
// end ; 3 :
16464: GO 20012
16466: LD_INT 3
16468: DOUBLE
16469: EQUAL
16470: IFTRUE 16474
16472: GO 16927
16474: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16475: LD_INT 35
16477: PPUSH
16478: LD_VAR 0 3
16482: PPUSH
16483: LD_INT 1
16485: PPUSH
16486: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16490: LD_INT 45
16492: PPUSH
16493: LD_VAR 0 3
16497: PPUSH
16498: LD_INT 1
16500: PPUSH
16501: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16505: LD_INT 46
16507: PPUSH
16508: LD_VAR 0 3
16512: PPUSH
16513: LD_INT 1
16515: PPUSH
16516: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16520: LD_INT 47
16522: PPUSH
16523: LD_VAR 0 3
16527: PPUSH
16528: LD_INT 1
16530: PPUSH
16531: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16535: LD_INT 1
16537: PPUSH
16538: LD_VAR 0 3
16542: PPUSH
16543: LD_INT 1
16545: PPUSH
16546: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16550: LD_INT 2
16552: PPUSH
16553: LD_VAR 0 3
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16565: LD_INT 11
16567: PPUSH
16568: LD_VAR 0 3
16572: PPUSH
16573: LD_INT 1
16575: PPUSH
16576: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16580: LD_INT 48
16582: PPUSH
16583: LD_VAR 0 3
16587: PPUSH
16588: LD_INT 1
16590: PPUSH
16591: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16595: LD_INT 69
16597: PPUSH
16598: LD_VAR 0 3
16602: PPUSH
16603: LD_INT 1
16605: PPUSH
16606: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16610: LD_INT 39
16612: PPUSH
16613: LD_VAR 0 3
16617: PPUSH
16618: LD_INT 1
16620: PPUSH
16621: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16625: LD_INT 43
16627: PPUSH
16628: LD_VAR 0 3
16632: PPUSH
16633: LD_INT 1
16635: PPUSH
16636: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16640: LD_INT 51
16642: PPUSH
16643: LD_VAR 0 3
16647: PPUSH
16648: LD_INT 1
16650: PPUSH
16651: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16655: LD_INT 6
16657: PPUSH
16658: LD_VAR 0 3
16662: PPUSH
16663: LD_INT 1
16665: PPUSH
16666: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16670: LD_INT 0
16672: PPUSH
16673: LD_VAR 0 3
16677: PPUSH
16678: LD_INT 1
16680: PPUSH
16681: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16685: LD_INT 2
16687: PPUSH
16688: LD_VAR 0 3
16692: PPUSH
16693: LD_INT 1
16695: PPUSH
16696: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16700: LD_INT 3
16702: PPUSH
16703: LD_VAR 0 3
16707: PPUSH
16708: LD_INT 1
16710: PPUSH
16711: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16715: LD_INT 4
16717: PPUSH
16718: LD_VAR 0 3
16722: PPUSH
16723: LD_INT 1
16725: PPUSH
16726: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16730: LD_INT 6
16732: PPUSH
16733: LD_VAR 0 3
16737: PPUSH
16738: LD_INT 1
16740: PPUSH
16741: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16745: LD_INT 7
16747: PPUSH
16748: LD_VAR 0 3
16752: PPUSH
16753: LD_INT 1
16755: PPUSH
16756: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16760: LD_INT 8
16762: PPUSH
16763: LD_VAR 0 3
16767: PPUSH
16768: LD_INT 1
16770: PPUSH
16771: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16775: LD_INT 10
16777: PPUSH
16778: LD_VAR 0 3
16782: PPUSH
16783: LD_INT 1
16785: PPUSH
16786: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16790: LD_INT 15
16792: PPUSH
16793: LD_VAR 0 3
16797: PPUSH
16798: LD_INT 1
16800: PPUSH
16801: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16805: LD_INT 16
16807: PPUSH
16808: LD_VAR 0 3
16812: PPUSH
16813: LD_INT 1
16815: PPUSH
16816: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16820: LD_INT 17
16822: PPUSH
16823: LD_VAR 0 3
16827: PPUSH
16828: LD_INT 1
16830: PPUSH
16831: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16835: LD_INT 20
16837: PPUSH
16838: LD_VAR 0 3
16842: PPUSH
16843: LD_INT 1
16845: PPUSH
16846: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16850: LD_INT 26
16852: PPUSH
16853: LD_VAR 0 3
16857: PPUSH
16858: LD_INT 1
16860: PPUSH
16861: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16865: LD_INT 27
16867: PPUSH
16868: LD_VAR 0 3
16872: PPUSH
16873: LD_INT 1
16875: PPUSH
16876: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16880: LD_INT 29
16882: PPUSH
16883: LD_VAR 0 3
16887: PPUSH
16888: LD_INT 1
16890: PPUSH
16891: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16895: LD_INT 31
16897: PPUSH
16898: LD_VAR 0 3
16902: PPUSH
16903: LD_INT 1
16905: PPUSH
16906: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16910: LD_INT 32
16912: PPUSH
16913: LD_VAR 0 3
16917: PPUSH
16918: LD_INT 1
16920: PPUSH
16921: CALL_OW 324
// end ; 4 :
16925: GO 20012
16927: LD_INT 4
16929: DOUBLE
16930: EQUAL
16931: IFTRUE 16935
16933: GO 17883
16935: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16936: LD_INT 35
16938: PPUSH
16939: LD_VAR 0 3
16943: PPUSH
16944: LD_INT 1
16946: PPUSH
16947: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16951: LD_INT 45
16953: PPUSH
16954: LD_VAR 0 3
16958: PPUSH
16959: LD_INT 1
16961: PPUSH
16962: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16966: LD_INT 46
16968: PPUSH
16969: LD_VAR 0 3
16973: PPUSH
16974: LD_INT 1
16976: PPUSH
16977: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16981: LD_INT 47
16983: PPUSH
16984: LD_VAR 0 3
16988: PPUSH
16989: LD_INT 1
16991: PPUSH
16992: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16996: LD_INT 1
16998: PPUSH
16999: LD_VAR 0 3
17003: PPUSH
17004: LD_INT 1
17006: PPUSH
17007: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17011: LD_INT 2
17013: PPUSH
17014: LD_VAR 0 3
17018: PPUSH
17019: LD_INT 1
17021: PPUSH
17022: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17026: LD_INT 11
17028: PPUSH
17029: LD_VAR 0 3
17033: PPUSH
17034: LD_INT 1
17036: PPUSH
17037: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17041: LD_INT 20
17043: PPUSH
17044: LD_VAR 0 3
17048: PPUSH
17049: LD_INT 1
17051: PPUSH
17052: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17056: LD_INT 48
17058: PPUSH
17059: LD_VAR 0 3
17063: PPUSH
17064: LD_INT 1
17066: PPUSH
17067: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17071: LD_INT 49
17073: PPUSH
17074: LD_VAR 0 3
17078: PPUSH
17079: LD_INT 1
17081: PPUSH
17082: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17086: LD_INT 69
17088: PPUSH
17089: LD_VAR 0 3
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17101: LD_INT 39
17103: PPUSH
17104: LD_VAR 0 3
17108: PPUSH
17109: LD_INT 1
17111: PPUSH
17112: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17116: LD_INT 34
17118: PPUSH
17119: LD_VAR 0 3
17123: PPUSH
17124: LD_INT 1
17126: PPUSH
17127: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17131: LD_INT 42
17133: PPUSH
17134: LD_VAR 0 3
17138: PPUSH
17139: LD_INT 1
17141: PPUSH
17142: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17146: LD_INT 44
17148: PPUSH
17149: LD_VAR 0 3
17153: PPUSH
17154: LD_INT 1
17156: PPUSH
17157: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17161: LD_INT 41
17163: PPUSH
17164: LD_VAR 0 3
17168: PPUSH
17169: LD_INT 1
17171: PPUSH
17172: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17176: LD_INT 43
17178: PPUSH
17179: LD_VAR 0 3
17183: PPUSH
17184: LD_INT 1
17186: PPUSH
17187: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17191: LD_INT 70
17193: PPUSH
17194: LD_VAR 0 3
17198: PPUSH
17199: LD_INT 1
17201: PPUSH
17202: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17206: LD_INT 51
17208: PPUSH
17209: LD_VAR 0 3
17213: PPUSH
17214: LD_INT 1
17216: PPUSH
17217: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17221: LD_INT 52
17223: PPUSH
17224: LD_VAR 0 3
17228: PPUSH
17229: LD_INT 1
17231: PPUSH
17232: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17236: LD_INT 6
17238: PPUSH
17239: LD_VAR 0 3
17243: PPUSH
17244: LD_INT 1
17246: PPUSH
17247: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17251: LD_INT 15
17253: PPUSH
17254: LD_VAR 0 3
17258: PPUSH
17259: LD_INT 1
17261: PPUSH
17262: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17266: LD_INT 7
17268: PPUSH
17269: LD_VAR 0 3
17273: PPUSH
17274: LD_INT 1
17276: PPUSH
17277: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17281: LD_INT 12
17283: PPUSH
17284: LD_VAR 0 3
17288: PPUSH
17289: LD_INT 1
17291: PPUSH
17292: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17296: LD_INT 18
17298: PPUSH
17299: LD_VAR 0 3
17303: PPUSH
17304: LD_INT 1
17306: PPUSH
17307: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17311: LD_INT 60
17313: PPUSH
17314: LD_VAR 0 3
17318: PPUSH
17319: LD_INT 1
17321: PPUSH
17322: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17326: LD_INT 9
17328: PPUSH
17329: LD_VAR 0 3
17333: PPUSH
17334: LD_INT 1
17336: PPUSH
17337: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17341: LD_INT 30
17343: PPUSH
17344: LD_VAR 0 3
17348: PPUSH
17349: LD_INT 1
17351: PPUSH
17352: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17356: LD_INT 37
17358: PPUSH
17359: LD_VAR 0 3
17363: PPUSH
17364: LD_INT 1
17366: PPUSH
17367: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17371: LD_INT 5
17373: PPUSH
17374: LD_VAR 0 3
17378: PPUSH
17379: LD_INT 1
17381: PPUSH
17382: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17386: LD_INT 66
17388: PPUSH
17389: LD_VAR 0 3
17393: PPUSH
17394: LD_INT 1
17396: PPUSH
17397: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17401: LD_INT 21
17403: PPUSH
17404: LD_VAR 0 3
17408: PPUSH
17409: LD_INT 1
17411: PPUSH
17412: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17416: LD_INT 22
17418: PPUSH
17419: LD_VAR 0 3
17423: PPUSH
17424: LD_INT 1
17426: PPUSH
17427: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17431: LD_INT 54
17433: PPUSH
17434: LD_VAR 0 3
17438: PPUSH
17439: LD_INT 1
17441: PPUSH
17442: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17446: LD_INT 0
17448: PPUSH
17449: LD_VAR 0 3
17453: PPUSH
17454: LD_INT 1
17456: PPUSH
17457: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17461: LD_INT 1
17463: PPUSH
17464: LD_VAR 0 3
17468: PPUSH
17469: LD_INT 1
17471: PPUSH
17472: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17476: LD_INT 2
17478: PPUSH
17479: LD_VAR 0 3
17483: PPUSH
17484: LD_INT 1
17486: PPUSH
17487: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17491: LD_INT 3
17493: PPUSH
17494: LD_VAR 0 3
17498: PPUSH
17499: LD_INT 1
17501: PPUSH
17502: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17506: LD_INT 4
17508: PPUSH
17509: LD_VAR 0 3
17513: PPUSH
17514: LD_INT 1
17516: PPUSH
17517: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17521: LD_INT 5
17523: PPUSH
17524: LD_VAR 0 3
17528: PPUSH
17529: LD_INT 1
17531: PPUSH
17532: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17536: LD_INT 6
17538: PPUSH
17539: LD_VAR 0 3
17543: PPUSH
17544: LD_INT 1
17546: PPUSH
17547: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17551: LD_INT 7
17553: PPUSH
17554: LD_VAR 0 3
17558: PPUSH
17559: LD_INT 1
17561: PPUSH
17562: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17566: LD_INT 8
17568: PPUSH
17569: LD_VAR 0 3
17573: PPUSH
17574: LD_INT 1
17576: PPUSH
17577: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17581: LD_INT 10
17583: PPUSH
17584: LD_VAR 0 3
17588: PPUSH
17589: LD_INT 1
17591: PPUSH
17592: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17596: LD_INT 11
17598: PPUSH
17599: LD_VAR 0 3
17603: PPUSH
17604: LD_INT 1
17606: PPUSH
17607: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17611: LD_INT 12
17613: PPUSH
17614: LD_VAR 0 3
17618: PPUSH
17619: LD_INT 1
17621: PPUSH
17622: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17626: LD_INT 13
17628: PPUSH
17629: LD_VAR 0 3
17633: PPUSH
17634: LD_INT 1
17636: PPUSH
17637: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17641: LD_INT 14
17643: PPUSH
17644: LD_VAR 0 3
17648: PPUSH
17649: LD_INT 1
17651: PPUSH
17652: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17656: LD_INT 15
17658: PPUSH
17659: LD_VAR 0 3
17663: PPUSH
17664: LD_INT 1
17666: PPUSH
17667: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17671: LD_INT 16
17673: PPUSH
17674: LD_VAR 0 3
17678: PPUSH
17679: LD_INT 1
17681: PPUSH
17682: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17686: LD_INT 17
17688: PPUSH
17689: LD_VAR 0 3
17693: PPUSH
17694: LD_INT 1
17696: PPUSH
17697: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17701: LD_INT 19
17703: PPUSH
17704: LD_VAR 0 3
17708: PPUSH
17709: LD_INT 1
17711: PPUSH
17712: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17716: LD_INT 20
17718: PPUSH
17719: LD_VAR 0 3
17723: PPUSH
17724: LD_INT 1
17726: PPUSH
17727: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17731: LD_INT 21
17733: PPUSH
17734: LD_VAR 0 3
17738: PPUSH
17739: LD_INT 1
17741: PPUSH
17742: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17746: LD_INT 23
17748: PPUSH
17749: LD_VAR 0 3
17753: PPUSH
17754: LD_INT 1
17756: PPUSH
17757: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17761: LD_INT 26
17763: PPUSH
17764: LD_VAR 0 3
17768: PPUSH
17769: LD_INT 1
17771: PPUSH
17772: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17776: LD_INT 27
17778: PPUSH
17779: LD_VAR 0 3
17783: PPUSH
17784: LD_INT 1
17786: PPUSH
17787: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17791: LD_INT 28
17793: PPUSH
17794: LD_VAR 0 3
17798: PPUSH
17799: LD_INT 1
17801: PPUSH
17802: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17806: LD_INT 29
17808: PPUSH
17809: LD_VAR 0 3
17813: PPUSH
17814: LD_INT 1
17816: PPUSH
17817: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17821: LD_INT 30
17823: PPUSH
17824: LD_VAR 0 3
17828: PPUSH
17829: LD_INT 1
17831: PPUSH
17832: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17836: LD_INT 31
17838: PPUSH
17839: LD_VAR 0 3
17843: PPUSH
17844: LD_INT 1
17846: PPUSH
17847: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17851: LD_INT 32
17853: PPUSH
17854: LD_VAR 0 3
17858: PPUSH
17859: LD_INT 1
17861: PPUSH
17862: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17866: LD_INT 36
17868: PPUSH
17869: LD_VAR 0 3
17873: PPUSH
17874: LD_INT 1
17876: PPUSH
17877: CALL_OW 324
// end ; 5 :
17881: GO 20012
17883: LD_INT 5
17885: DOUBLE
17886: EQUAL
17887: IFTRUE 17891
17889: GO 19004
17891: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17892: LD_INT 35
17894: PPUSH
17895: LD_VAR 0 3
17899: PPUSH
17900: LD_INT 1
17902: PPUSH
17903: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17907: LD_INT 45
17909: PPUSH
17910: LD_VAR 0 3
17914: PPUSH
17915: LD_INT 1
17917: PPUSH
17918: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17922: LD_INT 46
17924: PPUSH
17925: LD_VAR 0 3
17929: PPUSH
17930: LD_INT 1
17932: PPUSH
17933: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17937: LD_INT 47
17939: PPUSH
17940: LD_VAR 0 3
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17952: LD_INT 1
17954: PPUSH
17955: LD_VAR 0 3
17959: PPUSH
17960: LD_INT 1
17962: PPUSH
17963: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17967: LD_INT 2
17969: PPUSH
17970: LD_VAR 0 3
17974: PPUSH
17975: LD_INT 1
17977: PPUSH
17978: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17982: LD_INT 11
17984: PPUSH
17985: LD_VAR 0 3
17989: PPUSH
17990: LD_INT 1
17992: PPUSH
17993: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17997: LD_INT 20
17999: PPUSH
18000: LD_VAR 0 3
18004: PPUSH
18005: LD_INT 1
18007: PPUSH
18008: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18012: LD_INT 48
18014: PPUSH
18015: LD_VAR 0 3
18019: PPUSH
18020: LD_INT 1
18022: PPUSH
18023: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18027: LD_INT 49
18029: PPUSH
18030: LD_VAR 0 3
18034: PPUSH
18035: LD_INT 1
18037: PPUSH
18038: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18042: LD_INT 69
18044: PPUSH
18045: LD_VAR 0 3
18049: PPUSH
18050: LD_INT 1
18052: PPUSH
18053: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18057: LD_INT 39
18059: PPUSH
18060: LD_VAR 0 3
18064: PPUSH
18065: LD_INT 1
18067: PPUSH
18068: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18072: LD_INT 34
18074: PPUSH
18075: LD_VAR 0 3
18079: PPUSH
18080: LD_INT 1
18082: PPUSH
18083: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18087: LD_INT 42
18089: PPUSH
18090: LD_VAR 0 3
18094: PPUSH
18095: LD_INT 1
18097: PPUSH
18098: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18102: LD_INT 44
18104: PPUSH
18105: LD_VAR 0 3
18109: PPUSH
18110: LD_INT 1
18112: PPUSH
18113: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18117: LD_INT 41
18119: PPUSH
18120: LD_VAR 0 3
18124: PPUSH
18125: LD_INT 1
18127: PPUSH
18128: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18132: LD_INT 40
18134: PPUSH
18135: LD_VAR 0 3
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18147: LD_INT 43
18149: PPUSH
18150: LD_VAR 0 3
18154: PPUSH
18155: LD_INT 1
18157: PPUSH
18158: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18162: LD_INT 70
18164: PPUSH
18165: LD_VAR 0 3
18169: PPUSH
18170: LD_INT 1
18172: PPUSH
18173: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18177: LD_INT 51
18179: PPUSH
18180: LD_VAR 0 3
18184: PPUSH
18185: LD_INT 1
18187: PPUSH
18188: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18192: LD_INT 52
18194: PPUSH
18195: LD_VAR 0 3
18199: PPUSH
18200: LD_INT 1
18202: PPUSH
18203: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18207: LD_INT 6
18209: PPUSH
18210: LD_VAR 0 3
18214: PPUSH
18215: LD_INT 1
18217: PPUSH
18218: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18222: LD_INT 15
18224: PPUSH
18225: LD_VAR 0 3
18229: PPUSH
18230: LD_INT 1
18232: PPUSH
18233: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18237: LD_INT 7
18239: PPUSH
18240: LD_VAR 0 3
18244: PPUSH
18245: LD_INT 1
18247: PPUSH
18248: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18252: LD_INT 12
18254: PPUSH
18255: LD_VAR 0 3
18259: PPUSH
18260: LD_INT 1
18262: PPUSH
18263: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
18267: LD_INT 17
18269: PPUSH
18270: LD_VAR 0 3
18274: PPUSH
18275: LD_INT 1
18277: PPUSH
18278: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18282: LD_INT 18
18284: PPUSH
18285: LD_VAR 0 3
18289: PPUSH
18290: LD_INT 1
18292: PPUSH
18293: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18297: LD_INT 60
18299: PPUSH
18300: LD_VAR 0 3
18304: PPUSH
18305: LD_INT 1
18307: PPUSH
18308: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18312: LD_INT 32
18314: PPUSH
18315: LD_VAR 0 3
18319: PPUSH
18320: LD_INT 1
18322: PPUSH
18323: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18327: LD_INT 9
18329: PPUSH
18330: LD_VAR 0 3
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18342: LD_INT 57
18344: PPUSH
18345: LD_VAR 0 3
18349: PPUSH
18350: LD_INT 1
18352: PPUSH
18353: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18357: LD_INT 30
18359: PPUSH
18360: LD_VAR 0 3
18364: PPUSH
18365: LD_INT 1
18367: PPUSH
18368: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18372: LD_INT 37
18374: PPUSH
18375: LD_VAR 0 3
18379: PPUSH
18380: LD_INT 1
18382: PPUSH
18383: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18387: LD_INT 63
18389: PPUSH
18390: LD_VAR 0 3
18394: PPUSH
18395: LD_INT 1
18397: PPUSH
18398: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18402: LD_INT 3
18404: PPUSH
18405: LD_VAR 0 3
18409: PPUSH
18410: LD_INT 1
18412: PPUSH
18413: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18417: LD_INT 4
18419: PPUSH
18420: LD_VAR 0 3
18424: PPUSH
18425: LD_INT 1
18427: PPUSH
18428: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18432: LD_INT 5
18434: PPUSH
18435: LD_VAR 0 3
18439: PPUSH
18440: LD_INT 1
18442: PPUSH
18443: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18447: LD_INT 66
18449: PPUSH
18450: LD_VAR 0 3
18454: PPUSH
18455: LD_INT 1
18457: PPUSH
18458: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18462: LD_INT 21
18464: PPUSH
18465: LD_VAR 0 3
18469: PPUSH
18470: LD_INT 1
18472: PPUSH
18473: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18477: LD_INT 22
18479: PPUSH
18480: LD_VAR 0 3
18484: PPUSH
18485: LD_INT 1
18487: PPUSH
18488: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18492: LD_INT 19
18494: PPUSH
18495: LD_VAR 0 3
18499: PPUSH
18500: LD_INT 1
18502: PPUSH
18503: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18507: LD_INT 54
18509: PPUSH
18510: LD_VAR 0 3
18514: PPUSH
18515: LD_INT 1
18517: PPUSH
18518: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18522: LD_INT 55
18524: PPUSH
18525: LD_VAR 0 3
18529: PPUSH
18530: LD_INT 1
18532: PPUSH
18533: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18537: LD_INT 0
18539: PPUSH
18540: LD_VAR 0 3
18544: PPUSH
18545: LD_INT 1
18547: PPUSH
18548: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18552: LD_INT 1
18554: PPUSH
18555: LD_VAR 0 3
18559: PPUSH
18560: LD_INT 1
18562: PPUSH
18563: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18567: LD_INT 2
18569: PPUSH
18570: LD_VAR 0 3
18574: PPUSH
18575: LD_INT 1
18577: PPUSH
18578: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18582: LD_INT 3
18584: PPUSH
18585: LD_VAR 0 3
18589: PPUSH
18590: LD_INT 1
18592: PPUSH
18593: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18597: LD_INT 4
18599: PPUSH
18600: LD_VAR 0 3
18604: PPUSH
18605: LD_INT 1
18607: PPUSH
18608: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18612: LD_INT 5
18614: PPUSH
18615: LD_VAR 0 3
18619: PPUSH
18620: LD_INT 1
18622: PPUSH
18623: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18627: LD_INT 6
18629: PPUSH
18630: LD_VAR 0 3
18634: PPUSH
18635: LD_INT 1
18637: PPUSH
18638: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18642: LD_INT 7
18644: PPUSH
18645: LD_VAR 0 3
18649: PPUSH
18650: LD_INT 1
18652: PPUSH
18653: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18657: LD_INT 8
18659: PPUSH
18660: LD_VAR 0 3
18664: PPUSH
18665: LD_INT 1
18667: PPUSH
18668: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18672: LD_INT 10
18674: PPUSH
18675: LD_VAR 0 3
18679: PPUSH
18680: LD_INT 1
18682: PPUSH
18683: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18687: LD_INT 11
18689: PPUSH
18690: LD_VAR 0 3
18694: PPUSH
18695: LD_INT 1
18697: PPUSH
18698: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18702: LD_INT 12
18704: PPUSH
18705: LD_VAR 0 3
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18717: LD_INT 13
18719: PPUSH
18720: LD_VAR 0 3
18724: PPUSH
18725: LD_INT 1
18727: PPUSH
18728: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18732: LD_INT 14
18734: PPUSH
18735: LD_VAR 0 3
18739: PPUSH
18740: LD_INT 1
18742: PPUSH
18743: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18747: LD_INT 15
18749: PPUSH
18750: LD_VAR 0 3
18754: PPUSH
18755: LD_INT 1
18757: PPUSH
18758: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18762: LD_INT 16
18764: PPUSH
18765: LD_VAR 0 3
18769: PPUSH
18770: LD_INT 1
18772: PPUSH
18773: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18777: LD_INT 17
18779: PPUSH
18780: LD_VAR 0 3
18784: PPUSH
18785: LD_INT 1
18787: PPUSH
18788: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18792: LD_INT 18
18794: PPUSH
18795: LD_VAR 0 3
18799: PPUSH
18800: LD_INT 1
18802: PPUSH
18803: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18807: LD_INT 19
18809: PPUSH
18810: LD_VAR 0 3
18814: PPUSH
18815: LD_INT 1
18817: PPUSH
18818: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18822: LD_INT 20
18824: PPUSH
18825: LD_VAR 0 3
18829: PPUSH
18830: LD_INT 1
18832: PPUSH
18833: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18837: LD_INT 21
18839: PPUSH
18840: LD_VAR 0 3
18844: PPUSH
18845: LD_INT 1
18847: PPUSH
18848: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18852: LD_INT 23
18854: PPUSH
18855: LD_VAR 0 3
18859: PPUSH
18860: LD_INT 1
18862: PPUSH
18863: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18867: LD_INT 26
18869: PPUSH
18870: LD_VAR 0 3
18874: PPUSH
18875: LD_INT 1
18877: PPUSH
18878: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18882: LD_INT 27
18884: PPUSH
18885: LD_VAR 0 3
18889: PPUSH
18890: LD_INT 1
18892: PPUSH
18893: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18897: LD_INT 28
18899: PPUSH
18900: LD_VAR 0 3
18904: PPUSH
18905: LD_INT 1
18907: PPUSH
18908: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18912: LD_INT 29
18914: PPUSH
18915: LD_VAR 0 3
18919: PPUSH
18920: LD_INT 1
18922: PPUSH
18923: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18927: LD_INT 30
18929: PPUSH
18930: LD_VAR 0 3
18934: PPUSH
18935: LD_INT 1
18937: PPUSH
18938: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18942: LD_INT 31
18944: PPUSH
18945: LD_VAR 0 3
18949: PPUSH
18950: LD_INT 1
18952: PPUSH
18953: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18957: LD_INT 32
18959: PPUSH
18960: LD_VAR 0 3
18964: PPUSH
18965: LD_INT 1
18967: PPUSH
18968: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18972: LD_INT 33
18974: PPUSH
18975: LD_VAR 0 3
18979: PPUSH
18980: LD_INT 1
18982: PPUSH
18983: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18987: LD_INT 36
18989: PPUSH
18990: LD_VAR 0 3
18994: PPUSH
18995: LD_INT 1
18997: PPUSH
18998: CALL_OW 324
// end ; 6 :
19002: GO 20012
19004: LD_INT 6
19006: DOUBLE
19007: EQUAL
19008: IFTRUE 19012
19010: GO 19937
19012: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19013: LD_INT 35
19015: PPUSH
19016: LD_VAR 0 3
19020: PPUSH
19021: LD_INT 1
19023: PPUSH
19024: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19028: LD_INT 45
19030: PPUSH
19031: LD_VAR 0 3
19035: PPUSH
19036: LD_INT 1
19038: PPUSH
19039: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19043: LD_INT 46
19045: PPUSH
19046: LD_VAR 0 3
19050: PPUSH
19051: LD_INT 1
19053: PPUSH
19054: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19058: LD_INT 47
19060: PPUSH
19061: LD_VAR 0 3
19065: PPUSH
19066: LD_INT 1
19068: PPUSH
19069: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19073: LD_INT 1
19075: PPUSH
19076: LD_VAR 0 3
19080: PPUSH
19081: LD_INT 1
19083: PPUSH
19084: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19088: LD_INT 2
19090: PPUSH
19091: LD_VAR 0 3
19095: PPUSH
19096: LD_INT 1
19098: PPUSH
19099: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19103: LD_INT 11
19105: PPUSH
19106: LD_VAR 0 3
19110: PPUSH
19111: LD_INT 1
19113: PPUSH
19114: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19118: LD_INT 20
19120: PPUSH
19121: LD_VAR 0 3
19125: PPUSH
19126: LD_INT 1
19128: PPUSH
19129: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19133: LD_INT 48
19135: PPUSH
19136: LD_VAR 0 3
19140: PPUSH
19141: LD_INT 1
19143: PPUSH
19144: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19148: LD_INT 49
19150: PPUSH
19151: LD_VAR 0 3
19155: PPUSH
19156: LD_INT 1
19158: PPUSH
19159: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
19163: LD_INT 50
19165: PPUSH
19166: LD_VAR 0 3
19170: PPUSH
19171: LD_INT 1
19173: PPUSH
19174: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19178: LD_INT 69
19180: PPUSH
19181: LD_VAR 0 3
19185: PPUSH
19186: LD_INT 1
19188: PPUSH
19189: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19193: LD_INT 39
19195: PPUSH
19196: LD_VAR 0 3
19200: PPUSH
19201: LD_INT 1
19203: PPUSH
19204: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19208: LD_INT 34
19210: PPUSH
19211: LD_VAR 0 3
19215: PPUSH
19216: LD_INT 1
19218: PPUSH
19219: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
19223: LD_INT 42
19225: PPUSH
19226: LD_VAR 0 3
19230: PPUSH
19231: LD_INT 1
19233: PPUSH
19234: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
19238: LD_INT 44
19240: PPUSH
19241: LD_VAR 0 3
19245: PPUSH
19246: LD_INT 1
19248: PPUSH
19249: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
19253: LD_INT 41
19255: PPUSH
19256: LD_VAR 0 3
19260: PPUSH
19261: LD_INT 1
19263: PPUSH
19264: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
19268: LD_INT 13
19270: PPUSH
19271: LD_VAR 0 3
19275: PPUSH
19276: LD_INT 1
19278: PPUSH
19279: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
19283: LD_INT 40
19285: PPUSH
19286: LD_VAR 0 3
19290: PPUSH
19291: LD_INT 1
19293: PPUSH
19294: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19298: LD_INT 43
19300: PPUSH
19301: LD_VAR 0 3
19305: PPUSH
19306: LD_INT 1
19308: PPUSH
19309: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19313: LD_INT 70
19315: PPUSH
19316: LD_VAR 0 3
19320: PPUSH
19321: LD_INT 1
19323: PPUSH
19324: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
19328: LD_INT 23
19330: PPUSH
19331: LD_VAR 0 3
19335: PPUSH
19336: LD_INT 1
19338: PPUSH
19339: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19343: LD_INT 51
19345: PPUSH
19346: LD_VAR 0 3
19350: PPUSH
19351: LD_INT 1
19353: PPUSH
19354: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19358: LD_INT 52
19360: PPUSH
19361: LD_VAR 0 3
19365: PPUSH
19366: LD_INT 1
19368: PPUSH
19369: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19373: LD_INT 6
19375: PPUSH
19376: LD_VAR 0 3
19380: PPUSH
19381: LD_INT 1
19383: PPUSH
19384: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19388: LD_INT 15
19390: PPUSH
19391: LD_VAR 0 3
19395: PPUSH
19396: LD_INT 1
19398: PPUSH
19399: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19403: LD_INT 7
19405: PPUSH
19406: LD_VAR 0 3
19410: PPUSH
19411: LD_INT 1
19413: PPUSH
19414: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19418: LD_INT 12
19420: PPUSH
19421: LD_VAR 0 3
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19433: LD_INT 10
19435: PPUSH
19436: LD_VAR 0 3
19440: PPUSH
19441: LD_INT 1
19443: PPUSH
19444: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19448: LD_INT 17
19450: PPUSH
19451: LD_VAR 0 3
19455: PPUSH
19456: LD_INT 1
19458: PPUSH
19459: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19463: LD_INT 18
19465: PPUSH
19466: LD_VAR 0 3
19470: PPUSH
19471: LD_INT 1
19473: PPUSH
19474: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19478: LD_INT 60
19480: PPUSH
19481: LD_VAR 0 3
19485: PPUSH
19486: LD_INT 1
19488: PPUSH
19489: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19493: LD_INT 61
19495: PPUSH
19496: LD_VAR 0 3
19500: PPUSH
19501: LD_INT 1
19503: PPUSH
19504: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19508: LD_INT 32
19510: PPUSH
19511: LD_VAR 0 3
19515: PPUSH
19516: LD_INT 1
19518: PPUSH
19519: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19523: LD_INT 27
19525: PPUSH
19526: LD_VAR 0 3
19530: PPUSH
19531: LD_INT 1
19533: PPUSH
19534: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19538: LD_INT 36
19540: PPUSH
19541: LD_VAR 0 3
19545: PPUSH
19546: LD_INT 1
19548: PPUSH
19549: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19553: LD_INT 33
19555: PPUSH
19556: LD_VAR 0 3
19560: PPUSH
19561: LD_INT 1
19563: PPUSH
19564: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19568: LD_INT 9
19570: PPUSH
19571: LD_VAR 0 3
19575: PPUSH
19576: LD_INT 1
19578: PPUSH
19579: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19583: LD_INT 38
19585: PPUSH
19586: LD_VAR 0 3
19590: PPUSH
19591: LD_INT 1
19593: PPUSH
19594: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19598: LD_INT 57
19600: PPUSH
19601: LD_VAR 0 3
19605: PPUSH
19606: LD_INT 1
19608: PPUSH
19609: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19613: LD_INT 58
19615: PPUSH
19616: LD_VAR 0 3
19620: PPUSH
19621: LD_INT 1
19623: PPUSH
19624: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19628: LD_INT 28
19630: PPUSH
19631: LD_VAR 0 3
19635: PPUSH
19636: LD_INT 1
19638: PPUSH
19639: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19643: LD_INT 29
19645: PPUSH
19646: LD_VAR 0 3
19650: PPUSH
19651: LD_INT 1
19653: PPUSH
19654: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19658: LD_INT 30
19660: PPUSH
19661: LD_VAR 0 3
19665: PPUSH
19666: LD_INT 1
19668: PPUSH
19669: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19673: LD_INT 37
19675: PPUSH
19676: LD_VAR 0 3
19680: PPUSH
19681: LD_INT 1
19683: PPUSH
19684: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19688: LD_INT 63
19690: PPUSH
19691: LD_VAR 0 3
19695: PPUSH
19696: LD_INT 1
19698: PPUSH
19699: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19703: LD_INT 64
19705: PPUSH
19706: LD_VAR 0 3
19710: PPUSH
19711: LD_INT 1
19713: PPUSH
19714: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19718: LD_INT 3
19720: PPUSH
19721: LD_VAR 0 3
19725: PPUSH
19726: LD_INT 1
19728: PPUSH
19729: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19733: LD_INT 4
19735: PPUSH
19736: LD_VAR 0 3
19740: PPUSH
19741: LD_INT 1
19743: PPUSH
19744: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19748: LD_INT 5
19750: PPUSH
19751: LD_VAR 0 3
19755: PPUSH
19756: LD_INT 1
19758: PPUSH
19759: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19763: LD_INT 8
19765: PPUSH
19766: LD_VAR 0 3
19770: PPUSH
19771: LD_INT 1
19773: PPUSH
19774: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19778: LD_INT 66
19780: PPUSH
19781: LD_VAR 0 3
19785: PPUSH
19786: LD_INT 1
19788: PPUSH
19789: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19793: LD_INT 67
19795: PPUSH
19796: LD_VAR 0 3
19800: PPUSH
19801: LD_INT 1
19803: PPUSH
19804: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19808: LD_INT 21
19810: PPUSH
19811: LD_VAR 0 3
19815: PPUSH
19816: LD_INT 1
19818: PPUSH
19819: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19823: LD_INT 22
19825: PPUSH
19826: LD_VAR 0 3
19830: PPUSH
19831: LD_INT 1
19833: PPUSH
19834: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19838: LD_INT 19
19840: PPUSH
19841: LD_VAR 0 3
19845: PPUSH
19846: LD_INT 1
19848: PPUSH
19849: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19853: LD_INT 26
19855: PPUSH
19856: LD_VAR 0 3
19860: PPUSH
19861: LD_INT 1
19863: PPUSH
19864: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19868: LD_INT 54
19870: PPUSH
19871: LD_VAR 0 3
19875: PPUSH
19876: LD_INT 1
19878: PPUSH
19879: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19883: LD_INT 55
19885: PPUSH
19886: LD_VAR 0 3
19890: PPUSH
19891: LD_INT 1
19893: PPUSH
19894: CALL_OW 322
// for i = 0 to 39 do
19898: LD_ADDR_VAR 0 4
19902: PUSH
19903: DOUBLE
19904: LD_INT 0
19906: DEC
19907: ST_TO_ADDR
19908: LD_INT 39
19910: PUSH
19911: FOR_TO
19912: IFFALSE 19933
// SetRestrict ( i , side , true ) ;
19914: LD_VAR 0 4
19918: PPUSH
19919: LD_VAR 0 3
19923: PPUSH
19924: LD_INT 1
19926: PPUSH
19927: CALL_OW 324
19931: GO 19911
19933: POP
19934: POP
// end ; else
19935: GO 20012
19937: POP
// begin for i = 1 to 73 do
19938: LD_ADDR_VAR 0 4
19942: PUSH
19943: DOUBLE
19944: LD_INT 1
19946: DEC
19947: ST_TO_ADDR
19948: LD_INT 73
19950: PUSH
19951: FOR_TO
19952: IFFALSE 19973
// SetTech ( i , side , state_enabled ) ;
19954: LD_VAR 0 4
19958: PPUSH
19959: LD_VAR 0 3
19963: PPUSH
19964: LD_INT 1
19966: PPUSH
19967: CALL_OW 322
19971: GO 19951
19973: POP
19974: POP
// for i = 0 to 39 do
19975: LD_ADDR_VAR 0 4
19979: PUSH
19980: DOUBLE
19981: LD_INT 0
19983: DEC
19984: ST_TO_ADDR
19985: LD_INT 39
19987: PUSH
19988: FOR_TO
19989: IFFALSE 20010
// SetRestrict ( i , side , true ) ;
19991: LD_VAR 0 4
19995: PPUSH
19996: LD_VAR 0 3
20000: PPUSH
20001: LD_INT 1
20003: PPUSH
20004: CALL_OW 324
20008: GO 19988
20010: POP
20011: POP
// end ; end ; end ;
20012: GO 16017
20014: POP
20015: POP
// end ;
20016: LD_VAR 0 2
20020: RET
