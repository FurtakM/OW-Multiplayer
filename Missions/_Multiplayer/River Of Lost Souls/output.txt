// export Neutral ; export def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_siberite_bomb , def_second_oil , def_other_nation , def_vehicles_too , def_builduptime , def_find_people , def_lost_people ; export is_depot , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , siberite_bomb_Delay , morale_decreasing_time , battle_flags_id , chance_loose , chance_find , amount_of_apemen ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export buildings_def , start_def ; export commander ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if MultiPlayer then
  11: LD_OWVAR 4
  15: IFFALSE 69
// begin Your_Side = mp_player_side ;
  17: LD_ADDR_OWVAR 2
  21: PUSH
  22: LD_OWVAR 7
  26: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  27: LD_ADDR_EXP 32
  31: PUSH
  32: LD_OWVAR 17
  36: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  37: LD_ADDR_EXP 30
  41: PUSH
  42: LD_OWVAR 15
  46: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  47: LD_ADDR_EXP 33
  51: PUSH
  52: LD_OWVAR 16
  56: ST_TO_ADDR
// Teams = mp_teams ;
  57: LD_ADDR_EXP 31
  61: PUSH
  62: LD_OWVAR 12
  66: ST_TO_ADDR
// end else
  67: GO 223
// begin Your_Side = 4 ;
  69: LD_ADDR_OWVAR 2
  73: PUSH
  74: LD_INT 4
  76: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
  77: LD_ADDR_EXP 32
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 3
  87: PUSH
  88: LD_INT 0
  90: PUSH
  91: LD_INT 1
  93: PUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 2
  99: PUSH
 100: LD_INT 4
 102: PUSH
 103: LD_INT 0
 105: PUSH
 106: EMPTY
 107: LIST
 108: LIST
 109: LIST
 110: LIST
 111: LIST
 112: LIST
 113: LIST
 114: LIST
 115: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 116: LD_ADDR_EXP 30
 120: PUSH
 121: LD_INT 0
 123: PUSH
 124: LD_INT 1
 126: PUSH
 127: LD_INT 0
 129: PUSH
 130: LD_INT 2
 132: PUSH
 133: LD_INT 0
 135: PUSH
 136: LD_INT 1
 138: PUSH
 139: LD_INT 2
 141: PUSH
 142: LD_INT 0
 144: PUSH
 145: EMPTY
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 3 , 0 , 3 , 3 , 0 ] ;
 155: LD_ADDR_EXP 33
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 3
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 3
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 0
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 7 , 4 ] ] ;
 194: LD_ADDR_EXP 31
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 6
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 7
 211: PUSH
 212: LD_INT 4
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// end ; if MultiPlayer then
 223: LD_OWVAR 4
 227: IFFALSE 452
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 229: LD_ADDR_EXP 2
 233: PUSH
 234: LD_INT 0
 236: PPUSH
 237: CALL_OW 426
 241: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 242: LD_ADDR_EXP 3
 246: PUSH
 247: LD_INT 1
 249: PPUSH
 250: CALL_OW 426
 254: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 255: LD_ADDR_EXP 4
 259: PUSH
 260: LD_INT 2
 262: PPUSH
 263: CALL_OW 426
 267: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 268: LD_ADDR_EXP 5
 272: PUSH
 273: LD_INT 3
 275: PPUSH
 276: CALL_OW 426
 280: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 281: LD_ADDR_EXP 6
 285: PUSH
 286: LD_INT 4
 288: PPUSH
 289: CALL_OW 426
 293: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 294: LD_ADDR_EXP 7
 298: PUSH
 299: LD_INT 10
 301: PPUSH
 302: CALL_OW 426
 306: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 307: LD_ADDR_EXP 8
 311: PUSH
 312: LD_INT 11
 314: PPUSH
 315: CALL_OW 426
 319: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 320: LD_ADDR_EXP 9
 324: PUSH
 325: LD_INT 12
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 333: LD_ADDR_EXP 10
 337: PUSH
 338: LD_INT 13
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 346: LD_ADDR_EXP 11
 350: PUSH
 351: LD_INT 15
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_second_oil = GetMultiplayerSetting ( 16 ) ;
 359: LD_ADDR_EXP 12
 363: PUSH
 364: LD_INT 16
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_other_nation = GetMultiplayerSetting ( 17 ) ;
 372: LD_ADDR_EXP 13
 376: PUSH
 377: LD_INT 17
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_vehicles_too = GetMultiplayerSetting ( 18 ) ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 18
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 398: LD_ADDR_EXP 15
 402: PUSH
 403: LD_INT 20
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 411: LD_ADDR_VAR 0 9
 415: PUSH
 416: LD_INT 22
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_find_people = GetMultiplayerSetting ( 23 ) ;
 424: LD_ADDR_EXP 16
 428: PUSH
 429: LD_INT 23
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_lost_people = GetMultiplayerSetting ( 24 ) ;
 437: LD_ADDR_EXP 17
 441: PUSH
 442: LD_INT 24
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// end else
 450: GO 592
// begin randomize ;
 452: CALL_OW 10
// def_base_level = 3 ;
 456: LD_ADDR_EXP 2
 460: PUSH
 461: LD_INT 3
 463: ST_TO_ADDR
// def_amount_of_people = 11 ;
 464: LD_ADDR_EXP 3
 468: PUSH
 469: LD_INT 11
 471: ST_TO_ADDR
// def_initial_level = 1 ;
 472: LD_ADDR_EXP 4
 476: PUSH
 477: LD_INT 1
 479: ST_TO_ADDR
// def_starting_resources = 2 ;
 480: LD_ADDR_EXP 5
 484: PUSH
 485: LD_INT 2
 487: ST_TO_ADDR
// def_shipments_density = 50 ;
 488: LD_ADDR_EXP 6
 492: PUSH
 493: LD_INT 50
 495: ST_TO_ADDR
// def_shared_vision = 1 ;
 496: LD_ADDR_EXP 7
 500: PUSH
 501: LD_INT 1
 503: ST_TO_ADDR
// def_morale_flags = 1 ;
 504: LD_ADDR_EXP 8
 508: PUSH
 509: LD_INT 1
 511: ST_TO_ADDR
// def_siberite_detection = 1 ;
 512: LD_ADDR_EXP 9
 516: PUSH
 517: LD_INT 1
 519: ST_TO_ADDR
// def_amount_of_apemen = 1 ;
 520: LD_ADDR_EXP 10
 524: PUSH
 525: LD_INT 1
 527: ST_TO_ADDR
// def_siberite_bomb = 2 ;
 528: LD_ADDR_EXP 11
 532: PUSH
 533: LD_INT 2
 535: ST_TO_ADDR
// def_second_oil = 1 ;
 536: LD_ADDR_EXP 12
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// def_builduptime = 1 ;
 544: LD_ADDR_EXP 15
 548: PUSH
 549: LD_INT 1
 551: ST_TO_ADDR
// def_other_nation = 1 ;
 552: LD_ADDR_EXP 13
 556: PUSH
 557: LD_INT 1
 559: ST_TO_ADDR
// def_vehicles_too = 0 ;
 560: LD_ADDR_EXP 14
 564: PUSH
 565: LD_INT 0
 567: ST_TO_ADDR
// tech_level = 4 ;
 568: LD_ADDR_VAR 0 9
 572: PUSH
 573: LD_INT 4
 575: ST_TO_ADDR
// def_find_people = 2 ;
 576: LD_ADDR_EXP 16
 580: PUSH
 581: LD_INT 2
 583: ST_TO_ADDR
// def_lost_people = 1 ;
 584: LD_ADDR_EXP 17
 588: PUSH
 589: LD_INT 1
 591: ST_TO_ADDR
// end ; if isSGUI then
 592: LD_OWVAR 83
 596: IFFALSE 604
// setMpTechs ( ) else
 598: CALL 14863 0 0
 602: GO 617
// SetMpTechLevel ( tech_level + 1 ) ;
 604: LD_VAR 0 9
 608: PUSH
 609: LD_INT 1
 611: PLUS
 612: PPUSH
 613: CALL 15010 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 617: LD_ADDR_EXP 18
 621: PUSH
 622: LD_INT 0
 624: PUSH
 625: LD_INT 1
 627: PUSH
 628: LD_INT 1
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: PUSH
 640: LD_EXP 2
 644: PUSH
 645: LD_INT 1
 647: PLUS
 648: ARRAY
 649: ST_TO_ADDR
// initial_level = [ 1 , 2 , 3 , 5 , 7 ] [ def_initial_level + 1 ] ;
 650: LD_ADDR_EXP 20
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: LD_INT 5
 666: PUSH
 667: LD_INT 7
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: LD_EXP 4
 681: PUSH
 682: LD_INT 1
 684: PLUS
 685: ARRAY
 686: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 687: LD_ADDR_EXP 22
 691: PUSH
 692: LD_INT 0
 694: PUSH
 695: LD_INT 0
 697: PUSH
 698: LD_INT 0
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 30
 708: PUSH
 709: LD_INT 0
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: LIST
 719: PUSH
 720: LD_INT 50
 722: PUSH
 723: LD_INT 20
 725: PUSH
 726: LD_INT 0
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: LIST
 733: PUSH
 734: LD_INT 80
 736: PUSH
 737: LD_INT 40
 739: PUSH
 740: LD_INT 20
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: LIST
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: LD_EXP 5
 758: PUSH
 759: LD_INT 1
 761: PLUS
 762: ARRAY
 763: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 764: LD_ADDR_EXP 19
 768: PUSH
 769: LD_EXP 3
 773: PUSH
 774: LD_INT 4
 776: PLUS
 777: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
 778: LD_ADDR_EXP 23
 782: PUSH
 783: LD_INT 150
 785: PUSH
 786: LD_EXP 6
 790: MINUS
 791: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
 792: LD_ADDR_EXP 29
 796: PUSH
 797: LD_INT 0
 799: PUSH
 800: LD_INT 3
 802: PUSH
 803: LD_INT 6
 805: PUSH
 806: LD_INT 9
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: LIST
 813: LIST
 814: PUSH
 815: LD_EXP 10
 819: PUSH
 820: LD_INT 1
 822: PLUS
 823: ARRAY
 824: ST_TO_ADDR
// if def_find_people then
 825: LD_EXP 16
 829: IFFALSE 863
// chance_find = 20 * ( ( 100 - ( ( def_find_people - 1 ) * 10 ) ) / 100 ) else
 831: LD_ADDR_EXP 28
 835: PUSH
 836: LD_INT 20
 838: PUSH
 839: LD_INT 100
 841: PUSH
 842: LD_EXP 16
 846: PUSH
 847: LD_INT 1
 849: MINUS
 850: PUSH
 851: LD_INT 10
 853: MUL
 854: MINUS
 855: PUSH
 856: LD_INT 100
 858: DIVREAL
 859: MUL
 860: ST_TO_ADDR
 861: GO 871
// chance_find = 21 ;
 863: LD_ADDR_EXP 28
 867: PUSH
 868: LD_INT 21
 870: ST_TO_ADDR
// if def_lost_people then
 871: LD_EXP 17
 875: IFFALSE 909
// chance_loose = 500 * ( ( 100 - ( ( def_find_people - 1 ) * 12 ) ) / 100 ) else
 877: LD_ADDR_EXP 27
 881: PUSH
 882: LD_INT 500
 884: PUSH
 885: LD_INT 100
 887: PUSH
 888: LD_EXP 16
 892: PUSH
 893: LD_INT 1
 895: MINUS
 896: PUSH
 897: LD_INT 12
 899: MUL
 900: MINUS
 901: PUSH
 902: LD_INT 100
 904: DIVREAL
 905: MUL
 906: ST_TO_ADDR
 907: GO 917
// chance_loose = 0 ;
 909: LD_ADDR_EXP 27
 913: PUSH
 914: LD_INT 0
 916: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
 917: LD_ADDR_EXP 25
 921: PUSH
 922: LD_INT 1
 924: NEG
 925: PUSH
 926: LD_INT 350
 928: PUSH
 929: LD_INT 700
 931: PUSH
 932: LD_INT 1400
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: PUSH
 945: LD_EXP 8
 949: PUSH
 950: LD_INT 1
 952: PLUS
 953: ARRAY
 954: ST_TO_ADDR
// battle_flags_id = [ ] ;
 955: LD_ADDR_EXP 26
 959: PUSH
 960: EMPTY
 961: ST_TO_ADDR
// if def_siberite_bomb = 0 then
 962: LD_EXP 11
 966: PUSH
 967: LD_INT 0
 969: EQUAL
 970: IFFALSE 982
// siberite_bomb_Delay = 0 else
 972: LD_ADDR_EXP 24
 976: PUSH
 977: LD_INT 0
 979: ST_TO_ADDR
 980: GO 1004
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
 982: LD_ADDR_EXP 24
 986: PUSH
 987: LD_EXP 11
 991: PUSH
 992: LD_INT 1
 994: MINUS
 995: PUSH
 996: LD_INT 21000
 998: MUL
 999: PUSH
1000: LD_INT 1
1002: PLUS
1003: ST_TO_ADDR
// end ;
1004: LD_VAR 0 1
1008: RET
// function prepare_map_coordinates ; begin
1009: LD_INT 0
1011: PPUSH
// start_def = [ [ 24 , 13 ] , [ 93 , 12 ] , [ 53 , 79 ] , [ 147 , 86 ] ] ;
1012: LD_ADDR_EXP 36
1016: PUSH
1017: LD_INT 24
1019: PUSH
1020: LD_INT 13
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: LD_INT 93
1029: PUSH
1030: LD_INT 12
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PUSH
1037: LD_INT 53
1039: PUSH
1040: LD_INT 79
1042: PUSH
1043: EMPTY
1044: LIST
1045: LIST
1046: PUSH
1047: LD_INT 147
1049: PUSH
1050: LD_INT 86
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: ST_TO_ADDR
// case def_base_level of 0 :
1063: LD_EXP 2
1067: PUSH
1068: LD_INT 0
1070: DOUBLE
1071: EQUAL
1072: IFTRUE 1076
1074: GO 1098
1076: POP
// begin buildings_def = [ [ ] , [ ] , [ ] , [ ] ] ;
1077: LD_ADDR_EXP 35
1081: PUSH
1082: EMPTY
1083: PUSH
1084: EMPTY
1085: PUSH
1086: EMPTY
1087: PUSH
1088: EMPTY
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: ST_TO_ADDR
// end ; 1 :
1096: GO 2785
1098: LD_INT 1
1100: DOUBLE
1101: EQUAL
1102: IFTRUE 1106
1104: GO 1204
1106: POP
// begin buildings_def = [ [ [ b_depot , 16 , 5 , 3 ] ] , [ [ b_depot , 89 , 5 , 3 ] ] , [ [ b_depot , 56 , 91 , 0 ] ] , [ [ b_depot , 151 , 94 , 0 ] ] ] ;
1107: LD_ADDR_EXP 35
1111: PUSH
1112: LD_INT 0
1114: PUSH
1115: LD_INT 16
1117: PUSH
1118: LD_INT 5
1120: PUSH
1121: LD_INT 3
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: PUSH
1130: EMPTY
1131: LIST
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 89
1138: PUSH
1139: LD_INT 5
1141: PUSH
1142: LD_INT 3
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: PUSH
1154: LD_INT 0
1156: PUSH
1157: LD_INT 56
1159: PUSH
1160: LD_INT 91
1162: PUSH
1163: LD_INT 0
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: PUSH
1175: LD_INT 0
1177: PUSH
1178: LD_INT 151
1180: PUSH
1181: LD_INT 94
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: EMPTY
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: ST_TO_ADDR
// end ; 2 :
1202: GO 2785
1204: LD_INT 2
1206: DOUBLE
1207: EQUAL
1208: IFTRUE 1212
1210: GO 1842
1212: POP
// begin buildings_def = [ [ [ b_depot , 16 , 5 , 3 ] , [ b_oil_mine , 9 , 4 , 0 ] , [ b_lab , 16 , 14 , 0 ] , [ b_workshop , 26 , 7 , 3 ] , [ b_armoury , 41 , 16 , 5 ] , [ b_breastwork , 24 , 21 , 0 ] , [ b_breastwork , 41 , 25 , 5 ] , [ b_oil_power , 10 , 9 , 1 ] ] , [ [ b_depot , 89 , 5 , 3 ] , [ b_oil_mine , 97 , 3 , 4 ] , [ b_lab , 100 , 10 , 4 ] , [ b_workshop , 88 , 17 , 2 ] , [ b_armoury , 87 , 25 , 2 ] , [ b_breastwork , 96 , 25 , 0 ] , [ b_breastwork , 72 , 13 , 0 ] , [ b_oil_power , 94 , 4 , 1 ] ] , [ [ b_depot , 56 , 91 , 0 ] , [ b_oil_mine , 51 , 88 , 0 ] , [ b_lab , 61 , 84 , 4 ] , [ b_workshop , 46 , 80 , 0 ] , [ b_armoury , 52 , 72 , 3 ] , [ b_breastwork , 43 , 66 , 3 ] , [ b_breastwork , 61 , 75 , 3 ] , [ b_oil_power , 61 , 90 , 3 ] ] , [ [ b_depot , 151 , 94 , 0 ] , [ b_oil_mine , 160 , 87 , 3 ] , [ b_lab , 159 , 94 , 5 ] , [ b_workshop , 146 , 80 , 3 ] , [ b_armoury , 139 , 91 , 1 ] , [ b_breastwork , 148 , 73 , 3 ] , [ b_breastwork , 140 , 71 , 2 ] , [ b_oil_power , 146 , 97 , 3 ] ] ] ;
1213: LD_ADDR_EXP 35
1217: PUSH
1218: LD_INT 0
1220: PUSH
1221: LD_INT 16
1223: PUSH
1224: LD_INT 5
1226: PUSH
1227: LD_INT 3
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 29
1238: PUSH
1239: LD_INT 9
1241: PUSH
1242: LD_INT 4
1244: PUSH
1245: LD_INT 0
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 6
1256: PUSH
1257: LD_INT 16
1259: PUSH
1260: LD_INT 14
1262: PUSH
1263: LD_INT 0
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: PUSH
1272: LD_INT 2
1274: PUSH
1275: LD_INT 26
1277: PUSH
1278: LD_INT 7
1280: PUSH
1281: LD_INT 3
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: PUSH
1290: LD_INT 4
1292: PUSH
1293: LD_INT 41
1295: PUSH
1296: LD_INT 16
1298: PUSH
1299: LD_INT 5
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 31
1310: PUSH
1311: LD_INT 24
1313: PUSH
1314: LD_INT 21
1316: PUSH
1317: LD_INT 0
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: PUSH
1326: LD_INT 31
1328: PUSH
1329: LD_INT 41
1331: PUSH
1332: LD_INT 25
1334: PUSH
1335: LD_INT 5
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: PUSH
1344: LD_INT 26
1346: PUSH
1347: LD_INT 10
1349: PUSH
1350: LD_INT 9
1352: PUSH
1353: LD_INT 1
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: LIST
1371: PUSH
1372: LD_INT 0
1374: PUSH
1375: LD_INT 89
1377: PUSH
1378: LD_INT 5
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 29
1392: PUSH
1393: LD_INT 97
1395: PUSH
1396: LD_INT 3
1398: PUSH
1399: LD_INT 4
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 6
1410: PUSH
1411: LD_INT 100
1413: PUSH
1414: LD_INT 10
1416: PUSH
1417: LD_INT 4
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: PUSH
1426: LD_INT 2
1428: PUSH
1429: LD_INT 88
1431: PUSH
1432: LD_INT 17
1434: PUSH
1435: LD_INT 2
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 4
1446: PUSH
1447: LD_INT 87
1449: PUSH
1450: LD_INT 25
1452: PUSH
1453: LD_INT 2
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 31
1464: PUSH
1465: LD_INT 96
1467: PUSH
1468: LD_INT 25
1470: PUSH
1471: LD_INT 0
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 31
1482: PUSH
1483: LD_INT 72
1485: PUSH
1486: LD_INT 13
1488: PUSH
1489: LD_INT 0
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 26
1500: PUSH
1501: LD_INT 94
1503: PUSH
1504: LD_INT 4
1506: PUSH
1507: LD_INT 1
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: LD_INT 56
1531: PUSH
1532: LD_INT 91
1534: PUSH
1535: LD_INT 0
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 29
1546: PUSH
1547: LD_INT 51
1549: PUSH
1550: LD_INT 88
1552: PUSH
1553: LD_INT 0
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 6
1564: PUSH
1565: LD_INT 61
1567: PUSH
1568: LD_INT 84
1570: PUSH
1571: LD_INT 4
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: LD_INT 46
1585: PUSH
1586: LD_INT 80
1588: PUSH
1589: LD_INT 0
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: LD_INT 4
1600: PUSH
1601: LD_INT 52
1603: PUSH
1604: LD_INT 72
1606: PUSH
1607: LD_INT 3
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 31
1618: PUSH
1619: LD_INT 43
1621: PUSH
1622: LD_INT 66
1624: PUSH
1625: LD_INT 3
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: PUSH
1634: LD_INT 31
1636: PUSH
1637: LD_INT 61
1639: PUSH
1640: LD_INT 75
1642: PUSH
1643: LD_INT 3
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: LD_INT 26
1654: PUSH
1655: LD_INT 61
1657: PUSH
1658: LD_INT 90
1660: PUSH
1661: LD_INT 3
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: PUSH
1680: LD_INT 0
1682: PUSH
1683: LD_INT 151
1685: PUSH
1686: LD_INT 94
1688: PUSH
1689: LD_INT 0
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 29
1700: PUSH
1701: LD_INT 160
1703: PUSH
1704: LD_INT 87
1706: PUSH
1707: LD_INT 3
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 6
1718: PUSH
1719: LD_INT 159
1721: PUSH
1722: LD_INT 94
1724: PUSH
1725: LD_INT 5
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 2
1736: PUSH
1737: LD_INT 146
1739: PUSH
1740: LD_INT 80
1742: PUSH
1743: LD_INT 3
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 4
1754: PUSH
1755: LD_INT 139
1757: PUSH
1758: LD_INT 91
1760: PUSH
1761: LD_INT 1
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 31
1772: PUSH
1773: LD_INT 148
1775: PUSH
1776: LD_INT 73
1778: PUSH
1779: LD_INT 3
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 31
1790: PUSH
1791: LD_INT 140
1793: PUSH
1794: LD_INT 71
1796: PUSH
1797: LD_INT 2
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 26
1808: PUSH
1809: LD_INT 146
1811: PUSH
1812: LD_INT 97
1814: PUSH
1815: LD_INT 3
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: ST_TO_ADDR
// end ; 3 :
1840: GO 2785
1842: LD_INT 3
1844: DOUBLE
1845: EQUAL
1846: IFTRUE 1850
1848: GO 2784
1850: POP
// begin buildings_def = [ [ [ b_warehouse , 16 , 5 , 3 ] , [ b_oil_mine , 9 , 4 , 4 ] , [ b_lab , 16 , 14 , 0 ] , [ b_factory , 26 , 7 , 3 ] , [ b_barracks , 41 , 16 , 5 ] , [ b_bunker , 24 , 21 , 0 ] , [ b_bunker , 40 , 24 , 5 ] , [ b_ext_gun , 26 , 3 , 3 ] , [ b_ext_track , 23 , 4 , 2 ] , [ b_oil_power , 10 , 9 , 1 ] , [ b_siberite_power , 32 , 3 , 1 ] , [ b_siberite_mine , 37 , 24 , 5 ] ] , [ [ b_warehouse , 89 , 5 , 3 ] , [ b_oil_mine , 97 , 3 , 4 ] , [ b_lab , 100 , 10 , 4 ] , [ b_factory , 88 , 17 , 2 ] , [ b_barracks , 87 , 25 , 2 ] , [ b_bunker , 100 , 31 , 5 ] , [ b_bunker , 72 , 13 , 0 ] , [ b_ext_gun , 84 , 13 , 2 ] , [ b_ext_track , 88 , 14 , 3 ] , [ b_oil_power , 94 , 4 , 1 ] , [ b_siberite_power , 66 , 3 , 1 ] , [ b_siberite_mine , 71 , 4 , 2 ] ] , [ [ b_warehouse , 56 , 91 , 0 ] , [ b_oil_mine , 51 , 88 , 0 ] , [ b_lab , 61 , 84 , 4 ] , [ b_factory , 46 , 80 , 0 ] , [ b_barracks , 50 , 64 , 3 ] , [ b_bunker , 42 , 57 , 1 ] , [ b_bunker , 60 , 72 , 3 ] , [ b_ext_gun , 46 , 84 , 0 ] , [ b_ext_track , 43 , 80 , 1 ] , [ b_oil_power , 61 , 90 , 3 ] , [ b_siberite_power , 38 , 72 , 3 ] , [ b_siberite_mine , 35 , 59 , 1 ] ] , [ [ b_warehouse , 151 , 94 , 0 ] , [ b_oil_mine , 160 , 87 , 3 ] , [ b_lab , 159 , 94 , 5 ] , [ b_factory , 146 , 80 , 3 ] , [ b_barracks , 129 , 89 , 1 ] , [ b_bunker , 133 , 63 , 3 ] , [ b_bunker , 141 , 62 , 3 ] , [ b_ext_gun , 143 , 77 , 2 ] , [ b_ext_track , 142 , 80 , 1 ] , [ b_oil_power , 146 , 97 , 3 ] , [ b_siberite_power , 155 , 80 , 3 ] , [ b_siberite_mine , 135 , 83 , 4 ] ] ] ;
1851: LD_ADDR_EXP 35
1855: PUSH
1856: LD_INT 1
1858: PUSH
1859: LD_INT 16
1861: PUSH
1862: LD_INT 5
1864: PUSH
1865: LD_INT 3
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 29
1876: PUSH
1877: LD_INT 9
1879: PUSH
1880: LD_INT 4
1882: PUSH
1883: LD_INT 4
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 6
1894: PUSH
1895: LD_INT 16
1897: PUSH
1898: LD_INT 14
1900: PUSH
1901: LD_INT 0
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: LD_INT 26
1915: PUSH
1916: LD_INT 7
1918: PUSH
1919: LD_INT 3
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 5
1930: PUSH
1931: LD_INT 41
1933: PUSH
1934: LD_INT 16
1936: PUSH
1937: LD_INT 5
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 32
1948: PUSH
1949: LD_INT 24
1951: PUSH
1952: LD_INT 21
1954: PUSH
1955: LD_INT 0
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 32
1966: PUSH
1967: LD_INT 40
1969: PUSH
1970: LD_INT 24
1972: PUSH
1973: LD_INT 5
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 17
1984: PUSH
1985: LD_INT 26
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 16
2002: PUSH
2003: LD_INT 23
2005: PUSH
2006: LD_INT 4
2008: PUSH
2009: LD_INT 2
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 26
2020: PUSH
2021: LD_INT 10
2023: PUSH
2024: LD_INT 9
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 28
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 3
2044: PUSH
2045: LD_INT 1
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 30
2056: PUSH
2057: LD_INT 37
2059: PUSH
2060: LD_INT 24
2062: PUSH
2063: LD_INT 5
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: LIST
2085: PUSH
2086: LD_INT 1
2088: PUSH
2089: LD_INT 89
2091: PUSH
2092: LD_INT 5
2094: PUSH
2095: LD_INT 3
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 29
2106: PUSH
2107: LD_INT 97
2109: PUSH
2110: LD_INT 3
2112: PUSH
2113: LD_INT 4
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 6
2124: PUSH
2125: LD_INT 100
2127: PUSH
2128: LD_INT 10
2130: PUSH
2131: LD_INT 4
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 3
2142: PUSH
2143: LD_INT 88
2145: PUSH
2146: LD_INT 17
2148: PUSH
2149: LD_INT 2
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: LD_INT 5
2160: PUSH
2161: LD_INT 87
2163: PUSH
2164: LD_INT 25
2166: PUSH
2167: LD_INT 2
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 32
2178: PUSH
2179: LD_INT 100
2181: PUSH
2182: LD_INT 31
2184: PUSH
2185: LD_INT 5
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 32
2196: PUSH
2197: LD_INT 72
2199: PUSH
2200: LD_INT 13
2202: PUSH
2203: LD_INT 0
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: PUSH
2212: LD_INT 17
2214: PUSH
2215: LD_INT 84
2217: PUSH
2218: LD_INT 13
2220: PUSH
2221: LD_INT 2
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: PUSH
2230: LD_INT 16
2232: PUSH
2233: LD_INT 88
2235: PUSH
2236: LD_INT 14
2238: PUSH
2239: LD_INT 3
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 26
2250: PUSH
2251: LD_INT 94
2253: PUSH
2254: LD_INT 4
2256: PUSH
2257: LD_INT 1
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 28
2268: PUSH
2269: LD_INT 66
2271: PUSH
2272: LD_INT 3
2274: PUSH
2275: LD_INT 1
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: LD_INT 30
2286: PUSH
2287: LD_INT 71
2289: PUSH
2290: LD_INT 4
2292: PUSH
2293: LD_INT 2
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: LD_INT 56
2321: PUSH
2322: LD_INT 91
2324: PUSH
2325: LD_INT 0
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: PUSH
2334: LD_INT 29
2336: PUSH
2337: LD_INT 51
2339: PUSH
2340: LD_INT 88
2342: PUSH
2343: LD_INT 0
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: PUSH
2352: LD_INT 6
2354: PUSH
2355: LD_INT 61
2357: PUSH
2358: LD_INT 84
2360: PUSH
2361: LD_INT 4
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: PUSH
2370: LD_INT 3
2372: PUSH
2373: LD_INT 46
2375: PUSH
2376: LD_INT 80
2378: PUSH
2379: LD_INT 0
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 5
2390: PUSH
2391: LD_INT 50
2393: PUSH
2394: LD_INT 64
2396: PUSH
2397: LD_INT 3
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 32
2408: PUSH
2409: LD_INT 42
2411: PUSH
2412: LD_INT 57
2414: PUSH
2415: LD_INT 1
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: PUSH
2424: LD_INT 32
2426: PUSH
2427: LD_INT 60
2429: PUSH
2430: LD_INT 72
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 17
2444: PUSH
2445: LD_INT 46
2447: PUSH
2448: LD_INT 84
2450: PUSH
2451: LD_INT 0
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: PUSH
2460: LD_INT 16
2462: PUSH
2463: LD_INT 43
2465: PUSH
2466: LD_INT 80
2468: PUSH
2469: LD_INT 1
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: LD_INT 26
2480: PUSH
2481: LD_INT 61
2483: PUSH
2484: LD_INT 90
2486: PUSH
2487: LD_INT 3
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 28
2498: PUSH
2499: LD_INT 38
2501: PUSH
2502: LD_INT 72
2504: PUSH
2505: LD_INT 3
2507: PUSH
2508: EMPTY
2509: LIST
2510: LIST
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 30
2516: PUSH
2517: LD_INT 35
2519: PUSH
2520: LD_INT 59
2522: PUSH
2523: LD_INT 1
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: PUSH
2546: LD_INT 1
2548: PUSH
2549: LD_INT 151
2551: PUSH
2552: LD_INT 94
2554: PUSH
2555: LD_INT 0
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 29
2566: PUSH
2567: LD_INT 160
2569: PUSH
2570: LD_INT 87
2572: PUSH
2573: LD_INT 3
2575: PUSH
2576: EMPTY
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: PUSH
2582: LD_INT 6
2584: PUSH
2585: LD_INT 159
2587: PUSH
2588: LD_INT 94
2590: PUSH
2591: LD_INT 5
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: PUSH
2600: LD_INT 3
2602: PUSH
2603: LD_INT 146
2605: PUSH
2606: LD_INT 80
2608: PUSH
2609: LD_INT 3
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: PUSH
2618: LD_INT 5
2620: PUSH
2621: LD_INT 129
2623: PUSH
2624: LD_INT 89
2626: PUSH
2627: LD_INT 1
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: PUSH
2636: LD_INT 32
2638: PUSH
2639: LD_INT 133
2641: PUSH
2642: LD_INT 63
2644: PUSH
2645: LD_INT 3
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: PUSH
2654: LD_INT 32
2656: PUSH
2657: LD_INT 141
2659: PUSH
2660: LD_INT 62
2662: PUSH
2663: LD_INT 3
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 17
2674: PUSH
2675: LD_INT 143
2677: PUSH
2678: LD_INT 77
2680: PUSH
2681: LD_INT 2
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: LIST
2688: LIST
2689: PUSH
2690: LD_INT 16
2692: PUSH
2693: LD_INT 142
2695: PUSH
2696: LD_INT 80
2698: PUSH
2699: LD_INT 1
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: PUSH
2708: LD_INT 26
2710: PUSH
2711: LD_INT 146
2713: PUSH
2714: LD_INT 97
2716: PUSH
2717: LD_INT 3
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 28
2728: PUSH
2729: LD_INT 155
2731: PUSH
2732: LD_INT 80
2734: PUSH
2735: LD_INT 3
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: PUSH
2744: LD_INT 30
2746: PUSH
2747: LD_INT 135
2749: PUSH
2750: LD_INT 83
2752: PUSH
2753: LD_INT 4
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: LIST
2766: LIST
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: ST_TO_ADDR
// end ; end ;
2782: GO 2785
2784: POP
// end ;
2785: LD_VAR 0 1
2789: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2790: LD_INT 0
2792: PPUSH
2793: PPUSH
2794: PPUSH
// Team_Game := 0 ;
2795: LD_ADDR_EXP 34
2799: PUSH
2800: LD_INT 0
2802: ST_TO_ADDR
// for i = 1 to 8 do
2803: LD_ADDR_VAR 0 2
2807: PUSH
2808: DOUBLE
2809: LD_INT 1
2811: DEC
2812: ST_TO_ADDR
2813: LD_INT 8
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2843
// Team_Game := Team_Game + Side_Teams [ i ] ;
2819: LD_ADDR_EXP 34
2823: PUSH
2824: LD_EXP 34
2828: PUSH
2829: LD_EXP 30
2833: PUSH
2834: LD_VAR 0 2
2838: ARRAY
2839: PLUS
2840: ST_TO_ADDR
2841: GO 2816
2843: POP
2844: POP
// if not Team_Game then
2845: LD_EXP 34
2849: NOT
2850: IFFALSE 2862
// Team_Game := false else
2852: LD_ADDR_EXP 34
2856: PUSH
2857: LD_INT 0
2859: ST_TO_ADDR
2860: GO 2870
// Team_Game := true ;
2862: LD_ADDR_EXP 34
2866: PUSH
2867: LD_INT 1
2869: ST_TO_ADDR
// if not Team_Game then
2870: LD_EXP 34
2874: NOT
2875: IFFALSE 2973
// begin for i = 1 to 8 do
2877: LD_ADDR_VAR 0 2
2881: PUSH
2882: DOUBLE
2883: LD_INT 1
2885: DEC
2886: ST_TO_ADDR
2887: LD_INT 8
2889: PUSH
2890: FOR_TO
2891: IFFALSE 2969
// for j = 1 to 8 do
2893: LD_ADDR_VAR 0 3
2897: PUSH
2898: DOUBLE
2899: LD_INT 1
2901: DEC
2902: ST_TO_ADDR
2903: LD_INT 8
2905: PUSH
2906: FOR_TO
2907: IFFALSE 2965
// if i <> j then
2909: LD_VAR 0 2
2913: PUSH
2914: LD_VAR 0 3
2918: NONEQUAL
2919: IFFALSE 2943
// SetAttitude ( i , j , att_neutral , true ) else
2921: LD_VAR 0 2
2925: PPUSH
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_INT 0
2933: PPUSH
2934: LD_INT 1
2936: PPUSH
2937: CALL_OW 80
2941: GO 2963
// SetAttitude ( i , j , att_friend , true ) ;
2943: LD_VAR 0 2
2947: PPUSH
2948: LD_VAR 0 3
2952: PPUSH
2953: LD_INT 1
2955: PPUSH
2956: LD_INT 1
2958: PPUSH
2959: CALL_OW 80
2963: GO 2906
2965: POP
2966: POP
2967: GO 2890
2969: POP
2970: POP
// end else
2971: GO 3148
// begin if def_shared_vision then
2973: LD_EXP 7
2977: IFFALSE 3042
// begin for i in Teams do
2979: LD_ADDR_VAR 0 2
2983: PUSH
2984: LD_EXP 31
2988: PUSH
2989: FOR_IN
2990: IFFALSE 3040
// for j = 2 to i do
2992: LD_ADDR_VAR 0 3
2996: PUSH
2997: DOUBLE
2998: LD_INT 2
3000: DEC
3001: ST_TO_ADDR
3002: LD_VAR 0 2
3006: PUSH
3007: FOR_TO
3008: IFFALSE 3036
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3010: LD_VAR 0 2
3014: PUSH
3015: LD_VAR 0 3
3019: ARRAY
3020: PPUSH
3021: LD_VAR 0 2
3025: PUSH
3026: LD_INT 1
3028: ARRAY
3029: PPUSH
3030: CALL_OW 343
3034: GO 3007
3036: POP
3037: POP
3038: GO 2989
3040: POP
3041: POP
// end ; for i = 1 to 8 do
3042: LD_ADDR_VAR 0 2
3046: PUSH
3047: DOUBLE
3048: LD_INT 1
3050: DEC
3051: ST_TO_ADDR
3052: LD_INT 8
3054: PUSH
3055: FOR_TO
3056: IFFALSE 3146
// for j = 1 to 8 do
3058: LD_ADDR_VAR 0 3
3062: PUSH
3063: DOUBLE
3064: LD_INT 1
3066: DEC
3067: ST_TO_ADDR
3068: LD_INT 8
3070: PUSH
3071: FOR_TO
3072: IFFALSE 3142
// if Side_Teams [ i ] = Side_Teams [ j ] then
3074: LD_EXP 30
3078: PUSH
3079: LD_VAR 0 2
3083: ARRAY
3084: PUSH
3085: LD_EXP 30
3089: PUSH
3090: LD_VAR 0 3
3094: ARRAY
3095: EQUAL
3096: IFFALSE 3120
// SetAttitude ( i , j , att_friend , true ) else
3098: LD_VAR 0 2
3102: PPUSH
3103: LD_VAR 0 3
3107: PPUSH
3108: LD_INT 1
3110: PPUSH
3111: LD_INT 1
3113: PPUSH
3114: CALL_OW 80
3118: GO 3140
// SetAttitude ( i , j , att_enemy , true ) ;
3120: LD_VAR 0 2
3124: PPUSH
3125: LD_VAR 0 3
3129: PPUSH
3130: LD_INT 2
3132: PPUSH
3133: LD_INT 1
3135: PPUSH
3136: CALL_OW 80
3140: GO 3071
3142: POP
3143: POP
3144: GO 3055
3146: POP
3147: POP
// end ; end ;
3148: LD_VAR 0 1
3152: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
3153: LD_INT 0
3155: PPUSH
3156: PPUSH
3157: PPUSH
3158: PPUSH
// result := [ ] ;
3159: LD_ADDR_VAR 0 8
3163: PUSH
3164: EMPTY
3165: ST_TO_ADDR
// for i := 1 to count do
3166: LD_ADDR_VAR 0 9
3170: PUSH
3171: DOUBLE
3172: LD_INT 1
3174: DEC
3175: ST_TO_ADDR
3176: LD_VAR 0 2
3180: PUSH
3181: FOR_TO
3182: IFFALSE 3576
// begin uc_direction := Rand ( 0 , 5 ) ;
3184: LD_ADDR_OWVAR 24
3188: PUSH
3189: LD_INT 0
3191: PPUSH
3192: LD_INT 5
3194: PPUSH
3195: CALL_OW 12
3199: ST_TO_ADDR
// if commander then
3200: LD_FROM_VAR 0 7
3204: IFFALSE 3313
// begin hc_name := mp_sides_players_names [ side ] ;
3206: LD_ADDR_OWVAR 26
3210: PUSH
3211: LD_OWVAR 19
3215: PUSH
3216: LD_VAR 0 1
3220: ARRAY
3221: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
3222: LD_INT 1
3224: PPUSH
3225: LD_INT 2
3227: PPUSH
3228: CALL_OW 12
3232: PPUSH
3233: LD_VAR 0 3
3237: PPUSH
3238: LD_EXP 20
3242: PUSH
3243: LD_INT 2
3245: PLUS
3246: PPUSH
3247: CALL_OW 380
// hc_importance := 105 ;
3251: LD_ADDR_OWVAR 32
3255: PUSH
3256: LD_INT 105
3258: ST_TO_ADDR
// commander := false ;
3259: LD_VAR 0 7
3263: PUSH
3264: LD_INT 0
3266: ST_TO_ADDR
// if Multiplayer then
3267: LD_OWVAR 4
3271: IFFALSE 3311
// begin hc_gallery := MULTIAVATARS ;
3273: LD_ADDR_OWVAR 33
3277: PUSH
3278: LD_STRING MULTIAVATARS
3280: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
3281: LD_ADDR_OWVAR 34
3285: PUSH
3286: LD_VAR 0 1
3290: PPUSH
3291: CALL_OW 525
3295: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
3296: LD_ADDR_OWVAR 27
3300: PUSH
3301: LD_VAR 0 1
3305: PPUSH
3306: CALL_OW 526
3310: ST_TO_ADDR
// end ; end else
3311: GO 3376
// begin hc_name :=  ;
3313: LD_ADDR_OWVAR 26
3317: PUSH
3318: LD_STRING 
3320: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
3321: LD_INT 1
3323: PPUSH
3324: LD_INT 2
3326: PPUSH
3327: CALL_OW 12
3331: PPUSH
3332: LD_VAR 0 3
3336: PPUSH
3337: LD_EXP 20
3341: PPUSH
3342: CALL_OW 380
// hc_importance := 0 ;
3346: LD_ADDR_OWVAR 32
3350: PUSH
3351: LD_INT 0
3353: ST_TO_ADDR
// if Multiplayer then
3354: LD_OWVAR 4
3358: IFFALSE 3376
// begin hc_gallery :=  ;
3360: LD_ADDR_OWVAR 33
3364: PUSH
3365: LD_STRING 
3367: ST_TO_ADDR
// hc_face_number := 0 ;
3368: LD_ADDR_OWVAR 34
3372: PUSH
3373: LD_INT 0
3375: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3376: LD_ADDR_VAR 0 11
3380: PUSH
3381: CALL_OW 44
3385: ST_TO_ADDR
// if global_defined then
3386: LD_LOC 2
3390: IFFALSE 3528
// begin j := i ;
3392: LD_ADDR_VAR 0 10
3396: PUSH
3397: LD_VAR 0 9
3401: ST_TO_ADDR
// if cl = class_soldier then
3402: LD_VAR 0 3
3406: PUSH
3407: LD_INT 1
3409: EQUAL
3410: IFFALSE 3428
// j := i + soldiers_created ;
3412: LD_ADDR_VAR 0 10
3416: PUSH
3417: LD_VAR 0 9
3421: PUSH
3422: LD_LOC 3
3426: PLUS
3427: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3428: LD_LOC 1
3432: PUSH
3433: LD_VAR 0 3
3437: ARRAY
3438: PUSH
3439: LD_VAR 0 10
3443: ARRAY
3444: PPUSH
3445: LD_VAR 0 11
3449: PPUSH
3450: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3454: LD_VAR 0 11
3458: PPUSH
3459: LD_INT 2
3461: PPUSH
3462: LD_LOC 1
3466: PUSH
3467: LD_VAR 0 3
3471: ARRAY
3472: PUSH
3473: LD_VAR 0 10
3477: ARRAY
3478: PPUSH
3479: LD_INT 2
3481: PPUSH
3482: CALL_OW 260
3486: PPUSH
3487: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3491: LD_VAR 0 11
3495: PPUSH
3496: LD_INT 1
3498: PPUSH
3499: LD_LOC 1
3503: PUSH
3504: LD_VAR 0 3
3508: ARRAY
3509: PUSH
3510: LD_VAR 0 10
3514: ARRAY
3515: PPUSH
3516: LD_INT 1
3518: PPUSH
3519: CALL_OW 260
3523: PPUSH
3524: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
3528: LD_VAR 0 11
3532: PPUSH
3533: LD_VAR 0 4
3537: PPUSH
3538: LD_VAR 0 5
3542: PPUSH
3543: LD_VAR 0 6
3547: PPUSH
3548: LD_INT 0
3550: PPUSH
3551: CALL_OW 50
// result := result ^ [ un ] ;
3555: LD_ADDR_VAR 0 8
3559: PUSH
3560: LD_VAR 0 8
3564: PUSH
3565: LD_VAR 0 11
3569: PUSH
3570: EMPTY
3571: LIST
3572: ADD
3573: ST_TO_ADDR
// end ;
3574: GO 3181
3576: POP
3577: POP
// if not global_defined then
3578: LD_LOC 2
3582: NOT
3583: IFFALSE 3645
// if cl = class_soldier and global_units then
3585: LD_VAR 0 3
3589: PUSH
3590: LD_INT 1
3592: EQUAL
3593: PUSH
3594: LD_LOC 1
3598: AND
3599: IFFALSE 3626
// global_units := [ global_units [ 1 ] ^ result ] else
3601: LD_ADDR_LOC 1
3605: PUSH
3606: LD_LOC 1
3610: PUSH
3611: LD_INT 1
3613: ARRAY
3614: PUSH
3615: LD_VAR 0 8
3619: ADD
3620: PUSH
3621: EMPTY
3622: LIST
3623: ST_TO_ADDR
3624: GO 3645
// global_units := global_units ^ [ result ] end ;
3626: LD_ADDR_LOC 1
3630: PUSH
3631: LD_LOC 1
3635: PUSH
3636: LD_VAR 0 8
3640: PUSH
3641: EMPTY
3642: LIST
3643: ADD
3644: ST_TO_ADDR
3645: LD_VAR 0 8
3649: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3650: LD_INT 0
3652: PPUSH
3653: PPUSH
3654: PPUSH
3655: PPUSH
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
3663: PPUSH
3664: PPUSH
// pos := Side_Positions [ side ] ;
3665: LD_ADDR_VAR 0 3
3669: PUSH
3670: LD_EXP 32
3674: PUSH
3675: LD_VAR 0 1
3679: ARRAY
3680: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3681: LD_ADDR_OWVAR 21
3685: PUSH
3686: LD_EXP 33
3690: PUSH
3691: LD_VAR 0 1
3695: ARRAY
3696: ST_TO_ADDR
// uc_side := side ;
3697: LD_ADDR_OWVAR 20
3701: PUSH
3702: LD_VAR 0 1
3706: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
3707: LD_ADDR_OWVAR 44
3711: PUSH
3712: LD_INT 9
3714: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3715: LD_ADDR_OWVAR 45
3719: PUSH
3720: LD_INT 9
3722: ST_TO_ADDR
// for i in buildings_def [ pos ] do
3723: LD_ADDR_VAR 0 6
3727: PUSH
3728: LD_EXP 35
3732: PUSH
3733: LD_VAR 0 3
3737: ARRAY
3738: PUSH
3739: FOR_IN
3740: IFFALSE 3837
// begin bc_type = i [ 1 ] ;
3742: LD_ADDR_OWVAR 42
3746: PUSH
3747: LD_VAR 0 6
3751: PUSH
3752: LD_INT 1
3754: ARRAY
3755: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3756: LD_VAR 0 6
3760: PUSH
3761: LD_INT 2
3763: ARRAY
3764: PPUSH
3765: LD_VAR 0 6
3769: PUSH
3770: LD_INT 3
3772: ARRAY
3773: PPUSH
3774: LD_VAR 0 6
3778: PUSH
3779: LD_INT 4
3781: ARRAY
3782: PPUSH
3783: CALL_OW 47
// x := buildings_def [ pos ] [ 1 ] [ 2 ] ;
3787: LD_ADDR_VAR 0 4
3791: PUSH
3792: LD_EXP 35
3796: PUSH
3797: LD_VAR 0 3
3801: ARRAY
3802: PUSH
3803: LD_INT 1
3805: ARRAY
3806: PUSH
3807: LD_INT 2
3809: ARRAY
3810: ST_TO_ADDR
// y := buildings_def [ pos ] [ 1 ] [ 2 ] ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_EXP 35
3820: PUSH
3821: LD_VAR 0 3
3825: ARRAY
3826: PUSH
3827: LD_INT 1
3829: ARRAY
3830: PUSH
3831: LD_INT 2
3833: ARRAY
3834: ST_TO_ADDR
// end ;
3835: GO 3739
3837: POP
3838: POP
// if is_depot then
3839: LD_EXP 18
3843: IFFALSE 3993
// begin dep = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3845: LD_ADDR_VAR 0 10
3849: PUSH
3850: LD_INT 22
3852: PUSH
3853: LD_VAR 0 1
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PUSH
3862: LD_INT 2
3864: PUSH
3865: LD_INT 30
3867: PUSH
3868: LD_INT 0
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: PUSH
3875: LD_INT 30
3877: PUSH
3878: LD_INT 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: EMPTY
3886: LIST
3887: LIST
3888: LIST
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PPUSH
3894: CALL_OW 69
3898: ST_TO_ADDR
// dep = dep [ 1 ] ;
3899: LD_ADDR_VAR 0 10
3903: PUSH
3904: LD_VAR 0 10
3908: PUSH
3909: LD_INT 1
3911: ARRAY
3912: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3913: LD_VAR 0 10
3917: PPUSH
3918: CALL_OW 274
3922: PPUSH
3923: LD_INT 1
3925: PPUSH
3926: LD_EXP 22
3930: PUSH
3931: LD_INT 1
3933: ARRAY
3934: PPUSH
3935: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3939: LD_VAR 0 10
3943: PPUSH
3944: CALL_OW 274
3948: PPUSH
3949: LD_INT 2
3951: PPUSH
3952: LD_EXP 22
3956: PUSH
3957: LD_INT 2
3959: ARRAY
3960: PPUSH
3961: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3965: LD_VAR 0 10
3969: PPUSH
3970: CALL_OW 274
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: LD_EXP 22
3982: PUSH
3983: LD_INT 3
3985: ARRAY
3986: PPUSH
3987: CALL_OW 277
// end else
3991: GO 4137
// begin for i := 1 to 3 do
3993: LD_ADDR_VAR 0 6
3997: PUSH
3998: DOUBLE
3999: LD_INT 1
4001: DEC
4002: ST_TO_ADDR
4003: LD_INT 3
4005: PUSH
4006: FOR_TO
4007: IFFALSE 4135
// begin r := starting_resources [ i ] ;
4009: LD_ADDR_VAR 0 7
4013: PUSH
4014: LD_EXP 22
4018: PUSH
4019: LD_VAR 0 6
4023: ARRAY
4024: ST_TO_ADDR
// while r >= 10 do
4025: LD_VAR 0 7
4029: PUSH
4030: LD_INT 10
4032: GREATEREQUAL
4033: IFFALSE 4133
// if r > 50 then
4035: LD_VAR 0 7
4039: PUSH
4040: LD_INT 50
4042: GREATER
4043: IFFALSE 4089
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4045: LD_VAR 0 6
4049: PPUSH
4050: LD_INT 5
4052: PPUSH
4053: LD_VAR 0 4
4057: PPUSH
4058: LD_VAR 0 5
4062: PPUSH
4063: LD_INT 4
4065: PPUSH
4066: LD_INT 0
4068: PPUSH
4069: CALL_OW 60
// r := r - 50 ;
4073: LD_ADDR_VAR 0 7
4077: PUSH
4078: LD_VAR 0 7
4082: PUSH
4083: LD_INT 50
4085: MINUS
4086: ST_TO_ADDR
// end else
4087: GO 4131
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4089: LD_VAR 0 6
4093: PPUSH
4094: LD_VAR 0 7
4098: PUSH
4099: LD_INT 10
4101: DIV
4102: PPUSH
4103: LD_VAR 0 4
4107: PPUSH
4108: LD_VAR 0 5
4112: PPUSH
4113: LD_INT 4
4115: PPUSH
4116: LD_INT 0
4118: PPUSH
4119: CALL_OW 60
// r := 0 ;
4123: LD_ADDR_VAR 0 7
4127: PUSH
4128: LD_INT 0
4130: ST_TO_ADDR
// end ;
4131: GO 4025
// end ;
4133: GO 4006
4135: POP
4136: POP
// end ; x := start_def [ pos ] [ 1 ] ;
4137: LD_ADDR_VAR 0 4
4141: PUSH
4142: LD_EXP 36
4146: PUSH
4147: LD_VAR 0 3
4151: ARRAY
4152: PUSH
4153: LD_INT 1
4155: ARRAY
4156: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4157: LD_ADDR_VAR 0 5
4161: PUSH
4162: LD_EXP 36
4166: PUSH
4167: LD_VAR 0 3
4171: ARRAY
4172: PUSH
4173: LD_INT 2
4175: ARRAY
4176: ST_TO_ADDR
// if def_morale_flags then
4177: LD_EXP 8
4181: IFFALSE 4260
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4183: LD_ADDR_EXP 26
4187: PUSH
4188: LD_EXP 26
4192: PUSH
4193: LD_VAR 0 1
4197: PPUSH
4198: LD_VAR 0 4
4202: PPUSH
4203: LD_VAR 0 5
4207: PPUSH
4208: LD_INT 1
4210: PUSH
4211: LD_INT 100
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: PUSH
4218: LD_INT 2
4220: PUSH
4221: LD_INT 50
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PUSH
4228: LD_INT 3
4230: PUSH
4231: LD_INT 20
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 20
4240: PUSH
4241: LD_INT 100
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 418
4258: ADD
4259: ST_TO_ADDR
// neng := number_of_people ;
4260: LD_ADDR_VAR 0 11
4264: PUSH
4265: LD_EXP 19
4269: ST_TO_ADDR
// nsol := 2 ;
4270: LD_ADDR_VAR 0 14
4274: PUSH
4275: LD_INT 2
4277: ST_TO_ADDR
// if nsol < neng div 4 then
4278: LD_VAR 0 14
4282: PUSH
4283: LD_VAR 0 11
4287: PUSH
4288: LD_INT 4
4290: DIV
4291: LESS
4292: IFFALSE 4308
// nsol := neng div 4 ;
4294: LD_ADDR_VAR 0 14
4298: PUSH
4299: LD_VAR 0 11
4303: PUSH
4304: LD_INT 4
4306: DIV
4307: ST_TO_ADDR
// neng := neng - nsol ;
4308: LD_ADDR_VAR 0 11
4312: PUSH
4313: LD_VAR 0 11
4317: PUSH
4318: LD_VAR 0 14
4322: MINUS
4323: ST_TO_ADDR
// nsci := neng div 3 ;
4324: LD_ADDR_VAR 0 12
4328: PUSH
4329: LD_VAR 0 11
4333: PUSH
4334: LD_INT 3
4336: DIV
4337: ST_TO_ADDR
// if nsci < 1 then
4338: LD_VAR 0 12
4342: PUSH
4343: LD_INT 1
4345: LESS
4346: IFFALSE 4356
// nsci := 1 ;
4348: LD_ADDR_VAR 0 12
4352: PUSH
4353: LD_INT 1
4355: ST_TO_ADDR
// neng := neng - nsci ;
4356: LD_ADDR_VAR 0 11
4360: PUSH
4361: LD_VAR 0 11
4365: PUSH
4366: LD_VAR 0 12
4370: MINUS
4371: ST_TO_ADDR
// nmech := neng div 2 ;
4372: LD_ADDR_VAR 0 13
4376: PUSH
4377: LD_VAR 0 11
4381: PUSH
4382: LD_INT 2
4384: DIV
4385: ST_TO_ADDR
// neng := neng - nmech ;
4386: LD_ADDR_VAR 0 11
4390: PUSH
4391: LD_VAR 0 11
4395: PUSH
4396: LD_VAR 0 13
4400: MINUS
4401: ST_TO_ADDR
// if neng < 1 then
4402: LD_VAR 0 11
4406: PUSH
4407: LD_INT 1
4409: LESS
4410: IFFALSE 4420
// neng := 1 ;
4412: LD_ADDR_VAR 0 11
4416: PUSH
4417: LD_INT 1
4419: ST_TO_ADDR
// commander := true ;
4420: LD_ADDR_EXP 37
4424: PUSH
4425: LD_INT 1
4427: ST_TO_ADDR
// soldiers_created := 0 ;
4428: LD_ADDR_LOC 3
4432: PUSH
4433: LD_INT 0
4435: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4436: LD_ADDR_VAR 0 4
4440: PUSH
4441: LD_EXP 36
4445: PUSH
4446: LD_VAR 0 3
4450: ARRAY
4451: PUSH
4452: LD_INT 1
4454: ARRAY
4455: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4456: LD_ADDR_VAR 0 5
4460: PUSH
4461: LD_EXP 36
4465: PUSH
4466: LD_VAR 0 3
4470: ARRAY
4471: PUSH
4472: LD_INT 2
4474: ARRAY
4475: ST_TO_ADDR
// prepare_people ( side , nsol , class_soldier , x , y , 5 , commander ) ;
4476: LD_VAR 0 1
4480: PPUSH
4481: LD_VAR 0 14
4485: PPUSH
4486: LD_INT 1
4488: PPUSH
4489: LD_VAR 0 4
4493: PPUSH
4494: LD_VAR 0 5
4498: PPUSH
4499: LD_INT 5
4501: PPUSH
4502: LD_ADDR_EXP 37
4506: PPUSH
4507: CALL 3153 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_VAR 0 11
4520: PPUSH
4521: LD_INT 2
4523: PPUSH
4524: LD_VAR 0 4
4528: PPUSH
4529: LD_VAR 0 5
4533: PPUSH
4534: LD_INT 5
4536: PPUSH
4537: LD_ADDR_EXP 37
4541: PPUSH
4542: CALL 3153 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
4546: LD_VAR 0 1
4550: PPUSH
4551: LD_VAR 0 13
4555: PPUSH
4556: LD_INT 3
4558: PPUSH
4559: LD_VAR 0 4
4563: PPUSH
4564: LD_VAR 0 5
4568: PPUSH
4569: LD_INT 5
4571: PPUSH
4572: LD_ADDR_EXP 37
4576: PPUSH
4577: CALL 3153 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
4581: LD_VAR 0 1
4585: PPUSH
4586: LD_VAR 0 12
4590: PPUSH
4591: LD_INT 4
4593: PPUSH
4594: LD_VAR 0 4
4598: PPUSH
4599: LD_VAR 0 5
4603: PPUSH
4604: LD_INT 5
4606: PPUSH
4607: LD_ADDR_EXP 37
4611: PPUSH
4612: CALL 3153 0 7
// if not global_defined then
4616: LD_LOC 2
4620: NOT
4621: IFFALSE 4631
// global_defined := true ;
4623: LD_ADDR_LOC 2
4627: PUSH
4628: LD_INT 1
4630: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4631: LD_EXP 9
4635: PUSH
4636: LD_INT 20
4638: PPUSH
4639: LD_VAR 0 1
4643: PPUSH
4644: CALL_OW 321
4648: PUSH
4649: LD_INT 1
4651: EQUAL
4652: AND
4653: IFFALSE 4670
// SetTech ( tech_SibDet , side , state_researched ) ;
4655: LD_INT 20
4657: PPUSH
4658: LD_VAR 0 1
4662: PPUSH
4663: LD_INT 2
4665: PPUSH
4666: CALL_OW 322
// if def_siberite_bomb = 1 then
4670: LD_EXP 11
4674: PUSH
4675: LD_INT 1
4677: EQUAL
4678: IFFALSE 4712
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4680: LD_INT 25
4682: PPUSH
4683: LD_VAR 0 1
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4695: LD_INT 73
4697: PPUSH
4698: LD_VAR 0 1
4702: PPUSH
4703: LD_INT 1
4705: PPUSH
4706: CALL_OW 322
// end else
4710: GO 4742
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4712: LD_INT 25
4714: PPUSH
4715: LD_VAR 0 1
4719: PPUSH
4720: LD_INT 0
4722: PPUSH
4723: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4727: LD_INT 73
4729: PPUSH
4730: LD_VAR 0 1
4734: PPUSH
4735: LD_INT 0
4737: PPUSH
4738: CALL_OW 322
// end ; end ;
4742: LD_VAR 0 2
4746: RET
// every 0 0$1 do
4747: GO 4749
4749: DISABLE
// if ( def_siberite_bomb > 1 ) then
4750: LD_EXP 11
4754: PUSH
4755: LD_INT 1
4757: GREATER
4758: IFFALSE 4773
// begin wait ( siberite_bomb_Delay ) ;
4760: LD_EXP 24
4764: PPUSH
4765: CALL_OW 67
// EnableSibFiss ;
4769: CALL 4774 0 0
// end ;
4773: END
// function EnableSibFiss ; var i ; begin
4774: LD_INT 0
4776: PPUSH
4777: PPUSH
// for i := 1 to 8 do
4778: LD_ADDR_VAR 0 2
4782: PUSH
4783: DOUBLE
4784: LD_INT 1
4786: DEC
4787: ST_TO_ADDR
4788: LD_INT 8
4790: PUSH
4791: FOR_TO
4792: IFFALSE 4838
// if Side_Positions [ i ] then
4794: LD_EXP 32
4798: PUSH
4799: LD_VAR 0 2
4803: ARRAY
4804: IFFALSE 4836
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4806: LD_INT 25
4808: PPUSH
4809: LD_VAR 0 2
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4821: LD_INT 73
4823: PPUSH
4824: LD_VAR 0 2
4828: PPUSH
4829: LD_INT 1
4831: PPUSH
4832: CALL_OW 322
// end ;
4836: GO 4791
4838: POP
4839: POP
// end ;
4840: LD_VAR 0 1
4844: RET
// function prepare_sides ; var i ; begin
4845: LD_INT 0
4847: PPUSH
4848: PPUSH
// global_units := [ ] ;
4849: LD_ADDR_LOC 1
4853: PUSH
4854: EMPTY
4855: ST_TO_ADDR
// global_defined := false ;
4856: LD_ADDR_LOC 2
4860: PUSH
4861: LD_INT 0
4863: ST_TO_ADDR
// for i := 1 to 8 do
4864: LD_ADDR_VAR 0 2
4868: PUSH
4869: DOUBLE
4870: LD_INT 1
4872: DEC
4873: ST_TO_ADDR
4874: LD_INT 8
4876: PUSH
4877: FOR_TO
4878: IFFALSE 5155
// if Side_Positions [ i ] then
4880: LD_EXP 32
4884: PUSH
4885: LD_VAR 0 2
4889: ARRAY
4890: IFFALSE 5153
// begin if def_base_level > 1 then
4892: LD_EXP 2
4896: PUSH
4897: LD_INT 1
4899: GREATER
4900: IFFALSE 5018
// case Side_Positions [ i ] of 1 :
4902: LD_EXP 32
4906: PUSH
4907: LD_VAR 0 2
4911: ARRAY
4912: PUSH
4913: LD_INT 1
4915: DOUBLE
4916: EQUAL
4917: IFTRUE 4921
4919: GO 4939
4921: POP
// SetResourceVisibility ( 9 , 4 , i ) ; 2 :
4922: LD_INT 9
4924: PPUSH
4925: LD_INT 4
4927: PPUSH
4928: LD_VAR 0 2
4932: PPUSH
4933: CALL_OW 441
4937: GO 5018
4939: LD_INT 2
4941: DOUBLE
4942: EQUAL
4943: IFTRUE 4947
4945: GO 4965
4947: POP
// SetResourceVisibility ( 97 , 3 , i ) ; 3 :
4948: LD_INT 97
4950: PPUSH
4951: LD_INT 3
4953: PPUSH
4954: LD_VAR 0 2
4958: PPUSH
4959: CALL_OW 441
4963: GO 5018
4965: LD_INT 3
4967: DOUBLE
4968: EQUAL
4969: IFTRUE 4973
4971: GO 4991
4973: POP
// SetResourceVisibility ( 51 , 88 , i ) ; 4 :
4974: LD_INT 51
4976: PPUSH
4977: LD_INT 88
4979: PPUSH
4980: LD_VAR 0 2
4984: PPUSH
4985: CALL_OW 441
4989: GO 5018
4991: LD_INT 4
4993: DOUBLE
4994: EQUAL
4995: IFTRUE 4999
4997: GO 5017
4999: POP
// SetResourceVisibility ( 160 , 87 , i ) ; end ;
5000: LD_INT 160
5002: PPUSH
5003: LD_INT 87
5005: PPUSH
5006: LD_VAR 0 2
5010: PPUSH
5011: CALL_OW 441
5015: GO 5018
5017: POP
// if def_base_level > 2 then
5018: LD_EXP 2
5022: PUSH
5023: LD_INT 2
5025: GREATER
5026: IFFALSE 5144
// case Side_Positions [ i ] of 1 :
5028: LD_EXP 32
5032: PUSH
5033: LD_VAR 0 2
5037: ARRAY
5038: PUSH
5039: LD_INT 1
5041: DOUBLE
5042: EQUAL
5043: IFTRUE 5047
5045: GO 5065
5047: POP
// SetResourceVisibility ( 37 , 24 , i ) ; 2 :
5048: LD_INT 37
5050: PPUSH
5051: LD_INT 24
5053: PPUSH
5054: LD_VAR 0 2
5058: PPUSH
5059: CALL_OW 441
5063: GO 5144
5065: LD_INT 2
5067: DOUBLE
5068: EQUAL
5069: IFTRUE 5073
5071: GO 5091
5073: POP
// SetResourceVisibility ( 71 , 4 , i ) ; 3 :
5074: LD_INT 71
5076: PPUSH
5077: LD_INT 4
5079: PPUSH
5080: LD_VAR 0 2
5084: PPUSH
5085: CALL_OW 441
5089: GO 5144
5091: LD_INT 3
5093: DOUBLE
5094: EQUAL
5095: IFTRUE 5099
5097: GO 5117
5099: POP
// SetResourceVisibility ( 35 , 59 , i ) ; 4 :
5100: LD_INT 35
5102: PPUSH
5103: LD_INT 59
5105: PPUSH
5106: LD_VAR 0 2
5110: PPUSH
5111: CALL_OW 441
5115: GO 5144
5117: LD_INT 4
5119: DOUBLE
5120: EQUAL
5121: IFTRUE 5125
5123: GO 5143
5125: POP
// SetResourceVisibility ( 135 , 83 , i ) ; end ;
5126: LD_INT 135
5128: PPUSH
5129: LD_INT 83
5131: PPUSH
5132: LD_VAR 0 2
5136: PPUSH
5137: CALL_OW 441
5141: GO 5144
5143: POP
// prepare_side ( i ) ;
5144: LD_VAR 0 2
5148: PPUSH
5149: CALL 3650 0 1
// end ;
5153: GO 4877
5155: POP
5156: POP
// end ;
5157: LD_VAR 0 1
5161: RET
// function second_oil ; var i ; begin
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
// if def_second_oil then
5166: LD_EXP 12
5170: IFFALSE 5294
// for i := 1 to 4 do
5172: LD_ADDR_VAR 0 2
5176: PUSH
5177: DOUBLE
5178: LD_INT 1
5180: DEC
5181: ST_TO_ADDR
5182: LD_INT 4
5184: PUSH
5185: FOR_TO
5186: IFFALSE 5292
// case i of 1 :
5188: LD_VAR 0 2
5192: PUSH
5193: LD_INT 1
5195: DOUBLE
5196: EQUAL
5197: IFTRUE 5201
5199: GO 5217
5201: POP
// CreateDepositXY ( 37 , 9 , mat_oil ) ; 2 :
5202: LD_INT 37
5204: PPUSH
5205: LD_INT 9
5207: PPUSH
5208: LD_INT 2
5210: PPUSH
5211: CALL_OW 62
5215: GO 5290
5217: LD_INT 2
5219: DOUBLE
5220: EQUAL
5221: IFTRUE 5225
5223: GO 5241
5225: POP
// CreateDepositXY ( 104 , 36 , mat_oil ) ; 3 :
5226: LD_INT 104
5228: PPUSH
5229: LD_INT 36
5231: PPUSH
5232: LD_INT 2
5234: PPUSH
5235: CALL_OW 62
5239: GO 5290
5241: LD_INT 3
5243: DOUBLE
5244: EQUAL
5245: IFTRUE 5249
5247: GO 5265
5249: POP
// CreateDepositXY ( 70 , 75 , mat_oil ) ; 4 :
5250: LD_INT 70
5252: PPUSH
5253: LD_INT 75
5255: PPUSH
5256: LD_INT 2
5258: PPUSH
5259: CALL_OW 62
5263: GO 5290
5265: LD_INT 4
5267: DOUBLE
5268: EQUAL
5269: IFTRUE 5273
5271: GO 5289
5273: POP
// CreateDepositXY ( 145 , 67 , mat_oil ) ; end ;
5274: LD_INT 145
5276: PPUSH
5277: LD_INT 67
5279: PPUSH
5280: LD_INT 2
5282: PPUSH
5283: CALL_OW 62
5287: GO 5290
5289: POP
5290: GO 5185
5292: POP
5293: POP
// end ;
5294: LD_VAR 0 1
5298: RET
// starting begin disable ( 98 ) ;
5299: LD_INT 98
5301: DISABLE_MARKED
// disable ( 99 ) ;
5302: LD_INT 99
5304: DISABLE_MARKED
// disable ( 400 ) ;
5305: LD_INT 400
5307: DISABLE_MARKED
// disable ( 401 ) ;
5308: LD_INT 401
5310: DISABLE_MARKED
// mp_selectmsg := true ;
5311: LD_ADDR_OWVAR 13
5315: PUSH
5316: LD_INT 1
5318: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5319: CALL 0 0 0
// prepare_map_coordinates ;
5323: CALL 1009 0 0
// set_shared_visions_and_alliances ;
5327: CALL 2790 0 0
// prepare_sides ;
5331: CALL 4845 0 0
// Init_Win_Condition ;
5335: CALL 12680 0 0
// ShowTimer ;
5339: CALL 13474 0 0
// AnimateTrees ( true ) ;
5343: LD_INT 1
5345: PPUSH
5346: CALL_OW 573
// second_oil ;
5350: CALL 5162 0 0
// vygeneruj_lidi_na_ztraceni ;
5354: CALL 6388 0 0
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5358: LD_EXP 36
5362: PUSH
5363: LD_EXP 32
5367: PUSH
5368: LD_OWVAR 2
5372: ARRAY
5373: ARRAY
5374: PUSH
5375: LD_INT 1
5377: ARRAY
5378: PPUSH
5379: LD_EXP 36
5383: PUSH
5384: LD_EXP 32
5388: PUSH
5389: LD_OWVAR 2
5393: ARRAY
5394: ARRAY
5395: PUSH
5396: LD_INT 2
5398: ARRAY
5399: PPUSH
5400: CALL_OW 86
// BuildUpAreas := [ Base1 , Base2 , Base3 , Base4 ] ;
5404: LD_ADDR_EXP 41
5408: PUSH
5409: LD_INT 27
5411: PUSH
5412: LD_INT 28
5414: PUSH
5415: LD_INT 29
5417: PUSH
5418: LD_INT 30
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: ST_TO_ADDR
// BeginBuildUp ;
5427: CALL 19587 0 0
// end ; end_of_file
5431: END
// every 0 0$1 + 0 0$0.6 do var i , Amount ;
5432: GO 5434
5434: DISABLE
5435: LD_INT 0
5437: PPUSH
5438: PPUSH
// begin case tick of 1 .. 1 1$0 :
5439: LD_OWVAR 1
5443: PUSH
5444: LD_INT 1
5446: DOUBLE
5447: GREATEREQUAL
5448: IFFALSE 5456
5450: LD_INT 2100
5452: DOUBLE
5453: LESSEQUAL
5454: IFTRUE 5458
5456: GO 5486
5458: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5459: LD_EXP 23
5463: PUSH
5464: LD_INT 100
5466: DIVREAL
5467: PUSH
5468: LD_INT 525
5470: PPUSH
5471: LD_INT 1050
5473: PPUSH
5474: CALL_OW 12
5478: MUL
5479: PPUSH
5480: CALL_OW 67
5484: GO 5788
5486: LD_INT 2100
5488: PUSH
5489: LD_INT 1
5491: PLUS
5492: DOUBLE
5493: GREATEREQUAL
5494: IFFALSE 5502
5496: LD_INT 10500
5498: DOUBLE
5499: LESSEQUAL
5500: IFTRUE 5504
5502: GO 5532
5504: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5505: LD_EXP 23
5509: PUSH
5510: LD_INT 100
5512: DIVREAL
5513: PUSH
5514: LD_INT 1050
5516: PPUSH
5517: LD_INT 1750
5519: PPUSH
5520: CALL_OW 12
5524: MUL
5525: PPUSH
5526: CALL_OW 67
5530: GO 5788
5532: LD_INT 10500
5534: PUSH
5535: LD_INT 1
5537: PLUS
5538: DOUBLE
5539: GREATEREQUAL
5540: IFFALSE 5548
5542: LD_INT 21000
5544: DOUBLE
5545: LESSEQUAL
5546: IFTRUE 5550
5548: GO 5578
5550: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5551: LD_EXP 23
5555: PUSH
5556: LD_INT 100
5558: DIVREAL
5559: PUSH
5560: LD_INT 1750
5562: PPUSH
5563: LD_INT 2100
5565: PPUSH
5566: CALL_OW 12
5570: MUL
5571: PPUSH
5572: CALL_OW 67
5576: GO 5788
5578: LD_INT 21000
5580: PUSH
5581: LD_INT 1
5583: PLUS
5584: DOUBLE
5585: GREATEREQUAL
5586: IFFALSE 5594
5588: LD_INT 42000
5590: DOUBLE
5591: LESSEQUAL
5592: IFTRUE 5596
5594: GO 5624
5596: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5597: LD_EXP 23
5601: PUSH
5602: LD_INT 100
5604: DIVREAL
5605: PUSH
5606: LD_INT 2100
5608: PPUSH
5609: LD_INT 2275
5611: PPUSH
5612: CALL_OW 12
5616: MUL
5617: PPUSH
5618: CALL_OW 67
5622: GO 5788
5624: LD_INT 42000
5626: PUSH
5627: LD_INT 1
5629: PLUS
5630: DOUBLE
5631: GREATEREQUAL
5632: IFFALSE 5640
5634: LD_INT 63000
5636: DOUBLE
5637: LESSEQUAL
5638: IFTRUE 5642
5640: GO 5670
5642: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5643: LD_EXP 23
5647: PUSH
5648: LD_INT 100
5650: DIVREAL
5651: PUSH
5652: LD_INT 2275
5654: PPUSH
5655: LD_INT 2450
5657: PPUSH
5658: CALL_OW 12
5662: MUL
5663: PPUSH
5664: CALL_OW 67
5668: GO 5788
5670: LD_INT 63000
5672: PUSH
5673: LD_INT 1
5675: PLUS
5676: DOUBLE
5677: GREATEREQUAL
5678: IFFALSE 5686
5680: LD_INT 105000
5682: DOUBLE
5683: LESSEQUAL
5684: IFTRUE 5688
5686: GO 5716
5688: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5689: LD_EXP 23
5693: PUSH
5694: LD_INT 100
5696: DIVREAL
5697: PUSH
5698: LD_INT 2450
5700: PPUSH
5701: LD_INT 2800
5703: PPUSH
5704: CALL_OW 12
5708: MUL
5709: PPUSH
5710: CALL_OW 67
5714: GO 5788
5716: LD_INT 105000
5718: PUSH
5719: LD_INT 1
5721: PLUS
5722: DOUBLE
5723: GREATEREQUAL
5724: IFFALSE 5732
5726: LD_INT 630000
5728: DOUBLE
5729: LESSEQUAL
5730: IFTRUE 5734
5732: GO 5762
5734: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5735: LD_EXP 23
5739: PUSH
5740: LD_INT 100
5742: DIVREAL
5743: PUSH
5744: LD_INT 2800
5746: PPUSH
5747: LD_INT 3500
5749: PPUSH
5750: CALL_OW 12
5754: MUL
5755: PPUSH
5756: CALL_OW 67
5760: GO 5788
5762: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5763: LD_EXP 23
5767: PUSH
5768: LD_INT 100
5770: DIVREAL
5771: PUSH
5772: LD_INT 3500
5774: PPUSH
5775: LD_INT 3850
5777: PPUSH
5778: CALL_OW 12
5782: MUL
5783: PPUSH
5784: CALL_OW 67
// Amount := Rand ( 3 , 5 ) ;
5788: LD_ADDR_VAR 0 2
5792: PUSH
5793: LD_INT 3
5795: PPUSH
5796: LD_INT 5
5798: PPUSH
5799: CALL_OW 12
5803: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5804: LD_ADDR_VAR 0 1
5808: PUSH
5809: LD_EXP 32
5813: PUSH
5814: LD_INT 0
5816: PUSH
5817: EMPTY
5818: LIST
5819: DIFF
5820: PUSH
5821: FOR_IN
5822: IFFALSE 5862
// CreateCratesArea ( Amount , [ Base_nw , Base_ne , Base_sw , Base_se ] [ i ] , true ) ;
5824: LD_VAR 0 2
5828: PPUSH
5829: LD_INT 1
5831: PUSH
5832: LD_INT 2
5834: PUSH
5835: LD_INT 3
5837: PUSH
5838: LD_INT 4
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: PUSH
5847: LD_VAR 0 1
5851: ARRAY
5852: PPUSH
5853: LD_INT 1
5855: PPUSH
5856: CALL_OW 55
5860: GO 5821
5862: POP
5863: POP
// enable ;
5864: ENABLE
// end ;
5865: PPOPN 2
5867: END
// every 0 0$25 + 0 0$1.0 do
5868: GO 5870
5870: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5871: LD_INT 37
5873: PPUSH
5874: LD_INT 1
5876: PPUSH
5877: CALL_OW 287
5881: PUSH
5882: LD_INT 200
5884: PUSH
5885: LD_EXP 23
5889: MINUS
5890: PUSH
5891: LD_INT 50
5893: DIVREAL
5894: PUSH
5895: LD_INT 5
5897: MUL
5898: LESS
5899: IFFALSE 5922
// CreateCratesArea ( Rand ( 2 , 4 ) , Between1 , true ) ;
5901: LD_INT 2
5903: PPUSH
5904: LD_INT 4
5906: PPUSH
5907: CALL_OW 12
5911: PPUSH
5912: LD_INT 37
5914: PPUSH
5915: LD_INT 1
5917: PPUSH
5918: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5922: LD_INT 38
5924: PPUSH
5925: LD_INT 1
5927: PPUSH
5928: CALL_OW 287
5932: PUSH
5933: LD_INT 200
5935: PUSH
5936: LD_EXP 23
5940: MINUS
5941: PUSH
5942: LD_INT 50
5944: DIVREAL
5945: PUSH
5946: LD_INT 5
5948: MUL
5949: LESS
5950: IFFALSE 5973
// CreateCratesArea ( Rand ( 2 , 4 ) , Between2 , true ) ;
5952: LD_INT 2
5954: PPUSH
5955: LD_INT 4
5957: PPUSH
5958: CALL_OW 12
5962: PPUSH
5963: LD_INT 38
5965: PPUSH
5966: LD_INT 1
5968: PPUSH
5969: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5973: LD_INT 39
5975: PPUSH
5976: LD_INT 1
5978: PPUSH
5979: CALL_OW 287
5983: PUSH
5984: LD_INT 200
5986: PUSH
5987: LD_EXP 23
5991: MINUS
5992: PUSH
5993: LD_INT 50
5995: DIVREAL
5996: PUSH
5997: LD_INT 5
5999: MUL
6000: LESS
6001: IFFALSE 6024
// CreateCratesArea ( Rand ( 2 , 4 ) , Between3 , true ) ;
6003: LD_INT 2
6005: PPUSH
6006: LD_INT 4
6008: PPUSH
6009: CALL_OW 12
6013: PPUSH
6014: LD_INT 39
6016: PPUSH
6017: LD_INT 1
6019: PPUSH
6020: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
6024: LD_INT 40
6026: PPUSH
6027: LD_INT 1
6029: PPUSH
6030: CALL_OW 287
6034: PUSH
6035: LD_INT 200
6037: PUSH
6038: LD_EXP 23
6042: MINUS
6043: PUSH
6044: LD_INT 50
6046: DIVREAL
6047: PUSH
6048: LD_INT 5
6050: MUL
6051: LESS
6052: IFFALSE 6075
// CreateCratesArea ( Rand ( 2 , 4 ) , Between4 , true ) ;
6054: LD_INT 2
6056: PPUSH
6057: LD_INT 4
6059: PPUSH
6060: CALL_OW 12
6064: PPUSH
6065: LD_INT 40
6067: PPUSH
6068: LD_INT 1
6070: PPUSH
6071: CALL_OW 55
// if GetResourceArea ( Center , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
6075: LD_INT 36
6077: PPUSH
6078: LD_INT 1
6080: PPUSH
6081: CALL_OW 287
6085: PUSH
6086: LD_INT 200
6088: PUSH
6089: LD_EXP 23
6093: MINUS
6094: PUSH
6095: LD_INT 25
6097: DIVREAL
6098: PUSH
6099: LD_INT 5
6101: MUL
6102: LESS
6103: IFFALSE 6118
// CreateCratesArea ( 5 , Center , true ) ;
6105: LD_INT 5
6107: PPUSH
6108: LD_INT 36
6110: PPUSH
6111: LD_INT 1
6113: PPUSH
6114: CALL_OW 55
// enable ;
6118: ENABLE
// end ; end_of_file
6119: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6120: LD_VAR 0 1
6124: PPUSH
6125: CALL_OW 266
6129: PUSH
6130: LD_INT 0
6132: PUSH
6133: LD_INT 1
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: IN
6140: IFFALSE 6165
// SetBName ( b , @ & GetSide ( b ) ) ;
6142: LD_VAR 0 1
6146: PPUSH
6147: LD_STRING @
6149: PUSH
6150: LD_VAR 0 1
6154: PPUSH
6155: CALL_OW 255
6159: STR
6160: PPUSH
6161: CALL_OW 500
// end ;
6165: PPOPN 2
6167: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 266
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: LD_INT 1
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: IN
6188: IFFALSE 6213
// SetBName ( b , @ & GetSide ( b ) ) ;
6190: LD_VAR 0 1
6194: PPUSH
6195: LD_STRING @
6197: PUSH
6198: LD_VAR 0 1
6202: PPUSH
6203: CALL_OW 255
6207: STR
6208: PPUSH
6209: CALL_OW 500
// end ;
6213: PPOPN 3
6215: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6216: LD_INT 0
6218: PPUSH
6219: PPUSH
6220: PPUSH
6221: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
6222: LD_VAR 0 1
6226: PPUSH
6227: CALL_OW 255
6231: PUSH
6232: LD_INT 0
6234: EQUAL
6235: PUSH
6236: LD_VAR 0 1
6240: PPUSH
6241: CALL_OW 257
6245: PUSH
6246: LD_INT 12
6248: EQUAL
6249: AND
6250: IFFALSE 6256
// CheckApemenAmount ;
6252: CALL 13755 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6256: LD_VAR 0 1
6260: PPUSH
6261: CALL_OW 266
6265: PUSH
6266: LD_INT 0
6268: PUSH
6269: LD_INT 1
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: IN
6276: IFFALSE 6358
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6278: LD_ADDR_VAR 0 4
6282: PUSH
6283: LD_EXP 32
6287: PUSH
6288: LD_VAR 0 1
6292: PPUSH
6293: CALL_OW 255
6297: ARRAY
6298: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6299: LD_ADDR_VAR 0 2
6303: PUSH
6304: LD_EXP 36
6308: PUSH
6309: LD_VAR 0 4
6313: ARRAY
6314: PUSH
6315: LD_INT 1
6317: ARRAY
6318: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6319: LD_ADDR_VAR 0 3
6323: PUSH
6324: LD_EXP 36
6328: PUSH
6329: LD_VAR 0 4
6333: ARRAY
6334: PUSH
6335: LD_INT 2
6337: ARRAY
6338: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6339: LD_VAR 0 2
6343: PPUSH
6344: LD_VAR 0 3
6348: PPUSH
6349: CALL_OW 420
6353: PPUSH
6354: CALL_OW 419
// end ; end ;
6358: PPOPN 5
6360: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6361: LD_VAR 0 1
6365: PPUSH
6366: LD_VAR 0 2
6370: PPUSH
6371: LD_VAR 0 3
6375: PPUSH
6376: LD_OWVAR 2
6380: PPUSH
6381: CALL 14624 0 4
6385: PPOPN 3
6387: END
// export ZMIZELI_LIDI ; export POINTY ; export function vygeneruj_lidi_na_ztraceni ; var i , j , k ; var pom , pom1 ; var barva ; begin
6388: LD_INT 0
6390: PPUSH
6391: PPUSH
6392: PPUSH
6393: PPUSH
6394: PPUSH
6395: PPUSH
6396: PPUSH
// ZMIZELI_LIDI = [ ] ;
6397: LD_ADDR_EXP 38
6401: PUSH
6402: EMPTY
6403: ST_TO_ADDR
// for j := 1 to 4 do
6404: LD_ADDR_VAR 0 3
6408: PUSH
6409: DOUBLE
6410: LD_INT 1
6412: DEC
6413: ST_TO_ADDR
6414: LD_INT 4
6416: PUSH
6417: FOR_TO
6418: IFFALSE 6581
// begin pom1 = [ ] ;
6420: LD_ADDR_VAR 0 6
6424: PUSH
6425: EMPTY
6426: ST_TO_ADDR
// for k := 1 to 8 do
6427: LD_ADDR_VAR 0 4
6431: PUSH
6432: DOUBLE
6433: LD_INT 1
6435: DEC
6436: ST_TO_ADDR
6437: LD_INT 8
6439: PUSH
6440: FOR_TO
6441: IFFALSE 6475
// if Side_Positions [ k ] = j then
6443: LD_EXP 32
6447: PUSH
6448: LD_VAR 0 4
6452: ARRAY
6453: PUSH
6454: LD_VAR 0 3
6458: EQUAL
6459: IFFALSE 6473
// begin barva = k ;
6461: LD_ADDR_VAR 0 7
6465: PUSH
6466: LD_VAR 0 4
6470: ST_TO_ADDR
// break ;
6471: GO 6475
// end ;
6473: GO 6440
6475: POP
6476: POP
// for i := 1 to 5 do
6477: LD_ADDR_VAR 0 2
6481: PUSH
6482: DOUBLE
6483: LD_INT 1
6485: DEC
6486: ST_TO_ADDR
6487: LD_INT 5
6489: PUSH
6490: FOR_TO
6491: IFFALSE 6558
// begin if Prob ( 10 ) and def_vehicles_too then
6493: LD_INT 10
6495: PPUSH
6496: CALL_OW 13
6500: PUSH
6501: LD_EXP 14
6505: AND
6506: IFFALSE 6525
// pom = vytvor_nove_auto ( barva ) else
6508: LD_ADDR_VAR 0 5
6512: PUSH
6513: LD_VAR 0 7
6517: PPUSH
6518: CALL 7328 0 1
6522: ST_TO_ADDR
6523: GO 6540
// pom = vytvor_noveho_cloveka ( barva ) ;
6525: LD_ADDR_VAR 0 5
6529: PUSH
6530: LD_VAR 0 7
6534: PPUSH
6535: CALL 6607 0 1
6539: ST_TO_ADDR
// pom1 = pom1 ^ pom ;
6540: LD_ADDR_VAR 0 6
6544: PUSH
6545: LD_VAR 0 6
6549: PUSH
6550: LD_VAR 0 5
6554: ADD
6555: ST_TO_ADDR
// end ;
6556: GO 6490
6558: POP
6559: POP
// ZMIZELI_LIDI = ZMIZELI_LIDI ^ [ pom1 ] ;
6560: LD_ADDR_EXP 38
6564: PUSH
6565: LD_EXP 38
6569: PUSH
6570: LD_VAR 0 6
6574: PUSH
6575: EMPTY
6576: LIST
6577: ADD
6578: ST_TO_ADDR
// end ;
6579: GO 6417
6581: POP
6582: POP
// POINTY = [ [ ] , [ ] , [ ] , [ ] ] ;
6583: LD_ADDR_EXP 39
6587: PUSH
6588: EMPTY
6589: PUSH
6590: EMPTY
6591: PUSH
6592: EMPTY
6593: PUSH
6594: EMPTY
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: ST_TO_ADDR
// end ;
6602: LD_VAR 0 1
6606: RET
// function vytvor_noveho_cloveka ( b ) ; var pom , pom1 ; var cla ; var i ; var sidy ; var poc ; var ah ; var pommm ; begin
6607: LD_INT 0
6609: PPUSH
6610: PPUSH
6611: PPUSH
6612: PPUSH
6613: PPUSH
6614: PPUSH
6615: PPUSH
6616: PPUSH
6617: PPUSH
// if def_other_nation then
6618: LD_EXP 13
6622: IFFALSE 6642
// pom = Rand ( 1 , 11 ) else
6624: LD_ADDR_VAR 0 3
6628: PUSH
6629: LD_INT 1
6631: PPUSH
6632: LD_INT 11
6634: PPUSH
6635: CALL_OW 12
6639: ST_TO_ADDR
6640: GO 6838
// begin pommm = Rand ( 1 , 8 ) ;
6642: LD_ADDR_VAR 0 10
6646: PUSH
6647: LD_INT 1
6649: PPUSH
6650: LD_INT 8
6652: PPUSH
6653: CALL_OW 12
6657: ST_TO_ADDR
// case Side_Nations [ b ] of nation_american :
6658: LD_EXP 33
6662: PUSH
6663: LD_VAR 0 1
6667: ARRAY
6668: PUSH
6669: LD_INT 1
6671: DOUBLE
6672: EQUAL
6673: IFTRUE 6677
6675: GO 6725
6677: POP
// pom = [ 1 , 2 , 5 , 6 , 7 , 8 , 9 , 5 ] [ pommm ] ; nation_arabian :
6678: LD_ADDR_VAR 0 3
6682: PUSH
6683: LD_INT 1
6685: PUSH
6686: LD_INT 2
6688: PUSH
6689: LD_INT 5
6691: PUSH
6692: LD_INT 6
6694: PUSH
6695: LD_INT 7
6697: PUSH
6698: LD_INT 8
6700: PUSH
6701: LD_INT 9
6703: PUSH
6704: LD_INT 5
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: PUSH
6717: LD_VAR 0 10
6721: ARRAY
6722: ST_TO_ADDR
6723: GO 6838
6725: LD_INT 2
6727: DOUBLE
6728: EQUAL
6729: IFTRUE 6733
6731: GO 6781
6733: POP
// pom = [ 1 , 3 , 4 , 5 , 6 , 7 , 8 , 10 ] [ pommm ] ; nation_russian :
6734: LD_ADDR_VAR 0 3
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: LD_INT 3
6744: PUSH
6745: LD_INT 4
6747: PUSH
6748: LD_INT 5
6750: PUSH
6751: LD_INT 6
6753: PUSH
6754: LD_INT 7
6756: PUSH
6757: LD_INT 8
6759: PUSH
6760: LD_INT 10
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: PUSH
6773: LD_VAR 0 10
6777: ARRAY
6778: ST_TO_ADDR
6779: GO 6838
6781: LD_INT 3
6783: DOUBLE
6784: EQUAL
6785: IFTRUE 6789
6787: GO 6837
6789: POP
// pom = [ 1 , 2 , 3 , 5 , 6 , 7 , 8 , 11 ] [ pommm ] ; end ;
6790: LD_ADDR_VAR 0 3
6794: PUSH
6795: LD_INT 1
6797: PUSH
6798: LD_INT 2
6800: PUSH
6801: LD_INT 3
6803: PUSH
6804: LD_INT 5
6806: PUSH
6807: LD_INT 6
6809: PUSH
6810: LD_INT 7
6812: PUSH
6813: LD_INT 8
6815: PUSH
6816: LD_INT 11
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: PUSH
6829: LD_VAR 0 10
6833: ARRAY
6834: ST_TO_ADDR
6835: GO 6838
6837: POP
// end ; case pom of 1 :
6838: LD_VAR 0 3
6842: PUSH
6843: LD_INT 1
6845: DOUBLE
6846: EQUAL
6847: IFTRUE 6851
6849: GO 6862
6851: POP
// cla = class_apeman ; 2 :
6852: LD_ADDR_VAR 0 5
6856: PUSH
6857: LD_INT 12
6859: ST_TO_ADDR
6860: GO 7053
6862: LD_INT 2
6864: DOUBLE
6865: EQUAL
6866: IFTRUE 6870
6868: GO 6881
6870: POP
// cla = class_apeman_engineer ; 3 :
6871: LD_ADDR_VAR 0 5
6875: PUSH
6876: LD_INT 16
6878: ST_TO_ADDR
6879: GO 7053
6881: LD_INT 3
6883: DOUBLE
6884: EQUAL
6885: IFTRUE 6889
6887: GO 6900
6889: POP
// cla = class_apeman_soldier ; 4 :
6890: LD_ADDR_VAR 0 5
6894: PUSH
6895: LD_INT 15
6897: ST_TO_ADDR
6898: GO 7053
6900: LD_INT 4
6902: DOUBLE
6903: EQUAL
6904: IFTRUE 6908
6906: GO 6919
6908: POP
// cla = class_apeman_kamikaze ; 5 :
6909: LD_ADDR_VAR 0 5
6913: PUSH
6914: LD_INT 17
6916: ST_TO_ADDR
6917: GO 7053
6919: LD_INT 5
6921: DOUBLE
6922: EQUAL
6923: IFTRUE 6927
6925: GO 6938
6927: POP
// cla = class_soldier ; 6 :
6928: LD_ADDR_VAR 0 5
6932: PUSH
6933: LD_INT 1
6935: ST_TO_ADDR
6936: GO 7053
6938: LD_INT 6
6940: DOUBLE
6941: EQUAL
6942: IFTRUE 6946
6944: GO 6957
6946: POP
// cla = class_mechanic ; 7 :
6947: LD_ADDR_VAR 0 5
6951: PUSH
6952: LD_INT 3
6954: ST_TO_ADDR
6955: GO 7053
6957: LD_INT 7
6959: DOUBLE
6960: EQUAL
6961: IFTRUE 6965
6963: GO 6976
6965: POP
// cla = class_engineer ; 8 :
6966: LD_ADDR_VAR 0 5
6970: PUSH
6971: LD_INT 2
6973: ST_TO_ADDR
6974: GO 7053
6976: LD_INT 8
6978: DOUBLE
6979: EQUAL
6980: IFTRUE 6984
6982: GO 6995
6984: POP
// cla = class_scientistic ; 9 :
6985: LD_ADDR_VAR 0 5
6989: PUSH
6990: LD_INT 4
6992: ST_TO_ADDR
6993: GO 7053
6995: LD_INT 9
6997: DOUBLE
6998: EQUAL
6999: IFTRUE 7003
7001: GO 7014
7003: POP
// cla = class_sniper ; 10 :
7004: LD_ADDR_VAR 0 5
7008: PUSH
7009: LD_INT 5
7011: ST_TO_ADDR
7012: GO 7053
7014: LD_INT 10
7016: DOUBLE
7017: EQUAL
7018: IFTRUE 7022
7020: GO 7033
7022: POP
// cla = class_mortar ; 11 :
7023: LD_ADDR_VAR 0 5
7027: PUSH
7028: LD_INT 8
7030: ST_TO_ADDR
7031: GO 7053
7033: LD_INT 11
7035: DOUBLE
7036: EQUAL
7037: IFTRUE 7041
7039: GO 7052
7041: POP
// cla = class_bazooker ; end ;
7042: LD_ADDR_VAR 0 5
7046: PUSH
7047: LD_INT 9
7049: ST_TO_ADDR
7050: GO 7053
7052: POP
// uc_side = b ;
7053: LD_ADDR_OWVAR 20
7057: PUSH
7058: LD_VAR 0 1
7062: ST_TO_ADDR
// if pom <= 4 then
7063: LD_VAR 0 3
7067: PUSH
7068: LD_INT 4
7070: LESSEQUAL
7071: IFFALSE 7083
// uc_nation = nation_nature else
7073: LD_ADDR_OWVAR 21
7077: PUSH
7078: LD_INT 0
7080: ST_TO_ADDR
7081: GO 7186
// begin if def_other_nation then
7083: LD_EXP 13
7087: IFFALSE 7107
// pom1 = Rand ( 1 , 3 ) else
7089: LD_ADDR_VAR 0 4
7093: PUSH
7094: LD_INT 1
7096: PPUSH
7097: LD_INT 3
7099: PPUSH
7100: CALL_OW 12
7104: ST_TO_ADDR
7105: GO 7123
// pom1 = Side_Nations [ b ] ;
7107: LD_ADDR_VAR 0 4
7111: PUSH
7112: LD_EXP 33
7116: PUSH
7117: LD_VAR 0 1
7121: ARRAY
7122: ST_TO_ADDR
// case pom1 of 1 :
7123: LD_VAR 0 4
7127: PUSH
7128: LD_INT 1
7130: DOUBLE
7131: EQUAL
7132: IFTRUE 7136
7134: GO 7147
7136: POP
// uc_nation = nation_american ; 2 :
7137: LD_ADDR_OWVAR 21
7141: PUSH
7142: LD_INT 1
7144: ST_TO_ADDR
7145: GO 7186
7147: LD_INT 2
7149: DOUBLE
7150: EQUAL
7151: IFTRUE 7155
7153: GO 7166
7155: POP
// uc_nation = nation_arabian ; 3 :
7156: LD_ADDR_OWVAR 21
7160: PUSH
7161: LD_INT 2
7163: ST_TO_ADDR
7164: GO 7186
7166: LD_INT 3
7168: DOUBLE
7169: EQUAL
7170: IFTRUE 7174
7172: GO 7185
7174: POP
// uc_nation = nation_russian ; end ;
7175: LD_ADDR_OWVAR 21
7179: PUSH
7180: LD_INT 3
7182: ST_TO_ADDR
7183: GO 7186
7185: POP
// end ; ah = get_human ( get_sex , cla , Rand ( 1 , 5 ) ,  ) ;
7186: LD_ADDR_VAR 0 9
7190: PUSH
7191: CALL 7293 0 0
7195: PPUSH
7196: LD_VAR 0 5
7200: PPUSH
7201: LD_INT 1
7203: PPUSH
7204: LD_INT 5
7206: PPUSH
7207: CALL_OW 12
7211: PPUSH
7212: LD_STRING 
7214: PPUSH
7215: CALL 7235 0 4
7219: ST_TO_ADDR
// result := ah ;
7220: LD_ADDR_VAR 0 2
7224: PUSH
7225: LD_VAR 0 9
7229: ST_TO_ADDR
// end ;
7230: LD_VAR 0 2
7234: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
7235: LD_INT 0
7237: PPUSH
7238: PPUSH
// PrepareHuman ( sex , clas , level ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_VAR 0 2
7248: PPUSH
7249: LD_VAR 0 3
7253: PPUSH
7254: CALL_OW 380
// hc_name := name ;
7258: LD_ADDR_OWVAR 26
7262: PUSH
7263: LD_VAR 0 4
7267: ST_TO_ADDR
// pom = CreateHuman ;
7268: LD_ADDR_VAR 0 6
7272: PUSH
7273: CALL_OW 44
7277: ST_TO_ADDR
// result := pom ;
7278: LD_ADDR_VAR 0 5
7282: PUSH
7283: LD_VAR 0 6
7287: ST_TO_ADDR
// end ;
7288: LD_VAR 0 5
7292: RET
// function get_sex ; begin
7293: LD_INT 0
7295: PPUSH
// if Prob ( 20 ) then
7296: LD_INT 20
7298: PPUSH
7299: CALL_OW 13
7303: IFFALSE 7315
// result = sex_female else
7305: LD_ADDR_VAR 0 1
7309: PUSH
7310: LD_INT 2
7312: ST_TO_ADDR
7313: GO 7323
// result = sex_male ;
7315: LD_ADDR_VAR 0 1
7319: PUSH
7320: LD_INT 1
7322: ST_TO_ADDR
// end ;
7323: LD_VAR 0 1
7327: RET
// function vytvor_nove_auto ( b ) ; var cat ; var a ; var pom ; var av ; begin
7328: LD_INT 0
7330: PPUSH
7331: PPUSH
7332: PPUSH
7333: PPUSH
7334: PPUSH
// uc_side = b ;
7335: LD_ADDR_OWVAR 20
7339: PUSH
7340: LD_VAR 0 1
7344: ST_TO_ADDR
// if def_other_nation then
7345: LD_EXP 13
7349: IFFALSE 7369
// cat = Rand ( 1 , 3 ) else
7351: LD_ADDR_VAR 0 3
7355: PUSH
7356: LD_INT 1
7358: PPUSH
7359: LD_INT 3
7361: PPUSH
7362: CALL_OW 12
7366: ST_TO_ADDR
7367: GO 7438
// case Side_Nations [ b ] of nation_american :
7369: LD_EXP 33
7373: PUSH
7374: LD_VAR 0 1
7378: ARRAY
7379: PUSH
7380: LD_INT 1
7382: DOUBLE
7383: EQUAL
7384: IFTRUE 7388
7386: GO 7399
7388: POP
// cat = 1 ; nation_arabian :
7389: LD_ADDR_VAR 0 3
7393: PUSH
7394: LD_INT 1
7396: ST_TO_ADDR
7397: GO 7438
7399: LD_INT 2
7401: DOUBLE
7402: EQUAL
7403: IFTRUE 7407
7405: GO 7418
7407: POP
// cat = 2 ; nation_russian :
7408: LD_ADDR_VAR 0 3
7412: PUSH
7413: LD_INT 2
7415: ST_TO_ADDR
7416: GO 7438
7418: LD_INT 3
7420: DOUBLE
7421: EQUAL
7422: IFTRUE 7426
7424: GO 7437
7426: POP
// cat = 3 ; end ;
7427: LD_ADDR_VAR 0 3
7431: PUSH
7432: LD_INT 3
7434: ST_TO_ADDR
7435: GO 7438
7437: POP
// case cat of 1 :
7438: LD_VAR 0 3
7442: PUSH
7443: LD_INT 1
7445: DOUBLE
7446: EQUAL
7447: IFTRUE 7451
7449: GO 7472
7451: POP
// begin uc_nation = nation_american ;
7452: LD_ADDR_OWVAR 21
7456: PUSH
7457: LD_INT 1
7459: ST_TO_ADDR
// pom = get_random_design_am ;
7460: LD_ADDR_VAR 0 5
7464: PUSH
7465: CALL 7612 0 0
7469: ST_TO_ADDR
// end ; 2 :
7470: GO 7531
7472: LD_INT 2
7474: DOUBLE
7475: EQUAL
7476: IFTRUE 7480
7478: GO 7501
7480: POP
// begin uc_nation = nation_arabian ;
7481: LD_ADDR_OWVAR 21
7485: PUSH
7486: LD_INT 2
7488: ST_TO_ADDR
// pom = get_random_design_ar ;
7489: LD_ADDR_VAR 0 5
7493: PUSH
7494: CALL 8278 0 0
7498: ST_TO_ADDR
// end ; 3 :
7499: GO 7531
7501: LD_INT 3
7503: DOUBLE
7504: EQUAL
7505: IFTRUE 7509
7507: GO 7530
7509: POP
// begin uc_nation = nation_russian ;
7510: LD_ADDR_OWVAR 21
7514: PUSH
7515: LD_INT 3
7517: ST_TO_ADDR
// pom = get_random_design_ru ;
7518: LD_ADDR_VAR 0 5
7522: PUSH
7523: CALL 8843 0 0
7527: ST_TO_ADDR
// end ; end ;
7528: GO 7531
7530: POP
// vc_chassis = pom [ 1 ] ;
7531: LD_ADDR_OWVAR 37
7535: PUSH
7536: LD_VAR 0 5
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: ST_TO_ADDR
// vc_engine = pom [ 2 ] ;
7545: LD_ADDR_OWVAR 39
7549: PUSH
7550: LD_VAR 0 5
7554: PUSH
7555: LD_INT 2
7557: ARRAY
7558: ST_TO_ADDR
// vc_weapon = pom [ 3 ] ;
7559: LD_ADDR_OWVAR 40
7563: PUSH
7564: LD_VAR 0 5
7568: PUSH
7569: LD_INT 3
7571: ARRAY
7572: ST_TO_ADDR
// vc_control = pom [ 4 ] ;
7573: LD_ADDR_OWVAR 38
7577: PUSH
7578: LD_VAR 0 5
7582: PUSH
7583: LD_INT 4
7585: ARRAY
7586: ST_TO_ADDR
// av = CreateVehicle ;
7587: LD_ADDR_VAR 0 6
7591: PUSH
7592: CALL_OW 45
7596: ST_TO_ADDR
// result := av ;
7597: LD_ADDR_VAR 0 2
7601: PUSH
7602: LD_VAR 0 6
7606: ST_TO_ADDR
// end ;
7607: LD_VAR 0 2
7611: RET
// function get_random_design_am ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
7612: LD_INT 0
7614: PPUSH
7615: PPUSH
7616: PPUSH
7617: PPUSH
7618: PPUSH
7619: PPUSH
7620: PPUSH
7621: PPUSH
7622: PPUSH
7623: PPUSH
// pom1 = Rand ( 1 , 12 ) ;
7624: LD_ADDR_VAR 0 2
7628: PUSH
7629: LD_INT 1
7631: PPUSH
7632: LD_INT 12
7634: PPUSH
7635: CALL_OW 12
7639: ST_TO_ADDR
// case pom1 of 1 :
7640: LD_VAR 0 2
7644: PUSH
7645: LD_INT 1
7647: DOUBLE
7648: EQUAL
7649: IFTRUE 7653
7651: GO 7664
7653: POP
// aa3 = us_machine_gun ; 2 :
7654: LD_ADDR_VAR 0 9
7658: PUSH
7659: LD_INT 2
7661: ST_TO_ADDR
7662: GO 7874
7664: LD_INT 2
7666: DOUBLE
7667: EQUAL
7668: IFTRUE 7672
7670: GO 7683
7672: POP
// aa3 = us_light_gun ; 3 :
7673: LD_ADDR_VAR 0 9
7677: PUSH
7678: LD_INT 3
7680: ST_TO_ADDR
7681: GO 7874
7683: LD_INT 3
7685: DOUBLE
7686: EQUAL
7687: IFTRUE 7691
7689: GO 7702
7691: POP
// aa3 = us_gatling_gun ; 4 :
7692: LD_ADDR_VAR 0 9
7696: PUSH
7697: LD_INT 4
7699: ST_TO_ADDR
7700: GO 7874
7702: LD_INT 4
7704: DOUBLE
7705: EQUAL
7706: IFTRUE 7710
7708: GO 7721
7710: POP
// aa3 = us_double_gun ; 5 :
7711: LD_ADDR_VAR 0 9
7715: PUSH
7716: LD_INT 5
7718: ST_TO_ADDR
7719: GO 7874
7721: LD_INT 5
7723: DOUBLE
7724: EQUAL
7725: IFTRUE 7729
7727: GO 7740
7729: POP
// aa3 = us_heavy_gun ; 6 :
7730: LD_ADDR_VAR 0 9
7734: PUSH
7735: LD_INT 6
7737: ST_TO_ADDR
7738: GO 7874
7740: LD_INT 6
7742: DOUBLE
7743: EQUAL
7744: IFTRUE 7748
7746: GO 7759
7748: POP
// aa3 = us_rocket_launcher ; 7 :
7749: LD_ADDR_VAR 0 9
7753: PUSH
7754: LD_INT 7
7756: ST_TO_ADDR
7757: GO 7874
7759: LD_INT 7
7761: DOUBLE
7762: EQUAL
7763: IFTRUE 7767
7765: GO 7778
7767: POP
// aa3 = us_laser ; 8 :
7768: LD_ADDR_VAR 0 9
7772: PUSH
7773: LD_INT 9
7775: ST_TO_ADDR
7776: GO 7874
7778: LD_INT 8
7780: DOUBLE
7781: EQUAL
7782: IFTRUE 7786
7784: GO 7797
7786: POP
// aa3 = us_double_laser ; 9 :
7787: LD_ADDR_VAR 0 9
7791: PUSH
7792: LD_INT 10
7794: ST_TO_ADDR
7795: GO 7874
7797: LD_INT 9
7799: DOUBLE
7800: EQUAL
7801: IFTRUE 7805
7803: GO 7816
7805: POP
// aa3 = us_radar ; 10 :
7806: LD_ADDR_VAR 0 9
7810: PUSH
7811: LD_INT 11
7813: ST_TO_ADDR
7814: GO 7874
7816: LD_INT 10
7818: DOUBLE
7819: EQUAL
7820: IFTRUE 7824
7822: GO 7835
7824: POP
// aa3 = us_cargo_bay ; 11 :
7825: LD_ADDR_VAR 0 9
7829: PUSH
7830: LD_INT 12
7832: ST_TO_ADDR
7833: GO 7874
7835: LD_INT 11
7837: DOUBLE
7838: EQUAL
7839: IFTRUE 7843
7841: GO 7854
7843: POP
// aa3 = us_crane ; 12 :
7844: LD_ADDR_VAR 0 9
7848: PUSH
7849: LD_INT 13
7851: ST_TO_ADDR
7852: GO 7874
7854: LD_INT 12
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7873
7862: POP
// aa3 = us_bulldozer ; end ;
7863: LD_ADDR_VAR 0 9
7867: PUSH
7868: LD_INT 14
7870: ST_TO_ADDR
7871: GO 7874
7873: POP
// if pom1 in [ 5 , 8 , 12 ] then
7874: LD_VAR 0 2
7878: PUSH
7879: LD_INT 5
7881: PUSH
7882: LD_INT 8
7884: PUSH
7885: LD_INT 12
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: IN
7893: IFFALSE 7913
// pom2 = Rand ( 4 , 5 ) else
7895: LD_ADDR_VAR 0 3
7899: PUSH
7900: LD_INT 4
7902: PPUSH
7903: LD_INT 5
7905: PPUSH
7906: CALL_OW 12
7910: ST_TO_ADDR
7911: GO 7964
// if pom1 in [ 1 , 9 ] then
7913: LD_VAR 0 2
7917: PUSH
7918: LD_INT 1
7920: PUSH
7921: LD_INT 9
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: IN
7928: IFFALSE 7948
// pom2 = Rand ( 1 , 5 ) else
7930: LD_ADDR_VAR 0 3
7934: PUSH
7935: LD_INT 1
7937: PPUSH
7938: LD_INT 5
7940: PPUSH
7941: CALL_OW 12
7945: ST_TO_ADDR
7946: GO 7964
// pom2 = Rand ( 2 , 5 ) ;
7948: LD_ADDR_VAR 0 3
7952: PUSH
7953: LD_INT 2
7955: PPUSH
7956: LD_INT 5
7958: PPUSH
7959: CALL_OW 12
7963: ST_TO_ADDR
// case pom2 of 1 :
7964: LD_VAR 0 3
7968: PUSH
7969: LD_INT 1
7971: DOUBLE
7972: EQUAL
7973: IFTRUE 7977
7975: GO 7988
7977: POP
// aa1 = us_light_wheeled ; 2 :
7978: LD_ADDR_VAR 0 7
7982: PUSH
7983: LD_INT 1
7985: ST_TO_ADDR
7986: GO 8065
7988: LD_INT 2
7990: DOUBLE
7991: EQUAL
7992: IFTRUE 7996
7994: GO 8007
7996: POP
// aa1 = us_medium_wheeled ; 3 :
7997: LD_ADDR_VAR 0 7
8001: PUSH
8002: LD_INT 2
8004: ST_TO_ADDR
8005: GO 8065
8007: LD_INT 3
8009: DOUBLE
8010: EQUAL
8011: IFTRUE 8015
8013: GO 8026
8015: POP
// aa1 = us_medium_tracked ; 4 :
8016: LD_ADDR_VAR 0 7
8020: PUSH
8021: LD_INT 3
8023: ST_TO_ADDR
8024: GO 8065
8026: LD_INT 4
8028: DOUBLE
8029: EQUAL
8030: IFTRUE 8034
8032: GO 8045
8034: POP
// aa1 = us_heavy_tracked ; 5 :
8035: LD_ADDR_VAR 0 7
8039: PUSH
8040: LD_INT 4
8042: ST_TO_ADDR
8043: GO 8065
8045: LD_INT 5
8047: DOUBLE
8048: EQUAL
8049: IFTRUE 8053
8051: GO 8064
8053: POP
// aa1 = us_morphling ; end ;
8054: LD_ADDR_VAR 0 7
8058: PUSH
8059: LD_INT 5
8061: ST_TO_ADDR
8062: GO 8065
8064: POP
// if pom2 < 4 then
8065: LD_VAR 0 3
8069: PUSH
8070: LD_INT 4
8072: LESS
8073: IFFALSE 8093
// pom3 = Rand ( 1 , 3 ) else
8075: LD_ADDR_VAR 0 4
8079: PUSH
8080: LD_INT 1
8082: PPUSH
8083: LD_INT 3
8085: PPUSH
8086: CALL_OW 12
8090: ST_TO_ADDR
8091: GO 8109
// pom3 = Rand ( 2 , 3 ) ;
8093: LD_ADDR_VAR 0 4
8097: PUSH
8098: LD_INT 2
8100: PPUSH
8101: LD_INT 3
8103: PPUSH
8104: CALL_OW 12
8108: ST_TO_ADDR
// case pom3 of 1 :
8109: LD_VAR 0 4
8113: PUSH
8114: LD_INT 1
8116: DOUBLE
8117: EQUAL
8118: IFTRUE 8122
8120: GO 8133
8122: POP
// aa2 = engine_solar ; 2 :
8123: LD_ADDR_VAR 0 8
8127: PUSH
8128: LD_INT 2
8130: ST_TO_ADDR
8131: GO 8172
8133: LD_INT 2
8135: DOUBLE
8136: EQUAL
8137: IFTRUE 8141
8139: GO 8152
8141: POP
// aa2 = engine_combustion ; 3 :
8142: LD_ADDR_VAR 0 8
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
8150: GO 8172
8152: LD_INT 3
8154: DOUBLE
8155: EQUAL
8156: IFTRUE 8160
8158: GO 8171
8160: POP
// aa2 = engine_siberite ; end ;
8161: LD_ADDR_VAR 0 8
8165: PUSH
8166: LD_INT 3
8168: ST_TO_ADDR
8169: GO 8172
8171: POP
// pom4 = Rand ( 1 , 2 ) ;
8172: LD_ADDR_VAR 0 5
8176: PUSH
8177: LD_INT 1
8179: PPUSH
8180: LD_INT 2
8182: PPUSH
8183: CALL_OW 12
8187: ST_TO_ADDR
// case pom4 of 1 :
8188: LD_VAR 0 5
8192: PUSH
8193: LD_INT 1
8195: DOUBLE
8196: EQUAL
8197: IFTRUE 8201
8199: GO 8212
8201: POP
// aa4 = control_manual ; 2 :
8202: LD_ADDR_VAR 0 10
8206: PUSH
8207: LD_INT 1
8209: ST_TO_ADDR
8210: GO 8232
8212: LD_INT 2
8214: DOUBLE
8215: EQUAL
8216: IFTRUE 8220
8218: GO 8231
8220: POP
// aa4 = control_computer ; end ;
8221: LD_ADDR_VAR 0 10
8225: PUSH
8226: LD_INT 3
8228: ST_TO_ADDR
8229: GO 8232
8231: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
8232: LD_ADDR_VAR 0 6
8236: PUSH
8237: LD_VAR 0 7
8241: PUSH
8242: LD_VAR 0 8
8246: PUSH
8247: LD_VAR 0 9
8251: PUSH
8252: LD_VAR 0 10
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: ST_TO_ADDR
// result = aa ;
8263: LD_ADDR_VAR 0 1
8267: PUSH
8268: LD_VAR 0 6
8272: ST_TO_ADDR
// end ;
8273: LD_VAR 0 1
8277: RET
// function get_random_design_ar ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
8278: LD_INT 0
8280: PPUSH
8281: PPUSH
8282: PPUSH
8283: PPUSH
8284: PPUSH
8285: PPUSH
8286: PPUSH
8287: PPUSH
8288: PPUSH
8289: PPUSH
// pom1 = Rand ( 1 , 11 ) ;
8290: LD_ADDR_VAR 0 2
8294: PUSH
8295: LD_INT 1
8297: PPUSH
8298: LD_INT 11
8300: PPUSH
8301: CALL_OW 12
8305: ST_TO_ADDR
// case pom1 of 1 :
8306: LD_VAR 0 2
8310: PUSH
8311: LD_INT 1
8313: DOUBLE
8314: EQUAL
8315: IFTRUE 8319
8317: GO 8330
8319: POP
// aa3 = ar_multimissile_ballista ; 2 :
8320: LD_ADDR_VAR 0 9
8324: PUSH
8325: LD_INT 22
8327: ST_TO_ADDR
8328: GO 8521
8330: LD_INT 2
8332: DOUBLE
8333: EQUAL
8334: IFTRUE 8338
8336: GO 8349
8338: POP
// aa3 = ar_light_gun ; 3 :
8339: LD_ADDR_VAR 0 9
8343: PUSH
8344: LD_INT 23
8346: ST_TO_ADDR
8347: GO 8521
8349: LD_INT 3
8351: DOUBLE
8352: EQUAL
8353: IFTRUE 8357
8355: GO 8368
8357: POP
// aa3 = ar_double_machine_gun ; 4 :
8358: LD_ADDR_VAR 0 9
8362: PUSH
8363: LD_INT 24
8365: ST_TO_ADDR
8366: GO 8521
8368: LD_INT 4
8370: DOUBLE
8371: EQUAL
8372: IFTRUE 8376
8374: GO 8387
8376: POP
// aa3 = ar_gatling_gun ; 5 :
8377: LD_ADDR_VAR 0 9
8381: PUSH
8382: LD_INT 25
8384: ST_TO_ADDR
8385: GO 8521
8387: LD_INT 5
8389: DOUBLE
8390: EQUAL
8391: IFTRUE 8395
8393: GO 8406
8395: POP
// aa3 = ar_flame_thrower ; 6 :
8396: LD_ADDR_VAR 0 9
8400: PUSH
8401: LD_INT 26
8403: ST_TO_ADDR
8404: GO 8521
8406: LD_INT 6
8408: DOUBLE
8409: EQUAL
8410: IFTRUE 8414
8412: GO 8425
8414: POP
// aa3 = ar_gun ; 7 :
8415: LD_ADDR_VAR 0 9
8419: PUSH
8420: LD_INT 27
8422: ST_TO_ADDR
8423: GO 8521
8425: LD_INT 7
8427: DOUBLE
8428: EQUAL
8429: IFTRUE 8433
8431: GO 8444
8433: POP
// aa3 = ar_rocket_launcher ; 8 :
8434: LD_ADDR_VAR 0 9
8438: PUSH
8439: LD_INT 28
8441: ST_TO_ADDR
8442: GO 8521
8444: LD_INT 8
8446: DOUBLE
8447: EQUAL
8448: IFTRUE 8452
8450: GO 8463
8452: POP
// aa3 = ar_selfpropelled_bomb ; 9 :
8453: LD_ADDR_VAR 0 9
8457: PUSH
8458: LD_INT 29
8460: ST_TO_ADDR
8461: GO 8521
8463: LD_INT 9
8465: DOUBLE
8466: EQUAL
8467: IFTRUE 8471
8469: GO 8482
8471: POP
// aa3 = ar_radar ; 10 :
8472: LD_ADDR_VAR 0 9
8476: PUSH
8477: LD_INT 30
8479: ST_TO_ADDR
8480: GO 8521
8482: LD_INT 10
8484: DOUBLE
8485: EQUAL
8486: IFTRUE 8490
8488: GO 8501
8490: POP
// aa3 = ar_control_tower ; 11 :
8491: LD_ADDR_VAR 0 9
8495: PUSH
8496: LD_INT 31
8498: ST_TO_ADDR
8499: GO 8521
8501: LD_INT 11
8503: DOUBLE
8504: EQUAL
8505: IFTRUE 8509
8507: GO 8520
8509: POP
// aa3 = us_cargo_bay ; end ;
8510: LD_ADDR_VAR 0 9
8514: PUSH
8515: LD_INT 12
8517: ST_TO_ADDR
8518: GO 8521
8520: POP
// if pom1 in [ 1 , 2 , 3 ] then
8521: LD_VAR 0 2
8525: PUSH
8526: LD_INT 1
8528: PUSH
8529: LD_INT 2
8531: PUSH
8532: LD_INT 3
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: LIST
8539: IN
8540: IFFALSE 8560
// pom2 = Rand ( 1 , 4 ) else
8542: LD_ADDR_VAR 0 3
8546: PUSH
8547: LD_INT 1
8549: PPUSH
8550: LD_INT 4
8552: PPUSH
8553: CALL_OW 12
8557: ST_TO_ADDR
8558: GO 8576
// pom2 = Rand ( 3 , 4 ) ;
8560: LD_ADDR_VAR 0 3
8564: PUSH
8565: LD_INT 3
8567: PPUSH
8568: LD_INT 4
8570: PPUSH
8571: CALL_OW 12
8575: ST_TO_ADDR
// case pom2 of 1 :
8576: LD_VAR 0 3
8580: PUSH
8581: LD_INT 1
8583: DOUBLE
8584: EQUAL
8585: IFTRUE 8589
8587: GO 8600
8589: POP
// aa1 = ar_hovercraft ; 2 :
8590: LD_ADDR_VAR 0 7
8594: PUSH
8595: LD_INT 11
8597: ST_TO_ADDR
8598: GO 8658
8600: LD_INT 2
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8619
8608: POP
// aa1 = ar_light_trike ; 3 :
8609: LD_ADDR_VAR 0 7
8613: PUSH
8614: LD_INT 12
8616: ST_TO_ADDR
8617: GO 8658
8619: LD_INT 3
8621: DOUBLE
8622: EQUAL
8623: IFTRUE 8627
8625: GO 8638
8627: POP
// aa1 = ar_medium_trike ; 4 :
8628: LD_ADDR_VAR 0 7
8632: PUSH
8633: LD_INT 13
8635: ST_TO_ADDR
8636: GO 8658
8638: LD_INT 4
8640: DOUBLE
8641: EQUAL
8642: IFTRUE 8646
8644: GO 8657
8646: POP
// aa1 = ar_half_tracked ; end ;
8647: LD_ADDR_VAR 0 7
8651: PUSH
8652: LD_INT 14
8654: ST_TO_ADDR
8655: GO 8658
8657: POP
// pom3 = Rand ( 1 , 3 ) ;
8658: LD_ADDR_VAR 0 4
8662: PUSH
8663: LD_INT 1
8665: PPUSH
8666: LD_INT 3
8668: PPUSH
8669: CALL_OW 12
8673: ST_TO_ADDR
// case pom3 of 1 :
8674: LD_VAR 0 4
8678: PUSH
8679: LD_INT 1
8681: DOUBLE
8682: EQUAL
8683: IFTRUE 8687
8685: GO 8698
8687: POP
// aa2 = engine_solar ; 2 :
8688: LD_ADDR_VAR 0 8
8692: PUSH
8693: LD_INT 2
8695: ST_TO_ADDR
8696: GO 8737
8698: LD_INT 2
8700: DOUBLE
8701: EQUAL
8702: IFTRUE 8706
8704: GO 8717
8706: POP
// aa2 = engine_combustion ; 3 :
8707: LD_ADDR_VAR 0 8
8711: PUSH
8712: LD_INT 1
8714: ST_TO_ADDR
8715: GO 8737
8717: LD_INT 3
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8736
8725: POP
// aa2 = engine_siberite ; end ;
8726: LD_ADDR_VAR 0 8
8730: PUSH
8731: LD_INT 3
8733: ST_TO_ADDR
8734: GO 8737
8736: POP
// pom4 = Rand ( 1 , 2 ) ;
8737: LD_ADDR_VAR 0 5
8741: PUSH
8742: LD_INT 1
8744: PPUSH
8745: LD_INT 2
8747: PPUSH
8748: CALL_OW 12
8752: ST_TO_ADDR
// case pom4 of 1 :
8753: LD_VAR 0 5
8757: PUSH
8758: LD_INT 1
8760: DOUBLE
8761: EQUAL
8762: IFTRUE 8766
8764: GO 8777
8766: POP
// aa4 = control_manual ; 2 :
8767: LD_ADDR_VAR 0 10
8771: PUSH
8772: LD_INT 1
8774: ST_TO_ADDR
8775: GO 8797
8777: LD_INT 2
8779: DOUBLE
8780: EQUAL
8781: IFTRUE 8785
8783: GO 8796
8785: POP
// aa4 = control_apeman ; end ;
8786: LD_ADDR_VAR 0 10
8790: PUSH
8791: LD_INT 5
8793: ST_TO_ADDR
8794: GO 8797
8796: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
8797: LD_ADDR_VAR 0 6
8801: PUSH
8802: LD_VAR 0 7
8806: PUSH
8807: LD_VAR 0 8
8811: PUSH
8812: LD_VAR 0 9
8816: PUSH
8817: LD_VAR 0 10
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: ST_TO_ADDR
// result = aa ;
8828: LD_ADDR_VAR 0 1
8832: PUSH
8833: LD_VAR 0 6
8837: ST_TO_ADDR
// end ;
8838: LD_VAR 0 1
8842: RET
// function get_random_design_ru ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
8843: LD_INT 0
8845: PPUSH
8846: PPUSH
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
// pom1 = Rand ( 1 , 10 ) ;
8855: LD_ADDR_VAR 0 2
8859: PUSH
8860: LD_INT 1
8862: PPUSH
8863: LD_INT 10
8865: PPUSH
8866: CALL_OW 12
8870: ST_TO_ADDR
// case pom1 of 1 :
8871: LD_VAR 0 2
8875: PUSH
8876: LD_INT 1
8878: DOUBLE
8879: EQUAL
8880: IFTRUE 8884
8882: GO 8895
8884: POP
// aa3 = ru_heavy_machine_gun ; 2 :
8885: LD_ADDR_VAR 0 9
8889: PUSH
8890: LD_INT 42
8892: ST_TO_ADDR
8893: GO 9067
8895: LD_INT 2
8897: DOUBLE
8898: EQUAL
8899: IFTRUE 8903
8901: GO 8914
8903: POP
// aa3 = ru_gatling_gun ; 3 :
8904: LD_ADDR_VAR 0 9
8908: PUSH
8909: LD_INT 43
8911: ST_TO_ADDR
8912: GO 9067
8914: LD_INT 3
8916: DOUBLE
8917: EQUAL
8918: IFTRUE 8922
8920: GO 8933
8922: POP
// aa3 = ru_gun ; 4 :
8923: LD_ADDR_VAR 0 9
8927: PUSH
8928: LD_INT 44
8930: ST_TO_ADDR
8931: GO 9067
8933: LD_INT 4
8935: DOUBLE
8936: EQUAL
8937: IFTRUE 8941
8939: GO 8952
8941: POP
// aa3 = ru_rocket_launcher ; 5 :
8942: LD_ADDR_VAR 0 9
8946: PUSH
8947: LD_INT 45
8949: ST_TO_ADDR
8950: GO 9067
8952: LD_INT 5
8954: DOUBLE
8955: EQUAL
8956: IFTRUE 8960
8958: GO 8971
8960: POP
// aa3 = ru_heavy_gun ; 6 :
8961: LD_ADDR_VAR 0 9
8965: PUSH
8966: LD_INT 46
8968: ST_TO_ADDR
8969: GO 9067
8971: LD_INT 6
8973: DOUBLE
8974: EQUAL
8975: IFTRUE 8979
8977: GO 8990
8979: POP
// aa3 = ru_rocket ; 7 :
8980: LD_ADDR_VAR 0 9
8984: PUSH
8985: LD_INT 47
8987: ST_TO_ADDR
8988: GO 9067
8990: LD_INT 7
8992: DOUBLE
8993: EQUAL
8994: IFTRUE 8998
8996: GO 9009
8998: POP
// aa3 = ru_time_lapser ; 8 :
8999: LD_ADDR_VAR 0 9
9003: PUSH
9004: LD_INT 49
9006: ST_TO_ADDR
9007: GO 9067
9009: LD_INT 8
9011: DOUBLE
9012: EQUAL
9013: IFTRUE 9017
9015: GO 9028
9017: POP
// aa3 = ru_cargo_bay ; 9 :
9018: LD_ADDR_VAR 0 9
9022: PUSH
9023: LD_INT 51
9025: ST_TO_ADDR
9026: GO 9067
9028: LD_INT 9
9030: DOUBLE
9031: EQUAL
9032: IFTRUE 9036
9034: GO 9047
9036: POP
// aa3 = ru_crane ; 10 :
9037: LD_ADDR_VAR 0 9
9041: PUSH
9042: LD_INT 52
9044: ST_TO_ADDR
9045: GO 9067
9047: LD_INT 10
9049: DOUBLE
9050: EQUAL
9051: IFTRUE 9055
9053: GO 9066
9055: POP
// aa3 = ru_bulldozer ; end ;
9056: LD_ADDR_VAR 0 9
9060: PUSH
9061: LD_INT 53
9063: ST_TO_ADDR
9064: GO 9067
9066: POP
// if pom1 in [ 1 , 2 , 3 , 4 ] then
9067: LD_VAR 0 2
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: LD_INT 2
9077: PUSH
9078: LD_INT 3
9080: PUSH
9081: LD_INT 4
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: IN
9090: IFFALSE 9110
// pom2 = Rand ( 1 , 4 ) else
9092: LD_ADDR_VAR 0 3
9096: PUSH
9097: LD_INT 1
9099: PPUSH
9100: LD_INT 4
9102: PPUSH
9103: CALL_OW 12
9107: ST_TO_ADDR
9108: GO 9126
// pom2 = Rand ( 3 , 4 ) ;
9110: LD_ADDR_VAR 0 3
9114: PUSH
9115: LD_INT 3
9117: PPUSH
9118: LD_INT 4
9120: PPUSH
9121: CALL_OW 12
9125: ST_TO_ADDR
// case pom2 of 1 :
9126: LD_VAR 0 3
9130: PUSH
9131: LD_INT 1
9133: DOUBLE
9134: EQUAL
9135: IFTRUE 9139
9137: GO 9150
9139: POP
// aa1 = ru_medium_wheeled ; 2 :
9140: LD_ADDR_VAR 0 7
9144: PUSH
9145: LD_INT 21
9147: ST_TO_ADDR
9148: GO 9208
9150: LD_INT 2
9152: DOUBLE
9153: EQUAL
9154: IFTRUE 9158
9156: GO 9169
9158: POP
// aa1 = ru_medium_tracked ; 3 :
9159: LD_ADDR_VAR 0 7
9163: PUSH
9164: LD_INT 22
9166: ST_TO_ADDR
9167: GO 9208
9169: LD_INT 3
9171: DOUBLE
9172: EQUAL
9173: IFTRUE 9177
9175: GO 9188
9177: POP
// aa1 = ru_heavy_wheeled ; 4 :
9178: LD_ADDR_VAR 0 7
9182: PUSH
9183: LD_INT 23
9185: ST_TO_ADDR
9186: GO 9208
9188: LD_INT 4
9190: DOUBLE
9191: EQUAL
9192: IFTRUE 9196
9194: GO 9207
9196: POP
// aa1 = ru_heavy_tracked ; end ;
9197: LD_ADDR_VAR 0 7
9201: PUSH
9202: LD_INT 24
9204: ST_TO_ADDR
9205: GO 9208
9207: POP
// pom3 = Rand ( 1 , 2 ) ;
9208: LD_ADDR_VAR 0 4
9212: PUSH
9213: LD_INT 1
9215: PPUSH
9216: LD_INT 2
9218: PPUSH
9219: CALL_OW 12
9223: ST_TO_ADDR
// case pom3 of 1 :
9224: LD_VAR 0 4
9228: PUSH
9229: LD_INT 1
9231: DOUBLE
9232: EQUAL
9233: IFTRUE 9237
9235: GO 9248
9237: POP
// aa2 = engine_combustion ; 2 :
9238: LD_ADDR_VAR 0 8
9242: PUSH
9243: LD_INT 1
9245: ST_TO_ADDR
9246: GO 9268
9248: LD_INT 2
9250: DOUBLE
9251: EQUAL
9252: IFTRUE 9256
9254: GO 9267
9256: POP
// aa2 = engine_siberite ; end ;
9257: LD_ADDR_VAR 0 8
9261: PUSH
9262: LD_INT 3
9264: ST_TO_ADDR
9265: GO 9268
9267: POP
// pom4 = Rand ( 1 , 2 ) ;
9268: LD_ADDR_VAR 0 5
9272: PUSH
9273: LD_INT 1
9275: PPUSH
9276: LD_INT 2
9278: PPUSH
9279: CALL_OW 12
9283: ST_TO_ADDR
// case pom4 of 1 :
9284: LD_VAR 0 5
9288: PUSH
9289: LD_INT 1
9291: DOUBLE
9292: EQUAL
9293: IFTRUE 9297
9295: GO 9308
9297: POP
// aa4 = control_manual ; 2 :
9298: LD_ADDR_VAR 0 10
9302: PUSH
9303: LD_INT 1
9305: ST_TO_ADDR
9306: GO 9328
9308: LD_INT 2
9310: DOUBLE
9311: EQUAL
9312: IFTRUE 9316
9314: GO 9327
9316: POP
// aa4 = control_computer ; end ;
9317: LD_ADDR_VAR 0 10
9321: PUSH
9322: LD_INT 3
9324: ST_TO_ADDR
9325: GO 9328
9327: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
9328: LD_ADDR_VAR 0 6
9332: PUSH
9333: LD_VAR 0 7
9337: PUSH
9338: LD_VAR 0 8
9342: PUSH
9343: LD_VAR 0 9
9347: PUSH
9348: LD_VAR 0 10
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: ST_TO_ADDR
// result = aa ;
9359: LD_ADDR_VAR 0 1
9363: PUSH
9364: LD_VAR 0 6
9368: ST_TO_ADDR
// end ;
9369: LD_VAR 0 1
9373: RET
// every 0 0$1 trigger FilterUnitsInArea ( zona , [ f_not , [ f_side , 0 ] ] ) > 0 do var zony ; var pom , i ; var UN ; var p1 , p2 ;
9374: LD_INT 25
9376: PPUSH
9377: LD_INT 3
9379: PUSH
9380: LD_INT 22
9382: PUSH
9383: LD_INT 0
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PPUSH
9394: CALL_OW 70
9398: PUSH
9399: LD_INT 0
9401: GREATER
9402: IFFALSE 9595
9404: GO 9406
9406: DISABLE
9407: LD_INT 0
9409: PPUSH
9410: PPUSH
9411: PPUSH
9412: PPUSH
9413: PPUSH
9414: PPUSH
// begin zony = [ z1 , z2 , z3 , z4 , z5 , z6 , z7 , z8 , z9 , z10 , z11 , z12 , z13 , z14 , z15 , z16 , z17 , z18 , z19 , z20 ] ;
9415: LD_ADDR_VAR 0 1
9419: PUSH
9420: LD_INT 5
9422: PUSH
9423: LD_INT 6
9425: PUSH
9426: LD_INT 7
9428: PUSH
9429: LD_INT 8
9431: PUSH
9432: LD_INT 9
9434: PUSH
9435: LD_INT 10
9437: PUSH
9438: LD_INT 11
9440: PUSH
9441: LD_INT 12
9443: PUSH
9444: LD_INT 20
9446: PUSH
9447: LD_INT 13
9449: PUSH
9450: LD_INT 14
9452: PUSH
9453: LD_INT 21
9455: PUSH
9456: LD_INT 15
9458: PUSH
9459: LD_INT 16
9461: PUSH
9462: LD_INT 17
9464: PUSH
9465: LD_INT 18
9467: PUSH
9468: LD_INT 19
9470: PUSH
9471: LD_INT 22
9473: PUSH
9474: LD_INT 23
9476: PUSH
9477: LD_INT 24
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: ST_TO_ADDR
// for i in zony do
9502: LD_ADDR_VAR 0 3
9506: PUSH
9507: LD_VAR 0 1
9511: PUSH
9512: FOR_IN
9513: IFFALSE 9592
// begin pom = FilterUnitsInArea ( i , [ f_not , [ f_side , 0 ] ] ) ;
9515: LD_ADDR_VAR 0 2
9519: PUSH
9520: LD_VAR 0 3
9524: PPUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 22
9530: PUSH
9531: LD_INT 0
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PPUSH
9542: CALL_OW 70
9546: ST_TO_ADDR
// if pom > 0 then
9547: LD_VAR 0 2
9551: PUSH
9552: LD_INT 0
9554: GREATER
9555: IFFALSE 9590
// begin p1 = GetSide ( pom [ 1 ] ) ;
9557: LD_ADDR_VAR 0 5
9561: PUSH
9562: LD_VAR 0 2
9566: PUSH
9567: LD_INT 1
9569: ARRAY
9570: PPUSH
9571: CALL_OW 255
9575: ST_TO_ADDR
// zapis_do_fronty ( i , p1 ) ;
9576: LD_VAR 0 3
9580: PPUSH
9581: LD_VAR 0 5
9585: PPUSH
9586: CALL 9743 0 2
// end ; end ;
9590: GO 9512
9592: POP
9593: POP
// enable ;
9594: ENABLE
// end ;
9595: PPOPN 6
9597: END
// every 0 0$3 do var poc ; var p1 , p2 ; var j , i ;
9598: GO 9600
9600: DISABLE
9601: LD_INT 0
9603: PPUSH
9604: PPUSH
9605: PPUSH
9606: PPUSH
9607: PPUSH
// begin poc = 1 ;
9608: LD_ADDR_VAR 0 1
9612: PUSH
9613: LD_INT 1
9615: ST_TO_ADDR
// for i in POINTY do
9616: LD_ADDR_VAR 0 5
9620: PUSH
9621: LD_EXP 39
9625: PUSH
9626: FOR_IN
9627: IFFALSE 9737
// begin if i >= chance_find then
9629: LD_VAR 0 5
9633: PUSH
9634: LD_EXP 28
9638: GREATEREQUAL
9639: IFFALSE 9721
// begin for j = 1 to 8 do
9641: LD_ADDR_VAR 0 4
9645: PUSH
9646: DOUBLE
9647: LD_INT 1
9649: DEC
9650: ST_TO_ADDR
9651: LD_INT 8
9653: PUSH
9654: FOR_TO
9655: IFFALSE 9689
// if Side_Positions [ j ] = poc then
9657: LD_EXP 32
9661: PUSH
9662: LD_VAR 0 4
9666: ARRAY
9667: PUSH
9668: LD_VAR 0 1
9672: EQUAL
9673: IFFALSE 9687
// begin p1 = j ;
9675: LD_ADDR_VAR 0 2
9679: PUSH
9680: LD_VAR 0 4
9684: ST_TO_ADDR
// break ;
9685: GO 9689
// end ;
9687: GO 9654
9689: POP
9690: POP
// p2 = Side_Nations [ j ] ;
9691: LD_ADDR_VAR 0 3
9695: PUSH
9696: LD_EXP 33
9700: PUSH
9701: LD_VAR 0 4
9705: ARRAY
9706: ST_TO_ADDR
// find_clovicka ( p1 , p2 ) ;
9707: LD_VAR 0 2
9711: PPUSH
9712: LD_VAR 0 3
9716: PPUSH
9717: CALL 10067 0 2
// end ; poc = poc + 1 ;
9721: LD_ADDR_VAR 0 1
9725: PUSH
9726: LD_VAR 0 1
9730: PUSH
9731: LD_INT 1
9733: PLUS
9734: ST_TO_ADDR
// end ;
9735: GO 9626
9737: POP
9738: POP
// enable ;
9739: ENABLE
// end ;
9740: PPOPN 5
9742: END
// function zapis_do_fronty ( zo , side ) ; var pom ; begin
9743: LD_INT 0
9745: PPUSH
9746: PPUSH
// pom = 0 ;
9747: LD_ADDR_VAR 0 4
9751: PUSH
9752: LD_INT 0
9754: ST_TO_ADDR
// pom = Side_Positions [ side ] ;
9755: LD_ADDR_VAR 0 4
9759: PUSH
9760: LD_EXP 32
9764: PUSH
9765: LD_VAR 0 2
9769: ARRAY
9770: ST_TO_ADDR
// if pom = 0 then
9771: LD_VAR 0 4
9775: PUSH
9776: LD_INT 0
9778: EQUAL
9779: IFFALSE 9788
// msg ( konec ... chyba ) ;
9781: LD_STRING konec ... chyba
9783: PPUSH
9784: CALL_OW 100
// case pom of 1 :
9788: LD_VAR 0 4
9792: PUSH
9793: LD_INT 1
9795: DOUBLE
9796: EQUAL
9797: IFTRUE 9801
9799: GO 9860
9801: POP
// POINTY = [ POINTY [ 1 ] union [ zo ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] ] ; 2 :
9802: LD_ADDR_EXP 39
9806: PUSH
9807: LD_EXP 39
9811: PUSH
9812: LD_INT 1
9814: ARRAY
9815: PUSH
9816: LD_VAR 0 1
9820: PUSH
9821: EMPTY
9822: LIST
9823: UNION
9824: PUSH
9825: LD_EXP 39
9829: PUSH
9830: LD_INT 2
9832: ARRAY
9833: PUSH
9834: LD_EXP 39
9838: PUSH
9839: LD_INT 3
9841: ARRAY
9842: PUSH
9843: LD_EXP 39
9847: PUSH
9848: LD_INT 4
9850: ARRAY
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: ST_TO_ADDR
9858: GO 10062
9860: LD_INT 2
9862: DOUBLE
9863: EQUAL
9864: IFTRUE 9868
9866: GO 9927
9868: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] union [ zo ] , POINTY [ 3 ] , POINTY [ 4 ] ] ; 3 :
9869: LD_ADDR_EXP 39
9873: PUSH
9874: LD_EXP 39
9878: PUSH
9879: LD_INT 1
9881: ARRAY
9882: PUSH
9883: LD_EXP 39
9887: PUSH
9888: LD_INT 2
9890: ARRAY
9891: PUSH
9892: LD_VAR 0 1
9896: PUSH
9897: EMPTY
9898: LIST
9899: UNION
9900: PUSH
9901: LD_EXP 39
9905: PUSH
9906: LD_INT 3
9908: ARRAY
9909: PUSH
9910: LD_EXP 39
9914: PUSH
9915: LD_INT 4
9917: ARRAY
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: ST_TO_ADDR
9925: GO 10062
9927: LD_INT 3
9929: DOUBLE
9930: EQUAL
9931: IFTRUE 9935
9933: GO 9994
9935: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] union [ zo ] , POINTY [ 4 ] ] ; 4 :
9936: LD_ADDR_EXP 39
9940: PUSH
9941: LD_EXP 39
9945: PUSH
9946: LD_INT 1
9948: ARRAY
9949: PUSH
9950: LD_EXP 39
9954: PUSH
9955: LD_INT 2
9957: ARRAY
9958: PUSH
9959: LD_EXP 39
9963: PUSH
9964: LD_INT 3
9966: ARRAY
9967: PUSH
9968: LD_VAR 0 1
9972: PUSH
9973: EMPTY
9974: LIST
9975: UNION
9976: PUSH
9977: LD_EXP 39
9981: PUSH
9982: LD_INT 4
9984: ARRAY
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: ST_TO_ADDR
9992: GO 10062
9994: LD_INT 4
9996: DOUBLE
9997: EQUAL
9998: IFTRUE 10002
10000: GO 10061
10002: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] union [ zo ] ] ; end ;
10003: LD_ADDR_EXP 39
10007: PUSH
10008: LD_EXP 39
10012: PUSH
10013: LD_INT 1
10015: ARRAY
10016: PUSH
10017: LD_EXP 39
10021: PUSH
10022: LD_INT 2
10024: ARRAY
10025: PUSH
10026: LD_EXP 39
10030: PUSH
10031: LD_INT 3
10033: ARRAY
10034: PUSH
10035: LD_EXP 39
10039: PUSH
10040: LD_INT 4
10042: ARRAY
10043: PUSH
10044: LD_VAR 0 1
10048: PUSH
10049: EMPTY
10050: LIST
10051: UNION
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: ST_TO_ADDR
10059: GO 10062
10061: POP
// end ;
10062: LD_VAR 0 3
10066: RET
// function find_clovicka ( side , nat ) ; var pom ; var un ; var unat ; var pomridic ; var pozice ; begin
10067: LD_INT 0
10069: PPUSH
10070: PPUSH
10071: PPUSH
10072: PPUSH
10073: PPUSH
10074: PPUSH
// pozice = Side_Positions [ side ] ;
10075: LD_ADDR_VAR 0 8
10079: PUSH
10080: LD_EXP 32
10084: PUSH
10085: LD_VAR 0 1
10089: ARRAY
10090: ST_TO_ADDR
// wait ( Rand ( 1 , 0 0$10 ) ) ;
10091: LD_INT 1
10093: PPUSH
10094: LD_INT 350
10096: PPUSH
10097: CALL_OW 12
10101: PPUSH
10102: CALL_OW 67
// pom = Rand ( 1 , ZMIZELI_LIDI [ pozice ] + 0 ) ;
10106: LD_ADDR_VAR 0 4
10110: PUSH
10111: LD_INT 1
10113: PPUSH
10114: LD_EXP 38
10118: PUSH
10119: LD_VAR 0 8
10123: ARRAY
10124: PUSH
10125: LD_INT 0
10127: PLUS
10128: PPUSH
10129: CALL_OW 12
10133: ST_TO_ADDR
// un = ZMIZELI_LIDI [ pozice ] [ pom ] ;
10134: LD_ADDR_VAR 0 5
10138: PUSH
10139: LD_EXP 38
10143: PUSH
10144: LD_VAR 0 8
10148: ARRAY
10149: PUSH
10150: LD_VAR 0 4
10154: ARRAY
10155: ST_TO_ADDR
// SetSide ( un , side ) ;
10156: LD_VAR 0 5
10160: PPUSH
10161: LD_VAR 0 1
10165: PPUSH
10166: CALL_OW 235
// if GetType ( un ) = unit_vehicle then
10170: LD_VAR 0 5
10174: PPUSH
10175: CALL_OW 247
10179: PUSH
10180: LD_INT 2
10182: EQUAL
10183: IFFALSE 10304
// if GetControl ( un ) = control_manual then
10185: LD_VAR 0 5
10189: PPUSH
10190: CALL_OW 263
10194: PUSH
10195: LD_INT 1
10197: EQUAL
10198: IFFALSE 10304
// if IsDrivenBy ( un ) = 0 then
10200: LD_VAR 0 5
10204: PPUSH
10205: CALL_OW 311
10209: PUSH
10210: LD_INT 0
10212: EQUAL
10213: IFFALSE 10275
// begin uc_side = side ;
10215: LD_ADDR_OWVAR 20
10219: PUSH
10220: LD_VAR 0 1
10224: ST_TO_ADDR
// uc_nation = nat ;
10225: LD_ADDR_OWVAR 21
10229: PUSH
10230: LD_VAR 0 2
10234: ST_TO_ADDR
// pomridic = get_human ( get_sex , class_mechanic , 1 ,  ) ;
10235: LD_ADDR_VAR 0 7
10239: PUSH
10240: CALL 7293 0 0
10244: PPUSH
10245: LD_INT 3
10247: PPUSH
10248: LD_INT 1
10250: PPUSH
10251: LD_STRING 
10253: PPUSH
10254: CALL 7235 0 4
10258: ST_TO_ADDR
// PlaceHumanInUnit ( pomridic , un ) ;
10259: LD_VAR 0 7
10263: PPUSH
10264: LD_VAR 0 5
10268: PPUSH
10269: CALL_OW 52
// end else
10273: GO 10304
// begin pomridic = IsDrivenBy ( un ) ;
10275: LD_ADDR_VAR 0 7
10279: PUSH
10280: LD_VAR 0 5
10284: PPUSH
10285: CALL_OW 311
10289: ST_TO_ADDR
// SetSide ( pomridic , side ) ;
10290: LD_VAR 0 7
10294: PPUSH
10295: LD_VAR 0 1
10299: PPUSH
10300: CALL_OW 235
// end ; if IsDrivenBy ( un ) > 0 then
10304: LD_VAR 0 5
10308: PPUSH
10309: CALL_OW 311
10313: PUSH
10314: LD_INT 0
10316: GREATER
10317: IFFALSE 10338
// SetTag ( IsDrivenBy ( un ) , 0 ) else
10319: LD_VAR 0 5
10323: PPUSH
10324: CALL_OW 311
10328: PPUSH
10329: LD_INT 0
10331: PPUSH
10332: CALL_OW 109
10336: GO 10350
// SetTag ( un , 0 ) ;
10338: LD_VAR 0 5
10342: PPUSH
10343: LD_INT 0
10345: PPUSH
10346: CALL_OW 109
// PlaceUnitArea ( un , new_people , true ) ;
10350: LD_VAR 0 5
10354: PPUSH
10355: LD_INT 26
10357: PPUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 49
// case pozice of 1 :
10365: LD_VAR 0 8
10369: PUSH
10370: LD_INT 1
10372: DOUBLE
10373: EQUAL
10374: IFTRUE 10378
10376: GO 10474
10378: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] diff un , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ;
10379: LD_ADDR_EXP 38
10383: PUSH
10384: LD_EXP 38
10388: PUSH
10389: LD_INT 1
10391: ARRAY
10392: PUSH
10393: LD_VAR 0 5
10397: DIFF
10398: PUSH
10399: LD_EXP 38
10403: PUSH
10404: LD_INT 2
10406: ARRAY
10407: PUSH
10408: LD_EXP 38
10412: PUSH
10413: LD_INT 3
10415: ARRAY
10416: PUSH
10417: LD_EXP 38
10421: PUSH
10422: LD_INT 4
10424: ARRAY
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: ST_TO_ADDR
// POINTY = [ [ ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] ] ;
10432: LD_ADDR_EXP 39
10436: PUSH
10437: EMPTY
10438: PUSH
10439: LD_EXP 39
10443: PUSH
10444: LD_INT 2
10446: ARRAY
10447: PUSH
10448: LD_EXP 39
10452: PUSH
10453: LD_INT 3
10455: ARRAY
10456: PUSH
10457: LD_EXP 39
10461: PUSH
10462: LD_INT 4
10464: ARRAY
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: ST_TO_ADDR
// end ; 2 :
10472: GO 10787
10474: LD_INT 2
10476: DOUBLE
10477: EQUAL
10478: IFTRUE 10482
10480: GO 10578
10482: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] diff un , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ;
10483: LD_ADDR_EXP 38
10487: PUSH
10488: LD_EXP 38
10492: PUSH
10493: LD_INT 1
10495: ARRAY
10496: PUSH
10497: LD_EXP 38
10501: PUSH
10502: LD_INT 2
10504: ARRAY
10505: PUSH
10506: LD_VAR 0 5
10510: DIFF
10511: PUSH
10512: LD_EXP 38
10516: PUSH
10517: LD_INT 3
10519: ARRAY
10520: PUSH
10521: LD_EXP 38
10525: PUSH
10526: LD_INT 4
10528: ARRAY
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , [ ] , POINTY [ 3 ] , POINTY [ 4 ] ] ;
10536: LD_ADDR_EXP 39
10540: PUSH
10541: LD_EXP 39
10545: PUSH
10546: LD_INT 1
10548: ARRAY
10549: PUSH
10550: EMPTY
10551: PUSH
10552: LD_EXP 39
10556: PUSH
10557: LD_INT 3
10559: ARRAY
10560: PUSH
10561: LD_EXP 39
10565: PUSH
10566: LD_INT 4
10568: ARRAY
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: ST_TO_ADDR
// end ; 3 :
10576: GO 10787
10578: LD_INT 3
10580: DOUBLE
10581: EQUAL
10582: IFTRUE 10586
10584: GO 10682
10586: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] diff un , ZMIZELI_LIDI [ 4 ] ] ;
10587: LD_ADDR_EXP 38
10591: PUSH
10592: LD_EXP 38
10596: PUSH
10597: LD_INT 1
10599: ARRAY
10600: PUSH
10601: LD_EXP 38
10605: PUSH
10606: LD_INT 2
10608: ARRAY
10609: PUSH
10610: LD_EXP 38
10614: PUSH
10615: LD_INT 3
10617: ARRAY
10618: PUSH
10619: LD_VAR 0 5
10623: DIFF
10624: PUSH
10625: LD_EXP 38
10629: PUSH
10630: LD_INT 4
10632: ARRAY
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , [ ] , POINTY [ 4 ] ] ;
10640: LD_ADDR_EXP 39
10644: PUSH
10645: LD_EXP 39
10649: PUSH
10650: LD_INT 1
10652: ARRAY
10653: PUSH
10654: LD_EXP 39
10658: PUSH
10659: LD_INT 2
10661: ARRAY
10662: PUSH
10663: EMPTY
10664: PUSH
10665: LD_EXP 39
10669: PUSH
10670: LD_INT 4
10672: ARRAY
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: ST_TO_ADDR
// end ; 4 :
10680: GO 10787
10682: LD_INT 4
10684: DOUBLE
10685: EQUAL
10686: IFTRUE 10690
10688: GO 10786
10690: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] diff un ] ;
10691: LD_ADDR_EXP 38
10695: PUSH
10696: LD_EXP 38
10700: PUSH
10701: LD_INT 1
10703: ARRAY
10704: PUSH
10705: LD_EXP 38
10709: PUSH
10710: LD_INT 2
10712: ARRAY
10713: PUSH
10714: LD_EXP 38
10718: PUSH
10719: LD_INT 3
10721: ARRAY
10722: PUSH
10723: LD_EXP 38
10727: PUSH
10728: LD_INT 4
10730: ARRAY
10731: PUSH
10732: LD_VAR 0 5
10736: DIFF
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] , [ ] ] ;
10744: LD_ADDR_EXP 39
10748: PUSH
10749: LD_EXP 39
10753: PUSH
10754: LD_INT 1
10756: ARRAY
10757: PUSH
10758: LD_EXP 39
10762: PUSH
10763: LD_INT 2
10765: ARRAY
10766: PUSH
10767: LD_EXP 39
10771: PUSH
10772: LD_INT 3
10774: ARRAY
10775: PUSH
10776: EMPTY
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: ST_TO_ADDR
// end ; end ;
10784: GO 10787
10786: POP
// wait ( 1 1$0 ) ;
10787: LD_INT 2100
10789: PPUSH
10790: CALL_OW 67
// end ;
10794: LD_VAR 0 3
10798: RET
// every 1 1$0 do var i , k ; var pom ; var barva ; var ZL ;
10799: GO 10801
10801: DISABLE
10802: LD_INT 0
10804: PPUSH
10805: PPUSH
10806: PPUSH
10807: PPUSH
10808: PPUSH
// begin for i := 1 to 4 do
10809: LD_ADDR_VAR 0 1
10813: PUSH
10814: DOUBLE
10815: LD_INT 1
10817: DEC
10818: ST_TO_ADDR
10819: LD_INT 4
10821: PUSH
10822: FOR_TO
10823: IFFALSE 11178
// if ZMIZELI_LIDI [ i ] < 5 then
10825: LD_EXP 38
10829: PUSH
10830: LD_VAR 0 1
10834: ARRAY
10835: PUSH
10836: LD_INT 5
10838: LESS
10839: IFFALSE 11176
// begin for k := 1 to 8 do
10841: LD_ADDR_VAR 0 2
10845: PUSH
10846: DOUBLE
10847: LD_INT 1
10849: DEC
10850: ST_TO_ADDR
10851: LD_INT 8
10853: PUSH
10854: FOR_TO
10855: IFFALSE 10889
// if Side_Positions [ k ] = i then
10857: LD_EXP 32
10861: PUSH
10862: LD_VAR 0 2
10866: ARRAY
10867: PUSH
10868: LD_VAR 0 1
10872: EQUAL
10873: IFFALSE 10887
// begin barva = k ;
10875: LD_ADDR_VAR 0 4
10879: PUSH
10880: LD_VAR 0 2
10884: ST_TO_ADDR
// break ;
10885: GO 10889
// end ;
10887: GO 10854
10889: POP
10890: POP
// if Prob ( 10 ) then
10891: LD_INT 10
10893: PPUSH
10894: CALL_OW 13
10898: IFFALSE 10917
// pom = vytvor_nove_auto ( barva ) else
10900: LD_ADDR_VAR 0 3
10904: PUSH
10905: LD_VAR 0 4
10909: PPUSH
10910: CALL 7328 0 1
10914: ST_TO_ADDR
10915: GO 10932
// pom = vytvor_noveho_cloveka ( barva ) ;
10917: LD_ADDR_VAR 0 3
10921: PUSH
10922: LD_VAR 0 4
10926: PPUSH
10927: CALL 6607 0 1
10931: ST_TO_ADDR
// ZL = ZMIZELI_LIDI [ i ] ^ pom ;
10932: LD_ADDR_VAR 0 5
10936: PUSH
10937: LD_EXP 38
10941: PUSH
10942: LD_VAR 0 1
10946: ARRAY
10947: PUSH
10948: LD_VAR 0 3
10952: ADD
10953: ST_TO_ADDR
// case i of 1 :
10954: LD_VAR 0 1
10958: PUSH
10959: LD_INT 1
10961: DOUBLE
10962: EQUAL
10963: IFTRUE 10967
10965: GO 11013
10967: POP
// ZMIZELI_LIDI = [ ZL , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 2 :
10968: LD_ADDR_EXP 38
10972: PUSH
10973: LD_VAR 0 5
10977: PUSH
10978: LD_EXP 38
10982: PUSH
10983: LD_INT 2
10985: ARRAY
10986: PUSH
10987: LD_EXP 38
10991: PUSH
10992: LD_INT 3
10994: ARRAY
10995: PUSH
10996: LD_EXP 38
11000: PUSH
11001: LD_INT 4
11003: ARRAY
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: ST_TO_ADDR
11011: GO 11176
11013: LD_INT 2
11015: DOUBLE
11016: EQUAL
11017: IFTRUE 11021
11019: GO 11067
11021: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZL , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 3 :
11022: LD_ADDR_EXP 38
11026: PUSH
11027: LD_EXP 38
11031: PUSH
11032: LD_INT 1
11034: ARRAY
11035: PUSH
11036: LD_VAR 0 5
11040: PUSH
11041: LD_EXP 38
11045: PUSH
11046: LD_INT 3
11048: ARRAY
11049: PUSH
11050: LD_EXP 38
11054: PUSH
11055: LD_INT 4
11057: ARRAY
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: ST_TO_ADDR
11065: GO 11176
11067: LD_INT 3
11069: DOUBLE
11070: EQUAL
11071: IFTRUE 11075
11073: GO 11121
11075: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZL , ZMIZELI_LIDI [ 4 ] ] ; 4 :
11076: LD_ADDR_EXP 38
11080: PUSH
11081: LD_EXP 38
11085: PUSH
11086: LD_INT 1
11088: ARRAY
11089: PUSH
11090: LD_EXP 38
11094: PUSH
11095: LD_INT 2
11097: ARRAY
11098: PUSH
11099: LD_VAR 0 5
11103: PUSH
11104: LD_EXP 38
11108: PUSH
11109: LD_INT 4
11111: ARRAY
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: ST_TO_ADDR
11119: GO 11176
11121: LD_INT 4
11123: DOUBLE
11124: EQUAL
11125: IFTRUE 11129
11127: GO 11175
11129: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZL ] ; end ;
11130: LD_ADDR_EXP 38
11134: PUSH
11135: LD_EXP 38
11139: PUSH
11140: LD_INT 1
11142: ARRAY
11143: PUSH
11144: LD_EXP 38
11148: PUSH
11149: LD_INT 2
11151: ARRAY
11152: PUSH
11153: LD_EXP 38
11157: PUSH
11158: LD_INT 3
11160: ARRAY
11161: PUSH
11162: LD_VAR 0 5
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: ST_TO_ADDR
11173: GO 11176
11175: POP
// end ;
11176: GO 10822
11178: POP
11179: POP
// enable ;
11180: ENABLE
// end ;
11181: PPOPN 5
11183: END
// every 0 0$3 do var i ; var poz ; var txt , text ;
11184: GO 11186
11186: DISABLE
11187: LD_INT 0
11189: PPUSH
11190: PPUSH
11191: PPUSH
11192: PPUSH
// begin for i := 1 to 8 do
11193: LD_ADDR_VAR 0 1
11197: PUSH
11198: DOUBLE
11199: LD_INT 1
11201: DEC
11202: ST_TO_ADDR
11203: LD_INT 8
11205: PUSH
11206: FOR_TO
11207: IFFALSE 11306
// begin poz = Side_Positions [ i ] ;
11209: LD_ADDR_VAR 0 2
11213: PUSH
11214: LD_EXP 32
11218: PUSH
11219: LD_VAR 0 1
11223: ARRAY
11224: ST_TO_ADDR
// if poz > 0 and Your_Side = i then
11225: LD_VAR 0 2
11229: PUSH
11230: LD_INT 0
11232: GREATER
11233: PUSH
11234: LD_OWVAR 2
11238: PUSH
11239: LD_VAR 0 1
11243: EQUAL
11244: AND
11245: IFFALSE 11304
// begin txt = POINTY [ poz ] + 0 ;
11247: LD_ADDR_VAR 0 3
11251: PUSH
11252: LD_EXP 39
11256: PUSH
11257: LD_VAR 0 2
11261: ARRAY
11262: PUSH
11263: LD_INT 0
11265: PLUS
11266: ST_TO_ADDR
// text = txt &  of  & chance_find &  points found ;
11267: LD_ADDR_VAR 0 4
11271: PUSH
11272: LD_VAR 0 3
11276: PUSH
11277: LD_STRING  of 
11279: STR
11280: PUSH
11281: LD_EXP 28
11285: STR
11286: PUSH
11287: LD_STRING  points found
11289: STR
11290: ST_TO_ADDR
// ExtraStrings = [ text ] ;
11291: LD_ADDR_EXP 40
11295: PUSH
11296: LD_VAR 0 4
11300: PUSH
11301: EMPTY
11302: LIST
11303: ST_TO_ADDR
// end ; end ;
11304: GO 11206
11306: POP
11307: POP
// enable ;
11308: ENABLE
// end ;
11309: PPOPN 4
11311: END
// every 0 0$3 trigger chance_loose <> 0 do var i , j ; var pom , pom1 ; var apes ; var zo ; var dist ; var zmena ;
11312: LD_EXP 27
11316: PUSH
11317: LD_INT 0
11319: NONEQUAL
11320: IFFALSE 11893
11322: GO 11324
11324: DISABLE
11325: LD_INT 0
11327: PPUSH
11328: PPUSH
11329: PPUSH
11330: PPUSH
11331: PPUSH
11332: PPUSH
11333: PPUSH
11334: PPUSH
// begin apes = [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] ;
11335: LD_ADDR_VAR 0 5
11339: PUSH
11340: LD_INT 12
11342: PUSH
11343: LD_INT 16
11345: PUSH
11346: LD_INT 17
11348: PUSH
11349: LD_INT 15
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: ST_TO_ADDR
// for i := 1 to 8 do
11358: LD_ADDR_VAR 0 1
11362: PUSH
11363: DOUBLE
11364: LD_INT 1
11366: DEC
11367: ST_TO_ADDR
11368: LD_INT 8
11370: PUSH
11371: FOR_TO
11372: IFFALSE 11890
// begin case Side_Positions [ i ] of 1 :
11374: LD_EXP 32
11378: PUSH
11379: LD_VAR 0 1
11383: ARRAY
11384: PUSH
11385: LD_INT 1
11387: DOUBLE
11388: EQUAL
11389: IFTRUE 11393
11391: GO 11404
11393: POP
// zo = Base1 ; 2 :
11394: LD_ADDR_VAR 0 6
11398: PUSH
11399: LD_INT 27
11401: ST_TO_ADDR
11402: GO 11464
11404: LD_INT 2
11406: DOUBLE
11407: EQUAL
11408: IFTRUE 11412
11410: GO 11423
11412: POP
// zo = Base2 ; 3 :
11413: LD_ADDR_VAR 0 6
11417: PUSH
11418: LD_INT 28
11420: ST_TO_ADDR
11421: GO 11464
11423: LD_INT 3
11425: DOUBLE
11426: EQUAL
11427: IFTRUE 11431
11429: GO 11442
11431: POP
// zo = Base3 ; 4 :
11432: LD_ADDR_VAR 0 6
11436: PUSH
11437: LD_INT 29
11439: ST_TO_ADDR
11440: GO 11464
11442: LD_INT 4
11444: DOUBLE
11445: EQUAL
11446: IFTRUE 11450
11448: GO 11461
11450: POP
// zo = Base4 ; else
11451: LD_ADDR_VAR 0 6
11455: PUSH
11456: LD_INT 30
11458: ST_TO_ADDR
11459: GO 11464
11461: POP
// continue ; end ;
11462: GO 11371
// pom = FilterUnitsExceptArea ( zo , [ [ f_side , i ] , [ f_type , unit_human ] ] ) ;
11464: LD_ADDR_VAR 0 3
11468: PUSH
11469: LD_VAR 0 6
11473: PPUSH
11474: LD_INT 22
11476: PUSH
11477: LD_VAR 0 1
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 21
11488: PUSH
11489: LD_INT 1
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PPUSH
11500: CALL_OW 71
11504: ST_TO_ADDR
// pom1 = FilterUnitsExceptArea ( zo , [ [ f_side , i ] , [ f_type , unit_vehicle ] ] ) ;
11505: LD_ADDR_VAR 0 4
11509: PUSH
11510: LD_VAR 0 6
11514: PPUSH
11515: LD_INT 22
11517: PUSH
11518: LD_VAR 0 1
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: PUSH
11527: LD_INT 21
11529: PUSH
11530: LD_INT 2
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PPUSH
11541: CALL_OW 71
11545: ST_TO_ADDR
// for j in pom1 do
11546: LD_ADDR_VAR 0 2
11550: PUSH
11551: LD_VAR 0 4
11555: PUSH
11556: FOR_IN
11557: IFFALSE 11597
// if IsDrivenBy ( j ) <> 0 then
11559: LD_VAR 0 2
11563: PPUSH
11564: CALL_OW 311
11568: PUSH
11569: LD_INT 0
11571: NONEQUAL
11572: IFFALSE 11595
// pom = pom ^ IsDrivenBy ( j ) ;
11574: LD_ADDR_VAR 0 3
11578: PUSH
11579: LD_VAR 0 3
11583: PUSH
11584: LD_VAR 0 2
11588: PPUSH
11589: CALL_OW 311
11593: ADD
11594: ST_TO_ADDR
11595: GO 11556
11597: POP
11598: POP
// for j in pom do
11599: LD_ADDR_VAR 0 2
11603: PUSH
11604: LD_VAR 0 3
11608: PUSH
11609: FOR_IN
11610: IFFALSE 11647
// if GetClass ( j ) in apes then
11612: LD_VAR 0 2
11616: PPUSH
11617: CALL_OW 257
11621: PUSH
11622: LD_VAR 0 5
11626: IN
11627: IFFALSE 11645
// pom = pom diff j ;
11629: LD_ADDR_VAR 0 3
11633: PUSH
11634: LD_VAR 0 3
11638: PUSH
11639: LD_VAR 0 2
11643: DIFF
11644: ST_TO_ADDR
11645: GO 11609
11647: POP
11648: POP
// for j in pom do
11649: LD_ADDR_VAR 0 2
11653: PUSH
11654: LD_VAR 0 3
11658: PUSH
11659: FOR_IN
11660: IFFALSE 11886
// begin dist = GetDistUnitArea ( j , zo ) ;
11662: LD_ADDR_VAR 0 7
11666: PUSH
11667: LD_VAR 0 2
11671: PPUSH
11672: LD_VAR 0 6
11676: PPUSH
11677: CALL_OW 299
11681: ST_TO_ADDR
// case dist of 1 .. 5 :
11682: LD_VAR 0 7
11686: PUSH
11687: LD_INT 1
11689: DOUBLE
11690: GREATEREQUAL
11691: IFFALSE 11699
11693: LD_INT 5
11695: DOUBLE
11696: LESSEQUAL
11697: IFTRUE 11701
11699: GO 11712
11701: POP
// zmena = 1 ; 5 .. 10 :
11702: LD_ADDR_VAR 0 8
11706: PUSH
11707: LD_INT 1
11709: ST_TO_ADDR
11710: GO 11821
11712: LD_INT 5
11714: DOUBLE
11715: GREATEREQUAL
11716: IFFALSE 11724
11718: LD_INT 10
11720: DOUBLE
11721: LESSEQUAL
11722: IFTRUE 11726
11724: GO 11737
11726: POP
// zmena = 2 ; 10 .. 15 :
11727: LD_ADDR_VAR 0 8
11731: PUSH
11732: LD_INT 2
11734: ST_TO_ADDR
11735: GO 11821
11737: LD_INT 10
11739: DOUBLE
11740: GREATEREQUAL
11741: IFFALSE 11749
11743: LD_INT 15
11745: DOUBLE
11746: LESSEQUAL
11747: IFTRUE 11751
11749: GO 11762
11751: POP
// zmena = 3 ; 15 .. 25 :
11752: LD_ADDR_VAR 0 8
11756: PUSH
11757: LD_INT 3
11759: ST_TO_ADDR
11760: GO 11821
11762: LD_INT 15
11764: DOUBLE
11765: GREATEREQUAL
11766: IFFALSE 11774
11768: LD_INT 25
11770: DOUBLE
11771: LESSEQUAL
11772: IFTRUE 11776
11774: GO 11787
11776: POP
// zmena = 4 ; 25 .. 35 :
11777: LD_ADDR_VAR 0 8
11781: PUSH
11782: LD_INT 4
11784: ST_TO_ADDR
11785: GO 11821
11787: LD_INT 25
11789: DOUBLE
11790: GREATEREQUAL
11791: IFFALSE 11799
11793: LD_INT 35
11795: DOUBLE
11796: LESSEQUAL
11797: IFTRUE 11801
11799: GO 11812
11801: POP
// zmena = 5 ; else
11802: LD_ADDR_VAR 0 8
11806: PUSH
11807: LD_INT 5
11809: ST_TO_ADDR
11810: GO 11821
11812: POP
// zmena = 6 ; end ;
11813: LD_ADDR_VAR 0 8
11817: PUSH
11818: LD_INT 6
11820: ST_TO_ADDR
// SetTag ( j , GetTag ( j ) + zmena ) ;
11821: LD_VAR 0 2
11825: PPUSH
11826: LD_VAR 0 2
11830: PPUSH
11831: CALL_OW 110
11835: PUSH
11836: LD_VAR 0 8
11840: PLUS
11841: PPUSH
11842: CALL_OW 109
// if GetTag ( j ) > chance_loose then
11846: LD_VAR 0 2
11850: PPUSH
11851: CALL_OW 110
11855: PUSH
11856: LD_EXP 27
11860: GREATER
11861: IFFALSE 11884
// begin SetTag ( j , 0 ) ;
11863: LD_VAR 0 2
11867: PPUSH
11868: LD_INT 0
11870: PPUSH
11871: CALL_OW 109
// odeber_jednotku ( j ) ;
11875: LD_VAR 0 2
11879: PPUSH
11880: CALL 11896 0 1
// end ; end ;
11884: GO 11659
11886: POP
11887: POP
// end ;
11888: GO 11371
11890: POP
11891: POP
// enable ;
11892: ENABLE
// end ;
11893: PPOPN 8
11895: END
// function odeber_jednotku ( jedn ) ; var pom ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
// if IsInUnit ( jedn ) then
11900: LD_VAR 0 1
11904: PPUSH
11905: CALL_OW 310
11909: IFFALSE 11952
// if GetType ( IsInUnit ( jedn ) ) = unit_vehicle then
11911: LD_VAR 0 1
11915: PPUSH
11916: CALL_OW 310
11920: PPUSH
11921: CALL_OW 247
11925: PUSH
11926: LD_INT 2
11928: EQUAL
11929: IFFALSE 11952
// if def_vehicles_too then
11931: LD_EXP 14
11935: IFFALSE 11952
// jedn = IsInUnit ( jedn ) ;
11937: LD_ADDR_VAR 0 1
11941: PUSH
11942: LD_VAR 0 1
11946: PPUSH
11947: CALL_OW 310
11951: ST_TO_ADDR
// if def_other_nation and Prob ( 25 ) then
11952: LD_EXP 13
11956: PUSH
11957: LD_INT 25
11959: PPUSH
11960: CALL_OW 13
11964: AND
11965: IFFALSE 11985
// pom = Rand ( 1 , 4 ) else
11967: LD_ADDR_VAR 0 3
11971: PUSH
11972: LD_INT 1
11974: PPUSH
11975: LD_INT 4
11977: PPUSH
11978: CALL_OW 12
11982: ST_TO_ADDR
11983: GO 12006
// pom = Side_Positions [ GetSide ( jedn ) ] ;
11985: LD_ADDR_VAR 0 3
11989: PUSH
11990: LD_EXP 32
11994: PUSH
11995: LD_VAR 0 1
11999: PPUSH
12000: CALL_OW 255
12004: ARRAY
12005: ST_TO_ADDR
// case pom of 1 :
12006: LD_VAR 0 3
12010: PUSH
12011: LD_INT 1
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12075
12019: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] ^ jedn , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 2 :
12020: LD_ADDR_EXP 38
12024: PUSH
12025: LD_EXP 38
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PUSH
12034: LD_VAR 0 1
12038: ADD
12039: PUSH
12040: LD_EXP 38
12044: PUSH
12045: LD_INT 2
12047: ARRAY
12048: PUSH
12049: LD_EXP 38
12053: PUSH
12054: LD_INT 3
12056: ARRAY
12057: PUSH
12058: LD_EXP 38
12062: PUSH
12063: LD_INT 4
12065: ARRAY
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: ST_TO_ADDR
12073: GO 12268
12075: LD_INT 2
12077: DOUBLE
12078: EQUAL
12079: IFTRUE 12083
12081: GO 12139
12083: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] ^ jedn , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 3 :
12084: LD_ADDR_EXP 38
12088: PUSH
12089: LD_EXP 38
12093: PUSH
12094: LD_INT 1
12096: ARRAY
12097: PUSH
12098: LD_EXP 38
12102: PUSH
12103: LD_INT 2
12105: ARRAY
12106: PUSH
12107: LD_VAR 0 1
12111: ADD
12112: PUSH
12113: LD_EXP 38
12117: PUSH
12118: LD_INT 3
12120: ARRAY
12121: PUSH
12122: LD_EXP 38
12126: PUSH
12127: LD_INT 4
12129: ARRAY
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: ST_TO_ADDR
12137: GO 12268
12139: LD_INT 3
12141: DOUBLE
12142: EQUAL
12143: IFTRUE 12147
12145: GO 12203
12147: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] ^ jedn , ZMIZELI_LIDI [ 4 ] ] ; 4 :
12148: LD_ADDR_EXP 38
12152: PUSH
12153: LD_EXP 38
12157: PUSH
12158: LD_INT 1
12160: ARRAY
12161: PUSH
12162: LD_EXP 38
12166: PUSH
12167: LD_INT 2
12169: ARRAY
12170: PUSH
12171: LD_EXP 38
12175: PUSH
12176: LD_INT 3
12178: ARRAY
12179: PUSH
12180: LD_VAR 0 1
12184: ADD
12185: PUSH
12186: LD_EXP 38
12190: PUSH
12191: LD_INT 4
12193: ARRAY
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: ST_TO_ADDR
12201: GO 12268
12203: LD_INT 4
12205: DOUBLE
12206: EQUAL
12207: IFTRUE 12211
12209: GO 12267
12211: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ^ jedn ] ; end ;
12212: LD_ADDR_EXP 38
12216: PUSH
12217: LD_EXP 38
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: PUSH
12226: LD_EXP 38
12230: PUSH
12231: LD_INT 2
12233: ARRAY
12234: PUSH
12235: LD_EXP 38
12239: PUSH
12240: LD_INT 3
12242: ARRAY
12243: PUSH
12244: LD_EXP 38
12248: PUSH
12249: LD_INT 4
12251: ARRAY
12252: PUSH
12253: LD_VAR 0 1
12257: ADD
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: ST_TO_ADDR
12265: GO 12268
12267: POP
// RemoveUnit ( jedn ) ;
12268: LD_VAR 0 1
12272: PPUSH
12273: CALL_OW 64
// end ;
12277: LD_VAR 0 2
12281: RET
// every 0 0$5 trigger chance_loose <> 0 do var i , j ; var pom , pom1 ; var apes ; var zo ;
12282: LD_EXP 27
12286: PUSH
12287: LD_INT 0
12289: NONEQUAL
12290: IFFALSE 12677
12292: GO 12294
12294: DISABLE
12295: LD_INT 0
12297: PPUSH
12298: PPUSH
12299: PPUSH
12300: PPUSH
12301: PPUSH
12302: PPUSH
// begin apes = [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] ;
12303: LD_ADDR_VAR 0 5
12307: PUSH
12308: LD_INT 12
12310: PUSH
12311: LD_INT 16
12313: PUSH
12314: LD_INT 17
12316: PUSH
12317: LD_INT 15
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: ST_TO_ADDR
// for i := 1 to 8 do
12326: LD_ADDR_VAR 0 1
12330: PUSH
12331: DOUBLE
12332: LD_INT 1
12334: DEC
12335: ST_TO_ADDR
12336: LD_INT 8
12338: PUSH
12339: FOR_TO
12340: IFFALSE 12674
// begin case Side_Positions [ i ] of 1 :
12342: LD_EXP 32
12346: PUSH
12347: LD_VAR 0 1
12351: ARRAY
12352: PUSH
12353: LD_INT 1
12355: DOUBLE
12356: EQUAL
12357: IFTRUE 12361
12359: GO 12372
12361: POP
// zo = Base1 ; 2 :
12362: LD_ADDR_VAR 0 6
12366: PUSH
12367: LD_INT 27
12369: ST_TO_ADDR
12370: GO 12432
12372: LD_INT 2
12374: DOUBLE
12375: EQUAL
12376: IFTRUE 12380
12378: GO 12391
12380: POP
// zo = Base2 ; 3 :
12381: LD_ADDR_VAR 0 6
12385: PUSH
12386: LD_INT 28
12388: ST_TO_ADDR
12389: GO 12432
12391: LD_INT 3
12393: DOUBLE
12394: EQUAL
12395: IFTRUE 12399
12397: GO 12410
12399: POP
// zo = Base3 ; 4 :
12400: LD_ADDR_VAR 0 6
12404: PUSH
12405: LD_INT 29
12407: ST_TO_ADDR
12408: GO 12432
12410: LD_INT 4
12412: DOUBLE
12413: EQUAL
12414: IFTRUE 12418
12416: GO 12429
12418: POP
// zo = Base4 ; else
12419: LD_ADDR_VAR 0 6
12423: PUSH
12424: LD_INT 30
12426: ST_TO_ADDR
12427: GO 12432
12429: POP
// continue ; end ;
12430: GO 12339
// pom = FilterUnitsInArea ( zo , [ [ f_side , i ] , [ f_type , unit_human ] ] ) ;
12432: LD_ADDR_VAR 0 3
12436: PUSH
12437: LD_VAR 0 6
12441: PPUSH
12442: LD_INT 22
12444: PUSH
12445: LD_VAR 0 1
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 21
12456: PUSH
12457: LD_INT 1
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PPUSH
12468: CALL_OW 70
12472: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( zo , [ [ f_side , i ] , [ f_type , unit_vehicle ] ] ) ;
12473: LD_ADDR_VAR 0 4
12477: PUSH
12478: LD_VAR 0 6
12482: PPUSH
12483: LD_INT 22
12485: PUSH
12486: LD_VAR 0 1
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 21
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PPUSH
12509: CALL_OW 70
12513: ST_TO_ADDR
// for j in pom1 do
12514: LD_ADDR_VAR 0 2
12518: PUSH
12519: LD_VAR 0 4
12523: PUSH
12524: FOR_IN
12525: IFFALSE 12565
// if IsDrivenBy ( j ) <> 0 then
12527: LD_VAR 0 2
12531: PPUSH
12532: CALL_OW 311
12536: PUSH
12537: LD_INT 0
12539: NONEQUAL
12540: IFFALSE 12563
// pom = pom ^ IsDrivenBy ( j ) ;
12542: LD_ADDR_VAR 0 3
12546: PUSH
12547: LD_VAR 0 3
12551: PUSH
12552: LD_VAR 0 2
12556: PPUSH
12557: CALL_OW 311
12561: ADD
12562: ST_TO_ADDR
12563: GO 12524
12565: POP
12566: POP
// for j in pom do
12567: LD_ADDR_VAR 0 2
12571: PUSH
12572: LD_VAR 0 3
12576: PUSH
12577: FOR_IN
12578: IFFALSE 12615
// if GetClass ( j ) in apes then
12580: LD_VAR 0 2
12584: PPUSH
12585: CALL_OW 257
12589: PUSH
12590: LD_VAR 0 5
12594: IN
12595: IFFALSE 12613
// pom = pom diff j ;
12597: LD_ADDR_VAR 0 3
12601: PUSH
12602: LD_VAR 0 3
12606: PUSH
12607: LD_VAR 0 2
12611: DIFF
12612: ST_TO_ADDR
12613: GO 12577
12615: POP
12616: POP
// for j in pom do
12617: LD_ADDR_VAR 0 2
12621: PUSH
12622: LD_VAR 0 3
12626: PUSH
12627: FOR_IN
12628: IFFALSE 12670
// if GetTag ( j ) > 0 then
12630: LD_VAR 0 2
12634: PPUSH
12635: CALL_OW 110
12639: PUSH
12640: LD_INT 0
12642: GREATER
12643: IFFALSE 12668
// SetTag ( j , GetTag ( j ) - 1 ) ;
12645: LD_VAR 0 2
12649: PPUSH
12650: LD_VAR 0 2
12654: PPUSH
12655: CALL_OW 110
12659: PUSH
12660: LD_INT 1
12662: MINUS
12663: PPUSH
12664: CALL_OW 109
12668: GO 12627
12670: POP
12671: POP
// end ;
12672: GO 12339
12674: POP
12675: POP
// enable ;
12676: ENABLE
// end ; end_of_file
12677: PPOPN 6
12679: END
// export function Init_Win_Condition ; begin
12680: LD_INT 0
12682: PPUSH
// disable ( 98 ) ;
12683: LD_INT 98
12685: DISABLE_MARKED
// disable ( 99 ) ;
12686: LD_INT 99
12688: DISABLE_MARKED
// if Team_Game then
12689: LD_EXP 34
12693: IFFALSE 12700
// enable ( 98 ) else
12695: LD_INT 98
12697: ENABLE_MARKED
12698: GO 12703
// enable ( 99 ) ;
12700: LD_INT 99
12702: ENABLE_MARKED
// end ;
12703: LD_VAR 0 1
12707: RET
// function CanWinLoose ; begin
12708: LD_INT 0
12710: PPUSH
// Result := true ;
12711: LD_ADDR_VAR 0 1
12715: PUSH
12716: LD_INT 1
12718: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12719: CALL_OW 518
12723: PUSH
12724: CALL_OW 519
12728: PUSH
12729: LD_INT 0
12731: GREATER
12732: AND
12733: IFFALSE 12743
// Result := false ;
12735: LD_ADDR_VAR 0 1
12739: PUSH
12740: LD_INT 0
12742: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12743: CALL_OW 531
12747: PUSH
12748: CALL_OW 519
12752: PUSH
12753: LD_INT 1
12755: GREATER
12756: AND
12757: IFFALSE 12767
// Result := false ;
12759: LD_ADDR_VAR 0 1
12763: PUSH
12764: LD_INT 0
12766: ST_TO_ADDR
// end ;
12767: LD_VAR 0 1
12771: RET
// function HasPower ( i ) ; begin
12772: LD_INT 0
12774: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12775: LD_ADDR_VAR 0 2
12779: PUSH
12780: LD_INT 22
12782: PUSH
12783: LD_VAR 0 1
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 2
12794: PUSH
12795: LD_INT 21
12797: PUSH
12798: LD_INT 1
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PUSH
12805: LD_INT 33
12807: PUSH
12808: LD_INT 3
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 33
12817: PUSH
12818: LD_INT 5
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PPUSH
12835: CALL_OW 69
12839: ST_TO_ADDR
// end ;
12840: LD_VAR 0 2
12844: RET
// function AlliedSides ( i , j ) ; begin
12845: LD_INT 0
12847: PPUSH
// Result := false ;
12848: LD_ADDR_VAR 0 3
12852: PUSH
12853: LD_INT 0
12855: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
12856: LD_VAR 0 1
12860: PPUSH
12861: LD_VAR 0 2
12865: PPUSH
12866: CALL_OW 81
12870: PUSH
12871: LD_INT 1
12873: EQUAL
12874: PUSH
12875: LD_VAR 0 2
12879: PPUSH
12880: LD_VAR 0 1
12884: PPUSH
12885: CALL_OW 81
12889: PUSH
12890: LD_INT 1
12892: EQUAL
12893: AND
12894: PUSH
12895: LD_VAR 0 1
12899: PPUSH
12900: CALL_OW 83
12904: AND
12905: PUSH
12906: LD_VAR 0 2
12910: PPUSH
12911: CALL_OW 83
12915: AND
12916: IFFALSE 12926
// Result := true ;
12918: LD_ADDR_VAR 0 3
12922: PUSH
12923: LD_INT 1
12925: ST_TO_ADDR
// end ;
12926: LD_VAR 0 3
12930: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
12931: CALL 12708 0 0
12935: IFFALSE 12944
12937: GO 12939
12939: DISABLE
// YouLostInMultiplayer ;
12940: CALL_OW 107
12944: END
// every 0 0$3 trigger CanWinLoose marked 401 do
12945: CALL 12708 0 0
12949: IFFALSE 12973
12951: GO 12953
12953: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
12954: LD_EXP 33
12958: PUSH
12959: LD_OWVAR 2
12963: ARRAY
12964: PPUSH
12965: CALL 14666 0 1
// YouWinInMultiplayer ;
12969: CALL_OW 106
// end ;
12973: END
// every 0 0$3 marked 98 do var i , CanWin ;
12974: GO 12976
12976: DISABLE
12977: LD_INT 0
12979: PPUSH
12980: PPUSH
// begin if not HasPower ( your_side ) then
12981: LD_OWVAR 2
12985: PPUSH
12986: CALL 12772 0 1
12990: NOT
12991: IFFALSE 13002
// begin Multiplayer_Loose_Message ;
12993: CALL_OW 521
// enable ( 400 ) ;
12997: LD_INT 400
12999: ENABLE_MARKED
// end else
13000: GO 13135
// begin CanWin := true ;
13002: LD_ADDR_VAR 0 2
13006: PUSH
13007: LD_INT 1
13009: ST_TO_ADDR
// for i := 1 to 8 do
13010: LD_ADDR_VAR 0 1
13014: PUSH
13015: DOUBLE
13016: LD_INT 1
13018: DEC
13019: ST_TO_ADDR
13020: LD_INT 8
13022: PUSH
13023: FOR_TO
13024: IFFALSE 13121
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
13026: LD_EXP 32
13030: PUSH
13031: LD_VAR 0 1
13035: ARRAY
13036: PUSH
13037: LD_VAR 0 1
13041: PPUSH
13042: CALL_OW 108
13046: AND
13047: PUSH
13048: LD_VAR 0 1
13052: PUSH
13053: LD_OWVAR 2
13057: NONEQUAL
13058: AND
13059: IFFALSE 13119
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
13061: LD_EXP 30
13065: PUSH
13066: LD_VAR 0 1
13070: ARRAY
13071: NOT
13072: PUSH
13073: LD_EXP 30
13077: PUSH
13078: LD_VAR 0 1
13082: ARRAY
13083: PUSH
13084: LD_EXP 30
13088: PUSH
13089: LD_OWVAR 2
13093: ARRAY
13094: NONEQUAL
13095: OR
13096: IFFALSE 13119
// if HasPower ( i ) then
13098: LD_VAR 0 1
13102: PPUSH
13103: CALL 12772 0 1
13107: IFFALSE 13119
// begin CanWin := false ;
13109: LD_ADDR_VAR 0 2
13113: PUSH
13114: LD_INT 0
13116: ST_TO_ADDR
// break ;
13117: GO 13121
// end ;
13119: GO 13023
13121: POP
13122: POP
// if CanWin then
13123: LD_VAR 0 2
13127: IFFALSE 13134
// enable ( 401 ) else
13129: LD_INT 401
13131: ENABLE_MARKED
13132: GO 13135
// enable ;
13134: ENABLE
// end ; end ;
13135: PPOPN 2
13137: END
// every 0 0$3 marked 99 do var i , CanWin ;
13138: GO 13140
13140: DISABLE
13141: LD_INT 0
13143: PPUSH
13144: PPUSH
// begin if not HasPower ( your_side ) then
13145: LD_OWVAR 2
13149: PPUSH
13150: CALL 12772 0 1
13154: NOT
13155: IFFALSE 13166
// begin Multiplayer_Loose_Message ;
13157: CALL_OW 521
// enable ( 400 ) ;
13161: LD_INT 400
13163: ENABLE_MARKED
// end else
13164: GO 13279
// begin CanWin := true ;
13166: LD_ADDR_VAR 0 2
13170: PUSH
13171: LD_INT 1
13173: ST_TO_ADDR
// for i := 1 to 8 do
13174: LD_ADDR_VAR 0 1
13178: PUSH
13179: DOUBLE
13180: LD_INT 1
13182: DEC
13183: ST_TO_ADDR
13184: LD_INT 8
13186: PUSH
13187: FOR_TO
13188: IFFALSE 13265
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
13190: LD_EXP 32
13194: PUSH
13195: LD_VAR 0 1
13199: ARRAY
13200: PUSH
13201: LD_VAR 0 1
13205: PPUSH
13206: CALL_OW 108
13210: AND
13211: PUSH
13212: LD_VAR 0 1
13216: PUSH
13217: LD_OWVAR 2
13221: NONEQUAL
13222: AND
13223: IFFALSE 13263
// if not AlliedSides ( i , your_side ) then
13225: LD_VAR 0 1
13229: PPUSH
13230: LD_OWVAR 2
13234: PPUSH
13235: CALL 12845 0 2
13239: NOT
13240: IFFALSE 13263
// if HasPower ( i ) then
13242: LD_VAR 0 1
13246: PPUSH
13247: CALL 12772 0 1
13251: IFFALSE 13263
// begin CanWin := false ;
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: LD_INT 0
13260: ST_TO_ADDR
// break ;
13261: GO 13265
// end ;
13263: GO 13187
13265: POP
13266: POP
// if CanWin then
13267: LD_VAR 0 2
13271: IFFALSE 13278
// enable ( 401 ) else
13273: LD_INT 401
13275: ENABLE_MARKED
13276: GO 13279
// enable ;
13278: ENABLE
// end ; end ; end_of_file
13279: PPOPN 2
13281: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
13282: LD_INT 0
13284: PPUSH
13285: PPUSH
// for un in battle_flags_id do
13286: LD_ADDR_VAR 0 2
13290: PUSH
13291: LD_EXP 26
13295: PUSH
13296: FOR_IN
13297: IFFALSE 13372
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
13299: LD_VAR 0 2
13303: PPUSH
13304: LD_INT 1
13306: PUSH
13307: LD_LOC 4
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 2
13318: PUSH
13319: LD_LOC 4
13323: PUSH
13324: LD_INT 2
13326: DIV
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 3
13334: PUSH
13335: LD_LOC 4
13339: PUSH
13340: LD_INT 5
13342: DIV
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 20
13350: PUSH
13351: LD_LOC 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: PPUSH
13366: CALL_OW 423
13370: GO 13296
13372: POP
13373: POP
// end ;
13374: LD_VAR 0 1
13378: RET
// every 0 0$0.1 do var un ;
13379: GO 13381
13381: DISABLE
13382: LD_INT 0
13384: PPUSH
// begin if not def_morale_flags then
13385: LD_EXP 8
13389: NOT
13390: IFFALSE 13394
// exit ;
13392: GO 13471
// if not morale_decreasing_time then
13394: LD_EXP 25
13398: NOT
13399: IFFALSE 13403
// exit ;
13401: GO 13471
// strength = 100 ;
13403: LD_ADDR_LOC 4
13407: PUSH
13408: LD_INT 100
13410: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13411: LD_EXP 25
13415: PPUSH
13416: CALL_OW 67
// strength := strength - 1 ;
13420: LD_ADDR_LOC 4
13424: PUSH
13425: LD_LOC 4
13429: PUSH
13430: LD_INT 1
13432: MINUS
13433: ST_TO_ADDR
// Update_Flags ;
13434: CALL 13282 0 0
// until not strength ;
13438: LD_LOC 4
13442: NOT
13443: IFFALSE 13411
// for un in battle_flags_id do
13445: LD_ADDR_VAR 0 1
13449: PUSH
13450: LD_EXP 26
13454: PUSH
13455: FOR_IN
13456: IFFALSE 13469
// KillBattleFlag ( un ) ;
13458: LD_VAR 0 1
13462: PPUSH
13463: CALL_OW 419
13467: GO 13455
13469: POP
13470: POP
// end ; end_of_file
13471: PPOPN 1
13473: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
13474: LD_INT 0
13476: PPUSH
13477: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
13478: LD_ADDR_VAR 0 2
13482: PUSH
13483: LD_STRING #Multi1x1-Time
13485: PUSH
13486: LD_OWVAR 1
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: ST_TO_ADDR
// if ( ExtraStrings ) then
13495: LD_EXP 40
13499: IFFALSE 13521
// AllStrings := AllStrings ^  ^ ExtraStrings ;
13501: LD_ADDR_VAR 0 2
13505: PUSH
13506: LD_VAR 0 2
13510: PUSH
13511: LD_STRING 
13513: ADD
13514: PUSH
13515: LD_EXP 40
13519: ADD
13520: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
13521: LD_INT 0
13523: PUSH
13524: LD_EXP 24
13528: PUSH
13529: LD_OWVAR 1
13533: MINUS
13534: LESSEQUAL
13535: IFFALSE 13566
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
13537: LD_ADDR_VAR 0 2
13541: PUSH
13542: LD_VAR 0 2
13546: PUSH
13547: LD_STRING #allowedsibbomb
13549: PUSH
13550: LD_EXP 24
13554: PUSH
13555: LD_OWVAR 1
13559: MINUS
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: ADD
13565: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
13566: LD_INT 0
13568: PUSH
13569: LD_EXP 43
13573: PUSH
13574: LD_OWVAR 1
13578: MINUS
13579: LESSEQUAL
13580: IFFALSE 13611
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
13582: LD_ADDR_VAR 0 2
13586: PUSH
13587: LD_VAR 0 2
13591: PUSH
13592: LD_STRING #builduptime
13594: PUSH
13595: LD_EXP 43
13599: PUSH
13600: LD_OWVAR 1
13604: MINUS
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: ADD
13610: ST_TO_ADDR
// Display_Strings := AllStrings ;
13611: LD_ADDR_OWVAR 47
13615: PUSH
13616: LD_VAR 0 2
13620: ST_TO_ADDR
// end ;
13621: LD_VAR 0 1
13625: RET
// every 0 0$1 do
13626: GO 13628
13628: DISABLE
// begin ShowTimer ;
13629: CALL 13474 0 0
// enable ;
13633: ENABLE
// end ; end_of_file
13634: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
13635: GO 13637
13637: DISABLE
13638: LD_INT 0
13640: PPUSH
// begin _apemenIncrement := 0 ;
13641: LD_ADDR_LOC 9
13645: PUSH
13646: LD_INT 0
13648: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
13649: LD_ADDR_LOC 11
13653: PUSH
13654: LD_INT 0
13656: ST_TO_ADDR
// _isSpawning := true ;
13657: LD_ADDR_LOC 13
13661: PUSH
13662: LD_INT 1
13664: ST_TO_ADDR
// _wildApemenAmount := 0 ;
13665: LD_ADDR_LOC 14
13669: PUSH
13670: LD_INT 0
13672: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
13673: LD_ADDR_VAR 0 1
13677: PUSH
13678: LD_EXP 32
13682: PUSH
13683: LD_INT 0
13685: PUSH
13686: EMPTY
13687: LIST
13688: DIFF
13689: PUSH
13690: FOR_IN
13691: IFFALSE 13709
// _apemenIncrement := _apemenIncrement + 1 ;
13693: LD_ADDR_LOC 9
13697: PUSH
13698: LD_LOC 9
13702: PUSH
13703: LD_INT 1
13705: PLUS
13706: ST_TO_ADDR
13707: GO 13690
13709: POP
13710: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
13711: LD_ADDR_LOC 10
13715: PUSH
13716: LD_LOC 9
13720: PUSH
13721: LD_EXP 29
13725: MUL
13726: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
13727: LD_ADDR_LOC 12
13731: PUSH
13732: LD_LOC 10
13736: PUSH
13737: LD_INT 2
13739: DIVREAL
13740: ST_TO_ADDR
// prepare_apemen ;
13741: CALL 13833 0 0
// end ;
13745: PPOPN 1
13747: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
13748: CALL 13755 0 0
// end ;
13752: PPOPN 2
13754: END
// export function CheckApemenAmount ; begin
13755: LD_INT 0
13757: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
13758: LD_ADDR_LOC 14
13762: PUSH
13763: LD_LOC 14
13767: PUSH
13768: LD_INT 1
13770: MINUS
13771: ST_TO_ADDR
// if _isSpawning then
13772: LD_LOC 13
13776: IFFALSE 13780
// exit ;
13778: GO 13828
// if _wildApemenAmount <= ( _apemenThreshold ) then
13780: LD_LOC 14
13784: PUSH
13785: LD_LOC 12
13789: LESSEQUAL
13790: IFFALSE 13828
// begin if _apemenSkillLevel < 8 then
13792: LD_LOC 11
13796: PUSH
13797: LD_INT 8
13799: LESS
13800: IFFALSE 13816
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
13802: LD_ADDR_LOC 11
13806: PUSH
13807: LD_LOC 11
13811: PUSH
13812: LD_INT 1
13814: PLUS
13815: ST_TO_ADDR
// _isSpawning := true ;
13816: LD_ADDR_LOC 13
13820: PUSH
13821: LD_INT 1
13823: ST_TO_ADDR
// prepare_apemen ;
13824: CALL 13833 0 0
// end ; end ;
13828: LD_VAR 0 1
13832: RET
// function prepare_apemen ; var i ; begin
13833: LD_INT 0
13835: PPUSH
13836: PPUSH
// if not amount_of_apemen then
13837: LD_EXP 29
13841: NOT
13842: IFFALSE 13846
// exit ;
13844: GO 14025
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
13846: LD_INT 1050
13848: PPUSH
13849: LD_INT 3150
13851: PPUSH
13852: CALL_OW 12
13856: PPUSH
13857: CALL_OW 67
// apeman_init ;
13861: CALL 14030 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
13865: LD_ADDR_VAR 0 2
13869: PUSH
13870: LD_EXP 32
13874: PUSH
13875: LD_INT 0
13877: PUSH
13878: EMPTY
13879: LIST
13880: DIFF
13881: PUSH
13882: FOR_IN
13883: IFFALSE 13987
// begin if i = 1 then
13885: LD_VAR 0 2
13889: PUSH
13890: LD_INT 1
13892: EQUAL
13893: IFFALSE 13910
// PlaceUnitArea ( CreateHuman , op1 , false ) ;
13895: CALL_OW 44
13899: PPUSH
13900: LD_INT 31
13902: PPUSH
13903: LD_INT 0
13905: PPUSH
13906: CALL_OW 49
// if i = 2 then
13910: LD_VAR 0 2
13914: PUSH
13915: LD_INT 2
13917: EQUAL
13918: IFFALSE 13935
// PlaceUnitArea ( CreateHuman , op2 , false ) ;
13920: CALL_OW 44
13924: PPUSH
13925: LD_INT 32
13927: PPUSH
13928: LD_INT 0
13930: PPUSH
13931: CALL_OW 49
// if i = 3 then
13935: LD_VAR 0 2
13939: PUSH
13940: LD_INT 3
13942: EQUAL
13943: IFFALSE 13960
// PlaceUnitArea ( CreateHuman , op3 , false ) ;
13945: CALL_OW 44
13949: PPUSH
13950: LD_INT 33
13952: PPUSH
13953: LD_INT 0
13955: PPUSH
13956: CALL_OW 49
// if i = 4 then
13960: LD_VAR 0 2
13964: PUSH
13965: LD_INT 4
13967: EQUAL
13968: IFFALSE 13985
// PlaceUnitArea ( CreateHuman , op4 , false ) ;
13970: CALL_OW 44
13974: PPUSH
13975: LD_INT 34
13977: PPUSH
13978: LD_INT 0
13980: PPUSH
13981: CALL_OW 49
// end ;
13985: GO 13882
13987: POP
13988: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
13989: LD_ADDR_LOC 14
13993: PUSH
13994: LD_LOC 14
13998: PUSH
13999: LD_LOC 9
14003: PLUS
14004: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
14005: LD_LOC 14
14009: PUSH
14010: LD_LOC 10
14014: GREATEREQUAL
14015: IFFALSE 13846
// _isSpawning := false ;
14017: LD_ADDR_LOC 13
14021: PUSH
14022: LD_INT 0
14024: ST_TO_ADDR
// end ;
14025: LD_VAR 0 1
14029: RET
// function apeman_init ; var ape_names ; begin
14030: LD_INT 0
14032: PPUSH
14033: PPUSH
// ape_names = [ Tupoun , Opoce , Opka , Butrus , Bubu , Condor , Kuklajs , Simon , Ugh , Urgh , Argh , Aargh , Hrumph , Grumph , Oorg , Eghrr , Rrrr , Bark , Wraughrr , :-) , Semik , Hrgh , Hur , Havran , Nazghul , Brutal , Kato Zluta Opoce , Monkey , Yeargh , Marta , Batman , Barkman , Xcenovsk , David Love , Freon , Stoupik , Quik , Jam Prckovic Laren , CFC , Kvakous , Sumys , Agent , Nazghul , Havran , Vrana , Havranek , Carlos Frank , Tekar , Andy , Angela , Janina , Shipanze , Simpan , Nazghulik , Potrusil , Potrus , Butrus , Potrusil , Simon , Auuu , NEMO , Silena opice , Meuznenapadazadnejmeno , Uhrun , Marmelada , Negr , Fnuk , Slim , Kvak , Dave , Bruntal , Arnie , Polda , Jen , Siddha , Silnickar , Bukvice , Zalud , Elvis , Nazghul , Chruadfa , Nazghul , Kato Yellow Ape , Cpt. Ape , King Of The Hill , Pterinochilus , Bad Platypus , Really Bad Ape , Looser , Looser , Looser , Megadeth , Mad Ape , Wraughhhh , ":) ] ;
14034: LD_ADDR_VAR 0 2
14038: PUSH
14039: LD_STRING Tupoun
14041: PUSH
14042: LD_STRING Opoce
14044: PUSH
14045: LD_STRING Opka
14047: PUSH
14048: LD_STRING Butrus
14050: PUSH
14051: LD_STRING Bubu
14053: PUSH
14054: LD_STRING Condor
14056: PUSH
14057: LD_STRING Kuklajs
14059: PUSH
14060: LD_STRING Simon
14062: PUSH
14063: LD_STRING Ugh
14065: PUSH
14066: LD_STRING Urgh
14068: PUSH
14069: LD_STRING Argh
14071: PUSH
14072: LD_STRING Aargh
14074: PUSH
14075: LD_STRING Hrumph
14077: PUSH
14078: LD_STRING Grumph
14080: PUSH
14081: LD_STRING Oorg
14083: PUSH
14084: LD_STRING Eghrr
14086: PUSH
14087: LD_STRING Rrrr
14089: PUSH
14090: LD_STRING Bark
14092: PUSH
14093: LD_STRING Wraughrr
14095: PUSH
14096: LD_STRING :-)
14098: PUSH
14099: LD_STRING Semik
14101: PUSH
14102: LD_STRING Hrgh
14104: PUSH
14105: LD_STRING Hur
14107: PUSH
14108: LD_STRING Havran
14110: PUSH
14111: LD_STRING Nazghul
14113: PUSH
14114: LD_STRING Brutal
14116: PUSH
14117: LD_STRING Kato Zluta Opoce
14119: PUSH
14120: LD_STRING Monkey
14122: PUSH
14123: LD_STRING Yeargh
14125: PUSH
14126: LD_STRING Marta
14128: PUSH
14129: LD_STRING Batman
14131: PUSH
14132: LD_STRING Barkman
14134: PUSH
14135: LD_STRING Xcenovsk
14137: PUSH
14138: LD_STRING David Love
14140: PUSH
14141: LD_STRING Freon
14143: PUSH
14144: LD_STRING Stoupik
14146: PUSH
14147: LD_STRING Quik
14149: PUSH
14150: LD_STRING Jam Prckovic Laren
14152: PUSH
14153: LD_STRING CFC
14155: PUSH
14156: LD_STRING Kvakous
14158: PUSH
14159: LD_STRING Sumys
14161: PUSH
14162: LD_STRING Agent
14164: PUSH
14165: LD_STRING Nazghul
14167: PUSH
14168: LD_STRING Havran
14170: PUSH
14171: LD_STRING Vrana
14173: PUSH
14174: LD_STRING Havranek
14176: PUSH
14177: LD_STRING Carlos Frank
14179: PUSH
14180: LD_STRING Tekar
14182: PUSH
14183: LD_STRING Andy
14185: PUSH
14186: LD_STRING Angela
14188: PUSH
14189: LD_STRING Janina
14191: PUSH
14192: LD_STRING Shipanze
14194: PUSH
14195: LD_STRING Simpan
14197: PUSH
14198: LD_STRING Nazghulik
14200: PUSH
14201: LD_STRING Potrusil
14203: PUSH
14204: LD_STRING Potrus
14206: PUSH
14207: LD_STRING Butrus
14209: PUSH
14210: LD_STRING Potrusil
14212: PUSH
14213: LD_STRING Simon
14215: PUSH
14216: LD_STRING Auuu
14218: PUSH
14219: LD_STRING NEMO
14221: PUSH
14222: LD_STRING Silena opice
14224: PUSH
14225: LD_STRING Meuznenapadazadnejmeno
14227: PUSH
14228: LD_STRING Uhrun
14230: PUSH
14231: LD_STRING Marmelada
14233: PUSH
14234: LD_STRING Negr
14236: PUSH
14237: LD_STRING Fnuk
14239: PUSH
14240: LD_STRING Slim
14242: PUSH
14243: LD_STRING Kvak
14245: PUSH
14246: LD_STRING Dave
14248: PUSH
14249: LD_STRING Bruntal
14251: PUSH
14252: LD_STRING Arnie
14254: PUSH
14255: LD_STRING Polda
14257: PUSH
14258: LD_STRING Jen
14260: PUSH
14261: LD_STRING Siddha
14263: PUSH
14264: LD_STRING Silnickar
14266: PUSH
14267: LD_STRING Bukvice
14269: PUSH
14270: LD_STRING Zalud
14272: PUSH
14273: LD_STRING Elvis
14275: PUSH
14276: LD_STRING Nazghul
14278: PUSH
14279: LD_STRING Chruadfa
14281: PUSH
14282: LD_STRING Nazghul
14284: PUSH
14285: LD_STRING Kato Yellow Ape
14287: PUSH
14288: LD_STRING Cpt. Ape
14290: PUSH
14291: LD_STRING King Of The Hill
14293: PUSH
14294: LD_STRING Pterinochilus
14296: PUSH
14297: LD_STRING Bad Platypus
14299: PUSH
14300: LD_STRING Really Bad Ape
14302: PUSH
14303: LD_STRING Looser
14305: PUSH
14306: LD_STRING Looser
14308: PUSH
14309: LD_STRING Looser
14311: PUSH
14312: LD_STRING Megadeth
14314: PUSH
14315: LD_STRING Mad Ape
14317: PUSH
14318: LD_STRING Wraughhhh
14320: PUSH
14321: LD_STRING ":)
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: ST_TO_ADDR
// uc_side := 0 ;
14421: LD_ADDR_OWVAR 20
14425: PUSH
14426: LD_INT 0
14428: ST_TO_ADDR
// uc_nation := nation_nature ;
14429: LD_ADDR_OWVAR 21
14433: PUSH
14434: LD_INT 0
14436: ST_TO_ADDR
// hc_class := class_apeman ;
14437: LD_ADDR_OWVAR 28
14441: PUSH
14442: LD_INT 12
14444: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
14445: LD_ADDR_OWVAR 30
14449: PUSH
14450: LD_INT 2
14452: PUSH
14453: LD_INT 2
14455: PUSH
14456: LD_INT 2
14458: PUSH
14459: LD_INT 2
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
14468: LD_ADDR_OWVAR 31
14472: PUSH
14473: LD_INT 0
14475: PPUSH
14476: LD_INT 2
14478: PPUSH
14479: CALL_OW 12
14483: PUSH
14484: LD_LOC 11
14488: PLUS
14489: PUSH
14490: LD_INT 0
14492: PPUSH
14493: LD_INT 2
14495: PPUSH
14496: CALL_OW 12
14500: PUSH
14501: LD_LOC 11
14505: PLUS
14506: PUSH
14507: LD_INT 0
14509: PPUSH
14510: LD_INT 2
14512: PPUSH
14513: CALL_OW 12
14517: PUSH
14518: LD_LOC 11
14522: PLUS
14523: PUSH
14524: LD_INT 0
14526: PPUSH
14527: LD_INT 2
14529: PPUSH
14530: CALL_OW 12
14534: PUSH
14535: LD_LOC 11
14539: PLUS
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
14547: LD_ADDR_OWVAR 29
14551: PUSH
14552: LD_INT 10
14554: PUSH
14555: LD_INT 12
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: ST_TO_ADDR
// hc_sex := sex_male ;
14562: LD_ADDR_OWVAR 27
14566: PUSH
14567: LD_INT 1
14569: ST_TO_ADDR
// hc_name := ape_names [ Rand ( 1 , ape_names ) ] ;
14570: LD_ADDR_OWVAR 26
14574: PUSH
14575: LD_VAR 0 2
14579: PUSH
14580: LD_INT 1
14582: PPUSH
14583: LD_VAR 0 2
14587: PPUSH
14588: CALL_OW 12
14592: ARRAY
14593: ST_TO_ADDR
// hc_importance := 0 ;
14594: LD_ADDR_OWVAR 32
14598: PUSH
14599: LD_INT 0
14601: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
14602: LD_ADDR_OWVAR 35
14606: PUSH
14607: LD_INT 20
14609: NEG
14610: PPUSH
14611: LD_INT 20
14613: PPUSH
14614: CALL_OW 12
14618: ST_TO_ADDR
// end ; end_of_file
14619: LD_VAR 0 1
14623: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
14624: LD_INT 0
14626: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
14627: LD_VAR 0 1
14631: PPUSH
14632: CALL_OW 255
14636: PUSH
14637: LD_VAR 0 4
14641: EQUAL
14642: IFFALSE 14661
// begin SetAchievement ( ACH_RAD ) ;
14644: LD_STRING ACH_RAD
14646: PPUSH
14647: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
14651: LD_STRING ACH_NL
14653: PPUSH
14654: LD_INT 1
14656: PPUSH
14657: CALL_OW 564
// end end ;
14661: LD_VAR 0 5
14665: RET
// export function SA_Win ( side ) ; begin
14666: LD_INT 0
14668: PPUSH
// case side of 1 :
14669: LD_VAR 0 1
14673: PUSH
14674: LD_INT 1
14676: DOUBLE
14677: EQUAL
14678: IFTRUE 14682
14680: GO 14695
14682: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
14683: LD_STRING ACH_AH
14685: PPUSH
14686: LD_INT 1
14688: PPUSH
14689: CALL_OW 564
14693: GO 14858
14695: LD_INT 2
14697: DOUBLE
14698: EQUAL
14699: IFTRUE 14703
14701: GO 14716
14703: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
14704: LD_STRING ACH_E
14706: PPUSH
14707: LD_INT 1
14709: PPUSH
14710: CALL_OW 564
14714: GO 14858
14716: LD_INT 3
14718: DOUBLE
14719: EQUAL
14720: IFTRUE 14724
14722: GO 14737
14724: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
14725: LD_STRING ACH_OOL
14727: PPUSH
14728: LD_INT 1
14730: PPUSH
14731: CALL_OW 564
14735: GO 14858
14737: LD_INT 1
14739: PUSH
14740: LD_INT 2
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: DOUBLE
14747: EQUAL
14748: IFTRUE 14752
14750: GO 14777
14752: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14753: LD_STRING ACH_AH
14755: PPUSH
14756: LD_REAL  5.00000000000000E-0001
14759: PPUSH
14760: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14764: LD_STRING ACH_E
14766: PPUSH
14767: LD_REAL  5.00000000000000E-0001
14770: PPUSH
14771: CALL_OW 564
// end ; [ 2 , 3 ] :
14775: GO 14858
14777: LD_INT 2
14779: PUSH
14780: LD_INT 3
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: DOUBLE
14787: EQUAL
14788: IFTRUE 14792
14790: GO 14817
14792: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14793: LD_STRING ACH_OOL
14795: PPUSH
14796: LD_REAL  5.00000000000000E-0001
14799: PPUSH
14800: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14804: LD_STRING ACH_E
14806: PPUSH
14807: LD_REAL  5.00000000000000E-0001
14810: PPUSH
14811: CALL_OW 564
// end ; [ 3 , 1 ] :
14815: GO 14858
14817: LD_INT 3
14819: PUSH
14820: LD_INT 1
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: DOUBLE
14827: EQUAL
14828: IFTRUE 14832
14830: GO 14857
14832: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14833: LD_STRING ACH_AH
14835: PPUSH
14836: LD_REAL  5.00000000000000E-0001
14839: PPUSH
14840: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14844: LD_STRING ACH_OOL
14846: PPUSH
14847: LD_REAL  5.00000000000000E-0001
14850: PPUSH
14851: CALL_OW 564
// end ; end ;
14855: GO 14858
14857: POP
// end ; end_of_file
14858: LD_VAR 0 2
14862: RET
// export function SetMpTechs ( ) ; var side , i ; begin
14863: LD_INT 0
14865: PPUSH
14866: PPUSH
14867: PPUSH
// for side = 1 to 8 do
14868: LD_ADDR_VAR 0 2
14872: PUSH
14873: DOUBLE
14874: LD_INT 1
14876: DEC
14877: ST_TO_ADDR
14878: LD_INT 8
14880: PUSH
14881: FOR_TO
14882: IFFALSE 15003
// begin for i = 1 to 72 do
14884: LD_ADDR_VAR 0 3
14888: PUSH
14889: DOUBLE
14890: LD_INT 1
14892: DEC
14893: ST_TO_ADDR
14894: LD_INT 72
14896: PUSH
14897: FOR_TO
14898: IFFALSE 14929
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
14900: LD_VAR 0 3
14904: PPUSH
14905: LD_VAR 0 2
14909: PPUSH
14910: LD_INT 0
14912: PPUSH
14913: LD_VAR 0 3
14917: PPUSH
14918: CALL_OW 565
14922: PPUSH
14923: CALL_OW 322
14927: GO 14897
14929: POP
14930: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
14931: LD_INT 73
14933: PPUSH
14934: LD_VAR 0 2
14938: PPUSH
14939: LD_INT 0
14941: PPUSH
14942: LD_INT 25
14944: PPUSH
14945: CALL_OW 565
14949: PPUSH
14950: CALL_OW 322
// for i = 0 to 40 do
14954: LD_ADDR_VAR 0 3
14958: PUSH
14959: DOUBLE
14960: LD_INT 0
14962: DEC
14963: ST_TO_ADDR
14964: LD_INT 40
14966: PUSH
14967: FOR_TO
14968: IFFALSE 14999
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
14970: LD_VAR 0 3
14974: PPUSH
14975: LD_VAR 0 2
14979: PPUSH
14980: LD_INT 1
14982: PPUSH
14983: LD_VAR 0 3
14987: PPUSH
14988: CALL_OW 565
14992: PPUSH
14993: CALL_OW 324
14997: GO 14967
14999: POP
15000: POP
// end ;
15001: GO 14881
15003: POP
15004: POP
// end ;
15005: LD_VAR 0 1
15009: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15010: LD_INT 0
15012: PPUSH
15013: PPUSH
15014: PPUSH
// for side = 1 to 8 do
15015: LD_ADDR_VAR 0 3
15019: PUSH
15020: DOUBLE
15021: LD_INT 1
15023: DEC
15024: ST_TO_ADDR
15025: LD_INT 8
15027: PUSH
15028: FOR_TO
15029: IFFALSE 19025
// begin for i = 1 to 73 do
15031: LD_ADDR_VAR 0 4
15035: PUSH
15036: DOUBLE
15037: LD_INT 1
15039: DEC
15040: ST_TO_ADDR
15041: LD_INT 73
15043: PUSH
15044: FOR_TO
15045: IFFALSE 15066
// SetTech ( i , side , state_disabled ) ;
15047: LD_VAR 0 4
15051: PPUSH
15052: LD_VAR 0 3
15056: PPUSH
15057: LD_INT 0
15059: PPUSH
15060: CALL_OW 322
15064: GO 15044
15066: POP
15067: POP
// for i = 0 to 40 do
15068: LD_ADDR_VAR 0 4
15072: PUSH
15073: DOUBLE
15074: LD_INT 0
15076: DEC
15077: ST_TO_ADDR
15078: LD_INT 40
15080: PUSH
15081: FOR_TO
15082: IFFALSE 15103
// SetRestrict ( i , side , false ) ;
15084: LD_VAR 0 4
15088: PPUSH
15089: LD_VAR 0 3
15093: PPUSH
15094: LD_INT 0
15096: PPUSH
15097: CALL_OW 324
15101: GO 15081
15103: POP
15104: POP
// case level of 1 :
15105: LD_VAR 0 1
15109: PUSH
15110: LD_INT 1
15112: DOUBLE
15113: EQUAL
15114: IFTRUE 15118
15116: GO 15271
15118: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15119: LD_INT 35
15121: PPUSH
15122: LD_VAR 0 3
15126: PPUSH
15127: LD_INT 1
15129: PPUSH
15130: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15134: LD_INT 45
15136: PPUSH
15137: LD_VAR 0 3
15141: PPUSH
15142: LD_INT 1
15144: PPUSH
15145: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15149: LD_INT 46
15151: PPUSH
15152: LD_VAR 0 3
15156: PPUSH
15157: LD_INT 1
15159: PPUSH
15160: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15164: LD_INT 47
15166: PPUSH
15167: LD_VAR 0 3
15171: PPUSH
15172: LD_INT 1
15174: PPUSH
15175: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15179: LD_INT 0
15181: PPUSH
15182: LD_VAR 0 3
15186: PPUSH
15187: LD_INT 1
15189: PPUSH
15190: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15194: LD_INT 2
15196: PPUSH
15197: LD_VAR 0 3
15201: PPUSH
15202: LD_INT 1
15204: PPUSH
15205: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15209: LD_INT 4
15211: PPUSH
15212: LD_VAR 0 3
15216: PPUSH
15217: LD_INT 1
15219: PPUSH
15220: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15224: LD_INT 6
15226: PPUSH
15227: LD_VAR 0 3
15231: PPUSH
15232: LD_INT 1
15234: PPUSH
15235: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15239: LD_INT 29
15241: PPUSH
15242: LD_VAR 0 3
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15254: LD_INT 31
15256: PPUSH
15257: LD_VAR 0 3
15261: PPUSH
15262: LD_INT 1
15264: PPUSH
15265: CALL_OW 324
// end ; 2 :
15269: GO 19023
15271: LD_INT 2
15273: DOUBLE
15274: EQUAL
15275: IFTRUE 15279
15277: GO 15477
15279: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15280: LD_INT 35
15282: PPUSH
15283: LD_VAR 0 3
15287: PPUSH
15288: LD_INT 1
15290: PPUSH
15291: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15295: LD_INT 45
15297: PPUSH
15298: LD_VAR 0 3
15302: PPUSH
15303: LD_INT 1
15305: PPUSH
15306: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15310: LD_INT 46
15312: PPUSH
15313: LD_VAR 0 3
15317: PPUSH
15318: LD_INT 1
15320: PPUSH
15321: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15325: LD_INT 47
15327: PPUSH
15328: LD_VAR 0 3
15332: PPUSH
15333: LD_INT 1
15335: PPUSH
15336: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15340: LD_INT 1
15342: PPUSH
15343: LD_VAR 0 3
15347: PPUSH
15348: LD_INT 1
15350: PPUSH
15351: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15355: LD_INT 2
15357: PPUSH
15358: LD_VAR 0 3
15362: PPUSH
15363: LD_INT 1
15365: PPUSH
15366: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15370: LD_INT 11
15372: PPUSH
15373: LD_VAR 0 3
15377: PPUSH
15378: LD_INT 1
15380: PPUSH
15381: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15385: LD_INT 0
15387: PPUSH
15388: LD_VAR 0 3
15392: PPUSH
15393: LD_INT 1
15395: PPUSH
15396: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15400: LD_INT 2
15402: PPUSH
15403: LD_VAR 0 3
15407: PPUSH
15408: LD_INT 1
15410: PPUSH
15411: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15415: LD_INT 4
15417: PPUSH
15418: LD_VAR 0 3
15422: PPUSH
15423: LD_INT 1
15425: PPUSH
15426: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15430: LD_INT 6
15432: PPUSH
15433: LD_VAR 0 3
15437: PPUSH
15438: LD_INT 1
15440: PPUSH
15441: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15445: LD_INT 29
15447: PPUSH
15448: LD_VAR 0 3
15452: PPUSH
15453: LD_INT 1
15455: PPUSH
15456: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15460: LD_INT 31
15462: PPUSH
15463: LD_VAR 0 3
15467: PPUSH
15468: LD_INT 1
15470: PPUSH
15471: CALL_OW 324
// end ; 3 :
15475: GO 19023
15477: LD_INT 3
15479: DOUBLE
15480: EQUAL
15481: IFTRUE 15485
15483: GO 15938
15485: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15486: LD_INT 35
15488: PPUSH
15489: LD_VAR 0 3
15493: PPUSH
15494: LD_INT 1
15496: PPUSH
15497: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15501: LD_INT 45
15503: PPUSH
15504: LD_VAR 0 3
15508: PPUSH
15509: LD_INT 1
15511: PPUSH
15512: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15516: LD_INT 46
15518: PPUSH
15519: LD_VAR 0 3
15523: PPUSH
15524: LD_INT 1
15526: PPUSH
15527: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15531: LD_INT 47
15533: PPUSH
15534: LD_VAR 0 3
15538: PPUSH
15539: LD_INT 1
15541: PPUSH
15542: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15546: LD_INT 1
15548: PPUSH
15549: LD_VAR 0 3
15553: PPUSH
15554: LD_INT 1
15556: PPUSH
15557: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15561: LD_INT 2
15563: PPUSH
15564: LD_VAR 0 3
15568: PPUSH
15569: LD_INT 1
15571: PPUSH
15572: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15576: LD_INT 11
15578: PPUSH
15579: LD_VAR 0 3
15583: PPUSH
15584: LD_INT 1
15586: PPUSH
15587: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15591: LD_INT 48
15593: PPUSH
15594: LD_VAR 0 3
15598: PPUSH
15599: LD_INT 1
15601: PPUSH
15602: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15606: LD_INT 69
15608: PPUSH
15609: LD_VAR 0 3
15613: PPUSH
15614: LD_INT 1
15616: PPUSH
15617: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15621: LD_INT 39
15623: PPUSH
15624: LD_VAR 0 3
15628: PPUSH
15629: LD_INT 1
15631: PPUSH
15632: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15636: LD_INT 43
15638: PPUSH
15639: LD_VAR 0 3
15643: PPUSH
15644: LD_INT 1
15646: PPUSH
15647: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15651: LD_INT 51
15653: PPUSH
15654: LD_VAR 0 3
15658: PPUSH
15659: LD_INT 1
15661: PPUSH
15662: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15666: LD_INT 6
15668: PPUSH
15669: LD_VAR 0 3
15673: PPUSH
15674: LD_INT 1
15676: PPUSH
15677: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15681: LD_INT 0
15683: PPUSH
15684: LD_VAR 0 3
15688: PPUSH
15689: LD_INT 1
15691: PPUSH
15692: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15696: LD_INT 2
15698: PPUSH
15699: LD_VAR 0 3
15703: PPUSH
15704: LD_INT 1
15706: PPUSH
15707: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15711: LD_INT 3
15713: PPUSH
15714: LD_VAR 0 3
15718: PPUSH
15719: LD_INT 1
15721: PPUSH
15722: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15726: LD_INT 4
15728: PPUSH
15729: LD_VAR 0 3
15733: PPUSH
15734: LD_INT 1
15736: PPUSH
15737: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15741: LD_INT 6
15743: PPUSH
15744: LD_VAR 0 3
15748: PPUSH
15749: LD_INT 1
15751: PPUSH
15752: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15756: LD_INT 7
15758: PPUSH
15759: LD_VAR 0 3
15763: PPUSH
15764: LD_INT 1
15766: PPUSH
15767: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15771: LD_INT 8
15773: PPUSH
15774: LD_VAR 0 3
15778: PPUSH
15779: LD_INT 1
15781: PPUSH
15782: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15786: LD_INT 10
15788: PPUSH
15789: LD_VAR 0 3
15793: PPUSH
15794: LD_INT 1
15796: PPUSH
15797: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15801: LD_INT 15
15803: PPUSH
15804: LD_VAR 0 3
15808: PPUSH
15809: LD_INT 1
15811: PPUSH
15812: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15816: LD_INT 16
15818: PPUSH
15819: LD_VAR 0 3
15823: PPUSH
15824: LD_INT 1
15826: PPUSH
15827: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15831: LD_INT 17
15833: PPUSH
15834: LD_VAR 0 3
15838: PPUSH
15839: LD_INT 1
15841: PPUSH
15842: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15846: LD_INT 20
15848: PPUSH
15849: LD_VAR 0 3
15853: PPUSH
15854: LD_INT 1
15856: PPUSH
15857: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15861: LD_INT 26
15863: PPUSH
15864: LD_VAR 0 3
15868: PPUSH
15869: LD_INT 1
15871: PPUSH
15872: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15876: LD_INT 27
15878: PPUSH
15879: LD_VAR 0 3
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15891: LD_INT 29
15893: PPUSH
15894: LD_VAR 0 3
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15906: LD_INT 31
15908: PPUSH
15909: LD_VAR 0 3
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15921: LD_INT 32
15923: PPUSH
15924: LD_VAR 0 3
15928: PPUSH
15929: LD_INT 1
15931: PPUSH
15932: CALL_OW 324
// end ; 4 :
15936: GO 19023
15938: LD_INT 4
15940: DOUBLE
15941: EQUAL
15942: IFTRUE 15946
15944: GO 16894
15946: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15947: LD_INT 35
15949: PPUSH
15950: LD_VAR 0 3
15954: PPUSH
15955: LD_INT 1
15957: PPUSH
15958: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15962: LD_INT 45
15964: PPUSH
15965: LD_VAR 0 3
15969: PPUSH
15970: LD_INT 1
15972: PPUSH
15973: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15977: LD_INT 46
15979: PPUSH
15980: LD_VAR 0 3
15984: PPUSH
15985: LD_INT 1
15987: PPUSH
15988: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15992: LD_INT 47
15994: PPUSH
15995: LD_VAR 0 3
15999: PPUSH
16000: LD_INT 1
16002: PPUSH
16003: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16007: LD_INT 1
16009: PPUSH
16010: LD_VAR 0 3
16014: PPUSH
16015: LD_INT 1
16017: PPUSH
16018: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16022: LD_INT 2
16024: PPUSH
16025: LD_VAR 0 3
16029: PPUSH
16030: LD_INT 1
16032: PPUSH
16033: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16037: LD_INT 11
16039: PPUSH
16040: LD_VAR 0 3
16044: PPUSH
16045: LD_INT 1
16047: PPUSH
16048: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16052: LD_INT 20
16054: PPUSH
16055: LD_VAR 0 3
16059: PPUSH
16060: LD_INT 1
16062: PPUSH
16063: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16067: LD_INT 48
16069: PPUSH
16070: LD_VAR 0 3
16074: PPUSH
16075: LD_INT 1
16077: PPUSH
16078: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16082: LD_INT 49
16084: PPUSH
16085: LD_VAR 0 3
16089: PPUSH
16090: LD_INT 1
16092: PPUSH
16093: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16097: LD_INT 69
16099: PPUSH
16100: LD_VAR 0 3
16104: PPUSH
16105: LD_INT 1
16107: PPUSH
16108: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16112: LD_INT 39
16114: PPUSH
16115: LD_VAR 0 3
16119: PPUSH
16120: LD_INT 1
16122: PPUSH
16123: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16127: LD_INT 34
16129: PPUSH
16130: LD_VAR 0 3
16134: PPUSH
16135: LD_INT 1
16137: PPUSH
16138: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16142: LD_INT 42
16144: PPUSH
16145: LD_VAR 0 3
16149: PPUSH
16150: LD_INT 1
16152: PPUSH
16153: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16157: LD_INT 44
16159: PPUSH
16160: LD_VAR 0 3
16164: PPUSH
16165: LD_INT 1
16167: PPUSH
16168: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16172: LD_INT 41
16174: PPUSH
16175: LD_VAR 0 3
16179: PPUSH
16180: LD_INT 1
16182: PPUSH
16183: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16187: LD_INT 43
16189: PPUSH
16190: LD_VAR 0 3
16194: PPUSH
16195: LD_INT 1
16197: PPUSH
16198: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16202: LD_INT 70
16204: PPUSH
16205: LD_VAR 0 3
16209: PPUSH
16210: LD_INT 1
16212: PPUSH
16213: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16217: LD_INT 51
16219: PPUSH
16220: LD_VAR 0 3
16224: PPUSH
16225: LD_INT 1
16227: PPUSH
16228: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16232: LD_INT 52
16234: PPUSH
16235: LD_VAR 0 3
16239: PPUSH
16240: LD_INT 1
16242: PPUSH
16243: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16247: LD_INT 6
16249: PPUSH
16250: LD_VAR 0 3
16254: PPUSH
16255: LD_INT 1
16257: PPUSH
16258: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16262: LD_INT 15
16264: PPUSH
16265: LD_VAR 0 3
16269: PPUSH
16270: LD_INT 1
16272: PPUSH
16273: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16277: LD_INT 7
16279: PPUSH
16280: LD_VAR 0 3
16284: PPUSH
16285: LD_INT 1
16287: PPUSH
16288: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16292: LD_INT 12
16294: PPUSH
16295: LD_VAR 0 3
16299: PPUSH
16300: LD_INT 1
16302: PPUSH
16303: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16307: LD_INT 18
16309: PPUSH
16310: LD_VAR 0 3
16314: PPUSH
16315: LD_INT 1
16317: PPUSH
16318: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16322: LD_INT 60
16324: PPUSH
16325: LD_VAR 0 3
16329: PPUSH
16330: LD_INT 1
16332: PPUSH
16333: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16337: LD_INT 9
16339: PPUSH
16340: LD_VAR 0 3
16344: PPUSH
16345: LD_INT 1
16347: PPUSH
16348: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16352: LD_INT 30
16354: PPUSH
16355: LD_VAR 0 3
16359: PPUSH
16360: LD_INT 1
16362: PPUSH
16363: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16367: LD_INT 37
16369: PPUSH
16370: LD_VAR 0 3
16374: PPUSH
16375: LD_INT 1
16377: PPUSH
16378: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16382: LD_INT 5
16384: PPUSH
16385: LD_VAR 0 3
16389: PPUSH
16390: LD_INT 1
16392: PPUSH
16393: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16397: LD_INT 66
16399: PPUSH
16400: LD_VAR 0 3
16404: PPUSH
16405: LD_INT 1
16407: PPUSH
16408: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16412: LD_INT 21
16414: PPUSH
16415: LD_VAR 0 3
16419: PPUSH
16420: LD_INT 1
16422: PPUSH
16423: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16427: LD_INT 22
16429: PPUSH
16430: LD_VAR 0 3
16434: PPUSH
16435: LD_INT 1
16437: PPUSH
16438: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16442: LD_INT 54
16444: PPUSH
16445: LD_VAR 0 3
16449: PPUSH
16450: LD_INT 1
16452: PPUSH
16453: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16457: LD_INT 0
16459: PPUSH
16460: LD_VAR 0 3
16464: PPUSH
16465: LD_INT 1
16467: PPUSH
16468: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16472: LD_INT 1
16474: PPUSH
16475: LD_VAR 0 3
16479: PPUSH
16480: LD_INT 1
16482: PPUSH
16483: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16487: LD_INT 2
16489: PPUSH
16490: LD_VAR 0 3
16494: PPUSH
16495: LD_INT 1
16497: PPUSH
16498: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16502: LD_INT 3
16504: PPUSH
16505: LD_VAR 0 3
16509: PPUSH
16510: LD_INT 1
16512: PPUSH
16513: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16517: LD_INT 4
16519: PPUSH
16520: LD_VAR 0 3
16524: PPUSH
16525: LD_INT 1
16527: PPUSH
16528: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16532: LD_INT 5
16534: PPUSH
16535: LD_VAR 0 3
16539: PPUSH
16540: LD_INT 1
16542: PPUSH
16543: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16547: LD_INT 6
16549: PPUSH
16550: LD_VAR 0 3
16554: PPUSH
16555: LD_INT 1
16557: PPUSH
16558: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16562: LD_INT 7
16564: PPUSH
16565: LD_VAR 0 3
16569: PPUSH
16570: LD_INT 1
16572: PPUSH
16573: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16577: LD_INT 8
16579: PPUSH
16580: LD_VAR 0 3
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16592: LD_INT 10
16594: PPUSH
16595: LD_VAR 0 3
16599: PPUSH
16600: LD_INT 1
16602: PPUSH
16603: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16607: LD_INT 11
16609: PPUSH
16610: LD_VAR 0 3
16614: PPUSH
16615: LD_INT 1
16617: PPUSH
16618: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16622: LD_INT 12
16624: PPUSH
16625: LD_VAR 0 3
16629: PPUSH
16630: LD_INT 1
16632: PPUSH
16633: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16637: LD_INT 13
16639: PPUSH
16640: LD_VAR 0 3
16644: PPUSH
16645: LD_INT 1
16647: PPUSH
16648: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16652: LD_INT 14
16654: PPUSH
16655: LD_VAR 0 3
16659: PPUSH
16660: LD_INT 1
16662: PPUSH
16663: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16667: LD_INT 15
16669: PPUSH
16670: LD_VAR 0 3
16674: PPUSH
16675: LD_INT 1
16677: PPUSH
16678: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16682: LD_INT 16
16684: PPUSH
16685: LD_VAR 0 3
16689: PPUSH
16690: LD_INT 1
16692: PPUSH
16693: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16697: LD_INT 17
16699: PPUSH
16700: LD_VAR 0 3
16704: PPUSH
16705: LD_INT 1
16707: PPUSH
16708: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16712: LD_INT 19
16714: PPUSH
16715: LD_VAR 0 3
16719: PPUSH
16720: LD_INT 1
16722: PPUSH
16723: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16727: LD_INT 20
16729: PPUSH
16730: LD_VAR 0 3
16734: PPUSH
16735: LD_INT 1
16737: PPUSH
16738: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16742: LD_INT 21
16744: PPUSH
16745: LD_VAR 0 3
16749: PPUSH
16750: LD_INT 1
16752: PPUSH
16753: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16757: LD_INT 23
16759: PPUSH
16760: LD_VAR 0 3
16764: PPUSH
16765: LD_INT 1
16767: PPUSH
16768: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16772: LD_INT 26
16774: PPUSH
16775: LD_VAR 0 3
16779: PPUSH
16780: LD_INT 1
16782: PPUSH
16783: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16787: LD_INT 27
16789: PPUSH
16790: LD_VAR 0 3
16794: PPUSH
16795: LD_INT 1
16797: PPUSH
16798: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16802: LD_INT 28
16804: PPUSH
16805: LD_VAR 0 3
16809: PPUSH
16810: LD_INT 1
16812: PPUSH
16813: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16817: LD_INT 29
16819: PPUSH
16820: LD_VAR 0 3
16824: PPUSH
16825: LD_INT 1
16827: PPUSH
16828: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16832: LD_INT 30
16834: PPUSH
16835: LD_VAR 0 3
16839: PPUSH
16840: LD_INT 1
16842: PPUSH
16843: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16847: LD_INT 31
16849: PPUSH
16850: LD_VAR 0 3
16854: PPUSH
16855: LD_INT 1
16857: PPUSH
16858: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16862: LD_INT 32
16864: PPUSH
16865: LD_VAR 0 3
16869: PPUSH
16870: LD_INT 1
16872: PPUSH
16873: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16877: LD_INT 36
16879: PPUSH
16880: LD_VAR 0 3
16884: PPUSH
16885: LD_INT 1
16887: PPUSH
16888: CALL_OW 324
// end ; 5 :
16892: GO 19023
16894: LD_INT 5
16896: DOUBLE
16897: EQUAL
16898: IFTRUE 16902
16900: GO 18015
16902: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16903: LD_INT 35
16905: PPUSH
16906: LD_VAR 0 3
16910: PPUSH
16911: LD_INT 1
16913: PPUSH
16914: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16918: LD_INT 45
16920: PPUSH
16921: LD_VAR 0 3
16925: PPUSH
16926: LD_INT 1
16928: PPUSH
16929: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16933: LD_INT 46
16935: PPUSH
16936: LD_VAR 0 3
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16948: LD_INT 47
16950: PPUSH
16951: LD_VAR 0 3
16955: PPUSH
16956: LD_INT 1
16958: PPUSH
16959: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16963: LD_INT 1
16965: PPUSH
16966: LD_VAR 0 3
16970: PPUSH
16971: LD_INT 1
16973: PPUSH
16974: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16978: LD_INT 2
16980: PPUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 1
16988: PPUSH
16989: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16993: LD_INT 11
16995: PPUSH
16996: LD_VAR 0 3
17000: PPUSH
17001: LD_INT 1
17003: PPUSH
17004: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17008: LD_INT 20
17010: PPUSH
17011: LD_VAR 0 3
17015: PPUSH
17016: LD_INT 1
17018: PPUSH
17019: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17023: LD_INT 48
17025: PPUSH
17026: LD_VAR 0 3
17030: PPUSH
17031: LD_INT 1
17033: PPUSH
17034: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17038: LD_INT 49
17040: PPUSH
17041: LD_VAR 0 3
17045: PPUSH
17046: LD_INT 1
17048: PPUSH
17049: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17053: LD_INT 69
17055: PPUSH
17056: LD_VAR 0 3
17060: PPUSH
17061: LD_INT 1
17063: PPUSH
17064: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17068: LD_INT 39
17070: PPUSH
17071: LD_VAR 0 3
17075: PPUSH
17076: LD_INT 1
17078: PPUSH
17079: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17083: LD_INT 34
17085: PPUSH
17086: LD_VAR 0 3
17090: PPUSH
17091: LD_INT 1
17093: PPUSH
17094: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17098: LD_INT 42
17100: PPUSH
17101: LD_VAR 0 3
17105: PPUSH
17106: LD_INT 1
17108: PPUSH
17109: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17113: LD_INT 44
17115: PPUSH
17116: LD_VAR 0 3
17120: PPUSH
17121: LD_INT 1
17123: PPUSH
17124: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17128: LD_INT 41
17130: PPUSH
17131: LD_VAR 0 3
17135: PPUSH
17136: LD_INT 1
17138: PPUSH
17139: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17143: LD_INT 40
17145: PPUSH
17146: LD_VAR 0 3
17150: PPUSH
17151: LD_INT 1
17153: PPUSH
17154: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17158: LD_INT 43
17160: PPUSH
17161: LD_VAR 0 3
17165: PPUSH
17166: LD_INT 1
17168: PPUSH
17169: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17173: LD_INT 70
17175: PPUSH
17176: LD_VAR 0 3
17180: PPUSH
17181: LD_INT 1
17183: PPUSH
17184: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17188: LD_INT 51
17190: PPUSH
17191: LD_VAR 0 3
17195: PPUSH
17196: LD_INT 1
17198: PPUSH
17199: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17203: LD_INT 52
17205: PPUSH
17206: LD_VAR 0 3
17210: PPUSH
17211: LD_INT 1
17213: PPUSH
17214: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17218: LD_INT 6
17220: PPUSH
17221: LD_VAR 0 3
17225: PPUSH
17226: LD_INT 1
17228: PPUSH
17229: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17233: LD_INT 15
17235: PPUSH
17236: LD_VAR 0 3
17240: PPUSH
17241: LD_INT 1
17243: PPUSH
17244: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17248: LD_INT 7
17250: PPUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_INT 1
17258: PPUSH
17259: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17263: LD_INT 12
17265: PPUSH
17266: LD_VAR 0 3
17270: PPUSH
17271: LD_INT 1
17273: PPUSH
17274: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17278: LD_INT 17
17280: PPUSH
17281: LD_VAR 0 3
17285: PPUSH
17286: LD_INT 1
17288: PPUSH
17289: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17293: LD_INT 18
17295: PPUSH
17296: LD_VAR 0 3
17300: PPUSH
17301: LD_INT 1
17303: PPUSH
17304: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17308: LD_INT 60
17310: PPUSH
17311: LD_VAR 0 3
17315: PPUSH
17316: LD_INT 1
17318: PPUSH
17319: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17323: LD_INT 32
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: LD_INT 1
17333: PPUSH
17334: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17338: LD_INT 9
17340: PPUSH
17341: LD_VAR 0 3
17345: PPUSH
17346: LD_INT 1
17348: PPUSH
17349: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17353: LD_INT 57
17355: PPUSH
17356: LD_VAR 0 3
17360: PPUSH
17361: LD_INT 1
17363: PPUSH
17364: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17368: LD_INT 30
17370: PPUSH
17371: LD_VAR 0 3
17375: PPUSH
17376: LD_INT 1
17378: PPUSH
17379: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17383: LD_INT 37
17385: PPUSH
17386: LD_VAR 0 3
17390: PPUSH
17391: LD_INT 1
17393: PPUSH
17394: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17398: LD_INT 63
17400: PPUSH
17401: LD_VAR 0 3
17405: PPUSH
17406: LD_INT 1
17408: PPUSH
17409: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17413: LD_INT 3
17415: PPUSH
17416: LD_VAR 0 3
17420: PPUSH
17421: LD_INT 1
17423: PPUSH
17424: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17428: LD_INT 4
17430: PPUSH
17431: LD_VAR 0 3
17435: PPUSH
17436: LD_INT 1
17438: PPUSH
17439: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17443: LD_INT 5
17445: PPUSH
17446: LD_VAR 0 3
17450: PPUSH
17451: LD_INT 1
17453: PPUSH
17454: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17458: LD_INT 66
17460: PPUSH
17461: LD_VAR 0 3
17465: PPUSH
17466: LD_INT 1
17468: PPUSH
17469: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17473: LD_INT 21
17475: PPUSH
17476: LD_VAR 0 3
17480: PPUSH
17481: LD_INT 1
17483: PPUSH
17484: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17488: LD_INT 22
17490: PPUSH
17491: LD_VAR 0 3
17495: PPUSH
17496: LD_INT 1
17498: PPUSH
17499: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17503: LD_INT 19
17505: PPUSH
17506: LD_VAR 0 3
17510: PPUSH
17511: LD_INT 1
17513: PPUSH
17514: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17518: LD_INT 54
17520: PPUSH
17521: LD_VAR 0 3
17525: PPUSH
17526: LD_INT 1
17528: PPUSH
17529: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17533: LD_INT 55
17535: PPUSH
17536: LD_VAR 0 3
17540: PPUSH
17541: LD_INT 1
17543: PPUSH
17544: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17548: LD_INT 0
17550: PPUSH
17551: LD_VAR 0 3
17555: PPUSH
17556: LD_INT 1
17558: PPUSH
17559: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17563: LD_INT 1
17565: PPUSH
17566: LD_VAR 0 3
17570: PPUSH
17571: LD_INT 1
17573: PPUSH
17574: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17578: LD_INT 2
17580: PPUSH
17581: LD_VAR 0 3
17585: PPUSH
17586: LD_INT 1
17588: PPUSH
17589: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17593: LD_INT 3
17595: PPUSH
17596: LD_VAR 0 3
17600: PPUSH
17601: LD_INT 1
17603: PPUSH
17604: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17608: LD_INT 4
17610: PPUSH
17611: LD_VAR 0 3
17615: PPUSH
17616: LD_INT 1
17618: PPUSH
17619: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17623: LD_INT 5
17625: PPUSH
17626: LD_VAR 0 3
17630: PPUSH
17631: LD_INT 1
17633: PPUSH
17634: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17638: LD_INT 6
17640: PPUSH
17641: LD_VAR 0 3
17645: PPUSH
17646: LD_INT 1
17648: PPUSH
17649: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17653: LD_INT 7
17655: PPUSH
17656: LD_VAR 0 3
17660: PPUSH
17661: LD_INT 1
17663: PPUSH
17664: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17668: LD_INT 8
17670: PPUSH
17671: LD_VAR 0 3
17675: PPUSH
17676: LD_INT 1
17678: PPUSH
17679: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17683: LD_INT 10
17685: PPUSH
17686: LD_VAR 0 3
17690: PPUSH
17691: LD_INT 1
17693: PPUSH
17694: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17698: LD_INT 11
17700: PPUSH
17701: LD_VAR 0 3
17705: PPUSH
17706: LD_INT 1
17708: PPUSH
17709: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17713: LD_INT 12
17715: PPUSH
17716: LD_VAR 0 3
17720: PPUSH
17721: LD_INT 1
17723: PPUSH
17724: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17728: LD_INT 13
17730: PPUSH
17731: LD_VAR 0 3
17735: PPUSH
17736: LD_INT 1
17738: PPUSH
17739: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17743: LD_INT 14
17745: PPUSH
17746: LD_VAR 0 3
17750: PPUSH
17751: LD_INT 1
17753: PPUSH
17754: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17758: LD_INT 15
17760: PPUSH
17761: LD_VAR 0 3
17765: PPUSH
17766: LD_INT 1
17768: PPUSH
17769: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17773: LD_INT 16
17775: PPUSH
17776: LD_VAR 0 3
17780: PPUSH
17781: LD_INT 1
17783: PPUSH
17784: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17788: LD_INT 17
17790: PPUSH
17791: LD_VAR 0 3
17795: PPUSH
17796: LD_INT 1
17798: PPUSH
17799: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
17803: LD_INT 18
17805: PPUSH
17806: LD_VAR 0 3
17810: PPUSH
17811: LD_INT 1
17813: PPUSH
17814: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17818: LD_INT 19
17820: PPUSH
17821: LD_VAR 0 3
17825: PPUSH
17826: LD_INT 1
17828: PPUSH
17829: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17833: LD_INT 20
17835: PPUSH
17836: LD_VAR 0 3
17840: PPUSH
17841: LD_INT 1
17843: PPUSH
17844: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17848: LD_INT 21
17850: PPUSH
17851: LD_VAR 0 3
17855: PPUSH
17856: LD_INT 1
17858: PPUSH
17859: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17863: LD_INT 23
17865: PPUSH
17866: LD_VAR 0 3
17870: PPUSH
17871: LD_INT 1
17873: PPUSH
17874: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17878: LD_INT 26
17880: PPUSH
17881: LD_VAR 0 3
17885: PPUSH
17886: LD_INT 1
17888: PPUSH
17889: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17893: LD_INT 27
17895: PPUSH
17896: LD_VAR 0 3
17900: PPUSH
17901: LD_INT 1
17903: PPUSH
17904: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17908: LD_INT 28
17910: PPUSH
17911: LD_VAR 0 3
17915: PPUSH
17916: LD_INT 1
17918: PPUSH
17919: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17923: LD_INT 29
17925: PPUSH
17926: LD_VAR 0 3
17930: PPUSH
17931: LD_INT 1
17933: PPUSH
17934: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17938: LD_INT 30
17940: PPUSH
17941: LD_VAR 0 3
17945: PPUSH
17946: LD_INT 1
17948: PPUSH
17949: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17953: LD_INT 31
17955: PPUSH
17956: LD_VAR 0 3
17960: PPUSH
17961: LD_INT 1
17963: PPUSH
17964: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17968: LD_INT 32
17970: PPUSH
17971: LD_VAR 0 3
17975: PPUSH
17976: LD_INT 1
17978: PPUSH
17979: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
17983: LD_INT 33
17985: PPUSH
17986: LD_VAR 0 3
17990: PPUSH
17991: LD_INT 1
17993: PPUSH
17994: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17998: LD_INT 36
18000: PPUSH
18001: LD_VAR 0 3
18005: PPUSH
18006: LD_INT 1
18008: PPUSH
18009: CALL_OW 324
// end ; 6 :
18013: GO 19023
18015: LD_INT 6
18017: DOUBLE
18018: EQUAL
18019: IFTRUE 18023
18021: GO 18948
18023: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18024: LD_INT 35
18026: PPUSH
18027: LD_VAR 0 3
18031: PPUSH
18032: LD_INT 1
18034: PPUSH
18035: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18039: LD_INT 45
18041: PPUSH
18042: LD_VAR 0 3
18046: PPUSH
18047: LD_INT 1
18049: PPUSH
18050: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18054: LD_INT 46
18056: PPUSH
18057: LD_VAR 0 3
18061: PPUSH
18062: LD_INT 1
18064: PPUSH
18065: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18069: LD_INT 47
18071: PPUSH
18072: LD_VAR 0 3
18076: PPUSH
18077: LD_INT 1
18079: PPUSH
18080: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18084: LD_INT 1
18086: PPUSH
18087: LD_VAR 0 3
18091: PPUSH
18092: LD_INT 1
18094: PPUSH
18095: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18099: LD_INT 2
18101: PPUSH
18102: LD_VAR 0 3
18106: PPUSH
18107: LD_INT 1
18109: PPUSH
18110: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18114: LD_INT 11
18116: PPUSH
18117: LD_VAR 0 3
18121: PPUSH
18122: LD_INT 1
18124: PPUSH
18125: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18129: LD_INT 20
18131: PPUSH
18132: LD_VAR 0 3
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18144: LD_INT 48
18146: PPUSH
18147: LD_VAR 0 3
18151: PPUSH
18152: LD_INT 1
18154: PPUSH
18155: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18159: LD_INT 49
18161: PPUSH
18162: LD_VAR 0 3
18166: PPUSH
18167: LD_INT 1
18169: PPUSH
18170: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18174: LD_INT 50
18176: PPUSH
18177: LD_VAR 0 3
18181: PPUSH
18182: LD_INT 1
18184: PPUSH
18185: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18189: LD_INT 69
18191: PPUSH
18192: LD_VAR 0 3
18196: PPUSH
18197: LD_INT 1
18199: PPUSH
18200: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18204: LD_INT 39
18206: PPUSH
18207: LD_VAR 0 3
18211: PPUSH
18212: LD_INT 1
18214: PPUSH
18215: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18219: LD_INT 34
18221: PPUSH
18222: LD_VAR 0 3
18226: PPUSH
18227: LD_INT 1
18229: PPUSH
18230: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18234: LD_INT 42
18236: PPUSH
18237: LD_VAR 0 3
18241: PPUSH
18242: LD_INT 1
18244: PPUSH
18245: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18249: LD_INT 44
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: LD_INT 1
18259: PPUSH
18260: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18264: LD_INT 41
18266: PPUSH
18267: LD_VAR 0 3
18271: PPUSH
18272: LD_INT 1
18274: PPUSH
18275: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18279: LD_INT 13
18281: PPUSH
18282: LD_VAR 0 3
18286: PPUSH
18287: LD_INT 1
18289: PPUSH
18290: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18294: LD_INT 40
18296: PPUSH
18297: LD_VAR 0 3
18301: PPUSH
18302: LD_INT 1
18304: PPUSH
18305: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18309: LD_INT 43
18311: PPUSH
18312: LD_VAR 0 3
18316: PPUSH
18317: LD_INT 1
18319: PPUSH
18320: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18324: LD_INT 70
18326: PPUSH
18327: LD_VAR 0 3
18331: PPUSH
18332: LD_INT 1
18334: PPUSH
18335: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18339: LD_INT 23
18341: PPUSH
18342: LD_VAR 0 3
18346: PPUSH
18347: LD_INT 1
18349: PPUSH
18350: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18354: LD_INT 51
18356: PPUSH
18357: LD_VAR 0 3
18361: PPUSH
18362: LD_INT 1
18364: PPUSH
18365: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18369: LD_INT 52
18371: PPUSH
18372: LD_VAR 0 3
18376: PPUSH
18377: LD_INT 1
18379: PPUSH
18380: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18384: LD_INT 6
18386: PPUSH
18387: LD_VAR 0 3
18391: PPUSH
18392: LD_INT 1
18394: PPUSH
18395: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18399: LD_INT 15
18401: PPUSH
18402: LD_VAR 0 3
18406: PPUSH
18407: LD_INT 1
18409: PPUSH
18410: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18414: LD_INT 7
18416: PPUSH
18417: LD_VAR 0 3
18421: PPUSH
18422: LD_INT 1
18424: PPUSH
18425: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18429: LD_INT 12
18431: PPUSH
18432: LD_VAR 0 3
18436: PPUSH
18437: LD_INT 1
18439: PPUSH
18440: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
18444: LD_INT 10
18446: PPUSH
18447: LD_VAR 0 3
18451: PPUSH
18452: LD_INT 1
18454: PPUSH
18455: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
18459: LD_INT 17
18461: PPUSH
18462: LD_VAR 0 3
18466: PPUSH
18467: LD_INT 1
18469: PPUSH
18470: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18474: LD_INT 18
18476: PPUSH
18477: LD_VAR 0 3
18481: PPUSH
18482: LD_INT 1
18484: PPUSH
18485: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18489: LD_INT 60
18491: PPUSH
18492: LD_VAR 0 3
18496: PPUSH
18497: LD_INT 1
18499: PPUSH
18500: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
18504: LD_INT 61
18506: PPUSH
18507: LD_VAR 0 3
18511: PPUSH
18512: LD_INT 1
18514: PPUSH
18515: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18519: LD_INT 32
18521: PPUSH
18522: LD_VAR 0 3
18526: PPUSH
18527: LD_INT 1
18529: PPUSH
18530: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
18534: LD_INT 27
18536: PPUSH
18537: LD_VAR 0 3
18541: PPUSH
18542: LD_INT 1
18544: PPUSH
18545: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
18549: LD_INT 36
18551: PPUSH
18552: LD_VAR 0 3
18556: PPUSH
18557: LD_INT 1
18559: PPUSH
18560: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
18564: LD_INT 33
18566: PPUSH
18567: LD_VAR 0 3
18571: PPUSH
18572: LD_INT 1
18574: PPUSH
18575: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18579: LD_INT 9
18581: PPUSH
18582: LD_VAR 0 3
18586: PPUSH
18587: LD_INT 1
18589: PPUSH
18590: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
18594: LD_INT 38
18596: PPUSH
18597: LD_VAR 0 3
18601: PPUSH
18602: LD_INT 1
18604: PPUSH
18605: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18609: LD_INT 57
18611: PPUSH
18612: LD_VAR 0 3
18616: PPUSH
18617: LD_INT 1
18619: PPUSH
18620: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
18624: LD_INT 58
18626: PPUSH
18627: LD_VAR 0 3
18631: PPUSH
18632: LD_INT 1
18634: PPUSH
18635: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
18639: LD_INT 28
18641: PPUSH
18642: LD_VAR 0 3
18646: PPUSH
18647: LD_INT 1
18649: PPUSH
18650: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
18654: LD_INT 29
18656: PPUSH
18657: LD_VAR 0 3
18661: PPUSH
18662: LD_INT 1
18664: PPUSH
18665: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18669: LD_INT 30
18671: PPUSH
18672: LD_VAR 0 3
18676: PPUSH
18677: LD_INT 1
18679: PPUSH
18680: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18684: LD_INT 37
18686: PPUSH
18687: LD_VAR 0 3
18691: PPUSH
18692: LD_INT 1
18694: PPUSH
18695: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18699: LD_INT 63
18701: PPUSH
18702: LD_VAR 0 3
18706: PPUSH
18707: LD_INT 1
18709: PPUSH
18710: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
18714: LD_INT 64
18716: PPUSH
18717: LD_VAR 0 3
18721: PPUSH
18722: LD_INT 1
18724: PPUSH
18725: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18729: LD_INT 3
18731: PPUSH
18732: LD_VAR 0 3
18736: PPUSH
18737: LD_INT 1
18739: PPUSH
18740: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18744: LD_INT 4
18746: PPUSH
18747: LD_VAR 0 3
18751: PPUSH
18752: LD_INT 1
18754: PPUSH
18755: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18759: LD_INT 5
18761: PPUSH
18762: LD_VAR 0 3
18766: PPUSH
18767: LD_INT 1
18769: PPUSH
18770: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
18774: LD_INT 8
18776: PPUSH
18777: LD_VAR 0 3
18781: PPUSH
18782: LD_INT 1
18784: PPUSH
18785: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18789: LD_INT 66
18791: PPUSH
18792: LD_VAR 0 3
18796: PPUSH
18797: LD_INT 1
18799: PPUSH
18800: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
18804: LD_INT 67
18806: PPUSH
18807: LD_VAR 0 3
18811: PPUSH
18812: LD_INT 1
18814: PPUSH
18815: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18819: LD_INT 21
18821: PPUSH
18822: LD_VAR 0 3
18826: PPUSH
18827: LD_INT 1
18829: PPUSH
18830: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18834: LD_INT 22
18836: PPUSH
18837: LD_VAR 0 3
18841: PPUSH
18842: LD_INT 1
18844: PPUSH
18845: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18849: LD_INT 19
18851: PPUSH
18852: LD_VAR 0 3
18856: PPUSH
18857: LD_INT 1
18859: PPUSH
18860: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
18864: LD_INT 26
18866: PPUSH
18867: LD_VAR 0 3
18871: PPUSH
18872: LD_INT 1
18874: PPUSH
18875: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18879: LD_INT 54
18881: PPUSH
18882: LD_VAR 0 3
18886: PPUSH
18887: LD_INT 1
18889: PPUSH
18890: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18894: LD_INT 55
18896: PPUSH
18897: LD_VAR 0 3
18901: PPUSH
18902: LD_INT 1
18904: PPUSH
18905: CALL_OW 322
// for i = 0 to 39 do
18909: LD_ADDR_VAR 0 4
18913: PUSH
18914: DOUBLE
18915: LD_INT 0
18917: DEC
18918: ST_TO_ADDR
18919: LD_INT 39
18921: PUSH
18922: FOR_TO
18923: IFFALSE 18944
// SetRestrict ( i , side , true ) ;
18925: LD_VAR 0 4
18929: PPUSH
18930: LD_VAR 0 3
18934: PPUSH
18935: LD_INT 1
18937: PPUSH
18938: CALL_OW 324
18942: GO 18922
18944: POP
18945: POP
// end ; else
18946: GO 19023
18948: POP
// begin for i = 1 to 73 do
18949: LD_ADDR_VAR 0 4
18953: PUSH
18954: DOUBLE
18955: LD_INT 1
18957: DEC
18958: ST_TO_ADDR
18959: LD_INT 73
18961: PUSH
18962: FOR_TO
18963: IFFALSE 18984
// SetTech ( i , side , state_enabled ) ;
18965: LD_VAR 0 4
18969: PPUSH
18970: LD_VAR 0 3
18974: PPUSH
18975: LD_INT 1
18977: PPUSH
18978: CALL_OW 322
18982: GO 18962
18984: POP
18985: POP
// for i = 0 to 39 do
18986: LD_ADDR_VAR 0 4
18990: PUSH
18991: DOUBLE
18992: LD_INT 0
18994: DEC
18995: ST_TO_ADDR
18996: LD_INT 39
18998: PUSH
18999: FOR_TO
19000: IFFALSE 19021
// SetRestrict ( i , side , true ) ;
19002: LD_VAR 0 4
19006: PPUSH
19007: LD_VAR 0 3
19011: PPUSH
19012: LD_INT 1
19014: PPUSH
19015: CALL_OW 324
19019: GO 18999
19021: POP
19022: POP
// end ; end ; end ;
19023: GO 15028
19025: POP
19026: POP
// end ; end_of_file
19027: LD_VAR 0 2
19031: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
19032: LD_INT 0
19034: PPUSH
19035: PPUSH
19036: PPUSH
19037: PPUSH
19038: PPUSH
19039: PPUSH
19040: PPUSH
19041: PPUSH
19042: PPUSH
// for i := 1 to 8 do
19043: LD_ADDR_VAR 0 2
19047: PUSH
19048: DOUBLE
19049: LD_INT 1
19051: DEC
19052: ST_TO_ADDR
19053: LD_INT 8
19055: PUSH
19056: FOR_TO
19057: IFFALSE 19441
// begin if Side_Positions [ i ] then
19059: LD_EXP 32
19063: PUSH
19064: LD_VAR 0 2
19068: ARRAY
19069: IFFALSE 19439
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
19071: LD_ADDR_VAR 0 7
19075: PUSH
19076: LD_INT 22
19078: PUSH
19079: LD_VAR 0 2
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 21
19090: PUSH
19091: LD_INT 1
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PPUSH
19102: CALL_OW 69
19106: PUSH
19107: LD_INT 0
19109: PLUS
19110: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19111: LD_ADDR_VAR 0 9
19115: PUSH
19116: LD_INT 22
19118: PUSH
19119: LD_VAR 0 2
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 2
19130: PUSH
19131: LD_INT 30
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 30
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PPUSH
19160: CALL_OW 69
19164: ST_TO_ADDR
// crates := 0 ;
19165: LD_ADDR_VAR 0 4
19169: PUSH
19170: LD_INT 0
19172: ST_TO_ADDR
// oil := 0 ;
19173: LD_ADDR_VAR 0 5
19177: PUSH
19178: LD_INT 0
19180: ST_TO_ADDR
// sib := 0 ;
19181: LD_ADDR_VAR 0 6
19185: PUSH
19186: LD_INT 0
19188: ST_TO_ADDR
// if bases then
19189: LD_VAR 0 9
19193: IFFALSE 19299
// begin for j in bases do
19195: LD_ADDR_VAR 0 3
19199: PUSH
19200: LD_VAR 0 9
19204: PUSH
19205: FOR_IN
19206: IFFALSE 19297
// begin base := GetBase ( j ) ;
19208: LD_ADDR_VAR 0 8
19212: PUSH
19213: LD_VAR 0 3
19217: PPUSH
19218: CALL_OW 274
19222: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
19223: LD_ADDR_VAR 0 4
19227: PUSH
19228: LD_VAR 0 4
19232: PUSH
19233: LD_VAR 0 8
19237: PPUSH
19238: LD_INT 1
19240: PPUSH
19241: CALL_OW 275
19245: PLUS
19246: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
19247: LD_ADDR_VAR 0 5
19251: PUSH
19252: LD_VAR 0 5
19256: PUSH
19257: LD_VAR 0 8
19261: PPUSH
19262: LD_INT 2
19264: PPUSH
19265: CALL_OW 275
19269: PLUS
19270: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
19271: LD_ADDR_VAR 0 6
19275: PUSH
19276: LD_VAR 0 6
19280: PUSH
19281: LD_VAR 0 8
19285: PPUSH
19286: LD_INT 3
19288: PPUSH
19289: CALL_OW 275
19293: PLUS
19294: ST_TO_ADDR
// end ;
19295: GO 19205
19297: POP
19298: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
19299: LD_STRING setSpecText(
19301: PUSH
19302: LD_VAR 0 2
19306: STR
19307: PUSH
19308: LD_STRING ,
19310: STR
19311: PUSH
19312: LD_INT 2
19314: STR
19315: PUSH
19316: LD_STRING ,
19318: STR
19319: PUSH
19320: LD_VAR 0 4
19324: STR
19325: PUSH
19326: LD_STRING )
19328: STR
19329: PPUSH
19330: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
19334: LD_STRING setSpecText(
19336: PUSH
19337: LD_VAR 0 2
19341: STR
19342: PUSH
19343: LD_STRING ,
19345: STR
19346: PUSH
19347: LD_INT 3
19349: STR
19350: PUSH
19351: LD_STRING ,
19353: STR
19354: PUSH
19355: LD_VAR 0 5
19359: STR
19360: PUSH
19361: LD_STRING )
19363: STR
19364: PPUSH
19365: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
19369: LD_STRING setSpecText(
19371: PUSH
19372: LD_VAR 0 2
19376: STR
19377: PUSH
19378: LD_STRING ,
19380: STR
19381: PUSH
19382: LD_INT 4
19384: STR
19385: PUSH
19386: LD_STRING ,
19388: STR
19389: PUSH
19390: LD_VAR 0 6
19394: STR
19395: PUSH
19396: LD_STRING )
19398: STR
19399: PPUSH
19400: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
19404: LD_STRING setSpecText(
19406: PUSH
19407: LD_VAR 0 2
19411: STR
19412: PUSH
19413: LD_STRING ,
19415: STR
19416: PUSH
19417: LD_INT 5
19419: STR
19420: PUSH
19421: LD_STRING ,
19423: STR
19424: PUSH
19425: LD_VAR 0 7
19429: STR
19430: PUSH
19431: LD_STRING )
19433: STR
19434: PPUSH
19435: CALL_OW 559
// end ; end ;
19439: GO 19056
19441: POP
19442: POP
// end ;
19443: LD_VAR 0 1
19447: RET
// every 0 0$1 do
19448: GO 19450
19450: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
19451: LD_STRING setSpecLogoNumber(
19453: PUSH
19454: LD_INT 2
19456: STR
19457: PUSH
19458: LD_STRING ,
19460: STR
19461: PUSH
19462: LD_INT 1
19464: STR
19465: PUSH
19466: LD_STRING )
19468: STR
19469: PPUSH
19470: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
19474: LD_STRING setSpecLogoNumber(
19476: PUSH
19477: LD_INT 3
19479: STR
19480: PUSH
19481: LD_STRING ,
19483: STR
19484: PUSH
19485: LD_INT 2
19487: STR
19488: PUSH
19489: LD_STRING )
19491: STR
19492: PPUSH
19493: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
19497: LD_STRING setSpecLogoNumber(
19499: PUSH
19500: LD_INT 4
19502: STR
19503: PUSH
19504: LD_STRING ,
19506: STR
19507: PUSH
19508: LD_INT 3
19510: STR
19511: PUSH
19512: LD_STRING )
19514: STR
19515: PPUSH
19516: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
19520: LD_STRING setSpecLogoNumber(
19522: PUSH
19523: LD_INT 5
19525: STR
19526: PUSH
19527: LD_STRING ,
19529: STR
19530: PUSH
19531: LD_INT 4
19533: STR
19534: PUSH
19535: LD_STRING )
19537: STR
19538: PPUSH
19539: CALL_OW 559
// end ;
19543: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
19544: LD_INT 2
19546: PUSH
19547: LD_INT 30
19549: PUSH
19550: LD_INT 0
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 30
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: LIST
19571: PPUSH
19572: CALL_OW 69
19576: IFFALSE 19586
19578: GO 19580
19580: DISABLE
// begin enable ;
19581: ENABLE
// UpdateSpectatorBar ;
19582: CALL 19032 0 0
// end ; end_of_file
19586: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
19587: LD_INT 0
19589: PPUSH
19590: PPUSH
19591: PPUSH
// BuildUpTime_Delay = 0 ;
19592: LD_ADDR_EXP 43
19596: PUSH
19597: LD_INT 0
19599: ST_TO_ADDR
// if not def_builduptime then
19600: LD_EXP 15
19604: NOT
19605: IFFALSE 19609
// exit ;
19607: GO 19792
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
19609: LD_ADDR_EXP 43
19613: PUSH
19614: LD_INT 8400
19616: PUSH
19617: LD_INT 2100
19619: PUSH
19620: LD_EXP 15
19624: MUL
19625: PLUS
19626: ST_TO_ADDR
// BuildUpTimeActive := true ;
19627: LD_ADDR_EXP 42
19631: PUSH
19632: LD_INT 1
19634: ST_TO_ADDR
// for i := 1 to 8 do
19635: LD_ADDR_VAR 0 2
19639: PUSH
19640: DOUBLE
19641: LD_INT 1
19643: DEC
19644: ST_TO_ADDR
19645: LD_INT 8
19647: PUSH
19648: FOR_TO
19649: IFFALSE 19790
// if Side_Positions [ i ] then
19651: LD_EXP 32
19655: PUSH
19656: LD_VAR 0 2
19660: ARRAY
19661: IFFALSE 19788
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
19663: LD_EXP 41
19667: PUSH
19668: LD_EXP 32
19672: PUSH
19673: LD_VAR 0 2
19677: ARRAY
19678: ARRAY
19679: PPUSH
19680: LD_INT 5
19682: PPUSH
19683: CALL_OW 424
// for j := 1 to 8 do
19687: LD_ADDR_VAR 0 3
19691: PUSH
19692: DOUBLE
19693: LD_INT 1
19695: DEC
19696: ST_TO_ADDR
19697: LD_INT 8
19699: PUSH
19700: FOR_TO
19701: IFFALSE 19786
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19703: LD_EXP 32
19707: PUSH
19708: LD_VAR 0 3
19712: ARRAY
19713: PUSH
19714: LD_EXP 30
19718: PUSH
19719: LD_VAR 0 2
19723: ARRAY
19724: PUSH
19725: LD_EXP 30
19729: PUSH
19730: LD_VAR 0 3
19734: ARRAY
19735: NONEQUAL
19736: PUSH
19737: LD_EXP 34
19741: NOT
19742: PUSH
19743: LD_VAR 0 2
19747: PUSH
19748: LD_VAR 0 3
19752: NONEQUAL
19753: AND
19754: OR
19755: AND
19756: IFFALSE 19784
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19758: LD_VAR 0 3
19762: PPUSH
19763: LD_EXP 41
19767: PUSH
19768: LD_EXP 32
19772: PUSH
19773: LD_VAR 0 2
19777: ARRAY
19778: ARRAY
19779: PPUSH
19780: CALL_OW 333
19784: GO 19700
19786: POP
19787: POP
// end ;
19788: GO 19648
19790: POP
19791: POP
// end ;
19792: LD_VAR 0 1
19796: RET
// export function EndBuildUp ; var i , j ; begin
19797: LD_INT 0
19799: PPUSH
19800: PPUSH
19801: PPUSH
// BuildUpTimeActive := false ;
19802: LD_ADDR_EXP 42
19806: PUSH
19807: LD_INT 0
19809: ST_TO_ADDR
// for i := 1 to 8 do
19810: LD_ADDR_VAR 0 2
19814: PUSH
19815: DOUBLE
19816: LD_INT 1
19818: DEC
19819: ST_TO_ADDR
19820: LD_INT 8
19822: PUSH
19823: FOR_TO
19824: IFFALSE 19965
// if Side_Positions [ i ] then
19826: LD_EXP 32
19830: PUSH
19831: LD_VAR 0 2
19835: ARRAY
19836: IFFALSE 19963
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
19838: LD_EXP 41
19842: PUSH
19843: LD_EXP 32
19847: PUSH
19848: LD_VAR 0 2
19852: ARRAY
19853: ARRAY
19854: PPUSH
19855: LD_INT 0
19857: PPUSH
19858: CALL_OW 424
// for j := 1 to 8 do
19862: LD_ADDR_VAR 0 3
19866: PUSH
19867: DOUBLE
19868: LD_INT 1
19870: DEC
19871: ST_TO_ADDR
19872: LD_INT 8
19874: PUSH
19875: FOR_TO
19876: IFFALSE 19961
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19878: LD_EXP 32
19882: PUSH
19883: LD_VAR 0 3
19887: ARRAY
19888: PUSH
19889: LD_EXP 30
19893: PUSH
19894: LD_VAR 0 2
19898: ARRAY
19899: PUSH
19900: LD_EXP 30
19904: PUSH
19905: LD_VAR 0 3
19909: ARRAY
19910: NONEQUAL
19911: PUSH
19912: LD_EXP 34
19916: NOT
19917: PUSH
19918: LD_VAR 0 2
19922: PUSH
19923: LD_VAR 0 3
19927: NONEQUAL
19928: AND
19929: OR
19930: AND
19931: IFFALSE 19959
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19933: LD_VAR 0 3
19937: PPUSH
19938: LD_EXP 41
19942: PUSH
19943: LD_EXP 32
19947: PUSH
19948: LD_VAR 0 2
19952: ARRAY
19953: ARRAY
19954: PPUSH
19955: CALL_OW 334
19959: GO 19875
19961: POP
19962: POP
// end ;
19963: GO 19823
19965: POP
19966: POP
// end ;
19967: LD_VAR 0 1
19971: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
19972: LD_EXP 42
19976: IFFALSE 20151
19978: GO 19980
19980: DISABLE
19981: LD_INT 0
19983: PPUSH
19984: PPUSH
// begin for i := 1 to 8 do
19985: LD_ADDR_VAR 0 1
19989: PUSH
19990: DOUBLE
19991: LD_INT 1
19993: DEC
19994: ST_TO_ADDR
19995: LD_INT 8
19997: PUSH
19998: FOR_TO
19999: IFFALSE 20148
// if Side_Positions [ i ] then
20001: LD_EXP 32
20005: PUSH
20006: LD_VAR 0 1
20010: ARRAY
20011: IFFALSE 20146
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
20013: LD_ADDR_VAR 0 2
20017: PUSH
20018: LD_EXP 41
20022: PUSH
20023: LD_EXP 32
20027: PUSH
20028: LD_VAR 0 1
20032: ARRAY
20033: ARRAY
20034: PPUSH
20035: LD_INT 2
20037: PUSH
20038: LD_INT 21
20040: PUSH
20041: LD_INT 1
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: PUSH
20048: LD_INT 21
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 22
20065: PUSH
20066: LD_OWVAR 2
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PPUSH
20079: CALL_OW 70
20083: PUSH
20084: FOR_IN
20085: IFFALSE 20144
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
20087: LD_EXP 30
20091: PUSH
20092: LD_VAR 0 1
20096: ARRAY
20097: PUSH
20098: LD_EXP 30
20102: PUSH
20103: LD_OWVAR 2
20107: ARRAY
20108: NONEQUAL
20109: PUSH
20110: LD_EXP 34
20114: NOT
20115: PUSH
20116: LD_VAR 0 1
20120: PUSH
20121: LD_OWVAR 2
20125: NONEQUAL
20126: AND
20127: OR
20128: IFFALSE 20142
// ComMoveToArea ( un , BuildUpEscape ) ;
20130: LD_VAR 0 2
20134: PPUSH
20135: LD_INT 41
20137: PPUSH
20138: CALL_OW 113
20142: GO 20084
20144: POP
20145: POP
20146: GO 19998
20148: POP
20149: POP
// enable ;
20150: ENABLE
// end ;
20151: PPOPN 2
20153: END
// every 0 0$1 trigger def_builduptime do
20154: LD_EXP 15
20158: IFFALSE 20184
20160: GO 20162
20162: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
20163: LD_INT 8400
20165: PUSH
20166: LD_EXP 15
20170: PUSH
20171: LD_INT 2100
20173: MUL
20174: PLUS
20175: PPUSH
20176: CALL_OW 67
// EndBuildUp ;
20180: CALL 19797 0 0
// end ;
20184: END
