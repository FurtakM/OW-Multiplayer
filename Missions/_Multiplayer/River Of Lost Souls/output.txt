// export Neutral ; export def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_shared_vision , def_morale_flags , def_siberite_detection , def_second_oil , def_amount_of_apemen , def_find_people , def_lost_people , def_other_nation , def_vehicles_too ; export is_depot , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , battle_flags_id , chance_loose , chance_find , amount_of_apemen ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export buildings_def , start_def ; export commander ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if MultiPlayer then
  11: LD_OWVAR 4
  15: IFFALSE 69
// begin Your_Side = mp_player_side ;
  17: LD_ADDR_OWVAR 2
  21: PUSH
  22: LD_OWVAR 7
  26: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  27: LD_ADDR_EXP 29
  31: PUSH
  32: LD_OWVAR 17
  36: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  37: LD_ADDR_EXP 27
  41: PUSH
  42: LD_OWVAR 15
  46: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  47: LD_ADDR_EXP 30
  51: PUSH
  52: LD_OWVAR 16
  56: ST_TO_ADDR
// Teams = mp_teams ;
  57: LD_ADDR_EXP 28
  61: PUSH
  62: LD_OWVAR 12
  66: ST_TO_ADDR
// end else
  67: GO 223
// begin Your_Side = 4 ;
  69: LD_ADDR_OWVAR 2
  73: PUSH
  74: LD_INT 4
  76: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
  77: LD_ADDR_EXP 29
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 3
  87: PUSH
  88: LD_INT 0
  90: PUSH
  91: LD_INT 1
  93: PUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 2
  99: PUSH
 100: LD_INT 4
 102: PUSH
 103: LD_INT 0
 105: PUSH
 106: EMPTY
 107: LIST
 108: LIST
 109: LIST
 110: LIST
 111: LIST
 112: LIST
 113: LIST
 114: LIST
 115: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 116: LD_ADDR_EXP 27
 120: PUSH
 121: LD_INT 0
 123: PUSH
 124: LD_INT 1
 126: PUSH
 127: LD_INT 0
 129: PUSH
 130: LD_INT 2
 132: PUSH
 133: LD_INT 0
 135: PUSH
 136: LD_INT 1
 138: PUSH
 139: LD_INT 2
 141: PUSH
 142: LD_INT 0
 144: PUSH
 145: EMPTY
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 3 , 0 , 3 , 3 , 0 ] ;
 155: LD_ADDR_EXP 30
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 3
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 3
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 0
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 7 , 4 ] ] ;
 194: LD_ADDR_EXP 28
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 6
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 7
 211: PUSH
 212: LD_INT 4
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// end ; if MultiPlayer then
 223: LD_OWVAR 4
 227: IFFALSE 439
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 229: LD_ADDR_EXP 2
 233: PUSH
 234: LD_INT 0
 236: PPUSH
 237: CALL_OW 426
 241: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 242: LD_ADDR_EXP 3
 246: PUSH
 247: LD_INT 1
 249: PPUSH
 250: CALL_OW 426
 254: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 255: LD_ADDR_EXP 4
 259: PUSH
 260: LD_INT 2
 262: PPUSH
 263: CALL_OW 426
 267: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 268: LD_ADDR_EXP 5
 272: PUSH
 273: LD_INT 3
 275: PPUSH
 276: CALL_OW 426
 280: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 281: LD_ADDR_EXP 6
 285: PUSH
 286: LD_INT 4
 288: PPUSH
 289: CALL_OW 426
 293: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 294: LD_ADDR_EXP 7
 298: PUSH
 299: LD_INT 10
 301: PPUSH
 302: CALL_OW 426
 306: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 307: LD_ADDR_EXP 8
 311: PUSH
 312: LD_INT 11
 314: PPUSH
 315: CALL_OW 426
 319: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 320: LD_ADDR_EXP 9
 324: PUSH
 325: LD_INT 12
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 333: LD_ADDR_EXP 11
 337: PUSH
 338: LD_INT 13
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_find_people = GetMultiplayerSetting ( 14 ) ;
 346: LD_ADDR_EXP 12
 350: PUSH
 351: LD_INT 14
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_lost_people = GetMultiplayerSetting ( 15 ) ;
 359: LD_ADDR_EXP 13
 363: PUSH
 364: LD_INT 15
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_second_oil = GetMultiplayerSetting ( 16 ) ;
 372: LD_ADDR_EXP 10
 376: PUSH
 377: LD_INT 16
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_other_nation = GetMultiplayerSetting ( 17 ) ;
 385: LD_ADDR_EXP 14
 389: PUSH
 390: LD_INT 17
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_vehicles_too = GetMultiplayerSetting ( 18 ) ;
 398: LD_ADDR_EXP 15
 402: PUSH
 403: LD_INT 18
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_game_rules = GetMultiplayerSetting ( 21 ) ;
 411: LD_ADDR_EXP 38
 415: PUSH
 416: LD_INT 21
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 424: LD_ADDR_VAR 0 9
 428: PUSH
 429: LD_INT 22
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// end else
 437: GO 571
// begin randomize ;
 439: CALL_OW 10
// def_base_level = 3 ;
 443: LD_ADDR_EXP 2
 447: PUSH
 448: LD_INT 3
 450: ST_TO_ADDR
// def_amount_of_people = 1 ;
 451: LD_ADDR_EXP 3
 455: PUSH
 456: LD_INT 1
 458: ST_TO_ADDR
// def_initial_level = 1 ;
 459: LD_ADDR_EXP 4
 463: PUSH
 464: LD_INT 1
 466: ST_TO_ADDR
// def_starting_resources = 2 ;
 467: LD_ADDR_EXP 5
 471: PUSH
 472: LD_INT 2
 474: ST_TO_ADDR
// def_shipments_density = 1 ;
 475: LD_ADDR_EXP 6
 479: PUSH
 480: LD_INT 1
 482: ST_TO_ADDR
// def_shared_vision = 1 ;
 483: LD_ADDR_EXP 7
 487: PUSH
 488: LD_INT 1
 490: ST_TO_ADDR
// def_morale_flags = 1 ;
 491: LD_ADDR_EXP 8
 495: PUSH
 496: LD_INT 1
 498: ST_TO_ADDR
// def_siberite_detection = 1 ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 1
 506: ST_TO_ADDR
// def_amount_of_apemen = 1 ;
 507: LD_ADDR_EXP 11
 511: PUSH
 512: LD_INT 1
 514: ST_TO_ADDR
// def_find_people = 2 ;
 515: LD_ADDR_EXP 12
 519: PUSH
 520: LD_INT 2
 522: ST_TO_ADDR
// def_second_oil = 1 ;
 523: LD_ADDR_EXP 10
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// def_lost_people = 1 ;
 531: LD_ADDR_EXP 13
 535: PUSH
 536: LD_INT 1
 538: ST_TO_ADDR
// def_other_nation = 1 ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_INT 1
 546: ST_TO_ADDR
// def_vehicles_too = 0 ;
 547: LD_ADDR_EXP 15
 551: PUSH
 552: LD_INT 0
 554: ST_TO_ADDR
// def_game_rules = 0 ;
 555: LD_ADDR_EXP 38
 559: PUSH
 560: LD_INT 0
 562: ST_TO_ADDR
// tech_level = 4 ;
 563: LD_ADDR_VAR 0 9
 567: PUSH
 568: LD_INT 4
 570: ST_TO_ADDR
// end ; InitGameRules ;
 571: CALL 13254 0 0
// if def_game_rules = 0 then
 575: LD_EXP 38
 579: PUSH
 580: LD_INT 0
 582: EQUAL
 583: IFFALSE 610
// begin if isSGUI then
 585: LD_OWVAR 83
 589: IFFALSE 597
// setMpTechs ( ) else
 591: CALL 15871 0 0
 595: GO 610
// begin SetMpTechLevel ( tech_level + 1 ) ;
 597: LD_VAR 0 9
 601: PUSH
 602: LD_INT 1
 604: PLUS
 605: PPUSH
 606: CALL 16018 0 1
// end ; end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 610: LD_ADDR_EXP 16
 614: PUSH
 615: LD_INT 0
 617: PUSH
 618: LD_INT 1
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: LD_INT 1
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: PUSH
 633: LD_EXP 2
 637: PUSH
 638: LD_INT 1
 640: PLUS
 641: ARRAY
 642: ST_TO_ADDR
// initial_level = [ 1 , 2 , 3 , 5 , 7 ] [ def_initial_level + 1 ] ;
 643: LD_ADDR_EXP 18
 647: PUSH
 648: LD_INT 1
 650: PUSH
 651: LD_INT 2
 653: PUSH
 654: LD_INT 3
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 7
 662: PUSH
 663: EMPTY
 664: LIST
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_EXP 4
 674: PUSH
 675: LD_INT 1
 677: PLUS
 678: ARRAY
 679: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 680: LD_ADDR_EXP 20
 684: PUSH
 685: LD_INT 0
 687: PUSH
 688: LD_INT 0
 690: PUSH
 691: LD_INT 0
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 30
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 50
 715: PUSH
 716: LD_INT 20
 718: PUSH
 719: LD_INT 0
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PUSH
 727: LD_INT 80
 729: PUSH
 730: LD_INT 40
 732: PUSH
 733: LD_INT 20
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: LIST
 745: LIST
 746: PUSH
 747: LD_EXP 5
 751: PUSH
 752: LD_INT 1
 754: PLUS
 755: ARRAY
 756: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_EXP 3
 766: PUSH
 767: LD_INT 4
 769: PLUS
 770: ST_TO_ADDR
// shipments_density := 18 + ( def_shipments_density ) * 38 ;
 771: LD_ADDR_EXP 21
 775: PUSH
 776: LD_INT 18
 778: PUSH
 779: LD_EXP 6
 783: PUSH
 784: LD_INT 38
 786: MUL
 787: PLUS
 788: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
 789: LD_ADDR_EXP 26
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: LD_INT 6
 802: PUSH
 803: LD_INT 9
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: PUSH
 812: LD_EXP 11
 816: PUSH
 817: LD_INT 1
 819: PLUS
 820: ARRAY
 821: ST_TO_ADDR
// if def_find_people then
 822: LD_EXP 12
 826: IFFALSE 860
// chance_find = 20 * ( 100 - ( ( def_find_people - 1 ) * 10 ) / 100 ) else
 828: LD_ADDR_EXP 25
 832: PUSH
 833: LD_INT 20
 835: PUSH
 836: LD_INT 100
 838: PUSH
 839: LD_EXP 12
 843: PUSH
 844: LD_INT 1
 846: MINUS
 847: PUSH
 848: LD_INT 10
 850: MUL
 851: PUSH
 852: LD_INT 100
 854: DIVREAL
 855: MINUS
 856: MUL
 857: ST_TO_ADDR
 858: GO 868
// chance_find = 21 ;
 860: LD_ADDR_EXP 25
 864: PUSH
 865: LD_INT 21
 867: ST_TO_ADDR
// if def_lost_people then
 868: LD_EXP 13
 872: IFFALSE 906
// chance_loose = 500 * ( 100 - ( ( def_find_people - 1 ) * 12 ) / 100 ) else
 874: LD_ADDR_EXP 24
 878: PUSH
 879: LD_INT 500
 881: PUSH
 882: LD_INT 100
 884: PUSH
 885: LD_EXP 12
 889: PUSH
 890: LD_INT 1
 892: MINUS
 893: PUSH
 894: LD_INT 12
 896: MUL
 897: PUSH
 898: LD_INT 100
 900: DIVREAL
 901: MINUS
 902: MUL
 903: ST_TO_ADDR
 904: GO 914
// chance_loose = 0 ;
 906: LD_ADDR_EXP 24
 910: PUSH
 911: LD_INT 0
 913: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
 914: LD_ADDR_EXP 22
 918: PUSH
 919: LD_INT 1
 921: NEG
 922: PUSH
 923: LD_INT 350
 925: PUSH
 926: LD_INT 700
 928: PUSH
 929: LD_INT 1400
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_EXP 8
 946: PUSH
 947: LD_INT 1
 949: PLUS
 950: ARRAY
 951: ST_TO_ADDR
// battle_flags_id = [ ] ;
 952: LD_ADDR_EXP 23
 956: PUSH
 957: EMPTY
 958: ST_TO_ADDR
// end ;
 959: LD_VAR 0 1
 963: RET
// function prepare_map_coordinates ; begin
 964: LD_INT 0
 966: PPUSH
// start_def = [ [ 24 , 13 ] , [ 93 , 12 ] , [ 53 , 79 ] , [ 147 , 86 ] ] ;
 967: LD_ADDR_EXP 33
 971: PUSH
 972: LD_INT 24
 974: PUSH
 975: LD_INT 13
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 93
 984: PUSH
 985: LD_INT 12
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 53
 994: PUSH
 995: LD_INT 79
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 147
1004: PUSH
1005: LD_INT 86
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: ST_TO_ADDR
// case def_base_level of 0 :
1018: LD_EXP 2
1022: PUSH
1023: LD_INT 0
1025: DOUBLE
1026: EQUAL
1027: IFTRUE 1031
1029: GO 1053
1031: POP
// begin buildings_def = [ [ ] , [ ] , [ ] , [ ] ] ;
1032: LD_ADDR_EXP 32
1036: PUSH
1037: EMPTY
1038: PUSH
1039: EMPTY
1040: PUSH
1041: EMPTY
1042: PUSH
1043: EMPTY
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// end ; 1 :
1051: GO 2740
1053: LD_INT 1
1055: DOUBLE
1056: EQUAL
1057: IFTRUE 1061
1059: GO 1159
1061: POP
// begin buildings_def = [ [ [ b_depot , 16 , 5 , 3 ] ] , [ [ b_depot , 89 , 5 , 3 ] ] , [ [ b_depot , 56 , 91 , 0 ] ] , [ [ b_depot , 151 , 94 , 0 ] ] ] ;
1062: LD_ADDR_EXP 32
1066: PUSH
1067: LD_INT 0
1069: PUSH
1070: LD_INT 16
1072: PUSH
1073: LD_INT 5
1075: PUSH
1076: LD_INT 3
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: PUSH
1085: EMPTY
1086: LIST
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 89
1093: PUSH
1094: LD_INT 5
1096: PUSH
1097: LD_INT 3
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: EMPTY
1107: LIST
1108: PUSH
1109: LD_INT 0
1111: PUSH
1112: LD_INT 56
1114: PUSH
1115: LD_INT 91
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: EMPTY
1128: LIST
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 151
1135: PUSH
1136: LD_INT 94
1138: PUSH
1139: LD_INT 0
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: PUSH
1151: EMPTY
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: ST_TO_ADDR
// end ; 2 :
1157: GO 2740
1159: LD_INT 2
1161: DOUBLE
1162: EQUAL
1163: IFTRUE 1167
1165: GO 1797
1167: POP
// begin buildings_def = [ [ [ b_depot , 16 , 5 , 3 ] , [ b_oil_mine , 9 , 4 , 0 ] , [ b_lab , 16 , 14 , 0 ] , [ b_workshop , 26 , 7 , 3 ] , [ b_armoury , 41 , 16 , 5 ] , [ b_breastwork , 24 , 21 , 0 ] , [ b_breastwork , 41 , 25 , 5 ] , [ b_oil_power , 10 , 9 , 1 ] ] , [ [ b_depot , 89 , 5 , 3 ] , [ b_oil_mine , 97 , 3 , 4 ] , [ b_lab , 100 , 10 , 4 ] , [ b_workshop , 88 , 17 , 2 ] , [ b_armoury , 87 , 25 , 2 ] , [ b_breastwork , 96 , 25 , 0 ] , [ b_breastwork , 72 , 13 , 0 ] , [ b_oil_power , 94 , 4 , 1 ] ] , [ [ b_depot , 56 , 91 , 0 ] , [ b_oil_mine , 51 , 88 , 0 ] , [ b_lab , 61 , 84 , 4 ] , [ b_workshop , 46 , 80 , 0 ] , [ b_armoury , 52 , 72 , 3 ] , [ b_breastwork , 43 , 66 , 3 ] , [ b_breastwork , 61 , 75 , 3 ] , [ b_oil_power , 61 , 90 , 3 ] ] , [ [ b_depot , 151 , 94 , 0 ] , [ b_oil_mine , 160 , 87 , 3 ] , [ b_lab , 159 , 94 , 5 ] , [ b_workshop , 146 , 80 , 3 ] , [ b_armoury , 139 , 91 , 1 ] , [ b_breastwork , 148 , 73 , 3 ] , [ b_breastwork , 140 , 71 , 2 ] , [ b_oil_power , 146 , 97 , 3 ] ] ] ;
1168: LD_ADDR_EXP 32
1172: PUSH
1173: LD_INT 0
1175: PUSH
1176: LD_INT 16
1178: PUSH
1179: LD_INT 5
1181: PUSH
1182: LD_INT 3
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: PUSH
1191: LD_INT 29
1193: PUSH
1194: LD_INT 9
1196: PUSH
1197: LD_INT 4
1199: PUSH
1200: LD_INT 0
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: PUSH
1209: LD_INT 6
1211: PUSH
1212: LD_INT 16
1214: PUSH
1215: LD_INT 14
1217: PUSH
1218: LD_INT 0
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: LD_INT 26
1232: PUSH
1233: LD_INT 7
1235: PUSH
1236: LD_INT 3
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: PUSH
1245: LD_INT 4
1247: PUSH
1248: LD_INT 41
1250: PUSH
1251: LD_INT 16
1253: PUSH
1254: LD_INT 5
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 31
1265: PUSH
1266: LD_INT 24
1268: PUSH
1269: LD_INT 21
1271: PUSH
1272: LD_INT 0
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 31
1283: PUSH
1284: LD_INT 41
1286: PUSH
1287: LD_INT 25
1289: PUSH
1290: LD_INT 5
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: PUSH
1299: LD_INT 26
1301: PUSH
1302: LD_INT 10
1304: PUSH
1305: LD_INT 9
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 0
1329: PUSH
1330: LD_INT 89
1332: PUSH
1333: LD_INT 5
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: PUSH
1345: LD_INT 29
1347: PUSH
1348: LD_INT 97
1350: PUSH
1351: LD_INT 3
1353: PUSH
1354: LD_INT 4
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 6
1365: PUSH
1366: LD_INT 100
1368: PUSH
1369: LD_INT 10
1371: PUSH
1372: LD_INT 4
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: PUSH
1381: LD_INT 2
1383: PUSH
1384: LD_INT 88
1386: PUSH
1387: LD_INT 17
1389: PUSH
1390: LD_INT 2
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 4
1401: PUSH
1402: LD_INT 87
1404: PUSH
1405: LD_INT 25
1407: PUSH
1408: LD_INT 2
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 31
1419: PUSH
1420: LD_INT 96
1422: PUSH
1423: LD_INT 25
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: PUSH
1435: LD_INT 31
1437: PUSH
1438: LD_INT 72
1440: PUSH
1441: LD_INT 13
1443: PUSH
1444: LD_INT 0
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: PUSH
1453: LD_INT 26
1455: PUSH
1456: LD_INT 94
1458: PUSH
1459: LD_INT 4
1461: PUSH
1462: LD_INT 1
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PUSH
1481: LD_INT 0
1483: PUSH
1484: LD_INT 56
1486: PUSH
1487: LD_INT 91
1489: PUSH
1490: LD_INT 0
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 29
1501: PUSH
1502: LD_INT 51
1504: PUSH
1505: LD_INT 88
1507: PUSH
1508: LD_INT 0
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PUSH
1517: LD_INT 6
1519: PUSH
1520: LD_INT 61
1522: PUSH
1523: LD_INT 84
1525: PUSH
1526: LD_INT 4
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 46
1540: PUSH
1541: LD_INT 80
1543: PUSH
1544: LD_INT 0
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 4
1555: PUSH
1556: LD_INT 52
1558: PUSH
1559: LD_INT 72
1561: PUSH
1562: LD_INT 3
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: PUSH
1571: LD_INT 31
1573: PUSH
1574: LD_INT 43
1576: PUSH
1577: LD_INT 66
1579: PUSH
1580: LD_INT 3
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 31
1591: PUSH
1592: LD_INT 61
1594: PUSH
1595: LD_INT 75
1597: PUSH
1598: LD_INT 3
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 26
1609: PUSH
1610: LD_INT 61
1612: PUSH
1613: LD_INT 90
1615: PUSH
1616: LD_INT 3
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: LD_INT 151
1640: PUSH
1641: LD_INT 94
1643: PUSH
1644: LD_INT 0
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: PUSH
1653: LD_INT 29
1655: PUSH
1656: LD_INT 160
1658: PUSH
1659: LD_INT 87
1661: PUSH
1662: LD_INT 3
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 6
1673: PUSH
1674: LD_INT 159
1676: PUSH
1677: LD_INT 94
1679: PUSH
1680: LD_INT 5
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: LD_INT 146
1694: PUSH
1695: LD_INT 80
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 4
1709: PUSH
1710: LD_INT 139
1712: PUSH
1713: LD_INT 91
1715: PUSH
1716: LD_INT 1
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_INT 31
1727: PUSH
1728: LD_INT 148
1730: PUSH
1731: LD_INT 73
1733: PUSH
1734: LD_INT 3
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 31
1745: PUSH
1746: LD_INT 140
1748: PUSH
1749: LD_INT 71
1751: PUSH
1752: LD_INT 2
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 26
1763: PUSH
1764: LD_INT 146
1766: PUSH
1767: LD_INT 97
1769: PUSH
1770: LD_INT 3
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: ST_TO_ADDR
// end ; 3 :
1795: GO 2740
1797: LD_INT 3
1799: DOUBLE
1800: EQUAL
1801: IFTRUE 1805
1803: GO 2739
1805: POP
// begin buildings_def = [ [ [ b_warehouse , 16 , 5 , 3 ] , [ b_oil_mine , 9 , 4 , 4 ] , [ b_lab , 16 , 14 , 0 ] , [ b_factory , 26 , 7 , 3 ] , [ b_barracks , 41 , 16 , 5 ] , [ b_bunker , 24 , 21 , 0 ] , [ b_bunker , 40 , 24 , 5 ] , [ b_ext_gun , 26 , 3 , 3 ] , [ b_ext_track , 23 , 4 , 2 ] , [ b_oil_power , 10 , 9 , 1 ] , [ b_siberite_power , 32 , 3 , 1 ] , [ b_siberite_mine , 37 , 24 , 5 ] ] , [ [ b_warehouse , 89 , 5 , 3 ] , [ b_oil_mine , 97 , 3 , 4 ] , [ b_lab , 100 , 10 , 4 ] , [ b_factory , 88 , 17 , 2 ] , [ b_barracks , 87 , 25 , 2 ] , [ b_bunker , 100 , 31 , 5 ] , [ b_bunker , 72 , 13 , 0 ] , [ b_ext_gun , 84 , 13 , 2 ] , [ b_ext_track , 88 , 14 , 3 ] , [ b_oil_power , 94 , 4 , 1 ] , [ b_siberite_power , 66 , 3 , 1 ] , [ b_siberite_mine , 71 , 4 , 2 ] ] , [ [ b_warehouse , 56 , 91 , 0 ] , [ b_oil_mine , 51 , 88 , 0 ] , [ b_lab , 61 , 84 , 4 ] , [ b_factory , 46 , 80 , 0 ] , [ b_barracks , 50 , 64 , 3 ] , [ b_bunker , 42 , 57 , 1 ] , [ b_bunker , 60 , 72 , 3 ] , [ b_ext_gun , 46 , 84 , 0 ] , [ b_ext_track , 43 , 80 , 1 ] , [ b_oil_power , 61 , 90 , 3 ] , [ b_siberite_power , 38 , 72 , 3 ] , [ b_siberite_mine , 35 , 59 , 1 ] ] , [ [ b_warehouse , 151 , 94 , 0 ] , [ b_oil_mine , 160 , 87 , 3 ] , [ b_lab , 159 , 94 , 5 ] , [ b_factory , 146 , 80 , 3 ] , [ b_barracks , 129 , 89 , 1 ] , [ b_bunker , 133 , 63 , 3 ] , [ b_bunker , 141 , 62 , 3 ] , [ b_ext_gun , 143 , 77 , 2 ] , [ b_ext_track , 142 , 80 , 1 ] , [ b_oil_power , 146 , 97 , 3 ] , [ b_siberite_power , 155 , 80 , 3 ] , [ b_siberite_mine , 135 , 83 , 4 ] ] ] ;
1806: LD_ADDR_EXP 32
1810: PUSH
1811: LD_INT 1
1813: PUSH
1814: LD_INT 16
1816: PUSH
1817: LD_INT 5
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 29
1831: PUSH
1832: LD_INT 9
1834: PUSH
1835: LD_INT 4
1837: PUSH
1838: LD_INT 4
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: PUSH
1847: LD_INT 6
1849: PUSH
1850: LD_INT 16
1852: PUSH
1853: LD_INT 14
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 3
1867: PUSH
1868: LD_INT 26
1870: PUSH
1871: LD_INT 7
1873: PUSH
1874: LD_INT 3
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: LD_INT 41
1888: PUSH
1889: LD_INT 16
1891: PUSH
1892: LD_INT 5
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: LD_INT 32
1903: PUSH
1904: LD_INT 24
1906: PUSH
1907: LD_INT 21
1909: PUSH
1910: LD_INT 0
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 32
1921: PUSH
1922: LD_INT 40
1924: PUSH
1925: LD_INT 24
1927: PUSH
1928: LD_INT 5
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 17
1939: PUSH
1940: LD_INT 26
1942: PUSH
1943: LD_INT 3
1945: PUSH
1946: LD_INT 3
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 16
1957: PUSH
1958: LD_INT 23
1960: PUSH
1961: LD_INT 4
1963: PUSH
1964: LD_INT 2
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 26
1975: PUSH
1976: LD_INT 10
1978: PUSH
1979: LD_INT 9
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PUSH
1991: LD_INT 28
1993: PUSH
1994: LD_INT 32
1996: PUSH
1997: LD_INT 3
1999: PUSH
2000: LD_INT 1
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 30
2011: PUSH
2012: LD_INT 37
2014: PUSH
2015: LD_INT 24
2017: PUSH
2018: LD_INT 5
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 1
2043: PUSH
2044: LD_INT 89
2046: PUSH
2047: LD_INT 5
2049: PUSH
2050: LD_INT 3
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 29
2061: PUSH
2062: LD_INT 97
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: LD_INT 4
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 6
2079: PUSH
2080: LD_INT 100
2082: PUSH
2083: LD_INT 10
2085: PUSH
2086: LD_INT 4
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 3
2097: PUSH
2098: LD_INT 88
2100: PUSH
2101: LD_INT 17
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 5
2115: PUSH
2116: LD_INT 87
2118: PUSH
2119: LD_INT 25
2121: PUSH
2122: LD_INT 2
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 32
2133: PUSH
2134: LD_INT 100
2136: PUSH
2137: LD_INT 31
2139: PUSH
2140: LD_INT 5
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 32
2151: PUSH
2152: LD_INT 72
2154: PUSH
2155: LD_INT 13
2157: PUSH
2158: LD_INT 0
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 17
2169: PUSH
2170: LD_INT 84
2172: PUSH
2173: LD_INT 13
2175: PUSH
2176: LD_INT 2
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 16
2187: PUSH
2188: LD_INT 88
2190: PUSH
2191: LD_INT 14
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 26
2205: PUSH
2206: LD_INT 94
2208: PUSH
2209: LD_INT 4
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PUSH
2221: LD_INT 28
2223: PUSH
2224: LD_INT 66
2226: PUSH
2227: LD_INT 3
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 30
2241: PUSH
2242: LD_INT 71
2244: PUSH
2245: LD_INT 4
2247: PUSH
2248: LD_INT 2
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: LD_INT 56
2276: PUSH
2277: LD_INT 91
2279: PUSH
2280: LD_INT 0
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: LD_INT 29
2291: PUSH
2292: LD_INT 51
2294: PUSH
2295: LD_INT 88
2297: PUSH
2298: LD_INT 0
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: PUSH
2307: LD_INT 6
2309: PUSH
2310: LD_INT 61
2312: PUSH
2313: LD_INT 84
2315: PUSH
2316: LD_INT 4
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 3
2327: PUSH
2328: LD_INT 46
2330: PUSH
2331: LD_INT 80
2333: PUSH
2334: LD_INT 0
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 5
2345: PUSH
2346: LD_INT 50
2348: PUSH
2349: LD_INT 64
2351: PUSH
2352: LD_INT 3
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 32
2363: PUSH
2364: LD_INT 42
2366: PUSH
2367: LD_INT 57
2369: PUSH
2370: LD_INT 1
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 32
2381: PUSH
2382: LD_INT 60
2384: PUSH
2385: LD_INT 72
2387: PUSH
2388: LD_INT 3
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 17
2399: PUSH
2400: LD_INT 46
2402: PUSH
2403: LD_INT 84
2405: PUSH
2406: LD_INT 0
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 16
2417: PUSH
2418: LD_INT 43
2420: PUSH
2421: LD_INT 80
2423: PUSH
2424: LD_INT 1
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 26
2435: PUSH
2436: LD_INT 61
2438: PUSH
2439: LD_INT 90
2441: PUSH
2442: LD_INT 3
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 28
2453: PUSH
2454: LD_INT 38
2456: PUSH
2457: LD_INT 72
2459: PUSH
2460: LD_INT 3
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 30
2471: PUSH
2472: LD_INT 35
2474: PUSH
2475: LD_INT 59
2477: PUSH
2478: LD_INT 1
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 1
2503: PUSH
2504: LD_INT 151
2506: PUSH
2507: LD_INT 94
2509: PUSH
2510: LD_INT 0
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 29
2521: PUSH
2522: LD_INT 160
2524: PUSH
2525: LD_INT 87
2527: PUSH
2528: LD_INT 3
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: PUSH
2537: LD_INT 6
2539: PUSH
2540: LD_INT 159
2542: PUSH
2543: LD_INT 94
2545: PUSH
2546: LD_INT 5
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: PUSH
2555: LD_INT 3
2557: PUSH
2558: LD_INT 146
2560: PUSH
2561: LD_INT 80
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: PUSH
2573: LD_INT 5
2575: PUSH
2576: LD_INT 129
2578: PUSH
2579: LD_INT 89
2581: PUSH
2582: LD_INT 1
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 32
2593: PUSH
2594: LD_INT 133
2596: PUSH
2597: LD_INT 63
2599: PUSH
2600: LD_INT 3
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: PUSH
2609: LD_INT 32
2611: PUSH
2612: LD_INT 141
2614: PUSH
2615: LD_INT 62
2617: PUSH
2618: LD_INT 3
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 17
2629: PUSH
2630: LD_INT 143
2632: PUSH
2633: LD_INT 77
2635: PUSH
2636: LD_INT 2
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: PUSH
2645: LD_INT 16
2647: PUSH
2648: LD_INT 142
2650: PUSH
2651: LD_INT 80
2653: PUSH
2654: LD_INT 1
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_INT 26
2665: PUSH
2666: LD_INT 146
2668: PUSH
2669: LD_INT 97
2671: PUSH
2672: LD_INT 3
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 28
2683: PUSH
2684: LD_INT 155
2686: PUSH
2687: LD_INT 80
2689: PUSH
2690: LD_INT 3
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 30
2701: PUSH
2702: LD_INT 135
2704: PUSH
2705: LD_INT 83
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: EMPTY
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: ST_TO_ADDR
// end ; end ;
2737: GO 2740
2739: POP
// end ;
2740: LD_VAR 0 1
2744: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2745: LD_INT 0
2747: PPUSH
2748: PPUSH
2749: PPUSH
// Team_Game := 0 ;
2750: LD_ADDR_EXP 31
2754: PUSH
2755: LD_INT 0
2757: ST_TO_ADDR
// for i = 1 to 8 do
2758: LD_ADDR_VAR 0 2
2762: PUSH
2763: DOUBLE
2764: LD_INT 1
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 8
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2798
// Team_Game := Team_Game + Side_Teams [ i ] ;
2774: LD_ADDR_EXP 31
2778: PUSH
2779: LD_EXP 31
2783: PUSH
2784: LD_EXP 27
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: PLUS
2795: ST_TO_ADDR
2796: GO 2771
2798: POP
2799: POP
// if not Team_Game then
2800: LD_EXP 31
2804: NOT
2805: IFFALSE 2817
// Team_Game := false else
2807: LD_ADDR_EXP 31
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
2815: GO 2825
// Team_Game := true ;
2817: LD_ADDR_EXP 31
2821: PUSH
2822: LD_INT 1
2824: ST_TO_ADDR
// if not Team_Game then
2825: LD_EXP 31
2829: NOT
2830: IFFALSE 2928
// begin for i = 1 to 8 do
2832: LD_ADDR_VAR 0 2
2836: PUSH
2837: DOUBLE
2838: LD_INT 1
2840: DEC
2841: ST_TO_ADDR
2842: LD_INT 8
2844: PUSH
2845: FOR_TO
2846: IFFALSE 2924
// for j = 1 to 8 do
2848: LD_ADDR_VAR 0 3
2852: PUSH
2853: DOUBLE
2854: LD_INT 1
2856: DEC
2857: ST_TO_ADDR
2858: LD_INT 8
2860: PUSH
2861: FOR_TO
2862: IFFALSE 2920
// if i <> j then
2864: LD_VAR 0 2
2868: PUSH
2869: LD_VAR 0 3
2873: NONEQUAL
2874: IFFALSE 2898
// SetAttitude ( i , j , att_neutral , true ) else
2876: LD_VAR 0 2
2880: PPUSH
2881: LD_VAR 0 3
2885: PPUSH
2886: LD_INT 0
2888: PPUSH
2889: LD_INT 1
2891: PPUSH
2892: CALL_OW 80
2896: GO 2918
// SetAttitude ( i , j , att_friend , true ) ;
2898: LD_VAR 0 2
2902: PPUSH
2903: LD_VAR 0 3
2907: PPUSH
2908: LD_INT 1
2910: PPUSH
2911: LD_INT 1
2913: PPUSH
2914: CALL_OW 80
2918: GO 2861
2920: POP
2921: POP
2922: GO 2845
2924: POP
2925: POP
// end else
2926: GO 3103
// begin if def_shared_vision then
2928: LD_EXP 7
2932: IFFALSE 2997
// begin for i in Teams do
2934: LD_ADDR_VAR 0 2
2938: PUSH
2939: LD_EXP 28
2943: PUSH
2944: FOR_IN
2945: IFFALSE 2995
// for j = 2 to i do
2947: LD_ADDR_VAR 0 3
2951: PUSH
2952: DOUBLE
2953: LD_INT 2
2955: DEC
2956: ST_TO_ADDR
2957: LD_VAR 0 2
2961: PUSH
2962: FOR_TO
2963: IFFALSE 2991
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2965: LD_VAR 0 2
2969: PUSH
2970: LD_VAR 0 3
2974: ARRAY
2975: PPUSH
2976: LD_VAR 0 2
2980: PUSH
2981: LD_INT 1
2983: ARRAY
2984: PPUSH
2985: CALL_OW 343
2989: GO 2962
2991: POP
2992: POP
2993: GO 2944
2995: POP
2996: POP
// end ; for i = 1 to 8 do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_INT 8
3009: PUSH
3010: FOR_TO
3011: IFFALSE 3101
// for j = 1 to 8 do
3013: LD_ADDR_VAR 0 3
3017: PUSH
3018: DOUBLE
3019: LD_INT 1
3021: DEC
3022: ST_TO_ADDR
3023: LD_INT 8
3025: PUSH
3026: FOR_TO
3027: IFFALSE 3097
// if Side_Teams [ i ] = Side_Teams [ j ] then
3029: LD_EXP 27
3033: PUSH
3034: LD_VAR 0 2
3038: ARRAY
3039: PUSH
3040: LD_EXP 27
3044: PUSH
3045: LD_VAR 0 3
3049: ARRAY
3050: EQUAL
3051: IFFALSE 3075
// SetAttitude ( i , j , att_friend , true ) else
3053: LD_VAR 0 2
3057: PPUSH
3058: LD_VAR 0 3
3062: PPUSH
3063: LD_INT 1
3065: PPUSH
3066: LD_INT 1
3068: PPUSH
3069: CALL_OW 80
3073: GO 3095
// SetAttitude ( i , j , att_enemy , true ) ;
3075: LD_VAR 0 2
3079: PPUSH
3080: LD_VAR 0 3
3084: PPUSH
3085: LD_INT 2
3087: PPUSH
3088: LD_INT 1
3090: PPUSH
3091: CALL_OW 80
3095: GO 3026
3097: POP
3098: POP
3099: GO 3010
3101: POP
3102: POP
// end ; end ;
3103: LD_VAR 0 1
3107: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
3108: LD_INT 0
3110: PPUSH
3111: PPUSH
3112: PPUSH
3113: PPUSH
// result := [ ] ;
3114: LD_ADDR_VAR 0 8
3118: PUSH
3119: EMPTY
3120: ST_TO_ADDR
// for i := 1 to count do
3121: LD_ADDR_VAR 0 9
3125: PUSH
3126: DOUBLE
3127: LD_INT 1
3129: DEC
3130: ST_TO_ADDR
3131: LD_VAR 0 2
3135: PUSH
3136: FOR_TO
3137: IFFALSE 3531
// begin uc_direction := Rand ( 0 , 5 ) ;
3139: LD_ADDR_OWVAR 24
3143: PUSH
3144: LD_INT 0
3146: PPUSH
3147: LD_INT 5
3149: PPUSH
3150: CALL_OW 12
3154: ST_TO_ADDR
// if commander then
3155: LD_FROM_VAR 0 7
3159: IFFALSE 3268
// begin hc_name := mp_sides_players_names [ side ] ;
3161: LD_ADDR_OWVAR 26
3165: PUSH
3166: LD_OWVAR 19
3170: PUSH
3171: LD_VAR 0 1
3175: ARRAY
3176: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
3177: LD_INT 1
3179: PPUSH
3180: LD_INT 2
3182: PPUSH
3183: CALL_OW 12
3187: PPUSH
3188: LD_VAR 0 3
3192: PPUSH
3193: LD_EXP 18
3197: PUSH
3198: LD_INT 2
3200: PLUS
3201: PPUSH
3202: CALL_OW 380
// hc_importance := 105 ;
3206: LD_ADDR_OWVAR 32
3210: PUSH
3211: LD_INT 105
3213: ST_TO_ADDR
// commander := false ;
3214: LD_VAR 0 7
3218: PUSH
3219: LD_INT 0
3221: ST_TO_ADDR
// if Multiplayer then
3222: LD_OWVAR 4
3226: IFFALSE 3266
// begin hc_gallery := MULTIAVATARS ;
3228: LD_ADDR_OWVAR 33
3232: PUSH
3233: LD_STRING MULTIAVATARS
3235: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
3236: LD_ADDR_OWVAR 34
3240: PUSH
3241: LD_VAR 0 1
3245: PPUSH
3246: CALL_OW 525
3250: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
3251: LD_ADDR_OWVAR 27
3255: PUSH
3256: LD_VAR 0 1
3260: PPUSH
3261: CALL_OW 526
3265: ST_TO_ADDR
// end ; end else
3266: GO 3331
// begin hc_name :=  ;
3268: LD_ADDR_OWVAR 26
3272: PUSH
3273: LD_STRING 
3275: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
3276: LD_INT 1
3278: PPUSH
3279: LD_INT 2
3281: PPUSH
3282: CALL_OW 12
3286: PPUSH
3287: LD_VAR 0 3
3291: PPUSH
3292: LD_EXP 18
3296: PPUSH
3297: CALL_OW 380
// hc_importance := 0 ;
3301: LD_ADDR_OWVAR 32
3305: PUSH
3306: LD_INT 0
3308: ST_TO_ADDR
// if Multiplayer then
3309: LD_OWVAR 4
3313: IFFALSE 3331
// begin hc_gallery :=  ;
3315: LD_ADDR_OWVAR 33
3319: PUSH
3320: LD_STRING 
3322: ST_TO_ADDR
// hc_face_number := 0 ;
3323: LD_ADDR_OWVAR 34
3327: PUSH
3328: LD_INT 0
3330: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3331: LD_ADDR_VAR 0 11
3335: PUSH
3336: CALL_OW 44
3340: ST_TO_ADDR
// if global_defined then
3341: LD_LOC 2
3345: IFFALSE 3483
// begin j := i ;
3347: LD_ADDR_VAR 0 10
3351: PUSH
3352: LD_VAR 0 9
3356: ST_TO_ADDR
// if cl = class_soldier then
3357: LD_VAR 0 3
3361: PUSH
3362: LD_INT 1
3364: EQUAL
3365: IFFALSE 3383
// j := i + soldiers_created ;
3367: LD_ADDR_VAR 0 10
3371: PUSH
3372: LD_VAR 0 9
3376: PUSH
3377: LD_LOC 3
3381: PLUS
3382: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3383: LD_LOC 1
3387: PUSH
3388: LD_VAR 0 3
3392: ARRAY
3393: PUSH
3394: LD_VAR 0 10
3398: ARRAY
3399: PPUSH
3400: LD_VAR 0 11
3404: PPUSH
3405: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3409: LD_VAR 0 11
3413: PPUSH
3414: LD_INT 2
3416: PPUSH
3417: LD_LOC 1
3421: PUSH
3422: LD_VAR 0 3
3426: ARRAY
3427: PUSH
3428: LD_VAR 0 10
3432: ARRAY
3433: PPUSH
3434: LD_INT 2
3436: PPUSH
3437: CALL_OW 260
3441: PPUSH
3442: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3446: LD_VAR 0 11
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_LOC 1
3458: PUSH
3459: LD_VAR 0 3
3463: ARRAY
3464: PUSH
3465: LD_VAR 0 10
3469: ARRAY
3470: PPUSH
3471: LD_INT 1
3473: PPUSH
3474: CALL_OW 260
3478: PPUSH
3479: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
3483: LD_VAR 0 11
3487: PPUSH
3488: LD_VAR 0 4
3492: PPUSH
3493: LD_VAR 0 5
3497: PPUSH
3498: LD_VAR 0 6
3502: PPUSH
3503: LD_INT 0
3505: PPUSH
3506: CALL_OW 50
// result := result ^ [ un ] ;
3510: LD_ADDR_VAR 0 8
3514: PUSH
3515: LD_VAR 0 8
3519: PUSH
3520: LD_VAR 0 11
3524: PUSH
3525: EMPTY
3526: LIST
3527: ADD
3528: ST_TO_ADDR
// end ;
3529: GO 3136
3531: POP
3532: POP
// if not global_defined then
3533: LD_LOC 2
3537: NOT
3538: IFFALSE 3600
// if cl = class_soldier and global_units then
3540: LD_VAR 0 3
3544: PUSH
3545: LD_INT 1
3547: EQUAL
3548: PUSH
3549: LD_LOC 1
3553: AND
3554: IFFALSE 3581
// global_units := [ global_units [ 1 ] ^ result ] else
3556: LD_ADDR_LOC 1
3560: PUSH
3561: LD_LOC 1
3565: PUSH
3566: LD_INT 1
3568: ARRAY
3569: PUSH
3570: LD_VAR 0 8
3574: ADD
3575: PUSH
3576: EMPTY
3577: LIST
3578: ST_TO_ADDR
3579: GO 3600
// global_units := global_units ^ [ result ] end ;
3581: LD_ADDR_LOC 1
3585: PUSH
3586: LD_LOC 1
3590: PUSH
3591: LD_VAR 0 8
3595: PUSH
3596: EMPTY
3597: LIST
3598: ADD
3599: ST_TO_ADDR
3600: LD_VAR 0 8
3604: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3605: LD_INT 0
3607: PPUSH
3608: PPUSH
3609: PPUSH
3610: PPUSH
3611: PPUSH
3612: PPUSH
3613: PPUSH
3614: PPUSH
3615: PPUSH
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
// pos := Side_Positions [ side ] ;
3620: LD_ADDR_VAR 0 3
3624: PUSH
3625: LD_EXP 29
3629: PUSH
3630: LD_VAR 0 1
3634: ARRAY
3635: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3636: LD_ADDR_OWVAR 21
3640: PUSH
3641: LD_EXP 30
3645: PUSH
3646: LD_VAR 0 1
3650: ARRAY
3651: ST_TO_ADDR
// uc_side := side ;
3652: LD_ADDR_OWVAR 20
3656: PUSH
3657: LD_VAR 0 1
3661: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
3662: LD_ADDR_OWVAR 44
3666: PUSH
3667: LD_INT 9
3669: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3670: LD_ADDR_OWVAR 45
3674: PUSH
3675: LD_INT 9
3677: ST_TO_ADDR
// for i in buildings_def [ pos ] do
3678: LD_ADDR_VAR 0 6
3682: PUSH
3683: LD_EXP 32
3687: PUSH
3688: LD_VAR 0 3
3692: ARRAY
3693: PUSH
3694: FOR_IN
3695: IFFALSE 3792
// begin bc_type = i [ 1 ] ;
3697: LD_ADDR_OWVAR 42
3701: PUSH
3702: LD_VAR 0 6
3706: PUSH
3707: LD_INT 1
3709: ARRAY
3710: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3711: LD_VAR 0 6
3715: PUSH
3716: LD_INT 2
3718: ARRAY
3719: PPUSH
3720: LD_VAR 0 6
3724: PUSH
3725: LD_INT 3
3727: ARRAY
3728: PPUSH
3729: LD_VAR 0 6
3733: PUSH
3734: LD_INT 4
3736: ARRAY
3737: PPUSH
3738: CALL_OW 47
// x := buildings_def [ pos ] [ 1 ] [ 2 ] ;
3742: LD_ADDR_VAR 0 4
3746: PUSH
3747: LD_EXP 32
3751: PUSH
3752: LD_VAR 0 3
3756: ARRAY
3757: PUSH
3758: LD_INT 1
3760: ARRAY
3761: PUSH
3762: LD_INT 2
3764: ARRAY
3765: ST_TO_ADDR
// y := buildings_def [ pos ] [ 1 ] [ 2 ] ;
3766: LD_ADDR_VAR 0 5
3770: PUSH
3771: LD_EXP 32
3775: PUSH
3776: LD_VAR 0 3
3780: ARRAY
3781: PUSH
3782: LD_INT 1
3784: ARRAY
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: ST_TO_ADDR
// end ;
3790: GO 3694
3792: POP
3793: POP
// if is_depot then
3794: LD_EXP 16
3798: IFFALSE 3948
// begin dep = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3800: LD_ADDR_VAR 0 10
3804: PUSH
3805: LD_INT 22
3807: PUSH
3808: LD_VAR 0 1
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: PUSH
3817: LD_INT 2
3819: PUSH
3820: LD_INT 30
3822: PUSH
3823: LD_INT 0
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 30
3832: PUSH
3833: LD_INT 1
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PPUSH
3849: CALL_OW 69
3853: ST_TO_ADDR
// dep = dep [ 1 ] ;
3854: LD_ADDR_VAR 0 10
3858: PUSH
3859: LD_VAR 0 10
3863: PUSH
3864: LD_INT 1
3866: ARRAY
3867: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3868: LD_VAR 0 10
3872: PPUSH
3873: CALL_OW 274
3877: PPUSH
3878: LD_INT 1
3880: PPUSH
3881: LD_EXP 20
3885: PUSH
3886: LD_INT 1
3888: ARRAY
3889: PPUSH
3890: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3894: LD_VAR 0 10
3898: PPUSH
3899: CALL_OW 274
3903: PPUSH
3904: LD_INT 2
3906: PPUSH
3907: LD_EXP 20
3911: PUSH
3912: LD_INT 2
3914: ARRAY
3915: PPUSH
3916: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3920: LD_VAR 0 10
3924: PPUSH
3925: CALL_OW 274
3929: PPUSH
3930: LD_INT 3
3932: PPUSH
3933: LD_EXP 20
3937: PUSH
3938: LD_INT 3
3940: ARRAY
3941: PPUSH
3942: CALL_OW 277
// end else
3946: GO 4092
// begin for i := 1 to 3 do
3948: LD_ADDR_VAR 0 6
3952: PUSH
3953: DOUBLE
3954: LD_INT 1
3956: DEC
3957: ST_TO_ADDR
3958: LD_INT 3
3960: PUSH
3961: FOR_TO
3962: IFFALSE 4090
// begin r := starting_resources [ i ] ;
3964: LD_ADDR_VAR 0 7
3968: PUSH
3969: LD_EXP 20
3973: PUSH
3974: LD_VAR 0 6
3978: ARRAY
3979: ST_TO_ADDR
// while r >= 10 do
3980: LD_VAR 0 7
3984: PUSH
3985: LD_INT 10
3987: GREATEREQUAL
3988: IFFALSE 4088
// if r > 50 then
3990: LD_VAR 0 7
3994: PUSH
3995: LD_INT 50
3997: GREATER
3998: IFFALSE 4044
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4000: LD_VAR 0 6
4004: PPUSH
4005: LD_INT 5
4007: PPUSH
4008: LD_VAR 0 4
4012: PPUSH
4013: LD_VAR 0 5
4017: PPUSH
4018: LD_INT 4
4020: PPUSH
4021: LD_INT 0
4023: PPUSH
4024: CALL_OW 60
// r := r - 50 ;
4028: LD_ADDR_VAR 0 7
4032: PUSH
4033: LD_VAR 0 7
4037: PUSH
4038: LD_INT 50
4040: MINUS
4041: ST_TO_ADDR
// end else
4042: GO 4086
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4044: LD_VAR 0 6
4048: PPUSH
4049: LD_VAR 0 7
4053: PUSH
4054: LD_INT 10
4056: DIV
4057: PPUSH
4058: LD_VAR 0 4
4062: PPUSH
4063: LD_VAR 0 5
4067: PPUSH
4068: LD_INT 4
4070: PPUSH
4071: LD_INT 0
4073: PPUSH
4074: CALL_OW 60
// r := 0 ;
4078: LD_ADDR_VAR 0 7
4082: PUSH
4083: LD_INT 0
4085: ST_TO_ADDR
// end ;
4086: GO 3980
// end ;
4088: GO 3961
4090: POP
4091: POP
// end ; x := start_def [ pos ] [ 1 ] ;
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_EXP 33
4101: PUSH
4102: LD_VAR 0 3
4106: ARRAY
4107: PUSH
4108: LD_INT 1
4110: ARRAY
4111: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4112: LD_ADDR_VAR 0 5
4116: PUSH
4117: LD_EXP 33
4121: PUSH
4122: LD_VAR 0 3
4126: ARRAY
4127: PUSH
4128: LD_INT 2
4130: ARRAY
4131: ST_TO_ADDR
// if def_morale_flags then
4132: LD_EXP 8
4136: IFFALSE 4215
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4138: LD_ADDR_EXP 23
4142: PUSH
4143: LD_EXP 23
4147: PUSH
4148: LD_VAR 0 1
4152: PPUSH
4153: LD_VAR 0 4
4157: PPUSH
4158: LD_VAR 0 5
4162: PPUSH
4163: LD_INT 1
4165: PUSH
4166: LD_INT 100
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: PUSH
4173: LD_INT 2
4175: PUSH
4176: LD_INT 50
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: LD_INT 3
4185: PUSH
4186: LD_INT 20
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PUSH
4193: LD_INT 20
4195: PUSH
4196: LD_INT 100
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PPUSH
4209: CALL_OW 418
4213: ADD
4214: ST_TO_ADDR
// neng := number_of_people ;
4215: LD_ADDR_VAR 0 11
4219: PUSH
4220: LD_EXP 17
4224: ST_TO_ADDR
// nsol := 2 ;
4225: LD_ADDR_VAR 0 14
4229: PUSH
4230: LD_INT 2
4232: ST_TO_ADDR
// if nsol < neng div 4 then
4233: LD_VAR 0 14
4237: PUSH
4238: LD_VAR 0 11
4242: PUSH
4243: LD_INT 4
4245: DIV
4246: LESS
4247: IFFALSE 4263
// nsol := neng div 4 ;
4249: LD_ADDR_VAR 0 14
4253: PUSH
4254: LD_VAR 0 11
4258: PUSH
4259: LD_INT 4
4261: DIV
4262: ST_TO_ADDR
// neng := neng - nsol ;
4263: LD_ADDR_VAR 0 11
4267: PUSH
4268: LD_VAR 0 11
4272: PUSH
4273: LD_VAR 0 14
4277: MINUS
4278: ST_TO_ADDR
// nsci := neng div 3 ;
4279: LD_ADDR_VAR 0 12
4283: PUSH
4284: LD_VAR 0 11
4288: PUSH
4289: LD_INT 3
4291: DIV
4292: ST_TO_ADDR
// if nsci < 1 then
4293: LD_VAR 0 12
4297: PUSH
4298: LD_INT 1
4300: LESS
4301: IFFALSE 4311
// nsci := 1 ;
4303: LD_ADDR_VAR 0 12
4307: PUSH
4308: LD_INT 1
4310: ST_TO_ADDR
// neng := neng - nsci ;
4311: LD_ADDR_VAR 0 11
4315: PUSH
4316: LD_VAR 0 11
4320: PUSH
4321: LD_VAR 0 12
4325: MINUS
4326: ST_TO_ADDR
// nmech := neng div 2 ;
4327: LD_ADDR_VAR 0 13
4331: PUSH
4332: LD_VAR 0 11
4336: PUSH
4337: LD_INT 2
4339: DIV
4340: ST_TO_ADDR
// neng := neng - nmech ;
4341: LD_ADDR_VAR 0 11
4345: PUSH
4346: LD_VAR 0 11
4350: PUSH
4351: LD_VAR 0 13
4355: MINUS
4356: ST_TO_ADDR
// if neng < 1 then
4357: LD_VAR 0 11
4361: PUSH
4362: LD_INT 1
4364: LESS
4365: IFFALSE 4375
// neng := 1 ;
4367: LD_ADDR_VAR 0 11
4371: PUSH
4372: LD_INT 1
4374: ST_TO_ADDR
// commander := true ;
4375: LD_ADDR_EXP 34
4379: PUSH
4380: LD_INT 1
4382: ST_TO_ADDR
// soldiers_created := 0 ;
4383: LD_ADDR_LOC 3
4387: PUSH
4388: LD_INT 0
4390: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4391: LD_ADDR_VAR 0 4
4395: PUSH
4396: LD_EXP 33
4400: PUSH
4401: LD_VAR 0 3
4405: ARRAY
4406: PUSH
4407: LD_INT 1
4409: ARRAY
4410: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4411: LD_ADDR_VAR 0 5
4415: PUSH
4416: LD_EXP 33
4420: PUSH
4421: LD_VAR 0 3
4425: ARRAY
4426: PUSH
4427: LD_INT 2
4429: ARRAY
4430: ST_TO_ADDR
// prepare_people ( side , nsol , class_soldier , x , y , 5 , commander ) ;
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 14
4440: PPUSH
4441: LD_INT 1
4443: PPUSH
4444: LD_VAR 0 4
4448: PPUSH
4449: LD_VAR 0 5
4453: PPUSH
4454: LD_INT 5
4456: PPUSH
4457: LD_ADDR_EXP 34
4461: PPUSH
4462: CALL 3108 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
4466: LD_VAR 0 1
4470: PPUSH
4471: LD_VAR 0 11
4475: PPUSH
4476: LD_INT 2
4478: PPUSH
4479: LD_VAR 0 4
4483: PPUSH
4484: LD_VAR 0 5
4488: PPUSH
4489: LD_INT 5
4491: PPUSH
4492: LD_ADDR_EXP 34
4496: PPUSH
4497: CALL 3108 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_VAR 0 13
4510: PPUSH
4511: LD_INT 3
4513: PPUSH
4514: LD_VAR 0 4
4518: PPUSH
4519: LD_VAR 0 5
4523: PPUSH
4524: LD_INT 5
4526: PPUSH
4527: LD_ADDR_EXP 34
4531: PPUSH
4532: CALL 3108 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
4536: LD_VAR 0 1
4540: PPUSH
4541: LD_VAR 0 12
4545: PPUSH
4546: LD_INT 4
4548: PPUSH
4549: LD_VAR 0 4
4553: PPUSH
4554: LD_VAR 0 5
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: LD_ADDR_EXP 34
4566: PPUSH
4567: CALL 3108 0 7
// if not global_defined then
4571: LD_LOC 2
4575: NOT
4576: IFFALSE 4586
// global_defined := true ;
4578: LD_ADDR_LOC 2
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4586: LD_EXP 9
4590: PUSH
4591: LD_INT 20
4593: PPUSH
4594: LD_VAR 0 1
4598: PPUSH
4599: CALL_OW 321
4603: PUSH
4604: LD_INT 1
4606: EQUAL
4607: AND
4608: IFFALSE 4625
// SetTech ( tech_SibDet , side , state_researched ) ;
4610: LD_INT 20
4612: PPUSH
4613: LD_VAR 0 1
4617: PPUSH
4618: LD_INT 2
4620: PPUSH
4621: CALL_OW 322
// end ;
4625: LD_VAR 0 2
4629: RET
// function prepare_sides ; var i ; begin
4630: LD_INT 0
4632: PPUSH
4633: PPUSH
// global_units := [ ] ;
4634: LD_ADDR_LOC 1
4638: PUSH
4639: EMPTY
4640: ST_TO_ADDR
// global_defined := false ;
4641: LD_ADDR_LOC 2
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// for i := 1 to 8 do
4649: LD_ADDR_VAR 0 2
4653: PUSH
4654: DOUBLE
4655: LD_INT 1
4657: DEC
4658: ST_TO_ADDR
4659: LD_INT 8
4661: PUSH
4662: FOR_TO
4663: IFFALSE 4940
// if Side_Positions [ i ] then
4665: LD_EXP 29
4669: PUSH
4670: LD_VAR 0 2
4674: ARRAY
4675: IFFALSE 4938
// begin if def_base_level > 1 then
4677: LD_EXP 2
4681: PUSH
4682: LD_INT 1
4684: GREATER
4685: IFFALSE 4803
// case Side_Positions [ i ] of 1 :
4687: LD_EXP 29
4691: PUSH
4692: LD_VAR 0 2
4696: ARRAY
4697: PUSH
4698: LD_INT 1
4700: DOUBLE
4701: EQUAL
4702: IFTRUE 4706
4704: GO 4724
4706: POP
// SetResourceVisibility ( 9 , 4 , i ) ; 2 :
4707: LD_INT 9
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: LD_VAR 0 2
4717: PPUSH
4718: CALL_OW 441
4722: GO 4803
4724: LD_INT 2
4726: DOUBLE
4727: EQUAL
4728: IFTRUE 4732
4730: GO 4750
4732: POP
// SetResourceVisibility ( 97 , 3 , i ) ; 3 :
4733: LD_INT 97
4735: PPUSH
4736: LD_INT 3
4738: PPUSH
4739: LD_VAR 0 2
4743: PPUSH
4744: CALL_OW 441
4748: GO 4803
4750: LD_INT 3
4752: DOUBLE
4753: EQUAL
4754: IFTRUE 4758
4756: GO 4776
4758: POP
// SetResourceVisibility ( 51 , 88 , i ) ; 4 :
4759: LD_INT 51
4761: PPUSH
4762: LD_INT 88
4764: PPUSH
4765: LD_VAR 0 2
4769: PPUSH
4770: CALL_OW 441
4774: GO 4803
4776: LD_INT 4
4778: DOUBLE
4779: EQUAL
4780: IFTRUE 4784
4782: GO 4802
4784: POP
// SetResourceVisibility ( 160 , 87 , i ) ; end ;
4785: LD_INT 160
4787: PPUSH
4788: LD_INT 87
4790: PPUSH
4791: LD_VAR 0 2
4795: PPUSH
4796: CALL_OW 441
4800: GO 4803
4802: POP
// if def_base_level > 2 then
4803: LD_EXP 2
4807: PUSH
4808: LD_INT 2
4810: GREATER
4811: IFFALSE 4929
// case Side_Positions [ i ] of 1 :
4813: LD_EXP 29
4817: PUSH
4818: LD_VAR 0 2
4822: ARRAY
4823: PUSH
4824: LD_INT 1
4826: DOUBLE
4827: EQUAL
4828: IFTRUE 4832
4830: GO 4850
4832: POP
// SetResourceVisibility ( 37 , 24 , i ) ; 2 :
4833: LD_INT 37
4835: PPUSH
4836: LD_INT 24
4838: PPUSH
4839: LD_VAR 0 2
4843: PPUSH
4844: CALL_OW 441
4848: GO 4929
4850: LD_INT 2
4852: DOUBLE
4853: EQUAL
4854: IFTRUE 4858
4856: GO 4876
4858: POP
// SetResourceVisibility ( 71 , 4 , i ) ; 3 :
4859: LD_INT 71
4861: PPUSH
4862: LD_INT 4
4864: PPUSH
4865: LD_VAR 0 2
4869: PPUSH
4870: CALL_OW 441
4874: GO 4929
4876: LD_INT 3
4878: DOUBLE
4879: EQUAL
4880: IFTRUE 4884
4882: GO 4902
4884: POP
// SetResourceVisibility ( 35 , 59 , i ) ; 4 :
4885: LD_INT 35
4887: PPUSH
4888: LD_INT 59
4890: PPUSH
4891: LD_VAR 0 2
4895: PPUSH
4896: CALL_OW 441
4900: GO 4929
4902: LD_INT 4
4904: DOUBLE
4905: EQUAL
4906: IFTRUE 4910
4908: GO 4928
4910: POP
// SetResourceVisibility ( 135 , 83 , i ) ; end ;
4911: LD_INT 135
4913: PPUSH
4914: LD_INT 83
4916: PPUSH
4917: LD_VAR 0 2
4921: PPUSH
4922: CALL_OW 441
4926: GO 4929
4928: POP
// prepare_side ( i ) ;
4929: LD_VAR 0 2
4933: PPUSH
4934: CALL 3605 0 1
// end ;
4938: GO 4662
4940: POP
4941: POP
// end ;
4942: LD_VAR 0 1
4946: RET
// function second_oil ; var i ; begin
4947: LD_INT 0
4949: PPUSH
4950: PPUSH
// if def_second_oil then
4951: LD_EXP 10
4955: IFFALSE 5079
// for i := 1 to 4 do
4957: LD_ADDR_VAR 0 2
4961: PUSH
4962: DOUBLE
4963: LD_INT 1
4965: DEC
4966: ST_TO_ADDR
4967: LD_INT 4
4969: PUSH
4970: FOR_TO
4971: IFFALSE 5077
// case i of 1 :
4973: LD_VAR 0 2
4977: PUSH
4978: LD_INT 1
4980: DOUBLE
4981: EQUAL
4982: IFTRUE 4986
4984: GO 5002
4986: POP
// CreateDepositXY ( 37 , 9 , mat_oil ) ; 2 :
4987: LD_INT 37
4989: PPUSH
4990: LD_INT 9
4992: PPUSH
4993: LD_INT 2
4995: PPUSH
4996: CALL_OW 62
5000: GO 5075
5002: LD_INT 2
5004: DOUBLE
5005: EQUAL
5006: IFTRUE 5010
5008: GO 5026
5010: POP
// CreateDepositXY ( 104 , 36 , mat_oil ) ; 3 :
5011: LD_INT 104
5013: PPUSH
5014: LD_INT 36
5016: PPUSH
5017: LD_INT 2
5019: PPUSH
5020: CALL_OW 62
5024: GO 5075
5026: LD_INT 3
5028: DOUBLE
5029: EQUAL
5030: IFTRUE 5034
5032: GO 5050
5034: POP
// CreateDepositXY ( 70 , 75 , mat_oil ) ; 4 :
5035: LD_INT 70
5037: PPUSH
5038: LD_INT 75
5040: PPUSH
5041: LD_INT 2
5043: PPUSH
5044: CALL_OW 62
5048: GO 5075
5050: LD_INT 4
5052: DOUBLE
5053: EQUAL
5054: IFTRUE 5058
5056: GO 5074
5058: POP
// CreateDepositXY ( 145 , 67 , mat_oil ) ; end ;
5059: LD_INT 145
5061: PPUSH
5062: LD_INT 67
5064: PPUSH
5065: LD_INT 2
5067: PPUSH
5068: CALL_OW 62
5072: GO 5075
5074: POP
5075: GO 4970
5077: POP
5078: POP
// end ;
5079: LD_VAR 0 1
5083: RET
// starting begin disable ( 98 ) ;
5084: LD_INT 98
5086: DISABLE_MARKED
// disable ( 99 ) ;
5087: LD_INT 99
5089: DISABLE_MARKED
// disable ( 400 ) ;
5090: LD_INT 400
5092: DISABLE_MARKED
// disable ( 401 ) ;
5093: LD_INT 401
5095: DISABLE_MARKED
// mp_selectmsg := true ;
5096: LD_ADDR_OWVAR 13
5100: PUSH
5101: LD_INT 1
5103: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5104: CALL 0 0 0
// prepare_map_coordinates ;
5108: CALL 964 0 0
// set_shared_visions_and_alliances ;
5112: CALL 2745 0 0
// prepare_sides ;
5116: CALL 4630 0 0
// Init_Win_Condition ;
5120: CALL 12369 0 0
// InitLimits ;
5124: CALL 13609 0 0
// ShowTimer ;
5128: CALL 14546 0 0
// AnimateTrees ( true ) ;
5132: LD_INT 1
5134: PPUSH
5135: CALL_OW 573
// second_oil ;
5139: CALL 4947 0 0
// init_shipments_and_respawning ;
5143: CALL 5198 0 0
// vygeneruj_lidi_na_ztraceni ;
5147: CALL 6077 0 0
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5151: LD_EXP 33
5155: PUSH
5156: LD_EXP 29
5160: PUSH
5161: LD_OWVAR 2
5165: ARRAY
5166: ARRAY
5167: PUSH
5168: LD_INT 1
5170: ARRAY
5171: PPUSH
5172: LD_EXP 33
5176: PUSH
5177: LD_EXP 29
5181: PUSH
5182: LD_OWVAR 2
5186: ARRAY
5187: ARRAY
5188: PUSH
5189: LD_INT 2
5191: ARRAY
5192: PPUSH
5193: CALL_OW 86
// end ; end_of_file
5197: END
// var shipment , inqueue ; export function init_shipments_and_respawning ; begin
5198: LD_INT 0
5200: PPUSH
// shipment := Rand ( 0 , 3 ) ;
5201: LD_ADDR_LOC 4
5205: PUSH
5206: LD_INT 0
5208: PPUSH
5209: LD_INT 3
5211: PPUSH
5212: CALL_OW 12
5216: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5217: LD_ADDR_LOC 5
5221: PUSH
5222: LD_INT 0
5224: PUSH
5225: LD_INT 0
5227: PUSH
5228: LD_INT 0
5230: PUSH
5231: LD_INT 0
5233: PUSH
5234: LD_INT 0
5236: PUSH
5237: LD_INT 0
5239: PUSH
5240: LD_INT 0
5242: PUSH
5243: LD_INT 0
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: ST_TO_ADDR
// end ;
5256: LD_VAR 0 1
5260: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5261: GO 5263
5263: DISABLE
5264: LD_INT 0
5266: PPUSH
// begin case tick of 1 .. 1 1$0 :
5267: LD_OWVAR 1
5271: PUSH
5272: LD_INT 1
5274: DOUBLE
5275: GREATEREQUAL
5276: IFFALSE 5284
5278: LD_INT 2100
5280: DOUBLE
5281: LESSEQUAL
5282: IFTRUE 5286
5284: GO 5297
5286: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5287: LD_ADDR_VAR 0 1
5291: PUSH
5292: LD_INT 150
5294: ST_TO_ADDR
5295: GO 5480
5297: LD_INT 2100
5299: PUSH
5300: LD_INT 1
5302: PLUS
5303: DOUBLE
5304: GREATEREQUAL
5305: IFFALSE 5313
5307: LD_INT 10500
5309: DOUBLE
5310: LESSEQUAL
5311: IFTRUE 5315
5313: GO 5326
5315: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5316: LD_ADDR_VAR 0 1
5320: PUSH
5321: LD_INT 100
5323: ST_TO_ADDR
5324: GO 5480
5326: LD_INT 10500
5328: PUSH
5329: LD_INT 1
5331: PLUS
5332: DOUBLE
5333: GREATEREQUAL
5334: IFFALSE 5342
5336: LD_INT 21000
5338: DOUBLE
5339: LESSEQUAL
5340: IFTRUE 5344
5342: GO 5355
5344: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5345: LD_ADDR_VAR 0 1
5349: PUSH
5350: LD_INT 90
5352: ST_TO_ADDR
5353: GO 5480
5355: LD_INT 21000
5357: PUSH
5358: LD_INT 1
5360: PLUS
5361: DOUBLE
5362: GREATEREQUAL
5363: IFFALSE 5371
5365: LD_INT 42000
5367: DOUBLE
5368: LESSEQUAL
5369: IFTRUE 5373
5371: GO 5384
5373: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5374: LD_ADDR_VAR 0 1
5378: PUSH
5379: LD_INT 70
5381: ST_TO_ADDR
5382: GO 5480
5384: LD_INT 42000
5386: PUSH
5387: LD_INT 1
5389: PLUS
5390: DOUBLE
5391: GREATEREQUAL
5392: IFFALSE 5400
5394: LD_INT 63000
5396: DOUBLE
5397: LESSEQUAL
5398: IFTRUE 5402
5400: GO 5413
5402: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5403: LD_ADDR_VAR 0 1
5407: PUSH
5408: LD_INT 60
5410: ST_TO_ADDR
5411: GO 5480
5413: LD_INT 63000
5415: PUSH
5416: LD_INT 1
5418: PLUS
5419: DOUBLE
5420: GREATEREQUAL
5421: IFFALSE 5429
5423: LD_INT 105000
5425: DOUBLE
5426: LESSEQUAL
5427: IFTRUE 5431
5429: GO 5442
5431: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5432: LD_ADDR_VAR 0 1
5436: PUSH
5437: LD_INT 35
5439: ST_TO_ADDR
5440: GO 5480
5442: LD_INT 105000
5444: PUSH
5445: LD_INT 1
5447: PLUS
5448: DOUBLE
5449: GREATEREQUAL
5450: IFFALSE 5458
5452: LD_INT 630000
5454: DOUBLE
5455: LESSEQUAL
5456: IFTRUE 5460
5458: GO 5471
5460: POP
// d := 20 ; else
5461: LD_ADDR_VAR 0 1
5465: PUSH
5466: LD_INT 20
5468: ST_TO_ADDR
5469: GO 5480
5471: POP
// d := 0 ; end ;
5472: LD_ADDR_VAR 0 1
5476: PUSH
5477: LD_INT 0
5479: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 10000
5485: PPUSH
5486: CALL_OW 12
5490: PUSH
5491: LD_VAR 0 1
5495: PUSH
5496: LD_EXP 21
5500: MUL
5501: LESSEQUAL
5502: IFFALSE 5564
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5504: LD_INT 1
5506: PPUSH
5507: LD_INT 140
5509: PPUSH
5510: CALL_OW 12
5514: PPUSH
5515: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5519: LD_ADDR_LOC 4
5523: PUSH
5524: LD_LOC 4
5528: PUSH
5529: LD_INT 1
5531: PLUS
5532: PUSH
5533: LD_INT 4
5535: MOD
5536: ST_TO_ADDR
// CreateCratesArea ( Rand ( 3 , 5 ) , q1 + shipment , true ) ;
5537: LD_INT 3
5539: PPUSH
5540: LD_INT 5
5542: PPUSH
5543: CALL_OW 12
5547: PPUSH
5548: LD_INT 1
5550: PUSH
5551: LD_LOC 4
5555: PLUS
5556: PPUSH
5557: LD_INT 1
5559: PPUSH
5560: CALL_OW 55
// end ; enable ;
5564: ENABLE
// end ; end_of_file
5565: PPOPN 1
5567: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5568: LD_VAR 0 1
5572: PPUSH
5573: CALL_OW 266
5577: PUSH
5578: LD_INT 0
5580: PUSH
5581: LD_INT 1
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: IN
5588: IFFALSE 5613
// SetBName ( b , @ & GetSide ( b ) ) ;
5590: LD_VAR 0 1
5594: PPUSH
5595: LD_STRING @
5597: PUSH
5598: LD_VAR 0 1
5602: PPUSH
5603: CALL_OW 255
5607: STR
5608: PPUSH
5609: CALL_OW 500
// if def_game_rules then
5613: LD_EXP 38
5617: IFFALSE 5654
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
5619: LD_VAR 0 1
5623: PPUSH
5624: LD_VAR 0 1
5628: PPUSH
5629: CALL_OW 266
5633: PPUSH
5634: LD_VAR 0 1
5638: PPUSH
5639: CALL_OW 255
5643: PPUSH
5644: LD_INT 0
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: CALL 14010 0 5
// end ;
5654: PPOPN 2
5656: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5657: LD_VAR 0 1
5661: PPUSH
5662: CALL_OW 266
5666: PUSH
5667: LD_INT 0
5669: PUSH
5670: LD_INT 1
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: IN
5677: IFFALSE 5702
// SetBName ( b , @ & GetSide ( b ) ) ;
5679: LD_VAR 0 1
5683: PPUSH
5684: LD_STRING @
5686: PUSH
5687: LD_VAR 0 1
5691: PPUSH
5692: CALL_OW 255
5696: STR
5697: PPUSH
5698: CALL_OW 500
// if def_game_rules then
5702: LD_EXP 38
5706: IFFALSE 5745
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
5708: LD_VAR 0 1
5712: PPUSH
5713: LD_VAR 0 1
5717: PPUSH
5718: CALL_OW 266
5722: PPUSH
5723: LD_VAR 0 1
5727: PPUSH
5728: CALL_OW 255
5732: PPUSH
5733: LD_VAR 0 2
5737: PPUSH
5738: LD_INT 1
5740: PPUSH
5741: CALL 14010 0 5
// end ;
5745: PPOPN 3
5747: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
5748: LD_INT 0
5750: PPUSH
5751: PPUSH
5752: PPUSH
5753: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
5754: LD_VAR 0 1
5758: PPUSH
5759: CALL_OW 255
5763: PUSH
5764: LD_INT 0
5766: EQUAL
5767: PUSH
5768: LD_VAR 0 1
5772: PPUSH
5773: CALL_OW 257
5777: PUSH
5778: LD_INT 12
5780: EQUAL
5781: AND
5782: IFFALSE 5788
// CheckApemenAmount ;
5784: CALL 14763 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
5788: LD_VAR 0 1
5792: PPUSH
5793: CALL_OW 266
5797: PUSH
5798: LD_INT 0
5800: PUSH
5801: LD_INT 1
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: IN
5808: IFFALSE 5890
// begin pos := Side_Positions [ GetSide ( j ) ] ;
5810: LD_ADDR_VAR 0 4
5814: PUSH
5815: LD_EXP 29
5819: PUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 255
5829: ARRAY
5830: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
5831: LD_ADDR_VAR 0 2
5835: PUSH
5836: LD_EXP 33
5840: PUSH
5841: LD_VAR 0 4
5845: ARRAY
5846: PUSH
5847: LD_INT 1
5849: ARRAY
5850: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
5851: LD_ADDR_VAR 0 3
5855: PUSH
5856: LD_EXP 33
5860: PUSH
5861: LD_VAR 0 4
5865: ARRAY
5866: PUSH
5867: LD_INT 2
5869: ARRAY
5870: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
5871: LD_VAR 0 2
5875: PPUSH
5876: LD_VAR 0 3
5880: PPUSH
5881: CALL_OW 420
5885: PPUSH
5886: CALL_OW 419
// end ; if def_game_rules then
5890: LD_EXP 38
5894: IFFALSE 5993
// if ( GetType ( j ) = 3 ) then
5896: LD_VAR 0 1
5900: PPUSH
5901: CALL_OW 247
5905: PUSH
5906: LD_INT 3
5908: EQUAL
5909: IFFALSE 5949
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
5911: LD_VAR 0 1
5915: PPUSH
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 266
5925: PPUSH
5926: LD_VAR 0 1
5930: PPUSH
5931: CALL_OW 255
5935: PPUSH
5936: LD_INT 0
5938: PPUSH
5939: LD_INT 1
5941: NEG
5942: PPUSH
5943: CALL 14010 0 5
5947: GO 5993
// if ( GetChassis ( j ) = 25 ) then
5949: LD_VAR 0 1
5953: PPUSH
5954: CALL_OW 265
5958: PUSH
5959: LD_INT 25
5961: EQUAL
5962: IFFALSE 5993
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
5964: LD_VAR 0 1
5968: PPUSH
5969: LD_INT 37
5971: PPUSH
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 255
5981: PPUSH
5982: LD_INT 0
5984: PPUSH
5985: LD_INT 1
5987: NEG
5988: PPUSH
5989: CALL 14010 0 5
// end ;
5993: PPOPN 5
5995: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
5996: LD_EXP 38
6000: PUSH
6001: LD_VAR 0 1
6005: PPUSH
6006: CALL_OW 265
6010: PUSH
6011: LD_INT 25
6013: EQUAL
6014: AND
6015: IFFALSE 6047
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6017: LD_VAR 0 1
6021: PPUSH
6022: LD_INT 37
6024: PPUSH
6025: LD_VAR 0 1
6029: PPUSH
6030: CALL_OW 255
6034: PPUSH
6035: LD_VAR 0 3
6039: PPUSH
6040: LD_INT 1
6042: PPUSH
6043: CALL 14010 0 5
// end ;
6047: PPOPN 4
6049: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6050: LD_VAR 0 1
6054: PPUSH
6055: LD_VAR 0 2
6059: PPUSH
6060: LD_VAR 0 3
6064: PPUSH
6065: LD_OWVAR 2
6069: PPUSH
6070: CALL 15632 0 4
6074: PPOPN 3
6076: END
// export ZMIZELI_LIDI ; export POINTY ; export function vygeneruj_lidi_na_ztraceni ; var i , j , k ; var pom , pom1 ; var barva ; begin
6077: LD_INT 0
6079: PPUSH
6080: PPUSH
6081: PPUSH
6082: PPUSH
6083: PPUSH
6084: PPUSH
6085: PPUSH
// ZMIZELI_LIDI = [ ] ;
6086: LD_ADDR_EXP 35
6090: PUSH
6091: EMPTY
6092: ST_TO_ADDR
// for j := 1 to 4 do
6093: LD_ADDR_VAR 0 3
6097: PUSH
6098: DOUBLE
6099: LD_INT 1
6101: DEC
6102: ST_TO_ADDR
6103: LD_INT 4
6105: PUSH
6106: FOR_TO
6107: IFFALSE 6270
// begin pom1 = [ ] ;
6109: LD_ADDR_VAR 0 6
6113: PUSH
6114: EMPTY
6115: ST_TO_ADDR
// for k := 1 to 8 do
6116: LD_ADDR_VAR 0 4
6120: PUSH
6121: DOUBLE
6122: LD_INT 1
6124: DEC
6125: ST_TO_ADDR
6126: LD_INT 8
6128: PUSH
6129: FOR_TO
6130: IFFALSE 6164
// if Side_Positions [ k ] = j then
6132: LD_EXP 29
6136: PUSH
6137: LD_VAR 0 4
6141: ARRAY
6142: PUSH
6143: LD_VAR 0 3
6147: EQUAL
6148: IFFALSE 6162
// begin barva = k ;
6150: LD_ADDR_VAR 0 7
6154: PUSH
6155: LD_VAR 0 4
6159: ST_TO_ADDR
// break ;
6160: GO 6164
// end ;
6162: GO 6129
6164: POP
6165: POP
// for i := 1 to 5 do
6166: LD_ADDR_VAR 0 2
6170: PUSH
6171: DOUBLE
6172: LD_INT 1
6174: DEC
6175: ST_TO_ADDR
6176: LD_INT 5
6178: PUSH
6179: FOR_TO
6180: IFFALSE 6247
// begin if Prob ( 10 ) and def_vehicles_too then
6182: LD_INT 10
6184: PPUSH
6185: CALL_OW 13
6189: PUSH
6190: LD_EXP 15
6194: AND
6195: IFFALSE 6214
// pom = vytvor_nove_auto ( barva ) else
6197: LD_ADDR_VAR 0 5
6201: PUSH
6202: LD_VAR 0 7
6206: PPUSH
6207: CALL 7017 0 1
6211: ST_TO_ADDR
6212: GO 6229
// pom = vytvor_noveho_cloveka ( barva ) ;
6214: LD_ADDR_VAR 0 5
6218: PUSH
6219: LD_VAR 0 7
6223: PPUSH
6224: CALL 6296 0 1
6228: ST_TO_ADDR
// pom1 = pom1 ^ pom ;
6229: LD_ADDR_VAR 0 6
6233: PUSH
6234: LD_VAR 0 6
6238: PUSH
6239: LD_VAR 0 5
6243: ADD
6244: ST_TO_ADDR
// end ;
6245: GO 6179
6247: POP
6248: POP
// ZMIZELI_LIDI = ZMIZELI_LIDI ^ [ pom1 ] ;
6249: LD_ADDR_EXP 35
6253: PUSH
6254: LD_EXP 35
6258: PUSH
6259: LD_VAR 0 6
6263: PUSH
6264: EMPTY
6265: LIST
6266: ADD
6267: ST_TO_ADDR
// end ;
6268: GO 6106
6270: POP
6271: POP
// POINTY = [ [ ] , [ ] , [ ] , [ ] ] ;
6272: LD_ADDR_EXP 36
6276: PUSH
6277: EMPTY
6278: PUSH
6279: EMPTY
6280: PUSH
6281: EMPTY
6282: PUSH
6283: EMPTY
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: ST_TO_ADDR
// end ;
6291: LD_VAR 0 1
6295: RET
// function vytvor_noveho_cloveka ( b ) ; var pom , pom1 ; var cla ; var i ; var sidy ; var poc ; var ah ; var pommm ; begin
6296: LD_INT 0
6298: PPUSH
6299: PPUSH
6300: PPUSH
6301: PPUSH
6302: PPUSH
6303: PPUSH
6304: PPUSH
6305: PPUSH
6306: PPUSH
// if def_other_nation then
6307: LD_EXP 14
6311: IFFALSE 6331
// pom = Rand ( 1 , 11 ) else
6313: LD_ADDR_VAR 0 3
6317: PUSH
6318: LD_INT 1
6320: PPUSH
6321: LD_INT 11
6323: PPUSH
6324: CALL_OW 12
6328: ST_TO_ADDR
6329: GO 6527
// begin pommm = Rand ( 1 , 8 ) ;
6331: LD_ADDR_VAR 0 10
6335: PUSH
6336: LD_INT 1
6338: PPUSH
6339: LD_INT 8
6341: PPUSH
6342: CALL_OW 12
6346: ST_TO_ADDR
// case Side_Nations [ b ] of nation_american :
6347: LD_EXP 30
6351: PUSH
6352: LD_VAR 0 1
6356: ARRAY
6357: PUSH
6358: LD_INT 1
6360: DOUBLE
6361: EQUAL
6362: IFTRUE 6366
6364: GO 6414
6366: POP
// pom = [ 1 , 2 , 5 , 6 , 7 , 8 , 9 , 5 ] [ pommm ] ; nation_arabian :
6367: LD_ADDR_VAR 0 3
6371: PUSH
6372: LD_INT 1
6374: PUSH
6375: LD_INT 2
6377: PUSH
6378: LD_INT 5
6380: PUSH
6381: LD_INT 6
6383: PUSH
6384: LD_INT 7
6386: PUSH
6387: LD_INT 8
6389: PUSH
6390: LD_INT 9
6392: PUSH
6393: LD_INT 5
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: PUSH
6406: LD_VAR 0 10
6410: ARRAY
6411: ST_TO_ADDR
6412: GO 6527
6414: LD_INT 2
6416: DOUBLE
6417: EQUAL
6418: IFTRUE 6422
6420: GO 6470
6422: POP
// pom = [ 1 , 3 , 4 , 5 , 6 , 7 , 8 , 10 ] [ pommm ] ; nation_russian :
6423: LD_ADDR_VAR 0 3
6427: PUSH
6428: LD_INT 1
6430: PUSH
6431: LD_INT 3
6433: PUSH
6434: LD_INT 4
6436: PUSH
6437: LD_INT 5
6439: PUSH
6440: LD_INT 6
6442: PUSH
6443: LD_INT 7
6445: PUSH
6446: LD_INT 8
6448: PUSH
6449: LD_INT 10
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: PUSH
6462: LD_VAR 0 10
6466: ARRAY
6467: ST_TO_ADDR
6468: GO 6527
6470: LD_INT 3
6472: DOUBLE
6473: EQUAL
6474: IFTRUE 6478
6476: GO 6526
6478: POP
// pom = [ 1 , 2 , 3 , 5 , 6 , 7 , 8 , 11 ] [ pommm ] ; end ;
6479: LD_ADDR_VAR 0 3
6483: PUSH
6484: LD_INT 1
6486: PUSH
6487: LD_INT 2
6489: PUSH
6490: LD_INT 3
6492: PUSH
6493: LD_INT 5
6495: PUSH
6496: LD_INT 6
6498: PUSH
6499: LD_INT 7
6501: PUSH
6502: LD_INT 8
6504: PUSH
6505: LD_INT 11
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: PUSH
6518: LD_VAR 0 10
6522: ARRAY
6523: ST_TO_ADDR
6524: GO 6527
6526: POP
// end ; case pom of 1 :
6527: LD_VAR 0 3
6531: PUSH
6532: LD_INT 1
6534: DOUBLE
6535: EQUAL
6536: IFTRUE 6540
6538: GO 6551
6540: POP
// cla = class_apeman ; 2 :
6541: LD_ADDR_VAR 0 5
6545: PUSH
6546: LD_INT 12
6548: ST_TO_ADDR
6549: GO 6742
6551: LD_INT 2
6553: DOUBLE
6554: EQUAL
6555: IFTRUE 6559
6557: GO 6570
6559: POP
// cla = class_apeman_engineer ; 3 :
6560: LD_ADDR_VAR 0 5
6564: PUSH
6565: LD_INT 16
6567: ST_TO_ADDR
6568: GO 6742
6570: LD_INT 3
6572: DOUBLE
6573: EQUAL
6574: IFTRUE 6578
6576: GO 6589
6578: POP
// cla = class_apeman_soldier ; 4 :
6579: LD_ADDR_VAR 0 5
6583: PUSH
6584: LD_INT 15
6586: ST_TO_ADDR
6587: GO 6742
6589: LD_INT 4
6591: DOUBLE
6592: EQUAL
6593: IFTRUE 6597
6595: GO 6608
6597: POP
// cla = class_apeman_kamikaze ; 5 :
6598: LD_ADDR_VAR 0 5
6602: PUSH
6603: LD_INT 17
6605: ST_TO_ADDR
6606: GO 6742
6608: LD_INT 5
6610: DOUBLE
6611: EQUAL
6612: IFTRUE 6616
6614: GO 6627
6616: POP
// cla = class_soldier ; 6 :
6617: LD_ADDR_VAR 0 5
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
6625: GO 6742
6627: LD_INT 6
6629: DOUBLE
6630: EQUAL
6631: IFTRUE 6635
6633: GO 6646
6635: POP
// cla = class_mechanic ; 7 :
6636: LD_ADDR_VAR 0 5
6640: PUSH
6641: LD_INT 3
6643: ST_TO_ADDR
6644: GO 6742
6646: LD_INT 7
6648: DOUBLE
6649: EQUAL
6650: IFTRUE 6654
6652: GO 6665
6654: POP
// cla = class_engineer ; 8 :
6655: LD_ADDR_VAR 0 5
6659: PUSH
6660: LD_INT 2
6662: ST_TO_ADDR
6663: GO 6742
6665: LD_INT 8
6667: DOUBLE
6668: EQUAL
6669: IFTRUE 6673
6671: GO 6684
6673: POP
// cla = class_scientistic ; 9 :
6674: LD_ADDR_VAR 0 5
6678: PUSH
6679: LD_INT 4
6681: ST_TO_ADDR
6682: GO 6742
6684: LD_INT 9
6686: DOUBLE
6687: EQUAL
6688: IFTRUE 6692
6690: GO 6703
6692: POP
// cla = class_sniper ; 10 :
6693: LD_ADDR_VAR 0 5
6697: PUSH
6698: LD_INT 5
6700: ST_TO_ADDR
6701: GO 6742
6703: LD_INT 10
6705: DOUBLE
6706: EQUAL
6707: IFTRUE 6711
6709: GO 6722
6711: POP
// cla = class_mortar ; 11 :
6712: LD_ADDR_VAR 0 5
6716: PUSH
6717: LD_INT 8
6719: ST_TO_ADDR
6720: GO 6742
6722: LD_INT 11
6724: DOUBLE
6725: EQUAL
6726: IFTRUE 6730
6728: GO 6741
6730: POP
// cla = class_bazooker ; end ;
6731: LD_ADDR_VAR 0 5
6735: PUSH
6736: LD_INT 9
6738: ST_TO_ADDR
6739: GO 6742
6741: POP
// uc_side = b ;
6742: LD_ADDR_OWVAR 20
6746: PUSH
6747: LD_VAR 0 1
6751: ST_TO_ADDR
// if pom <= 4 then
6752: LD_VAR 0 3
6756: PUSH
6757: LD_INT 4
6759: LESSEQUAL
6760: IFFALSE 6772
// uc_nation = nation_nature else
6762: LD_ADDR_OWVAR 21
6766: PUSH
6767: LD_INT 0
6769: ST_TO_ADDR
6770: GO 6875
// begin if def_other_nation then
6772: LD_EXP 14
6776: IFFALSE 6796
// pom1 = Rand ( 1 , 3 ) else
6778: LD_ADDR_VAR 0 4
6782: PUSH
6783: LD_INT 1
6785: PPUSH
6786: LD_INT 3
6788: PPUSH
6789: CALL_OW 12
6793: ST_TO_ADDR
6794: GO 6812
// pom1 = Side_Nations [ b ] ;
6796: LD_ADDR_VAR 0 4
6800: PUSH
6801: LD_EXP 30
6805: PUSH
6806: LD_VAR 0 1
6810: ARRAY
6811: ST_TO_ADDR
// case pom1 of 1 :
6812: LD_VAR 0 4
6816: PUSH
6817: LD_INT 1
6819: DOUBLE
6820: EQUAL
6821: IFTRUE 6825
6823: GO 6836
6825: POP
// uc_nation = nation_american ; 2 :
6826: LD_ADDR_OWVAR 21
6830: PUSH
6831: LD_INT 1
6833: ST_TO_ADDR
6834: GO 6875
6836: LD_INT 2
6838: DOUBLE
6839: EQUAL
6840: IFTRUE 6844
6842: GO 6855
6844: POP
// uc_nation = nation_arabian ; 3 :
6845: LD_ADDR_OWVAR 21
6849: PUSH
6850: LD_INT 2
6852: ST_TO_ADDR
6853: GO 6875
6855: LD_INT 3
6857: DOUBLE
6858: EQUAL
6859: IFTRUE 6863
6861: GO 6874
6863: POP
// uc_nation = nation_russian ; end ;
6864: LD_ADDR_OWVAR 21
6868: PUSH
6869: LD_INT 3
6871: ST_TO_ADDR
6872: GO 6875
6874: POP
// end ; ah = get_human ( get_sex , cla , Rand ( 1 , 5 ) ,  ) ;
6875: LD_ADDR_VAR 0 9
6879: PUSH
6880: CALL 6982 0 0
6884: PPUSH
6885: LD_VAR 0 5
6889: PPUSH
6890: LD_INT 1
6892: PPUSH
6893: LD_INT 5
6895: PPUSH
6896: CALL_OW 12
6900: PPUSH
6901: LD_STRING 
6903: PPUSH
6904: CALL 6924 0 4
6908: ST_TO_ADDR
// result := ah ;
6909: LD_ADDR_VAR 0 2
6913: PUSH
6914: LD_VAR 0 9
6918: ST_TO_ADDR
// end ;
6919: LD_VAR 0 2
6923: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
6924: LD_INT 0
6926: PPUSH
6927: PPUSH
// PrepareHuman ( sex , clas , level ) ;
6928: LD_VAR 0 1
6932: PPUSH
6933: LD_VAR 0 2
6937: PPUSH
6938: LD_VAR 0 3
6942: PPUSH
6943: CALL_OW 380
// hc_name := name ;
6947: LD_ADDR_OWVAR 26
6951: PUSH
6952: LD_VAR 0 4
6956: ST_TO_ADDR
// pom = CreateHuman ;
6957: LD_ADDR_VAR 0 6
6961: PUSH
6962: CALL_OW 44
6966: ST_TO_ADDR
// result := pom ;
6967: LD_ADDR_VAR 0 5
6971: PUSH
6972: LD_VAR 0 6
6976: ST_TO_ADDR
// end ;
6977: LD_VAR 0 5
6981: RET
// function get_sex ; begin
6982: LD_INT 0
6984: PPUSH
// if Prob ( 20 ) then
6985: LD_INT 20
6987: PPUSH
6988: CALL_OW 13
6992: IFFALSE 7004
// result = sex_female else
6994: LD_ADDR_VAR 0 1
6998: PUSH
6999: LD_INT 2
7001: ST_TO_ADDR
7002: GO 7012
// result = sex_male ;
7004: LD_ADDR_VAR 0 1
7008: PUSH
7009: LD_INT 1
7011: ST_TO_ADDR
// end ;
7012: LD_VAR 0 1
7016: RET
// function vytvor_nove_auto ( b ) ; var cat ; var a ; var pom ; var av ; begin
7017: LD_INT 0
7019: PPUSH
7020: PPUSH
7021: PPUSH
7022: PPUSH
7023: PPUSH
// uc_side = b ;
7024: LD_ADDR_OWVAR 20
7028: PUSH
7029: LD_VAR 0 1
7033: ST_TO_ADDR
// if def_other_nation then
7034: LD_EXP 14
7038: IFFALSE 7058
// cat = Rand ( 1 , 3 ) else
7040: LD_ADDR_VAR 0 3
7044: PUSH
7045: LD_INT 1
7047: PPUSH
7048: LD_INT 3
7050: PPUSH
7051: CALL_OW 12
7055: ST_TO_ADDR
7056: GO 7127
// case Side_Nations [ b ] of nation_american :
7058: LD_EXP 30
7062: PUSH
7063: LD_VAR 0 1
7067: ARRAY
7068: PUSH
7069: LD_INT 1
7071: DOUBLE
7072: EQUAL
7073: IFTRUE 7077
7075: GO 7088
7077: POP
// cat = 1 ; nation_arabian :
7078: LD_ADDR_VAR 0 3
7082: PUSH
7083: LD_INT 1
7085: ST_TO_ADDR
7086: GO 7127
7088: LD_INT 2
7090: DOUBLE
7091: EQUAL
7092: IFTRUE 7096
7094: GO 7107
7096: POP
// cat = 2 ; nation_russian :
7097: LD_ADDR_VAR 0 3
7101: PUSH
7102: LD_INT 2
7104: ST_TO_ADDR
7105: GO 7127
7107: LD_INT 3
7109: DOUBLE
7110: EQUAL
7111: IFTRUE 7115
7113: GO 7126
7115: POP
// cat = 3 ; end ;
7116: LD_ADDR_VAR 0 3
7120: PUSH
7121: LD_INT 3
7123: ST_TO_ADDR
7124: GO 7127
7126: POP
// case cat of 1 :
7127: LD_VAR 0 3
7131: PUSH
7132: LD_INT 1
7134: DOUBLE
7135: EQUAL
7136: IFTRUE 7140
7138: GO 7161
7140: POP
// begin uc_nation = nation_american ;
7141: LD_ADDR_OWVAR 21
7145: PUSH
7146: LD_INT 1
7148: ST_TO_ADDR
// pom = get_random_design_am ;
7149: LD_ADDR_VAR 0 5
7153: PUSH
7154: CALL 7301 0 0
7158: ST_TO_ADDR
// end ; 2 :
7159: GO 7220
7161: LD_INT 2
7163: DOUBLE
7164: EQUAL
7165: IFTRUE 7169
7167: GO 7190
7169: POP
// begin uc_nation = nation_arabian ;
7170: LD_ADDR_OWVAR 21
7174: PUSH
7175: LD_INT 2
7177: ST_TO_ADDR
// pom = get_random_design_ar ;
7178: LD_ADDR_VAR 0 5
7182: PUSH
7183: CALL 7967 0 0
7187: ST_TO_ADDR
// end ; 3 :
7188: GO 7220
7190: LD_INT 3
7192: DOUBLE
7193: EQUAL
7194: IFTRUE 7198
7196: GO 7219
7198: POP
// begin uc_nation = nation_russian ;
7199: LD_ADDR_OWVAR 21
7203: PUSH
7204: LD_INT 3
7206: ST_TO_ADDR
// pom = get_random_design_ru ;
7207: LD_ADDR_VAR 0 5
7211: PUSH
7212: CALL 8532 0 0
7216: ST_TO_ADDR
// end ; end ;
7217: GO 7220
7219: POP
// vc_chassis = pom [ 1 ] ;
7220: LD_ADDR_OWVAR 37
7224: PUSH
7225: LD_VAR 0 5
7229: PUSH
7230: LD_INT 1
7232: ARRAY
7233: ST_TO_ADDR
// vc_engine = pom [ 2 ] ;
7234: LD_ADDR_OWVAR 39
7238: PUSH
7239: LD_VAR 0 5
7243: PUSH
7244: LD_INT 2
7246: ARRAY
7247: ST_TO_ADDR
// vc_weapon = pom [ 3 ] ;
7248: LD_ADDR_OWVAR 40
7252: PUSH
7253: LD_VAR 0 5
7257: PUSH
7258: LD_INT 3
7260: ARRAY
7261: ST_TO_ADDR
// vc_control = pom [ 4 ] ;
7262: LD_ADDR_OWVAR 38
7266: PUSH
7267: LD_VAR 0 5
7271: PUSH
7272: LD_INT 4
7274: ARRAY
7275: ST_TO_ADDR
// av = CreateVehicle ;
7276: LD_ADDR_VAR 0 6
7280: PUSH
7281: CALL_OW 45
7285: ST_TO_ADDR
// result := av ;
7286: LD_ADDR_VAR 0 2
7290: PUSH
7291: LD_VAR 0 6
7295: ST_TO_ADDR
// end ;
7296: LD_VAR 0 2
7300: RET
// function get_random_design_am ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
7301: LD_INT 0
7303: PPUSH
7304: PPUSH
7305: PPUSH
7306: PPUSH
7307: PPUSH
7308: PPUSH
7309: PPUSH
7310: PPUSH
7311: PPUSH
7312: PPUSH
// pom1 = Rand ( 1 , 12 ) ;
7313: LD_ADDR_VAR 0 2
7317: PUSH
7318: LD_INT 1
7320: PPUSH
7321: LD_INT 12
7323: PPUSH
7324: CALL_OW 12
7328: ST_TO_ADDR
// case pom1 of 1 :
7329: LD_VAR 0 2
7333: PUSH
7334: LD_INT 1
7336: DOUBLE
7337: EQUAL
7338: IFTRUE 7342
7340: GO 7353
7342: POP
// aa3 = us_machine_gun ; 2 :
7343: LD_ADDR_VAR 0 9
7347: PUSH
7348: LD_INT 2
7350: ST_TO_ADDR
7351: GO 7563
7353: LD_INT 2
7355: DOUBLE
7356: EQUAL
7357: IFTRUE 7361
7359: GO 7372
7361: POP
// aa3 = us_light_gun ; 3 :
7362: LD_ADDR_VAR 0 9
7366: PUSH
7367: LD_INT 3
7369: ST_TO_ADDR
7370: GO 7563
7372: LD_INT 3
7374: DOUBLE
7375: EQUAL
7376: IFTRUE 7380
7378: GO 7391
7380: POP
// aa3 = us_gatling_gun ; 4 :
7381: LD_ADDR_VAR 0 9
7385: PUSH
7386: LD_INT 4
7388: ST_TO_ADDR
7389: GO 7563
7391: LD_INT 4
7393: DOUBLE
7394: EQUAL
7395: IFTRUE 7399
7397: GO 7410
7399: POP
// aa3 = us_double_gun ; 5 :
7400: LD_ADDR_VAR 0 9
7404: PUSH
7405: LD_INT 5
7407: ST_TO_ADDR
7408: GO 7563
7410: LD_INT 5
7412: DOUBLE
7413: EQUAL
7414: IFTRUE 7418
7416: GO 7429
7418: POP
// aa3 = us_heavy_gun ; 6 :
7419: LD_ADDR_VAR 0 9
7423: PUSH
7424: LD_INT 6
7426: ST_TO_ADDR
7427: GO 7563
7429: LD_INT 6
7431: DOUBLE
7432: EQUAL
7433: IFTRUE 7437
7435: GO 7448
7437: POP
// aa3 = us_rocket_launcher ; 7 :
7438: LD_ADDR_VAR 0 9
7442: PUSH
7443: LD_INT 7
7445: ST_TO_ADDR
7446: GO 7563
7448: LD_INT 7
7450: DOUBLE
7451: EQUAL
7452: IFTRUE 7456
7454: GO 7467
7456: POP
// aa3 = us_laser ; 8 :
7457: LD_ADDR_VAR 0 9
7461: PUSH
7462: LD_INT 9
7464: ST_TO_ADDR
7465: GO 7563
7467: LD_INT 8
7469: DOUBLE
7470: EQUAL
7471: IFTRUE 7475
7473: GO 7486
7475: POP
// aa3 = us_double_laser ; 9 :
7476: LD_ADDR_VAR 0 9
7480: PUSH
7481: LD_INT 10
7483: ST_TO_ADDR
7484: GO 7563
7486: LD_INT 9
7488: DOUBLE
7489: EQUAL
7490: IFTRUE 7494
7492: GO 7505
7494: POP
// aa3 = us_radar ; 10 :
7495: LD_ADDR_VAR 0 9
7499: PUSH
7500: LD_INT 11
7502: ST_TO_ADDR
7503: GO 7563
7505: LD_INT 10
7507: DOUBLE
7508: EQUAL
7509: IFTRUE 7513
7511: GO 7524
7513: POP
// aa3 = us_cargo_bay ; 11 :
7514: LD_ADDR_VAR 0 9
7518: PUSH
7519: LD_INT 12
7521: ST_TO_ADDR
7522: GO 7563
7524: LD_INT 11
7526: DOUBLE
7527: EQUAL
7528: IFTRUE 7532
7530: GO 7543
7532: POP
// aa3 = us_crane ; 12 :
7533: LD_ADDR_VAR 0 9
7537: PUSH
7538: LD_INT 13
7540: ST_TO_ADDR
7541: GO 7563
7543: LD_INT 12
7545: DOUBLE
7546: EQUAL
7547: IFTRUE 7551
7549: GO 7562
7551: POP
// aa3 = us_bulldozer ; end ;
7552: LD_ADDR_VAR 0 9
7556: PUSH
7557: LD_INT 14
7559: ST_TO_ADDR
7560: GO 7563
7562: POP
// if pom1 in [ 5 , 8 , 12 ] then
7563: LD_VAR 0 2
7567: PUSH
7568: LD_INT 5
7570: PUSH
7571: LD_INT 8
7573: PUSH
7574: LD_INT 12
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: LIST
7581: IN
7582: IFFALSE 7602
// pom2 = Rand ( 4 , 5 ) else
7584: LD_ADDR_VAR 0 3
7588: PUSH
7589: LD_INT 4
7591: PPUSH
7592: LD_INT 5
7594: PPUSH
7595: CALL_OW 12
7599: ST_TO_ADDR
7600: GO 7653
// if pom1 in [ 1 , 9 ] then
7602: LD_VAR 0 2
7606: PUSH
7607: LD_INT 1
7609: PUSH
7610: LD_INT 9
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: IN
7617: IFFALSE 7637
// pom2 = Rand ( 1 , 5 ) else
7619: LD_ADDR_VAR 0 3
7623: PUSH
7624: LD_INT 1
7626: PPUSH
7627: LD_INT 5
7629: PPUSH
7630: CALL_OW 12
7634: ST_TO_ADDR
7635: GO 7653
// pom2 = Rand ( 2 , 5 ) ;
7637: LD_ADDR_VAR 0 3
7641: PUSH
7642: LD_INT 2
7644: PPUSH
7645: LD_INT 5
7647: PPUSH
7648: CALL_OW 12
7652: ST_TO_ADDR
// case pom2 of 1 :
7653: LD_VAR 0 3
7657: PUSH
7658: LD_INT 1
7660: DOUBLE
7661: EQUAL
7662: IFTRUE 7666
7664: GO 7677
7666: POP
// aa1 = us_light_wheeled ; 2 :
7667: LD_ADDR_VAR 0 7
7671: PUSH
7672: LD_INT 1
7674: ST_TO_ADDR
7675: GO 7754
7677: LD_INT 2
7679: DOUBLE
7680: EQUAL
7681: IFTRUE 7685
7683: GO 7696
7685: POP
// aa1 = us_medium_wheeled ; 3 :
7686: LD_ADDR_VAR 0 7
7690: PUSH
7691: LD_INT 2
7693: ST_TO_ADDR
7694: GO 7754
7696: LD_INT 3
7698: DOUBLE
7699: EQUAL
7700: IFTRUE 7704
7702: GO 7715
7704: POP
// aa1 = us_medium_tracked ; 4 :
7705: LD_ADDR_VAR 0 7
7709: PUSH
7710: LD_INT 3
7712: ST_TO_ADDR
7713: GO 7754
7715: LD_INT 4
7717: DOUBLE
7718: EQUAL
7719: IFTRUE 7723
7721: GO 7734
7723: POP
// aa1 = us_heavy_tracked ; 5 :
7724: LD_ADDR_VAR 0 7
7728: PUSH
7729: LD_INT 4
7731: ST_TO_ADDR
7732: GO 7754
7734: LD_INT 5
7736: DOUBLE
7737: EQUAL
7738: IFTRUE 7742
7740: GO 7753
7742: POP
// aa1 = us_morphling ; end ;
7743: LD_ADDR_VAR 0 7
7747: PUSH
7748: LD_INT 5
7750: ST_TO_ADDR
7751: GO 7754
7753: POP
// if pom2 < 4 then
7754: LD_VAR 0 3
7758: PUSH
7759: LD_INT 4
7761: LESS
7762: IFFALSE 7782
// pom3 = Rand ( 1 , 3 ) else
7764: LD_ADDR_VAR 0 4
7768: PUSH
7769: LD_INT 1
7771: PPUSH
7772: LD_INT 3
7774: PPUSH
7775: CALL_OW 12
7779: ST_TO_ADDR
7780: GO 7798
// pom3 = Rand ( 2 , 3 ) ;
7782: LD_ADDR_VAR 0 4
7786: PUSH
7787: LD_INT 2
7789: PPUSH
7790: LD_INT 3
7792: PPUSH
7793: CALL_OW 12
7797: ST_TO_ADDR
// case pom3 of 1 :
7798: LD_VAR 0 4
7802: PUSH
7803: LD_INT 1
7805: DOUBLE
7806: EQUAL
7807: IFTRUE 7811
7809: GO 7822
7811: POP
// aa2 = engine_solar ; 2 :
7812: LD_ADDR_VAR 0 8
7816: PUSH
7817: LD_INT 2
7819: ST_TO_ADDR
7820: GO 7861
7822: LD_INT 2
7824: DOUBLE
7825: EQUAL
7826: IFTRUE 7830
7828: GO 7841
7830: POP
// aa2 = engine_combustion ; 3 :
7831: LD_ADDR_VAR 0 8
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
7839: GO 7861
7841: LD_INT 3
7843: DOUBLE
7844: EQUAL
7845: IFTRUE 7849
7847: GO 7860
7849: POP
// aa2 = engine_siberite ; end ;
7850: LD_ADDR_VAR 0 8
7854: PUSH
7855: LD_INT 3
7857: ST_TO_ADDR
7858: GO 7861
7860: POP
// pom4 = Rand ( 1 , 2 ) ;
7861: LD_ADDR_VAR 0 5
7865: PUSH
7866: LD_INT 1
7868: PPUSH
7869: LD_INT 2
7871: PPUSH
7872: CALL_OW 12
7876: ST_TO_ADDR
// case pom4 of 1 :
7877: LD_VAR 0 5
7881: PUSH
7882: LD_INT 1
7884: DOUBLE
7885: EQUAL
7886: IFTRUE 7890
7888: GO 7901
7890: POP
// aa4 = control_manual ; 2 :
7891: LD_ADDR_VAR 0 10
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
7899: GO 7921
7901: LD_INT 2
7903: DOUBLE
7904: EQUAL
7905: IFTRUE 7909
7907: GO 7920
7909: POP
// aa4 = control_computer ; end ;
7910: LD_ADDR_VAR 0 10
7914: PUSH
7915: LD_INT 3
7917: ST_TO_ADDR
7918: GO 7921
7920: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
7921: LD_ADDR_VAR 0 6
7925: PUSH
7926: LD_VAR 0 7
7930: PUSH
7931: LD_VAR 0 8
7935: PUSH
7936: LD_VAR 0 9
7940: PUSH
7941: LD_VAR 0 10
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: ST_TO_ADDR
// result = aa ;
7952: LD_ADDR_VAR 0 1
7956: PUSH
7957: LD_VAR 0 6
7961: ST_TO_ADDR
// end ;
7962: LD_VAR 0 1
7966: RET
// function get_random_design_ar ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
7967: LD_INT 0
7969: PPUSH
7970: PPUSH
7971: PPUSH
7972: PPUSH
7973: PPUSH
7974: PPUSH
7975: PPUSH
7976: PPUSH
7977: PPUSH
7978: PPUSH
// pom1 = Rand ( 1 , 11 ) ;
7979: LD_ADDR_VAR 0 2
7983: PUSH
7984: LD_INT 1
7986: PPUSH
7987: LD_INT 11
7989: PPUSH
7990: CALL_OW 12
7994: ST_TO_ADDR
// case pom1 of 1 :
7995: LD_VAR 0 2
7999: PUSH
8000: LD_INT 1
8002: DOUBLE
8003: EQUAL
8004: IFTRUE 8008
8006: GO 8019
8008: POP
// aa3 = ar_multimissile_ballista ; 2 :
8009: LD_ADDR_VAR 0 9
8013: PUSH
8014: LD_INT 22
8016: ST_TO_ADDR
8017: GO 8210
8019: LD_INT 2
8021: DOUBLE
8022: EQUAL
8023: IFTRUE 8027
8025: GO 8038
8027: POP
// aa3 = ar_light_gun ; 3 :
8028: LD_ADDR_VAR 0 9
8032: PUSH
8033: LD_INT 23
8035: ST_TO_ADDR
8036: GO 8210
8038: LD_INT 3
8040: DOUBLE
8041: EQUAL
8042: IFTRUE 8046
8044: GO 8057
8046: POP
// aa3 = ar_double_machine_gun ; 4 :
8047: LD_ADDR_VAR 0 9
8051: PUSH
8052: LD_INT 24
8054: ST_TO_ADDR
8055: GO 8210
8057: LD_INT 4
8059: DOUBLE
8060: EQUAL
8061: IFTRUE 8065
8063: GO 8076
8065: POP
// aa3 = ar_gatling_gun ; 5 :
8066: LD_ADDR_VAR 0 9
8070: PUSH
8071: LD_INT 25
8073: ST_TO_ADDR
8074: GO 8210
8076: LD_INT 5
8078: DOUBLE
8079: EQUAL
8080: IFTRUE 8084
8082: GO 8095
8084: POP
// aa3 = ar_flame_thrower ; 6 :
8085: LD_ADDR_VAR 0 9
8089: PUSH
8090: LD_INT 26
8092: ST_TO_ADDR
8093: GO 8210
8095: LD_INT 6
8097: DOUBLE
8098: EQUAL
8099: IFTRUE 8103
8101: GO 8114
8103: POP
// aa3 = ar_gun ; 7 :
8104: LD_ADDR_VAR 0 9
8108: PUSH
8109: LD_INT 27
8111: ST_TO_ADDR
8112: GO 8210
8114: LD_INT 7
8116: DOUBLE
8117: EQUAL
8118: IFTRUE 8122
8120: GO 8133
8122: POP
// aa3 = ar_rocket_launcher ; 8 :
8123: LD_ADDR_VAR 0 9
8127: PUSH
8128: LD_INT 28
8130: ST_TO_ADDR
8131: GO 8210
8133: LD_INT 8
8135: DOUBLE
8136: EQUAL
8137: IFTRUE 8141
8139: GO 8152
8141: POP
// aa3 = ar_selfpropelled_bomb ; 9 :
8142: LD_ADDR_VAR 0 9
8146: PUSH
8147: LD_INT 29
8149: ST_TO_ADDR
8150: GO 8210
8152: LD_INT 9
8154: DOUBLE
8155: EQUAL
8156: IFTRUE 8160
8158: GO 8171
8160: POP
// aa3 = ar_radar ; 10 :
8161: LD_ADDR_VAR 0 9
8165: PUSH
8166: LD_INT 30
8168: ST_TO_ADDR
8169: GO 8210
8171: LD_INT 10
8173: DOUBLE
8174: EQUAL
8175: IFTRUE 8179
8177: GO 8190
8179: POP
// aa3 = ar_control_tower ; 11 :
8180: LD_ADDR_VAR 0 9
8184: PUSH
8185: LD_INT 31
8187: ST_TO_ADDR
8188: GO 8210
8190: LD_INT 11
8192: DOUBLE
8193: EQUAL
8194: IFTRUE 8198
8196: GO 8209
8198: POP
// aa3 = us_cargo_bay ; end ;
8199: LD_ADDR_VAR 0 9
8203: PUSH
8204: LD_INT 12
8206: ST_TO_ADDR
8207: GO 8210
8209: POP
// if pom1 in [ 1 , 2 , 3 ] then
8210: LD_VAR 0 2
8214: PUSH
8215: LD_INT 1
8217: PUSH
8218: LD_INT 2
8220: PUSH
8221: LD_INT 3
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: IN
8229: IFFALSE 8249
// pom2 = Rand ( 1 , 4 ) else
8231: LD_ADDR_VAR 0 3
8235: PUSH
8236: LD_INT 1
8238: PPUSH
8239: LD_INT 4
8241: PPUSH
8242: CALL_OW 12
8246: ST_TO_ADDR
8247: GO 8265
// pom2 = Rand ( 3 , 4 ) ;
8249: LD_ADDR_VAR 0 3
8253: PUSH
8254: LD_INT 3
8256: PPUSH
8257: LD_INT 4
8259: PPUSH
8260: CALL_OW 12
8264: ST_TO_ADDR
// case pom2 of 1 :
8265: LD_VAR 0 3
8269: PUSH
8270: LD_INT 1
8272: DOUBLE
8273: EQUAL
8274: IFTRUE 8278
8276: GO 8289
8278: POP
// aa1 = ar_hovercraft ; 2 :
8279: LD_ADDR_VAR 0 7
8283: PUSH
8284: LD_INT 11
8286: ST_TO_ADDR
8287: GO 8347
8289: LD_INT 2
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8308
8297: POP
// aa1 = ar_light_trike ; 3 :
8298: LD_ADDR_VAR 0 7
8302: PUSH
8303: LD_INT 12
8305: ST_TO_ADDR
8306: GO 8347
8308: LD_INT 3
8310: DOUBLE
8311: EQUAL
8312: IFTRUE 8316
8314: GO 8327
8316: POP
// aa1 = ar_medium_trike ; 4 :
8317: LD_ADDR_VAR 0 7
8321: PUSH
8322: LD_INT 13
8324: ST_TO_ADDR
8325: GO 8347
8327: LD_INT 4
8329: DOUBLE
8330: EQUAL
8331: IFTRUE 8335
8333: GO 8346
8335: POP
// aa1 = ar_half_tracked ; end ;
8336: LD_ADDR_VAR 0 7
8340: PUSH
8341: LD_INT 14
8343: ST_TO_ADDR
8344: GO 8347
8346: POP
// pom3 = Rand ( 1 , 3 ) ;
8347: LD_ADDR_VAR 0 4
8351: PUSH
8352: LD_INT 1
8354: PPUSH
8355: LD_INT 3
8357: PPUSH
8358: CALL_OW 12
8362: ST_TO_ADDR
// case pom3 of 1 :
8363: LD_VAR 0 4
8367: PUSH
8368: LD_INT 1
8370: DOUBLE
8371: EQUAL
8372: IFTRUE 8376
8374: GO 8387
8376: POP
// aa2 = engine_solar ; 2 :
8377: LD_ADDR_VAR 0 8
8381: PUSH
8382: LD_INT 2
8384: ST_TO_ADDR
8385: GO 8426
8387: LD_INT 2
8389: DOUBLE
8390: EQUAL
8391: IFTRUE 8395
8393: GO 8406
8395: POP
// aa2 = engine_combustion ; 3 :
8396: LD_ADDR_VAR 0 8
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
8404: GO 8426
8406: LD_INT 3
8408: DOUBLE
8409: EQUAL
8410: IFTRUE 8414
8412: GO 8425
8414: POP
// aa2 = engine_siberite ; end ;
8415: LD_ADDR_VAR 0 8
8419: PUSH
8420: LD_INT 3
8422: ST_TO_ADDR
8423: GO 8426
8425: POP
// pom4 = Rand ( 1 , 2 ) ;
8426: LD_ADDR_VAR 0 5
8430: PUSH
8431: LD_INT 1
8433: PPUSH
8434: LD_INT 2
8436: PPUSH
8437: CALL_OW 12
8441: ST_TO_ADDR
// case pom4 of 1 :
8442: LD_VAR 0 5
8446: PUSH
8447: LD_INT 1
8449: DOUBLE
8450: EQUAL
8451: IFTRUE 8455
8453: GO 8466
8455: POP
// aa4 = control_manual ; 2 :
8456: LD_ADDR_VAR 0 10
8460: PUSH
8461: LD_INT 1
8463: ST_TO_ADDR
8464: GO 8486
8466: LD_INT 2
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 8485
8474: POP
// aa4 = control_apeman ; end ;
8475: LD_ADDR_VAR 0 10
8479: PUSH
8480: LD_INT 5
8482: ST_TO_ADDR
8483: GO 8486
8485: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
8486: LD_ADDR_VAR 0 6
8490: PUSH
8491: LD_VAR 0 7
8495: PUSH
8496: LD_VAR 0 8
8500: PUSH
8501: LD_VAR 0 9
8505: PUSH
8506: LD_VAR 0 10
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: ST_TO_ADDR
// result = aa ;
8517: LD_ADDR_VAR 0 1
8521: PUSH
8522: LD_VAR 0 6
8526: ST_TO_ADDR
// end ;
8527: LD_VAR 0 1
8531: RET
// function get_random_design_ru ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
8532: LD_INT 0
8534: PPUSH
8535: PPUSH
8536: PPUSH
8537: PPUSH
8538: PPUSH
8539: PPUSH
8540: PPUSH
8541: PPUSH
8542: PPUSH
8543: PPUSH
// pom1 = Rand ( 1 , 10 ) ;
8544: LD_ADDR_VAR 0 2
8548: PUSH
8549: LD_INT 1
8551: PPUSH
8552: LD_INT 10
8554: PPUSH
8555: CALL_OW 12
8559: ST_TO_ADDR
// case pom1 of 1 :
8560: LD_VAR 0 2
8564: PUSH
8565: LD_INT 1
8567: DOUBLE
8568: EQUAL
8569: IFTRUE 8573
8571: GO 8584
8573: POP
// aa3 = ru_heavy_machine_gun ; 2 :
8574: LD_ADDR_VAR 0 9
8578: PUSH
8579: LD_INT 42
8581: ST_TO_ADDR
8582: GO 8756
8584: LD_INT 2
8586: DOUBLE
8587: EQUAL
8588: IFTRUE 8592
8590: GO 8603
8592: POP
// aa3 = ru_gatling_gun ; 3 :
8593: LD_ADDR_VAR 0 9
8597: PUSH
8598: LD_INT 43
8600: ST_TO_ADDR
8601: GO 8756
8603: LD_INT 3
8605: DOUBLE
8606: EQUAL
8607: IFTRUE 8611
8609: GO 8622
8611: POP
// aa3 = ru_gun ; 4 :
8612: LD_ADDR_VAR 0 9
8616: PUSH
8617: LD_INT 44
8619: ST_TO_ADDR
8620: GO 8756
8622: LD_INT 4
8624: DOUBLE
8625: EQUAL
8626: IFTRUE 8630
8628: GO 8641
8630: POP
// aa3 = ru_rocket_launcher ; 5 :
8631: LD_ADDR_VAR 0 9
8635: PUSH
8636: LD_INT 45
8638: ST_TO_ADDR
8639: GO 8756
8641: LD_INT 5
8643: DOUBLE
8644: EQUAL
8645: IFTRUE 8649
8647: GO 8660
8649: POP
// aa3 = ru_heavy_gun ; 6 :
8650: LD_ADDR_VAR 0 9
8654: PUSH
8655: LD_INT 46
8657: ST_TO_ADDR
8658: GO 8756
8660: LD_INT 6
8662: DOUBLE
8663: EQUAL
8664: IFTRUE 8668
8666: GO 8679
8668: POP
// aa3 = ru_rocket ; 7 :
8669: LD_ADDR_VAR 0 9
8673: PUSH
8674: LD_INT 47
8676: ST_TO_ADDR
8677: GO 8756
8679: LD_INT 7
8681: DOUBLE
8682: EQUAL
8683: IFTRUE 8687
8685: GO 8698
8687: POP
// aa3 = ru_time_lapser ; 8 :
8688: LD_ADDR_VAR 0 9
8692: PUSH
8693: LD_INT 49
8695: ST_TO_ADDR
8696: GO 8756
8698: LD_INT 8
8700: DOUBLE
8701: EQUAL
8702: IFTRUE 8706
8704: GO 8717
8706: POP
// aa3 = ru_cargo_bay ; 9 :
8707: LD_ADDR_VAR 0 9
8711: PUSH
8712: LD_INT 51
8714: ST_TO_ADDR
8715: GO 8756
8717: LD_INT 9
8719: DOUBLE
8720: EQUAL
8721: IFTRUE 8725
8723: GO 8736
8725: POP
// aa3 = ru_crane ; 10 :
8726: LD_ADDR_VAR 0 9
8730: PUSH
8731: LD_INT 52
8733: ST_TO_ADDR
8734: GO 8756
8736: LD_INT 10
8738: DOUBLE
8739: EQUAL
8740: IFTRUE 8744
8742: GO 8755
8744: POP
// aa3 = ru_bulldozer ; end ;
8745: LD_ADDR_VAR 0 9
8749: PUSH
8750: LD_INT 53
8752: ST_TO_ADDR
8753: GO 8756
8755: POP
// if pom1 in [ 1 , 2 , 3 , 4 ] then
8756: LD_VAR 0 2
8760: PUSH
8761: LD_INT 1
8763: PUSH
8764: LD_INT 2
8766: PUSH
8767: LD_INT 3
8769: PUSH
8770: LD_INT 4
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: IN
8779: IFFALSE 8799
// pom2 = Rand ( 1 , 4 ) else
8781: LD_ADDR_VAR 0 3
8785: PUSH
8786: LD_INT 1
8788: PPUSH
8789: LD_INT 4
8791: PPUSH
8792: CALL_OW 12
8796: ST_TO_ADDR
8797: GO 8815
// pom2 = Rand ( 3 , 4 ) ;
8799: LD_ADDR_VAR 0 3
8803: PUSH
8804: LD_INT 3
8806: PPUSH
8807: LD_INT 4
8809: PPUSH
8810: CALL_OW 12
8814: ST_TO_ADDR
// case pom2 of 1 :
8815: LD_VAR 0 3
8819: PUSH
8820: LD_INT 1
8822: DOUBLE
8823: EQUAL
8824: IFTRUE 8828
8826: GO 8839
8828: POP
// aa1 = ru_medium_wheeled ; 2 :
8829: LD_ADDR_VAR 0 7
8833: PUSH
8834: LD_INT 21
8836: ST_TO_ADDR
8837: GO 8897
8839: LD_INT 2
8841: DOUBLE
8842: EQUAL
8843: IFTRUE 8847
8845: GO 8858
8847: POP
// aa1 = ru_medium_tracked ; 3 :
8848: LD_ADDR_VAR 0 7
8852: PUSH
8853: LD_INT 22
8855: ST_TO_ADDR
8856: GO 8897
8858: LD_INT 3
8860: DOUBLE
8861: EQUAL
8862: IFTRUE 8866
8864: GO 8877
8866: POP
// aa1 = ru_heavy_wheeled ; 4 :
8867: LD_ADDR_VAR 0 7
8871: PUSH
8872: LD_INT 23
8874: ST_TO_ADDR
8875: GO 8897
8877: LD_INT 4
8879: DOUBLE
8880: EQUAL
8881: IFTRUE 8885
8883: GO 8896
8885: POP
// aa1 = ru_heavy_tracked ; end ;
8886: LD_ADDR_VAR 0 7
8890: PUSH
8891: LD_INT 24
8893: ST_TO_ADDR
8894: GO 8897
8896: POP
// pom3 = Rand ( 1 , 2 ) ;
8897: LD_ADDR_VAR 0 4
8901: PUSH
8902: LD_INT 1
8904: PPUSH
8905: LD_INT 2
8907: PPUSH
8908: CALL_OW 12
8912: ST_TO_ADDR
// case pom3 of 1 :
8913: LD_VAR 0 4
8917: PUSH
8918: LD_INT 1
8920: DOUBLE
8921: EQUAL
8922: IFTRUE 8926
8924: GO 8937
8926: POP
// aa2 = engine_combustion ; 2 :
8927: LD_ADDR_VAR 0 8
8931: PUSH
8932: LD_INT 1
8934: ST_TO_ADDR
8935: GO 8957
8937: LD_INT 2
8939: DOUBLE
8940: EQUAL
8941: IFTRUE 8945
8943: GO 8956
8945: POP
// aa2 = engine_siberite ; end ;
8946: LD_ADDR_VAR 0 8
8950: PUSH
8951: LD_INT 3
8953: ST_TO_ADDR
8954: GO 8957
8956: POP
// pom4 = Rand ( 1 , 2 ) ;
8957: LD_ADDR_VAR 0 5
8961: PUSH
8962: LD_INT 1
8964: PPUSH
8965: LD_INT 2
8967: PPUSH
8968: CALL_OW 12
8972: ST_TO_ADDR
// case pom4 of 1 :
8973: LD_VAR 0 5
8977: PUSH
8978: LD_INT 1
8980: DOUBLE
8981: EQUAL
8982: IFTRUE 8986
8984: GO 8997
8986: POP
// aa4 = control_manual ; 2 :
8987: LD_ADDR_VAR 0 10
8991: PUSH
8992: LD_INT 1
8994: ST_TO_ADDR
8995: GO 9017
8997: LD_INT 2
8999: DOUBLE
9000: EQUAL
9001: IFTRUE 9005
9003: GO 9016
9005: POP
// aa4 = control_computer ; end ;
9006: LD_ADDR_VAR 0 10
9010: PUSH
9011: LD_INT 3
9013: ST_TO_ADDR
9014: GO 9017
9016: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
9017: LD_ADDR_VAR 0 6
9021: PUSH
9022: LD_VAR 0 7
9026: PUSH
9027: LD_VAR 0 8
9031: PUSH
9032: LD_VAR 0 9
9036: PUSH
9037: LD_VAR 0 10
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: ST_TO_ADDR
// result = aa ;
9048: LD_ADDR_VAR 0 1
9052: PUSH
9053: LD_VAR 0 6
9057: ST_TO_ADDR
// end ;
9058: LD_VAR 0 1
9062: RET
// every 0 0$1 trigger FilterUnitsInArea ( zona , [ f_not , [ f_side , 0 ] ] ) > 0 do var zony ; var pom , i ; var UN ; var p1 , p2 ;
9063: LD_INT 25
9065: PPUSH
9066: LD_INT 3
9068: PUSH
9069: LD_INT 22
9071: PUSH
9072: LD_INT 0
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PPUSH
9083: CALL_OW 70
9087: PUSH
9088: LD_INT 0
9090: GREATER
9091: IFFALSE 9284
9093: GO 9095
9095: DISABLE
9096: LD_INT 0
9098: PPUSH
9099: PPUSH
9100: PPUSH
9101: PPUSH
9102: PPUSH
9103: PPUSH
// begin zony = [ z1 , z2 , z3 , z4 , z5 , z6 , z7 , z8 , z9 , z10 , z11 , z12 , z13 , z14 , z15 , z16 , z17 , z18 , z19 , z20 ] ;
9104: LD_ADDR_VAR 0 1
9108: PUSH
9109: LD_INT 5
9111: PUSH
9112: LD_INT 6
9114: PUSH
9115: LD_INT 7
9117: PUSH
9118: LD_INT 8
9120: PUSH
9121: LD_INT 9
9123: PUSH
9124: LD_INT 10
9126: PUSH
9127: LD_INT 11
9129: PUSH
9130: LD_INT 12
9132: PUSH
9133: LD_INT 20
9135: PUSH
9136: LD_INT 13
9138: PUSH
9139: LD_INT 14
9141: PUSH
9142: LD_INT 21
9144: PUSH
9145: LD_INT 15
9147: PUSH
9148: LD_INT 16
9150: PUSH
9151: LD_INT 17
9153: PUSH
9154: LD_INT 18
9156: PUSH
9157: LD_INT 19
9159: PUSH
9160: LD_INT 22
9162: PUSH
9163: LD_INT 23
9165: PUSH
9166: LD_INT 24
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: ST_TO_ADDR
// for i in zony do
9191: LD_ADDR_VAR 0 3
9195: PUSH
9196: LD_VAR 0 1
9200: PUSH
9201: FOR_IN
9202: IFFALSE 9281
// begin pom = FilterUnitsInArea ( i , [ f_not , [ f_side , 0 ] ] ) ;
9204: LD_ADDR_VAR 0 2
9208: PUSH
9209: LD_VAR 0 3
9213: PPUSH
9214: LD_INT 3
9216: PUSH
9217: LD_INT 22
9219: PUSH
9220: LD_INT 0
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PPUSH
9231: CALL_OW 70
9235: ST_TO_ADDR
// if pom > 0 then
9236: LD_VAR 0 2
9240: PUSH
9241: LD_INT 0
9243: GREATER
9244: IFFALSE 9279
// begin p1 = GetSide ( pom [ 1 ] ) ;
9246: LD_ADDR_VAR 0 5
9250: PUSH
9251: LD_VAR 0 2
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PPUSH
9260: CALL_OW 255
9264: ST_TO_ADDR
// zapis_do_fronty ( i , p1 ) ;
9265: LD_VAR 0 3
9269: PPUSH
9270: LD_VAR 0 5
9274: PPUSH
9275: CALL 9432 0 2
// end ; end ;
9279: GO 9201
9281: POP
9282: POP
// enable ;
9283: ENABLE
// end ;
9284: PPOPN 6
9286: END
// every 0 0$3 do var poc ; var p1 , p2 ; var j , i ;
9287: GO 9289
9289: DISABLE
9290: LD_INT 0
9292: PPUSH
9293: PPUSH
9294: PPUSH
9295: PPUSH
9296: PPUSH
// begin poc = 1 ;
9297: LD_ADDR_VAR 0 1
9301: PUSH
9302: LD_INT 1
9304: ST_TO_ADDR
// for i in POINTY do
9305: LD_ADDR_VAR 0 5
9309: PUSH
9310: LD_EXP 36
9314: PUSH
9315: FOR_IN
9316: IFFALSE 9426
// begin if i >= chance_find then
9318: LD_VAR 0 5
9322: PUSH
9323: LD_EXP 25
9327: GREATEREQUAL
9328: IFFALSE 9410
// begin for j = 1 to 8 do
9330: LD_ADDR_VAR 0 4
9334: PUSH
9335: DOUBLE
9336: LD_INT 1
9338: DEC
9339: ST_TO_ADDR
9340: LD_INT 8
9342: PUSH
9343: FOR_TO
9344: IFFALSE 9378
// if Side_Positions [ j ] = poc then
9346: LD_EXP 29
9350: PUSH
9351: LD_VAR 0 4
9355: ARRAY
9356: PUSH
9357: LD_VAR 0 1
9361: EQUAL
9362: IFFALSE 9376
// begin p1 = j ;
9364: LD_ADDR_VAR 0 2
9368: PUSH
9369: LD_VAR 0 4
9373: ST_TO_ADDR
// break ;
9374: GO 9378
// end ;
9376: GO 9343
9378: POP
9379: POP
// p2 = Side_Nations [ j ] ;
9380: LD_ADDR_VAR 0 3
9384: PUSH
9385: LD_EXP 30
9389: PUSH
9390: LD_VAR 0 4
9394: ARRAY
9395: ST_TO_ADDR
// find_clovicka ( p1 , p2 ) ;
9396: LD_VAR 0 2
9400: PPUSH
9401: LD_VAR 0 3
9405: PPUSH
9406: CALL 9756 0 2
// end ; poc = poc + 1 ;
9410: LD_ADDR_VAR 0 1
9414: PUSH
9415: LD_VAR 0 1
9419: PUSH
9420: LD_INT 1
9422: PLUS
9423: ST_TO_ADDR
// end ;
9424: GO 9315
9426: POP
9427: POP
// enable ;
9428: ENABLE
// end ;
9429: PPOPN 5
9431: END
// function zapis_do_fronty ( zo , side ) ; var pom ; begin
9432: LD_INT 0
9434: PPUSH
9435: PPUSH
// pom = 0 ;
9436: LD_ADDR_VAR 0 4
9440: PUSH
9441: LD_INT 0
9443: ST_TO_ADDR
// pom = Side_Positions [ side ] ;
9444: LD_ADDR_VAR 0 4
9448: PUSH
9449: LD_EXP 29
9453: PUSH
9454: LD_VAR 0 2
9458: ARRAY
9459: ST_TO_ADDR
// if pom = 0 then
9460: LD_VAR 0 4
9464: PUSH
9465: LD_INT 0
9467: EQUAL
9468: IFFALSE 9477
// msg ( konec ... chyba ) ;
9470: LD_STRING konec ... chyba
9472: PPUSH
9473: CALL_OW 100
// case pom of 1 :
9477: LD_VAR 0 4
9481: PUSH
9482: LD_INT 1
9484: DOUBLE
9485: EQUAL
9486: IFTRUE 9490
9488: GO 9549
9490: POP
// POINTY = [ POINTY [ 1 ] union [ zo ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] ] ; 2 :
9491: LD_ADDR_EXP 36
9495: PUSH
9496: LD_EXP 36
9500: PUSH
9501: LD_INT 1
9503: ARRAY
9504: PUSH
9505: LD_VAR 0 1
9509: PUSH
9510: EMPTY
9511: LIST
9512: UNION
9513: PUSH
9514: LD_EXP 36
9518: PUSH
9519: LD_INT 2
9521: ARRAY
9522: PUSH
9523: LD_EXP 36
9527: PUSH
9528: LD_INT 3
9530: ARRAY
9531: PUSH
9532: LD_EXP 36
9536: PUSH
9537: LD_INT 4
9539: ARRAY
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: ST_TO_ADDR
9547: GO 9751
9549: LD_INT 2
9551: DOUBLE
9552: EQUAL
9553: IFTRUE 9557
9555: GO 9616
9557: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] union [ zo ] , POINTY [ 3 ] , POINTY [ 4 ] ] ; 3 :
9558: LD_ADDR_EXP 36
9562: PUSH
9563: LD_EXP 36
9567: PUSH
9568: LD_INT 1
9570: ARRAY
9571: PUSH
9572: LD_EXP 36
9576: PUSH
9577: LD_INT 2
9579: ARRAY
9580: PUSH
9581: LD_VAR 0 1
9585: PUSH
9586: EMPTY
9587: LIST
9588: UNION
9589: PUSH
9590: LD_EXP 36
9594: PUSH
9595: LD_INT 3
9597: ARRAY
9598: PUSH
9599: LD_EXP 36
9603: PUSH
9604: LD_INT 4
9606: ARRAY
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: ST_TO_ADDR
9614: GO 9751
9616: LD_INT 3
9618: DOUBLE
9619: EQUAL
9620: IFTRUE 9624
9622: GO 9683
9624: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] union [ zo ] , POINTY [ 4 ] ] ; 4 :
9625: LD_ADDR_EXP 36
9629: PUSH
9630: LD_EXP 36
9634: PUSH
9635: LD_INT 1
9637: ARRAY
9638: PUSH
9639: LD_EXP 36
9643: PUSH
9644: LD_INT 2
9646: ARRAY
9647: PUSH
9648: LD_EXP 36
9652: PUSH
9653: LD_INT 3
9655: ARRAY
9656: PUSH
9657: LD_VAR 0 1
9661: PUSH
9662: EMPTY
9663: LIST
9664: UNION
9665: PUSH
9666: LD_EXP 36
9670: PUSH
9671: LD_INT 4
9673: ARRAY
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: ST_TO_ADDR
9681: GO 9751
9683: LD_INT 4
9685: DOUBLE
9686: EQUAL
9687: IFTRUE 9691
9689: GO 9750
9691: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] union [ zo ] ] ; end ;
9692: LD_ADDR_EXP 36
9696: PUSH
9697: LD_EXP 36
9701: PUSH
9702: LD_INT 1
9704: ARRAY
9705: PUSH
9706: LD_EXP 36
9710: PUSH
9711: LD_INT 2
9713: ARRAY
9714: PUSH
9715: LD_EXP 36
9719: PUSH
9720: LD_INT 3
9722: ARRAY
9723: PUSH
9724: LD_EXP 36
9728: PUSH
9729: LD_INT 4
9731: ARRAY
9732: PUSH
9733: LD_VAR 0 1
9737: PUSH
9738: EMPTY
9739: LIST
9740: UNION
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: ST_TO_ADDR
9748: GO 9751
9750: POP
// end ;
9751: LD_VAR 0 3
9755: RET
// function find_clovicka ( side , nat ) ; var pom ; var un ; var unat ; var pomridic ; var pozice ; begin
9756: LD_INT 0
9758: PPUSH
9759: PPUSH
9760: PPUSH
9761: PPUSH
9762: PPUSH
9763: PPUSH
// pozice = Side_Positions [ side ] ;
9764: LD_ADDR_VAR 0 8
9768: PUSH
9769: LD_EXP 29
9773: PUSH
9774: LD_VAR 0 1
9778: ARRAY
9779: ST_TO_ADDR
// wait ( Rand ( 1 , 0 0$10 ) ) ;
9780: LD_INT 1
9782: PPUSH
9783: LD_INT 350
9785: PPUSH
9786: CALL_OW 12
9790: PPUSH
9791: CALL_OW 67
// pom = Rand ( 1 , ZMIZELI_LIDI [ pozice ] + 0 ) ;
9795: LD_ADDR_VAR 0 4
9799: PUSH
9800: LD_INT 1
9802: PPUSH
9803: LD_EXP 35
9807: PUSH
9808: LD_VAR 0 8
9812: ARRAY
9813: PUSH
9814: LD_INT 0
9816: PLUS
9817: PPUSH
9818: CALL_OW 12
9822: ST_TO_ADDR
// un = ZMIZELI_LIDI [ pozice ] [ pom ] ;
9823: LD_ADDR_VAR 0 5
9827: PUSH
9828: LD_EXP 35
9832: PUSH
9833: LD_VAR 0 8
9837: ARRAY
9838: PUSH
9839: LD_VAR 0 4
9843: ARRAY
9844: ST_TO_ADDR
// SetSide ( un , side ) ;
9845: LD_VAR 0 5
9849: PPUSH
9850: LD_VAR 0 1
9854: PPUSH
9855: CALL_OW 235
// if GetType ( un ) = unit_vehicle then
9859: LD_VAR 0 5
9863: PPUSH
9864: CALL_OW 247
9868: PUSH
9869: LD_INT 2
9871: EQUAL
9872: IFFALSE 9993
// if GetControl ( un ) = control_manual then
9874: LD_VAR 0 5
9878: PPUSH
9879: CALL_OW 263
9883: PUSH
9884: LD_INT 1
9886: EQUAL
9887: IFFALSE 9993
// if IsDrivenBy ( un ) = 0 then
9889: LD_VAR 0 5
9893: PPUSH
9894: CALL_OW 311
9898: PUSH
9899: LD_INT 0
9901: EQUAL
9902: IFFALSE 9964
// begin uc_side = side ;
9904: LD_ADDR_OWVAR 20
9908: PUSH
9909: LD_VAR 0 1
9913: ST_TO_ADDR
// uc_nation = nat ;
9914: LD_ADDR_OWVAR 21
9918: PUSH
9919: LD_VAR 0 2
9923: ST_TO_ADDR
// pomridic = get_human ( get_sex , class_mechanic , 1 ,  ) ;
9924: LD_ADDR_VAR 0 7
9928: PUSH
9929: CALL 6982 0 0
9933: PPUSH
9934: LD_INT 3
9936: PPUSH
9937: LD_INT 1
9939: PPUSH
9940: LD_STRING 
9942: PPUSH
9943: CALL 6924 0 4
9947: ST_TO_ADDR
// PlaceHumanInUnit ( pomridic , un ) ;
9948: LD_VAR 0 7
9952: PPUSH
9953: LD_VAR 0 5
9957: PPUSH
9958: CALL_OW 52
// end else
9962: GO 9993
// begin pomridic = IsDrivenBy ( un ) ;
9964: LD_ADDR_VAR 0 7
9968: PUSH
9969: LD_VAR 0 5
9973: PPUSH
9974: CALL_OW 311
9978: ST_TO_ADDR
// SetSide ( pomridic , side ) ;
9979: LD_VAR 0 7
9983: PPUSH
9984: LD_VAR 0 1
9988: PPUSH
9989: CALL_OW 235
// end ; if IsDrivenBy ( un ) > 0 then
9993: LD_VAR 0 5
9997: PPUSH
9998: CALL_OW 311
10002: PUSH
10003: LD_INT 0
10005: GREATER
10006: IFFALSE 10027
// SetTag ( IsDrivenBy ( un ) , 0 ) else
10008: LD_VAR 0 5
10012: PPUSH
10013: CALL_OW 311
10017: PPUSH
10018: LD_INT 0
10020: PPUSH
10021: CALL_OW 109
10025: GO 10039
// SetTag ( un , 0 ) ;
10027: LD_VAR 0 5
10031: PPUSH
10032: LD_INT 0
10034: PPUSH
10035: CALL_OW 109
// PlaceUnitArea ( un , new_people , true ) ;
10039: LD_VAR 0 5
10043: PPUSH
10044: LD_INT 26
10046: PPUSH
10047: LD_INT 1
10049: PPUSH
10050: CALL_OW 49
// case pozice of 1 :
10054: LD_VAR 0 8
10058: PUSH
10059: LD_INT 1
10061: DOUBLE
10062: EQUAL
10063: IFTRUE 10067
10065: GO 10163
10067: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] diff un , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ;
10068: LD_ADDR_EXP 35
10072: PUSH
10073: LD_EXP 35
10077: PUSH
10078: LD_INT 1
10080: ARRAY
10081: PUSH
10082: LD_VAR 0 5
10086: DIFF
10087: PUSH
10088: LD_EXP 35
10092: PUSH
10093: LD_INT 2
10095: ARRAY
10096: PUSH
10097: LD_EXP 35
10101: PUSH
10102: LD_INT 3
10104: ARRAY
10105: PUSH
10106: LD_EXP 35
10110: PUSH
10111: LD_INT 4
10113: ARRAY
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: ST_TO_ADDR
// POINTY = [ [ ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] ] ;
10121: LD_ADDR_EXP 36
10125: PUSH
10126: EMPTY
10127: PUSH
10128: LD_EXP 36
10132: PUSH
10133: LD_INT 2
10135: ARRAY
10136: PUSH
10137: LD_EXP 36
10141: PUSH
10142: LD_INT 3
10144: ARRAY
10145: PUSH
10146: LD_EXP 36
10150: PUSH
10151: LD_INT 4
10153: ARRAY
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: ST_TO_ADDR
// end ; 2 :
10161: GO 10476
10163: LD_INT 2
10165: DOUBLE
10166: EQUAL
10167: IFTRUE 10171
10169: GO 10267
10171: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] diff un , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ;
10172: LD_ADDR_EXP 35
10176: PUSH
10177: LD_EXP 35
10181: PUSH
10182: LD_INT 1
10184: ARRAY
10185: PUSH
10186: LD_EXP 35
10190: PUSH
10191: LD_INT 2
10193: ARRAY
10194: PUSH
10195: LD_VAR 0 5
10199: DIFF
10200: PUSH
10201: LD_EXP 35
10205: PUSH
10206: LD_INT 3
10208: ARRAY
10209: PUSH
10210: LD_EXP 35
10214: PUSH
10215: LD_INT 4
10217: ARRAY
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , [ ] , POINTY [ 3 ] , POINTY [ 4 ] ] ;
10225: LD_ADDR_EXP 36
10229: PUSH
10230: LD_EXP 36
10234: PUSH
10235: LD_INT 1
10237: ARRAY
10238: PUSH
10239: EMPTY
10240: PUSH
10241: LD_EXP 36
10245: PUSH
10246: LD_INT 3
10248: ARRAY
10249: PUSH
10250: LD_EXP 36
10254: PUSH
10255: LD_INT 4
10257: ARRAY
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: ST_TO_ADDR
// end ; 3 :
10265: GO 10476
10267: LD_INT 3
10269: DOUBLE
10270: EQUAL
10271: IFTRUE 10275
10273: GO 10371
10275: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] diff un , ZMIZELI_LIDI [ 4 ] ] ;
10276: LD_ADDR_EXP 35
10280: PUSH
10281: LD_EXP 35
10285: PUSH
10286: LD_INT 1
10288: ARRAY
10289: PUSH
10290: LD_EXP 35
10294: PUSH
10295: LD_INT 2
10297: ARRAY
10298: PUSH
10299: LD_EXP 35
10303: PUSH
10304: LD_INT 3
10306: ARRAY
10307: PUSH
10308: LD_VAR 0 5
10312: DIFF
10313: PUSH
10314: LD_EXP 35
10318: PUSH
10319: LD_INT 4
10321: ARRAY
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , [ ] , POINTY [ 4 ] ] ;
10329: LD_ADDR_EXP 36
10333: PUSH
10334: LD_EXP 36
10338: PUSH
10339: LD_INT 1
10341: ARRAY
10342: PUSH
10343: LD_EXP 36
10347: PUSH
10348: LD_INT 2
10350: ARRAY
10351: PUSH
10352: EMPTY
10353: PUSH
10354: LD_EXP 36
10358: PUSH
10359: LD_INT 4
10361: ARRAY
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: ST_TO_ADDR
// end ; 4 :
10369: GO 10476
10371: LD_INT 4
10373: DOUBLE
10374: EQUAL
10375: IFTRUE 10379
10377: GO 10475
10379: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] diff un ] ;
10380: LD_ADDR_EXP 35
10384: PUSH
10385: LD_EXP 35
10389: PUSH
10390: LD_INT 1
10392: ARRAY
10393: PUSH
10394: LD_EXP 35
10398: PUSH
10399: LD_INT 2
10401: ARRAY
10402: PUSH
10403: LD_EXP 35
10407: PUSH
10408: LD_INT 3
10410: ARRAY
10411: PUSH
10412: LD_EXP 35
10416: PUSH
10417: LD_INT 4
10419: ARRAY
10420: PUSH
10421: LD_VAR 0 5
10425: DIFF
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] , [ ] ] ;
10433: LD_ADDR_EXP 36
10437: PUSH
10438: LD_EXP 36
10442: PUSH
10443: LD_INT 1
10445: ARRAY
10446: PUSH
10447: LD_EXP 36
10451: PUSH
10452: LD_INT 2
10454: ARRAY
10455: PUSH
10456: LD_EXP 36
10460: PUSH
10461: LD_INT 3
10463: ARRAY
10464: PUSH
10465: EMPTY
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: ST_TO_ADDR
// end ; end ;
10473: GO 10476
10475: POP
// wait ( 1 1$0 ) ;
10476: LD_INT 2100
10478: PPUSH
10479: CALL_OW 67
// end ;
10483: LD_VAR 0 3
10487: RET
// every 1 1$0 do var i , k ; var pom ; var barva ; var ZL ;
10488: GO 10490
10490: DISABLE
10491: LD_INT 0
10493: PPUSH
10494: PPUSH
10495: PPUSH
10496: PPUSH
10497: PPUSH
// begin for i := 1 to 4 do
10498: LD_ADDR_VAR 0 1
10502: PUSH
10503: DOUBLE
10504: LD_INT 1
10506: DEC
10507: ST_TO_ADDR
10508: LD_INT 4
10510: PUSH
10511: FOR_TO
10512: IFFALSE 10867
// if ZMIZELI_LIDI [ i ] < 5 then
10514: LD_EXP 35
10518: PUSH
10519: LD_VAR 0 1
10523: ARRAY
10524: PUSH
10525: LD_INT 5
10527: LESS
10528: IFFALSE 10865
// begin for k := 1 to 8 do
10530: LD_ADDR_VAR 0 2
10534: PUSH
10535: DOUBLE
10536: LD_INT 1
10538: DEC
10539: ST_TO_ADDR
10540: LD_INT 8
10542: PUSH
10543: FOR_TO
10544: IFFALSE 10578
// if Side_Positions [ k ] = i then
10546: LD_EXP 29
10550: PUSH
10551: LD_VAR 0 2
10555: ARRAY
10556: PUSH
10557: LD_VAR 0 1
10561: EQUAL
10562: IFFALSE 10576
// begin barva = k ;
10564: LD_ADDR_VAR 0 4
10568: PUSH
10569: LD_VAR 0 2
10573: ST_TO_ADDR
// break ;
10574: GO 10578
// end ;
10576: GO 10543
10578: POP
10579: POP
// if Prob ( 10 ) then
10580: LD_INT 10
10582: PPUSH
10583: CALL_OW 13
10587: IFFALSE 10606
// pom = vytvor_nove_auto ( barva ) else
10589: LD_ADDR_VAR 0 3
10593: PUSH
10594: LD_VAR 0 4
10598: PPUSH
10599: CALL 7017 0 1
10603: ST_TO_ADDR
10604: GO 10621
// pom = vytvor_noveho_cloveka ( barva ) ;
10606: LD_ADDR_VAR 0 3
10610: PUSH
10611: LD_VAR 0 4
10615: PPUSH
10616: CALL 6296 0 1
10620: ST_TO_ADDR
// ZL = ZMIZELI_LIDI [ i ] ^ pom ;
10621: LD_ADDR_VAR 0 5
10625: PUSH
10626: LD_EXP 35
10630: PUSH
10631: LD_VAR 0 1
10635: ARRAY
10636: PUSH
10637: LD_VAR 0 3
10641: ADD
10642: ST_TO_ADDR
// case i of 1 :
10643: LD_VAR 0 1
10647: PUSH
10648: LD_INT 1
10650: DOUBLE
10651: EQUAL
10652: IFTRUE 10656
10654: GO 10702
10656: POP
// ZMIZELI_LIDI = [ ZL , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 2 :
10657: LD_ADDR_EXP 35
10661: PUSH
10662: LD_VAR 0 5
10666: PUSH
10667: LD_EXP 35
10671: PUSH
10672: LD_INT 2
10674: ARRAY
10675: PUSH
10676: LD_EXP 35
10680: PUSH
10681: LD_INT 3
10683: ARRAY
10684: PUSH
10685: LD_EXP 35
10689: PUSH
10690: LD_INT 4
10692: ARRAY
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: ST_TO_ADDR
10700: GO 10865
10702: LD_INT 2
10704: DOUBLE
10705: EQUAL
10706: IFTRUE 10710
10708: GO 10756
10710: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZL , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 3 :
10711: LD_ADDR_EXP 35
10715: PUSH
10716: LD_EXP 35
10720: PUSH
10721: LD_INT 1
10723: ARRAY
10724: PUSH
10725: LD_VAR 0 5
10729: PUSH
10730: LD_EXP 35
10734: PUSH
10735: LD_INT 3
10737: ARRAY
10738: PUSH
10739: LD_EXP 35
10743: PUSH
10744: LD_INT 4
10746: ARRAY
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: ST_TO_ADDR
10754: GO 10865
10756: LD_INT 3
10758: DOUBLE
10759: EQUAL
10760: IFTRUE 10764
10762: GO 10810
10764: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZL , ZMIZELI_LIDI [ 4 ] ] ; 4 :
10765: LD_ADDR_EXP 35
10769: PUSH
10770: LD_EXP 35
10774: PUSH
10775: LD_INT 1
10777: ARRAY
10778: PUSH
10779: LD_EXP 35
10783: PUSH
10784: LD_INT 2
10786: ARRAY
10787: PUSH
10788: LD_VAR 0 5
10792: PUSH
10793: LD_EXP 35
10797: PUSH
10798: LD_INT 4
10800: ARRAY
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: ST_TO_ADDR
10808: GO 10865
10810: LD_INT 4
10812: DOUBLE
10813: EQUAL
10814: IFTRUE 10818
10816: GO 10864
10818: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZL ] ; end ;
10819: LD_ADDR_EXP 35
10823: PUSH
10824: LD_EXP 35
10828: PUSH
10829: LD_INT 1
10831: ARRAY
10832: PUSH
10833: LD_EXP 35
10837: PUSH
10838: LD_INT 2
10840: ARRAY
10841: PUSH
10842: LD_EXP 35
10846: PUSH
10847: LD_INT 3
10849: ARRAY
10850: PUSH
10851: LD_VAR 0 5
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: ST_TO_ADDR
10862: GO 10865
10864: POP
// end ;
10865: GO 10511
10867: POP
10868: POP
// enable ;
10869: ENABLE
// end ;
10870: PPOPN 5
10872: END
// every 0 0$3 do var i ; var poz ; var txt , text ;
10873: GO 10875
10875: DISABLE
10876: LD_INT 0
10878: PPUSH
10879: PPUSH
10880: PPUSH
10881: PPUSH
// begin for i := 1 to 8 do
10882: LD_ADDR_VAR 0 1
10886: PUSH
10887: DOUBLE
10888: LD_INT 1
10890: DEC
10891: ST_TO_ADDR
10892: LD_INT 8
10894: PUSH
10895: FOR_TO
10896: IFFALSE 10995
// begin poz = Side_Positions [ i ] ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_EXP 29
10907: PUSH
10908: LD_VAR 0 1
10912: ARRAY
10913: ST_TO_ADDR
// if poz > 0 and Your_Side = i then
10914: LD_VAR 0 2
10918: PUSH
10919: LD_INT 0
10921: GREATER
10922: PUSH
10923: LD_OWVAR 2
10927: PUSH
10928: LD_VAR 0 1
10932: EQUAL
10933: AND
10934: IFFALSE 10993
// begin txt = POINTY [ poz ] + 0 ;
10936: LD_ADDR_VAR 0 3
10940: PUSH
10941: LD_EXP 36
10945: PUSH
10946: LD_VAR 0 2
10950: ARRAY
10951: PUSH
10952: LD_INT 0
10954: PLUS
10955: ST_TO_ADDR
// text = txt &  of  & chance_find &  points found ;
10956: LD_ADDR_VAR 0 4
10960: PUSH
10961: LD_VAR 0 3
10965: PUSH
10966: LD_STRING  of 
10968: STR
10969: PUSH
10970: LD_EXP 25
10974: STR
10975: PUSH
10976: LD_STRING  points found
10978: STR
10979: ST_TO_ADDR
// ExtraStrings = [ text ] ;
10980: LD_ADDR_EXP 39
10984: PUSH
10985: LD_VAR 0 4
10989: PUSH
10990: EMPTY
10991: LIST
10992: ST_TO_ADDR
// end ; end ;
10993: GO 10895
10995: POP
10996: POP
// enable ;
10997: ENABLE
// end ;
10998: PPOPN 4
11000: END
// every 0 0$3 trigger chance_loose <> 0 do var i , j ; var pom , pom1 ; var apes ; var zo ; var dist ; var zmena ;
11001: LD_EXP 24
11005: PUSH
11006: LD_INT 0
11008: NONEQUAL
11009: IFFALSE 11582
11011: GO 11013
11013: DISABLE
11014: LD_INT 0
11016: PPUSH
11017: PPUSH
11018: PPUSH
11019: PPUSH
11020: PPUSH
11021: PPUSH
11022: PPUSH
11023: PPUSH
// begin apes = [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] ;
11024: LD_ADDR_VAR 0 5
11028: PUSH
11029: LD_INT 12
11031: PUSH
11032: LD_INT 16
11034: PUSH
11035: LD_INT 17
11037: PUSH
11038: LD_INT 15
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: ST_TO_ADDR
// for i := 1 to 8 do
11047: LD_ADDR_VAR 0 1
11051: PUSH
11052: DOUBLE
11053: LD_INT 1
11055: DEC
11056: ST_TO_ADDR
11057: LD_INT 8
11059: PUSH
11060: FOR_TO
11061: IFFALSE 11579
// begin case Side_Positions [ i ] of 1 :
11063: LD_EXP 29
11067: PUSH
11068: LD_VAR 0 1
11072: ARRAY
11073: PUSH
11074: LD_INT 1
11076: DOUBLE
11077: EQUAL
11078: IFTRUE 11082
11080: GO 11093
11082: POP
// zo = Base1 ; 2 :
11083: LD_ADDR_VAR 0 6
11087: PUSH
11088: LD_INT 27
11090: ST_TO_ADDR
11091: GO 11153
11093: LD_INT 2
11095: DOUBLE
11096: EQUAL
11097: IFTRUE 11101
11099: GO 11112
11101: POP
// zo = Base2 ; 3 :
11102: LD_ADDR_VAR 0 6
11106: PUSH
11107: LD_INT 28
11109: ST_TO_ADDR
11110: GO 11153
11112: LD_INT 3
11114: DOUBLE
11115: EQUAL
11116: IFTRUE 11120
11118: GO 11131
11120: POP
// zo = Base3 ; 4 :
11121: LD_ADDR_VAR 0 6
11125: PUSH
11126: LD_INT 29
11128: ST_TO_ADDR
11129: GO 11153
11131: LD_INT 4
11133: DOUBLE
11134: EQUAL
11135: IFTRUE 11139
11137: GO 11150
11139: POP
// zo = Base4 ; else
11140: LD_ADDR_VAR 0 6
11144: PUSH
11145: LD_INT 30
11147: ST_TO_ADDR
11148: GO 11153
11150: POP
// continue ; end ;
11151: GO 11060
// pom = FilterUnitsExceptArea ( zo , [ [ f_side , i ] , [ f_type , unit_human ] ] ) ;
11153: LD_ADDR_VAR 0 3
11157: PUSH
11158: LD_VAR 0 6
11162: PPUSH
11163: LD_INT 22
11165: PUSH
11166: LD_VAR 0 1
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: LD_INT 21
11177: PUSH
11178: LD_INT 1
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 71
11193: ST_TO_ADDR
// pom1 = FilterUnitsExceptArea ( zo , [ [ f_side , i ] , [ f_type , unit_vehicle ] ] ) ;
11194: LD_ADDR_VAR 0 4
11198: PUSH
11199: LD_VAR 0 6
11203: PPUSH
11204: LD_INT 22
11206: PUSH
11207: LD_VAR 0 1
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 21
11218: PUSH
11219: LD_INT 2
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PPUSH
11230: CALL_OW 71
11234: ST_TO_ADDR
// for j in pom1 do
11235: LD_ADDR_VAR 0 2
11239: PUSH
11240: LD_VAR 0 4
11244: PUSH
11245: FOR_IN
11246: IFFALSE 11286
// if IsDrivenBy ( j ) <> 0 then
11248: LD_VAR 0 2
11252: PPUSH
11253: CALL_OW 311
11257: PUSH
11258: LD_INT 0
11260: NONEQUAL
11261: IFFALSE 11284
// pom = pom ^ IsDrivenBy ( j ) ;
11263: LD_ADDR_VAR 0 3
11267: PUSH
11268: LD_VAR 0 3
11272: PUSH
11273: LD_VAR 0 2
11277: PPUSH
11278: CALL_OW 311
11282: ADD
11283: ST_TO_ADDR
11284: GO 11245
11286: POP
11287: POP
// for j in pom do
11288: LD_ADDR_VAR 0 2
11292: PUSH
11293: LD_VAR 0 3
11297: PUSH
11298: FOR_IN
11299: IFFALSE 11336
// if GetClass ( j ) in apes then
11301: LD_VAR 0 2
11305: PPUSH
11306: CALL_OW 257
11310: PUSH
11311: LD_VAR 0 5
11315: IN
11316: IFFALSE 11334
// pom = pom diff j ;
11318: LD_ADDR_VAR 0 3
11322: PUSH
11323: LD_VAR 0 3
11327: PUSH
11328: LD_VAR 0 2
11332: DIFF
11333: ST_TO_ADDR
11334: GO 11298
11336: POP
11337: POP
// for j in pom do
11338: LD_ADDR_VAR 0 2
11342: PUSH
11343: LD_VAR 0 3
11347: PUSH
11348: FOR_IN
11349: IFFALSE 11575
// begin dist = GetDistUnitArea ( j , zo ) ;
11351: LD_ADDR_VAR 0 7
11355: PUSH
11356: LD_VAR 0 2
11360: PPUSH
11361: LD_VAR 0 6
11365: PPUSH
11366: CALL_OW 299
11370: ST_TO_ADDR
// case dist of 1 .. 5 :
11371: LD_VAR 0 7
11375: PUSH
11376: LD_INT 1
11378: DOUBLE
11379: GREATEREQUAL
11380: IFFALSE 11388
11382: LD_INT 5
11384: DOUBLE
11385: LESSEQUAL
11386: IFTRUE 11390
11388: GO 11401
11390: POP
// zmena = 1 ; 5 .. 10 :
11391: LD_ADDR_VAR 0 8
11395: PUSH
11396: LD_INT 1
11398: ST_TO_ADDR
11399: GO 11510
11401: LD_INT 5
11403: DOUBLE
11404: GREATEREQUAL
11405: IFFALSE 11413
11407: LD_INT 10
11409: DOUBLE
11410: LESSEQUAL
11411: IFTRUE 11415
11413: GO 11426
11415: POP
// zmena = 2 ; 10 .. 15 :
11416: LD_ADDR_VAR 0 8
11420: PUSH
11421: LD_INT 2
11423: ST_TO_ADDR
11424: GO 11510
11426: LD_INT 10
11428: DOUBLE
11429: GREATEREQUAL
11430: IFFALSE 11438
11432: LD_INT 15
11434: DOUBLE
11435: LESSEQUAL
11436: IFTRUE 11440
11438: GO 11451
11440: POP
// zmena = 3 ; 15 .. 25 :
11441: LD_ADDR_VAR 0 8
11445: PUSH
11446: LD_INT 3
11448: ST_TO_ADDR
11449: GO 11510
11451: LD_INT 15
11453: DOUBLE
11454: GREATEREQUAL
11455: IFFALSE 11463
11457: LD_INT 25
11459: DOUBLE
11460: LESSEQUAL
11461: IFTRUE 11465
11463: GO 11476
11465: POP
// zmena = 4 ; 25 .. 35 :
11466: LD_ADDR_VAR 0 8
11470: PUSH
11471: LD_INT 4
11473: ST_TO_ADDR
11474: GO 11510
11476: LD_INT 25
11478: DOUBLE
11479: GREATEREQUAL
11480: IFFALSE 11488
11482: LD_INT 35
11484: DOUBLE
11485: LESSEQUAL
11486: IFTRUE 11490
11488: GO 11501
11490: POP
// zmena = 5 ; else
11491: LD_ADDR_VAR 0 8
11495: PUSH
11496: LD_INT 5
11498: ST_TO_ADDR
11499: GO 11510
11501: POP
// zmena = 6 ; end ;
11502: LD_ADDR_VAR 0 8
11506: PUSH
11507: LD_INT 6
11509: ST_TO_ADDR
// SetTag ( j , GetTag ( j ) + zmena ) ;
11510: LD_VAR 0 2
11514: PPUSH
11515: LD_VAR 0 2
11519: PPUSH
11520: CALL_OW 110
11524: PUSH
11525: LD_VAR 0 8
11529: PLUS
11530: PPUSH
11531: CALL_OW 109
// if GetTag ( j ) > chance_loose then
11535: LD_VAR 0 2
11539: PPUSH
11540: CALL_OW 110
11544: PUSH
11545: LD_EXP 24
11549: GREATER
11550: IFFALSE 11573
// begin SetTag ( j , 0 ) ;
11552: LD_VAR 0 2
11556: PPUSH
11557: LD_INT 0
11559: PPUSH
11560: CALL_OW 109
// odeber_jednotku ( j ) ;
11564: LD_VAR 0 2
11568: PPUSH
11569: CALL 11585 0 1
// end ; end ;
11573: GO 11348
11575: POP
11576: POP
// end ;
11577: GO 11060
11579: POP
11580: POP
// enable ;
11581: ENABLE
// end ;
11582: PPOPN 8
11584: END
// function odeber_jednotku ( jedn ) ; var pom ; begin
11585: LD_INT 0
11587: PPUSH
11588: PPUSH
// if IsInUnit ( jedn ) then
11589: LD_VAR 0 1
11593: PPUSH
11594: CALL_OW 310
11598: IFFALSE 11641
// if GetType ( IsInUnit ( jedn ) ) = unit_vehicle then
11600: LD_VAR 0 1
11604: PPUSH
11605: CALL_OW 310
11609: PPUSH
11610: CALL_OW 247
11614: PUSH
11615: LD_INT 2
11617: EQUAL
11618: IFFALSE 11641
// if def_vehicles_too then
11620: LD_EXP 15
11624: IFFALSE 11641
// jedn = IsInUnit ( jedn ) ;
11626: LD_ADDR_VAR 0 1
11630: PUSH
11631: LD_VAR 0 1
11635: PPUSH
11636: CALL_OW 310
11640: ST_TO_ADDR
// if def_other_nation and Prob ( 25 ) then
11641: LD_EXP 14
11645: PUSH
11646: LD_INT 25
11648: PPUSH
11649: CALL_OW 13
11653: AND
11654: IFFALSE 11674
// pom = Rand ( 1 , 4 ) else
11656: LD_ADDR_VAR 0 3
11660: PUSH
11661: LD_INT 1
11663: PPUSH
11664: LD_INT 4
11666: PPUSH
11667: CALL_OW 12
11671: ST_TO_ADDR
11672: GO 11695
// pom = Side_Positions [ GetSide ( jedn ) ] ;
11674: LD_ADDR_VAR 0 3
11678: PUSH
11679: LD_EXP 29
11683: PUSH
11684: LD_VAR 0 1
11688: PPUSH
11689: CALL_OW 255
11693: ARRAY
11694: ST_TO_ADDR
// case pom of 1 :
11695: LD_VAR 0 3
11699: PUSH
11700: LD_INT 1
11702: DOUBLE
11703: EQUAL
11704: IFTRUE 11708
11706: GO 11764
11708: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] ^ jedn , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 2 :
11709: LD_ADDR_EXP 35
11713: PUSH
11714: LD_EXP 35
11718: PUSH
11719: LD_INT 1
11721: ARRAY
11722: PUSH
11723: LD_VAR 0 1
11727: ADD
11728: PUSH
11729: LD_EXP 35
11733: PUSH
11734: LD_INT 2
11736: ARRAY
11737: PUSH
11738: LD_EXP 35
11742: PUSH
11743: LD_INT 3
11745: ARRAY
11746: PUSH
11747: LD_EXP 35
11751: PUSH
11752: LD_INT 4
11754: ARRAY
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: ST_TO_ADDR
11762: GO 11957
11764: LD_INT 2
11766: DOUBLE
11767: EQUAL
11768: IFTRUE 11772
11770: GO 11828
11772: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] ^ jedn , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 3 :
11773: LD_ADDR_EXP 35
11777: PUSH
11778: LD_EXP 35
11782: PUSH
11783: LD_INT 1
11785: ARRAY
11786: PUSH
11787: LD_EXP 35
11791: PUSH
11792: LD_INT 2
11794: ARRAY
11795: PUSH
11796: LD_VAR 0 1
11800: ADD
11801: PUSH
11802: LD_EXP 35
11806: PUSH
11807: LD_INT 3
11809: ARRAY
11810: PUSH
11811: LD_EXP 35
11815: PUSH
11816: LD_INT 4
11818: ARRAY
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: ST_TO_ADDR
11826: GO 11957
11828: LD_INT 3
11830: DOUBLE
11831: EQUAL
11832: IFTRUE 11836
11834: GO 11892
11836: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] ^ jedn , ZMIZELI_LIDI [ 4 ] ] ; 4 :
11837: LD_ADDR_EXP 35
11841: PUSH
11842: LD_EXP 35
11846: PUSH
11847: LD_INT 1
11849: ARRAY
11850: PUSH
11851: LD_EXP 35
11855: PUSH
11856: LD_INT 2
11858: ARRAY
11859: PUSH
11860: LD_EXP 35
11864: PUSH
11865: LD_INT 3
11867: ARRAY
11868: PUSH
11869: LD_VAR 0 1
11873: ADD
11874: PUSH
11875: LD_EXP 35
11879: PUSH
11880: LD_INT 4
11882: ARRAY
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: ST_TO_ADDR
11890: GO 11957
11892: LD_INT 4
11894: DOUBLE
11895: EQUAL
11896: IFTRUE 11900
11898: GO 11956
11900: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ^ jedn ] ; end ;
11901: LD_ADDR_EXP 35
11905: PUSH
11906: LD_EXP 35
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PUSH
11915: LD_EXP 35
11919: PUSH
11920: LD_INT 2
11922: ARRAY
11923: PUSH
11924: LD_EXP 35
11928: PUSH
11929: LD_INT 3
11931: ARRAY
11932: PUSH
11933: LD_EXP 35
11937: PUSH
11938: LD_INT 4
11940: ARRAY
11941: PUSH
11942: LD_VAR 0 1
11946: ADD
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: ST_TO_ADDR
11954: GO 11957
11956: POP
// RemoveUnit ( jedn ) ;
11957: LD_VAR 0 1
11961: PPUSH
11962: CALL_OW 64
// end ;
11966: LD_VAR 0 2
11970: RET
// every 0 0$5 trigger chance_loose <> 0 do var i , j ; var pom , pom1 ; var apes ; var zo ;
11971: LD_EXP 24
11975: PUSH
11976: LD_INT 0
11978: NONEQUAL
11979: IFFALSE 12366
11981: GO 11983
11983: DISABLE
11984: LD_INT 0
11986: PPUSH
11987: PPUSH
11988: PPUSH
11989: PPUSH
11990: PPUSH
11991: PPUSH
// begin apes = [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] ;
11992: LD_ADDR_VAR 0 5
11996: PUSH
11997: LD_INT 12
11999: PUSH
12000: LD_INT 16
12002: PUSH
12003: LD_INT 17
12005: PUSH
12006: LD_INT 15
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: ST_TO_ADDR
// for i := 1 to 8 do
12015: LD_ADDR_VAR 0 1
12019: PUSH
12020: DOUBLE
12021: LD_INT 1
12023: DEC
12024: ST_TO_ADDR
12025: LD_INT 8
12027: PUSH
12028: FOR_TO
12029: IFFALSE 12363
// begin case Side_Positions [ i ] of 1 :
12031: LD_EXP 29
12035: PUSH
12036: LD_VAR 0 1
12040: ARRAY
12041: PUSH
12042: LD_INT 1
12044: DOUBLE
12045: EQUAL
12046: IFTRUE 12050
12048: GO 12061
12050: POP
// zo = Base1 ; 2 :
12051: LD_ADDR_VAR 0 6
12055: PUSH
12056: LD_INT 27
12058: ST_TO_ADDR
12059: GO 12121
12061: LD_INT 2
12063: DOUBLE
12064: EQUAL
12065: IFTRUE 12069
12067: GO 12080
12069: POP
// zo = Base2 ; 3 :
12070: LD_ADDR_VAR 0 6
12074: PUSH
12075: LD_INT 28
12077: ST_TO_ADDR
12078: GO 12121
12080: LD_INT 3
12082: DOUBLE
12083: EQUAL
12084: IFTRUE 12088
12086: GO 12099
12088: POP
// zo = Base3 ; 4 :
12089: LD_ADDR_VAR 0 6
12093: PUSH
12094: LD_INT 29
12096: ST_TO_ADDR
12097: GO 12121
12099: LD_INT 4
12101: DOUBLE
12102: EQUAL
12103: IFTRUE 12107
12105: GO 12118
12107: POP
// zo = Base4 ; else
12108: LD_ADDR_VAR 0 6
12112: PUSH
12113: LD_INT 30
12115: ST_TO_ADDR
12116: GO 12121
12118: POP
// continue ; end ;
12119: GO 12028
// pom = FilterUnitsInArea ( zo , [ [ f_side , i ] , [ f_type , unit_human ] ] ) ;
12121: LD_ADDR_VAR 0 3
12125: PUSH
12126: LD_VAR 0 6
12130: PPUSH
12131: LD_INT 22
12133: PUSH
12134: LD_VAR 0 1
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 21
12145: PUSH
12146: LD_INT 1
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PPUSH
12157: CALL_OW 70
12161: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( zo , [ [ f_side , i ] , [ f_type , unit_vehicle ] ] ) ;
12162: LD_ADDR_VAR 0 4
12166: PUSH
12167: LD_VAR 0 6
12171: PPUSH
12172: LD_INT 22
12174: PUSH
12175: LD_VAR 0 1
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: LD_INT 21
12186: PUSH
12187: LD_INT 2
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PPUSH
12198: CALL_OW 70
12202: ST_TO_ADDR
// for j in pom1 do
12203: LD_ADDR_VAR 0 2
12207: PUSH
12208: LD_VAR 0 4
12212: PUSH
12213: FOR_IN
12214: IFFALSE 12254
// if IsDrivenBy ( j ) <> 0 then
12216: LD_VAR 0 2
12220: PPUSH
12221: CALL_OW 311
12225: PUSH
12226: LD_INT 0
12228: NONEQUAL
12229: IFFALSE 12252
// pom = pom ^ IsDrivenBy ( j ) ;
12231: LD_ADDR_VAR 0 3
12235: PUSH
12236: LD_VAR 0 3
12240: PUSH
12241: LD_VAR 0 2
12245: PPUSH
12246: CALL_OW 311
12250: ADD
12251: ST_TO_ADDR
12252: GO 12213
12254: POP
12255: POP
// for j in pom do
12256: LD_ADDR_VAR 0 2
12260: PUSH
12261: LD_VAR 0 3
12265: PUSH
12266: FOR_IN
12267: IFFALSE 12304
// if GetClass ( j ) in apes then
12269: LD_VAR 0 2
12273: PPUSH
12274: CALL_OW 257
12278: PUSH
12279: LD_VAR 0 5
12283: IN
12284: IFFALSE 12302
// pom = pom diff j ;
12286: LD_ADDR_VAR 0 3
12290: PUSH
12291: LD_VAR 0 3
12295: PUSH
12296: LD_VAR 0 2
12300: DIFF
12301: ST_TO_ADDR
12302: GO 12266
12304: POP
12305: POP
// for j in pom do
12306: LD_ADDR_VAR 0 2
12310: PUSH
12311: LD_VAR 0 3
12315: PUSH
12316: FOR_IN
12317: IFFALSE 12359
// if GetTag ( j ) > 0 then
12319: LD_VAR 0 2
12323: PPUSH
12324: CALL_OW 110
12328: PUSH
12329: LD_INT 0
12331: GREATER
12332: IFFALSE 12357
// SetTag ( j , GetTag ( j ) - 1 ) ;
12334: LD_VAR 0 2
12338: PPUSH
12339: LD_VAR 0 2
12343: PPUSH
12344: CALL_OW 110
12348: PUSH
12349: LD_INT 1
12351: MINUS
12352: PPUSH
12353: CALL_OW 109
12357: GO 12316
12359: POP
12360: POP
// end ;
12361: GO 12028
12363: POP
12364: POP
// enable ;
12365: ENABLE
// end ; end_of_file
12366: PPOPN 6
12368: END
// export function Init_Win_Condition ; begin
12369: LD_INT 0
12371: PPUSH
// disable ( 98 ) ;
12372: LD_INT 98
12374: DISABLE_MARKED
// disable ( 99 ) ;
12375: LD_INT 99
12377: DISABLE_MARKED
// if Team_Game then
12378: LD_EXP 31
12382: IFFALSE 12389
// enable ( 98 ) else
12384: LD_INT 98
12386: ENABLE_MARKED
12387: GO 12392
// enable ( 99 ) ;
12389: LD_INT 99
12391: ENABLE_MARKED
// end ;
12392: LD_VAR 0 1
12396: RET
// function CanWinLoose ; begin
12397: LD_INT 0
12399: PPUSH
// Result := true ;
12400: LD_ADDR_VAR 0 1
12404: PUSH
12405: LD_INT 1
12407: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12408: CALL_OW 518
12412: PUSH
12413: CALL_OW 519
12417: PUSH
12418: LD_INT 0
12420: GREATER
12421: AND
12422: IFFALSE 12432
// Result := false ;
12424: LD_ADDR_VAR 0 1
12428: PUSH
12429: LD_INT 0
12431: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12432: CALL_OW 531
12436: PUSH
12437: CALL_OW 519
12441: PUSH
12442: LD_INT 1
12444: GREATER
12445: AND
12446: IFFALSE 12456
// Result := false ;
12448: LD_ADDR_VAR 0 1
12452: PUSH
12453: LD_INT 0
12455: ST_TO_ADDR
// end ;
12456: LD_VAR 0 1
12460: RET
// function HasPower ( i ) ; begin
12461: LD_INT 0
12463: PPUSH
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12464: LD_ADDR_VAR 0 2
12468: PUSH
12469: LD_INT 22
12471: PUSH
12472: LD_VAR 0 1
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 2
12483: PUSH
12484: LD_INT 21
12486: PUSH
12487: LD_INT 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 33
12496: PUSH
12497: LD_INT 3
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 33
12506: PUSH
12507: LD_INT 5
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PPUSH
12524: CALL_OW 69
12528: ST_TO_ADDR
// end ;
12529: LD_VAR 0 2
12533: RET
// function AlliedSides ( i , j ) ; begin
12534: LD_INT 0
12536: PPUSH
// Result := false ;
12537: LD_ADDR_VAR 0 3
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
12545: LD_VAR 0 1
12549: PPUSH
12550: LD_VAR 0 2
12554: PPUSH
12555: CALL_OW 81
12559: PUSH
12560: LD_INT 1
12562: EQUAL
12563: PUSH
12564: LD_VAR 0 2
12568: PPUSH
12569: LD_VAR 0 1
12573: PPUSH
12574: CALL_OW 81
12578: PUSH
12579: LD_INT 1
12581: EQUAL
12582: AND
12583: PUSH
12584: LD_VAR 0 1
12588: PPUSH
12589: CALL_OW 83
12593: AND
12594: PUSH
12595: LD_VAR 0 2
12599: PPUSH
12600: CALL_OW 83
12604: AND
12605: IFFALSE 12615
// Result := true ;
12607: LD_ADDR_VAR 0 3
12611: PUSH
12612: LD_INT 1
12614: ST_TO_ADDR
// end ;
12615: LD_VAR 0 3
12619: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
12620: CALL 12397 0 0
12624: IFFALSE 12633
12626: GO 12628
12628: DISABLE
// YouLostInMultiplayer ;
12629: CALL_OW 107
12633: END
// every 0 0$3 trigger CanWinLoose marked 401 do
12634: CALL 12397 0 0
12638: IFFALSE 12662
12640: GO 12642
12642: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
12643: LD_EXP 30
12647: PUSH
12648: LD_OWVAR 2
12652: ARRAY
12653: PPUSH
12654: CALL 15674 0 1
// YouWinInMultiplayer ;
12658: CALL_OW 106
// end ;
12662: END
// every 0 0$3 marked 98 do var i , CanWin ;
12663: GO 12665
12665: DISABLE
12666: LD_INT 0
12668: PPUSH
12669: PPUSH
// begin if not HasPower ( your_side ) then
12670: LD_OWVAR 2
12674: PPUSH
12675: CALL 12461 0 1
12679: NOT
12680: IFFALSE 12691
// begin Multiplayer_Loose_Message ;
12682: CALL_OW 521
// enable ( 400 ) ;
12686: LD_INT 400
12688: ENABLE_MARKED
// end else
12689: GO 12824
// begin CanWin := true ;
12691: LD_ADDR_VAR 0 2
12695: PUSH
12696: LD_INT 1
12698: ST_TO_ADDR
// for i := 1 to 8 do
12699: LD_ADDR_VAR 0 1
12703: PUSH
12704: DOUBLE
12705: LD_INT 1
12707: DEC
12708: ST_TO_ADDR
12709: LD_INT 8
12711: PUSH
12712: FOR_TO
12713: IFFALSE 12810
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12715: LD_EXP 29
12719: PUSH
12720: LD_VAR 0 1
12724: ARRAY
12725: PUSH
12726: LD_VAR 0 1
12730: PPUSH
12731: CALL_OW 108
12735: AND
12736: PUSH
12737: LD_VAR 0 1
12741: PUSH
12742: LD_OWVAR 2
12746: NONEQUAL
12747: AND
12748: IFFALSE 12808
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
12750: LD_EXP 27
12754: PUSH
12755: LD_VAR 0 1
12759: ARRAY
12760: NOT
12761: PUSH
12762: LD_EXP 27
12766: PUSH
12767: LD_VAR 0 1
12771: ARRAY
12772: PUSH
12773: LD_EXP 27
12777: PUSH
12778: LD_OWVAR 2
12782: ARRAY
12783: NONEQUAL
12784: OR
12785: IFFALSE 12808
// if HasPower ( i ) then
12787: LD_VAR 0 1
12791: PPUSH
12792: CALL 12461 0 1
12796: IFFALSE 12808
// begin CanWin := false ;
12798: LD_ADDR_VAR 0 2
12802: PUSH
12803: LD_INT 0
12805: ST_TO_ADDR
// break ;
12806: GO 12810
// end ;
12808: GO 12712
12810: POP
12811: POP
// if CanWin then
12812: LD_VAR 0 2
12816: IFFALSE 12823
// enable ( 401 ) else
12818: LD_INT 401
12820: ENABLE_MARKED
12821: GO 12824
// enable ;
12823: ENABLE
// end ; end ;
12824: PPOPN 2
12826: END
// every 0 0$3 marked 99 do var i , CanWin ;
12827: GO 12829
12829: DISABLE
12830: LD_INT 0
12832: PPUSH
12833: PPUSH
// begin if not HasPower ( your_side ) then
12834: LD_OWVAR 2
12838: PPUSH
12839: CALL 12461 0 1
12843: NOT
12844: IFFALSE 12855
// begin Multiplayer_Loose_Message ;
12846: CALL_OW 521
// enable ( 400 ) ;
12850: LD_INT 400
12852: ENABLE_MARKED
// end else
12853: GO 12968
// begin CanWin := true ;
12855: LD_ADDR_VAR 0 2
12859: PUSH
12860: LD_INT 1
12862: ST_TO_ADDR
// for i := 1 to 8 do
12863: LD_ADDR_VAR 0 1
12867: PUSH
12868: DOUBLE
12869: LD_INT 1
12871: DEC
12872: ST_TO_ADDR
12873: LD_INT 8
12875: PUSH
12876: FOR_TO
12877: IFFALSE 12954
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12879: LD_EXP 29
12883: PUSH
12884: LD_VAR 0 1
12888: ARRAY
12889: PUSH
12890: LD_VAR 0 1
12894: PPUSH
12895: CALL_OW 108
12899: AND
12900: PUSH
12901: LD_VAR 0 1
12905: PUSH
12906: LD_OWVAR 2
12910: NONEQUAL
12911: AND
12912: IFFALSE 12952
// if not AlliedSides ( i , your_side ) then
12914: LD_VAR 0 1
12918: PPUSH
12919: LD_OWVAR 2
12923: PPUSH
12924: CALL 12534 0 2
12928: NOT
12929: IFFALSE 12952
// if HasPower ( i ) then
12931: LD_VAR 0 1
12935: PPUSH
12936: CALL 12461 0 1
12940: IFFALSE 12952
// begin CanWin := false ;
12942: LD_ADDR_VAR 0 2
12946: PUSH
12947: LD_INT 0
12949: ST_TO_ADDR
// break ;
12950: GO 12954
// end ;
12952: GO 12876
12954: POP
12955: POP
// if CanWin then
12956: LD_VAR 0 2
12960: IFFALSE 12967
// enable ( 401 ) else
12962: LD_INT 401
12964: ENABLE_MARKED
12965: GO 12968
// enable ;
12967: ENABLE
// end ; end ; end_of_file
12968: PPOPN 2
12970: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
12971: LD_INT 0
12973: PPUSH
12974: PPUSH
// for un in battle_flags_id do
12975: LD_ADDR_VAR 0 2
12979: PUSH
12980: LD_EXP 23
12984: PUSH
12985: FOR_IN
12986: IFFALSE 13061
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
12988: LD_VAR 0 2
12992: PPUSH
12993: LD_INT 1
12995: PUSH
12996: LD_LOC 6
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 2
13007: PUSH
13008: LD_LOC 6
13012: PUSH
13013: LD_INT 2
13015: DIV
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 3
13023: PUSH
13024: LD_LOC 6
13028: PUSH
13029: LD_INT 5
13031: DIV
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 20
13039: PUSH
13040: LD_LOC 6
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: PPUSH
13055: CALL_OW 423
13059: GO 12985
13061: POP
13062: POP
// end ;
13063: LD_VAR 0 1
13067: RET
// every 0 0$0.1 do var un ;
13068: GO 13070
13070: DISABLE
13071: LD_INT 0
13073: PPUSH
// begin if not def_morale_flags then
13074: LD_EXP 8
13078: NOT
13079: IFFALSE 13083
// exit ;
13081: GO 13160
// if not morale_decreasing_time then
13083: LD_EXP 22
13087: NOT
13088: IFFALSE 13092
// exit ;
13090: GO 13160
// strength = 100 ;
13092: LD_ADDR_LOC 6
13096: PUSH
13097: LD_INT 100
13099: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13100: LD_EXP 22
13104: PPUSH
13105: CALL_OW 67
// strength := strength - 1 ;
13109: LD_ADDR_LOC 6
13113: PUSH
13114: LD_LOC 6
13118: PUSH
13119: LD_INT 1
13121: MINUS
13122: ST_TO_ADDR
// Update_Flags ;
13123: CALL 12971 0 0
// until not strength ;
13127: LD_LOC 6
13131: NOT
13132: IFFALSE 13100
// for un in battle_flags_id do
13134: LD_ADDR_VAR 0 1
13138: PUSH
13139: LD_EXP 23
13143: PUSH
13144: FOR_IN
13145: IFFALSE 13158
// KillBattleFlag ( un ) ;
13147: LD_VAR 0 1
13151: PPUSH
13152: CALL_OW 419
13156: GO 13144
13158: POP
13159: POP
// end ; end_of_file
13160: PPOPN 1
13162: END
// export Game_Type , def_game_rules ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13163: LD_INT 0
13165: PPUSH
13166: PPUSH
// if ( not IAmSpec ) then
13167: CALL_OW 531
13171: NOT
13172: IFFALSE 13188
// Result := Limits_Info ^  ;
13174: LD_ADDR_VAR 0 1
13178: PUSH
13179: LD_LOC 18
13183: PUSH
13184: LD_STRING 
13186: ADD
13187: ST_TO_ADDR
// for i := 1 to 8 do
13188: LD_ADDR_VAR 0 2
13192: PUSH
13193: DOUBLE
13194: LD_INT 1
13196: DEC
13197: ST_TO_ADDR
13198: LD_INT 8
13200: PUSH
13201: FOR_TO
13202: IFFALSE 13247
// if Cheaters [ i ] then
13204: LD_LOC 19
13208: PUSH
13209: LD_VAR 0 2
13213: ARRAY
13214: IFFALSE 13245
// Result := Result ^ [ #Cheater , i , i ] ;
13216: LD_ADDR_VAR 0 1
13220: PUSH
13221: LD_VAR 0 1
13225: PUSH
13226: LD_STRING #Cheater
13228: PUSH
13229: LD_VAR 0 2
13233: PUSH
13234: LD_VAR 0 2
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: LIST
13243: ADD
13244: ST_TO_ADDR
13245: GO 13201
13247: POP
13248: POP
// end ;
13249: LD_VAR 0 1
13253: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
13254: LD_INT 0
13256: PPUSH
13257: PPUSH
13258: PPUSH
13259: PPUSH
13260: PPUSH
// case def_game_rules of 0 :
13261: LD_EXP 38
13265: PUSH
13266: LD_INT 0
13268: DOUBLE
13269: EQUAL
13270: IFTRUE 13274
13272: GO 13279
13274: POP
// exit ; 1 :
13275: GO 13604
13277: GO 13504
13279: LD_INT 1
13281: DOUBLE
13282: EQUAL
13283: IFTRUE 13287
13285: GO 13503
13287: POP
// begin def_base_level = 0 ;
13288: LD_ADDR_EXP 2
13292: PUSH
13293: LD_INT 0
13295: ST_TO_ADDR
// def_amount_of_people = 0 ;
13296: LD_ADDR_EXP 3
13300: PUSH
13301: LD_INT 0
13303: ST_TO_ADDR
// def_initial_level = 0 ;
13304: LD_ADDR_EXP 4
13308: PUSH
13309: LD_INT 0
13311: ST_TO_ADDR
// def_starting_resources = 1 ;
13312: LD_ADDR_EXP 5
13316: PUSH
13317: LD_INT 1
13319: ST_TO_ADDR
// def_shipments_density = 0 ;
13320: LD_ADDR_EXP 6
13324: PUSH
13325: LD_INT 0
13327: ST_TO_ADDR
// def_shared_vision = 1 ;
13328: LD_ADDR_EXP 7
13332: PUSH
13333: LD_INT 1
13335: ST_TO_ADDR
// def_morale_flags = 1 ;
13336: LD_ADDR_EXP 8
13340: PUSH
13341: LD_INT 1
13343: ST_TO_ADDR
// def_siberite_detection = 0 ;
13344: LD_ADDR_EXP 9
13348: PUSH
13349: LD_INT 0
13351: ST_TO_ADDR
// def_amount_of_apemen = 1 ;
13352: LD_ADDR_EXP 11
13356: PUSH
13357: LD_INT 1
13359: ST_TO_ADDR
// def_find_people = 0 ;
13360: LD_ADDR_EXP 12
13364: PUSH
13365: LD_INT 0
13367: ST_TO_ADDR
// def_lost_people = 0 ;
13368: LD_ADDR_EXP 13
13372: PUSH
13373: LD_INT 0
13375: ST_TO_ADDR
// def_second_oil = 0 ;
13376: LD_ADDR_EXP 10
13380: PUSH
13381: LD_INT 0
13383: ST_TO_ADDR
// def_other_nation = 0 ;
13384: LD_ADDR_EXP 14
13388: PUSH
13389: LD_INT 0
13391: ST_TO_ADDR
// def_vehicles_too = 0 ;
13392: LD_ADDR_EXP 15
13396: PUSH
13397: LD_INT 0
13399: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13400: LD_ADDR_VAR 0 2
13404: PUSH
13405: EMPTY
13406: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13407: LD_ADDR_VAR 0 3
13411: PUSH
13412: EMPTY
13413: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13414: LD_ADDR_LOC 13
13418: PUSH
13419: EMPTY
13420: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13421: LD_ADDR_LOC 14
13425: PUSH
13426: EMPTY
13427: ST_TO_ADDR
// Banned_Controls := [ ] ;
13428: LD_ADDR_LOC 15
13432: PUSH
13433: EMPTY
13434: ST_TO_ADDR
// Banned_Engines := [ ] ;
13435: LD_ADDR_LOC 16
13439: PUSH
13440: EMPTY
13441: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13442: LD_ADDR_LOC 11
13446: PUSH
13447: LD_INT 37
13449: PUSH
13450: EMPTY
13451: LIST
13452: PUSH
13453: LD_INT 4
13455: PUSH
13456: LD_INT 5
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 31
13465: PUSH
13466: LD_INT 32
13468: PUSH
13469: LD_INT 33
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: LIST
13481: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 , 3 ] ;
13482: LD_ADDR_LOC 12
13486: PUSH
13487: LD_INT 1
13489: PUSH
13490: LD_INT 1
13492: PUSH
13493: LD_INT 3
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: ST_TO_ADDR
// end ; end ;
13501: GO 13504
13503: POP
// for i := 1 to 8 do
13504: LD_ADDR_VAR 0 4
13508: PUSH
13509: DOUBLE
13510: LD_INT 1
13512: DEC
13513: ST_TO_ADDR
13514: LD_INT 8
13516: PUSH
13517: FOR_TO
13518: IFFALSE 13602
// if Side_Positions [ i ] then
13520: LD_EXP 29
13524: PUSH
13525: LD_VAR 0 4
13529: ARRAY
13530: IFFALSE 13600
// begin for j in Unavailable_Techs do
13532: LD_ADDR_VAR 0 5
13536: PUSH
13537: LD_VAR 0 2
13541: PUSH
13542: FOR_IN
13543: IFFALSE 13564
// SetTech ( j , i , 0 ) ;
13545: LD_VAR 0 5
13549: PPUSH
13550: LD_VAR 0 4
13554: PPUSH
13555: LD_INT 0
13557: PPUSH
13558: CALL_OW 322
13562: GO 13542
13564: POP
13565: POP
// for j in Unavailable_Builds do
13566: LD_ADDR_VAR 0 5
13570: PUSH
13571: LD_VAR 0 3
13575: PUSH
13576: FOR_IN
13577: IFFALSE 13598
// SetRestrict ( j , i , 0 ) ;
13579: LD_VAR 0 5
13583: PPUSH
13584: LD_VAR 0 4
13588: PPUSH
13589: LD_INT 0
13591: PPUSH
13592: CALL_OW 324
13596: GO 13576
13598: POP
13599: POP
// end ;
13600: GO 13517
13602: POP
13603: POP
// end ;
13604: LD_VAR 0 1
13608: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
13609: LD_INT 0
13611: PPUSH
13612: PPUSH
13613: PPUSH
13614: PPUSH
13615: PPUSH
13616: PPUSH
13617: PPUSH
// for i := 1 to Restricted_Builds do
13618: LD_ADDR_VAR 0 2
13622: PUSH
13623: DOUBLE
13624: LD_INT 1
13626: DEC
13627: ST_TO_ADDR
13628: LD_LOC 11
13632: PUSH
13633: FOR_TO
13634: IFFALSE 13944
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
13636: LD_LOC 11
13640: PUSH
13641: LD_VAR 0 2
13645: ARRAY
13646: PUSH
13647: LD_INT 1
13649: ARRAY
13650: PUSH
13651: LD_INT 31
13653: DOUBLE
13654: EQUAL
13655: IFTRUE 13671
13657: LD_INT 32
13659: DOUBLE
13660: EQUAL
13661: IFTRUE 13671
13663: LD_INT 33
13665: DOUBLE
13666: EQUAL
13667: IFTRUE 13671
13669: GO 13682
13671: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
13672: LD_ADDR_VAR 0 6
13676: PUSH
13677: LD_STRING #Turrets
13679: ST_TO_ADDR
13680: GO 13727
13682: LD_INT 4
13684: DOUBLE
13685: EQUAL
13686: IFTRUE 13696
13688: LD_INT 5
13690: DOUBLE
13691: EQUAL
13692: IFTRUE 13696
13694: GO 13707
13696: POP
// btype := #Armouries ; b_Behemoth :
13697: LD_ADDR_VAR 0 6
13701: PUSH
13702: LD_STRING #Armouries
13704: ST_TO_ADDR
13705: GO 13727
13707: LD_INT 37
13709: DOUBLE
13710: EQUAL
13711: IFTRUE 13715
13713: GO 13726
13715: POP
// btype := #Behemoths ; end ;
13716: LD_ADDR_VAR 0 6
13720: PUSH
13721: LD_STRING #Behemoths
13723: ST_TO_ADDR
13724: GO 13727
13726: POP
// list := [ ] ;
13727: LD_ADDR_VAR 0 7
13731: PUSH
13732: EMPTY
13733: ST_TO_ADDR
// for j := 1 to 8 do
13734: LD_ADDR_VAR 0 3
13738: PUSH
13739: DOUBLE
13740: LD_INT 1
13742: DEC
13743: ST_TO_ADDR
13744: LD_INT 8
13746: PUSH
13747: FOR_TO
13748: IFFALSE 13841
// if Side_Positions [ j ] then
13750: LD_EXP 29
13754: PUSH
13755: LD_VAR 0 3
13759: ARRAY
13760: IFFALSE 13839
// begin amount := 0 ;
13762: LD_ADDR_VAR 0 5
13766: PUSH
13767: LD_INT 0
13769: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
13770: LD_ADDR_VAR 0 4
13774: PUSH
13775: LD_LOC 11
13779: PUSH
13780: LD_VAR 0 2
13784: ARRAY
13785: PUSH
13786: FOR_IN
13787: IFFALSE 13835
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
13789: LD_ADDR_VAR 0 5
13793: PUSH
13794: LD_VAR 0 5
13798: PUSH
13799: LD_INT 22
13801: PUSH
13802: LD_VAR 0 3
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 30
13813: PUSH
13814: LD_VAR 0 4
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PPUSH
13827: CALL_OW 69
13831: PLUS
13832: ST_TO_ADDR
13833: GO 13786
13835: POP
13836: POP
// break ;
13837: GO 13841
// end ;
13839: GO 13747
13841: POP
13842: POP
// list := [ ] ;
13843: LD_ADDR_VAR 0 7
13847: PUSH
13848: EMPTY
13849: ST_TO_ADDR
// for j := 1 to 8 do
13850: LD_ADDR_VAR 0 3
13854: PUSH
13855: DOUBLE
13856: LD_INT 1
13858: DEC
13859: ST_TO_ADDR
13860: LD_INT 8
13862: PUSH
13863: FOR_TO
13864: IFFALSE 13884
// list := list ^ amount ;
13866: LD_ADDR_VAR 0 7
13870: PUSH
13871: LD_VAR 0 7
13875: PUSH
13876: LD_VAR 0 5
13880: ADD
13881: ST_TO_ADDR
13882: GO 13863
13884: POP
13885: POP
// Already_Built := Already_Built ^ [ list ] ;
13886: LD_ADDR_LOC 17
13890: PUSH
13891: LD_LOC 17
13895: PUSH
13896: LD_VAR 0 7
13900: PUSH
13901: EMPTY
13902: LIST
13903: ADD
13904: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13905: LD_ADDR_LOC 18
13909: PUSH
13910: LD_LOC 18
13914: PUSH
13915: LD_VAR 0 6
13919: PUSH
13920: LD_VAR 0 5
13924: PUSH
13925: LD_LOC 12
13929: PUSH
13930: LD_VAR 0 2
13934: ARRAY
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: LIST
13940: ADD
13941: ST_TO_ADDR
// end ;
13942: GO 13633
13944: POP
13945: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13946: LD_ADDR_LOC 19
13950: PUSH
13951: LD_INT 0
13953: PUSH
13954: LD_INT 0
13956: PUSH
13957: LD_INT 0
13959: PUSH
13960: LD_INT 0
13962: PUSH
13963: LD_INT 0
13965: PUSH
13966: LD_INT 0
13968: PUSH
13969: LD_INT 0
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: ST_TO_ADDR
// if Limits_Info then
13985: LD_LOC 18
13989: IFFALSE 14005
// Limits_Info := #Limits ^ Limits_Info ;
13991: LD_ADDR_LOC 18
13995: PUSH
13996: LD_STRING #Limits
13998: PUSH
13999: LD_LOC 18
14003: ADD
14004: ST_TO_ADDR
// end ;
14005: LD_VAR 0 1
14009: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
14010: LD_INT 0
14012: PPUSH
14013: PPUSH
14014: PPUSH
14015: PPUSH
// for i := 1 to Restricted_Builds do
14016: LD_ADDR_VAR 0 7
14020: PUSH
14021: DOUBLE
14022: LD_INT 1
14024: DEC
14025: ST_TO_ADDR
14026: LD_LOC 11
14030: PUSH
14031: FOR_TO
14032: IFFALSE 14455
// if BType in Restricted_Builds [ i ] then
14034: LD_VAR 0 2
14038: PUSH
14039: LD_LOC 11
14043: PUSH
14044: LD_VAR 0 7
14048: ARRAY
14049: IN
14050: IFFALSE 14453
// begin if old_side then
14052: LD_VAR 0 4
14056: IFFALSE 14182
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
14058: LD_LOC 17
14062: PUSH
14063: LD_VAR 0 7
14067: ARRAY
14068: PUSH
14069: LD_VAR 0 3
14073: ARRAY
14074: PUSH
14075: LD_VAR 0 5
14079: PLUS
14080: PUSH
14081: LD_LOC 12
14085: PUSH
14086: LD_VAR 0 7
14090: ARRAY
14091: GREATER
14092: IFFALSE 14118
// begin SetSide ( un , old_side ) ;
14094: LD_VAR 0 1
14098: PPUSH
14099: LD_VAR 0 4
14103: PPUSH
14104: CALL_OW 235
// count := 0 ;
14108: LD_ADDR_VAR 0 5
14112: PUSH
14113: LD_INT 0
14115: ST_TO_ADDR
// end else
14116: GO 14182
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
14118: LD_ADDR_LOC 17
14122: PUSH
14123: LD_LOC 17
14127: PPUSH
14128: LD_VAR 0 7
14132: PPUSH
14133: LD_LOC 17
14137: PUSH
14138: LD_VAR 0 7
14142: ARRAY
14143: PPUSH
14144: LD_VAR 0 4
14148: PPUSH
14149: LD_LOC 17
14153: PUSH
14154: LD_VAR 0 7
14158: ARRAY
14159: PUSH
14160: LD_VAR 0 4
14164: ARRAY
14165: PUSH
14166: LD_VAR 0 5
14170: MINUS
14171: PPUSH
14172: CALL_OW 1
14176: PPUSH
14177: CALL_OW 1
14181: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
14182: LD_ADDR_LOC 17
14186: PUSH
14187: LD_LOC 17
14191: PPUSH
14192: LD_VAR 0 7
14196: PPUSH
14197: LD_LOC 17
14201: PUSH
14202: LD_VAR 0 7
14206: ARRAY
14207: PPUSH
14208: LD_VAR 0 3
14212: PPUSH
14213: LD_LOC 17
14217: PUSH
14218: LD_VAR 0 7
14222: ARRAY
14223: PUSH
14224: LD_VAR 0 3
14228: ARRAY
14229: PUSH
14230: LD_VAR 0 5
14234: PLUS
14235: PPUSH
14236: CALL_OW 1
14240: PPUSH
14241: CALL_OW 1
14245: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
14246: LD_VAR 0 5
14250: PUSH
14251: LD_INT 0
14253: NONEQUAL
14254: PUSH
14255: LD_VAR 0 3
14259: PUSH
14260: LD_OWVAR 2
14264: EQUAL
14265: AND
14266: IFFALSE 14309
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
14268: LD_ADDR_LOC 18
14272: PUSH
14273: LD_LOC 18
14277: PPUSH
14278: LD_INT 3
14280: PUSH
14281: LD_VAR 0 7
14285: MUL
14286: PPUSH
14287: LD_LOC 17
14291: PUSH
14292: LD_VAR 0 7
14296: ARRAY
14297: PUSH
14298: LD_VAR 0 3
14302: ARRAY
14303: PPUSH
14304: CALL_OW 1
14308: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
14309: LD_LOC 17
14313: PUSH
14314: LD_VAR 0 7
14318: ARRAY
14319: PUSH
14320: LD_VAR 0 3
14324: ARRAY
14325: PUSH
14326: LD_LOC 12
14330: PUSH
14331: LD_VAR 0 7
14335: ARRAY
14336: GREATER
14337: IFFALSE 14364
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
14339: LD_ADDR_LOC 19
14343: PUSH
14344: LD_LOC 19
14348: PPUSH
14349: LD_VAR 0 3
14353: PPUSH
14354: LD_INT 1
14356: PPUSH
14357: CALL_OW 1
14361: ST_TO_ADDR
// end else
14362: GO 14451
// begin for j := 1 to Restricted_Builds do
14364: LD_ADDR_VAR 0 8
14368: PUSH
14369: DOUBLE
14370: LD_INT 1
14372: DEC
14373: ST_TO_ADDR
14374: LD_LOC 11
14378: PUSH
14379: FOR_TO
14380: IFFALSE 14424
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
14382: LD_LOC 17
14386: PUSH
14387: LD_VAR 0 8
14391: ARRAY
14392: PUSH
14393: LD_VAR 0 3
14397: ARRAY
14398: PUSH
14399: LD_LOC 12
14403: PUSH
14404: LD_VAR 0 8
14408: ARRAY
14409: GREATER
14410: IFFALSE 14422
// begin Is_Cheater := true ;
14412: LD_ADDR_VAR 0 9
14416: PUSH
14417: LD_INT 1
14419: ST_TO_ADDR
// break ;
14420: GO 14424
// end ;
14422: GO 14379
14424: POP
14425: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
14426: LD_ADDR_LOC 19
14430: PUSH
14431: LD_LOC 19
14435: PPUSH
14436: LD_VAR 0 3
14440: PPUSH
14441: LD_VAR 0 9
14445: PPUSH
14446: CALL_OW 1
14450: ST_TO_ADDR
// end ; break ;
14451: GO 14455
// end ;
14453: GO 14031
14455: POP
14456: POP
// end ;
14457: LD_VAR 0 6
14461: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
14462: LD_VAR 0 5
14466: PUSH
14467: LD_LOC 13
14471: IN
14472: PUSH
14473: LD_VAR 0 2
14477: PUSH
14478: LD_LOC 14
14482: IN
14483: OR
14484: PUSH
14485: LD_VAR 0 4
14489: PUSH
14490: LD_LOC 15
14494: IN
14495: OR
14496: PUSH
14497: LD_VAR 0 3
14501: PUSH
14502: LD_LOC 16
14506: IN
14507: OR
14508: IFFALSE 14519
// ComCancel ( factory ) ;
14510: LD_VAR 0 1
14514: PPUSH
14515: CALL_OW 127
// end ;
14519: PPOPN 5
14521: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
14522: LD_VAR 0 2
14526: PUSH
14527: LD_LOC 13
14531: IN
14532: IFFALSE 14543
// ComCancel ( building ) ;
14534: LD_VAR 0 1
14538: PPUSH
14539: CALL_OW 127
// end ; end_of_file
14543: PPOPN 2
14545: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
14546: LD_INT 0
14548: PPUSH
14549: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
14550: LD_ADDR_VAR 0 2
14554: PUSH
14555: LD_STRING #Multi1x1-Time
14557: PUSH
14558: LD_OWVAR 1
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: ST_TO_ADDR
// if ( ExtraStrings ) then
14567: LD_EXP 39
14571: IFFALSE 14593
// AllStrings := AllStrings ^  ^ ExtraStrings ;
14573: LD_ADDR_VAR 0 2
14577: PUSH
14578: LD_VAR 0 2
14582: PUSH
14583: LD_STRING 
14585: ADD
14586: PUSH
14587: LD_EXP 39
14591: ADD
14592: ST_TO_ADDR
// if ( LimitsStrings ) then
14593: CALL 13163 0 0
14597: IFFALSE 14619
// AllStrings := AllStrings ^  ^ LimitsStrings ;
14599: LD_ADDR_VAR 0 2
14603: PUSH
14604: LD_VAR 0 2
14608: PUSH
14609: LD_STRING 
14611: ADD
14612: PUSH
14613: CALL 13163 0 0
14617: ADD
14618: ST_TO_ADDR
// Display_Strings := AllStrings ;
14619: LD_ADDR_OWVAR 47
14623: PUSH
14624: LD_VAR 0 2
14628: ST_TO_ADDR
// end ;
14629: LD_VAR 0 1
14633: RET
// every 0 0$1 do
14634: GO 14636
14636: DISABLE
// begin ShowTimer ;
14637: CALL 14546 0 0
// enable ;
14641: ENABLE
// end ; end_of_file
14642: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
14643: GO 14645
14645: DISABLE
14646: LD_INT 0
14648: PPUSH
// begin _apemenIncrement := 0 ;
14649: LD_ADDR_LOC 20
14653: PUSH
14654: LD_INT 0
14656: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
14657: LD_ADDR_LOC 22
14661: PUSH
14662: LD_INT 0
14664: ST_TO_ADDR
// _isSpawning := true ;
14665: LD_ADDR_LOC 24
14669: PUSH
14670: LD_INT 1
14672: ST_TO_ADDR
// _wildApemenAmount := 0 ;
14673: LD_ADDR_LOC 25
14677: PUSH
14678: LD_INT 0
14680: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
14681: LD_ADDR_VAR 0 1
14685: PUSH
14686: LD_EXP 29
14690: PUSH
14691: LD_INT 0
14693: PUSH
14694: EMPTY
14695: LIST
14696: DIFF
14697: PUSH
14698: FOR_IN
14699: IFFALSE 14717
// _apemenIncrement := _apemenIncrement + 1 ;
14701: LD_ADDR_LOC 20
14705: PUSH
14706: LD_LOC 20
14710: PUSH
14711: LD_INT 1
14713: PLUS
14714: ST_TO_ADDR
14715: GO 14698
14717: POP
14718: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
14719: LD_ADDR_LOC 21
14723: PUSH
14724: LD_LOC 20
14728: PUSH
14729: LD_EXP 26
14733: MUL
14734: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
14735: LD_ADDR_LOC 23
14739: PUSH
14740: LD_LOC 21
14744: PUSH
14745: LD_INT 2
14747: DIVREAL
14748: ST_TO_ADDR
// prepare_apemen ;
14749: CALL 14841 0 0
// end ;
14753: PPOPN 1
14755: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
14756: CALL 14763 0 0
// end ;
14760: PPOPN 2
14762: END
// export function CheckApemenAmount ; begin
14763: LD_INT 0
14765: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
14766: LD_ADDR_LOC 25
14770: PUSH
14771: LD_LOC 25
14775: PUSH
14776: LD_INT 1
14778: MINUS
14779: ST_TO_ADDR
// if _isSpawning then
14780: LD_LOC 24
14784: IFFALSE 14788
// exit ;
14786: GO 14836
// if _wildApemenAmount <= ( _apemenThreshold ) then
14788: LD_LOC 25
14792: PUSH
14793: LD_LOC 23
14797: LESSEQUAL
14798: IFFALSE 14836
// begin if _apemenSkillLevel < 8 then
14800: LD_LOC 22
14804: PUSH
14805: LD_INT 8
14807: LESS
14808: IFFALSE 14824
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
14810: LD_ADDR_LOC 22
14814: PUSH
14815: LD_LOC 22
14819: PUSH
14820: LD_INT 1
14822: PLUS
14823: ST_TO_ADDR
// _isSpawning := true ;
14824: LD_ADDR_LOC 24
14828: PUSH
14829: LD_INT 1
14831: ST_TO_ADDR
// prepare_apemen ;
14832: CALL 14841 0 0
// end ; end ;
14836: LD_VAR 0 1
14840: RET
// function prepare_apemen ; var i ; begin
14841: LD_INT 0
14843: PPUSH
14844: PPUSH
// if not amount_of_apemen then
14845: LD_EXP 26
14849: NOT
14850: IFFALSE 14854
// exit ;
14852: GO 15033
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
14854: LD_INT 1050
14856: PPUSH
14857: LD_INT 3150
14859: PPUSH
14860: CALL_OW 12
14864: PPUSH
14865: CALL_OW 67
// apeman_init ;
14869: CALL 15038 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
14873: LD_ADDR_VAR 0 2
14877: PUSH
14878: LD_EXP 29
14882: PUSH
14883: LD_INT 0
14885: PUSH
14886: EMPTY
14887: LIST
14888: DIFF
14889: PUSH
14890: FOR_IN
14891: IFFALSE 14995
// begin if i = 1 then
14893: LD_VAR 0 2
14897: PUSH
14898: LD_INT 1
14900: EQUAL
14901: IFFALSE 14918
// PlaceUnitArea ( CreateHuman , op1 , false ) ;
14903: CALL_OW 44
14907: PPUSH
14908: LD_INT 31
14910: PPUSH
14911: LD_INT 0
14913: PPUSH
14914: CALL_OW 49
// if i = 2 then
14918: LD_VAR 0 2
14922: PUSH
14923: LD_INT 2
14925: EQUAL
14926: IFFALSE 14943
// PlaceUnitArea ( CreateHuman , op2 , false ) ;
14928: CALL_OW 44
14932: PPUSH
14933: LD_INT 32
14935: PPUSH
14936: LD_INT 0
14938: PPUSH
14939: CALL_OW 49
// if i = 3 then
14943: LD_VAR 0 2
14947: PUSH
14948: LD_INT 3
14950: EQUAL
14951: IFFALSE 14968
// PlaceUnitArea ( CreateHuman , op3 , false ) ;
14953: CALL_OW 44
14957: PPUSH
14958: LD_INT 33
14960: PPUSH
14961: LD_INT 0
14963: PPUSH
14964: CALL_OW 49
// if i = 4 then
14968: LD_VAR 0 2
14972: PUSH
14973: LD_INT 4
14975: EQUAL
14976: IFFALSE 14993
// PlaceUnitArea ( CreateHuman , op4 , false ) ;
14978: CALL_OW 44
14982: PPUSH
14983: LD_INT 34
14985: PPUSH
14986: LD_INT 0
14988: PPUSH
14989: CALL_OW 49
// end ;
14993: GO 14890
14995: POP
14996: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
14997: LD_ADDR_LOC 25
15001: PUSH
15002: LD_LOC 25
15006: PUSH
15007: LD_LOC 20
15011: PLUS
15012: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
15013: LD_LOC 25
15017: PUSH
15018: LD_LOC 21
15022: GREATEREQUAL
15023: IFFALSE 14854
// _isSpawning := false ;
15025: LD_ADDR_LOC 24
15029: PUSH
15030: LD_INT 0
15032: ST_TO_ADDR
// end ;
15033: LD_VAR 0 1
15037: RET
// function apeman_init ; var ape_names ; begin
15038: LD_INT 0
15040: PPUSH
15041: PPUSH
// ape_names = [ Tupoun , Opoce , Opka , Butrus , Bubu , Condor , Kuklajs , Simon , Ugh , Urgh , Argh , Aargh , Hrumph , Grumph , Oorg , Eghrr , Rrrr , Bark , Wraughrr , :-) , Semik , Hrgh , Hur , Havran , Nazghul , Brutal , Kato Zluta Opoce , Monkey , Yeargh , Marta , Batman , Barkman , Xcenovsk , David Love , Freon , Stoupik , Quik , Jam Prckovic Laren , CFC , Kvakous , Sumys , Agent , Nazghul , Havran , Vrana , Havranek , Carlos Frank , Tekar , Andy , Angela , Janina , Shipanze , Simpan , Nazghulik , Potrusil , Potrus , Butrus , Potrusil , Simon , Auuu , NEMO , Silena opice , Meuznenapadazadnejmeno , Uhrun , Marmelada , Negr , Fnuk , Slim , Kvak , Dave , Bruntal , Arnie , Polda , Jen , Siddha , Silnickar , Bukvice , Zalud , Elvis , Nazghul , Chruadfa , Nazghul , Kato Yellow Ape , Cpt. Ape , King Of The Hill , Pterinochilus , Bad Platypus , Really Bad Ape , Looser , Looser , Looser , Megadeth , Mad Ape , Wraughhhh , ":) ] ;
15042: LD_ADDR_VAR 0 2
15046: PUSH
15047: LD_STRING Tupoun
15049: PUSH
15050: LD_STRING Opoce
15052: PUSH
15053: LD_STRING Opka
15055: PUSH
15056: LD_STRING Butrus
15058: PUSH
15059: LD_STRING Bubu
15061: PUSH
15062: LD_STRING Condor
15064: PUSH
15065: LD_STRING Kuklajs
15067: PUSH
15068: LD_STRING Simon
15070: PUSH
15071: LD_STRING Ugh
15073: PUSH
15074: LD_STRING Urgh
15076: PUSH
15077: LD_STRING Argh
15079: PUSH
15080: LD_STRING Aargh
15082: PUSH
15083: LD_STRING Hrumph
15085: PUSH
15086: LD_STRING Grumph
15088: PUSH
15089: LD_STRING Oorg
15091: PUSH
15092: LD_STRING Eghrr
15094: PUSH
15095: LD_STRING Rrrr
15097: PUSH
15098: LD_STRING Bark
15100: PUSH
15101: LD_STRING Wraughrr
15103: PUSH
15104: LD_STRING :-)
15106: PUSH
15107: LD_STRING Semik
15109: PUSH
15110: LD_STRING Hrgh
15112: PUSH
15113: LD_STRING Hur
15115: PUSH
15116: LD_STRING Havran
15118: PUSH
15119: LD_STRING Nazghul
15121: PUSH
15122: LD_STRING Brutal
15124: PUSH
15125: LD_STRING Kato Zluta Opoce
15127: PUSH
15128: LD_STRING Monkey
15130: PUSH
15131: LD_STRING Yeargh
15133: PUSH
15134: LD_STRING Marta
15136: PUSH
15137: LD_STRING Batman
15139: PUSH
15140: LD_STRING Barkman
15142: PUSH
15143: LD_STRING Xcenovsk
15145: PUSH
15146: LD_STRING David Love
15148: PUSH
15149: LD_STRING Freon
15151: PUSH
15152: LD_STRING Stoupik
15154: PUSH
15155: LD_STRING Quik
15157: PUSH
15158: LD_STRING Jam Prckovic Laren
15160: PUSH
15161: LD_STRING CFC
15163: PUSH
15164: LD_STRING Kvakous
15166: PUSH
15167: LD_STRING Sumys
15169: PUSH
15170: LD_STRING Agent
15172: PUSH
15173: LD_STRING Nazghul
15175: PUSH
15176: LD_STRING Havran
15178: PUSH
15179: LD_STRING Vrana
15181: PUSH
15182: LD_STRING Havranek
15184: PUSH
15185: LD_STRING Carlos Frank
15187: PUSH
15188: LD_STRING Tekar
15190: PUSH
15191: LD_STRING Andy
15193: PUSH
15194: LD_STRING Angela
15196: PUSH
15197: LD_STRING Janina
15199: PUSH
15200: LD_STRING Shipanze
15202: PUSH
15203: LD_STRING Simpan
15205: PUSH
15206: LD_STRING Nazghulik
15208: PUSH
15209: LD_STRING Potrusil
15211: PUSH
15212: LD_STRING Potrus
15214: PUSH
15215: LD_STRING Butrus
15217: PUSH
15218: LD_STRING Potrusil
15220: PUSH
15221: LD_STRING Simon
15223: PUSH
15224: LD_STRING Auuu
15226: PUSH
15227: LD_STRING NEMO
15229: PUSH
15230: LD_STRING Silena opice
15232: PUSH
15233: LD_STRING Meuznenapadazadnejmeno
15235: PUSH
15236: LD_STRING Uhrun
15238: PUSH
15239: LD_STRING Marmelada
15241: PUSH
15242: LD_STRING Negr
15244: PUSH
15245: LD_STRING Fnuk
15247: PUSH
15248: LD_STRING Slim
15250: PUSH
15251: LD_STRING Kvak
15253: PUSH
15254: LD_STRING Dave
15256: PUSH
15257: LD_STRING Bruntal
15259: PUSH
15260: LD_STRING Arnie
15262: PUSH
15263: LD_STRING Polda
15265: PUSH
15266: LD_STRING Jen
15268: PUSH
15269: LD_STRING Siddha
15271: PUSH
15272: LD_STRING Silnickar
15274: PUSH
15275: LD_STRING Bukvice
15277: PUSH
15278: LD_STRING Zalud
15280: PUSH
15281: LD_STRING Elvis
15283: PUSH
15284: LD_STRING Nazghul
15286: PUSH
15287: LD_STRING Chruadfa
15289: PUSH
15290: LD_STRING Nazghul
15292: PUSH
15293: LD_STRING Kato Yellow Ape
15295: PUSH
15296: LD_STRING Cpt. Ape
15298: PUSH
15299: LD_STRING King Of The Hill
15301: PUSH
15302: LD_STRING Pterinochilus
15304: PUSH
15305: LD_STRING Bad Platypus
15307: PUSH
15308: LD_STRING Really Bad Ape
15310: PUSH
15311: LD_STRING Looser
15313: PUSH
15314: LD_STRING Looser
15316: PUSH
15317: LD_STRING Looser
15319: PUSH
15320: LD_STRING Megadeth
15322: PUSH
15323: LD_STRING Mad Ape
15325: PUSH
15326: LD_STRING Wraughhhh
15328: PUSH
15329: LD_STRING ":)
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: ST_TO_ADDR
// uc_side := 0 ;
15429: LD_ADDR_OWVAR 20
15433: PUSH
15434: LD_INT 0
15436: ST_TO_ADDR
// uc_nation := nation_nature ;
15437: LD_ADDR_OWVAR 21
15441: PUSH
15442: LD_INT 0
15444: ST_TO_ADDR
// hc_class := class_apeman ;
15445: LD_ADDR_OWVAR 28
15449: PUSH
15450: LD_INT 12
15452: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
15453: LD_ADDR_OWVAR 30
15457: PUSH
15458: LD_INT 2
15460: PUSH
15461: LD_INT 2
15463: PUSH
15464: LD_INT 2
15466: PUSH
15467: LD_INT 2
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
15476: LD_ADDR_OWVAR 31
15480: PUSH
15481: LD_INT 0
15483: PPUSH
15484: LD_INT 2
15486: PPUSH
15487: CALL_OW 12
15491: PUSH
15492: LD_LOC 22
15496: PLUS
15497: PUSH
15498: LD_INT 0
15500: PPUSH
15501: LD_INT 2
15503: PPUSH
15504: CALL_OW 12
15508: PUSH
15509: LD_LOC 22
15513: PLUS
15514: PUSH
15515: LD_INT 0
15517: PPUSH
15518: LD_INT 2
15520: PPUSH
15521: CALL_OW 12
15525: PUSH
15526: LD_LOC 22
15530: PLUS
15531: PUSH
15532: LD_INT 0
15534: PPUSH
15535: LD_INT 2
15537: PPUSH
15538: CALL_OW 12
15542: PUSH
15543: LD_LOC 22
15547: PLUS
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
15555: LD_ADDR_OWVAR 29
15559: PUSH
15560: LD_INT 10
15562: PUSH
15563: LD_INT 12
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: ST_TO_ADDR
// hc_sex := sex_male ;
15570: LD_ADDR_OWVAR 27
15574: PUSH
15575: LD_INT 1
15577: ST_TO_ADDR
// hc_name := ape_names [ Rand ( 1 , ape_names ) ] ;
15578: LD_ADDR_OWVAR 26
15582: PUSH
15583: LD_VAR 0 2
15587: PUSH
15588: LD_INT 1
15590: PPUSH
15591: LD_VAR 0 2
15595: PPUSH
15596: CALL_OW 12
15600: ARRAY
15601: ST_TO_ADDR
// hc_importance := 0 ;
15602: LD_ADDR_OWVAR 32
15606: PUSH
15607: LD_INT 0
15609: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
15610: LD_ADDR_OWVAR 35
15614: PUSH
15615: LD_INT 20
15617: NEG
15618: PPUSH
15619: LD_INT 20
15621: PPUSH
15622: CALL_OW 12
15626: ST_TO_ADDR
// end ; end_of_file
15627: LD_VAR 0 1
15631: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
15632: LD_INT 0
15634: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
15635: LD_VAR 0 1
15639: PPUSH
15640: CALL_OW 255
15644: PUSH
15645: LD_VAR 0 4
15649: EQUAL
15650: IFFALSE 15669
// begin SetAchievement ( ACH_RAD ) ;
15652: LD_STRING ACH_RAD
15654: PPUSH
15655: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
15659: LD_STRING ACH_NL
15661: PPUSH
15662: LD_INT 1
15664: PPUSH
15665: CALL_OW 564
// end end ;
15669: LD_VAR 0 5
15673: RET
// export function SA_Win ( side ) ; begin
15674: LD_INT 0
15676: PPUSH
// case side of 1 :
15677: LD_VAR 0 1
15681: PUSH
15682: LD_INT 1
15684: DOUBLE
15685: EQUAL
15686: IFTRUE 15690
15688: GO 15703
15690: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
15691: LD_STRING ACH_AH
15693: PPUSH
15694: LD_INT 1
15696: PPUSH
15697: CALL_OW 564
15701: GO 15866
15703: LD_INT 2
15705: DOUBLE
15706: EQUAL
15707: IFTRUE 15711
15709: GO 15724
15711: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
15712: LD_STRING ACH_E
15714: PPUSH
15715: LD_INT 1
15717: PPUSH
15718: CALL_OW 564
15722: GO 15866
15724: LD_INT 3
15726: DOUBLE
15727: EQUAL
15728: IFTRUE 15732
15730: GO 15745
15732: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
15733: LD_STRING ACH_OOL
15735: PPUSH
15736: LD_INT 1
15738: PPUSH
15739: CALL_OW 564
15743: GO 15866
15745: LD_INT 1
15747: PUSH
15748: LD_INT 2
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: DOUBLE
15755: EQUAL
15756: IFTRUE 15760
15758: GO 15785
15760: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15761: LD_STRING ACH_AH
15763: PPUSH
15764: LD_REAL  5.00000000000000E-0001
15767: PPUSH
15768: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15772: LD_STRING ACH_E
15774: PPUSH
15775: LD_REAL  5.00000000000000E-0001
15778: PPUSH
15779: CALL_OW 564
// end ; [ 2 , 3 ] :
15783: GO 15866
15785: LD_INT 2
15787: PUSH
15788: LD_INT 3
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: DOUBLE
15795: EQUAL
15796: IFTRUE 15800
15798: GO 15825
15800: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
15801: LD_STRING ACH_OOL
15803: PPUSH
15804: LD_REAL  5.00000000000000E-0001
15807: PPUSH
15808: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15812: LD_STRING ACH_E
15814: PPUSH
15815: LD_REAL  5.00000000000000E-0001
15818: PPUSH
15819: CALL_OW 564
// end ; [ 3 , 1 ] :
15823: GO 15866
15825: LD_INT 3
15827: PUSH
15828: LD_INT 1
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: DOUBLE
15835: EQUAL
15836: IFTRUE 15840
15838: GO 15865
15840: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15841: LD_STRING ACH_AH
15843: PPUSH
15844: LD_REAL  5.00000000000000E-0001
15847: PPUSH
15848: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
15852: LD_STRING ACH_OOL
15854: PPUSH
15855: LD_REAL  5.00000000000000E-0001
15858: PPUSH
15859: CALL_OW 564
// end ; end ;
15863: GO 15866
15865: POP
// end ; end_of_file
15866: LD_VAR 0 2
15870: RET
// export function SetMpTechs ( ) ; var side , i ; begin
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
15875: PPUSH
// for side = 1 to 8 do
15876: LD_ADDR_VAR 0 2
15880: PUSH
15881: DOUBLE
15882: LD_INT 1
15884: DEC
15885: ST_TO_ADDR
15886: LD_INT 8
15888: PUSH
15889: FOR_TO
15890: IFFALSE 16011
// begin for i = 1 to 72 do
15892: LD_ADDR_VAR 0 3
15896: PUSH
15897: DOUBLE
15898: LD_INT 1
15900: DEC
15901: ST_TO_ADDR
15902: LD_INT 72
15904: PUSH
15905: FOR_TO
15906: IFFALSE 15937
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15908: LD_VAR 0 3
15912: PPUSH
15913: LD_VAR 0 2
15917: PPUSH
15918: LD_INT 0
15920: PPUSH
15921: LD_VAR 0 3
15925: PPUSH
15926: CALL_OW 565
15930: PPUSH
15931: CALL_OW 322
15935: GO 15905
15937: POP
15938: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15939: LD_INT 73
15941: PPUSH
15942: LD_VAR 0 2
15946: PPUSH
15947: LD_INT 0
15949: PPUSH
15950: LD_INT 25
15952: PPUSH
15953: CALL_OW 565
15957: PPUSH
15958: CALL_OW 322
// for i = 0 to 40 do
15962: LD_ADDR_VAR 0 3
15966: PUSH
15967: DOUBLE
15968: LD_INT 0
15970: DEC
15971: ST_TO_ADDR
15972: LD_INT 40
15974: PUSH
15975: FOR_TO
15976: IFFALSE 16007
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15978: LD_VAR 0 3
15982: PPUSH
15983: LD_VAR 0 2
15987: PPUSH
15988: LD_INT 1
15990: PPUSH
15991: LD_VAR 0 3
15995: PPUSH
15996: CALL_OW 565
16000: PPUSH
16001: CALL_OW 324
16005: GO 15975
16007: POP
16008: POP
// end ;
16009: GO 15889
16011: POP
16012: POP
// end ;
16013: LD_VAR 0 1
16017: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
16018: LD_INT 0
16020: PPUSH
16021: PPUSH
16022: PPUSH
// for side = 1 to 8 do
16023: LD_ADDR_VAR 0 3
16027: PUSH
16028: DOUBLE
16029: LD_INT 1
16031: DEC
16032: ST_TO_ADDR
16033: LD_INT 8
16035: PUSH
16036: FOR_TO
16037: IFFALSE 20033
// begin for i = 1 to 73 do
16039: LD_ADDR_VAR 0 4
16043: PUSH
16044: DOUBLE
16045: LD_INT 1
16047: DEC
16048: ST_TO_ADDR
16049: LD_INT 73
16051: PUSH
16052: FOR_TO
16053: IFFALSE 16074
// SetTech ( i , side , state_disabled ) ;
16055: LD_VAR 0 4
16059: PPUSH
16060: LD_VAR 0 3
16064: PPUSH
16065: LD_INT 0
16067: PPUSH
16068: CALL_OW 322
16072: GO 16052
16074: POP
16075: POP
// for i = 0 to 40 do
16076: LD_ADDR_VAR 0 4
16080: PUSH
16081: DOUBLE
16082: LD_INT 0
16084: DEC
16085: ST_TO_ADDR
16086: LD_INT 40
16088: PUSH
16089: FOR_TO
16090: IFFALSE 16111
// SetRestrict ( i , side , false ) ;
16092: LD_VAR 0 4
16096: PPUSH
16097: LD_VAR 0 3
16101: PPUSH
16102: LD_INT 0
16104: PPUSH
16105: CALL_OW 324
16109: GO 16089
16111: POP
16112: POP
// case level of 1 :
16113: LD_VAR 0 1
16117: PUSH
16118: LD_INT 1
16120: DOUBLE
16121: EQUAL
16122: IFTRUE 16126
16124: GO 16279
16126: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16127: LD_INT 35
16129: PPUSH
16130: LD_VAR 0 3
16134: PPUSH
16135: LD_INT 1
16137: PPUSH
16138: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16142: LD_INT 45
16144: PPUSH
16145: LD_VAR 0 3
16149: PPUSH
16150: LD_INT 1
16152: PPUSH
16153: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16157: LD_INT 46
16159: PPUSH
16160: LD_VAR 0 3
16164: PPUSH
16165: LD_INT 1
16167: PPUSH
16168: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16172: LD_INT 47
16174: PPUSH
16175: LD_VAR 0 3
16179: PPUSH
16180: LD_INT 1
16182: PPUSH
16183: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16187: LD_INT 0
16189: PPUSH
16190: LD_VAR 0 3
16194: PPUSH
16195: LD_INT 1
16197: PPUSH
16198: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16202: LD_INT 2
16204: PPUSH
16205: LD_VAR 0 3
16209: PPUSH
16210: LD_INT 1
16212: PPUSH
16213: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16217: LD_INT 4
16219: PPUSH
16220: LD_VAR 0 3
16224: PPUSH
16225: LD_INT 1
16227: PPUSH
16228: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16232: LD_INT 6
16234: PPUSH
16235: LD_VAR 0 3
16239: PPUSH
16240: LD_INT 1
16242: PPUSH
16243: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16247: LD_INT 29
16249: PPUSH
16250: LD_VAR 0 3
16254: PPUSH
16255: LD_INT 1
16257: PPUSH
16258: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16262: LD_INT 31
16264: PPUSH
16265: LD_VAR 0 3
16269: PPUSH
16270: LD_INT 1
16272: PPUSH
16273: CALL_OW 324
// end ; 2 :
16277: GO 20031
16279: LD_INT 2
16281: DOUBLE
16282: EQUAL
16283: IFTRUE 16287
16285: GO 16485
16287: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16288: LD_INT 35
16290: PPUSH
16291: LD_VAR 0 3
16295: PPUSH
16296: LD_INT 1
16298: PPUSH
16299: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16303: LD_INT 45
16305: PPUSH
16306: LD_VAR 0 3
16310: PPUSH
16311: LD_INT 1
16313: PPUSH
16314: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16318: LD_INT 46
16320: PPUSH
16321: LD_VAR 0 3
16325: PPUSH
16326: LD_INT 1
16328: PPUSH
16329: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16333: LD_INT 47
16335: PPUSH
16336: LD_VAR 0 3
16340: PPUSH
16341: LD_INT 1
16343: PPUSH
16344: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16348: LD_INT 1
16350: PPUSH
16351: LD_VAR 0 3
16355: PPUSH
16356: LD_INT 1
16358: PPUSH
16359: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16363: LD_INT 2
16365: PPUSH
16366: LD_VAR 0 3
16370: PPUSH
16371: LD_INT 1
16373: PPUSH
16374: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16378: LD_INT 11
16380: PPUSH
16381: LD_VAR 0 3
16385: PPUSH
16386: LD_INT 1
16388: PPUSH
16389: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16393: LD_INT 0
16395: PPUSH
16396: LD_VAR 0 3
16400: PPUSH
16401: LD_INT 1
16403: PPUSH
16404: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16408: LD_INT 2
16410: PPUSH
16411: LD_VAR 0 3
16415: PPUSH
16416: LD_INT 1
16418: PPUSH
16419: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16423: LD_INT 4
16425: PPUSH
16426: LD_VAR 0 3
16430: PPUSH
16431: LD_INT 1
16433: PPUSH
16434: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16438: LD_INT 6
16440: PPUSH
16441: LD_VAR 0 3
16445: PPUSH
16446: LD_INT 1
16448: PPUSH
16449: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16453: LD_INT 29
16455: PPUSH
16456: LD_VAR 0 3
16460: PPUSH
16461: LD_INT 1
16463: PPUSH
16464: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16468: LD_INT 31
16470: PPUSH
16471: LD_VAR 0 3
16475: PPUSH
16476: LD_INT 1
16478: PPUSH
16479: CALL_OW 324
// end ; 3 :
16483: GO 20031
16485: LD_INT 3
16487: DOUBLE
16488: EQUAL
16489: IFTRUE 16493
16491: GO 16946
16493: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16494: LD_INT 35
16496: PPUSH
16497: LD_VAR 0 3
16501: PPUSH
16502: LD_INT 1
16504: PPUSH
16505: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16509: LD_INT 45
16511: PPUSH
16512: LD_VAR 0 3
16516: PPUSH
16517: LD_INT 1
16519: PPUSH
16520: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16524: LD_INT 46
16526: PPUSH
16527: LD_VAR 0 3
16531: PPUSH
16532: LD_INT 1
16534: PPUSH
16535: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16539: LD_INT 47
16541: PPUSH
16542: LD_VAR 0 3
16546: PPUSH
16547: LD_INT 1
16549: PPUSH
16550: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16554: LD_INT 1
16556: PPUSH
16557: LD_VAR 0 3
16561: PPUSH
16562: LD_INT 1
16564: PPUSH
16565: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16569: LD_INT 2
16571: PPUSH
16572: LD_VAR 0 3
16576: PPUSH
16577: LD_INT 1
16579: PPUSH
16580: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16584: LD_INT 11
16586: PPUSH
16587: LD_VAR 0 3
16591: PPUSH
16592: LD_INT 1
16594: PPUSH
16595: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16599: LD_INT 48
16601: PPUSH
16602: LD_VAR 0 3
16606: PPUSH
16607: LD_INT 1
16609: PPUSH
16610: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16614: LD_INT 69
16616: PPUSH
16617: LD_VAR 0 3
16621: PPUSH
16622: LD_INT 1
16624: PPUSH
16625: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16629: LD_INT 39
16631: PPUSH
16632: LD_VAR 0 3
16636: PPUSH
16637: LD_INT 1
16639: PPUSH
16640: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16644: LD_INT 43
16646: PPUSH
16647: LD_VAR 0 3
16651: PPUSH
16652: LD_INT 1
16654: PPUSH
16655: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16659: LD_INT 51
16661: PPUSH
16662: LD_VAR 0 3
16666: PPUSH
16667: LD_INT 1
16669: PPUSH
16670: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16674: LD_INT 6
16676: PPUSH
16677: LD_VAR 0 3
16681: PPUSH
16682: LD_INT 1
16684: PPUSH
16685: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16689: LD_INT 0
16691: PPUSH
16692: LD_VAR 0 3
16696: PPUSH
16697: LD_INT 1
16699: PPUSH
16700: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16704: LD_INT 2
16706: PPUSH
16707: LD_VAR 0 3
16711: PPUSH
16712: LD_INT 1
16714: PPUSH
16715: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16719: LD_INT 3
16721: PPUSH
16722: LD_VAR 0 3
16726: PPUSH
16727: LD_INT 1
16729: PPUSH
16730: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16734: LD_INT 4
16736: PPUSH
16737: LD_VAR 0 3
16741: PPUSH
16742: LD_INT 1
16744: PPUSH
16745: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16749: LD_INT 6
16751: PPUSH
16752: LD_VAR 0 3
16756: PPUSH
16757: LD_INT 1
16759: PPUSH
16760: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16764: LD_INT 7
16766: PPUSH
16767: LD_VAR 0 3
16771: PPUSH
16772: LD_INT 1
16774: PPUSH
16775: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16779: LD_INT 8
16781: PPUSH
16782: LD_VAR 0 3
16786: PPUSH
16787: LD_INT 1
16789: PPUSH
16790: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16794: LD_INT 10
16796: PPUSH
16797: LD_VAR 0 3
16801: PPUSH
16802: LD_INT 1
16804: PPUSH
16805: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16809: LD_INT 15
16811: PPUSH
16812: LD_VAR 0 3
16816: PPUSH
16817: LD_INT 1
16819: PPUSH
16820: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16824: LD_INT 16
16826: PPUSH
16827: LD_VAR 0 3
16831: PPUSH
16832: LD_INT 1
16834: PPUSH
16835: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16839: LD_INT 17
16841: PPUSH
16842: LD_VAR 0 3
16846: PPUSH
16847: LD_INT 1
16849: PPUSH
16850: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16854: LD_INT 20
16856: PPUSH
16857: LD_VAR 0 3
16861: PPUSH
16862: LD_INT 1
16864: PPUSH
16865: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16869: LD_INT 26
16871: PPUSH
16872: LD_VAR 0 3
16876: PPUSH
16877: LD_INT 1
16879: PPUSH
16880: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16884: LD_INT 27
16886: PPUSH
16887: LD_VAR 0 3
16891: PPUSH
16892: LD_INT 1
16894: PPUSH
16895: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16899: LD_INT 29
16901: PPUSH
16902: LD_VAR 0 3
16906: PPUSH
16907: LD_INT 1
16909: PPUSH
16910: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16914: LD_INT 31
16916: PPUSH
16917: LD_VAR 0 3
16921: PPUSH
16922: LD_INT 1
16924: PPUSH
16925: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16929: LD_INT 32
16931: PPUSH
16932: LD_VAR 0 3
16936: PPUSH
16937: LD_INT 1
16939: PPUSH
16940: CALL_OW 324
// end ; 4 :
16944: GO 20031
16946: LD_INT 4
16948: DOUBLE
16949: EQUAL
16950: IFTRUE 16954
16952: GO 17902
16954: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16955: LD_INT 35
16957: PPUSH
16958: LD_VAR 0 3
16962: PPUSH
16963: LD_INT 1
16965: PPUSH
16966: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16970: LD_INT 45
16972: PPUSH
16973: LD_VAR 0 3
16977: PPUSH
16978: LD_INT 1
16980: PPUSH
16981: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16985: LD_INT 46
16987: PPUSH
16988: LD_VAR 0 3
16992: PPUSH
16993: LD_INT 1
16995: PPUSH
16996: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17000: LD_INT 47
17002: PPUSH
17003: LD_VAR 0 3
17007: PPUSH
17008: LD_INT 1
17010: PPUSH
17011: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17015: LD_INT 1
17017: PPUSH
17018: LD_VAR 0 3
17022: PPUSH
17023: LD_INT 1
17025: PPUSH
17026: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17030: LD_INT 2
17032: PPUSH
17033: LD_VAR 0 3
17037: PPUSH
17038: LD_INT 1
17040: PPUSH
17041: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17045: LD_INT 11
17047: PPUSH
17048: LD_VAR 0 3
17052: PPUSH
17053: LD_INT 1
17055: PPUSH
17056: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17060: LD_INT 20
17062: PPUSH
17063: LD_VAR 0 3
17067: PPUSH
17068: LD_INT 1
17070: PPUSH
17071: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17075: LD_INT 48
17077: PPUSH
17078: LD_VAR 0 3
17082: PPUSH
17083: LD_INT 1
17085: PPUSH
17086: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17090: LD_INT 49
17092: PPUSH
17093: LD_VAR 0 3
17097: PPUSH
17098: LD_INT 1
17100: PPUSH
17101: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17105: LD_INT 69
17107: PPUSH
17108: LD_VAR 0 3
17112: PPUSH
17113: LD_INT 1
17115: PPUSH
17116: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17120: LD_INT 39
17122: PPUSH
17123: LD_VAR 0 3
17127: PPUSH
17128: LD_INT 1
17130: PPUSH
17131: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17135: LD_INT 34
17137: PPUSH
17138: LD_VAR 0 3
17142: PPUSH
17143: LD_INT 1
17145: PPUSH
17146: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17150: LD_INT 42
17152: PPUSH
17153: LD_VAR 0 3
17157: PPUSH
17158: LD_INT 1
17160: PPUSH
17161: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17165: LD_INT 44
17167: PPUSH
17168: LD_VAR 0 3
17172: PPUSH
17173: LD_INT 1
17175: PPUSH
17176: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17180: LD_INT 41
17182: PPUSH
17183: LD_VAR 0 3
17187: PPUSH
17188: LD_INT 1
17190: PPUSH
17191: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17195: LD_INT 43
17197: PPUSH
17198: LD_VAR 0 3
17202: PPUSH
17203: LD_INT 1
17205: PPUSH
17206: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17210: LD_INT 70
17212: PPUSH
17213: LD_VAR 0 3
17217: PPUSH
17218: LD_INT 1
17220: PPUSH
17221: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17225: LD_INT 51
17227: PPUSH
17228: LD_VAR 0 3
17232: PPUSH
17233: LD_INT 1
17235: PPUSH
17236: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17240: LD_INT 52
17242: PPUSH
17243: LD_VAR 0 3
17247: PPUSH
17248: LD_INT 1
17250: PPUSH
17251: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17255: LD_INT 6
17257: PPUSH
17258: LD_VAR 0 3
17262: PPUSH
17263: LD_INT 1
17265: PPUSH
17266: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17270: LD_INT 15
17272: PPUSH
17273: LD_VAR 0 3
17277: PPUSH
17278: LD_INT 1
17280: PPUSH
17281: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17285: LD_INT 7
17287: PPUSH
17288: LD_VAR 0 3
17292: PPUSH
17293: LD_INT 1
17295: PPUSH
17296: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17300: LD_INT 12
17302: PPUSH
17303: LD_VAR 0 3
17307: PPUSH
17308: LD_INT 1
17310: PPUSH
17311: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17315: LD_INT 18
17317: PPUSH
17318: LD_VAR 0 3
17322: PPUSH
17323: LD_INT 1
17325: PPUSH
17326: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17330: LD_INT 60
17332: PPUSH
17333: LD_VAR 0 3
17337: PPUSH
17338: LD_INT 1
17340: PPUSH
17341: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17345: LD_INT 9
17347: PPUSH
17348: LD_VAR 0 3
17352: PPUSH
17353: LD_INT 1
17355: PPUSH
17356: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17360: LD_INT 30
17362: PPUSH
17363: LD_VAR 0 3
17367: PPUSH
17368: LD_INT 1
17370: PPUSH
17371: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17375: LD_INT 37
17377: PPUSH
17378: LD_VAR 0 3
17382: PPUSH
17383: LD_INT 1
17385: PPUSH
17386: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17390: LD_INT 5
17392: PPUSH
17393: LD_VAR 0 3
17397: PPUSH
17398: LD_INT 1
17400: PPUSH
17401: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17405: LD_INT 66
17407: PPUSH
17408: LD_VAR 0 3
17412: PPUSH
17413: LD_INT 1
17415: PPUSH
17416: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17420: LD_INT 21
17422: PPUSH
17423: LD_VAR 0 3
17427: PPUSH
17428: LD_INT 1
17430: PPUSH
17431: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17435: LD_INT 22
17437: PPUSH
17438: LD_VAR 0 3
17442: PPUSH
17443: LD_INT 1
17445: PPUSH
17446: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17450: LD_INT 54
17452: PPUSH
17453: LD_VAR 0 3
17457: PPUSH
17458: LD_INT 1
17460: PPUSH
17461: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17465: LD_INT 0
17467: PPUSH
17468: LD_VAR 0 3
17472: PPUSH
17473: LD_INT 1
17475: PPUSH
17476: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17480: LD_INT 1
17482: PPUSH
17483: LD_VAR 0 3
17487: PPUSH
17488: LD_INT 1
17490: PPUSH
17491: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17495: LD_INT 2
17497: PPUSH
17498: LD_VAR 0 3
17502: PPUSH
17503: LD_INT 1
17505: PPUSH
17506: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17510: LD_INT 3
17512: PPUSH
17513: LD_VAR 0 3
17517: PPUSH
17518: LD_INT 1
17520: PPUSH
17521: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17525: LD_INT 4
17527: PPUSH
17528: LD_VAR 0 3
17532: PPUSH
17533: LD_INT 1
17535: PPUSH
17536: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17540: LD_INT 5
17542: PPUSH
17543: LD_VAR 0 3
17547: PPUSH
17548: LD_INT 1
17550: PPUSH
17551: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17555: LD_INT 6
17557: PPUSH
17558: LD_VAR 0 3
17562: PPUSH
17563: LD_INT 1
17565: PPUSH
17566: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17570: LD_INT 7
17572: PPUSH
17573: LD_VAR 0 3
17577: PPUSH
17578: LD_INT 1
17580: PPUSH
17581: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17585: LD_INT 8
17587: PPUSH
17588: LD_VAR 0 3
17592: PPUSH
17593: LD_INT 1
17595: PPUSH
17596: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17600: LD_INT 10
17602: PPUSH
17603: LD_VAR 0 3
17607: PPUSH
17608: LD_INT 1
17610: PPUSH
17611: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17615: LD_INT 11
17617: PPUSH
17618: LD_VAR 0 3
17622: PPUSH
17623: LD_INT 1
17625: PPUSH
17626: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17630: LD_INT 12
17632: PPUSH
17633: LD_VAR 0 3
17637: PPUSH
17638: LD_INT 1
17640: PPUSH
17641: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17645: LD_INT 13
17647: PPUSH
17648: LD_VAR 0 3
17652: PPUSH
17653: LD_INT 1
17655: PPUSH
17656: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17660: LD_INT 14
17662: PPUSH
17663: LD_VAR 0 3
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17675: LD_INT 15
17677: PPUSH
17678: LD_VAR 0 3
17682: PPUSH
17683: LD_INT 1
17685: PPUSH
17686: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17690: LD_INT 16
17692: PPUSH
17693: LD_VAR 0 3
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17705: LD_INT 17
17707: PPUSH
17708: LD_VAR 0 3
17712: PPUSH
17713: LD_INT 1
17715: PPUSH
17716: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17720: LD_INT 19
17722: PPUSH
17723: LD_VAR 0 3
17727: PPUSH
17728: LD_INT 1
17730: PPUSH
17731: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17735: LD_INT 20
17737: PPUSH
17738: LD_VAR 0 3
17742: PPUSH
17743: LD_INT 1
17745: PPUSH
17746: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17750: LD_INT 21
17752: PPUSH
17753: LD_VAR 0 3
17757: PPUSH
17758: LD_INT 1
17760: PPUSH
17761: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17765: LD_INT 23
17767: PPUSH
17768: LD_VAR 0 3
17772: PPUSH
17773: LD_INT 1
17775: PPUSH
17776: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17780: LD_INT 26
17782: PPUSH
17783: LD_VAR 0 3
17787: PPUSH
17788: LD_INT 1
17790: PPUSH
17791: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17795: LD_INT 27
17797: PPUSH
17798: LD_VAR 0 3
17802: PPUSH
17803: LD_INT 1
17805: PPUSH
17806: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17810: LD_INT 28
17812: PPUSH
17813: LD_VAR 0 3
17817: PPUSH
17818: LD_INT 1
17820: PPUSH
17821: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17825: LD_INT 29
17827: PPUSH
17828: LD_VAR 0 3
17832: PPUSH
17833: LD_INT 1
17835: PPUSH
17836: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17840: LD_INT 30
17842: PPUSH
17843: LD_VAR 0 3
17847: PPUSH
17848: LD_INT 1
17850: PPUSH
17851: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17855: LD_INT 31
17857: PPUSH
17858: LD_VAR 0 3
17862: PPUSH
17863: LD_INT 1
17865: PPUSH
17866: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17870: LD_INT 32
17872: PPUSH
17873: LD_VAR 0 3
17877: PPUSH
17878: LD_INT 1
17880: PPUSH
17881: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17885: LD_INT 36
17887: PPUSH
17888: LD_VAR 0 3
17892: PPUSH
17893: LD_INT 1
17895: PPUSH
17896: CALL_OW 324
// end ; 5 :
17900: GO 20031
17902: LD_INT 5
17904: DOUBLE
17905: EQUAL
17906: IFTRUE 17910
17908: GO 19023
17910: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17911: LD_INT 35
17913: PPUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: LD_INT 1
17921: PPUSH
17922: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17926: LD_INT 45
17928: PPUSH
17929: LD_VAR 0 3
17933: PPUSH
17934: LD_INT 1
17936: PPUSH
17937: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17941: LD_INT 46
17943: PPUSH
17944: LD_VAR 0 3
17948: PPUSH
17949: LD_INT 1
17951: PPUSH
17952: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17956: LD_INT 47
17958: PPUSH
17959: LD_VAR 0 3
17963: PPUSH
17964: LD_INT 1
17966: PPUSH
17967: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17971: LD_INT 1
17973: PPUSH
17974: LD_VAR 0 3
17978: PPUSH
17979: LD_INT 1
17981: PPUSH
17982: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17986: LD_INT 2
17988: PPUSH
17989: LD_VAR 0 3
17993: PPUSH
17994: LD_INT 1
17996: PPUSH
17997: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18001: LD_INT 11
18003: PPUSH
18004: LD_VAR 0 3
18008: PPUSH
18009: LD_INT 1
18011: PPUSH
18012: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18016: LD_INT 20
18018: PPUSH
18019: LD_VAR 0 3
18023: PPUSH
18024: LD_INT 1
18026: PPUSH
18027: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18031: LD_INT 48
18033: PPUSH
18034: LD_VAR 0 3
18038: PPUSH
18039: LD_INT 1
18041: PPUSH
18042: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18046: LD_INT 49
18048: PPUSH
18049: LD_VAR 0 3
18053: PPUSH
18054: LD_INT 1
18056: PPUSH
18057: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18061: LD_INT 69
18063: PPUSH
18064: LD_VAR 0 3
18068: PPUSH
18069: LD_INT 1
18071: PPUSH
18072: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18076: LD_INT 39
18078: PPUSH
18079: LD_VAR 0 3
18083: PPUSH
18084: LD_INT 1
18086: PPUSH
18087: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18091: LD_INT 34
18093: PPUSH
18094: LD_VAR 0 3
18098: PPUSH
18099: LD_INT 1
18101: PPUSH
18102: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18106: LD_INT 42
18108: PPUSH
18109: LD_VAR 0 3
18113: PPUSH
18114: LD_INT 1
18116: PPUSH
18117: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18121: LD_INT 44
18123: PPUSH
18124: LD_VAR 0 3
18128: PPUSH
18129: LD_INT 1
18131: PPUSH
18132: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18136: LD_INT 41
18138: PPUSH
18139: LD_VAR 0 3
18143: PPUSH
18144: LD_INT 1
18146: PPUSH
18147: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18151: LD_INT 40
18153: PPUSH
18154: LD_VAR 0 3
18158: PPUSH
18159: LD_INT 1
18161: PPUSH
18162: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18166: LD_INT 43
18168: PPUSH
18169: LD_VAR 0 3
18173: PPUSH
18174: LD_INT 1
18176: PPUSH
18177: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18181: LD_INT 70
18183: PPUSH
18184: LD_VAR 0 3
18188: PPUSH
18189: LD_INT 1
18191: PPUSH
18192: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18196: LD_INT 51
18198: PPUSH
18199: LD_VAR 0 3
18203: PPUSH
18204: LD_INT 1
18206: PPUSH
18207: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18211: LD_INT 52
18213: PPUSH
18214: LD_VAR 0 3
18218: PPUSH
18219: LD_INT 1
18221: PPUSH
18222: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18226: LD_INT 6
18228: PPUSH
18229: LD_VAR 0 3
18233: PPUSH
18234: LD_INT 1
18236: PPUSH
18237: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18241: LD_INT 15
18243: PPUSH
18244: LD_VAR 0 3
18248: PPUSH
18249: LD_INT 1
18251: PPUSH
18252: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18256: LD_INT 7
18258: PPUSH
18259: LD_VAR 0 3
18263: PPUSH
18264: LD_INT 1
18266: PPUSH
18267: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18271: LD_INT 12
18273: PPUSH
18274: LD_VAR 0 3
18278: PPUSH
18279: LD_INT 1
18281: PPUSH
18282: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
18286: LD_INT 17
18288: PPUSH
18289: LD_VAR 0 3
18293: PPUSH
18294: LD_INT 1
18296: PPUSH
18297: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18301: LD_INT 18
18303: PPUSH
18304: LD_VAR 0 3
18308: PPUSH
18309: LD_INT 1
18311: PPUSH
18312: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18316: LD_INT 60
18318: PPUSH
18319: LD_VAR 0 3
18323: PPUSH
18324: LD_INT 1
18326: PPUSH
18327: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18331: LD_INT 32
18333: PPUSH
18334: LD_VAR 0 3
18338: PPUSH
18339: LD_INT 1
18341: PPUSH
18342: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18346: LD_INT 9
18348: PPUSH
18349: LD_VAR 0 3
18353: PPUSH
18354: LD_INT 1
18356: PPUSH
18357: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18361: LD_INT 57
18363: PPUSH
18364: LD_VAR 0 3
18368: PPUSH
18369: LD_INT 1
18371: PPUSH
18372: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18376: LD_INT 30
18378: PPUSH
18379: LD_VAR 0 3
18383: PPUSH
18384: LD_INT 1
18386: PPUSH
18387: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18391: LD_INT 37
18393: PPUSH
18394: LD_VAR 0 3
18398: PPUSH
18399: LD_INT 1
18401: PPUSH
18402: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18406: LD_INT 63
18408: PPUSH
18409: LD_VAR 0 3
18413: PPUSH
18414: LD_INT 1
18416: PPUSH
18417: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18421: LD_INT 3
18423: PPUSH
18424: LD_VAR 0 3
18428: PPUSH
18429: LD_INT 1
18431: PPUSH
18432: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18436: LD_INT 4
18438: PPUSH
18439: LD_VAR 0 3
18443: PPUSH
18444: LD_INT 1
18446: PPUSH
18447: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18451: LD_INT 5
18453: PPUSH
18454: LD_VAR 0 3
18458: PPUSH
18459: LD_INT 1
18461: PPUSH
18462: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18466: LD_INT 66
18468: PPUSH
18469: LD_VAR 0 3
18473: PPUSH
18474: LD_INT 1
18476: PPUSH
18477: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18481: LD_INT 21
18483: PPUSH
18484: LD_VAR 0 3
18488: PPUSH
18489: LD_INT 1
18491: PPUSH
18492: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18496: LD_INT 22
18498: PPUSH
18499: LD_VAR 0 3
18503: PPUSH
18504: LD_INT 1
18506: PPUSH
18507: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18511: LD_INT 19
18513: PPUSH
18514: LD_VAR 0 3
18518: PPUSH
18519: LD_INT 1
18521: PPUSH
18522: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18526: LD_INT 54
18528: PPUSH
18529: LD_VAR 0 3
18533: PPUSH
18534: LD_INT 1
18536: PPUSH
18537: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18541: LD_INT 55
18543: PPUSH
18544: LD_VAR 0 3
18548: PPUSH
18549: LD_INT 1
18551: PPUSH
18552: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18556: LD_INT 0
18558: PPUSH
18559: LD_VAR 0 3
18563: PPUSH
18564: LD_INT 1
18566: PPUSH
18567: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18571: LD_INT 1
18573: PPUSH
18574: LD_VAR 0 3
18578: PPUSH
18579: LD_INT 1
18581: PPUSH
18582: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18586: LD_INT 2
18588: PPUSH
18589: LD_VAR 0 3
18593: PPUSH
18594: LD_INT 1
18596: PPUSH
18597: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18601: LD_INT 3
18603: PPUSH
18604: LD_VAR 0 3
18608: PPUSH
18609: LD_INT 1
18611: PPUSH
18612: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18616: LD_INT 4
18618: PPUSH
18619: LD_VAR 0 3
18623: PPUSH
18624: LD_INT 1
18626: PPUSH
18627: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18631: LD_INT 5
18633: PPUSH
18634: LD_VAR 0 3
18638: PPUSH
18639: LD_INT 1
18641: PPUSH
18642: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18646: LD_INT 6
18648: PPUSH
18649: LD_VAR 0 3
18653: PPUSH
18654: LD_INT 1
18656: PPUSH
18657: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18661: LD_INT 7
18663: PPUSH
18664: LD_VAR 0 3
18668: PPUSH
18669: LD_INT 1
18671: PPUSH
18672: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18676: LD_INT 8
18678: PPUSH
18679: LD_VAR 0 3
18683: PPUSH
18684: LD_INT 1
18686: PPUSH
18687: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18691: LD_INT 10
18693: PPUSH
18694: LD_VAR 0 3
18698: PPUSH
18699: LD_INT 1
18701: PPUSH
18702: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18706: LD_INT 11
18708: PPUSH
18709: LD_VAR 0 3
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18721: LD_INT 12
18723: PPUSH
18724: LD_VAR 0 3
18728: PPUSH
18729: LD_INT 1
18731: PPUSH
18732: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18736: LD_INT 13
18738: PPUSH
18739: LD_VAR 0 3
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18751: LD_INT 14
18753: PPUSH
18754: LD_VAR 0 3
18758: PPUSH
18759: LD_INT 1
18761: PPUSH
18762: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18766: LD_INT 15
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: LD_INT 1
18776: PPUSH
18777: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18781: LD_INT 16
18783: PPUSH
18784: LD_VAR 0 3
18788: PPUSH
18789: LD_INT 1
18791: PPUSH
18792: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18796: LD_INT 17
18798: PPUSH
18799: LD_VAR 0 3
18803: PPUSH
18804: LD_INT 1
18806: PPUSH
18807: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18811: LD_INT 18
18813: PPUSH
18814: LD_VAR 0 3
18818: PPUSH
18819: LD_INT 1
18821: PPUSH
18822: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18826: LD_INT 19
18828: PPUSH
18829: LD_VAR 0 3
18833: PPUSH
18834: LD_INT 1
18836: PPUSH
18837: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18841: LD_INT 20
18843: PPUSH
18844: LD_VAR 0 3
18848: PPUSH
18849: LD_INT 1
18851: PPUSH
18852: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18856: LD_INT 21
18858: PPUSH
18859: LD_VAR 0 3
18863: PPUSH
18864: LD_INT 1
18866: PPUSH
18867: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18871: LD_INT 23
18873: PPUSH
18874: LD_VAR 0 3
18878: PPUSH
18879: LD_INT 1
18881: PPUSH
18882: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18886: LD_INT 26
18888: PPUSH
18889: LD_VAR 0 3
18893: PPUSH
18894: LD_INT 1
18896: PPUSH
18897: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18901: LD_INT 27
18903: PPUSH
18904: LD_VAR 0 3
18908: PPUSH
18909: LD_INT 1
18911: PPUSH
18912: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18916: LD_INT 28
18918: PPUSH
18919: LD_VAR 0 3
18923: PPUSH
18924: LD_INT 1
18926: PPUSH
18927: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18931: LD_INT 29
18933: PPUSH
18934: LD_VAR 0 3
18938: PPUSH
18939: LD_INT 1
18941: PPUSH
18942: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18946: LD_INT 30
18948: PPUSH
18949: LD_VAR 0 3
18953: PPUSH
18954: LD_INT 1
18956: PPUSH
18957: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18961: LD_INT 31
18963: PPUSH
18964: LD_VAR 0 3
18968: PPUSH
18969: LD_INT 1
18971: PPUSH
18972: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18976: LD_INT 32
18978: PPUSH
18979: LD_VAR 0 3
18983: PPUSH
18984: LD_INT 1
18986: PPUSH
18987: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18991: LD_INT 33
18993: PPUSH
18994: LD_VAR 0 3
18998: PPUSH
18999: LD_INT 1
19001: PPUSH
19002: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
19006: LD_INT 36
19008: PPUSH
19009: LD_VAR 0 3
19013: PPUSH
19014: LD_INT 1
19016: PPUSH
19017: CALL_OW 324
// end ; 6 :
19021: GO 20031
19023: LD_INT 6
19025: DOUBLE
19026: EQUAL
19027: IFTRUE 19031
19029: GO 19956
19031: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19032: LD_INT 35
19034: PPUSH
19035: LD_VAR 0 3
19039: PPUSH
19040: LD_INT 1
19042: PPUSH
19043: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19047: LD_INT 45
19049: PPUSH
19050: LD_VAR 0 3
19054: PPUSH
19055: LD_INT 1
19057: PPUSH
19058: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19062: LD_INT 46
19064: PPUSH
19065: LD_VAR 0 3
19069: PPUSH
19070: LD_INT 1
19072: PPUSH
19073: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19077: LD_INT 47
19079: PPUSH
19080: LD_VAR 0 3
19084: PPUSH
19085: LD_INT 1
19087: PPUSH
19088: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19092: LD_INT 1
19094: PPUSH
19095: LD_VAR 0 3
19099: PPUSH
19100: LD_INT 1
19102: PPUSH
19103: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19107: LD_INT 2
19109: PPUSH
19110: LD_VAR 0 3
19114: PPUSH
19115: LD_INT 1
19117: PPUSH
19118: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19122: LD_INT 11
19124: PPUSH
19125: LD_VAR 0 3
19129: PPUSH
19130: LD_INT 1
19132: PPUSH
19133: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19137: LD_INT 20
19139: PPUSH
19140: LD_VAR 0 3
19144: PPUSH
19145: LD_INT 1
19147: PPUSH
19148: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19152: LD_INT 48
19154: PPUSH
19155: LD_VAR 0 3
19159: PPUSH
19160: LD_INT 1
19162: PPUSH
19163: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19167: LD_INT 49
19169: PPUSH
19170: LD_VAR 0 3
19174: PPUSH
19175: LD_INT 1
19177: PPUSH
19178: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
19182: LD_INT 50
19184: PPUSH
19185: LD_VAR 0 3
19189: PPUSH
19190: LD_INT 1
19192: PPUSH
19193: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19197: LD_INT 69
19199: PPUSH
19200: LD_VAR 0 3
19204: PPUSH
19205: LD_INT 1
19207: PPUSH
19208: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19212: LD_INT 39
19214: PPUSH
19215: LD_VAR 0 3
19219: PPUSH
19220: LD_INT 1
19222: PPUSH
19223: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19227: LD_INT 34
19229: PPUSH
19230: LD_VAR 0 3
19234: PPUSH
19235: LD_INT 1
19237: PPUSH
19238: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
19242: LD_INT 42
19244: PPUSH
19245: LD_VAR 0 3
19249: PPUSH
19250: LD_INT 1
19252: PPUSH
19253: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
19257: LD_INT 44
19259: PPUSH
19260: LD_VAR 0 3
19264: PPUSH
19265: LD_INT 1
19267: PPUSH
19268: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
19272: LD_INT 41
19274: PPUSH
19275: LD_VAR 0 3
19279: PPUSH
19280: LD_INT 1
19282: PPUSH
19283: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
19287: LD_INT 13
19289: PPUSH
19290: LD_VAR 0 3
19294: PPUSH
19295: LD_INT 1
19297: PPUSH
19298: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
19302: LD_INT 40
19304: PPUSH
19305: LD_VAR 0 3
19309: PPUSH
19310: LD_INT 1
19312: PPUSH
19313: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19317: LD_INT 43
19319: PPUSH
19320: LD_VAR 0 3
19324: PPUSH
19325: LD_INT 1
19327: PPUSH
19328: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19332: LD_INT 70
19334: PPUSH
19335: LD_VAR 0 3
19339: PPUSH
19340: LD_INT 1
19342: PPUSH
19343: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
19347: LD_INT 23
19349: PPUSH
19350: LD_VAR 0 3
19354: PPUSH
19355: LD_INT 1
19357: PPUSH
19358: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19362: LD_INT 51
19364: PPUSH
19365: LD_VAR 0 3
19369: PPUSH
19370: LD_INT 1
19372: PPUSH
19373: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19377: LD_INT 52
19379: PPUSH
19380: LD_VAR 0 3
19384: PPUSH
19385: LD_INT 1
19387: PPUSH
19388: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19392: LD_INT 6
19394: PPUSH
19395: LD_VAR 0 3
19399: PPUSH
19400: LD_INT 1
19402: PPUSH
19403: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19407: LD_INT 15
19409: PPUSH
19410: LD_VAR 0 3
19414: PPUSH
19415: LD_INT 1
19417: PPUSH
19418: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19422: LD_INT 7
19424: PPUSH
19425: LD_VAR 0 3
19429: PPUSH
19430: LD_INT 1
19432: PPUSH
19433: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19437: LD_INT 12
19439: PPUSH
19440: LD_VAR 0 3
19444: PPUSH
19445: LD_INT 1
19447: PPUSH
19448: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19452: LD_INT 10
19454: PPUSH
19455: LD_VAR 0 3
19459: PPUSH
19460: LD_INT 1
19462: PPUSH
19463: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19467: LD_INT 17
19469: PPUSH
19470: LD_VAR 0 3
19474: PPUSH
19475: LD_INT 1
19477: PPUSH
19478: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19482: LD_INT 18
19484: PPUSH
19485: LD_VAR 0 3
19489: PPUSH
19490: LD_INT 1
19492: PPUSH
19493: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19497: LD_INT 60
19499: PPUSH
19500: LD_VAR 0 3
19504: PPUSH
19505: LD_INT 1
19507: PPUSH
19508: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19512: LD_INT 61
19514: PPUSH
19515: LD_VAR 0 3
19519: PPUSH
19520: LD_INT 1
19522: PPUSH
19523: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19527: LD_INT 32
19529: PPUSH
19530: LD_VAR 0 3
19534: PPUSH
19535: LD_INT 1
19537: PPUSH
19538: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19542: LD_INT 27
19544: PPUSH
19545: LD_VAR 0 3
19549: PPUSH
19550: LD_INT 1
19552: PPUSH
19553: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19557: LD_INT 36
19559: PPUSH
19560: LD_VAR 0 3
19564: PPUSH
19565: LD_INT 1
19567: PPUSH
19568: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19572: LD_INT 33
19574: PPUSH
19575: LD_VAR 0 3
19579: PPUSH
19580: LD_INT 1
19582: PPUSH
19583: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19587: LD_INT 9
19589: PPUSH
19590: LD_VAR 0 3
19594: PPUSH
19595: LD_INT 1
19597: PPUSH
19598: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19602: LD_INT 38
19604: PPUSH
19605: LD_VAR 0 3
19609: PPUSH
19610: LD_INT 1
19612: PPUSH
19613: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19617: LD_INT 57
19619: PPUSH
19620: LD_VAR 0 3
19624: PPUSH
19625: LD_INT 1
19627: PPUSH
19628: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19632: LD_INT 58
19634: PPUSH
19635: LD_VAR 0 3
19639: PPUSH
19640: LD_INT 1
19642: PPUSH
19643: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19647: LD_INT 28
19649: PPUSH
19650: LD_VAR 0 3
19654: PPUSH
19655: LD_INT 1
19657: PPUSH
19658: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19662: LD_INT 29
19664: PPUSH
19665: LD_VAR 0 3
19669: PPUSH
19670: LD_INT 1
19672: PPUSH
19673: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19677: LD_INT 30
19679: PPUSH
19680: LD_VAR 0 3
19684: PPUSH
19685: LD_INT 1
19687: PPUSH
19688: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19692: LD_INT 37
19694: PPUSH
19695: LD_VAR 0 3
19699: PPUSH
19700: LD_INT 1
19702: PPUSH
19703: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19707: LD_INT 63
19709: PPUSH
19710: LD_VAR 0 3
19714: PPUSH
19715: LD_INT 1
19717: PPUSH
19718: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19722: LD_INT 64
19724: PPUSH
19725: LD_VAR 0 3
19729: PPUSH
19730: LD_INT 1
19732: PPUSH
19733: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19737: LD_INT 3
19739: PPUSH
19740: LD_VAR 0 3
19744: PPUSH
19745: LD_INT 1
19747: PPUSH
19748: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19752: LD_INT 4
19754: PPUSH
19755: LD_VAR 0 3
19759: PPUSH
19760: LD_INT 1
19762: PPUSH
19763: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19767: LD_INT 5
19769: PPUSH
19770: LD_VAR 0 3
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19782: LD_INT 8
19784: PPUSH
19785: LD_VAR 0 3
19789: PPUSH
19790: LD_INT 1
19792: PPUSH
19793: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19797: LD_INT 66
19799: PPUSH
19800: LD_VAR 0 3
19804: PPUSH
19805: LD_INT 1
19807: PPUSH
19808: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19812: LD_INT 67
19814: PPUSH
19815: LD_VAR 0 3
19819: PPUSH
19820: LD_INT 1
19822: PPUSH
19823: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19827: LD_INT 21
19829: PPUSH
19830: LD_VAR 0 3
19834: PPUSH
19835: LD_INT 1
19837: PPUSH
19838: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19842: LD_INT 22
19844: PPUSH
19845: LD_VAR 0 3
19849: PPUSH
19850: LD_INT 1
19852: PPUSH
19853: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19857: LD_INT 19
19859: PPUSH
19860: LD_VAR 0 3
19864: PPUSH
19865: LD_INT 1
19867: PPUSH
19868: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19872: LD_INT 26
19874: PPUSH
19875: LD_VAR 0 3
19879: PPUSH
19880: LD_INT 1
19882: PPUSH
19883: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19887: LD_INT 54
19889: PPUSH
19890: LD_VAR 0 3
19894: PPUSH
19895: LD_INT 1
19897: PPUSH
19898: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19902: LD_INT 55
19904: PPUSH
19905: LD_VAR 0 3
19909: PPUSH
19910: LD_INT 1
19912: PPUSH
19913: CALL_OW 322
// for i = 0 to 39 do
19917: LD_ADDR_VAR 0 4
19921: PUSH
19922: DOUBLE
19923: LD_INT 0
19925: DEC
19926: ST_TO_ADDR
19927: LD_INT 39
19929: PUSH
19930: FOR_TO
19931: IFFALSE 19952
// SetRestrict ( i , side , true ) ;
19933: LD_VAR 0 4
19937: PPUSH
19938: LD_VAR 0 3
19942: PPUSH
19943: LD_INT 1
19945: PPUSH
19946: CALL_OW 324
19950: GO 19930
19952: POP
19953: POP
// end ; else
19954: GO 20031
19956: POP
// begin for i = 1 to 73 do
19957: LD_ADDR_VAR 0 4
19961: PUSH
19962: DOUBLE
19963: LD_INT 1
19965: DEC
19966: ST_TO_ADDR
19967: LD_INT 73
19969: PUSH
19970: FOR_TO
19971: IFFALSE 19992
// SetTech ( i , side , state_enabled ) ;
19973: LD_VAR 0 4
19977: PPUSH
19978: LD_VAR 0 3
19982: PPUSH
19983: LD_INT 1
19985: PPUSH
19986: CALL_OW 322
19990: GO 19970
19992: POP
19993: POP
// for i = 0 to 39 do
19994: LD_ADDR_VAR 0 4
19998: PUSH
19999: DOUBLE
20000: LD_INT 0
20002: DEC
20003: ST_TO_ADDR
20004: LD_INT 39
20006: PUSH
20007: FOR_TO
20008: IFFALSE 20029
// SetRestrict ( i , side , true ) ;
20010: LD_VAR 0 4
20014: PPUSH
20015: LD_VAR 0 3
20019: PPUSH
20020: LD_INT 1
20022: PPUSH
20023: CALL_OW 324
20027: GO 20007
20029: POP
20030: POP
// end ; end ; end ;
20031: GO 16036
20033: POP
20034: POP
// end ; end_of_file
20035: LD_VAR 0 2
20039: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
20040: LD_INT 0
20042: PPUSH
20043: PPUSH
20044: PPUSH
20045: PPUSH
20046: PPUSH
20047: PPUSH
20048: PPUSH
20049: PPUSH
20050: PPUSH
// for i := 1 to 8 do
20051: LD_ADDR_VAR 0 2
20055: PUSH
20056: DOUBLE
20057: LD_INT 1
20059: DEC
20060: ST_TO_ADDR
20061: LD_INT 8
20063: PUSH
20064: FOR_TO
20065: IFFALSE 20449
// begin if Side_Positions [ i ] then
20067: LD_EXP 29
20071: PUSH
20072: LD_VAR 0 2
20076: ARRAY
20077: IFFALSE 20447
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
20079: LD_ADDR_VAR 0 7
20083: PUSH
20084: LD_INT 22
20086: PUSH
20087: LD_VAR 0 2
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 21
20098: PUSH
20099: LD_INT 1
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PPUSH
20110: CALL_OW 69
20114: PUSH
20115: LD_INT 0
20117: PLUS
20118: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20119: LD_ADDR_VAR 0 9
20123: PUSH
20124: LD_INT 22
20126: PUSH
20127: LD_VAR 0 2
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: LD_INT 30
20141: PUSH
20142: LD_INT 0
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 30
20151: PUSH
20152: LD_INT 1
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: LIST
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PPUSH
20168: CALL_OW 69
20172: ST_TO_ADDR
// crates := 0 ;
20173: LD_ADDR_VAR 0 4
20177: PUSH
20178: LD_INT 0
20180: ST_TO_ADDR
// oil := 0 ;
20181: LD_ADDR_VAR 0 5
20185: PUSH
20186: LD_INT 0
20188: ST_TO_ADDR
// sib := 0 ;
20189: LD_ADDR_VAR 0 6
20193: PUSH
20194: LD_INT 0
20196: ST_TO_ADDR
// if bases then
20197: LD_VAR 0 9
20201: IFFALSE 20307
// begin for j in bases do
20203: LD_ADDR_VAR 0 3
20207: PUSH
20208: LD_VAR 0 9
20212: PUSH
20213: FOR_IN
20214: IFFALSE 20305
// begin base := GetBase ( j ) ;
20216: LD_ADDR_VAR 0 8
20220: PUSH
20221: LD_VAR 0 3
20225: PPUSH
20226: CALL_OW 274
20230: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
20231: LD_ADDR_VAR 0 4
20235: PUSH
20236: LD_VAR 0 4
20240: PUSH
20241: LD_VAR 0 8
20245: PPUSH
20246: LD_INT 1
20248: PPUSH
20249: CALL_OW 275
20253: PLUS
20254: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
20255: LD_ADDR_VAR 0 5
20259: PUSH
20260: LD_VAR 0 5
20264: PUSH
20265: LD_VAR 0 8
20269: PPUSH
20270: LD_INT 2
20272: PPUSH
20273: CALL_OW 275
20277: PLUS
20278: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
20279: LD_ADDR_VAR 0 6
20283: PUSH
20284: LD_VAR 0 6
20288: PUSH
20289: LD_VAR 0 8
20293: PPUSH
20294: LD_INT 3
20296: PPUSH
20297: CALL_OW 275
20301: PLUS
20302: ST_TO_ADDR
// end ;
20303: GO 20213
20305: POP
20306: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
20307: LD_STRING setSpecText(
20309: PUSH
20310: LD_VAR 0 2
20314: STR
20315: PUSH
20316: LD_STRING ,
20318: STR
20319: PUSH
20320: LD_INT 2
20322: STR
20323: PUSH
20324: LD_STRING ,
20326: STR
20327: PUSH
20328: LD_VAR 0 4
20332: STR
20333: PUSH
20334: LD_STRING )
20336: STR
20337: PPUSH
20338: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
20342: LD_STRING setSpecText(
20344: PUSH
20345: LD_VAR 0 2
20349: STR
20350: PUSH
20351: LD_STRING ,
20353: STR
20354: PUSH
20355: LD_INT 3
20357: STR
20358: PUSH
20359: LD_STRING ,
20361: STR
20362: PUSH
20363: LD_VAR 0 5
20367: STR
20368: PUSH
20369: LD_STRING )
20371: STR
20372: PPUSH
20373: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
20377: LD_STRING setSpecText(
20379: PUSH
20380: LD_VAR 0 2
20384: STR
20385: PUSH
20386: LD_STRING ,
20388: STR
20389: PUSH
20390: LD_INT 4
20392: STR
20393: PUSH
20394: LD_STRING ,
20396: STR
20397: PUSH
20398: LD_VAR 0 6
20402: STR
20403: PUSH
20404: LD_STRING )
20406: STR
20407: PPUSH
20408: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
20412: LD_STRING setSpecText(
20414: PUSH
20415: LD_VAR 0 2
20419: STR
20420: PUSH
20421: LD_STRING ,
20423: STR
20424: PUSH
20425: LD_INT 5
20427: STR
20428: PUSH
20429: LD_STRING ,
20431: STR
20432: PUSH
20433: LD_VAR 0 7
20437: STR
20438: PUSH
20439: LD_STRING )
20441: STR
20442: PPUSH
20443: CALL_OW 559
// end ; end ;
20447: GO 20064
20449: POP
20450: POP
// end ;
20451: LD_VAR 0 1
20455: RET
// every 0 0$1 do
20456: GO 20458
20458: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
20459: LD_STRING setSpecLogoNumber(
20461: PUSH
20462: LD_INT 2
20464: STR
20465: PUSH
20466: LD_STRING ,
20468: STR
20469: PUSH
20470: LD_INT 1
20472: STR
20473: PUSH
20474: LD_STRING )
20476: STR
20477: PPUSH
20478: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
20482: LD_STRING setSpecLogoNumber(
20484: PUSH
20485: LD_INT 3
20487: STR
20488: PUSH
20489: LD_STRING ,
20491: STR
20492: PUSH
20493: LD_INT 2
20495: STR
20496: PUSH
20497: LD_STRING )
20499: STR
20500: PPUSH
20501: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
20505: LD_STRING setSpecLogoNumber(
20507: PUSH
20508: LD_INT 4
20510: STR
20511: PUSH
20512: LD_STRING ,
20514: STR
20515: PUSH
20516: LD_INT 3
20518: STR
20519: PUSH
20520: LD_STRING )
20522: STR
20523: PPUSH
20524: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
20528: LD_STRING setSpecLogoNumber(
20530: PUSH
20531: LD_INT 5
20533: STR
20534: PUSH
20535: LD_STRING ,
20537: STR
20538: PUSH
20539: LD_INT 4
20541: STR
20542: PUSH
20543: LD_STRING )
20545: STR
20546: PPUSH
20547: CALL_OW 559
// end ;
20551: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
20552: LD_INT 2
20554: PUSH
20555: LD_INT 30
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 30
20567: PUSH
20568: LD_INT 1
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: LIST
20579: PPUSH
20580: CALL_OW 69
20584: IFFALSE 20594
20586: GO 20588
20588: DISABLE
// begin enable ;
20589: ENABLE
// UpdateSpectatorBar ;
20590: CALL 20040 0 0
// end ;
20594: END
