// export Neutral ; export def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_siberite_bomb , def_second_oil , def_other_nation , def_vehicles_too , def_builduptime , def_find_people , def_lost_people , def_win_rules , def_people_respawning ; export is_depot , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , siberite_bomb_Delay , morale_decreasing_time , battle_flags_id , chance_loose , chance_find , amount_of_apemen , heroes , WaitServerStrings ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export buildings_def , start_def ; export commander ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
   8: PPUSH
   9: PPUSH
  10: PPUSH
// if MultiPlayer then
  11: LD_OWVAR 4
  15: IFFALSE 69
// begin Your_Side = mp_player_side ;
  17: LD_ADDR_OWVAR 2
  21: PUSH
  22: LD_OWVAR 7
  26: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  27: LD_ADDR_EXP 37
  31: PUSH
  32: LD_OWVAR 17
  36: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  37: LD_ADDR_EXP 34
  41: PUSH
  42: LD_OWVAR 15
  46: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  47: LD_ADDR_EXP 38
  51: PUSH
  52: LD_OWVAR 16
  56: ST_TO_ADDR
// Teams = mp_teams ;
  57: LD_ADDR_EXP 35
  61: PUSH
  62: LD_OWVAR 12
  66: ST_TO_ADDR
// end else
  67: GO 223
// begin Your_Side = 4 ;
  69: LD_ADDR_OWVAR 2
  73: PUSH
  74: LD_INT 4
  76: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
  77: LD_ADDR_EXP 37
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 3
  87: PUSH
  88: LD_INT 0
  90: PUSH
  91: LD_INT 1
  93: PUSH
  94: LD_INT 0
  96: PUSH
  97: LD_INT 2
  99: PUSH
 100: LD_INT 4
 102: PUSH
 103: LD_INT 0
 105: PUSH
 106: EMPTY
 107: LIST
 108: LIST
 109: LIST
 110: LIST
 111: LIST
 112: LIST
 113: LIST
 114: LIST
 115: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 116: LD_ADDR_EXP 34
 120: PUSH
 121: LD_INT 0
 123: PUSH
 124: LD_INT 1
 126: PUSH
 127: LD_INT 0
 129: PUSH
 130: LD_INT 2
 132: PUSH
 133: LD_INT 0
 135: PUSH
 136: LD_INT 1
 138: PUSH
 139: LD_INT 2
 141: PUSH
 142: LD_INT 0
 144: PUSH
 145: EMPTY
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: LIST
 151: LIST
 152: LIST
 153: LIST
 154: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 3 , 0 , 3 , 3 , 0 ] ;
 155: LD_ADDR_EXP 38
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 3
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 3
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 0
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 7 , 4 ] ] ;
 194: LD_ADDR_EXP 35
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 6
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 7
 211: PUSH
 212: LD_INT 4
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: ST_TO_ADDR
// end ; Side_Comps := [ ] ;
 223: LD_ADDR_EXP 36
 227: PUSH
 228: EMPTY
 229: ST_TO_ADDR
// if MultiPlayer then
 230: LD_OWVAR 4
 234: IFFALSE 459
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 236: LD_ADDR_EXP 2
 240: PUSH
 241: LD_INT 0
 243: PPUSH
 244: CALL_OW 426
 248: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 249: LD_ADDR_EXP 3
 253: PUSH
 254: LD_INT 1
 256: PPUSH
 257: CALL_OW 426
 261: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 262: LD_ADDR_EXP 4
 266: PUSH
 267: LD_INT 2
 269: PPUSH
 270: CALL_OW 426
 274: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 275: LD_ADDR_EXP 5
 279: PUSH
 280: LD_INT 3
 282: PPUSH
 283: CALL_OW 426
 287: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 288: LD_ADDR_EXP 6
 292: PUSH
 293: LD_INT 4
 295: PPUSH
 296: CALL_OW 426
 300: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 301: LD_ADDR_EXP 7
 305: PUSH
 306: LD_INT 10
 308: PPUSH
 309: CALL_OW 426
 313: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 314: LD_ADDR_EXP 8
 318: PUSH
 319: LD_INT 11
 321: PPUSH
 322: CALL_OW 426
 326: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 327: LD_ADDR_EXP 9
 331: PUSH
 332: LD_INT 12
 334: PPUSH
 335: CALL_OW 426
 339: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 340: LD_ADDR_EXP 10
 344: PUSH
 345: LD_INT 13
 347: PPUSH
 348: CALL_OW 426
 352: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 353: LD_ADDR_EXP 11
 357: PUSH
 358: LD_INT 15
 360: PPUSH
 361: CALL_OW 426
 365: ST_TO_ADDR
// def_second_oil = GetMultiplayerSetting ( 16 ) ;
 366: LD_ADDR_EXP 12
 370: PUSH
 371: LD_INT 16
 373: PPUSH
 374: CALL_OW 426
 378: ST_TO_ADDR
// def_other_nation = GetMultiplayerSetting ( 17 ) ;
 379: LD_ADDR_EXP 13
 383: PUSH
 384: LD_INT 17
 386: PPUSH
 387: CALL_OW 426
 391: ST_TO_ADDR
// def_vehicles_too = GetMultiplayerSetting ( 18 ) ;
 392: LD_ADDR_EXP 14
 396: PUSH
 397: LD_INT 18
 399: PPUSH
 400: CALL_OW 426
 404: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 405: LD_ADDR_EXP 15
 409: PUSH
 410: LD_INT 20
 412: PPUSH
 413: CALL_OW 426
 417: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 418: LD_ADDR_VAR 0 9
 422: PUSH
 423: LD_INT 22
 425: PPUSH
 426: CALL_OW 426
 430: ST_TO_ADDR
// def_find_people = GetMultiplayerSetting ( 23 ) ;
 431: LD_ADDR_EXP 16
 435: PUSH
 436: LD_INT 23
 438: PPUSH
 439: CALL_OW 426
 443: ST_TO_ADDR
// def_lost_people = GetMultiplayerSetting ( 24 ) ;
 444: LD_ADDR_EXP 17
 448: PUSH
 449: LD_INT 24
 451: PPUSH
 452: CALL_OW 426
 456: ST_TO_ADDR
// end else
 457: GO 599
// begin randomize ;
 459: CALL_OW 10
// def_base_level = 3 ;
 463: LD_ADDR_EXP 2
 467: PUSH
 468: LD_INT 3
 470: ST_TO_ADDR
// def_amount_of_people = 11 ;
 471: LD_ADDR_EXP 3
 475: PUSH
 476: LD_INT 11
 478: ST_TO_ADDR
// def_initial_level = 1 ;
 479: LD_ADDR_EXP 4
 483: PUSH
 484: LD_INT 1
 486: ST_TO_ADDR
// def_starting_resources = 2 ;
 487: LD_ADDR_EXP 5
 491: PUSH
 492: LD_INT 2
 494: ST_TO_ADDR
// def_shipments_density = 50 ;
 495: LD_ADDR_EXP 6
 499: PUSH
 500: LD_INT 50
 502: ST_TO_ADDR
// def_shared_vision = 1 ;
 503: LD_ADDR_EXP 7
 507: PUSH
 508: LD_INT 1
 510: ST_TO_ADDR
// def_morale_flags = 1 ;
 511: LD_ADDR_EXP 8
 515: PUSH
 516: LD_INT 1
 518: ST_TO_ADDR
// def_siberite_detection = 1 ;
 519: LD_ADDR_EXP 9
 523: PUSH
 524: LD_INT 1
 526: ST_TO_ADDR
// def_amount_of_apemen = 1 ;
 527: LD_ADDR_EXP 10
 531: PUSH
 532: LD_INT 1
 534: ST_TO_ADDR
// def_siberite_bomb = 2 ;
 535: LD_ADDR_EXP 11
 539: PUSH
 540: LD_INT 2
 542: ST_TO_ADDR
// def_second_oil = 1 ;
 543: LD_ADDR_EXP 12
 547: PUSH
 548: LD_INT 1
 550: ST_TO_ADDR
// def_builduptime = 1 ;
 551: LD_ADDR_EXP 15
 555: PUSH
 556: LD_INT 1
 558: ST_TO_ADDR
// def_other_nation = 1 ;
 559: LD_ADDR_EXP 13
 563: PUSH
 564: LD_INT 1
 566: ST_TO_ADDR
// def_vehicles_too = 0 ;
 567: LD_ADDR_EXP 14
 571: PUSH
 572: LD_INT 0
 574: ST_TO_ADDR
// tech_level = 4 ;
 575: LD_ADDR_VAR 0 9
 579: PUSH
 580: LD_INT 4
 582: ST_TO_ADDR
// def_find_people = 2 ;
 583: LD_ADDR_EXP 16
 587: PUSH
 588: LD_INT 2
 590: ST_TO_ADDR
// def_lost_people = 1 ;
 591: LD_ADDR_EXP 17
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// end ; def_win_rules := 0 ;
 599: LD_ADDR_EXP 18
 603: PUSH
 604: LD_INT 0
 606: ST_TO_ADDR
// def_people_respawning := 0 ;
 607: LD_ADDR_EXP 19
 611: PUSH
 612: LD_INT 0
 614: ST_TO_ADDR
// if isSGUI then
 615: LD_OWVAR 83
 619: IFFALSE 627
// setMpTechs ( ) else
 621: CALL 14284 0 0
 625: GO 640
// SetMpTechLevel ( tech_level + 1 ) ;
 627: LD_VAR 0 9
 631: PUSH
 632: LD_INT 1
 634: PLUS
 635: PPUSH
 636: CALL 14431 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 640: LD_ADDR_EXP 20
 644: PUSH
 645: LD_INT 0
 647: PUSH
 648: LD_INT 1
 650: PUSH
 651: LD_INT 1
 653: PUSH
 654: LD_INT 1
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: PUSH
 663: LD_EXP 2
 667: PUSH
 668: LD_INT 1
 670: PLUS
 671: ARRAY
 672: ST_TO_ADDR
// initial_level = [ 1 , 2 , 3 , 5 , 7 ] [ def_initial_level + 1 ] ;
 673: LD_ADDR_EXP 22
 677: PUSH
 678: LD_INT 1
 680: PUSH
 681: LD_INT 2
 683: PUSH
 684: LD_INT 3
 686: PUSH
 687: LD_INT 5
 689: PUSH
 690: LD_INT 7
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: PUSH
 700: LD_EXP 4
 704: PUSH
 705: LD_INT 1
 707: PLUS
 708: ARRAY
 709: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 710: LD_ADDR_EXP 24
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: PUSH
 729: LD_INT 30
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: LD_INT 0
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 50
 745: PUSH
 746: LD_INT 20
 748: PUSH
 749: LD_INT 0
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 80
 759: PUSH
 760: LD_INT 40
 762: PUSH
 763: LD_INT 20
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: PUSH
 777: LD_EXP 5
 781: PUSH
 782: LD_INT 1
 784: PLUS
 785: ARRAY
 786: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 787: LD_ADDR_EXP 21
 791: PUSH
 792: LD_EXP 3
 796: PUSH
 797: LD_INT 4
 799: PLUS
 800: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
 801: LD_ADDR_EXP 25
 805: PUSH
 806: LD_INT 150
 808: PUSH
 809: LD_EXP 6
 813: MINUS
 814: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
 815: LD_ADDR_EXP 31
 819: PUSH
 820: LD_INT 0
 822: PUSH
 823: LD_INT 3
 825: PUSH
 826: LD_INT 6
 828: PUSH
 829: LD_INT 9
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_EXP 10
 842: PUSH
 843: LD_INT 1
 845: PLUS
 846: ARRAY
 847: ST_TO_ADDR
// if def_find_people then
 848: LD_EXP 16
 852: IFFALSE 886
// chance_find = 20 * ( ( 100 - ( ( def_find_people - 1 ) * 10 ) ) / 100 ) else
 854: LD_ADDR_EXP 30
 858: PUSH
 859: LD_INT 20
 861: PUSH
 862: LD_INT 100
 864: PUSH
 865: LD_EXP 16
 869: PUSH
 870: LD_INT 1
 872: MINUS
 873: PUSH
 874: LD_INT 10
 876: MUL
 877: MINUS
 878: PUSH
 879: LD_INT 100
 881: DIVREAL
 882: MUL
 883: ST_TO_ADDR
 884: GO 894
// chance_find = 21 ;
 886: LD_ADDR_EXP 30
 890: PUSH
 891: LD_INT 21
 893: ST_TO_ADDR
// if def_lost_people then
 894: LD_EXP 17
 898: IFFALSE 932
// chance_loose = 500 * ( ( 100 - ( ( def_find_people - 1 ) * 12 ) ) / 100 ) else
 900: LD_ADDR_EXP 29
 904: PUSH
 905: LD_INT 500
 907: PUSH
 908: LD_INT 100
 910: PUSH
 911: LD_EXP 16
 915: PUSH
 916: LD_INT 1
 918: MINUS
 919: PUSH
 920: LD_INT 12
 922: MUL
 923: MINUS
 924: PUSH
 925: LD_INT 100
 927: DIVREAL
 928: MUL
 929: ST_TO_ADDR
 930: GO 940
// chance_loose = 0 ;
 932: LD_ADDR_EXP 29
 936: PUSH
 937: LD_INT 0
 939: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
 940: LD_ADDR_EXP 27
 944: PUSH
 945: LD_INT 1
 947: NEG
 948: PUSH
 949: LD_INT 350
 951: PUSH
 952: LD_INT 700
 954: PUSH
 955: LD_INT 1400
 957: PUSH
 958: LD_INT 0
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: LIST
 966: LIST
 967: PUSH
 968: LD_EXP 8
 972: PUSH
 973: LD_INT 1
 975: PLUS
 976: ARRAY
 977: ST_TO_ADDR
// battle_flags_id = [ ] ;
 978: LD_ADDR_EXP 28
 982: PUSH
 983: EMPTY
 984: ST_TO_ADDR
// if def_siberite_bomb = 0 then
 985: LD_EXP 11
 989: PUSH
 990: LD_INT 0
 992: EQUAL
 993: IFFALSE 1005
// siberite_bomb_Delay = 0 else
 995: LD_ADDR_EXP 26
 999: PUSH
1000: LD_INT 0
1002: ST_TO_ADDR
1003: GO 1027
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1005: LD_ADDR_EXP 26
1009: PUSH
1010: LD_EXP 11
1014: PUSH
1015: LD_INT 1
1017: MINUS
1018: PUSH
1019: LD_INT 21000
1021: MUL
1022: PUSH
1023: LD_INT 1
1025: PLUS
1026: ST_TO_ADDR
// end ;
1027: LD_VAR 0 1
1031: RET
// function prepare_map_coordinates ; begin
1032: LD_INT 0
1034: PPUSH
// start_def = [ [ 24 , 13 ] , [ 93 , 12 ] , [ 53 , 79 ] , [ 147 , 86 ] ] ;
1035: LD_ADDR_EXP 41
1039: PUSH
1040: LD_INT 24
1042: PUSH
1043: LD_INT 13
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: LD_INT 93
1052: PUSH
1053: LD_INT 12
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PUSH
1060: LD_INT 53
1062: PUSH
1063: LD_INT 79
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: PUSH
1070: LD_INT 147
1072: PUSH
1073: LD_INT 86
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: ST_TO_ADDR
// case def_base_level of 0 :
1086: LD_EXP 2
1090: PUSH
1091: LD_INT 0
1093: DOUBLE
1094: EQUAL
1095: IFTRUE 1099
1097: GO 1121
1099: POP
// begin buildings_def = [ [ ] , [ ] , [ ] , [ ] ] ;
1100: LD_ADDR_EXP 40
1104: PUSH
1105: EMPTY
1106: PUSH
1107: EMPTY
1108: PUSH
1109: EMPTY
1110: PUSH
1111: EMPTY
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: ST_TO_ADDR
// end ; 1 :
1119: GO 2808
1121: LD_INT 1
1123: DOUBLE
1124: EQUAL
1125: IFTRUE 1129
1127: GO 1227
1129: POP
// begin buildings_def = [ [ [ b_depot , 16 , 5 , 3 ] ] , [ [ b_depot , 89 , 5 , 3 ] ] , [ [ b_depot , 56 , 91 , 0 ] ] , [ [ b_depot , 151 , 94 , 0 ] ] ] ;
1130: LD_ADDR_EXP 40
1134: PUSH
1135: LD_INT 0
1137: PUSH
1138: LD_INT 16
1140: PUSH
1141: LD_INT 5
1143: PUSH
1144: LD_INT 3
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: EMPTY
1154: LIST
1155: PUSH
1156: LD_INT 0
1158: PUSH
1159: LD_INT 89
1161: PUSH
1162: LD_INT 5
1164: PUSH
1165: LD_INT 3
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: EMPTY
1175: LIST
1176: PUSH
1177: LD_INT 0
1179: PUSH
1180: LD_INT 56
1182: PUSH
1183: LD_INT 91
1185: PUSH
1186: LD_INT 0
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: LIST
1194: PUSH
1195: EMPTY
1196: LIST
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: LD_INT 151
1203: PUSH
1204: LD_INT 94
1206: PUSH
1207: LD_INT 0
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: PUSH
1219: EMPTY
1220: LIST
1221: LIST
1222: LIST
1223: LIST
1224: ST_TO_ADDR
// end ; 2 :
1225: GO 2808
1227: LD_INT 2
1229: DOUBLE
1230: EQUAL
1231: IFTRUE 1235
1233: GO 1865
1235: POP
// begin buildings_def = [ [ [ b_depot , 16 , 5 , 3 ] , [ b_oil_mine , 9 , 4 , 0 ] , [ b_lab , 16 , 14 , 0 ] , [ b_workshop , 26 , 7 , 3 ] , [ b_armoury , 41 , 16 , 5 ] , [ b_breastwork , 24 , 21 , 0 ] , [ b_breastwork , 41 , 25 , 5 ] , [ b_oil_power , 10 , 9 , 1 ] ] , [ [ b_depot , 89 , 5 , 3 ] , [ b_oil_mine , 97 , 3 , 4 ] , [ b_lab , 100 , 10 , 4 ] , [ b_workshop , 88 , 17 , 2 ] , [ b_armoury , 87 , 25 , 2 ] , [ b_breastwork , 96 , 25 , 0 ] , [ b_breastwork , 72 , 13 , 0 ] , [ b_oil_power , 94 , 4 , 1 ] ] , [ [ b_depot , 56 , 91 , 0 ] , [ b_oil_mine , 51 , 88 , 0 ] , [ b_lab , 61 , 84 , 4 ] , [ b_workshop , 46 , 80 , 0 ] , [ b_armoury , 52 , 72 , 3 ] , [ b_breastwork , 43 , 66 , 3 ] , [ b_breastwork , 61 , 75 , 3 ] , [ b_oil_power , 61 , 90 , 3 ] ] , [ [ b_depot , 151 , 94 , 0 ] , [ b_oil_mine , 160 , 87 , 3 ] , [ b_lab , 159 , 94 , 5 ] , [ b_workshop , 146 , 80 , 3 ] , [ b_armoury , 139 , 91 , 1 ] , [ b_breastwork , 148 , 73 , 3 ] , [ b_breastwork , 140 , 71 , 2 ] , [ b_oil_power , 146 , 97 , 3 ] ] ] ;
1236: LD_ADDR_EXP 40
1240: PUSH
1241: LD_INT 0
1243: PUSH
1244: LD_INT 16
1246: PUSH
1247: LD_INT 5
1249: PUSH
1250: LD_INT 3
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: PUSH
1259: LD_INT 29
1261: PUSH
1262: LD_INT 9
1264: PUSH
1265: LD_INT 4
1267: PUSH
1268: LD_INT 0
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 6
1279: PUSH
1280: LD_INT 16
1282: PUSH
1283: LD_INT 14
1285: PUSH
1286: LD_INT 0
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 2
1297: PUSH
1298: LD_INT 26
1300: PUSH
1301: LD_INT 7
1303: PUSH
1304: LD_INT 3
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 4
1315: PUSH
1316: LD_INT 41
1318: PUSH
1319: LD_INT 16
1321: PUSH
1322: LD_INT 5
1324: PUSH
1325: EMPTY
1326: LIST
1327: LIST
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 31
1333: PUSH
1334: LD_INT 24
1336: PUSH
1337: LD_INT 21
1339: PUSH
1340: LD_INT 0
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 31
1351: PUSH
1352: LD_INT 41
1354: PUSH
1355: LD_INT 25
1357: PUSH
1358: LD_INT 5
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 26
1369: PUSH
1370: LD_INT 10
1372: PUSH
1373: LD_INT 9
1375: PUSH
1376: LD_INT 1
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: PUSH
1395: LD_INT 0
1397: PUSH
1398: LD_INT 89
1400: PUSH
1401: LD_INT 5
1403: PUSH
1404: LD_INT 3
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: PUSH
1413: LD_INT 29
1415: PUSH
1416: LD_INT 97
1418: PUSH
1419: LD_INT 3
1421: PUSH
1422: LD_INT 4
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: PUSH
1431: LD_INT 6
1433: PUSH
1434: LD_INT 100
1436: PUSH
1437: LD_INT 10
1439: PUSH
1440: LD_INT 4
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 2
1451: PUSH
1452: LD_INT 88
1454: PUSH
1455: LD_INT 17
1457: PUSH
1458: LD_INT 2
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: PUSH
1467: LD_INT 4
1469: PUSH
1470: LD_INT 87
1472: PUSH
1473: LD_INT 25
1475: PUSH
1476: LD_INT 2
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: PUSH
1485: LD_INT 31
1487: PUSH
1488: LD_INT 96
1490: PUSH
1491: LD_INT 25
1493: PUSH
1494: LD_INT 0
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: PUSH
1503: LD_INT 31
1505: PUSH
1506: LD_INT 72
1508: PUSH
1509: LD_INT 13
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 26
1523: PUSH
1524: LD_INT 94
1526: PUSH
1527: LD_INT 4
1529: PUSH
1530: LD_INT 1
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 56
1554: PUSH
1555: LD_INT 91
1557: PUSH
1558: LD_INT 0
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 29
1569: PUSH
1570: LD_INT 51
1572: PUSH
1573: LD_INT 88
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 6
1587: PUSH
1588: LD_INT 61
1590: PUSH
1591: LD_INT 84
1593: PUSH
1594: LD_INT 4
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 2
1605: PUSH
1606: LD_INT 46
1608: PUSH
1609: LD_INT 80
1611: PUSH
1612: LD_INT 0
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: PUSH
1621: LD_INT 4
1623: PUSH
1624: LD_INT 52
1626: PUSH
1627: LD_INT 72
1629: PUSH
1630: LD_INT 3
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 31
1641: PUSH
1642: LD_INT 43
1644: PUSH
1645: LD_INT 66
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 31
1659: PUSH
1660: LD_INT 61
1662: PUSH
1663: LD_INT 75
1665: PUSH
1666: LD_INT 3
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: PUSH
1675: LD_INT 26
1677: PUSH
1678: LD_INT 61
1680: PUSH
1681: LD_INT 90
1683: PUSH
1684: LD_INT 3
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 0
1705: PUSH
1706: LD_INT 151
1708: PUSH
1709: LD_INT 94
1711: PUSH
1712: LD_INT 0
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 29
1723: PUSH
1724: LD_INT 160
1726: PUSH
1727: LD_INT 87
1729: PUSH
1730: LD_INT 3
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 6
1741: PUSH
1742: LD_INT 159
1744: PUSH
1745: LD_INT 94
1747: PUSH
1748: LD_INT 5
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 146
1762: PUSH
1763: LD_INT 80
1765: PUSH
1766: LD_INT 3
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: LD_INT 4
1777: PUSH
1778: LD_INT 139
1780: PUSH
1781: LD_INT 91
1783: PUSH
1784: LD_INT 1
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 31
1795: PUSH
1796: LD_INT 148
1798: PUSH
1799: LD_INT 73
1801: PUSH
1802: LD_INT 3
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: PUSH
1811: LD_INT 31
1813: PUSH
1814: LD_INT 140
1816: PUSH
1817: LD_INT 71
1819: PUSH
1820: LD_INT 2
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 26
1831: PUSH
1832: LD_INT 146
1834: PUSH
1835: LD_INT 97
1837: PUSH
1838: LD_INT 3
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: ST_TO_ADDR
// end ; 3 :
1863: GO 2808
1865: LD_INT 3
1867: DOUBLE
1868: EQUAL
1869: IFTRUE 1873
1871: GO 2807
1873: POP
// begin buildings_def = [ [ [ b_warehouse , 16 , 5 , 3 ] , [ b_oil_mine , 9 , 4 , 4 ] , [ b_lab , 16 , 14 , 0 ] , [ b_factory , 26 , 7 , 3 ] , [ b_barracks , 41 , 16 , 5 ] , [ b_bunker , 24 , 21 , 0 ] , [ b_bunker , 40 , 24 , 5 ] , [ b_ext_gun , 26 , 3 , 3 ] , [ b_ext_track , 23 , 4 , 2 ] , [ b_oil_power , 10 , 9 , 1 ] , [ b_siberite_power , 32 , 3 , 1 ] , [ b_siberite_mine , 37 , 24 , 5 ] ] , [ [ b_warehouse , 89 , 5 , 3 ] , [ b_oil_mine , 97 , 3 , 4 ] , [ b_lab , 100 , 10 , 4 ] , [ b_factory , 88 , 17 , 2 ] , [ b_barracks , 87 , 25 , 2 ] , [ b_bunker , 100 , 31 , 5 ] , [ b_bunker , 72 , 13 , 0 ] , [ b_ext_gun , 84 , 13 , 2 ] , [ b_ext_track , 88 , 14 , 3 ] , [ b_oil_power , 94 , 4 , 1 ] , [ b_siberite_power , 66 , 3 , 1 ] , [ b_siberite_mine , 71 , 4 , 2 ] ] , [ [ b_warehouse , 56 , 91 , 0 ] , [ b_oil_mine , 51 , 88 , 0 ] , [ b_lab , 61 , 84 , 4 ] , [ b_factory , 46 , 80 , 0 ] , [ b_barracks , 50 , 64 , 3 ] , [ b_bunker , 42 , 57 , 1 ] , [ b_bunker , 60 , 72 , 3 ] , [ b_ext_gun , 46 , 84 , 0 ] , [ b_ext_track , 43 , 80 , 1 ] , [ b_oil_power , 61 , 90 , 3 ] , [ b_siberite_power , 38 , 72 , 3 ] , [ b_siberite_mine , 35 , 59 , 1 ] ] , [ [ b_warehouse , 151 , 94 , 0 ] , [ b_oil_mine , 160 , 87 , 3 ] , [ b_lab , 159 , 94 , 5 ] , [ b_factory , 146 , 80 , 3 ] , [ b_barracks , 129 , 89 , 1 ] , [ b_bunker , 133 , 63 , 3 ] , [ b_bunker , 141 , 62 , 3 ] , [ b_ext_gun , 143 , 77 , 2 ] , [ b_ext_track , 142 , 80 , 1 ] , [ b_oil_power , 146 , 97 , 3 ] , [ b_siberite_power , 155 , 80 , 3 ] , [ b_siberite_mine , 135 , 83 , 4 ] ] ] ;
1874: LD_ADDR_EXP 40
1878: PUSH
1879: LD_INT 1
1881: PUSH
1882: LD_INT 16
1884: PUSH
1885: LD_INT 5
1887: PUSH
1888: LD_INT 3
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 29
1899: PUSH
1900: LD_INT 9
1902: PUSH
1903: LD_INT 4
1905: PUSH
1906: LD_INT 4
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 6
1917: PUSH
1918: LD_INT 16
1920: PUSH
1921: LD_INT 14
1923: PUSH
1924: LD_INT 0
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: PUSH
1933: LD_INT 3
1935: PUSH
1936: LD_INT 26
1938: PUSH
1939: LD_INT 7
1941: PUSH
1942: LD_INT 3
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 5
1953: PUSH
1954: LD_INT 41
1956: PUSH
1957: LD_INT 16
1959: PUSH
1960: LD_INT 5
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: LIST
1968: PUSH
1969: LD_INT 32
1971: PUSH
1972: LD_INT 24
1974: PUSH
1975: LD_INT 21
1977: PUSH
1978: LD_INT 0
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: PUSH
1987: LD_INT 32
1989: PUSH
1990: LD_INT 40
1992: PUSH
1993: LD_INT 24
1995: PUSH
1996: LD_INT 5
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: PUSH
2005: LD_INT 17
2007: PUSH
2008: LD_INT 26
2010: PUSH
2011: LD_INT 3
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 16
2025: PUSH
2026: LD_INT 23
2028: PUSH
2029: LD_INT 4
2031: PUSH
2032: LD_INT 2
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 26
2043: PUSH
2044: LD_INT 10
2046: PUSH
2047: LD_INT 9
2049: PUSH
2050: LD_INT 1
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 28
2061: PUSH
2062: LD_INT 32
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: LD_INT 1
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 30
2079: PUSH
2080: LD_INT 37
2082: PUSH
2083: LD_INT 24
2085: PUSH
2086: LD_INT 5
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 1
2111: PUSH
2112: LD_INT 89
2114: PUSH
2115: LD_INT 5
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: PUSH
2127: LD_INT 29
2129: PUSH
2130: LD_INT 97
2132: PUSH
2133: LD_INT 3
2135: PUSH
2136: LD_INT 4
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: LIST
2144: PUSH
2145: LD_INT 6
2147: PUSH
2148: LD_INT 100
2150: PUSH
2151: LD_INT 10
2153: PUSH
2154: LD_INT 4
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 3
2165: PUSH
2166: LD_INT 88
2168: PUSH
2169: LD_INT 17
2171: PUSH
2172: LD_INT 2
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 5
2183: PUSH
2184: LD_INT 87
2186: PUSH
2187: LD_INT 25
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: LIST
2197: LIST
2198: PUSH
2199: LD_INT 32
2201: PUSH
2202: LD_INT 100
2204: PUSH
2205: LD_INT 31
2207: PUSH
2208: LD_INT 5
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: PUSH
2217: LD_INT 32
2219: PUSH
2220: LD_INT 72
2222: PUSH
2223: LD_INT 13
2225: PUSH
2226: LD_INT 0
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 17
2237: PUSH
2238: LD_INT 84
2240: PUSH
2241: LD_INT 13
2243: PUSH
2244: LD_INT 2
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: PUSH
2253: LD_INT 16
2255: PUSH
2256: LD_INT 88
2258: PUSH
2259: LD_INT 14
2261: PUSH
2262: LD_INT 3
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: PUSH
2271: LD_INT 26
2273: PUSH
2274: LD_INT 94
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 1
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: LD_INT 28
2291: PUSH
2292: LD_INT 66
2294: PUSH
2295: LD_INT 3
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: LIST
2305: LIST
2306: PUSH
2307: LD_INT 30
2309: PUSH
2310: LD_INT 71
2312: PUSH
2313: LD_INT 4
2315: PUSH
2316: LD_INT 2
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: PUSH
2339: LD_INT 1
2341: PUSH
2342: LD_INT 56
2344: PUSH
2345: LD_INT 91
2347: PUSH
2348: LD_INT 0
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 29
2359: PUSH
2360: LD_INT 51
2362: PUSH
2363: LD_INT 88
2365: PUSH
2366: LD_INT 0
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 6
2377: PUSH
2378: LD_INT 61
2380: PUSH
2381: LD_INT 84
2383: PUSH
2384: LD_INT 4
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: PUSH
2393: LD_INT 3
2395: PUSH
2396: LD_INT 46
2398: PUSH
2399: LD_INT 80
2401: PUSH
2402: LD_INT 0
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 5
2413: PUSH
2414: LD_INT 50
2416: PUSH
2417: LD_INT 64
2419: PUSH
2420: LD_INT 3
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: PUSH
2429: LD_INT 32
2431: PUSH
2432: LD_INT 42
2434: PUSH
2435: LD_INT 57
2437: PUSH
2438: LD_INT 1
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: PUSH
2447: LD_INT 32
2449: PUSH
2450: LD_INT 60
2452: PUSH
2453: LD_INT 72
2455: PUSH
2456: LD_INT 3
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 17
2467: PUSH
2468: LD_INT 46
2470: PUSH
2471: LD_INT 84
2473: PUSH
2474: LD_INT 0
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_INT 16
2485: PUSH
2486: LD_INT 43
2488: PUSH
2489: LD_INT 80
2491: PUSH
2492: LD_INT 1
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 26
2503: PUSH
2504: LD_INT 61
2506: PUSH
2507: LD_INT 90
2509: PUSH
2510: LD_INT 3
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 28
2521: PUSH
2522: LD_INT 38
2524: PUSH
2525: LD_INT 72
2527: PUSH
2528: LD_INT 3
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: PUSH
2537: LD_INT 30
2539: PUSH
2540: LD_INT 35
2542: PUSH
2543: LD_INT 59
2545: PUSH
2546: LD_INT 1
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PUSH
2572: LD_INT 151
2574: PUSH
2575: LD_INT 94
2577: PUSH
2578: LD_INT 0
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: PUSH
2587: LD_INT 29
2589: PUSH
2590: LD_INT 160
2592: PUSH
2593: LD_INT 87
2595: PUSH
2596: LD_INT 3
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 6
2607: PUSH
2608: LD_INT 159
2610: PUSH
2611: LD_INT 94
2613: PUSH
2614: LD_INT 5
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: PUSH
2623: LD_INT 3
2625: PUSH
2626: LD_INT 146
2628: PUSH
2629: LD_INT 80
2631: PUSH
2632: LD_INT 3
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: LIST
2639: LIST
2640: PUSH
2641: LD_INT 5
2643: PUSH
2644: LD_INT 129
2646: PUSH
2647: LD_INT 89
2649: PUSH
2650: LD_INT 1
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: LIST
2657: LIST
2658: PUSH
2659: LD_INT 32
2661: PUSH
2662: LD_INT 133
2664: PUSH
2665: LD_INT 63
2667: PUSH
2668: LD_INT 3
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 32
2679: PUSH
2680: LD_INT 141
2682: PUSH
2683: LD_INT 62
2685: PUSH
2686: LD_INT 3
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 17
2697: PUSH
2698: LD_INT 143
2700: PUSH
2701: LD_INT 77
2703: PUSH
2704: LD_INT 2
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 16
2715: PUSH
2716: LD_INT 142
2718: PUSH
2719: LD_INT 80
2721: PUSH
2722: LD_INT 1
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 26
2733: PUSH
2734: LD_INT 146
2736: PUSH
2737: LD_INT 97
2739: PUSH
2740: LD_INT 3
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 28
2751: PUSH
2752: LD_INT 155
2754: PUSH
2755: LD_INT 80
2757: PUSH
2758: LD_INT 3
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 30
2769: PUSH
2770: LD_INT 135
2772: PUSH
2773: LD_INT 83
2775: PUSH
2776: LD_INT 4
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: ST_TO_ADDR
// end ; end ;
2805: GO 2808
2807: POP
// end ;
2808: LD_VAR 0 1
2812: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2813: LD_INT 0
2815: PPUSH
2816: PPUSH
2817: PPUSH
// Team_Game := 0 ;
2818: LD_ADDR_EXP 39
2822: PUSH
2823: LD_INT 0
2825: ST_TO_ADDR
// for i = 1 to 8 do
2826: LD_ADDR_VAR 0 2
2830: PUSH
2831: DOUBLE
2832: LD_INT 1
2834: DEC
2835: ST_TO_ADDR
2836: LD_INT 8
2838: PUSH
2839: FOR_TO
2840: IFFALSE 2866
// Team_Game := Team_Game + Side_Teams [ i ] ;
2842: LD_ADDR_EXP 39
2846: PUSH
2847: LD_EXP 39
2851: PUSH
2852: LD_EXP 34
2856: PUSH
2857: LD_VAR 0 2
2861: ARRAY
2862: PLUS
2863: ST_TO_ADDR
2864: GO 2839
2866: POP
2867: POP
// if not Team_Game then
2868: LD_EXP 39
2872: NOT
2873: IFFALSE 2885
// Team_Game := false else
2875: LD_ADDR_EXP 39
2879: PUSH
2880: LD_INT 0
2882: ST_TO_ADDR
2883: GO 2893
// Team_Game := true ;
2885: LD_ADDR_EXP 39
2889: PUSH
2890: LD_INT 1
2892: ST_TO_ADDR
// if not Team_Game then
2893: LD_EXP 39
2897: NOT
2898: IFFALSE 2996
// begin for i = 1 to 8 do
2900: LD_ADDR_VAR 0 2
2904: PUSH
2905: DOUBLE
2906: LD_INT 1
2908: DEC
2909: ST_TO_ADDR
2910: LD_INT 8
2912: PUSH
2913: FOR_TO
2914: IFFALSE 2992
// for j = 1 to 8 do
2916: LD_ADDR_VAR 0 3
2920: PUSH
2921: DOUBLE
2922: LD_INT 1
2924: DEC
2925: ST_TO_ADDR
2926: LD_INT 8
2928: PUSH
2929: FOR_TO
2930: IFFALSE 2988
// if i <> j then
2932: LD_VAR 0 2
2936: PUSH
2937: LD_VAR 0 3
2941: NONEQUAL
2942: IFFALSE 2966
// SetAttitude ( i , j , att_neutral , true ) else
2944: LD_VAR 0 2
2948: PPUSH
2949: LD_VAR 0 3
2953: PPUSH
2954: LD_INT 0
2956: PPUSH
2957: LD_INT 1
2959: PPUSH
2960: CALL_OW 80
2964: GO 2986
// SetAttitude ( i , j , att_friend , true ) ;
2966: LD_VAR 0 2
2970: PPUSH
2971: LD_VAR 0 3
2975: PPUSH
2976: LD_INT 1
2978: PPUSH
2979: LD_INT 1
2981: PPUSH
2982: CALL_OW 80
2986: GO 2929
2988: POP
2989: POP
2990: GO 2913
2992: POP
2993: POP
// end else
2994: GO 3171
// begin if def_shared_vision then
2996: LD_EXP 7
3000: IFFALSE 3065
// begin for i in Teams do
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: LD_EXP 35
3011: PUSH
3012: FOR_IN
3013: IFFALSE 3063
// for j = 2 to i do
3015: LD_ADDR_VAR 0 3
3019: PUSH
3020: DOUBLE
3021: LD_INT 2
3023: DEC
3024: ST_TO_ADDR
3025: LD_VAR 0 2
3029: PUSH
3030: FOR_TO
3031: IFFALSE 3059
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3033: LD_VAR 0 2
3037: PUSH
3038: LD_VAR 0 3
3042: ARRAY
3043: PPUSH
3044: LD_VAR 0 2
3048: PUSH
3049: LD_INT 1
3051: ARRAY
3052: PPUSH
3053: CALL_OW 343
3057: GO 3030
3059: POP
3060: POP
3061: GO 3012
3063: POP
3064: POP
// end ; for i = 1 to 8 do
3065: LD_ADDR_VAR 0 2
3069: PUSH
3070: DOUBLE
3071: LD_INT 1
3073: DEC
3074: ST_TO_ADDR
3075: LD_INT 8
3077: PUSH
3078: FOR_TO
3079: IFFALSE 3169
// for j = 1 to 8 do
3081: LD_ADDR_VAR 0 3
3085: PUSH
3086: DOUBLE
3087: LD_INT 1
3089: DEC
3090: ST_TO_ADDR
3091: LD_INT 8
3093: PUSH
3094: FOR_TO
3095: IFFALSE 3165
// if Side_Teams [ i ] = Side_Teams [ j ] then
3097: LD_EXP 34
3101: PUSH
3102: LD_VAR 0 2
3106: ARRAY
3107: PUSH
3108: LD_EXP 34
3112: PUSH
3113: LD_VAR 0 3
3117: ARRAY
3118: EQUAL
3119: IFFALSE 3143
// SetAttitude ( i , j , att_friend , true ) else
3121: LD_VAR 0 2
3125: PPUSH
3126: LD_VAR 0 3
3130: PPUSH
3131: LD_INT 1
3133: PPUSH
3134: LD_INT 1
3136: PPUSH
3137: CALL_OW 80
3141: GO 3163
// SetAttitude ( i , j , att_enemy , true ) ;
3143: LD_VAR 0 2
3147: PPUSH
3148: LD_VAR 0 3
3152: PPUSH
3153: LD_INT 2
3155: PPUSH
3156: LD_INT 1
3158: PPUSH
3159: CALL_OW 80
3163: GO 3094
3165: POP
3166: POP
3167: GO 3078
3169: POP
3170: POP
// end ; end ;
3171: LD_VAR 0 1
3175: RET
// function prepare_people ( side , count , cl , x , y , r , var commander ) ; var i , j , un ; begin
3176: LD_INT 0
3178: PPUSH
3179: PPUSH
3180: PPUSH
3181: PPUSH
// result := [ ] ;
3182: LD_ADDR_VAR 0 8
3186: PUSH
3187: EMPTY
3188: ST_TO_ADDR
// for i := 1 to count do
3189: LD_ADDR_VAR 0 9
3193: PUSH
3194: DOUBLE
3195: LD_INT 1
3197: DEC
3198: ST_TO_ADDR
3199: LD_VAR 0 2
3203: PUSH
3204: FOR_TO
3205: IFFALSE 3599
// begin uc_direction := Rand ( 0 , 5 ) ;
3207: LD_ADDR_OWVAR 24
3211: PUSH
3212: LD_INT 0
3214: PPUSH
3215: LD_INT 5
3217: PPUSH
3218: CALL_OW 12
3222: ST_TO_ADDR
// if commander then
3223: LD_FROM_VAR 0 7
3227: IFFALSE 3336
// begin hc_name := mp_sides_players_names [ side ] ;
3229: LD_ADDR_OWVAR 26
3233: PUSH
3234: LD_OWVAR 19
3238: PUSH
3239: LD_VAR 0 1
3243: ARRAY
3244: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
3245: LD_INT 1
3247: PPUSH
3248: LD_INT 2
3250: PPUSH
3251: CALL_OW 12
3255: PPUSH
3256: LD_VAR 0 3
3260: PPUSH
3261: LD_EXP 22
3265: PUSH
3266: LD_INT 2
3268: PLUS
3269: PPUSH
3270: CALL_OW 380
// hc_importance := 105 ;
3274: LD_ADDR_OWVAR 32
3278: PUSH
3279: LD_INT 105
3281: ST_TO_ADDR
// commander := false ;
3282: LD_VAR 0 7
3286: PUSH
3287: LD_INT 0
3289: ST_TO_ADDR
// if Multiplayer then
3290: LD_OWVAR 4
3294: IFFALSE 3334
// begin hc_gallery := MULTIAVATARS ;
3296: LD_ADDR_OWVAR 33
3300: PUSH
3301: LD_STRING MULTIAVATARS
3303: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( Side ) ;
3304: LD_ADDR_OWVAR 34
3308: PUSH
3309: LD_VAR 0 1
3313: PPUSH
3314: CALL_OW 525
3318: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( Side ) ;
3319: LD_ADDR_OWVAR 27
3323: PUSH
3324: LD_VAR 0 1
3328: PPUSH
3329: CALL_OW 526
3333: ST_TO_ADDR
// end ; end else
3334: GO 3399
// begin hc_name :=  ;
3336: LD_ADDR_OWVAR 26
3340: PUSH
3341: LD_STRING 
3343: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
3344: LD_INT 1
3346: PPUSH
3347: LD_INT 2
3349: PPUSH
3350: CALL_OW 12
3354: PPUSH
3355: LD_VAR 0 3
3359: PPUSH
3360: LD_EXP 22
3364: PPUSH
3365: CALL_OW 380
// hc_importance := 0 ;
3369: LD_ADDR_OWVAR 32
3373: PUSH
3374: LD_INT 0
3376: ST_TO_ADDR
// if Multiplayer then
3377: LD_OWVAR 4
3381: IFFALSE 3399
// begin hc_gallery :=  ;
3383: LD_ADDR_OWVAR 33
3387: PUSH
3388: LD_STRING 
3390: ST_TO_ADDR
// hc_face_number := 0 ;
3391: LD_ADDR_OWVAR 34
3395: PUSH
3396: LD_INT 0
3398: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3399: LD_ADDR_VAR 0 11
3403: PUSH
3404: CALL_OW 44
3408: ST_TO_ADDR
// if global_defined then
3409: LD_LOC 2
3413: IFFALSE 3551
// begin j := i ;
3415: LD_ADDR_VAR 0 10
3419: PUSH
3420: LD_VAR 0 9
3424: ST_TO_ADDR
// if cl = class_soldier then
3425: LD_VAR 0 3
3429: PUSH
3430: LD_INT 1
3432: EQUAL
3433: IFFALSE 3451
// j := i + soldiers_created ;
3435: LD_ADDR_VAR 0 10
3439: PUSH
3440: LD_VAR 0 9
3444: PUSH
3445: LD_LOC 3
3449: PLUS
3450: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3451: LD_LOC 1
3455: PUSH
3456: LD_VAR 0 3
3460: ARRAY
3461: PUSH
3462: LD_VAR 0 10
3466: ARRAY
3467: PPUSH
3468: LD_VAR 0 11
3472: PPUSH
3473: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3477: LD_VAR 0 11
3481: PPUSH
3482: LD_INT 2
3484: PPUSH
3485: LD_LOC 1
3489: PUSH
3490: LD_VAR 0 3
3494: ARRAY
3495: PUSH
3496: LD_VAR 0 10
3500: ARRAY
3501: PPUSH
3502: LD_INT 2
3504: PPUSH
3505: CALL_OW 260
3509: PPUSH
3510: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3514: LD_VAR 0 11
3518: PPUSH
3519: LD_INT 1
3521: PPUSH
3522: LD_LOC 1
3526: PUSH
3527: LD_VAR 0 3
3531: ARRAY
3532: PUSH
3533: LD_VAR 0 10
3537: ARRAY
3538: PPUSH
3539: LD_INT 1
3541: PPUSH
3542: CALL_OW 260
3546: PPUSH
3547: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
3551: LD_VAR 0 11
3555: PPUSH
3556: LD_VAR 0 4
3560: PPUSH
3561: LD_VAR 0 5
3565: PPUSH
3566: LD_VAR 0 6
3570: PPUSH
3571: LD_INT 0
3573: PPUSH
3574: CALL_OW 50
// result := result ^ [ un ] ;
3578: LD_ADDR_VAR 0 8
3582: PUSH
3583: LD_VAR 0 8
3587: PUSH
3588: LD_VAR 0 11
3592: PUSH
3593: EMPTY
3594: LIST
3595: ADD
3596: ST_TO_ADDR
// end ;
3597: GO 3204
3599: POP
3600: POP
// if not global_defined then
3601: LD_LOC 2
3605: NOT
3606: IFFALSE 3668
// if cl = class_soldier and global_units then
3608: LD_VAR 0 3
3612: PUSH
3613: LD_INT 1
3615: EQUAL
3616: PUSH
3617: LD_LOC 1
3621: AND
3622: IFFALSE 3649
// global_units := [ global_units [ 1 ] ^ result ] else
3624: LD_ADDR_LOC 1
3628: PUSH
3629: LD_LOC 1
3633: PUSH
3634: LD_INT 1
3636: ARRAY
3637: PUSH
3638: LD_VAR 0 8
3642: ADD
3643: PUSH
3644: EMPTY
3645: LIST
3646: ST_TO_ADDR
3647: GO 3668
// global_units := global_units ^ [ result ] end ;
3649: LD_ADDR_LOC 1
3653: PUSH
3654: LD_LOC 1
3658: PUSH
3659: LD_VAR 0 8
3663: PUSH
3664: EMPTY
3665: LIST
3666: ADD
3667: ST_TO_ADDR
3668: LD_VAR 0 8
3672: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3673: LD_INT 0
3675: PPUSH
3676: PPUSH
3677: PPUSH
3678: PPUSH
3679: PPUSH
3680: PPUSH
3681: PPUSH
3682: PPUSH
3683: PPUSH
3684: PPUSH
3685: PPUSH
3686: PPUSH
3687: PPUSH
// pos := Side_Positions [ side ] ;
3688: LD_ADDR_VAR 0 3
3692: PUSH
3693: LD_EXP 37
3697: PUSH
3698: LD_VAR 0 1
3702: ARRAY
3703: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3704: LD_ADDR_OWVAR 21
3708: PUSH
3709: LD_EXP 38
3713: PUSH
3714: LD_VAR 0 1
3718: ARRAY
3719: ST_TO_ADDR
// uc_side := side ;
3720: LD_ADDR_OWVAR 20
3724: PUSH
3725: LD_VAR 0 1
3729: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
3730: LD_ADDR_OWVAR 44
3734: PUSH
3735: LD_INT 9
3737: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
3738: LD_ADDR_OWVAR 45
3742: PUSH
3743: LD_INT 9
3745: ST_TO_ADDR
// for i in buildings_def [ pos ] do
3746: LD_ADDR_VAR 0 6
3750: PUSH
3751: LD_EXP 40
3755: PUSH
3756: LD_VAR 0 3
3760: ARRAY
3761: PUSH
3762: FOR_IN
3763: IFFALSE 3860
// begin bc_type = i [ 1 ] ;
3765: LD_ADDR_OWVAR 42
3769: PUSH
3770: LD_VAR 0 6
3774: PUSH
3775: LD_INT 1
3777: ARRAY
3778: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3779: LD_VAR 0 6
3783: PUSH
3784: LD_INT 2
3786: ARRAY
3787: PPUSH
3788: LD_VAR 0 6
3792: PUSH
3793: LD_INT 3
3795: ARRAY
3796: PPUSH
3797: LD_VAR 0 6
3801: PUSH
3802: LD_INT 4
3804: ARRAY
3805: PPUSH
3806: CALL_OW 47
// x := buildings_def [ pos ] [ 1 ] [ 2 ] ;
3810: LD_ADDR_VAR 0 4
3814: PUSH
3815: LD_EXP 40
3819: PUSH
3820: LD_VAR 0 3
3824: ARRAY
3825: PUSH
3826: LD_INT 1
3828: ARRAY
3829: PUSH
3830: LD_INT 2
3832: ARRAY
3833: ST_TO_ADDR
// y := buildings_def [ pos ] [ 1 ] [ 2 ] ;
3834: LD_ADDR_VAR 0 5
3838: PUSH
3839: LD_EXP 40
3843: PUSH
3844: LD_VAR 0 3
3848: ARRAY
3849: PUSH
3850: LD_INT 1
3852: ARRAY
3853: PUSH
3854: LD_INT 2
3856: ARRAY
3857: ST_TO_ADDR
// end ;
3858: GO 3762
3860: POP
3861: POP
// if is_depot then
3862: LD_EXP 20
3866: IFFALSE 4016
// begin dep = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
3868: LD_ADDR_VAR 0 10
3872: PUSH
3873: LD_INT 22
3875: PUSH
3876: LD_VAR 0 1
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PUSH
3885: LD_INT 2
3887: PUSH
3888: LD_INT 30
3890: PUSH
3891: LD_INT 0
3893: PUSH
3894: EMPTY
3895: LIST
3896: LIST
3897: PUSH
3898: LD_INT 30
3900: PUSH
3901: LD_INT 1
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: PPUSH
3917: CALL_OW 69
3921: ST_TO_ADDR
// dep = dep [ 1 ] ;
3922: LD_ADDR_VAR 0 10
3926: PUSH
3927: LD_VAR 0 10
3931: PUSH
3932: LD_INT 1
3934: ARRAY
3935: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3936: LD_VAR 0 10
3940: PPUSH
3941: CALL_OW 274
3945: PPUSH
3946: LD_INT 1
3948: PPUSH
3949: LD_EXP 24
3953: PUSH
3954: LD_INT 1
3956: ARRAY
3957: PPUSH
3958: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3962: LD_VAR 0 10
3966: PPUSH
3967: CALL_OW 274
3971: PPUSH
3972: LD_INT 2
3974: PPUSH
3975: LD_EXP 24
3979: PUSH
3980: LD_INT 2
3982: ARRAY
3983: PPUSH
3984: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3988: LD_VAR 0 10
3992: PPUSH
3993: CALL_OW 274
3997: PPUSH
3998: LD_INT 3
4000: PPUSH
4001: LD_EXP 24
4005: PUSH
4006: LD_INT 3
4008: ARRAY
4009: PPUSH
4010: CALL_OW 277
// end else
4014: GO 4160
// begin for i := 1 to 3 do
4016: LD_ADDR_VAR 0 6
4020: PUSH
4021: DOUBLE
4022: LD_INT 1
4024: DEC
4025: ST_TO_ADDR
4026: LD_INT 3
4028: PUSH
4029: FOR_TO
4030: IFFALSE 4158
// begin r := starting_resources [ i ] ;
4032: LD_ADDR_VAR 0 7
4036: PUSH
4037: LD_EXP 24
4041: PUSH
4042: LD_VAR 0 6
4046: ARRAY
4047: ST_TO_ADDR
// while r >= 10 do
4048: LD_VAR 0 7
4052: PUSH
4053: LD_INT 10
4055: GREATEREQUAL
4056: IFFALSE 4156
// if r > 50 then
4058: LD_VAR 0 7
4062: PUSH
4063: LD_INT 50
4065: GREATER
4066: IFFALSE 4112
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4068: LD_VAR 0 6
4072: PPUSH
4073: LD_INT 5
4075: PPUSH
4076: LD_VAR 0 4
4080: PPUSH
4081: LD_VAR 0 5
4085: PPUSH
4086: LD_INT 4
4088: PPUSH
4089: LD_INT 0
4091: PPUSH
4092: CALL_OW 60
// r := r - 50 ;
4096: LD_ADDR_VAR 0 7
4100: PUSH
4101: LD_VAR 0 7
4105: PUSH
4106: LD_INT 50
4108: MINUS
4109: ST_TO_ADDR
// end else
4110: GO 4154
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4112: LD_VAR 0 6
4116: PPUSH
4117: LD_VAR 0 7
4121: PUSH
4122: LD_INT 10
4124: DIV
4125: PPUSH
4126: LD_VAR 0 4
4130: PPUSH
4131: LD_VAR 0 5
4135: PPUSH
4136: LD_INT 4
4138: PPUSH
4139: LD_INT 0
4141: PPUSH
4142: CALL_OW 60
// r := 0 ;
4146: LD_ADDR_VAR 0 7
4150: PUSH
4151: LD_INT 0
4153: ST_TO_ADDR
// end ;
4154: GO 4048
// end ;
4156: GO 4029
4158: POP
4159: POP
// end ; x := start_def [ pos ] [ 1 ] ;
4160: LD_ADDR_VAR 0 4
4164: PUSH
4165: LD_EXP 41
4169: PUSH
4170: LD_VAR 0 3
4174: ARRAY
4175: PUSH
4176: LD_INT 1
4178: ARRAY
4179: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4180: LD_ADDR_VAR 0 5
4184: PUSH
4185: LD_EXP 41
4189: PUSH
4190: LD_VAR 0 3
4194: ARRAY
4195: PUSH
4196: LD_INT 2
4198: ARRAY
4199: ST_TO_ADDR
// if def_morale_flags then
4200: LD_EXP 8
4204: IFFALSE 4283
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4206: LD_ADDR_EXP 28
4210: PUSH
4211: LD_EXP 28
4215: PUSH
4216: LD_VAR 0 1
4220: PPUSH
4221: LD_VAR 0 4
4225: PPUSH
4226: LD_VAR 0 5
4230: PPUSH
4231: LD_INT 1
4233: PUSH
4234: LD_INT 100
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: PUSH
4241: LD_INT 2
4243: PUSH
4244: LD_INT 50
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PUSH
4251: LD_INT 3
4253: PUSH
4254: LD_INT 20
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PUSH
4261: LD_INT 20
4263: PUSH
4264: LD_INT 100
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: PPUSH
4277: CALL_OW 418
4281: ADD
4282: ST_TO_ADDR
// neng := number_of_people ;
4283: LD_ADDR_VAR 0 11
4287: PUSH
4288: LD_EXP 21
4292: ST_TO_ADDR
// nsol := 2 ;
4293: LD_ADDR_VAR 0 14
4297: PUSH
4298: LD_INT 2
4300: ST_TO_ADDR
// if nsol < neng div 4 then
4301: LD_VAR 0 14
4305: PUSH
4306: LD_VAR 0 11
4310: PUSH
4311: LD_INT 4
4313: DIV
4314: LESS
4315: IFFALSE 4331
// nsol := neng div 4 ;
4317: LD_ADDR_VAR 0 14
4321: PUSH
4322: LD_VAR 0 11
4326: PUSH
4327: LD_INT 4
4329: DIV
4330: ST_TO_ADDR
// neng := neng - nsol ;
4331: LD_ADDR_VAR 0 11
4335: PUSH
4336: LD_VAR 0 11
4340: PUSH
4341: LD_VAR 0 14
4345: MINUS
4346: ST_TO_ADDR
// nsci := neng div 3 ;
4347: LD_ADDR_VAR 0 12
4351: PUSH
4352: LD_VAR 0 11
4356: PUSH
4357: LD_INT 3
4359: DIV
4360: ST_TO_ADDR
// if nsci < 1 then
4361: LD_VAR 0 12
4365: PUSH
4366: LD_INT 1
4368: LESS
4369: IFFALSE 4379
// nsci := 1 ;
4371: LD_ADDR_VAR 0 12
4375: PUSH
4376: LD_INT 1
4378: ST_TO_ADDR
// neng := neng - nsci ;
4379: LD_ADDR_VAR 0 11
4383: PUSH
4384: LD_VAR 0 11
4388: PUSH
4389: LD_VAR 0 12
4393: MINUS
4394: ST_TO_ADDR
// nmech := neng div 2 ;
4395: LD_ADDR_VAR 0 13
4399: PUSH
4400: LD_VAR 0 11
4404: PUSH
4405: LD_INT 2
4407: DIV
4408: ST_TO_ADDR
// neng := neng - nmech ;
4409: LD_ADDR_VAR 0 11
4413: PUSH
4414: LD_VAR 0 11
4418: PUSH
4419: LD_VAR 0 13
4423: MINUS
4424: ST_TO_ADDR
// if neng < 1 then
4425: LD_VAR 0 11
4429: PUSH
4430: LD_INT 1
4432: LESS
4433: IFFALSE 4443
// neng := 1 ;
4435: LD_ADDR_VAR 0 11
4439: PUSH
4440: LD_INT 1
4442: ST_TO_ADDR
// commander := true ;
4443: LD_ADDR_EXP 42
4447: PUSH
4448: LD_INT 1
4450: ST_TO_ADDR
// soldiers_created := 0 ;
4451: LD_ADDR_LOC 3
4455: PUSH
4456: LD_INT 0
4458: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4459: LD_ADDR_VAR 0 4
4463: PUSH
4464: LD_EXP 41
4468: PUSH
4469: LD_VAR 0 3
4473: ARRAY
4474: PUSH
4475: LD_INT 1
4477: ARRAY
4478: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4479: LD_ADDR_VAR 0 5
4483: PUSH
4484: LD_EXP 41
4488: PUSH
4489: LD_VAR 0 3
4493: ARRAY
4494: PUSH
4495: LD_INT 2
4497: ARRAY
4498: ST_TO_ADDR
// prepare_people ( side , nsol , class_soldier , x , y , 5 , commander ) ;
4499: LD_VAR 0 1
4503: PPUSH
4504: LD_VAR 0 14
4508: PPUSH
4509: LD_INT 1
4511: PPUSH
4512: LD_VAR 0 4
4516: PPUSH
4517: LD_VAR 0 5
4521: PPUSH
4522: LD_INT 5
4524: PPUSH
4525: LD_ADDR_EXP 42
4529: PPUSH
4530: CALL 3176 0 7
// prepare_people ( side , neng , class_engineer , x , y , 5 , commander ) ;
4534: LD_VAR 0 1
4538: PPUSH
4539: LD_VAR 0 11
4543: PPUSH
4544: LD_INT 2
4546: PPUSH
4547: LD_VAR 0 4
4551: PPUSH
4552: LD_VAR 0 5
4556: PPUSH
4557: LD_INT 5
4559: PPUSH
4560: LD_ADDR_EXP 42
4564: PPUSH
4565: CALL 3176 0 7
// prepare_people ( side , nmech , class_mechanic , x , y , 5 , commander ) ;
4569: LD_VAR 0 1
4573: PPUSH
4574: LD_VAR 0 13
4578: PPUSH
4579: LD_INT 3
4581: PPUSH
4582: LD_VAR 0 4
4586: PPUSH
4587: LD_VAR 0 5
4591: PPUSH
4592: LD_INT 5
4594: PPUSH
4595: LD_ADDR_EXP 42
4599: PPUSH
4600: CALL 3176 0 7
// prepare_people ( side , nsci , class_scientistic , x , y , 5 , commander ) ;
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_VAR 0 12
4613: PPUSH
4614: LD_INT 4
4616: PPUSH
4617: LD_VAR 0 4
4621: PPUSH
4622: LD_VAR 0 5
4626: PPUSH
4627: LD_INT 5
4629: PPUSH
4630: LD_ADDR_EXP 42
4634: PPUSH
4635: CALL 3176 0 7
// if not global_defined then
4639: LD_LOC 2
4643: NOT
4644: IFFALSE 4654
// global_defined := true ;
4646: LD_ADDR_LOC 2
4650: PUSH
4651: LD_INT 1
4653: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4654: LD_EXP 9
4658: PUSH
4659: LD_INT 20
4661: PPUSH
4662: LD_VAR 0 1
4666: PPUSH
4667: CALL_OW 321
4671: PUSH
4672: LD_INT 1
4674: EQUAL
4675: AND
4676: IFFALSE 4693
// SetTech ( tech_SibDet , side , state_researched ) ;
4678: LD_INT 20
4680: PPUSH
4681: LD_VAR 0 1
4685: PPUSH
4686: LD_INT 2
4688: PPUSH
4689: CALL_OW 322
// if def_siberite_bomb = 1 then
4693: LD_EXP 11
4697: PUSH
4698: LD_INT 1
4700: EQUAL
4701: IFFALSE 4735
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4703: LD_INT 25
4705: PPUSH
4706: LD_VAR 0 1
4710: PPUSH
4711: LD_INT 1
4713: PPUSH
4714: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4718: LD_INT 73
4720: PPUSH
4721: LD_VAR 0 1
4725: PPUSH
4726: LD_INT 1
4728: PPUSH
4729: CALL_OW 322
// end else
4733: GO 4765
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4735: LD_INT 25
4737: PPUSH
4738: LD_VAR 0 1
4742: PPUSH
4743: LD_INT 0
4745: PPUSH
4746: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4750: LD_INT 73
4752: PPUSH
4753: LD_VAR 0 1
4757: PPUSH
4758: LD_INT 0
4760: PPUSH
4761: CALL_OW 322
// end ; end ;
4765: LD_VAR 0 2
4769: RET
// every 0 0$1 do
4770: GO 4772
4772: DISABLE
// if ( def_siberite_bomb > 1 ) then
4773: LD_EXP 11
4777: PUSH
4778: LD_INT 1
4780: GREATER
4781: IFFALSE 4796
// begin wait ( siberite_bomb_Delay ) ;
4783: LD_EXP 26
4787: PPUSH
4788: CALL_OW 67
// EnableSibFiss ;
4792: CALL 4797 0 0
// end ;
4796: END
// function EnableSibFiss ; var i ; begin
4797: LD_INT 0
4799: PPUSH
4800: PPUSH
// for i := 1 to 8 do
4801: LD_ADDR_VAR 0 2
4805: PUSH
4806: DOUBLE
4807: LD_INT 1
4809: DEC
4810: ST_TO_ADDR
4811: LD_INT 8
4813: PUSH
4814: FOR_TO
4815: IFFALSE 4861
// if Side_Positions [ i ] then
4817: LD_EXP 37
4821: PUSH
4822: LD_VAR 0 2
4826: ARRAY
4827: IFFALSE 4859
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4829: LD_INT 25
4831: PPUSH
4832: LD_VAR 0 2
4836: PPUSH
4837: LD_INT 1
4839: PPUSH
4840: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4844: LD_INT 73
4846: PPUSH
4847: LD_VAR 0 2
4851: PPUSH
4852: LD_INT 1
4854: PPUSH
4855: CALL_OW 322
// end ;
4859: GO 4814
4861: POP
4862: POP
// end ;
4863: LD_VAR 0 1
4867: RET
// function prepare_sides ; var i ; begin
4868: LD_INT 0
4870: PPUSH
4871: PPUSH
// global_units := [ ] ;
4872: LD_ADDR_LOC 1
4876: PUSH
4877: EMPTY
4878: ST_TO_ADDR
// global_defined := false ;
4879: LD_ADDR_LOC 2
4883: PUSH
4884: LD_INT 0
4886: ST_TO_ADDR
// for i := 1 to 8 do
4887: LD_ADDR_VAR 0 2
4891: PUSH
4892: DOUBLE
4893: LD_INT 1
4895: DEC
4896: ST_TO_ADDR
4897: LD_INT 8
4899: PUSH
4900: FOR_TO
4901: IFFALSE 5178
// if Side_Positions [ i ] then
4903: LD_EXP 37
4907: PUSH
4908: LD_VAR 0 2
4912: ARRAY
4913: IFFALSE 5176
// begin if def_base_level > 1 then
4915: LD_EXP 2
4919: PUSH
4920: LD_INT 1
4922: GREATER
4923: IFFALSE 5041
// case Side_Positions [ i ] of 1 :
4925: LD_EXP 37
4929: PUSH
4930: LD_VAR 0 2
4934: ARRAY
4935: PUSH
4936: LD_INT 1
4938: DOUBLE
4939: EQUAL
4940: IFTRUE 4944
4942: GO 4962
4944: POP
// SetResourceVisibility ( 9 , 4 , i ) ; 2 :
4945: LD_INT 9
4947: PPUSH
4948: LD_INT 4
4950: PPUSH
4951: LD_VAR 0 2
4955: PPUSH
4956: CALL_OW 441
4960: GO 5041
4962: LD_INT 2
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 4970
4968: GO 4988
4970: POP
// SetResourceVisibility ( 97 , 3 , i ) ; 3 :
4971: LD_INT 97
4973: PPUSH
4974: LD_INT 3
4976: PPUSH
4977: LD_VAR 0 2
4981: PPUSH
4982: CALL_OW 441
4986: GO 5041
4988: LD_INT 3
4990: DOUBLE
4991: EQUAL
4992: IFTRUE 4996
4994: GO 5014
4996: POP
// SetResourceVisibility ( 51 , 88 , i ) ; 4 :
4997: LD_INT 51
4999: PPUSH
5000: LD_INT 88
5002: PPUSH
5003: LD_VAR 0 2
5007: PPUSH
5008: CALL_OW 441
5012: GO 5041
5014: LD_INT 4
5016: DOUBLE
5017: EQUAL
5018: IFTRUE 5022
5020: GO 5040
5022: POP
// SetResourceVisibility ( 160 , 87 , i ) ; end ;
5023: LD_INT 160
5025: PPUSH
5026: LD_INT 87
5028: PPUSH
5029: LD_VAR 0 2
5033: PPUSH
5034: CALL_OW 441
5038: GO 5041
5040: POP
// if def_base_level > 2 then
5041: LD_EXP 2
5045: PUSH
5046: LD_INT 2
5048: GREATER
5049: IFFALSE 5167
// case Side_Positions [ i ] of 1 :
5051: LD_EXP 37
5055: PUSH
5056: LD_VAR 0 2
5060: ARRAY
5061: PUSH
5062: LD_INT 1
5064: DOUBLE
5065: EQUAL
5066: IFTRUE 5070
5068: GO 5088
5070: POP
// SetResourceVisibility ( 37 , 24 , i ) ; 2 :
5071: LD_INT 37
5073: PPUSH
5074: LD_INT 24
5076: PPUSH
5077: LD_VAR 0 2
5081: PPUSH
5082: CALL_OW 441
5086: GO 5167
5088: LD_INT 2
5090: DOUBLE
5091: EQUAL
5092: IFTRUE 5096
5094: GO 5114
5096: POP
// SetResourceVisibility ( 71 , 4 , i ) ; 3 :
5097: LD_INT 71
5099: PPUSH
5100: LD_INT 4
5102: PPUSH
5103: LD_VAR 0 2
5107: PPUSH
5108: CALL_OW 441
5112: GO 5167
5114: LD_INT 3
5116: DOUBLE
5117: EQUAL
5118: IFTRUE 5122
5120: GO 5140
5122: POP
// SetResourceVisibility ( 35 , 59 , i ) ; 4 :
5123: LD_INT 35
5125: PPUSH
5126: LD_INT 59
5128: PPUSH
5129: LD_VAR 0 2
5133: PPUSH
5134: CALL_OW 441
5138: GO 5167
5140: LD_INT 4
5142: DOUBLE
5143: EQUAL
5144: IFTRUE 5148
5146: GO 5166
5148: POP
// SetResourceVisibility ( 135 , 83 , i ) ; end ;
5149: LD_INT 135
5151: PPUSH
5152: LD_INT 83
5154: PPUSH
5155: LD_VAR 0 2
5159: PPUSH
5160: CALL_OW 441
5164: GO 5167
5166: POP
// prepare_side ( i ) ;
5167: LD_VAR 0 2
5171: PPUSH
5172: CALL 3673 0 1
// end ;
5176: GO 4900
5178: POP
5179: POP
// end ;
5180: LD_VAR 0 1
5184: RET
// function second_oil ; var i ; begin
5185: LD_INT 0
5187: PPUSH
5188: PPUSH
// if def_second_oil then
5189: LD_EXP 12
5193: IFFALSE 5317
// for i := 1 to 4 do
5195: LD_ADDR_VAR 0 2
5199: PUSH
5200: DOUBLE
5201: LD_INT 1
5203: DEC
5204: ST_TO_ADDR
5205: LD_INT 4
5207: PUSH
5208: FOR_TO
5209: IFFALSE 5315
// case i of 1 :
5211: LD_VAR 0 2
5215: PUSH
5216: LD_INT 1
5218: DOUBLE
5219: EQUAL
5220: IFTRUE 5224
5222: GO 5240
5224: POP
// CreateDepositXY ( 37 , 9 , mat_oil ) ; 2 :
5225: LD_INT 37
5227: PPUSH
5228: LD_INT 9
5230: PPUSH
5231: LD_INT 2
5233: PPUSH
5234: CALL_OW 62
5238: GO 5313
5240: LD_INT 2
5242: DOUBLE
5243: EQUAL
5244: IFTRUE 5248
5246: GO 5264
5248: POP
// CreateDepositXY ( 104 , 36 , mat_oil ) ; 3 :
5249: LD_INT 104
5251: PPUSH
5252: LD_INT 36
5254: PPUSH
5255: LD_INT 2
5257: PPUSH
5258: CALL_OW 62
5262: GO 5313
5264: LD_INT 3
5266: DOUBLE
5267: EQUAL
5268: IFTRUE 5272
5270: GO 5288
5272: POP
// CreateDepositXY ( 70 , 75 , mat_oil ) ; 4 :
5273: LD_INT 70
5275: PPUSH
5276: LD_INT 75
5278: PPUSH
5279: LD_INT 2
5281: PPUSH
5282: CALL_OW 62
5286: GO 5313
5288: LD_INT 4
5290: DOUBLE
5291: EQUAL
5292: IFTRUE 5296
5294: GO 5312
5296: POP
// CreateDepositXY ( 145 , 67 , mat_oil ) ; end ;
5297: LD_INT 145
5299: PPUSH
5300: LD_INT 67
5302: PPUSH
5303: LD_INT 2
5305: PPUSH
5306: CALL_OW 62
5310: GO 5313
5312: POP
5313: GO 5208
5315: POP
5316: POP
// end ;
5317: LD_VAR 0 1
5321: RET
// starting begin disable ( 98 ) ;
5322: LD_INT 98
5324: DISABLE_MARKED
// disable ( 99 ) ;
5325: LD_INT 99
5327: DISABLE_MARKED
// disable ( 400 ) ;
5328: LD_INT 400
5330: DISABLE_MARKED
// disable ( 401 ) ;
5331: LD_INT 401
5333: DISABLE_MARKED
// mp_selectmsg := true ;
5334: LD_ADDR_OWVAR 13
5338: PUSH
5339: LD_INT 1
5341: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5342: CALL 0 0 0
// prepare_map_coordinates ;
5346: CALL 1032 0 0
// set_shared_visions_and_alliances ;
5350: CALL 2813 0 0
// prepare_sides ;
5354: CALL 4868 0 0
// Init_Win_Condition ;
5358: CALL 19606 0 0
// ShowTimer ;
5362: CALL 12895 0 0
// AnimateTrees ( true ) ;
5366: LD_INT 1
5368: PPUSH
5369: CALL_OW 573
// second_oil ;
5373: CALL 5185 0 0
// vygeneruj_lidi_na_ztraceni ;
5377: CALL 6411 0 0
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5381: LD_EXP 41
5385: PUSH
5386: LD_EXP 37
5390: PUSH
5391: LD_OWVAR 2
5395: ARRAY
5396: ARRAY
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: LD_EXP 41
5406: PUSH
5407: LD_EXP 37
5411: PUSH
5412: LD_OWVAR 2
5416: ARRAY
5417: ARRAY
5418: PUSH
5419: LD_INT 2
5421: ARRAY
5422: PPUSH
5423: CALL_OW 86
// BuildUpAreas := [ Base1 , Base2 , Base3 , Base4 ] ;
5427: LD_ADDR_EXP 46
5431: PUSH
5432: LD_INT 27
5434: PUSH
5435: LD_INT 28
5437: PUSH
5438: LD_INT 29
5440: PUSH
5441: LD_INT 30
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: ST_TO_ADDR
// BeginBuildUp ;
5450: CALL 19008 0 0
// end ; end_of_file
5454: END
// every 0 0$1 + 0 0$0.6 do var i , Amount ;
5455: GO 5457
5457: DISABLE
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
// begin case tick of 1 .. 1 1$0 :
5462: LD_OWVAR 1
5466: PUSH
5467: LD_INT 1
5469: DOUBLE
5470: GREATEREQUAL
5471: IFFALSE 5479
5473: LD_INT 2100
5475: DOUBLE
5476: LESSEQUAL
5477: IFTRUE 5481
5479: GO 5509
5481: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5482: LD_EXP 25
5486: PUSH
5487: LD_INT 100
5489: DIVREAL
5490: PUSH
5491: LD_INT 525
5493: PPUSH
5494: LD_INT 1050
5496: PPUSH
5497: CALL_OW 12
5501: MUL
5502: PPUSH
5503: CALL_OW 67
5507: GO 5811
5509: LD_INT 2100
5511: PUSH
5512: LD_INT 1
5514: PLUS
5515: DOUBLE
5516: GREATEREQUAL
5517: IFFALSE 5525
5519: LD_INT 10500
5521: DOUBLE
5522: LESSEQUAL
5523: IFTRUE 5527
5525: GO 5555
5527: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5528: LD_EXP 25
5532: PUSH
5533: LD_INT 100
5535: DIVREAL
5536: PUSH
5537: LD_INT 1050
5539: PPUSH
5540: LD_INT 1750
5542: PPUSH
5543: CALL_OW 12
5547: MUL
5548: PPUSH
5549: CALL_OW 67
5553: GO 5811
5555: LD_INT 10500
5557: PUSH
5558: LD_INT 1
5560: PLUS
5561: DOUBLE
5562: GREATEREQUAL
5563: IFFALSE 5571
5565: LD_INT 21000
5567: DOUBLE
5568: LESSEQUAL
5569: IFTRUE 5573
5571: GO 5601
5573: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5574: LD_EXP 25
5578: PUSH
5579: LD_INT 100
5581: DIVREAL
5582: PUSH
5583: LD_INT 1750
5585: PPUSH
5586: LD_INT 2100
5588: PPUSH
5589: CALL_OW 12
5593: MUL
5594: PPUSH
5595: CALL_OW 67
5599: GO 5811
5601: LD_INT 21000
5603: PUSH
5604: LD_INT 1
5606: PLUS
5607: DOUBLE
5608: GREATEREQUAL
5609: IFFALSE 5617
5611: LD_INT 42000
5613: DOUBLE
5614: LESSEQUAL
5615: IFTRUE 5619
5617: GO 5647
5619: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5620: LD_EXP 25
5624: PUSH
5625: LD_INT 100
5627: DIVREAL
5628: PUSH
5629: LD_INT 2100
5631: PPUSH
5632: LD_INT 2275
5634: PPUSH
5635: CALL_OW 12
5639: MUL
5640: PPUSH
5641: CALL_OW 67
5645: GO 5811
5647: LD_INT 42000
5649: PUSH
5650: LD_INT 1
5652: PLUS
5653: DOUBLE
5654: GREATEREQUAL
5655: IFFALSE 5663
5657: LD_INT 63000
5659: DOUBLE
5660: LESSEQUAL
5661: IFTRUE 5665
5663: GO 5693
5665: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5666: LD_EXP 25
5670: PUSH
5671: LD_INT 100
5673: DIVREAL
5674: PUSH
5675: LD_INT 2275
5677: PPUSH
5678: LD_INT 2450
5680: PPUSH
5681: CALL_OW 12
5685: MUL
5686: PPUSH
5687: CALL_OW 67
5691: GO 5811
5693: LD_INT 63000
5695: PUSH
5696: LD_INT 1
5698: PLUS
5699: DOUBLE
5700: GREATEREQUAL
5701: IFFALSE 5709
5703: LD_INT 105000
5705: DOUBLE
5706: LESSEQUAL
5707: IFTRUE 5711
5709: GO 5739
5711: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5712: LD_EXP 25
5716: PUSH
5717: LD_INT 100
5719: DIVREAL
5720: PUSH
5721: LD_INT 2450
5723: PPUSH
5724: LD_INT 2800
5726: PPUSH
5727: CALL_OW 12
5731: MUL
5732: PPUSH
5733: CALL_OW 67
5737: GO 5811
5739: LD_INT 105000
5741: PUSH
5742: LD_INT 1
5744: PLUS
5745: DOUBLE
5746: GREATEREQUAL
5747: IFFALSE 5755
5749: LD_INT 630000
5751: DOUBLE
5752: LESSEQUAL
5753: IFTRUE 5757
5755: GO 5785
5757: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5758: LD_EXP 25
5762: PUSH
5763: LD_INT 100
5765: DIVREAL
5766: PUSH
5767: LD_INT 2800
5769: PPUSH
5770: LD_INT 3500
5772: PPUSH
5773: CALL_OW 12
5777: MUL
5778: PPUSH
5779: CALL_OW 67
5783: GO 5811
5785: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5786: LD_EXP 25
5790: PUSH
5791: LD_INT 100
5793: DIVREAL
5794: PUSH
5795: LD_INT 3500
5797: PPUSH
5798: LD_INT 3850
5800: PPUSH
5801: CALL_OW 12
5805: MUL
5806: PPUSH
5807: CALL_OW 67
// Amount := Rand ( 3 , 5 ) ;
5811: LD_ADDR_VAR 0 2
5815: PUSH
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 5
5821: PPUSH
5822: CALL_OW 12
5826: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5827: LD_ADDR_VAR 0 1
5831: PUSH
5832: LD_EXP 37
5836: PUSH
5837: LD_INT 0
5839: PUSH
5840: EMPTY
5841: LIST
5842: DIFF
5843: PUSH
5844: FOR_IN
5845: IFFALSE 5885
// CreateCratesArea ( Amount , [ Base_nw , Base_ne , Base_sw , Base_se ] [ i ] , true ) ;
5847: LD_VAR 0 2
5851: PPUSH
5852: LD_INT 1
5854: PUSH
5855: LD_INT 2
5857: PUSH
5858: LD_INT 3
5860: PUSH
5861: LD_INT 4
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: PUSH
5870: LD_VAR 0 1
5874: ARRAY
5875: PPUSH
5876: LD_INT 1
5878: PPUSH
5879: CALL_OW 55
5883: GO 5844
5885: POP
5886: POP
// enable ;
5887: ENABLE
// end ;
5888: PPOPN 2
5890: END
// every 0 0$25 + 0 0$1.0 do
5891: GO 5893
5893: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5894: LD_INT 37
5896: PPUSH
5897: LD_INT 1
5899: PPUSH
5900: CALL_OW 287
5904: PUSH
5905: LD_INT 200
5907: PUSH
5908: LD_EXP 25
5912: MINUS
5913: PUSH
5914: LD_INT 50
5916: DIVREAL
5917: PUSH
5918: LD_INT 5
5920: MUL
5921: LESS
5922: IFFALSE 5945
// CreateCratesArea ( Rand ( 2 , 4 ) , Between1 , true ) ;
5924: LD_INT 2
5926: PPUSH
5927: LD_INT 4
5929: PPUSH
5930: CALL_OW 12
5934: PPUSH
5935: LD_INT 37
5937: PPUSH
5938: LD_INT 1
5940: PPUSH
5941: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5945: LD_INT 38
5947: PPUSH
5948: LD_INT 1
5950: PPUSH
5951: CALL_OW 287
5955: PUSH
5956: LD_INT 200
5958: PUSH
5959: LD_EXP 25
5963: MINUS
5964: PUSH
5965: LD_INT 50
5967: DIVREAL
5968: PUSH
5969: LD_INT 5
5971: MUL
5972: LESS
5973: IFFALSE 5996
// CreateCratesArea ( Rand ( 2 , 4 ) , Between2 , true ) ;
5975: LD_INT 2
5977: PPUSH
5978: LD_INT 4
5980: PPUSH
5981: CALL_OW 12
5985: PPUSH
5986: LD_INT 38
5988: PPUSH
5989: LD_INT 1
5991: PPUSH
5992: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5996: LD_INT 39
5998: PPUSH
5999: LD_INT 1
6001: PPUSH
6002: CALL_OW 287
6006: PUSH
6007: LD_INT 200
6009: PUSH
6010: LD_EXP 25
6014: MINUS
6015: PUSH
6016: LD_INT 50
6018: DIVREAL
6019: PUSH
6020: LD_INT 5
6022: MUL
6023: LESS
6024: IFFALSE 6047
// CreateCratesArea ( Rand ( 2 , 4 ) , Between3 , true ) ;
6026: LD_INT 2
6028: PPUSH
6029: LD_INT 4
6031: PPUSH
6032: CALL_OW 12
6036: PPUSH
6037: LD_INT 39
6039: PPUSH
6040: LD_INT 1
6042: PPUSH
6043: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
6047: LD_INT 40
6049: PPUSH
6050: LD_INT 1
6052: PPUSH
6053: CALL_OW 287
6057: PUSH
6058: LD_INT 200
6060: PUSH
6061: LD_EXP 25
6065: MINUS
6066: PUSH
6067: LD_INT 50
6069: DIVREAL
6070: PUSH
6071: LD_INT 5
6073: MUL
6074: LESS
6075: IFFALSE 6098
// CreateCratesArea ( Rand ( 2 , 4 ) , Between4 , true ) ;
6077: LD_INT 2
6079: PPUSH
6080: LD_INT 4
6082: PPUSH
6083: CALL_OW 12
6087: PPUSH
6088: LD_INT 40
6090: PPUSH
6091: LD_INT 1
6093: PPUSH
6094: CALL_OW 55
// if GetResourceArea ( Center , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
6098: LD_INT 36
6100: PPUSH
6101: LD_INT 1
6103: PPUSH
6104: CALL_OW 287
6108: PUSH
6109: LD_INT 200
6111: PUSH
6112: LD_EXP 25
6116: MINUS
6117: PUSH
6118: LD_INT 25
6120: DIVREAL
6121: PUSH
6122: LD_INT 5
6124: MUL
6125: LESS
6126: IFFALSE 6141
// CreateCratesArea ( 5 , Center , true ) ;
6128: LD_INT 5
6130: PPUSH
6131: LD_INT 36
6133: PPUSH
6134: LD_INT 1
6136: PPUSH
6137: CALL_OW 55
// enable ;
6141: ENABLE
// end ; end_of_file
6142: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6143: LD_VAR 0 1
6147: PPUSH
6148: CALL_OW 266
6152: PUSH
6153: LD_INT 0
6155: PUSH
6156: LD_INT 1
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: IN
6163: IFFALSE 6188
// SetBName ( b , @ & GetSide ( b ) ) ;
6165: LD_VAR 0 1
6169: PPUSH
6170: LD_STRING @
6172: PUSH
6173: LD_VAR 0 1
6177: PPUSH
6178: CALL_OW 255
6182: STR
6183: PPUSH
6184: CALL_OW 500
// end ;
6188: PPOPN 2
6190: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6191: LD_VAR 0 1
6195: PPUSH
6196: CALL_OW 266
6200: PUSH
6201: LD_INT 0
6203: PUSH
6204: LD_INT 1
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: IN
6211: IFFALSE 6236
// SetBName ( b , @ & GetSide ( b ) ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: LD_STRING @
6220: PUSH
6221: LD_VAR 0 1
6225: PPUSH
6226: CALL_OW 255
6230: STR
6231: PPUSH
6232: CALL_OW 500
// end ;
6236: PPOPN 3
6238: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6239: LD_INT 0
6241: PPUSH
6242: PPUSH
6243: PPUSH
6244: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
6245: LD_VAR 0 1
6249: PPUSH
6250: CALL_OW 255
6254: PUSH
6255: LD_INT 0
6257: EQUAL
6258: PUSH
6259: LD_VAR 0 1
6263: PPUSH
6264: CALL_OW 257
6268: PUSH
6269: LD_INT 12
6271: EQUAL
6272: AND
6273: IFFALSE 6279
// CheckApemenAmount ;
6275: CALL 13176 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6279: LD_VAR 0 1
6283: PPUSH
6284: CALL_OW 266
6288: PUSH
6289: LD_INT 0
6291: PUSH
6292: LD_INT 1
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: IN
6299: IFFALSE 6381
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6301: LD_ADDR_VAR 0 4
6305: PUSH
6306: LD_EXP 37
6310: PUSH
6311: LD_VAR 0 1
6315: PPUSH
6316: CALL_OW 255
6320: ARRAY
6321: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6322: LD_ADDR_VAR 0 2
6326: PUSH
6327: LD_EXP 41
6331: PUSH
6332: LD_VAR 0 4
6336: ARRAY
6337: PUSH
6338: LD_INT 1
6340: ARRAY
6341: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6342: LD_ADDR_VAR 0 3
6346: PUSH
6347: LD_EXP 41
6351: PUSH
6352: LD_VAR 0 4
6356: ARRAY
6357: PUSH
6358: LD_INT 2
6360: ARRAY
6361: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6362: LD_VAR 0 2
6366: PPUSH
6367: LD_VAR 0 3
6371: PPUSH
6372: CALL_OW 420
6376: PPUSH
6377: CALL_OW 419
// end ; end ;
6381: PPOPN 5
6383: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6384: LD_VAR 0 1
6388: PPUSH
6389: LD_VAR 0 2
6393: PPUSH
6394: LD_VAR 0 3
6398: PPUSH
6399: LD_OWVAR 2
6403: PPUSH
6404: CALL 14045 0 4
6408: PPOPN 3
6410: END
// export ZMIZELI_LIDI ; export POINTY ; export function vygeneruj_lidi_na_ztraceni ; var i , j , k ; var pom , pom1 ; var barva ; begin
6411: LD_INT 0
6413: PPUSH
6414: PPUSH
6415: PPUSH
6416: PPUSH
6417: PPUSH
6418: PPUSH
6419: PPUSH
// ZMIZELI_LIDI = [ ] ;
6420: LD_ADDR_EXP 43
6424: PUSH
6425: EMPTY
6426: ST_TO_ADDR
// for j := 1 to 4 do
6427: LD_ADDR_VAR 0 3
6431: PUSH
6432: DOUBLE
6433: LD_INT 1
6435: DEC
6436: ST_TO_ADDR
6437: LD_INT 4
6439: PUSH
6440: FOR_TO
6441: IFFALSE 6604
// begin pom1 = [ ] ;
6443: LD_ADDR_VAR 0 6
6447: PUSH
6448: EMPTY
6449: ST_TO_ADDR
// for k := 1 to 8 do
6450: LD_ADDR_VAR 0 4
6454: PUSH
6455: DOUBLE
6456: LD_INT 1
6458: DEC
6459: ST_TO_ADDR
6460: LD_INT 8
6462: PUSH
6463: FOR_TO
6464: IFFALSE 6498
// if Side_Positions [ k ] = j then
6466: LD_EXP 37
6470: PUSH
6471: LD_VAR 0 4
6475: ARRAY
6476: PUSH
6477: LD_VAR 0 3
6481: EQUAL
6482: IFFALSE 6496
// begin barva = k ;
6484: LD_ADDR_VAR 0 7
6488: PUSH
6489: LD_VAR 0 4
6493: ST_TO_ADDR
// break ;
6494: GO 6498
// end ;
6496: GO 6463
6498: POP
6499: POP
// for i := 1 to 5 do
6500: LD_ADDR_VAR 0 2
6504: PUSH
6505: DOUBLE
6506: LD_INT 1
6508: DEC
6509: ST_TO_ADDR
6510: LD_INT 5
6512: PUSH
6513: FOR_TO
6514: IFFALSE 6581
// begin if Prob ( 10 ) and def_vehicles_too then
6516: LD_INT 10
6518: PPUSH
6519: CALL_OW 13
6523: PUSH
6524: LD_EXP 14
6528: AND
6529: IFFALSE 6548
// pom = vytvor_nove_auto ( barva ) else
6531: LD_ADDR_VAR 0 5
6535: PUSH
6536: LD_VAR 0 7
6540: PPUSH
6541: CALL 7351 0 1
6545: ST_TO_ADDR
6546: GO 6563
// pom = vytvor_noveho_cloveka ( barva ) ;
6548: LD_ADDR_VAR 0 5
6552: PUSH
6553: LD_VAR 0 7
6557: PPUSH
6558: CALL 6630 0 1
6562: ST_TO_ADDR
// pom1 = pom1 ^ pom ;
6563: LD_ADDR_VAR 0 6
6567: PUSH
6568: LD_VAR 0 6
6572: PUSH
6573: LD_VAR 0 5
6577: ADD
6578: ST_TO_ADDR
// end ;
6579: GO 6513
6581: POP
6582: POP
// ZMIZELI_LIDI = ZMIZELI_LIDI ^ [ pom1 ] ;
6583: LD_ADDR_EXP 43
6587: PUSH
6588: LD_EXP 43
6592: PUSH
6593: LD_VAR 0 6
6597: PUSH
6598: EMPTY
6599: LIST
6600: ADD
6601: ST_TO_ADDR
// end ;
6602: GO 6440
6604: POP
6605: POP
// POINTY = [ [ ] , [ ] , [ ] , [ ] ] ;
6606: LD_ADDR_EXP 44
6610: PUSH
6611: EMPTY
6612: PUSH
6613: EMPTY
6614: PUSH
6615: EMPTY
6616: PUSH
6617: EMPTY
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: ST_TO_ADDR
// end ;
6625: LD_VAR 0 1
6629: RET
// function vytvor_noveho_cloveka ( b ) ; var pom , pom1 ; var cla ; var i ; var sidy ; var poc ; var ah ; var pommm ; begin
6630: LD_INT 0
6632: PPUSH
6633: PPUSH
6634: PPUSH
6635: PPUSH
6636: PPUSH
6637: PPUSH
6638: PPUSH
6639: PPUSH
6640: PPUSH
// if def_other_nation then
6641: LD_EXP 13
6645: IFFALSE 6665
// pom = Rand ( 1 , 11 ) else
6647: LD_ADDR_VAR 0 3
6651: PUSH
6652: LD_INT 1
6654: PPUSH
6655: LD_INT 11
6657: PPUSH
6658: CALL_OW 12
6662: ST_TO_ADDR
6663: GO 6861
// begin pommm = Rand ( 1 , 8 ) ;
6665: LD_ADDR_VAR 0 10
6669: PUSH
6670: LD_INT 1
6672: PPUSH
6673: LD_INT 8
6675: PPUSH
6676: CALL_OW 12
6680: ST_TO_ADDR
// case Side_Nations [ b ] of nation_american :
6681: LD_EXP 38
6685: PUSH
6686: LD_VAR 0 1
6690: ARRAY
6691: PUSH
6692: LD_INT 1
6694: DOUBLE
6695: EQUAL
6696: IFTRUE 6700
6698: GO 6748
6700: POP
// pom = [ 1 , 2 , 5 , 6 , 7 , 8 , 9 , 5 ] [ pommm ] ; nation_arabian :
6701: LD_ADDR_VAR 0 3
6705: PUSH
6706: LD_INT 1
6708: PUSH
6709: LD_INT 2
6711: PUSH
6712: LD_INT 5
6714: PUSH
6715: LD_INT 6
6717: PUSH
6718: LD_INT 7
6720: PUSH
6721: LD_INT 8
6723: PUSH
6724: LD_INT 9
6726: PUSH
6727: LD_INT 5
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: PUSH
6740: LD_VAR 0 10
6744: ARRAY
6745: ST_TO_ADDR
6746: GO 6861
6748: LD_INT 2
6750: DOUBLE
6751: EQUAL
6752: IFTRUE 6756
6754: GO 6804
6756: POP
// pom = [ 1 , 3 , 4 , 5 , 6 , 7 , 8 , 10 ] [ pommm ] ; nation_russian :
6757: LD_ADDR_VAR 0 3
6761: PUSH
6762: LD_INT 1
6764: PUSH
6765: LD_INT 3
6767: PUSH
6768: LD_INT 4
6770: PUSH
6771: LD_INT 5
6773: PUSH
6774: LD_INT 6
6776: PUSH
6777: LD_INT 7
6779: PUSH
6780: LD_INT 8
6782: PUSH
6783: LD_INT 10
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: PUSH
6796: LD_VAR 0 10
6800: ARRAY
6801: ST_TO_ADDR
6802: GO 6861
6804: LD_INT 3
6806: DOUBLE
6807: EQUAL
6808: IFTRUE 6812
6810: GO 6860
6812: POP
// pom = [ 1 , 2 , 3 , 5 , 6 , 7 , 8 , 11 ] [ pommm ] ; end ;
6813: LD_ADDR_VAR 0 3
6817: PUSH
6818: LD_INT 1
6820: PUSH
6821: LD_INT 2
6823: PUSH
6824: LD_INT 3
6826: PUSH
6827: LD_INT 5
6829: PUSH
6830: LD_INT 6
6832: PUSH
6833: LD_INT 7
6835: PUSH
6836: LD_INT 8
6838: PUSH
6839: LD_INT 11
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: PUSH
6852: LD_VAR 0 10
6856: ARRAY
6857: ST_TO_ADDR
6858: GO 6861
6860: POP
// end ; case pom of 1 :
6861: LD_VAR 0 3
6865: PUSH
6866: LD_INT 1
6868: DOUBLE
6869: EQUAL
6870: IFTRUE 6874
6872: GO 6885
6874: POP
// cla = class_apeman ; 2 :
6875: LD_ADDR_VAR 0 5
6879: PUSH
6880: LD_INT 12
6882: ST_TO_ADDR
6883: GO 7076
6885: LD_INT 2
6887: DOUBLE
6888: EQUAL
6889: IFTRUE 6893
6891: GO 6904
6893: POP
// cla = class_apeman_engineer ; 3 :
6894: LD_ADDR_VAR 0 5
6898: PUSH
6899: LD_INT 16
6901: ST_TO_ADDR
6902: GO 7076
6904: LD_INT 3
6906: DOUBLE
6907: EQUAL
6908: IFTRUE 6912
6910: GO 6923
6912: POP
// cla = class_apeman_soldier ; 4 :
6913: LD_ADDR_VAR 0 5
6917: PUSH
6918: LD_INT 15
6920: ST_TO_ADDR
6921: GO 7076
6923: LD_INT 4
6925: DOUBLE
6926: EQUAL
6927: IFTRUE 6931
6929: GO 6942
6931: POP
// cla = class_apeman_kamikaze ; 5 :
6932: LD_ADDR_VAR 0 5
6936: PUSH
6937: LD_INT 17
6939: ST_TO_ADDR
6940: GO 7076
6942: LD_INT 5
6944: DOUBLE
6945: EQUAL
6946: IFTRUE 6950
6948: GO 6961
6950: POP
// cla = class_soldier ; 6 :
6951: LD_ADDR_VAR 0 5
6955: PUSH
6956: LD_INT 1
6958: ST_TO_ADDR
6959: GO 7076
6961: LD_INT 6
6963: DOUBLE
6964: EQUAL
6965: IFTRUE 6969
6967: GO 6980
6969: POP
// cla = class_mechanic ; 7 :
6970: LD_ADDR_VAR 0 5
6974: PUSH
6975: LD_INT 3
6977: ST_TO_ADDR
6978: GO 7076
6980: LD_INT 7
6982: DOUBLE
6983: EQUAL
6984: IFTRUE 6988
6986: GO 6999
6988: POP
// cla = class_engineer ; 8 :
6989: LD_ADDR_VAR 0 5
6993: PUSH
6994: LD_INT 2
6996: ST_TO_ADDR
6997: GO 7076
6999: LD_INT 8
7001: DOUBLE
7002: EQUAL
7003: IFTRUE 7007
7005: GO 7018
7007: POP
// cla = class_scientistic ; 9 :
7008: LD_ADDR_VAR 0 5
7012: PUSH
7013: LD_INT 4
7015: ST_TO_ADDR
7016: GO 7076
7018: LD_INT 9
7020: DOUBLE
7021: EQUAL
7022: IFTRUE 7026
7024: GO 7037
7026: POP
// cla = class_sniper ; 10 :
7027: LD_ADDR_VAR 0 5
7031: PUSH
7032: LD_INT 5
7034: ST_TO_ADDR
7035: GO 7076
7037: LD_INT 10
7039: DOUBLE
7040: EQUAL
7041: IFTRUE 7045
7043: GO 7056
7045: POP
// cla = class_mortar ; 11 :
7046: LD_ADDR_VAR 0 5
7050: PUSH
7051: LD_INT 8
7053: ST_TO_ADDR
7054: GO 7076
7056: LD_INT 11
7058: DOUBLE
7059: EQUAL
7060: IFTRUE 7064
7062: GO 7075
7064: POP
// cla = class_bazooker ; end ;
7065: LD_ADDR_VAR 0 5
7069: PUSH
7070: LD_INT 9
7072: ST_TO_ADDR
7073: GO 7076
7075: POP
// uc_side = b ;
7076: LD_ADDR_OWVAR 20
7080: PUSH
7081: LD_VAR 0 1
7085: ST_TO_ADDR
// if pom <= 4 then
7086: LD_VAR 0 3
7090: PUSH
7091: LD_INT 4
7093: LESSEQUAL
7094: IFFALSE 7106
// uc_nation = nation_nature else
7096: LD_ADDR_OWVAR 21
7100: PUSH
7101: LD_INT 0
7103: ST_TO_ADDR
7104: GO 7209
// begin if def_other_nation then
7106: LD_EXP 13
7110: IFFALSE 7130
// pom1 = Rand ( 1 , 3 ) else
7112: LD_ADDR_VAR 0 4
7116: PUSH
7117: LD_INT 1
7119: PPUSH
7120: LD_INT 3
7122: PPUSH
7123: CALL_OW 12
7127: ST_TO_ADDR
7128: GO 7146
// pom1 = Side_Nations [ b ] ;
7130: LD_ADDR_VAR 0 4
7134: PUSH
7135: LD_EXP 38
7139: PUSH
7140: LD_VAR 0 1
7144: ARRAY
7145: ST_TO_ADDR
// case pom1 of 1 :
7146: LD_VAR 0 4
7150: PUSH
7151: LD_INT 1
7153: DOUBLE
7154: EQUAL
7155: IFTRUE 7159
7157: GO 7170
7159: POP
// uc_nation = nation_american ; 2 :
7160: LD_ADDR_OWVAR 21
7164: PUSH
7165: LD_INT 1
7167: ST_TO_ADDR
7168: GO 7209
7170: LD_INT 2
7172: DOUBLE
7173: EQUAL
7174: IFTRUE 7178
7176: GO 7189
7178: POP
// uc_nation = nation_arabian ; 3 :
7179: LD_ADDR_OWVAR 21
7183: PUSH
7184: LD_INT 2
7186: ST_TO_ADDR
7187: GO 7209
7189: LD_INT 3
7191: DOUBLE
7192: EQUAL
7193: IFTRUE 7197
7195: GO 7208
7197: POP
// uc_nation = nation_russian ; end ;
7198: LD_ADDR_OWVAR 21
7202: PUSH
7203: LD_INT 3
7205: ST_TO_ADDR
7206: GO 7209
7208: POP
// end ; ah = get_human ( get_sex , cla , Rand ( 1 , 5 ) ,  ) ;
7209: LD_ADDR_VAR 0 9
7213: PUSH
7214: CALL 7316 0 0
7218: PPUSH
7219: LD_VAR 0 5
7223: PPUSH
7224: LD_INT 1
7226: PPUSH
7227: LD_INT 5
7229: PPUSH
7230: CALL_OW 12
7234: PPUSH
7235: LD_STRING 
7237: PPUSH
7238: CALL 7258 0 4
7242: ST_TO_ADDR
// result := ah ;
7243: LD_ADDR_VAR 0 2
7247: PUSH
7248: LD_VAR 0 9
7252: ST_TO_ADDR
// end ;
7253: LD_VAR 0 2
7257: RET
// function get_human ( sex , clas , level , name ) ; var pom ; begin
7258: LD_INT 0
7260: PPUSH
7261: PPUSH
// PrepareHuman ( sex , clas , level ) ;
7262: LD_VAR 0 1
7266: PPUSH
7267: LD_VAR 0 2
7271: PPUSH
7272: LD_VAR 0 3
7276: PPUSH
7277: CALL_OW 380
// hc_name := name ;
7281: LD_ADDR_OWVAR 26
7285: PUSH
7286: LD_VAR 0 4
7290: ST_TO_ADDR
// pom = CreateHuman ;
7291: LD_ADDR_VAR 0 6
7295: PUSH
7296: CALL_OW 44
7300: ST_TO_ADDR
// result := pom ;
7301: LD_ADDR_VAR 0 5
7305: PUSH
7306: LD_VAR 0 6
7310: ST_TO_ADDR
// end ;
7311: LD_VAR 0 5
7315: RET
// function get_sex ; begin
7316: LD_INT 0
7318: PPUSH
// if Prob ( 20 ) then
7319: LD_INT 20
7321: PPUSH
7322: CALL_OW 13
7326: IFFALSE 7338
// result = sex_female else
7328: LD_ADDR_VAR 0 1
7332: PUSH
7333: LD_INT 2
7335: ST_TO_ADDR
7336: GO 7346
// result = sex_male ;
7338: LD_ADDR_VAR 0 1
7342: PUSH
7343: LD_INT 1
7345: ST_TO_ADDR
// end ;
7346: LD_VAR 0 1
7350: RET
// function vytvor_nove_auto ( b ) ; var cat ; var a ; var pom ; var av ; begin
7351: LD_INT 0
7353: PPUSH
7354: PPUSH
7355: PPUSH
7356: PPUSH
7357: PPUSH
// uc_side = b ;
7358: LD_ADDR_OWVAR 20
7362: PUSH
7363: LD_VAR 0 1
7367: ST_TO_ADDR
// if def_other_nation then
7368: LD_EXP 13
7372: IFFALSE 7392
// cat = Rand ( 1 , 3 ) else
7374: LD_ADDR_VAR 0 3
7378: PUSH
7379: LD_INT 1
7381: PPUSH
7382: LD_INT 3
7384: PPUSH
7385: CALL_OW 12
7389: ST_TO_ADDR
7390: GO 7461
// case Side_Nations [ b ] of nation_american :
7392: LD_EXP 38
7396: PUSH
7397: LD_VAR 0 1
7401: ARRAY
7402: PUSH
7403: LD_INT 1
7405: DOUBLE
7406: EQUAL
7407: IFTRUE 7411
7409: GO 7422
7411: POP
// cat = 1 ; nation_arabian :
7412: LD_ADDR_VAR 0 3
7416: PUSH
7417: LD_INT 1
7419: ST_TO_ADDR
7420: GO 7461
7422: LD_INT 2
7424: DOUBLE
7425: EQUAL
7426: IFTRUE 7430
7428: GO 7441
7430: POP
// cat = 2 ; nation_russian :
7431: LD_ADDR_VAR 0 3
7435: PUSH
7436: LD_INT 2
7438: ST_TO_ADDR
7439: GO 7461
7441: LD_INT 3
7443: DOUBLE
7444: EQUAL
7445: IFTRUE 7449
7447: GO 7460
7449: POP
// cat = 3 ; end ;
7450: LD_ADDR_VAR 0 3
7454: PUSH
7455: LD_INT 3
7457: ST_TO_ADDR
7458: GO 7461
7460: POP
// case cat of 1 :
7461: LD_VAR 0 3
7465: PUSH
7466: LD_INT 1
7468: DOUBLE
7469: EQUAL
7470: IFTRUE 7474
7472: GO 7495
7474: POP
// begin uc_nation = nation_american ;
7475: LD_ADDR_OWVAR 21
7479: PUSH
7480: LD_INT 1
7482: ST_TO_ADDR
// pom = get_random_design_am ;
7483: LD_ADDR_VAR 0 5
7487: PUSH
7488: CALL 7635 0 0
7492: ST_TO_ADDR
// end ; 2 :
7493: GO 7554
7495: LD_INT 2
7497: DOUBLE
7498: EQUAL
7499: IFTRUE 7503
7501: GO 7524
7503: POP
// begin uc_nation = nation_arabian ;
7504: LD_ADDR_OWVAR 21
7508: PUSH
7509: LD_INT 2
7511: ST_TO_ADDR
// pom = get_random_design_ar ;
7512: LD_ADDR_VAR 0 5
7516: PUSH
7517: CALL 8301 0 0
7521: ST_TO_ADDR
// end ; 3 :
7522: GO 7554
7524: LD_INT 3
7526: DOUBLE
7527: EQUAL
7528: IFTRUE 7532
7530: GO 7553
7532: POP
// begin uc_nation = nation_russian ;
7533: LD_ADDR_OWVAR 21
7537: PUSH
7538: LD_INT 3
7540: ST_TO_ADDR
// pom = get_random_design_ru ;
7541: LD_ADDR_VAR 0 5
7545: PUSH
7546: CALL 8866 0 0
7550: ST_TO_ADDR
// end ; end ;
7551: GO 7554
7553: POP
// vc_chassis = pom [ 1 ] ;
7554: LD_ADDR_OWVAR 37
7558: PUSH
7559: LD_VAR 0 5
7563: PUSH
7564: LD_INT 1
7566: ARRAY
7567: ST_TO_ADDR
// vc_engine = pom [ 2 ] ;
7568: LD_ADDR_OWVAR 39
7572: PUSH
7573: LD_VAR 0 5
7577: PUSH
7578: LD_INT 2
7580: ARRAY
7581: ST_TO_ADDR
// vc_weapon = pom [ 3 ] ;
7582: LD_ADDR_OWVAR 40
7586: PUSH
7587: LD_VAR 0 5
7591: PUSH
7592: LD_INT 3
7594: ARRAY
7595: ST_TO_ADDR
// vc_control = pom [ 4 ] ;
7596: LD_ADDR_OWVAR 38
7600: PUSH
7601: LD_VAR 0 5
7605: PUSH
7606: LD_INT 4
7608: ARRAY
7609: ST_TO_ADDR
// av = CreateVehicle ;
7610: LD_ADDR_VAR 0 6
7614: PUSH
7615: CALL_OW 45
7619: ST_TO_ADDR
// result := av ;
7620: LD_ADDR_VAR 0 2
7624: PUSH
7625: LD_VAR 0 6
7629: ST_TO_ADDR
// end ;
7630: LD_VAR 0 2
7634: RET
// function get_random_design_am ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
7635: LD_INT 0
7637: PPUSH
7638: PPUSH
7639: PPUSH
7640: PPUSH
7641: PPUSH
7642: PPUSH
7643: PPUSH
7644: PPUSH
7645: PPUSH
7646: PPUSH
// pom1 = Rand ( 1 , 12 ) ;
7647: LD_ADDR_VAR 0 2
7651: PUSH
7652: LD_INT 1
7654: PPUSH
7655: LD_INT 12
7657: PPUSH
7658: CALL_OW 12
7662: ST_TO_ADDR
// case pom1 of 1 :
7663: LD_VAR 0 2
7667: PUSH
7668: LD_INT 1
7670: DOUBLE
7671: EQUAL
7672: IFTRUE 7676
7674: GO 7687
7676: POP
// aa3 = us_machine_gun ; 2 :
7677: LD_ADDR_VAR 0 9
7681: PUSH
7682: LD_INT 2
7684: ST_TO_ADDR
7685: GO 7897
7687: LD_INT 2
7689: DOUBLE
7690: EQUAL
7691: IFTRUE 7695
7693: GO 7706
7695: POP
// aa3 = us_light_gun ; 3 :
7696: LD_ADDR_VAR 0 9
7700: PUSH
7701: LD_INT 3
7703: ST_TO_ADDR
7704: GO 7897
7706: LD_INT 3
7708: DOUBLE
7709: EQUAL
7710: IFTRUE 7714
7712: GO 7725
7714: POP
// aa3 = us_gatling_gun ; 4 :
7715: LD_ADDR_VAR 0 9
7719: PUSH
7720: LD_INT 4
7722: ST_TO_ADDR
7723: GO 7897
7725: LD_INT 4
7727: DOUBLE
7728: EQUAL
7729: IFTRUE 7733
7731: GO 7744
7733: POP
// aa3 = us_double_gun ; 5 :
7734: LD_ADDR_VAR 0 9
7738: PUSH
7739: LD_INT 5
7741: ST_TO_ADDR
7742: GO 7897
7744: LD_INT 5
7746: DOUBLE
7747: EQUAL
7748: IFTRUE 7752
7750: GO 7763
7752: POP
// aa3 = us_heavy_gun ; 6 :
7753: LD_ADDR_VAR 0 9
7757: PUSH
7758: LD_INT 6
7760: ST_TO_ADDR
7761: GO 7897
7763: LD_INT 6
7765: DOUBLE
7766: EQUAL
7767: IFTRUE 7771
7769: GO 7782
7771: POP
// aa3 = us_rocket_launcher ; 7 :
7772: LD_ADDR_VAR 0 9
7776: PUSH
7777: LD_INT 7
7779: ST_TO_ADDR
7780: GO 7897
7782: LD_INT 7
7784: DOUBLE
7785: EQUAL
7786: IFTRUE 7790
7788: GO 7801
7790: POP
// aa3 = us_laser ; 8 :
7791: LD_ADDR_VAR 0 9
7795: PUSH
7796: LD_INT 9
7798: ST_TO_ADDR
7799: GO 7897
7801: LD_INT 8
7803: DOUBLE
7804: EQUAL
7805: IFTRUE 7809
7807: GO 7820
7809: POP
// aa3 = us_double_laser ; 9 :
7810: LD_ADDR_VAR 0 9
7814: PUSH
7815: LD_INT 10
7817: ST_TO_ADDR
7818: GO 7897
7820: LD_INT 9
7822: DOUBLE
7823: EQUAL
7824: IFTRUE 7828
7826: GO 7839
7828: POP
// aa3 = us_radar ; 10 :
7829: LD_ADDR_VAR 0 9
7833: PUSH
7834: LD_INT 11
7836: ST_TO_ADDR
7837: GO 7897
7839: LD_INT 10
7841: DOUBLE
7842: EQUAL
7843: IFTRUE 7847
7845: GO 7858
7847: POP
// aa3 = us_cargo_bay ; 11 :
7848: LD_ADDR_VAR 0 9
7852: PUSH
7853: LD_INT 12
7855: ST_TO_ADDR
7856: GO 7897
7858: LD_INT 11
7860: DOUBLE
7861: EQUAL
7862: IFTRUE 7866
7864: GO 7877
7866: POP
// aa3 = us_crane ; 12 :
7867: LD_ADDR_VAR 0 9
7871: PUSH
7872: LD_INT 13
7874: ST_TO_ADDR
7875: GO 7897
7877: LD_INT 12
7879: DOUBLE
7880: EQUAL
7881: IFTRUE 7885
7883: GO 7896
7885: POP
// aa3 = us_bulldozer ; end ;
7886: LD_ADDR_VAR 0 9
7890: PUSH
7891: LD_INT 14
7893: ST_TO_ADDR
7894: GO 7897
7896: POP
// if pom1 in [ 5 , 8 , 12 ] then
7897: LD_VAR 0 2
7901: PUSH
7902: LD_INT 5
7904: PUSH
7905: LD_INT 8
7907: PUSH
7908: LD_INT 12
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: LIST
7915: IN
7916: IFFALSE 7936
// pom2 = Rand ( 4 , 5 ) else
7918: LD_ADDR_VAR 0 3
7922: PUSH
7923: LD_INT 4
7925: PPUSH
7926: LD_INT 5
7928: PPUSH
7929: CALL_OW 12
7933: ST_TO_ADDR
7934: GO 7987
// if pom1 in [ 1 , 9 ] then
7936: LD_VAR 0 2
7940: PUSH
7941: LD_INT 1
7943: PUSH
7944: LD_INT 9
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: IN
7951: IFFALSE 7971
// pom2 = Rand ( 1 , 5 ) else
7953: LD_ADDR_VAR 0 3
7957: PUSH
7958: LD_INT 1
7960: PPUSH
7961: LD_INT 5
7963: PPUSH
7964: CALL_OW 12
7968: ST_TO_ADDR
7969: GO 7987
// pom2 = Rand ( 2 , 5 ) ;
7971: LD_ADDR_VAR 0 3
7975: PUSH
7976: LD_INT 2
7978: PPUSH
7979: LD_INT 5
7981: PPUSH
7982: CALL_OW 12
7986: ST_TO_ADDR
// case pom2 of 1 :
7987: LD_VAR 0 3
7991: PUSH
7992: LD_INT 1
7994: DOUBLE
7995: EQUAL
7996: IFTRUE 8000
7998: GO 8011
8000: POP
// aa1 = us_light_wheeled ; 2 :
8001: LD_ADDR_VAR 0 7
8005: PUSH
8006: LD_INT 1
8008: ST_TO_ADDR
8009: GO 8088
8011: LD_INT 2
8013: DOUBLE
8014: EQUAL
8015: IFTRUE 8019
8017: GO 8030
8019: POP
// aa1 = us_medium_wheeled ; 3 :
8020: LD_ADDR_VAR 0 7
8024: PUSH
8025: LD_INT 2
8027: ST_TO_ADDR
8028: GO 8088
8030: LD_INT 3
8032: DOUBLE
8033: EQUAL
8034: IFTRUE 8038
8036: GO 8049
8038: POP
// aa1 = us_medium_tracked ; 4 :
8039: LD_ADDR_VAR 0 7
8043: PUSH
8044: LD_INT 3
8046: ST_TO_ADDR
8047: GO 8088
8049: LD_INT 4
8051: DOUBLE
8052: EQUAL
8053: IFTRUE 8057
8055: GO 8068
8057: POP
// aa1 = us_heavy_tracked ; 5 :
8058: LD_ADDR_VAR 0 7
8062: PUSH
8063: LD_INT 4
8065: ST_TO_ADDR
8066: GO 8088
8068: LD_INT 5
8070: DOUBLE
8071: EQUAL
8072: IFTRUE 8076
8074: GO 8087
8076: POP
// aa1 = us_morphling ; end ;
8077: LD_ADDR_VAR 0 7
8081: PUSH
8082: LD_INT 5
8084: ST_TO_ADDR
8085: GO 8088
8087: POP
// if pom2 < 4 then
8088: LD_VAR 0 3
8092: PUSH
8093: LD_INT 4
8095: LESS
8096: IFFALSE 8116
// pom3 = Rand ( 1 , 3 ) else
8098: LD_ADDR_VAR 0 4
8102: PUSH
8103: LD_INT 1
8105: PPUSH
8106: LD_INT 3
8108: PPUSH
8109: CALL_OW 12
8113: ST_TO_ADDR
8114: GO 8132
// pom3 = Rand ( 2 , 3 ) ;
8116: LD_ADDR_VAR 0 4
8120: PUSH
8121: LD_INT 2
8123: PPUSH
8124: LD_INT 3
8126: PPUSH
8127: CALL_OW 12
8131: ST_TO_ADDR
// case pom3 of 1 :
8132: LD_VAR 0 4
8136: PUSH
8137: LD_INT 1
8139: DOUBLE
8140: EQUAL
8141: IFTRUE 8145
8143: GO 8156
8145: POP
// aa2 = engine_solar ; 2 :
8146: LD_ADDR_VAR 0 8
8150: PUSH
8151: LD_INT 2
8153: ST_TO_ADDR
8154: GO 8195
8156: LD_INT 2
8158: DOUBLE
8159: EQUAL
8160: IFTRUE 8164
8162: GO 8175
8164: POP
// aa2 = engine_combustion ; 3 :
8165: LD_ADDR_VAR 0 8
8169: PUSH
8170: LD_INT 1
8172: ST_TO_ADDR
8173: GO 8195
8175: LD_INT 3
8177: DOUBLE
8178: EQUAL
8179: IFTRUE 8183
8181: GO 8194
8183: POP
// aa2 = engine_siberite ; end ;
8184: LD_ADDR_VAR 0 8
8188: PUSH
8189: LD_INT 3
8191: ST_TO_ADDR
8192: GO 8195
8194: POP
// pom4 = Rand ( 1 , 2 ) ;
8195: LD_ADDR_VAR 0 5
8199: PUSH
8200: LD_INT 1
8202: PPUSH
8203: LD_INT 2
8205: PPUSH
8206: CALL_OW 12
8210: ST_TO_ADDR
// case pom4 of 1 :
8211: LD_VAR 0 5
8215: PUSH
8216: LD_INT 1
8218: DOUBLE
8219: EQUAL
8220: IFTRUE 8224
8222: GO 8235
8224: POP
// aa4 = control_manual ; 2 :
8225: LD_ADDR_VAR 0 10
8229: PUSH
8230: LD_INT 1
8232: ST_TO_ADDR
8233: GO 8255
8235: LD_INT 2
8237: DOUBLE
8238: EQUAL
8239: IFTRUE 8243
8241: GO 8254
8243: POP
// aa4 = control_computer ; end ;
8244: LD_ADDR_VAR 0 10
8248: PUSH
8249: LD_INT 3
8251: ST_TO_ADDR
8252: GO 8255
8254: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
8255: LD_ADDR_VAR 0 6
8259: PUSH
8260: LD_VAR 0 7
8264: PUSH
8265: LD_VAR 0 8
8269: PUSH
8270: LD_VAR 0 9
8274: PUSH
8275: LD_VAR 0 10
8279: PUSH
8280: EMPTY
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: ST_TO_ADDR
// result = aa ;
8286: LD_ADDR_VAR 0 1
8290: PUSH
8291: LD_VAR 0 6
8295: ST_TO_ADDR
// end ;
8296: LD_VAR 0 1
8300: RET
// function get_random_design_ar ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
8301: LD_INT 0
8303: PPUSH
8304: PPUSH
8305: PPUSH
8306: PPUSH
8307: PPUSH
8308: PPUSH
8309: PPUSH
8310: PPUSH
8311: PPUSH
8312: PPUSH
// pom1 = Rand ( 1 , 11 ) ;
8313: LD_ADDR_VAR 0 2
8317: PUSH
8318: LD_INT 1
8320: PPUSH
8321: LD_INT 11
8323: PPUSH
8324: CALL_OW 12
8328: ST_TO_ADDR
// case pom1 of 1 :
8329: LD_VAR 0 2
8333: PUSH
8334: LD_INT 1
8336: DOUBLE
8337: EQUAL
8338: IFTRUE 8342
8340: GO 8353
8342: POP
// aa3 = ar_multimissile_ballista ; 2 :
8343: LD_ADDR_VAR 0 9
8347: PUSH
8348: LD_INT 22
8350: ST_TO_ADDR
8351: GO 8544
8353: LD_INT 2
8355: DOUBLE
8356: EQUAL
8357: IFTRUE 8361
8359: GO 8372
8361: POP
// aa3 = ar_light_gun ; 3 :
8362: LD_ADDR_VAR 0 9
8366: PUSH
8367: LD_INT 23
8369: ST_TO_ADDR
8370: GO 8544
8372: LD_INT 3
8374: DOUBLE
8375: EQUAL
8376: IFTRUE 8380
8378: GO 8391
8380: POP
// aa3 = ar_double_machine_gun ; 4 :
8381: LD_ADDR_VAR 0 9
8385: PUSH
8386: LD_INT 24
8388: ST_TO_ADDR
8389: GO 8544
8391: LD_INT 4
8393: DOUBLE
8394: EQUAL
8395: IFTRUE 8399
8397: GO 8410
8399: POP
// aa3 = ar_gatling_gun ; 5 :
8400: LD_ADDR_VAR 0 9
8404: PUSH
8405: LD_INT 25
8407: ST_TO_ADDR
8408: GO 8544
8410: LD_INT 5
8412: DOUBLE
8413: EQUAL
8414: IFTRUE 8418
8416: GO 8429
8418: POP
// aa3 = ar_flame_thrower ; 6 :
8419: LD_ADDR_VAR 0 9
8423: PUSH
8424: LD_INT 26
8426: ST_TO_ADDR
8427: GO 8544
8429: LD_INT 6
8431: DOUBLE
8432: EQUAL
8433: IFTRUE 8437
8435: GO 8448
8437: POP
// aa3 = ar_gun ; 7 :
8438: LD_ADDR_VAR 0 9
8442: PUSH
8443: LD_INT 27
8445: ST_TO_ADDR
8446: GO 8544
8448: LD_INT 7
8450: DOUBLE
8451: EQUAL
8452: IFTRUE 8456
8454: GO 8467
8456: POP
// aa3 = ar_rocket_launcher ; 8 :
8457: LD_ADDR_VAR 0 9
8461: PUSH
8462: LD_INT 28
8464: ST_TO_ADDR
8465: GO 8544
8467: LD_INT 8
8469: DOUBLE
8470: EQUAL
8471: IFTRUE 8475
8473: GO 8486
8475: POP
// aa3 = ar_selfpropelled_bomb ; 9 :
8476: LD_ADDR_VAR 0 9
8480: PUSH
8481: LD_INT 29
8483: ST_TO_ADDR
8484: GO 8544
8486: LD_INT 9
8488: DOUBLE
8489: EQUAL
8490: IFTRUE 8494
8492: GO 8505
8494: POP
// aa3 = ar_radar ; 10 :
8495: LD_ADDR_VAR 0 9
8499: PUSH
8500: LD_INT 30
8502: ST_TO_ADDR
8503: GO 8544
8505: LD_INT 10
8507: DOUBLE
8508: EQUAL
8509: IFTRUE 8513
8511: GO 8524
8513: POP
// aa3 = ar_control_tower ; 11 :
8514: LD_ADDR_VAR 0 9
8518: PUSH
8519: LD_INT 31
8521: ST_TO_ADDR
8522: GO 8544
8524: LD_INT 11
8526: DOUBLE
8527: EQUAL
8528: IFTRUE 8532
8530: GO 8543
8532: POP
// aa3 = us_cargo_bay ; end ;
8533: LD_ADDR_VAR 0 9
8537: PUSH
8538: LD_INT 12
8540: ST_TO_ADDR
8541: GO 8544
8543: POP
// if pom1 in [ 1 , 2 , 3 ] then
8544: LD_VAR 0 2
8548: PUSH
8549: LD_INT 1
8551: PUSH
8552: LD_INT 2
8554: PUSH
8555: LD_INT 3
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: LIST
8562: IN
8563: IFFALSE 8583
// pom2 = Rand ( 1 , 4 ) else
8565: LD_ADDR_VAR 0 3
8569: PUSH
8570: LD_INT 1
8572: PPUSH
8573: LD_INT 4
8575: PPUSH
8576: CALL_OW 12
8580: ST_TO_ADDR
8581: GO 8599
// pom2 = Rand ( 3 , 4 ) ;
8583: LD_ADDR_VAR 0 3
8587: PUSH
8588: LD_INT 3
8590: PPUSH
8591: LD_INT 4
8593: PPUSH
8594: CALL_OW 12
8598: ST_TO_ADDR
// case pom2 of 1 :
8599: LD_VAR 0 3
8603: PUSH
8604: LD_INT 1
8606: DOUBLE
8607: EQUAL
8608: IFTRUE 8612
8610: GO 8623
8612: POP
// aa1 = ar_hovercraft ; 2 :
8613: LD_ADDR_VAR 0 7
8617: PUSH
8618: LD_INT 11
8620: ST_TO_ADDR
8621: GO 8681
8623: LD_INT 2
8625: DOUBLE
8626: EQUAL
8627: IFTRUE 8631
8629: GO 8642
8631: POP
// aa1 = ar_light_trike ; 3 :
8632: LD_ADDR_VAR 0 7
8636: PUSH
8637: LD_INT 12
8639: ST_TO_ADDR
8640: GO 8681
8642: LD_INT 3
8644: DOUBLE
8645: EQUAL
8646: IFTRUE 8650
8648: GO 8661
8650: POP
// aa1 = ar_medium_trike ; 4 :
8651: LD_ADDR_VAR 0 7
8655: PUSH
8656: LD_INT 13
8658: ST_TO_ADDR
8659: GO 8681
8661: LD_INT 4
8663: DOUBLE
8664: EQUAL
8665: IFTRUE 8669
8667: GO 8680
8669: POP
// aa1 = ar_half_tracked ; end ;
8670: LD_ADDR_VAR 0 7
8674: PUSH
8675: LD_INT 14
8677: ST_TO_ADDR
8678: GO 8681
8680: POP
// pom3 = Rand ( 1 , 3 ) ;
8681: LD_ADDR_VAR 0 4
8685: PUSH
8686: LD_INT 1
8688: PPUSH
8689: LD_INT 3
8691: PPUSH
8692: CALL_OW 12
8696: ST_TO_ADDR
// case pom3 of 1 :
8697: LD_VAR 0 4
8701: PUSH
8702: LD_INT 1
8704: DOUBLE
8705: EQUAL
8706: IFTRUE 8710
8708: GO 8721
8710: POP
// aa2 = engine_solar ; 2 :
8711: LD_ADDR_VAR 0 8
8715: PUSH
8716: LD_INT 2
8718: ST_TO_ADDR
8719: GO 8760
8721: LD_INT 2
8723: DOUBLE
8724: EQUAL
8725: IFTRUE 8729
8727: GO 8740
8729: POP
// aa2 = engine_combustion ; 3 :
8730: LD_ADDR_VAR 0 8
8734: PUSH
8735: LD_INT 1
8737: ST_TO_ADDR
8738: GO 8760
8740: LD_INT 3
8742: DOUBLE
8743: EQUAL
8744: IFTRUE 8748
8746: GO 8759
8748: POP
// aa2 = engine_siberite ; end ;
8749: LD_ADDR_VAR 0 8
8753: PUSH
8754: LD_INT 3
8756: ST_TO_ADDR
8757: GO 8760
8759: POP
// pom4 = Rand ( 1 , 2 ) ;
8760: LD_ADDR_VAR 0 5
8764: PUSH
8765: LD_INT 1
8767: PPUSH
8768: LD_INT 2
8770: PPUSH
8771: CALL_OW 12
8775: ST_TO_ADDR
// case pom4 of 1 :
8776: LD_VAR 0 5
8780: PUSH
8781: LD_INT 1
8783: DOUBLE
8784: EQUAL
8785: IFTRUE 8789
8787: GO 8800
8789: POP
// aa4 = control_manual ; 2 :
8790: LD_ADDR_VAR 0 10
8794: PUSH
8795: LD_INT 1
8797: ST_TO_ADDR
8798: GO 8820
8800: LD_INT 2
8802: DOUBLE
8803: EQUAL
8804: IFTRUE 8808
8806: GO 8819
8808: POP
// aa4 = control_apeman ; end ;
8809: LD_ADDR_VAR 0 10
8813: PUSH
8814: LD_INT 5
8816: ST_TO_ADDR
8817: GO 8820
8819: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
8820: LD_ADDR_VAR 0 6
8824: PUSH
8825: LD_VAR 0 7
8829: PUSH
8830: LD_VAR 0 8
8834: PUSH
8835: LD_VAR 0 9
8839: PUSH
8840: LD_VAR 0 10
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: ST_TO_ADDR
// result = aa ;
8851: LD_ADDR_VAR 0 1
8855: PUSH
8856: LD_VAR 0 6
8860: ST_TO_ADDR
// end ;
8861: LD_VAR 0 1
8865: RET
// function get_random_design_ru ; var pom1 , pom2 , pom3 , pom4 ; var aa , aa1 , aa2 , aa3 , aa4 ; begin
8866: LD_INT 0
8868: PPUSH
8869: PPUSH
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
8874: PPUSH
8875: PPUSH
8876: PPUSH
8877: PPUSH
// pom1 = Rand ( 1 , 10 ) ;
8878: LD_ADDR_VAR 0 2
8882: PUSH
8883: LD_INT 1
8885: PPUSH
8886: LD_INT 10
8888: PPUSH
8889: CALL_OW 12
8893: ST_TO_ADDR
// case pom1 of 1 :
8894: LD_VAR 0 2
8898: PUSH
8899: LD_INT 1
8901: DOUBLE
8902: EQUAL
8903: IFTRUE 8907
8905: GO 8918
8907: POP
// aa3 = ru_heavy_machine_gun ; 2 :
8908: LD_ADDR_VAR 0 9
8912: PUSH
8913: LD_INT 42
8915: ST_TO_ADDR
8916: GO 9090
8918: LD_INT 2
8920: DOUBLE
8921: EQUAL
8922: IFTRUE 8926
8924: GO 8937
8926: POP
// aa3 = ru_gatling_gun ; 3 :
8927: LD_ADDR_VAR 0 9
8931: PUSH
8932: LD_INT 43
8934: ST_TO_ADDR
8935: GO 9090
8937: LD_INT 3
8939: DOUBLE
8940: EQUAL
8941: IFTRUE 8945
8943: GO 8956
8945: POP
// aa3 = ru_gun ; 4 :
8946: LD_ADDR_VAR 0 9
8950: PUSH
8951: LD_INT 44
8953: ST_TO_ADDR
8954: GO 9090
8956: LD_INT 4
8958: DOUBLE
8959: EQUAL
8960: IFTRUE 8964
8962: GO 8975
8964: POP
// aa3 = ru_rocket_launcher ; 5 :
8965: LD_ADDR_VAR 0 9
8969: PUSH
8970: LD_INT 45
8972: ST_TO_ADDR
8973: GO 9090
8975: LD_INT 5
8977: DOUBLE
8978: EQUAL
8979: IFTRUE 8983
8981: GO 8994
8983: POP
// aa3 = ru_heavy_gun ; 6 :
8984: LD_ADDR_VAR 0 9
8988: PUSH
8989: LD_INT 46
8991: ST_TO_ADDR
8992: GO 9090
8994: LD_INT 6
8996: DOUBLE
8997: EQUAL
8998: IFTRUE 9002
9000: GO 9013
9002: POP
// aa3 = ru_rocket ; 7 :
9003: LD_ADDR_VAR 0 9
9007: PUSH
9008: LD_INT 47
9010: ST_TO_ADDR
9011: GO 9090
9013: LD_INT 7
9015: DOUBLE
9016: EQUAL
9017: IFTRUE 9021
9019: GO 9032
9021: POP
// aa3 = ru_time_lapser ; 8 :
9022: LD_ADDR_VAR 0 9
9026: PUSH
9027: LD_INT 49
9029: ST_TO_ADDR
9030: GO 9090
9032: LD_INT 8
9034: DOUBLE
9035: EQUAL
9036: IFTRUE 9040
9038: GO 9051
9040: POP
// aa3 = ru_cargo_bay ; 9 :
9041: LD_ADDR_VAR 0 9
9045: PUSH
9046: LD_INT 51
9048: ST_TO_ADDR
9049: GO 9090
9051: LD_INT 9
9053: DOUBLE
9054: EQUAL
9055: IFTRUE 9059
9057: GO 9070
9059: POP
// aa3 = ru_crane ; 10 :
9060: LD_ADDR_VAR 0 9
9064: PUSH
9065: LD_INT 52
9067: ST_TO_ADDR
9068: GO 9090
9070: LD_INT 10
9072: DOUBLE
9073: EQUAL
9074: IFTRUE 9078
9076: GO 9089
9078: POP
// aa3 = ru_bulldozer ; end ;
9079: LD_ADDR_VAR 0 9
9083: PUSH
9084: LD_INT 53
9086: ST_TO_ADDR
9087: GO 9090
9089: POP
// if pom1 in [ 1 , 2 , 3 , 4 ] then
9090: LD_VAR 0 2
9094: PUSH
9095: LD_INT 1
9097: PUSH
9098: LD_INT 2
9100: PUSH
9101: LD_INT 3
9103: PUSH
9104: LD_INT 4
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: IN
9113: IFFALSE 9133
// pom2 = Rand ( 1 , 4 ) else
9115: LD_ADDR_VAR 0 3
9119: PUSH
9120: LD_INT 1
9122: PPUSH
9123: LD_INT 4
9125: PPUSH
9126: CALL_OW 12
9130: ST_TO_ADDR
9131: GO 9149
// pom2 = Rand ( 3 , 4 ) ;
9133: LD_ADDR_VAR 0 3
9137: PUSH
9138: LD_INT 3
9140: PPUSH
9141: LD_INT 4
9143: PPUSH
9144: CALL_OW 12
9148: ST_TO_ADDR
// case pom2 of 1 :
9149: LD_VAR 0 3
9153: PUSH
9154: LD_INT 1
9156: DOUBLE
9157: EQUAL
9158: IFTRUE 9162
9160: GO 9173
9162: POP
// aa1 = ru_medium_wheeled ; 2 :
9163: LD_ADDR_VAR 0 7
9167: PUSH
9168: LD_INT 21
9170: ST_TO_ADDR
9171: GO 9231
9173: LD_INT 2
9175: DOUBLE
9176: EQUAL
9177: IFTRUE 9181
9179: GO 9192
9181: POP
// aa1 = ru_medium_tracked ; 3 :
9182: LD_ADDR_VAR 0 7
9186: PUSH
9187: LD_INT 22
9189: ST_TO_ADDR
9190: GO 9231
9192: LD_INT 3
9194: DOUBLE
9195: EQUAL
9196: IFTRUE 9200
9198: GO 9211
9200: POP
// aa1 = ru_heavy_wheeled ; 4 :
9201: LD_ADDR_VAR 0 7
9205: PUSH
9206: LD_INT 23
9208: ST_TO_ADDR
9209: GO 9231
9211: LD_INT 4
9213: DOUBLE
9214: EQUAL
9215: IFTRUE 9219
9217: GO 9230
9219: POP
// aa1 = ru_heavy_tracked ; end ;
9220: LD_ADDR_VAR 0 7
9224: PUSH
9225: LD_INT 24
9227: ST_TO_ADDR
9228: GO 9231
9230: POP
// pom3 = Rand ( 1 , 2 ) ;
9231: LD_ADDR_VAR 0 4
9235: PUSH
9236: LD_INT 1
9238: PPUSH
9239: LD_INT 2
9241: PPUSH
9242: CALL_OW 12
9246: ST_TO_ADDR
// case pom3 of 1 :
9247: LD_VAR 0 4
9251: PUSH
9252: LD_INT 1
9254: DOUBLE
9255: EQUAL
9256: IFTRUE 9260
9258: GO 9271
9260: POP
// aa2 = engine_combustion ; 2 :
9261: LD_ADDR_VAR 0 8
9265: PUSH
9266: LD_INT 1
9268: ST_TO_ADDR
9269: GO 9291
9271: LD_INT 2
9273: DOUBLE
9274: EQUAL
9275: IFTRUE 9279
9277: GO 9290
9279: POP
// aa2 = engine_siberite ; end ;
9280: LD_ADDR_VAR 0 8
9284: PUSH
9285: LD_INT 3
9287: ST_TO_ADDR
9288: GO 9291
9290: POP
// pom4 = Rand ( 1 , 2 ) ;
9291: LD_ADDR_VAR 0 5
9295: PUSH
9296: LD_INT 1
9298: PPUSH
9299: LD_INT 2
9301: PPUSH
9302: CALL_OW 12
9306: ST_TO_ADDR
// case pom4 of 1 :
9307: LD_VAR 0 5
9311: PUSH
9312: LD_INT 1
9314: DOUBLE
9315: EQUAL
9316: IFTRUE 9320
9318: GO 9331
9320: POP
// aa4 = control_manual ; 2 :
9321: LD_ADDR_VAR 0 10
9325: PUSH
9326: LD_INT 1
9328: ST_TO_ADDR
9329: GO 9351
9331: LD_INT 2
9333: DOUBLE
9334: EQUAL
9335: IFTRUE 9339
9337: GO 9350
9339: POP
// aa4 = control_computer ; end ;
9340: LD_ADDR_VAR 0 10
9344: PUSH
9345: LD_INT 3
9347: ST_TO_ADDR
9348: GO 9351
9350: POP
// aa = [ aa1 , aa2 , aa3 , aa4 ] ;
9351: LD_ADDR_VAR 0 6
9355: PUSH
9356: LD_VAR 0 7
9360: PUSH
9361: LD_VAR 0 8
9365: PUSH
9366: LD_VAR 0 9
9370: PUSH
9371: LD_VAR 0 10
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: ST_TO_ADDR
// result = aa ;
9382: LD_ADDR_VAR 0 1
9386: PUSH
9387: LD_VAR 0 6
9391: ST_TO_ADDR
// end ;
9392: LD_VAR 0 1
9396: RET
// every 0 0$1 trigger FilterUnitsInArea ( zona , [ f_not , [ f_side , 0 ] ] ) > 0 do var zony ; var pom , i ; var UN ; var p1 , p2 ;
9397: LD_INT 25
9399: PPUSH
9400: LD_INT 3
9402: PUSH
9403: LD_INT 22
9405: PUSH
9406: LD_INT 0
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PPUSH
9417: CALL_OW 70
9421: PUSH
9422: LD_INT 0
9424: GREATER
9425: IFFALSE 9618
9427: GO 9429
9429: DISABLE
9430: LD_INT 0
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
9436: PPUSH
9437: PPUSH
// begin zony = [ z1 , z2 , z3 , z4 , z5 , z6 , z7 , z8 , z9 , z10 , z11 , z12 , z13 , z14 , z15 , z16 , z17 , z18 , z19 , z20 ] ;
9438: LD_ADDR_VAR 0 1
9442: PUSH
9443: LD_INT 5
9445: PUSH
9446: LD_INT 6
9448: PUSH
9449: LD_INT 7
9451: PUSH
9452: LD_INT 8
9454: PUSH
9455: LD_INT 9
9457: PUSH
9458: LD_INT 10
9460: PUSH
9461: LD_INT 11
9463: PUSH
9464: LD_INT 12
9466: PUSH
9467: LD_INT 20
9469: PUSH
9470: LD_INT 13
9472: PUSH
9473: LD_INT 14
9475: PUSH
9476: LD_INT 21
9478: PUSH
9479: LD_INT 15
9481: PUSH
9482: LD_INT 16
9484: PUSH
9485: LD_INT 17
9487: PUSH
9488: LD_INT 18
9490: PUSH
9491: LD_INT 19
9493: PUSH
9494: LD_INT 22
9496: PUSH
9497: LD_INT 23
9499: PUSH
9500: LD_INT 24
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: ST_TO_ADDR
// for i in zony do
9525: LD_ADDR_VAR 0 3
9529: PUSH
9530: LD_VAR 0 1
9534: PUSH
9535: FOR_IN
9536: IFFALSE 9615
// begin pom = FilterUnitsInArea ( i , [ f_not , [ f_side , 0 ] ] ) ;
9538: LD_ADDR_VAR 0 2
9542: PUSH
9543: LD_VAR 0 3
9547: PPUSH
9548: LD_INT 3
9550: PUSH
9551: LD_INT 22
9553: PUSH
9554: LD_INT 0
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PPUSH
9565: CALL_OW 70
9569: ST_TO_ADDR
// if pom > 0 then
9570: LD_VAR 0 2
9574: PUSH
9575: LD_INT 0
9577: GREATER
9578: IFFALSE 9613
// begin p1 = GetSide ( pom [ 1 ] ) ;
9580: LD_ADDR_VAR 0 5
9584: PUSH
9585: LD_VAR 0 2
9589: PUSH
9590: LD_INT 1
9592: ARRAY
9593: PPUSH
9594: CALL_OW 255
9598: ST_TO_ADDR
// zapis_do_fronty ( i , p1 ) ;
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_VAR 0 5
9608: PPUSH
9609: CALL 9766 0 2
// end ; end ;
9613: GO 9535
9615: POP
9616: POP
// enable ;
9617: ENABLE
// end ;
9618: PPOPN 6
9620: END
// every 0 0$3 do var poc ; var p1 , p2 ; var j , i ;
9621: GO 9623
9623: DISABLE
9624: LD_INT 0
9626: PPUSH
9627: PPUSH
9628: PPUSH
9629: PPUSH
9630: PPUSH
// begin poc = 1 ;
9631: LD_ADDR_VAR 0 1
9635: PUSH
9636: LD_INT 1
9638: ST_TO_ADDR
// for i in POINTY do
9639: LD_ADDR_VAR 0 5
9643: PUSH
9644: LD_EXP 44
9648: PUSH
9649: FOR_IN
9650: IFFALSE 9760
// begin if i >= chance_find then
9652: LD_VAR 0 5
9656: PUSH
9657: LD_EXP 30
9661: GREATEREQUAL
9662: IFFALSE 9744
// begin for j = 1 to 8 do
9664: LD_ADDR_VAR 0 4
9668: PUSH
9669: DOUBLE
9670: LD_INT 1
9672: DEC
9673: ST_TO_ADDR
9674: LD_INT 8
9676: PUSH
9677: FOR_TO
9678: IFFALSE 9712
// if Side_Positions [ j ] = poc then
9680: LD_EXP 37
9684: PUSH
9685: LD_VAR 0 4
9689: ARRAY
9690: PUSH
9691: LD_VAR 0 1
9695: EQUAL
9696: IFFALSE 9710
// begin p1 = j ;
9698: LD_ADDR_VAR 0 2
9702: PUSH
9703: LD_VAR 0 4
9707: ST_TO_ADDR
// break ;
9708: GO 9712
// end ;
9710: GO 9677
9712: POP
9713: POP
// p2 = Side_Nations [ j ] ;
9714: LD_ADDR_VAR 0 3
9718: PUSH
9719: LD_EXP 38
9723: PUSH
9724: LD_VAR 0 4
9728: ARRAY
9729: ST_TO_ADDR
// find_clovicka ( p1 , p2 ) ;
9730: LD_VAR 0 2
9734: PPUSH
9735: LD_VAR 0 3
9739: PPUSH
9740: CALL 10090 0 2
// end ; poc = poc + 1 ;
9744: LD_ADDR_VAR 0 1
9748: PUSH
9749: LD_VAR 0 1
9753: PUSH
9754: LD_INT 1
9756: PLUS
9757: ST_TO_ADDR
// end ;
9758: GO 9649
9760: POP
9761: POP
// enable ;
9762: ENABLE
// end ;
9763: PPOPN 5
9765: END
// function zapis_do_fronty ( zo , side ) ; var pom ; begin
9766: LD_INT 0
9768: PPUSH
9769: PPUSH
// pom = 0 ;
9770: LD_ADDR_VAR 0 4
9774: PUSH
9775: LD_INT 0
9777: ST_TO_ADDR
// pom = Side_Positions [ side ] ;
9778: LD_ADDR_VAR 0 4
9782: PUSH
9783: LD_EXP 37
9787: PUSH
9788: LD_VAR 0 2
9792: ARRAY
9793: ST_TO_ADDR
// if pom = 0 then
9794: LD_VAR 0 4
9798: PUSH
9799: LD_INT 0
9801: EQUAL
9802: IFFALSE 9811
// msg ( konec ... chyba ) ;
9804: LD_STRING konec ... chyba
9806: PPUSH
9807: CALL_OW 100
// case pom of 1 :
9811: LD_VAR 0 4
9815: PUSH
9816: LD_INT 1
9818: DOUBLE
9819: EQUAL
9820: IFTRUE 9824
9822: GO 9883
9824: POP
// POINTY = [ POINTY [ 1 ] union [ zo ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] ] ; 2 :
9825: LD_ADDR_EXP 44
9829: PUSH
9830: LD_EXP 44
9834: PUSH
9835: LD_INT 1
9837: ARRAY
9838: PUSH
9839: LD_VAR 0 1
9843: PUSH
9844: EMPTY
9845: LIST
9846: UNION
9847: PUSH
9848: LD_EXP 44
9852: PUSH
9853: LD_INT 2
9855: ARRAY
9856: PUSH
9857: LD_EXP 44
9861: PUSH
9862: LD_INT 3
9864: ARRAY
9865: PUSH
9866: LD_EXP 44
9870: PUSH
9871: LD_INT 4
9873: ARRAY
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: ST_TO_ADDR
9881: GO 10085
9883: LD_INT 2
9885: DOUBLE
9886: EQUAL
9887: IFTRUE 9891
9889: GO 9950
9891: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] union [ zo ] , POINTY [ 3 ] , POINTY [ 4 ] ] ; 3 :
9892: LD_ADDR_EXP 44
9896: PUSH
9897: LD_EXP 44
9901: PUSH
9902: LD_INT 1
9904: ARRAY
9905: PUSH
9906: LD_EXP 44
9910: PUSH
9911: LD_INT 2
9913: ARRAY
9914: PUSH
9915: LD_VAR 0 1
9919: PUSH
9920: EMPTY
9921: LIST
9922: UNION
9923: PUSH
9924: LD_EXP 44
9928: PUSH
9929: LD_INT 3
9931: ARRAY
9932: PUSH
9933: LD_EXP 44
9937: PUSH
9938: LD_INT 4
9940: ARRAY
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: ST_TO_ADDR
9948: GO 10085
9950: LD_INT 3
9952: DOUBLE
9953: EQUAL
9954: IFTRUE 9958
9956: GO 10017
9958: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] union [ zo ] , POINTY [ 4 ] ] ; 4 :
9959: LD_ADDR_EXP 44
9963: PUSH
9964: LD_EXP 44
9968: PUSH
9969: LD_INT 1
9971: ARRAY
9972: PUSH
9973: LD_EXP 44
9977: PUSH
9978: LD_INT 2
9980: ARRAY
9981: PUSH
9982: LD_EXP 44
9986: PUSH
9987: LD_INT 3
9989: ARRAY
9990: PUSH
9991: LD_VAR 0 1
9995: PUSH
9996: EMPTY
9997: LIST
9998: UNION
9999: PUSH
10000: LD_EXP 44
10004: PUSH
10005: LD_INT 4
10007: ARRAY
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: ST_TO_ADDR
10015: GO 10085
10017: LD_INT 4
10019: DOUBLE
10020: EQUAL
10021: IFTRUE 10025
10023: GO 10084
10025: POP
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] union [ zo ] ] ; end ;
10026: LD_ADDR_EXP 44
10030: PUSH
10031: LD_EXP 44
10035: PUSH
10036: LD_INT 1
10038: ARRAY
10039: PUSH
10040: LD_EXP 44
10044: PUSH
10045: LD_INT 2
10047: ARRAY
10048: PUSH
10049: LD_EXP 44
10053: PUSH
10054: LD_INT 3
10056: ARRAY
10057: PUSH
10058: LD_EXP 44
10062: PUSH
10063: LD_INT 4
10065: ARRAY
10066: PUSH
10067: LD_VAR 0 1
10071: PUSH
10072: EMPTY
10073: LIST
10074: UNION
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: ST_TO_ADDR
10082: GO 10085
10084: POP
// end ;
10085: LD_VAR 0 3
10089: RET
// function find_clovicka ( side , nat ) ; var pom ; var un ; var unat ; var pomridic ; var pozice ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
10095: PPUSH
10096: PPUSH
10097: PPUSH
// pozice = Side_Positions [ side ] ;
10098: LD_ADDR_VAR 0 8
10102: PUSH
10103: LD_EXP 37
10107: PUSH
10108: LD_VAR 0 1
10112: ARRAY
10113: ST_TO_ADDR
// wait ( Rand ( 1 , 0 0$10 ) ) ;
10114: LD_INT 1
10116: PPUSH
10117: LD_INT 350
10119: PPUSH
10120: CALL_OW 12
10124: PPUSH
10125: CALL_OW 67
// pom = Rand ( 1 , ZMIZELI_LIDI [ pozice ] + 0 ) ;
10129: LD_ADDR_VAR 0 4
10133: PUSH
10134: LD_INT 1
10136: PPUSH
10137: LD_EXP 43
10141: PUSH
10142: LD_VAR 0 8
10146: ARRAY
10147: PUSH
10148: LD_INT 0
10150: PLUS
10151: PPUSH
10152: CALL_OW 12
10156: ST_TO_ADDR
// un = ZMIZELI_LIDI [ pozice ] [ pom ] ;
10157: LD_ADDR_VAR 0 5
10161: PUSH
10162: LD_EXP 43
10166: PUSH
10167: LD_VAR 0 8
10171: ARRAY
10172: PUSH
10173: LD_VAR 0 4
10177: ARRAY
10178: ST_TO_ADDR
// SetSide ( un , side ) ;
10179: LD_VAR 0 5
10183: PPUSH
10184: LD_VAR 0 1
10188: PPUSH
10189: CALL_OW 235
// if GetType ( un ) = unit_vehicle then
10193: LD_VAR 0 5
10197: PPUSH
10198: CALL_OW 247
10202: PUSH
10203: LD_INT 2
10205: EQUAL
10206: IFFALSE 10327
// if GetControl ( un ) = control_manual then
10208: LD_VAR 0 5
10212: PPUSH
10213: CALL_OW 263
10217: PUSH
10218: LD_INT 1
10220: EQUAL
10221: IFFALSE 10327
// if IsDrivenBy ( un ) = 0 then
10223: LD_VAR 0 5
10227: PPUSH
10228: CALL_OW 311
10232: PUSH
10233: LD_INT 0
10235: EQUAL
10236: IFFALSE 10298
// begin uc_side = side ;
10238: LD_ADDR_OWVAR 20
10242: PUSH
10243: LD_VAR 0 1
10247: ST_TO_ADDR
// uc_nation = nat ;
10248: LD_ADDR_OWVAR 21
10252: PUSH
10253: LD_VAR 0 2
10257: ST_TO_ADDR
// pomridic = get_human ( get_sex , class_mechanic , 1 ,  ) ;
10258: LD_ADDR_VAR 0 7
10262: PUSH
10263: CALL 7316 0 0
10267: PPUSH
10268: LD_INT 3
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: LD_STRING 
10276: PPUSH
10277: CALL 7258 0 4
10281: ST_TO_ADDR
// PlaceHumanInUnit ( pomridic , un ) ;
10282: LD_VAR 0 7
10286: PPUSH
10287: LD_VAR 0 5
10291: PPUSH
10292: CALL_OW 52
// end else
10296: GO 10327
// begin pomridic = IsDrivenBy ( un ) ;
10298: LD_ADDR_VAR 0 7
10302: PUSH
10303: LD_VAR 0 5
10307: PPUSH
10308: CALL_OW 311
10312: ST_TO_ADDR
// SetSide ( pomridic , side ) ;
10313: LD_VAR 0 7
10317: PPUSH
10318: LD_VAR 0 1
10322: PPUSH
10323: CALL_OW 235
// end ; if IsDrivenBy ( un ) > 0 then
10327: LD_VAR 0 5
10331: PPUSH
10332: CALL_OW 311
10336: PUSH
10337: LD_INT 0
10339: GREATER
10340: IFFALSE 10361
// SetTag ( IsDrivenBy ( un ) , 0 ) else
10342: LD_VAR 0 5
10346: PPUSH
10347: CALL_OW 311
10351: PPUSH
10352: LD_INT 0
10354: PPUSH
10355: CALL_OW 109
10359: GO 10373
// SetTag ( un , 0 ) ;
10361: LD_VAR 0 5
10365: PPUSH
10366: LD_INT 0
10368: PPUSH
10369: CALL_OW 109
// PlaceUnitArea ( un , new_people , true ) ;
10373: LD_VAR 0 5
10377: PPUSH
10378: LD_INT 26
10380: PPUSH
10381: LD_INT 1
10383: PPUSH
10384: CALL_OW 49
// case pozice of 1 :
10388: LD_VAR 0 8
10392: PUSH
10393: LD_INT 1
10395: DOUBLE
10396: EQUAL
10397: IFTRUE 10401
10399: GO 10497
10401: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] diff un , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ;
10402: LD_ADDR_EXP 43
10406: PUSH
10407: LD_EXP 43
10411: PUSH
10412: LD_INT 1
10414: ARRAY
10415: PUSH
10416: LD_VAR 0 5
10420: DIFF
10421: PUSH
10422: LD_EXP 43
10426: PUSH
10427: LD_INT 2
10429: ARRAY
10430: PUSH
10431: LD_EXP 43
10435: PUSH
10436: LD_INT 3
10438: ARRAY
10439: PUSH
10440: LD_EXP 43
10444: PUSH
10445: LD_INT 4
10447: ARRAY
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: ST_TO_ADDR
// POINTY = [ [ ] , POINTY [ 2 ] , POINTY [ 3 ] , POINTY [ 4 ] ] ;
10455: LD_ADDR_EXP 44
10459: PUSH
10460: EMPTY
10461: PUSH
10462: LD_EXP 44
10466: PUSH
10467: LD_INT 2
10469: ARRAY
10470: PUSH
10471: LD_EXP 44
10475: PUSH
10476: LD_INT 3
10478: ARRAY
10479: PUSH
10480: LD_EXP 44
10484: PUSH
10485: LD_INT 4
10487: ARRAY
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: ST_TO_ADDR
// end ; 2 :
10495: GO 10810
10497: LD_INT 2
10499: DOUBLE
10500: EQUAL
10501: IFTRUE 10505
10503: GO 10601
10505: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] diff un , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ;
10506: LD_ADDR_EXP 43
10510: PUSH
10511: LD_EXP 43
10515: PUSH
10516: LD_INT 1
10518: ARRAY
10519: PUSH
10520: LD_EXP 43
10524: PUSH
10525: LD_INT 2
10527: ARRAY
10528: PUSH
10529: LD_VAR 0 5
10533: DIFF
10534: PUSH
10535: LD_EXP 43
10539: PUSH
10540: LD_INT 3
10542: ARRAY
10543: PUSH
10544: LD_EXP 43
10548: PUSH
10549: LD_INT 4
10551: ARRAY
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , [ ] , POINTY [ 3 ] , POINTY [ 4 ] ] ;
10559: LD_ADDR_EXP 44
10563: PUSH
10564: LD_EXP 44
10568: PUSH
10569: LD_INT 1
10571: ARRAY
10572: PUSH
10573: EMPTY
10574: PUSH
10575: LD_EXP 44
10579: PUSH
10580: LD_INT 3
10582: ARRAY
10583: PUSH
10584: LD_EXP 44
10588: PUSH
10589: LD_INT 4
10591: ARRAY
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: ST_TO_ADDR
// end ; 3 :
10599: GO 10810
10601: LD_INT 3
10603: DOUBLE
10604: EQUAL
10605: IFTRUE 10609
10607: GO 10705
10609: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] diff un , ZMIZELI_LIDI [ 4 ] ] ;
10610: LD_ADDR_EXP 43
10614: PUSH
10615: LD_EXP 43
10619: PUSH
10620: LD_INT 1
10622: ARRAY
10623: PUSH
10624: LD_EXP 43
10628: PUSH
10629: LD_INT 2
10631: ARRAY
10632: PUSH
10633: LD_EXP 43
10637: PUSH
10638: LD_INT 3
10640: ARRAY
10641: PUSH
10642: LD_VAR 0 5
10646: DIFF
10647: PUSH
10648: LD_EXP 43
10652: PUSH
10653: LD_INT 4
10655: ARRAY
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , [ ] , POINTY [ 4 ] ] ;
10663: LD_ADDR_EXP 44
10667: PUSH
10668: LD_EXP 44
10672: PUSH
10673: LD_INT 1
10675: ARRAY
10676: PUSH
10677: LD_EXP 44
10681: PUSH
10682: LD_INT 2
10684: ARRAY
10685: PUSH
10686: EMPTY
10687: PUSH
10688: LD_EXP 44
10692: PUSH
10693: LD_INT 4
10695: ARRAY
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: ST_TO_ADDR
// end ; 4 :
10703: GO 10810
10705: LD_INT 4
10707: DOUBLE
10708: EQUAL
10709: IFTRUE 10713
10711: GO 10809
10713: POP
// begin ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] diff un ] ;
10714: LD_ADDR_EXP 43
10718: PUSH
10719: LD_EXP 43
10723: PUSH
10724: LD_INT 1
10726: ARRAY
10727: PUSH
10728: LD_EXP 43
10732: PUSH
10733: LD_INT 2
10735: ARRAY
10736: PUSH
10737: LD_EXP 43
10741: PUSH
10742: LD_INT 3
10744: ARRAY
10745: PUSH
10746: LD_EXP 43
10750: PUSH
10751: LD_INT 4
10753: ARRAY
10754: PUSH
10755: LD_VAR 0 5
10759: DIFF
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: ST_TO_ADDR
// POINTY = [ POINTY [ 1 ] , POINTY [ 2 ] , POINTY [ 3 ] , [ ] ] ;
10767: LD_ADDR_EXP 44
10771: PUSH
10772: LD_EXP 44
10776: PUSH
10777: LD_INT 1
10779: ARRAY
10780: PUSH
10781: LD_EXP 44
10785: PUSH
10786: LD_INT 2
10788: ARRAY
10789: PUSH
10790: LD_EXP 44
10794: PUSH
10795: LD_INT 3
10797: ARRAY
10798: PUSH
10799: EMPTY
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: ST_TO_ADDR
// end ; end ;
10807: GO 10810
10809: POP
// wait ( 1 1$0 ) ;
10810: LD_INT 2100
10812: PPUSH
10813: CALL_OW 67
// end ;
10817: LD_VAR 0 3
10821: RET
// every 1 1$0 do var i , k ; var pom ; var barva ; var ZL ;
10822: GO 10824
10824: DISABLE
10825: LD_INT 0
10827: PPUSH
10828: PPUSH
10829: PPUSH
10830: PPUSH
10831: PPUSH
// begin for i := 1 to 4 do
10832: LD_ADDR_VAR 0 1
10836: PUSH
10837: DOUBLE
10838: LD_INT 1
10840: DEC
10841: ST_TO_ADDR
10842: LD_INT 4
10844: PUSH
10845: FOR_TO
10846: IFFALSE 11201
// if ZMIZELI_LIDI [ i ] < 5 then
10848: LD_EXP 43
10852: PUSH
10853: LD_VAR 0 1
10857: ARRAY
10858: PUSH
10859: LD_INT 5
10861: LESS
10862: IFFALSE 11199
// begin for k := 1 to 8 do
10864: LD_ADDR_VAR 0 2
10868: PUSH
10869: DOUBLE
10870: LD_INT 1
10872: DEC
10873: ST_TO_ADDR
10874: LD_INT 8
10876: PUSH
10877: FOR_TO
10878: IFFALSE 10912
// if Side_Positions [ k ] = i then
10880: LD_EXP 37
10884: PUSH
10885: LD_VAR 0 2
10889: ARRAY
10890: PUSH
10891: LD_VAR 0 1
10895: EQUAL
10896: IFFALSE 10910
// begin barva = k ;
10898: LD_ADDR_VAR 0 4
10902: PUSH
10903: LD_VAR 0 2
10907: ST_TO_ADDR
// break ;
10908: GO 10912
// end ;
10910: GO 10877
10912: POP
10913: POP
// if Prob ( 10 ) then
10914: LD_INT 10
10916: PPUSH
10917: CALL_OW 13
10921: IFFALSE 10940
// pom = vytvor_nove_auto ( barva ) else
10923: LD_ADDR_VAR 0 3
10927: PUSH
10928: LD_VAR 0 4
10932: PPUSH
10933: CALL 7351 0 1
10937: ST_TO_ADDR
10938: GO 10955
// pom = vytvor_noveho_cloveka ( barva ) ;
10940: LD_ADDR_VAR 0 3
10944: PUSH
10945: LD_VAR 0 4
10949: PPUSH
10950: CALL 6630 0 1
10954: ST_TO_ADDR
// ZL = ZMIZELI_LIDI [ i ] ^ pom ;
10955: LD_ADDR_VAR 0 5
10959: PUSH
10960: LD_EXP 43
10964: PUSH
10965: LD_VAR 0 1
10969: ARRAY
10970: PUSH
10971: LD_VAR 0 3
10975: ADD
10976: ST_TO_ADDR
// case i of 1 :
10977: LD_VAR 0 1
10981: PUSH
10982: LD_INT 1
10984: DOUBLE
10985: EQUAL
10986: IFTRUE 10990
10988: GO 11036
10990: POP
// ZMIZELI_LIDI = [ ZL , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 2 :
10991: LD_ADDR_EXP 43
10995: PUSH
10996: LD_VAR 0 5
11000: PUSH
11001: LD_EXP 43
11005: PUSH
11006: LD_INT 2
11008: ARRAY
11009: PUSH
11010: LD_EXP 43
11014: PUSH
11015: LD_INT 3
11017: ARRAY
11018: PUSH
11019: LD_EXP 43
11023: PUSH
11024: LD_INT 4
11026: ARRAY
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: ST_TO_ADDR
11034: GO 11199
11036: LD_INT 2
11038: DOUBLE
11039: EQUAL
11040: IFTRUE 11044
11042: GO 11090
11044: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZL , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 3 :
11045: LD_ADDR_EXP 43
11049: PUSH
11050: LD_EXP 43
11054: PUSH
11055: LD_INT 1
11057: ARRAY
11058: PUSH
11059: LD_VAR 0 5
11063: PUSH
11064: LD_EXP 43
11068: PUSH
11069: LD_INT 3
11071: ARRAY
11072: PUSH
11073: LD_EXP 43
11077: PUSH
11078: LD_INT 4
11080: ARRAY
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: ST_TO_ADDR
11088: GO 11199
11090: LD_INT 3
11092: DOUBLE
11093: EQUAL
11094: IFTRUE 11098
11096: GO 11144
11098: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZL , ZMIZELI_LIDI [ 4 ] ] ; 4 :
11099: LD_ADDR_EXP 43
11103: PUSH
11104: LD_EXP 43
11108: PUSH
11109: LD_INT 1
11111: ARRAY
11112: PUSH
11113: LD_EXP 43
11117: PUSH
11118: LD_INT 2
11120: ARRAY
11121: PUSH
11122: LD_VAR 0 5
11126: PUSH
11127: LD_EXP 43
11131: PUSH
11132: LD_INT 4
11134: ARRAY
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: ST_TO_ADDR
11142: GO 11199
11144: LD_INT 4
11146: DOUBLE
11147: EQUAL
11148: IFTRUE 11152
11150: GO 11198
11152: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZL ] ; end ;
11153: LD_ADDR_EXP 43
11157: PUSH
11158: LD_EXP 43
11162: PUSH
11163: LD_INT 1
11165: ARRAY
11166: PUSH
11167: LD_EXP 43
11171: PUSH
11172: LD_INT 2
11174: ARRAY
11175: PUSH
11176: LD_EXP 43
11180: PUSH
11181: LD_INT 3
11183: ARRAY
11184: PUSH
11185: LD_VAR 0 5
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: ST_TO_ADDR
11196: GO 11199
11198: POP
// end ;
11199: GO 10845
11201: POP
11202: POP
// enable ;
11203: ENABLE
// end ;
11204: PPOPN 5
11206: END
// every 0 0$3 do var i ; var poz ; var txt , text ;
11207: GO 11209
11209: DISABLE
11210: LD_INT 0
11212: PPUSH
11213: PPUSH
11214: PPUSH
11215: PPUSH
// begin for i := 1 to 8 do
11216: LD_ADDR_VAR 0 1
11220: PUSH
11221: DOUBLE
11222: LD_INT 1
11224: DEC
11225: ST_TO_ADDR
11226: LD_INT 8
11228: PUSH
11229: FOR_TO
11230: IFFALSE 11329
// begin poz = Side_Positions [ i ] ;
11232: LD_ADDR_VAR 0 2
11236: PUSH
11237: LD_EXP 37
11241: PUSH
11242: LD_VAR 0 1
11246: ARRAY
11247: ST_TO_ADDR
// if poz > 0 and Your_Side = i then
11248: LD_VAR 0 2
11252: PUSH
11253: LD_INT 0
11255: GREATER
11256: PUSH
11257: LD_OWVAR 2
11261: PUSH
11262: LD_VAR 0 1
11266: EQUAL
11267: AND
11268: IFFALSE 11327
// begin txt = POINTY [ poz ] + 0 ;
11270: LD_ADDR_VAR 0 3
11274: PUSH
11275: LD_EXP 44
11279: PUSH
11280: LD_VAR 0 2
11284: ARRAY
11285: PUSH
11286: LD_INT 0
11288: PLUS
11289: ST_TO_ADDR
// text = txt &  of  & chance_find &  points found ;
11290: LD_ADDR_VAR 0 4
11294: PUSH
11295: LD_VAR 0 3
11299: PUSH
11300: LD_STRING  of 
11302: STR
11303: PUSH
11304: LD_EXP 30
11308: STR
11309: PUSH
11310: LD_STRING  points found
11312: STR
11313: ST_TO_ADDR
// ExtraStrings = [ text ] ;
11314: LD_ADDR_EXP 45
11318: PUSH
11319: LD_VAR 0 4
11323: PUSH
11324: EMPTY
11325: LIST
11326: ST_TO_ADDR
// end ; end ;
11327: GO 11229
11329: POP
11330: POP
// enable ;
11331: ENABLE
// end ;
11332: PPOPN 4
11334: END
// every 0 0$3 trigger chance_loose <> 0 do var i , j ; var pom , pom1 ; var apes ; var zo ; var dist ; var zmena ;
11335: LD_EXP 29
11339: PUSH
11340: LD_INT 0
11342: NONEQUAL
11343: IFFALSE 11916
11345: GO 11347
11347: DISABLE
11348: LD_INT 0
11350: PPUSH
11351: PPUSH
11352: PPUSH
11353: PPUSH
11354: PPUSH
11355: PPUSH
11356: PPUSH
11357: PPUSH
// begin apes = [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] ;
11358: LD_ADDR_VAR 0 5
11362: PUSH
11363: LD_INT 12
11365: PUSH
11366: LD_INT 16
11368: PUSH
11369: LD_INT 17
11371: PUSH
11372: LD_INT 15
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: ST_TO_ADDR
// for i := 1 to 8 do
11381: LD_ADDR_VAR 0 1
11385: PUSH
11386: DOUBLE
11387: LD_INT 1
11389: DEC
11390: ST_TO_ADDR
11391: LD_INT 8
11393: PUSH
11394: FOR_TO
11395: IFFALSE 11913
// begin case Side_Positions [ i ] of 1 :
11397: LD_EXP 37
11401: PUSH
11402: LD_VAR 0 1
11406: ARRAY
11407: PUSH
11408: LD_INT 1
11410: DOUBLE
11411: EQUAL
11412: IFTRUE 11416
11414: GO 11427
11416: POP
// zo = Base1 ; 2 :
11417: LD_ADDR_VAR 0 6
11421: PUSH
11422: LD_INT 27
11424: ST_TO_ADDR
11425: GO 11487
11427: LD_INT 2
11429: DOUBLE
11430: EQUAL
11431: IFTRUE 11435
11433: GO 11446
11435: POP
// zo = Base2 ; 3 :
11436: LD_ADDR_VAR 0 6
11440: PUSH
11441: LD_INT 28
11443: ST_TO_ADDR
11444: GO 11487
11446: LD_INT 3
11448: DOUBLE
11449: EQUAL
11450: IFTRUE 11454
11452: GO 11465
11454: POP
// zo = Base3 ; 4 :
11455: LD_ADDR_VAR 0 6
11459: PUSH
11460: LD_INT 29
11462: ST_TO_ADDR
11463: GO 11487
11465: LD_INT 4
11467: DOUBLE
11468: EQUAL
11469: IFTRUE 11473
11471: GO 11484
11473: POP
// zo = Base4 ; else
11474: LD_ADDR_VAR 0 6
11478: PUSH
11479: LD_INT 30
11481: ST_TO_ADDR
11482: GO 11487
11484: POP
// continue ; end ;
11485: GO 11394
// pom = FilterUnitsExceptArea ( zo , [ [ f_side , i ] , [ f_type , unit_human ] ] ) ;
11487: LD_ADDR_VAR 0 3
11491: PUSH
11492: LD_VAR 0 6
11496: PPUSH
11497: LD_INT 22
11499: PUSH
11500: LD_VAR 0 1
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 21
11511: PUSH
11512: LD_INT 1
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PPUSH
11523: CALL_OW 71
11527: ST_TO_ADDR
// pom1 = FilterUnitsExceptArea ( zo , [ [ f_side , i ] , [ f_type , unit_vehicle ] ] ) ;
11528: LD_ADDR_VAR 0 4
11532: PUSH
11533: LD_VAR 0 6
11537: PPUSH
11538: LD_INT 22
11540: PUSH
11541: LD_VAR 0 1
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 21
11552: PUSH
11553: LD_INT 2
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PPUSH
11564: CALL_OW 71
11568: ST_TO_ADDR
// for j in pom1 do
11569: LD_ADDR_VAR 0 2
11573: PUSH
11574: LD_VAR 0 4
11578: PUSH
11579: FOR_IN
11580: IFFALSE 11620
// if IsDrivenBy ( j ) <> 0 then
11582: LD_VAR 0 2
11586: PPUSH
11587: CALL_OW 311
11591: PUSH
11592: LD_INT 0
11594: NONEQUAL
11595: IFFALSE 11618
// pom = pom ^ IsDrivenBy ( j ) ;
11597: LD_ADDR_VAR 0 3
11601: PUSH
11602: LD_VAR 0 3
11606: PUSH
11607: LD_VAR 0 2
11611: PPUSH
11612: CALL_OW 311
11616: ADD
11617: ST_TO_ADDR
11618: GO 11579
11620: POP
11621: POP
// for j in pom do
11622: LD_ADDR_VAR 0 2
11626: PUSH
11627: LD_VAR 0 3
11631: PUSH
11632: FOR_IN
11633: IFFALSE 11670
// if GetClass ( j ) in apes then
11635: LD_VAR 0 2
11639: PPUSH
11640: CALL_OW 257
11644: PUSH
11645: LD_VAR 0 5
11649: IN
11650: IFFALSE 11668
// pom = pom diff j ;
11652: LD_ADDR_VAR 0 3
11656: PUSH
11657: LD_VAR 0 3
11661: PUSH
11662: LD_VAR 0 2
11666: DIFF
11667: ST_TO_ADDR
11668: GO 11632
11670: POP
11671: POP
// for j in pom do
11672: LD_ADDR_VAR 0 2
11676: PUSH
11677: LD_VAR 0 3
11681: PUSH
11682: FOR_IN
11683: IFFALSE 11909
// begin dist = GetDistUnitArea ( j , zo ) ;
11685: LD_ADDR_VAR 0 7
11689: PUSH
11690: LD_VAR 0 2
11694: PPUSH
11695: LD_VAR 0 6
11699: PPUSH
11700: CALL_OW 299
11704: ST_TO_ADDR
// case dist of 1 .. 5 :
11705: LD_VAR 0 7
11709: PUSH
11710: LD_INT 1
11712: DOUBLE
11713: GREATEREQUAL
11714: IFFALSE 11722
11716: LD_INT 5
11718: DOUBLE
11719: LESSEQUAL
11720: IFTRUE 11724
11722: GO 11735
11724: POP
// zmena = 1 ; 5 .. 10 :
11725: LD_ADDR_VAR 0 8
11729: PUSH
11730: LD_INT 1
11732: ST_TO_ADDR
11733: GO 11844
11735: LD_INT 5
11737: DOUBLE
11738: GREATEREQUAL
11739: IFFALSE 11747
11741: LD_INT 10
11743: DOUBLE
11744: LESSEQUAL
11745: IFTRUE 11749
11747: GO 11760
11749: POP
// zmena = 2 ; 10 .. 15 :
11750: LD_ADDR_VAR 0 8
11754: PUSH
11755: LD_INT 2
11757: ST_TO_ADDR
11758: GO 11844
11760: LD_INT 10
11762: DOUBLE
11763: GREATEREQUAL
11764: IFFALSE 11772
11766: LD_INT 15
11768: DOUBLE
11769: LESSEQUAL
11770: IFTRUE 11774
11772: GO 11785
11774: POP
// zmena = 3 ; 15 .. 25 :
11775: LD_ADDR_VAR 0 8
11779: PUSH
11780: LD_INT 3
11782: ST_TO_ADDR
11783: GO 11844
11785: LD_INT 15
11787: DOUBLE
11788: GREATEREQUAL
11789: IFFALSE 11797
11791: LD_INT 25
11793: DOUBLE
11794: LESSEQUAL
11795: IFTRUE 11799
11797: GO 11810
11799: POP
// zmena = 4 ; 25 .. 35 :
11800: LD_ADDR_VAR 0 8
11804: PUSH
11805: LD_INT 4
11807: ST_TO_ADDR
11808: GO 11844
11810: LD_INT 25
11812: DOUBLE
11813: GREATEREQUAL
11814: IFFALSE 11822
11816: LD_INT 35
11818: DOUBLE
11819: LESSEQUAL
11820: IFTRUE 11824
11822: GO 11835
11824: POP
// zmena = 5 ; else
11825: LD_ADDR_VAR 0 8
11829: PUSH
11830: LD_INT 5
11832: ST_TO_ADDR
11833: GO 11844
11835: POP
// zmena = 6 ; end ;
11836: LD_ADDR_VAR 0 8
11840: PUSH
11841: LD_INT 6
11843: ST_TO_ADDR
// SetTag ( j , GetTag ( j ) + zmena ) ;
11844: LD_VAR 0 2
11848: PPUSH
11849: LD_VAR 0 2
11853: PPUSH
11854: CALL_OW 110
11858: PUSH
11859: LD_VAR 0 8
11863: PLUS
11864: PPUSH
11865: CALL_OW 109
// if GetTag ( j ) > chance_loose then
11869: LD_VAR 0 2
11873: PPUSH
11874: CALL_OW 110
11878: PUSH
11879: LD_EXP 29
11883: GREATER
11884: IFFALSE 11907
// begin SetTag ( j , 0 ) ;
11886: LD_VAR 0 2
11890: PPUSH
11891: LD_INT 0
11893: PPUSH
11894: CALL_OW 109
// odeber_jednotku ( j ) ;
11898: LD_VAR 0 2
11902: PPUSH
11903: CALL 11919 0 1
// end ; end ;
11907: GO 11682
11909: POP
11910: POP
// end ;
11911: GO 11394
11913: POP
11914: POP
// enable ;
11915: ENABLE
// end ;
11916: PPOPN 8
11918: END
// function odeber_jednotku ( jedn ) ; var pom ; begin
11919: LD_INT 0
11921: PPUSH
11922: PPUSH
// if IsInUnit ( jedn ) then
11923: LD_VAR 0 1
11927: PPUSH
11928: CALL_OW 310
11932: IFFALSE 11975
// if GetType ( IsInUnit ( jedn ) ) = unit_vehicle then
11934: LD_VAR 0 1
11938: PPUSH
11939: CALL_OW 310
11943: PPUSH
11944: CALL_OW 247
11948: PUSH
11949: LD_INT 2
11951: EQUAL
11952: IFFALSE 11975
// if def_vehicles_too then
11954: LD_EXP 14
11958: IFFALSE 11975
// jedn = IsInUnit ( jedn ) ;
11960: LD_ADDR_VAR 0 1
11964: PUSH
11965: LD_VAR 0 1
11969: PPUSH
11970: CALL_OW 310
11974: ST_TO_ADDR
// if def_other_nation and Prob ( 25 ) then
11975: LD_EXP 13
11979: PUSH
11980: LD_INT 25
11982: PPUSH
11983: CALL_OW 13
11987: AND
11988: IFFALSE 12008
// pom = Rand ( 1 , 4 ) else
11990: LD_ADDR_VAR 0 3
11994: PUSH
11995: LD_INT 1
11997: PPUSH
11998: LD_INT 4
12000: PPUSH
12001: CALL_OW 12
12005: ST_TO_ADDR
12006: GO 12029
// pom = Side_Positions [ GetSide ( jedn ) ] ;
12008: LD_ADDR_VAR 0 3
12012: PUSH
12013: LD_EXP 37
12017: PUSH
12018: LD_VAR 0 1
12022: PPUSH
12023: CALL_OW 255
12027: ARRAY
12028: ST_TO_ADDR
// case pom of 1 :
12029: LD_VAR 0 3
12033: PUSH
12034: LD_INT 1
12036: DOUBLE
12037: EQUAL
12038: IFTRUE 12042
12040: GO 12098
12042: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] ^ jedn , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 2 :
12043: LD_ADDR_EXP 43
12047: PUSH
12048: LD_EXP 43
12052: PUSH
12053: LD_INT 1
12055: ARRAY
12056: PUSH
12057: LD_VAR 0 1
12061: ADD
12062: PUSH
12063: LD_EXP 43
12067: PUSH
12068: LD_INT 2
12070: ARRAY
12071: PUSH
12072: LD_EXP 43
12076: PUSH
12077: LD_INT 3
12079: ARRAY
12080: PUSH
12081: LD_EXP 43
12085: PUSH
12086: LD_INT 4
12088: ARRAY
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: ST_TO_ADDR
12096: GO 12291
12098: LD_INT 2
12100: DOUBLE
12101: EQUAL
12102: IFTRUE 12106
12104: GO 12162
12106: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] ^ jedn , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ] ; 3 :
12107: LD_ADDR_EXP 43
12111: PUSH
12112: LD_EXP 43
12116: PUSH
12117: LD_INT 1
12119: ARRAY
12120: PUSH
12121: LD_EXP 43
12125: PUSH
12126: LD_INT 2
12128: ARRAY
12129: PUSH
12130: LD_VAR 0 1
12134: ADD
12135: PUSH
12136: LD_EXP 43
12140: PUSH
12141: LD_INT 3
12143: ARRAY
12144: PUSH
12145: LD_EXP 43
12149: PUSH
12150: LD_INT 4
12152: ARRAY
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: ST_TO_ADDR
12160: GO 12291
12162: LD_INT 3
12164: DOUBLE
12165: EQUAL
12166: IFTRUE 12170
12168: GO 12226
12170: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] ^ jedn , ZMIZELI_LIDI [ 4 ] ] ; 4 :
12171: LD_ADDR_EXP 43
12175: PUSH
12176: LD_EXP 43
12180: PUSH
12181: LD_INT 1
12183: ARRAY
12184: PUSH
12185: LD_EXP 43
12189: PUSH
12190: LD_INT 2
12192: ARRAY
12193: PUSH
12194: LD_EXP 43
12198: PUSH
12199: LD_INT 3
12201: ARRAY
12202: PUSH
12203: LD_VAR 0 1
12207: ADD
12208: PUSH
12209: LD_EXP 43
12213: PUSH
12214: LD_INT 4
12216: ARRAY
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: ST_TO_ADDR
12224: GO 12291
12226: LD_INT 4
12228: DOUBLE
12229: EQUAL
12230: IFTRUE 12234
12232: GO 12290
12234: POP
// ZMIZELI_LIDI = [ ZMIZELI_LIDI [ 1 ] , ZMIZELI_LIDI [ 2 ] , ZMIZELI_LIDI [ 3 ] , ZMIZELI_LIDI [ 4 ] ^ jedn ] ; end ;
12235: LD_ADDR_EXP 43
12239: PUSH
12240: LD_EXP 43
12244: PUSH
12245: LD_INT 1
12247: ARRAY
12248: PUSH
12249: LD_EXP 43
12253: PUSH
12254: LD_INT 2
12256: ARRAY
12257: PUSH
12258: LD_EXP 43
12262: PUSH
12263: LD_INT 3
12265: ARRAY
12266: PUSH
12267: LD_EXP 43
12271: PUSH
12272: LD_INT 4
12274: ARRAY
12275: PUSH
12276: LD_VAR 0 1
12280: ADD
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: ST_TO_ADDR
12288: GO 12291
12290: POP
// RemoveUnit ( jedn ) ;
12291: LD_VAR 0 1
12295: PPUSH
12296: CALL_OW 64
// end ;
12300: LD_VAR 0 2
12304: RET
// every 0 0$5 trigger chance_loose <> 0 do var i , j ; var pom , pom1 ; var apes ; var zo ;
12305: LD_EXP 29
12309: PUSH
12310: LD_INT 0
12312: NONEQUAL
12313: IFFALSE 12700
12315: GO 12317
12317: DISABLE
12318: LD_INT 0
12320: PPUSH
12321: PPUSH
12322: PPUSH
12323: PPUSH
12324: PPUSH
12325: PPUSH
// begin apes = [ class_apeman , class_apeman_engineer , class_apeman_kamikaze , class_apeman_soldier ] ;
12326: LD_ADDR_VAR 0 5
12330: PUSH
12331: LD_INT 12
12333: PUSH
12334: LD_INT 16
12336: PUSH
12337: LD_INT 17
12339: PUSH
12340: LD_INT 15
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: ST_TO_ADDR
// for i := 1 to 8 do
12349: LD_ADDR_VAR 0 1
12353: PUSH
12354: DOUBLE
12355: LD_INT 1
12357: DEC
12358: ST_TO_ADDR
12359: LD_INT 8
12361: PUSH
12362: FOR_TO
12363: IFFALSE 12697
// begin case Side_Positions [ i ] of 1 :
12365: LD_EXP 37
12369: PUSH
12370: LD_VAR 0 1
12374: ARRAY
12375: PUSH
12376: LD_INT 1
12378: DOUBLE
12379: EQUAL
12380: IFTRUE 12384
12382: GO 12395
12384: POP
// zo = Base1 ; 2 :
12385: LD_ADDR_VAR 0 6
12389: PUSH
12390: LD_INT 27
12392: ST_TO_ADDR
12393: GO 12455
12395: LD_INT 2
12397: DOUBLE
12398: EQUAL
12399: IFTRUE 12403
12401: GO 12414
12403: POP
// zo = Base2 ; 3 :
12404: LD_ADDR_VAR 0 6
12408: PUSH
12409: LD_INT 28
12411: ST_TO_ADDR
12412: GO 12455
12414: LD_INT 3
12416: DOUBLE
12417: EQUAL
12418: IFTRUE 12422
12420: GO 12433
12422: POP
// zo = Base3 ; 4 :
12423: LD_ADDR_VAR 0 6
12427: PUSH
12428: LD_INT 29
12430: ST_TO_ADDR
12431: GO 12455
12433: LD_INT 4
12435: DOUBLE
12436: EQUAL
12437: IFTRUE 12441
12439: GO 12452
12441: POP
// zo = Base4 ; else
12442: LD_ADDR_VAR 0 6
12446: PUSH
12447: LD_INT 30
12449: ST_TO_ADDR
12450: GO 12455
12452: POP
// continue ; end ;
12453: GO 12362
// pom = FilterUnitsInArea ( zo , [ [ f_side , i ] , [ f_type , unit_human ] ] ) ;
12455: LD_ADDR_VAR 0 3
12459: PUSH
12460: LD_VAR 0 6
12464: PPUSH
12465: LD_INT 22
12467: PUSH
12468: LD_VAR 0 1
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: LD_INT 21
12479: PUSH
12480: LD_INT 1
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PPUSH
12491: CALL_OW 70
12495: ST_TO_ADDR
// pom1 = FilterUnitsInArea ( zo , [ [ f_side , i ] , [ f_type , unit_vehicle ] ] ) ;
12496: LD_ADDR_VAR 0 4
12500: PUSH
12501: LD_VAR 0 6
12505: PPUSH
12506: LD_INT 22
12508: PUSH
12509: LD_VAR 0 1
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: LD_INT 21
12520: PUSH
12521: LD_INT 2
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PPUSH
12532: CALL_OW 70
12536: ST_TO_ADDR
// for j in pom1 do
12537: LD_ADDR_VAR 0 2
12541: PUSH
12542: LD_VAR 0 4
12546: PUSH
12547: FOR_IN
12548: IFFALSE 12588
// if IsDrivenBy ( j ) <> 0 then
12550: LD_VAR 0 2
12554: PPUSH
12555: CALL_OW 311
12559: PUSH
12560: LD_INT 0
12562: NONEQUAL
12563: IFFALSE 12586
// pom = pom ^ IsDrivenBy ( j ) ;
12565: LD_ADDR_VAR 0 3
12569: PUSH
12570: LD_VAR 0 3
12574: PUSH
12575: LD_VAR 0 2
12579: PPUSH
12580: CALL_OW 311
12584: ADD
12585: ST_TO_ADDR
12586: GO 12547
12588: POP
12589: POP
// for j in pom do
12590: LD_ADDR_VAR 0 2
12594: PUSH
12595: LD_VAR 0 3
12599: PUSH
12600: FOR_IN
12601: IFFALSE 12638
// if GetClass ( j ) in apes then
12603: LD_VAR 0 2
12607: PPUSH
12608: CALL_OW 257
12612: PUSH
12613: LD_VAR 0 5
12617: IN
12618: IFFALSE 12636
// pom = pom diff j ;
12620: LD_ADDR_VAR 0 3
12624: PUSH
12625: LD_VAR 0 3
12629: PUSH
12630: LD_VAR 0 2
12634: DIFF
12635: ST_TO_ADDR
12636: GO 12600
12638: POP
12639: POP
// for j in pom do
12640: LD_ADDR_VAR 0 2
12644: PUSH
12645: LD_VAR 0 3
12649: PUSH
12650: FOR_IN
12651: IFFALSE 12693
// if GetTag ( j ) > 0 then
12653: LD_VAR 0 2
12657: PPUSH
12658: CALL_OW 110
12662: PUSH
12663: LD_INT 0
12665: GREATER
12666: IFFALSE 12691
// SetTag ( j , GetTag ( j ) - 1 ) ;
12668: LD_VAR 0 2
12672: PPUSH
12673: LD_VAR 0 2
12677: PPUSH
12678: CALL_OW 110
12682: PUSH
12683: LD_INT 1
12685: MINUS
12686: PPUSH
12687: CALL_OW 109
12691: GO 12650
12693: POP
12694: POP
// end ;
12695: GO 12362
12697: POP
12698: POP
// enable ;
12699: ENABLE
// end ; end_of_file
12700: PPOPN 6
12702: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
12703: LD_INT 0
12705: PPUSH
12706: PPUSH
// for un in battle_flags_id do
12707: LD_ADDR_VAR 0 2
12711: PUSH
12712: LD_EXP 28
12716: PUSH
12717: FOR_IN
12718: IFFALSE 12793
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
12720: LD_VAR 0 2
12724: PPUSH
12725: LD_INT 1
12727: PUSH
12728: LD_LOC 4
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 2
12739: PUSH
12740: LD_LOC 4
12744: PUSH
12745: LD_INT 2
12747: DIV
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 3
12755: PUSH
12756: LD_LOC 4
12760: PUSH
12761: LD_INT 5
12763: DIV
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: LD_INT 20
12771: PUSH
12772: LD_LOC 4
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 423
12791: GO 12717
12793: POP
12794: POP
// end ;
12795: LD_VAR 0 1
12799: RET
// every 0 0$0.1 do var un ;
12800: GO 12802
12802: DISABLE
12803: LD_INT 0
12805: PPUSH
// begin if not def_morale_flags then
12806: LD_EXP 8
12810: NOT
12811: IFFALSE 12815
// exit ;
12813: GO 12892
// if not morale_decreasing_time then
12815: LD_EXP 27
12819: NOT
12820: IFFALSE 12824
// exit ;
12822: GO 12892
// strength = 100 ;
12824: LD_ADDR_LOC 4
12828: PUSH
12829: LD_INT 100
12831: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
12832: LD_EXP 27
12836: PPUSH
12837: CALL_OW 67
// strength := strength - 1 ;
12841: LD_ADDR_LOC 4
12845: PUSH
12846: LD_LOC 4
12850: PUSH
12851: LD_INT 1
12853: MINUS
12854: ST_TO_ADDR
// Update_Flags ;
12855: CALL 12703 0 0
// until not strength ;
12859: LD_LOC 4
12863: NOT
12864: IFFALSE 12832
// for un in battle_flags_id do
12866: LD_ADDR_VAR 0 1
12870: PUSH
12871: LD_EXP 28
12875: PUSH
12876: FOR_IN
12877: IFFALSE 12890
// KillBattleFlag ( un ) ;
12879: LD_VAR 0 1
12883: PPUSH
12884: CALL_OW 419
12888: GO 12876
12890: POP
12891: POP
// end ; end_of_file
12892: PPOPN 1
12894: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
12895: LD_INT 0
12897: PPUSH
12898: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12899: LD_ADDR_VAR 0 2
12903: PUSH
12904: LD_STRING #Multi1x1-Time
12906: PUSH
12907: LD_OWVAR 1
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: ST_TO_ADDR
// if ( ExtraStrings ) then
12916: LD_EXP 45
12920: IFFALSE 12942
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12922: LD_ADDR_VAR 0 2
12926: PUSH
12927: LD_VAR 0 2
12931: PUSH
12932: LD_STRING 
12934: ADD
12935: PUSH
12936: LD_EXP 45
12940: ADD
12941: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12942: LD_INT 0
12944: PUSH
12945: LD_EXP 26
12949: PUSH
12950: LD_OWVAR 1
12954: MINUS
12955: LESSEQUAL
12956: IFFALSE 12987
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12958: LD_ADDR_VAR 0 2
12962: PUSH
12963: LD_VAR 0 2
12967: PUSH
12968: LD_STRING #allowedsibbomb
12970: PUSH
12971: LD_EXP 26
12975: PUSH
12976: LD_OWVAR 1
12980: MINUS
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: ADD
12986: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
12987: LD_INT 0
12989: PUSH
12990: LD_EXP 48
12994: PUSH
12995: LD_OWVAR 1
12999: MINUS
13000: LESSEQUAL
13001: IFFALSE 13032
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
13003: LD_ADDR_VAR 0 2
13007: PUSH
13008: LD_VAR 0 2
13012: PUSH
13013: LD_STRING #builduptime
13015: PUSH
13016: LD_EXP 48
13020: PUSH
13021: LD_OWVAR 1
13025: MINUS
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: ADD
13031: ST_TO_ADDR
// Display_Strings := AllStrings ;
13032: LD_ADDR_OWVAR 47
13036: PUSH
13037: LD_VAR 0 2
13041: ST_TO_ADDR
// end ;
13042: LD_VAR 0 1
13046: RET
// every 0 0$1 do
13047: GO 13049
13049: DISABLE
// begin ShowTimer ;
13050: CALL 12895 0 0
// enable ;
13054: ENABLE
// end ; end_of_file
13055: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
13056: GO 13058
13058: DISABLE
13059: LD_INT 0
13061: PPUSH
// begin _apemenIncrement := 0 ;
13062: LD_ADDR_LOC 9
13066: PUSH
13067: LD_INT 0
13069: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
13070: LD_ADDR_LOC 11
13074: PUSH
13075: LD_INT 0
13077: ST_TO_ADDR
// _isSpawning := true ;
13078: LD_ADDR_LOC 13
13082: PUSH
13083: LD_INT 1
13085: ST_TO_ADDR
// _wildApemenAmount := 0 ;
13086: LD_ADDR_LOC 14
13090: PUSH
13091: LD_INT 0
13093: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
13094: LD_ADDR_VAR 0 1
13098: PUSH
13099: LD_EXP 37
13103: PUSH
13104: LD_INT 0
13106: PUSH
13107: EMPTY
13108: LIST
13109: DIFF
13110: PUSH
13111: FOR_IN
13112: IFFALSE 13130
// _apemenIncrement := _apemenIncrement + 1 ;
13114: LD_ADDR_LOC 9
13118: PUSH
13119: LD_LOC 9
13123: PUSH
13124: LD_INT 1
13126: PLUS
13127: ST_TO_ADDR
13128: GO 13111
13130: POP
13131: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
13132: LD_ADDR_LOC 10
13136: PUSH
13137: LD_LOC 9
13141: PUSH
13142: LD_EXP 31
13146: MUL
13147: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
13148: LD_ADDR_LOC 12
13152: PUSH
13153: LD_LOC 10
13157: PUSH
13158: LD_INT 2
13160: DIVREAL
13161: ST_TO_ADDR
// prepare_apemen ;
13162: CALL 13254 0 0
// end ;
13166: PPOPN 1
13168: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
13169: CALL 13176 0 0
// end ;
13173: PPOPN 2
13175: END
// export function CheckApemenAmount ; begin
13176: LD_INT 0
13178: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
13179: LD_ADDR_LOC 14
13183: PUSH
13184: LD_LOC 14
13188: PUSH
13189: LD_INT 1
13191: MINUS
13192: ST_TO_ADDR
// if _isSpawning then
13193: LD_LOC 13
13197: IFFALSE 13201
// exit ;
13199: GO 13249
// if _wildApemenAmount <= ( _apemenThreshold ) then
13201: LD_LOC 14
13205: PUSH
13206: LD_LOC 12
13210: LESSEQUAL
13211: IFFALSE 13249
// begin if _apemenSkillLevel < 8 then
13213: LD_LOC 11
13217: PUSH
13218: LD_INT 8
13220: LESS
13221: IFFALSE 13237
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
13223: LD_ADDR_LOC 11
13227: PUSH
13228: LD_LOC 11
13232: PUSH
13233: LD_INT 1
13235: PLUS
13236: ST_TO_ADDR
// _isSpawning := true ;
13237: LD_ADDR_LOC 13
13241: PUSH
13242: LD_INT 1
13244: ST_TO_ADDR
// prepare_apemen ;
13245: CALL 13254 0 0
// end ; end ;
13249: LD_VAR 0 1
13253: RET
// function prepare_apemen ; var i ; begin
13254: LD_INT 0
13256: PPUSH
13257: PPUSH
// if not amount_of_apemen then
13258: LD_EXP 31
13262: NOT
13263: IFFALSE 13267
// exit ;
13265: GO 13446
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
13267: LD_INT 1050
13269: PPUSH
13270: LD_INT 3150
13272: PPUSH
13273: CALL_OW 12
13277: PPUSH
13278: CALL_OW 67
// apeman_init ;
13282: CALL 13451 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
13286: LD_ADDR_VAR 0 2
13290: PUSH
13291: LD_EXP 37
13295: PUSH
13296: LD_INT 0
13298: PUSH
13299: EMPTY
13300: LIST
13301: DIFF
13302: PUSH
13303: FOR_IN
13304: IFFALSE 13408
// begin if i = 1 then
13306: LD_VAR 0 2
13310: PUSH
13311: LD_INT 1
13313: EQUAL
13314: IFFALSE 13331
// PlaceUnitArea ( CreateHuman , op1 , false ) ;
13316: CALL_OW 44
13320: PPUSH
13321: LD_INT 31
13323: PPUSH
13324: LD_INT 0
13326: PPUSH
13327: CALL_OW 49
// if i = 2 then
13331: LD_VAR 0 2
13335: PUSH
13336: LD_INT 2
13338: EQUAL
13339: IFFALSE 13356
// PlaceUnitArea ( CreateHuman , op2 , false ) ;
13341: CALL_OW 44
13345: PPUSH
13346: LD_INT 32
13348: PPUSH
13349: LD_INT 0
13351: PPUSH
13352: CALL_OW 49
// if i = 3 then
13356: LD_VAR 0 2
13360: PUSH
13361: LD_INT 3
13363: EQUAL
13364: IFFALSE 13381
// PlaceUnitArea ( CreateHuman , op3 , false ) ;
13366: CALL_OW 44
13370: PPUSH
13371: LD_INT 33
13373: PPUSH
13374: LD_INT 0
13376: PPUSH
13377: CALL_OW 49
// if i = 4 then
13381: LD_VAR 0 2
13385: PUSH
13386: LD_INT 4
13388: EQUAL
13389: IFFALSE 13406
// PlaceUnitArea ( CreateHuman , op4 , false ) ;
13391: CALL_OW 44
13395: PPUSH
13396: LD_INT 34
13398: PPUSH
13399: LD_INT 0
13401: PPUSH
13402: CALL_OW 49
// end ;
13406: GO 13303
13408: POP
13409: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
13410: LD_ADDR_LOC 14
13414: PUSH
13415: LD_LOC 14
13419: PUSH
13420: LD_LOC 9
13424: PLUS
13425: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
13426: LD_LOC 14
13430: PUSH
13431: LD_LOC 10
13435: GREATEREQUAL
13436: IFFALSE 13267
// _isSpawning := false ;
13438: LD_ADDR_LOC 13
13442: PUSH
13443: LD_INT 0
13445: ST_TO_ADDR
// end ;
13446: LD_VAR 0 1
13450: RET
// function apeman_init ; var ape_names ; begin
13451: LD_INT 0
13453: PPUSH
13454: PPUSH
// ape_names = [ Tupoun , Opoce , Opka , Butrus , Bubu , Condor , Kuklajs , Simon , Ugh , Urgh , Argh , Aargh , Hrumph , Grumph , Oorg , Eghrr , Rrrr , Bark , Wraughrr , :-) , Semik , Hrgh , Hur , Havran , Nazghul , Brutal , Kato Zluta Opoce , Monkey , Yeargh , Marta , Batman , Barkman , Xcenovsk , David Love , Freon , Stoupik , Quik , Jam Prckovic Laren , CFC , Kvakous , Sumys , Agent , Nazghul , Havran , Vrana , Havranek , Carlos Frank , Tekar , Andy , Angela , Janina , Shipanze , Simpan , Nazghulik , Potrusil , Potrus , Butrus , Potrusil , Simon , Auuu , NEMO , Silena opice , Meuznenapadazadnejmeno , Uhrun , Marmelada , Negr , Fnuk , Slim , Kvak , Dave , Bruntal , Arnie , Polda , Jen , Siddha , Silnickar , Bukvice , Zalud , Elvis , Nazghul , Chruadfa , Nazghul , Kato Yellow Ape , Cpt. Ape , King Of The Hill , Pterinochilus , Bad Platypus , Really Bad Ape , Looser , Looser , Looser , Megadeth , Mad Ape , Wraughhhh , ":) ] ;
13455: LD_ADDR_VAR 0 2
13459: PUSH
13460: LD_STRING Tupoun
13462: PUSH
13463: LD_STRING Opoce
13465: PUSH
13466: LD_STRING Opka
13468: PUSH
13469: LD_STRING Butrus
13471: PUSH
13472: LD_STRING Bubu
13474: PUSH
13475: LD_STRING Condor
13477: PUSH
13478: LD_STRING Kuklajs
13480: PUSH
13481: LD_STRING Simon
13483: PUSH
13484: LD_STRING Ugh
13486: PUSH
13487: LD_STRING Urgh
13489: PUSH
13490: LD_STRING Argh
13492: PUSH
13493: LD_STRING Aargh
13495: PUSH
13496: LD_STRING Hrumph
13498: PUSH
13499: LD_STRING Grumph
13501: PUSH
13502: LD_STRING Oorg
13504: PUSH
13505: LD_STRING Eghrr
13507: PUSH
13508: LD_STRING Rrrr
13510: PUSH
13511: LD_STRING Bark
13513: PUSH
13514: LD_STRING Wraughrr
13516: PUSH
13517: LD_STRING :-)
13519: PUSH
13520: LD_STRING Semik
13522: PUSH
13523: LD_STRING Hrgh
13525: PUSH
13526: LD_STRING Hur
13528: PUSH
13529: LD_STRING Havran
13531: PUSH
13532: LD_STRING Nazghul
13534: PUSH
13535: LD_STRING Brutal
13537: PUSH
13538: LD_STRING Kato Zluta Opoce
13540: PUSH
13541: LD_STRING Monkey
13543: PUSH
13544: LD_STRING Yeargh
13546: PUSH
13547: LD_STRING Marta
13549: PUSH
13550: LD_STRING Batman
13552: PUSH
13553: LD_STRING Barkman
13555: PUSH
13556: LD_STRING Xcenovsk
13558: PUSH
13559: LD_STRING David Love
13561: PUSH
13562: LD_STRING Freon
13564: PUSH
13565: LD_STRING Stoupik
13567: PUSH
13568: LD_STRING Quik
13570: PUSH
13571: LD_STRING Jam Prckovic Laren
13573: PUSH
13574: LD_STRING CFC
13576: PUSH
13577: LD_STRING Kvakous
13579: PUSH
13580: LD_STRING Sumys
13582: PUSH
13583: LD_STRING Agent
13585: PUSH
13586: LD_STRING Nazghul
13588: PUSH
13589: LD_STRING Havran
13591: PUSH
13592: LD_STRING Vrana
13594: PUSH
13595: LD_STRING Havranek
13597: PUSH
13598: LD_STRING Carlos Frank
13600: PUSH
13601: LD_STRING Tekar
13603: PUSH
13604: LD_STRING Andy
13606: PUSH
13607: LD_STRING Angela
13609: PUSH
13610: LD_STRING Janina
13612: PUSH
13613: LD_STRING Shipanze
13615: PUSH
13616: LD_STRING Simpan
13618: PUSH
13619: LD_STRING Nazghulik
13621: PUSH
13622: LD_STRING Potrusil
13624: PUSH
13625: LD_STRING Potrus
13627: PUSH
13628: LD_STRING Butrus
13630: PUSH
13631: LD_STRING Potrusil
13633: PUSH
13634: LD_STRING Simon
13636: PUSH
13637: LD_STRING Auuu
13639: PUSH
13640: LD_STRING NEMO
13642: PUSH
13643: LD_STRING Silena opice
13645: PUSH
13646: LD_STRING Meuznenapadazadnejmeno
13648: PUSH
13649: LD_STRING Uhrun
13651: PUSH
13652: LD_STRING Marmelada
13654: PUSH
13655: LD_STRING Negr
13657: PUSH
13658: LD_STRING Fnuk
13660: PUSH
13661: LD_STRING Slim
13663: PUSH
13664: LD_STRING Kvak
13666: PUSH
13667: LD_STRING Dave
13669: PUSH
13670: LD_STRING Bruntal
13672: PUSH
13673: LD_STRING Arnie
13675: PUSH
13676: LD_STRING Polda
13678: PUSH
13679: LD_STRING Jen
13681: PUSH
13682: LD_STRING Siddha
13684: PUSH
13685: LD_STRING Silnickar
13687: PUSH
13688: LD_STRING Bukvice
13690: PUSH
13691: LD_STRING Zalud
13693: PUSH
13694: LD_STRING Elvis
13696: PUSH
13697: LD_STRING Nazghul
13699: PUSH
13700: LD_STRING Chruadfa
13702: PUSH
13703: LD_STRING Nazghul
13705: PUSH
13706: LD_STRING Kato Yellow Ape
13708: PUSH
13709: LD_STRING Cpt. Ape
13711: PUSH
13712: LD_STRING King Of The Hill
13714: PUSH
13715: LD_STRING Pterinochilus
13717: PUSH
13718: LD_STRING Bad Platypus
13720: PUSH
13721: LD_STRING Really Bad Ape
13723: PUSH
13724: LD_STRING Looser
13726: PUSH
13727: LD_STRING Looser
13729: PUSH
13730: LD_STRING Looser
13732: PUSH
13733: LD_STRING Megadeth
13735: PUSH
13736: LD_STRING Mad Ape
13738: PUSH
13739: LD_STRING Wraughhhh
13741: PUSH
13742: LD_STRING ":)
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: ST_TO_ADDR
// uc_side := 0 ;
13842: LD_ADDR_OWVAR 20
13846: PUSH
13847: LD_INT 0
13849: ST_TO_ADDR
// uc_nation := nation_nature ;
13850: LD_ADDR_OWVAR 21
13854: PUSH
13855: LD_INT 0
13857: ST_TO_ADDR
// hc_class := class_apeman ;
13858: LD_ADDR_OWVAR 28
13862: PUSH
13863: LD_INT 12
13865: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
13866: LD_ADDR_OWVAR 30
13870: PUSH
13871: LD_INT 2
13873: PUSH
13874: LD_INT 2
13876: PUSH
13877: LD_INT 2
13879: PUSH
13880: LD_INT 2
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
13889: LD_ADDR_OWVAR 31
13893: PUSH
13894: LD_INT 0
13896: PPUSH
13897: LD_INT 2
13899: PPUSH
13900: CALL_OW 12
13904: PUSH
13905: LD_LOC 11
13909: PLUS
13910: PUSH
13911: LD_INT 0
13913: PPUSH
13914: LD_INT 2
13916: PPUSH
13917: CALL_OW 12
13921: PUSH
13922: LD_LOC 11
13926: PLUS
13927: PUSH
13928: LD_INT 0
13930: PPUSH
13931: LD_INT 2
13933: PPUSH
13934: CALL_OW 12
13938: PUSH
13939: LD_LOC 11
13943: PLUS
13944: PUSH
13945: LD_INT 0
13947: PPUSH
13948: LD_INT 2
13950: PPUSH
13951: CALL_OW 12
13955: PUSH
13956: LD_LOC 11
13960: PLUS
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
13968: LD_ADDR_OWVAR 29
13972: PUSH
13973: LD_INT 10
13975: PUSH
13976: LD_INT 12
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: ST_TO_ADDR
// hc_sex := sex_male ;
13983: LD_ADDR_OWVAR 27
13987: PUSH
13988: LD_INT 1
13990: ST_TO_ADDR
// hc_name := ape_names [ Rand ( 1 , ape_names ) ] ;
13991: LD_ADDR_OWVAR 26
13995: PUSH
13996: LD_VAR 0 2
14000: PUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_VAR 0 2
14008: PPUSH
14009: CALL_OW 12
14013: ARRAY
14014: ST_TO_ADDR
// hc_importance := 0 ;
14015: LD_ADDR_OWVAR 32
14019: PUSH
14020: LD_INT 0
14022: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
14023: LD_ADDR_OWVAR 35
14027: PUSH
14028: LD_INT 20
14030: NEG
14031: PPUSH
14032: LD_INT 20
14034: PPUSH
14035: CALL_OW 12
14039: ST_TO_ADDR
// end ; end_of_file
14040: LD_VAR 0 1
14044: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
14045: LD_INT 0
14047: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
14048: LD_VAR 0 1
14052: PPUSH
14053: CALL_OW 255
14057: PUSH
14058: LD_VAR 0 4
14062: EQUAL
14063: IFFALSE 14082
// begin SetAchievement ( ACH_RAD ) ;
14065: LD_STRING ACH_RAD
14067: PPUSH
14068: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
14072: LD_STRING ACH_NL
14074: PPUSH
14075: LD_INT 1
14077: PPUSH
14078: CALL_OW 564
// end end ;
14082: LD_VAR 0 5
14086: RET
// export function SA_Win ( side ) ; begin
14087: LD_INT 0
14089: PPUSH
// case side of 1 :
14090: LD_VAR 0 1
14094: PUSH
14095: LD_INT 1
14097: DOUBLE
14098: EQUAL
14099: IFTRUE 14103
14101: GO 14116
14103: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
14104: LD_STRING ACH_AH
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: CALL_OW 564
14114: GO 14279
14116: LD_INT 2
14118: DOUBLE
14119: EQUAL
14120: IFTRUE 14124
14122: GO 14137
14124: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
14125: LD_STRING ACH_E
14127: PPUSH
14128: LD_INT 1
14130: PPUSH
14131: CALL_OW 564
14135: GO 14279
14137: LD_INT 3
14139: DOUBLE
14140: EQUAL
14141: IFTRUE 14145
14143: GO 14158
14145: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
14146: LD_STRING ACH_OOL
14148: PPUSH
14149: LD_INT 1
14151: PPUSH
14152: CALL_OW 564
14156: GO 14279
14158: LD_INT 1
14160: PUSH
14161: LD_INT 2
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: DOUBLE
14168: EQUAL
14169: IFTRUE 14173
14171: GO 14198
14173: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14174: LD_STRING ACH_AH
14176: PPUSH
14177: LD_REAL  5.00000000000000E-0001
14180: PPUSH
14181: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14185: LD_STRING ACH_E
14187: PPUSH
14188: LD_REAL  5.00000000000000E-0001
14191: PPUSH
14192: CALL_OW 564
// end ; [ 2 , 3 ] :
14196: GO 14279
14198: LD_INT 2
14200: PUSH
14201: LD_INT 3
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: DOUBLE
14208: EQUAL
14209: IFTRUE 14213
14211: GO 14238
14213: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14214: LD_STRING ACH_OOL
14216: PPUSH
14217: LD_REAL  5.00000000000000E-0001
14220: PPUSH
14221: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14225: LD_STRING ACH_E
14227: PPUSH
14228: LD_REAL  5.00000000000000E-0001
14231: PPUSH
14232: CALL_OW 564
// end ; [ 3 , 1 ] :
14236: GO 14279
14238: LD_INT 3
14240: PUSH
14241: LD_INT 1
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: DOUBLE
14248: EQUAL
14249: IFTRUE 14253
14251: GO 14278
14253: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14254: LD_STRING ACH_AH
14256: PPUSH
14257: LD_REAL  5.00000000000000E-0001
14260: PPUSH
14261: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14265: LD_STRING ACH_OOL
14267: PPUSH
14268: LD_REAL  5.00000000000000E-0001
14271: PPUSH
14272: CALL_OW 564
// end ; end ;
14276: GO 14279
14278: POP
// end ; end_of_file
14279: LD_VAR 0 2
14283: RET
// export function SetMpTechs ( ) ; var side , i ; begin
14284: LD_INT 0
14286: PPUSH
14287: PPUSH
14288: PPUSH
// for side = 1 to 8 do
14289: LD_ADDR_VAR 0 2
14293: PUSH
14294: DOUBLE
14295: LD_INT 1
14297: DEC
14298: ST_TO_ADDR
14299: LD_INT 8
14301: PUSH
14302: FOR_TO
14303: IFFALSE 14424
// begin for i = 1 to 72 do
14305: LD_ADDR_VAR 0 3
14309: PUSH
14310: DOUBLE
14311: LD_INT 1
14313: DEC
14314: ST_TO_ADDR
14315: LD_INT 72
14317: PUSH
14318: FOR_TO
14319: IFFALSE 14350
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
14321: LD_VAR 0 3
14325: PPUSH
14326: LD_VAR 0 2
14330: PPUSH
14331: LD_INT 0
14333: PPUSH
14334: LD_VAR 0 3
14338: PPUSH
14339: CALL_OW 565
14343: PPUSH
14344: CALL_OW 322
14348: GO 14318
14350: POP
14351: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
14352: LD_INT 73
14354: PPUSH
14355: LD_VAR 0 2
14359: PPUSH
14360: LD_INT 0
14362: PPUSH
14363: LD_INT 25
14365: PPUSH
14366: CALL_OW 565
14370: PPUSH
14371: CALL_OW 322
// for i = 0 to 40 do
14375: LD_ADDR_VAR 0 3
14379: PUSH
14380: DOUBLE
14381: LD_INT 0
14383: DEC
14384: ST_TO_ADDR
14385: LD_INT 40
14387: PUSH
14388: FOR_TO
14389: IFFALSE 14420
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
14391: LD_VAR 0 3
14395: PPUSH
14396: LD_VAR 0 2
14400: PPUSH
14401: LD_INT 1
14403: PPUSH
14404: LD_VAR 0 3
14408: PPUSH
14409: CALL_OW 565
14413: PPUSH
14414: CALL_OW 324
14418: GO 14388
14420: POP
14421: POP
// end ;
14422: GO 14302
14424: POP
14425: POP
// end ;
14426: LD_VAR 0 1
14430: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
14431: LD_INT 0
14433: PPUSH
14434: PPUSH
14435: PPUSH
// for side = 1 to 8 do
14436: LD_ADDR_VAR 0 3
14440: PUSH
14441: DOUBLE
14442: LD_INT 1
14444: DEC
14445: ST_TO_ADDR
14446: LD_INT 8
14448: PUSH
14449: FOR_TO
14450: IFFALSE 18446
// begin for i = 1 to 73 do
14452: LD_ADDR_VAR 0 4
14456: PUSH
14457: DOUBLE
14458: LD_INT 1
14460: DEC
14461: ST_TO_ADDR
14462: LD_INT 73
14464: PUSH
14465: FOR_TO
14466: IFFALSE 14487
// SetTech ( i , side , state_disabled ) ;
14468: LD_VAR 0 4
14472: PPUSH
14473: LD_VAR 0 3
14477: PPUSH
14478: LD_INT 0
14480: PPUSH
14481: CALL_OW 322
14485: GO 14465
14487: POP
14488: POP
// for i = 0 to 40 do
14489: LD_ADDR_VAR 0 4
14493: PUSH
14494: DOUBLE
14495: LD_INT 0
14497: DEC
14498: ST_TO_ADDR
14499: LD_INT 40
14501: PUSH
14502: FOR_TO
14503: IFFALSE 14524
// SetRestrict ( i , side , false ) ;
14505: LD_VAR 0 4
14509: PPUSH
14510: LD_VAR 0 3
14514: PPUSH
14515: LD_INT 0
14517: PPUSH
14518: CALL_OW 324
14522: GO 14502
14524: POP
14525: POP
// case level of 1 :
14526: LD_VAR 0 1
14530: PUSH
14531: LD_INT 1
14533: DOUBLE
14534: EQUAL
14535: IFTRUE 14539
14537: GO 14692
14539: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14540: LD_INT 35
14542: PPUSH
14543: LD_VAR 0 3
14547: PPUSH
14548: LD_INT 1
14550: PPUSH
14551: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14555: LD_INT 45
14557: PPUSH
14558: LD_VAR 0 3
14562: PPUSH
14563: LD_INT 1
14565: PPUSH
14566: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14570: LD_INT 46
14572: PPUSH
14573: LD_VAR 0 3
14577: PPUSH
14578: LD_INT 1
14580: PPUSH
14581: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14585: LD_INT 47
14587: PPUSH
14588: LD_VAR 0 3
14592: PPUSH
14593: LD_INT 1
14595: PPUSH
14596: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14600: LD_INT 0
14602: PPUSH
14603: LD_VAR 0 3
14607: PPUSH
14608: LD_INT 1
14610: PPUSH
14611: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14615: LD_INT 2
14617: PPUSH
14618: LD_VAR 0 3
14622: PPUSH
14623: LD_INT 1
14625: PPUSH
14626: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14630: LD_INT 4
14632: PPUSH
14633: LD_VAR 0 3
14637: PPUSH
14638: LD_INT 1
14640: PPUSH
14641: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14645: LD_INT 6
14647: PPUSH
14648: LD_VAR 0 3
14652: PPUSH
14653: LD_INT 1
14655: PPUSH
14656: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14660: LD_INT 29
14662: PPUSH
14663: LD_VAR 0 3
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14675: LD_INT 31
14677: PPUSH
14678: LD_VAR 0 3
14682: PPUSH
14683: LD_INT 1
14685: PPUSH
14686: CALL_OW 324
// end ; 2 :
14690: GO 18444
14692: LD_INT 2
14694: DOUBLE
14695: EQUAL
14696: IFTRUE 14700
14698: GO 14898
14700: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14701: LD_INT 35
14703: PPUSH
14704: LD_VAR 0 3
14708: PPUSH
14709: LD_INT 1
14711: PPUSH
14712: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14716: LD_INT 45
14718: PPUSH
14719: LD_VAR 0 3
14723: PPUSH
14724: LD_INT 1
14726: PPUSH
14727: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14731: LD_INT 46
14733: PPUSH
14734: LD_VAR 0 3
14738: PPUSH
14739: LD_INT 1
14741: PPUSH
14742: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14746: LD_INT 47
14748: PPUSH
14749: LD_VAR 0 3
14753: PPUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14761: LD_INT 1
14763: PPUSH
14764: LD_VAR 0 3
14768: PPUSH
14769: LD_INT 1
14771: PPUSH
14772: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14776: LD_INT 2
14778: PPUSH
14779: LD_VAR 0 3
14783: PPUSH
14784: LD_INT 1
14786: PPUSH
14787: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14791: LD_INT 11
14793: PPUSH
14794: LD_VAR 0 3
14798: PPUSH
14799: LD_INT 1
14801: PPUSH
14802: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14806: LD_INT 0
14808: PPUSH
14809: LD_VAR 0 3
14813: PPUSH
14814: LD_INT 1
14816: PPUSH
14817: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14821: LD_INT 2
14823: PPUSH
14824: LD_VAR 0 3
14828: PPUSH
14829: LD_INT 1
14831: PPUSH
14832: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14836: LD_INT 4
14838: PPUSH
14839: LD_VAR 0 3
14843: PPUSH
14844: LD_INT 1
14846: PPUSH
14847: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14851: LD_INT 6
14853: PPUSH
14854: LD_VAR 0 3
14858: PPUSH
14859: LD_INT 1
14861: PPUSH
14862: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14866: LD_INT 29
14868: PPUSH
14869: LD_VAR 0 3
14873: PPUSH
14874: LD_INT 1
14876: PPUSH
14877: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14881: LD_INT 31
14883: PPUSH
14884: LD_VAR 0 3
14888: PPUSH
14889: LD_INT 1
14891: PPUSH
14892: CALL_OW 324
// end ; 3 :
14896: GO 18444
14898: LD_INT 3
14900: DOUBLE
14901: EQUAL
14902: IFTRUE 14906
14904: GO 15359
14906: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14907: LD_INT 35
14909: PPUSH
14910: LD_VAR 0 3
14914: PPUSH
14915: LD_INT 1
14917: PPUSH
14918: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14922: LD_INT 45
14924: PPUSH
14925: LD_VAR 0 3
14929: PPUSH
14930: LD_INT 1
14932: PPUSH
14933: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14937: LD_INT 46
14939: PPUSH
14940: LD_VAR 0 3
14944: PPUSH
14945: LD_INT 1
14947: PPUSH
14948: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14952: LD_INT 47
14954: PPUSH
14955: LD_VAR 0 3
14959: PPUSH
14960: LD_INT 1
14962: PPUSH
14963: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14967: LD_INT 1
14969: PPUSH
14970: LD_VAR 0 3
14974: PPUSH
14975: LD_INT 1
14977: PPUSH
14978: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14982: LD_INT 2
14984: PPUSH
14985: LD_VAR 0 3
14989: PPUSH
14990: LD_INT 1
14992: PPUSH
14993: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14997: LD_INT 11
14999: PPUSH
15000: LD_VAR 0 3
15004: PPUSH
15005: LD_INT 1
15007: PPUSH
15008: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15012: LD_INT 48
15014: PPUSH
15015: LD_VAR 0 3
15019: PPUSH
15020: LD_INT 1
15022: PPUSH
15023: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15027: LD_INT 69
15029: PPUSH
15030: LD_VAR 0 3
15034: PPUSH
15035: LD_INT 1
15037: PPUSH
15038: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15042: LD_INT 39
15044: PPUSH
15045: LD_VAR 0 3
15049: PPUSH
15050: LD_INT 1
15052: PPUSH
15053: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15057: LD_INT 43
15059: PPUSH
15060: LD_VAR 0 3
15064: PPUSH
15065: LD_INT 1
15067: PPUSH
15068: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15072: LD_INT 51
15074: PPUSH
15075: LD_VAR 0 3
15079: PPUSH
15080: LD_INT 1
15082: PPUSH
15083: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15087: LD_INT 6
15089: PPUSH
15090: LD_VAR 0 3
15094: PPUSH
15095: LD_INT 1
15097: PPUSH
15098: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15102: LD_INT 0
15104: PPUSH
15105: LD_VAR 0 3
15109: PPUSH
15110: LD_INT 1
15112: PPUSH
15113: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15117: LD_INT 2
15119: PPUSH
15120: LD_VAR 0 3
15124: PPUSH
15125: LD_INT 1
15127: PPUSH
15128: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15132: LD_INT 3
15134: PPUSH
15135: LD_VAR 0 3
15139: PPUSH
15140: LD_INT 1
15142: PPUSH
15143: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15147: LD_INT 4
15149: PPUSH
15150: LD_VAR 0 3
15154: PPUSH
15155: LD_INT 1
15157: PPUSH
15158: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15162: LD_INT 6
15164: PPUSH
15165: LD_VAR 0 3
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15177: LD_INT 7
15179: PPUSH
15180: LD_VAR 0 3
15184: PPUSH
15185: LD_INT 1
15187: PPUSH
15188: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15192: LD_INT 8
15194: PPUSH
15195: LD_VAR 0 3
15199: PPUSH
15200: LD_INT 1
15202: PPUSH
15203: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15207: LD_INT 10
15209: PPUSH
15210: LD_VAR 0 3
15214: PPUSH
15215: LD_INT 1
15217: PPUSH
15218: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15222: LD_INT 15
15224: PPUSH
15225: LD_VAR 0 3
15229: PPUSH
15230: LD_INT 1
15232: PPUSH
15233: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15237: LD_INT 16
15239: PPUSH
15240: LD_VAR 0 3
15244: PPUSH
15245: LD_INT 1
15247: PPUSH
15248: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15252: LD_INT 17
15254: PPUSH
15255: LD_VAR 0 3
15259: PPUSH
15260: LD_INT 1
15262: PPUSH
15263: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15267: LD_INT 20
15269: PPUSH
15270: LD_VAR 0 3
15274: PPUSH
15275: LD_INT 1
15277: PPUSH
15278: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15282: LD_INT 26
15284: PPUSH
15285: LD_VAR 0 3
15289: PPUSH
15290: LD_INT 1
15292: PPUSH
15293: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15297: LD_INT 27
15299: PPUSH
15300: LD_VAR 0 3
15304: PPUSH
15305: LD_INT 1
15307: PPUSH
15308: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15312: LD_INT 29
15314: PPUSH
15315: LD_VAR 0 3
15319: PPUSH
15320: LD_INT 1
15322: PPUSH
15323: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15327: LD_INT 31
15329: PPUSH
15330: LD_VAR 0 3
15334: PPUSH
15335: LD_INT 1
15337: PPUSH
15338: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15342: LD_INT 32
15344: PPUSH
15345: LD_VAR 0 3
15349: PPUSH
15350: LD_INT 1
15352: PPUSH
15353: CALL_OW 324
// end ; 4 :
15357: GO 18444
15359: LD_INT 4
15361: DOUBLE
15362: EQUAL
15363: IFTRUE 15367
15365: GO 16315
15367: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15368: LD_INT 35
15370: PPUSH
15371: LD_VAR 0 3
15375: PPUSH
15376: LD_INT 1
15378: PPUSH
15379: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15383: LD_INT 45
15385: PPUSH
15386: LD_VAR 0 3
15390: PPUSH
15391: LD_INT 1
15393: PPUSH
15394: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15398: LD_INT 46
15400: PPUSH
15401: LD_VAR 0 3
15405: PPUSH
15406: LD_INT 1
15408: PPUSH
15409: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15413: LD_INT 47
15415: PPUSH
15416: LD_VAR 0 3
15420: PPUSH
15421: LD_INT 1
15423: PPUSH
15424: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15428: LD_INT 1
15430: PPUSH
15431: LD_VAR 0 3
15435: PPUSH
15436: LD_INT 1
15438: PPUSH
15439: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15443: LD_INT 2
15445: PPUSH
15446: LD_VAR 0 3
15450: PPUSH
15451: LD_INT 1
15453: PPUSH
15454: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15458: LD_INT 11
15460: PPUSH
15461: LD_VAR 0 3
15465: PPUSH
15466: LD_INT 1
15468: PPUSH
15469: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15473: LD_INT 20
15475: PPUSH
15476: LD_VAR 0 3
15480: PPUSH
15481: LD_INT 1
15483: PPUSH
15484: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15488: LD_INT 48
15490: PPUSH
15491: LD_VAR 0 3
15495: PPUSH
15496: LD_INT 1
15498: PPUSH
15499: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15503: LD_INT 49
15505: PPUSH
15506: LD_VAR 0 3
15510: PPUSH
15511: LD_INT 1
15513: PPUSH
15514: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15518: LD_INT 69
15520: PPUSH
15521: LD_VAR 0 3
15525: PPUSH
15526: LD_INT 1
15528: PPUSH
15529: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15533: LD_INT 39
15535: PPUSH
15536: LD_VAR 0 3
15540: PPUSH
15541: LD_INT 1
15543: PPUSH
15544: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15548: LD_INT 34
15550: PPUSH
15551: LD_VAR 0 3
15555: PPUSH
15556: LD_INT 1
15558: PPUSH
15559: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15563: LD_INT 42
15565: PPUSH
15566: LD_VAR 0 3
15570: PPUSH
15571: LD_INT 1
15573: PPUSH
15574: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15578: LD_INT 44
15580: PPUSH
15581: LD_VAR 0 3
15585: PPUSH
15586: LD_INT 1
15588: PPUSH
15589: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15593: LD_INT 41
15595: PPUSH
15596: LD_VAR 0 3
15600: PPUSH
15601: LD_INT 1
15603: PPUSH
15604: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15608: LD_INT 43
15610: PPUSH
15611: LD_VAR 0 3
15615: PPUSH
15616: LD_INT 1
15618: PPUSH
15619: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15623: LD_INT 70
15625: PPUSH
15626: LD_VAR 0 3
15630: PPUSH
15631: LD_INT 1
15633: PPUSH
15634: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15638: LD_INT 51
15640: PPUSH
15641: LD_VAR 0 3
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15653: LD_INT 52
15655: PPUSH
15656: LD_VAR 0 3
15660: PPUSH
15661: LD_INT 1
15663: PPUSH
15664: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15668: LD_INT 6
15670: PPUSH
15671: LD_VAR 0 3
15675: PPUSH
15676: LD_INT 1
15678: PPUSH
15679: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15683: LD_INT 15
15685: PPUSH
15686: LD_VAR 0 3
15690: PPUSH
15691: LD_INT 1
15693: PPUSH
15694: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15698: LD_INT 7
15700: PPUSH
15701: LD_VAR 0 3
15705: PPUSH
15706: LD_INT 1
15708: PPUSH
15709: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15713: LD_INT 12
15715: PPUSH
15716: LD_VAR 0 3
15720: PPUSH
15721: LD_INT 1
15723: PPUSH
15724: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15728: LD_INT 18
15730: PPUSH
15731: LD_VAR 0 3
15735: PPUSH
15736: LD_INT 1
15738: PPUSH
15739: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15743: LD_INT 60
15745: PPUSH
15746: LD_VAR 0 3
15750: PPUSH
15751: LD_INT 1
15753: PPUSH
15754: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15758: LD_INT 9
15760: PPUSH
15761: LD_VAR 0 3
15765: PPUSH
15766: LD_INT 1
15768: PPUSH
15769: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15773: LD_INT 30
15775: PPUSH
15776: LD_VAR 0 3
15780: PPUSH
15781: LD_INT 1
15783: PPUSH
15784: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15788: LD_INT 37
15790: PPUSH
15791: LD_VAR 0 3
15795: PPUSH
15796: LD_INT 1
15798: PPUSH
15799: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15803: LD_INT 5
15805: PPUSH
15806: LD_VAR 0 3
15810: PPUSH
15811: LD_INT 1
15813: PPUSH
15814: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15818: LD_INT 66
15820: PPUSH
15821: LD_VAR 0 3
15825: PPUSH
15826: LD_INT 1
15828: PPUSH
15829: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15833: LD_INT 21
15835: PPUSH
15836: LD_VAR 0 3
15840: PPUSH
15841: LD_INT 1
15843: PPUSH
15844: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15848: LD_INT 22
15850: PPUSH
15851: LD_VAR 0 3
15855: PPUSH
15856: LD_INT 1
15858: PPUSH
15859: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15863: LD_INT 54
15865: PPUSH
15866: LD_VAR 0 3
15870: PPUSH
15871: LD_INT 1
15873: PPUSH
15874: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15878: LD_INT 0
15880: PPUSH
15881: LD_VAR 0 3
15885: PPUSH
15886: LD_INT 1
15888: PPUSH
15889: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15893: LD_INT 1
15895: PPUSH
15896: LD_VAR 0 3
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15908: LD_INT 2
15910: PPUSH
15911: LD_VAR 0 3
15915: PPUSH
15916: LD_INT 1
15918: PPUSH
15919: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15923: LD_INT 3
15925: PPUSH
15926: LD_VAR 0 3
15930: PPUSH
15931: LD_INT 1
15933: PPUSH
15934: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15938: LD_INT 4
15940: PPUSH
15941: LD_VAR 0 3
15945: PPUSH
15946: LD_INT 1
15948: PPUSH
15949: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15953: LD_INT 5
15955: PPUSH
15956: LD_VAR 0 3
15960: PPUSH
15961: LD_INT 1
15963: PPUSH
15964: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15968: LD_INT 6
15970: PPUSH
15971: LD_VAR 0 3
15975: PPUSH
15976: LD_INT 1
15978: PPUSH
15979: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15983: LD_INT 7
15985: PPUSH
15986: LD_VAR 0 3
15990: PPUSH
15991: LD_INT 1
15993: PPUSH
15994: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15998: LD_INT 8
16000: PPUSH
16001: LD_VAR 0 3
16005: PPUSH
16006: LD_INT 1
16008: PPUSH
16009: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16013: LD_INT 10
16015: PPUSH
16016: LD_VAR 0 3
16020: PPUSH
16021: LD_INT 1
16023: PPUSH
16024: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16028: LD_INT 11
16030: PPUSH
16031: LD_VAR 0 3
16035: PPUSH
16036: LD_INT 1
16038: PPUSH
16039: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16043: LD_INT 12
16045: PPUSH
16046: LD_VAR 0 3
16050: PPUSH
16051: LD_INT 1
16053: PPUSH
16054: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16058: LD_INT 13
16060: PPUSH
16061: LD_VAR 0 3
16065: PPUSH
16066: LD_INT 1
16068: PPUSH
16069: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16073: LD_INT 14
16075: PPUSH
16076: LD_VAR 0 3
16080: PPUSH
16081: LD_INT 1
16083: PPUSH
16084: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16088: LD_INT 15
16090: PPUSH
16091: LD_VAR 0 3
16095: PPUSH
16096: LD_INT 1
16098: PPUSH
16099: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16103: LD_INT 16
16105: PPUSH
16106: LD_VAR 0 3
16110: PPUSH
16111: LD_INT 1
16113: PPUSH
16114: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16118: LD_INT 17
16120: PPUSH
16121: LD_VAR 0 3
16125: PPUSH
16126: LD_INT 1
16128: PPUSH
16129: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16133: LD_INT 19
16135: PPUSH
16136: LD_VAR 0 3
16140: PPUSH
16141: LD_INT 1
16143: PPUSH
16144: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16148: LD_INT 20
16150: PPUSH
16151: LD_VAR 0 3
16155: PPUSH
16156: LD_INT 1
16158: PPUSH
16159: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16163: LD_INT 21
16165: PPUSH
16166: LD_VAR 0 3
16170: PPUSH
16171: LD_INT 1
16173: PPUSH
16174: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16178: LD_INT 23
16180: PPUSH
16181: LD_VAR 0 3
16185: PPUSH
16186: LD_INT 1
16188: PPUSH
16189: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16193: LD_INT 26
16195: PPUSH
16196: LD_VAR 0 3
16200: PPUSH
16201: LD_INT 1
16203: PPUSH
16204: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16208: LD_INT 27
16210: PPUSH
16211: LD_VAR 0 3
16215: PPUSH
16216: LD_INT 1
16218: PPUSH
16219: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16223: LD_INT 28
16225: PPUSH
16226: LD_VAR 0 3
16230: PPUSH
16231: LD_INT 1
16233: PPUSH
16234: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16238: LD_INT 29
16240: PPUSH
16241: LD_VAR 0 3
16245: PPUSH
16246: LD_INT 1
16248: PPUSH
16249: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16253: LD_INT 30
16255: PPUSH
16256: LD_VAR 0 3
16260: PPUSH
16261: LD_INT 1
16263: PPUSH
16264: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16268: LD_INT 31
16270: PPUSH
16271: LD_VAR 0 3
16275: PPUSH
16276: LD_INT 1
16278: PPUSH
16279: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16283: LD_INT 32
16285: PPUSH
16286: LD_VAR 0 3
16290: PPUSH
16291: LD_INT 1
16293: PPUSH
16294: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16298: LD_INT 36
16300: PPUSH
16301: LD_VAR 0 3
16305: PPUSH
16306: LD_INT 1
16308: PPUSH
16309: CALL_OW 324
// end ; 5 :
16313: GO 18444
16315: LD_INT 5
16317: DOUBLE
16318: EQUAL
16319: IFTRUE 16323
16321: GO 17436
16323: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16324: LD_INT 35
16326: PPUSH
16327: LD_VAR 0 3
16331: PPUSH
16332: LD_INT 1
16334: PPUSH
16335: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16339: LD_INT 45
16341: PPUSH
16342: LD_VAR 0 3
16346: PPUSH
16347: LD_INT 1
16349: PPUSH
16350: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16354: LD_INT 46
16356: PPUSH
16357: LD_VAR 0 3
16361: PPUSH
16362: LD_INT 1
16364: PPUSH
16365: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16369: LD_INT 47
16371: PPUSH
16372: LD_VAR 0 3
16376: PPUSH
16377: LD_INT 1
16379: PPUSH
16380: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16384: LD_INT 1
16386: PPUSH
16387: LD_VAR 0 3
16391: PPUSH
16392: LD_INT 1
16394: PPUSH
16395: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16399: LD_INT 2
16401: PPUSH
16402: LD_VAR 0 3
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16414: LD_INT 11
16416: PPUSH
16417: LD_VAR 0 3
16421: PPUSH
16422: LD_INT 1
16424: PPUSH
16425: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16429: LD_INT 20
16431: PPUSH
16432: LD_VAR 0 3
16436: PPUSH
16437: LD_INT 1
16439: PPUSH
16440: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16444: LD_INT 48
16446: PPUSH
16447: LD_VAR 0 3
16451: PPUSH
16452: LD_INT 1
16454: PPUSH
16455: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16459: LD_INT 49
16461: PPUSH
16462: LD_VAR 0 3
16466: PPUSH
16467: LD_INT 1
16469: PPUSH
16470: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16474: LD_INT 69
16476: PPUSH
16477: LD_VAR 0 3
16481: PPUSH
16482: LD_INT 1
16484: PPUSH
16485: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16489: LD_INT 39
16491: PPUSH
16492: LD_VAR 0 3
16496: PPUSH
16497: LD_INT 1
16499: PPUSH
16500: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16504: LD_INT 34
16506: PPUSH
16507: LD_VAR 0 3
16511: PPUSH
16512: LD_INT 1
16514: PPUSH
16515: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16519: LD_INT 42
16521: PPUSH
16522: LD_VAR 0 3
16526: PPUSH
16527: LD_INT 1
16529: PPUSH
16530: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16534: LD_INT 44
16536: PPUSH
16537: LD_VAR 0 3
16541: PPUSH
16542: LD_INT 1
16544: PPUSH
16545: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16549: LD_INT 41
16551: PPUSH
16552: LD_VAR 0 3
16556: PPUSH
16557: LD_INT 1
16559: PPUSH
16560: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16564: LD_INT 40
16566: PPUSH
16567: LD_VAR 0 3
16571: PPUSH
16572: LD_INT 1
16574: PPUSH
16575: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16579: LD_INT 43
16581: PPUSH
16582: LD_VAR 0 3
16586: PPUSH
16587: LD_INT 1
16589: PPUSH
16590: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16594: LD_INT 70
16596: PPUSH
16597: LD_VAR 0 3
16601: PPUSH
16602: LD_INT 1
16604: PPUSH
16605: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16609: LD_INT 51
16611: PPUSH
16612: LD_VAR 0 3
16616: PPUSH
16617: LD_INT 1
16619: PPUSH
16620: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16624: LD_INT 52
16626: PPUSH
16627: LD_VAR 0 3
16631: PPUSH
16632: LD_INT 1
16634: PPUSH
16635: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16639: LD_INT 6
16641: PPUSH
16642: LD_VAR 0 3
16646: PPUSH
16647: LD_INT 1
16649: PPUSH
16650: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16654: LD_INT 15
16656: PPUSH
16657: LD_VAR 0 3
16661: PPUSH
16662: LD_INT 1
16664: PPUSH
16665: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16669: LD_INT 7
16671: PPUSH
16672: LD_VAR 0 3
16676: PPUSH
16677: LD_INT 1
16679: PPUSH
16680: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16684: LD_INT 12
16686: PPUSH
16687: LD_VAR 0 3
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16699: LD_INT 17
16701: PPUSH
16702: LD_VAR 0 3
16706: PPUSH
16707: LD_INT 1
16709: PPUSH
16710: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16714: LD_INT 18
16716: PPUSH
16717: LD_VAR 0 3
16721: PPUSH
16722: LD_INT 1
16724: PPUSH
16725: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16729: LD_INT 60
16731: PPUSH
16732: LD_VAR 0 3
16736: PPUSH
16737: LD_INT 1
16739: PPUSH
16740: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16744: LD_INT 32
16746: PPUSH
16747: LD_VAR 0 3
16751: PPUSH
16752: LD_INT 1
16754: PPUSH
16755: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16759: LD_INT 9
16761: PPUSH
16762: LD_VAR 0 3
16766: PPUSH
16767: LD_INT 1
16769: PPUSH
16770: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16774: LD_INT 57
16776: PPUSH
16777: LD_VAR 0 3
16781: PPUSH
16782: LD_INT 1
16784: PPUSH
16785: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16789: LD_INT 30
16791: PPUSH
16792: LD_VAR 0 3
16796: PPUSH
16797: LD_INT 1
16799: PPUSH
16800: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16804: LD_INT 37
16806: PPUSH
16807: LD_VAR 0 3
16811: PPUSH
16812: LD_INT 1
16814: PPUSH
16815: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16819: LD_INT 63
16821: PPUSH
16822: LD_VAR 0 3
16826: PPUSH
16827: LD_INT 1
16829: PPUSH
16830: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16834: LD_INT 3
16836: PPUSH
16837: LD_VAR 0 3
16841: PPUSH
16842: LD_INT 1
16844: PPUSH
16845: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16849: LD_INT 4
16851: PPUSH
16852: LD_VAR 0 3
16856: PPUSH
16857: LD_INT 1
16859: PPUSH
16860: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16864: LD_INT 5
16866: PPUSH
16867: LD_VAR 0 3
16871: PPUSH
16872: LD_INT 1
16874: PPUSH
16875: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16879: LD_INT 66
16881: PPUSH
16882: LD_VAR 0 3
16886: PPUSH
16887: LD_INT 1
16889: PPUSH
16890: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16894: LD_INT 21
16896: PPUSH
16897: LD_VAR 0 3
16901: PPUSH
16902: LD_INT 1
16904: PPUSH
16905: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16909: LD_INT 22
16911: PPUSH
16912: LD_VAR 0 3
16916: PPUSH
16917: LD_INT 1
16919: PPUSH
16920: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16924: LD_INT 19
16926: PPUSH
16927: LD_VAR 0 3
16931: PPUSH
16932: LD_INT 1
16934: PPUSH
16935: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16939: LD_INT 54
16941: PPUSH
16942: LD_VAR 0 3
16946: PPUSH
16947: LD_INT 1
16949: PPUSH
16950: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16954: LD_INT 55
16956: PPUSH
16957: LD_VAR 0 3
16961: PPUSH
16962: LD_INT 1
16964: PPUSH
16965: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16969: LD_INT 0
16971: PPUSH
16972: LD_VAR 0 3
16976: PPUSH
16977: LD_INT 1
16979: PPUSH
16980: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16984: LD_INT 1
16986: PPUSH
16987: LD_VAR 0 3
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16999: LD_INT 2
17001: PPUSH
17002: LD_VAR 0 3
17006: PPUSH
17007: LD_INT 1
17009: PPUSH
17010: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17014: LD_INT 3
17016: PPUSH
17017: LD_VAR 0 3
17021: PPUSH
17022: LD_INT 1
17024: PPUSH
17025: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17029: LD_INT 4
17031: PPUSH
17032: LD_VAR 0 3
17036: PPUSH
17037: LD_INT 1
17039: PPUSH
17040: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17044: LD_INT 5
17046: PPUSH
17047: LD_VAR 0 3
17051: PPUSH
17052: LD_INT 1
17054: PPUSH
17055: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17059: LD_INT 6
17061: PPUSH
17062: LD_VAR 0 3
17066: PPUSH
17067: LD_INT 1
17069: PPUSH
17070: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17074: LD_INT 7
17076: PPUSH
17077: LD_VAR 0 3
17081: PPUSH
17082: LD_INT 1
17084: PPUSH
17085: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17089: LD_INT 8
17091: PPUSH
17092: LD_VAR 0 3
17096: PPUSH
17097: LD_INT 1
17099: PPUSH
17100: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17104: LD_INT 10
17106: PPUSH
17107: LD_VAR 0 3
17111: PPUSH
17112: LD_INT 1
17114: PPUSH
17115: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17119: LD_INT 11
17121: PPUSH
17122: LD_VAR 0 3
17126: PPUSH
17127: LD_INT 1
17129: PPUSH
17130: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17134: LD_INT 12
17136: PPUSH
17137: LD_VAR 0 3
17141: PPUSH
17142: LD_INT 1
17144: PPUSH
17145: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17149: LD_INT 13
17151: PPUSH
17152: LD_VAR 0 3
17156: PPUSH
17157: LD_INT 1
17159: PPUSH
17160: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17164: LD_INT 14
17166: PPUSH
17167: LD_VAR 0 3
17171: PPUSH
17172: LD_INT 1
17174: PPUSH
17175: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17179: LD_INT 15
17181: PPUSH
17182: LD_VAR 0 3
17186: PPUSH
17187: LD_INT 1
17189: PPUSH
17190: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17194: LD_INT 16
17196: PPUSH
17197: LD_VAR 0 3
17201: PPUSH
17202: LD_INT 1
17204: PPUSH
17205: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17209: LD_INT 17
17211: PPUSH
17212: LD_VAR 0 3
17216: PPUSH
17217: LD_INT 1
17219: PPUSH
17220: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
17224: LD_INT 18
17226: PPUSH
17227: LD_VAR 0 3
17231: PPUSH
17232: LD_INT 1
17234: PPUSH
17235: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17239: LD_INT 19
17241: PPUSH
17242: LD_VAR 0 3
17246: PPUSH
17247: LD_INT 1
17249: PPUSH
17250: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17254: LD_INT 20
17256: PPUSH
17257: LD_VAR 0 3
17261: PPUSH
17262: LD_INT 1
17264: PPUSH
17265: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17269: LD_INT 21
17271: PPUSH
17272: LD_VAR 0 3
17276: PPUSH
17277: LD_INT 1
17279: PPUSH
17280: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17284: LD_INT 23
17286: PPUSH
17287: LD_VAR 0 3
17291: PPUSH
17292: LD_INT 1
17294: PPUSH
17295: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17299: LD_INT 26
17301: PPUSH
17302: LD_VAR 0 3
17306: PPUSH
17307: LD_INT 1
17309: PPUSH
17310: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17314: LD_INT 27
17316: PPUSH
17317: LD_VAR 0 3
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17329: LD_INT 28
17331: PPUSH
17332: LD_VAR 0 3
17336: PPUSH
17337: LD_INT 1
17339: PPUSH
17340: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17344: LD_INT 29
17346: PPUSH
17347: LD_VAR 0 3
17351: PPUSH
17352: LD_INT 1
17354: PPUSH
17355: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17359: LD_INT 30
17361: PPUSH
17362: LD_VAR 0 3
17366: PPUSH
17367: LD_INT 1
17369: PPUSH
17370: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17374: LD_INT 31
17376: PPUSH
17377: LD_VAR 0 3
17381: PPUSH
17382: LD_INT 1
17384: PPUSH
17385: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17389: LD_INT 32
17391: PPUSH
17392: LD_VAR 0 3
17396: PPUSH
17397: LD_INT 1
17399: PPUSH
17400: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
17404: LD_INT 33
17406: PPUSH
17407: LD_VAR 0 3
17411: PPUSH
17412: LD_INT 1
17414: PPUSH
17415: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17419: LD_INT 36
17421: PPUSH
17422: LD_VAR 0 3
17426: PPUSH
17427: LD_INT 1
17429: PPUSH
17430: CALL_OW 324
// end ; 6 :
17434: GO 18444
17436: LD_INT 6
17438: DOUBLE
17439: EQUAL
17440: IFTRUE 17444
17442: GO 18369
17444: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17445: LD_INT 35
17447: PPUSH
17448: LD_VAR 0 3
17452: PPUSH
17453: LD_INT 1
17455: PPUSH
17456: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17460: LD_INT 45
17462: PPUSH
17463: LD_VAR 0 3
17467: PPUSH
17468: LD_INT 1
17470: PPUSH
17471: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17475: LD_INT 46
17477: PPUSH
17478: LD_VAR 0 3
17482: PPUSH
17483: LD_INT 1
17485: PPUSH
17486: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17490: LD_INT 47
17492: PPUSH
17493: LD_VAR 0 3
17497: PPUSH
17498: LD_INT 1
17500: PPUSH
17501: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17505: LD_INT 1
17507: PPUSH
17508: LD_VAR 0 3
17512: PPUSH
17513: LD_INT 1
17515: PPUSH
17516: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17520: LD_INT 2
17522: PPUSH
17523: LD_VAR 0 3
17527: PPUSH
17528: LD_INT 1
17530: PPUSH
17531: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17535: LD_INT 11
17537: PPUSH
17538: LD_VAR 0 3
17542: PPUSH
17543: LD_INT 1
17545: PPUSH
17546: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17550: LD_INT 20
17552: PPUSH
17553: LD_VAR 0 3
17557: PPUSH
17558: LD_INT 1
17560: PPUSH
17561: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17565: LD_INT 48
17567: PPUSH
17568: LD_VAR 0 3
17572: PPUSH
17573: LD_INT 1
17575: PPUSH
17576: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17580: LD_INT 49
17582: PPUSH
17583: LD_VAR 0 3
17587: PPUSH
17588: LD_INT 1
17590: PPUSH
17591: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
17595: LD_INT 50
17597: PPUSH
17598: LD_VAR 0 3
17602: PPUSH
17603: LD_INT 1
17605: PPUSH
17606: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17610: LD_INT 69
17612: PPUSH
17613: LD_VAR 0 3
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17625: LD_INT 39
17627: PPUSH
17628: LD_VAR 0 3
17632: PPUSH
17633: LD_INT 1
17635: PPUSH
17636: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17640: LD_INT 34
17642: PPUSH
17643: LD_VAR 0 3
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17655: LD_INT 42
17657: PPUSH
17658: LD_VAR 0 3
17662: PPUSH
17663: LD_INT 1
17665: PPUSH
17666: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17670: LD_INT 44
17672: PPUSH
17673: LD_VAR 0 3
17677: PPUSH
17678: LD_INT 1
17680: PPUSH
17681: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17685: LD_INT 41
17687: PPUSH
17688: LD_VAR 0 3
17692: PPUSH
17693: LD_INT 1
17695: PPUSH
17696: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
17700: LD_INT 13
17702: PPUSH
17703: LD_VAR 0 3
17707: PPUSH
17708: LD_INT 1
17710: PPUSH
17711: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17715: LD_INT 40
17717: PPUSH
17718: LD_VAR 0 3
17722: PPUSH
17723: LD_INT 1
17725: PPUSH
17726: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17730: LD_INT 43
17732: PPUSH
17733: LD_VAR 0 3
17737: PPUSH
17738: LD_INT 1
17740: PPUSH
17741: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17745: LD_INT 70
17747: PPUSH
17748: LD_VAR 0 3
17752: PPUSH
17753: LD_INT 1
17755: PPUSH
17756: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
17760: LD_INT 23
17762: PPUSH
17763: LD_VAR 0 3
17767: PPUSH
17768: LD_INT 1
17770: PPUSH
17771: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17775: LD_INT 51
17777: PPUSH
17778: LD_VAR 0 3
17782: PPUSH
17783: LD_INT 1
17785: PPUSH
17786: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17790: LD_INT 52
17792: PPUSH
17793: LD_VAR 0 3
17797: PPUSH
17798: LD_INT 1
17800: PPUSH
17801: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17805: LD_INT 6
17807: PPUSH
17808: LD_VAR 0 3
17812: PPUSH
17813: LD_INT 1
17815: PPUSH
17816: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17820: LD_INT 15
17822: PPUSH
17823: LD_VAR 0 3
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17835: LD_INT 7
17837: PPUSH
17838: LD_VAR 0 3
17842: PPUSH
17843: LD_INT 1
17845: PPUSH
17846: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17850: LD_INT 12
17852: PPUSH
17853: LD_VAR 0 3
17857: PPUSH
17858: LD_INT 1
17860: PPUSH
17861: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
17865: LD_INT 10
17867: PPUSH
17868: LD_VAR 0 3
17872: PPUSH
17873: LD_INT 1
17875: PPUSH
17876: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17880: LD_INT 17
17882: PPUSH
17883: LD_VAR 0 3
17887: PPUSH
17888: LD_INT 1
17890: PPUSH
17891: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17895: LD_INT 18
17897: PPUSH
17898: LD_VAR 0 3
17902: PPUSH
17903: LD_INT 1
17905: PPUSH
17906: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17910: LD_INT 60
17912: PPUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_INT 1
17920: PPUSH
17921: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
17925: LD_INT 61
17927: PPUSH
17928: LD_VAR 0 3
17932: PPUSH
17933: LD_INT 1
17935: PPUSH
17936: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17940: LD_INT 32
17942: PPUSH
17943: LD_VAR 0 3
17947: PPUSH
17948: LD_INT 1
17950: PPUSH
17951: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
17955: LD_INT 27
17957: PPUSH
17958: LD_VAR 0 3
17962: PPUSH
17963: LD_INT 1
17965: PPUSH
17966: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
17970: LD_INT 36
17972: PPUSH
17973: LD_VAR 0 3
17977: PPUSH
17978: LD_INT 1
17980: PPUSH
17981: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
17985: LD_INT 33
17987: PPUSH
17988: LD_VAR 0 3
17992: PPUSH
17993: LD_INT 1
17995: PPUSH
17996: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18000: LD_INT 9
18002: PPUSH
18003: LD_VAR 0 3
18007: PPUSH
18008: LD_INT 1
18010: PPUSH
18011: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
18015: LD_INT 38
18017: PPUSH
18018: LD_VAR 0 3
18022: PPUSH
18023: LD_INT 1
18025: PPUSH
18026: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18030: LD_INT 57
18032: PPUSH
18033: LD_VAR 0 3
18037: PPUSH
18038: LD_INT 1
18040: PPUSH
18041: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
18045: LD_INT 58
18047: PPUSH
18048: LD_VAR 0 3
18052: PPUSH
18053: LD_INT 1
18055: PPUSH
18056: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
18060: LD_INT 28
18062: PPUSH
18063: LD_VAR 0 3
18067: PPUSH
18068: LD_INT 1
18070: PPUSH
18071: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
18075: LD_INT 29
18077: PPUSH
18078: LD_VAR 0 3
18082: PPUSH
18083: LD_INT 1
18085: PPUSH
18086: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18090: LD_INT 30
18092: PPUSH
18093: LD_VAR 0 3
18097: PPUSH
18098: LD_INT 1
18100: PPUSH
18101: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18105: LD_INT 37
18107: PPUSH
18108: LD_VAR 0 3
18112: PPUSH
18113: LD_INT 1
18115: PPUSH
18116: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18120: LD_INT 63
18122: PPUSH
18123: LD_VAR 0 3
18127: PPUSH
18128: LD_INT 1
18130: PPUSH
18131: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
18135: LD_INT 64
18137: PPUSH
18138: LD_VAR 0 3
18142: PPUSH
18143: LD_INT 1
18145: PPUSH
18146: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18150: LD_INT 3
18152: PPUSH
18153: LD_VAR 0 3
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18165: LD_INT 4
18167: PPUSH
18168: LD_VAR 0 3
18172: PPUSH
18173: LD_INT 1
18175: PPUSH
18176: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18180: LD_INT 5
18182: PPUSH
18183: LD_VAR 0 3
18187: PPUSH
18188: LD_INT 1
18190: PPUSH
18191: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
18195: LD_INT 8
18197: PPUSH
18198: LD_VAR 0 3
18202: PPUSH
18203: LD_INT 1
18205: PPUSH
18206: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18210: LD_INT 66
18212: PPUSH
18213: LD_VAR 0 3
18217: PPUSH
18218: LD_INT 1
18220: PPUSH
18221: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
18225: LD_INT 67
18227: PPUSH
18228: LD_VAR 0 3
18232: PPUSH
18233: LD_INT 1
18235: PPUSH
18236: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18240: LD_INT 21
18242: PPUSH
18243: LD_VAR 0 3
18247: PPUSH
18248: LD_INT 1
18250: PPUSH
18251: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18255: LD_INT 22
18257: PPUSH
18258: LD_VAR 0 3
18262: PPUSH
18263: LD_INT 1
18265: PPUSH
18266: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18270: LD_INT 19
18272: PPUSH
18273: LD_VAR 0 3
18277: PPUSH
18278: LD_INT 1
18280: PPUSH
18281: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
18285: LD_INT 26
18287: PPUSH
18288: LD_VAR 0 3
18292: PPUSH
18293: LD_INT 1
18295: PPUSH
18296: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18300: LD_INT 54
18302: PPUSH
18303: LD_VAR 0 3
18307: PPUSH
18308: LD_INT 1
18310: PPUSH
18311: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18315: LD_INT 55
18317: PPUSH
18318: LD_VAR 0 3
18322: PPUSH
18323: LD_INT 1
18325: PPUSH
18326: CALL_OW 322
// for i = 0 to 39 do
18330: LD_ADDR_VAR 0 4
18334: PUSH
18335: DOUBLE
18336: LD_INT 0
18338: DEC
18339: ST_TO_ADDR
18340: LD_INT 39
18342: PUSH
18343: FOR_TO
18344: IFFALSE 18365
// SetRestrict ( i , side , true ) ;
18346: LD_VAR 0 4
18350: PPUSH
18351: LD_VAR 0 3
18355: PPUSH
18356: LD_INT 1
18358: PPUSH
18359: CALL_OW 324
18363: GO 18343
18365: POP
18366: POP
// end ; else
18367: GO 18444
18369: POP
// begin for i = 1 to 73 do
18370: LD_ADDR_VAR 0 4
18374: PUSH
18375: DOUBLE
18376: LD_INT 1
18378: DEC
18379: ST_TO_ADDR
18380: LD_INT 73
18382: PUSH
18383: FOR_TO
18384: IFFALSE 18405
// SetTech ( i , side , state_enabled ) ;
18386: LD_VAR 0 4
18390: PPUSH
18391: LD_VAR 0 3
18395: PPUSH
18396: LD_INT 1
18398: PPUSH
18399: CALL_OW 322
18403: GO 18383
18405: POP
18406: POP
// for i = 0 to 39 do
18407: LD_ADDR_VAR 0 4
18411: PUSH
18412: DOUBLE
18413: LD_INT 0
18415: DEC
18416: ST_TO_ADDR
18417: LD_INT 39
18419: PUSH
18420: FOR_TO
18421: IFFALSE 18442
// SetRestrict ( i , side , true ) ;
18423: LD_VAR 0 4
18427: PPUSH
18428: LD_VAR 0 3
18432: PPUSH
18433: LD_INT 1
18435: PPUSH
18436: CALL_OW 324
18440: GO 18420
18442: POP
18443: POP
// end ; end ; end ;
18444: GO 14449
18446: POP
18447: POP
// end ; end_of_file
18448: LD_VAR 0 2
18452: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
18453: LD_INT 0
18455: PPUSH
18456: PPUSH
18457: PPUSH
18458: PPUSH
18459: PPUSH
18460: PPUSH
18461: PPUSH
18462: PPUSH
18463: PPUSH
// for i := 1 to 8 do
18464: LD_ADDR_VAR 0 2
18468: PUSH
18469: DOUBLE
18470: LD_INT 1
18472: DEC
18473: ST_TO_ADDR
18474: LD_INT 8
18476: PUSH
18477: FOR_TO
18478: IFFALSE 18862
// begin if Side_Positions [ i ] then
18480: LD_EXP 37
18484: PUSH
18485: LD_VAR 0 2
18489: ARRAY
18490: IFFALSE 18860
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
18492: LD_ADDR_VAR 0 7
18496: PUSH
18497: LD_INT 22
18499: PUSH
18500: LD_VAR 0 2
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 21
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PPUSH
18523: CALL_OW 69
18527: PUSH
18528: LD_INT 0
18530: PLUS
18531: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18532: LD_ADDR_VAR 0 9
18536: PUSH
18537: LD_INT 22
18539: PUSH
18540: LD_VAR 0 2
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 2
18551: PUSH
18552: LD_INT 30
18554: PUSH
18555: LD_INT 0
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 30
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL_OW 69
18585: ST_TO_ADDR
// crates := 0 ;
18586: LD_ADDR_VAR 0 4
18590: PUSH
18591: LD_INT 0
18593: ST_TO_ADDR
// oil := 0 ;
18594: LD_ADDR_VAR 0 5
18598: PUSH
18599: LD_INT 0
18601: ST_TO_ADDR
// sib := 0 ;
18602: LD_ADDR_VAR 0 6
18606: PUSH
18607: LD_INT 0
18609: ST_TO_ADDR
// if bases then
18610: LD_VAR 0 9
18614: IFFALSE 18720
// begin for j in bases do
18616: LD_ADDR_VAR 0 3
18620: PUSH
18621: LD_VAR 0 9
18625: PUSH
18626: FOR_IN
18627: IFFALSE 18718
// begin base := GetBase ( j ) ;
18629: LD_ADDR_VAR 0 8
18633: PUSH
18634: LD_VAR 0 3
18638: PPUSH
18639: CALL_OW 274
18643: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
18644: LD_ADDR_VAR 0 4
18648: PUSH
18649: LD_VAR 0 4
18653: PUSH
18654: LD_VAR 0 8
18658: PPUSH
18659: LD_INT 1
18661: PPUSH
18662: CALL_OW 275
18666: PLUS
18667: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
18668: LD_ADDR_VAR 0 5
18672: PUSH
18673: LD_VAR 0 5
18677: PUSH
18678: LD_VAR 0 8
18682: PPUSH
18683: LD_INT 2
18685: PPUSH
18686: CALL_OW 275
18690: PLUS
18691: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
18692: LD_ADDR_VAR 0 6
18696: PUSH
18697: LD_VAR 0 6
18701: PUSH
18702: LD_VAR 0 8
18706: PPUSH
18707: LD_INT 3
18709: PPUSH
18710: CALL_OW 275
18714: PLUS
18715: ST_TO_ADDR
// end ;
18716: GO 18626
18718: POP
18719: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
18720: LD_STRING setSpecText(
18722: PUSH
18723: LD_VAR 0 2
18727: STR
18728: PUSH
18729: LD_STRING ,
18731: STR
18732: PUSH
18733: LD_INT 2
18735: STR
18736: PUSH
18737: LD_STRING ,
18739: STR
18740: PUSH
18741: LD_VAR 0 4
18745: STR
18746: PUSH
18747: LD_STRING )
18749: STR
18750: PPUSH
18751: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
18755: LD_STRING setSpecText(
18757: PUSH
18758: LD_VAR 0 2
18762: STR
18763: PUSH
18764: LD_STRING ,
18766: STR
18767: PUSH
18768: LD_INT 3
18770: STR
18771: PUSH
18772: LD_STRING ,
18774: STR
18775: PUSH
18776: LD_VAR 0 5
18780: STR
18781: PUSH
18782: LD_STRING )
18784: STR
18785: PPUSH
18786: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
18790: LD_STRING setSpecText(
18792: PUSH
18793: LD_VAR 0 2
18797: STR
18798: PUSH
18799: LD_STRING ,
18801: STR
18802: PUSH
18803: LD_INT 4
18805: STR
18806: PUSH
18807: LD_STRING ,
18809: STR
18810: PUSH
18811: LD_VAR 0 6
18815: STR
18816: PUSH
18817: LD_STRING )
18819: STR
18820: PPUSH
18821: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
18825: LD_STRING setSpecText(
18827: PUSH
18828: LD_VAR 0 2
18832: STR
18833: PUSH
18834: LD_STRING ,
18836: STR
18837: PUSH
18838: LD_INT 5
18840: STR
18841: PUSH
18842: LD_STRING ,
18844: STR
18845: PUSH
18846: LD_VAR 0 7
18850: STR
18851: PUSH
18852: LD_STRING )
18854: STR
18855: PPUSH
18856: CALL_OW 559
// end ; end ;
18860: GO 18477
18862: POP
18863: POP
// end ;
18864: LD_VAR 0 1
18868: RET
// every 0 0$1 do
18869: GO 18871
18871: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
18872: LD_STRING setSpecLogoNumber(
18874: PUSH
18875: LD_INT 2
18877: STR
18878: PUSH
18879: LD_STRING ,
18881: STR
18882: PUSH
18883: LD_INT 1
18885: STR
18886: PUSH
18887: LD_STRING )
18889: STR
18890: PPUSH
18891: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
18895: LD_STRING setSpecLogoNumber(
18897: PUSH
18898: LD_INT 3
18900: STR
18901: PUSH
18902: LD_STRING ,
18904: STR
18905: PUSH
18906: LD_INT 2
18908: STR
18909: PUSH
18910: LD_STRING )
18912: STR
18913: PPUSH
18914: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
18918: LD_STRING setSpecLogoNumber(
18920: PUSH
18921: LD_INT 4
18923: STR
18924: PUSH
18925: LD_STRING ,
18927: STR
18928: PUSH
18929: LD_INT 3
18931: STR
18932: PUSH
18933: LD_STRING )
18935: STR
18936: PPUSH
18937: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
18941: LD_STRING setSpecLogoNumber(
18943: PUSH
18944: LD_INT 5
18946: STR
18947: PUSH
18948: LD_STRING ,
18950: STR
18951: PUSH
18952: LD_INT 4
18954: STR
18955: PUSH
18956: LD_STRING )
18958: STR
18959: PPUSH
18960: CALL_OW 559
// end ;
18964: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
18965: LD_INT 2
18967: PUSH
18968: LD_INT 30
18970: PUSH
18971: LD_INT 0
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 30
18980: PUSH
18981: LD_INT 1
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: PPUSH
18993: CALL_OW 69
18997: IFFALSE 19007
18999: GO 19001
19001: DISABLE
// begin enable ;
19002: ENABLE
// UpdateSpectatorBar ;
19003: CALL 18453 0 0
// end ; end_of_file
19007: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
19008: LD_INT 0
19010: PPUSH
19011: PPUSH
19012: PPUSH
// BuildUpTime_Delay = 0 ;
19013: LD_ADDR_EXP 48
19017: PUSH
19018: LD_INT 0
19020: ST_TO_ADDR
// if not def_builduptime then
19021: LD_EXP 15
19025: NOT
19026: IFFALSE 19030
// exit ;
19028: GO 19213
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
19030: LD_ADDR_EXP 48
19034: PUSH
19035: LD_INT 8400
19037: PUSH
19038: LD_INT 2100
19040: PUSH
19041: LD_EXP 15
19045: MUL
19046: PLUS
19047: ST_TO_ADDR
// BuildUpTimeActive := true ;
19048: LD_ADDR_EXP 47
19052: PUSH
19053: LD_INT 1
19055: ST_TO_ADDR
// for i := 1 to 8 do
19056: LD_ADDR_VAR 0 2
19060: PUSH
19061: DOUBLE
19062: LD_INT 1
19064: DEC
19065: ST_TO_ADDR
19066: LD_INT 8
19068: PUSH
19069: FOR_TO
19070: IFFALSE 19211
// if Side_Positions [ i ] then
19072: LD_EXP 37
19076: PUSH
19077: LD_VAR 0 2
19081: ARRAY
19082: IFFALSE 19209
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
19084: LD_EXP 46
19088: PUSH
19089: LD_EXP 37
19093: PUSH
19094: LD_VAR 0 2
19098: ARRAY
19099: ARRAY
19100: PPUSH
19101: LD_INT 5
19103: PPUSH
19104: CALL_OW 424
// for j := 1 to 8 do
19108: LD_ADDR_VAR 0 3
19112: PUSH
19113: DOUBLE
19114: LD_INT 1
19116: DEC
19117: ST_TO_ADDR
19118: LD_INT 8
19120: PUSH
19121: FOR_TO
19122: IFFALSE 19207
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19124: LD_EXP 37
19128: PUSH
19129: LD_VAR 0 3
19133: ARRAY
19134: PUSH
19135: LD_EXP 34
19139: PUSH
19140: LD_VAR 0 2
19144: ARRAY
19145: PUSH
19146: LD_EXP 34
19150: PUSH
19151: LD_VAR 0 3
19155: ARRAY
19156: NONEQUAL
19157: PUSH
19158: LD_EXP 39
19162: NOT
19163: PUSH
19164: LD_VAR 0 2
19168: PUSH
19169: LD_VAR 0 3
19173: NONEQUAL
19174: AND
19175: OR
19176: AND
19177: IFFALSE 19205
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_EXP 46
19188: PUSH
19189: LD_EXP 37
19193: PUSH
19194: LD_VAR 0 2
19198: ARRAY
19199: ARRAY
19200: PPUSH
19201: CALL_OW 333
19205: GO 19121
19207: POP
19208: POP
// end ;
19209: GO 19069
19211: POP
19212: POP
// end ;
19213: LD_VAR 0 1
19217: RET
// export function EndBuildUp ; var i , j ; begin
19218: LD_INT 0
19220: PPUSH
19221: PPUSH
19222: PPUSH
// BuildUpTimeActive := false ;
19223: LD_ADDR_EXP 47
19227: PUSH
19228: LD_INT 0
19230: ST_TO_ADDR
// for i := 1 to 8 do
19231: LD_ADDR_VAR 0 2
19235: PUSH
19236: DOUBLE
19237: LD_INT 1
19239: DEC
19240: ST_TO_ADDR
19241: LD_INT 8
19243: PUSH
19244: FOR_TO
19245: IFFALSE 19386
// if Side_Positions [ i ] then
19247: LD_EXP 37
19251: PUSH
19252: LD_VAR 0 2
19256: ARRAY
19257: IFFALSE 19384
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
19259: LD_EXP 46
19263: PUSH
19264: LD_EXP 37
19268: PUSH
19269: LD_VAR 0 2
19273: ARRAY
19274: ARRAY
19275: PPUSH
19276: LD_INT 0
19278: PPUSH
19279: CALL_OW 424
// for j := 1 to 8 do
19283: LD_ADDR_VAR 0 3
19287: PUSH
19288: DOUBLE
19289: LD_INT 1
19291: DEC
19292: ST_TO_ADDR
19293: LD_INT 8
19295: PUSH
19296: FOR_TO
19297: IFFALSE 19382
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19299: LD_EXP 37
19303: PUSH
19304: LD_VAR 0 3
19308: ARRAY
19309: PUSH
19310: LD_EXP 34
19314: PUSH
19315: LD_VAR 0 2
19319: ARRAY
19320: PUSH
19321: LD_EXP 34
19325: PUSH
19326: LD_VAR 0 3
19330: ARRAY
19331: NONEQUAL
19332: PUSH
19333: LD_EXP 39
19337: NOT
19338: PUSH
19339: LD_VAR 0 2
19343: PUSH
19344: LD_VAR 0 3
19348: NONEQUAL
19349: AND
19350: OR
19351: AND
19352: IFFALSE 19380
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19354: LD_VAR 0 3
19358: PPUSH
19359: LD_EXP 46
19363: PUSH
19364: LD_EXP 37
19368: PUSH
19369: LD_VAR 0 2
19373: ARRAY
19374: ARRAY
19375: PPUSH
19376: CALL_OW 334
19380: GO 19296
19382: POP
19383: POP
// end ;
19384: GO 19244
19386: POP
19387: POP
// end ;
19388: LD_VAR 0 1
19392: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
19393: LD_EXP 47
19397: IFFALSE 19572
19399: GO 19401
19401: DISABLE
19402: LD_INT 0
19404: PPUSH
19405: PPUSH
// begin for i := 1 to 8 do
19406: LD_ADDR_VAR 0 1
19410: PUSH
19411: DOUBLE
19412: LD_INT 1
19414: DEC
19415: ST_TO_ADDR
19416: LD_INT 8
19418: PUSH
19419: FOR_TO
19420: IFFALSE 19569
// if Side_Positions [ i ] then
19422: LD_EXP 37
19426: PUSH
19427: LD_VAR 0 1
19431: ARRAY
19432: IFFALSE 19567
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
19434: LD_ADDR_VAR 0 2
19438: PUSH
19439: LD_EXP 46
19443: PUSH
19444: LD_EXP 37
19448: PUSH
19449: LD_VAR 0 1
19453: ARRAY
19454: ARRAY
19455: PPUSH
19456: LD_INT 2
19458: PUSH
19459: LD_INT 21
19461: PUSH
19462: LD_INT 1
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 21
19471: PUSH
19472: LD_INT 2
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: PUSH
19484: LD_INT 22
19486: PUSH
19487: LD_OWVAR 2
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PPUSH
19500: CALL_OW 70
19504: PUSH
19505: FOR_IN
19506: IFFALSE 19565
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
19508: LD_EXP 34
19512: PUSH
19513: LD_VAR 0 1
19517: ARRAY
19518: PUSH
19519: LD_EXP 34
19523: PUSH
19524: LD_OWVAR 2
19528: ARRAY
19529: NONEQUAL
19530: PUSH
19531: LD_EXP 39
19535: NOT
19536: PUSH
19537: LD_VAR 0 1
19541: PUSH
19542: LD_OWVAR 2
19546: NONEQUAL
19547: AND
19548: OR
19549: IFFALSE 19563
// ComMoveToArea ( un , BuildUpEscape ) ;
19551: LD_VAR 0 2
19555: PPUSH
19556: LD_INT 41
19558: PPUSH
19559: CALL_OW 113
19563: GO 19505
19565: POP
19566: POP
19567: GO 19419
19569: POP
19570: POP
// enable ;
19571: ENABLE
// end ;
19572: PPOPN 2
19574: END
// every 0 0$1 trigger def_builduptime do
19575: LD_EXP 15
19579: IFFALSE 19605
19581: GO 19583
19583: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
19584: LD_INT 8400
19586: PUSH
19587: LD_EXP 15
19591: PUSH
19592: LD_INT 2100
19594: MUL
19595: PLUS
19596: PPUSH
19597: CALL_OW 67
// EndBuildUp ;
19601: CALL 19218 0 0
// end ; end_of_file
19605: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
// enable ( 98 ) ;
19610: LD_INT 98
19612: ENABLE_MARKED
// GameEnded = false ;
19613: LD_ADDR_LOC 16
19617: PUSH
19618: LD_INT 0
19620: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
19621: LD_ADDR_LOC 15
19625: PUSH
19626: LD_INT 0
19628: PUSH
19629: LD_INT 0
19631: PUSH
19632: LD_INT 0
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: LD_INT 0
19640: PUSH
19641: LD_INT 0
19643: PUSH
19644: LD_INT 0
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: ST_TO_ADDR
// unfoged = false ;
19660: LD_ADDR_LOC 17
19664: PUSH
19665: LD_INT 0
19667: ST_TO_ADDR
// defeated_specs := [ ] ;
19668: LD_ADDR_LOC 18
19672: PUSH
19673: EMPTY
19674: ST_TO_ADDR
// for i = 1 to side_positions do
19675: LD_ADDR_VAR 0 2
19679: PUSH
19680: DOUBLE
19681: LD_INT 1
19683: DEC
19684: ST_TO_ADDR
19685: LD_EXP 37
19689: PUSH
19690: FOR_TO
19691: IFFALSE 19731
// if not side_positions [ i ] then
19693: LD_EXP 37
19697: PUSH
19698: LD_VAR 0 2
19702: ARRAY
19703: NOT
19704: IFFALSE 19729
// defeated = replace ( defeated , i , true ) ;
19706: LD_ADDR_LOC 15
19710: PUSH
19711: LD_LOC 15
19715: PPUSH
19716: LD_VAR 0 2
19720: PPUSH
19721: LD_INT 1
19723: PPUSH
19724: CALL_OW 1
19728: ST_TO_ADDR
19729: GO 19690
19731: POP
19732: POP
// end ;
19733: LD_VAR 0 1
19737: RET
// function CanWinLoose ; begin
19738: LD_INT 0
19740: PPUSH
// Result := true ;
19741: LD_ADDR_VAR 0 1
19745: PUSH
19746: LD_INT 1
19748: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
19749: CALL_OW 518
19753: PUSH
19754: CALL_OW 519
19758: PUSH
19759: LD_INT 0
19761: GREATER
19762: AND
19763: IFFALSE 19773
// Result := false ;
19765: LD_ADDR_VAR 0 1
19769: PUSH
19770: LD_INT 0
19772: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
19773: CALL_OW 531
19777: PUSH
19778: CALL_OW 519
19782: PUSH
19783: LD_INT 1
19785: GREATER
19786: AND
19787: IFFALSE 19797
// Result := false ;
19789: LD_ADDR_VAR 0 1
19793: PUSH
19794: LD_INT 0
19796: ST_TO_ADDR
// end ;
19797: LD_VAR 0 1
19801: RET
// export function HasPower ( i ) ; var k , h ; begin
19802: LD_INT 0
19804: PPUSH
19805: PPUSH
19806: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
19807: LD_VAR 0 1
19811: PPUSH
19812: CALL_OW 108
19816: NOT
19817: PUSH
19818: LD_EXP 36
19822: PUSH
19823: LD_VAR 0 1
19827: ARRAY
19828: NOT
19829: AND
19830: PUSH
19831: LD_OWVAR 4
19835: AND
19836: IFFALSE 19848
// begin result = false ;
19838: LD_ADDR_VAR 0 2
19842: PUSH
19843: LD_INT 0
19845: ST_TO_ADDR
// end else
19846: GO 20143
// case def_win_rules of 0 :
19848: LD_EXP 18
19852: PUSH
19853: LD_INT 0
19855: DOUBLE
19856: EQUAL
19857: IFTRUE 19861
19859: GO 20024
19861: POP
// if def_people_respawning then
19862: LD_EXP 19
19866: IFFALSE 19957
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
19868: LD_ADDR_VAR 0 2
19872: PUSH
19873: LD_INT 22
19875: PUSH
19876: LD_VAR 0 1
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 2
19887: PUSH
19888: LD_INT 21
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 33
19900: PUSH
19901: LD_INT 3
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 33
19910: PUSH
19911: LD_INT 5
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 30
19920: PUSH
19921: LD_INT 0
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 30
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PPUSH
19950: CALL_OW 69
19954: ST_TO_ADDR
19955: GO 20022
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
19957: LD_ADDR_VAR 0 2
19961: PUSH
19962: LD_INT 22
19964: PUSH
19965: LD_VAR 0 1
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 2
19976: PUSH
19977: LD_INT 21
19979: PUSH
19980: LD_INT 1
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: LD_INT 33
19989: PUSH
19990: LD_INT 3
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 33
19999: PUSH
20000: LD_INT 5
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PPUSH
20017: CALL_OW 69
20021: ST_TO_ADDR
20022: GO 20143
20024: LD_INT 1
20026: DOUBLE
20027: EQUAL
20028: IFTRUE 20032
20030: GO 20071
20032: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
20033: LD_ADDR_VAR 0 2
20037: PUSH
20038: LD_INT 22
20040: PUSH
20041: LD_VAR 0 1
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: LD_INT 21
20052: PUSH
20053: LD_INT 1
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PPUSH
20064: CALL_OW 69
20068: ST_TO_ADDR
20069: GO 20143
20071: LD_INT 2
20073: DOUBLE
20074: EQUAL
20075: IFTRUE 20079
20077: GO 20142
20079: POP
// begin h = false ;
20080: LD_ADDR_VAR 0 4
20084: PUSH
20085: LD_INT 0
20087: ST_TO_ADDR
// for k in heroes [ i ] do
20088: LD_ADDR_VAR 0 3
20092: PUSH
20093: LD_EXP 32
20097: PUSH
20098: LD_VAR 0 1
20102: ARRAY
20103: PUSH
20104: FOR_IN
20105: IFFALSE 20128
// if IsLive ( k ) then
20107: LD_VAR 0 3
20111: PPUSH
20112: CALL_OW 300
20116: IFFALSE 20126
// h = true ;
20118: LD_ADDR_VAR 0 4
20122: PUSH
20123: LD_INT 1
20125: ST_TO_ADDR
20126: GO 20104
20128: POP
20129: POP
// Result := h ;
20130: LD_ADDR_VAR 0 2
20134: PUSH
20135: LD_VAR 0 4
20139: ST_TO_ADDR
// end ; end ;
20140: GO 20143
20142: POP
// end ;
20143: LD_VAR 0 2
20147: RET
// function AlliedSides ( i , j ) ; begin
20148: LD_INT 0
20150: PPUSH
// Result := false ;
20151: LD_ADDR_VAR 0 3
20155: PUSH
20156: LD_INT 0
20158: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
20159: LD_VAR 0 1
20163: PPUSH
20164: LD_VAR 0 2
20168: PPUSH
20169: CALL_OW 81
20173: PUSH
20174: LD_INT 1
20176: EQUAL
20177: PUSH
20178: LD_VAR 0 2
20182: PPUSH
20183: LD_VAR 0 1
20187: PPUSH
20188: CALL_OW 81
20192: PUSH
20193: LD_INT 1
20195: EQUAL
20196: AND
20197: PUSH
20198: LD_VAR 0 1
20202: PPUSH
20203: CALL_OW 83
20207: AND
20208: PUSH
20209: LD_VAR 0 2
20213: PPUSH
20214: CALL_OW 83
20218: AND
20219: IFFALSE 20229
// Result := true ;
20221: LD_ADDR_VAR 0 3
20225: PUSH
20226: LD_INT 1
20228: ST_TO_ADDR
// end ;
20229: LD_VAR 0 3
20233: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
20234: CALL 19738 0 0
20238: PUSH
20239: LD_LOC 16
20243: NOT
20244: AND
20245: IFFALSE 20261
20247: GO 20249
20249: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
20250: LD_ADDR_EXP 33
20254: PUSH
20255: LD_STRING #Player-Ended
20257: PUSH
20258: EMPTY
20259: LIST
20260: ST_TO_ADDR
20261: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
20262: CALL 19738 0 0
20266: PUSH
20267: LD_LOC 16
20271: AND
20272: IFFALSE 20281
20274: GO 20276
20276: DISABLE
// YouLostInMultiplayer ;
20277: CALL_OW 107
20281: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
20282: CALL 19738 0 0
20286: NOT
20287: PUSH
20288: CALL_OW 531
20292: NOT
20293: AND
20294: IFFALSE 20310
20296: GO 20298
20298: DISABLE
// WaitServerStrings = [ #server-wait ] ;
20299: LD_ADDR_EXP 33
20303: PUSH
20304: LD_STRING #server-wait
20306: PUSH
20307: EMPTY
20308: LIST
20309: ST_TO_ADDR
20310: END
// every 100 trigger IAmSpec do
20311: CALL_OW 531
20315: IFFALSE 20331
20317: GO 20319
20319: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
20320: LD_ADDR_EXP 33
20324: PUSH
20325: LD_STRING #Player-IAmSpec
20327: PUSH
20328: EMPTY
20329: LIST
20330: ST_TO_ADDR
20331: END
// every 100 trigger GameEnded and IAmSpec do
20332: LD_LOC 16
20336: PUSH
20337: CALL_OW 531
20341: AND
20342: IFFALSE 20351
20344: GO 20346
20346: DISABLE
// YouLostInMultiplayer ;
20347: CALL_OW 107
20351: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
20352: CALL 19738 0 0
20356: PUSH
20357: LD_LOC 16
20361: NOT
20362: AND
20363: IFFALSE 20379
20365: GO 20367
20367: DISABLE
// WaitServerStrings = [ $player-win ] ;
20368: LD_ADDR_EXP 33
20372: PUSH
20373: LD_STRING $player-win
20375: PUSH
20376: EMPTY
20377: LIST
20378: ST_TO_ADDR
20379: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
20380: CALL 19738 0 0
20384: PUSH
20385: LD_LOC 16
20389: AND
20390: IFFALSE 20414
20392: GO 20394
20394: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
20395: LD_EXP 38
20399: PUSH
20400: LD_OWVAR 7
20404: ARRAY
20405: PPUSH
20406: CALL 14087 0 1
// YouWinInMultiplayer ;
20410: CALL_OW 106
// end ;
20414: END
// every 100 trigger isEditor marked 401 do
20415: LD_OWVAR 84
20419: IFFALSE 20435
20421: GO 20423
20423: DISABLE
// Debug_Strings = [ You won ] ;
20424: LD_ADDR_OWVAR 48
20428: PUSH
20429: LD_STRING You won
20431: PUSH
20432: EMPTY
20433: LIST
20434: ST_TO_ADDR
20435: END
// every 100 trigger isEditor marked 400 do
20436: LD_OWVAR 84
20440: IFFALSE 20456
20442: GO 20444
20444: DISABLE
// Debug_Strings = [ You loss ] ;
20445: LD_ADDR_OWVAR 48
20449: PUSH
20450: LD_STRING You loss
20452: PUSH
20453: EMPTY
20454: LIST
20455: ST_TO_ADDR
20456: END
// every 100 marked 98 do var i , un ;
20457: GO 20459
20459: DISABLE
20460: LD_INT 0
20462: PPUSH
20463: PPUSH
// begin for i = 1 to side_positions do
20464: LD_ADDR_VAR 0 1
20468: PUSH
20469: DOUBLE
20470: LD_INT 1
20472: DEC
20473: ST_TO_ADDR
20474: LD_EXP 37
20478: PUSH
20479: FOR_TO
20480: IFFALSE 20567
// begin if side_positions [ i ] then
20482: LD_EXP 37
20486: PUSH
20487: LD_VAR 0 1
20491: ARRAY
20492: IFFALSE 20565
// if not HasPower ( i ) and not defeated [ i ] then
20494: LD_VAR 0 1
20498: PPUSH
20499: CALL 19802 0 1
20503: NOT
20504: PUSH
20505: LD_LOC 15
20509: PUSH
20510: LD_VAR 0 1
20514: ARRAY
20515: NOT
20516: AND
20517: IFFALSE 20565
// begin defeated = replace ( defeated , i , true ) ;
20519: LD_ADDR_LOC 15
20523: PUSH
20524: LD_LOC 15
20528: PPUSH
20529: LD_VAR 0 1
20533: PPUSH
20534: LD_INT 1
20536: PPUSH
20537: CALL_OW 1
20541: ST_TO_ADDR
// if i = mp_player_side then
20542: LD_VAR 0 1
20546: PUSH
20547: LD_OWVAR 7
20551: EQUAL
20552: IFFALSE 20565
// begin Multiplayer_Loose_Message ;
20554: CALL_OW 521
// SetPlayerSpectator ( ) ;
20558: CALL_OW 572
// enable ( 400 ) ;
20562: LD_INT 400
20564: ENABLE_MARKED
// end ; end ; end ;
20565: GO 20479
20567: POP
20568: POP
// DidGameEnd ;
20569: CALL 20584 0 0
// if not GameEnded then
20573: LD_LOC 16
20577: NOT
20578: IFFALSE 20581
// enable ;
20580: ENABLE
// end ;
20581: PPOPN 2
20583: END
// function DidGameEnd ; var i , k , enemy ; begin
20584: LD_INT 0
20586: PPUSH
20587: PPUSH
20588: PPUSH
20589: PPUSH
// enemy = [ ] ;
20590: LD_ADDR_VAR 0 4
20594: PUSH
20595: EMPTY
20596: ST_TO_ADDR
// for i = 1 to side_positions do
20597: LD_ADDR_VAR 0 2
20601: PUSH
20602: DOUBLE
20603: LD_INT 1
20605: DEC
20606: ST_TO_ADDR
20607: LD_EXP 37
20611: PUSH
20612: FOR_TO
20613: IFFALSE 20707
// if not defeated [ i ] then
20615: LD_LOC 15
20619: PUSH
20620: LD_VAR 0 2
20624: ARRAY
20625: NOT
20626: IFFALSE 20705
// for k = 1 to side_positions do
20628: LD_ADDR_VAR 0 3
20632: PUSH
20633: DOUBLE
20634: LD_INT 1
20636: DEC
20637: ST_TO_ADDR
20638: LD_EXP 37
20642: PUSH
20643: FOR_TO
20644: IFFALSE 20703
// if not defeated [ k ] then
20646: LD_LOC 15
20650: PUSH
20651: LD_VAR 0 3
20655: ARRAY
20656: NOT
20657: IFFALSE 20701
// if not AlliedSides ( i , k ) then
20659: LD_VAR 0 2
20663: PPUSH
20664: LD_VAR 0 3
20668: PPUSH
20669: CALL 20148 0 2
20673: NOT
20674: IFFALSE 20701
// enemy = enemy ^ [ i , k ] ;
20676: LD_ADDR_VAR 0 4
20680: PUSH
20681: LD_VAR 0 4
20685: PUSH
20686: LD_VAR 0 2
20690: PUSH
20691: LD_VAR 0 3
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: ADD
20700: ST_TO_ADDR
20701: GO 20643
20703: POP
20704: POP
20705: GO 20612
20707: POP
20708: POP
// if not enemy then
20709: LD_VAR 0 4
20713: NOT
20714: IFFALSE 20740
// begin GameEnded = true ;
20716: LD_ADDR_LOC 16
20720: PUSH
20721: LD_INT 1
20723: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
20724: LD_LOC 15
20728: PUSH
20729: LD_OWVAR 7
20733: ARRAY
20734: NOT
20735: IFFALSE 20740
// enable ( 401 ) ;
20737: LD_INT 401
20739: ENABLE_MARKED
// end ; end ;
20740: LD_VAR 0 1
20744: RET
// function unfog ; var k , friends ; begin
20745: LD_INT 0
20747: PPUSH
20748: PPUSH
20749: PPUSH
// for k = 1 to side_positions do
20750: LD_ADDR_VAR 0 2
20754: PUSH
20755: DOUBLE
20756: LD_INT 1
20758: DEC
20759: ST_TO_ADDR
20760: LD_EXP 37
20764: PUSH
20765: FOR_TO
20766: IFFALSE 20822
// if not defeated [ k ] then
20768: LD_LOC 15
20772: PUSH
20773: LD_VAR 0 2
20777: ARRAY
20778: NOT
20779: IFFALSE 20820
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
20781: LD_OWVAR 7
20785: PPUSH
20786: LD_VAR 0 2
20790: PPUSH
20791: CALL_OW 81
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: EMPTY
20800: LIST
20801: IN
20802: IFFALSE 20820
// friends = friends ^ k ;
20804: LD_ADDR_VAR 0 3
20808: PUSH
20809: LD_VAR 0 3
20813: PUSH
20814: LD_VAR 0 2
20818: ADD
20819: ST_TO_ADDR
20820: GO 20765
20822: POP
20823: POP
// if not friends then
20824: LD_VAR 0 3
20828: NOT
20829: IFFALSE 20843
// begin SetPlayerSpectator ( ) ;
20831: CALL_OW 572
// unfoged = true ;
20835: LD_ADDR_LOC 17
20839: PUSH
20840: LD_INT 1
20842: ST_TO_ADDR
// end ; end ;
20843: LD_VAR 0 1
20847: RET
// export function MakeGameEnd ; begin
20848: LD_INT 0
20850: PPUSH
// SetPlayerSpectator ( ) ;
20851: CALL_OW 572
// unfoged = true ;
20855: LD_ADDR_LOC 17
20859: PUSH
20860: LD_INT 1
20862: ST_TO_ADDR
// wait ( 0 0$5 ) ;
20863: LD_INT 175
20865: PPUSH
20866: CALL_OW 67
// GameEnded = true ;
20870: LD_ADDR_LOC 16
20874: PUSH
20875: LD_INT 1
20877: ST_TO_ADDR
// end ;
20878: LD_VAR 0 1
20882: RET
// export function GetGameEnded ; begin
20883: LD_INT 0
20885: PPUSH
// result = GameEnded ;
20886: LD_ADDR_VAR 0 1
20890: PUSH
20891: LD_LOC 16
20895: ST_TO_ADDR
// end ;
20896: LD_VAR 0 1
20900: RET
