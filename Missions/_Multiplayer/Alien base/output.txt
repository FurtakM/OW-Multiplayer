// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_siberit , respawning_time_min , respawning_time_max , buildUpTime_Delay , amount_of_apemen , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 42
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 19
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 17
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 20
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 22
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 18
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 372
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 3 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 3
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 167: LD_ADDR_EXP 19
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 6
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 206: LD_ADDR_EXP 17
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 6
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 0 , 0 , 3 ] ;
 245: LD_ADDR_EXP 20
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 22
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 323: LD_ADDR_EXP 18
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// end ; for i := 1 to 8 do
 372: LD_ADDR_VAR 0 2
 376: PUSH
 377: DOUBLE
 378: LD_INT 1
 380: DEC
 381: ST_TO_ADDR
 382: LD_INT 8
 384: PUSH
 385: FOR_TO
 386: IFFALSE 473
// if Multiplayer_GetPlayerIsSpec ( i ) then
 388: LD_VAR 0 2
 392: PPUSH
 393: CALL_OW 530
 397: IFFALSE 471
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 399: LD_ADDR_EXP 19
 403: PUSH
 404: LD_EXP 19
 408: PPUSH
 409: LD_VAR 0 2
 413: PPUSH
 414: LD_INT 0
 416: PPUSH
 417: CALL_OW 1
 421: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 422: LD_ADDR_EXP 18
 426: PUSH
 427: LD_EXP 18
 431: PPUSH
 432: LD_EXP 17
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: PPUSH
 443: LD_EXP 18
 447: PUSH
 448: LD_EXP 17
 452: PUSH
 453: LD_VAR 0 2
 457: ARRAY
 458: ARRAY
 459: PUSH
 460: LD_VAR 0 2
 464: DIFF
 465: PPUSH
 466: CALL_OW 1
 470: ST_TO_ADDR
// end ;
 471: GO 385
 473: POP
 474: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 475: LD_ADDR_EXP 23
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 0
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: LD_INT 0
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: ST_TO_ADDR
// for i := 1 to 8 do
 506: LD_ADDR_VAR 0 2
 510: PUSH
 511: DOUBLE
 512: LD_INT 1
 514: DEC
 515: ST_TO_ADDR
 516: LD_INT 8
 518: PUSH
 519: FOR_TO
 520: IFFALSE 567
// if Side_Positions [ i ] then
 522: LD_EXP 19
 526: PUSH
 527: LD_VAR 0 2
 531: ARRAY
 532: IFFALSE 565
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 534: LD_ADDR_EXP 23
 538: PUSH
 539: LD_EXP 23
 543: PPUSH
 544: LD_EXP 19
 548: PUSH
 549: LD_VAR 0 2
 553: ARRAY
 554: PPUSH
 555: LD_VAR 0 2
 559: PPUSH
 560: CALL_OW 1
 564: ST_TO_ADDR
 565: GO 519
 567: POP
 568: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 569: LD_ADDR_EXP 21
 573: PUSH
 574: LD_EXP 17
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: EMPTY
 583: LIST
 584: DIFF
 585: PUSH
 586: LD_INT 1
 588: GREATER
 589: ST_TO_ADDR
// if Multiplayer then
 590: LD_OWVAR 4
 594: IFFALSE 840
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 596: LD_ADDR_EXP 44
 600: PUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 426
 608: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 609: LD_ADDR_EXP 45
 613: PUSH
 614: LD_INT 1
 616: PPUSH
 617: CALL_OW 426
 621: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 622: LD_ADDR_EXP 46
 626: PUSH
 627: LD_INT 2
 629: PPUSH
 630: CALL_OW 426
 634: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 635: LD_ADDR_EXP 47
 639: PUSH
 640: LD_INT 3
 642: PPUSH
 643: CALL_OW 426
 647: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 648: LD_ADDR_EXP 48
 652: PUSH
 653: LD_INT 4
 655: PPUSH
 656: CALL_OW 426
 660: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 661: LD_ADDR_EXP 49
 665: PUSH
 666: LD_INT 5
 668: PPUSH
 669: CALL_OW 426
 673: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 674: LD_ADDR_EXP 50
 678: PUSH
 679: LD_INT 6
 681: PPUSH
 682: CALL_OW 426
 686: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 687: LD_ADDR_EXP 51
 691: PUSH
 692: LD_INT 10
 694: PPUSH
 695: CALL_OW 426
 699: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 700: LD_ADDR_EXP 52
 704: PUSH
 705: LD_INT 11
 707: PPUSH
 708: CALL_OW 426
 712: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 713: LD_ADDR_EXP 53
 717: PUSH
 718: LD_INT 12
 720: PPUSH
 721: CALL_OW 426
 725: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 726: LD_ADDR_EXP 54
 730: PUSH
 731: LD_INT 13
 733: PPUSH
 734: CALL_OW 426
 738: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 739: LD_ADDR_EXP 55
 743: PUSH
 744: LD_INT 14
 746: PPUSH
 747: CALL_OW 426
 751: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 752: LD_ADDR_EXP 1
 756: PUSH
 757: LD_INT 15
 759: PPUSH
 760: CALL_OW 426
 764: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 765: LD_ADDR_EXP 2
 769: PUSH
 770: LD_INT 16
 772: PPUSH
 773: CALL_OW 426
 777: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 778: LD_ADDR_EXP 56
 782: PUSH
 783: LD_INT 17
 785: PPUSH
 786: CALL_OW 426
 790: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 791: LD_ADDR_EXP 57
 795: PUSH
 796: LD_INT 20
 798: PPUSH
 799: CALL_OW 426
 803: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 804: LD_ADDR_EXP 43
 808: PUSH
 809: LD_INT 21
 811: PPUSH
 812: CALL_OW 426
 816: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_INT 22
 824: PPUSH
 825: CALL_OW 426
 829: ST_TO_ADDR
// def_win_rules = 0 ;
 830: LD_ADDR_EXP 32
 834: PUSH
 835: LD_INT 0
 837: ST_TO_ADDR
// end else
 838: GO 996
// begin Randomize ;
 840: CALL_OW 10
// def_base_level := 2 ;
 844: LD_ADDR_EXP 44
 848: PUSH
 849: LD_INT 2
 851: ST_TO_ADDR
// def_amount_of_people := 0 ;
 852: LD_ADDR_EXP 45
 856: PUSH
 857: LD_INT 0
 859: ST_TO_ADDR
// def_skill_level := 1 ;
 860: LD_ADDR_EXP 46
 864: PUSH
 865: LD_INT 1
 867: ST_TO_ADDR
// def_starting_resources := 2 ;
 868: LD_ADDR_EXP 47
 872: PUSH
 873: LD_INT 2
 875: ST_TO_ADDR
// def_shipments_density := 1 ;
 876: LD_ADDR_EXP 48
 880: PUSH
 881: LD_INT 1
 883: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 884: LD_ADDR_EXP 49
 888: PUSH
 889: LD_INT 0
 891: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 892: LD_ADDR_EXP 50
 896: PUSH
 897: LD_INT 1
 899: ST_TO_ADDR
// def_shared_vision := 1 ;
 900: LD_ADDR_EXP 51
 904: PUSH
 905: LD_INT 1
 907: ST_TO_ADDR
// def_morale_flags := 1 ;
 908: LD_ADDR_EXP 52
 912: PUSH
 913: LD_INT 1
 915: ST_TO_ADDR
// def_siberite_detection := 1 ;
 916: LD_ADDR_EXP 53
 920: PUSH
 921: LD_INT 1
 923: ST_TO_ADDR
// def_people_respawning := 2 ;
 924: LD_ADDR_EXP 54
 928: PUSH
 929: LD_INT 2
 931: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 932: LD_ADDR_EXP 55
 936: PUSH
 937: LD_INT 3
 939: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 940: LD_ADDR_EXP 1
 944: PUSH
 945: LD_INT 0
 947: ST_TO_ADDR
// def_public_score := 0 ;
 948: LD_ADDR_EXP 2
 952: PUSH
 953: LD_INT 0
 955: ST_TO_ADDR
// def_siberite_bomb := 4 ;
 956: LD_ADDR_EXP 56
 960: PUSH
 961: LD_INT 4
 963: ST_TO_ADDR
// def_builduptime := 0 ;
 964: LD_ADDR_EXP 57
 968: PUSH
 969: LD_INT 0
 971: ST_TO_ADDR
// def_game_rules := 0 ;
 972: LD_ADDR_EXP 43
 976: PUSH
 977: LD_INT 0
 979: ST_TO_ADDR
// tech_level = 4 ;
 980: LD_ADDR_VAR 0 3
 984: PUSH
 985: LD_INT 4
 987: ST_TO_ADDR
// def_win_rules = 0 ;
 988: LD_ADDR_EXP 32
 992: PUSH
 993: LD_INT 0
 995: ST_TO_ADDR
// end ; InitGameRules ;
 996: CALL 10807 0 0
// if def_game_rules = 0 then
1000: LD_EXP 43
1004: PUSH
1005: LD_INT 0
1007: EQUAL
1008: IFFALSE 1059
// begin if isSGUI then
1010: LD_OWVAR 83
1014: IFFALSE 1022
// setMpTechs ( ) else
1016: CALL 15555 0 0
1020: GO 1059
// begin if Game_Type = 3 then
1022: LD_EXP 42
1026: PUSH
1027: LD_INT 3
1029: EQUAL
1030: IFFALSE 1046
// tech_level = tech_level + 3 ;
1032: LD_ADDR_VAR 0 3
1036: PUSH
1037: LD_VAR 0 3
1041: PUSH
1042: LD_INT 3
1044: PLUS
1045: ST_TO_ADDR
// SetMpTechLevel ( tech_level + 1 ) ;
1046: LD_VAR 0 3
1050: PUSH
1051: LD_INT 1
1053: PLUS
1054: PPUSH
1055: CALL 15702 0 1
// end ; end ; if ( Game_Type = 5 ) then
1059: LD_EXP 42
1063: PUSH
1064: LD_INT 5
1066: EQUAL
1067: IFFALSE 1096
// begin def_base_level := 1 ;
1069: LD_ADDR_EXP 44
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
1077: LD_ADDR_EXP 49
1081: PUSH
1082: LD_INT 0
1084: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
1085: LD_ADDR_EXP 50
1089: PUSH
1090: LD_INT 0
1092: ST_TO_ADDR
// disable ( 10 ) ;
1093: LD_INT 10
1095: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 0
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_EXP 44
1119: PUSH
1120: LD_INT 1
1122: PLUS
1123: ARRAY
1124: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
1125: LD_ADDR_EXP 4
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 2
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: LD_EXP 44
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: ARRAY
1153: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1154: LD_ADDR_EXP 5
1158: PUSH
1159: LD_EXP 45
1163: PUSH
1164: LD_INT 4
1166: PLUS
1167: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1168: LD_ADDR_EXP 9
1172: PUSH
1173: LD_INT 150
1175: PUSH
1176: LD_EXP 48
1180: PUSH
1181: LD_INT 1
1183: PLUS
1184: MINUS
1185: ST_TO_ADDR
// if def_people_respawning = 0 then
1186: LD_EXP 54
1190: PUSH
1191: LD_INT 0
1193: EQUAL
1194: IFFALSE 1214
// begin respawning_time_min = 0 ;
1196: LD_ADDR_EXP 12
1200: PUSH
1201: LD_INT 0
1203: ST_TO_ADDR
// respawning_time_max = 0 ;
1204: LD_ADDR_EXP 13
1208: PUSH
1209: LD_INT 0
1211: ST_TO_ADDR
// end else
1212: GO 1258
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1214: LD_ADDR_EXP 12
1218: PUSH
1219: LD_INT 10500
1221: PUSH
1222: LD_INT 5
1224: DIVREAL
1225: PUSH
1226: LD_INT 6
1228: PUSH
1229: LD_EXP 54
1233: MINUS
1234: MUL
1235: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1236: LD_ADDR_EXP 13
1240: PUSH
1241: LD_INT 31500
1243: PUSH
1244: LD_INT 5
1246: DIVREAL
1247: PUSH
1248: LD_INT 6
1250: PUSH
1251: LD_EXP 54
1255: MINUS
1256: MUL
1257: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1258: LD_EXP 55
1262: NOT
1263: IFFALSE 1275
// amount_of_apemen := 0 else
1265: LD_ADDR_EXP 15
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
1273: GO 1285
// amount_of_apemen := def_amount_of_apemen ;
1275: LD_ADDR_EXP 15
1279: PUSH
1280: LD_EXP 55
1284: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1285: LD_EXP 56
1289: PUSH
1290: LD_INT 0
1292: EQUAL
1293: IFFALSE 1305
// siberite_bomb_Delay = 0 else
1295: LD_ADDR_EXP 16
1299: PUSH
1300: LD_INT 0
1302: ST_TO_ADDR
1303: GO 1327
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1305: LD_ADDR_EXP 16
1309: PUSH
1310: LD_EXP 56
1314: PUSH
1315: LD_INT 1
1317: MINUS
1318: PUSH
1319: LD_INT 21000
1321: MUL
1322: PUSH
1323: LD_INT 1
1325: PLUS
1326: ST_TO_ADDR
// if def_builduptime = 0 then
1327: LD_EXP 57
1331: PUSH
1332: LD_INT 0
1334: EQUAL
1335: IFFALSE 1347
// buildUpTime_Delay = 0 else
1337: LD_ADDR_EXP 14
1341: PUSH
1342: LD_INT 0
1344: ST_TO_ADDR
1345: GO 1365
// buildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
1347: LD_ADDR_EXP 14
1351: PUSH
1352: LD_INT 8400
1354: PUSH
1355: LD_INT 2100
1357: PUSH
1358: LD_EXP 57
1362: MUL
1363: PLUS
1364: ST_TO_ADDR
// amount_of_siberit := [ 30 , 60 , 90 , 120 , 150 , 180 , 210 , 240 , 270 , 300 , 400 , 500 , 600 , 700 , 800 , 900 , 1000 , 1250 , 1500 , 1750 , 2000 , 2250 , 2500 , 2750 , 3000 , 3500 , 4000 , 4500 , 5000 , 6000 , 7000 , 8000 , 9000 , 10000 ] [ def_amount_of_siberit + 1 ] ;
1365: LD_ADDR_EXP 11
1369: PUSH
1370: LD_INT 30
1372: PUSH
1373: LD_INT 60
1375: PUSH
1376: LD_INT 90
1378: PUSH
1379: LD_INT 120
1381: PUSH
1382: LD_INT 150
1384: PUSH
1385: LD_INT 180
1387: PUSH
1388: LD_INT 210
1390: PUSH
1391: LD_INT 240
1393: PUSH
1394: LD_INT 270
1396: PUSH
1397: LD_INT 300
1399: PUSH
1400: LD_INT 400
1402: PUSH
1403: LD_INT 500
1405: PUSH
1406: LD_INT 600
1408: PUSH
1409: LD_INT 700
1411: PUSH
1412: LD_INT 800
1414: PUSH
1415: LD_INT 900
1417: PUSH
1418: LD_INT 1000
1420: PUSH
1421: LD_INT 1250
1423: PUSH
1424: LD_INT 1500
1426: PUSH
1427: LD_INT 1750
1429: PUSH
1430: LD_INT 2000
1432: PUSH
1433: LD_INT 2250
1435: PUSH
1436: LD_INT 2500
1438: PUSH
1439: LD_INT 2750
1441: PUSH
1442: LD_INT 3000
1444: PUSH
1445: LD_INT 3500
1447: PUSH
1448: LD_INT 4000
1450: PUSH
1451: LD_INT 4500
1453: PUSH
1454: LD_INT 5000
1456: PUSH
1457: LD_INT 6000
1459: PUSH
1460: LD_INT 7000
1462: PUSH
1463: LD_INT 8000
1465: PUSH
1466: LD_INT 9000
1468: PUSH
1469: LD_INT 10000
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: PUSH
1508: LD_EXP 1
1512: PUSH
1513: LD_INT 1
1515: PLUS
1516: ARRAY
1517: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1518: LD_ADDR_EXP 6
1522: PUSH
1523: LD_INT 2
1525: PUSH
1526: LD_INT 3
1528: PUSH
1529: LD_INT 4
1531: PUSH
1532: LD_INT 5
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: PUSH
1541: LD_EXP 46
1545: PUSH
1546: LD_INT 1
1548: PLUS
1549: ARRAY
1550: ST_TO_ADDR
// if ( def_game_rules = 4 ) then
1551: LD_EXP 43
1555: PUSH
1556: LD_INT 4
1558: EQUAL
1559: IFFALSE 1582
// begin starting_resources := [ 10000 , 5000 , 1000 ] ;
1561: LD_ADDR_EXP 8
1565: PUSH
1566: LD_INT 10000
1568: PUSH
1569: LD_INT 5000
1571: PUSH
1572: LD_INT 1000
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: LIST
1579: ST_TO_ADDR
// end else
1580: GO 1854
// if ( Game_Type = 5 ) then
1582: LD_EXP 42
1586: PUSH
1587: LD_INT 5
1589: EQUAL
1590: IFFALSE 1708
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1592: LD_ADDR_EXP 8
1596: PUSH
1597: LD_INT 1000
1599: PUSH
1600: LD_INT 100
1602: PUSH
1603: LD_INT 100
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 2000
1613: PUSH
1614: LD_INT 200
1616: PUSH
1617: LD_INT 200
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: LIST
1624: PUSH
1625: LD_INT 5000
1627: PUSH
1628: LD_INT 500
1630: PUSH
1631: LD_INT 500
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 10000
1641: PUSH
1642: LD_INT 1000
1644: PUSH
1645: LD_INT 1000
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: LIST
1652: PUSH
1653: LD_INT 25000
1655: PUSH
1656: LD_INT 2500
1658: PUSH
1659: LD_INT 2500
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 50000
1669: PUSH
1670: LD_INT 5000
1672: PUSH
1673: LD_INT 5000
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: PUSH
1689: LD_EXP 47
1693: PUSH
1694: LD_INT 1
1696: PLUS
1697: ARRAY
1698: ST_TO_ADDR
// starting_crates := [ ] ;
1699: LD_ADDR_EXP 7
1703: PUSH
1704: EMPTY
1705: ST_TO_ADDR
// end else
1706: GO 1854
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1708: LD_ADDR_EXP 8
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 0
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 30
1729: PUSH
1730: LD_INT 0
1732: PUSH
1733: LD_INT 0
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 50
1743: PUSH
1744: LD_INT 20
1746: PUSH
1747: LD_INT 0
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: PUSH
1755: LD_INT 80
1757: PUSH
1758: LD_INT 40
1760: PUSH
1761: LD_INT 20
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: LD_EXP 47
1779: PUSH
1780: LD_INT 1
1782: PLUS
1783: ARRAY
1784: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1785: LD_ADDR_EXP 7
1789: PUSH
1790: LD_INT 10
1792: PUSH
1793: EMPTY
1794: LIST
1795: PUSH
1796: LD_INT 7
1798: PUSH
1799: LD_INT 14
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 6
1808: PUSH
1809: LD_INT 12
1811: PUSH
1812: LD_INT 18
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_INT 5
1822: PUSH
1823: LD_INT 10
1825: PUSH
1826: LD_INT 15
1828: PUSH
1829: LD_INT 20
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_EXP 47
1848: PUSH
1849: LD_INT 1
1851: PLUS
1852: ARRAY
1853: ST_TO_ADDR
// end ; morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1854: LD_ADDR_EXP 10
1858: PUSH
1859: LD_INT 1
1861: NEG
1862: PUSH
1863: LD_INT 350
1865: PUSH
1866: LD_INT 700
1868: PUSH
1869: LD_INT 1400
1871: PUSH
1872: LD_INT 0
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PUSH
1882: LD_EXP 52
1886: PUSH
1887: LD_INT 1
1889: PLUS
1890: ARRAY
1891: ST_TO_ADDR
// battle_flags_id := [ ] ;
1892: LD_ADDR_EXP 31
1896: PUSH
1897: EMPTY
1898: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1899: LD_ADDR_EXP 41
1903: PUSH
1904: LD_INT 8
1906: PUSH
1907: LD_INT 9
1909: PUSH
1910: LD_INT 10
1912: PUSH
1913: LD_INT 11
1915: PUSH
1916: LD_INT 12
1918: PUSH
1919: LD_INT 13
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// end ;
1930: LD_VAR 0 1
1934: RET
// function init_map ; var i , j ; begin
1935: LD_INT 0
1937: PPUSH
1938: PPUSH
1939: PPUSH
// normal_oil_deposits_locations := [ [ 28 , 22 ] , [ 69 , 3 ] , [ 138 , 27 ] , [ 180 , 104 ] , [ 138 , 137 ] , [ 76 , 115 ] ] ;
1940: LD_ADDR_EXP 27
1944: PUSH
1945: LD_INT 28
1947: PUSH
1948: LD_INT 22
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 69
1957: PUSH
1958: LD_INT 3
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 138
1967: PUSH
1968: LD_INT 27
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 180
1977: PUSH
1978: LD_INT 104
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 138
1987: PUSH
1988: LD_INT 137
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: LD_INT 76
1997: PUSH
1998: LD_INT 115
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 31 , 38 ] , [ 34 , 21 ] ] , [ [ 58 , 4 ] , [ 82 , 4 ] ] , [ [ 122 , 18 ] , [ 152 , 43 ] ] , [ [ 174 , 90 ] , [ 180 , 120 ] ] , [ [ 152 , 136 ] , [ 130 , 136 ] ] , [ [ 89 , 116 ] , [ 59 , 89 ] ] ] ;
2013: LD_ADDR_EXP 28
2017: PUSH
2018: LD_INT 31
2020: PUSH
2021: LD_INT 38
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 34
2030: PUSH
2031: LD_INT 21
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PUSH
2042: LD_INT 58
2044: PUSH
2045: LD_INT 4
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 82
2054: PUSH
2055: LD_INT 4
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PUSH
2066: LD_INT 122
2068: PUSH
2069: LD_INT 18
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: PUSH
2076: LD_INT 152
2078: PUSH
2079: LD_INT 43
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PUSH
2090: LD_INT 174
2092: PUSH
2093: LD_INT 90
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 180
2102: PUSH
2103: LD_INT 120
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 152
2116: PUSH
2117: LD_INT 136
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 130
2126: PUSH
2127: LD_INT 136
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 89
2140: PUSH
2141: LD_INT 116
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 59
2150: PUSH
2151: LD_INT 89
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 28 , 26 ] , [ 73 , 3 ] , [ 133 , 22 ] , [ 180 , 110 ] , [ 142 , 137 ] , [ 72 , 112 ] ] ;
2170: LD_ADDR_EXP 29
2174: PUSH
2175: LD_INT 28
2177: PUSH
2178: LD_INT 26
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 73
2187: PUSH
2188: LD_INT 3
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 133
2197: PUSH
2198: LD_INT 22
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 180
2207: PUSH
2208: LD_INT 110
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PUSH
2215: LD_INT 142
2217: PUSH
2218: LD_INT 137
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PUSH
2225: LD_INT 72
2227: PUSH
2228: LD_INT 112
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 27 , 39 ] , [ 30 , 16 ] ] , [ [ 57 , 8 ] , [ 87 , 8 ] ] , [ [ 128 , 19 ] , [ 146 , 36 ] ] , [ [ 176 , 121 ] , [ 179 , 96 ] ] , [ [ 153 , 132 ] , [ 124 , 133 ] ] , [ [ 85 , 117 ] , [ 62 , 96 ] ] ] ;
2243: LD_ADDR_EXP 30
2247: PUSH
2248: LD_INT 27
2250: PUSH
2251: LD_INT 39
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: LD_INT 30
2260: PUSH
2261: LD_INT 16
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: PUSH
2272: LD_INT 57
2274: PUSH
2275: LD_INT 8
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 87
2284: PUSH
2285: LD_INT 8
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 128
2298: PUSH
2299: LD_INT 19
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 146
2308: PUSH
2309: LD_INT 36
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 176
2322: PUSH
2323: LD_INT 121
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 179
2332: PUSH
2333: LD_INT 96
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 153
2346: PUSH
2347: LD_INT 132
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: LD_INT 124
2356: PUSH
2357: LD_INT 133
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PUSH
2368: LD_INT 85
2370: PUSH
2371: LD_INT 117
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: LD_INT 62
2380: PUSH
2381: LD_INT 96
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: ST_TO_ADDR
// depot_def := [ [ 53 , 42 , 5 ] , [ 78 , 18 , 0 ] , [ 129 , 43 , 1 ] , [ 155 , 96 , 2 ] , [ 130 , 120 , 3 ] , [ 82 , 98 , 3 ] ] ;
2400: LD_ADDR_EXP 24
2404: PUSH
2405: LD_INT 53
2407: PUSH
2408: LD_INT 42
2410: PUSH
2411: LD_INT 5
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 78
2421: PUSH
2422: LD_INT 18
2424: PUSH
2425: LD_INT 0
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 129
2435: PUSH
2436: LD_INT 43
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: PUSH
2447: LD_INT 155
2449: PUSH
2450: LD_INT 96
2452: PUSH
2453: LD_INT 2
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PUSH
2461: LD_INT 130
2463: PUSH
2464: LD_INT 120
2466: PUSH
2467: LD_INT 3
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 82
2477: PUSH
2478: LD_INT 98
2480: PUSH
2481: LD_INT 3
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: ST_TO_ADDR
// for i in depot_def do
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 24
2506: PUSH
2507: FOR_IN
2508: IFFALSE 2582
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2510: LD_ADDR_EXP 26
2514: PUSH
2515: LD_EXP 26
2519: PUSH
2520: LD_VAR 0 2
2524: PUSH
2525: LD_INT 1
2527: ARRAY
2528: PPUSH
2529: LD_VAR 0 2
2533: PUSH
2534: LD_INT 3
2536: ARRAY
2537: PPUSH
2538: LD_INT 10
2540: PPUSH
2541: CALL_OW 272
2545: PUSH
2546: LD_VAR 0 2
2550: PUSH
2551: LD_INT 2
2553: ARRAY
2554: PPUSH
2555: LD_VAR 0 2
2559: PUSH
2560: LD_INT 3
2562: ARRAY
2563: PPUSH
2564: LD_INT 10
2566: PPUSH
2567: CALL_OW 273
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: EMPTY
2577: LIST
2578: ADD
2579: ST_TO_ADDR
2580: GO 2507
2582: POP
2583: POP
// breastworks_def := [ [ [ 65 , 53 , 5 ] , [ 65 , 40 , 4 ] ] , [ [ 76 , 28 , 0 ] , [ 89 , 28 , 5 ] ] , [ [ 115 , 41 , 1 ] , [ 128 , 54 , 0 ] ] , [ [ 143 , 82 , 2 ] , [ 143 , 95 , 1 ] ] , [ [ 131 , 108 , 3 ] , [ 118 , 108 , 2 ] ] , [ [ 80 , 85 , 3 ] , [ 92 , 97 , 4 ] ] ] ;
2584: LD_ADDR_EXP 25
2588: PUSH
2589: LD_INT 65
2591: PUSH
2592: LD_INT 53
2594: PUSH
2595: LD_INT 5
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: PUSH
2603: LD_INT 65
2605: PUSH
2606: LD_INT 40
2608: PUSH
2609: LD_INT 4
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: LIST
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PUSH
2621: LD_INT 76
2623: PUSH
2624: LD_INT 28
2626: PUSH
2627: LD_INT 0
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 89
2637: PUSH
2638: LD_INT 28
2640: PUSH
2641: LD_INT 5
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 115
2655: PUSH
2656: LD_INT 41
2658: PUSH
2659: LD_INT 1
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: LIST
2666: PUSH
2667: LD_INT 128
2669: PUSH
2670: LD_INT 54
2672: PUSH
2673: LD_INT 0
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: LD_INT 143
2687: PUSH
2688: LD_INT 82
2690: PUSH
2691: LD_INT 2
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 143
2701: PUSH
2702: LD_INT 95
2704: PUSH
2705: LD_INT 1
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: LD_INT 131
2719: PUSH
2720: LD_INT 108
2722: PUSH
2723: LD_INT 3
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 118
2733: PUSH
2734: LD_INT 108
2736: PUSH
2737: LD_INT 2
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 80
2751: PUSH
2752: LD_INT 85
2754: PUSH
2755: LD_INT 3
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 92
2765: PUSH
2766: LD_INT 97
2768: PUSH
2769: LD_INT 4
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: ST_TO_ADDR
// for i = 1 to Side_Positions do
2789: LD_ADDR_VAR 0 2
2793: PUSH
2794: DOUBLE
2795: LD_INT 1
2797: DEC
2798: ST_TO_ADDR
2799: LD_EXP 19
2803: PUSH
2804: FOR_TO
2805: IFFALSE 2935
// begin if not Side_Positions [ i ] then
2807: LD_EXP 19
2811: PUSH
2812: LD_VAR 0 2
2816: ARRAY
2817: NOT
2818: IFFALSE 2822
// continue ;
2820: GO 2804
// if def_extra_oil_deposits then
2822: LD_EXP 49
2826: IFFALSE 2884
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2828: LD_ADDR_VAR 0 3
2832: PUSH
2833: LD_EXP 28
2837: PUSH
2838: LD_EXP 19
2842: PUSH
2843: LD_VAR 0 2
2847: ARRAY
2848: ARRAY
2849: PUSH
2850: FOR_IN
2851: IFFALSE 2880
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2853: LD_VAR 0 3
2857: PUSH
2858: LD_INT 1
2860: ARRAY
2861: PPUSH
2862: LD_VAR 0 3
2866: PUSH
2867: LD_INT 2
2869: ARRAY
2870: PPUSH
2871: LD_INT 2
2873: PPUSH
2874: CALL_OW 62
2878: GO 2850
2880: POP
2881: POP
2882: GO 2933
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2884: LD_EXP 27
2888: PUSH
2889: LD_EXP 19
2893: PUSH
2894: LD_VAR 0 2
2898: ARRAY
2899: ARRAY
2900: PUSH
2901: LD_INT 1
2903: ARRAY
2904: PPUSH
2905: LD_EXP 27
2909: PUSH
2910: LD_EXP 19
2914: PUSH
2915: LD_VAR 0 2
2919: ARRAY
2920: ARRAY
2921: PUSH
2922: LD_INT 2
2924: ARRAY
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: CALL_OW 62
// end ;
2933: GO 2804
2935: POP
2936: POP
// if def_extra_sib_deposits then
2937: LD_EXP 50
2941: IFFALSE 3095
// for i = 1 to Side_Positions do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: DOUBLE
2949: LD_INT 1
2951: DEC
2952: ST_TO_ADDR
2953: LD_EXP 19
2957: PUSH
2958: FOR_TO
2959: IFFALSE 3093
// begin if not Side_Positions [ i ] then
2961: LD_EXP 19
2965: PUSH
2966: LD_VAR 0 2
2970: ARRAY
2971: NOT
2972: IFFALSE 2976
// continue ;
2974: GO 2958
// if def_extra_sib_deposits = 2 then
2976: LD_EXP 50
2980: PUSH
2981: LD_INT 2
2983: EQUAL
2984: IFFALSE 3042
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2986: LD_ADDR_VAR 0 3
2990: PUSH
2991: LD_EXP 30
2995: PUSH
2996: LD_EXP 19
3000: PUSH
3001: LD_VAR 0 2
3005: ARRAY
3006: ARRAY
3007: PUSH
3008: FOR_IN
3009: IFFALSE 3038
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
3011: LD_VAR 0 3
3015: PUSH
3016: LD_INT 1
3018: ARRAY
3019: PPUSH
3020: LD_VAR 0 3
3024: PUSH
3025: LD_INT 2
3027: ARRAY
3028: PPUSH
3029: LD_INT 3
3031: PPUSH
3032: CALL_OW 62
3036: GO 3008
3038: POP
3039: POP
3040: GO 3091
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
3042: LD_EXP 29
3046: PUSH
3047: LD_EXP 19
3051: PUSH
3052: LD_VAR 0 2
3056: ARRAY
3057: ARRAY
3058: PUSH
3059: LD_INT 1
3061: ARRAY
3062: PPUSH
3063: LD_EXP 29
3067: PUSH
3068: LD_EXP 19
3072: PUSH
3073: LD_VAR 0 2
3077: ARRAY
3078: ARRAY
3079: PUSH
3080: LD_INT 2
3082: ARRAY
3083: PPUSH
3084: LD_INT 3
3086: PPUSH
3087: CALL_OW 62
// end ;
3091: GO 2958
3093: POP
3094: POP
// end ;
3095: LD_VAR 0 1
3099: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
3100: LD_INT 0
3102: PPUSH
3103: PPUSH
3104: PPUSH
// if not Team_Game then
3105: LD_EXP 21
3109: NOT
3110: IFFALSE 3208
// begin for i = 1 to 8 do
3112: LD_ADDR_VAR 0 2
3116: PUSH
3117: DOUBLE
3118: LD_INT 1
3120: DEC
3121: ST_TO_ADDR
3122: LD_INT 8
3124: PUSH
3125: FOR_TO
3126: IFFALSE 3204
// for j = 1 to 8 do
3128: LD_ADDR_VAR 0 3
3132: PUSH
3133: DOUBLE
3134: LD_INT 1
3136: DEC
3137: ST_TO_ADDR
3138: LD_INT 8
3140: PUSH
3141: FOR_TO
3142: IFFALSE 3200
// if i <> j then
3144: LD_VAR 0 2
3148: PUSH
3149: LD_VAR 0 3
3153: NONEQUAL
3154: IFFALSE 3178
// SetAttitude ( i , j , att_neutral , true ) else
3156: LD_VAR 0 2
3160: PPUSH
3161: LD_VAR 0 3
3165: PPUSH
3166: LD_INT 0
3168: PPUSH
3169: LD_INT 1
3171: PPUSH
3172: CALL_OW 80
3176: GO 3198
// SetAttitude ( i , j , att_friend , true ) ;
3178: LD_VAR 0 2
3182: PPUSH
3183: LD_VAR 0 3
3187: PPUSH
3188: LD_INT 1
3190: PPUSH
3191: LD_INT 1
3193: PPUSH
3194: CALL_OW 80
3198: GO 3141
3200: POP
3201: POP
3202: GO 3125
3204: POP
3205: POP
// end else
3206: GO 3383
// begin if def_shared_vision then
3208: LD_EXP 51
3212: IFFALSE 3277
// begin for i in Teams do
3214: LD_ADDR_VAR 0 2
3218: PUSH
3219: LD_EXP 18
3223: PUSH
3224: FOR_IN
3225: IFFALSE 3275
// for j = 2 to i do
3227: LD_ADDR_VAR 0 3
3231: PUSH
3232: DOUBLE
3233: LD_INT 2
3235: DEC
3236: ST_TO_ADDR
3237: LD_VAR 0 2
3241: PUSH
3242: FOR_TO
3243: IFFALSE 3271
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3245: LD_VAR 0 2
3249: PUSH
3250: LD_VAR 0 3
3254: ARRAY
3255: PPUSH
3256: LD_VAR 0 2
3260: PUSH
3261: LD_INT 1
3263: ARRAY
3264: PPUSH
3265: CALL_OW 343
3269: GO 3242
3271: POP
3272: POP
3273: GO 3224
3275: POP
3276: POP
// end ; for i = 1 to 8 do
3277: LD_ADDR_VAR 0 2
3281: PUSH
3282: DOUBLE
3283: LD_INT 1
3285: DEC
3286: ST_TO_ADDR
3287: LD_INT 8
3289: PUSH
3290: FOR_TO
3291: IFFALSE 3381
// for j = 1 to 8 do
3293: LD_ADDR_VAR 0 3
3297: PUSH
3298: DOUBLE
3299: LD_INT 1
3301: DEC
3302: ST_TO_ADDR
3303: LD_INT 8
3305: PUSH
3306: FOR_TO
3307: IFFALSE 3377
// if Side_Teams [ i ] = Side_Teams [ j ] then
3309: LD_EXP 17
3313: PUSH
3314: LD_VAR 0 2
3318: ARRAY
3319: PUSH
3320: LD_EXP 17
3324: PUSH
3325: LD_VAR 0 3
3329: ARRAY
3330: EQUAL
3331: IFFALSE 3355
// SetAttitude ( i , j , att_friend , true ) else
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_VAR 0 3
3342: PPUSH
3343: LD_INT 1
3345: PPUSH
3346: LD_INT 1
3348: PPUSH
3349: CALL_OW 80
3353: GO 3375
// SetAttitude ( i , j , att_enemy , true ) ;
3355: LD_VAR 0 2
3359: PPUSH
3360: LD_VAR 0 3
3364: PPUSH
3365: LD_INT 2
3367: PPUSH
3368: LD_INT 1
3370: PPUSH
3371: CALL_OW 80
3375: GO 3306
3377: POP
3378: POP
3379: GO 3290
3381: POP
3382: POP
// end ; end ;
3383: LD_VAR 0 1
3387: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3388: LD_INT 0
3390: PPUSH
3391: PPUSH
3392: PPUSH
3393: PPUSH
// result := [ ] ;
3394: LD_ADDR_VAR 0 7
3398: PUSH
3399: EMPTY
3400: ST_TO_ADDR
// for i := 1 to count do
3401: LD_ADDR_VAR 0 8
3405: PUSH
3406: DOUBLE
3407: LD_INT 1
3409: DEC
3410: ST_TO_ADDR
3411: LD_VAR 0 1
3415: PUSH
3416: FOR_TO
3417: IFFALSE 3835
// begin uc_direction := Rand ( 0 , 5 ) ;
3419: LD_ADDR_OWVAR 24
3423: PUSH
3424: LD_INT 0
3426: PPUSH
3427: LD_INT 5
3429: PPUSH
3430: CALL_OW 12
3434: ST_TO_ADDR
// if commander then
3435: LD_LOC 1
3439: IFFALSE 3548
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3441: LD_ADDR_OWVAR 26
3445: PUSH
3446: LD_OWVAR 19
3450: PUSH
3451: LD_OWVAR 20
3455: ARRAY
3456: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 12
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: LD_EXP 6
3477: PUSH
3478: LD_INT 2
3480: PLUS
3481: PPUSH
3482: CALL_OW 380
// hc_importance := 105 ;
3486: LD_ADDR_OWVAR 32
3490: PUSH
3491: LD_INT 105
3493: ST_TO_ADDR
// commander := false ;
3494: LD_ADDR_LOC 1
3498: PUSH
3499: LD_INT 0
3501: ST_TO_ADDR
// if Multiplayer then
3502: LD_OWVAR 4
3506: IFFALSE 3546
// begin hc_gallery := MULTIAVATARS ;
3508: LD_ADDR_OWVAR 33
3512: PUSH
3513: LD_STRING MULTIAVATARS
3515: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3516: LD_ADDR_OWVAR 34
3520: PUSH
3521: LD_OWVAR 20
3525: PPUSH
3526: CALL_OW 525
3530: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3531: LD_ADDR_OWVAR 27
3535: PUSH
3536: LD_OWVAR 20
3540: PPUSH
3541: CALL_OW 526
3545: ST_TO_ADDR
// end ; end else
3546: GO 3611
// begin hc_name :=  ;
3548: LD_ADDR_OWVAR 26
3552: PUSH
3553: LD_STRING 
3555: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3556: LD_INT 1
3558: PPUSH
3559: LD_INT 2
3561: PPUSH
3562: CALL_OW 12
3566: PPUSH
3567: LD_VAR 0 2
3571: PPUSH
3572: LD_EXP 6
3576: PPUSH
3577: CALL_OW 380
// hc_importance := 0 ;
3581: LD_ADDR_OWVAR 32
3585: PUSH
3586: LD_INT 0
3588: ST_TO_ADDR
// if Multiplayer then
3589: LD_OWVAR 4
3593: IFFALSE 3611
// begin hc_gallery :=  ;
3595: LD_ADDR_OWVAR 33
3599: PUSH
3600: LD_STRING 
3602: ST_TO_ADDR
// hc_face_number := 0 ;
3603: LD_ADDR_OWVAR 34
3607: PUSH
3608: LD_INT 0
3610: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3611: LD_ADDR_VAR 0 10
3615: PUSH
3616: CALL_OW 44
3620: ST_TO_ADDR
// if global_defined then
3621: LD_LOC 3
3625: IFFALSE 3765
// begin if ( cl = class_soldier ) then
3627: LD_VAR 0 2
3631: PUSH
3632: LD_INT 1
3634: EQUAL
3635: IFFALSE 3655
// j := i + soldiers_created else
3637: LD_ADDR_VAR 0 9
3641: PUSH
3642: LD_VAR 0 8
3646: PUSH
3647: LD_LOC 4
3651: PLUS
3652: ST_TO_ADDR
3653: GO 3665
// j := i ;
3655: LD_ADDR_VAR 0 9
3659: PUSH
3660: LD_VAR 0 8
3664: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3665: LD_LOC 2
3669: PUSH
3670: LD_VAR 0 2
3674: ARRAY
3675: PUSH
3676: LD_VAR 0 9
3680: ARRAY
3681: PPUSH
3682: LD_VAR 0 10
3686: PPUSH
3687: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3691: LD_VAR 0 10
3695: PPUSH
3696: LD_INT 2
3698: PPUSH
3699: LD_LOC 2
3703: PUSH
3704: LD_VAR 0 2
3708: ARRAY
3709: PUSH
3710: LD_VAR 0 9
3714: ARRAY
3715: PPUSH
3716: LD_INT 2
3718: PPUSH
3719: CALL_OW 260
3723: PPUSH
3724: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3728: LD_VAR 0 10
3732: PPUSH
3733: LD_INT 1
3735: PPUSH
3736: LD_LOC 2
3740: PUSH
3741: LD_VAR 0 2
3745: ARRAY
3746: PUSH
3747: LD_VAR 0 9
3751: ARRAY
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: CALL_OW 260
3760: PPUSH
3761: CALL_OW 239
// end ; if building then
3765: LD_VAR 0 6
3769: IFFALSE 3787
// PlaceHumanInUnit ( un , building ) else
3771: LD_VAR 0 10
3775: PPUSH
3776: LD_VAR 0 6
3780: PPUSH
3781: CALL_OW 52
3785: GO 3814
// PlaceUnitXYR ( un , x , y , r , false ) ;
3787: LD_VAR 0 10
3791: PPUSH
3792: LD_VAR 0 3
3796: PPUSH
3797: LD_VAR 0 4
3801: PPUSH
3802: LD_VAR 0 5
3806: PPUSH
3807: LD_INT 0
3809: PPUSH
3810: CALL_OW 50
// result := result ^ [ un ] ;
3814: LD_ADDR_VAR 0 7
3818: PUSH
3819: LD_VAR 0 7
3823: PUSH
3824: LD_VAR 0 10
3828: PUSH
3829: EMPTY
3830: LIST
3831: ADD
3832: ST_TO_ADDR
// end ;
3833: GO 3416
3835: POP
3836: POP
// if not global_defined then
3837: LD_LOC 3
3841: NOT
3842: IFFALSE 3920
// if ( global_units >= cl ) then
3844: LD_LOC 2
3848: PUSH
3849: LD_VAR 0 2
3853: GREATEREQUAL
3854: IFFALSE 3895
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3856: LD_ADDR_LOC 2
3860: PUSH
3861: LD_LOC 2
3865: PPUSH
3866: LD_VAR 0 2
3870: PPUSH
3871: LD_LOC 2
3875: PUSH
3876: LD_VAR 0 2
3880: ARRAY
3881: PUSH
3882: LD_VAR 0 7
3886: ADD
3887: PPUSH
3888: CALL_OW 1
3892: ST_TO_ADDR
3893: GO 3920
// global_units := Replace ( global_units , cl , result ) ;
3895: LD_ADDR_LOC 2
3899: PUSH
3900: LD_LOC 2
3904: PPUSH
3905: LD_VAR 0 2
3909: PPUSH
3910: LD_VAR 0 7
3914: PPUSH
3915: CALL_OW 1
3919: ST_TO_ADDR
// if commander then
3920: LD_LOC 1
3924: IFFALSE 3971
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3926: LD_ADDR_EXP 33
3930: PUSH
3931: LD_EXP 33
3935: PPUSH
3936: LD_OWVAR 20
3940: PPUSH
3941: LD_EXP 33
3945: PUSH
3946: LD_OWVAR 20
3950: ARRAY
3951: PUSH
3952: LD_VAR 0 10
3956: ADD
3957: PPUSH
3958: CALL_OW 1
3962: ST_TO_ADDR
// commander := false ;
3963: LD_ADDR_LOC 1
3967: PUSH
3968: LD_INT 0
3970: ST_TO_ADDR
// end ; end ;
3971: LD_VAR 0 7
3975: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3976: LD_INT 0
3978: PPUSH
3979: PPUSH
3980: PPUSH
3981: PPUSH
3982: PPUSH
3983: PPUSH
3984: PPUSH
3985: PPUSH
3986: PPUSH
// if side in [ 0 , 9 ] then
3987: LD_VAR 0 1
3991: PUSH
3992: LD_INT 0
3994: PUSH
3995: LD_INT 9
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: IN
4002: IFFALSE 4006
// exit ;
4004: GO 5056
// pos := Side_Positions [ side ] ;
4006: LD_ADDR_VAR 0 3
4010: PUSH
4011: LD_EXP 19
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
4022: LD_ADDR_OWVAR 21
4026: PUSH
4027: LD_EXP 20
4031: PUSH
4032: LD_VAR 0 1
4036: ARRAY
4037: ST_TO_ADDR
// uc_side := side ;
4038: LD_ADDR_OWVAR 20
4042: PUSH
4043: LD_VAR 0 1
4047: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
4048: LD_ADDR_VAR 0 4
4052: PUSH
4053: LD_EXP 24
4057: PUSH
4058: LD_VAR 0 3
4062: ARRAY
4063: PUSH
4064: LD_INT 1
4066: ARRAY
4067: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
4068: LD_ADDR_VAR 0 5
4072: PUSH
4073: LD_EXP 24
4077: PUSH
4078: LD_VAR 0 3
4082: ARRAY
4083: PUSH
4084: LD_INT 2
4086: ARRAY
4087: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
4088: LD_ADDR_VAR 0 6
4092: PUSH
4093: LD_EXP 24
4097: PUSH
4098: LD_VAR 0 3
4102: ARRAY
4103: PUSH
4104: LD_INT 3
4106: ARRAY
4107: ST_TO_ADDR
// if is_depot then
4108: LD_EXP 3
4112: IFFALSE 4245
// begin bc_type = b_depot ;
4114: LD_ADDR_OWVAR 42
4118: PUSH
4119: LD_INT 0
4121: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4122: LD_ADDR_VAR 0 10
4126: PUSH
4127: LD_VAR 0 4
4131: PPUSH
4132: LD_VAR 0 5
4136: PPUSH
4137: LD_VAR 0 6
4141: PPUSH
4142: CALL_OW 47
4146: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
4147: LD_VAR 0 10
4151: PPUSH
4152: LD_STRING @
4154: PUSH
4155: LD_VAR 0 1
4159: STR
4160: PPUSH
4161: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
4165: LD_VAR 0 10
4169: PPUSH
4170: CALL_OW 274
4174: PPUSH
4175: LD_INT 1
4177: PPUSH
4178: LD_EXP 8
4182: PUSH
4183: LD_INT 1
4185: ARRAY
4186: PPUSH
4187: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
4191: LD_VAR 0 10
4195: PPUSH
4196: CALL_OW 274
4200: PPUSH
4201: LD_INT 2
4203: PPUSH
4204: LD_EXP 8
4208: PUSH
4209: LD_INT 2
4211: ARRAY
4212: PPUSH
4213: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4217: LD_VAR 0 10
4221: PPUSH
4222: CALL_OW 274
4226: PPUSH
4227: LD_INT 3
4229: PPUSH
4230: LD_EXP 8
4234: PUSH
4235: LD_INT 3
4237: ARRAY
4238: PPUSH
4239: CALL_OW 277
// end else
4243: GO 4389
// begin for i := 1 to 3 do
4245: LD_ADDR_VAR 0 7
4249: PUSH
4250: DOUBLE
4251: LD_INT 1
4253: DEC
4254: ST_TO_ADDR
4255: LD_INT 3
4257: PUSH
4258: FOR_TO
4259: IFFALSE 4387
// begin r := starting_resources [ i ] ;
4261: LD_ADDR_VAR 0 8
4265: PUSH
4266: LD_EXP 8
4270: PUSH
4271: LD_VAR 0 7
4275: ARRAY
4276: ST_TO_ADDR
// while r >= 10 do
4277: LD_VAR 0 8
4281: PUSH
4282: LD_INT 10
4284: GREATEREQUAL
4285: IFFALSE 4385
// if r > 50 then
4287: LD_VAR 0 8
4291: PUSH
4292: LD_INT 50
4294: GREATER
4295: IFFALSE 4341
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4297: LD_VAR 0 7
4301: PPUSH
4302: LD_INT 5
4304: PPUSH
4305: LD_VAR 0 4
4309: PPUSH
4310: LD_VAR 0 5
4314: PPUSH
4315: LD_INT 4
4317: PPUSH
4318: LD_INT 0
4320: PPUSH
4321: CALL_OW 60
// r := r - 50 ;
4325: LD_ADDR_VAR 0 8
4329: PUSH
4330: LD_VAR 0 8
4334: PUSH
4335: LD_INT 50
4337: MINUS
4338: ST_TO_ADDR
// end else
4339: GO 4383
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4341: LD_VAR 0 7
4345: PPUSH
4346: LD_VAR 0 8
4350: PUSH
4351: LD_INT 10
4353: DIV
4354: PPUSH
4355: LD_VAR 0 4
4359: PPUSH
4360: LD_VAR 0 5
4364: PPUSH
4365: LD_INT 4
4367: PPUSH
4368: LD_INT 0
4370: PPUSH
4371: CALL_OW 60
// r := 0 ;
4375: LD_ADDR_VAR 0 8
4379: PUSH
4380: LD_INT 0
4382: ST_TO_ADDR
// end ;
4383: GO 4277
// end ;
4385: GO 4258
4387: POP
4388: POP
// end ; for r in starting_crates do
4389: LD_ADDR_VAR 0 8
4393: PUSH
4394: LD_EXP 7
4398: PUSH
4399: FOR_IN
4400: IFFALSE 4432
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4402: LD_INT 1
4404: PPUSH
4405: LD_INT 5
4407: PPUSH
4408: LD_VAR 0 4
4412: PPUSH
4413: LD_VAR 0 5
4417: PPUSH
4418: LD_VAR 0 8
4422: PPUSH
4423: LD_INT 0
4425: PPUSH
4426: CALL_OW 60
4430: GO 4399
4432: POP
4433: POP
// if def_morale_flags then
4434: LD_EXP 52
4438: IFFALSE 4577
// begin x := start_def [ pos ] [ 1 ] ;
4440: LD_ADDR_VAR 0 4
4444: PUSH
4445: LD_EXP 26
4449: PUSH
4450: LD_VAR 0 3
4454: ARRAY
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4460: LD_ADDR_VAR 0 5
4464: PUSH
4465: LD_EXP 26
4469: PUSH
4470: LD_VAR 0 3
4474: ARRAY
4475: PUSH
4476: LD_INT 2
4478: ARRAY
4479: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4480: LD_VAR 0 4
4484: PPUSH
4485: LD_VAR 0 5
4489: PPUSH
4490: LD_INT 12
4492: PPUSH
4493: LD_INT 2
4495: PPUSH
4496: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4500: LD_ADDR_EXP 31
4504: PUSH
4505: LD_EXP 31
4509: PUSH
4510: LD_VAR 0 1
4514: PPUSH
4515: LD_VAR 0 4
4519: PPUSH
4520: LD_VAR 0 5
4524: PPUSH
4525: LD_INT 1
4527: PUSH
4528: LD_INT 100
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 2
4537: PUSH
4538: LD_INT 50
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 3
4547: PUSH
4548: LD_INT 20
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PUSH
4555: LD_INT 20
4557: PUSH
4558: LD_INT 100
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: PPUSH
4571: CALL_OW 418
4575: ADD
4576: ST_TO_ADDR
// end ; commander := true ;
4577: LD_ADDR_LOC 1
4581: PUSH
4582: LD_INT 1
4584: ST_TO_ADDR
// soldiers_created := 0 ;
4585: LD_ADDR_LOC 4
4589: PUSH
4590: LD_INT 0
4592: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4593: LD_ADDR_VAR 0 7
4597: PUSH
4598: DOUBLE
4599: LD_INT 1
4601: DEC
4602: ST_TO_ADDR
4603: LD_EXP 4
4607: PUSH
4608: FOR_TO
4609: IFFALSE 4762
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4611: LD_ADDR_VAR 0 4
4615: PUSH
4616: LD_EXP 25
4620: PUSH
4621: LD_VAR 0 3
4625: ARRAY
4626: PUSH
4627: LD_VAR 0 7
4631: ARRAY
4632: PUSH
4633: LD_INT 1
4635: ARRAY
4636: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4637: LD_ADDR_VAR 0 5
4641: PUSH
4642: LD_EXP 25
4646: PUSH
4647: LD_VAR 0 3
4651: ARRAY
4652: PUSH
4653: LD_VAR 0 7
4657: ARRAY
4658: PUSH
4659: LD_INT 2
4661: ARRAY
4662: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4663: LD_ADDR_VAR 0 6
4667: PUSH
4668: LD_EXP 25
4672: PUSH
4673: LD_VAR 0 3
4677: ARRAY
4678: PUSH
4679: LD_VAR 0 7
4683: ARRAY
4684: PUSH
4685: LD_INT 3
4687: ARRAY
4688: ST_TO_ADDR
// bc_type := b_breastwork ;
4689: LD_ADDR_OWVAR 42
4693: PUSH
4694: LD_INT 31
4696: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4697: LD_ADDR_VAR 0 9
4701: PUSH
4702: LD_VAR 0 4
4706: PPUSH
4707: LD_VAR 0 5
4711: PPUSH
4712: LD_VAR 0 6
4716: PPUSH
4717: CALL_OW 47
4721: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4722: LD_INT 1
4724: PPUSH
4725: LD_INT 1
4727: PPUSH
4728: LD_INT 0
4730: PPUSH
4731: LD_INT 0
4733: PPUSH
4734: LD_INT 0
4736: PPUSH
4737: LD_VAR 0 9
4741: PPUSH
4742: CALL 3388 0 6
// soldiers_created := soldiers_created + 1 ;
4746: LD_ADDR_LOC 4
4750: PUSH
4751: LD_LOC 4
4755: PUSH
4756: LD_INT 1
4758: PLUS
4759: ST_TO_ADDR
// end ;
4760: GO 4608
4762: POP
4763: POP
// x := start_def [ pos ] [ 1 ] ;
4764: LD_ADDR_VAR 0 4
4768: PUSH
4769: LD_EXP 26
4773: PUSH
4774: LD_VAR 0 3
4778: ARRAY
4779: PUSH
4780: LD_INT 1
4782: ARRAY
4783: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4784: LD_ADDR_VAR 0 5
4788: PUSH
4789: LD_EXP 26
4793: PUSH
4794: LD_VAR 0 3
4798: ARRAY
4799: PUSH
4800: LD_INT 2
4802: ARRAY
4803: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4804: LD_LOC 8
4808: PUSH
4809: LD_EXP 4
4813: MINUS
4814: PPUSH
4815: LD_INT 1
4817: PPUSH
4818: LD_VAR 0 4
4822: PPUSH
4823: LD_VAR 0 5
4827: PPUSH
4828: LD_INT 5
4830: PPUSH
4831: LD_INT 0
4833: PPUSH
4834: CALL 3388 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4838: LD_LOC 5
4842: PPUSH
4843: LD_INT 2
4845: PPUSH
4846: LD_VAR 0 4
4850: PPUSH
4851: LD_VAR 0 5
4855: PPUSH
4856: LD_INT 5
4858: PPUSH
4859: LD_INT 0
4861: PPUSH
4862: CALL 3388 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4866: LD_LOC 7
4870: PPUSH
4871: LD_INT 3
4873: PPUSH
4874: LD_VAR 0 4
4878: PPUSH
4879: LD_VAR 0 5
4883: PPUSH
4884: LD_INT 5
4886: PPUSH
4887: LD_INT 0
4889: PPUSH
4890: CALL 3388 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4894: LD_LOC 6
4898: PPUSH
4899: LD_INT 4
4901: PPUSH
4902: LD_VAR 0 4
4906: PPUSH
4907: LD_VAR 0 5
4911: PPUSH
4912: LD_INT 5
4914: PPUSH
4915: LD_INT 0
4917: PPUSH
4918: CALL 3388 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4922: LD_EXP 53
4926: PUSH
4927: LD_INT 20
4929: PPUSH
4930: LD_VAR 0 1
4934: PPUSH
4935: CALL_OW 321
4939: PUSH
4940: LD_INT 1
4942: EQUAL
4943: AND
4944: IFFALSE 4961
// SetTech ( tech_SibDet , side , state_researched ) ;
4946: LD_INT 20
4948: PPUSH
4949: LD_VAR 0 1
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 322
// if def_siberite_bomb = 1 then
4961: LD_EXP 56
4965: PUSH
4966: LD_INT 1
4968: EQUAL
4969: IFFALSE 5003
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4971: LD_INT 25
4973: PPUSH
4974: LD_VAR 0 1
4978: PPUSH
4979: LD_INT 1
4981: PPUSH
4982: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4986: LD_INT 73
4988: PPUSH
4989: LD_VAR 0 1
4993: PPUSH
4994: LD_INT 1
4996: PPUSH
4997: CALL_OW 322
// end else
5001: GO 5033
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
5003: LD_INT 25
5005: PPUSH
5006: LD_VAR 0 1
5010: PPUSH
5011: LD_INT 0
5013: PPUSH
5014: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
5018: LD_INT 73
5020: PPUSH
5021: LD_VAR 0 1
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
5033: LD_INT 24
5035: PPUSH
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_INT 0
5043: PPUSH
5044: CALL_OW 322
// global_defined := true ;
5048: LD_ADDR_LOC 3
5052: PUSH
5053: LD_INT 1
5055: ST_TO_ADDR
// end ;
5056: LD_VAR 0 2
5060: RET
// every 0 0$1 do
5061: GO 5063
5063: DISABLE
// if ( def_siberite_bomb > 1 ) then
5064: LD_EXP 56
5068: PUSH
5069: LD_INT 1
5071: GREATER
5072: IFFALSE 5087
// begin wait ( siberite_bomb_Delay ) ;
5074: LD_EXP 16
5078: PPUSH
5079: CALL_OW 67
// EnableSibFiss ;
5083: CALL 5088 0 0
// end ;
5087: END
// function EnableSibFiss ; var i ; begin
5088: LD_INT 0
5090: PPUSH
5091: PPUSH
// for i := 1 to 8 do
5092: LD_ADDR_VAR 0 2
5096: PUSH
5097: DOUBLE
5098: LD_INT 1
5100: DEC
5101: ST_TO_ADDR
5102: LD_INT 8
5104: PUSH
5105: FOR_TO
5106: IFFALSE 5152
// if Side_Positions [ i ] then
5108: LD_EXP 19
5112: PUSH
5113: LD_VAR 0 2
5117: ARRAY
5118: IFFALSE 5150
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5120: LD_INT 25
5122: PPUSH
5123: LD_VAR 0 2
5127: PPUSH
5128: LD_INT 1
5130: PPUSH
5131: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5135: LD_INT 73
5137: PPUSH
5138: LD_VAR 0 2
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 322
// end ;
5150: GO 5105
5152: POP
5153: POP
// end ;
5154: LD_VAR 0 1
5158: RET
// function prepare_sides ; var i ; begin
5159: LD_INT 0
5161: PPUSH
5162: PPUSH
// global_units := [ ] ;
5163: LD_ADDR_LOC 2
5167: PUSH
5168: EMPTY
5169: ST_TO_ADDR
// global_defined := false ;
5170: LD_ADDR_LOC 3
5174: PUSH
5175: LD_INT 0
5177: ST_TO_ADDR
// CountClassMembers ;
5178: CALL 5228 0 0
// for i := 1 to 8 do
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: DOUBLE
5188: LD_INT 1
5190: DEC
5191: ST_TO_ADDR
5192: LD_INT 8
5194: PUSH
5195: FOR_TO
5196: IFFALSE 5221
// if Side_Positions [ i ] then
5198: LD_EXP 19
5202: PUSH
5203: LD_VAR 0 2
5207: ARRAY
5208: IFFALSE 5219
// prepare_side ( i ) ;
5210: LD_VAR 0 2
5214: PPUSH
5215: CALL 3976 0 1
5219: GO 5195
5221: POP
5222: POP
// end ;
5223: LD_VAR 0 1
5227: RET
// function CountClassMembers ; var Mode ; begin
5228: LD_INT 0
5230: PPUSH
5231: PPUSH
// if No_Mechs then
5232: LD_EXP 58
5236: IFFALSE 5248
// Mode := 2 else
5238: LD_ADDR_VAR 0 2
5242: PUSH
5243: LD_INT 2
5245: ST_TO_ADDR
5246: GO 5256
// Mode := 1 ;
5248: LD_ADDR_VAR 0 2
5252: PUSH
5253: LD_INT 1
5255: ST_TO_ADDR
// neng := number_of_people ;
5256: LD_ADDR_LOC 5
5260: PUSH
5261: LD_EXP 5
5265: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5266: LD_ADDR_LOC 8
5270: PUSH
5271: LD_LOC 5
5275: PUSH
5276: LD_INT 4
5278: PUSH
5279: LD_INT 3
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: LD_VAR 0 2
5290: ARRAY
5291: DIV
5292: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5293: LD_LOC 8
5297: PUSH
5298: LD_EXP 4
5302: LESS
5303: IFFALSE 5315
// nsol := number_of_breastworks ;
5305: LD_ADDR_LOC 8
5309: PUSH
5310: LD_EXP 4
5314: ST_TO_ADDR
// neng := neng - nsol ;
5315: LD_ADDR_LOC 5
5319: PUSH
5320: LD_LOC 5
5324: PUSH
5325: LD_LOC 8
5329: MINUS
5330: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5331: LD_ADDR_LOC 6
5335: PUSH
5336: LD_LOC 5
5340: PUSH
5341: LD_INT 3
5343: PUSH
5344: LD_INT 2
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: LD_VAR 0 2
5355: ARRAY
5356: DIV
5357: ST_TO_ADDR
// if ( nsci < 1 ) then
5358: LD_LOC 6
5362: PUSH
5363: LD_INT 1
5365: LESS
5366: IFFALSE 5376
// nsci := 1 ;
5368: LD_ADDR_LOC 6
5372: PUSH
5373: LD_INT 1
5375: ST_TO_ADDR
// neng := neng - nsci ;
5376: LD_ADDR_LOC 5
5380: PUSH
5381: LD_LOC 5
5385: PUSH
5386: LD_LOC 6
5390: MINUS
5391: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5392: LD_ADDR_LOC 7
5396: PUSH
5397: LD_LOC 5
5401: PUSH
5402: LD_INT 2
5404: DIV
5405: PUSH
5406: LD_INT 0
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_VAR 0 2
5417: ARRAY
5418: ST_TO_ADDR
// neng := neng - nmech ;
5419: LD_ADDR_LOC 5
5423: PUSH
5424: LD_LOC 5
5428: PUSH
5429: LD_LOC 7
5433: MINUS
5434: ST_TO_ADDR
// if ( neng < 1 ) then
5435: LD_LOC 5
5439: PUSH
5440: LD_INT 1
5442: LESS
5443: IFFALSE 5453
// neng := 1 ;
5445: LD_ADDR_LOC 5
5449: PUSH
5450: LD_INT 1
5452: ST_TO_ADDR
// end ;
5453: LD_VAR 0 1
5457: RET
// starting begin disable ( 98 ) ;
5458: LD_INT 98
5460: DISABLE_MARKED
// disable ( 99 ) ;
5461: LD_INT 99
5463: DISABLE_MARKED
// disable ( 100 ) ;
5464: LD_INT 100
5466: DISABLE_MARKED
// disable ( 200 ) ;
5467: LD_INT 200
5469: DISABLE_MARKED
// disable ( 400 ) ;
5470: LD_INT 400
5472: DISABLE_MARKED
// disable ( 401 ) ;
5473: LD_INT 401
5475: DISABLE_MARKED
// disable ( 600 ) ;
5476: LD_INT 600
5478: DISABLE_MARKED
// mp_selectmsg := true ;
5479: LD_ADDR_OWVAR 13
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5487: CALL 68 0 0
// init_map ;
5491: CALL 1935 0 0
// set_shared_visions_and_alliances ;
5495: CALL 3100 0 0
// ResetFog ;
5499: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5503: LD_OWVAR 2
5507: PPUSH
5508: CALL_OW 520
// AnimateTrees ( true ) ;
5512: LD_INT 1
5514: PPUSH
5515: CALL_OW 573
// prepare_sides ;
5519: CALL 5159 0 0
// init_respawning ;
5523: CALL 7233 0 0
// Init_Win_Condition ;
5527: CALL 14329 0 0
// InitLimits ;
5531: CALL 12918 0 0
// ShowTimer ;
5535: CALL 13855 0 0
// case Game_Type of 3 :
5539: LD_EXP 42
5543: PUSH
5544: LD_INT 3
5546: DOUBLE
5547: EQUAL
5548: IFTRUE 5552
5550: GO 5558
5552: POP
// enable ( 100 ) ; 4 :
5553: LD_INT 100
5555: ENABLE_MARKED
5556: GO 5574
5558: LD_INT 4
5560: DOUBLE
5561: EQUAL
5562: IFTRUE 5566
5564: GO 5573
5566: POP
// InitBloodGods ; end ;
5567: CALL 10481 0 0
5571: GO 5574
5573: POP
// music_nat := Side_Nations [ your_side ] ;
5574: LD_ADDR_OWVAR 71
5578: PUSH
5579: LD_EXP 20
5583: PUSH
5584: LD_OWVAR 2
5588: ARRAY
5589: ST_TO_ADDR
// if IAmSpec then
5590: CALL_OW 531
5594: IFFALSE 5618
// begin fogOff ( true ) ;
5596: LD_INT 1
5598: PPUSH
5599: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
5603: LD_INT 104
5605: PPUSH
5606: LD_INT 69
5608: PPUSH
5609: CALL_OW 86
// enable ( 400 ) ;
5613: LD_INT 400
5615: ENABLE_MARKED
// end else
5616: GO 5664
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5618: LD_EXP 26
5622: PUSH
5623: LD_EXP 19
5627: PUSH
5628: LD_OWVAR 2
5632: ARRAY
5633: ARRAY
5634: PUSH
5635: LD_INT 1
5637: ARRAY
5638: PPUSH
5639: LD_EXP 26
5643: PUSH
5644: LD_EXP 19
5648: PUSH
5649: LD_OWVAR 2
5653: ARRAY
5654: ARRAY
5655: PUSH
5656: LD_INT 2
5658: ARRAY
5659: PPUSH
5660: CALL_OW 86
// end ; InitApeman ;
5664: CALL 6400 0 0
// if def_builduptime then
5668: LD_EXP 57
5672: IFFALSE 5678
// BeginBuildUp ;
5674: CALL 9112 0 0
// end ; end_of_file
5678: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5679: GO 5681
5681: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5682: LD_INT 4
5684: PPUSH
5685: LD_INT 5
5687: PPUSH
5688: CALL_OW 12
5692: PPUSH
5693: LD_INT 1
5695: PPUSH
5696: CALL_OW 57
// enable ;
5700: ENABLE
// end ;
5701: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5702: GO 5704
5704: DISABLE
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
// begin case tick of 1 .. 1 1$0 :
5709: LD_OWVAR 1
5713: PUSH
5714: LD_INT 1
5716: DOUBLE
5717: GREATEREQUAL
5718: IFFALSE 5726
5720: LD_INT 2100
5722: DOUBLE
5723: LESSEQUAL
5724: IFTRUE 5728
5726: GO 5756
5728: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5729: LD_EXP 9
5733: PUSH
5734: LD_INT 100
5736: DIVREAL
5737: PUSH
5738: LD_INT 350
5740: PPUSH
5741: LD_INT 1050
5743: PPUSH
5744: CALL_OW 12
5748: MUL
5749: PPUSH
5750: CALL_OW 67
5754: GO 6058
5756: LD_INT 2100
5758: PUSH
5759: LD_INT 1
5761: PLUS
5762: DOUBLE
5763: GREATEREQUAL
5764: IFFALSE 5772
5766: LD_INT 10500
5768: DOUBLE
5769: LESSEQUAL
5770: IFTRUE 5774
5772: GO 5802
5774: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5775: LD_EXP 9
5779: PUSH
5780: LD_INT 100
5782: DIVREAL
5783: PUSH
5784: LD_INT 1050
5786: PPUSH
5787: LD_INT 1575
5789: PPUSH
5790: CALL_OW 12
5794: MUL
5795: PPUSH
5796: CALL_OW 67
5800: GO 6058
5802: LD_INT 10500
5804: PUSH
5805: LD_INT 1
5807: PLUS
5808: DOUBLE
5809: GREATEREQUAL
5810: IFFALSE 5818
5812: LD_INT 21000
5814: DOUBLE
5815: LESSEQUAL
5816: IFTRUE 5820
5818: GO 5848
5820: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5821: LD_EXP 9
5825: PUSH
5826: LD_INT 100
5828: DIVREAL
5829: PUSH
5830: LD_INT 1575
5832: PPUSH
5833: LD_INT 2100
5835: PPUSH
5836: CALL_OW 12
5840: MUL
5841: PPUSH
5842: CALL_OW 67
5846: GO 6058
5848: LD_INT 21000
5850: PUSH
5851: LD_INT 1
5853: PLUS
5854: DOUBLE
5855: GREATEREQUAL
5856: IFFALSE 5864
5858: LD_INT 42000
5860: DOUBLE
5861: LESSEQUAL
5862: IFTRUE 5866
5864: GO 5894
5866: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5867: LD_EXP 9
5871: PUSH
5872: LD_INT 100
5874: DIVREAL
5875: PUSH
5876: LD_INT 2100
5878: PPUSH
5879: LD_INT 2625
5881: PPUSH
5882: CALL_OW 12
5886: MUL
5887: PPUSH
5888: CALL_OW 67
5892: GO 6058
5894: LD_INT 42000
5896: PUSH
5897: LD_INT 1
5899: PLUS
5900: DOUBLE
5901: GREATEREQUAL
5902: IFFALSE 5910
5904: LD_INT 63000
5906: DOUBLE
5907: LESSEQUAL
5908: IFTRUE 5912
5910: GO 5940
5912: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5913: LD_EXP 9
5917: PUSH
5918: LD_INT 100
5920: DIVREAL
5921: PUSH
5922: LD_INT 2625
5924: PPUSH
5925: LD_INT 3150
5927: PPUSH
5928: CALL_OW 12
5932: MUL
5933: PPUSH
5934: CALL_OW 67
5938: GO 6058
5940: LD_INT 63000
5942: PUSH
5943: LD_INT 1
5945: PLUS
5946: DOUBLE
5947: GREATEREQUAL
5948: IFFALSE 5956
5950: LD_INT 105000
5952: DOUBLE
5953: LESSEQUAL
5954: IFTRUE 5958
5956: GO 5986
5958: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5959: LD_EXP 9
5963: PUSH
5964: LD_INT 100
5966: DIVREAL
5967: PUSH
5968: LD_INT 3150
5970: PPUSH
5971: LD_INT 3675
5973: PPUSH
5974: CALL_OW 12
5978: MUL
5979: PPUSH
5980: CALL_OW 67
5984: GO 6058
5986: LD_INT 105000
5988: PUSH
5989: LD_INT 1
5991: PLUS
5992: DOUBLE
5993: GREATEREQUAL
5994: IFFALSE 6002
5996: LD_INT 630000
5998: DOUBLE
5999: LESSEQUAL
6000: IFTRUE 6004
6002: GO 6032
6004: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
6005: LD_EXP 9
6009: PUSH
6010: LD_INT 100
6012: DIVREAL
6013: PUSH
6014: LD_INT 3675
6016: PPUSH
6017: LD_INT 4200
6019: PPUSH
6020: CALL_OW 12
6024: MUL
6025: PPUSH
6026: CALL_OW 67
6030: GO 6058
6032: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
6033: LD_EXP 9
6037: PUSH
6038: LD_INT 100
6040: DIVREAL
6041: PUSH
6042: LD_INT 4200
6044: PPUSH
6045: LD_INT 5250
6047: PPUSH
6048: CALL_OW 12
6052: MUL
6053: PPUSH
6054: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6058: LD_ADDR_VAR 0 2
6062: PUSH
6063: LD_INT 3
6065: PPUSH
6066: LD_INT 5
6068: PPUSH
6069: CALL_OW 12
6073: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6074: LD_ADDR_VAR 0 1
6078: PUSH
6079: LD_EXP 19
6083: PUSH
6084: LD_INT 0
6086: PUSH
6087: EMPTY
6088: LIST
6089: DIFF
6090: PUSH
6091: FOR_IN
6092: IFFALSE 6141
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
6094: LD_VAR 0 2
6098: PPUSH
6099: LD_EXP 26
6103: PUSH
6104: LD_VAR 0 1
6108: ARRAY
6109: PUSH
6110: LD_INT 1
6112: ARRAY
6113: PPUSH
6114: LD_EXP 26
6118: PUSH
6119: LD_VAR 0 1
6123: ARRAY
6124: PUSH
6125: LD_INT 2
6127: ARRAY
6128: PPUSH
6129: LD_INT 20
6131: PPUSH
6132: LD_INT 1
6134: PPUSH
6135: CALL_OW 56
6139: GO 6091
6141: POP
6142: POP
// enable ;
6143: ENABLE
// end ;
6144: PPOPN 2
6146: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
6147: GO 6149
6149: DISABLE
6150: LD_INT 0
6152: PPUSH
6153: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
6154: LD_INT 1
6156: PPUSH
6157: LD_INT 1
6159: PPUSH
6160: CALL_OW 287
6164: PUSH
6165: LD_INT 200
6167: PUSH
6168: LD_EXP 9
6172: MINUS
6173: PUSH
6174: LD_INT 100
6176: DIVREAL
6177: PUSH
6178: LD_INT 5
6180: MUL
6181: LESS
6182: IFFALSE 6205
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
6184: LD_INT 3
6186: PPUSH
6187: LD_INT 5
6189: PPUSH
6190: CALL_OW 12
6194: PPUSH
6195: LD_INT 1
6197: PPUSH
6198: LD_INT 1
6200: PPUSH
6201: CALL_OW 55
// enable ;
6205: ENABLE
// end ; end_of_file
6206: PPOPN 2
6208: END
// every 20 20$00 trigger apemanNumber do
6209: LD_EXP 34
6213: IFFALSE 6246
6215: GO 6217
6217: DISABLE
// begin enable ;
6218: ENABLE
// if apeLevel >= 8 then
6219: LD_EXP 39
6223: PUSH
6224: LD_INT 8
6226: GREATEREQUAL
6227: IFFALSE 6232
// disable else
6229: DISABLE
6230: GO 6246
// apeLevel := apeLevel + 1 ;
6232: LD_ADDR_EXP 39
6236: PUSH
6237: LD_EXP 39
6241: PUSH
6242: LD_INT 1
6244: PLUS
6245: ST_TO_ADDR
// end ;
6246: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6247: LD_EXP 34
6251: PUSH
6252: LD_EXP 35
6256: LESS
6257: IFFALSE 6397
6259: GO 6261
6261: DISABLE
6262: LD_INT 0
6264: PPUSH
6265: PPUSH
6266: PPUSH
6267: PPUSH
// begin enable ;
6268: ENABLE
// for i := 1 to apemanPos do
6269: LD_ADDR_VAR 0 1
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_EXP 37
6283: PUSH
6284: FOR_TO
6285: IFFALSE 6395
// begin if apemanPlayerCount [ i ] then
6287: LD_EXP 38
6291: PUSH
6292: LD_VAR 0 1
6296: ARRAY
6297: IFFALSE 6393
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6299: LD_EXP 38
6303: PUSH
6304: LD_VAR 0 1
6308: ARRAY
6309: PUSH
6310: LD_EXP 37
6314: PUSH
6315: LD_VAR 0 1
6319: ARRAY
6320: GREATER
6321: IFFALSE 6393
// begin ape := PrepareApeman ;
6323: LD_ADDR_VAR 0 2
6327: PUSH
6328: CALL 6908 0 0
6332: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6333: LD_VAR 0 2
6337: PPUSH
6338: LD_EXP 40
6342: PUSH
6343: LD_VAR 0 1
6347: ARRAY
6348: PPUSH
6349: LD_INT 0
6351: PPUSH
6352: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6356: LD_ADDR_EXP 37
6360: PUSH
6361: LD_EXP 37
6365: PPUSH
6366: LD_VAR 0 1
6370: PPUSH
6371: LD_EXP 37
6375: PUSH
6376: LD_VAR 0 1
6380: ARRAY
6381: PUSH
6382: LD_VAR 0 2
6386: UNION
6387: PPUSH
6388: CALL_OW 1
6392: ST_TO_ADDR
// end ; end ; end ;
6393: GO 6284
6395: POP
6396: POP
// end ;
6397: PPOPN 4
6399: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6400: LD_INT 0
6402: PPUSH
6403: PPUSH
6404: PPUSH
6405: PPUSH
6406: PPUSH
6407: PPUSH
6408: PPUSH
// playersAmount := 0 ;
6409: LD_ADDR_VAR 0 3
6413: PUSH
6414: LD_INT 0
6416: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6417: LD_ADDR_VAR 0 7
6421: PUSH
6422: LD_INT 2
6424: PUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 4
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: LD_INT 6
6436: PUSH
6437: LD_INT 7
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6448: LD_ADDR_EXP 40
6452: PUSH
6453: LD_INT 0
6455: PUSH
6456: LD_INT 0
6458: PUSH
6459: LD_INT 0
6461: PUSH
6462: LD_INT 0
6464: PUSH
6465: LD_INT 0
6467: PUSH
6468: LD_INT 0
6470: PUSH
6471: LD_INT 0
6473: PUSH
6474: LD_INT 0
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: ST_TO_ADDR
// for j = 1 to Side_Positions do
6487: LD_ADDR_VAR 0 4
6491: PUSH
6492: DOUBLE
6493: LD_INT 1
6495: DEC
6496: ST_TO_ADDR
6497: LD_EXP 19
6501: PUSH
6502: FOR_TO
6503: IFFALSE 6570
// if Side_Positions [ j ] then
6505: LD_EXP 19
6509: PUSH
6510: LD_VAR 0 4
6514: ARRAY
6515: IFFALSE 6568
// begin playersAmount := playersAmount + 1 ;
6517: LD_ADDR_VAR 0 3
6521: PUSH
6522: LD_VAR 0 3
6526: PUSH
6527: LD_INT 1
6529: PLUS
6530: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6531: LD_ADDR_EXP 40
6535: PUSH
6536: LD_EXP 40
6540: PPUSH
6541: LD_VAR 0 4
6545: PPUSH
6546: LD_VAR 0 7
6550: PUSH
6551: LD_EXP 19
6555: PUSH
6556: LD_VAR 0 4
6560: ARRAY
6561: ARRAY
6562: PPUSH
6563: CALL_OW 1
6567: ST_TO_ADDR
// end ;
6568: GO 6502
6570: POP
6571: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6572: LD_ADDR_EXP 36
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: LD_EXP 15
6584: MUL
6585: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6586: LD_ADDR_EXP 34
6590: PUSH
6591: LD_VAR 0 3
6595: PUSH
6596: LD_EXP 36
6600: MUL
6601: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6602: LD_ADDR_EXP 35
6606: PUSH
6607: LD_EXP 34
6611: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6612: LD_ADDR_EXP 37
6616: PUSH
6617: LD_INT 0
6619: PUSH
6620: LD_INT 0
6622: PUSH
6623: LD_INT 0
6625: PUSH
6626: LD_INT 0
6628: PUSH
6629: LD_INT 0
6631: PUSH
6632: LD_INT 0
6634: PUSH
6635: LD_INT 0
6637: PUSH
6638: LD_INT 0
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6651: LD_ADDR_EXP 38
6655: PUSH
6656: LD_INT 0
6658: PUSH
6659: LD_INT 0
6661: PUSH
6662: LD_INT 0
6664: PUSH
6665: LD_INT 0
6667: PUSH
6668: LD_INT 0
6670: PUSH
6671: LD_INT 0
6673: PUSH
6674: LD_INT 0
6676: PUSH
6677: LD_INT 0
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: ST_TO_ADDR
// apeLevel := 1 ;
6690: LD_ADDR_EXP 39
6694: PUSH
6695: LD_INT 1
6697: ST_TO_ADDR
// if not apemanNumber then
6698: LD_EXP 34
6702: NOT
6703: IFFALSE 6707
// exit ;
6705: GO 6903
// for i := 1 to apemanPerPlayer do
6707: LD_ADDR_VAR 0 2
6711: PUSH
6712: DOUBLE
6713: LD_INT 1
6715: DEC
6716: ST_TO_ADDR
6717: LD_EXP 36
6721: PUSH
6722: FOR_TO
6723: IFFALSE 6901
// begin for j := 1 to Side_Positions do
6725: LD_ADDR_VAR 0 4
6729: PUSH
6730: DOUBLE
6731: LD_INT 1
6733: DEC
6734: ST_TO_ADDR
6735: LD_EXP 19
6739: PUSH
6740: FOR_TO
6741: IFFALSE 6897
// if Side_Positions [ j ] then
6743: LD_EXP 19
6747: PUSH
6748: LD_VAR 0 4
6752: ARRAY
6753: IFFALSE 6895
// begin pos := Side_Positions [ j ] ;
6755: LD_ADDR_VAR 0 6
6759: PUSH
6760: LD_EXP 19
6764: PUSH
6765: LD_VAR 0 4
6769: ARRAY
6770: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6771: LD_ADDR_EXP 38
6775: PUSH
6776: LD_EXP 38
6780: PPUSH
6781: LD_VAR 0 4
6785: PPUSH
6786: LD_EXP 38
6790: PUSH
6791: LD_VAR 0 4
6795: ARRAY
6796: PUSH
6797: LD_INT 1
6799: PLUS
6800: PPUSH
6801: CALL_OW 1
6805: ST_TO_ADDR
// ape := PrepareApeman ;
6806: LD_ADDR_VAR 0 5
6810: PUSH
6811: CALL 6908 0 0
6815: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6816: LD_ADDR_EXP 37
6820: PUSH
6821: LD_EXP 37
6825: PPUSH
6826: LD_VAR 0 4
6830: PPUSH
6831: LD_EXP 37
6835: PUSH
6836: LD_VAR 0 4
6840: ARRAY
6841: PPUSH
6842: LD_EXP 37
6846: PUSH
6847: LD_VAR 0 4
6851: ARRAY
6852: PUSH
6853: LD_INT 1
6855: PLUS
6856: PPUSH
6857: LD_VAR 0 5
6861: PPUSH
6862: CALL_OW 1
6866: PPUSH
6867: CALL_OW 1
6871: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6872: LD_VAR 0 5
6876: PPUSH
6877: LD_EXP 40
6881: PUSH
6882: LD_VAR 0 4
6886: ARRAY
6887: PPUSH
6888: LD_INT 0
6890: PPUSH
6891: CALL_OW 49
// end ;
6895: GO 6740
6897: POP
6898: POP
// end ;
6899: GO 6722
6901: POP
6902: POP
// end ;
6903: LD_VAR 0 1
6907: RET
// export function PrepareApeman ; var bonus ; begin
6908: LD_INT 0
6910: PPUSH
6911: PPUSH
// uc_side := 0 ;
6912: LD_ADDR_OWVAR 20
6916: PUSH
6917: LD_INT 0
6919: ST_TO_ADDR
// uc_nation := 0 ;
6920: LD_ADDR_OWVAR 21
6924: PUSH
6925: LD_INT 0
6927: ST_TO_ADDR
// InitHc ;
6928: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6932: LD_ADDR_VAR 0 2
6936: PUSH
6937: LD_INT 1
6939: NEG
6940: PUSH
6941: LD_INT 0
6943: PUSH
6944: LD_INT 1
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: LIST
6951: PUSH
6952: LD_OWVAR 1
6956: PUSH
6957: LD_INT 3
6959: MOD
6960: PUSH
6961: LD_INT 1
6963: PLUS
6964: ARRAY
6965: ST_TO_ADDR
// hc_class := class_apeman ;
6966: LD_ADDR_OWVAR 28
6970: PUSH
6971: LD_INT 12
6973: ST_TO_ADDR
// hc_gallery :=  ;
6974: LD_ADDR_OWVAR 33
6978: PUSH
6979: LD_STRING 
6981: ST_TO_ADDR
// hc_name :=  ;
6982: LD_ADDR_OWVAR 26
6986: PUSH
6987: LD_STRING 
6989: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6990: LD_ADDR_OWVAR 31
6994: PUSH
6995: LD_EXP 39
6999: PUSH
7000: LD_VAR 0 2
7004: PLUS
7005: PUSH
7006: LD_EXP 39
7010: PUSH
7011: LD_VAR 0 2
7015: PLUS
7016: PUSH
7017: LD_EXP 39
7021: PUSH
7022: LD_VAR 0 2
7026: PLUS
7027: PUSH
7028: LD_EXP 39
7032: PUSH
7033: LD_VAR 0 2
7037: PLUS
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7045: LD_ADDR_OWVAR 35
7049: PUSH
7050: LD_INT 10
7052: PUSH
7053: LD_VAR 0 2
7057: MUL
7058: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7059: LD_ADDR_OWVAR 29
7063: PUSH
7064: LD_INT 12
7066: PUSH
7067: LD_INT 10
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: ST_TO_ADDR
// result := CreateHuman ;
7074: LD_ADDR_VAR 0 1
7078: PUSH
7079: CALL_OW 44
7083: ST_TO_ADDR
// end ;
7084: LD_VAR 0 1
7088: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7089: LD_INT 0
7091: PPUSH
7092: PPUSH
7093: PPUSH
// if not ape then
7094: LD_VAR 0 1
7098: NOT
7099: IFFALSE 7103
// exit ;
7101: GO 7228
// side := GetSide ( ape ) ;
7103: LD_ADDR_VAR 0 3
7107: PUSH
7108: LD_VAR 0 1
7112: PPUSH
7113: CALL_OW 255
7117: ST_TO_ADDR
// if not side then
7118: LD_VAR 0 3
7122: NOT
7123: IFFALSE 7177
// begin for i = 1 to apemanPos do
7125: LD_ADDR_VAR 0 4
7129: PUSH
7130: DOUBLE
7131: LD_INT 1
7133: DEC
7134: ST_TO_ADDR
7135: LD_EXP 37
7139: PUSH
7140: FOR_TO
7141: IFFALSE 7175
// if ape in apemanPos [ i ] then
7143: LD_VAR 0 1
7147: PUSH
7148: LD_EXP 37
7152: PUSH
7153: LD_VAR 0 4
7157: ARRAY
7158: IN
7159: IFFALSE 7173
// begin side := i ;
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_VAR 0 4
7170: ST_TO_ADDR
// break ;
7171: GO 7175
// end ;
7173: GO 7140
7175: POP
7176: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7177: LD_ADDR_EXP 37
7181: PUSH
7182: LD_EXP 37
7186: PPUSH
7187: LD_VAR 0 3
7191: PPUSH
7192: LD_EXP 37
7196: PUSH
7197: LD_VAR 0 3
7201: ARRAY
7202: PUSH
7203: LD_VAR 0 1
7207: DIFF
7208: PPUSH
7209: CALL_OW 1
7213: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7214: LD_ADDR_EXP 34
7218: PUSH
7219: LD_EXP 34
7223: PUSH
7224: LD_INT 1
7226: MINUS
7227: ST_TO_ADDR
// end ; end_of_file
7228: LD_VAR 0 2
7232: RET
// var respawn , inqueue ; export function init_respawning ; begin
7233: LD_INT 0
7235: PPUSH
// respawn := Rand ( 1 , 8 ) ;
7236: LD_ADDR_LOC 9
7240: PUSH
7241: LD_INT 1
7243: PPUSH
7244: LD_INT 8
7246: PPUSH
7247: CALL_OW 12
7251: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7252: LD_ADDR_LOC 10
7256: PUSH
7257: LD_INT 0
7259: PUSH
7260: LD_INT 0
7262: PUSH
7263: LD_INT 0
7265: PUSH
7266: LD_INT 0
7268: PUSH
7269: LD_INT 0
7271: PUSH
7272: LD_INT 0
7274: PUSH
7275: LD_INT 0
7277: PUSH
7278: LD_INT 0
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: ST_TO_ADDR
// end ;
7291: LD_VAR 0 1
7295: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
7296: GO 7298
7298: DISABLE
7299: LD_INT 0
7301: PPUSH
7302: PPUSH
7303: PPUSH
7304: PPUSH
// begin if respawning_time_max = 0 then
7305: LD_EXP 13
7309: PUSH
7310: LD_INT 0
7312: EQUAL
7313: IFFALSE 7317
// exit ;
7315: GO 7824
// if respawn = 8 then
7317: LD_LOC 9
7321: PUSH
7322: LD_INT 8
7324: EQUAL
7325: IFFALSE 7337
// respawn := 1 else
7327: LD_ADDR_LOC 9
7331: PUSH
7332: LD_INT 1
7334: ST_TO_ADDR
7335: GO 7351
// respawn := respawn + 1 ;
7337: LD_ADDR_LOC 9
7341: PUSH
7342: LD_LOC 9
7346: PUSH
7347: LD_INT 1
7349: PLUS
7350: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
7351: LD_EXP 19
7355: PUSH
7356: LD_LOC 9
7360: ARRAY
7361: PUSH
7362: LD_LOC 10
7366: PUSH
7367: LD_LOC 9
7371: ARRAY
7372: NOT
7373: AND
7374: IFFALSE 7823
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
7376: LD_ADDR_VAR 0 1
7380: PUSH
7381: LD_INT 21
7383: PUSH
7384: LD_INT 1
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PUSH
7391: LD_INT 22
7393: PUSH
7394: LD_LOC 9
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 3
7405: PUSH
7406: LD_INT 23
7408: PUSH
7409: LD_INT 0
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PPUSH
7422: CALL_OW 69
7426: ST_TO_ADDR
// if n < number_of_people then
7427: LD_VAR 0 1
7431: PUSH
7432: LD_EXP 5
7436: LESS
7437: IFFALSE 7820
// begin aktresp := respawn ;
7439: LD_ADDR_VAR 0 3
7443: PUSH
7444: LD_LOC 9
7448: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7449: LD_ADDR_LOC 10
7453: PUSH
7454: LD_LOC 10
7458: PPUSH
7459: LD_VAR 0 3
7463: PPUSH
7464: LD_INT 1
7466: PPUSH
7467: CALL_OW 1
7471: ST_TO_ADDR
// enable ;
7472: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7473: LD_EXP 12
7477: PPUSH
7478: LD_EXP 13
7482: PPUSH
7483: CALL_OW 12
7487: PPUSH
7488: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7492: LD_ADDR_LOC 10
7496: PUSH
7497: LD_LOC 10
7501: PPUSH
7502: LD_VAR 0 3
7506: PPUSH
7507: LD_INT 0
7509: PPUSH
7510: CALL_OW 1
7514: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7515: LD_ADDR_VAR 0 2
7519: PUSH
7520: LD_INT 21
7522: PUSH
7523: LD_INT 3
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PUSH
7530: LD_INT 2
7532: PUSH
7533: LD_INT 30
7535: PUSH
7536: LD_INT 0
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: LD_INT 30
7545: PUSH
7546: LD_INT 1
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 50
7560: PUSH
7561: EMPTY
7562: LIST
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_VAR 0 3
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: PPUSH
7582: CALL_OW 69
7586: ST_TO_ADDR
// if building_list = 0 then
7587: LD_VAR 0 2
7591: PUSH
7592: LD_INT 0
7594: EQUAL
7595: IFFALSE 7640
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7597: LD_ADDR_VAR 0 2
7601: PUSH
7602: LD_INT 21
7604: PUSH
7605: LD_INT 3
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: PUSH
7612: LD_INT 50
7614: PUSH
7615: EMPTY
7616: LIST
7617: PUSH
7618: LD_INT 22
7620: PUSH
7621: LD_VAR 0 3
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: PPUSH
7635: CALL_OW 69
7639: ST_TO_ADDR
// if building_list = 0 then
7640: LD_VAR 0 2
7644: PUSH
7645: LD_INT 0
7647: EQUAL
7648: IFFALSE 7652
// exit ;
7650: GO 7824
// hc_name :=  ;
7652: LD_ADDR_OWVAR 26
7656: PUSH
7657: LD_STRING 
7659: ST_TO_ADDR
// hc_importance := 0 ;
7660: LD_ADDR_OWVAR 32
7664: PUSH
7665: LD_INT 0
7667: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7668: LD_INT 0
7670: PPUSH
7671: LD_INT 0
7673: PPUSH
7674: LD_EXP 6
7678: PUSH
7679: LD_INT 2
7681: DIV
7682: PPUSH
7683: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7687: LD_ADDR_OWVAR 21
7691: PUSH
7692: LD_EXP 20
7696: PUSH
7697: LD_VAR 0 3
7701: ARRAY
7702: ST_TO_ADDR
// uc_side := aktresp ;
7703: LD_ADDR_OWVAR 20
7707: PUSH
7708: LD_VAR 0 3
7712: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
7713: LD_ADDR_VAR 0 4
7717: PUSH
7718: LD_VAR 0 2
7722: PUSH
7723: LD_INT 1
7725: PPUSH
7726: LD_VAR 0 2
7730: PUSH
7731: LD_INT 0
7733: PLUS
7734: PPUSH
7735: CALL_OW 12
7739: ARRAY
7740: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
7741: LD_VAR 0 4
7745: PPUSH
7746: CALL_OW 266
7750: PUSH
7751: LD_INT 0
7753: PUSH
7754: LD_INT 1
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: IN
7761: IFFALSE 7773
// n = 25 else
7763: LD_ADDR_VAR 0 1
7767: PUSH
7768: LD_INT 25
7770: ST_TO_ADDR
7771: GO 7781
// n = 10 ;
7773: LD_ADDR_VAR 0 1
7777: PUSH
7778: LD_INT 10
7780: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
7781: CALL_OW 44
7785: PPUSH
7786: LD_VAR 0 4
7790: PPUSH
7791: CALL_OW 250
7795: PPUSH
7796: LD_VAR 0 4
7800: PPUSH
7801: CALL_OW 251
7805: PPUSH
7806: LD_VAR 0 1
7810: PPUSH
7811: LD_INT 1
7813: PPUSH
7814: CALL_OW 50
// end else
7818: GO 7821
// enable ;
7820: ENABLE
// end else
7821: GO 7824
// enable ;
7823: ENABLE
// end ; end_of_file
7824: PPOPN 4
7826: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7827: LD_VAR 0 1
7831: PPUSH
7832: CALL_OW 266
7836: PUSH
7837: LD_INT 0
7839: PUSH
7840: LD_INT 1
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: IN
7847: IFFALSE 7872
// SetBName ( b , @ & GetSide ( b ) ) ;
7849: LD_VAR 0 1
7853: PPUSH
7854: LD_STRING @
7856: PUSH
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 255
7866: STR
7867: PPUSH
7868: CALL_OW 500
// if def_game_rules then
7872: LD_EXP 43
7876: IFFALSE 7913
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7878: LD_VAR 0 1
7882: PPUSH
7883: LD_VAR 0 1
7887: PPUSH
7888: CALL_OW 266
7892: PPUSH
7893: LD_VAR 0 1
7897: PPUSH
7898: CALL_OW 255
7902: PPUSH
7903: LD_INT 0
7905: PPUSH
7906: LD_INT 1
7908: PPUSH
7909: CALL 13319 0 5
// end ;
7913: PPOPN 2
7915: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7916: LD_VAR 0 1
7920: PPUSH
7921: CALL_OW 266
7925: PUSH
7926: LD_INT 0
7928: PUSH
7929: LD_INT 1
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: IN
7936: IFFALSE 7961
// SetBName ( b , @ & GetSide ( b ) ) ;
7938: LD_VAR 0 1
7942: PPUSH
7943: LD_STRING @
7945: PUSH
7946: LD_VAR 0 1
7950: PPUSH
7951: CALL_OW 255
7955: STR
7956: PPUSH
7957: CALL_OW 500
// if def_game_rules then
7961: LD_EXP 43
7965: IFFALSE 8004
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7967: LD_VAR 0 1
7971: PPUSH
7972: LD_VAR 0 1
7976: PPUSH
7977: CALL_OW 266
7981: PPUSH
7982: LD_VAR 0 1
7986: PPUSH
7987: CALL_OW 255
7991: PPUSH
7992: LD_VAR 0 2
7996: PPUSH
7997: LD_INT 1
7999: PPUSH
8000: CALL 13319 0 5
// end ;
8004: PPOPN 3
8006: END
// on VehicleConstructed ( veh , fac ) do var side ;
8007: LD_INT 0
8009: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8010: LD_VAR 0 1
8014: PPUSH
8015: CALL_OW 263
8019: PUSH
8020: LD_INT 5
8022: EQUAL
8023: IFFALSE 8165
// begin side := GetSide ( veh ) ;
8025: LD_ADDR_VAR 0 3
8029: PUSH
8030: LD_VAR 0 1
8034: PPUSH
8035: CALL_OW 255
8039: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8040: LD_ADDR_EXP 37
8044: PUSH
8045: LD_EXP 37
8049: PPUSH
8050: LD_VAR 0 3
8054: PPUSH
8055: LD_EXP 37
8059: PUSH
8060: LD_VAR 0 3
8064: ARRAY
8065: PPUSH
8066: LD_INT 52
8068: PUSH
8069: EMPTY
8070: LIST
8071: PPUSH
8072: CALL_OW 72
8076: PUSH
8077: LD_INT 22
8079: PUSH
8080: LD_VAR 0 3
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: PUSH
8089: LD_INT 2
8091: PUSH
8092: LD_INT 33
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 25
8104: PUSH
8105: LD_INT 12
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 25
8114: PUSH
8115: LD_INT 15
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 25
8124: PUSH
8125: LD_INT 16
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 25
8134: PUSH
8135: LD_INT 17
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PPUSH
8154: CALL_OW 69
8158: UNION
8159: PPUSH
8160: CALL_OW 1
8164: ST_TO_ADDR
// end ; end ;
8165: PPOPN 3
8167: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
8168: LD_INT 0
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 257
8183: PUSH
8184: LD_INT 12
8186: PUSH
8187: LD_INT 15
8189: PUSH
8190: LD_INT 17
8192: PUSH
8193: LD_INT 16
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: IN
8202: PUSH
8203: LD_VAR 0 1
8207: PPUSH
8208: CALL_OW 263
8212: PUSH
8213: LD_INT 5
8215: EQUAL
8216: OR
8217: IFFALSE 8228
// ApeKilled ( j ) ;
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL 7089 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
8228: LD_VAR 0 1
8232: PPUSH
8233: CALL_OW 266
8237: PUSH
8238: LD_INT 0
8240: PUSH
8241: LD_INT 1
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: IN
8248: IFFALSE 8330
// begin pos := Side_Positions [ GetSide ( j ) ] ;
8250: LD_ADDR_VAR 0 4
8254: PUSH
8255: LD_EXP 19
8259: PUSH
8260: LD_VAR 0 1
8264: PPUSH
8265: CALL_OW 255
8269: ARRAY
8270: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
8271: LD_ADDR_VAR 0 2
8275: PUSH
8276: LD_EXP 26
8280: PUSH
8281: LD_VAR 0 4
8285: ARRAY
8286: PUSH
8287: LD_INT 1
8289: ARRAY
8290: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
8291: LD_ADDR_VAR 0 3
8295: PUSH
8296: LD_EXP 26
8300: PUSH
8301: LD_VAR 0 4
8305: ARRAY
8306: PUSH
8307: LD_INT 2
8309: ARRAY
8310: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
8311: LD_VAR 0 2
8315: PPUSH
8316: LD_VAR 0 3
8320: PPUSH
8321: CALL_OW 420
8325: PPUSH
8326: CALL_OW 419
// end ; if def_game_rules then
8330: LD_EXP 43
8334: IFFALSE 8433
// if ( GetType ( j ) = 3 ) then
8336: LD_VAR 0 1
8340: PPUSH
8341: CALL_OW 247
8345: PUSH
8346: LD_INT 3
8348: EQUAL
8349: IFFALSE 8389
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8351: LD_VAR 0 1
8355: PPUSH
8356: LD_VAR 0 1
8360: PPUSH
8361: CALL_OW 266
8365: PPUSH
8366: LD_VAR 0 1
8370: PPUSH
8371: CALL_OW 255
8375: PPUSH
8376: LD_INT 0
8378: PPUSH
8379: LD_INT 1
8381: NEG
8382: PPUSH
8383: CALL 13319 0 5
8387: GO 8433
// if ( GetChassis ( j ) = 25 ) then
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL_OW 265
8398: PUSH
8399: LD_INT 25
8401: EQUAL
8402: IFFALSE 8433
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8404: LD_VAR 0 1
8408: PPUSH
8409: LD_INT 37
8411: PPUSH
8412: LD_VAR 0 1
8416: PPUSH
8417: CALL_OW 255
8421: PPUSH
8422: LD_INT 0
8424: PPUSH
8425: LD_INT 1
8427: NEG
8428: PPUSH
8429: CALL 13319 0 5
// end ;
8433: PPOPN 5
8435: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8436: LD_EXP 43
8440: PUSH
8441: LD_VAR 0 1
8445: PPUSH
8446: CALL_OW 265
8450: PUSH
8451: LD_INT 25
8453: EQUAL
8454: AND
8455: IFFALSE 8487
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8457: LD_VAR 0 1
8461: PPUSH
8462: LD_INT 37
8464: PPUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL_OW 255
8474: PPUSH
8475: LD_VAR 0 3
8479: PPUSH
8480: LD_INT 1
8482: PPUSH
8483: CALL 13319 0 5
// end ;
8487: PPOPN 4
8489: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8490: LD_VAR 0 1
8494: PPUSH
8495: LD_VAR 0 2
8499: PPUSH
8500: LD_VAR 0 3
8504: PPUSH
8505: LD_OWVAR 2
8509: PPUSH
8510: CALL 14090 0 4
8514: PPOPN 3
8516: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8517: GO 8519
8519: DISABLE
8520: LD_INT 0
8522: PPUSH
8523: PPUSH
8524: PPUSH
8525: PPUSH
8526: PPUSH
// begin sib_mined := [ ] ;
8527: LD_ADDR_VAR 0 5
8531: PUSH
8532: EMPTY
8533: ST_TO_ADDR
// for i := 1 to 8 do
8534: LD_ADDR_VAR 0 1
8538: PUSH
8539: DOUBLE
8540: LD_INT 1
8542: DEC
8543: ST_TO_ADDR
8544: LD_INT 8
8546: PUSH
8547: FOR_TO
8548: IFFALSE 8704
// if Side_Positions [ i ] then
8550: LD_EXP 19
8554: PUSH
8555: LD_VAR 0 1
8559: ARRAY
8560: IFFALSE 8688
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8562: LD_ADDR_VAR 0 4
8566: PUSH
8567: LD_INT 22
8569: PUSH
8570: LD_VAR 0 1
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 2
8581: PUSH
8582: LD_INT 30
8584: PUSH
8585: LD_INT 0
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: LD_INT 30
8594: PUSH
8595: LD_INT 1
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PPUSH
8611: CALL_OW 69
8615: ST_TO_ADDR
// pom := 0 ;
8616: LD_ADDR_VAR 0 3
8620: PUSH
8621: LD_INT 0
8623: ST_TO_ADDR
// for base in filter do
8624: LD_ADDR_VAR 0 2
8628: PUSH
8629: LD_VAR 0 4
8633: PUSH
8634: FOR_IN
8635: IFFALSE 8668
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8637: LD_ADDR_VAR 0 3
8641: PUSH
8642: LD_VAR 0 3
8646: PUSH
8647: LD_VAR 0 2
8651: PPUSH
8652: CALL_OW 274
8656: PPUSH
8657: LD_INT 3
8659: PPUSH
8660: CALL_OW 275
8664: PLUS
8665: ST_TO_ADDR
8666: GO 8634
8668: POP
8669: POP
// sib_mined := sib_mined ^ pom ;
8670: LD_ADDR_VAR 0 5
8674: PUSH
8675: LD_VAR 0 5
8679: PUSH
8680: LD_VAR 0 3
8684: ADD
8685: ST_TO_ADDR
// end else
8686: GO 8702
// sib_mined := sib_mined ^ 0 ;
8688: LD_ADDR_VAR 0 5
8692: PUSH
8693: LD_VAR 0 5
8697: PUSH
8698: LD_INT 0
8700: ADD
8701: ST_TO_ADDR
8702: GO 8547
8704: POP
8705: POP
// if not def_public_score then
8706: LD_EXP 2
8710: NOT
8711: IFFALSE 8801
// begin ExtraStrings := [ ] ;
8713: LD_ADDR_EXP 59
8717: PUSH
8718: EMPTY
8719: ST_TO_ADDR
// for i := 1 to 8 do
8720: LD_ADDR_VAR 0 1
8724: PUSH
8725: DOUBLE
8726: LD_INT 1
8728: DEC
8729: ST_TO_ADDR
8730: LD_INT 8
8732: PUSH
8733: FOR_TO
8734: IFFALSE 8797
// if Side_Positions [ i ] then
8736: LD_EXP 19
8740: PUSH
8741: LD_VAR 0 1
8745: ARRAY
8746: IFFALSE 8795
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8748: LD_ADDR_EXP 59
8752: PUSH
8753: LD_EXP 59
8757: PUSH
8758: LD_STRING #AlienBase-MinedPublic
8760: PUSH
8761: LD_VAR 0 1
8765: PUSH
8766: LD_VAR 0 1
8770: PUSH
8771: LD_VAR 0 5
8775: PUSH
8776: LD_VAR 0 1
8780: ARRAY
8781: PUSH
8782: LD_EXP 11
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: ADD
8794: ST_TO_ADDR
8795: GO 8733
8797: POP
8798: POP
// end else
8799: GO 8830
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8801: LD_ADDR_EXP 59
8805: PUSH
8806: LD_STRING #AlienBase-Mined
8808: PUSH
8809: LD_VAR 0 5
8813: PUSH
8814: LD_OWVAR 2
8818: ARRAY
8819: PUSH
8820: LD_EXP 11
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: LIST
8829: ST_TO_ADDR
// for i := 1 to 8 do
8830: LD_ADDR_VAR 0 1
8834: PUSH
8835: DOUBLE
8836: LD_INT 1
8838: DEC
8839: ST_TO_ADDR
8840: LD_INT 8
8842: PUSH
8843: FOR_TO
8844: IFFALSE 8914
// if sib_mined [ i ] >= amount_of_siberit then
8846: LD_VAR 0 5
8850: PUSH
8851: LD_VAR 0 1
8855: ARRAY
8856: PUSH
8857: LD_EXP 11
8861: GREATEREQUAL
8862: IFFALSE 8912
// begin wait ( 0 0$1 ) ;
8864: LD_INT 35
8866: PPUSH
8867: CALL_OW 67
// if IAmServer then
8871: CALL_OW 518
8875: IFFALSE 8884
// wait ( 0 0$1 ) ;
8877: LD_INT 35
8879: PPUSH
8880: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8884: LD_VAR 0 5
8888: PUSH
8889: LD_OWVAR 2
8893: ARRAY
8894: PUSH
8895: LD_EXP 11
8899: GREATEREQUAL
8900: IFFALSE 8908
// YouWinInMultiplayer else
8902: CALL_OW 106
8906: GO 8912
// YouLostInMultiplayer ;
8908: CALL_OW 107
// end ;
8912: GO 8843
8914: POP
8915: POP
// enable ;
8916: ENABLE
// end ; end_of_file
8917: PPOPN 5
8919: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8920: LD_INT 0
8922: PPUSH
8923: PPUSH
// for un in battle_flags_id do
8924: LD_ADDR_VAR 0 2
8928: PUSH
8929: LD_EXP 31
8933: PUSH
8934: FOR_IN
8935: IFFALSE 9010
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8937: LD_VAR 0 2
8941: PPUSH
8942: LD_INT 1
8944: PUSH
8945: LD_LOC 11
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 2
8956: PUSH
8957: LD_LOC 11
8961: PUSH
8962: LD_INT 2
8964: DIV
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 3
8972: PUSH
8973: LD_LOC 11
8977: PUSH
8978: LD_INT 5
8980: DIV
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: LD_INT 20
8988: PUSH
8989: LD_LOC 11
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: PPUSH
9004: CALL_OW 423
9008: GO 8934
9010: POP
9011: POP
// end ;
9012: LD_VAR 0 1
9016: RET
// every 1 do var un ;
9017: GO 9019
9019: DISABLE
9020: LD_INT 0
9022: PPUSH
// begin if not def_morale_flags then
9023: LD_EXP 52
9027: NOT
9028: IFFALSE 9032
// exit ;
9030: GO 9109
// if not morale_decreasing_time then
9032: LD_EXP 10
9036: NOT
9037: IFFALSE 9041
// exit ;
9039: GO 9109
// strength = 100 ;
9041: LD_ADDR_LOC 11
9045: PUSH
9046: LD_INT 100
9048: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
9049: LD_EXP 10
9053: PPUSH
9054: CALL_OW 67
// strength := strength - 1 ;
9058: LD_ADDR_LOC 11
9062: PUSH
9063: LD_LOC 11
9067: PUSH
9068: LD_INT 1
9070: MINUS
9071: ST_TO_ADDR
// Update_Flags ;
9072: CALL 8920 0 0
// until not strength ;
9076: LD_LOC 11
9080: NOT
9081: IFFALSE 9049
// for un in battle_flags_id do
9083: LD_ADDR_VAR 0 1
9087: PUSH
9088: LD_EXP 31
9092: PUSH
9093: FOR_IN
9094: IFFALSE 9107
// KillBattleFlag ( un ) ;
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 419
9105: GO 9093
9107: POP
9108: POP
// end ; end_of_file
9109: PPOPN 1
9111: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
9112: LD_INT 0
9114: PPUSH
9115: PPUSH
9116: PPUSH
// enable ( 600 ) ;
9117: LD_INT 600
9119: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
9120: LD_ADDR_VAR 0 2
9124: PUSH
9125: DOUBLE
9126: LD_INT 1
9128: DEC
9129: ST_TO_ADDR
9130: LD_EXP 41
9134: PUSH
9135: FOR_TO
9136: IFFALSE 9291
// if Position_Sides [ i ] then
9138: LD_EXP 23
9142: PUSH
9143: LD_VAR 0 2
9147: ARRAY
9148: IFFALSE 9289
// for j := 1 to 8 do
9150: LD_ADDR_VAR 0 3
9154: PUSH
9155: DOUBLE
9156: LD_INT 1
9158: DEC
9159: ST_TO_ADDR
9160: LD_INT 8
9162: PUSH
9163: FOR_TO
9164: IFFALSE 9287
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9166: LD_EXP 19
9170: PUSH
9171: LD_VAR 0 3
9175: ARRAY
9176: PUSH
9177: LD_EXP 17
9181: PUSH
9182: LD_EXP 23
9186: PUSH
9187: LD_VAR 0 2
9191: ARRAY
9192: ARRAY
9193: PUSH
9194: LD_EXP 17
9198: PUSH
9199: LD_VAR 0 3
9203: ARRAY
9204: NONEQUAL
9205: PUSH
9206: LD_EXP 21
9210: NOT
9211: PUSH
9212: LD_EXP 23
9216: PUSH
9217: LD_VAR 0 2
9221: ARRAY
9222: PUSH
9223: LD_VAR 0 3
9227: NONEQUAL
9228: AND
9229: OR
9230: AND
9231: IFFALSE 9255
// HideArea ( j , BuildUpAreas [ i ] ) else
9233: LD_VAR 0 3
9237: PPUSH
9238: LD_EXP 41
9242: PUSH
9243: LD_VAR 0 2
9247: ARRAY
9248: PPUSH
9249: CALL_OW 333
9253: GO 9285
// if ( j = your_side ) then
9255: LD_VAR 0 3
9259: PUSH
9260: LD_OWVAR 2
9264: EQUAL
9265: IFFALSE 9285
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
9267: LD_EXP 41
9271: PUSH
9272: LD_VAR 0 2
9276: ARRAY
9277: PPUSH
9278: LD_INT 5
9280: PPUSH
9281: CALL_OW 424
9285: GO 9163
9287: POP
9288: POP
9289: GO 9135
9291: POP
9292: POP
// end ;
9293: LD_VAR 0 1
9297: RET
// export function EndBuildUp ; var i , j ; begin
9298: LD_INT 0
9300: PPUSH
9301: PPUSH
9302: PPUSH
// disable ( 600 ) ;
9303: LD_INT 600
9305: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
9306: LD_ADDR_VAR 0 2
9310: PUSH
9311: DOUBLE
9312: LD_INT 1
9314: DEC
9315: ST_TO_ADDR
9316: LD_EXP 41
9320: PUSH
9321: FOR_TO
9322: IFFALSE 9477
// if Position_Sides [ i ] then
9324: LD_EXP 23
9328: PUSH
9329: LD_VAR 0 2
9333: ARRAY
9334: IFFALSE 9475
// for j := 1 to 8 do
9336: LD_ADDR_VAR 0 3
9340: PUSH
9341: DOUBLE
9342: LD_INT 1
9344: DEC
9345: ST_TO_ADDR
9346: LD_INT 8
9348: PUSH
9349: FOR_TO
9350: IFFALSE 9473
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9352: LD_EXP 19
9356: PUSH
9357: LD_VAR 0 3
9361: ARRAY
9362: PUSH
9363: LD_EXP 17
9367: PUSH
9368: LD_EXP 23
9372: PUSH
9373: LD_VAR 0 2
9377: ARRAY
9378: ARRAY
9379: PUSH
9380: LD_EXP 17
9384: PUSH
9385: LD_VAR 0 3
9389: ARRAY
9390: NONEQUAL
9391: PUSH
9392: LD_EXP 21
9396: NOT
9397: PUSH
9398: LD_EXP 23
9402: PUSH
9403: LD_VAR 0 2
9407: ARRAY
9408: PUSH
9409: LD_VAR 0 3
9413: NONEQUAL
9414: AND
9415: OR
9416: AND
9417: IFFALSE 9441
// ShowArea ( j , BuildUpAreas [ i ] ) else
9419: LD_VAR 0 3
9423: PPUSH
9424: LD_EXP 41
9428: PUSH
9429: LD_VAR 0 2
9433: ARRAY
9434: PPUSH
9435: CALL_OW 334
9439: GO 9471
// if ( j = your_side ) then
9441: LD_VAR 0 3
9445: PUSH
9446: LD_OWVAR 2
9450: EQUAL
9451: IFFALSE 9471
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9453: LD_EXP 41
9457: PUSH
9458: LD_VAR 0 2
9462: ARRAY
9463: PPUSH
9464: LD_INT 0
9466: PPUSH
9467: CALL_OW 424
9471: GO 9349
9473: POP
9474: POP
9475: GO 9321
9477: POP
9478: POP
// end ;
9479: LD_VAR 0 1
9483: RET
// every 5 marked 600 do var i , un ;
9484: GO 9486
9486: DISABLE
9487: LD_INT 0
9489: PPUSH
9490: PPUSH
// begin for i := 1 to BuildUpAreas do
9491: LD_ADDR_VAR 0 1
9495: PUSH
9496: DOUBLE
9497: LD_INT 1
9499: DEC
9500: ST_TO_ADDR
9501: LD_EXP 41
9505: PUSH
9506: FOR_TO
9507: IFFALSE 9662
// if Position_Sides [ i ] then
9509: LD_EXP 23
9513: PUSH
9514: LD_VAR 0 1
9518: ARRAY
9519: IFFALSE 9660
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9521: LD_ADDR_VAR 0 2
9525: PUSH
9526: LD_EXP 41
9530: PUSH
9531: LD_VAR 0 1
9535: ARRAY
9536: PPUSH
9537: LD_INT 2
9539: PUSH
9540: LD_INT 21
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: LD_INT 21
9552: PUSH
9553: LD_INT 2
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 22
9567: PUSH
9568: LD_OWVAR 2
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PPUSH
9581: CALL_OW 70
9585: PUSH
9586: FOR_IN
9587: IFFALSE 9658
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9589: LD_EXP 17
9593: PUSH
9594: LD_EXP 23
9598: PUSH
9599: LD_VAR 0 1
9603: ARRAY
9604: ARRAY
9605: PUSH
9606: LD_EXP 17
9610: PUSH
9611: LD_OWVAR 2
9615: ARRAY
9616: NONEQUAL
9617: PUSH
9618: LD_EXP 21
9622: NOT
9623: PUSH
9624: LD_EXP 23
9628: PUSH
9629: LD_VAR 0 1
9633: ARRAY
9634: PUSH
9635: LD_OWVAR 2
9639: NONEQUAL
9640: AND
9641: OR
9642: IFFALSE 9656
// ComMoveToArea ( un , BuildUpEscape ) ;
9644: LD_VAR 0 2
9648: PPUSH
9649: LD_INT 14
9651: PPUSH
9652: CALL_OW 113
9656: GO 9586
9658: POP
9659: POP
9660: GO 9506
9662: POP
9663: POP
// enable ;
9664: ENABLE
// end ;
9665: PPOPN 2
9667: END
// every 1 do
9668: GO 9670
9670: DISABLE
// if ( def_builduptime > 0 ) then
9671: LD_EXP 57
9675: PUSH
9676: LD_INT 0
9678: GREATER
9679: IFFALSE 9694
// begin wait ( buildUpTime_Delay ) ;
9681: LD_EXP 14
9685: PPUSH
9686: CALL_OW 67
// EndBuildUp ;
9690: CALL 9298 0 0
// end ; end_of_file
9694: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
9695: GO 9697
9697: DISABLE
9698: LD_INT 0
9700: PPUSH
// begin enable ;
9701: ENABLE
// for x := 1 to 8 do
9702: LD_ADDR_VAR 0 1
9706: PUSH
9707: DOUBLE
9708: LD_INT 1
9710: DEC
9711: ST_TO_ADDR
9712: LD_INT 8
9714: PUSH
9715: FOR_TO
9716: IFFALSE 9800
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
9718: LD_LOC 18
9722: PUSH
9723: LD_VAR 0 1
9727: ARRAY
9728: PUSH
9729: LD_INT 5
9731: GREATER
9732: PUSH
9733: LD_LOC 16
9737: PUSH
9738: LD_VAR 0 1
9742: ARRAY
9743: PUSH
9744: LD_INT 1
9746: NEG
9747: EQUAL
9748: AND
9749: IFFALSE 9798
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
9751: LD_ADDR_LOC 17
9755: PUSH
9756: LD_LOC 17
9760: PPUSH
9761: LD_VAR 0 1
9765: PPUSH
9766: LD_LOC 17
9770: PUSH
9771: LD_VAR 0 1
9775: ARRAY
9776: PUSH
9777: LD_INT 6
9779: PLUS
9780: PPUSH
9781: CALL_OW 1
9785: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
9786: LD_VAR 0 1
9790: PPUSH
9791: LD_INT 0
9793: PPUSH
9794: CALL 9972 0 2
// end ;
9798: GO 9715
9800: POP
9801: POP
// end ;
9802: PPOPN 1
9804: END
// every 0 0$1 marked 200 do var BGL , x ;
9805: GO 9807
9807: DISABLE
9808: LD_INT 0
9810: PPUSH
9811: PPUSH
// begin enable ;
9812: ENABLE
// for x := 1 to 8 do
9813: LD_ADDR_VAR 0 2
9817: PUSH
9818: DOUBLE
9819: LD_INT 1
9821: DEC
9822: ST_TO_ADDR
9823: LD_INT 8
9825: PUSH
9826: FOR_TO
9827: IFFALSE 9958
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
9829: LD_LOC 16
9833: PUSH
9834: LD_VAR 0 2
9838: ARRAY
9839: PUSH
9840: LD_INT 1
9842: NEG
9843: GREATER
9844: PUSH
9845: LD_LOC 16
9849: PUSH
9850: LD_VAR 0 2
9854: ARRAY
9855: PPUSH
9856: CALL_OW 300
9860: AND
9861: IFFALSE 9956
// begin BGL := GetLives ( BloodGods [ x ] ) ;
9863: LD_ADDR_VAR 0 1
9867: PUSH
9868: LD_LOC 16
9872: PUSH
9873: LD_VAR 0 2
9877: ARRAY
9878: PPUSH
9879: CALL_OW 256
9883: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
9884: LD_VAR 0 1
9888: PUSH
9889: LD_INT 1000
9891: LESS
9892: PUSH
9893: LD_VAR 0 1
9897: PUSH
9898: LD_INT 100
9900: GREATER
9901: AND
9902: IFFALSE 9956
// begin BGL := BGL + 10 ;
9904: LD_ADDR_VAR 0 1
9908: PUSH
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 10
9916: PLUS
9917: ST_TO_ADDR
// if BGL > 1000 then
9918: LD_VAR 0 1
9922: PUSH
9923: LD_INT 1000
9925: GREATER
9926: IFFALSE 9936
// BGL := 1000 ;
9928: LD_ADDR_VAR 0 1
9932: PUSH
9933: LD_INT 1000
9935: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
9936: LD_LOC 16
9940: PUSH
9941: LD_VAR 0 2
9945: ARRAY
9946: PPUSH
9947: LD_VAR 0 1
9951: PPUSH
9952: CALL_OW 234
// end ; end ;
9956: GO 9826
9958: POP
9959: POP
// end ;
9960: PPOPN 2
9962: END
// every 0 0$1 marked 200 do
9963: GO 9965
9965: DISABLE
// begin DisplayTimeWithKills ;
9966: CALL 10213 0 0
// enable ;
9970: ENABLE
// end ;
9971: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
9972: LD_INT 0
9974: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
9975: LD_ADDR_OWVAR 24
9979: PUSH
9980: LD_INT 0
9982: PPUSH
9983: LD_INT 5
9985: PPUSH
9986: CALL_OW 12
9990: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
9991: LD_INT 1
9993: PPUSH
9994: LD_INT 1
9996: PPUSH
9997: LD_INT 15
9999: PPUSH
10000: CALL_OW 380
// hc_importance := 106 ;
10004: LD_ADDR_OWVAR 32
10008: PUSH
10009: LD_INT 106
10011: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
10012: LD_ADDR_OWVAR 26
10016: PUSH
10017: LD_STRING Blood God of 
10019: PUSH
10020: LD_OWVAR 19
10024: PUSH
10025: LD_VAR 0 1
10029: ARRAY
10030: STR
10031: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
10032: LD_ADDR_OWVAR 21
10036: PUSH
10037: LD_EXP 20
10041: PUSH
10042: LD_VAR 0 1
10046: ARRAY
10047: ST_TO_ADDR
// uc_side := side ;
10048: LD_ADDR_OWVAR 20
10052: PUSH
10053: LD_VAR 0 1
10057: ST_TO_ADDR
// hc_noskilllimit := true ;
10058: LD_ADDR_OWVAR 76
10062: PUSH
10063: LD_INT 1
10065: ST_TO_ADDR
// hc_agressivity := 50 ;
10066: LD_ADDR_OWVAR 35
10070: PUSH
10071: LD_INT 50
10073: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
10074: LD_ADDR_LOC 16
10078: PUSH
10079: LD_LOC 16
10083: PPUSH
10084: LD_VAR 0 1
10088: PPUSH
10089: CALL_OW 44
10093: PPUSH
10094: CALL_OW 1
10098: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
10099: LD_LOC 16
10103: PUSH
10104: LD_VAR 0 1
10108: ARRAY
10109: PPUSH
10110: LD_LOC 19
10114: PUSH
10115: LD_EXP 19
10119: PUSH
10120: LD_VAR 0 1
10124: ARRAY
10125: ARRAY
10126: PUSH
10127: LD_INT 1
10129: ARRAY
10130: PPUSH
10131: LD_LOC 19
10135: PUSH
10136: LD_EXP 19
10140: PUSH
10141: LD_VAR 0 1
10145: ARRAY
10146: ARRAY
10147: PUSH
10148: LD_INT 2
10150: ARRAY
10151: PPUSH
10152: LD_INT 10
10154: PPUSH
10155: LD_INT 0
10157: PPUSH
10158: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
10162: LD_LOC 16
10166: PUSH
10167: LD_VAR 0 1
10171: ARRAY
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: LD_INT 300
10178: PPUSH
10179: CALL_OW 239
// if not NoDialog then
10183: LD_VAR 0 2
10187: NOT
10188: IFFALSE 10208
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
10190: LD_LOC 16
10194: PUSH
10195: LD_VAR 0 1
10199: ARRAY
10200: PPUSH
10201: LD_STRING DLAwaken
10203: PPUSH
10204: CALL_OW 94
// end ;
10208: LD_VAR 0 3
10212: RET
// function DisplayTimeWithKills ; var x ; begin
10213: LD_INT 0
10215: PPUSH
10216: PPUSH
// ExtraStrings :=  ;
10217: LD_ADDR_EXP 59
10221: PUSH
10222: LD_STRING 
10224: ST_TO_ADDR
// for x = 1 to Side_Positions do
10225: LD_ADDR_VAR 0 2
10229: PUSH
10230: DOUBLE
10231: LD_INT 1
10233: DEC
10234: ST_TO_ADDR
10235: LD_EXP 19
10239: PUSH
10240: FOR_TO
10241: IFFALSE 10474
// if Side_Positions [ x ] then
10243: LD_EXP 19
10247: PUSH
10248: LD_VAR 0 2
10252: ARRAY
10253: IFFALSE 10472
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
10255: LD_ADDR_LOC 18
10259: PUSH
10260: LD_LOC 18
10264: PPUSH
10265: LD_VAR 0 2
10269: PPUSH
10270: LD_VAR 0 2
10274: PPUSH
10275: CALL_OW 515
10279: PUSH
10280: LD_LOC 17
10284: PUSH
10285: LD_VAR 0 2
10289: ARRAY
10290: MINUS
10291: PPUSH
10292: CALL_OW 1
10296: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
10297: LD_LOC 16
10301: PUSH
10302: LD_VAR 0 2
10306: ARRAY
10307: PUSH
10308: LD_INT 1
10310: NEG
10311: GREATER
10312: PUSH
10313: LD_LOC 16
10317: PUSH
10318: LD_VAR 0 2
10322: ARRAY
10323: PPUSH
10324: CALL_OW 300
10328: AND
10329: IFFALSE 10362
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
10331: LD_ADDR_EXP 59
10335: PUSH
10336: LD_EXP 59
10340: PUSH
10341: LD_STRING #godawoken
10343: PUSH
10344: LD_VAR 0 2
10348: PUSH
10349: LD_VAR 0 2
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: ADD
10359: ST_TO_ADDR
10360: GO 10472
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
10362: LD_LOC 16
10366: PUSH
10367: LD_VAR 0 2
10371: ARRAY
10372: PUSH
10373: LD_INT 1
10375: NEG
10376: GREATER
10377: PUSH
10378: LD_LOC 16
10382: PUSH
10383: LD_VAR 0 2
10387: ARRAY
10388: PPUSH
10389: CALL_OW 301
10393: AND
10394: IFFALSE 10427
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
10396: LD_ADDR_EXP 59
10400: PUSH
10401: LD_EXP 59
10405: PUSH
10406: LD_STRING #goddied
10408: PUSH
10409: LD_VAR 0 2
10413: PUSH
10414: LD_VAR 0 2
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: LIST
10423: ADD
10424: ST_TO_ADDR
10425: GO 10472
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
10427: LD_ADDR_EXP 59
10431: PUSH
10432: LD_EXP 59
10436: PUSH
10437: LD_STRING #godssacrifise
10439: PUSH
10440: LD_VAR 0 2
10444: PUSH
10445: LD_VAR 0 2
10449: PUSH
10450: LD_LOC 18
10454: PUSH
10455: LD_VAR 0 2
10459: ARRAY
10460: PUSH
10461: LD_INT 6
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: ADD
10471: ST_TO_ADDR
10472: GO 10240
10474: POP
10475: POP
// end ;
10476: LD_VAR 0 1
10480: RET
// export function InitBloodGods ; begin
10481: LD_INT 0
10483: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
10484: LD_ADDR_LOC 16
10488: PUSH
10489: LD_INT 1
10491: NEG
10492: PUSH
10493: LD_INT 1
10495: NEG
10496: PUSH
10497: LD_INT 1
10499: NEG
10500: PUSH
10501: LD_INT 1
10503: NEG
10504: PUSH
10505: LD_INT 1
10507: NEG
10508: PUSH
10509: LD_INT 1
10511: NEG
10512: PUSH
10513: LD_INT 1
10515: NEG
10516: PUSH
10517: LD_INT 1
10519: NEG
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10531: LD_ADDR_LOC 17
10535: PUSH
10536: LD_INT 0
10538: PUSH
10539: LD_INT 0
10541: PUSH
10542: LD_INT 0
10544: PUSH
10545: LD_INT 0
10547: PUSH
10548: LD_INT 0
10550: PUSH
10551: LD_INT 0
10553: PUSH
10554: LD_INT 0
10556: PUSH
10557: LD_INT 0
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10570: LD_ADDR_LOC 18
10574: PUSH
10575: LD_INT 0
10577: PUSH
10578: LD_INT 0
10580: PUSH
10581: LD_INT 0
10583: PUSH
10584: LD_INT 0
10586: PUSH
10587: LD_INT 0
10589: PUSH
10590: LD_INT 0
10592: PUSH
10593: LD_INT 0
10595: PUSH
10596: LD_INT 0
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
10609: LD_ADDR_LOC 19
10613: PUSH
10614: LD_INT 60
10616: PUSH
10617: LD_INT 47
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 82
10626: PUSH
10627: LD_INT 26
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 124
10636: PUSH
10637: LD_INT 45
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 147
10646: PUSH
10647: LD_INT 90
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 126
10656: PUSH
10657: LD_INT 112
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 84
10666: PUSH
10667: LD_INT 92
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 106
10676: PUSH
10677: LD_INT 73
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 106
10686: PUSH
10687: LD_INT 73
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: ST_TO_ADDR
// ClearHumansKilled ;
10704: CALL_OW 516
// enable ( 200 ) ;
10708: LD_INT 200
10710: ENABLE_MARKED
// end ; end_of_file
10711: LD_VAR 0 1
10715: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
10716: LD_INT 0
10718: PPUSH
10719: PPUSH
// if ( not IAmSpec ) then
10720: CALL_OW 531
10724: NOT
10725: IFFALSE 10741
// Result := Limits_Info ^  ;
10727: LD_ADDR_VAR 0 1
10731: PUSH
10732: LD_LOC 27
10736: PUSH
10737: LD_STRING 
10739: ADD
10740: ST_TO_ADDR
// for i := 1 to 8 do
10741: LD_ADDR_VAR 0 2
10745: PUSH
10746: DOUBLE
10747: LD_INT 1
10749: DEC
10750: ST_TO_ADDR
10751: LD_INT 8
10753: PUSH
10754: FOR_TO
10755: IFFALSE 10800
// if Cheaters [ i ] then
10757: LD_LOC 28
10761: PUSH
10762: LD_VAR 0 2
10766: ARRAY
10767: IFFALSE 10798
// Result := Result ^ [ #Cheater , i , i ] ;
10769: LD_ADDR_VAR 0 1
10773: PUSH
10774: LD_VAR 0 1
10778: PUSH
10779: LD_STRING #Cheater
10781: PUSH
10782: LD_VAR 0 2
10786: PUSH
10787: LD_VAR 0 2
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: LIST
10796: ADD
10797: ST_TO_ADDR
10798: GO 10754
10800: POP
10801: POP
// end ;
10802: LD_VAR 0 1
10806: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
10807: LD_INT 0
10809: PPUSH
10810: PPUSH
10811: PPUSH
10812: PPUSH
10813: PPUSH
// if game_type in [ 10 , 11 ] then
10814: LD_EXP 42
10818: PUSH
10819: LD_INT 10
10821: PUSH
10822: LD_INT 11
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: IN
10829: IFFALSE 10845
// def_game_rules = def_game_rules + 1 ;
10831: LD_ADDR_EXP 43
10835: PUSH
10836: LD_EXP 43
10840: PUSH
10841: LD_INT 1
10843: PLUS
10844: ST_TO_ADDR
// case def_game_rules of 0 :
10845: LD_EXP 43
10849: PUSH
10850: LD_INT 0
10852: DOUBLE
10853: EQUAL
10854: IFTRUE 10858
10856: GO 10863
10858: POP
// exit ; 1 :
10859: GO 12913
10861: GO 12813
10863: LD_INT 1
10865: DOUBLE
10866: EQUAL
10867: IFTRUE 10871
10869: GO 11087
10871: POP
// begin def_base_level := 2 ;
10872: LD_ADDR_EXP 44
10876: PUSH
10877: LD_INT 2
10879: ST_TO_ADDR
// def_amount_of_people := 11 ;
10880: LD_ADDR_EXP 45
10884: PUSH
10885: LD_INT 11
10887: ST_TO_ADDR
// def_skill_level := 1 ;
10888: LD_ADDR_EXP 46
10892: PUSH
10893: LD_INT 1
10895: ST_TO_ADDR
// def_starting_resources := 2 ;
10896: LD_ADDR_EXP 47
10900: PUSH
10901: LD_INT 2
10903: ST_TO_ADDR
// def_shipments_density := 26 ;
10904: LD_ADDR_EXP 48
10908: PUSH
10909: LD_INT 26
10911: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10912: LD_ADDR_EXP 49
10916: PUSH
10917: LD_INT 0
10919: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10920: LD_ADDR_EXP 50
10924: PUSH
10925: LD_INT 1
10927: ST_TO_ADDR
// def_shared_vision := 1 ;
10928: LD_ADDR_EXP 51
10932: PUSH
10933: LD_INT 1
10935: ST_TO_ADDR
// def_morale_flags := 3 ;
10936: LD_ADDR_EXP 52
10940: PUSH
10941: LD_INT 3
10943: ST_TO_ADDR
// def_siberite_detection := 1 ;
10944: LD_ADDR_EXP 53
10948: PUSH
10949: LD_INT 1
10951: ST_TO_ADDR
// def_people_respawning := 1 ;
10952: LD_ADDR_EXP 54
10956: PUSH
10957: LD_INT 1
10959: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10960: LD_ADDR_EXP 55
10964: PUSH
10965: LD_INT 1
10967: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10968: LD_ADDR_EXP 56
10972: PUSH
10973: LD_INT 0
10975: ST_TO_ADDR
// def_builduptime := 6 ;
10976: LD_ADDR_EXP 57
10980: PUSH
10981: LD_INT 6
10983: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
10984: LD_ADDR_VAR 0 2
10988: PUSH
10989: EMPTY
10990: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10991: LD_ADDR_VAR 0 3
10995: PUSH
10996: EMPTY
10997: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10998: LD_ADDR_LOC 22
11002: PUSH
11003: EMPTY
11004: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11005: LD_ADDR_LOC 23
11009: PUSH
11010: EMPTY
11011: ST_TO_ADDR
// Banned_Controls := [ ] ;
11012: LD_ADDR_LOC 24
11016: PUSH
11017: EMPTY
11018: ST_TO_ADDR
// Banned_Engines := [ ] ;
11019: LD_ADDR_LOC 25
11023: PUSH
11024: EMPTY
11025: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11026: LD_ADDR_LOC 20
11030: PUSH
11031: LD_INT 37
11033: PUSH
11034: EMPTY
11035: LIST
11036: PUSH
11037: LD_INT 4
11039: PUSH
11040: LD_INT 5
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 31
11049: PUSH
11050: LD_INT 32
11052: PUSH
11053: LD_INT 33
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: EMPTY
11062: LIST
11063: LIST
11064: LIST
11065: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
11066: LD_ADDR_LOC 21
11070: PUSH
11071: LD_INT 2
11073: PUSH
11074: LD_INT 2
11076: PUSH
11077: LD_INT 4
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: LIST
11084: ST_TO_ADDR
// end ; 2 :
11085: GO 12813
11087: LD_INT 2
11089: DOUBLE
11090: EQUAL
11091: IFTRUE 11095
11093: GO 11304
11095: POP
// begin def_base_level := 1 ;
11096: LD_ADDR_EXP 44
11100: PUSH
11101: LD_INT 1
11103: ST_TO_ADDR
// def_amount_of_people := 11 ;
11104: LD_ADDR_EXP 45
11108: PUSH
11109: LD_INT 11
11111: ST_TO_ADDR
// def_skill_level := 3 ;
11112: LD_ADDR_EXP 46
11116: PUSH
11117: LD_INT 3
11119: ST_TO_ADDR
// def_starting_resources := 3 ;
11120: LD_ADDR_EXP 47
11124: PUSH
11125: LD_INT 3
11127: ST_TO_ADDR
// def_shipments_density := 51 ;
11128: LD_ADDR_EXP 48
11132: PUSH
11133: LD_INT 51
11135: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11136: LD_ADDR_EXP 49
11140: PUSH
11141: LD_INT 1
11143: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11144: LD_ADDR_EXP 50
11148: PUSH
11149: LD_INT 2
11151: ST_TO_ADDR
// def_shared_vision := 1 ;
11152: LD_ADDR_EXP 51
11156: PUSH
11157: LD_INT 1
11159: ST_TO_ADDR
// def_morale_flags := 0 ;
11160: LD_ADDR_EXP 52
11164: PUSH
11165: LD_INT 0
11167: ST_TO_ADDR
// def_siberite_detection := 1 ;
11168: LD_ADDR_EXP 53
11172: PUSH
11173: LD_INT 1
11175: ST_TO_ADDR
// def_people_respawning := 0 ;
11176: LD_ADDR_EXP 54
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11184: LD_ADDR_EXP 55
11188: PUSH
11189: LD_INT 0
11191: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11192: LD_ADDR_EXP 56
11196: PUSH
11197: LD_INT 0
11199: ST_TO_ADDR
// def_builduptime := 6 ;
11200: LD_ADDR_EXP 57
11204: PUSH
11205: LD_INT 6
11207: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11208: LD_ADDR_VAR 0 2
11212: PUSH
11213: LD_INT 1
11215: PUSH
11216: EMPTY
11217: LIST
11218: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11219: LD_ADDR_VAR 0 3
11223: PUSH
11224: EMPTY
11225: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11226: LD_ADDR_LOC 22
11230: PUSH
11231: EMPTY
11232: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11233: LD_ADDR_LOC 23
11237: PUSH
11238: EMPTY
11239: ST_TO_ADDR
// Banned_Controls := [ ] ;
11240: LD_ADDR_LOC 24
11244: PUSH
11245: EMPTY
11246: ST_TO_ADDR
// Banned_Engines := [ ] ;
11247: LD_ADDR_LOC 25
11251: PUSH
11252: EMPTY
11253: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11254: LD_ADDR_LOC 20
11258: PUSH
11259: LD_INT 4
11261: PUSH
11262: LD_INT 5
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PUSH
11269: LD_INT 31
11271: PUSH
11272: LD_INT 32
11274: PUSH
11275: LD_INT 33
11277: PUSH
11278: EMPTY
11279: LIST
11280: LIST
11281: LIST
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
11287: LD_ADDR_LOC 21
11291: PUSH
11292: LD_INT 1
11294: PUSH
11295: LD_INT 2
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: ST_TO_ADDR
// end ; 3 :
11302: GO 12813
11304: LD_INT 3
11306: DOUBLE
11307: EQUAL
11308: IFTRUE 11312
11310: GO 11555
11312: POP
// begin def_base_level := 1 ;
11313: LD_ADDR_EXP 44
11317: PUSH
11318: LD_INT 1
11320: ST_TO_ADDR
// def_amount_of_people := 11 ;
11321: LD_ADDR_EXP 45
11325: PUSH
11326: LD_INT 11
11328: ST_TO_ADDR
// def_skill_level := 3 ;
11329: LD_ADDR_EXP 46
11333: PUSH
11334: LD_INT 3
11336: ST_TO_ADDR
// def_starting_resources := 3 ;
11337: LD_ADDR_EXP 47
11341: PUSH
11342: LD_INT 3
11344: ST_TO_ADDR
// def_shipments_density := 1 ;
11345: LD_ADDR_EXP 48
11349: PUSH
11350: LD_INT 1
11352: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11353: LD_ADDR_EXP 49
11357: PUSH
11358: LD_INT 0
11360: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11361: LD_ADDR_EXP 50
11365: PUSH
11366: LD_INT 1
11368: ST_TO_ADDR
// def_shared_vision := 1 ;
11369: LD_ADDR_EXP 51
11373: PUSH
11374: LD_INT 1
11376: ST_TO_ADDR
// def_morale_flags := 0 ;
11377: LD_ADDR_EXP 52
11381: PUSH
11382: LD_INT 0
11384: ST_TO_ADDR
// def_siberite_detection := 1 ;
11385: LD_ADDR_EXP 53
11389: PUSH
11390: LD_INT 1
11392: ST_TO_ADDR
// def_people_respawning := 0 ;
11393: LD_ADDR_EXP 54
11397: PUSH
11398: LD_INT 0
11400: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11401: LD_ADDR_EXP 55
11405: PUSH
11406: LD_INT 2
11408: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11409: LD_ADDR_EXP 56
11413: PUSH
11414: LD_INT 0
11416: ST_TO_ADDR
// def_builduptime := 6 ;
11417: LD_ADDR_EXP 57
11421: PUSH
11422: LD_INT 6
11424: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11425: LD_ADDR_VAR 0 2
11429: PUSH
11430: LD_INT 23
11432: PUSH
11433: EMPTY
11434: LIST
11435: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
11436: LD_ADDR_VAR 0 3
11440: PUSH
11441: LD_INT 2
11443: PUSH
11444: LD_INT 37
11446: PUSH
11447: LD_INT 32
11449: PUSH
11450: LD_INT 33
11452: PUSH
11453: LD_INT 36
11455: PUSH
11456: LD_INT 16
11458: PUSH
11459: LD_INT 23
11461: PUSH
11462: LD_INT 21
11464: PUSH
11465: LD_INT 18
11467: PUSH
11468: LD_INT 22
11470: PUSH
11471: LD_INT 20
11473: PUSH
11474: LD_INT 19
11476: PUSH
11477: LD_INT 25
11479: PUSH
11480: LD_INT 17
11482: PUSH
11483: LD_INT 24
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11503: LD_ADDR_LOC 22
11507: PUSH
11508: EMPTY
11509: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11510: LD_ADDR_LOC 23
11514: PUSH
11515: EMPTY
11516: ST_TO_ADDR
// Banned_Controls := [ ] ;
11517: LD_ADDR_LOC 24
11521: PUSH
11522: EMPTY
11523: ST_TO_ADDR
// Banned_Engines := [ ] ;
11524: LD_ADDR_LOC 25
11528: PUSH
11529: EMPTY
11530: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11531: LD_ADDR_LOC 20
11535: PUSH
11536: EMPTY
11537: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11538: LD_ADDR_LOC 21
11542: PUSH
11543: EMPTY
11544: ST_TO_ADDR
// No_Mechs := true ;
11545: LD_ADDR_EXP 58
11549: PUSH
11550: LD_INT 1
11552: ST_TO_ADDR
// end ; 4 :
11553: GO 12813
11555: LD_INT 4
11557: DOUBLE
11558: EQUAL
11559: IFTRUE 11563
11561: GO 11738
11563: POP
// begin def_base_level := 1 ;
11564: LD_ADDR_EXP 44
11568: PUSH
11569: LD_INT 1
11571: ST_TO_ADDR
// def_amount_of_people := 11 ;
11572: LD_ADDR_EXP 45
11576: PUSH
11577: LD_INT 11
11579: ST_TO_ADDR
// def_skill_level := 3 ;
11580: LD_ADDR_EXP 46
11584: PUSH
11585: LD_INT 3
11587: ST_TO_ADDR
// def_starting_resources := 3 ;
11588: LD_ADDR_EXP 47
11592: PUSH
11593: LD_INT 3
11595: ST_TO_ADDR
// def_shipments_density := 2 ;
11596: LD_ADDR_EXP 48
11600: PUSH
11601: LD_INT 2
11603: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11604: LD_ADDR_EXP 49
11608: PUSH
11609: LD_INT 1
11611: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11612: LD_ADDR_EXP 50
11616: PUSH
11617: LD_INT 2
11619: ST_TO_ADDR
// def_shared_vision := 1 ;
11620: LD_ADDR_EXP 51
11624: PUSH
11625: LD_INT 1
11627: ST_TO_ADDR
// def_morale_flags := 0 ;
11628: LD_ADDR_EXP 52
11632: PUSH
11633: LD_INT 0
11635: ST_TO_ADDR
// def_siberite_detection := 1 ;
11636: LD_ADDR_EXP 53
11640: PUSH
11641: LD_INT 1
11643: ST_TO_ADDR
// def_people_respawning := 0 ;
11644: LD_ADDR_EXP 54
11648: PUSH
11649: LD_INT 0
11651: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11652: LD_ADDR_EXP 55
11656: PUSH
11657: LD_INT 0
11659: ST_TO_ADDR
// def_siberite_bomb := 1 ;
11660: LD_ADDR_EXP 56
11664: PUSH
11665: LD_INT 1
11667: ST_TO_ADDR
// def_builduptime := 11 ;
11668: LD_ADDR_EXP 57
11672: PUSH
11673: LD_INT 11
11675: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11676: LD_ADDR_VAR 0 2
11680: PUSH
11681: LD_INT 1
11683: PUSH
11684: EMPTY
11685: LIST
11686: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11687: LD_ADDR_VAR 0 3
11691: PUSH
11692: EMPTY
11693: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11694: LD_ADDR_LOC 22
11698: PUSH
11699: EMPTY
11700: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11701: LD_ADDR_LOC 23
11705: PUSH
11706: EMPTY
11707: ST_TO_ADDR
// Banned_Controls := [ ] ;
11708: LD_ADDR_LOC 24
11712: PUSH
11713: EMPTY
11714: ST_TO_ADDR
// Banned_Engines := [ ] ;
11715: LD_ADDR_LOC 25
11719: PUSH
11720: EMPTY
11721: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11722: LD_ADDR_LOC 20
11726: PUSH
11727: EMPTY
11728: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11729: LD_ADDR_LOC 21
11733: PUSH
11734: EMPTY
11735: ST_TO_ADDR
// end ; 5 :
11736: GO 12813
11738: LD_INT 5
11740: DOUBLE
11741: EQUAL
11742: IFTRUE 11746
11744: GO 11995
11746: POP
// begin def_base_level := 0 ;
11747: LD_ADDR_EXP 44
11751: PUSH
11752: LD_INT 0
11754: ST_TO_ADDR
// def_amount_of_people := 5 ;
11755: LD_ADDR_EXP 45
11759: PUSH
11760: LD_INT 5
11762: ST_TO_ADDR
// def_skill_level := 0 ;
11763: LD_ADDR_EXP 46
11767: PUSH
11768: LD_INT 0
11770: ST_TO_ADDR
// def_starting_resources := 0 ;
11771: LD_ADDR_EXP 47
11775: PUSH
11776: LD_INT 0
11778: ST_TO_ADDR
// def_shipments_density := 0 ;
11779: LD_ADDR_EXP 48
11783: PUSH
11784: LD_INT 0
11786: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11787: LD_ADDR_EXP 49
11791: PUSH
11792: LD_INT 0
11794: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11795: LD_ADDR_EXP 50
11799: PUSH
11800: LD_INT 0
11802: ST_TO_ADDR
// def_shared_vision := 1 ;
11803: LD_ADDR_EXP 51
11807: PUSH
11808: LD_INT 1
11810: ST_TO_ADDR
// def_morale_flags := 0 ;
11811: LD_ADDR_EXP 52
11815: PUSH
11816: LD_INT 0
11818: ST_TO_ADDR
// def_siberite_detection := 0 ;
11819: LD_ADDR_EXP 53
11823: PUSH
11824: LD_INT 0
11826: ST_TO_ADDR
// def_people_respawning := 1 ;
11827: LD_ADDR_EXP 54
11831: PUSH
11832: LD_INT 1
11834: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11835: LD_ADDR_EXP 55
11839: PUSH
11840: LD_INT 1
11842: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11843: LD_ADDR_EXP 56
11847: PUSH
11848: LD_INT 0
11850: ST_TO_ADDR
// def_builduptime := 0 ;
11851: LD_ADDR_EXP 57
11855: PUSH
11856: LD_INT 0
11858: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
11859: LD_ADDR_VAR 0 2
11863: PUSH
11864: LD_INT 10
11866: PUSH
11867: LD_INT 3
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
11874: LD_ADDR_VAR 0 3
11878: PUSH
11879: LD_INT 12
11881: PUSH
11882: LD_INT 11
11884: PUSH
11885: LD_INT 14
11887: PUSH
11888: LD_INT 13
11890: PUSH
11891: LD_INT 5
11893: PUSH
11894: LD_INT 24
11896: PUSH
11897: LD_INT 21
11899: PUSH
11900: LD_INT 33
11902: PUSH
11903: LD_INT 36
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
11917: LD_ADDR_LOC 22
11921: PUSH
11922: LD_INT 31
11924: PUSH
11925: EMPTY
11926: LIST
11927: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11928: LD_ADDR_LOC 23
11932: PUSH
11933: EMPTY
11934: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
11935: LD_ADDR_LOC 24
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: EMPTY
11944: LIST
11945: ST_TO_ADDR
// Banned_Engines := [ ] ;
11946: LD_ADDR_LOC 25
11950: PUSH
11951: EMPTY
11952: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
11953: LD_ADDR_LOC 20
11957: PUSH
11958: LD_INT 4
11960: PUSH
11961: EMPTY
11962: LIST
11963: PUSH
11964: LD_INT 31
11966: PUSH
11967: LD_INT 32
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
11978: LD_ADDR_LOC 21
11982: PUSH
11983: LD_INT 1
11985: PUSH
11986: LD_INT 1
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: ST_TO_ADDR
// end ; 6 :
11993: GO 12813
11995: LD_INT 6
11997: DOUBLE
11998: EQUAL
11999: IFTRUE 12003
12001: GO 12206
12003: POP
// begin def_base_level := 1 ;
12004: LD_ADDR_EXP 44
12008: PUSH
12009: LD_INT 1
12011: ST_TO_ADDR
// def_amount_of_people := 11 ;
12012: LD_ADDR_EXP 45
12016: PUSH
12017: LD_INT 11
12019: ST_TO_ADDR
// def_skill_level := 3 ;
12020: LD_ADDR_EXP 46
12024: PUSH
12025: LD_INT 3
12027: ST_TO_ADDR
// def_starting_resources := 3 ;
12028: LD_ADDR_EXP 47
12032: PUSH
12033: LD_INT 3
12035: ST_TO_ADDR
// def_shipments_density := 1 ;
12036: LD_ADDR_EXP 48
12040: PUSH
12041: LD_INT 1
12043: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12044: LD_ADDR_EXP 49
12048: PUSH
12049: LD_INT 0
12051: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
12052: LD_ADDR_EXP 50
12056: PUSH
12057: LD_INT 1
12059: ST_TO_ADDR
// def_shared_vision := 1 ;
12060: LD_ADDR_EXP 51
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// def_morale_flags := 0 ;
12068: LD_ADDR_EXP 52
12072: PUSH
12073: LD_INT 0
12075: ST_TO_ADDR
// def_siberite_detection := 1 ;
12076: LD_ADDR_EXP 53
12080: PUSH
12081: LD_INT 1
12083: ST_TO_ADDR
// def_people_respawning := 2 ;
12084: LD_ADDR_EXP 54
12088: PUSH
12089: LD_INT 2
12091: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12092: LD_ADDR_EXP 55
12096: PUSH
12097: LD_INT 1
12099: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12100: LD_ADDR_EXP 56
12104: PUSH
12105: LD_INT 0
12107: ST_TO_ADDR
// def_builduptime := 6 ;
12108: LD_ADDR_EXP 57
12112: PUSH
12113: LD_INT 6
12115: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12116: LD_ADDR_VAR 0 2
12120: PUSH
12121: LD_INT 23
12123: PUSH
12124: EMPTY
12125: LIST
12126: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
12127: LD_ADDR_VAR 0 3
12131: PUSH
12132: LD_INT 2
12134: PUSH
12135: LD_INT 37
12137: PUSH
12138: LD_INT 31
12140: PUSH
12141: LD_INT 32
12143: PUSH
12144: LD_INT 33
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12154: LD_ADDR_LOC 22
12158: PUSH
12159: EMPTY
12160: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12161: LD_ADDR_LOC 23
12165: PUSH
12166: EMPTY
12167: ST_TO_ADDR
// Banned_Controls := [ ] ;
12168: LD_ADDR_LOC 24
12172: PUSH
12173: EMPTY
12174: ST_TO_ADDR
// Banned_Engines := [ ] ;
12175: LD_ADDR_LOC 25
12179: PUSH
12180: EMPTY
12181: ST_TO_ADDR
// Restricted_Builds := [ ] ;
12182: LD_ADDR_LOC 20
12186: PUSH
12187: EMPTY
12188: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
12189: LD_ADDR_LOC 21
12193: PUSH
12194: EMPTY
12195: ST_TO_ADDR
// No_Mechs := true ;
12196: LD_ADDR_EXP 58
12200: PUSH
12201: LD_INT 1
12203: ST_TO_ADDR
// end ; 7 :
12204: GO 12813
12206: LD_INT 7
12208: DOUBLE
12209: EQUAL
12210: IFTRUE 12214
12212: GO 12412
12214: POP
// begin def_base_level := 1 ;
12215: LD_ADDR_EXP 44
12219: PUSH
12220: LD_INT 1
12222: ST_TO_ADDR
// def_amount_of_people := 20 ;
12223: LD_ADDR_EXP 45
12227: PUSH
12228: LD_INT 20
12230: ST_TO_ADDR
// def_skill_level := 3 ;
12231: LD_ADDR_EXP 46
12235: PUSH
12236: LD_INT 3
12238: ST_TO_ADDR
// def_starting_resources := 3 ;
12239: LD_ADDR_EXP 47
12243: PUSH
12244: LD_INT 3
12246: ST_TO_ADDR
// def_shipments_density := 1 ;
12247: LD_ADDR_EXP 48
12251: PUSH
12252: LD_INT 1
12254: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
12255: LD_ADDR_EXP 49
12259: PUSH
12260: LD_INT 1
12262: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
12263: LD_ADDR_EXP 50
12267: PUSH
12268: LD_INT 2
12270: ST_TO_ADDR
// def_shared_vision := 1 ;
12271: LD_ADDR_EXP 51
12275: PUSH
12276: LD_INT 1
12278: ST_TO_ADDR
// def_morale_flags := 0 ;
12279: LD_ADDR_EXP 52
12283: PUSH
12284: LD_INT 0
12286: ST_TO_ADDR
// def_siberite_detection := 1 ;
12287: LD_ADDR_EXP 53
12291: PUSH
12292: LD_INT 1
12294: ST_TO_ADDR
// def_people_respawning := 0 ;
12295: LD_ADDR_EXP 54
12299: PUSH
12300: LD_INT 0
12302: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12303: LD_ADDR_EXP 55
12307: PUSH
12308: LD_INT 1
12310: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12311: LD_ADDR_EXP 56
12315: PUSH
12316: LD_INT 0
12318: ST_TO_ADDR
// def_builduptime := 6 ;
12319: LD_ADDR_EXP 57
12323: PUSH
12324: LD_INT 6
12326: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12327: LD_ADDR_VAR 0 2
12331: PUSH
12332: LD_INT 23
12334: PUSH
12335: EMPTY
12336: LIST
12337: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
12338: LD_ADDR_VAR 0 3
12342: PUSH
12343: LD_INT 37
12345: PUSH
12346: EMPTY
12347: LIST
12348: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12349: LD_ADDR_LOC 22
12353: PUSH
12354: EMPTY
12355: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12356: LD_ADDR_LOC 23
12360: PUSH
12361: EMPTY
12362: ST_TO_ADDR
// Banned_Controls := [ ] ;
12363: LD_ADDR_LOC 24
12367: PUSH
12368: EMPTY
12369: ST_TO_ADDR
// Banned_Engines := [ ] ;
12370: LD_ADDR_LOC 25
12374: PUSH
12375: EMPTY
12376: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
12377: LD_ADDR_LOC 20
12381: PUSH
12382: LD_INT 31
12384: PUSH
12385: LD_INT 32
12387: PUSH
12388: LD_INT 33
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
12399: LD_ADDR_LOC 21
12403: PUSH
12404: LD_INT 10
12406: PUSH
12407: EMPTY
12408: LIST
12409: ST_TO_ADDR
// end ; 8 :
12410: GO 12813
12412: LD_INT 8
12414: DOUBLE
12415: EQUAL
12416: IFTRUE 12420
12418: GO 12812
12420: POP
// begin def_base_level := 0 ;
12421: LD_ADDR_EXP 44
12425: PUSH
12426: LD_INT 0
12428: ST_TO_ADDR
// def_amount_of_people := 8 ;
12429: LD_ADDR_EXP 45
12433: PUSH
12434: LD_INT 8
12436: ST_TO_ADDR
// def_skill_level := 0 ;
12437: LD_ADDR_EXP 46
12441: PUSH
12442: LD_INT 0
12444: ST_TO_ADDR
// def_starting_resources := 2 ;
12445: LD_ADDR_EXP 47
12449: PUSH
12450: LD_INT 2
12452: ST_TO_ADDR
// def_shipments_density := 1 ;
12453: LD_ADDR_EXP 48
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12461: LD_ADDR_EXP 49
12465: PUSH
12466: LD_INT 0
12468: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12469: LD_ADDR_EXP 50
12473: PUSH
12474: LD_INT 0
12476: ST_TO_ADDR
// def_shared_vision := 1 ;
12477: LD_ADDR_EXP 51
12481: PUSH
12482: LD_INT 1
12484: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
12485: LD_ADDR_EXP 52
12489: PUSH
12490: LD_INT 0
12492: PPUSH
12493: LD_INT 2
12495: PPUSH
12496: CALL_OW 12
12500: ST_TO_ADDR
// def_siberite_detection := 0 ;
12501: LD_ADDR_EXP 53
12505: PUSH
12506: LD_INT 0
12508: ST_TO_ADDR
// def_people_respawning := 0 ;
12509: LD_ADDR_EXP 54
12513: PUSH
12514: LD_INT 0
12516: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
12517: LD_ADDR_EXP 55
12521: PUSH
12522: LD_INT 2
12524: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12525: LD_ADDR_EXP 56
12529: PUSH
12530: LD_INT 0
12532: ST_TO_ADDR
// def_builduptime := 0 ;
12533: LD_ADDR_EXP 57
12537: PUSH
12538: LD_INT 0
12540: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
12541: LD_ADDR_VAR 0 2
12545: PUSH
12546: LD_INT 23
12548: PUSH
12549: LD_INT 20
12551: PUSH
12552: LD_INT 40
12554: PUSH
12555: LD_INT 47
12557: PUSH
12558: LD_INT 46
12560: PUSH
12561: LD_INT 39
12563: PUSH
12564: LD_INT 71
12566: PUSH
12567: LD_INT 34
12569: PUSH
12570: LD_INT 41
12572: PUSH
12573: LD_INT 44
12575: PUSH
12576: LD_INT 17
12578: PUSH
12579: LD_INT 16
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
12596: LD_ADDR_VAR 0 3
12600: PUSH
12601: LD_INT 37
12603: PUSH
12604: LD_INT 5
12606: PUSH
12607: LD_INT 13
12609: PUSH
12610: LD_INT 34
12612: PUSH
12613: LD_INT 12
12615: PUSH
12616: LD_INT 15
12618: PUSH
12619: LD_INT 11
12621: PUSH
12622: LD_INT 14
12624: PUSH
12625: LD_INT 29
12627: PUSH
12628: LD_INT 30
12630: PUSH
12631: LD_INT 28
12633: PUSH
12634: LD_INT 24
12636: PUSH
12637: LD_INT 25
12639: PUSH
12640: LD_INT 20
12642: PUSH
12643: LD_INT 21
12645: PUSH
12646: LD_INT 22
12648: PUSH
12649: LD_INT 36
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12671: LD_ADDR_LOC 22
12675: PUSH
12676: EMPTY
12677: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
12678: LD_ADDR_LOC 23
12682: PUSH
12683: LD_INT 14
12685: PUSH
12686: EMPTY
12687: LIST
12688: ST_TO_ADDR
// Banned_Controls := [ ] ;
12689: LD_ADDR_LOC 24
12693: PUSH
12694: EMPTY
12695: ST_TO_ADDR
// Banned_Engines := [ ] ;
12696: LD_ADDR_LOC 25
12700: PUSH
12701: EMPTY
12702: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
12703: LD_ADDR_LOC 20
12707: PUSH
12708: LD_INT 31
12710: PUSH
12711: LD_INT 32
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 4
12720: PUSH
12721: EMPTY
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
12728: LD_ADDR_LOC 21
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: LD_INT 1
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: ST_TO_ADDR
// for i := 1 to 8 do
12743: LD_ADDR_VAR 0 4
12747: PUSH
12748: DOUBLE
12749: LD_INT 1
12751: DEC
12752: ST_TO_ADDR
12753: LD_INT 8
12755: PUSH
12756: FOR_TO
12757: IFFALSE 12808
// if ( Side_Nations [ i ] = 3 ) then
12759: LD_EXP 20
12763: PUSH
12764: LD_VAR 0 4
12768: ARRAY
12769: PUSH
12770: LD_INT 3
12772: EQUAL
12773: IFFALSE 12806
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
12775: LD_ADDR_EXP 20
12779: PUSH
12780: LD_EXP 20
12784: PPUSH
12785: LD_VAR 0 4
12789: PPUSH
12790: LD_INT 1
12792: PPUSH
12793: LD_INT 2
12795: PPUSH
12796: CALL_OW 12
12800: PPUSH
12801: CALL_OW 1
12805: ST_TO_ADDR
12806: GO 12756
12808: POP
12809: POP
// end ; end ;
12810: GO 12813
12812: POP
// for i := 1 to 8 do
12813: LD_ADDR_VAR 0 4
12817: PUSH
12818: DOUBLE
12819: LD_INT 1
12821: DEC
12822: ST_TO_ADDR
12823: LD_INT 8
12825: PUSH
12826: FOR_TO
12827: IFFALSE 12911
// if Side_Positions [ i ] then
12829: LD_EXP 19
12833: PUSH
12834: LD_VAR 0 4
12838: ARRAY
12839: IFFALSE 12909
// begin for j in Unavailable_Techs do
12841: LD_ADDR_VAR 0 5
12845: PUSH
12846: LD_VAR 0 2
12850: PUSH
12851: FOR_IN
12852: IFFALSE 12873
// SetTech ( j , i , 0 ) ;
12854: LD_VAR 0 5
12858: PPUSH
12859: LD_VAR 0 4
12863: PPUSH
12864: LD_INT 0
12866: PPUSH
12867: CALL_OW 322
12871: GO 12851
12873: POP
12874: POP
// for j in Unavailable_Builds do
12875: LD_ADDR_VAR 0 5
12879: PUSH
12880: LD_VAR 0 3
12884: PUSH
12885: FOR_IN
12886: IFFALSE 12907
// SetRestrict ( j , i , 0 ) ;
12888: LD_VAR 0 5
12892: PPUSH
12893: LD_VAR 0 4
12897: PPUSH
12898: LD_INT 0
12900: PPUSH
12901: CALL_OW 324
12905: GO 12885
12907: POP
12908: POP
// end ;
12909: GO 12826
12911: POP
12912: POP
// end ;
12913: LD_VAR 0 1
12917: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
12918: LD_INT 0
12920: PPUSH
12921: PPUSH
12922: PPUSH
12923: PPUSH
12924: PPUSH
12925: PPUSH
12926: PPUSH
// for i := 1 to Restricted_Builds do
12927: LD_ADDR_VAR 0 2
12931: PUSH
12932: DOUBLE
12933: LD_INT 1
12935: DEC
12936: ST_TO_ADDR
12937: LD_LOC 20
12941: PUSH
12942: FOR_TO
12943: IFFALSE 13253
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
12945: LD_LOC 20
12949: PUSH
12950: LD_VAR 0 2
12954: ARRAY
12955: PUSH
12956: LD_INT 1
12958: ARRAY
12959: PUSH
12960: LD_INT 31
12962: DOUBLE
12963: EQUAL
12964: IFTRUE 12980
12966: LD_INT 32
12968: DOUBLE
12969: EQUAL
12970: IFTRUE 12980
12972: LD_INT 33
12974: DOUBLE
12975: EQUAL
12976: IFTRUE 12980
12978: GO 12991
12980: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
12981: LD_ADDR_VAR 0 6
12985: PUSH
12986: LD_STRING #Turrets
12988: ST_TO_ADDR
12989: GO 13036
12991: LD_INT 4
12993: DOUBLE
12994: EQUAL
12995: IFTRUE 13005
12997: LD_INT 5
12999: DOUBLE
13000: EQUAL
13001: IFTRUE 13005
13003: GO 13016
13005: POP
// btype := #Armouries ; b_Behemoth :
13006: LD_ADDR_VAR 0 6
13010: PUSH
13011: LD_STRING #Armouries
13013: ST_TO_ADDR
13014: GO 13036
13016: LD_INT 37
13018: DOUBLE
13019: EQUAL
13020: IFTRUE 13024
13022: GO 13035
13024: POP
// btype := #Behemoths ; end ;
13025: LD_ADDR_VAR 0 6
13029: PUSH
13030: LD_STRING #Behemoths
13032: ST_TO_ADDR
13033: GO 13036
13035: POP
// list := [ ] ;
13036: LD_ADDR_VAR 0 7
13040: PUSH
13041: EMPTY
13042: ST_TO_ADDR
// for j := 1 to 8 do
13043: LD_ADDR_VAR 0 3
13047: PUSH
13048: DOUBLE
13049: LD_INT 1
13051: DEC
13052: ST_TO_ADDR
13053: LD_INT 8
13055: PUSH
13056: FOR_TO
13057: IFFALSE 13150
// if Side_Positions [ j ] then
13059: LD_EXP 19
13063: PUSH
13064: LD_VAR 0 3
13068: ARRAY
13069: IFFALSE 13148
// begin amount := 0 ;
13071: LD_ADDR_VAR 0 5
13075: PUSH
13076: LD_INT 0
13078: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
13079: LD_ADDR_VAR 0 4
13083: PUSH
13084: LD_LOC 20
13088: PUSH
13089: LD_VAR 0 2
13093: ARRAY
13094: PUSH
13095: FOR_IN
13096: IFFALSE 13144
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
13098: LD_ADDR_VAR 0 5
13102: PUSH
13103: LD_VAR 0 5
13107: PUSH
13108: LD_INT 22
13110: PUSH
13111: LD_VAR 0 3
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 30
13122: PUSH
13123: LD_VAR 0 4
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: PPUSH
13136: CALL_OW 69
13140: PLUS
13141: ST_TO_ADDR
13142: GO 13095
13144: POP
13145: POP
// break ;
13146: GO 13150
// end ;
13148: GO 13056
13150: POP
13151: POP
// list := [ ] ;
13152: LD_ADDR_VAR 0 7
13156: PUSH
13157: EMPTY
13158: ST_TO_ADDR
// for j := 1 to 8 do
13159: LD_ADDR_VAR 0 3
13163: PUSH
13164: DOUBLE
13165: LD_INT 1
13167: DEC
13168: ST_TO_ADDR
13169: LD_INT 8
13171: PUSH
13172: FOR_TO
13173: IFFALSE 13193
// list := list ^ amount ;
13175: LD_ADDR_VAR 0 7
13179: PUSH
13180: LD_VAR 0 7
13184: PUSH
13185: LD_VAR 0 5
13189: ADD
13190: ST_TO_ADDR
13191: GO 13172
13193: POP
13194: POP
// Already_Built := Already_Built ^ [ list ] ;
13195: LD_ADDR_LOC 26
13199: PUSH
13200: LD_LOC 26
13204: PUSH
13205: LD_VAR 0 7
13209: PUSH
13210: EMPTY
13211: LIST
13212: ADD
13213: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13214: LD_ADDR_LOC 27
13218: PUSH
13219: LD_LOC 27
13223: PUSH
13224: LD_VAR 0 6
13228: PUSH
13229: LD_VAR 0 5
13233: PUSH
13234: LD_LOC 21
13238: PUSH
13239: LD_VAR 0 2
13243: ARRAY
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: LIST
13249: ADD
13250: ST_TO_ADDR
// end ;
13251: GO 12942
13253: POP
13254: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13255: LD_ADDR_LOC 28
13259: PUSH
13260: LD_INT 0
13262: PUSH
13263: LD_INT 0
13265: PUSH
13266: LD_INT 0
13268: PUSH
13269: LD_INT 0
13271: PUSH
13272: LD_INT 0
13274: PUSH
13275: LD_INT 0
13277: PUSH
13278: LD_INT 0
13280: PUSH
13281: LD_INT 0
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: ST_TO_ADDR
// if Limits_Info then
13294: LD_LOC 27
13298: IFFALSE 13314
// Limits_Info := #Limits ^ Limits_Info ;
13300: LD_ADDR_LOC 27
13304: PUSH
13305: LD_STRING #Limits
13307: PUSH
13308: LD_LOC 27
13312: ADD
13313: ST_TO_ADDR
// end ;
13314: LD_VAR 0 1
13318: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13319: LD_INT 0
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
// for i := 1 to Restricted_Builds do
13325: LD_ADDR_VAR 0 7
13329: PUSH
13330: DOUBLE
13331: LD_INT 1
13333: DEC
13334: ST_TO_ADDR
13335: LD_LOC 20
13339: PUSH
13340: FOR_TO
13341: IFFALSE 13764
// if BType in Restricted_Builds [ i ] then
13343: LD_VAR 0 2
13347: PUSH
13348: LD_LOC 20
13352: PUSH
13353: LD_VAR 0 7
13357: ARRAY
13358: IN
13359: IFFALSE 13762
// begin if old_side then
13361: LD_VAR 0 4
13365: IFFALSE 13491
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
13367: LD_LOC 26
13371: PUSH
13372: LD_VAR 0 7
13376: ARRAY
13377: PUSH
13378: LD_VAR 0 3
13382: ARRAY
13383: PUSH
13384: LD_VAR 0 5
13388: PLUS
13389: PUSH
13390: LD_LOC 21
13394: PUSH
13395: LD_VAR 0 7
13399: ARRAY
13400: GREATER
13401: IFFALSE 13427
// begin SetSide ( un , old_side ) ;
13403: LD_VAR 0 1
13407: PPUSH
13408: LD_VAR 0 4
13412: PPUSH
13413: CALL_OW 235
// count := 0 ;
13417: LD_ADDR_VAR 0 5
13421: PUSH
13422: LD_INT 0
13424: ST_TO_ADDR
// end else
13425: GO 13491
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
13427: LD_ADDR_LOC 26
13431: PUSH
13432: LD_LOC 26
13436: PPUSH
13437: LD_VAR 0 7
13441: PPUSH
13442: LD_LOC 26
13446: PUSH
13447: LD_VAR 0 7
13451: ARRAY
13452: PPUSH
13453: LD_VAR 0 4
13457: PPUSH
13458: LD_LOC 26
13462: PUSH
13463: LD_VAR 0 7
13467: ARRAY
13468: PUSH
13469: LD_VAR 0 4
13473: ARRAY
13474: PUSH
13475: LD_VAR 0 5
13479: MINUS
13480: PPUSH
13481: CALL_OW 1
13485: PPUSH
13486: CALL_OW 1
13490: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
13491: LD_ADDR_LOC 26
13495: PUSH
13496: LD_LOC 26
13500: PPUSH
13501: LD_VAR 0 7
13505: PPUSH
13506: LD_LOC 26
13510: PUSH
13511: LD_VAR 0 7
13515: ARRAY
13516: PPUSH
13517: LD_VAR 0 3
13521: PPUSH
13522: LD_LOC 26
13526: PUSH
13527: LD_VAR 0 7
13531: ARRAY
13532: PUSH
13533: LD_VAR 0 3
13537: ARRAY
13538: PUSH
13539: LD_VAR 0 5
13543: PLUS
13544: PPUSH
13545: CALL_OW 1
13549: PPUSH
13550: CALL_OW 1
13554: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
13555: LD_VAR 0 5
13559: PUSH
13560: LD_INT 0
13562: NONEQUAL
13563: PUSH
13564: LD_VAR 0 3
13568: PUSH
13569: LD_OWVAR 2
13573: EQUAL
13574: AND
13575: IFFALSE 13618
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
13577: LD_ADDR_LOC 27
13581: PUSH
13582: LD_LOC 27
13586: PPUSH
13587: LD_INT 3
13589: PUSH
13590: LD_VAR 0 7
13594: MUL
13595: PPUSH
13596: LD_LOC 26
13600: PUSH
13601: LD_VAR 0 7
13605: ARRAY
13606: PUSH
13607: LD_VAR 0 3
13611: ARRAY
13612: PPUSH
13613: CALL_OW 1
13617: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
13618: LD_LOC 26
13622: PUSH
13623: LD_VAR 0 7
13627: ARRAY
13628: PUSH
13629: LD_VAR 0 3
13633: ARRAY
13634: PUSH
13635: LD_LOC 21
13639: PUSH
13640: LD_VAR 0 7
13644: ARRAY
13645: GREATER
13646: IFFALSE 13673
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
13648: LD_ADDR_LOC 28
13652: PUSH
13653: LD_LOC 28
13657: PPUSH
13658: LD_VAR 0 3
13662: PPUSH
13663: LD_INT 1
13665: PPUSH
13666: CALL_OW 1
13670: ST_TO_ADDR
// end else
13671: GO 13760
// begin for j := 1 to Restricted_Builds do
13673: LD_ADDR_VAR 0 8
13677: PUSH
13678: DOUBLE
13679: LD_INT 1
13681: DEC
13682: ST_TO_ADDR
13683: LD_LOC 20
13687: PUSH
13688: FOR_TO
13689: IFFALSE 13733
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
13691: LD_LOC 26
13695: PUSH
13696: LD_VAR 0 8
13700: ARRAY
13701: PUSH
13702: LD_VAR 0 3
13706: ARRAY
13707: PUSH
13708: LD_LOC 21
13712: PUSH
13713: LD_VAR 0 8
13717: ARRAY
13718: GREATER
13719: IFFALSE 13731
// begin Is_Cheater := true ;
13721: LD_ADDR_VAR 0 9
13725: PUSH
13726: LD_INT 1
13728: ST_TO_ADDR
// break ;
13729: GO 13733
// end ;
13731: GO 13688
13733: POP
13734: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
13735: LD_ADDR_LOC 28
13739: PUSH
13740: LD_LOC 28
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: LD_VAR 0 9
13754: PPUSH
13755: CALL_OW 1
13759: ST_TO_ADDR
// end ; break ;
13760: GO 13764
// end ;
13762: GO 13340
13764: POP
13765: POP
// end ;
13766: LD_VAR 0 6
13770: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
13771: LD_VAR 0 5
13775: PUSH
13776: LD_LOC 22
13780: IN
13781: PUSH
13782: LD_VAR 0 2
13786: PUSH
13787: LD_LOC 23
13791: IN
13792: OR
13793: PUSH
13794: LD_VAR 0 4
13798: PUSH
13799: LD_LOC 24
13803: IN
13804: OR
13805: PUSH
13806: LD_VAR 0 3
13810: PUSH
13811: LD_LOC 25
13815: IN
13816: OR
13817: IFFALSE 13828
// ComCancel ( factory ) ;
13819: LD_VAR 0 1
13823: PPUSH
13824: CALL_OW 127
// end ;
13828: PPOPN 5
13830: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
13831: LD_VAR 0 2
13835: PUSH
13836: LD_LOC 22
13840: IN
13841: IFFALSE 13852
// ComCancel ( building ) ;
13843: LD_VAR 0 1
13847: PPUSH
13848: CALL_OW 127
// end ; end_of_file
13852: PPOPN 2
13854: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
13855: LD_INT 0
13857: PPUSH
13858: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
13859: LD_ADDR_VAR 0 2
13863: PUSH
13864: LD_STRING #Multi1x1-Time
13866: PUSH
13867: LD_OWVAR 1
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: ST_TO_ADDR
// if WaitServerStrings then
13876: LD_EXP 60
13880: IFFALSE 13898
// AllStrings = AllStrings ^ WaitServerStrings ;
13882: LD_ADDR_VAR 0 2
13886: PUSH
13887: LD_VAR 0 2
13891: PUSH
13892: LD_EXP 60
13896: ADD
13897: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
13898: LD_INT 0
13900: PUSH
13901: LD_EXP 16
13905: PUSH
13906: LD_OWVAR 1
13910: MINUS
13911: LESSEQUAL
13912: IFFALSE 13943
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
13914: LD_ADDR_VAR 0 2
13918: PUSH
13919: LD_VAR 0 2
13923: PUSH
13924: LD_STRING #allowedsibbomb
13926: PUSH
13927: LD_EXP 16
13931: PUSH
13932: LD_OWVAR 1
13936: MINUS
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: ADD
13942: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
13943: LD_INT 0
13945: PUSH
13946: LD_EXP 14
13950: PUSH
13951: LD_OWVAR 1
13955: MINUS
13956: LESSEQUAL
13957: IFFALSE 13988
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
13959: LD_ADDR_VAR 0 2
13963: PUSH
13964: LD_VAR 0 2
13968: PUSH
13969: LD_STRING #builduptime
13971: PUSH
13972: LD_EXP 14
13976: PUSH
13977: LD_OWVAR 1
13981: MINUS
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: ADD
13987: ST_TO_ADDR
// if ( ExtraStrings ) then
13988: LD_EXP 59
13992: IFFALSE 14014
// AllStrings := AllStrings ^  ^ ExtraStrings ;
13994: LD_ADDR_VAR 0 2
13998: PUSH
13999: LD_VAR 0 2
14003: PUSH
14004: LD_STRING 
14006: ADD
14007: PUSH
14008: LD_EXP 59
14012: ADD
14013: ST_TO_ADDR
// if ( LimitsStrings ) then
14014: CALL 10716 0 0
14018: IFFALSE 14040
// AllStrings := AllStrings ^  ^ LimitsStrings ;
14020: LD_ADDR_VAR 0 2
14024: PUSH
14025: LD_VAR 0 2
14029: PUSH
14030: LD_STRING 
14032: ADD
14033: PUSH
14034: CALL 10716 0 0
14038: ADD
14039: ST_TO_ADDR
// if debug_strings then
14040: LD_OWVAR 48
14044: IFFALSE 14066
// AllStrings := AllStrings ^  ^ debug_strings ;
14046: LD_ADDR_VAR 0 2
14050: PUSH
14051: LD_VAR 0 2
14055: PUSH
14056: LD_STRING 
14058: ADD
14059: PUSH
14060: LD_OWVAR 48
14064: ADD
14065: ST_TO_ADDR
// Display_Strings := AllStrings ;
14066: LD_ADDR_OWVAR 47
14070: PUSH
14071: LD_VAR 0 2
14075: ST_TO_ADDR
// end ;
14076: LD_VAR 0 1
14080: RET
// every 0 0$1 do
14081: GO 14083
14083: DISABLE
// begin ShowTimer ;
14084: CALL 13855 0 0
// enable ;
14088: ENABLE
// end ; end_of_file
14089: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
14090: LD_INT 0
14092: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
14093: LD_VAR 0 1
14097: PPUSH
14098: CALL_OW 255
14102: PUSH
14103: LD_VAR 0 4
14107: EQUAL
14108: IFFALSE 14127
// begin SetAchievement ( ACH_RAD ) ;
14110: LD_STRING ACH_RAD
14112: PPUSH
14113: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
14117: LD_STRING ACH_NL
14119: PPUSH
14120: LD_INT 1
14122: PPUSH
14123: CALL_OW 564
// end end ;
14127: LD_VAR 0 5
14131: RET
// export function SA_Win ( side ) ; begin
14132: LD_INT 0
14134: PPUSH
// case side of 1 :
14135: LD_VAR 0 1
14139: PUSH
14140: LD_INT 1
14142: DOUBLE
14143: EQUAL
14144: IFTRUE 14148
14146: GO 14161
14148: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
14149: LD_STRING ACH_AH
14151: PPUSH
14152: LD_INT 1
14154: PPUSH
14155: CALL_OW 564
14159: GO 14324
14161: LD_INT 2
14163: DOUBLE
14164: EQUAL
14165: IFTRUE 14169
14167: GO 14182
14169: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
14170: LD_STRING ACH_E
14172: PPUSH
14173: LD_INT 1
14175: PPUSH
14176: CALL_OW 564
14180: GO 14324
14182: LD_INT 3
14184: DOUBLE
14185: EQUAL
14186: IFTRUE 14190
14188: GO 14203
14190: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
14191: LD_STRING ACH_OOL
14193: PPUSH
14194: LD_INT 1
14196: PPUSH
14197: CALL_OW 564
14201: GO 14324
14203: LD_INT 1
14205: PUSH
14206: LD_INT 2
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: DOUBLE
14213: EQUAL
14214: IFTRUE 14218
14216: GO 14243
14218: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14219: LD_STRING ACH_AH
14221: PPUSH
14222: LD_REAL  5.00000000000000E-0001
14225: PPUSH
14226: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14230: LD_STRING ACH_E
14232: PPUSH
14233: LD_REAL  5.00000000000000E-0001
14236: PPUSH
14237: CALL_OW 564
// end ; [ 2 , 3 ] :
14241: GO 14324
14243: LD_INT 2
14245: PUSH
14246: LD_INT 3
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: DOUBLE
14253: EQUAL
14254: IFTRUE 14258
14256: GO 14283
14258: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14259: LD_STRING ACH_OOL
14261: PPUSH
14262: LD_REAL  5.00000000000000E-0001
14265: PPUSH
14266: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14270: LD_STRING ACH_E
14272: PPUSH
14273: LD_REAL  5.00000000000000E-0001
14276: PPUSH
14277: CALL_OW 564
// end ; [ 3 , 1 ] :
14281: GO 14324
14283: LD_INT 3
14285: PUSH
14286: LD_INT 1
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: DOUBLE
14293: EQUAL
14294: IFTRUE 14298
14296: GO 14323
14298: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14299: LD_STRING ACH_AH
14301: PPUSH
14302: LD_REAL  5.00000000000000E-0001
14305: PPUSH
14306: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14310: LD_STRING ACH_OOL
14312: PPUSH
14313: LD_REAL  5.00000000000000E-0001
14316: PPUSH
14317: CALL_OW 564
// end ; end ;
14321: GO 14324
14323: POP
// end ; end_of_file
14324: LD_VAR 0 2
14328: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
14329: LD_INT 0
14331: PPUSH
14332: PPUSH
// enable ( 98 ) ;
14333: LD_INT 98
14335: ENABLE_MARKED
// GameEnded = false ;
14336: LD_ADDR_LOC 30
14340: PUSH
14341: LD_INT 0
14343: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14344: LD_ADDR_LOC 29
14348: PUSH
14349: LD_INT 0
14351: PUSH
14352: LD_INT 0
14354: PUSH
14355: LD_INT 0
14357: PUSH
14358: LD_INT 0
14360: PUSH
14361: LD_INT 0
14363: PUSH
14364: LD_INT 0
14366: PUSH
14367: LD_INT 0
14369: PUSH
14370: LD_INT 0
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: ST_TO_ADDR
// unfoged = false ;
14383: LD_ADDR_LOC 31
14387: PUSH
14388: LD_INT 0
14390: ST_TO_ADDR
// for i = 1 to side_positions do
14391: LD_ADDR_VAR 0 2
14395: PUSH
14396: DOUBLE
14397: LD_INT 1
14399: DEC
14400: ST_TO_ADDR
14401: LD_EXP 19
14405: PUSH
14406: FOR_TO
14407: IFFALSE 14447
// if not side_positions [ i ] then
14409: LD_EXP 19
14413: PUSH
14414: LD_VAR 0 2
14418: ARRAY
14419: NOT
14420: IFFALSE 14445
// defaited = replace ( defaited , i , true ) ;
14422: LD_ADDR_LOC 29
14426: PUSH
14427: LD_LOC 29
14431: PPUSH
14432: LD_VAR 0 2
14436: PPUSH
14437: LD_INT 1
14439: PPUSH
14440: CALL_OW 1
14444: ST_TO_ADDR
14445: GO 14406
14447: POP
14448: POP
// end ;
14449: LD_VAR 0 1
14453: RET
// function CanWinLoose ; begin
14454: LD_INT 0
14456: PPUSH
// Result := true ;
14457: LD_ADDR_VAR 0 1
14461: PUSH
14462: LD_INT 1
14464: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
14465: CALL_OW 518
14469: PUSH
14470: CALL_OW 519
14474: PUSH
14475: LD_INT 0
14477: GREATER
14478: AND
14479: IFFALSE 14489
// Result := false ;
14481: LD_ADDR_VAR 0 1
14485: PUSH
14486: LD_INT 0
14488: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14489: CALL_OW 531
14493: PUSH
14494: CALL_OW 519
14498: PUSH
14499: LD_INT 1
14501: GREATER
14502: AND
14503: IFFALSE 14513
// Result := false ;
14505: LD_ADDR_VAR 0 1
14509: PUSH
14510: LD_INT 0
14512: ST_TO_ADDR
// end ;
14513: LD_VAR 0 1
14517: RET
// export function HasPower ( i ) ; var k , h ; begin
14518: LD_INT 0
14520: PPUSH
14521: PPUSH
14522: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
14523: LD_VAR 0 1
14527: PPUSH
14528: CALL_OW 108
14532: NOT
14533: PUSH
14534: LD_EXP 22
14538: PUSH
14539: LD_VAR 0 1
14543: ARRAY
14544: NOT
14545: AND
14546: PUSH
14547: LD_OWVAR 4
14551: AND
14552: IFFALSE 14564
// begin result = false ;
14554: LD_ADDR_VAR 0 2
14558: PUSH
14559: LD_INT 0
14561: ST_TO_ADDR
// end else
14562: GO 14859
// case def_win_rules of 0 :
14564: LD_EXP 32
14568: PUSH
14569: LD_INT 0
14571: DOUBLE
14572: EQUAL
14573: IFTRUE 14577
14575: GO 14740
14577: POP
// if def_people_respawning then
14578: LD_EXP 54
14582: IFFALSE 14673
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
14584: LD_ADDR_VAR 0 2
14588: PUSH
14589: LD_INT 22
14591: PUSH
14592: LD_VAR 0 1
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PUSH
14601: LD_INT 2
14603: PUSH
14604: LD_INT 21
14606: PUSH
14607: LD_INT 1
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 33
14616: PUSH
14617: LD_INT 3
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 33
14626: PUSH
14627: LD_INT 5
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: LD_INT 30
14636: PUSH
14637: LD_INT 0
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 30
14646: PUSH
14647: LD_INT 1
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PPUSH
14666: CALL_OW 69
14670: ST_TO_ADDR
14671: GO 14738
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
14673: LD_ADDR_VAR 0 2
14677: PUSH
14678: LD_INT 22
14680: PUSH
14681: LD_VAR 0 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 2
14692: PUSH
14693: LD_INT 21
14695: PUSH
14696: LD_INT 1
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: LD_INT 33
14705: PUSH
14706: LD_INT 3
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 33
14715: PUSH
14716: LD_INT 5
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: PPUSH
14733: CALL_OW 69
14737: ST_TO_ADDR
14738: GO 14859
14740: LD_INT 1
14742: DOUBLE
14743: EQUAL
14744: IFTRUE 14748
14746: GO 14787
14748: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
14749: LD_ADDR_VAR 0 2
14753: PUSH
14754: LD_INT 22
14756: PUSH
14757: LD_VAR 0 1
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: LD_INT 1
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PPUSH
14780: CALL_OW 69
14784: ST_TO_ADDR
14785: GO 14859
14787: LD_INT 2
14789: DOUBLE
14790: EQUAL
14791: IFTRUE 14795
14793: GO 14858
14795: POP
// begin h = false ;
14796: LD_ADDR_VAR 0 4
14800: PUSH
14801: LD_INT 0
14803: ST_TO_ADDR
// for k in heroes [ i ] do
14804: LD_ADDR_VAR 0 3
14808: PUSH
14809: LD_EXP 33
14813: PUSH
14814: LD_VAR 0 1
14818: ARRAY
14819: PUSH
14820: FOR_IN
14821: IFFALSE 14844
// if IsLive ( k ) then
14823: LD_VAR 0 3
14827: PPUSH
14828: CALL_OW 300
14832: IFFALSE 14842
// h = true ;
14834: LD_ADDR_VAR 0 4
14838: PUSH
14839: LD_INT 1
14841: ST_TO_ADDR
14842: GO 14820
14844: POP
14845: POP
// Result := h ;
14846: LD_ADDR_VAR 0 2
14850: PUSH
14851: LD_VAR 0 4
14855: ST_TO_ADDR
// end ; end ;
14856: GO 14859
14858: POP
// end ;
14859: LD_VAR 0 2
14863: RET
// function AlliedSides ( i , j ) ; begin
14864: LD_INT 0
14866: PPUSH
// Result := false ;
14867: LD_ADDR_VAR 0 3
14871: PUSH
14872: LD_INT 0
14874: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
14875: LD_VAR 0 1
14879: PPUSH
14880: LD_VAR 0 2
14884: PPUSH
14885: CALL_OW 81
14889: PUSH
14890: LD_INT 1
14892: EQUAL
14893: PUSH
14894: LD_VAR 0 2
14898: PPUSH
14899: LD_VAR 0 1
14903: PPUSH
14904: CALL_OW 81
14908: PUSH
14909: LD_INT 1
14911: EQUAL
14912: AND
14913: PUSH
14914: LD_VAR 0 1
14918: PPUSH
14919: CALL_OW 83
14923: AND
14924: PUSH
14925: LD_VAR 0 2
14929: PPUSH
14930: CALL_OW 83
14934: AND
14935: IFFALSE 14945
// Result := true ;
14937: LD_ADDR_VAR 0 3
14941: PUSH
14942: LD_INT 1
14944: ST_TO_ADDR
// end ;
14945: LD_VAR 0 3
14949: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
14950: CALL 14454 0 0
14954: PUSH
14955: LD_LOC 30
14959: NOT
14960: AND
14961: IFFALSE 14977
14963: GO 14965
14965: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
14966: LD_ADDR_EXP 60
14970: PUSH
14971: LD_STRING #Player-Ended
14973: PUSH
14974: EMPTY
14975: LIST
14976: ST_TO_ADDR
14977: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
14978: CALL 14454 0 0
14982: PUSH
14983: LD_LOC 30
14987: AND
14988: IFFALSE 14997
14990: GO 14992
14992: DISABLE
// YouLostInMultiplayer ;
14993: CALL_OW 107
14997: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
14998: CALL 14454 0 0
15002: NOT
15003: PUSH
15004: CALL_OW 531
15008: NOT
15009: AND
15010: IFFALSE 15026
15012: GO 15014
15014: DISABLE
// WaitServerStrings = [ #server-wait ] ;
15015: LD_ADDR_EXP 60
15019: PUSH
15020: LD_STRING #server-wait
15022: PUSH
15023: EMPTY
15024: LIST
15025: ST_TO_ADDR
15026: END
// every 100 trigger IAmSpec do
15027: CALL_OW 531
15031: IFFALSE 15047
15033: GO 15035
15035: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
15036: LD_ADDR_EXP 60
15040: PUSH
15041: LD_STRING #Player-IAmSpec
15043: PUSH
15044: EMPTY
15045: LIST
15046: ST_TO_ADDR
15047: END
// every 100 trigger GameEnded and IAmSpec do
15048: LD_LOC 30
15052: PUSH
15053: CALL_OW 531
15057: AND
15058: IFFALSE 15067
15060: GO 15062
15062: DISABLE
// YouLostInMultiplayer ;
15063: CALL_OW 107
15067: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
15068: CALL 14454 0 0
15072: PUSH
15073: LD_LOC 30
15077: NOT
15078: AND
15079: IFFALSE 15095
15081: GO 15083
15083: DISABLE
// WaitServerStrings = [ $player-win ] ;
15084: LD_ADDR_EXP 60
15088: PUSH
15089: LD_STRING $player-win
15091: PUSH
15092: EMPTY
15093: LIST
15094: ST_TO_ADDR
15095: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
15096: CALL 14454 0 0
15100: PUSH
15101: LD_LOC 30
15105: AND
15106: IFFALSE 15130
15108: GO 15110
15110: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
15111: LD_EXP 20
15115: PUSH
15116: LD_OWVAR 2
15120: ARRAY
15121: PPUSH
15122: CALL 14132 0 1
// YouWinInMultiplayer ;
15126: CALL_OW 106
// end ;
15130: END
// every 100 trigger isEditor marked 401 do
15131: LD_OWVAR 84
15135: IFFALSE 15151
15137: GO 15139
15139: DISABLE
// Debug_Strings = [ You won ] ;
15140: LD_ADDR_OWVAR 48
15144: PUSH
15145: LD_STRING You won
15147: PUSH
15148: EMPTY
15149: LIST
15150: ST_TO_ADDR
15151: END
// every 100 trigger isEditor marked 400 do
15152: LD_OWVAR 84
15156: IFFALSE 15172
15158: GO 15160
15160: DISABLE
// Debug_Strings = [ You loss ] ;
15161: LD_ADDR_OWVAR 48
15165: PUSH
15166: LD_STRING You loss
15168: PUSH
15169: EMPTY
15170: LIST
15171: ST_TO_ADDR
15172: END
// every 100 marked 98 do var i , un ;
15173: GO 15175
15175: DISABLE
15176: LD_INT 0
15178: PPUSH
15179: PPUSH
// begin for i = 1 to side_positions do
15180: LD_ADDR_VAR 0 1
15184: PUSH
15185: DOUBLE
15186: LD_INT 1
15188: DEC
15189: ST_TO_ADDR
15190: LD_EXP 19
15194: PUSH
15195: FOR_TO
15196: IFFALSE 15279
// if side_positions [ i ] then
15198: LD_EXP 19
15202: PUSH
15203: LD_VAR 0 1
15207: ARRAY
15208: IFFALSE 15277
// if not HasPower ( i ) and not Defaited [ i ] then
15210: LD_VAR 0 1
15214: PPUSH
15215: CALL 14518 0 1
15219: NOT
15220: PUSH
15221: LD_LOC 29
15225: PUSH
15226: LD_VAR 0 1
15230: ARRAY
15231: NOT
15232: AND
15233: IFFALSE 15277
// begin Defaited = replace ( Defaited , i , true ) ;
15235: LD_ADDR_LOC 29
15239: PUSH
15240: LD_LOC 29
15244: PPUSH
15245: LD_VAR 0 1
15249: PPUSH
15250: LD_INT 1
15252: PPUSH
15253: CALL_OW 1
15257: ST_TO_ADDR
// if i = your_side then
15258: LD_VAR 0 1
15262: PUSH
15263: LD_OWVAR 2
15267: EQUAL
15268: IFFALSE 15277
// begin Multiplayer_Loose_Message ;
15270: CALL_OW 521
// enable ( 400 ) ;
15274: LD_INT 400
15276: ENABLE_MARKED
// end ; end ;
15277: GO 15195
15279: POP
15280: POP
// if not Unfoged and defaited [ your_side ] then
15281: LD_LOC 31
15285: NOT
15286: PUSH
15287: LD_LOC 29
15291: PUSH
15292: LD_OWVAR 2
15296: ARRAY
15297: AND
15298: IFFALSE 15304
// Unfog ;
15300: CALL 15480 0 0
// DidGameEnd ;
15304: CALL 15319 0 0
// if not GameEnded then
15308: LD_LOC 30
15312: NOT
15313: IFFALSE 15316
// enable ;
15315: ENABLE
// end ;
15316: PPOPN 2
15318: END
// function DidGameEnd ; var i , k , enemy ; begin
15319: LD_INT 0
15321: PPUSH
15322: PPUSH
15323: PPUSH
15324: PPUSH
// enemy = [ ] ;
15325: LD_ADDR_VAR 0 4
15329: PUSH
15330: EMPTY
15331: ST_TO_ADDR
// for i = 1 to side_positions do
15332: LD_ADDR_VAR 0 2
15336: PUSH
15337: DOUBLE
15338: LD_INT 1
15340: DEC
15341: ST_TO_ADDR
15342: LD_EXP 19
15346: PUSH
15347: FOR_TO
15348: IFFALSE 15442
// if not defaited [ i ] then
15350: LD_LOC 29
15354: PUSH
15355: LD_VAR 0 2
15359: ARRAY
15360: NOT
15361: IFFALSE 15440
// for k = 1 to side_positions do
15363: LD_ADDR_VAR 0 3
15367: PUSH
15368: DOUBLE
15369: LD_INT 1
15371: DEC
15372: ST_TO_ADDR
15373: LD_EXP 19
15377: PUSH
15378: FOR_TO
15379: IFFALSE 15438
// if not defaited [ k ] then
15381: LD_LOC 29
15385: PUSH
15386: LD_VAR 0 3
15390: ARRAY
15391: NOT
15392: IFFALSE 15436
// if not AlliedSides ( i , k ) then
15394: LD_VAR 0 2
15398: PPUSH
15399: LD_VAR 0 3
15403: PPUSH
15404: CALL 14864 0 2
15408: NOT
15409: IFFALSE 15436
// enemy = enemy ^ [ i , k ] ;
15411: LD_ADDR_VAR 0 4
15415: PUSH
15416: LD_VAR 0 4
15420: PUSH
15421: LD_VAR 0 2
15425: PUSH
15426: LD_VAR 0 3
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: ADD
15435: ST_TO_ADDR
15436: GO 15378
15438: POP
15439: POP
15440: GO 15347
15442: POP
15443: POP
// if not enemy then
15444: LD_VAR 0 4
15448: NOT
15449: IFFALSE 15475
// begin GameEnded = true ;
15451: LD_ADDR_LOC 30
15455: PUSH
15456: LD_INT 1
15458: ST_TO_ADDR
// if not defaited [ your_side ] then
15459: LD_LOC 29
15463: PUSH
15464: LD_OWVAR 2
15468: ARRAY
15469: NOT
15470: IFFALSE 15475
// enable ( 401 ) ;
15472: LD_INT 401
15474: ENABLE_MARKED
// end ; end ;
15475: LD_VAR 0 1
15479: RET
// function unfog ; var k , friends ; begin
15480: LD_INT 0
15482: PPUSH
15483: PPUSH
15484: PPUSH
// SetPlayerSpectator ( ) ;
15485: CALL_OW 572
// unfoged = true ;
15489: LD_ADDR_LOC 31
15493: PUSH
15494: LD_INT 1
15496: ST_TO_ADDR
// end ;
15497: LD_VAR 0 1
15501: RET
// export function MakeGameEnd ; begin
15502: LD_INT 0
15504: PPUSH
// SetPlayerSpectator ( ) ;
15505: CALL_OW 572
// unfoged = true ;
15509: LD_ADDR_LOC 31
15513: PUSH
15514: LD_INT 1
15516: ST_TO_ADDR
// wait ( 0 0$5 ) ;
15517: LD_INT 175
15519: PPUSH
15520: CALL_OW 67
// GameEnded = true ;
15524: LD_ADDR_LOC 30
15528: PUSH
15529: LD_INT 1
15531: ST_TO_ADDR
// end ;
15532: LD_VAR 0 1
15536: RET
// export function GetGameEnded ; begin
15537: LD_INT 0
15539: PPUSH
// result = GameEnded ;
15540: LD_ADDR_VAR 0 1
15544: PUSH
15545: LD_LOC 30
15549: ST_TO_ADDR
// end ; end_of_file
15550: LD_VAR 0 1
15554: RET
// export function SetMpTechs ( ) ; var side , i ; begin
15555: LD_INT 0
15557: PPUSH
15558: PPUSH
15559: PPUSH
// for side = 1 to 8 do
15560: LD_ADDR_VAR 0 2
15564: PUSH
15565: DOUBLE
15566: LD_INT 1
15568: DEC
15569: ST_TO_ADDR
15570: LD_INT 8
15572: PUSH
15573: FOR_TO
15574: IFFALSE 15695
// begin for i = 1 to 72 do
15576: LD_ADDR_VAR 0 3
15580: PUSH
15581: DOUBLE
15582: LD_INT 1
15584: DEC
15585: ST_TO_ADDR
15586: LD_INT 72
15588: PUSH
15589: FOR_TO
15590: IFFALSE 15621
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15592: LD_VAR 0 3
15596: PPUSH
15597: LD_VAR 0 2
15601: PPUSH
15602: LD_INT 0
15604: PPUSH
15605: LD_VAR 0 3
15609: PPUSH
15610: CALL_OW 565
15614: PPUSH
15615: CALL_OW 322
15619: GO 15589
15621: POP
15622: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15623: LD_INT 73
15625: PPUSH
15626: LD_VAR 0 2
15630: PPUSH
15631: LD_INT 0
15633: PPUSH
15634: LD_INT 25
15636: PPUSH
15637: CALL_OW 565
15641: PPUSH
15642: CALL_OW 322
// for i = 0 to 40 do
15646: LD_ADDR_VAR 0 3
15650: PUSH
15651: DOUBLE
15652: LD_INT 0
15654: DEC
15655: ST_TO_ADDR
15656: LD_INT 40
15658: PUSH
15659: FOR_TO
15660: IFFALSE 15691
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15662: LD_VAR 0 3
15666: PPUSH
15667: LD_VAR 0 2
15671: PPUSH
15672: LD_INT 1
15674: PPUSH
15675: LD_VAR 0 3
15679: PPUSH
15680: CALL_OW 565
15684: PPUSH
15685: CALL_OW 324
15689: GO 15659
15691: POP
15692: POP
// end ;
15693: GO 15573
15695: POP
15696: POP
// end ;
15697: LD_VAR 0 1
15701: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15702: LD_INT 0
15704: PPUSH
15705: PPUSH
15706: PPUSH
// for side = 1 to 8 do
15707: LD_ADDR_VAR 0 3
15711: PUSH
15712: DOUBLE
15713: LD_INT 1
15715: DEC
15716: ST_TO_ADDR
15717: LD_INT 8
15719: PUSH
15720: FOR_TO
15721: IFFALSE 19717
// begin for i = 1 to 73 do
15723: LD_ADDR_VAR 0 4
15727: PUSH
15728: DOUBLE
15729: LD_INT 1
15731: DEC
15732: ST_TO_ADDR
15733: LD_INT 73
15735: PUSH
15736: FOR_TO
15737: IFFALSE 15758
// SetTech ( i , side , state_disabled ) ;
15739: LD_VAR 0 4
15743: PPUSH
15744: LD_VAR 0 3
15748: PPUSH
15749: LD_INT 0
15751: PPUSH
15752: CALL_OW 322
15756: GO 15736
15758: POP
15759: POP
// for i = 0 to 40 do
15760: LD_ADDR_VAR 0 4
15764: PUSH
15765: DOUBLE
15766: LD_INT 0
15768: DEC
15769: ST_TO_ADDR
15770: LD_INT 40
15772: PUSH
15773: FOR_TO
15774: IFFALSE 15795
// SetRestrict ( i , side , false ) ;
15776: LD_VAR 0 4
15780: PPUSH
15781: LD_VAR 0 3
15785: PPUSH
15786: LD_INT 0
15788: PPUSH
15789: CALL_OW 324
15793: GO 15773
15795: POP
15796: POP
// case level of 1 :
15797: LD_VAR 0 1
15801: PUSH
15802: LD_INT 1
15804: DOUBLE
15805: EQUAL
15806: IFTRUE 15810
15808: GO 15963
15810: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15811: LD_INT 35
15813: PPUSH
15814: LD_VAR 0 3
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15826: LD_INT 45
15828: PPUSH
15829: LD_VAR 0 3
15833: PPUSH
15834: LD_INT 1
15836: PPUSH
15837: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15841: LD_INT 46
15843: PPUSH
15844: LD_VAR 0 3
15848: PPUSH
15849: LD_INT 1
15851: PPUSH
15852: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15856: LD_INT 47
15858: PPUSH
15859: LD_VAR 0 3
15863: PPUSH
15864: LD_INT 1
15866: PPUSH
15867: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15871: LD_INT 0
15873: PPUSH
15874: LD_VAR 0 3
15878: PPUSH
15879: LD_INT 1
15881: PPUSH
15882: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15886: LD_INT 2
15888: PPUSH
15889: LD_VAR 0 3
15893: PPUSH
15894: LD_INT 1
15896: PPUSH
15897: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15901: LD_INT 4
15903: PPUSH
15904: LD_VAR 0 3
15908: PPUSH
15909: LD_INT 1
15911: PPUSH
15912: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15916: LD_INT 6
15918: PPUSH
15919: LD_VAR 0 3
15923: PPUSH
15924: LD_INT 1
15926: PPUSH
15927: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15931: LD_INT 29
15933: PPUSH
15934: LD_VAR 0 3
15938: PPUSH
15939: LD_INT 1
15941: PPUSH
15942: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15946: LD_INT 31
15948: PPUSH
15949: LD_VAR 0 3
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 324
// end ; 2 :
15961: GO 19715
15963: LD_INT 2
15965: DOUBLE
15966: EQUAL
15967: IFTRUE 15971
15969: GO 16169
15971: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15972: LD_INT 35
15974: PPUSH
15975: LD_VAR 0 3
15979: PPUSH
15980: LD_INT 1
15982: PPUSH
15983: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15987: LD_INT 45
15989: PPUSH
15990: LD_VAR 0 3
15994: PPUSH
15995: LD_INT 1
15997: PPUSH
15998: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16002: LD_INT 46
16004: PPUSH
16005: LD_VAR 0 3
16009: PPUSH
16010: LD_INT 1
16012: PPUSH
16013: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16017: LD_INT 47
16019: PPUSH
16020: LD_VAR 0 3
16024: PPUSH
16025: LD_INT 1
16027: PPUSH
16028: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16032: LD_INT 1
16034: PPUSH
16035: LD_VAR 0 3
16039: PPUSH
16040: LD_INT 1
16042: PPUSH
16043: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16047: LD_INT 2
16049: PPUSH
16050: LD_VAR 0 3
16054: PPUSH
16055: LD_INT 1
16057: PPUSH
16058: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16062: LD_INT 11
16064: PPUSH
16065: LD_VAR 0 3
16069: PPUSH
16070: LD_INT 1
16072: PPUSH
16073: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16077: LD_INT 0
16079: PPUSH
16080: LD_VAR 0 3
16084: PPUSH
16085: LD_INT 1
16087: PPUSH
16088: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16092: LD_INT 2
16094: PPUSH
16095: LD_VAR 0 3
16099: PPUSH
16100: LD_INT 1
16102: PPUSH
16103: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16107: LD_INT 4
16109: PPUSH
16110: LD_VAR 0 3
16114: PPUSH
16115: LD_INT 1
16117: PPUSH
16118: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16122: LD_INT 6
16124: PPUSH
16125: LD_VAR 0 3
16129: PPUSH
16130: LD_INT 1
16132: PPUSH
16133: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16137: LD_INT 29
16139: PPUSH
16140: LD_VAR 0 3
16144: PPUSH
16145: LD_INT 1
16147: PPUSH
16148: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16152: LD_INT 31
16154: PPUSH
16155: LD_VAR 0 3
16159: PPUSH
16160: LD_INT 1
16162: PPUSH
16163: CALL_OW 324
// end ; 3 :
16167: GO 19715
16169: LD_INT 3
16171: DOUBLE
16172: EQUAL
16173: IFTRUE 16177
16175: GO 16630
16177: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16178: LD_INT 35
16180: PPUSH
16181: LD_VAR 0 3
16185: PPUSH
16186: LD_INT 1
16188: PPUSH
16189: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16193: LD_INT 45
16195: PPUSH
16196: LD_VAR 0 3
16200: PPUSH
16201: LD_INT 1
16203: PPUSH
16204: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16208: LD_INT 46
16210: PPUSH
16211: LD_VAR 0 3
16215: PPUSH
16216: LD_INT 1
16218: PPUSH
16219: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16223: LD_INT 47
16225: PPUSH
16226: LD_VAR 0 3
16230: PPUSH
16231: LD_INT 1
16233: PPUSH
16234: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16238: LD_INT 1
16240: PPUSH
16241: LD_VAR 0 3
16245: PPUSH
16246: LD_INT 1
16248: PPUSH
16249: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16253: LD_INT 2
16255: PPUSH
16256: LD_VAR 0 3
16260: PPUSH
16261: LD_INT 1
16263: PPUSH
16264: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16268: LD_INT 11
16270: PPUSH
16271: LD_VAR 0 3
16275: PPUSH
16276: LD_INT 1
16278: PPUSH
16279: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16283: LD_INT 48
16285: PPUSH
16286: LD_VAR 0 3
16290: PPUSH
16291: LD_INT 1
16293: PPUSH
16294: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16298: LD_INT 69
16300: PPUSH
16301: LD_VAR 0 3
16305: PPUSH
16306: LD_INT 1
16308: PPUSH
16309: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16313: LD_INT 39
16315: PPUSH
16316: LD_VAR 0 3
16320: PPUSH
16321: LD_INT 1
16323: PPUSH
16324: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16328: LD_INT 43
16330: PPUSH
16331: LD_VAR 0 3
16335: PPUSH
16336: LD_INT 1
16338: PPUSH
16339: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16343: LD_INT 51
16345: PPUSH
16346: LD_VAR 0 3
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16358: LD_INT 6
16360: PPUSH
16361: LD_VAR 0 3
16365: PPUSH
16366: LD_INT 1
16368: PPUSH
16369: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16373: LD_INT 0
16375: PPUSH
16376: LD_VAR 0 3
16380: PPUSH
16381: LD_INT 1
16383: PPUSH
16384: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16388: LD_INT 2
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: LD_INT 1
16398: PPUSH
16399: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16403: LD_INT 3
16405: PPUSH
16406: LD_VAR 0 3
16410: PPUSH
16411: LD_INT 1
16413: PPUSH
16414: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16418: LD_INT 4
16420: PPUSH
16421: LD_VAR 0 3
16425: PPUSH
16426: LD_INT 1
16428: PPUSH
16429: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16433: LD_INT 6
16435: PPUSH
16436: LD_VAR 0 3
16440: PPUSH
16441: LD_INT 1
16443: PPUSH
16444: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16448: LD_INT 7
16450: PPUSH
16451: LD_VAR 0 3
16455: PPUSH
16456: LD_INT 1
16458: PPUSH
16459: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16463: LD_INT 8
16465: PPUSH
16466: LD_VAR 0 3
16470: PPUSH
16471: LD_INT 1
16473: PPUSH
16474: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16478: LD_INT 10
16480: PPUSH
16481: LD_VAR 0 3
16485: PPUSH
16486: LD_INT 1
16488: PPUSH
16489: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16493: LD_INT 15
16495: PPUSH
16496: LD_VAR 0 3
16500: PPUSH
16501: LD_INT 1
16503: PPUSH
16504: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16508: LD_INT 16
16510: PPUSH
16511: LD_VAR 0 3
16515: PPUSH
16516: LD_INT 1
16518: PPUSH
16519: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16523: LD_INT 17
16525: PPUSH
16526: LD_VAR 0 3
16530: PPUSH
16531: LD_INT 1
16533: PPUSH
16534: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16538: LD_INT 20
16540: PPUSH
16541: LD_VAR 0 3
16545: PPUSH
16546: LD_INT 1
16548: PPUSH
16549: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16553: LD_INT 26
16555: PPUSH
16556: LD_VAR 0 3
16560: PPUSH
16561: LD_INT 1
16563: PPUSH
16564: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16568: LD_INT 27
16570: PPUSH
16571: LD_VAR 0 3
16575: PPUSH
16576: LD_INT 1
16578: PPUSH
16579: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16583: LD_INT 29
16585: PPUSH
16586: LD_VAR 0 3
16590: PPUSH
16591: LD_INT 1
16593: PPUSH
16594: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16598: LD_INT 31
16600: PPUSH
16601: LD_VAR 0 3
16605: PPUSH
16606: LD_INT 1
16608: PPUSH
16609: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16613: LD_INT 32
16615: PPUSH
16616: LD_VAR 0 3
16620: PPUSH
16621: LD_INT 1
16623: PPUSH
16624: CALL_OW 324
// end ; 4 :
16628: GO 19715
16630: LD_INT 4
16632: DOUBLE
16633: EQUAL
16634: IFTRUE 16638
16636: GO 17586
16638: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16639: LD_INT 35
16641: PPUSH
16642: LD_VAR 0 3
16646: PPUSH
16647: LD_INT 1
16649: PPUSH
16650: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16654: LD_INT 45
16656: PPUSH
16657: LD_VAR 0 3
16661: PPUSH
16662: LD_INT 1
16664: PPUSH
16665: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16669: LD_INT 46
16671: PPUSH
16672: LD_VAR 0 3
16676: PPUSH
16677: LD_INT 1
16679: PPUSH
16680: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16684: LD_INT 47
16686: PPUSH
16687: LD_VAR 0 3
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16699: LD_INT 1
16701: PPUSH
16702: LD_VAR 0 3
16706: PPUSH
16707: LD_INT 1
16709: PPUSH
16710: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16714: LD_INT 2
16716: PPUSH
16717: LD_VAR 0 3
16721: PPUSH
16722: LD_INT 1
16724: PPUSH
16725: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16729: LD_INT 11
16731: PPUSH
16732: LD_VAR 0 3
16736: PPUSH
16737: LD_INT 1
16739: PPUSH
16740: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16744: LD_INT 20
16746: PPUSH
16747: LD_VAR 0 3
16751: PPUSH
16752: LD_INT 1
16754: PPUSH
16755: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16759: LD_INT 48
16761: PPUSH
16762: LD_VAR 0 3
16766: PPUSH
16767: LD_INT 1
16769: PPUSH
16770: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16774: LD_INT 49
16776: PPUSH
16777: LD_VAR 0 3
16781: PPUSH
16782: LD_INT 1
16784: PPUSH
16785: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16789: LD_INT 69
16791: PPUSH
16792: LD_VAR 0 3
16796: PPUSH
16797: LD_INT 1
16799: PPUSH
16800: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16804: LD_INT 39
16806: PPUSH
16807: LD_VAR 0 3
16811: PPUSH
16812: LD_INT 1
16814: PPUSH
16815: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16819: LD_INT 34
16821: PPUSH
16822: LD_VAR 0 3
16826: PPUSH
16827: LD_INT 1
16829: PPUSH
16830: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16834: LD_INT 42
16836: PPUSH
16837: LD_VAR 0 3
16841: PPUSH
16842: LD_INT 1
16844: PPUSH
16845: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16849: LD_INT 44
16851: PPUSH
16852: LD_VAR 0 3
16856: PPUSH
16857: LD_INT 1
16859: PPUSH
16860: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16864: LD_INT 41
16866: PPUSH
16867: LD_VAR 0 3
16871: PPUSH
16872: LD_INT 1
16874: PPUSH
16875: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16879: LD_INT 43
16881: PPUSH
16882: LD_VAR 0 3
16886: PPUSH
16887: LD_INT 1
16889: PPUSH
16890: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16894: LD_INT 70
16896: PPUSH
16897: LD_VAR 0 3
16901: PPUSH
16902: LD_INT 1
16904: PPUSH
16905: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16909: LD_INT 51
16911: PPUSH
16912: LD_VAR 0 3
16916: PPUSH
16917: LD_INT 1
16919: PPUSH
16920: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16924: LD_INT 52
16926: PPUSH
16927: LD_VAR 0 3
16931: PPUSH
16932: LD_INT 1
16934: PPUSH
16935: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16939: LD_INT 6
16941: PPUSH
16942: LD_VAR 0 3
16946: PPUSH
16947: LD_INT 1
16949: PPUSH
16950: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16954: LD_INT 15
16956: PPUSH
16957: LD_VAR 0 3
16961: PPUSH
16962: LD_INT 1
16964: PPUSH
16965: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16969: LD_INT 7
16971: PPUSH
16972: LD_VAR 0 3
16976: PPUSH
16977: LD_INT 1
16979: PPUSH
16980: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16984: LD_INT 12
16986: PPUSH
16987: LD_VAR 0 3
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16999: LD_INT 18
17001: PPUSH
17002: LD_VAR 0 3
17006: PPUSH
17007: LD_INT 1
17009: PPUSH
17010: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17014: LD_INT 60
17016: PPUSH
17017: LD_VAR 0 3
17021: PPUSH
17022: LD_INT 1
17024: PPUSH
17025: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17029: LD_INT 9
17031: PPUSH
17032: LD_VAR 0 3
17036: PPUSH
17037: LD_INT 1
17039: PPUSH
17040: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17044: LD_INT 30
17046: PPUSH
17047: LD_VAR 0 3
17051: PPUSH
17052: LD_INT 1
17054: PPUSH
17055: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17059: LD_INT 37
17061: PPUSH
17062: LD_VAR 0 3
17066: PPUSH
17067: LD_INT 1
17069: PPUSH
17070: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17074: LD_INT 5
17076: PPUSH
17077: LD_VAR 0 3
17081: PPUSH
17082: LD_INT 1
17084: PPUSH
17085: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17089: LD_INT 66
17091: PPUSH
17092: LD_VAR 0 3
17096: PPUSH
17097: LD_INT 1
17099: PPUSH
17100: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17104: LD_INT 21
17106: PPUSH
17107: LD_VAR 0 3
17111: PPUSH
17112: LD_INT 1
17114: PPUSH
17115: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17119: LD_INT 22
17121: PPUSH
17122: LD_VAR 0 3
17126: PPUSH
17127: LD_INT 1
17129: PPUSH
17130: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17134: LD_INT 54
17136: PPUSH
17137: LD_VAR 0 3
17141: PPUSH
17142: LD_INT 1
17144: PPUSH
17145: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17149: LD_INT 0
17151: PPUSH
17152: LD_VAR 0 3
17156: PPUSH
17157: LD_INT 1
17159: PPUSH
17160: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17164: LD_INT 1
17166: PPUSH
17167: LD_VAR 0 3
17171: PPUSH
17172: LD_INT 1
17174: PPUSH
17175: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17179: LD_INT 2
17181: PPUSH
17182: LD_VAR 0 3
17186: PPUSH
17187: LD_INT 1
17189: PPUSH
17190: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17194: LD_INT 3
17196: PPUSH
17197: LD_VAR 0 3
17201: PPUSH
17202: LD_INT 1
17204: PPUSH
17205: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17209: LD_INT 4
17211: PPUSH
17212: LD_VAR 0 3
17216: PPUSH
17217: LD_INT 1
17219: PPUSH
17220: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17224: LD_INT 5
17226: PPUSH
17227: LD_VAR 0 3
17231: PPUSH
17232: LD_INT 1
17234: PPUSH
17235: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17239: LD_INT 6
17241: PPUSH
17242: LD_VAR 0 3
17246: PPUSH
17247: LD_INT 1
17249: PPUSH
17250: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17254: LD_INT 7
17256: PPUSH
17257: LD_VAR 0 3
17261: PPUSH
17262: LD_INT 1
17264: PPUSH
17265: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17269: LD_INT 8
17271: PPUSH
17272: LD_VAR 0 3
17276: PPUSH
17277: LD_INT 1
17279: PPUSH
17280: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17284: LD_INT 10
17286: PPUSH
17287: LD_VAR 0 3
17291: PPUSH
17292: LD_INT 1
17294: PPUSH
17295: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17299: LD_INT 11
17301: PPUSH
17302: LD_VAR 0 3
17306: PPUSH
17307: LD_INT 1
17309: PPUSH
17310: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17314: LD_INT 12
17316: PPUSH
17317: LD_VAR 0 3
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17329: LD_INT 13
17331: PPUSH
17332: LD_VAR 0 3
17336: PPUSH
17337: LD_INT 1
17339: PPUSH
17340: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17344: LD_INT 14
17346: PPUSH
17347: LD_VAR 0 3
17351: PPUSH
17352: LD_INT 1
17354: PPUSH
17355: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17359: LD_INT 15
17361: PPUSH
17362: LD_VAR 0 3
17366: PPUSH
17367: LD_INT 1
17369: PPUSH
17370: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17374: LD_INT 16
17376: PPUSH
17377: LD_VAR 0 3
17381: PPUSH
17382: LD_INT 1
17384: PPUSH
17385: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17389: LD_INT 17
17391: PPUSH
17392: LD_VAR 0 3
17396: PPUSH
17397: LD_INT 1
17399: PPUSH
17400: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17404: LD_INT 19
17406: PPUSH
17407: LD_VAR 0 3
17411: PPUSH
17412: LD_INT 1
17414: PPUSH
17415: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17419: LD_INT 20
17421: PPUSH
17422: LD_VAR 0 3
17426: PPUSH
17427: LD_INT 1
17429: PPUSH
17430: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17434: LD_INT 21
17436: PPUSH
17437: LD_VAR 0 3
17441: PPUSH
17442: LD_INT 1
17444: PPUSH
17445: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17449: LD_INT 23
17451: PPUSH
17452: LD_VAR 0 3
17456: PPUSH
17457: LD_INT 1
17459: PPUSH
17460: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17464: LD_INT 26
17466: PPUSH
17467: LD_VAR 0 3
17471: PPUSH
17472: LD_INT 1
17474: PPUSH
17475: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17479: LD_INT 27
17481: PPUSH
17482: LD_VAR 0 3
17486: PPUSH
17487: LD_INT 1
17489: PPUSH
17490: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17494: LD_INT 28
17496: PPUSH
17497: LD_VAR 0 3
17501: PPUSH
17502: LD_INT 1
17504: PPUSH
17505: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17509: LD_INT 29
17511: PPUSH
17512: LD_VAR 0 3
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17524: LD_INT 30
17526: PPUSH
17527: LD_VAR 0 3
17531: PPUSH
17532: LD_INT 1
17534: PPUSH
17535: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17539: LD_INT 31
17541: PPUSH
17542: LD_VAR 0 3
17546: PPUSH
17547: LD_INT 1
17549: PPUSH
17550: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17554: LD_INT 32
17556: PPUSH
17557: LD_VAR 0 3
17561: PPUSH
17562: LD_INT 1
17564: PPUSH
17565: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17569: LD_INT 36
17571: PPUSH
17572: LD_VAR 0 3
17576: PPUSH
17577: LD_INT 1
17579: PPUSH
17580: CALL_OW 324
// end ; 5 :
17584: GO 19715
17586: LD_INT 5
17588: DOUBLE
17589: EQUAL
17590: IFTRUE 17594
17592: GO 18707
17594: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17595: LD_INT 35
17597: PPUSH
17598: LD_VAR 0 3
17602: PPUSH
17603: LD_INT 1
17605: PPUSH
17606: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17610: LD_INT 45
17612: PPUSH
17613: LD_VAR 0 3
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17625: LD_INT 46
17627: PPUSH
17628: LD_VAR 0 3
17632: PPUSH
17633: LD_INT 1
17635: PPUSH
17636: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17640: LD_INT 47
17642: PPUSH
17643: LD_VAR 0 3
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17655: LD_INT 1
17657: PPUSH
17658: LD_VAR 0 3
17662: PPUSH
17663: LD_INT 1
17665: PPUSH
17666: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17670: LD_INT 2
17672: PPUSH
17673: LD_VAR 0 3
17677: PPUSH
17678: LD_INT 1
17680: PPUSH
17681: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17685: LD_INT 11
17687: PPUSH
17688: LD_VAR 0 3
17692: PPUSH
17693: LD_INT 1
17695: PPUSH
17696: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17700: LD_INT 20
17702: PPUSH
17703: LD_VAR 0 3
17707: PPUSH
17708: LD_INT 1
17710: PPUSH
17711: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17715: LD_INT 48
17717: PPUSH
17718: LD_VAR 0 3
17722: PPUSH
17723: LD_INT 1
17725: PPUSH
17726: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17730: LD_INT 49
17732: PPUSH
17733: LD_VAR 0 3
17737: PPUSH
17738: LD_INT 1
17740: PPUSH
17741: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17745: LD_INT 69
17747: PPUSH
17748: LD_VAR 0 3
17752: PPUSH
17753: LD_INT 1
17755: PPUSH
17756: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17760: LD_INT 39
17762: PPUSH
17763: LD_VAR 0 3
17767: PPUSH
17768: LD_INT 1
17770: PPUSH
17771: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17775: LD_INT 34
17777: PPUSH
17778: LD_VAR 0 3
17782: PPUSH
17783: LD_INT 1
17785: PPUSH
17786: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17790: LD_INT 42
17792: PPUSH
17793: LD_VAR 0 3
17797: PPUSH
17798: LD_INT 1
17800: PPUSH
17801: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17805: LD_INT 44
17807: PPUSH
17808: LD_VAR 0 3
17812: PPUSH
17813: LD_INT 1
17815: PPUSH
17816: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17820: LD_INT 41
17822: PPUSH
17823: LD_VAR 0 3
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17835: LD_INT 40
17837: PPUSH
17838: LD_VAR 0 3
17842: PPUSH
17843: LD_INT 1
17845: PPUSH
17846: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17850: LD_INT 43
17852: PPUSH
17853: LD_VAR 0 3
17857: PPUSH
17858: LD_INT 1
17860: PPUSH
17861: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17865: LD_INT 70
17867: PPUSH
17868: LD_VAR 0 3
17872: PPUSH
17873: LD_INT 1
17875: PPUSH
17876: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17880: LD_INT 51
17882: PPUSH
17883: LD_VAR 0 3
17887: PPUSH
17888: LD_INT 1
17890: PPUSH
17891: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17895: LD_INT 52
17897: PPUSH
17898: LD_VAR 0 3
17902: PPUSH
17903: LD_INT 1
17905: PPUSH
17906: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17910: LD_INT 6
17912: PPUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_INT 1
17920: PPUSH
17921: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17925: LD_INT 15
17927: PPUSH
17928: LD_VAR 0 3
17932: PPUSH
17933: LD_INT 1
17935: PPUSH
17936: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17940: LD_INT 7
17942: PPUSH
17943: LD_VAR 0 3
17947: PPUSH
17948: LD_INT 1
17950: PPUSH
17951: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17955: LD_INT 12
17957: PPUSH
17958: LD_VAR 0 3
17962: PPUSH
17963: LD_INT 1
17965: PPUSH
17966: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17970: LD_INT 17
17972: PPUSH
17973: LD_VAR 0 3
17977: PPUSH
17978: LD_INT 1
17980: PPUSH
17981: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17985: LD_INT 18
17987: PPUSH
17988: LD_VAR 0 3
17992: PPUSH
17993: LD_INT 1
17995: PPUSH
17996: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18000: LD_INT 60
18002: PPUSH
18003: LD_VAR 0 3
18007: PPUSH
18008: LD_INT 1
18010: PPUSH
18011: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18015: LD_INT 32
18017: PPUSH
18018: LD_VAR 0 3
18022: PPUSH
18023: LD_INT 1
18025: PPUSH
18026: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18030: LD_INT 9
18032: PPUSH
18033: LD_VAR 0 3
18037: PPUSH
18038: LD_INT 1
18040: PPUSH
18041: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18045: LD_INT 57
18047: PPUSH
18048: LD_VAR 0 3
18052: PPUSH
18053: LD_INT 1
18055: PPUSH
18056: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18060: LD_INT 30
18062: PPUSH
18063: LD_VAR 0 3
18067: PPUSH
18068: LD_INT 1
18070: PPUSH
18071: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18075: LD_INT 37
18077: PPUSH
18078: LD_VAR 0 3
18082: PPUSH
18083: LD_INT 1
18085: PPUSH
18086: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18090: LD_INT 63
18092: PPUSH
18093: LD_VAR 0 3
18097: PPUSH
18098: LD_INT 1
18100: PPUSH
18101: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18105: LD_INT 3
18107: PPUSH
18108: LD_VAR 0 3
18112: PPUSH
18113: LD_INT 1
18115: PPUSH
18116: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18120: LD_INT 4
18122: PPUSH
18123: LD_VAR 0 3
18127: PPUSH
18128: LD_INT 1
18130: PPUSH
18131: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18135: LD_INT 5
18137: PPUSH
18138: LD_VAR 0 3
18142: PPUSH
18143: LD_INT 1
18145: PPUSH
18146: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18150: LD_INT 66
18152: PPUSH
18153: LD_VAR 0 3
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18165: LD_INT 21
18167: PPUSH
18168: LD_VAR 0 3
18172: PPUSH
18173: LD_INT 1
18175: PPUSH
18176: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18180: LD_INT 22
18182: PPUSH
18183: LD_VAR 0 3
18187: PPUSH
18188: LD_INT 1
18190: PPUSH
18191: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18195: LD_INT 19
18197: PPUSH
18198: LD_VAR 0 3
18202: PPUSH
18203: LD_INT 1
18205: PPUSH
18206: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18210: LD_INT 54
18212: PPUSH
18213: LD_VAR 0 3
18217: PPUSH
18218: LD_INT 1
18220: PPUSH
18221: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18225: LD_INT 55
18227: PPUSH
18228: LD_VAR 0 3
18232: PPUSH
18233: LD_INT 1
18235: PPUSH
18236: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18240: LD_INT 0
18242: PPUSH
18243: LD_VAR 0 3
18247: PPUSH
18248: LD_INT 1
18250: PPUSH
18251: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18255: LD_INT 1
18257: PPUSH
18258: LD_VAR 0 3
18262: PPUSH
18263: LD_INT 1
18265: PPUSH
18266: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18270: LD_INT 2
18272: PPUSH
18273: LD_VAR 0 3
18277: PPUSH
18278: LD_INT 1
18280: PPUSH
18281: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18285: LD_INT 3
18287: PPUSH
18288: LD_VAR 0 3
18292: PPUSH
18293: LD_INT 1
18295: PPUSH
18296: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18300: LD_INT 4
18302: PPUSH
18303: LD_VAR 0 3
18307: PPUSH
18308: LD_INT 1
18310: PPUSH
18311: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18315: LD_INT 5
18317: PPUSH
18318: LD_VAR 0 3
18322: PPUSH
18323: LD_INT 1
18325: PPUSH
18326: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18330: LD_INT 6
18332: PPUSH
18333: LD_VAR 0 3
18337: PPUSH
18338: LD_INT 1
18340: PPUSH
18341: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18345: LD_INT 7
18347: PPUSH
18348: LD_VAR 0 3
18352: PPUSH
18353: LD_INT 1
18355: PPUSH
18356: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18360: LD_INT 8
18362: PPUSH
18363: LD_VAR 0 3
18367: PPUSH
18368: LD_INT 1
18370: PPUSH
18371: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18375: LD_INT 10
18377: PPUSH
18378: LD_VAR 0 3
18382: PPUSH
18383: LD_INT 1
18385: PPUSH
18386: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18390: LD_INT 11
18392: PPUSH
18393: LD_VAR 0 3
18397: PPUSH
18398: LD_INT 1
18400: PPUSH
18401: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18405: LD_INT 12
18407: PPUSH
18408: LD_VAR 0 3
18412: PPUSH
18413: LD_INT 1
18415: PPUSH
18416: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18420: LD_INT 13
18422: PPUSH
18423: LD_VAR 0 3
18427: PPUSH
18428: LD_INT 1
18430: PPUSH
18431: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18435: LD_INT 14
18437: PPUSH
18438: LD_VAR 0 3
18442: PPUSH
18443: LD_INT 1
18445: PPUSH
18446: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18450: LD_INT 15
18452: PPUSH
18453: LD_VAR 0 3
18457: PPUSH
18458: LD_INT 1
18460: PPUSH
18461: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18465: LD_INT 16
18467: PPUSH
18468: LD_VAR 0 3
18472: PPUSH
18473: LD_INT 1
18475: PPUSH
18476: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18480: LD_INT 17
18482: PPUSH
18483: LD_VAR 0 3
18487: PPUSH
18488: LD_INT 1
18490: PPUSH
18491: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18495: LD_INT 18
18497: PPUSH
18498: LD_VAR 0 3
18502: PPUSH
18503: LD_INT 1
18505: PPUSH
18506: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18510: LD_INT 19
18512: PPUSH
18513: LD_VAR 0 3
18517: PPUSH
18518: LD_INT 1
18520: PPUSH
18521: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18525: LD_INT 20
18527: PPUSH
18528: LD_VAR 0 3
18532: PPUSH
18533: LD_INT 1
18535: PPUSH
18536: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18540: LD_INT 21
18542: PPUSH
18543: LD_VAR 0 3
18547: PPUSH
18548: LD_INT 1
18550: PPUSH
18551: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18555: LD_INT 23
18557: PPUSH
18558: LD_VAR 0 3
18562: PPUSH
18563: LD_INT 1
18565: PPUSH
18566: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18570: LD_INT 26
18572: PPUSH
18573: LD_VAR 0 3
18577: PPUSH
18578: LD_INT 1
18580: PPUSH
18581: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18585: LD_INT 27
18587: PPUSH
18588: LD_VAR 0 3
18592: PPUSH
18593: LD_INT 1
18595: PPUSH
18596: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18600: LD_INT 28
18602: PPUSH
18603: LD_VAR 0 3
18607: PPUSH
18608: LD_INT 1
18610: PPUSH
18611: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18615: LD_INT 29
18617: PPUSH
18618: LD_VAR 0 3
18622: PPUSH
18623: LD_INT 1
18625: PPUSH
18626: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18630: LD_INT 30
18632: PPUSH
18633: LD_VAR 0 3
18637: PPUSH
18638: LD_INT 1
18640: PPUSH
18641: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18645: LD_INT 31
18647: PPUSH
18648: LD_VAR 0 3
18652: PPUSH
18653: LD_INT 1
18655: PPUSH
18656: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18660: LD_INT 32
18662: PPUSH
18663: LD_VAR 0 3
18667: PPUSH
18668: LD_INT 1
18670: PPUSH
18671: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18675: LD_INT 33
18677: PPUSH
18678: LD_VAR 0 3
18682: PPUSH
18683: LD_INT 1
18685: PPUSH
18686: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18690: LD_INT 36
18692: PPUSH
18693: LD_VAR 0 3
18697: PPUSH
18698: LD_INT 1
18700: PPUSH
18701: CALL_OW 324
// end ; 6 :
18705: GO 19715
18707: LD_INT 6
18709: DOUBLE
18710: EQUAL
18711: IFTRUE 18715
18713: GO 19640
18715: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18716: LD_INT 35
18718: PPUSH
18719: LD_VAR 0 3
18723: PPUSH
18724: LD_INT 1
18726: PPUSH
18727: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18731: LD_INT 45
18733: PPUSH
18734: LD_VAR 0 3
18738: PPUSH
18739: LD_INT 1
18741: PPUSH
18742: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18746: LD_INT 46
18748: PPUSH
18749: LD_VAR 0 3
18753: PPUSH
18754: LD_INT 1
18756: PPUSH
18757: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18761: LD_INT 47
18763: PPUSH
18764: LD_VAR 0 3
18768: PPUSH
18769: LD_INT 1
18771: PPUSH
18772: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18776: LD_INT 1
18778: PPUSH
18779: LD_VAR 0 3
18783: PPUSH
18784: LD_INT 1
18786: PPUSH
18787: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18791: LD_INT 2
18793: PPUSH
18794: LD_VAR 0 3
18798: PPUSH
18799: LD_INT 1
18801: PPUSH
18802: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18806: LD_INT 11
18808: PPUSH
18809: LD_VAR 0 3
18813: PPUSH
18814: LD_INT 1
18816: PPUSH
18817: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18821: LD_INT 20
18823: PPUSH
18824: LD_VAR 0 3
18828: PPUSH
18829: LD_INT 1
18831: PPUSH
18832: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18836: LD_INT 48
18838: PPUSH
18839: LD_VAR 0 3
18843: PPUSH
18844: LD_INT 1
18846: PPUSH
18847: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18851: LD_INT 49
18853: PPUSH
18854: LD_VAR 0 3
18858: PPUSH
18859: LD_INT 1
18861: PPUSH
18862: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18866: LD_INT 50
18868: PPUSH
18869: LD_VAR 0 3
18873: PPUSH
18874: LD_INT 1
18876: PPUSH
18877: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18881: LD_INT 69
18883: PPUSH
18884: LD_VAR 0 3
18888: PPUSH
18889: LD_INT 1
18891: PPUSH
18892: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18896: LD_INT 39
18898: PPUSH
18899: LD_VAR 0 3
18903: PPUSH
18904: LD_INT 1
18906: PPUSH
18907: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18911: LD_INT 34
18913: PPUSH
18914: LD_VAR 0 3
18918: PPUSH
18919: LD_INT 1
18921: PPUSH
18922: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18926: LD_INT 42
18928: PPUSH
18929: LD_VAR 0 3
18933: PPUSH
18934: LD_INT 1
18936: PPUSH
18937: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18941: LD_INT 44
18943: PPUSH
18944: LD_VAR 0 3
18948: PPUSH
18949: LD_INT 1
18951: PPUSH
18952: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18956: LD_INT 41
18958: PPUSH
18959: LD_VAR 0 3
18963: PPUSH
18964: LD_INT 1
18966: PPUSH
18967: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18971: LD_INT 13
18973: PPUSH
18974: LD_VAR 0 3
18978: PPUSH
18979: LD_INT 1
18981: PPUSH
18982: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18986: LD_INT 40
18988: PPUSH
18989: LD_VAR 0 3
18993: PPUSH
18994: LD_INT 1
18996: PPUSH
18997: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19001: LD_INT 43
19003: PPUSH
19004: LD_VAR 0 3
19008: PPUSH
19009: LD_INT 1
19011: PPUSH
19012: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19016: LD_INT 70
19018: PPUSH
19019: LD_VAR 0 3
19023: PPUSH
19024: LD_INT 1
19026: PPUSH
19027: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
19031: LD_INT 23
19033: PPUSH
19034: LD_VAR 0 3
19038: PPUSH
19039: LD_INT 1
19041: PPUSH
19042: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19046: LD_INT 51
19048: PPUSH
19049: LD_VAR 0 3
19053: PPUSH
19054: LD_INT 1
19056: PPUSH
19057: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19061: LD_INT 52
19063: PPUSH
19064: LD_VAR 0 3
19068: PPUSH
19069: LD_INT 1
19071: PPUSH
19072: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19076: LD_INT 6
19078: PPUSH
19079: LD_VAR 0 3
19083: PPUSH
19084: LD_INT 1
19086: PPUSH
19087: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19091: LD_INT 15
19093: PPUSH
19094: LD_VAR 0 3
19098: PPUSH
19099: LD_INT 1
19101: PPUSH
19102: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19106: LD_INT 7
19108: PPUSH
19109: LD_VAR 0 3
19113: PPUSH
19114: LD_INT 1
19116: PPUSH
19117: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19121: LD_INT 12
19123: PPUSH
19124: LD_VAR 0 3
19128: PPUSH
19129: LD_INT 1
19131: PPUSH
19132: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19136: LD_INT 10
19138: PPUSH
19139: LD_VAR 0 3
19143: PPUSH
19144: LD_INT 1
19146: PPUSH
19147: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19151: LD_INT 17
19153: PPUSH
19154: LD_VAR 0 3
19158: PPUSH
19159: LD_INT 1
19161: PPUSH
19162: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19166: LD_INT 18
19168: PPUSH
19169: LD_VAR 0 3
19173: PPUSH
19174: LD_INT 1
19176: PPUSH
19177: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19181: LD_INT 60
19183: PPUSH
19184: LD_VAR 0 3
19188: PPUSH
19189: LD_INT 1
19191: PPUSH
19192: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19196: LD_INT 61
19198: PPUSH
19199: LD_VAR 0 3
19203: PPUSH
19204: LD_INT 1
19206: PPUSH
19207: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19211: LD_INT 32
19213: PPUSH
19214: LD_VAR 0 3
19218: PPUSH
19219: LD_INT 1
19221: PPUSH
19222: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19226: LD_INT 27
19228: PPUSH
19229: LD_VAR 0 3
19233: PPUSH
19234: LD_INT 1
19236: PPUSH
19237: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19241: LD_INT 36
19243: PPUSH
19244: LD_VAR 0 3
19248: PPUSH
19249: LD_INT 1
19251: PPUSH
19252: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19256: LD_INT 33
19258: PPUSH
19259: LD_VAR 0 3
19263: PPUSH
19264: LD_INT 1
19266: PPUSH
19267: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19271: LD_INT 9
19273: PPUSH
19274: LD_VAR 0 3
19278: PPUSH
19279: LD_INT 1
19281: PPUSH
19282: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19286: LD_INT 38
19288: PPUSH
19289: LD_VAR 0 3
19293: PPUSH
19294: LD_INT 1
19296: PPUSH
19297: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19301: LD_INT 57
19303: PPUSH
19304: LD_VAR 0 3
19308: PPUSH
19309: LD_INT 1
19311: PPUSH
19312: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19316: LD_INT 58
19318: PPUSH
19319: LD_VAR 0 3
19323: PPUSH
19324: LD_INT 1
19326: PPUSH
19327: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19331: LD_INT 28
19333: PPUSH
19334: LD_VAR 0 3
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19346: LD_INT 29
19348: PPUSH
19349: LD_VAR 0 3
19353: PPUSH
19354: LD_INT 1
19356: PPUSH
19357: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19361: LD_INT 30
19363: PPUSH
19364: LD_VAR 0 3
19368: PPUSH
19369: LD_INT 1
19371: PPUSH
19372: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19376: LD_INT 37
19378: PPUSH
19379: LD_VAR 0 3
19383: PPUSH
19384: LD_INT 1
19386: PPUSH
19387: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19391: LD_INT 63
19393: PPUSH
19394: LD_VAR 0 3
19398: PPUSH
19399: LD_INT 1
19401: PPUSH
19402: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19406: LD_INT 64
19408: PPUSH
19409: LD_VAR 0 3
19413: PPUSH
19414: LD_INT 1
19416: PPUSH
19417: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19421: LD_INT 3
19423: PPUSH
19424: LD_VAR 0 3
19428: PPUSH
19429: LD_INT 1
19431: PPUSH
19432: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19436: LD_INT 4
19438: PPUSH
19439: LD_VAR 0 3
19443: PPUSH
19444: LD_INT 1
19446: PPUSH
19447: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19451: LD_INT 5
19453: PPUSH
19454: LD_VAR 0 3
19458: PPUSH
19459: LD_INT 1
19461: PPUSH
19462: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19466: LD_INT 8
19468: PPUSH
19469: LD_VAR 0 3
19473: PPUSH
19474: LD_INT 1
19476: PPUSH
19477: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19481: LD_INT 66
19483: PPUSH
19484: LD_VAR 0 3
19488: PPUSH
19489: LD_INT 1
19491: PPUSH
19492: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19496: LD_INT 67
19498: PPUSH
19499: LD_VAR 0 3
19503: PPUSH
19504: LD_INT 1
19506: PPUSH
19507: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19511: LD_INT 21
19513: PPUSH
19514: LD_VAR 0 3
19518: PPUSH
19519: LD_INT 1
19521: PPUSH
19522: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19526: LD_INT 22
19528: PPUSH
19529: LD_VAR 0 3
19533: PPUSH
19534: LD_INT 1
19536: PPUSH
19537: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19541: LD_INT 19
19543: PPUSH
19544: LD_VAR 0 3
19548: PPUSH
19549: LD_INT 1
19551: PPUSH
19552: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19556: LD_INT 26
19558: PPUSH
19559: LD_VAR 0 3
19563: PPUSH
19564: LD_INT 1
19566: PPUSH
19567: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19571: LD_INT 54
19573: PPUSH
19574: LD_VAR 0 3
19578: PPUSH
19579: LD_INT 1
19581: PPUSH
19582: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19586: LD_INT 55
19588: PPUSH
19589: LD_VAR 0 3
19593: PPUSH
19594: LD_INT 1
19596: PPUSH
19597: CALL_OW 322
// for i = 0 to 39 do
19601: LD_ADDR_VAR 0 4
19605: PUSH
19606: DOUBLE
19607: LD_INT 0
19609: DEC
19610: ST_TO_ADDR
19611: LD_INT 39
19613: PUSH
19614: FOR_TO
19615: IFFALSE 19636
// SetRestrict ( i , side , true ) ;
19617: LD_VAR 0 4
19621: PPUSH
19622: LD_VAR 0 3
19626: PPUSH
19627: LD_INT 1
19629: PPUSH
19630: CALL_OW 324
19634: GO 19614
19636: POP
19637: POP
// end ; else
19638: GO 19715
19640: POP
// begin for i = 1 to 73 do
19641: LD_ADDR_VAR 0 4
19645: PUSH
19646: DOUBLE
19647: LD_INT 1
19649: DEC
19650: ST_TO_ADDR
19651: LD_INT 73
19653: PUSH
19654: FOR_TO
19655: IFFALSE 19676
// SetTech ( i , side , state_enabled ) ;
19657: LD_VAR 0 4
19661: PPUSH
19662: LD_VAR 0 3
19666: PPUSH
19667: LD_INT 1
19669: PPUSH
19670: CALL_OW 322
19674: GO 19654
19676: POP
19677: POP
// for i = 0 to 39 do
19678: LD_ADDR_VAR 0 4
19682: PUSH
19683: DOUBLE
19684: LD_INT 0
19686: DEC
19687: ST_TO_ADDR
19688: LD_INT 39
19690: PUSH
19691: FOR_TO
19692: IFFALSE 19713
// SetRestrict ( i , side , true ) ;
19694: LD_VAR 0 4
19698: PPUSH
19699: LD_VAR 0 3
19703: PPUSH
19704: LD_INT 1
19706: PPUSH
19707: CALL_OW 324
19711: GO 19691
19713: POP
19714: POP
// end ; end ; end ;
19715: GO 15720
19717: POP
19718: POP
// end ; end_of_file
19719: LD_VAR 0 2
19723: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
19724: LD_INT 0
19726: PPUSH
19727: PPUSH
19728: PPUSH
19729: PPUSH
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
19734: PPUSH
// for i := 1 to 8 do
19735: LD_ADDR_VAR 0 2
19739: PUSH
19740: DOUBLE
19741: LD_INT 1
19743: DEC
19744: ST_TO_ADDR
19745: LD_INT 8
19747: PUSH
19748: FOR_TO
19749: IFFALSE 20133
// begin if Side_Positions [ i ] then
19751: LD_EXP 19
19755: PUSH
19756: LD_VAR 0 2
19760: ARRAY
19761: IFFALSE 20131
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
19763: LD_ADDR_VAR 0 7
19767: PUSH
19768: LD_INT 22
19770: PUSH
19771: LD_VAR 0 2
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 21
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PPUSH
19794: CALL_OW 69
19798: PUSH
19799: LD_INT 0
19801: PLUS
19802: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19803: LD_ADDR_VAR 0 9
19807: PUSH
19808: LD_INT 22
19810: PUSH
19811: LD_VAR 0 2
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 2
19822: PUSH
19823: LD_INT 30
19825: PUSH
19826: LD_INT 0
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 30
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PPUSH
19852: CALL_OW 69
19856: ST_TO_ADDR
// crates := 0 ;
19857: LD_ADDR_VAR 0 4
19861: PUSH
19862: LD_INT 0
19864: ST_TO_ADDR
// oil := 0 ;
19865: LD_ADDR_VAR 0 5
19869: PUSH
19870: LD_INT 0
19872: ST_TO_ADDR
// sib := 0 ;
19873: LD_ADDR_VAR 0 6
19877: PUSH
19878: LD_INT 0
19880: ST_TO_ADDR
// if bases then
19881: LD_VAR 0 9
19885: IFFALSE 19991
// begin for j in bases do
19887: LD_ADDR_VAR 0 3
19891: PUSH
19892: LD_VAR 0 9
19896: PUSH
19897: FOR_IN
19898: IFFALSE 19989
// begin base := GetBase ( j ) ;
19900: LD_ADDR_VAR 0 8
19904: PUSH
19905: LD_VAR 0 3
19909: PPUSH
19910: CALL_OW 274
19914: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
19915: LD_ADDR_VAR 0 4
19919: PUSH
19920: LD_VAR 0 4
19924: PUSH
19925: LD_VAR 0 8
19929: PPUSH
19930: LD_INT 1
19932: PPUSH
19933: CALL_OW 275
19937: PLUS
19938: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
19939: LD_ADDR_VAR 0 5
19943: PUSH
19944: LD_VAR 0 5
19948: PUSH
19949: LD_VAR 0 8
19953: PPUSH
19954: LD_INT 2
19956: PPUSH
19957: CALL_OW 275
19961: PLUS
19962: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
19963: LD_ADDR_VAR 0 6
19967: PUSH
19968: LD_VAR 0 6
19972: PUSH
19973: LD_VAR 0 8
19977: PPUSH
19978: LD_INT 3
19980: PPUSH
19981: CALL_OW 275
19985: PLUS
19986: ST_TO_ADDR
// end ;
19987: GO 19897
19989: POP
19990: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
19991: LD_STRING setSpecText(
19993: PUSH
19994: LD_VAR 0 2
19998: STR
19999: PUSH
20000: LD_STRING ,
20002: STR
20003: PUSH
20004: LD_INT 2
20006: STR
20007: PUSH
20008: LD_STRING ,
20010: STR
20011: PUSH
20012: LD_VAR 0 4
20016: STR
20017: PUSH
20018: LD_STRING )
20020: STR
20021: PPUSH
20022: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
20026: LD_STRING setSpecText(
20028: PUSH
20029: LD_VAR 0 2
20033: STR
20034: PUSH
20035: LD_STRING ,
20037: STR
20038: PUSH
20039: LD_INT 3
20041: STR
20042: PUSH
20043: LD_STRING ,
20045: STR
20046: PUSH
20047: LD_VAR 0 5
20051: STR
20052: PUSH
20053: LD_STRING )
20055: STR
20056: PPUSH
20057: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
20061: LD_STRING setSpecText(
20063: PUSH
20064: LD_VAR 0 2
20068: STR
20069: PUSH
20070: LD_STRING ,
20072: STR
20073: PUSH
20074: LD_INT 4
20076: STR
20077: PUSH
20078: LD_STRING ,
20080: STR
20081: PUSH
20082: LD_VAR 0 6
20086: STR
20087: PUSH
20088: LD_STRING )
20090: STR
20091: PPUSH
20092: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
20096: LD_STRING setSpecText(
20098: PUSH
20099: LD_VAR 0 2
20103: STR
20104: PUSH
20105: LD_STRING ,
20107: STR
20108: PUSH
20109: LD_INT 5
20111: STR
20112: PUSH
20113: LD_STRING ,
20115: STR
20116: PUSH
20117: LD_VAR 0 7
20121: STR
20122: PUSH
20123: LD_STRING )
20125: STR
20126: PPUSH
20127: CALL_OW 559
// end ; end ;
20131: GO 19748
20133: POP
20134: POP
// end ;
20135: LD_VAR 0 1
20139: RET
// every 0 0$1 do
20140: GO 20142
20142: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
20143: LD_STRING setSpecLogoNumber(
20145: PUSH
20146: LD_INT 2
20148: STR
20149: PUSH
20150: LD_STRING ,
20152: STR
20153: PUSH
20154: LD_INT 1
20156: STR
20157: PUSH
20158: LD_STRING )
20160: STR
20161: PPUSH
20162: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
20166: LD_STRING setSpecLogoNumber(
20168: PUSH
20169: LD_INT 3
20171: STR
20172: PUSH
20173: LD_STRING ,
20175: STR
20176: PUSH
20177: LD_INT 2
20179: STR
20180: PUSH
20181: LD_STRING )
20183: STR
20184: PPUSH
20185: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
20189: LD_STRING setSpecLogoNumber(
20191: PUSH
20192: LD_INT 4
20194: STR
20195: PUSH
20196: LD_STRING ,
20198: STR
20199: PUSH
20200: LD_INT 3
20202: STR
20203: PUSH
20204: LD_STRING )
20206: STR
20207: PPUSH
20208: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
20212: LD_STRING setSpecLogoNumber(
20214: PUSH
20215: LD_INT 5
20217: STR
20218: PUSH
20219: LD_STRING ,
20221: STR
20222: PUSH
20223: LD_INT 4
20225: STR
20226: PUSH
20227: LD_STRING )
20229: STR
20230: PPUSH
20231: CALL_OW 559
// end ;
20235: END
// every 20 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
20236: LD_INT 2
20238: PUSH
20239: LD_INT 30
20241: PUSH
20242: LD_INT 0
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 30
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: LIST
20263: PPUSH
20264: CALL_OW 69
20268: IFFALSE 20278
20270: GO 20272
20272: DISABLE
// begin enable ;
20273: ENABLE
// UpdateSpectatorBar ;
20274: CALL 19724 0 0
// end ;
20278: END
