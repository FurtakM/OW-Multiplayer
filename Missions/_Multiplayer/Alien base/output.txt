// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_siberit , respawning_time_min , respawning_time_max , buildUpTime_Delay , amount_of_apemen , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 42
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 19
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 17
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 20
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 22
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 18
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 372
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 3 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 3
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 167: LD_ADDR_EXP 19
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 6
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 206: LD_ADDR_EXP 17
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 6
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 0 , 0 , 3 ] ;
 245: LD_ADDR_EXP 20
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 22
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 323: LD_ADDR_EXP 18
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// end ; for i := 1 to 8 do
 372: LD_ADDR_VAR 0 2
 376: PUSH
 377: DOUBLE
 378: LD_INT 1
 380: DEC
 381: ST_TO_ADDR
 382: LD_INT 8
 384: PUSH
 385: FOR_TO
 386: IFFALSE 473
// if Multiplayer_GetPlayerIsSpec ( i ) then
 388: LD_VAR 0 2
 392: PPUSH
 393: CALL_OW 530
 397: IFFALSE 471
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 399: LD_ADDR_EXP 19
 403: PUSH
 404: LD_EXP 19
 408: PPUSH
 409: LD_VAR 0 2
 413: PPUSH
 414: LD_INT 0
 416: PPUSH
 417: CALL_OW 1
 421: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 422: LD_ADDR_EXP 18
 426: PUSH
 427: LD_EXP 18
 431: PPUSH
 432: LD_EXP 17
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: PPUSH
 443: LD_EXP 18
 447: PUSH
 448: LD_EXP 17
 452: PUSH
 453: LD_VAR 0 2
 457: ARRAY
 458: ARRAY
 459: PUSH
 460: LD_VAR 0 2
 464: DIFF
 465: PPUSH
 466: CALL_OW 1
 470: ST_TO_ADDR
// end ;
 471: GO 385
 473: POP
 474: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 475: LD_ADDR_EXP 23
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 0
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: LD_INT 0
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: ST_TO_ADDR
// for i := 1 to 8 do
 506: LD_ADDR_VAR 0 2
 510: PUSH
 511: DOUBLE
 512: LD_INT 1
 514: DEC
 515: ST_TO_ADDR
 516: LD_INT 8
 518: PUSH
 519: FOR_TO
 520: IFFALSE 567
// if Side_Positions [ i ] then
 522: LD_EXP 19
 526: PUSH
 527: LD_VAR 0 2
 531: ARRAY
 532: IFFALSE 565
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 534: LD_ADDR_EXP 23
 538: PUSH
 539: LD_EXP 23
 543: PPUSH
 544: LD_EXP 19
 548: PUSH
 549: LD_VAR 0 2
 553: ARRAY
 554: PPUSH
 555: LD_VAR 0 2
 559: PPUSH
 560: CALL_OW 1
 564: ST_TO_ADDR
 565: GO 519
 567: POP
 568: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 569: LD_ADDR_EXP 21
 573: PUSH
 574: LD_EXP 17
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: EMPTY
 583: LIST
 584: DIFF
 585: PUSH
 586: LD_INT 1
 588: GREATER
 589: ST_TO_ADDR
// if Multiplayer then
 590: LD_OWVAR 4
 594: IFFALSE 840
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 596: LD_ADDR_EXP 44
 600: PUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 426
 608: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 609: LD_ADDR_EXP 45
 613: PUSH
 614: LD_INT 1
 616: PPUSH
 617: CALL_OW 426
 621: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 622: LD_ADDR_EXP 46
 626: PUSH
 627: LD_INT 2
 629: PPUSH
 630: CALL_OW 426
 634: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 635: LD_ADDR_EXP 47
 639: PUSH
 640: LD_INT 3
 642: PPUSH
 643: CALL_OW 426
 647: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 648: LD_ADDR_EXP 48
 652: PUSH
 653: LD_INT 4
 655: PPUSH
 656: CALL_OW 426
 660: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 661: LD_ADDR_EXP 49
 665: PUSH
 666: LD_INT 5
 668: PPUSH
 669: CALL_OW 426
 673: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 674: LD_ADDR_EXP 50
 678: PUSH
 679: LD_INT 6
 681: PPUSH
 682: CALL_OW 426
 686: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 687: LD_ADDR_EXP 51
 691: PUSH
 692: LD_INT 10
 694: PPUSH
 695: CALL_OW 426
 699: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 700: LD_ADDR_EXP 52
 704: PUSH
 705: LD_INT 11
 707: PPUSH
 708: CALL_OW 426
 712: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 713: LD_ADDR_EXP 53
 717: PUSH
 718: LD_INT 12
 720: PPUSH
 721: CALL_OW 426
 725: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 726: LD_ADDR_EXP 54
 730: PUSH
 731: LD_INT 13
 733: PPUSH
 734: CALL_OW 426
 738: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 739: LD_ADDR_EXP 55
 743: PUSH
 744: LD_INT 14
 746: PPUSH
 747: CALL_OW 426
 751: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 752: LD_ADDR_EXP 1
 756: PUSH
 757: LD_INT 15
 759: PPUSH
 760: CALL_OW 426
 764: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 765: LD_ADDR_EXP 2
 769: PUSH
 770: LD_INT 16
 772: PPUSH
 773: CALL_OW 426
 777: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 778: LD_ADDR_EXP 56
 782: PUSH
 783: LD_INT 17
 785: PPUSH
 786: CALL_OW 426
 790: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 791: LD_ADDR_EXP 57
 795: PUSH
 796: LD_INT 20
 798: PPUSH
 799: CALL_OW 426
 803: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 804: LD_ADDR_EXP 43
 808: PUSH
 809: LD_INT 21
 811: PPUSH
 812: CALL_OW 426
 816: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_INT 22
 824: PPUSH
 825: CALL_OW 426
 829: ST_TO_ADDR
// def_win_rules = 0 ;
 830: LD_ADDR_EXP 32
 834: PUSH
 835: LD_INT 0
 837: ST_TO_ADDR
// end else
 838: GO 996
// begin Randomize ;
 840: CALL_OW 10
// def_base_level := 2 ;
 844: LD_ADDR_EXP 44
 848: PUSH
 849: LD_INT 2
 851: ST_TO_ADDR
// def_amount_of_people := 0 ;
 852: LD_ADDR_EXP 45
 856: PUSH
 857: LD_INT 0
 859: ST_TO_ADDR
// def_skill_level := 1 ;
 860: LD_ADDR_EXP 46
 864: PUSH
 865: LD_INT 1
 867: ST_TO_ADDR
// def_starting_resources := 2 ;
 868: LD_ADDR_EXP 47
 872: PUSH
 873: LD_INT 2
 875: ST_TO_ADDR
// def_shipments_density := 1 ;
 876: LD_ADDR_EXP 48
 880: PUSH
 881: LD_INT 1
 883: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 884: LD_ADDR_EXP 49
 888: PUSH
 889: LD_INT 0
 891: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 892: LD_ADDR_EXP 50
 896: PUSH
 897: LD_INT 1
 899: ST_TO_ADDR
// def_shared_vision := 1 ;
 900: LD_ADDR_EXP 51
 904: PUSH
 905: LD_INT 1
 907: ST_TO_ADDR
// def_morale_flags := 1 ;
 908: LD_ADDR_EXP 52
 912: PUSH
 913: LD_INT 1
 915: ST_TO_ADDR
// def_siberite_detection := 1 ;
 916: LD_ADDR_EXP 53
 920: PUSH
 921: LD_INT 1
 923: ST_TO_ADDR
// def_people_respawning := 2 ;
 924: LD_ADDR_EXP 54
 928: PUSH
 929: LD_INT 2
 931: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 932: LD_ADDR_EXP 55
 936: PUSH
 937: LD_INT 3
 939: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 940: LD_ADDR_EXP 1
 944: PUSH
 945: LD_INT 0
 947: ST_TO_ADDR
// def_public_score := 0 ;
 948: LD_ADDR_EXP 2
 952: PUSH
 953: LD_INT 0
 955: ST_TO_ADDR
// def_siberite_bomb := 4 ;
 956: LD_ADDR_EXP 56
 960: PUSH
 961: LD_INT 4
 963: ST_TO_ADDR
// def_builduptime := 0 ;
 964: LD_ADDR_EXP 57
 968: PUSH
 969: LD_INT 0
 971: ST_TO_ADDR
// def_game_rules := 0 ;
 972: LD_ADDR_EXP 43
 976: PUSH
 977: LD_INT 0
 979: ST_TO_ADDR
// tech_level = 4 ;
 980: LD_ADDR_VAR 0 3
 984: PUSH
 985: LD_INT 4
 987: ST_TO_ADDR
// def_win_rules = 0 ;
 988: LD_ADDR_EXP 32
 992: PUSH
 993: LD_INT 0
 995: ST_TO_ADDR
// end ; InitGameRules ;
 996: CALL 10665 0 0
// if def_game_rules = 0 then
1000: LD_EXP 43
1004: PUSH
1005: LD_INT 0
1007: EQUAL
1008: IFFALSE 1059
// begin if isSGUI then
1010: LD_OWVAR 83
1014: IFFALSE 1022
// setMpTechs ( ) else
1016: CALL 15413 0 0
1020: GO 1059
// begin if Game_Type = 3 then
1022: LD_EXP 42
1026: PUSH
1027: LD_INT 3
1029: EQUAL
1030: IFFALSE 1046
// tech_level = tech_level + 3 ;
1032: LD_ADDR_VAR 0 3
1036: PUSH
1037: LD_VAR 0 3
1041: PUSH
1042: LD_INT 3
1044: PLUS
1045: ST_TO_ADDR
// SetMpTechLevel ( tech_level + 1 ) ;
1046: LD_VAR 0 3
1050: PUSH
1051: LD_INT 1
1053: PLUS
1054: PPUSH
1055: CALL 15560 0 1
// end ; end ; if ( Game_Type = 5 ) then
1059: LD_EXP 42
1063: PUSH
1064: LD_INT 5
1066: EQUAL
1067: IFFALSE 1096
// begin def_base_level := 1 ;
1069: LD_ADDR_EXP 44
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
1077: LD_ADDR_EXP 49
1081: PUSH
1082: LD_INT 0
1084: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
1085: LD_ADDR_EXP 50
1089: PUSH
1090: LD_INT 0
1092: ST_TO_ADDR
// disable ( 10 ) ;
1093: LD_INT 10
1095: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 0
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_EXP 44
1119: PUSH
1120: LD_INT 1
1122: PLUS
1123: ARRAY
1124: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
1125: LD_ADDR_EXP 4
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 2
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: LD_EXP 44
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: ARRAY
1153: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1154: LD_ADDR_EXP 5
1158: PUSH
1159: LD_EXP 45
1163: PUSH
1164: LD_INT 4
1166: PLUS
1167: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1168: LD_ADDR_EXP 9
1172: PUSH
1173: LD_INT 150
1175: PUSH
1176: LD_EXP 48
1180: PUSH
1181: LD_INT 1
1183: PLUS
1184: MINUS
1185: ST_TO_ADDR
// if def_people_respawning = 0 then
1186: LD_EXP 54
1190: PUSH
1191: LD_INT 0
1193: EQUAL
1194: IFFALSE 1214
// begin respawning_time_min = 0 ;
1196: LD_ADDR_EXP 12
1200: PUSH
1201: LD_INT 0
1203: ST_TO_ADDR
// respawning_time_max = 0 ;
1204: LD_ADDR_EXP 13
1208: PUSH
1209: LD_INT 0
1211: ST_TO_ADDR
// end else
1212: GO 1258
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1214: LD_ADDR_EXP 12
1218: PUSH
1219: LD_INT 10500
1221: PUSH
1222: LD_INT 5
1224: DIVREAL
1225: PUSH
1226: LD_INT 6
1228: PUSH
1229: LD_EXP 54
1233: MINUS
1234: MUL
1235: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1236: LD_ADDR_EXP 13
1240: PUSH
1241: LD_INT 31500
1243: PUSH
1244: LD_INT 5
1246: DIVREAL
1247: PUSH
1248: LD_INT 6
1250: PUSH
1251: LD_EXP 54
1255: MINUS
1256: MUL
1257: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1258: LD_EXP 55
1262: NOT
1263: IFFALSE 1275
// amount_of_apemen := 0 else
1265: LD_ADDR_EXP 15
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
1273: GO 1285
// amount_of_apemen := def_amount_of_apemen ;
1275: LD_ADDR_EXP 15
1279: PUSH
1280: LD_EXP 55
1284: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1285: LD_EXP 56
1289: PUSH
1290: LD_INT 0
1292: EQUAL
1293: IFFALSE 1305
// siberite_bomb_Delay = 0 else
1295: LD_ADDR_EXP 16
1299: PUSH
1300: LD_INT 0
1302: ST_TO_ADDR
1303: GO 1327
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1305: LD_ADDR_EXP 16
1309: PUSH
1310: LD_EXP 56
1314: PUSH
1315: LD_INT 1
1317: MINUS
1318: PUSH
1319: LD_INT 21000
1321: MUL
1322: PUSH
1323: LD_INT 1
1325: PLUS
1326: ST_TO_ADDR
// if def_builduptime = 0 then
1327: LD_EXP 57
1331: PUSH
1332: LD_INT 0
1334: EQUAL
1335: IFFALSE 1347
// buildUpTime_Delay = 0 else
1337: LD_ADDR_EXP 14
1341: PUSH
1342: LD_INT 0
1344: ST_TO_ADDR
1345: GO 1365
// buildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
1347: LD_ADDR_EXP 14
1351: PUSH
1352: LD_INT 8400
1354: PUSH
1355: LD_INT 2100
1357: PUSH
1358: LD_EXP 57
1362: MUL
1363: PLUS
1364: ST_TO_ADDR
// amount_of_siberit = 30 + def_amount_of_siberit * 5 ;
1365: LD_ADDR_EXP 11
1369: PUSH
1370: LD_INT 30
1372: PUSH
1373: LD_EXP 1
1377: PUSH
1378: LD_INT 5
1380: MUL
1381: PLUS
1382: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1383: LD_ADDR_EXP 6
1387: PUSH
1388: LD_INT 2
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: PUSH
1406: LD_EXP 46
1410: PUSH
1411: LD_INT 1
1413: PLUS
1414: ARRAY
1415: ST_TO_ADDR
// if ( def_game_rules = 4 ) then
1416: LD_EXP 43
1420: PUSH
1421: LD_INT 4
1423: EQUAL
1424: IFFALSE 1447
// begin starting_resources := [ 10000 , 5000 , 1000 ] ;
1426: LD_ADDR_EXP 8
1430: PUSH
1431: LD_INT 10000
1433: PUSH
1434: LD_INT 5000
1436: PUSH
1437: LD_INT 1000
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: ST_TO_ADDR
// end else
1445: GO 1719
// if ( Game_Type = 5 ) then
1447: LD_EXP 42
1451: PUSH
1452: LD_INT 5
1454: EQUAL
1455: IFFALSE 1573
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1457: LD_ADDR_EXP 8
1461: PUSH
1462: LD_INT 1000
1464: PUSH
1465: LD_INT 100
1467: PUSH
1468: LD_INT 100
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 2000
1478: PUSH
1479: LD_INT 200
1481: PUSH
1482: LD_INT 200
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 5000
1492: PUSH
1493: LD_INT 500
1495: PUSH
1496: LD_INT 500
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 10000
1506: PUSH
1507: LD_INT 1000
1509: PUSH
1510: LD_INT 1000
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: LIST
1517: PUSH
1518: LD_INT 25000
1520: PUSH
1521: LD_INT 2500
1523: PUSH
1524: LD_INT 2500
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 50000
1534: PUSH
1535: LD_INT 5000
1537: PUSH
1538: LD_INT 5000
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_EXP 47
1558: PUSH
1559: LD_INT 1
1561: PLUS
1562: ARRAY
1563: ST_TO_ADDR
// starting_crates := [ ] ;
1564: LD_ADDR_EXP 7
1568: PUSH
1569: EMPTY
1570: ST_TO_ADDR
// end else
1571: GO 1719
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1573: LD_ADDR_EXP 8
1577: PUSH
1578: LD_INT 0
1580: PUSH
1581: LD_INT 0
1583: PUSH
1584: LD_INT 0
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: PUSH
1592: LD_INT 30
1594: PUSH
1595: LD_INT 0
1597: PUSH
1598: LD_INT 0
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: LIST
1605: PUSH
1606: LD_INT 50
1608: PUSH
1609: LD_INT 20
1611: PUSH
1612: LD_INT 0
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 80
1622: PUSH
1623: LD_INT 40
1625: PUSH
1626: LD_INT 20
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: LD_EXP 47
1644: PUSH
1645: LD_INT 1
1647: PLUS
1648: ARRAY
1649: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1650: LD_ADDR_EXP 7
1654: PUSH
1655: LD_INT 10
1657: PUSH
1658: EMPTY
1659: LIST
1660: PUSH
1661: LD_INT 7
1663: PUSH
1664: LD_INT 14
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 6
1673: PUSH
1674: LD_INT 12
1676: PUSH
1677: LD_INT 18
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 5
1687: PUSH
1688: LD_INT 10
1690: PUSH
1691: LD_INT 15
1693: PUSH
1694: LD_INT 20
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: PUSH
1709: LD_EXP 47
1713: PUSH
1714: LD_INT 1
1716: PLUS
1717: ARRAY
1718: ST_TO_ADDR
// end ; morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1719: LD_ADDR_EXP 10
1723: PUSH
1724: LD_INT 1
1726: NEG
1727: PUSH
1728: LD_INT 350
1730: PUSH
1731: LD_INT 700
1733: PUSH
1734: LD_INT 1400
1736: PUSH
1737: LD_INT 0
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_EXP 52
1751: PUSH
1752: LD_INT 1
1754: PLUS
1755: ARRAY
1756: ST_TO_ADDR
// battle_flags_id := [ ] ;
1757: LD_ADDR_EXP 31
1761: PUSH
1762: EMPTY
1763: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1764: LD_ADDR_EXP 41
1768: PUSH
1769: LD_INT 8
1771: PUSH
1772: LD_INT 9
1774: PUSH
1775: LD_INT 10
1777: PUSH
1778: LD_INT 11
1780: PUSH
1781: LD_INT 12
1783: PUSH
1784: LD_INT 13
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: ST_TO_ADDR
// end ;
1795: LD_VAR 0 1
1799: RET
// function init_map ; var i , j ; begin
1800: LD_INT 0
1802: PPUSH
1803: PPUSH
1804: PPUSH
// normal_oil_deposits_locations := [ [ 28 , 22 ] , [ 69 , 3 ] , [ 138 , 27 ] , [ 180 , 104 ] , [ 138 , 137 ] , [ 76 , 115 ] ] ;
1805: LD_ADDR_EXP 27
1809: PUSH
1810: LD_INT 28
1812: PUSH
1813: LD_INT 22
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PUSH
1820: LD_INT 69
1822: PUSH
1823: LD_INT 3
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 138
1832: PUSH
1833: LD_INT 27
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 180
1842: PUSH
1843: LD_INT 104
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 138
1852: PUSH
1853: LD_INT 137
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: LD_INT 76
1862: PUSH
1863: LD_INT 115
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 31 , 38 ] , [ 34 , 21 ] ] , [ [ 58 , 4 ] , [ 82 , 4 ] ] , [ [ 122 , 18 ] , [ 152 , 43 ] ] , [ [ 174 , 90 ] , [ 180 , 120 ] ] , [ [ 152 , 136 ] , [ 130 , 136 ] ] , [ [ 89 , 116 ] , [ 59 , 89 ] ] ] ;
1878: LD_ADDR_EXP 28
1882: PUSH
1883: LD_INT 31
1885: PUSH
1886: LD_INT 38
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 34
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PUSH
1907: LD_INT 58
1909: PUSH
1910: LD_INT 4
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 82
1919: PUSH
1920: LD_INT 4
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 122
1933: PUSH
1934: LD_INT 18
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 152
1943: PUSH
1944: LD_INT 43
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 174
1957: PUSH
1958: LD_INT 90
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 180
1967: PUSH
1968: LD_INT 120
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PUSH
1979: LD_INT 152
1981: PUSH
1982: LD_INT 136
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 130
1991: PUSH
1992: LD_INT 136
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 89
2005: PUSH
2006: LD_INT 116
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 59
2015: PUSH
2016: LD_INT 89
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 28 , 26 ] , [ 73 , 3 ] , [ 133 , 22 ] , [ 180 , 110 ] , [ 142 , 137 ] , [ 72 , 112 ] ] ;
2035: LD_ADDR_EXP 29
2039: PUSH
2040: LD_INT 28
2042: PUSH
2043: LD_INT 26
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: PUSH
2050: LD_INT 73
2052: PUSH
2053: LD_INT 3
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: PUSH
2060: LD_INT 133
2062: PUSH
2063: LD_INT 22
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PUSH
2070: LD_INT 180
2072: PUSH
2073: LD_INT 110
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: LD_INT 142
2082: PUSH
2083: LD_INT 137
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PUSH
2090: LD_INT 72
2092: PUSH
2093: LD_INT 112
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: LIST
2106: LIST
2107: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 27 , 39 ] , [ 30 , 16 ] ] , [ [ 57 , 8 ] , [ 87 , 8 ] ] , [ [ 128 , 19 ] , [ 146 , 36 ] ] , [ [ 176 , 121 ] , [ 179 , 96 ] ] , [ [ 153 , 132 ] , [ 124 , 133 ] ] , [ [ 85 , 117 ] , [ 62 , 96 ] ] ] ;
2108: LD_ADDR_EXP 30
2112: PUSH
2113: LD_INT 27
2115: PUSH
2116: LD_INT 39
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 30
2125: PUSH
2126: LD_INT 16
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PUSH
2137: LD_INT 57
2139: PUSH
2140: LD_INT 8
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 87
2149: PUSH
2150: LD_INT 8
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: PUSH
2161: LD_INT 128
2163: PUSH
2164: LD_INT 19
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_INT 146
2173: PUSH
2174: LD_INT 36
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 176
2187: PUSH
2188: LD_INT 121
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 179
2197: PUSH
2198: LD_INT 96
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 153
2211: PUSH
2212: LD_INT 132
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 124
2221: PUSH
2222: LD_INT 133
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 85
2235: PUSH
2236: LD_INT 117
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: LD_INT 62
2245: PUSH
2246: LD_INT 96
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: ST_TO_ADDR
// depot_def := [ [ 53 , 42 , 5 ] , [ 78 , 18 , 0 ] , [ 129 , 43 , 1 ] , [ 155 , 96 , 2 ] , [ 130 , 120 , 3 ] , [ 82 , 98 , 3 ] ] ;
2265: LD_ADDR_EXP 24
2269: PUSH
2270: LD_INT 53
2272: PUSH
2273: LD_INT 42
2275: PUSH
2276: LD_INT 5
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: LD_INT 78
2286: PUSH
2287: LD_INT 18
2289: PUSH
2290: LD_INT 0
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 129
2300: PUSH
2301: LD_INT 43
2303: PUSH
2304: LD_INT 1
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: LIST
2311: PUSH
2312: LD_INT 155
2314: PUSH
2315: LD_INT 96
2317: PUSH
2318: LD_INT 2
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: PUSH
2326: LD_INT 130
2328: PUSH
2329: LD_INT 120
2331: PUSH
2332: LD_INT 3
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 82
2342: PUSH
2343: LD_INT 98
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: ST_TO_ADDR
// for i in depot_def do
2362: LD_ADDR_VAR 0 2
2366: PUSH
2367: LD_EXP 24
2371: PUSH
2372: FOR_IN
2373: IFFALSE 2447
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2375: LD_ADDR_EXP 26
2379: PUSH
2380: LD_EXP 26
2384: PUSH
2385: LD_VAR 0 2
2389: PUSH
2390: LD_INT 1
2392: ARRAY
2393: PPUSH
2394: LD_VAR 0 2
2398: PUSH
2399: LD_INT 3
2401: ARRAY
2402: PPUSH
2403: LD_INT 10
2405: PPUSH
2406: CALL_OW 272
2410: PUSH
2411: LD_VAR 0 2
2415: PUSH
2416: LD_INT 2
2418: ARRAY
2419: PPUSH
2420: LD_VAR 0 2
2424: PUSH
2425: LD_INT 3
2427: ARRAY
2428: PPUSH
2429: LD_INT 10
2431: PPUSH
2432: CALL_OW 273
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: EMPTY
2442: LIST
2443: ADD
2444: ST_TO_ADDR
2445: GO 2372
2447: POP
2448: POP
// breastworks_def := [ [ [ 65 , 53 , 5 ] , [ 65 , 40 , 4 ] ] , [ [ 76 , 28 , 0 ] , [ 89 , 28 , 5 ] ] , [ [ 115 , 41 , 1 ] , [ 128 , 54 , 0 ] ] , [ [ 143 , 82 , 2 ] , [ 143 , 95 , 1 ] ] , [ [ 131 , 108 , 3 ] , [ 118 , 108 , 2 ] ] , [ [ 80 , 85 , 3 ] , [ 92 , 97 , 4 ] ] ] ;
2449: LD_ADDR_EXP 25
2453: PUSH
2454: LD_INT 65
2456: PUSH
2457: LD_INT 53
2459: PUSH
2460: LD_INT 5
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: LIST
2467: PUSH
2468: LD_INT 65
2470: PUSH
2471: LD_INT 40
2473: PUSH
2474: LD_INT 4
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: LIST
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 76
2488: PUSH
2489: LD_INT 28
2491: PUSH
2492: LD_INT 0
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: PUSH
2500: LD_INT 89
2502: PUSH
2503: LD_INT 28
2505: PUSH
2506: LD_INT 5
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: LIST
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PUSH
2518: LD_INT 115
2520: PUSH
2521: LD_INT 41
2523: PUSH
2524: LD_INT 1
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: LIST
2531: PUSH
2532: LD_INT 128
2534: PUSH
2535: LD_INT 54
2537: PUSH
2538: LD_INT 0
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: LIST
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 143
2552: PUSH
2553: LD_INT 82
2555: PUSH
2556: LD_INT 2
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 143
2566: PUSH
2567: LD_INT 95
2569: PUSH
2570: LD_INT 1
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: LIST
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: PUSH
2582: LD_INT 131
2584: PUSH
2585: LD_INT 108
2587: PUSH
2588: LD_INT 3
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: LIST
2595: PUSH
2596: LD_INT 118
2598: PUSH
2599: LD_INT 108
2601: PUSH
2602: LD_INT 2
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: LIST
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PUSH
2614: LD_INT 80
2616: PUSH
2617: LD_INT 85
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: PUSH
2628: LD_INT 92
2630: PUSH
2631: LD_INT 97
2633: PUSH
2634: LD_INT 4
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: ST_TO_ADDR
// for i = 1 to Side_Positions do
2654: LD_ADDR_VAR 0 2
2658: PUSH
2659: DOUBLE
2660: LD_INT 1
2662: DEC
2663: ST_TO_ADDR
2664: LD_EXP 19
2668: PUSH
2669: FOR_TO
2670: IFFALSE 2800
// begin if not Side_Positions [ i ] then
2672: LD_EXP 19
2676: PUSH
2677: LD_VAR 0 2
2681: ARRAY
2682: NOT
2683: IFFALSE 2687
// continue ;
2685: GO 2669
// if def_extra_oil_deposits then
2687: LD_EXP 49
2691: IFFALSE 2749
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2693: LD_ADDR_VAR 0 3
2697: PUSH
2698: LD_EXP 28
2702: PUSH
2703: LD_EXP 19
2707: PUSH
2708: LD_VAR 0 2
2712: ARRAY
2713: ARRAY
2714: PUSH
2715: FOR_IN
2716: IFFALSE 2745
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2718: LD_VAR 0 3
2722: PUSH
2723: LD_INT 1
2725: ARRAY
2726: PPUSH
2727: LD_VAR 0 3
2731: PUSH
2732: LD_INT 2
2734: ARRAY
2735: PPUSH
2736: LD_INT 2
2738: PPUSH
2739: CALL_OW 62
2743: GO 2715
2745: POP
2746: POP
2747: GO 2798
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2749: LD_EXP 27
2753: PUSH
2754: LD_EXP 19
2758: PUSH
2759: LD_VAR 0 2
2763: ARRAY
2764: ARRAY
2765: PUSH
2766: LD_INT 1
2768: ARRAY
2769: PPUSH
2770: LD_EXP 27
2774: PUSH
2775: LD_EXP 19
2779: PUSH
2780: LD_VAR 0 2
2784: ARRAY
2785: ARRAY
2786: PUSH
2787: LD_INT 2
2789: ARRAY
2790: PPUSH
2791: LD_INT 2
2793: PPUSH
2794: CALL_OW 62
// end ;
2798: GO 2669
2800: POP
2801: POP
// if def_extra_sib_deposits then
2802: LD_EXP 50
2806: IFFALSE 2960
// for i = 1 to Side_Positions do
2808: LD_ADDR_VAR 0 2
2812: PUSH
2813: DOUBLE
2814: LD_INT 1
2816: DEC
2817: ST_TO_ADDR
2818: LD_EXP 19
2822: PUSH
2823: FOR_TO
2824: IFFALSE 2958
// begin if not Side_Positions [ i ] then
2826: LD_EXP 19
2830: PUSH
2831: LD_VAR 0 2
2835: ARRAY
2836: NOT
2837: IFFALSE 2841
// continue ;
2839: GO 2823
// if def_extra_sib_deposits = 2 then
2841: LD_EXP 50
2845: PUSH
2846: LD_INT 2
2848: EQUAL
2849: IFFALSE 2907
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2851: LD_ADDR_VAR 0 3
2855: PUSH
2856: LD_EXP 30
2860: PUSH
2861: LD_EXP 19
2865: PUSH
2866: LD_VAR 0 2
2870: ARRAY
2871: ARRAY
2872: PUSH
2873: FOR_IN
2874: IFFALSE 2903
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2876: LD_VAR 0 3
2880: PUSH
2881: LD_INT 1
2883: ARRAY
2884: PPUSH
2885: LD_VAR 0 3
2889: PUSH
2890: LD_INT 2
2892: ARRAY
2893: PPUSH
2894: LD_INT 3
2896: PPUSH
2897: CALL_OW 62
2901: GO 2873
2903: POP
2904: POP
2905: GO 2956
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2907: LD_EXP 29
2911: PUSH
2912: LD_EXP 19
2916: PUSH
2917: LD_VAR 0 2
2921: ARRAY
2922: ARRAY
2923: PUSH
2924: LD_INT 1
2926: ARRAY
2927: PPUSH
2928: LD_EXP 29
2932: PUSH
2933: LD_EXP 19
2937: PUSH
2938: LD_VAR 0 2
2942: ARRAY
2943: ARRAY
2944: PUSH
2945: LD_INT 2
2947: ARRAY
2948: PPUSH
2949: LD_INT 3
2951: PPUSH
2952: CALL_OW 62
// end ;
2956: GO 2823
2958: POP
2959: POP
// end ;
2960: LD_VAR 0 1
2964: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2965: LD_INT 0
2967: PPUSH
2968: PPUSH
2969: PPUSH
// if not Team_Game then
2970: LD_EXP 21
2974: NOT
2975: IFFALSE 3073
// begin for i = 1 to 8 do
2977: LD_ADDR_VAR 0 2
2981: PUSH
2982: DOUBLE
2983: LD_INT 1
2985: DEC
2986: ST_TO_ADDR
2987: LD_INT 8
2989: PUSH
2990: FOR_TO
2991: IFFALSE 3069
// for j = 1 to 8 do
2993: LD_ADDR_VAR 0 3
2997: PUSH
2998: DOUBLE
2999: LD_INT 1
3001: DEC
3002: ST_TO_ADDR
3003: LD_INT 8
3005: PUSH
3006: FOR_TO
3007: IFFALSE 3065
// if i <> j then
3009: LD_VAR 0 2
3013: PUSH
3014: LD_VAR 0 3
3018: NONEQUAL
3019: IFFALSE 3043
// SetAttitude ( i , j , att_neutral , true ) else
3021: LD_VAR 0 2
3025: PPUSH
3026: LD_VAR 0 3
3030: PPUSH
3031: LD_INT 0
3033: PPUSH
3034: LD_INT 1
3036: PPUSH
3037: CALL_OW 80
3041: GO 3063
// SetAttitude ( i , j , att_friend , true ) ;
3043: LD_VAR 0 2
3047: PPUSH
3048: LD_VAR 0 3
3052: PPUSH
3053: LD_INT 1
3055: PPUSH
3056: LD_INT 1
3058: PPUSH
3059: CALL_OW 80
3063: GO 3006
3065: POP
3066: POP
3067: GO 2990
3069: POP
3070: POP
// end else
3071: GO 3248
// begin if def_shared_vision then
3073: LD_EXP 51
3077: IFFALSE 3142
// begin for i in Teams do
3079: LD_ADDR_VAR 0 2
3083: PUSH
3084: LD_EXP 18
3088: PUSH
3089: FOR_IN
3090: IFFALSE 3140
// for j = 2 to i do
3092: LD_ADDR_VAR 0 3
3096: PUSH
3097: DOUBLE
3098: LD_INT 2
3100: DEC
3101: ST_TO_ADDR
3102: LD_VAR 0 2
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3136
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3110: LD_VAR 0 2
3114: PUSH
3115: LD_VAR 0 3
3119: ARRAY
3120: PPUSH
3121: LD_VAR 0 2
3125: PUSH
3126: LD_INT 1
3128: ARRAY
3129: PPUSH
3130: CALL_OW 343
3134: GO 3107
3136: POP
3137: POP
3138: GO 3089
3140: POP
3141: POP
// end ; for i = 1 to 8 do
3142: LD_ADDR_VAR 0 2
3146: PUSH
3147: DOUBLE
3148: LD_INT 1
3150: DEC
3151: ST_TO_ADDR
3152: LD_INT 8
3154: PUSH
3155: FOR_TO
3156: IFFALSE 3246
// for j = 1 to 8 do
3158: LD_ADDR_VAR 0 3
3162: PUSH
3163: DOUBLE
3164: LD_INT 1
3166: DEC
3167: ST_TO_ADDR
3168: LD_INT 8
3170: PUSH
3171: FOR_TO
3172: IFFALSE 3242
// if Side_Teams [ i ] = Side_Teams [ j ] then
3174: LD_EXP 17
3178: PUSH
3179: LD_VAR 0 2
3183: ARRAY
3184: PUSH
3185: LD_EXP 17
3189: PUSH
3190: LD_VAR 0 3
3194: ARRAY
3195: EQUAL
3196: IFFALSE 3220
// SetAttitude ( i , j , att_friend , true ) else
3198: LD_VAR 0 2
3202: PPUSH
3203: LD_VAR 0 3
3207: PPUSH
3208: LD_INT 1
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: CALL_OW 80
3218: GO 3240
// SetAttitude ( i , j , att_enemy , true ) ;
3220: LD_VAR 0 2
3224: PPUSH
3225: LD_VAR 0 3
3229: PPUSH
3230: LD_INT 2
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: CALL_OW 80
3240: GO 3171
3242: POP
3243: POP
3244: GO 3155
3246: POP
3247: POP
// end ; end ;
3248: LD_VAR 0 1
3252: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3253: LD_INT 0
3255: PPUSH
3256: PPUSH
3257: PPUSH
3258: PPUSH
// result := [ ] ;
3259: LD_ADDR_VAR 0 7
3263: PUSH
3264: EMPTY
3265: ST_TO_ADDR
// for i := 1 to count do
3266: LD_ADDR_VAR 0 8
3270: PUSH
3271: DOUBLE
3272: LD_INT 1
3274: DEC
3275: ST_TO_ADDR
3276: LD_VAR 0 1
3280: PUSH
3281: FOR_TO
3282: IFFALSE 3700
// begin uc_direction := Rand ( 0 , 5 ) ;
3284: LD_ADDR_OWVAR 24
3288: PUSH
3289: LD_INT 0
3291: PPUSH
3292: LD_INT 5
3294: PPUSH
3295: CALL_OW 12
3299: ST_TO_ADDR
// if commander then
3300: LD_LOC 1
3304: IFFALSE 3413
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3306: LD_ADDR_OWVAR 26
3310: PUSH
3311: LD_OWVAR 19
3315: PUSH
3316: LD_OWVAR 20
3320: ARRAY
3321: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3322: LD_INT 1
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: CALL_OW 12
3332: PPUSH
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_EXP 6
3342: PUSH
3343: LD_INT 2
3345: PLUS
3346: PPUSH
3347: CALL_OW 380
// hc_importance := 105 ;
3351: LD_ADDR_OWVAR 32
3355: PUSH
3356: LD_INT 105
3358: ST_TO_ADDR
// commander := false ;
3359: LD_ADDR_LOC 1
3363: PUSH
3364: LD_INT 0
3366: ST_TO_ADDR
// if Multiplayer then
3367: LD_OWVAR 4
3371: IFFALSE 3411
// begin hc_gallery := MULTIAVATARS ;
3373: LD_ADDR_OWVAR 33
3377: PUSH
3378: LD_STRING MULTIAVATARS
3380: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3381: LD_ADDR_OWVAR 34
3385: PUSH
3386: LD_OWVAR 20
3390: PPUSH
3391: CALL_OW 525
3395: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3396: LD_ADDR_OWVAR 27
3400: PUSH
3401: LD_OWVAR 20
3405: PPUSH
3406: CALL_OW 526
3410: ST_TO_ADDR
// end ; end else
3411: GO 3476
// begin hc_name :=  ;
3413: LD_ADDR_OWVAR 26
3417: PUSH
3418: LD_STRING 
3420: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3421: LD_INT 1
3423: PPUSH
3424: LD_INT 2
3426: PPUSH
3427: CALL_OW 12
3431: PPUSH
3432: LD_VAR 0 2
3436: PPUSH
3437: LD_EXP 6
3441: PPUSH
3442: CALL_OW 380
// hc_importance := 0 ;
3446: LD_ADDR_OWVAR 32
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// if Multiplayer then
3454: LD_OWVAR 4
3458: IFFALSE 3476
// begin hc_gallery :=  ;
3460: LD_ADDR_OWVAR 33
3464: PUSH
3465: LD_STRING 
3467: ST_TO_ADDR
// hc_face_number := 0 ;
3468: LD_ADDR_OWVAR 34
3472: PUSH
3473: LD_INT 0
3475: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3476: LD_ADDR_VAR 0 10
3480: PUSH
3481: CALL_OW 44
3485: ST_TO_ADDR
// if global_defined then
3486: LD_LOC 3
3490: IFFALSE 3630
// begin if ( cl = class_soldier ) then
3492: LD_VAR 0 2
3496: PUSH
3497: LD_INT 1
3499: EQUAL
3500: IFFALSE 3520
// j := i + soldiers_created else
3502: LD_ADDR_VAR 0 9
3506: PUSH
3507: LD_VAR 0 8
3511: PUSH
3512: LD_LOC 4
3516: PLUS
3517: ST_TO_ADDR
3518: GO 3530
// j := i ;
3520: LD_ADDR_VAR 0 9
3524: PUSH
3525: LD_VAR 0 8
3529: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3530: LD_LOC 2
3534: PUSH
3535: LD_VAR 0 2
3539: ARRAY
3540: PUSH
3541: LD_VAR 0 9
3545: ARRAY
3546: PPUSH
3547: LD_VAR 0 10
3551: PPUSH
3552: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3556: LD_VAR 0 10
3560: PPUSH
3561: LD_INT 2
3563: PPUSH
3564: LD_LOC 2
3568: PUSH
3569: LD_VAR 0 2
3573: ARRAY
3574: PUSH
3575: LD_VAR 0 9
3579: ARRAY
3580: PPUSH
3581: LD_INT 2
3583: PPUSH
3584: CALL_OW 260
3588: PPUSH
3589: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3593: LD_VAR 0 10
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_LOC 2
3605: PUSH
3606: LD_VAR 0 2
3610: ARRAY
3611: PUSH
3612: LD_VAR 0 9
3616: ARRAY
3617: PPUSH
3618: LD_INT 1
3620: PPUSH
3621: CALL_OW 260
3625: PPUSH
3626: CALL_OW 239
// end ; if building then
3630: LD_VAR 0 6
3634: IFFALSE 3652
// PlaceHumanInUnit ( un , building ) else
3636: LD_VAR 0 10
3640: PPUSH
3641: LD_VAR 0 6
3645: PPUSH
3646: CALL_OW 52
3650: GO 3679
// PlaceUnitXYR ( un , x , y , r , false ) ;
3652: LD_VAR 0 10
3656: PPUSH
3657: LD_VAR 0 3
3661: PPUSH
3662: LD_VAR 0 4
3666: PPUSH
3667: LD_VAR 0 5
3671: PPUSH
3672: LD_INT 0
3674: PPUSH
3675: CALL_OW 50
// result := result ^ [ un ] ;
3679: LD_ADDR_VAR 0 7
3683: PUSH
3684: LD_VAR 0 7
3688: PUSH
3689: LD_VAR 0 10
3693: PUSH
3694: EMPTY
3695: LIST
3696: ADD
3697: ST_TO_ADDR
// end ;
3698: GO 3281
3700: POP
3701: POP
// if not global_defined then
3702: LD_LOC 3
3706: NOT
3707: IFFALSE 3785
// if ( global_units >= cl ) then
3709: LD_LOC 2
3713: PUSH
3714: LD_VAR 0 2
3718: GREATEREQUAL
3719: IFFALSE 3760
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3721: LD_ADDR_LOC 2
3725: PUSH
3726: LD_LOC 2
3730: PPUSH
3731: LD_VAR 0 2
3735: PPUSH
3736: LD_LOC 2
3740: PUSH
3741: LD_VAR 0 2
3745: ARRAY
3746: PUSH
3747: LD_VAR 0 7
3751: ADD
3752: PPUSH
3753: CALL_OW 1
3757: ST_TO_ADDR
3758: GO 3785
// global_units := Replace ( global_units , cl , result ) ;
3760: LD_ADDR_LOC 2
3764: PUSH
3765: LD_LOC 2
3769: PPUSH
3770: LD_VAR 0 2
3774: PPUSH
3775: LD_VAR 0 7
3779: PPUSH
3780: CALL_OW 1
3784: ST_TO_ADDR
// if commander then
3785: LD_LOC 1
3789: IFFALSE 3836
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3791: LD_ADDR_EXP 33
3795: PUSH
3796: LD_EXP 33
3800: PPUSH
3801: LD_OWVAR 20
3805: PPUSH
3806: LD_EXP 33
3810: PUSH
3811: LD_OWVAR 20
3815: ARRAY
3816: PUSH
3817: LD_VAR 0 10
3821: ADD
3822: PPUSH
3823: CALL_OW 1
3827: ST_TO_ADDR
// commander := false ;
3828: LD_ADDR_LOC 1
3832: PUSH
3833: LD_INT 0
3835: ST_TO_ADDR
// end ; end ;
3836: LD_VAR 0 7
3840: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
3845: PPUSH
3846: PPUSH
3847: PPUSH
3848: PPUSH
3849: PPUSH
3850: PPUSH
3851: PPUSH
// if side in [ 0 , 9 ] then
3852: LD_VAR 0 1
3856: PUSH
3857: LD_INT 0
3859: PUSH
3860: LD_INT 9
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: IN
3867: IFFALSE 3871
// exit ;
3869: GO 4921
// pos := Side_Positions [ side ] ;
3871: LD_ADDR_VAR 0 3
3875: PUSH
3876: LD_EXP 19
3880: PUSH
3881: LD_VAR 0 1
3885: ARRAY
3886: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3887: LD_ADDR_OWVAR 21
3891: PUSH
3892: LD_EXP 20
3896: PUSH
3897: LD_VAR 0 1
3901: ARRAY
3902: ST_TO_ADDR
// uc_side := side ;
3903: LD_ADDR_OWVAR 20
3907: PUSH
3908: LD_VAR 0 1
3912: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3913: LD_ADDR_VAR 0 4
3917: PUSH
3918: LD_EXP 24
3922: PUSH
3923: LD_VAR 0 3
3927: ARRAY
3928: PUSH
3929: LD_INT 1
3931: ARRAY
3932: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3933: LD_ADDR_VAR 0 5
3937: PUSH
3938: LD_EXP 24
3942: PUSH
3943: LD_VAR 0 3
3947: ARRAY
3948: PUSH
3949: LD_INT 2
3951: ARRAY
3952: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3953: LD_ADDR_VAR 0 6
3957: PUSH
3958: LD_EXP 24
3962: PUSH
3963: LD_VAR 0 3
3967: ARRAY
3968: PUSH
3969: LD_INT 3
3971: ARRAY
3972: ST_TO_ADDR
// if is_depot then
3973: LD_EXP 3
3977: IFFALSE 4110
// begin bc_type = b_depot ;
3979: LD_ADDR_OWVAR 42
3983: PUSH
3984: LD_INT 0
3986: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3987: LD_ADDR_VAR 0 10
3991: PUSH
3992: LD_VAR 0 4
3996: PPUSH
3997: LD_VAR 0 5
4001: PPUSH
4002: LD_VAR 0 6
4006: PPUSH
4007: CALL_OW 47
4011: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
4012: LD_VAR 0 10
4016: PPUSH
4017: LD_STRING @
4019: PUSH
4020: LD_VAR 0 1
4024: STR
4025: PPUSH
4026: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
4030: LD_VAR 0 10
4034: PPUSH
4035: CALL_OW 274
4039: PPUSH
4040: LD_INT 1
4042: PPUSH
4043: LD_EXP 8
4047: PUSH
4048: LD_INT 1
4050: ARRAY
4051: PPUSH
4052: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
4056: LD_VAR 0 10
4060: PPUSH
4061: CALL_OW 274
4065: PPUSH
4066: LD_INT 2
4068: PPUSH
4069: LD_EXP 8
4073: PUSH
4074: LD_INT 2
4076: ARRAY
4077: PPUSH
4078: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4082: LD_VAR 0 10
4086: PPUSH
4087: CALL_OW 274
4091: PPUSH
4092: LD_INT 3
4094: PPUSH
4095: LD_EXP 8
4099: PUSH
4100: LD_INT 3
4102: ARRAY
4103: PPUSH
4104: CALL_OW 277
// end else
4108: GO 4254
// begin for i := 1 to 3 do
4110: LD_ADDR_VAR 0 7
4114: PUSH
4115: DOUBLE
4116: LD_INT 1
4118: DEC
4119: ST_TO_ADDR
4120: LD_INT 3
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4252
// begin r := starting_resources [ i ] ;
4126: LD_ADDR_VAR 0 8
4130: PUSH
4131: LD_EXP 8
4135: PUSH
4136: LD_VAR 0 7
4140: ARRAY
4141: ST_TO_ADDR
// while r >= 10 do
4142: LD_VAR 0 8
4146: PUSH
4147: LD_INT 10
4149: GREATEREQUAL
4150: IFFALSE 4250
// if r > 50 then
4152: LD_VAR 0 8
4156: PUSH
4157: LD_INT 50
4159: GREATER
4160: IFFALSE 4206
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4162: LD_VAR 0 7
4166: PPUSH
4167: LD_INT 5
4169: PPUSH
4170: LD_VAR 0 4
4174: PPUSH
4175: LD_VAR 0 5
4179: PPUSH
4180: LD_INT 4
4182: PPUSH
4183: LD_INT 0
4185: PPUSH
4186: CALL_OW 60
// r := r - 50 ;
4190: LD_ADDR_VAR 0 8
4194: PUSH
4195: LD_VAR 0 8
4199: PUSH
4200: LD_INT 50
4202: MINUS
4203: ST_TO_ADDR
// end else
4204: GO 4248
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4206: LD_VAR 0 7
4210: PPUSH
4211: LD_VAR 0 8
4215: PUSH
4216: LD_INT 10
4218: DIV
4219: PPUSH
4220: LD_VAR 0 4
4224: PPUSH
4225: LD_VAR 0 5
4229: PPUSH
4230: LD_INT 4
4232: PPUSH
4233: LD_INT 0
4235: PPUSH
4236: CALL_OW 60
// r := 0 ;
4240: LD_ADDR_VAR 0 8
4244: PUSH
4245: LD_INT 0
4247: ST_TO_ADDR
// end ;
4248: GO 4142
// end ;
4250: GO 4123
4252: POP
4253: POP
// end ; for r in starting_crates do
4254: LD_ADDR_VAR 0 8
4258: PUSH
4259: LD_EXP 7
4263: PUSH
4264: FOR_IN
4265: IFFALSE 4297
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4267: LD_INT 1
4269: PPUSH
4270: LD_INT 5
4272: PPUSH
4273: LD_VAR 0 4
4277: PPUSH
4278: LD_VAR 0 5
4282: PPUSH
4283: LD_VAR 0 8
4287: PPUSH
4288: LD_INT 0
4290: PPUSH
4291: CALL_OW 60
4295: GO 4264
4297: POP
4298: POP
// if def_morale_flags then
4299: LD_EXP 52
4303: IFFALSE 4442
// begin x := start_def [ pos ] [ 1 ] ;
4305: LD_ADDR_VAR 0 4
4309: PUSH
4310: LD_EXP 26
4314: PUSH
4315: LD_VAR 0 3
4319: ARRAY
4320: PUSH
4321: LD_INT 1
4323: ARRAY
4324: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4325: LD_ADDR_VAR 0 5
4329: PUSH
4330: LD_EXP 26
4334: PUSH
4335: LD_VAR 0 3
4339: ARRAY
4340: PUSH
4341: LD_INT 2
4343: ARRAY
4344: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4345: LD_VAR 0 4
4349: PPUSH
4350: LD_VAR 0 5
4354: PPUSH
4355: LD_INT 12
4357: PPUSH
4358: LD_INT 2
4360: PPUSH
4361: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4365: LD_ADDR_EXP 31
4369: PUSH
4370: LD_EXP 31
4374: PUSH
4375: LD_VAR 0 1
4379: PPUSH
4380: LD_VAR 0 4
4384: PPUSH
4385: LD_VAR 0 5
4389: PPUSH
4390: LD_INT 1
4392: PUSH
4393: LD_INT 100
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 2
4402: PUSH
4403: LD_INT 50
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: LD_INT 20
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 20
4422: PUSH
4423: LD_INT 100
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: PPUSH
4436: CALL_OW 418
4440: ADD
4441: ST_TO_ADDR
// end ; commander := true ;
4442: LD_ADDR_LOC 1
4446: PUSH
4447: LD_INT 1
4449: ST_TO_ADDR
// soldiers_created := 0 ;
4450: LD_ADDR_LOC 4
4454: PUSH
4455: LD_INT 0
4457: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4458: LD_ADDR_VAR 0 7
4462: PUSH
4463: DOUBLE
4464: LD_INT 1
4466: DEC
4467: ST_TO_ADDR
4468: LD_EXP 4
4472: PUSH
4473: FOR_TO
4474: IFFALSE 4627
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4476: LD_ADDR_VAR 0 4
4480: PUSH
4481: LD_EXP 25
4485: PUSH
4486: LD_VAR 0 3
4490: ARRAY
4491: PUSH
4492: LD_VAR 0 7
4496: ARRAY
4497: PUSH
4498: LD_INT 1
4500: ARRAY
4501: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4502: LD_ADDR_VAR 0 5
4506: PUSH
4507: LD_EXP 25
4511: PUSH
4512: LD_VAR 0 3
4516: ARRAY
4517: PUSH
4518: LD_VAR 0 7
4522: ARRAY
4523: PUSH
4524: LD_INT 2
4526: ARRAY
4527: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4528: LD_ADDR_VAR 0 6
4532: PUSH
4533: LD_EXP 25
4537: PUSH
4538: LD_VAR 0 3
4542: ARRAY
4543: PUSH
4544: LD_VAR 0 7
4548: ARRAY
4549: PUSH
4550: LD_INT 3
4552: ARRAY
4553: ST_TO_ADDR
// bc_type := b_breastwork ;
4554: LD_ADDR_OWVAR 42
4558: PUSH
4559: LD_INT 31
4561: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4562: LD_ADDR_VAR 0 9
4566: PUSH
4567: LD_VAR 0 4
4571: PPUSH
4572: LD_VAR 0 5
4576: PPUSH
4577: LD_VAR 0 6
4581: PPUSH
4582: CALL_OW 47
4586: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4587: LD_INT 1
4589: PPUSH
4590: LD_INT 1
4592: PPUSH
4593: LD_INT 0
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: LD_INT 0
4601: PPUSH
4602: LD_VAR 0 9
4606: PPUSH
4607: CALL 3253 0 6
// soldiers_created := soldiers_created + 1 ;
4611: LD_ADDR_LOC 4
4615: PUSH
4616: LD_LOC 4
4620: PUSH
4621: LD_INT 1
4623: PLUS
4624: ST_TO_ADDR
// end ;
4625: GO 4473
4627: POP
4628: POP
// x := start_def [ pos ] [ 1 ] ;
4629: LD_ADDR_VAR 0 4
4633: PUSH
4634: LD_EXP 26
4638: PUSH
4639: LD_VAR 0 3
4643: ARRAY
4644: PUSH
4645: LD_INT 1
4647: ARRAY
4648: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4649: LD_ADDR_VAR 0 5
4653: PUSH
4654: LD_EXP 26
4658: PUSH
4659: LD_VAR 0 3
4663: ARRAY
4664: PUSH
4665: LD_INT 2
4667: ARRAY
4668: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4669: LD_LOC 8
4673: PUSH
4674: LD_EXP 4
4678: MINUS
4679: PPUSH
4680: LD_INT 1
4682: PPUSH
4683: LD_VAR 0 4
4687: PPUSH
4688: LD_VAR 0 5
4692: PPUSH
4693: LD_INT 5
4695: PPUSH
4696: LD_INT 0
4698: PPUSH
4699: CALL 3253 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4703: LD_LOC 5
4707: PPUSH
4708: LD_INT 2
4710: PPUSH
4711: LD_VAR 0 4
4715: PPUSH
4716: LD_VAR 0 5
4720: PPUSH
4721: LD_INT 5
4723: PPUSH
4724: LD_INT 0
4726: PPUSH
4727: CALL 3253 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4731: LD_LOC 7
4735: PPUSH
4736: LD_INT 3
4738: PPUSH
4739: LD_VAR 0 4
4743: PPUSH
4744: LD_VAR 0 5
4748: PPUSH
4749: LD_INT 5
4751: PPUSH
4752: LD_INT 0
4754: PPUSH
4755: CALL 3253 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4759: LD_LOC 6
4763: PPUSH
4764: LD_INT 4
4766: PPUSH
4767: LD_VAR 0 4
4771: PPUSH
4772: LD_VAR 0 5
4776: PPUSH
4777: LD_INT 5
4779: PPUSH
4780: LD_INT 0
4782: PPUSH
4783: CALL 3253 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4787: LD_EXP 53
4791: PUSH
4792: LD_INT 20
4794: PPUSH
4795: LD_VAR 0 1
4799: PPUSH
4800: CALL_OW 321
4804: PUSH
4805: LD_INT 1
4807: EQUAL
4808: AND
4809: IFFALSE 4826
// SetTech ( tech_SibDet , side , state_researched ) ;
4811: LD_INT 20
4813: PPUSH
4814: LD_VAR 0 1
4818: PPUSH
4819: LD_INT 2
4821: PPUSH
4822: CALL_OW 322
// if def_siberite_bomb = 1 then
4826: LD_EXP 56
4830: PUSH
4831: LD_INT 1
4833: EQUAL
4834: IFFALSE 4868
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4836: LD_INT 25
4838: PPUSH
4839: LD_VAR 0 1
4843: PPUSH
4844: LD_INT 1
4846: PPUSH
4847: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4851: LD_INT 73
4853: PPUSH
4854: LD_VAR 0 1
4858: PPUSH
4859: LD_INT 1
4861: PPUSH
4862: CALL_OW 322
// end else
4866: GO 4898
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4868: LD_INT 25
4870: PPUSH
4871: LD_VAR 0 1
4875: PPUSH
4876: LD_INT 0
4878: PPUSH
4879: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4883: LD_INT 73
4885: PPUSH
4886: LD_VAR 0 1
4890: PPUSH
4891: LD_INT 0
4893: PPUSH
4894: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4898: LD_INT 24
4900: PPUSH
4901: LD_VAR 0 1
4905: PPUSH
4906: LD_INT 0
4908: PPUSH
4909: CALL_OW 322
// global_defined := true ;
4913: LD_ADDR_LOC 3
4917: PUSH
4918: LD_INT 1
4920: ST_TO_ADDR
// end ;
4921: LD_VAR 0 2
4925: RET
// every 0 0$1 do
4926: GO 4928
4928: DISABLE
// if ( def_siberite_bomb > 1 ) then
4929: LD_EXP 56
4933: PUSH
4934: LD_INT 1
4936: GREATER
4937: IFFALSE 4952
// begin wait ( siberite_bomb_Delay ) ;
4939: LD_EXP 16
4943: PPUSH
4944: CALL_OW 67
// EnableSibFiss ;
4948: CALL 4953 0 0
// end ;
4952: END
// function EnableSibFiss ; var i ; begin
4953: LD_INT 0
4955: PPUSH
4956: PPUSH
// for i := 1 to 8 do
4957: LD_ADDR_VAR 0 2
4961: PUSH
4962: DOUBLE
4963: LD_INT 1
4965: DEC
4966: ST_TO_ADDR
4967: LD_INT 8
4969: PUSH
4970: FOR_TO
4971: IFFALSE 5017
// if Side_Positions [ i ] then
4973: LD_EXP 19
4977: PUSH
4978: LD_VAR 0 2
4982: ARRAY
4983: IFFALSE 5015
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4985: LD_INT 25
4987: PPUSH
4988: LD_VAR 0 2
4992: PPUSH
4993: LD_INT 1
4995: PPUSH
4996: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5000: LD_INT 73
5002: PPUSH
5003: LD_VAR 0 2
5007: PPUSH
5008: LD_INT 1
5010: PPUSH
5011: CALL_OW 322
// end ;
5015: GO 4970
5017: POP
5018: POP
// end ;
5019: LD_VAR 0 1
5023: RET
// function prepare_sides ; var i ; begin
5024: LD_INT 0
5026: PPUSH
5027: PPUSH
// global_units := [ ] ;
5028: LD_ADDR_LOC 2
5032: PUSH
5033: EMPTY
5034: ST_TO_ADDR
// global_defined := false ;
5035: LD_ADDR_LOC 3
5039: PUSH
5040: LD_INT 0
5042: ST_TO_ADDR
// CountClassMembers ;
5043: CALL 5093 0 0
// for i := 1 to 8 do
5047: LD_ADDR_VAR 0 2
5051: PUSH
5052: DOUBLE
5053: LD_INT 1
5055: DEC
5056: ST_TO_ADDR
5057: LD_INT 8
5059: PUSH
5060: FOR_TO
5061: IFFALSE 5086
// if Side_Positions [ i ] then
5063: LD_EXP 19
5067: PUSH
5068: LD_VAR 0 2
5072: ARRAY
5073: IFFALSE 5084
// prepare_side ( i ) ;
5075: LD_VAR 0 2
5079: PPUSH
5080: CALL 3841 0 1
5084: GO 5060
5086: POP
5087: POP
// end ;
5088: LD_VAR 0 1
5092: RET
// function CountClassMembers ; var Mode ; begin
5093: LD_INT 0
5095: PPUSH
5096: PPUSH
// if No_Mechs then
5097: LD_EXP 58
5101: IFFALSE 5113
// Mode := 2 else
5103: LD_ADDR_VAR 0 2
5107: PUSH
5108: LD_INT 2
5110: ST_TO_ADDR
5111: GO 5121
// Mode := 1 ;
5113: LD_ADDR_VAR 0 2
5117: PUSH
5118: LD_INT 1
5120: ST_TO_ADDR
// neng := number_of_people ;
5121: LD_ADDR_LOC 5
5125: PUSH
5126: LD_EXP 5
5130: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5131: LD_ADDR_LOC 8
5135: PUSH
5136: LD_LOC 5
5140: PUSH
5141: LD_INT 4
5143: PUSH
5144: LD_INT 3
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_VAR 0 2
5155: ARRAY
5156: DIV
5157: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5158: LD_LOC 8
5162: PUSH
5163: LD_EXP 4
5167: LESS
5168: IFFALSE 5180
// nsol := number_of_breastworks ;
5170: LD_ADDR_LOC 8
5174: PUSH
5175: LD_EXP 4
5179: ST_TO_ADDR
// neng := neng - nsol ;
5180: LD_ADDR_LOC 5
5184: PUSH
5185: LD_LOC 5
5189: PUSH
5190: LD_LOC 8
5194: MINUS
5195: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5196: LD_ADDR_LOC 6
5200: PUSH
5201: LD_LOC 5
5205: PUSH
5206: LD_INT 3
5208: PUSH
5209: LD_INT 2
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: DIV
5222: ST_TO_ADDR
// if ( nsci < 1 ) then
5223: LD_LOC 6
5227: PUSH
5228: LD_INT 1
5230: LESS
5231: IFFALSE 5241
// nsci := 1 ;
5233: LD_ADDR_LOC 6
5237: PUSH
5238: LD_INT 1
5240: ST_TO_ADDR
// neng := neng - nsci ;
5241: LD_ADDR_LOC 5
5245: PUSH
5246: LD_LOC 5
5250: PUSH
5251: LD_LOC 6
5255: MINUS
5256: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5257: LD_ADDR_LOC 7
5261: PUSH
5262: LD_LOC 5
5266: PUSH
5267: LD_INT 2
5269: DIV
5270: PUSH
5271: LD_INT 0
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: PUSH
5278: LD_VAR 0 2
5282: ARRAY
5283: ST_TO_ADDR
// neng := neng - nmech ;
5284: LD_ADDR_LOC 5
5288: PUSH
5289: LD_LOC 5
5293: PUSH
5294: LD_LOC 7
5298: MINUS
5299: ST_TO_ADDR
// if ( neng < 1 ) then
5300: LD_LOC 5
5304: PUSH
5305: LD_INT 1
5307: LESS
5308: IFFALSE 5318
// neng := 1 ;
5310: LD_ADDR_LOC 5
5314: PUSH
5315: LD_INT 1
5317: ST_TO_ADDR
// end ;
5318: LD_VAR 0 1
5322: RET
// starting begin disable ( 98 ) ;
5323: LD_INT 98
5325: DISABLE_MARKED
// disable ( 99 ) ;
5326: LD_INT 99
5328: DISABLE_MARKED
// disable ( 100 ) ;
5329: LD_INT 100
5331: DISABLE_MARKED
// disable ( 200 ) ;
5332: LD_INT 200
5334: DISABLE_MARKED
// disable ( 400 ) ;
5335: LD_INT 400
5337: DISABLE_MARKED
// disable ( 401 ) ;
5338: LD_INT 401
5340: DISABLE_MARKED
// disable ( 600 ) ;
5341: LD_INT 600
5343: DISABLE_MARKED
// mp_selectmsg := true ;
5344: LD_ADDR_OWVAR 13
5348: PUSH
5349: LD_INT 1
5351: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5352: CALL 68 0 0
// init_map ;
5356: CALL 1800 0 0
// set_shared_visions_and_alliances ;
5360: CALL 2965 0 0
// ResetFog ;
5364: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5368: LD_OWVAR 2
5372: PPUSH
5373: CALL_OW 520
// prepare_sides ;
5377: CALL 5024 0 0
// init_respawning ;
5381: CALL 7091 0 0
// Init_Win_Condition ;
5385: CALL 14187 0 0
// InitLimits ;
5389: CALL 12776 0 0
// ShowTimer ;
5393: CALL 13713 0 0
// case Game_Type of 3 :
5397: LD_EXP 42
5401: PUSH
5402: LD_INT 3
5404: DOUBLE
5405: EQUAL
5406: IFTRUE 5410
5408: GO 5416
5410: POP
// enable ( 100 ) ; 4 :
5411: LD_INT 100
5413: ENABLE_MARKED
5414: GO 5432
5416: LD_INT 4
5418: DOUBLE
5419: EQUAL
5420: IFTRUE 5424
5422: GO 5431
5424: POP
// InitBloodGods ; end ;
5425: CALL 10339 0 0
5429: GO 5432
5431: POP
// music_nat := Side_Nations [ your_side ] ;
5432: LD_ADDR_OWVAR 71
5436: PUSH
5437: LD_EXP 20
5441: PUSH
5442: LD_OWVAR 2
5446: ARRAY
5447: ST_TO_ADDR
// if IAmSpec then
5448: CALL_OW 531
5452: IFFALSE 5476
// begin fogOff ( true ) ;
5454: LD_INT 1
5456: PPUSH
5457: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
5461: LD_INT 104
5463: PPUSH
5464: LD_INT 69
5466: PPUSH
5467: CALL_OW 86
// enable ( 400 ) ;
5471: LD_INT 400
5473: ENABLE_MARKED
// end else
5474: GO 5522
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5476: LD_EXP 26
5480: PUSH
5481: LD_EXP 19
5485: PUSH
5486: LD_OWVAR 2
5490: ARRAY
5491: ARRAY
5492: PUSH
5493: LD_INT 1
5495: ARRAY
5496: PPUSH
5497: LD_EXP 26
5501: PUSH
5502: LD_EXP 19
5506: PUSH
5507: LD_OWVAR 2
5511: ARRAY
5512: ARRAY
5513: PUSH
5514: LD_INT 2
5516: ARRAY
5517: PPUSH
5518: CALL_OW 86
// end ; InitApeman ;
5522: CALL 6258 0 0
// if def_builduptime then
5526: LD_EXP 57
5530: IFFALSE 5536
// BeginBuildUp ;
5532: CALL 8970 0 0
// end ; end_of_file
5536: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5537: GO 5539
5539: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5540: LD_INT 4
5542: PPUSH
5543: LD_INT 5
5545: PPUSH
5546: CALL_OW 12
5550: PPUSH
5551: LD_INT 1
5553: PPUSH
5554: CALL_OW 57
// enable ;
5558: ENABLE
// end ;
5559: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5560: GO 5562
5562: DISABLE
5563: LD_INT 0
5565: PPUSH
5566: PPUSH
// begin case tick of 1 .. 1 1$0 :
5567: LD_OWVAR 1
5571: PUSH
5572: LD_INT 1
5574: DOUBLE
5575: GREATEREQUAL
5576: IFFALSE 5584
5578: LD_INT 2100
5580: DOUBLE
5581: LESSEQUAL
5582: IFTRUE 5586
5584: GO 5614
5586: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5587: LD_EXP 9
5591: PUSH
5592: LD_INT 100
5594: DIVREAL
5595: PUSH
5596: LD_INT 350
5598: PPUSH
5599: LD_INT 1050
5601: PPUSH
5602: CALL_OW 12
5606: MUL
5607: PPUSH
5608: CALL_OW 67
5612: GO 5916
5614: LD_INT 2100
5616: PUSH
5617: LD_INT 1
5619: PLUS
5620: DOUBLE
5621: GREATEREQUAL
5622: IFFALSE 5630
5624: LD_INT 10500
5626: DOUBLE
5627: LESSEQUAL
5628: IFTRUE 5632
5630: GO 5660
5632: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5633: LD_EXP 9
5637: PUSH
5638: LD_INT 100
5640: DIVREAL
5641: PUSH
5642: LD_INT 1050
5644: PPUSH
5645: LD_INT 1575
5647: PPUSH
5648: CALL_OW 12
5652: MUL
5653: PPUSH
5654: CALL_OW 67
5658: GO 5916
5660: LD_INT 10500
5662: PUSH
5663: LD_INT 1
5665: PLUS
5666: DOUBLE
5667: GREATEREQUAL
5668: IFFALSE 5676
5670: LD_INT 21000
5672: DOUBLE
5673: LESSEQUAL
5674: IFTRUE 5678
5676: GO 5706
5678: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5679: LD_EXP 9
5683: PUSH
5684: LD_INT 100
5686: DIVREAL
5687: PUSH
5688: LD_INT 1575
5690: PPUSH
5691: LD_INT 2100
5693: PPUSH
5694: CALL_OW 12
5698: MUL
5699: PPUSH
5700: CALL_OW 67
5704: GO 5916
5706: LD_INT 21000
5708: PUSH
5709: LD_INT 1
5711: PLUS
5712: DOUBLE
5713: GREATEREQUAL
5714: IFFALSE 5722
5716: LD_INT 42000
5718: DOUBLE
5719: LESSEQUAL
5720: IFTRUE 5724
5722: GO 5752
5724: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5725: LD_EXP 9
5729: PUSH
5730: LD_INT 100
5732: DIVREAL
5733: PUSH
5734: LD_INT 2100
5736: PPUSH
5737: LD_INT 2625
5739: PPUSH
5740: CALL_OW 12
5744: MUL
5745: PPUSH
5746: CALL_OW 67
5750: GO 5916
5752: LD_INT 42000
5754: PUSH
5755: LD_INT 1
5757: PLUS
5758: DOUBLE
5759: GREATEREQUAL
5760: IFFALSE 5768
5762: LD_INT 63000
5764: DOUBLE
5765: LESSEQUAL
5766: IFTRUE 5770
5768: GO 5798
5770: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5771: LD_EXP 9
5775: PUSH
5776: LD_INT 100
5778: DIVREAL
5779: PUSH
5780: LD_INT 2625
5782: PPUSH
5783: LD_INT 3150
5785: PPUSH
5786: CALL_OW 12
5790: MUL
5791: PPUSH
5792: CALL_OW 67
5796: GO 5916
5798: LD_INT 63000
5800: PUSH
5801: LD_INT 1
5803: PLUS
5804: DOUBLE
5805: GREATEREQUAL
5806: IFFALSE 5814
5808: LD_INT 105000
5810: DOUBLE
5811: LESSEQUAL
5812: IFTRUE 5816
5814: GO 5844
5816: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5817: LD_EXP 9
5821: PUSH
5822: LD_INT 100
5824: DIVREAL
5825: PUSH
5826: LD_INT 3150
5828: PPUSH
5829: LD_INT 3675
5831: PPUSH
5832: CALL_OW 12
5836: MUL
5837: PPUSH
5838: CALL_OW 67
5842: GO 5916
5844: LD_INT 105000
5846: PUSH
5847: LD_INT 1
5849: PLUS
5850: DOUBLE
5851: GREATEREQUAL
5852: IFFALSE 5860
5854: LD_INT 630000
5856: DOUBLE
5857: LESSEQUAL
5858: IFTRUE 5862
5860: GO 5890
5862: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5863: LD_EXP 9
5867: PUSH
5868: LD_INT 100
5870: DIVREAL
5871: PUSH
5872: LD_INT 3675
5874: PPUSH
5875: LD_INT 4200
5877: PPUSH
5878: CALL_OW 12
5882: MUL
5883: PPUSH
5884: CALL_OW 67
5888: GO 5916
5890: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5891: LD_EXP 9
5895: PUSH
5896: LD_INT 100
5898: DIVREAL
5899: PUSH
5900: LD_INT 4200
5902: PPUSH
5903: LD_INT 5250
5905: PPUSH
5906: CALL_OW 12
5910: MUL
5911: PPUSH
5912: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5916: LD_ADDR_VAR 0 2
5920: PUSH
5921: LD_INT 3
5923: PPUSH
5924: LD_INT 5
5926: PPUSH
5927: CALL_OW 12
5931: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5932: LD_ADDR_VAR 0 1
5936: PUSH
5937: LD_EXP 19
5941: PUSH
5942: LD_INT 0
5944: PUSH
5945: EMPTY
5946: LIST
5947: DIFF
5948: PUSH
5949: FOR_IN
5950: IFFALSE 5999
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5952: LD_VAR 0 2
5956: PPUSH
5957: LD_EXP 26
5961: PUSH
5962: LD_VAR 0 1
5966: ARRAY
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_EXP 26
5976: PUSH
5977: LD_VAR 0 1
5981: ARRAY
5982: PUSH
5983: LD_INT 2
5985: ARRAY
5986: PPUSH
5987: LD_INT 20
5989: PPUSH
5990: LD_INT 1
5992: PPUSH
5993: CALL_OW 56
5997: GO 5949
5999: POP
6000: POP
// enable ;
6001: ENABLE
// end ;
6002: PPOPN 2
6004: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
6005: GO 6007
6007: DISABLE
6008: LD_INT 0
6010: PPUSH
6011: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
6012: LD_INT 1
6014: PPUSH
6015: LD_INT 1
6017: PPUSH
6018: CALL_OW 287
6022: PUSH
6023: LD_INT 200
6025: PUSH
6026: LD_EXP 9
6030: MINUS
6031: PUSH
6032: LD_INT 100
6034: DIVREAL
6035: PUSH
6036: LD_INT 5
6038: MUL
6039: LESS
6040: IFFALSE 6063
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
6042: LD_INT 3
6044: PPUSH
6045: LD_INT 5
6047: PPUSH
6048: CALL_OW 12
6052: PPUSH
6053: LD_INT 1
6055: PPUSH
6056: LD_INT 1
6058: PPUSH
6059: CALL_OW 55
// enable ;
6063: ENABLE
// end ; end_of_file
6064: PPOPN 2
6066: END
// every 20 20$00 trigger apemanNumber do
6067: LD_EXP 34
6071: IFFALSE 6104
6073: GO 6075
6075: DISABLE
// begin enable ;
6076: ENABLE
// if apeLevel >= 8 then
6077: LD_EXP 39
6081: PUSH
6082: LD_INT 8
6084: GREATEREQUAL
6085: IFFALSE 6090
// disable else
6087: DISABLE
6088: GO 6104
// apeLevel := apeLevel + 1 ;
6090: LD_ADDR_EXP 39
6094: PUSH
6095: LD_EXP 39
6099: PUSH
6100: LD_INT 1
6102: PLUS
6103: ST_TO_ADDR
// end ;
6104: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6105: LD_EXP 34
6109: PUSH
6110: LD_EXP 35
6114: LESS
6115: IFFALSE 6255
6117: GO 6119
6119: DISABLE
6120: LD_INT 0
6122: PPUSH
6123: PPUSH
6124: PPUSH
6125: PPUSH
// begin enable ;
6126: ENABLE
// for i := 1 to apemanPos do
6127: LD_ADDR_VAR 0 1
6131: PUSH
6132: DOUBLE
6133: LD_INT 1
6135: DEC
6136: ST_TO_ADDR
6137: LD_EXP 37
6141: PUSH
6142: FOR_TO
6143: IFFALSE 6253
// begin if apemanPlayerCount [ i ] then
6145: LD_EXP 38
6149: PUSH
6150: LD_VAR 0 1
6154: ARRAY
6155: IFFALSE 6251
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6157: LD_EXP 38
6161: PUSH
6162: LD_VAR 0 1
6166: ARRAY
6167: PUSH
6168: LD_EXP 37
6172: PUSH
6173: LD_VAR 0 1
6177: ARRAY
6178: GREATER
6179: IFFALSE 6251
// begin ape := PrepareApeman ;
6181: LD_ADDR_VAR 0 2
6185: PUSH
6186: CALL 6766 0 0
6190: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6191: LD_VAR 0 2
6195: PPUSH
6196: LD_EXP 40
6200: PUSH
6201: LD_VAR 0 1
6205: ARRAY
6206: PPUSH
6207: LD_INT 0
6209: PPUSH
6210: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6214: LD_ADDR_EXP 37
6218: PUSH
6219: LD_EXP 37
6223: PPUSH
6224: LD_VAR 0 1
6228: PPUSH
6229: LD_EXP 37
6233: PUSH
6234: LD_VAR 0 1
6238: ARRAY
6239: PUSH
6240: LD_VAR 0 2
6244: UNION
6245: PPUSH
6246: CALL_OW 1
6250: ST_TO_ADDR
// end ; end ; end ;
6251: GO 6142
6253: POP
6254: POP
// end ;
6255: PPOPN 4
6257: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6258: LD_INT 0
6260: PPUSH
6261: PPUSH
6262: PPUSH
6263: PPUSH
6264: PPUSH
6265: PPUSH
6266: PPUSH
// playersAmount := 0 ;
6267: LD_ADDR_VAR 0 3
6271: PUSH
6272: LD_INT 0
6274: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6275: LD_ADDR_VAR 0 7
6279: PUSH
6280: LD_INT 2
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: LD_INT 4
6288: PUSH
6289: LD_INT 5
6291: PUSH
6292: LD_INT 6
6294: PUSH
6295: LD_INT 7
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6306: LD_ADDR_EXP 40
6310: PUSH
6311: LD_INT 0
6313: PUSH
6314: LD_INT 0
6316: PUSH
6317: LD_INT 0
6319: PUSH
6320: LD_INT 0
6322: PUSH
6323: LD_INT 0
6325: PUSH
6326: LD_INT 0
6328: PUSH
6329: LD_INT 0
6331: PUSH
6332: LD_INT 0
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: ST_TO_ADDR
// for j = 1 to Side_Positions do
6345: LD_ADDR_VAR 0 4
6349: PUSH
6350: DOUBLE
6351: LD_INT 1
6353: DEC
6354: ST_TO_ADDR
6355: LD_EXP 19
6359: PUSH
6360: FOR_TO
6361: IFFALSE 6428
// if Side_Positions [ j ] then
6363: LD_EXP 19
6367: PUSH
6368: LD_VAR 0 4
6372: ARRAY
6373: IFFALSE 6426
// begin playersAmount := playersAmount + 1 ;
6375: LD_ADDR_VAR 0 3
6379: PUSH
6380: LD_VAR 0 3
6384: PUSH
6385: LD_INT 1
6387: PLUS
6388: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6389: LD_ADDR_EXP 40
6393: PUSH
6394: LD_EXP 40
6398: PPUSH
6399: LD_VAR 0 4
6403: PPUSH
6404: LD_VAR 0 7
6408: PUSH
6409: LD_EXP 19
6413: PUSH
6414: LD_VAR 0 4
6418: ARRAY
6419: ARRAY
6420: PPUSH
6421: CALL_OW 1
6425: ST_TO_ADDR
// end ;
6426: GO 6360
6428: POP
6429: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6430: LD_ADDR_EXP 36
6434: PUSH
6435: LD_INT 3
6437: PUSH
6438: LD_EXP 15
6442: MUL
6443: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6444: LD_ADDR_EXP 34
6448: PUSH
6449: LD_VAR 0 3
6453: PUSH
6454: LD_EXP 36
6458: MUL
6459: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6460: LD_ADDR_EXP 35
6464: PUSH
6465: LD_EXP 34
6469: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6470: LD_ADDR_EXP 37
6474: PUSH
6475: LD_INT 0
6477: PUSH
6478: LD_INT 0
6480: PUSH
6481: LD_INT 0
6483: PUSH
6484: LD_INT 0
6486: PUSH
6487: LD_INT 0
6489: PUSH
6490: LD_INT 0
6492: PUSH
6493: LD_INT 0
6495: PUSH
6496: LD_INT 0
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6509: LD_ADDR_EXP 38
6513: PUSH
6514: LD_INT 0
6516: PUSH
6517: LD_INT 0
6519: PUSH
6520: LD_INT 0
6522: PUSH
6523: LD_INT 0
6525: PUSH
6526: LD_INT 0
6528: PUSH
6529: LD_INT 0
6531: PUSH
6532: LD_INT 0
6534: PUSH
6535: LD_INT 0
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: ST_TO_ADDR
// apeLevel := 1 ;
6548: LD_ADDR_EXP 39
6552: PUSH
6553: LD_INT 1
6555: ST_TO_ADDR
// if not apemanNumber then
6556: LD_EXP 34
6560: NOT
6561: IFFALSE 6565
// exit ;
6563: GO 6761
// for i := 1 to apemanPerPlayer do
6565: LD_ADDR_VAR 0 2
6569: PUSH
6570: DOUBLE
6571: LD_INT 1
6573: DEC
6574: ST_TO_ADDR
6575: LD_EXP 36
6579: PUSH
6580: FOR_TO
6581: IFFALSE 6759
// begin for j := 1 to Side_Positions do
6583: LD_ADDR_VAR 0 4
6587: PUSH
6588: DOUBLE
6589: LD_INT 1
6591: DEC
6592: ST_TO_ADDR
6593: LD_EXP 19
6597: PUSH
6598: FOR_TO
6599: IFFALSE 6755
// if Side_Positions [ j ] then
6601: LD_EXP 19
6605: PUSH
6606: LD_VAR 0 4
6610: ARRAY
6611: IFFALSE 6753
// begin pos := Side_Positions [ j ] ;
6613: LD_ADDR_VAR 0 6
6617: PUSH
6618: LD_EXP 19
6622: PUSH
6623: LD_VAR 0 4
6627: ARRAY
6628: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6629: LD_ADDR_EXP 38
6633: PUSH
6634: LD_EXP 38
6638: PPUSH
6639: LD_VAR 0 4
6643: PPUSH
6644: LD_EXP 38
6648: PUSH
6649: LD_VAR 0 4
6653: ARRAY
6654: PUSH
6655: LD_INT 1
6657: PLUS
6658: PPUSH
6659: CALL_OW 1
6663: ST_TO_ADDR
// ape := PrepareApeman ;
6664: LD_ADDR_VAR 0 5
6668: PUSH
6669: CALL 6766 0 0
6673: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6674: LD_ADDR_EXP 37
6678: PUSH
6679: LD_EXP 37
6683: PPUSH
6684: LD_VAR 0 4
6688: PPUSH
6689: LD_EXP 37
6693: PUSH
6694: LD_VAR 0 4
6698: ARRAY
6699: PPUSH
6700: LD_EXP 37
6704: PUSH
6705: LD_VAR 0 4
6709: ARRAY
6710: PUSH
6711: LD_INT 1
6713: PLUS
6714: PPUSH
6715: LD_VAR 0 5
6719: PPUSH
6720: CALL_OW 1
6724: PPUSH
6725: CALL_OW 1
6729: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6730: LD_VAR 0 5
6734: PPUSH
6735: LD_EXP 40
6739: PUSH
6740: LD_VAR 0 4
6744: ARRAY
6745: PPUSH
6746: LD_INT 0
6748: PPUSH
6749: CALL_OW 49
// end ;
6753: GO 6598
6755: POP
6756: POP
// end ;
6757: GO 6580
6759: POP
6760: POP
// end ;
6761: LD_VAR 0 1
6765: RET
// export function PrepareApeman ; var bonus ; begin
6766: LD_INT 0
6768: PPUSH
6769: PPUSH
// uc_side := 0 ;
6770: LD_ADDR_OWVAR 20
6774: PUSH
6775: LD_INT 0
6777: ST_TO_ADDR
// uc_nation := 0 ;
6778: LD_ADDR_OWVAR 21
6782: PUSH
6783: LD_INT 0
6785: ST_TO_ADDR
// InitHc ;
6786: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6790: LD_ADDR_VAR 0 2
6794: PUSH
6795: LD_INT 1
6797: NEG
6798: PUSH
6799: LD_INT 0
6801: PUSH
6802: LD_INT 1
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: LIST
6809: PUSH
6810: LD_OWVAR 1
6814: PUSH
6815: LD_INT 3
6817: MOD
6818: PUSH
6819: LD_INT 1
6821: PLUS
6822: ARRAY
6823: ST_TO_ADDR
// hc_class := class_apeman ;
6824: LD_ADDR_OWVAR 28
6828: PUSH
6829: LD_INT 12
6831: ST_TO_ADDR
// hc_gallery :=  ;
6832: LD_ADDR_OWVAR 33
6836: PUSH
6837: LD_STRING 
6839: ST_TO_ADDR
// hc_name :=  ;
6840: LD_ADDR_OWVAR 26
6844: PUSH
6845: LD_STRING 
6847: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6848: LD_ADDR_OWVAR 31
6852: PUSH
6853: LD_EXP 39
6857: PUSH
6858: LD_VAR 0 2
6862: PLUS
6863: PUSH
6864: LD_EXP 39
6868: PUSH
6869: LD_VAR 0 2
6873: PLUS
6874: PUSH
6875: LD_EXP 39
6879: PUSH
6880: LD_VAR 0 2
6884: PLUS
6885: PUSH
6886: LD_EXP 39
6890: PUSH
6891: LD_VAR 0 2
6895: PLUS
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6903: LD_ADDR_OWVAR 35
6907: PUSH
6908: LD_INT 10
6910: PUSH
6911: LD_VAR 0 2
6915: MUL
6916: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6917: LD_ADDR_OWVAR 29
6921: PUSH
6922: LD_INT 12
6924: PUSH
6925: LD_INT 10
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: ST_TO_ADDR
// result := CreateHuman ;
6932: LD_ADDR_VAR 0 1
6936: PUSH
6937: CALL_OW 44
6941: ST_TO_ADDR
// end ;
6942: LD_VAR 0 1
6946: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6947: LD_INT 0
6949: PPUSH
6950: PPUSH
6951: PPUSH
// if not ape then
6952: LD_VAR 0 1
6956: NOT
6957: IFFALSE 6961
// exit ;
6959: GO 7086
// side := GetSide ( ape ) ;
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_VAR 0 1
6970: PPUSH
6971: CALL_OW 255
6975: ST_TO_ADDR
// if not side then
6976: LD_VAR 0 3
6980: NOT
6981: IFFALSE 7035
// begin for i = 1 to apemanPos do
6983: LD_ADDR_VAR 0 4
6987: PUSH
6988: DOUBLE
6989: LD_INT 1
6991: DEC
6992: ST_TO_ADDR
6993: LD_EXP 37
6997: PUSH
6998: FOR_TO
6999: IFFALSE 7033
// if ape in apemanPos [ i ] then
7001: LD_VAR 0 1
7005: PUSH
7006: LD_EXP 37
7010: PUSH
7011: LD_VAR 0 4
7015: ARRAY
7016: IN
7017: IFFALSE 7031
// begin side := i ;
7019: LD_ADDR_VAR 0 3
7023: PUSH
7024: LD_VAR 0 4
7028: ST_TO_ADDR
// break ;
7029: GO 7033
// end ;
7031: GO 6998
7033: POP
7034: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7035: LD_ADDR_EXP 37
7039: PUSH
7040: LD_EXP 37
7044: PPUSH
7045: LD_VAR 0 3
7049: PPUSH
7050: LD_EXP 37
7054: PUSH
7055: LD_VAR 0 3
7059: ARRAY
7060: PUSH
7061: LD_VAR 0 1
7065: DIFF
7066: PPUSH
7067: CALL_OW 1
7071: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7072: LD_ADDR_EXP 34
7076: PUSH
7077: LD_EXP 34
7081: PUSH
7082: LD_INT 1
7084: MINUS
7085: ST_TO_ADDR
// end ; end_of_file
7086: LD_VAR 0 2
7090: RET
// var respawn , inqueue ; export function init_respawning ; begin
7091: LD_INT 0
7093: PPUSH
// respawn := Rand ( 1 , 8 ) ;
7094: LD_ADDR_LOC 9
7098: PUSH
7099: LD_INT 1
7101: PPUSH
7102: LD_INT 8
7104: PPUSH
7105: CALL_OW 12
7109: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7110: LD_ADDR_LOC 10
7114: PUSH
7115: LD_INT 0
7117: PUSH
7118: LD_INT 0
7120: PUSH
7121: LD_INT 0
7123: PUSH
7124: LD_INT 0
7126: PUSH
7127: LD_INT 0
7129: PUSH
7130: LD_INT 0
7132: PUSH
7133: LD_INT 0
7135: PUSH
7136: LD_INT 0
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: ST_TO_ADDR
// end ;
7149: LD_VAR 0 1
7153: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
7154: GO 7156
7156: DISABLE
7157: LD_INT 0
7159: PPUSH
7160: PPUSH
7161: PPUSH
7162: PPUSH
// begin if respawning_time_max = 0 then
7163: LD_EXP 13
7167: PUSH
7168: LD_INT 0
7170: EQUAL
7171: IFFALSE 7175
// exit ;
7173: GO 7682
// if respawn = 8 then
7175: LD_LOC 9
7179: PUSH
7180: LD_INT 8
7182: EQUAL
7183: IFFALSE 7195
// respawn := 1 else
7185: LD_ADDR_LOC 9
7189: PUSH
7190: LD_INT 1
7192: ST_TO_ADDR
7193: GO 7209
// respawn := respawn + 1 ;
7195: LD_ADDR_LOC 9
7199: PUSH
7200: LD_LOC 9
7204: PUSH
7205: LD_INT 1
7207: PLUS
7208: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
7209: LD_EXP 19
7213: PUSH
7214: LD_LOC 9
7218: ARRAY
7219: PUSH
7220: LD_LOC 10
7224: PUSH
7225: LD_LOC 9
7229: ARRAY
7230: NOT
7231: AND
7232: IFFALSE 7681
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
7234: LD_ADDR_VAR 0 1
7238: PUSH
7239: LD_INT 21
7241: PUSH
7242: LD_INT 1
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 22
7251: PUSH
7252: LD_LOC 9
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 3
7263: PUSH
7264: LD_INT 23
7266: PUSH
7267: LD_INT 0
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 69
7284: ST_TO_ADDR
// if n < number_of_people then
7285: LD_VAR 0 1
7289: PUSH
7290: LD_EXP 5
7294: LESS
7295: IFFALSE 7678
// begin aktresp := respawn ;
7297: LD_ADDR_VAR 0 3
7301: PUSH
7302: LD_LOC 9
7306: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7307: LD_ADDR_LOC 10
7311: PUSH
7312: LD_LOC 10
7316: PPUSH
7317: LD_VAR 0 3
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 1
7329: ST_TO_ADDR
// enable ;
7330: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7331: LD_EXP 12
7335: PPUSH
7336: LD_EXP 13
7340: PPUSH
7341: CALL_OW 12
7345: PPUSH
7346: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7350: LD_ADDR_LOC 10
7354: PUSH
7355: LD_LOC 10
7359: PPUSH
7360: LD_VAR 0 3
7364: PPUSH
7365: LD_INT 0
7367: PPUSH
7368: CALL_OW 1
7372: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7373: LD_ADDR_VAR 0 2
7377: PUSH
7378: LD_INT 21
7380: PUSH
7381: LD_INT 3
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 2
7390: PUSH
7391: LD_INT 30
7393: PUSH
7394: LD_INT 0
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: PUSH
7401: LD_INT 30
7403: PUSH
7404: LD_INT 1
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: LIST
7415: PUSH
7416: LD_INT 50
7418: PUSH
7419: EMPTY
7420: LIST
7421: PUSH
7422: LD_INT 22
7424: PUSH
7425: LD_VAR 0 3
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 69
7444: ST_TO_ADDR
// if building_list = 0 then
7445: LD_VAR 0 2
7449: PUSH
7450: LD_INT 0
7452: EQUAL
7453: IFFALSE 7498
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7455: LD_ADDR_VAR 0 2
7459: PUSH
7460: LD_INT 21
7462: PUSH
7463: LD_INT 3
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PUSH
7470: LD_INT 50
7472: PUSH
7473: EMPTY
7474: LIST
7475: PUSH
7476: LD_INT 22
7478: PUSH
7479: LD_VAR 0 3
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 69
7497: ST_TO_ADDR
// if building_list = 0 then
7498: LD_VAR 0 2
7502: PUSH
7503: LD_INT 0
7505: EQUAL
7506: IFFALSE 7510
// exit ;
7508: GO 7682
// hc_name :=  ;
7510: LD_ADDR_OWVAR 26
7514: PUSH
7515: LD_STRING 
7517: ST_TO_ADDR
// hc_importance := 0 ;
7518: LD_ADDR_OWVAR 32
7522: PUSH
7523: LD_INT 0
7525: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7526: LD_INT 0
7528: PPUSH
7529: LD_INT 0
7531: PPUSH
7532: LD_EXP 6
7536: PUSH
7537: LD_INT 2
7539: DIV
7540: PPUSH
7541: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7545: LD_ADDR_OWVAR 21
7549: PUSH
7550: LD_EXP 20
7554: PUSH
7555: LD_VAR 0 3
7559: ARRAY
7560: ST_TO_ADDR
// uc_side := aktresp ;
7561: LD_ADDR_OWVAR 20
7565: PUSH
7566: LD_VAR 0 3
7570: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
7571: LD_ADDR_VAR 0 4
7575: PUSH
7576: LD_VAR 0 2
7580: PUSH
7581: LD_INT 1
7583: PPUSH
7584: LD_VAR 0 2
7588: PUSH
7589: LD_INT 0
7591: PLUS
7592: PPUSH
7593: CALL_OW 12
7597: ARRAY
7598: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
7599: LD_VAR 0 4
7603: PPUSH
7604: CALL_OW 266
7608: PUSH
7609: LD_INT 0
7611: PUSH
7612: LD_INT 1
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: IN
7619: IFFALSE 7631
// n = 25 else
7621: LD_ADDR_VAR 0 1
7625: PUSH
7626: LD_INT 25
7628: ST_TO_ADDR
7629: GO 7639
// n = 10 ;
7631: LD_ADDR_VAR 0 1
7635: PUSH
7636: LD_INT 10
7638: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
7639: CALL_OW 44
7643: PPUSH
7644: LD_VAR 0 4
7648: PPUSH
7649: CALL_OW 250
7653: PPUSH
7654: LD_VAR 0 4
7658: PPUSH
7659: CALL_OW 251
7663: PPUSH
7664: LD_VAR 0 1
7668: PPUSH
7669: LD_INT 1
7671: PPUSH
7672: CALL_OW 50
// end else
7676: GO 7679
// enable ;
7678: ENABLE
// end else
7679: GO 7682
// enable ;
7681: ENABLE
// end ; end_of_file
7682: PPOPN 4
7684: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7685: LD_VAR 0 1
7689: PPUSH
7690: CALL_OW 266
7694: PUSH
7695: LD_INT 0
7697: PUSH
7698: LD_INT 1
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: IN
7705: IFFALSE 7730
// SetBName ( b , @ & GetSide ( b ) ) ;
7707: LD_VAR 0 1
7711: PPUSH
7712: LD_STRING @
7714: PUSH
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 255
7724: STR
7725: PPUSH
7726: CALL_OW 500
// if def_game_rules then
7730: LD_EXP 43
7734: IFFALSE 7771
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7736: LD_VAR 0 1
7740: PPUSH
7741: LD_VAR 0 1
7745: PPUSH
7746: CALL_OW 266
7750: PPUSH
7751: LD_VAR 0 1
7755: PPUSH
7756: CALL_OW 255
7760: PPUSH
7761: LD_INT 0
7763: PPUSH
7764: LD_INT 1
7766: PPUSH
7767: CALL 13177 0 5
// end ;
7771: PPOPN 2
7773: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7774: LD_VAR 0 1
7778: PPUSH
7779: CALL_OW 266
7783: PUSH
7784: LD_INT 0
7786: PUSH
7787: LD_INT 1
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: IN
7794: IFFALSE 7819
// SetBName ( b , @ & GetSide ( b ) ) ;
7796: LD_VAR 0 1
7800: PPUSH
7801: LD_STRING @
7803: PUSH
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 255
7813: STR
7814: PPUSH
7815: CALL_OW 500
// if def_game_rules then
7819: LD_EXP 43
7823: IFFALSE 7862
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7825: LD_VAR 0 1
7829: PPUSH
7830: LD_VAR 0 1
7834: PPUSH
7835: CALL_OW 266
7839: PPUSH
7840: LD_VAR 0 1
7844: PPUSH
7845: CALL_OW 255
7849: PPUSH
7850: LD_VAR 0 2
7854: PPUSH
7855: LD_INT 1
7857: PPUSH
7858: CALL 13177 0 5
// end ;
7862: PPOPN 3
7864: END
// on VehicleConstructed ( veh , fac ) do var side ;
7865: LD_INT 0
7867: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7868: LD_VAR 0 1
7872: PPUSH
7873: CALL_OW 263
7877: PUSH
7878: LD_INT 5
7880: EQUAL
7881: IFFALSE 8023
// begin side := GetSide ( veh ) ;
7883: LD_ADDR_VAR 0 3
7887: PUSH
7888: LD_VAR 0 1
7892: PPUSH
7893: CALL_OW 255
7897: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7898: LD_ADDR_EXP 37
7902: PUSH
7903: LD_EXP 37
7907: PPUSH
7908: LD_VAR 0 3
7912: PPUSH
7913: LD_EXP 37
7917: PUSH
7918: LD_VAR 0 3
7922: ARRAY
7923: PPUSH
7924: LD_INT 52
7926: PUSH
7927: EMPTY
7928: LIST
7929: PPUSH
7930: CALL_OW 72
7934: PUSH
7935: LD_INT 22
7937: PUSH
7938: LD_VAR 0 3
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 2
7949: PUSH
7950: LD_INT 33
7952: PUSH
7953: LD_INT 5
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: PUSH
7960: LD_INT 25
7962: PUSH
7963: LD_INT 12
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: PUSH
7970: LD_INT 25
7972: PUSH
7973: LD_INT 15
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_INT 25
7982: PUSH
7983: LD_INT 16
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_INT 25
7992: PUSH
7993: LD_INT 17
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PPUSH
8012: CALL_OW 69
8016: UNION
8017: PPUSH
8018: CALL_OW 1
8022: ST_TO_ADDR
// end ; end ;
8023: PPOPN 3
8025: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
8026: LD_INT 0
8028: PPUSH
8029: PPUSH
8030: PPUSH
8031: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
8032: LD_VAR 0 1
8036: PPUSH
8037: CALL_OW 257
8041: PUSH
8042: LD_INT 12
8044: PUSH
8045: LD_INT 15
8047: PUSH
8048: LD_INT 17
8050: PUSH
8051: LD_INT 16
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: IN
8060: PUSH
8061: LD_VAR 0 1
8065: PPUSH
8066: CALL_OW 263
8070: PUSH
8071: LD_INT 5
8073: EQUAL
8074: OR
8075: IFFALSE 8086
// ApeKilled ( j ) ;
8077: LD_VAR 0 1
8081: PPUSH
8082: CALL 6947 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 266
8095: PUSH
8096: LD_INT 0
8098: PUSH
8099: LD_INT 1
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: IN
8106: IFFALSE 8188
// begin pos := Side_Positions [ GetSide ( j ) ] ;
8108: LD_ADDR_VAR 0 4
8112: PUSH
8113: LD_EXP 19
8117: PUSH
8118: LD_VAR 0 1
8122: PPUSH
8123: CALL_OW 255
8127: ARRAY
8128: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
8129: LD_ADDR_VAR 0 2
8133: PUSH
8134: LD_EXP 26
8138: PUSH
8139: LD_VAR 0 4
8143: ARRAY
8144: PUSH
8145: LD_INT 1
8147: ARRAY
8148: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
8149: LD_ADDR_VAR 0 3
8153: PUSH
8154: LD_EXP 26
8158: PUSH
8159: LD_VAR 0 4
8163: ARRAY
8164: PUSH
8165: LD_INT 2
8167: ARRAY
8168: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
8169: LD_VAR 0 2
8173: PPUSH
8174: LD_VAR 0 3
8178: PPUSH
8179: CALL_OW 420
8183: PPUSH
8184: CALL_OW 419
// end ; if def_game_rules then
8188: LD_EXP 43
8192: IFFALSE 8291
// if ( GetType ( j ) = 3 ) then
8194: LD_VAR 0 1
8198: PPUSH
8199: CALL_OW 247
8203: PUSH
8204: LD_INT 3
8206: EQUAL
8207: IFFALSE 8247
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8209: LD_VAR 0 1
8213: PPUSH
8214: LD_VAR 0 1
8218: PPUSH
8219: CALL_OW 266
8223: PPUSH
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 255
8233: PPUSH
8234: LD_INT 0
8236: PPUSH
8237: LD_INT 1
8239: NEG
8240: PPUSH
8241: CALL 13177 0 5
8245: GO 8291
// if ( GetChassis ( j ) = 25 ) then
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 265
8256: PUSH
8257: LD_INT 25
8259: EQUAL
8260: IFFALSE 8291
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8262: LD_VAR 0 1
8266: PPUSH
8267: LD_INT 37
8269: PPUSH
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 255
8279: PPUSH
8280: LD_INT 0
8282: PPUSH
8283: LD_INT 1
8285: NEG
8286: PPUSH
8287: CALL 13177 0 5
// end ;
8291: PPOPN 5
8293: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8294: LD_EXP 43
8298: PUSH
8299: LD_VAR 0 1
8303: PPUSH
8304: CALL_OW 265
8308: PUSH
8309: LD_INT 25
8311: EQUAL
8312: AND
8313: IFFALSE 8345
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8315: LD_VAR 0 1
8319: PPUSH
8320: LD_INT 37
8322: PPUSH
8323: LD_VAR 0 1
8327: PPUSH
8328: CALL_OW 255
8332: PPUSH
8333: LD_VAR 0 3
8337: PPUSH
8338: LD_INT 1
8340: PPUSH
8341: CALL 13177 0 5
// end ;
8345: PPOPN 4
8347: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8348: LD_VAR 0 1
8352: PPUSH
8353: LD_VAR 0 2
8357: PPUSH
8358: LD_VAR 0 3
8362: PPUSH
8363: LD_OWVAR 2
8367: PPUSH
8368: CALL 13948 0 4
8372: PPOPN 3
8374: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8375: GO 8377
8377: DISABLE
8378: LD_INT 0
8380: PPUSH
8381: PPUSH
8382: PPUSH
8383: PPUSH
8384: PPUSH
// begin sib_mined := [ ] ;
8385: LD_ADDR_VAR 0 5
8389: PUSH
8390: EMPTY
8391: ST_TO_ADDR
// for i := 1 to 8 do
8392: LD_ADDR_VAR 0 1
8396: PUSH
8397: DOUBLE
8398: LD_INT 1
8400: DEC
8401: ST_TO_ADDR
8402: LD_INT 8
8404: PUSH
8405: FOR_TO
8406: IFFALSE 8562
// if Side_Positions [ i ] then
8408: LD_EXP 19
8412: PUSH
8413: LD_VAR 0 1
8417: ARRAY
8418: IFFALSE 8546
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8420: LD_ADDR_VAR 0 4
8424: PUSH
8425: LD_INT 22
8427: PUSH
8428: LD_VAR 0 1
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: LD_INT 2
8439: PUSH
8440: LD_INT 30
8442: PUSH
8443: LD_INT 0
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PUSH
8450: LD_INT 30
8452: PUSH
8453: LD_INT 1
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: LIST
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PPUSH
8469: CALL_OW 69
8473: ST_TO_ADDR
// pom := 0 ;
8474: LD_ADDR_VAR 0 3
8478: PUSH
8479: LD_INT 0
8481: ST_TO_ADDR
// for base in filter do
8482: LD_ADDR_VAR 0 2
8486: PUSH
8487: LD_VAR 0 4
8491: PUSH
8492: FOR_IN
8493: IFFALSE 8526
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8495: LD_ADDR_VAR 0 3
8499: PUSH
8500: LD_VAR 0 3
8504: PUSH
8505: LD_VAR 0 2
8509: PPUSH
8510: CALL_OW 274
8514: PPUSH
8515: LD_INT 3
8517: PPUSH
8518: CALL_OW 275
8522: PLUS
8523: ST_TO_ADDR
8524: GO 8492
8526: POP
8527: POP
// sib_mined := sib_mined ^ pom ;
8528: LD_ADDR_VAR 0 5
8532: PUSH
8533: LD_VAR 0 5
8537: PUSH
8538: LD_VAR 0 3
8542: ADD
8543: ST_TO_ADDR
// end else
8544: GO 8560
// sib_mined := sib_mined ^ 0 ;
8546: LD_ADDR_VAR 0 5
8550: PUSH
8551: LD_VAR 0 5
8555: PUSH
8556: LD_INT 0
8558: ADD
8559: ST_TO_ADDR
8560: GO 8405
8562: POP
8563: POP
// if not def_public_score then
8564: LD_EXP 2
8568: NOT
8569: IFFALSE 8659
// begin ExtraStrings := [ ] ;
8571: LD_ADDR_EXP 59
8575: PUSH
8576: EMPTY
8577: ST_TO_ADDR
// for i := 1 to 8 do
8578: LD_ADDR_VAR 0 1
8582: PUSH
8583: DOUBLE
8584: LD_INT 1
8586: DEC
8587: ST_TO_ADDR
8588: LD_INT 8
8590: PUSH
8591: FOR_TO
8592: IFFALSE 8655
// if Side_Positions [ i ] then
8594: LD_EXP 19
8598: PUSH
8599: LD_VAR 0 1
8603: ARRAY
8604: IFFALSE 8653
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8606: LD_ADDR_EXP 59
8610: PUSH
8611: LD_EXP 59
8615: PUSH
8616: LD_STRING #AlienBase-MinedPublic
8618: PUSH
8619: LD_VAR 0 1
8623: PUSH
8624: LD_VAR 0 1
8628: PUSH
8629: LD_VAR 0 5
8633: PUSH
8634: LD_VAR 0 1
8638: ARRAY
8639: PUSH
8640: LD_EXP 11
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: ADD
8652: ST_TO_ADDR
8653: GO 8591
8655: POP
8656: POP
// end else
8657: GO 8688
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8659: LD_ADDR_EXP 59
8663: PUSH
8664: LD_STRING #AlienBase-Mined
8666: PUSH
8667: LD_VAR 0 5
8671: PUSH
8672: LD_OWVAR 2
8676: ARRAY
8677: PUSH
8678: LD_EXP 11
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: LIST
8687: ST_TO_ADDR
// for i := 1 to 8 do
8688: LD_ADDR_VAR 0 1
8692: PUSH
8693: DOUBLE
8694: LD_INT 1
8696: DEC
8697: ST_TO_ADDR
8698: LD_INT 8
8700: PUSH
8701: FOR_TO
8702: IFFALSE 8772
// if sib_mined [ i ] >= amount_of_siberit then
8704: LD_VAR 0 5
8708: PUSH
8709: LD_VAR 0 1
8713: ARRAY
8714: PUSH
8715: LD_EXP 11
8719: GREATEREQUAL
8720: IFFALSE 8770
// begin wait ( 0 0$1 ) ;
8722: LD_INT 35
8724: PPUSH
8725: CALL_OW 67
// if IAmServer then
8729: CALL_OW 518
8733: IFFALSE 8742
// wait ( 0 0$1 ) ;
8735: LD_INT 35
8737: PPUSH
8738: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8742: LD_VAR 0 5
8746: PUSH
8747: LD_OWVAR 2
8751: ARRAY
8752: PUSH
8753: LD_EXP 11
8757: GREATEREQUAL
8758: IFFALSE 8766
// YouWinInMultiplayer else
8760: CALL_OW 106
8764: GO 8770
// YouLostInMultiplayer ;
8766: CALL_OW 107
// end ;
8770: GO 8701
8772: POP
8773: POP
// enable ;
8774: ENABLE
// end ; end_of_file
8775: PPOPN 5
8777: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8778: LD_INT 0
8780: PPUSH
8781: PPUSH
// for un in battle_flags_id do
8782: LD_ADDR_VAR 0 2
8786: PUSH
8787: LD_EXP 31
8791: PUSH
8792: FOR_IN
8793: IFFALSE 8868
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8795: LD_VAR 0 2
8799: PPUSH
8800: LD_INT 1
8802: PUSH
8803: LD_LOC 11
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 2
8814: PUSH
8815: LD_LOC 11
8819: PUSH
8820: LD_INT 2
8822: DIV
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: LD_LOC 11
8835: PUSH
8836: LD_INT 5
8838: DIV
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 20
8846: PUSH
8847: LD_LOC 11
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 423
8866: GO 8792
8868: POP
8869: POP
// end ;
8870: LD_VAR 0 1
8874: RET
// every 1 do var un ;
8875: GO 8877
8877: DISABLE
8878: LD_INT 0
8880: PPUSH
// begin if not def_morale_flags then
8881: LD_EXP 52
8885: NOT
8886: IFFALSE 8890
// exit ;
8888: GO 8967
// if not morale_decreasing_time then
8890: LD_EXP 10
8894: NOT
8895: IFFALSE 8899
// exit ;
8897: GO 8967
// strength = 100 ;
8899: LD_ADDR_LOC 11
8903: PUSH
8904: LD_INT 100
8906: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8907: LD_EXP 10
8911: PPUSH
8912: CALL_OW 67
// strength := strength - 1 ;
8916: LD_ADDR_LOC 11
8920: PUSH
8921: LD_LOC 11
8925: PUSH
8926: LD_INT 1
8928: MINUS
8929: ST_TO_ADDR
// Update_Flags ;
8930: CALL 8778 0 0
// until not strength ;
8934: LD_LOC 11
8938: NOT
8939: IFFALSE 8907
// for un in battle_flags_id do
8941: LD_ADDR_VAR 0 1
8945: PUSH
8946: LD_EXP 31
8950: PUSH
8951: FOR_IN
8952: IFFALSE 8965
// KillBattleFlag ( un ) ;
8954: LD_VAR 0 1
8958: PPUSH
8959: CALL_OW 419
8963: GO 8951
8965: POP
8966: POP
// end ; end_of_file
8967: PPOPN 1
8969: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8970: LD_INT 0
8972: PPUSH
8973: PPUSH
8974: PPUSH
// enable ( 600 ) ;
8975: LD_INT 600
8977: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8978: LD_ADDR_VAR 0 2
8982: PUSH
8983: DOUBLE
8984: LD_INT 1
8986: DEC
8987: ST_TO_ADDR
8988: LD_EXP 41
8992: PUSH
8993: FOR_TO
8994: IFFALSE 9149
// if Position_Sides [ i ] then
8996: LD_EXP 23
9000: PUSH
9001: LD_VAR 0 2
9005: ARRAY
9006: IFFALSE 9147
// for j := 1 to 8 do
9008: LD_ADDR_VAR 0 3
9012: PUSH
9013: DOUBLE
9014: LD_INT 1
9016: DEC
9017: ST_TO_ADDR
9018: LD_INT 8
9020: PUSH
9021: FOR_TO
9022: IFFALSE 9145
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9024: LD_EXP 19
9028: PUSH
9029: LD_VAR 0 3
9033: ARRAY
9034: PUSH
9035: LD_EXP 17
9039: PUSH
9040: LD_EXP 23
9044: PUSH
9045: LD_VAR 0 2
9049: ARRAY
9050: ARRAY
9051: PUSH
9052: LD_EXP 17
9056: PUSH
9057: LD_VAR 0 3
9061: ARRAY
9062: NONEQUAL
9063: PUSH
9064: LD_EXP 21
9068: NOT
9069: PUSH
9070: LD_EXP 23
9074: PUSH
9075: LD_VAR 0 2
9079: ARRAY
9080: PUSH
9081: LD_VAR 0 3
9085: NONEQUAL
9086: AND
9087: OR
9088: AND
9089: IFFALSE 9113
// HideArea ( j , BuildUpAreas [ i ] ) else
9091: LD_VAR 0 3
9095: PPUSH
9096: LD_EXP 41
9100: PUSH
9101: LD_VAR 0 2
9105: ARRAY
9106: PPUSH
9107: CALL_OW 333
9111: GO 9143
// if ( j = your_side ) then
9113: LD_VAR 0 3
9117: PUSH
9118: LD_OWVAR 2
9122: EQUAL
9123: IFFALSE 9143
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
9125: LD_EXP 41
9129: PUSH
9130: LD_VAR 0 2
9134: ARRAY
9135: PPUSH
9136: LD_INT 5
9138: PPUSH
9139: CALL_OW 424
9143: GO 9021
9145: POP
9146: POP
9147: GO 8993
9149: POP
9150: POP
// end ;
9151: LD_VAR 0 1
9155: RET
// export function EndBuildUp ; var i , j ; begin
9156: LD_INT 0
9158: PPUSH
9159: PPUSH
9160: PPUSH
// disable ( 600 ) ;
9161: LD_INT 600
9163: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
9164: LD_ADDR_VAR 0 2
9168: PUSH
9169: DOUBLE
9170: LD_INT 1
9172: DEC
9173: ST_TO_ADDR
9174: LD_EXP 41
9178: PUSH
9179: FOR_TO
9180: IFFALSE 9335
// if Position_Sides [ i ] then
9182: LD_EXP 23
9186: PUSH
9187: LD_VAR 0 2
9191: ARRAY
9192: IFFALSE 9333
// for j := 1 to 8 do
9194: LD_ADDR_VAR 0 3
9198: PUSH
9199: DOUBLE
9200: LD_INT 1
9202: DEC
9203: ST_TO_ADDR
9204: LD_INT 8
9206: PUSH
9207: FOR_TO
9208: IFFALSE 9331
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9210: LD_EXP 19
9214: PUSH
9215: LD_VAR 0 3
9219: ARRAY
9220: PUSH
9221: LD_EXP 17
9225: PUSH
9226: LD_EXP 23
9230: PUSH
9231: LD_VAR 0 2
9235: ARRAY
9236: ARRAY
9237: PUSH
9238: LD_EXP 17
9242: PUSH
9243: LD_VAR 0 3
9247: ARRAY
9248: NONEQUAL
9249: PUSH
9250: LD_EXP 21
9254: NOT
9255: PUSH
9256: LD_EXP 23
9260: PUSH
9261: LD_VAR 0 2
9265: ARRAY
9266: PUSH
9267: LD_VAR 0 3
9271: NONEQUAL
9272: AND
9273: OR
9274: AND
9275: IFFALSE 9299
// ShowArea ( j , BuildUpAreas [ i ] ) else
9277: LD_VAR 0 3
9281: PPUSH
9282: LD_EXP 41
9286: PUSH
9287: LD_VAR 0 2
9291: ARRAY
9292: PPUSH
9293: CALL_OW 334
9297: GO 9329
// if ( j = your_side ) then
9299: LD_VAR 0 3
9303: PUSH
9304: LD_OWVAR 2
9308: EQUAL
9309: IFFALSE 9329
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9311: LD_EXP 41
9315: PUSH
9316: LD_VAR 0 2
9320: ARRAY
9321: PPUSH
9322: LD_INT 0
9324: PPUSH
9325: CALL_OW 424
9329: GO 9207
9331: POP
9332: POP
9333: GO 9179
9335: POP
9336: POP
// end ;
9337: LD_VAR 0 1
9341: RET
// every 5 marked 600 do var i , un ;
9342: GO 9344
9344: DISABLE
9345: LD_INT 0
9347: PPUSH
9348: PPUSH
// begin for i := 1 to BuildUpAreas do
9349: LD_ADDR_VAR 0 1
9353: PUSH
9354: DOUBLE
9355: LD_INT 1
9357: DEC
9358: ST_TO_ADDR
9359: LD_EXP 41
9363: PUSH
9364: FOR_TO
9365: IFFALSE 9520
// if Position_Sides [ i ] then
9367: LD_EXP 23
9371: PUSH
9372: LD_VAR 0 1
9376: ARRAY
9377: IFFALSE 9518
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9379: LD_ADDR_VAR 0 2
9383: PUSH
9384: LD_EXP 41
9388: PUSH
9389: LD_VAR 0 1
9393: ARRAY
9394: PPUSH
9395: LD_INT 2
9397: PUSH
9398: LD_INT 21
9400: PUSH
9401: LD_INT 1
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 21
9410: PUSH
9411: LD_INT 2
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: PUSH
9423: LD_INT 22
9425: PUSH
9426: LD_OWVAR 2
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PPUSH
9439: CALL_OW 70
9443: PUSH
9444: FOR_IN
9445: IFFALSE 9516
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9447: LD_EXP 17
9451: PUSH
9452: LD_EXP 23
9456: PUSH
9457: LD_VAR 0 1
9461: ARRAY
9462: ARRAY
9463: PUSH
9464: LD_EXP 17
9468: PUSH
9469: LD_OWVAR 2
9473: ARRAY
9474: NONEQUAL
9475: PUSH
9476: LD_EXP 21
9480: NOT
9481: PUSH
9482: LD_EXP 23
9486: PUSH
9487: LD_VAR 0 1
9491: ARRAY
9492: PUSH
9493: LD_OWVAR 2
9497: NONEQUAL
9498: AND
9499: OR
9500: IFFALSE 9514
// ComMoveToArea ( un , BuildUpEscape ) ;
9502: LD_VAR 0 2
9506: PPUSH
9507: LD_INT 14
9509: PPUSH
9510: CALL_OW 113
9514: GO 9444
9516: POP
9517: POP
9518: GO 9364
9520: POP
9521: POP
// enable ;
9522: ENABLE
// end ;
9523: PPOPN 2
9525: END
// every 1 do
9526: GO 9528
9528: DISABLE
// if ( def_builduptime > 0 ) then
9529: LD_EXP 57
9533: PUSH
9534: LD_INT 0
9536: GREATER
9537: IFFALSE 9552
// begin wait ( buildUpTime_Delay ) ;
9539: LD_EXP 14
9543: PPUSH
9544: CALL_OW 67
// EndBuildUp ;
9548: CALL 9156 0 0
// end ; end_of_file
9552: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
9553: GO 9555
9555: DISABLE
9556: LD_INT 0
9558: PPUSH
// begin enable ;
9559: ENABLE
// for x := 1 to 8 do
9560: LD_ADDR_VAR 0 1
9564: PUSH
9565: DOUBLE
9566: LD_INT 1
9568: DEC
9569: ST_TO_ADDR
9570: LD_INT 8
9572: PUSH
9573: FOR_TO
9574: IFFALSE 9658
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
9576: LD_LOC 18
9580: PUSH
9581: LD_VAR 0 1
9585: ARRAY
9586: PUSH
9587: LD_INT 5
9589: GREATER
9590: PUSH
9591: LD_LOC 16
9595: PUSH
9596: LD_VAR 0 1
9600: ARRAY
9601: PUSH
9602: LD_INT 1
9604: NEG
9605: EQUAL
9606: AND
9607: IFFALSE 9656
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
9609: LD_ADDR_LOC 17
9613: PUSH
9614: LD_LOC 17
9618: PPUSH
9619: LD_VAR 0 1
9623: PPUSH
9624: LD_LOC 17
9628: PUSH
9629: LD_VAR 0 1
9633: ARRAY
9634: PUSH
9635: LD_INT 6
9637: PLUS
9638: PPUSH
9639: CALL_OW 1
9643: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
9644: LD_VAR 0 1
9648: PPUSH
9649: LD_INT 0
9651: PPUSH
9652: CALL 9830 0 2
// end ;
9656: GO 9573
9658: POP
9659: POP
// end ;
9660: PPOPN 1
9662: END
// every 0 0$1 marked 200 do var BGL , x ;
9663: GO 9665
9665: DISABLE
9666: LD_INT 0
9668: PPUSH
9669: PPUSH
// begin enable ;
9670: ENABLE
// for x := 1 to 8 do
9671: LD_ADDR_VAR 0 2
9675: PUSH
9676: DOUBLE
9677: LD_INT 1
9679: DEC
9680: ST_TO_ADDR
9681: LD_INT 8
9683: PUSH
9684: FOR_TO
9685: IFFALSE 9816
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
9687: LD_LOC 16
9691: PUSH
9692: LD_VAR 0 2
9696: ARRAY
9697: PUSH
9698: LD_INT 1
9700: NEG
9701: GREATER
9702: PUSH
9703: LD_LOC 16
9707: PUSH
9708: LD_VAR 0 2
9712: ARRAY
9713: PPUSH
9714: CALL_OW 300
9718: AND
9719: IFFALSE 9814
// begin BGL := GetLives ( BloodGods [ x ] ) ;
9721: LD_ADDR_VAR 0 1
9725: PUSH
9726: LD_LOC 16
9730: PUSH
9731: LD_VAR 0 2
9735: ARRAY
9736: PPUSH
9737: CALL_OW 256
9741: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
9742: LD_VAR 0 1
9746: PUSH
9747: LD_INT 1000
9749: LESS
9750: PUSH
9751: LD_VAR 0 1
9755: PUSH
9756: LD_INT 100
9758: GREATER
9759: AND
9760: IFFALSE 9814
// begin BGL := BGL + 10 ;
9762: LD_ADDR_VAR 0 1
9766: PUSH
9767: LD_VAR 0 1
9771: PUSH
9772: LD_INT 10
9774: PLUS
9775: ST_TO_ADDR
// if BGL > 1000 then
9776: LD_VAR 0 1
9780: PUSH
9781: LD_INT 1000
9783: GREATER
9784: IFFALSE 9794
// BGL := 1000 ;
9786: LD_ADDR_VAR 0 1
9790: PUSH
9791: LD_INT 1000
9793: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
9794: LD_LOC 16
9798: PUSH
9799: LD_VAR 0 2
9803: ARRAY
9804: PPUSH
9805: LD_VAR 0 1
9809: PPUSH
9810: CALL_OW 234
// end ; end ;
9814: GO 9684
9816: POP
9817: POP
// end ;
9818: PPOPN 2
9820: END
// every 0 0$1 marked 200 do
9821: GO 9823
9823: DISABLE
// begin DisplayTimeWithKills ;
9824: CALL 10071 0 0
// enable ;
9828: ENABLE
// end ;
9829: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
9830: LD_INT 0
9832: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
9833: LD_ADDR_OWVAR 24
9837: PUSH
9838: LD_INT 0
9840: PPUSH
9841: LD_INT 5
9843: PPUSH
9844: CALL_OW 12
9848: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
9849: LD_INT 1
9851: PPUSH
9852: LD_INT 1
9854: PPUSH
9855: LD_INT 15
9857: PPUSH
9858: CALL_OW 380
// hc_importance := 106 ;
9862: LD_ADDR_OWVAR 32
9866: PUSH
9867: LD_INT 106
9869: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
9870: LD_ADDR_OWVAR 26
9874: PUSH
9875: LD_STRING Blood God of 
9877: PUSH
9878: LD_OWVAR 19
9882: PUSH
9883: LD_VAR 0 1
9887: ARRAY
9888: STR
9889: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
9890: LD_ADDR_OWVAR 21
9894: PUSH
9895: LD_EXP 20
9899: PUSH
9900: LD_VAR 0 1
9904: ARRAY
9905: ST_TO_ADDR
// uc_side := side ;
9906: LD_ADDR_OWVAR 20
9910: PUSH
9911: LD_VAR 0 1
9915: ST_TO_ADDR
// hc_noskilllimit := true ;
9916: LD_ADDR_OWVAR 76
9920: PUSH
9921: LD_INT 1
9923: ST_TO_ADDR
// hc_agressivity := 50 ;
9924: LD_ADDR_OWVAR 35
9928: PUSH
9929: LD_INT 50
9931: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
9932: LD_ADDR_LOC 16
9936: PUSH
9937: LD_LOC 16
9941: PPUSH
9942: LD_VAR 0 1
9946: PPUSH
9947: CALL_OW 44
9951: PPUSH
9952: CALL_OW 1
9956: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
9957: LD_LOC 16
9961: PUSH
9962: LD_VAR 0 1
9966: ARRAY
9967: PPUSH
9968: LD_LOC 19
9972: PUSH
9973: LD_EXP 19
9977: PUSH
9978: LD_VAR 0 1
9982: ARRAY
9983: ARRAY
9984: PUSH
9985: LD_INT 1
9987: ARRAY
9988: PPUSH
9989: LD_LOC 19
9993: PUSH
9994: LD_EXP 19
9998: PUSH
9999: LD_VAR 0 1
10003: ARRAY
10004: ARRAY
10005: PUSH
10006: LD_INT 2
10008: ARRAY
10009: PPUSH
10010: LD_INT 10
10012: PPUSH
10013: LD_INT 0
10015: PPUSH
10016: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
10020: LD_LOC 16
10024: PUSH
10025: LD_VAR 0 1
10029: ARRAY
10030: PPUSH
10031: LD_INT 1
10033: PPUSH
10034: LD_INT 300
10036: PPUSH
10037: CALL_OW 239
// if not NoDialog then
10041: LD_VAR 0 2
10045: NOT
10046: IFFALSE 10066
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
10048: LD_LOC 16
10052: PUSH
10053: LD_VAR 0 1
10057: ARRAY
10058: PPUSH
10059: LD_STRING DLAwaken
10061: PPUSH
10062: CALL_OW 94
// end ;
10066: LD_VAR 0 3
10070: RET
// function DisplayTimeWithKills ; var x ; begin
10071: LD_INT 0
10073: PPUSH
10074: PPUSH
// ExtraStrings :=  ;
10075: LD_ADDR_EXP 59
10079: PUSH
10080: LD_STRING 
10082: ST_TO_ADDR
// for x = 1 to Side_Positions do
10083: LD_ADDR_VAR 0 2
10087: PUSH
10088: DOUBLE
10089: LD_INT 1
10091: DEC
10092: ST_TO_ADDR
10093: LD_EXP 19
10097: PUSH
10098: FOR_TO
10099: IFFALSE 10332
// if Side_Positions [ x ] then
10101: LD_EXP 19
10105: PUSH
10106: LD_VAR 0 2
10110: ARRAY
10111: IFFALSE 10330
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
10113: LD_ADDR_LOC 18
10117: PUSH
10118: LD_LOC 18
10122: PPUSH
10123: LD_VAR 0 2
10127: PPUSH
10128: LD_VAR 0 2
10132: PPUSH
10133: CALL_OW 515
10137: PUSH
10138: LD_LOC 17
10142: PUSH
10143: LD_VAR 0 2
10147: ARRAY
10148: MINUS
10149: PPUSH
10150: CALL_OW 1
10154: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
10155: LD_LOC 16
10159: PUSH
10160: LD_VAR 0 2
10164: ARRAY
10165: PUSH
10166: LD_INT 1
10168: NEG
10169: GREATER
10170: PUSH
10171: LD_LOC 16
10175: PUSH
10176: LD_VAR 0 2
10180: ARRAY
10181: PPUSH
10182: CALL_OW 300
10186: AND
10187: IFFALSE 10220
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
10189: LD_ADDR_EXP 59
10193: PUSH
10194: LD_EXP 59
10198: PUSH
10199: LD_STRING #godawoken
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: LD_VAR 0 2
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: ADD
10217: ST_TO_ADDR
10218: GO 10330
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
10220: LD_LOC 16
10224: PUSH
10225: LD_VAR 0 2
10229: ARRAY
10230: PUSH
10231: LD_INT 1
10233: NEG
10234: GREATER
10235: PUSH
10236: LD_LOC 16
10240: PUSH
10241: LD_VAR 0 2
10245: ARRAY
10246: PPUSH
10247: CALL_OW 301
10251: AND
10252: IFFALSE 10285
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
10254: LD_ADDR_EXP 59
10258: PUSH
10259: LD_EXP 59
10263: PUSH
10264: LD_STRING #goddied
10266: PUSH
10267: LD_VAR 0 2
10271: PUSH
10272: LD_VAR 0 2
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: LIST
10281: ADD
10282: ST_TO_ADDR
10283: GO 10330
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
10285: LD_ADDR_EXP 59
10289: PUSH
10290: LD_EXP 59
10294: PUSH
10295: LD_STRING #godssacrifise
10297: PUSH
10298: LD_VAR 0 2
10302: PUSH
10303: LD_VAR 0 2
10307: PUSH
10308: LD_LOC 18
10312: PUSH
10313: LD_VAR 0 2
10317: ARRAY
10318: PUSH
10319: LD_INT 6
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: ADD
10329: ST_TO_ADDR
10330: GO 10098
10332: POP
10333: POP
// end ;
10334: LD_VAR 0 1
10338: RET
// export function InitBloodGods ; begin
10339: LD_INT 0
10341: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
10342: LD_ADDR_LOC 16
10346: PUSH
10347: LD_INT 1
10349: NEG
10350: PUSH
10351: LD_INT 1
10353: NEG
10354: PUSH
10355: LD_INT 1
10357: NEG
10358: PUSH
10359: LD_INT 1
10361: NEG
10362: PUSH
10363: LD_INT 1
10365: NEG
10366: PUSH
10367: LD_INT 1
10369: NEG
10370: PUSH
10371: LD_INT 1
10373: NEG
10374: PUSH
10375: LD_INT 1
10377: NEG
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10389: LD_ADDR_LOC 17
10393: PUSH
10394: LD_INT 0
10396: PUSH
10397: LD_INT 0
10399: PUSH
10400: LD_INT 0
10402: PUSH
10403: LD_INT 0
10405: PUSH
10406: LD_INT 0
10408: PUSH
10409: LD_INT 0
10411: PUSH
10412: LD_INT 0
10414: PUSH
10415: LD_INT 0
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10428: LD_ADDR_LOC 18
10432: PUSH
10433: LD_INT 0
10435: PUSH
10436: LD_INT 0
10438: PUSH
10439: LD_INT 0
10441: PUSH
10442: LD_INT 0
10444: PUSH
10445: LD_INT 0
10447: PUSH
10448: LD_INT 0
10450: PUSH
10451: LD_INT 0
10453: PUSH
10454: LD_INT 0
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
10467: LD_ADDR_LOC 19
10471: PUSH
10472: LD_INT 60
10474: PUSH
10475: LD_INT 47
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 82
10484: PUSH
10485: LD_INT 26
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 124
10494: PUSH
10495: LD_INT 45
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 147
10504: PUSH
10505: LD_INT 90
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 126
10514: PUSH
10515: LD_INT 112
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 84
10524: PUSH
10525: LD_INT 92
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 106
10534: PUSH
10535: LD_INT 73
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: LD_INT 106
10544: PUSH
10545: LD_INT 73
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: ST_TO_ADDR
// ClearHumansKilled ;
10562: CALL_OW 516
// enable ( 200 ) ;
10566: LD_INT 200
10568: ENABLE_MARKED
// end ; end_of_file
10569: LD_VAR 0 1
10573: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
10574: LD_INT 0
10576: PPUSH
10577: PPUSH
// if ( not IAmSpec ) then
10578: CALL_OW 531
10582: NOT
10583: IFFALSE 10599
// Result := Limits_Info ^  ;
10585: LD_ADDR_VAR 0 1
10589: PUSH
10590: LD_LOC 27
10594: PUSH
10595: LD_STRING 
10597: ADD
10598: ST_TO_ADDR
// for i := 1 to 8 do
10599: LD_ADDR_VAR 0 2
10603: PUSH
10604: DOUBLE
10605: LD_INT 1
10607: DEC
10608: ST_TO_ADDR
10609: LD_INT 8
10611: PUSH
10612: FOR_TO
10613: IFFALSE 10658
// if Cheaters [ i ] then
10615: LD_LOC 28
10619: PUSH
10620: LD_VAR 0 2
10624: ARRAY
10625: IFFALSE 10656
// Result := Result ^ [ #Cheater , i , i ] ;
10627: LD_ADDR_VAR 0 1
10631: PUSH
10632: LD_VAR 0 1
10636: PUSH
10637: LD_STRING #Cheater
10639: PUSH
10640: LD_VAR 0 2
10644: PUSH
10645: LD_VAR 0 2
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: ADD
10655: ST_TO_ADDR
10656: GO 10612
10658: POP
10659: POP
// end ;
10660: LD_VAR 0 1
10664: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
10665: LD_INT 0
10667: PPUSH
10668: PPUSH
10669: PPUSH
10670: PPUSH
10671: PPUSH
// if game_type in [ 10 , 11 ] then
10672: LD_EXP 42
10676: PUSH
10677: LD_INT 10
10679: PUSH
10680: LD_INT 11
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: IN
10687: IFFALSE 10703
// def_game_rules = def_game_rules + 1 ;
10689: LD_ADDR_EXP 43
10693: PUSH
10694: LD_EXP 43
10698: PUSH
10699: LD_INT 1
10701: PLUS
10702: ST_TO_ADDR
// case def_game_rules of 0 :
10703: LD_EXP 43
10707: PUSH
10708: LD_INT 0
10710: DOUBLE
10711: EQUAL
10712: IFTRUE 10716
10714: GO 10721
10716: POP
// exit ; 1 :
10717: GO 12771
10719: GO 12671
10721: LD_INT 1
10723: DOUBLE
10724: EQUAL
10725: IFTRUE 10729
10727: GO 10945
10729: POP
// begin def_base_level := 2 ;
10730: LD_ADDR_EXP 44
10734: PUSH
10735: LD_INT 2
10737: ST_TO_ADDR
// def_amount_of_people := 11 ;
10738: LD_ADDR_EXP 45
10742: PUSH
10743: LD_INT 11
10745: ST_TO_ADDR
// def_skill_level := 1 ;
10746: LD_ADDR_EXP 46
10750: PUSH
10751: LD_INT 1
10753: ST_TO_ADDR
// def_starting_resources := 2 ;
10754: LD_ADDR_EXP 47
10758: PUSH
10759: LD_INT 2
10761: ST_TO_ADDR
// def_shipments_density := 26 ;
10762: LD_ADDR_EXP 48
10766: PUSH
10767: LD_INT 26
10769: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10770: LD_ADDR_EXP 49
10774: PUSH
10775: LD_INT 0
10777: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10778: LD_ADDR_EXP 50
10782: PUSH
10783: LD_INT 1
10785: ST_TO_ADDR
// def_shared_vision := 1 ;
10786: LD_ADDR_EXP 51
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// def_morale_flags := 3 ;
10794: LD_ADDR_EXP 52
10798: PUSH
10799: LD_INT 3
10801: ST_TO_ADDR
// def_siberite_detection := 1 ;
10802: LD_ADDR_EXP 53
10806: PUSH
10807: LD_INT 1
10809: ST_TO_ADDR
// def_people_respawning := 1 ;
10810: LD_ADDR_EXP 54
10814: PUSH
10815: LD_INT 1
10817: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10818: LD_ADDR_EXP 55
10822: PUSH
10823: LD_INT 1
10825: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10826: LD_ADDR_EXP 56
10830: PUSH
10831: LD_INT 0
10833: ST_TO_ADDR
// def_builduptime := 6 ;
10834: LD_ADDR_EXP 57
10838: PUSH
10839: LD_INT 6
10841: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
10842: LD_ADDR_VAR 0 2
10846: PUSH
10847: EMPTY
10848: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10849: LD_ADDR_VAR 0 3
10853: PUSH
10854: EMPTY
10855: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10856: LD_ADDR_LOC 22
10860: PUSH
10861: EMPTY
10862: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10863: LD_ADDR_LOC 23
10867: PUSH
10868: EMPTY
10869: ST_TO_ADDR
// Banned_Controls := [ ] ;
10870: LD_ADDR_LOC 24
10874: PUSH
10875: EMPTY
10876: ST_TO_ADDR
// Banned_Engines := [ ] ;
10877: LD_ADDR_LOC 25
10881: PUSH
10882: EMPTY
10883: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10884: LD_ADDR_LOC 20
10888: PUSH
10889: LD_INT 37
10891: PUSH
10892: EMPTY
10893: LIST
10894: PUSH
10895: LD_INT 4
10897: PUSH
10898: LD_INT 5
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 31
10907: PUSH
10908: LD_INT 32
10910: PUSH
10911: LD_INT 33
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: LIST
10923: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
10924: LD_ADDR_LOC 21
10928: PUSH
10929: LD_INT 2
10931: PUSH
10932: LD_INT 2
10934: PUSH
10935: LD_INT 4
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: ST_TO_ADDR
// end ; 2 :
10943: GO 12671
10945: LD_INT 2
10947: DOUBLE
10948: EQUAL
10949: IFTRUE 10953
10951: GO 11162
10953: POP
// begin def_base_level := 1 ;
10954: LD_ADDR_EXP 44
10958: PUSH
10959: LD_INT 1
10961: ST_TO_ADDR
// def_amount_of_people := 11 ;
10962: LD_ADDR_EXP 45
10966: PUSH
10967: LD_INT 11
10969: ST_TO_ADDR
// def_skill_level := 3 ;
10970: LD_ADDR_EXP 46
10974: PUSH
10975: LD_INT 3
10977: ST_TO_ADDR
// def_starting_resources := 3 ;
10978: LD_ADDR_EXP 47
10982: PUSH
10983: LD_INT 3
10985: ST_TO_ADDR
// def_shipments_density := 51 ;
10986: LD_ADDR_EXP 48
10990: PUSH
10991: LD_INT 51
10993: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10994: LD_ADDR_EXP 49
10998: PUSH
10999: LD_INT 1
11001: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11002: LD_ADDR_EXP 50
11006: PUSH
11007: LD_INT 2
11009: ST_TO_ADDR
// def_shared_vision := 1 ;
11010: LD_ADDR_EXP 51
11014: PUSH
11015: LD_INT 1
11017: ST_TO_ADDR
// def_morale_flags := 0 ;
11018: LD_ADDR_EXP 52
11022: PUSH
11023: LD_INT 0
11025: ST_TO_ADDR
// def_siberite_detection := 1 ;
11026: LD_ADDR_EXP 53
11030: PUSH
11031: LD_INT 1
11033: ST_TO_ADDR
// def_people_respawning := 0 ;
11034: LD_ADDR_EXP 54
11038: PUSH
11039: LD_INT 0
11041: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11042: LD_ADDR_EXP 55
11046: PUSH
11047: LD_INT 0
11049: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11050: LD_ADDR_EXP 56
11054: PUSH
11055: LD_INT 0
11057: ST_TO_ADDR
// def_builduptime := 6 ;
11058: LD_ADDR_EXP 57
11062: PUSH
11063: LD_INT 6
11065: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11066: LD_ADDR_VAR 0 2
11070: PUSH
11071: LD_INT 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11077: LD_ADDR_VAR 0 3
11081: PUSH
11082: EMPTY
11083: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11084: LD_ADDR_LOC 22
11088: PUSH
11089: EMPTY
11090: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11091: LD_ADDR_LOC 23
11095: PUSH
11096: EMPTY
11097: ST_TO_ADDR
// Banned_Controls := [ ] ;
11098: LD_ADDR_LOC 24
11102: PUSH
11103: EMPTY
11104: ST_TO_ADDR
// Banned_Engines := [ ] ;
11105: LD_ADDR_LOC 25
11109: PUSH
11110: EMPTY
11111: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11112: LD_ADDR_LOC 20
11116: PUSH
11117: LD_INT 4
11119: PUSH
11120: LD_INT 5
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 31
11129: PUSH
11130: LD_INT 32
11132: PUSH
11133: LD_INT 33
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
11145: LD_ADDR_LOC 21
11149: PUSH
11150: LD_INT 1
11152: PUSH
11153: LD_INT 2
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: ST_TO_ADDR
// end ; 3 :
11160: GO 12671
11162: LD_INT 3
11164: DOUBLE
11165: EQUAL
11166: IFTRUE 11170
11168: GO 11413
11170: POP
// begin def_base_level := 1 ;
11171: LD_ADDR_EXP 44
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// def_amount_of_people := 11 ;
11179: LD_ADDR_EXP 45
11183: PUSH
11184: LD_INT 11
11186: ST_TO_ADDR
// def_skill_level := 3 ;
11187: LD_ADDR_EXP 46
11191: PUSH
11192: LD_INT 3
11194: ST_TO_ADDR
// def_starting_resources := 3 ;
11195: LD_ADDR_EXP 47
11199: PUSH
11200: LD_INT 3
11202: ST_TO_ADDR
// def_shipments_density := 1 ;
11203: LD_ADDR_EXP 48
11207: PUSH
11208: LD_INT 1
11210: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11211: LD_ADDR_EXP 49
11215: PUSH
11216: LD_INT 0
11218: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11219: LD_ADDR_EXP 50
11223: PUSH
11224: LD_INT 1
11226: ST_TO_ADDR
// def_shared_vision := 1 ;
11227: LD_ADDR_EXP 51
11231: PUSH
11232: LD_INT 1
11234: ST_TO_ADDR
// def_morale_flags := 0 ;
11235: LD_ADDR_EXP 52
11239: PUSH
11240: LD_INT 0
11242: ST_TO_ADDR
// def_siberite_detection := 1 ;
11243: LD_ADDR_EXP 53
11247: PUSH
11248: LD_INT 1
11250: ST_TO_ADDR
// def_people_respawning := 0 ;
11251: LD_ADDR_EXP 54
11255: PUSH
11256: LD_INT 0
11258: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11259: LD_ADDR_EXP 55
11263: PUSH
11264: LD_INT 2
11266: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11267: LD_ADDR_EXP 56
11271: PUSH
11272: LD_INT 0
11274: ST_TO_ADDR
// def_builduptime := 6 ;
11275: LD_ADDR_EXP 57
11279: PUSH
11280: LD_INT 6
11282: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11283: LD_ADDR_VAR 0 2
11287: PUSH
11288: LD_INT 23
11290: PUSH
11291: EMPTY
11292: LIST
11293: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
11294: LD_ADDR_VAR 0 3
11298: PUSH
11299: LD_INT 2
11301: PUSH
11302: LD_INT 37
11304: PUSH
11305: LD_INT 32
11307: PUSH
11308: LD_INT 33
11310: PUSH
11311: LD_INT 36
11313: PUSH
11314: LD_INT 16
11316: PUSH
11317: LD_INT 23
11319: PUSH
11320: LD_INT 21
11322: PUSH
11323: LD_INT 18
11325: PUSH
11326: LD_INT 22
11328: PUSH
11329: LD_INT 20
11331: PUSH
11332: LD_INT 19
11334: PUSH
11335: LD_INT 25
11337: PUSH
11338: LD_INT 17
11340: PUSH
11341: LD_INT 24
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11361: LD_ADDR_LOC 22
11365: PUSH
11366: EMPTY
11367: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11368: LD_ADDR_LOC 23
11372: PUSH
11373: EMPTY
11374: ST_TO_ADDR
// Banned_Controls := [ ] ;
11375: LD_ADDR_LOC 24
11379: PUSH
11380: EMPTY
11381: ST_TO_ADDR
// Banned_Engines := [ ] ;
11382: LD_ADDR_LOC 25
11386: PUSH
11387: EMPTY
11388: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11389: LD_ADDR_LOC 20
11393: PUSH
11394: EMPTY
11395: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11396: LD_ADDR_LOC 21
11400: PUSH
11401: EMPTY
11402: ST_TO_ADDR
// No_Mechs := true ;
11403: LD_ADDR_EXP 58
11407: PUSH
11408: LD_INT 1
11410: ST_TO_ADDR
// end ; 4 :
11411: GO 12671
11413: LD_INT 4
11415: DOUBLE
11416: EQUAL
11417: IFTRUE 11421
11419: GO 11596
11421: POP
// begin def_base_level := 1 ;
11422: LD_ADDR_EXP 44
11426: PUSH
11427: LD_INT 1
11429: ST_TO_ADDR
// def_amount_of_people := 11 ;
11430: LD_ADDR_EXP 45
11434: PUSH
11435: LD_INT 11
11437: ST_TO_ADDR
// def_skill_level := 3 ;
11438: LD_ADDR_EXP 46
11442: PUSH
11443: LD_INT 3
11445: ST_TO_ADDR
// def_starting_resources := 3 ;
11446: LD_ADDR_EXP 47
11450: PUSH
11451: LD_INT 3
11453: ST_TO_ADDR
// def_shipments_density := 2 ;
11454: LD_ADDR_EXP 48
11458: PUSH
11459: LD_INT 2
11461: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11462: LD_ADDR_EXP 49
11466: PUSH
11467: LD_INT 1
11469: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11470: LD_ADDR_EXP 50
11474: PUSH
11475: LD_INT 2
11477: ST_TO_ADDR
// def_shared_vision := 1 ;
11478: LD_ADDR_EXP 51
11482: PUSH
11483: LD_INT 1
11485: ST_TO_ADDR
// def_morale_flags := 0 ;
11486: LD_ADDR_EXP 52
11490: PUSH
11491: LD_INT 0
11493: ST_TO_ADDR
// def_siberite_detection := 1 ;
11494: LD_ADDR_EXP 53
11498: PUSH
11499: LD_INT 1
11501: ST_TO_ADDR
// def_people_respawning := 0 ;
11502: LD_ADDR_EXP 54
11506: PUSH
11507: LD_INT 0
11509: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11510: LD_ADDR_EXP 55
11514: PUSH
11515: LD_INT 0
11517: ST_TO_ADDR
// def_siberite_bomb := 1 ;
11518: LD_ADDR_EXP 56
11522: PUSH
11523: LD_INT 1
11525: ST_TO_ADDR
// def_builduptime := 11 ;
11526: LD_ADDR_EXP 57
11530: PUSH
11531: LD_INT 11
11533: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11534: LD_ADDR_VAR 0 2
11538: PUSH
11539: LD_INT 1
11541: PUSH
11542: EMPTY
11543: LIST
11544: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11545: LD_ADDR_VAR 0 3
11549: PUSH
11550: EMPTY
11551: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11552: LD_ADDR_LOC 22
11556: PUSH
11557: EMPTY
11558: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11559: LD_ADDR_LOC 23
11563: PUSH
11564: EMPTY
11565: ST_TO_ADDR
// Banned_Controls := [ ] ;
11566: LD_ADDR_LOC 24
11570: PUSH
11571: EMPTY
11572: ST_TO_ADDR
// Banned_Engines := [ ] ;
11573: LD_ADDR_LOC 25
11577: PUSH
11578: EMPTY
11579: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11580: LD_ADDR_LOC 20
11584: PUSH
11585: EMPTY
11586: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11587: LD_ADDR_LOC 21
11591: PUSH
11592: EMPTY
11593: ST_TO_ADDR
// end ; 5 :
11594: GO 12671
11596: LD_INT 5
11598: DOUBLE
11599: EQUAL
11600: IFTRUE 11604
11602: GO 11853
11604: POP
// begin def_base_level := 0 ;
11605: LD_ADDR_EXP 44
11609: PUSH
11610: LD_INT 0
11612: ST_TO_ADDR
// def_amount_of_people := 5 ;
11613: LD_ADDR_EXP 45
11617: PUSH
11618: LD_INT 5
11620: ST_TO_ADDR
// def_skill_level := 0 ;
11621: LD_ADDR_EXP 46
11625: PUSH
11626: LD_INT 0
11628: ST_TO_ADDR
// def_starting_resources := 0 ;
11629: LD_ADDR_EXP 47
11633: PUSH
11634: LD_INT 0
11636: ST_TO_ADDR
// def_shipments_density := 0 ;
11637: LD_ADDR_EXP 48
11641: PUSH
11642: LD_INT 0
11644: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11645: LD_ADDR_EXP 49
11649: PUSH
11650: LD_INT 0
11652: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11653: LD_ADDR_EXP 50
11657: PUSH
11658: LD_INT 0
11660: ST_TO_ADDR
// def_shared_vision := 1 ;
11661: LD_ADDR_EXP 51
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// def_morale_flags := 0 ;
11669: LD_ADDR_EXP 52
11673: PUSH
11674: LD_INT 0
11676: ST_TO_ADDR
// def_siberite_detection := 0 ;
11677: LD_ADDR_EXP 53
11681: PUSH
11682: LD_INT 0
11684: ST_TO_ADDR
// def_people_respawning := 1 ;
11685: LD_ADDR_EXP 54
11689: PUSH
11690: LD_INT 1
11692: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11693: LD_ADDR_EXP 55
11697: PUSH
11698: LD_INT 1
11700: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11701: LD_ADDR_EXP 56
11705: PUSH
11706: LD_INT 0
11708: ST_TO_ADDR
// def_builduptime := 0 ;
11709: LD_ADDR_EXP 57
11713: PUSH
11714: LD_INT 0
11716: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
11717: LD_ADDR_VAR 0 2
11721: PUSH
11722: LD_INT 10
11724: PUSH
11725: LD_INT 3
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
11732: LD_ADDR_VAR 0 3
11736: PUSH
11737: LD_INT 12
11739: PUSH
11740: LD_INT 11
11742: PUSH
11743: LD_INT 14
11745: PUSH
11746: LD_INT 13
11748: PUSH
11749: LD_INT 5
11751: PUSH
11752: LD_INT 24
11754: PUSH
11755: LD_INT 21
11757: PUSH
11758: LD_INT 33
11760: PUSH
11761: LD_INT 36
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
11775: LD_ADDR_LOC 22
11779: PUSH
11780: LD_INT 31
11782: PUSH
11783: EMPTY
11784: LIST
11785: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11786: LD_ADDR_LOC 23
11790: PUSH
11791: EMPTY
11792: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
11793: LD_ADDR_LOC 24
11797: PUSH
11798: LD_INT 2
11800: PUSH
11801: EMPTY
11802: LIST
11803: ST_TO_ADDR
// Banned_Engines := [ ] ;
11804: LD_ADDR_LOC 25
11808: PUSH
11809: EMPTY
11810: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
11811: LD_ADDR_LOC 20
11815: PUSH
11816: LD_INT 4
11818: PUSH
11819: EMPTY
11820: LIST
11821: PUSH
11822: LD_INT 31
11824: PUSH
11825: LD_INT 32
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
11836: LD_ADDR_LOC 21
11840: PUSH
11841: LD_INT 1
11843: PUSH
11844: LD_INT 1
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: ST_TO_ADDR
// end ; 6 :
11851: GO 12671
11853: LD_INT 6
11855: DOUBLE
11856: EQUAL
11857: IFTRUE 11861
11859: GO 12064
11861: POP
// begin def_base_level := 1 ;
11862: LD_ADDR_EXP 44
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// def_amount_of_people := 11 ;
11870: LD_ADDR_EXP 45
11874: PUSH
11875: LD_INT 11
11877: ST_TO_ADDR
// def_skill_level := 3 ;
11878: LD_ADDR_EXP 46
11882: PUSH
11883: LD_INT 3
11885: ST_TO_ADDR
// def_starting_resources := 3 ;
11886: LD_ADDR_EXP 47
11890: PUSH
11891: LD_INT 3
11893: ST_TO_ADDR
// def_shipments_density := 1 ;
11894: LD_ADDR_EXP 48
11898: PUSH
11899: LD_INT 1
11901: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11902: LD_ADDR_EXP 49
11906: PUSH
11907: LD_INT 0
11909: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11910: LD_ADDR_EXP 50
11914: PUSH
11915: LD_INT 1
11917: ST_TO_ADDR
// def_shared_vision := 1 ;
11918: LD_ADDR_EXP 51
11922: PUSH
11923: LD_INT 1
11925: ST_TO_ADDR
// def_morale_flags := 0 ;
11926: LD_ADDR_EXP 52
11930: PUSH
11931: LD_INT 0
11933: ST_TO_ADDR
// def_siberite_detection := 1 ;
11934: LD_ADDR_EXP 53
11938: PUSH
11939: LD_INT 1
11941: ST_TO_ADDR
// def_people_respawning := 2 ;
11942: LD_ADDR_EXP 54
11946: PUSH
11947: LD_INT 2
11949: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11950: LD_ADDR_EXP 55
11954: PUSH
11955: LD_INT 1
11957: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11958: LD_ADDR_EXP 56
11962: PUSH
11963: LD_INT 0
11965: ST_TO_ADDR
// def_builduptime := 6 ;
11966: LD_ADDR_EXP 57
11970: PUSH
11971: LD_INT 6
11973: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11974: LD_ADDR_VAR 0 2
11978: PUSH
11979: LD_INT 23
11981: PUSH
11982: EMPTY
11983: LIST
11984: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
11985: LD_ADDR_VAR 0 3
11989: PUSH
11990: LD_INT 2
11992: PUSH
11993: LD_INT 37
11995: PUSH
11996: LD_INT 31
11998: PUSH
11999: LD_INT 32
12001: PUSH
12002: LD_INT 33
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12012: LD_ADDR_LOC 22
12016: PUSH
12017: EMPTY
12018: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12019: LD_ADDR_LOC 23
12023: PUSH
12024: EMPTY
12025: ST_TO_ADDR
// Banned_Controls := [ ] ;
12026: LD_ADDR_LOC 24
12030: PUSH
12031: EMPTY
12032: ST_TO_ADDR
// Banned_Engines := [ ] ;
12033: LD_ADDR_LOC 25
12037: PUSH
12038: EMPTY
12039: ST_TO_ADDR
// Restricted_Builds := [ ] ;
12040: LD_ADDR_LOC 20
12044: PUSH
12045: EMPTY
12046: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
12047: LD_ADDR_LOC 21
12051: PUSH
12052: EMPTY
12053: ST_TO_ADDR
// No_Mechs := true ;
12054: LD_ADDR_EXP 58
12058: PUSH
12059: LD_INT 1
12061: ST_TO_ADDR
// end ; 7 :
12062: GO 12671
12064: LD_INT 7
12066: DOUBLE
12067: EQUAL
12068: IFTRUE 12072
12070: GO 12270
12072: POP
// begin def_base_level := 1 ;
12073: LD_ADDR_EXP 44
12077: PUSH
12078: LD_INT 1
12080: ST_TO_ADDR
// def_amount_of_people := 20 ;
12081: LD_ADDR_EXP 45
12085: PUSH
12086: LD_INT 20
12088: ST_TO_ADDR
// def_skill_level := 3 ;
12089: LD_ADDR_EXP 46
12093: PUSH
12094: LD_INT 3
12096: ST_TO_ADDR
// def_starting_resources := 3 ;
12097: LD_ADDR_EXP 47
12101: PUSH
12102: LD_INT 3
12104: ST_TO_ADDR
// def_shipments_density := 1 ;
12105: LD_ADDR_EXP 48
12109: PUSH
12110: LD_INT 1
12112: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
12113: LD_ADDR_EXP 49
12117: PUSH
12118: LD_INT 1
12120: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
12121: LD_ADDR_EXP 50
12125: PUSH
12126: LD_INT 2
12128: ST_TO_ADDR
// def_shared_vision := 1 ;
12129: LD_ADDR_EXP 51
12133: PUSH
12134: LD_INT 1
12136: ST_TO_ADDR
// def_morale_flags := 0 ;
12137: LD_ADDR_EXP 52
12141: PUSH
12142: LD_INT 0
12144: ST_TO_ADDR
// def_siberite_detection := 1 ;
12145: LD_ADDR_EXP 53
12149: PUSH
12150: LD_INT 1
12152: ST_TO_ADDR
// def_people_respawning := 0 ;
12153: LD_ADDR_EXP 54
12157: PUSH
12158: LD_INT 0
12160: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12161: LD_ADDR_EXP 55
12165: PUSH
12166: LD_INT 1
12168: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12169: LD_ADDR_EXP 56
12173: PUSH
12174: LD_INT 0
12176: ST_TO_ADDR
// def_builduptime := 6 ;
12177: LD_ADDR_EXP 57
12181: PUSH
12182: LD_INT 6
12184: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12185: LD_ADDR_VAR 0 2
12189: PUSH
12190: LD_INT 23
12192: PUSH
12193: EMPTY
12194: LIST
12195: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
12196: LD_ADDR_VAR 0 3
12200: PUSH
12201: LD_INT 37
12203: PUSH
12204: EMPTY
12205: LIST
12206: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12207: LD_ADDR_LOC 22
12211: PUSH
12212: EMPTY
12213: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12214: LD_ADDR_LOC 23
12218: PUSH
12219: EMPTY
12220: ST_TO_ADDR
// Banned_Controls := [ ] ;
12221: LD_ADDR_LOC 24
12225: PUSH
12226: EMPTY
12227: ST_TO_ADDR
// Banned_Engines := [ ] ;
12228: LD_ADDR_LOC 25
12232: PUSH
12233: EMPTY
12234: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
12235: LD_ADDR_LOC 20
12239: PUSH
12240: LD_INT 31
12242: PUSH
12243: LD_INT 32
12245: PUSH
12246: LD_INT 33
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: LIST
12253: PUSH
12254: EMPTY
12255: LIST
12256: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
12257: LD_ADDR_LOC 21
12261: PUSH
12262: LD_INT 10
12264: PUSH
12265: EMPTY
12266: LIST
12267: ST_TO_ADDR
// end ; 8 :
12268: GO 12671
12270: LD_INT 8
12272: DOUBLE
12273: EQUAL
12274: IFTRUE 12278
12276: GO 12670
12278: POP
// begin def_base_level := 0 ;
12279: LD_ADDR_EXP 44
12283: PUSH
12284: LD_INT 0
12286: ST_TO_ADDR
// def_amount_of_people := 8 ;
12287: LD_ADDR_EXP 45
12291: PUSH
12292: LD_INT 8
12294: ST_TO_ADDR
// def_skill_level := 0 ;
12295: LD_ADDR_EXP 46
12299: PUSH
12300: LD_INT 0
12302: ST_TO_ADDR
// def_starting_resources := 2 ;
12303: LD_ADDR_EXP 47
12307: PUSH
12308: LD_INT 2
12310: ST_TO_ADDR
// def_shipments_density := 1 ;
12311: LD_ADDR_EXP 48
12315: PUSH
12316: LD_INT 1
12318: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12319: LD_ADDR_EXP 49
12323: PUSH
12324: LD_INT 0
12326: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12327: LD_ADDR_EXP 50
12331: PUSH
12332: LD_INT 0
12334: ST_TO_ADDR
// def_shared_vision := 1 ;
12335: LD_ADDR_EXP 51
12339: PUSH
12340: LD_INT 1
12342: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
12343: LD_ADDR_EXP 52
12347: PUSH
12348: LD_INT 0
12350: PPUSH
12351: LD_INT 2
12353: PPUSH
12354: CALL_OW 12
12358: ST_TO_ADDR
// def_siberite_detection := 0 ;
12359: LD_ADDR_EXP 53
12363: PUSH
12364: LD_INT 0
12366: ST_TO_ADDR
// def_people_respawning := 0 ;
12367: LD_ADDR_EXP 54
12371: PUSH
12372: LD_INT 0
12374: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
12375: LD_ADDR_EXP 55
12379: PUSH
12380: LD_INT 2
12382: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12383: LD_ADDR_EXP 56
12387: PUSH
12388: LD_INT 0
12390: ST_TO_ADDR
// def_builduptime := 0 ;
12391: LD_ADDR_EXP 57
12395: PUSH
12396: LD_INT 0
12398: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
12399: LD_ADDR_VAR 0 2
12403: PUSH
12404: LD_INT 23
12406: PUSH
12407: LD_INT 20
12409: PUSH
12410: LD_INT 40
12412: PUSH
12413: LD_INT 47
12415: PUSH
12416: LD_INT 46
12418: PUSH
12419: LD_INT 39
12421: PUSH
12422: LD_INT 71
12424: PUSH
12425: LD_INT 34
12427: PUSH
12428: LD_INT 41
12430: PUSH
12431: LD_INT 44
12433: PUSH
12434: LD_INT 17
12436: PUSH
12437: LD_INT 16
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
12454: LD_ADDR_VAR 0 3
12458: PUSH
12459: LD_INT 37
12461: PUSH
12462: LD_INT 5
12464: PUSH
12465: LD_INT 13
12467: PUSH
12468: LD_INT 34
12470: PUSH
12471: LD_INT 12
12473: PUSH
12474: LD_INT 15
12476: PUSH
12477: LD_INT 11
12479: PUSH
12480: LD_INT 14
12482: PUSH
12483: LD_INT 29
12485: PUSH
12486: LD_INT 30
12488: PUSH
12489: LD_INT 28
12491: PUSH
12492: LD_INT 24
12494: PUSH
12495: LD_INT 25
12497: PUSH
12498: LD_INT 20
12500: PUSH
12501: LD_INT 21
12503: PUSH
12504: LD_INT 22
12506: PUSH
12507: LD_INT 36
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12529: LD_ADDR_LOC 22
12533: PUSH
12534: EMPTY
12535: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
12536: LD_ADDR_LOC 23
12540: PUSH
12541: LD_INT 14
12543: PUSH
12544: EMPTY
12545: LIST
12546: ST_TO_ADDR
// Banned_Controls := [ ] ;
12547: LD_ADDR_LOC 24
12551: PUSH
12552: EMPTY
12553: ST_TO_ADDR
// Banned_Engines := [ ] ;
12554: LD_ADDR_LOC 25
12558: PUSH
12559: EMPTY
12560: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
12561: LD_ADDR_LOC 20
12565: PUSH
12566: LD_INT 31
12568: PUSH
12569: LD_INT 32
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: LD_INT 4
12578: PUSH
12579: EMPTY
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
12586: LD_ADDR_LOC 21
12590: PUSH
12591: LD_INT 2
12593: PUSH
12594: LD_INT 1
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: ST_TO_ADDR
// for i := 1 to 8 do
12601: LD_ADDR_VAR 0 4
12605: PUSH
12606: DOUBLE
12607: LD_INT 1
12609: DEC
12610: ST_TO_ADDR
12611: LD_INT 8
12613: PUSH
12614: FOR_TO
12615: IFFALSE 12666
// if ( Side_Nations [ i ] = 3 ) then
12617: LD_EXP 20
12621: PUSH
12622: LD_VAR 0 4
12626: ARRAY
12627: PUSH
12628: LD_INT 3
12630: EQUAL
12631: IFFALSE 12664
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
12633: LD_ADDR_EXP 20
12637: PUSH
12638: LD_EXP 20
12642: PPUSH
12643: LD_VAR 0 4
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: LD_INT 2
12653: PPUSH
12654: CALL_OW 12
12658: PPUSH
12659: CALL_OW 1
12663: ST_TO_ADDR
12664: GO 12614
12666: POP
12667: POP
// end ; end ;
12668: GO 12671
12670: POP
// for i := 1 to 8 do
12671: LD_ADDR_VAR 0 4
12675: PUSH
12676: DOUBLE
12677: LD_INT 1
12679: DEC
12680: ST_TO_ADDR
12681: LD_INT 8
12683: PUSH
12684: FOR_TO
12685: IFFALSE 12769
// if Side_Positions [ i ] then
12687: LD_EXP 19
12691: PUSH
12692: LD_VAR 0 4
12696: ARRAY
12697: IFFALSE 12767
// begin for j in Unavailable_Techs do
12699: LD_ADDR_VAR 0 5
12703: PUSH
12704: LD_VAR 0 2
12708: PUSH
12709: FOR_IN
12710: IFFALSE 12731
// SetTech ( j , i , 0 ) ;
12712: LD_VAR 0 5
12716: PPUSH
12717: LD_VAR 0 4
12721: PPUSH
12722: LD_INT 0
12724: PPUSH
12725: CALL_OW 322
12729: GO 12709
12731: POP
12732: POP
// for j in Unavailable_Builds do
12733: LD_ADDR_VAR 0 5
12737: PUSH
12738: LD_VAR 0 3
12742: PUSH
12743: FOR_IN
12744: IFFALSE 12765
// SetRestrict ( j , i , 0 ) ;
12746: LD_VAR 0 5
12750: PPUSH
12751: LD_VAR 0 4
12755: PPUSH
12756: LD_INT 0
12758: PPUSH
12759: CALL_OW 324
12763: GO 12743
12765: POP
12766: POP
// end ;
12767: GO 12684
12769: POP
12770: POP
// end ;
12771: LD_VAR 0 1
12775: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
12776: LD_INT 0
12778: PPUSH
12779: PPUSH
12780: PPUSH
12781: PPUSH
12782: PPUSH
12783: PPUSH
12784: PPUSH
// for i := 1 to Restricted_Builds do
12785: LD_ADDR_VAR 0 2
12789: PUSH
12790: DOUBLE
12791: LD_INT 1
12793: DEC
12794: ST_TO_ADDR
12795: LD_LOC 20
12799: PUSH
12800: FOR_TO
12801: IFFALSE 13111
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
12803: LD_LOC 20
12807: PUSH
12808: LD_VAR 0 2
12812: ARRAY
12813: PUSH
12814: LD_INT 1
12816: ARRAY
12817: PUSH
12818: LD_INT 31
12820: DOUBLE
12821: EQUAL
12822: IFTRUE 12838
12824: LD_INT 32
12826: DOUBLE
12827: EQUAL
12828: IFTRUE 12838
12830: LD_INT 33
12832: DOUBLE
12833: EQUAL
12834: IFTRUE 12838
12836: GO 12849
12838: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
12839: LD_ADDR_VAR 0 6
12843: PUSH
12844: LD_STRING #Turrets
12846: ST_TO_ADDR
12847: GO 12894
12849: LD_INT 4
12851: DOUBLE
12852: EQUAL
12853: IFTRUE 12863
12855: LD_INT 5
12857: DOUBLE
12858: EQUAL
12859: IFTRUE 12863
12861: GO 12874
12863: POP
// btype := #Armouries ; b_Behemoth :
12864: LD_ADDR_VAR 0 6
12868: PUSH
12869: LD_STRING #Armouries
12871: ST_TO_ADDR
12872: GO 12894
12874: LD_INT 37
12876: DOUBLE
12877: EQUAL
12878: IFTRUE 12882
12880: GO 12893
12882: POP
// btype := #Behemoths ; end ;
12883: LD_ADDR_VAR 0 6
12887: PUSH
12888: LD_STRING #Behemoths
12890: ST_TO_ADDR
12891: GO 12894
12893: POP
// list := [ ] ;
12894: LD_ADDR_VAR 0 7
12898: PUSH
12899: EMPTY
12900: ST_TO_ADDR
// for j := 1 to 8 do
12901: LD_ADDR_VAR 0 3
12905: PUSH
12906: DOUBLE
12907: LD_INT 1
12909: DEC
12910: ST_TO_ADDR
12911: LD_INT 8
12913: PUSH
12914: FOR_TO
12915: IFFALSE 13008
// if Side_Positions [ j ] then
12917: LD_EXP 19
12921: PUSH
12922: LD_VAR 0 3
12926: ARRAY
12927: IFFALSE 13006
// begin amount := 0 ;
12929: LD_ADDR_VAR 0 5
12933: PUSH
12934: LD_INT 0
12936: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
12937: LD_ADDR_VAR 0 4
12941: PUSH
12942: LD_LOC 20
12946: PUSH
12947: LD_VAR 0 2
12951: ARRAY
12952: PUSH
12953: FOR_IN
12954: IFFALSE 13002
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
12956: LD_ADDR_VAR 0 5
12960: PUSH
12961: LD_VAR 0 5
12965: PUSH
12966: LD_INT 22
12968: PUSH
12969: LD_VAR 0 3
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PUSH
12978: LD_INT 30
12980: PUSH
12981: LD_VAR 0 4
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 69
12998: PLUS
12999: ST_TO_ADDR
13000: GO 12953
13002: POP
13003: POP
// break ;
13004: GO 13008
// end ;
13006: GO 12914
13008: POP
13009: POP
// list := [ ] ;
13010: LD_ADDR_VAR 0 7
13014: PUSH
13015: EMPTY
13016: ST_TO_ADDR
// for j := 1 to 8 do
13017: LD_ADDR_VAR 0 3
13021: PUSH
13022: DOUBLE
13023: LD_INT 1
13025: DEC
13026: ST_TO_ADDR
13027: LD_INT 8
13029: PUSH
13030: FOR_TO
13031: IFFALSE 13051
// list := list ^ amount ;
13033: LD_ADDR_VAR 0 7
13037: PUSH
13038: LD_VAR 0 7
13042: PUSH
13043: LD_VAR 0 5
13047: ADD
13048: ST_TO_ADDR
13049: GO 13030
13051: POP
13052: POP
// Already_Built := Already_Built ^ [ list ] ;
13053: LD_ADDR_LOC 26
13057: PUSH
13058: LD_LOC 26
13062: PUSH
13063: LD_VAR 0 7
13067: PUSH
13068: EMPTY
13069: LIST
13070: ADD
13071: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13072: LD_ADDR_LOC 27
13076: PUSH
13077: LD_LOC 27
13081: PUSH
13082: LD_VAR 0 6
13086: PUSH
13087: LD_VAR 0 5
13091: PUSH
13092: LD_LOC 21
13096: PUSH
13097: LD_VAR 0 2
13101: ARRAY
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: LIST
13107: ADD
13108: ST_TO_ADDR
// end ;
13109: GO 12800
13111: POP
13112: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13113: LD_ADDR_LOC 28
13117: PUSH
13118: LD_INT 0
13120: PUSH
13121: LD_INT 0
13123: PUSH
13124: LD_INT 0
13126: PUSH
13127: LD_INT 0
13129: PUSH
13130: LD_INT 0
13132: PUSH
13133: LD_INT 0
13135: PUSH
13136: LD_INT 0
13138: PUSH
13139: LD_INT 0
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: ST_TO_ADDR
// if Limits_Info then
13152: LD_LOC 27
13156: IFFALSE 13172
// Limits_Info := #Limits ^ Limits_Info ;
13158: LD_ADDR_LOC 27
13162: PUSH
13163: LD_STRING #Limits
13165: PUSH
13166: LD_LOC 27
13170: ADD
13171: ST_TO_ADDR
// end ;
13172: LD_VAR 0 1
13176: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13177: LD_INT 0
13179: PPUSH
13180: PPUSH
13181: PPUSH
13182: PPUSH
// for i := 1 to Restricted_Builds do
13183: LD_ADDR_VAR 0 7
13187: PUSH
13188: DOUBLE
13189: LD_INT 1
13191: DEC
13192: ST_TO_ADDR
13193: LD_LOC 20
13197: PUSH
13198: FOR_TO
13199: IFFALSE 13622
// if BType in Restricted_Builds [ i ] then
13201: LD_VAR 0 2
13205: PUSH
13206: LD_LOC 20
13210: PUSH
13211: LD_VAR 0 7
13215: ARRAY
13216: IN
13217: IFFALSE 13620
// begin if old_side then
13219: LD_VAR 0 4
13223: IFFALSE 13349
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
13225: LD_LOC 26
13229: PUSH
13230: LD_VAR 0 7
13234: ARRAY
13235: PUSH
13236: LD_VAR 0 3
13240: ARRAY
13241: PUSH
13242: LD_VAR 0 5
13246: PLUS
13247: PUSH
13248: LD_LOC 21
13252: PUSH
13253: LD_VAR 0 7
13257: ARRAY
13258: GREATER
13259: IFFALSE 13285
// begin SetSide ( un , old_side ) ;
13261: LD_VAR 0 1
13265: PPUSH
13266: LD_VAR 0 4
13270: PPUSH
13271: CALL_OW 235
// count := 0 ;
13275: LD_ADDR_VAR 0 5
13279: PUSH
13280: LD_INT 0
13282: ST_TO_ADDR
// end else
13283: GO 13349
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
13285: LD_ADDR_LOC 26
13289: PUSH
13290: LD_LOC 26
13294: PPUSH
13295: LD_VAR 0 7
13299: PPUSH
13300: LD_LOC 26
13304: PUSH
13305: LD_VAR 0 7
13309: ARRAY
13310: PPUSH
13311: LD_VAR 0 4
13315: PPUSH
13316: LD_LOC 26
13320: PUSH
13321: LD_VAR 0 7
13325: ARRAY
13326: PUSH
13327: LD_VAR 0 4
13331: ARRAY
13332: PUSH
13333: LD_VAR 0 5
13337: MINUS
13338: PPUSH
13339: CALL_OW 1
13343: PPUSH
13344: CALL_OW 1
13348: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
13349: LD_ADDR_LOC 26
13353: PUSH
13354: LD_LOC 26
13358: PPUSH
13359: LD_VAR 0 7
13363: PPUSH
13364: LD_LOC 26
13368: PUSH
13369: LD_VAR 0 7
13373: ARRAY
13374: PPUSH
13375: LD_VAR 0 3
13379: PPUSH
13380: LD_LOC 26
13384: PUSH
13385: LD_VAR 0 7
13389: ARRAY
13390: PUSH
13391: LD_VAR 0 3
13395: ARRAY
13396: PUSH
13397: LD_VAR 0 5
13401: PLUS
13402: PPUSH
13403: CALL_OW 1
13407: PPUSH
13408: CALL_OW 1
13412: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
13413: LD_VAR 0 5
13417: PUSH
13418: LD_INT 0
13420: NONEQUAL
13421: PUSH
13422: LD_VAR 0 3
13426: PUSH
13427: LD_OWVAR 2
13431: EQUAL
13432: AND
13433: IFFALSE 13476
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
13435: LD_ADDR_LOC 27
13439: PUSH
13440: LD_LOC 27
13444: PPUSH
13445: LD_INT 3
13447: PUSH
13448: LD_VAR 0 7
13452: MUL
13453: PPUSH
13454: LD_LOC 26
13458: PUSH
13459: LD_VAR 0 7
13463: ARRAY
13464: PUSH
13465: LD_VAR 0 3
13469: ARRAY
13470: PPUSH
13471: CALL_OW 1
13475: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
13476: LD_LOC 26
13480: PUSH
13481: LD_VAR 0 7
13485: ARRAY
13486: PUSH
13487: LD_VAR 0 3
13491: ARRAY
13492: PUSH
13493: LD_LOC 21
13497: PUSH
13498: LD_VAR 0 7
13502: ARRAY
13503: GREATER
13504: IFFALSE 13531
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
13506: LD_ADDR_LOC 28
13510: PUSH
13511: LD_LOC 28
13515: PPUSH
13516: LD_VAR 0 3
13520: PPUSH
13521: LD_INT 1
13523: PPUSH
13524: CALL_OW 1
13528: ST_TO_ADDR
// end else
13529: GO 13618
// begin for j := 1 to Restricted_Builds do
13531: LD_ADDR_VAR 0 8
13535: PUSH
13536: DOUBLE
13537: LD_INT 1
13539: DEC
13540: ST_TO_ADDR
13541: LD_LOC 20
13545: PUSH
13546: FOR_TO
13547: IFFALSE 13591
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
13549: LD_LOC 26
13553: PUSH
13554: LD_VAR 0 8
13558: ARRAY
13559: PUSH
13560: LD_VAR 0 3
13564: ARRAY
13565: PUSH
13566: LD_LOC 21
13570: PUSH
13571: LD_VAR 0 8
13575: ARRAY
13576: GREATER
13577: IFFALSE 13589
// begin Is_Cheater := true ;
13579: LD_ADDR_VAR 0 9
13583: PUSH
13584: LD_INT 1
13586: ST_TO_ADDR
// break ;
13587: GO 13591
// end ;
13589: GO 13546
13591: POP
13592: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
13593: LD_ADDR_LOC 28
13597: PUSH
13598: LD_LOC 28
13602: PPUSH
13603: LD_VAR 0 3
13607: PPUSH
13608: LD_VAR 0 9
13612: PPUSH
13613: CALL_OW 1
13617: ST_TO_ADDR
// end ; break ;
13618: GO 13622
// end ;
13620: GO 13198
13622: POP
13623: POP
// end ;
13624: LD_VAR 0 6
13628: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
13629: LD_VAR 0 5
13633: PUSH
13634: LD_LOC 22
13638: IN
13639: PUSH
13640: LD_VAR 0 2
13644: PUSH
13645: LD_LOC 23
13649: IN
13650: OR
13651: PUSH
13652: LD_VAR 0 4
13656: PUSH
13657: LD_LOC 24
13661: IN
13662: OR
13663: PUSH
13664: LD_VAR 0 3
13668: PUSH
13669: LD_LOC 25
13673: IN
13674: OR
13675: IFFALSE 13686
// ComCancel ( factory ) ;
13677: LD_VAR 0 1
13681: PPUSH
13682: CALL_OW 127
// end ;
13686: PPOPN 5
13688: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
13689: LD_VAR 0 2
13693: PUSH
13694: LD_LOC 22
13698: IN
13699: IFFALSE 13710
// ComCancel ( building ) ;
13701: LD_VAR 0 1
13705: PPUSH
13706: CALL_OW 127
// end ; end_of_file
13710: PPOPN 2
13712: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
13713: LD_INT 0
13715: PPUSH
13716: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
13717: LD_ADDR_VAR 0 2
13721: PUSH
13722: LD_STRING #Multi1x1-Time
13724: PUSH
13725: LD_OWVAR 1
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: ST_TO_ADDR
// if WaitServerStrings then
13734: LD_EXP 60
13738: IFFALSE 13756
// AllStrings = AllStrings ^ WaitServerStrings ;
13740: LD_ADDR_VAR 0 2
13744: PUSH
13745: LD_VAR 0 2
13749: PUSH
13750: LD_EXP 60
13754: ADD
13755: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
13756: LD_INT 0
13758: PUSH
13759: LD_EXP 16
13763: PUSH
13764: LD_OWVAR 1
13768: MINUS
13769: LESSEQUAL
13770: IFFALSE 13801
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
13772: LD_ADDR_VAR 0 2
13776: PUSH
13777: LD_VAR 0 2
13781: PUSH
13782: LD_STRING #allowedsibbomb
13784: PUSH
13785: LD_EXP 16
13789: PUSH
13790: LD_OWVAR 1
13794: MINUS
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: ADD
13800: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
13801: LD_INT 0
13803: PUSH
13804: LD_EXP 14
13808: PUSH
13809: LD_OWVAR 1
13813: MINUS
13814: LESSEQUAL
13815: IFFALSE 13846
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
13817: LD_ADDR_VAR 0 2
13821: PUSH
13822: LD_VAR 0 2
13826: PUSH
13827: LD_STRING #builduptime
13829: PUSH
13830: LD_EXP 14
13834: PUSH
13835: LD_OWVAR 1
13839: MINUS
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: ADD
13845: ST_TO_ADDR
// if ( ExtraStrings ) then
13846: LD_EXP 59
13850: IFFALSE 13872
// AllStrings := AllStrings ^  ^ ExtraStrings ;
13852: LD_ADDR_VAR 0 2
13856: PUSH
13857: LD_VAR 0 2
13861: PUSH
13862: LD_STRING 
13864: ADD
13865: PUSH
13866: LD_EXP 59
13870: ADD
13871: ST_TO_ADDR
// if ( LimitsStrings ) then
13872: CALL 10574 0 0
13876: IFFALSE 13898
// AllStrings := AllStrings ^  ^ LimitsStrings ;
13878: LD_ADDR_VAR 0 2
13882: PUSH
13883: LD_VAR 0 2
13887: PUSH
13888: LD_STRING 
13890: ADD
13891: PUSH
13892: CALL 10574 0 0
13896: ADD
13897: ST_TO_ADDR
// if debug_strings then
13898: LD_OWVAR 48
13902: IFFALSE 13924
// AllStrings := AllStrings ^  ^ debug_strings ;
13904: LD_ADDR_VAR 0 2
13908: PUSH
13909: LD_VAR 0 2
13913: PUSH
13914: LD_STRING 
13916: ADD
13917: PUSH
13918: LD_OWVAR 48
13922: ADD
13923: ST_TO_ADDR
// Display_Strings := AllStrings ;
13924: LD_ADDR_OWVAR 47
13928: PUSH
13929: LD_VAR 0 2
13933: ST_TO_ADDR
// end ;
13934: LD_VAR 0 1
13938: RET
// every 0 0$1 do
13939: GO 13941
13941: DISABLE
// begin ShowTimer ;
13942: CALL 13713 0 0
// enable ;
13946: ENABLE
// end ; end_of_file
13947: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
13948: LD_INT 0
13950: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
13951: LD_VAR 0 1
13955: PPUSH
13956: CALL_OW 255
13960: PUSH
13961: LD_VAR 0 4
13965: EQUAL
13966: IFFALSE 13985
// begin SetAchievement ( ACH_RAD ) ;
13968: LD_STRING ACH_RAD
13970: PPUSH
13971: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
13975: LD_STRING ACH_NL
13977: PPUSH
13978: LD_INT 1
13980: PPUSH
13981: CALL_OW 564
// end end ;
13985: LD_VAR 0 5
13989: RET
// export function SA_Win ( side ) ; begin
13990: LD_INT 0
13992: PPUSH
// case side of 1 :
13993: LD_VAR 0 1
13997: PUSH
13998: LD_INT 1
14000: DOUBLE
14001: EQUAL
14002: IFTRUE 14006
14004: GO 14019
14006: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
14007: LD_STRING ACH_AH
14009: PPUSH
14010: LD_INT 1
14012: PPUSH
14013: CALL_OW 564
14017: GO 14182
14019: LD_INT 2
14021: DOUBLE
14022: EQUAL
14023: IFTRUE 14027
14025: GO 14040
14027: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
14028: LD_STRING ACH_E
14030: PPUSH
14031: LD_INT 1
14033: PPUSH
14034: CALL_OW 564
14038: GO 14182
14040: LD_INT 3
14042: DOUBLE
14043: EQUAL
14044: IFTRUE 14048
14046: GO 14061
14048: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
14049: LD_STRING ACH_OOL
14051: PPUSH
14052: LD_INT 1
14054: PPUSH
14055: CALL_OW 564
14059: GO 14182
14061: LD_INT 1
14063: PUSH
14064: LD_INT 2
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: DOUBLE
14071: EQUAL
14072: IFTRUE 14076
14074: GO 14101
14076: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14077: LD_STRING ACH_AH
14079: PPUSH
14080: LD_REAL  5.00000000000000E-0001
14083: PPUSH
14084: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14088: LD_STRING ACH_E
14090: PPUSH
14091: LD_REAL  5.00000000000000E-0001
14094: PPUSH
14095: CALL_OW 564
// end ; [ 2 , 3 ] :
14099: GO 14182
14101: LD_INT 2
14103: PUSH
14104: LD_INT 3
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: DOUBLE
14111: EQUAL
14112: IFTRUE 14116
14114: GO 14141
14116: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14117: LD_STRING ACH_OOL
14119: PPUSH
14120: LD_REAL  5.00000000000000E-0001
14123: PPUSH
14124: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14128: LD_STRING ACH_E
14130: PPUSH
14131: LD_REAL  5.00000000000000E-0001
14134: PPUSH
14135: CALL_OW 564
// end ; [ 3 , 1 ] :
14139: GO 14182
14141: LD_INT 3
14143: PUSH
14144: LD_INT 1
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: DOUBLE
14151: EQUAL
14152: IFTRUE 14156
14154: GO 14181
14156: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14157: LD_STRING ACH_AH
14159: PPUSH
14160: LD_REAL  5.00000000000000E-0001
14163: PPUSH
14164: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14168: LD_STRING ACH_OOL
14170: PPUSH
14171: LD_REAL  5.00000000000000E-0001
14174: PPUSH
14175: CALL_OW 564
// end ; end ;
14179: GO 14182
14181: POP
// end ; end_of_file
14182: LD_VAR 0 2
14186: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
14187: LD_INT 0
14189: PPUSH
14190: PPUSH
// enable ( 98 ) ;
14191: LD_INT 98
14193: ENABLE_MARKED
// GameEnded = false ;
14194: LD_ADDR_LOC 30
14198: PUSH
14199: LD_INT 0
14201: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14202: LD_ADDR_LOC 29
14206: PUSH
14207: LD_INT 0
14209: PUSH
14210: LD_INT 0
14212: PUSH
14213: LD_INT 0
14215: PUSH
14216: LD_INT 0
14218: PUSH
14219: LD_INT 0
14221: PUSH
14222: LD_INT 0
14224: PUSH
14225: LD_INT 0
14227: PUSH
14228: LD_INT 0
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: ST_TO_ADDR
// unfoged = false ;
14241: LD_ADDR_LOC 31
14245: PUSH
14246: LD_INT 0
14248: ST_TO_ADDR
// for i = 1 to side_positions do
14249: LD_ADDR_VAR 0 2
14253: PUSH
14254: DOUBLE
14255: LD_INT 1
14257: DEC
14258: ST_TO_ADDR
14259: LD_EXP 19
14263: PUSH
14264: FOR_TO
14265: IFFALSE 14305
// if not side_positions [ i ] then
14267: LD_EXP 19
14271: PUSH
14272: LD_VAR 0 2
14276: ARRAY
14277: NOT
14278: IFFALSE 14303
// defaited = replace ( defaited , i , true ) ;
14280: LD_ADDR_LOC 29
14284: PUSH
14285: LD_LOC 29
14289: PPUSH
14290: LD_VAR 0 2
14294: PPUSH
14295: LD_INT 1
14297: PPUSH
14298: CALL_OW 1
14302: ST_TO_ADDR
14303: GO 14264
14305: POP
14306: POP
// end ;
14307: LD_VAR 0 1
14311: RET
// function CanWinLoose ; begin
14312: LD_INT 0
14314: PPUSH
// Result := true ;
14315: LD_ADDR_VAR 0 1
14319: PUSH
14320: LD_INT 1
14322: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
14323: CALL_OW 518
14327: PUSH
14328: CALL_OW 519
14332: PUSH
14333: LD_INT 0
14335: GREATER
14336: AND
14337: IFFALSE 14347
// Result := false ;
14339: LD_ADDR_VAR 0 1
14343: PUSH
14344: LD_INT 0
14346: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14347: CALL_OW 531
14351: PUSH
14352: CALL_OW 519
14356: PUSH
14357: LD_INT 1
14359: GREATER
14360: AND
14361: IFFALSE 14371
// Result := false ;
14363: LD_ADDR_VAR 0 1
14367: PUSH
14368: LD_INT 0
14370: ST_TO_ADDR
// end ;
14371: LD_VAR 0 1
14375: RET
// export function HasPower ( i ) ; var k , h ; begin
14376: LD_INT 0
14378: PPUSH
14379: PPUSH
14380: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
14381: LD_VAR 0 1
14385: PPUSH
14386: CALL_OW 108
14390: NOT
14391: PUSH
14392: LD_EXP 22
14396: PUSH
14397: LD_VAR 0 1
14401: ARRAY
14402: NOT
14403: AND
14404: PUSH
14405: LD_OWVAR 4
14409: AND
14410: IFFALSE 14422
// begin result = false ;
14412: LD_ADDR_VAR 0 2
14416: PUSH
14417: LD_INT 0
14419: ST_TO_ADDR
// end else
14420: GO 14717
// case def_win_rules of 0 :
14422: LD_EXP 32
14426: PUSH
14427: LD_INT 0
14429: DOUBLE
14430: EQUAL
14431: IFTRUE 14435
14433: GO 14598
14435: POP
// if def_people_respawning then
14436: LD_EXP 54
14440: IFFALSE 14531
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
14442: LD_ADDR_VAR 0 2
14446: PUSH
14447: LD_INT 22
14449: PUSH
14450: LD_VAR 0 1
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 2
14461: PUSH
14462: LD_INT 21
14464: PUSH
14465: LD_INT 1
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 33
14474: PUSH
14475: LD_INT 3
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: LD_INT 33
14484: PUSH
14485: LD_INT 5
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: PUSH
14492: LD_INT 30
14494: PUSH
14495: LD_INT 0
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 30
14504: PUSH
14505: LD_INT 1
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PPUSH
14524: CALL_OW 69
14528: ST_TO_ADDR
14529: GO 14596
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
14531: LD_ADDR_VAR 0 2
14535: PUSH
14536: LD_INT 22
14538: PUSH
14539: LD_VAR 0 1
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 2
14550: PUSH
14551: LD_INT 21
14553: PUSH
14554: LD_INT 1
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 33
14563: PUSH
14564: LD_INT 3
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 33
14573: PUSH
14574: LD_INT 5
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PPUSH
14591: CALL_OW 69
14595: ST_TO_ADDR
14596: GO 14717
14598: LD_INT 1
14600: DOUBLE
14601: EQUAL
14602: IFTRUE 14606
14604: GO 14645
14606: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
14607: LD_ADDR_VAR 0 2
14611: PUSH
14612: LD_INT 22
14614: PUSH
14615: LD_VAR 0 1
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 21
14626: PUSH
14627: LD_INT 1
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PPUSH
14638: CALL_OW 69
14642: ST_TO_ADDR
14643: GO 14717
14645: LD_INT 2
14647: DOUBLE
14648: EQUAL
14649: IFTRUE 14653
14651: GO 14716
14653: POP
// begin h = false ;
14654: LD_ADDR_VAR 0 4
14658: PUSH
14659: LD_INT 0
14661: ST_TO_ADDR
// for k in heroes [ i ] do
14662: LD_ADDR_VAR 0 3
14666: PUSH
14667: LD_EXP 33
14671: PUSH
14672: LD_VAR 0 1
14676: ARRAY
14677: PUSH
14678: FOR_IN
14679: IFFALSE 14702
// if IsLive ( k ) then
14681: LD_VAR 0 3
14685: PPUSH
14686: CALL_OW 300
14690: IFFALSE 14700
// h = true ;
14692: LD_ADDR_VAR 0 4
14696: PUSH
14697: LD_INT 1
14699: ST_TO_ADDR
14700: GO 14678
14702: POP
14703: POP
// Result := h ;
14704: LD_ADDR_VAR 0 2
14708: PUSH
14709: LD_VAR 0 4
14713: ST_TO_ADDR
// end ; end ;
14714: GO 14717
14716: POP
// end ;
14717: LD_VAR 0 2
14721: RET
// function AlliedSides ( i , j ) ; begin
14722: LD_INT 0
14724: PPUSH
// Result := false ;
14725: LD_ADDR_VAR 0 3
14729: PUSH
14730: LD_INT 0
14732: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
14733: LD_VAR 0 1
14737: PPUSH
14738: LD_VAR 0 2
14742: PPUSH
14743: CALL_OW 81
14747: PUSH
14748: LD_INT 1
14750: EQUAL
14751: PUSH
14752: LD_VAR 0 2
14756: PPUSH
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL_OW 81
14766: PUSH
14767: LD_INT 1
14769: EQUAL
14770: AND
14771: PUSH
14772: LD_VAR 0 1
14776: PPUSH
14777: CALL_OW 83
14781: AND
14782: PUSH
14783: LD_VAR 0 2
14787: PPUSH
14788: CALL_OW 83
14792: AND
14793: IFFALSE 14803
// Result := true ;
14795: LD_ADDR_VAR 0 3
14799: PUSH
14800: LD_INT 1
14802: ST_TO_ADDR
// end ;
14803: LD_VAR 0 3
14807: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
14808: CALL 14312 0 0
14812: PUSH
14813: LD_LOC 30
14817: NOT
14818: AND
14819: IFFALSE 14835
14821: GO 14823
14823: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
14824: LD_ADDR_EXP 60
14828: PUSH
14829: LD_STRING #Player-Ended
14831: PUSH
14832: EMPTY
14833: LIST
14834: ST_TO_ADDR
14835: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
14836: CALL 14312 0 0
14840: PUSH
14841: LD_LOC 30
14845: AND
14846: IFFALSE 14855
14848: GO 14850
14850: DISABLE
// YouLostInMultiplayer ;
14851: CALL_OW 107
14855: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
14856: CALL 14312 0 0
14860: NOT
14861: PUSH
14862: CALL_OW 531
14866: NOT
14867: AND
14868: IFFALSE 14884
14870: GO 14872
14872: DISABLE
// WaitServerStrings = [ #server-wait ] ;
14873: LD_ADDR_EXP 60
14877: PUSH
14878: LD_STRING #server-wait
14880: PUSH
14881: EMPTY
14882: LIST
14883: ST_TO_ADDR
14884: END
// every 100 trigger IAmSpec do
14885: CALL_OW 531
14889: IFFALSE 14905
14891: GO 14893
14893: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
14894: LD_ADDR_EXP 60
14898: PUSH
14899: LD_STRING #Player-IAmSpec
14901: PUSH
14902: EMPTY
14903: LIST
14904: ST_TO_ADDR
14905: END
// every 100 trigger GameEnded and IAmSpec do
14906: LD_LOC 30
14910: PUSH
14911: CALL_OW 531
14915: AND
14916: IFFALSE 14925
14918: GO 14920
14920: DISABLE
// YouLostInMultiplayer ;
14921: CALL_OW 107
14925: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
14926: CALL 14312 0 0
14930: PUSH
14931: LD_LOC 30
14935: NOT
14936: AND
14937: IFFALSE 14953
14939: GO 14941
14941: DISABLE
// WaitServerStrings = [ $player-win ] ;
14942: LD_ADDR_EXP 60
14946: PUSH
14947: LD_STRING $player-win
14949: PUSH
14950: EMPTY
14951: LIST
14952: ST_TO_ADDR
14953: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
14954: CALL 14312 0 0
14958: PUSH
14959: LD_LOC 30
14963: AND
14964: IFFALSE 14988
14966: GO 14968
14968: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
14969: LD_EXP 20
14973: PUSH
14974: LD_OWVAR 2
14978: ARRAY
14979: PPUSH
14980: CALL 13990 0 1
// YouWinInMultiplayer ;
14984: CALL_OW 106
// end ;
14988: END
// every 100 trigger isEditor marked 401 do
14989: LD_OWVAR 84
14993: IFFALSE 15009
14995: GO 14997
14997: DISABLE
// Debug_Strings = [ You won ] ;
14998: LD_ADDR_OWVAR 48
15002: PUSH
15003: LD_STRING You won
15005: PUSH
15006: EMPTY
15007: LIST
15008: ST_TO_ADDR
15009: END
// every 100 trigger isEditor marked 400 do
15010: LD_OWVAR 84
15014: IFFALSE 15030
15016: GO 15018
15018: DISABLE
// Debug_Strings = [ You loss ] ;
15019: LD_ADDR_OWVAR 48
15023: PUSH
15024: LD_STRING You loss
15026: PUSH
15027: EMPTY
15028: LIST
15029: ST_TO_ADDR
15030: END
// every 100 marked 98 do var i , un ;
15031: GO 15033
15033: DISABLE
15034: LD_INT 0
15036: PPUSH
15037: PPUSH
// begin for i = 1 to side_positions do
15038: LD_ADDR_VAR 0 1
15042: PUSH
15043: DOUBLE
15044: LD_INT 1
15046: DEC
15047: ST_TO_ADDR
15048: LD_EXP 19
15052: PUSH
15053: FOR_TO
15054: IFFALSE 15137
// if side_positions [ i ] then
15056: LD_EXP 19
15060: PUSH
15061: LD_VAR 0 1
15065: ARRAY
15066: IFFALSE 15135
// if not HasPower ( i ) and not Defaited [ i ] then
15068: LD_VAR 0 1
15072: PPUSH
15073: CALL 14376 0 1
15077: NOT
15078: PUSH
15079: LD_LOC 29
15083: PUSH
15084: LD_VAR 0 1
15088: ARRAY
15089: NOT
15090: AND
15091: IFFALSE 15135
// begin Defaited = replace ( Defaited , i , true ) ;
15093: LD_ADDR_LOC 29
15097: PUSH
15098: LD_LOC 29
15102: PPUSH
15103: LD_VAR 0 1
15107: PPUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 1
15115: ST_TO_ADDR
// if i = your_side then
15116: LD_VAR 0 1
15120: PUSH
15121: LD_OWVAR 2
15125: EQUAL
15126: IFFALSE 15135
// begin Multiplayer_Loose_Message ;
15128: CALL_OW 521
// enable ( 400 ) ;
15132: LD_INT 400
15134: ENABLE_MARKED
// end ; end ;
15135: GO 15053
15137: POP
15138: POP
// if not Unfoged and defaited [ your_side ] then
15139: LD_LOC 31
15143: NOT
15144: PUSH
15145: LD_LOC 29
15149: PUSH
15150: LD_OWVAR 2
15154: ARRAY
15155: AND
15156: IFFALSE 15162
// Unfog ;
15158: CALL 15338 0 0
// DidGameEnd ;
15162: CALL 15177 0 0
// if not GameEnded then
15166: LD_LOC 30
15170: NOT
15171: IFFALSE 15174
// enable ;
15173: ENABLE
// end ;
15174: PPOPN 2
15176: END
// function DidGameEnd ; var i , k , enemy ; begin
15177: LD_INT 0
15179: PPUSH
15180: PPUSH
15181: PPUSH
15182: PPUSH
// enemy = [ ] ;
15183: LD_ADDR_VAR 0 4
15187: PUSH
15188: EMPTY
15189: ST_TO_ADDR
// for i = 1 to side_positions do
15190: LD_ADDR_VAR 0 2
15194: PUSH
15195: DOUBLE
15196: LD_INT 1
15198: DEC
15199: ST_TO_ADDR
15200: LD_EXP 19
15204: PUSH
15205: FOR_TO
15206: IFFALSE 15300
// if not defaited [ i ] then
15208: LD_LOC 29
15212: PUSH
15213: LD_VAR 0 2
15217: ARRAY
15218: NOT
15219: IFFALSE 15298
// for k = 1 to side_positions do
15221: LD_ADDR_VAR 0 3
15225: PUSH
15226: DOUBLE
15227: LD_INT 1
15229: DEC
15230: ST_TO_ADDR
15231: LD_EXP 19
15235: PUSH
15236: FOR_TO
15237: IFFALSE 15296
// if not defaited [ k ] then
15239: LD_LOC 29
15243: PUSH
15244: LD_VAR 0 3
15248: ARRAY
15249: NOT
15250: IFFALSE 15294
// if not AlliedSides ( i , k ) then
15252: LD_VAR 0 2
15256: PPUSH
15257: LD_VAR 0 3
15261: PPUSH
15262: CALL 14722 0 2
15266: NOT
15267: IFFALSE 15294
// enemy = enemy ^ [ i , k ] ;
15269: LD_ADDR_VAR 0 4
15273: PUSH
15274: LD_VAR 0 4
15278: PUSH
15279: LD_VAR 0 2
15283: PUSH
15284: LD_VAR 0 3
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: ADD
15293: ST_TO_ADDR
15294: GO 15236
15296: POP
15297: POP
15298: GO 15205
15300: POP
15301: POP
// if not enemy then
15302: LD_VAR 0 4
15306: NOT
15307: IFFALSE 15333
// begin GameEnded = true ;
15309: LD_ADDR_LOC 30
15313: PUSH
15314: LD_INT 1
15316: ST_TO_ADDR
// if not defaited [ your_side ] then
15317: LD_LOC 29
15321: PUSH
15322: LD_OWVAR 2
15326: ARRAY
15327: NOT
15328: IFFALSE 15333
// enable ( 401 ) ;
15330: LD_INT 401
15332: ENABLE_MARKED
// end ; end ;
15333: LD_VAR 0 1
15337: RET
// function unfog ; var k , friends ; begin
15338: LD_INT 0
15340: PPUSH
15341: PPUSH
15342: PPUSH
// SetPlayerSpectator ( ) ;
15343: CALL_OW 572
// unfoged = true ;
15347: LD_ADDR_LOC 31
15351: PUSH
15352: LD_INT 1
15354: ST_TO_ADDR
// end ;
15355: LD_VAR 0 1
15359: RET
// export function MakeGameEnd ; begin
15360: LD_INT 0
15362: PPUSH
// SetPlayerSpectator ( ) ;
15363: CALL_OW 572
// unfoged = true ;
15367: LD_ADDR_LOC 31
15371: PUSH
15372: LD_INT 1
15374: ST_TO_ADDR
// wait ( 0 0$5 ) ;
15375: LD_INT 175
15377: PPUSH
15378: CALL_OW 67
// GameEnded = true ;
15382: LD_ADDR_LOC 30
15386: PUSH
15387: LD_INT 1
15389: ST_TO_ADDR
// end ;
15390: LD_VAR 0 1
15394: RET
// export function GetGameEnded ; begin
15395: LD_INT 0
15397: PPUSH
// result = GameEnded ;
15398: LD_ADDR_VAR 0 1
15402: PUSH
15403: LD_LOC 30
15407: ST_TO_ADDR
// end ; end_of_file
15408: LD_VAR 0 1
15412: RET
// export function SetMpTechs ( ) ; var side , i ; begin
15413: LD_INT 0
15415: PPUSH
15416: PPUSH
15417: PPUSH
// for side = 1 to 8 do
15418: LD_ADDR_VAR 0 2
15422: PUSH
15423: DOUBLE
15424: LD_INT 1
15426: DEC
15427: ST_TO_ADDR
15428: LD_INT 8
15430: PUSH
15431: FOR_TO
15432: IFFALSE 15553
// begin for i = 1 to 72 do
15434: LD_ADDR_VAR 0 3
15438: PUSH
15439: DOUBLE
15440: LD_INT 1
15442: DEC
15443: ST_TO_ADDR
15444: LD_INT 72
15446: PUSH
15447: FOR_TO
15448: IFFALSE 15479
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15450: LD_VAR 0 3
15454: PPUSH
15455: LD_VAR 0 2
15459: PPUSH
15460: LD_INT 0
15462: PPUSH
15463: LD_VAR 0 3
15467: PPUSH
15468: CALL_OW 565
15472: PPUSH
15473: CALL_OW 322
15477: GO 15447
15479: POP
15480: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15481: LD_INT 73
15483: PPUSH
15484: LD_VAR 0 2
15488: PPUSH
15489: LD_INT 0
15491: PPUSH
15492: LD_INT 25
15494: PPUSH
15495: CALL_OW 565
15499: PPUSH
15500: CALL_OW 322
// for i = 0 to 40 do
15504: LD_ADDR_VAR 0 3
15508: PUSH
15509: DOUBLE
15510: LD_INT 0
15512: DEC
15513: ST_TO_ADDR
15514: LD_INT 40
15516: PUSH
15517: FOR_TO
15518: IFFALSE 15549
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15520: LD_VAR 0 3
15524: PPUSH
15525: LD_VAR 0 2
15529: PPUSH
15530: LD_INT 1
15532: PPUSH
15533: LD_VAR 0 3
15537: PPUSH
15538: CALL_OW 565
15542: PPUSH
15543: CALL_OW 324
15547: GO 15517
15549: POP
15550: POP
// end ;
15551: GO 15431
15553: POP
15554: POP
// end ;
15555: LD_VAR 0 1
15559: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15560: LD_INT 0
15562: PPUSH
15563: PPUSH
15564: PPUSH
// for side = 1 to 8 do
15565: LD_ADDR_VAR 0 3
15569: PUSH
15570: DOUBLE
15571: LD_INT 1
15573: DEC
15574: ST_TO_ADDR
15575: LD_INT 8
15577: PUSH
15578: FOR_TO
15579: IFFALSE 19575
// begin for i = 1 to 73 do
15581: LD_ADDR_VAR 0 4
15585: PUSH
15586: DOUBLE
15587: LD_INT 1
15589: DEC
15590: ST_TO_ADDR
15591: LD_INT 73
15593: PUSH
15594: FOR_TO
15595: IFFALSE 15616
// SetTech ( i , side , state_disabled ) ;
15597: LD_VAR 0 4
15601: PPUSH
15602: LD_VAR 0 3
15606: PPUSH
15607: LD_INT 0
15609: PPUSH
15610: CALL_OW 322
15614: GO 15594
15616: POP
15617: POP
// for i = 0 to 40 do
15618: LD_ADDR_VAR 0 4
15622: PUSH
15623: DOUBLE
15624: LD_INT 0
15626: DEC
15627: ST_TO_ADDR
15628: LD_INT 40
15630: PUSH
15631: FOR_TO
15632: IFFALSE 15653
// SetRestrict ( i , side , false ) ;
15634: LD_VAR 0 4
15638: PPUSH
15639: LD_VAR 0 3
15643: PPUSH
15644: LD_INT 0
15646: PPUSH
15647: CALL_OW 324
15651: GO 15631
15653: POP
15654: POP
// case level of 1 :
15655: LD_VAR 0 1
15659: PUSH
15660: LD_INT 1
15662: DOUBLE
15663: EQUAL
15664: IFTRUE 15668
15666: GO 15821
15668: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15669: LD_INT 35
15671: PPUSH
15672: LD_VAR 0 3
15676: PPUSH
15677: LD_INT 1
15679: PPUSH
15680: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15684: LD_INT 45
15686: PPUSH
15687: LD_VAR 0 3
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15699: LD_INT 46
15701: PPUSH
15702: LD_VAR 0 3
15706: PPUSH
15707: LD_INT 1
15709: PPUSH
15710: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15714: LD_INT 47
15716: PPUSH
15717: LD_VAR 0 3
15721: PPUSH
15722: LD_INT 1
15724: PPUSH
15725: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15729: LD_INT 0
15731: PPUSH
15732: LD_VAR 0 3
15736: PPUSH
15737: LD_INT 1
15739: PPUSH
15740: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15744: LD_INT 2
15746: PPUSH
15747: LD_VAR 0 3
15751: PPUSH
15752: LD_INT 1
15754: PPUSH
15755: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15759: LD_INT 4
15761: PPUSH
15762: LD_VAR 0 3
15766: PPUSH
15767: LD_INT 1
15769: PPUSH
15770: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15774: LD_INT 6
15776: PPUSH
15777: LD_VAR 0 3
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15789: LD_INT 29
15791: PPUSH
15792: LD_VAR 0 3
15796: PPUSH
15797: LD_INT 1
15799: PPUSH
15800: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15804: LD_INT 31
15806: PPUSH
15807: LD_VAR 0 3
15811: PPUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 324
// end ; 2 :
15819: GO 19573
15821: LD_INT 2
15823: DOUBLE
15824: EQUAL
15825: IFTRUE 15829
15827: GO 16027
15829: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15830: LD_INT 35
15832: PPUSH
15833: LD_VAR 0 3
15837: PPUSH
15838: LD_INT 1
15840: PPUSH
15841: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15845: LD_INT 45
15847: PPUSH
15848: LD_VAR 0 3
15852: PPUSH
15853: LD_INT 1
15855: PPUSH
15856: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15860: LD_INT 46
15862: PPUSH
15863: LD_VAR 0 3
15867: PPUSH
15868: LD_INT 1
15870: PPUSH
15871: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15875: LD_INT 47
15877: PPUSH
15878: LD_VAR 0 3
15882: PPUSH
15883: LD_INT 1
15885: PPUSH
15886: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15890: LD_INT 1
15892: PPUSH
15893: LD_VAR 0 3
15897: PPUSH
15898: LD_INT 1
15900: PPUSH
15901: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15905: LD_INT 2
15907: PPUSH
15908: LD_VAR 0 3
15912: PPUSH
15913: LD_INT 1
15915: PPUSH
15916: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15920: LD_INT 11
15922: PPUSH
15923: LD_VAR 0 3
15927: PPUSH
15928: LD_INT 1
15930: PPUSH
15931: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15935: LD_INT 0
15937: PPUSH
15938: LD_VAR 0 3
15942: PPUSH
15943: LD_INT 1
15945: PPUSH
15946: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15950: LD_INT 2
15952: PPUSH
15953: LD_VAR 0 3
15957: PPUSH
15958: LD_INT 1
15960: PPUSH
15961: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15965: LD_INT 4
15967: PPUSH
15968: LD_VAR 0 3
15972: PPUSH
15973: LD_INT 1
15975: PPUSH
15976: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15980: LD_INT 6
15982: PPUSH
15983: LD_VAR 0 3
15987: PPUSH
15988: LD_INT 1
15990: PPUSH
15991: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15995: LD_INT 29
15997: PPUSH
15998: LD_VAR 0 3
16002: PPUSH
16003: LD_INT 1
16005: PPUSH
16006: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16010: LD_INT 31
16012: PPUSH
16013: LD_VAR 0 3
16017: PPUSH
16018: LD_INT 1
16020: PPUSH
16021: CALL_OW 324
// end ; 3 :
16025: GO 19573
16027: LD_INT 3
16029: DOUBLE
16030: EQUAL
16031: IFTRUE 16035
16033: GO 16488
16035: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16036: LD_INT 35
16038: PPUSH
16039: LD_VAR 0 3
16043: PPUSH
16044: LD_INT 1
16046: PPUSH
16047: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16051: LD_INT 45
16053: PPUSH
16054: LD_VAR 0 3
16058: PPUSH
16059: LD_INT 1
16061: PPUSH
16062: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16066: LD_INT 46
16068: PPUSH
16069: LD_VAR 0 3
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16081: LD_INT 47
16083: PPUSH
16084: LD_VAR 0 3
16088: PPUSH
16089: LD_INT 1
16091: PPUSH
16092: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16096: LD_INT 1
16098: PPUSH
16099: LD_VAR 0 3
16103: PPUSH
16104: LD_INT 1
16106: PPUSH
16107: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16111: LD_INT 2
16113: PPUSH
16114: LD_VAR 0 3
16118: PPUSH
16119: LD_INT 1
16121: PPUSH
16122: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16126: LD_INT 11
16128: PPUSH
16129: LD_VAR 0 3
16133: PPUSH
16134: LD_INT 1
16136: PPUSH
16137: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16141: LD_INT 48
16143: PPUSH
16144: LD_VAR 0 3
16148: PPUSH
16149: LD_INT 1
16151: PPUSH
16152: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16156: LD_INT 69
16158: PPUSH
16159: LD_VAR 0 3
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16171: LD_INT 39
16173: PPUSH
16174: LD_VAR 0 3
16178: PPUSH
16179: LD_INT 1
16181: PPUSH
16182: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16186: LD_INT 43
16188: PPUSH
16189: LD_VAR 0 3
16193: PPUSH
16194: LD_INT 1
16196: PPUSH
16197: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16201: LD_INT 51
16203: PPUSH
16204: LD_VAR 0 3
16208: PPUSH
16209: LD_INT 1
16211: PPUSH
16212: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16216: LD_INT 6
16218: PPUSH
16219: LD_VAR 0 3
16223: PPUSH
16224: LD_INT 1
16226: PPUSH
16227: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16231: LD_INT 0
16233: PPUSH
16234: LD_VAR 0 3
16238: PPUSH
16239: LD_INT 1
16241: PPUSH
16242: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16246: LD_INT 2
16248: PPUSH
16249: LD_VAR 0 3
16253: PPUSH
16254: LD_INT 1
16256: PPUSH
16257: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16261: LD_INT 3
16263: PPUSH
16264: LD_VAR 0 3
16268: PPUSH
16269: LD_INT 1
16271: PPUSH
16272: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16276: LD_INT 4
16278: PPUSH
16279: LD_VAR 0 3
16283: PPUSH
16284: LD_INT 1
16286: PPUSH
16287: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16291: LD_INT 6
16293: PPUSH
16294: LD_VAR 0 3
16298: PPUSH
16299: LD_INT 1
16301: PPUSH
16302: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16306: LD_INT 7
16308: PPUSH
16309: LD_VAR 0 3
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16321: LD_INT 8
16323: PPUSH
16324: LD_VAR 0 3
16328: PPUSH
16329: LD_INT 1
16331: PPUSH
16332: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16336: LD_INT 10
16338: PPUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: LD_INT 1
16346: PPUSH
16347: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16351: LD_INT 15
16353: PPUSH
16354: LD_VAR 0 3
16358: PPUSH
16359: LD_INT 1
16361: PPUSH
16362: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16366: LD_INT 16
16368: PPUSH
16369: LD_VAR 0 3
16373: PPUSH
16374: LD_INT 1
16376: PPUSH
16377: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16381: LD_INT 17
16383: PPUSH
16384: LD_VAR 0 3
16388: PPUSH
16389: LD_INT 1
16391: PPUSH
16392: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16396: LD_INT 20
16398: PPUSH
16399: LD_VAR 0 3
16403: PPUSH
16404: LD_INT 1
16406: PPUSH
16407: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16411: LD_INT 26
16413: PPUSH
16414: LD_VAR 0 3
16418: PPUSH
16419: LD_INT 1
16421: PPUSH
16422: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16426: LD_INT 27
16428: PPUSH
16429: LD_VAR 0 3
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16441: LD_INT 29
16443: PPUSH
16444: LD_VAR 0 3
16448: PPUSH
16449: LD_INT 1
16451: PPUSH
16452: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16456: LD_INT 31
16458: PPUSH
16459: LD_VAR 0 3
16463: PPUSH
16464: LD_INT 1
16466: PPUSH
16467: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16471: LD_INT 32
16473: PPUSH
16474: LD_VAR 0 3
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: CALL_OW 324
// end ; 4 :
16486: GO 19573
16488: LD_INT 4
16490: DOUBLE
16491: EQUAL
16492: IFTRUE 16496
16494: GO 17444
16496: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16497: LD_INT 35
16499: PPUSH
16500: LD_VAR 0 3
16504: PPUSH
16505: LD_INT 1
16507: PPUSH
16508: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16512: LD_INT 45
16514: PPUSH
16515: LD_VAR 0 3
16519: PPUSH
16520: LD_INT 1
16522: PPUSH
16523: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16527: LD_INT 46
16529: PPUSH
16530: LD_VAR 0 3
16534: PPUSH
16535: LD_INT 1
16537: PPUSH
16538: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16542: LD_INT 47
16544: PPUSH
16545: LD_VAR 0 3
16549: PPUSH
16550: LD_INT 1
16552: PPUSH
16553: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16557: LD_INT 1
16559: PPUSH
16560: LD_VAR 0 3
16564: PPUSH
16565: LD_INT 1
16567: PPUSH
16568: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16572: LD_INT 2
16574: PPUSH
16575: LD_VAR 0 3
16579: PPUSH
16580: LD_INT 1
16582: PPUSH
16583: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16587: LD_INT 11
16589: PPUSH
16590: LD_VAR 0 3
16594: PPUSH
16595: LD_INT 1
16597: PPUSH
16598: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16602: LD_INT 20
16604: PPUSH
16605: LD_VAR 0 3
16609: PPUSH
16610: LD_INT 1
16612: PPUSH
16613: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16617: LD_INT 48
16619: PPUSH
16620: LD_VAR 0 3
16624: PPUSH
16625: LD_INT 1
16627: PPUSH
16628: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16632: LD_INT 49
16634: PPUSH
16635: LD_VAR 0 3
16639: PPUSH
16640: LD_INT 1
16642: PPUSH
16643: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16647: LD_INT 69
16649: PPUSH
16650: LD_VAR 0 3
16654: PPUSH
16655: LD_INT 1
16657: PPUSH
16658: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16662: LD_INT 39
16664: PPUSH
16665: LD_VAR 0 3
16669: PPUSH
16670: LD_INT 1
16672: PPUSH
16673: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16677: LD_INT 34
16679: PPUSH
16680: LD_VAR 0 3
16684: PPUSH
16685: LD_INT 1
16687: PPUSH
16688: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16692: LD_INT 42
16694: PPUSH
16695: LD_VAR 0 3
16699: PPUSH
16700: LD_INT 1
16702: PPUSH
16703: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16707: LD_INT 44
16709: PPUSH
16710: LD_VAR 0 3
16714: PPUSH
16715: LD_INT 1
16717: PPUSH
16718: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16722: LD_INT 41
16724: PPUSH
16725: LD_VAR 0 3
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16737: LD_INT 43
16739: PPUSH
16740: LD_VAR 0 3
16744: PPUSH
16745: LD_INT 1
16747: PPUSH
16748: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16752: LD_INT 70
16754: PPUSH
16755: LD_VAR 0 3
16759: PPUSH
16760: LD_INT 1
16762: PPUSH
16763: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16767: LD_INT 51
16769: PPUSH
16770: LD_VAR 0 3
16774: PPUSH
16775: LD_INT 1
16777: PPUSH
16778: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16782: LD_INT 52
16784: PPUSH
16785: LD_VAR 0 3
16789: PPUSH
16790: LD_INT 1
16792: PPUSH
16793: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16797: LD_INT 6
16799: PPUSH
16800: LD_VAR 0 3
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16812: LD_INT 15
16814: PPUSH
16815: LD_VAR 0 3
16819: PPUSH
16820: LD_INT 1
16822: PPUSH
16823: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16827: LD_INT 7
16829: PPUSH
16830: LD_VAR 0 3
16834: PPUSH
16835: LD_INT 1
16837: PPUSH
16838: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16842: LD_INT 12
16844: PPUSH
16845: LD_VAR 0 3
16849: PPUSH
16850: LD_INT 1
16852: PPUSH
16853: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16857: LD_INT 18
16859: PPUSH
16860: LD_VAR 0 3
16864: PPUSH
16865: LD_INT 1
16867: PPUSH
16868: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16872: LD_INT 60
16874: PPUSH
16875: LD_VAR 0 3
16879: PPUSH
16880: LD_INT 1
16882: PPUSH
16883: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16887: LD_INT 9
16889: PPUSH
16890: LD_VAR 0 3
16894: PPUSH
16895: LD_INT 1
16897: PPUSH
16898: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16902: LD_INT 30
16904: PPUSH
16905: LD_VAR 0 3
16909: PPUSH
16910: LD_INT 1
16912: PPUSH
16913: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16917: LD_INT 37
16919: PPUSH
16920: LD_VAR 0 3
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16932: LD_INT 5
16934: PPUSH
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 1
16942: PPUSH
16943: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16947: LD_INT 66
16949: PPUSH
16950: LD_VAR 0 3
16954: PPUSH
16955: LD_INT 1
16957: PPUSH
16958: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16962: LD_INT 21
16964: PPUSH
16965: LD_VAR 0 3
16969: PPUSH
16970: LD_INT 1
16972: PPUSH
16973: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16977: LD_INT 22
16979: PPUSH
16980: LD_VAR 0 3
16984: PPUSH
16985: LD_INT 1
16987: PPUSH
16988: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16992: LD_INT 54
16994: PPUSH
16995: LD_VAR 0 3
16999: PPUSH
17000: LD_INT 1
17002: PPUSH
17003: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17007: LD_INT 0
17009: PPUSH
17010: LD_VAR 0 3
17014: PPUSH
17015: LD_INT 1
17017: PPUSH
17018: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17022: LD_INT 1
17024: PPUSH
17025: LD_VAR 0 3
17029: PPUSH
17030: LD_INT 1
17032: PPUSH
17033: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17037: LD_INT 2
17039: PPUSH
17040: LD_VAR 0 3
17044: PPUSH
17045: LD_INT 1
17047: PPUSH
17048: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17052: LD_INT 3
17054: PPUSH
17055: LD_VAR 0 3
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17067: LD_INT 4
17069: PPUSH
17070: LD_VAR 0 3
17074: PPUSH
17075: LD_INT 1
17077: PPUSH
17078: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17082: LD_INT 5
17084: PPUSH
17085: LD_VAR 0 3
17089: PPUSH
17090: LD_INT 1
17092: PPUSH
17093: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17097: LD_INT 6
17099: PPUSH
17100: LD_VAR 0 3
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17112: LD_INT 7
17114: PPUSH
17115: LD_VAR 0 3
17119: PPUSH
17120: LD_INT 1
17122: PPUSH
17123: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17127: LD_INT 8
17129: PPUSH
17130: LD_VAR 0 3
17134: PPUSH
17135: LD_INT 1
17137: PPUSH
17138: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17142: LD_INT 10
17144: PPUSH
17145: LD_VAR 0 3
17149: PPUSH
17150: LD_INT 1
17152: PPUSH
17153: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17157: LD_INT 11
17159: PPUSH
17160: LD_VAR 0 3
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17172: LD_INT 12
17174: PPUSH
17175: LD_VAR 0 3
17179: PPUSH
17180: LD_INT 1
17182: PPUSH
17183: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17187: LD_INT 13
17189: PPUSH
17190: LD_VAR 0 3
17194: PPUSH
17195: LD_INT 1
17197: PPUSH
17198: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17202: LD_INT 14
17204: PPUSH
17205: LD_VAR 0 3
17209: PPUSH
17210: LD_INT 1
17212: PPUSH
17213: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17217: LD_INT 15
17219: PPUSH
17220: LD_VAR 0 3
17224: PPUSH
17225: LD_INT 1
17227: PPUSH
17228: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17232: LD_INT 16
17234: PPUSH
17235: LD_VAR 0 3
17239: PPUSH
17240: LD_INT 1
17242: PPUSH
17243: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17247: LD_INT 17
17249: PPUSH
17250: LD_VAR 0 3
17254: PPUSH
17255: LD_INT 1
17257: PPUSH
17258: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17262: LD_INT 19
17264: PPUSH
17265: LD_VAR 0 3
17269: PPUSH
17270: LD_INT 1
17272: PPUSH
17273: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17277: LD_INT 20
17279: PPUSH
17280: LD_VAR 0 3
17284: PPUSH
17285: LD_INT 1
17287: PPUSH
17288: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17292: LD_INT 21
17294: PPUSH
17295: LD_VAR 0 3
17299: PPUSH
17300: LD_INT 1
17302: PPUSH
17303: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17307: LD_INT 23
17309: PPUSH
17310: LD_VAR 0 3
17314: PPUSH
17315: LD_INT 1
17317: PPUSH
17318: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17322: LD_INT 26
17324: PPUSH
17325: LD_VAR 0 3
17329: PPUSH
17330: LD_INT 1
17332: PPUSH
17333: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17337: LD_INT 27
17339: PPUSH
17340: LD_VAR 0 3
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17352: LD_INT 28
17354: PPUSH
17355: LD_VAR 0 3
17359: PPUSH
17360: LD_INT 1
17362: PPUSH
17363: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17367: LD_INT 29
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: LD_INT 1
17377: PPUSH
17378: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17382: LD_INT 30
17384: PPUSH
17385: LD_VAR 0 3
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17397: LD_INT 31
17399: PPUSH
17400: LD_VAR 0 3
17404: PPUSH
17405: LD_INT 1
17407: PPUSH
17408: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17412: LD_INT 32
17414: PPUSH
17415: LD_VAR 0 3
17419: PPUSH
17420: LD_INT 1
17422: PPUSH
17423: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17427: LD_INT 36
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_INT 1
17437: PPUSH
17438: CALL_OW 324
// end ; 5 :
17442: GO 19573
17444: LD_INT 5
17446: DOUBLE
17447: EQUAL
17448: IFTRUE 17452
17450: GO 18565
17452: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17453: LD_INT 35
17455: PPUSH
17456: LD_VAR 0 3
17460: PPUSH
17461: LD_INT 1
17463: PPUSH
17464: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17468: LD_INT 45
17470: PPUSH
17471: LD_VAR 0 3
17475: PPUSH
17476: LD_INT 1
17478: PPUSH
17479: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17483: LD_INT 46
17485: PPUSH
17486: LD_VAR 0 3
17490: PPUSH
17491: LD_INT 1
17493: PPUSH
17494: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17498: LD_INT 47
17500: PPUSH
17501: LD_VAR 0 3
17505: PPUSH
17506: LD_INT 1
17508: PPUSH
17509: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17513: LD_INT 1
17515: PPUSH
17516: LD_VAR 0 3
17520: PPUSH
17521: LD_INT 1
17523: PPUSH
17524: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17528: LD_INT 2
17530: PPUSH
17531: LD_VAR 0 3
17535: PPUSH
17536: LD_INT 1
17538: PPUSH
17539: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17543: LD_INT 11
17545: PPUSH
17546: LD_VAR 0 3
17550: PPUSH
17551: LD_INT 1
17553: PPUSH
17554: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17558: LD_INT 20
17560: PPUSH
17561: LD_VAR 0 3
17565: PPUSH
17566: LD_INT 1
17568: PPUSH
17569: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17573: LD_INT 48
17575: PPUSH
17576: LD_VAR 0 3
17580: PPUSH
17581: LD_INT 1
17583: PPUSH
17584: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17588: LD_INT 49
17590: PPUSH
17591: LD_VAR 0 3
17595: PPUSH
17596: LD_INT 1
17598: PPUSH
17599: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17603: LD_INT 69
17605: PPUSH
17606: LD_VAR 0 3
17610: PPUSH
17611: LD_INT 1
17613: PPUSH
17614: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17618: LD_INT 39
17620: PPUSH
17621: LD_VAR 0 3
17625: PPUSH
17626: LD_INT 1
17628: PPUSH
17629: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17633: LD_INT 34
17635: PPUSH
17636: LD_VAR 0 3
17640: PPUSH
17641: LD_INT 1
17643: PPUSH
17644: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17648: LD_INT 42
17650: PPUSH
17651: LD_VAR 0 3
17655: PPUSH
17656: LD_INT 1
17658: PPUSH
17659: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17663: LD_INT 44
17665: PPUSH
17666: LD_VAR 0 3
17670: PPUSH
17671: LD_INT 1
17673: PPUSH
17674: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17678: LD_INT 41
17680: PPUSH
17681: LD_VAR 0 3
17685: PPUSH
17686: LD_INT 1
17688: PPUSH
17689: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17693: LD_INT 40
17695: PPUSH
17696: LD_VAR 0 3
17700: PPUSH
17701: LD_INT 1
17703: PPUSH
17704: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17708: LD_INT 43
17710: PPUSH
17711: LD_VAR 0 3
17715: PPUSH
17716: LD_INT 1
17718: PPUSH
17719: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17723: LD_INT 70
17725: PPUSH
17726: LD_VAR 0 3
17730: PPUSH
17731: LD_INT 1
17733: PPUSH
17734: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17738: LD_INT 51
17740: PPUSH
17741: LD_VAR 0 3
17745: PPUSH
17746: LD_INT 1
17748: PPUSH
17749: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17753: LD_INT 52
17755: PPUSH
17756: LD_VAR 0 3
17760: PPUSH
17761: LD_INT 1
17763: PPUSH
17764: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17768: LD_INT 6
17770: PPUSH
17771: LD_VAR 0 3
17775: PPUSH
17776: LD_INT 1
17778: PPUSH
17779: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17783: LD_INT 15
17785: PPUSH
17786: LD_VAR 0 3
17790: PPUSH
17791: LD_INT 1
17793: PPUSH
17794: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17798: LD_INT 7
17800: PPUSH
17801: LD_VAR 0 3
17805: PPUSH
17806: LD_INT 1
17808: PPUSH
17809: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17813: LD_INT 12
17815: PPUSH
17816: LD_VAR 0 3
17820: PPUSH
17821: LD_INT 1
17823: PPUSH
17824: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17828: LD_INT 17
17830: PPUSH
17831: LD_VAR 0 3
17835: PPUSH
17836: LD_INT 1
17838: PPUSH
17839: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17843: LD_INT 18
17845: PPUSH
17846: LD_VAR 0 3
17850: PPUSH
17851: LD_INT 1
17853: PPUSH
17854: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17858: LD_INT 60
17860: PPUSH
17861: LD_VAR 0 3
17865: PPUSH
17866: LD_INT 1
17868: PPUSH
17869: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17873: LD_INT 32
17875: PPUSH
17876: LD_VAR 0 3
17880: PPUSH
17881: LD_INT 1
17883: PPUSH
17884: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17888: LD_INT 9
17890: PPUSH
17891: LD_VAR 0 3
17895: PPUSH
17896: LD_INT 1
17898: PPUSH
17899: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17903: LD_INT 57
17905: PPUSH
17906: LD_VAR 0 3
17910: PPUSH
17911: LD_INT 1
17913: PPUSH
17914: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17918: LD_INT 30
17920: PPUSH
17921: LD_VAR 0 3
17925: PPUSH
17926: LD_INT 1
17928: PPUSH
17929: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17933: LD_INT 37
17935: PPUSH
17936: LD_VAR 0 3
17940: PPUSH
17941: LD_INT 1
17943: PPUSH
17944: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17948: LD_INT 63
17950: PPUSH
17951: LD_VAR 0 3
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17963: LD_INT 3
17965: PPUSH
17966: LD_VAR 0 3
17970: PPUSH
17971: LD_INT 1
17973: PPUSH
17974: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17978: LD_INT 4
17980: PPUSH
17981: LD_VAR 0 3
17985: PPUSH
17986: LD_INT 1
17988: PPUSH
17989: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17993: LD_INT 5
17995: PPUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: LD_INT 1
18003: PPUSH
18004: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18008: LD_INT 66
18010: PPUSH
18011: LD_VAR 0 3
18015: PPUSH
18016: LD_INT 1
18018: PPUSH
18019: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18023: LD_INT 21
18025: PPUSH
18026: LD_VAR 0 3
18030: PPUSH
18031: LD_INT 1
18033: PPUSH
18034: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18038: LD_INT 22
18040: PPUSH
18041: LD_VAR 0 3
18045: PPUSH
18046: LD_INT 1
18048: PPUSH
18049: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18053: LD_INT 19
18055: PPUSH
18056: LD_VAR 0 3
18060: PPUSH
18061: LD_INT 1
18063: PPUSH
18064: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18068: LD_INT 54
18070: PPUSH
18071: LD_VAR 0 3
18075: PPUSH
18076: LD_INT 1
18078: PPUSH
18079: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18083: LD_INT 55
18085: PPUSH
18086: LD_VAR 0 3
18090: PPUSH
18091: LD_INT 1
18093: PPUSH
18094: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18098: LD_INT 0
18100: PPUSH
18101: LD_VAR 0 3
18105: PPUSH
18106: LD_INT 1
18108: PPUSH
18109: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18113: LD_INT 1
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: LD_INT 1
18123: PPUSH
18124: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18128: LD_INT 2
18130: PPUSH
18131: LD_VAR 0 3
18135: PPUSH
18136: LD_INT 1
18138: PPUSH
18139: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18143: LD_INT 3
18145: PPUSH
18146: LD_VAR 0 3
18150: PPUSH
18151: LD_INT 1
18153: PPUSH
18154: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18158: LD_INT 4
18160: PPUSH
18161: LD_VAR 0 3
18165: PPUSH
18166: LD_INT 1
18168: PPUSH
18169: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18173: LD_INT 5
18175: PPUSH
18176: LD_VAR 0 3
18180: PPUSH
18181: LD_INT 1
18183: PPUSH
18184: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18188: LD_INT 6
18190: PPUSH
18191: LD_VAR 0 3
18195: PPUSH
18196: LD_INT 1
18198: PPUSH
18199: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18203: LD_INT 7
18205: PPUSH
18206: LD_VAR 0 3
18210: PPUSH
18211: LD_INT 1
18213: PPUSH
18214: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18218: LD_INT 8
18220: PPUSH
18221: LD_VAR 0 3
18225: PPUSH
18226: LD_INT 1
18228: PPUSH
18229: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18233: LD_INT 10
18235: PPUSH
18236: LD_VAR 0 3
18240: PPUSH
18241: LD_INT 1
18243: PPUSH
18244: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18248: LD_INT 11
18250: PPUSH
18251: LD_VAR 0 3
18255: PPUSH
18256: LD_INT 1
18258: PPUSH
18259: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18263: LD_INT 12
18265: PPUSH
18266: LD_VAR 0 3
18270: PPUSH
18271: LD_INT 1
18273: PPUSH
18274: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18278: LD_INT 13
18280: PPUSH
18281: LD_VAR 0 3
18285: PPUSH
18286: LD_INT 1
18288: PPUSH
18289: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18293: LD_INT 14
18295: PPUSH
18296: LD_VAR 0 3
18300: PPUSH
18301: LD_INT 1
18303: PPUSH
18304: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18308: LD_INT 15
18310: PPUSH
18311: LD_VAR 0 3
18315: PPUSH
18316: LD_INT 1
18318: PPUSH
18319: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18323: LD_INT 16
18325: PPUSH
18326: LD_VAR 0 3
18330: PPUSH
18331: LD_INT 1
18333: PPUSH
18334: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18338: LD_INT 17
18340: PPUSH
18341: LD_VAR 0 3
18345: PPUSH
18346: LD_INT 1
18348: PPUSH
18349: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18353: LD_INT 18
18355: PPUSH
18356: LD_VAR 0 3
18360: PPUSH
18361: LD_INT 1
18363: PPUSH
18364: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18368: LD_INT 19
18370: PPUSH
18371: LD_VAR 0 3
18375: PPUSH
18376: LD_INT 1
18378: PPUSH
18379: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18383: LD_INT 20
18385: PPUSH
18386: LD_VAR 0 3
18390: PPUSH
18391: LD_INT 1
18393: PPUSH
18394: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18398: LD_INT 21
18400: PPUSH
18401: LD_VAR 0 3
18405: PPUSH
18406: LD_INT 1
18408: PPUSH
18409: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18413: LD_INT 23
18415: PPUSH
18416: LD_VAR 0 3
18420: PPUSH
18421: LD_INT 1
18423: PPUSH
18424: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18428: LD_INT 26
18430: PPUSH
18431: LD_VAR 0 3
18435: PPUSH
18436: LD_INT 1
18438: PPUSH
18439: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18443: LD_INT 27
18445: PPUSH
18446: LD_VAR 0 3
18450: PPUSH
18451: LD_INT 1
18453: PPUSH
18454: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18458: LD_INT 28
18460: PPUSH
18461: LD_VAR 0 3
18465: PPUSH
18466: LD_INT 1
18468: PPUSH
18469: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18473: LD_INT 29
18475: PPUSH
18476: LD_VAR 0 3
18480: PPUSH
18481: LD_INT 1
18483: PPUSH
18484: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18488: LD_INT 30
18490: PPUSH
18491: LD_VAR 0 3
18495: PPUSH
18496: LD_INT 1
18498: PPUSH
18499: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18503: LD_INT 31
18505: PPUSH
18506: LD_VAR 0 3
18510: PPUSH
18511: LD_INT 1
18513: PPUSH
18514: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18518: LD_INT 32
18520: PPUSH
18521: LD_VAR 0 3
18525: PPUSH
18526: LD_INT 1
18528: PPUSH
18529: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18533: LD_INT 33
18535: PPUSH
18536: LD_VAR 0 3
18540: PPUSH
18541: LD_INT 1
18543: PPUSH
18544: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18548: LD_INT 36
18550: PPUSH
18551: LD_VAR 0 3
18555: PPUSH
18556: LD_INT 1
18558: PPUSH
18559: CALL_OW 324
// end ; 6 :
18563: GO 19573
18565: LD_INT 6
18567: DOUBLE
18568: EQUAL
18569: IFTRUE 18573
18571: GO 19498
18573: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18574: LD_INT 35
18576: PPUSH
18577: LD_VAR 0 3
18581: PPUSH
18582: LD_INT 1
18584: PPUSH
18585: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18589: LD_INT 45
18591: PPUSH
18592: LD_VAR 0 3
18596: PPUSH
18597: LD_INT 1
18599: PPUSH
18600: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18604: LD_INT 46
18606: PPUSH
18607: LD_VAR 0 3
18611: PPUSH
18612: LD_INT 1
18614: PPUSH
18615: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18619: LD_INT 47
18621: PPUSH
18622: LD_VAR 0 3
18626: PPUSH
18627: LD_INT 1
18629: PPUSH
18630: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18634: LD_INT 1
18636: PPUSH
18637: LD_VAR 0 3
18641: PPUSH
18642: LD_INT 1
18644: PPUSH
18645: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18649: LD_INT 2
18651: PPUSH
18652: LD_VAR 0 3
18656: PPUSH
18657: LD_INT 1
18659: PPUSH
18660: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18664: LD_INT 11
18666: PPUSH
18667: LD_VAR 0 3
18671: PPUSH
18672: LD_INT 1
18674: PPUSH
18675: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18679: LD_INT 20
18681: PPUSH
18682: LD_VAR 0 3
18686: PPUSH
18687: LD_INT 1
18689: PPUSH
18690: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18694: LD_INT 48
18696: PPUSH
18697: LD_VAR 0 3
18701: PPUSH
18702: LD_INT 1
18704: PPUSH
18705: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18709: LD_INT 49
18711: PPUSH
18712: LD_VAR 0 3
18716: PPUSH
18717: LD_INT 1
18719: PPUSH
18720: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18724: LD_INT 50
18726: PPUSH
18727: LD_VAR 0 3
18731: PPUSH
18732: LD_INT 1
18734: PPUSH
18735: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18739: LD_INT 69
18741: PPUSH
18742: LD_VAR 0 3
18746: PPUSH
18747: LD_INT 1
18749: PPUSH
18750: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18754: LD_INT 39
18756: PPUSH
18757: LD_VAR 0 3
18761: PPUSH
18762: LD_INT 1
18764: PPUSH
18765: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18769: LD_INT 34
18771: PPUSH
18772: LD_VAR 0 3
18776: PPUSH
18777: LD_INT 1
18779: PPUSH
18780: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18784: LD_INT 42
18786: PPUSH
18787: LD_VAR 0 3
18791: PPUSH
18792: LD_INT 1
18794: PPUSH
18795: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18799: LD_INT 44
18801: PPUSH
18802: LD_VAR 0 3
18806: PPUSH
18807: LD_INT 1
18809: PPUSH
18810: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18814: LD_INT 41
18816: PPUSH
18817: LD_VAR 0 3
18821: PPUSH
18822: LD_INT 1
18824: PPUSH
18825: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18829: LD_INT 13
18831: PPUSH
18832: LD_VAR 0 3
18836: PPUSH
18837: LD_INT 1
18839: PPUSH
18840: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18844: LD_INT 40
18846: PPUSH
18847: LD_VAR 0 3
18851: PPUSH
18852: LD_INT 1
18854: PPUSH
18855: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18859: LD_INT 43
18861: PPUSH
18862: LD_VAR 0 3
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18874: LD_INT 70
18876: PPUSH
18877: LD_VAR 0 3
18881: PPUSH
18882: LD_INT 1
18884: PPUSH
18885: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18889: LD_INT 23
18891: PPUSH
18892: LD_VAR 0 3
18896: PPUSH
18897: LD_INT 1
18899: PPUSH
18900: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18904: LD_INT 51
18906: PPUSH
18907: LD_VAR 0 3
18911: PPUSH
18912: LD_INT 1
18914: PPUSH
18915: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18919: LD_INT 52
18921: PPUSH
18922: LD_VAR 0 3
18926: PPUSH
18927: LD_INT 1
18929: PPUSH
18930: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18934: LD_INT 6
18936: PPUSH
18937: LD_VAR 0 3
18941: PPUSH
18942: LD_INT 1
18944: PPUSH
18945: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18949: LD_INT 15
18951: PPUSH
18952: LD_VAR 0 3
18956: PPUSH
18957: LD_INT 1
18959: PPUSH
18960: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18964: LD_INT 7
18966: PPUSH
18967: LD_VAR 0 3
18971: PPUSH
18972: LD_INT 1
18974: PPUSH
18975: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18979: LD_INT 12
18981: PPUSH
18982: LD_VAR 0 3
18986: PPUSH
18987: LD_INT 1
18989: PPUSH
18990: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
18994: LD_INT 10
18996: PPUSH
18997: LD_VAR 0 3
19001: PPUSH
19002: LD_INT 1
19004: PPUSH
19005: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19009: LD_INT 17
19011: PPUSH
19012: LD_VAR 0 3
19016: PPUSH
19017: LD_INT 1
19019: PPUSH
19020: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19024: LD_INT 18
19026: PPUSH
19027: LD_VAR 0 3
19031: PPUSH
19032: LD_INT 1
19034: PPUSH
19035: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19039: LD_INT 60
19041: PPUSH
19042: LD_VAR 0 3
19046: PPUSH
19047: LD_INT 1
19049: PPUSH
19050: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19054: LD_INT 61
19056: PPUSH
19057: LD_VAR 0 3
19061: PPUSH
19062: LD_INT 1
19064: PPUSH
19065: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19069: LD_INT 32
19071: PPUSH
19072: LD_VAR 0 3
19076: PPUSH
19077: LD_INT 1
19079: PPUSH
19080: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19084: LD_INT 27
19086: PPUSH
19087: LD_VAR 0 3
19091: PPUSH
19092: LD_INT 1
19094: PPUSH
19095: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19099: LD_INT 36
19101: PPUSH
19102: LD_VAR 0 3
19106: PPUSH
19107: LD_INT 1
19109: PPUSH
19110: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19114: LD_INT 33
19116: PPUSH
19117: LD_VAR 0 3
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19129: LD_INT 9
19131: PPUSH
19132: LD_VAR 0 3
19136: PPUSH
19137: LD_INT 1
19139: PPUSH
19140: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19144: LD_INT 38
19146: PPUSH
19147: LD_VAR 0 3
19151: PPUSH
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19159: LD_INT 57
19161: PPUSH
19162: LD_VAR 0 3
19166: PPUSH
19167: LD_INT 1
19169: PPUSH
19170: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19174: LD_INT 58
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: LD_INT 1
19184: PPUSH
19185: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19189: LD_INT 28
19191: PPUSH
19192: LD_VAR 0 3
19196: PPUSH
19197: LD_INT 1
19199: PPUSH
19200: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19204: LD_INT 29
19206: PPUSH
19207: LD_VAR 0 3
19211: PPUSH
19212: LD_INT 1
19214: PPUSH
19215: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19219: LD_INT 30
19221: PPUSH
19222: LD_VAR 0 3
19226: PPUSH
19227: LD_INT 1
19229: PPUSH
19230: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19234: LD_INT 37
19236: PPUSH
19237: LD_VAR 0 3
19241: PPUSH
19242: LD_INT 1
19244: PPUSH
19245: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19249: LD_INT 63
19251: PPUSH
19252: LD_VAR 0 3
19256: PPUSH
19257: LD_INT 1
19259: PPUSH
19260: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19264: LD_INT 64
19266: PPUSH
19267: LD_VAR 0 3
19271: PPUSH
19272: LD_INT 1
19274: PPUSH
19275: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19279: LD_INT 3
19281: PPUSH
19282: LD_VAR 0 3
19286: PPUSH
19287: LD_INT 1
19289: PPUSH
19290: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19294: LD_INT 4
19296: PPUSH
19297: LD_VAR 0 3
19301: PPUSH
19302: LD_INT 1
19304: PPUSH
19305: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19309: LD_INT 5
19311: PPUSH
19312: LD_VAR 0 3
19316: PPUSH
19317: LD_INT 1
19319: PPUSH
19320: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19324: LD_INT 8
19326: PPUSH
19327: LD_VAR 0 3
19331: PPUSH
19332: LD_INT 1
19334: PPUSH
19335: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19339: LD_INT 66
19341: PPUSH
19342: LD_VAR 0 3
19346: PPUSH
19347: LD_INT 1
19349: PPUSH
19350: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19354: LD_INT 67
19356: PPUSH
19357: LD_VAR 0 3
19361: PPUSH
19362: LD_INT 1
19364: PPUSH
19365: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19369: LD_INT 21
19371: PPUSH
19372: LD_VAR 0 3
19376: PPUSH
19377: LD_INT 1
19379: PPUSH
19380: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19384: LD_INT 22
19386: PPUSH
19387: LD_VAR 0 3
19391: PPUSH
19392: LD_INT 1
19394: PPUSH
19395: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19399: LD_INT 19
19401: PPUSH
19402: LD_VAR 0 3
19406: PPUSH
19407: LD_INT 1
19409: PPUSH
19410: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19414: LD_INT 26
19416: PPUSH
19417: LD_VAR 0 3
19421: PPUSH
19422: LD_INT 1
19424: PPUSH
19425: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19429: LD_INT 54
19431: PPUSH
19432: LD_VAR 0 3
19436: PPUSH
19437: LD_INT 1
19439: PPUSH
19440: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19444: LD_INT 55
19446: PPUSH
19447: LD_VAR 0 3
19451: PPUSH
19452: LD_INT 1
19454: PPUSH
19455: CALL_OW 322
// for i = 0 to 39 do
19459: LD_ADDR_VAR 0 4
19463: PUSH
19464: DOUBLE
19465: LD_INT 0
19467: DEC
19468: ST_TO_ADDR
19469: LD_INT 39
19471: PUSH
19472: FOR_TO
19473: IFFALSE 19494
// SetRestrict ( i , side , true ) ;
19475: LD_VAR 0 4
19479: PPUSH
19480: LD_VAR 0 3
19484: PPUSH
19485: LD_INT 1
19487: PPUSH
19488: CALL_OW 324
19492: GO 19472
19494: POP
19495: POP
// end ; else
19496: GO 19573
19498: POP
// begin for i = 1 to 73 do
19499: LD_ADDR_VAR 0 4
19503: PUSH
19504: DOUBLE
19505: LD_INT 1
19507: DEC
19508: ST_TO_ADDR
19509: LD_INT 73
19511: PUSH
19512: FOR_TO
19513: IFFALSE 19534
// SetTech ( i , side , state_enabled ) ;
19515: LD_VAR 0 4
19519: PPUSH
19520: LD_VAR 0 3
19524: PPUSH
19525: LD_INT 1
19527: PPUSH
19528: CALL_OW 322
19532: GO 19512
19534: POP
19535: POP
// for i = 0 to 39 do
19536: LD_ADDR_VAR 0 4
19540: PUSH
19541: DOUBLE
19542: LD_INT 0
19544: DEC
19545: ST_TO_ADDR
19546: LD_INT 39
19548: PUSH
19549: FOR_TO
19550: IFFALSE 19571
// SetRestrict ( i , side , true ) ;
19552: LD_VAR 0 4
19556: PPUSH
19557: LD_VAR 0 3
19561: PPUSH
19562: LD_INT 1
19564: PPUSH
19565: CALL_OW 324
19569: GO 19549
19571: POP
19572: POP
// end ; end ; end ;
19573: GO 15578
19575: POP
19576: POP
// end ;
19577: LD_VAR 0 2
19581: RET
