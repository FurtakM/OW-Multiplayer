// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_siberit , respawning_time_min , respawning_time_max , buildUpTime_Delay , amount_of_apemen , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 42
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 19
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 17
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 20
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 22
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 18
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 372
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 3 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 3
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 167: LD_ADDR_EXP 19
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 6
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 206: LD_ADDR_EXP 17
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 6
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 0 , 0 , 3 ] ;
 245: LD_ADDR_EXP 20
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 22
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 323: LD_ADDR_EXP 18
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// end ; for i := 1 to 8 do
 372: LD_ADDR_VAR 0 2
 376: PUSH
 377: DOUBLE
 378: LD_INT 1
 380: DEC
 381: ST_TO_ADDR
 382: LD_INT 8
 384: PUSH
 385: FOR_TO
 386: IFFALSE 473
// if Multiplayer_GetPlayerIsSpec ( i ) then
 388: LD_VAR 0 2
 392: PPUSH
 393: CALL_OW 530
 397: IFFALSE 471
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 399: LD_ADDR_EXP 19
 403: PUSH
 404: LD_EXP 19
 408: PPUSH
 409: LD_VAR 0 2
 413: PPUSH
 414: LD_INT 0
 416: PPUSH
 417: CALL_OW 1
 421: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 422: LD_ADDR_EXP 18
 426: PUSH
 427: LD_EXP 18
 431: PPUSH
 432: LD_EXP 17
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: PPUSH
 443: LD_EXP 18
 447: PUSH
 448: LD_EXP 17
 452: PUSH
 453: LD_VAR 0 2
 457: ARRAY
 458: ARRAY
 459: PUSH
 460: LD_VAR 0 2
 464: DIFF
 465: PPUSH
 466: CALL_OW 1
 470: ST_TO_ADDR
// end ;
 471: GO 385
 473: POP
 474: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 475: LD_ADDR_EXP 23
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 0
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: LD_INT 0
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: ST_TO_ADDR
// for i := 1 to 8 do
 506: LD_ADDR_VAR 0 2
 510: PUSH
 511: DOUBLE
 512: LD_INT 1
 514: DEC
 515: ST_TO_ADDR
 516: LD_INT 8
 518: PUSH
 519: FOR_TO
 520: IFFALSE 567
// if Side_Positions [ i ] then
 522: LD_EXP 19
 526: PUSH
 527: LD_VAR 0 2
 531: ARRAY
 532: IFFALSE 565
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 534: LD_ADDR_EXP 23
 538: PUSH
 539: LD_EXP 23
 543: PPUSH
 544: LD_EXP 19
 548: PUSH
 549: LD_VAR 0 2
 553: ARRAY
 554: PPUSH
 555: LD_VAR 0 2
 559: PPUSH
 560: CALL_OW 1
 564: ST_TO_ADDR
 565: GO 519
 567: POP
 568: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 569: LD_ADDR_EXP 21
 573: PUSH
 574: LD_EXP 17
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: EMPTY
 583: LIST
 584: DIFF
 585: PUSH
 586: LD_INT 1
 588: GREATER
 589: ST_TO_ADDR
// if Multiplayer then
 590: LD_OWVAR 4
 594: IFFALSE 840
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 596: LD_ADDR_EXP 44
 600: PUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 426
 608: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 609: LD_ADDR_EXP 45
 613: PUSH
 614: LD_INT 1
 616: PPUSH
 617: CALL_OW 426
 621: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 622: LD_ADDR_EXP 46
 626: PUSH
 627: LD_INT 2
 629: PPUSH
 630: CALL_OW 426
 634: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 635: LD_ADDR_EXP 47
 639: PUSH
 640: LD_INT 3
 642: PPUSH
 643: CALL_OW 426
 647: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 648: LD_ADDR_EXP 48
 652: PUSH
 653: LD_INT 4
 655: PPUSH
 656: CALL_OW 426
 660: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 661: LD_ADDR_EXP 49
 665: PUSH
 666: LD_INT 5
 668: PPUSH
 669: CALL_OW 426
 673: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 674: LD_ADDR_EXP 50
 678: PUSH
 679: LD_INT 6
 681: PPUSH
 682: CALL_OW 426
 686: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 687: LD_ADDR_EXP 51
 691: PUSH
 692: LD_INT 10
 694: PPUSH
 695: CALL_OW 426
 699: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 700: LD_ADDR_EXP 52
 704: PUSH
 705: LD_INT 11
 707: PPUSH
 708: CALL_OW 426
 712: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 713: LD_ADDR_EXP 53
 717: PUSH
 718: LD_INT 12
 720: PPUSH
 721: CALL_OW 426
 725: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 726: LD_ADDR_EXP 54
 730: PUSH
 731: LD_INT 13
 733: PPUSH
 734: CALL_OW 426
 738: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 739: LD_ADDR_EXP 55
 743: PUSH
 744: LD_INT 14
 746: PPUSH
 747: CALL_OW 426
 751: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 752: LD_ADDR_EXP 1
 756: PUSH
 757: LD_INT 15
 759: PPUSH
 760: CALL_OW 426
 764: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 765: LD_ADDR_EXP 2
 769: PUSH
 770: LD_INT 16
 772: PPUSH
 773: CALL_OW 426
 777: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 778: LD_ADDR_EXP 56
 782: PUSH
 783: LD_INT 17
 785: PPUSH
 786: CALL_OW 426
 790: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 791: LD_ADDR_EXP 57
 795: PUSH
 796: LD_INT 20
 798: PPUSH
 799: CALL_OW 426
 803: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 804: LD_ADDR_EXP 43
 808: PUSH
 809: LD_INT 21
 811: PPUSH
 812: CALL_OW 426
 816: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_INT 22
 824: PPUSH
 825: CALL_OW 426
 829: ST_TO_ADDR
// def_win_rules = 0 ;
 830: LD_ADDR_EXP 32
 834: PUSH
 835: LD_INT 0
 837: ST_TO_ADDR
// end else
 838: GO 996
// begin Randomize ;
 840: CALL_OW 10
// def_base_level := 2 ;
 844: LD_ADDR_EXP 44
 848: PUSH
 849: LD_INT 2
 851: ST_TO_ADDR
// def_amount_of_people := 0 ;
 852: LD_ADDR_EXP 45
 856: PUSH
 857: LD_INT 0
 859: ST_TO_ADDR
// def_skill_level := 1 ;
 860: LD_ADDR_EXP 46
 864: PUSH
 865: LD_INT 1
 867: ST_TO_ADDR
// def_starting_resources := 2 ;
 868: LD_ADDR_EXP 47
 872: PUSH
 873: LD_INT 2
 875: ST_TO_ADDR
// def_shipments_density := 1 ;
 876: LD_ADDR_EXP 48
 880: PUSH
 881: LD_INT 1
 883: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 884: LD_ADDR_EXP 49
 888: PUSH
 889: LD_INT 0
 891: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 892: LD_ADDR_EXP 50
 896: PUSH
 897: LD_INT 1
 899: ST_TO_ADDR
// def_shared_vision := 1 ;
 900: LD_ADDR_EXP 51
 904: PUSH
 905: LD_INT 1
 907: ST_TO_ADDR
// def_morale_flags := 1 ;
 908: LD_ADDR_EXP 52
 912: PUSH
 913: LD_INT 1
 915: ST_TO_ADDR
// def_siberite_detection := 1 ;
 916: LD_ADDR_EXP 53
 920: PUSH
 921: LD_INT 1
 923: ST_TO_ADDR
// def_people_respawning := 2 ;
 924: LD_ADDR_EXP 54
 928: PUSH
 929: LD_INT 2
 931: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 932: LD_ADDR_EXP 55
 936: PUSH
 937: LD_INT 3
 939: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 940: LD_ADDR_EXP 1
 944: PUSH
 945: LD_INT 0
 947: ST_TO_ADDR
// def_public_score := 0 ;
 948: LD_ADDR_EXP 2
 952: PUSH
 953: LD_INT 0
 955: ST_TO_ADDR
// def_siberite_bomb := 4 ;
 956: LD_ADDR_EXP 56
 960: PUSH
 961: LD_INT 4
 963: ST_TO_ADDR
// def_builduptime := 0 ;
 964: LD_ADDR_EXP 57
 968: PUSH
 969: LD_INT 0
 971: ST_TO_ADDR
// def_game_rules := 0 ;
 972: LD_ADDR_EXP 43
 976: PUSH
 977: LD_INT 0
 979: ST_TO_ADDR
// tech_level = 4 ;
 980: LD_ADDR_VAR 0 3
 984: PUSH
 985: LD_INT 4
 987: ST_TO_ADDR
// def_win_rules = 0 ;
 988: LD_ADDR_EXP 32
 992: PUSH
 993: LD_INT 0
 995: ST_TO_ADDR
// end ; InitGameRules ;
 996: CALL 10634 0 0
// if def_game_rules = 0 then
1000: LD_EXP 43
1004: PUSH
1005: LD_INT 0
1007: EQUAL
1008: IFFALSE 1059
// begin if isSGUI then
1010: LD_OWVAR 83
1014: IFFALSE 1022
// setMpTechs ( ) else
1016: CALL 15519 0 0
1020: GO 1059
// begin if Game_Type = 3 then
1022: LD_EXP 42
1026: PUSH
1027: LD_INT 3
1029: EQUAL
1030: IFFALSE 1046
// tech_level = tech_level + 3 ;
1032: LD_ADDR_VAR 0 3
1036: PUSH
1037: LD_VAR 0 3
1041: PUSH
1042: LD_INT 3
1044: PLUS
1045: ST_TO_ADDR
// SetMpTechLevel ( tech_level + 1 ) ;
1046: LD_VAR 0 3
1050: PUSH
1051: LD_INT 1
1053: PLUS
1054: PPUSH
1055: CALL 15666 0 1
// end ; end ; if ( Game_Type = 5 ) then
1059: LD_EXP 42
1063: PUSH
1064: LD_INT 5
1066: EQUAL
1067: IFFALSE 1096
// begin def_base_level := 1 ;
1069: LD_ADDR_EXP 44
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
1077: LD_ADDR_EXP 49
1081: PUSH
1082: LD_INT 0
1084: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
1085: LD_ADDR_EXP 50
1089: PUSH
1090: LD_INT 0
1092: ST_TO_ADDR
// disable ( 10 ) ;
1093: LD_INT 10
1095: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 0
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_EXP 44
1119: PUSH
1120: LD_INT 1
1122: PLUS
1123: ARRAY
1124: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
1125: LD_ADDR_EXP 4
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 2
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: LD_EXP 44
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: ARRAY
1153: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1154: LD_ADDR_EXP 5
1158: PUSH
1159: LD_EXP 45
1163: PUSH
1164: LD_INT 4
1166: PLUS
1167: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1168: LD_ADDR_EXP 9
1172: PUSH
1173: LD_INT 150
1175: PUSH
1176: LD_EXP 48
1180: PUSH
1181: LD_INT 1
1183: PLUS
1184: MINUS
1185: ST_TO_ADDR
// if def_people_respawning = 0 then
1186: LD_EXP 54
1190: PUSH
1191: LD_INT 0
1193: EQUAL
1194: IFFALSE 1214
// begin respawning_time_min = 0 ;
1196: LD_ADDR_EXP 12
1200: PUSH
1201: LD_INT 0
1203: ST_TO_ADDR
// respawning_time_max = 0 ;
1204: LD_ADDR_EXP 13
1208: PUSH
1209: LD_INT 0
1211: ST_TO_ADDR
// end else
1212: GO 1258
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1214: LD_ADDR_EXP 12
1218: PUSH
1219: LD_INT 10500
1221: PUSH
1222: LD_INT 5
1224: DIVREAL
1225: PUSH
1226: LD_INT 6
1228: PUSH
1229: LD_EXP 54
1233: MINUS
1234: MUL
1235: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1236: LD_ADDR_EXP 13
1240: PUSH
1241: LD_INT 31500
1243: PUSH
1244: LD_INT 5
1246: DIVREAL
1247: PUSH
1248: LD_INT 6
1250: PUSH
1251: LD_EXP 54
1255: MINUS
1256: MUL
1257: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1258: LD_EXP 55
1262: NOT
1263: IFFALSE 1275
// amount_of_apemen := 0 else
1265: LD_ADDR_EXP 15
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
1273: GO 1285
// amount_of_apemen := def_amount_of_apemen ;
1275: LD_ADDR_EXP 15
1279: PUSH
1280: LD_EXP 55
1284: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1285: LD_EXP 56
1289: PUSH
1290: LD_INT 0
1292: EQUAL
1293: IFFALSE 1305
// siberite_bomb_Delay = 0 else
1295: LD_ADDR_EXP 16
1299: PUSH
1300: LD_INT 0
1302: ST_TO_ADDR
1303: GO 1327
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1305: LD_ADDR_EXP 16
1309: PUSH
1310: LD_EXP 56
1314: PUSH
1315: LD_INT 1
1317: MINUS
1318: PUSH
1319: LD_INT 21000
1321: MUL
1322: PUSH
1323: LD_INT 1
1325: PLUS
1326: ST_TO_ADDR
// if def_builduptime = 0 then
1327: LD_EXP 57
1331: PUSH
1332: LD_INT 0
1334: EQUAL
1335: IFFALSE 1347
// buildUpTime_Delay = 0 else
1337: LD_ADDR_EXP 14
1341: PUSH
1342: LD_INT 0
1344: ST_TO_ADDR
1345: GO 1365
// buildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
1347: LD_ADDR_EXP 14
1351: PUSH
1352: LD_INT 8400
1354: PUSH
1355: LD_INT 2100
1357: PUSH
1358: LD_EXP 57
1362: MUL
1363: PLUS
1364: ST_TO_ADDR
// amount_of_siberit = 30 + def_amount_of_siberit * 5 ;
1365: LD_ADDR_EXP 11
1369: PUSH
1370: LD_INT 30
1372: PUSH
1373: LD_EXP 1
1377: PUSH
1378: LD_INT 5
1380: MUL
1381: PLUS
1382: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1383: LD_ADDR_EXP 6
1387: PUSH
1388: LD_INT 2
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: PUSH
1406: LD_EXP 46
1410: PUSH
1411: LD_INT 1
1413: PLUS
1414: ARRAY
1415: ST_TO_ADDR
// if ( Game_Type = 5 ) then
1416: LD_EXP 42
1420: PUSH
1421: LD_INT 5
1423: EQUAL
1424: IFFALSE 1542
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1426: LD_ADDR_EXP 8
1430: PUSH
1431: LD_INT 1000
1433: PUSH
1434: LD_INT 100
1436: PUSH
1437: LD_INT 100
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: PUSH
1445: LD_INT 2000
1447: PUSH
1448: LD_INT 200
1450: PUSH
1451: LD_INT 200
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 5000
1461: PUSH
1462: LD_INT 500
1464: PUSH
1465: LD_INT 500
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 10000
1475: PUSH
1476: LD_INT 1000
1478: PUSH
1479: LD_INT 1000
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: PUSH
1487: LD_INT 25000
1489: PUSH
1490: LD_INT 2500
1492: PUSH
1493: LD_INT 2500
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: PUSH
1501: LD_INT 50000
1503: PUSH
1504: LD_INT 5000
1506: PUSH
1507: LD_INT 5000
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: PUSH
1523: LD_EXP 47
1527: PUSH
1528: LD_INT 1
1530: PLUS
1531: ARRAY
1532: ST_TO_ADDR
// starting_crates := [ ] ;
1533: LD_ADDR_EXP 7
1537: PUSH
1538: EMPTY
1539: ST_TO_ADDR
// end else
1540: GO 1688
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1542: LD_ADDR_EXP 8
1546: PUSH
1547: LD_INT 0
1549: PUSH
1550: LD_INT 0
1552: PUSH
1553: LD_INT 0
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 30
1563: PUSH
1564: LD_INT 0
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: PUSH
1575: LD_INT 50
1577: PUSH
1578: LD_INT 20
1580: PUSH
1581: LD_INT 0
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 80
1591: PUSH
1592: LD_INT 40
1594: PUSH
1595: LD_INT 20
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_EXP 47
1613: PUSH
1614: LD_INT 1
1616: PLUS
1617: ARRAY
1618: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1619: LD_ADDR_EXP 7
1623: PUSH
1624: LD_INT 10
1626: PUSH
1627: EMPTY
1628: LIST
1629: PUSH
1630: LD_INT 7
1632: PUSH
1633: LD_INT 14
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 6
1642: PUSH
1643: LD_INT 12
1645: PUSH
1646: LD_INT 18
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 5
1656: PUSH
1657: LD_INT 10
1659: PUSH
1660: LD_INT 15
1662: PUSH
1663: LD_INT 20
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_EXP 47
1682: PUSH
1683: LD_INT 1
1685: PLUS
1686: ARRAY
1687: ST_TO_ADDR
// end ; morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1688: LD_ADDR_EXP 10
1692: PUSH
1693: LD_INT 1
1695: NEG
1696: PUSH
1697: LD_INT 350
1699: PUSH
1700: LD_INT 700
1702: PUSH
1703: LD_INT 1400
1705: PUSH
1706: LD_INT 0
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PUSH
1716: LD_EXP 52
1720: PUSH
1721: LD_INT 1
1723: PLUS
1724: ARRAY
1725: ST_TO_ADDR
// battle_flags_id := [ ] ;
1726: LD_ADDR_EXP 31
1730: PUSH
1731: EMPTY
1732: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1733: LD_ADDR_EXP 41
1737: PUSH
1738: LD_INT 8
1740: PUSH
1741: LD_INT 9
1743: PUSH
1744: LD_INT 10
1746: PUSH
1747: LD_INT 11
1749: PUSH
1750: LD_INT 12
1752: PUSH
1753: LD_INT 13
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: ST_TO_ADDR
// end ;
1764: LD_VAR 0 1
1768: RET
// function init_map ; var i , j ; begin
1769: LD_INT 0
1771: PPUSH
1772: PPUSH
1773: PPUSH
// normal_oil_deposits_locations := [ [ 28 , 22 ] , [ 69 , 3 ] , [ 138 , 27 ] , [ 180 , 104 ] , [ 138 , 137 ] , [ 76 , 115 ] ] ;
1774: LD_ADDR_EXP 27
1778: PUSH
1779: LD_INT 28
1781: PUSH
1782: LD_INT 22
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: LD_INT 69
1791: PUSH
1792: LD_INT 3
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 138
1801: PUSH
1802: LD_INT 27
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: PUSH
1809: LD_INT 180
1811: PUSH
1812: LD_INT 104
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 138
1821: PUSH
1822: LD_INT 137
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 76
1831: PUSH
1832: LD_INT 115
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 31 , 38 ] , [ 34 , 21 ] ] , [ [ 58 , 4 ] , [ 82 , 4 ] ] , [ [ 122 , 18 ] , [ 152 , 43 ] ] , [ [ 174 , 90 ] , [ 180 , 120 ] ] , [ [ 152 , 136 ] , [ 130 , 136 ] ] , [ [ 89 , 116 ] , [ 59 , 89 ] ] ] ;
1847: LD_ADDR_EXP 28
1851: PUSH
1852: LD_INT 31
1854: PUSH
1855: LD_INT 38
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 34
1864: PUSH
1865: LD_INT 21
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 58
1878: PUSH
1879: LD_INT 4
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 82
1888: PUSH
1889: LD_INT 4
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 122
1902: PUSH
1903: LD_INT 18
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 152
1912: PUSH
1913: LD_INT 43
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 174
1926: PUSH
1927: LD_INT 90
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 180
1936: PUSH
1937: LD_INT 120
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: PUSH
1948: LD_INT 152
1950: PUSH
1951: LD_INT 136
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 130
1960: PUSH
1961: LD_INT 136
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 89
1974: PUSH
1975: LD_INT 116
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 59
1984: PUSH
1985: LD_INT 89
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 28 , 26 ] , [ 73 , 3 ] , [ 133 , 22 ] , [ 180 , 110 ] , [ 142 , 137 ] , [ 72 , 112 ] ] ;
2004: LD_ADDR_EXP 29
2008: PUSH
2009: LD_INT 28
2011: PUSH
2012: LD_INT 26
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: PUSH
2019: LD_INT 73
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 133
2031: PUSH
2032: LD_INT 22
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 180
2041: PUSH
2042: LD_INT 110
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 142
2051: PUSH
2052: LD_INT 137
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 72
2061: PUSH
2062: LD_INT 112
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 27 , 39 ] , [ 30 , 16 ] ] , [ [ 57 , 8 ] , [ 87 , 8 ] ] , [ [ 128 , 19 ] , [ 146 , 36 ] ] , [ [ 176 , 121 ] , [ 179 , 96 ] ] , [ [ 153 , 132 ] , [ 124 , 133 ] ] , [ [ 85 , 117 ] , [ 62 , 96 ] ] ] ;
2077: LD_ADDR_EXP 30
2081: PUSH
2082: LD_INT 27
2084: PUSH
2085: LD_INT 39
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 30
2094: PUSH
2095: LD_INT 16
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: PUSH
2106: LD_INT 57
2108: PUSH
2109: LD_INT 8
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 87
2118: PUSH
2119: LD_INT 8
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 128
2132: PUSH
2133: LD_INT 19
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 146
2142: PUSH
2143: LD_INT 36
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 176
2156: PUSH
2157: LD_INT 121
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PUSH
2164: LD_INT 179
2166: PUSH
2167: LD_INT 96
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PUSH
2178: LD_INT 153
2180: PUSH
2181: LD_INT 132
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: PUSH
2188: LD_INT 124
2190: PUSH
2191: LD_INT 133
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: PUSH
2202: LD_INT 85
2204: PUSH
2205: LD_INT 117
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PUSH
2212: LD_INT 62
2214: PUSH
2215: LD_INT 96
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: ST_TO_ADDR
// depot_def := [ [ 53 , 42 , 5 ] , [ 78 , 18 , 0 ] , [ 129 , 43 , 1 ] , [ 155 , 96 , 2 ] , [ 130 , 120 , 3 ] , [ 82 , 98 , 3 ] ] ;
2234: LD_ADDR_EXP 24
2238: PUSH
2239: LD_INT 53
2241: PUSH
2242: LD_INT 42
2244: PUSH
2245: LD_INT 5
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: LIST
2252: PUSH
2253: LD_INT 78
2255: PUSH
2256: LD_INT 18
2258: PUSH
2259: LD_INT 0
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: LIST
2266: PUSH
2267: LD_INT 129
2269: PUSH
2270: LD_INT 43
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 155
2283: PUSH
2284: LD_INT 96
2286: PUSH
2287: LD_INT 2
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 130
2297: PUSH
2298: LD_INT 120
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 82
2311: PUSH
2312: LD_INT 98
2314: PUSH
2315: LD_INT 3
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: ST_TO_ADDR
// for i in depot_def do
2331: LD_ADDR_VAR 0 2
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2416
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2344: LD_ADDR_EXP 26
2348: PUSH
2349: LD_EXP 26
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_INT 1
2361: ARRAY
2362: PPUSH
2363: LD_VAR 0 2
2367: PUSH
2368: LD_INT 3
2370: ARRAY
2371: PPUSH
2372: LD_INT 10
2374: PPUSH
2375: CALL_OW 272
2379: PUSH
2380: LD_VAR 0 2
2384: PUSH
2385: LD_INT 2
2387: ARRAY
2388: PPUSH
2389: LD_VAR 0 2
2393: PUSH
2394: LD_INT 3
2396: ARRAY
2397: PPUSH
2398: LD_INT 10
2400: PPUSH
2401: CALL_OW 273
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: EMPTY
2411: LIST
2412: ADD
2413: ST_TO_ADDR
2414: GO 2341
2416: POP
2417: POP
// breastworks_def := [ [ [ 65 , 53 , 5 ] , [ 65 , 40 , 4 ] ] , [ [ 76 , 28 , 0 ] , [ 89 , 28 , 5 ] ] , [ [ 115 , 41 , 1 ] , [ 128 , 54 , 0 ] ] , [ [ 143 , 82 , 2 ] , [ 143 , 95 , 1 ] ] , [ [ 131 , 108 , 3 ] , [ 118 , 108 , 2 ] ] , [ [ 80 , 85 , 3 ] , [ 92 , 97 , 4 ] ] ] ;
2418: LD_ADDR_EXP 25
2422: PUSH
2423: LD_INT 65
2425: PUSH
2426: LD_INT 53
2428: PUSH
2429: LD_INT 5
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: LIST
2436: PUSH
2437: LD_INT 65
2439: PUSH
2440: LD_INT 40
2442: PUSH
2443: LD_INT 4
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 76
2457: PUSH
2458: LD_INT 28
2460: PUSH
2461: LD_INT 0
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 89
2471: PUSH
2472: LD_INT 28
2474: PUSH
2475: LD_INT 5
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 115
2489: PUSH
2490: LD_INT 41
2492: PUSH
2493: LD_INT 1
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 128
2503: PUSH
2504: LD_INT 54
2506: PUSH
2507: LD_INT 0
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 143
2521: PUSH
2522: LD_INT 82
2524: PUSH
2525: LD_INT 2
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 143
2535: PUSH
2536: LD_INT 95
2538: PUSH
2539: LD_INT 1
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: LIST
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 131
2553: PUSH
2554: LD_INT 108
2556: PUSH
2557: LD_INT 3
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: LIST
2564: PUSH
2565: LD_INT 118
2567: PUSH
2568: LD_INT 108
2570: PUSH
2571: LD_INT 2
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: LIST
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: LD_INT 80
2585: PUSH
2586: LD_INT 85
2588: PUSH
2589: LD_INT 3
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: LD_INT 92
2599: PUSH
2600: LD_INT 97
2602: PUSH
2603: LD_INT 4
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: ST_TO_ADDR
// for i = 1 to Side_Positions do
2623: LD_ADDR_VAR 0 2
2627: PUSH
2628: DOUBLE
2629: LD_INT 1
2631: DEC
2632: ST_TO_ADDR
2633: LD_EXP 19
2637: PUSH
2638: FOR_TO
2639: IFFALSE 2769
// begin if not Side_Positions [ i ] then
2641: LD_EXP 19
2645: PUSH
2646: LD_VAR 0 2
2650: ARRAY
2651: NOT
2652: IFFALSE 2656
// continue ;
2654: GO 2638
// if def_extra_oil_deposits then
2656: LD_EXP 49
2660: IFFALSE 2718
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2662: LD_ADDR_VAR 0 3
2666: PUSH
2667: LD_EXP 28
2671: PUSH
2672: LD_EXP 19
2676: PUSH
2677: LD_VAR 0 2
2681: ARRAY
2682: ARRAY
2683: PUSH
2684: FOR_IN
2685: IFFALSE 2714
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 1
2694: ARRAY
2695: PPUSH
2696: LD_VAR 0 3
2700: PUSH
2701: LD_INT 2
2703: ARRAY
2704: PPUSH
2705: LD_INT 2
2707: PPUSH
2708: CALL_OW 62
2712: GO 2684
2714: POP
2715: POP
2716: GO 2767
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2718: LD_EXP 27
2722: PUSH
2723: LD_EXP 19
2727: PUSH
2728: LD_VAR 0 2
2732: ARRAY
2733: ARRAY
2734: PUSH
2735: LD_INT 1
2737: ARRAY
2738: PPUSH
2739: LD_EXP 27
2743: PUSH
2744: LD_EXP 19
2748: PUSH
2749: LD_VAR 0 2
2753: ARRAY
2754: ARRAY
2755: PUSH
2756: LD_INT 2
2758: ARRAY
2759: PPUSH
2760: LD_INT 2
2762: PPUSH
2763: CALL_OW 62
// end ;
2767: GO 2638
2769: POP
2770: POP
// if def_extra_sib_deposits then
2771: LD_EXP 50
2775: IFFALSE 2929
// for i = 1 to Side_Positions do
2777: LD_ADDR_VAR 0 2
2781: PUSH
2782: DOUBLE
2783: LD_INT 1
2785: DEC
2786: ST_TO_ADDR
2787: LD_EXP 19
2791: PUSH
2792: FOR_TO
2793: IFFALSE 2927
// begin if not Side_Positions [ i ] then
2795: LD_EXP 19
2799: PUSH
2800: LD_VAR 0 2
2804: ARRAY
2805: NOT
2806: IFFALSE 2810
// continue ;
2808: GO 2792
// if def_extra_sib_deposits = 2 then
2810: LD_EXP 50
2814: PUSH
2815: LD_INT 2
2817: EQUAL
2818: IFFALSE 2876
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2820: LD_ADDR_VAR 0 3
2824: PUSH
2825: LD_EXP 30
2829: PUSH
2830: LD_EXP 19
2834: PUSH
2835: LD_VAR 0 2
2839: ARRAY
2840: ARRAY
2841: PUSH
2842: FOR_IN
2843: IFFALSE 2872
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2845: LD_VAR 0 3
2849: PUSH
2850: LD_INT 1
2852: ARRAY
2853: PPUSH
2854: LD_VAR 0 3
2858: PUSH
2859: LD_INT 2
2861: ARRAY
2862: PPUSH
2863: LD_INT 3
2865: PPUSH
2866: CALL_OW 62
2870: GO 2842
2872: POP
2873: POP
2874: GO 2925
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2876: LD_EXP 29
2880: PUSH
2881: LD_EXP 19
2885: PUSH
2886: LD_VAR 0 2
2890: ARRAY
2891: ARRAY
2892: PUSH
2893: LD_INT 1
2895: ARRAY
2896: PPUSH
2897: LD_EXP 29
2901: PUSH
2902: LD_EXP 19
2906: PUSH
2907: LD_VAR 0 2
2911: ARRAY
2912: ARRAY
2913: PUSH
2914: LD_INT 2
2916: ARRAY
2917: PPUSH
2918: LD_INT 3
2920: PPUSH
2921: CALL_OW 62
// end ;
2925: GO 2792
2927: POP
2928: POP
// end ;
2929: LD_VAR 0 1
2933: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2934: LD_INT 0
2936: PPUSH
2937: PPUSH
2938: PPUSH
// if not Team_Game then
2939: LD_EXP 21
2943: NOT
2944: IFFALSE 3042
// begin for i = 1 to 8 do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 8
2958: PUSH
2959: FOR_TO
2960: IFFALSE 3038
// for j = 1 to 8 do
2962: LD_ADDR_VAR 0 3
2966: PUSH
2967: DOUBLE
2968: LD_INT 1
2970: DEC
2971: ST_TO_ADDR
2972: LD_INT 8
2974: PUSH
2975: FOR_TO
2976: IFFALSE 3034
// if i <> j then
2978: LD_VAR 0 2
2982: PUSH
2983: LD_VAR 0 3
2987: NONEQUAL
2988: IFFALSE 3012
// SetAttitude ( i , j , att_neutral , true ) else
2990: LD_VAR 0 2
2994: PPUSH
2995: LD_VAR 0 3
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: LD_INT 1
3005: PPUSH
3006: CALL_OW 80
3010: GO 3032
// SetAttitude ( i , j , att_friend , true ) ;
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_VAR 0 3
3021: PPUSH
3022: LD_INT 1
3024: PPUSH
3025: LD_INT 1
3027: PPUSH
3028: CALL_OW 80
3032: GO 2975
3034: POP
3035: POP
3036: GO 2959
3038: POP
3039: POP
// end else
3040: GO 3217
// begin if def_shared_vision then
3042: LD_EXP 51
3046: IFFALSE 3111
// begin for i in Teams do
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: LD_EXP 18
3057: PUSH
3058: FOR_IN
3059: IFFALSE 3109
// for j = 2 to i do
3061: LD_ADDR_VAR 0 3
3065: PUSH
3066: DOUBLE
3067: LD_INT 2
3069: DEC
3070: ST_TO_ADDR
3071: LD_VAR 0 2
3075: PUSH
3076: FOR_TO
3077: IFFALSE 3105
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3079: LD_VAR 0 2
3083: PUSH
3084: LD_VAR 0 3
3088: ARRAY
3089: PPUSH
3090: LD_VAR 0 2
3094: PUSH
3095: LD_INT 1
3097: ARRAY
3098: PPUSH
3099: CALL_OW 343
3103: GO 3076
3105: POP
3106: POP
3107: GO 3058
3109: POP
3110: POP
// end ; for i = 1 to 8 do
3111: LD_ADDR_VAR 0 2
3115: PUSH
3116: DOUBLE
3117: LD_INT 1
3119: DEC
3120: ST_TO_ADDR
3121: LD_INT 8
3123: PUSH
3124: FOR_TO
3125: IFFALSE 3215
// for j = 1 to 8 do
3127: LD_ADDR_VAR 0 3
3131: PUSH
3132: DOUBLE
3133: LD_INT 1
3135: DEC
3136: ST_TO_ADDR
3137: LD_INT 8
3139: PUSH
3140: FOR_TO
3141: IFFALSE 3211
// if Side_Teams [ i ] = Side_Teams [ j ] then
3143: LD_EXP 17
3147: PUSH
3148: LD_VAR 0 2
3152: ARRAY
3153: PUSH
3154: LD_EXP 17
3158: PUSH
3159: LD_VAR 0 3
3163: ARRAY
3164: EQUAL
3165: IFFALSE 3189
// SetAttitude ( i , j , att_friend , true ) else
3167: LD_VAR 0 2
3171: PPUSH
3172: LD_VAR 0 3
3176: PPUSH
3177: LD_INT 1
3179: PPUSH
3180: LD_INT 1
3182: PPUSH
3183: CALL_OW 80
3187: GO 3209
// SetAttitude ( i , j , att_enemy , true ) ;
3189: LD_VAR 0 2
3193: PPUSH
3194: LD_VAR 0 3
3198: PPUSH
3199: LD_INT 2
3201: PPUSH
3202: LD_INT 1
3204: PPUSH
3205: CALL_OW 80
3209: GO 3140
3211: POP
3212: POP
3213: GO 3124
3215: POP
3216: POP
// end ; end ;
3217: LD_VAR 0 1
3221: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3222: LD_INT 0
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
// result := [ ] ;
3228: LD_ADDR_VAR 0 7
3232: PUSH
3233: EMPTY
3234: ST_TO_ADDR
// for i := 1 to count do
3235: LD_ADDR_VAR 0 8
3239: PUSH
3240: DOUBLE
3241: LD_INT 1
3243: DEC
3244: ST_TO_ADDR
3245: LD_VAR 0 1
3249: PUSH
3250: FOR_TO
3251: IFFALSE 3669
// begin uc_direction := Rand ( 0 , 5 ) ;
3253: LD_ADDR_OWVAR 24
3257: PUSH
3258: LD_INT 0
3260: PPUSH
3261: LD_INT 5
3263: PPUSH
3264: CALL_OW 12
3268: ST_TO_ADDR
// if commander then
3269: LD_LOC 1
3273: IFFALSE 3382
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3275: LD_ADDR_OWVAR 26
3279: PUSH
3280: LD_OWVAR 19
3284: PUSH
3285: LD_OWVAR 20
3289: ARRAY
3290: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3291: LD_INT 1
3293: PPUSH
3294: LD_INT 2
3296: PPUSH
3297: CALL_OW 12
3301: PPUSH
3302: LD_VAR 0 2
3306: PPUSH
3307: LD_EXP 6
3311: PUSH
3312: LD_INT 2
3314: PLUS
3315: PPUSH
3316: CALL_OW 380
// hc_importance := 105 ;
3320: LD_ADDR_OWVAR 32
3324: PUSH
3325: LD_INT 105
3327: ST_TO_ADDR
// commander := false ;
3328: LD_ADDR_LOC 1
3332: PUSH
3333: LD_INT 0
3335: ST_TO_ADDR
// if Multiplayer then
3336: LD_OWVAR 4
3340: IFFALSE 3380
// begin hc_gallery := MULTIAVATARS ;
3342: LD_ADDR_OWVAR 33
3346: PUSH
3347: LD_STRING MULTIAVATARS
3349: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3350: LD_ADDR_OWVAR 34
3354: PUSH
3355: LD_OWVAR 20
3359: PPUSH
3360: CALL_OW 525
3364: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3365: LD_ADDR_OWVAR 27
3369: PUSH
3370: LD_OWVAR 20
3374: PPUSH
3375: CALL_OW 526
3379: ST_TO_ADDR
// end ; end else
3380: GO 3445
// begin hc_name :=  ;
3382: LD_ADDR_OWVAR 26
3386: PUSH
3387: LD_STRING 
3389: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3390: LD_INT 1
3392: PPUSH
3393: LD_INT 2
3395: PPUSH
3396: CALL_OW 12
3400: PPUSH
3401: LD_VAR 0 2
3405: PPUSH
3406: LD_EXP 6
3410: PPUSH
3411: CALL_OW 380
// hc_importance := 0 ;
3415: LD_ADDR_OWVAR 32
3419: PUSH
3420: LD_INT 0
3422: ST_TO_ADDR
// if Multiplayer then
3423: LD_OWVAR 4
3427: IFFALSE 3445
// begin hc_gallery :=  ;
3429: LD_ADDR_OWVAR 33
3433: PUSH
3434: LD_STRING 
3436: ST_TO_ADDR
// hc_face_number := 0 ;
3437: LD_ADDR_OWVAR 34
3441: PUSH
3442: LD_INT 0
3444: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3445: LD_ADDR_VAR 0 10
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// if global_defined then
3455: LD_LOC 3
3459: IFFALSE 3599
// begin if ( cl = class_soldier ) then
3461: LD_VAR 0 2
3465: PUSH
3466: LD_INT 1
3468: EQUAL
3469: IFFALSE 3489
// j := i + soldiers_created else
3471: LD_ADDR_VAR 0 9
3475: PUSH
3476: LD_VAR 0 8
3480: PUSH
3481: LD_LOC 4
3485: PLUS
3486: ST_TO_ADDR
3487: GO 3499
// j := i ;
3489: LD_ADDR_VAR 0 9
3493: PUSH
3494: LD_VAR 0 8
3498: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3499: LD_LOC 2
3503: PUSH
3504: LD_VAR 0 2
3508: ARRAY
3509: PUSH
3510: LD_VAR 0 9
3514: ARRAY
3515: PPUSH
3516: LD_VAR 0 10
3520: PPUSH
3521: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3525: LD_VAR 0 10
3529: PPUSH
3530: LD_INT 2
3532: PPUSH
3533: LD_LOC 2
3537: PUSH
3538: LD_VAR 0 2
3542: ARRAY
3543: PUSH
3544: LD_VAR 0 9
3548: ARRAY
3549: PPUSH
3550: LD_INT 2
3552: PPUSH
3553: CALL_OW 260
3557: PPUSH
3558: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3562: LD_VAR 0 10
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: LD_LOC 2
3574: PUSH
3575: LD_VAR 0 2
3579: ARRAY
3580: PUSH
3581: LD_VAR 0 9
3585: ARRAY
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: CALL_OW 260
3594: PPUSH
3595: CALL_OW 239
// end ; if building then
3599: LD_VAR 0 6
3603: IFFALSE 3621
// PlaceHumanInUnit ( un , building ) else
3605: LD_VAR 0 10
3609: PPUSH
3610: LD_VAR 0 6
3614: PPUSH
3615: CALL_OW 52
3619: GO 3648
// PlaceUnitXYR ( un , x , y , r , false ) ;
3621: LD_VAR 0 10
3625: PPUSH
3626: LD_VAR 0 3
3630: PPUSH
3631: LD_VAR 0 4
3635: PPUSH
3636: LD_VAR 0 5
3640: PPUSH
3641: LD_INT 0
3643: PPUSH
3644: CALL_OW 50
// result := result ^ [ un ] ;
3648: LD_ADDR_VAR 0 7
3652: PUSH
3653: LD_VAR 0 7
3657: PUSH
3658: LD_VAR 0 10
3662: PUSH
3663: EMPTY
3664: LIST
3665: ADD
3666: ST_TO_ADDR
// end ;
3667: GO 3250
3669: POP
3670: POP
// if not global_defined then
3671: LD_LOC 3
3675: NOT
3676: IFFALSE 3754
// if ( global_units >= cl ) then
3678: LD_LOC 2
3682: PUSH
3683: LD_VAR 0 2
3687: GREATEREQUAL
3688: IFFALSE 3729
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3690: LD_ADDR_LOC 2
3694: PUSH
3695: LD_LOC 2
3699: PPUSH
3700: LD_VAR 0 2
3704: PPUSH
3705: LD_LOC 2
3709: PUSH
3710: LD_VAR 0 2
3714: ARRAY
3715: PUSH
3716: LD_VAR 0 7
3720: ADD
3721: PPUSH
3722: CALL_OW 1
3726: ST_TO_ADDR
3727: GO 3754
// global_units := Replace ( global_units , cl , result ) ;
3729: LD_ADDR_LOC 2
3733: PUSH
3734: LD_LOC 2
3738: PPUSH
3739: LD_VAR 0 2
3743: PPUSH
3744: LD_VAR 0 7
3748: PPUSH
3749: CALL_OW 1
3753: ST_TO_ADDR
// if commander then
3754: LD_LOC 1
3758: IFFALSE 3805
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3760: LD_ADDR_EXP 33
3764: PUSH
3765: LD_EXP 33
3769: PPUSH
3770: LD_OWVAR 20
3774: PPUSH
3775: LD_EXP 33
3779: PUSH
3780: LD_OWVAR 20
3784: ARRAY
3785: PUSH
3786: LD_VAR 0 10
3790: ADD
3791: PPUSH
3792: CALL_OW 1
3796: ST_TO_ADDR
// commander := false ;
3797: LD_ADDR_LOC 1
3801: PUSH
3802: LD_INT 0
3804: ST_TO_ADDR
// end ; end ;
3805: LD_VAR 0 7
3809: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3810: LD_INT 0
3812: PPUSH
3813: PPUSH
3814: PPUSH
3815: PPUSH
3816: PPUSH
3817: PPUSH
3818: PPUSH
3819: PPUSH
3820: PPUSH
// if side in [ 0 , 9 ] then
3821: LD_VAR 0 1
3825: PUSH
3826: LD_INT 0
3828: PUSH
3829: LD_INT 9
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: IN
3836: IFFALSE 3840
// exit ;
3838: GO 4890
// pos := Side_Positions [ side ] ;
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: LD_EXP 19
3849: PUSH
3850: LD_VAR 0 1
3854: ARRAY
3855: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3856: LD_ADDR_OWVAR 21
3860: PUSH
3861: LD_EXP 20
3865: PUSH
3866: LD_VAR 0 1
3870: ARRAY
3871: ST_TO_ADDR
// uc_side := side ;
3872: LD_ADDR_OWVAR 20
3876: PUSH
3877: LD_VAR 0 1
3881: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3882: LD_ADDR_VAR 0 4
3886: PUSH
3887: LD_EXP 24
3891: PUSH
3892: LD_VAR 0 3
3896: ARRAY
3897: PUSH
3898: LD_INT 1
3900: ARRAY
3901: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3902: LD_ADDR_VAR 0 5
3906: PUSH
3907: LD_EXP 24
3911: PUSH
3912: LD_VAR 0 3
3916: ARRAY
3917: PUSH
3918: LD_INT 2
3920: ARRAY
3921: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3922: LD_ADDR_VAR 0 6
3926: PUSH
3927: LD_EXP 24
3931: PUSH
3932: LD_VAR 0 3
3936: ARRAY
3937: PUSH
3938: LD_INT 3
3940: ARRAY
3941: ST_TO_ADDR
// if is_depot then
3942: LD_EXP 3
3946: IFFALSE 4079
// begin bc_type = b_depot ;
3948: LD_ADDR_OWVAR 42
3952: PUSH
3953: LD_INT 0
3955: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3956: LD_ADDR_VAR 0 10
3960: PUSH
3961: LD_VAR 0 4
3965: PPUSH
3966: LD_VAR 0 5
3970: PPUSH
3971: LD_VAR 0 6
3975: PPUSH
3976: CALL_OW 47
3980: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3981: LD_VAR 0 10
3985: PPUSH
3986: LD_STRING @
3988: PUSH
3989: LD_VAR 0 1
3993: STR
3994: PPUSH
3995: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3999: LD_VAR 0 10
4003: PPUSH
4004: CALL_OW 274
4008: PPUSH
4009: LD_INT 1
4011: PPUSH
4012: LD_EXP 8
4016: PUSH
4017: LD_INT 1
4019: ARRAY
4020: PPUSH
4021: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
4025: LD_VAR 0 10
4029: PPUSH
4030: CALL_OW 274
4034: PPUSH
4035: LD_INT 2
4037: PPUSH
4038: LD_EXP 8
4042: PUSH
4043: LD_INT 2
4045: ARRAY
4046: PPUSH
4047: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4051: LD_VAR 0 10
4055: PPUSH
4056: CALL_OW 274
4060: PPUSH
4061: LD_INT 3
4063: PPUSH
4064: LD_EXP 8
4068: PUSH
4069: LD_INT 3
4071: ARRAY
4072: PPUSH
4073: CALL_OW 277
// end else
4077: GO 4223
// begin for i := 1 to 3 do
4079: LD_ADDR_VAR 0 7
4083: PUSH
4084: DOUBLE
4085: LD_INT 1
4087: DEC
4088: ST_TO_ADDR
4089: LD_INT 3
4091: PUSH
4092: FOR_TO
4093: IFFALSE 4221
// begin r := starting_resources [ i ] ;
4095: LD_ADDR_VAR 0 8
4099: PUSH
4100: LD_EXP 8
4104: PUSH
4105: LD_VAR 0 7
4109: ARRAY
4110: ST_TO_ADDR
// while r >= 10 do
4111: LD_VAR 0 8
4115: PUSH
4116: LD_INT 10
4118: GREATEREQUAL
4119: IFFALSE 4219
// if r > 50 then
4121: LD_VAR 0 8
4125: PUSH
4126: LD_INT 50
4128: GREATER
4129: IFFALSE 4175
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4131: LD_VAR 0 7
4135: PPUSH
4136: LD_INT 5
4138: PPUSH
4139: LD_VAR 0 4
4143: PPUSH
4144: LD_VAR 0 5
4148: PPUSH
4149: LD_INT 4
4151: PPUSH
4152: LD_INT 0
4154: PPUSH
4155: CALL_OW 60
// r := r - 50 ;
4159: LD_ADDR_VAR 0 8
4163: PUSH
4164: LD_VAR 0 8
4168: PUSH
4169: LD_INT 50
4171: MINUS
4172: ST_TO_ADDR
// end else
4173: GO 4217
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4175: LD_VAR 0 7
4179: PPUSH
4180: LD_VAR 0 8
4184: PUSH
4185: LD_INT 10
4187: DIV
4188: PPUSH
4189: LD_VAR 0 4
4193: PPUSH
4194: LD_VAR 0 5
4198: PPUSH
4199: LD_INT 4
4201: PPUSH
4202: LD_INT 0
4204: PPUSH
4205: CALL_OW 60
// r := 0 ;
4209: LD_ADDR_VAR 0 8
4213: PUSH
4214: LD_INT 0
4216: ST_TO_ADDR
// end ;
4217: GO 4111
// end ;
4219: GO 4092
4221: POP
4222: POP
// end ; for r in starting_crates do
4223: LD_ADDR_VAR 0 8
4227: PUSH
4228: LD_EXP 7
4232: PUSH
4233: FOR_IN
4234: IFFALSE 4266
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4236: LD_INT 1
4238: PPUSH
4239: LD_INT 5
4241: PPUSH
4242: LD_VAR 0 4
4246: PPUSH
4247: LD_VAR 0 5
4251: PPUSH
4252: LD_VAR 0 8
4256: PPUSH
4257: LD_INT 0
4259: PPUSH
4260: CALL_OW 60
4264: GO 4233
4266: POP
4267: POP
// if def_morale_flags then
4268: LD_EXP 52
4272: IFFALSE 4411
// begin x := start_def [ pos ] [ 1 ] ;
4274: LD_ADDR_VAR 0 4
4278: PUSH
4279: LD_EXP 26
4283: PUSH
4284: LD_VAR 0 3
4288: ARRAY
4289: PUSH
4290: LD_INT 1
4292: ARRAY
4293: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4294: LD_ADDR_VAR 0 5
4298: PUSH
4299: LD_EXP 26
4303: PUSH
4304: LD_VAR 0 3
4308: ARRAY
4309: PUSH
4310: LD_INT 2
4312: ARRAY
4313: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4314: LD_VAR 0 4
4318: PPUSH
4319: LD_VAR 0 5
4323: PPUSH
4324: LD_INT 12
4326: PPUSH
4327: LD_INT 2
4329: PPUSH
4330: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4334: LD_ADDR_EXP 31
4338: PUSH
4339: LD_EXP 31
4343: PUSH
4344: LD_VAR 0 1
4348: PPUSH
4349: LD_VAR 0 4
4353: PPUSH
4354: LD_VAR 0 5
4358: PPUSH
4359: LD_INT 1
4361: PUSH
4362: LD_INT 100
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PUSH
4369: LD_INT 2
4371: PUSH
4372: LD_INT 50
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: PUSH
4379: LD_INT 3
4381: PUSH
4382: LD_INT 20
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 20
4391: PUSH
4392: LD_INT 100
4394: PUSH
4395: EMPTY
4396: LIST
4397: LIST
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: PPUSH
4405: CALL_OW 418
4409: ADD
4410: ST_TO_ADDR
// end ; commander := true ;
4411: LD_ADDR_LOC 1
4415: PUSH
4416: LD_INT 1
4418: ST_TO_ADDR
// soldiers_created := 0 ;
4419: LD_ADDR_LOC 4
4423: PUSH
4424: LD_INT 0
4426: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4427: LD_ADDR_VAR 0 7
4431: PUSH
4432: DOUBLE
4433: LD_INT 1
4435: DEC
4436: ST_TO_ADDR
4437: LD_EXP 4
4441: PUSH
4442: FOR_TO
4443: IFFALSE 4596
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4445: LD_ADDR_VAR 0 4
4449: PUSH
4450: LD_EXP 25
4454: PUSH
4455: LD_VAR 0 3
4459: ARRAY
4460: PUSH
4461: LD_VAR 0 7
4465: ARRAY
4466: PUSH
4467: LD_INT 1
4469: ARRAY
4470: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4471: LD_ADDR_VAR 0 5
4475: PUSH
4476: LD_EXP 25
4480: PUSH
4481: LD_VAR 0 3
4485: ARRAY
4486: PUSH
4487: LD_VAR 0 7
4491: ARRAY
4492: PUSH
4493: LD_INT 2
4495: ARRAY
4496: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4497: LD_ADDR_VAR 0 6
4501: PUSH
4502: LD_EXP 25
4506: PUSH
4507: LD_VAR 0 3
4511: ARRAY
4512: PUSH
4513: LD_VAR 0 7
4517: ARRAY
4518: PUSH
4519: LD_INT 3
4521: ARRAY
4522: ST_TO_ADDR
// bc_type := b_breastwork ;
4523: LD_ADDR_OWVAR 42
4527: PUSH
4528: LD_INT 31
4530: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4531: LD_ADDR_VAR 0 9
4535: PUSH
4536: LD_VAR 0 4
4540: PPUSH
4541: LD_VAR 0 5
4545: PPUSH
4546: LD_VAR 0 6
4550: PPUSH
4551: CALL_OW 47
4555: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4556: LD_INT 1
4558: PPUSH
4559: LD_INT 1
4561: PPUSH
4562: LD_INT 0
4564: PPUSH
4565: LD_INT 0
4567: PPUSH
4568: LD_INT 0
4570: PPUSH
4571: LD_VAR 0 9
4575: PPUSH
4576: CALL 3222 0 6
// soldiers_created := soldiers_created + 1 ;
4580: LD_ADDR_LOC 4
4584: PUSH
4585: LD_LOC 4
4589: PUSH
4590: LD_INT 1
4592: PLUS
4593: ST_TO_ADDR
// end ;
4594: GO 4442
4596: POP
4597: POP
// x := start_def [ pos ] [ 1 ] ;
4598: LD_ADDR_VAR 0 4
4602: PUSH
4603: LD_EXP 26
4607: PUSH
4608: LD_VAR 0 3
4612: ARRAY
4613: PUSH
4614: LD_INT 1
4616: ARRAY
4617: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4618: LD_ADDR_VAR 0 5
4622: PUSH
4623: LD_EXP 26
4627: PUSH
4628: LD_VAR 0 3
4632: ARRAY
4633: PUSH
4634: LD_INT 2
4636: ARRAY
4637: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4638: LD_LOC 8
4642: PUSH
4643: LD_EXP 4
4647: MINUS
4648: PPUSH
4649: LD_INT 1
4651: PPUSH
4652: LD_VAR 0 4
4656: PPUSH
4657: LD_VAR 0 5
4661: PPUSH
4662: LD_INT 5
4664: PPUSH
4665: LD_INT 0
4667: PPUSH
4668: CALL 3222 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4672: LD_LOC 5
4676: PPUSH
4677: LD_INT 2
4679: PPUSH
4680: LD_VAR 0 4
4684: PPUSH
4685: LD_VAR 0 5
4689: PPUSH
4690: LD_INT 5
4692: PPUSH
4693: LD_INT 0
4695: PPUSH
4696: CALL 3222 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4700: LD_LOC 7
4704: PPUSH
4705: LD_INT 3
4707: PPUSH
4708: LD_VAR 0 4
4712: PPUSH
4713: LD_VAR 0 5
4717: PPUSH
4718: LD_INT 5
4720: PPUSH
4721: LD_INT 0
4723: PPUSH
4724: CALL 3222 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4728: LD_LOC 6
4732: PPUSH
4733: LD_INT 4
4735: PPUSH
4736: LD_VAR 0 4
4740: PPUSH
4741: LD_VAR 0 5
4745: PPUSH
4746: LD_INT 5
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: CALL 3222 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4756: LD_EXP 53
4760: PUSH
4761: LD_INT 20
4763: PPUSH
4764: LD_VAR 0 1
4768: PPUSH
4769: CALL_OW 321
4773: PUSH
4774: LD_INT 1
4776: EQUAL
4777: AND
4778: IFFALSE 4795
// SetTech ( tech_SibDet , side , state_researched ) ;
4780: LD_INT 20
4782: PPUSH
4783: LD_VAR 0 1
4787: PPUSH
4788: LD_INT 2
4790: PPUSH
4791: CALL_OW 322
// if def_siberite_bomb = 1 then
4795: LD_EXP 56
4799: PUSH
4800: LD_INT 1
4802: EQUAL
4803: IFFALSE 4837
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4805: LD_INT 25
4807: PPUSH
4808: LD_VAR 0 1
4812: PPUSH
4813: LD_INT 1
4815: PPUSH
4816: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4820: LD_INT 73
4822: PPUSH
4823: LD_VAR 0 1
4827: PPUSH
4828: LD_INT 1
4830: PPUSH
4831: CALL_OW 322
// end else
4835: GO 4867
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4837: LD_INT 25
4839: PPUSH
4840: LD_VAR 0 1
4844: PPUSH
4845: LD_INT 0
4847: PPUSH
4848: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4852: LD_INT 73
4854: PPUSH
4855: LD_VAR 0 1
4859: PPUSH
4860: LD_INT 0
4862: PPUSH
4863: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4867: LD_INT 24
4869: PPUSH
4870: LD_VAR 0 1
4874: PPUSH
4875: LD_INT 0
4877: PPUSH
4878: CALL_OW 322
// global_defined := true ;
4882: LD_ADDR_LOC 3
4886: PUSH
4887: LD_INT 1
4889: ST_TO_ADDR
// end ;
4890: LD_VAR 0 2
4894: RET
// every 0 0$1 do
4895: GO 4897
4897: DISABLE
// if ( def_siberite_bomb > 1 ) then
4898: LD_EXP 56
4902: PUSH
4903: LD_INT 1
4905: GREATER
4906: IFFALSE 4921
// begin wait ( siberite_bomb_Delay ) ;
4908: LD_EXP 16
4912: PPUSH
4913: CALL_OW 67
// EnableSibFiss ;
4917: CALL 4922 0 0
// end ;
4921: END
// function EnableSibFiss ; var i ; begin
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
// for i := 1 to 8 do
4926: LD_ADDR_VAR 0 2
4930: PUSH
4931: DOUBLE
4932: LD_INT 1
4934: DEC
4935: ST_TO_ADDR
4936: LD_INT 8
4938: PUSH
4939: FOR_TO
4940: IFFALSE 4986
// if Side_Positions [ i ] then
4942: LD_EXP 19
4946: PUSH
4947: LD_VAR 0 2
4951: ARRAY
4952: IFFALSE 4984
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4954: LD_INT 25
4956: PPUSH
4957: LD_VAR 0 2
4961: PPUSH
4962: LD_INT 1
4964: PPUSH
4965: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4969: LD_INT 73
4971: PPUSH
4972: LD_VAR 0 2
4976: PPUSH
4977: LD_INT 1
4979: PPUSH
4980: CALL_OW 322
// end ;
4984: GO 4939
4986: POP
4987: POP
// end ;
4988: LD_VAR 0 1
4992: RET
// function prepare_sides ; var i ; begin
4993: LD_INT 0
4995: PPUSH
4996: PPUSH
// global_units := [ ] ;
4997: LD_ADDR_LOC 2
5001: PUSH
5002: EMPTY
5003: ST_TO_ADDR
// global_defined := false ;
5004: LD_ADDR_LOC 3
5008: PUSH
5009: LD_INT 0
5011: ST_TO_ADDR
// CountClassMembers ;
5012: CALL 5062 0 0
// for i := 1 to 8 do
5016: LD_ADDR_VAR 0 2
5020: PUSH
5021: DOUBLE
5022: LD_INT 1
5024: DEC
5025: ST_TO_ADDR
5026: LD_INT 8
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5055
// if Side_Positions [ i ] then
5032: LD_EXP 19
5036: PUSH
5037: LD_VAR 0 2
5041: ARRAY
5042: IFFALSE 5053
// prepare_side ( i ) ;
5044: LD_VAR 0 2
5048: PPUSH
5049: CALL 3810 0 1
5053: GO 5029
5055: POP
5056: POP
// end ;
5057: LD_VAR 0 1
5061: RET
// function CountClassMembers ; var Mode ; begin
5062: LD_INT 0
5064: PPUSH
5065: PPUSH
// if No_Mechs then
5066: LD_EXP 58
5070: IFFALSE 5082
// Mode := 2 else
5072: LD_ADDR_VAR 0 2
5076: PUSH
5077: LD_INT 2
5079: ST_TO_ADDR
5080: GO 5090
// Mode := 1 ;
5082: LD_ADDR_VAR 0 2
5086: PUSH
5087: LD_INT 1
5089: ST_TO_ADDR
// neng := number_of_people ;
5090: LD_ADDR_LOC 5
5094: PUSH
5095: LD_EXP 5
5099: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5100: LD_ADDR_LOC 8
5104: PUSH
5105: LD_LOC 5
5109: PUSH
5110: LD_INT 4
5112: PUSH
5113: LD_INT 3
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: LD_VAR 0 2
5124: ARRAY
5125: DIV
5126: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5127: LD_LOC 8
5131: PUSH
5132: LD_EXP 4
5136: LESS
5137: IFFALSE 5149
// nsol := number_of_breastworks ;
5139: LD_ADDR_LOC 8
5143: PUSH
5144: LD_EXP 4
5148: ST_TO_ADDR
// neng := neng - nsol ;
5149: LD_ADDR_LOC 5
5153: PUSH
5154: LD_LOC 5
5158: PUSH
5159: LD_LOC 8
5163: MINUS
5164: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5165: LD_ADDR_LOC 6
5169: PUSH
5170: LD_LOC 5
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: LD_INT 2
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PUSH
5185: LD_VAR 0 2
5189: ARRAY
5190: DIV
5191: ST_TO_ADDR
// if ( nsci < 1 ) then
5192: LD_LOC 6
5196: PUSH
5197: LD_INT 1
5199: LESS
5200: IFFALSE 5210
// nsci := 1 ;
5202: LD_ADDR_LOC 6
5206: PUSH
5207: LD_INT 1
5209: ST_TO_ADDR
// neng := neng - nsci ;
5210: LD_ADDR_LOC 5
5214: PUSH
5215: LD_LOC 5
5219: PUSH
5220: LD_LOC 6
5224: MINUS
5225: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5226: LD_ADDR_LOC 7
5230: PUSH
5231: LD_LOC 5
5235: PUSH
5236: LD_INT 2
5238: DIV
5239: PUSH
5240: LD_INT 0
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PUSH
5247: LD_VAR 0 2
5251: ARRAY
5252: ST_TO_ADDR
// neng := neng - nmech ;
5253: LD_ADDR_LOC 5
5257: PUSH
5258: LD_LOC 5
5262: PUSH
5263: LD_LOC 7
5267: MINUS
5268: ST_TO_ADDR
// if ( neng < 1 ) then
5269: LD_LOC 5
5273: PUSH
5274: LD_INT 1
5276: LESS
5277: IFFALSE 5287
// neng := 1 ;
5279: LD_ADDR_LOC 5
5283: PUSH
5284: LD_INT 1
5286: ST_TO_ADDR
// end ;
5287: LD_VAR 0 1
5291: RET
// starting begin disable ( 98 ) ;
5292: LD_INT 98
5294: DISABLE_MARKED
// disable ( 99 ) ;
5295: LD_INT 99
5297: DISABLE_MARKED
// disable ( 100 ) ;
5298: LD_INT 100
5300: DISABLE_MARKED
// disable ( 200 ) ;
5301: LD_INT 200
5303: DISABLE_MARKED
// disable ( 400 ) ;
5304: LD_INT 400
5306: DISABLE_MARKED
// disable ( 401 ) ;
5307: LD_INT 401
5309: DISABLE_MARKED
// disable ( 600 ) ;
5310: LD_INT 600
5312: DISABLE_MARKED
// mp_selectmsg := true ;
5313: LD_ADDR_OWVAR 13
5317: PUSH
5318: LD_INT 1
5320: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5321: CALL 68 0 0
// init_map ;
5325: CALL 1769 0 0
// set_shared_visions_and_alliances ;
5329: CALL 2934 0 0
// ResetFog ;
5333: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5337: LD_OWVAR 2
5341: PPUSH
5342: CALL_OW 520
// prepare_sides ;
5346: CALL 4993 0 0
// init_respawning ;
5350: CALL 7060 0 0
// Init_Win_Condition ;
5354: CALL 14156 0 0
// InitLimits ;
5358: CALL 12745 0 0
// ShowTimer ;
5362: CALL 13682 0 0
// case Game_Type of 3 :
5366: LD_EXP 42
5370: PUSH
5371: LD_INT 3
5373: DOUBLE
5374: EQUAL
5375: IFTRUE 5379
5377: GO 5385
5379: POP
// enable ( 100 ) ; 4 :
5380: LD_INT 100
5382: ENABLE_MARKED
5383: GO 5401
5385: LD_INT 4
5387: DOUBLE
5388: EQUAL
5389: IFTRUE 5393
5391: GO 5400
5393: POP
// InitBloodGods ; end ;
5394: CALL 10308 0 0
5398: GO 5401
5400: POP
// music_nat := Side_Nations [ your_side ] ;
5401: LD_ADDR_OWVAR 71
5405: PUSH
5406: LD_EXP 20
5410: PUSH
5411: LD_OWVAR 2
5415: ARRAY
5416: ST_TO_ADDR
// if IAmSpec then
5417: CALL_OW 531
5421: IFFALSE 5445
// begin fogOff ( true ) ;
5423: LD_INT 1
5425: PPUSH
5426: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
5430: LD_INT 104
5432: PPUSH
5433: LD_INT 69
5435: PPUSH
5436: CALL_OW 86
// enable ( 400 ) ;
5440: LD_INT 400
5442: ENABLE_MARKED
// end else
5443: GO 5491
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5445: LD_EXP 26
5449: PUSH
5450: LD_EXP 19
5454: PUSH
5455: LD_OWVAR 2
5459: ARRAY
5460: ARRAY
5461: PUSH
5462: LD_INT 1
5464: ARRAY
5465: PPUSH
5466: LD_EXP 26
5470: PUSH
5471: LD_EXP 19
5475: PUSH
5476: LD_OWVAR 2
5480: ARRAY
5481: ARRAY
5482: PUSH
5483: LD_INT 2
5485: ARRAY
5486: PPUSH
5487: CALL_OW 86
// end ; InitApeman ;
5491: CALL 6227 0 0
// if def_builduptime then
5495: LD_EXP 57
5499: IFFALSE 5505
// BeginBuildUp ;
5501: CALL 8939 0 0
// end ; end_of_file
5505: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5506: GO 5508
5508: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5509: LD_INT 4
5511: PPUSH
5512: LD_INT 5
5514: PPUSH
5515: CALL_OW 12
5519: PPUSH
5520: LD_INT 1
5522: PPUSH
5523: CALL_OW 57
// enable ;
5527: ENABLE
// end ;
5528: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5529: GO 5531
5531: DISABLE
5532: LD_INT 0
5534: PPUSH
5535: PPUSH
// begin case tick of 1 .. 1 1$0 :
5536: LD_OWVAR 1
5540: PUSH
5541: LD_INT 1
5543: DOUBLE
5544: GREATEREQUAL
5545: IFFALSE 5553
5547: LD_INT 2100
5549: DOUBLE
5550: LESSEQUAL
5551: IFTRUE 5555
5553: GO 5583
5555: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5556: LD_EXP 9
5560: PUSH
5561: LD_INT 100
5563: DIVREAL
5564: PUSH
5565: LD_INT 350
5567: PPUSH
5568: LD_INT 1050
5570: PPUSH
5571: CALL_OW 12
5575: MUL
5576: PPUSH
5577: CALL_OW 67
5581: GO 5885
5583: LD_INT 2100
5585: PUSH
5586: LD_INT 1
5588: PLUS
5589: DOUBLE
5590: GREATEREQUAL
5591: IFFALSE 5599
5593: LD_INT 10500
5595: DOUBLE
5596: LESSEQUAL
5597: IFTRUE 5601
5599: GO 5629
5601: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5602: LD_EXP 9
5606: PUSH
5607: LD_INT 100
5609: DIVREAL
5610: PUSH
5611: LD_INT 1050
5613: PPUSH
5614: LD_INT 1575
5616: PPUSH
5617: CALL_OW 12
5621: MUL
5622: PPUSH
5623: CALL_OW 67
5627: GO 5885
5629: LD_INT 10500
5631: PUSH
5632: LD_INT 1
5634: PLUS
5635: DOUBLE
5636: GREATEREQUAL
5637: IFFALSE 5645
5639: LD_INT 21000
5641: DOUBLE
5642: LESSEQUAL
5643: IFTRUE 5647
5645: GO 5675
5647: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5648: LD_EXP 9
5652: PUSH
5653: LD_INT 100
5655: DIVREAL
5656: PUSH
5657: LD_INT 1575
5659: PPUSH
5660: LD_INT 2100
5662: PPUSH
5663: CALL_OW 12
5667: MUL
5668: PPUSH
5669: CALL_OW 67
5673: GO 5885
5675: LD_INT 21000
5677: PUSH
5678: LD_INT 1
5680: PLUS
5681: DOUBLE
5682: GREATEREQUAL
5683: IFFALSE 5691
5685: LD_INT 42000
5687: DOUBLE
5688: LESSEQUAL
5689: IFTRUE 5693
5691: GO 5721
5693: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5694: LD_EXP 9
5698: PUSH
5699: LD_INT 100
5701: DIVREAL
5702: PUSH
5703: LD_INT 2100
5705: PPUSH
5706: LD_INT 2625
5708: PPUSH
5709: CALL_OW 12
5713: MUL
5714: PPUSH
5715: CALL_OW 67
5719: GO 5885
5721: LD_INT 42000
5723: PUSH
5724: LD_INT 1
5726: PLUS
5727: DOUBLE
5728: GREATEREQUAL
5729: IFFALSE 5737
5731: LD_INT 63000
5733: DOUBLE
5734: LESSEQUAL
5735: IFTRUE 5739
5737: GO 5767
5739: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5740: LD_EXP 9
5744: PUSH
5745: LD_INT 100
5747: DIVREAL
5748: PUSH
5749: LD_INT 2625
5751: PPUSH
5752: LD_INT 3150
5754: PPUSH
5755: CALL_OW 12
5759: MUL
5760: PPUSH
5761: CALL_OW 67
5765: GO 5885
5767: LD_INT 63000
5769: PUSH
5770: LD_INT 1
5772: PLUS
5773: DOUBLE
5774: GREATEREQUAL
5775: IFFALSE 5783
5777: LD_INT 105000
5779: DOUBLE
5780: LESSEQUAL
5781: IFTRUE 5785
5783: GO 5813
5785: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5786: LD_EXP 9
5790: PUSH
5791: LD_INT 100
5793: DIVREAL
5794: PUSH
5795: LD_INT 3150
5797: PPUSH
5798: LD_INT 3675
5800: PPUSH
5801: CALL_OW 12
5805: MUL
5806: PPUSH
5807: CALL_OW 67
5811: GO 5885
5813: LD_INT 105000
5815: PUSH
5816: LD_INT 1
5818: PLUS
5819: DOUBLE
5820: GREATEREQUAL
5821: IFFALSE 5829
5823: LD_INT 630000
5825: DOUBLE
5826: LESSEQUAL
5827: IFTRUE 5831
5829: GO 5859
5831: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5832: LD_EXP 9
5836: PUSH
5837: LD_INT 100
5839: DIVREAL
5840: PUSH
5841: LD_INT 3675
5843: PPUSH
5844: LD_INT 4200
5846: PPUSH
5847: CALL_OW 12
5851: MUL
5852: PPUSH
5853: CALL_OW 67
5857: GO 5885
5859: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5860: LD_EXP 9
5864: PUSH
5865: LD_INT 100
5867: DIVREAL
5868: PUSH
5869: LD_INT 4200
5871: PPUSH
5872: LD_INT 5250
5874: PPUSH
5875: CALL_OW 12
5879: MUL
5880: PPUSH
5881: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: LD_INT 3
5892: PPUSH
5893: LD_INT 5
5895: PPUSH
5896: CALL_OW 12
5900: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5901: LD_ADDR_VAR 0 1
5905: PUSH
5906: LD_EXP 19
5910: PUSH
5911: LD_INT 0
5913: PUSH
5914: EMPTY
5915: LIST
5916: DIFF
5917: PUSH
5918: FOR_IN
5919: IFFALSE 5968
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5921: LD_VAR 0 2
5925: PPUSH
5926: LD_EXP 26
5930: PUSH
5931: LD_VAR 0 1
5935: ARRAY
5936: PUSH
5937: LD_INT 1
5939: ARRAY
5940: PPUSH
5941: LD_EXP 26
5945: PUSH
5946: LD_VAR 0 1
5950: ARRAY
5951: PUSH
5952: LD_INT 2
5954: ARRAY
5955: PPUSH
5956: LD_INT 20
5958: PPUSH
5959: LD_INT 1
5961: PPUSH
5962: CALL_OW 56
5966: GO 5918
5968: POP
5969: POP
// enable ;
5970: ENABLE
// end ;
5971: PPOPN 2
5973: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
5974: GO 5976
5976: DISABLE
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
5981: LD_INT 1
5983: PPUSH
5984: LD_INT 1
5986: PPUSH
5987: CALL_OW 287
5991: PUSH
5992: LD_INT 200
5994: PUSH
5995: LD_EXP 9
5999: MINUS
6000: PUSH
6001: LD_INT 100
6003: DIVREAL
6004: PUSH
6005: LD_INT 5
6007: MUL
6008: LESS
6009: IFFALSE 6032
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
6011: LD_INT 3
6013: PPUSH
6014: LD_INT 5
6016: PPUSH
6017: CALL_OW 12
6021: PPUSH
6022: LD_INT 1
6024: PPUSH
6025: LD_INT 1
6027: PPUSH
6028: CALL_OW 55
// enable ;
6032: ENABLE
// end ; end_of_file
6033: PPOPN 2
6035: END
// every 20 20$00 trigger apemanNumber do
6036: LD_EXP 34
6040: IFFALSE 6073
6042: GO 6044
6044: DISABLE
// begin enable ;
6045: ENABLE
// if apeLevel >= 8 then
6046: LD_EXP 39
6050: PUSH
6051: LD_INT 8
6053: GREATEREQUAL
6054: IFFALSE 6059
// disable else
6056: DISABLE
6057: GO 6073
// apeLevel := apeLevel + 1 ;
6059: LD_ADDR_EXP 39
6063: PUSH
6064: LD_EXP 39
6068: PUSH
6069: LD_INT 1
6071: PLUS
6072: ST_TO_ADDR
// end ;
6073: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6074: LD_EXP 34
6078: PUSH
6079: LD_EXP 35
6083: LESS
6084: IFFALSE 6224
6086: GO 6088
6088: DISABLE
6089: LD_INT 0
6091: PPUSH
6092: PPUSH
6093: PPUSH
6094: PPUSH
// begin enable ;
6095: ENABLE
// for i := 1 to apemanPos do
6096: LD_ADDR_VAR 0 1
6100: PUSH
6101: DOUBLE
6102: LD_INT 1
6104: DEC
6105: ST_TO_ADDR
6106: LD_EXP 37
6110: PUSH
6111: FOR_TO
6112: IFFALSE 6222
// begin if apemanPlayerCount [ i ] then
6114: LD_EXP 38
6118: PUSH
6119: LD_VAR 0 1
6123: ARRAY
6124: IFFALSE 6220
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6126: LD_EXP 38
6130: PUSH
6131: LD_VAR 0 1
6135: ARRAY
6136: PUSH
6137: LD_EXP 37
6141: PUSH
6142: LD_VAR 0 1
6146: ARRAY
6147: GREATER
6148: IFFALSE 6220
// begin ape := PrepareApeman ;
6150: LD_ADDR_VAR 0 2
6154: PUSH
6155: CALL 6735 0 0
6159: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6160: LD_VAR 0 2
6164: PPUSH
6165: LD_EXP 40
6169: PUSH
6170: LD_VAR 0 1
6174: ARRAY
6175: PPUSH
6176: LD_INT 0
6178: PPUSH
6179: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6183: LD_ADDR_EXP 37
6187: PUSH
6188: LD_EXP 37
6192: PPUSH
6193: LD_VAR 0 1
6197: PPUSH
6198: LD_EXP 37
6202: PUSH
6203: LD_VAR 0 1
6207: ARRAY
6208: PUSH
6209: LD_VAR 0 2
6213: UNION
6214: PPUSH
6215: CALL_OW 1
6219: ST_TO_ADDR
// end ; end ; end ;
6220: GO 6111
6222: POP
6223: POP
// end ;
6224: PPOPN 4
6226: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6227: LD_INT 0
6229: PPUSH
6230: PPUSH
6231: PPUSH
6232: PPUSH
6233: PPUSH
6234: PPUSH
6235: PPUSH
// playersAmount := 0 ;
6236: LD_ADDR_VAR 0 3
6240: PUSH
6241: LD_INT 0
6243: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6244: LD_ADDR_VAR 0 7
6248: PUSH
6249: LD_INT 2
6251: PUSH
6252: LD_INT 3
6254: PUSH
6255: LD_INT 4
6257: PUSH
6258: LD_INT 5
6260: PUSH
6261: LD_INT 6
6263: PUSH
6264: LD_INT 7
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6275: LD_ADDR_EXP 40
6279: PUSH
6280: LD_INT 0
6282: PUSH
6283: LD_INT 0
6285: PUSH
6286: LD_INT 0
6288: PUSH
6289: LD_INT 0
6291: PUSH
6292: LD_INT 0
6294: PUSH
6295: LD_INT 0
6297: PUSH
6298: LD_INT 0
6300: PUSH
6301: LD_INT 0
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: ST_TO_ADDR
// for j = 1 to Side_Positions do
6314: LD_ADDR_VAR 0 4
6318: PUSH
6319: DOUBLE
6320: LD_INT 1
6322: DEC
6323: ST_TO_ADDR
6324: LD_EXP 19
6328: PUSH
6329: FOR_TO
6330: IFFALSE 6397
// if Side_Positions [ j ] then
6332: LD_EXP 19
6336: PUSH
6337: LD_VAR 0 4
6341: ARRAY
6342: IFFALSE 6395
// begin playersAmount := playersAmount + 1 ;
6344: LD_ADDR_VAR 0 3
6348: PUSH
6349: LD_VAR 0 3
6353: PUSH
6354: LD_INT 1
6356: PLUS
6357: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6358: LD_ADDR_EXP 40
6362: PUSH
6363: LD_EXP 40
6367: PPUSH
6368: LD_VAR 0 4
6372: PPUSH
6373: LD_VAR 0 7
6377: PUSH
6378: LD_EXP 19
6382: PUSH
6383: LD_VAR 0 4
6387: ARRAY
6388: ARRAY
6389: PPUSH
6390: CALL_OW 1
6394: ST_TO_ADDR
// end ;
6395: GO 6329
6397: POP
6398: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6399: LD_ADDR_EXP 36
6403: PUSH
6404: LD_INT 3
6406: PUSH
6407: LD_EXP 15
6411: MUL
6412: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6413: LD_ADDR_EXP 34
6417: PUSH
6418: LD_VAR 0 3
6422: PUSH
6423: LD_EXP 36
6427: MUL
6428: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6429: LD_ADDR_EXP 35
6433: PUSH
6434: LD_EXP 34
6438: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6439: LD_ADDR_EXP 37
6443: PUSH
6444: LD_INT 0
6446: PUSH
6447: LD_INT 0
6449: PUSH
6450: LD_INT 0
6452: PUSH
6453: LD_INT 0
6455: PUSH
6456: LD_INT 0
6458: PUSH
6459: LD_INT 0
6461: PUSH
6462: LD_INT 0
6464: PUSH
6465: LD_INT 0
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6478: LD_ADDR_EXP 38
6482: PUSH
6483: LD_INT 0
6485: PUSH
6486: LD_INT 0
6488: PUSH
6489: LD_INT 0
6491: PUSH
6492: LD_INT 0
6494: PUSH
6495: LD_INT 0
6497: PUSH
6498: LD_INT 0
6500: PUSH
6501: LD_INT 0
6503: PUSH
6504: LD_INT 0
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: ST_TO_ADDR
// apeLevel := 1 ;
6517: LD_ADDR_EXP 39
6521: PUSH
6522: LD_INT 1
6524: ST_TO_ADDR
// if not apemanNumber then
6525: LD_EXP 34
6529: NOT
6530: IFFALSE 6534
// exit ;
6532: GO 6730
// for i := 1 to apemanPerPlayer do
6534: LD_ADDR_VAR 0 2
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_EXP 36
6548: PUSH
6549: FOR_TO
6550: IFFALSE 6728
// begin for j := 1 to Side_Positions do
6552: LD_ADDR_VAR 0 4
6556: PUSH
6557: DOUBLE
6558: LD_INT 1
6560: DEC
6561: ST_TO_ADDR
6562: LD_EXP 19
6566: PUSH
6567: FOR_TO
6568: IFFALSE 6724
// if Side_Positions [ j ] then
6570: LD_EXP 19
6574: PUSH
6575: LD_VAR 0 4
6579: ARRAY
6580: IFFALSE 6722
// begin pos := Side_Positions [ j ] ;
6582: LD_ADDR_VAR 0 6
6586: PUSH
6587: LD_EXP 19
6591: PUSH
6592: LD_VAR 0 4
6596: ARRAY
6597: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6598: LD_ADDR_EXP 38
6602: PUSH
6603: LD_EXP 38
6607: PPUSH
6608: LD_VAR 0 4
6612: PPUSH
6613: LD_EXP 38
6617: PUSH
6618: LD_VAR 0 4
6622: ARRAY
6623: PUSH
6624: LD_INT 1
6626: PLUS
6627: PPUSH
6628: CALL_OW 1
6632: ST_TO_ADDR
// ape := PrepareApeman ;
6633: LD_ADDR_VAR 0 5
6637: PUSH
6638: CALL 6735 0 0
6642: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6643: LD_ADDR_EXP 37
6647: PUSH
6648: LD_EXP 37
6652: PPUSH
6653: LD_VAR 0 4
6657: PPUSH
6658: LD_EXP 37
6662: PUSH
6663: LD_VAR 0 4
6667: ARRAY
6668: PPUSH
6669: LD_EXP 37
6673: PUSH
6674: LD_VAR 0 4
6678: ARRAY
6679: PUSH
6680: LD_INT 1
6682: PLUS
6683: PPUSH
6684: LD_VAR 0 5
6688: PPUSH
6689: CALL_OW 1
6693: PPUSH
6694: CALL_OW 1
6698: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6699: LD_VAR 0 5
6703: PPUSH
6704: LD_EXP 40
6708: PUSH
6709: LD_VAR 0 4
6713: ARRAY
6714: PPUSH
6715: LD_INT 0
6717: PPUSH
6718: CALL_OW 49
// end ;
6722: GO 6567
6724: POP
6725: POP
// end ;
6726: GO 6549
6728: POP
6729: POP
// end ;
6730: LD_VAR 0 1
6734: RET
// export function PrepareApeman ; var bonus ; begin
6735: LD_INT 0
6737: PPUSH
6738: PPUSH
// uc_side := 0 ;
6739: LD_ADDR_OWVAR 20
6743: PUSH
6744: LD_INT 0
6746: ST_TO_ADDR
// uc_nation := 0 ;
6747: LD_ADDR_OWVAR 21
6751: PUSH
6752: LD_INT 0
6754: ST_TO_ADDR
// InitHc ;
6755: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6759: LD_ADDR_VAR 0 2
6763: PUSH
6764: LD_INT 1
6766: NEG
6767: PUSH
6768: LD_INT 0
6770: PUSH
6771: LD_INT 1
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: PUSH
6779: LD_OWVAR 1
6783: PUSH
6784: LD_INT 3
6786: MOD
6787: PUSH
6788: LD_INT 1
6790: PLUS
6791: ARRAY
6792: ST_TO_ADDR
// hc_class := class_apeman ;
6793: LD_ADDR_OWVAR 28
6797: PUSH
6798: LD_INT 12
6800: ST_TO_ADDR
// hc_gallery :=  ;
6801: LD_ADDR_OWVAR 33
6805: PUSH
6806: LD_STRING 
6808: ST_TO_ADDR
// hc_name :=  ;
6809: LD_ADDR_OWVAR 26
6813: PUSH
6814: LD_STRING 
6816: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6817: LD_ADDR_OWVAR 31
6821: PUSH
6822: LD_EXP 39
6826: PUSH
6827: LD_VAR 0 2
6831: PLUS
6832: PUSH
6833: LD_EXP 39
6837: PUSH
6838: LD_VAR 0 2
6842: PLUS
6843: PUSH
6844: LD_EXP 39
6848: PUSH
6849: LD_VAR 0 2
6853: PLUS
6854: PUSH
6855: LD_EXP 39
6859: PUSH
6860: LD_VAR 0 2
6864: PLUS
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6872: LD_ADDR_OWVAR 35
6876: PUSH
6877: LD_INT 10
6879: PUSH
6880: LD_VAR 0 2
6884: MUL
6885: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6886: LD_ADDR_OWVAR 29
6890: PUSH
6891: LD_INT 12
6893: PUSH
6894: LD_INT 10
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: ST_TO_ADDR
// result := CreateHuman ;
6901: LD_ADDR_VAR 0 1
6905: PUSH
6906: CALL_OW 44
6910: ST_TO_ADDR
// end ;
6911: LD_VAR 0 1
6915: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6916: LD_INT 0
6918: PPUSH
6919: PPUSH
6920: PPUSH
// if not ape then
6921: LD_VAR 0 1
6925: NOT
6926: IFFALSE 6930
// exit ;
6928: GO 7055
// side := GetSide ( ape ) ;
6930: LD_ADDR_VAR 0 3
6934: PUSH
6935: LD_VAR 0 1
6939: PPUSH
6940: CALL_OW 255
6944: ST_TO_ADDR
// if not side then
6945: LD_VAR 0 3
6949: NOT
6950: IFFALSE 7004
// begin for i = 1 to apemanPos do
6952: LD_ADDR_VAR 0 4
6956: PUSH
6957: DOUBLE
6958: LD_INT 1
6960: DEC
6961: ST_TO_ADDR
6962: LD_EXP 37
6966: PUSH
6967: FOR_TO
6968: IFFALSE 7002
// if ape in apemanPos [ i ] then
6970: LD_VAR 0 1
6974: PUSH
6975: LD_EXP 37
6979: PUSH
6980: LD_VAR 0 4
6984: ARRAY
6985: IN
6986: IFFALSE 7000
// begin side := i ;
6988: LD_ADDR_VAR 0 3
6992: PUSH
6993: LD_VAR 0 4
6997: ST_TO_ADDR
// break ;
6998: GO 7002
// end ;
7000: GO 6967
7002: POP
7003: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7004: LD_ADDR_EXP 37
7008: PUSH
7009: LD_EXP 37
7013: PPUSH
7014: LD_VAR 0 3
7018: PPUSH
7019: LD_EXP 37
7023: PUSH
7024: LD_VAR 0 3
7028: ARRAY
7029: PUSH
7030: LD_VAR 0 1
7034: DIFF
7035: PPUSH
7036: CALL_OW 1
7040: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7041: LD_ADDR_EXP 34
7045: PUSH
7046: LD_EXP 34
7050: PUSH
7051: LD_INT 1
7053: MINUS
7054: ST_TO_ADDR
// end ; end_of_file
7055: LD_VAR 0 2
7059: RET
// var respawn , inqueue ; export function init_respawning ; begin
7060: LD_INT 0
7062: PPUSH
// respawn := Rand ( 1 , 8 ) ;
7063: LD_ADDR_LOC 9
7067: PUSH
7068: LD_INT 1
7070: PPUSH
7071: LD_INT 8
7073: PPUSH
7074: CALL_OW 12
7078: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7079: LD_ADDR_LOC 10
7083: PUSH
7084: LD_INT 0
7086: PUSH
7087: LD_INT 0
7089: PUSH
7090: LD_INT 0
7092: PUSH
7093: LD_INT 0
7095: PUSH
7096: LD_INT 0
7098: PUSH
7099: LD_INT 0
7101: PUSH
7102: LD_INT 0
7104: PUSH
7105: LD_INT 0
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: ST_TO_ADDR
// end ;
7118: LD_VAR 0 1
7122: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
7123: GO 7125
7125: DISABLE
7126: LD_INT 0
7128: PPUSH
7129: PPUSH
7130: PPUSH
7131: PPUSH
// begin if respawning_time_max = 0 then
7132: LD_EXP 13
7136: PUSH
7137: LD_INT 0
7139: EQUAL
7140: IFFALSE 7144
// exit ;
7142: GO 7651
// if respawn = 8 then
7144: LD_LOC 9
7148: PUSH
7149: LD_INT 8
7151: EQUAL
7152: IFFALSE 7164
// respawn := 1 else
7154: LD_ADDR_LOC 9
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
7162: GO 7178
// respawn := respawn + 1 ;
7164: LD_ADDR_LOC 9
7168: PUSH
7169: LD_LOC 9
7173: PUSH
7174: LD_INT 1
7176: PLUS
7177: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
7178: LD_EXP 19
7182: PUSH
7183: LD_LOC 9
7187: ARRAY
7188: PUSH
7189: LD_LOC 10
7193: PUSH
7194: LD_LOC 9
7198: ARRAY
7199: NOT
7200: AND
7201: IFFALSE 7650
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
7203: LD_ADDR_VAR 0 1
7207: PUSH
7208: LD_INT 21
7210: PUSH
7211: LD_INT 1
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: LD_INT 22
7220: PUSH
7221: LD_LOC 9
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PUSH
7230: LD_INT 3
7232: PUSH
7233: LD_INT 23
7235: PUSH
7236: LD_INT 0
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 69
7253: ST_TO_ADDR
// if n < number_of_people then
7254: LD_VAR 0 1
7258: PUSH
7259: LD_EXP 5
7263: LESS
7264: IFFALSE 7647
// begin aktresp := respawn ;
7266: LD_ADDR_VAR 0 3
7270: PUSH
7271: LD_LOC 9
7275: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7276: LD_ADDR_LOC 10
7280: PUSH
7281: LD_LOC 10
7285: PPUSH
7286: LD_VAR 0 3
7290: PPUSH
7291: LD_INT 1
7293: PPUSH
7294: CALL_OW 1
7298: ST_TO_ADDR
// enable ;
7299: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7300: LD_EXP 12
7304: PPUSH
7305: LD_EXP 13
7309: PPUSH
7310: CALL_OW 12
7314: PPUSH
7315: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7319: LD_ADDR_LOC 10
7323: PUSH
7324: LD_LOC 10
7328: PPUSH
7329: LD_VAR 0 3
7333: PPUSH
7334: LD_INT 0
7336: PPUSH
7337: CALL_OW 1
7341: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7342: LD_ADDR_VAR 0 2
7346: PUSH
7347: LD_INT 21
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 2
7359: PUSH
7360: LD_INT 30
7362: PUSH
7363: LD_INT 0
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: PUSH
7370: LD_INT 30
7372: PUSH
7373: LD_INT 1
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 50
7387: PUSH
7388: EMPTY
7389: LIST
7390: PUSH
7391: LD_INT 22
7393: PUSH
7394: LD_VAR 0 3
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: PPUSH
7409: CALL_OW 69
7413: ST_TO_ADDR
// if building_list = 0 then
7414: LD_VAR 0 2
7418: PUSH
7419: LD_INT 0
7421: EQUAL
7422: IFFALSE 7467
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7424: LD_ADDR_VAR 0 2
7428: PUSH
7429: LD_INT 21
7431: PUSH
7432: LD_INT 3
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 50
7441: PUSH
7442: EMPTY
7443: LIST
7444: PUSH
7445: LD_INT 22
7447: PUSH
7448: LD_VAR 0 3
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: LIST
7461: PPUSH
7462: CALL_OW 69
7466: ST_TO_ADDR
// if building_list = 0 then
7467: LD_VAR 0 2
7471: PUSH
7472: LD_INT 0
7474: EQUAL
7475: IFFALSE 7479
// exit ;
7477: GO 7651
// hc_name :=  ;
7479: LD_ADDR_OWVAR 26
7483: PUSH
7484: LD_STRING 
7486: ST_TO_ADDR
// hc_importance := 0 ;
7487: LD_ADDR_OWVAR 32
7491: PUSH
7492: LD_INT 0
7494: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7495: LD_INT 0
7497: PPUSH
7498: LD_INT 0
7500: PPUSH
7501: LD_EXP 6
7505: PUSH
7506: LD_INT 2
7508: DIV
7509: PPUSH
7510: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7514: LD_ADDR_OWVAR 21
7518: PUSH
7519: LD_EXP 20
7523: PUSH
7524: LD_VAR 0 3
7528: ARRAY
7529: ST_TO_ADDR
// uc_side := aktresp ;
7530: LD_ADDR_OWVAR 20
7534: PUSH
7535: LD_VAR 0 3
7539: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
7540: LD_ADDR_VAR 0 4
7544: PUSH
7545: LD_VAR 0 2
7549: PUSH
7550: LD_INT 1
7552: PPUSH
7553: LD_VAR 0 2
7557: PUSH
7558: LD_INT 0
7560: PLUS
7561: PPUSH
7562: CALL_OW 12
7566: ARRAY
7567: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
7568: LD_VAR 0 4
7572: PPUSH
7573: CALL_OW 266
7577: PUSH
7578: LD_INT 0
7580: PUSH
7581: LD_INT 1
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: IN
7588: IFFALSE 7600
// n = 25 else
7590: LD_ADDR_VAR 0 1
7594: PUSH
7595: LD_INT 25
7597: ST_TO_ADDR
7598: GO 7608
// n = 10 ;
7600: LD_ADDR_VAR 0 1
7604: PUSH
7605: LD_INT 10
7607: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
7608: CALL_OW 44
7612: PPUSH
7613: LD_VAR 0 4
7617: PPUSH
7618: CALL_OW 250
7622: PPUSH
7623: LD_VAR 0 4
7627: PPUSH
7628: CALL_OW 251
7632: PPUSH
7633: LD_VAR 0 1
7637: PPUSH
7638: LD_INT 1
7640: PPUSH
7641: CALL_OW 50
// end else
7645: GO 7648
// enable ;
7647: ENABLE
// end else
7648: GO 7651
// enable ;
7650: ENABLE
// end ; end_of_file
7651: PPOPN 4
7653: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7654: LD_VAR 0 1
7658: PPUSH
7659: CALL_OW 266
7663: PUSH
7664: LD_INT 0
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: IN
7674: IFFALSE 7699
// SetBName ( b , @ & GetSide ( b ) ) ;
7676: LD_VAR 0 1
7680: PPUSH
7681: LD_STRING @
7683: PUSH
7684: LD_VAR 0 1
7688: PPUSH
7689: CALL_OW 255
7693: STR
7694: PPUSH
7695: CALL_OW 500
// if def_game_rules then
7699: LD_EXP 43
7703: IFFALSE 7740
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7705: LD_VAR 0 1
7709: PPUSH
7710: LD_VAR 0 1
7714: PPUSH
7715: CALL_OW 266
7719: PPUSH
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 255
7729: PPUSH
7730: LD_INT 0
7732: PPUSH
7733: LD_INT 1
7735: PPUSH
7736: CALL 13146 0 5
// end ;
7740: PPOPN 2
7742: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7743: LD_VAR 0 1
7747: PPUSH
7748: CALL_OW 266
7752: PUSH
7753: LD_INT 0
7755: PUSH
7756: LD_INT 1
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: IN
7763: IFFALSE 7788
// SetBName ( b , @ & GetSide ( b ) ) ;
7765: LD_VAR 0 1
7769: PPUSH
7770: LD_STRING @
7772: PUSH
7773: LD_VAR 0 1
7777: PPUSH
7778: CALL_OW 255
7782: STR
7783: PPUSH
7784: CALL_OW 500
// if def_game_rules then
7788: LD_EXP 43
7792: IFFALSE 7831
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7794: LD_VAR 0 1
7798: PPUSH
7799: LD_VAR 0 1
7803: PPUSH
7804: CALL_OW 266
7808: PPUSH
7809: LD_VAR 0 1
7813: PPUSH
7814: CALL_OW 255
7818: PPUSH
7819: LD_VAR 0 2
7823: PPUSH
7824: LD_INT 1
7826: PPUSH
7827: CALL 13146 0 5
// end ;
7831: PPOPN 3
7833: END
// on VehicleConstructed ( veh , fac ) do var side ;
7834: LD_INT 0
7836: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 263
7846: PUSH
7847: LD_INT 5
7849: EQUAL
7850: IFFALSE 7992
// begin side := GetSide ( veh ) ;
7852: LD_ADDR_VAR 0 3
7856: PUSH
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 255
7866: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7867: LD_ADDR_EXP 37
7871: PUSH
7872: LD_EXP 37
7876: PPUSH
7877: LD_VAR 0 3
7881: PPUSH
7882: LD_EXP 37
7886: PUSH
7887: LD_VAR 0 3
7891: ARRAY
7892: PPUSH
7893: LD_INT 52
7895: PUSH
7896: EMPTY
7897: LIST
7898: PPUSH
7899: CALL_OW 72
7903: PUSH
7904: LD_INT 22
7906: PUSH
7907: LD_VAR 0 3
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: LD_INT 33
7921: PUSH
7922: LD_INT 5
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 25
7931: PUSH
7932: LD_INT 12
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: LD_INT 25
7941: PUSH
7942: LD_INT 15
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 25
7951: PUSH
7952: LD_INT 16
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: LD_INT 25
7961: PUSH
7962: LD_INT 17
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: PPUSH
7981: CALL_OW 69
7985: UNION
7986: PPUSH
7987: CALL_OW 1
7991: ST_TO_ADDR
// end ; end ;
7992: PPOPN 3
7994: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7995: LD_INT 0
7997: PPUSH
7998: PPUSH
7999: PPUSH
8000: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
8001: LD_VAR 0 1
8005: PPUSH
8006: CALL_OW 257
8010: PUSH
8011: LD_INT 12
8013: PUSH
8014: LD_INT 15
8016: PUSH
8017: LD_INT 17
8019: PUSH
8020: LD_INT 16
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: IN
8029: PUSH
8030: LD_VAR 0 1
8034: PPUSH
8035: CALL_OW 263
8039: PUSH
8040: LD_INT 5
8042: EQUAL
8043: OR
8044: IFFALSE 8055
// ApeKilled ( j ) ;
8046: LD_VAR 0 1
8050: PPUSH
8051: CALL 6916 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
8055: LD_VAR 0 1
8059: PPUSH
8060: CALL_OW 266
8064: PUSH
8065: LD_INT 0
8067: PUSH
8068: LD_INT 1
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: IN
8075: IFFALSE 8157
// begin pos := Side_Positions [ GetSide ( j ) ] ;
8077: LD_ADDR_VAR 0 4
8081: PUSH
8082: LD_EXP 19
8086: PUSH
8087: LD_VAR 0 1
8091: PPUSH
8092: CALL_OW 255
8096: ARRAY
8097: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
8098: LD_ADDR_VAR 0 2
8102: PUSH
8103: LD_EXP 26
8107: PUSH
8108: LD_VAR 0 4
8112: ARRAY
8113: PUSH
8114: LD_INT 1
8116: ARRAY
8117: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
8118: LD_ADDR_VAR 0 3
8122: PUSH
8123: LD_EXP 26
8127: PUSH
8128: LD_VAR 0 4
8132: ARRAY
8133: PUSH
8134: LD_INT 2
8136: ARRAY
8137: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
8138: LD_VAR 0 2
8142: PPUSH
8143: LD_VAR 0 3
8147: PPUSH
8148: CALL_OW 420
8152: PPUSH
8153: CALL_OW 419
// end ; if def_game_rules then
8157: LD_EXP 43
8161: IFFALSE 8260
// if ( GetType ( j ) = 3 ) then
8163: LD_VAR 0 1
8167: PPUSH
8168: CALL_OW 247
8172: PUSH
8173: LD_INT 3
8175: EQUAL
8176: IFFALSE 8216
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8178: LD_VAR 0 1
8182: PPUSH
8183: LD_VAR 0 1
8187: PPUSH
8188: CALL_OW 266
8192: PPUSH
8193: LD_VAR 0 1
8197: PPUSH
8198: CALL_OW 255
8202: PPUSH
8203: LD_INT 0
8205: PPUSH
8206: LD_INT 1
8208: NEG
8209: PPUSH
8210: CALL 13146 0 5
8214: GO 8260
// if ( GetChassis ( j ) = 25 ) then
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 265
8225: PUSH
8226: LD_INT 25
8228: EQUAL
8229: IFFALSE 8260
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8231: LD_VAR 0 1
8235: PPUSH
8236: LD_INT 37
8238: PPUSH
8239: LD_VAR 0 1
8243: PPUSH
8244: CALL_OW 255
8248: PPUSH
8249: LD_INT 0
8251: PPUSH
8252: LD_INT 1
8254: NEG
8255: PPUSH
8256: CALL 13146 0 5
// end ;
8260: PPOPN 5
8262: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8263: LD_EXP 43
8267: PUSH
8268: LD_VAR 0 1
8272: PPUSH
8273: CALL_OW 265
8277: PUSH
8278: LD_INT 25
8280: EQUAL
8281: AND
8282: IFFALSE 8314
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8284: LD_VAR 0 1
8288: PPUSH
8289: LD_INT 37
8291: PPUSH
8292: LD_VAR 0 1
8296: PPUSH
8297: CALL_OW 255
8301: PPUSH
8302: LD_VAR 0 3
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: CALL 13146 0 5
// end ;
8314: PPOPN 4
8316: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8317: LD_VAR 0 1
8321: PPUSH
8322: LD_VAR 0 2
8326: PPUSH
8327: LD_VAR 0 3
8331: PPUSH
8332: LD_OWVAR 2
8336: PPUSH
8337: CALL 13917 0 4
8341: PPOPN 3
8343: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8344: GO 8346
8346: DISABLE
8347: LD_INT 0
8349: PPUSH
8350: PPUSH
8351: PPUSH
8352: PPUSH
8353: PPUSH
// begin sib_mined := [ ] ;
8354: LD_ADDR_VAR 0 5
8358: PUSH
8359: EMPTY
8360: ST_TO_ADDR
// for i := 1 to 8 do
8361: LD_ADDR_VAR 0 1
8365: PUSH
8366: DOUBLE
8367: LD_INT 1
8369: DEC
8370: ST_TO_ADDR
8371: LD_INT 8
8373: PUSH
8374: FOR_TO
8375: IFFALSE 8531
// if Side_Positions [ i ] then
8377: LD_EXP 19
8381: PUSH
8382: LD_VAR 0 1
8386: ARRAY
8387: IFFALSE 8515
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8389: LD_ADDR_VAR 0 4
8393: PUSH
8394: LD_INT 22
8396: PUSH
8397: LD_VAR 0 1
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: LD_INT 2
8408: PUSH
8409: LD_INT 30
8411: PUSH
8412: LD_INT 0
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_INT 30
8421: PUSH
8422: LD_INT 1
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: LIST
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PPUSH
8438: CALL_OW 69
8442: ST_TO_ADDR
// pom := 0 ;
8443: LD_ADDR_VAR 0 3
8447: PUSH
8448: LD_INT 0
8450: ST_TO_ADDR
// for base in filter do
8451: LD_ADDR_VAR 0 2
8455: PUSH
8456: LD_VAR 0 4
8460: PUSH
8461: FOR_IN
8462: IFFALSE 8495
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8464: LD_ADDR_VAR 0 3
8468: PUSH
8469: LD_VAR 0 3
8473: PUSH
8474: LD_VAR 0 2
8478: PPUSH
8479: CALL_OW 274
8483: PPUSH
8484: LD_INT 3
8486: PPUSH
8487: CALL_OW 275
8491: PLUS
8492: ST_TO_ADDR
8493: GO 8461
8495: POP
8496: POP
// sib_mined := sib_mined ^ pom ;
8497: LD_ADDR_VAR 0 5
8501: PUSH
8502: LD_VAR 0 5
8506: PUSH
8507: LD_VAR 0 3
8511: ADD
8512: ST_TO_ADDR
// end else
8513: GO 8529
// sib_mined := sib_mined ^ 0 ;
8515: LD_ADDR_VAR 0 5
8519: PUSH
8520: LD_VAR 0 5
8524: PUSH
8525: LD_INT 0
8527: ADD
8528: ST_TO_ADDR
8529: GO 8374
8531: POP
8532: POP
// if not def_public_score then
8533: LD_EXP 2
8537: NOT
8538: IFFALSE 8628
// begin ExtraStrings := [ ] ;
8540: LD_ADDR_EXP 59
8544: PUSH
8545: EMPTY
8546: ST_TO_ADDR
// for i := 1 to 8 do
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: DOUBLE
8553: LD_INT 1
8555: DEC
8556: ST_TO_ADDR
8557: LD_INT 8
8559: PUSH
8560: FOR_TO
8561: IFFALSE 8624
// if Side_Positions [ i ] then
8563: LD_EXP 19
8567: PUSH
8568: LD_VAR 0 1
8572: ARRAY
8573: IFFALSE 8622
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8575: LD_ADDR_EXP 59
8579: PUSH
8580: LD_EXP 59
8584: PUSH
8585: LD_STRING #AlienBase-MinedPublic
8587: PUSH
8588: LD_VAR 0 1
8592: PUSH
8593: LD_VAR 0 1
8597: PUSH
8598: LD_VAR 0 5
8602: PUSH
8603: LD_VAR 0 1
8607: ARRAY
8608: PUSH
8609: LD_EXP 11
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: ADD
8621: ST_TO_ADDR
8622: GO 8560
8624: POP
8625: POP
// end else
8626: GO 8657
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8628: LD_ADDR_EXP 59
8632: PUSH
8633: LD_STRING #AlienBase-Mined
8635: PUSH
8636: LD_VAR 0 5
8640: PUSH
8641: LD_OWVAR 2
8645: ARRAY
8646: PUSH
8647: LD_EXP 11
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: ST_TO_ADDR
// for i := 1 to 8 do
8657: LD_ADDR_VAR 0 1
8661: PUSH
8662: DOUBLE
8663: LD_INT 1
8665: DEC
8666: ST_TO_ADDR
8667: LD_INT 8
8669: PUSH
8670: FOR_TO
8671: IFFALSE 8741
// if sib_mined [ i ] >= amount_of_siberit then
8673: LD_VAR 0 5
8677: PUSH
8678: LD_VAR 0 1
8682: ARRAY
8683: PUSH
8684: LD_EXP 11
8688: GREATEREQUAL
8689: IFFALSE 8739
// begin wait ( 0 0$1 ) ;
8691: LD_INT 35
8693: PPUSH
8694: CALL_OW 67
// if IAmServer then
8698: CALL_OW 518
8702: IFFALSE 8711
// wait ( 0 0$1 ) ;
8704: LD_INT 35
8706: PPUSH
8707: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8711: LD_VAR 0 5
8715: PUSH
8716: LD_OWVAR 2
8720: ARRAY
8721: PUSH
8722: LD_EXP 11
8726: GREATEREQUAL
8727: IFFALSE 8735
// YouWinInMultiplayer else
8729: CALL_OW 106
8733: GO 8739
// YouLostInMultiplayer ;
8735: CALL_OW 107
// end ;
8739: GO 8670
8741: POP
8742: POP
// enable ;
8743: ENABLE
// end ; end_of_file
8744: PPOPN 5
8746: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8747: LD_INT 0
8749: PPUSH
8750: PPUSH
// for un in battle_flags_id do
8751: LD_ADDR_VAR 0 2
8755: PUSH
8756: LD_EXP 31
8760: PUSH
8761: FOR_IN
8762: IFFALSE 8837
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8764: LD_VAR 0 2
8768: PPUSH
8769: LD_INT 1
8771: PUSH
8772: LD_LOC 11
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 2
8783: PUSH
8784: LD_LOC 11
8788: PUSH
8789: LD_INT 2
8791: DIV
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PUSH
8797: LD_INT 3
8799: PUSH
8800: LD_LOC 11
8804: PUSH
8805: LD_INT 5
8807: DIV
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 20
8815: PUSH
8816: LD_LOC 11
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 423
8835: GO 8761
8837: POP
8838: POP
// end ;
8839: LD_VAR 0 1
8843: RET
// every 1 do var un ;
8844: GO 8846
8846: DISABLE
8847: LD_INT 0
8849: PPUSH
// begin if not def_morale_flags then
8850: LD_EXP 52
8854: NOT
8855: IFFALSE 8859
// exit ;
8857: GO 8936
// if not morale_decreasing_time then
8859: LD_EXP 10
8863: NOT
8864: IFFALSE 8868
// exit ;
8866: GO 8936
// strength = 100 ;
8868: LD_ADDR_LOC 11
8872: PUSH
8873: LD_INT 100
8875: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8876: LD_EXP 10
8880: PPUSH
8881: CALL_OW 67
// strength := strength - 1 ;
8885: LD_ADDR_LOC 11
8889: PUSH
8890: LD_LOC 11
8894: PUSH
8895: LD_INT 1
8897: MINUS
8898: ST_TO_ADDR
// Update_Flags ;
8899: CALL 8747 0 0
// until not strength ;
8903: LD_LOC 11
8907: NOT
8908: IFFALSE 8876
// for un in battle_flags_id do
8910: LD_ADDR_VAR 0 1
8914: PUSH
8915: LD_EXP 31
8919: PUSH
8920: FOR_IN
8921: IFFALSE 8934
// KillBattleFlag ( un ) ;
8923: LD_VAR 0 1
8927: PPUSH
8928: CALL_OW 419
8932: GO 8920
8934: POP
8935: POP
// end ; end_of_file
8936: PPOPN 1
8938: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8939: LD_INT 0
8941: PPUSH
8942: PPUSH
8943: PPUSH
// enable ( 600 ) ;
8944: LD_INT 600
8946: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8947: LD_ADDR_VAR 0 2
8951: PUSH
8952: DOUBLE
8953: LD_INT 1
8955: DEC
8956: ST_TO_ADDR
8957: LD_EXP 41
8961: PUSH
8962: FOR_TO
8963: IFFALSE 9118
// if Position_Sides [ i ] then
8965: LD_EXP 23
8969: PUSH
8970: LD_VAR 0 2
8974: ARRAY
8975: IFFALSE 9116
// for j := 1 to 8 do
8977: LD_ADDR_VAR 0 3
8981: PUSH
8982: DOUBLE
8983: LD_INT 1
8985: DEC
8986: ST_TO_ADDR
8987: LD_INT 8
8989: PUSH
8990: FOR_TO
8991: IFFALSE 9114
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8993: LD_EXP 19
8997: PUSH
8998: LD_VAR 0 3
9002: ARRAY
9003: PUSH
9004: LD_EXP 17
9008: PUSH
9009: LD_EXP 23
9013: PUSH
9014: LD_VAR 0 2
9018: ARRAY
9019: ARRAY
9020: PUSH
9021: LD_EXP 17
9025: PUSH
9026: LD_VAR 0 3
9030: ARRAY
9031: NONEQUAL
9032: PUSH
9033: LD_EXP 21
9037: NOT
9038: PUSH
9039: LD_EXP 23
9043: PUSH
9044: LD_VAR 0 2
9048: ARRAY
9049: PUSH
9050: LD_VAR 0 3
9054: NONEQUAL
9055: AND
9056: OR
9057: AND
9058: IFFALSE 9082
// HideArea ( j , BuildUpAreas [ i ] ) else
9060: LD_VAR 0 3
9064: PPUSH
9065: LD_EXP 41
9069: PUSH
9070: LD_VAR 0 2
9074: ARRAY
9075: PPUSH
9076: CALL_OW 333
9080: GO 9112
// if ( j = your_side ) then
9082: LD_VAR 0 3
9086: PUSH
9087: LD_OWVAR 2
9091: EQUAL
9092: IFFALSE 9112
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
9094: LD_EXP 41
9098: PUSH
9099: LD_VAR 0 2
9103: ARRAY
9104: PPUSH
9105: LD_INT 5
9107: PPUSH
9108: CALL_OW 424
9112: GO 8990
9114: POP
9115: POP
9116: GO 8962
9118: POP
9119: POP
// end ;
9120: LD_VAR 0 1
9124: RET
// export function EndBuildUp ; var i , j ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
// disable ( 600 ) ;
9130: LD_INT 600
9132: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
9133: LD_ADDR_VAR 0 2
9137: PUSH
9138: DOUBLE
9139: LD_INT 1
9141: DEC
9142: ST_TO_ADDR
9143: LD_EXP 41
9147: PUSH
9148: FOR_TO
9149: IFFALSE 9304
// if Position_Sides [ i ] then
9151: LD_EXP 23
9155: PUSH
9156: LD_VAR 0 2
9160: ARRAY
9161: IFFALSE 9302
// for j := 1 to 8 do
9163: LD_ADDR_VAR 0 3
9167: PUSH
9168: DOUBLE
9169: LD_INT 1
9171: DEC
9172: ST_TO_ADDR
9173: LD_INT 8
9175: PUSH
9176: FOR_TO
9177: IFFALSE 9300
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9179: LD_EXP 19
9183: PUSH
9184: LD_VAR 0 3
9188: ARRAY
9189: PUSH
9190: LD_EXP 17
9194: PUSH
9195: LD_EXP 23
9199: PUSH
9200: LD_VAR 0 2
9204: ARRAY
9205: ARRAY
9206: PUSH
9207: LD_EXP 17
9211: PUSH
9212: LD_VAR 0 3
9216: ARRAY
9217: NONEQUAL
9218: PUSH
9219: LD_EXP 21
9223: NOT
9224: PUSH
9225: LD_EXP 23
9229: PUSH
9230: LD_VAR 0 2
9234: ARRAY
9235: PUSH
9236: LD_VAR 0 3
9240: NONEQUAL
9241: AND
9242: OR
9243: AND
9244: IFFALSE 9268
// ShowArea ( j , BuildUpAreas [ i ] ) else
9246: LD_VAR 0 3
9250: PPUSH
9251: LD_EXP 41
9255: PUSH
9256: LD_VAR 0 2
9260: ARRAY
9261: PPUSH
9262: CALL_OW 334
9266: GO 9298
// if ( j = your_side ) then
9268: LD_VAR 0 3
9272: PUSH
9273: LD_OWVAR 2
9277: EQUAL
9278: IFFALSE 9298
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9280: LD_EXP 41
9284: PUSH
9285: LD_VAR 0 2
9289: ARRAY
9290: PPUSH
9291: LD_INT 0
9293: PPUSH
9294: CALL_OW 424
9298: GO 9176
9300: POP
9301: POP
9302: GO 9148
9304: POP
9305: POP
// end ;
9306: LD_VAR 0 1
9310: RET
// every 5 marked 600 do var i , un ;
9311: GO 9313
9313: DISABLE
9314: LD_INT 0
9316: PPUSH
9317: PPUSH
// begin for i := 1 to BuildUpAreas do
9318: LD_ADDR_VAR 0 1
9322: PUSH
9323: DOUBLE
9324: LD_INT 1
9326: DEC
9327: ST_TO_ADDR
9328: LD_EXP 41
9332: PUSH
9333: FOR_TO
9334: IFFALSE 9489
// if Position_Sides [ i ] then
9336: LD_EXP 23
9340: PUSH
9341: LD_VAR 0 1
9345: ARRAY
9346: IFFALSE 9487
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9348: LD_ADDR_VAR 0 2
9352: PUSH
9353: LD_EXP 41
9357: PUSH
9358: LD_VAR 0 1
9362: ARRAY
9363: PPUSH
9364: LD_INT 2
9366: PUSH
9367: LD_INT 21
9369: PUSH
9370: LD_INT 1
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 21
9379: PUSH
9380: LD_INT 2
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: LIST
9391: PUSH
9392: LD_INT 22
9394: PUSH
9395: LD_OWVAR 2
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PPUSH
9408: CALL_OW 70
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9485
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9416: LD_EXP 17
9420: PUSH
9421: LD_EXP 23
9425: PUSH
9426: LD_VAR 0 1
9430: ARRAY
9431: ARRAY
9432: PUSH
9433: LD_EXP 17
9437: PUSH
9438: LD_OWVAR 2
9442: ARRAY
9443: NONEQUAL
9444: PUSH
9445: LD_EXP 21
9449: NOT
9450: PUSH
9451: LD_EXP 23
9455: PUSH
9456: LD_VAR 0 1
9460: ARRAY
9461: PUSH
9462: LD_OWVAR 2
9466: NONEQUAL
9467: AND
9468: OR
9469: IFFALSE 9483
// ComMoveToArea ( un , BuildUpEscape ) ;
9471: LD_VAR 0 2
9475: PPUSH
9476: LD_INT 14
9478: PPUSH
9479: CALL_OW 113
9483: GO 9413
9485: POP
9486: POP
9487: GO 9333
9489: POP
9490: POP
// enable ;
9491: ENABLE
// end ;
9492: PPOPN 2
9494: END
// every 1 do
9495: GO 9497
9497: DISABLE
// if ( def_builduptime > 0 ) then
9498: LD_EXP 57
9502: PUSH
9503: LD_INT 0
9505: GREATER
9506: IFFALSE 9521
// begin wait ( buildUpTime_Delay ) ;
9508: LD_EXP 14
9512: PPUSH
9513: CALL_OW 67
// EndBuildUp ;
9517: CALL 9125 0 0
// end ; end_of_file
9521: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
9522: GO 9524
9524: DISABLE
9525: LD_INT 0
9527: PPUSH
// begin enable ;
9528: ENABLE
// for x := 1 to 8 do
9529: LD_ADDR_VAR 0 1
9533: PUSH
9534: DOUBLE
9535: LD_INT 1
9537: DEC
9538: ST_TO_ADDR
9539: LD_INT 8
9541: PUSH
9542: FOR_TO
9543: IFFALSE 9627
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
9545: LD_LOC 18
9549: PUSH
9550: LD_VAR 0 1
9554: ARRAY
9555: PUSH
9556: LD_INT 5
9558: GREATER
9559: PUSH
9560: LD_LOC 16
9564: PUSH
9565: LD_VAR 0 1
9569: ARRAY
9570: PUSH
9571: LD_INT 1
9573: NEG
9574: EQUAL
9575: AND
9576: IFFALSE 9625
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
9578: LD_ADDR_LOC 17
9582: PUSH
9583: LD_LOC 17
9587: PPUSH
9588: LD_VAR 0 1
9592: PPUSH
9593: LD_LOC 17
9597: PUSH
9598: LD_VAR 0 1
9602: ARRAY
9603: PUSH
9604: LD_INT 6
9606: PLUS
9607: PPUSH
9608: CALL_OW 1
9612: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
9613: LD_VAR 0 1
9617: PPUSH
9618: LD_INT 0
9620: PPUSH
9621: CALL 9799 0 2
// end ;
9625: GO 9542
9627: POP
9628: POP
// end ;
9629: PPOPN 1
9631: END
// every 0 0$1 marked 200 do var BGL , x ;
9632: GO 9634
9634: DISABLE
9635: LD_INT 0
9637: PPUSH
9638: PPUSH
// begin enable ;
9639: ENABLE
// for x := 1 to 8 do
9640: LD_ADDR_VAR 0 2
9644: PUSH
9645: DOUBLE
9646: LD_INT 1
9648: DEC
9649: ST_TO_ADDR
9650: LD_INT 8
9652: PUSH
9653: FOR_TO
9654: IFFALSE 9785
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
9656: LD_LOC 16
9660: PUSH
9661: LD_VAR 0 2
9665: ARRAY
9666: PUSH
9667: LD_INT 1
9669: NEG
9670: GREATER
9671: PUSH
9672: LD_LOC 16
9676: PUSH
9677: LD_VAR 0 2
9681: ARRAY
9682: PPUSH
9683: CALL_OW 300
9687: AND
9688: IFFALSE 9783
// begin BGL := GetLives ( BloodGods [ x ] ) ;
9690: LD_ADDR_VAR 0 1
9694: PUSH
9695: LD_LOC 16
9699: PUSH
9700: LD_VAR 0 2
9704: ARRAY
9705: PPUSH
9706: CALL_OW 256
9710: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
9711: LD_VAR 0 1
9715: PUSH
9716: LD_INT 1000
9718: LESS
9719: PUSH
9720: LD_VAR 0 1
9724: PUSH
9725: LD_INT 100
9727: GREATER
9728: AND
9729: IFFALSE 9783
// begin BGL := BGL + 10 ;
9731: LD_ADDR_VAR 0 1
9735: PUSH
9736: LD_VAR 0 1
9740: PUSH
9741: LD_INT 10
9743: PLUS
9744: ST_TO_ADDR
// if BGL > 1000 then
9745: LD_VAR 0 1
9749: PUSH
9750: LD_INT 1000
9752: GREATER
9753: IFFALSE 9763
// BGL := 1000 ;
9755: LD_ADDR_VAR 0 1
9759: PUSH
9760: LD_INT 1000
9762: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
9763: LD_LOC 16
9767: PUSH
9768: LD_VAR 0 2
9772: ARRAY
9773: PPUSH
9774: LD_VAR 0 1
9778: PPUSH
9779: CALL_OW 234
// end ; end ;
9783: GO 9653
9785: POP
9786: POP
// end ;
9787: PPOPN 2
9789: END
// every 0 0$1 marked 200 do
9790: GO 9792
9792: DISABLE
// begin DisplayTimeWithKills ;
9793: CALL 10040 0 0
// enable ;
9797: ENABLE
// end ;
9798: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
9799: LD_INT 0
9801: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
9802: LD_ADDR_OWVAR 24
9806: PUSH
9807: LD_INT 0
9809: PPUSH
9810: LD_INT 5
9812: PPUSH
9813: CALL_OW 12
9817: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
9818: LD_INT 1
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: LD_INT 15
9826: PPUSH
9827: CALL_OW 380
// hc_importance := 106 ;
9831: LD_ADDR_OWVAR 32
9835: PUSH
9836: LD_INT 106
9838: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
9839: LD_ADDR_OWVAR 26
9843: PUSH
9844: LD_STRING Blood God of 
9846: PUSH
9847: LD_OWVAR 19
9851: PUSH
9852: LD_VAR 0 1
9856: ARRAY
9857: STR
9858: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
9859: LD_ADDR_OWVAR 21
9863: PUSH
9864: LD_EXP 20
9868: PUSH
9869: LD_VAR 0 1
9873: ARRAY
9874: ST_TO_ADDR
// uc_side := side ;
9875: LD_ADDR_OWVAR 20
9879: PUSH
9880: LD_VAR 0 1
9884: ST_TO_ADDR
// hc_noskilllimit := true ;
9885: LD_ADDR_OWVAR 76
9889: PUSH
9890: LD_INT 1
9892: ST_TO_ADDR
// hc_agressivity := 50 ;
9893: LD_ADDR_OWVAR 35
9897: PUSH
9898: LD_INT 50
9900: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
9901: LD_ADDR_LOC 16
9905: PUSH
9906: LD_LOC 16
9910: PPUSH
9911: LD_VAR 0 1
9915: PPUSH
9916: CALL_OW 44
9920: PPUSH
9921: CALL_OW 1
9925: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
9926: LD_LOC 16
9930: PUSH
9931: LD_VAR 0 1
9935: ARRAY
9936: PPUSH
9937: LD_LOC 19
9941: PUSH
9942: LD_EXP 19
9946: PUSH
9947: LD_VAR 0 1
9951: ARRAY
9952: ARRAY
9953: PUSH
9954: LD_INT 1
9956: ARRAY
9957: PPUSH
9958: LD_LOC 19
9962: PUSH
9963: LD_EXP 19
9967: PUSH
9968: LD_VAR 0 1
9972: ARRAY
9973: ARRAY
9974: PUSH
9975: LD_INT 2
9977: ARRAY
9978: PPUSH
9979: LD_INT 10
9981: PPUSH
9982: LD_INT 0
9984: PPUSH
9985: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
9989: LD_LOC 16
9993: PUSH
9994: LD_VAR 0 1
9998: ARRAY
9999: PPUSH
10000: LD_INT 1
10002: PPUSH
10003: LD_INT 300
10005: PPUSH
10006: CALL_OW 239
// if not NoDialog then
10010: LD_VAR 0 2
10014: NOT
10015: IFFALSE 10035
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
10017: LD_LOC 16
10021: PUSH
10022: LD_VAR 0 1
10026: ARRAY
10027: PPUSH
10028: LD_STRING DLAwaken
10030: PPUSH
10031: CALL_OW 94
// end ;
10035: LD_VAR 0 3
10039: RET
// function DisplayTimeWithKills ; var x ; begin
10040: LD_INT 0
10042: PPUSH
10043: PPUSH
// ExtraStrings :=  ;
10044: LD_ADDR_EXP 59
10048: PUSH
10049: LD_STRING 
10051: ST_TO_ADDR
// for x = 1 to Side_Positions do
10052: LD_ADDR_VAR 0 2
10056: PUSH
10057: DOUBLE
10058: LD_INT 1
10060: DEC
10061: ST_TO_ADDR
10062: LD_EXP 19
10066: PUSH
10067: FOR_TO
10068: IFFALSE 10301
// if Side_Positions [ x ] then
10070: LD_EXP 19
10074: PUSH
10075: LD_VAR 0 2
10079: ARRAY
10080: IFFALSE 10299
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
10082: LD_ADDR_LOC 18
10086: PUSH
10087: LD_LOC 18
10091: PPUSH
10092: LD_VAR 0 2
10096: PPUSH
10097: LD_VAR 0 2
10101: PPUSH
10102: CALL_OW 515
10106: PUSH
10107: LD_LOC 17
10111: PUSH
10112: LD_VAR 0 2
10116: ARRAY
10117: MINUS
10118: PPUSH
10119: CALL_OW 1
10123: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
10124: LD_LOC 16
10128: PUSH
10129: LD_VAR 0 2
10133: ARRAY
10134: PUSH
10135: LD_INT 1
10137: NEG
10138: GREATER
10139: PUSH
10140: LD_LOC 16
10144: PUSH
10145: LD_VAR 0 2
10149: ARRAY
10150: PPUSH
10151: CALL_OW 300
10155: AND
10156: IFFALSE 10189
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
10158: LD_ADDR_EXP 59
10162: PUSH
10163: LD_EXP 59
10167: PUSH
10168: LD_STRING #godawoken
10170: PUSH
10171: LD_VAR 0 2
10175: PUSH
10176: LD_VAR 0 2
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: LIST
10185: ADD
10186: ST_TO_ADDR
10187: GO 10299
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
10189: LD_LOC 16
10193: PUSH
10194: LD_VAR 0 2
10198: ARRAY
10199: PUSH
10200: LD_INT 1
10202: NEG
10203: GREATER
10204: PUSH
10205: LD_LOC 16
10209: PUSH
10210: LD_VAR 0 2
10214: ARRAY
10215: PPUSH
10216: CALL_OW 301
10220: AND
10221: IFFALSE 10254
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
10223: LD_ADDR_EXP 59
10227: PUSH
10228: LD_EXP 59
10232: PUSH
10233: LD_STRING #goddied
10235: PUSH
10236: LD_VAR 0 2
10240: PUSH
10241: LD_VAR 0 2
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: LIST
10250: ADD
10251: ST_TO_ADDR
10252: GO 10299
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
10254: LD_ADDR_EXP 59
10258: PUSH
10259: LD_EXP 59
10263: PUSH
10264: LD_STRING #godssacrifise
10266: PUSH
10267: LD_VAR 0 2
10271: PUSH
10272: LD_VAR 0 2
10276: PUSH
10277: LD_LOC 18
10281: PUSH
10282: LD_VAR 0 2
10286: ARRAY
10287: PUSH
10288: LD_INT 6
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: ADD
10298: ST_TO_ADDR
10299: GO 10067
10301: POP
10302: POP
// end ;
10303: LD_VAR 0 1
10307: RET
// export function InitBloodGods ; begin
10308: LD_INT 0
10310: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
10311: LD_ADDR_LOC 16
10315: PUSH
10316: LD_INT 1
10318: NEG
10319: PUSH
10320: LD_INT 1
10322: NEG
10323: PUSH
10324: LD_INT 1
10326: NEG
10327: PUSH
10328: LD_INT 1
10330: NEG
10331: PUSH
10332: LD_INT 1
10334: NEG
10335: PUSH
10336: LD_INT 1
10338: NEG
10339: PUSH
10340: LD_INT 1
10342: NEG
10343: PUSH
10344: LD_INT 1
10346: NEG
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10358: LD_ADDR_LOC 17
10362: PUSH
10363: LD_INT 0
10365: PUSH
10366: LD_INT 0
10368: PUSH
10369: LD_INT 0
10371: PUSH
10372: LD_INT 0
10374: PUSH
10375: LD_INT 0
10377: PUSH
10378: LD_INT 0
10380: PUSH
10381: LD_INT 0
10383: PUSH
10384: LD_INT 0
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10397: LD_ADDR_LOC 18
10401: PUSH
10402: LD_INT 0
10404: PUSH
10405: LD_INT 0
10407: PUSH
10408: LD_INT 0
10410: PUSH
10411: LD_INT 0
10413: PUSH
10414: LD_INT 0
10416: PUSH
10417: LD_INT 0
10419: PUSH
10420: LD_INT 0
10422: PUSH
10423: LD_INT 0
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
10436: LD_ADDR_LOC 19
10440: PUSH
10441: LD_INT 60
10443: PUSH
10444: LD_INT 47
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 82
10453: PUSH
10454: LD_INT 26
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: LD_INT 124
10463: PUSH
10464: LD_INT 45
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 147
10473: PUSH
10474: LD_INT 90
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PUSH
10481: LD_INT 126
10483: PUSH
10484: LD_INT 112
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 84
10493: PUSH
10494: LD_INT 92
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 106
10503: PUSH
10504: LD_INT 73
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 106
10513: PUSH
10514: LD_INT 73
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: ST_TO_ADDR
// ClearHumansKilled ;
10531: CALL_OW 516
// enable ( 200 ) ;
10535: LD_INT 200
10537: ENABLE_MARKED
// end ; end_of_file
10538: LD_VAR 0 1
10542: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
10543: LD_INT 0
10545: PPUSH
10546: PPUSH
// if ( not IAmSpec ) then
10547: CALL_OW 531
10551: NOT
10552: IFFALSE 10568
// Result := Limits_Info ^  ;
10554: LD_ADDR_VAR 0 1
10558: PUSH
10559: LD_LOC 27
10563: PUSH
10564: LD_STRING 
10566: ADD
10567: ST_TO_ADDR
// for i := 1 to 8 do
10568: LD_ADDR_VAR 0 2
10572: PUSH
10573: DOUBLE
10574: LD_INT 1
10576: DEC
10577: ST_TO_ADDR
10578: LD_INT 8
10580: PUSH
10581: FOR_TO
10582: IFFALSE 10627
// if Cheaters [ i ] then
10584: LD_LOC 28
10588: PUSH
10589: LD_VAR 0 2
10593: ARRAY
10594: IFFALSE 10625
// Result := Result ^ [ #Cheater , i , i ] ;
10596: LD_ADDR_VAR 0 1
10600: PUSH
10601: LD_VAR 0 1
10605: PUSH
10606: LD_STRING #Cheater
10608: PUSH
10609: LD_VAR 0 2
10613: PUSH
10614: LD_VAR 0 2
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: LIST
10623: ADD
10624: ST_TO_ADDR
10625: GO 10581
10627: POP
10628: POP
// end ;
10629: LD_VAR 0 1
10633: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
10634: LD_INT 0
10636: PPUSH
10637: PPUSH
10638: PPUSH
10639: PPUSH
10640: PPUSH
// if game_type in [ 10 , 11 ] then
10641: LD_EXP 42
10645: PUSH
10646: LD_INT 10
10648: PUSH
10649: LD_INT 11
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: IN
10656: IFFALSE 10672
// def_game_rules = def_game_rules + 1 ;
10658: LD_ADDR_EXP 43
10662: PUSH
10663: LD_EXP 43
10667: PUSH
10668: LD_INT 1
10670: PLUS
10671: ST_TO_ADDR
// case def_game_rules of 0 :
10672: LD_EXP 43
10676: PUSH
10677: LD_INT 0
10679: DOUBLE
10680: EQUAL
10681: IFTRUE 10685
10683: GO 10690
10685: POP
// exit ; 1 :
10686: GO 12740
10688: GO 12640
10690: LD_INT 1
10692: DOUBLE
10693: EQUAL
10694: IFTRUE 10698
10696: GO 10914
10698: POP
// begin def_base_level := 2 ;
10699: LD_ADDR_EXP 44
10703: PUSH
10704: LD_INT 2
10706: ST_TO_ADDR
// def_amount_of_people := 11 ;
10707: LD_ADDR_EXP 45
10711: PUSH
10712: LD_INT 11
10714: ST_TO_ADDR
// def_skill_level := 1 ;
10715: LD_ADDR_EXP 46
10719: PUSH
10720: LD_INT 1
10722: ST_TO_ADDR
// def_starting_resources := 2 ;
10723: LD_ADDR_EXP 47
10727: PUSH
10728: LD_INT 2
10730: ST_TO_ADDR
// def_shipments_density := 26 ;
10731: LD_ADDR_EXP 48
10735: PUSH
10736: LD_INT 26
10738: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10739: LD_ADDR_EXP 49
10743: PUSH
10744: LD_INT 0
10746: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10747: LD_ADDR_EXP 50
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// def_shared_vision := 1 ;
10755: LD_ADDR_EXP 51
10759: PUSH
10760: LD_INT 1
10762: ST_TO_ADDR
// def_morale_flags := 3 ;
10763: LD_ADDR_EXP 52
10767: PUSH
10768: LD_INT 3
10770: ST_TO_ADDR
// def_siberite_detection := 1 ;
10771: LD_ADDR_EXP 53
10775: PUSH
10776: LD_INT 1
10778: ST_TO_ADDR
// def_people_respawning := 1 ;
10779: LD_ADDR_EXP 54
10783: PUSH
10784: LD_INT 1
10786: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10787: LD_ADDR_EXP 55
10791: PUSH
10792: LD_INT 1
10794: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10795: LD_ADDR_EXP 56
10799: PUSH
10800: LD_INT 0
10802: ST_TO_ADDR
// def_builduptime := 6 ;
10803: LD_ADDR_EXP 57
10807: PUSH
10808: LD_INT 6
10810: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
10811: LD_ADDR_VAR 0 2
10815: PUSH
10816: EMPTY
10817: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10818: LD_ADDR_VAR 0 3
10822: PUSH
10823: EMPTY
10824: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10825: LD_ADDR_LOC 22
10829: PUSH
10830: EMPTY
10831: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10832: LD_ADDR_LOC 23
10836: PUSH
10837: EMPTY
10838: ST_TO_ADDR
// Banned_Controls := [ ] ;
10839: LD_ADDR_LOC 24
10843: PUSH
10844: EMPTY
10845: ST_TO_ADDR
// Banned_Engines := [ ] ;
10846: LD_ADDR_LOC 25
10850: PUSH
10851: EMPTY
10852: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10853: LD_ADDR_LOC 20
10857: PUSH
10858: LD_INT 37
10860: PUSH
10861: EMPTY
10862: LIST
10863: PUSH
10864: LD_INT 4
10866: PUSH
10867: LD_INT 5
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PUSH
10874: LD_INT 31
10876: PUSH
10877: LD_INT 32
10879: PUSH
10880: LD_INT 33
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: LIST
10892: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
10893: LD_ADDR_LOC 21
10897: PUSH
10898: LD_INT 2
10900: PUSH
10901: LD_INT 2
10903: PUSH
10904: LD_INT 4
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: ST_TO_ADDR
// end ; 2 :
10912: GO 12640
10914: LD_INT 2
10916: DOUBLE
10917: EQUAL
10918: IFTRUE 10922
10920: GO 11131
10922: POP
// begin def_base_level := 1 ;
10923: LD_ADDR_EXP 44
10927: PUSH
10928: LD_INT 1
10930: ST_TO_ADDR
// def_amount_of_people := 11 ;
10931: LD_ADDR_EXP 45
10935: PUSH
10936: LD_INT 11
10938: ST_TO_ADDR
// def_skill_level := 3 ;
10939: LD_ADDR_EXP 46
10943: PUSH
10944: LD_INT 3
10946: ST_TO_ADDR
// def_starting_resources := 3 ;
10947: LD_ADDR_EXP 47
10951: PUSH
10952: LD_INT 3
10954: ST_TO_ADDR
// def_shipments_density := 51 ;
10955: LD_ADDR_EXP 48
10959: PUSH
10960: LD_INT 51
10962: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10963: LD_ADDR_EXP 49
10967: PUSH
10968: LD_INT 1
10970: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10971: LD_ADDR_EXP 50
10975: PUSH
10976: LD_INT 2
10978: ST_TO_ADDR
// def_shared_vision := 1 ;
10979: LD_ADDR_EXP 51
10983: PUSH
10984: LD_INT 1
10986: ST_TO_ADDR
// def_morale_flags := 0 ;
10987: LD_ADDR_EXP 52
10991: PUSH
10992: LD_INT 0
10994: ST_TO_ADDR
// def_siberite_detection := 1 ;
10995: LD_ADDR_EXP 53
10999: PUSH
11000: LD_INT 1
11002: ST_TO_ADDR
// def_people_respawning := 0 ;
11003: LD_ADDR_EXP 54
11007: PUSH
11008: LD_INT 0
11010: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11011: LD_ADDR_EXP 55
11015: PUSH
11016: LD_INT 0
11018: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11019: LD_ADDR_EXP 56
11023: PUSH
11024: LD_INT 0
11026: ST_TO_ADDR
// def_builduptime := 6 ;
11027: LD_ADDR_EXP 57
11031: PUSH
11032: LD_INT 6
11034: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11035: LD_ADDR_VAR 0 2
11039: PUSH
11040: LD_INT 1
11042: PUSH
11043: EMPTY
11044: LIST
11045: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11046: LD_ADDR_VAR 0 3
11050: PUSH
11051: EMPTY
11052: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11053: LD_ADDR_LOC 22
11057: PUSH
11058: EMPTY
11059: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11060: LD_ADDR_LOC 23
11064: PUSH
11065: EMPTY
11066: ST_TO_ADDR
// Banned_Controls := [ ] ;
11067: LD_ADDR_LOC 24
11071: PUSH
11072: EMPTY
11073: ST_TO_ADDR
// Banned_Engines := [ ] ;
11074: LD_ADDR_LOC 25
11078: PUSH
11079: EMPTY
11080: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11081: LD_ADDR_LOC 20
11085: PUSH
11086: LD_INT 4
11088: PUSH
11089: LD_INT 5
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 31
11098: PUSH
11099: LD_INT 32
11101: PUSH
11102: LD_INT 33
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: LIST
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
11114: LD_ADDR_LOC 21
11118: PUSH
11119: LD_INT 1
11121: PUSH
11122: LD_INT 2
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: ST_TO_ADDR
// end ; 3 :
11129: GO 12640
11131: LD_INT 3
11133: DOUBLE
11134: EQUAL
11135: IFTRUE 11139
11137: GO 11382
11139: POP
// begin def_base_level := 1 ;
11140: LD_ADDR_EXP 44
11144: PUSH
11145: LD_INT 1
11147: ST_TO_ADDR
// def_amount_of_people := 11 ;
11148: LD_ADDR_EXP 45
11152: PUSH
11153: LD_INT 11
11155: ST_TO_ADDR
// def_skill_level := 3 ;
11156: LD_ADDR_EXP 46
11160: PUSH
11161: LD_INT 3
11163: ST_TO_ADDR
// def_starting_resources := 3 ;
11164: LD_ADDR_EXP 47
11168: PUSH
11169: LD_INT 3
11171: ST_TO_ADDR
// def_shipments_density := 1 ;
11172: LD_ADDR_EXP 48
11176: PUSH
11177: LD_INT 1
11179: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11180: LD_ADDR_EXP 49
11184: PUSH
11185: LD_INT 0
11187: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11188: LD_ADDR_EXP 50
11192: PUSH
11193: LD_INT 1
11195: ST_TO_ADDR
// def_shared_vision := 1 ;
11196: LD_ADDR_EXP 51
11200: PUSH
11201: LD_INT 1
11203: ST_TO_ADDR
// def_morale_flags := 0 ;
11204: LD_ADDR_EXP 52
11208: PUSH
11209: LD_INT 0
11211: ST_TO_ADDR
// def_siberite_detection := 1 ;
11212: LD_ADDR_EXP 53
11216: PUSH
11217: LD_INT 1
11219: ST_TO_ADDR
// def_people_respawning := 0 ;
11220: LD_ADDR_EXP 54
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11228: LD_ADDR_EXP 55
11232: PUSH
11233: LD_INT 2
11235: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11236: LD_ADDR_EXP 56
11240: PUSH
11241: LD_INT 0
11243: ST_TO_ADDR
// def_builduptime := 6 ;
11244: LD_ADDR_EXP 57
11248: PUSH
11249: LD_INT 6
11251: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11252: LD_ADDR_VAR 0 2
11256: PUSH
11257: LD_INT 23
11259: PUSH
11260: EMPTY
11261: LIST
11262: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
11263: LD_ADDR_VAR 0 3
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: LD_INT 37
11273: PUSH
11274: LD_INT 32
11276: PUSH
11277: LD_INT 33
11279: PUSH
11280: LD_INT 36
11282: PUSH
11283: LD_INT 16
11285: PUSH
11286: LD_INT 23
11288: PUSH
11289: LD_INT 21
11291: PUSH
11292: LD_INT 18
11294: PUSH
11295: LD_INT 22
11297: PUSH
11298: LD_INT 20
11300: PUSH
11301: LD_INT 19
11303: PUSH
11304: LD_INT 25
11306: PUSH
11307: LD_INT 17
11309: PUSH
11310: LD_INT 24
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11330: LD_ADDR_LOC 22
11334: PUSH
11335: EMPTY
11336: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11337: LD_ADDR_LOC 23
11341: PUSH
11342: EMPTY
11343: ST_TO_ADDR
// Banned_Controls := [ ] ;
11344: LD_ADDR_LOC 24
11348: PUSH
11349: EMPTY
11350: ST_TO_ADDR
// Banned_Engines := [ ] ;
11351: LD_ADDR_LOC 25
11355: PUSH
11356: EMPTY
11357: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11358: LD_ADDR_LOC 20
11362: PUSH
11363: EMPTY
11364: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11365: LD_ADDR_LOC 21
11369: PUSH
11370: EMPTY
11371: ST_TO_ADDR
// No_Mechs := true ;
11372: LD_ADDR_EXP 58
11376: PUSH
11377: LD_INT 1
11379: ST_TO_ADDR
// end ; 4 :
11380: GO 12640
11382: LD_INT 4
11384: DOUBLE
11385: EQUAL
11386: IFTRUE 11390
11388: GO 11565
11390: POP
// begin def_base_level := 1 ;
11391: LD_ADDR_EXP 44
11395: PUSH
11396: LD_INT 1
11398: ST_TO_ADDR
// def_amount_of_people := 11 ;
11399: LD_ADDR_EXP 45
11403: PUSH
11404: LD_INT 11
11406: ST_TO_ADDR
// def_skill_level := 3 ;
11407: LD_ADDR_EXP 46
11411: PUSH
11412: LD_INT 3
11414: ST_TO_ADDR
// def_starting_resources := 3 ;
11415: LD_ADDR_EXP 47
11419: PUSH
11420: LD_INT 3
11422: ST_TO_ADDR
// def_shipments_density := 2 ;
11423: LD_ADDR_EXP 48
11427: PUSH
11428: LD_INT 2
11430: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11431: LD_ADDR_EXP 49
11435: PUSH
11436: LD_INT 1
11438: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11439: LD_ADDR_EXP 50
11443: PUSH
11444: LD_INT 2
11446: ST_TO_ADDR
// def_shared_vision := 1 ;
11447: LD_ADDR_EXP 51
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// def_morale_flags := 0 ;
11455: LD_ADDR_EXP 52
11459: PUSH
11460: LD_INT 0
11462: ST_TO_ADDR
// def_siberite_detection := 1 ;
11463: LD_ADDR_EXP 53
11467: PUSH
11468: LD_INT 1
11470: ST_TO_ADDR
// def_people_respawning := 0 ;
11471: LD_ADDR_EXP 54
11475: PUSH
11476: LD_INT 0
11478: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11479: LD_ADDR_EXP 55
11483: PUSH
11484: LD_INT 0
11486: ST_TO_ADDR
// def_siberite_bomb := 1 ;
11487: LD_ADDR_EXP 56
11491: PUSH
11492: LD_INT 1
11494: ST_TO_ADDR
// def_builduptime := 11 ;
11495: LD_ADDR_EXP 57
11499: PUSH
11500: LD_INT 11
11502: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11503: LD_ADDR_VAR 0 2
11507: PUSH
11508: LD_INT 1
11510: PUSH
11511: EMPTY
11512: LIST
11513: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11514: LD_ADDR_VAR 0 3
11518: PUSH
11519: EMPTY
11520: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11521: LD_ADDR_LOC 22
11525: PUSH
11526: EMPTY
11527: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11528: LD_ADDR_LOC 23
11532: PUSH
11533: EMPTY
11534: ST_TO_ADDR
// Banned_Controls := [ ] ;
11535: LD_ADDR_LOC 24
11539: PUSH
11540: EMPTY
11541: ST_TO_ADDR
// Banned_Engines := [ ] ;
11542: LD_ADDR_LOC 25
11546: PUSH
11547: EMPTY
11548: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11549: LD_ADDR_LOC 20
11553: PUSH
11554: EMPTY
11555: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11556: LD_ADDR_LOC 21
11560: PUSH
11561: EMPTY
11562: ST_TO_ADDR
// end ; 5 :
11563: GO 12640
11565: LD_INT 5
11567: DOUBLE
11568: EQUAL
11569: IFTRUE 11573
11571: GO 11822
11573: POP
// begin def_base_level := 0 ;
11574: LD_ADDR_EXP 44
11578: PUSH
11579: LD_INT 0
11581: ST_TO_ADDR
// def_amount_of_people := 5 ;
11582: LD_ADDR_EXP 45
11586: PUSH
11587: LD_INT 5
11589: ST_TO_ADDR
// def_skill_level := 0 ;
11590: LD_ADDR_EXP 46
11594: PUSH
11595: LD_INT 0
11597: ST_TO_ADDR
// def_starting_resources := 0 ;
11598: LD_ADDR_EXP 47
11602: PUSH
11603: LD_INT 0
11605: ST_TO_ADDR
// def_shipments_density := 0 ;
11606: LD_ADDR_EXP 48
11610: PUSH
11611: LD_INT 0
11613: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11614: LD_ADDR_EXP 49
11618: PUSH
11619: LD_INT 0
11621: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11622: LD_ADDR_EXP 50
11626: PUSH
11627: LD_INT 0
11629: ST_TO_ADDR
// def_shared_vision := 1 ;
11630: LD_ADDR_EXP 51
11634: PUSH
11635: LD_INT 1
11637: ST_TO_ADDR
// def_morale_flags := 0 ;
11638: LD_ADDR_EXP 52
11642: PUSH
11643: LD_INT 0
11645: ST_TO_ADDR
// def_siberite_detection := 0 ;
11646: LD_ADDR_EXP 53
11650: PUSH
11651: LD_INT 0
11653: ST_TO_ADDR
// def_people_respawning := 1 ;
11654: LD_ADDR_EXP 54
11658: PUSH
11659: LD_INT 1
11661: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11662: LD_ADDR_EXP 55
11666: PUSH
11667: LD_INT 1
11669: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11670: LD_ADDR_EXP 56
11674: PUSH
11675: LD_INT 0
11677: ST_TO_ADDR
// def_builduptime := 0 ;
11678: LD_ADDR_EXP 57
11682: PUSH
11683: LD_INT 0
11685: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
11686: LD_ADDR_VAR 0 2
11690: PUSH
11691: LD_INT 10
11693: PUSH
11694: LD_INT 3
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
11701: LD_ADDR_VAR 0 3
11705: PUSH
11706: LD_INT 12
11708: PUSH
11709: LD_INT 11
11711: PUSH
11712: LD_INT 14
11714: PUSH
11715: LD_INT 13
11717: PUSH
11718: LD_INT 5
11720: PUSH
11721: LD_INT 24
11723: PUSH
11724: LD_INT 21
11726: PUSH
11727: LD_INT 33
11729: PUSH
11730: LD_INT 36
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
11744: LD_ADDR_LOC 22
11748: PUSH
11749: LD_INT 31
11751: PUSH
11752: EMPTY
11753: LIST
11754: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11755: LD_ADDR_LOC 23
11759: PUSH
11760: EMPTY
11761: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
11762: LD_ADDR_LOC 24
11766: PUSH
11767: LD_INT 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: ST_TO_ADDR
// Banned_Engines := [ ] ;
11773: LD_ADDR_LOC 25
11777: PUSH
11778: EMPTY
11779: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
11780: LD_ADDR_LOC 20
11784: PUSH
11785: LD_INT 4
11787: PUSH
11788: EMPTY
11789: LIST
11790: PUSH
11791: LD_INT 31
11793: PUSH
11794: LD_INT 32
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
11805: LD_ADDR_LOC 21
11809: PUSH
11810: LD_INT 1
11812: PUSH
11813: LD_INT 1
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: ST_TO_ADDR
// end ; 6 :
11820: GO 12640
11822: LD_INT 6
11824: DOUBLE
11825: EQUAL
11826: IFTRUE 11830
11828: GO 12033
11830: POP
// begin def_base_level := 1 ;
11831: LD_ADDR_EXP 44
11835: PUSH
11836: LD_INT 1
11838: ST_TO_ADDR
// def_amount_of_people := 11 ;
11839: LD_ADDR_EXP 45
11843: PUSH
11844: LD_INT 11
11846: ST_TO_ADDR
// def_skill_level := 3 ;
11847: LD_ADDR_EXP 46
11851: PUSH
11852: LD_INT 3
11854: ST_TO_ADDR
// def_starting_resources := 3 ;
11855: LD_ADDR_EXP 47
11859: PUSH
11860: LD_INT 3
11862: ST_TO_ADDR
// def_shipments_density := 1 ;
11863: LD_ADDR_EXP 48
11867: PUSH
11868: LD_INT 1
11870: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11871: LD_ADDR_EXP 49
11875: PUSH
11876: LD_INT 0
11878: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11879: LD_ADDR_EXP 50
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// def_shared_vision := 1 ;
11887: LD_ADDR_EXP 51
11891: PUSH
11892: LD_INT 1
11894: ST_TO_ADDR
// def_morale_flags := 0 ;
11895: LD_ADDR_EXP 52
11899: PUSH
11900: LD_INT 0
11902: ST_TO_ADDR
// def_siberite_detection := 1 ;
11903: LD_ADDR_EXP 53
11907: PUSH
11908: LD_INT 1
11910: ST_TO_ADDR
// def_people_respawning := 2 ;
11911: LD_ADDR_EXP 54
11915: PUSH
11916: LD_INT 2
11918: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11919: LD_ADDR_EXP 55
11923: PUSH
11924: LD_INT 1
11926: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11927: LD_ADDR_EXP 56
11931: PUSH
11932: LD_INT 0
11934: ST_TO_ADDR
// def_builduptime := 6 ;
11935: LD_ADDR_EXP 57
11939: PUSH
11940: LD_INT 6
11942: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11943: LD_ADDR_VAR 0 2
11947: PUSH
11948: LD_INT 23
11950: PUSH
11951: EMPTY
11952: LIST
11953: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
11954: LD_ADDR_VAR 0 3
11958: PUSH
11959: LD_INT 2
11961: PUSH
11962: LD_INT 37
11964: PUSH
11965: LD_INT 31
11967: PUSH
11968: LD_INT 32
11970: PUSH
11971: LD_INT 33
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11981: LD_ADDR_LOC 22
11985: PUSH
11986: EMPTY
11987: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11988: LD_ADDR_LOC 23
11992: PUSH
11993: EMPTY
11994: ST_TO_ADDR
// Banned_Controls := [ ] ;
11995: LD_ADDR_LOC 24
11999: PUSH
12000: EMPTY
12001: ST_TO_ADDR
// Banned_Engines := [ ] ;
12002: LD_ADDR_LOC 25
12006: PUSH
12007: EMPTY
12008: ST_TO_ADDR
// Restricted_Builds := [ ] ;
12009: LD_ADDR_LOC 20
12013: PUSH
12014: EMPTY
12015: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
12016: LD_ADDR_LOC 21
12020: PUSH
12021: EMPTY
12022: ST_TO_ADDR
// No_Mechs := true ;
12023: LD_ADDR_EXP 58
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// end ; 7 :
12031: GO 12640
12033: LD_INT 7
12035: DOUBLE
12036: EQUAL
12037: IFTRUE 12041
12039: GO 12239
12041: POP
// begin def_base_level := 1 ;
12042: LD_ADDR_EXP 44
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
// def_amount_of_people := 20 ;
12050: LD_ADDR_EXP 45
12054: PUSH
12055: LD_INT 20
12057: ST_TO_ADDR
// def_skill_level := 3 ;
12058: LD_ADDR_EXP 46
12062: PUSH
12063: LD_INT 3
12065: ST_TO_ADDR
// def_starting_resources := 3 ;
12066: LD_ADDR_EXP 47
12070: PUSH
12071: LD_INT 3
12073: ST_TO_ADDR
// def_shipments_density := 1 ;
12074: LD_ADDR_EXP 48
12078: PUSH
12079: LD_INT 1
12081: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
12082: LD_ADDR_EXP 49
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
12090: LD_ADDR_EXP 50
12094: PUSH
12095: LD_INT 2
12097: ST_TO_ADDR
// def_shared_vision := 1 ;
12098: LD_ADDR_EXP 51
12102: PUSH
12103: LD_INT 1
12105: ST_TO_ADDR
// def_morale_flags := 0 ;
12106: LD_ADDR_EXP 52
12110: PUSH
12111: LD_INT 0
12113: ST_TO_ADDR
// def_siberite_detection := 1 ;
12114: LD_ADDR_EXP 53
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// def_people_respawning := 0 ;
12122: LD_ADDR_EXP 54
12126: PUSH
12127: LD_INT 0
12129: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12130: LD_ADDR_EXP 55
12134: PUSH
12135: LD_INT 1
12137: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12138: LD_ADDR_EXP 56
12142: PUSH
12143: LD_INT 0
12145: ST_TO_ADDR
// def_builduptime := 6 ;
12146: LD_ADDR_EXP 57
12150: PUSH
12151: LD_INT 6
12153: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12154: LD_ADDR_VAR 0 2
12158: PUSH
12159: LD_INT 23
12161: PUSH
12162: EMPTY
12163: LIST
12164: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
12165: LD_ADDR_VAR 0 3
12169: PUSH
12170: LD_INT 37
12172: PUSH
12173: EMPTY
12174: LIST
12175: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12176: LD_ADDR_LOC 22
12180: PUSH
12181: EMPTY
12182: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12183: LD_ADDR_LOC 23
12187: PUSH
12188: EMPTY
12189: ST_TO_ADDR
// Banned_Controls := [ ] ;
12190: LD_ADDR_LOC 24
12194: PUSH
12195: EMPTY
12196: ST_TO_ADDR
// Banned_Engines := [ ] ;
12197: LD_ADDR_LOC 25
12201: PUSH
12202: EMPTY
12203: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
12204: LD_ADDR_LOC 20
12208: PUSH
12209: LD_INT 31
12211: PUSH
12212: LD_INT 32
12214: PUSH
12215: LD_INT 33
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: EMPTY
12224: LIST
12225: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
12226: LD_ADDR_LOC 21
12230: PUSH
12231: LD_INT 10
12233: PUSH
12234: EMPTY
12235: LIST
12236: ST_TO_ADDR
// end ; 8 :
12237: GO 12640
12239: LD_INT 8
12241: DOUBLE
12242: EQUAL
12243: IFTRUE 12247
12245: GO 12639
12247: POP
// begin def_base_level := 0 ;
12248: LD_ADDR_EXP 44
12252: PUSH
12253: LD_INT 0
12255: ST_TO_ADDR
// def_amount_of_people := 8 ;
12256: LD_ADDR_EXP 45
12260: PUSH
12261: LD_INT 8
12263: ST_TO_ADDR
// def_skill_level := 0 ;
12264: LD_ADDR_EXP 46
12268: PUSH
12269: LD_INT 0
12271: ST_TO_ADDR
// def_starting_resources := 2 ;
12272: LD_ADDR_EXP 47
12276: PUSH
12277: LD_INT 2
12279: ST_TO_ADDR
// def_shipments_density := 1 ;
12280: LD_ADDR_EXP 48
12284: PUSH
12285: LD_INT 1
12287: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12288: LD_ADDR_EXP 49
12292: PUSH
12293: LD_INT 0
12295: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12296: LD_ADDR_EXP 50
12300: PUSH
12301: LD_INT 0
12303: ST_TO_ADDR
// def_shared_vision := 1 ;
12304: LD_ADDR_EXP 51
12308: PUSH
12309: LD_INT 1
12311: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
12312: LD_ADDR_EXP 52
12316: PUSH
12317: LD_INT 0
12319: PPUSH
12320: LD_INT 2
12322: PPUSH
12323: CALL_OW 12
12327: ST_TO_ADDR
// def_siberite_detection := 0 ;
12328: LD_ADDR_EXP 53
12332: PUSH
12333: LD_INT 0
12335: ST_TO_ADDR
// def_people_respawning := 0 ;
12336: LD_ADDR_EXP 54
12340: PUSH
12341: LD_INT 0
12343: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
12344: LD_ADDR_EXP 55
12348: PUSH
12349: LD_INT 2
12351: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12352: LD_ADDR_EXP 56
12356: PUSH
12357: LD_INT 0
12359: ST_TO_ADDR
// def_builduptime := 0 ;
12360: LD_ADDR_EXP 57
12364: PUSH
12365: LD_INT 0
12367: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
12368: LD_ADDR_VAR 0 2
12372: PUSH
12373: LD_INT 23
12375: PUSH
12376: LD_INT 20
12378: PUSH
12379: LD_INT 40
12381: PUSH
12382: LD_INT 47
12384: PUSH
12385: LD_INT 46
12387: PUSH
12388: LD_INT 39
12390: PUSH
12391: LD_INT 71
12393: PUSH
12394: LD_INT 34
12396: PUSH
12397: LD_INT 41
12399: PUSH
12400: LD_INT 44
12402: PUSH
12403: LD_INT 17
12405: PUSH
12406: LD_INT 16
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
12423: LD_ADDR_VAR 0 3
12427: PUSH
12428: LD_INT 37
12430: PUSH
12431: LD_INT 5
12433: PUSH
12434: LD_INT 13
12436: PUSH
12437: LD_INT 34
12439: PUSH
12440: LD_INT 12
12442: PUSH
12443: LD_INT 15
12445: PUSH
12446: LD_INT 11
12448: PUSH
12449: LD_INT 14
12451: PUSH
12452: LD_INT 29
12454: PUSH
12455: LD_INT 30
12457: PUSH
12458: LD_INT 28
12460: PUSH
12461: LD_INT 24
12463: PUSH
12464: LD_INT 25
12466: PUSH
12467: LD_INT 20
12469: PUSH
12470: LD_INT 21
12472: PUSH
12473: LD_INT 22
12475: PUSH
12476: LD_INT 36
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12498: LD_ADDR_LOC 22
12502: PUSH
12503: EMPTY
12504: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
12505: LD_ADDR_LOC 23
12509: PUSH
12510: LD_INT 14
12512: PUSH
12513: EMPTY
12514: LIST
12515: ST_TO_ADDR
// Banned_Controls := [ ] ;
12516: LD_ADDR_LOC 24
12520: PUSH
12521: EMPTY
12522: ST_TO_ADDR
// Banned_Engines := [ ] ;
12523: LD_ADDR_LOC 25
12527: PUSH
12528: EMPTY
12529: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
12530: LD_ADDR_LOC 20
12534: PUSH
12535: LD_INT 31
12537: PUSH
12538: LD_INT 32
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: LD_INT 4
12547: PUSH
12548: EMPTY
12549: LIST
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
12555: LD_ADDR_LOC 21
12559: PUSH
12560: LD_INT 2
12562: PUSH
12563: LD_INT 1
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: ST_TO_ADDR
// for i := 1 to 8 do
12570: LD_ADDR_VAR 0 4
12574: PUSH
12575: DOUBLE
12576: LD_INT 1
12578: DEC
12579: ST_TO_ADDR
12580: LD_INT 8
12582: PUSH
12583: FOR_TO
12584: IFFALSE 12635
// if ( Side_Nations [ i ] = 3 ) then
12586: LD_EXP 20
12590: PUSH
12591: LD_VAR 0 4
12595: ARRAY
12596: PUSH
12597: LD_INT 3
12599: EQUAL
12600: IFFALSE 12633
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
12602: LD_ADDR_EXP 20
12606: PUSH
12607: LD_EXP 20
12611: PPUSH
12612: LD_VAR 0 4
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: LD_INT 2
12622: PPUSH
12623: CALL_OW 12
12627: PPUSH
12628: CALL_OW 1
12632: ST_TO_ADDR
12633: GO 12583
12635: POP
12636: POP
// end ; end ;
12637: GO 12640
12639: POP
// for i := 1 to 8 do
12640: LD_ADDR_VAR 0 4
12644: PUSH
12645: DOUBLE
12646: LD_INT 1
12648: DEC
12649: ST_TO_ADDR
12650: LD_INT 8
12652: PUSH
12653: FOR_TO
12654: IFFALSE 12738
// if Side_Positions [ i ] then
12656: LD_EXP 19
12660: PUSH
12661: LD_VAR 0 4
12665: ARRAY
12666: IFFALSE 12736
// begin for j in Unavailable_Techs do
12668: LD_ADDR_VAR 0 5
12672: PUSH
12673: LD_VAR 0 2
12677: PUSH
12678: FOR_IN
12679: IFFALSE 12700
// SetTech ( j , i , 0 ) ;
12681: LD_VAR 0 5
12685: PPUSH
12686: LD_VAR 0 4
12690: PPUSH
12691: LD_INT 0
12693: PPUSH
12694: CALL_OW 322
12698: GO 12678
12700: POP
12701: POP
// for j in Unavailable_Builds do
12702: LD_ADDR_VAR 0 5
12706: PUSH
12707: LD_VAR 0 3
12711: PUSH
12712: FOR_IN
12713: IFFALSE 12734
// SetRestrict ( j , i , 0 ) ;
12715: LD_VAR 0 5
12719: PPUSH
12720: LD_VAR 0 4
12724: PPUSH
12725: LD_INT 0
12727: PPUSH
12728: CALL_OW 324
12732: GO 12712
12734: POP
12735: POP
// end ;
12736: GO 12653
12738: POP
12739: POP
// end ;
12740: LD_VAR 0 1
12744: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
12745: LD_INT 0
12747: PPUSH
12748: PPUSH
12749: PPUSH
12750: PPUSH
12751: PPUSH
12752: PPUSH
12753: PPUSH
// for i := 1 to Restricted_Builds do
12754: LD_ADDR_VAR 0 2
12758: PUSH
12759: DOUBLE
12760: LD_INT 1
12762: DEC
12763: ST_TO_ADDR
12764: LD_LOC 20
12768: PUSH
12769: FOR_TO
12770: IFFALSE 13080
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
12772: LD_LOC 20
12776: PUSH
12777: LD_VAR 0 2
12781: ARRAY
12782: PUSH
12783: LD_INT 1
12785: ARRAY
12786: PUSH
12787: LD_INT 31
12789: DOUBLE
12790: EQUAL
12791: IFTRUE 12807
12793: LD_INT 32
12795: DOUBLE
12796: EQUAL
12797: IFTRUE 12807
12799: LD_INT 33
12801: DOUBLE
12802: EQUAL
12803: IFTRUE 12807
12805: GO 12818
12807: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
12808: LD_ADDR_VAR 0 6
12812: PUSH
12813: LD_STRING #Turrets
12815: ST_TO_ADDR
12816: GO 12863
12818: LD_INT 4
12820: DOUBLE
12821: EQUAL
12822: IFTRUE 12832
12824: LD_INT 5
12826: DOUBLE
12827: EQUAL
12828: IFTRUE 12832
12830: GO 12843
12832: POP
// btype := #Armouries ; b_Behemoth :
12833: LD_ADDR_VAR 0 6
12837: PUSH
12838: LD_STRING #Armouries
12840: ST_TO_ADDR
12841: GO 12863
12843: LD_INT 37
12845: DOUBLE
12846: EQUAL
12847: IFTRUE 12851
12849: GO 12862
12851: POP
// btype := #Behemoths ; end ;
12852: LD_ADDR_VAR 0 6
12856: PUSH
12857: LD_STRING #Behemoths
12859: ST_TO_ADDR
12860: GO 12863
12862: POP
// list := [ ] ;
12863: LD_ADDR_VAR 0 7
12867: PUSH
12868: EMPTY
12869: ST_TO_ADDR
// for j := 1 to 8 do
12870: LD_ADDR_VAR 0 3
12874: PUSH
12875: DOUBLE
12876: LD_INT 1
12878: DEC
12879: ST_TO_ADDR
12880: LD_INT 8
12882: PUSH
12883: FOR_TO
12884: IFFALSE 12977
// if Side_Positions [ j ] then
12886: LD_EXP 19
12890: PUSH
12891: LD_VAR 0 3
12895: ARRAY
12896: IFFALSE 12975
// begin amount := 0 ;
12898: LD_ADDR_VAR 0 5
12902: PUSH
12903: LD_INT 0
12905: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
12906: LD_ADDR_VAR 0 4
12910: PUSH
12911: LD_LOC 20
12915: PUSH
12916: LD_VAR 0 2
12920: ARRAY
12921: PUSH
12922: FOR_IN
12923: IFFALSE 12971
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
12925: LD_ADDR_VAR 0 5
12929: PUSH
12930: LD_VAR 0 5
12934: PUSH
12935: LD_INT 22
12937: PUSH
12938: LD_VAR 0 3
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: LD_INT 30
12949: PUSH
12950: LD_VAR 0 4
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: PLUS
12968: ST_TO_ADDR
12969: GO 12922
12971: POP
12972: POP
// break ;
12973: GO 12977
// end ;
12975: GO 12883
12977: POP
12978: POP
// list := [ ] ;
12979: LD_ADDR_VAR 0 7
12983: PUSH
12984: EMPTY
12985: ST_TO_ADDR
// for j := 1 to 8 do
12986: LD_ADDR_VAR 0 3
12990: PUSH
12991: DOUBLE
12992: LD_INT 1
12994: DEC
12995: ST_TO_ADDR
12996: LD_INT 8
12998: PUSH
12999: FOR_TO
13000: IFFALSE 13020
// list := list ^ amount ;
13002: LD_ADDR_VAR 0 7
13006: PUSH
13007: LD_VAR 0 7
13011: PUSH
13012: LD_VAR 0 5
13016: ADD
13017: ST_TO_ADDR
13018: GO 12999
13020: POP
13021: POP
// Already_Built := Already_Built ^ [ list ] ;
13022: LD_ADDR_LOC 26
13026: PUSH
13027: LD_LOC 26
13031: PUSH
13032: LD_VAR 0 7
13036: PUSH
13037: EMPTY
13038: LIST
13039: ADD
13040: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13041: LD_ADDR_LOC 27
13045: PUSH
13046: LD_LOC 27
13050: PUSH
13051: LD_VAR 0 6
13055: PUSH
13056: LD_VAR 0 5
13060: PUSH
13061: LD_LOC 21
13065: PUSH
13066: LD_VAR 0 2
13070: ARRAY
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: ADD
13077: ST_TO_ADDR
// end ;
13078: GO 12769
13080: POP
13081: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13082: LD_ADDR_LOC 28
13086: PUSH
13087: LD_INT 0
13089: PUSH
13090: LD_INT 0
13092: PUSH
13093: LD_INT 0
13095: PUSH
13096: LD_INT 0
13098: PUSH
13099: LD_INT 0
13101: PUSH
13102: LD_INT 0
13104: PUSH
13105: LD_INT 0
13107: PUSH
13108: LD_INT 0
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: ST_TO_ADDR
// if Limits_Info then
13121: LD_LOC 27
13125: IFFALSE 13141
// Limits_Info := #Limits ^ Limits_Info ;
13127: LD_ADDR_LOC 27
13131: PUSH
13132: LD_STRING #Limits
13134: PUSH
13135: LD_LOC 27
13139: ADD
13140: ST_TO_ADDR
// end ;
13141: LD_VAR 0 1
13145: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13146: LD_INT 0
13148: PPUSH
13149: PPUSH
13150: PPUSH
13151: PPUSH
// for i := 1 to Restricted_Builds do
13152: LD_ADDR_VAR 0 7
13156: PUSH
13157: DOUBLE
13158: LD_INT 1
13160: DEC
13161: ST_TO_ADDR
13162: LD_LOC 20
13166: PUSH
13167: FOR_TO
13168: IFFALSE 13591
// if BType in Restricted_Builds [ i ] then
13170: LD_VAR 0 2
13174: PUSH
13175: LD_LOC 20
13179: PUSH
13180: LD_VAR 0 7
13184: ARRAY
13185: IN
13186: IFFALSE 13589
// begin if old_side then
13188: LD_VAR 0 4
13192: IFFALSE 13318
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
13194: LD_LOC 26
13198: PUSH
13199: LD_VAR 0 7
13203: ARRAY
13204: PUSH
13205: LD_VAR 0 3
13209: ARRAY
13210: PUSH
13211: LD_VAR 0 5
13215: PLUS
13216: PUSH
13217: LD_LOC 21
13221: PUSH
13222: LD_VAR 0 7
13226: ARRAY
13227: GREATER
13228: IFFALSE 13254
// begin SetSide ( un , old_side ) ;
13230: LD_VAR 0 1
13234: PPUSH
13235: LD_VAR 0 4
13239: PPUSH
13240: CALL_OW 235
// count := 0 ;
13244: LD_ADDR_VAR 0 5
13248: PUSH
13249: LD_INT 0
13251: ST_TO_ADDR
// end else
13252: GO 13318
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
13254: LD_ADDR_LOC 26
13258: PUSH
13259: LD_LOC 26
13263: PPUSH
13264: LD_VAR 0 7
13268: PPUSH
13269: LD_LOC 26
13273: PUSH
13274: LD_VAR 0 7
13278: ARRAY
13279: PPUSH
13280: LD_VAR 0 4
13284: PPUSH
13285: LD_LOC 26
13289: PUSH
13290: LD_VAR 0 7
13294: ARRAY
13295: PUSH
13296: LD_VAR 0 4
13300: ARRAY
13301: PUSH
13302: LD_VAR 0 5
13306: MINUS
13307: PPUSH
13308: CALL_OW 1
13312: PPUSH
13313: CALL_OW 1
13317: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
13318: LD_ADDR_LOC 26
13322: PUSH
13323: LD_LOC 26
13327: PPUSH
13328: LD_VAR 0 7
13332: PPUSH
13333: LD_LOC 26
13337: PUSH
13338: LD_VAR 0 7
13342: ARRAY
13343: PPUSH
13344: LD_VAR 0 3
13348: PPUSH
13349: LD_LOC 26
13353: PUSH
13354: LD_VAR 0 7
13358: ARRAY
13359: PUSH
13360: LD_VAR 0 3
13364: ARRAY
13365: PUSH
13366: LD_VAR 0 5
13370: PLUS
13371: PPUSH
13372: CALL_OW 1
13376: PPUSH
13377: CALL_OW 1
13381: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
13382: LD_VAR 0 5
13386: PUSH
13387: LD_INT 0
13389: NONEQUAL
13390: PUSH
13391: LD_VAR 0 3
13395: PUSH
13396: LD_OWVAR 2
13400: EQUAL
13401: AND
13402: IFFALSE 13445
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
13404: LD_ADDR_LOC 27
13408: PUSH
13409: LD_LOC 27
13413: PPUSH
13414: LD_INT 3
13416: PUSH
13417: LD_VAR 0 7
13421: MUL
13422: PPUSH
13423: LD_LOC 26
13427: PUSH
13428: LD_VAR 0 7
13432: ARRAY
13433: PUSH
13434: LD_VAR 0 3
13438: ARRAY
13439: PPUSH
13440: CALL_OW 1
13444: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
13445: LD_LOC 26
13449: PUSH
13450: LD_VAR 0 7
13454: ARRAY
13455: PUSH
13456: LD_VAR 0 3
13460: ARRAY
13461: PUSH
13462: LD_LOC 21
13466: PUSH
13467: LD_VAR 0 7
13471: ARRAY
13472: GREATER
13473: IFFALSE 13500
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
13475: LD_ADDR_LOC 28
13479: PUSH
13480: LD_LOC 28
13484: PPUSH
13485: LD_VAR 0 3
13489: PPUSH
13490: LD_INT 1
13492: PPUSH
13493: CALL_OW 1
13497: ST_TO_ADDR
// end else
13498: GO 13587
// begin for j := 1 to Restricted_Builds do
13500: LD_ADDR_VAR 0 8
13504: PUSH
13505: DOUBLE
13506: LD_INT 1
13508: DEC
13509: ST_TO_ADDR
13510: LD_LOC 20
13514: PUSH
13515: FOR_TO
13516: IFFALSE 13560
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
13518: LD_LOC 26
13522: PUSH
13523: LD_VAR 0 8
13527: ARRAY
13528: PUSH
13529: LD_VAR 0 3
13533: ARRAY
13534: PUSH
13535: LD_LOC 21
13539: PUSH
13540: LD_VAR 0 8
13544: ARRAY
13545: GREATER
13546: IFFALSE 13558
// begin Is_Cheater := true ;
13548: LD_ADDR_VAR 0 9
13552: PUSH
13553: LD_INT 1
13555: ST_TO_ADDR
// break ;
13556: GO 13560
// end ;
13558: GO 13515
13560: POP
13561: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
13562: LD_ADDR_LOC 28
13566: PUSH
13567: LD_LOC 28
13571: PPUSH
13572: LD_VAR 0 3
13576: PPUSH
13577: LD_VAR 0 9
13581: PPUSH
13582: CALL_OW 1
13586: ST_TO_ADDR
// end ; break ;
13587: GO 13591
// end ;
13589: GO 13167
13591: POP
13592: POP
// end ;
13593: LD_VAR 0 6
13597: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
13598: LD_VAR 0 5
13602: PUSH
13603: LD_LOC 22
13607: IN
13608: PUSH
13609: LD_VAR 0 2
13613: PUSH
13614: LD_LOC 23
13618: IN
13619: OR
13620: PUSH
13621: LD_VAR 0 4
13625: PUSH
13626: LD_LOC 24
13630: IN
13631: OR
13632: PUSH
13633: LD_VAR 0 3
13637: PUSH
13638: LD_LOC 25
13642: IN
13643: OR
13644: IFFALSE 13655
// ComCancel ( factory ) ;
13646: LD_VAR 0 1
13650: PPUSH
13651: CALL_OW 127
// end ;
13655: PPOPN 5
13657: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
13658: LD_VAR 0 2
13662: PUSH
13663: LD_LOC 22
13667: IN
13668: IFFALSE 13679
// ComCancel ( building ) ;
13670: LD_VAR 0 1
13674: PPUSH
13675: CALL_OW 127
// end ; end_of_file
13679: PPOPN 2
13681: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
13682: LD_INT 0
13684: PPUSH
13685: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
13686: LD_ADDR_VAR 0 2
13690: PUSH
13691: LD_STRING #Multi1x1-Time
13693: PUSH
13694: LD_OWVAR 1
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: ST_TO_ADDR
// if WaitServerStrings then
13703: LD_EXP 60
13707: IFFALSE 13725
// AllStrings = AllStrings ^ WaitServerStrings ;
13709: LD_ADDR_VAR 0 2
13713: PUSH
13714: LD_VAR 0 2
13718: PUSH
13719: LD_EXP 60
13723: ADD
13724: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
13725: LD_INT 0
13727: PUSH
13728: LD_EXP 16
13732: PUSH
13733: LD_OWVAR 1
13737: MINUS
13738: LESSEQUAL
13739: IFFALSE 13770
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
13741: LD_ADDR_VAR 0 2
13745: PUSH
13746: LD_VAR 0 2
13750: PUSH
13751: LD_STRING #allowedsibbomb
13753: PUSH
13754: LD_EXP 16
13758: PUSH
13759: LD_OWVAR 1
13763: MINUS
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: ADD
13769: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
13770: LD_INT 0
13772: PUSH
13773: LD_EXP 14
13777: PUSH
13778: LD_OWVAR 1
13782: MINUS
13783: LESSEQUAL
13784: IFFALSE 13815
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
13786: LD_ADDR_VAR 0 2
13790: PUSH
13791: LD_VAR 0 2
13795: PUSH
13796: LD_STRING #builduptime
13798: PUSH
13799: LD_EXP 14
13803: PUSH
13804: LD_OWVAR 1
13808: MINUS
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: ADD
13814: ST_TO_ADDR
// if ( ExtraStrings ) then
13815: LD_EXP 59
13819: IFFALSE 13841
// AllStrings := AllStrings ^  ^ ExtraStrings ;
13821: LD_ADDR_VAR 0 2
13825: PUSH
13826: LD_VAR 0 2
13830: PUSH
13831: LD_STRING 
13833: ADD
13834: PUSH
13835: LD_EXP 59
13839: ADD
13840: ST_TO_ADDR
// if ( LimitsStrings ) then
13841: CALL 10543 0 0
13845: IFFALSE 13867
// AllStrings := AllStrings ^  ^ LimitsStrings ;
13847: LD_ADDR_VAR 0 2
13851: PUSH
13852: LD_VAR 0 2
13856: PUSH
13857: LD_STRING 
13859: ADD
13860: PUSH
13861: CALL 10543 0 0
13865: ADD
13866: ST_TO_ADDR
// if debug_strings then
13867: LD_OWVAR 48
13871: IFFALSE 13893
// AllStrings := AllStrings ^  ^ debug_strings ;
13873: LD_ADDR_VAR 0 2
13877: PUSH
13878: LD_VAR 0 2
13882: PUSH
13883: LD_STRING 
13885: ADD
13886: PUSH
13887: LD_OWVAR 48
13891: ADD
13892: ST_TO_ADDR
// Display_Strings := AllStrings ;
13893: LD_ADDR_OWVAR 47
13897: PUSH
13898: LD_VAR 0 2
13902: ST_TO_ADDR
// end ;
13903: LD_VAR 0 1
13907: RET
// every 0 0$1 do
13908: GO 13910
13910: DISABLE
// begin ShowTimer ;
13911: CALL 13682 0 0
// enable ;
13915: ENABLE
// end ; end_of_file
13916: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
13917: LD_INT 0
13919: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
13920: LD_VAR 0 1
13924: PPUSH
13925: CALL_OW 255
13929: PUSH
13930: LD_VAR 0 4
13934: EQUAL
13935: IFFALSE 13954
// begin SetAchievement ( ACH_RAD ) ;
13937: LD_STRING ACH_RAD
13939: PPUSH
13940: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
13944: LD_STRING ACH_NL
13946: PPUSH
13947: LD_INT 1
13949: PPUSH
13950: CALL_OW 564
// end end ;
13954: LD_VAR 0 5
13958: RET
// export function SA_Win ( side ) ; begin
13959: LD_INT 0
13961: PPUSH
// case side of 1 :
13962: LD_VAR 0 1
13966: PUSH
13967: LD_INT 1
13969: DOUBLE
13970: EQUAL
13971: IFTRUE 13975
13973: GO 13988
13975: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
13976: LD_STRING ACH_AH
13978: PPUSH
13979: LD_INT 1
13981: PPUSH
13982: CALL_OW 564
13986: GO 14151
13988: LD_INT 2
13990: DOUBLE
13991: EQUAL
13992: IFTRUE 13996
13994: GO 14009
13996: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
13997: LD_STRING ACH_E
13999: PPUSH
14000: LD_INT 1
14002: PPUSH
14003: CALL_OW 564
14007: GO 14151
14009: LD_INT 3
14011: DOUBLE
14012: EQUAL
14013: IFTRUE 14017
14015: GO 14030
14017: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
14018: LD_STRING ACH_OOL
14020: PPUSH
14021: LD_INT 1
14023: PPUSH
14024: CALL_OW 564
14028: GO 14151
14030: LD_INT 1
14032: PUSH
14033: LD_INT 2
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: DOUBLE
14040: EQUAL
14041: IFTRUE 14045
14043: GO 14070
14045: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14046: LD_STRING ACH_AH
14048: PPUSH
14049: LD_REAL  5.00000000000000E-0001
14052: PPUSH
14053: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14057: LD_STRING ACH_E
14059: PPUSH
14060: LD_REAL  5.00000000000000E-0001
14063: PPUSH
14064: CALL_OW 564
// end ; [ 2 , 3 ] :
14068: GO 14151
14070: LD_INT 2
14072: PUSH
14073: LD_INT 3
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: DOUBLE
14080: EQUAL
14081: IFTRUE 14085
14083: GO 14110
14085: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14086: LD_STRING ACH_OOL
14088: PPUSH
14089: LD_REAL  5.00000000000000E-0001
14092: PPUSH
14093: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14097: LD_STRING ACH_E
14099: PPUSH
14100: LD_REAL  5.00000000000000E-0001
14103: PPUSH
14104: CALL_OW 564
// end ; [ 3 , 1 ] :
14108: GO 14151
14110: LD_INT 3
14112: PUSH
14113: LD_INT 1
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: DOUBLE
14120: EQUAL
14121: IFTRUE 14125
14123: GO 14150
14125: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14126: LD_STRING ACH_AH
14128: PPUSH
14129: LD_REAL  5.00000000000000E-0001
14132: PPUSH
14133: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14137: LD_STRING ACH_OOL
14139: PPUSH
14140: LD_REAL  5.00000000000000E-0001
14143: PPUSH
14144: CALL_OW 564
// end ; end ;
14148: GO 14151
14150: POP
// end ; end_of_file
14151: LD_VAR 0 2
14155: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
14156: LD_INT 0
14158: PPUSH
14159: PPUSH
// enable ( 98 ) ;
14160: LD_INT 98
14162: ENABLE_MARKED
// GameEnded = false ;
14163: LD_ADDR_LOC 30
14167: PUSH
14168: LD_INT 0
14170: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14171: LD_ADDR_LOC 29
14175: PUSH
14176: LD_INT 0
14178: PUSH
14179: LD_INT 0
14181: PUSH
14182: LD_INT 0
14184: PUSH
14185: LD_INT 0
14187: PUSH
14188: LD_INT 0
14190: PUSH
14191: LD_INT 0
14193: PUSH
14194: LD_INT 0
14196: PUSH
14197: LD_INT 0
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: ST_TO_ADDR
// unfoged = false ;
14210: LD_ADDR_LOC 31
14214: PUSH
14215: LD_INT 0
14217: ST_TO_ADDR
// for i = 1 to side_positions do
14218: LD_ADDR_VAR 0 2
14222: PUSH
14223: DOUBLE
14224: LD_INT 1
14226: DEC
14227: ST_TO_ADDR
14228: LD_EXP 19
14232: PUSH
14233: FOR_TO
14234: IFFALSE 14274
// if not side_positions [ i ] then
14236: LD_EXP 19
14240: PUSH
14241: LD_VAR 0 2
14245: ARRAY
14246: NOT
14247: IFFALSE 14272
// defaited = replace ( defaited , i , true ) ;
14249: LD_ADDR_LOC 29
14253: PUSH
14254: LD_LOC 29
14258: PPUSH
14259: LD_VAR 0 2
14263: PPUSH
14264: LD_INT 1
14266: PPUSH
14267: CALL_OW 1
14271: ST_TO_ADDR
14272: GO 14233
14274: POP
14275: POP
// end ;
14276: LD_VAR 0 1
14280: RET
// function CanWinLoose ; begin
14281: LD_INT 0
14283: PPUSH
// Result := true ;
14284: LD_ADDR_VAR 0 1
14288: PUSH
14289: LD_INT 1
14291: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
14292: CALL_OW 518
14296: PUSH
14297: CALL_OW 519
14301: PUSH
14302: LD_INT 0
14304: GREATER
14305: AND
14306: IFFALSE 14316
// Result := false ;
14308: LD_ADDR_VAR 0 1
14312: PUSH
14313: LD_INT 0
14315: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14316: CALL_OW 531
14320: PUSH
14321: CALL_OW 519
14325: PUSH
14326: LD_INT 1
14328: GREATER
14329: AND
14330: IFFALSE 14340
// Result := false ;
14332: LD_ADDR_VAR 0 1
14336: PUSH
14337: LD_INT 0
14339: ST_TO_ADDR
// end ;
14340: LD_VAR 0 1
14344: RET
// export function HasPower ( i ) ; var k , h ; begin
14345: LD_INT 0
14347: PPUSH
14348: PPUSH
14349: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
14350: LD_VAR 0 1
14354: PPUSH
14355: CALL_OW 108
14359: NOT
14360: PUSH
14361: LD_EXP 22
14365: PUSH
14366: LD_VAR 0 1
14370: ARRAY
14371: NOT
14372: AND
14373: PUSH
14374: LD_OWVAR 4
14378: AND
14379: IFFALSE 14391
// begin result = false ;
14381: LD_ADDR_VAR 0 2
14385: PUSH
14386: LD_INT 0
14388: ST_TO_ADDR
// end else
14389: GO 14686
// case def_win_rules of 0 :
14391: LD_EXP 32
14395: PUSH
14396: LD_INT 0
14398: DOUBLE
14399: EQUAL
14400: IFTRUE 14404
14402: GO 14567
14404: POP
// if def_people_respawning then
14405: LD_EXP 54
14409: IFFALSE 14500
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
14411: LD_ADDR_VAR 0 2
14415: PUSH
14416: LD_INT 22
14418: PUSH
14419: LD_VAR 0 1
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 2
14430: PUSH
14431: LD_INT 21
14433: PUSH
14434: LD_INT 1
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: LD_INT 3
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 33
14453: PUSH
14454: LD_INT 5
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 30
14463: PUSH
14464: LD_INT 0
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: LD_INT 30
14473: PUSH
14474: LD_INT 1
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PPUSH
14493: CALL_OW 69
14497: ST_TO_ADDR
14498: GO 14565
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
14500: LD_ADDR_VAR 0 2
14504: PUSH
14505: LD_INT 22
14507: PUSH
14508: LD_VAR 0 1
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 2
14519: PUSH
14520: LD_INT 21
14522: PUSH
14523: LD_INT 1
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: LD_INT 33
14532: PUSH
14533: LD_INT 3
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: LD_INT 33
14542: PUSH
14543: LD_INT 5
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PPUSH
14560: CALL_OW 69
14564: ST_TO_ADDR
14565: GO 14686
14567: LD_INT 1
14569: DOUBLE
14570: EQUAL
14571: IFTRUE 14575
14573: GO 14614
14575: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
14576: LD_ADDR_VAR 0 2
14580: PUSH
14581: LD_INT 22
14583: PUSH
14584: LD_VAR 0 1
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: LD_INT 21
14595: PUSH
14596: LD_INT 1
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PPUSH
14607: CALL_OW 69
14611: ST_TO_ADDR
14612: GO 14686
14614: LD_INT 2
14616: DOUBLE
14617: EQUAL
14618: IFTRUE 14622
14620: GO 14685
14622: POP
// begin h = false ;
14623: LD_ADDR_VAR 0 4
14627: PUSH
14628: LD_INT 0
14630: ST_TO_ADDR
// for k in heroes [ i ] do
14631: LD_ADDR_VAR 0 3
14635: PUSH
14636: LD_EXP 33
14640: PUSH
14641: LD_VAR 0 1
14645: ARRAY
14646: PUSH
14647: FOR_IN
14648: IFFALSE 14671
// if IsLive ( k ) then
14650: LD_VAR 0 3
14654: PPUSH
14655: CALL_OW 300
14659: IFFALSE 14669
// h = true ;
14661: LD_ADDR_VAR 0 4
14665: PUSH
14666: LD_INT 1
14668: ST_TO_ADDR
14669: GO 14647
14671: POP
14672: POP
// Result := h ;
14673: LD_ADDR_VAR 0 2
14677: PUSH
14678: LD_VAR 0 4
14682: ST_TO_ADDR
// end ; end ;
14683: GO 14686
14685: POP
// end ;
14686: LD_VAR 0 2
14690: RET
// function AlliedSides ( i , j ) ; begin
14691: LD_INT 0
14693: PPUSH
// Result := false ;
14694: LD_ADDR_VAR 0 3
14698: PUSH
14699: LD_INT 0
14701: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
14702: LD_VAR 0 1
14706: PPUSH
14707: LD_VAR 0 2
14711: PPUSH
14712: CALL_OW 81
14716: PUSH
14717: LD_INT 1
14719: EQUAL
14720: PUSH
14721: LD_VAR 0 2
14725: PPUSH
14726: LD_VAR 0 1
14730: PPUSH
14731: CALL_OW 81
14735: PUSH
14736: LD_INT 1
14738: EQUAL
14739: AND
14740: PUSH
14741: LD_VAR 0 1
14745: PPUSH
14746: CALL_OW 83
14750: AND
14751: PUSH
14752: LD_VAR 0 2
14756: PPUSH
14757: CALL_OW 83
14761: AND
14762: IFFALSE 14772
// Result := true ;
14764: LD_ADDR_VAR 0 3
14768: PUSH
14769: LD_INT 1
14771: ST_TO_ADDR
// end ;
14772: LD_VAR 0 3
14776: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
14777: CALL 14281 0 0
14781: PUSH
14782: LD_LOC 30
14786: NOT
14787: AND
14788: IFFALSE 14804
14790: GO 14792
14792: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
14793: LD_ADDR_EXP 60
14797: PUSH
14798: LD_STRING #Player-Ended
14800: PUSH
14801: EMPTY
14802: LIST
14803: ST_TO_ADDR
14804: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
14805: CALL 14281 0 0
14809: PUSH
14810: LD_LOC 30
14814: AND
14815: IFFALSE 14824
14817: GO 14819
14819: DISABLE
// YouLostInMultiplayer ;
14820: CALL_OW 107
14824: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
14825: CALL 14281 0 0
14829: NOT
14830: PUSH
14831: CALL_OW 531
14835: NOT
14836: AND
14837: IFFALSE 14853
14839: GO 14841
14841: DISABLE
// WaitServerStrings = [ #server-wait ] ;
14842: LD_ADDR_EXP 60
14846: PUSH
14847: LD_STRING #server-wait
14849: PUSH
14850: EMPTY
14851: LIST
14852: ST_TO_ADDR
14853: END
// every 100 trigger IAmSpec do
14854: CALL_OW 531
14858: IFFALSE 14874
14860: GO 14862
14862: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
14863: LD_ADDR_EXP 60
14867: PUSH
14868: LD_STRING #Player-IAmSpec
14870: PUSH
14871: EMPTY
14872: LIST
14873: ST_TO_ADDR
14874: END
// every 100 trigger GameEnded and IAmSpec do
14875: LD_LOC 30
14879: PUSH
14880: CALL_OW 531
14884: AND
14885: IFFALSE 14894
14887: GO 14889
14889: DISABLE
// YouLostInMultiplayer ;
14890: CALL_OW 107
14894: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
14895: CALL 14281 0 0
14899: PUSH
14900: LD_LOC 30
14904: NOT
14905: AND
14906: IFFALSE 14922
14908: GO 14910
14910: DISABLE
// WaitServerStrings = [ $player-win ] ;
14911: LD_ADDR_EXP 60
14915: PUSH
14916: LD_STRING $player-win
14918: PUSH
14919: EMPTY
14920: LIST
14921: ST_TO_ADDR
14922: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
14923: CALL 14281 0 0
14927: PUSH
14928: LD_LOC 30
14932: AND
14933: IFFALSE 14957
14935: GO 14937
14937: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
14938: LD_EXP 20
14942: PUSH
14943: LD_OWVAR 2
14947: ARRAY
14948: PPUSH
14949: CALL 13959 0 1
// YouWinInMultiplayer ;
14953: CALL_OW 106
// end ;
14957: END
// every 100 trigger isEditor marked 401 do
14958: LD_OWVAR 84
14962: IFFALSE 14978
14964: GO 14966
14966: DISABLE
// Debug_Strings = [ You won ] ;
14967: LD_ADDR_OWVAR 48
14971: PUSH
14972: LD_STRING You won
14974: PUSH
14975: EMPTY
14976: LIST
14977: ST_TO_ADDR
14978: END
// every 100 trigger isEditor marked 400 do
14979: LD_OWVAR 84
14983: IFFALSE 14999
14985: GO 14987
14987: DISABLE
// Debug_Strings = [ You loss ] ;
14988: LD_ADDR_OWVAR 48
14992: PUSH
14993: LD_STRING You loss
14995: PUSH
14996: EMPTY
14997: LIST
14998: ST_TO_ADDR
14999: END
// every 100 marked 98 do var i , un ;
15000: GO 15002
15002: DISABLE
15003: LD_INT 0
15005: PPUSH
15006: PPUSH
// begin for i = 1 to side_positions do
15007: LD_ADDR_VAR 0 1
15011: PUSH
15012: DOUBLE
15013: LD_INT 1
15015: DEC
15016: ST_TO_ADDR
15017: LD_EXP 19
15021: PUSH
15022: FOR_TO
15023: IFFALSE 15146
// if side_positions [ i ] then
15025: LD_EXP 19
15029: PUSH
15030: LD_VAR 0 1
15034: ARRAY
15035: IFFALSE 15144
// if not HasPower ( i ) and not Defaited [ i ] then
15037: LD_VAR 0 1
15041: PPUSH
15042: CALL 14345 0 1
15046: NOT
15047: PUSH
15048: LD_LOC 29
15052: PUSH
15053: LD_VAR 0 1
15057: ARRAY
15058: NOT
15059: AND
15060: IFFALSE 15144
// begin un = filterallunits ( [ f_side , i ] ) ;
15062: LD_ADDR_VAR 0 2
15066: PUSH
15067: LD_INT 22
15069: PUSH
15070: LD_VAR 0 1
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 69
15083: ST_TO_ADDR
// if un then
15084: LD_VAR 0 2
15088: IFFALSE 15102
// SetSide ( un , 0 ) ;
15090: LD_VAR 0 2
15094: PPUSH
15095: LD_INT 0
15097: PPUSH
15098: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
15102: LD_ADDR_LOC 29
15106: PUSH
15107: LD_LOC 29
15111: PPUSH
15112: LD_VAR 0 1
15116: PPUSH
15117: LD_INT 1
15119: PPUSH
15120: CALL_OW 1
15124: ST_TO_ADDR
// if i = your_side then
15125: LD_VAR 0 1
15129: PUSH
15130: LD_OWVAR 2
15134: EQUAL
15135: IFFALSE 15144
// begin Multiplayer_Loose_Message ;
15137: CALL_OW 521
// enable ( 400 ) ;
15141: LD_INT 400
15143: ENABLE_MARKED
// end ; end ;
15144: GO 15022
15146: POP
15147: POP
// if not Unfoged and defaited [ your_side ] then
15148: LD_LOC 31
15152: NOT
15153: PUSH
15154: LD_LOC 29
15158: PUSH
15159: LD_OWVAR 2
15163: ARRAY
15164: AND
15165: IFFALSE 15171
// Unfog ;
15167: CALL 15357 0 0
// DidGameEnd ;
15171: CALL 15186 0 0
// if not GameEnded then
15175: LD_LOC 30
15179: NOT
15180: IFFALSE 15183
// enable ;
15182: ENABLE
// end ;
15183: PPOPN 2
15185: END
// function DidGameEnd ; var i , k , enemy ; begin
15186: LD_INT 0
15188: PPUSH
15189: PPUSH
15190: PPUSH
15191: PPUSH
// enemy = [ ] ;
15192: LD_ADDR_VAR 0 4
15196: PUSH
15197: EMPTY
15198: ST_TO_ADDR
// for i = 1 to side_positions do
15199: LD_ADDR_VAR 0 2
15203: PUSH
15204: DOUBLE
15205: LD_INT 1
15207: DEC
15208: ST_TO_ADDR
15209: LD_EXP 19
15213: PUSH
15214: FOR_TO
15215: IFFALSE 15319
// if not defaited [ i ] then
15217: LD_LOC 29
15221: PUSH
15222: LD_VAR 0 2
15226: ARRAY
15227: NOT
15228: IFFALSE 15317
// for k = 1 to side_positions do
15230: LD_ADDR_VAR 0 3
15234: PUSH
15235: DOUBLE
15236: LD_INT 1
15238: DEC
15239: ST_TO_ADDR
15240: LD_EXP 19
15244: PUSH
15245: FOR_TO
15246: IFFALSE 15315
// if not defaited [ k ] then
15248: LD_LOC 29
15252: PUSH
15253: LD_VAR 0 3
15257: ARRAY
15258: NOT
15259: IFFALSE 15313
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
15261: LD_VAR 0 2
15265: PPUSH
15266: LD_VAR 0 3
15270: PPUSH
15271: CALL_OW 81
15275: PUSH
15276: LD_INT 2
15278: PUSH
15279: LD_INT 0
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: IN
15286: IFFALSE 15313
// enemy = enemy ^ [ i , k ] ;
15288: LD_ADDR_VAR 0 4
15292: PUSH
15293: LD_VAR 0 4
15297: PUSH
15298: LD_VAR 0 2
15302: PUSH
15303: LD_VAR 0 3
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: ADD
15312: ST_TO_ADDR
15313: GO 15245
15315: POP
15316: POP
15317: GO 15214
15319: POP
15320: POP
// if not enemy then
15321: LD_VAR 0 4
15325: NOT
15326: IFFALSE 15352
// begin GameEnded = true ;
15328: LD_ADDR_LOC 30
15332: PUSH
15333: LD_INT 1
15335: ST_TO_ADDR
// if not defaited [ your_side ] then
15336: LD_LOC 29
15340: PUSH
15341: LD_OWVAR 2
15345: ARRAY
15346: NOT
15347: IFFALSE 15352
// enable ( 401 ) ;
15349: LD_INT 401
15351: ENABLE_MARKED
// end ; end ;
15352: LD_VAR 0 1
15356: RET
// function unfog ; var k , friends ; begin
15357: LD_INT 0
15359: PPUSH
15360: PPUSH
15361: PPUSH
// for k = 1 to side_positions do
15362: LD_ADDR_VAR 0 2
15366: PUSH
15367: DOUBLE
15368: LD_INT 1
15370: DEC
15371: ST_TO_ADDR
15372: LD_EXP 19
15376: PUSH
15377: FOR_TO
15378: IFFALSE 15434
// if not defaited [ k ] then
15380: LD_LOC 29
15384: PUSH
15385: LD_VAR 0 2
15389: ARRAY
15390: NOT
15391: IFFALSE 15432
// if GetAttitude ( your_side , k ) in [ att_friend ] then
15393: LD_OWVAR 2
15397: PPUSH
15398: LD_VAR 0 2
15402: PPUSH
15403: CALL_OW 81
15407: PUSH
15408: LD_INT 1
15410: PUSH
15411: EMPTY
15412: LIST
15413: IN
15414: IFFALSE 15432
// friends = friends ^ k ;
15416: LD_ADDR_VAR 0 3
15420: PUSH
15421: LD_VAR 0 3
15425: PUSH
15426: LD_VAR 0 2
15430: ADD
15431: ST_TO_ADDR
15432: GO 15377
15434: POP
15435: POP
// if not friends then
15436: LD_VAR 0 3
15440: NOT
15441: IFFALSE 15458
// begin fogoff ( true ) ;
15443: LD_INT 1
15445: PPUSH
15446: CALL_OW 344
// unfoged = true ;
15450: LD_ADDR_LOC 31
15454: PUSH
15455: LD_INT 1
15457: ST_TO_ADDR
// end ; end ;
15458: LD_VAR 0 1
15462: RET
// export function MakeGameEnd ; begin
15463: LD_INT 0
15465: PPUSH
// fogoff ( true ) ;
15466: LD_INT 1
15468: PPUSH
15469: CALL_OW 344
// unfoged = true ;
15473: LD_ADDR_LOC 31
15477: PUSH
15478: LD_INT 1
15480: ST_TO_ADDR
// wait ( 0 0$5 ) ;
15481: LD_INT 175
15483: PPUSH
15484: CALL_OW 67
// GameEnded = true ;
15488: LD_ADDR_LOC 30
15492: PUSH
15493: LD_INT 1
15495: ST_TO_ADDR
// end ;
15496: LD_VAR 0 1
15500: RET
// export function GetGameEnded ; begin
15501: LD_INT 0
15503: PPUSH
// result = GameEnded ;
15504: LD_ADDR_VAR 0 1
15508: PUSH
15509: LD_LOC 30
15513: ST_TO_ADDR
// end ; end_of_file
15514: LD_VAR 0 1
15518: RET
// export function SetMpTechs ( ) ; var side , i ; begin
15519: LD_INT 0
15521: PPUSH
15522: PPUSH
15523: PPUSH
// for side = 1 to 8 do
15524: LD_ADDR_VAR 0 2
15528: PUSH
15529: DOUBLE
15530: LD_INT 1
15532: DEC
15533: ST_TO_ADDR
15534: LD_INT 8
15536: PUSH
15537: FOR_TO
15538: IFFALSE 15659
// begin for i = 1 to 72 do
15540: LD_ADDR_VAR 0 3
15544: PUSH
15545: DOUBLE
15546: LD_INT 1
15548: DEC
15549: ST_TO_ADDR
15550: LD_INT 72
15552: PUSH
15553: FOR_TO
15554: IFFALSE 15585
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15556: LD_VAR 0 3
15560: PPUSH
15561: LD_VAR 0 2
15565: PPUSH
15566: LD_INT 0
15568: PPUSH
15569: LD_VAR 0 3
15573: PPUSH
15574: CALL_OW 565
15578: PPUSH
15579: CALL_OW 322
15583: GO 15553
15585: POP
15586: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15587: LD_INT 73
15589: PPUSH
15590: LD_VAR 0 2
15594: PPUSH
15595: LD_INT 0
15597: PPUSH
15598: LD_INT 25
15600: PPUSH
15601: CALL_OW 565
15605: PPUSH
15606: CALL_OW 322
// for i = 0 to 40 do
15610: LD_ADDR_VAR 0 3
15614: PUSH
15615: DOUBLE
15616: LD_INT 0
15618: DEC
15619: ST_TO_ADDR
15620: LD_INT 40
15622: PUSH
15623: FOR_TO
15624: IFFALSE 15655
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15626: LD_VAR 0 3
15630: PPUSH
15631: LD_VAR 0 2
15635: PPUSH
15636: LD_INT 1
15638: PPUSH
15639: LD_VAR 0 3
15643: PPUSH
15644: CALL_OW 565
15648: PPUSH
15649: CALL_OW 324
15653: GO 15623
15655: POP
15656: POP
// end ;
15657: GO 15537
15659: POP
15660: POP
// end ;
15661: LD_VAR 0 1
15665: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15666: LD_INT 0
15668: PPUSH
15669: PPUSH
15670: PPUSH
// for side = 1 to 8 do
15671: LD_ADDR_VAR 0 3
15675: PUSH
15676: DOUBLE
15677: LD_INT 1
15679: DEC
15680: ST_TO_ADDR
15681: LD_INT 8
15683: PUSH
15684: FOR_TO
15685: IFFALSE 19681
// begin for i = 1 to 73 do
15687: LD_ADDR_VAR 0 4
15691: PUSH
15692: DOUBLE
15693: LD_INT 1
15695: DEC
15696: ST_TO_ADDR
15697: LD_INT 73
15699: PUSH
15700: FOR_TO
15701: IFFALSE 15722
// SetTech ( i , side , state_disabled ) ;
15703: LD_VAR 0 4
15707: PPUSH
15708: LD_VAR 0 3
15712: PPUSH
15713: LD_INT 0
15715: PPUSH
15716: CALL_OW 322
15720: GO 15700
15722: POP
15723: POP
// for i = 0 to 40 do
15724: LD_ADDR_VAR 0 4
15728: PUSH
15729: DOUBLE
15730: LD_INT 0
15732: DEC
15733: ST_TO_ADDR
15734: LD_INT 40
15736: PUSH
15737: FOR_TO
15738: IFFALSE 15759
// SetRestrict ( i , side , false ) ;
15740: LD_VAR 0 4
15744: PPUSH
15745: LD_VAR 0 3
15749: PPUSH
15750: LD_INT 0
15752: PPUSH
15753: CALL_OW 324
15757: GO 15737
15759: POP
15760: POP
// case level of 1 :
15761: LD_VAR 0 1
15765: PUSH
15766: LD_INT 1
15768: DOUBLE
15769: EQUAL
15770: IFTRUE 15774
15772: GO 15927
15774: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15775: LD_INT 35
15777: PPUSH
15778: LD_VAR 0 3
15782: PPUSH
15783: LD_INT 1
15785: PPUSH
15786: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15790: LD_INT 45
15792: PPUSH
15793: LD_VAR 0 3
15797: PPUSH
15798: LD_INT 1
15800: PPUSH
15801: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15805: LD_INT 46
15807: PPUSH
15808: LD_VAR 0 3
15812: PPUSH
15813: LD_INT 1
15815: PPUSH
15816: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15820: LD_INT 47
15822: PPUSH
15823: LD_VAR 0 3
15827: PPUSH
15828: LD_INT 1
15830: PPUSH
15831: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15835: LD_INT 0
15837: PPUSH
15838: LD_VAR 0 3
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15850: LD_INT 2
15852: PPUSH
15853: LD_VAR 0 3
15857: PPUSH
15858: LD_INT 1
15860: PPUSH
15861: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15865: LD_INT 4
15867: PPUSH
15868: LD_VAR 0 3
15872: PPUSH
15873: LD_INT 1
15875: PPUSH
15876: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15880: LD_INT 6
15882: PPUSH
15883: LD_VAR 0 3
15887: PPUSH
15888: LD_INT 1
15890: PPUSH
15891: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15895: LD_INT 29
15897: PPUSH
15898: LD_VAR 0 3
15902: PPUSH
15903: LD_INT 1
15905: PPUSH
15906: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15910: LD_INT 31
15912: PPUSH
15913: LD_VAR 0 3
15917: PPUSH
15918: LD_INT 1
15920: PPUSH
15921: CALL_OW 324
// end ; 2 :
15925: GO 19679
15927: LD_INT 2
15929: DOUBLE
15930: EQUAL
15931: IFTRUE 15935
15933: GO 16133
15935: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15936: LD_INT 35
15938: PPUSH
15939: LD_VAR 0 3
15943: PPUSH
15944: LD_INT 1
15946: PPUSH
15947: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15951: LD_INT 45
15953: PPUSH
15954: LD_VAR 0 3
15958: PPUSH
15959: LD_INT 1
15961: PPUSH
15962: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15966: LD_INT 46
15968: PPUSH
15969: LD_VAR 0 3
15973: PPUSH
15974: LD_INT 1
15976: PPUSH
15977: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15981: LD_INT 47
15983: PPUSH
15984: LD_VAR 0 3
15988: PPUSH
15989: LD_INT 1
15991: PPUSH
15992: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15996: LD_INT 1
15998: PPUSH
15999: LD_VAR 0 3
16003: PPUSH
16004: LD_INT 1
16006: PPUSH
16007: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16011: LD_INT 2
16013: PPUSH
16014: LD_VAR 0 3
16018: PPUSH
16019: LD_INT 1
16021: PPUSH
16022: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16026: LD_INT 11
16028: PPUSH
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16041: LD_INT 0
16043: PPUSH
16044: LD_VAR 0 3
16048: PPUSH
16049: LD_INT 1
16051: PPUSH
16052: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16056: LD_INT 2
16058: PPUSH
16059: LD_VAR 0 3
16063: PPUSH
16064: LD_INT 1
16066: PPUSH
16067: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16071: LD_INT 4
16073: PPUSH
16074: LD_VAR 0 3
16078: PPUSH
16079: LD_INT 1
16081: PPUSH
16082: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16086: LD_INT 6
16088: PPUSH
16089: LD_VAR 0 3
16093: PPUSH
16094: LD_INT 1
16096: PPUSH
16097: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16101: LD_INT 29
16103: PPUSH
16104: LD_VAR 0 3
16108: PPUSH
16109: LD_INT 1
16111: PPUSH
16112: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16116: LD_INT 31
16118: PPUSH
16119: LD_VAR 0 3
16123: PPUSH
16124: LD_INT 1
16126: PPUSH
16127: CALL_OW 324
// end ; 3 :
16131: GO 19679
16133: LD_INT 3
16135: DOUBLE
16136: EQUAL
16137: IFTRUE 16141
16139: GO 16594
16141: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16142: LD_INT 35
16144: PPUSH
16145: LD_VAR 0 3
16149: PPUSH
16150: LD_INT 1
16152: PPUSH
16153: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16157: LD_INT 45
16159: PPUSH
16160: LD_VAR 0 3
16164: PPUSH
16165: LD_INT 1
16167: PPUSH
16168: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16172: LD_INT 46
16174: PPUSH
16175: LD_VAR 0 3
16179: PPUSH
16180: LD_INT 1
16182: PPUSH
16183: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16187: LD_INT 47
16189: PPUSH
16190: LD_VAR 0 3
16194: PPUSH
16195: LD_INT 1
16197: PPUSH
16198: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16202: LD_INT 1
16204: PPUSH
16205: LD_VAR 0 3
16209: PPUSH
16210: LD_INT 1
16212: PPUSH
16213: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16217: LD_INT 2
16219: PPUSH
16220: LD_VAR 0 3
16224: PPUSH
16225: LD_INT 1
16227: PPUSH
16228: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16232: LD_INT 11
16234: PPUSH
16235: LD_VAR 0 3
16239: PPUSH
16240: LD_INT 1
16242: PPUSH
16243: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16247: LD_INT 48
16249: PPUSH
16250: LD_VAR 0 3
16254: PPUSH
16255: LD_INT 1
16257: PPUSH
16258: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16262: LD_INT 69
16264: PPUSH
16265: LD_VAR 0 3
16269: PPUSH
16270: LD_INT 1
16272: PPUSH
16273: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16277: LD_INT 39
16279: PPUSH
16280: LD_VAR 0 3
16284: PPUSH
16285: LD_INT 1
16287: PPUSH
16288: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16292: LD_INT 43
16294: PPUSH
16295: LD_VAR 0 3
16299: PPUSH
16300: LD_INT 1
16302: PPUSH
16303: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16307: LD_INT 51
16309: PPUSH
16310: LD_VAR 0 3
16314: PPUSH
16315: LD_INT 1
16317: PPUSH
16318: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16322: LD_INT 6
16324: PPUSH
16325: LD_VAR 0 3
16329: PPUSH
16330: LD_INT 1
16332: PPUSH
16333: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16337: LD_INT 0
16339: PPUSH
16340: LD_VAR 0 3
16344: PPUSH
16345: LD_INT 1
16347: PPUSH
16348: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16352: LD_INT 2
16354: PPUSH
16355: LD_VAR 0 3
16359: PPUSH
16360: LD_INT 1
16362: PPUSH
16363: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16367: LD_INT 3
16369: PPUSH
16370: LD_VAR 0 3
16374: PPUSH
16375: LD_INT 1
16377: PPUSH
16378: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16382: LD_INT 4
16384: PPUSH
16385: LD_VAR 0 3
16389: PPUSH
16390: LD_INT 1
16392: PPUSH
16393: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16397: LD_INT 6
16399: PPUSH
16400: LD_VAR 0 3
16404: PPUSH
16405: LD_INT 1
16407: PPUSH
16408: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16412: LD_INT 7
16414: PPUSH
16415: LD_VAR 0 3
16419: PPUSH
16420: LD_INT 1
16422: PPUSH
16423: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16427: LD_INT 8
16429: PPUSH
16430: LD_VAR 0 3
16434: PPUSH
16435: LD_INT 1
16437: PPUSH
16438: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16442: LD_INT 10
16444: PPUSH
16445: LD_VAR 0 3
16449: PPUSH
16450: LD_INT 1
16452: PPUSH
16453: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16457: LD_INT 15
16459: PPUSH
16460: LD_VAR 0 3
16464: PPUSH
16465: LD_INT 1
16467: PPUSH
16468: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16472: LD_INT 16
16474: PPUSH
16475: LD_VAR 0 3
16479: PPUSH
16480: LD_INT 1
16482: PPUSH
16483: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16487: LD_INT 17
16489: PPUSH
16490: LD_VAR 0 3
16494: PPUSH
16495: LD_INT 1
16497: PPUSH
16498: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16502: LD_INT 20
16504: PPUSH
16505: LD_VAR 0 3
16509: PPUSH
16510: LD_INT 1
16512: PPUSH
16513: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16517: LD_INT 26
16519: PPUSH
16520: LD_VAR 0 3
16524: PPUSH
16525: LD_INT 1
16527: PPUSH
16528: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16532: LD_INT 27
16534: PPUSH
16535: LD_VAR 0 3
16539: PPUSH
16540: LD_INT 1
16542: PPUSH
16543: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16547: LD_INT 29
16549: PPUSH
16550: LD_VAR 0 3
16554: PPUSH
16555: LD_INT 1
16557: PPUSH
16558: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16562: LD_INT 31
16564: PPUSH
16565: LD_VAR 0 3
16569: PPUSH
16570: LD_INT 1
16572: PPUSH
16573: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16577: LD_INT 32
16579: PPUSH
16580: LD_VAR 0 3
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: CALL_OW 324
// end ; 4 :
16592: GO 19679
16594: LD_INT 4
16596: DOUBLE
16597: EQUAL
16598: IFTRUE 16602
16600: GO 17550
16602: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16603: LD_INT 35
16605: PPUSH
16606: LD_VAR 0 3
16610: PPUSH
16611: LD_INT 1
16613: PPUSH
16614: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16618: LD_INT 45
16620: PPUSH
16621: LD_VAR 0 3
16625: PPUSH
16626: LD_INT 1
16628: PPUSH
16629: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16633: LD_INT 46
16635: PPUSH
16636: LD_VAR 0 3
16640: PPUSH
16641: LD_INT 1
16643: PPUSH
16644: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16648: LD_INT 47
16650: PPUSH
16651: LD_VAR 0 3
16655: PPUSH
16656: LD_INT 1
16658: PPUSH
16659: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16663: LD_INT 1
16665: PPUSH
16666: LD_VAR 0 3
16670: PPUSH
16671: LD_INT 1
16673: PPUSH
16674: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16678: LD_INT 2
16680: PPUSH
16681: LD_VAR 0 3
16685: PPUSH
16686: LD_INT 1
16688: PPUSH
16689: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16693: LD_INT 11
16695: PPUSH
16696: LD_VAR 0 3
16700: PPUSH
16701: LD_INT 1
16703: PPUSH
16704: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16708: LD_INT 20
16710: PPUSH
16711: LD_VAR 0 3
16715: PPUSH
16716: LD_INT 1
16718: PPUSH
16719: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16723: LD_INT 48
16725: PPUSH
16726: LD_VAR 0 3
16730: PPUSH
16731: LD_INT 1
16733: PPUSH
16734: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16738: LD_INT 49
16740: PPUSH
16741: LD_VAR 0 3
16745: PPUSH
16746: LD_INT 1
16748: PPUSH
16749: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16753: LD_INT 69
16755: PPUSH
16756: LD_VAR 0 3
16760: PPUSH
16761: LD_INT 1
16763: PPUSH
16764: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16768: LD_INT 39
16770: PPUSH
16771: LD_VAR 0 3
16775: PPUSH
16776: LD_INT 1
16778: PPUSH
16779: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16783: LD_INT 34
16785: PPUSH
16786: LD_VAR 0 3
16790: PPUSH
16791: LD_INT 1
16793: PPUSH
16794: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16798: LD_INT 42
16800: PPUSH
16801: LD_VAR 0 3
16805: PPUSH
16806: LD_INT 1
16808: PPUSH
16809: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16813: LD_INT 44
16815: PPUSH
16816: LD_VAR 0 3
16820: PPUSH
16821: LD_INT 1
16823: PPUSH
16824: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16828: LD_INT 41
16830: PPUSH
16831: LD_VAR 0 3
16835: PPUSH
16836: LD_INT 1
16838: PPUSH
16839: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16843: LD_INT 43
16845: PPUSH
16846: LD_VAR 0 3
16850: PPUSH
16851: LD_INT 1
16853: PPUSH
16854: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16858: LD_INT 70
16860: PPUSH
16861: LD_VAR 0 3
16865: PPUSH
16866: LD_INT 1
16868: PPUSH
16869: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16873: LD_INT 51
16875: PPUSH
16876: LD_VAR 0 3
16880: PPUSH
16881: LD_INT 1
16883: PPUSH
16884: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16888: LD_INT 52
16890: PPUSH
16891: LD_VAR 0 3
16895: PPUSH
16896: LD_INT 1
16898: PPUSH
16899: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16903: LD_INT 6
16905: PPUSH
16906: LD_VAR 0 3
16910: PPUSH
16911: LD_INT 1
16913: PPUSH
16914: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16918: LD_INT 15
16920: PPUSH
16921: LD_VAR 0 3
16925: PPUSH
16926: LD_INT 1
16928: PPUSH
16929: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16933: LD_INT 7
16935: PPUSH
16936: LD_VAR 0 3
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16948: LD_INT 12
16950: PPUSH
16951: LD_VAR 0 3
16955: PPUSH
16956: LD_INT 1
16958: PPUSH
16959: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16963: LD_INT 18
16965: PPUSH
16966: LD_VAR 0 3
16970: PPUSH
16971: LD_INT 1
16973: PPUSH
16974: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16978: LD_INT 60
16980: PPUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 1
16988: PPUSH
16989: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16993: LD_INT 9
16995: PPUSH
16996: LD_VAR 0 3
17000: PPUSH
17001: LD_INT 1
17003: PPUSH
17004: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17008: LD_INT 30
17010: PPUSH
17011: LD_VAR 0 3
17015: PPUSH
17016: LD_INT 1
17018: PPUSH
17019: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17023: LD_INT 37
17025: PPUSH
17026: LD_VAR 0 3
17030: PPUSH
17031: LD_INT 1
17033: PPUSH
17034: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17038: LD_INT 5
17040: PPUSH
17041: LD_VAR 0 3
17045: PPUSH
17046: LD_INT 1
17048: PPUSH
17049: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17053: LD_INT 66
17055: PPUSH
17056: LD_VAR 0 3
17060: PPUSH
17061: LD_INT 1
17063: PPUSH
17064: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17068: LD_INT 21
17070: PPUSH
17071: LD_VAR 0 3
17075: PPUSH
17076: LD_INT 1
17078: PPUSH
17079: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17083: LD_INT 22
17085: PPUSH
17086: LD_VAR 0 3
17090: PPUSH
17091: LD_INT 1
17093: PPUSH
17094: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17098: LD_INT 54
17100: PPUSH
17101: LD_VAR 0 3
17105: PPUSH
17106: LD_INT 1
17108: PPUSH
17109: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17113: LD_INT 0
17115: PPUSH
17116: LD_VAR 0 3
17120: PPUSH
17121: LD_INT 1
17123: PPUSH
17124: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17128: LD_INT 1
17130: PPUSH
17131: LD_VAR 0 3
17135: PPUSH
17136: LD_INT 1
17138: PPUSH
17139: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17143: LD_INT 2
17145: PPUSH
17146: LD_VAR 0 3
17150: PPUSH
17151: LD_INT 1
17153: PPUSH
17154: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17158: LD_INT 3
17160: PPUSH
17161: LD_VAR 0 3
17165: PPUSH
17166: LD_INT 1
17168: PPUSH
17169: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17173: LD_INT 4
17175: PPUSH
17176: LD_VAR 0 3
17180: PPUSH
17181: LD_INT 1
17183: PPUSH
17184: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17188: LD_INT 5
17190: PPUSH
17191: LD_VAR 0 3
17195: PPUSH
17196: LD_INT 1
17198: PPUSH
17199: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17203: LD_INT 6
17205: PPUSH
17206: LD_VAR 0 3
17210: PPUSH
17211: LD_INT 1
17213: PPUSH
17214: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17218: LD_INT 7
17220: PPUSH
17221: LD_VAR 0 3
17225: PPUSH
17226: LD_INT 1
17228: PPUSH
17229: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17233: LD_INT 8
17235: PPUSH
17236: LD_VAR 0 3
17240: PPUSH
17241: LD_INT 1
17243: PPUSH
17244: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17248: LD_INT 10
17250: PPUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_INT 1
17258: PPUSH
17259: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17263: LD_INT 11
17265: PPUSH
17266: LD_VAR 0 3
17270: PPUSH
17271: LD_INT 1
17273: PPUSH
17274: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17278: LD_INT 12
17280: PPUSH
17281: LD_VAR 0 3
17285: PPUSH
17286: LD_INT 1
17288: PPUSH
17289: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17293: LD_INT 13
17295: PPUSH
17296: LD_VAR 0 3
17300: PPUSH
17301: LD_INT 1
17303: PPUSH
17304: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17308: LD_INT 14
17310: PPUSH
17311: LD_VAR 0 3
17315: PPUSH
17316: LD_INT 1
17318: PPUSH
17319: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17323: LD_INT 15
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: LD_INT 1
17333: PPUSH
17334: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17338: LD_INT 16
17340: PPUSH
17341: LD_VAR 0 3
17345: PPUSH
17346: LD_INT 1
17348: PPUSH
17349: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17353: LD_INT 17
17355: PPUSH
17356: LD_VAR 0 3
17360: PPUSH
17361: LD_INT 1
17363: PPUSH
17364: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17368: LD_INT 19
17370: PPUSH
17371: LD_VAR 0 3
17375: PPUSH
17376: LD_INT 1
17378: PPUSH
17379: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17383: LD_INT 20
17385: PPUSH
17386: LD_VAR 0 3
17390: PPUSH
17391: LD_INT 1
17393: PPUSH
17394: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17398: LD_INT 21
17400: PPUSH
17401: LD_VAR 0 3
17405: PPUSH
17406: LD_INT 1
17408: PPUSH
17409: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17413: LD_INT 23
17415: PPUSH
17416: LD_VAR 0 3
17420: PPUSH
17421: LD_INT 1
17423: PPUSH
17424: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17428: LD_INT 26
17430: PPUSH
17431: LD_VAR 0 3
17435: PPUSH
17436: LD_INT 1
17438: PPUSH
17439: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17443: LD_INT 27
17445: PPUSH
17446: LD_VAR 0 3
17450: PPUSH
17451: LD_INT 1
17453: PPUSH
17454: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17458: LD_INT 28
17460: PPUSH
17461: LD_VAR 0 3
17465: PPUSH
17466: LD_INT 1
17468: PPUSH
17469: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17473: LD_INT 29
17475: PPUSH
17476: LD_VAR 0 3
17480: PPUSH
17481: LD_INT 1
17483: PPUSH
17484: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17488: LD_INT 30
17490: PPUSH
17491: LD_VAR 0 3
17495: PPUSH
17496: LD_INT 1
17498: PPUSH
17499: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17503: LD_INT 31
17505: PPUSH
17506: LD_VAR 0 3
17510: PPUSH
17511: LD_INT 1
17513: PPUSH
17514: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17518: LD_INT 32
17520: PPUSH
17521: LD_VAR 0 3
17525: PPUSH
17526: LD_INT 1
17528: PPUSH
17529: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17533: LD_INT 36
17535: PPUSH
17536: LD_VAR 0 3
17540: PPUSH
17541: LD_INT 1
17543: PPUSH
17544: CALL_OW 324
// end ; 5 :
17548: GO 19679
17550: LD_INT 5
17552: DOUBLE
17553: EQUAL
17554: IFTRUE 17558
17556: GO 18671
17558: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17559: LD_INT 35
17561: PPUSH
17562: LD_VAR 0 3
17566: PPUSH
17567: LD_INT 1
17569: PPUSH
17570: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17574: LD_INT 45
17576: PPUSH
17577: LD_VAR 0 3
17581: PPUSH
17582: LD_INT 1
17584: PPUSH
17585: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17589: LD_INT 46
17591: PPUSH
17592: LD_VAR 0 3
17596: PPUSH
17597: LD_INT 1
17599: PPUSH
17600: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17604: LD_INT 47
17606: PPUSH
17607: LD_VAR 0 3
17611: PPUSH
17612: LD_INT 1
17614: PPUSH
17615: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17619: LD_INT 1
17621: PPUSH
17622: LD_VAR 0 3
17626: PPUSH
17627: LD_INT 1
17629: PPUSH
17630: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17634: LD_INT 2
17636: PPUSH
17637: LD_VAR 0 3
17641: PPUSH
17642: LD_INT 1
17644: PPUSH
17645: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17649: LD_INT 11
17651: PPUSH
17652: LD_VAR 0 3
17656: PPUSH
17657: LD_INT 1
17659: PPUSH
17660: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17664: LD_INT 20
17666: PPUSH
17667: LD_VAR 0 3
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17679: LD_INT 48
17681: PPUSH
17682: LD_VAR 0 3
17686: PPUSH
17687: LD_INT 1
17689: PPUSH
17690: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17694: LD_INT 49
17696: PPUSH
17697: LD_VAR 0 3
17701: PPUSH
17702: LD_INT 1
17704: PPUSH
17705: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17709: LD_INT 69
17711: PPUSH
17712: LD_VAR 0 3
17716: PPUSH
17717: LD_INT 1
17719: PPUSH
17720: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17724: LD_INT 39
17726: PPUSH
17727: LD_VAR 0 3
17731: PPUSH
17732: LD_INT 1
17734: PPUSH
17735: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17739: LD_INT 34
17741: PPUSH
17742: LD_VAR 0 3
17746: PPUSH
17747: LD_INT 1
17749: PPUSH
17750: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17754: LD_INT 42
17756: PPUSH
17757: LD_VAR 0 3
17761: PPUSH
17762: LD_INT 1
17764: PPUSH
17765: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17769: LD_INT 44
17771: PPUSH
17772: LD_VAR 0 3
17776: PPUSH
17777: LD_INT 1
17779: PPUSH
17780: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17784: LD_INT 41
17786: PPUSH
17787: LD_VAR 0 3
17791: PPUSH
17792: LD_INT 1
17794: PPUSH
17795: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17799: LD_INT 40
17801: PPUSH
17802: LD_VAR 0 3
17806: PPUSH
17807: LD_INT 1
17809: PPUSH
17810: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17814: LD_INT 43
17816: PPUSH
17817: LD_VAR 0 3
17821: PPUSH
17822: LD_INT 1
17824: PPUSH
17825: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17829: LD_INT 70
17831: PPUSH
17832: LD_VAR 0 3
17836: PPUSH
17837: LD_INT 1
17839: PPUSH
17840: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17844: LD_INT 51
17846: PPUSH
17847: LD_VAR 0 3
17851: PPUSH
17852: LD_INT 1
17854: PPUSH
17855: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17859: LD_INT 52
17861: PPUSH
17862: LD_VAR 0 3
17866: PPUSH
17867: LD_INT 1
17869: PPUSH
17870: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17874: LD_INT 6
17876: PPUSH
17877: LD_VAR 0 3
17881: PPUSH
17882: LD_INT 1
17884: PPUSH
17885: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17889: LD_INT 15
17891: PPUSH
17892: LD_VAR 0 3
17896: PPUSH
17897: LD_INT 1
17899: PPUSH
17900: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17904: LD_INT 7
17906: PPUSH
17907: LD_VAR 0 3
17911: PPUSH
17912: LD_INT 1
17914: PPUSH
17915: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17919: LD_INT 12
17921: PPUSH
17922: LD_VAR 0 3
17926: PPUSH
17927: LD_INT 1
17929: PPUSH
17930: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17934: LD_INT 17
17936: PPUSH
17937: LD_VAR 0 3
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17949: LD_INT 18
17951: PPUSH
17952: LD_VAR 0 3
17956: PPUSH
17957: LD_INT 1
17959: PPUSH
17960: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17964: LD_INT 60
17966: PPUSH
17967: LD_VAR 0 3
17971: PPUSH
17972: LD_INT 1
17974: PPUSH
17975: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17979: LD_INT 32
17981: PPUSH
17982: LD_VAR 0 3
17986: PPUSH
17987: LD_INT 1
17989: PPUSH
17990: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17994: LD_INT 9
17996: PPUSH
17997: LD_VAR 0 3
18001: PPUSH
18002: LD_INT 1
18004: PPUSH
18005: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18009: LD_INT 57
18011: PPUSH
18012: LD_VAR 0 3
18016: PPUSH
18017: LD_INT 1
18019: PPUSH
18020: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18024: LD_INT 30
18026: PPUSH
18027: LD_VAR 0 3
18031: PPUSH
18032: LD_INT 1
18034: PPUSH
18035: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18039: LD_INT 37
18041: PPUSH
18042: LD_VAR 0 3
18046: PPUSH
18047: LD_INT 1
18049: PPUSH
18050: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18054: LD_INT 63
18056: PPUSH
18057: LD_VAR 0 3
18061: PPUSH
18062: LD_INT 1
18064: PPUSH
18065: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18069: LD_INT 3
18071: PPUSH
18072: LD_VAR 0 3
18076: PPUSH
18077: LD_INT 1
18079: PPUSH
18080: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18084: LD_INT 4
18086: PPUSH
18087: LD_VAR 0 3
18091: PPUSH
18092: LD_INT 1
18094: PPUSH
18095: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18099: LD_INT 5
18101: PPUSH
18102: LD_VAR 0 3
18106: PPUSH
18107: LD_INT 1
18109: PPUSH
18110: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18114: LD_INT 66
18116: PPUSH
18117: LD_VAR 0 3
18121: PPUSH
18122: LD_INT 1
18124: PPUSH
18125: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18129: LD_INT 21
18131: PPUSH
18132: LD_VAR 0 3
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18144: LD_INT 22
18146: PPUSH
18147: LD_VAR 0 3
18151: PPUSH
18152: LD_INT 1
18154: PPUSH
18155: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18159: LD_INT 19
18161: PPUSH
18162: LD_VAR 0 3
18166: PPUSH
18167: LD_INT 1
18169: PPUSH
18170: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18174: LD_INT 54
18176: PPUSH
18177: LD_VAR 0 3
18181: PPUSH
18182: LD_INT 1
18184: PPUSH
18185: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18189: LD_INT 55
18191: PPUSH
18192: LD_VAR 0 3
18196: PPUSH
18197: LD_INT 1
18199: PPUSH
18200: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18204: LD_INT 0
18206: PPUSH
18207: LD_VAR 0 3
18211: PPUSH
18212: LD_INT 1
18214: PPUSH
18215: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18219: LD_INT 1
18221: PPUSH
18222: LD_VAR 0 3
18226: PPUSH
18227: LD_INT 1
18229: PPUSH
18230: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18234: LD_INT 2
18236: PPUSH
18237: LD_VAR 0 3
18241: PPUSH
18242: LD_INT 1
18244: PPUSH
18245: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18249: LD_INT 3
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: LD_INT 1
18259: PPUSH
18260: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18264: LD_INT 4
18266: PPUSH
18267: LD_VAR 0 3
18271: PPUSH
18272: LD_INT 1
18274: PPUSH
18275: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18279: LD_INT 5
18281: PPUSH
18282: LD_VAR 0 3
18286: PPUSH
18287: LD_INT 1
18289: PPUSH
18290: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18294: LD_INT 6
18296: PPUSH
18297: LD_VAR 0 3
18301: PPUSH
18302: LD_INT 1
18304: PPUSH
18305: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18309: LD_INT 7
18311: PPUSH
18312: LD_VAR 0 3
18316: PPUSH
18317: LD_INT 1
18319: PPUSH
18320: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18324: LD_INT 8
18326: PPUSH
18327: LD_VAR 0 3
18331: PPUSH
18332: LD_INT 1
18334: PPUSH
18335: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18339: LD_INT 10
18341: PPUSH
18342: LD_VAR 0 3
18346: PPUSH
18347: LD_INT 1
18349: PPUSH
18350: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18354: LD_INT 11
18356: PPUSH
18357: LD_VAR 0 3
18361: PPUSH
18362: LD_INT 1
18364: PPUSH
18365: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18369: LD_INT 12
18371: PPUSH
18372: LD_VAR 0 3
18376: PPUSH
18377: LD_INT 1
18379: PPUSH
18380: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18384: LD_INT 13
18386: PPUSH
18387: LD_VAR 0 3
18391: PPUSH
18392: LD_INT 1
18394: PPUSH
18395: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18399: LD_INT 14
18401: PPUSH
18402: LD_VAR 0 3
18406: PPUSH
18407: LD_INT 1
18409: PPUSH
18410: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18414: LD_INT 15
18416: PPUSH
18417: LD_VAR 0 3
18421: PPUSH
18422: LD_INT 1
18424: PPUSH
18425: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18429: LD_INT 16
18431: PPUSH
18432: LD_VAR 0 3
18436: PPUSH
18437: LD_INT 1
18439: PPUSH
18440: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18444: LD_INT 17
18446: PPUSH
18447: LD_VAR 0 3
18451: PPUSH
18452: LD_INT 1
18454: PPUSH
18455: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18459: LD_INT 18
18461: PPUSH
18462: LD_VAR 0 3
18466: PPUSH
18467: LD_INT 1
18469: PPUSH
18470: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18474: LD_INT 19
18476: PPUSH
18477: LD_VAR 0 3
18481: PPUSH
18482: LD_INT 1
18484: PPUSH
18485: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18489: LD_INT 20
18491: PPUSH
18492: LD_VAR 0 3
18496: PPUSH
18497: LD_INT 1
18499: PPUSH
18500: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18504: LD_INT 21
18506: PPUSH
18507: LD_VAR 0 3
18511: PPUSH
18512: LD_INT 1
18514: PPUSH
18515: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18519: LD_INT 23
18521: PPUSH
18522: LD_VAR 0 3
18526: PPUSH
18527: LD_INT 1
18529: PPUSH
18530: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18534: LD_INT 26
18536: PPUSH
18537: LD_VAR 0 3
18541: PPUSH
18542: LD_INT 1
18544: PPUSH
18545: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18549: LD_INT 27
18551: PPUSH
18552: LD_VAR 0 3
18556: PPUSH
18557: LD_INT 1
18559: PPUSH
18560: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18564: LD_INT 28
18566: PPUSH
18567: LD_VAR 0 3
18571: PPUSH
18572: LD_INT 1
18574: PPUSH
18575: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18579: LD_INT 29
18581: PPUSH
18582: LD_VAR 0 3
18586: PPUSH
18587: LD_INT 1
18589: PPUSH
18590: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18594: LD_INT 30
18596: PPUSH
18597: LD_VAR 0 3
18601: PPUSH
18602: LD_INT 1
18604: PPUSH
18605: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18609: LD_INT 31
18611: PPUSH
18612: LD_VAR 0 3
18616: PPUSH
18617: LD_INT 1
18619: PPUSH
18620: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18624: LD_INT 32
18626: PPUSH
18627: LD_VAR 0 3
18631: PPUSH
18632: LD_INT 1
18634: PPUSH
18635: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18639: LD_INT 33
18641: PPUSH
18642: LD_VAR 0 3
18646: PPUSH
18647: LD_INT 1
18649: PPUSH
18650: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18654: LD_INT 36
18656: PPUSH
18657: LD_VAR 0 3
18661: PPUSH
18662: LD_INT 1
18664: PPUSH
18665: CALL_OW 324
// end ; 6 :
18669: GO 19679
18671: LD_INT 6
18673: DOUBLE
18674: EQUAL
18675: IFTRUE 18679
18677: GO 19604
18679: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18680: LD_INT 35
18682: PPUSH
18683: LD_VAR 0 3
18687: PPUSH
18688: LD_INT 1
18690: PPUSH
18691: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18695: LD_INT 45
18697: PPUSH
18698: LD_VAR 0 3
18702: PPUSH
18703: LD_INT 1
18705: PPUSH
18706: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18710: LD_INT 46
18712: PPUSH
18713: LD_VAR 0 3
18717: PPUSH
18718: LD_INT 1
18720: PPUSH
18721: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18725: LD_INT 47
18727: PPUSH
18728: LD_VAR 0 3
18732: PPUSH
18733: LD_INT 1
18735: PPUSH
18736: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18740: LD_INT 1
18742: PPUSH
18743: LD_VAR 0 3
18747: PPUSH
18748: LD_INT 1
18750: PPUSH
18751: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18755: LD_INT 2
18757: PPUSH
18758: LD_VAR 0 3
18762: PPUSH
18763: LD_INT 1
18765: PPUSH
18766: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18770: LD_INT 11
18772: PPUSH
18773: LD_VAR 0 3
18777: PPUSH
18778: LD_INT 1
18780: PPUSH
18781: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18785: LD_INT 20
18787: PPUSH
18788: LD_VAR 0 3
18792: PPUSH
18793: LD_INT 1
18795: PPUSH
18796: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18800: LD_INT 48
18802: PPUSH
18803: LD_VAR 0 3
18807: PPUSH
18808: LD_INT 1
18810: PPUSH
18811: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18815: LD_INT 49
18817: PPUSH
18818: LD_VAR 0 3
18822: PPUSH
18823: LD_INT 1
18825: PPUSH
18826: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18830: LD_INT 50
18832: PPUSH
18833: LD_VAR 0 3
18837: PPUSH
18838: LD_INT 1
18840: PPUSH
18841: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18845: LD_INT 69
18847: PPUSH
18848: LD_VAR 0 3
18852: PPUSH
18853: LD_INT 1
18855: PPUSH
18856: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18860: LD_INT 39
18862: PPUSH
18863: LD_VAR 0 3
18867: PPUSH
18868: LD_INT 1
18870: PPUSH
18871: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18875: LD_INT 34
18877: PPUSH
18878: LD_VAR 0 3
18882: PPUSH
18883: LD_INT 1
18885: PPUSH
18886: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18890: LD_INT 42
18892: PPUSH
18893: LD_VAR 0 3
18897: PPUSH
18898: LD_INT 1
18900: PPUSH
18901: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18905: LD_INT 44
18907: PPUSH
18908: LD_VAR 0 3
18912: PPUSH
18913: LD_INT 1
18915: PPUSH
18916: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18920: LD_INT 41
18922: PPUSH
18923: LD_VAR 0 3
18927: PPUSH
18928: LD_INT 1
18930: PPUSH
18931: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18935: LD_INT 13
18937: PPUSH
18938: LD_VAR 0 3
18942: PPUSH
18943: LD_INT 1
18945: PPUSH
18946: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18950: LD_INT 40
18952: PPUSH
18953: LD_VAR 0 3
18957: PPUSH
18958: LD_INT 1
18960: PPUSH
18961: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18965: LD_INT 43
18967: PPUSH
18968: LD_VAR 0 3
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18980: LD_INT 70
18982: PPUSH
18983: LD_VAR 0 3
18987: PPUSH
18988: LD_INT 1
18990: PPUSH
18991: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18995: LD_INT 23
18997: PPUSH
18998: LD_VAR 0 3
19002: PPUSH
19003: LD_INT 1
19005: PPUSH
19006: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19010: LD_INT 51
19012: PPUSH
19013: LD_VAR 0 3
19017: PPUSH
19018: LD_INT 1
19020: PPUSH
19021: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19025: LD_INT 52
19027: PPUSH
19028: LD_VAR 0 3
19032: PPUSH
19033: LD_INT 1
19035: PPUSH
19036: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19040: LD_INT 6
19042: PPUSH
19043: LD_VAR 0 3
19047: PPUSH
19048: LD_INT 1
19050: PPUSH
19051: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19055: LD_INT 15
19057: PPUSH
19058: LD_VAR 0 3
19062: PPUSH
19063: LD_INT 1
19065: PPUSH
19066: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19070: LD_INT 7
19072: PPUSH
19073: LD_VAR 0 3
19077: PPUSH
19078: LD_INT 1
19080: PPUSH
19081: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19085: LD_INT 12
19087: PPUSH
19088: LD_VAR 0 3
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19100: LD_INT 10
19102: PPUSH
19103: LD_VAR 0 3
19107: PPUSH
19108: LD_INT 1
19110: PPUSH
19111: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19115: LD_INT 17
19117: PPUSH
19118: LD_VAR 0 3
19122: PPUSH
19123: LD_INT 1
19125: PPUSH
19126: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19130: LD_INT 18
19132: PPUSH
19133: LD_VAR 0 3
19137: PPUSH
19138: LD_INT 1
19140: PPUSH
19141: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19145: LD_INT 60
19147: PPUSH
19148: LD_VAR 0 3
19152: PPUSH
19153: LD_INT 1
19155: PPUSH
19156: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19160: LD_INT 61
19162: PPUSH
19163: LD_VAR 0 3
19167: PPUSH
19168: LD_INT 1
19170: PPUSH
19171: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19175: LD_INT 32
19177: PPUSH
19178: LD_VAR 0 3
19182: PPUSH
19183: LD_INT 1
19185: PPUSH
19186: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19190: LD_INT 27
19192: PPUSH
19193: LD_VAR 0 3
19197: PPUSH
19198: LD_INT 1
19200: PPUSH
19201: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19205: LD_INT 36
19207: PPUSH
19208: LD_VAR 0 3
19212: PPUSH
19213: LD_INT 1
19215: PPUSH
19216: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19220: LD_INT 33
19222: PPUSH
19223: LD_VAR 0 3
19227: PPUSH
19228: LD_INT 1
19230: PPUSH
19231: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19235: LD_INT 9
19237: PPUSH
19238: LD_VAR 0 3
19242: PPUSH
19243: LD_INT 1
19245: PPUSH
19246: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19250: LD_INT 38
19252: PPUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: LD_INT 1
19260: PPUSH
19261: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19265: LD_INT 57
19267: PPUSH
19268: LD_VAR 0 3
19272: PPUSH
19273: LD_INT 1
19275: PPUSH
19276: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19280: LD_INT 58
19282: PPUSH
19283: LD_VAR 0 3
19287: PPUSH
19288: LD_INT 1
19290: PPUSH
19291: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19295: LD_INT 28
19297: PPUSH
19298: LD_VAR 0 3
19302: PPUSH
19303: LD_INT 1
19305: PPUSH
19306: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19310: LD_INT 29
19312: PPUSH
19313: LD_VAR 0 3
19317: PPUSH
19318: LD_INT 1
19320: PPUSH
19321: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19325: LD_INT 30
19327: PPUSH
19328: LD_VAR 0 3
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19340: LD_INT 37
19342: PPUSH
19343: LD_VAR 0 3
19347: PPUSH
19348: LD_INT 1
19350: PPUSH
19351: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19355: LD_INT 63
19357: PPUSH
19358: LD_VAR 0 3
19362: PPUSH
19363: LD_INT 1
19365: PPUSH
19366: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19370: LD_INT 64
19372: PPUSH
19373: LD_VAR 0 3
19377: PPUSH
19378: LD_INT 1
19380: PPUSH
19381: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19385: LD_INT 3
19387: PPUSH
19388: LD_VAR 0 3
19392: PPUSH
19393: LD_INT 1
19395: PPUSH
19396: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19400: LD_INT 4
19402: PPUSH
19403: LD_VAR 0 3
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19415: LD_INT 5
19417: PPUSH
19418: LD_VAR 0 3
19422: PPUSH
19423: LD_INT 1
19425: PPUSH
19426: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19430: LD_INT 8
19432: PPUSH
19433: LD_VAR 0 3
19437: PPUSH
19438: LD_INT 1
19440: PPUSH
19441: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19445: LD_INT 66
19447: PPUSH
19448: LD_VAR 0 3
19452: PPUSH
19453: LD_INT 1
19455: PPUSH
19456: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19460: LD_INT 67
19462: PPUSH
19463: LD_VAR 0 3
19467: PPUSH
19468: LD_INT 1
19470: PPUSH
19471: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19475: LD_INT 21
19477: PPUSH
19478: LD_VAR 0 3
19482: PPUSH
19483: LD_INT 1
19485: PPUSH
19486: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19490: LD_INT 22
19492: PPUSH
19493: LD_VAR 0 3
19497: PPUSH
19498: LD_INT 1
19500: PPUSH
19501: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19505: LD_INT 19
19507: PPUSH
19508: LD_VAR 0 3
19512: PPUSH
19513: LD_INT 1
19515: PPUSH
19516: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19520: LD_INT 26
19522: PPUSH
19523: LD_VAR 0 3
19527: PPUSH
19528: LD_INT 1
19530: PPUSH
19531: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19535: LD_INT 54
19537: PPUSH
19538: LD_VAR 0 3
19542: PPUSH
19543: LD_INT 1
19545: PPUSH
19546: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19550: LD_INT 55
19552: PPUSH
19553: LD_VAR 0 3
19557: PPUSH
19558: LD_INT 1
19560: PPUSH
19561: CALL_OW 322
// for i = 0 to 39 do
19565: LD_ADDR_VAR 0 4
19569: PUSH
19570: DOUBLE
19571: LD_INT 0
19573: DEC
19574: ST_TO_ADDR
19575: LD_INT 39
19577: PUSH
19578: FOR_TO
19579: IFFALSE 19600
// SetRestrict ( i , side , true ) ;
19581: LD_VAR 0 4
19585: PPUSH
19586: LD_VAR 0 3
19590: PPUSH
19591: LD_INT 1
19593: PPUSH
19594: CALL_OW 324
19598: GO 19578
19600: POP
19601: POP
// end ; else
19602: GO 19679
19604: POP
// begin for i = 1 to 73 do
19605: LD_ADDR_VAR 0 4
19609: PUSH
19610: DOUBLE
19611: LD_INT 1
19613: DEC
19614: ST_TO_ADDR
19615: LD_INT 73
19617: PUSH
19618: FOR_TO
19619: IFFALSE 19640
// SetTech ( i , side , state_enabled ) ;
19621: LD_VAR 0 4
19625: PPUSH
19626: LD_VAR 0 3
19630: PPUSH
19631: LD_INT 1
19633: PPUSH
19634: CALL_OW 322
19638: GO 19618
19640: POP
19641: POP
// for i = 0 to 39 do
19642: LD_ADDR_VAR 0 4
19646: PUSH
19647: DOUBLE
19648: LD_INT 0
19650: DEC
19651: ST_TO_ADDR
19652: LD_INT 39
19654: PUSH
19655: FOR_TO
19656: IFFALSE 19677
// SetRestrict ( i , side , true ) ;
19658: LD_VAR 0 4
19662: PPUSH
19663: LD_VAR 0 3
19667: PPUSH
19668: LD_INT 1
19670: PPUSH
19671: CALL_OW 324
19675: GO 19655
19677: POP
19678: POP
// end ; end ; end ;
19679: GO 15684
19681: POP
19682: POP
// end ;
19683: LD_VAR 0 2
19687: RET
