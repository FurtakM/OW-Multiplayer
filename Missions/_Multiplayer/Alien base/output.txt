// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_siberit , respawning_time_min , respawning_time_max , buildUpTime_Delay , amount_of_apemen , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 42
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 19
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 17
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 20
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 22
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 18
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 372
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 3 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 3
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 167: LD_ADDR_EXP 19
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 6
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 206: LD_ADDR_EXP 17
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 6
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 0 , 0 , 3 ] ;
 245: LD_ADDR_EXP 20
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 22
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 323: LD_ADDR_EXP 18
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// end ; for i := 1 to 8 do
 372: LD_ADDR_VAR 0 2
 376: PUSH
 377: DOUBLE
 378: LD_INT 1
 380: DEC
 381: ST_TO_ADDR
 382: LD_INT 8
 384: PUSH
 385: FOR_TO
 386: IFFALSE 473
// if Multiplayer_GetPlayerIsSpec ( i ) then
 388: LD_VAR 0 2
 392: PPUSH
 393: CALL_OW 530
 397: IFFALSE 471
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 399: LD_ADDR_EXP 19
 403: PUSH
 404: LD_EXP 19
 408: PPUSH
 409: LD_VAR 0 2
 413: PPUSH
 414: LD_INT 0
 416: PPUSH
 417: CALL_OW 1
 421: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 422: LD_ADDR_EXP 18
 426: PUSH
 427: LD_EXP 18
 431: PPUSH
 432: LD_EXP 17
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: PPUSH
 443: LD_EXP 18
 447: PUSH
 448: LD_EXP 17
 452: PUSH
 453: LD_VAR 0 2
 457: ARRAY
 458: ARRAY
 459: PUSH
 460: LD_VAR 0 2
 464: DIFF
 465: PPUSH
 466: CALL_OW 1
 470: ST_TO_ADDR
// end ;
 471: GO 385
 473: POP
 474: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 475: LD_ADDR_EXP 23
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 0
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: LD_INT 0
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: ST_TO_ADDR
// for i := 1 to 8 do
 506: LD_ADDR_VAR 0 2
 510: PUSH
 511: DOUBLE
 512: LD_INT 1
 514: DEC
 515: ST_TO_ADDR
 516: LD_INT 8
 518: PUSH
 519: FOR_TO
 520: IFFALSE 567
// if Side_Positions [ i ] then
 522: LD_EXP 19
 526: PUSH
 527: LD_VAR 0 2
 531: ARRAY
 532: IFFALSE 565
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 534: LD_ADDR_EXP 23
 538: PUSH
 539: LD_EXP 23
 543: PPUSH
 544: LD_EXP 19
 548: PUSH
 549: LD_VAR 0 2
 553: ARRAY
 554: PPUSH
 555: LD_VAR 0 2
 559: PPUSH
 560: CALL_OW 1
 564: ST_TO_ADDR
 565: GO 519
 567: POP
 568: POP
// Team_Game := Side_Teams [ your_side ] ;
 569: LD_ADDR_EXP 21
 573: PUSH
 574: LD_EXP 17
 578: PUSH
 579: LD_OWVAR 2
 583: ARRAY
 584: ST_TO_ADDR
// if Multiplayer then
 585: LD_OWVAR 4
 589: IFFALSE 835
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 591: LD_ADDR_EXP 44
 595: PUSH
 596: LD_INT 0
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 604: LD_ADDR_EXP 45
 608: PUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 617: LD_ADDR_EXP 46
 621: PUSH
 622: LD_INT 2
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 630: LD_ADDR_EXP 47
 634: PUSH
 635: LD_INT 3
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 643: LD_ADDR_EXP 48
 647: PUSH
 648: LD_INT 4
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 656: LD_ADDR_EXP 49
 660: PUSH
 661: LD_INT 5
 663: PPUSH
 664: CALL_OW 426
 668: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 669: LD_ADDR_EXP 50
 673: PUSH
 674: LD_INT 6
 676: PPUSH
 677: CALL_OW 426
 681: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 682: LD_ADDR_EXP 51
 686: PUSH
 687: LD_INT 10
 689: PPUSH
 690: CALL_OW 426
 694: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 695: LD_ADDR_EXP 52
 699: PUSH
 700: LD_INT 11
 702: PPUSH
 703: CALL_OW 426
 707: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 708: LD_ADDR_EXP 53
 712: PUSH
 713: LD_INT 12
 715: PPUSH
 716: CALL_OW 426
 720: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 721: LD_ADDR_EXP 54
 725: PUSH
 726: LD_INT 13
 728: PPUSH
 729: CALL_OW 426
 733: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 734: LD_ADDR_EXP 55
 738: PUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 426
 746: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 747: LD_ADDR_EXP 1
 751: PUSH
 752: LD_INT 15
 754: PPUSH
 755: CALL_OW 426
 759: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 760: LD_ADDR_EXP 2
 764: PUSH
 765: LD_INT 16
 767: PPUSH
 768: CALL_OW 426
 772: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 773: LD_ADDR_EXP 56
 777: PUSH
 778: LD_INT 17
 780: PPUSH
 781: CALL_OW 426
 785: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 786: LD_ADDR_EXP 57
 790: PUSH
 791: LD_INT 20
 793: PPUSH
 794: CALL_OW 426
 798: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 799: LD_ADDR_EXP 43
 803: PUSH
 804: LD_INT 21
 806: PPUSH
 807: CALL_OW 426
 811: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 812: LD_ADDR_VAR 0 3
 816: PUSH
 817: LD_INT 22
 819: PPUSH
 820: CALL_OW 426
 824: ST_TO_ADDR
// def_win_rules = 0 ;
 825: LD_ADDR_EXP 32
 829: PUSH
 830: LD_INT 0
 832: ST_TO_ADDR
// end else
 833: GO 991
// begin Randomize ;
 835: CALL_OW 10
// def_base_level := 2 ;
 839: LD_ADDR_EXP 44
 843: PUSH
 844: LD_INT 2
 846: ST_TO_ADDR
// def_amount_of_people := 0 ;
 847: LD_ADDR_EXP 45
 851: PUSH
 852: LD_INT 0
 854: ST_TO_ADDR
// def_skill_level := 1 ;
 855: LD_ADDR_EXP 46
 859: PUSH
 860: LD_INT 1
 862: ST_TO_ADDR
// def_starting_resources := 2 ;
 863: LD_ADDR_EXP 47
 867: PUSH
 868: LD_INT 2
 870: ST_TO_ADDR
// def_shipments_density := 1 ;
 871: LD_ADDR_EXP 48
 875: PUSH
 876: LD_INT 1
 878: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 879: LD_ADDR_EXP 49
 883: PUSH
 884: LD_INT 0
 886: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 887: LD_ADDR_EXP 50
 891: PUSH
 892: LD_INT 1
 894: ST_TO_ADDR
// def_shared_vision := 1 ;
 895: LD_ADDR_EXP 51
 899: PUSH
 900: LD_INT 1
 902: ST_TO_ADDR
// def_morale_flags := 1 ;
 903: LD_ADDR_EXP 52
 907: PUSH
 908: LD_INT 1
 910: ST_TO_ADDR
// def_siberite_detection := 1 ;
 911: LD_ADDR_EXP 53
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// def_people_respawning := 2 ;
 919: LD_ADDR_EXP 54
 923: PUSH
 924: LD_INT 2
 926: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 927: LD_ADDR_EXP 55
 931: PUSH
 932: LD_INT 3
 934: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 935: LD_ADDR_EXP 1
 939: PUSH
 940: LD_INT 0
 942: ST_TO_ADDR
// def_public_score := 0 ;
 943: LD_ADDR_EXP 2
 947: PUSH
 948: LD_INT 0
 950: ST_TO_ADDR
// def_siberite_bomb := 4 ;
 951: LD_ADDR_EXP 56
 955: PUSH
 956: LD_INT 4
 958: ST_TO_ADDR
// def_builduptime := 0 ;
 959: LD_ADDR_EXP 57
 963: PUSH
 964: LD_INT 0
 966: ST_TO_ADDR
// def_game_rules := 0 ;
 967: LD_ADDR_EXP 43
 971: PUSH
 972: LD_INT 0
 974: ST_TO_ADDR
// tech_level = 4 ;
 975: LD_ADDR_VAR 0 3
 979: PUSH
 980: LD_INT 4
 982: ST_TO_ADDR
// def_win_rules = 0 ;
 983: LD_ADDR_EXP 32
 987: PUSH
 988: LD_INT 0
 990: ST_TO_ADDR
// end ; InitGameRules ;
 991: CALL 10610 0 0
// if def_game_rules = 0 then
 995: LD_EXP 43
 999: PUSH
1000: LD_INT 0
1002: EQUAL
1003: IFFALSE 1054
// begin if isSGUI then
1005: LD_OWVAR 83
1009: IFFALSE 1017
// setMpTechs ( ) else
1011: CALL 15503 0 0
1015: GO 1054
// begin if Game_Type = 3 then
1017: LD_EXP 42
1021: PUSH
1022: LD_INT 3
1024: EQUAL
1025: IFFALSE 1041
// tech_level = tech_level + 3 ;
1027: LD_ADDR_VAR 0 3
1031: PUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 3
1039: PLUS
1040: ST_TO_ADDR
// SetMpTechLevel ( tech_level + 1 ) ;
1041: LD_VAR 0 3
1045: PUSH
1046: LD_INT 1
1048: PLUS
1049: PPUSH
1050: CALL 15650 0 1
// end ; end ; if ( Game_Type = 5 ) then
1054: LD_EXP 42
1058: PUSH
1059: LD_INT 5
1061: EQUAL
1062: IFFALSE 1091
// begin def_base_level := 1 ;
1064: LD_ADDR_EXP 44
1068: PUSH
1069: LD_INT 1
1071: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
1072: LD_ADDR_EXP 49
1076: PUSH
1077: LD_INT 0
1079: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
1080: LD_ADDR_EXP 50
1084: PUSH
1085: LD_INT 0
1087: ST_TO_ADDR
// disable ( 10 ) ;
1088: LD_INT 10
1090: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
1091: LD_ADDR_EXP 3
1095: PUSH
1096: LD_INT 0
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: PUSH
1110: LD_EXP 44
1114: PUSH
1115: LD_INT 1
1117: PLUS
1118: ARRAY
1119: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
1120: LD_ADDR_EXP 4
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 0
1130: PUSH
1131: LD_INT 2
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: PUSH
1139: LD_EXP 44
1143: PUSH
1144: LD_INT 1
1146: PLUS
1147: ARRAY
1148: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1149: LD_ADDR_EXP 5
1153: PUSH
1154: LD_EXP 45
1158: PUSH
1159: LD_INT 4
1161: PLUS
1162: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1163: LD_ADDR_EXP 9
1167: PUSH
1168: LD_INT 150
1170: PUSH
1171: LD_EXP 48
1175: PUSH
1176: LD_INT 1
1178: PLUS
1179: MINUS
1180: ST_TO_ADDR
// if def_people_respawning = 0 then
1181: LD_EXP 54
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1209
// begin respawning_time_min = 0 ;
1191: LD_ADDR_EXP 12
1195: PUSH
1196: LD_INT 0
1198: ST_TO_ADDR
// respawning_time_max = 0 ;
1199: LD_ADDR_EXP 13
1203: PUSH
1204: LD_INT 0
1206: ST_TO_ADDR
// end else
1207: GO 1253
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1209: LD_ADDR_EXP 12
1213: PUSH
1214: LD_INT 10500
1216: PUSH
1217: LD_INT 5
1219: DIVREAL
1220: PUSH
1221: LD_INT 6
1223: PUSH
1224: LD_EXP 54
1228: MINUS
1229: MUL
1230: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1231: LD_ADDR_EXP 13
1235: PUSH
1236: LD_INT 31500
1238: PUSH
1239: LD_INT 5
1241: DIVREAL
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_EXP 54
1250: MINUS
1251: MUL
1252: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1253: LD_EXP 55
1257: NOT
1258: IFFALSE 1270
// amount_of_apemen := 0 else
1260: LD_ADDR_EXP 15
1264: PUSH
1265: LD_INT 0
1267: ST_TO_ADDR
1268: GO 1280
// amount_of_apemen := def_amount_of_apemen ;
1270: LD_ADDR_EXP 15
1274: PUSH
1275: LD_EXP 55
1279: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1280: LD_EXP 56
1284: PUSH
1285: LD_INT 0
1287: EQUAL
1288: IFFALSE 1300
// siberite_bomb_Delay = 0 else
1290: LD_ADDR_EXP 16
1294: PUSH
1295: LD_INT 0
1297: ST_TO_ADDR
1298: GO 1322
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1300: LD_ADDR_EXP 16
1304: PUSH
1305: LD_EXP 56
1309: PUSH
1310: LD_INT 1
1312: MINUS
1313: PUSH
1314: LD_INT 21000
1316: MUL
1317: PUSH
1318: LD_INT 1
1320: PLUS
1321: ST_TO_ADDR
// if def_builduptime = 0 then
1322: LD_EXP 57
1326: PUSH
1327: LD_INT 0
1329: EQUAL
1330: IFFALSE 1342
// buildUpTime_Delay = 0 else
1332: LD_ADDR_EXP 14
1336: PUSH
1337: LD_INT 0
1339: ST_TO_ADDR
1340: GO 1360
// buildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
1342: LD_ADDR_EXP 14
1346: PUSH
1347: LD_INT 8400
1349: PUSH
1350: LD_INT 2100
1352: PUSH
1353: LD_EXP 57
1357: MUL
1358: PLUS
1359: ST_TO_ADDR
// amount_of_siberit = 30 + def_amount_of_siberit * 5 ;
1360: LD_ADDR_EXP 11
1364: PUSH
1365: LD_INT 30
1367: PUSH
1368: LD_EXP 1
1372: PUSH
1373: LD_INT 5
1375: MUL
1376: PLUS
1377: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 3
1388: PUSH
1389: LD_INT 4
1391: PUSH
1392: LD_INT 5
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: PUSH
1401: LD_EXP 46
1405: PUSH
1406: LD_INT 1
1408: PLUS
1409: ARRAY
1410: ST_TO_ADDR
// if ( Game_Type = 5 ) then
1411: LD_EXP 42
1415: PUSH
1416: LD_INT 5
1418: EQUAL
1419: IFFALSE 1537
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1421: LD_ADDR_EXP 8
1425: PUSH
1426: LD_INT 1000
1428: PUSH
1429: LD_INT 100
1431: PUSH
1432: LD_INT 100
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: LD_INT 2000
1442: PUSH
1443: LD_INT 200
1445: PUSH
1446: LD_INT 200
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 5000
1456: PUSH
1457: LD_INT 500
1459: PUSH
1460: LD_INT 500
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: PUSH
1468: LD_INT 10000
1470: PUSH
1471: LD_INT 1000
1473: PUSH
1474: LD_INT 1000
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 25000
1484: PUSH
1485: LD_INT 2500
1487: PUSH
1488: LD_INT 2500
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 50000
1498: PUSH
1499: LD_INT 5000
1501: PUSH
1502: LD_INT 5000
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: PUSH
1518: LD_EXP 47
1522: PUSH
1523: LD_INT 1
1525: PLUS
1526: ARRAY
1527: ST_TO_ADDR
// starting_crates := [ ] ;
1528: LD_ADDR_EXP 7
1532: PUSH
1533: EMPTY
1534: ST_TO_ADDR
// end else
1535: GO 1683
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1537: LD_ADDR_EXP 8
1541: PUSH
1542: LD_INT 0
1544: PUSH
1545: LD_INT 0
1547: PUSH
1548: LD_INT 0
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 30
1558: PUSH
1559: LD_INT 0
1561: PUSH
1562: LD_INT 0
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 50
1572: PUSH
1573: LD_INT 20
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: PUSH
1584: LD_INT 80
1586: PUSH
1587: LD_INT 40
1589: PUSH
1590: LD_INT 20
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: PUSH
1604: LD_EXP 47
1608: PUSH
1609: LD_INT 1
1611: PLUS
1612: ARRAY
1613: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1614: LD_ADDR_EXP 7
1618: PUSH
1619: LD_INT 10
1621: PUSH
1622: EMPTY
1623: LIST
1624: PUSH
1625: LD_INT 7
1627: PUSH
1628: LD_INT 14
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 6
1637: PUSH
1638: LD_INT 12
1640: PUSH
1641: LD_INT 18
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 5
1651: PUSH
1652: LD_INT 10
1654: PUSH
1655: LD_INT 15
1657: PUSH
1658: LD_INT 20
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_EXP 47
1677: PUSH
1678: LD_INT 1
1680: PLUS
1681: ARRAY
1682: ST_TO_ADDR
// end ; morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1683: LD_ADDR_EXP 10
1687: PUSH
1688: LD_INT 1
1690: NEG
1691: PUSH
1692: LD_INT 350
1694: PUSH
1695: LD_INT 700
1697: PUSH
1698: LD_INT 1400
1700: PUSH
1701: LD_INT 0
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: PUSH
1711: LD_EXP 52
1715: PUSH
1716: LD_INT 1
1718: PLUS
1719: ARRAY
1720: ST_TO_ADDR
// battle_flags_id := [ ] ;
1721: LD_ADDR_EXP 31
1725: PUSH
1726: EMPTY
1727: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1728: LD_ADDR_EXP 41
1732: PUSH
1733: LD_INT 8
1735: PUSH
1736: LD_INT 9
1738: PUSH
1739: LD_INT 10
1741: PUSH
1742: LD_INT 11
1744: PUSH
1745: LD_INT 12
1747: PUSH
1748: LD_INT 13
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: ST_TO_ADDR
// end ;
1759: LD_VAR 0 1
1763: RET
// function init_map ; var i , j ; begin
1764: LD_INT 0
1766: PPUSH
1767: PPUSH
1768: PPUSH
// normal_oil_deposits_locations := [ [ 28 , 22 ] , [ 69 , 3 ] , [ 138 , 27 ] , [ 180 , 104 ] , [ 138 , 137 ] , [ 76 , 115 ] ] ;
1769: LD_ADDR_EXP 27
1773: PUSH
1774: LD_INT 28
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: LD_INT 69
1786: PUSH
1787: LD_INT 3
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: LD_INT 138
1796: PUSH
1797: LD_INT 27
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: LD_INT 180
1806: PUSH
1807: LD_INT 104
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 138
1816: PUSH
1817: LD_INT 137
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 76
1826: PUSH
1827: LD_INT 115
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 31 , 38 ] , [ 34 , 21 ] ] , [ [ 58 , 4 ] , [ 82 , 4 ] ] , [ [ 122 , 18 ] , [ 152 , 43 ] ] , [ [ 174 , 90 ] , [ 180 , 120 ] ] , [ [ 152 , 136 ] , [ 130 , 136 ] ] , [ [ 89 , 116 ] , [ 59 , 89 ] ] ] ;
1842: LD_ADDR_EXP 28
1846: PUSH
1847: LD_INT 31
1849: PUSH
1850: LD_INT 38
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 34
1859: PUSH
1860: LD_INT 21
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 58
1873: PUSH
1874: LD_INT 4
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 82
1883: PUSH
1884: LD_INT 4
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PUSH
1895: LD_INT 122
1897: PUSH
1898: LD_INT 18
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 152
1907: PUSH
1908: LD_INT 43
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 174
1921: PUSH
1922: LD_INT 90
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 180
1931: PUSH
1932: LD_INT 120
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 152
1945: PUSH
1946: LD_INT 136
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 130
1955: PUSH
1956: LD_INT 136
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 89
1969: PUSH
1970: LD_INT 116
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 59
1979: PUSH
1980: LD_INT 89
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 28 , 26 ] , [ 73 , 3 ] , [ 133 , 22 ] , [ 180 , 110 ] , [ 142 , 137 ] , [ 72 , 112 ] ] ;
1999: LD_ADDR_EXP 29
2003: PUSH
2004: LD_INT 28
2006: PUSH
2007: LD_INT 26
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 73
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: LD_INT 133
2026: PUSH
2027: LD_INT 22
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 180
2036: PUSH
2037: LD_INT 110
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 142
2046: PUSH
2047: LD_INT 137
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 72
2056: PUSH
2057: LD_INT 112
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 27 , 39 ] , [ 30 , 16 ] ] , [ [ 57 , 8 ] , [ 87 , 8 ] ] , [ [ 128 , 19 ] , [ 146 , 36 ] ] , [ [ 176 , 121 ] , [ 179 , 96 ] ] , [ [ 153 , 132 ] , [ 124 , 133 ] ] , [ [ 85 , 117 ] , [ 62 , 96 ] ] ] ;
2072: LD_ADDR_EXP 30
2076: PUSH
2077: LD_INT 27
2079: PUSH
2080: LD_INT 39
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: LD_INT 30
2089: PUSH
2090: LD_INT 16
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 57
2103: PUSH
2104: LD_INT 8
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: PUSH
2111: LD_INT 87
2113: PUSH
2114: LD_INT 8
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 128
2127: PUSH
2128: LD_INT 19
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: LD_INT 146
2137: PUSH
2138: LD_INT 36
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 176
2151: PUSH
2152: LD_INT 121
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 179
2161: PUSH
2162: LD_INT 96
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 153
2175: PUSH
2176: LD_INT 132
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: LD_INT 124
2185: PUSH
2186: LD_INT 133
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 85
2199: PUSH
2200: LD_INT 117
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: PUSH
2207: LD_INT 62
2209: PUSH
2210: LD_INT 96
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: ST_TO_ADDR
// depot_def := [ [ 53 , 42 , 5 ] , [ 78 , 18 , 0 ] , [ 129 , 43 , 1 ] , [ 155 , 96 , 2 ] , [ 130 , 120 , 3 ] , [ 82 , 98 , 3 ] ] ;
2229: LD_ADDR_EXP 24
2233: PUSH
2234: LD_INT 53
2236: PUSH
2237: LD_INT 42
2239: PUSH
2240: LD_INT 5
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 78
2250: PUSH
2251: LD_INT 18
2253: PUSH
2254: LD_INT 0
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: PUSH
2262: LD_INT 129
2264: PUSH
2265: LD_INT 43
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 155
2278: PUSH
2279: LD_INT 96
2281: PUSH
2282: LD_INT 2
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 130
2292: PUSH
2293: LD_INT 120
2295: PUSH
2296: LD_INT 3
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 82
2306: PUSH
2307: LD_INT 98
2309: PUSH
2310: LD_INT 3
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: ST_TO_ADDR
// for i in depot_def do
2326: LD_ADDR_VAR 0 2
2330: PUSH
2331: LD_EXP 24
2335: PUSH
2336: FOR_IN
2337: IFFALSE 2411
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2339: LD_ADDR_EXP 26
2343: PUSH
2344: LD_EXP 26
2348: PUSH
2349: LD_VAR 0 2
2353: PUSH
2354: LD_INT 1
2356: ARRAY
2357: PPUSH
2358: LD_VAR 0 2
2362: PUSH
2363: LD_INT 3
2365: ARRAY
2366: PPUSH
2367: LD_INT 10
2369: PPUSH
2370: CALL_OW 272
2374: PUSH
2375: LD_VAR 0 2
2379: PUSH
2380: LD_INT 2
2382: ARRAY
2383: PPUSH
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 3
2391: ARRAY
2392: PPUSH
2393: LD_INT 10
2395: PPUSH
2396: CALL_OW 273
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PUSH
2405: EMPTY
2406: LIST
2407: ADD
2408: ST_TO_ADDR
2409: GO 2336
2411: POP
2412: POP
// breastworks_def := [ [ [ 65 , 53 , 5 ] , [ 65 , 40 , 4 ] ] , [ [ 76 , 28 , 0 ] , [ 89 , 28 , 5 ] ] , [ [ 115 , 41 , 1 ] , [ 128 , 54 , 0 ] ] , [ [ 143 , 82 , 2 ] , [ 143 , 95 , 1 ] ] , [ [ 131 , 108 , 3 ] , [ 118 , 108 , 2 ] ] , [ [ 80 , 85 , 3 ] , [ 92 , 97 , 4 ] ] ] ;
2413: LD_ADDR_EXP 25
2417: PUSH
2418: LD_INT 65
2420: PUSH
2421: LD_INT 53
2423: PUSH
2424: LD_INT 5
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: PUSH
2432: LD_INT 65
2434: PUSH
2435: LD_INT 40
2437: PUSH
2438: LD_INT 4
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: PUSH
2450: LD_INT 76
2452: PUSH
2453: LD_INT 28
2455: PUSH
2456: LD_INT 0
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: LIST
2463: PUSH
2464: LD_INT 89
2466: PUSH
2467: LD_INT 28
2469: PUSH
2470: LD_INT 5
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 115
2484: PUSH
2485: LD_INT 41
2487: PUSH
2488: LD_INT 1
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 128
2498: PUSH
2499: LD_INT 54
2501: PUSH
2502: LD_INT 0
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 143
2516: PUSH
2517: LD_INT 82
2519: PUSH
2520: LD_INT 2
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: LIST
2527: PUSH
2528: LD_INT 143
2530: PUSH
2531: LD_INT 95
2533: PUSH
2534: LD_INT 1
2536: PUSH
2537: EMPTY
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: PUSH
2546: LD_INT 131
2548: PUSH
2549: LD_INT 108
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 118
2562: PUSH
2563: LD_INT 108
2565: PUSH
2566: LD_INT 2
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: PUSH
2578: LD_INT 80
2580: PUSH
2581: LD_INT 85
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 92
2594: PUSH
2595: LD_INT 97
2597: PUSH
2598: LD_INT 4
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: ST_TO_ADDR
// for i = 1 to Side_Positions do
2618: LD_ADDR_VAR 0 2
2622: PUSH
2623: DOUBLE
2624: LD_INT 1
2626: DEC
2627: ST_TO_ADDR
2628: LD_EXP 19
2632: PUSH
2633: FOR_TO
2634: IFFALSE 2764
// begin if not Side_Positions [ i ] then
2636: LD_EXP 19
2640: PUSH
2641: LD_VAR 0 2
2645: ARRAY
2646: NOT
2647: IFFALSE 2651
// continue ;
2649: GO 2633
// if def_extra_oil_deposits then
2651: LD_EXP 49
2655: IFFALSE 2713
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2657: LD_ADDR_VAR 0 3
2661: PUSH
2662: LD_EXP 28
2666: PUSH
2667: LD_EXP 19
2671: PUSH
2672: LD_VAR 0 2
2676: ARRAY
2677: ARRAY
2678: PUSH
2679: FOR_IN
2680: IFFALSE 2709
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2682: LD_VAR 0 3
2686: PUSH
2687: LD_INT 1
2689: ARRAY
2690: PPUSH
2691: LD_VAR 0 3
2695: PUSH
2696: LD_INT 2
2698: ARRAY
2699: PPUSH
2700: LD_INT 2
2702: PPUSH
2703: CALL_OW 62
2707: GO 2679
2709: POP
2710: POP
2711: GO 2762
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2713: LD_EXP 27
2717: PUSH
2718: LD_EXP 19
2722: PUSH
2723: LD_VAR 0 2
2727: ARRAY
2728: ARRAY
2729: PUSH
2730: LD_INT 1
2732: ARRAY
2733: PPUSH
2734: LD_EXP 27
2738: PUSH
2739: LD_EXP 19
2743: PUSH
2744: LD_VAR 0 2
2748: ARRAY
2749: ARRAY
2750: PUSH
2751: LD_INT 2
2753: ARRAY
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 62
// end ;
2762: GO 2633
2764: POP
2765: POP
// if def_extra_sib_deposits then
2766: LD_EXP 50
2770: IFFALSE 2924
// for i = 1 to Side_Positions do
2772: LD_ADDR_VAR 0 2
2776: PUSH
2777: DOUBLE
2778: LD_INT 1
2780: DEC
2781: ST_TO_ADDR
2782: LD_EXP 19
2786: PUSH
2787: FOR_TO
2788: IFFALSE 2922
// begin if not Side_Positions [ i ] then
2790: LD_EXP 19
2794: PUSH
2795: LD_VAR 0 2
2799: ARRAY
2800: NOT
2801: IFFALSE 2805
// continue ;
2803: GO 2787
// if def_extra_sib_deposits = 2 then
2805: LD_EXP 50
2809: PUSH
2810: LD_INT 2
2812: EQUAL
2813: IFFALSE 2871
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2815: LD_ADDR_VAR 0 3
2819: PUSH
2820: LD_EXP 30
2824: PUSH
2825: LD_EXP 19
2829: PUSH
2830: LD_VAR 0 2
2834: ARRAY
2835: ARRAY
2836: PUSH
2837: FOR_IN
2838: IFFALSE 2867
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2840: LD_VAR 0 3
2844: PUSH
2845: LD_INT 1
2847: ARRAY
2848: PPUSH
2849: LD_VAR 0 3
2853: PUSH
2854: LD_INT 2
2856: ARRAY
2857: PPUSH
2858: LD_INT 3
2860: PPUSH
2861: CALL_OW 62
2865: GO 2837
2867: POP
2868: POP
2869: GO 2920
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2871: LD_EXP 29
2875: PUSH
2876: LD_EXP 19
2880: PUSH
2881: LD_VAR 0 2
2885: ARRAY
2886: ARRAY
2887: PUSH
2888: LD_INT 1
2890: ARRAY
2891: PPUSH
2892: LD_EXP 29
2896: PUSH
2897: LD_EXP 19
2901: PUSH
2902: LD_VAR 0 2
2906: ARRAY
2907: ARRAY
2908: PUSH
2909: LD_INT 2
2911: ARRAY
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: CALL_OW 62
// end ;
2920: GO 2787
2922: POP
2923: POP
// end ;
2924: LD_VAR 0 1
2928: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2929: LD_INT 0
2931: PPUSH
2932: PPUSH
2933: PPUSH
// if not Team_Game then
2934: LD_EXP 21
2938: NOT
2939: IFFALSE 3037
// begin for i = 1 to 8 do
2941: LD_ADDR_VAR 0 2
2945: PUSH
2946: DOUBLE
2947: LD_INT 1
2949: DEC
2950: ST_TO_ADDR
2951: LD_INT 8
2953: PUSH
2954: FOR_TO
2955: IFFALSE 3033
// for j = 1 to 8 do
2957: LD_ADDR_VAR 0 3
2961: PUSH
2962: DOUBLE
2963: LD_INT 1
2965: DEC
2966: ST_TO_ADDR
2967: LD_INT 8
2969: PUSH
2970: FOR_TO
2971: IFFALSE 3029
// if i <> j then
2973: LD_VAR 0 2
2977: PUSH
2978: LD_VAR 0 3
2982: NONEQUAL
2983: IFFALSE 3007
// SetAttitude ( i , j , att_neutral , true ) else
2985: LD_VAR 0 2
2989: PPUSH
2990: LD_VAR 0 3
2994: PPUSH
2995: LD_INT 0
2997: PPUSH
2998: LD_INT 1
3000: PPUSH
3001: CALL_OW 80
3005: GO 3027
// SetAttitude ( i , j , att_friend , true ) ;
3007: LD_VAR 0 2
3011: PPUSH
3012: LD_VAR 0 3
3016: PPUSH
3017: LD_INT 1
3019: PPUSH
3020: LD_INT 1
3022: PPUSH
3023: CALL_OW 80
3027: GO 2970
3029: POP
3030: POP
3031: GO 2954
3033: POP
3034: POP
// end else
3035: GO 3212
// begin if def_shared_vision then
3037: LD_EXP 51
3041: IFFALSE 3106
// begin for i in Teams do
3043: LD_ADDR_VAR 0 2
3047: PUSH
3048: LD_EXP 18
3052: PUSH
3053: FOR_IN
3054: IFFALSE 3104
// for j = 2 to i do
3056: LD_ADDR_VAR 0 3
3060: PUSH
3061: DOUBLE
3062: LD_INT 2
3064: DEC
3065: ST_TO_ADDR
3066: LD_VAR 0 2
3070: PUSH
3071: FOR_TO
3072: IFFALSE 3100
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3074: LD_VAR 0 2
3078: PUSH
3079: LD_VAR 0 3
3083: ARRAY
3084: PPUSH
3085: LD_VAR 0 2
3089: PUSH
3090: LD_INT 1
3092: ARRAY
3093: PPUSH
3094: CALL_OW 343
3098: GO 3071
3100: POP
3101: POP
3102: GO 3053
3104: POP
3105: POP
// end ; for i = 1 to 8 do
3106: LD_ADDR_VAR 0 2
3110: PUSH
3111: DOUBLE
3112: LD_INT 1
3114: DEC
3115: ST_TO_ADDR
3116: LD_INT 8
3118: PUSH
3119: FOR_TO
3120: IFFALSE 3210
// for j = 1 to 8 do
3122: LD_ADDR_VAR 0 3
3126: PUSH
3127: DOUBLE
3128: LD_INT 1
3130: DEC
3131: ST_TO_ADDR
3132: LD_INT 8
3134: PUSH
3135: FOR_TO
3136: IFFALSE 3206
// if Side_Teams [ i ] = Side_Teams [ j ] then
3138: LD_EXP 17
3142: PUSH
3143: LD_VAR 0 2
3147: ARRAY
3148: PUSH
3149: LD_EXP 17
3153: PUSH
3154: LD_VAR 0 3
3158: ARRAY
3159: EQUAL
3160: IFFALSE 3184
// SetAttitude ( i , j , att_friend , true ) else
3162: LD_VAR 0 2
3166: PPUSH
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 1
3174: PPUSH
3175: LD_INT 1
3177: PPUSH
3178: CALL_OW 80
3182: GO 3204
// SetAttitude ( i , j , att_enemy , true ) ;
3184: LD_VAR 0 2
3188: PPUSH
3189: LD_VAR 0 3
3193: PPUSH
3194: LD_INT 2
3196: PPUSH
3197: LD_INT 1
3199: PPUSH
3200: CALL_OW 80
3204: GO 3135
3206: POP
3207: POP
3208: GO 3119
3210: POP
3211: POP
// end ; end ;
3212: LD_VAR 0 1
3216: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3217: LD_INT 0
3219: PPUSH
3220: PPUSH
3221: PPUSH
3222: PPUSH
// result := [ ] ;
3223: LD_ADDR_VAR 0 7
3227: PUSH
3228: EMPTY
3229: ST_TO_ADDR
// for i := 1 to count do
3230: LD_ADDR_VAR 0 8
3234: PUSH
3235: DOUBLE
3236: LD_INT 1
3238: DEC
3239: ST_TO_ADDR
3240: LD_VAR 0 1
3244: PUSH
3245: FOR_TO
3246: IFFALSE 3664
// begin uc_direction := Rand ( 0 , 5 ) ;
3248: LD_ADDR_OWVAR 24
3252: PUSH
3253: LD_INT 0
3255: PPUSH
3256: LD_INT 5
3258: PPUSH
3259: CALL_OW 12
3263: ST_TO_ADDR
// if commander then
3264: LD_LOC 1
3268: IFFALSE 3377
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3270: LD_ADDR_OWVAR 26
3274: PUSH
3275: LD_OWVAR 19
3279: PUSH
3280: LD_OWVAR 20
3284: ARRAY
3285: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3286: LD_INT 1
3288: PPUSH
3289: LD_INT 2
3291: PPUSH
3292: CALL_OW 12
3296: PPUSH
3297: LD_VAR 0 2
3301: PPUSH
3302: LD_EXP 6
3306: PUSH
3307: LD_INT 2
3309: PLUS
3310: PPUSH
3311: CALL_OW 380
// hc_importance := 105 ;
3315: LD_ADDR_OWVAR 32
3319: PUSH
3320: LD_INT 105
3322: ST_TO_ADDR
// commander := false ;
3323: LD_ADDR_LOC 1
3327: PUSH
3328: LD_INT 0
3330: ST_TO_ADDR
// if Multiplayer then
3331: LD_OWVAR 4
3335: IFFALSE 3375
// begin hc_gallery := MULTIAVATARS ;
3337: LD_ADDR_OWVAR 33
3341: PUSH
3342: LD_STRING MULTIAVATARS
3344: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3345: LD_ADDR_OWVAR 34
3349: PUSH
3350: LD_OWVAR 20
3354: PPUSH
3355: CALL_OW 525
3359: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3360: LD_ADDR_OWVAR 27
3364: PUSH
3365: LD_OWVAR 20
3369: PPUSH
3370: CALL_OW 526
3374: ST_TO_ADDR
// end ; end else
3375: GO 3440
// begin hc_name :=  ;
3377: LD_ADDR_OWVAR 26
3381: PUSH
3382: LD_STRING 
3384: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3385: LD_INT 1
3387: PPUSH
3388: LD_INT 2
3390: PPUSH
3391: CALL_OW 12
3395: PPUSH
3396: LD_VAR 0 2
3400: PPUSH
3401: LD_EXP 6
3405: PPUSH
3406: CALL_OW 380
// hc_importance := 0 ;
3410: LD_ADDR_OWVAR 32
3414: PUSH
3415: LD_INT 0
3417: ST_TO_ADDR
// if Multiplayer then
3418: LD_OWVAR 4
3422: IFFALSE 3440
// begin hc_gallery :=  ;
3424: LD_ADDR_OWVAR 33
3428: PUSH
3429: LD_STRING 
3431: ST_TO_ADDR
// hc_face_number := 0 ;
3432: LD_ADDR_OWVAR 34
3436: PUSH
3437: LD_INT 0
3439: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3440: LD_ADDR_VAR 0 10
3444: PUSH
3445: CALL_OW 44
3449: ST_TO_ADDR
// if global_defined then
3450: LD_LOC 3
3454: IFFALSE 3594
// begin if ( cl = class_soldier ) then
3456: LD_VAR 0 2
3460: PUSH
3461: LD_INT 1
3463: EQUAL
3464: IFFALSE 3484
// j := i + soldiers_created else
3466: LD_ADDR_VAR 0 9
3470: PUSH
3471: LD_VAR 0 8
3475: PUSH
3476: LD_LOC 4
3480: PLUS
3481: ST_TO_ADDR
3482: GO 3494
// j := i ;
3484: LD_ADDR_VAR 0 9
3488: PUSH
3489: LD_VAR 0 8
3493: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3494: LD_LOC 2
3498: PUSH
3499: LD_VAR 0 2
3503: ARRAY
3504: PUSH
3505: LD_VAR 0 9
3509: ARRAY
3510: PPUSH
3511: LD_VAR 0 10
3515: PPUSH
3516: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3520: LD_VAR 0 10
3524: PPUSH
3525: LD_INT 2
3527: PPUSH
3528: LD_LOC 2
3532: PUSH
3533: LD_VAR 0 2
3537: ARRAY
3538: PUSH
3539: LD_VAR 0 9
3543: ARRAY
3544: PPUSH
3545: LD_INT 2
3547: PPUSH
3548: CALL_OW 260
3552: PPUSH
3553: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3557: LD_VAR 0 10
3561: PPUSH
3562: LD_INT 1
3564: PPUSH
3565: LD_LOC 2
3569: PUSH
3570: LD_VAR 0 2
3574: ARRAY
3575: PUSH
3576: LD_VAR 0 9
3580: ARRAY
3581: PPUSH
3582: LD_INT 1
3584: PPUSH
3585: CALL_OW 260
3589: PPUSH
3590: CALL_OW 239
// end ; if building then
3594: LD_VAR 0 6
3598: IFFALSE 3616
// PlaceHumanInUnit ( un , building ) else
3600: LD_VAR 0 10
3604: PPUSH
3605: LD_VAR 0 6
3609: PPUSH
3610: CALL_OW 52
3614: GO 3643
// PlaceUnitXYR ( un , x , y , r , false ) ;
3616: LD_VAR 0 10
3620: PPUSH
3621: LD_VAR 0 3
3625: PPUSH
3626: LD_VAR 0 4
3630: PPUSH
3631: LD_VAR 0 5
3635: PPUSH
3636: LD_INT 0
3638: PPUSH
3639: CALL_OW 50
// result := result ^ [ un ] ;
3643: LD_ADDR_VAR 0 7
3647: PUSH
3648: LD_VAR 0 7
3652: PUSH
3653: LD_VAR 0 10
3657: PUSH
3658: EMPTY
3659: LIST
3660: ADD
3661: ST_TO_ADDR
// end ;
3662: GO 3245
3664: POP
3665: POP
// if not global_defined then
3666: LD_LOC 3
3670: NOT
3671: IFFALSE 3749
// if ( global_units >= cl ) then
3673: LD_LOC 2
3677: PUSH
3678: LD_VAR 0 2
3682: GREATEREQUAL
3683: IFFALSE 3724
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3685: LD_ADDR_LOC 2
3689: PUSH
3690: LD_LOC 2
3694: PPUSH
3695: LD_VAR 0 2
3699: PPUSH
3700: LD_LOC 2
3704: PUSH
3705: LD_VAR 0 2
3709: ARRAY
3710: PUSH
3711: LD_VAR 0 7
3715: ADD
3716: PPUSH
3717: CALL_OW 1
3721: ST_TO_ADDR
3722: GO 3749
// global_units := Replace ( global_units , cl , result ) ;
3724: LD_ADDR_LOC 2
3728: PUSH
3729: LD_LOC 2
3733: PPUSH
3734: LD_VAR 0 2
3738: PPUSH
3739: LD_VAR 0 7
3743: PPUSH
3744: CALL_OW 1
3748: ST_TO_ADDR
// if commander then
3749: LD_LOC 1
3753: IFFALSE 3800
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3755: LD_ADDR_EXP 33
3759: PUSH
3760: LD_EXP 33
3764: PPUSH
3765: LD_OWVAR 20
3769: PPUSH
3770: LD_EXP 33
3774: PUSH
3775: LD_OWVAR 20
3779: ARRAY
3780: PUSH
3781: LD_VAR 0 10
3785: ADD
3786: PPUSH
3787: CALL_OW 1
3791: ST_TO_ADDR
// commander := false ;
3792: LD_ADDR_LOC 1
3796: PUSH
3797: LD_INT 0
3799: ST_TO_ADDR
// end ; end ;
3800: LD_VAR 0 7
3804: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3805: LD_INT 0
3807: PPUSH
3808: PPUSH
3809: PPUSH
3810: PPUSH
3811: PPUSH
3812: PPUSH
3813: PPUSH
3814: PPUSH
3815: PPUSH
// pos := Side_Positions [ side ] ;
3816: LD_ADDR_VAR 0 3
3820: PUSH
3821: LD_EXP 19
3825: PUSH
3826: LD_VAR 0 1
3830: ARRAY
3831: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3832: LD_ADDR_OWVAR 21
3836: PUSH
3837: LD_EXP 20
3841: PUSH
3842: LD_VAR 0 1
3846: ARRAY
3847: ST_TO_ADDR
// uc_side := side ;
3848: LD_ADDR_OWVAR 20
3852: PUSH
3853: LD_VAR 0 1
3857: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3858: LD_ADDR_VAR 0 4
3862: PUSH
3863: LD_EXP 24
3867: PUSH
3868: LD_VAR 0 3
3872: ARRAY
3873: PUSH
3874: LD_INT 1
3876: ARRAY
3877: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3878: LD_ADDR_VAR 0 5
3882: PUSH
3883: LD_EXP 24
3887: PUSH
3888: LD_VAR 0 3
3892: ARRAY
3893: PUSH
3894: LD_INT 2
3896: ARRAY
3897: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3898: LD_ADDR_VAR 0 6
3902: PUSH
3903: LD_EXP 24
3907: PUSH
3908: LD_VAR 0 3
3912: ARRAY
3913: PUSH
3914: LD_INT 3
3916: ARRAY
3917: ST_TO_ADDR
// if is_depot then
3918: LD_EXP 3
3922: IFFALSE 4055
// begin bc_type = b_depot ;
3924: LD_ADDR_OWVAR 42
3928: PUSH
3929: LD_INT 0
3931: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3932: LD_ADDR_VAR 0 10
3936: PUSH
3937: LD_VAR 0 4
3941: PPUSH
3942: LD_VAR 0 5
3946: PPUSH
3947: LD_VAR 0 6
3951: PPUSH
3952: CALL_OW 47
3956: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3957: LD_VAR 0 10
3961: PPUSH
3962: LD_STRING @
3964: PUSH
3965: LD_VAR 0 1
3969: STR
3970: PPUSH
3971: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3975: LD_VAR 0 10
3979: PPUSH
3980: CALL_OW 274
3984: PPUSH
3985: LD_INT 1
3987: PPUSH
3988: LD_EXP 8
3992: PUSH
3993: LD_INT 1
3995: ARRAY
3996: PPUSH
3997: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
4001: LD_VAR 0 10
4005: PPUSH
4006: CALL_OW 274
4010: PPUSH
4011: LD_INT 2
4013: PPUSH
4014: LD_EXP 8
4018: PUSH
4019: LD_INT 2
4021: ARRAY
4022: PPUSH
4023: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4027: LD_VAR 0 10
4031: PPUSH
4032: CALL_OW 274
4036: PPUSH
4037: LD_INT 3
4039: PPUSH
4040: LD_EXP 8
4044: PUSH
4045: LD_INT 3
4047: ARRAY
4048: PPUSH
4049: CALL_OW 277
// end else
4053: GO 4199
// begin for i := 1 to 3 do
4055: LD_ADDR_VAR 0 7
4059: PUSH
4060: DOUBLE
4061: LD_INT 1
4063: DEC
4064: ST_TO_ADDR
4065: LD_INT 3
4067: PUSH
4068: FOR_TO
4069: IFFALSE 4197
// begin r := starting_resources [ i ] ;
4071: LD_ADDR_VAR 0 8
4075: PUSH
4076: LD_EXP 8
4080: PUSH
4081: LD_VAR 0 7
4085: ARRAY
4086: ST_TO_ADDR
// while r >= 10 do
4087: LD_VAR 0 8
4091: PUSH
4092: LD_INT 10
4094: GREATEREQUAL
4095: IFFALSE 4195
// if r > 50 then
4097: LD_VAR 0 8
4101: PUSH
4102: LD_INT 50
4104: GREATER
4105: IFFALSE 4151
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4107: LD_VAR 0 7
4111: PPUSH
4112: LD_INT 5
4114: PPUSH
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_INT 4
4127: PPUSH
4128: LD_INT 0
4130: PPUSH
4131: CALL_OW 60
// r := r - 50 ;
4135: LD_ADDR_VAR 0 8
4139: PUSH
4140: LD_VAR 0 8
4144: PUSH
4145: LD_INT 50
4147: MINUS
4148: ST_TO_ADDR
// end else
4149: GO 4193
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4151: LD_VAR 0 7
4155: PPUSH
4156: LD_VAR 0 8
4160: PUSH
4161: LD_INT 10
4163: DIV
4164: PPUSH
4165: LD_VAR 0 4
4169: PPUSH
4170: LD_VAR 0 5
4174: PPUSH
4175: LD_INT 4
4177: PPUSH
4178: LD_INT 0
4180: PPUSH
4181: CALL_OW 60
// r := 0 ;
4185: LD_ADDR_VAR 0 8
4189: PUSH
4190: LD_INT 0
4192: ST_TO_ADDR
// end ;
4193: GO 4087
// end ;
4195: GO 4068
4197: POP
4198: POP
// end ; for r in starting_crates do
4199: LD_ADDR_VAR 0 8
4203: PUSH
4204: LD_EXP 7
4208: PUSH
4209: FOR_IN
4210: IFFALSE 4242
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4212: LD_INT 1
4214: PPUSH
4215: LD_INT 5
4217: PPUSH
4218: LD_VAR 0 4
4222: PPUSH
4223: LD_VAR 0 5
4227: PPUSH
4228: LD_VAR 0 8
4232: PPUSH
4233: LD_INT 0
4235: PPUSH
4236: CALL_OW 60
4240: GO 4209
4242: POP
4243: POP
// if def_morale_flags then
4244: LD_EXP 52
4248: IFFALSE 4387
// begin x := start_def [ pos ] [ 1 ] ;
4250: LD_ADDR_VAR 0 4
4254: PUSH
4255: LD_EXP 26
4259: PUSH
4260: LD_VAR 0 3
4264: ARRAY
4265: PUSH
4266: LD_INT 1
4268: ARRAY
4269: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4270: LD_ADDR_VAR 0 5
4274: PUSH
4275: LD_EXP 26
4279: PUSH
4280: LD_VAR 0 3
4284: ARRAY
4285: PUSH
4286: LD_INT 2
4288: ARRAY
4289: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4290: LD_VAR 0 4
4294: PPUSH
4295: LD_VAR 0 5
4299: PPUSH
4300: LD_INT 12
4302: PPUSH
4303: LD_INT 2
4305: PPUSH
4306: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4310: LD_ADDR_EXP 31
4314: PUSH
4315: LD_EXP 31
4319: PUSH
4320: LD_VAR 0 1
4324: PPUSH
4325: LD_VAR 0 4
4329: PPUSH
4330: LD_VAR 0 5
4334: PPUSH
4335: LD_INT 1
4337: PUSH
4338: LD_INT 100
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: PUSH
4345: LD_INT 2
4347: PUSH
4348: LD_INT 50
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: PUSH
4355: LD_INT 3
4357: PUSH
4358: LD_INT 20
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 20
4367: PUSH
4368: LD_INT 100
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: PPUSH
4381: CALL_OW 418
4385: ADD
4386: ST_TO_ADDR
// end ; commander := true ;
4387: LD_ADDR_LOC 1
4391: PUSH
4392: LD_INT 1
4394: ST_TO_ADDR
// soldiers_created := 0 ;
4395: LD_ADDR_LOC 4
4399: PUSH
4400: LD_INT 0
4402: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4403: LD_ADDR_VAR 0 7
4407: PUSH
4408: DOUBLE
4409: LD_INT 1
4411: DEC
4412: ST_TO_ADDR
4413: LD_EXP 4
4417: PUSH
4418: FOR_TO
4419: IFFALSE 4572
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4421: LD_ADDR_VAR 0 4
4425: PUSH
4426: LD_EXP 25
4430: PUSH
4431: LD_VAR 0 3
4435: ARRAY
4436: PUSH
4437: LD_VAR 0 7
4441: ARRAY
4442: PUSH
4443: LD_INT 1
4445: ARRAY
4446: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4447: LD_ADDR_VAR 0 5
4451: PUSH
4452: LD_EXP 25
4456: PUSH
4457: LD_VAR 0 3
4461: ARRAY
4462: PUSH
4463: LD_VAR 0 7
4467: ARRAY
4468: PUSH
4469: LD_INT 2
4471: ARRAY
4472: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4473: LD_ADDR_VAR 0 6
4477: PUSH
4478: LD_EXP 25
4482: PUSH
4483: LD_VAR 0 3
4487: ARRAY
4488: PUSH
4489: LD_VAR 0 7
4493: ARRAY
4494: PUSH
4495: LD_INT 3
4497: ARRAY
4498: ST_TO_ADDR
// bc_type := b_breastwork ;
4499: LD_ADDR_OWVAR 42
4503: PUSH
4504: LD_INT 31
4506: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4507: LD_ADDR_VAR 0 9
4511: PUSH
4512: LD_VAR 0 4
4516: PPUSH
4517: LD_VAR 0 5
4521: PPUSH
4522: LD_VAR 0 6
4526: PPUSH
4527: CALL_OW 47
4531: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4532: LD_INT 1
4534: PPUSH
4535: LD_INT 1
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_INT 0
4543: PPUSH
4544: LD_INT 0
4546: PPUSH
4547: LD_VAR 0 9
4551: PPUSH
4552: CALL 3217 0 6
// soldiers_created := soldiers_created + 1 ;
4556: LD_ADDR_LOC 4
4560: PUSH
4561: LD_LOC 4
4565: PUSH
4566: LD_INT 1
4568: PLUS
4569: ST_TO_ADDR
// end ;
4570: GO 4418
4572: POP
4573: POP
// x := start_def [ pos ] [ 1 ] ;
4574: LD_ADDR_VAR 0 4
4578: PUSH
4579: LD_EXP 26
4583: PUSH
4584: LD_VAR 0 3
4588: ARRAY
4589: PUSH
4590: LD_INT 1
4592: ARRAY
4593: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4594: LD_ADDR_VAR 0 5
4598: PUSH
4599: LD_EXP 26
4603: PUSH
4604: LD_VAR 0 3
4608: ARRAY
4609: PUSH
4610: LD_INT 2
4612: ARRAY
4613: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4614: LD_LOC 8
4618: PUSH
4619: LD_EXP 4
4623: MINUS
4624: PPUSH
4625: LD_INT 1
4627: PPUSH
4628: LD_VAR 0 4
4632: PPUSH
4633: LD_VAR 0 5
4637: PPUSH
4638: LD_INT 5
4640: PPUSH
4641: LD_INT 0
4643: PPUSH
4644: CALL 3217 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4648: LD_LOC 5
4652: PPUSH
4653: LD_INT 2
4655: PPUSH
4656: LD_VAR 0 4
4660: PPUSH
4661: LD_VAR 0 5
4665: PPUSH
4666: LD_INT 5
4668: PPUSH
4669: LD_INT 0
4671: PPUSH
4672: CALL 3217 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4676: LD_LOC 7
4680: PPUSH
4681: LD_INT 3
4683: PPUSH
4684: LD_VAR 0 4
4688: PPUSH
4689: LD_VAR 0 5
4693: PPUSH
4694: LD_INT 5
4696: PPUSH
4697: LD_INT 0
4699: PPUSH
4700: CALL 3217 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4704: LD_LOC 6
4708: PPUSH
4709: LD_INT 4
4711: PPUSH
4712: LD_VAR 0 4
4716: PPUSH
4717: LD_VAR 0 5
4721: PPUSH
4722: LD_INT 5
4724: PPUSH
4725: LD_INT 0
4727: PPUSH
4728: CALL 3217 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4732: LD_EXP 53
4736: PUSH
4737: LD_INT 20
4739: PPUSH
4740: LD_VAR 0 1
4744: PPUSH
4745: CALL_OW 321
4749: PUSH
4750: LD_INT 1
4752: EQUAL
4753: AND
4754: IFFALSE 4771
// SetTech ( tech_SibDet , side , state_researched ) ;
4756: LD_INT 20
4758: PPUSH
4759: LD_VAR 0 1
4763: PPUSH
4764: LD_INT 2
4766: PPUSH
4767: CALL_OW 322
// if def_siberite_bomb = 1 then
4771: LD_EXP 56
4775: PUSH
4776: LD_INT 1
4778: EQUAL
4779: IFFALSE 4813
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4781: LD_INT 25
4783: PPUSH
4784: LD_VAR 0 1
4788: PPUSH
4789: LD_INT 1
4791: PPUSH
4792: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4796: LD_INT 73
4798: PPUSH
4799: LD_VAR 0 1
4803: PPUSH
4804: LD_INT 1
4806: PPUSH
4807: CALL_OW 322
// end else
4811: GO 4843
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4813: LD_INT 25
4815: PPUSH
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_INT 0
4823: PPUSH
4824: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4828: LD_INT 73
4830: PPUSH
4831: LD_VAR 0 1
4835: PPUSH
4836: LD_INT 0
4838: PPUSH
4839: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4843: LD_INT 24
4845: PPUSH
4846: LD_VAR 0 1
4850: PPUSH
4851: LD_INT 0
4853: PPUSH
4854: CALL_OW 322
// global_defined := true ;
4858: LD_ADDR_LOC 3
4862: PUSH
4863: LD_INT 1
4865: ST_TO_ADDR
// end ;
4866: LD_VAR 0 2
4870: RET
// every 0 0$1 do
4871: GO 4873
4873: DISABLE
// if ( def_siberite_bomb > 1 ) then
4874: LD_EXP 56
4878: PUSH
4879: LD_INT 1
4881: GREATER
4882: IFFALSE 4897
// begin wait ( siberite_bomb_Delay ) ;
4884: LD_EXP 16
4888: PPUSH
4889: CALL_OW 67
// EnableSibFiss ;
4893: CALL 4898 0 0
// end ;
4897: END
// function EnableSibFiss ; var i ; begin
4898: LD_INT 0
4900: PPUSH
4901: PPUSH
// for i := 1 to 8 do
4902: LD_ADDR_VAR 0 2
4906: PUSH
4907: DOUBLE
4908: LD_INT 1
4910: DEC
4911: ST_TO_ADDR
4912: LD_INT 8
4914: PUSH
4915: FOR_TO
4916: IFFALSE 4962
// if Side_Positions [ i ] then
4918: LD_EXP 19
4922: PUSH
4923: LD_VAR 0 2
4927: ARRAY
4928: IFFALSE 4960
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4930: LD_INT 25
4932: PPUSH
4933: LD_VAR 0 2
4937: PPUSH
4938: LD_INT 1
4940: PPUSH
4941: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4945: LD_INT 73
4947: PPUSH
4948: LD_VAR 0 2
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL_OW 322
// end ;
4960: GO 4915
4962: POP
4963: POP
// end ;
4964: LD_VAR 0 1
4968: RET
// function prepare_sides ; var i ; begin
4969: LD_INT 0
4971: PPUSH
4972: PPUSH
// global_units := [ ] ;
4973: LD_ADDR_LOC 2
4977: PUSH
4978: EMPTY
4979: ST_TO_ADDR
// global_defined := false ;
4980: LD_ADDR_LOC 3
4984: PUSH
4985: LD_INT 0
4987: ST_TO_ADDR
// CountClassMembers ;
4988: CALL 5038 0 0
// for i := 1 to 8 do
4992: LD_ADDR_VAR 0 2
4996: PUSH
4997: DOUBLE
4998: LD_INT 1
5000: DEC
5001: ST_TO_ADDR
5002: LD_INT 8
5004: PUSH
5005: FOR_TO
5006: IFFALSE 5031
// if Side_Positions [ i ] then
5008: LD_EXP 19
5012: PUSH
5013: LD_VAR 0 2
5017: ARRAY
5018: IFFALSE 5029
// prepare_side ( i ) ;
5020: LD_VAR 0 2
5024: PPUSH
5025: CALL 3805 0 1
5029: GO 5005
5031: POP
5032: POP
// end ;
5033: LD_VAR 0 1
5037: RET
// function CountClassMembers ; var Mode ; begin
5038: LD_INT 0
5040: PPUSH
5041: PPUSH
// if No_Mechs then
5042: LD_EXP 58
5046: IFFALSE 5058
// Mode := 2 else
5048: LD_ADDR_VAR 0 2
5052: PUSH
5053: LD_INT 2
5055: ST_TO_ADDR
5056: GO 5066
// Mode := 1 ;
5058: LD_ADDR_VAR 0 2
5062: PUSH
5063: LD_INT 1
5065: ST_TO_ADDR
// neng := number_of_people ;
5066: LD_ADDR_LOC 5
5070: PUSH
5071: LD_EXP 5
5075: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5076: LD_ADDR_LOC 8
5080: PUSH
5081: LD_LOC 5
5085: PUSH
5086: LD_INT 4
5088: PUSH
5089: LD_INT 3
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_VAR 0 2
5100: ARRAY
5101: DIV
5102: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5103: LD_LOC 8
5107: PUSH
5108: LD_EXP 4
5112: LESS
5113: IFFALSE 5125
// nsol := number_of_breastworks ;
5115: LD_ADDR_LOC 8
5119: PUSH
5120: LD_EXP 4
5124: ST_TO_ADDR
// neng := neng - nsol ;
5125: LD_ADDR_LOC 5
5129: PUSH
5130: LD_LOC 5
5134: PUSH
5135: LD_LOC 8
5139: MINUS
5140: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5141: LD_ADDR_LOC 6
5145: PUSH
5146: LD_LOC 5
5150: PUSH
5151: LD_INT 3
5153: PUSH
5154: LD_INT 2
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: LD_VAR 0 2
5165: ARRAY
5166: DIV
5167: ST_TO_ADDR
// if ( nsci < 1 ) then
5168: LD_LOC 6
5172: PUSH
5173: LD_INT 1
5175: LESS
5176: IFFALSE 5186
// nsci := 1 ;
5178: LD_ADDR_LOC 6
5182: PUSH
5183: LD_INT 1
5185: ST_TO_ADDR
// neng := neng - nsci ;
5186: LD_ADDR_LOC 5
5190: PUSH
5191: LD_LOC 5
5195: PUSH
5196: LD_LOC 6
5200: MINUS
5201: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5202: LD_ADDR_LOC 7
5206: PUSH
5207: LD_LOC 5
5211: PUSH
5212: LD_INT 2
5214: DIV
5215: PUSH
5216: LD_INT 0
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: PUSH
5223: LD_VAR 0 2
5227: ARRAY
5228: ST_TO_ADDR
// neng := neng - nmech ;
5229: LD_ADDR_LOC 5
5233: PUSH
5234: LD_LOC 5
5238: PUSH
5239: LD_LOC 7
5243: MINUS
5244: ST_TO_ADDR
// if ( neng < 1 ) then
5245: LD_LOC 5
5249: PUSH
5250: LD_INT 1
5252: LESS
5253: IFFALSE 5263
// neng := 1 ;
5255: LD_ADDR_LOC 5
5259: PUSH
5260: LD_INT 1
5262: ST_TO_ADDR
// end ;
5263: LD_VAR 0 1
5267: RET
// starting begin disable ( 98 ) ;
5268: LD_INT 98
5270: DISABLE_MARKED
// disable ( 99 ) ;
5271: LD_INT 99
5273: DISABLE_MARKED
// disable ( 100 ) ;
5274: LD_INT 100
5276: DISABLE_MARKED
// disable ( 200 ) ;
5277: LD_INT 200
5279: DISABLE_MARKED
// disable ( 400 ) ;
5280: LD_INT 400
5282: DISABLE_MARKED
// disable ( 401 ) ;
5283: LD_INT 401
5285: DISABLE_MARKED
// disable ( 600 ) ;
5286: LD_INT 600
5288: DISABLE_MARKED
// mp_selectmsg := true ;
5289: LD_ADDR_OWVAR 13
5293: PUSH
5294: LD_INT 1
5296: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5297: CALL 68 0 0
// init_map ;
5301: CALL 1764 0 0
// set_shared_visions_and_alliances ;
5305: CALL 2929 0 0
// ResetFog ;
5309: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5313: LD_OWVAR 2
5317: PPUSH
5318: CALL_OW 520
// prepare_sides ;
5322: CALL 4969 0 0
// init_respawning ;
5326: CALL 7036 0 0
// Init_Win_Condition ;
5330: CALL 14140 0 0
// InitLimits ;
5334: CALL 12729 0 0
// ShowTimer ;
5338: CALL 13666 0 0
// case Game_Type of 3 :
5342: LD_EXP 42
5346: PUSH
5347: LD_INT 3
5349: DOUBLE
5350: EQUAL
5351: IFTRUE 5355
5353: GO 5361
5355: POP
// enable ( 100 ) ; 4 :
5356: LD_INT 100
5358: ENABLE_MARKED
5359: GO 5377
5361: LD_INT 4
5363: DOUBLE
5364: EQUAL
5365: IFTRUE 5369
5367: GO 5376
5369: POP
// InitBloodGods ; end ;
5370: CALL 10284 0 0
5374: GO 5377
5376: POP
// music_nat := Side_Nations [ your_side ] ;
5377: LD_ADDR_OWVAR 71
5381: PUSH
5382: LD_EXP 20
5386: PUSH
5387: LD_OWVAR 2
5391: ARRAY
5392: ST_TO_ADDR
// if IAmSpec then
5393: CALL_OW 531
5397: IFFALSE 5421
// begin fogOff ( true ) ;
5399: LD_INT 1
5401: PPUSH
5402: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
5406: LD_INT 104
5408: PPUSH
5409: LD_INT 69
5411: PPUSH
5412: CALL_OW 86
// enable ( 400 ) ;
5416: LD_INT 400
5418: ENABLE_MARKED
// end else
5419: GO 5467
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5421: LD_EXP 26
5425: PUSH
5426: LD_EXP 19
5430: PUSH
5431: LD_OWVAR 2
5435: ARRAY
5436: ARRAY
5437: PUSH
5438: LD_INT 1
5440: ARRAY
5441: PPUSH
5442: LD_EXP 26
5446: PUSH
5447: LD_EXP 19
5451: PUSH
5452: LD_OWVAR 2
5456: ARRAY
5457: ARRAY
5458: PUSH
5459: LD_INT 2
5461: ARRAY
5462: PPUSH
5463: CALL_OW 86
// end ; InitApeman ;
5467: CALL 6203 0 0
// if def_builduptime then
5471: LD_EXP 57
5475: IFFALSE 5481
// BeginBuildUp ;
5477: CALL 8915 0 0
// end ; end_of_file
5481: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5482: GO 5484
5484: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5485: LD_INT 4
5487: PPUSH
5488: LD_INT 5
5490: PPUSH
5491: CALL_OW 12
5495: PPUSH
5496: LD_INT 1
5498: PPUSH
5499: CALL_OW 57
// enable ;
5503: ENABLE
// end ;
5504: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5505: GO 5507
5507: DISABLE
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
// begin case tick of 1 .. 1 1$0 :
5512: LD_OWVAR 1
5516: PUSH
5517: LD_INT 1
5519: DOUBLE
5520: GREATEREQUAL
5521: IFFALSE 5529
5523: LD_INT 2100
5525: DOUBLE
5526: LESSEQUAL
5527: IFTRUE 5531
5529: GO 5559
5531: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5532: LD_EXP 9
5536: PUSH
5537: LD_INT 100
5539: DIVREAL
5540: PUSH
5541: LD_INT 350
5543: PPUSH
5544: LD_INT 1050
5546: PPUSH
5547: CALL_OW 12
5551: MUL
5552: PPUSH
5553: CALL_OW 67
5557: GO 5861
5559: LD_INT 2100
5561: PUSH
5562: LD_INT 1
5564: PLUS
5565: DOUBLE
5566: GREATEREQUAL
5567: IFFALSE 5575
5569: LD_INT 10500
5571: DOUBLE
5572: LESSEQUAL
5573: IFTRUE 5577
5575: GO 5605
5577: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5578: LD_EXP 9
5582: PUSH
5583: LD_INT 100
5585: DIVREAL
5586: PUSH
5587: LD_INT 1050
5589: PPUSH
5590: LD_INT 1575
5592: PPUSH
5593: CALL_OW 12
5597: MUL
5598: PPUSH
5599: CALL_OW 67
5603: GO 5861
5605: LD_INT 10500
5607: PUSH
5608: LD_INT 1
5610: PLUS
5611: DOUBLE
5612: GREATEREQUAL
5613: IFFALSE 5621
5615: LD_INT 21000
5617: DOUBLE
5618: LESSEQUAL
5619: IFTRUE 5623
5621: GO 5651
5623: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5624: LD_EXP 9
5628: PUSH
5629: LD_INT 100
5631: DIVREAL
5632: PUSH
5633: LD_INT 1575
5635: PPUSH
5636: LD_INT 2100
5638: PPUSH
5639: CALL_OW 12
5643: MUL
5644: PPUSH
5645: CALL_OW 67
5649: GO 5861
5651: LD_INT 21000
5653: PUSH
5654: LD_INT 1
5656: PLUS
5657: DOUBLE
5658: GREATEREQUAL
5659: IFFALSE 5667
5661: LD_INT 42000
5663: DOUBLE
5664: LESSEQUAL
5665: IFTRUE 5669
5667: GO 5697
5669: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5670: LD_EXP 9
5674: PUSH
5675: LD_INT 100
5677: DIVREAL
5678: PUSH
5679: LD_INT 2100
5681: PPUSH
5682: LD_INT 2625
5684: PPUSH
5685: CALL_OW 12
5689: MUL
5690: PPUSH
5691: CALL_OW 67
5695: GO 5861
5697: LD_INT 42000
5699: PUSH
5700: LD_INT 1
5702: PLUS
5703: DOUBLE
5704: GREATEREQUAL
5705: IFFALSE 5713
5707: LD_INT 63000
5709: DOUBLE
5710: LESSEQUAL
5711: IFTRUE 5715
5713: GO 5743
5715: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5716: LD_EXP 9
5720: PUSH
5721: LD_INT 100
5723: DIVREAL
5724: PUSH
5725: LD_INT 2625
5727: PPUSH
5728: LD_INT 3150
5730: PPUSH
5731: CALL_OW 12
5735: MUL
5736: PPUSH
5737: CALL_OW 67
5741: GO 5861
5743: LD_INT 63000
5745: PUSH
5746: LD_INT 1
5748: PLUS
5749: DOUBLE
5750: GREATEREQUAL
5751: IFFALSE 5759
5753: LD_INT 105000
5755: DOUBLE
5756: LESSEQUAL
5757: IFTRUE 5761
5759: GO 5789
5761: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5762: LD_EXP 9
5766: PUSH
5767: LD_INT 100
5769: DIVREAL
5770: PUSH
5771: LD_INT 3150
5773: PPUSH
5774: LD_INT 3675
5776: PPUSH
5777: CALL_OW 12
5781: MUL
5782: PPUSH
5783: CALL_OW 67
5787: GO 5861
5789: LD_INT 105000
5791: PUSH
5792: LD_INT 1
5794: PLUS
5795: DOUBLE
5796: GREATEREQUAL
5797: IFFALSE 5805
5799: LD_INT 630000
5801: DOUBLE
5802: LESSEQUAL
5803: IFTRUE 5807
5805: GO 5835
5807: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5808: LD_EXP 9
5812: PUSH
5813: LD_INT 100
5815: DIVREAL
5816: PUSH
5817: LD_INT 3675
5819: PPUSH
5820: LD_INT 4200
5822: PPUSH
5823: CALL_OW 12
5827: MUL
5828: PPUSH
5829: CALL_OW 67
5833: GO 5861
5835: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5836: LD_EXP 9
5840: PUSH
5841: LD_INT 100
5843: DIVREAL
5844: PUSH
5845: LD_INT 4200
5847: PPUSH
5848: LD_INT 5250
5850: PPUSH
5851: CALL_OW 12
5855: MUL
5856: PPUSH
5857: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5861: LD_ADDR_VAR 0 2
5865: PUSH
5866: LD_INT 3
5868: PPUSH
5869: LD_INT 5
5871: PPUSH
5872: CALL_OW 12
5876: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5877: LD_ADDR_VAR 0 1
5881: PUSH
5882: LD_EXP 19
5886: PUSH
5887: LD_INT 0
5889: PUSH
5890: EMPTY
5891: LIST
5892: DIFF
5893: PUSH
5894: FOR_IN
5895: IFFALSE 5944
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5897: LD_VAR 0 2
5901: PPUSH
5902: LD_EXP 26
5906: PUSH
5907: LD_VAR 0 1
5911: ARRAY
5912: PUSH
5913: LD_INT 1
5915: ARRAY
5916: PPUSH
5917: LD_EXP 26
5921: PUSH
5922: LD_VAR 0 1
5926: ARRAY
5927: PUSH
5928: LD_INT 2
5930: ARRAY
5931: PPUSH
5932: LD_INT 20
5934: PPUSH
5935: LD_INT 1
5937: PPUSH
5938: CALL_OW 56
5942: GO 5894
5944: POP
5945: POP
// enable ;
5946: ENABLE
// end ;
5947: PPOPN 2
5949: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
5950: GO 5952
5952: DISABLE
5953: LD_INT 0
5955: PPUSH
5956: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
5957: LD_INT 1
5959: PPUSH
5960: LD_INT 1
5962: PPUSH
5963: CALL_OW 287
5967: PUSH
5968: LD_INT 200
5970: PUSH
5971: LD_EXP 9
5975: MINUS
5976: PUSH
5977: LD_INT 100
5979: DIVREAL
5980: PUSH
5981: LD_INT 5
5983: MUL
5984: LESS
5985: IFFALSE 6008
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
5987: LD_INT 3
5989: PPUSH
5990: LD_INT 5
5992: PPUSH
5993: CALL_OW 12
5997: PPUSH
5998: LD_INT 1
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: CALL_OW 55
// enable ;
6008: ENABLE
// end ; end_of_file
6009: PPOPN 2
6011: END
// every 20 20$00 trigger apemanNumber do
6012: LD_EXP 34
6016: IFFALSE 6049
6018: GO 6020
6020: DISABLE
// begin enable ;
6021: ENABLE
// if apeLevel >= 8 then
6022: LD_EXP 39
6026: PUSH
6027: LD_INT 8
6029: GREATEREQUAL
6030: IFFALSE 6035
// disable else
6032: DISABLE
6033: GO 6049
// apeLevel := apeLevel + 1 ;
6035: LD_ADDR_EXP 39
6039: PUSH
6040: LD_EXP 39
6044: PUSH
6045: LD_INT 1
6047: PLUS
6048: ST_TO_ADDR
// end ;
6049: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6050: LD_EXP 34
6054: PUSH
6055: LD_EXP 35
6059: LESS
6060: IFFALSE 6200
6062: GO 6064
6064: DISABLE
6065: LD_INT 0
6067: PPUSH
6068: PPUSH
6069: PPUSH
6070: PPUSH
// begin enable ;
6071: ENABLE
// for i := 1 to apemanPos do
6072: LD_ADDR_VAR 0 1
6076: PUSH
6077: DOUBLE
6078: LD_INT 1
6080: DEC
6081: ST_TO_ADDR
6082: LD_EXP 37
6086: PUSH
6087: FOR_TO
6088: IFFALSE 6198
// begin if apemanPlayerCount [ i ] then
6090: LD_EXP 38
6094: PUSH
6095: LD_VAR 0 1
6099: ARRAY
6100: IFFALSE 6196
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6102: LD_EXP 38
6106: PUSH
6107: LD_VAR 0 1
6111: ARRAY
6112: PUSH
6113: LD_EXP 37
6117: PUSH
6118: LD_VAR 0 1
6122: ARRAY
6123: GREATER
6124: IFFALSE 6196
// begin ape := PrepareApeman ;
6126: LD_ADDR_VAR 0 2
6130: PUSH
6131: CALL 6711 0 0
6135: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6136: LD_VAR 0 2
6140: PPUSH
6141: LD_EXP 40
6145: PUSH
6146: LD_VAR 0 1
6150: ARRAY
6151: PPUSH
6152: LD_INT 0
6154: PPUSH
6155: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6159: LD_ADDR_EXP 37
6163: PUSH
6164: LD_EXP 37
6168: PPUSH
6169: LD_VAR 0 1
6173: PPUSH
6174: LD_EXP 37
6178: PUSH
6179: LD_VAR 0 1
6183: ARRAY
6184: PUSH
6185: LD_VAR 0 2
6189: UNION
6190: PPUSH
6191: CALL_OW 1
6195: ST_TO_ADDR
// end ; end ; end ;
6196: GO 6087
6198: POP
6199: POP
// end ;
6200: PPOPN 4
6202: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6203: LD_INT 0
6205: PPUSH
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
6210: PPUSH
6211: PPUSH
// playersAmount := 0 ;
6212: LD_ADDR_VAR 0 3
6216: PUSH
6217: LD_INT 0
6219: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6220: LD_ADDR_VAR 0 7
6224: PUSH
6225: LD_INT 2
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: LD_INT 4
6233: PUSH
6234: LD_INT 5
6236: PUSH
6237: LD_INT 6
6239: PUSH
6240: LD_INT 7
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6251: LD_ADDR_EXP 40
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: LD_INT 0
6261: PUSH
6262: LD_INT 0
6264: PUSH
6265: LD_INT 0
6267: PUSH
6268: LD_INT 0
6270: PUSH
6271: LD_INT 0
6273: PUSH
6274: LD_INT 0
6276: PUSH
6277: LD_INT 0
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: ST_TO_ADDR
// for j = 1 to Side_Positions do
6290: LD_ADDR_VAR 0 4
6294: PUSH
6295: DOUBLE
6296: LD_INT 1
6298: DEC
6299: ST_TO_ADDR
6300: LD_EXP 19
6304: PUSH
6305: FOR_TO
6306: IFFALSE 6373
// if Side_Positions [ j ] then
6308: LD_EXP 19
6312: PUSH
6313: LD_VAR 0 4
6317: ARRAY
6318: IFFALSE 6371
// begin playersAmount := playersAmount + 1 ;
6320: LD_ADDR_VAR 0 3
6324: PUSH
6325: LD_VAR 0 3
6329: PUSH
6330: LD_INT 1
6332: PLUS
6333: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6334: LD_ADDR_EXP 40
6338: PUSH
6339: LD_EXP 40
6343: PPUSH
6344: LD_VAR 0 4
6348: PPUSH
6349: LD_VAR 0 7
6353: PUSH
6354: LD_EXP 19
6358: PUSH
6359: LD_VAR 0 4
6363: ARRAY
6364: ARRAY
6365: PPUSH
6366: CALL_OW 1
6370: ST_TO_ADDR
// end ;
6371: GO 6305
6373: POP
6374: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6375: LD_ADDR_EXP 36
6379: PUSH
6380: LD_INT 3
6382: PUSH
6383: LD_EXP 15
6387: MUL
6388: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6389: LD_ADDR_EXP 34
6393: PUSH
6394: LD_VAR 0 3
6398: PUSH
6399: LD_EXP 36
6403: MUL
6404: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6405: LD_ADDR_EXP 35
6409: PUSH
6410: LD_EXP 34
6414: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6415: LD_ADDR_EXP 37
6419: PUSH
6420: LD_INT 0
6422: PUSH
6423: LD_INT 0
6425: PUSH
6426: LD_INT 0
6428: PUSH
6429: LD_INT 0
6431: PUSH
6432: LD_INT 0
6434: PUSH
6435: LD_INT 0
6437: PUSH
6438: LD_INT 0
6440: PUSH
6441: LD_INT 0
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6454: LD_ADDR_EXP 38
6458: PUSH
6459: LD_INT 0
6461: PUSH
6462: LD_INT 0
6464: PUSH
6465: LD_INT 0
6467: PUSH
6468: LD_INT 0
6470: PUSH
6471: LD_INT 0
6473: PUSH
6474: LD_INT 0
6476: PUSH
6477: LD_INT 0
6479: PUSH
6480: LD_INT 0
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: ST_TO_ADDR
// apeLevel := 1 ;
6493: LD_ADDR_EXP 39
6497: PUSH
6498: LD_INT 1
6500: ST_TO_ADDR
// if not apemanNumber then
6501: LD_EXP 34
6505: NOT
6506: IFFALSE 6510
// exit ;
6508: GO 6706
// for i := 1 to apemanPerPlayer do
6510: LD_ADDR_VAR 0 2
6514: PUSH
6515: DOUBLE
6516: LD_INT 1
6518: DEC
6519: ST_TO_ADDR
6520: LD_EXP 36
6524: PUSH
6525: FOR_TO
6526: IFFALSE 6704
// begin for j := 1 to Side_Positions do
6528: LD_ADDR_VAR 0 4
6532: PUSH
6533: DOUBLE
6534: LD_INT 1
6536: DEC
6537: ST_TO_ADDR
6538: LD_EXP 19
6542: PUSH
6543: FOR_TO
6544: IFFALSE 6700
// if Side_Positions [ j ] then
6546: LD_EXP 19
6550: PUSH
6551: LD_VAR 0 4
6555: ARRAY
6556: IFFALSE 6698
// begin pos := Side_Positions [ j ] ;
6558: LD_ADDR_VAR 0 6
6562: PUSH
6563: LD_EXP 19
6567: PUSH
6568: LD_VAR 0 4
6572: ARRAY
6573: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6574: LD_ADDR_EXP 38
6578: PUSH
6579: LD_EXP 38
6583: PPUSH
6584: LD_VAR 0 4
6588: PPUSH
6589: LD_EXP 38
6593: PUSH
6594: LD_VAR 0 4
6598: ARRAY
6599: PUSH
6600: LD_INT 1
6602: PLUS
6603: PPUSH
6604: CALL_OW 1
6608: ST_TO_ADDR
// ape := PrepareApeman ;
6609: LD_ADDR_VAR 0 5
6613: PUSH
6614: CALL 6711 0 0
6618: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6619: LD_ADDR_EXP 37
6623: PUSH
6624: LD_EXP 37
6628: PPUSH
6629: LD_VAR 0 4
6633: PPUSH
6634: LD_EXP 37
6638: PUSH
6639: LD_VAR 0 4
6643: ARRAY
6644: PPUSH
6645: LD_EXP 37
6649: PUSH
6650: LD_VAR 0 4
6654: ARRAY
6655: PUSH
6656: LD_INT 1
6658: PLUS
6659: PPUSH
6660: LD_VAR 0 5
6664: PPUSH
6665: CALL_OW 1
6669: PPUSH
6670: CALL_OW 1
6674: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6675: LD_VAR 0 5
6679: PPUSH
6680: LD_EXP 40
6684: PUSH
6685: LD_VAR 0 4
6689: ARRAY
6690: PPUSH
6691: LD_INT 0
6693: PPUSH
6694: CALL_OW 49
// end ;
6698: GO 6543
6700: POP
6701: POP
// end ;
6702: GO 6525
6704: POP
6705: POP
// end ;
6706: LD_VAR 0 1
6710: RET
// export function PrepareApeman ; var bonus ; begin
6711: LD_INT 0
6713: PPUSH
6714: PPUSH
// uc_side := 0 ;
6715: LD_ADDR_OWVAR 20
6719: PUSH
6720: LD_INT 0
6722: ST_TO_ADDR
// uc_nation := 0 ;
6723: LD_ADDR_OWVAR 21
6727: PUSH
6728: LD_INT 0
6730: ST_TO_ADDR
// InitHc ;
6731: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6735: LD_ADDR_VAR 0 2
6739: PUSH
6740: LD_INT 1
6742: NEG
6743: PUSH
6744: LD_INT 0
6746: PUSH
6747: LD_INT 1
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: LIST
6754: PUSH
6755: LD_OWVAR 1
6759: PUSH
6760: LD_INT 3
6762: MOD
6763: PUSH
6764: LD_INT 1
6766: PLUS
6767: ARRAY
6768: ST_TO_ADDR
// hc_class := class_apeman ;
6769: LD_ADDR_OWVAR 28
6773: PUSH
6774: LD_INT 12
6776: ST_TO_ADDR
// hc_gallery :=  ;
6777: LD_ADDR_OWVAR 33
6781: PUSH
6782: LD_STRING 
6784: ST_TO_ADDR
// hc_name :=  ;
6785: LD_ADDR_OWVAR 26
6789: PUSH
6790: LD_STRING 
6792: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6793: LD_ADDR_OWVAR 31
6797: PUSH
6798: LD_EXP 39
6802: PUSH
6803: LD_VAR 0 2
6807: PLUS
6808: PUSH
6809: LD_EXP 39
6813: PUSH
6814: LD_VAR 0 2
6818: PLUS
6819: PUSH
6820: LD_EXP 39
6824: PUSH
6825: LD_VAR 0 2
6829: PLUS
6830: PUSH
6831: LD_EXP 39
6835: PUSH
6836: LD_VAR 0 2
6840: PLUS
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6848: LD_ADDR_OWVAR 35
6852: PUSH
6853: LD_INT 10
6855: PUSH
6856: LD_VAR 0 2
6860: MUL
6861: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6862: LD_ADDR_OWVAR 29
6866: PUSH
6867: LD_INT 12
6869: PUSH
6870: LD_INT 10
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: ST_TO_ADDR
// result := CreateHuman ;
6877: LD_ADDR_VAR 0 1
6881: PUSH
6882: CALL_OW 44
6886: ST_TO_ADDR
// end ;
6887: LD_VAR 0 1
6891: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6892: LD_INT 0
6894: PPUSH
6895: PPUSH
6896: PPUSH
// if not ape then
6897: LD_VAR 0 1
6901: NOT
6902: IFFALSE 6906
// exit ;
6904: GO 7031
// side := GetSide ( ape ) ;
6906: LD_ADDR_VAR 0 3
6910: PUSH
6911: LD_VAR 0 1
6915: PPUSH
6916: CALL_OW 255
6920: ST_TO_ADDR
// if not side then
6921: LD_VAR 0 3
6925: NOT
6926: IFFALSE 6980
// begin for i = 1 to apemanPos do
6928: LD_ADDR_VAR 0 4
6932: PUSH
6933: DOUBLE
6934: LD_INT 1
6936: DEC
6937: ST_TO_ADDR
6938: LD_EXP 37
6942: PUSH
6943: FOR_TO
6944: IFFALSE 6978
// if ape in apemanPos [ i ] then
6946: LD_VAR 0 1
6950: PUSH
6951: LD_EXP 37
6955: PUSH
6956: LD_VAR 0 4
6960: ARRAY
6961: IN
6962: IFFALSE 6976
// begin side := i ;
6964: LD_ADDR_VAR 0 3
6968: PUSH
6969: LD_VAR 0 4
6973: ST_TO_ADDR
// break ;
6974: GO 6978
// end ;
6976: GO 6943
6978: POP
6979: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6980: LD_ADDR_EXP 37
6984: PUSH
6985: LD_EXP 37
6989: PPUSH
6990: LD_VAR 0 3
6994: PPUSH
6995: LD_EXP 37
6999: PUSH
7000: LD_VAR 0 3
7004: ARRAY
7005: PUSH
7006: LD_VAR 0 1
7010: DIFF
7011: PPUSH
7012: CALL_OW 1
7016: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7017: LD_ADDR_EXP 34
7021: PUSH
7022: LD_EXP 34
7026: PUSH
7027: LD_INT 1
7029: MINUS
7030: ST_TO_ADDR
// end ; end_of_file
7031: LD_VAR 0 2
7035: RET
// var respawn , inqueue ; export function init_respawning ; begin
7036: LD_INT 0
7038: PPUSH
// respawn := Rand ( 1 , 8 ) ;
7039: LD_ADDR_LOC 9
7043: PUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_INT 8
7049: PPUSH
7050: CALL_OW 12
7054: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7055: LD_ADDR_LOC 10
7059: PUSH
7060: LD_INT 0
7062: PUSH
7063: LD_INT 0
7065: PUSH
7066: LD_INT 0
7068: PUSH
7069: LD_INT 0
7071: PUSH
7072: LD_INT 0
7074: PUSH
7075: LD_INT 0
7077: PUSH
7078: LD_INT 0
7080: PUSH
7081: LD_INT 0
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: ST_TO_ADDR
// end ;
7094: LD_VAR 0 1
7098: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
7099: GO 7101
7101: DISABLE
7102: LD_INT 0
7104: PPUSH
7105: PPUSH
7106: PPUSH
7107: PPUSH
// begin if respawning_time_max = 0 then
7108: LD_EXP 13
7112: PUSH
7113: LD_INT 0
7115: EQUAL
7116: IFFALSE 7120
// exit ;
7118: GO 7627
// if respawn = 8 then
7120: LD_LOC 9
7124: PUSH
7125: LD_INT 8
7127: EQUAL
7128: IFFALSE 7140
// respawn := 1 else
7130: LD_ADDR_LOC 9
7134: PUSH
7135: LD_INT 1
7137: ST_TO_ADDR
7138: GO 7154
// respawn := respawn + 1 ;
7140: LD_ADDR_LOC 9
7144: PUSH
7145: LD_LOC 9
7149: PUSH
7150: LD_INT 1
7152: PLUS
7153: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
7154: LD_EXP 19
7158: PUSH
7159: LD_LOC 9
7163: ARRAY
7164: PUSH
7165: LD_LOC 10
7169: PUSH
7170: LD_LOC 9
7174: ARRAY
7175: NOT
7176: AND
7177: IFFALSE 7626
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
7179: LD_ADDR_VAR 0 1
7183: PUSH
7184: LD_INT 21
7186: PUSH
7187: LD_INT 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 22
7196: PUSH
7197: LD_LOC 9
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 3
7208: PUSH
7209: LD_INT 23
7211: PUSH
7212: LD_INT 0
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: PPUSH
7225: CALL_OW 69
7229: ST_TO_ADDR
// if n < number_of_people then
7230: LD_VAR 0 1
7234: PUSH
7235: LD_EXP 5
7239: LESS
7240: IFFALSE 7623
// begin aktresp := respawn ;
7242: LD_ADDR_VAR 0 3
7246: PUSH
7247: LD_LOC 9
7251: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7252: LD_ADDR_LOC 10
7256: PUSH
7257: LD_LOC 10
7261: PPUSH
7262: LD_VAR 0 3
7266: PPUSH
7267: LD_INT 1
7269: PPUSH
7270: CALL_OW 1
7274: ST_TO_ADDR
// enable ;
7275: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7276: LD_EXP 12
7280: PPUSH
7281: LD_EXP 13
7285: PPUSH
7286: CALL_OW 12
7290: PPUSH
7291: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7295: LD_ADDR_LOC 10
7299: PUSH
7300: LD_LOC 10
7304: PPUSH
7305: LD_VAR 0 3
7309: PPUSH
7310: LD_INT 0
7312: PPUSH
7313: CALL_OW 1
7317: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7318: LD_ADDR_VAR 0 2
7322: PUSH
7323: LD_INT 21
7325: PUSH
7326: LD_INT 3
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 2
7335: PUSH
7336: LD_INT 30
7338: PUSH
7339: LD_INT 0
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PUSH
7346: LD_INT 30
7348: PUSH
7349: LD_INT 1
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 50
7363: PUSH
7364: EMPTY
7365: LIST
7366: PUSH
7367: LD_INT 22
7369: PUSH
7370: LD_VAR 0 3
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 69
7389: ST_TO_ADDR
// if building_list = 0 then
7390: LD_VAR 0 2
7394: PUSH
7395: LD_INT 0
7397: EQUAL
7398: IFFALSE 7443
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7400: LD_ADDR_VAR 0 2
7404: PUSH
7405: LD_INT 21
7407: PUSH
7408: LD_INT 3
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 50
7417: PUSH
7418: EMPTY
7419: LIST
7420: PUSH
7421: LD_INT 22
7423: PUSH
7424: LD_VAR 0 3
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: LIST
7437: PPUSH
7438: CALL_OW 69
7442: ST_TO_ADDR
// if building_list = 0 then
7443: LD_VAR 0 2
7447: PUSH
7448: LD_INT 0
7450: EQUAL
7451: IFFALSE 7455
// exit ;
7453: GO 7627
// hc_name :=  ;
7455: LD_ADDR_OWVAR 26
7459: PUSH
7460: LD_STRING 
7462: ST_TO_ADDR
// hc_importance := 0 ;
7463: LD_ADDR_OWVAR 32
7467: PUSH
7468: LD_INT 0
7470: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7471: LD_INT 0
7473: PPUSH
7474: LD_INT 0
7476: PPUSH
7477: LD_EXP 6
7481: PUSH
7482: LD_INT 2
7484: DIV
7485: PPUSH
7486: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7490: LD_ADDR_OWVAR 21
7494: PUSH
7495: LD_EXP 20
7499: PUSH
7500: LD_VAR 0 3
7504: ARRAY
7505: ST_TO_ADDR
// uc_side := aktresp ;
7506: LD_ADDR_OWVAR 20
7510: PUSH
7511: LD_VAR 0 3
7515: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
7516: LD_ADDR_VAR 0 4
7520: PUSH
7521: LD_VAR 0 2
7525: PUSH
7526: LD_INT 1
7528: PPUSH
7529: LD_VAR 0 2
7533: PUSH
7534: LD_INT 0
7536: PLUS
7537: PPUSH
7538: CALL_OW 12
7542: ARRAY
7543: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
7544: LD_VAR 0 4
7548: PPUSH
7549: CALL_OW 266
7553: PUSH
7554: LD_INT 0
7556: PUSH
7557: LD_INT 1
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: IN
7564: IFFALSE 7576
// n = 25 else
7566: LD_ADDR_VAR 0 1
7570: PUSH
7571: LD_INT 25
7573: ST_TO_ADDR
7574: GO 7584
// n = 10 ;
7576: LD_ADDR_VAR 0 1
7580: PUSH
7581: LD_INT 10
7583: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
7584: CALL_OW 44
7588: PPUSH
7589: LD_VAR 0 4
7593: PPUSH
7594: CALL_OW 250
7598: PPUSH
7599: LD_VAR 0 4
7603: PPUSH
7604: CALL_OW 251
7608: PPUSH
7609: LD_VAR 0 1
7613: PPUSH
7614: LD_INT 1
7616: PPUSH
7617: CALL_OW 50
// end else
7621: GO 7624
// enable ;
7623: ENABLE
// end else
7624: GO 7627
// enable ;
7626: ENABLE
// end ; end_of_file
7627: PPOPN 4
7629: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7630: LD_VAR 0 1
7634: PPUSH
7635: CALL_OW 266
7639: PUSH
7640: LD_INT 0
7642: PUSH
7643: LD_INT 1
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: IN
7650: IFFALSE 7675
// SetBName ( b , @ & GetSide ( b ) ) ;
7652: LD_VAR 0 1
7656: PPUSH
7657: LD_STRING @
7659: PUSH
7660: LD_VAR 0 1
7664: PPUSH
7665: CALL_OW 255
7669: STR
7670: PPUSH
7671: CALL_OW 500
// if def_game_rules then
7675: LD_EXP 43
7679: IFFALSE 7716
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7681: LD_VAR 0 1
7685: PPUSH
7686: LD_VAR 0 1
7690: PPUSH
7691: CALL_OW 266
7695: PPUSH
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 255
7705: PPUSH
7706: LD_INT 0
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: CALL 13130 0 5
// end ;
7716: PPOPN 2
7718: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7719: LD_VAR 0 1
7723: PPUSH
7724: CALL_OW 266
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: LD_INT 1
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: IN
7739: IFFALSE 7764
// SetBName ( b , @ & GetSide ( b ) ) ;
7741: LD_VAR 0 1
7745: PPUSH
7746: LD_STRING @
7748: PUSH
7749: LD_VAR 0 1
7753: PPUSH
7754: CALL_OW 255
7758: STR
7759: PPUSH
7760: CALL_OW 500
// if def_game_rules then
7764: LD_EXP 43
7768: IFFALSE 7807
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7770: LD_VAR 0 1
7774: PPUSH
7775: LD_VAR 0 1
7779: PPUSH
7780: CALL_OW 266
7784: PPUSH
7785: LD_VAR 0 1
7789: PPUSH
7790: CALL_OW 255
7794: PPUSH
7795: LD_VAR 0 2
7799: PPUSH
7800: LD_INT 1
7802: PPUSH
7803: CALL 13130 0 5
// end ;
7807: PPOPN 3
7809: END
// on VehicleConstructed ( veh , fac ) do var side ;
7810: LD_INT 0
7812: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7813: LD_VAR 0 1
7817: PPUSH
7818: CALL_OW 263
7822: PUSH
7823: LD_INT 5
7825: EQUAL
7826: IFFALSE 7968
// begin side := GetSide ( veh ) ;
7828: LD_ADDR_VAR 0 3
7832: PUSH
7833: LD_VAR 0 1
7837: PPUSH
7838: CALL_OW 255
7842: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7843: LD_ADDR_EXP 37
7847: PUSH
7848: LD_EXP 37
7852: PPUSH
7853: LD_VAR 0 3
7857: PPUSH
7858: LD_EXP 37
7862: PUSH
7863: LD_VAR 0 3
7867: ARRAY
7868: PPUSH
7869: LD_INT 52
7871: PUSH
7872: EMPTY
7873: LIST
7874: PPUSH
7875: CALL_OW 72
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_VAR 0 3
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: PUSH
7892: LD_INT 2
7894: PUSH
7895: LD_INT 33
7897: PUSH
7898: LD_INT 5
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 12
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: LD_INT 25
7917: PUSH
7918: LD_INT 15
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 25
7927: PUSH
7928: LD_INT 16
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PUSH
7935: LD_INT 25
7937: PUSH
7938: LD_INT 17
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PPUSH
7957: CALL_OW 69
7961: UNION
7962: PPUSH
7963: CALL_OW 1
7967: ST_TO_ADDR
// end ; end ;
7968: PPOPN 3
7970: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7971: LD_INT 0
7973: PPUSH
7974: PPUSH
7975: PPUSH
7976: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7977: LD_VAR 0 1
7981: PPUSH
7982: CALL_OW 257
7986: PUSH
7987: LD_INT 12
7989: PUSH
7990: LD_INT 15
7992: PUSH
7993: LD_INT 17
7995: PUSH
7996: LD_INT 16
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: IN
8005: PUSH
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 263
8015: PUSH
8016: LD_INT 5
8018: EQUAL
8019: OR
8020: IFFALSE 8031
// ApeKilled ( j ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: CALL 6892 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
8031: LD_VAR 0 1
8035: PPUSH
8036: CALL_OW 266
8040: PUSH
8041: LD_INT 0
8043: PUSH
8044: LD_INT 1
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: IN
8051: IFFALSE 8133
// begin pos := Side_Positions [ GetSide ( j ) ] ;
8053: LD_ADDR_VAR 0 4
8057: PUSH
8058: LD_EXP 19
8062: PUSH
8063: LD_VAR 0 1
8067: PPUSH
8068: CALL_OW 255
8072: ARRAY
8073: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
8074: LD_ADDR_VAR 0 2
8078: PUSH
8079: LD_EXP 26
8083: PUSH
8084: LD_VAR 0 4
8088: ARRAY
8089: PUSH
8090: LD_INT 1
8092: ARRAY
8093: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
8094: LD_ADDR_VAR 0 3
8098: PUSH
8099: LD_EXP 26
8103: PUSH
8104: LD_VAR 0 4
8108: ARRAY
8109: PUSH
8110: LD_INT 2
8112: ARRAY
8113: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
8114: LD_VAR 0 2
8118: PPUSH
8119: LD_VAR 0 3
8123: PPUSH
8124: CALL_OW 420
8128: PPUSH
8129: CALL_OW 419
// end ; if def_game_rules then
8133: LD_EXP 43
8137: IFFALSE 8236
// if ( GetType ( j ) = 3 ) then
8139: LD_VAR 0 1
8143: PPUSH
8144: CALL_OW 247
8148: PUSH
8149: LD_INT 3
8151: EQUAL
8152: IFFALSE 8192
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8154: LD_VAR 0 1
8158: PPUSH
8159: LD_VAR 0 1
8163: PPUSH
8164: CALL_OW 266
8168: PPUSH
8169: LD_VAR 0 1
8173: PPUSH
8174: CALL_OW 255
8178: PPUSH
8179: LD_INT 0
8181: PPUSH
8182: LD_INT 1
8184: NEG
8185: PPUSH
8186: CALL 13130 0 5
8190: GO 8236
// if ( GetChassis ( j ) = 25 ) then
8192: LD_VAR 0 1
8196: PPUSH
8197: CALL_OW 265
8201: PUSH
8202: LD_INT 25
8204: EQUAL
8205: IFFALSE 8236
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8207: LD_VAR 0 1
8211: PPUSH
8212: LD_INT 37
8214: PPUSH
8215: LD_VAR 0 1
8219: PPUSH
8220: CALL_OW 255
8224: PPUSH
8225: LD_INT 0
8227: PPUSH
8228: LD_INT 1
8230: NEG
8231: PPUSH
8232: CALL 13130 0 5
// end ;
8236: PPOPN 5
8238: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8239: LD_EXP 43
8243: PUSH
8244: LD_VAR 0 1
8248: PPUSH
8249: CALL_OW 265
8253: PUSH
8254: LD_INT 25
8256: EQUAL
8257: AND
8258: IFFALSE 8290
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8260: LD_VAR 0 1
8264: PPUSH
8265: LD_INT 37
8267: PPUSH
8268: LD_VAR 0 1
8272: PPUSH
8273: CALL_OW 255
8277: PPUSH
8278: LD_VAR 0 3
8282: PPUSH
8283: LD_INT 1
8285: PPUSH
8286: CALL 13130 0 5
// end ;
8290: PPOPN 4
8292: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8293: LD_VAR 0 1
8297: PPUSH
8298: LD_VAR 0 2
8302: PPUSH
8303: LD_VAR 0 3
8307: PPUSH
8308: LD_OWVAR 2
8312: PPUSH
8313: CALL 13901 0 4
8317: PPOPN 3
8319: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8320: GO 8322
8322: DISABLE
8323: LD_INT 0
8325: PPUSH
8326: PPUSH
8327: PPUSH
8328: PPUSH
8329: PPUSH
// begin sib_mined := [ ] ;
8330: LD_ADDR_VAR 0 5
8334: PUSH
8335: EMPTY
8336: ST_TO_ADDR
// for i := 1 to 8 do
8337: LD_ADDR_VAR 0 1
8341: PUSH
8342: DOUBLE
8343: LD_INT 1
8345: DEC
8346: ST_TO_ADDR
8347: LD_INT 8
8349: PUSH
8350: FOR_TO
8351: IFFALSE 8507
// if Side_Positions [ i ] then
8353: LD_EXP 19
8357: PUSH
8358: LD_VAR 0 1
8362: ARRAY
8363: IFFALSE 8491
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8365: LD_ADDR_VAR 0 4
8369: PUSH
8370: LD_INT 22
8372: PUSH
8373: LD_VAR 0 1
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 2
8384: PUSH
8385: LD_INT 30
8387: PUSH
8388: LD_INT 0
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 30
8397: PUSH
8398: LD_INT 1
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PPUSH
8414: CALL_OW 69
8418: ST_TO_ADDR
// pom := 0 ;
8419: LD_ADDR_VAR 0 3
8423: PUSH
8424: LD_INT 0
8426: ST_TO_ADDR
// for base in filter do
8427: LD_ADDR_VAR 0 2
8431: PUSH
8432: LD_VAR 0 4
8436: PUSH
8437: FOR_IN
8438: IFFALSE 8471
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8440: LD_ADDR_VAR 0 3
8444: PUSH
8445: LD_VAR 0 3
8449: PUSH
8450: LD_VAR 0 2
8454: PPUSH
8455: CALL_OW 274
8459: PPUSH
8460: LD_INT 3
8462: PPUSH
8463: CALL_OW 275
8467: PLUS
8468: ST_TO_ADDR
8469: GO 8437
8471: POP
8472: POP
// sib_mined := sib_mined ^ pom ;
8473: LD_ADDR_VAR 0 5
8477: PUSH
8478: LD_VAR 0 5
8482: PUSH
8483: LD_VAR 0 3
8487: ADD
8488: ST_TO_ADDR
// end else
8489: GO 8505
// sib_mined := sib_mined ^ 0 ;
8491: LD_ADDR_VAR 0 5
8495: PUSH
8496: LD_VAR 0 5
8500: PUSH
8501: LD_INT 0
8503: ADD
8504: ST_TO_ADDR
8505: GO 8350
8507: POP
8508: POP
// if not def_public_score then
8509: LD_EXP 2
8513: NOT
8514: IFFALSE 8604
// begin ExtraStrings := [ ] ;
8516: LD_ADDR_EXP 59
8520: PUSH
8521: EMPTY
8522: ST_TO_ADDR
// for i := 1 to 8 do
8523: LD_ADDR_VAR 0 1
8527: PUSH
8528: DOUBLE
8529: LD_INT 1
8531: DEC
8532: ST_TO_ADDR
8533: LD_INT 8
8535: PUSH
8536: FOR_TO
8537: IFFALSE 8600
// if Side_Positions [ i ] then
8539: LD_EXP 19
8543: PUSH
8544: LD_VAR 0 1
8548: ARRAY
8549: IFFALSE 8598
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8551: LD_ADDR_EXP 59
8555: PUSH
8556: LD_EXP 59
8560: PUSH
8561: LD_STRING #AlienBase-MinedPublic
8563: PUSH
8564: LD_VAR 0 1
8568: PUSH
8569: LD_VAR 0 1
8573: PUSH
8574: LD_VAR 0 5
8578: PUSH
8579: LD_VAR 0 1
8583: ARRAY
8584: PUSH
8585: LD_EXP 11
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: ADD
8597: ST_TO_ADDR
8598: GO 8536
8600: POP
8601: POP
// end else
8602: GO 8633
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8604: LD_ADDR_EXP 59
8608: PUSH
8609: LD_STRING #AlienBase-Mined
8611: PUSH
8612: LD_VAR 0 5
8616: PUSH
8617: LD_OWVAR 2
8621: ARRAY
8622: PUSH
8623: LD_EXP 11
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: LIST
8632: ST_TO_ADDR
// for i := 1 to 8 do
8633: LD_ADDR_VAR 0 1
8637: PUSH
8638: DOUBLE
8639: LD_INT 1
8641: DEC
8642: ST_TO_ADDR
8643: LD_INT 8
8645: PUSH
8646: FOR_TO
8647: IFFALSE 8717
// if sib_mined [ i ] >= amount_of_siberit then
8649: LD_VAR 0 5
8653: PUSH
8654: LD_VAR 0 1
8658: ARRAY
8659: PUSH
8660: LD_EXP 11
8664: GREATEREQUAL
8665: IFFALSE 8715
// begin wait ( 0 0$1 ) ;
8667: LD_INT 35
8669: PPUSH
8670: CALL_OW 67
// if IAmServer then
8674: CALL_OW 518
8678: IFFALSE 8687
// wait ( 0 0$1 ) ;
8680: LD_INT 35
8682: PPUSH
8683: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8687: LD_VAR 0 5
8691: PUSH
8692: LD_OWVAR 2
8696: ARRAY
8697: PUSH
8698: LD_EXP 11
8702: GREATEREQUAL
8703: IFFALSE 8711
// YouWinInMultiplayer else
8705: CALL_OW 106
8709: GO 8715
// YouLostInMultiplayer ;
8711: CALL_OW 107
// end ;
8715: GO 8646
8717: POP
8718: POP
// enable ;
8719: ENABLE
// end ; end_of_file
8720: PPOPN 5
8722: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8723: LD_INT 0
8725: PPUSH
8726: PPUSH
// for un in battle_flags_id do
8727: LD_ADDR_VAR 0 2
8731: PUSH
8732: LD_EXP 31
8736: PUSH
8737: FOR_IN
8738: IFFALSE 8813
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8740: LD_VAR 0 2
8744: PPUSH
8745: LD_INT 1
8747: PUSH
8748: LD_LOC 11
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PUSH
8757: LD_INT 2
8759: PUSH
8760: LD_LOC 11
8764: PUSH
8765: LD_INT 2
8767: DIV
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: LD_INT 3
8775: PUSH
8776: LD_LOC 11
8780: PUSH
8781: LD_INT 5
8783: DIV
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: LD_INT 20
8791: PUSH
8792: LD_LOC 11
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: PPUSH
8807: CALL_OW 423
8811: GO 8737
8813: POP
8814: POP
// end ;
8815: LD_VAR 0 1
8819: RET
// every 1 do var un ;
8820: GO 8822
8822: DISABLE
8823: LD_INT 0
8825: PPUSH
// begin if not def_morale_flags then
8826: LD_EXP 52
8830: NOT
8831: IFFALSE 8835
// exit ;
8833: GO 8912
// if not morale_decreasing_time then
8835: LD_EXP 10
8839: NOT
8840: IFFALSE 8844
// exit ;
8842: GO 8912
// strength = 100 ;
8844: LD_ADDR_LOC 11
8848: PUSH
8849: LD_INT 100
8851: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8852: LD_EXP 10
8856: PPUSH
8857: CALL_OW 67
// strength := strength - 1 ;
8861: LD_ADDR_LOC 11
8865: PUSH
8866: LD_LOC 11
8870: PUSH
8871: LD_INT 1
8873: MINUS
8874: ST_TO_ADDR
// Update_Flags ;
8875: CALL 8723 0 0
// until not strength ;
8879: LD_LOC 11
8883: NOT
8884: IFFALSE 8852
// for un in battle_flags_id do
8886: LD_ADDR_VAR 0 1
8890: PUSH
8891: LD_EXP 31
8895: PUSH
8896: FOR_IN
8897: IFFALSE 8910
// KillBattleFlag ( un ) ;
8899: LD_VAR 0 1
8903: PPUSH
8904: CALL_OW 419
8908: GO 8896
8910: POP
8911: POP
// end ; end_of_file
8912: PPOPN 1
8914: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8915: LD_INT 0
8917: PPUSH
8918: PPUSH
8919: PPUSH
// enable ( 600 ) ;
8920: LD_INT 600
8922: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8923: LD_ADDR_VAR 0 2
8927: PUSH
8928: DOUBLE
8929: LD_INT 1
8931: DEC
8932: ST_TO_ADDR
8933: LD_EXP 41
8937: PUSH
8938: FOR_TO
8939: IFFALSE 9094
// if Position_Sides [ i ] then
8941: LD_EXP 23
8945: PUSH
8946: LD_VAR 0 2
8950: ARRAY
8951: IFFALSE 9092
// for j := 1 to 8 do
8953: LD_ADDR_VAR 0 3
8957: PUSH
8958: DOUBLE
8959: LD_INT 1
8961: DEC
8962: ST_TO_ADDR
8963: LD_INT 8
8965: PUSH
8966: FOR_TO
8967: IFFALSE 9090
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8969: LD_EXP 19
8973: PUSH
8974: LD_VAR 0 3
8978: ARRAY
8979: PUSH
8980: LD_EXP 17
8984: PUSH
8985: LD_EXP 23
8989: PUSH
8990: LD_VAR 0 2
8994: ARRAY
8995: ARRAY
8996: PUSH
8997: LD_EXP 17
9001: PUSH
9002: LD_VAR 0 3
9006: ARRAY
9007: NONEQUAL
9008: PUSH
9009: LD_EXP 21
9013: NOT
9014: PUSH
9015: LD_EXP 23
9019: PUSH
9020: LD_VAR 0 2
9024: ARRAY
9025: PUSH
9026: LD_VAR 0 3
9030: NONEQUAL
9031: AND
9032: OR
9033: AND
9034: IFFALSE 9058
// HideArea ( j , BuildUpAreas [ i ] ) else
9036: LD_VAR 0 3
9040: PPUSH
9041: LD_EXP 41
9045: PUSH
9046: LD_VAR 0 2
9050: ARRAY
9051: PPUSH
9052: CALL_OW 333
9056: GO 9088
// if ( j = your_side ) then
9058: LD_VAR 0 3
9062: PUSH
9063: LD_OWVAR 2
9067: EQUAL
9068: IFFALSE 9088
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
9070: LD_EXP 41
9074: PUSH
9075: LD_VAR 0 2
9079: ARRAY
9080: PPUSH
9081: LD_INT 5
9083: PPUSH
9084: CALL_OW 424
9088: GO 8966
9090: POP
9091: POP
9092: GO 8938
9094: POP
9095: POP
// end ;
9096: LD_VAR 0 1
9100: RET
// export function EndBuildUp ; var i , j ; begin
9101: LD_INT 0
9103: PPUSH
9104: PPUSH
9105: PPUSH
// disable ( 600 ) ;
9106: LD_INT 600
9108: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
9109: LD_ADDR_VAR 0 2
9113: PUSH
9114: DOUBLE
9115: LD_INT 1
9117: DEC
9118: ST_TO_ADDR
9119: LD_EXP 41
9123: PUSH
9124: FOR_TO
9125: IFFALSE 9280
// if Position_Sides [ i ] then
9127: LD_EXP 23
9131: PUSH
9132: LD_VAR 0 2
9136: ARRAY
9137: IFFALSE 9278
// for j := 1 to 8 do
9139: LD_ADDR_VAR 0 3
9143: PUSH
9144: DOUBLE
9145: LD_INT 1
9147: DEC
9148: ST_TO_ADDR
9149: LD_INT 8
9151: PUSH
9152: FOR_TO
9153: IFFALSE 9276
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9155: LD_EXP 19
9159: PUSH
9160: LD_VAR 0 3
9164: ARRAY
9165: PUSH
9166: LD_EXP 17
9170: PUSH
9171: LD_EXP 23
9175: PUSH
9176: LD_VAR 0 2
9180: ARRAY
9181: ARRAY
9182: PUSH
9183: LD_EXP 17
9187: PUSH
9188: LD_VAR 0 3
9192: ARRAY
9193: NONEQUAL
9194: PUSH
9195: LD_EXP 21
9199: NOT
9200: PUSH
9201: LD_EXP 23
9205: PUSH
9206: LD_VAR 0 2
9210: ARRAY
9211: PUSH
9212: LD_VAR 0 3
9216: NONEQUAL
9217: AND
9218: OR
9219: AND
9220: IFFALSE 9244
// ShowArea ( j , BuildUpAreas [ i ] ) else
9222: LD_VAR 0 3
9226: PPUSH
9227: LD_EXP 41
9231: PUSH
9232: LD_VAR 0 2
9236: ARRAY
9237: PPUSH
9238: CALL_OW 334
9242: GO 9274
// if ( j = your_side ) then
9244: LD_VAR 0 3
9248: PUSH
9249: LD_OWVAR 2
9253: EQUAL
9254: IFFALSE 9274
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9256: LD_EXP 41
9260: PUSH
9261: LD_VAR 0 2
9265: ARRAY
9266: PPUSH
9267: LD_INT 0
9269: PPUSH
9270: CALL_OW 424
9274: GO 9152
9276: POP
9277: POP
9278: GO 9124
9280: POP
9281: POP
// end ;
9282: LD_VAR 0 1
9286: RET
// every 5 marked 600 do var i , un ;
9287: GO 9289
9289: DISABLE
9290: LD_INT 0
9292: PPUSH
9293: PPUSH
// begin for i := 1 to BuildUpAreas do
9294: LD_ADDR_VAR 0 1
9298: PUSH
9299: DOUBLE
9300: LD_INT 1
9302: DEC
9303: ST_TO_ADDR
9304: LD_EXP 41
9308: PUSH
9309: FOR_TO
9310: IFFALSE 9465
// if Position_Sides [ i ] then
9312: LD_EXP 23
9316: PUSH
9317: LD_VAR 0 1
9321: ARRAY
9322: IFFALSE 9463
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9324: LD_ADDR_VAR 0 2
9328: PUSH
9329: LD_EXP 41
9333: PUSH
9334: LD_VAR 0 1
9338: ARRAY
9339: PPUSH
9340: LD_INT 2
9342: PUSH
9343: LD_INT 21
9345: PUSH
9346: LD_INT 1
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: LD_INT 21
9355: PUSH
9356: LD_INT 2
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: PUSH
9368: LD_INT 22
9370: PUSH
9371: LD_OWVAR 2
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PPUSH
9384: CALL_OW 70
9388: PUSH
9389: FOR_IN
9390: IFFALSE 9461
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9392: LD_EXP 17
9396: PUSH
9397: LD_EXP 23
9401: PUSH
9402: LD_VAR 0 1
9406: ARRAY
9407: ARRAY
9408: PUSH
9409: LD_EXP 17
9413: PUSH
9414: LD_OWVAR 2
9418: ARRAY
9419: NONEQUAL
9420: PUSH
9421: LD_EXP 21
9425: NOT
9426: PUSH
9427: LD_EXP 23
9431: PUSH
9432: LD_VAR 0 1
9436: ARRAY
9437: PUSH
9438: LD_OWVAR 2
9442: NONEQUAL
9443: AND
9444: OR
9445: IFFALSE 9459
// ComMoveToArea ( un , BuildUpEscape ) ;
9447: LD_VAR 0 2
9451: PPUSH
9452: LD_INT 14
9454: PPUSH
9455: CALL_OW 113
9459: GO 9389
9461: POP
9462: POP
9463: GO 9309
9465: POP
9466: POP
// enable ;
9467: ENABLE
// end ;
9468: PPOPN 2
9470: END
// every 1 do
9471: GO 9473
9473: DISABLE
// if ( def_builduptime > 0 ) then
9474: LD_EXP 57
9478: PUSH
9479: LD_INT 0
9481: GREATER
9482: IFFALSE 9497
// begin wait ( buildUpTime_Delay ) ;
9484: LD_EXP 14
9488: PPUSH
9489: CALL_OW 67
// EndBuildUp ;
9493: CALL 9101 0 0
// end ; end_of_file
9497: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
9498: GO 9500
9500: DISABLE
9501: LD_INT 0
9503: PPUSH
// begin enable ;
9504: ENABLE
// for x := 1 to 8 do
9505: LD_ADDR_VAR 0 1
9509: PUSH
9510: DOUBLE
9511: LD_INT 1
9513: DEC
9514: ST_TO_ADDR
9515: LD_INT 8
9517: PUSH
9518: FOR_TO
9519: IFFALSE 9603
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
9521: LD_LOC 18
9525: PUSH
9526: LD_VAR 0 1
9530: ARRAY
9531: PUSH
9532: LD_INT 5
9534: GREATER
9535: PUSH
9536: LD_LOC 16
9540: PUSH
9541: LD_VAR 0 1
9545: ARRAY
9546: PUSH
9547: LD_INT 1
9549: NEG
9550: EQUAL
9551: AND
9552: IFFALSE 9601
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
9554: LD_ADDR_LOC 17
9558: PUSH
9559: LD_LOC 17
9563: PPUSH
9564: LD_VAR 0 1
9568: PPUSH
9569: LD_LOC 17
9573: PUSH
9574: LD_VAR 0 1
9578: ARRAY
9579: PUSH
9580: LD_INT 6
9582: PLUS
9583: PPUSH
9584: CALL_OW 1
9588: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
9589: LD_VAR 0 1
9593: PPUSH
9594: LD_INT 0
9596: PPUSH
9597: CALL 9775 0 2
// end ;
9601: GO 9518
9603: POP
9604: POP
// end ;
9605: PPOPN 1
9607: END
// every 0 0$1 marked 200 do var BGL , x ;
9608: GO 9610
9610: DISABLE
9611: LD_INT 0
9613: PPUSH
9614: PPUSH
// begin enable ;
9615: ENABLE
// for x := 1 to 8 do
9616: LD_ADDR_VAR 0 2
9620: PUSH
9621: DOUBLE
9622: LD_INT 1
9624: DEC
9625: ST_TO_ADDR
9626: LD_INT 8
9628: PUSH
9629: FOR_TO
9630: IFFALSE 9761
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
9632: LD_LOC 16
9636: PUSH
9637: LD_VAR 0 2
9641: ARRAY
9642: PUSH
9643: LD_INT 1
9645: NEG
9646: GREATER
9647: PUSH
9648: LD_LOC 16
9652: PUSH
9653: LD_VAR 0 2
9657: ARRAY
9658: PPUSH
9659: CALL_OW 300
9663: AND
9664: IFFALSE 9759
// begin BGL := GetLives ( BloodGods [ x ] ) ;
9666: LD_ADDR_VAR 0 1
9670: PUSH
9671: LD_LOC 16
9675: PUSH
9676: LD_VAR 0 2
9680: ARRAY
9681: PPUSH
9682: CALL_OW 256
9686: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
9687: LD_VAR 0 1
9691: PUSH
9692: LD_INT 1000
9694: LESS
9695: PUSH
9696: LD_VAR 0 1
9700: PUSH
9701: LD_INT 100
9703: GREATER
9704: AND
9705: IFFALSE 9759
// begin BGL := BGL + 10 ;
9707: LD_ADDR_VAR 0 1
9711: PUSH
9712: LD_VAR 0 1
9716: PUSH
9717: LD_INT 10
9719: PLUS
9720: ST_TO_ADDR
// if BGL > 1000 then
9721: LD_VAR 0 1
9725: PUSH
9726: LD_INT 1000
9728: GREATER
9729: IFFALSE 9739
// BGL := 1000 ;
9731: LD_ADDR_VAR 0 1
9735: PUSH
9736: LD_INT 1000
9738: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
9739: LD_LOC 16
9743: PUSH
9744: LD_VAR 0 2
9748: ARRAY
9749: PPUSH
9750: LD_VAR 0 1
9754: PPUSH
9755: CALL_OW 234
// end ; end ;
9759: GO 9629
9761: POP
9762: POP
// end ;
9763: PPOPN 2
9765: END
// every 0 0$1 marked 200 do
9766: GO 9768
9768: DISABLE
// begin DisplayTimeWithKills ;
9769: CALL 10016 0 0
// enable ;
9773: ENABLE
// end ;
9774: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
9775: LD_INT 0
9777: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
9778: LD_ADDR_OWVAR 24
9782: PUSH
9783: LD_INT 0
9785: PPUSH
9786: LD_INT 5
9788: PPUSH
9789: CALL_OW 12
9793: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
9794: LD_INT 1
9796: PPUSH
9797: LD_INT 1
9799: PPUSH
9800: LD_INT 15
9802: PPUSH
9803: CALL_OW 380
// hc_importance := 106 ;
9807: LD_ADDR_OWVAR 32
9811: PUSH
9812: LD_INT 106
9814: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
9815: LD_ADDR_OWVAR 26
9819: PUSH
9820: LD_STRING Blood God of 
9822: PUSH
9823: LD_OWVAR 19
9827: PUSH
9828: LD_VAR 0 1
9832: ARRAY
9833: STR
9834: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
9835: LD_ADDR_OWVAR 21
9839: PUSH
9840: LD_EXP 20
9844: PUSH
9845: LD_VAR 0 1
9849: ARRAY
9850: ST_TO_ADDR
// uc_side := side ;
9851: LD_ADDR_OWVAR 20
9855: PUSH
9856: LD_VAR 0 1
9860: ST_TO_ADDR
// hc_noskilllimit := true ;
9861: LD_ADDR_OWVAR 76
9865: PUSH
9866: LD_INT 1
9868: ST_TO_ADDR
// hc_agressivity := 50 ;
9869: LD_ADDR_OWVAR 35
9873: PUSH
9874: LD_INT 50
9876: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
9877: LD_ADDR_LOC 16
9881: PUSH
9882: LD_LOC 16
9886: PPUSH
9887: LD_VAR 0 1
9891: PPUSH
9892: CALL_OW 44
9896: PPUSH
9897: CALL_OW 1
9901: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
9902: LD_LOC 16
9906: PUSH
9907: LD_VAR 0 1
9911: ARRAY
9912: PPUSH
9913: LD_LOC 19
9917: PUSH
9918: LD_EXP 19
9922: PUSH
9923: LD_VAR 0 1
9927: ARRAY
9928: ARRAY
9929: PUSH
9930: LD_INT 1
9932: ARRAY
9933: PPUSH
9934: LD_LOC 19
9938: PUSH
9939: LD_EXP 19
9943: PUSH
9944: LD_VAR 0 1
9948: ARRAY
9949: ARRAY
9950: PUSH
9951: LD_INT 2
9953: ARRAY
9954: PPUSH
9955: LD_INT 10
9957: PPUSH
9958: LD_INT 0
9960: PPUSH
9961: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
9965: LD_LOC 16
9969: PUSH
9970: LD_VAR 0 1
9974: ARRAY
9975: PPUSH
9976: LD_INT 1
9978: PPUSH
9979: LD_INT 300
9981: PPUSH
9982: CALL_OW 239
// if not NoDialog then
9986: LD_VAR 0 2
9990: NOT
9991: IFFALSE 10011
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
9993: LD_LOC 16
9997: PUSH
9998: LD_VAR 0 1
10002: ARRAY
10003: PPUSH
10004: LD_STRING DLAwaken
10006: PPUSH
10007: CALL_OW 94
// end ;
10011: LD_VAR 0 3
10015: RET
// function DisplayTimeWithKills ; var x ; begin
10016: LD_INT 0
10018: PPUSH
10019: PPUSH
// ExtraStrings :=  ;
10020: LD_ADDR_EXP 59
10024: PUSH
10025: LD_STRING 
10027: ST_TO_ADDR
// for x = 1 to Side_Positions do
10028: LD_ADDR_VAR 0 2
10032: PUSH
10033: DOUBLE
10034: LD_INT 1
10036: DEC
10037: ST_TO_ADDR
10038: LD_EXP 19
10042: PUSH
10043: FOR_TO
10044: IFFALSE 10277
// if Side_Positions [ x ] then
10046: LD_EXP 19
10050: PUSH
10051: LD_VAR 0 2
10055: ARRAY
10056: IFFALSE 10275
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
10058: LD_ADDR_LOC 18
10062: PUSH
10063: LD_LOC 18
10067: PPUSH
10068: LD_VAR 0 2
10072: PPUSH
10073: LD_VAR 0 2
10077: PPUSH
10078: CALL_OW 515
10082: PUSH
10083: LD_LOC 17
10087: PUSH
10088: LD_VAR 0 2
10092: ARRAY
10093: MINUS
10094: PPUSH
10095: CALL_OW 1
10099: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
10100: LD_LOC 16
10104: PUSH
10105: LD_VAR 0 2
10109: ARRAY
10110: PUSH
10111: LD_INT 1
10113: NEG
10114: GREATER
10115: PUSH
10116: LD_LOC 16
10120: PUSH
10121: LD_VAR 0 2
10125: ARRAY
10126: PPUSH
10127: CALL_OW 300
10131: AND
10132: IFFALSE 10165
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
10134: LD_ADDR_EXP 59
10138: PUSH
10139: LD_EXP 59
10143: PUSH
10144: LD_STRING #godawoken
10146: PUSH
10147: LD_VAR 0 2
10151: PUSH
10152: LD_VAR 0 2
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: LIST
10161: ADD
10162: ST_TO_ADDR
10163: GO 10275
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
10165: LD_LOC 16
10169: PUSH
10170: LD_VAR 0 2
10174: ARRAY
10175: PUSH
10176: LD_INT 1
10178: NEG
10179: GREATER
10180: PUSH
10181: LD_LOC 16
10185: PUSH
10186: LD_VAR 0 2
10190: ARRAY
10191: PPUSH
10192: CALL_OW 301
10196: AND
10197: IFFALSE 10230
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
10199: LD_ADDR_EXP 59
10203: PUSH
10204: LD_EXP 59
10208: PUSH
10209: LD_STRING #goddied
10211: PUSH
10212: LD_VAR 0 2
10216: PUSH
10217: LD_VAR 0 2
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: ADD
10227: ST_TO_ADDR
10228: GO 10275
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
10230: LD_ADDR_EXP 59
10234: PUSH
10235: LD_EXP 59
10239: PUSH
10240: LD_STRING #godssacrifise
10242: PUSH
10243: LD_VAR 0 2
10247: PUSH
10248: LD_VAR 0 2
10252: PUSH
10253: LD_LOC 18
10257: PUSH
10258: LD_VAR 0 2
10262: ARRAY
10263: PUSH
10264: LD_INT 6
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: ADD
10274: ST_TO_ADDR
10275: GO 10043
10277: POP
10278: POP
// end ;
10279: LD_VAR 0 1
10283: RET
// export function InitBloodGods ; begin
10284: LD_INT 0
10286: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
10287: LD_ADDR_LOC 16
10291: PUSH
10292: LD_INT 1
10294: NEG
10295: PUSH
10296: LD_INT 1
10298: NEG
10299: PUSH
10300: LD_INT 1
10302: NEG
10303: PUSH
10304: LD_INT 1
10306: NEG
10307: PUSH
10308: LD_INT 1
10310: NEG
10311: PUSH
10312: LD_INT 1
10314: NEG
10315: PUSH
10316: LD_INT 1
10318: NEG
10319: PUSH
10320: LD_INT 1
10322: NEG
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10334: LD_ADDR_LOC 17
10338: PUSH
10339: LD_INT 0
10341: PUSH
10342: LD_INT 0
10344: PUSH
10345: LD_INT 0
10347: PUSH
10348: LD_INT 0
10350: PUSH
10351: LD_INT 0
10353: PUSH
10354: LD_INT 0
10356: PUSH
10357: LD_INT 0
10359: PUSH
10360: LD_INT 0
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10373: LD_ADDR_LOC 18
10377: PUSH
10378: LD_INT 0
10380: PUSH
10381: LD_INT 0
10383: PUSH
10384: LD_INT 0
10386: PUSH
10387: LD_INT 0
10389: PUSH
10390: LD_INT 0
10392: PUSH
10393: LD_INT 0
10395: PUSH
10396: LD_INT 0
10398: PUSH
10399: LD_INT 0
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
10412: LD_ADDR_LOC 19
10416: PUSH
10417: LD_INT 60
10419: PUSH
10420: LD_INT 47
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: LD_INT 82
10429: PUSH
10430: LD_INT 26
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: LD_INT 124
10439: PUSH
10440: LD_INT 45
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PUSH
10447: LD_INT 147
10449: PUSH
10450: LD_INT 90
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 126
10459: PUSH
10460: LD_INT 112
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: LD_INT 84
10469: PUSH
10470: LD_INT 92
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: PUSH
10477: LD_INT 106
10479: PUSH
10480: LD_INT 73
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: LD_INT 106
10489: PUSH
10490: LD_INT 73
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: ST_TO_ADDR
// ClearHumansKilled ;
10507: CALL_OW 516
// enable ( 200 ) ;
10511: LD_INT 200
10513: ENABLE_MARKED
// end ; end_of_file
10514: LD_VAR 0 1
10518: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
10519: LD_INT 0
10521: PPUSH
10522: PPUSH
// if ( not IAmSpec ) then
10523: CALL_OW 531
10527: NOT
10528: IFFALSE 10544
// Result := Limits_Info ^  ;
10530: LD_ADDR_VAR 0 1
10534: PUSH
10535: LD_LOC 27
10539: PUSH
10540: LD_STRING 
10542: ADD
10543: ST_TO_ADDR
// for i := 1 to 8 do
10544: LD_ADDR_VAR 0 2
10548: PUSH
10549: DOUBLE
10550: LD_INT 1
10552: DEC
10553: ST_TO_ADDR
10554: LD_INT 8
10556: PUSH
10557: FOR_TO
10558: IFFALSE 10603
// if Cheaters [ i ] then
10560: LD_LOC 28
10564: PUSH
10565: LD_VAR 0 2
10569: ARRAY
10570: IFFALSE 10601
// Result := Result ^ [ #Cheater , i , i ] ;
10572: LD_ADDR_VAR 0 1
10576: PUSH
10577: LD_VAR 0 1
10581: PUSH
10582: LD_STRING #Cheater
10584: PUSH
10585: LD_VAR 0 2
10589: PUSH
10590: LD_VAR 0 2
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: ADD
10600: ST_TO_ADDR
10601: GO 10557
10603: POP
10604: POP
// end ;
10605: LD_VAR 0 1
10609: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
10610: LD_INT 0
10612: PPUSH
10613: PPUSH
10614: PPUSH
10615: PPUSH
10616: PPUSH
// if game_type in [ 10 , 11 ] then
10617: LD_EXP 42
10621: PUSH
10622: LD_INT 10
10624: PUSH
10625: LD_INT 11
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: IN
10632: IFFALSE 10648
// def_game_rules = def_game_rules + 1 ;
10634: LD_ADDR_EXP 43
10638: PUSH
10639: LD_EXP 43
10643: PUSH
10644: LD_INT 1
10646: PLUS
10647: ST_TO_ADDR
// case def_game_rules of 0 :
10648: LD_EXP 43
10652: PUSH
10653: LD_INT 0
10655: DOUBLE
10656: EQUAL
10657: IFTRUE 10661
10659: GO 10666
10661: POP
// exit ; 1 :
10662: GO 12724
10664: GO 12624
10666: LD_INT 1
10668: DOUBLE
10669: EQUAL
10670: IFTRUE 10674
10672: GO 10890
10674: POP
// begin def_base_level := 2 ;
10675: LD_ADDR_EXP 44
10679: PUSH
10680: LD_INT 2
10682: ST_TO_ADDR
// def_amount_of_people := 2 ;
10683: LD_ADDR_EXP 45
10687: PUSH
10688: LD_INT 2
10690: ST_TO_ADDR
// def_skill_level := 1 ;
10691: LD_ADDR_EXP 46
10695: PUSH
10696: LD_INT 1
10698: ST_TO_ADDR
// def_starting_resources := 2 ;
10699: LD_ADDR_EXP 47
10703: PUSH
10704: LD_INT 2
10706: ST_TO_ADDR
// def_shipments_density := 1 ;
10707: LD_ADDR_EXP 48
10711: PUSH
10712: LD_INT 1
10714: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10715: LD_ADDR_EXP 49
10719: PUSH
10720: LD_INT 0
10722: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10723: LD_ADDR_EXP 50
10727: PUSH
10728: LD_INT 1
10730: ST_TO_ADDR
// def_shared_vision := 1 ;
10731: LD_ADDR_EXP 51
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
// def_morale_flags := 3 ;
10739: LD_ADDR_EXP 52
10743: PUSH
10744: LD_INT 3
10746: ST_TO_ADDR
// def_siberite_detection := 1 ;
10747: LD_ADDR_EXP 53
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// def_people_respawning := 1 ;
10755: LD_ADDR_EXP 54
10759: PUSH
10760: LD_INT 1
10762: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10763: LD_ADDR_EXP 55
10767: PUSH
10768: LD_INT 1
10770: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10771: LD_ADDR_EXP 56
10775: PUSH
10776: LD_INT 0
10778: ST_TO_ADDR
// def_builduptime := 2 ;
10779: LD_ADDR_EXP 57
10783: PUSH
10784: LD_INT 2
10786: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
10787: LD_ADDR_VAR 0 2
10791: PUSH
10792: EMPTY
10793: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10794: LD_ADDR_VAR 0 3
10798: PUSH
10799: EMPTY
10800: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10801: LD_ADDR_LOC 22
10805: PUSH
10806: EMPTY
10807: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10808: LD_ADDR_LOC 23
10812: PUSH
10813: EMPTY
10814: ST_TO_ADDR
// Banned_Controls := [ ] ;
10815: LD_ADDR_LOC 24
10819: PUSH
10820: EMPTY
10821: ST_TO_ADDR
// Banned_Engines := [ ] ;
10822: LD_ADDR_LOC 25
10826: PUSH
10827: EMPTY
10828: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10829: LD_ADDR_LOC 20
10833: PUSH
10834: LD_INT 37
10836: PUSH
10837: EMPTY
10838: LIST
10839: PUSH
10840: LD_INT 4
10842: PUSH
10843: LD_INT 5
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 31
10852: PUSH
10853: LD_INT 32
10855: PUSH
10856: LD_INT 33
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
10869: LD_ADDR_LOC 21
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 2
10879: PUSH
10880: LD_INT 4
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: ST_TO_ADDR
// end ; 2 :
10888: GO 12624
10890: LD_INT 2
10892: DOUBLE
10893: EQUAL
10894: IFTRUE 10898
10896: GO 11107
10898: POP
// begin def_base_level := 1 ;
10899: LD_ADDR_EXP 44
10903: PUSH
10904: LD_INT 1
10906: ST_TO_ADDR
// def_amount_of_people := 2 ;
10907: LD_ADDR_EXP 45
10911: PUSH
10912: LD_INT 2
10914: ST_TO_ADDR
// def_skill_level := 3 ;
10915: LD_ADDR_EXP 46
10919: PUSH
10920: LD_INT 3
10922: ST_TO_ADDR
// def_starting_resources := 3 ;
10923: LD_ADDR_EXP 47
10927: PUSH
10928: LD_INT 3
10930: ST_TO_ADDR
// def_shipments_density := 2 ;
10931: LD_ADDR_EXP 48
10935: PUSH
10936: LD_INT 2
10938: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10939: LD_ADDR_EXP 49
10943: PUSH
10944: LD_INT 1
10946: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10947: LD_ADDR_EXP 50
10951: PUSH
10952: LD_INT 2
10954: ST_TO_ADDR
// def_shared_vision := 1 ;
10955: LD_ADDR_EXP 51
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
// def_morale_flags := 0 ;
10963: LD_ADDR_EXP 52
10967: PUSH
10968: LD_INT 0
10970: ST_TO_ADDR
// def_siberite_detection := 1 ;
10971: LD_ADDR_EXP 53
10975: PUSH
10976: LD_INT 1
10978: ST_TO_ADDR
// def_people_respawning := 0 ;
10979: LD_ADDR_EXP 54
10983: PUSH
10984: LD_INT 0
10986: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10987: LD_ADDR_EXP 55
10991: PUSH
10992: LD_INT 0
10994: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10995: LD_ADDR_EXP 56
10999: PUSH
11000: LD_INT 0
11002: ST_TO_ADDR
// def_builduptime := 2 ;
11003: LD_ADDR_EXP 57
11007: PUSH
11008: LD_INT 2
11010: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11011: LD_ADDR_VAR 0 2
11015: PUSH
11016: LD_INT 1
11018: PUSH
11019: EMPTY
11020: LIST
11021: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11022: LD_ADDR_VAR 0 3
11026: PUSH
11027: EMPTY
11028: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11029: LD_ADDR_LOC 22
11033: PUSH
11034: EMPTY
11035: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11036: LD_ADDR_LOC 23
11040: PUSH
11041: EMPTY
11042: ST_TO_ADDR
// Banned_Controls := [ ] ;
11043: LD_ADDR_LOC 24
11047: PUSH
11048: EMPTY
11049: ST_TO_ADDR
// Banned_Engines := [ ] ;
11050: LD_ADDR_LOC 25
11054: PUSH
11055: EMPTY
11056: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11057: LD_ADDR_LOC 20
11061: PUSH
11062: LD_INT 4
11064: PUSH
11065: LD_INT 5
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PUSH
11072: LD_INT 31
11074: PUSH
11075: LD_INT 32
11077: PUSH
11078: LD_INT 33
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
11090: LD_ADDR_LOC 21
11094: PUSH
11095: LD_INT 1
11097: PUSH
11098: LD_INT 2
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: ST_TO_ADDR
// end ; 3 :
11105: GO 12624
11107: LD_INT 3
11109: DOUBLE
11110: EQUAL
11111: IFTRUE 11115
11113: GO 11358
11115: POP
// begin def_base_level := 1 ;
11116: LD_ADDR_EXP 44
11120: PUSH
11121: LD_INT 1
11123: ST_TO_ADDR
// def_amount_of_people := 2 ;
11124: LD_ADDR_EXP 45
11128: PUSH
11129: LD_INT 2
11131: ST_TO_ADDR
// def_skill_level := 3 ;
11132: LD_ADDR_EXP 46
11136: PUSH
11137: LD_INT 3
11139: ST_TO_ADDR
// def_starting_resources := 3 ;
11140: LD_ADDR_EXP 47
11144: PUSH
11145: LD_INT 3
11147: ST_TO_ADDR
// def_shipments_density := 1 ;
11148: LD_ADDR_EXP 48
11152: PUSH
11153: LD_INT 1
11155: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11156: LD_ADDR_EXP 49
11160: PUSH
11161: LD_INT 0
11163: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11164: LD_ADDR_EXP 50
11168: PUSH
11169: LD_INT 1
11171: ST_TO_ADDR
// def_shared_vision := 1 ;
11172: LD_ADDR_EXP 51
11176: PUSH
11177: LD_INT 1
11179: ST_TO_ADDR
// def_morale_flags := 0 ;
11180: LD_ADDR_EXP 52
11184: PUSH
11185: LD_INT 0
11187: ST_TO_ADDR
// def_siberite_detection := 1 ;
11188: LD_ADDR_EXP 53
11192: PUSH
11193: LD_INT 1
11195: ST_TO_ADDR
// def_people_respawning := 0 ;
11196: LD_ADDR_EXP 54
11200: PUSH
11201: LD_INT 0
11203: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11204: LD_ADDR_EXP 55
11208: PUSH
11209: LD_INT 2
11211: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11212: LD_ADDR_EXP 56
11216: PUSH
11217: LD_INT 0
11219: ST_TO_ADDR
// def_builduptime := 1 ;
11220: LD_ADDR_EXP 57
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11228: LD_ADDR_VAR 0 2
11232: PUSH
11233: LD_INT 23
11235: PUSH
11236: EMPTY
11237: LIST
11238: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
11239: LD_ADDR_VAR 0 3
11243: PUSH
11244: LD_INT 2
11246: PUSH
11247: LD_INT 37
11249: PUSH
11250: LD_INT 32
11252: PUSH
11253: LD_INT 33
11255: PUSH
11256: LD_INT 36
11258: PUSH
11259: LD_INT 16
11261: PUSH
11262: LD_INT 23
11264: PUSH
11265: LD_INT 21
11267: PUSH
11268: LD_INT 18
11270: PUSH
11271: LD_INT 22
11273: PUSH
11274: LD_INT 20
11276: PUSH
11277: LD_INT 19
11279: PUSH
11280: LD_INT 25
11282: PUSH
11283: LD_INT 17
11285: PUSH
11286: LD_INT 24
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11306: LD_ADDR_LOC 22
11310: PUSH
11311: EMPTY
11312: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11313: LD_ADDR_LOC 23
11317: PUSH
11318: EMPTY
11319: ST_TO_ADDR
// Banned_Controls := [ ] ;
11320: LD_ADDR_LOC 24
11324: PUSH
11325: EMPTY
11326: ST_TO_ADDR
// Banned_Engines := [ ] ;
11327: LD_ADDR_LOC 25
11331: PUSH
11332: EMPTY
11333: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11334: LD_ADDR_LOC 20
11338: PUSH
11339: EMPTY
11340: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11341: LD_ADDR_LOC 21
11345: PUSH
11346: EMPTY
11347: ST_TO_ADDR
// No_Mechs := true ;
11348: LD_ADDR_EXP 58
11352: PUSH
11353: LD_INT 1
11355: ST_TO_ADDR
// end ; 4 :
11356: GO 12624
11358: LD_INT 4
11360: DOUBLE
11361: EQUAL
11362: IFTRUE 11366
11364: GO 11541
11366: POP
// begin def_base_level := 1 ;
11367: LD_ADDR_EXP 44
11371: PUSH
11372: LD_INT 1
11374: ST_TO_ADDR
// def_amount_of_people := 2 ;
11375: LD_ADDR_EXP 45
11379: PUSH
11380: LD_INT 2
11382: ST_TO_ADDR
// def_skill_level := 3 ;
11383: LD_ADDR_EXP 46
11387: PUSH
11388: LD_INT 3
11390: ST_TO_ADDR
// def_starting_resources := 3 ;
11391: LD_ADDR_EXP 47
11395: PUSH
11396: LD_INT 3
11398: ST_TO_ADDR
// def_shipments_density := 2 ;
11399: LD_ADDR_EXP 48
11403: PUSH
11404: LD_INT 2
11406: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11407: LD_ADDR_EXP 49
11411: PUSH
11412: LD_INT 1
11414: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11415: LD_ADDR_EXP 50
11419: PUSH
11420: LD_INT 2
11422: ST_TO_ADDR
// def_shared_vision := 1 ;
11423: LD_ADDR_EXP 51
11427: PUSH
11428: LD_INT 1
11430: ST_TO_ADDR
// def_morale_flags := 0 ;
11431: LD_ADDR_EXP 52
11435: PUSH
11436: LD_INT 0
11438: ST_TO_ADDR
// def_siberite_detection := 1 ;
11439: LD_ADDR_EXP 53
11443: PUSH
11444: LD_INT 1
11446: ST_TO_ADDR
// def_people_respawning := 0 ;
11447: LD_ADDR_EXP 54
11451: PUSH
11452: LD_INT 0
11454: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11455: LD_ADDR_EXP 55
11459: PUSH
11460: LD_INT 0
11462: ST_TO_ADDR
// def_siberite_bomb := 1 ;
11463: LD_ADDR_EXP 56
11467: PUSH
11468: LD_INT 1
11470: ST_TO_ADDR
// def_builduptime := 3 ;
11471: LD_ADDR_EXP 57
11475: PUSH
11476: LD_INT 3
11478: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11479: LD_ADDR_VAR 0 2
11483: PUSH
11484: LD_INT 1
11486: PUSH
11487: EMPTY
11488: LIST
11489: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11490: LD_ADDR_VAR 0 3
11494: PUSH
11495: EMPTY
11496: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11497: LD_ADDR_LOC 22
11501: PUSH
11502: EMPTY
11503: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11504: LD_ADDR_LOC 23
11508: PUSH
11509: EMPTY
11510: ST_TO_ADDR
// Banned_Controls := [ ] ;
11511: LD_ADDR_LOC 24
11515: PUSH
11516: EMPTY
11517: ST_TO_ADDR
// Banned_Engines := [ ] ;
11518: LD_ADDR_LOC 25
11522: PUSH
11523: EMPTY
11524: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11525: LD_ADDR_LOC 20
11529: PUSH
11530: EMPTY
11531: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11532: LD_ADDR_LOC 21
11536: PUSH
11537: EMPTY
11538: ST_TO_ADDR
// end ; 5 :
11539: GO 12624
11541: LD_INT 5
11543: DOUBLE
11544: EQUAL
11545: IFTRUE 11549
11547: GO 11798
11549: POP
// begin def_base_level := 0 ;
11550: LD_ADDR_EXP 44
11554: PUSH
11555: LD_INT 0
11557: ST_TO_ADDR
// def_amount_of_people := 0 ;
11558: LD_ADDR_EXP 45
11562: PUSH
11563: LD_INT 0
11565: ST_TO_ADDR
// def_skill_level := 0 ;
11566: LD_ADDR_EXP 46
11570: PUSH
11571: LD_INT 0
11573: ST_TO_ADDR
// def_starting_resources := 0 ;
11574: LD_ADDR_EXP 47
11578: PUSH
11579: LD_INT 0
11581: ST_TO_ADDR
// def_shipments_density := 0 ;
11582: LD_ADDR_EXP 48
11586: PUSH
11587: LD_INT 0
11589: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11590: LD_ADDR_EXP 49
11594: PUSH
11595: LD_INT 0
11597: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11598: LD_ADDR_EXP 50
11602: PUSH
11603: LD_INT 0
11605: ST_TO_ADDR
// def_shared_vision := 1 ;
11606: LD_ADDR_EXP 51
11610: PUSH
11611: LD_INT 1
11613: ST_TO_ADDR
// def_morale_flags := 0 ;
11614: LD_ADDR_EXP 52
11618: PUSH
11619: LD_INT 0
11621: ST_TO_ADDR
// def_siberite_detection := 0 ;
11622: LD_ADDR_EXP 53
11626: PUSH
11627: LD_INT 0
11629: ST_TO_ADDR
// def_people_respawning := 1 ;
11630: LD_ADDR_EXP 54
11634: PUSH
11635: LD_INT 1
11637: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11638: LD_ADDR_EXP 55
11642: PUSH
11643: LD_INT 1
11645: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11646: LD_ADDR_EXP 56
11650: PUSH
11651: LD_INT 0
11653: ST_TO_ADDR
// def_builduptime := 0 ;
11654: LD_ADDR_EXP 57
11658: PUSH
11659: LD_INT 0
11661: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
11662: LD_ADDR_VAR 0 2
11666: PUSH
11667: LD_INT 10
11669: PUSH
11670: LD_INT 3
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
11677: LD_ADDR_VAR 0 3
11681: PUSH
11682: LD_INT 12
11684: PUSH
11685: LD_INT 11
11687: PUSH
11688: LD_INT 14
11690: PUSH
11691: LD_INT 13
11693: PUSH
11694: LD_INT 5
11696: PUSH
11697: LD_INT 24
11699: PUSH
11700: LD_INT 21
11702: PUSH
11703: LD_INT 33
11705: PUSH
11706: LD_INT 36
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
11720: LD_ADDR_LOC 22
11724: PUSH
11725: LD_INT 31
11727: PUSH
11728: EMPTY
11729: LIST
11730: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11731: LD_ADDR_LOC 23
11735: PUSH
11736: EMPTY
11737: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
11738: LD_ADDR_LOC 24
11742: PUSH
11743: LD_INT 2
11745: PUSH
11746: EMPTY
11747: LIST
11748: ST_TO_ADDR
// Banned_Engines := [ ] ;
11749: LD_ADDR_LOC 25
11753: PUSH
11754: EMPTY
11755: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
11756: LD_ADDR_LOC 20
11760: PUSH
11761: LD_INT 4
11763: PUSH
11764: EMPTY
11765: LIST
11766: PUSH
11767: LD_INT 31
11769: PUSH
11770: LD_INT 32
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
11781: LD_ADDR_LOC 21
11785: PUSH
11786: LD_INT 1
11788: PUSH
11789: LD_INT 1
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: ST_TO_ADDR
// end ; 6 :
11796: GO 12624
11798: LD_INT 6
11800: DOUBLE
11801: EQUAL
11802: IFTRUE 11806
11804: GO 12009
11806: POP
// begin def_base_level := 1 ;
11807: LD_ADDR_EXP 44
11811: PUSH
11812: LD_INT 1
11814: ST_TO_ADDR
// def_amount_of_people := 2 ;
11815: LD_ADDR_EXP 45
11819: PUSH
11820: LD_INT 2
11822: ST_TO_ADDR
// def_skill_level := 3 ;
11823: LD_ADDR_EXP 46
11827: PUSH
11828: LD_INT 3
11830: ST_TO_ADDR
// def_starting_resources := 3 ;
11831: LD_ADDR_EXP 47
11835: PUSH
11836: LD_INT 3
11838: ST_TO_ADDR
// def_shipments_density := 1 ;
11839: LD_ADDR_EXP 48
11843: PUSH
11844: LD_INT 1
11846: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11847: LD_ADDR_EXP 49
11851: PUSH
11852: LD_INT 0
11854: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11855: LD_ADDR_EXP 50
11859: PUSH
11860: LD_INT 1
11862: ST_TO_ADDR
// def_shared_vision := 1 ;
11863: LD_ADDR_EXP 51
11867: PUSH
11868: LD_INT 1
11870: ST_TO_ADDR
// def_morale_flags := 0 ;
11871: LD_ADDR_EXP 52
11875: PUSH
11876: LD_INT 0
11878: ST_TO_ADDR
// def_siberite_detection := 1 ;
11879: LD_ADDR_EXP 53
11883: PUSH
11884: LD_INT 1
11886: ST_TO_ADDR
// def_people_respawning := 2 ;
11887: LD_ADDR_EXP 54
11891: PUSH
11892: LD_INT 2
11894: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11895: LD_ADDR_EXP 55
11899: PUSH
11900: LD_INT 1
11902: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11903: LD_ADDR_EXP 56
11907: PUSH
11908: LD_INT 0
11910: ST_TO_ADDR
// def_builduptime := 1 ;
11911: LD_ADDR_EXP 57
11915: PUSH
11916: LD_INT 1
11918: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11919: LD_ADDR_VAR 0 2
11923: PUSH
11924: LD_INT 23
11926: PUSH
11927: EMPTY
11928: LIST
11929: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
11930: LD_ADDR_VAR 0 3
11934: PUSH
11935: LD_INT 2
11937: PUSH
11938: LD_INT 37
11940: PUSH
11941: LD_INT 31
11943: PUSH
11944: LD_INT 32
11946: PUSH
11947: LD_INT 33
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11957: LD_ADDR_LOC 22
11961: PUSH
11962: EMPTY
11963: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11964: LD_ADDR_LOC 23
11968: PUSH
11969: EMPTY
11970: ST_TO_ADDR
// Banned_Controls := [ ] ;
11971: LD_ADDR_LOC 24
11975: PUSH
11976: EMPTY
11977: ST_TO_ADDR
// Banned_Engines := [ ] ;
11978: LD_ADDR_LOC 25
11982: PUSH
11983: EMPTY
11984: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11985: LD_ADDR_LOC 20
11989: PUSH
11990: EMPTY
11991: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11992: LD_ADDR_LOC 21
11996: PUSH
11997: EMPTY
11998: ST_TO_ADDR
// No_Mechs := true ;
11999: LD_ADDR_EXP 58
12003: PUSH
12004: LD_INT 1
12006: ST_TO_ADDR
// end ; 7 :
12007: GO 12624
12009: LD_INT 7
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12215
12017: POP
// begin def_base_level := 1 ;
12018: LD_ADDR_EXP 44
12022: PUSH
12023: LD_INT 1
12025: ST_TO_ADDR
// def_amount_of_people := 2 ;
12026: LD_ADDR_EXP 45
12030: PUSH
12031: LD_INT 2
12033: ST_TO_ADDR
// def_skill_level := 3 ;
12034: LD_ADDR_EXP 46
12038: PUSH
12039: LD_INT 3
12041: ST_TO_ADDR
// def_starting_resources := 3 ;
12042: LD_ADDR_EXP 47
12046: PUSH
12047: LD_INT 3
12049: ST_TO_ADDR
// def_shipments_density := 1 ;
12050: LD_ADDR_EXP 48
12054: PUSH
12055: LD_INT 1
12057: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
12058: LD_ADDR_EXP 49
12062: PUSH
12063: LD_INT 1
12065: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
12066: LD_ADDR_EXP 50
12070: PUSH
12071: LD_INT 2
12073: ST_TO_ADDR
// def_shared_vision := 1 ;
12074: LD_ADDR_EXP 51
12078: PUSH
12079: LD_INT 1
12081: ST_TO_ADDR
// def_morale_flags := 0 ;
12082: LD_ADDR_EXP 52
12086: PUSH
12087: LD_INT 0
12089: ST_TO_ADDR
// def_siberite_detection := 1 ;
12090: LD_ADDR_EXP 53
12094: PUSH
12095: LD_INT 1
12097: ST_TO_ADDR
// def_people_respawning := 0 ;
12098: LD_ADDR_EXP 54
12102: PUSH
12103: LD_INT 0
12105: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12106: LD_ADDR_EXP 55
12110: PUSH
12111: LD_INT 1
12113: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12114: LD_ADDR_EXP 56
12118: PUSH
12119: LD_INT 0
12121: ST_TO_ADDR
// def_builduptime := 3 ;
12122: LD_ADDR_EXP 57
12126: PUSH
12127: LD_INT 3
12129: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12130: LD_ADDR_VAR 0 2
12134: PUSH
12135: LD_INT 23
12137: PUSH
12138: EMPTY
12139: LIST
12140: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
12141: LD_ADDR_VAR 0 3
12145: PUSH
12146: LD_INT 37
12148: PUSH
12149: EMPTY
12150: LIST
12151: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12152: LD_ADDR_LOC 22
12156: PUSH
12157: EMPTY
12158: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12159: LD_ADDR_LOC 23
12163: PUSH
12164: EMPTY
12165: ST_TO_ADDR
// Banned_Controls := [ ] ;
12166: LD_ADDR_LOC 24
12170: PUSH
12171: EMPTY
12172: ST_TO_ADDR
// Banned_Engines := [ ] ;
12173: LD_ADDR_LOC 25
12177: PUSH
12178: EMPTY
12179: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
12180: LD_ADDR_LOC 20
12184: PUSH
12185: LD_INT 31
12187: PUSH
12188: LD_INT 32
12190: PUSH
12191: LD_INT 33
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: LIST
12198: PUSH
12199: EMPTY
12200: LIST
12201: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
12202: LD_ADDR_LOC 21
12206: PUSH
12207: LD_INT 10
12209: PUSH
12210: EMPTY
12211: LIST
12212: ST_TO_ADDR
// end ; 8 :
12213: GO 12624
12215: LD_INT 8
12217: DOUBLE
12218: EQUAL
12219: IFTRUE 12223
12221: GO 12623
12223: POP
// begin def_base_level := 0 ;
12224: LD_ADDR_EXP 44
12228: PUSH
12229: LD_INT 0
12231: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
12232: LD_ADDR_EXP 45
12236: PUSH
12237: LD_INT 0
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 12
12247: ST_TO_ADDR
// def_skill_level := 0 ;
12248: LD_ADDR_EXP 46
12252: PUSH
12253: LD_INT 0
12255: ST_TO_ADDR
// def_starting_resources := 2 ;
12256: LD_ADDR_EXP 47
12260: PUSH
12261: LD_INT 2
12263: ST_TO_ADDR
// def_shipments_density := 1 ;
12264: LD_ADDR_EXP 48
12268: PUSH
12269: LD_INT 1
12271: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12272: LD_ADDR_EXP 49
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12280: LD_ADDR_EXP 50
12284: PUSH
12285: LD_INT 0
12287: ST_TO_ADDR
// def_shared_vision := 1 ;
12288: LD_ADDR_EXP 51
12292: PUSH
12293: LD_INT 1
12295: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
12296: LD_ADDR_EXP 52
12300: PUSH
12301: LD_INT 0
12303: PPUSH
12304: LD_INT 2
12306: PPUSH
12307: CALL_OW 12
12311: ST_TO_ADDR
// def_siberite_detection := 0 ;
12312: LD_ADDR_EXP 53
12316: PUSH
12317: LD_INT 0
12319: ST_TO_ADDR
// def_people_respawning := 0 ;
12320: LD_ADDR_EXP 54
12324: PUSH
12325: LD_INT 0
12327: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
12328: LD_ADDR_EXP 55
12332: PUSH
12333: LD_INT 2
12335: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12336: LD_ADDR_EXP 56
12340: PUSH
12341: LD_INT 0
12343: ST_TO_ADDR
// def_builduptime := 0 ;
12344: LD_ADDR_EXP 57
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
12352: LD_ADDR_VAR 0 2
12356: PUSH
12357: LD_INT 23
12359: PUSH
12360: LD_INT 20
12362: PUSH
12363: LD_INT 40
12365: PUSH
12366: LD_INT 47
12368: PUSH
12369: LD_INT 46
12371: PUSH
12372: LD_INT 39
12374: PUSH
12375: LD_INT 71
12377: PUSH
12378: LD_INT 34
12380: PUSH
12381: LD_INT 41
12383: PUSH
12384: LD_INT 44
12386: PUSH
12387: LD_INT 17
12389: PUSH
12390: LD_INT 16
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
12407: LD_ADDR_VAR 0 3
12411: PUSH
12412: LD_INT 37
12414: PUSH
12415: LD_INT 5
12417: PUSH
12418: LD_INT 13
12420: PUSH
12421: LD_INT 34
12423: PUSH
12424: LD_INT 12
12426: PUSH
12427: LD_INT 15
12429: PUSH
12430: LD_INT 11
12432: PUSH
12433: LD_INT 14
12435: PUSH
12436: LD_INT 29
12438: PUSH
12439: LD_INT 30
12441: PUSH
12442: LD_INT 28
12444: PUSH
12445: LD_INT 24
12447: PUSH
12448: LD_INT 25
12450: PUSH
12451: LD_INT 20
12453: PUSH
12454: LD_INT 21
12456: PUSH
12457: LD_INT 22
12459: PUSH
12460: LD_INT 36
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12482: LD_ADDR_LOC 22
12486: PUSH
12487: EMPTY
12488: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
12489: LD_ADDR_LOC 23
12493: PUSH
12494: LD_INT 14
12496: PUSH
12497: EMPTY
12498: LIST
12499: ST_TO_ADDR
// Banned_Controls := [ ] ;
12500: LD_ADDR_LOC 24
12504: PUSH
12505: EMPTY
12506: ST_TO_ADDR
// Banned_Engines := [ ] ;
12507: LD_ADDR_LOC 25
12511: PUSH
12512: EMPTY
12513: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
12514: LD_ADDR_LOC 20
12518: PUSH
12519: LD_INT 31
12521: PUSH
12522: LD_INT 32
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 4
12531: PUSH
12532: EMPTY
12533: LIST
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
12539: LD_ADDR_LOC 21
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: LD_INT 1
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: ST_TO_ADDR
// for i := 1 to 8 do
12554: LD_ADDR_VAR 0 4
12558: PUSH
12559: DOUBLE
12560: LD_INT 1
12562: DEC
12563: ST_TO_ADDR
12564: LD_INT 8
12566: PUSH
12567: FOR_TO
12568: IFFALSE 12619
// if ( Side_Nations [ i ] = 3 ) then
12570: LD_EXP 20
12574: PUSH
12575: LD_VAR 0 4
12579: ARRAY
12580: PUSH
12581: LD_INT 3
12583: EQUAL
12584: IFFALSE 12617
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
12586: LD_ADDR_EXP 20
12590: PUSH
12591: LD_EXP 20
12595: PPUSH
12596: LD_VAR 0 4
12600: PPUSH
12601: LD_INT 1
12603: PPUSH
12604: LD_INT 2
12606: PPUSH
12607: CALL_OW 12
12611: PPUSH
12612: CALL_OW 1
12616: ST_TO_ADDR
12617: GO 12567
12619: POP
12620: POP
// end ; end ;
12621: GO 12624
12623: POP
// for i := 1 to 8 do
12624: LD_ADDR_VAR 0 4
12628: PUSH
12629: DOUBLE
12630: LD_INT 1
12632: DEC
12633: ST_TO_ADDR
12634: LD_INT 8
12636: PUSH
12637: FOR_TO
12638: IFFALSE 12722
// if Side_Positions [ i ] then
12640: LD_EXP 19
12644: PUSH
12645: LD_VAR 0 4
12649: ARRAY
12650: IFFALSE 12720
// begin for j in Unavailable_Techs do
12652: LD_ADDR_VAR 0 5
12656: PUSH
12657: LD_VAR 0 2
12661: PUSH
12662: FOR_IN
12663: IFFALSE 12684
// SetTech ( j , i , 0 ) ;
12665: LD_VAR 0 5
12669: PPUSH
12670: LD_VAR 0 4
12674: PPUSH
12675: LD_INT 0
12677: PPUSH
12678: CALL_OW 322
12682: GO 12662
12684: POP
12685: POP
// for j in Unavailable_Builds do
12686: LD_ADDR_VAR 0 5
12690: PUSH
12691: LD_VAR 0 3
12695: PUSH
12696: FOR_IN
12697: IFFALSE 12718
// SetRestrict ( j , i , 0 ) ;
12699: LD_VAR 0 5
12703: PPUSH
12704: LD_VAR 0 4
12708: PPUSH
12709: LD_INT 0
12711: PPUSH
12712: CALL_OW 324
12716: GO 12696
12718: POP
12719: POP
// end ;
12720: GO 12637
12722: POP
12723: POP
// end ;
12724: LD_VAR 0 1
12728: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
12729: LD_INT 0
12731: PPUSH
12732: PPUSH
12733: PPUSH
12734: PPUSH
12735: PPUSH
12736: PPUSH
12737: PPUSH
// for i := 1 to Restricted_Builds do
12738: LD_ADDR_VAR 0 2
12742: PUSH
12743: DOUBLE
12744: LD_INT 1
12746: DEC
12747: ST_TO_ADDR
12748: LD_LOC 20
12752: PUSH
12753: FOR_TO
12754: IFFALSE 13064
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
12756: LD_LOC 20
12760: PUSH
12761: LD_VAR 0 2
12765: ARRAY
12766: PUSH
12767: LD_INT 1
12769: ARRAY
12770: PUSH
12771: LD_INT 31
12773: DOUBLE
12774: EQUAL
12775: IFTRUE 12791
12777: LD_INT 32
12779: DOUBLE
12780: EQUAL
12781: IFTRUE 12791
12783: LD_INT 33
12785: DOUBLE
12786: EQUAL
12787: IFTRUE 12791
12789: GO 12802
12791: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
12792: LD_ADDR_VAR 0 6
12796: PUSH
12797: LD_STRING #Turrets
12799: ST_TO_ADDR
12800: GO 12847
12802: LD_INT 4
12804: DOUBLE
12805: EQUAL
12806: IFTRUE 12816
12808: LD_INT 5
12810: DOUBLE
12811: EQUAL
12812: IFTRUE 12816
12814: GO 12827
12816: POP
// btype := #Armouries ; b_Behemoth :
12817: LD_ADDR_VAR 0 6
12821: PUSH
12822: LD_STRING #Armouries
12824: ST_TO_ADDR
12825: GO 12847
12827: LD_INT 37
12829: DOUBLE
12830: EQUAL
12831: IFTRUE 12835
12833: GO 12846
12835: POP
// btype := #Behemoths ; end ;
12836: LD_ADDR_VAR 0 6
12840: PUSH
12841: LD_STRING #Behemoths
12843: ST_TO_ADDR
12844: GO 12847
12846: POP
// list := [ ] ;
12847: LD_ADDR_VAR 0 7
12851: PUSH
12852: EMPTY
12853: ST_TO_ADDR
// for j := 1 to 8 do
12854: LD_ADDR_VAR 0 3
12858: PUSH
12859: DOUBLE
12860: LD_INT 1
12862: DEC
12863: ST_TO_ADDR
12864: LD_INT 8
12866: PUSH
12867: FOR_TO
12868: IFFALSE 12961
// if Side_Positions [ j ] then
12870: LD_EXP 19
12874: PUSH
12875: LD_VAR 0 3
12879: ARRAY
12880: IFFALSE 12959
// begin amount := 0 ;
12882: LD_ADDR_VAR 0 5
12886: PUSH
12887: LD_INT 0
12889: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
12890: LD_ADDR_VAR 0 4
12894: PUSH
12895: LD_LOC 20
12899: PUSH
12900: LD_VAR 0 2
12904: ARRAY
12905: PUSH
12906: FOR_IN
12907: IFFALSE 12955
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
12909: LD_ADDR_VAR 0 5
12913: PUSH
12914: LD_VAR 0 5
12918: PUSH
12919: LD_INT 22
12921: PUSH
12922: LD_VAR 0 3
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: LD_INT 30
12933: PUSH
12934: LD_VAR 0 4
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 69
12951: PLUS
12952: ST_TO_ADDR
12953: GO 12906
12955: POP
12956: POP
// break ;
12957: GO 12961
// end ;
12959: GO 12867
12961: POP
12962: POP
// list := [ ] ;
12963: LD_ADDR_VAR 0 7
12967: PUSH
12968: EMPTY
12969: ST_TO_ADDR
// for j := 1 to 8 do
12970: LD_ADDR_VAR 0 3
12974: PUSH
12975: DOUBLE
12976: LD_INT 1
12978: DEC
12979: ST_TO_ADDR
12980: LD_INT 8
12982: PUSH
12983: FOR_TO
12984: IFFALSE 13004
// list := list ^ amount ;
12986: LD_ADDR_VAR 0 7
12990: PUSH
12991: LD_VAR 0 7
12995: PUSH
12996: LD_VAR 0 5
13000: ADD
13001: ST_TO_ADDR
13002: GO 12983
13004: POP
13005: POP
// Already_Built := Already_Built ^ [ list ] ;
13006: LD_ADDR_LOC 26
13010: PUSH
13011: LD_LOC 26
13015: PUSH
13016: LD_VAR 0 7
13020: PUSH
13021: EMPTY
13022: LIST
13023: ADD
13024: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13025: LD_ADDR_LOC 27
13029: PUSH
13030: LD_LOC 27
13034: PUSH
13035: LD_VAR 0 6
13039: PUSH
13040: LD_VAR 0 5
13044: PUSH
13045: LD_LOC 21
13049: PUSH
13050: LD_VAR 0 2
13054: ARRAY
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: ADD
13061: ST_TO_ADDR
// end ;
13062: GO 12753
13064: POP
13065: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13066: LD_ADDR_LOC 28
13070: PUSH
13071: LD_INT 0
13073: PUSH
13074: LD_INT 0
13076: PUSH
13077: LD_INT 0
13079: PUSH
13080: LD_INT 0
13082: PUSH
13083: LD_INT 0
13085: PUSH
13086: LD_INT 0
13088: PUSH
13089: LD_INT 0
13091: PUSH
13092: LD_INT 0
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: ST_TO_ADDR
// if Limits_Info then
13105: LD_LOC 27
13109: IFFALSE 13125
// Limits_Info := #Limits ^ Limits_Info ;
13111: LD_ADDR_LOC 27
13115: PUSH
13116: LD_STRING #Limits
13118: PUSH
13119: LD_LOC 27
13123: ADD
13124: ST_TO_ADDR
// end ;
13125: LD_VAR 0 1
13129: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13130: LD_INT 0
13132: PPUSH
13133: PPUSH
13134: PPUSH
13135: PPUSH
// for i := 1 to Restricted_Builds do
13136: LD_ADDR_VAR 0 7
13140: PUSH
13141: DOUBLE
13142: LD_INT 1
13144: DEC
13145: ST_TO_ADDR
13146: LD_LOC 20
13150: PUSH
13151: FOR_TO
13152: IFFALSE 13575
// if BType in Restricted_Builds [ i ] then
13154: LD_VAR 0 2
13158: PUSH
13159: LD_LOC 20
13163: PUSH
13164: LD_VAR 0 7
13168: ARRAY
13169: IN
13170: IFFALSE 13573
// begin if old_side then
13172: LD_VAR 0 4
13176: IFFALSE 13302
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
13178: LD_LOC 26
13182: PUSH
13183: LD_VAR 0 7
13187: ARRAY
13188: PUSH
13189: LD_VAR 0 3
13193: ARRAY
13194: PUSH
13195: LD_VAR 0 5
13199: PLUS
13200: PUSH
13201: LD_LOC 21
13205: PUSH
13206: LD_VAR 0 7
13210: ARRAY
13211: GREATER
13212: IFFALSE 13238
// begin SetSide ( un , old_side ) ;
13214: LD_VAR 0 1
13218: PPUSH
13219: LD_VAR 0 4
13223: PPUSH
13224: CALL_OW 235
// count := 0 ;
13228: LD_ADDR_VAR 0 5
13232: PUSH
13233: LD_INT 0
13235: ST_TO_ADDR
// end else
13236: GO 13302
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
13238: LD_ADDR_LOC 26
13242: PUSH
13243: LD_LOC 26
13247: PPUSH
13248: LD_VAR 0 7
13252: PPUSH
13253: LD_LOC 26
13257: PUSH
13258: LD_VAR 0 7
13262: ARRAY
13263: PPUSH
13264: LD_VAR 0 4
13268: PPUSH
13269: LD_LOC 26
13273: PUSH
13274: LD_VAR 0 7
13278: ARRAY
13279: PUSH
13280: LD_VAR 0 4
13284: ARRAY
13285: PUSH
13286: LD_VAR 0 5
13290: MINUS
13291: PPUSH
13292: CALL_OW 1
13296: PPUSH
13297: CALL_OW 1
13301: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
13302: LD_ADDR_LOC 26
13306: PUSH
13307: LD_LOC 26
13311: PPUSH
13312: LD_VAR 0 7
13316: PPUSH
13317: LD_LOC 26
13321: PUSH
13322: LD_VAR 0 7
13326: ARRAY
13327: PPUSH
13328: LD_VAR 0 3
13332: PPUSH
13333: LD_LOC 26
13337: PUSH
13338: LD_VAR 0 7
13342: ARRAY
13343: PUSH
13344: LD_VAR 0 3
13348: ARRAY
13349: PUSH
13350: LD_VAR 0 5
13354: PLUS
13355: PPUSH
13356: CALL_OW 1
13360: PPUSH
13361: CALL_OW 1
13365: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
13366: LD_VAR 0 5
13370: PUSH
13371: LD_INT 0
13373: NONEQUAL
13374: PUSH
13375: LD_VAR 0 3
13379: PUSH
13380: LD_OWVAR 2
13384: EQUAL
13385: AND
13386: IFFALSE 13429
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
13388: LD_ADDR_LOC 27
13392: PUSH
13393: LD_LOC 27
13397: PPUSH
13398: LD_INT 3
13400: PUSH
13401: LD_VAR 0 7
13405: MUL
13406: PPUSH
13407: LD_LOC 26
13411: PUSH
13412: LD_VAR 0 7
13416: ARRAY
13417: PUSH
13418: LD_VAR 0 3
13422: ARRAY
13423: PPUSH
13424: CALL_OW 1
13428: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
13429: LD_LOC 26
13433: PUSH
13434: LD_VAR 0 7
13438: ARRAY
13439: PUSH
13440: LD_VAR 0 3
13444: ARRAY
13445: PUSH
13446: LD_LOC 21
13450: PUSH
13451: LD_VAR 0 7
13455: ARRAY
13456: GREATER
13457: IFFALSE 13484
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
13459: LD_ADDR_LOC 28
13463: PUSH
13464: LD_LOC 28
13468: PPUSH
13469: LD_VAR 0 3
13473: PPUSH
13474: LD_INT 1
13476: PPUSH
13477: CALL_OW 1
13481: ST_TO_ADDR
// end else
13482: GO 13571
// begin for j := 1 to Restricted_Builds do
13484: LD_ADDR_VAR 0 8
13488: PUSH
13489: DOUBLE
13490: LD_INT 1
13492: DEC
13493: ST_TO_ADDR
13494: LD_LOC 20
13498: PUSH
13499: FOR_TO
13500: IFFALSE 13544
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
13502: LD_LOC 26
13506: PUSH
13507: LD_VAR 0 8
13511: ARRAY
13512: PUSH
13513: LD_VAR 0 3
13517: ARRAY
13518: PUSH
13519: LD_LOC 21
13523: PUSH
13524: LD_VAR 0 8
13528: ARRAY
13529: GREATER
13530: IFFALSE 13542
// begin Is_Cheater := true ;
13532: LD_ADDR_VAR 0 9
13536: PUSH
13537: LD_INT 1
13539: ST_TO_ADDR
// break ;
13540: GO 13544
// end ;
13542: GO 13499
13544: POP
13545: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
13546: LD_ADDR_LOC 28
13550: PUSH
13551: LD_LOC 28
13555: PPUSH
13556: LD_VAR 0 3
13560: PPUSH
13561: LD_VAR 0 9
13565: PPUSH
13566: CALL_OW 1
13570: ST_TO_ADDR
// end ; break ;
13571: GO 13575
// end ;
13573: GO 13151
13575: POP
13576: POP
// end ;
13577: LD_VAR 0 6
13581: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
13582: LD_VAR 0 5
13586: PUSH
13587: LD_LOC 22
13591: IN
13592: PUSH
13593: LD_VAR 0 2
13597: PUSH
13598: LD_LOC 23
13602: IN
13603: OR
13604: PUSH
13605: LD_VAR 0 4
13609: PUSH
13610: LD_LOC 24
13614: IN
13615: OR
13616: PUSH
13617: LD_VAR 0 3
13621: PUSH
13622: LD_LOC 25
13626: IN
13627: OR
13628: IFFALSE 13639
// ComCancel ( factory ) ;
13630: LD_VAR 0 1
13634: PPUSH
13635: CALL_OW 127
// end ;
13639: PPOPN 5
13641: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
13642: LD_VAR 0 2
13646: PUSH
13647: LD_LOC 22
13651: IN
13652: IFFALSE 13663
// ComCancel ( building ) ;
13654: LD_VAR 0 1
13658: PPUSH
13659: CALL_OW 127
// end ; end_of_file
13663: PPOPN 2
13665: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
13666: LD_INT 0
13668: PPUSH
13669: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
13670: LD_ADDR_VAR 0 2
13674: PUSH
13675: LD_STRING #Multi1x1-Time
13677: PUSH
13678: LD_OWVAR 1
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: ST_TO_ADDR
// if WaitServerStrings then
13687: LD_EXP 60
13691: IFFALSE 13709
// AllStrings = AllStrings ^ WaitServerStrings ;
13693: LD_ADDR_VAR 0 2
13697: PUSH
13698: LD_VAR 0 2
13702: PUSH
13703: LD_EXP 60
13707: ADD
13708: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
13709: LD_INT 0
13711: PUSH
13712: LD_EXP 16
13716: PUSH
13717: LD_OWVAR 1
13721: MINUS
13722: LESSEQUAL
13723: IFFALSE 13754
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
13725: LD_ADDR_VAR 0 2
13729: PUSH
13730: LD_VAR 0 2
13734: PUSH
13735: LD_STRING #allowedsibbomb
13737: PUSH
13738: LD_EXP 16
13742: PUSH
13743: LD_OWVAR 1
13747: MINUS
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: ADD
13753: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
13754: LD_INT 0
13756: PUSH
13757: LD_EXP 14
13761: PUSH
13762: LD_OWVAR 1
13766: MINUS
13767: LESSEQUAL
13768: IFFALSE 13799
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
13770: LD_ADDR_VAR 0 2
13774: PUSH
13775: LD_VAR 0 2
13779: PUSH
13780: LD_STRING #builduptime
13782: PUSH
13783: LD_EXP 14
13787: PUSH
13788: LD_OWVAR 1
13792: MINUS
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: ADD
13798: ST_TO_ADDR
// if ( ExtraStrings ) then
13799: LD_EXP 59
13803: IFFALSE 13825
// AllStrings := AllStrings ^  ^ ExtraStrings ;
13805: LD_ADDR_VAR 0 2
13809: PUSH
13810: LD_VAR 0 2
13814: PUSH
13815: LD_STRING 
13817: ADD
13818: PUSH
13819: LD_EXP 59
13823: ADD
13824: ST_TO_ADDR
// if ( LimitsStrings ) then
13825: CALL 10519 0 0
13829: IFFALSE 13851
// AllStrings := AllStrings ^  ^ LimitsStrings ;
13831: LD_ADDR_VAR 0 2
13835: PUSH
13836: LD_VAR 0 2
13840: PUSH
13841: LD_STRING 
13843: ADD
13844: PUSH
13845: CALL 10519 0 0
13849: ADD
13850: ST_TO_ADDR
// if debug_strings then
13851: LD_OWVAR 48
13855: IFFALSE 13877
// AllStrings := AllStrings ^  ^ debug_strings ;
13857: LD_ADDR_VAR 0 2
13861: PUSH
13862: LD_VAR 0 2
13866: PUSH
13867: LD_STRING 
13869: ADD
13870: PUSH
13871: LD_OWVAR 48
13875: ADD
13876: ST_TO_ADDR
// Display_Strings := AllStrings ;
13877: LD_ADDR_OWVAR 47
13881: PUSH
13882: LD_VAR 0 2
13886: ST_TO_ADDR
// end ;
13887: LD_VAR 0 1
13891: RET
// every 0 0$1 do
13892: GO 13894
13894: DISABLE
// begin ShowTimer ;
13895: CALL 13666 0 0
// enable ;
13899: ENABLE
// end ; end_of_file
13900: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
13901: LD_INT 0
13903: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
13904: LD_VAR 0 1
13908: PPUSH
13909: CALL_OW 255
13913: PUSH
13914: LD_VAR 0 4
13918: EQUAL
13919: IFFALSE 13938
// begin SetAchievement ( ACH_RAD ) ;
13921: LD_STRING ACH_RAD
13923: PPUSH
13924: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
13928: LD_STRING ACH_NL
13930: PPUSH
13931: LD_INT 1
13933: PPUSH
13934: CALL_OW 564
// end end ;
13938: LD_VAR 0 5
13942: RET
// export function SA_Win ( side ) ; begin
13943: LD_INT 0
13945: PPUSH
// case side of 1 :
13946: LD_VAR 0 1
13950: PUSH
13951: LD_INT 1
13953: DOUBLE
13954: EQUAL
13955: IFTRUE 13959
13957: GO 13972
13959: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
13960: LD_STRING ACH_AH
13962: PPUSH
13963: LD_INT 1
13965: PPUSH
13966: CALL_OW 564
13970: GO 14135
13972: LD_INT 2
13974: DOUBLE
13975: EQUAL
13976: IFTRUE 13980
13978: GO 13993
13980: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
13981: LD_STRING ACH_E
13983: PPUSH
13984: LD_INT 1
13986: PPUSH
13987: CALL_OW 564
13991: GO 14135
13993: LD_INT 3
13995: DOUBLE
13996: EQUAL
13997: IFTRUE 14001
13999: GO 14014
14001: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
14002: LD_STRING ACH_OOL
14004: PPUSH
14005: LD_INT 1
14007: PPUSH
14008: CALL_OW 564
14012: GO 14135
14014: LD_INT 1
14016: PUSH
14017: LD_INT 2
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: DOUBLE
14024: EQUAL
14025: IFTRUE 14029
14027: GO 14054
14029: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14030: LD_STRING ACH_AH
14032: PPUSH
14033: LD_REAL  5.00000000000000E-0001
14036: PPUSH
14037: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14041: LD_STRING ACH_E
14043: PPUSH
14044: LD_REAL  5.00000000000000E-0001
14047: PPUSH
14048: CALL_OW 564
// end ; [ 2 , 3 ] :
14052: GO 14135
14054: LD_INT 2
14056: PUSH
14057: LD_INT 3
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: DOUBLE
14064: EQUAL
14065: IFTRUE 14069
14067: GO 14094
14069: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14070: LD_STRING ACH_OOL
14072: PPUSH
14073: LD_REAL  5.00000000000000E-0001
14076: PPUSH
14077: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14081: LD_STRING ACH_E
14083: PPUSH
14084: LD_REAL  5.00000000000000E-0001
14087: PPUSH
14088: CALL_OW 564
// end ; [ 3 , 1 ] :
14092: GO 14135
14094: LD_INT 3
14096: PUSH
14097: LD_INT 1
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: DOUBLE
14104: EQUAL
14105: IFTRUE 14109
14107: GO 14134
14109: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14110: LD_STRING ACH_AH
14112: PPUSH
14113: LD_REAL  5.00000000000000E-0001
14116: PPUSH
14117: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14121: LD_STRING ACH_OOL
14123: PPUSH
14124: LD_REAL  5.00000000000000E-0001
14127: PPUSH
14128: CALL_OW 564
// end ; end ;
14132: GO 14135
14134: POP
// end ; end_of_file
14135: LD_VAR 0 2
14139: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
14140: LD_INT 0
14142: PPUSH
14143: PPUSH
// enable ( 98 ) ;
14144: LD_INT 98
14146: ENABLE_MARKED
// GameEnded = false ;
14147: LD_ADDR_LOC 30
14151: PUSH
14152: LD_INT 0
14154: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14155: LD_ADDR_LOC 29
14159: PUSH
14160: LD_INT 0
14162: PUSH
14163: LD_INT 0
14165: PUSH
14166: LD_INT 0
14168: PUSH
14169: LD_INT 0
14171: PUSH
14172: LD_INT 0
14174: PUSH
14175: LD_INT 0
14177: PUSH
14178: LD_INT 0
14180: PUSH
14181: LD_INT 0
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: ST_TO_ADDR
// unfoged = false ;
14194: LD_ADDR_LOC 31
14198: PUSH
14199: LD_INT 0
14201: ST_TO_ADDR
// for i = 1 to side_positions do
14202: LD_ADDR_VAR 0 2
14206: PUSH
14207: DOUBLE
14208: LD_INT 1
14210: DEC
14211: ST_TO_ADDR
14212: LD_EXP 19
14216: PUSH
14217: FOR_TO
14218: IFFALSE 14258
// if not side_positions [ i ] then
14220: LD_EXP 19
14224: PUSH
14225: LD_VAR 0 2
14229: ARRAY
14230: NOT
14231: IFFALSE 14256
// defaited = replace ( defaited , i , true ) ;
14233: LD_ADDR_LOC 29
14237: PUSH
14238: LD_LOC 29
14242: PPUSH
14243: LD_VAR 0 2
14247: PPUSH
14248: LD_INT 1
14250: PPUSH
14251: CALL_OW 1
14255: ST_TO_ADDR
14256: GO 14217
14258: POP
14259: POP
// end ;
14260: LD_VAR 0 1
14264: RET
// function CanWinLoose ; begin
14265: LD_INT 0
14267: PPUSH
// Result := true ;
14268: LD_ADDR_VAR 0 1
14272: PUSH
14273: LD_INT 1
14275: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
14276: CALL_OW 518
14280: PUSH
14281: CALL_OW 519
14285: PUSH
14286: LD_INT 0
14288: GREATER
14289: AND
14290: IFFALSE 14300
// Result := false ;
14292: LD_ADDR_VAR 0 1
14296: PUSH
14297: LD_INT 0
14299: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14300: CALL_OW 531
14304: PUSH
14305: CALL_OW 519
14309: PUSH
14310: LD_INT 1
14312: GREATER
14313: AND
14314: IFFALSE 14324
// Result := false ;
14316: LD_ADDR_VAR 0 1
14320: PUSH
14321: LD_INT 0
14323: ST_TO_ADDR
// end ;
14324: LD_VAR 0 1
14328: RET
// export function HasPower ( i ) ; var k , h ; begin
14329: LD_INT 0
14331: PPUSH
14332: PPUSH
14333: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
14334: LD_VAR 0 1
14338: PPUSH
14339: CALL_OW 108
14343: NOT
14344: PUSH
14345: LD_EXP 22
14349: PUSH
14350: LD_VAR 0 1
14354: ARRAY
14355: NOT
14356: AND
14357: PUSH
14358: LD_OWVAR 4
14362: AND
14363: IFFALSE 14375
// begin result = false ;
14365: LD_ADDR_VAR 0 2
14369: PUSH
14370: LD_INT 0
14372: ST_TO_ADDR
// end else
14373: GO 14670
// case def_win_rules of 0 :
14375: LD_EXP 32
14379: PUSH
14380: LD_INT 0
14382: DOUBLE
14383: EQUAL
14384: IFTRUE 14388
14386: GO 14551
14388: POP
// if def_people_respawning then
14389: LD_EXP 54
14393: IFFALSE 14484
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
14395: LD_ADDR_VAR 0 2
14399: PUSH
14400: LD_INT 22
14402: PUSH
14403: LD_VAR 0 1
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: LD_INT 2
14414: PUSH
14415: LD_INT 21
14417: PUSH
14418: LD_INT 1
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 33
14427: PUSH
14428: LD_INT 3
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 33
14437: PUSH
14438: LD_INT 5
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 30
14447: PUSH
14448: LD_INT 0
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PUSH
14455: LD_INT 30
14457: PUSH
14458: LD_INT 1
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PPUSH
14477: CALL_OW 69
14481: ST_TO_ADDR
14482: GO 14549
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
14484: LD_ADDR_VAR 0 2
14488: PUSH
14489: LD_INT 22
14491: PUSH
14492: LD_VAR 0 1
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: LD_INT 21
14506: PUSH
14507: LD_INT 1
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 33
14516: PUSH
14517: LD_INT 3
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 33
14526: PUSH
14527: LD_INT 5
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PPUSH
14544: CALL_OW 69
14548: ST_TO_ADDR
14549: GO 14670
14551: LD_INT 1
14553: DOUBLE
14554: EQUAL
14555: IFTRUE 14559
14557: GO 14598
14559: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
14560: LD_ADDR_VAR 0 2
14564: PUSH
14565: LD_INT 22
14567: PUSH
14568: LD_VAR 0 1
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 21
14579: PUSH
14580: LD_INT 1
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PPUSH
14591: CALL_OW 69
14595: ST_TO_ADDR
14596: GO 14670
14598: LD_INT 2
14600: DOUBLE
14601: EQUAL
14602: IFTRUE 14606
14604: GO 14669
14606: POP
// begin h = false ;
14607: LD_ADDR_VAR 0 4
14611: PUSH
14612: LD_INT 0
14614: ST_TO_ADDR
// for k in heroes [ i ] do
14615: LD_ADDR_VAR 0 3
14619: PUSH
14620: LD_EXP 33
14624: PUSH
14625: LD_VAR 0 1
14629: ARRAY
14630: PUSH
14631: FOR_IN
14632: IFFALSE 14655
// if IsLive ( k ) then
14634: LD_VAR 0 3
14638: PPUSH
14639: CALL_OW 300
14643: IFFALSE 14653
// h = true ;
14645: LD_ADDR_VAR 0 4
14649: PUSH
14650: LD_INT 1
14652: ST_TO_ADDR
14653: GO 14631
14655: POP
14656: POP
// Result := h ;
14657: LD_ADDR_VAR 0 2
14661: PUSH
14662: LD_VAR 0 4
14666: ST_TO_ADDR
// end ; end ;
14667: GO 14670
14669: POP
// end ;
14670: LD_VAR 0 2
14674: RET
// function AlliedSides ( i , j ) ; begin
14675: LD_INT 0
14677: PPUSH
// Result := false ;
14678: LD_ADDR_VAR 0 3
14682: PUSH
14683: LD_INT 0
14685: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
14686: LD_VAR 0 1
14690: PPUSH
14691: LD_VAR 0 2
14695: PPUSH
14696: CALL_OW 81
14700: PUSH
14701: LD_INT 1
14703: EQUAL
14704: PUSH
14705: LD_VAR 0 2
14709: PPUSH
14710: LD_VAR 0 1
14714: PPUSH
14715: CALL_OW 81
14719: PUSH
14720: LD_INT 1
14722: EQUAL
14723: AND
14724: PUSH
14725: LD_VAR 0 1
14729: PPUSH
14730: CALL_OW 83
14734: AND
14735: PUSH
14736: LD_VAR 0 2
14740: PPUSH
14741: CALL_OW 83
14745: AND
14746: IFFALSE 14756
// Result := true ;
14748: LD_ADDR_VAR 0 3
14752: PUSH
14753: LD_INT 1
14755: ST_TO_ADDR
// end ;
14756: LD_VAR 0 3
14760: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
14761: CALL 14265 0 0
14765: PUSH
14766: LD_LOC 30
14770: NOT
14771: AND
14772: IFFALSE 14788
14774: GO 14776
14776: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
14777: LD_ADDR_EXP 60
14781: PUSH
14782: LD_STRING #Player-Ended
14784: PUSH
14785: EMPTY
14786: LIST
14787: ST_TO_ADDR
14788: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
14789: CALL 14265 0 0
14793: PUSH
14794: LD_LOC 30
14798: AND
14799: IFFALSE 14808
14801: GO 14803
14803: DISABLE
// YouLostInMultiplayer ;
14804: CALL_OW 107
14808: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
14809: CALL 14265 0 0
14813: NOT
14814: PUSH
14815: CALL_OW 531
14819: NOT
14820: AND
14821: IFFALSE 14837
14823: GO 14825
14825: DISABLE
// WaitServerStrings = [ #server-wait ] ;
14826: LD_ADDR_EXP 60
14830: PUSH
14831: LD_STRING #server-wait
14833: PUSH
14834: EMPTY
14835: LIST
14836: ST_TO_ADDR
14837: END
// every 100 trigger IAmSpec do
14838: CALL_OW 531
14842: IFFALSE 14858
14844: GO 14846
14846: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
14847: LD_ADDR_EXP 60
14851: PUSH
14852: LD_STRING #Player-IAmSpec
14854: PUSH
14855: EMPTY
14856: LIST
14857: ST_TO_ADDR
14858: END
// every 100 trigger GameEnded and IAmSpec do
14859: LD_LOC 30
14863: PUSH
14864: CALL_OW 531
14868: AND
14869: IFFALSE 14878
14871: GO 14873
14873: DISABLE
// YouLostInMultiplayer ;
14874: CALL_OW 107
14878: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
14879: CALL 14265 0 0
14883: PUSH
14884: LD_LOC 30
14888: NOT
14889: AND
14890: IFFALSE 14906
14892: GO 14894
14894: DISABLE
// WaitServerStrings = [ $player-win ] ;
14895: LD_ADDR_EXP 60
14899: PUSH
14900: LD_STRING $player-win
14902: PUSH
14903: EMPTY
14904: LIST
14905: ST_TO_ADDR
14906: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
14907: CALL 14265 0 0
14911: PUSH
14912: LD_LOC 30
14916: AND
14917: IFFALSE 14941
14919: GO 14921
14921: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
14922: LD_EXP 20
14926: PUSH
14927: LD_OWVAR 2
14931: ARRAY
14932: PPUSH
14933: CALL 13943 0 1
// YouWinInMultiplayer ;
14937: CALL_OW 106
// end ;
14941: END
// every 100 trigger isEditor marked 401 do
14942: LD_OWVAR 84
14946: IFFALSE 14962
14948: GO 14950
14950: DISABLE
// Debug_Strings = [ You won ] ;
14951: LD_ADDR_OWVAR 48
14955: PUSH
14956: LD_STRING You won
14958: PUSH
14959: EMPTY
14960: LIST
14961: ST_TO_ADDR
14962: END
// every 100 trigger isEditor marked 400 do
14963: LD_OWVAR 84
14967: IFFALSE 14983
14969: GO 14971
14971: DISABLE
// Debug_Strings = [ You loss ] ;
14972: LD_ADDR_OWVAR 48
14976: PUSH
14977: LD_STRING You loss
14979: PUSH
14980: EMPTY
14981: LIST
14982: ST_TO_ADDR
14983: END
// every 100 marked 98 do var i , un ;
14984: GO 14986
14986: DISABLE
14987: LD_INT 0
14989: PPUSH
14990: PPUSH
// begin for i = 1 to side_positions do
14991: LD_ADDR_VAR 0 1
14995: PUSH
14996: DOUBLE
14997: LD_INT 1
14999: DEC
15000: ST_TO_ADDR
15001: LD_EXP 19
15005: PUSH
15006: FOR_TO
15007: IFFALSE 15130
// if side_positions [ i ] then
15009: LD_EXP 19
15013: PUSH
15014: LD_VAR 0 1
15018: ARRAY
15019: IFFALSE 15128
// if not HasPower ( i ) and not Defaited [ i ] then
15021: LD_VAR 0 1
15025: PPUSH
15026: CALL 14329 0 1
15030: NOT
15031: PUSH
15032: LD_LOC 29
15036: PUSH
15037: LD_VAR 0 1
15041: ARRAY
15042: NOT
15043: AND
15044: IFFALSE 15128
// begin un = filterallunits ( [ f_side , i ] ) ;
15046: LD_ADDR_VAR 0 2
15050: PUSH
15051: LD_INT 22
15053: PUSH
15054: LD_VAR 0 1
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PPUSH
15063: CALL_OW 69
15067: ST_TO_ADDR
// if un then
15068: LD_VAR 0 2
15072: IFFALSE 15086
// SetSide ( un , 0 ) ;
15074: LD_VAR 0 2
15078: PPUSH
15079: LD_INT 0
15081: PPUSH
15082: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
15086: LD_ADDR_LOC 29
15090: PUSH
15091: LD_LOC 29
15095: PPUSH
15096: LD_VAR 0 1
15100: PPUSH
15101: LD_INT 1
15103: PPUSH
15104: CALL_OW 1
15108: ST_TO_ADDR
// if i = your_side then
15109: LD_VAR 0 1
15113: PUSH
15114: LD_OWVAR 2
15118: EQUAL
15119: IFFALSE 15128
// begin Multiplayer_Loose_Message ;
15121: CALL_OW 521
// enable ( 400 ) ;
15125: LD_INT 400
15127: ENABLE_MARKED
// end ; end ;
15128: GO 15006
15130: POP
15131: POP
// if not Unfoged and defaited [ your_side ] then
15132: LD_LOC 31
15136: NOT
15137: PUSH
15138: LD_LOC 29
15142: PUSH
15143: LD_OWVAR 2
15147: ARRAY
15148: AND
15149: IFFALSE 15155
// Unfog ;
15151: CALL 15341 0 0
// DidGameEnd ;
15155: CALL 15170 0 0
// if not GameEnded then
15159: LD_LOC 30
15163: NOT
15164: IFFALSE 15167
// enable ;
15166: ENABLE
// end ;
15167: PPOPN 2
15169: END
// function DidGameEnd ; var i , k , enemy ; begin
15170: LD_INT 0
15172: PPUSH
15173: PPUSH
15174: PPUSH
15175: PPUSH
// enemy = [ ] ;
15176: LD_ADDR_VAR 0 4
15180: PUSH
15181: EMPTY
15182: ST_TO_ADDR
// for i = 1 to side_positions do
15183: LD_ADDR_VAR 0 2
15187: PUSH
15188: DOUBLE
15189: LD_INT 1
15191: DEC
15192: ST_TO_ADDR
15193: LD_EXP 19
15197: PUSH
15198: FOR_TO
15199: IFFALSE 15303
// if not defaited [ i ] then
15201: LD_LOC 29
15205: PUSH
15206: LD_VAR 0 2
15210: ARRAY
15211: NOT
15212: IFFALSE 15301
// for k = 1 to side_positions do
15214: LD_ADDR_VAR 0 3
15218: PUSH
15219: DOUBLE
15220: LD_INT 1
15222: DEC
15223: ST_TO_ADDR
15224: LD_EXP 19
15228: PUSH
15229: FOR_TO
15230: IFFALSE 15299
// if not defaited [ k ] then
15232: LD_LOC 29
15236: PUSH
15237: LD_VAR 0 3
15241: ARRAY
15242: NOT
15243: IFFALSE 15297
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
15245: LD_VAR 0 2
15249: PPUSH
15250: LD_VAR 0 3
15254: PPUSH
15255: CALL_OW 81
15259: PUSH
15260: LD_INT 2
15262: PUSH
15263: LD_INT 0
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: IN
15270: IFFALSE 15297
// enemy = enemy ^ [ i , k ] ;
15272: LD_ADDR_VAR 0 4
15276: PUSH
15277: LD_VAR 0 4
15281: PUSH
15282: LD_VAR 0 2
15286: PUSH
15287: LD_VAR 0 3
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: ADD
15296: ST_TO_ADDR
15297: GO 15229
15299: POP
15300: POP
15301: GO 15198
15303: POP
15304: POP
// if not enemy then
15305: LD_VAR 0 4
15309: NOT
15310: IFFALSE 15336
// begin GameEnded = true ;
15312: LD_ADDR_LOC 30
15316: PUSH
15317: LD_INT 1
15319: ST_TO_ADDR
// if not defaited [ your_side ] then
15320: LD_LOC 29
15324: PUSH
15325: LD_OWVAR 2
15329: ARRAY
15330: NOT
15331: IFFALSE 15336
// enable ( 401 ) ;
15333: LD_INT 401
15335: ENABLE_MARKED
// end ; end ;
15336: LD_VAR 0 1
15340: RET
// function unfog ; var k , friends ; begin
15341: LD_INT 0
15343: PPUSH
15344: PPUSH
15345: PPUSH
// for k = 1 to side_positions do
15346: LD_ADDR_VAR 0 2
15350: PUSH
15351: DOUBLE
15352: LD_INT 1
15354: DEC
15355: ST_TO_ADDR
15356: LD_EXP 19
15360: PUSH
15361: FOR_TO
15362: IFFALSE 15418
// if not defaited [ k ] then
15364: LD_LOC 29
15368: PUSH
15369: LD_VAR 0 2
15373: ARRAY
15374: NOT
15375: IFFALSE 15416
// if GetAttitude ( your_side , k ) in [ att_friend ] then
15377: LD_OWVAR 2
15381: PPUSH
15382: LD_VAR 0 2
15386: PPUSH
15387: CALL_OW 81
15391: PUSH
15392: LD_INT 1
15394: PUSH
15395: EMPTY
15396: LIST
15397: IN
15398: IFFALSE 15416
// friends = friends ^ k ;
15400: LD_ADDR_VAR 0 3
15404: PUSH
15405: LD_VAR 0 3
15409: PUSH
15410: LD_VAR 0 2
15414: ADD
15415: ST_TO_ADDR
15416: GO 15361
15418: POP
15419: POP
// if not friends then
15420: LD_VAR 0 3
15424: NOT
15425: IFFALSE 15442
// begin fogoff ( true ) ;
15427: LD_INT 1
15429: PPUSH
15430: CALL_OW 344
// unfoged = true ;
15434: LD_ADDR_LOC 31
15438: PUSH
15439: LD_INT 1
15441: ST_TO_ADDR
// end ; end ;
15442: LD_VAR 0 1
15446: RET
// export function MakeGameEnd ; begin
15447: LD_INT 0
15449: PPUSH
// fogoff ( true ) ;
15450: LD_INT 1
15452: PPUSH
15453: CALL_OW 344
// unfoged = true ;
15457: LD_ADDR_LOC 31
15461: PUSH
15462: LD_INT 1
15464: ST_TO_ADDR
// wait ( 0 0$5 ) ;
15465: LD_INT 175
15467: PPUSH
15468: CALL_OW 67
// GameEnded = true ;
15472: LD_ADDR_LOC 30
15476: PUSH
15477: LD_INT 1
15479: ST_TO_ADDR
// end ;
15480: LD_VAR 0 1
15484: RET
// export function GetGameEnded ; begin
15485: LD_INT 0
15487: PPUSH
// result = GameEnded ;
15488: LD_ADDR_VAR 0 1
15492: PUSH
15493: LD_LOC 30
15497: ST_TO_ADDR
// end ; end_of_file
15498: LD_VAR 0 1
15502: RET
// export function SetMpTechs ( ) ; var side , i ; begin
15503: LD_INT 0
15505: PPUSH
15506: PPUSH
15507: PPUSH
// for side = 1 to 8 do
15508: LD_ADDR_VAR 0 2
15512: PUSH
15513: DOUBLE
15514: LD_INT 1
15516: DEC
15517: ST_TO_ADDR
15518: LD_INT 8
15520: PUSH
15521: FOR_TO
15522: IFFALSE 15643
// begin for i = 1 to 72 do
15524: LD_ADDR_VAR 0 3
15528: PUSH
15529: DOUBLE
15530: LD_INT 1
15532: DEC
15533: ST_TO_ADDR
15534: LD_INT 72
15536: PUSH
15537: FOR_TO
15538: IFFALSE 15569
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15540: LD_VAR 0 3
15544: PPUSH
15545: LD_VAR 0 2
15549: PPUSH
15550: LD_INT 0
15552: PPUSH
15553: LD_VAR 0 3
15557: PPUSH
15558: CALL_OW 565
15562: PPUSH
15563: CALL_OW 322
15567: GO 15537
15569: POP
15570: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15571: LD_INT 73
15573: PPUSH
15574: LD_VAR 0 2
15578: PPUSH
15579: LD_INT 0
15581: PPUSH
15582: LD_INT 25
15584: PPUSH
15585: CALL_OW 565
15589: PPUSH
15590: CALL_OW 322
// for i = 0 to 40 do
15594: LD_ADDR_VAR 0 3
15598: PUSH
15599: DOUBLE
15600: LD_INT 0
15602: DEC
15603: ST_TO_ADDR
15604: LD_INT 40
15606: PUSH
15607: FOR_TO
15608: IFFALSE 15639
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15610: LD_VAR 0 3
15614: PPUSH
15615: LD_VAR 0 2
15619: PPUSH
15620: LD_INT 1
15622: PPUSH
15623: LD_VAR 0 3
15627: PPUSH
15628: CALL_OW 565
15632: PPUSH
15633: CALL_OW 324
15637: GO 15607
15639: POP
15640: POP
// end ;
15641: GO 15521
15643: POP
15644: POP
// end ;
15645: LD_VAR 0 1
15649: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15650: LD_INT 0
15652: PPUSH
15653: PPUSH
15654: PPUSH
// for side = 1 to 8 do
15655: LD_ADDR_VAR 0 3
15659: PUSH
15660: DOUBLE
15661: LD_INT 1
15663: DEC
15664: ST_TO_ADDR
15665: LD_INT 8
15667: PUSH
15668: FOR_TO
15669: IFFALSE 19665
// begin for i = 1 to 73 do
15671: LD_ADDR_VAR 0 4
15675: PUSH
15676: DOUBLE
15677: LD_INT 1
15679: DEC
15680: ST_TO_ADDR
15681: LD_INT 73
15683: PUSH
15684: FOR_TO
15685: IFFALSE 15706
// SetTech ( i , side , state_disabled ) ;
15687: LD_VAR 0 4
15691: PPUSH
15692: LD_VAR 0 3
15696: PPUSH
15697: LD_INT 0
15699: PPUSH
15700: CALL_OW 322
15704: GO 15684
15706: POP
15707: POP
// for i = 0 to 40 do
15708: LD_ADDR_VAR 0 4
15712: PUSH
15713: DOUBLE
15714: LD_INT 0
15716: DEC
15717: ST_TO_ADDR
15718: LD_INT 40
15720: PUSH
15721: FOR_TO
15722: IFFALSE 15743
// SetRestrict ( i , side , false ) ;
15724: LD_VAR 0 4
15728: PPUSH
15729: LD_VAR 0 3
15733: PPUSH
15734: LD_INT 0
15736: PPUSH
15737: CALL_OW 324
15741: GO 15721
15743: POP
15744: POP
// case level of 1 :
15745: LD_VAR 0 1
15749: PUSH
15750: LD_INT 1
15752: DOUBLE
15753: EQUAL
15754: IFTRUE 15758
15756: GO 15911
15758: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15759: LD_INT 35
15761: PPUSH
15762: LD_VAR 0 3
15766: PPUSH
15767: LD_INT 1
15769: PPUSH
15770: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15774: LD_INT 45
15776: PPUSH
15777: LD_VAR 0 3
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15789: LD_INT 46
15791: PPUSH
15792: LD_VAR 0 3
15796: PPUSH
15797: LD_INT 1
15799: PPUSH
15800: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15804: LD_INT 47
15806: PPUSH
15807: LD_VAR 0 3
15811: PPUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15819: LD_INT 0
15821: PPUSH
15822: LD_VAR 0 3
15826: PPUSH
15827: LD_INT 1
15829: PPUSH
15830: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15834: LD_INT 2
15836: PPUSH
15837: LD_VAR 0 3
15841: PPUSH
15842: LD_INT 1
15844: PPUSH
15845: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15849: LD_INT 4
15851: PPUSH
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 1
15859: PPUSH
15860: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15864: LD_INT 6
15866: PPUSH
15867: LD_VAR 0 3
15871: PPUSH
15872: LD_INT 1
15874: PPUSH
15875: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15879: LD_INT 29
15881: PPUSH
15882: LD_VAR 0 3
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15894: LD_INT 31
15896: PPUSH
15897: LD_VAR 0 3
15901: PPUSH
15902: LD_INT 1
15904: PPUSH
15905: CALL_OW 324
// end ; 2 :
15909: GO 19663
15911: LD_INT 2
15913: DOUBLE
15914: EQUAL
15915: IFTRUE 15919
15917: GO 16117
15919: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15920: LD_INT 35
15922: PPUSH
15923: LD_VAR 0 3
15927: PPUSH
15928: LD_INT 1
15930: PPUSH
15931: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15935: LD_INT 45
15937: PPUSH
15938: LD_VAR 0 3
15942: PPUSH
15943: LD_INT 1
15945: PPUSH
15946: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15950: LD_INT 46
15952: PPUSH
15953: LD_VAR 0 3
15957: PPUSH
15958: LD_INT 1
15960: PPUSH
15961: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15965: LD_INT 47
15967: PPUSH
15968: LD_VAR 0 3
15972: PPUSH
15973: LD_INT 1
15975: PPUSH
15976: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15980: LD_INT 1
15982: PPUSH
15983: LD_VAR 0 3
15987: PPUSH
15988: LD_INT 1
15990: PPUSH
15991: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15995: LD_INT 2
15997: PPUSH
15998: LD_VAR 0 3
16002: PPUSH
16003: LD_INT 1
16005: PPUSH
16006: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16010: LD_INT 11
16012: PPUSH
16013: LD_VAR 0 3
16017: PPUSH
16018: LD_INT 1
16020: PPUSH
16021: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16025: LD_INT 0
16027: PPUSH
16028: LD_VAR 0 3
16032: PPUSH
16033: LD_INT 1
16035: PPUSH
16036: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16040: LD_INT 2
16042: PPUSH
16043: LD_VAR 0 3
16047: PPUSH
16048: LD_INT 1
16050: PPUSH
16051: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16055: LD_INT 4
16057: PPUSH
16058: LD_VAR 0 3
16062: PPUSH
16063: LD_INT 1
16065: PPUSH
16066: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16070: LD_INT 6
16072: PPUSH
16073: LD_VAR 0 3
16077: PPUSH
16078: LD_INT 1
16080: PPUSH
16081: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16085: LD_INT 29
16087: PPUSH
16088: LD_VAR 0 3
16092: PPUSH
16093: LD_INT 1
16095: PPUSH
16096: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16100: LD_INT 31
16102: PPUSH
16103: LD_VAR 0 3
16107: PPUSH
16108: LD_INT 1
16110: PPUSH
16111: CALL_OW 324
// end ; 3 :
16115: GO 19663
16117: LD_INT 3
16119: DOUBLE
16120: EQUAL
16121: IFTRUE 16125
16123: GO 16578
16125: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16126: LD_INT 35
16128: PPUSH
16129: LD_VAR 0 3
16133: PPUSH
16134: LD_INT 1
16136: PPUSH
16137: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16141: LD_INT 45
16143: PPUSH
16144: LD_VAR 0 3
16148: PPUSH
16149: LD_INT 1
16151: PPUSH
16152: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16156: LD_INT 46
16158: PPUSH
16159: LD_VAR 0 3
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16171: LD_INT 47
16173: PPUSH
16174: LD_VAR 0 3
16178: PPUSH
16179: LD_INT 1
16181: PPUSH
16182: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16186: LD_INT 1
16188: PPUSH
16189: LD_VAR 0 3
16193: PPUSH
16194: LD_INT 1
16196: PPUSH
16197: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16201: LD_INT 2
16203: PPUSH
16204: LD_VAR 0 3
16208: PPUSH
16209: LD_INT 1
16211: PPUSH
16212: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16216: LD_INT 11
16218: PPUSH
16219: LD_VAR 0 3
16223: PPUSH
16224: LD_INT 1
16226: PPUSH
16227: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16231: LD_INT 48
16233: PPUSH
16234: LD_VAR 0 3
16238: PPUSH
16239: LD_INT 1
16241: PPUSH
16242: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16246: LD_INT 69
16248: PPUSH
16249: LD_VAR 0 3
16253: PPUSH
16254: LD_INT 1
16256: PPUSH
16257: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16261: LD_INT 39
16263: PPUSH
16264: LD_VAR 0 3
16268: PPUSH
16269: LD_INT 1
16271: PPUSH
16272: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16276: LD_INT 43
16278: PPUSH
16279: LD_VAR 0 3
16283: PPUSH
16284: LD_INT 1
16286: PPUSH
16287: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16291: LD_INT 51
16293: PPUSH
16294: LD_VAR 0 3
16298: PPUSH
16299: LD_INT 1
16301: PPUSH
16302: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16306: LD_INT 6
16308: PPUSH
16309: LD_VAR 0 3
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16321: LD_INT 0
16323: PPUSH
16324: LD_VAR 0 3
16328: PPUSH
16329: LD_INT 1
16331: PPUSH
16332: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16336: LD_INT 2
16338: PPUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: LD_INT 1
16346: PPUSH
16347: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16351: LD_INT 3
16353: PPUSH
16354: LD_VAR 0 3
16358: PPUSH
16359: LD_INT 1
16361: PPUSH
16362: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16366: LD_INT 4
16368: PPUSH
16369: LD_VAR 0 3
16373: PPUSH
16374: LD_INT 1
16376: PPUSH
16377: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16381: LD_INT 6
16383: PPUSH
16384: LD_VAR 0 3
16388: PPUSH
16389: LD_INT 1
16391: PPUSH
16392: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16396: LD_INT 7
16398: PPUSH
16399: LD_VAR 0 3
16403: PPUSH
16404: LD_INT 1
16406: PPUSH
16407: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16411: LD_INT 8
16413: PPUSH
16414: LD_VAR 0 3
16418: PPUSH
16419: LD_INT 1
16421: PPUSH
16422: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16426: LD_INT 10
16428: PPUSH
16429: LD_VAR 0 3
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16441: LD_INT 15
16443: PPUSH
16444: LD_VAR 0 3
16448: PPUSH
16449: LD_INT 1
16451: PPUSH
16452: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16456: LD_INT 16
16458: PPUSH
16459: LD_VAR 0 3
16463: PPUSH
16464: LD_INT 1
16466: PPUSH
16467: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16471: LD_INT 17
16473: PPUSH
16474: LD_VAR 0 3
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16486: LD_INT 20
16488: PPUSH
16489: LD_VAR 0 3
16493: PPUSH
16494: LD_INT 1
16496: PPUSH
16497: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16501: LD_INT 26
16503: PPUSH
16504: LD_VAR 0 3
16508: PPUSH
16509: LD_INT 1
16511: PPUSH
16512: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16516: LD_INT 27
16518: PPUSH
16519: LD_VAR 0 3
16523: PPUSH
16524: LD_INT 1
16526: PPUSH
16527: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16531: LD_INT 29
16533: PPUSH
16534: LD_VAR 0 3
16538: PPUSH
16539: LD_INT 1
16541: PPUSH
16542: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16546: LD_INT 31
16548: PPUSH
16549: LD_VAR 0 3
16553: PPUSH
16554: LD_INT 1
16556: PPUSH
16557: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16561: LD_INT 32
16563: PPUSH
16564: LD_VAR 0 3
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: CALL_OW 324
// end ; 4 :
16576: GO 19663
16578: LD_INT 4
16580: DOUBLE
16581: EQUAL
16582: IFTRUE 16586
16584: GO 17534
16586: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16587: LD_INT 35
16589: PPUSH
16590: LD_VAR 0 3
16594: PPUSH
16595: LD_INT 1
16597: PPUSH
16598: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16602: LD_INT 45
16604: PPUSH
16605: LD_VAR 0 3
16609: PPUSH
16610: LD_INT 1
16612: PPUSH
16613: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16617: LD_INT 46
16619: PPUSH
16620: LD_VAR 0 3
16624: PPUSH
16625: LD_INT 1
16627: PPUSH
16628: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16632: LD_INT 47
16634: PPUSH
16635: LD_VAR 0 3
16639: PPUSH
16640: LD_INT 1
16642: PPUSH
16643: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16647: LD_INT 1
16649: PPUSH
16650: LD_VAR 0 3
16654: PPUSH
16655: LD_INT 1
16657: PPUSH
16658: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16662: LD_INT 2
16664: PPUSH
16665: LD_VAR 0 3
16669: PPUSH
16670: LD_INT 1
16672: PPUSH
16673: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16677: LD_INT 11
16679: PPUSH
16680: LD_VAR 0 3
16684: PPUSH
16685: LD_INT 1
16687: PPUSH
16688: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16692: LD_INT 20
16694: PPUSH
16695: LD_VAR 0 3
16699: PPUSH
16700: LD_INT 1
16702: PPUSH
16703: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16707: LD_INT 48
16709: PPUSH
16710: LD_VAR 0 3
16714: PPUSH
16715: LD_INT 1
16717: PPUSH
16718: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16722: LD_INT 49
16724: PPUSH
16725: LD_VAR 0 3
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16737: LD_INT 69
16739: PPUSH
16740: LD_VAR 0 3
16744: PPUSH
16745: LD_INT 1
16747: PPUSH
16748: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16752: LD_INT 39
16754: PPUSH
16755: LD_VAR 0 3
16759: PPUSH
16760: LD_INT 1
16762: PPUSH
16763: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16767: LD_INT 34
16769: PPUSH
16770: LD_VAR 0 3
16774: PPUSH
16775: LD_INT 1
16777: PPUSH
16778: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16782: LD_INT 42
16784: PPUSH
16785: LD_VAR 0 3
16789: PPUSH
16790: LD_INT 1
16792: PPUSH
16793: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16797: LD_INT 44
16799: PPUSH
16800: LD_VAR 0 3
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16812: LD_INT 41
16814: PPUSH
16815: LD_VAR 0 3
16819: PPUSH
16820: LD_INT 1
16822: PPUSH
16823: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16827: LD_INT 43
16829: PPUSH
16830: LD_VAR 0 3
16834: PPUSH
16835: LD_INT 1
16837: PPUSH
16838: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16842: LD_INT 70
16844: PPUSH
16845: LD_VAR 0 3
16849: PPUSH
16850: LD_INT 1
16852: PPUSH
16853: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16857: LD_INT 51
16859: PPUSH
16860: LD_VAR 0 3
16864: PPUSH
16865: LD_INT 1
16867: PPUSH
16868: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16872: LD_INT 52
16874: PPUSH
16875: LD_VAR 0 3
16879: PPUSH
16880: LD_INT 1
16882: PPUSH
16883: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16887: LD_INT 6
16889: PPUSH
16890: LD_VAR 0 3
16894: PPUSH
16895: LD_INT 1
16897: PPUSH
16898: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16902: LD_INT 15
16904: PPUSH
16905: LD_VAR 0 3
16909: PPUSH
16910: LD_INT 1
16912: PPUSH
16913: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16917: LD_INT 7
16919: PPUSH
16920: LD_VAR 0 3
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16932: LD_INT 12
16934: PPUSH
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 1
16942: PPUSH
16943: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16947: LD_INT 18
16949: PPUSH
16950: LD_VAR 0 3
16954: PPUSH
16955: LD_INT 1
16957: PPUSH
16958: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16962: LD_INT 60
16964: PPUSH
16965: LD_VAR 0 3
16969: PPUSH
16970: LD_INT 1
16972: PPUSH
16973: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16977: LD_INT 9
16979: PPUSH
16980: LD_VAR 0 3
16984: PPUSH
16985: LD_INT 1
16987: PPUSH
16988: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16992: LD_INT 30
16994: PPUSH
16995: LD_VAR 0 3
16999: PPUSH
17000: LD_INT 1
17002: PPUSH
17003: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17007: LD_INT 37
17009: PPUSH
17010: LD_VAR 0 3
17014: PPUSH
17015: LD_INT 1
17017: PPUSH
17018: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17022: LD_INT 5
17024: PPUSH
17025: LD_VAR 0 3
17029: PPUSH
17030: LD_INT 1
17032: PPUSH
17033: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17037: LD_INT 66
17039: PPUSH
17040: LD_VAR 0 3
17044: PPUSH
17045: LD_INT 1
17047: PPUSH
17048: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17052: LD_INT 21
17054: PPUSH
17055: LD_VAR 0 3
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17067: LD_INT 22
17069: PPUSH
17070: LD_VAR 0 3
17074: PPUSH
17075: LD_INT 1
17077: PPUSH
17078: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17082: LD_INT 54
17084: PPUSH
17085: LD_VAR 0 3
17089: PPUSH
17090: LD_INT 1
17092: PPUSH
17093: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17097: LD_INT 0
17099: PPUSH
17100: LD_VAR 0 3
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17112: LD_INT 1
17114: PPUSH
17115: LD_VAR 0 3
17119: PPUSH
17120: LD_INT 1
17122: PPUSH
17123: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17127: LD_INT 2
17129: PPUSH
17130: LD_VAR 0 3
17134: PPUSH
17135: LD_INT 1
17137: PPUSH
17138: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17142: LD_INT 3
17144: PPUSH
17145: LD_VAR 0 3
17149: PPUSH
17150: LD_INT 1
17152: PPUSH
17153: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17157: LD_INT 4
17159: PPUSH
17160: LD_VAR 0 3
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17172: LD_INT 5
17174: PPUSH
17175: LD_VAR 0 3
17179: PPUSH
17180: LD_INT 1
17182: PPUSH
17183: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17187: LD_INT 6
17189: PPUSH
17190: LD_VAR 0 3
17194: PPUSH
17195: LD_INT 1
17197: PPUSH
17198: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17202: LD_INT 7
17204: PPUSH
17205: LD_VAR 0 3
17209: PPUSH
17210: LD_INT 1
17212: PPUSH
17213: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17217: LD_INT 8
17219: PPUSH
17220: LD_VAR 0 3
17224: PPUSH
17225: LD_INT 1
17227: PPUSH
17228: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17232: LD_INT 10
17234: PPUSH
17235: LD_VAR 0 3
17239: PPUSH
17240: LD_INT 1
17242: PPUSH
17243: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17247: LD_INT 11
17249: PPUSH
17250: LD_VAR 0 3
17254: PPUSH
17255: LD_INT 1
17257: PPUSH
17258: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17262: LD_INT 12
17264: PPUSH
17265: LD_VAR 0 3
17269: PPUSH
17270: LD_INT 1
17272: PPUSH
17273: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17277: LD_INT 13
17279: PPUSH
17280: LD_VAR 0 3
17284: PPUSH
17285: LD_INT 1
17287: PPUSH
17288: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17292: LD_INT 14
17294: PPUSH
17295: LD_VAR 0 3
17299: PPUSH
17300: LD_INT 1
17302: PPUSH
17303: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17307: LD_INT 15
17309: PPUSH
17310: LD_VAR 0 3
17314: PPUSH
17315: LD_INT 1
17317: PPUSH
17318: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17322: LD_INT 16
17324: PPUSH
17325: LD_VAR 0 3
17329: PPUSH
17330: LD_INT 1
17332: PPUSH
17333: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17337: LD_INT 17
17339: PPUSH
17340: LD_VAR 0 3
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17352: LD_INT 19
17354: PPUSH
17355: LD_VAR 0 3
17359: PPUSH
17360: LD_INT 1
17362: PPUSH
17363: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17367: LD_INT 20
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: LD_INT 1
17377: PPUSH
17378: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17382: LD_INT 21
17384: PPUSH
17385: LD_VAR 0 3
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17397: LD_INT 23
17399: PPUSH
17400: LD_VAR 0 3
17404: PPUSH
17405: LD_INT 1
17407: PPUSH
17408: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17412: LD_INT 26
17414: PPUSH
17415: LD_VAR 0 3
17419: PPUSH
17420: LD_INT 1
17422: PPUSH
17423: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17427: LD_INT 27
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_INT 1
17437: PPUSH
17438: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17442: LD_INT 28
17444: PPUSH
17445: LD_VAR 0 3
17449: PPUSH
17450: LD_INT 1
17452: PPUSH
17453: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17457: LD_INT 29
17459: PPUSH
17460: LD_VAR 0 3
17464: PPUSH
17465: LD_INT 1
17467: PPUSH
17468: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17472: LD_INT 30
17474: PPUSH
17475: LD_VAR 0 3
17479: PPUSH
17480: LD_INT 1
17482: PPUSH
17483: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17487: LD_INT 31
17489: PPUSH
17490: LD_VAR 0 3
17494: PPUSH
17495: LD_INT 1
17497: PPUSH
17498: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17502: LD_INT 32
17504: PPUSH
17505: LD_VAR 0 3
17509: PPUSH
17510: LD_INT 1
17512: PPUSH
17513: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17517: LD_INT 36
17519: PPUSH
17520: LD_VAR 0 3
17524: PPUSH
17525: LD_INT 1
17527: PPUSH
17528: CALL_OW 324
// end ; 5 :
17532: GO 19663
17534: LD_INT 5
17536: DOUBLE
17537: EQUAL
17538: IFTRUE 17542
17540: GO 18655
17542: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17543: LD_INT 35
17545: PPUSH
17546: LD_VAR 0 3
17550: PPUSH
17551: LD_INT 1
17553: PPUSH
17554: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17558: LD_INT 45
17560: PPUSH
17561: LD_VAR 0 3
17565: PPUSH
17566: LD_INT 1
17568: PPUSH
17569: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17573: LD_INT 46
17575: PPUSH
17576: LD_VAR 0 3
17580: PPUSH
17581: LD_INT 1
17583: PPUSH
17584: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17588: LD_INT 47
17590: PPUSH
17591: LD_VAR 0 3
17595: PPUSH
17596: LD_INT 1
17598: PPUSH
17599: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17603: LD_INT 1
17605: PPUSH
17606: LD_VAR 0 3
17610: PPUSH
17611: LD_INT 1
17613: PPUSH
17614: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17618: LD_INT 2
17620: PPUSH
17621: LD_VAR 0 3
17625: PPUSH
17626: LD_INT 1
17628: PPUSH
17629: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17633: LD_INT 11
17635: PPUSH
17636: LD_VAR 0 3
17640: PPUSH
17641: LD_INT 1
17643: PPUSH
17644: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17648: LD_INT 20
17650: PPUSH
17651: LD_VAR 0 3
17655: PPUSH
17656: LD_INT 1
17658: PPUSH
17659: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17663: LD_INT 48
17665: PPUSH
17666: LD_VAR 0 3
17670: PPUSH
17671: LD_INT 1
17673: PPUSH
17674: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17678: LD_INT 49
17680: PPUSH
17681: LD_VAR 0 3
17685: PPUSH
17686: LD_INT 1
17688: PPUSH
17689: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17693: LD_INT 69
17695: PPUSH
17696: LD_VAR 0 3
17700: PPUSH
17701: LD_INT 1
17703: PPUSH
17704: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17708: LD_INT 39
17710: PPUSH
17711: LD_VAR 0 3
17715: PPUSH
17716: LD_INT 1
17718: PPUSH
17719: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17723: LD_INT 34
17725: PPUSH
17726: LD_VAR 0 3
17730: PPUSH
17731: LD_INT 1
17733: PPUSH
17734: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17738: LD_INT 42
17740: PPUSH
17741: LD_VAR 0 3
17745: PPUSH
17746: LD_INT 1
17748: PPUSH
17749: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17753: LD_INT 44
17755: PPUSH
17756: LD_VAR 0 3
17760: PPUSH
17761: LD_INT 1
17763: PPUSH
17764: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17768: LD_INT 41
17770: PPUSH
17771: LD_VAR 0 3
17775: PPUSH
17776: LD_INT 1
17778: PPUSH
17779: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17783: LD_INT 40
17785: PPUSH
17786: LD_VAR 0 3
17790: PPUSH
17791: LD_INT 1
17793: PPUSH
17794: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17798: LD_INT 43
17800: PPUSH
17801: LD_VAR 0 3
17805: PPUSH
17806: LD_INT 1
17808: PPUSH
17809: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17813: LD_INT 70
17815: PPUSH
17816: LD_VAR 0 3
17820: PPUSH
17821: LD_INT 1
17823: PPUSH
17824: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17828: LD_INT 51
17830: PPUSH
17831: LD_VAR 0 3
17835: PPUSH
17836: LD_INT 1
17838: PPUSH
17839: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17843: LD_INT 52
17845: PPUSH
17846: LD_VAR 0 3
17850: PPUSH
17851: LD_INT 1
17853: PPUSH
17854: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17858: LD_INT 6
17860: PPUSH
17861: LD_VAR 0 3
17865: PPUSH
17866: LD_INT 1
17868: PPUSH
17869: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17873: LD_INT 15
17875: PPUSH
17876: LD_VAR 0 3
17880: PPUSH
17881: LD_INT 1
17883: PPUSH
17884: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17888: LD_INT 7
17890: PPUSH
17891: LD_VAR 0 3
17895: PPUSH
17896: LD_INT 1
17898: PPUSH
17899: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17903: LD_INT 12
17905: PPUSH
17906: LD_VAR 0 3
17910: PPUSH
17911: LD_INT 1
17913: PPUSH
17914: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17918: LD_INT 17
17920: PPUSH
17921: LD_VAR 0 3
17925: PPUSH
17926: LD_INT 1
17928: PPUSH
17929: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17933: LD_INT 18
17935: PPUSH
17936: LD_VAR 0 3
17940: PPUSH
17941: LD_INT 1
17943: PPUSH
17944: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17948: LD_INT 60
17950: PPUSH
17951: LD_VAR 0 3
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17963: LD_INT 32
17965: PPUSH
17966: LD_VAR 0 3
17970: PPUSH
17971: LD_INT 1
17973: PPUSH
17974: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17978: LD_INT 9
17980: PPUSH
17981: LD_VAR 0 3
17985: PPUSH
17986: LD_INT 1
17988: PPUSH
17989: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17993: LD_INT 57
17995: PPUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: LD_INT 1
18003: PPUSH
18004: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18008: LD_INT 30
18010: PPUSH
18011: LD_VAR 0 3
18015: PPUSH
18016: LD_INT 1
18018: PPUSH
18019: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18023: LD_INT 37
18025: PPUSH
18026: LD_VAR 0 3
18030: PPUSH
18031: LD_INT 1
18033: PPUSH
18034: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18038: LD_INT 63
18040: PPUSH
18041: LD_VAR 0 3
18045: PPUSH
18046: LD_INT 1
18048: PPUSH
18049: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18053: LD_INT 3
18055: PPUSH
18056: LD_VAR 0 3
18060: PPUSH
18061: LD_INT 1
18063: PPUSH
18064: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18068: LD_INT 4
18070: PPUSH
18071: LD_VAR 0 3
18075: PPUSH
18076: LD_INT 1
18078: PPUSH
18079: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18083: LD_INT 5
18085: PPUSH
18086: LD_VAR 0 3
18090: PPUSH
18091: LD_INT 1
18093: PPUSH
18094: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18098: LD_INT 66
18100: PPUSH
18101: LD_VAR 0 3
18105: PPUSH
18106: LD_INT 1
18108: PPUSH
18109: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18113: LD_INT 21
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: LD_INT 1
18123: PPUSH
18124: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18128: LD_INT 22
18130: PPUSH
18131: LD_VAR 0 3
18135: PPUSH
18136: LD_INT 1
18138: PPUSH
18139: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18143: LD_INT 19
18145: PPUSH
18146: LD_VAR 0 3
18150: PPUSH
18151: LD_INT 1
18153: PPUSH
18154: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18158: LD_INT 54
18160: PPUSH
18161: LD_VAR 0 3
18165: PPUSH
18166: LD_INT 1
18168: PPUSH
18169: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18173: LD_INT 55
18175: PPUSH
18176: LD_VAR 0 3
18180: PPUSH
18181: LD_INT 1
18183: PPUSH
18184: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18188: LD_INT 0
18190: PPUSH
18191: LD_VAR 0 3
18195: PPUSH
18196: LD_INT 1
18198: PPUSH
18199: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18203: LD_INT 1
18205: PPUSH
18206: LD_VAR 0 3
18210: PPUSH
18211: LD_INT 1
18213: PPUSH
18214: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18218: LD_INT 2
18220: PPUSH
18221: LD_VAR 0 3
18225: PPUSH
18226: LD_INT 1
18228: PPUSH
18229: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18233: LD_INT 3
18235: PPUSH
18236: LD_VAR 0 3
18240: PPUSH
18241: LD_INT 1
18243: PPUSH
18244: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18248: LD_INT 4
18250: PPUSH
18251: LD_VAR 0 3
18255: PPUSH
18256: LD_INT 1
18258: PPUSH
18259: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18263: LD_INT 5
18265: PPUSH
18266: LD_VAR 0 3
18270: PPUSH
18271: LD_INT 1
18273: PPUSH
18274: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18278: LD_INT 6
18280: PPUSH
18281: LD_VAR 0 3
18285: PPUSH
18286: LD_INT 1
18288: PPUSH
18289: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18293: LD_INT 7
18295: PPUSH
18296: LD_VAR 0 3
18300: PPUSH
18301: LD_INT 1
18303: PPUSH
18304: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18308: LD_INT 8
18310: PPUSH
18311: LD_VAR 0 3
18315: PPUSH
18316: LD_INT 1
18318: PPUSH
18319: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18323: LD_INT 10
18325: PPUSH
18326: LD_VAR 0 3
18330: PPUSH
18331: LD_INT 1
18333: PPUSH
18334: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18338: LD_INT 11
18340: PPUSH
18341: LD_VAR 0 3
18345: PPUSH
18346: LD_INT 1
18348: PPUSH
18349: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18353: LD_INT 12
18355: PPUSH
18356: LD_VAR 0 3
18360: PPUSH
18361: LD_INT 1
18363: PPUSH
18364: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18368: LD_INT 13
18370: PPUSH
18371: LD_VAR 0 3
18375: PPUSH
18376: LD_INT 1
18378: PPUSH
18379: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18383: LD_INT 14
18385: PPUSH
18386: LD_VAR 0 3
18390: PPUSH
18391: LD_INT 1
18393: PPUSH
18394: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18398: LD_INT 15
18400: PPUSH
18401: LD_VAR 0 3
18405: PPUSH
18406: LD_INT 1
18408: PPUSH
18409: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18413: LD_INT 16
18415: PPUSH
18416: LD_VAR 0 3
18420: PPUSH
18421: LD_INT 1
18423: PPUSH
18424: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18428: LD_INT 17
18430: PPUSH
18431: LD_VAR 0 3
18435: PPUSH
18436: LD_INT 1
18438: PPUSH
18439: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18443: LD_INT 18
18445: PPUSH
18446: LD_VAR 0 3
18450: PPUSH
18451: LD_INT 1
18453: PPUSH
18454: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18458: LD_INT 19
18460: PPUSH
18461: LD_VAR 0 3
18465: PPUSH
18466: LD_INT 1
18468: PPUSH
18469: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18473: LD_INT 20
18475: PPUSH
18476: LD_VAR 0 3
18480: PPUSH
18481: LD_INT 1
18483: PPUSH
18484: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18488: LD_INT 21
18490: PPUSH
18491: LD_VAR 0 3
18495: PPUSH
18496: LD_INT 1
18498: PPUSH
18499: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18503: LD_INT 23
18505: PPUSH
18506: LD_VAR 0 3
18510: PPUSH
18511: LD_INT 1
18513: PPUSH
18514: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18518: LD_INT 26
18520: PPUSH
18521: LD_VAR 0 3
18525: PPUSH
18526: LD_INT 1
18528: PPUSH
18529: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18533: LD_INT 27
18535: PPUSH
18536: LD_VAR 0 3
18540: PPUSH
18541: LD_INT 1
18543: PPUSH
18544: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18548: LD_INT 28
18550: PPUSH
18551: LD_VAR 0 3
18555: PPUSH
18556: LD_INT 1
18558: PPUSH
18559: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18563: LD_INT 29
18565: PPUSH
18566: LD_VAR 0 3
18570: PPUSH
18571: LD_INT 1
18573: PPUSH
18574: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18578: LD_INT 30
18580: PPUSH
18581: LD_VAR 0 3
18585: PPUSH
18586: LD_INT 1
18588: PPUSH
18589: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18593: LD_INT 31
18595: PPUSH
18596: LD_VAR 0 3
18600: PPUSH
18601: LD_INT 1
18603: PPUSH
18604: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18608: LD_INT 32
18610: PPUSH
18611: LD_VAR 0 3
18615: PPUSH
18616: LD_INT 1
18618: PPUSH
18619: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18623: LD_INT 33
18625: PPUSH
18626: LD_VAR 0 3
18630: PPUSH
18631: LD_INT 1
18633: PPUSH
18634: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18638: LD_INT 36
18640: PPUSH
18641: LD_VAR 0 3
18645: PPUSH
18646: LD_INT 1
18648: PPUSH
18649: CALL_OW 324
// end ; 6 :
18653: GO 19663
18655: LD_INT 6
18657: DOUBLE
18658: EQUAL
18659: IFTRUE 18663
18661: GO 19588
18663: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18664: LD_INT 35
18666: PPUSH
18667: LD_VAR 0 3
18671: PPUSH
18672: LD_INT 1
18674: PPUSH
18675: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18679: LD_INT 45
18681: PPUSH
18682: LD_VAR 0 3
18686: PPUSH
18687: LD_INT 1
18689: PPUSH
18690: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18694: LD_INT 46
18696: PPUSH
18697: LD_VAR 0 3
18701: PPUSH
18702: LD_INT 1
18704: PPUSH
18705: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18709: LD_INT 47
18711: PPUSH
18712: LD_VAR 0 3
18716: PPUSH
18717: LD_INT 1
18719: PPUSH
18720: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18724: LD_INT 1
18726: PPUSH
18727: LD_VAR 0 3
18731: PPUSH
18732: LD_INT 1
18734: PPUSH
18735: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18739: LD_INT 2
18741: PPUSH
18742: LD_VAR 0 3
18746: PPUSH
18747: LD_INT 1
18749: PPUSH
18750: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18754: LD_INT 11
18756: PPUSH
18757: LD_VAR 0 3
18761: PPUSH
18762: LD_INT 1
18764: PPUSH
18765: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18769: LD_INT 20
18771: PPUSH
18772: LD_VAR 0 3
18776: PPUSH
18777: LD_INT 1
18779: PPUSH
18780: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18784: LD_INT 48
18786: PPUSH
18787: LD_VAR 0 3
18791: PPUSH
18792: LD_INT 1
18794: PPUSH
18795: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18799: LD_INT 49
18801: PPUSH
18802: LD_VAR 0 3
18806: PPUSH
18807: LD_INT 1
18809: PPUSH
18810: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18814: LD_INT 50
18816: PPUSH
18817: LD_VAR 0 3
18821: PPUSH
18822: LD_INT 1
18824: PPUSH
18825: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18829: LD_INT 69
18831: PPUSH
18832: LD_VAR 0 3
18836: PPUSH
18837: LD_INT 1
18839: PPUSH
18840: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18844: LD_INT 39
18846: PPUSH
18847: LD_VAR 0 3
18851: PPUSH
18852: LD_INT 1
18854: PPUSH
18855: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18859: LD_INT 34
18861: PPUSH
18862: LD_VAR 0 3
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18874: LD_INT 42
18876: PPUSH
18877: LD_VAR 0 3
18881: PPUSH
18882: LD_INT 1
18884: PPUSH
18885: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18889: LD_INT 44
18891: PPUSH
18892: LD_VAR 0 3
18896: PPUSH
18897: LD_INT 1
18899: PPUSH
18900: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18904: LD_INT 41
18906: PPUSH
18907: LD_VAR 0 3
18911: PPUSH
18912: LD_INT 1
18914: PPUSH
18915: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18919: LD_INT 13
18921: PPUSH
18922: LD_VAR 0 3
18926: PPUSH
18927: LD_INT 1
18929: PPUSH
18930: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18934: LD_INT 40
18936: PPUSH
18937: LD_VAR 0 3
18941: PPUSH
18942: LD_INT 1
18944: PPUSH
18945: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18949: LD_INT 43
18951: PPUSH
18952: LD_VAR 0 3
18956: PPUSH
18957: LD_INT 1
18959: PPUSH
18960: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18964: LD_INT 70
18966: PPUSH
18967: LD_VAR 0 3
18971: PPUSH
18972: LD_INT 1
18974: PPUSH
18975: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18979: LD_INT 23
18981: PPUSH
18982: LD_VAR 0 3
18986: PPUSH
18987: LD_INT 1
18989: PPUSH
18990: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18994: LD_INT 51
18996: PPUSH
18997: LD_VAR 0 3
19001: PPUSH
19002: LD_INT 1
19004: PPUSH
19005: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19009: LD_INT 52
19011: PPUSH
19012: LD_VAR 0 3
19016: PPUSH
19017: LD_INT 1
19019: PPUSH
19020: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19024: LD_INT 6
19026: PPUSH
19027: LD_VAR 0 3
19031: PPUSH
19032: LD_INT 1
19034: PPUSH
19035: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19039: LD_INT 15
19041: PPUSH
19042: LD_VAR 0 3
19046: PPUSH
19047: LD_INT 1
19049: PPUSH
19050: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19054: LD_INT 7
19056: PPUSH
19057: LD_VAR 0 3
19061: PPUSH
19062: LD_INT 1
19064: PPUSH
19065: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19069: LD_INT 12
19071: PPUSH
19072: LD_VAR 0 3
19076: PPUSH
19077: LD_INT 1
19079: PPUSH
19080: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19084: LD_INT 10
19086: PPUSH
19087: LD_VAR 0 3
19091: PPUSH
19092: LD_INT 1
19094: PPUSH
19095: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19099: LD_INT 17
19101: PPUSH
19102: LD_VAR 0 3
19106: PPUSH
19107: LD_INT 1
19109: PPUSH
19110: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19114: LD_INT 18
19116: PPUSH
19117: LD_VAR 0 3
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19129: LD_INT 60
19131: PPUSH
19132: LD_VAR 0 3
19136: PPUSH
19137: LD_INT 1
19139: PPUSH
19140: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19144: LD_INT 61
19146: PPUSH
19147: LD_VAR 0 3
19151: PPUSH
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19159: LD_INT 32
19161: PPUSH
19162: LD_VAR 0 3
19166: PPUSH
19167: LD_INT 1
19169: PPUSH
19170: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19174: LD_INT 27
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: LD_INT 1
19184: PPUSH
19185: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19189: LD_INT 36
19191: PPUSH
19192: LD_VAR 0 3
19196: PPUSH
19197: LD_INT 1
19199: PPUSH
19200: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19204: LD_INT 33
19206: PPUSH
19207: LD_VAR 0 3
19211: PPUSH
19212: LD_INT 1
19214: PPUSH
19215: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19219: LD_INT 9
19221: PPUSH
19222: LD_VAR 0 3
19226: PPUSH
19227: LD_INT 1
19229: PPUSH
19230: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19234: LD_INT 38
19236: PPUSH
19237: LD_VAR 0 3
19241: PPUSH
19242: LD_INT 1
19244: PPUSH
19245: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19249: LD_INT 57
19251: PPUSH
19252: LD_VAR 0 3
19256: PPUSH
19257: LD_INT 1
19259: PPUSH
19260: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19264: LD_INT 58
19266: PPUSH
19267: LD_VAR 0 3
19271: PPUSH
19272: LD_INT 1
19274: PPUSH
19275: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19279: LD_INT 28
19281: PPUSH
19282: LD_VAR 0 3
19286: PPUSH
19287: LD_INT 1
19289: PPUSH
19290: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19294: LD_INT 29
19296: PPUSH
19297: LD_VAR 0 3
19301: PPUSH
19302: LD_INT 1
19304: PPUSH
19305: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19309: LD_INT 30
19311: PPUSH
19312: LD_VAR 0 3
19316: PPUSH
19317: LD_INT 1
19319: PPUSH
19320: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19324: LD_INT 37
19326: PPUSH
19327: LD_VAR 0 3
19331: PPUSH
19332: LD_INT 1
19334: PPUSH
19335: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19339: LD_INT 63
19341: PPUSH
19342: LD_VAR 0 3
19346: PPUSH
19347: LD_INT 1
19349: PPUSH
19350: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19354: LD_INT 64
19356: PPUSH
19357: LD_VAR 0 3
19361: PPUSH
19362: LD_INT 1
19364: PPUSH
19365: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19369: LD_INT 3
19371: PPUSH
19372: LD_VAR 0 3
19376: PPUSH
19377: LD_INT 1
19379: PPUSH
19380: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19384: LD_INT 4
19386: PPUSH
19387: LD_VAR 0 3
19391: PPUSH
19392: LD_INT 1
19394: PPUSH
19395: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19399: LD_INT 5
19401: PPUSH
19402: LD_VAR 0 3
19406: PPUSH
19407: LD_INT 1
19409: PPUSH
19410: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19414: LD_INT 8
19416: PPUSH
19417: LD_VAR 0 3
19421: PPUSH
19422: LD_INT 1
19424: PPUSH
19425: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19429: LD_INT 66
19431: PPUSH
19432: LD_VAR 0 3
19436: PPUSH
19437: LD_INT 1
19439: PPUSH
19440: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19444: LD_INT 67
19446: PPUSH
19447: LD_VAR 0 3
19451: PPUSH
19452: LD_INT 1
19454: PPUSH
19455: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19459: LD_INT 21
19461: PPUSH
19462: LD_VAR 0 3
19466: PPUSH
19467: LD_INT 1
19469: PPUSH
19470: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19474: LD_INT 22
19476: PPUSH
19477: LD_VAR 0 3
19481: PPUSH
19482: LD_INT 1
19484: PPUSH
19485: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19489: LD_INT 19
19491: PPUSH
19492: LD_VAR 0 3
19496: PPUSH
19497: LD_INT 1
19499: PPUSH
19500: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19504: LD_INT 26
19506: PPUSH
19507: LD_VAR 0 3
19511: PPUSH
19512: LD_INT 1
19514: PPUSH
19515: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19519: LD_INT 54
19521: PPUSH
19522: LD_VAR 0 3
19526: PPUSH
19527: LD_INT 1
19529: PPUSH
19530: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19534: LD_INT 55
19536: PPUSH
19537: LD_VAR 0 3
19541: PPUSH
19542: LD_INT 1
19544: PPUSH
19545: CALL_OW 322
// for i = 0 to 39 do
19549: LD_ADDR_VAR 0 4
19553: PUSH
19554: DOUBLE
19555: LD_INT 0
19557: DEC
19558: ST_TO_ADDR
19559: LD_INT 39
19561: PUSH
19562: FOR_TO
19563: IFFALSE 19584
// SetRestrict ( i , side , true ) ;
19565: LD_VAR 0 4
19569: PPUSH
19570: LD_VAR 0 3
19574: PPUSH
19575: LD_INT 1
19577: PPUSH
19578: CALL_OW 324
19582: GO 19562
19584: POP
19585: POP
// end ; else
19586: GO 19663
19588: POP
// begin for i = 1 to 73 do
19589: LD_ADDR_VAR 0 4
19593: PUSH
19594: DOUBLE
19595: LD_INT 1
19597: DEC
19598: ST_TO_ADDR
19599: LD_INT 73
19601: PUSH
19602: FOR_TO
19603: IFFALSE 19624
// SetTech ( i , side , state_enabled ) ;
19605: LD_VAR 0 4
19609: PPUSH
19610: LD_VAR 0 3
19614: PPUSH
19615: LD_INT 1
19617: PPUSH
19618: CALL_OW 322
19622: GO 19602
19624: POP
19625: POP
// for i = 0 to 39 do
19626: LD_ADDR_VAR 0 4
19630: PUSH
19631: DOUBLE
19632: LD_INT 0
19634: DEC
19635: ST_TO_ADDR
19636: LD_INT 39
19638: PUSH
19639: FOR_TO
19640: IFFALSE 19661
// SetRestrict ( i , side , true ) ;
19642: LD_VAR 0 4
19646: PPUSH
19647: LD_VAR 0 3
19651: PPUSH
19652: LD_INT 1
19654: PPUSH
19655: CALL_OW 324
19659: GO 19639
19661: POP
19662: POP
// end ; end ; end ;
19663: GO 15668
19665: POP
19666: POP
// end ;
19667: LD_VAR 0 2
19671: RET
