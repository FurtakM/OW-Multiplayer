// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_siberit , respawning_time_min , respawning_time_max , buildUpTime_Delay , amount_of_apemen , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 42
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 19
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 17
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 20
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 22
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 18
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 372
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 3 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 3
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 167: LD_ADDR_EXP 19
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 6
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 206: LD_ADDR_EXP 17
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 6
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 0 , 0 , 3 ] ;
 245: LD_ADDR_EXP 20
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 22
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 323: LD_ADDR_EXP 18
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// end ; for i := 1 to 8 do
 372: LD_ADDR_VAR 0 2
 376: PUSH
 377: DOUBLE
 378: LD_INT 1
 380: DEC
 381: ST_TO_ADDR
 382: LD_INT 8
 384: PUSH
 385: FOR_TO
 386: IFFALSE 473
// if Multiplayer_GetPlayerIsSpec ( i ) then
 388: LD_VAR 0 2
 392: PPUSH
 393: CALL_OW 530
 397: IFFALSE 471
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 399: LD_ADDR_EXP 19
 403: PUSH
 404: LD_EXP 19
 408: PPUSH
 409: LD_VAR 0 2
 413: PPUSH
 414: LD_INT 0
 416: PPUSH
 417: CALL_OW 1
 421: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 422: LD_ADDR_EXP 18
 426: PUSH
 427: LD_EXP 18
 431: PPUSH
 432: LD_EXP 17
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: PPUSH
 443: LD_EXP 18
 447: PUSH
 448: LD_EXP 17
 452: PUSH
 453: LD_VAR 0 2
 457: ARRAY
 458: ARRAY
 459: PUSH
 460: LD_VAR 0 2
 464: DIFF
 465: PPUSH
 466: CALL_OW 1
 470: ST_TO_ADDR
// end ;
 471: GO 385
 473: POP
 474: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 475: LD_ADDR_EXP 23
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 0
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: LD_INT 0
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: ST_TO_ADDR
// for i := 1 to 8 do
 506: LD_ADDR_VAR 0 2
 510: PUSH
 511: DOUBLE
 512: LD_INT 1
 514: DEC
 515: ST_TO_ADDR
 516: LD_INT 8
 518: PUSH
 519: FOR_TO
 520: IFFALSE 567
// if Side_Positions [ i ] then
 522: LD_EXP 19
 526: PUSH
 527: LD_VAR 0 2
 531: ARRAY
 532: IFFALSE 565
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 534: LD_ADDR_EXP 23
 538: PUSH
 539: LD_EXP 23
 543: PPUSH
 544: LD_EXP 19
 548: PUSH
 549: LD_VAR 0 2
 553: ARRAY
 554: PPUSH
 555: LD_VAR 0 2
 559: PPUSH
 560: CALL_OW 1
 564: ST_TO_ADDR
 565: GO 519
 567: POP
 568: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 569: LD_ADDR_EXP 21
 573: PUSH
 574: LD_EXP 17
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: EMPTY
 583: LIST
 584: DIFF
 585: PUSH
 586: LD_INT 1
 588: GREATER
 589: ST_TO_ADDR
// if Multiplayer then
 590: LD_OWVAR 4
 594: IFFALSE 840
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 596: LD_ADDR_EXP 44
 600: PUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 426
 608: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 609: LD_ADDR_EXP 45
 613: PUSH
 614: LD_INT 1
 616: PPUSH
 617: CALL_OW 426
 621: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 622: LD_ADDR_EXP 46
 626: PUSH
 627: LD_INT 2
 629: PPUSH
 630: CALL_OW 426
 634: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 635: LD_ADDR_EXP 47
 639: PUSH
 640: LD_INT 3
 642: PPUSH
 643: CALL_OW 426
 647: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 648: LD_ADDR_EXP 48
 652: PUSH
 653: LD_INT 4
 655: PPUSH
 656: CALL_OW 426
 660: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 661: LD_ADDR_EXP 49
 665: PUSH
 666: LD_INT 5
 668: PPUSH
 669: CALL_OW 426
 673: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 674: LD_ADDR_EXP 50
 678: PUSH
 679: LD_INT 6
 681: PPUSH
 682: CALL_OW 426
 686: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 687: LD_ADDR_EXP 51
 691: PUSH
 692: LD_INT 10
 694: PPUSH
 695: CALL_OW 426
 699: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 700: LD_ADDR_EXP 52
 704: PUSH
 705: LD_INT 11
 707: PPUSH
 708: CALL_OW 426
 712: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 713: LD_ADDR_EXP 53
 717: PUSH
 718: LD_INT 12
 720: PPUSH
 721: CALL_OW 426
 725: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 726: LD_ADDR_EXP 54
 730: PUSH
 731: LD_INT 13
 733: PPUSH
 734: CALL_OW 426
 738: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 739: LD_ADDR_EXP 55
 743: PUSH
 744: LD_INT 14
 746: PPUSH
 747: CALL_OW 426
 751: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 752: LD_ADDR_EXP 1
 756: PUSH
 757: LD_INT 15
 759: PPUSH
 760: CALL_OW 426
 764: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 765: LD_ADDR_EXP 2
 769: PUSH
 770: LD_INT 16
 772: PPUSH
 773: CALL_OW 426
 777: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 778: LD_ADDR_EXP 56
 782: PUSH
 783: LD_INT 17
 785: PPUSH
 786: CALL_OW 426
 790: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 791: LD_ADDR_EXP 57
 795: PUSH
 796: LD_INT 20
 798: PPUSH
 799: CALL_OW 426
 803: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 804: LD_ADDR_EXP 43
 808: PUSH
 809: LD_INT 21
 811: PPUSH
 812: CALL_OW 426
 816: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_INT 22
 824: PPUSH
 825: CALL_OW 426
 829: ST_TO_ADDR
// def_win_rules = 0 ;
 830: LD_ADDR_EXP 32
 834: PUSH
 835: LD_INT 0
 837: ST_TO_ADDR
// end else
 838: GO 996
// begin Randomize ;
 840: CALL_OW 10
// def_base_level := 2 ;
 844: LD_ADDR_EXP 44
 848: PUSH
 849: LD_INT 2
 851: ST_TO_ADDR
// def_amount_of_people := 0 ;
 852: LD_ADDR_EXP 45
 856: PUSH
 857: LD_INT 0
 859: ST_TO_ADDR
// def_skill_level := 1 ;
 860: LD_ADDR_EXP 46
 864: PUSH
 865: LD_INT 1
 867: ST_TO_ADDR
// def_starting_resources := 2 ;
 868: LD_ADDR_EXP 47
 872: PUSH
 873: LD_INT 2
 875: ST_TO_ADDR
// def_shipments_density := 1 ;
 876: LD_ADDR_EXP 48
 880: PUSH
 881: LD_INT 1
 883: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 884: LD_ADDR_EXP 49
 888: PUSH
 889: LD_INT 0
 891: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 892: LD_ADDR_EXP 50
 896: PUSH
 897: LD_INT 1
 899: ST_TO_ADDR
// def_shared_vision := 1 ;
 900: LD_ADDR_EXP 51
 904: PUSH
 905: LD_INT 1
 907: ST_TO_ADDR
// def_morale_flags := 1 ;
 908: LD_ADDR_EXP 52
 912: PUSH
 913: LD_INT 1
 915: ST_TO_ADDR
// def_siberite_detection := 1 ;
 916: LD_ADDR_EXP 53
 920: PUSH
 921: LD_INT 1
 923: ST_TO_ADDR
// def_people_respawning := 2 ;
 924: LD_ADDR_EXP 54
 928: PUSH
 929: LD_INT 2
 931: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 932: LD_ADDR_EXP 55
 936: PUSH
 937: LD_INT 3
 939: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 940: LD_ADDR_EXP 1
 944: PUSH
 945: LD_INT 0
 947: ST_TO_ADDR
// def_public_score := 0 ;
 948: LD_ADDR_EXP 2
 952: PUSH
 953: LD_INT 0
 955: ST_TO_ADDR
// def_siberite_bomb := 4 ;
 956: LD_ADDR_EXP 56
 960: PUSH
 961: LD_INT 4
 963: ST_TO_ADDR
// def_builduptime := 0 ;
 964: LD_ADDR_EXP 57
 968: PUSH
 969: LD_INT 0
 971: ST_TO_ADDR
// def_game_rules := 0 ;
 972: LD_ADDR_EXP 43
 976: PUSH
 977: LD_INT 0
 979: ST_TO_ADDR
// tech_level = 4 ;
 980: LD_ADDR_VAR 0 3
 984: PUSH
 985: LD_INT 4
 987: ST_TO_ADDR
// def_win_rules = 0 ;
 988: LD_ADDR_EXP 32
 992: PUSH
 993: LD_INT 0
 995: ST_TO_ADDR
// end ; InitGameRules ;
 996: CALL 10800 0 0
// if def_game_rules = 0 then
1000: LD_EXP 43
1004: PUSH
1005: LD_INT 0
1007: EQUAL
1008: IFFALSE 1059
// begin if isSGUI then
1010: LD_OWVAR 83
1014: IFFALSE 1022
// setMpTechs ( ) else
1016: CALL 15548 0 0
1020: GO 1059
// begin if Game_Type = 3 then
1022: LD_EXP 42
1026: PUSH
1027: LD_INT 3
1029: EQUAL
1030: IFFALSE 1046
// tech_level = tech_level + 3 ;
1032: LD_ADDR_VAR 0 3
1036: PUSH
1037: LD_VAR 0 3
1041: PUSH
1042: LD_INT 3
1044: PLUS
1045: ST_TO_ADDR
// SetMpTechLevel ( tech_level + 1 ) ;
1046: LD_VAR 0 3
1050: PUSH
1051: LD_INT 1
1053: PLUS
1054: PPUSH
1055: CALL 15695 0 1
// end ; end ; if ( Game_Type = 5 ) then
1059: LD_EXP 42
1063: PUSH
1064: LD_INT 5
1066: EQUAL
1067: IFFALSE 1096
// begin def_base_level := 1 ;
1069: LD_ADDR_EXP 44
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
1077: LD_ADDR_EXP 49
1081: PUSH
1082: LD_INT 0
1084: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
1085: LD_ADDR_EXP 50
1089: PUSH
1090: LD_INT 0
1092: ST_TO_ADDR
// disable ( 10 ) ;
1093: LD_INT 10
1095: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 0
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_EXP 44
1119: PUSH
1120: LD_INT 1
1122: PLUS
1123: ARRAY
1124: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
1125: LD_ADDR_EXP 4
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 2
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: LD_EXP 44
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: ARRAY
1153: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1154: LD_ADDR_EXP 5
1158: PUSH
1159: LD_EXP 45
1163: PUSH
1164: LD_INT 4
1166: PLUS
1167: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1168: LD_ADDR_EXP 9
1172: PUSH
1173: LD_INT 150
1175: PUSH
1176: LD_EXP 48
1180: PUSH
1181: LD_INT 1
1183: PLUS
1184: MINUS
1185: ST_TO_ADDR
// if def_people_respawning = 0 then
1186: LD_EXP 54
1190: PUSH
1191: LD_INT 0
1193: EQUAL
1194: IFFALSE 1214
// begin respawning_time_min = 0 ;
1196: LD_ADDR_EXP 12
1200: PUSH
1201: LD_INT 0
1203: ST_TO_ADDR
// respawning_time_max = 0 ;
1204: LD_ADDR_EXP 13
1208: PUSH
1209: LD_INT 0
1211: ST_TO_ADDR
// end else
1212: GO 1258
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1214: LD_ADDR_EXP 12
1218: PUSH
1219: LD_INT 10500
1221: PUSH
1222: LD_INT 5
1224: DIVREAL
1225: PUSH
1226: LD_INT 6
1228: PUSH
1229: LD_EXP 54
1233: MINUS
1234: MUL
1235: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1236: LD_ADDR_EXP 13
1240: PUSH
1241: LD_INT 31500
1243: PUSH
1244: LD_INT 5
1246: DIVREAL
1247: PUSH
1248: LD_INT 6
1250: PUSH
1251: LD_EXP 54
1255: MINUS
1256: MUL
1257: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1258: LD_EXP 55
1262: NOT
1263: IFFALSE 1275
// amount_of_apemen := 0 else
1265: LD_ADDR_EXP 15
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
1273: GO 1285
// amount_of_apemen := def_amount_of_apemen ;
1275: LD_ADDR_EXP 15
1279: PUSH
1280: LD_EXP 55
1284: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1285: LD_EXP 56
1289: PUSH
1290: LD_INT 0
1292: EQUAL
1293: IFFALSE 1305
// siberite_bomb_Delay = 0 else
1295: LD_ADDR_EXP 16
1299: PUSH
1300: LD_INT 0
1302: ST_TO_ADDR
1303: GO 1327
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1305: LD_ADDR_EXP 16
1309: PUSH
1310: LD_EXP 56
1314: PUSH
1315: LD_INT 1
1317: MINUS
1318: PUSH
1319: LD_INT 21000
1321: MUL
1322: PUSH
1323: LD_INT 1
1325: PLUS
1326: ST_TO_ADDR
// if def_builduptime = 0 then
1327: LD_EXP 57
1331: PUSH
1332: LD_INT 0
1334: EQUAL
1335: IFFALSE 1347
// buildUpTime_Delay = 0 else
1337: LD_ADDR_EXP 14
1341: PUSH
1342: LD_INT 0
1344: ST_TO_ADDR
1345: GO 1365
// buildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
1347: LD_ADDR_EXP 14
1351: PUSH
1352: LD_INT 8400
1354: PUSH
1355: LD_INT 2100
1357: PUSH
1358: LD_EXP 57
1362: MUL
1363: PLUS
1364: ST_TO_ADDR
// amount_of_siberit := [ 30 , 60 , 90 , 120 , 150 , 180 , 210 , 240 , 270 , 300 , 400 , 500 , 600 , 700 , 800 , 900 , 1000 , 1250 , 1500 , 1750 , 2000 , 2250 , 2500 , 2750 , 3000 , 3500 , 4000 , 4500 , 5000 , 6000 , 7000 , 8000 , 9000 , 10000 ] [ def_amount_of_siberit + 1 ] ;
1365: LD_ADDR_EXP 11
1369: PUSH
1370: LD_INT 30
1372: PUSH
1373: LD_INT 60
1375: PUSH
1376: LD_INT 90
1378: PUSH
1379: LD_INT 120
1381: PUSH
1382: LD_INT 150
1384: PUSH
1385: LD_INT 180
1387: PUSH
1388: LD_INT 210
1390: PUSH
1391: LD_INT 240
1393: PUSH
1394: LD_INT 270
1396: PUSH
1397: LD_INT 300
1399: PUSH
1400: LD_INT 400
1402: PUSH
1403: LD_INT 500
1405: PUSH
1406: LD_INT 600
1408: PUSH
1409: LD_INT 700
1411: PUSH
1412: LD_INT 800
1414: PUSH
1415: LD_INT 900
1417: PUSH
1418: LD_INT 1000
1420: PUSH
1421: LD_INT 1250
1423: PUSH
1424: LD_INT 1500
1426: PUSH
1427: LD_INT 1750
1429: PUSH
1430: LD_INT 2000
1432: PUSH
1433: LD_INT 2250
1435: PUSH
1436: LD_INT 2500
1438: PUSH
1439: LD_INT 2750
1441: PUSH
1442: LD_INT 3000
1444: PUSH
1445: LD_INT 3500
1447: PUSH
1448: LD_INT 4000
1450: PUSH
1451: LD_INT 4500
1453: PUSH
1454: LD_INT 5000
1456: PUSH
1457: LD_INT 6000
1459: PUSH
1460: LD_INT 7000
1462: PUSH
1463: LD_INT 8000
1465: PUSH
1466: LD_INT 9000
1468: PUSH
1469: LD_INT 10000
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: PUSH
1508: LD_EXP 1
1512: PUSH
1513: LD_INT 1
1515: PLUS
1516: ARRAY
1517: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1518: LD_ADDR_EXP 6
1522: PUSH
1523: LD_INT 2
1525: PUSH
1526: LD_INT 3
1528: PUSH
1529: LD_INT 4
1531: PUSH
1532: LD_INT 5
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: PUSH
1541: LD_EXP 46
1545: PUSH
1546: LD_INT 1
1548: PLUS
1549: ARRAY
1550: ST_TO_ADDR
// if ( def_game_rules = 4 ) then
1551: LD_EXP 43
1555: PUSH
1556: LD_INT 4
1558: EQUAL
1559: IFFALSE 1582
// begin starting_resources := [ 10000 , 5000 , 1000 ] ;
1561: LD_ADDR_EXP 8
1565: PUSH
1566: LD_INT 10000
1568: PUSH
1569: LD_INT 5000
1571: PUSH
1572: LD_INT 1000
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: LIST
1579: ST_TO_ADDR
// end else
1580: GO 1854
// if ( Game_Type = 5 ) then
1582: LD_EXP 42
1586: PUSH
1587: LD_INT 5
1589: EQUAL
1590: IFFALSE 1708
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1592: LD_ADDR_EXP 8
1596: PUSH
1597: LD_INT 1000
1599: PUSH
1600: LD_INT 100
1602: PUSH
1603: LD_INT 100
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 2000
1613: PUSH
1614: LD_INT 200
1616: PUSH
1617: LD_INT 200
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: LIST
1624: PUSH
1625: LD_INT 5000
1627: PUSH
1628: LD_INT 500
1630: PUSH
1631: LD_INT 500
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 10000
1641: PUSH
1642: LD_INT 1000
1644: PUSH
1645: LD_INT 1000
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: LIST
1652: PUSH
1653: LD_INT 25000
1655: PUSH
1656: LD_INT 2500
1658: PUSH
1659: LD_INT 2500
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 50000
1669: PUSH
1670: LD_INT 5000
1672: PUSH
1673: LD_INT 5000
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: PUSH
1689: LD_EXP 47
1693: PUSH
1694: LD_INT 1
1696: PLUS
1697: ARRAY
1698: ST_TO_ADDR
// starting_crates := [ ] ;
1699: LD_ADDR_EXP 7
1703: PUSH
1704: EMPTY
1705: ST_TO_ADDR
// end else
1706: GO 1854
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1708: LD_ADDR_EXP 8
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 0
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 30
1729: PUSH
1730: LD_INT 0
1732: PUSH
1733: LD_INT 0
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 50
1743: PUSH
1744: LD_INT 20
1746: PUSH
1747: LD_INT 0
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: LIST
1754: PUSH
1755: LD_INT 80
1757: PUSH
1758: LD_INT 40
1760: PUSH
1761: LD_INT 20
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: LD_EXP 47
1779: PUSH
1780: LD_INT 1
1782: PLUS
1783: ARRAY
1784: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1785: LD_ADDR_EXP 7
1789: PUSH
1790: LD_INT 10
1792: PUSH
1793: EMPTY
1794: LIST
1795: PUSH
1796: LD_INT 7
1798: PUSH
1799: LD_INT 14
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 6
1808: PUSH
1809: LD_INT 12
1811: PUSH
1812: LD_INT 18
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: PUSH
1820: LD_INT 5
1822: PUSH
1823: LD_INT 10
1825: PUSH
1826: LD_INT 15
1828: PUSH
1829: LD_INT 20
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_EXP 47
1848: PUSH
1849: LD_INT 1
1851: PLUS
1852: ARRAY
1853: ST_TO_ADDR
// end ; morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1854: LD_ADDR_EXP 10
1858: PUSH
1859: LD_INT 1
1861: NEG
1862: PUSH
1863: LD_INT 350
1865: PUSH
1866: LD_INT 700
1868: PUSH
1869: LD_INT 1400
1871: PUSH
1872: LD_INT 0
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PUSH
1882: LD_EXP 52
1886: PUSH
1887: LD_INT 1
1889: PLUS
1890: ARRAY
1891: ST_TO_ADDR
// battle_flags_id := [ ] ;
1892: LD_ADDR_EXP 31
1896: PUSH
1897: EMPTY
1898: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1899: LD_ADDR_EXP 41
1903: PUSH
1904: LD_INT 8
1906: PUSH
1907: LD_INT 9
1909: PUSH
1910: LD_INT 10
1912: PUSH
1913: LD_INT 11
1915: PUSH
1916: LD_INT 12
1918: PUSH
1919: LD_INT 13
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// end ;
1930: LD_VAR 0 1
1934: RET
// function init_map ; var i , j ; begin
1935: LD_INT 0
1937: PPUSH
1938: PPUSH
1939: PPUSH
// normal_oil_deposits_locations := [ [ 28 , 22 ] , [ 69 , 3 ] , [ 138 , 27 ] , [ 180 , 104 ] , [ 138 , 137 ] , [ 76 , 115 ] ] ;
1940: LD_ADDR_EXP 27
1944: PUSH
1945: LD_INT 28
1947: PUSH
1948: LD_INT 22
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 69
1957: PUSH
1958: LD_INT 3
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 138
1967: PUSH
1968: LD_INT 27
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 180
1977: PUSH
1978: LD_INT 104
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 138
1987: PUSH
1988: LD_INT 137
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: LD_INT 76
1997: PUSH
1998: LD_INT 115
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 31 , 38 ] , [ 34 , 21 ] ] , [ [ 58 , 4 ] , [ 82 , 4 ] ] , [ [ 122 , 18 ] , [ 152 , 43 ] ] , [ [ 174 , 90 ] , [ 180 , 120 ] ] , [ [ 152 , 136 ] , [ 130 , 136 ] ] , [ [ 89 , 116 ] , [ 59 , 89 ] ] ] ;
2013: LD_ADDR_EXP 28
2017: PUSH
2018: LD_INT 31
2020: PUSH
2021: LD_INT 38
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: PUSH
2028: LD_INT 34
2030: PUSH
2031: LD_INT 21
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: PUSH
2042: LD_INT 58
2044: PUSH
2045: LD_INT 4
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: PUSH
2052: LD_INT 82
2054: PUSH
2055: LD_INT 4
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PUSH
2066: LD_INT 122
2068: PUSH
2069: LD_INT 18
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: PUSH
2076: LD_INT 152
2078: PUSH
2079: LD_INT 43
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PUSH
2090: LD_INT 174
2092: PUSH
2093: LD_INT 90
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 180
2102: PUSH
2103: LD_INT 120
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 152
2116: PUSH
2117: LD_INT 136
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 130
2126: PUSH
2127: LD_INT 136
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 89
2140: PUSH
2141: LD_INT 116
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 59
2150: PUSH
2151: LD_INT 89
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 28 , 26 ] , [ 73 , 3 ] , [ 133 , 22 ] , [ 180 , 110 ] , [ 142 , 137 ] , [ 72 , 112 ] ] ;
2170: LD_ADDR_EXP 29
2174: PUSH
2175: LD_INT 28
2177: PUSH
2178: LD_INT 26
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 73
2187: PUSH
2188: LD_INT 3
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 133
2197: PUSH
2198: LD_INT 22
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 180
2207: PUSH
2208: LD_INT 110
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PUSH
2215: LD_INT 142
2217: PUSH
2218: LD_INT 137
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PUSH
2225: LD_INT 72
2227: PUSH
2228: LD_INT 112
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 27 , 39 ] , [ 30 , 16 ] ] , [ [ 57 , 8 ] , [ 87 , 8 ] ] , [ [ 128 , 19 ] , [ 146 , 36 ] ] , [ [ 176 , 121 ] , [ 179 , 96 ] ] , [ [ 153 , 132 ] , [ 124 , 133 ] ] , [ [ 85 , 117 ] , [ 62 , 96 ] ] ] ;
2243: LD_ADDR_EXP 30
2247: PUSH
2248: LD_INT 27
2250: PUSH
2251: LD_INT 39
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: LD_INT 30
2260: PUSH
2261: LD_INT 16
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: PUSH
2272: LD_INT 57
2274: PUSH
2275: LD_INT 8
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 87
2284: PUSH
2285: LD_INT 8
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 128
2298: PUSH
2299: LD_INT 19
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 146
2308: PUSH
2309: LD_INT 36
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 176
2322: PUSH
2323: LD_INT 121
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 179
2332: PUSH
2333: LD_INT 96
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 153
2346: PUSH
2347: LD_INT 132
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: LD_INT 124
2356: PUSH
2357: LD_INT 133
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PUSH
2368: LD_INT 85
2370: PUSH
2371: LD_INT 117
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: PUSH
2378: LD_INT 62
2380: PUSH
2381: LD_INT 96
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: ST_TO_ADDR
// depot_def := [ [ 53 , 42 , 5 ] , [ 78 , 18 , 0 ] , [ 129 , 43 , 1 ] , [ 155 , 96 , 2 ] , [ 130 , 120 , 3 ] , [ 82 , 98 , 3 ] ] ;
2400: LD_ADDR_EXP 24
2404: PUSH
2405: LD_INT 53
2407: PUSH
2408: LD_INT 42
2410: PUSH
2411: LD_INT 5
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 78
2421: PUSH
2422: LD_INT 18
2424: PUSH
2425: LD_INT 0
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 129
2435: PUSH
2436: LD_INT 43
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: PUSH
2447: LD_INT 155
2449: PUSH
2450: LD_INT 96
2452: PUSH
2453: LD_INT 2
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PUSH
2461: LD_INT 130
2463: PUSH
2464: LD_INT 120
2466: PUSH
2467: LD_INT 3
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 82
2477: PUSH
2478: LD_INT 98
2480: PUSH
2481: LD_INT 3
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: ST_TO_ADDR
// for i in depot_def do
2497: LD_ADDR_VAR 0 2
2501: PUSH
2502: LD_EXP 24
2506: PUSH
2507: FOR_IN
2508: IFFALSE 2582
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2510: LD_ADDR_EXP 26
2514: PUSH
2515: LD_EXP 26
2519: PUSH
2520: LD_VAR 0 2
2524: PUSH
2525: LD_INT 1
2527: ARRAY
2528: PPUSH
2529: LD_VAR 0 2
2533: PUSH
2534: LD_INT 3
2536: ARRAY
2537: PPUSH
2538: LD_INT 10
2540: PPUSH
2541: CALL_OW 272
2545: PUSH
2546: LD_VAR 0 2
2550: PUSH
2551: LD_INT 2
2553: ARRAY
2554: PPUSH
2555: LD_VAR 0 2
2559: PUSH
2560: LD_INT 3
2562: ARRAY
2563: PPUSH
2564: LD_INT 10
2566: PPUSH
2567: CALL_OW 273
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: EMPTY
2577: LIST
2578: ADD
2579: ST_TO_ADDR
2580: GO 2507
2582: POP
2583: POP
// breastworks_def := [ [ [ 65 , 53 , 5 ] , [ 65 , 40 , 4 ] ] , [ [ 76 , 28 , 0 ] , [ 89 , 28 , 5 ] ] , [ [ 115 , 41 , 1 ] , [ 128 , 54 , 0 ] ] , [ [ 143 , 82 , 2 ] , [ 143 , 95 , 1 ] ] , [ [ 131 , 108 , 3 ] , [ 118 , 108 , 2 ] ] , [ [ 80 , 85 , 3 ] , [ 92 , 97 , 4 ] ] ] ;
2584: LD_ADDR_EXP 25
2588: PUSH
2589: LD_INT 65
2591: PUSH
2592: LD_INT 53
2594: PUSH
2595: LD_INT 5
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: PUSH
2603: LD_INT 65
2605: PUSH
2606: LD_INT 40
2608: PUSH
2609: LD_INT 4
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: LIST
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PUSH
2621: LD_INT 76
2623: PUSH
2624: LD_INT 28
2626: PUSH
2627: LD_INT 0
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: PUSH
2635: LD_INT 89
2637: PUSH
2638: LD_INT 28
2640: PUSH
2641: LD_INT 5
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 115
2655: PUSH
2656: LD_INT 41
2658: PUSH
2659: LD_INT 1
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: LIST
2666: PUSH
2667: LD_INT 128
2669: PUSH
2670: LD_INT 54
2672: PUSH
2673: LD_INT 0
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: LD_INT 143
2687: PUSH
2688: LD_INT 82
2690: PUSH
2691: LD_INT 2
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 143
2701: PUSH
2702: LD_INT 95
2704: PUSH
2705: LD_INT 1
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: LD_INT 131
2719: PUSH
2720: LD_INT 108
2722: PUSH
2723: LD_INT 3
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 118
2733: PUSH
2734: LD_INT 108
2736: PUSH
2737: LD_INT 2
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: LIST
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 80
2751: PUSH
2752: LD_INT 85
2754: PUSH
2755: LD_INT 3
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 92
2765: PUSH
2766: LD_INT 97
2768: PUSH
2769: LD_INT 4
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: ST_TO_ADDR
// for i = 1 to Side_Positions do
2789: LD_ADDR_VAR 0 2
2793: PUSH
2794: DOUBLE
2795: LD_INT 1
2797: DEC
2798: ST_TO_ADDR
2799: LD_EXP 19
2803: PUSH
2804: FOR_TO
2805: IFFALSE 2935
// begin if not Side_Positions [ i ] then
2807: LD_EXP 19
2811: PUSH
2812: LD_VAR 0 2
2816: ARRAY
2817: NOT
2818: IFFALSE 2822
// continue ;
2820: GO 2804
// if def_extra_oil_deposits then
2822: LD_EXP 49
2826: IFFALSE 2884
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2828: LD_ADDR_VAR 0 3
2832: PUSH
2833: LD_EXP 28
2837: PUSH
2838: LD_EXP 19
2842: PUSH
2843: LD_VAR 0 2
2847: ARRAY
2848: ARRAY
2849: PUSH
2850: FOR_IN
2851: IFFALSE 2880
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2853: LD_VAR 0 3
2857: PUSH
2858: LD_INT 1
2860: ARRAY
2861: PPUSH
2862: LD_VAR 0 3
2866: PUSH
2867: LD_INT 2
2869: ARRAY
2870: PPUSH
2871: LD_INT 2
2873: PPUSH
2874: CALL_OW 62
2878: GO 2850
2880: POP
2881: POP
2882: GO 2933
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2884: LD_EXP 27
2888: PUSH
2889: LD_EXP 19
2893: PUSH
2894: LD_VAR 0 2
2898: ARRAY
2899: ARRAY
2900: PUSH
2901: LD_INT 1
2903: ARRAY
2904: PPUSH
2905: LD_EXP 27
2909: PUSH
2910: LD_EXP 19
2914: PUSH
2915: LD_VAR 0 2
2919: ARRAY
2920: ARRAY
2921: PUSH
2922: LD_INT 2
2924: ARRAY
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: CALL_OW 62
// end ;
2933: GO 2804
2935: POP
2936: POP
// if def_extra_sib_deposits then
2937: LD_EXP 50
2941: IFFALSE 3095
// for i = 1 to Side_Positions do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: DOUBLE
2949: LD_INT 1
2951: DEC
2952: ST_TO_ADDR
2953: LD_EXP 19
2957: PUSH
2958: FOR_TO
2959: IFFALSE 3093
// begin if not Side_Positions [ i ] then
2961: LD_EXP 19
2965: PUSH
2966: LD_VAR 0 2
2970: ARRAY
2971: NOT
2972: IFFALSE 2976
// continue ;
2974: GO 2958
// if def_extra_sib_deposits = 2 then
2976: LD_EXP 50
2980: PUSH
2981: LD_INT 2
2983: EQUAL
2984: IFFALSE 3042
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2986: LD_ADDR_VAR 0 3
2990: PUSH
2991: LD_EXP 30
2995: PUSH
2996: LD_EXP 19
3000: PUSH
3001: LD_VAR 0 2
3005: ARRAY
3006: ARRAY
3007: PUSH
3008: FOR_IN
3009: IFFALSE 3038
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
3011: LD_VAR 0 3
3015: PUSH
3016: LD_INT 1
3018: ARRAY
3019: PPUSH
3020: LD_VAR 0 3
3024: PUSH
3025: LD_INT 2
3027: ARRAY
3028: PPUSH
3029: LD_INT 3
3031: PPUSH
3032: CALL_OW 62
3036: GO 3008
3038: POP
3039: POP
3040: GO 3091
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
3042: LD_EXP 29
3046: PUSH
3047: LD_EXP 19
3051: PUSH
3052: LD_VAR 0 2
3056: ARRAY
3057: ARRAY
3058: PUSH
3059: LD_INT 1
3061: ARRAY
3062: PPUSH
3063: LD_EXP 29
3067: PUSH
3068: LD_EXP 19
3072: PUSH
3073: LD_VAR 0 2
3077: ARRAY
3078: ARRAY
3079: PUSH
3080: LD_INT 2
3082: ARRAY
3083: PPUSH
3084: LD_INT 3
3086: PPUSH
3087: CALL_OW 62
// end ;
3091: GO 2958
3093: POP
3094: POP
// end ;
3095: LD_VAR 0 1
3099: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
3100: LD_INT 0
3102: PPUSH
3103: PPUSH
3104: PPUSH
// if not Team_Game then
3105: LD_EXP 21
3109: NOT
3110: IFFALSE 3208
// begin for i = 1 to 8 do
3112: LD_ADDR_VAR 0 2
3116: PUSH
3117: DOUBLE
3118: LD_INT 1
3120: DEC
3121: ST_TO_ADDR
3122: LD_INT 8
3124: PUSH
3125: FOR_TO
3126: IFFALSE 3204
// for j = 1 to 8 do
3128: LD_ADDR_VAR 0 3
3132: PUSH
3133: DOUBLE
3134: LD_INT 1
3136: DEC
3137: ST_TO_ADDR
3138: LD_INT 8
3140: PUSH
3141: FOR_TO
3142: IFFALSE 3200
// if i <> j then
3144: LD_VAR 0 2
3148: PUSH
3149: LD_VAR 0 3
3153: NONEQUAL
3154: IFFALSE 3178
// SetAttitude ( i , j , att_neutral , true ) else
3156: LD_VAR 0 2
3160: PPUSH
3161: LD_VAR 0 3
3165: PPUSH
3166: LD_INT 0
3168: PPUSH
3169: LD_INT 1
3171: PPUSH
3172: CALL_OW 80
3176: GO 3198
// SetAttitude ( i , j , att_friend , true ) ;
3178: LD_VAR 0 2
3182: PPUSH
3183: LD_VAR 0 3
3187: PPUSH
3188: LD_INT 1
3190: PPUSH
3191: LD_INT 1
3193: PPUSH
3194: CALL_OW 80
3198: GO 3141
3200: POP
3201: POP
3202: GO 3125
3204: POP
3205: POP
// end else
3206: GO 3383
// begin if def_shared_vision then
3208: LD_EXP 51
3212: IFFALSE 3277
// begin for i in Teams do
3214: LD_ADDR_VAR 0 2
3218: PUSH
3219: LD_EXP 18
3223: PUSH
3224: FOR_IN
3225: IFFALSE 3275
// for j = 2 to i do
3227: LD_ADDR_VAR 0 3
3231: PUSH
3232: DOUBLE
3233: LD_INT 2
3235: DEC
3236: ST_TO_ADDR
3237: LD_VAR 0 2
3241: PUSH
3242: FOR_TO
3243: IFFALSE 3271
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3245: LD_VAR 0 2
3249: PUSH
3250: LD_VAR 0 3
3254: ARRAY
3255: PPUSH
3256: LD_VAR 0 2
3260: PUSH
3261: LD_INT 1
3263: ARRAY
3264: PPUSH
3265: CALL_OW 343
3269: GO 3242
3271: POP
3272: POP
3273: GO 3224
3275: POP
3276: POP
// end ; for i = 1 to 8 do
3277: LD_ADDR_VAR 0 2
3281: PUSH
3282: DOUBLE
3283: LD_INT 1
3285: DEC
3286: ST_TO_ADDR
3287: LD_INT 8
3289: PUSH
3290: FOR_TO
3291: IFFALSE 3381
// for j = 1 to 8 do
3293: LD_ADDR_VAR 0 3
3297: PUSH
3298: DOUBLE
3299: LD_INT 1
3301: DEC
3302: ST_TO_ADDR
3303: LD_INT 8
3305: PUSH
3306: FOR_TO
3307: IFFALSE 3377
// if Side_Teams [ i ] = Side_Teams [ j ] then
3309: LD_EXP 17
3313: PUSH
3314: LD_VAR 0 2
3318: ARRAY
3319: PUSH
3320: LD_EXP 17
3324: PUSH
3325: LD_VAR 0 3
3329: ARRAY
3330: EQUAL
3331: IFFALSE 3355
// SetAttitude ( i , j , att_friend , true ) else
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_VAR 0 3
3342: PPUSH
3343: LD_INT 1
3345: PPUSH
3346: LD_INT 1
3348: PPUSH
3349: CALL_OW 80
3353: GO 3375
// SetAttitude ( i , j , att_enemy , true ) ;
3355: LD_VAR 0 2
3359: PPUSH
3360: LD_VAR 0 3
3364: PPUSH
3365: LD_INT 2
3367: PPUSH
3368: LD_INT 1
3370: PPUSH
3371: CALL_OW 80
3375: GO 3306
3377: POP
3378: POP
3379: GO 3290
3381: POP
3382: POP
// end ; end ;
3383: LD_VAR 0 1
3387: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3388: LD_INT 0
3390: PPUSH
3391: PPUSH
3392: PPUSH
3393: PPUSH
// result := [ ] ;
3394: LD_ADDR_VAR 0 7
3398: PUSH
3399: EMPTY
3400: ST_TO_ADDR
// for i := 1 to count do
3401: LD_ADDR_VAR 0 8
3405: PUSH
3406: DOUBLE
3407: LD_INT 1
3409: DEC
3410: ST_TO_ADDR
3411: LD_VAR 0 1
3415: PUSH
3416: FOR_TO
3417: IFFALSE 3835
// begin uc_direction := Rand ( 0 , 5 ) ;
3419: LD_ADDR_OWVAR 24
3423: PUSH
3424: LD_INT 0
3426: PPUSH
3427: LD_INT 5
3429: PPUSH
3430: CALL_OW 12
3434: ST_TO_ADDR
// if commander then
3435: LD_LOC 1
3439: IFFALSE 3548
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3441: LD_ADDR_OWVAR 26
3445: PUSH
3446: LD_OWVAR 19
3450: PUSH
3451: LD_OWVAR 20
3455: ARRAY
3456: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 12
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: LD_EXP 6
3477: PUSH
3478: LD_INT 2
3480: PLUS
3481: PPUSH
3482: CALL_OW 380
// hc_importance := 105 ;
3486: LD_ADDR_OWVAR 32
3490: PUSH
3491: LD_INT 105
3493: ST_TO_ADDR
// commander := false ;
3494: LD_ADDR_LOC 1
3498: PUSH
3499: LD_INT 0
3501: ST_TO_ADDR
// if Multiplayer then
3502: LD_OWVAR 4
3506: IFFALSE 3546
// begin hc_gallery := MULTIAVATARS ;
3508: LD_ADDR_OWVAR 33
3512: PUSH
3513: LD_STRING MULTIAVATARS
3515: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3516: LD_ADDR_OWVAR 34
3520: PUSH
3521: LD_OWVAR 20
3525: PPUSH
3526: CALL_OW 525
3530: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3531: LD_ADDR_OWVAR 27
3535: PUSH
3536: LD_OWVAR 20
3540: PPUSH
3541: CALL_OW 526
3545: ST_TO_ADDR
// end ; end else
3546: GO 3611
// begin hc_name :=  ;
3548: LD_ADDR_OWVAR 26
3552: PUSH
3553: LD_STRING 
3555: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3556: LD_INT 1
3558: PPUSH
3559: LD_INT 2
3561: PPUSH
3562: CALL_OW 12
3566: PPUSH
3567: LD_VAR 0 2
3571: PPUSH
3572: LD_EXP 6
3576: PPUSH
3577: CALL_OW 380
// hc_importance := 0 ;
3581: LD_ADDR_OWVAR 32
3585: PUSH
3586: LD_INT 0
3588: ST_TO_ADDR
// if Multiplayer then
3589: LD_OWVAR 4
3593: IFFALSE 3611
// begin hc_gallery :=  ;
3595: LD_ADDR_OWVAR 33
3599: PUSH
3600: LD_STRING 
3602: ST_TO_ADDR
// hc_face_number := 0 ;
3603: LD_ADDR_OWVAR 34
3607: PUSH
3608: LD_INT 0
3610: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3611: LD_ADDR_VAR 0 10
3615: PUSH
3616: CALL_OW 44
3620: ST_TO_ADDR
// if global_defined then
3621: LD_LOC 3
3625: IFFALSE 3765
// begin if ( cl = class_soldier ) then
3627: LD_VAR 0 2
3631: PUSH
3632: LD_INT 1
3634: EQUAL
3635: IFFALSE 3655
// j := i + soldiers_created else
3637: LD_ADDR_VAR 0 9
3641: PUSH
3642: LD_VAR 0 8
3646: PUSH
3647: LD_LOC 4
3651: PLUS
3652: ST_TO_ADDR
3653: GO 3665
// j := i ;
3655: LD_ADDR_VAR 0 9
3659: PUSH
3660: LD_VAR 0 8
3664: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3665: LD_LOC 2
3669: PUSH
3670: LD_VAR 0 2
3674: ARRAY
3675: PUSH
3676: LD_VAR 0 9
3680: ARRAY
3681: PPUSH
3682: LD_VAR 0 10
3686: PPUSH
3687: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3691: LD_VAR 0 10
3695: PPUSH
3696: LD_INT 2
3698: PPUSH
3699: LD_LOC 2
3703: PUSH
3704: LD_VAR 0 2
3708: ARRAY
3709: PUSH
3710: LD_VAR 0 9
3714: ARRAY
3715: PPUSH
3716: LD_INT 2
3718: PPUSH
3719: CALL_OW 260
3723: PPUSH
3724: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3728: LD_VAR 0 10
3732: PPUSH
3733: LD_INT 1
3735: PPUSH
3736: LD_LOC 2
3740: PUSH
3741: LD_VAR 0 2
3745: ARRAY
3746: PUSH
3747: LD_VAR 0 9
3751: ARRAY
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: CALL_OW 260
3760: PPUSH
3761: CALL_OW 239
// end ; if building then
3765: LD_VAR 0 6
3769: IFFALSE 3787
// PlaceHumanInUnit ( un , building ) else
3771: LD_VAR 0 10
3775: PPUSH
3776: LD_VAR 0 6
3780: PPUSH
3781: CALL_OW 52
3785: GO 3814
// PlaceUnitXYR ( un , x , y , r , false ) ;
3787: LD_VAR 0 10
3791: PPUSH
3792: LD_VAR 0 3
3796: PPUSH
3797: LD_VAR 0 4
3801: PPUSH
3802: LD_VAR 0 5
3806: PPUSH
3807: LD_INT 0
3809: PPUSH
3810: CALL_OW 50
// result := result ^ [ un ] ;
3814: LD_ADDR_VAR 0 7
3818: PUSH
3819: LD_VAR 0 7
3823: PUSH
3824: LD_VAR 0 10
3828: PUSH
3829: EMPTY
3830: LIST
3831: ADD
3832: ST_TO_ADDR
// end ;
3833: GO 3416
3835: POP
3836: POP
// if not global_defined then
3837: LD_LOC 3
3841: NOT
3842: IFFALSE 3920
// if ( global_units >= cl ) then
3844: LD_LOC 2
3848: PUSH
3849: LD_VAR 0 2
3853: GREATEREQUAL
3854: IFFALSE 3895
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3856: LD_ADDR_LOC 2
3860: PUSH
3861: LD_LOC 2
3865: PPUSH
3866: LD_VAR 0 2
3870: PPUSH
3871: LD_LOC 2
3875: PUSH
3876: LD_VAR 0 2
3880: ARRAY
3881: PUSH
3882: LD_VAR 0 7
3886: ADD
3887: PPUSH
3888: CALL_OW 1
3892: ST_TO_ADDR
3893: GO 3920
// global_units := Replace ( global_units , cl , result ) ;
3895: LD_ADDR_LOC 2
3899: PUSH
3900: LD_LOC 2
3904: PPUSH
3905: LD_VAR 0 2
3909: PPUSH
3910: LD_VAR 0 7
3914: PPUSH
3915: CALL_OW 1
3919: ST_TO_ADDR
// if commander then
3920: LD_LOC 1
3924: IFFALSE 3971
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3926: LD_ADDR_EXP 33
3930: PUSH
3931: LD_EXP 33
3935: PPUSH
3936: LD_OWVAR 20
3940: PPUSH
3941: LD_EXP 33
3945: PUSH
3946: LD_OWVAR 20
3950: ARRAY
3951: PUSH
3952: LD_VAR 0 10
3956: ADD
3957: PPUSH
3958: CALL_OW 1
3962: ST_TO_ADDR
// commander := false ;
3963: LD_ADDR_LOC 1
3967: PUSH
3968: LD_INT 0
3970: ST_TO_ADDR
// end ; end ;
3971: LD_VAR 0 7
3975: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3976: LD_INT 0
3978: PPUSH
3979: PPUSH
3980: PPUSH
3981: PPUSH
3982: PPUSH
3983: PPUSH
3984: PPUSH
3985: PPUSH
3986: PPUSH
// if side in [ 0 , 9 ] then
3987: LD_VAR 0 1
3991: PUSH
3992: LD_INT 0
3994: PUSH
3995: LD_INT 9
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: IN
4002: IFFALSE 4006
// exit ;
4004: GO 5056
// pos := Side_Positions [ side ] ;
4006: LD_ADDR_VAR 0 3
4010: PUSH
4011: LD_EXP 19
4015: PUSH
4016: LD_VAR 0 1
4020: ARRAY
4021: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
4022: LD_ADDR_OWVAR 21
4026: PUSH
4027: LD_EXP 20
4031: PUSH
4032: LD_VAR 0 1
4036: ARRAY
4037: ST_TO_ADDR
// uc_side := side ;
4038: LD_ADDR_OWVAR 20
4042: PUSH
4043: LD_VAR 0 1
4047: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
4048: LD_ADDR_VAR 0 4
4052: PUSH
4053: LD_EXP 24
4057: PUSH
4058: LD_VAR 0 3
4062: ARRAY
4063: PUSH
4064: LD_INT 1
4066: ARRAY
4067: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
4068: LD_ADDR_VAR 0 5
4072: PUSH
4073: LD_EXP 24
4077: PUSH
4078: LD_VAR 0 3
4082: ARRAY
4083: PUSH
4084: LD_INT 2
4086: ARRAY
4087: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
4088: LD_ADDR_VAR 0 6
4092: PUSH
4093: LD_EXP 24
4097: PUSH
4098: LD_VAR 0 3
4102: ARRAY
4103: PUSH
4104: LD_INT 3
4106: ARRAY
4107: ST_TO_ADDR
// if is_depot then
4108: LD_EXP 3
4112: IFFALSE 4245
// begin bc_type = b_depot ;
4114: LD_ADDR_OWVAR 42
4118: PUSH
4119: LD_INT 0
4121: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4122: LD_ADDR_VAR 0 10
4126: PUSH
4127: LD_VAR 0 4
4131: PPUSH
4132: LD_VAR 0 5
4136: PPUSH
4137: LD_VAR 0 6
4141: PPUSH
4142: CALL_OW 47
4146: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
4147: LD_VAR 0 10
4151: PPUSH
4152: LD_STRING @
4154: PUSH
4155: LD_VAR 0 1
4159: STR
4160: PPUSH
4161: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
4165: LD_VAR 0 10
4169: PPUSH
4170: CALL_OW 274
4174: PPUSH
4175: LD_INT 1
4177: PPUSH
4178: LD_EXP 8
4182: PUSH
4183: LD_INT 1
4185: ARRAY
4186: PPUSH
4187: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
4191: LD_VAR 0 10
4195: PPUSH
4196: CALL_OW 274
4200: PPUSH
4201: LD_INT 2
4203: PPUSH
4204: LD_EXP 8
4208: PUSH
4209: LD_INT 2
4211: ARRAY
4212: PPUSH
4213: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4217: LD_VAR 0 10
4221: PPUSH
4222: CALL_OW 274
4226: PPUSH
4227: LD_INT 3
4229: PPUSH
4230: LD_EXP 8
4234: PUSH
4235: LD_INT 3
4237: ARRAY
4238: PPUSH
4239: CALL_OW 277
// end else
4243: GO 4389
// begin for i := 1 to 3 do
4245: LD_ADDR_VAR 0 7
4249: PUSH
4250: DOUBLE
4251: LD_INT 1
4253: DEC
4254: ST_TO_ADDR
4255: LD_INT 3
4257: PUSH
4258: FOR_TO
4259: IFFALSE 4387
// begin r := starting_resources [ i ] ;
4261: LD_ADDR_VAR 0 8
4265: PUSH
4266: LD_EXP 8
4270: PUSH
4271: LD_VAR 0 7
4275: ARRAY
4276: ST_TO_ADDR
// while r >= 10 do
4277: LD_VAR 0 8
4281: PUSH
4282: LD_INT 10
4284: GREATEREQUAL
4285: IFFALSE 4385
// if r > 50 then
4287: LD_VAR 0 8
4291: PUSH
4292: LD_INT 50
4294: GREATER
4295: IFFALSE 4341
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4297: LD_VAR 0 7
4301: PPUSH
4302: LD_INT 5
4304: PPUSH
4305: LD_VAR 0 4
4309: PPUSH
4310: LD_VAR 0 5
4314: PPUSH
4315: LD_INT 4
4317: PPUSH
4318: LD_INT 0
4320: PPUSH
4321: CALL_OW 60
// r := r - 50 ;
4325: LD_ADDR_VAR 0 8
4329: PUSH
4330: LD_VAR 0 8
4334: PUSH
4335: LD_INT 50
4337: MINUS
4338: ST_TO_ADDR
// end else
4339: GO 4383
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4341: LD_VAR 0 7
4345: PPUSH
4346: LD_VAR 0 8
4350: PUSH
4351: LD_INT 10
4353: DIV
4354: PPUSH
4355: LD_VAR 0 4
4359: PPUSH
4360: LD_VAR 0 5
4364: PPUSH
4365: LD_INT 4
4367: PPUSH
4368: LD_INT 0
4370: PPUSH
4371: CALL_OW 60
// r := 0 ;
4375: LD_ADDR_VAR 0 8
4379: PUSH
4380: LD_INT 0
4382: ST_TO_ADDR
// end ;
4383: GO 4277
// end ;
4385: GO 4258
4387: POP
4388: POP
// end ; for r in starting_crates do
4389: LD_ADDR_VAR 0 8
4393: PUSH
4394: LD_EXP 7
4398: PUSH
4399: FOR_IN
4400: IFFALSE 4432
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4402: LD_INT 1
4404: PPUSH
4405: LD_INT 5
4407: PPUSH
4408: LD_VAR 0 4
4412: PPUSH
4413: LD_VAR 0 5
4417: PPUSH
4418: LD_VAR 0 8
4422: PPUSH
4423: LD_INT 0
4425: PPUSH
4426: CALL_OW 60
4430: GO 4399
4432: POP
4433: POP
// if def_morale_flags then
4434: LD_EXP 52
4438: IFFALSE 4577
// begin x := start_def [ pos ] [ 1 ] ;
4440: LD_ADDR_VAR 0 4
4444: PUSH
4445: LD_EXP 26
4449: PUSH
4450: LD_VAR 0 3
4454: ARRAY
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4460: LD_ADDR_VAR 0 5
4464: PUSH
4465: LD_EXP 26
4469: PUSH
4470: LD_VAR 0 3
4474: ARRAY
4475: PUSH
4476: LD_INT 2
4478: ARRAY
4479: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4480: LD_VAR 0 4
4484: PPUSH
4485: LD_VAR 0 5
4489: PPUSH
4490: LD_INT 12
4492: PPUSH
4493: LD_INT 2
4495: PPUSH
4496: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4500: LD_ADDR_EXP 31
4504: PUSH
4505: LD_EXP 31
4509: PUSH
4510: LD_VAR 0 1
4514: PPUSH
4515: LD_VAR 0 4
4519: PPUSH
4520: LD_VAR 0 5
4524: PPUSH
4525: LD_INT 1
4527: PUSH
4528: LD_INT 100
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: LD_INT 2
4537: PUSH
4538: LD_INT 50
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 3
4547: PUSH
4548: LD_INT 20
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PUSH
4555: LD_INT 20
4557: PUSH
4558: LD_INT 100
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: PPUSH
4571: CALL_OW 418
4575: ADD
4576: ST_TO_ADDR
// end ; commander := true ;
4577: LD_ADDR_LOC 1
4581: PUSH
4582: LD_INT 1
4584: ST_TO_ADDR
// soldiers_created := 0 ;
4585: LD_ADDR_LOC 4
4589: PUSH
4590: LD_INT 0
4592: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4593: LD_ADDR_VAR 0 7
4597: PUSH
4598: DOUBLE
4599: LD_INT 1
4601: DEC
4602: ST_TO_ADDR
4603: LD_EXP 4
4607: PUSH
4608: FOR_TO
4609: IFFALSE 4762
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4611: LD_ADDR_VAR 0 4
4615: PUSH
4616: LD_EXP 25
4620: PUSH
4621: LD_VAR 0 3
4625: ARRAY
4626: PUSH
4627: LD_VAR 0 7
4631: ARRAY
4632: PUSH
4633: LD_INT 1
4635: ARRAY
4636: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4637: LD_ADDR_VAR 0 5
4641: PUSH
4642: LD_EXP 25
4646: PUSH
4647: LD_VAR 0 3
4651: ARRAY
4652: PUSH
4653: LD_VAR 0 7
4657: ARRAY
4658: PUSH
4659: LD_INT 2
4661: ARRAY
4662: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4663: LD_ADDR_VAR 0 6
4667: PUSH
4668: LD_EXP 25
4672: PUSH
4673: LD_VAR 0 3
4677: ARRAY
4678: PUSH
4679: LD_VAR 0 7
4683: ARRAY
4684: PUSH
4685: LD_INT 3
4687: ARRAY
4688: ST_TO_ADDR
// bc_type := b_breastwork ;
4689: LD_ADDR_OWVAR 42
4693: PUSH
4694: LD_INT 31
4696: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4697: LD_ADDR_VAR 0 9
4701: PUSH
4702: LD_VAR 0 4
4706: PPUSH
4707: LD_VAR 0 5
4711: PPUSH
4712: LD_VAR 0 6
4716: PPUSH
4717: CALL_OW 47
4721: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4722: LD_INT 1
4724: PPUSH
4725: LD_INT 1
4727: PPUSH
4728: LD_INT 0
4730: PPUSH
4731: LD_INT 0
4733: PPUSH
4734: LD_INT 0
4736: PPUSH
4737: LD_VAR 0 9
4741: PPUSH
4742: CALL 3388 0 6
// soldiers_created := soldiers_created + 1 ;
4746: LD_ADDR_LOC 4
4750: PUSH
4751: LD_LOC 4
4755: PUSH
4756: LD_INT 1
4758: PLUS
4759: ST_TO_ADDR
// end ;
4760: GO 4608
4762: POP
4763: POP
// x := start_def [ pos ] [ 1 ] ;
4764: LD_ADDR_VAR 0 4
4768: PUSH
4769: LD_EXP 26
4773: PUSH
4774: LD_VAR 0 3
4778: ARRAY
4779: PUSH
4780: LD_INT 1
4782: ARRAY
4783: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4784: LD_ADDR_VAR 0 5
4788: PUSH
4789: LD_EXP 26
4793: PUSH
4794: LD_VAR 0 3
4798: ARRAY
4799: PUSH
4800: LD_INT 2
4802: ARRAY
4803: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4804: LD_LOC 8
4808: PUSH
4809: LD_EXP 4
4813: MINUS
4814: PPUSH
4815: LD_INT 1
4817: PPUSH
4818: LD_VAR 0 4
4822: PPUSH
4823: LD_VAR 0 5
4827: PPUSH
4828: LD_INT 5
4830: PPUSH
4831: LD_INT 0
4833: PPUSH
4834: CALL 3388 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4838: LD_LOC 5
4842: PPUSH
4843: LD_INT 2
4845: PPUSH
4846: LD_VAR 0 4
4850: PPUSH
4851: LD_VAR 0 5
4855: PPUSH
4856: LD_INT 5
4858: PPUSH
4859: LD_INT 0
4861: PPUSH
4862: CALL 3388 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4866: LD_LOC 7
4870: PPUSH
4871: LD_INT 3
4873: PPUSH
4874: LD_VAR 0 4
4878: PPUSH
4879: LD_VAR 0 5
4883: PPUSH
4884: LD_INT 5
4886: PPUSH
4887: LD_INT 0
4889: PPUSH
4890: CALL 3388 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4894: LD_LOC 6
4898: PPUSH
4899: LD_INT 4
4901: PPUSH
4902: LD_VAR 0 4
4906: PPUSH
4907: LD_VAR 0 5
4911: PPUSH
4912: LD_INT 5
4914: PPUSH
4915: LD_INT 0
4917: PPUSH
4918: CALL 3388 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4922: LD_EXP 53
4926: PUSH
4927: LD_INT 20
4929: PPUSH
4930: LD_VAR 0 1
4934: PPUSH
4935: CALL_OW 321
4939: PUSH
4940: LD_INT 1
4942: EQUAL
4943: AND
4944: IFFALSE 4961
// SetTech ( tech_SibDet , side , state_researched ) ;
4946: LD_INT 20
4948: PPUSH
4949: LD_VAR 0 1
4953: PPUSH
4954: LD_INT 2
4956: PPUSH
4957: CALL_OW 322
// if def_siberite_bomb = 1 then
4961: LD_EXP 56
4965: PUSH
4966: LD_INT 1
4968: EQUAL
4969: IFFALSE 5003
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4971: LD_INT 25
4973: PPUSH
4974: LD_VAR 0 1
4978: PPUSH
4979: LD_INT 1
4981: PPUSH
4982: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4986: LD_INT 73
4988: PPUSH
4989: LD_VAR 0 1
4993: PPUSH
4994: LD_INT 1
4996: PPUSH
4997: CALL_OW 322
// end else
5001: GO 5033
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
5003: LD_INT 25
5005: PPUSH
5006: LD_VAR 0 1
5010: PPUSH
5011: LD_INT 0
5013: PPUSH
5014: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
5018: LD_INT 73
5020: PPUSH
5021: LD_VAR 0 1
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
5033: LD_INT 24
5035: PPUSH
5036: LD_VAR 0 1
5040: PPUSH
5041: LD_INT 0
5043: PPUSH
5044: CALL_OW 322
// global_defined := true ;
5048: LD_ADDR_LOC 3
5052: PUSH
5053: LD_INT 1
5055: ST_TO_ADDR
// end ;
5056: LD_VAR 0 2
5060: RET
// every 0 0$1 do
5061: GO 5063
5063: DISABLE
// if ( def_siberite_bomb > 1 ) then
5064: LD_EXP 56
5068: PUSH
5069: LD_INT 1
5071: GREATER
5072: IFFALSE 5087
// begin wait ( siberite_bomb_Delay ) ;
5074: LD_EXP 16
5078: PPUSH
5079: CALL_OW 67
// EnableSibFiss ;
5083: CALL 5088 0 0
// end ;
5087: END
// function EnableSibFiss ; var i ; begin
5088: LD_INT 0
5090: PPUSH
5091: PPUSH
// for i := 1 to 8 do
5092: LD_ADDR_VAR 0 2
5096: PUSH
5097: DOUBLE
5098: LD_INT 1
5100: DEC
5101: ST_TO_ADDR
5102: LD_INT 8
5104: PUSH
5105: FOR_TO
5106: IFFALSE 5152
// if Side_Positions [ i ] then
5108: LD_EXP 19
5112: PUSH
5113: LD_VAR 0 2
5117: ARRAY
5118: IFFALSE 5150
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5120: LD_INT 25
5122: PPUSH
5123: LD_VAR 0 2
5127: PPUSH
5128: LD_INT 1
5130: PPUSH
5131: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5135: LD_INT 73
5137: PPUSH
5138: LD_VAR 0 2
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 322
// end ;
5150: GO 5105
5152: POP
5153: POP
// end ;
5154: LD_VAR 0 1
5158: RET
// function prepare_sides ; var i ; begin
5159: LD_INT 0
5161: PPUSH
5162: PPUSH
// global_units := [ ] ;
5163: LD_ADDR_LOC 2
5167: PUSH
5168: EMPTY
5169: ST_TO_ADDR
// global_defined := false ;
5170: LD_ADDR_LOC 3
5174: PUSH
5175: LD_INT 0
5177: ST_TO_ADDR
// CountClassMembers ;
5178: CALL 5228 0 0
// for i := 1 to 8 do
5182: LD_ADDR_VAR 0 2
5186: PUSH
5187: DOUBLE
5188: LD_INT 1
5190: DEC
5191: ST_TO_ADDR
5192: LD_INT 8
5194: PUSH
5195: FOR_TO
5196: IFFALSE 5221
// if Side_Positions [ i ] then
5198: LD_EXP 19
5202: PUSH
5203: LD_VAR 0 2
5207: ARRAY
5208: IFFALSE 5219
// prepare_side ( i ) ;
5210: LD_VAR 0 2
5214: PPUSH
5215: CALL 3976 0 1
5219: GO 5195
5221: POP
5222: POP
// end ;
5223: LD_VAR 0 1
5227: RET
// function CountClassMembers ; var Mode ; begin
5228: LD_INT 0
5230: PPUSH
5231: PPUSH
// if No_Mechs then
5232: LD_EXP 58
5236: IFFALSE 5248
// Mode := 2 else
5238: LD_ADDR_VAR 0 2
5242: PUSH
5243: LD_INT 2
5245: ST_TO_ADDR
5246: GO 5256
// Mode := 1 ;
5248: LD_ADDR_VAR 0 2
5252: PUSH
5253: LD_INT 1
5255: ST_TO_ADDR
// neng := number_of_people ;
5256: LD_ADDR_LOC 5
5260: PUSH
5261: LD_EXP 5
5265: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5266: LD_ADDR_LOC 8
5270: PUSH
5271: LD_LOC 5
5275: PUSH
5276: LD_INT 4
5278: PUSH
5279: LD_INT 3
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: LD_VAR 0 2
5290: ARRAY
5291: DIV
5292: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5293: LD_LOC 8
5297: PUSH
5298: LD_EXP 4
5302: LESS
5303: IFFALSE 5315
// nsol := number_of_breastworks ;
5305: LD_ADDR_LOC 8
5309: PUSH
5310: LD_EXP 4
5314: ST_TO_ADDR
// neng := neng - nsol ;
5315: LD_ADDR_LOC 5
5319: PUSH
5320: LD_LOC 5
5324: PUSH
5325: LD_LOC 8
5329: MINUS
5330: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5331: LD_ADDR_LOC 6
5335: PUSH
5336: LD_LOC 5
5340: PUSH
5341: LD_INT 3
5343: PUSH
5344: LD_INT 2
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PUSH
5351: LD_VAR 0 2
5355: ARRAY
5356: DIV
5357: ST_TO_ADDR
// if ( nsci < 1 ) then
5358: LD_LOC 6
5362: PUSH
5363: LD_INT 1
5365: LESS
5366: IFFALSE 5376
// nsci := 1 ;
5368: LD_ADDR_LOC 6
5372: PUSH
5373: LD_INT 1
5375: ST_TO_ADDR
// neng := neng - nsci ;
5376: LD_ADDR_LOC 5
5380: PUSH
5381: LD_LOC 5
5385: PUSH
5386: LD_LOC 6
5390: MINUS
5391: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5392: LD_ADDR_LOC 7
5396: PUSH
5397: LD_LOC 5
5401: PUSH
5402: LD_INT 2
5404: DIV
5405: PUSH
5406: LD_INT 0
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: LD_VAR 0 2
5417: ARRAY
5418: ST_TO_ADDR
// neng := neng - nmech ;
5419: LD_ADDR_LOC 5
5423: PUSH
5424: LD_LOC 5
5428: PUSH
5429: LD_LOC 7
5433: MINUS
5434: ST_TO_ADDR
// if ( neng < 1 ) then
5435: LD_LOC 5
5439: PUSH
5440: LD_INT 1
5442: LESS
5443: IFFALSE 5453
// neng := 1 ;
5445: LD_ADDR_LOC 5
5449: PUSH
5450: LD_INT 1
5452: ST_TO_ADDR
// end ;
5453: LD_VAR 0 1
5457: RET
// starting begin disable ( 98 ) ;
5458: LD_INT 98
5460: DISABLE_MARKED
// disable ( 99 ) ;
5461: LD_INT 99
5463: DISABLE_MARKED
// disable ( 100 ) ;
5464: LD_INT 100
5466: DISABLE_MARKED
// disable ( 200 ) ;
5467: LD_INT 200
5469: DISABLE_MARKED
// disable ( 400 ) ;
5470: LD_INT 400
5472: DISABLE_MARKED
// disable ( 401 ) ;
5473: LD_INT 401
5475: DISABLE_MARKED
// disable ( 600 ) ;
5476: LD_INT 600
5478: DISABLE_MARKED
// mp_selectmsg := true ;
5479: LD_ADDR_OWVAR 13
5483: PUSH
5484: LD_INT 1
5486: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5487: CALL 68 0 0
// init_map ;
5491: CALL 1935 0 0
// set_shared_visions_and_alliances ;
5495: CALL 3100 0 0
// ResetFog ;
5499: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5503: LD_OWVAR 2
5507: PPUSH
5508: CALL_OW 520
// prepare_sides ;
5512: CALL 5159 0 0
// init_respawning ;
5516: CALL 7226 0 0
// Init_Win_Condition ;
5520: CALL 14322 0 0
// InitLimits ;
5524: CALL 12911 0 0
// ShowTimer ;
5528: CALL 13848 0 0
// case Game_Type of 3 :
5532: LD_EXP 42
5536: PUSH
5537: LD_INT 3
5539: DOUBLE
5540: EQUAL
5541: IFTRUE 5545
5543: GO 5551
5545: POP
// enable ( 100 ) ; 4 :
5546: LD_INT 100
5548: ENABLE_MARKED
5549: GO 5567
5551: LD_INT 4
5553: DOUBLE
5554: EQUAL
5555: IFTRUE 5559
5557: GO 5566
5559: POP
// InitBloodGods ; end ;
5560: CALL 10474 0 0
5564: GO 5567
5566: POP
// music_nat := Side_Nations [ your_side ] ;
5567: LD_ADDR_OWVAR 71
5571: PUSH
5572: LD_EXP 20
5576: PUSH
5577: LD_OWVAR 2
5581: ARRAY
5582: ST_TO_ADDR
// if IAmSpec then
5583: CALL_OW 531
5587: IFFALSE 5611
// begin fogOff ( true ) ;
5589: LD_INT 1
5591: PPUSH
5592: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
5596: LD_INT 104
5598: PPUSH
5599: LD_INT 69
5601: PPUSH
5602: CALL_OW 86
// enable ( 400 ) ;
5606: LD_INT 400
5608: ENABLE_MARKED
// end else
5609: GO 5657
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5611: LD_EXP 26
5615: PUSH
5616: LD_EXP 19
5620: PUSH
5621: LD_OWVAR 2
5625: ARRAY
5626: ARRAY
5627: PUSH
5628: LD_INT 1
5630: ARRAY
5631: PPUSH
5632: LD_EXP 26
5636: PUSH
5637: LD_EXP 19
5641: PUSH
5642: LD_OWVAR 2
5646: ARRAY
5647: ARRAY
5648: PUSH
5649: LD_INT 2
5651: ARRAY
5652: PPUSH
5653: CALL_OW 86
// end ; InitApeman ;
5657: CALL 6393 0 0
// if def_builduptime then
5661: LD_EXP 57
5665: IFFALSE 5671
// BeginBuildUp ;
5667: CALL 9105 0 0
// end ; end_of_file
5671: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5672: GO 5674
5674: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5675: LD_INT 4
5677: PPUSH
5678: LD_INT 5
5680: PPUSH
5681: CALL_OW 12
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: CALL_OW 57
// enable ;
5693: ENABLE
// end ;
5694: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5695: GO 5697
5697: DISABLE
5698: LD_INT 0
5700: PPUSH
5701: PPUSH
// begin case tick of 1 .. 1 1$0 :
5702: LD_OWVAR 1
5706: PUSH
5707: LD_INT 1
5709: DOUBLE
5710: GREATEREQUAL
5711: IFFALSE 5719
5713: LD_INT 2100
5715: DOUBLE
5716: LESSEQUAL
5717: IFTRUE 5721
5719: GO 5749
5721: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5722: LD_EXP 9
5726: PUSH
5727: LD_INT 100
5729: DIVREAL
5730: PUSH
5731: LD_INT 350
5733: PPUSH
5734: LD_INT 1050
5736: PPUSH
5737: CALL_OW 12
5741: MUL
5742: PPUSH
5743: CALL_OW 67
5747: GO 6051
5749: LD_INT 2100
5751: PUSH
5752: LD_INT 1
5754: PLUS
5755: DOUBLE
5756: GREATEREQUAL
5757: IFFALSE 5765
5759: LD_INT 10500
5761: DOUBLE
5762: LESSEQUAL
5763: IFTRUE 5767
5765: GO 5795
5767: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5768: LD_EXP 9
5772: PUSH
5773: LD_INT 100
5775: DIVREAL
5776: PUSH
5777: LD_INT 1050
5779: PPUSH
5780: LD_INT 1575
5782: PPUSH
5783: CALL_OW 12
5787: MUL
5788: PPUSH
5789: CALL_OW 67
5793: GO 6051
5795: LD_INT 10500
5797: PUSH
5798: LD_INT 1
5800: PLUS
5801: DOUBLE
5802: GREATEREQUAL
5803: IFFALSE 5811
5805: LD_INT 21000
5807: DOUBLE
5808: LESSEQUAL
5809: IFTRUE 5813
5811: GO 5841
5813: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5814: LD_EXP 9
5818: PUSH
5819: LD_INT 100
5821: DIVREAL
5822: PUSH
5823: LD_INT 1575
5825: PPUSH
5826: LD_INT 2100
5828: PPUSH
5829: CALL_OW 12
5833: MUL
5834: PPUSH
5835: CALL_OW 67
5839: GO 6051
5841: LD_INT 21000
5843: PUSH
5844: LD_INT 1
5846: PLUS
5847: DOUBLE
5848: GREATEREQUAL
5849: IFFALSE 5857
5851: LD_INT 42000
5853: DOUBLE
5854: LESSEQUAL
5855: IFTRUE 5859
5857: GO 5887
5859: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5860: LD_EXP 9
5864: PUSH
5865: LD_INT 100
5867: DIVREAL
5868: PUSH
5869: LD_INT 2100
5871: PPUSH
5872: LD_INT 2625
5874: PPUSH
5875: CALL_OW 12
5879: MUL
5880: PPUSH
5881: CALL_OW 67
5885: GO 6051
5887: LD_INT 42000
5889: PUSH
5890: LD_INT 1
5892: PLUS
5893: DOUBLE
5894: GREATEREQUAL
5895: IFFALSE 5903
5897: LD_INT 63000
5899: DOUBLE
5900: LESSEQUAL
5901: IFTRUE 5905
5903: GO 5933
5905: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5906: LD_EXP 9
5910: PUSH
5911: LD_INT 100
5913: DIVREAL
5914: PUSH
5915: LD_INT 2625
5917: PPUSH
5918: LD_INT 3150
5920: PPUSH
5921: CALL_OW 12
5925: MUL
5926: PPUSH
5927: CALL_OW 67
5931: GO 6051
5933: LD_INT 63000
5935: PUSH
5936: LD_INT 1
5938: PLUS
5939: DOUBLE
5940: GREATEREQUAL
5941: IFFALSE 5949
5943: LD_INT 105000
5945: DOUBLE
5946: LESSEQUAL
5947: IFTRUE 5951
5949: GO 5979
5951: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5952: LD_EXP 9
5956: PUSH
5957: LD_INT 100
5959: DIVREAL
5960: PUSH
5961: LD_INT 3150
5963: PPUSH
5964: LD_INT 3675
5966: PPUSH
5967: CALL_OW 12
5971: MUL
5972: PPUSH
5973: CALL_OW 67
5977: GO 6051
5979: LD_INT 105000
5981: PUSH
5982: LD_INT 1
5984: PLUS
5985: DOUBLE
5986: GREATEREQUAL
5987: IFFALSE 5995
5989: LD_INT 630000
5991: DOUBLE
5992: LESSEQUAL
5993: IFTRUE 5997
5995: GO 6025
5997: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5998: LD_EXP 9
6002: PUSH
6003: LD_INT 100
6005: DIVREAL
6006: PUSH
6007: LD_INT 3675
6009: PPUSH
6010: LD_INT 4200
6012: PPUSH
6013: CALL_OW 12
6017: MUL
6018: PPUSH
6019: CALL_OW 67
6023: GO 6051
6025: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
6026: LD_EXP 9
6030: PUSH
6031: LD_INT 100
6033: DIVREAL
6034: PUSH
6035: LD_INT 4200
6037: PPUSH
6038: LD_INT 5250
6040: PPUSH
6041: CALL_OW 12
6045: MUL
6046: PPUSH
6047: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6051: LD_ADDR_VAR 0 2
6055: PUSH
6056: LD_INT 3
6058: PPUSH
6059: LD_INT 5
6061: PPUSH
6062: CALL_OW 12
6066: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6067: LD_ADDR_VAR 0 1
6071: PUSH
6072: LD_EXP 19
6076: PUSH
6077: LD_INT 0
6079: PUSH
6080: EMPTY
6081: LIST
6082: DIFF
6083: PUSH
6084: FOR_IN
6085: IFFALSE 6134
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
6087: LD_VAR 0 2
6091: PPUSH
6092: LD_EXP 26
6096: PUSH
6097: LD_VAR 0 1
6101: ARRAY
6102: PUSH
6103: LD_INT 1
6105: ARRAY
6106: PPUSH
6107: LD_EXP 26
6111: PUSH
6112: LD_VAR 0 1
6116: ARRAY
6117: PUSH
6118: LD_INT 2
6120: ARRAY
6121: PPUSH
6122: LD_INT 20
6124: PPUSH
6125: LD_INT 1
6127: PPUSH
6128: CALL_OW 56
6132: GO 6084
6134: POP
6135: POP
// enable ;
6136: ENABLE
// end ;
6137: PPOPN 2
6139: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
6140: GO 6142
6142: DISABLE
6143: LD_INT 0
6145: PPUSH
6146: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
6147: LD_INT 1
6149: PPUSH
6150: LD_INT 1
6152: PPUSH
6153: CALL_OW 287
6157: PUSH
6158: LD_INT 200
6160: PUSH
6161: LD_EXP 9
6165: MINUS
6166: PUSH
6167: LD_INT 100
6169: DIVREAL
6170: PUSH
6171: LD_INT 5
6173: MUL
6174: LESS
6175: IFFALSE 6198
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
6177: LD_INT 3
6179: PPUSH
6180: LD_INT 5
6182: PPUSH
6183: CALL_OW 12
6187: PPUSH
6188: LD_INT 1
6190: PPUSH
6191: LD_INT 1
6193: PPUSH
6194: CALL_OW 55
// enable ;
6198: ENABLE
// end ; end_of_file
6199: PPOPN 2
6201: END
// every 20 20$00 trigger apemanNumber do
6202: LD_EXP 34
6206: IFFALSE 6239
6208: GO 6210
6210: DISABLE
// begin enable ;
6211: ENABLE
// if apeLevel >= 8 then
6212: LD_EXP 39
6216: PUSH
6217: LD_INT 8
6219: GREATEREQUAL
6220: IFFALSE 6225
// disable else
6222: DISABLE
6223: GO 6239
// apeLevel := apeLevel + 1 ;
6225: LD_ADDR_EXP 39
6229: PUSH
6230: LD_EXP 39
6234: PUSH
6235: LD_INT 1
6237: PLUS
6238: ST_TO_ADDR
// end ;
6239: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6240: LD_EXP 34
6244: PUSH
6245: LD_EXP 35
6249: LESS
6250: IFFALSE 6390
6252: GO 6254
6254: DISABLE
6255: LD_INT 0
6257: PPUSH
6258: PPUSH
6259: PPUSH
6260: PPUSH
// begin enable ;
6261: ENABLE
// for i := 1 to apemanPos do
6262: LD_ADDR_VAR 0 1
6266: PUSH
6267: DOUBLE
6268: LD_INT 1
6270: DEC
6271: ST_TO_ADDR
6272: LD_EXP 37
6276: PUSH
6277: FOR_TO
6278: IFFALSE 6388
// begin if apemanPlayerCount [ i ] then
6280: LD_EXP 38
6284: PUSH
6285: LD_VAR 0 1
6289: ARRAY
6290: IFFALSE 6386
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6292: LD_EXP 38
6296: PUSH
6297: LD_VAR 0 1
6301: ARRAY
6302: PUSH
6303: LD_EXP 37
6307: PUSH
6308: LD_VAR 0 1
6312: ARRAY
6313: GREATER
6314: IFFALSE 6386
// begin ape := PrepareApeman ;
6316: LD_ADDR_VAR 0 2
6320: PUSH
6321: CALL 6901 0 0
6325: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6326: LD_VAR 0 2
6330: PPUSH
6331: LD_EXP 40
6335: PUSH
6336: LD_VAR 0 1
6340: ARRAY
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6349: LD_ADDR_EXP 37
6353: PUSH
6354: LD_EXP 37
6358: PPUSH
6359: LD_VAR 0 1
6363: PPUSH
6364: LD_EXP 37
6368: PUSH
6369: LD_VAR 0 1
6373: ARRAY
6374: PUSH
6375: LD_VAR 0 2
6379: UNION
6380: PPUSH
6381: CALL_OW 1
6385: ST_TO_ADDR
// end ; end ; end ;
6386: GO 6277
6388: POP
6389: POP
// end ;
6390: PPOPN 4
6392: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6393: LD_INT 0
6395: PPUSH
6396: PPUSH
6397: PPUSH
6398: PPUSH
6399: PPUSH
6400: PPUSH
6401: PPUSH
// playersAmount := 0 ;
6402: LD_ADDR_VAR 0 3
6406: PUSH
6407: LD_INT 0
6409: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6410: LD_ADDR_VAR 0 7
6414: PUSH
6415: LD_INT 2
6417: PUSH
6418: LD_INT 3
6420: PUSH
6421: LD_INT 4
6423: PUSH
6424: LD_INT 5
6426: PUSH
6427: LD_INT 6
6429: PUSH
6430: LD_INT 7
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6441: LD_ADDR_EXP 40
6445: PUSH
6446: LD_INT 0
6448: PUSH
6449: LD_INT 0
6451: PUSH
6452: LD_INT 0
6454: PUSH
6455: LD_INT 0
6457: PUSH
6458: LD_INT 0
6460: PUSH
6461: LD_INT 0
6463: PUSH
6464: LD_INT 0
6466: PUSH
6467: LD_INT 0
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: ST_TO_ADDR
// for j = 1 to Side_Positions do
6480: LD_ADDR_VAR 0 4
6484: PUSH
6485: DOUBLE
6486: LD_INT 1
6488: DEC
6489: ST_TO_ADDR
6490: LD_EXP 19
6494: PUSH
6495: FOR_TO
6496: IFFALSE 6563
// if Side_Positions [ j ] then
6498: LD_EXP 19
6502: PUSH
6503: LD_VAR 0 4
6507: ARRAY
6508: IFFALSE 6561
// begin playersAmount := playersAmount + 1 ;
6510: LD_ADDR_VAR 0 3
6514: PUSH
6515: LD_VAR 0 3
6519: PUSH
6520: LD_INT 1
6522: PLUS
6523: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6524: LD_ADDR_EXP 40
6528: PUSH
6529: LD_EXP 40
6533: PPUSH
6534: LD_VAR 0 4
6538: PPUSH
6539: LD_VAR 0 7
6543: PUSH
6544: LD_EXP 19
6548: PUSH
6549: LD_VAR 0 4
6553: ARRAY
6554: ARRAY
6555: PPUSH
6556: CALL_OW 1
6560: ST_TO_ADDR
// end ;
6561: GO 6495
6563: POP
6564: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6565: LD_ADDR_EXP 36
6569: PUSH
6570: LD_INT 3
6572: PUSH
6573: LD_EXP 15
6577: MUL
6578: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6579: LD_ADDR_EXP 34
6583: PUSH
6584: LD_VAR 0 3
6588: PUSH
6589: LD_EXP 36
6593: MUL
6594: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6595: LD_ADDR_EXP 35
6599: PUSH
6600: LD_EXP 34
6604: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6605: LD_ADDR_EXP 37
6609: PUSH
6610: LD_INT 0
6612: PUSH
6613: LD_INT 0
6615: PUSH
6616: LD_INT 0
6618: PUSH
6619: LD_INT 0
6621: PUSH
6622: LD_INT 0
6624: PUSH
6625: LD_INT 0
6627: PUSH
6628: LD_INT 0
6630: PUSH
6631: LD_INT 0
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6644: LD_ADDR_EXP 38
6648: PUSH
6649: LD_INT 0
6651: PUSH
6652: LD_INT 0
6654: PUSH
6655: LD_INT 0
6657: PUSH
6658: LD_INT 0
6660: PUSH
6661: LD_INT 0
6663: PUSH
6664: LD_INT 0
6666: PUSH
6667: LD_INT 0
6669: PUSH
6670: LD_INT 0
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: ST_TO_ADDR
// apeLevel := 1 ;
6683: LD_ADDR_EXP 39
6687: PUSH
6688: LD_INT 1
6690: ST_TO_ADDR
// if not apemanNumber then
6691: LD_EXP 34
6695: NOT
6696: IFFALSE 6700
// exit ;
6698: GO 6896
// for i := 1 to apemanPerPlayer do
6700: LD_ADDR_VAR 0 2
6704: PUSH
6705: DOUBLE
6706: LD_INT 1
6708: DEC
6709: ST_TO_ADDR
6710: LD_EXP 36
6714: PUSH
6715: FOR_TO
6716: IFFALSE 6894
// begin for j := 1 to Side_Positions do
6718: LD_ADDR_VAR 0 4
6722: PUSH
6723: DOUBLE
6724: LD_INT 1
6726: DEC
6727: ST_TO_ADDR
6728: LD_EXP 19
6732: PUSH
6733: FOR_TO
6734: IFFALSE 6890
// if Side_Positions [ j ] then
6736: LD_EXP 19
6740: PUSH
6741: LD_VAR 0 4
6745: ARRAY
6746: IFFALSE 6888
// begin pos := Side_Positions [ j ] ;
6748: LD_ADDR_VAR 0 6
6752: PUSH
6753: LD_EXP 19
6757: PUSH
6758: LD_VAR 0 4
6762: ARRAY
6763: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6764: LD_ADDR_EXP 38
6768: PUSH
6769: LD_EXP 38
6773: PPUSH
6774: LD_VAR 0 4
6778: PPUSH
6779: LD_EXP 38
6783: PUSH
6784: LD_VAR 0 4
6788: ARRAY
6789: PUSH
6790: LD_INT 1
6792: PLUS
6793: PPUSH
6794: CALL_OW 1
6798: ST_TO_ADDR
// ape := PrepareApeman ;
6799: LD_ADDR_VAR 0 5
6803: PUSH
6804: CALL 6901 0 0
6808: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6809: LD_ADDR_EXP 37
6813: PUSH
6814: LD_EXP 37
6818: PPUSH
6819: LD_VAR 0 4
6823: PPUSH
6824: LD_EXP 37
6828: PUSH
6829: LD_VAR 0 4
6833: ARRAY
6834: PPUSH
6835: LD_EXP 37
6839: PUSH
6840: LD_VAR 0 4
6844: ARRAY
6845: PUSH
6846: LD_INT 1
6848: PLUS
6849: PPUSH
6850: LD_VAR 0 5
6854: PPUSH
6855: CALL_OW 1
6859: PPUSH
6860: CALL_OW 1
6864: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6865: LD_VAR 0 5
6869: PPUSH
6870: LD_EXP 40
6874: PUSH
6875: LD_VAR 0 4
6879: ARRAY
6880: PPUSH
6881: LD_INT 0
6883: PPUSH
6884: CALL_OW 49
// end ;
6888: GO 6733
6890: POP
6891: POP
// end ;
6892: GO 6715
6894: POP
6895: POP
// end ;
6896: LD_VAR 0 1
6900: RET
// export function PrepareApeman ; var bonus ; begin
6901: LD_INT 0
6903: PPUSH
6904: PPUSH
// uc_side := 0 ;
6905: LD_ADDR_OWVAR 20
6909: PUSH
6910: LD_INT 0
6912: ST_TO_ADDR
// uc_nation := 0 ;
6913: LD_ADDR_OWVAR 21
6917: PUSH
6918: LD_INT 0
6920: ST_TO_ADDR
// InitHc ;
6921: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_INT 1
6932: NEG
6933: PUSH
6934: LD_INT 0
6936: PUSH
6937: LD_INT 1
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: PUSH
6945: LD_OWVAR 1
6949: PUSH
6950: LD_INT 3
6952: MOD
6953: PUSH
6954: LD_INT 1
6956: PLUS
6957: ARRAY
6958: ST_TO_ADDR
// hc_class := class_apeman ;
6959: LD_ADDR_OWVAR 28
6963: PUSH
6964: LD_INT 12
6966: ST_TO_ADDR
// hc_gallery :=  ;
6967: LD_ADDR_OWVAR 33
6971: PUSH
6972: LD_STRING 
6974: ST_TO_ADDR
// hc_name :=  ;
6975: LD_ADDR_OWVAR 26
6979: PUSH
6980: LD_STRING 
6982: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6983: LD_ADDR_OWVAR 31
6987: PUSH
6988: LD_EXP 39
6992: PUSH
6993: LD_VAR 0 2
6997: PLUS
6998: PUSH
6999: LD_EXP 39
7003: PUSH
7004: LD_VAR 0 2
7008: PLUS
7009: PUSH
7010: LD_EXP 39
7014: PUSH
7015: LD_VAR 0 2
7019: PLUS
7020: PUSH
7021: LD_EXP 39
7025: PUSH
7026: LD_VAR 0 2
7030: PLUS
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7038: LD_ADDR_OWVAR 35
7042: PUSH
7043: LD_INT 10
7045: PUSH
7046: LD_VAR 0 2
7050: MUL
7051: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7052: LD_ADDR_OWVAR 29
7056: PUSH
7057: LD_INT 12
7059: PUSH
7060: LD_INT 10
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: ST_TO_ADDR
// result := CreateHuman ;
7067: LD_ADDR_VAR 0 1
7071: PUSH
7072: CALL_OW 44
7076: ST_TO_ADDR
// end ;
7077: LD_VAR 0 1
7081: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7082: LD_INT 0
7084: PPUSH
7085: PPUSH
7086: PPUSH
// if not ape then
7087: LD_VAR 0 1
7091: NOT
7092: IFFALSE 7096
// exit ;
7094: GO 7221
// side := GetSide ( ape ) ;
7096: LD_ADDR_VAR 0 3
7100: PUSH
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 255
7110: ST_TO_ADDR
// if not side then
7111: LD_VAR 0 3
7115: NOT
7116: IFFALSE 7170
// begin for i = 1 to apemanPos do
7118: LD_ADDR_VAR 0 4
7122: PUSH
7123: DOUBLE
7124: LD_INT 1
7126: DEC
7127: ST_TO_ADDR
7128: LD_EXP 37
7132: PUSH
7133: FOR_TO
7134: IFFALSE 7168
// if ape in apemanPos [ i ] then
7136: LD_VAR 0 1
7140: PUSH
7141: LD_EXP 37
7145: PUSH
7146: LD_VAR 0 4
7150: ARRAY
7151: IN
7152: IFFALSE 7166
// begin side := i ;
7154: LD_ADDR_VAR 0 3
7158: PUSH
7159: LD_VAR 0 4
7163: ST_TO_ADDR
// break ;
7164: GO 7168
// end ;
7166: GO 7133
7168: POP
7169: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7170: LD_ADDR_EXP 37
7174: PUSH
7175: LD_EXP 37
7179: PPUSH
7180: LD_VAR 0 3
7184: PPUSH
7185: LD_EXP 37
7189: PUSH
7190: LD_VAR 0 3
7194: ARRAY
7195: PUSH
7196: LD_VAR 0 1
7200: DIFF
7201: PPUSH
7202: CALL_OW 1
7206: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7207: LD_ADDR_EXP 34
7211: PUSH
7212: LD_EXP 34
7216: PUSH
7217: LD_INT 1
7219: MINUS
7220: ST_TO_ADDR
// end ; end_of_file
7221: LD_VAR 0 2
7225: RET
// var respawn , inqueue ; export function init_respawning ; begin
7226: LD_INT 0
7228: PPUSH
// respawn := Rand ( 1 , 8 ) ;
7229: LD_ADDR_LOC 9
7233: PUSH
7234: LD_INT 1
7236: PPUSH
7237: LD_INT 8
7239: PPUSH
7240: CALL_OW 12
7244: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7245: LD_ADDR_LOC 10
7249: PUSH
7250: LD_INT 0
7252: PUSH
7253: LD_INT 0
7255: PUSH
7256: LD_INT 0
7258: PUSH
7259: LD_INT 0
7261: PUSH
7262: LD_INT 0
7264: PUSH
7265: LD_INT 0
7267: PUSH
7268: LD_INT 0
7270: PUSH
7271: LD_INT 0
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: ST_TO_ADDR
// end ;
7284: LD_VAR 0 1
7288: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
7289: GO 7291
7291: DISABLE
7292: LD_INT 0
7294: PPUSH
7295: PPUSH
7296: PPUSH
7297: PPUSH
// begin if respawning_time_max = 0 then
7298: LD_EXP 13
7302: PUSH
7303: LD_INT 0
7305: EQUAL
7306: IFFALSE 7310
// exit ;
7308: GO 7817
// if respawn = 8 then
7310: LD_LOC 9
7314: PUSH
7315: LD_INT 8
7317: EQUAL
7318: IFFALSE 7330
// respawn := 1 else
7320: LD_ADDR_LOC 9
7324: PUSH
7325: LD_INT 1
7327: ST_TO_ADDR
7328: GO 7344
// respawn := respawn + 1 ;
7330: LD_ADDR_LOC 9
7334: PUSH
7335: LD_LOC 9
7339: PUSH
7340: LD_INT 1
7342: PLUS
7343: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
7344: LD_EXP 19
7348: PUSH
7349: LD_LOC 9
7353: ARRAY
7354: PUSH
7355: LD_LOC 10
7359: PUSH
7360: LD_LOC 9
7364: ARRAY
7365: NOT
7366: AND
7367: IFFALSE 7816
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
7369: LD_ADDR_VAR 0 1
7373: PUSH
7374: LD_INT 21
7376: PUSH
7377: LD_INT 1
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 22
7386: PUSH
7387: LD_LOC 9
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 23
7401: PUSH
7402: LD_INT 0
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: PPUSH
7415: CALL_OW 69
7419: ST_TO_ADDR
// if n < number_of_people then
7420: LD_VAR 0 1
7424: PUSH
7425: LD_EXP 5
7429: LESS
7430: IFFALSE 7813
// begin aktresp := respawn ;
7432: LD_ADDR_VAR 0 3
7436: PUSH
7437: LD_LOC 9
7441: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7442: LD_ADDR_LOC 10
7446: PUSH
7447: LD_LOC 10
7451: PPUSH
7452: LD_VAR 0 3
7456: PPUSH
7457: LD_INT 1
7459: PPUSH
7460: CALL_OW 1
7464: ST_TO_ADDR
// enable ;
7465: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7466: LD_EXP 12
7470: PPUSH
7471: LD_EXP 13
7475: PPUSH
7476: CALL_OW 12
7480: PPUSH
7481: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7485: LD_ADDR_LOC 10
7489: PUSH
7490: LD_LOC 10
7494: PPUSH
7495: LD_VAR 0 3
7499: PPUSH
7500: LD_INT 0
7502: PPUSH
7503: CALL_OW 1
7507: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7508: LD_ADDR_VAR 0 2
7512: PUSH
7513: LD_INT 21
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 2
7525: PUSH
7526: LD_INT 30
7528: PUSH
7529: LD_INT 0
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PUSH
7536: LD_INT 30
7538: PUSH
7539: LD_INT 1
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: PUSH
7551: LD_INT 50
7553: PUSH
7554: EMPTY
7555: LIST
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_VAR 0 3
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: ST_TO_ADDR
// if building_list = 0 then
7580: LD_VAR 0 2
7584: PUSH
7585: LD_INT 0
7587: EQUAL
7588: IFFALSE 7633
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7590: LD_ADDR_VAR 0 2
7594: PUSH
7595: LD_INT 21
7597: PUSH
7598: LD_INT 3
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 50
7607: PUSH
7608: EMPTY
7609: LIST
7610: PUSH
7611: LD_INT 22
7613: PUSH
7614: LD_VAR 0 3
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 69
7632: ST_TO_ADDR
// if building_list = 0 then
7633: LD_VAR 0 2
7637: PUSH
7638: LD_INT 0
7640: EQUAL
7641: IFFALSE 7645
// exit ;
7643: GO 7817
// hc_name :=  ;
7645: LD_ADDR_OWVAR 26
7649: PUSH
7650: LD_STRING 
7652: ST_TO_ADDR
// hc_importance := 0 ;
7653: LD_ADDR_OWVAR 32
7657: PUSH
7658: LD_INT 0
7660: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7661: LD_INT 0
7663: PPUSH
7664: LD_INT 0
7666: PPUSH
7667: LD_EXP 6
7671: PUSH
7672: LD_INT 2
7674: DIV
7675: PPUSH
7676: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7680: LD_ADDR_OWVAR 21
7684: PUSH
7685: LD_EXP 20
7689: PUSH
7690: LD_VAR 0 3
7694: ARRAY
7695: ST_TO_ADDR
// uc_side := aktresp ;
7696: LD_ADDR_OWVAR 20
7700: PUSH
7701: LD_VAR 0 3
7705: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
7706: LD_ADDR_VAR 0 4
7710: PUSH
7711: LD_VAR 0 2
7715: PUSH
7716: LD_INT 1
7718: PPUSH
7719: LD_VAR 0 2
7723: PUSH
7724: LD_INT 0
7726: PLUS
7727: PPUSH
7728: CALL_OW 12
7732: ARRAY
7733: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
7734: LD_VAR 0 4
7738: PPUSH
7739: CALL_OW 266
7743: PUSH
7744: LD_INT 0
7746: PUSH
7747: LD_INT 1
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: IN
7754: IFFALSE 7766
// n = 25 else
7756: LD_ADDR_VAR 0 1
7760: PUSH
7761: LD_INT 25
7763: ST_TO_ADDR
7764: GO 7774
// n = 10 ;
7766: LD_ADDR_VAR 0 1
7770: PUSH
7771: LD_INT 10
7773: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
7774: CALL_OW 44
7778: PPUSH
7779: LD_VAR 0 4
7783: PPUSH
7784: CALL_OW 250
7788: PPUSH
7789: LD_VAR 0 4
7793: PPUSH
7794: CALL_OW 251
7798: PPUSH
7799: LD_VAR 0 1
7803: PPUSH
7804: LD_INT 1
7806: PPUSH
7807: CALL_OW 50
// end else
7811: GO 7814
// enable ;
7813: ENABLE
// end else
7814: GO 7817
// enable ;
7816: ENABLE
// end ; end_of_file
7817: PPOPN 4
7819: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7820: LD_VAR 0 1
7824: PPUSH
7825: CALL_OW 266
7829: PUSH
7830: LD_INT 0
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: IN
7840: IFFALSE 7865
// SetBName ( b , @ & GetSide ( b ) ) ;
7842: LD_VAR 0 1
7846: PPUSH
7847: LD_STRING @
7849: PUSH
7850: LD_VAR 0 1
7854: PPUSH
7855: CALL_OW 255
7859: STR
7860: PPUSH
7861: CALL_OW 500
// if def_game_rules then
7865: LD_EXP 43
7869: IFFALSE 7906
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7871: LD_VAR 0 1
7875: PPUSH
7876: LD_VAR 0 1
7880: PPUSH
7881: CALL_OW 266
7885: PPUSH
7886: LD_VAR 0 1
7890: PPUSH
7891: CALL_OW 255
7895: PPUSH
7896: LD_INT 0
7898: PPUSH
7899: LD_INT 1
7901: PPUSH
7902: CALL 13312 0 5
// end ;
7906: PPOPN 2
7908: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7909: LD_VAR 0 1
7913: PPUSH
7914: CALL_OW 266
7918: PUSH
7919: LD_INT 0
7921: PUSH
7922: LD_INT 1
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: IN
7929: IFFALSE 7954
// SetBName ( b , @ & GetSide ( b ) ) ;
7931: LD_VAR 0 1
7935: PPUSH
7936: LD_STRING @
7938: PUSH
7939: LD_VAR 0 1
7943: PPUSH
7944: CALL_OW 255
7948: STR
7949: PPUSH
7950: CALL_OW 500
// if def_game_rules then
7954: LD_EXP 43
7958: IFFALSE 7997
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7960: LD_VAR 0 1
7964: PPUSH
7965: LD_VAR 0 1
7969: PPUSH
7970: CALL_OW 266
7974: PPUSH
7975: LD_VAR 0 1
7979: PPUSH
7980: CALL_OW 255
7984: PPUSH
7985: LD_VAR 0 2
7989: PPUSH
7990: LD_INT 1
7992: PPUSH
7993: CALL 13312 0 5
// end ;
7997: PPOPN 3
7999: END
// on VehicleConstructed ( veh , fac ) do var side ;
8000: LD_INT 0
8002: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8003: LD_VAR 0 1
8007: PPUSH
8008: CALL_OW 263
8012: PUSH
8013: LD_INT 5
8015: EQUAL
8016: IFFALSE 8158
// begin side := GetSide ( veh ) ;
8018: LD_ADDR_VAR 0 3
8022: PUSH
8023: LD_VAR 0 1
8027: PPUSH
8028: CALL_OW 255
8032: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8033: LD_ADDR_EXP 37
8037: PUSH
8038: LD_EXP 37
8042: PPUSH
8043: LD_VAR 0 3
8047: PPUSH
8048: LD_EXP 37
8052: PUSH
8053: LD_VAR 0 3
8057: ARRAY
8058: PPUSH
8059: LD_INT 52
8061: PUSH
8062: EMPTY
8063: LIST
8064: PPUSH
8065: CALL_OW 72
8069: PUSH
8070: LD_INT 22
8072: PUSH
8073: LD_VAR 0 3
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 2
8084: PUSH
8085: LD_INT 33
8087: PUSH
8088: LD_INT 5
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: LD_INT 25
8097: PUSH
8098: LD_INT 12
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: PUSH
8105: LD_INT 25
8107: PUSH
8108: LD_INT 15
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: PUSH
8115: LD_INT 25
8117: PUSH
8118: LD_INT 16
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: PUSH
8125: LD_INT 25
8127: PUSH
8128: LD_INT 17
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PPUSH
8147: CALL_OW 69
8151: UNION
8152: PPUSH
8153: CALL_OW 1
8157: ST_TO_ADDR
// end ; end ;
8158: PPOPN 3
8160: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
8161: LD_INT 0
8163: PPUSH
8164: PPUSH
8165: PPUSH
8166: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
8167: LD_VAR 0 1
8171: PPUSH
8172: CALL_OW 257
8176: PUSH
8177: LD_INT 12
8179: PUSH
8180: LD_INT 15
8182: PUSH
8183: LD_INT 17
8185: PUSH
8186: LD_INT 16
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: IN
8195: PUSH
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 263
8205: PUSH
8206: LD_INT 5
8208: EQUAL
8209: OR
8210: IFFALSE 8221
// ApeKilled ( j ) ;
8212: LD_VAR 0 1
8216: PPUSH
8217: CALL 7082 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
8221: LD_VAR 0 1
8225: PPUSH
8226: CALL_OW 266
8230: PUSH
8231: LD_INT 0
8233: PUSH
8234: LD_INT 1
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: IN
8241: IFFALSE 8323
// begin pos := Side_Positions [ GetSide ( j ) ] ;
8243: LD_ADDR_VAR 0 4
8247: PUSH
8248: LD_EXP 19
8252: PUSH
8253: LD_VAR 0 1
8257: PPUSH
8258: CALL_OW 255
8262: ARRAY
8263: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
8264: LD_ADDR_VAR 0 2
8268: PUSH
8269: LD_EXP 26
8273: PUSH
8274: LD_VAR 0 4
8278: ARRAY
8279: PUSH
8280: LD_INT 1
8282: ARRAY
8283: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
8284: LD_ADDR_VAR 0 3
8288: PUSH
8289: LD_EXP 26
8293: PUSH
8294: LD_VAR 0 4
8298: ARRAY
8299: PUSH
8300: LD_INT 2
8302: ARRAY
8303: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
8304: LD_VAR 0 2
8308: PPUSH
8309: LD_VAR 0 3
8313: PPUSH
8314: CALL_OW 420
8318: PPUSH
8319: CALL_OW 419
// end ; if def_game_rules then
8323: LD_EXP 43
8327: IFFALSE 8426
// if ( GetType ( j ) = 3 ) then
8329: LD_VAR 0 1
8333: PPUSH
8334: CALL_OW 247
8338: PUSH
8339: LD_INT 3
8341: EQUAL
8342: IFFALSE 8382
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8344: LD_VAR 0 1
8348: PPUSH
8349: LD_VAR 0 1
8353: PPUSH
8354: CALL_OW 266
8358: PPUSH
8359: LD_VAR 0 1
8363: PPUSH
8364: CALL_OW 255
8368: PPUSH
8369: LD_INT 0
8371: PPUSH
8372: LD_INT 1
8374: NEG
8375: PPUSH
8376: CALL 13312 0 5
8380: GO 8426
// if ( GetChassis ( j ) = 25 ) then
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 265
8391: PUSH
8392: LD_INT 25
8394: EQUAL
8395: IFFALSE 8426
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8397: LD_VAR 0 1
8401: PPUSH
8402: LD_INT 37
8404: PPUSH
8405: LD_VAR 0 1
8409: PPUSH
8410: CALL_OW 255
8414: PPUSH
8415: LD_INT 0
8417: PPUSH
8418: LD_INT 1
8420: NEG
8421: PPUSH
8422: CALL 13312 0 5
// end ;
8426: PPOPN 5
8428: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8429: LD_EXP 43
8433: PUSH
8434: LD_VAR 0 1
8438: PPUSH
8439: CALL_OW 265
8443: PUSH
8444: LD_INT 25
8446: EQUAL
8447: AND
8448: IFFALSE 8480
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8450: LD_VAR 0 1
8454: PPUSH
8455: LD_INT 37
8457: PPUSH
8458: LD_VAR 0 1
8462: PPUSH
8463: CALL_OW 255
8467: PPUSH
8468: LD_VAR 0 3
8472: PPUSH
8473: LD_INT 1
8475: PPUSH
8476: CALL 13312 0 5
// end ;
8480: PPOPN 4
8482: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8483: LD_VAR 0 1
8487: PPUSH
8488: LD_VAR 0 2
8492: PPUSH
8493: LD_VAR 0 3
8497: PPUSH
8498: LD_OWVAR 2
8502: PPUSH
8503: CALL 14083 0 4
8507: PPOPN 3
8509: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8510: GO 8512
8512: DISABLE
8513: LD_INT 0
8515: PPUSH
8516: PPUSH
8517: PPUSH
8518: PPUSH
8519: PPUSH
// begin sib_mined := [ ] ;
8520: LD_ADDR_VAR 0 5
8524: PUSH
8525: EMPTY
8526: ST_TO_ADDR
// for i := 1 to 8 do
8527: LD_ADDR_VAR 0 1
8531: PUSH
8532: DOUBLE
8533: LD_INT 1
8535: DEC
8536: ST_TO_ADDR
8537: LD_INT 8
8539: PUSH
8540: FOR_TO
8541: IFFALSE 8697
// if Side_Positions [ i ] then
8543: LD_EXP 19
8547: PUSH
8548: LD_VAR 0 1
8552: ARRAY
8553: IFFALSE 8681
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8555: LD_ADDR_VAR 0 4
8559: PUSH
8560: LD_INT 22
8562: PUSH
8563: LD_VAR 0 1
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: LD_INT 30
8577: PUSH
8578: LD_INT 0
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 30
8587: PUSH
8588: LD_INT 1
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PPUSH
8604: CALL_OW 69
8608: ST_TO_ADDR
// pom := 0 ;
8609: LD_ADDR_VAR 0 3
8613: PUSH
8614: LD_INT 0
8616: ST_TO_ADDR
// for base in filter do
8617: LD_ADDR_VAR 0 2
8621: PUSH
8622: LD_VAR 0 4
8626: PUSH
8627: FOR_IN
8628: IFFALSE 8661
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8630: LD_ADDR_VAR 0 3
8634: PUSH
8635: LD_VAR 0 3
8639: PUSH
8640: LD_VAR 0 2
8644: PPUSH
8645: CALL_OW 274
8649: PPUSH
8650: LD_INT 3
8652: PPUSH
8653: CALL_OW 275
8657: PLUS
8658: ST_TO_ADDR
8659: GO 8627
8661: POP
8662: POP
// sib_mined := sib_mined ^ pom ;
8663: LD_ADDR_VAR 0 5
8667: PUSH
8668: LD_VAR 0 5
8672: PUSH
8673: LD_VAR 0 3
8677: ADD
8678: ST_TO_ADDR
// end else
8679: GO 8695
// sib_mined := sib_mined ^ 0 ;
8681: LD_ADDR_VAR 0 5
8685: PUSH
8686: LD_VAR 0 5
8690: PUSH
8691: LD_INT 0
8693: ADD
8694: ST_TO_ADDR
8695: GO 8540
8697: POP
8698: POP
// if not def_public_score then
8699: LD_EXP 2
8703: NOT
8704: IFFALSE 8794
// begin ExtraStrings := [ ] ;
8706: LD_ADDR_EXP 59
8710: PUSH
8711: EMPTY
8712: ST_TO_ADDR
// for i := 1 to 8 do
8713: LD_ADDR_VAR 0 1
8717: PUSH
8718: DOUBLE
8719: LD_INT 1
8721: DEC
8722: ST_TO_ADDR
8723: LD_INT 8
8725: PUSH
8726: FOR_TO
8727: IFFALSE 8790
// if Side_Positions [ i ] then
8729: LD_EXP 19
8733: PUSH
8734: LD_VAR 0 1
8738: ARRAY
8739: IFFALSE 8788
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8741: LD_ADDR_EXP 59
8745: PUSH
8746: LD_EXP 59
8750: PUSH
8751: LD_STRING #AlienBase-MinedPublic
8753: PUSH
8754: LD_VAR 0 1
8758: PUSH
8759: LD_VAR 0 1
8763: PUSH
8764: LD_VAR 0 5
8768: PUSH
8769: LD_VAR 0 1
8773: ARRAY
8774: PUSH
8775: LD_EXP 11
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: ADD
8787: ST_TO_ADDR
8788: GO 8726
8790: POP
8791: POP
// end else
8792: GO 8823
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8794: LD_ADDR_EXP 59
8798: PUSH
8799: LD_STRING #AlienBase-Mined
8801: PUSH
8802: LD_VAR 0 5
8806: PUSH
8807: LD_OWVAR 2
8811: ARRAY
8812: PUSH
8813: LD_EXP 11
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: LIST
8822: ST_TO_ADDR
// for i := 1 to 8 do
8823: LD_ADDR_VAR 0 1
8827: PUSH
8828: DOUBLE
8829: LD_INT 1
8831: DEC
8832: ST_TO_ADDR
8833: LD_INT 8
8835: PUSH
8836: FOR_TO
8837: IFFALSE 8907
// if sib_mined [ i ] >= amount_of_siberit then
8839: LD_VAR 0 5
8843: PUSH
8844: LD_VAR 0 1
8848: ARRAY
8849: PUSH
8850: LD_EXP 11
8854: GREATEREQUAL
8855: IFFALSE 8905
// begin wait ( 0 0$1 ) ;
8857: LD_INT 35
8859: PPUSH
8860: CALL_OW 67
// if IAmServer then
8864: CALL_OW 518
8868: IFFALSE 8877
// wait ( 0 0$1 ) ;
8870: LD_INT 35
8872: PPUSH
8873: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8877: LD_VAR 0 5
8881: PUSH
8882: LD_OWVAR 2
8886: ARRAY
8887: PUSH
8888: LD_EXP 11
8892: GREATEREQUAL
8893: IFFALSE 8901
// YouWinInMultiplayer else
8895: CALL_OW 106
8899: GO 8905
// YouLostInMultiplayer ;
8901: CALL_OW 107
// end ;
8905: GO 8836
8907: POP
8908: POP
// enable ;
8909: ENABLE
// end ; end_of_file
8910: PPOPN 5
8912: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8913: LD_INT 0
8915: PPUSH
8916: PPUSH
// for un in battle_flags_id do
8917: LD_ADDR_VAR 0 2
8921: PUSH
8922: LD_EXP 31
8926: PUSH
8927: FOR_IN
8928: IFFALSE 9003
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8930: LD_VAR 0 2
8934: PPUSH
8935: LD_INT 1
8937: PUSH
8938: LD_LOC 11
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: LD_INT 2
8949: PUSH
8950: LD_LOC 11
8954: PUSH
8955: LD_INT 2
8957: DIV
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 3
8965: PUSH
8966: LD_LOC 11
8970: PUSH
8971: LD_INT 5
8973: DIV
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: LD_INT 20
8981: PUSH
8982: LD_LOC 11
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: PPUSH
8997: CALL_OW 423
9001: GO 8927
9003: POP
9004: POP
// end ;
9005: LD_VAR 0 1
9009: RET
// every 1 do var un ;
9010: GO 9012
9012: DISABLE
9013: LD_INT 0
9015: PPUSH
// begin if not def_morale_flags then
9016: LD_EXP 52
9020: NOT
9021: IFFALSE 9025
// exit ;
9023: GO 9102
// if not morale_decreasing_time then
9025: LD_EXP 10
9029: NOT
9030: IFFALSE 9034
// exit ;
9032: GO 9102
// strength = 100 ;
9034: LD_ADDR_LOC 11
9038: PUSH
9039: LD_INT 100
9041: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
9042: LD_EXP 10
9046: PPUSH
9047: CALL_OW 67
// strength := strength - 1 ;
9051: LD_ADDR_LOC 11
9055: PUSH
9056: LD_LOC 11
9060: PUSH
9061: LD_INT 1
9063: MINUS
9064: ST_TO_ADDR
// Update_Flags ;
9065: CALL 8913 0 0
// until not strength ;
9069: LD_LOC 11
9073: NOT
9074: IFFALSE 9042
// for un in battle_flags_id do
9076: LD_ADDR_VAR 0 1
9080: PUSH
9081: LD_EXP 31
9085: PUSH
9086: FOR_IN
9087: IFFALSE 9100
// KillBattleFlag ( un ) ;
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 419
9098: GO 9086
9100: POP
9101: POP
// end ; end_of_file
9102: PPOPN 1
9104: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
9105: LD_INT 0
9107: PPUSH
9108: PPUSH
9109: PPUSH
// enable ( 600 ) ;
9110: LD_INT 600
9112: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
9113: LD_ADDR_VAR 0 2
9117: PUSH
9118: DOUBLE
9119: LD_INT 1
9121: DEC
9122: ST_TO_ADDR
9123: LD_EXP 41
9127: PUSH
9128: FOR_TO
9129: IFFALSE 9284
// if Position_Sides [ i ] then
9131: LD_EXP 23
9135: PUSH
9136: LD_VAR 0 2
9140: ARRAY
9141: IFFALSE 9282
// for j := 1 to 8 do
9143: LD_ADDR_VAR 0 3
9147: PUSH
9148: DOUBLE
9149: LD_INT 1
9151: DEC
9152: ST_TO_ADDR
9153: LD_INT 8
9155: PUSH
9156: FOR_TO
9157: IFFALSE 9280
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9159: LD_EXP 19
9163: PUSH
9164: LD_VAR 0 3
9168: ARRAY
9169: PUSH
9170: LD_EXP 17
9174: PUSH
9175: LD_EXP 23
9179: PUSH
9180: LD_VAR 0 2
9184: ARRAY
9185: ARRAY
9186: PUSH
9187: LD_EXP 17
9191: PUSH
9192: LD_VAR 0 3
9196: ARRAY
9197: NONEQUAL
9198: PUSH
9199: LD_EXP 21
9203: NOT
9204: PUSH
9205: LD_EXP 23
9209: PUSH
9210: LD_VAR 0 2
9214: ARRAY
9215: PUSH
9216: LD_VAR 0 3
9220: NONEQUAL
9221: AND
9222: OR
9223: AND
9224: IFFALSE 9248
// HideArea ( j , BuildUpAreas [ i ] ) else
9226: LD_VAR 0 3
9230: PPUSH
9231: LD_EXP 41
9235: PUSH
9236: LD_VAR 0 2
9240: ARRAY
9241: PPUSH
9242: CALL_OW 333
9246: GO 9278
// if ( j = your_side ) then
9248: LD_VAR 0 3
9252: PUSH
9253: LD_OWVAR 2
9257: EQUAL
9258: IFFALSE 9278
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
9260: LD_EXP 41
9264: PUSH
9265: LD_VAR 0 2
9269: ARRAY
9270: PPUSH
9271: LD_INT 5
9273: PPUSH
9274: CALL_OW 424
9278: GO 9156
9280: POP
9281: POP
9282: GO 9128
9284: POP
9285: POP
// end ;
9286: LD_VAR 0 1
9290: RET
// export function EndBuildUp ; var i , j ; begin
9291: LD_INT 0
9293: PPUSH
9294: PPUSH
9295: PPUSH
// disable ( 600 ) ;
9296: LD_INT 600
9298: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
9299: LD_ADDR_VAR 0 2
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_EXP 41
9313: PUSH
9314: FOR_TO
9315: IFFALSE 9470
// if Position_Sides [ i ] then
9317: LD_EXP 23
9321: PUSH
9322: LD_VAR 0 2
9326: ARRAY
9327: IFFALSE 9468
// for j := 1 to 8 do
9329: LD_ADDR_VAR 0 3
9333: PUSH
9334: DOUBLE
9335: LD_INT 1
9337: DEC
9338: ST_TO_ADDR
9339: LD_INT 8
9341: PUSH
9342: FOR_TO
9343: IFFALSE 9466
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9345: LD_EXP 19
9349: PUSH
9350: LD_VAR 0 3
9354: ARRAY
9355: PUSH
9356: LD_EXP 17
9360: PUSH
9361: LD_EXP 23
9365: PUSH
9366: LD_VAR 0 2
9370: ARRAY
9371: ARRAY
9372: PUSH
9373: LD_EXP 17
9377: PUSH
9378: LD_VAR 0 3
9382: ARRAY
9383: NONEQUAL
9384: PUSH
9385: LD_EXP 21
9389: NOT
9390: PUSH
9391: LD_EXP 23
9395: PUSH
9396: LD_VAR 0 2
9400: ARRAY
9401: PUSH
9402: LD_VAR 0 3
9406: NONEQUAL
9407: AND
9408: OR
9409: AND
9410: IFFALSE 9434
// ShowArea ( j , BuildUpAreas [ i ] ) else
9412: LD_VAR 0 3
9416: PPUSH
9417: LD_EXP 41
9421: PUSH
9422: LD_VAR 0 2
9426: ARRAY
9427: PPUSH
9428: CALL_OW 334
9432: GO 9464
// if ( j = your_side ) then
9434: LD_VAR 0 3
9438: PUSH
9439: LD_OWVAR 2
9443: EQUAL
9444: IFFALSE 9464
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9446: LD_EXP 41
9450: PUSH
9451: LD_VAR 0 2
9455: ARRAY
9456: PPUSH
9457: LD_INT 0
9459: PPUSH
9460: CALL_OW 424
9464: GO 9342
9466: POP
9467: POP
9468: GO 9314
9470: POP
9471: POP
// end ;
9472: LD_VAR 0 1
9476: RET
// every 5 marked 600 do var i , un ;
9477: GO 9479
9479: DISABLE
9480: LD_INT 0
9482: PPUSH
9483: PPUSH
// begin for i := 1 to BuildUpAreas do
9484: LD_ADDR_VAR 0 1
9488: PUSH
9489: DOUBLE
9490: LD_INT 1
9492: DEC
9493: ST_TO_ADDR
9494: LD_EXP 41
9498: PUSH
9499: FOR_TO
9500: IFFALSE 9655
// if Position_Sides [ i ] then
9502: LD_EXP 23
9506: PUSH
9507: LD_VAR 0 1
9511: ARRAY
9512: IFFALSE 9653
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9514: LD_ADDR_VAR 0 2
9518: PUSH
9519: LD_EXP 41
9523: PUSH
9524: LD_VAR 0 1
9528: ARRAY
9529: PPUSH
9530: LD_INT 2
9532: PUSH
9533: LD_INT 21
9535: PUSH
9536: LD_INT 1
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: LD_INT 21
9545: PUSH
9546: LD_INT 2
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 22
9560: PUSH
9561: LD_OWVAR 2
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PPUSH
9574: CALL_OW 70
9578: PUSH
9579: FOR_IN
9580: IFFALSE 9651
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9582: LD_EXP 17
9586: PUSH
9587: LD_EXP 23
9591: PUSH
9592: LD_VAR 0 1
9596: ARRAY
9597: ARRAY
9598: PUSH
9599: LD_EXP 17
9603: PUSH
9604: LD_OWVAR 2
9608: ARRAY
9609: NONEQUAL
9610: PUSH
9611: LD_EXP 21
9615: NOT
9616: PUSH
9617: LD_EXP 23
9621: PUSH
9622: LD_VAR 0 1
9626: ARRAY
9627: PUSH
9628: LD_OWVAR 2
9632: NONEQUAL
9633: AND
9634: OR
9635: IFFALSE 9649
// ComMoveToArea ( un , BuildUpEscape ) ;
9637: LD_VAR 0 2
9641: PPUSH
9642: LD_INT 14
9644: PPUSH
9645: CALL_OW 113
9649: GO 9579
9651: POP
9652: POP
9653: GO 9499
9655: POP
9656: POP
// enable ;
9657: ENABLE
// end ;
9658: PPOPN 2
9660: END
// every 1 do
9661: GO 9663
9663: DISABLE
// if ( def_builduptime > 0 ) then
9664: LD_EXP 57
9668: PUSH
9669: LD_INT 0
9671: GREATER
9672: IFFALSE 9687
// begin wait ( buildUpTime_Delay ) ;
9674: LD_EXP 14
9678: PPUSH
9679: CALL_OW 67
// EndBuildUp ;
9683: CALL 9291 0 0
// end ; end_of_file
9687: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
9688: GO 9690
9690: DISABLE
9691: LD_INT 0
9693: PPUSH
// begin enable ;
9694: ENABLE
// for x := 1 to 8 do
9695: LD_ADDR_VAR 0 1
9699: PUSH
9700: DOUBLE
9701: LD_INT 1
9703: DEC
9704: ST_TO_ADDR
9705: LD_INT 8
9707: PUSH
9708: FOR_TO
9709: IFFALSE 9793
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
9711: LD_LOC 18
9715: PUSH
9716: LD_VAR 0 1
9720: ARRAY
9721: PUSH
9722: LD_INT 5
9724: GREATER
9725: PUSH
9726: LD_LOC 16
9730: PUSH
9731: LD_VAR 0 1
9735: ARRAY
9736: PUSH
9737: LD_INT 1
9739: NEG
9740: EQUAL
9741: AND
9742: IFFALSE 9791
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
9744: LD_ADDR_LOC 17
9748: PUSH
9749: LD_LOC 17
9753: PPUSH
9754: LD_VAR 0 1
9758: PPUSH
9759: LD_LOC 17
9763: PUSH
9764: LD_VAR 0 1
9768: ARRAY
9769: PUSH
9770: LD_INT 6
9772: PLUS
9773: PPUSH
9774: CALL_OW 1
9778: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
9779: LD_VAR 0 1
9783: PPUSH
9784: LD_INT 0
9786: PPUSH
9787: CALL 9965 0 2
// end ;
9791: GO 9708
9793: POP
9794: POP
// end ;
9795: PPOPN 1
9797: END
// every 0 0$1 marked 200 do var BGL , x ;
9798: GO 9800
9800: DISABLE
9801: LD_INT 0
9803: PPUSH
9804: PPUSH
// begin enable ;
9805: ENABLE
// for x := 1 to 8 do
9806: LD_ADDR_VAR 0 2
9810: PUSH
9811: DOUBLE
9812: LD_INT 1
9814: DEC
9815: ST_TO_ADDR
9816: LD_INT 8
9818: PUSH
9819: FOR_TO
9820: IFFALSE 9951
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
9822: LD_LOC 16
9826: PUSH
9827: LD_VAR 0 2
9831: ARRAY
9832: PUSH
9833: LD_INT 1
9835: NEG
9836: GREATER
9837: PUSH
9838: LD_LOC 16
9842: PUSH
9843: LD_VAR 0 2
9847: ARRAY
9848: PPUSH
9849: CALL_OW 300
9853: AND
9854: IFFALSE 9949
// begin BGL := GetLives ( BloodGods [ x ] ) ;
9856: LD_ADDR_VAR 0 1
9860: PUSH
9861: LD_LOC 16
9865: PUSH
9866: LD_VAR 0 2
9870: ARRAY
9871: PPUSH
9872: CALL_OW 256
9876: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
9877: LD_VAR 0 1
9881: PUSH
9882: LD_INT 1000
9884: LESS
9885: PUSH
9886: LD_VAR 0 1
9890: PUSH
9891: LD_INT 100
9893: GREATER
9894: AND
9895: IFFALSE 9949
// begin BGL := BGL + 10 ;
9897: LD_ADDR_VAR 0 1
9901: PUSH
9902: LD_VAR 0 1
9906: PUSH
9907: LD_INT 10
9909: PLUS
9910: ST_TO_ADDR
// if BGL > 1000 then
9911: LD_VAR 0 1
9915: PUSH
9916: LD_INT 1000
9918: GREATER
9919: IFFALSE 9929
// BGL := 1000 ;
9921: LD_ADDR_VAR 0 1
9925: PUSH
9926: LD_INT 1000
9928: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
9929: LD_LOC 16
9933: PUSH
9934: LD_VAR 0 2
9938: ARRAY
9939: PPUSH
9940: LD_VAR 0 1
9944: PPUSH
9945: CALL_OW 234
// end ; end ;
9949: GO 9819
9951: POP
9952: POP
// end ;
9953: PPOPN 2
9955: END
// every 0 0$1 marked 200 do
9956: GO 9958
9958: DISABLE
// begin DisplayTimeWithKills ;
9959: CALL 10206 0 0
// enable ;
9963: ENABLE
// end ;
9964: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
9965: LD_INT 0
9967: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
9968: LD_ADDR_OWVAR 24
9972: PUSH
9973: LD_INT 0
9975: PPUSH
9976: LD_INT 5
9978: PPUSH
9979: CALL_OW 12
9983: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
9984: LD_INT 1
9986: PPUSH
9987: LD_INT 1
9989: PPUSH
9990: LD_INT 15
9992: PPUSH
9993: CALL_OW 380
// hc_importance := 106 ;
9997: LD_ADDR_OWVAR 32
10001: PUSH
10002: LD_INT 106
10004: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
10005: LD_ADDR_OWVAR 26
10009: PUSH
10010: LD_STRING Blood God of 
10012: PUSH
10013: LD_OWVAR 19
10017: PUSH
10018: LD_VAR 0 1
10022: ARRAY
10023: STR
10024: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
10025: LD_ADDR_OWVAR 21
10029: PUSH
10030: LD_EXP 20
10034: PUSH
10035: LD_VAR 0 1
10039: ARRAY
10040: ST_TO_ADDR
// uc_side := side ;
10041: LD_ADDR_OWVAR 20
10045: PUSH
10046: LD_VAR 0 1
10050: ST_TO_ADDR
// hc_noskilllimit := true ;
10051: LD_ADDR_OWVAR 76
10055: PUSH
10056: LD_INT 1
10058: ST_TO_ADDR
// hc_agressivity := 50 ;
10059: LD_ADDR_OWVAR 35
10063: PUSH
10064: LD_INT 50
10066: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
10067: LD_ADDR_LOC 16
10071: PUSH
10072: LD_LOC 16
10076: PPUSH
10077: LD_VAR 0 1
10081: PPUSH
10082: CALL_OW 44
10086: PPUSH
10087: CALL_OW 1
10091: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
10092: LD_LOC 16
10096: PUSH
10097: LD_VAR 0 1
10101: ARRAY
10102: PPUSH
10103: LD_LOC 19
10107: PUSH
10108: LD_EXP 19
10112: PUSH
10113: LD_VAR 0 1
10117: ARRAY
10118: ARRAY
10119: PUSH
10120: LD_INT 1
10122: ARRAY
10123: PPUSH
10124: LD_LOC 19
10128: PUSH
10129: LD_EXP 19
10133: PUSH
10134: LD_VAR 0 1
10138: ARRAY
10139: ARRAY
10140: PUSH
10141: LD_INT 2
10143: ARRAY
10144: PPUSH
10145: LD_INT 10
10147: PPUSH
10148: LD_INT 0
10150: PPUSH
10151: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
10155: LD_LOC 16
10159: PUSH
10160: LD_VAR 0 1
10164: ARRAY
10165: PPUSH
10166: LD_INT 1
10168: PPUSH
10169: LD_INT 300
10171: PPUSH
10172: CALL_OW 239
// if not NoDialog then
10176: LD_VAR 0 2
10180: NOT
10181: IFFALSE 10201
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
10183: LD_LOC 16
10187: PUSH
10188: LD_VAR 0 1
10192: ARRAY
10193: PPUSH
10194: LD_STRING DLAwaken
10196: PPUSH
10197: CALL_OW 94
// end ;
10201: LD_VAR 0 3
10205: RET
// function DisplayTimeWithKills ; var x ; begin
10206: LD_INT 0
10208: PPUSH
10209: PPUSH
// ExtraStrings :=  ;
10210: LD_ADDR_EXP 59
10214: PUSH
10215: LD_STRING 
10217: ST_TO_ADDR
// for x = 1 to Side_Positions do
10218: LD_ADDR_VAR 0 2
10222: PUSH
10223: DOUBLE
10224: LD_INT 1
10226: DEC
10227: ST_TO_ADDR
10228: LD_EXP 19
10232: PUSH
10233: FOR_TO
10234: IFFALSE 10467
// if Side_Positions [ x ] then
10236: LD_EXP 19
10240: PUSH
10241: LD_VAR 0 2
10245: ARRAY
10246: IFFALSE 10465
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
10248: LD_ADDR_LOC 18
10252: PUSH
10253: LD_LOC 18
10257: PPUSH
10258: LD_VAR 0 2
10262: PPUSH
10263: LD_VAR 0 2
10267: PPUSH
10268: CALL_OW 515
10272: PUSH
10273: LD_LOC 17
10277: PUSH
10278: LD_VAR 0 2
10282: ARRAY
10283: MINUS
10284: PPUSH
10285: CALL_OW 1
10289: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
10290: LD_LOC 16
10294: PUSH
10295: LD_VAR 0 2
10299: ARRAY
10300: PUSH
10301: LD_INT 1
10303: NEG
10304: GREATER
10305: PUSH
10306: LD_LOC 16
10310: PUSH
10311: LD_VAR 0 2
10315: ARRAY
10316: PPUSH
10317: CALL_OW 300
10321: AND
10322: IFFALSE 10355
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
10324: LD_ADDR_EXP 59
10328: PUSH
10329: LD_EXP 59
10333: PUSH
10334: LD_STRING #godawoken
10336: PUSH
10337: LD_VAR 0 2
10341: PUSH
10342: LD_VAR 0 2
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: ADD
10352: ST_TO_ADDR
10353: GO 10465
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
10355: LD_LOC 16
10359: PUSH
10360: LD_VAR 0 2
10364: ARRAY
10365: PUSH
10366: LD_INT 1
10368: NEG
10369: GREATER
10370: PUSH
10371: LD_LOC 16
10375: PUSH
10376: LD_VAR 0 2
10380: ARRAY
10381: PPUSH
10382: CALL_OW 301
10386: AND
10387: IFFALSE 10420
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
10389: LD_ADDR_EXP 59
10393: PUSH
10394: LD_EXP 59
10398: PUSH
10399: LD_STRING #goddied
10401: PUSH
10402: LD_VAR 0 2
10406: PUSH
10407: LD_VAR 0 2
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: LIST
10416: ADD
10417: ST_TO_ADDR
10418: GO 10465
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
10420: LD_ADDR_EXP 59
10424: PUSH
10425: LD_EXP 59
10429: PUSH
10430: LD_STRING #godssacrifise
10432: PUSH
10433: LD_VAR 0 2
10437: PUSH
10438: LD_VAR 0 2
10442: PUSH
10443: LD_LOC 18
10447: PUSH
10448: LD_VAR 0 2
10452: ARRAY
10453: PUSH
10454: LD_INT 6
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: ADD
10464: ST_TO_ADDR
10465: GO 10233
10467: POP
10468: POP
// end ;
10469: LD_VAR 0 1
10473: RET
// export function InitBloodGods ; begin
10474: LD_INT 0
10476: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
10477: LD_ADDR_LOC 16
10481: PUSH
10482: LD_INT 1
10484: NEG
10485: PUSH
10486: LD_INT 1
10488: NEG
10489: PUSH
10490: LD_INT 1
10492: NEG
10493: PUSH
10494: LD_INT 1
10496: NEG
10497: PUSH
10498: LD_INT 1
10500: NEG
10501: PUSH
10502: LD_INT 1
10504: NEG
10505: PUSH
10506: LD_INT 1
10508: NEG
10509: PUSH
10510: LD_INT 1
10512: NEG
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10524: LD_ADDR_LOC 17
10528: PUSH
10529: LD_INT 0
10531: PUSH
10532: LD_INT 0
10534: PUSH
10535: LD_INT 0
10537: PUSH
10538: LD_INT 0
10540: PUSH
10541: LD_INT 0
10543: PUSH
10544: LD_INT 0
10546: PUSH
10547: LD_INT 0
10549: PUSH
10550: LD_INT 0
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10563: LD_ADDR_LOC 18
10567: PUSH
10568: LD_INT 0
10570: PUSH
10571: LD_INT 0
10573: PUSH
10574: LD_INT 0
10576: PUSH
10577: LD_INT 0
10579: PUSH
10580: LD_INT 0
10582: PUSH
10583: LD_INT 0
10585: PUSH
10586: LD_INT 0
10588: PUSH
10589: LD_INT 0
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
10602: LD_ADDR_LOC 19
10606: PUSH
10607: LD_INT 60
10609: PUSH
10610: LD_INT 47
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 82
10619: PUSH
10620: LD_INT 26
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 124
10629: PUSH
10630: LD_INT 45
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 147
10639: PUSH
10640: LD_INT 90
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: PUSH
10647: LD_INT 126
10649: PUSH
10650: LD_INT 112
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: PUSH
10657: LD_INT 84
10659: PUSH
10660: LD_INT 92
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 106
10669: PUSH
10670: LD_INT 73
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: LD_INT 106
10679: PUSH
10680: LD_INT 73
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: ST_TO_ADDR
// ClearHumansKilled ;
10697: CALL_OW 516
// enable ( 200 ) ;
10701: LD_INT 200
10703: ENABLE_MARKED
// end ; end_of_file
10704: LD_VAR 0 1
10708: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
10709: LD_INT 0
10711: PPUSH
10712: PPUSH
// if ( not IAmSpec ) then
10713: CALL_OW 531
10717: NOT
10718: IFFALSE 10734
// Result := Limits_Info ^  ;
10720: LD_ADDR_VAR 0 1
10724: PUSH
10725: LD_LOC 27
10729: PUSH
10730: LD_STRING 
10732: ADD
10733: ST_TO_ADDR
// for i := 1 to 8 do
10734: LD_ADDR_VAR 0 2
10738: PUSH
10739: DOUBLE
10740: LD_INT 1
10742: DEC
10743: ST_TO_ADDR
10744: LD_INT 8
10746: PUSH
10747: FOR_TO
10748: IFFALSE 10793
// if Cheaters [ i ] then
10750: LD_LOC 28
10754: PUSH
10755: LD_VAR 0 2
10759: ARRAY
10760: IFFALSE 10791
// Result := Result ^ [ #Cheater , i , i ] ;
10762: LD_ADDR_VAR 0 1
10766: PUSH
10767: LD_VAR 0 1
10771: PUSH
10772: LD_STRING #Cheater
10774: PUSH
10775: LD_VAR 0 2
10779: PUSH
10780: LD_VAR 0 2
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: ADD
10790: ST_TO_ADDR
10791: GO 10747
10793: POP
10794: POP
// end ;
10795: LD_VAR 0 1
10799: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
10800: LD_INT 0
10802: PPUSH
10803: PPUSH
10804: PPUSH
10805: PPUSH
10806: PPUSH
// if game_type in [ 10 , 11 ] then
10807: LD_EXP 42
10811: PUSH
10812: LD_INT 10
10814: PUSH
10815: LD_INT 11
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: IN
10822: IFFALSE 10838
// def_game_rules = def_game_rules + 1 ;
10824: LD_ADDR_EXP 43
10828: PUSH
10829: LD_EXP 43
10833: PUSH
10834: LD_INT 1
10836: PLUS
10837: ST_TO_ADDR
// case def_game_rules of 0 :
10838: LD_EXP 43
10842: PUSH
10843: LD_INT 0
10845: DOUBLE
10846: EQUAL
10847: IFTRUE 10851
10849: GO 10856
10851: POP
// exit ; 1 :
10852: GO 12906
10854: GO 12806
10856: LD_INT 1
10858: DOUBLE
10859: EQUAL
10860: IFTRUE 10864
10862: GO 11080
10864: POP
// begin def_base_level := 2 ;
10865: LD_ADDR_EXP 44
10869: PUSH
10870: LD_INT 2
10872: ST_TO_ADDR
// def_amount_of_people := 11 ;
10873: LD_ADDR_EXP 45
10877: PUSH
10878: LD_INT 11
10880: ST_TO_ADDR
// def_skill_level := 1 ;
10881: LD_ADDR_EXP 46
10885: PUSH
10886: LD_INT 1
10888: ST_TO_ADDR
// def_starting_resources := 2 ;
10889: LD_ADDR_EXP 47
10893: PUSH
10894: LD_INT 2
10896: ST_TO_ADDR
// def_shipments_density := 26 ;
10897: LD_ADDR_EXP 48
10901: PUSH
10902: LD_INT 26
10904: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10905: LD_ADDR_EXP 49
10909: PUSH
10910: LD_INT 0
10912: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10913: LD_ADDR_EXP 50
10917: PUSH
10918: LD_INT 1
10920: ST_TO_ADDR
// def_shared_vision := 1 ;
10921: LD_ADDR_EXP 51
10925: PUSH
10926: LD_INT 1
10928: ST_TO_ADDR
// def_morale_flags := 3 ;
10929: LD_ADDR_EXP 52
10933: PUSH
10934: LD_INT 3
10936: ST_TO_ADDR
// def_siberite_detection := 1 ;
10937: LD_ADDR_EXP 53
10941: PUSH
10942: LD_INT 1
10944: ST_TO_ADDR
// def_people_respawning := 1 ;
10945: LD_ADDR_EXP 54
10949: PUSH
10950: LD_INT 1
10952: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10953: LD_ADDR_EXP 55
10957: PUSH
10958: LD_INT 1
10960: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10961: LD_ADDR_EXP 56
10965: PUSH
10966: LD_INT 0
10968: ST_TO_ADDR
// def_builduptime := 6 ;
10969: LD_ADDR_EXP 57
10973: PUSH
10974: LD_INT 6
10976: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
10977: LD_ADDR_VAR 0 2
10981: PUSH
10982: EMPTY
10983: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10984: LD_ADDR_VAR 0 3
10988: PUSH
10989: EMPTY
10990: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10991: LD_ADDR_LOC 22
10995: PUSH
10996: EMPTY
10997: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10998: LD_ADDR_LOC 23
11002: PUSH
11003: EMPTY
11004: ST_TO_ADDR
// Banned_Controls := [ ] ;
11005: LD_ADDR_LOC 24
11009: PUSH
11010: EMPTY
11011: ST_TO_ADDR
// Banned_Engines := [ ] ;
11012: LD_ADDR_LOC 25
11016: PUSH
11017: EMPTY
11018: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11019: LD_ADDR_LOC 20
11023: PUSH
11024: LD_INT 37
11026: PUSH
11027: EMPTY
11028: LIST
11029: PUSH
11030: LD_INT 4
11032: PUSH
11033: LD_INT 5
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 31
11042: PUSH
11043: LD_INT 32
11045: PUSH
11046: LD_INT 33
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: LIST
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
11059: LD_ADDR_LOC 21
11063: PUSH
11064: LD_INT 2
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: LD_INT 4
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: ST_TO_ADDR
// end ; 2 :
11078: GO 12806
11080: LD_INT 2
11082: DOUBLE
11083: EQUAL
11084: IFTRUE 11088
11086: GO 11297
11088: POP
// begin def_base_level := 1 ;
11089: LD_ADDR_EXP 44
11093: PUSH
11094: LD_INT 1
11096: ST_TO_ADDR
// def_amount_of_people := 11 ;
11097: LD_ADDR_EXP 45
11101: PUSH
11102: LD_INT 11
11104: ST_TO_ADDR
// def_skill_level := 3 ;
11105: LD_ADDR_EXP 46
11109: PUSH
11110: LD_INT 3
11112: ST_TO_ADDR
// def_starting_resources := 3 ;
11113: LD_ADDR_EXP 47
11117: PUSH
11118: LD_INT 3
11120: ST_TO_ADDR
// def_shipments_density := 51 ;
11121: LD_ADDR_EXP 48
11125: PUSH
11126: LD_INT 51
11128: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11129: LD_ADDR_EXP 49
11133: PUSH
11134: LD_INT 1
11136: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11137: LD_ADDR_EXP 50
11141: PUSH
11142: LD_INT 2
11144: ST_TO_ADDR
// def_shared_vision := 1 ;
11145: LD_ADDR_EXP 51
11149: PUSH
11150: LD_INT 1
11152: ST_TO_ADDR
// def_morale_flags := 0 ;
11153: LD_ADDR_EXP 52
11157: PUSH
11158: LD_INT 0
11160: ST_TO_ADDR
// def_siberite_detection := 1 ;
11161: LD_ADDR_EXP 53
11165: PUSH
11166: LD_INT 1
11168: ST_TO_ADDR
// def_people_respawning := 0 ;
11169: LD_ADDR_EXP 54
11173: PUSH
11174: LD_INT 0
11176: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11177: LD_ADDR_EXP 55
11181: PUSH
11182: LD_INT 0
11184: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11185: LD_ADDR_EXP 56
11189: PUSH
11190: LD_INT 0
11192: ST_TO_ADDR
// def_builduptime := 6 ;
11193: LD_ADDR_EXP 57
11197: PUSH
11198: LD_INT 6
11200: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11201: LD_ADDR_VAR 0 2
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11212: LD_ADDR_VAR 0 3
11216: PUSH
11217: EMPTY
11218: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11219: LD_ADDR_LOC 22
11223: PUSH
11224: EMPTY
11225: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11226: LD_ADDR_LOC 23
11230: PUSH
11231: EMPTY
11232: ST_TO_ADDR
// Banned_Controls := [ ] ;
11233: LD_ADDR_LOC 24
11237: PUSH
11238: EMPTY
11239: ST_TO_ADDR
// Banned_Engines := [ ] ;
11240: LD_ADDR_LOC 25
11244: PUSH
11245: EMPTY
11246: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11247: LD_ADDR_LOC 20
11251: PUSH
11252: LD_INT 4
11254: PUSH
11255: LD_INT 5
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 31
11264: PUSH
11265: LD_INT 32
11267: PUSH
11268: LD_INT 33
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
11280: LD_ADDR_LOC 21
11284: PUSH
11285: LD_INT 1
11287: PUSH
11288: LD_INT 2
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: ST_TO_ADDR
// end ; 3 :
11295: GO 12806
11297: LD_INT 3
11299: DOUBLE
11300: EQUAL
11301: IFTRUE 11305
11303: GO 11548
11305: POP
// begin def_base_level := 1 ;
11306: LD_ADDR_EXP 44
11310: PUSH
11311: LD_INT 1
11313: ST_TO_ADDR
// def_amount_of_people := 11 ;
11314: LD_ADDR_EXP 45
11318: PUSH
11319: LD_INT 11
11321: ST_TO_ADDR
// def_skill_level := 3 ;
11322: LD_ADDR_EXP 46
11326: PUSH
11327: LD_INT 3
11329: ST_TO_ADDR
// def_starting_resources := 3 ;
11330: LD_ADDR_EXP 47
11334: PUSH
11335: LD_INT 3
11337: ST_TO_ADDR
// def_shipments_density := 1 ;
11338: LD_ADDR_EXP 48
11342: PUSH
11343: LD_INT 1
11345: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11346: LD_ADDR_EXP 49
11350: PUSH
11351: LD_INT 0
11353: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11354: LD_ADDR_EXP 50
11358: PUSH
11359: LD_INT 1
11361: ST_TO_ADDR
// def_shared_vision := 1 ;
11362: LD_ADDR_EXP 51
11366: PUSH
11367: LD_INT 1
11369: ST_TO_ADDR
// def_morale_flags := 0 ;
11370: LD_ADDR_EXP 52
11374: PUSH
11375: LD_INT 0
11377: ST_TO_ADDR
// def_siberite_detection := 1 ;
11378: LD_ADDR_EXP 53
11382: PUSH
11383: LD_INT 1
11385: ST_TO_ADDR
// def_people_respawning := 0 ;
11386: LD_ADDR_EXP 54
11390: PUSH
11391: LD_INT 0
11393: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11394: LD_ADDR_EXP 55
11398: PUSH
11399: LD_INT 2
11401: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11402: LD_ADDR_EXP 56
11406: PUSH
11407: LD_INT 0
11409: ST_TO_ADDR
// def_builduptime := 6 ;
11410: LD_ADDR_EXP 57
11414: PUSH
11415: LD_INT 6
11417: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11418: LD_ADDR_VAR 0 2
11422: PUSH
11423: LD_INT 23
11425: PUSH
11426: EMPTY
11427: LIST
11428: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
11429: LD_ADDR_VAR 0 3
11433: PUSH
11434: LD_INT 2
11436: PUSH
11437: LD_INT 37
11439: PUSH
11440: LD_INT 32
11442: PUSH
11443: LD_INT 33
11445: PUSH
11446: LD_INT 36
11448: PUSH
11449: LD_INT 16
11451: PUSH
11452: LD_INT 23
11454: PUSH
11455: LD_INT 21
11457: PUSH
11458: LD_INT 18
11460: PUSH
11461: LD_INT 22
11463: PUSH
11464: LD_INT 20
11466: PUSH
11467: LD_INT 19
11469: PUSH
11470: LD_INT 25
11472: PUSH
11473: LD_INT 17
11475: PUSH
11476: LD_INT 24
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11496: LD_ADDR_LOC 22
11500: PUSH
11501: EMPTY
11502: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11503: LD_ADDR_LOC 23
11507: PUSH
11508: EMPTY
11509: ST_TO_ADDR
// Banned_Controls := [ ] ;
11510: LD_ADDR_LOC 24
11514: PUSH
11515: EMPTY
11516: ST_TO_ADDR
// Banned_Engines := [ ] ;
11517: LD_ADDR_LOC 25
11521: PUSH
11522: EMPTY
11523: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11524: LD_ADDR_LOC 20
11528: PUSH
11529: EMPTY
11530: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11531: LD_ADDR_LOC 21
11535: PUSH
11536: EMPTY
11537: ST_TO_ADDR
// No_Mechs := true ;
11538: LD_ADDR_EXP 58
11542: PUSH
11543: LD_INT 1
11545: ST_TO_ADDR
// end ; 4 :
11546: GO 12806
11548: LD_INT 4
11550: DOUBLE
11551: EQUAL
11552: IFTRUE 11556
11554: GO 11731
11556: POP
// begin def_base_level := 1 ;
11557: LD_ADDR_EXP 44
11561: PUSH
11562: LD_INT 1
11564: ST_TO_ADDR
// def_amount_of_people := 11 ;
11565: LD_ADDR_EXP 45
11569: PUSH
11570: LD_INT 11
11572: ST_TO_ADDR
// def_skill_level := 3 ;
11573: LD_ADDR_EXP 46
11577: PUSH
11578: LD_INT 3
11580: ST_TO_ADDR
// def_starting_resources := 3 ;
11581: LD_ADDR_EXP 47
11585: PUSH
11586: LD_INT 3
11588: ST_TO_ADDR
// def_shipments_density := 2 ;
11589: LD_ADDR_EXP 48
11593: PUSH
11594: LD_INT 2
11596: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11597: LD_ADDR_EXP 49
11601: PUSH
11602: LD_INT 1
11604: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11605: LD_ADDR_EXP 50
11609: PUSH
11610: LD_INT 2
11612: ST_TO_ADDR
// def_shared_vision := 1 ;
11613: LD_ADDR_EXP 51
11617: PUSH
11618: LD_INT 1
11620: ST_TO_ADDR
// def_morale_flags := 0 ;
11621: LD_ADDR_EXP 52
11625: PUSH
11626: LD_INT 0
11628: ST_TO_ADDR
// def_siberite_detection := 1 ;
11629: LD_ADDR_EXP 53
11633: PUSH
11634: LD_INT 1
11636: ST_TO_ADDR
// def_people_respawning := 0 ;
11637: LD_ADDR_EXP 54
11641: PUSH
11642: LD_INT 0
11644: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11645: LD_ADDR_EXP 55
11649: PUSH
11650: LD_INT 0
11652: ST_TO_ADDR
// def_siberite_bomb := 1 ;
11653: LD_ADDR_EXP 56
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
// def_builduptime := 11 ;
11661: LD_ADDR_EXP 57
11665: PUSH
11666: LD_INT 11
11668: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11669: LD_ADDR_VAR 0 2
11673: PUSH
11674: LD_INT 1
11676: PUSH
11677: EMPTY
11678: LIST
11679: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11680: LD_ADDR_VAR 0 3
11684: PUSH
11685: EMPTY
11686: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11687: LD_ADDR_LOC 22
11691: PUSH
11692: EMPTY
11693: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11694: LD_ADDR_LOC 23
11698: PUSH
11699: EMPTY
11700: ST_TO_ADDR
// Banned_Controls := [ ] ;
11701: LD_ADDR_LOC 24
11705: PUSH
11706: EMPTY
11707: ST_TO_ADDR
// Banned_Engines := [ ] ;
11708: LD_ADDR_LOC 25
11712: PUSH
11713: EMPTY
11714: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11715: LD_ADDR_LOC 20
11719: PUSH
11720: EMPTY
11721: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11722: LD_ADDR_LOC 21
11726: PUSH
11727: EMPTY
11728: ST_TO_ADDR
// end ; 5 :
11729: GO 12806
11731: LD_INT 5
11733: DOUBLE
11734: EQUAL
11735: IFTRUE 11739
11737: GO 11988
11739: POP
// begin def_base_level := 0 ;
11740: LD_ADDR_EXP 44
11744: PUSH
11745: LD_INT 0
11747: ST_TO_ADDR
// def_amount_of_people := 5 ;
11748: LD_ADDR_EXP 45
11752: PUSH
11753: LD_INT 5
11755: ST_TO_ADDR
// def_skill_level := 0 ;
11756: LD_ADDR_EXP 46
11760: PUSH
11761: LD_INT 0
11763: ST_TO_ADDR
// def_starting_resources := 0 ;
11764: LD_ADDR_EXP 47
11768: PUSH
11769: LD_INT 0
11771: ST_TO_ADDR
// def_shipments_density := 0 ;
11772: LD_ADDR_EXP 48
11776: PUSH
11777: LD_INT 0
11779: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11780: LD_ADDR_EXP 49
11784: PUSH
11785: LD_INT 0
11787: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11788: LD_ADDR_EXP 50
11792: PUSH
11793: LD_INT 0
11795: ST_TO_ADDR
// def_shared_vision := 1 ;
11796: LD_ADDR_EXP 51
11800: PUSH
11801: LD_INT 1
11803: ST_TO_ADDR
// def_morale_flags := 0 ;
11804: LD_ADDR_EXP 52
11808: PUSH
11809: LD_INT 0
11811: ST_TO_ADDR
// def_siberite_detection := 0 ;
11812: LD_ADDR_EXP 53
11816: PUSH
11817: LD_INT 0
11819: ST_TO_ADDR
// def_people_respawning := 1 ;
11820: LD_ADDR_EXP 54
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11828: LD_ADDR_EXP 55
11832: PUSH
11833: LD_INT 1
11835: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11836: LD_ADDR_EXP 56
11840: PUSH
11841: LD_INT 0
11843: ST_TO_ADDR
// def_builduptime := 0 ;
11844: LD_ADDR_EXP 57
11848: PUSH
11849: LD_INT 0
11851: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
11852: LD_ADDR_VAR 0 2
11856: PUSH
11857: LD_INT 10
11859: PUSH
11860: LD_INT 3
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
11867: LD_ADDR_VAR 0 3
11871: PUSH
11872: LD_INT 12
11874: PUSH
11875: LD_INT 11
11877: PUSH
11878: LD_INT 14
11880: PUSH
11881: LD_INT 13
11883: PUSH
11884: LD_INT 5
11886: PUSH
11887: LD_INT 24
11889: PUSH
11890: LD_INT 21
11892: PUSH
11893: LD_INT 33
11895: PUSH
11896: LD_INT 36
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
11910: LD_ADDR_LOC 22
11914: PUSH
11915: LD_INT 31
11917: PUSH
11918: EMPTY
11919: LIST
11920: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11921: LD_ADDR_LOC 23
11925: PUSH
11926: EMPTY
11927: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
11928: LD_ADDR_LOC 24
11932: PUSH
11933: LD_INT 2
11935: PUSH
11936: EMPTY
11937: LIST
11938: ST_TO_ADDR
// Banned_Engines := [ ] ;
11939: LD_ADDR_LOC 25
11943: PUSH
11944: EMPTY
11945: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
11946: LD_ADDR_LOC 20
11950: PUSH
11951: LD_INT 4
11953: PUSH
11954: EMPTY
11955: LIST
11956: PUSH
11957: LD_INT 31
11959: PUSH
11960: LD_INT 32
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
11971: LD_ADDR_LOC 21
11975: PUSH
11976: LD_INT 1
11978: PUSH
11979: LD_INT 1
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: ST_TO_ADDR
// end ; 6 :
11986: GO 12806
11988: LD_INT 6
11990: DOUBLE
11991: EQUAL
11992: IFTRUE 11996
11994: GO 12199
11996: POP
// begin def_base_level := 1 ;
11997: LD_ADDR_EXP 44
12001: PUSH
12002: LD_INT 1
12004: ST_TO_ADDR
// def_amount_of_people := 11 ;
12005: LD_ADDR_EXP 45
12009: PUSH
12010: LD_INT 11
12012: ST_TO_ADDR
// def_skill_level := 3 ;
12013: LD_ADDR_EXP 46
12017: PUSH
12018: LD_INT 3
12020: ST_TO_ADDR
// def_starting_resources := 3 ;
12021: LD_ADDR_EXP 47
12025: PUSH
12026: LD_INT 3
12028: ST_TO_ADDR
// def_shipments_density := 1 ;
12029: LD_ADDR_EXP 48
12033: PUSH
12034: LD_INT 1
12036: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12037: LD_ADDR_EXP 49
12041: PUSH
12042: LD_INT 0
12044: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
12045: LD_ADDR_EXP 50
12049: PUSH
12050: LD_INT 1
12052: ST_TO_ADDR
// def_shared_vision := 1 ;
12053: LD_ADDR_EXP 51
12057: PUSH
12058: LD_INT 1
12060: ST_TO_ADDR
// def_morale_flags := 0 ;
12061: LD_ADDR_EXP 52
12065: PUSH
12066: LD_INT 0
12068: ST_TO_ADDR
// def_siberite_detection := 1 ;
12069: LD_ADDR_EXP 53
12073: PUSH
12074: LD_INT 1
12076: ST_TO_ADDR
// def_people_respawning := 2 ;
12077: LD_ADDR_EXP 54
12081: PUSH
12082: LD_INT 2
12084: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12085: LD_ADDR_EXP 55
12089: PUSH
12090: LD_INT 1
12092: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12093: LD_ADDR_EXP 56
12097: PUSH
12098: LD_INT 0
12100: ST_TO_ADDR
// def_builduptime := 6 ;
12101: LD_ADDR_EXP 57
12105: PUSH
12106: LD_INT 6
12108: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12109: LD_ADDR_VAR 0 2
12113: PUSH
12114: LD_INT 23
12116: PUSH
12117: EMPTY
12118: LIST
12119: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
12120: LD_ADDR_VAR 0 3
12124: PUSH
12125: LD_INT 2
12127: PUSH
12128: LD_INT 37
12130: PUSH
12131: LD_INT 31
12133: PUSH
12134: LD_INT 32
12136: PUSH
12137: LD_INT 33
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12147: LD_ADDR_LOC 22
12151: PUSH
12152: EMPTY
12153: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12154: LD_ADDR_LOC 23
12158: PUSH
12159: EMPTY
12160: ST_TO_ADDR
// Banned_Controls := [ ] ;
12161: LD_ADDR_LOC 24
12165: PUSH
12166: EMPTY
12167: ST_TO_ADDR
// Banned_Engines := [ ] ;
12168: LD_ADDR_LOC 25
12172: PUSH
12173: EMPTY
12174: ST_TO_ADDR
// Restricted_Builds := [ ] ;
12175: LD_ADDR_LOC 20
12179: PUSH
12180: EMPTY
12181: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
12182: LD_ADDR_LOC 21
12186: PUSH
12187: EMPTY
12188: ST_TO_ADDR
// No_Mechs := true ;
12189: LD_ADDR_EXP 58
12193: PUSH
12194: LD_INT 1
12196: ST_TO_ADDR
// end ; 7 :
12197: GO 12806
12199: LD_INT 7
12201: DOUBLE
12202: EQUAL
12203: IFTRUE 12207
12205: GO 12405
12207: POP
// begin def_base_level := 1 ;
12208: LD_ADDR_EXP 44
12212: PUSH
12213: LD_INT 1
12215: ST_TO_ADDR
// def_amount_of_people := 20 ;
12216: LD_ADDR_EXP 45
12220: PUSH
12221: LD_INT 20
12223: ST_TO_ADDR
// def_skill_level := 3 ;
12224: LD_ADDR_EXP 46
12228: PUSH
12229: LD_INT 3
12231: ST_TO_ADDR
// def_starting_resources := 3 ;
12232: LD_ADDR_EXP 47
12236: PUSH
12237: LD_INT 3
12239: ST_TO_ADDR
// def_shipments_density := 1 ;
12240: LD_ADDR_EXP 48
12244: PUSH
12245: LD_INT 1
12247: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
12248: LD_ADDR_EXP 49
12252: PUSH
12253: LD_INT 1
12255: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
12256: LD_ADDR_EXP 50
12260: PUSH
12261: LD_INT 2
12263: ST_TO_ADDR
// def_shared_vision := 1 ;
12264: LD_ADDR_EXP 51
12268: PUSH
12269: LD_INT 1
12271: ST_TO_ADDR
// def_morale_flags := 0 ;
12272: LD_ADDR_EXP 52
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// def_siberite_detection := 1 ;
12280: LD_ADDR_EXP 53
12284: PUSH
12285: LD_INT 1
12287: ST_TO_ADDR
// def_people_respawning := 0 ;
12288: LD_ADDR_EXP 54
12292: PUSH
12293: LD_INT 0
12295: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12296: LD_ADDR_EXP 55
12300: PUSH
12301: LD_INT 1
12303: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12304: LD_ADDR_EXP 56
12308: PUSH
12309: LD_INT 0
12311: ST_TO_ADDR
// def_builduptime := 6 ;
12312: LD_ADDR_EXP 57
12316: PUSH
12317: LD_INT 6
12319: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12320: LD_ADDR_VAR 0 2
12324: PUSH
12325: LD_INT 23
12327: PUSH
12328: EMPTY
12329: LIST
12330: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
12331: LD_ADDR_VAR 0 3
12335: PUSH
12336: LD_INT 37
12338: PUSH
12339: EMPTY
12340: LIST
12341: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12342: LD_ADDR_LOC 22
12346: PUSH
12347: EMPTY
12348: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12349: LD_ADDR_LOC 23
12353: PUSH
12354: EMPTY
12355: ST_TO_ADDR
// Banned_Controls := [ ] ;
12356: LD_ADDR_LOC 24
12360: PUSH
12361: EMPTY
12362: ST_TO_ADDR
// Banned_Engines := [ ] ;
12363: LD_ADDR_LOC 25
12367: PUSH
12368: EMPTY
12369: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
12370: LD_ADDR_LOC 20
12374: PUSH
12375: LD_INT 31
12377: PUSH
12378: LD_INT 32
12380: PUSH
12381: LD_INT 33
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: LIST
12388: PUSH
12389: EMPTY
12390: LIST
12391: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
12392: LD_ADDR_LOC 21
12396: PUSH
12397: LD_INT 10
12399: PUSH
12400: EMPTY
12401: LIST
12402: ST_TO_ADDR
// end ; 8 :
12403: GO 12806
12405: LD_INT 8
12407: DOUBLE
12408: EQUAL
12409: IFTRUE 12413
12411: GO 12805
12413: POP
// begin def_base_level := 0 ;
12414: LD_ADDR_EXP 44
12418: PUSH
12419: LD_INT 0
12421: ST_TO_ADDR
// def_amount_of_people := 8 ;
12422: LD_ADDR_EXP 45
12426: PUSH
12427: LD_INT 8
12429: ST_TO_ADDR
// def_skill_level := 0 ;
12430: LD_ADDR_EXP 46
12434: PUSH
12435: LD_INT 0
12437: ST_TO_ADDR
// def_starting_resources := 2 ;
12438: LD_ADDR_EXP 47
12442: PUSH
12443: LD_INT 2
12445: ST_TO_ADDR
// def_shipments_density := 1 ;
12446: LD_ADDR_EXP 48
12450: PUSH
12451: LD_INT 1
12453: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12454: LD_ADDR_EXP 49
12458: PUSH
12459: LD_INT 0
12461: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12462: LD_ADDR_EXP 50
12466: PUSH
12467: LD_INT 0
12469: ST_TO_ADDR
// def_shared_vision := 1 ;
12470: LD_ADDR_EXP 51
12474: PUSH
12475: LD_INT 1
12477: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
12478: LD_ADDR_EXP 52
12482: PUSH
12483: LD_INT 0
12485: PPUSH
12486: LD_INT 2
12488: PPUSH
12489: CALL_OW 12
12493: ST_TO_ADDR
// def_siberite_detection := 0 ;
12494: LD_ADDR_EXP 53
12498: PUSH
12499: LD_INT 0
12501: ST_TO_ADDR
// def_people_respawning := 0 ;
12502: LD_ADDR_EXP 54
12506: PUSH
12507: LD_INT 0
12509: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
12510: LD_ADDR_EXP 55
12514: PUSH
12515: LD_INT 2
12517: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12518: LD_ADDR_EXP 56
12522: PUSH
12523: LD_INT 0
12525: ST_TO_ADDR
// def_builduptime := 0 ;
12526: LD_ADDR_EXP 57
12530: PUSH
12531: LD_INT 0
12533: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
12534: LD_ADDR_VAR 0 2
12538: PUSH
12539: LD_INT 23
12541: PUSH
12542: LD_INT 20
12544: PUSH
12545: LD_INT 40
12547: PUSH
12548: LD_INT 47
12550: PUSH
12551: LD_INT 46
12553: PUSH
12554: LD_INT 39
12556: PUSH
12557: LD_INT 71
12559: PUSH
12560: LD_INT 34
12562: PUSH
12563: LD_INT 41
12565: PUSH
12566: LD_INT 44
12568: PUSH
12569: LD_INT 17
12571: PUSH
12572: LD_INT 16
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
12589: LD_ADDR_VAR 0 3
12593: PUSH
12594: LD_INT 37
12596: PUSH
12597: LD_INT 5
12599: PUSH
12600: LD_INT 13
12602: PUSH
12603: LD_INT 34
12605: PUSH
12606: LD_INT 12
12608: PUSH
12609: LD_INT 15
12611: PUSH
12612: LD_INT 11
12614: PUSH
12615: LD_INT 14
12617: PUSH
12618: LD_INT 29
12620: PUSH
12621: LD_INT 30
12623: PUSH
12624: LD_INT 28
12626: PUSH
12627: LD_INT 24
12629: PUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 20
12635: PUSH
12636: LD_INT 21
12638: PUSH
12639: LD_INT 22
12641: PUSH
12642: LD_INT 36
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12664: LD_ADDR_LOC 22
12668: PUSH
12669: EMPTY
12670: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
12671: LD_ADDR_LOC 23
12675: PUSH
12676: LD_INT 14
12678: PUSH
12679: EMPTY
12680: LIST
12681: ST_TO_ADDR
// Banned_Controls := [ ] ;
12682: LD_ADDR_LOC 24
12686: PUSH
12687: EMPTY
12688: ST_TO_ADDR
// Banned_Engines := [ ] ;
12689: LD_ADDR_LOC 25
12693: PUSH
12694: EMPTY
12695: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
12696: LD_ADDR_LOC 20
12700: PUSH
12701: LD_INT 31
12703: PUSH
12704: LD_INT 32
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: LD_INT 4
12713: PUSH
12714: EMPTY
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
12721: LD_ADDR_LOC 21
12725: PUSH
12726: LD_INT 2
12728: PUSH
12729: LD_INT 1
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: ST_TO_ADDR
// for i := 1 to 8 do
12736: LD_ADDR_VAR 0 4
12740: PUSH
12741: DOUBLE
12742: LD_INT 1
12744: DEC
12745: ST_TO_ADDR
12746: LD_INT 8
12748: PUSH
12749: FOR_TO
12750: IFFALSE 12801
// if ( Side_Nations [ i ] = 3 ) then
12752: LD_EXP 20
12756: PUSH
12757: LD_VAR 0 4
12761: ARRAY
12762: PUSH
12763: LD_INT 3
12765: EQUAL
12766: IFFALSE 12799
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
12768: LD_ADDR_EXP 20
12772: PUSH
12773: LD_EXP 20
12777: PPUSH
12778: LD_VAR 0 4
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: LD_INT 2
12788: PPUSH
12789: CALL_OW 12
12793: PPUSH
12794: CALL_OW 1
12798: ST_TO_ADDR
12799: GO 12749
12801: POP
12802: POP
// end ; end ;
12803: GO 12806
12805: POP
// for i := 1 to 8 do
12806: LD_ADDR_VAR 0 4
12810: PUSH
12811: DOUBLE
12812: LD_INT 1
12814: DEC
12815: ST_TO_ADDR
12816: LD_INT 8
12818: PUSH
12819: FOR_TO
12820: IFFALSE 12904
// if Side_Positions [ i ] then
12822: LD_EXP 19
12826: PUSH
12827: LD_VAR 0 4
12831: ARRAY
12832: IFFALSE 12902
// begin for j in Unavailable_Techs do
12834: LD_ADDR_VAR 0 5
12838: PUSH
12839: LD_VAR 0 2
12843: PUSH
12844: FOR_IN
12845: IFFALSE 12866
// SetTech ( j , i , 0 ) ;
12847: LD_VAR 0 5
12851: PPUSH
12852: LD_VAR 0 4
12856: PPUSH
12857: LD_INT 0
12859: PPUSH
12860: CALL_OW 322
12864: GO 12844
12866: POP
12867: POP
// for j in Unavailable_Builds do
12868: LD_ADDR_VAR 0 5
12872: PUSH
12873: LD_VAR 0 3
12877: PUSH
12878: FOR_IN
12879: IFFALSE 12900
// SetRestrict ( j , i , 0 ) ;
12881: LD_VAR 0 5
12885: PPUSH
12886: LD_VAR 0 4
12890: PPUSH
12891: LD_INT 0
12893: PPUSH
12894: CALL_OW 324
12898: GO 12878
12900: POP
12901: POP
// end ;
12902: GO 12819
12904: POP
12905: POP
// end ;
12906: LD_VAR 0 1
12910: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
12911: LD_INT 0
12913: PPUSH
12914: PPUSH
12915: PPUSH
12916: PPUSH
12917: PPUSH
12918: PPUSH
12919: PPUSH
// for i := 1 to Restricted_Builds do
12920: LD_ADDR_VAR 0 2
12924: PUSH
12925: DOUBLE
12926: LD_INT 1
12928: DEC
12929: ST_TO_ADDR
12930: LD_LOC 20
12934: PUSH
12935: FOR_TO
12936: IFFALSE 13246
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
12938: LD_LOC 20
12942: PUSH
12943: LD_VAR 0 2
12947: ARRAY
12948: PUSH
12949: LD_INT 1
12951: ARRAY
12952: PUSH
12953: LD_INT 31
12955: DOUBLE
12956: EQUAL
12957: IFTRUE 12973
12959: LD_INT 32
12961: DOUBLE
12962: EQUAL
12963: IFTRUE 12973
12965: LD_INT 33
12967: DOUBLE
12968: EQUAL
12969: IFTRUE 12973
12971: GO 12984
12973: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
12974: LD_ADDR_VAR 0 6
12978: PUSH
12979: LD_STRING #Turrets
12981: ST_TO_ADDR
12982: GO 13029
12984: LD_INT 4
12986: DOUBLE
12987: EQUAL
12988: IFTRUE 12998
12990: LD_INT 5
12992: DOUBLE
12993: EQUAL
12994: IFTRUE 12998
12996: GO 13009
12998: POP
// btype := #Armouries ; b_Behemoth :
12999: LD_ADDR_VAR 0 6
13003: PUSH
13004: LD_STRING #Armouries
13006: ST_TO_ADDR
13007: GO 13029
13009: LD_INT 37
13011: DOUBLE
13012: EQUAL
13013: IFTRUE 13017
13015: GO 13028
13017: POP
// btype := #Behemoths ; end ;
13018: LD_ADDR_VAR 0 6
13022: PUSH
13023: LD_STRING #Behemoths
13025: ST_TO_ADDR
13026: GO 13029
13028: POP
// list := [ ] ;
13029: LD_ADDR_VAR 0 7
13033: PUSH
13034: EMPTY
13035: ST_TO_ADDR
// for j := 1 to 8 do
13036: LD_ADDR_VAR 0 3
13040: PUSH
13041: DOUBLE
13042: LD_INT 1
13044: DEC
13045: ST_TO_ADDR
13046: LD_INT 8
13048: PUSH
13049: FOR_TO
13050: IFFALSE 13143
// if Side_Positions [ j ] then
13052: LD_EXP 19
13056: PUSH
13057: LD_VAR 0 3
13061: ARRAY
13062: IFFALSE 13141
// begin amount := 0 ;
13064: LD_ADDR_VAR 0 5
13068: PUSH
13069: LD_INT 0
13071: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
13072: LD_ADDR_VAR 0 4
13076: PUSH
13077: LD_LOC 20
13081: PUSH
13082: LD_VAR 0 2
13086: ARRAY
13087: PUSH
13088: FOR_IN
13089: IFFALSE 13137
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
13091: LD_ADDR_VAR 0 5
13095: PUSH
13096: LD_VAR 0 5
13100: PUSH
13101: LD_INT 22
13103: PUSH
13104: LD_VAR 0 3
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: LD_INT 30
13115: PUSH
13116: LD_VAR 0 4
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PPUSH
13129: CALL_OW 69
13133: PLUS
13134: ST_TO_ADDR
13135: GO 13088
13137: POP
13138: POP
// break ;
13139: GO 13143
// end ;
13141: GO 13049
13143: POP
13144: POP
// list := [ ] ;
13145: LD_ADDR_VAR 0 7
13149: PUSH
13150: EMPTY
13151: ST_TO_ADDR
// for j := 1 to 8 do
13152: LD_ADDR_VAR 0 3
13156: PUSH
13157: DOUBLE
13158: LD_INT 1
13160: DEC
13161: ST_TO_ADDR
13162: LD_INT 8
13164: PUSH
13165: FOR_TO
13166: IFFALSE 13186
// list := list ^ amount ;
13168: LD_ADDR_VAR 0 7
13172: PUSH
13173: LD_VAR 0 7
13177: PUSH
13178: LD_VAR 0 5
13182: ADD
13183: ST_TO_ADDR
13184: GO 13165
13186: POP
13187: POP
// Already_Built := Already_Built ^ [ list ] ;
13188: LD_ADDR_LOC 26
13192: PUSH
13193: LD_LOC 26
13197: PUSH
13198: LD_VAR 0 7
13202: PUSH
13203: EMPTY
13204: LIST
13205: ADD
13206: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13207: LD_ADDR_LOC 27
13211: PUSH
13212: LD_LOC 27
13216: PUSH
13217: LD_VAR 0 6
13221: PUSH
13222: LD_VAR 0 5
13226: PUSH
13227: LD_LOC 21
13231: PUSH
13232: LD_VAR 0 2
13236: ARRAY
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: ADD
13243: ST_TO_ADDR
// end ;
13244: GO 12935
13246: POP
13247: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13248: LD_ADDR_LOC 28
13252: PUSH
13253: LD_INT 0
13255: PUSH
13256: LD_INT 0
13258: PUSH
13259: LD_INT 0
13261: PUSH
13262: LD_INT 0
13264: PUSH
13265: LD_INT 0
13267: PUSH
13268: LD_INT 0
13270: PUSH
13271: LD_INT 0
13273: PUSH
13274: LD_INT 0
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: ST_TO_ADDR
// if Limits_Info then
13287: LD_LOC 27
13291: IFFALSE 13307
// Limits_Info := #Limits ^ Limits_Info ;
13293: LD_ADDR_LOC 27
13297: PUSH
13298: LD_STRING #Limits
13300: PUSH
13301: LD_LOC 27
13305: ADD
13306: ST_TO_ADDR
// end ;
13307: LD_VAR 0 1
13311: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13312: LD_INT 0
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
// for i := 1 to Restricted_Builds do
13318: LD_ADDR_VAR 0 7
13322: PUSH
13323: DOUBLE
13324: LD_INT 1
13326: DEC
13327: ST_TO_ADDR
13328: LD_LOC 20
13332: PUSH
13333: FOR_TO
13334: IFFALSE 13757
// if BType in Restricted_Builds [ i ] then
13336: LD_VAR 0 2
13340: PUSH
13341: LD_LOC 20
13345: PUSH
13346: LD_VAR 0 7
13350: ARRAY
13351: IN
13352: IFFALSE 13755
// begin if old_side then
13354: LD_VAR 0 4
13358: IFFALSE 13484
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
13360: LD_LOC 26
13364: PUSH
13365: LD_VAR 0 7
13369: ARRAY
13370: PUSH
13371: LD_VAR 0 3
13375: ARRAY
13376: PUSH
13377: LD_VAR 0 5
13381: PLUS
13382: PUSH
13383: LD_LOC 21
13387: PUSH
13388: LD_VAR 0 7
13392: ARRAY
13393: GREATER
13394: IFFALSE 13420
// begin SetSide ( un , old_side ) ;
13396: LD_VAR 0 1
13400: PPUSH
13401: LD_VAR 0 4
13405: PPUSH
13406: CALL_OW 235
// count := 0 ;
13410: LD_ADDR_VAR 0 5
13414: PUSH
13415: LD_INT 0
13417: ST_TO_ADDR
// end else
13418: GO 13484
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
13420: LD_ADDR_LOC 26
13424: PUSH
13425: LD_LOC 26
13429: PPUSH
13430: LD_VAR 0 7
13434: PPUSH
13435: LD_LOC 26
13439: PUSH
13440: LD_VAR 0 7
13444: ARRAY
13445: PPUSH
13446: LD_VAR 0 4
13450: PPUSH
13451: LD_LOC 26
13455: PUSH
13456: LD_VAR 0 7
13460: ARRAY
13461: PUSH
13462: LD_VAR 0 4
13466: ARRAY
13467: PUSH
13468: LD_VAR 0 5
13472: MINUS
13473: PPUSH
13474: CALL_OW 1
13478: PPUSH
13479: CALL_OW 1
13483: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
13484: LD_ADDR_LOC 26
13488: PUSH
13489: LD_LOC 26
13493: PPUSH
13494: LD_VAR 0 7
13498: PPUSH
13499: LD_LOC 26
13503: PUSH
13504: LD_VAR 0 7
13508: ARRAY
13509: PPUSH
13510: LD_VAR 0 3
13514: PPUSH
13515: LD_LOC 26
13519: PUSH
13520: LD_VAR 0 7
13524: ARRAY
13525: PUSH
13526: LD_VAR 0 3
13530: ARRAY
13531: PUSH
13532: LD_VAR 0 5
13536: PLUS
13537: PPUSH
13538: CALL_OW 1
13542: PPUSH
13543: CALL_OW 1
13547: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
13548: LD_VAR 0 5
13552: PUSH
13553: LD_INT 0
13555: NONEQUAL
13556: PUSH
13557: LD_VAR 0 3
13561: PUSH
13562: LD_OWVAR 2
13566: EQUAL
13567: AND
13568: IFFALSE 13611
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
13570: LD_ADDR_LOC 27
13574: PUSH
13575: LD_LOC 27
13579: PPUSH
13580: LD_INT 3
13582: PUSH
13583: LD_VAR 0 7
13587: MUL
13588: PPUSH
13589: LD_LOC 26
13593: PUSH
13594: LD_VAR 0 7
13598: ARRAY
13599: PUSH
13600: LD_VAR 0 3
13604: ARRAY
13605: PPUSH
13606: CALL_OW 1
13610: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
13611: LD_LOC 26
13615: PUSH
13616: LD_VAR 0 7
13620: ARRAY
13621: PUSH
13622: LD_VAR 0 3
13626: ARRAY
13627: PUSH
13628: LD_LOC 21
13632: PUSH
13633: LD_VAR 0 7
13637: ARRAY
13638: GREATER
13639: IFFALSE 13666
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
13641: LD_ADDR_LOC 28
13645: PUSH
13646: LD_LOC 28
13650: PPUSH
13651: LD_VAR 0 3
13655: PPUSH
13656: LD_INT 1
13658: PPUSH
13659: CALL_OW 1
13663: ST_TO_ADDR
// end else
13664: GO 13753
// begin for j := 1 to Restricted_Builds do
13666: LD_ADDR_VAR 0 8
13670: PUSH
13671: DOUBLE
13672: LD_INT 1
13674: DEC
13675: ST_TO_ADDR
13676: LD_LOC 20
13680: PUSH
13681: FOR_TO
13682: IFFALSE 13726
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
13684: LD_LOC 26
13688: PUSH
13689: LD_VAR 0 8
13693: ARRAY
13694: PUSH
13695: LD_VAR 0 3
13699: ARRAY
13700: PUSH
13701: LD_LOC 21
13705: PUSH
13706: LD_VAR 0 8
13710: ARRAY
13711: GREATER
13712: IFFALSE 13724
// begin Is_Cheater := true ;
13714: LD_ADDR_VAR 0 9
13718: PUSH
13719: LD_INT 1
13721: ST_TO_ADDR
// break ;
13722: GO 13726
// end ;
13724: GO 13681
13726: POP
13727: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
13728: LD_ADDR_LOC 28
13732: PUSH
13733: LD_LOC 28
13737: PPUSH
13738: LD_VAR 0 3
13742: PPUSH
13743: LD_VAR 0 9
13747: PPUSH
13748: CALL_OW 1
13752: ST_TO_ADDR
// end ; break ;
13753: GO 13757
// end ;
13755: GO 13333
13757: POP
13758: POP
// end ;
13759: LD_VAR 0 6
13763: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
13764: LD_VAR 0 5
13768: PUSH
13769: LD_LOC 22
13773: IN
13774: PUSH
13775: LD_VAR 0 2
13779: PUSH
13780: LD_LOC 23
13784: IN
13785: OR
13786: PUSH
13787: LD_VAR 0 4
13791: PUSH
13792: LD_LOC 24
13796: IN
13797: OR
13798: PUSH
13799: LD_VAR 0 3
13803: PUSH
13804: LD_LOC 25
13808: IN
13809: OR
13810: IFFALSE 13821
// ComCancel ( factory ) ;
13812: LD_VAR 0 1
13816: PPUSH
13817: CALL_OW 127
// end ;
13821: PPOPN 5
13823: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
13824: LD_VAR 0 2
13828: PUSH
13829: LD_LOC 22
13833: IN
13834: IFFALSE 13845
// ComCancel ( building ) ;
13836: LD_VAR 0 1
13840: PPUSH
13841: CALL_OW 127
// end ; end_of_file
13845: PPOPN 2
13847: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
13848: LD_INT 0
13850: PPUSH
13851: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
13852: LD_ADDR_VAR 0 2
13856: PUSH
13857: LD_STRING #Multi1x1-Time
13859: PUSH
13860: LD_OWVAR 1
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: ST_TO_ADDR
// if WaitServerStrings then
13869: LD_EXP 60
13873: IFFALSE 13891
// AllStrings = AllStrings ^ WaitServerStrings ;
13875: LD_ADDR_VAR 0 2
13879: PUSH
13880: LD_VAR 0 2
13884: PUSH
13885: LD_EXP 60
13889: ADD
13890: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
13891: LD_INT 0
13893: PUSH
13894: LD_EXP 16
13898: PUSH
13899: LD_OWVAR 1
13903: MINUS
13904: LESSEQUAL
13905: IFFALSE 13936
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
13907: LD_ADDR_VAR 0 2
13911: PUSH
13912: LD_VAR 0 2
13916: PUSH
13917: LD_STRING #allowedsibbomb
13919: PUSH
13920: LD_EXP 16
13924: PUSH
13925: LD_OWVAR 1
13929: MINUS
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: ADD
13935: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
13936: LD_INT 0
13938: PUSH
13939: LD_EXP 14
13943: PUSH
13944: LD_OWVAR 1
13948: MINUS
13949: LESSEQUAL
13950: IFFALSE 13981
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
13952: LD_ADDR_VAR 0 2
13956: PUSH
13957: LD_VAR 0 2
13961: PUSH
13962: LD_STRING #builduptime
13964: PUSH
13965: LD_EXP 14
13969: PUSH
13970: LD_OWVAR 1
13974: MINUS
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: ADD
13980: ST_TO_ADDR
// if ( ExtraStrings ) then
13981: LD_EXP 59
13985: IFFALSE 14007
// AllStrings := AllStrings ^  ^ ExtraStrings ;
13987: LD_ADDR_VAR 0 2
13991: PUSH
13992: LD_VAR 0 2
13996: PUSH
13997: LD_STRING 
13999: ADD
14000: PUSH
14001: LD_EXP 59
14005: ADD
14006: ST_TO_ADDR
// if ( LimitsStrings ) then
14007: CALL 10709 0 0
14011: IFFALSE 14033
// AllStrings := AllStrings ^  ^ LimitsStrings ;
14013: LD_ADDR_VAR 0 2
14017: PUSH
14018: LD_VAR 0 2
14022: PUSH
14023: LD_STRING 
14025: ADD
14026: PUSH
14027: CALL 10709 0 0
14031: ADD
14032: ST_TO_ADDR
// if debug_strings then
14033: LD_OWVAR 48
14037: IFFALSE 14059
// AllStrings := AllStrings ^  ^ debug_strings ;
14039: LD_ADDR_VAR 0 2
14043: PUSH
14044: LD_VAR 0 2
14048: PUSH
14049: LD_STRING 
14051: ADD
14052: PUSH
14053: LD_OWVAR 48
14057: ADD
14058: ST_TO_ADDR
// Display_Strings := AllStrings ;
14059: LD_ADDR_OWVAR 47
14063: PUSH
14064: LD_VAR 0 2
14068: ST_TO_ADDR
// end ;
14069: LD_VAR 0 1
14073: RET
// every 0 0$1 do
14074: GO 14076
14076: DISABLE
// begin ShowTimer ;
14077: CALL 13848 0 0
// enable ;
14081: ENABLE
// end ; end_of_file
14082: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
14083: LD_INT 0
14085: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
14086: LD_VAR 0 1
14090: PPUSH
14091: CALL_OW 255
14095: PUSH
14096: LD_VAR 0 4
14100: EQUAL
14101: IFFALSE 14120
// begin SetAchievement ( ACH_RAD ) ;
14103: LD_STRING ACH_RAD
14105: PPUSH
14106: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
14110: LD_STRING ACH_NL
14112: PPUSH
14113: LD_INT 1
14115: PPUSH
14116: CALL_OW 564
// end end ;
14120: LD_VAR 0 5
14124: RET
// export function SA_Win ( side ) ; begin
14125: LD_INT 0
14127: PPUSH
// case side of 1 :
14128: LD_VAR 0 1
14132: PUSH
14133: LD_INT 1
14135: DOUBLE
14136: EQUAL
14137: IFTRUE 14141
14139: GO 14154
14141: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
14142: LD_STRING ACH_AH
14144: PPUSH
14145: LD_INT 1
14147: PPUSH
14148: CALL_OW 564
14152: GO 14317
14154: LD_INT 2
14156: DOUBLE
14157: EQUAL
14158: IFTRUE 14162
14160: GO 14175
14162: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
14163: LD_STRING ACH_E
14165: PPUSH
14166: LD_INT 1
14168: PPUSH
14169: CALL_OW 564
14173: GO 14317
14175: LD_INT 3
14177: DOUBLE
14178: EQUAL
14179: IFTRUE 14183
14181: GO 14196
14183: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
14184: LD_STRING ACH_OOL
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: CALL_OW 564
14194: GO 14317
14196: LD_INT 1
14198: PUSH
14199: LD_INT 2
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: DOUBLE
14206: EQUAL
14207: IFTRUE 14211
14209: GO 14236
14211: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14212: LD_STRING ACH_AH
14214: PPUSH
14215: LD_REAL  5.00000000000000E-0001
14218: PPUSH
14219: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14223: LD_STRING ACH_E
14225: PPUSH
14226: LD_REAL  5.00000000000000E-0001
14229: PPUSH
14230: CALL_OW 564
// end ; [ 2 , 3 ] :
14234: GO 14317
14236: LD_INT 2
14238: PUSH
14239: LD_INT 3
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: DOUBLE
14246: EQUAL
14247: IFTRUE 14251
14249: GO 14276
14251: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14252: LD_STRING ACH_OOL
14254: PPUSH
14255: LD_REAL  5.00000000000000E-0001
14258: PPUSH
14259: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14263: LD_STRING ACH_E
14265: PPUSH
14266: LD_REAL  5.00000000000000E-0001
14269: PPUSH
14270: CALL_OW 564
// end ; [ 3 , 1 ] :
14274: GO 14317
14276: LD_INT 3
14278: PUSH
14279: LD_INT 1
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: DOUBLE
14286: EQUAL
14287: IFTRUE 14291
14289: GO 14316
14291: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14292: LD_STRING ACH_AH
14294: PPUSH
14295: LD_REAL  5.00000000000000E-0001
14298: PPUSH
14299: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14303: LD_STRING ACH_OOL
14305: PPUSH
14306: LD_REAL  5.00000000000000E-0001
14309: PPUSH
14310: CALL_OW 564
// end ; end ;
14314: GO 14317
14316: POP
// end ; end_of_file
14317: LD_VAR 0 2
14321: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
14322: LD_INT 0
14324: PPUSH
14325: PPUSH
// enable ( 98 ) ;
14326: LD_INT 98
14328: ENABLE_MARKED
// GameEnded = false ;
14329: LD_ADDR_LOC 30
14333: PUSH
14334: LD_INT 0
14336: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14337: LD_ADDR_LOC 29
14341: PUSH
14342: LD_INT 0
14344: PUSH
14345: LD_INT 0
14347: PUSH
14348: LD_INT 0
14350: PUSH
14351: LD_INT 0
14353: PUSH
14354: LD_INT 0
14356: PUSH
14357: LD_INT 0
14359: PUSH
14360: LD_INT 0
14362: PUSH
14363: LD_INT 0
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: ST_TO_ADDR
// unfoged = false ;
14376: LD_ADDR_LOC 31
14380: PUSH
14381: LD_INT 0
14383: ST_TO_ADDR
// for i = 1 to side_positions do
14384: LD_ADDR_VAR 0 2
14388: PUSH
14389: DOUBLE
14390: LD_INT 1
14392: DEC
14393: ST_TO_ADDR
14394: LD_EXP 19
14398: PUSH
14399: FOR_TO
14400: IFFALSE 14440
// if not side_positions [ i ] then
14402: LD_EXP 19
14406: PUSH
14407: LD_VAR 0 2
14411: ARRAY
14412: NOT
14413: IFFALSE 14438
// defaited = replace ( defaited , i , true ) ;
14415: LD_ADDR_LOC 29
14419: PUSH
14420: LD_LOC 29
14424: PPUSH
14425: LD_VAR 0 2
14429: PPUSH
14430: LD_INT 1
14432: PPUSH
14433: CALL_OW 1
14437: ST_TO_ADDR
14438: GO 14399
14440: POP
14441: POP
// end ;
14442: LD_VAR 0 1
14446: RET
// function CanWinLoose ; begin
14447: LD_INT 0
14449: PPUSH
// Result := true ;
14450: LD_ADDR_VAR 0 1
14454: PUSH
14455: LD_INT 1
14457: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
14458: CALL_OW 518
14462: PUSH
14463: CALL_OW 519
14467: PUSH
14468: LD_INT 0
14470: GREATER
14471: AND
14472: IFFALSE 14482
// Result := false ;
14474: LD_ADDR_VAR 0 1
14478: PUSH
14479: LD_INT 0
14481: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14482: CALL_OW 531
14486: PUSH
14487: CALL_OW 519
14491: PUSH
14492: LD_INT 1
14494: GREATER
14495: AND
14496: IFFALSE 14506
// Result := false ;
14498: LD_ADDR_VAR 0 1
14502: PUSH
14503: LD_INT 0
14505: ST_TO_ADDR
// end ;
14506: LD_VAR 0 1
14510: RET
// export function HasPower ( i ) ; var k , h ; begin
14511: LD_INT 0
14513: PPUSH
14514: PPUSH
14515: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
14516: LD_VAR 0 1
14520: PPUSH
14521: CALL_OW 108
14525: NOT
14526: PUSH
14527: LD_EXP 22
14531: PUSH
14532: LD_VAR 0 1
14536: ARRAY
14537: NOT
14538: AND
14539: PUSH
14540: LD_OWVAR 4
14544: AND
14545: IFFALSE 14557
// begin result = false ;
14547: LD_ADDR_VAR 0 2
14551: PUSH
14552: LD_INT 0
14554: ST_TO_ADDR
// end else
14555: GO 14852
// case def_win_rules of 0 :
14557: LD_EXP 32
14561: PUSH
14562: LD_INT 0
14564: DOUBLE
14565: EQUAL
14566: IFTRUE 14570
14568: GO 14733
14570: POP
// if def_people_respawning then
14571: LD_EXP 54
14575: IFFALSE 14666
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
14577: LD_ADDR_VAR 0 2
14581: PUSH
14582: LD_INT 22
14584: PUSH
14585: LD_VAR 0 1
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 2
14596: PUSH
14597: LD_INT 21
14599: PUSH
14600: LD_INT 1
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 33
14609: PUSH
14610: LD_INT 3
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: PUSH
14617: LD_INT 33
14619: PUSH
14620: LD_INT 5
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: LD_INT 30
14629: PUSH
14630: LD_INT 0
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 30
14639: PUSH
14640: LD_INT 1
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: PPUSH
14659: CALL_OW 69
14663: ST_TO_ADDR
14664: GO 14731
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
14666: LD_ADDR_VAR 0 2
14670: PUSH
14671: LD_INT 22
14673: PUSH
14674: LD_VAR 0 1
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: LD_INT 2
14685: PUSH
14686: LD_INT 21
14688: PUSH
14689: LD_INT 1
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 33
14698: PUSH
14699: LD_INT 3
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 33
14708: PUSH
14709: LD_INT 5
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PPUSH
14726: CALL_OW 69
14730: ST_TO_ADDR
14731: GO 14852
14733: LD_INT 1
14735: DOUBLE
14736: EQUAL
14737: IFTRUE 14741
14739: GO 14780
14741: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
14742: LD_ADDR_VAR 0 2
14746: PUSH
14747: LD_INT 22
14749: PUSH
14750: LD_VAR 0 1
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 1
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PPUSH
14773: CALL_OW 69
14777: ST_TO_ADDR
14778: GO 14852
14780: LD_INT 2
14782: DOUBLE
14783: EQUAL
14784: IFTRUE 14788
14786: GO 14851
14788: POP
// begin h = false ;
14789: LD_ADDR_VAR 0 4
14793: PUSH
14794: LD_INT 0
14796: ST_TO_ADDR
// for k in heroes [ i ] do
14797: LD_ADDR_VAR 0 3
14801: PUSH
14802: LD_EXP 33
14806: PUSH
14807: LD_VAR 0 1
14811: ARRAY
14812: PUSH
14813: FOR_IN
14814: IFFALSE 14837
// if IsLive ( k ) then
14816: LD_VAR 0 3
14820: PPUSH
14821: CALL_OW 300
14825: IFFALSE 14835
// h = true ;
14827: LD_ADDR_VAR 0 4
14831: PUSH
14832: LD_INT 1
14834: ST_TO_ADDR
14835: GO 14813
14837: POP
14838: POP
// Result := h ;
14839: LD_ADDR_VAR 0 2
14843: PUSH
14844: LD_VAR 0 4
14848: ST_TO_ADDR
// end ; end ;
14849: GO 14852
14851: POP
// end ;
14852: LD_VAR 0 2
14856: RET
// function AlliedSides ( i , j ) ; begin
14857: LD_INT 0
14859: PPUSH
// Result := false ;
14860: LD_ADDR_VAR 0 3
14864: PUSH
14865: LD_INT 0
14867: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
14868: LD_VAR 0 1
14872: PPUSH
14873: LD_VAR 0 2
14877: PPUSH
14878: CALL_OW 81
14882: PUSH
14883: LD_INT 1
14885: EQUAL
14886: PUSH
14887: LD_VAR 0 2
14891: PPUSH
14892: LD_VAR 0 1
14896: PPUSH
14897: CALL_OW 81
14901: PUSH
14902: LD_INT 1
14904: EQUAL
14905: AND
14906: PUSH
14907: LD_VAR 0 1
14911: PPUSH
14912: CALL_OW 83
14916: AND
14917: PUSH
14918: LD_VAR 0 2
14922: PPUSH
14923: CALL_OW 83
14927: AND
14928: IFFALSE 14938
// Result := true ;
14930: LD_ADDR_VAR 0 3
14934: PUSH
14935: LD_INT 1
14937: ST_TO_ADDR
// end ;
14938: LD_VAR 0 3
14942: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
14943: CALL 14447 0 0
14947: PUSH
14948: LD_LOC 30
14952: NOT
14953: AND
14954: IFFALSE 14970
14956: GO 14958
14958: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
14959: LD_ADDR_EXP 60
14963: PUSH
14964: LD_STRING #Player-Ended
14966: PUSH
14967: EMPTY
14968: LIST
14969: ST_TO_ADDR
14970: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
14971: CALL 14447 0 0
14975: PUSH
14976: LD_LOC 30
14980: AND
14981: IFFALSE 14990
14983: GO 14985
14985: DISABLE
// YouLostInMultiplayer ;
14986: CALL_OW 107
14990: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
14991: CALL 14447 0 0
14995: NOT
14996: PUSH
14997: CALL_OW 531
15001: NOT
15002: AND
15003: IFFALSE 15019
15005: GO 15007
15007: DISABLE
// WaitServerStrings = [ #server-wait ] ;
15008: LD_ADDR_EXP 60
15012: PUSH
15013: LD_STRING #server-wait
15015: PUSH
15016: EMPTY
15017: LIST
15018: ST_TO_ADDR
15019: END
// every 100 trigger IAmSpec do
15020: CALL_OW 531
15024: IFFALSE 15040
15026: GO 15028
15028: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
15029: LD_ADDR_EXP 60
15033: PUSH
15034: LD_STRING #Player-IAmSpec
15036: PUSH
15037: EMPTY
15038: LIST
15039: ST_TO_ADDR
15040: END
// every 100 trigger GameEnded and IAmSpec do
15041: LD_LOC 30
15045: PUSH
15046: CALL_OW 531
15050: AND
15051: IFFALSE 15060
15053: GO 15055
15055: DISABLE
// YouLostInMultiplayer ;
15056: CALL_OW 107
15060: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
15061: CALL 14447 0 0
15065: PUSH
15066: LD_LOC 30
15070: NOT
15071: AND
15072: IFFALSE 15088
15074: GO 15076
15076: DISABLE
// WaitServerStrings = [ $player-win ] ;
15077: LD_ADDR_EXP 60
15081: PUSH
15082: LD_STRING $player-win
15084: PUSH
15085: EMPTY
15086: LIST
15087: ST_TO_ADDR
15088: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
15089: CALL 14447 0 0
15093: PUSH
15094: LD_LOC 30
15098: AND
15099: IFFALSE 15123
15101: GO 15103
15103: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
15104: LD_EXP 20
15108: PUSH
15109: LD_OWVAR 2
15113: ARRAY
15114: PPUSH
15115: CALL 14125 0 1
// YouWinInMultiplayer ;
15119: CALL_OW 106
// end ;
15123: END
// every 100 trigger isEditor marked 401 do
15124: LD_OWVAR 84
15128: IFFALSE 15144
15130: GO 15132
15132: DISABLE
// Debug_Strings = [ You won ] ;
15133: LD_ADDR_OWVAR 48
15137: PUSH
15138: LD_STRING You won
15140: PUSH
15141: EMPTY
15142: LIST
15143: ST_TO_ADDR
15144: END
// every 100 trigger isEditor marked 400 do
15145: LD_OWVAR 84
15149: IFFALSE 15165
15151: GO 15153
15153: DISABLE
// Debug_Strings = [ You loss ] ;
15154: LD_ADDR_OWVAR 48
15158: PUSH
15159: LD_STRING You loss
15161: PUSH
15162: EMPTY
15163: LIST
15164: ST_TO_ADDR
15165: END
// every 100 marked 98 do var i , un ;
15166: GO 15168
15168: DISABLE
15169: LD_INT 0
15171: PPUSH
15172: PPUSH
// begin for i = 1 to side_positions do
15173: LD_ADDR_VAR 0 1
15177: PUSH
15178: DOUBLE
15179: LD_INT 1
15181: DEC
15182: ST_TO_ADDR
15183: LD_EXP 19
15187: PUSH
15188: FOR_TO
15189: IFFALSE 15272
// if side_positions [ i ] then
15191: LD_EXP 19
15195: PUSH
15196: LD_VAR 0 1
15200: ARRAY
15201: IFFALSE 15270
// if not HasPower ( i ) and not Defaited [ i ] then
15203: LD_VAR 0 1
15207: PPUSH
15208: CALL 14511 0 1
15212: NOT
15213: PUSH
15214: LD_LOC 29
15218: PUSH
15219: LD_VAR 0 1
15223: ARRAY
15224: NOT
15225: AND
15226: IFFALSE 15270
// begin Defaited = replace ( Defaited , i , true ) ;
15228: LD_ADDR_LOC 29
15232: PUSH
15233: LD_LOC 29
15237: PPUSH
15238: LD_VAR 0 1
15242: PPUSH
15243: LD_INT 1
15245: PPUSH
15246: CALL_OW 1
15250: ST_TO_ADDR
// if i = your_side then
15251: LD_VAR 0 1
15255: PUSH
15256: LD_OWVAR 2
15260: EQUAL
15261: IFFALSE 15270
// begin Multiplayer_Loose_Message ;
15263: CALL_OW 521
// enable ( 400 ) ;
15267: LD_INT 400
15269: ENABLE_MARKED
// end ; end ;
15270: GO 15188
15272: POP
15273: POP
// if not Unfoged and defaited [ your_side ] then
15274: LD_LOC 31
15278: NOT
15279: PUSH
15280: LD_LOC 29
15284: PUSH
15285: LD_OWVAR 2
15289: ARRAY
15290: AND
15291: IFFALSE 15297
// Unfog ;
15293: CALL 15473 0 0
// DidGameEnd ;
15297: CALL 15312 0 0
// if not GameEnded then
15301: LD_LOC 30
15305: NOT
15306: IFFALSE 15309
// enable ;
15308: ENABLE
// end ;
15309: PPOPN 2
15311: END
// function DidGameEnd ; var i , k , enemy ; begin
15312: LD_INT 0
15314: PPUSH
15315: PPUSH
15316: PPUSH
15317: PPUSH
// enemy = [ ] ;
15318: LD_ADDR_VAR 0 4
15322: PUSH
15323: EMPTY
15324: ST_TO_ADDR
// for i = 1 to side_positions do
15325: LD_ADDR_VAR 0 2
15329: PUSH
15330: DOUBLE
15331: LD_INT 1
15333: DEC
15334: ST_TO_ADDR
15335: LD_EXP 19
15339: PUSH
15340: FOR_TO
15341: IFFALSE 15435
// if not defaited [ i ] then
15343: LD_LOC 29
15347: PUSH
15348: LD_VAR 0 2
15352: ARRAY
15353: NOT
15354: IFFALSE 15433
// for k = 1 to side_positions do
15356: LD_ADDR_VAR 0 3
15360: PUSH
15361: DOUBLE
15362: LD_INT 1
15364: DEC
15365: ST_TO_ADDR
15366: LD_EXP 19
15370: PUSH
15371: FOR_TO
15372: IFFALSE 15431
// if not defaited [ k ] then
15374: LD_LOC 29
15378: PUSH
15379: LD_VAR 0 3
15383: ARRAY
15384: NOT
15385: IFFALSE 15429
// if not AlliedSides ( i , k ) then
15387: LD_VAR 0 2
15391: PPUSH
15392: LD_VAR 0 3
15396: PPUSH
15397: CALL 14857 0 2
15401: NOT
15402: IFFALSE 15429
// enemy = enemy ^ [ i , k ] ;
15404: LD_ADDR_VAR 0 4
15408: PUSH
15409: LD_VAR 0 4
15413: PUSH
15414: LD_VAR 0 2
15418: PUSH
15419: LD_VAR 0 3
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: ADD
15428: ST_TO_ADDR
15429: GO 15371
15431: POP
15432: POP
15433: GO 15340
15435: POP
15436: POP
// if not enemy then
15437: LD_VAR 0 4
15441: NOT
15442: IFFALSE 15468
// begin GameEnded = true ;
15444: LD_ADDR_LOC 30
15448: PUSH
15449: LD_INT 1
15451: ST_TO_ADDR
// if not defaited [ your_side ] then
15452: LD_LOC 29
15456: PUSH
15457: LD_OWVAR 2
15461: ARRAY
15462: NOT
15463: IFFALSE 15468
// enable ( 401 ) ;
15465: LD_INT 401
15467: ENABLE_MARKED
// end ; end ;
15468: LD_VAR 0 1
15472: RET
// function unfog ; var k , friends ; begin
15473: LD_INT 0
15475: PPUSH
15476: PPUSH
15477: PPUSH
// SetPlayerSpectator ( ) ;
15478: CALL_OW 572
// unfoged = true ;
15482: LD_ADDR_LOC 31
15486: PUSH
15487: LD_INT 1
15489: ST_TO_ADDR
// end ;
15490: LD_VAR 0 1
15494: RET
// export function MakeGameEnd ; begin
15495: LD_INT 0
15497: PPUSH
// SetPlayerSpectator ( ) ;
15498: CALL_OW 572
// unfoged = true ;
15502: LD_ADDR_LOC 31
15506: PUSH
15507: LD_INT 1
15509: ST_TO_ADDR
// wait ( 0 0$5 ) ;
15510: LD_INT 175
15512: PPUSH
15513: CALL_OW 67
// GameEnded = true ;
15517: LD_ADDR_LOC 30
15521: PUSH
15522: LD_INT 1
15524: ST_TO_ADDR
// end ;
15525: LD_VAR 0 1
15529: RET
// export function GetGameEnded ; begin
15530: LD_INT 0
15532: PPUSH
// result = GameEnded ;
15533: LD_ADDR_VAR 0 1
15537: PUSH
15538: LD_LOC 30
15542: ST_TO_ADDR
// end ; end_of_file
15543: LD_VAR 0 1
15547: RET
// export function SetMpTechs ( ) ; var side , i ; begin
15548: LD_INT 0
15550: PPUSH
15551: PPUSH
15552: PPUSH
// for side = 1 to 8 do
15553: LD_ADDR_VAR 0 2
15557: PUSH
15558: DOUBLE
15559: LD_INT 1
15561: DEC
15562: ST_TO_ADDR
15563: LD_INT 8
15565: PUSH
15566: FOR_TO
15567: IFFALSE 15688
// begin for i = 1 to 72 do
15569: LD_ADDR_VAR 0 3
15573: PUSH
15574: DOUBLE
15575: LD_INT 1
15577: DEC
15578: ST_TO_ADDR
15579: LD_INT 72
15581: PUSH
15582: FOR_TO
15583: IFFALSE 15614
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15585: LD_VAR 0 3
15589: PPUSH
15590: LD_VAR 0 2
15594: PPUSH
15595: LD_INT 0
15597: PPUSH
15598: LD_VAR 0 3
15602: PPUSH
15603: CALL_OW 565
15607: PPUSH
15608: CALL_OW 322
15612: GO 15582
15614: POP
15615: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15616: LD_INT 73
15618: PPUSH
15619: LD_VAR 0 2
15623: PPUSH
15624: LD_INT 0
15626: PPUSH
15627: LD_INT 25
15629: PPUSH
15630: CALL_OW 565
15634: PPUSH
15635: CALL_OW 322
// for i = 0 to 40 do
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: DOUBLE
15645: LD_INT 0
15647: DEC
15648: ST_TO_ADDR
15649: LD_INT 40
15651: PUSH
15652: FOR_TO
15653: IFFALSE 15684
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15655: LD_VAR 0 3
15659: PPUSH
15660: LD_VAR 0 2
15664: PPUSH
15665: LD_INT 1
15667: PPUSH
15668: LD_VAR 0 3
15672: PPUSH
15673: CALL_OW 565
15677: PPUSH
15678: CALL_OW 324
15682: GO 15652
15684: POP
15685: POP
// end ;
15686: GO 15566
15688: POP
15689: POP
// end ;
15690: LD_VAR 0 1
15694: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15695: LD_INT 0
15697: PPUSH
15698: PPUSH
15699: PPUSH
// for side = 1 to 8 do
15700: LD_ADDR_VAR 0 3
15704: PUSH
15705: DOUBLE
15706: LD_INT 1
15708: DEC
15709: ST_TO_ADDR
15710: LD_INT 8
15712: PUSH
15713: FOR_TO
15714: IFFALSE 19710
// begin for i = 1 to 73 do
15716: LD_ADDR_VAR 0 4
15720: PUSH
15721: DOUBLE
15722: LD_INT 1
15724: DEC
15725: ST_TO_ADDR
15726: LD_INT 73
15728: PUSH
15729: FOR_TO
15730: IFFALSE 15751
// SetTech ( i , side , state_disabled ) ;
15732: LD_VAR 0 4
15736: PPUSH
15737: LD_VAR 0 3
15741: PPUSH
15742: LD_INT 0
15744: PPUSH
15745: CALL_OW 322
15749: GO 15729
15751: POP
15752: POP
// for i = 0 to 40 do
15753: LD_ADDR_VAR 0 4
15757: PUSH
15758: DOUBLE
15759: LD_INT 0
15761: DEC
15762: ST_TO_ADDR
15763: LD_INT 40
15765: PUSH
15766: FOR_TO
15767: IFFALSE 15788
// SetRestrict ( i , side , false ) ;
15769: LD_VAR 0 4
15773: PPUSH
15774: LD_VAR 0 3
15778: PPUSH
15779: LD_INT 0
15781: PPUSH
15782: CALL_OW 324
15786: GO 15766
15788: POP
15789: POP
// case level of 1 :
15790: LD_VAR 0 1
15794: PUSH
15795: LD_INT 1
15797: DOUBLE
15798: EQUAL
15799: IFTRUE 15803
15801: GO 15956
15803: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15804: LD_INT 35
15806: PPUSH
15807: LD_VAR 0 3
15811: PPUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15819: LD_INT 45
15821: PPUSH
15822: LD_VAR 0 3
15826: PPUSH
15827: LD_INT 1
15829: PPUSH
15830: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15834: LD_INT 46
15836: PPUSH
15837: LD_VAR 0 3
15841: PPUSH
15842: LD_INT 1
15844: PPUSH
15845: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15849: LD_INT 47
15851: PPUSH
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 1
15859: PPUSH
15860: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15864: LD_INT 0
15866: PPUSH
15867: LD_VAR 0 3
15871: PPUSH
15872: LD_INT 1
15874: PPUSH
15875: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15879: LD_INT 2
15881: PPUSH
15882: LD_VAR 0 3
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15894: LD_INT 4
15896: PPUSH
15897: LD_VAR 0 3
15901: PPUSH
15902: LD_INT 1
15904: PPUSH
15905: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15909: LD_INT 6
15911: PPUSH
15912: LD_VAR 0 3
15916: PPUSH
15917: LD_INT 1
15919: PPUSH
15920: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15924: LD_INT 29
15926: PPUSH
15927: LD_VAR 0 3
15931: PPUSH
15932: LD_INT 1
15934: PPUSH
15935: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15939: LD_INT 31
15941: PPUSH
15942: LD_VAR 0 3
15946: PPUSH
15947: LD_INT 1
15949: PPUSH
15950: CALL_OW 324
// end ; 2 :
15954: GO 19708
15956: LD_INT 2
15958: DOUBLE
15959: EQUAL
15960: IFTRUE 15964
15962: GO 16162
15964: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15965: LD_INT 35
15967: PPUSH
15968: LD_VAR 0 3
15972: PPUSH
15973: LD_INT 1
15975: PPUSH
15976: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15980: LD_INT 45
15982: PPUSH
15983: LD_VAR 0 3
15987: PPUSH
15988: LD_INT 1
15990: PPUSH
15991: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15995: LD_INT 46
15997: PPUSH
15998: LD_VAR 0 3
16002: PPUSH
16003: LD_INT 1
16005: PPUSH
16006: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16010: LD_INT 47
16012: PPUSH
16013: LD_VAR 0 3
16017: PPUSH
16018: LD_INT 1
16020: PPUSH
16021: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16025: LD_INT 1
16027: PPUSH
16028: LD_VAR 0 3
16032: PPUSH
16033: LD_INT 1
16035: PPUSH
16036: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16040: LD_INT 2
16042: PPUSH
16043: LD_VAR 0 3
16047: PPUSH
16048: LD_INT 1
16050: PPUSH
16051: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16055: LD_INT 11
16057: PPUSH
16058: LD_VAR 0 3
16062: PPUSH
16063: LD_INT 1
16065: PPUSH
16066: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16070: LD_INT 0
16072: PPUSH
16073: LD_VAR 0 3
16077: PPUSH
16078: LD_INT 1
16080: PPUSH
16081: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16085: LD_INT 2
16087: PPUSH
16088: LD_VAR 0 3
16092: PPUSH
16093: LD_INT 1
16095: PPUSH
16096: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16100: LD_INT 4
16102: PPUSH
16103: LD_VAR 0 3
16107: PPUSH
16108: LD_INT 1
16110: PPUSH
16111: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16115: LD_INT 6
16117: PPUSH
16118: LD_VAR 0 3
16122: PPUSH
16123: LD_INT 1
16125: PPUSH
16126: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16130: LD_INT 29
16132: PPUSH
16133: LD_VAR 0 3
16137: PPUSH
16138: LD_INT 1
16140: PPUSH
16141: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16145: LD_INT 31
16147: PPUSH
16148: LD_VAR 0 3
16152: PPUSH
16153: LD_INT 1
16155: PPUSH
16156: CALL_OW 324
// end ; 3 :
16160: GO 19708
16162: LD_INT 3
16164: DOUBLE
16165: EQUAL
16166: IFTRUE 16170
16168: GO 16623
16170: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16171: LD_INT 35
16173: PPUSH
16174: LD_VAR 0 3
16178: PPUSH
16179: LD_INT 1
16181: PPUSH
16182: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16186: LD_INT 45
16188: PPUSH
16189: LD_VAR 0 3
16193: PPUSH
16194: LD_INT 1
16196: PPUSH
16197: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16201: LD_INT 46
16203: PPUSH
16204: LD_VAR 0 3
16208: PPUSH
16209: LD_INT 1
16211: PPUSH
16212: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16216: LD_INT 47
16218: PPUSH
16219: LD_VAR 0 3
16223: PPUSH
16224: LD_INT 1
16226: PPUSH
16227: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16231: LD_INT 1
16233: PPUSH
16234: LD_VAR 0 3
16238: PPUSH
16239: LD_INT 1
16241: PPUSH
16242: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16246: LD_INT 2
16248: PPUSH
16249: LD_VAR 0 3
16253: PPUSH
16254: LD_INT 1
16256: PPUSH
16257: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16261: LD_INT 11
16263: PPUSH
16264: LD_VAR 0 3
16268: PPUSH
16269: LD_INT 1
16271: PPUSH
16272: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16276: LD_INT 48
16278: PPUSH
16279: LD_VAR 0 3
16283: PPUSH
16284: LD_INT 1
16286: PPUSH
16287: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16291: LD_INT 69
16293: PPUSH
16294: LD_VAR 0 3
16298: PPUSH
16299: LD_INT 1
16301: PPUSH
16302: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16306: LD_INT 39
16308: PPUSH
16309: LD_VAR 0 3
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16321: LD_INT 43
16323: PPUSH
16324: LD_VAR 0 3
16328: PPUSH
16329: LD_INT 1
16331: PPUSH
16332: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16336: LD_INT 51
16338: PPUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: LD_INT 1
16346: PPUSH
16347: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16351: LD_INT 6
16353: PPUSH
16354: LD_VAR 0 3
16358: PPUSH
16359: LD_INT 1
16361: PPUSH
16362: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16366: LD_INT 0
16368: PPUSH
16369: LD_VAR 0 3
16373: PPUSH
16374: LD_INT 1
16376: PPUSH
16377: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16381: LD_INT 2
16383: PPUSH
16384: LD_VAR 0 3
16388: PPUSH
16389: LD_INT 1
16391: PPUSH
16392: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16396: LD_INT 3
16398: PPUSH
16399: LD_VAR 0 3
16403: PPUSH
16404: LD_INT 1
16406: PPUSH
16407: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16411: LD_INT 4
16413: PPUSH
16414: LD_VAR 0 3
16418: PPUSH
16419: LD_INT 1
16421: PPUSH
16422: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16426: LD_INT 6
16428: PPUSH
16429: LD_VAR 0 3
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16441: LD_INT 7
16443: PPUSH
16444: LD_VAR 0 3
16448: PPUSH
16449: LD_INT 1
16451: PPUSH
16452: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16456: LD_INT 8
16458: PPUSH
16459: LD_VAR 0 3
16463: PPUSH
16464: LD_INT 1
16466: PPUSH
16467: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16471: LD_INT 10
16473: PPUSH
16474: LD_VAR 0 3
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16486: LD_INT 15
16488: PPUSH
16489: LD_VAR 0 3
16493: PPUSH
16494: LD_INT 1
16496: PPUSH
16497: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16501: LD_INT 16
16503: PPUSH
16504: LD_VAR 0 3
16508: PPUSH
16509: LD_INT 1
16511: PPUSH
16512: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16516: LD_INT 17
16518: PPUSH
16519: LD_VAR 0 3
16523: PPUSH
16524: LD_INT 1
16526: PPUSH
16527: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16531: LD_INT 20
16533: PPUSH
16534: LD_VAR 0 3
16538: PPUSH
16539: LD_INT 1
16541: PPUSH
16542: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16546: LD_INT 26
16548: PPUSH
16549: LD_VAR 0 3
16553: PPUSH
16554: LD_INT 1
16556: PPUSH
16557: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16561: LD_INT 27
16563: PPUSH
16564: LD_VAR 0 3
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16576: LD_INT 29
16578: PPUSH
16579: LD_VAR 0 3
16583: PPUSH
16584: LD_INT 1
16586: PPUSH
16587: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16591: LD_INT 31
16593: PPUSH
16594: LD_VAR 0 3
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16606: LD_INT 32
16608: PPUSH
16609: LD_VAR 0 3
16613: PPUSH
16614: LD_INT 1
16616: PPUSH
16617: CALL_OW 324
// end ; 4 :
16621: GO 19708
16623: LD_INT 4
16625: DOUBLE
16626: EQUAL
16627: IFTRUE 16631
16629: GO 17579
16631: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16632: LD_INT 35
16634: PPUSH
16635: LD_VAR 0 3
16639: PPUSH
16640: LD_INT 1
16642: PPUSH
16643: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16647: LD_INT 45
16649: PPUSH
16650: LD_VAR 0 3
16654: PPUSH
16655: LD_INT 1
16657: PPUSH
16658: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16662: LD_INT 46
16664: PPUSH
16665: LD_VAR 0 3
16669: PPUSH
16670: LD_INT 1
16672: PPUSH
16673: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16677: LD_INT 47
16679: PPUSH
16680: LD_VAR 0 3
16684: PPUSH
16685: LD_INT 1
16687: PPUSH
16688: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16692: LD_INT 1
16694: PPUSH
16695: LD_VAR 0 3
16699: PPUSH
16700: LD_INT 1
16702: PPUSH
16703: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16707: LD_INT 2
16709: PPUSH
16710: LD_VAR 0 3
16714: PPUSH
16715: LD_INT 1
16717: PPUSH
16718: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16722: LD_INT 11
16724: PPUSH
16725: LD_VAR 0 3
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16737: LD_INT 20
16739: PPUSH
16740: LD_VAR 0 3
16744: PPUSH
16745: LD_INT 1
16747: PPUSH
16748: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16752: LD_INT 48
16754: PPUSH
16755: LD_VAR 0 3
16759: PPUSH
16760: LD_INT 1
16762: PPUSH
16763: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16767: LD_INT 49
16769: PPUSH
16770: LD_VAR 0 3
16774: PPUSH
16775: LD_INT 1
16777: PPUSH
16778: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16782: LD_INT 69
16784: PPUSH
16785: LD_VAR 0 3
16789: PPUSH
16790: LD_INT 1
16792: PPUSH
16793: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16797: LD_INT 39
16799: PPUSH
16800: LD_VAR 0 3
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16812: LD_INT 34
16814: PPUSH
16815: LD_VAR 0 3
16819: PPUSH
16820: LD_INT 1
16822: PPUSH
16823: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16827: LD_INT 42
16829: PPUSH
16830: LD_VAR 0 3
16834: PPUSH
16835: LD_INT 1
16837: PPUSH
16838: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16842: LD_INT 44
16844: PPUSH
16845: LD_VAR 0 3
16849: PPUSH
16850: LD_INT 1
16852: PPUSH
16853: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16857: LD_INT 41
16859: PPUSH
16860: LD_VAR 0 3
16864: PPUSH
16865: LD_INT 1
16867: PPUSH
16868: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16872: LD_INT 43
16874: PPUSH
16875: LD_VAR 0 3
16879: PPUSH
16880: LD_INT 1
16882: PPUSH
16883: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16887: LD_INT 70
16889: PPUSH
16890: LD_VAR 0 3
16894: PPUSH
16895: LD_INT 1
16897: PPUSH
16898: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16902: LD_INT 51
16904: PPUSH
16905: LD_VAR 0 3
16909: PPUSH
16910: LD_INT 1
16912: PPUSH
16913: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16917: LD_INT 52
16919: PPUSH
16920: LD_VAR 0 3
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16932: LD_INT 6
16934: PPUSH
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 1
16942: PPUSH
16943: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16947: LD_INT 15
16949: PPUSH
16950: LD_VAR 0 3
16954: PPUSH
16955: LD_INT 1
16957: PPUSH
16958: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16962: LD_INT 7
16964: PPUSH
16965: LD_VAR 0 3
16969: PPUSH
16970: LD_INT 1
16972: PPUSH
16973: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16977: LD_INT 12
16979: PPUSH
16980: LD_VAR 0 3
16984: PPUSH
16985: LD_INT 1
16987: PPUSH
16988: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16992: LD_INT 18
16994: PPUSH
16995: LD_VAR 0 3
16999: PPUSH
17000: LD_INT 1
17002: PPUSH
17003: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17007: LD_INT 60
17009: PPUSH
17010: LD_VAR 0 3
17014: PPUSH
17015: LD_INT 1
17017: PPUSH
17018: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17022: LD_INT 9
17024: PPUSH
17025: LD_VAR 0 3
17029: PPUSH
17030: LD_INT 1
17032: PPUSH
17033: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17037: LD_INT 30
17039: PPUSH
17040: LD_VAR 0 3
17044: PPUSH
17045: LD_INT 1
17047: PPUSH
17048: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17052: LD_INT 37
17054: PPUSH
17055: LD_VAR 0 3
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17067: LD_INT 5
17069: PPUSH
17070: LD_VAR 0 3
17074: PPUSH
17075: LD_INT 1
17077: PPUSH
17078: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17082: LD_INT 66
17084: PPUSH
17085: LD_VAR 0 3
17089: PPUSH
17090: LD_INT 1
17092: PPUSH
17093: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17097: LD_INT 21
17099: PPUSH
17100: LD_VAR 0 3
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17112: LD_INT 22
17114: PPUSH
17115: LD_VAR 0 3
17119: PPUSH
17120: LD_INT 1
17122: PPUSH
17123: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17127: LD_INT 54
17129: PPUSH
17130: LD_VAR 0 3
17134: PPUSH
17135: LD_INT 1
17137: PPUSH
17138: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17142: LD_INT 0
17144: PPUSH
17145: LD_VAR 0 3
17149: PPUSH
17150: LD_INT 1
17152: PPUSH
17153: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17157: LD_INT 1
17159: PPUSH
17160: LD_VAR 0 3
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17172: LD_INT 2
17174: PPUSH
17175: LD_VAR 0 3
17179: PPUSH
17180: LD_INT 1
17182: PPUSH
17183: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17187: LD_INT 3
17189: PPUSH
17190: LD_VAR 0 3
17194: PPUSH
17195: LD_INT 1
17197: PPUSH
17198: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17202: LD_INT 4
17204: PPUSH
17205: LD_VAR 0 3
17209: PPUSH
17210: LD_INT 1
17212: PPUSH
17213: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17217: LD_INT 5
17219: PPUSH
17220: LD_VAR 0 3
17224: PPUSH
17225: LD_INT 1
17227: PPUSH
17228: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17232: LD_INT 6
17234: PPUSH
17235: LD_VAR 0 3
17239: PPUSH
17240: LD_INT 1
17242: PPUSH
17243: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17247: LD_INT 7
17249: PPUSH
17250: LD_VAR 0 3
17254: PPUSH
17255: LD_INT 1
17257: PPUSH
17258: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17262: LD_INT 8
17264: PPUSH
17265: LD_VAR 0 3
17269: PPUSH
17270: LD_INT 1
17272: PPUSH
17273: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17277: LD_INT 10
17279: PPUSH
17280: LD_VAR 0 3
17284: PPUSH
17285: LD_INT 1
17287: PPUSH
17288: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17292: LD_INT 11
17294: PPUSH
17295: LD_VAR 0 3
17299: PPUSH
17300: LD_INT 1
17302: PPUSH
17303: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17307: LD_INT 12
17309: PPUSH
17310: LD_VAR 0 3
17314: PPUSH
17315: LD_INT 1
17317: PPUSH
17318: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17322: LD_INT 13
17324: PPUSH
17325: LD_VAR 0 3
17329: PPUSH
17330: LD_INT 1
17332: PPUSH
17333: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17337: LD_INT 14
17339: PPUSH
17340: LD_VAR 0 3
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17352: LD_INT 15
17354: PPUSH
17355: LD_VAR 0 3
17359: PPUSH
17360: LD_INT 1
17362: PPUSH
17363: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17367: LD_INT 16
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: LD_INT 1
17377: PPUSH
17378: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17382: LD_INT 17
17384: PPUSH
17385: LD_VAR 0 3
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17397: LD_INT 19
17399: PPUSH
17400: LD_VAR 0 3
17404: PPUSH
17405: LD_INT 1
17407: PPUSH
17408: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17412: LD_INT 20
17414: PPUSH
17415: LD_VAR 0 3
17419: PPUSH
17420: LD_INT 1
17422: PPUSH
17423: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17427: LD_INT 21
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_INT 1
17437: PPUSH
17438: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17442: LD_INT 23
17444: PPUSH
17445: LD_VAR 0 3
17449: PPUSH
17450: LD_INT 1
17452: PPUSH
17453: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17457: LD_INT 26
17459: PPUSH
17460: LD_VAR 0 3
17464: PPUSH
17465: LD_INT 1
17467: PPUSH
17468: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17472: LD_INT 27
17474: PPUSH
17475: LD_VAR 0 3
17479: PPUSH
17480: LD_INT 1
17482: PPUSH
17483: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17487: LD_INT 28
17489: PPUSH
17490: LD_VAR 0 3
17494: PPUSH
17495: LD_INT 1
17497: PPUSH
17498: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17502: LD_INT 29
17504: PPUSH
17505: LD_VAR 0 3
17509: PPUSH
17510: LD_INT 1
17512: PPUSH
17513: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17517: LD_INT 30
17519: PPUSH
17520: LD_VAR 0 3
17524: PPUSH
17525: LD_INT 1
17527: PPUSH
17528: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17532: LD_INT 31
17534: PPUSH
17535: LD_VAR 0 3
17539: PPUSH
17540: LD_INT 1
17542: PPUSH
17543: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17547: LD_INT 32
17549: PPUSH
17550: LD_VAR 0 3
17554: PPUSH
17555: LD_INT 1
17557: PPUSH
17558: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17562: LD_INT 36
17564: PPUSH
17565: LD_VAR 0 3
17569: PPUSH
17570: LD_INT 1
17572: PPUSH
17573: CALL_OW 324
// end ; 5 :
17577: GO 19708
17579: LD_INT 5
17581: DOUBLE
17582: EQUAL
17583: IFTRUE 17587
17585: GO 18700
17587: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17588: LD_INT 35
17590: PPUSH
17591: LD_VAR 0 3
17595: PPUSH
17596: LD_INT 1
17598: PPUSH
17599: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17603: LD_INT 45
17605: PPUSH
17606: LD_VAR 0 3
17610: PPUSH
17611: LD_INT 1
17613: PPUSH
17614: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17618: LD_INT 46
17620: PPUSH
17621: LD_VAR 0 3
17625: PPUSH
17626: LD_INT 1
17628: PPUSH
17629: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17633: LD_INT 47
17635: PPUSH
17636: LD_VAR 0 3
17640: PPUSH
17641: LD_INT 1
17643: PPUSH
17644: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17648: LD_INT 1
17650: PPUSH
17651: LD_VAR 0 3
17655: PPUSH
17656: LD_INT 1
17658: PPUSH
17659: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17663: LD_INT 2
17665: PPUSH
17666: LD_VAR 0 3
17670: PPUSH
17671: LD_INT 1
17673: PPUSH
17674: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17678: LD_INT 11
17680: PPUSH
17681: LD_VAR 0 3
17685: PPUSH
17686: LD_INT 1
17688: PPUSH
17689: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17693: LD_INT 20
17695: PPUSH
17696: LD_VAR 0 3
17700: PPUSH
17701: LD_INT 1
17703: PPUSH
17704: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17708: LD_INT 48
17710: PPUSH
17711: LD_VAR 0 3
17715: PPUSH
17716: LD_INT 1
17718: PPUSH
17719: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17723: LD_INT 49
17725: PPUSH
17726: LD_VAR 0 3
17730: PPUSH
17731: LD_INT 1
17733: PPUSH
17734: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17738: LD_INT 69
17740: PPUSH
17741: LD_VAR 0 3
17745: PPUSH
17746: LD_INT 1
17748: PPUSH
17749: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17753: LD_INT 39
17755: PPUSH
17756: LD_VAR 0 3
17760: PPUSH
17761: LD_INT 1
17763: PPUSH
17764: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17768: LD_INT 34
17770: PPUSH
17771: LD_VAR 0 3
17775: PPUSH
17776: LD_INT 1
17778: PPUSH
17779: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17783: LD_INT 42
17785: PPUSH
17786: LD_VAR 0 3
17790: PPUSH
17791: LD_INT 1
17793: PPUSH
17794: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17798: LD_INT 44
17800: PPUSH
17801: LD_VAR 0 3
17805: PPUSH
17806: LD_INT 1
17808: PPUSH
17809: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17813: LD_INT 41
17815: PPUSH
17816: LD_VAR 0 3
17820: PPUSH
17821: LD_INT 1
17823: PPUSH
17824: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17828: LD_INT 40
17830: PPUSH
17831: LD_VAR 0 3
17835: PPUSH
17836: LD_INT 1
17838: PPUSH
17839: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17843: LD_INT 43
17845: PPUSH
17846: LD_VAR 0 3
17850: PPUSH
17851: LD_INT 1
17853: PPUSH
17854: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17858: LD_INT 70
17860: PPUSH
17861: LD_VAR 0 3
17865: PPUSH
17866: LD_INT 1
17868: PPUSH
17869: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17873: LD_INT 51
17875: PPUSH
17876: LD_VAR 0 3
17880: PPUSH
17881: LD_INT 1
17883: PPUSH
17884: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17888: LD_INT 52
17890: PPUSH
17891: LD_VAR 0 3
17895: PPUSH
17896: LD_INT 1
17898: PPUSH
17899: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17903: LD_INT 6
17905: PPUSH
17906: LD_VAR 0 3
17910: PPUSH
17911: LD_INT 1
17913: PPUSH
17914: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17918: LD_INT 15
17920: PPUSH
17921: LD_VAR 0 3
17925: PPUSH
17926: LD_INT 1
17928: PPUSH
17929: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17933: LD_INT 7
17935: PPUSH
17936: LD_VAR 0 3
17940: PPUSH
17941: LD_INT 1
17943: PPUSH
17944: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17948: LD_INT 12
17950: PPUSH
17951: LD_VAR 0 3
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17963: LD_INT 17
17965: PPUSH
17966: LD_VAR 0 3
17970: PPUSH
17971: LD_INT 1
17973: PPUSH
17974: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17978: LD_INT 18
17980: PPUSH
17981: LD_VAR 0 3
17985: PPUSH
17986: LD_INT 1
17988: PPUSH
17989: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17993: LD_INT 60
17995: PPUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: LD_INT 1
18003: PPUSH
18004: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18008: LD_INT 32
18010: PPUSH
18011: LD_VAR 0 3
18015: PPUSH
18016: LD_INT 1
18018: PPUSH
18019: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18023: LD_INT 9
18025: PPUSH
18026: LD_VAR 0 3
18030: PPUSH
18031: LD_INT 1
18033: PPUSH
18034: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18038: LD_INT 57
18040: PPUSH
18041: LD_VAR 0 3
18045: PPUSH
18046: LD_INT 1
18048: PPUSH
18049: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18053: LD_INT 30
18055: PPUSH
18056: LD_VAR 0 3
18060: PPUSH
18061: LD_INT 1
18063: PPUSH
18064: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18068: LD_INT 37
18070: PPUSH
18071: LD_VAR 0 3
18075: PPUSH
18076: LD_INT 1
18078: PPUSH
18079: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18083: LD_INT 63
18085: PPUSH
18086: LD_VAR 0 3
18090: PPUSH
18091: LD_INT 1
18093: PPUSH
18094: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18098: LD_INT 3
18100: PPUSH
18101: LD_VAR 0 3
18105: PPUSH
18106: LD_INT 1
18108: PPUSH
18109: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18113: LD_INT 4
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: LD_INT 1
18123: PPUSH
18124: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18128: LD_INT 5
18130: PPUSH
18131: LD_VAR 0 3
18135: PPUSH
18136: LD_INT 1
18138: PPUSH
18139: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18143: LD_INT 66
18145: PPUSH
18146: LD_VAR 0 3
18150: PPUSH
18151: LD_INT 1
18153: PPUSH
18154: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18158: LD_INT 21
18160: PPUSH
18161: LD_VAR 0 3
18165: PPUSH
18166: LD_INT 1
18168: PPUSH
18169: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18173: LD_INT 22
18175: PPUSH
18176: LD_VAR 0 3
18180: PPUSH
18181: LD_INT 1
18183: PPUSH
18184: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18188: LD_INT 19
18190: PPUSH
18191: LD_VAR 0 3
18195: PPUSH
18196: LD_INT 1
18198: PPUSH
18199: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18203: LD_INT 54
18205: PPUSH
18206: LD_VAR 0 3
18210: PPUSH
18211: LD_INT 1
18213: PPUSH
18214: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18218: LD_INT 55
18220: PPUSH
18221: LD_VAR 0 3
18225: PPUSH
18226: LD_INT 1
18228: PPUSH
18229: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18233: LD_INT 0
18235: PPUSH
18236: LD_VAR 0 3
18240: PPUSH
18241: LD_INT 1
18243: PPUSH
18244: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18248: LD_INT 1
18250: PPUSH
18251: LD_VAR 0 3
18255: PPUSH
18256: LD_INT 1
18258: PPUSH
18259: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18263: LD_INT 2
18265: PPUSH
18266: LD_VAR 0 3
18270: PPUSH
18271: LD_INT 1
18273: PPUSH
18274: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18278: LD_INT 3
18280: PPUSH
18281: LD_VAR 0 3
18285: PPUSH
18286: LD_INT 1
18288: PPUSH
18289: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18293: LD_INT 4
18295: PPUSH
18296: LD_VAR 0 3
18300: PPUSH
18301: LD_INT 1
18303: PPUSH
18304: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18308: LD_INT 5
18310: PPUSH
18311: LD_VAR 0 3
18315: PPUSH
18316: LD_INT 1
18318: PPUSH
18319: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18323: LD_INT 6
18325: PPUSH
18326: LD_VAR 0 3
18330: PPUSH
18331: LD_INT 1
18333: PPUSH
18334: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18338: LD_INT 7
18340: PPUSH
18341: LD_VAR 0 3
18345: PPUSH
18346: LD_INT 1
18348: PPUSH
18349: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18353: LD_INT 8
18355: PPUSH
18356: LD_VAR 0 3
18360: PPUSH
18361: LD_INT 1
18363: PPUSH
18364: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18368: LD_INT 10
18370: PPUSH
18371: LD_VAR 0 3
18375: PPUSH
18376: LD_INT 1
18378: PPUSH
18379: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18383: LD_INT 11
18385: PPUSH
18386: LD_VAR 0 3
18390: PPUSH
18391: LD_INT 1
18393: PPUSH
18394: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18398: LD_INT 12
18400: PPUSH
18401: LD_VAR 0 3
18405: PPUSH
18406: LD_INT 1
18408: PPUSH
18409: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18413: LD_INT 13
18415: PPUSH
18416: LD_VAR 0 3
18420: PPUSH
18421: LD_INT 1
18423: PPUSH
18424: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18428: LD_INT 14
18430: PPUSH
18431: LD_VAR 0 3
18435: PPUSH
18436: LD_INT 1
18438: PPUSH
18439: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18443: LD_INT 15
18445: PPUSH
18446: LD_VAR 0 3
18450: PPUSH
18451: LD_INT 1
18453: PPUSH
18454: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18458: LD_INT 16
18460: PPUSH
18461: LD_VAR 0 3
18465: PPUSH
18466: LD_INT 1
18468: PPUSH
18469: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18473: LD_INT 17
18475: PPUSH
18476: LD_VAR 0 3
18480: PPUSH
18481: LD_INT 1
18483: PPUSH
18484: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18488: LD_INT 18
18490: PPUSH
18491: LD_VAR 0 3
18495: PPUSH
18496: LD_INT 1
18498: PPUSH
18499: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18503: LD_INT 19
18505: PPUSH
18506: LD_VAR 0 3
18510: PPUSH
18511: LD_INT 1
18513: PPUSH
18514: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18518: LD_INT 20
18520: PPUSH
18521: LD_VAR 0 3
18525: PPUSH
18526: LD_INT 1
18528: PPUSH
18529: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18533: LD_INT 21
18535: PPUSH
18536: LD_VAR 0 3
18540: PPUSH
18541: LD_INT 1
18543: PPUSH
18544: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18548: LD_INT 23
18550: PPUSH
18551: LD_VAR 0 3
18555: PPUSH
18556: LD_INT 1
18558: PPUSH
18559: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18563: LD_INT 26
18565: PPUSH
18566: LD_VAR 0 3
18570: PPUSH
18571: LD_INT 1
18573: PPUSH
18574: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18578: LD_INT 27
18580: PPUSH
18581: LD_VAR 0 3
18585: PPUSH
18586: LD_INT 1
18588: PPUSH
18589: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18593: LD_INT 28
18595: PPUSH
18596: LD_VAR 0 3
18600: PPUSH
18601: LD_INT 1
18603: PPUSH
18604: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18608: LD_INT 29
18610: PPUSH
18611: LD_VAR 0 3
18615: PPUSH
18616: LD_INT 1
18618: PPUSH
18619: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18623: LD_INT 30
18625: PPUSH
18626: LD_VAR 0 3
18630: PPUSH
18631: LD_INT 1
18633: PPUSH
18634: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18638: LD_INT 31
18640: PPUSH
18641: LD_VAR 0 3
18645: PPUSH
18646: LD_INT 1
18648: PPUSH
18649: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18653: LD_INT 32
18655: PPUSH
18656: LD_VAR 0 3
18660: PPUSH
18661: LD_INT 1
18663: PPUSH
18664: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18668: LD_INT 33
18670: PPUSH
18671: LD_VAR 0 3
18675: PPUSH
18676: LD_INT 1
18678: PPUSH
18679: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18683: LD_INT 36
18685: PPUSH
18686: LD_VAR 0 3
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL_OW 324
// end ; 6 :
18698: GO 19708
18700: LD_INT 6
18702: DOUBLE
18703: EQUAL
18704: IFTRUE 18708
18706: GO 19633
18708: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18709: LD_INT 35
18711: PPUSH
18712: LD_VAR 0 3
18716: PPUSH
18717: LD_INT 1
18719: PPUSH
18720: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18724: LD_INT 45
18726: PPUSH
18727: LD_VAR 0 3
18731: PPUSH
18732: LD_INT 1
18734: PPUSH
18735: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18739: LD_INT 46
18741: PPUSH
18742: LD_VAR 0 3
18746: PPUSH
18747: LD_INT 1
18749: PPUSH
18750: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18754: LD_INT 47
18756: PPUSH
18757: LD_VAR 0 3
18761: PPUSH
18762: LD_INT 1
18764: PPUSH
18765: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18769: LD_INT 1
18771: PPUSH
18772: LD_VAR 0 3
18776: PPUSH
18777: LD_INT 1
18779: PPUSH
18780: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18784: LD_INT 2
18786: PPUSH
18787: LD_VAR 0 3
18791: PPUSH
18792: LD_INT 1
18794: PPUSH
18795: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18799: LD_INT 11
18801: PPUSH
18802: LD_VAR 0 3
18806: PPUSH
18807: LD_INT 1
18809: PPUSH
18810: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18814: LD_INT 20
18816: PPUSH
18817: LD_VAR 0 3
18821: PPUSH
18822: LD_INT 1
18824: PPUSH
18825: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18829: LD_INT 48
18831: PPUSH
18832: LD_VAR 0 3
18836: PPUSH
18837: LD_INT 1
18839: PPUSH
18840: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18844: LD_INT 49
18846: PPUSH
18847: LD_VAR 0 3
18851: PPUSH
18852: LD_INT 1
18854: PPUSH
18855: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18859: LD_INT 50
18861: PPUSH
18862: LD_VAR 0 3
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18874: LD_INT 69
18876: PPUSH
18877: LD_VAR 0 3
18881: PPUSH
18882: LD_INT 1
18884: PPUSH
18885: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18889: LD_INT 39
18891: PPUSH
18892: LD_VAR 0 3
18896: PPUSH
18897: LD_INT 1
18899: PPUSH
18900: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18904: LD_INT 34
18906: PPUSH
18907: LD_VAR 0 3
18911: PPUSH
18912: LD_INT 1
18914: PPUSH
18915: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18919: LD_INT 42
18921: PPUSH
18922: LD_VAR 0 3
18926: PPUSH
18927: LD_INT 1
18929: PPUSH
18930: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18934: LD_INT 44
18936: PPUSH
18937: LD_VAR 0 3
18941: PPUSH
18942: LD_INT 1
18944: PPUSH
18945: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18949: LD_INT 41
18951: PPUSH
18952: LD_VAR 0 3
18956: PPUSH
18957: LD_INT 1
18959: PPUSH
18960: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18964: LD_INT 13
18966: PPUSH
18967: LD_VAR 0 3
18971: PPUSH
18972: LD_INT 1
18974: PPUSH
18975: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18979: LD_INT 40
18981: PPUSH
18982: LD_VAR 0 3
18986: PPUSH
18987: LD_INT 1
18989: PPUSH
18990: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18994: LD_INT 43
18996: PPUSH
18997: LD_VAR 0 3
19001: PPUSH
19002: LD_INT 1
19004: PPUSH
19005: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19009: LD_INT 70
19011: PPUSH
19012: LD_VAR 0 3
19016: PPUSH
19017: LD_INT 1
19019: PPUSH
19020: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
19024: LD_INT 23
19026: PPUSH
19027: LD_VAR 0 3
19031: PPUSH
19032: LD_INT 1
19034: PPUSH
19035: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19039: LD_INT 51
19041: PPUSH
19042: LD_VAR 0 3
19046: PPUSH
19047: LD_INT 1
19049: PPUSH
19050: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19054: LD_INT 52
19056: PPUSH
19057: LD_VAR 0 3
19061: PPUSH
19062: LD_INT 1
19064: PPUSH
19065: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19069: LD_INT 6
19071: PPUSH
19072: LD_VAR 0 3
19076: PPUSH
19077: LD_INT 1
19079: PPUSH
19080: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19084: LD_INT 15
19086: PPUSH
19087: LD_VAR 0 3
19091: PPUSH
19092: LD_INT 1
19094: PPUSH
19095: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19099: LD_INT 7
19101: PPUSH
19102: LD_VAR 0 3
19106: PPUSH
19107: LD_INT 1
19109: PPUSH
19110: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19114: LD_INT 12
19116: PPUSH
19117: LD_VAR 0 3
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19129: LD_INT 10
19131: PPUSH
19132: LD_VAR 0 3
19136: PPUSH
19137: LD_INT 1
19139: PPUSH
19140: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19144: LD_INT 17
19146: PPUSH
19147: LD_VAR 0 3
19151: PPUSH
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19159: LD_INT 18
19161: PPUSH
19162: LD_VAR 0 3
19166: PPUSH
19167: LD_INT 1
19169: PPUSH
19170: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19174: LD_INT 60
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: LD_INT 1
19184: PPUSH
19185: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19189: LD_INT 61
19191: PPUSH
19192: LD_VAR 0 3
19196: PPUSH
19197: LD_INT 1
19199: PPUSH
19200: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19204: LD_INT 32
19206: PPUSH
19207: LD_VAR 0 3
19211: PPUSH
19212: LD_INT 1
19214: PPUSH
19215: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19219: LD_INT 27
19221: PPUSH
19222: LD_VAR 0 3
19226: PPUSH
19227: LD_INT 1
19229: PPUSH
19230: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19234: LD_INT 36
19236: PPUSH
19237: LD_VAR 0 3
19241: PPUSH
19242: LD_INT 1
19244: PPUSH
19245: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19249: LD_INT 33
19251: PPUSH
19252: LD_VAR 0 3
19256: PPUSH
19257: LD_INT 1
19259: PPUSH
19260: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19264: LD_INT 9
19266: PPUSH
19267: LD_VAR 0 3
19271: PPUSH
19272: LD_INT 1
19274: PPUSH
19275: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19279: LD_INT 38
19281: PPUSH
19282: LD_VAR 0 3
19286: PPUSH
19287: LD_INT 1
19289: PPUSH
19290: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19294: LD_INT 57
19296: PPUSH
19297: LD_VAR 0 3
19301: PPUSH
19302: LD_INT 1
19304: PPUSH
19305: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19309: LD_INT 58
19311: PPUSH
19312: LD_VAR 0 3
19316: PPUSH
19317: LD_INT 1
19319: PPUSH
19320: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19324: LD_INT 28
19326: PPUSH
19327: LD_VAR 0 3
19331: PPUSH
19332: LD_INT 1
19334: PPUSH
19335: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19339: LD_INT 29
19341: PPUSH
19342: LD_VAR 0 3
19346: PPUSH
19347: LD_INT 1
19349: PPUSH
19350: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19354: LD_INT 30
19356: PPUSH
19357: LD_VAR 0 3
19361: PPUSH
19362: LD_INT 1
19364: PPUSH
19365: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19369: LD_INT 37
19371: PPUSH
19372: LD_VAR 0 3
19376: PPUSH
19377: LD_INT 1
19379: PPUSH
19380: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19384: LD_INT 63
19386: PPUSH
19387: LD_VAR 0 3
19391: PPUSH
19392: LD_INT 1
19394: PPUSH
19395: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19399: LD_INT 64
19401: PPUSH
19402: LD_VAR 0 3
19406: PPUSH
19407: LD_INT 1
19409: PPUSH
19410: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19414: LD_INT 3
19416: PPUSH
19417: LD_VAR 0 3
19421: PPUSH
19422: LD_INT 1
19424: PPUSH
19425: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19429: LD_INT 4
19431: PPUSH
19432: LD_VAR 0 3
19436: PPUSH
19437: LD_INT 1
19439: PPUSH
19440: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19444: LD_INT 5
19446: PPUSH
19447: LD_VAR 0 3
19451: PPUSH
19452: LD_INT 1
19454: PPUSH
19455: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19459: LD_INT 8
19461: PPUSH
19462: LD_VAR 0 3
19466: PPUSH
19467: LD_INT 1
19469: PPUSH
19470: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19474: LD_INT 66
19476: PPUSH
19477: LD_VAR 0 3
19481: PPUSH
19482: LD_INT 1
19484: PPUSH
19485: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19489: LD_INT 67
19491: PPUSH
19492: LD_VAR 0 3
19496: PPUSH
19497: LD_INT 1
19499: PPUSH
19500: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19504: LD_INT 21
19506: PPUSH
19507: LD_VAR 0 3
19511: PPUSH
19512: LD_INT 1
19514: PPUSH
19515: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19519: LD_INT 22
19521: PPUSH
19522: LD_VAR 0 3
19526: PPUSH
19527: LD_INT 1
19529: PPUSH
19530: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19534: LD_INT 19
19536: PPUSH
19537: LD_VAR 0 3
19541: PPUSH
19542: LD_INT 1
19544: PPUSH
19545: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19549: LD_INT 26
19551: PPUSH
19552: LD_VAR 0 3
19556: PPUSH
19557: LD_INT 1
19559: PPUSH
19560: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19564: LD_INT 54
19566: PPUSH
19567: LD_VAR 0 3
19571: PPUSH
19572: LD_INT 1
19574: PPUSH
19575: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19579: LD_INT 55
19581: PPUSH
19582: LD_VAR 0 3
19586: PPUSH
19587: LD_INT 1
19589: PPUSH
19590: CALL_OW 322
// for i = 0 to 39 do
19594: LD_ADDR_VAR 0 4
19598: PUSH
19599: DOUBLE
19600: LD_INT 0
19602: DEC
19603: ST_TO_ADDR
19604: LD_INT 39
19606: PUSH
19607: FOR_TO
19608: IFFALSE 19629
// SetRestrict ( i , side , true ) ;
19610: LD_VAR 0 4
19614: PPUSH
19615: LD_VAR 0 3
19619: PPUSH
19620: LD_INT 1
19622: PPUSH
19623: CALL_OW 324
19627: GO 19607
19629: POP
19630: POP
// end ; else
19631: GO 19708
19633: POP
// begin for i = 1 to 73 do
19634: LD_ADDR_VAR 0 4
19638: PUSH
19639: DOUBLE
19640: LD_INT 1
19642: DEC
19643: ST_TO_ADDR
19644: LD_INT 73
19646: PUSH
19647: FOR_TO
19648: IFFALSE 19669
// SetTech ( i , side , state_enabled ) ;
19650: LD_VAR 0 4
19654: PPUSH
19655: LD_VAR 0 3
19659: PPUSH
19660: LD_INT 1
19662: PPUSH
19663: CALL_OW 322
19667: GO 19647
19669: POP
19670: POP
// for i = 0 to 39 do
19671: LD_ADDR_VAR 0 4
19675: PUSH
19676: DOUBLE
19677: LD_INT 0
19679: DEC
19680: ST_TO_ADDR
19681: LD_INT 39
19683: PUSH
19684: FOR_TO
19685: IFFALSE 19706
// SetRestrict ( i , side , true ) ;
19687: LD_VAR 0 4
19691: PPUSH
19692: LD_VAR 0 3
19696: PPUSH
19697: LD_INT 1
19699: PPUSH
19700: CALL_OW 324
19704: GO 19684
19706: POP
19707: POP
// end ; end ; end ;
19708: GO 15713
19710: POP
19711: POP
// end ;
19712: LD_VAR 0 2
19716: RET
