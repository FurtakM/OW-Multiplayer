// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_siberit , respawning_time_min , respawning_time_max , buildUpTime_Delay , amount_of_apemen , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 42
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 19
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 17
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 20
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 22
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 18
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 372
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 3 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 3
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 167: LD_ADDR_EXP 19
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 6
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 206: LD_ADDR_EXP 17
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 6
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 0 , 0 , 3 ] ;
 245: LD_ADDR_EXP 20
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 22
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 323: LD_ADDR_EXP 18
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// end ; for i := 1 to 8 do
 372: LD_ADDR_VAR 0 2
 376: PUSH
 377: DOUBLE
 378: LD_INT 1
 380: DEC
 381: ST_TO_ADDR
 382: LD_INT 8
 384: PUSH
 385: FOR_TO
 386: IFFALSE 473
// if Multiplayer_GetPlayerIsSpec ( i ) then
 388: LD_VAR 0 2
 392: PPUSH
 393: CALL_OW 530
 397: IFFALSE 471
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 399: LD_ADDR_EXP 19
 403: PUSH
 404: LD_EXP 19
 408: PPUSH
 409: LD_VAR 0 2
 413: PPUSH
 414: LD_INT 0
 416: PPUSH
 417: CALL_OW 1
 421: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 422: LD_ADDR_EXP 18
 426: PUSH
 427: LD_EXP 18
 431: PPUSH
 432: LD_EXP 17
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: PPUSH
 443: LD_EXP 18
 447: PUSH
 448: LD_EXP 17
 452: PUSH
 453: LD_VAR 0 2
 457: ARRAY
 458: ARRAY
 459: PUSH
 460: LD_VAR 0 2
 464: DIFF
 465: PPUSH
 466: CALL_OW 1
 470: ST_TO_ADDR
// end ;
 471: GO 385
 473: POP
 474: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 475: LD_ADDR_EXP 23
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 0
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: LD_INT 0
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: ST_TO_ADDR
// for i := 1 to 8 do
 506: LD_ADDR_VAR 0 2
 510: PUSH
 511: DOUBLE
 512: LD_INT 1
 514: DEC
 515: ST_TO_ADDR
 516: LD_INT 8
 518: PUSH
 519: FOR_TO
 520: IFFALSE 567
// if Side_Positions [ i ] then
 522: LD_EXP 19
 526: PUSH
 527: LD_VAR 0 2
 531: ARRAY
 532: IFFALSE 565
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 534: LD_ADDR_EXP 23
 538: PUSH
 539: LD_EXP 23
 543: PPUSH
 544: LD_EXP 19
 548: PUSH
 549: LD_VAR 0 2
 553: ARRAY
 554: PPUSH
 555: LD_VAR 0 2
 559: PPUSH
 560: CALL_OW 1
 564: ST_TO_ADDR
 565: GO 519
 567: POP
 568: POP
// Team_Game := Side_Teams [ your_side ] ;
 569: LD_ADDR_EXP 21
 573: PUSH
 574: LD_EXP 17
 578: PUSH
 579: LD_OWVAR 2
 583: ARRAY
 584: ST_TO_ADDR
// if Multiplayer then
 585: LD_OWVAR 4
 589: IFFALSE 835
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 591: LD_ADDR_EXP 44
 595: PUSH
 596: LD_INT 0
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 604: LD_ADDR_EXP 45
 608: PUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 617: LD_ADDR_EXP 46
 621: PUSH
 622: LD_INT 2
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 630: LD_ADDR_EXP 47
 634: PUSH
 635: LD_INT 3
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 643: LD_ADDR_EXP 48
 647: PUSH
 648: LD_INT 4
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 656: LD_ADDR_EXP 49
 660: PUSH
 661: LD_INT 5
 663: PPUSH
 664: CALL_OW 426
 668: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 669: LD_ADDR_EXP 50
 673: PUSH
 674: LD_INT 6
 676: PPUSH
 677: CALL_OW 426
 681: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 682: LD_ADDR_EXP 51
 686: PUSH
 687: LD_INT 10
 689: PPUSH
 690: CALL_OW 426
 694: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 695: LD_ADDR_EXP 52
 699: PUSH
 700: LD_INT 11
 702: PPUSH
 703: CALL_OW 426
 707: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 708: LD_ADDR_EXP 53
 712: PUSH
 713: LD_INT 12
 715: PPUSH
 716: CALL_OW 426
 720: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 721: LD_ADDR_EXP 54
 725: PUSH
 726: LD_INT 13
 728: PPUSH
 729: CALL_OW 426
 733: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 734: LD_ADDR_EXP 55
 738: PUSH
 739: LD_INT 14
 741: PPUSH
 742: CALL_OW 426
 746: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 747: LD_ADDR_EXP 1
 751: PUSH
 752: LD_INT 15
 754: PPUSH
 755: CALL_OW 426
 759: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 760: LD_ADDR_EXP 2
 764: PUSH
 765: LD_INT 16
 767: PPUSH
 768: CALL_OW 426
 772: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 773: LD_ADDR_EXP 56
 777: PUSH
 778: LD_INT 17
 780: PPUSH
 781: CALL_OW 426
 785: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 786: LD_ADDR_EXP 57
 790: PUSH
 791: LD_INT 20
 793: PPUSH
 794: CALL_OW 426
 798: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 799: LD_ADDR_EXP 43
 803: PUSH
 804: LD_INT 21
 806: PPUSH
 807: CALL_OW 426
 811: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 812: LD_ADDR_VAR 0 3
 816: PUSH
 817: LD_INT 22
 819: PPUSH
 820: CALL_OW 426
 824: ST_TO_ADDR
// def_win_rules = 0 ;
 825: LD_ADDR_EXP 32
 829: PUSH
 830: LD_INT 0
 832: ST_TO_ADDR
// end else
 833: GO 991
// begin Randomize ;
 835: CALL_OW 10
// def_base_level := 2 ;
 839: LD_ADDR_EXP 44
 843: PUSH
 844: LD_INT 2
 846: ST_TO_ADDR
// def_amount_of_people := 0 ;
 847: LD_ADDR_EXP 45
 851: PUSH
 852: LD_INT 0
 854: ST_TO_ADDR
// def_skill_level := 1 ;
 855: LD_ADDR_EXP 46
 859: PUSH
 860: LD_INT 1
 862: ST_TO_ADDR
// def_starting_resources := 2 ;
 863: LD_ADDR_EXP 47
 867: PUSH
 868: LD_INT 2
 870: ST_TO_ADDR
// def_shipments_density := 1 ;
 871: LD_ADDR_EXP 48
 875: PUSH
 876: LD_INT 1
 878: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 879: LD_ADDR_EXP 49
 883: PUSH
 884: LD_INT 0
 886: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 887: LD_ADDR_EXP 50
 891: PUSH
 892: LD_INT 1
 894: ST_TO_ADDR
// def_shared_vision := 1 ;
 895: LD_ADDR_EXP 51
 899: PUSH
 900: LD_INT 1
 902: ST_TO_ADDR
// def_morale_flags := 1 ;
 903: LD_ADDR_EXP 52
 907: PUSH
 908: LD_INT 1
 910: ST_TO_ADDR
// def_siberite_detection := 1 ;
 911: LD_ADDR_EXP 53
 915: PUSH
 916: LD_INT 1
 918: ST_TO_ADDR
// def_people_respawning := 2 ;
 919: LD_ADDR_EXP 54
 923: PUSH
 924: LD_INT 2
 926: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 927: LD_ADDR_EXP 55
 931: PUSH
 932: LD_INT 3
 934: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 935: LD_ADDR_EXP 1
 939: PUSH
 940: LD_INT 0
 942: ST_TO_ADDR
// def_public_score := 0 ;
 943: LD_ADDR_EXP 2
 947: PUSH
 948: LD_INT 0
 950: ST_TO_ADDR
// def_siberite_bomb := 4 ;
 951: LD_ADDR_EXP 56
 955: PUSH
 956: LD_INT 4
 958: ST_TO_ADDR
// def_builduptime := 0 ;
 959: LD_ADDR_EXP 57
 963: PUSH
 964: LD_INT 0
 966: ST_TO_ADDR
// def_game_rules := 0 ;
 967: LD_ADDR_EXP 43
 971: PUSH
 972: LD_INT 0
 974: ST_TO_ADDR
// tech_level = 4 ;
 975: LD_ADDR_VAR 0 3
 979: PUSH
 980: LD_INT 4
 982: ST_TO_ADDR
// def_win_rules = 0 ;
 983: LD_ADDR_EXP 32
 987: PUSH
 988: LD_INT 0
 990: ST_TO_ADDR
// end ; InitGameRules ;
 991: CALL 10560 0 0
// if def_game_rules = 0 then
 995: LD_EXP 43
 999: PUSH
1000: LD_INT 0
1002: EQUAL
1003: IFFALSE 1054
// begin if isSGUI then
1005: LD_OWVAR 83
1009: IFFALSE 1017
// setMpTechs ( ) else
1011: CALL 15453 0 0
1015: GO 1054
// begin if Game_Type = 3 then
1017: LD_EXP 42
1021: PUSH
1022: LD_INT 3
1024: EQUAL
1025: IFFALSE 1041
// tech_level = tech_level + 3 ;
1027: LD_ADDR_VAR 0 3
1031: PUSH
1032: LD_VAR 0 3
1036: PUSH
1037: LD_INT 3
1039: PLUS
1040: ST_TO_ADDR
// SetMpTechLevel ( tech_level + 1 ) ;
1041: LD_VAR 0 3
1045: PUSH
1046: LD_INT 1
1048: PLUS
1049: PPUSH
1050: CALL 15600 0 1
// end ; end ; if ( Game_Type = 5 ) then
1054: LD_EXP 42
1058: PUSH
1059: LD_INT 5
1061: EQUAL
1062: IFFALSE 1091
// begin def_base_level := 1 ;
1064: LD_ADDR_EXP 44
1068: PUSH
1069: LD_INT 1
1071: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
1072: LD_ADDR_EXP 49
1076: PUSH
1077: LD_INT 0
1079: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
1080: LD_ADDR_EXP 50
1084: PUSH
1085: LD_INT 0
1087: ST_TO_ADDR
// disable ( 10 ) ;
1088: LD_INT 10
1090: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
1091: LD_ADDR_EXP 3
1095: PUSH
1096: LD_INT 0
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: PUSH
1110: LD_EXP 44
1114: PUSH
1115: LD_INT 1
1117: PLUS
1118: ARRAY
1119: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
1120: LD_ADDR_EXP 4
1124: PUSH
1125: LD_INT 0
1127: PUSH
1128: LD_INT 0
1130: PUSH
1131: LD_INT 2
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: LIST
1138: PUSH
1139: LD_EXP 44
1143: PUSH
1144: LD_INT 1
1146: PLUS
1147: ARRAY
1148: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1149: LD_ADDR_EXP 5
1153: PUSH
1154: LD_EXP 45
1158: PUSH
1159: LD_INT 4
1161: PLUS
1162: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1163: LD_ADDR_EXP 9
1167: PUSH
1168: LD_INT 150
1170: PUSH
1171: LD_EXP 48
1175: PUSH
1176: LD_INT 1
1178: PLUS
1179: MINUS
1180: ST_TO_ADDR
// if def_people_respawning = 0 then
1181: LD_EXP 54
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1209
// begin respawning_time_min = 0 ;
1191: LD_ADDR_EXP 12
1195: PUSH
1196: LD_INT 0
1198: ST_TO_ADDR
// respawning_time_max = 0 ;
1199: LD_ADDR_EXP 13
1203: PUSH
1204: LD_INT 0
1206: ST_TO_ADDR
// end else
1207: GO 1253
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1209: LD_ADDR_EXP 12
1213: PUSH
1214: LD_INT 10500
1216: PUSH
1217: LD_INT 5
1219: DIVREAL
1220: PUSH
1221: LD_INT 6
1223: PUSH
1224: LD_EXP 54
1228: MINUS
1229: MUL
1230: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1231: LD_ADDR_EXP 13
1235: PUSH
1236: LD_INT 31500
1238: PUSH
1239: LD_INT 5
1241: DIVREAL
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_EXP 54
1250: MINUS
1251: MUL
1252: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1253: LD_EXP 55
1257: NOT
1258: IFFALSE 1270
// amount_of_apemen := 0 else
1260: LD_ADDR_EXP 15
1264: PUSH
1265: LD_INT 0
1267: ST_TO_ADDR
1268: GO 1280
// amount_of_apemen := def_amount_of_apemen ;
1270: LD_ADDR_EXP 15
1274: PUSH
1275: LD_EXP 55
1279: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1280: LD_EXP 56
1284: PUSH
1285: LD_INT 0
1287: EQUAL
1288: IFFALSE 1300
// siberite_bomb_Delay = 0 else
1290: LD_ADDR_EXP 16
1294: PUSH
1295: LD_INT 0
1297: ST_TO_ADDR
1298: GO 1322
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1300: LD_ADDR_EXP 16
1304: PUSH
1305: LD_EXP 56
1309: PUSH
1310: LD_INT 1
1312: MINUS
1313: PUSH
1314: LD_INT 21000
1316: MUL
1317: PUSH
1318: LD_INT 1
1320: PLUS
1321: ST_TO_ADDR
// if def_builduptime = 0 then
1322: LD_EXP 57
1326: PUSH
1327: LD_INT 0
1329: EQUAL
1330: IFFALSE 1342
// buildUpTime_Delay = 0 else
1332: LD_ADDR_EXP 14
1336: PUSH
1337: LD_INT 0
1339: ST_TO_ADDR
1340: GO 1360
// buildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
1342: LD_ADDR_EXP 14
1346: PUSH
1347: LD_INT 8400
1349: PUSH
1350: LD_INT 2100
1352: PUSH
1353: LD_EXP 57
1357: MUL
1358: PLUS
1359: ST_TO_ADDR
// amount_of_siberit = 30 + def_amount_of_siberit * 5 ;
1360: LD_ADDR_EXP 11
1364: PUSH
1365: LD_INT 30
1367: PUSH
1368: LD_EXP 1
1372: PUSH
1373: LD_INT 5
1375: MUL
1376: PLUS
1377: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1378: LD_ADDR_EXP 6
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 3
1388: PUSH
1389: LD_INT 4
1391: PUSH
1392: LD_INT 5
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: PUSH
1401: LD_EXP 46
1405: PUSH
1406: LD_INT 1
1408: PLUS
1409: ARRAY
1410: ST_TO_ADDR
// if ( Game_Type = 5 ) then
1411: LD_EXP 42
1415: PUSH
1416: LD_INT 5
1418: EQUAL
1419: IFFALSE 1537
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1421: LD_ADDR_EXP 8
1425: PUSH
1426: LD_INT 1000
1428: PUSH
1429: LD_INT 100
1431: PUSH
1432: LD_INT 100
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: LD_INT 2000
1442: PUSH
1443: LD_INT 200
1445: PUSH
1446: LD_INT 200
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 5000
1456: PUSH
1457: LD_INT 500
1459: PUSH
1460: LD_INT 500
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: PUSH
1468: LD_INT 10000
1470: PUSH
1471: LD_INT 1000
1473: PUSH
1474: LD_INT 1000
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 25000
1484: PUSH
1485: LD_INT 2500
1487: PUSH
1488: LD_INT 2500
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 50000
1498: PUSH
1499: LD_INT 5000
1501: PUSH
1502: LD_INT 5000
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: PUSH
1518: LD_EXP 47
1522: PUSH
1523: LD_INT 1
1525: PLUS
1526: ARRAY
1527: ST_TO_ADDR
// starting_crates := [ ] ;
1528: LD_ADDR_EXP 7
1532: PUSH
1533: EMPTY
1534: ST_TO_ADDR
// end else
1535: GO 1683
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1537: LD_ADDR_EXP 8
1541: PUSH
1542: LD_INT 0
1544: PUSH
1545: LD_INT 0
1547: PUSH
1548: LD_INT 0
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 30
1558: PUSH
1559: LD_INT 0
1561: PUSH
1562: LD_INT 0
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 50
1572: PUSH
1573: LD_INT 20
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: PUSH
1584: LD_INT 80
1586: PUSH
1587: LD_INT 40
1589: PUSH
1590: LD_INT 20
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: PUSH
1604: LD_EXP 47
1608: PUSH
1609: LD_INT 1
1611: PLUS
1612: ARRAY
1613: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1614: LD_ADDR_EXP 7
1618: PUSH
1619: LD_INT 10
1621: PUSH
1622: EMPTY
1623: LIST
1624: PUSH
1625: LD_INT 7
1627: PUSH
1628: LD_INT 14
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 6
1637: PUSH
1638: LD_INT 12
1640: PUSH
1641: LD_INT 18
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 5
1651: PUSH
1652: LD_INT 10
1654: PUSH
1655: LD_INT 15
1657: PUSH
1658: LD_INT 20
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_EXP 47
1677: PUSH
1678: LD_INT 1
1680: PLUS
1681: ARRAY
1682: ST_TO_ADDR
// end ; morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1683: LD_ADDR_EXP 10
1687: PUSH
1688: LD_INT 1
1690: NEG
1691: PUSH
1692: LD_INT 350
1694: PUSH
1695: LD_INT 700
1697: PUSH
1698: LD_INT 1400
1700: PUSH
1701: LD_INT 0
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: PUSH
1711: LD_EXP 52
1715: PUSH
1716: LD_INT 1
1718: PLUS
1719: ARRAY
1720: ST_TO_ADDR
// battle_flags_id := [ ] ;
1721: LD_ADDR_EXP 31
1725: PUSH
1726: EMPTY
1727: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1728: LD_ADDR_EXP 41
1732: PUSH
1733: LD_INT 8
1735: PUSH
1736: LD_INT 9
1738: PUSH
1739: LD_INT 10
1741: PUSH
1742: LD_INT 11
1744: PUSH
1745: LD_INT 12
1747: PUSH
1748: LD_INT 13
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: ST_TO_ADDR
// end ;
1759: LD_VAR 0 1
1763: RET
// function init_map ; var i , j ; begin
1764: LD_INT 0
1766: PPUSH
1767: PPUSH
1768: PPUSH
// normal_oil_deposits_locations := [ [ 28 , 22 ] , [ 69 , 3 ] , [ 138 , 27 ] , [ 180 , 104 ] , [ 138 , 137 ] , [ 76 , 115 ] ] ;
1769: LD_ADDR_EXP 27
1773: PUSH
1774: LD_INT 28
1776: PUSH
1777: LD_INT 22
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: LD_INT 69
1786: PUSH
1787: LD_INT 3
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: LD_INT 138
1796: PUSH
1797: LD_INT 27
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: LD_INT 180
1806: PUSH
1807: LD_INT 104
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 138
1816: PUSH
1817: LD_INT 137
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 76
1826: PUSH
1827: LD_INT 115
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 31 , 38 ] , [ 34 , 21 ] ] , [ [ 58 , 4 ] , [ 82 , 4 ] ] , [ [ 122 , 18 ] , [ 152 , 43 ] ] , [ [ 174 , 90 ] , [ 180 , 120 ] ] , [ [ 152 , 136 ] , [ 130 , 136 ] ] , [ [ 89 , 116 ] , [ 59 , 89 ] ] ] ;
1842: LD_ADDR_EXP 28
1846: PUSH
1847: LD_INT 31
1849: PUSH
1850: LD_INT 38
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 34
1859: PUSH
1860: LD_INT 21
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 58
1873: PUSH
1874: LD_INT 4
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 82
1883: PUSH
1884: LD_INT 4
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PUSH
1895: LD_INT 122
1897: PUSH
1898: LD_INT 18
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 152
1907: PUSH
1908: LD_INT 43
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 174
1921: PUSH
1922: LD_INT 90
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 180
1931: PUSH
1932: LD_INT 120
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 152
1945: PUSH
1946: LD_INT 136
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 130
1955: PUSH
1956: LD_INT 136
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 89
1969: PUSH
1970: LD_INT 116
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 59
1979: PUSH
1980: LD_INT 89
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 28 , 26 ] , [ 73 , 3 ] , [ 133 , 22 ] , [ 180 , 110 ] , [ 142 , 137 ] , [ 72 , 112 ] ] ;
1999: LD_ADDR_EXP 29
2003: PUSH
2004: LD_INT 28
2006: PUSH
2007: LD_INT 26
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 73
2016: PUSH
2017: LD_INT 3
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: LD_INT 133
2026: PUSH
2027: LD_INT 22
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 180
2036: PUSH
2037: LD_INT 110
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 142
2046: PUSH
2047: LD_INT 137
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 72
2056: PUSH
2057: LD_INT 112
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: LIST
2071: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 27 , 39 ] , [ 30 , 16 ] ] , [ [ 57 , 8 ] , [ 87 , 8 ] ] , [ [ 128 , 19 ] , [ 146 , 36 ] ] , [ [ 176 , 121 ] , [ 179 , 96 ] ] , [ [ 153 , 132 ] , [ 124 , 133 ] ] , [ [ 85 , 117 ] , [ 62 , 96 ] ] ] ;
2072: LD_ADDR_EXP 30
2076: PUSH
2077: LD_INT 27
2079: PUSH
2080: LD_INT 39
2082: PUSH
2083: EMPTY
2084: LIST
2085: LIST
2086: PUSH
2087: LD_INT 30
2089: PUSH
2090: LD_INT 16
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 57
2103: PUSH
2104: LD_INT 8
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: PUSH
2111: LD_INT 87
2113: PUSH
2114: LD_INT 8
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 128
2127: PUSH
2128: LD_INT 19
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: LD_INT 146
2137: PUSH
2138: LD_INT 36
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 176
2151: PUSH
2152: LD_INT 121
2154: PUSH
2155: EMPTY
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 179
2161: PUSH
2162: LD_INT 96
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 153
2175: PUSH
2176: LD_INT 132
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: LD_INT 124
2185: PUSH
2186: LD_INT 133
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 85
2199: PUSH
2200: LD_INT 117
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: PUSH
2207: LD_INT 62
2209: PUSH
2210: LD_INT 96
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: ST_TO_ADDR
// depot_def := [ [ 53 , 42 , 5 ] , [ 78 , 18 , 0 ] , [ 129 , 43 , 1 ] , [ 155 , 96 , 2 ] , [ 130 , 120 , 3 ] , [ 82 , 98 , 3 ] ] ;
2229: LD_ADDR_EXP 24
2233: PUSH
2234: LD_INT 53
2236: PUSH
2237: LD_INT 42
2239: PUSH
2240: LD_INT 5
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 78
2250: PUSH
2251: LD_INT 18
2253: PUSH
2254: LD_INT 0
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: PUSH
2262: LD_INT 129
2264: PUSH
2265: LD_INT 43
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 155
2278: PUSH
2279: LD_INT 96
2281: PUSH
2282: LD_INT 2
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 130
2292: PUSH
2293: LD_INT 120
2295: PUSH
2296: LD_INT 3
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 82
2306: PUSH
2307: LD_INT 98
2309: PUSH
2310: LD_INT 3
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: ST_TO_ADDR
// for i in depot_def do
2326: LD_ADDR_VAR 0 2
2330: PUSH
2331: LD_EXP 24
2335: PUSH
2336: FOR_IN
2337: IFFALSE 2411
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2339: LD_ADDR_EXP 26
2343: PUSH
2344: LD_EXP 26
2348: PUSH
2349: LD_VAR 0 2
2353: PUSH
2354: LD_INT 1
2356: ARRAY
2357: PPUSH
2358: LD_VAR 0 2
2362: PUSH
2363: LD_INT 3
2365: ARRAY
2366: PPUSH
2367: LD_INT 10
2369: PPUSH
2370: CALL_OW 272
2374: PUSH
2375: LD_VAR 0 2
2379: PUSH
2380: LD_INT 2
2382: ARRAY
2383: PPUSH
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 3
2391: ARRAY
2392: PPUSH
2393: LD_INT 10
2395: PPUSH
2396: CALL_OW 273
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PUSH
2405: EMPTY
2406: LIST
2407: ADD
2408: ST_TO_ADDR
2409: GO 2336
2411: POP
2412: POP
// breastworks_def := [ [ [ 65 , 53 , 5 ] , [ 65 , 40 , 4 ] ] , [ [ 76 , 28 , 0 ] , [ 89 , 28 , 5 ] ] , [ [ 115 , 41 , 1 ] , [ 128 , 54 , 0 ] ] , [ [ 143 , 82 , 2 ] , [ 143 , 95 , 1 ] ] , [ [ 131 , 108 , 3 ] , [ 118 , 108 , 2 ] ] , [ [ 80 , 85 , 3 ] , [ 92 , 97 , 4 ] ] ] ;
2413: LD_ADDR_EXP 25
2417: PUSH
2418: LD_INT 65
2420: PUSH
2421: LD_INT 53
2423: PUSH
2424: LD_INT 5
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: PUSH
2432: LD_INT 65
2434: PUSH
2435: LD_INT 40
2437: PUSH
2438: LD_INT 4
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: PUSH
2450: LD_INT 76
2452: PUSH
2453: LD_INT 28
2455: PUSH
2456: LD_INT 0
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: LIST
2463: PUSH
2464: LD_INT 89
2466: PUSH
2467: LD_INT 28
2469: PUSH
2470: LD_INT 5
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PUSH
2482: LD_INT 115
2484: PUSH
2485: LD_INT 41
2487: PUSH
2488: LD_INT 1
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 128
2498: PUSH
2499: LD_INT 54
2501: PUSH
2502: LD_INT 0
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 143
2516: PUSH
2517: LD_INT 82
2519: PUSH
2520: LD_INT 2
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: LIST
2527: PUSH
2528: LD_INT 143
2530: PUSH
2531: LD_INT 95
2533: PUSH
2534: LD_INT 1
2536: PUSH
2537: EMPTY
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: PUSH
2546: LD_INT 131
2548: PUSH
2549: LD_INT 108
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 118
2562: PUSH
2563: LD_INT 108
2565: PUSH
2566: LD_INT 2
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: PUSH
2578: LD_INT 80
2580: PUSH
2581: LD_INT 85
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 92
2594: PUSH
2595: LD_INT 97
2597: PUSH
2598: LD_INT 4
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: ST_TO_ADDR
// for i = 1 to Position_Sides do
2618: LD_ADDR_VAR 0 2
2622: PUSH
2623: DOUBLE
2624: LD_INT 1
2626: DEC
2627: ST_TO_ADDR
2628: LD_EXP 23
2632: PUSH
2633: FOR_TO
2634: IFFALSE 2746
// begin if not Side_Positions [ i ] then
2636: LD_EXP 19
2640: PUSH
2641: LD_VAR 0 2
2645: ARRAY
2646: NOT
2647: IFFALSE 2651
// continue ;
2649: GO 2633
// if def_extra_oil_deposits then
2651: LD_EXP 49
2655: IFFALSE 2707
// for j in extra_oil_deposits_locations [ i ] do
2657: LD_ADDR_VAR 0 3
2661: PUSH
2662: LD_EXP 28
2666: PUSH
2667: LD_VAR 0 2
2671: ARRAY
2672: PUSH
2673: FOR_IN
2674: IFFALSE 2703
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2676: LD_VAR 0 3
2680: PUSH
2681: LD_INT 1
2683: ARRAY
2684: PPUSH
2685: LD_VAR 0 3
2689: PUSH
2690: LD_INT 2
2692: ARRAY
2693: PPUSH
2694: LD_INT 2
2696: PPUSH
2697: CALL_OW 62
2701: GO 2673
2703: POP
2704: POP
2705: GO 2744
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2707: LD_EXP 27
2711: PUSH
2712: LD_VAR 0 2
2716: ARRAY
2717: PUSH
2718: LD_INT 1
2720: ARRAY
2721: PPUSH
2722: LD_EXP 27
2726: PUSH
2727: LD_VAR 0 2
2731: ARRAY
2732: PUSH
2733: LD_INT 2
2735: ARRAY
2736: PPUSH
2737: LD_INT 2
2739: PPUSH
2740: CALL_OW 62
// end ;
2744: GO 2633
2746: POP
2747: POP
// if def_extra_sib_deposits then
2748: LD_EXP 50
2752: IFFALSE 2888
// for i = 1 to Position_Sides do
2754: LD_ADDR_VAR 0 2
2758: PUSH
2759: DOUBLE
2760: LD_INT 1
2762: DEC
2763: ST_TO_ADDR
2764: LD_EXP 23
2768: PUSH
2769: FOR_TO
2770: IFFALSE 2886
// begin if not Side_Positions [ i ] then
2772: LD_EXP 19
2776: PUSH
2777: LD_VAR 0 2
2781: ARRAY
2782: NOT
2783: IFFALSE 2787
// continue ;
2785: GO 2769
// if def_extra_sib_deposits = 2 then
2787: LD_EXP 50
2791: PUSH
2792: LD_INT 2
2794: EQUAL
2795: IFFALSE 2847
// for j in extra_sib_deposits_locations [ i ] do
2797: LD_ADDR_VAR 0 3
2801: PUSH
2802: LD_EXP 30
2806: PUSH
2807: LD_VAR 0 2
2811: ARRAY
2812: PUSH
2813: FOR_IN
2814: IFFALSE 2843
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2816: LD_VAR 0 3
2820: PUSH
2821: LD_INT 1
2823: ARRAY
2824: PPUSH
2825: LD_VAR 0 3
2829: PUSH
2830: LD_INT 2
2832: ARRAY
2833: PPUSH
2834: LD_INT 3
2836: PPUSH
2837: CALL_OW 62
2841: GO 2813
2843: POP
2844: POP
2845: GO 2884
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2847: LD_EXP 29
2851: PUSH
2852: LD_VAR 0 2
2856: ARRAY
2857: PUSH
2858: LD_INT 1
2860: ARRAY
2861: PPUSH
2862: LD_EXP 29
2866: PUSH
2867: LD_VAR 0 2
2871: ARRAY
2872: PUSH
2873: LD_INT 2
2875: ARRAY
2876: PPUSH
2877: LD_INT 3
2879: PPUSH
2880: CALL_OW 62
// end ;
2884: GO 2769
2886: POP
2887: POP
// end ;
2888: LD_VAR 0 1
2892: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2893: LD_INT 0
2895: PPUSH
2896: PPUSH
2897: PPUSH
// if not Team_Game then
2898: LD_EXP 21
2902: NOT
2903: IFFALSE 3001
// begin for i = 1 to 8 do
2905: LD_ADDR_VAR 0 2
2909: PUSH
2910: DOUBLE
2911: LD_INT 1
2913: DEC
2914: ST_TO_ADDR
2915: LD_INT 8
2917: PUSH
2918: FOR_TO
2919: IFFALSE 2997
// for j = 1 to 8 do
2921: LD_ADDR_VAR 0 3
2925: PUSH
2926: DOUBLE
2927: LD_INT 1
2929: DEC
2930: ST_TO_ADDR
2931: LD_INT 8
2933: PUSH
2934: FOR_TO
2935: IFFALSE 2993
// if i <> j then
2937: LD_VAR 0 2
2941: PUSH
2942: LD_VAR 0 3
2946: NONEQUAL
2947: IFFALSE 2971
// SetAttitude ( i , j , att_neutral , true ) else
2949: LD_VAR 0 2
2953: PPUSH
2954: LD_VAR 0 3
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: LD_INT 1
2964: PPUSH
2965: CALL_OW 80
2969: GO 2991
// SetAttitude ( i , j , att_friend , true ) ;
2971: LD_VAR 0 2
2975: PPUSH
2976: LD_VAR 0 3
2980: PPUSH
2981: LD_INT 1
2983: PPUSH
2984: LD_INT 1
2986: PPUSH
2987: CALL_OW 80
2991: GO 2934
2993: POP
2994: POP
2995: GO 2918
2997: POP
2998: POP
// end else
2999: GO 3176
// begin if def_shared_vision then
3001: LD_EXP 51
3005: IFFALSE 3070
// begin for i in Teams do
3007: LD_ADDR_VAR 0 2
3011: PUSH
3012: LD_EXP 18
3016: PUSH
3017: FOR_IN
3018: IFFALSE 3068
// for j = 2 to i do
3020: LD_ADDR_VAR 0 3
3024: PUSH
3025: DOUBLE
3026: LD_INT 2
3028: DEC
3029: ST_TO_ADDR
3030: LD_VAR 0 2
3034: PUSH
3035: FOR_TO
3036: IFFALSE 3064
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3038: LD_VAR 0 2
3042: PUSH
3043: LD_VAR 0 3
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 2
3053: PUSH
3054: LD_INT 1
3056: ARRAY
3057: PPUSH
3058: CALL_OW 343
3062: GO 3035
3064: POP
3065: POP
3066: GO 3017
3068: POP
3069: POP
// end ; for i = 1 to 8 do
3070: LD_ADDR_VAR 0 2
3074: PUSH
3075: DOUBLE
3076: LD_INT 1
3078: DEC
3079: ST_TO_ADDR
3080: LD_INT 8
3082: PUSH
3083: FOR_TO
3084: IFFALSE 3174
// for j = 1 to 8 do
3086: LD_ADDR_VAR 0 3
3090: PUSH
3091: DOUBLE
3092: LD_INT 1
3094: DEC
3095: ST_TO_ADDR
3096: LD_INT 8
3098: PUSH
3099: FOR_TO
3100: IFFALSE 3170
// if Side_Teams [ i ] = Side_Teams [ j ] then
3102: LD_EXP 17
3106: PUSH
3107: LD_VAR 0 2
3111: ARRAY
3112: PUSH
3113: LD_EXP 17
3117: PUSH
3118: LD_VAR 0 3
3122: ARRAY
3123: EQUAL
3124: IFFALSE 3148
// SetAttitude ( i , j , att_friend , true ) else
3126: LD_VAR 0 2
3130: PPUSH
3131: LD_VAR 0 3
3135: PPUSH
3136: LD_INT 1
3138: PPUSH
3139: LD_INT 1
3141: PPUSH
3142: CALL_OW 80
3146: GO 3168
// SetAttitude ( i , j , att_enemy , true ) ;
3148: LD_VAR 0 2
3152: PPUSH
3153: LD_VAR 0 3
3157: PPUSH
3158: LD_INT 2
3160: PPUSH
3161: LD_INT 1
3163: PPUSH
3164: CALL_OW 80
3168: GO 3099
3170: POP
3171: POP
3172: GO 3083
3174: POP
3175: POP
// end ; end ;
3176: LD_VAR 0 1
3180: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3181: LD_INT 0
3183: PPUSH
3184: PPUSH
3185: PPUSH
3186: PPUSH
// result := [ ] ;
3187: LD_ADDR_VAR 0 7
3191: PUSH
3192: EMPTY
3193: ST_TO_ADDR
// for i := 1 to count do
3194: LD_ADDR_VAR 0 8
3198: PUSH
3199: DOUBLE
3200: LD_INT 1
3202: DEC
3203: ST_TO_ADDR
3204: LD_VAR 0 1
3208: PUSH
3209: FOR_TO
3210: IFFALSE 3628
// begin uc_direction := Rand ( 0 , 5 ) ;
3212: LD_ADDR_OWVAR 24
3216: PUSH
3217: LD_INT 0
3219: PPUSH
3220: LD_INT 5
3222: PPUSH
3223: CALL_OW 12
3227: ST_TO_ADDR
// if commander then
3228: LD_LOC 1
3232: IFFALSE 3341
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3234: LD_ADDR_OWVAR 26
3238: PUSH
3239: LD_OWVAR 19
3243: PUSH
3244: LD_OWVAR 20
3248: ARRAY
3249: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3250: LD_INT 1
3252: PPUSH
3253: LD_INT 2
3255: PPUSH
3256: CALL_OW 12
3260: PPUSH
3261: LD_VAR 0 2
3265: PPUSH
3266: LD_EXP 6
3270: PUSH
3271: LD_INT 2
3273: PLUS
3274: PPUSH
3275: CALL_OW 380
// hc_importance := 105 ;
3279: LD_ADDR_OWVAR 32
3283: PUSH
3284: LD_INT 105
3286: ST_TO_ADDR
// commander := false ;
3287: LD_ADDR_LOC 1
3291: PUSH
3292: LD_INT 0
3294: ST_TO_ADDR
// if Multiplayer then
3295: LD_OWVAR 4
3299: IFFALSE 3339
// begin hc_gallery := MULTIAVATARS ;
3301: LD_ADDR_OWVAR 33
3305: PUSH
3306: LD_STRING MULTIAVATARS
3308: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3309: LD_ADDR_OWVAR 34
3313: PUSH
3314: LD_OWVAR 20
3318: PPUSH
3319: CALL_OW 525
3323: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3324: LD_ADDR_OWVAR 27
3328: PUSH
3329: LD_OWVAR 20
3333: PPUSH
3334: CALL_OW 526
3338: ST_TO_ADDR
// end ; end else
3339: GO 3404
// begin hc_name :=  ;
3341: LD_ADDR_OWVAR 26
3345: PUSH
3346: LD_STRING 
3348: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3349: LD_INT 1
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 12
3359: PPUSH
3360: LD_VAR 0 2
3364: PPUSH
3365: LD_EXP 6
3369: PPUSH
3370: CALL_OW 380
// hc_importance := 0 ;
3374: LD_ADDR_OWVAR 32
3378: PUSH
3379: LD_INT 0
3381: ST_TO_ADDR
// if Multiplayer then
3382: LD_OWVAR 4
3386: IFFALSE 3404
// begin hc_gallery :=  ;
3388: LD_ADDR_OWVAR 33
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// hc_face_number := 0 ;
3396: LD_ADDR_OWVAR 34
3400: PUSH
3401: LD_INT 0
3403: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3404: LD_ADDR_VAR 0 10
3408: PUSH
3409: CALL_OW 44
3413: ST_TO_ADDR
// if global_defined then
3414: LD_LOC 3
3418: IFFALSE 3558
// begin if ( cl = class_soldier ) then
3420: LD_VAR 0 2
3424: PUSH
3425: LD_INT 1
3427: EQUAL
3428: IFFALSE 3448
// j := i + soldiers_created else
3430: LD_ADDR_VAR 0 9
3434: PUSH
3435: LD_VAR 0 8
3439: PUSH
3440: LD_LOC 4
3444: PLUS
3445: ST_TO_ADDR
3446: GO 3458
// j := i ;
3448: LD_ADDR_VAR 0 9
3452: PUSH
3453: LD_VAR 0 8
3457: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3458: LD_LOC 2
3462: PUSH
3463: LD_VAR 0 2
3467: ARRAY
3468: PUSH
3469: LD_VAR 0 9
3473: ARRAY
3474: PPUSH
3475: LD_VAR 0 10
3479: PPUSH
3480: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3484: LD_VAR 0 10
3488: PPUSH
3489: LD_INT 2
3491: PPUSH
3492: LD_LOC 2
3496: PUSH
3497: LD_VAR 0 2
3501: ARRAY
3502: PUSH
3503: LD_VAR 0 9
3507: ARRAY
3508: PPUSH
3509: LD_INT 2
3511: PPUSH
3512: CALL_OW 260
3516: PPUSH
3517: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3521: LD_VAR 0 10
3525: PPUSH
3526: LD_INT 1
3528: PPUSH
3529: LD_LOC 2
3533: PUSH
3534: LD_VAR 0 2
3538: ARRAY
3539: PUSH
3540: LD_VAR 0 9
3544: ARRAY
3545: PPUSH
3546: LD_INT 1
3548: PPUSH
3549: CALL_OW 260
3553: PPUSH
3554: CALL_OW 239
// end ; if building then
3558: LD_VAR 0 6
3562: IFFALSE 3580
// PlaceHumanInUnit ( un , building ) else
3564: LD_VAR 0 10
3568: PPUSH
3569: LD_VAR 0 6
3573: PPUSH
3574: CALL_OW 52
3578: GO 3607
// PlaceUnitXYR ( un , x , y , r , false ) ;
3580: LD_VAR 0 10
3584: PPUSH
3585: LD_VAR 0 3
3589: PPUSH
3590: LD_VAR 0 4
3594: PPUSH
3595: LD_VAR 0 5
3599: PPUSH
3600: LD_INT 0
3602: PPUSH
3603: CALL_OW 50
// result := result ^ [ un ] ;
3607: LD_ADDR_VAR 0 7
3611: PUSH
3612: LD_VAR 0 7
3616: PUSH
3617: LD_VAR 0 10
3621: PUSH
3622: EMPTY
3623: LIST
3624: ADD
3625: ST_TO_ADDR
// end ;
3626: GO 3209
3628: POP
3629: POP
// if not global_defined then
3630: LD_LOC 3
3634: NOT
3635: IFFALSE 3713
// if ( global_units >= cl ) then
3637: LD_LOC 2
3641: PUSH
3642: LD_VAR 0 2
3646: GREATEREQUAL
3647: IFFALSE 3688
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3649: LD_ADDR_LOC 2
3653: PUSH
3654: LD_LOC 2
3658: PPUSH
3659: LD_VAR 0 2
3663: PPUSH
3664: LD_LOC 2
3668: PUSH
3669: LD_VAR 0 2
3673: ARRAY
3674: PUSH
3675: LD_VAR 0 7
3679: ADD
3680: PPUSH
3681: CALL_OW 1
3685: ST_TO_ADDR
3686: GO 3713
// global_units := Replace ( global_units , cl , result ) ;
3688: LD_ADDR_LOC 2
3692: PUSH
3693: LD_LOC 2
3697: PPUSH
3698: LD_VAR 0 2
3702: PPUSH
3703: LD_VAR 0 7
3707: PPUSH
3708: CALL_OW 1
3712: ST_TO_ADDR
// if commander then
3713: LD_LOC 1
3717: IFFALSE 3764
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3719: LD_ADDR_EXP 33
3723: PUSH
3724: LD_EXP 33
3728: PPUSH
3729: LD_OWVAR 20
3733: PPUSH
3734: LD_EXP 33
3738: PUSH
3739: LD_OWVAR 20
3743: ARRAY
3744: PUSH
3745: LD_VAR 0 10
3749: ADD
3750: PPUSH
3751: CALL_OW 1
3755: ST_TO_ADDR
// commander := false ;
3756: LD_ADDR_LOC 1
3760: PUSH
3761: LD_INT 0
3763: ST_TO_ADDR
// end ; end ;
3764: LD_VAR 0 7
3768: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3769: LD_INT 0
3771: PPUSH
3772: PPUSH
3773: PPUSH
3774: PPUSH
3775: PPUSH
3776: PPUSH
3777: PPUSH
3778: PPUSH
3779: PPUSH
// pos := Side_Positions [ side ] ;
3780: LD_ADDR_VAR 0 3
3784: PUSH
3785: LD_EXP 19
3789: PUSH
3790: LD_VAR 0 1
3794: ARRAY
3795: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3796: LD_ADDR_OWVAR 21
3800: PUSH
3801: LD_EXP 20
3805: PUSH
3806: LD_VAR 0 1
3810: ARRAY
3811: ST_TO_ADDR
// uc_side := side ;
3812: LD_ADDR_OWVAR 20
3816: PUSH
3817: LD_VAR 0 1
3821: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3822: LD_ADDR_VAR 0 4
3826: PUSH
3827: LD_EXP 24
3831: PUSH
3832: LD_VAR 0 3
3836: ARRAY
3837: PUSH
3838: LD_INT 1
3840: ARRAY
3841: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3842: LD_ADDR_VAR 0 5
3846: PUSH
3847: LD_EXP 24
3851: PUSH
3852: LD_VAR 0 3
3856: ARRAY
3857: PUSH
3858: LD_INT 2
3860: ARRAY
3861: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3862: LD_ADDR_VAR 0 6
3866: PUSH
3867: LD_EXP 24
3871: PUSH
3872: LD_VAR 0 3
3876: ARRAY
3877: PUSH
3878: LD_INT 3
3880: ARRAY
3881: ST_TO_ADDR
// if is_depot then
3882: LD_EXP 3
3886: IFFALSE 4019
// begin bc_type = b_depot ;
3888: LD_ADDR_OWVAR 42
3892: PUSH
3893: LD_INT 0
3895: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3896: LD_ADDR_VAR 0 10
3900: PUSH
3901: LD_VAR 0 4
3905: PPUSH
3906: LD_VAR 0 5
3910: PPUSH
3911: LD_VAR 0 6
3915: PPUSH
3916: CALL_OW 47
3920: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3921: LD_VAR 0 10
3925: PPUSH
3926: LD_STRING @
3928: PUSH
3929: LD_VAR 0 1
3933: STR
3934: PPUSH
3935: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3939: LD_VAR 0 10
3943: PPUSH
3944: CALL_OW 274
3948: PPUSH
3949: LD_INT 1
3951: PPUSH
3952: LD_EXP 8
3956: PUSH
3957: LD_INT 1
3959: ARRAY
3960: PPUSH
3961: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3965: LD_VAR 0 10
3969: PPUSH
3970: CALL_OW 274
3974: PPUSH
3975: LD_INT 2
3977: PPUSH
3978: LD_EXP 8
3982: PUSH
3983: LD_INT 2
3985: ARRAY
3986: PPUSH
3987: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3991: LD_VAR 0 10
3995: PPUSH
3996: CALL_OW 274
4000: PPUSH
4001: LD_INT 3
4003: PPUSH
4004: LD_EXP 8
4008: PUSH
4009: LD_INT 3
4011: ARRAY
4012: PPUSH
4013: CALL_OW 277
// end else
4017: GO 4163
// begin for i := 1 to 3 do
4019: LD_ADDR_VAR 0 7
4023: PUSH
4024: DOUBLE
4025: LD_INT 1
4027: DEC
4028: ST_TO_ADDR
4029: LD_INT 3
4031: PUSH
4032: FOR_TO
4033: IFFALSE 4161
// begin r := starting_resources [ i ] ;
4035: LD_ADDR_VAR 0 8
4039: PUSH
4040: LD_EXP 8
4044: PUSH
4045: LD_VAR 0 7
4049: ARRAY
4050: ST_TO_ADDR
// while r >= 10 do
4051: LD_VAR 0 8
4055: PUSH
4056: LD_INT 10
4058: GREATEREQUAL
4059: IFFALSE 4159
// if r > 50 then
4061: LD_VAR 0 8
4065: PUSH
4066: LD_INT 50
4068: GREATER
4069: IFFALSE 4115
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4071: LD_VAR 0 7
4075: PPUSH
4076: LD_INT 5
4078: PPUSH
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_VAR 0 5
4088: PPUSH
4089: LD_INT 4
4091: PPUSH
4092: LD_INT 0
4094: PPUSH
4095: CALL_OW 60
// r := r - 50 ;
4099: LD_ADDR_VAR 0 8
4103: PUSH
4104: LD_VAR 0 8
4108: PUSH
4109: LD_INT 50
4111: MINUS
4112: ST_TO_ADDR
// end else
4113: GO 4157
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4115: LD_VAR 0 7
4119: PPUSH
4120: LD_VAR 0 8
4124: PUSH
4125: LD_INT 10
4127: DIV
4128: PPUSH
4129: LD_VAR 0 4
4133: PPUSH
4134: LD_VAR 0 5
4138: PPUSH
4139: LD_INT 4
4141: PPUSH
4142: LD_INT 0
4144: PPUSH
4145: CALL_OW 60
// r := 0 ;
4149: LD_ADDR_VAR 0 8
4153: PUSH
4154: LD_INT 0
4156: ST_TO_ADDR
// end ;
4157: GO 4051
// end ;
4159: GO 4032
4161: POP
4162: POP
// end ; for r in starting_crates do
4163: LD_ADDR_VAR 0 8
4167: PUSH
4168: LD_EXP 7
4172: PUSH
4173: FOR_IN
4174: IFFALSE 4206
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4176: LD_INT 1
4178: PPUSH
4179: LD_INT 5
4181: PPUSH
4182: LD_VAR 0 4
4186: PPUSH
4187: LD_VAR 0 5
4191: PPUSH
4192: LD_VAR 0 8
4196: PPUSH
4197: LD_INT 0
4199: PPUSH
4200: CALL_OW 60
4204: GO 4173
4206: POP
4207: POP
// if def_morale_flags then
4208: LD_EXP 52
4212: IFFALSE 4351
// begin x := start_def [ pos ] [ 1 ] ;
4214: LD_ADDR_VAR 0 4
4218: PUSH
4219: LD_EXP 26
4223: PUSH
4224: LD_VAR 0 3
4228: ARRAY
4229: PUSH
4230: LD_INT 1
4232: ARRAY
4233: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4234: LD_ADDR_VAR 0 5
4238: PUSH
4239: LD_EXP 26
4243: PUSH
4244: LD_VAR 0 3
4248: ARRAY
4249: PUSH
4250: LD_INT 2
4252: ARRAY
4253: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4254: LD_VAR 0 4
4258: PPUSH
4259: LD_VAR 0 5
4263: PPUSH
4264: LD_INT 12
4266: PPUSH
4267: LD_INT 2
4269: PPUSH
4270: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4274: LD_ADDR_EXP 31
4278: PUSH
4279: LD_EXP 31
4283: PUSH
4284: LD_VAR 0 1
4288: PPUSH
4289: LD_VAR 0 4
4293: PPUSH
4294: LD_VAR 0 5
4298: PPUSH
4299: LD_INT 1
4301: PUSH
4302: LD_INT 100
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: PUSH
4309: LD_INT 2
4311: PUSH
4312: LD_INT 50
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 3
4321: PUSH
4322: LD_INT 20
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: LD_INT 20
4331: PUSH
4332: LD_INT 100
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: PPUSH
4345: CALL_OW 418
4349: ADD
4350: ST_TO_ADDR
// end ; commander := true ;
4351: LD_ADDR_LOC 1
4355: PUSH
4356: LD_INT 1
4358: ST_TO_ADDR
// soldiers_created := 0 ;
4359: LD_ADDR_LOC 4
4363: PUSH
4364: LD_INT 0
4366: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4367: LD_ADDR_VAR 0 7
4371: PUSH
4372: DOUBLE
4373: LD_INT 1
4375: DEC
4376: ST_TO_ADDR
4377: LD_EXP 4
4381: PUSH
4382: FOR_TO
4383: IFFALSE 4536
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4385: LD_ADDR_VAR 0 4
4389: PUSH
4390: LD_EXP 25
4394: PUSH
4395: LD_VAR 0 3
4399: ARRAY
4400: PUSH
4401: LD_VAR 0 7
4405: ARRAY
4406: PUSH
4407: LD_INT 1
4409: ARRAY
4410: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4411: LD_ADDR_VAR 0 5
4415: PUSH
4416: LD_EXP 25
4420: PUSH
4421: LD_VAR 0 3
4425: ARRAY
4426: PUSH
4427: LD_VAR 0 7
4431: ARRAY
4432: PUSH
4433: LD_INT 2
4435: ARRAY
4436: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4437: LD_ADDR_VAR 0 6
4441: PUSH
4442: LD_EXP 25
4446: PUSH
4447: LD_VAR 0 3
4451: ARRAY
4452: PUSH
4453: LD_VAR 0 7
4457: ARRAY
4458: PUSH
4459: LD_INT 3
4461: ARRAY
4462: ST_TO_ADDR
// bc_type := b_breastwork ;
4463: LD_ADDR_OWVAR 42
4467: PUSH
4468: LD_INT 31
4470: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4471: LD_ADDR_VAR 0 9
4475: PUSH
4476: LD_VAR 0 4
4480: PPUSH
4481: LD_VAR 0 5
4485: PPUSH
4486: LD_VAR 0 6
4490: PPUSH
4491: CALL_OW 47
4495: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4496: LD_INT 1
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: LD_INT 0
4504: PPUSH
4505: LD_INT 0
4507: PPUSH
4508: LD_INT 0
4510: PPUSH
4511: LD_VAR 0 9
4515: PPUSH
4516: CALL 3181 0 6
// soldiers_created := soldiers_created + 1 ;
4520: LD_ADDR_LOC 4
4524: PUSH
4525: LD_LOC 4
4529: PUSH
4530: LD_INT 1
4532: PLUS
4533: ST_TO_ADDR
// end ;
4534: GO 4382
4536: POP
4537: POP
// x := start_def [ pos ] [ 1 ] ;
4538: LD_ADDR_VAR 0 4
4542: PUSH
4543: LD_EXP 26
4547: PUSH
4548: LD_VAR 0 3
4552: ARRAY
4553: PUSH
4554: LD_INT 1
4556: ARRAY
4557: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4558: LD_ADDR_VAR 0 5
4562: PUSH
4563: LD_EXP 26
4567: PUSH
4568: LD_VAR 0 3
4572: ARRAY
4573: PUSH
4574: LD_INT 2
4576: ARRAY
4577: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4578: LD_LOC 8
4582: PUSH
4583: LD_EXP 4
4587: MINUS
4588: PPUSH
4589: LD_INT 1
4591: PPUSH
4592: LD_VAR 0 4
4596: PPUSH
4597: LD_VAR 0 5
4601: PPUSH
4602: LD_INT 5
4604: PPUSH
4605: LD_INT 0
4607: PPUSH
4608: CALL 3181 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4612: LD_LOC 5
4616: PPUSH
4617: LD_INT 2
4619: PPUSH
4620: LD_VAR 0 4
4624: PPUSH
4625: LD_VAR 0 5
4629: PPUSH
4630: LD_INT 5
4632: PPUSH
4633: LD_INT 0
4635: PPUSH
4636: CALL 3181 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4640: LD_LOC 7
4644: PPUSH
4645: LD_INT 3
4647: PPUSH
4648: LD_VAR 0 4
4652: PPUSH
4653: LD_VAR 0 5
4657: PPUSH
4658: LD_INT 5
4660: PPUSH
4661: LD_INT 0
4663: PPUSH
4664: CALL 3181 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4668: LD_LOC 6
4672: PPUSH
4673: LD_INT 4
4675: PPUSH
4676: LD_VAR 0 4
4680: PPUSH
4681: LD_VAR 0 5
4685: PPUSH
4686: LD_INT 5
4688: PPUSH
4689: LD_INT 0
4691: PPUSH
4692: CALL 3181 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4696: LD_EXP 53
4700: PUSH
4701: LD_INT 20
4703: PPUSH
4704: LD_VAR 0 1
4708: PPUSH
4709: CALL_OW 321
4713: PUSH
4714: LD_INT 1
4716: EQUAL
4717: AND
4718: IFFALSE 4735
// SetTech ( tech_SibDet , side , state_researched ) ;
4720: LD_INT 20
4722: PPUSH
4723: LD_VAR 0 1
4727: PPUSH
4728: LD_INT 2
4730: PPUSH
4731: CALL_OW 322
// if def_siberite_bomb = 1 then
4735: LD_EXP 56
4739: PUSH
4740: LD_INT 1
4742: EQUAL
4743: IFFALSE 4777
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4745: LD_INT 25
4747: PPUSH
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4760: LD_INT 73
4762: PPUSH
4763: LD_VAR 0 1
4767: PPUSH
4768: LD_INT 1
4770: PPUSH
4771: CALL_OW 322
// end else
4775: GO 4807
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4777: LD_INT 25
4779: PPUSH
4780: LD_VAR 0 1
4784: PPUSH
4785: LD_INT 0
4787: PPUSH
4788: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4792: LD_INT 73
4794: PPUSH
4795: LD_VAR 0 1
4799: PPUSH
4800: LD_INT 0
4802: PPUSH
4803: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4807: LD_INT 24
4809: PPUSH
4810: LD_VAR 0 1
4814: PPUSH
4815: LD_INT 0
4817: PPUSH
4818: CALL_OW 322
// global_defined := true ;
4822: LD_ADDR_LOC 3
4826: PUSH
4827: LD_INT 1
4829: ST_TO_ADDR
// end ;
4830: LD_VAR 0 2
4834: RET
// every 0 0$1 do
4835: GO 4837
4837: DISABLE
// if ( def_siberite_bomb > 1 ) then
4838: LD_EXP 56
4842: PUSH
4843: LD_INT 1
4845: GREATER
4846: IFFALSE 4861
// begin wait ( siberite_bomb_Delay ) ;
4848: LD_EXP 16
4852: PPUSH
4853: CALL_OW 67
// EnableSibFiss ;
4857: CALL 4862 0 0
// end ;
4861: END
// function EnableSibFiss ; var i ; begin
4862: LD_INT 0
4864: PPUSH
4865: PPUSH
// for i := 1 to 8 do
4866: LD_ADDR_VAR 0 2
4870: PUSH
4871: DOUBLE
4872: LD_INT 1
4874: DEC
4875: ST_TO_ADDR
4876: LD_INT 8
4878: PUSH
4879: FOR_TO
4880: IFFALSE 4926
// if Side_Positions [ i ] then
4882: LD_EXP 19
4886: PUSH
4887: LD_VAR 0 2
4891: ARRAY
4892: IFFALSE 4924
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4894: LD_INT 25
4896: PPUSH
4897: LD_VAR 0 2
4901: PPUSH
4902: LD_INT 1
4904: PPUSH
4905: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4909: LD_INT 73
4911: PPUSH
4912: LD_VAR 0 2
4916: PPUSH
4917: LD_INT 1
4919: PPUSH
4920: CALL_OW 322
// end ;
4924: GO 4879
4926: POP
4927: POP
// end ;
4928: LD_VAR 0 1
4932: RET
// function prepare_sides ; var i ; begin
4933: LD_INT 0
4935: PPUSH
4936: PPUSH
// global_units := [ ] ;
4937: LD_ADDR_LOC 2
4941: PUSH
4942: EMPTY
4943: ST_TO_ADDR
// global_defined := false ;
4944: LD_ADDR_LOC 3
4948: PUSH
4949: LD_INT 0
4951: ST_TO_ADDR
// CountClassMembers ;
4952: CALL 5002 0 0
// for i := 1 to 8 do
4956: LD_ADDR_VAR 0 2
4960: PUSH
4961: DOUBLE
4962: LD_INT 1
4964: DEC
4965: ST_TO_ADDR
4966: LD_INT 8
4968: PUSH
4969: FOR_TO
4970: IFFALSE 4995
// if Side_Positions [ i ] then
4972: LD_EXP 19
4976: PUSH
4977: LD_VAR 0 2
4981: ARRAY
4982: IFFALSE 4993
// prepare_side ( i ) ;
4984: LD_VAR 0 2
4988: PPUSH
4989: CALL 3769 0 1
4993: GO 4969
4995: POP
4996: POP
// end ;
4997: LD_VAR 0 1
5001: RET
// function CountClassMembers ; var Mode ; begin
5002: LD_INT 0
5004: PPUSH
5005: PPUSH
// if No_Mechs then
5006: LD_EXP 58
5010: IFFALSE 5022
// Mode := 2 else
5012: LD_ADDR_VAR 0 2
5016: PUSH
5017: LD_INT 2
5019: ST_TO_ADDR
5020: GO 5030
// Mode := 1 ;
5022: LD_ADDR_VAR 0 2
5026: PUSH
5027: LD_INT 1
5029: ST_TO_ADDR
// neng := number_of_people ;
5030: LD_ADDR_LOC 5
5034: PUSH
5035: LD_EXP 5
5039: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5040: LD_ADDR_LOC 8
5044: PUSH
5045: LD_LOC 5
5049: PUSH
5050: LD_INT 4
5052: PUSH
5053: LD_INT 3
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_VAR 0 2
5064: ARRAY
5065: DIV
5066: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5067: LD_LOC 8
5071: PUSH
5072: LD_EXP 4
5076: LESS
5077: IFFALSE 5089
// nsol := number_of_breastworks ;
5079: LD_ADDR_LOC 8
5083: PUSH
5084: LD_EXP 4
5088: ST_TO_ADDR
// neng := neng - nsol ;
5089: LD_ADDR_LOC 5
5093: PUSH
5094: LD_LOC 5
5098: PUSH
5099: LD_LOC 8
5103: MINUS
5104: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5105: LD_ADDR_LOC 6
5109: PUSH
5110: LD_LOC 5
5114: PUSH
5115: LD_INT 3
5117: PUSH
5118: LD_INT 2
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PUSH
5125: LD_VAR 0 2
5129: ARRAY
5130: DIV
5131: ST_TO_ADDR
// if ( nsci < 1 ) then
5132: LD_LOC 6
5136: PUSH
5137: LD_INT 1
5139: LESS
5140: IFFALSE 5150
// nsci := 1 ;
5142: LD_ADDR_LOC 6
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// neng := neng - nsci ;
5150: LD_ADDR_LOC 5
5154: PUSH
5155: LD_LOC 5
5159: PUSH
5160: LD_LOC 6
5164: MINUS
5165: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5166: LD_ADDR_LOC 7
5170: PUSH
5171: LD_LOC 5
5175: PUSH
5176: LD_INT 2
5178: DIV
5179: PUSH
5180: LD_INT 0
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_VAR 0 2
5191: ARRAY
5192: ST_TO_ADDR
// neng := neng - nmech ;
5193: LD_ADDR_LOC 5
5197: PUSH
5198: LD_LOC 5
5202: PUSH
5203: LD_LOC 7
5207: MINUS
5208: ST_TO_ADDR
// if ( neng < 1 ) then
5209: LD_LOC 5
5213: PUSH
5214: LD_INT 1
5216: LESS
5217: IFFALSE 5227
// neng := 1 ;
5219: LD_ADDR_LOC 5
5223: PUSH
5224: LD_INT 1
5226: ST_TO_ADDR
// end ;
5227: LD_VAR 0 1
5231: RET
// starting begin disable ( 98 ) ;
5232: LD_INT 98
5234: DISABLE_MARKED
// disable ( 99 ) ;
5235: LD_INT 99
5237: DISABLE_MARKED
// disable ( 100 ) ;
5238: LD_INT 100
5240: DISABLE_MARKED
// disable ( 200 ) ;
5241: LD_INT 200
5243: DISABLE_MARKED
// disable ( 400 ) ;
5244: LD_INT 400
5246: DISABLE_MARKED
// disable ( 401 ) ;
5247: LD_INT 401
5249: DISABLE_MARKED
// disable ( 600 ) ;
5250: LD_INT 600
5252: DISABLE_MARKED
// mp_selectmsg := true ;
5253: LD_ADDR_OWVAR 13
5257: PUSH
5258: LD_INT 1
5260: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5261: CALL 68 0 0
// init_map ;
5265: CALL 1764 0 0
// set_shared_visions_and_alliances ;
5269: CALL 2893 0 0
// ResetFog ;
5273: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5277: LD_OWVAR 2
5281: PPUSH
5282: CALL_OW 520
// prepare_sides ;
5286: CALL 4933 0 0
// init_respawning ;
5290: CALL 6986 0 0
// Init_Win_Condition ;
5294: CALL 14090 0 0
// InitLimits ;
5298: CALL 12679 0 0
// ShowTimer ;
5302: CALL 13616 0 0
// case Game_Type of 3 :
5306: LD_EXP 42
5310: PUSH
5311: LD_INT 3
5313: DOUBLE
5314: EQUAL
5315: IFTRUE 5319
5317: GO 5325
5319: POP
// enable ( 100 ) ; 4 :
5320: LD_INT 100
5322: ENABLE_MARKED
5323: GO 5341
5325: LD_INT 4
5327: DOUBLE
5328: EQUAL
5329: IFTRUE 5333
5331: GO 5340
5333: POP
// InitBloodGods ; end ;
5334: CALL 10234 0 0
5338: GO 5341
5340: POP
// music_nat := Side_Nations [ your_side ] ;
5341: LD_ADDR_OWVAR 71
5345: PUSH
5346: LD_EXP 20
5350: PUSH
5351: LD_OWVAR 2
5355: ARRAY
5356: ST_TO_ADDR
// if IAmSpec then
5357: CALL_OW 531
5361: IFFALSE 5385
// begin fogOff ( true ) ;
5363: LD_INT 1
5365: PPUSH
5366: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
5370: LD_INT 104
5372: PPUSH
5373: LD_INT 69
5375: PPUSH
5376: CALL_OW 86
// enable ( 400 ) ;
5380: LD_INT 400
5382: ENABLE_MARKED
// end else
5383: GO 5431
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5385: LD_EXP 26
5389: PUSH
5390: LD_EXP 19
5394: PUSH
5395: LD_OWVAR 2
5399: ARRAY
5400: ARRAY
5401: PUSH
5402: LD_INT 1
5404: ARRAY
5405: PPUSH
5406: LD_EXP 26
5410: PUSH
5411: LD_EXP 19
5415: PUSH
5416: LD_OWVAR 2
5420: ARRAY
5421: ARRAY
5422: PUSH
5423: LD_INT 2
5425: ARRAY
5426: PPUSH
5427: CALL_OW 86
// end ; InitApeman ;
5431: CALL 6167 0 0
// if def_builduptime then
5435: LD_EXP 57
5439: IFFALSE 5445
// BeginBuildUp ;
5441: CALL 8865 0 0
// end ; end_of_file
5445: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5446: GO 5448
5448: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5449: LD_INT 4
5451: PPUSH
5452: LD_INT 5
5454: PPUSH
5455: CALL_OW 12
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: CALL_OW 57
// enable ;
5467: ENABLE
// end ;
5468: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5469: GO 5471
5471: DISABLE
5472: LD_INT 0
5474: PPUSH
5475: PPUSH
// begin case tick of 1 .. 1 1$0 :
5476: LD_OWVAR 1
5480: PUSH
5481: LD_INT 1
5483: DOUBLE
5484: GREATEREQUAL
5485: IFFALSE 5493
5487: LD_INT 2100
5489: DOUBLE
5490: LESSEQUAL
5491: IFTRUE 5495
5493: GO 5523
5495: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5496: LD_EXP 9
5500: PUSH
5501: LD_INT 100
5503: DIVREAL
5504: PUSH
5505: LD_INT 350
5507: PPUSH
5508: LD_INT 1050
5510: PPUSH
5511: CALL_OW 12
5515: MUL
5516: PPUSH
5517: CALL_OW 67
5521: GO 5825
5523: LD_INT 2100
5525: PUSH
5526: LD_INT 1
5528: PLUS
5529: DOUBLE
5530: GREATEREQUAL
5531: IFFALSE 5539
5533: LD_INT 10500
5535: DOUBLE
5536: LESSEQUAL
5537: IFTRUE 5541
5539: GO 5569
5541: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5542: LD_EXP 9
5546: PUSH
5547: LD_INT 100
5549: DIVREAL
5550: PUSH
5551: LD_INT 1050
5553: PPUSH
5554: LD_INT 1575
5556: PPUSH
5557: CALL_OW 12
5561: MUL
5562: PPUSH
5563: CALL_OW 67
5567: GO 5825
5569: LD_INT 10500
5571: PUSH
5572: LD_INT 1
5574: PLUS
5575: DOUBLE
5576: GREATEREQUAL
5577: IFFALSE 5585
5579: LD_INT 21000
5581: DOUBLE
5582: LESSEQUAL
5583: IFTRUE 5587
5585: GO 5615
5587: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5588: LD_EXP 9
5592: PUSH
5593: LD_INT 100
5595: DIVREAL
5596: PUSH
5597: LD_INT 1575
5599: PPUSH
5600: LD_INT 2100
5602: PPUSH
5603: CALL_OW 12
5607: MUL
5608: PPUSH
5609: CALL_OW 67
5613: GO 5825
5615: LD_INT 21000
5617: PUSH
5618: LD_INT 1
5620: PLUS
5621: DOUBLE
5622: GREATEREQUAL
5623: IFFALSE 5631
5625: LD_INT 42000
5627: DOUBLE
5628: LESSEQUAL
5629: IFTRUE 5633
5631: GO 5661
5633: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5634: LD_EXP 9
5638: PUSH
5639: LD_INT 100
5641: DIVREAL
5642: PUSH
5643: LD_INT 2100
5645: PPUSH
5646: LD_INT 2625
5648: PPUSH
5649: CALL_OW 12
5653: MUL
5654: PPUSH
5655: CALL_OW 67
5659: GO 5825
5661: LD_INT 42000
5663: PUSH
5664: LD_INT 1
5666: PLUS
5667: DOUBLE
5668: GREATEREQUAL
5669: IFFALSE 5677
5671: LD_INT 63000
5673: DOUBLE
5674: LESSEQUAL
5675: IFTRUE 5679
5677: GO 5707
5679: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5680: LD_EXP 9
5684: PUSH
5685: LD_INT 100
5687: DIVREAL
5688: PUSH
5689: LD_INT 2625
5691: PPUSH
5692: LD_INT 3150
5694: PPUSH
5695: CALL_OW 12
5699: MUL
5700: PPUSH
5701: CALL_OW 67
5705: GO 5825
5707: LD_INT 63000
5709: PUSH
5710: LD_INT 1
5712: PLUS
5713: DOUBLE
5714: GREATEREQUAL
5715: IFFALSE 5723
5717: LD_INT 105000
5719: DOUBLE
5720: LESSEQUAL
5721: IFTRUE 5725
5723: GO 5753
5725: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5726: LD_EXP 9
5730: PUSH
5731: LD_INT 100
5733: DIVREAL
5734: PUSH
5735: LD_INT 3150
5737: PPUSH
5738: LD_INT 3675
5740: PPUSH
5741: CALL_OW 12
5745: MUL
5746: PPUSH
5747: CALL_OW 67
5751: GO 5825
5753: LD_INT 105000
5755: PUSH
5756: LD_INT 1
5758: PLUS
5759: DOUBLE
5760: GREATEREQUAL
5761: IFFALSE 5769
5763: LD_INT 630000
5765: DOUBLE
5766: LESSEQUAL
5767: IFTRUE 5771
5769: GO 5799
5771: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5772: LD_EXP 9
5776: PUSH
5777: LD_INT 100
5779: DIVREAL
5780: PUSH
5781: LD_INT 3675
5783: PPUSH
5784: LD_INT 4200
5786: PPUSH
5787: CALL_OW 12
5791: MUL
5792: PPUSH
5793: CALL_OW 67
5797: GO 5825
5799: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5800: LD_EXP 9
5804: PUSH
5805: LD_INT 100
5807: DIVREAL
5808: PUSH
5809: LD_INT 4200
5811: PPUSH
5812: LD_INT 5250
5814: PPUSH
5815: CALL_OW 12
5819: MUL
5820: PPUSH
5821: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5825: LD_ADDR_VAR 0 2
5829: PUSH
5830: LD_INT 3
5832: PPUSH
5833: LD_INT 5
5835: PPUSH
5836: CALL_OW 12
5840: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5841: LD_ADDR_VAR 0 1
5845: PUSH
5846: LD_EXP 19
5850: PUSH
5851: LD_INT 0
5853: PUSH
5854: EMPTY
5855: LIST
5856: DIFF
5857: PUSH
5858: FOR_IN
5859: IFFALSE 5908
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5861: LD_VAR 0 2
5865: PPUSH
5866: LD_EXP 26
5870: PUSH
5871: LD_VAR 0 1
5875: ARRAY
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: LD_EXP 26
5885: PUSH
5886: LD_VAR 0 1
5890: ARRAY
5891: PUSH
5892: LD_INT 2
5894: ARRAY
5895: PPUSH
5896: LD_INT 20
5898: PPUSH
5899: LD_INT 1
5901: PPUSH
5902: CALL_OW 56
5906: GO 5858
5908: POP
5909: POP
// enable ;
5910: ENABLE
// end ;
5911: PPOPN 2
5913: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
5914: GO 5916
5916: DISABLE
5917: LD_INT 0
5919: PPUSH
5920: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
5921: LD_INT 1
5923: PPUSH
5924: LD_INT 1
5926: PPUSH
5927: CALL_OW 287
5931: PUSH
5932: LD_INT 200
5934: PUSH
5935: LD_EXP 9
5939: MINUS
5940: PUSH
5941: LD_INT 100
5943: DIVREAL
5944: PUSH
5945: LD_INT 5
5947: MUL
5948: LESS
5949: IFFALSE 5972
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
5951: LD_INT 3
5953: PPUSH
5954: LD_INT 5
5956: PPUSH
5957: CALL_OW 12
5961: PPUSH
5962: LD_INT 1
5964: PPUSH
5965: LD_INT 1
5967: PPUSH
5968: CALL_OW 55
// enable ;
5972: ENABLE
// end ; end_of_file
5973: PPOPN 2
5975: END
// every 20 20$00 trigger apemanNumber do
5976: LD_EXP 34
5980: IFFALSE 6013
5982: GO 5984
5984: DISABLE
// begin enable ;
5985: ENABLE
// if apeLevel >= 8 then
5986: LD_EXP 39
5990: PUSH
5991: LD_INT 8
5993: GREATEREQUAL
5994: IFFALSE 5999
// disable else
5996: DISABLE
5997: GO 6013
// apeLevel := apeLevel + 1 ;
5999: LD_ADDR_EXP 39
6003: PUSH
6004: LD_EXP 39
6008: PUSH
6009: LD_INT 1
6011: PLUS
6012: ST_TO_ADDR
// end ;
6013: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6014: LD_EXP 34
6018: PUSH
6019: LD_EXP 35
6023: LESS
6024: IFFALSE 6164
6026: GO 6028
6028: DISABLE
6029: LD_INT 0
6031: PPUSH
6032: PPUSH
6033: PPUSH
6034: PPUSH
// begin enable ;
6035: ENABLE
// for i := 1 to apemanPos do
6036: LD_ADDR_VAR 0 1
6040: PUSH
6041: DOUBLE
6042: LD_INT 1
6044: DEC
6045: ST_TO_ADDR
6046: LD_EXP 37
6050: PUSH
6051: FOR_TO
6052: IFFALSE 6162
// begin if apemanPlayerCount [ i ] then
6054: LD_EXP 38
6058: PUSH
6059: LD_VAR 0 1
6063: ARRAY
6064: IFFALSE 6160
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6066: LD_EXP 38
6070: PUSH
6071: LD_VAR 0 1
6075: ARRAY
6076: PUSH
6077: LD_EXP 37
6081: PUSH
6082: LD_VAR 0 1
6086: ARRAY
6087: GREATER
6088: IFFALSE 6160
// begin ape := PrepareApeman ;
6090: LD_ADDR_VAR 0 2
6094: PUSH
6095: CALL 6675 0 0
6099: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6100: LD_VAR 0 2
6104: PPUSH
6105: LD_EXP 40
6109: PUSH
6110: LD_VAR 0 1
6114: ARRAY
6115: PPUSH
6116: LD_INT 0
6118: PPUSH
6119: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6123: LD_ADDR_EXP 37
6127: PUSH
6128: LD_EXP 37
6132: PPUSH
6133: LD_VAR 0 1
6137: PPUSH
6138: LD_EXP 37
6142: PUSH
6143: LD_VAR 0 1
6147: ARRAY
6148: PUSH
6149: LD_VAR 0 2
6153: UNION
6154: PPUSH
6155: CALL_OW 1
6159: ST_TO_ADDR
// end ; end ; end ;
6160: GO 6051
6162: POP
6163: POP
// end ;
6164: PPOPN 4
6166: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6167: LD_INT 0
6169: PPUSH
6170: PPUSH
6171: PPUSH
6172: PPUSH
6173: PPUSH
6174: PPUSH
6175: PPUSH
// playersAmount := 0 ;
6176: LD_ADDR_VAR 0 3
6180: PUSH
6181: LD_INT 0
6183: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6184: LD_ADDR_VAR 0 7
6188: PUSH
6189: LD_INT 2
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: LD_INT 4
6197: PUSH
6198: LD_INT 5
6200: PUSH
6201: LD_INT 6
6203: PUSH
6204: LD_INT 7
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6215: LD_ADDR_EXP 40
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: LD_INT 0
6225: PUSH
6226: LD_INT 0
6228: PUSH
6229: LD_INT 0
6231: PUSH
6232: LD_INT 0
6234: PUSH
6235: LD_INT 0
6237: PUSH
6238: LD_INT 0
6240: PUSH
6241: LD_INT 0
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: ST_TO_ADDR
// for j = 1 to Side_Positions do
6254: LD_ADDR_VAR 0 4
6258: PUSH
6259: DOUBLE
6260: LD_INT 1
6262: DEC
6263: ST_TO_ADDR
6264: LD_EXP 19
6268: PUSH
6269: FOR_TO
6270: IFFALSE 6337
// if Side_Positions [ j ] then
6272: LD_EXP 19
6276: PUSH
6277: LD_VAR 0 4
6281: ARRAY
6282: IFFALSE 6335
// begin playersAmount := playersAmount + 1 ;
6284: LD_ADDR_VAR 0 3
6288: PUSH
6289: LD_VAR 0 3
6293: PUSH
6294: LD_INT 1
6296: PLUS
6297: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6298: LD_ADDR_EXP 40
6302: PUSH
6303: LD_EXP 40
6307: PPUSH
6308: LD_VAR 0 4
6312: PPUSH
6313: LD_VAR 0 7
6317: PUSH
6318: LD_EXP 19
6322: PUSH
6323: LD_VAR 0 4
6327: ARRAY
6328: ARRAY
6329: PPUSH
6330: CALL_OW 1
6334: ST_TO_ADDR
// end ;
6335: GO 6269
6337: POP
6338: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6339: LD_ADDR_EXP 36
6343: PUSH
6344: LD_INT 3
6346: PUSH
6347: LD_EXP 15
6351: MUL
6352: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6353: LD_ADDR_EXP 34
6357: PUSH
6358: LD_VAR 0 3
6362: PUSH
6363: LD_EXP 36
6367: MUL
6368: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6369: LD_ADDR_EXP 35
6373: PUSH
6374: LD_EXP 34
6378: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6379: LD_ADDR_EXP 37
6383: PUSH
6384: LD_INT 0
6386: PUSH
6387: LD_INT 0
6389: PUSH
6390: LD_INT 0
6392: PUSH
6393: LD_INT 0
6395: PUSH
6396: LD_INT 0
6398: PUSH
6399: LD_INT 0
6401: PUSH
6402: LD_INT 0
6404: PUSH
6405: LD_INT 0
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6418: LD_ADDR_EXP 38
6422: PUSH
6423: LD_INT 0
6425: PUSH
6426: LD_INT 0
6428: PUSH
6429: LD_INT 0
6431: PUSH
6432: LD_INT 0
6434: PUSH
6435: LD_INT 0
6437: PUSH
6438: LD_INT 0
6440: PUSH
6441: LD_INT 0
6443: PUSH
6444: LD_INT 0
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: ST_TO_ADDR
// apeLevel := 1 ;
6457: LD_ADDR_EXP 39
6461: PUSH
6462: LD_INT 1
6464: ST_TO_ADDR
// if not apemanNumber then
6465: LD_EXP 34
6469: NOT
6470: IFFALSE 6474
// exit ;
6472: GO 6670
// for i := 1 to apemanPerPlayer do
6474: LD_ADDR_VAR 0 2
6478: PUSH
6479: DOUBLE
6480: LD_INT 1
6482: DEC
6483: ST_TO_ADDR
6484: LD_EXP 36
6488: PUSH
6489: FOR_TO
6490: IFFALSE 6668
// begin for j := 1 to Side_Positions do
6492: LD_ADDR_VAR 0 4
6496: PUSH
6497: DOUBLE
6498: LD_INT 1
6500: DEC
6501: ST_TO_ADDR
6502: LD_EXP 19
6506: PUSH
6507: FOR_TO
6508: IFFALSE 6664
// if Side_Positions [ j ] then
6510: LD_EXP 19
6514: PUSH
6515: LD_VAR 0 4
6519: ARRAY
6520: IFFALSE 6662
// begin pos := Side_Positions [ j ] ;
6522: LD_ADDR_VAR 0 6
6526: PUSH
6527: LD_EXP 19
6531: PUSH
6532: LD_VAR 0 4
6536: ARRAY
6537: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6538: LD_ADDR_EXP 38
6542: PUSH
6543: LD_EXP 38
6547: PPUSH
6548: LD_VAR 0 4
6552: PPUSH
6553: LD_EXP 38
6557: PUSH
6558: LD_VAR 0 4
6562: ARRAY
6563: PUSH
6564: LD_INT 1
6566: PLUS
6567: PPUSH
6568: CALL_OW 1
6572: ST_TO_ADDR
// ape := PrepareApeman ;
6573: LD_ADDR_VAR 0 5
6577: PUSH
6578: CALL 6675 0 0
6582: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6583: LD_ADDR_EXP 37
6587: PUSH
6588: LD_EXP 37
6592: PPUSH
6593: LD_VAR 0 4
6597: PPUSH
6598: LD_EXP 37
6602: PUSH
6603: LD_VAR 0 4
6607: ARRAY
6608: PPUSH
6609: LD_EXP 37
6613: PUSH
6614: LD_VAR 0 4
6618: ARRAY
6619: PUSH
6620: LD_INT 1
6622: PLUS
6623: PPUSH
6624: LD_VAR 0 5
6628: PPUSH
6629: CALL_OW 1
6633: PPUSH
6634: CALL_OW 1
6638: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6639: LD_VAR 0 5
6643: PPUSH
6644: LD_EXP 40
6648: PUSH
6649: LD_VAR 0 4
6653: ARRAY
6654: PPUSH
6655: LD_INT 0
6657: PPUSH
6658: CALL_OW 49
// end ;
6662: GO 6507
6664: POP
6665: POP
// end ;
6666: GO 6489
6668: POP
6669: POP
// end ;
6670: LD_VAR 0 1
6674: RET
// export function PrepareApeman ; var bonus ; begin
6675: LD_INT 0
6677: PPUSH
6678: PPUSH
// uc_side := 0 ;
6679: LD_ADDR_OWVAR 20
6683: PUSH
6684: LD_INT 0
6686: ST_TO_ADDR
// uc_nation := 0 ;
6687: LD_ADDR_OWVAR 21
6691: PUSH
6692: LD_INT 0
6694: ST_TO_ADDR
// InitHc ;
6695: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6699: LD_ADDR_VAR 0 2
6703: PUSH
6704: LD_INT 1
6706: NEG
6707: PUSH
6708: LD_INT 0
6710: PUSH
6711: LD_INT 1
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: PUSH
6719: LD_OWVAR 1
6723: PUSH
6724: LD_INT 3
6726: MOD
6727: PUSH
6728: LD_INT 1
6730: PLUS
6731: ARRAY
6732: ST_TO_ADDR
// hc_class := class_apeman ;
6733: LD_ADDR_OWVAR 28
6737: PUSH
6738: LD_INT 12
6740: ST_TO_ADDR
// hc_gallery :=  ;
6741: LD_ADDR_OWVAR 33
6745: PUSH
6746: LD_STRING 
6748: ST_TO_ADDR
// hc_name :=  ;
6749: LD_ADDR_OWVAR 26
6753: PUSH
6754: LD_STRING 
6756: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6757: LD_ADDR_OWVAR 31
6761: PUSH
6762: LD_EXP 39
6766: PUSH
6767: LD_VAR 0 2
6771: PLUS
6772: PUSH
6773: LD_EXP 39
6777: PUSH
6778: LD_VAR 0 2
6782: PLUS
6783: PUSH
6784: LD_EXP 39
6788: PUSH
6789: LD_VAR 0 2
6793: PLUS
6794: PUSH
6795: LD_EXP 39
6799: PUSH
6800: LD_VAR 0 2
6804: PLUS
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6812: LD_ADDR_OWVAR 29
6816: PUSH
6817: LD_INT 12
6819: PUSH
6820: LD_INT 10
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: ST_TO_ADDR
// result := CreateHuman ;
6827: LD_ADDR_VAR 0 1
6831: PUSH
6832: CALL_OW 44
6836: ST_TO_ADDR
// end ;
6837: LD_VAR 0 1
6841: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6842: LD_INT 0
6844: PPUSH
6845: PPUSH
6846: PPUSH
// if not ape then
6847: LD_VAR 0 1
6851: NOT
6852: IFFALSE 6856
// exit ;
6854: GO 6981
// side := GetSide ( ape ) ;
6856: LD_ADDR_VAR 0 3
6860: PUSH
6861: LD_VAR 0 1
6865: PPUSH
6866: CALL_OW 255
6870: ST_TO_ADDR
// if not side then
6871: LD_VAR 0 3
6875: NOT
6876: IFFALSE 6930
// begin for i = 1 to apemanPos do
6878: LD_ADDR_VAR 0 4
6882: PUSH
6883: DOUBLE
6884: LD_INT 1
6886: DEC
6887: ST_TO_ADDR
6888: LD_EXP 37
6892: PUSH
6893: FOR_TO
6894: IFFALSE 6928
// if ape in apemanPos [ i ] then
6896: LD_VAR 0 1
6900: PUSH
6901: LD_EXP 37
6905: PUSH
6906: LD_VAR 0 4
6910: ARRAY
6911: IN
6912: IFFALSE 6926
// begin side := i ;
6914: LD_ADDR_VAR 0 3
6918: PUSH
6919: LD_VAR 0 4
6923: ST_TO_ADDR
// break ;
6924: GO 6928
// end ;
6926: GO 6893
6928: POP
6929: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6930: LD_ADDR_EXP 37
6934: PUSH
6935: LD_EXP 37
6939: PPUSH
6940: LD_VAR 0 3
6944: PPUSH
6945: LD_EXP 37
6949: PUSH
6950: LD_VAR 0 3
6954: ARRAY
6955: PUSH
6956: LD_VAR 0 1
6960: DIFF
6961: PPUSH
6962: CALL_OW 1
6966: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6967: LD_ADDR_EXP 34
6971: PUSH
6972: LD_EXP 34
6976: PUSH
6977: LD_INT 1
6979: MINUS
6980: ST_TO_ADDR
// end ; end_of_file
6981: LD_VAR 0 2
6985: RET
// var respawn , inqueue ; export function init_respawning ; begin
6986: LD_INT 0
6988: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6989: LD_ADDR_LOC 9
6993: PUSH
6994: LD_INT 1
6996: PPUSH
6997: LD_INT 8
6999: PPUSH
7000: CALL_OW 12
7004: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7005: LD_ADDR_LOC 10
7009: PUSH
7010: LD_INT 0
7012: PUSH
7013: LD_INT 0
7015: PUSH
7016: LD_INT 0
7018: PUSH
7019: LD_INT 0
7021: PUSH
7022: LD_INT 0
7024: PUSH
7025: LD_INT 0
7027: PUSH
7028: LD_INT 0
7030: PUSH
7031: LD_INT 0
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: ST_TO_ADDR
// end ;
7044: LD_VAR 0 1
7048: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
7049: GO 7051
7051: DISABLE
7052: LD_INT 0
7054: PPUSH
7055: PPUSH
7056: PPUSH
7057: PPUSH
// begin if respawning_time_max = 0 then
7058: LD_EXP 13
7062: PUSH
7063: LD_INT 0
7065: EQUAL
7066: IFFALSE 7070
// exit ;
7068: GO 7577
// if respawn = 8 then
7070: LD_LOC 9
7074: PUSH
7075: LD_INT 8
7077: EQUAL
7078: IFFALSE 7090
// respawn := 1 else
7080: LD_ADDR_LOC 9
7084: PUSH
7085: LD_INT 1
7087: ST_TO_ADDR
7088: GO 7104
// respawn := respawn + 1 ;
7090: LD_ADDR_LOC 9
7094: PUSH
7095: LD_LOC 9
7099: PUSH
7100: LD_INT 1
7102: PLUS
7103: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
7104: LD_EXP 19
7108: PUSH
7109: LD_LOC 9
7113: ARRAY
7114: PUSH
7115: LD_LOC 10
7119: PUSH
7120: LD_LOC 9
7124: ARRAY
7125: NOT
7126: AND
7127: IFFALSE 7576
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
7129: LD_ADDR_VAR 0 1
7133: PUSH
7134: LD_INT 21
7136: PUSH
7137: LD_INT 1
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: PUSH
7144: LD_INT 22
7146: PUSH
7147: LD_LOC 9
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 3
7158: PUSH
7159: LD_INT 23
7161: PUSH
7162: LD_INT 0
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: PPUSH
7175: CALL_OW 69
7179: ST_TO_ADDR
// if n < number_of_people then
7180: LD_VAR 0 1
7184: PUSH
7185: LD_EXP 5
7189: LESS
7190: IFFALSE 7573
// begin aktresp := respawn ;
7192: LD_ADDR_VAR 0 3
7196: PUSH
7197: LD_LOC 9
7201: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7202: LD_ADDR_LOC 10
7206: PUSH
7207: LD_LOC 10
7211: PPUSH
7212: LD_VAR 0 3
7216: PPUSH
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 1
7224: ST_TO_ADDR
// enable ;
7225: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7226: LD_EXP 12
7230: PPUSH
7231: LD_EXP 13
7235: PPUSH
7236: CALL_OW 12
7240: PPUSH
7241: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7245: LD_ADDR_LOC 10
7249: PUSH
7250: LD_LOC 10
7254: PPUSH
7255: LD_VAR 0 3
7259: PPUSH
7260: LD_INT 0
7262: PPUSH
7263: CALL_OW 1
7267: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7268: LD_ADDR_VAR 0 2
7272: PUSH
7273: LD_INT 21
7275: PUSH
7276: LD_INT 3
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: PUSH
7283: LD_INT 2
7285: PUSH
7286: LD_INT 30
7288: PUSH
7289: LD_INT 0
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 30
7298: PUSH
7299: LD_INT 1
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: LIST
7310: PUSH
7311: LD_INT 50
7313: PUSH
7314: EMPTY
7315: LIST
7316: PUSH
7317: LD_INT 22
7319: PUSH
7320: LD_VAR 0 3
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: PPUSH
7335: CALL_OW 69
7339: ST_TO_ADDR
// if building_list = 0 then
7340: LD_VAR 0 2
7344: PUSH
7345: LD_INT 0
7347: EQUAL
7348: IFFALSE 7393
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7350: LD_ADDR_VAR 0 2
7354: PUSH
7355: LD_INT 21
7357: PUSH
7358: LD_INT 3
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 50
7367: PUSH
7368: EMPTY
7369: LIST
7370: PUSH
7371: LD_INT 22
7373: PUSH
7374: LD_VAR 0 3
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: PPUSH
7388: CALL_OW 69
7392: ST_TO_ADDR
// if building_list = 0 then
7393: LD_VAR 0 2
7397: PUSH
7398: LD_INT 0
7400: EQUAL
7401: IFFALSE 7405
// exit ;
7403: GO 7577
// hc_name :=  ;
7405: LD_ADDR_OWVAR 26
7409: PUSH
7410: LD_STRING 
7412: ST_TO_ADDR
// hc_importance := 0 ;
7413: LD_ADDR_OWVAR 32
7417: PUSH
7418: LD_INT 0
7420: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7421: LD_INT 0
7423: PPUSH
7424: LD_INT 0
7426: PPUSH
7427: LD_EXP 6
7431: PUSH
7432: LD_INT 2
7434: DIV
7435: PPUSH
7436: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7440: LD_ADDR_OWVAR 21
7444: PUSH
7445: LD_EXP 20
7449: PUSH
7450: LD_VAR 0 3
7454: ARRAY
7455: ST_TO_ADDR
// uc_side := aktresp ;
7456: LD_ADDR_OWVAR 20
7460: PUSH
7461: LD_VAR 0 3
7465: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
7466: LD_ADDR_VAR 0 4
7470: PUSH
7471: LD_VAR 0 2
7475: PUSH
7476: LD_INT 1
7478: PPUSH
7479: LD_VAR 0 2
7483: PUSH
7484: LD_INT 0
7486: PLUS
7487: PPUSH
7488: CALL_OW 12
7492: ARRAY
7493: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
7494: LD_VAR 0 4
7498: PPUSH
7499: CALL_OW 266
7503: PUSH
7504: LD_INT 0
7506: PUSH
7507: LD_INT 1
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: IN
7514: IFFALSE 7526
// n = 25 else
7516: LD_ADDR_VAR 0 1
7520: PUSH
7521: LD_INT 25
7523: ST_TO_ADDR
7524: GO 7534
// n = 10 ;
7526: LD_ADDR_VAR 0 1
7530: PUSH
7531: LD_INT 10
7533: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
7534: CALL_OW 44
7538: PPUSH
7539: LD_VAR 0 4
7543: PPUSH
7544: CALL_OW 250
7548: PPUSH
7549: LD_VAR 0 4
7553: PPUSH
7554: CALL_OW 251
7558: PPUSH
7559: LD_VAR 0 1
7563: PPUSH
7564: LD_INT 1
7566: PPUSH
7567: CALL_OW 50
// end else
7571: GO 7574
// enable ;
7573: ENABLE
// end else
7574: GO 7577
// enable ;
7576: ENABLE
// end ; end_of_file
7577: PPOPN 4
7579: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7580: LD_VAR 0 1
7584: PPUSH
7585: CALL_OW 266
7589: PUSH
7590: LD_INT 0
7592: PUSH
7593: LD_INT 1
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: IN
7600: IFFALSE 7625
// SetBName ( b , @ & GetSide ( b ) ) ;
7602: LD_VAR 0 1
7606: PPUSH
7607: LD_STRING @
7609: PUSH
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 255
7619: STR
7620: PPUSH
7621: CALL_OW 500
// if def_game_rules then
7625: LD_EXP 43
7629: IFFALSE 7666
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7631: LD_VAR 0 1
7635: PPUSH
7636: LD_VAR 0 1
7640: PPUSH
7641: CALL_OW 266
7645: PPUSH
7646: LD_VAR 0 1
7650: PPUSH
7651: CALL_OW 255
7655: PPUSH
7656: LD_INT 0
7658: PPUSH
7659: LD_INT 1
7661: PPUSH
7662: CALL 13080 0 5
// end ;
7666: PPOPN 2
7668: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7669: LD_VAR 0 1
7673: PPUSH
7674: CALL_OW 266
7678: PUSH
7679: LD_INT 0
7681: PUSH
7682: LD_INT 1
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: IN
7689: IFFALSE 7714
// SetBName ( b , @ & GetSide ( b ) ) ;
7691: LD_VAR 0 1
7695: PPUSH
7696: LD_STRING @
7698: PUSH
7699: LD_VAR 0 1
7703: PPUSH
7704: CALL_OW 255
7708: STR
7709: PPUSH
7710: CALL_OW 500
// if def_game_rules then
7714: LD_EXP 43
7718: IFFALSE 7757
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7720: LD_VAR 0 1
7724: PPUSH
7725: LD_VAR 0 1
7729: PPUSH
7730: CALL_OW 266
7734: PPUSH
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 255
7744: PPUSH
7745: LD_VAR 0 2
7749: PPUSH
7750: LD_INT 1
7752: PPUSH
7753: CALL 13080 0 5
// end ;
7757: PPOPN 3
7759: END
// on VehicleConstructed ( veh , fac ) do var side ;
7760: LD_INT 0
7762: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7763: LD_VAR 0 1
7767: PPUSH
7768: CALL_OW 263
7772: PUSH
7773: LD_INT 5
7775: EQUAL
7776: IFFALSE 7918
// begin side := GetSide ( veh ) ;
7778: LD_ADDR_VAR 0 3
7782: PUSH
7783: LD_VAR 0 1
7787: PPUSH
7788: CALL_OW 255
7792: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7793: LD_ADDR_EXP 37
7797: PUSH
7798: LD_EXP 37
7802: PPUSH
7803: LD_VAR 0 3
7807: PPUSH
7808: LD_EXP 37
7812: PUSH
7813: LD_VAR 0 3
7817: ARRAY
7818: PPUSH
7819: LD_INT 52
7821: PUSH
7822: EMPTY
7823: LIST
7824: PPUSH
7825: CALL_OW 72
7829: PUSH
7830: LD_INT 22
7832: PUSH
7833: LD_VAR 0 3
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 2
7844: PUSH
7845: LD_INT 33
7847: PUSH
7848: LD_INT 5
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 25
7857: PUSH
7858: LD_INT 12
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: PUSH
7865: LD_INT 25
7867: PUSH
7868: LD_INT 15
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: PUSH
7875: LD_INT 25
7877: PUSH
7878: LD_INT 16
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: PUSH
7885: LD_INT 25
7887: PUSH
7888: LD_INT 17
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PPUSH
7907: CALL_OW 69
7911: UNION
7912: PPUSH
7913: CALL_OW 1
7917: ST_TO_ADDR
// end ; end ;
7918: PPOPN 3
7920: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7921: LD_INT 0
7923: PPUSH
7924: PPUSH
7925: PPUSH
7926: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 257
7936: PUSH
7937: LD_INT 12
7939: PUSH
7940: LD_INT 15
7942: PUSH
7943: LD_INT 17
7945: PUSH
7946: LD_INT 16
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: IN
7955: PUSH
7956: LD_VAR 0 1
7960: PPUSH
7961: CALL_OW 263
7965: PUSH
7966: LD_INT 5
7968: EQUAL
7969: OR
7970: IFFALSE 7981
// ApeKilled ( j ) ;
7972: LD_VAR 0 1
7976: PPUSH
7977: CALL 6842 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 266
7990: PUSH
7991: LD_INT 0
7993: PUSH
7994: LD_INT 1
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: IN
8001: IFFALSE 8083
// begin pos := Side_Positions [ GetSide ( j ) ] ;
8003: LD_ADDR_VAR 0 4
8007: PUSH
8008: LD_EXP 19
8012: PUSH
8013: LD_VAR 0 1
8017: PPUSH
8018: CALL_OW 255
8022: ARRAY
8023: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
8024: LD_ADDR_VAR 0 2
8028: PUSH
8029: LD_EXP 26
8033: PUSH
8034: LD_VAR 0 4
8038: ARRAY
8039: PUSH
8040: LD_INT 1
8042: ARRAY
8043: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
8044: LD_ADDR_VAR 0 3
8048: PUSH
8049: LD_EXP 26
8053: PUSH
8054: LD_VAR 0 4
8058: ARRAY
8059: PUSH
8060: LD_INT 2
8062: ARRAY
8063: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
8064: LD_VAR 0 2
8068: PPUSH
8069: LD_VAR 0 3
8073: PPUSH
8074: CALL_OW 420
8078: PPUSH
8079: CALL_OW 419
// end ; if def_game_rules then
8083: LD_EXP 43
8087: IFFALSE 8186
// if ( GetType ( j ) = 3 ) then
8089: LD_VAR 0 1
8093: PPUSH
8094: CALL_OW 247
8098: PUSH
8099: LD_INT 3
8101: EQUAL
8102: IFFALSE 8142
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8104: LD_VAR 0 1
8108: PPUSH
8109: LD_VAR 0 1
8113: PPUSH
8114: CALL_OW 266
8118: PPUSH
8119: LD_VAR 0 1
8123: PPUSH
8124: CALL_OW 255
8128: PPUSH
8129: LD_INT 0
8131: PPUSH
8132: LD_INT 1
8134: NEG
8135: PPUSH
8136: CALL 13080 0 5
8140: GO 8186
// if ( GetChassis ( j ) = 25 ) then
8142: LD_VAR 0 1
8146: PPUSH
8147: CALL_OW 265
8151: PUSH
8152: LD_INT 25
8154: EQUAL
8155: IFFALSE 8186
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8157: LD_VAR 0 1
8161: PPUSH
8162: LD_INT 37
8164: PPUSH
8165: LD_VAR 0 1
8169: PPUSH
8170: CALL_OW 255
8174: PPUSH
8175: LD_INT 0
8177: PPUSH
8178: LD_INT 1
8180: NEG
8181: PPUSH
8182: CALL 13080 0 5
// end ;
8186: PPOPN 5
8188: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8189: LD_EXP 43
8193: PUSH
8194: LD_VAR 0 1
8198: PPUSH
8199: CALL_OW 265
8203: PUSH
8204: LD_INT 25
8206: EQUAL
8207: AND
8208: IFFALSE 8240
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8210: LD_VAR 0 1
8214: PPUSH
8215: LD_INT 37
8217: PPUSH
8218: LD_VAR 0 1
8222: PPUSH
8223: CALL_OW 255
8227: PPUSH
8228: LD_VAR 0 3
8232: PPUSH
8233: LD_INT 1
8235: PPUSH
8236: CALL 13080 0 5
// end ;
8240: PPOPN 4
8242: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8243: LD_VAR 0 1
8247: PPUSH
8248: LD_VAR 0 2
8252: PPUSH
8253: LD_VAR 0 3
8257: PPUSH
8258: LD_OWVAR 2
8262: PPUSH
8263: CALL 13851 0 4
8267: PPOPN 3
8269: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8270: GO 8272
8272: DISABLE
8273: LD_INT 0
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
// begin sib_mined := [ ] ;
8280: LD_ADDR_VAR 0 5
8284: PUSH
8285: EMPTY
8286: ST_TO_ADDR
// for i := 1 to 8 do
8287: LD_ADDR_VAR 0 1
8291: PUSH
8292: DOUBLE
8293: LD_INT 1
8295: DEC
8296: ST_TO_ADDR
8297: LD_INT 8
8299: PUSH
8300: FOR_TO
8301: IFFALSE 8457
// if Side_Positions [ i ] then
8303: LD_EXP 19
8307: PUSH
8308: LD_VAR 0 1
8312: ARRAY
8313: IFFALSE 8441
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8315: LD_ADDR_VAR 0 4
8319: PUSH
8320: LD_INT 22
8322: PUSH
8323: LD_VAR 0 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 2
8334: PUSH
8335: LD_INT 30
8337: PUSH
8338: LD_INT 0
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: LD_INT 30
8347: PUSH
8348: LD_INT 1
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: LIST
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PPUSH
8364: CALL_OW 69
8368: ST_TO_ADDR
// pom := 0 ;
8369: LD_ADDR_VAR 0 3
8373: PUSH
8374: LD_INT 0
8376: ST_TO_ADDR
// for base in filter do
8377: LD_ADDR_VAR 0 2
8381: PUSH
8382: LD_VAR 0 4
8386: PUSH
8387: FOR_IN
8388: IFFALSE 8421
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8390: LD_ADDR_VAR 0 3
8394: PUSH
8395: LD_VAR 0 3
8399: PUSH
8400: LD_VAR 0 2
8404: PPUSH
8405: CALL_OW 274
8409: PPUSH
8410: LD_INT 3
8412: PPUSH
8413: CALL_OW 275
8417: PLUS
8418: ST_TO_ADDR
8419: GO 8387
8421: POP
8422: POP
// sib_mined := sib_mined ^ pom ;
8423: LD_ADDR_VAR 0 5
8427: PUSH
8428: LD_VAR 0 5
8432: PUSH
8433: LD_VAR 0 3
8437: ADD
8438: ST_TO_ADDR
// end else
8439: GO 8455
// sib_mined := sib_mined ^ 0 ;
8441: LD_ADDR_VAR 0 5
8445: PUSH
8446: LD_VAR 0 5
8450: PUSH
8451: LD_INT 0
8453: ADD
8454: ST_TO_ADDR
8455: GO 8300
8457: POP
8458: POP
// if not def_public_score then
8459: LD_EXP 2
8463: NOT
8464: IFFALSE 8554
// begin ExtraStrings := [ ] ;
8466: LD_ADDR_EXP 59
8470: PUSH
8471: EMPTY
8472: ST_TO_ADDR
// for i := 1 to 8 do
8473: LD_ADDR_VAR 0 1
8477: PUSH
8478: DOUBLE
8479: LD_INT 1
8481: DEC
8482: ST_TO_ADDR
8483: LD_INT 8
8485: PUSH
8486: FOR_TO
8487: IFFALSE 8550
// if Side_Positions [ i ] then
8489: LD_EXP 19
8493: PUSH
8494: LD_VAR 0 1
8498: ARRAY
8499: IFFALSE 8548
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8501: LD_ADDR_EXP 59
8505: PUSH
8506: LD_EXP 59
8510: PUSH
8511: LD_STRING #AlienBase-MinedPublic
8513: PUSH
8514: LD_VAR 0 1
8518: PUSH
8519: LD_VAR 0 1
8523: PUSH
8524: LD_VAR 0 5
8528: PUSH
8529: LD_VAR 0 1
8533: ARRAY
8534: PUSH
8535: LD_EXP 11
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: ADD
8547: ST_TO_ADDR
8548: GO 8486
8550: POP
8551: POP
// end else
8552: GO 8583
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8554: LD_ADDR_EXP 59
8558: PUSH
8559: LD_STRING #AlienBase-Mined
8561: PUSH
8562: LD_VAR 0 5
8566: PUSH
8567: LD_OWVAR 2
8571: ARRAY
8572: PUSH
8573: LD_EXP 11
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: LIST
8582: ST_TO_ADDR
// for i := 1 to 8 do
8583: LD_ADDR_VAR 0 1
8587: PUSH
8588: DOUBLE
8589: LD_INT 1
8591: DEC
8592: ST_TO_ADDR
8593: LD_INT 8
8595: PUSH
8596: FOR_TO
8597: IFFALSE 8667
// if sib_mined [ i ] >= amount_of_siberit then
8599: LD_VAR 0 5
8603: PUSH
8604: LD_VAR 0 1
8608: ARRAY
8609: PUSH
8610: LD_EXP 11
8614: GREATEREQUAL
8615: IFFALSE 8665
// begin wait ( 0 0$1 ) ;
8617: LD_INT 35
8619: PPUSH
8620: CALL_OW 67
// if IAmServer then
8624: CALL_OW 518
8628: IFFALSE 8637
// wait ( 0 0$1 ) ;
8630: LD_INT 35
8632: PPUSH
8633: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8637: LD_VAR 0 5
8641: PUSH
8642: LD_OWVAR 2
8646: ARRAY
8647: PUSH
8648: LD_EXP 11
8652: GREATEREQUAL
8653: IFFALSE 8661
// YouWinInMultiplayer else
8655: CALL_OW 106
8659: GO 8665
// YouLostInMultiplayer ;
8661: CALL_OW 107
// end ;
8665: GO 8596
8667: POP
8668: POP
// enable ;
8669: ENABLE
// end ; end_of_file
8670: PPOPN 5
8672: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8673: LD_INT 0
8675: PPUSH
8676: PPUSH
// for un in battle_flags_id do
8677: LD_ADDR_VAR 0 2
8681: PUSH
8682: LD_EXP 31
8686: PUSH
8687: FOR_IN
8688: IFFALSE 8763
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8690: LD_VAR 0 2
8694: PPUSH
8695: LD_INT 1
8697: PUSH
8698: LD_LOC 11
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 2
8709: PUSH
8710: LD_LOC 11
8714: PUSH
8715: LD_INT 2
8717: DIV
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 3
8725: PUSH
8726: LD_LOC 11
8730: PUSH
8731: LD_INT 5
8733: DIV
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 20
8741: PUSH
8742: LD_LOC 11
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: PPUSH
8757: CALL_OW 423
8761: GO 8687
8763: POP
8764: POP
// end ;
8765: LD_VAR 0 1
8769: RET
// every 1 do var un ;
8770: GO 8772
8772: DISABLE
8773: LD_INT 0
8775: PPUSH
// begin if not def_morale_flags then
8776: LD_EXP 52
8780: NOT
8781: IFFALSE 8785
// exit ;
8783: GO 8862
// if not morale_decreasing_time then
8785: LD_EXP 10
8789: NOT
8790: IFFALSE 8794
// exit ;
8792: GO 8862
// strength = 100 ;
8794: LD_ADDR_LOC 11
8798: PUSH
8799: LD_INT 100
8801: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8802: LD_EXP 10
8806: PPUSH
8807: CALL_OW 67
// strength := strength - 1 ;
8811: LD_ADDR_LOC 11
8815: PUSH
8816: LD_LOC 11
8820: PUSH
8821: LD_INT 1
8823: MINUS
8824: ST_TO_ADDR
// Update_Flags ;
8825: CALL 8673 0 0
// until not strength ;
8829: LD_LOC 11
8833: NOT
8834: IFFALSE 8802
// for un in battle_flags_id do
8836: LD_ADDR_VAR 0 1
8840: PUSH
8841: LD_EXP 31
8845: PUSH
8846: FOR_IN
8847: IFFALSE 8860
// KillBattleFlag ( un ) ;
8849: LD_VAR 0 1
8853: PPUSH
8854: CALL_OW 419
8858: GO 8846
8860: POP
8861: POP
// end ; end_of_file
8862: PPOPN 1
8864: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8865: LD_INT 0
8867: PPUSH
8868: PPUSH
8869: PPUSH
// enable ( 600 ) ;
8870: LD_INT 600
8872: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8873: LD_ADDR_VAR 0 2
8877: PUSH
8878: DOUBLE
8879: LD_INT 1
8881: DEC
8882: ST_TO_ADDR
8883: LD_EXP 41
8887: PUSH
8888: FOR_TO
8889: IFFALSE 9044
// if Position_Sides [ i ] then
8891: LD_EXP 23
8895: PUSH
8896: LD_VAR 0 2
8900: ARRAY
8901: IFFALSE 9042
// for j := 1 to 8 do
8903: LD_ADDR_VAR 0 3
8907: PUSH
8908: DOUBLE
8909: LD_INT 1
8911: DEC
8912: ST_TO_ADDR
8913: LD_INT 8
8915: PUSH
8916: FOR_TO
8917: IFFALSE 9040
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8919: LD_EXP 19
8923: PUSH
8924: LD_VAR 0 3
8928: ARRAY
8929: PUSH
8930: LD_EXP 17
8934: PUSH
8935: LD_EXP 23
8939: PUSH
8940: LD_VAR 0 2
8944: ARRAY
8945: ARRAY
8946: PUSH
8947: LD_EXP 17
8951: PUSH
8952: LD_VAR 0 3
8956: ARRAY
8957: NONEQUAL
8958: PUSH
8959: LD_EXP 21
8963: NOT
8964: PUSH
8965: LD_EXP 23
8969: PUSH
8970: LD_VAR 0 2
8974: ARRAY
8975: PUSH
8976: LD_VAR 0 3
8980: NONEQUAL
8981: AND
8982: OR
8983: AND
8984: IFFALSE 9008
// HideArea ( j , BuildUpAreas [ i ] ) else
8986: LD_VAR 0 3
8990: PPUSH
8991: LD_EXP 41
8995: PUSH
8996: LD_VAR 0 2
9000: ARRAY
9001: PPUSH
9002: CALL_OW 333
9006: GO 9038
// if ( j = your_side ) then
9008: LD_VAR 0 3
9012: PUSH
9013: LD_OWVAR 2
9017: EQUAL
9018: IFFALSE 9038
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
9020: LD_EXP 41
9024: PUSH
9025: LD_VAR 0 2
9029: ARRAY
9030: PPUSH
9031: LD_INT 5
9033: PPUSH
9034: CALL_OW 424
9038: GO 8916
9040: POP
9041: POP
9042: GO 8888
9044: POP
9045: POP
// end ;
9046: LD_VAR 0 1
9050: RET
// export function EndBuildUp ; var i , j ; begin
9051: LD_INT 0
9053: PPUSH
9054: PPUSH
9055: PPUSH
// disable ( 600 ) ;
9056: LD_INT 600
9058: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
9059: LD_ADDR_VAR 0 2
9063: PUSH
9064: DOUBLE
9065: LD_INT 1
9067: DEC
9068: ST_TO_ADDR
9069: LD_EXP 41
9073: PUSH
9074: FOR_TO
9075: IFFALSE 9230
// if Position_Sides [ i ] then
9077: LD_EXP 23
9081: PUSH
9082: LD_VAR 0 2
9086: ARRAY
9087: IFFALSE 9228
// for j := 1 to 8 do
9089: LD_ADDR_VAR 0 3
9093: PUSH
9094: DOUBLE
9095: LD_INT 1
9097: DEC
9098: ST_TO_ADDR
9099: LD_INT 8
9101: PUSH
9102: FOR_TO
9103: IFFALSE 9226
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9105: LD_EXP 19
9109: PUSH
9110: LD_VAR 0 3
9114: ARRAY
9115: PUSH
9116: LD_EXP 17
9120: PUSH
9121: LD_EXP 23
9125: PUSH
9126: LD_VAR 0 2
9130: ARRAY
9131: ARRAY
9132: PUSH
9133: LD_EXP 17
9137: PUSH
9138: LD_VAR 0 3
9142: ARRAY
9143: NONEQUAL
9144: PUSH
9145: LD_EXP 21
9149: NOT
9150: PUSH
9151: LD_EXP 23
9155: PUSH
9156: LD_VAR 0 2
9160: ARRAY
9161: PUSH
9162: LD_VAR 0 3
9166: NONEQUAL
9167: AND
9168: OR
9169: AND
9170: IFFALSE 9194
// ShowArea ( j , BuildUpAreas [ i ] ) else
9172: LD_VAR 0 3
9176: PPUSH
9177: LD_EXP 41
9181: PUSH
9182: LD_VAR 0 2
9186: ARRAY
9187: PPUSH
9188: CALL_OW 334
9192: GO 9224
// if ( j = your_side ) then
9194: LD_VAR 0 3
9198: PUSH
9199: LD_OWVAR 2
9203: EQUAL
9204: IFFALSE 9224
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9206: LD_EXP 41
9210: PUSH
9211: LD_VAR 0 2
9215: ARRAY
9216: PPUSH
9217: LD_INT 0
9219: PPUSH
9220: CALL_OW 424
9224: GO 9102
9226: POP
9227: POP
9228: GO 9074
9230: POP
9231: POP
// end ;
9232: LD_VAR 0 1
9236: RET
// every 5 marked 600 do var i , un ;
9237: GO 9239
9239: DISABLE
9240: LD_INT 0
9242: PPUSH
9243: PPUSH
// begin for i := 1 to BuildUpAreas do
9244: LD_ADDR_VAR 0 1
9248: PUSH
9249: DOUBLE
9250: LD_INT 1
9252: DEC
9253: ST_TO_ADDR
9254: LD_EXP 41
9258: PUSH
9259: FOR_TO
9260: IFFALSE 9415
// if Position_Sides [ i ] then
9262: LD_EXP 23
9266: PUSH
9267: LD_VAR 0 1
9271: ARRAY
9272: IFFALSE 9413
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9274: LD_ADDR_VAR 0 2
9278: PUSH
9279: LD_EXP 41
9283: PUSH
9284: LD_VAR 0 1
9288: ARRAY
9289: PPUSH
9290: LD_INT 2
9292: PUSH
9293: LD_INT 21
9295: PUSH
9296: LD_INT 1
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 21
9305: PUSH
9306: LD_INT 2
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: LIST
9317: PUSH
9318: LD_INT 22
9320: PUSH
9321: LD_OWVAR 2
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: PPUSH
9334: CALL_OW 70
9338: PUSH
9339: FOR_IN
9340: IFFALSE 9411
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9342: LD_EXP 17
9346: PUSH
9347: LD_EXP 23
9351: PUSH
9352: LD_VAR 0 1
9356: ARRAY
9357: ARRAY
9358: PUSH
9359: LD_EXP 17
9363: PUSH
9364: LD_OWVAR 2
9368: ARRAY
9369: NONEQUAL
9370: PUSH
9371: LD_EXP 21
9375: NOT
9376: PUSH
9377: LD_EXP 23
9381: PUSH
9382: LD_VAR 0 1
9386: ARRAY
9387: PUSH
9388: LD_OWVAR 2
9392: NONEQUAL
9393: AND
9394: OR
9395: IFFALSE 9409
// ComMoveToArea ( un , BuildUpEscape ) ;
9397: LD_VAR 0 2
9401: PPUSH
9402: LD_INT 14
9404: PPUSH
9405: CALL_OW 113
9409: GO 9339
9411: POP
9412: POP
9413: GO 9259
9415: POP
9416: POP
// enable ;
9417: ENABLE
// end ;
9418: PPOPN 2
9420: END
// every 1 do
9421: GO 9423
9423: DISABLE
// if ( def_builduptime > 0 ) then
9424: LD_EXP 57
9428: PUSH
9429: LD_INT 0
9431: GREATER
9432: IFFALSE 9447
// begin wait ( buildUpTime_Delay ) ;
9434: LD_EXP 14
9438: PPUSH
9439: CALL_OW 67
// EndBuildUp ;
9443: CALL 9051 0 0
// end ; end_of_file
9447: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
9448: GO 9450
9450: DISABLE
9451: LD_INT 0
9453: PPUSH
// begin enable ;
9454: ENABLE
// for x := 1 to 8 do
9455: LD_ADDR_VAR 0 1
9459: PUSH
9460: DOUBLE
9461: LD_INT 1
9463: DEC
9464: ST_TO_ADDR
9465: LD_INT 8
9467: PUSH
9468: FOR_TO
9469: IFFALSE 9553
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
9471: LD_LOC 18
9475: PUSH
9476: LD_VAR 0 1
9480: ARRAY
9481: PUSH
9482: LD_INT 5
9484: GREATER
9485: PUSH
9486: LD_LOC 16
9490: PUSH
9491: LD_VAR 0 1
9495: ARRAY
9496: PUSH
9497: LD_INT 1
9499: NEG
9500: EQUAL
9501: AND
9502: IFFALSE 9551
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
9504: LD_ADDR_LOC 17
9508: PUSH
9509: LD_LOC 17
9513: PPUSH
9514: LD_VAR 0 1
9518: PPUSH
9519: LD_LOC 17
9523: PUSH
9524: LD_VAR 0 1
9528: ARRAY
9529: PUSH
9530: LD_INT 6
9532: PLUS
9533: PPUSH
9534: CALL_OW 1
9538: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
9539: LD_VAR 0 1
9543: PPUSH
9544: LD_INT 0
9546: PPUSH
9547: CALL 9725 0 2
// end ;
9551: GO 9468
9553: POP
9554: POP
// end ;
9555: PPOPN 1
9557: END
// every 0 0$1 marked 200 do var BGL , x ;
9558: GO 9560
9560: DISABLE
9561: LD_INT 0
9563: PPUSH
9564: PPUSH
// begin enable ;
9565: ENABLE
// for x := 1 to 8 do
9566: LD_ADDR_VAR 0 2
9570: PUSH
9571: DOUBLE
9572: LD_INT 1
9574: DEC
9575: ST_TO_ADDR
9576: LD_INT 8
9578: PUSH
9579: FOR_TO
9580: IFFALSE 9711
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
9582: LD_LOC 16
9586: PUSH
9587: LD_VAR 0 2
9591: ARRAY
9592: PUSH
9593: LD_INT 1
9595: NEG
9596: GREATER
9597: PUSH
9598: LD_LOC 16
9602: PUSH
9603: LD_VAR 0 2
9607: ARRAY
9608: PPUSH
9609: CALL_OW 300
9613: AND
9614: IFFALSE 9709
// begin BGL := GetLives ( BloodGods [ x ] ) ;
9616: LD_ADDR_VAR 0 1
9620: PUSH
9621: LD_LOC 16
9625: PUSH
9626: LD_VAR 0 2
9630: ARRAY
9631: PPUSH
9632: CALL_OW 256
9636: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
9637: LD_VAR 0 1
9641: PUSH
9642: LD_INT 1000
9644: LESS
9645: PUSH
9646: LD_VAR 0 1
9650: PUSH
9651: LD_INT 100
9653: GREATER
9654: AND
9655: IFFALSE 9709
// begin BGL := BGL + 10 ;
9657: LD_ADDR_VAR 0 1
9661: PUSH
9662: LD_VAR 0 1
9666: PUSH
9667: LD_INT 10
9669: PLUS
9670: ST_TO_ADDR
// if BGL > 1000 then
9671: LD_VAR 0 1
9675: PUSH
9676: LD_INT 1000
9678: GREATER
9679: IFFALSE 9689
// BGL := 1000 ;
9681: LD_ADDR_VAR 0 1
9685: PUSH
9686: LD_INT 1000
9688: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
9689: LD_LOC 16
9693: PUSH
9694: LD_VAR 0 2
9698: ARRAY
9699: PPUSH
9700: LD_VAR 0 1
9704: PPUSH
9705: CALL_OW 234
// end ; end ;
9709: GO 9579
9711: POP
9712: POP
// end ;
9713: PPOPN 2
9715: END
// every 0 0$1 marked 200 do
9716: GO 9718
9718: DISABLE
// begin DisplayTimeWithKills ;
9719: CALL 9966 0 0
// enable ;
9723: ENABLE
// end ;
9724: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
9725: LD_INT 0
9727: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
9728: LD_ADDR_OWVAR 24
9732: PUSH
9733: LD_INT 0
9735: PPUSH
9736: LD_INT 5
9738: PPUSH
9739: CALL_OW 12
9743: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
9744: LD_INT 1
9746: PPUSH
9747: LD_INT 1
9749: PPUSH
9750: LD_INT 15
9752: PPUSH
9753: CALL_OW 380
// hc_importance := 106 ;
9757: LD_ADDR_OWVAR 32
9761: PUSH
9762: LD_INT 106
9764: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
9765: LD_ADDR_OWVAR 26
9769: PUSH
9770: LD_STRING Blood God of 
9772: PUSH
9773: LD_OWVAR 19
9777: PUSH
9778: LD_VAR 0 1
9782: ARRAY
9783: STR
9784: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
9785: LD_ADDR_OWVAR 21
9789: PUSH
9790: LD_EXP 20
9794: PUSH
9795: LD_VAR 0 1
9799: ARRAY
9800: ST_TO_ADDR
// uc_side := side ;
9801: LD_ADDR_OWVAR 20
9805: PUSH
9806: LD_VAR 0 1
9810: ST_TO_ADDR
// hc_noskilllimit := true ;
9811: LD_ADDR_OWVAR 76
9815: PUSH
9816: LD_INT 1
9818: ST_TO_ADDR
// hc_agressivity := 50 ;
9819: LD_ADDR_OWVAR 35
9823: PUSH
9824: LD_INT 50
9826: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
9827: LD_ADDR_LOC 16
9831: PUSH
9832: LD_LOC 16
9836: PPUSH
9837: LD_VAR 0 1
9841: PPUSH
9842: CALL_OW 44
9846: PPUSH
9847: CALL_OW 1
9851: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
9852: LD_LOC 16
9856: PUSH
9857: LD_VAR 0 1
9861: ARRAY
9862: PPUSH
9863: LD_LOC 19
9867: PUSH
9868: LD_EXP 19
9872: PUSH
9873: LD_VAR 0 1
9877: ARRAY
9878: ARRAY
9879: PUSH
9880: LD_INT 1
9882: ARRAY
9883: PPUSH
9884: LD_LOC 19
9888: PUSH
9889: LD_EXP 19
9893: PUSH
9894: LD_VAR 0 1
9898: ARRAY
9899: ARRAY
9900: PUSH
9901: LD_INT 2
9903: ARRAY
9904: PPUSH
9905: LD_INT 10
9907: PPUSH
9908: LD_INT 0
9910: PPUSH
9911: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
9915: LD_LOC 16
9919: PUSH
9920: LD_VAR 0 1
9924: ARRAY
9925: PPUSH
9926: LD_INT 1
9928: PPUSH
9929: LD_INT 300
9931: PPUSH
9932: CALL_OW 239
// if not NoDialog then
9936: LD_VAR 0 2
9940: NOT
9941: IFFALSE 9961
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
9943: LD_LOC 16
9947: PUSH
9948: LD_VAR 0 1
9952: ARRAY
9953: PPUSH
9954: LD_STRING DLAwaken
9956: PPUSH
9957: CALL_OW 94
// end ;
9961: LD_VAR 0 3
9965: RET
// function DisplayTimeWithKills ; var x ; begin
9966: LD_INT 0
9968: PPUSH
9969: PPUSH
// ExtraStrings :=  ;
9970: LD_ADDR_EXP 59
9974: PUSH
9975: LD_STRING 
9977: ST_TO_ADDR
// for x = 1 to Side_Positions do
9978: LD_ADDR_VAR 0 2
9982: PUSH
9983: DOUBLE
9984: LD_INT 1
9986: DEC
9987: ST_TO_ADDR
9988: LD_EXP 19
9992: PUSH
9993: FOR_TO
9994: IFFALSE 10227
// if Side_Positions [ x ] then
9996: LD_EXP 19
10000: PUSH
10001: LD_VAR 0 2
10005: ARRAY
10006: IFFALSE 10225
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
10008: LD_ADDR_LOC 18
10012: PUSH
10013: LD_LOC 18
10017: PPUSH
10018: LD_VAR 0 2
10022: PPUSH
10023: LD_VAR 0 2
10027: PPUSH
10028: CALL_OW 515
10032: PUSH
10033: LD_LOC 17
10037: PUSH
10038: LD_VAR 0 2
10042: ARRAY
10043: MINUS
10044: PPUSH
10045: CALL_OW 1
10049: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
10050: LD_LOC 16
10054: PUSH
10055: LD_VAR 0 2
10059: ARRAY
10060: PUSH
10061: LD_INT 1
10063: NEG
10064: GREATER
10065: PUSH
10066: LD_LOC 16
10070: PUSH
10071: LD_VAR 0 2
10075: ARRAY
10076: PPUSH
10077: CALL_OW 300
10081: AND
10082: IFFALSE 10115
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
10084: LD_ADDR_EXP 59
10088: PUSH
10089: LD_EXP 59
10093: PUSH
10094: LD_STRING #godawoken
10096: PUSH
10097: LD_VAR 0 2
10101: PUSH
10102: LD_VAR 0 2
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: LIST
10111: ADD
10112: ST_TO_ADDR
10113: GO 10225
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
10115: LD_LOC 16
10119: PUSH
10120: LD_VAR 0 2
10124: ARRAY
10125: PUSH
10126: LD_INT 1
10128: NEG
10129: GREATER
10130: PUSH
10131: LD_LOC 16
10135: PUSH
10136: LD_VAR 0 2
10140: ARRAY
10141: PPUSH
10142: CALL_OW 301
10146: AND
10147: IFFALSE 10180
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
10149: LD_ADDR_EXP 59
10153: PUSH
10154: LD_EXP 59
10158: PUSH
10159: LD_STRING #goddied
10161: PUSH
10162: LD_VAR 0 2
10166: PUSH
10167: LD_VAR 0 2
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: LIST
10176: ADD
10177: ST_TO_ADDR
10178: GO 10225
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
10180: LD_ADDR_EXP 59
10184: PUSH
10185: LD_EXP 59
10189: PUSH
10190: LD_STRING #godssacrifise
10192: PUSH
10193: LD_VAR 0 2
10197: PUSH
10198: LD_VAR 0 2
10202: PUSH
10203: LD_LOC 18
10207: PUSH
10208: LD_VAR 0 2
10212: ARRAY
10213: PUSH
10214: LD_INT 6
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: ADD
10224: ST_TO_ADDR
10225: GO 9993
10227: POP
10228: POP
// end ;
10229: LD_VAR 0 1
10233: RET
// export function InitBloodGods ; begin
10234: LD_INT 0
10236: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
10237: LD_ADDR_LOC 16
10241: PUSH
10242: LD_INT 1
10244: NEG
10245: PUSH
10246: LD_INT 1
10248: NEG
10249: PUSH
10250: LD_INT 1
10252: NEG
10253: PUSH
10254: LD_INT 1
10256: NEG
10257: PUSH
10258: LD_INT 1
10260: NEG
10261: PUSH
10262: LD_INT 1
10264: NEG
10265: PUSH
10266: LD_INT 1
10268: NEG
10269: PUSH
10270: LD_INT 1
10272: NEG
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10284: LD_ADDR_LOC 17
10288: PUSH
10289: LD_INT 0
10291: PUSH
10292: LD_INT 0
10294: PUSH
10295: LD_INT 0
10297: PUSH
10298: LD_INT 0
10300: PUSH
10301: LD_INT 0
10303: PUSH
10304: LD_INT 0
10306: PUSH
10307: LD_INT 0
10309: PUSH
10310: LD_INT 0
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10323: LD_ADDR_LOC 18
10327: PUSH
10328: LD_INT 0
10330: PUSH
10331: LD_INT 0
10333: PUSH
10334: LD_INT 0
10336: PUSH
10337: LD_INT 0
10339: PUSH
10340: LD_INT 0
10342: PUSH
10343: LD_INT 0
10345: PUSH
10346: LD_INT 0
10348: PUSH
10349: LD_INT 0
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
10362: LD_ADDR_LOC 19
10366: PUSH
10367: LD_INT 60
10369: PUSH
10370: LD_INT 47
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 82
10379: PUSH
10380: LD_INT 26
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 124
10389: PUSH
10390: LD_INT 45
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 147
10399: PUSH
10400: LD_INT 90
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 126
10409: PUSH
10410: LD_INT 112
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 84
10419: PUSH
10420: LD_INT 92
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: LD_INT 106
10429: PUSH
10430: LD_INT 73
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: LD_INT 106
10439: PUSH
10440: LD_INT 73
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: ST_TO_ADDR
// ClearHumansKilled ;
10457: CALL_OW 516
// enable ( 200 ) ;
10461: LD_INT 200
10463: ENABLE_MARKED
// end ; end_of_file
10464: LD_VAR 0 1
10468: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
10469: LD_INT 0
10471: PPUSH
10472: PPUSH
// if ( not IAmSpec ) then
10473: CALL_OW 531
10477: NOT
10478: IFFALSE 10494
// Result := Limits_Info ^  ;
10480: LD_ADDR_VAR 0 1
10484: PUSH
10485: LD_LOC 27
10489: PUSH
10490: LD_STRING 
10492: ADD
10493: ST_TO_ADDR
// for i := 1 to 8 do
10494: LD_ADDR_VAR 0 2
10498: PUSH
10499: DOUBLE
10500: LD_INT 1
10502: DEC
10503: ST_TO_ADDR
10504: LD_INT 8
10506: PUSH
10507: FOR_TO
10508: IFFALSE 10553
// if Cheaters [ i ] then
10510: LD_LOC 28
10514: PUSH
10515: LD_VAR 0 2
10519: ARRAY
10520: IFFALSE 10551
// Result := Result ^ [ #Cheater , i , i ] ;
10522: LD_ADDR_VAR 0 1
10526: PUSH
10527: LD_VAR 0 1
10531: PUSH
10532: LD_STRING #Cheater
10534: PUSH
10535: LD_VAR 0 2
10539: PUSH
10540: LD_VAR 0 2
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: LIST
10549: ADD
10550: ST_TO_ADDR
10551: GO 10507
10553: POP
10554: POP
// end ;
10555: LD_VAR 0 1
10559: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
10560: LD_INT 0
10562: PPUSH
10563: PPUSH
10564: PPUSH
10565: PPUSH
10566: PPUSH
// if game_type in [ 10 , 11 ] then
10567: LD_EXP 42
10571: PUSH
10572: LD_INT 10
10574: PUSH
10575: LD_INT 11
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: IN
10582: IFFALSE 10598
// def_game_rules = def_game_rules + 1 ;
10584: LD_ADDR_EXP 43
10588: PUSH
10589: LD_EXP 43
10593: PUSH
10594: LD_INT 1
10596: PLUS
10597: ST_TO_ADDR
// case def_game_rules of 0 :
10598: LD_EXP 43
10602: PUSH
10603: LD_INT 0
10605: DOUBLE
10606: EQUAL
10607: IFTRUE 10611
10609: GO 10616
10611: POP
// exit ; 1 :
10612: GO 12674
10614: GO 12574
10616: LD_INT 1
10618: DOUBLE
10619: EQUAL
10620: IFTRUE 10624
10622: GO 10840
10624: POP
// begin def_base_level := 2 ;
10625: LD_ADDR_EXP 44
10629: PUSH
10630: LD_INT 2
10632: ST_TO_ADDR
// def_amount_of_people := 2 ;
10633: LD_ADDR_EXP 45
10637: PUSH
10638: LD_INT 2
10640: ST_TO_ADDR
// def_skill_level := 1 ;
10641: LD_ADDR_EXP 46
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// def_starting_resources := 2 ;
10649: LD_ADDR_EXP 47
10653: PUSH
10654: LD_INT 2
10656: ST_TO_ADDR
// def_shipments_density := 1 ;
10657: LD_ADDR_EXP 48
10661: PUSH
10662: LD_INT 1
10664: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10665: LD_ADDR_EXP 49
10669: PUSH
10670: LD_INT 0
10672: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10673: LD_ADDR_EXP 50
10677: PUSH
10678: LD_INT 1
10680: ST_TO_ADDR
// def_shared_vision := 1 ;
10681: LD_ADDR_EXP 51
10685: PUSH
10686: LD_INT 1
10688: ST_TO_ADDR
// def_morale_flags := 3 ;
10689: LD_ADDR_EXP 52
10693: PUSH
10694: LD_INT 3
10696: ST_TO_ADDR
// def_siberite_detection := 1 ;
10697: LD_ADDR_EXP 53
10701: PUSH
10702: LD_INT 1
10704: ST_TO_ADDR
// def_people_respawning := 1 ;
10705: LD_ADDR_EXP 54
10709: PUSH
10710: LD_INT 1
10712: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10713: LD_ADDR_EXP 55
10717: PUSH
10718: LD_INT 1
10720: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10721: LD_ADDR_EXP 56
10725: PUSH
10726: LD_INT 0
10728: ST_TO_ADDR
// def_builduptime := 2 ;
10729: LD_ADDR_EXP 57
10733: PUSH
10734: LD_INT 2
10736: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
10737: LD_ADDR_VAR 0 2
10741: PUSH
10742: EMPTY
10743: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10744: LD_ADDR_VAR 0 3
10748: PUSH
10749: EMPTY
10750: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10751: LD_ADDR_LOC 22
10755: PUSH
10756: EMPTY
10757: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10758: LD_ADDR_LOC 23
10762: PUSH
10763: EMPTY
10764: ST_TO_ADDR
// Banned_Controls := [ ] ;
10765: LD_ADDR_LOC 24
10769: PUSH
10770: EMPTY
10771: ST_TO_ADDR
// Banned_Engines := [ ] ;
10772: LD_ADDR_LOC 25
10776: PUSH
10777: EMPTY
10778: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10779: LD_ADDR_LOC 20
10783: PUSH
10784: LD_INT 37
10786: PUSH
10787: EMPTY
10788: LIST
10789: PUSH
10790: LD_INT 4
10792: PUSH
10793: LD_INT 5
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 31
10802: PUSH
10803: LD_INT 32
10805: PUSH
10806: LD_INT 33
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: LIST
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: LIST
10818: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
10819: LD_ADDR_LOC 21
10823: PUSH
10824: LD_INT 2
10826: PUSH
10827: LD_INT 2
10829: PUSH
10830: LD_INT 4
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: ST_TO_ADDR
// end ; 2 :
10838: GO 12574
10840: LD_INT 2
10842: DOUBLE
10843: EQUAL
10844: IFTRUE 10848
10846: GO 11057
10848: POP
// begin def_base_level := 1 ;
10849: LD_ADDR_EXP 44
10853: PUSH
10854: LD_INT 1
10856: ST_TO_ADDR
// def_amount_of_people := 2 ;
10857: LD_ADDR_EXP 45
10861: PUSH
10862: LD_INT 2
10864: ST_TO_ADDR
// def_skill_level := 3 ;
10865: LD_ADDR_EXP 46
10869: PUSH
10870: LD_INT 3
10872: ST_TO_ADDR
// def_starting_resources := 3 ;
10873: LD_ADDR_EXP 47
10877: PUSH
10878: LD_INT 3
10880: ST_TO_ADDR
// def_shipments_density := 2 ;
10881: LD_ADDR_EXP 48
10885: PUSH
10886: LD_INT 2
10888: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10889: LD_ADDR_EXP 49
10893: PUSH
10894: LD_INT 1
10896: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10897: LD_ADDR_EXP 50
10901: PUSH
10902: LD_INT 2
10904: ST_TO_ADDR
// def_shared_vision := 1 ;
10905: LD_ADDR_EXP 51
10909: PUSH
10910: LD_INT 1
10912: ST_TO_ADDR
// def_morale_flags := 0 ;
10913: LD_ADDR_EXP 52
10917: PUSH
10918: LD_INT 0
10920: ST_TO_ADDR
// def_siberite_detection := 1 ;
10921: LD_ADDR_EXP 53
10925: PUSH
10926: LD_INT 1
10928: ST_TO_ADDR
// def_people_respawning := 0 ;
10929: LD_ADDR_EXP 54
10933: PUSH
10934: LD_INT 0
10936: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10937: LD_ADDR_EXP 55
10941: PUSH
10942: LD_INT 0
10944: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10945: LD_ADDR_EXP 56
10949: PUSH
10950: LD_INT 0
10952: ST_TO_ADDR
// def_builduptime := 2 ;
10953: LD_ADDR_EXP 57
10957: PUSH
10958: LD_INT 2
10960: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10961: LD_ADDR_VAR 0 2
10965: PUSH
10966: LD_INT 1
10968: PUSH
10969: EMPTY
10970: LIST
10971: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10972: LD_ADDR_VAR 0 3
10976: PUSH
10977: EMPTY
10978: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10979: LD_ADDR_LOC 22
10983: PUSH
10984: EMPTY
10985: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10986: LD_ADDR_LOC 23
10990: PUSH
10991: EMPTY
10992: ST_TO_ADDR
// Banned_Controls := [ ] ;
10993: LD_ADDR_LOC 24
10997: PUSH
10998: EMPTY
10999: ST_TO_ADDR
// Banned_Engines := [ ] ;
11000: LD_ADDR_LOC 25
11004: PUSH
11005: EMPTY
11006: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11007: LD_ADDR_LOC 20
11011: PUSH
11012: LD_INT 4
11014: PUSH
11015: LD_INT 5
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: LD_INT 31
11024: PUSH
11025: LD_INT 32
11027: PUSH
11028: LD_INT 33
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
11040: LD_ADDR_LOC 21
11044: PUSH
11045: LD_INT 1
11047: PUSH
11048: LD_INT 2
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: ST_TO_ADDR
// end ; 3 :
11055: GO 12574
11057: LD_INT 3
11059: DOUBLE
11060: EQUAL
11061: IFTRUE 11065
11063: GO 11308
11065: POP
// begin def_base_level := 1 ;
11066: LD_ADDR_EXP 44
11070: PUSH
11071: LD_INT 1
11073: ST_TO_ADDR
// def_amount_of_people := 2 ;
11074: LD_ADDR_EXP 45
11078: PUSH
11079: LD_INT 2
11081: ST_TO_ADDR
// def_skill_level := 3 ;
11082: LD_ADDR_EXP 46
11086: PUSH
11087: LD_INT 3
11089: ST_TO_ADDR
// def_starting_resources := 3 ;
11090: LD_ADDR_EXP 47
11094: PUSH
11095: LD_INT 3
11097: ST_TO_ADDR
// def_shipments_density := 1 ;
11098: LD_ADDR_EXP 48
11102: PUSH
11103: LD_INT 1
11105: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11106: LD_ADDR_EXP 49
11110: PUSH
11111: LD_INT 0
11113: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11114: LD_ADDR_EXP 50
11118: PUSH
11119: LD_INT 1
11121: ST_TO_ADDR
// def_shared_vision := 1 ;
11122: LD_ADDR_EXP 51
11126: PUSH
11127: LD_INT 1
11129: ST_TO_ADDR
// def_morale_flags := 0 ;
11130: LD_ADDR_EXP 52
11134: PUSH
11135: LD_INT 0
11137: ST_TO_ADDR
// def_siberite_detection := 1 ;
11138: LD_ADDR_EXP 53
11142: PUSH
11143: LD_INT 1
11145: ST_TO_ADDR
// def_people_respawning := 0 ;
11146: LD_ADDR_EXP 54
11150: PUSH
11151: LD_INT 0
11153: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11154: LD_ADDR_EXP 55
11158: PUSH
11159: LD_INT 2
11161: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11162: LD_ADDR_EXP 56
11166: PUSH
11167: LD_INT 0
11169: ST_TO_ADDR
// def_builduptime := 1 ;
11170: LD_ADDR_EXP 57
11174: PUSH
11175: LD_INT 1
11177: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11178: LD_ADDR_VAR 0 2
11182: PUSH
11183: LD_INT 23
11185: PUSH
11186: EMPTY
11187: LIST
11188: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
11189: LD_ADDR_VAR 0 3
11193: PUSH
11194: LD_INT 2
11196: PUSH
11197: LD_INT 37
11199: PUSH
11200: LD_INT 32
11202: PUSH
11203: LD_INT 33
11205: PUSH
11206: LD_INT 36
11208: PUSH
11209: LD_INT 16
11211: PUSH
11212: LD_INT 23
11214: PUSH
11215: LD_INT 21
11217: PUSH
11218: LD_INT 18
11220: PUSH
11221: LD_INT 22
11223: PUSH
11224: LD_INT 20
11226: PUSH
11227: LD_INT 19
11229: PUSH
11230: LD_INT 25
11232: PUSH
11233: LD_INT 17
11235: PUSH
11236: LD_INT 24
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11256: LD_ADDR_LOC 22
11260: PUSH
11261: EMPTY
11262: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11263: LD_ADDR_LOC 23
11267: PUSH
11268: EMPTY
11269: ST_TO_ADDR
// Banned_Controls := [ ] ;
11270: LD_ADDR_LOC 24
11274: PUSH
11275: EMPTY
11276: ST_TO_ADDR
// Banned_Engines := [ ] ;
11277: LD_ADDR_LOC 25
11281: PUSH
11282: EMPTY
11283: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11284: LD_ADDR_LOC 20
11288: PUSH
11289: EMPTY
11290: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11291: LD_ADDR_LOC 21
11295: PUSH
11296: EMPTY
11297: ST_TO_ADDR
// No_Mechs := true ;
11298: LD_ADDR_EXP 58
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
// end ; 4 :
11306: GO 12574
11308: LD_INT 4
11310: DOUBLE
11311: EQUAL
11312: IFTRUE 11316
11314: GO 11491
11316: POP
// begin def_base_level := 1 ;
11317: LD_ADDR_EXP 44
11321: PUSH
11322: LD_INT 1
11324: ST_TO_ADDR
// def_amount_of_people := 2 ;
11325: LD_ADDR_EXP 45
11329: PUSH
11330: LD_INT 2
11332: ST_TO_ADDR
// def_skill_level := 3 ;
11333: LD_ADDR_EXP 46
11337: PUSH
11338: LD_INT 3
11340: ST_TO_ADDR
// def_starting_resources := 3 ;
11341: LD_ADDR_EXP 47
11345: PUSH
11346: LD_INT 3
11348: ST_TO_ADDR
// def_shipments_density := 2 ;
11349: LD_ADDR_EXP 48
11353: PUSH
11354: LD_INT 2
11356: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11357: LD_ADDR_EXP 49
11361: PUSH
11362: LD_INT 1
11364: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11365: LD_ADDR_EXP 50
11369: PUSH
11370: LD_INT 2
11372: ST_TO_ADDR
// def_shared_vision := 1 ;
11373: LD_ADDR_EXP 51
11377: PUSH
11378: LD_INT 1
11380: ST_TO_ADDR
// def_morale_flags := 0 ;
11381: LD_ADDR_EXP 52
11385: PUSH
11386: LD_INT 0
11388: ST_TO_ADDR
// def_siberite_detection := 1 ;
11389: LD_ADDR_EXP 53
11393: PUSH
11394: LD_INT 1
11396: ST_TO_ADDR
// def_people_respawning := 0 ;
11397: LD_ADDR_EXP 54
11401: PUSH
11402: LD_INT 0
11404: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11405: LD_ADDR_EXP 55
11409: PUSH
11410: LD_INT 0
11412: ST_TO_ADDR
// def_siberite_bomb := 1 ;
11413: LD_ADDR_EXP 56
11417: PUSH
11418: LD_INT 1
11420: ST_TO_ADDR
// def_builduptime := 3 ;
11421: LD_ADDR_EXP 57
11425: PUSH
11426: LD_INT 3
11428: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11429: LD_ADDR_VAR 0 2
11433: PUSH
11434: LD_INT 1
11436: PUSH
11437: EMPTY
11438: LIST
11439: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11440: LD_ADDR_VAR 0 3
11444: PUSH
11445: EMPTY
11446: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11447: LD_ADDR_LOC 22
11451: PUSH
11452: EMPTY
11453: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11454: LD_ADDR_LOC 23
11458: PUSH
11459: EMPTY
11460: ST_TO_ADDR
// Banned_Controls := [ ] ;
11461: LD_ADDR_LOC 24
11465: PUSH
11466: EMPTY
11467: ST_TO_ADDR
// Banned_Engines := [ ] ;
11468: LD_ADDR_LOC 25
11472: PUSH
11473: EMPTY
11474: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11475: LD_ADDR_LOC 20
11479: PUSH
11480: EMPTY
11481: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11482: LD_ADDR_LOC 21
11486: PUSH
11487: EMPTY
11488: ST_TO_ADDR
// end ; 5 :
11489: GO 12574
11491: LD_INT 5
11493: DOUBLE
11494: EQUAL
11495: IFTRUE 11499
11497: GO 11748
11499: POP
// begin def_base_level := 0 ;
11500: LD_ADDR_EXP 44
11504: PUSH
11505: LD_INT 0
11507: ST_TO_ADDR
// def_amount_of_people := 0 ;
11508: LD_ADDR_EXP 45
11512: PUSH
11513: LD_INT 0
11515: ST_TO_ADDR
// def_skill_level := 0 ;
11516: LD_ADDR_EXP 46
11520: PUSH
11521: LD_INT 0
11523: ST_TO_ADDR
// def_starting_resources := 0 ;
11524: LD_ADDR_EXP 47
11528: PUSH
11529: LD_INT 0
11531: ST_TO_ADDR
// def_shipments_density := 0 ;
11532: LD_ADDR_EXP 48
11536: PUSH
11537: LD_INT 0
11539: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11540: LD_ADDR_EXP 49
11544: PUSH
11545: LD_INT 0
11547: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11548: LD_ADDR_EXP 50
11552: PUSH
11553: LD_INT 0
11555: ST_TO_ADDR
// def_shared_vision := 1 ;
11556: LD_ADDR_EXP 51
11560: PUSH
11561: LD_INT 1
11563: ST_TO_ADDR
// def_morale_flags := 0 ;
11564: LD_ADDR_EXP 52
11568: PUSH
11569: LD_INT 0
11571: ST_TO_ADDR
// def_siberite_detection := 0 ;
11572: LD_ADDR_EXP 53
11576: PUSH
11577: LD_INT 0
11579: ST_TO_ADDR
// def_people_respawning := 1 ;
11580: LD_ADDR_EXP 54
11584: PUSH
11585: LD_INT 1
11587: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11588: LD_ADDR_EXP 55
11592: PUSH
11593: LD_INT 1
11595: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11596: LD_ADDR_EXP 56
11600: PUSH
11601: LD_INT 0
11603: ST_TO_ADDR
// def_builduptime := 0 ;
11604: LD_ADDR_EXP 57
11608: PUSH
11609: LD_INT 0
11611: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
11612: LD_ADDR_VAR 0 2
11616: PUSH
11617: LD_INT 10
11619: PUSH
11620: LD_INT 3
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
11627: LD_ADDR_VAR 0 3
11631: PUSH
11632: LD_INT 12
11634: PUSH
11635: LD_INT 11
11637: PUSH
11638: LD_INT 14
11640: PUSH
11641: LD_INT 13
11643: PUSH
11644: LD_INT 5
11646: PUSH
11647: LD_INT 24
11649: PUSH
11650: LD_INT 21
11652: PUSH
11653: LD_INT 33
11655: PUSH
11656: LD_INT 36
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
11670: LD_ADDR_LOC 22
11674: PUSH
11675: LD_INT 31
11677: PUSH
11678: EMPTY
11679: LIST
11680: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11681: LD_ADDR_LOC 23
11685: PUSH
11686: EMPTY
11687: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
11688: LD_ADDR_LOC 24
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: EMPTY
11697: LIST
11698: ST_TO_ADDR
// Banned_Engines := [ ] ;
11699: LD_ADDR_LOC 25
11703: PUSH
11704: EMPTY
11705: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
11706: LD_ADDR_LOC 20
11710: PUSH
11711: LD_INT 4
11713: PUSH
11714: EMPTY
11715: LIST
11716: PUSH
11717: LD_INT 31
11719: PUSH
11720: LD_INT 32
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
11731: LD_ADDR_LOC 21
11735: PUSH
11736: LD_INT 1
11738: PUSH
11739: LD_INT 1
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: ST_TO_ADDR
// end ; 6 :
11746: GO 12574
11748: LD_INT 6
11750: DOUBLE
11751: EQUAL
11752: IFTRUE 11756
11754: GO 11959
11756: POP
// begin def_base_level := 1 ;
11757: LD_ADDR_EXP 44
11761: PUSH
11762: LD_INT 1
11764: ST_TO_ADDR
// def_amount_of_people := 2 ;
11765: LD_ADDR_EXP 45
11769: PUSH
11770: LD_INT 2
11772: ST_TO_ADDR
// def_skill_level := 3 ;
11773: LD_ADDR_EXP 46
11777: PUSH
11778: LD_INT 3
11780: ST_TO_ADDR
// def_starting_resources := 3 ;
11781: LD_ADDR_EXP 47
11785: PUSH
11786: LD_INT 3
11788: ST_TO_ADDR
// def_shipments_density := 1 ;
11789: LD_ADDR_EXP 48
11793: PUSH
11794: LD_INT 1
11796: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11797: LD_ADDR_EXP 49
11801: PUSH
11802: LD_INT 0
11804: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11805: LD_ADDR_EXP 50
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// def_shared_vision := 1 ;
11813: LD_ADDR_EXP 51
11817: PUSH
11818: LD_INT 1
11820: ST_TO_ADDR
// def_morale_flags := 0 ;
11821: LD_ADDR_EXP 52
11825: PUSH
11826: LD_INT 0
11828: ST_TO_ADDR
// def_siberite_detection := 1 ;
11829: LD_ADDR_EXP 53
11833: PUSH
11834: LD_INT 1
11836: ST_TO_ADDR
// def_people_respawning := 2 ;
11837: LD_ADDR_EXP 54
11841: PUSH
11842: LD_INT 2
11844: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11845: LD_ADDR_EXP 55
11849: PUSH
11850: LD_INT 1
11852: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11853: LD_ADDR_EXP 56
11857: PUSH
11858: LD_INT 0
11860: ST_TO_ADDR
// def_builduptime := 1 ;
11861: LD_ADDR_EXP 57
11865: PUSH
11866: LD_INT 1
11868: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11869: LD_ADDR_VAR 0 2
11873: PUSH
11874: LD_INT 23
11876: PUSH
11877: EMPTY
11878: LIST
11879: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
11880: LD_ADDR_VAR 0 3
11884: PUSH
11885: LD_INT 2
11887: PUSH
11888: LD_INT 37
11890: PUSH
11891: LD_INT 31
11893: PUSH
11894: LD_INT 32
11896: PUSH
11897: LD_INT 33
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11907: LD_ADDR_LOC 22
11911: PUSH
11912: EMPTY
11913: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11914: LD_ADDR_LOC 23
11918: PUSH
11919: EMPTY
11920: ST_TO_ADDR
// Banned_Controls := [ ] ;
11921: LD_ADDR_LOC 24
11925: PUSH
11926: EMPTY
11927: ST_TO_ADDR
// Banned_Engines := [ ] ;
11928: LD_ADDR_LOC 25
11932: PUSH
11933: EMPTY
11934: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11935: LD_ADDR_LOC 20
11939: PUSH
11940: EMPTY
11941: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11942: LD_ADDR_LOC 21
11946: PUSH
11947: EMPTY
11948: ST_TO_ADDR
// No_Mechs := true ;
11949: LD_ADDR_EXP 58
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// end ; 7 :
11957: GO 12574
11959: LD_INT 7
11961: DOUBLE
11962: EQUAL
11963: IFTRUE 11967
11965: GO 12165
11967: POP
// begin def_base_level := 1 ;
11968: LD_ADDR_EXP 44
11972: PUSH
11973: LD_INT 1
11975: ST_TO_ADDR
// def_amount_of_people := 2 ;
11976: LD_ADDR_EXP 45
11980: PUSH
11981: LD_INT 2
11983: ST_TO_ADDR
// def_skill_level := 3 ;
11984: LD_ADDR_EXP 46
11988: PUSH
11989: LD_INT 3
11991: ST_TO_ADDR
// def_starting_resources := 3 ;
11992: LD_ADDR_EXP 47
11996: PUSH
11997: LD_INT 3
11999: ST_TO_ADDR
// def_shipments_density := 1 ;
12000: LD_ADDR_EXP 48
12004: PUSH
12005: LD_INT 1
12007: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
12008: LD_ADDR_EXP 49
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
12016: LD_ADDR_EXP 50
12020: PUSH
12021: LD_INT 2
12023: ST_TO_ADDR
// def_shared_vision := 1 ;
12024: LD_ADDR_EXP 51
12028: PUSH
12029: LD_INT 1
12031: ST_TO_ADDR
// def_morale_flags := 0 ;
12032: LD_ADDR_EXP 52
12036: PUSH
12037: LD_INT 0
12039: ST_TO_ADDR
// def_siberite_detection := 1 ;
12040: LD_ADDR_EXP 53
12044: PUSH
12045: LD_INT 1
12047: ST_TO_ADDR
// def_people_respawning := 0 ;
12048: LD_ADDR_EXP 54
12052: PUSH
12053: LD_INT 0
12055: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12056: LD_ADDR_EXP 55
12060: PUSH
12061: LD_INT 1
12063: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12064: LD_ADDR_EXP 56
12068: PUSH
12069: LD_INT 0
12071: ST_TO_ADDR
// def_builduptime := 3 ;
12072: LD_ADDR_EXP 57
12076: PUSH
12077: LD_INT 3
12079: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: LD_INT 23
12087: PUSH
12088: EMPTY
12089: LIST
12090: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
12091: LD_ADDR_VAR 0 3
12095: PUSH
12096: LD_INT 37
12098: PUSH
12099: EMPTY
12100: LIST
12101: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12102: LD_ADDR_LOC 22
12106: PUSH
12107: EMPTY
12108: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12109: LD_ADDR_LOC 23
12113: PUSH
12114: EMPTY
12115: ST_TO_ADDR
// Banned_Controls := [ ] ;
12116: LD_ADDR_LOC 24
12120: PUSH
12121: EMPTY
12122: ST_TO_ADDR
// Banned_Engines := [ ] ;
12123: LD_ADDR_LOC 25
12127: PUSH
12128: EMPTY
12129: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
12130: LD_ADDR_LOC 20
12134: PUSH
12135: LD_INT 31
12137: PUSH
12138: LD_INT 32
12140: PUSH
12141: LD_INT 33
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: PUSH
12149: EMPTY
12150: LIST
12151: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
12152: LD_ADDR_LOC 21
12156: PUSH
12157: LD_INT 10
12159: PUSH
12160: EMPTY
12161: LIST
12162: ST_TO_ADDR
// end ; 8 :
12163: GO 12574
12165: LD_INT 8
12167: DOUBLE
12168: EQUAL
12169: IFTRUE 12173
12171: GO 12573
12173: POP
// begin def_base_level := 0 ;
12174: LD_ADDR_EXP 44
12178: PUSH
12179: LD_INT 0
12181: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
12182: LD_ADDR_EXP 45
12186: PUSH
12187: LD_INT 0
12189: PPUSH
12190: LD_INT 1
12192: PPUSH
12193: CALL_OW 12
12197: ST_TO_ADDR
// def_skill_level := 0 ;
12198: LD_ADDR_EXP 46
12202: PUSH
12203: LD_INT 0
12205: ST_TO_ADDR
// def_starting_resources := 2 ;
12206: LD_ADDR_EXP 47
12210: PUSH
12211: LD_INT 2
12213: ST_TO_ADDR
// def_shipments_density := 1 ;
12214: LD_ADDR_EXP 48
12218: PUSH
12219: LD_INT 1
12221: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12222: LD_ADDR_EXP 49
12226: PUSH
12227: LD_INT 0
12229: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12230: LD_ADDR_EXP 50
12234: PUSH
12235: LD_INT 0
12237: ST_TO_ADDR
// def_shared_vision := 1 ;
12238: LD_ADDR_EXP 51
12242: PUSH
12243: LD_INT 1
12245: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
12246: LD_ADDR_EXP 52
12250: PUSH
12251: LD_INT 0
12253: PPUSH
12254: LD_INT 2
12256: PPUSH
12257: CALL_OW 12
12261: ST_TO_ADDR
// def_siberite_detection := 0 ;
12262: LD_ADDR_EXP 53
12266: PUSH
12267: LD_INT 0
12269: ST_TO_ADDR
// def_people_respawning := 0 ;
12270: LD_ADDR_EXP 54
12274: PUSH
12275: LD_INT 0
12277: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
12278: LD_ADDR_EXP 55
12282: PUSH
12283: LD_INT 2
12285: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12286: LD_ADDR_EXP 56
12290: PUSH
12291: LD_INT 0
12293: ST_TO_ADDR
// def_builduptime := 0 ;
12294: LD_ADDR_EXP 57
12298: PUSH
12299: LD_INT 0
12301: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
12302: LD_ADDR_VAR 0 2
12306: PUSH
12307: LD_INT 23
12309: PUSH
12310: LD_INT 20
12312: PUSH
12313: LD_INT 40
12315: PUSH
12316: LD_INT 47
12318: PUSH
12319: LD_INT 46
12321: PUSH
12322: LD_INT 39
12324: PUSH
12325: LD_INT 71
12327: PUSH
12328: LD_INT 34
12330: PUSH
12331: LD_INT 41
12333: PUSH
12334: LD_INT 44
12336: PUSH
12337: LD_INT 17
12339: PUSH
12340: LD_INT 16
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
12357: LD_ADDR_VAR 0 3
12361: PUSH
12362: LD_INT 37
12364: PUSH
12365: LD_INT 5
12367: PUSH
12368: LD_INT 13
12370: PUSH
12371: LD_INT 34
12373: PUSH
12374: LD_INT 12
12376: PUSH
12377: LD_INT 15
12379: PUSH
12380: LD_INT 11
12382: PUSH
12383: LD_INT 14
12385: PUSH
12386: LD_INT 29
12388: PUSH
12389: LD_INT 30
12391: PUSH
12392: LD_INT 28
12394: PUSH
12395: LD_INT 24
12397: PUSH
12398: LD_INT 25
12400: PUSH
12401: LD_INT 20
12403: PUSH
12404: LD_INT 21
12406: PUSH
12407: LD_INT 22
12409: PUSH
12410: LD_INT 36
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12432: LD_ADDR_LOC 22
12436: PUSH
12437: EMPTY
12438: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
12439: LD_ADDR_LOC 23
12443: PUSH
12444: LD_INT 14
12446: PUSH
12447: EMPTY
12448: LIST
12449: ST_TO_ADDR
// Banned_Controls := [ ] ;
12450: LD_ADDR_LOC 24
12454: PUSH
12455: EMPTY
12456: ST_TO_ADDR
// Banned_Engines := [ ] ;
12457: LD_ADDR_LOC 25
12461: PUSH
12462: EMPTY
12463: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
12464: LD_ADDR_LOC 20
12468: PUSH
12469: LD_INT 31
12471: PUSH
12472: LD_INT 32
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 4
12481: PUSH
12482: EMPTY
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
12489: LD_ADDR_LOC 21
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: LD_INT 1
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: ST_TO_ADDR
// for i := 1 to 8 do
12504: LD_ADDR_VAR 0 4
12508: PUSH
12509: DOUBLE
12510: LD_INT 1
12512: DEC
12513: ST_TO_ADDR
12514: LD_INT 8
12516: PUSH
12517: FOR_TO
12518: IFFALSE 12569
// if ( Side_Nations [ i ] = 3 ) then
12520: LD_EXP 20
12524: PUSH
12525: LD_VAR 0 4
12529: ARRAY
12530: PUSH
12531: LD_INT 3
12533: EQUAL
12534: IFFALSE 12567
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
12536: LD_ADDR_EXP 20
12540: PUSH
12541: LD_EXP 20
12545: PPUSH
12546: LD_VAR 0 4
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: LD_INT 2
12556: PPUSH
12557: CALL_OW 12
12561: PPUSH
12562: CALL_OW 1
12566: ST_TO_ADDR
12567: GO 12517
12569: POP
12570: POP
// end ; end ;
12571: GO 12574
12573: POP
// for i := 1 to 8 do
12574: LD_ADDR_VAR 0 4
12578: PUSH
12579: DOUBLE
12580: LD_INT 1
12582: DEC
12583: ST_TO_ADDR
12584: LD_INT 8
12586: PUSH
12587: FOR_TO
12588: IFFALSE 12672
// if Side_Positions [ i ] then
12590: LD_EXP 19
12594: PUSH
12595: LD_VAR 0 4
12599: ARRAY
12600: IFFALSE 12670
// begin for j in Unavailable_Techs do
12602: LD_ADDR_VAR 0 5
12606: PUSH
12607: LD_VAR 0 2
12611: PUSH
12612: FOR_IN
12613: IFFALSE 12634
// SetTech ( j , i , 0 ) ;
12615: LD_VAR 0 5
12619: PPUSH
12620: LD_VAR 0 4
12624: PPUSH
12625: LD_INT 0
12627: PPUSH
12628: CALL_OW 322
12632: GO 12612
12634: POP
12635: POP
// for j in Unavailable_Builds do
12636: LD_ADDR_VAR 0 5
12640: PUSH
12641: LD_VAR 0 3
12645: PUSH
12646: FOR_IN
12647: IFFALSE 12668
// SetRestrict ( j , i , 0 ) ;
12649: LD_VAR 0 5
12653: PPUSH
12654: LD_VAR 0 4
12658: PPUSH
12659: LD_INT 0
12661: PPUSH
12662: CALL_OW 324
12666: GO 12646
12668: POP
12669: POP
// end ;
12670: GO 12587
12672: POP
12673: POP
// end ;
12674: LD_VAR 0 1
12678: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
12679: LD_INT 0
12681: PPUSH
12682: PPUSH
12683: PPUSH
12684: PPUSH
12685: PPUSH
12686: PPUSH
12687: PPUSH
// for i := 1 to Restricted_Builds do
12688: LD_ADDR_VAR 0 2
12692: PUSH
12693: DOUBLE
12694: LD_INT 1
12696: DEC
12697: ST_TO_ADDR
12698: LD_LOC 20
12702: PUSH
12703: FOR_TO
12704: IFFALSE 13014
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
12706: LD_LOC 20
12710: PUSH
12711: LD_VAR 0 2
12715: ARRAY
12716: PUSH
12717: LD_INT 1
12719: ARRAY
12720: PUSH
12721: LD_INT 31
12723: DOUBLE
12724: EQUAL
12725: IFTRUE 12741
12727: LD_INT 32
12729: DOUBLE
12730: EQUAL
12731: IFTRUE 12741
12733: LD_INT 33
12735: DOUBLE
12736: EQUAL
12737: IFTRUE 12741
12739: GO 12752
12741: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
12742: LD_ADDR_VAR 0 6
12746: PUSH
12747: LD_STRING #Turrets
12749: ST_TO_ADDR
12750: GO 12797
12752: LD_INT 4
12754: DOUBLE
12755: EQUAL
12756: IFTRUE 12766
12758: LD_INT 5
12760: DOUBLE
12761: EQUAL
12762: IFTRUE 12766
12764: GO 12777
12766: POP
// btype := #Armouries ; b_Behemoth :
12767: LD_ADDR_VAR 0 6
12771: PUSH
12772: LD_STRING #Armouries
12774: ST_TO_ADDR
12775: GO 12797
12777: LD_INT 37
12779: DOUBLE
12780: EQUAL
12781: IFTRUE 12785
12783: GO 12796
12785: POP
// btype := #Behemoths ; end ;
12786: LD_ADDR_VAR 0 6
12790: PUSH
12791: LD_STRING #Behemoths
12793: ST_TO_ADDR
12794: GO 12797
12796: POP
// list := [ ] ;
12797: LD_ADDR_VAR 0 7
12801: PUSH
12802: EMPTY
12803: ST_TO_ADDR
// for j := 1 to 8 do
12804: LD_ADDR_VAR 0 3
12808: PUSH
12809: DOUBLE
12810: LD_INT 1
12812: DEC
12813: ST_TO_ADDR
12814: LD_INT 8
12816: PUSH
12817: FOR_TO
12818: IFFALSE 12911
// if Side_Positions [ j ] then
12820: LD_EXP 19
12824: PUSH
12825: LD_VAR 0 3
12829: ARRAY
12830: IFFALSE 12909
// begin amount := 0 ;
12832: LD_ADDR_VAR 0 5
12836: PUSH
12837: LD_INT 0
12839: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
12840: LD_ADDR_VAR 0 4
12844: PUSH
12845: LD_LOC 20
12849: PUSH
12850: LD_VAR 0 2
12854: ARRAY
12855: PUSH
12856: FOR_IN
12857: IFFALSE 12905
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
12859: LD_ADDR_VAR 0 5
12863: PUSH
12864: LD_VAR 0 5
12868: PUSH
12869: LD_INT 22
12871: PUSH
12872: LD_VAR 0 3
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 30
12883: PUSH
12884: LD_VAR 0 4
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: PPUSH
12897: CALL_OW 69
12901: PLUS
12902: ST_TO_ADDR
12903: GO 12856
12905: POP
12906: POP
// break ;
12907: GO 12911
// end ;
12909: GO 12817
12911: POP
12912: POP
// list := [ ] ;
12913: LD_ADDR_VAR 0 7
12917: PUSH
12918: EMPTY
12919: ST_TO_ADDR
// for j := 1 to 8 do
12920: LD_ADDR_VAR 0 3
12924: PUSH
12925: DOUBLE
12926: LD_INT 1
12928: DEC
12929: ST_TO_ADDR
12930: LD_INT 8
12932: PUSH
12933: FOR_TO
12934: IFFALSE 12954
// list := list ^ amount ;
12936: LD_ADDR_VAR 0 7
12940: PUSH
12941: LD_VAR 0 7
12945: PUSH
12946: LD_VAR 0 5
12950: ADD
12951: ST_TO_ADDR
12952: GO 12933
12954: POP
12955: POP
// Already_Built := Already_Built ^ [ list ] ;
12956: LD_ADDR_LOC 26
12960: PUSH
12961: LD_LOC 26
12965: PUSH
12966: LD_VAR 0 7
12970: PUSH
12971: EMPTY
12972: LIST
12973: ADD
12974: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
12975: LD_ADDR_LOC 27
12979: PUSH
12980: LD_LOC 27
12984: PUSH
12985: LD_VAR 0 6
12989: PUSH
12990: LD_VAR 0 5
12994: PUSH
12995: LD_LOC 21
12999: PUSH
13000: LD_VAR 0 2
13004: ARRAY
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: LIST
13010: ADD
13011: ST_TO_ADDR
// end ;
13012: GO 12703
13014: POP
13015: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13016: LD_ADDR_LOC 28
13020: PUSH
13021: LD_INT 0
13023: PUSH
13024: LD_INT 0
13026: PUSH
13027: LD_INT 0
13029: PUSH
13030: LD_INT 0
13032: PUSH
13033: LD_INT 0
13035: PUSH
13036: LD_INT 0
13038: PUSH
13039: LD_INT 0
13041: PUSH
13042: LD_INT 0
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: ST_TO_ADDR
// if Limits_Info then
13055: LD_LOC 27
13059: IFFALSE 13075
// Limits_Info := #Limits ^ Limits_Info ;
13061: LD_ADDR_LOC 27
13065: PUSH
13066: LD_STRING #Limits
13068: PUSH
13069: LD_LOC 27
13073: ADD
13074: ST_TO_ADDR
// end ;
13075: LD_VAR 0 1
13079: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13080: LD_INT 0
13082: PPUSH
13083: PPUSH
13084: PPUSH
13085: PPUSH
// for i := 1 to Restricted_Builds do
13086: LD_ADDR_VAR 0 7
13090: PUSH
13091: DOUBLE
13092: LD_INT 1
13094: DEC
13095: ST_TO_ADDR
13096: LD_LOC 20
13100: PUSH
13101: FOR_TO
13102: IFFALSE 13525
// if BType in Restricted_Builds [ i ] then
13104: LD_VAR 0 2
13108: PUSH
13109: LD_LOC 20
13113: PUSH
13114: LD_VAR 0 7
13118: ARRAY
13119: IN
13120: IFFALSE 13523
// begin if old_side then
13122: LD_VAR 0 4
13126: IFFALSE 13252
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
13128: LD_LOC 26
13132: PUSH
13133: LD_VAR 0 7
13137: ARRAY
13138: PUSH
13139: LD_VAR 0 3
13143: ARRAY
13144: PUSH
13145: LD_VAR 0 5
13149: PLUS
13150: PUSH
13151: LD_LOC 21
13155: PUSH
13156: LD_VAR 0 7
13160: ARRAY
13161: GREATER
13162: IFFALSE 13188
// begin SetSide ( un , old_side ) ;
13164: LD_VAR 0 1
13168: PPUSH
13169: LD_VAR 0 4
13173: PPUSH
13174: CALL_OW 235
// count := 0 ;
13178: LD_ADDR_VAR 0 5
13182: PUSH
13183: LD_INT 0
13185: ST_TO_ADDR
// end else
13186: GO 13252
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
13188: LD_ADDR_LOC 26
13192: PUSH
13193: LD_LOC 26
13197: PPUSH
13198: LD_VAR 0 7
13202: PPUSH
13203: LD_LOC 26
13207: PUSH
13208: LD_VAR 0 7
13212: ARRAY
13213: PPUSH
13214: LD_VAR 0 4
13218: PPUSH
13219: LD_LOC 26
13223: PUSH
13224: LD_VAR 0 7
13228: ARRAY
13229: PUSH
13230: LD_VAR 0 4
13234: ARRAY
13235: PUSH
13236: LD_VAR 0 5
13240: MINUS
13241: PPUSH
13242: CALL_OW 1
13246: PPUSH
13247: CALL_OW 1
13251: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
13252: LD_ADDR_LOC 26
13256: PUSH
13257: LD_LOC 26
13261: PPUSH
13262: LD_VAR 0 7
13266: PPUSH
13267: LD_LOC 26
13271: PUSH
13272: LD_VAR 0 7
13276: ARRAY
13277: PPUSH
13278: LD_VAR 0 3
13282: PPUSH
13283: LD_LOC 26
13287: PUSH
13288: LD_VAR 0 7
13292: ARRAY
13293: PUSH
13294: LD_VAR 0 3
13298: ARRAY
13299: PUSH
13300: LD_VAR 0 5
13304: PLUS
13305: PPUSH
13306: CALL_OW 1
13310: PPUSH
13311: CALL_OW 1
13315: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
13316: LD_VAR 0 5
13320: PUSH
13321: LD_INT 0
13323: NONEQUAL
13324: PUSH
13325: LD_VAR 0 3
13329: PUSH
13330: LD_OWVAR 2
13334: EQUAL
13335: AND
13336: IFFALSE 13379
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
13338: LD_ADDR_LOC 27
13342: PUSH
13343: LD_LOC 27
13347: PPUSH
13348: LD_INT 3
13350: PUSH
13351: LD_VAR 0 7
13355: MUL
13356: PPUSH
13357: LD_LOC 26
13361: PUSH
13362: LD_VAR 0 7
13366: ARRAY
13367: PUSH
13368: LD_VAR 0 3
13372: ARRAY
13373: PPUSH
13374: CALL_OW 1
13378: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
13379: LD_LOC 26
13383: PUSH
13384: LD_VAR 0 7
13388: ARRAY
13389: PUSH
13390: LD_VAR 0 3
13394: ARRAY
13395: PUSH
13396: LD_LOC 21
13400: PUSH
13401: LD_VAR 0 7
13405: ARRAY
13406: GREATER
13407: IFFALSE 13434
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
13409: LD_ADDR_LOC 28
13413: PUSH
13414: LD_LOC 28
13418: PPUSH
13419: LD_VAR 0 3
13423: PPUSH
13424: LD_INT 1
13426: PPUSH
13427: CALL_OW 1
13431: ST_TO_ADDR
// end else
13432: GO 13521
// begin for j := 1 to Restricted_Builds do
13434: LD_ADDR_VAR 0 8
13438: PUSH
13439: DOUBLE
13440: LD_INT 1
13442: DEC
13443: ST_TO_ADDR
13444: LD_LOC 20
13448: PUSH
13449: FOR_TO
13450: IFFALSE 13494
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
13452: LD_LOC 26
13456: PUSH
13457: LD_VAR 0 8
13461: ARRAY
13462: PUSH
13463: LD_VAR 0 3
13467: ARRAY
13468: PUSH
13469: LD_LOC 21
13473: PUSH
13474: LD_VAR 0 8
13478: ARRAY
13479: GREATER
13480: IFFALSE 13492
// begin Is_Cheater := true ;
13482: LD_ADDR_VAR 0 9
13486: PUSH
13487: LD_INT 1
13489: ST_TO_ADDR
// break ;
13490: GO 13494
// end ;
13492: GO 13449
13494: POP
13495: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
13496: LD_ADDR_LOC 28
13500: PUSH
13501: LD_LOC 28
13505: PPUSH
13506: LD_VAR 0 3
13510: PPUSH
13511: LD_VAR 0 9
13515: PPUSH
13516: CALL_OW 1
13520: ST_TO_ADDR
// end ; break ;
13521: GO 13525
// end ;
13523: GO 13101
13525: POP
13526: POP
// end ;
13527: LD_VAR 0 6
13531: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
13532: LD_VAR 0 5
13536: PUSH
13537: LD_LOC 22
13541: IN
13542: PUSH
13543: LD_VAR 0 2
13547: PUSH
13548: LD_LOC 23
13552: IN
13553: OR
13554: PUSH
13555: LD_VAR 0 4
13559: PUSH
13560: LD_LOC 24
13564: IN
13565: OR
13566: PUSH
13567: LD_VAR 0 3
13571: PUSH
13572: LD_LOC 25
13576: IN
13577: OR
13578: IFFALSE 13589
// ComCancel ( factory ) ;
13580: LD_VAR 0 1
13584: PPUSH
13585: CALL_OW 127
// end ;
13589: PPOPN 5
13591: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
13592: LD_VAR 0 2
13596: PUSH
13597: LD_LOC 22
13601: IN
13602: IFFALSE 13613
// ComCancel ( building ) ;
13604: LD_VAR 0 1
13608: PPUSH
13609: CALL_OW 127
// end ; end_of_file
13613: PPOPN 2
13615: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
13616: LD_INT 0
13618: PPUSH
13619: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
13620: LD_ADDR_VAR 0 2
13624: PUSH
13625: LD_STRING #Multi1x1-Time
13627: PUSH
13628: LD_OWVAR 1
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: ST_TO_ADDR
// if WaitServerStrings then
13637: LD_EXP 60
13641: IFFALSE 13659
// AllStrings = AllStrings ^ WaitServerStrings ;
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: LD_VAR 0 2
13652: PUSH
13653: LD_EXP 60
13657: ADD
13658: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
13659: LD_INT 0
13661: PUSH
13662: LD_EXP 16
13666: PUSH
13667: LD_OWVAR 1
13671: MINUS
13672: LESSEQUAL
13673: IFFALSE 13704
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
13675: LD_ADDR_VAR 0 2
13679: PUSH
13680: LD_VAR 0 2
13684: PUSH
13685: LD_STRING #allowedsibbomb
13687: PUSH
13688: LD_EXP 16
13692: PUSH
13693: LD_OWVAR 1
13697: MINUS
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: ADD
13703: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
13704: LD_INT 0
13706: PUSH
13707: LD_EXP 14
13711: PUSH
13712: LD_OWVAR 1
13716: MINUS
13717: LESSEQUAL
13718: IFFALSE 13749
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
13720: LD_ADDR_VAR 0 2
13724: PUSH
13725: LD_VAR 0 2
13729: PUSH
13730: LD_STRING #builduptime
13732: PUSH
13733: LD_EXP 14
13737: PUSH
13738: LD_OWVAR 1
13742: MINUS
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: ADD
13748: ST_TO_ADDR
// if ( ExtraStrings ) then
13749: LD_EXP 59
13753: IFFALSE 13775
// AllStrings := AllStrings ^  ^ ExtraStrings ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 2
13764: PUSH
13765: LD_STRING 
13767: ADD
13768: PUSH
13769: LD_EXP 59
13773: ADD
13774: ST_TO_ADDR
// if ( LimitsStrings ) then
13775: CALL 10469 0 0
13779: IFFALSE 13801
// AllStrings := AllStrings ^  ^ LimitsStrings ;
13781: LD_ADDR_VAR 0 2
13785: PUSH
13786: LD_VAR 0 2
13790: PUSH
13791: LD_STRING 
13793: ADD
13794: PUSH
13795: CALL 10469 0 0
13799: ADD
13800: ST_TO_ADDR
// if debug_strings then
13801: LD_OWVAR 48
13805: IFFALSE 13827
// AllStrings := AllStrings ^  ^ debug_strings ;
13807: LD_ADDR_VAR 0 2
13811: PUSH
13812: LD_VAR 0 2
13816: PUSH
13817: LD_STRING 
13819: ADD
13820: PUSH
13821: LD_OWVAR 48
13825: ADD
13826: ST_TO_ADDR
// Display_Strings := AllStrings ;
13827: LD_ADDR_OWVAR 47
13831: PUSH
13832: LD_VAR 0 2
13836: ST_TO_ADDR
// end ;
13837: LD_VAR 0 1
13841: RET
// every 0 0$1 do
13842: GO 13844
13844: DISABLE
// begin ShowTimer ;
13845: CALL 13616 0 0
// enable ;
13849: ENABLE
// end ; end_of_file
13850: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
13851: LD_INT 0
13853: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
13854: LD_VAR 0 1
13858: PPUSH
13859: CALL_OW 255
13863: PUSH
13864: LD_VAR 0 4
13868: EQUAL
13869: IFFALSE 13888
// begin SetAchievement ( ACH_RAD ) ;
13871: LD_STRING ACH_RAD
13873: PPUSH
13874: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
13878: LD_STRING ACH_NL
13880: PPUSH
13881: LD_INT 1
13883: PPUSH
13884: CALL_OW 564
// end end ;
13888: LD_VAR 0 5
13892: RET
// export function SA_Win ( side ) ; begin
13893: LD_INT 0
13895: PPUSH
// case side of 1 :
13896: LD_VAR 0 1
13900: PUSH
13901: LD_INT 1
13903: DOUBLE
13904: EQUAL
13905: IFTRUE 13909
13907: GO 13922
13909: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
13910: LD_STRING ACH_AH
13912: PPUSH
13913: LD_INT 1
13915: PPUSH
13916: CALL_OW 564
13920: GO 14085
13922: LD_INT 2
13924: DOUBLE
13925: EQUAL
13926: IFTRUE 13930
13928: GO 13943
13930: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
13931: LD_STRING ACH_E
13933: PPUSH
13934: LD_INT 1
13936: PPUSH
13937: CALL_OW 564
13941: GO 14085
13943: LD_INT 3
13945: DOUBLE
13946: EQUAL
13947: IFTRUE 13951
13949: GO 13964
13951: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
13952: LD_STRING ACH_OOL
13954: PPUSH
13955: LD_INT 1
13957: PPUSH
13958: CALL_OW 564
13962: GO 14085
13964: LD_INT 1
13966: PUSH
13967: LD_INT 2
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: DOUBLE
13974: EQUAL
13975: IFTRUE 13979
13977: GO 14004
13979: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
13980: LD_STRING ACH_AH
13982: PPUSH
13983: LD_REAL  5.00000000000000E-0001
13986: PPUSH
13987: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
13991: LD_STRING ACH_E
13993: PPUSH
13994: LD_REAL  5.00000000000000E-0001
13997: PPUSH
13998: CALL_OW 564
// end ; [ 2 , 3 ] :
14002: GO 14085
14004: LD_INT 2
14006: PUSH
14007: LD_INT 3
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: DOUBLE
14014: EQUAL
14015: IFTRUE 14019
14017: GO 14044
14019: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14020: LD_STRING ACH_OOL
14022: PPUSH
14023: LD_REAL  5.00000000000000E-0001
14026: PPUSH
14027: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14031: LD_STRING ACH_E
14033: PPUSH
14034: LD_REAL  5.00000000000000E-0001
14037: PPUSH
14038: CALL_OW 564
// end ; [ 3 , 1 ] :
14042: GO 14085
14044: LD_INT 3
14046: PUSH
14047: LD_INT 1
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: DOUBLE
14054: EQUAL
14055: IFTRUE 14059
14057: GO 14084
14059: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14060: LD_STRING ACH_AH
14062: PPUSH
14063: LD_REAL  5.00000000000000E-0001
14066: PPUSH
14067: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14071: LD_STRING ACH_OOL
14073: PPUSH
14074: LD_REAL  5.00000000000000E-0001
14077: PPUSH
14078: CALL_OW 564
// end ; end ;
14082: GO 14085
14084: POP
// end ; end_of_file
14085: LD_VAR 0 2
14089: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
14090: LD_INT 0
14092: PPUSH
14093: PPUSH
// enable ( 98 ) ;
14094: LD_INT 98
14096: ENABLE_MARKED
// GameEnded = false ;
14097: LD_ADDR_LOC 30
14101: PUSH
14102: LD_INT 0
14104: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14105: LD_ADDR_LOC 29
14109: PUSH
14110: LD_INT 0
14112: PUSH
14113: LD_INT 0
14115: PUSH
14116: LD_INT 0
14118: PUSH
14119: LD_INT 0
14121: PUSH
14122: LD_INT 0
14124: PUSH
14125: LD_INT 0
14127: PUSH
14128: LD_INT 0
14130: PUSH
14131: LD_INT 0
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: ST_TO_ADDR
// unfoged = false ;
14144: LD_ADDR_LOC 31
14148: PUSH
14149: LD_INT 0
14151: ST_TO_ADDR
// for i = 1 to side_positions do
14152: LD_ADDR_VAR 0 2
14156: PUSH
14157: DOUBLE
14158: LD_INT 1
14160: DEC
14161: ST_TO_ADDR
14162: LD_EXP 19
14166: PUSH
14167: FOR_TO
14168: IFFALSE 14208
// if not side_positions [ i ] then
14170: LD_EXP 19
14174: PUSH
14175: LD_VAR 0 2
14179: ARRAY
14180: NOT
14181: IFFALSE 14206
// defaited = replace ( defaited , i , true ) ;
14183: LD_ADDR_LOC 29
14187: PUSH
14188: LD_LOC 29
14192: PPUSH
14193: LD_VAR 0 2
14197: PPUSH
14198: LD_INT 1
14200: PPUSH
14201: CALL_OW 1
14205: ST_TO_ADDR
14206: GO 14167
14208: POP
14209: POP
// end ;
14210: LD_VAR 0 1
14214: RET
// function CanWinLoose ; begin
14215: LD_INT 0
14217: PPUSH
// Result := true ;
14218: LD_ADDR_VAR 0 1
14222: PUSH
14223: LD_INT 1
14225: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
14226: CALL_OW 518
14230: PUSH
14231: CALL_OW 519
14235: PUSH
14236: LD_INT 0
14238: GREATER
14239: AND
14240: IFFALSE 14250
// Result := false ;
14242: LD_ADDR_VAR 0 1
14246: PUSH
14247: LD_INT 0
14249: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14250: CALL_OW 531
14254: PUSH
14255: CALL_OW 519
14259: PUSH
14260: LD_INT 1
14262: GREATER
14263: AND
14264: IFFALSE 14274
// Result := false ;
14266: LD_ADDR_VAR 0 1
14270: PUSH
14271: LD_INT 0
14273: ST_TO_ADDR
// end ;
14274: LD_VAR 0 1
14278: RET
// export function HasPower ( i ) ; var k , h ; begin
14279: LD_INT 0
14281: PPUSH
14282: PPUSH
14283: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
14284: LD_VAR 0 1
14288: PPUSH
14289: CALL_OW 108
14293: NOT
14294: PUSH
14295: LD_EXP 22
14299: PUSH
14300: LD_VAR 0 1
14304: ARRAY
14305: NOT
14306: AND
14307: PUSH
14308: LD_OWVAR 4
14312: AND
14313: IFFALSE 14325
// begin result = false ;
14315: LD_ADDR_VAR 0 2
14319: PUSH
14320: LD_INT 0
14322: ST_TO_ADDR
// end else
14323: GO 14620
// case def_win_rules of 0 :
14325: LD_EXP 32
14329: PUSH
14330: LD_INT 0
14332: DOUBLE
14333: EQUAL
14334: IFTRUE 14338
14336: GO 14501
14338: POP
// if def_people_respawning then
14339: LD_EXP 54
14343: IFFALSE 14434
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
14345: LD_ADDR_VAR 0 2
14349: PUSH
14350: LD_INT 22
14352: PUSH
14353: LD_VAR 0 1
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 2
14364: PUSH
14365: LD_INT 21
14367: PUSH
14368: LD_INT 1
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: LD_INT 33
14377: PUSH
14378: LD_INT 3
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 33
14387: PUSH
14388: LD_INT 5
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 30
14397: PUSH
14398: LD_INT 0
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: LD_INT 30
14407: PUSH
14408: LD_INT 1
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PPUSH
14427: CALL_OW 69
14431: ST_TO_ADDR
14432: GO 14499
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
14434: LD_ADDR_VAR 0 2
14438: PUSH
14439: LD_INT 22
14441: PUSH
14442: LD_VAR 0 1
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 2
14453: PUSH
14454: LD_INT 21
14456: PUSH
14457: LD_INT 1
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 33
14466: PUSH
14467: LD_INT 3
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 33
14476: PUSH
14477: LD_INT 5
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PPUSH
14494: CALL_OW 69
14498: ST_TO_ADDR
14499: GO 14620
14501: LD_INT 1
14503: DOUBLE
14504: EQUAL
14505: IFTRUE 14509
14507: GO 14548
14509: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
14510: LD_ADDR_VAR 0 2
14514: PUSH
14515: LD_INT 22
14517: PUSH
14518: LD_VAR 0 1
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 21
14529: PUSH
14530: LD_INT 1
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PPUSH
14541: CALL_OW 69
14545: ST_TO_ADDR
14546: GO 14620
14548: LD_INT 2
14550: DOUBLE
14551: EQUAL
14552: IFTRUE 14556
14554: GO 14619
14556: POP
// begin h = false ;
14557: LD_ADDR_VAR 0 4
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// for k in heroes [ i ] do
14565: LD_ADDR_VAR 0 3
14569: PUSH
14570: LD_EXP 33
14574: PUSH
14575: LD_VAR 0 1
14579: ARRAY
14580: PUSH
14581: FOR_IN
14582: IFFALSE 14605
// if IsLive ( k ) then
14584: LD_VAR 0 3
14588: PPUSH
14589: CALL_OW 300
14593: IFFALSE 14603
// h = true ;
14595: LD_ADDR_VAR 0 4
14599: PUSH
14600: LD_INT 1
14602: ST_TO_ADDR
14603: GO 14581
14605: POP
14606: POP
// Result := h ;
14607: LD_ADDR_VAR 0 2
14611: PUSH
14612: LD_VAR 0 4
14616: ST_TO_ADDR
// end ; end ;
14617: GO 14620
14619: POP
// end ;
14620: LD_VAR 0 2
14624: RET
// function AlliedSides ( i , j ) ; begin
14625: LD_INT 0
14627: PPUSH
// Result := false ;
14628: LD_ADDR_VAR 0 3
14632: PUSH
14633: LD_INT 0
14635: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
14636: LD_VAR 0 1
14640: PPUSH
14641: LD_VAR 0 2
14645: PPUSH
14646: CALL_OW 81
14650: PUSH
14651: LD_INT 1
14653: EQUAL
14654: PUSH
14655: LD_VAR 0 2
14659: PPUSH
14660: LD_VAR 0 1
14664: PPUSH
14665: CALL_OW 81
14669: PUSH
14670: LD_INT 1
14672: EQUAL
14673: AND
14674: PUSH
14675: LD_VAR 0 1
14679: PPUSH
14680: CALL_OW 83
14684: AND
14685: PUSH
14686: LD_VAR 0 2
14690: PPUSH
14691: CALL_OW 83
14695: AND
14696: IFFALSE 14706
// Result := true ;
14698: LD_ADDR_VAR 0 3
14702: PUSH
14703: LD_INT 1
14705: ST_TO_ADDR
// end ;
14706: LD_VAR 0 3
14710: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
14711: CALL 14215 0 0
14715: PUSH
14716: LD_LOC 30
14720: NOT
14721: AND
14722: IFFALSE 14738
14724: GO 14726
14726: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
14727: LD_ADDR_EXP 60
14731: PUSH
14732: LD_STRING #Player-Ended
14734: PUSH
14735: EMPTY
14736: LIST
14737: ST_TO_ADDR
14738: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
14739: CALL 14215 0 0
14743: PUSH
14744: LD_LOC 30
14748: AND
14749: IFFALSE 14758
14751: GO 14753
14753: DISABLE
// YouLostInMultiplayer ;
14754: CALL_OW 107
14758: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
14759: CALL 14215 0 0
14763: NOT
14764: PUSH
14765: CALL_OW 531
14769: NOT
14770: AND
14771: IFFALSE 14787
14773: GO 14775
14775: DISABLE
// WaitServerStrings = [ #server-wait ] ;
14776: LD_ADDR_EXP 60
14780: PUSH
14781: LD_STRING #server-wait
14783: PUSH
14784: EMPTY
14785: LIST
14786: ST_TO_ADDR
14787: END
// every 100 trigger IAmSpec do
14788: CALL_OW 531
14792: IFFALSE 14808
14794: GO 14796
14796: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
14797: LD_ADDR_EXP 60
14801: PUSH
14802: LD_STRING #Player-IAmSpec
14804: PUSH
14805: EMPTY
14806: LIST
14807: ST_TO_ADDR
14808: END
// every 100 trigger GameEnded and IAmSpec do
14809: LD_LOC 30
14813: PUSH
14814: CALL_OW 531
14818: AND
14819: IFFALSE 14828
14821: GO 14823
14823: DISABLE
// YouLostInMultiplayer ;
14824: CALL_OW 107
14828: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
14829: CALL 14215 0 0
14833: PUSH
14834: LD_LOC 30
14838: NOT
14839: AND
14840: IFFALSE 14856
14842: GO 14844
14844: DISABLE
// WaitServerStrings = [ $player-win ] ;
14845: LD_ADDR_EXP 60
14849: PUSH
14850: LD_STRING $player-win
14852: PUSH
14853: EMPTY
14854: LIST
14855: ST_TO_ADDR
14856: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
14857: CALL 14215 0 0
14861: PUSH
14862: LD_LOC 30
14866: AND
14867: IFFALSE 14891
14869: GO 14871
14871: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
14872: LD_EXP 20
14876: PUSH
14877: LD_OWVAR 2
14881: ARRAY
14882: PPUSH
14883: CALL 13893 0 1
// YouWinInMultiplayer ;
14887: CALL_OW 106
// end ;
14891: END
// every 100 trigger isEditor marked 401 do
14892: LD_OWVAR 84
14896: IFFALSE 14912
14898: GO 14900
14900: DISABLE
// Debug_Strings = [ You won ] ;
14901: LD_ADDR_OWVAR 48
14905: PUSH
14906: LD_STRING You won
14908: PUSH
14909: EMPTY
14910: LIST
14911: ST_TO_ADDR
14912: END
// every 100 trigger isEditor marked 400 do
14913: LD_OWVAR 84
14917: IFFALSE 14933
14919: GO 14921
14921: DISABLE
// Debug_Strings = [ You loss ] ;
14922: LD_ADDR_OWVAR 48
14926: PUSH
14927: LD_STRING You loss
14929: PUSH
14930: EMPTY
14931: LIST
14932: ST_TO_ADDR
14933: END
// every 100 marked 98 do var i , un ;
14934: GO 14936
14936: DISABLE
14937: LD_INT 0
14939: PPUSH
14940: PPUSH
// begin for i = 1 to side_positions do
14941: LD_ADDR_VAR 0 1
14945: PUSH
14946: DOUBLE
14947: LD_INT 1
14949: DEC
14950: ST_TO_ADDR
14951: LD_EXP 19
14955: PUSH
14956: FOR_TO
14957: IFFALSE 15080
// if side_positions [ i ] then
14959: LD_EXP 19
14963: PUSH
14964: LD_VAR 0 1
14968: ARRAY
14969: IFFALSE 15078
// if not HasPower ( i ) and not Defaited [ i ] then
14971: LD_VAR 0 1
14975: PPUSH
14976: CALL 14279 0 1
14980: NOT
14981: PUSH
14982: LD_LOC 29
14986: PUSH
14987: LD_VAR 0 1
14991: ARRAY
14992: NOT
14993: AND
14994: IFFALSE 15078
// begin un = filterallunits ( [ f_side , i ] ) ;
14996: LD_ADDR_VAR 0 2
15000: PUSH
15001: LD_INT 22
15003: PUSH
15004: LD_VAR 0 1
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 69
15017: ST_TO_ADDR
// if un then
15018: LD_VAR 0 2
15022: IFFALSE 15036
// SetSide ( un , 0 ) ;
15024: LD_VAR 0 2
15028: PPUSH
15029: LD_INT 0
15031: PPUSH
15032: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
15036: LD_ADDR_LOC 29
15040: PUSH
15041: LD_LOC 29
15045: PPUSH
15046: LD_VAR 0 1
15050: PPUSH
15051: LD_INT 1
15053: PPUSH
15054: CALL_OW 1
15058: ST_TO_ADDR
// if i = your_side then
15059: LD_VAR 0 1
15063: PUSH
15064: LD_OWVAR 2
15068: EQUAL
15069: IFFALSE 15078
// begin Multiplayer_Loose_Message ;
15071: CALL_OW 521
// enable ( 400 ) ;
15075: LD_INT 400
15077: ENABLE_MARKED
// end ; end ;
15078: GO 14956
15080: POP
15081: POP
// if not Unfoged and defaited [ your_side ] then
15082: LD_LOC 31
15086: NOT
15087: PUSH
15088: LD_LOC 29
15092: PUSH
15093: LD_OWVAR 2
15097: ARRAY
15098: AND
15099: IFFALSE 15105
// Unfog ;
15101: CALL 15291 0 0
// DidGameEnd ;
15105: CALL 15120 0 0
// if not GameEnded then
15109: LD_LOC 30
15113: NOT
15114: IFFALSE 15117
// enable ;
15116: ENABLE
// end ;
15117: PPOPN 2
15119: END
// function DidGameEnd ; var i , k , enemy ; begin
15120: LD_INT 0
15122: PPUSH
15123: PPUSH
15124: PPUSH
15125: PPUSH
// enemy = [ ] ;
15126: LD_ADDR_VAR 0 4
15130: PUSH
15131: EMPTY
15132: ST_TO_ADDR
// for i = 1 to side_positions do
15133: LD_ADDR_VAR 0 2
15137: PUSH
15138: DOUBLE
15139: LD_INT 1
15141: DEC
15142: ST_TO_ADDR
15143: LD_EXP 19
15147: PUSH
15148: FOR_TO
15149: IFFALSE 15253
// if not defaited [ i ] then
15151: LD_LOC 29
15155: PUSH
15156: LD_VAR 0 2
15160: ARRAY
15161: NOT
15162: IFFALSE 15251
// for k = 1 to side_positions do
15164: LD_ADDR_VAR 0 3
15168: PUSH
15169: DOUBLE
15170: LD_INT 1
15172: DEC
15173: ST_TO_ADDR
15174: LD_EXP 19
15178: PUSH
15179: FOR_TO
15180: IFFALSE 15249
// if not defaited [ k ] then
15182: LD_LOC 29
15186: PUSH
15187: LD_VAR 0 3
15191: ARRAY
15192: NOT
15193: IFFALSE 15247
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
15195: LD_VAR 0 2
15199: PPUSH
15200: LD_VAR 0 3
15204: PPUSH
15205: CALL_OW 81
15209: PUSH
15210: LD_INT 2
15212: PUSH
15213: LD_INT 0
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: IN
15220: IFFALSE 15247
// enemy = enemy ^ [ i , k ] ;
15222: LD_ADDR_VAR 0 4
15226: PUSH
15227: LD_VAR 0 4
15231: PUSH
15232: LD_VAR 0 2
15236: PUSH
15237: LD_VAR 0 3
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: ADD
15246: ST_TO_ADDR
15247: GO 15179
15249: POP
15250: POP
15251: GO 15148
15253: POP
15254: POP
// if not enemy then
15255: LD_VAR 0 4
15259: NOT
15260: IFFALSE 15286
// begin GameEnded = true ;
15262: LD_ADDR_LOC 30
15266: PUSH
15267: LD_INT 1
15269: ST_TO_ADDR
// if not defaited [ your_side ] then
15270: LD_LOC 29
15274: PUSH
15275: LD_OWVAR 2
15279: ARRAY
15280: NOT
15281: IFFALSE 15286
// enable ( 401 ) ;
15283: LD_INT 401
15285: ENABLE_MARKED
// end ; end ;
15286: LD_VAR 0 1
15290: RET
// function unfog ; var k , friends ; begin
15291: LD_INT 0
15293: PPUSH
15294: PPUSH
15295: PPUSH
// for k = 1 to side_positions do
15296: LD_ADDR_VAR 0 2
15300: PUSH
15301: DOUBLE
15302: LD_INT 1
15304: DEC
15305: ST_TO_ADDR
15306: LD_EXP 19
15310: PUSH
15311: FOR_TO
15312: IFFALSE 15368
// if not defaited [ k ] then
15314: LD_LOC 29
15318: PUSH
15319: LD_VAR 0 2
15323: ARRAY
15324: NOT
15325: IFFALSE 15366
// if GetAttitude ( your_side , k ) in [ att_friend ] then
15327: LD_OWVAR 2
15331: PPUSH
15332: LD_VAR 0 2
15336: PPUSH
15337: CALL_OW 81
15341: PUSH
15342: LD_INT 1
15344: PUSH
15345: EMPTY
15346: LIST
15347: IN
15348: IFFALSE 15366
// friends = friends ^ k ;
15350: LD_ADDR_VAR 0 3
15354: PUSH
15355: LD_VAR 0 3
15359: PUSH
15360: LD_VAR 0 2
15364: ADD
15365: ST_TO_ADDR
15366: GO 15311
15368: POP
15369: POP
// if not friends then
15370: LD_VAR 0 3
15374: NOT
15375: IFFALSE 15392
// begin fogoff ( true ) ;
15377: LD_INT 1
15379: PPUSH
15380: CALL_OW 344
// unfoged = true ;
15384: LD_ADDR_LOC 31
15388: PUSH
15389: LD_INT 1
15391: ST_TO_ADDR
// end ; end ;
15392: LD_VAR 0 1
15396: RET
// export function MakeGameEnd ; begin
15397: LD_INT 0
15399: PPUSH
// fogoff ( true ) ;
15400: LD_INT 1
15402: PPUSH
15403: CALL_OW 344
// unfoged = true ;
15407: LD_ADDR_LOC 31
15411: PUSH
15412: LD_INT 1
15414: ST_TO_ADDR
// wait ( 0 0$5 ) ;
15415: LD_INT 175
15417: PPUSH
15418: CALL_OW 67
// GameEnded = true ;
15422: LD_ADDR_LOC 30
15426: PUSH
15427: LD_INT 1
15429: ST_TO_ADDR
// end ;
15430: LD_VAR 0 1
15434: RET
// export function GetGameEnded ; begin
15435: LD_INT 0
15437: PPUSH
// result = GameEnded ;
15438: LD_ADDR_VAR 0 1
15442: PUSH
15443: LD_LOC 30
15447: ST_TO_ADDR
// end ; end_of_file
15448: LD_VAR 0 1
15452: RET
// export function SetMpTechs ( ) ; var side , i ; begin
15453: LD_INT 0
15455: PPUSH
15456: PPUSH
15457: PPUSH
// for side = 1 to 8 do
15458: LD_ADDR_VAR 0 2
15462: PUSH
15463: DOUBLE
15464: LD_INT 1
15466: DEC
15467: ST_TO_ADDR
15468: LD_INT 8
15470: PUSH
15471: FOR_TO
15472: IFFALSE 15593
// begin for i = 1 to 72 do
15474: LD_ADDR_VAR 0 3
15478: PUSH
15479: DOUBLE
15480: LD_INT 1
15482: DEC
15483: ST_TO_ADDR
15484: LD_INT 72
15486: PUSH
15487: FOR_TO
15488: IFFALSE 15519
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15490: LD_VAR 0 3
15494: PPUSH
15495: LD_VAR 0 2
15499: PPUSH
15500: LD_INT 0
15502: PPUSH
15503: LD_VAR 0 3
15507: PPUSH
15508: CALL_OW 565
15512: PPUSH
15513: CALL_OW 322
15517: GO 15487
15519: POP
15520: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15521: LD_INT 73
15523: PPUSH
15524: LD_VAR 0 2
15528: PPUSH
15529: LD_INT 0
15531: PPUSH
15532: LD_INT 25
15534: PPUSH
15535: CALL_OW 565
15539: PPUSH
15540: CALL_OW 322
// for i = 0 to 40 do
15544: LD_ADDR_VAR 0 3
15548: PUSH
15549: DOUBLE
15550: LD_INT 0
15552: DEC
15553: ST_TO_ADDR
15554: LD_INT 40
15556: PUSH
15557: FOR_TO
15558: IFFALSE 15589
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15560: LD_VAR 0 3
15564: PPUSH
15565: LD_VAR 0 2
15569: PPUSH
15570: LD_INT 1
15572: PPUSH
15573: LD_VAR 0 3
15577: PPUSH
15578: CALL_OW 565
15582: PPUSH
15583: CALL_OW 324
15587: GO 15557
15589: POP
15590: POP
// end ;
15591: GO 15471
15593: POP
15594: POP
// end ;
15595: LD_VAR 0 1
15599: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15600: LD_INT 0
15602: PPUSH
15603: PPUSH
15604: PPUSH
// for side = 1 to 8 do
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: DOUBLE
15611: LD_INT 1
15613: DEC
15614: ST_TO_ADDR
15615: LD_INT 8
15617: PUSH
15618: FOR_TO
15619: IFFALSE 19615
// begin for i = 1 to 73 do
15621: LD_ADDR_VAR 0 4
15625: PUSH
15626: DOUBLE
15627: LD_INT 1
15629: DEC
15630: ST_TO_ADDR
15631: LD_INT 73
15633: PUSH
15634: FOR_TO
15635: IFFALSE 15656
// SetTech ( i , side , state_disabled ) ;
15637: LD_VAR 0 4
15641: PPUSH
15642: LD_VAR 0 3
15646: PPUSH
15647: LD_INT 0
15649: PPUSH
15650: CALL_OW 322
15654: GO 15634
15656: POP
15657: POP
// for i = 0 to 40 do
15658: LD_ADDR_VAR 0 4
15662: PUSH
15663: DOUBLE
15664: LD_INT 0
15666: DEC
15667: ST_TO_ADDR
15668: LD_INT 40
15670: PUSH
15671: FOR_TO
15672: IFFALSE 15693
// SetRestrict ( i , side , false ) ;
15674: LD_VAR 0 4
15678: PPUSH
15679: LD_VAR 0 3
15683: PPUSH
15684: LD_INT 0
15686: PPUSH
15687: CALL_OW 324
15691: GO 15671
15693: POP
15694: POP
// case level of 1 :
15695: LD_VAR 0 1
15699: PUSH
15700: LD_INT 1
15702: DOUBLE
15703: EQUAL
15704: IFTRUE 15708
15706: GO 15861
15708: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15709: LD_INT 35
15711: PPUSH
15712: LD_VAR 0 3
15716: PPUSH
15717: LD_INT 1
15719: PPUSH
15720: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15724: LD_INT 45
15726: PPUSH
15727: LD_VAR 0 3
15731: PPUSH
15732: LD_INT 1
15734: PPUSH
15735: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15739: LD_INT 46
15741: PPUSH
15742: LD_VAR 0 3
15746: PPUSH
15747: LD_INT 1
15749: PPUSH
15750: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15754: LD_INT 47
15756: PPUSH
15757: LD_VAR 0 3
15761: PPUSH
15762: LD_INT 1
15764: PPUSH
15765: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15769: LD_INT 0
15771: PPUSH
15772: LD_VAR 0 3
15776: PPUSH
15777: LD_INT 1
15779: PPUSH
15780: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15784: LD_INT 2
15786: PPUSH
15787: LD_VAR 0 3
15791: PPUSH
15792: LD_INT 1
15794: PPUSH
15795: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15799: LD_INT 4
15801: PPUSH
15802: LD_VAR 0 3
15806: PPUSH
15807: LD_INT 1
15809: PPUSH
15810: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15814: LD_INT 6
15816: PPUSH
15817: LD_VAR 0 3
15821: PPUSH
15822: LD_INT 1
15824: PPUSH
15825: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15829: LD_INT 29
15831: PPUSH
15832: LD_VAR 0 3
15836: PPUSH
15837: LD_INT 1
15839: PPUSH
15840: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15844: LD_INT 31
15846: PPUSH
15847: LD_VAR 0 3
15851: PPUSH
15852: LD_INT 1
15854: PPUSH
15855: CALL_OW 324
// end ; 2 :
15859: GO 19613
15861: LD_INT 2
15863: DOUBLE
15864: EQUAL
15865: IFTRUE 15869
15867: GO 16067
15869: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15870: LD_INT 35
15872: PPUSH
15873: LD_VAR 0 3
15877: PPUSH
15878: LD_INT 1
15880: PPUSH
15881: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15885: LD_INT 45
15887: PPUSH
15888: LD_VAR 0 3
15892: PPUSH
15893: LD_INT 1
15895: PPUSH
15896: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15900: LD_INT 46
15902: PPUSH
15903: LD_VAR 0 3
15907: PPUSH
15908: LD_INT 1
15910: PPUSH
15911: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15915: LD_INT 47
15917: PPUSH
15918: LD_VAR 0 3
15922: PPUSH
15923: LD_INT 1
15925: PPUSH
15926: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15930: LD_INT 1
15932: PPUSH
15933: LD_VAR 0 3
15937: PPUSH
15938: LD_INT 1
15940: PPUSH
15941: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15945: LD_INT 2
15947: PPUSH
15948: LD_VAR 0 3
15952: PPUSH
15953: LD_INT 1
15955: PPUSH
15956: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15960: LD_INT 11
15962: PPUSH
15963: LD_VAR 0 3
15967: PPUSH
15968: LD_INT 1
15970: PPUSH
15971: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15975: LD_INT 0
15977: PPUSH
15978: LD_VAR 0 3
15982: PPUSH
15983: LD_INT 1
15985: PPUSH
15986: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15990: LD_INT 2
15992: PPUSH
15993: LD_VAR 0 3
15997: PPUSH
15998: LD_INT 1
16000: PPUSH
16001: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16005: LD_INT 4
16007: PPUSH
16008: LD_VAR 0 3
16012: PPUSH
16013: LD_INT 1
16015: PPUSH
16016: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16020: LD_INT 6
16022: PPUSH
16023: LD_VAR 0 3
16027: PPUSH
16028: LD_INT 1
16030: PPUSH
16031: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16035: LD_INT 29
16037: PPUSH
16038: LD_VAR 0 3
16042: PPUSH
16043: LD_INT 1
16045: PPUSH
16046: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16050: LD_INT 31
16052: PPUSH
16053: LD_VAR 0 3
16057: PPUSH
16058: LD_INT 1
16060: PPUSH
16061: CALL_OW 324
// end ; 3 :
16065: GO 19613
16067: LD_INT 3
16069: DOUBLE
16070: EQUAL
16071: IFTRUE 16075
16073: GO 16528
16075: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16076: LD_INT 35
16078: PPUSH
16079: LD_VAR 0 3
16083: PPUSH
16084: LD_INT 1
16086: PPUSH
16087: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16091: LD_INT 45
16093: PPUSH
16094: LD_VAR 0 3
16098: PPUSH
16099: LD_INT 1
16101: PPUSH
16102: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16106: LD_INT 46
16108: PPUSH
16109: LD_VAR 0 3
16113: PPUSH
16114: LD_INT 1
16116: PPUSH
16117: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16121: LD_INT 47
16123: PPUSH
16124: LD_VAR 0 3
16128: PPUSH
16129: LD_INT 1
16131: PPUSH
16132: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16136: LD_INT 1
16138: PPUSH
16139: LD_VAR 0 3
16143: PPUSH
16144: LD_INT 1
16146: PPUSH
16147: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16151: LD_INT 2
16153: PPUSH
16154: LD_VAR 0 3
16158: PPUSH
16159: LD_INT 1
16161: PPUSH
16162: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16166: LD_INT 11
16168: PPUSH
16169: LD_VAR 0 3
16173: PPUSH
16174: LD_INT 1
16176: PPUSH
16177: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16181: LD_INT 48
16183: PPUSH
16184: LD_VAR 0 3
16188: PPUSH
16189: LD_INT 1
16191: PPUSH
16192: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16196: LD_INT 69
16198: PPUSH
16199: LD_VAR 0 3
16203: PPUSH
16204: LD_INT 1
16206: PPUSH
16207: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16211: LD_INT 39
16213: PPUSH
16214: LD_VAR 0 3
16218: PPUSH
16219: LD_INT 1
16221: PPUSH
16222: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16226: LD_INT 43
16228: PPUSH
16229: LD_VAR 0 3
16233: PPUSH
16234: LD_INT 1
16236: PPUSH
16237: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16241: LD_INT 51
16243: PPUSH
16244: LD_VAR 0 3
16248: PPUSH
16249: LD_INT 1
16251: PPUSH
16252: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16256: LD_INT 6
16258: PPUSH
16259: LD_VAR 0 3
16263: PPUSH
16264: LD_INT 1
16266: PPUSH
16267: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16271: LD_INT 0
16273: PPUSH
16274: LD_VAR 0 3
16278: PPUSH
16279: LD_INT 1
16281: PPUSH
16282: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16286: LD_INT 2
16288: PPUSH
16289: LD_VAR 0 3
16293: PPUSH
16294: LD_INT 1
16296: PPUSH
16297: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16301: LD_INT 3
16303: PPUSH
16304: LD_VAR 0 3
16308: PPUSH
16309: LD_INT 1
16311: PPUSH
16312: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16316: LD_INT 4
16318: PPUSH
16319: LD_VAR 0 3
16323: PPUSH
16324: LD_INT 1
16326: PPUSH
16327: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16331: LD_INT 6
16333: PPUSH
16334: LD_VAR 0 3
16338: PPUSH
16339: LD_INT 1
16341: PPUSH
16342: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16346: LD_INT 7
16348: PPUSH
16349: LD_VAR 0 3
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16361: LD_INT 8
16363: PPUSH
16364: LD_VAR 0 3
16368: PPUSH
16369: LD_INT 1
16371: PPUSH
16372: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16376: LD_INT 10
16378: PPUSH
16379: LD_VAR 0 3
16383: PPUSH
16384: LD_INT 1
16386: PPUSH
16387: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16391: LD_INT 15
16393: PPUSH
16394: LD_VAR 0 3
16398: PPUSH
16399: LD_INT 1
16401: PPUSH
16402: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16406: LD_INT 16
16408: PPUSH
16409: LD_VAR 0 3
16413: PPUSH
16414: LD_INT 1
16416: PPUSH
16417: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16421: LD_INT 17
16423: PPUSH
16424: LD_VAR 0 3
16428: PPUSH
16429: LD_INT 1
16431: PPUSH
16432: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16436: LD_INT 20
16438: PPUSH
16439: LD_VAR 0 3
16443: PPUSH
16444: LD_INT 1
16446: PPUSH
16447: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16451: LD_INT 26
16453: PPUSH
16454: LD_VAR 0 3
16458: PPUSH
16459: LD_INT 1
16461: PPUSH
16462: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16466: LD_INT 27
16468: PPUSH
16469: LD_VAR 0 3
16473: PPUSH
16474: LD_INT 1
16476: PPUSH
16477: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16481: LD_INT 29
16483: PPUSH
16484: LD_VAR 0 3
16488: PPUSH
16489: LD_INT 1
16491: PPUSH
16492: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16496: LD_INT 31
16498: PPUSH
16499: LD_VAR 0 3
16503: PPUSH
16504: LD_INT 1
16506: PPUSH
16507: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16511: LD_INT 32
16513: PPUSH
16514: LD_VAR 0 3
16518: PPUSH
16519: LD_INT 1
16521: PPUSH
16522: CALL_OW 324
// end ; 4 :
16526: GO 19613
16528: LD_INT 4
16530: DOUBLE
16531: EQUAL
16532: IFTRUE 16536
16534: GO 17484
16536: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16537: LD_INT 35
16539: PPUSH
16540: LD_VAR 0 3
16544: PPUSH
16545: LD_INT 1
16547: PPUSH
16548: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16552: LD_INT 45
16554: PPUSH
16555: LD_VAR 0 3
16559: PPUSH
16560: LD_INT 1
16562: PPUSH
16563: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16567: LD_INT 46
16569: PPUSH
16570: LD_VAR 0 3
16574: PPUSH
16575: LD_INT 1
16577: PPUSH
16578: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16582: LD_INT 47
16584: PPUSH
16585: LD_VAR 0 3
16589: PPUSH
16590: LD_INT 1
16592: PPUSH
16593: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16597: LD_INT 1
16599: PPUSH
16600: LD_VAR 0 3
16604: PPUSH
16605: LD_INT 1
16607: PPUSH
16608: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16612: LD_INT 2
16614: PPUSH
16615: LD_VAR 0 3
16619: PPUSH
16620: LD_INT 1
16622: PPUSH
16623: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16627: LD_INT 11
16629: PPUSH
16630: LD_VAR 0 3
16634: PPUSH
16635: LD_INT 1
16637: PPUSH
16638: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16642: LD_INT 20
16644: PPUSH
16645: LD_VAR 0 3
16649: PPUSH
16650: LD_INT 1
16652: PPUSH
16653: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16657: LD_INT 48
16659: PPUSH
16660: LD_VAR 0 3
16664: PPUSH
16665: LD_INT 1
16667: PPUSH
16668: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16672: LD_INT 49
16674: PPUSH
16675: LD_VAR 0 3
16679: PPUSH
16680: LD_INT 1
16682: PPUSH
16683: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16687: LD_INT 69
16689: PPUSH
16690: LD_VAR 0 3
16694: PPUSH
16695: LD_INT 1
16697: PPUSH
16698: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16702: LD_INT 39
16704: PPUSH
16705: LD_VAR 0 3
16709: PPUSH
16710: LD_INT 1
16712: PPUSH
16713: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16717: LD_INT 34
16719: PPUSH
16720: LD_VAR 0 3
16724: PPUSH
16725: LD_INT 1
16727: PPUSH
16728: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16732: LD_INT 42
16734: PPUSH
16735: LD_VAR 0 3
16739: PPUSH
16740: LD_INT 1
16742: PPUSH
16743: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16747: LD_INT 44
16749: PPUSH
16750: LD_VAR 0 3
16754: PPUSH
16755: LD_INT 1
16757: PPUSH
16758: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16762: LD_INT 41
16764: PPUSH
16765: LD_VAR 0 3
16769: PPUSH
16770: LD_INT 1
16772: PPUSH
16773: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16777: LD_INT 43
16779: PPUSH
16780: LD_VAR 0 3
16784: PPUSH
16785: LD_INT 1
16787: PPUSH
16788: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16792: LD_INT 70
16794: PPUSH
16795: LD_VAR 0 3
16799: PPUSH
16800: LD_INT 1
16802: PPUSH
16803: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16807: LD_INT 51
16809: PPUSH
16810: LD_VAR 0 3
16814: PPUSH
16815: LD_INT 1
16817: PPUSH
16818: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16822: LD_INT 52
16824: PPUSH
16825: LD_VAR 0 3
16829: PPUSH
16830: LD_INT 1
16832: PPUSH
16833: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16837: LD_INT 6
16839: PPUSH
16840: LD_VAR 0 3
16844: PPUSH
16845: LD_INT 1
16847: PPUSH
16848: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16852: LD_INT 15
16854: PPUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: LD_INT 1
16862: PPUSH
16863: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16867: LD_INT 7
16869: PPUSH
16870: LD_VAR 0 3
16874: PPUSH
16875: LD_INT 1
16877: PPUSH
16878: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16882: LD_INT 12
16884: PPUSH
16885: LD_VAR 0 3
16889: PPUSH
16890: LD_INT 1
16892: PPUSH
16893: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16897: LD_INT 18
16899: PPUSH
16900: LD_VAR 0 3
16904: PPUSH
16905: LD_INT 1
16907: PPUSH
16908: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16912: LD_INT 60
16914: PPUSH
16915: LD_VAR 0 3
16919: PPUSH
16920: LD_INT 1
16922: PPUSH
16923: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16927: LD_INT 9
16929: PPUSH
16930: LD_VAR 0 3
16934: PPUSH
16935: LD_INT 1
16937: PPUSH
16938: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16942: LD_INT 30
16944: PPUSH
16945: LD_VAR 0 3
16949: PPUSH
16950: LD_INT 1
16952: PPUSH
16953: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16957: LD_INT 37
16959: PPUSH
16960: LD_VAR 0 3
16964: PPUSH
16965: LD_INT 1
16967: PPUSH
16968: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16972: LD_INT 5
16974: PPUSH
16975: LD_VAR 0 3
16979: PPUSH
16980: LD_INT 1
16982: PPUSH
16983: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16987: LD_INT 66
16989: PPUSH
16990: LD_VAR 0 3
16994: PPUSH
16995: LD_INT 1
16997: PPUSH
16998: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17002: LD_INT 21
17004: PPUSH
17005: LD_VAR 0 3
17009: PPUSH
17010: LD_INT 1
17012: PPUSH
17013: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17017: LD_INT 22
17019: PPUSH
17020: LD_VAR 0 3
17024: PPUSH
17025: LD_INT 1
17027: PPUSH
17028: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17032: LD_INT 54
17034: PPUSH
17035: LD_VAR 0 3
17039: PPUSH
17040: LD_INT 1
17042: PPUSH
17043: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17047: LD_INT 0
17049: PPUSH
17050: LD_VAR 0 3
17054: PPUSH
17055: LD_INT 1
17057: PPUSH
17058: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17062: LD_INT 1
17064: PPUSH
17065: LD_VAR 0 3
17069: PPUSH
17070: LD_INT 1
17072: PPUSH
17073: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17077: LD_INT 2
17079: PPUSH
17080: LD_VAR 0 3
17084: PPUSH
17085: LD_INT 1
17087: PPUSH
17088: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17092: LD_INT 3
17094: PPUSH
17095: LD_VAR 0 3
17099: PPUSH
17100: LD_INT 1
17102: PPUSH
17103: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17107: LD_INT 4
17109: PPUSH
17110: LD_VAR 0 3
17114: PPUSH
17115: LD_INT 1
17117: PPUSH
17118: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17122: LD_INT 5
17124: PPUSH
17125: LD_VAR 0 3
17129: PPUSH
17130: LD_INT 1
17132: PPUSH
17133: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17137: LD_INT 6
17139: PPUSH
17140: LD_VAR 0 3
17144: PPUSH
17145: LD_INT 1
17147: PPUSH
17148: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17152: LD_INT 7
17154: PPUSH
17155: LD_VAR 0 3
17159: PPUSH
17160: LD_INT 1
17162: PPUSH
17163: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17167: LD_INT 8
17169: PPUSH
17170: LD_VAR 0 3
17174: PPUSH
17175: LD_INT 1
17177: PPUSH
17178: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17182: LD_INT 10
17184: PPUSH
17185: LD_VAR 0 3
17189: PPUSH
17190: LD_INT 1
17192: PPUSH
17193: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17197: LD_INT 11
17199: PPUSH
17200: LD_VAR 0 3
17204: PPUSH
17205: LD_INT 1
17207: PPUSH
17208: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17212: LD_INT 12
17214: PPUSH
17215: LD_VAR 0 3
17219: PPUSH
17220: LD_INT 1
17222: PPUSH
17223: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17227: LD_INT 13
17229: PPUSH
17230: LD_VAR 0 3
17234: PPUSH
17235: LD_INT 1
17237: PPUSH
17238: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17242: LD_INT 14
17244: PPUSH
17245: LD_VAR 0 3
17249: PPUSH
17250: LD_INT 1
17252: PPUSH
17253: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17257: LD_INT 15
17259: PPUSH
17260: LD_VAR 0 3
17264: PPUSH
17265: LD_INT 1
17267: PPUSH
17268: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17272: LD_INT 16
17274: PPUSH
17275: LD_VAR 0 3
17279: PPUSH
17280: LD_INT 1
17282: PPUSH
17283: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17287: LD_INT 17
17289: PPUSH
17290: LD_VAR 0 3
17294: PPUSH
17295: LD_INT 1
17297: PPUSH
17298: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17302: LD_INT 19
17304: PPUSH
17305: LD_VAR 0 3
17309: PPUSH
17310: LD_INT 1
17312: PPUSH
17313: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17317: LD_INT 20
17319: PPUSH
17320: LD_VAR 0 3
17324: PPUSH
17325: LD_INT 1
17327: PPUSH
17328: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17332: LD_INT 21
17334: PPUSH
17335: LD_VAR 0 3
17339: PPUSH
17340: LD_INT 1
17342: PPUSH
17343: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17347: LD_INT 23
17349: PPUSH
17350: LD_VAR 0 3
17354: PPUSH
17355: LD_INT 1
17357: PPUSH
17358: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17362: LD_INT 26
17364: PPUSH
17365: LD_VAR 0 3
17369: PPUSH
17370: LD_INT 1
17372: PPUSH
17373: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17377: LD_INT 27
17379: PPUSH
17380: LD_VAR 0 3
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17392: LD_INT 28
17394: PPUSH
17395: LD_VAR 0 3
17399: PPUSH
17400: LD_INT 1
17402: PPUSH
17403: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17407: LD_INT 29
17409: PPUSH
17410: LD_VAR 0 3
17414: PPUSH
17415: LD_INT 1
17417: PPUSH
17418: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17422: LD_INT 30
17424: PPUSH
17425: LD_VAR 0 3
17429: PPUSH
17430: LD_INT 1
17432: PPUSH
17433: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17437: LD_INT 31
17439: PPUSH
17440: LD_VAR 0 3
17444: PPUSH
17445: LD_INT 1
17447: PPUSH
17448: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17452: LD_INT 32
17454: PPUSH
17455: LD_VAR 0 3
17459: PPUSH
17460: LD_INT 1
17462: PPUSH
17463: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17467: LD_INT 36
17469: PPUSH
17470: LD_VAR 0 3
17474: PPUSH
17475: LD_INT 1
17477: PPUSH
17478: CALL_OW 324
// end ; 5 :
17482: GO 19613
17484: LD_INT 5
17486: DOUBLE
17487: EQUAL
17488: IFTRUE 17492
17490: GO 18605
17492: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17493: LD_INT 35
17495: PPUSH
17496: LD_VAR 0 3
17500: PPUSH
17501: LD_INT 1
17503: PPUSH
17504: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17508: LD_INT 45
17510: PPUSH
17511: LD_VAR 0 3
17515: PPUSH
17516: LD_INT 1
17518: PPUSH
17519: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17523: LD_INT 46
17525: PPUSH
17526: LD_VAR 0 3
17530: PPUSH
17531: LD_INT 1
17533: PPUSH
17534: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17538: LD_INT 47
17540: PPUSH
17541: LD_VAR 0 3
17545: PPUSH
17546: LD_INT 1
17548: PPUSH
17549: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17553: LD_INT 1
17555: PPUSH
17556: LD_VAR 0 3
17560: PPUSH
17561: LD_INT 1
17563: PPUSH
17564: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17568: LD_INT 2
17570: PPUSH
17571: LD_VAR 0 3
17575: PPUSH
17576: LD_INT 1
17578: PPUSH
17579: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17583: LD_INT 11
17585: PPUSH
17586: LD_VAR 0 3
17590: PPUSH
17591: LD_INT 1
17593: PPUSH
17594: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17598: LD_INT 20
17600: PPUSH
17601: LD_VAR 0 3
17605: PPUSH
17606: LD_INT 1
17608: PPUSH
17609: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17613: LD_INT 48
17615: PPUSH
17616: LD_VAR 0 3
17620: PPUSH
17621: LD_INT 1
17623: PPUSH
17624: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17628: LD_INT 49
17630: PPUSH
17631: LD_VAR 0 3
17635: PPUSH
17636: LD_INT 1
17638: PPUSH
17639: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17643: LD_INT 69
17645: PPUSH
17646: LD_VAR 0 3
17650: PPUSH
17651: LD_INT 1
17653: PPUSH
17654: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17658: LD_INT 39
17660: PPUSH
17661: LD_VAR 0 3
17665: PPUSH
17666: LD_INT 1
17668: PPUSH
17669: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17673: LD_INT 34
17675: PPUSH
17676: LD_VAR 0 3
17680: PPUSH
17681: LD_INT 1
17683: PPUSH
17684: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17688: LD_INT 42
17690: PPUSH
17691: LD_VAR 0 3
17695: PPUSH
17696: LD_INT 1
17698: PPUSH
17699: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17703: LD_INT 44
17705: PPUSH
17706: LD_VAR 0 3
17710: PPUSH
17711: LD_INT 1
17713: PPUSH
17714: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17718: LD_INT 41
17720: PPUSH
17721: LD_VAR 0 3
17725: PPUSH
17726: LD_INT 1
17728: PPUSH
17729: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17733: LD_INT 40
17735: PPUSH
17736: LD_VAR 0 3
17740: PPUSH
17741: LD_INT 1
17743: PPUSH
17744: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17748: LD_INT 43
17750: PPUSH
17751: LD_VAR 0 3
17755: PPUSH
17756: LD_INT 1
17758: PPUSH
17759: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17763: LD_INT 70
17765: PPUSH
17766: LD_VAR 0 3
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17778: LD_INT 51
17780: PPUSH
17781: LD_VAR 0 3
17785: PPUSH
17786: LD_INT 1
17788: PPUSH
17789: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17793: LD_INT 52
17795: PPUSH
17796: LD_VAR 0 3
17800: PPUSH
17801: LD_INT 1
17803: PPUSH
17804: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17808: LD_INT 6
17810: PPUSH
17811: LD_VAR 0 3
17815: PPUSH
17816: LD_INT 1
17818: PPUSH
17819: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17823: LD_INT 15
17825: PPUSH
17826: LD_VAR 0 3
17830: PPUSH
17831: LD_INT 1
17833: PPUSH
17834: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17838: LD_INT 7
17840: PPUSH
17841: LD_VAR 0 3
17845: PPUSH
17846: LD_INT 1
17848: PPUSH
17849: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17853: LD_INT 12
17855: PPUSH
17856: LD_VAR 0 3
17860: PPUSH
17861: LD_INT 1
17863: PPUSH
17864: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17868: LD_INT 17
17870: PPUSH
17871: LD_VAR 0 3
17875: PPUSH
17876: LD_INT 1
17878: PPUSH
17879: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17883: LD_INT 18
17885: PPUSH
17886: LD_VAR 0 3
17890: PPUSH
17891: LD_INT 1
17893: PPUSH
17894: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17898: LD_INT 60
17900: PPUSH
17901: LD_VAR 0 3
17905: PPUSH
17906: LD_INT 1
17908: PPUSH
17909: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17913: LD_INT 32
17915: PPUSH
17916: LD_VAR 0 3
17920: PPUSH
17921: LD_INT 1
17923: PPUSH
17924: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17928: LD_INT 9
17930: PPUSH
17931: LD_VAR 0 3
17935: PPUSH
17936: LD_INT 1
17938: PPUSH
17939: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17943: LD_INT 57
17945: PPUSH
17946: LD_VAR 0 3
17950: PPUSH
17951: LD_INT 1
17953: PPUSH
17954: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17958: LD_INT 30
17960: PPUSH
17961: LD_VAR 0 3
17965: PPUSH
17966: LD_INT 1
17968: PPUSH
17969: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17973: LD_INT 37
17975: PPUSH
17976: LD_VAR 0 3
17980: PPUSH
17981: LD_INT 1
17983: PPUSH
17984: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17988: LD_INT 63
17990: PPUSH
17991: LD_VAR 0 3
17995: PPUSH
17996: LD_INT 1
17998: PPUSH
17999: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18003: LD_INT 3
18005: PPUSH
18006: LD_VAR 0 3
18010: PPUSH
18011: LD_INT 1
18013: PPUSH
18014: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18018: LD_INT 4
18020: PPUSH
18021: LD_VAR 0 3
18025: PPUSH
18026: LD_INT 1
18028: PPUSH
18029: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18033: LD_INT 5
18035: PPUSH
18036: LD_VAR 0 3
18040: PPUSH
18041: LD_INT 1
18043: PPUSH
18044: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18048: LD_INT 66
18050: PPUSH
18051: LD_VAR 0 3
18055: PPUSH
18056: LD_INT 1
18058: PPUSH
18059: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18063: LD_INT 21
18065: PPUSH
18066: LD_VAR 0 3
18070: PPUSH
18071: LD_INT 1
18073: PPUSH
18074: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18078: LD_INT 22
18080: PPUSH
18081: LD_VAR 0 3
18085: PPUSH
18086: LD_INT 1
18088: PPUSH
18089: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18093: LD_INT 19
18095: PPUSH
18096: LD_VAR 0 3
18100: PPUSH
18101: LD_INT 1
18103: PPUSH
18104: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18108: LD_INT 54
18110: PPUSH
18111: LD_VAR 0 3
18115: PPUSH
18116: LD_INT 1
18118: PPUSH
18119: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18123: LD_INT 55
18125: PPUSH
18126: LD_VAR 0 3
18130: PPUSH
18131: LD_INT 1
18133: PPUSH
18134: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18138: LD_INT 0
18140: PPUSH
18141: LD_VAR 0 3
18145: PPUSH
18146: LD_INT 1
18148: PPUSH
18149: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18153: LD_INT 1
18155: PPUSH
18156: LD_VAR 0 3
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18168: LD_INT 2
18170: PPUSH
18171: LD_VAR 0 3
18175: PPUSH
18176: LD_INT 1
18178: PPUSH
18179: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18183: LD_INT 3
18185: PPUSH
18186: LD_VAR 0 3
18190: PPUSH
18191: LD_INT 1
18193: PPUSH
18194: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18198: LD_INT 4
18200: PPUSH
18201: LD_VAR 0 3
18205: PPUSH
18206: LD_INT 1
18208: PPUSH
18209: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18213: LD_INT 5
18215: PPUSH
18216: LD_VAR 0 3
18220: PPUSH
18221: LD_INT 1
18223: PPUSH
18224: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18228: LD_INT 6
18230: PPUSH
18231: LD_VAR 0 3
18235: PPUSH
18236: LD_INT 1
18238: PPUSH
18239: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18243: LD_INT 7
18245: PPUSH
18246: LD_VAR 0 3
18250: PPUSH
18251: LD_INT 1
18253: PPUSH
18254: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18258: LD_INT 8
18260: PPUSH
18261: LD_VAR 0 3
18265: PPUSH
18266: LD_INT 1
18268: PPUSH
18269: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18273: LD_INT 10
18275: PPUSH
18276: LD_VAR 0 3
18280: PPUSH
18281: LD_INT 1
18283: PPUSH
18284: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18288: LD_INT 11
18290: PPUSH
18291: LD_VAR 0 3
18295: PPUSH
18296: LD_INT 1
18298: PPUSH
18299: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18303: LD_INT 12
18305: PPUSH
18306: LD_VAR 0 3
18310: PPUSH
18311: LD_INT 1
18313: PPUSH
18314: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18318: LD_INT 13
18320: PPUSH
18321: LD_VAR 0 3
18325: PPUSH
18326: LD_INT 1
18328: PPUSH
18329: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18333: LD_INT 14
18335: PPUSH
18336: LD_VAR 0 3
18340: PPUSH
18341: LD_INT 1
18343: PPUSH
18344: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18348: LD_INT 15
18350: PPUSH
18351: LD_VAR 0 3
18355: PPUSH
18356: LD_INT 1
18358: PPUSH
18359: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18363: LD_INT 16
18365: PPUSH
18366: LD_VAR 0 3
18370: PPUSH
18371: LD_INT 1
18373: PPUSH
18374: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18378: LD_INT 17
18380: PPUSH
18381: LD_VAR 0 3
18385: PPUSH
18386: LD_INT 1
18388: PPUSH
18389: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18393: LD_INT 18
18395: PPUSH
18396: LD_VAR 0 3
18400: PPUSH
18401: LD_INT 1
18403: PPUSH
18404: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18408: LD_INT 19
18410: PPUSH
18411: LD_VAR 0 3
18415: PPUSH
18416: LD_INT 1
18418: PPUSH
18419: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18423: LD_INT 20
18425: PPUSH
18426: LD_VAR 0 3
18430: PPUSH
18431: LD_INT 1
18433: PPUSH
18434: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18438: LD_INT 21
18440: PPUSH
18441: LD_VAR 0 3
18445: PPUSH
18446: LD_INT 1
18448: PPUSH
18449: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18453: LD_INT 23
18455: PPUSH
18456: LD_VAR 0 3
18460: PPUSH
18461: LD_INT 1
18463: PPUSH
18464: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18468: LD_INT 26
18470: PPUSH
18471: LD_VAR 0 3
18475: PPUSH
18476: LD_INT 1
18478: PPUSH
18479: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18483: LD_INT 27
18485: PPUSH
18486: LD_VAR 0 3
18490: PPUSH
18491: LD_INT 1
18493: PPUSH
18494: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18498: LD_INT 28
18500: PPUSH
18501: LD_VAR 0 3
18505: PPUSH
18506: LD_INT 1
18508: PPUSH
18509: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18513: LD_INT 29
18515: PPUSH
18516: LD_VAR 0 3
18520: PPUSH
18521: LD_INT 1
18523: PPUSH
18524: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18528: LD_INT 30
18530: PPUSH
18531: LD_VAR 0 3
18535: PPUSH
18536: LD_INT 1
18538: PPUSH
18539: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18543: LD_INT 31
18545: PPUSH
18546: LD_VAR 0 3
18550: PPUSH
18551: LD_INT 1
18553: PPUSH
18554: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18558: LD_INT 32
18560: PPUSH
18561: LD_VAR 0 3
18565: PPUSH
18566: LD_INT 1
18568: PPUSH
18569: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18573: LD_INT 33
18575: PPUSH
18576: LD_VAR 0 3
18580: PPUSH
18581: LD_INT 1
18583: PPUSH
18584: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18588: LD_INT 36
18590: PPUSH
18591: LD_VAR 0 3
18595: PPUSH
18596: LD_INT 1
18598: PPUSH
18599: CALL_OW 324
// end ; 6 :
18603: GO 19613
18605: LD_INT 6
18607: DOUBLE
18608: EQUAL
18609: IFTRUE 18613
18611: GO 19538
18613: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18614: LD_INT 35
18616: PPUSH
18617: LD_VAR 0 3
18621: PPUSH
18622: LD_INT 1
18624: PPUSH
18625: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18629: LD_INT 45
18631: PPUSH
18632: LD_VAR 0 3
18636: PPUSH
18637: LD_INT 1
18639: PPUSH
18640: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18644: LD_INT 46
18646: PPUSH
18647: LD_VAR 0 3
18651: PPUSH
18652: LD_INT 1
18654: PPUSH
18655: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18659: LD_INT 47
18661: PPUSH
18662: LD_VAR 0 3
18666: PPUSH
18667: LD_INT 1
18669: PPUSH
18670: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18674: LD_INT 1
18676: PPUSH
18677: LD_VAR 0 3
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18689: LD_INT 2
18691: PPUSH
18692: LD_VAR 0 3
18696: PPUSH
18697: LD_INT 1
18699: PPUSH
18700: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18704: LD_INT 11
18706: PPUSH
18707: LD_VAR 0 3
18711: PPUSH
18712: LD_INT 1
18714: PPUSH
18715: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18719: LD_INT 20
18721: PPUSH
18722: LD_VAR 0 3
18726: PPUSH
18727: LD_INT 1
18729: PPUSH
18730: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18734: LD_INT 48
18736: PPUSH
18737: LD_VAR 0 3
18741: PPUSH
18742: LD_INT 1
18744: PPUSH
18745: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18749: LD_INT 49
18751: PPUSH
18752: LD_VAR 0 3
18756: PPUSH
18757: LD_INT 1
18759: PPUSH
18760: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18764: LD_INT 50
18766: PPUSH
18767: LD_VAR 0 3
18771: PPUSH
18772: LD_INT 1
18774: PPUSH
18775: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18779: LD_INT 69
18781: PPUSH
18782: LD_VAR 0 3
18786: PPUSH
18787: LD_INT 1
18789: PPUSH
18790: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18794: LD_INT 39
18796: PPUSH
18797: LD_VAR 0 3
18801: PPUSH
18802: LD_INT 1
18804: PPUSH
18805: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18809: LD_INT 34
18811: PPUSH
18812: LD_VAR 0 3
18816: PPUSH
18817: LD_INT 1
18819: PPUSH
18820: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18824: LD_INT 42
18826: PPUSH
18827: LD_VAR 0 3
18831: PPUSH
18832: LD_INT 1
18834: PPUSH
18835: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18839: LD_INT 44
18841: PPUSH
18842: LD_VAR 0 3
18846: PPUSH
18847: LD_INT 1
18849: PPUSH
18850: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18854: LD_INT 41
18856: PPUSH
18857: LD_VAR 0 3
18861: PPUSH
18862: LD_INT 1
18864: PPUSH
18865: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18869: LD_INT 13
18871: PPUSH
18872: LD_VAR 0 3
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18884: LD_INT 40
18886: PPUSH
18887: LD_VAR 0 3
18891: PPUSH
18892: LD_INT 1
18894: PPUSH
18895: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18899: LD_INT 43
18901: PPUSH
18902: LD_VAR 0 3
18906: PPUSH
18907: LD_INT 1
18909: PPUSH
18910: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18914: LD_INT 70
18916: PPUSH
18917: LD_VAR 0 3
18921: PPUSH
18922: LD_INT 1
18924: PPUSH
18925: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18929: LD_INT 23
18931: PPUSH
18932: LD_VAR 0 3
18936: PPUSH
18937: LD_INT 1
18939: PPUSH
18940: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18944: LD_INT 51
18946: PPUSH
18947: LD_VAR 0 3
18951: PPUSH
18952: LD_INT 1
18954: PPUSH
18955: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18959: LD_INT 52
18961: PPUSH
18962: LD_VAR 0 3
18966: PPUSH
18967: LD_INT 1
18969: PPUSH
18970: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18974: LD_INT 6
18976: PPUSH
18977: LD_VAR 0 3
18981: PPUSH
18982: LD_INT 1
18984: PPUSH
18985: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18989: LD_INT 15
18991: PPUSH
18992: LD_VAR 0 3
18996: PPUSH
18997: LD_INT 1
18999: PPUSH
19000: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19004: LD_INT 7
19006: PPUSH
19007: LD_VAR 0 3
19011: PPUSH
19012: LD_INT 1
19014: PPUSH
19015: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19019: LD_INT 12
19021: PPUSH
19022: LD_VAR 0 3
19026: PPUSH
19027: LD_INT 1
19029: PPUSH
19030: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19034: LD_INT 10
19036: PPUSH
19037: LD_VAR 0 3
19041: PPUSH
19042: LD_INT 1
19044: PPUSH
19045: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19049: LD_INT 17
19051: PPUSH
19052: LD_VAR 0 3
19056: PPUSH
19057: LD_INT 1
19059: PPUSH
19060: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19064: LD_INT 18
19066: PPUSH
19067: LD_VAR 0 3
19071: PPUSH
19072: LD_INT 1
19074: PPUSH
19075: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19079: LD_INT 60
19081: PPUSH
19082: LD_VAR 0 3
19086: PPUSH
19087: LD_INT 1
19089: PPUSH
19090: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19094: LD_INT 61
19096: PPUSH
19097: LD_VAR 0 3
19101: PPUSH
19102: LD_INT 1
19104: PPUSH
19105: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19109: LD_INT 32
19111: PPUSH
19112: LD_VAR 0 3
19116: PPUSH
19117: LD_INT 1
19119: PPUSH
19120: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19124: LD_INT 27
19126: PPUSH
19127: LD_VAR 0 3
19131: PPUSH
19132: LD_INT 1
19134: PPUSH
19135: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19139: LD_INT 36
19141: PPUSH
19142: LD_VAR 0 3
19146: PPUSH
19147: LD_INT 1
19149: PPUSH
19150: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19154: LD_INT 33
19156: PPUSH
19157: LD_VAR 0 3
19161: PPUSH
19162: LD_INT 1
19164: PPUSH
19165: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19169: LD_INT 9
19171: PPUSH
19172: LD_VAR 0 3
19176: PPUSH
19177: LD_INT 1
19179: PPUSH
19180: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19184: LD_INT 38
19186: PPUSH
19187: LD_VAR 0 3
19191: PPUSH
19192: LD_INT 1
19194: PPUSH
19195: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19199: LD_INT 57
19201: PPUSH
19202: LD_VAR 0 3
19206: PPUSH
19207: LD_INT 1
19209: PPUSH
19210: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19214: LD_INT 58
19216: PPUSH
19217: LD_VAR 0 3
19221: PPUSH
19222: LD_INT 1
19224: PPUSH
19225: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19229: LD_INT 28
19231: PPUSH
19232: LD_VAR 0 3
19236: PPUSH
19237: LD_INT 1
19239: PPUSH
19240: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19244: LD_INT 29
19246: PPUSH
19247: LD_VAR 0 3
19251: PPUSH
19252: LD_INT 1
19254: PPUSH
19255: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19259: LD_INT 30
19261: PPUSH
19262: LD_VAR 0 3
19266: PPUSH
19267: LD_INT 1
19269: PPUSH
19270: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19274: LD_INT 37
19276: PPUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: LD_INT 1
19284: PPUSH
19285: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19289: LD_INT 63
19291: PPUSH
19292: LD_VAR 0 3
19296: PPUSH
19297: LD_INT 1
19299: PPUSH
19300: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19304: LD_INT 64
19306: PPUSH
19307: LD_VAR 0 3
19311: PPUSH
19312: LD_INT 1
19314: PPUSH
19315: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19319: LD_INT 3
19321: PPUSH
19322: LD_VAR 0 3
19326: PPUSH
19327: LD_INT 1
19329: PPUSH
19330: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19334: LD_INT 4
19336: PPUSH
19337: LD_VAR 0 3
19341: PPUSH
19342: LD_INT 1
19344: PPUSH
19345: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19349: LD_INT 5
19351: PPUSH
19352: LD_VAR 0 3
19356: PPUSH
19357: LD_INT 1
19359: PPUSH
19360: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19364: LD_INT 8
19366: PPUSH
19367: LD_VAR 0 3
19371: PPUSH
19372: LD_INT 1
19374: PPUSH
19375: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19379: LD_INT 66
19381: PPUSH
19382: LD_VAR 0 3
19386: PPUSH
19387: LD_INT 1
19389: PPUSH
19390: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19394: LD_INT 67
19396: PPUSH
19397: LD_VAR 0 3
19401: PPUSH
19402: LD_INT 1
19404: PPUSH
19405: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19409: LD_INT 21
19411: PPUSH
19412: LD_VAR 0 3
19416: PPUSH
19417: LD_INT 1
19419: PPUSH
19420: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19424: LD_INT 22
19426: PPUSH
19427: LD_VAR 0 3
19431: PPUSH
19432: LD_INT 1
19434: PPUSH
19435: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19439: LD_INT 19
19441: PPUSH
19442: LD_VAR 0 3
19446: PPUSH
19447: LD_INT 1
19449: PPUSH
19450: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19454: LD_INT 26
19456: PPUSH
19457: LD_VAR 0 3
19461: PPUSH
19462: LD_INT 1
19464: PPUSH
19465: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19469: LD_INT 54
19471: PPUSH
19472: LD_VAR 0 3
19476: PPUSH
19477: LD_INT 1
19479: PPUSH
19480: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19484: LD_INT 55
19486: PPUSH
19487: LD_VAR 0 3
19491: PPUSH
19492: LD_INT 1
19494: PPUSH
19495: CALL_OW 322
// for i = 0 to 39 do
19499: LD_ADDR_VAR 0 4
19503: PUSH
19504: DOUBLE
19505: LD_INT 0
19507: DEC
19508: ST_TO_ADDR
19509: LD_INT 39
19511: PUSH
19512: FOR_TO
19513: IFFALSE 19534
// SetRestrict ( i , side , true ) ;
19515: LD_VAR 0 4
19519: PPUSH
19520: LD_VAR 0 3
19524: PPUSH
19525: LD_INT 1
19527: PPUSH
19528: CALL_OW 324
19532: GO 19512
19534: POP
19535: POP
// end ; else
19536: GO 19613
19538: POP
// begin for i = 1 to 73 do
19539: LD_ADDR_VAR 0 4
19543: PUSH
19544: DOUBLE
19545: LD_INT 1
19547: DEC
19548: ST_TO_ADDR
19549: LD_INT 73
19551: PUSH
19552: FOR_TO
19553: IFFALSE 19574
// SetTech ( i , side , state_enabled ) ;
19555: LD_VAR 0 4
19559: PPUSH
19560: LD_VAR 0 3
19564: PPUSH
19565: LD_INT 1
19567: PPUSH
19568: CALL_OW 322
19572: GO 19552
19574: POP
19575: POP
// for i = 0 to 39 do
19576: LD_ADDR_VAR 0 4
19580: PUSH
19581: DOUBLE
19582: LD_INT 0
19584: DEC
19585: ST_TO_ADDR
19586: LD_INT 39
19588: PUSH
19589: FOR_TO
19590: IFFALSE 19611
// SetRestrict ( i , side , true ) ;
19592: LD_VAR 0 4
19596: PPUSH
19597: LD_VAR 0 3
19601: PPUSH
19602: LD_INT 1
19604: PPUSH
19605: CALL_OW 324
19609: GO 19589
19611: POP
19612: POP
// end ; end ; end ;
19613: GO 15618
19615: POP
19616: POP
// end ;
19617: LD_VAR 0 2
19621: RET
