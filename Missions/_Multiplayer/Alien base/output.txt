// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_siberit , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 39
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 18
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 16
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 21
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 17
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 372
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 39
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 3 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 3
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 167: LD_ADDR_EXP 18
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 6
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 6
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 0 , 0 , 3 ] ;
 245: LD_ADDR_EXP 19
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 21
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 323: LD_ADDR_EXP 17
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 372: LD_ADDR_EXP 20
 376: PUSH
 377: LD_EXP 16
 381: PUSH
 382: LD_INT 0
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: PUSH
 389: LD_INT 1
 391: GREATER
 392: ST_TO_ADDR
// if Multiplayer then
 393: LD_OWVAR 4
 397: IFFALSE 643
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 399: LD_ADDR_EXP 41
 403: PUSH
 404: LD_INT 0
 406: PPUSH
 407: CALL_OW 426
 411: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 412: LD_ADDR_EXP 42
 416: PUSH
 417: LD_INT 1
 419: PPUSH
 420: CALL_OW 426
 424: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 425: LD_ADDR_EXP 43
 429: PUSH
 430: LD_INT 2
 432: PPUSH
 433: CALL_OW 426
 437: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 438: LD_ADDR_EXP 44
 442: PUSH
 443: LD_INT 3
 445: PPUSH
 446: CALL_OW 426
 450: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 451: LD_ADDR_EXP 45
 455: PUSH
 456: LD_INT 4
 458: PPUSH
 459: CALL_OW 426
 463: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 464: LD_ADDR_EXP 46
 468: PUSH
 469: LD_INT 5
 471: PPUSH
 472: CALL_OW 426
 476: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 477: LD_ADDR_EXP 47
 481: PUSH
 482: LD_INT 6
 484: PPUSH
 485: CALL_OW 426
 489: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 490: LD_ADDR_EXP 48
 494: PUSH
 495: LD_INT 10
 497: PPUSH
 498: CALL_OW 426
 502: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 503: LD_ADDR_EXP 49
 507: PUSH
 508: LD_INT 11
 510: PPUSH
 511: CALL_OW 426
 515: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 516: LD_ADDR_EXP 50
 520: PUSH
 521: LD_INT 12
 523: PPUSH
 524: CALL_OW 426
 528: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 529: LD_ADDR_EXP 51
 533: PUSH
 534: LD_INT 13
 536: PPUSH
 537: CALL_OW 426
 541: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 542: LD_ADDR_EXP 52
 546: PUSH
 547: LD_INT 14
 549: PPUSH
 550: CALL_OW 426
 554: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 555: LD_ADDR_EXP 1
 559: PUSH
 560: LD_INT 15
 562: PPUSH
 563: CALL_OW 426
 567: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 568: LD_ADDR_EXP 2
 572: PUSH
 573: LD_INT 16
 575: PPUSH
 576: CALL_OW 426
 580: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 581: LD_ADDR_EXP 53
 585: PUSH
 586: LD_INT 17
 588: PPUSH
 589: CALL_OW 426
 593: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 594: LD_ADDR_EXP 54
 598: PUSH
 599: LD_INT 20
 601: PPUSH
 602: CALL_OW 426
 606: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 607: LD_ADDR_EXP 40
 611: PUSH
 612: LD_INT 21
 614: PPUSH
 615: CALL_OW 426
 619: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 620: LD_ADDR_VAR 0 3
 624: PUSH
 625: LD_INT 22
 627: PPUSH
 628: CALL_OW 426
 632: ST_TO_ADDR
// def_win_rules = 0 ;
 633: LD_ADDR_EXP 30
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// end else
 641: GO 799
// begin Randomize ;
 643: CALL_OW 10
// def_base_level := 2 ;
 647: LD_ADDR_EXP 41
 651: PUSH
 652: LD_INT 2
 654: ST_TO_ADDR
// def_amount_of_people := 11 ;
 655: LD_ADDR_EXP 42
 659: PUSH
 660: LD_INT 11
 662: ST_TO_ADDR
// def_skill_level := 1 ;
 663: LD_ADDR_EXP 43
 667: PUSH
 668: LD_INT 1
 670: ST_TO_ADDR
// def_starting_resources := 2 ;
 671: LD_ADDR_EXP 44
 675: PUSH
 676: LD_INT 2
 678: ST_TO_ADDR
// def_shipments_density := 50 ;
 679: LD_ADDR_EXP 45
 683: PUSH
 684: LD_INT 50
 686: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 687: LD_ADDR_EXP 46
 691: PUSH
 692: LD_INT 0
 694: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 695: LD_ADDR_EXP 47
 699: PUSH
 700: LD_INT 1
 702: ST_TO_ADDR
// def_shared_vision := 1 ;
 703: LD_ADDR_EXP 48
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// def_morale_flags := 1 ;
 711: LD_ADDR_EXP 49
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// def_siberite_detection := 1 ;
 719: LD_ADDR_EXP 50
 723: PUSH
 724: LD_INT 1
 726: ST_TO_ADDR
// def_people_respawning := 2 ;
 727: LD_ADDR_EXP 51
 731: PUSH
 732: LD_INT 2
 734: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 735: LD_ADDR_EXP 52
 739: PUSH
 740: LD_INT 3
 742: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 743: LD_ADDR_EXP 1
 747: PUSH
 748: LD_INT 0
 750: ST_TO_ADDR
// def_public_score := 0 ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: LD_INT 0
 758: ST_TO_ADDR
// def_siberite_bomb := 4 ;
 759: LD_ADDR_EXP 53
 763: PUSH
 764: LD_INT 4
 766: ST_TO_ADDR
// def_builduptime := 0 ;
 767: LD_ADDR_EXP 54
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// def_game_rules := 0 ;
 775: LD_ADDR_EXP 40
 779: PUSH
 780: LD_INT 0
 782: ST_TO_ADDR
// tech_level = 4 ;
 783: LD_ADDR_VAR 0 3
 787: PUSH
 788: LD_INT 4
 790: ST_TO_ADDR
// def_win_rules = 0 ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_INT 0
 798: ST_TO_ADDR
// end ; InitGameRules ;
 799: CALL 9389 0 0
// if def_game_rules = 0 then
 803: LD_EXP 40
 807: PUSH
 808: LD_INT 0
 810: EQUAL
 811: IFFALSE 862
// begin if isSGUI then
 813: LD_OWVAR 83
 817: IFFALSE 825
// setMpTechs ( ) else
 819: CALL 14206 0 0
 823: GO 862
// begin if Game_Type = 3 then
 825: LD_EXP 39
 829: PUSH
 830: LD_INT 3
 832: EQUAL
 833: IFFALSE 849
// tech_level = tech_level + 3 ;
 835: LD_ADDR_VAR 0 3
 839: PUSH
 840: LD_VAR 0 3
 844: PUSH
 845: LD_INT 3
 847: PLUS
 848: ST_TO_ADDR
// SetMpTechLevel ( tech_level + 1 ) ;
 849: LD_VAR 0 3
 853: PUSH
 854: LD_INT 1
 856: PLUS
 857: PPUSH
 858: CALL 14353 0 1
// end ; end ; if ( Game_Type = 5 ) then
 862: LD_EXP 39
 866: PUSH
 867: LD_INT 5
 869: EQUAL
 870: IFFALSE 899
// begin def_base_level := 1 ;
 872: LD_ADDR_EXP 41
 876: PUSH
 877: LD_INT 1
 879: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 880: LD_ADDR_EXP 46
 884: PUSH
 885: LD_INT 0
 887: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 888: LD_ADDR_EXP 47
 892: PUSH
 893: LD_INT 0
 895: ST_TO_ADDR
// disable ( 10 ) ;
 896: LD_INT 10
 898: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 899: LD_ADDR_EXP 3
 903: PUSH
 904: LD_INT 0
 906: PUSH
 907: LD_INT 1
 909: PUSH
 910: LD_INT 1
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: PUSH
 918: LD_EXP 41
 922: PUSH
 923: LD_INT 1
 925: PLUS
 926: ARRAY
 927: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 928: LD_ADDR_EXP 4
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 2
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: PUSH
 947: LD_EXP 41
 951: PUSH
 952: LD_INT 1
 954: PLUS
 955: ARRAY
 956: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 957: LD_ADDR_EXP 5
 961: PUSH
 962: LD_EXP 42
 966: PUSH
 967: LD_INT 4
 969: PLUS
 970: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
 971: LD_ADDR_EXP 9
 975: PUSH
 976: LD_INT 150
 978: PUSH
 979: LD_EXP 45
 983: PUSH
 984: LD_INT 1
 986: PLUS
 987: MINUS
 988: ST_TO_ADDR
// if def_people_respawning = 0 then
 989: LD_EXP 51
 993: PUSH
 994: LD_INT 0
 996: EQUAL
 997: IFFALSE 1017
// begin respawning_time_min = 0 ;
 999: LD_ADDR_EXP 12
1003: PUSH
1004: LD_INT 0
1006: ST_TO_ADDR
// respawning_time_max = 0 ;
1007: LD_ADDR_EXP 13
1011: PUSH
1012: LD_INT 0
1014: ST_TO_ADDR
// end else
1015: GO 1061
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1017: LD_ADDR_EXP 12
1021: PUSH
1022: LD_INT 10500
1024: PUSH
1025: LD_INT 5
1027: DIVREAL
1028: PUSH
1029: LD_INT 6
1031: PUSH
1032: LD_EXP 51
1036: MINUS
1037: MUL
1038: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1039: LD_ADDR_EXP 13
1043: PUSH
1044: LD_INT 31500
1046: PUSH
1047: LD_INT 5
1049: DIVREAL
1050: PUSH
1051: LD_INT 6
1053: PUSH
1054: LD_EXP 51
1058: MINUS
1059: MUL
1060: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1061: LD_EXP 52
1065: NOT
1066: IFFALSE 1078
// amount_of_apemen := 0 else
1068: LD_ADDR_EXP 14
1072: PUSH
1073: LD_INT 0
1075: ST_TO_ADDR
1076: GO 1088
// amount_of_apemen := def_amount_of_apemen ;
1078: LD_ADDR_EXP 14
1082: PUSH
1083: LD_EXP 52
1087: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1088: LD_EXP 53
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: IFFALSE 1108
// siberite_bomb_Delay = 0 else
1098: LD_ADDR_EXP 15
1102: PUSH
1103: LD_INT 0
1105: ST_TO_ADDR
1106: GO 1130
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1108: LD_ADDR_EXP 15
1112: PUSH
1113: LD_EXP 53
1117: PUSH
1118: LD_INT 1
1120: MINUS
1121: PUSH
1122: LD_INT 21000
1124: MUL
1125: PUSH
1126: LD_INT 1
1128: PLUS
1129: ST_TO_ADDR
// amount_of_siberit := [ 30 , 60 , 90 , 120 , 150 , 180 , 210 , 240 , 270 , 300 , 400 , 500 , 600 , 700 , 800 , 900 , 1000 , 1250 , 1500 , 1750 , 2000 , 2250 , 2500 , 2750 , 3000 , 3500 , 4000 , 4500 , 5000 , 6000 , 7000 , 8000 , 9000 , 10000 ] [ def_amount_of_siberit + 1 ] ;
1130: LD_ADDR_EXP 11
1134: PUSH
1135: LD_INT 30
1137: PUSH
1138: LD_INT 60
1140: PUSH
1141: LD_INT 90
1143: PUSH
1144: LD_INT 120
1146: PUSH
1147: LD_INT 150
1149: PUSH
1150: LD_INT 180
1152: PUSH
1153: LD_INT 210
1155: PUSH
1156: LD_INT 240
1158: PUSH
1159: LD_INT 270
1161: PUSH
1162: LD_INT 300
1164: PUSH
1165: LD_INT 400
1167: PUSH
1168: LD_INT 500
1170: PUSH
1171: LD_INT 600
1173: PUSH
1174: LD_INT 700
1176: PUSH
1177: LD_INT 800
1179: PUSH
1180: LD_INT 900
1182: PUSH
1183: LD_INT 1000
1185: PUSH
1186: LD_INT 1250
1188: PUSH
1189: LD_INT 1500
1191: PUSH
1192: LD_INT 1750
1194: PUSH
1195: LD_INT 2000
1197: PUSH
1198: LD_INT 2250
1200: PUSH
1201: LD_INT 2500
1203: PUSH
1204: LD_INT 2750
1206: PUSH
1207: LD_INT 3000
1209: PUSH
1210: LD_INT 3500
1212: PUSH
1213: LD_INT 4000
1215: PUSH
1216: LD_INT 4500
1218: PUSH
1219: LD_INT 5000
1221: PUSH
1222: LD_INT 6000
1224: PUSH
1225: LD_INT 7000
1227: PUSH
1228: LD_INT 8000
1230: PUSH
1231: LD_INT 9000
1233: PUSH
1234: LD_INT 10000
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: PUSH
1273: LD_EXP 1
1277: PUSH
1278: LD_INT 1
1280: PLUS
1281: ARRAY
1282: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1283: LD_ADDR_EXP 6
1287: PUSH
1288: LD_INT 2
1290: PUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 4
1296: PUSH
1297: LD_INT 5
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: PUSH
1306: LD_EXP 43
1310: PUSH
1311: LD_INT 1
1313: PLUS
1314: ARRAY
1315: ST_TO_ADDR
// if ( def_game_rules = 4 ) then
1316: LD_EXP 40
1320: PUSH
1321: LD_INT 4
1323: EQUAL
1324: IFFALSE 1347
// begin starting_resources := [ 10000 , 5000 , 1000 ] ;
1326: LD_ADDR_EXP 8
1330: PUSH
1331: LD_INT 10000
1333: PUSH
1334: LD_INT 5000
1336: PUSH
1337: LD_INT 1000
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// end else
1345: GO 1619
// if ( Game_Type = 5 ) then
1347: LD_EXP 39
1351: PUSH
1352: LD_INT 5
1354: EQUAL
1355: IFFALSE 1473
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1357: LD_ADDR_EXP 8
1361: PUSH
1362: LD_INT 1000
1364: PUSH
1365: LD_INT 100
1367: PUSH
1368: LD_INT 100
1370: PUSH
1371: EMPTY
1372: LIST
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 2000
1378: PUSH
1379: LD_INT 200
1381: PUSH
1382: LD_INT 200
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 5000
1392: PUSH
1393: LD_INT 500
1395: PUSH
1396: LD_INT 500
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 10000
1406: PUSH
1407: LD_INT 1000
1409: PUSH
1410: LD_INT 1000
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 25000
1420: PUSH
1421: LD_INT 2500
1423: PUSH
1424: LD_INT 2500
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 50000
1434: PUSH
1435: LD_INT 5000
1437: PUSH
1438: LD_INT 5000
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: PUSH
1454: LD_EXP 44
1458: PUSH
1459: LD_INT 1
1461: PLUS
1462: ARRAY
1463: ST_TO_ADDR
// starting_crates := [ ] ;
1464: LD_ADDR_EXP 7
1468: PUSH
1469: EMPTY
1470: ST_TO_ADDR
// end else
1471: GO 1619
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1473: LD_ADDR_EXP 8
1477: PUSH
1478: LD_INT 0
1480: PUSH
1481: LD_INT 0
1483: PUSH
1484: LD_INT 0
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 30
1494: PUSH
1495: LD_INT 0
1497: PUSH
1498: LD_INT 0
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 50
1508: PUSH
1509: LD_INT 20
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 80
1522: PUSH
1523: LD_INT 40
1525: PUSH
1526: LD_INT 20
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: PUSH
1540: LD_EXP 44
1544: PUSH
1545: LD_INT 1
1547: PLUS
1548: ARRAY
1549: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1550: LD_ADDR_EXP 7
1554: PUSH
1555: LD_INT 10
1557: PUSH
1558: EMPTY
1559: LIST
1560: PUSH
1561: LD_INT 7
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: LD_INT 6
1573: PUSH
1574: LD_INT 12
1576: PUSH
1577: LD_INT 18
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 5
1587: PUSH
1588: LD_INT 10
1590: PUSH
1591: LD_INT 15
1593: PUSH
1594: LD_INT 20
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_EXP 44
1613: PUSH
1614: LD_INT 1
1616: PLUS
1617: ARRAY
1618: ST_TO_ADDR
// end ; morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1619: LD_ADDR_EXP 10
1623: PUSH
1624: LD_INT 1
1626: NEG
1627: PUSH
1628: LD_INT 350
1630: PUSH
1631: LD_INT 700
1633: PUSH
1634: LD_INT 1400
1636: PUSH
1637: LD_INT 0
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: PUSH
1647: LD_EXP 49
1651: PUSH
1652: LD_INT 1
1654: PLUS
1655: ARRAY
1656: ST_TO_ADDR
// battle_flags_id := [ ] ;
1657: LD_ADDR_EXP 29
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// end ;
1664: LD_VAR 0 1
1668: RET
// function init_map ; var i , j ; begin
1669: LD_INT 0
1671: PPUSH
1672: PPUSH
1673: PPUSH
// normal_oil_deposits_locations := [ [ 28 , 22 ] , [ 69 , 3 ] , [ 138 , 27 ] , [ 180 , 104 ] , [ 138 , 137 ] , [ 76 , 115 ] ] ;
1674: LD_ADDR_EXP 25
1678: PUSH
1679: LD_INT 28
1681: PUSH
1682: LD_INT 22
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 69
1691: PUSH
1692: LD_INT 3
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: LD_INT 138
1701: PUSH
1702: LD_INT 27
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 180
1711: PUSH
1712: LD_INT 104
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 138
1721: PUSH
1722: LD_INT 137
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 76
1731: PUSH
1732: LD_INT 115
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 31 , 38 ] , [ 34 , 21 ] ] , [ [ 58 , 4 ] , [ 82 , 4 ] ] , [ [ 122 , 18 ] , [ 152 , 43 ] ] , [ [ 174 , 90 ] , [ 180 , 120 ] ] , [ [ 152 , 136 ] , [ 130 , 136 ] ] , [ [ 89 , 116 ] , [ 59 , 89 ] ] ] ;
1747: LD_ADDR_EXP 26
1751: PUSH
1752: LD_INT 31
1754: PUSH
1755: LD_INT 38
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PUSH
1762: LD_INT 34
1764: PUSH
1765: LD_INT 21
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 58
1778: PUSH
1779: LD_INT 4
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 82
1788: PUSH
1789: LD_INT 4
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 122
1802: PUSH
1803: LD_INT 18
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 152
1812: PUSH
1813: LD_INT 43
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 174
1826: PUSH
1827: LD_INT 90
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: LD_INT 180
1836: PUSH
1837: LD_INT 120
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 152
1850: PUSH
1851: LD_INT 136
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 130
1860: PUSH
1861: LD_INT 136
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 89
1874: PUSH
1875: LD_INT 116
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: LD_INT 59
1884: PUSH
1885: LD_INT 89
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 28 , 26 ] , [ 73 , 3 ] , [ 133 , 22 ] , [ 180 , 110 ] , [ 142 , 137 ] , [ 72 , 112 ] ] ;
1904: LD_ADDR_EXP 27
1908: PUSH
1909: LD_INT 28
1911: PUSH
1912: LD_INT 26
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 73
1921: PUSH
1922: LD_INT 3
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 133
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: LD_INT 180
1941: PUSH
1942: LD_INT 110
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 142
1951: PUSH
1952: LD_INT 137
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 72
1961: PUSH
1962: LD_INT 112
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 27 , 39 ] , [ 30 , 16 ] ] , [ [ 57 , 8 ] , [ 87 , 8 ] ] , [ [ 128 , 19 ] , [ 146 , 36 ] ] , [ [ 176 , 121 ] , [ 179 , 96 ] ] , [ [ 153 , 132 ] , [ 124 , 133 ] ] , [ [ 85 , 117 ] , [ 62 , 96 ] ] ] ;
1977: LD_ADDR_EXP 28
1981: PUSH
1982: LD_INT 27
1984: PUSH
1985: LD_INT 39
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 30
1994: PUSH
1995: LD_INT 16
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 57
2008: PUSH
2009: LD_INT 8
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 87
2018: PUSH
2019: LD_INT 8
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 128
2032: PUSH
2033: LD_INT 19
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: LD_INT 146
2042: PUSH
2043: LD_INT 36
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 176
2056: PUSH
2057: LD_INT 121
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 179
2066: PUSH
2067: LD_INT 96
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PUSH
2078: LD_INT 153
2080: PUSH
2081: LD_INT 132
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 124
2090: PUSH
2091: LD_INT 133
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: LD_INT 85
2104: PUSH
2105: LD_INT 117
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 62
2114: PUSH
2115: LD_INT 96
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: ST_TO_ADDR
// depot_def := [ [ 53 , 42 , 5 ] , [ 78 , 18 , 0 ] , [ 129 , 43 , 1 ] , [ 155 , 96 , 2 ] , [ 130 , 120 , 3 ] , [ 82 , 98 , 3 ] ] ;
2134: LD_ADDR_EXP 22
2138: PUSH
2139: LD_INT 53
2141: PUSH
2142: LD_INT 42
2144: PUSH
2145: LD_INT 5
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 78
2155: PUSH
2156: LD_INT 18
2158: PUSH
2159: LD_INT 0
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 129
2169: PUSH
2170: LD_INT 43
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 155
2183: PUSH
2184: LD_INT 96
2186: PUSH
2187: LD_INT 2
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 130
2197: PUSH
2198: LD_INT 120
2200: PUSH
2201: LD_INT 3
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 82
2211: PUSH
2212: LD_INT 98
2214: PUSH
2215: LD_INT 3
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: ST_TO_ADDR
// for i in depot_def do
2231: LD_ADDR_VAR 0 2
2235: PUSH
2236: LD_EXP 22
2240: PUSH
2241: FOR_IN
2242: IFFALSE 2316
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2244: LD_ADDR_EXP 24
2248: PUSH
2249: LD_EXP 24
2253: PUSH
2254: LD_VAR 0 2
2258: PUSH
2259: LD_INT 1
2261: ARRAY
2262: PPUSH
2263: LD_VAR 0 2
2267: PUSH
2268: LD_INT 3
2270: ARRAY
2271: PPUSH
2272: LD_INT 10
2274: PPUSH
2275: CALL_OW 272
2279: PUSH
2280: LD_VAR 0 2
2284: PUSH
2285: LD_INT 2
2287: ARRAY
2288: PPUSH
2289: LD_VAR 0 2
2293: PUSH
2294: LD_INT 3
2296: ARRAY
2297: PPUSH
2298: LD_INT 10
2300: PPUSH
2301: CALL_OW 273
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: ADD
2313: ST_TO_ADDR
2314: GO 2241
2316: POP
2317: POP
// breastworks_def := [ [ [ 65 , 53 , 5 ] , [ 65 , 40 , 4 ] ] , [ [ 76 , 28 , 0 ] , [ 89 , 28 , 5 ] ] , [ [ 115 , 41 , 1 ] , [ 128 , 54 , 0 ] ] , [ [ 143 , 82 , 2 ] , [ 143 , 95 , 1 ] ] , [ [ 131 , 108 , 3 ] , [ 118 , 108 , 2 ] ] , [ [ 80 , 85 , 3 ] , [ 92 , 97 , 4 ] ] ] ;
2318: LD_ADDR_EXP 23
2322: PUSH
2323: LD_INT 65
2325: PUSH
2326: LD_INT 53
2328: PUSH
2329: LD_INT 5
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 65
2339: PUSH
2340: LD_INT 40
2342: PUSH
2343: LD_INT 4
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: LD_INT 76
2357: PUSH
2358: LD_INT 28
2360: PUSH
2361: LD_INT 0
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: LIST
2368: PUSH
2369: LD_INT 89
2371: PUSH
2372: LD_INT 28
2374: PUSH
2375: LD_INT 5
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: LIST
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: PUSH
2387: LD_INT 115
2389: PUSH
2390: LD_INT 41
2392: PUSH
2393: LD_INT 1
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: LIST
2400: PUSH
2401: LD_INT 128
2403: PUSH
2404: LD_INT 54
2406: PUSH
2407: LD_INT 0
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 143
2421: PUSH
2422: LD_INT 82
2424: PUSH
2425: LD_INT 2
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 143
2435: PUSH
2436: LD_INT 95
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 131
2453: PUSH
2454: LD_INT 108
2456: PUSH
2457: LD_INT 3
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 118
2467: PUSH
2468: LD_INT 108
2470: PUSH
2471: LD_INT 2
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: PUSH
2483: LD_INT 80
2485: PUSH
2486: LD_INT 85
2488: PUSH
2489: LD_INT 3
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 92
2499: PUSH
2500: LD_INT 97
2502: PUSH
2503: LD_INT 4
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: ST_TO_ADDR
// for i = 1 to Side_Positions do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_EXP 18
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2669
// begin if not Side_Positions [ i ] then
2541: LD_EXP 18
2545: PUSH
2546: LD_VAR 0 2
2550: ARRAY
2551: NOT
2552: IFFALSE 2556
// continue ;
2554: GO 2538
// if def_extra_oil_deposits then
2556: LD_EXP 46
2560: IFFALSE 2618
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2562: LD_ADDR_VAR 0 3
2566: PUSH
2567: LD_EXP 26
2571: PUSH
2572: LD_EXP 18
2576: PUSH
2577: LD_VAR 0 2
2581: ARRAY
2582: ARRAY
2583: PUSH
2584: FOR_IN
2585: IFFALSE 2614
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2587: LD_VAR 0 3
2591: PUSH
2592: LD_INT 1
2594: ARRAY
2595: PPUSH
2596: LD_VAR 0 3
2600: PUSH
2601: LD_INT 2
2603: ARRAY
2604: PPUSH
2605: LD_INT 2
2607: PPUSH
2608: CALL_OW 62
2612: GO 2584
2614: POP
2615: POP
2616: GO 2667
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2618: LD_EXP 25
2622: PUSH
2623: LD_EXP 18
2627: PUSH
2628: LD_VAR 0 2
2632: ARRAY
2633: ARRAY
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: LD_EXP 25
2643: PUSH
2644: LD_EXP 18
2648: PUSH
2649: LD_VAR 0 2
2653: ARRAY
2654: ARRAY
2655: PUSH
2656: LD_INT 2
2658: ARRAY
2659: PPUSH
2660: LD_INT 2
2662: PPUSH
2663: CALL_OW 62
// end ;
2667: GO 2538
2669: POP
2670: POP
// if def_extra_sib_deposits then
2671: LD_EXP 47
2675: IFFALSE 2829
// for i = 1 to Side_Positions do
2677: LD_ADDR_VAR 0 2
2681: PUSH
2682: DOUBLE
2683: LD_INT 1
2685: DEC
2686: ST_TO_ADDR
2687: LD_EXP 18
2691: PUSH
2692: FOR_TO
2693: IFFALSE 2827
// begin if not Side_Positions [ i ] then
2695: LD_EXP 18
2699: PUSH
2700: LD_VAR 0 2
2704: ARRAY
2705: NOT
2706: IFFALSE 2710
// continue ;
2708: GO 2692
// if def_extra_sib_deposits = 2 then
2710: LD_EXP 47
2714: PUSH
2715: LD_INT 2
2717: EQUAL
2718: IFFALSE 2776
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2720: LD_ADDR_VAR 0 3
2724: PUSH
2725: LD_EXP 28
2729: PUSH
2730: LD_EXP 18
2734: PUSH
2735: LD_VAR 0 2
2739: ARRAY
2740: ARRAY
2741: PUSH
2742: FOR_IN
2743: IFFALSE 2772
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2745: LD_VAR 0 3
2749: PUSH
2750: LD_INT 1
2752: ARRAY
2753: PPUSH
2754: LD_VAR 0 3
2758: PUSH
2759: LD_INT 2
2761: ARRAY
2762: PPUSH
2763: LD_INT 3
2765: PPUSH
2766: CALL_OW 62
2770: GO 2742
2772: POP
2773: POP
2774: GO 2825
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2776: LD_EXP 27
2780: PUSH
2781: LD_EXP 18
2785: PUSH
2786: LD_VAR 0 2
2790: ARRAY
2791: ARRAY
2792: PUSH
2793: LD_INT 1
2795: ARRAY
2796: PPUSH
2797: LD_EXP 27
2801: PUSH
2802: LD_EXP 18
2806: PUSH
2807: LD_VAR 0 2
2811: ARRAY
2812: ARRAY
2813: PUSH
2814: LD_INT 2
2816: ARRAY
2817: PPUSH
2818: LD_INT 3
2820: PPUSH
2821: CALL_OW 62
// end ;
2825: GO 2692
2827: POP
2828: POP
// end ;
2829: LD_VAR 0 1
2833: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2834: LD_INT 0
2836: PPUSH
2837: PPUSH
2838: PPUSH
// if not Team_Game then
2839: LD_EXP 20
2843: NOT
2844: IFFALSE 2942
// begin for i = 1 to 8 do
2846: LD_ADDR_VAR 0 2
2850: PUSH
2851: DOUBLE
2852: LD_INT 1
2854: DEC
2855: ST_TO_ADDR
2856: LD_INT 8
2858: PUSH
2859: FOR_TO
2860: IFFALSE 2938
// for j = 1 to 8 do
2862: LD_ADDR_VAR 0 3
2866: PUSH
2867: DOUBLE
2868: LD_INT 1
2870: DEC
2871: ST_TO_ADDR
2872: LD_INT 8
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2934
// if i <> j then
2878: LD_VAR 0 2
2882: PUSH
2883: LD_VAR 0 3
2887: NONEQUAL
2888: IFFALSE 2912
// SetAttitude ( i , j , att_neutral , true ) else
2890: LD_VAR 0 2
2894: PPUSH
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: LD_INT 1
2905: PPUSH
2906: CALL_OW 80
2910: GO 2932
// SetAttitude ( i , j , att_friend , true ) ;
2912: LD_VAR 0 2
2916: PPUSH
2917: LD_VAR 0 3
2921: PPUSH
2922: LD_INT 1
2924: PPUSH
2925: LD_INT 1
2927: PPUSH
2928: CALL_OW 80
2932: GO 2875
2934: POP
2935: POP
2936: GO 2859
2938: POP
2939: POP
// end else
2940: GO 3117
// begin if def_shared_vision then
2942: LD_EXP 48
2946: IFFALSE 3011
// begin for i in Teams do
2948: LD_ADDR_VAR 0 2
2952: PUSH
2953: LD_EXP 17
2957: PUSH
2958: FOR_IN
2959: IFFALSE 3009
// for j = 2 to i do
2961: LD_ADDR_VAR 0 3
2965: PUSH
2966: DOUBLE
2967: LD_INT 2
2969: DEC
2970: ST_TO_ADDR
2971: LD_VAR 0 2
2975: PUSH
2976: FOR_TO
2977: IFFALSE 3005
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2979: LD_VAR 0 2
2983: PUSH
2984: LD_VAR 0 3
2988: ARRAY
2989: PPUSH
2990: LD_VAR 0 2
2994: PUSH
2995: LD_INT 1
2997: ARRAY
2998: PPUSH
2999: CALL_OW 343
3003: GO 2976
3005: POP
3006: POP
3007: GO 2958
3009: POP
3010: POP
// end ; for i = 1 to 8 do
3011: LD_ADDR_VAR 0 2
3015: PUSH
3016: DOUBLE
3017: LD_INT 1
3019: DEC
3020: ST_TO_ADDR
3021: LD_INT 8
3023: PUSH
3024: FOR_TO
3025: IFFALSE 3115
// for j = 1 to 8 do
3027: LD_ADDR_VAR 0 3
3031: PUSH
3032: DOUBLE
3033: LD_INT 1
3035: DEC
3036: ST_TO_ADDR
3037: LD_INT 8
3039: PUSH
3040: FOR_TO
3041: IFFALSE 3111
// if Side_Teams [ i ] = Side_Teams [ j ] then
3043: LD_EXP 16
3047: PUSH
3048: LD_VAR 0 2
3052: ARRAY
3053: PUSH
3054: LD_EXP 16
3058: PUSH
3059: LD_VAR 0 3
3063: ARRAY
3064: EQUAL
3065: IFFALSE 3089
// SetAttitude ( i , j , att_friend , true ) else
3067: LD_VAR 0 2
3071: PPUSH
3072: LD_VAR 0 3
3076: PPUSH
3077: LD_INT 1
3079: PPUSH
3080: LD_INT 1
3082: PPUSH
3083: CALL_OW 80
3087: GO 3109
// SetAttitude ( i , j , att_enemy , true ) ;
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_VAR 0 3
3098: PPUSH
3099: LD_INT 2
3101: PPUSH
3102: LD_INT 1
3104: PPUSH
3105: CALL_OW 80
3109: GO 3040
3111: POP
3112: POP
3113: GO 3024
3115: POP
3116: POP
// end ; end ;
3117: LD_VAR 0 1
3121: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3122: LD_INT 0
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
// result := [ ] ;
3128: LD_ADDR_VAR 0 7
3132: PUSH
3133: EMPTY
3134: ST_TO_ADDR
// for i := 1 to count do
3135: LD_ADDR_VAR 0 8
3139: PUSH
3140: DOUBLE
3141: LD_INT 1
3143: DEC
3144: ST_TO_ADDR
3145: LD_VAR 0 1
3149: PUSH
3150: FOR_TO
3151: IFFALSE 3569
// begin uc_direction := Rand ( 0 , 5 ) ;
3153: LD_ADDR_OWVAR 24
3157: PUSH
3158: LD_INT 0
3160: PPUSH
3161: LD_INT 5
3163: PPUSH
3164: CALL_OW 12
3168: ST_TO_ADDR
// if commander then
3169: LD_LOC 1
3173: IFFALSE 3282
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3175: LD_ADDR_OWVAR 26
3179: PUSH
3180: LD_OWVAR 19
3184: PUSH
3185: LD_OWVAR 20
3189: ARRAY
3190: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3191: LD_INT 1
3193: PPUSH
3194: LD_INT 2
3196: PPUSH
3197: CALL_OW 12
3201: PPUSH
3202: LD_VAR 0 2
3206: PPUSH
3207: LD_EXP 6
3211: PUSH
3212: LD_INT 2
3214: PLUS
3215: PPUSH
3216: CALL_OW 380
// hc_importance := 105 ;
3220: LD_ADDR_OWVAR 32
3224: PUSH
3225: LD_INT 105
3227: ST_TO_ADDR
// commander := false ;
3228: LD_ADDR_LOC 1
3232: PUSH
3233: LD_INT 0
3235: ST_TO_ADDR
// if Multiplayer then
3236: LD_OWVAR 4
3240: IFFALSE 3280
// begin hc_gallery := MULTIAVATARS ;
3242: LD_ADDR_OWVAR 33
3246: PUSH
3247: LD_STRING MULTIAVATARS
3249: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3250: LD_ADDR_OWVAR 34
3254: PUSH
3255: LD_OWVAR 20
3259: PPUSH
3260: CALL_OW 525
3264: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3265: LD_ADDR_OWVAR 27
3269: PUSH
3270: LD_OWVAR 20
3274: PPUSH
3275: CALL_OW 526
3279: ST_TO_ADDR
// end ; end else
3280: GO 3345
// begin hc_name :=  ;
3282: LD_ADDR_OWVAR 26
3286: PUSH
3287: LD_STRING 
3289: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 2
3295: PPUSH
3296: CALL_OW 12
3300: PPUSH
3301: LD_VAR 0 2
3305: PPUSH
3306: LD_EXP 6
3310: PPUSH
3311: CALL_OW 380
// hc_importance := 0 ;
3315: LD_ADDR_OWVAR 32
3319: PUSH
3320: LD_INT 0
3322: ST_TO_ADDR
// if Multiplayer then
3323: LD_OWVAR 4
3327: IFFALSE 3345
// begin hc_gallery :=  ;
3329: LD_ADDR_OWVAR 33
3333: PUSH
3334: LD_STRING 
3336: ST_TO_ADDR
// hc_face_number := 0 ;
3337: LD_ADDR_OWVAR 34
3341: PUSH
3342: LD_INT 0
3344: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3345: LD_ADDR_VAR 0 10
3349: PUSH
3350: CALL_OW 44
3354: ST_TO_ADDR
// if global_defined then
3355: LD_LOC 3
3359: IFFALSE 3499
// begin if ( cl = class_soldier ) then
3361: LD_VAR 0 2
3365: PUSH
3366: LD_INT 1
3368: EQUAL
3369: IFFALSE 3389
// j := i + soldiers_created else
3371: LD_ADDR_VAR 0 9
3375: PUSH
3376: LD_VAR 0 8
3380: PUSH
3381: LD_LOC 4
3385: PLUS
3386: ST_TO_ADDR
3387: GO 3399
// j := i ;
3389: LD_ADDR_VAR 0 9
3393: PUSH
3394: LD_VAR 0 8
3398: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3399: LD_LOC 2
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: PUSH
3410: LD_VAR 0 9
3414: ARRAY
3415: PPUSH
3416: LD_VAR 0 10
3420: PPUSH
3421: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3425: LD_VAR 0 10
3429: PPUSH
3430: LD_INT 2
3432: PPUSH
3433: LD_LOC 2
3437: PUSH
3438: LD_VAR 0 2
3442: ARRAY
3443: PUSH
3444: LD_VAR 0 9
3448: ARRAY
3449: PPUSH
3450: LD_INT 2
3452: PPUSH
3453: CALL_OW 260
3457: PPUSH
3458: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3462: LD_VAR 0 10
3466: PPUSH
3467: LD_INT 1
3469: PPUSH
3470: LD_LOC 2
3474: PUSH
3475: LD_VAR 0 2
3479: ARRAY
3480: PUSH
3481: LD_VAR 0 9
3485: ARRAY
3486: PPUSH
3487: LD_INT 1
3489: PPUSH
3490: CALL_OW 260
3494: PPUSH
3495: CALL_OW 239
// end ; if building then
3499: LD_VAR 0 6
3503: IFFALSE 3521
// PlaceHumanInUnit ( un , building ) else
3505: LD_VAR 0 10
3509: PPUSH
3510: LD_VAR 0 6
3514: PPUSH
3515: CALL_OW 52
3519: GO 3548
// PlaceUnitXYR ( un , x , y , r , false ) ;
3521: LD_VAR 0 10
3525: PPUSH
3526: LD_VAR 0 3
3530: PPUSH
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_VAR 0 5
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 50
// result := result ^ [ un ] ;
3548: LD_ADDR_VAR 0 7
3552: PUSH
3553: LD_VAR 0 7
3557: PUSH
3558: LD_VAR 0 10
3562: PUSH
3563: EMPTY
3564: LIST
3565: ADD
3566: ST_TO_ADDR
// end ;
3567: GO 3150
3569: POP
3570: POP
// if not global_defined then
3571: LD_LOC 3
3575: NOT
3576: IFFALSE 3654
// if ( global_units >= cl ) then
3578: LD_LOC 2
3582: PUSH
3583: LD_VAR 0 2
3587: GREATEREQUAL
3588: IFFALSE 3629
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3590: LD_ADDR_LOC 2
3594: PUSH
3595: LD_LOC 2
3599: PPUSH
3600: LD_VAR 0 2
3604: PPUSH
3605: LD_LOC 2
3609: PUSH
3610: LD_VAR 0 2
3614: ARRAY
3615: PUSH
3616: LD_VAR 0 7
3620: ADD
3621: PPUSH
3622: CALL_OW 1
3626: ST_TO_ADDR
3627: GO 3654
// global_units := Replace ( global_units , cl , result ) ;
3629: LD_ADDR_LOC 2
3633: PUSH
3634: LD_LOC 2
3638: PPUSH
3639: LD_VAR 0 2
3643: PPUSH
3644: LD_VAR 0 7
3648: PPUSH
3649: CALL_OW 1
3653: ST_TO_ADDR
// if commander then
3654: LD_LOC 1
3658: IFFALSE 3705
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3660: LD_ADDR_EXP 31
3664: PUSH
3665: LD_EXP 31
3669: PPUSH
3670: LD_OWVAR 20
3674: PPUSH
3675: LD_EXP 31
3679: PUSH
3680: LD_OWVAR 20
3684: ARRAY
3685: PUSH
3686: LD_VAR 0 10
3690: ADD
3691: PPUSH
3692: CALL_OW 1
3696: ST_TO_ADDR
// commander := false ;
3697: LD_ADDR_LOC 1
3701: PUSH
3702: LD_INT 0
3704: ST_TO_ADDR
// end ; end ;
3705: LD_VAR 0 7
3709: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3710: LD_INT 0
3712: PPUSH
3713: PPUSH
3714: PPUSH
3715: PPUSH
3716: PPUSH
3717: PPUSH
3718: PPUSH
3719: PPUSH
3720: PPUSH
// if side in [ 0 , 9 ] then
3721: LD_VAR 0 1
3725: PUSH
3726: LD_INT 0
3728: PUSH
3729: LD_INT 9
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: IN
3736: IFFALSE 3740
// exit ;
3738: GO 4790
// pos := Side_Positions [ side ] ;
3740: LD_ADDR_VAR 0 3
3744: PUSH
3745: LD_EXP 18
3749: PUSH
3750: LD_VAR 0 1
3754: ARRAY
3755: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3756: LD_ADDR_OWVAR 21
3760: PUSH
3761: LD_EXP 19
3765: PUSH
3766: LD_VAR 0 1
3770: ARRAY
3771: ST_TO_ADDR
// uc_side := side ;
3772: LD_ADDR_OWVAR 20
3776: PUSH
3777: LD_VAR 0 1
3781: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3782: LD_ADDR_VAR 0 4
3786: PUSH
3787: LD_EXP 22
3791: PUSH
3792: LD_VAR 0 3
3796: ARRAY
3797: PUSH
3798: LD_INT 1
3800: ARRAY
3801: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3802: LD_ADDR_VAR 0 5
3806: PUSH
3807: LD_EXP 22
3811: PUSH
3812: LD_VAR 0 3
3816: ARRAY
3817: PUSH
3818: LD_INT 2
3820: ARRAY
3821: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3822: LD_ADDR_VAR 0 6
3826: PUSH
3827: LD_EXP 22
3831: PUSH
3832: LD_VAR 0 3
3836: ARRAY
3837: PUSH
3838: LD_INT 3
3840: ARRAY
3841: ST_TO_ADDR
// if is_depot then
3842: LD_EXP 3
3846: IFFALSE 3979
// begin bc_type = b_depot ;
3848: LD_ADDR_OWVAR 42
3852: PUSH
3853: LD_INT 0
3855: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3856: LD_ADDR_VAR 0 10
3860: PUSH
3861: LD_VAR 0 4
3865: PPUSH
3866: LD_VAR 0 5
3870: PPUSH
3871: LD_VAR 0 6
3875: PPUSH
3876: CALL_OW 47
3880: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3881: LD_VAR 0 10
3885: PPUSH
3886: LD_STRING @
3888: PUSH
3889: LD_VAR 0 1
3893: STR
3894: PPUSH
3895: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3899: LD_VAR 0 10
3903: PPUSH
3904: CALL_OW 274
3908: PPUSH
3909: LD_INT 1
3911: PPUSH
3912: LD_EXP 8
3916: PUSH
3917: LD_INT 1
3919: ARRAY
3920: PPUSH
3921: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3925: LD_VAR 0 10
3929: PPUSH
3930: CALL_OW 274
3934: PPUSH
3935: LD_INT 2
3937: PPUSH
3938: LD_EXP 8
3942: PUSH
3943: LD_INT 2
3945: ARRAY
3946: PPUSH
3947: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3951: LD_VAR 0 10
3955: PPUSH
3956: CALL_OW 274
3960: PPUSH
3961: LD_INT 3
3963: PPUSH
3964: LD_EXP 8
3968: PUSH
3969: LD_INT 3
3971: ARRAY
3972: PPUSH
3973: CALL_OW 277
// end else
3977: GO 4123
// begin for i := 1 to 3 do
3979: LD_ADDR_VAR 0 7
3983: PUSH
3984: DOUBLE
3985: LD_INT 1
3987: DEC
3988: ST_TO_ADDR
3989: LD_INT 3
3991: PUSH
3992: FOR_TO
3993: IFFALSE 4121
// begin r := starting_resources [ i ] ;
3995: LD_ADDR_VAR 0 8
3999: PUSH
4000: LD_EXP 8
4004: PUSH
4005: LD_VAR 0 7
4009: ARRAY
4010: ST_TO_ADDR
// while r >= 10 do
4011: LD_VAR 0 8
4015: PUSH
4016: LD_INT 10
4018: GREATEREQUAL
4019: IFFALSE 4119
// if r > 50 then
4021: LD_VAR 0 8
4025: PUSH
4026: LD_INT 50
4028: GREATER
4029: IFFALSE 4075
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4031: LD_VAR 0 7
4035: PPUSH
4036: LD_INT 5
4038: PPUSH
4039: LD_VAR 0 4
4043: PPUSH
4044: LD_VAR 0 5
4048: PPUSH
4049: LD_INT 4
4051: PPUSH
4052: LD_INT 0
4054: PPUSH
4055: CALL_OW 60
// r := r - 50 ;
4059: LD_ADDR_VAR 0 8
4063: PUSH
4064: LD_VAR 0 8
4068: PUSH
4069: LD_INT 50
4071: MINUS
4072: ST_TO_ADDR
// end else
4073: GO 4117
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4075: LD_VAR 0 7
4079: PPUSH
4080: LD_VAR 0 8
4084: PUSH
4085: LD_INT 10
4087: DIV
4088: PPUSH
4089: LD_VAR 0 4
4093: PPUSH
4094: LD_VAR 0 5
4098: PPUSH
4099: LD_INT 4
4101: PPUSH
4102: LD_INT 0
4104: PPUSH
4105: CALL_OW 60
// r := 0 ;
4109: LD_ADDR_VAR 0 8
4113: PUSH
4114: LD_INT 0
4116: ST_TO_ADDR
// end ;
4117: GO 4011
// end ;
4119: GO 3992
4121: POP
4122: POP
// end ; for r in starting_crates do
4123: LD_ADDR_VAR 0 8
4127: PUSH
4128: LD_EXP 7
4132: PUSH
4133: FOR_IN
4134: IFFALSE 4166
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4136: LD_INT 1
4138: PPUSH
4139: LD_INT 5
4141: PPUSH
4142: LD_VAR 0 4
4146: PPUSH
4147: LD_VAR 0 5
4151: PPUSH
4152: LD_VAR 0 8
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 60
4164: GO 4133
4166: POP
4167: POP
// if def_morale_flags then
4168: LD_EXP 49
4172: IFFALSE 4311
// begin x := start_def [ pos ] [ 1 ] ;
4174: LD_ADDR_VAR 0 4
4178: PUSH
4179: LD_EXP 24
4183: PUSH
4184: LD_VAR 0 3
4188: ARRAY
4189: PUSH
4190: LD_INT 1
4192: ARRAY
4193: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4194: LD_ADDR_VAR 0 5
4198: PUSH
4199: LD_EXP 24
4203: PUSH
4204: LD_VAR 0 3
4208: ARRAY
4209: PUSH
4210: LD_INT 2
4212: ARRAY
4213: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4214: LD_VAR 0 4
4218: PPUSH
4219: LD_VAR 0 5
4223: PPUSH
4224: LD_INT 12
4226: PPUSH
4227: LD_INT 2
4229: PPUSH
4230: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4234: LD_ADDR_EXP 29
4238: PUSH
4239: LD_EXP 29
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_VAR 0 4
4253: PPUSH
4254: LD_VAR 0 5
4258: PPUSH
4259: LD_INT 1
4261: PUSH
4262: LD_INT 100
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: LD_INT 2
4271: PUSH
4272: LD_INT 50
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PUSH
4279: LD_INT 3
4281: PUSH
4282: LD_INT 20
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: PUSH
4289: LD_INT 20
4291: PUSH
4292: LD_INT 100
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: PPUSH
4305: CALL_OW 418
4309: ADD
4310: ST_TO_ADDR
// end ; commander := true ;
4311: LD_ADDR_LOC 1
4315: PUSH
4316: LD_INT 1
4318: ST_TO_ADDR
// soldiers_created := 0 ;
4319: LD_ADDR_LOC 4
4323: PUSH
4324: LD_INT 0
4326: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4327: LD_ADDR_VAR 0 7
4331: PUSH
4332: DOUBLE
4333: LD_INT 1
4335: DEC
4336: ST_TO_ADDR
4337: LD_EXP 4
4341: PUSH
4342: FOR_TO
4343: IFFALSE 4496
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4345: LD_ADDR_VAR 0 4
4349: PUSH
4350: LD_EXP 23
4354: PUSH
4355: LD_VAR 0 3
4359: ARRAY
4360: PUSH
4361: LD_VAR 0 7
4365: ARRAY
4366: PUSH
4367: LD_INT 1
4369: ARRAY
4370: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4371: LD_ADDR_VAR 0 5
4375: PUSH
4376: LD_EXP 23
4380: PUSH
4381: LD_VAR 0 3
4385: ARRAY
4386: PUSH
4387: LD_VAR 0 7
4391: ARRAY
4392: PUSH
4393: LD_INT 2
4395: ARRAY
4396: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4397: LD_ADDR_VAR 0 6
4401: PUSH
4402: LD_EXP 23
4406: PUSH
4407: LD_VAR 0 3
4411: ARRAY
4412: PUSH
4413: LD_VAR 0 7
4417: ARRAY
4418: PUSH
4419: LD_INT 3
4421: ARRAY
4422: ST_TO_ADDR
// bc_type := b_breastwork ;
4423: LD_ADDR_OWVAR 42
4427: PUSH
4428: LD_INT 31
4430: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4431: LD_ADDR_VAR 0 9
4435: PUSH
4436: LD_VAR 0 4
4440: PPUSH
4441: LD_VAR 0 5
4445: PPUSH
4446: LD_VAR 0 6
4450: PPUSH
4451: CALL_OW 47
4455: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4456: LD_INT 1
4458: PPUSH
4459: LD_INT 1
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: LD_VAR 0 9
4475: PPUSH
4476: CALL 3122 0 6
// soldiers_created := soldiers_created + 1 ;
4480: LD_ADDR_LOC 4
4484: PUSH
4485: LD_LOC 4
4489: PUSH
4490: LD_INT 1
4492: PLUS
4493: ST_TO_ADDR
// end ;
4494: GO 4342
4496: POP
4497: POP
// x := start_def [ pos ] [ 1 ] ;
4498: LD_ADDR_VAR 0 4
4502: PUSH
4503: LD_EXP 24
4507: PUSH
4508: LD_VAR 0 3
4512: ARRAY
4513: PUSH
4514: LD_INT 1
4516: ARRAY
4517: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4518: LD_ADDR_VAR 0 5
4522: PUSH
4523: LD_EXP 24
4527: PUSH
4528: LD_VAR 0 3
4532: ARRAY
4533: PUSH
4534: LD_INT 2
4536: ARRAY
4537: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4538: LD_LOC 8
4542: PUSH
4543: LD_EXP 4
4547: MINUS
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: LD_VAR 0 4
4556: PPUSH
4557: LD_VAR 0 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT 0
4567: PPUSH
4568: CALL 3122 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4572: LD_LOC 5
4576: PPUSH
4577: LD_INT 2
4579: PPUSH
4580: LD_VAR 0 4
4584: PPUSH
4585: LD_VAR 0 5
4589: PPUSH
4590: LD_INT 5
4592: PPUSH
4593: LD_INT 0
4595: PPUSH
4596: CALL 3122 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4600: LD_LOC 7
4604: PPUSH
4605: LD_INT 3
4607: PPUSH
4608: LD_VAR 0 4
4612: PPUSH
4613: LD_VAR 0 5
4617: PPUSH
4618: LD_INT 5
4620: PPUSH
4621: LD_INT 0
4623: PPUSH
4624: CALL 3122 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4628: LD_LOC 6
4632: PPUSH
4633: LD_INT 4
4635: PPUSH
4636: LD_VAR 0 4
4640: PPUSH
4641: LD_VAR 0 5
4645: PPUSH
4646: LD_INT 5
4648: PPUSH
4649: LD_INT 0
4651: PPUSH
4652: CALL 3122 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4656: LD_EXP 50
4660: PUSH
4661: LD_INT 20
4663: PPUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: CALL_OW 321
4673: PUSH
4674: LD_INT 1
4676: EQUAL
4677: AND
4678: IFFALSE 4695
// SetTech ( tech_SibDet , side , state_researched ) ;
4680: LD_INT 20
4682: PPUSH
4683: LD_VAR 0 1
4687: PPUSH
4688: LD_INT 2
4690: PPUSH
4691: CALL_OW 322
// if def_siberite_bomb = 1 then
4695: LD_EXP 53
4699: PUSH
4700: LD_INT 1
4702: EQUAL
4703: IFFALSE 4737
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4705: LD_INT 25
4707: PPUSH
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_INT 1
4715: PPUSH
4716: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4720: LD_INT 73
4722: PPUSH
4723: LD_VAR 0 1
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 322
// end else
4735: GO 4767
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4737: LD_INT 25
4739: PPUSH
4740: LD_VAR 0 1
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4752: LD_INT 73
4754: PPUSH
4755: LD_VAR 0 1
4759: PPUSH
4760: LD_INT 0
4762: PPUSH
4763: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4767: LD_INT 24
4769: PPUSH
4770: LD_VAR 0 1
4774: PPUSH
4775: LD_INT 0
4777: PPUSH
4778: CALL_OW 322
// global_defined := true ;
4782: LD_ADDR_LOC 3
4786: PUSH
4787: LD_INT 1
4789: ST_TO_ADDR
// end ;
4790: LD_VAR 0 2
4794: RET
// every 0 0$1 do
4795: GO 4797
4797: DISABLE
// if ( def_siberite_bomb > 1 ) then
4798: LD_EXP 53
4802: PUSH
4803: LD_INT 1
4805: GREATER
4806: IFFALSE 4821
// begin wait ( siberite_bomb_Delay ) ;
4808: LD_EXP 15
4812: PPUSH
4813: CALL_OW 67
// EnableSibFiss ;
4817: CALL 4822 0 0
// end ;
4821: END
// function EnableSibFiss ; var i ; begin
4822: LD_INT 0
4824: PPUSH
4825: PPUSH
// for i := 1 to 8 do
4826: LD_ADDR_VAR 0 2
4830: PUSH
4831: DOUBLE
4832: LD_INT 1
4834: DEC
4835: ST_TO_ADDR
4836: LD_INT 8
4838: PUSH
4839: FOR_TO
4840: IFFALSE 4886
// if Side_Positions [ i ] then
4842: LD_EXP 18
4846: PUSH
4847: LD_VAR 0 2
4851: ARRAY
4852: IFFALSE 4884
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4854: LD_INT 25
4856: PPUSH
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_INT 1
4864: PPUSH
4865: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4869: LD_INT 73
4871: PPUSH
4872: LD_VAR 0 2
4876: PPUSH
4877: LD_INT 1
4879: PPUSH
4880: CALL_OW 322
// end ;
4884: GO 4839
4886: POP
4887: POP
// end ;
4888: LD_VAR 0 1
4892: RET
// function prepare_sides ; var i ; begin
4893: LD_INT 0
4895: PPUSH
4896: PPUSH
// global_units := [ ] ;
4897: LD_ADDR_LOC 2
4901: PUSH
4902: EMPTY
4903: ST_TO_ADDR
// global_defined := false ;
4904: LD_ADDR_LOC 3
4908: PUSH
4909: LD_INT 0
4911: ST_TO_ADDR
// CountClassMembers ;
4912: CALL 4962 0 0
// for i := 1 to 8 do
4916: LD_ADDR_VAR 0 2
4920: PUSH
4921: DOUBLE
4922: LD_INT 1
4924: DEC
4925: ST_TO_ADDR
4926: LD_INT 8
4928: PUSH
4929: FOR_TO
4930: IFFALSE 4955
// if Side_Positions [ i ] then
4932: LD_EXP 18
4936: PUSH
4937: LD_VAR 0 2
4941: ARRAY
4942: IFFALSE 4953
// prepare_side ( i ) ;
4944: LD_VAR 0 2
4948: PPUSH
4949: CALL 3710 0 1
4953: GO 4929
4955: POP
4956: POP
// end ;
4957: LD_VAR 0 1
4961: RET
// function CountClassMembers ; var Mode ; begin
4962: LD_INT 0
4964: PPUSH
4965: PPUSH
// if No_Mechs then
4966: LD_EXP 55
4970: IFFALSE 4982
// Mode := 2 else
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: LD_INT 2
4979: ST_TO_ADDR
4980: GO 4990
// Mode := 1 ;
4982: LD_ADDR_VAR 0 2
4986: PUSH
4987: LD_INT 1
4989: ST_TO_ADDR
// neng := number_of_people ;
4990: LD_ADDR_LOC 5
4994: PUSH
4995: LD_EXP 5
4999: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5000: LD_ADDR_LOC 8
5004: PUSH
5005: LD_LOC 5
5009: PUSH
5010: LD_INT 4
5012: PUSH
5013: LD_INT 3
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_VAR 0 2
5024: ARRAY
5025: DIV
5026: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5027: LD_LOC 8
5031: PUSH
5032: LD_EXP 4
5036: LESS
5037: IFFALSE 5049
// nsol := number_of_breastworks ;
5039: LD_ADDR_LOC 8
5043: PUSH
5044: LD_EXP 4
5048: ST_TO_ADDR
// neng := neng - nsol ;
5049: LD_ADDR_LOC 5
5053: PUSH
5054: LD_LOC 5
5058: PUSH
5059: LD_LOC 8
5063: MINUS
5064: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5065: LD_ADDR_LOC 6
5069: PUSH
5070: LD_LOC 5
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: LD_INT 2
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: PUSH
5085: LD_VAR 0 2
5089: ARRAY
5090: DIV
5091: ST_TO_ADDR
// if ( nsci < 1 ) then
5092: LD_LOC 6
5096: PUSH
5097: LD_INT 1
5099: LESS
5100: IFFALSE 5110
// nsci := 1 ;
5102: LD_ADDR_LOC 6
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// neng := neng - nsci ;
5110: LD_ADDR_LOC 5
5114: PUSH
5115: LD_LOC 5
5119: PUSH
5120: LD_LOC 6
5124: MINUS
5125: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5126: LD_ADDR_LOC 7
5130: PUSH
5131: LD_LOC 5
5135: PUSH
5136: LD_INT 2
5138: DIV
5139: PUSH
5140: LD_INT 0
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: LD_VAR 0 2
5151: ARRAY
5152: ST_TO_ADDR
// neng := neng - nmech ;
5153: LD_ADDR_LOC 5
5157: PUSH
5158: LD_LOC 5
5162: PUSH
5163: LD_LOC 7
5167: MINUS
5168: ST_TO_ADDR
// if ( neng < 1 ) then
5169: LD_LOC 5
5173: PUSH
5174: LD_INT 1
5176: LESS
5177: IFFALSE 5187
// neng := 1 ;
5179: LD_ADDR_LOC 5
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ;
5187: LD_VAR 0 1
5191: RET
// starting begin disable ( 98 ) ;
5192: LD_INT 98
5194: DISABLE_MARKED
// disable ( 99 ) ;
5195: LD_INT 99
5197: DISABLE_MARKED
// disable ( 100 ) ;
5198: LD_INT 100
5200: DISABLE_MARKED
// disable ( 200 ) ;
5201: LD_INT 200
5203: DISABLE_MARKED
// disable ( 400 ) ;
5204: LD_INT 400
5206: DISABLE_MARKED
// disable ( 401 ) ;
5207: LD_INT 401
5209: DISABLE_MARKED
// disable ( 600 ) ;
5210: LD_INT 600
5212: DISABLE_MARKED
// mp_selectmsg := true ;
5213: LD_ADDR_OWVAR 13
5217: PUSH
5218: LD_INT 1
5220: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5221: CALL 68 0 0
// init_map ;
5225: CALL 1669 0 0
// set_shared_visions_and_alliances ;
5229: CALL 2834 0 0
// ResetFog ;
5233: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5237: LD_OWVAR 2
5241: PPUSH
5242: CALL_OW 520
// AnimateTrees ( true ) ;
5246: LD_INT 1
5248: PPUSH
5249: CALL_OW 573
// prepare_sides ;
5253: CALL 4893 0 0
// init_respawning ;
5257: CALL 18930 0 0
// Init_Win_Condition ;
5261: CALL 12911 0 0
// InitLimits ;
5265: CALL 11500 0 0
// ShowTimer ;
5269: CALL 12437 0 0
// case Game_Type of 3 :
5273: LD_EXP 39
5277: PUSH
5278: LD_INT 3
5280: DOUBLE
5281: EQUAL
5282: IFTRUE 5286
5284: GO 5292
5286: POP
// enable ( 100 ) ; 4 :
5287: LD_INT 100
5289: ENABLE_MARKED
5290: GO 5308
5292: LD_INT 4
5294: DOUBLE
5295: EQUAL
5296: IFTRUE 5300
5298: GO 5307
5300: POP
// InitBloodGods ; end ;
5301: CALL 9063 0 0
5305: GO 5308
5307: POP
// music_nat := Side_Nations [ your_side ] ;
5308: LD_ADDR_OWVAR 71
5312: PUSH
5313: LD_EXP 19
5317: PUSH
5318: LD_OWVAR 2
5322: ARRAY
5323: ST_TO_ADDR
// if IAmSpec then
5324: CALL_OW 531
5328: IFFALSE 5352
// begin fogOff ( true ) ;
5330: LD_INT 1
5332: PPUSH
5333: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
5337: LD_INT 104
5339: PPUSH
5340: LD_INT 69
5342: PPUSH
5343: CALL_OW 86
// enable ( 400 ) ;
5347: LD_INT 400
5349: ENABLE_MARKED
// end else
5350: GO 5398
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5352: LD_EXP 24
5356: PUSH
5357: LD_EXP 18
5361: PUSH
5362: LD_OWVAR 2
5366: ARRAY
5367: ARRAY
5368: PUSH
5369: LD_INT 1
5371: ARRAY
5372: PPUSH
5373: LD_EXP 24
5377: PUSH
5378: LD_EXP 18
5382: PUSH
5383: LD_OWVAR 2
5387: ARRAY
5388: ARRAY
5389: PUSH
5390: LD_INT 2
5392: ARRAY
5393: PPUSH
5394: CALL_OW 86
// end ; InitApeman ;
5398: CALL 6159 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5402: LD_ADDR_EXP 58
5406: PUSH
5407: LD_INT 8
5409: PUSH
5410: LD_INT 9
5412: PUSH
5413: LD_INT 10
5415: PUSH
5416: LD_INT 11
5418: PUSH
5419: LD_INT 12
5421: PUSH
5422: LD_INT 13
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: ST_TO_ADDR
// BeginBuildUp ;
5433: CALL 19424 0 0
// end ; end_of_file
5437: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5438: GO 5440
5440: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5441: LD_INT 4
5443: PPUSH
5444: LD_INT 5
5446: PPUSH
5447: CALL_OW 12
5451: PPUSH
5452: LD_INT 1
5454: PPUSH
5455: CALL_OW 57
// enable ;
5459: ENABLE
// end ;
5460: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5461: GO 5463
5463: DISABLE
5464: LD_INT 0
5466: PPUSH
5467: PPUSH
// begin case tick of 1 .. 1 1$0 :
5468: LD_OWVAR 1
5472: PUSH
5473: LD_INT 1
5475: DOUBLE
5476: GREATEREQUAL
5477: IFFALSE 5485
5479: LD_INT 2100
5481: DOUBLE
5482: LESSEQUAL
5483: IFTRUE 5487
5485: GO 5515
5487: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5488: LD_EXP 9
5492: PUSH
5493: LD_INT 100
5495: DIVREAL
5496: PUSH
5497: LD_INT 350
5499: PPUSH
5500: LD_INT 1050
5502: PPUSH
5503: CALL_OW 12
5507: MUL
5508: PPUSH
5509: CALL_OW 67
5513: GO 5817
5515: LD_INT 2100
5517: PUSH
5518: LD_INT 1
5520: PLUS
5521: DOUBLE
5522: GREATEREQUAL
5523: IFFALSE 5531
5525: LD_INT 10500
5527: DOUBLE
5528: LESSEQUAL
5529: IFTRUE 5533
5531: GO 5561
5533: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5534: LD_EXP 9
5538: PUSH
5539: LD_INT 100
5541: DIVREAL
5542: PUSH
5543: LD_INT 1050
5545: PPUSH
5546: LD_INT 1575
5548: PPUSH
5549: CALL_OW 12
5553: MUL
5554: PPUSH
5555: CALL_OW 67
5559: GO 5817
5561: LD_INT 10500
5563: PUSH
5564: LD_INT 1
5566: PLUS
5567: DOUBLE
5568: GREATEREQUAL
5569: IFFALSE 5577
5571: LD_INT 21000
5573: DOUBLE
5574: LESSEQUAL
5575: IFTRUE 5579
5577: GO 5607
5579: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5580: LD_EXP 9
5584: PUSH
5585: LD_INT 100
5587: DIVREAL
5588: PUSH
5589: LD_INT 1575
5591: PPUSH
5592: LD_INT 2100
5594: PPUSH
5595: CALL_OW 12
5599: MUL
5600: PPUSH
5601: CALL_OW 67
5605: GO 5817
5607: LD_INT 21000
5609: PUSH
5610: LD_INT 1
5612: PLUS
5613: DOUBLE
5614: GREATEREQUAL
5615: IFFALSE 5623
5617: LD_INT 42000
5619: DOUBLE
5620: LESSEQUAL
5621: IFTRUE 5625
5623: GO 5653
5625: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5626: LD_EXP 9
5630: PUSH
5631: LD_INT 100
5633: DIVREAL
5634: PUSH
5635: LD_INT 2100
5637: PPUSH
5638: LD_INT 2625
5640: PPUSH
5641: CALL_OW 12
5645: MUL
5646: PPUSH
5647: CALL_OW 67
5651: GO 5817
5653: LD_INT 42000
5655: PUSH
5656: LD_INT 1
5658: PLUS
5659: DOUBLE
5660: GREATEREQUAL
5661: IFFALSE 5669
5663: LD_INT 63000
5665: DOUBLE
5666: LESSEQUAL
5667: IFTRUE 5671
5669: GO 5699
5671: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5672: LD_EXP 9
5676: PUSH
5677: LD_INT 100
5679: DIVREAL
5680: PUSH
5681: LD_INT 2625
5683: PPUSH
5684: LD_INT 3150
5686: PPUSH
5687: CALL_OW 12
5691: MUL
5692: PPUSH
5693: CALL_OW 67
5697: GO 5817
5699: LD_INT 63000
5701: PUSH
5702: LD_INT 1
5704: PLUS
5705: DOUBLE
5706: GREATEREQUAL
5707: IFFALSE 5715
5709: LD_INT 105000
5711: DOUBLE
5712: LESSEQUAL
5713: IFTRUE 5717
5715: GO 5745
5717: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5718: LD_EXP 9
5722: PUSH
5723: LD_INT 100
5725: DIVREAL
5726: PUSH
5727: LD_INT 3150
5729: PPUSH
5730: LD_INT 3675
5732: PPUSH
5733: CALL_OW 12
5737: MUL
5738: PPUSH
5739: CALL_OW 67
5743: GO 5817
5745: LD_INT 105000
5747: PUSH
5748: LD_INT 1
5750: PLUS
5751: DOUBLE
5752: GREATEREQUAL
5753: IFFALSE 5761
5755: LD_INT 630000
5757: DOUBLE
5758: LESSEQUAL
5759: IFTRUE 5763
5761: GO 5791
5763: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5764: LD_EXP 9
5768: PUSH
5769: LD_INT 100
5771: DIVREAL
5772: PUSH
5773: LD_INT 3675
5775: PPUSH
5776: LD_INT 4200
5778: PPUSH
5779: CALL_OW 12
5783: MUL
5784: PPUSH
5785: CALL_OW 67
5789: GO 5817
5791: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5792: LD_EXP 9
5796: PUSH
5797: LD_INT 100
5799: DIVREAL
5800: PUSH
5801: LD_INT 4200
5803: PPUSH
5804: LD_INT 5250
5806: PPUSH
5807: CALL_OW 12
5811: MUL
5812: PPUSH
5813: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5817: LD_ADDR_VAR 0 2
5821: PUSH
5822: LD_INT 3
5824: PPUSH
5825: LD_INT 5
5827: PPUSH
5828: CALL_OW 12
5832: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5833: LD_ADDR_VAR 0 1
5837: PUSH
5838: LD_EXP 18
5842: PUSH
5843: LD_INT 0
5845: PUSH
5846: EMPTY
5847: LIST
5848: DIFF
5849: PUSH
5850: FOR_IN
5851: IFFALSE 5900
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5853: LD_VAR 0 2
5857: PPUSH
5858: LD_EXP 24
5862: PUSH
5863: LD_VAR 0 1
5867: ARRAY
5868: PUSH
5869: LD_INT 1
5871: ARRAY
5872: PPUSH
5873: LD_EXP 24
5877: PUSH
5878: LD_VAR 0 1
5882: ARRAY
5883: PUSH
5884: LD_INT 2
5886: ARRAY
5887: PPUSH
5888: LD_INT 20
5890: PPUSH
5891: LD_INT 1
5893: PPUSH
5894: CALL_OW 56
5898: GO 5850
5900: POP
5901: POP
// enable ;
5902: ENABLE
// end ;
5903: PPOPN 2
5905: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
5906: GO 5908
5908: DISABLE
5909: LD_INT 0
5911: PPUSH
5912: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
5913: LD_INT 1
5915: PPUSH
5916: LD_INT 1
5918: PPUSH
5919: CALL_OW 287
5923: PUSH
5924: LD_INT 200
5926: PUSH
5927: LD_EXP 9
5931: MINUS
5932: PUSH
5933: LD_INT 100
5935: DIVREAL
5936: PUSH
5937: LD_INT 5
5939: MUL
5940: LESS
5941: IFFALSE 5964
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
5943: LD_INT 3
5945: PPUSH
5946: LD_INT 5
5948: PPUSH
5949: CALL_OW 12
5953: PPUSH
5954: LD_INT 1
5956: PPUSH
5957: LD_INT 1
5959: PPUSH
5960: CALL_OW 55
// enable ;
5964: ENABLE
// end ; end_of_file
5965: PPOPN 2
5967: END
// every 20 20$00 trigger apemanNumber do
5968: LD_EXP 32
5972: IFFALSE 6005
5974: GO 5976
5976: DISABLE
// begin enable ;
5977: ENABLE
// if apeLevel >= 8 then
5978: LD_EXP 37
5982: PUSH
5983: LD_INT 8
5985: GREATEREQUAL
5986: IFFALSE 5991
// disable else
5988: DISABLE
5989: GO 6005
// apeLevel := apeLevel + 1 ;
5991: LD_ADDR_EXP 37
5995: PUSH
5996: LD_EXP 37
6000: PUSH
6001: LD_INT 1
6003: PLUS
6004: ST_TO_ADDR
// end ;
6005: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6006: LD_EXP 32
6010: PUSH
6011: LD_EXP 33
6015: LESS
6016: IFFALSE 6156
6018: GO 6020
6020: DISABLE
6021: LD_INT 0
6023: PPUSH
6024: PPUSH
6025: PPUSH
6026: PPUSH
// begin enable ;
6027: ENABLE
// for i := 1 to apemanPos do
6028: LD_ADDR_VAR 0 1
6032: PUSH
6033: DOUBLE
6034: LD_INT 1
6036: DEC
6037: ST_TO_ADDR
6038: LD_EXP 35
6042: PUSH
6043: FOR_TO
6044: IFFALSE 6154
// begin if apemanPlayerCount [ i ] then
6046: LD_EXP 36
6050: PUSH
6051: LD_VAR 0 1
6055: ARRAY
6056: IFFALSE 6152
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6058: LD_EXP 36
6062: PUSH
6063: LD_VAR 0 1
6067: ARRAY
6068: PUSH
6069: LD_EXP 35
6073: PUSH
6074: LD_VAR 0 1
6078: ARRAY
6079: GREATER
6080: IFFALSE 6152
// begin ape := PrepareApeman ;
6082: LD_ADDR_VAR 0 2
6086: PUSH
6087: CALL 6667 0 0
6091: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6092: LD_VAR 0 2
6096: PPUSH
6097: LD_EXP 38
6101: PUSH
6102: LD_VAR 0 1
6106: ARRAY
6107: PPUSH
6108: LD_INT 0
6110: PPUSH
6111: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6115: LD_ADDR_EXP 35
6119: PUSH
6120: LD_EXP 35
6124: PPUSH
6125: LD_VAR 0 1
6129: PPUSH
6130: LD_EXP 35
6134: PUSH
6135: LD_VAR 0 1
6139: ARRAY
6140: PUSH
6141: LD_VAR 0 2
6145: UNION
6146: PPUSH
6147: CALL_OW 1
6151: ST_TO_ADDR
// end ; end ; end ;
6152: GO 6043
6154: POP
6155: POP
// end ;
6156: PPOPN 4
6158: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6159: LD_INT 0
6161: PPUSH
6162: PPUSH
6163: PPUSH
6164: PPUSH
6165: PPUSH
6166: PPUSH
6167: PPUSH
// playersAmount := 0 ;
6168: LD_ADDR_VAR 0 3
6172: PUSH
6173: LD_INT 0
6175: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6176: LD_ADDR_VAR 0 7
6180: PUSH
6181: LD_INT 2
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: LD_INT 4
6189: PUSH
6190: LD_INT 5
6192: PUSH
6193: LD_INT 6
6195: PUSH
6196: LD_INT 7
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6207: LD_ADDR_EXP 38
6211: PUSH
6212: LD_INT 0
6214: PUSH
6215: LD_INT 0
6217: PUSH
6218: LD_INT 0
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: LD_INT 0
6232: PUSH
6233: LD_INT 0
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: ST_TO_ADDR
// for j = 1 to Side_Positions do
6246: LD_ADDR_VAR 0 4
6250: PUSH
6251: DOUBLE
6252: LD_INT 1
6254: DEC
6255: ST_TO_ADDR
6256: LD_EXP 18
6260: PUSH
6261: FOR_TO
6262: IFFALSE 6329
// if Side_Positions [ j ] then
6264: LD_EXP 18
6268: PUSH
6269: LD_VAR 0 4
6273: ARRAY
6274: IFFALSE 6327
// begin playersAmount := playersAmount + 1 ;
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: LD_VAR 0 3
6285: PUSH
6286: LD_INT 1
6288: PLUS
6289: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6290: LD_ADDR_EXP 38
6294: PUSH
6295: LD_EXP 38
6299: PPUSH
6300: LD_VAR 0 4
6304: PPUSH
6305: LD_VAR 0 7
6309: PUSH
6310: LD_EXP 18
6314: PUSH
6315: LD_VAR 0 4
6319: ARRAY
6320: ARRAY
6321: PPUSH
6322: CALL_OW 1
6326: ST_TO_ADDR
// end ;
6327: GO 6261
6329: POP
6330: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6331: LD_ADDR_EXP 34
6335: PUSH
6336: LD_INT 3
6338: PUSH
6339: LD_EXP 14
6343: MUL
6344: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6345: LD_ADDR_EXP 32
6349: PUSH
6350: LD_VAR 0 3
6354: PUSH
6355: LD_EXP 34
6359: MUL
6360: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6361: LD_ADDR_EXP 33
6365: PUSH
6366: LD_EXP 32
6370: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6371: LD_ADDR_EXP 35
6375: PUSH
6376: LD_INT 0
6378: PUSH
6379: LD_INT 0
6381: PUSH
6382: LD_INT 0
6384: PUSH
6385: LD_INT 0
6387: PUSH
6388: LD_INT 0
6390: PUSH
6391: LD_INT 0
6393: PUSH
6394: LD_INT 0
6396: PUSH
6397: LD_INT 0
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6410: LD_ADDR_EXP 36
6414: PUSH
6415: LD_INT 0
6417: PUSH
6418: LD_INT 0
6420: PUSH
6421: LD_INT 0
6423: PUSH
6424: LD_INT 0
6426: PUSH
6427: LD_INT 0
6429: PUSH
6430: LD_INT 0
6432: PUSH
6433: LD_INT 0
6435: PUSH
6436: LD_INT 0
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: ST_TO_ADDR
// apeLevel := 1 ;
6449: LD_ADDR_EXP 37
6453: PUSH
6454: LD_INT 1
6456: ST_TO_ADDR
// if not apemanNumber then
6457: LD_EXP 32
6461: NOT
6462: IFFALSE 6466
// exit ;
6464: GO 6662
// for i := 1 to apemanPerPlayer do
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: DOUBLE
6472: LD_INT 1
6474: DEC
6475: ST_TO_ADDR
6476: LD_EXP 34
6480: PUSH
6481: FOR_TO
6482: IFFALSE 6660
// begin for j := 1 to Side_Positions do
6484: LD_ADDR_VAR 0 4
6488: PUSH
6489: DOUBLE
6490: LD_INT 1
6492: DEC
6493: ST_TO_ADDR
6494: LD_EXP 18
6498: PUSH
6499: FOR_TO
6500: IFFALSE 6656
// if Side_Positions [ j ] then
6502: LD_EXP 18
6506: PUSH
6507: LD_VAR 0 4
6511: ARRAY
6512: IFFALSE 6654
// begin pos := Side_Positions [ j ] ;
6514: LD_ADDR_VAR 0 6
6518: PUSH
6519: LD_EXP 18
6523: PUSH
6524: LD_VAR 0 4
6528: ARRAY
6529: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6530: LD_ADDR_EXP 36
6534: PUSH
6535: LD_EXP 36
6539: PPUSH
6540: LD_VAR 0 4
6544: PPUSH
6545: LD_EXP 36
6549: PUSH
6550: LD_VAR 0 4
6554: ARRAY
6555: PUSH
6556: LD_INT 1
6558: PLUS
6559: PPUSH
6560: CALL_OW 1
6564: ST_TO_ADDR
// ape := PrepareApeman ;
6565: LD_ADDR_VAR 0 5
6569: PUSH
6570: CALL 6667 0 0
6574: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6575: LD_ADDR_EXP 35
6579: PUSH
6580: LD_EXP 35
6584: PPUSH
6585: LD_VAR 0 4
6589: PPUSH
6590: LD_EXP 35
6594: PUSH
6595: LD_VAR 0 4
6599: ARRAY
6600: PPUSH
6601: LD_EXP 35
6605: PUSH
6606: LD_VAR 0 4
6610: ARRAY
6611: PUSH
6612: LD_INT 1
6614: PLUS
6615: PPUSH
6616: LD_VAR 0 5
6620: PPUSH
6621: CALL_OW 1
6625: PPUSH
6626: CALL_OW 1
6630: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6631: LD_VAR 0 5
6635: PPUSH
6636: LD_EXP 38
6640: PUSH
6641: LD_VAR 0 4
6645: ARRAY
6646: PPUSH
6647: LD_INT 0
6649: PPUSH
6650: CALL_OW 49
// end ;
6654: GO 6499
6656: POP
6657: POP
// end ;
6658: GO 6481
6660: POP
6661: POP
// end ;
6662: LD_VAR 0 1
6666: RET
// export function PrepareApeman ; var bonus ; begin
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
// uc_side := 0 ;
6671: LD_ADDR_OWVAR 20
6675: PUSH
6676: LD_INT 0
6678: ST_TO_ADDR
// uc_nation := 0 ;
6679: LD_ADDR_OWVAR 21
6683: PUSH
6684: LD_INT 0
6686: ST_TO_ADDR
// InitHc ;
6687: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6691: LD_ADDR_VAR 0 2
6695: PUSH
6696: LD_INT 1
6698: NEG
6699: PUSH
6700: LD_INT 0
6702: PUSH
6703: LD_INT 1
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: PUSH
6711: LD_OWVAR 1
6715: PUSH
6716: LD_INT 3
6718: MOD
6719: PUSH
6720: LD_INT 1
6722: PLUS
6723: ARRAY
6724: ST_TO_ADDR
// hc_class := class_apeman ;
6725: LD_ADDR_OWVAR 28
6729: PUSH
6730: LD_INT 12
6732: ST_TO_ADDR
// hc_gallery :=  ;
6733: LD_ADDR_OWVAR 33
6737: PUSH
6738: LD_STRING 
6740: ST_TO_ADDR
// hc_name :=  ;
6741: LD_ADDR_OWVAR 26
6745: PUSH
6746: LD_STRING 
6748: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6749: LD_ADDR_OWVAR 31
6753: PUSH
6754: LD_EXP 37
6758: PUSH
6759: LD_VAR 0 2
6763: PLUS
6764: PUSH
6765: LD_EXP 37
6769: PUSH
6770: LD_VAR 0 2
6774: PLUS
6775: PUSH
6776: LD_EXP 37
6780: PUSH
6781: LD_VAR 0 2
6785: PLUS
6786: PUSH
6787: LD_EXP 37
6791: PUSH
6792: LD_VAR 0 2
6796: PLUS
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6804: LD_ADDR_OWVAR 35
6808: PUSH
6809: LD_INT 10
6811: PUSH
6812: LD_VAR 0 2
6816: MUL
6817: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6818: LD_ADDR_OWVAR 29
6822: PUSH
6823: LD_INT 12
6825: PUSH
6826: LD_INT 10
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: ST_TO_ADDR
// result := CreateHuman ;
6833: LD_ADDR_VAR 0 1
6837: PUSH
6838: CALL_OW 44
6842: ST_TO_ADDR
// end ;
6843: LD_VAR 0 1
6847: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6848: LD_INT 0
6850: PPUSH
6851: PPUSH
6852: PPUSH
// if not ape then
6853: LD_VAR 0 1
6857: NOT
6858: IFFALSE 6862
// exit ;
6860: GO 6987
// side := GetSide ( ape ) ;
6862: LD_ADDR_VAR 0 3
6866: PUSH
6867: LD_VAR 0 1
6871: PPUSH
6872: CALL_OW 255
6876: ST_TO_ADDR
// if not side then
6877: LD_VAR 0 3
6881: NOT
6882: IFFALSE 6936
// begin for i = 1 to apemanPos do
6884: LD_ADDR_VAR 0 4
6888: PUSH
6889: DOUBLE
6890: LD_INT 1
6892: DEC
6893: ST_TO_ADDR
6894: LD_EXP 35
6898: PUSH
6899: FOR_TO
6900: IFFALSE 6934
// if ape in apemanPos [ i ] then
6902: LD_VAR 0 1
6906: PUSH
6907: LD_EXP 35
6911: PUSH
6912: LD_VAR 0 4
6916: ARRAY
6917: IN
6918: IFFALSE 6932
// begin side := i ;
6920: LD_ADDR_VAR 0 3
6924: PUSH
6925: LD_VAR 0 4
6929: ST_TO_ADDR
// break ;
6930: GO 6934
// end ;
6932: GO 6899
6934: POP
6935: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6936: LD_ADDR_EXP 35
6940: PUSH
6941: LD_EXP 35
6945: PPUSH
6946: LD_VAR 0 3
6950: PPUSH
6951: LD_EXP 35
6955: PUSH
6956: LD_VAR 0 3
6960: ARRAY
6961: PUSH
6962: LD_VAR 0 1
6966: DIFF
6967: PPUSH
6968: CALL_OW 1
6972: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6973: LD_ADDR_EXP 32
6977: PUSH
6978: LD_EXP 32
6982: PUSH
6983: LD_INT 1
6985: MINUS
6986: ST_TO_ADDR
// end ; end_of_file
6987: LD_VAR 0 2
6991: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6992: LD_VAR 0 1
6996: PPUSH
6997: CALL_OW 266
7001: PUSH
7002: LD_INT 0
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: IN
7012: IFFALSE 7037
// SetBName ( b , @ & GetSide ( b ) ) ;
7014: LD_VAR 0 1
7018: PPUSH
7019: LD_STRING @
7021: PUSH
7022: LD_VAR 0 1
7026: PPUSH
7027: CALL_OW 255
7031: STR
7032: PPUSH
7033: CALL_OW 500
// if def_game_rules then
7037: LD_EXP 40
7041: IFFALSE 7078
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7043: LD_VAR 0 1
7047: PPUSH
7048: LD_VAR 0 1
7052: PPUSH
7053: CALL_OW 266
7057: PPUSH
7058: LD_VAR 0 1
7062: PPUSH
7063: CALL_OW 255
7067: PPUSH
7068: LD_INT 0
7070: PPUSH
7071: LD_INT 1
7073: PPUSH
7074: CALL 11901 0 5
// end ;
7078: PPOPN 2
7080: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7081: LD_VAR 0 1
7085: PPUSH
7086: CALL_OW 266
7090: PUSH
7091: LD_INT 0
7093: PUSH
7094: LD_INT 1
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: IN
7101: IFFALSE 7126
// SetBName ( b , @ & GetSide ( b ) ) ;
7103: LD_VAR 0 1
7107: PPUSH
7108: LD_STRING @
7110: PUSH
7111: LD_VAR 0 1
7115: PPUSH
7116: CALL_OW 255
7120: STR
7121: PPUSH
7122: CALL_OW 500
// if def_game_rules then
7126: LD_EXP 40
7130: IFFALSE 7169
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7132: LD_VAR 0 1
7136: PPUSH
7137: LD_VAR 0 1
7141: PPUSH
7142: CALL_OW 266
7146: PPUSH
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 255
7156: PPUSH
7157: LD_VAR 0 2
7161: PPUSH
7162: LD_INT 1
7164: PPUSH
7165: CALL 11901 0 5
// end ;
7169: PPOPN 3
7171: END
// on VehicleConstructed ( veh , fac ) do var side ;
7172: LD_INT 0
7174: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7175: LD_VAR 0 1
7179: PPUSH
7180: CALL_OW 263
7184: PUSH
7185: LD_INT 5
7187: EQUAL
7188: IFFALSE 7330
// begin side := GetSide ( veh ) ;
7190: LD_ADDR_VAR 0 3
7194: PUSH
7195: LD_VAR 0 1
7199: PPUSH
7200: CALL_OW 255
7204: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7205: LD_ADDR_EXP 35
7209: PUSH
7210: LD_EXP 35
7214: PPUSH
7215: LD_VAR 0 3
7219: PPUSH
7220: LD_EXP 35
7224: PUSH
7225: LD_VAR 0 3
7229: ARRAY
7230: PPUSH
7231: LD_INT 52
7233: PUSH
7234: EMPTY
7235: LIST
7236: PPUSH
7237: CALL_OW 72
7241: PUSH
7242: LD_INT 22
7244: PUSH
7245: LD_VAR 0 3
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 2
7256: PUSH
7257: LD_INT 33
7259: PUSH
7260: LD_INT 5
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 25
7269: PUSH
7270: LD_INT 12
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 25
7279: PUSH
7280: LD_INT 15
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 25
7289: PUSH
7290: LD_INT 16
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 25
7299: PUSH
7300: LD_INT 17
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PPUSH
7319: CALL_OW 69
7323: UNION
7324: PPUSH
7325: CALL_OW 1
7329: ST_TO_ADDR
// end ; end ;
7330: PPOPN 3
7332: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7333: LD_INT 0
7335: PPUSH
7336: PPUSH
7337: PPUSH
7338: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7339: LD_VAR 0 1
7343: PPUSH
7344: CALL_OW 257
7348: PUSH
7349: LD_INT 12
7351: PUSH
7352: LD_INT 15
7354: PUSH
7355: LD_INT 17
7357: PUSH
7358: LD_INT 16
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: IN
7367: PUSH
7368: LD_VAR 0 1
7372: PPUSH
7373: CALL_OW 263
7377: PUSH
7378: LD_INT 5
7380: EQUAL
7381: OR
7382: IFFALSE 7393
// ApeKilled ( j ) ;
7384: LD_VAR 0 1
7388: PPUSH
7389: CALL 6848 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 266
7402: PUSH
7403: LD_INT 0
7405: PUSH
7406: LD_INT 1
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: IN
7413: IFFALSE 7495
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7415: LD_ADDR_VAR 0 4
7419: PUSH
7420: LD_EXP 18
7424: PUSH
7425: LD_VAR 0 1
7429: PPUSH
7430: CALL_OW 255
7434: ARRAY
7435: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7436: LD_ADDR_VAR 0 2
7440: PUSH
7441: LD_EXP 24
7445: PUSH
7446: LD_VAR 0 4
7450: ARRAY
7451: PUSH
7452: LD_INT 1
7454: ARRAY
7455: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7456: LD_ADDR_VAR 0 3
7460: PUSH
7461: LD_EXP 24
7465: PUSH
7466: LD_VAR 0 4
7470: ARRAY
7471: PUSH
7472: LD_INT 2
7474: ARRAY
7475: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7476: LD_VAR 0 2
7480: PPUSH
7481: LD_VAR 0 3
7485: PPUSH
7486: CALL_OW 420
7490: PPUSH
7491: CALL_OW 419
// end ; if def_game_rules then
7495: LD_EXP 40
7499: IFFALSE 7598
// if ( GetType ( j ) = 3 ) then
7501: LD_VAR 0 1
7505: PPUSH
7506: CALL_OW 247
7510: PUSH
7511: LD_INT 3
7513: EQUAL
7514: IFFALSE 7554
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7516: LD_VAR 0 1
7520: PPUSH
7521: LD_VAR 0 1
7525: PPUSH
7526: CALL_OW 266
7530: PPUSH
7531: LD_VAR 0 1
7535: PPUSH
7536: CALL_OW 255
7540: PPUSH
7541: LD_INT 0
7543: PPUSH
7544: LD_INT 1
7546: NEG
7547: PPUSH
7548: CALL 11901 0 5
7552: GO 7598
// if ( GetChassis ( j ) = 25 ) then
7554: LD_VAR 0 1
7558: PPUSH
7559: CALL_OW 265
7563: PUSH
7564: LD_INT 25
7566: EQUAL
7567: IFFALSE 7598
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7569: LD_VAR 0 1
7573: PPUSH
7574: LD_INT 37
7576: PPUSH
7577: LD_VAR 0 1
7581: PPUSH
7582: CALL_OW 255
7586: PPUSH
7587: LD_INT 0
7589: PPUSH
7590: LD_INT 1
7592: NEG
7593: PPUSH
7594: CALL 11901 0 5
// end ;
7598: PPOPN 5
7600: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7601: LD_EXP 40
7605: PUSH
7606: LD_VAR 0 1
7610: PPUSH
7611: CALL_OW 265
7615: PUSH
7616: LD_INT 25
7618: EQUAL
7619: AND
7620: IFFALSE 7652
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7622: LD_VAR 0 1
7626: PPUSH
7627: LD_INT 37
7629: PPUSH
7630: LD_VAR 0 1
7634: PPUSH
7635: CALL_OW 255
7639: PPUSH
7640: LD_VAR 0 3
7644: PPUSH
7645: LD_INT 1
7647: PPUSH
7648: CALL 11901 0 5
// end ;
7652: PPOPN 4
7654: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7655: LD_VAR 0 1
7659: PPUSH
7660: LD_VAR 0 2
7664: PPUSH
7665: LD_VAR 0 3
7669: PPUSH
7670: LD_OWVAR 2
7674: PPUSH
7675: CALL 12672 0 4
7679: PPOPN 3
7681: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
7682: GO 7684
7684: DISABLE
7685: LD_INT 0
7687: PPUSH
7688: PPUSH
7689: PPUSH
7690: PPUSH
7691: PPUSH
// begin sib_mined := [ ] ;
7692: LD_ADDR_VAR 0 5
7696: PUSH
7697: EMPTY
7698: ST_TO_ADDR
// for i := 1 to 8 do
7699: LD_ADDR_VAR 0 1
7703: PUSH
7704: DOUBLE
7705: LD_INT 1
7707: DEC
7708: ST_TO_ADDR
7709: LD_INT 8
7711: PUSH
7712: FOR_TO
7713: IFFALSE 7869
// if Side_Positions [ i ] then
7715: LD_EXP 18
7719: PUSH
7720: LD_VAR 0 1
7724: ARRAY
7725: IFFALSE 7853
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7727: LD_ADDR_VAR 0 4
7731: PUSH
7732: LD_INT 22
7734: PUSH
7735: LD_VAR 0 1
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PUSH
7744: LD_INT 2
7746: PUSH
7747: LD_INT 30
7749: PUSH
7750: LD_INT 0
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 30
7759: PUSH
7760: LD_INT 1
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 69
7780: ST_TO_ADDR
// pom := 0 ;
7781: LD_ADDR_VAR 0 3
7785: PUSH
7786: LD_INT 0
7788: ST_TO_ADDR
// for base in filter do
7789: LD_ADDR_VAR 0 2
7793: PUSH
7794: LD_VAR 0 4
7798: PUSH
7799: FOR_IN
7800: IFFALSE 7833
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
7802: LD_ADDR_VAR 0 3
7806: PUSH
7807: LD_VAR 0 3
7811: PUSH
7812: LD_VAR 0 2
7816: PPUSH
7817: CALL_OW 274
7821: PPUSH
7822: LD_INT 3
7824: PPUSH
7825: CALL_OW 275
7829: PLUS
7830: ST_TO_ADDR
7831: GO 7799
7833: POP
7834: POP
// sib_mined := sib_mined ^ pom ;
7835: LD_ADDR_VAR 0 5
7839: PUSH
7840: LD_VAR 0 5
7844: PUSH
7845: LD_VAR 0 3
7849: ADD
7850: ST_TO_ADDR
// end else
7851: GO 7867
// sib_mined := sib_mined ^ 0 ;
7853: LD_ADDR_VAR 0 5
7857: PUSH
7858: LD_VAR 0 5
7862: PUSH
7863: LD_INT 0
7865: ADD
7866: ST_TO_ADDR
7867: GO 7712
7869: POP
7870: POP
// if not def_public_score then
7871: LD_EXP 2
7875: NOT
7876: IFFALSE 7966
// begin ExtraStrings := [ ] ;
7878: LD_ADDR_EXP 56
7882: PUSH
7883: EMPTY
7884: ST_TO_ADDR
// for i := 1 to 8 do
7885: LD_ADDR_VAR 0 1
7889: PUSH
7890: DOUBLE
7891: LD_INT 1
7893: DEC
7894: ST_TO_ADDR
7895: LD_INT 8
7897: PUSH
7898: FOR_TO
7899: IFFALSE 7962
// if Side_Positions [ i ] then
7901: LD_EXP 18
7905: PUSH
7906: LD_VAR 0 1
7910: ARRAY
7911: IFFALSE 7960
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
7913: LD_ADDR_EXP 56
7917: PUSH
7918: LD_EXP 56
7922: PUSH
7923: LD_STRING #AlienBase-MinedPublic
7925: PUSH
7926: LD_VAR 0 1
7930: PUSH
7931: LD_VAR 0 1
7935: PUSH
7936: LD_VAR 0 5
7940: PUSH
7941: LD_VAR 0 1
7945: ARRAY
7946: PUSH
7947: LD_EXP 11
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: ADD
7959: ST_TO_ADDR
7960: GO 7898
7962: POP
7963: POP
// end else
7964: GO 7995
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
7966: LD_ADDR_EXP 56
7970: PUSH
7971: LD_STRING #AlienBase-Mined
7973: PUSH
7974: LD_VAR 0 5
7978: PUSH
7979: LD_OWVAR 2
7983: ARRAY
7984: PUSH
7985: LD_EXP 11
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: ST_TO_ADDR
// for i := 1 to 8 do
7995: LD_ADDR_VAR 0 1
7999: PUSH
8000: DOUBLE
8001: LD_INT 1
8003: DEC
8004: ST_TO_ADDR
8005: LD_INT 8
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8079
// if sib_mined [ i ] >= amount_of_siberit then
8011: LD_VAR 0 5
8015: PUSH
8016: LD_VAR 0 1
8020: ARRAY
8021: PUSH
8022: LD_EXP 11
8026: GREATEREQUAL
8027: IFFALSE 8077
// begin wait ( 0 0$1 ) ;
8029: LD_INT 35
8031: PPUSH
8032: CALL_OW 67
// if IAmServer then
8036: CALL_OW 518
8040: IFFALSE 8049
// wait ( 0 0$1 ) ;
8042: LD_INT 35
8044: PPUSH
8045: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8049: LD_VAR 0 5
8053: PUSH
8054: LD_OWVAR 2
8058: ARRAY
8059: PUSH
8060: LD_EXP 11
8064: GREATEREQUAL
8065: IFFALSE 8073
// YouWinInMultiplayer else
8067: CALL_OW 106
8071: GO 8077
// YouLostInMultiplayer ;
8073: CALL_OW 107
// end ;
8077: GO 8008
8079: POP
8080: POP
// enable ;
8081: ENABLE
// end ; end_of_file
8082: PPOPN 5
8084: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8085: LD_INT 0
8087: PPUSH
8088: PPUSH
// for un in battle_flags_id do
8089: LD_ADDR_VAR 0 2
8093: PUSH
8094: LD_EXP 29
8098: PUSH
8099: FOR_IN
8100: IFFALSE 8175
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8102: LD_VAR 0 2
8106: PPUSH
8107: LD_INT 1
8109: PUSH
8110: LD_LOC 9
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 2
8121: PUSH
8122: LD_LOC 9
8126: PUSH
8127: LD_INT 2
8129: DIV
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PUSH
8135: LD_INT 3
8137: PUSH
8138: LD_LOC 9
8142: PUSH
8143: LD_INT 5
8145: DIV
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 20
8153: PUSH
8154: LD_LOC 9
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: PPUSH
8169: CALL_OW 423
8173: GO 8099
8175: POP
8176: POP
// end ;
8177: LD_VAR 0 1
8181: RET
// every 1 do var un ;
8182: GO 8184
8184: DISABLE
8185: LD_INT 0
8187: PPUSH
// begin if not def_morale_flags then
8188: LD_EXP 49
8192: NOT
8193: IFFALSE 8197
// exit ;
8195: GO 8274
// if not morale_decreasing_time then
8197: LD_EXP 10
8201: NOT
8202: IFFALSE 8206
// exit ;
8204: GO 8274
// strength = 100 ;
8206: LD_ADDR_LOC 9
8210: PUSH
8211: LD_INT 100
8213: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8214: LD_EXP 10
8218: PPUSH
8219: CALL_OW 67
// strength := strength - 1 ;
8223: LD_ADDR_LOC 9
8227: PUSH
8228: LD_LOC 9
8232: PUSH
8233: LD_INT 1
8235: MINUS
8236: ST_TO_ADDR
// Update_Flags ;
8237: CALL 8085 0 0
// until not strength ;
8241: LD_LOC 9
8245: NOT
8246: IFFALSE 8214
// for un in battle_flags_id do
8248: LD_ADDR_VAR 0 1
8252: PUSH
8253: LD_EXP 29
8257: PUSH
8258: FOR_IN
8259: IFFALSE 8272
// KillBattleFlag ( un ) ;
8261: LD_VAR 0 1
8265: PPUSH
8266: CALL_OW 419
8270: GO 8258
8272: POP
8273: POP
// end ; end_of_file
8274: PPOPN 1
8276: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
8277: GO 8279
8279: DISABLE
8280: LD_INT 0
8282: PPUSH
// begin enable ;
8283: ENABLE
// for x := 1 to 8 do
8284: LD_ADDR_VAR 0 1
8288: PUSH
8289: DOUBLE
8290: LD_INT 1
8292: DEC
8293: ST_TO_ADDR
8294: LD_INT 8
8296: PUSH
8297: FOR_TO
8298: IFFALSE 8382
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
8300: LD_LOC 16
8304: PUSH
8305: LD_VAR 0 1
8309: ARRAY
8310: PUSH
8311: LD_INT 5
8313: GREATER
8314: PUSH
8315: LD_LOC 14
8319: PUSH
8320: LD_VAR 0 1
8324: ARRAY
8325: PUSH
8326: LD_INT 1
8328: NEG
8329: EQUAL
8330: AND
8331: IFFALSE 8380
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
8333: LD_ADDR_LOC 15
8337: PUSH
8338: LD_LOC 15
8342: PPUSH
8343: LD_VAR 0 1
8347: PPUSH
8348: LD_LOC 15
8352: PUSH
8353: LD_VAR 0 1
8357: ARRAY
8358: PUSH
8359: LD_INT 6
8361: PLUS
8362: PPUSH
8363: CALL_OW 1
8367: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
8368: LD_VAR 0 1
8372: PPUSH
8373: LD_INT 0
8375: PPUSH
8376: CALL 8554 0 2
// end ;
8380: GO 8297
8382: POP
8383: POP
// end ;
8384: PPOPN 1
8386: END
// every 0 0$1 marked 200 do var BGL , x ;
8387: GO 8389
8389: DISABLE
8390: LD_INT 0
8392: PPUSH
8393: PPUSH
// begin enable ;
8394: ENABLE
// for x := 1 to 8 do
8395: LD_ADDR_VAR 0 2
8399: PUSH
8400: DOUBLE
8401: LD_INT 1
8403: DEC
8404: ST_TO_ADDR
8405: LD_INT 8
8407: PUSH
8408: FOR_TO
8409: IFFALSE 8540
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
8411: LD_LOC 14
8415: PUSH
8416: LD_VAR 0 2
8420: ARRAY
8421: PUSH
8422: LD_INT 1
8424: NEG
8425: GREATER
8426: PUSH
8427: LD_LOC 14
8431: PUSH
8432: LD_VAR 0 2
8436: ARRAY
8437: PPUSH
8438: CALL_OW 300
8442: AND
8443: IFFALSE 8538
// begin BGL := GetLives ( BloodGods [ x ] ) ;
8445: LD_ADDR_VAR 0 1
8449: PUSH
8450: LD_LOC 14
8454: PUSH
8455: LD_VAR 0 2
8459: ARRAY
8460: PPUSH
8461: CALL_OW 256
8465: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
8466: LD_VAR 0 1
8470: PUSH
8471: LD_INT 1000
8473: LESS
8474: PUSH
8475: LD_VAR 0 1
8479: PUSH
8480: LD_INT 100
8482: GREATER
8483: AND
8484: IFFALSE 8538
// begin BGL := BGL + 10 ;
8486: LD_ADDR_VAR 0 1
8490: PUSH
8491: LD_VAR 0 1
8495: PUSH
8496: LD_INT 10
8498: PLUS
8499: ST_TO_ADDR
// if BGL > 1000 then
8500: LD_VAR 0 1
8504: PUSH
8505: LD_INT 1000
8507: GREATER
8508: IFFALSE 8518
// BGL := 1000 ;
8510: LD_ADDR_VAR 0 1
8514: PUSH
8515: LD_INT 1000
8517: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
8518: LD_LOC 14
8522: PUSH
8523: LD_VAR 0 2
8527: ARRAY
8528: PPUSH
8529: LD_VAR 0 1
8533: PPUSH
8534: CALL_OW 234
// end ; end ;
8538: GO 8408
8540: POP
8541: POP
// end ;
8542: PPOPN 2
8544: END
// every 0 0$1 marked 200 do
8545: GO 8547
8547: DISABLE
// begin DisplayTimeWithKills ;
8548: CALL 8795 0 0
// enable ;
8552: ENABLE
// end ;
8553: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
8554: LD_INT 0
8556: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
8557: LD_ADDR_OWVAR 24
8561: PUSH
8562: LD_INT 0
8564: PPUSH
8565: LD_INT 5
8567: PPUSH
8568: CALL_OW 12
8572: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
8573: LD_INT 1
8575: PPUSH
8576: LD_INT 1
8578: PPUSH
8579: LD_INT 15
8581: PPUSH
8582: CALL_OW 380
// hc_importance := 106 ;
8586: LD_ADDR_OWVAR 32
8590: PUSH
8591: LD_INT 106
8593: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
8594: LD_ADDR_OWVAR 26
8598: PUSH
8599: LD_STRING Blood God of 
8601: PUSH
8602: LD_OWVAR 19
8606: PUSH
8607: LD_VAR 0 1
8611: ARRAY
8612: STR
8613: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
8614: LD_ADDR_OWVAR 21
8618: PUSH
8619: LD_EXP 19
8623: PUSH
8624: LD_VAR 0 1
8628: ARRAY
8629: ST_TO_ADDR
// uc_side := side ;
8630: LD_ADDR_OWVAR 20
8634: PUSH
8635: LD_VAR 0 1
8639: ST_TO_ADDR
// hc_noskilllimit := true ;
8640: LD_ADDR_OWVAR 76
8644: PUSH
8645: LD_INT 1
8647: ST_TO_ADDR
// hc_agressivity := 50 ;
8648: LD_ADDR_OWVAR 35
8652: PUSH
8653: LD_INT 50
8655: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
8656: LD_ADDR_LOC 14
8660: PUSH
8661: LD_LOC 14
8665: PPUSH
8666: LD_VAR 0 1
8670: PPUSH
8671: CALL_OW 44
8675: PPUSH
8676: CALL_OW 1
8680: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
8681: LD_LOC 14
8685: PUSH
8686: LD_VAR 0 1
8690: ARRAY
8691: PPUSH
8692: LD_LOC 17
8696: PUSH
8697: LD_EXP 18
8701: PUSH
8702: LD_VAR 0 1
8706: ARRAY
8707: ARRAY
8708: PUSH
8709: LD_INT 1
8711: ARRAY
8712: PPUSH
8713: LD_LOC 17
8717: PUSH
8718: LD_EXP 18
8722: PUSH
8723: LD_VAR 0 1
8727: ARRAY
8728: ARRAY
8729: PUSH
8730: LD_INT 2
8732: ARRAY
8733: PPUSH
8734: LD_INT 10
8736: PPUSH
8737: LD_INT 0
8739: PPUSH
8740: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
8744: LD_LOC 14
8748: PUSH
8749: LD_VAR 0 1
8753: ARRAY
8754: PPUSH
8755: LD_INT 1
8757: PPUSH
8758: LD_INT 300
8760: PPUSH
8761: CALL_OW 239
// if not NoDialog then
8765: LD_VAR 0 2
8769: NOT
8770: IFFALSE 8790
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
8772: LD_LOC 14
8776: PUSH
8777: LD_VAR 0 1
8781: ARRAY
8782: PPUSH
8783: LD_STRING DLAwaken
8785: PPUSH
8786: CALL_OW 94
// end ;
8790: LD_VAR 0 3
8794: RET
// function DisplayTimeWithKills ; var x ; begin
8795: LD_INT 0
8797: PPUSH
8798: PPUSH
// ExtraStrings :=  ;
8799: LD_ADDR_EXP 56
8803: PUSH
8804: LD_STRING 
8806: ST_TO_ADDR
// for x = 1 to Side_Positions do
8807: LD_ADDR_VAR 0 2
8811: PUSH
8812: DOUBLE
8813: LD_INT 1
8815: DEC
8816: ST_TO_ADDR
8817: LD_EXP 18
8821: PUSH
8822: FOR_TO
8823: IFFALSE 9056
// if Side_Positions [ x ] then
8825: LD_EXP 18
8829: PUSH
8830: LD_VAR 0 2
8834: ARRAY
8835: IFFALSE 9054
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
8837: LD_ADDR_LOC 16
8841: PUSH
8842: LD_LOC 16
8846: PPUSH
8847: LD_VAR 0 2
8851: PPUSH
8852: LD_VAR 0 2
8856: PPUSH
8857: CALL_OW 515
8861: PUSH
8862: LD_LOC 15
8866: PUSH
8867: LD_VAR 0 2
8871: ARRAY
8872: MINUS
8873: PPUSH
8874: CALL_OW 1
8878: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
8879: LD_LOC 14
8883: PUSH
8884: LD_VAR 0 2
8888: ARRAY
8889: PUSH
8890: LD_INT 1
8892: NEG
8893: GREATER
8894: PUSH
8895: LD_LOC 14
8899: PUSH
8900: LD_VAR 0 2
8904: ARRAY
8905: PPUSH
8906: CALL_OW 300
8910: AND
8911: IFFALSE 8944
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
8913: LD_ADDR_EXP 56
8917: PUSH
8918: LD_EXP 56
8922: PUSH
8923: LD_STRING #godawoken
8925: PUSH
8926: LD_VAR 0 2
8930: PUSH
8931: LD_VAR 0 2
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: LIST
8940: ADD
8941: ST_TO_ADDR
8942: GO 9054
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
8944: LD_LOC 14
8948: PUSH
8949: LD_VAR 0 2
8953: ARRAY
8954: PUSH
8955: LD_INT 1
8957: NEG
8958: GREATER
8959: PUSH
8960: LD_LOC 14
8964: PUSH
8965: LD_VAR 0 2
8969: ARRAY
8970: PPUSH
8971: CALL_OW 301
8975: AND
8976: IFFALSE 9009
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
8978: LD_ADDR_EXP 56
8982: PUSH
8983: LD_EXP 56
8987: PUSH
8988: LD_STRING #goddied
8990: PUSH
8991: LD_VAR 0 2
8995: PUSH
8996: LD_VAR 0 2
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: ADD
9006: ST_TO_ADDR
9007: GO 9054
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
9009: LD_ADDR_EXP 56
9013: PUSH
9014: LD_EXP 56
9018: PUSH
9019: LD_STRING #godssacrifise
9021: PUSH
9022: LD_VAR 0 2
9026: PUSH
9027: LD_VAR 0 2
9031: PUSH
9032: LD_LOC 16
9036: PUSH
9037: LD_VAR 0 2
9041: ARRAY
9042: PUSH
9043: LD_INT 6
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: ADD
9053: ST_TO_ADDR
9054: GO 8822
9056: POP
9057: POP
// end ;
9058: LD_VAR 0 1
9062: RET
// export function InitBloodGods ; begin
9063: LD_INT 0
9065: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
9066: LD_ADDR_LOC 14
9070: PUSH
9071: LD_INT 1
9073: NEG
9074: PUSH
9075: LD_INT 1
9077: NEG
9078: PUSH
9079: LD_INT 1
9081: NEG
9082: PUSH
9083: LD_INT 1
9085: NEG
9086: PUSH
9087: LD_INT 1
9089: NEG
9090: PUSH
9091: LD_INT 1
9093: NEG
9094: PUSH
9095: LD_INT 1
9097: NEG
9098: PUSH
9099: LD_INT 1
9101: NEG
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9113: LD_ADDR_LOC 15
9117: PUSH
9118: LD_INT 0
9120: PUSH
9121: LD_INT 0
9123: PUSH
9124: LD_INT 0
9126: PUSH
9127: LD_INT 0
9129: PUSH
9130: LD_INT 0
9132: PUSH
9133: LD_INT 0
9135: PUSH
9136: LD_INT 0
9138: PUSH
9139: LD_INT 0
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9152: LD_ADDR_LOC 16
9156: PUSH
9157: LD_INT 0
9159: PUSH
9160: LD_INT 0
9162: PUSH
9163: LD_INT 0
9165: PUSH
9166: LD_INT 0
9168: PUSH
9169: LD_INT 0
9171: PUSH
9172: LD_INT 0
9174: PUSH
9175: LD_INT 0
9177: PUSH
9178: LD_INT 0
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
9191: LD_ADDR_LOC 17
9195: PUSH
9196: LD_INT 60
9198: PUSH
9199: LD_INT 47
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: LD_INT 82
9208: PUSH
9209: LD_INT 26
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 124
9218: PUSH
9219: LD_INT 45
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: LD_INT 147
9228: PUSH
9229: LD_INT 90
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: LD_INT 126
9238: PUSH
9239: LD_INT 112
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: LD_INT 84
9248: PUSH
9249: LD_INT 92
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 106
9258: PUSH
9259: LD_INT 73
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: LD_INT 106
9268: PUSH
9269: LD_INT 73
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: ST_TO_ADDR
// ClearHumansKilled ;
9286: CALL_OW 516
// enable ( 200 ) ;
9290: LD_INT 200
9292: ENABLE_MARKED
// end ; end_of_file
9293: LD_VAR 0 1
9297: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
9298: LD_INT 0
9300: PPUSH
9301: PPUSH
// if ( not IAmSpec ) then
9302: CALL_OW 531
9306: NOT
9307: IFFALSE 9323
// Result := Limits_Info ^  ;
9309: LD_ADDR_VAR 0 1
9313: PUSH
9314: LD_LOC 25
9318: PUSH
9319: LD_STRING 
9321: ADD
9322: ST_TO_ADDR
// for i := 1 to 8 do
9323: LD_ADDR_VAR 0 2
9327: PUSH
9328: DOUBLE
9329: LD_INT 1
9331: DEC
9332: ST_TO_ADDR
9333: LD_INT 8
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9382
// if Cheaters [ i ] then
9339: LD_LOC 26
9343: PUSH
9344: LD_VAR 0 2
9348: ARRAY
9349: IFFALSE 9380
// Result := Result ^ [ #Cheater , i , i ] ;
9351: LD_ADDR_VAR 0 1
9355: PUSH
9356: LD_VAR 0 1
9360: PUSH
9361: LD_STRING #Cheater
9363: PUSH
9364: LD_VAR 0 2
9368: PUSH
9369: LD_VAR 0 2
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: LIST
9378: ADD
9379: ST_TO_ADDR
9380: GO 9336
9382: POP
9383: POP
// end ;
9384: LD_VAR 0 1
9388: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9389: LD_INT 0
9391: PPUSH
9392: PPUSH
9393: PPUSH
9394: PPUSH
9395: PPUSH
// if game_type in [ 10 , 11 ] then
9396: LD_EXP 39
9400: PUSH
9401: LD_INT 10
9403: PUSH
9404: LD_INT 11
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: IN
9411: IFFALSE 9427
// def_game_rules = def_game_rules + 1 ;
9413: LD_ADDR_EXP 40
9417: PUSH
9418: LD_EXP 40
9422: PUSH
9423: LD_INT 1
9425: PLUS
9426: ST_TO_ADDR
// case def_game_rules of 0 :
9427: LD_EXP 40
9431: PUSH
9432: LD_INT 0
9434: DOUBLE
9435: EQUAL
9436: IFTRUE 9440
9438: GO 9445
9440: POP
// exit ; 1 :
9441: GO 11495
9443: GO 11395
9445: LD_INT 1
9447: DOUBLE
9448: EQUAL
9449: IFTRUE 9453
9451: GO 9669
9453: POP
// begin def_base_level := 2 ;
9454: LD_ADDR_EXP 41
9458: PUSH
9459: LD_INT 2
9461: ST_TO_ADDR
// def_amount_of_people := 11 ;
9462: LD_ADDR_EXP 42
9466: PUSH
9467: LD_INT 11
9469: ST_TO_ADDR
// def_skill_level := 1 ;
9470: LD_ADDR_EXP 43
9474: PUSH
9475: LD_INT 1
9477: ST_TO_ADDR
// def_starting_resources := 2 ;
9478: LD_ADDR_EXP 44
9482: PUSH
9483: LD_INT 2
9485: ST_TO_ADDR
// def_shipments_density := 26 ;
9486: LD_ADDR_EXP 45
9490: PUSH
9491: LD_INT 26
9493: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9494: LD_ADDR_EXP 46
9498: PUSH
9499: LD_INT 0
9501: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9502: LD_ADDR_EXP 47
9506: PUSH
9507: LD_INT 1
9509: ST_TO_ADDR
// def_shared_vision := 1 ;
9510: LD_ADDR_EXP 48
9514: PUSH
9515: LD_INT 1
9517: ST_TO_ADDR
// def_morale_flags := 3 ;
9518: LD_ADDR_EXP 49
9522: PUSH
9523: LD_INT 3
9525: ST_TO_ADDR
// def_siberite_detection := 1 ;
9526: LD_ADDR_EXP 50
9530: PUSH
9531: LD_INT 1
9533: ST_TO_ADDR
// def_people_respawning := 1 ;
9534: LD_ADDR_EXP 51
9538: PUSH
9539: LD_INT 1
9541: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9542: LD_ADDR_EXP 52
9546: PUSH
9547: LD_INT 1
9549: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9550: LD_ADDR_EXP 53
9554: PUSH
9555: LD_INT 0
9557: ST_TO_ADDR
// def_builduptime := 6 ;
9558: LD_ADDR_EXP 54
9562: PUSH
9563: LD_INT 6
9565: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9566: LD_ADDR_VAR 0 2
9570: PUSH
9571: EMPTY
9572: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9573: LD_ADDR_VAR 0 3
9577: PUSH
9578: EMPTY
9579: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9580: LD_ADDR_LOC 20
9584: PUSH
9585: EMPTY
9586: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9587: LD_ADDR_LOC 21
9591: PUSH
9592: EMPTY
9593: ST_TO_ADDR
// Banned_Controls := [ ] ;
9594: LD_ADDR_LOC 22
9598: PUSH
9599: EMPTY
9600: ST_TO_ADDR
// Banned_Engines := [ ] ;
9601: LD_ADDR_LOC 23
9605: PUSH
9606: EMPTY
9607: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9608: LD_ADDR_LOC 18
9612: PUSH
9613: LD_INT 37
9615: PUSH
9616: EMPTY
9617: LIST
9618: PUSH
9619: LD_INT 4
9621: PUSH
9622: LD_INT 5
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 31
9631: PUSH
9632: LD_INT 32
9634: PUSH
9635: LD_INT 33
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9648: LD_ADDR_LOC 19
9652: PUSH
9653: LD_INT 2
9655: PUSH
9656: LD_INT 2
9658: PUSH
9659: LD_INT 4
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: ST_TO_ADDR
// end ; 2 :
9667: GO 11395
9669: LD_INT 2
9671: DOUBLE
9672: EQUAL
9673: IFTRUE 9677
9675: GO 9886
9677: POP
// begin def_base_level := 1 ;
9678: LD_ADDR_EXP 41
9682: PUSH
9683: LD_INT 1
9685: ST_TO_ADDR
// def_amount_of_people := 11 ;
9686: LD_ADDR_EXP 42
9690: PUSH
9691: LD_INT 11
9693: ST_TO_ADDR
// def_skill_level := 3 ;
9694: LD_ADDR_EXP 43
9698: PUSH
9699: LD_INT 3
9701: ST_TO_ADDR
// def_starting_resources := 3 ;
9702: LD_ADDR_EXP 44
9706: PUSH
9707: LD_INT 3
9709: ST_TO_ADDR
// def_shipments_density := 51 ;
9710: LD_ADDR_EXP 45
9714: PUSH
9715: LD_INT 51
9717: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9718: LD_ADDR_EXP 46
9722: PUSH
9723: LD_INT 1
9725: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9726: LD_ADDR_EXP 47
9730: PUSH
9731: LD_INT 2
9733: ST_TO_ADDR
// def_shared_vision := 1 ;
9734: LD_ADDR_EXP 48
9738: PUSH
9739: LD_INT 1
9741: ST_TO_ADDR
// def_morale_flags := 0 ;
9742: LD_ADDR_EXP 49
9746: PUSH
9747: LD_INT 0
9749: ST_TO_ADDR
// def_siberite_detection := 1 ;
9750: LD_ADDR_EXP 50
9754: PUSH
9755: LD_INT 1
9757: ST_TO_ADDR
// def_people_respawning := 0 ;
9758: LD_ADDR_EXP 51
9762: PUSH
9763: LD_INT 0
9765: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9766: LD_ADDR_EXP 52
9770: PUSH
9771: LD_INT 0
9773: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9774: LD_ADDR_EXP 53
9778: PUSH
9779: LD_INT 0
9781: ST_TO_ADDR
// def_builduptime := 6 ;
9782: LD_ADDR_EXP 54
9786: PUSH
9787: LD_INT 6
9789: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9790: LD_ADDR_VAR 0 2
9794: PUSH
9795: LD_INT 1
9797: PUSH
9798: EMPTY
9799: LIST
9800: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9801: LD_ADDR_VAR 0 3
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9808: LD_ADDR_LOC 20
9812: PUSH
9813: EMPTY
9814: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9815: LD_ADDR_LOC 21
9819: PUSH
9820: EMPTY
9821: ST_TO_ADDR
// Banned_Controls := [ ] ;
9822: LD_ADDR_LOC 22
9826: PUSH
9827: EMPTY
9828: ST_TO_ADDR
// Banned_Engines := [ ] ;
9829: LD_ADDR_LOC 23
9833: PUSH
9834: EMPTY
9835: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9836: LD_ADDR_LOC 18
9840: PUSH
9841: LD_INT 4
9843: PUSH
9844: LD_INT 5
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 31
9853: PUSH
9854: LD_INT 32
9856: PUSH
9857: LD_INT 33
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: LIST
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9869: LD_ADDR_LOC 19
9873: PUSH
9874: LD_INT 1
9876: PUSH
9877: LD_INT 2
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: ST_TO_ADDR
// end ; 3 :
9884: GO 11395
9886: LD_INT 3
9888: DOUBLE
9889: EQUAL
9890: IFTRUE 9894
9892: GO 10137
9894: POP
// begin def_base_level := 1 ;
9895: LD_ADDR_EXP 41
9899: PUSH
9900: LD_INT 1
9902: ST_TO_ADDR
// def_amount_of_people := 11 ;
9903: LD_ADDR_EXP 42
9907: PUSH
9908: LD_INT 11
9910: ST_TO_ADDR
// def_skill_level := 3 ;
9911: LD_ADDR_EXP 43
9915: PUSH
9916: LD_INT 3
9918: ST_TO_ADDR
// def_starting_resources := 3 ;
9919: LD_ADDR_EXP 44
9923: PUSH
9924: LD_INT 3
9926: ST_TO_ADDR
// def_shipments_density := 1 ;
9927: LD_ADDR_EXP 45
9931: PUSH
9932: LD_INT 1
9934: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9935: LD_ADDR_EXP 46
9939: PUSH
9940: LD_INT 0
9942: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9943: LD_ADDR_EXP 47
9947: PUSH
9948: LD_INT 1
9950: ST_TO_ADDR
// def_shared_vision := 1 ;
9951: LD_ADDR_EXP 48
9955: PUSH
9956: LD_INT 1
9958: ST_TO_ADDR
// def_morale_flags := 0 ;
9959: LD_ADDR_EXP 49
9963: PUSH
9964: LD_INT 0
9966: ST_TO_ADDR
// def_siberite_detection := 1 ;
9967: LD_ADDR_EXP 50
9971: PUSH
9972: LD_INT 1
9974: ST_TO_ADDR
// def_people_respawning := 0 ;
9975: LD_ADDR_EXP 51
9979: PUSH
9980: LD_INT 0
9982: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9983: LD_ADDR_EXP 52
9987: PUSH
9988: LD_INT 2
9990: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9991: LD_ADDR_EXP 53
9995: PUSH
9996: LD_INT 0
9998: ST_TO_ADDR
// def_builduptime := 6 ;
9999: LD_ADDR_EXP 54
10003: PUSH
10004: LD_INT 6
10006: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10007: LD_ADDR_VAR 0 2
10011: PUSH
10012: LD_INT 23
10014: PUSH
10015: EMPTY
10016: LIST
10017: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
10018: LD_ADDR_VAR 0 3
10022: PUSH
10023: LD_INT 2
10025: PUSH
10026: LD_INT 37
10028: PUSH
10029: LD_INT 32
10031: PUSH
10032: LD_INT 33
10034: PUSH
10035: LD_INT 36
10037: PUSH
10038: LD_INT 16
10040: PUSH
10041: LD_INT 23
10043: PUSH
10044: LD_INT 21
10046: PUSH
10047: LD_INT 18
10049: PUSH
10050: LD_INT 22
10052: PUSH
10053: LD_INT 20
10055: PUSH
10056: LD_INT 19
10058: PUSH
10059: LD_INT 25
10061: PUSH
10062: LD_INT 17
10064: PUSH
10065: LD_INT 24
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10085: LD_ADDR_LOC 20
10089: PUSH
10090: EMPTY
10091: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10092: LD_ADDR_LOC 21
10096: PUSH
10097: EMPTY
10098: ST_TO_ADDR
// Banned_Controls := [ ] ;
10099: LD_ADDR_LOC 22
10103: PUSH
10104: EMPTY
10105: ST_TO_ADDR
// Banned_Engines := [ ] ;
10106: LD_ADDR_LOC 23
10110: PUSH
10111: EMPTY
10112: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10113: LD_ADDR_LOC 18
10117: PUSH
10118: EMPTY
10119: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10120: LD_ADDR_LOC 19
10124: PUSH
10125: EMPTY
10126: ST_TO_ADDR
// No_Mechs := true ;
10127: LD_ADDR_EXP 55
10131: PUSH
10132: LD_INT 1
10134: ST_TO_ADDR
// end ; 4 :
10135: GO 11395
10137: LD_INT 4
10139: DOUBLE
10140: EQUAL
10141: IFTRUE 10145
10143: GO 10320
10145: POP
// begin def_base_level := 1 ;
10146: LD_ADDR_EXP 41
10150: PUSH
10151: LD_INT 1
10153: ST_TO_ADDR
// def_amount_of_people := 11 ;
10154: LD_ADDR_EXP 42
10158: PUSH
10159: LD_INT 11
10161: ST_TO_ADDR
// def_skill_level := 3 ;
10162: LD_ADDR_EXP 43
10166: PUSH
10167: LD_INT 3
10169: ST_TO_ADDR
// def_starting_resources := 3 ;
10170: LD_ADDR_EXP 44
10174: PUSH
10175: LD_INT 3
10177: ST_TO_ADDR
// def_shipments_density := 2 ;
10178: LD_ADDR_EXP 45
10182: PUSH
10183: LD_INT 2
10185: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10186: LD_ADDR_EXP 46
10190: PUSH
10191: LD_INT 1
10193: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10194: LD_ADDR_EXP 47
10198: PUSH
10199: LD_INT 2
10201: ST_TO_ADDR
// def_shared_vision := 1 ;
10202: LD_ADDR_EXP 48
10206: PUSH
10207: LD_INT 1
10209: ST_TO_ADDR
// def_morale_flags := 0 ;
10210: LD_ADDR_EXP 49
10214: PUSH
10215: LD_INT 0
10217: ST_TO_ADDR
// def_siberite_detection := 1 ;
10218: LD_ADDR_EXP 50
10222: PUSH
10223: LD_INT 1
10225: ST_TO_ADDR
// def_people_respawning := 0 ;
10226: LD_ADDR_EXP 51
10230: PUSH
10231: LD_INT 0
10233: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10234: LD_ADDR_EXP 52
10238: PUSH
10239: LD_INT 0
10241: ST_TO_ADDR
// def_siberite_bomb := 1 ;
10242: LD_ADDR_EXP 53
10246: PUSH
10247: LD_INT 1
10249: ST_TO_ADDR
// def_builduptime := 11 ;
10250: LD_ADDR_EXP 54
10254: PUSH
10255: LD_INT 11
10257: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10258: LD_ADDR_VAR 0 2
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: EMPTY
10267: LIST
10268: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10269: LD_ADDR_VAR 0 3
10273: PUSH
10274: EMPTY
10275: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10276: LD_ADDR_LOC 20
10280: PUSH
10281: EMPTY
10282: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10283: LD_ADDR_LOC 21
10287: PUSH
10288: EMPTY
10289: ST_TO_ADDR
// Banned_Controls := [ ] ;
10290: LD_ADDR_LOC 22
10294: PUSH
10295: EMPTY
10296: ST_TO_ADDR
// Banned_Engines := [ ] ;
10297: LD_ADDR_LOC 23
10301: PUSH
10302: EMPTY
10303: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10304: LD_ADDR_LOC 18
10308: PUSH
10309: EMPTY
10310: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10311: LD_ADDR_LOC 19
10315: PUSH
10316: EMPTY
10317: ST_TO_ADDR
// end ; 5 :
10318: GO 11395
10320: LD_INT 5
10322: DOUBLE
10323: EQUAL
10324: IFTRUE 10328
10326: GO 10577
10328: POP
// begin def_base_level := 0 ;
10329: LD_ADDR_EXP 41
10333: PUSH
10334: LD_INT 0
10336: ST_TO_ADDR
// def_amount_of_people := 5 ;
10337: LD_ADDR_EXP 42
10341: PUSH
10342: LD_INT 5
10344: ST_TO_ADDR
// def_skill_level := 0 ;
10345: LD_ADDR_EXP 43
10349: PUSH
10350: LD_INT 0
10352: ST_TO_ADDR
// def_starting_resources := 0 ;
10353: LD_ADDR_EXP 44
10357: PUSH
10358: LD_INT 0
10360: ST_TO_ADDR
// def_shipments_density := 0 ;
10361: LD_ADDR_EXP 45
10365: PUSH
10366: LD_INT 0
10368: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10369: LD_ADDR_EXP 46
10373: PUSH
10374: LD_INT 0
10376: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10377: LD_ADDR_EXP 47
10381: PUSH
10382: LD_INT 0
10384: ST_TO_ADDR
// def_shared_vision := 1 ;
10385: LD_ADDR_EXP 48
10389: PUSH
10390: LD_INT 1
10392: ST_TO_ADDR
// def_morale_flags := 0 ;
10393: LD_ADDR_EXP 49
10397: PUSH
10398: LD_INT 0
10400: ST_TO_ADDR
// def_siberite_detection := 0 ;
10401: LD_ADDR_EXP 50
10405: PUSH
10406: LD_INT 0
10408: ST_TO_ADDR
// def_people_respawning := 1 ;
10409: LD_ADDR_EXP 51
10413: PUSH
10414: LD_INT 1
10416: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10417: LD_ADDR_EXP 52
10421: PUSH
10422: LD_INT 1
10424: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10425: LD_ADDR_EXP 53
10429: PUSH
10430: LD_INT 0
10432: ST_TO_ADDR
// def_builduptime := 0 ;
10433: LD_ADDR_EXP 54
10437: PUSH
10438: LD_INT 0
10440: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10441: LD_ADDR_VAR 0 2
10445: PUSH
10446: LD_INT 10
10448: PUSH
10449: LD_INT 3
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10456: LD_ADDR_VAR 0 3
10460: PUSH
10461: LD_INT 12
10463: PUSH
10464: LD_INT 11
10466: PUSH
10467: LD_INT 14
10469: PUSH
10470: LD_INT 13
10472: PUSH
10473: LD_INT 5
10475: PUSH
10476: LD_INT 24
10478: PUSH
10479: LD_INT 21
10481: PUSH
10482: LD_INT 33
10484: PUSH
10485: LD_INT 36
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10499: LD_ADDR_LOC 20
10503: PUSH
10504: LD_INT 31
10506: PUSH
10507: EMPTY
10508: LIST
10509: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10510: LD_ADDR_LOC 21
10514: PUSH
10515: EMPTY
10516: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10517: LD_ADDR_LOC 22
10521: PUSH
10522: LD_INT 2
10524: PUSH
10525: EMPTY
10526: LIST
10527: ST_TO_ADDR
// Banned_Engines := [ ] ;
10528: LD_ADDR_LOC 23
10532: PUSH
10533: EMPTY
10534: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10535: LD_ADDR_LOC 18
10539: PUSH
10540: LD_INT 4
10542: PUSH
10543: EMPTY
10544: LIST
10545: PUSH
10546: LD_INT 31
10548: PUSH
10549: LD_INT 32
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10560: LD_ADDR_LOC 19
10564: PUSH
10565: LD_INT 1
10567: PUSH
10568: LD_INT 1
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: ST_TO_ADDR
// end ; 6 :
10575: GO 11395
10577: LD_INT 6
10579: DOUBLE
10580: EQUAL
10581: IFTRUE 10585
10583: GO 10788
10585: POP
// begin def_base_level := 1 ;
10586: LD_ADDR_EXP 41
10590: PUSH
10591: LD_INT 1
10593: ST_TO_ADDR
// def_amount_of_people := 11 ;
10594: LD_ADDR_EXP 42
10598: PUSH
10599: LD_INT 11
10601: ST_TO_ADDR
// def_skill_level := 3 ;
10602: LD_ADDR_EXP 43
10606: PUSH
10607: LD_INT 3
10609: ST_TO_ADDR
// def_starting_resources := 3 ;
10610: LD_ADDR_EXP 44
10614: PUSH
10615: LD_INT 3
10617: ST_TO_ADDR
// def_shipments_density := 1 ;
10618: LD_ADDR_EXP 45
10622: PUSH
10623: LD_INT 1
10625: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10626: LD_ADDR_EXP 46
10630: PUSH
10631: LD_INT 0
10633: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10634: LD_ADDR_EXP 47
10638: PUSH
10639: LD_INT 1
10641: ST_TO_ADDR
// def_shared_vision := 1 ;
10642: LD_ADDR_EXP 48
10646: PUSH
10647: LD_INT 1
10649: ST_TO_ADDR
// def_morale_flags := 0 ;
10650: LD_ADDR_EXP 49
10654: PUSH
10655: LD_INT 0
10657: ST_TO_ADDR
// def_siberite_detection := 1 ;
10658: LD_ADDR_EXP 50
10662: PUSH
10663: LD_INT 1
10665: ST_TO_ADDR
// def_people_respawning := 2 ;
10666: LD_ADDR_EXP 51
10670: PUSH
10671: LD_INT 2
10673: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10674: LD_ADDR_EXP 52
10678: PUSH
10679: LD_INT 1
10681: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10682: LD_ADDR_EXP 53
10686: PUSH
10687: LD_INT 0
10689: ST_TO_ADDR
// def_builduptime := 6 ;
10690: LD_ADDR_EXP 54
10694: PUSH
10695: LD_INT 6
10697: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10698: LD_ADDR_VAR 0 2
10702: PUSH
10703: LD_INT 23
10705: PUSH
10706: EMPTY
10707: LIST
10708: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10709: LD_ADDR_VAR 0 3
10713: PUSH
10714: LD_INT 2
10716: PUSH
10717: LD_INT 37
10719: PUSH
10720: LD_INT 31
10722: PUSH
10723: LD_INT 32
10725: PUSH
10726: LD_INT 33
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10736: LD_ADDR_LOC 20
10740: PUSH
10741: EMPTY
10742: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10743: LD_ADDR_LOC 21
10747: PUSH
10748: EMPTY
10749: ST_TO_ADDR
// Banned_Controls := [ ] ;
10750: LD_ADDR_LOC 22
10754: PUSH
10755: EMPTY
10756: ST_TO_ADDR
// Banned_Engines := [ ] ;
10757: LD_ADDR_LOC 23
10761: PUSH
10762: EMPTY
10763: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10764: LD_ADDR_LOC 18
10768: PUSH
10769: EMPTY
10770: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10771: LD_ADDR_LOC 19
10775: PUSH
10776: EMPTY
10777: ST_TO_ADDR
// No_Mechs := true ;
10778: LD_ADDR_EXP 55
10782: PUSH
10783: LD_INT 1
10785: ST_TO_ADDR
// end ; 7 :
10786: GO 11395
10788: LD_INT 7
10790: DOUBLE
10791: EQUAL
10792: IFTRUE 10796
10794: GO 10994
10796: POP
// begin def_base_level := 1 ;
10797: LD_ADDR_EXP 41
10801: PUSH
10802: LD_INT 1
10804: ST_TO_ADDR
// def_amount_of_people := 20 ;
10805: LD_ADDR_EXP 42
10809: PUSH
10810: LD_INT 20
10812: ST_TO_ADDR
// def_skill_level := 3 ;
10813: LD_ADDR_EXP 43
10817: PUSH
10818: LD_INT 3
10820: ST_TO_ADDR
// def_starting_resources := 3 ;
10821: LD_ADDR_EXP 44
10825: PUSH
10826: LD_INT 3
10828: ST_TO_ADDR
// def_shipments_density := 1 ;
10829: LD_ADDR_EXP 45
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10837: LD_ADDR_EXP 46
10841: PUSH
10842: LD_INT 1
10844: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10845: LD_ADDR_EXP 47
10849: PUSH
10850: LD_INT 2
10852: ST_TO_ADDR
// def_shared_vision := 1 ;
10853: LD_ADDR_EXP 48
10857: PUSH
10858: LD_INT 1
10860: ST_TO_ADDR
// def_morale_flags := 0 ;
10861: LD_ADDR_EXP 49
10865: PUSH
10866: LD_INT 0
10868: ST_TO_ADDR
// def_siberite_detection := 1 ;
10869: LD_ADDR_EXP 50
10873: PUSH
10874: LD_INT 1
10876: ST_TO_ADDR
// def_people_respawning := 0 ;
10877: LD_ADDR_EXP 51
10881: PUSH
10882: LD_INT 0
10884: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10885: LD_ADDR_EXP 52
10889: PUSH
10890: LD_INT 1
10892: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10893: LD_ADDR_EXP 53
10897: PUSH
10898: LD_INT 0
10900: ST_TO_ADDR
// def_builduptime := 6 ;
10901: LD_ADDR_EXP 54
10905: PUSH
10906: LD_INT 6
10908: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10909: LD_ADDR_VAR 0 2
10913: PUSH
10914: LD_INT 23
10916: PUSH
10917: EMPTY
10918: LIST
10919: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
10920: LD_ADDR_VAR 0 3
10924: PUSH
10925: LD_INT 37
10927: PUSH
10928: EMPTY
10929: LIST
10930: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10931: LD_ADDR_LOC 20
10935: PUSH
10936: EMPTY
10937: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10938: LD_ADDR_LOC 21
10942: PUSH
10943: EMPTY
10944: ST_TO_ADDR
// Banned_Controls := [ ] ;
10945: LD_ADDR_LOC 22
10949: PUSH
10950: EMPTY
10951: ST_TO_ADDR
// Banned_Engines := [ ] ;
10952: LD_ADDR_LOC 23
10956: PUSH
10957: EMPTY
10958: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10959: LD_ADDR_LOC 18
10963: PUSH
10964: LD_INT 31
10966: PUSH
10967: LD_INT 32
10969: PUSH
10970: LD_INT 33
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: PUSH
10978: EMPTY
10979: LIST
10980: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
10981: LD_ADDR_LOC 19
10985: PUSH
10986: LD_INT 10
10988: PUSH
10989: EMPTY
10990: LIST
10991: ST_TO_ADDR
// end ; 8 :
10992: GO 11395
10994: LD_INT 8
10996: DOUBLE
10997: EQUAL
10998: IFTRUE 11002
11000: GO 11394
11002: POP
// begin def_base_level := 0 ;
11003: LD_ADDR_EXP 41
11007: PUSH
11008: LD_INT 0
11010: ST_TO_ADDR
// def_amount_of_people := 8 ;
11011: LD_ADDR_EXP 42
11015: PUSH
11016: LD_INT 8
11018: ST_TO_ADDR
// def_skill_level := 0 ;
11019: LD_ADDR_EXP 43
11023: PUSH
11024: LD_INT 0
11026: ST_TO_ADDR
// def_starting_resources := 2 ;
11027: LD_ADDR_EXP 44
11031: PUSH
11032: LD_INT 2
11034: ST_TO_ADDR
// def_shipments_density := 1 ;
11035: LD_ADDR_EXP 45
11039: PUSH
11040: LD_INT 1
11042: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11043: LD_ADDR_EXP 46
11047: PUSH
11048: LD_INT 0
11050: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11051: LD_ADDR_EXP 47
11055: PUSH
11056: LD_INT 0
11058: ST_TO_ADDR
// def_shared_vision := 1 ;
11059: LD_ADDR_EXP 48
11063: PUSH
11064: LD_INT 1
11066: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
11067: LD_ADDR_EXP 49
11071: PUSH
11072: LD_INT 0
11074: PPUSH
11075: LD_INT 2
11077: PPUSH
11078: CALL_OW 12
11082: ST_TO_ADDR
// def_siberite_detection := 0 ;
11083: LD_ADDR_EXP 50
11087: PUSH
11088: LD_INT 0
11090: ST_TO_ADDR
// def_people_respawning := 0 ;
11091: LD_ADDR_EXP 51
11095: PUSH
11096: LD_INT 0
11098: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11099: LD_ADDR_EXP 52
11103: PUSH
11104: LD_INT 2
11106: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11107: LD_ADDR_EXP 53
11111: PUSH
11112: LD_INT 0
11114: ST_TO_ADDR
// def_builduptime := 0 ;
11115: LD_ADDR_EXP 54
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
11123: LD_ADDR_VAR 0 2
11127: PUSH
11128: LD_INT 23
11130: PUSH
11131: LD_INT 20
11133: PUSH
11134: LD_INT 40
11136: PUSH
11137: LD_INT 47
11139: PUSH
11140: LD_INT 46
11142: PUSH
11143: LD_INT 39
11145: PUSH
11146: LD_INT 71
11148: PUSH
11149: LD_INT 34
11151: PUSH
11152: LD_INT 41
11154: PUSH
11155: LD_INT 44
11157: PUSH
11158: LD_INT 17
11160: PUSH
11161: LD_INT 16
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
11178: LD_ADDR_VAR 0 3
11182: PUSH
11183: LD_INT 37
11185: PUSH
11186: LD_INT 5
11188: PUSH
11189: LD_INT 13
11191: PUSH
11192: LD_INT 34
11194: PUSH
11195: LD_INT 12
11197: PUSH
11198: LD_INT 15
11200: PUSH
11201: LD_INT 11
11203: PUSH
11204: LD_INT 14
11206: PUSH
11207: LD_INT 29
11209: PUSH
11210: LD_INT 30
11212: PUSH
11213: LD_INT 28
11215: PUSH
11216: LD_INT 24
11218: PUSH
11219: LD_INT 25
11221: PUSH
11222: LD_INT 20
11224: PUSH
11225: LD_INT 21
11227: PUSH
11228: LD_INT 22
11230: PUSH
11231: LD_INT 36
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11253: LD_ADDR_LOC 20
11257: PUSH
11258: EMPTY
11259: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
11260: LD_ADDR_LOC 21
11264: PUSH
11265: LD_INT 14
11267: PUSH
11268: EMPTY
11269: LIST
11270: ST_TO_ADDR
// Banned_Controls := [ ] ;
11271: LD_ADDR_LOC 22
11275: PUSH
11276: EMPTY
11277: ST_TO_ADDR
// Banned_Engines := [ ] ;
11278: LD_ADDR_LOC 23
11282: PUSH
11283: EMPTY
11284: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
11285: LD_ADDR_LOC 18
11289: PUSH
11290: LD_INT 31
11292: PUSH
11293: LD_INT 32
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 4
11302: PUSH
11303: EMPTY
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
11310: LD_ADDR_LOC 19
11314: PUSH
11315: LD_INT 2
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: ST_TO_ADDR
// for i := 1 to 8 do
11325: LD_ADDR_VAR 0 4
11329: PUSH
11330: DOUBLE
11331: LD_INT 1
11333: DEC
11334: ST_TO_ADDR
11335: LD_INT 8
11337: PUSH
11338: FOR_TO
11339: IFFALSE 11390
// if ( Side_Nations [ i ] = 3 ) then
11341: LD_EXP 19
11345: PUSH
11346: LD_VAR 0 4
11350: ARRAY
11351: PUSH
11352: LD_INT 3
11354: EQUAL
11355: IFFALSE 11388
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11357: LD_ADDR_EXP 19
11361: PUSH
11362: LD_EXP 19
11366: PPUSH
11367: LD_VAR 0 4
11371: PPUSH
11372: LD_INT 1
11374: PPUSH
11375: LD_INT 2
11377: PPUSH
11378: CALL_OW 12
11382: PPUSH
11383: CALL_OW 1
11387: ST_TO_ADDR
11388: GO 11338
11390: POP
11391: POP
// end ; end ;
11392: GO 11395
11394: POP
// for i := 1 to 8 do
11395: LD_ADDR_VAR 0 4
11399: PUSH
11400: DOUBLE
11401: LD_INT 1
11403: DEC
11404: ST_TO_ADDR
11405: LD_INT 8
11407: PUSH
11408: FOR_TO
11409: IFFALSE 11493
// if Side_Positions [ i ] then
11411: LD_EXP 18
11415: PUSH
11416: LD_VAR 0 4
11420: ARRAY
11421: IFFALSE 11491
// begin for j in Unavailable_Techs do
11423: LD_ADDR_VAR 0 5
11427: PUSH
11428: LD_VAR 0 2
11432: PUSH
11433: FOR_IN
11434: IFFALSE 11455
// SetTech ( j , i , 0 ) ;
11436: LD_VAR 0 5
11440: PPUSH
11441: LD_VAR 0 4
11445: PPUSH
11446: LD_INT 0
11448: PPUSH
11449: CALL_OW 322
11453: GO 11433
11455: POP
11456: POP
// for j in Unavailable_Builds do
11457: LD_ADDR_VAR 0 5
11461: PUSH
11462: LD_VAR 0 3
11466: PUSH
11467: FOR_IN
11468: IFFALSE 11489
// SetRestrict ( j , i , 0 ) ;
11470: LD_VAR 0 5
11474: PPUSH
11475: LD_VAR 0 4
11479: PPUSH
11480: LD_INT 0
11482: PPUSH
11483: CALL_OW 324
11487: GO 11467
11489: POP
11490: POP
// end ;
11491: GO 11408
11493: POP
11494: POP
// end ;
11495: LD_VAR 0 1
11499: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11500: LD_INT 0
11502: PPUSH
11503: PPUSH
11504: PPUSH
11505: PPUSH
11506: PPUSH
11507: PPUSH
11508: PPUSH
// for i := 1 to Restricted_Builds do
11509: LD_ADDR_VAR 0 2
11513: PUSH
11514: DOUBLE
11515: LD_INT 1
11517: DEC
11518: ST_TO_ADDR
11519: LD_LOC 18
11523: PUSH
11524: FOR_TO
11525: IFFALSE 11835
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11527: LD_LOC 18
11531: PUSH
11532: LD_VAR 0 2
11536: ARRAY
11537: PUSH
11538: LD_INT 1
11540: ARRAY
11541: PUSH
11542: LD_INT 31
11544: DOUBLE
11545: EQUAL
11546: IFTRUE 11562
11548: LD_INT 32
11550: DOUBLE
11551: EQUAL
11552: IFTRUE 11562
11554: LD_INT 33
11556: DOUBLE
11557: EQUAL
11558: IFTRUE 11562
11560: GO 11573
11562: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11563: LD_ADDR_VAR 0 6
11567: PUSH
11568: LD_STRING #Turrets
11570: ST_TO_ADDR
11571: GO 11618
11573: LD_INT 4
11575: DOUBLE
11576: EQUAL
11577: IFTRUE 11587
11579: LD_INT 5
11581: DOUBLE
11582: EQUAL
11583: IFTRUE 11587
11585: GO 11598
11587: POP
// btype := #Armouries ; b_Behemoth :
11588: LD_ADDR_VAR 0 6
11592: PUSH
11593: LD_STRING #Armouries
11595: ST_TO_ADDR
11596: GO 11618
11598: LD_INT 37
11600: DOUBLE
11601: EQUAL
11602: IFTRUE 11606
11604: GO 11617
11606: POP
// btype := #Behemoths ; end ;
11607: LD_ADDR_VAR 0 6
11611: PUSH
11612: LD_STRING #Behemoths
11614: ST_TO_ADDR
11615: GO 11618
11617: POP
// list := [ ] ;
11618: LD_ADDR_VAR 0 7
11622: PUSH
11623: EMPTY
11624: ST_TO_ADDR
// for j := 1 to 8 do
11625: LD_ADDR_VAR 0 3
11629: PUSH
11630: DOUBLE
11631: LD_INT 1
11633: DEC
11634: ST_TO_ADDR
11635: LD_INT 8
11637: PUSH
11638: FOR_TO
11639: IFFALSE 11732
// if Side_Positions [ j ] then
11641: LD_EXP 18
11645: PUSH
11646: LD_VAR 0 3
11650: ARRAY
11651: IFFALSE 11730
// begin amount := 0 ;
11653: LD_ADDR_VAR 0 5
11657: PUSH
11658: LD_INT 0
11660: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11661: LD_ADDR_VAR 0 4
11665: PUSH
11666: LD_LOC 18
11670: PUSH
11671: LD_VAR 0 2
11675: ARRAY
11676: PUSH
11677: FOR_IN
11678: IFFALSE 11726
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11680: LD_ADDR_VAR 0 5
11684: PUSH
11685: LD_VAR 0 5
11689: PUSH
11690: LD_INT 22
11692: PUSH
11693: LD_VAR 0 3
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PUSH
11702: LD_INT 30
11704: PUSH
11705: LD_VAR 0 4
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PPUSH
11718: CALL_OW 69
11722: PLUS
11723: ST_TO_ADDR
11724: GO 11677
11726: POP
11727: POP
// break ;
11728: GO 11732
// end ;
11730: GO 11638
11732: POP
11733: POP
// list := [ ] ;
11734: LD_ADDR_VAR 0 7
11738: PUSH
11739: EMPTY
11740: ST_TO_ADDR
// for j := 1 to 8 do
11741: LD_ADDR_VAR 0 3
11745: PUSH
11746: DOUBLE
11747: LD_INT 1
11749: DEC
11750: ST_TO_ADDR
11751: LD_INT 8
11753: PUSH
11754: FOR_TO
11755: IFFALSE 11775
// list := list ^ amount ;
11757: LD_ADDR_VAR 0 7
11761: PUSH
11762: LD_VAR 0 7
11766: PUSH
11767: LD_VAR 0 5
11771: ADD
11772: ST_TO_ADDR
11773: GO 11754
11775: POP
11776: POP
// Already_Built := Already_Built ^ [ list ] ;
11777: LD_ADDR_LOC 24
11781: PUSH
11782: LD_LOC 24
11786: PUSH
11787: LD_VAR 0 7
11791: PUSH
11792: EMPTY
11793: LIST
11794: ADD
11795: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11796: LD_ADDR_LOC 25
11800: PUSH
11801: LD_LOC 25
11805: PUSH
11806: LD_VAR 0 6
11810: PUSH
11811: LD_VAR 0 5
11815: PUSH
11816: LD_LOC 19
11820: PUSH
11821: LD_VAR 0 2
11825: ARRAY
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: LIST
11831: ADD
11832: ST_TO_ADDR
// end ;
11833: GO 11524
11835: POP
11836: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11837: LD_ADDR_LOC 26
11841: PUSH
11842: LD_INT 0
11844: PUSH
11845: LD_INT 0
11847: PUSH
11848: LD_INT 0
11850: PUSH
11851: LD_INT 0
11853: PUSH
11854: LD_INT 0
11856: PUSH
11857: LD_INT 0
11859: PUSH
11860: LD_INT 0
11862: PUSH
11863: LD_INT 0
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: ST_TO_ADDR
// if Limits_Info then
11876: LD_LOC 25
11880: IFFALSE 11896
// Limits_Info := #Limits ^ Limits_Info ;
11882: LD_ADDR_LOC 25
11886: PUSH
11887: LD_STRING #Limits
11889: PUSH
11890: LD_LOC 25
11894: ADD
11895: ST_TO_ADDR
// end ;
11896: LD_VAR 0 1
11900: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
11901: LD_INT 0
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
// for i := 1 to Restricted_Builds do
11907: LD_ADDR_VAR 0 7
11911: PUSH
11912: DOUBLE
11913: LD_INT 1
11915: DEC
11916: ST_TO_ADDR
11917: LD_LOC 18
11921: PUSH
11922: FOR_TO
11923: IFFALSE 12346
// if BType in Restricted_Builds [ i ] then
11925: LD_VAR 0 2
11929: PUSH
11930: LD_LOC 18
11934: PUSH
11935: LD_VAR 0 7
11939: ARRAY
11940: IN
11941: IFFALSE 12344
// begin if old_side then
11943: LD_VAR 0 4
11947: IFFALSE 12073
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
11949: LD_LOC 24
11953: PUSH
11954: LD_VAR 0 7
11958: ARRAY
11959: PUSH
11960: LD_VAR 0 3
11964: ARRAY
11965: PUSH
11966: LD_VAR 0 5
11970: PLUS
11971: PUSH
11972: LD_LOC 19
11976: PUSH
11977: LD_VAR 0 7
11981: ARRAY
11982: GREATER
11983: IFFALSE 12009
// begin SetSide ( un , old_side ) ;
11985: LD_VAR 0 1
11989: PPUSH
11990: LD_VAR 0 4
11994: PPUSH
11995: CALL_OW 235
// count := 0 ;
11999: LD_ADDR_VAR 0 5
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// end else
12007: GO 12073
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
12009: LD_ADDR_LOC 24
12013: PUSH
12014: LD_LOC 24
12018: PPUSH
12019: LD_VAR 0 7
12023: PPUSH
12024: LD_LOC 24
12028: PUSH
12029: LD_VAR 0 7
12033: ARRAY
12034: PPUSH
12035: LD_VAR 0 4
12039: PPUSH
12040: LD_LOC 24
12044: PUSH
12045: LD_VAR 0 7
12049: ARRAY
12050: PUSH
12051: LD_VAR 0 4
12055: ARRAY
12056: PUSH
12057: LD_VAR 0 5
12061: MINUS
12062: PPUSH
12063: CALL_OW 1
12067: PPUSH
12068: CALL_OW 1
12072: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
12073: LD_ADDR_LOC 24
12077: PUSH
12078: LD_LOC 24
12082: PPUSH
12083: LD_VAR 0 7
12087: PPUSH
12088: LD_LOC 24
12092: PUSH
12093: LD_VAR 0 7
12097: ARRAY
12098: PPUSH
12099: LD_VAR 0 3
12103: PPUSH
12104: LD_LOC 24
12108: PUSH
12109: LD_VAR 0 7
12113: ARRAY
12114: PUSH
12115: LD_VAR 0 3
12119: ARRAY
12120: PUSH
12121: LD_VAR 0 5
12125: PLUS
12126: PPUSH
12127: CALL_OW 1
12131: PPUSH
12132: CALL_OW 1
12136: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
12137: LD_VAR 0 5
12141: PUSH
12142: LD_INT 0
12144: NONEQUAL
12145: PUSH
12146: LD_VAR 0 3
12150: PUSH
12151: LD_OWVAR 2
12155: EQUAL
12156: AND
12157: IFFALSE 12200
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
12159: LD_ADDR_LOC 25
12163: PUSH
12164: LD_LOC 25
12168: PPUSH
12169: LD_INT 3
12171: PUSH
12172: LD_VAR 0 7
12176: MUL
12177: PPUSH
12178: LD_LOC 24
12182: PUSH
12183: LD_VAR 0 7
12187: ARRAY
12188: PUSH
12189: LD_VAR 0 3
12193: ARRAY
12194: PPUSH
12195: CALL_OW 1
12199: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
12200: LD_LOC 24
12204: PUSH
12205: LD_VAR 0 7
12209: ARRAY
12210: PUSH
12211: LD_VAR 0 3
12215: ARRAY
12216: PUSH
12217: LD_LOC 19
12221: PUSH
12222: LD_VAR 0 7
12226: ARRAY
12227: GREATER
12228: IFFALSE 12255
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
12230: LD_ADDR_LOC 26
12234: PUSH
12235: LD_LOC 26
12239: PPUSH
12240: LD_VAR 0 3
12244: PPUSH
12245: LD_INT 1
12247: PPUSH
12248: CALL_OW 1
12252: ST_TO_ADDR
// end else
12253: GO 12342
// begin for j := 1 to Restricted_Builds do
12255: LD_ADDR_VAR 0 8
12259: PUSH
12260: DOUBLE
12261: LD_INT 1
12263: DEC
12264: ST_TO_ADDR
12265: LD_LOC 18
12269: PUSH
12270: FOR_TO
12271: IFFALSE 12315
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
12273: LD_LOC 24
12277: PUSH
12278: LD_VAR 0 8
12282: ARRAY
12283: PUSH
12284: LD_VAR 0 3
12288: ARRAY
12289: PUSH
12290: LD_LOC 19
12294: PUSH
12295: LD_VAR 0 8
12299: ARRAY
12300: GREATER
12301: IFFALSE 12313
// begin Is_Cheater := true ;
12303: LD_ADDR_VAR 0 9
12307: PUSH
12308: LD_INT 1
12310: ST_TO_ADDR
// break ;
12311: GO 12315
// end ;
12313: GO 12270
12315: POP
12316: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
12317: LD_ADDR_LOC 26
12321: PUSH
12322: LD_LOC 26
12326: PPUSH
12327: LD_VAR 0 3
12331: PPUSH
12332: LD_VAR 0 9
12336: PPUSH
12337: CALL_OW 1
12341: ST_TO_ADDR
// end ; break ;
12342: GO 12346
// end ;
12344: GO 11922
12346: POP
12347: POP
// end ;
12348: LD_VAR 0 6
12352: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12353: LD_VAR 0 5
12357: PUSH
12358: LD_LOC 20
12362: IN
12363: PUSH
12364: LD_VAR 0 2
12368: PUSH
12369: LD_LOC 21
12373: IN
12374: OR
12375: PUSH
12376: LD_VAR 0 4
12380: PUSH
12381: LD_LOC 22
12385: IN
12386: OR
12387: PUSH
12388: LD_VAR 0 3
12392: PUSH
12393: LD_LOC 23
12397: IN
12398: OR
12399: IFFALSE 12410
// ComCancel ( factory ) ;
12401: LD_VAR 0 1
12405: PPUSH
12406: CALL_OW 127
// end ;
12410: PPOPN 5
12412: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12413: LD_VAR 0 2
12417: PUSH
12418: LD_LOC 20
12422: IN
12423: IFFALSE 12434
// ComCancel ( building ) ;
12425: LD_VAR 0 1
12429: PPUSH
12430: CALL_OW 127
// end ; end_of_file
12434: PPOPN 2
12436: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
12437: LD_INT 0
12439: PPUSH
12440: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12441: LD_ADDR_VAR 0 2
12445: PUSH
12446: LD_STRING #Multi1x1-Time
12448: PUSH
12449: LD_OWVAR 1
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: ST_TO_ADDR
// if WaitServerStrings then
12458: LD_EXP 57
12462: IFFALSE 12480
// AllStrings = AllStrings ^ WaitServerStrings ;
12464: LD_ADDR_VAR 0 2
12468: PUSH
12469: LD_VAR 0 2
12473: PUSH
12474: LD_EXP 57
12478: ADD
12479: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12480: LD_INT 0
12482: PUSH
12483: LD_EXP 15
12487: PUSH
12488: LD_OWVAR 1
12492: MINUS
12493: LESSEQUAL
12494: IFFALSE 12525
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12496: LD_ADDR_VAR 0 2
12500: PUSH
12501: LD_VAR 0 2
12505: PUSH
12506: LD_STRING #allowedsibbomb
12508: PUSH
12509: LD_EXP 15
12513: PUSH
12514: LD_OWVAR 1
12518: MINUS
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: ADD
12524: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
12525: LD_INT 0
12527: PUSH
12528: LD_EXP 60
12532: PUSH
12533: LD_OWVAR 1
12537: MINUS
12538: LESSEQUAL
12539: IFFALSE 12570
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
12541: LD_ADDR_VAR 0 2
12545: PUSH
12546: LD_VAR 0 2
12550: PUSH
12551: LD_STRING #builduptime
12553: PUSH
12554: LD_EXP 60
12558: PUSH
12559: LD_OWVAR 1
12563: MINUS
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: ADD
12569: ST_TO_ADDR
// if ( ExtraStrings ) then
12570: LD_EXP 56
12574: IFFALSE 12596
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12576: LD_ADDR_VAR 0 2
12580: PUSH
12581: LD_VAR 0 2
12585: PUSH
12586: LD_STRING 
12588: ADD
12589: PUSH
12590: LD_EXP 56
12594: ADD
12595: ST_TO_ADDR
// if ( LimitsStrings ) then
12596: CALL 9298 0 0
12600: IFFALSE 12622
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12602: LD_ADDR_VAR 0 2
12606: PUSH
12607: LD_VAR 0 2
12611: PUSH
12612: LD_STRING 
12614: ADD
12615: PUSH
12616: CALL 9298 0 0
12620: ADD
12621: ST_TO_ADDR
// if debug_strings then
12622: LD_OWVAR 48
12626: IFFALSE 12648
// AllStrings := AllStrings ^  ^ debug_strings ;
12628: LD_ADDR_VAR 0 2
12632: PUSH
12633: LD_VAR 0 2
12637: PUSH
12638: LD_STRING 
12640: ADD
12641: PUSH
12642: LD_OWVAR 48
12646: ADD
12647: ST_TO_ADDR
// Display_Strings := AllStrings ;
12648: LD_ADDR_OWVAR 47
12652: PUSH
12653: LD_VAR 0 2
12657: ST_TO_ADDR
// end ;
12658: LD_VAR 0 1
12662: RET
// every 0 0$1 do
12663: GO 12665
12665: DISABLE
// begin ShowTimer ;
12666: CALL 12437 0 0
// enable ;
12670: ENABLE
// end ; end_of_file
12671: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12672: LD_INT 0
12674: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12675: LD_VAR 0 1
12679: PPUSH
12680: CALL_OW 255
12684: PUSH
12685: LD_VAR 0 4
12689: EQUAL
12690: IFFALSE 12709
// begin SetAchievement ( ACH_RAD ) ;
12692: LD_STRING ACH_RAD
12694: PPUSH
12695: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12699: LD_STRING ACH_NL
12701: PPUSH
12702: LD_INT 1
12704: PPUSH
12705: CALL_OW 564
// end end ;
12709: LD_VAR 0 5
12713: RET
// export function SA_Win ( side ) ; begin
12714: LD_INT 0
12716: PPUSH
// case side of 1 :
12717: LD_VAR 0 1
12721: PUSH
12722: LD_INT 1
12724: DOUBLE
12725: EQUAL
12726: IFTRUE 12730
12728: GO 12743
12730: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12731: LD_STRING ACH_AH
12733: PPUSH
12734: LD_INT 1
12736: PPUSH
12737: CALL_OW 564
12741: GO 12906
12743: LD_INT 2
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12764
12751: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12752: LD_STRING ACH_E
12754: PPUSH
12755: LD_INT 1
12757: PPUSH
12758: CALL_OW 564
12762: GO 12906
12764: LD_INT 3
12766: DOUBLE
12767: EQUAL
12768: IFTRUE 12772
12770: GO 12785
12772: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12773: LD_STRING ACH_OOL
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: CALL_OW 564
12783: GO 12906
12785: LD_INT 1
12787: PUSH
12788: LD_INT 2
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: DOUBLE
12795: EQUAL
12796: IFTRUE 12800
12798: GO 12825
12800: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12801: LD_STRING ACH_AH
12803: PPUSH
12804: LD_REAL  5.00000000000000E-0001
12807: PPUSH
12808: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12812: LD_STRING ACH_E
12814: PPUSH
12815: LD_REAL  5.00000000000000E-0001
12818: PPUSH
12819: CALL_OW 564
// end ; [ 2 , 3 ] :
12823: GO 12906
12825: LD_INT 2
12827: PUSH
12828: LD_INT 3
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: DOUBLE
12835: EQUAL
12836: IFTRUE 12840
12838: GO 12865
12840: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12841: LD_STRING ACH_OOL
12843: PPUSH
12844: LD_REAL  5.00000000000000E-0001
12847: PPUSH
12848: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12852: LD_STRING ACH_E
12854: PPUSH
12855: LD_REAL  5.00000000000000E-0001
12858: PPUSH
12859: CALL_OW 564
// end ; [ 3 , 1 ] :
12863: GO 12906
12865: LD_INT 3
12867: PUSH
12868: LD_INT 1
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: DOUBLE
12875: EQUAL
12876: IFTRUE 12880
12878: GO 12905
12880: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12881: LD_STRING ACH_AH
12883: PPUSH
12884: LD_REAL  5.00000000000000E-0001
12887: PPUSH
12888: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12892: LD_STRING ACH_OOL
12894: PPUSH
12895: LD_REAL  5.00000000000000E-0001
12898: PPUSH
12899: CALL_OW 564
// end ; end ;
12903: GO 12906
12905: POP
// end ; end_of_file
12906: LD_VAR 0 2
12910: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
12911: LD_INT 0
12913: PPUSH
12914: PPUSH
// enable ( 98 ) ;
12915: LD_INT 98
12917: ENABLE_MARKED
// GameEnded = false ;
12918: LD_ADDR_LOC 28
12922: PUSH
12923: LD_INT 0
12925: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12926: LD_ADDR_LOC 27
12930: PUSH
12931: LD_INT 0
12933: PUSH
12934: LD_INT 0
12936: PUSH
12937: LD_INT 0
12939: PUSH
12940: LD_INT 0
12942: PUSH
12943: LD_INT 0
12945: PUSH
12946: LD_INT 0
12948: PUSH
12949: LD_INT 0
12951: PUSH
12952: LD_INT 0
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: ST_TO_ADDR
// unfoged = false ;
12965: LD_ADDR_LOC 29
12969: PUSH
12970: LD_INT 0
12972: ST_TO_ADDR
// defeated_specs := [ ] ;
12973: LD_ADDR_LOC 30
12977: PUSH
12978: EMPTY
12979: ST_TO_ADDR
// for i = 1 to side_positions do
12980: LD_ADDR_VAR 0 2
12984: PUSH
12985: DOUBLE
12986: LD_INT 1
12988: DEC
12989: ST_TO_ADDR
12990: LD_EXP 18
12994: PUSH
12995: FOR_TO
12996: IFFALSE 13036
// if not side_positions [ i ] then
12998: LD_EXP 18
13002: PUSH
13003: LD_VAR 0 2
13007: ARRAY
13008: NOT
13009: IFFALSE 13034
// defeated = replace ( defeated , i , true ) ;
13011: LD_ADDR_LOC 27
13015: PUSH
13016: LD_LOC 27
13020: PPUSH
13021: LD_VAR 0 2
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: CALL_OW 1
13033: ST_TO_ADDR
13034: GO 12995
13036: POP
13037: POP
// end ;
13038: LD_VAR 0 1
13042: RET
// function CanWinLoose ; begin
13043: LD_INT 0
13045: PPUSH
// Result := true ;
13046: LD_ADDR_VAR 0 1
13050: PUSH
13051: LD_INT 1
13053: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
13054: CALL_OW 518
13058: PUSH
13059: CALL_OW 519
13063: PUSH
13064: LD_INT 0
13066: GREATER
13067: AND
13068: IFFALSE 13078
// Result := false ;
13070: LD_ADDR_VAR 0 1
13074: PUSH
13075: LD_INT 0
13077: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13078: CALL_OW 531
13082: PUSH
13083: CALL_OW 519
13087: PUSH
13088: LD_INT 1
13090: GREATER
13091: AND
13092: IFFALSE 13102
// Result := false ;
13094: LD_ADDR_VAR 0 1
13098: PUSH
13099: LD_INT 0
13101: ST_TO_ADDR
// end ;
13102: LD_VAR 0 1
13106: RET
// export function HasPower ( i ) ; var k , h ; begin
13107: LD_INT 0
13109: PPUSH
13110: PPUSH
13111: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
13112: LD_VAR 0 1
13116: PPUSH
13117: CALL_OW 108
13121: NOT
13122: PUSH
13123: LD_EXP 21
13127: PUSH
13128: LD_VAR 0 1
13132: ARRAY
13133: NOT
13134: AND
13135: PUSH
13136: LD_OWVAR 4
13140: AND
13141: IFFALSE 13153
// begin result = false ;
13143: LD_ADDR_VAR 0 2
13147: PUSH
13148: LD_INT 0
13150: ST_TO_ADDR
// end else
13151: GO 13448
// case def_win_rules of 0 :
13153: LD_EXP 30
13157: PUSH
13158: LD_INT 0
13160: DOUBLE
13161: EQUAL
13162: IFTRUE 13166
13164: GO 13329
13166: POP
// if def_people_respawning then
13167: LD_EXP 51
13171: IFFALSE 13262
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
13173: LD_ADDR_VAR 0 2
13177: PUSH
13178: LD_INT 22
13180: PUSH
13181: LD_VAR 0 1
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: LD_INT 2
13192: PUSH
13193: LD_INT 21
13195: PUSH
13196: LD_INT 1
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 33
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 33
13215: PUSH
13216: LD_INT 5
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 30
13225: PUSH
13226: LD_INT 0
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: LD_INT 30
13235: PUSH
13236: LD_INT 1
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PPUSH
13255: CALL_OW 69
13259: ST_TO_ADDR
13260: GO 13327
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
13262: LD_ADDR_VAR 0 2
13266: PUSH
13267: LD_INT 22
13269: PUSH
13270: LD_VAR 0 1
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: LD_INT 21
13284: PUSH
13285: LD_INT 1
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 33
13294: PUSH
13295: LD_INT 3
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 33
13304: PUSH
13305: LD_INT 5
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 69
13326: ST_TO_ADDR
13327: GO 13448
13329: LD_INT 1
13331: DOUBLE
13332: EQUAL
13333: IFTRUE 13337
13335: GO 13376
13337: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
13338: LD_ADDR_VAR 0 2
13342: PUSH
13343: LD_INT 22
13345: PUSH
13346: LD_VAR 0 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 21
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PPUSH
13369: CALL_OW 69
13373: ST_TO_ADDR
13374: GO 13448
13376: LD_INT 2
13378: DOUBLE
13379: EQUAL
13380: IFTRUE 13384
13382: GO 13447
13384: POP
// begin h = false ;
13385: LD_ADDR_VAR 0 4
13389: PUSH
13390: LD_INT 0
13392: ST_TO_ADDR
// for k in heroes [ i ] do
13393: LD_ADDR_VAR 0 3
13397: PUSH
13398: LD_EXP 31
13402: PUSH
13403: LD_VAR 0 1
13407: ARRAY
13408: PUSH
13409: FOR_IN
13410: IFFALSE 13433
// if IsLive ( k ) then
13412: LD_VAR 0 3
13416: PPUSH
13417: CALL_OW 300
13421: IFFALSE 13431
// h = true ;
13423: LD_ADDR_VAR 0 4
13427: PUSH
13428: LD_INT 1
13430: ST_TO_ADDR
13431: GO 13409
13433: POP
13434: POP
// Result := h ;
13435: LD_ADDR_VAR 0 2
13439: PUSH
13440: LD_VAR 0 4
13444: ST_TO_ADDR
// end ; end ;
13445: GO 13448
13447: POP
// end ;
13448: LD_VAR 0 2
13452: RET
// function AlliedSides ( i , j ) ; begin
13453: LD_INT 0
13455: PPUSH
// Result := false ;
13456: LD_ADDR_VAR 0 3
13460: PUSH
13461: LD_INT 0
13463: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
13464: LD_VAR 0 1
13468: PPUSH
13469: LD_VAR 0 2
13473: PPUSH
13474: CALL_OW 81
13478: PUSH
13479: LD_INT 1
13481: EQUAL
13482: PUSH
13483: LD_VAR 0 2
13487: PPUSH
13488: LD_VAR 0 1
13492: PPUSH
13493: CALL_OW 81
13497: PUSH
13498: LD_INT 1
13500: EQUAL
13501: AND
13502: PUSH
13503: LD_VAR 0 1
13507: PPUSH
13508: CALL_OW 83
13512: AND
13513: PUSH
13514: LD_VAR 0 2
13518: PPUSH
13519: CALL_OW 83
13523: AND
13524: IFFALSE 13534
// Result := true ;
13526: LD_ADDR_VAR 0 3
13530: PUSH
13531: LD_INT 1
13533: ST_TO_ADDR
// end ;
13534: LD_VAR 0 3
13538: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
13539: CALL 13043 0 0
13543: PUSH
13544: LD_LOC 28
13548: NOT
13549: AND
13550: IFFALSE 13566
13552: GO 13554
13554: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
13555: LD_ADDR_EXP 57
13559: PUSH
13560: LD_STRING #Player-Ended
13562: PUSH
13563: EMPTY
13564: LIST
13565: ST_TO_ADDR
13566: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
13567: CALL 13043 0 0
13571: PUSH
13572: LD_LOC 28
13576: AND
13577: IFFALSE 13586
13579: GO 13581
13581: DISABLE
// YouLostInMultiplayer ;
13582: CALL_OW 107
13586: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
13587: CALL 13043 0 0
13591: NOT
13592: PUSH
13593: CALL_OW 531
13597: NOT
13598: AND
13599: IFFALSE 13615
13601: GO 13603
13603: DISABLE
// WaitServerStrings = [ #server-wait ] ;
13604: LD_ADDR_EXP 57
13608: PUSH
13609: LD_STRING #server-wait
13611: PUSH
13612: EMPTY
13613: LIST
13614: ST_TO_ADDR
13615: END
// every 100 trigger IAmSpec do
13616: CALL_OW 531
13620: IFFALSE 13636
13622: GO 13624
13624: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
13625: LD_ADDR_EXP 57
13629: PUSH
13630: LD_STRING #Player-IAmSpec
13632: PUSH
13633: EMPTY
13634: LIST
13635: ST_TO_ADDR
13636: END
// every 100 trigger GameEnded and IAmSpec do
13637: LD_LOC 28
13641: PUSH
13642: CALL_OW 531
13646: AND
13647: IFFALSE 13656
13649: GO 13651
13651: DISABLE
// YouLostInMultiplayer ;
13652: CALL_OW 107
13656: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
13657: CALL 13043 0 0
13661: PUSH
13662: LD_LOC 28
13666: NOT
13667: AND
13668: IFFALSE 13684
13670: GO 13672
13672: DISABLE
// WaitServerStrings = [ $player-win ] ;
13673: LD_ADDR_EXP 57
13677: PUSH
13678: LD_STRING $player-win
13680: PUSH
13681: EMPTY
13682: LIST
13683: ST_TO_ADDR
13684: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
13685: CALL 13043 0 0
13689: PUSH
13690: LD_LOC 28
13694: AND
13695: IFFALSE 13719
13697: GO 13699
13699: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
13700: LD_EXP 19
13704: PUSH
13705: LD_OWVAR 7
13709: ARRAY
13710: PPUSH
13711: CALL 12714 0 1
// YouWinInMultiplayer ;
13715: CALL_OW 106
// end ;
13719: END
// every 100 trigger isEditor marked 401 do
13720: LD_OWVAR 84
13724: IFFALSE 13740
13726: GO 13728
13728: DISABLE
// Debug_Strings = [ You won ] ;
13729: LD_ADDR_OWVAR 48
13733: PUSH
13734: LD_STRING You won
13736: PUSH
13737: EMPTY
13738: LIST
13739: ST_TO_ADDR
13740: END
// every 100 trigger isEditor marked 400 do
13741: LD_OWVAR 84
13745: IFFALSE 13761
13747: GO 13749
13749: DISABLE
// Debug_Strings = [ You loss ] ;
13750: LD_ADDR_OWVAR 48
13754: PUSH
13755: LD_STRING You loss
13757: PUSH
13758: EMPTY
13759: LIST
13760: ST_TO_ADDR
13761: END
// every 100 marked 98 do var i , un ;
13762: GO 13764
13764: DISABLE
13765: LD_INT 0
13767: PPUSH
13768: PPUSH
// begin for i = 1 to side_positions do
13769: LD_ADDR_VAR 0 1
13773: PUSH
13774: DOUBLE
13775: LD_INT 1
13777: DEC
13778: ST_TO_ADDR
13779: LD_EXP 18
13783: PUSH
13784: FOR_TO
13785: IFFALSE 13872
// begin if side_positions [ i ] then
13787: LD_EXP 18
13791: PUSH
13792: LD_VAR 0 1
13796: ARRAY
13797: IFFALSE 13870
// if not HasPower ( i ) and not defeated [ i ] then
13799: LD_VAR 0 1
13803: PPUSH
13804: CALL 13107 0 1
13808: NOT
13809: PUSH
13810: LD_LOC 27
13814: PUSH
13815: LD_VAR 0 1
13819: ARRAY
13820: NOT
13821: AND
13822: IFFALSE 13870
// begin defeated = replace ( defeated , i , true ) ;
13824: LD_ADDR_LOC 27
13828: PUSH
13829: LD_LOC 27
13833: PPUSH
13834: LD_VAR 0 1
13838: PPUSH
13839: LD_INT 1
13841: PPUSH
13842: CALL_OW 1
13846: ST_TO_ADDR
// if i = mp_player_side then
13847: LD_VAR 0 1
13851: PUSH
13852: LD_OWVAR 7
13856: EQUAL
13857: IFFALSE 13870
// begin Multiplayer_Loose_Message ;
13859: CALL_OW 521
// SetPlayerSpectator ( ) ;
13863: CALL_OW 572
// enable ( 400 ) ;
13867: LD_INT 400
13869: ENABLE_MARKED
// end ; end ; end ;
13870: GO 13784
13872: POP
13873: POP
// DidGameEnd ;
13874: CALL 13889 0 0
// if not GameEnded then
13878: LD_LOC 28
13882: NOT
13883: IFFALSE 13886
// enable ;
13885: ENABLE
// end ;
13886: PPOPN 2
13888: END
// function DidGameEnd ; var i , k , enemy ; begin
13889: LD_INT 0
13891: PPUSH
13892: PPUSH
13893: PPUSH
13894: PPUSH
// enemy = [ ] ;
13895: LD_ADDR_VAR 0 4
13899: PUSH
13900: EMPTY
13901: ST_TO_ADDR
// for i = 1 to side_positions do
13902: LD_ADDR_VAR 0 2
13906: PUSH
13907: DOUBLE
13908: LD_INT 1
13910: DEC
13911: ST_TO_ADDR
13912: LD_EXP 18
13916: PUSH
13917: FOR_TO
13918: IFFALSE 14012
// if not defeated [ i ] then
13920: LD_LOC 27
13924: PUSH
13925: LD_VAR 0 2
13929: ARRAY
13930: NOT
13931: IFFALSE 14010
// for k = 1 to side_positions do
13933: LD_ADDR_VAR 0 3
13937: PUSH
13938: DOUBLE
13939: LD_INT 1
13941: DEC
13942: ST_TO_ADDR
13943: LD_EXP 18
13947: PUSH
13948: FOR_TO
13949: IFFALSE 14008
// if not defeated [ k ] then
13951: LD_LOC 27
13955: PUSH
13956: LD_VAR 0 3
13960: ARRAY
13961: NOT
13962: IFFALSE 14006
// if not AlliedSides ( i , k ) then
13964: LD_VAR 0 2
13968: PPUSH
13969: LD_VAR 0 3
13973: PPUSH
13974: CALL 13453 0 2
13978: NOT
13979: IFFALSE 14006
// enemy = enemy ^ [ i , k ] ;
13981: LD_ADDR_VAR 0 4
13985: PUSH
13986: LD_VAR 0 4
13990: PUSH
13991: LD_VAR 0 2
13995: PUSH
13996: LD_VAR 0 3
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: ADD
14005: ST_TO_ADDR
14006: GO 13948
14008: POP
14009: POP
14010: GO 13917
14012: POP
14013: POP
// if not enemy then
14014: LD_VAR 0 4
14018: NOT
14019: IFFALSE 14045
// begin GameEnded = true ;
14021: LD_ADDR_LOC 28
14025: PUSH
14026: LD_INT 1
14028: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
14029: LD_LOC 27
14033: PUSH
14034: LD_OWVAR 7
14038: ARRAY
14039: NOT
14040: IFFALSE 14045
// enable ( 401 ) ;
14042: LD_INT 401
14044: ENABLE_MARKED
// end ; end ;
14045: LD_VAR 0 1
14049: RET
// function unfog ; var k , friends ; begin
14050: LD_INT 0
14052: PPUSH
14053: PPUSH
14054: PPUSH
// for k = 1 to side_positions do
14055: LD_ADDR_VAR 0 2
14059: PUSH
14060: DOUBLE
14061: LD_INT 1
14063: DEC
14064: ST_TO_ADDR
14065: LD_EXP 18
14069: PUSH
14070: FOR_TO
14071: IFFALSE 14127
// if not defeated [ k ] then
14073: LD_LOC 27
14077: PUSH
14078: LD_VAR 0 2
14082: ARRAY
14083: NOT
14084: IFFALSE 14125
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
14086: LD_OWVAR 7
14090: PPUSH
14091: LD_VAR 0 2
14095: PPUSH
14096: CALL_OW 81
14100: PUSH
14101: LD_INT 1
14103: PUSH
14104: EMPTY
14105: LIST
14106: IN
14107: IFFALSE 14125
// friends = friends ^ k ;
14109: LD_ADDR_VAR 0 3
14113: PUSH
14114: LD_VAR 0 3
14118: PUSH
14119: LD_VAR 0 2
14123: ADD
14124: ST_TO_ADDR
14125: GO 14070
14127: POP
14128: POP
// if not friends then
14129: LD_VAR 0 3
14133: NOT
14134: IFFALSE 14148
// begin SetPlayerSpectator ( ) ;
14136: CALL_OW 572
// unfoged = true ;
14140: LD_ADDR_LOC 29
14144: PUSH
14145: LD_INT 1
14147: ST_TO_ADDR
// end ; end ;
14148: LD_VAR 0 1
14152: RET
// export function MakeGameEnd ; begin
14153: LD_INT 0
14155: PPUSH
// SetPlayerSpectator ( ) ;
14156: CALL_OW 572
// unfoged = true ;
14160: LD_ADDR_LOC 29
14164: PUSH
14165: LD_INT 1
14167: ST_TO_ADDR
// wait ( 0 0$5 ) ;
14168: LD_INT 175
14170: PPUSH
14171: CALL_OW 67
// GameEnded = true ;
14175: LD_ADDR_LOC 28
14179: PUSH
14180: LD_INT 1
14182: ST_TO_ADDR
// end ;
14183: LD_VAR 0 1
14187: RET
// export function GetGameEnded ; begin
14188: LD_INT 0
14190: PPUSH
// result = GameEnded ;
14191: LD_ADDR_VAR 0 1
14195: PUSH
14196: LD_LOC 28
14200: ST_TO_ADDR
// end ; end_of_file
14201: LD_VAR 0 1
14205: RET
// export function SetMpTechs ( ) ; var side , i ; begin
14206: LD_INT 0
14208: PPUSH
14209: PPUSH
14210: PPUSH
// for side = 1 to 8 do
14211: LD_ADDR_VAR 0 2
14215: PUSH
14216: DOUBLE
14217: LD_INT 1
14219: DEC
14220: ST_TO_ADDR
14221: LD_INT 8
14223: PUSH
14224: FOR_TO
14225: IFFALSE 14346
// begin for i = 1 to 72 do
14227: LD_ADDR_VAR 0 3
14231: PUSH
14232: DOUBLE
14233: LD_INT 1
14235: DEC
14236: ST_TO_ADDR
14237: LD_INT 72
14239: PUSH
14240: FOR_TO
14241: IFFALSE 14272
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
14243: LD_VAR 0 3
14247: PPUSH
14248: LD_VAR 0 2
14252: PPUSH
14253: LD_INT 0
14255: PPUSH
14256: LD_VAR 0 3
14260: PPUSH
14261: CALL_OW 565
14265: PPUSH
14266: CALL_OW 322
14270: GO 14240
14272: POP
14273: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
14274: LD_INT 73
14276: PPUSH
14277: LD_VAR 0 2
14281: PPUSH
14282: LD_INT 0
14284: PPUSH
14285: LD_INT 25
14287: PPUSH
14288: CALL_OW 565
14292: PPUSH
14293: CALL_OW 322
// for i = 0 to 40 do
14297: LD_ADDR_VAR 0 3
14301: PUSH
14302: DOUBLE
14303: LD_INT 0
14305: DEC
14306: ST_TO_ADDR
14307: LD_INT 40
14309: PUSH
14310: FOR_TO
14311: IFFALSE 14342
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
14313: LD_VAR 0 3
14317: PPUSH
14318: LD_VAR 0 2
14322: PPUSH
14323: LD_INT 1
14325: PPUSH
14326: LD_VAR 0 3
14330: PPUSH
14331: CALL_OW 565
14335: PPUSH
14336: CALL_OW 324
14340: GO 14310
14342: POP
14343: POP
// end ;
14344: GO 14224
14346: POP
14347: POP
// end ;
14348: LD_VAR 0 1
14352: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
14353: LD_INT 0
14355: PPUSH
14356: PPUSH
14357: PPUSH
// for side = 1 to 8 do
14358: LD_ADDR_VAR 0 3
14362: PUSH
14363: DOUBLE
14364: LD_INT 1
14366: DEC
14367: ST_TO_ADDR
14368: LD_INT 8
14370: PUSH
14371: FOR_TO
14372: IFFALSE 18368
// begin for i = 1 to 73 do
14374: LD_ADDR_VAR 0 4
14378: PUSH
14379: DOUBLE
14380: LD_INT 1
14382: DEC
14383: ST_TO_ADDR
14384: LD_INT 73
14386: PUSH
14387: FOR_TO
14388: IFFALSE 14409
// SetTech ( i , side , state_disabled ) ;
14390: LD_VAR 0 4
14394: PPUSH
14395: LD_VAR 0 3
14399: PPUSH
14400: LD_INT 0
14402: PPUSH
14403: CALL_OW 322
14407: GO 14387
14409: POP
14410: POP
// for i = 0 to 40 do
14411: LD_ADDR_VAR 0 4
14415: PUSH
14416: DOUBLE
14417: LD_INT 0
14419: DEC
14420: ST_TO_ADDR
14421: LD_INT 40
14423: PUSH
14424: FOR_TO
14425: IFFALSE 14446
// SetRestrict ( i , side , false ) ;
14427: LD_VAR 0 4
14431: PPUSH
14432: LD_VAR 0 3
14436: PPUSH
14437: LD_INT 0
14439: PPUSH
14440: CALL_OW 324
14444: GO 14424
14446: POP
14447: POP
// case level of 1 :
14448: LD_VAR 0 1
14452: PUSH
14453: LD_INT 1
14455: DOUBLE
14456: EQUAL
14457: IFTRUE 14461
14459: GO 14614
14461: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14462: LD_INT 35
14464: PPUSH
14465: LD_VAR 0 3
14469: PPUSH
14470: LD_INT 1
14472: PPUSH
14473: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14477: LD_INT 45
14479: PPUSH
14480: LD_VAR 0 3
14484: PPUSH
14485: LD_INT 1
14487: PPUSH
14488: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14492: LD_INT 46
14494: PPUSH
14495: LD_VAR 0 3
14499: PPUSH
14500: LD_INT 1
14502: PPUSH
14503: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14507: LD_INT 47
14509: PPUSH
14510: LD_VAR 0 3
14514: PPUSH
14515: LD_INT 1
14517: PPUSH
14518: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14522: LD_INT 0
14524: PPUSH
14525: LD_VAR 0 3
14529: PPUSH
14530: LD_INT 1
14532: PPUSH
14533: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14537: LD_INT 2
14539: PPUSH
14540: LD_VAR 0 3
14544: PPUSH
14545: LD_INT 1
14547: PPUSH
14548: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14552: LD_INT 4
14554: PPUSH
14555: LD_VAR 0 3
14559: PPUSH
14560: LD_INT 1
14562: PPUSH
14563: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14567: LD_INT 6
14569: PPUSH
14570: LD_VAR 0 3
14574: PPUSH
14575: LD_INT 1
14577: PPUSH
14578: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14582: LD_INT 29
14584: PPUSH
14585: LD_VAR 0 3
14589: PPUSH
14590: LD_INT 1
14592: PPUSH
14593: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14597: LD_INT 31
14599: PPUSH
14600: LD_VAR 0 3
14604: PPUSH
14605: LD_INT 1
14607: PPUSH
14608: CALL_OW 324
// end ; 2 :
14612: GO 18366
14614: LD_INT 2
14616: DOUBLE
14617: EQUAL
14618: IFTRUE 14622
14620: GO 14820
14622: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14623: LD_INT 35
14625: PPUSH
14626: LD_VAR 0 3
14630: PPUSH
14631: LD_INT 1
14633: PPUSH
14634: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14638: LD_INT 45
14640: PPUSH
14641: LD_VAR 0 3
14645: PPUSH
14646: LD_INT 1
14648: PPUSH
14649: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14653: LD_INT 46
14655: PPUSH
14656: LD_VAR 0 3
14660: PPUSH
14661: LD_INT 1
14663: PPUSH
14664: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14668: LD_INT 47
14670: PPUSH
14671: LD_VAR 0 3
14675: PPUSH
14676: LD_INT 1
14678: PPUSH
14679: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14683: LD_INT 1
14685: PPUSH
14686: LD_VAR 0 3
14690: PPUSH
14691: LD_INT 1
14693: PPUSH
14694: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14698: LD_INT 2
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: LD_INT 1
14708: PPUSH
14709: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14713: LD_INT 11
14715: PPUSH
14716: LD_VAR 0 3
14720: PPUSH
14721: LD_INT 1
14723: PPUSH
14724: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14728: LD_INT 0
14730: PPUSH
14731: LD_VAR 0 3
14735: PPUSH
14736: LD_INT 1
14738: PPUSH
14739: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14743: LD_INT 2
14745: PPUSH
14746: LD_VAR 0 3
14750: PPUSH
14751: LD_INT 1
14753: PPUSH
14754: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14758: LD_INT 4
14760: PPUSH
14761: LD_VAR 0 3
14765: PPUSH
14766: LD_INT 1
14768: PPUSH
14769: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14773: LD_INT 6
14775: PPUSH
14776: LD_VAR 0 3
14780: PPUSH
14781: LD_INT 1
14783: PPUSH
14784: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14788: LD_INT 29
14790: PPUSH
14791: LD_VAR 0 3
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14803: LD_INT 31
14805: PPUSH
14806: LD_VAR 0 3
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 324
// end ; 3 :
14818: GO 18366
14820: LD_INT 3
14822: DOUBLE
14823: EQUAL
14824: IFTRUE 14828
14826: GO 15281
14828: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14829: LD_INT 35
14831: PPUSH
14832: LD_VAR 0 3
14836: PPUSH
14837: LD_INT 1
14839: PPUSH
14840: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14844: LD_INT 45
14846: PPUSH
14847: LD_VAR 0 3
14851: PPUSH
14852: LD_INT 1
14854: PPUSH
14855: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14859: LD_INT 46
14861: PPUSH
14862: LD_VAR 0 3
14866: PPUSH
14867: LD_INT 1
14869: PPUSH
14870: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14874: LD_INT 47
14876: PPUSH
14877: LD_VAR 0 3
14881: PPUSH
14882: LD_INT 1
14884: PPUSH
14885: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14889: LD_INT 1
14891: PPUSH
14892: LD_VAR 0 3
14896: PPUSH
14897: LD_INT 1
14899: PPUSH
14900: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14904: LD_INT 2
14906: PPUSH
14907: LD_VAR 0 3
14911: PPUSH
14912: LD_INT 1
14914: PPUSH
14915: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14919: LD_INT 11
14921: PPUSH
14922: LD_VAR 0 3
14926: PPUSH
14927: LD_INT 1
14929: PPUSH
14930: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14934: LD_INT 48
14936: PPUSH
14937: LD_VAR 0 3
14941: PPUSH
14942: LD_INT 1
14944: PPUSH
14945: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14949: LD_INT 69
14951: PPUSH
14952: LD_VAR 0 3
14956: PPUSH
14957: LD_INT 1
14959: PPUSH
14960: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14964: LD_INT 39
14966: PPUSH
14967: LD_VAR 0 3
14971: PPUSH
14972: LD_INT 1
14974: PPUSH
14975: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14979: LD_INT 43
14981: PPUSH
14982: LD_VAR 0 3
14986: PPUSH
14987: LD_INT 1
14989: PPUSH
14990: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14994: LD_INT 51
14996: PPUSH
14997: LD_VAR 0 3
15001: PPUSH
15002: LD_INT 1
15004: PPUSH
15005: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15009: LD_INT 6
15011: PPUSH
15012: LD_VAR 0 3
15016: PPUSH
15017: LD_INT 1
15019: PPUSH
15020: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15024: LD_INT 0
15026: PPUSH
15027: LD_VAR 0 3
15031: PPUSH
15032: LD_INT 1
15034: PPUSH
15035: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15039: LD_INT 2
15041: PPUSH
15042: LD_VAR 0 3
15046: PPUSH
15047: LD_INT 1
15049: PPUSH
15050: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15054: LD_INT 3
15056: PPUSH
15057: LD_VAR 0 3
15061: PPUSH
15062: LD_INT 1
15064: PPUSH
15065: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15069: LD_INT 4
15071: PPUSH
15072: LD_VAR 0 3
15076: PPUSH
15077: LD_INT 1
15079: PPUSH
15080: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15084: LD_INT 6
15086: PPUSH
15087: LD_VAR 0 3
15091: PPUSH
15092: LD_INT 1
15094: PPUSH
15095: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15099: LD_INT 7
15101: PPUSH
15102: LD_VAR 0 3
15106: PPUSH
15107: LD_INT 1
15109: PPUSH
15110: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15114: LD_INT 8
15116: PPUSH
15117: LD_VAR 0 3
15121: PPUSH
15122: LD_INT 1
15124: PPUSH
15125: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15129: LD_INT 10
15131: PPUSH
15132: LD_VAR 0 3
15136: PPUSH
15137: LD_INT 1
15139: PPUSH
15140: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15144: LD_INT 15
15146: PPUSH
15147: LD_VAR 0 3
15151: PPUSH
15152: LD_INT 1
15154: PPUSH
15155: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15159: LD_INT 16
15161: PPUSH
15162: LD_VAR 0 3
15166: PPUSH
15167: LD_INT 1
15169: PPUSH
15170: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15174: LD_INT 17
15176: PPUSH
15177: LD_VAR 0 3
15181: PPUSH
15182: LD_INT 1
15184: PPUSH
15185: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15189: LD_INT 20
15191: PPUSH
15192: LD_VAR 0 3
15196: PPUSH
15197: LD_INT 1
15199: PPUSH
15200: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15204: LD_INT 26
15206: PPUSH
15207: LD_VAR 0 3
15211: PPUSH
15212: LD_INT 1
15214: PPUSH
15215: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15219: LD_INT 27
15221: PPUSH
15222: LD_VAR 0 3
15226: PPUSH
15227: LD_INT 1
15229: PPUSH
15230: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15234: LD_INT 29
15236: PPUSH
15237: LD_VAR 0 3
15241: PPUSH
15242: LD_INT 1
15244: PPUSH
15245: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15249: LD_INT 31
15251: PPUSH
15252: LD_VAR 0 3
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15264: LD_INT 32
15266: PPUSH
15267: LD_VAR 0 3
15271: PPUSH
15272: LD_INT 1
15274: PPUSH
15275: CALL_OW 324
// end ; 4 :
15279: GO 18366
15281: LD_INT 4
15283: DOUBLE
15284: EQUAL
15285: IFTRUE 15289
15287: GO 16237
15289: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15290: LD_INT 35
15292: PPUSH
15293: LD_VAR 0 3
15297: PPUSH
15298: LD_INT 1
15300: PPUSH
15301: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15305: LD_INT 45
15307: PPUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: LD_INT 1
15315: PPUSH
15316: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15320: LD_INT 46
15322: PPUSH
15323: LD_VAR 0 3
15327: PPUSH
15328: LD_INT 1
15330: PPUSH
15331: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15335: LD_INT 47
15337: PPUSH
15338: LD_VAR 0 3
15342: PPUSH
15343: LD_INT 1
15345: PPUSH
15346: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15350: LD_INT 1
15352: PPUSH
15353: LD_VAR 0 3
15357: PPUSH
15358: LD_INT 1
15360: PPUSH
15361: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15365: LD_INT 2
15367: PPUSH
15368: LD_VAR 0 3
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15380: LD_INT 11
15382: PPUSH
15383: LD_VAR 0 3
15387: PPUSH
15388: LD_INT 1
15390: PPUSH
15391: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15395: LD_INT 20
15397: PPUSH
15398: LD_VAR 0 3
15402: PPUSH
15403: LD_INT 1
15405: PPUSH
15406: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15410: LD_INT 48
15412: PPUSH
15413: LD_VAR 0 3
15417: PPUSH
15418: LD_INT 1
15420: PPUSH
15421: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15425: LD_INT 49
15427: PPUSH
15428: LD_VAR 0 3
15432: PPUSH
15433: LD_INT 1
15435: PPUSH
15436: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15440: LD_INT 69
15442: PPUSH
15443: LD_VAR 0 3
15447: PPUSH
15448: LD_INT 1
15450: PPUSH
15451: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15455: LD_INT 39
15457: PPUSH
15458: LD_VAR 0 3
15462: PPUSH
15463: LD_INT 1
15465: PPUSH
15466: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15470: LD_INT 34
15472: PPUSH
15473: LD_VAR 0 3
15477: PPUSH
15478: LD_INT 1
15480: PPUSH
15481: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15485: LD_INT 42
15487: PPUSH
15488: LD_VAR 0 3
15492: PPUSH
15493: LD_INT 1
15495: PPUSH
15496: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15500: LD_INT 44
15502: PPUSH
15503: LD_VAR 0 3
15507: PPUSH
15508: LD_INT 1
15510: PPUSH
15511: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15515: LD_INT 41
15517: PPUSH
15518: LD_VAR 0 3
15522: PPUSH
15523: LD_INT 1
15525: PPUSH
15526: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15530: LD_INT 43
15532: PPUSH
15533: LD_VAR 0 3
15537: PPUSH
15538: LD_INT 1
15540: PPUSH
15541: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15545: LD_INT 70
15547: PPUSH
15548: LD_VAR 0 3
15552: PPUSH
15553: LD_INT 1
15555: PPUSH
15556: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15560: LD_INT 51
15562: PPUSH
15563: LD_VAR 0 3
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15575: LD_INT 52
15577: PPUSH
15578: LD_VAR 0 3
15582: PPUSH
15583: LD_INT 1
15585: PPUSH
15586: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15590: LD_INT 6
15592: PPUSH
15593: LD_VAR 0 3
15597: PPUSH
15598: LD_INT 1
15600: PPUSH
15601: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15605: LD_INT 15
15607: PPUSH
15608: LD_VAR 0 3
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15620: LD_INT 7
15622: PPUSH
15623: LD_VAR 0 3
15627: PPUSH
15628: LD_INT 1
15630: PPUSH
15631: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15635: LD_INT 12
15637: PPUSH
15638: LD_VAR 0 3
15642: PPUSH
15643: LD_INT 1
15645: PPUSH
15646: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15650: LD_INT 18
15652: PPUSH
15653: LD_VAR 0 3
15657: PPUSH
15658: LD_INT 1
15660: PPUSH
15661: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15665: LD_INT 60
15667: PPUSH
15668: LD_VAR 0 3
15672: PPUSH
15673: LD_INT 1
15675: PPUSH
15676: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15680: LD_INT 9
15682: PPUSH
15683: LD_VAR 0 3
15687: PPUSH
15688: LD_INT 1
15690: PPUSH
15691: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15695: LD_INT 30
15697: PPUSH
15698: LD_VAR 0 3
15702: PPUSH
15703: LD_INT 1
15705: PPUSH
15706: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15710: LD_INT 37
15712: PPUSH
15713: LD_VAR 0 3
15717: PPUSH
15718: LD_INT 1
15720: PPUSH
15721: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15725: LD_INT 5
15727: PPUSH
15728: LD_VAR 0 3
15732: PPUSH
15733: LD_INT 1
15735: PPUSH
15736: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15740: LD_INT 66
15742: PPUSH
15743: LD_VAR 0 3
15747: PPUSH
15748: LD_INT 1
15750: PPUSH
15751: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15755: LD_INT 21
15757: PPUSH
15758: LD_VAR 0 3
15762: PPUSH
15763: LD_INT 1
15765: PPUSH
15766: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15770: LD_INT 22
15772: PPUSH
15773: LD_VAR 0 3
15777: PPUSH
15778: LD_INT 1
15780: PPUSH
15781: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15785: LD_INT 54
15787: PPUSH
15788: LD_VAR 0 3
15792: PPUSH
15793: LD_INT 1
15795: PPUSH
15796: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15800: LD_INT 0
15802: PPUSH
15803: LD_VAR 0 3
15807: PPUSH
15808: LD_INT 1
15810: PPUSH
15811: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15815: LD_INT 1
15817: PPUSH
15818: LD_VAR 0 3
15822: PPUSH
15823: LD_INT 1
15825: PPUSH
15826: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15830: LD_INT 2
15832: PPUSH
15833: LD_VAR 0 3
15837: PPUSH
15838: LD_INT 1
15840: PPUSH
15841: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15845: LD_INT 3
15847: PPUSH
15848: LD_VAR 0 3
15852: PPUSH
15853: LD_INT 1
15855: PPUSH
15856: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15860: LD_INT 4
15862: PPUSH
15863: LD_VAR 0 3
15867: PPUSH
15868: LD_INT 1
15870: PPUSH
15871: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15875: LD_INT 5
15877: PPUSH
15878: LD_VAR 0 3
15882: PPUSH
15883: LD_INT 1
15885: PPUSH
15886: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15890: LD_INT 6
15892: PPUSH
15893: LD_VAR 0 3
15897: PPUSH
15898: LD_INT 1
15900: PPUSH
15901: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15905: LD_INT 7
15907: PPUSH
15908: LD_VAR 0 3
15912: PPUSH
15913: LD_INT 1
15915: PPUSH
15916: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15920: LD_INT 8
15922: PPUSH
15923: LD_VAR 0 3
15927: PPUSH
15928: LD_INT 1
15930: PPUSH
15931: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15935: LD_INT 10
15937: PPUSH
15938: LD_VAR 0 3
15942: PPUSH
15943: LD_INT 1
15945: PPUSH
15946: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15950: LD_INT 11
15952: PPUSH
15953: LD_VAR 0 3
15957: PPUSH
15958: LD_INT 1
15960: PPUSH
15961: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15965: LD_INT 12
15967: PPUSH
15968: LD_VAR 0 3
15972: PPUSH
15973: LD_INT 1
15975: PPUSH
15976: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15980: LD_INT 13
15982: PPUSH
15983: LD_VAR 0 3
15987: PPUSH
15988: LD_INT 1
15990: PPUSH
15991: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15995: LD_INT 14
15997: PPUSH
15998: LD_VAR 0 3
16002: PPUSH
16003: LD_INT 1
16005: PPUSH
16006: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16010: LD_INT 15
16012: PPUSH
16013: LD_VAR 0 3
16017: PPUSH
16018: LD_INT 1
16020: PPUSH
16021: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16025: LD_INT 16
16027: PPUSH
16028: LD_VAR 0 3
16032: PPUSH
16033: LD_INT 1
16035: PPUSH
16036: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16040: LD_INT 17
16042: PPUSH
16043: LD_VAR 0 3
16047: PPUSH
16048: LD_INT 1
16050: PPUSH
16051: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16055: LD_INT 19
16057: PPUSH
16058: LD_VAR 0 3
16062: PPUSH
16063: LD_INT 1
16065: PPUSH
16066: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16070: LD_INT 20
16072: PPUSH
16073: LD_VAR 0 3
16077: PPUSH
16078: LD_INT 1
16080: PPUSH
16081: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16085: LD_INT 21
16087: PPUSH
16088: LD_VAR 0 3
16092: PPUSH
16093: LD_INT 1
16095: PPUSH
16096: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16100: LD_INT 23
16102: PPUSH
16103: LD_VAR 0 3
16107: PPUSH
16108: LD_INT 1
16110: PPUSH
16111: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16115: LD_INT 26
16117: PPUSH
16118: LD_VAR 0 3
16122: PPUSH
16123: LD_INT 1
16125: PPUSH
16126: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16130: LD_INT 27
16132: PPUSH
16133: LD_VAR 0 3
16137: PPUSH
16138: LD_INT 1
16140: PPUSH
16141: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16145: LD_INT 28
16147: PPUSH
16148: LD_VAR 0 3
16152: PPUSH
16153: LD_INT 1
16155: PPUSH
16156: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16160: LD_INT 29
16162: PPUSH
16163: LD_VAR 0 3
16167: PPUSH
16168: LD_INT 1
16170: PPUSH
16171: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16175: LD_INT 30
16177: PPUSH
16178: LD_VAR 0 3
16182: PPUSH
16183: LD_INT 1
16185: PPUSH
16186: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16190: LD_INT 31
16192: PPUSH
16193: LD_VAR 0 3
16197: PPUSH
16198: LD_INT 1
16200: PPUSH
16201: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16205: LD_INT 32
16207: PPUSH
16208: LD_VAR 0 3
16212: PPUSH
16213: LD_INT 1
16215: PPUSH
16216: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16220: LD_INT 36
16222: PPUSH
16223: LD_VAR 0 3
16227: PPUSH
16228: LD_INT 1
16230: PPUSH
16231: CALL_OW 324
// end ; 5 :
16235: GO 18366
16237: LD_INT 5
16239: DOUBLE
16240: EQUAL
16241: IFTRUE 16245
16243: GO 17358
16245: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16246: LD_INT 35
16248: PPUSH
16249: LD_VAR 0 3
16253: PPUSH
16254: LD_INT 1
16256: PPUSH
16257: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16261: LD_INT 45
16263: PPUSH
16264: LD_VAR 0 3
16268: PPUSH
16269: LD_INT 1
16271: PPUSH
16272: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16276: LD_INT 46
16278: PPUSH
16279: LD_VAR 0 3
16283: PPUSH
16284: LD_INT 1
16286: PPUSH
16287: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16291: LD_INT 47
16293: PPUSH
16294: LD_VAR 0 3
16298: PPUSH
16299: LD_INT 1
16301: PPUSH
16302: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16306: LD_INT 1
16308: PPUSH
16309: LD_VAR 0 3
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16321: LD_INT 2
16323: PPUSH
16324: LD_VAR 0 3
16328: PPUSH
16329: LD_INT 1
16331: PPUSH
16332: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16336: LD_INT 11
16338: PPUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: LD_INT 1
16346: PPUSH
16347: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16351: LD_INT 20
16353: PPUSH
16354: LD_VAR 0 3
16358: PPUSH
16359: LD_INT 1
16361: PPUSH
16362: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16366: LD_INT 48
16368: PPUSH
16369: LD_VAR 0 3
16373: PPUSH
16374: LD_INT 1
16376: PPUSH
16377: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16381: LD_INT 49
16383: PPUSH
16384: LD_VAR 0 3
16388: PPUSH
16389: LD_INT 1
16391: PPUSH
16392: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16396: LD_INT 69
16398: PPUSH
16399: LD_VAR 0 3
16403: PPUSH
16404: LD_INT 1
16406: PPUSH
16407: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16411: LD_INT 39
16413: PPUSH
16414: LD_VAR 0 3
16418: PPUSH
16419: LD_INT 1
16421: PPUSH
16422: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16426: LD_INT 34
16428: PPUSH
16429: LD_VAR 0 3
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16441: LD_INT 42
16443: PPUSH
16444: LD_VAR 0 3
16448: PPUSH
16449: LD_INT 1
16451: PPUSH
16452: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16456: LD_INT 44
16458: PPUSH
16459: LD_VAR 0 3
16463: PPUSH
16464: LD_INT 1
16466: PPUSH
16467: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16471: LD_INT 41
16473: PPUSH
16474: LD_VAR 0 3
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16486: LD_INT 40
16488: PPUSH
16489: LD_VAR 0 3
16493: PPUSH
16494: LD_INT 1
16496: PPUSH
16497: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16501: LD_INT 43
16503: PPUSH
16504: LD_VAR 0 3
16508: PPUSH
16509: LD_INT 1
16511: PPUSH
16512: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16516: LD_INT 70
16518: PPUSH
16519: LD_VAR 0 3
16523: PPUSH
16524: LD_INT 1
16526: PPUSH
16527: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16531: LD_INT 51
16533: PPUSH
16534: LD_VAR 0 3
16538: PPUSH
16539: LD_INT 1
16541: PPUSH
16542: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16546: LD_INT 52
16548: PPUSH
16549: LD_VAR 0 3
16553: PPUSH
16554: LD_INT 1
16556: PPUSH
16557: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16561: LD_INT 6
16563: PPUSH
16564: LD_VAR 0 3
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16576: LD_INT 15
16578: PPUSH
16579: LD_VAR 0 3
16583: PPUSH
16584: LD_INT 1
16586: PPUSH
16587: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16591: LD_INT 7
16593: PPUSH
16594: LD_VAR 0 3
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16606: LD_INT 12
16608: PPUSH
16609: LD_VAR 0 3
16613: PPUSH
16614: LD_INT 1
16616: PPUSH
16617: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16621: LD_INT 17
16623: PPUSH
16624: LD_VAR 0 3
16628: PPUSH
16629: LD_INT 1
16631: PPUSH
16632: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16636: LD_INT 18
16638: PPUSH
16639: LD_VAR 0 3
16643: PPUSH
16644: LD_INT 1
16646: PPUSH
16647: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16651: LD_INT 60
16653: PPUSH
16654: LD_VAR 0 3
16658: PPUSH
16659: LD_INT 1
16661: PPUSH
16662: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16666: LD_INT 32
16668: PPUSH
16669: LD_VAR 0 3
16673: PPUSH
16674: LD_INT 1
16676: PPUSH
16677: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16681: LD_INT 9
16683: PPUSH
16684: LD_VAR 0 3
16688: PPUSH
16689: LD_INT 1
16691: PPUSH
16692: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16696: LD_INT 57
16698: PPUSH
16699: LD_VAR 0 3
16703: PPUSH
16704: LD_INT 1
16706: PPUSH
16707: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16711: LD_INT 30
16713: PPUSH
16714: LD_VAR 0 3
16718: PPUSH
16719: LD_INT 1
16721: PPUSH
16722: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16726: LD_INT 37
16728: PPUSH
16729: LD_VAR 0 3
16733: PPUSH
16734: LD_INT 1
16736: PPUSH
16737: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16741: LD_INT 63
16743: PPUSH
16744: LD_VAR 0 3
16748: PPUSH
16749: LD_INT 1
16751: PPUSH
16752: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16756: LD_INT 3
16758: PPUSH
16759: LD_VAR 0 3
16763: PPUSH
16764: LD_INT 1
16766: PPUSH
16767: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16771: LD_INT 4
16773: PPUSH
16774: LD_VAR 0 3
16778: PPUSH
16779: LD_INT 1
16781: PPUSH
16782: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16786: LD_INT 5
16788: PPUSH
16789: LD_VAR 0 3
16793: PPUSH
16794: LD_INT 1
16796: PPUSH
16797: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16801: LD_INT 66
16803: PPUSH
16804: LD_VAR 0 3
16808: PPUSH
16809: LD_INT 1
16811: PPUSH
16812: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16816: LD_INT 21
16818: PPUSH
16819: LD_VAR 0 3
16823: PPUSH
16824: LD_INT 1
16826: PPUSH
16827: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16831: LD_INT 22
16833: PPUSH
16834: LD_VAR 0 3
16838: PPUSH
16839: LD_INT 1
16841: PPUSH
16842: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16846: LD_INT 19
16848: PPUSH
16849: LD_VAR 0 3
16853: PPUSH
16854: LD_INT 1
16856: PPUSH
16857: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16861: LD_INT 54
16863: PPUSH
16864: LD_VAR 0 3
16868: PPUSH
16869: LD_INT 1
16871: PPUSH
16872: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16876: LD_INT 55
16878: PPUSH
16879: LD_VAR 0 3
16883: PPUSH
16884: LD_INT 1
16886: PPUSH
16887: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16891: LD_INT 0
16893: PPUSH
16894: LD_VAR 0 3
16898: PPUSH
16899: LD_INT 1
16901: PPUSH
16902: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16906: LD_INT 1
16908: PPUSH
16909: LD_VAR 0 3
16913: PPUSH
16914: LD_INT 1
16916: PPUSH
16917: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16921: LD_INT 2
16923: PPUSH
16924: LD_VAR 0 3
16928: PPUSH
16929: LD_INT 1
16931: PPUSH
16932: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16936: LD_INT 3
16938: PPUSH
16939: LD_VAR 0 3
16943: PPUSH
16944: LD_INT 1
16946: PPUSH
16947: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16951: LD_INT 4
16953: PPUSH
16954: LD_VAR 0 3
16958: PPUSH
16959: LD_INT 1
16961: PPUSH
16962: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16966: LD_INT 5
16968: PPUSH
16969: LD_VAR 0 3
16973: PPUSH
16974: LD_INT 1
16976: PPUSH
16977: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16981: LD_INT 6
16983: PPUSH
16984: LD_VAR 0 3
16988: PPUSH
16989: LD_INT 1
16991: PPUSH
16992: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16996: LD_INT 7
16998: PPUSH
16999: LD_VAR 0 3
17003: PPUSH
17004: LD_INT 1
17006: PPUSH
17007: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17011: LD_INT 8
17013: PPUSH
17014: LD_VAR 0 3
17018: PPUSH
17019: LD_INT 1
17021: PPUSH
17022: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17026: LD_INT 10
17028: PPUSH
17029: LD_VAR 0 3
17033: PPUSH
17034: LD_INT 1
17036: PPUSH
17037: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17041: LD_INT 11
17043: PPUSH
17044: LD_VAR 0 3
17048: PPUSH
17049: LD_INT 1
17051: PPUSH
17052: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17056: LD_INT 12
17058: PPUSH
17059: LD_VAR 0 3
17063: PPUSH
17064: LD_INT 1
17066: PPUSH
17067: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17071: LD_INT 13
17073: PPUSH
17074: LD_VAR 0 3
17078: PPUSH
17079: LD_INT 1
17081: PPUSH
17082: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17086: LD_INT 14
17088: PPUSH
17089: LD_VAR 0 3
17093: PPUSH
17094: LD_INT 1
17096: PPUSH
17097: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17101: LD_INT 15
17103: PPUSH
17104: LD_VAR 0 3
17108: PPUSH
17109: LD_INT 1
17111: PPUSH
17112: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17116: LD_INT 16
17118: PPUSH
17119: LD_VAR 0 3
17123: PPUSH
17124: LD_INT 1
17126: PPUSH
17127: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17131: LD_INT 17
17133: PPUSH
17134: LD_VAR 0 3
17138: PPUSH
17139: LD_INT 1
17141: PPUSH
17142: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
17146: LD_INT 18
17148: PPUSH
17149: LD_VAR 0 3
17153: PPUSH
17154: LD_INT 1
17156: PPUSH
17157: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17161: LD_INT 19
17163: PPUSH
17164: LD_VAR 0 3
17168: PPUSH
17169: LD_INT 1
17171: PPUSH
17172: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17176: LD_INT 20
17178: PPUSH
17179: LD_VAR 0 3
17183: PPUSH
17184: LD_INT 1
17186: PPUSH
17187: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17191: LD_INT 21
17193: PPUSH
17194: LD_VAR 0 3
17198: PPUSH
17199: LD_INT 1
17201: PPUSH
17202: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17206: LD_INT 23
17208: PPUSH
17209: LD_VAR 0 3
17213: PPUSH
17214: LD_INT 1
17216: PPUSH
17217: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17221: LD_INT 26
17223: PPUSH
17224: LD_VAR 0 3
17228: PPUSH
17229: LD_INT 1
17231: PPUSH
17232: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17236: LD_INT 27
17238: PPUSH
17239: LD_VAR 0 3
17243: PPUSH
17244: LD_INT 1
17246: PPUSH
17247: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17251: LD_INT 28
17253: PPUSH
17254: LD_VAR 0 3
17258: PPUSH
17259: LD_INT 1
17261: PPUSH
17262: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17266: LD_INT 29
17268: PPUSH
17269: LD_VAR 0 3
17273: PPUSH
17274: LD_INT 1
17276: PPUSH
17277: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17281: LD_INT 30
17283: PPUSH
17284: LD_VAR 0 3
17288: PPUSH
17289: LD_INT 1
17291: PPUSH
17292: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17296: LD_INT 31
17298: PPUSH
17299: LD_VAR 0 3
17303: PPUSH
17304: LD_INT 1
17306: PPUSH
17307: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17311: LD_INT 32
17313: PPUSH
17314: LD_VAR 0 3
17318: PPUSH
17319: LD_INT 1
17321: PPUSH
17322: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
17326: LD_INT 33
17328: PPUSH
17329: LD_VAR 0 3
17333: PPUSH
17334: LD_INT 1
17336: PPUSH
17337: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17341: LD_INT 36
17343: PPUSH
17344: LD_VAR 0 3
17348: PPUSH
17349: LD_INT 1
17351: PPUSH
17352: CALL_OW 324
// end ; 6 :
17356: GO 18366
17358: LD_INT 6
17360: DOUBLE
17361: EQUAL
17362: IFTRUE 17366
17364: GO 18291
17366: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17367: LD_INT 35
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: LD_INT 1
17377: PPUSH
17378: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17382: LD_INT 45
17384: PPUSH
17385: LD_VAR 0 3
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17397: LD_INT 46
17399: PPUSH
17400: LD_VAR 0 3
17404: PPUSH
17405: LD_INT 1
17407: PPUSH
17408: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17412: LD_INT 47
17414: PPUSH
17415: LD_VAR 0 3
17419: PPUSH
17420: LD_INT 1
17422: PPUSH
17423: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17427: LD_INT 1
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_INT 1
17437: PPUSH
17438: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17442: LD_INT 2
17444: PPUSH
17445: LD_VAR 0 3
17449: PPUSH
17450: LD_INT 1
17452: PPUSH
17453: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17457: LD_INT 11
17459: PPUSH
17460: LD_VAR 0 3
17464: PPUSH
17465: LD_INT 1
17467: PPUSH
17468: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17472: LD_INT 20
17474: PPUSH
17475: LD_VAR 0 3
17479: PPUSH
17480: LD_INT 1
17482: PPUSH
17483: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17487: LD_INT 48
17489: PPUSH
17490: LD_VAR 0 3
17494: PPUSH
17495: LD_INT 1
17497: PPUSH
17498: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17502: LD_INT 49
17504: PPUSH
17505: LD_VAR 0 3
17509: PPUSH
17510: LD_INT 1
17512: PPUSH
17513: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
17517: LD_INT 50
17519: PPUSH
17520: LD_VAR 0 3
17524: PPUSH
17525: LD_INT 1
17527: PPUSH
17528: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17532: LD_INT 69
17534: PPUSH
17535: LD_VAR 0 3
17539: PPUSH
17540: LD_INT 1
17542: PPUSH
17543: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17547: LD_INT 39
17549: PPUSH
17550: LD_VAR 0 3
17554: PPUSH
17555: LD_INT 1
17557: PPUSH
17558: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17562: LD_INT 34
17564: PPUSH
17565: LD_VAR 0 3
17569: PPUSH
17570: LD_INT 1
17572: PPUSH
17573: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17577: LD_INT 42
17579: PPUSH
17580: LD_VAR 0 3
17584: PPUSH
17585: LD_INT 1
17587: PPUSH
17588: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17592: LD_INT 44
17594: PPUSH
17595: LD_VAR 0 3
17599: PPUSH
17600: LD_INT 1
17602: PPUSH
17603: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17607: LD_INT 41
17609: PPUSH
17610: LD_VAR 0 3
17614: PPUSH
17615: LD_INT 1
17617: PPUSH
17618: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
17622: LD_INT 13
17624: PPUSH
17625: LD_VAR 0 3
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17637: LD_INT 40
17639: PPUSH
17640: LD_VAR 0 3
17644: PPUSH
17645: LD_INT 1
17647: PPUSH
17648: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17652: LD_INT 43
17654: PPUSH
17655: LD_VAR 0 3
17659: PPUSH
17660: LD_INT 1
17662: PPUSH
17663: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17667: LD_INT 70
17669: PPUSH
17670: LD_VAR 0 3
17674: PPUSH
17675: LD_INT 1
17677: PPUSH
17678: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
17682: LD_INT 23
17684: PPUSH
17685: LD_VAR 0 3
17689: PPUSH
17690: LD_INT 1
17692: PPUSH
17693: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17697: LD_INT 51
17699: PPUSH
17700: LD_VAR 0 3
17704: PPUSH
17705: LD_INT 1
17707: PPUSH
17708: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17712: LD_INT 52
17714: PPUSH
17715: LD_VAR 0 3
17719: PPUSH
17720: LD_INT 1
17722: PPUSH
17723: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17727: LD_INT 6
17729: PPUSH
17730: LD_VAR 0 3
17734: PPUSH
17735: LD_INT 1
17737: PPUSH
17738: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17742: LD_INT 15
17744: PPUSH
17745: LD_VAR 0 3
17749: PPUSH
17750: LD_INT 1
17752: PPUSH
17753: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17757: LD_INT 7
17759: PPUSH
17760: LD_VAR 0 3
17764: PPUSH
17765: LD_INT 1
17767: PPUSH
17768: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17772: LD_INT 12
17774: PPUSH
17775: LD_VAR 0 3
17779: PPUSH
17780: LD_INT 1
17782: PPUSH
17783: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
17787: LD_INT 10
17789: PPUSH
17790: LD_VAR 0 3
17794: PPUSH
17795: LD_INT 1
17797: PPUSH
17798: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17802: LD_INT 17
17804: PPUSH
17805: LD_VAR 0 3
17809: PPUSH
17810: LD_INT 1
17812: PPUSH
17813: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17817: LD_INT 18
17819: PPUSH
17820: LD_VAR 0 3
17824: PPUSH
17825: LD_INT 1
17827: PPUSH
17828: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17832: LD_INT 60
17834: PPUSH
17835: LD_VAR 0 3
17839: PPUSH
17840: LD_INT 1
17842: PPUSH
17843: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
17847: LD_INT 61
17849: PPUSH
17850: LD_VAR 0 3
17854: PPUSH
17855: LD_INT 1
17857: PPUSH
17858: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17862: LD_INT 32
17864: PPUSH
17865: LD_VAR 0 3
17869: PPUSH
17870: LD_INT 1
17872: PPUSH
17873: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
17877: LD_INT 27
17879: PPUSH
17880: LD_VAR 0 3
17884: PPUSH
17885: LD_INT 1
17887: PPUSH
17888: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
17892: LD_INT 36
17894: PPUSH
17895: LD_VAR 0 3
17899: PPUSH
17900: LD_INT 1
17902: PPUSH
17903: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
17907: LD_INT 33
17909: PPUSH
17910: LD_VAR 0 3
17914: PPUSH
17915: LD_INT 1
17917: PPUSH
17918: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17922: LD_INT 9
17924: PPUSH
17925: LD_VAR 0 3
17929: PPUSH
17930: LD_INT 1
17932: PPUSH
17933: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
17937: LD_INT 38
17939: PPUSH
17940: LD_VAR 0 3
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17952: LD_INT 57
17954: PPUSH
17955: LD_VAR 0 3
17959: PPUSH
17960: LD_INT 1
17962: PPUSH
17963: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
17967: LD_INT 58
17969: PPUSH
17970: LD_VAR 0 3
17974: PPUSH
17975: LD_INT 1
17977: PPUSH
17978: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
17982: LD_INT 28
17984: PPUSH
17985: LD_VAR 0 3
17989: PPUSH
17990: LD_INT 1
17992: PPUSH
17993: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
17997: LD_INT 29
17999: PPUSH
18000: LD_VAR 0 3
18004: PPUSH
18005: LD_INT 1
18007: PPUSH
18008: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18012: LD_INT 30
18014: PPUSH
18015: LD_VAR 0 3
18019: PPUSH
18020: LD_INT 1
18022: PPUSH
18023: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18027: LD_INT 37
18029: PPUSH
18030: LD_VAR 0 3
18034: PPUSH
18035: LD_INT 1
18037: PPUSH
18038: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18042: LD_INT 63
18044: PPUSH
18045: LD_VAR 0 3
18049: PPUSH
18050: LD_INT 1
18052: PPUSH
18053: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
18057: LD_INT 64
18059: PPUSH
18060: LD_VAR 0 3
18064: PPUSH
18065: LD_INT 1
18067: PPUSH
18068: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18072: LD_INT 3
18074: PPUSH
18075: LD_VAR 0 3
18079: PPUSH
18080: LD_INT 1
18082: PPUSH
18083: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18087: LD_INT 4
18089: PPUSH
18090: LD_VAR 0 3
18094: PPUSH
18095: LD_INT 1
18097: PPUSH
18098: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18102: LD_INT 5
18104: PPUSH
18105: LD_VAR 0 3
18109: PPUSH
18110: LD_INT 1
18112: PPUSH
18113: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
18117: LD_INT 8
18119: PPUSH
18120: LD_VAR 0 3
18124: PPUSH
18125: LD_INT 1
18127: PPUSH
18128: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18132: LD_INT 66
18134: PPUSH
18135: LD_VAR 0 3
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
18147: LD_INT 67
18149: PPUSH
18150: LD_VAR 0 3
18154: PPUSH
18155: LD_INT 1
18157: PPUSH
18158: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18162: LD_INT 21
18164: PPUSH
18165: LD_VAR 0 3
18169: PPUSH
18170: LD_INT 1
18172: PPUSH
18173: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18177: LD_INT 22
18179: PPUSH
18180: LD_VAR 0 3
18184: PPUSH
18185: LD_INT 1
18187: PPUSH
18188: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18192: LD_INT 19
18194: PPUSH
18195: LD_VAR 0 3
18199: PPUSH
18200: LD_INT 1
18202: PPUSH
18203: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
18207: LD_INT 26
18209: PPUSH
18210: LD_VAR 0 3
18214: PPUSH
18215: LD_INT 1
18217: PPUSH
18218: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18222: LD_INT 54
18224: PPUSH
18225: LD_VAR 0 3
18229: PPUSH
18230: LD_INT 1
18232: PPUSH
18233: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18237: LD_INT 55
18239: PPUSH
18240: LD_VAR 0 3
18244: PPUSH
18245: LD_INT 1
18247: PPUSH
18248: CALL_OW 322
// for i = 0 to 39 do
18252: LD_ADDR_VAR 0 4
18256: PUSH
18257: DOUBLE
18258: LD_INT 0
18260: DEC
18261: ST_TO_ADDR
18262: LD_INT 39
18264: PUSH
18265: FOR_TO
18266: IFFALSE 18287
// SetRestrict ( i , side , true ) ;
18268: LD_VAR 0 4
18272: PPUSH
18273: LD_VAR 0 3
18277: PPUSH
18278: LD_INT 1
18280: PPUSH
18281: CALL_OW 324
18285: GO 18265
18287: POP
18288: POP
// end ; else
18289: GO 18366
18291: POP
// begin for i = 1 to 73 do
18292: LD_ADDR_VAR 0 4
18296: PUSH
18297: DOUBLE
18298: LD_INT 1
18300: DEC
18301: ST_TO_ADDR
18302: LD_INT 73
18304: PUSH
18305: FOR_TO
18306: IFFALSE 18327
// SetTech ( i , side , state_enabled ) ;
18308: LD_VAR 0 4
18312: PPUSH
18313: LD_VAR 0 3
18317: PPUSH
18318: LD_INT 1
18320: PPUSH
18321: CALL_OW 322
18325: GO 18305
18327: POP
18328: POP
// for i = 0 to 39 do
18329: LD_ADDR_VAR 0 4
18333: PUSH
18334: DOUBLE
18335: LD_INT 0
18337: DEC
18338: ST_TO_ADDR
18339: LD_INT 39
18341: PUSH
18342: FOR_TO
18343: IFFALSE 18364
// SetRestrict ( i , side , true ) ;
18345: LD_VAR 0 4
18349: PPUSH
18350: LD_VAR 0 3
18354: PPUSH
18355: LD_INT 1
18357: PPUSH
18358: CALL_OW 324
18362: GO 18342
18364: POP
18365: POP
// end ; end ; end ;
18366: GO 14371
18368: POP
18369: POP
// end ; end_of_file
18370: LD_VAR 0 2
18374: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
18375: LD_INT 0
18377: PPUSH
18378: PPUSH
18379: PPUSH
18380: PPUSH
18381: PPUSH
18382: PPUSH
18383: PPUSH
18384: PPUSH
18385: PPUSH
// for i := 1 to 8 do
18386: LD_ADDR_VAR 0 2
18390: PUSH
18391: DOUBLE
18392: LD_INT 1
18394: DEC
18395: ST_TO_ADDR
18396: LD_INT 8
18398: PUSH
18399: FOR_TO
18400: IFFALSE 18784
// begin if Side_Positions [ i ] then
18402: LD_EXP 18
18406: PUSH
18407: LD_VAR 0 2
18411: ARRAY
18412: IFFALSE 18782
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
18414: LD_ADDR_VAR 0 7
18418: PUSH
18419: LD_INT 22
18421: PUSH
18422: LD_VAR 0 2
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 21
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 69
18449: PUSH
18450: LD_INT 0
18452: PLUS
18453: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18454: LD_ADDR_VAR 0 9
18458: PUSH
18459: LD_INT 22
18461: PUSH
18462: LD_VAR 0 2
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: LD_INT 30
18476: PUSH
18477: LD_INT 0
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 30
18486: PUSH
18487: LD_INT 1
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: LIST
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 69
18507: ST_TO_ADDR
// crates := 0 ;
18508: LD_ADDR_VAR 0 4
18512: PUSH
18513: LD_INT 0
18515: ST_TO_ADDR
// oil := 0 ;
18516: LD_ADDR_VAR 0 5
18520: PUSH
18521: LD_INT 0
18523: ST_TO_ADDR
// sib := 0 ;
18524: LD_ADDR_VAR 0 6
18528: PUSH
18529: LD_INT 0
18531: ST_TO_ADDR
// if bases then
18532: LD_VAR 0 9
18536: IFFALSE 18642
// begin for j in bases do
18538: LD_ADDR_VAR 0 3
18542: PUSH
18543: LD_VAR 0 9
18547: PUSH
18548: FOR_IN
18549: IFFALSE 18640
// begin base := GetBase ( j ) ;
18551: LD_ADDR_VAR 0 8
18555: PUSH
18556: LD_VAR 0 3
18560: PPUSH
18561: CALL_OW 274
18565: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
18566: LD_ADDR_VAR 0 4
18570: PUSH
18571: LD_VAR 0 4
18575: PUSH
18576: LD_VAR 0 8
18580: PPUSH
18581: LD_INT 1
18583: PPUSH
18584: CALL_OW 275
18588: PLUS
18589: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
18590: LD_ADDR_VAR 0 5
18594: PUSH
18595: LD_VAR 0 5
18599: PUSH
18600: LD_VAR 0 8
18604: PPUSH
18605: LD_INT 2
18607: PPUSH
18608: CALL_OW 275
18612: PLUS
18613: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
18614: LD_ADDR_VAR 0 6
18618: PUSH
18619: LD_VAR 0 6
18623: PUSH
18624: LD_VAR 0 8
18628: PPUSH
18629: LD_INT 3
18631: PPUSH
18632: CALL_OW 275
18636: PLUS
18637: ST_TO_ADDR
// end ;
18638: GO 18548
18640: POP
18641: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
18642: LD_STRING setSpecText(
18644: PUSH
18645: LD_VAR 0 2
18649: STR
18650: PUSH
18651: LD_STRING ,
18653: STR
18654: PUSH
18655: LD_INT 2
18657: STR
18658: PUSH
18659: LD_STRING ,
18661: STR
18662: PUSH
18663: LD_VAR 0 4
18667: STR
18668: PUSH
18669: LD_STRING )
18671: STR
18672: PPUSH
18673: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
18677: LD_STRING setSpecText(
18679: PUSH
18680: LD_VAR 0 2
18684: STR
18685: PUSH
18686: LD_STRING ,
18688: STR
18689: PUSH
18690: LD_INT 3
18692: STR
18693: PUSH
18694: LD_STRING ,
18696: STR
18697: PUSH
18698: LD_VAR 0 5
18702: STR
18703: PUSH
18704: LD_STRING )
18706: STR
18707: PPUSH
18708: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
18712: LD_STRING setSpecText(
18714: PUSH
18715: LD_VAR 0 2
18719: STR
18720: PUSH
18721: LD_STRING ,
18723: STR
18724: PUSH
18725: LD_INT 4
18727: STR
18728: PUSH
18729: LD_STRING ,
18731: STR
18732: PUSH
18733: LD_VAR 0 6
18737: STR
18738: PUSH
18739: LD_STRING )
18741: STR
18742: PPUSH
18743: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
18747: LD_STRING setSpecText(
18749: PUSH
18750: LD_VAR 0 2
18754: STR
18755: PUSH
18756: LD_STRING ,
18758: STR
18759: PUSH
18760: LD_INT 5
18762: STR
18763: PUSH
18764: LD_STRING ,
18766: STR
18767: PUSH
18768: LD_VAR 0 7
18772: STR
18773: PUSH
18774: LD_STRING )
18776: STR
18777: PPUSH
18778: CALL_OW 559
// end ; end ;
18782: GO 18399
18784: POP
18785: POP
// end ;
18786: LD_VAR 0 1
18790: RET
// every 0 0$1 do
18791: GO 18793
18793: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
18794: LD_STRING setSpecLogoNumber(
18796: PUSH
18797: LD_INT 2
18799: STR
18800: PUSH
18801: LD_STRING ,
18803: STR
18804: PUSH
18805: LD_INT 1
18807: STR
18808: PUSH
18809: LD_STRING )
18811: STR
18812: PPUSH
18813: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
18817: LD_STRING setSpecLogoNumber(
18819: PUSH
18820: LD_INT 3
18822: STR
18823: PUSH
18824: LD_STRING ,
18826: STR
18827: PUSH
18828: LD_INT 2
18830: STR
18831: PUSH
18832: LD_STRING )
18834: STR
18835: PPUSH
18836: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
18840: LD_STRING setSpecLogoNumber(
18842: PUSH
18843: LD_INT 4
18845: STR
18846: PUSH
18847: LD_STRING ,
18849: STR
18850: PUSH
18851: LD_INT 3
18853: STR
18854: PUSH
18855: LD_STRING )
18857: STR
18858: PPUSH
18859: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
18863: LD_STRING setSpecLogoNumber(
18865: PUSH
18866: LD_INT 5
18868: STR
18869: PUSH
18870: LD_STRING ,
18872: STR
18873: PUSH
18874: LD_INT 4
18876: STR
18877: PUSH
18878: LD_STRING )
18880: STR
18881: PPUSH
18882: CALL_OW 559
// end ;
18886: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
18887: LD_INT 2
18889: PUSH
18890: LD_INT 30
18892: PUSH
18893: LD_INT 0
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 30
18902: PUSH
18903: LD_INT 1
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: PPUSH
18915: CALL_OW 69
18919: IFFALSE 18929
18921: GO 18923
18923: DISABLE
// begin enable ;
18924: ENABLE
// UpdateSpectatorBar ;
18925: CALL 18375 0 0
// end ; end_of_file
18929: END
// var respawn , inqueue ; export function init_respawning ; begin
18930: LD_INT 0
18932: PPUSH
// respawn := Rand ( 1 , 8 ) ;
18933: LD_ADDR_LOC 31
18937: PUSH
18938: LD_INT 1
18940: PPUSH
18941: LD_INT 8
18943: PPUSH
18944: CALL_OW 12
18948: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18949: LD_ADDR_LOC 32
18953: PUSH
18954: LD_INT 0
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: LD_INT 0
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: LD_INT 0
18968: PUSH
18969: LD_INT 0
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: LD_INT 0
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: ST_TO_ADDR
// end ;
18988: LD_VAR 0 1
18992: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
18993: GO 18995
18995: DISABLE
18996: LD_INT 0
18998: PPUSH
18999: PPUSH
19000: PPUSH
// begin if respawning_time_max = 0 then
19001: LD_EXP 13
19005: PUSH
19006: LD_INT 0
19008: EQUAL
19009: IFFALSE 19013
// exit ;
19011: GO 19421
// if respawn = 8 then
19013: LD_LOC 31
19017: PUSH
19018: LD_INT 8
19020: EQUAL
19021: IFFALSE 19033
// respawn := 1 else
19023: LD_ADDR_LOC 31
19027: PUSH
19028: LD_INT 1
19030: ST_TO_ADDR
19031: GO 19047
// respawn := respawn + 1 ;
19033: LD_ADDR_LOC 31
19037: PUSH
19038: LD_LOC 31
19042: PUSH
19043: LD_INT 1
19045: PLUS
19046: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
19047: LD_EXP 18
19051: PUSH
19052: LD_LOC 31
19056: ARRAY
19057: PUSH
19058: LD_LOC 32
19062: PUSH
19063: LD_LOC 31
19067: ARRAY
19068: NOT
19069: AND
19070: IFFALSE 19420
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
19072: LD_ADDR_VAR 0 1
19076: PUSH
19077: LD_INT 21
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 22
19089: PUSH
19090: LD_LOC 31
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 3
19101: PUSH
19102: LD_INT 23
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: PPUSH
19118: CALL_OW 69
19122: ST_TO_ADDR
// if n < number_of_people then
19123: LD_VAR 0 1
19127: PUSH
19128: LD_EXP 5
19132: LESS
19133: IFFALSE 19417
// begin aktresp := respawn ;
19135: LD_ADDR_VAR 0 3
19139: PUSH
19140: LD_LOC 31
19144: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
19145: LD_ADDR_LOC 32
19149: PUSH
19150: LD_LOC 32
19154: PPUSH
19155: LD_VAR 0 3
19159: PPUSH
19160: LD_INT 1
19162: PPUSH
19163: CALL_OW 1
19167: ST_TO_ADDR
// enable ;
19168: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
19169: LD_EXP 12
19173: PPUSH
19174: LD_EXP 13
19178: PPUSH
19179: CALL_OW 12
19183: PPUSH
19184: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
19188: LD_ADDR_LOC 32
19192: PUSH
19193: LD_LOC 32
19197: PPUSH
19198: LD_VAR 0 3
19202: PPUSH
19203: LD_INT 0
19205: PPUSH
19206: CALL_OW 1
19210: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
19211: LD_ADDR_VAR 0 2
19215: PUSH
19216: LD_INT 21
19218: PUSH
19219: LD_INT 3
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: LD_INT 30
19231: PUSH
19232: LD_INT 0
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 30
19241: PUSH
19242: LD_INT 1
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 50
19256: PUSH
19257: EMPTY
19258: LIST
19259: PUSH
19260: LD_INT 22
19262: PUSH
19263: LD_VAR 0 3
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: PPUSH
19278: CALL_OW 69
19282: ST_TO_ADDR
// if dep = 0 then
19283: LD_VAR 0 2
19287: PUSH
19288: LD_INT 0
19290: EQUAL
19291: IFFALSE 19295
// exit ;
19293: GO 19421
// hc_name :=  ;
19295: LD_ADDR_OWVAR 26
19299: PUSH
19300: LD_STRING 
19302: ST_TO_ADDR
// hc_importance := 0 ;
19303: LD_ADDR_OWVAR 32
19307: PUSH
19308: LD_INT 0
19310: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
19311: LD_INT 0
19313: PPUSH
19314: LD_INT 0
19316: PPUSH
19317: LD_EXP 6
19321: PUSH
19322: LD_INT 2
19324: DIV
19325: PPUSH
19326: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
19330: LD_ADDR_OWVAR 21
19334: PUSH
19335: LD_EXP 19
19339: PUSH
19340: LD_VAR 0 3
19344: ARRAY
19345: ST_TO_ADDR
// uc_side := aktresp ;
19346: LD_ADDR_OWVAR 20
19350: PUSH
19351: LD_VAR 0 3
19355: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
19356: LD_ADDR_VAR 0 2
19360: PUSH
19361: LD_VAR 0 2
19365: PUSH
19366: LD_INT 1
19368: PPUSH
19369: LD_VAR 0 2
19373: PPUSH
19374: CALL_OW 12
19378: ARRAY
19379: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
19380: CALL_OW 44
19384: PPUSH
19385: LD_VAR 0 2
19389: PPUSH
19390: CALL_OW 250
19394: PPUSH
19395: LD_VAR 0 2
19399: PPUSH
19400: CALL_OW 251
19404: PPUSH
19405: LD_INT 7
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: CALL_OW 50
// end else
19415: GO 19418
// enable ;
19417: ENABLE
// end else
19418: GO 19421
// enable ;
19420: ENABLE
// end ; end_of_file
19421: PPOPN 3
19423: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
19424: LD_INT 0
19426: PPUSH
19427: PPUSH
19428: PPUSH
// BuildUpTime_Delay = 0 ;
19429: LD_ADDR_EXP 60
19433: PUSH
19434: LD_INT 0
19436: ST_TO_ADDR
// if not def_builduptime then
19437: LD_EXP 54
19441: NOT
19442: IFFALSE 19446
// exit ;
19444: GO 19629
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
19446: LD_ADDR_EXP 60
19450: PUSH
19451: LD_INT 8400
19453: PUSH
19454: LD_INT 2100
19456: PUSH
19457: LD_EXP 54
19461: MUL
19462: PLUS
19463: ST_TO_ADDR
// BuildUpTimeActive := true ;
19464: LD_ADDR_EXP 59
19468: PUSH
19469: LD_INT 1
19471: ST_TO_ADDR
// for i := 1 to 8 do
19472: LD_ADDR_VAR 0 2
19476: PUSH
19477: DOUBLE
19478: LD_INT 1
19480: DEC
19481: ST_TO_ADDR
19482: LD_INT 8
19484: PUSH
19485: FOR_TO
19486: IFFALSE 19627
// if Side_Positions [ i ] then
19488: LD_EXP 18
19492: PUSH
19493: LD_VAR 0 2
19497: ARRAY
19498: IFFALSE 19625
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
19500: LD_EXP 58
19504: PUSH
19505: LD_EXP 18
19509: PUSH
19510: LD_VAR 0 2
19514: ARRAY
19515: ARRAY
19516: PPUSH
19517: LD_INT 5
19519: PPUSH
19520: CALL_OW 424
// for j := 1 to 8 do
19524: LD_ADDR_VAR 0 3
19528: PUSH
19529: DOUBLE
19530: LD_INT 1
19532: DEC
19533: ST_TO_ADDR
19534: LD_INT 8
19536: PUSH
19537: FOR_TO
19538: IFFALSE 19623
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19540: LD_EXP 18
19544: PUSH
19545: LD_VAR 0 3
19549: ARRAY
19550: PUSH
19551: LD_EXP 16
19555: PUSH
19556: LD_VAR 0 2
19560: ARRAY
19561: PUSH
19562: LD_EXP 16
19566: PUSH
19567: LD_VAR 0 3
19571: ARRAY
19572: NONEQUAL
19573: PUSH
19574: LD_EXP 20
19578: NOT
19579: PUSH
19580: LD_VAR 0 2
19584: PUSH
19585: LD_VAR 0 3
19589: NONEQUAL
19590: AND
19591: OR
19592: AND
19593: IFFALSE 19621
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19595: LD_VAR 0 3
19599: PPUSH
19600: LD_EXP 58
19604: PUSH
19605: LD_EXP 18
19609: PUSH
19610: LD_VAR 0 2
19614: ARRAY
19615: ARRAY
19616: PPUSH
19617: CALL_OW 333
19621: GO 19537
19623: POP
19624: POP
// end ;
19625: GO 19485
19627: POP
19628: POP
// end ;
19629: LD_VAR 0 1
19633: RET
// export function EndBuildUp ; var i , j ; begin
19634: LD_INT 0
19636: PPUSH
19637: PPUSH
19638: PPUSH
// BuildUpTimeActive := false ;
19639: LD_ADDR_EXP 59
19643: PUSH
19644: LD_INT 0
19646: ST_TO_ADDR
// for i := 1 to 8 do
19647: LD_ADDR_VAR 0 2
19651: PUSH
19652: DOUBLE
19653: LD_INT 1
19655: DEC
19656: ST_TO_ADDR
19657: LD_INT 8
19659: PUSH
19660: FOR_TO
19661: IFFALSE 19802
// if Side_Positions [ i ] then
19663: LD_EXP 18
19667: PUSH
19668: LD_VAR 0 2
19672: ARRAY
19673: IFFALSE 19800
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
19675: LD_EXP 58
19679: PUSH
19680: LD_EXP 18
19684: PUSH
19685: LD_VAR 0 2
19689: ARRAY
19690: ARRAY
19691: PPUSH
19692: LD_INT 0
19694: PPUSH
19695: CALL_OW 424
// for j := 1 to 8 do
19699: LD_ADDR_VAR 0 3
19703: PUSH
19704: DOUBLE
19705: LD_INT 1
19707: DEC
19708: ST_TO_ADDR
19709: LD_INT 8
19711: PUSH
19712: FOR_TO
19713: IFFALSE 19798
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19715: LD_EXP 18
19719: PUSH
19720: LD_VAR 0 3
19724: ARRAY
19725: PUSH
19726: LD_EXP 16
19730: PUSH
19731: LD_VAR 0 2
19735: ARRAY
19736: PUSH
19737: LD_EXP 16
19741: PUSH
19742: LD_VAR 0 3
19746: ARRAY
19747: NONEQUAL
19748: PUSH
19749: LD_EXP 20
19753: NOT
19754: PUSH
19755: LD_VAR 0 2
19759: PUSH
19760: LD_VAR 0 3
19764: NONEQUAL
19765: AND
19766: OR
19767: AND
19768: IFFALSE 19796
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19770: LD_VAR 0 3
19774: PPUSH
19775: LD_EXP 58
19779: PUSH
19780: LD_EXP 18
19784: PUSH
19785: LD_VAR 0 2
19789: ARRAY
19790: ARRAY
19791: PPUSH
19792: CALL_OW 334
19796: GO 19712
19798: POP
19799: POP
// end ;
19800: GO 19660
19802: POP
19803: POP
// end ;
19804: LD_VAR 0 1
19808: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
19809: LD_EXP 59
19813: IFFALSE 19988
19815: GO 19817
19817: DISABLE
19818: LD_INT 0
19820: PPUSH
19821: PPUSH
// begin for i := 1 to 8 do
19822: LD_ADDR_VAR 0 1
19826: PUSH
19827: DOUBLE
19828: LD_INT 1
19830: DEC
19831: ST_TO_ADDR
19832: LD_INT 8
19834: PUSH
19835: FOR_TO
19836: IFFALSE 19985
// if Side_Positions [ i ] then
19838: LD_EXP 18
19842: PUSH
19843: LD_VAR 0 1
19847: ARRAY
19848: IFFALSE 19983
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
19850: LD_ADDR_VAR 0 2
19854: PUSH
19855: LD_EXP 58
19859: PUSH
19860: LD_EXP 18
19864: PUSH
19865: LD_VAR 0 1
19869: ARRAY
19870: ARRAY
19871: PPUSH
19872: LD_INT 2
19874: PUSH
19875: LD_INT 21
19877: PUSH
19878: LD_INT 1
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 21
19887: PUSH
19888: LD_INT 2
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 22
19902: PUSH
19903: LD_OWVAR 2
19907: PUSH
19908: EMPTY
19909: LIST
19910: LIST
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PPUSH
19916: CALL_OW 70
19920: PUSH
19921: FOR_IN
19922: IFFALSE 19981
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
19924: LD_EXP 16
19928: PUSH
19929: LD_VAR 0 1
19933: ARRAY
19934: PUSH
19935: LD_EXP 16
19939: PUSH
19940: LD_OWVAR 2
19944: ARRAY
19945: NONEQUAL
19946: PUSH
19947: LD_EXP 20
19951: NOT
19952: PUSH
19953: LD_VAR 0 1
19957: PUSH
19958: LD_OWVAR 2
19962: NONEQUAL
19963: AND
19964: OR
19965: IFFALSE 19979
// ComMoveToArea ( un , BuildUpEscape ) ;
19967: LD_VAR 0 2
19971: PPUSH
19972: LD_INT 14
19974: PPUSH
19975: CALL_OW 113
19979: GO 19921
19981: POP
19982: POP
19983: GO 19835
19985: POP
19986: POP
// enable ;
19987: ENABLE
// end ;
19988: PPOPN 2
19990: END
// every 0 0$1 trigger def_builduptime do
19991: LD_EXP 54
19995: IFFALSE 20021
19997: GO 19999
19999: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
20000: LD_INT 8400
20002: PUSH
20003: LD_EXP 54
20007: PUSH
20008: LD_INT 2100
20010: MUL
20011: PLUS
20012: PPUSH
20013: CALL_OW 67
// EndBuildUp ;
20017: CALL 19634 0 0
// end ;
20021: END
