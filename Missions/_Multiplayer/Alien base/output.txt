// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_siberit , respawning_time_min , respawning_time_max , buildUpTime_Delay , amount_of_apemen , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 42
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 19
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 17
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 20
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 22
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 18
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 372
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 3 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 3
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 167: LD_ADDR_EXP 19
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 6
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 206: LD_ADDR_EXP 17
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 6
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 0 , 0 , 3 ] ;
 245: LD_ADDR_EXP 20
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 22
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 323: LD_ADDR_EXP 18
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// end ; for i := 1 to 8 do
 372: LD_ADDR_VAR 0 2
 376: PUSH
 377: DOUBLE
 378: LD_INT 1
 380: DEC
 381: ST_TO_ADDR
 382: LD_INT 8
 384: PUSH
 385: FOR_TO
 386: IFFALSE 473
// if Multiplayer_GetPlayerIsSpec ( i ) then
 388: LD_VAR 0 2
 392: PPUSH
 393: CALL_OW 530
 397: IFFALSE 471
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 399: LD_ADDR_EXP 19
 403: PUSH
 404: LD_EXP 19
 408: PPUSH
 409: LD_VAR 0 2
 413: PPUSH
 414: LD_INT 0
 416: PPUSH
 417: CALL_OW 1
 421: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 422: LD_ADDR_EXP 18
 426: PUSH
 427: LD_EXP 18
 431: PPUSH
 432: LD_EXP 17
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: PPUSH
 443: LD_EXP 18
 447: PUSH
 448: LD_EXP 17
 452: PUSH
 453: LD_VAR 0 2
 457: ARRAY
 458: ARRAY
 459: PUSH
 460: LD_VAR 0 2
 464: DIFF
 465: PPUSH
 466: CALL_OW 1
 470: ST_TO_ADDR
// end ;
 471: GO 385
 473: POP
 474: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 475: LD_ADDR_EXP 23
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 0
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: LD_INT 0
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: ST_TO_ADDR
// for i := 1 to 8 do
 506: LD_ADDR_VAR 0 2
 510: PUSH
 511: DOUBLE
 512: LD_INT 1
 514: DEC
 515: ST_TO_ADDR
 516: LD_INT 8
 518: PUSH
 519: FOR_TO
 520: IFFALSE 567
// if Side_Positions [ i ] then
 522: LD_EXP 19
 526: PUSH
 527: LD_VAR 0 2
 531: ARRAY
 532: IFFALSE 565
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 534: LD_ADDR_EXP 23
 538: PUSH
 539: LD_EXP 23
 543: PPUSH
 544: LD_EXP 19
 548: PUSH
 549: LD_VAR 0 2
 553: ARRAY
 554: PPUSH
 555: LD_VAR 0 2
 559: PPUSH
 560: CALL_OW 1
 564: ST_TO_ADDR
 565: GO 519
 567: POP
 568: POP
// Team_Game := 1 ;
 569: LD_ADDR_EXP 21
 573: PUSH
 574: LD_INT 1
 576: ST_TO_ADDR
// if Multiplayer then
 577: LD_OWVAR 4
 581: IFFALSE 827
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 583: LD_ADDR_EXP 44
 587: PUSH
 588: LD_INT 0
 590: PPUSH
 591: CALL_OW 426
 595: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 596: LD_ADDR_EXP 45
 600: PUSH
 601: LD_INT 1
 603: PPUSH
 604: CALL_OW 426
 608: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 609: LD_ADDR_EXP 46
 613: PUSH
 614: LD_INT 2
 616: PPUSH
 617: CALL_OW 426
 621: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 622: LD_ADDR_EXP 47
 626: PUSH
 627: LD_INT 3
 629: PPUSH
 630: CALL_OW 426
 634: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 635: LD_ADDR_EXP 48
 639: PUSH
 640: LD_INT 4
 642: PPUSH
 643: CALL_OW 426
 647: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 648: LD_ADDR_EXP 49
 652: PUSH
 653: LD_INT 5
 655: PPUSH
 656: CALL_OW 426
 660: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 661: LD_ADDR_EXP 50
 665: PUSH
 666: LD_INT 6
 668: PPUSH
 669: CALL_OW 426
 673: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 674: LD_ADDR_EXP 51
 678: PUSH
 679: LD_INT 10
 681: PPUSH
 682: CALL_OW 426
 686: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 687: LD_ADDR_EXP 52
 691: PUSH
 692: LD_INT 11
 694: PPUSH
 695: CALL_OW 426
 699: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 700: LD_ADDR_EXP 53
 704: PUSH
 705: LD_INT 12
 707: PPUSH
 708: CALL_OW 426
 712: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 713: LD_ADDR_EXP 54
 717: PUSH
 718: LD_INT 13
 720: PPUSH
 721: CALL_OW 426
 725: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 726: LD_ADDR_EXP 55
 730: PUSH
 731: LD_INT 14
 733: PPUSH
 734: CALL_OW 426
 738: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 739: LD_ADDR_EXP 1
 743: PUSH
 744: LD_INT 15
 746: PPUSH
 747: CALL_OW 426
 751: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 752: LD_ADDR_EXP 2
 756: PUSH
 757: LD_INT 16
 759: PPUSH
 760: CALL_OW 426
 764: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 765: LD_ADDR_EXP 56
 769: PUSH
 770: LD_INT 17
 772: PPUSH
 773: CALL_OW 426
 777: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 778: LD_ADDR_EXP 57
 782: PUSH
 783: LD_INT 20
 785: PPUSH
 786: CALL_OW 426
 790: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 791: LD_ADDR_EXP 43
 795: PUSH
 796: LD_INT 21
 798: PPUSH
 799: CALL_OW 426
 803: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 804: LD_ADDR_VAR 0 3
 808: PUSH
 809: LD_INT 22
 811: PPUSH
 812: CALL_OW 426
 816: ST_TO_ADDR
// def_win_rules = 0 ;
 817: LD_ADDR_EXP 32
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// end else
 825: GO 983
// begin Randomize ;
 827: CALL_OW 10
// def_base_level := 2 ;
 831: LD_ADDR_EXP 44
 835: PUSH
 836: LD_INT 2
 838: ST_TO_ADDR
// def_amount_of_people := 0 ;
 839: LD_ADDR_EXP 45
 843: PUSH
 844: LD_INT 0
 846: ST_TO_ADDR
// def_skill_level := 1 ;
 847: LD_ADDR_EXP 46
 851: PUSH
 852: LD_INT 1
 854: ST_TO_ADDR
// def_starting_resources := 2 ;
 855: LD_ADDR_EXP 47
 859: PUSH
 860: LD_INT 2
 862: ST_TO_ADDR
// def_shipments_density := 1 ;
 863: LD_ADDR_EXP 48
 867: PUSH
 868: LD_INT 1
 870: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 871: LD_ADDR_EXP 49
 875: PUSH
 876: LD_INT 0
 878: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 879: LD_ADDR_EXP 50
 883: PUSH
 884: LD_INT 1
 886: ST_TO_ADDR
// def_shared_vision := 1 ;
 887: LD_ADDR_EXP 51
 891: PUSH
 892: LD_INT 1
 894: ST_TO_ADDR
// def_morale_flags := 1 ;
 895: LD_ADDR_EXP 52
 899: PUSH
 900: LD_INT 1
 902: ST_TO_ADDR
// def_siberite_detection := 1 ;
 903: LD_ADDR_EXP 53
 907: PUSH
 908: LD_INT 1
 910: ST_TO_ADDR
// def_people_respawning := 2 ;
 911: LD_ADDR_EXP 54
 915: PUSH
 916: LD_INT 2
 918: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 919: LD_ADDR_EXP 55
 923: PUSH
 924: LD_INT 3
 926: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 927: LD_ADDR_EXP 1
 931: PUSH
 932: LD_INT 0
 934: ST_TO_ADDR
// def_public_score := 0 ;
 935: LD_ADDR_EXP 2
 939: PUSH
 940: LD_INT 0
 942: ST_TO_ADDR
// def_siberite_bomb := 4 ;
 943: LD_ADDR_EXP 56
 947: PUSH
 948: LD_INT 4
 950: ST_TO_ADDR
// def_builduptime := 0 ;
 951: LD_ADDR_EXP 57
 955: PUSH
 956: LD_INT 0
 958: ST_TO_ADDR
// def_game_rules := 0 ;
 959: LD_ADDR_EXP 43
 963: PUSH
 964: LD_INT 0
 966: ST_TO_ADDR
// tech_level = 4 ;
 967: LD_ADDR_VAR 0 3
 971: PUSH
 972: LD_INT 4
 974: ST_TO_ADDR
// def_win_rules = 0 ;
 975: LD_ADDR_EXP 32
 979: PUSH
 980: LD_INT 0
 982: ST_TO_ADDR
// end ; InitGameRules ;
 983: CALL 10602 0 0
// if def_game_rules = 0 then
 987: LD_EXP 43
 991: PUSH
 992: LD_INT 0
 994: EQUAL
 995: IFFALSE 1046
// begin if isSGUI then
 997: LD_OWVAR 83
1001: IFFALSE 1009
// setMpTechs ( ) else
1003: CALL 15495 0 0
1007: GO 1046
// begin if Game_Type = 3 then
1009: LD_EXP 42
1013: PUSH
1014: LD_INT 3
1016: EQUAL
1017: IFFALSE 1033
// tech_level = tech_level + 3 ;
1019: LD_ADDR_VAR 0 3
1023: PUSH
1024: LD_VAR 0 3
1028: PUSH
1029: LD_INT 3
1031: PLUS
1032: ST_TO_ADDR
// SetMpTechLevel ( tech_level + 1 ) ;
1033: LD_VAR 0 3
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: PPUSH
1042: CALL 15642 0 1
// end ; end ; if ( Game_Type = 5 ) then
1046: LD_EXP 42
1050: PUSH
1051: LD_INT 5
1053: EQUAL
1054: IFFALSE 1083
// begin def_base_level := 1 ;
1056: LD_ADDR_EXP 44
1060: PUSH
1061: LD_INT 1
1063: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
1064: LD_ADDR_EXP 49
1068: PUSH
1069: LD_INT 0
1071: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
1072: LD_ADDR_EXP 50
1076: PUSH
1077: LD_INT 0
1079: ST_TO_ADDR
// disable ( 10 ) ;
1080: LD_INT 10
1082: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
1083: LD_ADDR_EXP 3
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 1
1093: PUSH
1094: LD_INT 1
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: LD_EXP 44
1106: PUSH
1107: LD_INT 1
1109: PLUS
1110: ARRAY
1111: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
1112: LD_ADDR_EXP 4
1116: PUSH
1117: LD_INT 0
1119: PUSH
1120: LD_INT 0
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: PUSH
1131: LD_EXP 44
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: ARRAY
1140: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1141: LD_ADDR_EXP 5
1145: PUSH
1146: LD_EXP 45
1150: PUSH
1151: LD_INT 4
1153: PLUS
1154: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1155: LD_ADDR_EXP 9
1159: PUSH
1160: LD_INT 150
1162: PUSH
1163: LD_EXP 48
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: MINUS
1172: ST_TO_ADDR
// if def_people_respawning = 0 then
1173: LD_EXP 54
1177: PUSH
1178: LD_INT 0
1180: EQUAL
1181: IFFALSE 1201
// begin respawning_time_min = 0 ;
1183: LD_ADDR_EXP 12
1187: PUSH
1188: LD_INT 0
1190: ST_TO_ADDR
// respawning_time_max = 0 ;
1191: LD_ADDR_EXP 13
1195: PUSH
1196: LD_INT 0
1198: ST_TO_ADDR
// end else
1199: GO 1245
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1201: LD_ADDR_EXP 12
1205: PUSH
1206: LD_INT 10500
1208: PUSH
1209: LD_INT 5
1211: DIVREAL
1212: PUSH
1213: LD_INT 6
1215: PUSH
1216: LD_EXP 54
1220: MINUS
1221: MUL
1222: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1223: LD_ADDR_EXP 13
1227: PUSH
1228: LD_INT 31500
1230: PUSH
1231: LD_INT 5
1233: DIVREAL
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: LD_EXP 54
1242: MINUS
1243: MUL
1244: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1245: LD_EXP 55
1249: NOT
1250: IFFALSE 1262
// amount_of_apemen := 0 else
1252: LD_ADDR_EXP 15
1256: PUSH
1257: LD_INT 0
1259: ST_TO_ADDR
1260: GO 1272
// amount_of_apemen := def_amount_of_apemen ;
1262: LD_ADDR_EXP 15
1266: PUSH
1267: LD_EXP 55
1271: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1272: LD_EXP 56
1276: PUSH
1277: LD_INT 0
1279: EQUAL
1280: IFFALSE 1292
// siberite_bomb_Delay = 0 else
1282: LD_ADDR_EXP 16
1286: PUSH
1287: LD_INT 0
1289: ST_TO_ADDR
1290: GO 1314
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1292: LD_ADDR_EXP 16
1296: PUSH
1297: LD_EXP 56
1301: PUSH
1302: LD_INT 1
1304: MINUS
1305: PUSH
1306: LD_INT 21000
1308: MUL
1309: PUSH
1310: LD_INT 1
1312: PLUS
1313: ST_TO_ADDR
// if def_builduptime = 0 then
1314: LD_EXP 57
1318: PUSH
1319: LD_INT 0
1321: EQUAL
1322: IFFALSE 1334
// buildUpTime_Delay = 0 else
1324: LD_ADDR_EXP 14
1328: PUSH
1329: LD_INT 0
1331: ST_TO_ADDR
1332: GO 1352
// buildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
1334: LD_ADDR_EXP 14
1338: PUSH
1339: LD_INT 8400
1341: PUSH
1342: LD_INT 2100
1344: PUSH
1345: LD_EXP 57
1349: MUL
1350: PLUS
1351: ST_TO_ADDR
// amount_of_siberit = 30 + def_amount_of_siberit * 5 ;
1352: LD_ADDR_EXP 11
1356: PUSH
1357: LD_INT 30
1359: PUSH
1360: LD_EXP 1
1364: PUSH
1365: LD_INT 5
1367: MUL
1368: PLUS
1369: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1370: LD_ADDR_EXP 6
1374: PUSH
1375: LD_INT 2
1377: PUSH
1378: LD_INT 3
1380: PUSH
1381: LD_INT 4
1383: PUSH
1384: LD_INT 5
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: PUSH
1393: LD_EXP 46
1397: PUSH
1398: LD_INT 1
1400: PLUS
1401: ARRAY
1402: ST_TO_ADDR
// if ( Game_Type = 5 ) then
1403: LD_EXP 42
1407: PUSH
1408: LD_INT 5
1410: EQUAL
1411: IFFALSE 1529
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1413: LD_ADDR_EXP 8
1417: PUSH
1418: LD_INT 1000
1420: PUSH
1421: LD_INT 100
1423: PUSH
1424: LD_INT 100
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 2000
1434: PUSH
1435: LD_INT 200
1437: PUSH
1438: LD_INT 200
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PUSH
1446: LD_INT 5000
1448: PUSH
1449: LD_INT 500
1451: PUSH
1452: LD_INT 500
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 10000
1462: PUSH
1463: LD_INT 1000
1465: PUSH
1466: LD_INT 1000
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 25000
1476: PUSH
1477: LD_INT 2500
1479: PUSH
1480: LD_INT 2500
1482: PUSH
1483: EMPTY
1484: LIST
1485: LIST
1486: LIST
1487: PUSH
1488: LD_INT 50000
1490: PUSH
1491: LD_INT 5000
1493: PUSH
1494: LD_INT 5000
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: PUSH
1510: LD_EXP 47
1514: PUSH
1515: LD_INT 1
1517: PLUS
1518: ARRAY
1519: ST_TO_ADDR
// starting_crates := [ ] ;
1520: LD_ADDR_EXP 7
1524: PUSH
1525: EMPTY
1526: ST_TO_ADDR
// end else
1527: GO 1675
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1529: LD_ADDR_EXP 8
1533: PUSH
1534: LD_INT 0
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 30
1550: PUSH
1551: LD_INT 0
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 50
1564: PUSH
1565: LD_INT 20
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_INT 80
1578: PUSH
1579: LD_INT 40
1581: PUSH
1582: LD_INT 20
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PUSH
1596: LD_EXP 47
1600: PUSH
1601: LD_INT 1
1603: PLUS
1604: ARRAY
1605: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1606: LD_ADDR_EXP 7
1610: PUSH
1611: LD_INT 10
1613: PUSH
1614: EMPTY
1615: LIST
1616: PUSH
1617: LD_INT 7
1619: PUSH
1620: LD_INT 14
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 6
1629: PUSH
1630: LD_INT 12
1632: PUSH
1633: LD_INT 18
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 5
1643: PUSH
1644: LD_INT 10
1646: PUSH
1647: LD_INT 15
1649: PUSH
1650: LD_INT 20
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: LD_EXP 47
1669: PUSH
1670: LD_INT 1
1672: PLUS
1673: ARRAY
1674: ST_TO_ADDR
// end ; morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1675: LD_ADDR_EXP 10
1679: PUSH
1680: LD_INT 1
1682: NEG
1683: PUSH
1684: LD_INT 350
1686: PUSH
1687: LD_INT 700
1689: PUSH
1690: LD_INT 1400
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: PUSH
1703: LD_EXP 52
1707: PUSH
1708: LD_INT 1
1710: PLUS
1711: ARRAY
1712: ST_TO_ADDR
// battle_flags_id := [ ] ;
1713: LD_ADDR_EXP 31
1717: PUSH
1718: EMPTY
1719: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1720: LD_ADDR_EXP 41
1724: PUSH
1725: LD_INT 8
1727: PUSH
1728: LD_INT 9
1730: PUSH
1731: LD_INT 10
1733: PUSH
1734: LD_INT 11
1736: PUSH
1737: LD_INT 12
1739: PUSH
1740: LD_INT 13
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: ST_TO_ADDR
// end ;
1751: LD_VAR 0 1
1755: RET
// function init_map ; var i , j ; begin
1756: LD_INT 0
1758: PPUSH
1759: PPUSH
1760: PPUSH
// normal_oil_deposits_locations := [ [ 28 , 22 ] , [ 69 , 3 ] , [ 138 , 27 ] , [ 180 , 104 ] , [ 138 , 137 ] , [ 76 , 115 ] ] ;
1761: LD_ADDR_EXP 27
1765: PUSH
1766: LD_INT 28
1768: PUSH
1769: LD_INT 22
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 69
1778: PUSH
1779: LD_INT 3
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 138
1788: PUSH
1789: LD_INT 27
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 180
1798: PUSH
1799: LD_INT 104
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: PUSH
1806: LD_INT 138
1808: PUSH
1809: LD_INT 137
1811: PUSH
1812: EMPTY
1813: LIST
1814: LIST
1815: PUSH
1816: LD_INT 76
1818: PUSH
1819: LD_INT 115
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 31 , 38 ] , [ 34 , 21 ] ] , [ [ 58 , 4 ] , [ 82 , 4 ] ] , [ [ 122 , 18 ] , [ 152 , 43 ] ] , [ [ 174 , 90 ] , [ 180 , 120 ] ] , [ [ 152 , 136 ] , [ 130 , 136 ] ] , [ [ 89 , 116 ] , [ 59 , 89 ] ] ] ;
1834: LD_ADDR_EXP 28
1838: PUSH
1839: LD_INT 31
1841: PUSH
1842: LD_INT 38
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: LD_INT 34
1851: PUSH
1852: LD_INT 21
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 58
1865: PUSH
1866: LD_INT 4
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 82
1875: PUSH
1876: LD_INT 4
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 122
1889: PUSH
1890: LD_INT 18
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 152
1899: PUSH
1900: LD_INT 43
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PUSH
1911: LD_INT 174
1913: PUSH
1914: LD_INT 90
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: PUSH
1921: LD_INT 180
1923: PUSH
1924: LD_INT 120
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 152
1937: PUSH
1938: LD_INT 136
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 130
1947: PUSH
1948: LD_INT 136
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 89
1961: PUSH
1962: LD_INT 116
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: LD_INT 59
1971: PUSH
1972: LD_INT 89
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 28 , 26 ] , [ 73 , 3 ] , [ 133 , 22 ] , [ 180 , 110 ] , [ 142 , 137 ] , [ 72 , 112 ] ] ;
1991: LD_ADDR_EXP 29
1995: PUSH
1996: LD_INT 28
1998: PUSH
1999: LD_INT 26
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 73
2008: PUSH
2009: LD_INT 3
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 133
2018: PUSH
2019: LD_INT 22
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 180
2028: PUSH
2029: LD_INT 110
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 142
2038: PUSH
2039: LD_INT 137
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 72
2048: PUSH
2049: LD_INT 112
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 27 , 39 ] , [ 30 , 16 ] ] , [ [ 57 , 8 ] , [ 87 , 8 ] ] , [ [ 128 , 19 ] , [ 146 , 36 ] ] , [ [ 176 , 121 ] , [ 179 , 96 ] ] , [ [ 153 , 132 ] , [ 124 , 133 ] ] , [ [ 85 , 117 ] , [ 62 , 96 ] ] ] ;
2064: LD_ADDR_EXP 30
2068: PUSH
2069: LD_INT 27
2071: PUSH
2072: LD_INT 39
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 30
2081: PUSH
2082: LD_INT 16
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 57
2095: PUSH
2096: LD_INT 8
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: LD_INT 87
2105: PUSH
2106: LD_INT 8
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 128
2119: PUSH
2120: LD_INT 19
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: LD_INT 146
2129: PUSH
2130: LD_INT 36
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: PUSH
2141: LD_INT 176
2143: PUSH
2144: LD_INT 121
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: PUSH
2151: LD_INT 179
2153: PUSH
2154: LD_INT 96
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: LD_INT 153
2167: PUSH
2168: LD_INT 132
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PUSH
2175: LD_INT 124
2177: PUSH
2178: LD_INT 133
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PUSH
2189: LD_INT 85
2191: PUSH
2192: LD_INT 117
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: PUSH
2199: LD_INT 62
2201: PUSH
2202: LD_INT 96
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: ST_TO_ADDR
// depot_def := [ [ 53 , 42 , 5 ] , [ 78 , 18 , 0 ] , [ 129 , 43 , 1 ] , [ 155 , 96 , 2 ] , [ 130 , 120 , 3 ] , [ 82 , 98 , 3 ] ] ;
2221: LD_ADDR_EXP 24
2225: PUSH
2226: LD_INT 53
2228: PUSH
2229: LD_INT 42
2231: PUSH
2232: LD_INT 5
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: LD_INT 78
2242: PUSH
2243: LD_INT 18
2245: PUSH
2246: LD_INT 0
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: LIST
2253: PUSH
2254: LD_INT 129
2256: PUSH
2257: LD_INT 43
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 155
2270: PUSH
2271: LD_INT 96
2273: PUSH
2274: LD_INT 2
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 130
2284: PUSH
2285: LD_INT 120
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 82
2298: PUSH
2299: LD_INT 98
2301: PUSH
2302: LD_INT 3
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: ST_TO_ADDR
// for i in depot_def do
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: LD_EXP 24
2327: PUSH
2328: FOR_IN
2329: IFFALSE 2403
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2331: LD_ADDR_EXP 26
2335: PUSH
2336: LD_EXP 26
2340: PUSH
2341: LD_VAR 0 2
2345: PUSH
2346: LD_INT 1
2348: ARRAY
2349: PPUSH
2350: LD_VAR 0 2
2354: PUSH
2355: LD_INT 3
2357: ARRAY
2358: PPUSH
2359: LD_INT 10
2361: PPUSH
2362: CALL_OW 272
2366: PUSH
2367: LD_VAR 0 2
2371: PUSH
2372: LD_INT 2
2374: ARRAY
2375: PPUSH
2376: LD_VAR 0 2
2380: PUSH
2381: LD_INT 3
2383: ARRAY
2384: PPUSH
2385: LD_INT 10
2387: PPUSH
2388: CALL_OW 273
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PUSH
2397: EMPTY
2398: LIST
2399: ADD
2400: ST_TO_ADDR
2401: GO 2328
2403: POP
2404: POP
// breastworks_def := [ [ [ 65 , 53 , 5 ] , [ 65 , 40 , 4 ] ] , [ [ 76 , 28 , 0 ] , [ 89 , 28 , 5 ] ] , [ [ 115 , 41 , 1 ] , [ 128 , 54 , 0 ] ] , [ [ 143 , 82 , 2 ] , [ 143 , 95 , 1 ] ] , [ [ 131 , 108 , 3 ] , [ 118 , 108 , 2 ] ] , [ [ 80 , 85 , 3 ] , [ 92 , 97 , 4 ] ] ] ;
2405: LD_ADDR_EXP 25
2409: PUSH
2410: LD_INT 65
2412: PUSH
2413: LD_INT 53
2415: PUSH
2416: LD_INT 5
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: LIST
2423: PUSH
2424: LD_INT 65
2426: PUSH
2427: LD_INT 40
2429: PUSH
2430: LD_INT 4
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 76
2444: PUSH
2445: LD_INT 28
2447: PUSH
2448: LD_INT 0
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 89
2458: PUSH
2459: LD_INT 28
2461: PUSH
2462: LD_INT 5
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: LIST
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: PUSH
2474: LD_INT 115
2476: PUSH
2477: LD_INT 41
2479: PUSH
2480: LD_INT 1
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 128
2490: PUSH
2491: LD_INT 54
2493: PUSH
2494: LD_INT 0
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: PUSH
2506: LD_INT 143
2508: PUSH
2509: LD_INT 82
2511: PUSH
2512: LD_INT 2
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 143
2522: PUSH
2523: LD_INT 95
2525: PUSH
2526: LD_INT 1
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: PUSH
2538: LD_INT 131
2540: PUSH
2541: LD_INT 108
2543: PUSH
2544: LD_INT 3
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 118
2554: PUSH
2555: LD_INT 108
2557: PUSH
2558: LD_INT 2
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: LIST
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PUSH
2570: LD_INT 80
2572: PUSH
2573: LD_INT 85
2575: PUSH
2576: LD_INT 3
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: PUSH
2584: LD_INT 92
2586: PUSH
2587: LD_INT 97
2589: PUSH
2590: LD_INT 4
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: ST_TO_ADDR
// for i = 1 to Side_Positions do
2610: LD_ADDR_VAR 0 2
2614: PUSH
2615: DOUBLE
2616: LD_INT 1
2618: DEC
2619: ST_TO_ADDR
2620: LD_EXP 19
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2756
// begin if not Side_Positions [ i ] then
2628: LD_EXP 19
2632: PUSH
2633: LD_VAR 0 2
2637: ARRAY
2638: NOT
2639: IFFALSE 2643
// continue ;
2641: GO 2625
// if def_extra_oil_deposits then
2643: LD_EXP 49
2647: IFFALSE 2705
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2649: LD_ADDR_VAR 0 3
2653: PUSH
2654: LD_EXP 28
2658: PUSH
2659: LD_EXP 19
2663: PUSH
2664: LD_VAR 0 2
2668: ARRAY
2669: ARRAY
2670: PUSH
2671: FOR_IN
2672: IFFALSE 2701
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2674: LD_VAR 0 3
2678: PUSH
2679: LD_INT 1
2681: ARRAY
2682: PPUSH
2683: LD_VAR 0 3
2687: PUSH
2688: LD_INT 2
2690: ARRAY
2691: PPUSH
2692: LD_INT 2
2694: PPUSH
2695: CALL_OW 62
2699: GO 2671
2701: POP
2702: POP
2703: GO 2754
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2705: LD_EXP 27
2709: PUSH
2710: LD_EXP 19
2714: PUSH
2715: LD_VAR 0 2
2719: ARRAY
2720: ARRAY
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: PPUSH
2726: LD_EXP 27
2730: PUSH
2731: LD_EXP 19
2735: PUSH
2736: LD_VAR 0 2
2740: ARRAY
2741: ARRAY
2742: PUSH
2743: LD_INT 2
2745: ARRAY
2746: PPUSH
2747: LD_INT 2
2749: PPUSH
2750: CALL_OW 62
// end ;
2754: GO 2625
2756: POP
2757: POP
// if def_extra_sib_deposits then
2758: LD_EXP 50
2762: IFFALSE 2916
// for i = 1 to Side_Positions do
2764: LD_ADDR_VAR 0 2
2768: PUSH
2769: DOUBLE
2770: LD_INT 1
2772: DEC
2773: ST_TO_ADDR
2774: LD_EXP 19
2778: PUSH
2779: FOR_TO
2780: IFFALSE 2914
// begin if not Side_Positions [ i ] then
2782: LD_EXP 19
2786: PUSH
2787: LD_VAR 0 2
2791: ARRAY
2792: NOT
2793: IFFALSE 2797
// continue ;
2795: GO 2779
// if def_extra_sib_deposits = 2 then
2797: LD_EXP 50
2801: PUSH
2802: LD_INT 2
2804: EQUAL
2805: IFFALSE 2863
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2807: LD_ADDR_VAR 0 3
2811: PUSH
2812: LD_EXP 30
2816: PUSH
2817: LD_EXP 19
2821: PUSH
2822: LD_VAR 0 2
2826: ARRAY
2827: ARRAY
2828: PUSH
2829: FOR_IN
2830: IFFALSE 2859
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2832: LD_VAR 0 3
2836: PUSH
2837: LD_INT 1
2839: ARRAY
2840: PPUSH
2841: LD_VAR 0 3
2845: PUSH
2846: LD_INT 2
2848: ARRAY
2849: PPUSH
2850: LD_INT 3
2852: PPUSH
2853: CALL_OW 62
2857: GO 2829
2859: POP
2860: POP
2861: GO 2912
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2863: LD_EXP 29
2867: PUSH
2868: LD_EXP 19
2872: PUSH
2873: LD_VAR 0 2
2877: ARRAY
2878: ARRAY
2879: PUSH
2880: LD_INT 1
2882: ARRAY
2883: PPUSH
2884: LD_EXP 29
2888: PUSH
2889: LD_EXP 19
2893: PUSH
2894: LD_VAR 0 2
2898: ARRAY
2899: ARRAY
2900: PUSH
2901: LD_INT 2
2903: ARRAY
2904: PPUSH
2905: LD_INT 3
2907: PPUSH
2908: CALL_OW 62
// end ;
2912: GO 2779
2914: POP
2915: POP
// end ;
2916: LD_VAR 0 1
2920: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2921: LD_INT 0
2923: PPUSH
2924: PPUSH
2925: PPUSH
// if not Team_Game then
2926: LD_EXP 21
2930: NOT
2931: IFFALSE 3029
// begin for i = 1 to 8 do
2933: LD_ADDR_VAR 0 2
2937: PUSH
2938: DOUBLE
2939: LD_INT 1
2941: DEC
2942: ST_TO_ADDR
2943: LD_INT 8
2945: PUSH
2946: FOR_TO
2947: IFFALSE 3025
// for j = 1 to 8 do
2949: LD_ADDR_VAR 0 3
2953: PUSH
2954: DOUBLE
2955: LD_INT 1
2957: DEC
2958: ST_TO_ADDR
2959: LD_INT 8
2961: PUSH
2962: FOR_TO
2963: IFFALSE 3021
// if i <> j then
2965: LD_VAR 0 2
2969: PUSH
2970: LD_VAR 0 3
2974: NONEQUAL
2975: IFFALSE 2999
// SetAttitude ( i , j , att_neutral , true ) else
2977: LD_VAR 0 2
2981: PPUSH
2982: LD_VAR 0 3
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: LD_INT 1
2992: PPUSH
2993: CALL_OW 80
2997: GO 3019
// SetAttitude ( i , j , att_friend , true ) ;
2999: LD_VAR 0 2
3003: PPUSH
3004: LD_VAR 0 3
3008: PPUSH
3009: LD_INT 1
3011: PPUSH
3012: LD_INT 1
3014: PPUSH
3015: CALL_OW 80
3019: GO 2962
3021: POP
3022: POP
3023: GO 2946
3025: POP
3026: POP
// end else
3027: GO 3204
// begin if def_shared_vision then
3029: LD_EXP 51
3033: IFFALSE 3098
// begin for i in Teams do
3035: LD_ADDR_VAR 0 2
3039: PUSH
3040: LD_EXP 18
3044: PUSH
3045: FOR_IN
3046: IFFALSE 3096
// for j = 2 to i do
3048: LD_ADDR_VAR 0 3
3052: PUSH
3053: DOUBLE
3054: LD_INT 2
3056: DEC
3057: ST_TO_ADDR
3058: LD_VAR 0 2
3062: PUSH
3063: FOR_TO
3064: IFFALSE 3092
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3066: LD_VAR 0 2
3070: PUSH
3071: LD_VAR 0 3
3075: ARRAY
3076: PPUSH
3077: LD_VAR 0 2
3081: PUSH
3082: LD_INT 1
3084: ARRAY
3085: PPUSH
3086: CALL_OW 343
3090: GO 3063
3092: POP
3093: POP
3094: GO 3045
3096: POP
3097: POP
// end ; for i = 1 to 8 do
3098: LD_ADDR_VAR 0 2
3102: PUSH
3103: DOUBLE
3104: LD_INT 1
3106: DEC
3107: ST_TO_ADDR
3108: LD_INT 8
3110: PUSH
3111: FOR_TO
3112: IFFALSE 3202
// for j = 1 to 8 do
3114: LD_ADDR_VAR 0 3
3118: PUSH
3119: DOUBLE
3120: LD_INT 1
3122: DEC
3123: ST_TO_ADDR
3124: LD_INT 8
3126: PUSH
3127: FOR_TO
3128: IFFALSE 3198
// if Side_Teams [ i ] = Side_Teams [ j ] then
3130: LD_EXP 17
3134: PUSH
3135: LD_VAR 0 2
3139: ARRAY
3140: PUSH
3141: LD_EXP 17
3145: PUSH
3146: LD_VAR 0 3
3150: ARRAY
3151: EQUAL
3152: IFFALSE 3176
// SetAttitude ( i , j , att_friend , true ) else
3154: LD_VAR 0 2
3158: PPUSH
3159: LD_VAR 0 3
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_INT 1
3169: PPUSH
3170: CALL_OW 80
3174: GO 3196
// SetAttitude ( i , j , att_enemy , true ) ;
3176: LD_VAR 0 2
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: LD_INT 2
3188: PPUSH
3189: LD_INT 1
3191: PPUSH
3192: CALL_OW 80
3196: GO 3127
3198: POP
3199: POP
3200: GO 3111
3202: POP
3203: POP
// end ; end ;
3204: LD_VAR 0 1
3208: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3209: LD_INT 0
3211: PPUSH
3212: PPUSH
3213: PPUSH
3214: PPUSH
// result := [ ] ;
3215: LD_ADDR_VAR 0 7
3219: PUSH
3220: EMPTY
3221: ST_TO_ADDR
// for i := 1 to count do
3222: LD_ADDR_VAR 0 8
3226: PUSH
3227: DOUBLE
3228: LD_INT 1
3230: DEC
3231: ST_TO_ADDR
3232: LD_VAR 0 1
3236: PUSH
3237: FOR_TO
3238: IFFALSE 3656
// begin uc_direction := Rand ( 0 , 5 ) ;
3240: LD_ADDR_OWVAR 24
3244: PUSH
3245: LD_INT 0
3247: PPUSH
3248: LD_INT 5
3250: PPUSH
3251: CALL_OW 12
3255: ST_TO_ADDR
// if commander then
3256: LD_LOC 1
3260: IFFALSE 3369
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3262: LD_ADDR_OWVAR 26
3266: PUSH
3267: LD_OWVAR 19
3271: PUSH
3272: LD_OWVAR 20
3276: ARRAY
3277: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3278: LD_INT 1
3280: PPUSH
3281: LD_INT 2
3283: PPUSH
3284: CALL_OW 12
3288: PPUSH
3289: LD_VAR 0 2
3293: PPUSH
3294: LD_EXP 6
3298: PUSH
3299: LD_INT 2
3301: PLUS
3302: PPUSH
3303: CALL_OW 380
// hc_importance := 105 ;
3307: LD_ADDR_OWVAR 32
3311: PUSH
3312: LD_INT 105
3314: ST_TO_ADDR
// commander := false ;
3315: LD_ADDR_LOC 1
3319: PUSH
3320: LD_INT 0
3322: ST_TO_ADDR
// if Multiplayer then
3323: LD_OWVAR 4
3327: IFFALSE 3367
// begin hc_gallery := MULTIAVATARS ;
3329: LD_ADDR_OWVAR 33
3333: PUSH
3334: LD_STRING MULTIAVATARS
3336: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3337: LD_ADDR_OWVAR 34
3341: PUSH
3342: LD_OWVAR 20
3346: PPUSH
3347: CALL_OW 525
3351: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3352: LD_ADDR_OWVAR 27
3356: PUSH
3357: LD_OWVAR 20
3361: PPUSH
3362: CALL_OW 526
3366: ST_TO_ADDR
// end ; end else
3367: GO 3432
// begin hc_name :=  ;
3369: LD_ADDR_OWVAR 26
3373: PUSH
3374: LD_STRING 
3376: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3377: LD_INT 1
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: CALL_OW 12
3387: PPUSH
3388: LD_VAR 0 2
3392: PPUSH
3393: LD_EXP 6
3397: PPUSH
3398: CALL_OW 380
// hc_importance := 0 ;
3402: LD_ADDR_OWVAR 32
3406: PUSH
3407: LD_INT 0
3409: ST_TO_ADDR
// if Multiplayer then
3410: LD_OWVAR 4
3414: IFFALSE 3432
// begin hc_gallery :=  ;
3416: LD_ADDR_OWVAR 33
3420: PUSH
3421: LD_STRING 
3423: ST_TO_ADDR
// hc_face_number := 0 ;
3424: LD_ADDR_OWVAR 34
3428: PUSH
3429: LD_INT 0
3431: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3432: LD_ADDR_VAR 0 10
3436: PUSH
3437: CALL_OW 44
3441: ST_TO_ADDR
// if global_defined then
3442: LD_LOC 3
3446: IFFALSE 3586
// begin if ( cl = class_soldier ) then
3448: LD_VAR 0 2
3452: PUSH
3453: LD_INT 1
3455: EQUAL
3456: IFFALSE 3476
// j := i + soldiers_created else
3458: LD_ADDR_VAR 0 9
3462: PUSH
3463: LD_VAR 0 8
3467: PUSH
3468: LD_LOC 4
3472: PLUS
3473: ST_TO_ADDR
3474: GO 3486
// j := i ;
3476: LD_ADDR_VAR 0 9
3480: PUSH
3481: LD_VAR 0 8
3485: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3486: LD_LOC 2
3490: PUSH
3491: LD_VAR 0 2
3495: ARRAY
3496: PUSH
3497: LD_VAR 0 9
3501: ARRAY
3502: PPUSH
3503: LD_VAR 0 10
3507: PPUSH
3508: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3512: LD_VAR 0 10
3516: PPUSH
3517: LD_INT 2
3519: PPUSH
3520: LD_LOC 2
3524: PUSH
3525: LD_VAR 0 2
3529: ARRAY
3530: PUSH
3531: LD_VAR 0 9
3535: ARRAY
3536: PPUSH
3537: LD_INT 2
3539: PPUSH
3540: CALL_OW 260
3544: PPUSH
3545: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3549: LD_VAR 0 10
3553: PPUSH
3554: LD_INT 1
3556: PPUSH
3557: LD_LOC 2
3561: PUSH
3562: LD_VAR 0 2
3566: ARRAY
3567: PUSH
3568: LD_VAR 0 9
3572: ARRAY
3573: PPUSH
3574: LD_INT 1
3576: PPUSH
3577: CALL_OW 260
3581: PPUSH
3582: CALL_OW 239
// end ; if building then
3586: LD_VAR 0 6
3590: IFFALSE 3608
// PlaceHumanInUnit ( un , building ) else
3592: LD_VAR 0 10
3596: PPUSH
3597: LD_VAR 0 6
3601: PPUSH
3602: CALL_OW 52
3606: GO 3635
// PlaceUnitXYR ( un , x , y , r , false ) ;
3608: LD_VAR 0 10
3612: PPUSH
3613: LD_VAR 0 3
3617: PPUSH
3618: LD_VAR 0 4
3622: PPUSH
3623: LD_VAR 0 5
3627: PPUSH
3628: LD_INT 0
3630: PPUSH
3631: CALL_OW 50
// result := result ^ [ un ] ;
3635: LD_ADDR_VAR 0 7
3639: PUSH
3640: LD_VAR 0 7
3644: PUSH
3645: LD_VAR 0 10
3649: PUSH
3650: EMPTY
3651: LIST
3652: ADD
3653: ST_TO_ADDR
// end ;
3654: GO 3237
3656: POP
3657: POP
// if not global_defined then
3658: LD_LOC 3
3662: NOT
3663: IFFALSE 3741
// if ( global_units >= cl ) then
3665: LD_LOC 2
3669: PUSH
3670: LD_VAR 0 2
3674: GREATEREQUAL
3675: IFFALSE 3716
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3677: LD_ADDR_LOC 2
3681: PUSH
3682: LD_LOC 2
3686: PPUSH
3687: LD_VAR 0 2
3691: PPUSH
3692: LD_LOC 2
3696: PUSH
3697: LD_VAR 0 2
3701: ARRAY
3702: PUSH
3703: LD_VAR 0 7
3707: ADD
3708: PPUSH
3709: CALL_OW 1
3713: ST_TO_ADDR
3714: GO 3741
// global_units := Replace ( global_units , cl , result ) ;
3716: LD_ADDR_LOC 2
3720: PUSH
3721: LD_LOC 2
3725: PPUSH
3726: LD_VAR 0 2
3730: PPUSH
3731: LD_VAR 0 7
3735: PPUSH
3736: CALL_OW 1
3740: ST_TO_ADDR
// if commander then
3741: LD_LOC 1
3745: IFFALSE 3792
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3747: LD_ADDR_EXP 33
3751: PUSH
3752: LD_EXP 33
3756: PPUSH
3757: LD_OWVAR 20
3761: PPUSH
3762: LD_EXP 33
3766: PUSH
3767: LD_OWVAR 20
3771: ARRAY
3772: PUSH
3773: LD_VAR 0 10
3777: ADD
3778: PPUSH
3779: CALL_OW 1
3783: ST_TO_ADDR
// commander := false ;
3784: LD_ADDR_LOC 1
3788: PUSH
3789: LD_INT 0
3791: ST_TO_ADDR
// end ; end ;
3792: LD_VAR 0 7
3796: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3797: LD_INT 0
3799: PPUSH
3800: PPUSH
3801: PPUSH
3802: PPUSH
3803: PPUSH
3804: PPUSH
3805: PPUSH
3806: PPUSH
3807: PPUSH
// pos := Side_Positions [ side ] ;
3808: LD_ADDR_VAR 0 3
3812: PUSH
3813: LD_EXP 19
3817: PUSH
3818: LD_VAR 0 1
3822: ARRAY
3823: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3824: LD_ADDR_OWVAR 21
3828: PUSH
3829: LD_EXP 20
3833: PUSH
3834: LD_VAR 0 1
3838: ARRAY
3839: ST_TO_ADDR
// uc_side := side ;
3840: LD_ADDR_OWVAR 20
3844: PUSH
3845: LD_VAR 0 1
3849: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3850: LD_ADDR_VAR 0 4
3854: PUSH
3855: LD_EXP 24
3859: PUSH
3860: LD_VAR 0 3
3864: ARRAY
3865: PUSH
3866: LD_INT 1
3868: ARRAY
3869: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3870: LD_ADDR_VAR 0 5
3874: PUSH
3875: LD_EXP 24
3879: PUSH
3880: LD_VAR 0 3
3884: ARRAY
3885: PUSH
3886: LD_INT 2
3888: ARRAY
3889: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3890: LD_ADDR_VAR 0 6
3894: PUSH
3895: LD_EXP 24
3899: PUSH
3900: LD_VAR 0 3
3904: ARRAY
3905: PUSH
3906: LD_INT 3
3908: ARRAY
3909: ST_TO_ADDR
// if is_depot then
3910: LD_EXP 3
3914: IFFALSE 4047
// begin bc_type = b_depot ;
3916: LD_ADDR_OWVAR 42
3920: PUSH
3921: LD_INT 0
3923: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3924: LD_ADDR_VAR 0 10
3928: PUSH
3929: LD_VAR 0 4
3933: PPUSH
3934: LD_VAR 0 5
3938: PPUSH
3939: LD_VAR 0 6
3943: PPUSH
3944: CALL_OW 47
3948: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3949: LD_VAR 0 10
3953: PPUSH
3954: LD_STRING @
3956: PUSH
3957: LD_VAR 0 1
3961: STR
3962: PPUSH
3963: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3967: LD_VAR 0 10
3971: PPUSH
3972: CALL_OW 274
3976: PPUSH
3977: LD_INT 1
3979: PPUSH
3980: LD_EXP 8
3984: PUSH
3985: LD_INT 1
3987: ARRAY
3988: PPUSH
3989: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3993: LD_VAR 0 10
3997: PPUSH
3998: CALL_OW 274
4002: PPUSH
4003: LD_INT 2
4005: PPUSH
4006: LD_EXP 8
4010: PUSH
4011: LD_INT 2
4013: ARRAY
4014: PPUSH
4015: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4019: LD_VAR 0 10
4023: PPUSH
4024: CALL_OW 274
4028: PPUSH
4029: LD_INT 3
4031: PPUSH
4032: LD_EXP 8
4036: PUSH
4037: LD_INT 3
4039: ARRAY
4040: PPUSH
4041: CALL_OW 277
// end else
4045: GO 4191
// begin for i := 1 to 3 do
4047: LD_ADDR_VAR 0 7
4051: PUSH
4052: DOUBLE
4053: LD_INT 1
4055: DEC
4056: ST_TO_ADDR
4057: LD_INT 3
4059: PUSH
4060: FOR_TO
4061: IFFALSE 4189
// begin r := starting_resources [ i ] ;
4063: LD_ADDR_VAR 0 8
4067: PUSH
4068: LD_EXP 8
4072: PUSH
4073: LD_VAR 0 7
4077: ARRAY
4078: ST_TO_ADDR
// while r >= 10 do
4079: LD_VAR 0 8
4083: PUSH
4084: LD_INT 10
4086: GREATEREQUAL
4087: IFFALSE 4187
// if r > 50 then
4089: LD_VAR 0 8
4093: PUSH
4094: LD_INT 50
4096: GREATER
4097: IFFALSE 4143
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4099: LD_VAR 0 7
4103: PPUSH
4104: LD_INT 5
4106: PPUSH
4107: LD_VAR 0 4
4111: PPUSH
4112: LD_VAR 0 5
4116: PPUSH
4117: LD_INT 4
4119: PPUSH
4120: LD_INT 0
4122: PPUSH
4123: CALL_OW 60
// r := r - 50 ;
4127: LD_ADDR_VAR 0 8
4131: PUSH
4132: LD_VAR 0 8
4136: PUSH
4137: LD_INT 50
4139: MINUS
4140: ST_TO_ADDR
// end else
4141: GO 4185
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4143: LD_VAR 0 7
4147: PPUSH
4148: LD_VAR 0 8
4152: PUSH
4153: LD_INT 10
4155: DIV
4156: PPUSH
4157: LD_VAR 0 4
4161: PPUSH
4162: LD_VAR 0 5
4166: PPUSH
4167: LD_INT 4
4169: PPUSH
4170: LD_INT 0
4172: PPUSH
4173: CALL_OW 60
// r := 0 ;
4177: LD_ADDR_VAR 0 8
4181: PUSH
4182: LD_INT 0
4184: ST_TO_ADDR
// end ;
4185: GO 4079
// end ;
4187: GO 4060
4189: POP
4190: POP
// end ; for r in starting_crates do
4191: LD_ADDR_VAR 0 8
4195: PUSH
4196: LD_EXP 7
4200: PUSH
4201: FOR_IN
4202: IFFALSE 4234
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4204: LD_INT 1
4206: PPUSH
4207: LD_INT 5
4209: PPUSH
4210: LD_VAR 0 4
4214: PPUSH
4215: LD_VAR 0 5
4219: PPUSH
4220: LD_VAR 0 8
4224: PPUSH
4225: LD_INT 0
4227: PPUSH
4228: CALL_OW 60
4232: GO 4201
4234: POP
4235: POP
// if def_morale_flags then
4236: LD_EXP 52
4240: IFFALSE 4379
// begin x := start_def [ pos ] [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_EXP 26
4251: PUSH
4252: LD_VAR 0 3
4256: ARRAY
4257: PUSH
4258: LD_INT 1
4260: ARRAY
4261: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4262: LD_ADDR_VAR 0 5
4266: PUSH
4267: LD_EXP 26
4271: PUSH
4272: LD_VAR 0 3
4276: ARRAY
4277: PUSH
4278: LD_INT 2
4280: ARRAY
4281: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4282: LD_VAR 0 4
4286: PPUSH
4287: LD_VAR 0 5
4291: PPUSH
4292: LD_INT 12
4294: PPUSH
4295: LD_INT 2
4297: PPUSH
4298: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4302: LD_ADDR_EXP 31
4306: PUSH
4307: LD_EXP 31
4311: PUSH
4312: LD_VAR 0 1
4316: PPUSH
4317: LD_VAR 0 4
4321: PPUSH
4322: LD_VAR 0 5
4326: PPUSH
4327: LD_INT 1
4329: PUSH
4330: LD_INT 100
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: LD_INT 2
4339: PUSH
4340: LD_INT 50
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 3
4349: PUSH
4350: LD_INT 20
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 20
4359: PUSH
4360: LD_INT 100
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: PPUSH
4373: CALL_OW 418
4377: ADD
4378: ST_TO_ADDR
// end ; commander := true ;
4379: LD_ADDR_LOC 1
4383: PUSH
4384: LD_INT 1
4386: ST_TO_ADDR
// soldiers_created := 0 ;
4387: LD_ADDR_LOC 4
4391: PUSH
4392: LD_INT 0
4394: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4395: LD_ADDR_VAR 0 7
4399: PUSH
4400: DOUBLE
4401: LD_INT 1
4403: DEC
4404: ST_TO_ADDR
4405: LD_EXP 4
4409: PUSH
4410: FOR_TO
4411: IFFALSE 4564
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4413: LD_ADDR_VAR 0 4
4417: PUSH
4418: LD_EXP 25
4422: PUSH
4423: LD_VAR 0 3
4427: ARRAY
4428: PUSH
4429: LD_VAR 0 7
4433: ARRAY
4434: PUSH
4435: LD_INT 1
4437: ARRAY
4438: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4439: LD_ADDR_VAR 0 5
4443: PUSH
4444: LD_EXP 25
4448: PUSH
4449: LD_VAR 0 3
4453: ARRAY
4454: PUSH
4455: LD_VAR 0 7
4459: ARRAY
4460: PUSH
4461: LD_INT 2
4463: ARRAY
4464: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4465: LD_ADDR_VAR 0 6
4469: PUSH
4470: LD_EXP 25
4474: PUSH
4475: LD_VAR 0 3
4479: ARRAY
4480: PUSH
4481: LD_VAR 0 7
4485: ARRAY
4486: PUSH
4487: LD_INT 3
4489: ARRAY
4490: ST_TO_ADDR
// bc_type := b_breastwork ;
4491: LD_ADDR_OWVAR 42
4495: PUSH
4496: LD_INT 31
4498: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4499: LD_ADDR_VAR 0 9
4503: PUSH
4504: LD_VAR 0 4
4508: PPUSH
4509: LD_VAR 0 5
4513: PPUSH
4514: LD_VAR 0 6
4518: PPUSH
4519: CALL_OW 47
4523: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4524: LD_INT 1
4526: PPUSH
4527: LD_INT 1
4529: PPUSH
4530: LD_INT 0
4532: PPUSH
4533: LD_INT 0
4535: PPUSH
4536: LD_INT 0
4538: PPUSH
4539: LD_VAR 0 9
4543: PPUSH
4544: CALL 3209 0 6
// soldiers_created := soldiers_created + 1 ;
4548: LD_ADDR_LOC 4
4552: PUSH
4553: LD_LOC 4
4557: PUSH
4558: LD_INT 1
4560: PLUS
4561: ST_TO_ADDR
// end ;
4562: GO 4410
4564: POP
4565: POP
// x := start_def [ pos ] [ 1 ] ;
4566: LD_ADDR_VAR 0 4
4570: PUSH
4571: LD_EXP 26
4575: PUSH
4576: LD_VAR 0 3
4580: ARRAY
4581: PUSH
4582: LD_INT 1
4584: ARRAY
4585: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4586: LD_ADDR_VAR 0 5
4590: PUSH
4591: LD_EXP 26
4595: PUSH
4596: LD_VAR 0 3
4600: ARRAY
4601: PUSH
4602: LD_INT 2
4604: ARRAY
4605: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4606: LD_LOC 8
4610: PUSH
4611: LD_EXP 4
4615: MINUS
4616: PPUSH
4617: LD_INT 1
4619: PPUSH
4620: LD_VAR 0 4
4624: PPUSH
4625: LD_VAR 0 5
4629: PPUSH
4630: LD_INT 5
4632: PPUSH
4633: LD_INT 0
4635: PPUSH
4636: CALL 3209 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4640: LD_LOC 5
4644: PPUSH
4645: LD_INT 2
4647: PPUSH
4648: LD_VAR 0 4
4652: PPUSH
4653: LD_VAR 0 5
4657: PPUSH
4658: LD_INT 5
4660: PPUSH
4661: LD_INT 0
4663: PPUSH
4664: CALL 3209 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4668: LD_LOC 7
4672: PPUSH
4673: LD_INT 3
4675: PPUSH
4676: LD_VAR 0 4
4680: PPUSH
4681: LD_VAR 0 5
4685: PPUSH
4686: LD_INT 5
4688: PPUSH
4689: LD_INT 0
4691: PPUSH
4692: CALL 3209 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4696: LD_LOC 6
4700: PPUSH
4701: LD_INT 4
4703: PPUSH
4704: LD_VAR 0 4
4708: PPUSH
4709: LD_VAR 0 5
4713: PPUSH
4714: LD_INT 5
4716: PPUSH
4717: LD_INT 0
4719: PPUSH
4720: CALL 3209 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4724: LD_EXP 53
4728: PUSH
4729: LD_INT 20
4731: PPUSH
4732: LD_VAR 0 1
4736: PPUSH
4737: CALL_OW 321
4741: PUSH
4742: LD_INT 1
4744: EQUAL
4745: AND
4746: IFFALSE 4763
// SetTech ( tech_SibDet , side , state_researched ) ;
4748: LD_INT 20
4750: PPUSH
4751: LD_VAR 0 1
4755: PPUSH
4756: LD_INT 2
4758: PPUSH
4759: CALL_OW 322
// if def_siberite_bomb = 1 then
4763: LD_EXP 56
4767: PUSH
4768: LD_INT 1
4770: EQUAL
4771: IFFALSE 4805
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4773: LD_INT 25
4775: PPUSH
4776: LD_VAR 0 1
4780: PPUSH
4781: LD_INT 1
4783: PPUSH
4784: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4788: LD_INT 73
4790: PPUSH
4791: LD_VAR 0 1
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 322
// end else
4803: GO 4835
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4805: LD_INT 25
4807: PPUSH
4808: LD_VAR 0 1
4812: PPUSH
4813: LD_INT 0
4815: PPUSH
4816: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4820: LD_INT 73
4822: PPUSH
4823: LD_VAR 0 1
4827: PPUSH
4828: LD_INT 0
4830: PPUSH
4831: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4835: LD_INT 24
4837: PPUSH
4838: LD_VAR 0 1
4842: PPUSH
4843: LD_INT 0
4845: PPUSH
4846: CALL_OW 322
// global_defined := true ;
4850: LD_ADDR_LOC 3
4854: PUSH
4855: LD_INT 1
4857: ST_TO_ADDR
// end ;
4858: LD_VAR 0 2
4862: RET
// every 0 0$1 do
4863: GO 4865
4865: DISABLE
// if ( def_siberite_bomb > 1 ) then
4866: LD_EXP 56
4870: PUSH
4871: LD_INT 1
4873: GREATER
4874: IFFALSE 4889
// begin wait ( siberite_bomb_Delay ) ;
4876: LD_EXP 16
4880: PPUSH
4881: CALL_OW 67
// EnableSibFiss ;
4885: CALL 4890 0 0
// end ;
4889: END
// function EnableSibFiss ; var i ; begin
4890: LD_INT 0
4892: PPUSH
4893: PPUSH
// for i := 1 to 8 do
4894: LD_ADDR_VAR 0 2
4898: PUSH
4899: DOUBLE
4900: LD_INT 1
4902: DEC
4903: ST_TO_ADDR
4904: LD_INT 8
4906: PUSH
4907: FOR_TO
4908: IFFALSE 4954
// if Side_Positions [ i ] then
4910: LD_EXP 19
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: IFFALSE 4952
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4922: LD_INT 25
4924: PPUSH
4925: LD_VAR 0 2
4929: PPUSH
4930: LD_INT 1
4932: PPUSH
4933: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4937: LD_INT 73
4939: PPUSH
4940: LD_VAR 0 2
4944: PPUSH
4945: LD_INT 1
4947: PPUSH
4948: CALL_OW 322
// end ;
4952: GO 4907
4954: POP
4955: POP
// end ;
4956: LD_VAR 0 1
4960: RET
// function prepare_sides ; var i ; begin
4961: LD_INT 0
4963: PPUSH
4964: PPUSH
// global_units := [ ] ;
4965: LD_ADDR_LOC 2
4969: PUSH
4970: EMPTY
4971: ST_TO_ADDR
// global_defined := false ;
4972: LD_ADDR_LOC 3
4976: PUSH
4977: LD_INT 0
4979: ST_TO_ADDR
// CountClassMembers ;
4980: CALL 5030 0 0
// for i := 1 to 8 do
4984: LD_ADDR_VAR 0 2
4988: PUSH
4989: DOUBLE
4990: LD_INT 1
4992: DEC
4993: ST_TO_ADDR
4994: LD_INT 8
4996: PUSH
4997: FOR_TO
4998: IFFALSE 5023
// if Side_Positions [ i ] then
5000: LD_EXP 19
5004: PUSH
5005: LD_VAR 0 2
5009: ARRAY
5010: IFFALSE 5021
// prepare_side ( i ) ;
5012: LD_VAR 0 2
5016: PPUSH
5017: CALL 3797 0 1
5021: GO 4997
5023: POP
5024: POP
// end ;
5025: LD_VAR 0 1
5029: RET
// function CountClassMembers ; var Mode ; begin
5030: LD_INT 0
5032: PPUSH
5033: PPUSH
// if No_Mechs then
5034: LD_EXP 58
5038: IFFALSE 5050
// Mode := 2 else
5040: LD_ADDR_VAR 0 2
5044: PUSH
5045: LD_INT 2
5047: ST_TO_ADDR
5048: GO 5058
// Mode := 1 ;
5050: LD_ADDR_VAR 0 2
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// neng := number_of_people ;
5058: LD_ADDR_LOC 5
5062: PUSH
5063: LD_EXP 5
5067: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5068: LD_ADDR_LOC 8
5072: PUSH
5073: LD_LOC 5
5077: PUSH
5078: LD_INT 4
5080: PUSH
5081: LD_INT 3
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PUSH
5088: LD_VAR 0 2
5092: ARRAY
5093: DIV
5094: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5095: LD_LOC 8
5099: PUSH
5100: LD_EXP 4
5104: LESS
5105: IFFALSE 5117
// nsol := number_of_breastworks ;
5107: LD_ADDR_LOC 8
5111: PUSH
5112: LD_EXP 4
5116: ST_TO_ADDR
// neng := neng - nsol ;
5117: LD_ADDR_LOC 5
5121: PUSH
5122: LD_LOC 5
5126: PUSH
5127: LD_LOC 8
5131: MINUS
5132: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5133: LD_ADDR_LOC 6
5137: PUSH
5138: LD_LOC 5
5142: PUSH
5143: LD_INT 3
5145: PUSH
5146: LD_INT 2
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PUSH
5153: LD_VAR 0 2
5157: ARRAY
5158: DIV
5159: ST_TO_ADDR
// if ( nsci < 1 ) then
5160: LD_LOC 6
5164: PUSH
5165: LD_INT 1
5167: LESS
5168: IFFALSE 5178
// nsci := 1 ;
5170: LD_ADDR_LOC 6
5174: PUSH
5175: LD_INT 1
5177: ST_TO_ADDR
// neng := neng - nsci ;
5178: LD_ADDR_LOC 5
5182: PUSH
5183: LD_LOC 5
5187: PUSH
5188: LD_LOC 6
5192: MINUS
5193: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5194: LD_ADDR_LOC 7
5198: PUSH
5199: LD_LOC 5
5203: PUSH
5204: LD_INT 2
5206: DIV
5207: PUSH
5208: LD_INT 0
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: PUSH
5215: LD_VAR 0 2
5219: ARRAY
5220: ST_TO_ADDR
// neng := neng - nmech ;
5221: LD_ADDR_LOC 5
5225: PUSH
5226: LD_LOC 5
5230: PUSH
5231: LD_LOC 7
5235: MINUS
5236: ST_TO_ADDR
// if ( neng < 1 ) then
5237: LD_LOC 5
5241: PUSH
5242: LD_INT 1
5244: LESS
5245: IFFALSE 5255
// neng := 1 ;
5247: LD_ADDR_LOC 5
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// end ;
5255: LD_VAR 0 1
5259: RET
// starting begin disable ( 98 ) ;
5260: LD_INT 98
5262: DISABLE_MARKED
// disable ( 99 ) ;
5263: LD_INT 99
5265: DISABLE_MARKED
// disable ( 100 ) ;
5266: LD_INT 100
5268: DISABLE_MARKED
// disable ( 200 ) ;
5269: LD_INT 200
5271: DISABLE_MARKED
// disable ( 400 ) ;
5272: LD_INT 400
5274: DISABLE_MARKED
// disable ( 401 ) ;
5275: LD_INT 401
5277: DISABLE_MARKED
// disable ( 600 ) ;
5278: LD_INT 600
5280: DISABLE_MARKED
// mp_selectmsg := true ;
5281: LD_ADDR_OWVAR 13
5285: PUSH
5286: LD_INT 1
5288: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5289: CALL 68 0 0
// init_map ;
5293: CALL 1756 0 0
// set_shared_visions_and_alliances ;
5297: CALL 2921 0 0
// ResetFog ;
5301: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5305: LD_OWVAR 2
5309: PPUSH
5310: CALL_OW 520
// prepare_sides ;
5314: CALL 4961 0 0
// init_respawning ;
5318: CALL 7028 0 0
// Init_Win_Condition ;
5322: CALL 14132 0 0
// InitLimits ;
5326: CALL 12721 0 0
// ShowTimer ;
5330: CALL 13658 0 0
// case Game_Type of 3 :
5334: LD_EXP 42
5338: PUSH
5339: LD_INT 3
5341: DOUBLE
5342: EQUAL
5343: IFTRUE 5347
5345: GO 5353
5347: POP
// enable ( 100 ) ; 4 :
5348: LD_INT 100
5350: ENABLE_MARKED
5351: GO 5369
5353: LD_INT 4
5355: DOUBLE
5356: EQUAL
5357: IFTRUE 5361
5359: GO 5368
5361: POP
// InitBloodGods ; end ;
5362: CALL 10276 0 0
5366: GO 5369
5368: POP
// music_nat := Side_Nations [ your_side ] ;
5369: LD_ADDR_OWVAR 71
5373: PUSH
5374: LD_EXP 20
5378: PUSH
5379: LD_OWVAR 2
5383: ARRAY
5384: ST_TO_ADDR
// if IAmSpec then
5385: CALL_OW 531
5389: IFFALSE 5413
// begin fogOff ( true ) ;
5391: LD_INT 1
5393: PPUSH
5394: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
5398: LD_INT 104
5400: PPUSH
5401: LD_INT 69
5403: PPUSH
5404: CALL_OW 86
// enable ( 400 ) ;
5408: LD_INT 400
5410: ENABLE_MARKED
// end else
5411: GO 5459
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5413: LD_EXP 26
5417: PUSH
5418: LD_EXP 19
5422: PUSH
5423: LD_OWVAR 2
5427: ARRAY
5428: ARRAY
5429: PUSH
5430: LD_INT 1
5432: ARRAY
5433: PPUSH
5434: LD_EXP 26
5438: PUSH
5439: LD_EXP 19
5443: PUSH
5444: LD_OWVAR 2
5448: ARRAY
5449: ARRAY
5450: PUSH
5451: LD_INT 2
5453: ARRAY
5454: PPUSH
5455: CALL_OW 86
// end ; InitApeman ;
5459: CALL 6195 0 0
// if def_builduptime then
5463: LD_EXP 57
5467: IFFALSE 5473
// BeginBuildUp ;
5469: CALL 8907 0 0
// end ; end_of_file
5473: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5474: GO 5476
5476: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5477: LD_INT 4
5479: PPUSH
5480: LD_INT 5
5482: PPUSH
5483: CALL_OW 12
5487: PPUSH
5488: LD_INT 1
5490: PPUSH
5491: CALL_OW 57
// enable ;
5495: ENABLE
// end ;
5496: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5497: GO 5499
5499: DISABLE
5500: LD_INT 0
5502: PPUSH
5503: PPUSH
// begin case tick of 1 .. 1 1$0 :
5504: LD_OWVAR 1
5508: PUSH
5509: LD_INT 1
5511: DOUBLE
5512: GREATEREQUAL
5513: IFFALSE 5521
5515: LD_INT 2100
5517: DOUBLE
5518: LESSEQUAL
5519: IFTRUE 5523
5521: GO 5551
5523: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5524: LD_EXP 9
5528: PUSH
5529: LD_INT 100
5531: DIVREAL
5532: PUSH
5533: LD_INT 350
5535: PPUSH
5536: LD_INT 1050
5538: PPUSH
5539: CALL_OW 12
5543: MUL
5544: PPUSH
5545: CALL_OW 67
5549: GO 5853
5551: LD_INT 2100
5553: PUSH
5554: LD_INT 1
5556: PLUS
5557: DOUBLE
5558: GREATEREQUAL
5559: IFFALSE 5567
5561: LD_INT 10500
5563: DOUBLE
5564: LESSEQUAL
5565: IFTRUE 5569
5567: GO 5597
5569: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5570: LD_EXP 9
5574: PUSH
5575: LD_INT 100
5577: DIVREAL
5578: PUSH
5579: LD_INT 1050
5581: PPUSH
5582: LD_INT 1575
5584: PPUSH
5585: CALL_OW 12
5589: MUL
5590: PPUSH
5591: CALL_OW 67
5595: GO 5853
5597: LD_INT 10500
5599: PUSH
5600: LD_INT 1
5602: PLUS
5603: DOUBLE
5604: GREATEREQUAL
5605: IFFALSE 5613
5607: LD_INT 21000
5609: DOUBLE
5610: LESSEQUAL
5611: IFTRUE 5615
5613: GO 5643
5615: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5616: LD_EXP 9
5620: PUSH
5621: LD_INT 100
5623: DIVREAL
5624: PUSH
5625: LD_INT 1575
5627: PPUSH
5628: LD_INT 2100
5630: PPUSH
5631: CALL_OW 12
5635: MUL
5636: PPUSH
5637: CALL_OW 67
5641: GO 5853
5643: LD_INT 21000
5645: PUSH
5646: LD_INT 1
5648: PLUS
5649: DOUBLE
5650: GREATEREQUAL
5651: IFFALSE 5659
5653: LD_INT 42000
5655: DOUBLE
5656: LESSEQUAL
5657: IFTRUE 5661
5659: GO 5689
5661: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5662: LD_EXP 9
5666: PUSH
5667: LD_INT 100
5669: DIVREAL
5670: PUSH
5671: LD_INT 2100
5673: PPUSH
5674: LD_INT 2625
5676: PPUSH
5677: CALL_OW 12
5681: MUL
5682: PPUSH
5683: CALL_OW 67
5687: GO 5853
5689: LD_INT 42000
5691: PUSH
5692: LD_INT 1
5694: PLUS
5695: DOUBLE
5696: GREATEREQUAL
5697: IFFALSE 5705
5699: LD_INT 63000
5701: DOUBLE
5702: LESSEQUAL
5703: IFTRUE 5707
5705: GO 5735
5707: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5708: LD_EXP 9
5712: PUSH
5713: LD_INT 100
5715: DIVREAL
5716: PUSH
5717: LD_INT 2625
5719: PPUSH
5720: LD_INT 3150
5722: PPUSH
5723: CALL_OW 12
5727: MUL
5728: PPUSH
5729: CALL_OW 67
5733: GO 5853
5735: LD_INT 63000
5737: PUSH
5738: LD_INT 1
5740: PLUS
5741: DOUBLE
5742: GREATEREQUAL
5743: IFFALSE 5751
5745: LD_INT 105000
5747: DOUBLE
5748: LESSEQUAL
5749: IFTRUE 5753
5751: GO 5781
5753: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5754: LD_EXP 9
5758: PUSH
5759: LD_INT 100
5761: DIVREAL
5762: PUSH
5763: LD_INT 3150
5765: PPUSH
5766: LD_INT 3675
5768: PPUSH
5769: CALL_OW 12
5773: MUL
5774: PPUSH
5775: CALL_OW 67
5779: GO 5853
5781: LD_INT 105000
5783: PUSH
5784: LD_INT 1
5786: PLUS
5787: DOUBLE
5788: GREATEREQUAL
5789: IFFALSE 5797
5791: LD_INT 630000
5793: DOUBLE
5794: LESSEQUAL
5795: IFTRUE 5799
5797: GO 5827
5799: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5800: LD_EXP 9
5804: PUSH
5805: LD_INT 100
5807: DIVREAL
5808: PUSH
5809: LD_INT 3675
5811: PPUSH
5812: LD_INT 4200
5814: PPUSH
5815: CALL_OW 12
5819: MUL
5820: PPUSH
5821: CALL_OW 67
5825: GO 5853
5827: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5828: LD_EXP 9
5832: PUSH
5833: LD_INT 100
5835: DIVREAL
5836: PUSH
5837: LD_INT 4200
5839: PPUSH
5840: LD_INT 5250
5842: PPUSH
5843: CALL_OW 12
5847: MUL
5848: PPUSH
5849: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5853: LD_ADDR_VAR 0 2
5857: PUSH
5858: LD_INT 3
5860: PPUSH
5861: LD_INT 5
5863: PPUSH
5864: CALL_OW 12
5868: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5869: LD_ADDR_VAR 0 1
5873: PUSH
5874: LD_EXP 19
5878: PUSH
5879: LD_INT 0
5881: PUSH
5882: EMPTY
5883: LIST
5884: DIFF
5885: PUSH
5886: FOR_IN
5887: IFFALSE 5936
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5889: LD_VAR 0 2
5893: PPUSH
5894: LD_EXP 26
5898: PUSH
5899: LD_VAR 0 1
5903: ARRAY
5904: PUSH
5905: LD_INT 1
5907: ARRAY
5908: PPUSH
5909: LD_EXP 26
5913: PUSH
5914: LD_VAR 0 1
5918: ARRAY
5919: PUSH
5920: LD_INT 2
5922: ARRAY
5923: PPUSH
5924: LD_INT 20
5926: PPUSH
5927: LD_INT 1
5929: PPUSH
5930: CALL_OW 56
5934: GO 5886
5936: POP
5937: POP
// enable ;
5938: ENABLE
// end ;
5939: PPOPN 2
5941: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
5942: GO 5944
5944: DISABLE
5945: LD_INT 0
5947: PPUSH
5948: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
5949: LD_INT 1
5951: PPUSH
5952: LD_INT 1
5954: PPUSH
5955: CALL_OW 287
5959: PUSH
5960: LD_INT 200
5962: PUSH
5963: LD_EXP 9
5967: MINUS
5968: PUSH
5969: LD_INT 100
5971: DIVREAL
5972: PUSH
5973: LD_INT 5
5975: MUL
5976: LESS
5977: IFFALSE 6000
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
5979: LD_INT 3
5981: PPUSH
5982: LD_INT 5
5984: PPUSH
5985: CALL_OW 12
5989: PPUSH
5990: LD_INT 1
5992: PPUSH
5993: LD_INT 1
5995: PPUSH
5996: CALL_OW 55
// enable ;
6000: ENABLE
// end ; end_of_file
6001: PPOPN 2
6003: END
// every 20 20$00 trigger apemanNumber do
6004: LD_EXP 34
6008: IFFALSE 6041
6010: GO 6012
6012: DISABLE
// begin enable ;
6013: ENABLE
// if apeLevel >= 8 then
6014: LD_EXP 39
6018: PUSH
6019: LD_INT 8
6021: GREATEREQUAL
6022: IFFALSE 6027
// disable else
6024: DISABLE
6025: GO 6041
// apeLevel := apeLevel + 1 ;
6027: LD_ADDR_EXP 39
6031: PUSH
6032: LD_EXP 39
6036: PUSH
6037: LD_INT 1
6039: PLUS
6040: ST_TO_ADDR
// end ;
6041: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6042: LD_EXP 34
6046: PUSH
6047: LD_EXP 35
6051: LESS
6052: IFFALSE 6192
6054: GO 6056
6056: DISABLE
6057: LD_INT 0
6059: PPUSH
6060: PPUSH
6061: PPUSH
6062: PPUSH
// begin enable ;
6063: ENABLE
// for i := 1 to apemanPos do
6064: LD_ADDR_VAR 0 1
6068: PUSH
6069: DOUBLE
6070: LD_INT 1
6072: DEC
6073: ST_TO_ADDR
6074: LD_EXP 37
6078: PUSH
6079: FOR_TO
6080: IFFALSE 6190
// begin if apemanPlayerCount [ i ] then
6082: LD_EXP 38
6086: PUSH
6087: LD_VAR 0 1
6091: ARRAY
6092: IFFALSE 6188
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6094: LD_EXP 38
6098: PUSH
6099: LD_VAR 0 1
6103: ARRAY
6104: PUSH
6105: LD_EXP 37
6109: PUSH
6110: LD_VAR 0 1
6114: ARRAY
6115: GREATER
6116: IFFALSE 6188
// begin ape := PrepareApeman ;
6118: LD_ADDR_VAR 0 2
6122: PUSH
6123: CALL 6703 0 0
6127: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6128: LD_VAR 0 2
6132: PPUSH
6133: LD_EXP 40
6137: PUSH
6138: LD_VAR 0 1
6142: ARRAY
6143: PPUSH
6144: LD_INT 0
6146: PPUSH
6147: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6151: LD_ADDR_EXP 37
6155: PUSH
6156: LD_EXP 37
6160: PPUSH
6161: LD_VAR 0 1
6165: PPUSH
6166: LD_EXP 37
6170: PUSH
6171: LD_VAR 0 1
6175: ARRAY
6176: PUSH
6177: LD_VAR 0 2
6181: UNION
6182: PPUSH
6183: CALL_OW 1
6187: ST_TO_ADDR
// end ; end ; end ;
6188: GO 6079
6190: POP
6191: POP
// end ;
6192: PPOPN 4
6194: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6195: LD_INT 0
6197: PPUSH
6198: PPUSH
6199: PPUSH
6200: PPUSH
6201: PPUSH
6202: PPUSH
6203: PPUSH
// playersAmount := 0 ;
6204: LD_ADDR_VAR 0 3
6208: PUSH
6209: LD_INT 0
6211: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6212: LD_ADDR_VAR 0 7
6216: PUSH
6217: LD_INT 2
6219: PUSH
6220: LD_INT 3
6222: PUSH
6223: LD_INT 4
6225: PUSH
6226: LD_INT 5
6228: PUSH
6229: LD_INT 6
6231: PUSH
6232: LD_INT 7
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6243: LD_ADDR_EXP 40
6247: PUSH
6248: LD_INT 0
6250: PUSH
6251: LD_INT 0
6253: PUSH
6254: LD_INT 0
6256: PUSH
6257: LD_INT 0
6259: PUSH
6260: LD_INT 0
6262: PUSH
6263: LD_INT 0
6265: PUSH
6266: LD_INT 0
6268: PUSH
6269: LD_INT 0
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: ST_TO_ADDR
// for j = 1 to Side_Positions do
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: DOUBLE
6288: LD_INT 1
6290: DEC
6291: ST_TO_ADDR
6292: LD_EXP 19
6296: PUSH
6297: FOR_TO
6298: IFFALSE 6365
// if Side_Positions [ j ] then
6300: LD_EXP 19
6304: PUSH
6305: LD_VAR 0 4
6309: ARRAY
6310: IFFALSE 6363
// begin playersAmount := playersAmount + 1 ;
6312: LD_ADDR_VAR 0 3
6316: PUSH
6317: LD_VAR 0 3
6321: PUSH
6322: LD_INT 1
6324: PLUS
6325: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6326: LD_ADDR_EXP 40
6330: PUSH
6331: LD_EXP 40
6335: PPUSH
6336: LD_VAR 0 4
6340: PPUSH
6341: LD_VAR 0 7
6345: PUSH
6346: LD_EXP 19
6350: PUSH
6351: LD_VAR 0 4
6355: ARRAY
6356: ARRAY
6357: PPUSH
6358: CALL_OW 1
6362: ST_TO_ADDR
// end ;
6363: GO 6297
6365: POP
6366: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6367: LD_ADDR_EXP 36
6371: PUSH
6372: LD_INT 3
6374: PUSH
6375: LD_EXP 15
6379: MUL
6380: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6381: LD_ADDR_EXP 34
6385: PUSH
6386: LD_VAR 0 3
6390: PUSH
6391: LD_EXP 36
6395: MUL
6396: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6397: LD_ADDR_EXP 35
6401: PUSH
6402: LD_EXP 34
6406: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6407: LD_ADDR_EXP 37
6411: PUSH
6412: LD_INT 0
6414: PUSH
6415: LD_INT 0
6417: PUSH
6418: LD_INT 0
6420: PUSH
6421: LD_INT 0
6423: PUSH
6424: LD_INT 0
6426: PUSH
6427: LD_INT 0
6429: PUSH
6430: LD_INT 0
6432: PUSH
6433: LD_INT 0
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6446: LD_ADDR_EXP 38
6450: PUSH
6451: LD_INT 0
6453: PUSH
6454: LD_INT 0
6456: PUSH
6457: LD_INT 0
6459: PUSH
6460: LD_INT 0
6462: PUSH
6463: LD_INT 0
6465: PUSH
6466: LD_INT 0
6468: PUSH
6469: LD_INT 0
6471: PUSH
6472: LD_INT 0
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: ST_TO_ADDR
// apeLevel := 1 ;
6485: LD_ADDR_EXP 39
6489: PUSH
6490: LD_INT 1
6492: ST_TO_ADDR
// if not apemanNumber then
6493: LD_EXP 34
6497: NOT
6498: IFFALSE 6502
// exit ;
6500: GO 6698
// for i := 1 to apemanPerPlayer do
6502: LD_ADDR_VAR 0 2
6506: PUSH
6507: DOUBLE
6508: LD_INT 1
6510: DEC
6511: ST_TO_ADDR
6512: LD_EXP 36
6516: PUSH
6517: FOR_TO
6518: IFFALSE 6696
// begin for j := 1 to Side_Positions do
6520: LD_ADDR_VAR 0 4
6524: PUSH
6525: DOUBLE
6526: LD_INT 1
6528: DEC
6529: ST_TO_ADDR
6530: LD_EXP 19
6534: PUSH
6535: FOR_TO
6536: IFFALSE 6692
// if Side_Positions [ j ] then
6538: LD_EXP 19
6542: PUSH
6543: LD_VAR 0 4
6547: ARRAY
6548: IFFALSE 6690
// begin pos := Side_Positions [ j ] ;
6550: LD_ADDR_VAR 0 6
6554: PUSH
6555: LD_EXP 19
6559: PUSH
6560: LD_VAR 0 4
6564: ARRAY
6565: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6566: LD_ADDR_EXP 38
6570: PUSH
6571: LD_EXP 38
6575: PPUSH
6576: LD_VAR 0 4
6580: PPUSH
6581: LD_EXP 38
6585: PUSH
6586: LD_VAR 0 4
6590: ARRAY
6591: PUSH
6592: LD_INT 1
6594: PLUS
6595: PPUSH
6596: CALL_OW 1
6600: ST_TO_ADDR
// ape := PrepareApeman ;
6601: LD_ADDR_VAR 0 5
6605: PUSH
6606: CALL 6703 0 0
6610: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6611: LD_ADDR_EXP 37
6615: PUSH
6616: LD_EXP 37
6620: PPUSH
6621: LD_VAR 0 4
6625: PPUSH
6626: LD_EXP 37
6630: PUSH
6631: LD_VAR 0 4
6635: ARRAY
6636: PPUSH
6637: LD_EXP 37
6641: PUSH
6642: LD_VAR 0 4
6646: ARRAY
6647: PUSH
6648: LD_INT 1
6650: PLUS
6651: PPUSH
6652: LD_VAR 0 5
6656: PPUSH
6657: CALL_OW 1
6661: PPUSH
6662: CALL_OW 1
6666: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6667: LD_VAR 0 5
6671: PPUSH
6672: LD_EXP 40
6676: PUSH
6677: LD_VAR 0 4
6681: ARRAY
6682: PPUSH
6683: LD_INT 0
6685: PPUSH
6686: CALL_OW 49
// end ;
6690: GO 6535
6692: POP
6693: POP
// end ;
6694: GO 6517
6696: POP
6697: POP
// end ;
6698: LD_VAR 0 1
6702: RET
// export function PrepareApeman ; var bonus ; begin
6703: LD_INT 0
6705: PPUSH
6706: PPUSH
// uc_side := 0 ;
6707: LD_ADDR_OWVAR 20
6711: PUSH
6712: LD_INT 0
6714: ST_TO_ADDR
// uc_nation := 0 ;
6715: LD_ADDR_OWVAR 21
6719: PUSH
6720: LD_INT 0
6722: ST_TO_ADDR
// InitHc ;
6723: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6727: LD_ADDR_VAR 0 2
6731: PUSH
6732: LD_INT 1
6734: NEG
6735: PUSH
6736: LD_INT 0
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: LIST
6746: PUSH
6747: LD_OWVAR 1
6751: PUSH
6752: LD_INT 3
6754: MOD
6755: PUSH
6756: LD_INT 1
6758: PLUS
6759: ARRAY
6760: ST_TO_ADDR
// hc_class := class_apeman ;
6761: LD_ADDR_OWVAR 28
6765: PUSH
6766: LD_INT 12
6768: ST_TO_ADDR
// hc_gallery :=  ;
6769: LD_ADDR_OWVAR 33
6773: PUSH
6774: LD_STRING 
6776: ST_TO_ADDR
// hc_name :=  ;
6777: LD_ADDR_OWVAR 26
6781: PUSH
6782: LD_STRING 
6784: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6785: LD_ADDR_OWVAR 31
6789: PUSH
6790: LD_EXP 39
6794: PUSH
6795: LD_VAR 0 2
6799: PLUS
6800: PUSH
6801: LD_EXP 39
6805: PUSH
6806: LD_VAR 0 2
6810: PLUS
6811: PUSH
6812: LD_EXP 39
6816: PUSH
6817: LD_VAR 0 2
6821: PLUS
6822: PUSH
6823: LD_EXP 39
6827: PUSH
6828: LD_VAR 0 2
6832: PLUS
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6840: LD_ADDR_OWVAR 35
6844: PUSH
6845: LD_INT 10
6847: PUSH
6848: LD_VAR 0 2
6852: MUL
6853: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6854: LD_ADDR_OWVAR 29
6858: PUSH
6859: LD_INT 12
6861: PUSH
6862: LD_INT 10
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: ST_TO_ADDR
// result := CreateHuman ;
6869: LD_ADDR_VAR 0 1
6873: PUSH
6874: CALL_OW 44
6878: ST_TO_ADDR
// end ;
6879: LD_VAR 0 1
6883: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6884: LD_INT 0
6886: PPUSH
6887: PPUSH
6888: PPUSH
// if not ape then
6889: LD_VAR 0 1
6893: NOT
6894: IFFALSE 6898
// exit ;
6896: GO 7023
// side := GetSide ( ape ) ;
6898: LD_ADDR_VAR 0 3
6902: PUSH
6903: LD_VAR 0 1
6907: PPUSH
6908: CALL_OW 255
6912: ST_TO_ADDR
// if not side then
6913: LD_VAR 0 3
6917: NOT
6918: IFFALSE 6972
// begin for i = 1 to apemanPos do
6920: LD_ADDR_VAR 0 4
6924: PUSH
6925: DOUBLE
6926: LD_INT 1
6928: DEC
6929: ST_TO_ADDR
6930: LD_EXP 37
6934: PUSH
6935: FOR_TO
6936: IFFALSE 6970
// if ape in apemanPos [ i ] then
6938: LD_VAR 0 1
6942: PUSH
6943: LD_EXP 37
6947: PUSH
6948: LD_VAR 0 4
6952: ARRAY
6953: IN
6954: IFFALSE 6968
// begin side := i ;
6956: LD_ADDR_VAR 0 3
6960: PUSH
6961: LD_VAR 0 4
6965: ST_TO_ADDR
// break ;
6966: GO 6970
// end ;
6968: GO 6935
6970: POP
6971: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6972: LD_ADDR_EXP 37
6976: PUSH
6977: LD_EXP 37
6981: PPUSH
6982: LD_VAR 0 3
6986: PPUSH
6987: LD_EXP 37
6991: PUSH
6992: LD_VAR 0 3
6996: ARRAY
6997: PUSH
6998: LD_VAR 0 1
7002: DIFF
7003: PPUSH
7004: CALL_OW 1
7008: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7009: LD_ADDR_EXP 34
7013: PUSH
7014: LD_EXP 34
7018: PUSH
7019: LD_INT 1
7021: MINUS
7022: ST_TO_ADDR
// end ; end_of_file
7023: LD_VAR 0 2
7027: RET
// var respawn , inqueue ; export function init_respawning ; begin
7028: LD_INT 0
7030: PPUSH
// respawn := Rand ( 1 , 8 ) ;
7031: LD_ADDR_LOC 9
7035: PUSH
7036: LD_INT 1
7038: PPUSH
7039: LD_INT 8
7041: PPUSH
7042: CALL_OW 12
7046: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7047: LD_ADDR_LOC 10
7051: PUSH
7052: LD_INT 0
7054: PUSH
7055: LD_INT 0
7057: PUSH
7058: LD_INT 0
7060: PUSH
7061: LD_INT 0
7063: PUSH
7064: LD_INT 0
7066: PUSH
7067: LD_INT 0
7069: PUSH
7070: LD_INT 0
7072: PUSH
7073: LD_INT 0
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: ST_TO_ADDR
// end ;
7086: LD_VAR 0 1
7090: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
7091: GO 7093
7093: DISABLE
7094: LD_INT 0
7096: PPUSH
7097: PPUSH
7098: PPUSH
7099: PPUSH
// begin if respawning_time_max = 0 then
7100: LD_EXP 13
7104: PUSH
7105: LD_INT 0
7107: EQUAL
7108: IFFALSE 7112
// exit ;
7110: GO 7619
// if respawn = 8 then
7112: LD_LOC 9
7116: PUSH
7117: LD_INT 8
7119: EQUAL
7120: IFFALSE 7132
// respawn := 1 else
7122: LD_ADDR_LOC 9
7126: PUSH
7127: LD_INT 1
7129: ST_TO_ADDR
7130: GO 7146
// respawn := respawn + 1 ;
7132: LD_ADDR_LOC 9
7136: PUSH
7137: LD_LOC 9
7141: PUSH
7142: LD_INT 1
7144: PLUS
7145: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
7146: LD_EXP 19
7150: PUSH
7151: LD_LOC 9
7155: ARRAY
7156: PUSH
7157: LD_LOC 10
7161: PUSH
7162: LD_LOC 9
7166: ARRAY
7167: NOT
7168: AND
7169: IFFALSE 7618
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
7171: LD_ADDR_VAR 0 1
7175: PUSH
7176: LD_INT 21
7178: PUSH
7179: LD_INT 1
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 22
7188: PUSH
7189: LD_LOC 9
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 3
7200: PUSH
7201: LD_INT 23
7203: PUSH
7204: LD_INT 0
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: PPUSH
7217: CALL_OW 69
7221: ST_TO_ADDR
// if n < number_of_people then
7222: LD_VAR 0 1
7226: PUSH
7227: LD_EXP 5
7231: LESS
7232: IFFALSE 7615
// begin aktresp := respawn ;
7234: LD_ADDR_VAR 0 3
7238: PUSH
7239: LD_LOC 9
7243: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7244: LD_ADDR_LOC 10
7248: PUSH
7249: LD_LOC 10
7253: PPUSH
7254: LD_VAR 0 3
7258: PPUSH
7259: LD_INT 1
7261: PPUSH
7262: CALL_OW 1
7266: ST_TO_ADDR
// enable ;
7267: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7268: LD_EXP 12
7272: PPUSH
7273: LD_EXP 13
7277: PPUSH
7278: CALL_OW 12
7282: PPUSH
7283: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7287: LD_ADDR_LOC 10
7291: PUSH
7292: LD_LOC 10
7296: PPUSH
7297: LD_VAR 0 3
7301: PPUSH
7302: LD_INT 0
7304: PPUSH
7305: CALL_OW 1
7309: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7310: LD_ADDR_VAR 0 2
7314: PUSH
7315: LD_INT 21
7317: PUSH
7318: LD_INT 3
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: PUSH
7325: LD_INT 2
7327: PUSH
7328: LD_INT 30
7330: PUSH
7331: LD_INT 0
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 30
7340: PUSH
7341: LD_INT 1
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 50
7355: PUSH
7356: EMPTY
7357: LIST
7358: PUSH
7359: LD_INT 22
7361: PUSH
7362: LD_VAR 0 3
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: PPUSH
7377: CALL_OW 69
7381: ST_TO_ADDR
// if building_list = 0 then
7382: LD_VAR 0 2
7386: PUSH
7387: LD_INT 0
7389: EQUAL
7390: IFFALSE 7435
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7392: LD_ADDR_VAR 0 2
7396: PUSH
7397: LD_INT 21
7399: PUSH
7400: LD_INT 3
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 50
7409: PUSH
7410: EMPTY
7411: LIST
7412: PUSH
7413: LD_INT 22
7415: PUSH
7416: LD_VAR 0 3
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: LIST
7429: PPUSH
7430: CALL_OW 69
7434: ST_TO_ADDR
// if building_list = 0 then
7435: LD_VAR 0 2
7439: PUSH
7440: LD_INT 0
7442: EQUAL
7443: IFFALSE 7447
// exit ;
7445: GO 7619
// hc_name :=  ;
7447: LD_ADDR_OWVAR 26
7451: PUSH
7452: LD_STRING 
7454: ST_TO_ADDR
// hc_importance := 0 ;
7455: LD_ADDR_OWVAR 32
7459: PUSH
7460: LD_INT 0
7462: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7463: LD_INT 0
7465: PPUSH
7466: LD_INT 0
7468: PPUSH
7469: LD_EXP 6
7473: PUSH
7474: LD_INT 2
7476: DIV
7477: PPUSH
7478: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7482: LD_ADDR_OWVAR 21
7486: PUSH
7487: LD_EXP 20
7491: PUSH
7492: LD_VAR 0 3
7496: ARRAY
7497: ST_TO_ADDR
// uc_side := aktresp ;
7498: LD_ADDR_OWVAR 20
7502: PUSH
7503: LD_VAR 0 3
7507: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
7508: LD_ADDR_VAR 0 4
7512: PUSH
7513: LD_VAR 0 2
7517: PUSH
7518: LD_INT 1
7520: PPUSH
7521: LD_VAR 0 2
7525: PUSH
7526: LD_INT 0
7528: PLUS
7529: PPUSH
7530: CALL_OW 12
7534: ARRAY
7535: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
7536: LD_VAR 0 4
7540: PPUSH
7541: CALL_OW 266
7545: PUSH
7546: LD_INT 0
7548: PUSH
7549: LD_INT 1
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: IN
7556: IFFALSE 7568
// n = 25 else
7558: LD_ADDR_VAR 0 1
7562: PUSH
7563: LD_INT 25
7565: ST_TO_ADDR
7566: GO 7576
// n = 10 ;
7568: LD_ADDR_VAR 0 1
7572: PUSH
7573: LD_INT 10
7575: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
7576: CALL_OW 44
7580: PPUSH
7581: LD_VAR 0 4
7585: PPUSH
7586: CALL_OW 250
7590: PPUSH
7591: LD_VAR 0 4
7595: PPUSH
7596: CALL_OW 251
7600: PPUSH
7601: LD_VAR 0 1
7605: PPUSH
7606: LD_INT 1
7608: PPUSH
7609: CALL_OW 50
// end else
7613: GO 7616
// enable ;
7615: ENABLE
// end else
7616: GO 7619
// enable ;
7618: ENABLE
// end ; end_of_file
7619: PPOPN 4
7621: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7622: LD_VAR 0 1
7626: PPUSH
7627: CALL_OW 266
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: LD_INT 1
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: IN
7642: IFFALSE 7667
// SetBName ( b , @ & GetSide ( b ) ) ;
7644: LD_VAR 0 1
7648: PPUSH
7649: LD_STRING @
7651: PUSH
7652: LD_VAR 0 1
7656: PPUSH
7657: CALL_OW 255
7661: STR
7662: PPUSH
7663: CALL_OW 500
// if def_game_rules then
7667: LD_EXP 43
7671: IFFALSE 7708
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7673: LD_VAR 0 1
7677: PPUSH
7678: LD_VAR 0 1
7682: PPUSH
7683: CALL_OW 266
7687: PPUSH
7688: LD_VAR 0 1
7692: PPUSH
7693: CALL_OW 255
7697: PPUSH
7698: LD_INT 0
7700: PPUSH
7701: LD_INT 1
7703: PPUSH
7704: CALL 13122 0 5
// end ;
7708: PPOPN 2
7710: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7711: LD_VAR 0 1
7715: PPUSH
7716: CALL_OW 266
7720: PUSH
7721: LD_INT 0
7723: PUSH
7724: LD_INT 1
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: IN
7731: IFFALSE 7756
// SetBName ( b , @ & GetSide ( b ) ) ;
7733: LD_VAR 0 1
7737: PPUSH
7738: LD_STRING @
7740: PUSH
7741: LD_VAR 0 1
7745: PPUSH
7746: CALL_OW 255
7750: STR
7751: PPUSH
7752: CALL_OW 500
// if def_game_rules then
7756: LD_EXP 43
7760: IFFALSE 7799
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7762: LD_VAR 0 1
7766: PPUSH
7767: LD_VAR 0 1
7771: PPUSH
7772: CALL_OW 266
7776: PPUSH
7777: LD_VAR 0 1
7781: PPUSH
7782: CALL_OW 255
7786: PPUSH
7787: LD_VAR 0 2
7791: PPUSH
7792: LD_INT 1
7794: PPUSH
7795: CALL 13122 0 5
// end ;
7799: PPOPN 3
7801: END
// on VehicleConstructed ( veh , fac ) do var side ;
7802: LD_INT 0
7804: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7805: LD_VAR 0 1
7809: PPUSH
7810: CALL_OW 263
7814: PUSH
7815: LD_INT 5
7817: EQUAL
7818: IFFALSE 7960
// begin side := GetSide ( veh ) ;
7820: LD_ADDR_VAR 0 3
7824: PUSH
7825: LD_VAR 0 1
7829: PPUSH
7830: CALL_OW 255
7834: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7835: LD_ADDR_EXP 37
7839: PUSH
7840: LD_EXP 37
7844: PPUSH
7845: LD_VAR 0 3
7849: PPUSH
7850: LD_EXP 37
7854: PUSH
7855: LD_VAR 0 3
7859: ARRAY
7860: PPUSH
7861: LD_INT 52
7863: PUSH
7864: EMPTY
7865: LIST
7866: PPUSH
7867: CALL_OW 72
7871: PUSH
7872: LD_INT 22
7874: PUSH
7875: LD_VAR 0 3
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PUSH
7884: LD_INT 2
7886: PUSH
7887: LD_INT 33
7889: PUSH
7890: LD_INT 5
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 25
7899: PUSH
7900: LD_INT 12
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 25
7909: PUSH
7910: LD_INT 15
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 25
7919: PUSH
7920: LD_INT 16
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 25
7929: PUSH
7930: LD_INT 17
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PPUSH
7949: CALL_OW 69
7953: UNION
7954: PPUSH
7955: CALL_OW 1
7959: ST_TO_ADDR
// end ; end ;
7960: PPOPN 3
7962: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7963: LD_INT 0
7965: PPUSH
7966: PPUSH
7967: PPUSH
7968: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7969: LD_VAR 0 1
7973: PPUSH
7974: CALL_OW 257
7978: PUSH
7979: LD_INT 12
7981: PUSH
7982: LD_INT 15
7984: PUSH
7985: LD_INT 17
7987: PUSH
7988: LD_INT 16
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: IN
7997: PUSH
7998: LD_VAR 0 1
8002: PPUSH
8003: CALL_OW 263
8007: PUSH
8008: LD_INT 5
8010: EQUAL
8011: OR
8012: IFFALSE 8023
// ApeKilled ( j ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL 6884 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
8023: LD_VAR 0 1
8027: PPUSH
8028: CALL_OW 266
8032: PUSH
8033: LD_INT 0
8035: PUSH
8036: LD_INT 1
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: IN
8043: IFFALSE 8125
// begin pos := Side_Positions [ GetSide ( j ) ] ;
8045: LD_ADDR_VAR 0 4
8049: PUSH
8050: LD_EXP 19
8054: PUSH
8055: LD_VAR 0 1
8059: PPUSH
8060: CALL_OW 255
8064: ARRAY
8065: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
8066: LD_ADDR_VAR 0 2
8070: PUSH
8071: LD_EXP 26
8075: PUSH
8076: LD_VAR 0 4
8080: ARRAY
8081: PUSH
8082: LD_INT 1
8084: ARRAY
8085: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
8086: LD_ADDR_VAR 0 3
8090: PUSH
8091: LD_EXP 26
8095: PUSH
8096: LD_VAR 0 4
8100: ARRAY
8101: PUSH
8102: LD_INT 2
8104: ARRAY
8105: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
8106: LD_VAR 0 2
8110: PPUSH
8111: LD_VAR 0 3
8115: PPUSH
8116: CALL_OW 420
8120: PPUSH
8121: CALL_OW 419
// end ; if def_game_rules then
8125: LD_EXP 43
8129: IFFALSE 8228
// if ( GetType ( j ) = 3 ) then
8131: LD_VAR 0 1
8135: PPUSH
8136: CALL_OW 247
8140: PUSH
8141: LD_INT 3
8143: EQUAL
8144: IFFALSE 8184
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8146: LD_VAR 0 1
8150: PPUSH
8151: LD_VAR 0 1
8155: PPUSH
8156: CALL_OW 266
8160: PPUSH
8161: LD_VAR 0 1
8165: PPUSH
8166: CALL_OW 255
8170: PPUSH
8171: LD_INT 0
8173: PPUSH
8174: LD_INT 1
8176: NEG
8177: PPUSH
8178: CALL 13122 0 5
8182: GO 8228
// if ( GetChassis ( j ) = 25 ) then
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 265
8193: PUSH
8194: LD_INT 25
8196: EQUAL
8197: IFFALSE 8228
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8199: LD_VAR 0 1
8203: PPUSH
8204: LD_INT 37
8206: PPUSH
8207: LD_VAR 0 1
8211: PPUSH
8212: CALL_OW 255
8216: PPUSH
8217: LD_INT 0
8219: PPUSH
8220: LD_INT 1
8222: NEG
8223: PPUSH
8224: CALL 13122 0 5
// end ;
8228: PPOPN 5
8230: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8231: LD_EXP 43
8235: PUSH
8236: LD_VAR 0 1
8240: PPUSH
8241: CALL_OW 265
8245: PUSH
8246: LD_INT 25
8248: EQUAL
8249: AND
8250: IFFALSE 8282
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8252: LD_VAR 0 1
8256: PPUSH
8257: LD_INT 37
8259: PPUSH
8260: LD_VAR 0 1
8264: PPUSH
8265: CALL_OW 255
8269: PPUSH
8270: LD_VAR 0 3
8274: PPUSH
8275: LD_INT 1
8277: PPUSH
8278: CALL 13122 0 5
// end ;
8282: PPOPN 4
8284: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8285: LD_VAR 0 1
8289: PPUSH
8290: LD_VAR 0 2
8294: PPUSH
8295: LD_VAR 0 3
8299: PPUSH
8300: LD_OWVAR 2
8304: PPUSH
8305: CALL 13893 0 4
8309: PPOPN 3
8311: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8312: GO 8314
8314: DISABLE
8315: LD_INT 0
8317: PPUSH
8318: PPUSH
8319: PPUSH
8320: PPUSH
8321: PPUSH
// begin sib_mined := [ ] ;
8322: LD_ADDR_VAR 0 5
8326: PUSH
8327: EMPTY
8328: ST_TO_ADDR
// for i := 1 to 8 do
8329: LD_ADDR_VAR 0 1
8333: PUSH
8334: DOUBLE
8335: LD_INT 1
8337: DEC
8338: ST_TO_ADDR
8339: LD_INT 8
8341: PUSH
8342: FOR_TO
8343: IFFALSE 8499
// if Side_Positions [ i ] then
8345: LD_EXP 19
8349: PUSH
8350: LD_VAR 0 1
8354: ARRAY
8355: IFFALSE 8483
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8357: LD_ADDR_VAR 0 4
8361: PUSH
8362: LD_INT 22
8364: PUSH
8365: LD_VAR 0 1
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: LD_INT 2
8376: PUSH
8377: LD_INT 30
8379: PUSH
8380: LD_INT 0
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: LD_INT 30
8389: PUSH
8390: LD_INT 1
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PPUSH
8406: CALL_OW 69
8410: ST_TO_ADDR
// pom := 0 ;
8411: LD_ADDR_VAR 0 3
8415: PUSH
8416: LD_INT 0
8418: ST_TO_ADDR
// for base in filter do
8419: LD_ADDR_VAR 0 2
8423: PUSH
8424: LD_VAR 0 4
8428: PUSH
8429: FOR_IN
8430: IFFALSE 8463
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8432: LD_ADDR_VAR 0 3
8436: PUSH
8437: LD_VAR 0 3
8441: PUSH
8442: LD_VAR 0 2
8446: PPUSH
8447: CALL_OW 274
8451: PPUSH
8452: LD_INT 3
8454: PPUSH
8455: CALL_OW 275
8459: PLUS
8460: ST_TO_ADDR
8461: GO 8429
8463: POP
8464: POP
// sib_mined := sib_mined ^ pom ;
8465: LD_ADDR_VAR 0 5
8469: PUSH
8470: LD_VAR 0 5
8474: PUSH
8475: LD_VAR 0 3
8479: ADD
8480: ST_TO_ADDR
// end else
8481: GO 8497
// sib_mined := sib_mined ^ 0 ;
8483: LD_ADDR_VAR 0 5
8487: PUSH
8488: LD_VAR 0 5
8492: PUSH
8493: LD_INT 0
8495: ADD
8496: ST_TO_ADDR
8497: GO 8342
8499: POP
8500: POP
// if not def_public_score then
8501: LD_EXP 2
8505: NOT
8506: IFFALSE 8596
// begin ExtraStrings := [ ] ;
8508: LD_ADDR_EXP 59
8512: PUSH
8513: EMPTY
8514: ST_TO_ADDR
// for i := 1 to 8 do
8515: LD_ADDR_VAR 0 1
8519: PUSH
8520: DOUBLE
8521: LD_INT 1
8523: DEC
8524: ST_TO_ADDR
8525: LD_INT 8
8527: PUSH
8528: FOR_TO
8529: IFFALSE 8592
// if Side_Positions [ i ] then
8531: LD_EXP 19
8535: PUSH
8536: LD_VAR 0 1
8540: ARRAY
8541: IFFALSE 8590
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8543: LD_ADDR_EXP 59
8547: PUSH
8548: LD_EXP 59
8552: PUSH
8553: LD_STRING #AlienBase-MinedPublic
8555: PUSH
8556: LD_VAR 0 1
8560: PUSH
8561: LD_VAR 0 1
8565: PUSH
8566: LD_VAR 0 5
8570: PUSH
8571: LD_VAR 0 1
8575: ARRAY
8576: PUSH
8577: LD_EXP 11
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: ADD
8589: ST_TO_ADDR
8590: GO 8528
8592: POP
8593: POP
// end else
8594: GO 8625
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8596: LD_ADDR_EXP 59
8600: PUSH
8601: LD_STRING #AlienBase-Mined
8603: PUSH
8604: LD_VAR 0 5
8608: PUSH
8609: LD_OWVAR 2
8613: ARRAY
8614: PUSH
8615: LD_EXP 11
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: LIST
8624: ST_TO_ADDR
// for i := 1 to 8 do
8625: LD_ADDR_VAR 0 1
8629: PUSH
8630: DOUBLE
8631: LD_INT 1
8633: DEC
8634: ST_TO_ADDR
8635: LD_INT 8
8637: PUSH
8638: FOR_TO
8639: IFFALSE 8709
// if sib_mined [ i ] >= amount_of_siberit then
8641: LD_VAR 0 5
8645: PUSH
8646: LD_VAR 0 1
8650: ARRAY
8651: PUSH
8652: LD_EXP 11
8656: GREATEREQUAL
8657: IFFALSE 8707
// begin wait ( 0 0$1 ) ;
8659: LD_INT 35
8661: PPUSH
8662: CALL_OW 67
// if IAmServer then
8666: CALL_OW 518
8670: IFFALSE 8679
// wait ( 0 0$1 ) ;
8672: LD_INT 35
8674: PPUSH
8675: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8679: LD_VAR 0 5
8683: PUSH
8684: LD_OWVAR 2
8688: ARRAY
8689: PUSH
8690: LD_EXP 11
8694: GREATEREQUAL
8695: IFFALSE 8703
// YouWinInMultiplayer else
8697: CALL_OW 106
8701: GO 8707
// YouLostInMultiplayer ;
8703: CALL_OW 107
// end ;
8707: GO 8638
8709: POP
8710: POP
// enable ;
8711: ENABLE
// end ; end_of_file
8712: PPOPN 5
8714: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8715: LD_INT 0
8717: PPUSH
8718: PPUSH
// for un in battle_flags_id do
8719: LD_ADDR_VAR 0 2
8723: PUSH
8724: LD_EXP 31
8728: PUSH
8729: FOR_IN
8730: IFFALSE 8805
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8732: LD_VAR 0 2
8736: PPUSH
8737: LD_INT 1
8739: PUSH
8740: LD_LOC 11
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: PUSH
8749: LD_INT 2
8751: PUSH
8752: LD_LOC 11
8756: PUSH
8757: LD_INT 2
8759: DIV
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 3
8767: PUSH
8768: LD_LOC 11
8772: PUSH
8773: LD_INT 5
8775: DIV
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 20
8783: PUSH
8784: LD_LOC 11
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: PPUSH
8799: CALL_OW 423
8803: GO 8729
8805: POP
8806: POP
// end ;
8807: LD_VAR 0 1
8811: RET
// every 1 do var un ;
8812: GO 8814
8814: DISABLE
8815: LD_INT 0
8817: PPUSH
// begin if not def_morale_flags then
8818: LD_EXP 52
8822: NOT
8823: IFFALSE 8827
// exit ;
8825: GO 8904
// if not morale_decreasing_time then
8827: LD_EXP 10
8831: NOT
8832: IFFALSE 8836
// exit ;
8834: GO 8904
// strength = 100 ;
8836: LD_ADDR_LOC 11
8840: PUSH
8841: LD_INT 100
8843: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8844: LD_EXP 10
8848: PPUSH
8849: CALL_OW 67
// strength := strength - 1 ;
8853: LD_ADDR_LOC 11
8857: PUSH
8858: LD_LOC 11
8862: PUSH
8863: LD_INT 1
8865: MINUS
8866: ST_TO_ADDR
// Update_Flags ;
8867: CALL 8715 0 0
// until not strength ;
8871: LD_LOC 11
8875: NOT
8876: IFFALSE 8844
// for un in battle_flags_id do
8878: LD_ADDR_VAR 0 1
8882: PUSH
8883: LD_EXP 31
8887: PUSH
8888: FOR_IN
8889: IFFALSE 8902
// KillBattleFlag ( un ) ;
8891: LD_VAR 0 1
8895: PPUSH
8896: CALL_OW 419
8900: GO 8888
8902: POP
8903: POP
// end ; end_of_file
8904: PPOPN 1
8906: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8907: LD_INT 0
8909: PPUSH
8910: PPUSH
8911: PPUSH
// enable ( 600 ) ;
8912: LD_INT 600
8914: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8915: LD_ADDR_VAR 0 2
8919: PUSH
8920: DOUBLE
8921: LD_INT 1
8923: DEC
8924: ST_TO_ADDR
8925: LD_EXP 41
8929: PUSH
8930: FOR_TO
8931: IFFALSE 9086
// if Position_Sides [ i ] then
8933: LD_EXP 23
8937: PUSH
8938: LD_VAR 0 2
8942: ARRAY
8943: IFFALSE 9084
// for j := 1 to 8 do
8945: LD_ADDR_VAR 0 3
8949: PUSH
8950: DOUBLE
8951: LD_INT 1
8953: DEC
8954: ST_TO_ADDR
8955: LD_INT 8
8957: PUSH
8958: FOR_TO
8959: IFFALSE 9082
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8961: LD_EXP 19
8965: PUSH
8966: LD_VAR 0 3
8970: ARRAY
8971: PUSH
8972: LD_EXP 17
8976: PUSH
8977: LD_EXP 23
8981: PUSH
8982: LD_VAR 0 2
8986: ARRAY
8987: ARRAY
8988: PUSH
8989: LD_EXP 17
8993: PUSH
8994: LD_VAR 0 3
8998: ARRAY
8999: NONEQUAL
9000: PUSH
9001: LD_EXP 21
9005: NOT
9006: PUSH
9007: LD_EXP 23
9011: PUSH
9012: LD_VAR 0 2
9016: ARRAY
9017: PUSH
9018: LD_VAR 0 3
9022: NONEQUAL
9023: AND
9024: OR
9025: AND
9026: IFFALSE 9050
// HideArea ( j , BuildUpAreas [ i ] ) else
9028: LD_VAR 0 3
9032: PPUSH
9033: LD_EXP 41
9037: PUSH
9038: LD_VAR 0 2
9042: ARRAY
9043: PPUSH
9044: CALL_OW 333
9048: GO 9080
// if ( j = your_side ) then
9050: LD_VAR 0 3
9054: PUSH
9055: LD_OWVAR 2
9059: EQUAL
9060: IFFALSE 9080
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
9062: LD_EXP 41
9066: PUSH
9067: LD_VAR 0 2
9071: ARRAY
9072: PPUSH
9073: LD_INT 5
9075: PPUSH
9076: CALL_OW 424
9080: GO 8958
9082: POP
9083: POP
9084: GO 8930
9086: POP
9087: POP
// end ;
9088: LD_VAR 0 1
9092: RET
// export function EndBuildUp ; var i , j ; begin
9093: LD_INT 0
9095: PPUSH
9096: PPUSH
9097: PPUSH
// disable ( 600 ) ;
9098: LD_INT 600
9100: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
9101: LD_ADDR_VAR 0 2
9105: PUSH
9106: DOUBLE
9107: LD_INT 1
9109: DEC
9110: ST_TO_ADDR
9111: LD_EXP 41
9115: PUSH
9116: FOR_TO
9117: IFFALSE 9272
// if Position_Sides [ i ] then
9119: LD_EXP 23
9123: PUSH
9124: LD_VAR 0 2
9128: ARRAY
9129: IFFALSE 9270
// for j := 1 to 8 do
9131: LD_ADDR_VAR 0 3
9135: PUSH
9136: DOUBLE
9137: LD_INT 1
9139: DEC
9140: ST_TO_ADDR
9141: LD_INT 8
9143: PUSH
9144: FOR_TO
9145: IFFALSE 9268
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9147: LD_EXP 19
9151: PUSH
9152: LD_VAR 0 3
9156: ARRAY
9157: PUSH
9158: LD_EXP 17
9162: PUSH
9163: LD_EXP 23
9167: PUSH
9168: LD_VAR 0 2
9172: ARRAY
9173: ARRAY
9174: PUSH
9175: LD_EXP 17
9179: PUSH
9180: LD_VAR 0 3
9184: ARRAY
9185: NONEQUAL
9186: PUSH
9187: LD_EXP 21
9191: NOT
9192: PUSH
9193: LD_EXP 23
9197: PUSH
9198: LD_VAR 0 2
9202: ARRAY
9203: PUSH
9204: LD_VAR 0 3
9208: NONEQUAL
9209: AND
9210: OR
9211: AND
9212: IFFALSE 9236
// ShowArea ( j , BuildUpAreas [ i ] ) else
9214: LD_VAR 0 3
9218: PPUSH
9219: LD_EXP 41
9223: PUSH
9224: LD_VAR 0 2
9228: ARRAY
9229: PPUSH
9230: CALL_OW 334
9234: GO 9266
// if ( j = your_side ) then
9236: LD_VAR 0 3
9240: PUSH
9241: LD_OWVAR 2
9245: EQUAL
9246: IFFALSE 9266
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9248: LD_EXP 41
9252: PUSH
9253: LD_VAR 0 2
9257: ARRAY
9258: PPUSH
9259: LD_INT 0
9261: PPUSH
9262: CALL_OW 424
9266: GO 9144
9268: POP
9269: POP
9270: GO 9116
9272: POP
9273: POP
// end ;
9274: LD_VAR 0 1
9278: RET
// every 5 marked 600 do var i , un ;
9279: GO 9281
9281: DISABLE
9282: LD_INT 0
9284: PPUSH
9285: PPUSH
// begin for i := 1 to BuildUpAreas do
9286: LD_ADDR_VAR 0 1
9290: PUSH
9291: DOUBLE
9292: LD_INT 1
9294: DEC
9295: ST_TO_ADDR
9296: LD_EXP 41
9300: PUSH
9301: FOR_TO
9302: IFFALSE 9457
// if Position_Sides [ i ] then
9304: LD_EXP 23
9308: PUSH
9309: LD_VAR 0 1
9313: ARRAY
9314: IFFALSE 9455
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9316: LD_ADDR_VAR 0 2
9320: PUSH
9321: LD_EXP 41
9325: PUSH
9326: LD_VAR 0 1
9330: ARRAY
9331: PPUSH
9332: LD_INT 2
9334: PUSH
9335: LD_INT 21
9337: PUSH
9338: LD_INT 1
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PUSH
9345: LD_INT 21
9347: PUSH
9348: LD_INT 2
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: LD_INT 22
9362: PUSH
9363: LD_OWVAR 2
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PPUSH
9376: CALL_OW 70
9380: PUSH
9381: FOR_IN
9382: IFFALSE 9453
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9384: LD_EXP 17
9388: PUSH
9389: LD_EXP 23
9393: PUSH
9394: LD_VAR 0 1
9398: ARRAY
9399: ARRAY
9400: PUSH
9401: LD_EXP 17
9405: PUSH
9406: LD_OWVAR 2
9410: ARRAY
9411: NONEQUAL
9412: PUSH
9413: LD_EXP 21
9417: NOT
9418: PUSH
9419: LD_EXP 23
9423: PUSH
9424: LD_VAR 0 1
9428: ARRAY
9429: PUSH
9430: LD_OWVAR 2
9434: NONEQUAL
9435: AND
9436: OR
9437: IFFALSE 9451
// ComMoveToArea ( un , BuildUpEscape ) ;
9439: LD_VAR 0 2
9443: PPUSH
9444: LD_INT 14
9446: PPUSH
9447: CALL_OW 113
9451: GO 9381
9453: POP
9454: POP
9455: GO 9301
9457: POP
9458: POP
// enable ;
9459: ENABLE
// end ;
9460: PPOPN 2
9462: END
// every 1 do
9463: GO 9465
9465: DISABLE
// if ( def_builduptime > 0 ) then
9466: LD_EXP 57
9470: PUSH
9471: LD_INT 0
9473: GREATER
9474: IFFALSE 9489
// begin wait ( buildUpTime_Delay ) ;
9476: LD_EXP 14
9480: PPUSH
9481: CALL_OW 67
// EndBuildUp ;
9485: CALL 9093 0 0
// end ; end_of_file
9489: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
9490: GO 9492
9492: DISABLE
9493: LD_INT 0
9495: PPUSH
// begin enable ;
9496: ENABLE
// for x := 1 to 8 do
9497: LD_ADDR_VAR 0 1
9501: PUSH
9502: DOUBLE
9503: LD_INT 1
9505: DEC
9506: ST_TO_ADDR
9507: LD_INT 8
9509: PUSH
9510: FOR_TO
9511: IFFALSE 9595
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
9513: LD_LOC 18
9517: PUSH
9518: LD_VAR 0 1
9522: ARRAY
9523: PUSH
9524: LD_INT 5
9526: GREATER
9527: PUSH
9528: LD_LOC 16
9532: PUSH
9533: LD_VAR 0 1
9537: ARRAY
9538: PUSH
9539: LD_INT 1
9541: NEG
9542: EQUAL
9543: AND
9544: IFFALSE 9593
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
9546: LD_ADDR_LOC 17
9550: PUSH
9551: LD_LOC 17
9555: PPUSH
9556: LD_VAR 0 1
9560: PPUSH
9561: LD_LOC 17
9565: PUSH
9566: LD_VAR 0 1
9570: ARRAY
9571: PUSH
9572: LD_INT 6
9574: PLUS
9575: PPUSH
9576: CALL_OW 1
9580: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
9581: LD_VAR 0 1
9585: PPUSH
9586: LD_INT 0
9588: PPUSH
9589: CALL 9767 0 2
// end ;
9593: GO 9510
9595: POP
9596: POP
// end ;
9597: PPOPN 1
9599: END
// every 0 0$1 marked 200 do var BGL , x ;
9600: GO 9602
9602: DISABLE
9603: LD_INT 0
9605: PPUSH
9606: PPUSH
// begin enable ;
9607: ENABLE
// for x := 1 to 8 do
9608: LD_ADDR_VAR 0 2
9612: PUSH
9613: DOUBLE
9614: LD_INT 1
9616: DEC
9617: ST_TO_ADDR
9618: LD_INT 8
9620: PUSH
9621: FOR_TO
9622: IFFALSE 9753
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
9624: LD_LOC 16
9628: PUSH
9629: LD_VAR 0 2
9633: ARRAY
9634: PUSH
9635: LD_INT 1
9637: NEG
9638: GREATER
9639: PUSH
9640: LD_LOC 16
9644: PUSH
9645: LD_VAR 0 2
9649: ARRAY
9650: PPUSH
9651: CALL_OW 300
9655: AND
9656: IFFALSE 9751
// begin BGL := GetLives ( BloodGods [ x ] ) ;
9658: LD_ADDR_VAR 0 1
9662: PUSH
9663: LD_LOC 16
9667: PUSH
9668: LD_VAR 0 2
9672: ARRAY
9673: PPUSH
9674: CALL_OW 256
9678: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
9679: LD_VAR 0 1
9683: PUSH
9684: LD_INT 1000
9686: LESS
9687: PUSH
9688: LD_VAR 0 1
9692: PUSH
9693: LD_INT 100
9695: GREATER
9696: AND
9697: IFFALSE 9751
// begin BGL := BGL + 10 ;
9699: LD_ADDR_VAR 0 1
9703: PUSH
9704: LD_VAR 0 1
9708: PUSH
9709: LD_INT 10
9711: PLUS
9712: ST_TO_ADDR
// if BGL > 1000 then
9713: LD_VAR 0 1
9717: PUSH
9718: LD_INT 1000
9720: GREATER
9721: IFFALSE 9731
// BGL := 1000 ;
9723: LD_ADDR_VAR 0 1
9727: PUSH
9728: LD_INT 1000
9730: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
9731: LD_LOC 16
9735: PUSH
9736: LD_VAR 0 2
9740: ARRAY
9741: PPUSH
9742: LD_VAR 0 1
9746: PPUSH
9747: CALL_OW 234
// end ; end ;
9751: GO 9621
9753: POP
9754: POP
// end ;
9755: PPOPN 2
9757: END
// every 0 0$1 marked 200 do
9758: GO 9760
9760: DISABLE
// begin DisplayTimeWithKills ;
9761: CALL 10008 0 0
// enable ;
9765: ENABLE
// end ;
9766: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
9767: LD_INT 0
9769: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
9770: LD_ADDR_OWVAR 24
9774: PUSH
9775: LD_INT 0
9777: PPUSH
9778: LD_INT 5
9780: PPUSH
9781: CALL_OW 12
9785: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
9786: LD_INT 1
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: LD_INT 15
9794: PPUSH
9795: CALL_OW 380
// hc_importance := 106 ;
9799: LD_ADDR_OWVAR 32
9803: PUSH
9804: LD_INT 106
9806: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
9807: LD_ADDR_OWVAR 26
9811: PUSH
9812: LD_STRING Blood God of 
9814: PUSH
9815: LD_OWVAR 19
9819: PUSH
9820: LD_VAR 0 1
9824: ARRAY
9825: STR
9826: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
9827: LD_ADDR_OWVAR 21
9831: PUSH
9832: LD_EXP 20
9836: PUSH
9837: LD_VAR 0 1
9841: ARRAY
9842: ST_TO_ADDR
// uc_side := side ;
9843: LD_ADDR_OWVAR 20
9847: PUSH
9848: LD_VAR 0 1
9852: ST_TO_ADDR
// hc_noskilllimit := true ;
9853: LD_ADDR_OWVAR 76
9857: PUSH
9858: LD_INT 1
9860: ST_TO_ADDR
// hc_agressivity := 50 ;
9861: LD_ADDR_OWVAR 35
9865: PUSH
9866: LD_INT 50
9868: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
9869: LD_ADDR_LOC 16
9873: PUSH
9874: LD_LOC 16
9878: PPUSH
9879: LD_VAR 0 1
9883: PPUSH
9884: CALL_OW 44
9888: PPUSH
9889: CALL_OW 1
9893: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
9894: LD_LOC 16
9898: PUSH
9899: LD_VAR 0 1
9903: ARRAY
9904: PPUSH
9905: LD_LOC 19
9909: PUSH
9910: LD_EXP 19
9914: PUSH
9915: LD_VAR 0 1
9919: ARRAY
9920: ARRAY
9921: PUSH
9922: LD_INT 1
9924: ARRAY
9925: PPUSH
9926: LD_LOC 19
9930: PUSH
9931: LD_EXP 19
9935: PUSH
9936: LD_VAR 0 1
9940: ARRAY
9941: ARRAY
9942: PUSH
9943: LD_INT 2
9945: ARRAY
9946: PPUSH
9947: LD_INT 10
9949: PPUSH
9950: LD_INT 0
9952: PPUSH
9953: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
9957: LD_LOC 16
9961: PUSH
9962: LD_VAR 0 1
9966: ARRAY
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: LD_INT 300
9973: PPUSH
9974: CALL_OW 239
// if not NoDialog then
9978: LD_VAR 0 2
9982: NOT
9983: IFFALSE 10003
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
9985: LD_LOC 16
9989: PUSH
9990: LD_VAR 0 1
9994: ARRAY
9995: PPUSH
9996: LD_STRING DLAwaken
9998: PPUSH
9999: CALL_OW 94
// end ;
10003: LD_VAR 0 3
10007: RET
// function DisplayTimeWithKills ; var x ; begin
10008: LD_INT 0
10010: PPUSH
10011: PPUSH
// ExtraStrings :=  ;
10012: LD_ADDR_EXP 59
10016: PUSH
10017: LD_STRING 
10019: ST_TO_ADDR
// for x = 1 to Side_Positions do
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: DOUBLE
10026: LD_INT 1
10028: DEC
10029: ST_TO_ADDR
10030: LD_EXP 19
10034: PUSH
10035: FOR_TO
10036: IFFALSE 10269
// if Side_Positions [ x ] then
10038: LD_EXP 19
10042: PUSH
10043: LD_VAR 0 2
10047: ARRAY
10048: IFFALSE 10267
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
10050: LD_ADDR_LOC 18
10054: PUSH
10055: LD_LOC 18
10059: PPUSH
10060: LD_VAR 0 2
10064: PPUSH
10065: LD_VAR 0 2
10069: PPUSH
10070: CALL_OW 515
10074: PUSH
10075: LD_LOC 17
10079: PUSH
10080: LD_VAR 0 2
10084: ARRAY
10085: MINUS
10086: PPUSH
10087: CALL_OW 1
10091: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
10092: LD_LOC 16
10096: PUSH
10097: LD_VAR 0 2
10101: ARRAY
10102: PUSH
10103: LD_INT 1
10105: NEG
10106: GREATER
10107: PUSH
10108: LD_LOC 16
10112: PUSH
10113: LD_VAR 0 2
10117: ARRAY
10118: PPUSH
10119: CALL_OW 300
10123: AND
10124: IFFALSE 10157
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
10126: LD_ADDR_EXP 59
10130: PUSH
10131: LD_EXP 59
10135: PUSH
10136: LD_STRING #godawoken
10138: PUSH
10139: LD_VAR 0 2
10143: PUSH
10144: LD_VAR 0 2
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: ADD
10154: ST_TO_ADDR
10155: GO 10267
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
10157: LD_LOC 16
10161: PUSH
10162: LD_VAR 0 2
10166: ARRAY
10167: PUSH
10168: LD_INT 1
10170: NEG
10171: GREATER
10172: PUSH
10173: LD_LOC 16
10177: PUSH
10178: LD_VAR 0 2
10182: ARRAY
10183: PPUSH
10184: CALL_OW 301
10188: AND
10189: IFFALSE 10222
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
10191: LD_ADDR_EXP 59
10195: PUSH
10196: LD_EXP 59
10200: PUSH
10201: LD_STRING #goddied
10203: PUSH
10204: LD_VAR 0 2
10208: PUSH
10209: LD_VAR 0 2
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: LIST
10218: ADD
10219: ST_TO_ADDR
10220: GO 10267
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
10222: LD_ADDR_EXP 59
10226: PUSH
10227: LD_EXP 59
10231: PUSH
10232: LD_STRING #godssacrifise
10234: PUSH
10235: LD_VAR 0 2
10239: PUSH
10240: LD_VAR 0 2
10244: PUSH
10245: LD_LOC 18
10249: PUSH
10250: LD_VAR 0 2
10254: ARRAY
10255: PUSH
10256: LD_INT 6
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: ADD
10266: ST_TO_ADDR
10267: GO 10035
10269: POP
10270: POP
// end ;
10271: LD_VAR 0 1
10275: RET
// export function InitBloodGods ; begin
10276: LD_INT 0
10278: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
10279: LD_ADDR_LOC 16
10283: PUSH
10284: LD_INT 1
10286: NEG
10287: PUSH
10288: LD_INT 1
10290: NEG
10291: PUSH
10292: LD_INT 1
10294: NEG
10295: PUSH
10296: LD_INT 1
10298: NEG
10299: PUSH
10300: LD_INT 1
10302: NEG
10303: PUSH
10304: LD_INT 1
10306: NEG
10307: PUSH
10308: LD_INT 1
10310: NEG
10311: PUSH
10312: LD_INT 1
10314: NEG
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10326: LD_ADDR_LOC 17
10330: PUSH
10331: LD_INT 0
10333: PUSH
10334: LD_INT 0
10336: PUSH
10337: LD_INT 0
10339: PUSH
10340: LD_INT 0
10342: PUSH
10343: LD_INT 0
10345: PUSH
10346: LD_INT 0
10348: PUSH
10349: LD_INT 0
10351: PUSH
10352: LD_INT 0
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10365: LD_ADDR_LOC 18
10369: PUSH
10370: LD_INT 0
10372: PUSH
10373: LD_INT 0
10375: PUSH
10376: LD_INT 0
10378: PUSH
10379: LD_INT 0
10381: PUSH
10382: LD_INT 0
10384: PUSH
10385: LD_INT 0
10387: PUSH
10388: LD_INT 0
10390: PUSH
10391: LD_INT 0
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
10404: LD_ADDR_LOC 19
10408: PUSH
10409: LD_INT 60
10411: PUSH
10412: LD_INT 47
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: LD_INT 82
10421: PUSH
10422: LD_INT 26
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 124
10431: PUSH
10432: LD_INT 45
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 147
10441: PUSH
10442: LD_INT 90
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 126
10451: PUSH
10452: LD_INT 112
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 84
10461: PUSH
10462: LD_INT 92
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 106
10471: PUSH
10472: LD_INT 73
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PUSH
10479: LD_INT 106
10481: PUSH
10482: LD_INT 73
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: ST_TO_ADDR
// ClearHumansKilled ;
10499: CALL_OW 516
// enable ( 200 ) ;
10503: LD_INT 200
10505: ENABLE_MARKED
// end ; end_of_file
10506: LD_VAR 0 1
10510: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
10511: LD_INT 0
10513: PPUSH
10514: PPUSH
// if ( not IAmSpec ) then
10515: CALL_OW 531
10519: NOT
10520: IFFALSE 10536
// Result := Limits_Info ^  ;
10522: LD_ADDR_VAR 0 1
10526: PUSH
10527: LD_LOC 27
10531: PUSH
10532: LD_STRING 
10534: ADD
10535: ST_TO_ADDR
// for i := 1 to 8 do
10536: LD_ADDR_VAR 0 2
10540: PUSH
10541: DOUBLE
10542: LD_INT 1
10544: DEC
10545: ST_TO_ADDR
10546: LD_INT 8
10548: PUSH
10549: FOR_TO
10550: IFFALSE 10595
// if Cheaters [ i ] then
10552: LD_LOC 28
10556: PUSH
10557: LD_VAR 0 2
10561: ARRAY
10562: IFFALSE 10593
// Result := Result ^ [ #Cheater , i , i ] ;
10564: LD_ADDR_VAR 0 1
10568: PUSH
10569: LD_VAR 0 1
10573: PUSH
10574: LD_STRING #Cheater
10576: PUSH
10577: LD_VAR 0 2
10581: PUSH
10582: LD_VAR 0 2
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: LIST
10591: ADD
10592: ST_TO_ADDR
10593: GO 10549
10595: POP
10596: POP
// end ;
10597: LD_VAR 0 1
10601: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
10602: LD_INT 0
10604: PPUSH
10605: PPUSH
10606: PPUSH
10607: PPUSH
10608: PPUSH
// if game_type in [ 10 , 11 ] then
10609: LD_EXP 42
10613: PUSH
10614: LD_INT 10
10616: PUSH
10617: LD_INT 11
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: IN
10624: IFFALSE 10640
// def_game_rules = def_game_rules + 1 ;
10626: LD_ADDR_EXP 43
10630: PUSH
10631: LD_EXP 43
10635: PUSH
10636: LD_INT 1
10638: PLUS
10639: ST_TO_ADDR
// case def_game_rules of 0 :
10640: LD_EXP 43
10644: PUSH
10645: LD_INT 0
10647: DOUBLE
10648: EQUAL
10649: IFTRUE 10653
10651: GO 10658
10653: POP
// exit ; 1 :
10654: GO 12716
10656: GO 12616
10658: LD_INT 1
10660: DOUBLE
10661: EQUAL
10662: IFTRUE 10666
10664: GO 10882
10666: POP
// begin def_base_level := 2 ;
10667: LD_ADDR_EXP 44
10671: PUSH
10672: LD_INT 2
10674: ST_TO_ADDR
// def_amount_of_people := 2 ;
10675: LD_ADDR_EXP 45
10679: PUSH
10680: LD_INT 2
10682: ST_TO_ADDR
// def_skill_level := 1 ;
10683: LD_ADDR_EXP 46
10687: PUSH
10688: LD_INT 1
10690: ST_TO_ADDR
// def_starting_resources := 2 ;
10691: LD_ADDR_EXP 47
10695: PUSH
10696: LD_INT 2
10698: ST_TO_ADDR
// def_shipments_density := 1 ;
10699: LD_ADDR_EXP 48
10703: PUSH
10704: LD_INT 1
10706: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10707: LD_ADDR_EXP 49
10711: PUSH
10712: LD_INT 0
10714: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10715: LD_ADDR_EXP 50
10719: PUSH
10720: LD_INT 1
10722: ST_TO_ADDR
// def_shared_vision := 1 ;
10723: LD_ADDR_EXP 51
10727: PUSH
10728: LD_INT 1
10730: ST_TO_ADDR
// def_morale_flags := 3 ;
10731: LD_ADDR_EXP 52
10735: PUSH
10736: LD_INT 3
10738: ST_TO_ADDR
// def_siberite_detection := 1 ;
10739: LD_ADDR_EXP 53
10743: PUSH
10744: LD_INT 1
10746: ST_TO_ADDR
// def_people_respawning := 1 ;
10747: LD_ADDR_EXP 54
10751: PUSH
10752: LD_INT 1
10754: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10755: LD_ADDR_EXP 55
10759: PUSH
10760: LD_INT 1
10762: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10763: LD_ADDR_EXP 56
10767: PUSH
10768: LD_INT 0
10770: ST_TO_ADDR
// def_builduptime := 2 ;
10771: LD_ADDR_EXP 57
10775: PUSH
10776: LD_INT 2
10778: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
10779: LD_ADDR_VAR 0 2
10783: PUSH
10784: EMPTY
10785: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10786: LD_ADDR_VAR 0 3
10790: PUSH
10791: EMPTY
10792: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10793: LD_ADDR_LOC 22
10797: PUSH
10798: EMPTY
10799: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10800: LD_ADDR_LOC 23
10804: PUSH
10805: EMPTY
10806: ST_TO_ADDR
// Banned_Controls := [ ] ;
10807: LD_ADDR_LOC 24
10811: PUSH
10812: EMPTY
10813: ST_TO_ADDR
// Banned_Engines := [ ] ;
10814: LD_ADDR_LOC 25
10818: PUSH
10819: EMPTY
10820: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10821: LD_ADDR_LOC 20
10825: PUSH
10826: LD_INT 37
10828: PUSH
10829: EMPTY
10830: LIST
10831: PUSH
10832: LD_INT 4
10834: PUSH
10835: LD_INT 5
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 31
10844: PUSH
10845: LD_INT 32
10847: PUSH
10848: LD_INT 33
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
10861: LD_ADDR_LOC 21
10865: PUSH
10866: LD_INT 2
10868: PUSH
10869: LD_INT 2
10871: PUSH
10872: LD_INT 4
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: ST_TO_ADDR
// end ; 2 :
10880: GO 12616
10882: LD_INT 2
10884: DOUBLE
10885: EQUAL
10886: IFTRUE 10890
10888: GO 11099
10890: POP
// begin def_base_level := 1 ;
10891: LD_ADDR_EXP 44
10895: PUSH
10896: LD_INT 1
10898: ST_TO_ADDR
// def_amount_of_people := 2 ;
10899: LD_ADDR_EXP 45
10903: PUSH
10904: LD_INT 2
10906: ST_TO_ADDR
// def_skill_level := 3 ;
10907: LD_ADDR_EXP 46
10911: PUSH
10912: LD_INT 3
10914: ST_TO_ADDR
// def_starting_resources := 3 ;
10915: LD_ADDR_EXP 47
10919: PUSH
10920: LD_INT 3
10922: ST_TO_ADDR
// def_shipments_density := 2 ;
10923: LD_ADDR_EXP 48
10927: PUSH
10928: LD_INT 2
10930: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10931: LD_ADDR_EXP 49
10935: PUSH
10936: LD_INT 1
10938: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10939: LD_ADDR_EXP 50
10943: PUSH
10944: LD_INT 2
10946: ST_TO_ADDR
// def_shared_vision := 1 ;
10947: LD_ADDR_EXP 51
10951: PUSH
10952: LD_INT 1
10954: ST_TO_ADDR
// def_morale_flags := 0 ;
10955: LD_ADDR_EXP 52
10959: PUSH
10960: LD_INT 0
10962: ST_TO_ADDR
// def_siberite_detection := 1 ;
10963: LD_ADDR_EXP 53
10967: PUSH
10968: LD_INT 1
10970: ST_TO_ADDR
// def_people_respawning := 0 ;
10971: LD_ADDR_EXP 54
10975: PUSH
10976: LD_INT 0
10978: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10979: LD_ADDR_EXP 55
10983: PUSH
10984: LD_INT 0
10986: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10987: LD_ADDR_EXP 56
10991: PUSH
10992: LD_INT 0
10994: ST_TO_ADDR
// def_builduptime := 2 ;
10995: LD_ADDR_EXP 57
10999: PUSH
11000: LD_INT 2
11002: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11003: LD_ADDR_VAR 0 2
11007: PUSH
11008: LD_INT 1
11010: PUSH
11011: EMPTY
11012: LIST
11013: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11014: LD_ADDR_VAR 0 3
11018: PUSH
11019: EMPTY
11020: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11021: LD_ADDR_LOC 22
11025: PUSH
11026: EMPTY
11027: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11028: LD_ADDR_LOC 23
11032: PUSH
11033: EMPTY
11034: ST_TO_ADDR
// Banned_Controls := [ ] ;
11035: LD_ADDR_LOC 24
11039: PUSH
11040: EMPTY
11041: ST_TO_ADDR
// Banned_Engines := [ ] ;
11042: LD_ADDR_LOC 25
11046: PUSH
11047: EMPTY
11048: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11049: LD_ADDR_LOC 20
11053: PUSH
11054: LD_INT 4
11056: PUSH
11057: LD_INT 5
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 31
11066: PUSH
11067: LD_INT 32
11069: PUSH
11070: LD_INT 33
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
11082: LD_ADDR_LOC 21
11086: PUSH
11087: LD_INT 1
11089: PUSH
11090: LD_INT 2
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: ST_TO_ADDR
// end ; 3 :
11097: GO 12616
11099: LD_INT 3
11101: DOUBLE
11102: EQUAL
11103: IFTRUE 11107
11105: GO 11350
11107: POP
// begin def_base_level := 1 ;
11108: LD_ADDR_EXP 44
11112: PUSH
11113: LD_INT 1
11115: ST_TO_ADDR
// def_amount_of_people := 2 ;
11116: LD_ADDR_EXP 45
11120: PUSH
11121: LD_INT 2
11123: ST_TO_ADDR
// def_skill_level := 3 ;
11124: LD_ADDR_EXP 46
11128: PUSH
11129: LD_INT 3
11131: ST_TO_ADDR
// def_starting_resources := 3 ;
11132: LD_ADDR_EXP 47
11136: PUSH
11137: LD_INT 3
11139: ST_TO_ADDR
// def_shipments_density := 1 ;
11140: LD_ADDR_EXP 48
11144: PUSH
11145: LD_INT 1
11147: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11148: LD_ADDR_EXP 49
11152: PUSH
11153: LD_INT 0
11155: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11156: LD_ADDR_EXP 50
11160: PUSH
11161: LD_INT 1
11163: ST_TO_ADDR
// def_shared_vision := 1 ;
11164: LD_ADDR_EXP 51
11168: PUSH
11169: LD_INT 1
11171: ST_TO_ADDR
// def_morale_flags := 0 ;
11172: LD_ADDR_EXP 52
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// def_siberite_detection := 1 ;
11180: LD_ADDR_EXP 53
11184: PUSH
11185: LD_INT 1
11187: ST_TO_ADDR
// def_people_respawning := 0 ;
11188: LD_ADDR_EXP 54
11192: PUSH
11193: LD_INT 0
11195: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11196: LD_ADDR_EXP 55
11200: PUSH
11201: LD_INT 2
11203: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11204: LD_ADDR_EXP 56
11208: PUSH
11209: LD_INT 0
11211: ST_TO_ADDR
// def_builduptime := 1 ;
11212: LD_ADDR_EXP 57
11216: PUSH
11217: LD_INT 1
11219: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11220: LD_ADDR_VAR 0 2
11224: PUSH
11225: LD_INT 23
11227: PUSH
11228: EMPTY
11229: LIST
11230: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
11231: LD_ADDR_VAR 0 3
11235: PUSH
11236: LD_INT 2
11238: PUSH
11239: LD_INT 37
11241: PUSH
11242: LD_INT 32
11244: PUSH
11245: LD_INT 33
11247: PUSH
11248: LD_INT 36
11250: PUSH
11251: LD_INT 16
11253: PUSH
11254: LD_INT 23
11256: PUSH
11257: LD_INT 21
11259: PUSH
11260: LD_INT 18
11262: PUSH
11263: LD_INT 22
11265: PUSH
11266: LD_INT 20
11268: PUSH
11269: LD_INT 19
11271: PUSH
11272: LD_INT 25
11274: PUSH
11275: LD_INT 17
11277: PUSH
11278: LD_INT 24
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11298: LD_ADDR_LOC 22
11302: PUSH
11303: EMPTY
11304: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11305: LD_ADDR_LOC 23
11309: PUSH
11310: EMPTY
11311: ST_TO_ADDR
// Banned_Controls := [ ] ;
11312: LD_ADDR_LOC 24
11316: PUSH
11317: EMPTY
11318: ST_TO_ADDR
// Banned_Engines := [ ] ;
11319: LD_ADDR_LOC 25
11323: PUSH
11324: EMPTY
11325: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11326: LD_ADDR_LOC 20
11330: PUSH
11331: EMPTY
11332: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11333: LD_ADDR_LOC 21
11337: PUSH
11338: EMPTY
11339: ST_TO_ADDR
// No_Mechs := true ;
11340: LD_ADDR_EXP 58
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// end ; 4 :
11348: GO 12616
11350: LD_INT 4
11352: DOUBLE
11353: EQUAL
11354: IFTRUE 11358
11356: GO 11533
11358: POP
// begin def_base_level := 1 ;
11359: LD_ADDR_EXP 44
11363: PUSH
11364: LD_INT 1
11366: ST_TO_ADDR
// def_amount_of_people := 2 ;
11367: LD_ADDR_EXP 45
11371: PUSH
11372: LD_INT 2
11374: ST_TO_ADDR
// def_skill_level := 3 ;
11375: LD_ADDR_EXP 46
11379: PUSH
11380: LD_INT 3
11382: ST_TO_ADDR
// def_starting_resources := 3 ;
11383: LD_ADDR_EXP 47
11387: PUSH
11388: LD_INT 3
11390: ST_TO_ADDR
// def_shipments_density := 2 ;
11391: LD_ADDR_EXP 48
11395: PUSH
11396: LD_INT 2
11398: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11399: LD_ADDR_EXP 49
11403: PUSH
11404: LD_INT 1
11406: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11407: LD_ADDR_EXP 50
11411: PUSH
11412: LD_INT 2
11414: ST_TO_ADDR
// def_shared_vision := 1 ;
11415: LD_ADDR_EXP 51
11419: PUSH
11420: LD_INT 1
11422: ST_TO_ADDR
// def_morale_flags := 0 ;
11423: LD_ADDR_EXP 52
11427: PUSH
11428: LD_INT 0
11430: ST_TO_ADDR
// def_siberite_detection := 1 ;
11431: LD_ADDR_EXP 53
11435: PUSH
11436: LD_INT 1
11438: ST_TO_ADDR
// def_people_respawning := 0 ;
11439: LD_ADDR_EXP 54
11443: PUSH
11444: LD_INT 0
11446: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11447: LD_ADDR_EXP 55
11451: PUSH
11452: LD_INT 0
11454: ST_TO_ADDR
// def_siberite_bomb := 1 ;
11455: LD_ADDR_EXP 56
11459: PUSH
11460: LD_INT 1
11462: ST_TO_ADDR
// def_builduptime := 3 ;
11463: LD_ADDR_EXP 57
11467: PUSH
11468: LD_INT 3
11470: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11471: LD_ADDR_VAR 0 2
11475: PUSH
11476: LD_INT 1
11478: PUSH
11479: EMPTY
11480: LIST
11481: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11482: LD_ADDR_VAR 0 3
11486: PUSH
11487: EMPTY
11488: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11489: LD_ADDR_LOC 22
11493: PUSH
11494: EMPTY
11495: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11496: LD_ADDR_LOC 23
11500: PUSH
11501: EMPTY
11502: ST_TO_ADDR
// Banned_Controls := [ ] ;
11503: LD_ADDR_LOC 24
11507: PUSH
11508: EMPTY
11509: ST_TO_ADDR
// Banned_Engines := [ ] ;
11510: LD_ADDR_LOC 25
11514: PUSH
11515: EMPTY
11516: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11517: LD_ADDR_LOC 20
11521: PUSH
11522: EMPTY
11523: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11524: LD_ADDR_LOC 21
11528: PUSH
11529: EMPTY
11530: ST_TO_ADDR
// end ; 5 :
11531: GO 12616
11533: LD_INT 5
11535: DOUBLE
11536: EQUAL
11537: IFTRUE 11541
11539: GO 11790
11541: POP
// begin def_base_level := 0 ;
11542: LD_ADDR_EXP 44
11546: PUSH
11547: LD_INT 0
11549: ST_TO_ADDR
// def_amount_of_people := 0 ;
11550: LD_ADDR_EXP 45
11554: PUSH
11555: LD_INT 0
11557: ST_TO_ADDR
// def_skill_level := 0 ;
11558: LD_ADDR_EXP 46
11562: PUSH
11563: LD_INT 0
11565: ST_TO_ADDR
// def_starting_resources := 0 ;
11566: LD_ADDR_EXP 47
11570: PUSH
11571: LD_INT 0
11573: ST_TO_ADDR
// def_shipments_density := 0 ;
11574: LD_ADDR_EXP 48
11578: PUSH
11579: LD_INT 0
11581: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11582: LD_ADDR_EXP 49
11586: PUSH
11587: LD_INT 0
11589: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11590: LD_ADDR_EXP 50
11594: PUSH
11595: LD_INT 0
11597: ST_TO_ADDR
// def_shared_vision := 1 ;
11598: LD_ADDR_EXP 51
11602: PUSH
11603: LD_INT 1
11605: ST_TO_ADDR
// def_morale_flags := 0 ;
11606: LD_ADDR_EXP 52
11610: PUSH
11611: LD_INT 0
11613: ST_TO_ADDR
// def_siberite_detection := 0 ;
11614: LD_ADDR_EXP 53
11618: PUSH
11619: LD_INT 0
11621: ST_TO_ADDR
// def_people_respawning := 1 ;
11622: LD_ADDR_EXP 54
11626: PUSH
11627: LD_INT 1
11629: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11630: LD_ADDR_EXP 55
11634: PUSH
11635: LD_INT 1
11637: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11638: LD_ADDR_EXP 56
11642: PUSH
11643: LD_INT 0
11645: ST_TO_ADDR
// def_builduptime := 0 ;
11646: LD_ADDR_EXP 57
11650: PUSH
11651: LD_INT 0
11653: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
11654: LD_ADDR_VAR 0 2
11658: PUSH
11659: LD_INT 10
11661: PUSH
11662: LD_INT 3
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
11669: LD_ADDR_VAR 0 3
11673: PUSH
11674: LD_INT 12
11676: PUSH
11677: LD_INT 11
11679: PUSH
11680: LD_INT 14
11682: PUSH
11683: LD_INT 13
11685: PUSH
11686: LD_INT 5
11688: PUSH
11689: LD_INT 24
11691: PUSH
11692: LD_INT 21
11694: PUSH
11695: LD_INT 33
11697: PUSH
11698: LD_INT 36
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
11712: LD_ADDR_LOC 22
11716: PUSH
11717: LD_INT 31
11719: PUSH
11720: EMPTY
11721: LIST
11722: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11723: LD_ADDR_LOC 23
11727: PUSH
11728: EMPTY
11729: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
11730: LD_ADDR_LOC 24
11734: PUSH
11735: LD_INT 2
11737: PUSH
11738: EMPTY
11739: LIST
11740: ST_TO_ADDR
// Banned_Engines := [ ] ;
11741: LD_ADDR_LOC 25
11745: PUSH
11746: EMPTY
11747: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
11748: LD_ADDR_LOC 20
11752: PUSH
11753: LD_INT 4
11755: PUSH
11756: EMPTY
11757: LIST
11758: PUSH
11759: LD_INT 31
11761: PUSH
11762: LD_INT 32
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
11773: LD_ADDR_LOC 21
11777: PUSH
11778: LD_INT 1
11780: PUSH
11781: LD_INT 1
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: ST_TO_ADDR
// end ; 6 :
11788: GO 12616
11790: LD_INT 6
11792: DOUBLE
11793: EQUAL
11794: IFTRUE 11798
11796: GO 12001
11798: POP
// begin def_base_level := 1 ;
11799: LD_ADDR_EXP 44
11803: PUSH
11804: LD_INT 1
11806: ST_TO_ADDR
// def_amount_of_people := 2 ;
11807: LD_ADDR_EXP 45
11811: PUSH
11812: LD_INT 2
11814: ST_TO_ADDR
// def_skill_level := 3 ;
11815: LD_ADDR_EXP 46
11819: PUSH
11820: LD_INT 3
11822: ST_TO_ADDR
// def_starting_resources := 3 ;
11823: LD_ADDR_EXP 47
11827: PUSH
11828: LD_INT 3
11830: ST_TO_ADDR
// def_shipments_density := 1 ;
11831: LD_ADDR_EXP 48
11835: PUSH
11836: LD_INT 1
11838: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11839: LD_ADDR_EXP 49
11843: PUSH
11844: LD_INT 0
11846: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11847: LD_ADDR_EXP 50
11851: PUSH
11852: LD_INT 1
11854: ST_TO_ADDR
// def_shared_vision := 1 ;
11855: LD_ADDR_EXP 51
11859: PUSH
11860: LD_INT 1
11862: ST_TO_ADDR
// def_morale_flags := 0 ;
11863: LD_ADDR_EXP 52
11867: PUSH
11868: LD_INT 0
11870: ST_TO_ADDR
// def_siberite_detection := 1 ;
11871: LD_ADDR_EXP 53
11875: PUSH
11876: LD_INT 1
11878: ST_TO_ADDR
// def_people_respawning := 2 ;
11879: LD_ADDR_EXP 54
11883: PUSH
11884: LD_INT 2
11886: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11887: LD_ADDR_EXP 55
11891: PUSH
11892: LD_INT 1
11894: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11895: LD_ADDR_EXP 56
11899: PUSH
11900: LD_INT 0
11902: ST_TO_ADDR
// def_builduptime := 1 ;
11903: LD_ADDR_EXP 57
11907: PUSH
11908: LD_INT 1
11910: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11911: LD_ADDR_VAR 0 2
11915: PUSH
11916: LD_INT 23
11918: PUSH
11919: EMPTY
11920: LIST
11921: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
11922: LD_ADDR_VAR 0 3
11926: PUSH
11927: LD_INT 2
11929: PUSH
11930: LD_INT 37
11932: PUSH
11933: LD_INT 31
11935: PUSH
11936: LD_INT 32
11938: PUSH
11939: LD_INT 33
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11949: LD_ADDR_LOC 22
11953: PUSH
11954: EMPTY
11955: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11956: LD_ADDR_LOC 23
11960: PUSH
11961: EMPTY
11962: ST_TO_ADDR
// Banned_Controls := [ ] ;
11963: LD_ADDR_LOC 24
11967: PUSH
11968: EMPTY
11969: ST_TO_ADDR
// Banned_Engines := [ ] ;
11970: LD_ADDR_LOC 25
11974: PUSH
11975: EMPTY
11976: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11977: LD_ADDR_LOC 20
11981: PUSH
11982: EMPTY
11983: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11984: LD_ADDR_LOC 21
11988: PUSH
11989: EMPTY
11990: ST_TO_ADDR
// No_Mechs := true ;
11991: LD_ADDR_EXP 58
11995: PUSH
11996: LD_INT 1
11998: ST_TO_ADDR
// end ; 7 :
11999: GO 12616
12001: LD_INT 7
12003: DOUBLE
12004: EQUAL
12005: IFTRUE 12009
12007: GO 12207
12009: POP
// begin def_base_level := 1 ;
12010: LD_ADDR_EXP 44
12014: PUSH
12015: LD_INT 1
12017: ST_TO_ADDR
// def_amount_of_people := 2 ;
12018: LD_ADDR_EXP 45
12022: PUSH
12023: LD_INT 2
12025: ST_TO_ADDR
// def_skill_level := 3 ;
12026: LD_ADDR_EXP 46
12030: PUSH
12031: LD_INT 3
12033: ST_TO_ADDR
// def_starting_resources := 3 ;
12034: LD_ADDR_EXP 47
12038: PUSH
12039: LD_INT 3
12041: ST_TO_ADDR
// def_shipments_density := 1 ;
12042: LD_ADDR_EXP 48
12046: PUSH
12047: LD_INT 1
12049: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
12050: LD_ADDR_EXP 49
12054: PUSH
12055: LD_INT 1
12057: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
12058: LD_ADDR_EXP 50
12062: PUSH
12063: LD_INT 2
12065: ST_TO_ADDR
// def_shared_vision := 1 ;
12066: LD_ADDR_EXP 51
12070: PUSH
12071: LD_INT 1
12073: ST_TO_ADDR
// def_morale_flags := 0 ;
12074: LD_ADDR_EXP 52
12078: PUSH
12079: LD_INT 0
12081: ST_TO_ADDR
// def_siberite_detection := 1 ;
12082: LD_ADDR_EXP 53
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// def_people_respawning := 0 ;
12090: LD_ADDR_EXP 54
12094: PUSH
12095: LD_INT 0
12097: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12098: LD_ADDR_EXP 55
12102: PUSH
12103: LD_INT 1
12105: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12106: LD_ADDR_EXP 56
12110: PUSH
12111: LD_INT 0
12113: ST_TO_ADDR
// def_builduptime := 3 ;
12114: LD_ADDR_EXP 57
12118: PUSH
12119: LD_INT 3
12121: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12122: LD_ADDR_VAR 0 2
12126: PUSH
12127: LD_INT 23
12129: PUSH
12130: EMPTY
12131: LIST
12132: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
12133: LD_ADDR_VAR 0 3
12137: PUSH
12138: LD_INT 37
12140: PUSH
12141: EMPTY
12142: LIST
12143: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12144: LD_ADDR_LOC 22
12148: PUSH
12149: EMPTY
12150: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12151: LD_ADDR_LOC 23
12155: PUSH
12156: EMPTY
12157: ST_TO_ADDR
// Banned_Controls := [ ] ;
12158: LD_ADDR_LOC 24
12162: PUSH
12163: EMPTY
12164: ST_TO_ADDR
// Banned_Engines := [ ] ;
12165: LD_ADDR_LOC 25
12169: PUSH
12170: EMPTY
12171: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
12172: LD_ADDR_LOC 20
12176: PUSH
12177: LD_INT 31
12179: PUSH
12180: LD_INT 32
12182: PUSH
12183: LD_INT 33
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
12194: LD_ADDR_LOC 21
12198: PUSH
12199: LD_INT 10
12201: PUSH
12202: EMPTY
12203: LIST
12204: ST_TO_ADDR
// end ; 8 :
12205: GO 12616
12207: LD_INT 8
12209: DOUBLE
12210: EQUAL
12211: IFTRUE 12215
12213: GO 12615
12215: POP
// begin def_base_level := 0 ;
12216: LD_ADDR_EXP 44
12220: PUSH
12221: LD_INT 0
12223: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
12224: LD_ADDR_EXP 45
12228: PUSH
12229: LD_INT 0
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: CALL_OW 12
12239: ST_TO_ADDR
// def_skill_level := 0 ;
12240: LD_ADDR_EXP 46
12244: PUSH
12245: LD_INT 0
12247: ST_TO_ADDR
// def_starting_resources := 2 ;
12248: LD_ADDR_EXP 47
12252: PUSH
12253: LD_INT 2
12255: ST_TO_ADDR
// def_shipments_density := 1 ;
12256: LD_ADDR_EXP 48
12260: PUSH
12261: LD_INT 1
12263: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12264: LD_ADDR_EXP 49
12268: PUSH
12269: LD_INT 0
12271: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12272: LD_ADDR_EXP 50
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// def_shared_vision := 1 ;
12280: LD_ADDR_EXP 51
12284: PUSH
12285: LD_INT 1
12287: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
12288: LD_ADDR_EXP 52
12292: PUSH
12293: LD_INT 0
12295: PPUSH
12296: LD_INT 2
12298: PPUSH
12299: CALL_OW 12
12303: ST_TO_ADDR
// def_siberite_detection := 0 ;
12304: LD_ADDR_EXP 53
12308: PUSH
12309: LD_INT 0
12311: ST_TO_ADDR
// def_people_respawning := 0 ;
12312: LD_ADDR_EXP 54
12316: PUSH
12317: LD_INT 0
12319: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
12320: LD_ADDR_EXP 55
12324: PUSH
12325: LD_INT 2
12327: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12328: LD_ADDR_EXP 56
12332: PUSH
12333: LD_INT 0
12335: ST_TO_ADDR
// def_builduptime := 0 ;
12336: LD_ADDR_EXP 57
12340: PUSH
12341: LD_INT 0
12343: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
12344: LD_ADDR_VAR 0 2
12348: PUSH
12349: LD_INT 23
12351: PUSH
12352: LD_INT 20
12354: PUSH
12355: LD_INT 40
12357: PUSH
12358: LD_INT 47
12360: PUSH
12361: LD_INT 46
12363: PUSH
12364: LD_INT 39
12366: PUSH
12367: LD_INT 71
12369: PUSH
12370: LD_INT 34
12372: PUSH
12373: LD_INT 41
12375: PUSH
12376: LD_INT 44
12378: PUSH
12379: LD_INT 17
12381: PUSH
12382: LD_INT 16
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
12399: LD_ADDR_VAR 0 3
12403: PUSH
12404: LD_INT 37
12406: PUSH
12407: LD_INT 5
12409: PUSH
12410: LD_INT 13
12412: PUSH
12413: LD_INT 34
12415: PUSH
12416: LD_INT 12
12418: PUSH
12419: LD_INT 15
12421: PUSH
12422: LD_INT 11
12424: PUSH
12425: LD_INT 14
12427: PUSH
12428: LD_INT 29
12430: PUSH
12431: LD_INT 30
12433: PUSH
12434: LD_INT 28
12436: PUSH
12437: LD_INT 24
12439: PUSH
12440: LD_INT 25
12442: PUSH
12443: LD_INT 20
12445: PUSH
12446: LD_INT 21
12448: PUSH
12449: LD_INT 22
12451: PUSH
12452: LD_INT 36
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12474: LD_ADDR_LOC 22
12478: PUSH
12479: EMPTY
12480: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
12481: LD_ADDR_LOC 23
12485: PUSH
12486: LD_INT 14
12488: PUSH
12489: EMPTY
12490: LIST
12491: ST_TO_ADDR
// Banned_Controls := [ ] ;
12492: LD_ADDR_LOC 24
12496: PUSH
12497: EMPTY
12498: ST_TO_ADDR
// Banned_Engines := [ ] ;
12499: LD_ADDR_LOC 25
12503: PUSH
12504: EMPTY
12505: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
12506: LD_ADDR_LOC 20
12510: PUSH
12511: LD_INT 31
12513: PUSH
12514: LD_INT 32
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 4
12523: PUSH
12524: EMPTY
12525: LIST
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
12531: LD_ADDR_LOC 21
12535: PUSH
12536: LD_INT 2
12538: PUSH
12539: LD_INT 1
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: ST_TO_ADDR
// for i := 1 to 8 do
12546: LD_ADDR_VAR 0 4
12550: PUSH
12551: DOUBLE
12552: LD_INT 1
12554: DEC
12555: ST_TO_ADDR
12556: LD_INT 8
12558: PUSH
12559: FOR_TO
12560: IFFALSE 12611
// if ( Side_Nations [ i ] = 3 ) then
12562: LD_EXP 20
12566: PUSH
12567: LD_VAR 0 4
12571: ARRAY
12572: PUSH
12573: LD_INT 3
12575: EQUAL
12576: IFFALSE 12609
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
12578: LD_ADDR_EXP 20
12582: PUSH
12583: LD_EXP 20
12587: PPUSH
12588: LD_VAR 0 4
12592: PPUSH
12593: LD_INT 1
12595: PPUSH
12596: LD_INT 2
12598: PPUSH
12599: CALL_OW 12
12603: PPUSH
12604: CALL_OW 1
12608: ST_TO_ADDR
12609: GO 12559
12611: POP
12612: POP
// end ; end ;
12613: GO 12616
12615: POP
// for i := 1 to 8 do
12616: LD_ADDR_VAR 0 4
12620: PUSH
12621: DOUBLE
12622: LD_INT 1
12624: DEC
12625: ST_TO_ADDR
12626: LD_INT 8
12628: PUSH
12629: FOR_TO
12630: IFFALSE 12714
// if Side_Positions [ i ] then
12632: LD_EXP 19
12636: PUSH
12637: LD_VAR 0 4
12641: ARRAY
12642: IFFALSE 12712
// begin for j in Unavailable_Techs do
12644: LD_ADDR_VAR 0 5
12648: PUSH
12649: LD_VAR 0 2
12653: PUSH
12654: FOR_IN
12655: IFFALSE 12676
// SetTech ( j , i , 0 ) ;
12657: LD_VAR 0 5
12661: PPUSH
12662: LD_VAR 0 4
12666: PPUSH
12667: LD_INT 0
12669: PPUSH
12670: CALL_OW 322
12674: GO 12654
12676: POP
12677: POP
// for j in Unavailable_Builds do
12678: LD_ADDR_VAR 0 5
12682: PUSH
12683: LD_VAR 0 3
12687: PUSH
12688: FOR_IN
12689: IFFALSE 12710
// SetRestrict ( j , i , 0 ) ;
12691: LD_VAR 0 5
12695: PPUSH
12696: LD_VAR 0 4
12700: PPUSH
12701: LD_INT 0
12703: PPUSH
12704: CALL_OW 324
12708: GO 12688
12710: POP
12711: POP
// end ;
12712: GO 12629
12714: POP
12715: POP
// end ;
12716: LD_VAR 0 1
12720: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
12721: LD_INT 0
12723: PPUSH
12724: PPUSH
12725: PPUSH
12726: PPUSH
12727: PPUSH
12728: PPUSH
12729: PPUSH
// for i := 1 to Restricted_Builds do
12730: LD_ADDR_VAR 0 2
12734: PUSH
12735: DOUBLE
12736: LD_INT 1
12738: DEC
12739: ST_TO_ADDR
12740: LD_LOC 20
12744: PUSH
12745: FOR_TO
12746: IFFALSE 13056
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
12748: LD_LOC 20
12752: PUSH
12753: LD_VAR 0 2
12757: ARRAY
12758: PUSH
12759: LD_INT 1
12761: ARRAY
12762: PUSH
12763: LD_INT 31
12765: DOUBLE
12766: EQUAL
12767: IFTRUE 12783
12769: LD_INT 32
12771: DOUBLE
12772: EQUAL
12773: IFTRUE 12783
12775: LD_INT 33
12777: DOUBLE
12778: EQUAL
12779: IFTRUE 12783
12781: GO 12794
12783: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
12784: LD_ADDR_VAR 0 6
12788: PUSH
12789: LD_STRING #Turrets
12791: ST_TO_ADDR
12792: GO 12839
12794: LD_INT 4
12796: DOUBLE
12797: EQUAL
12798: IFTRUE 12808
12800: LD_INT 5
12802: DOUBLE
12803: EQUAL
12804: IFTRUE 12808
12806: GO 12819
12808: POP
// btype := #Armouries ; b_Behemoth :
12809: LD_ADDR_VAR 0 6
12813: PUSH
12814: LD_STRING #Armouries
12816: ST_TO_ADDR
12817: GO 12839
12819: LD_INT 37
12821: DOUBLE
12822: EQUAL
12823: IFTRUE 12827
12825: GO 12838
12827: POP
// btype := #Behemoths ; end ;
12828: LD_ADDR_VAR 0 6
12832: PUSH
12833: LD_STRING #Behemoths
12835: ST_TO_ADDR
12836: GO 12839
12838: POP
// list := [ ] ;
12839: LD_ADDR_VAR 0 7
12843: PUSH
12844: EMPTY
12845: ST_TO_ADDR
// for j := 1 to 8 do
12846: LD_ADDR_VAR 0 3
12850: PUSH
12851: DOUBLE
12852: LD_INT 1
12854: DEC
12855: ST_TO_ADDR
12856: LD_INT 8
12858: PUSH
12859: FOR_TO
12860: IFFALSE 12953
// if Side_Positions [ j ] then
12862: LD_EXP 19
12866: PUSH
12867: LD_VAR 0 3
12871: ARRAY
12872: IFFALSE 12951
// begin amount := 0 ;
12874: LD_ADDR_VAR 0 5
12878: PUSH
12879: LD_INT 0
12881: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
12882: LD_ADDR_VAR 0 4
12886: PUSH
12887: LD_LOC 20
12891: PUSH
12892: LD_VAR 0 2
12896: ARRAY
12897: PUSH
12898: FOR_IN
12899: IFFALSE 12947
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
12901: LD_ADDR_VAR 0 5
12905: PUSH
12906: LD_VAR 0 5
12910: PUSH
12911: LD_INT 22
12913: PUSH
12914: LD_VAR 0 3
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 30
12925: PUSH
12926: LD_VAR 0 4
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PPUSH
12939: CALL_OW 69
12943: PLUS
12944: ST_TO_ADDR
12945: GO 12898
12947: POP
12948: POP
// break ;
12949: GO 12953
// end ;
12951: GO 12859
12953: POP
12954: POP
// list := [ ] ;
12955: LD_ADDR_VAR 0 7
12959: PUSH
12960: EMPTY
12961: ST_TO_ADDR
// for j := 1 to 8 do
12962: LD_ADDR_VAR 0 3
12966: PUSH
12967: DOUBLE
12968: LD_INT 1
12970: DEC
12971: ST_TO_ADDR
12972: LD_INT 8
12974: PUSH
12975: FOR_TO
12976: IFFALSE 12996
// list := list ^ amount ;
12978: LD_ADDR_VAR 0 7
12982: PUSH
12983: LD_VAR 0 7
12987: PUSH
12988: LD_VAR 0 5
12992: ADD
12993: ST_TO_ADDR
12994: GO 12975
12996: POP
12997: POP
// Already_Built := Already_Built ^ [ list ] ;
12998: LD_ADDR_LOC 26
13002: PUSH
13003: LD_LOC 26
13007: PUSH
13008: LD_VAR 0 7
13012: PUSH
13013: EMPTY
13014: LIST
13015: ADD
13016: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13017: LD_ADDR_LOC 27
13021: PUSH
13022: LD_LOC 27
13026: PUSH
13027: LD_VAR 0 6
13031: PUSH
13032: LD_VAR 0 5
13036: PUSH
13037: LD_LOC 21
13041: PUSH
13042: LD_VAR 0 2
13046: ARRAY
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: LIST
13052: ADD
13053: ST_TO_ADDR
// end ;
13054: GO 12745
13056: POP
13057: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13058: LD_ADDR_LOC 28
13062: PUSH
13063: LD_INT 0
13065: PUSH
13066: LD_INT 0
13068: PUSH
13069: LD_INT 0
13071: PUSH
13072: LD_INT 0
13074: PUSH
13075: LD_INT 0
13077: PUSH
13078: LD_INT 0
13080: PUSH
13081: LD_INT 0
13083: PUSH
13084: LD_INT 0
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: ST_TO_ADDR
// if Limits_Info then
13097: LD_LOC 27
13101: IFFALSE 13117
// Limits_Info := #Limits ^ Limits_Info ;
13103: LD_ADDR_LOC 27
13107: PUSH
13108: LD_STRING #Limits
13110: PUSH
13111: LD_LOC 27
13115: ADD
13116: ST_TO_ADDR
// end ;
13117: LD_VAR 0 1
13121: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13122: LD_INT 0
13124: PPUSH
13125: PPUSH
13126: PPUSH
13127: PPUSH
// for i := 1 to Restricted_Builds do
13128: LD_ADDR_VAR 0 7
13132: PUSH
13133: DOUBLE
13134: LD_INT 1
13136: DEC
13137: ST_TO_ADDR
13138: LD_LOC 20
13142: PUSH
13143: FOR_TO
13144: IFFALSE 13567
// if BType in Restricted_Builds [ i ] then
13146: LD_VAR 0 2
13150: PUSH
13151: LD_LOC 20
13155: PUSH
13156: LD_VAR 0 7
13160: ARRAY
13161: IN
13162: IFFALSE 13565
// begin if old_side then
13164: LD_VAR 0 4
13168: IFFALSE 13294
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
13170: LD_LOC 26
13174: PUSH
13175: LD_VAR 0 7
13179: ARRAY
13180: PUSH
13181: LD_VAR 0 3
13185: ARRAY
13186: PUSH
13187: LD_VAR 0 5
13191: PLUS
13192: PUSH
13193: LD_LOC 21
13197: PUSH
13198: LD_VAR 0 7
13202: ARRAY
13203: GREATER
13204: IFFALSE 13230
// begin SetSide ( un , old_side ) ;
13206: LD_VAR 0 1
13210: PPUSH
13211: LD_VAR 0 4
13215: PPUSH
13216: CALL_OW 235
// count := 0 ;
13220: LD_ADDR_VAR 0 5
13224: PUSH
13225: LD_INT 0
13227: ST_TO_ADDR
// end else
13228: GO 13294
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
13230: LD_ADDR_LOC 26
13234: PUSH
13235: LD_LOC 26
13239: PPUSH
13240: LD_VAR 0 7
13244: PPUSH
13245: LD_LOC 26
13249: PUSH
13250: LD_VAR 0 7
13254: ARRAY
13255: PPUSH
13256: LD_VAR 0 4
13260: PPUSH
13261: LD_LOC 26
13265: PUSH
13266: LD_VAR 0 7
13270: ARRAY
13271: PUSH
13272: LD_VAR 0 4
13276: ARRAY
13277: PUSH
13278: LD_VAR 0 5
13282: MINUS
13283: PPUSH
13284: CALL_OW 1
13288: PPUSH
13289: CALL_OW 1
13293: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
13294: LD_ADDR_LOC 26
13298: PUSH
13299: LD_LOC 26
13303: PPUSH
13304: LD_VAR 0 7
13308: PPUSH
13309: LD_LOC 26
13313: PUSH
13314: LD_VAR 0 7
13318: ARRAY
13319: PPUSH
13320: LD_VAR 0 3
13324: PPUSH
13325: LD_LOC 26
13329: PUSH
13330: LD_VAR 0 7
13334: ARRAY
13335: PUSH
13336: LD_VAR 0 3
13340: ARRAY
13341: PUSH
13342: LD_VAR 0 5
13346: PLUS
13347: PPUSH
13348: CALL_OW 1
13352: PPUSH
13353: CALL_OW 1
13357: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
13358: LD_VAR 0 5
13362: PUSH
13363: LD_INT 0
13365: NONEQUAL
13366: PUSH
13367: LD_VAR 0 3
13371: PUSH
13372: LD_OWVAR 2
13376: EQUAL
13377: AND
13378: IFFALSE 13421
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
13380: LD_ADDR_LOC 27
13384: PUSH
13385: LD_LOC 27
13389: PPUSH
13390: LD_INT 3
13392: PUSH
13393: LD_VAR 0 7
13397: MUL
13398: PPUSH
13399: LD_LOC 26
13403: PUSH
13404: LD_VAR 0 7
13408: ARRAY
13409: PUSH
13410: LD_VAR 0 3
13414: ARRAY
13415: PPUSH
13416: CALL_OW 1
13420: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
13421: LD_LOC 26
13425: PUSH
13426: LD_VAR 0 7
13430: ARRAY
13431: PUSH
13432: LD_VAR 0 3
13436: ARRAY
13437: PUSH
13438: LD_LOC 21
13442: PUSH
13443: LD_VAR 0 7
13447: ARRAY
13448: GREATER
13449: IFFALSE 13476
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
13451: LD_ADDR_LOC 28
13455: PUSH
13456: LD_LOC 28
13460: PPUSH
13461: LD_VAR 0 3
13465: PPUSH
13466: LD_INT 1
13468: PPUSH
13469: CALL_OW 1
13473: ST_TO_ADDR
// end else
13474: GO 13563
// begin for j := 1 to Restricted_Builds do
13476: LD_ADDR_VAR 0 8
13480: PUSH
13481: DOUBLE
13482: LD_INT 1
13484: DEC
13485: ST_TO_ADDR
13486: LD_LOC 20
13490: PUSH
13491: FOR_TO
13492: IFFALSE 13536
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
13494: LD_LOC 26
13498: PUSH
13499: LD_VAR 0 8
13503: ARRAY
13504: PUSH
13505: LD_VAR 0 3
13509: ARRAY
13510: PUSH
13511: LD_LOC 21
13515: PUSH
13516: LD_VAR 0 8
13520: ARRAY
13521: GREATER
13522: IFFALSE 13534
// begin Is_Cheater := true ;
13524: LD_ADDR_VAR 0 9
13528: PUSH
13529: LD_INT 1
13531: ST_TO_ADDR
// break ;
13532: GO 13536
// end ;
13534: GO 13491
13536: POP
13537: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
13538: LD_ADDR_LOC 28
13542: PUSH
13543: LD_LOC 28
13547: PPUSH
13548: LD_VAR 0 3
13552: PPUSH
13553: LD_VAR 0 9
13557: PPUSH
13558: CALL_OW 1
13562: ST_TO_ADDR
// end ; break ;
13563: GO 13567
// end ;
13565: GO 13143
13567: POP
13568: POP
// end ;
13569: LD_VAR 0 6
13573: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
13574: LD_VAR 0 5
13578: PUSH
13579: LD_LOC 22
13583: IN
13584: PUSH
13585: LD_VAR 0 2
13589: PUSH
13590: LD_LOC 23
13594: IN
13595: OR
13596: PUSH
13597: LD_VAR 0 4
13601: PUSH
13602: LD_LOC 24
13606: IN
13607: OR
13608: PUSH
13609: LD_VAR 0 3
13613: PUSH
13614: LD_LOC 25
13618: IN
13619: OR
13620: IFFALSE 13631
// ComCancel ( factory ) ;
13622: LD_VAR 0 1
13626: PPUSH
13627: CALL_OW 127
// end ;
13631: PPOPN 5
13633: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
13634: LD_VAR 0 2
13638: PUSH
13639: LD_LOC 22
13643: IN
13644: IFFALSE 13655
// ComCancel ( building ) ;
13646: LD_VAR 0 1
13650: PPUSH
13651: CALL_OW 127
// end ; end_of_file
13655: PPOPN 2
13657: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
13658: LD_INT 0
13660: PPUSH
13661: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
13662: LD_ADDR_VAR 0 2
13666: PUSH
13667: LD_STRING #Multi1x1-Time
13669: PUSH
13670: LD_OWVAR 1
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: ST_TO_ADDR
// if WaitServerStrings then
13679: LD_EXP 60
13683: IFFALSE 13701
// AllStrings = AllStrings ^ WaitServerStrings ;
13685: LD_ADDR_VAR 0 2
13689: PUSH
13690: LD_VAR 0 2
13694: PUSH
13695: LD_EXP 60
13699: ADD
13700: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
13701: LD_INT 0
13703: PUSH
13704: LD_EXP 16
13708: PUSH
13709: LD_OWVAR 1
13713: MINUS
13714: LESSEQUAL
13715: IFFALSE 13746
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
13717: LD_ADDR_VAR 0 2
13721: PUSH
13722: LD_VAR 0 2
13726: PUSH
13727: LD_STRING #allowedsibbomb
13729: PUSH
13730: LD_EXP 16
13734: PUSH
13735: LD_OWVAR 1
13739: MINUS
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: ADD
13745: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
13746: LD_INT 0
13748: PUSH
13749: LD_EXP 14
13753: PUSH
13754: LD_OWVAR 1
13758: MINUS
13759: LESSEQUAL
13760: IFFALSE 13791
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
13762: LD_ADDR_VAR 0 2
13766: PUSH
13767: LD_VAR 0 2
13771: PUSH
13772: LD_STRING #builduptime
13774: PUSH
13775: LD_EXP 14
13779: PUSH
13780: LD_OWVAR 1
13784: MINUS
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: ADD
13790: ST_TO_ADDR
// if ( ExtraStrings ) then
13791: LD_EXP 59
13795: IFFALSE 13817
// AllStrings := AllStrings ^  ^ ExtraStrings ;
13797: LD_ADDR_VAR 0 2
13801: PUSH
13802: LD_VAR 0 2
13806: PUSH
13807: LD_STRING 
13809: ADD
13810: PUSH
13811: LD_EXP 59
13815: ADD
13816: ST_TO_ADDR
// if ( LimitsStrings ) then
13817: CALL 10511 0 0
13821: IFFALSE 13843
// AllStrings := AllStrings ^  ^ LimitsStrings ;
13823: LD_ADDR_VAR 0 2
13827: PUSH
13828: LD_VAR 0 2
13832: PUSH
13833: LD_STRING 
13835: ADD
13836: PUSH
13837: CALL 10511 0 0
13841: ADD
13842: ST_TO_ADDR
// if debug_strings then
13843: LD_OWVAR 48
13847: IFFALSE 13869
// AllStrings := AllStrings ^  ^ debug_strings ;
13849: LD_ADDR_VAR 0 2
13853: PUSH
13854: LD_VAR 0 2
13858: PUSH
13859: LD_STRING 
13861: ADD
13862: PUSH
13863: LD_OWVAR 48
13867: ADD
13868: ST_TO_ADDR
// Display_Strings := AllStrings ;
13869: LD_ADDR_OWVAR 47
13873: PUSH
13874: LD_VAR 0 2
13878: ST_TO_ADDR
// end ;
13879: LD_VAR 0 1
13883: RET
// every 0 0$1 do
13884: GO 13886
13886: DISABLE
// begin ShowTimer ;
13887: CALL 13658 0 0
// enable ;
13891: ENABLE
// end ; end_of_file
13892: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
13893: LD_INT 0
13895: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
13896: LD_VAR 0 1
13900: PPUSH
13901: CALL_OW 255
13905: PUSH
13906: LD_VAR 0 4
13910: EQUAL
13911: IFFALSE 13930
// begin SetAchievement ( ACH_RAD ) ;
13913: LD_STRING ACH_RAD
13915: PPUSH
13916: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
13920: LD_STRING ACH_NL
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: CALL_OW 564
// end end ;
13930: LD_VAR 0 5
13934: RET
// export function SA_Win ( side ) ; begin
13935: LD_INT 0
13937: PPUSH
// case side of 1 :
13938: LD_VAR 0 1
13942: PUSH
13943: LD_INT 1
13945: DOUBLE
13946: EQUAL
13947: IFTRUE 13951
13949: GO 13964
13951: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
13952: LD_STRING ACH_AH
13954: PPUSH
13955: LD_INT 1
13957: PPUSH
13958: CALL_OW 564
13962: GO 14127
13964: LD_INT 2
13966: DOUBLE
13967: EQUAL
13968: IFTRUE 13972
13970: GO 13985
13972: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
13973: LD_STRING ACH_E
13975: PPUSH
13976: LD_INT 1
13978: PPUSH
13979: CALL_OW 564
13983: GO 14127
13985: LD_INT 3
13987: DOUBLE
13988: EQUAL
13989: IFTRUE 13993
13991: GO 14006
13993: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
13994: LD_STRING ACH_OOL
13996: PPUSH
13997: LD_INT 1
13999: PPUSH
14000: CALL_OW 564
14004: GO 14127
14006: LD_INT 1
14008: PUSH
14009: LD_INT 2
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: DOUBLE
14016: EQUAL
14017: IFTRUE 14021
14019: GO 14046
14021: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14022: LD_STRING ACH_AH
14024: PPUSH
14025: LD_REAL  5.00000000000000E-0001
14028: PPUSH
14029: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14033: LD_STRING ACH_E
14035: PPUSH
14036: LD_REAL  5.00000000000000E-0001
14039: PPUSH
14040: CALL_OW 564
// end ; [ 2 , 3 ] :
14044: GO 14127
14046: LD_INT 2
14048: PUSH
14049: LD_INT 3
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: DOUBLE
14056: EQUAL
14057: IFTRUE 14061
14059: GO 14086
14061: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14062: LD_STRING ACH_OOL
14064: PPUSH
14065: LD_REAL  5.00000000000000E-0001
14068: PPUSH
14069: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14073: LD_STRING ACH_E
14075: PPUSH
14076: LD_REAL  5.00000000000000E-0001
14079: PPUSH
14080: CALL_OW 564
// end ; [ 3 , 1 ] :
14084: GO 14127
14086: LD_INT 3
14088: PUSH
14089: LD_INT 1
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: DOUBLE
14096: EQUAL
14097: IFTRUE 14101
14099: GO 14126
14101: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14102: LD_STRING ACH_AH
14104: PPUSH
14105: LD_REAL  5.00000000000000E-0001
14108: PPUSH
14109: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14113: LD_STRING ACH_OOL
14115: PPUSH
14116: LD_REAL  5.00000000000000E-0001
14119: PPUSH
14120: CALL_OW 564
// end ; end ;
14124: GO 14127
14126: POP
// end ; end_of_file
14127: LD_VAR 0 2
14131: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
14132: LD_INT 0
14134: PPUSH
14135: PPUSH
// enable ( 98 ) ;
14136: LD_INT 98
14138: ENABLE_MARKED
// GameEnded = false ;
14139: LD_ADDR_LOC 30
14143: PUSH
14144: LD_INT 0
14146: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14147: LD_ADDR_LOC 29
14151: PUSH
14152: LD_INT 0
14154: PUSH
14155: LD_INT 0
14157: PUSH
14158: LD_INT 0
14160: PUSH
14161: LD_INT 0
14163: PUSH
14164: LD_INT 0
14166: PUSH
14167: LD_INT 0
14169: PUSH
14170: LD_INT 0
14172: PUSH
14173: LD_INT 0
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: ST_TO_ADDR
// unfoged = false ;
14186: LD_ADDR_LOC 31
14190: PUSH
14191: LD_INT 0
14193: ST_TO_ADDR
// for i = 1 to side_positions do
14194: LD_ADDR_VAR 0 2
14198: PUSH
14199: DOUBLE
14200: LD_INT 1
14202: DEC
14203: ST_TO_ADDR
14204: LD_EXP 19
14208: PUSH
14209: FOR_TO
14210: IFFALSE 14250
// if not side_positions [ i ] then
14212: LD_EXP 19
14216: PUSH
14217: LD_VAR 0 2
14221: ARRAY
14222: NOT
14223: IFFALSE 14248
// defaited = replace ( defaited , i , true ) ;
14225: LD_ADDR_LOC 29
14229: PUSH
14230: LD_LOC 29
14234: PPUSH
14235: LD_VAR 0 2
14239: PPUSH
14240: LD_INT 1
14242: PPUSH
14243: CALL_OW 1
14247: ST_TO_ADDR
14248: GO 14209
14250: POP
14251: POP
// end ;
14252: LD_VAR 0 1
14256: RET
// function CanWinLoose ; begin
14257: LD_INT 0
14259: PPUSH
// Result := true ;
14260: LD_ADDR_VAR 0 1
14264: PUSH
14265: LD_INT 1
14267: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
14268: CALL_OW 518
14272: PUSH
14273: CALL_OW 519
14277: PUSH
14278: LD_INT 0
14280: GREATER
14281: AND
14282: IFFALSE 14292
// Result := false ;
14284: LD_ADDR_VAR 0 1
14288: PUSH
14289: LD_INT 0
14291: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14292: CALL_OW 531
14296: PUSH
14297: CALL_OW 519
14301: PUSH
14302: LD_INT 1
14304: GREATER
14305: AND
14306: IFFALSE 14316
// Result := false ;
14308: LD_ADDR_VAR 0 1
14312: PUSH
14313: LD_INT 0
14315: ST_TO_ADDR
// end ;
14316: LD_VAR 0 1
14320: RET
// export function HasPower ( i ) ; var k , h ; begin
14321: LD_INT 0
14323: PPUSH
14324: PPUSH
14325: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
14326: LD_VAR 0 1
14330: PPUSH
14331: CALL_OW 108
14335: NOT
14336: PUSH
14337: LD_EXP 22
14341: PUSH
14342: LD_VAR 0 1
14346: ARRAY
14347: NOT
14348: AND
14349: PUSH
14350: LD_OWVAR 4
14354: AND
14355: IFFALSE 14367
// begin result = false ;
14357: LD_ADDR_VAR 0 2
14361: PUSH
14362: LD_INT 0
14364: ST_TO_ADDR
// end else
14365: GO 14662
// case def_win_rules of 0 :
14367: LD_EXP 32
14371: PUSH
14372: LD_INT 0
14374: DOUBLE
14375: EQUAL
14376: IFTRUE 14380
14378: GO 14543
14380: POP
// if def_people_respawning then
14381: LD_EXP 54
14385: IFFALSE 14476
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
14387: LD_ADDR_VAR 0 2
14391: PUSH
14392: LD_INT 22
14394: PUSH
14395: LD_VAR 0 1
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PUSH
14404: LD_INT 2
14406: PUSH
14407: LD_INT 21
14409: PUSH
14410: LD_INT 1
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 33
14419: PUSH
14420: LD_INT 3
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 33
14429: PUSH
14430: LD_INT 5
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 30
14439: PUSH
14440: LD_INT 0
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 30
14449: PUSH
14450: LD_INT 1
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 69
14473: ST_TO_ADDR
14474: GO 14541
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
14476: LD_ADDR_VAR 0 2
14480: PUSH
14481: LD_INT 22
14483: PUSH
14484: LD_VAR 0 1
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 2
14495: PUSH
14496: LD_INT 21
14498: PUSH
14499: LD_INT 1
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 33
14508: PUSH
14509: LD_INT 3
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: LD_INT 33
14518: PUSH
14519: LD_INT 5
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PPUSH
14536: CALL_OW 69
14540: ST_TO_ADDR
14541: GO 14662
14543: LD_INT 1
14545: DOUBLE
14546: EQUAL
14547: IFTRUE 14551
14549: GO 14590
14551: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
14552: LD_ADDR_VAR 0 2
14556: PUSH
14557: LD_INT 22
14559: PUSH
14560: LD_VAR 0 1
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 21
14571: PUSH
14572: LD_INT 1
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PPUSH
14583: CALL_OW 69
14587: ST_TO_ADDR
14588: GO 14662
14590: LD_INT 2
14592: DOUBLE
14593: EQUAL
14594: IFTRUE 14598
14596: GO 14661
14598: POP
// begin h = false ;
14599: LD_ADDR_VAR 0 4
14603: PUSH
14604: LD_INT 0
14606: ST_TO_ADDR
// for k in heroes [ i ] do
14607: LD_ADDR_VAR 0 3
14611: PUSH
14612: LD_EXP 33
14616: PUSH
14617: LD_VAR 0 1
14621: ARRAY
14622: PUSH
14623: FOR_IN
14624: IFFALSE 14647
// if IsLive ( k ) then
14626: LD_VAR 0 3
14630: PPUSH
14631: CALL_OW 300
14635: IFFALSE 14645
// h = true ;
14637: LD_ADDR_VAR 0 4
14641: PUSH
14642: LD_INT 1
14644: ST_TO_ADDR
14645: GO 14623
14647: POP
14648: POP
// Result := h ;
14649: LD_ADDR_VAR 0 2
14653: PUSH
14654: LD_VAR 0 4
14658: ST_TO_ADDR
// end ; end ;
14659: GO 14662
14661: POP
// end ;
14662: LD_VAR 0 2
14666: RET
// function AlliedSides ( i , j ) ; begin
14667: LD_INT 0
14669: PPUSH
// Result := false ;
14670: LD_ADDR_VAR 0 3
14674: PUSH
14675: LD_INT 0
14677: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
14678: LD_VAR 0 1
14682: PPUSH
14683: LD_VAR 0 2
14687: PPUSH
14688: CALL_OW 81
14692: PUSH
14693: LD_INT 1
14695: EQUAL
14696: PUSH
14697: LD_VAR 0 2
14701: PPUSH
14702: LD_VAR 0 1
14706: PPUSH
14707: CALL_OW 81
14711: PUSH
14712: LD_INT 1
14714: EQUAL
14715: AND
14716: PUSH
14717: LD_VAR 0 1
14721: PPUSH
14722: CALL_OW 83
14726: AND
14727: PUSH
14728: LD_VAR 0 2
14732: PPUSH
14733: CALL_OW 83
14737: AND
14738: IFFALSE 14748
// Result := true ;
14740: LD_ADDR_VAR 0 3
14744: PUSH
14745: LD_INT 1
14747: ST_TO_ADDR
// end ;
14748: LD_VAR 0 3
14752: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
14753: CALL 14257 0 0
14757: PUSH
14758: LD_LOC 30
14762: NOT
14763: AND
14764: IFFALSE 14780
14766: GO 14768
14768: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
14769: LD_ADDR_EXP 60
14773: PUSH
14774: LD_STRING #Player-Ended
14776: PUSH
14777: EMPTY
14778: LIST
14779: ST_TO_ADDR
14780: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
14781: CALL 14257 0 0
14785: PUSH
14786: LD_LOC 30
14790: AND
14791: IFFALSE 14800
14793: GO 14795
14795: DISABLE
// YouLostInMultiplayer ;
14796: CALL_OW 107
14800: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
14801: CALL 14257 0 0
14805: NOT
14806: PUSH
14807: CALL_OW 531
14811: NOT
14812: AND
14813: IFFALSE 14829
14815: GO 14817
14817: DISABLE
// WaitServerStrings = [ #server-wait ] ;
14818: LD_ADDR_EXP 60
14822: PUSH
14823: LD_STRING #server-wait
14825: PUSH
14826: EMPTY
14827: LIST
14828: ST_TO_ADDR
14829: END
// every 100 trigger IAmSpec do
14830: CALL_OW 531
14834: IFFALSE 14850
14836: GO 14838
14838: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
14839: LD_ADDR_EXP 60
14843: PUSH
14844: LD_STRING #Player-IAmSpec
14846: PUSH
14847: EMPTY
14848: LIST
14849: ST_TO_ADDR
14850: END
// every 100 trigger GameEnded and IAmSpec do
14851: LD_LOC 30
14855: PUSH
14856: CALL_OW 531
14860: AND
14861: IFFALSE 14870
14863: GO 14865
14865: DISABLE
// YouLostInMultiplayer ;
14866: CALL_OW 107
14870: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
14871: CALL 14257 0 0
14875: PUSH
14876: LD_LOC 30
14880: NOT
14881: AND
14882: IFFALSE 14898
14884: GO 14886
14886: DISABLE
// WaitServerStrings = [ $player-win ] ;
14887: LD_ADDR_EXP 60
14891: PUSH
14892: LD_STRING $player-win
14894: PUSH
14895: EMPTY
14896: LIST
14897: ST_TO_ADDR
14898: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
14899: CALL 14257 0 0
14903: PUSH
14904: LD_LOC 30
14908: AND
14909: IFFALSE 14933
14911: GO 14913
14913: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
14914: LD_EXP 20
14918: PUSH
14919: LD_OWVAR 2
14923: ARRAY
14924: PPUSH
14925: CALL 13935 0 1
// YouWinInMultiplayer ;
14929: CALL_OW 106
// end ;
14933: END
// every 100 trigger isEditor marked 401 do
14934: LD_OWVAR 84
14938: IFFALSE 14954
14940: GO 14942
14942: DISABLE
// Debug_Strings = [ You won ] ;
14943: LD_ADDR_OWVAR 48
14947: PUSH
14948: LD_STRING You won
14950: PUSH
14951: EMPTY
14952: LIST
14953: ST_TO_ADDR
14954: END
// every 100 trigger isEditor marked 400 do
14955: LD_OWVAR 84
14959: IFFALSE 14975
14961: GO 14963
14963: DISABLE
// Debug_Strings = [ You loss ] ;
14964: LD_ADDR_OWVAR 48
14968: PUSH
14969: LD_STRING You loss
14971: PUSH
14972: EMPTY
14973: LIST
14974: ST_TO_ADDR
14975: END
// every 100 marked 98 do var i , un ;
14976: GO 14978
14978: DISABLE
14979: LD_INT 0
14981: PPUSH
14982: PPUSH
// begin for i = 1 to side_positions do
14983: LD_ADDR_VAR 0 1
14987: PUSH
14988: DOUBLE
14989: LD_INT 1
14991: DEC
14992: ST_TO_ADDR
14993: LD_EXP 19
14997: PUSH
14998: FOR_TO
14999: IFFALSE 15122
// if side_positions [ i ] then
15001: LD_EXP 19
15005: PUSH
15006: LD_VAR 0 1
15010: ARRAY
15011: IFFALSE 15120
// if not HasPower ( i ) and not Defaited [ i ] then
15013: LD_VAR 0 1
15017: PPUSH
15018: CALL 14321 0 1
15022: NOT
15023: PUSH
15024: LD_LOC 29
15028: PUSH
15029: LD_VAR 0 1
15033: ARRAY
15034: NOT
15035: AND
15036: IFFALSE 15120
// begin un = filterallunits ( [ f_side , i ] ) ;
15038: LD_ADDR_VAR 0 2
15042: PUSH
15043: LD_INT 22
15045: PUSH
15046: LD_VAR 0 1
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PPUSH
15055: CALL_OW 69
15059: ST_TO_ADDR
// if un then
15060: LD_VAR 0 2
15064: IFFALSE 15078
// SetSide ( un , 0 ) ;
15066: LD_VAR 0 2
15070: PPUSH
15071: LD_INT 0
15073: PPUSH
15074: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
15078: LD_ADDR_LOC 29
15082: PUSH
15083: LD_LOC 29
15087: PPUSH
15088: LD_VAR 0 1
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 1
15100: ST_TO_ADDR
// if i = your_side then
15101: LD_VAR 0 1
15105: PUSH
15106: LD_OWVAR 2
15110: EQUAL
15111: IFFALSE 15120
// begin Multiplayer_Loose_Message ;
15113: CALL_OW 521
// enable ( 400 ) ;
15117: LD_INT 400
15119: ENABLE_MARKED
// end ; end ;
15120: GO 14998
15122: POP
15123: POP
// if not Unfoged and defaited [ your_side ] then
15124: LD_LOC 31
15128: NOT
15129: PUSH
15130: LD_LOC 29
15134: PUSH
15135: LD_OWVAR 2
15139: ARRAY
15140: AND
15141: IFFALSE 15147
// Unfog ;
15143: CALL 15333 0 0
// DidGameEnd ;
15147: CALL 15162 0 0
// if not GameEnded then
15151: LD_LOC 30
15155: NOT
15156: IFFALSE 15159
// enable ;
15158: ENABLE
// end ;
15159: PPOPN 2
15161: END
// function DidGameEnd ; var i , k , enemy ; begin
15162: LD_INT 0
15164: PPUSH
15165: PPUSH
15166: PPUSH
15167: PPUSH
// enemy = [ ] ;
15168: LD_ADDR_VAR 0 4
15172: PUSH
15173: EMPTY
15174: ST_TO_ADDR
// for i = 1 to side_positions do
15175: LD_ADDR_VAR 0 2
15179: PUSH
15180: DOUBLE
15181: LD_INT 1
15183: DEC
15184: ST_TO_ADDR
15185: LD_EXP 19
15189: PUSH
15190: FOR_TO
15191: IFFALSE 15295
// if not defaited [ i ] then
15193: LD_LOC 29
15197: PUSH
15198: LD_VAR 0 2
15202: ARRAY
15203: NOT
15204: IFFALSE 15293
// for k = 1 to side_positions do
15206: LD_ADDR_VAR 0 3
15210: PUSH
15211: DOUBLE
15212: LD_INT 1
15214: DEC
15215: ST_TO_ADDR
15216: LD_EXP 19
15220: PUSH
15221: FOR_TO
15222: IFFALSE 15291
// if not defaited [ k ] then
15224: LD_LOC 29
15228: PUSH
15229: LD_VAR 0 3
15233: ARRAY
15234: NOT
15235: IFFALSE 15289
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
15237: LD_VAR 0 2
15241: PPUSH
15242: LD_VAR 0 3
15246: PPUSH
15247: CALL_OW 81
15251: PUSH
15252: LD_INT 2
15254: PUSH
15255: LD_INT 0
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: IN
15262: IFFALSE 15289
// enemy = enemy ^ [ i , k ] ;
15264: LD_ADDR_VAR 0 4
15268: PUSH
15269: LD_VAR 0 4
15273: PUSH
15274: LD_VAR 0 2
15278: PUSH
15279: LD_VAR 0 3
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: ADD
15288: ST_TO_ADDR
15289: GO 15221
15291: POP
15292: POP
15293: GO 15190
15295: POP
15296: POP
// if not enemy then
15297: LD_VAR 0 4
15301: NOT
15302: IFFALSE 15328
// begin GameEnded = true ;
15304: LD_ADDR_LOC 30
15308: PUSH
15309: LD_INT 1
15311: ST_TO_ADDR
// if not defaited [ your_side ] then
15312: LD_LOC 29
15316: PUSH
15317: LD_OWVAR 2
15321: ARRAY
15322: NOT
15323: IFFALSE 15328
// enable ( 401 ) ;
15325: LD_INT 401
15327: ENABLE_MARKED
// end ; end ;
15328: LD_VAR 0 1
15332: RET
// function unfog ; var k , friends ; begin
15333: LD_INT 0
15335: PPUSH
15336: PPUSH
15337: PPUSH
// for k = 1 to side_positions do
15338: LD_ADDR_VAR 0 2
15342: PUSH
15343: DOUBLE
15344: LD_INT 1
15346: DEC
15347: ST_TO_ADDR
15348: LD_EXP 19
15352: PUSH
15353: FOR_TO
15354: IFFALSE 15410
// if not defaited [ k ] then
15356: LD_LOC 29
15360: PUSH
15361: LD_VAR 0 2
15365: ARRAY
15366: NOT
15367: IFFALSE 15408
// if GetAttitude ( your_side , k ) in [ att_friend ] then
15369: LD_OWVAR 2
15373: PPUSH
15374: LD_VAR 0 2
15378: PPUSH
15379: CALL_OW 81
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: EMPTY
15388: LIST
15389: IN
15390: IFFALSE 15408
// friends = friends ^ k ;
15392: LD_ADDR_VAR 0 3
15396: PUSH
15397: LD_VAR 0 3
15401: PUSH
15402: LD_VAR 0 2
15406: ADD
15407: ST_TO_ADDR
15408: GO 15353
15410: POP
15411: POP
// if not friends then
15412: LD_VAR 0 3
15416: NOT
15417: IFFALSE 15434
// begin fogoff ( true ) ;
15419: LD_INT 1
15421: PPUSH
15422: CALL_OW 344
// unfoged = true ;
15426: LD_ADDR_LOC 31
15430: PUSH
15431: LD_INT 1
15433: ST_TO_ADDR
// end ; end ;
15434: LD_VAR 0 1
15438: RET
// export function MakeGameEnd ; begin
15439: LD_INT 0
15441: PPUSH
// fogoff ( true ) ;
15442: LD_INT 1
15444: PPUSH
15445: CALL_OW 344
// unfoged = true ;
15449: LD_ADDR_LOC 31
15453: PUSH
15454: LD_INT 1
15456: ST_TO_ADDR
// wait ( 0 0$5 ) ;
15457: LD_INT 175
15459: PPUSH
15460: CALL_OW 67
// GameEnded = true ;
15464: LD_ADDR_LOC 30
15468: PUSH
15469: LD_INT 1
15471: ST_TO_ADDR
// end ;
15472: LD_VAR 0 1
15476: RET
// export function GetGameEnded ; begin
15477: LD_INT 0
15479: PPUSH
// result = GameEnded ;
15480: LD_ADDR_VAR 0 1
15484: PUSH
15485: LD_LOC 30
15489: ST_TO_ADDR
// end ; end_of_file
15490: LD_VAR 0 1
15494: RET
// export function SetMpTechs ( ) ; var side , i ; begin
15495: LD_INT 0
15497: PPUSH
15498: PPUSH
15499: PPUSH
// for side = 1 to 8 do
15500: LD_ADDR_VAR 0 2
15504: PUSH
15505: DOUBLE
15506: LD_INT 1
15508: DEC
15509: ST_TO_ADDR
15510: LD_INT 8
15512: PUSH
15513: FOR_TO
15514: IFFALSE 15635
// begin for i = 1 to 72 do
15516: LD_ADDR_VAR 0 3
15520: PUSH
15521: DOUBLE
15522: LD_INT 1
15524: DEC
15525: ST_TO_ADDR
15526: LD_INT 72
15528: PUSH
15529: FOR_TO
15530: IFFALSE 15561
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15532: LD_VAR 0 3
15536: PPUSH
15537: LD_VAR 0 2
15541: PPUSH
15542: LD_INT 0
15544: PPUSH
15545: LD_VAR 0 3
15549: PPUSH
15550: CALL_OW 565
15554: PPUSH
15555: CALL_OW 322
15559: GO 15529
15561: POP
15562: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15563: LD_INT 73
15565: PPUSH
15566: LD_VAR 0 2
15570: PPUSH
15571: LD_INT 0
15573: PPUSH
15574: LD_INT 25
15576: PPUSH
15577: CALL_OW 565
15581: PPUSH
15582: CALL_OW 322
// for i = 0 to 40 do
15586: LD_ADDR_VAR 0 3
15590: PUSH
15591: DOUBLE
15592: LD_INT 0
15594: DEC
15595: ST_TO_ADDR
15596: LD_INT 40
15598: PUSH
15599: FOR_TO
15600: IFFALSE 15631
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15602: LD_VAR 0 3
15606: PPUSH
15607: LD_VAR 0 2
15611: PPUSH
15612: LD_INT 1
15614: PPUSH
15615: LD_VAR 0 3
15619: PPUSH
15620: CALL_OW 565
15624: PPUSH
15625: CALL_OW 324
15629: GO 15599
15631: POP
15632: POP
// end ;
15633: GO 15513
15635: POP
15636: POP
// end ;
15637: LD_VAR 0 1
15641: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15642: LD_INT 0
15644: PPUSH
15645: PPUSH
15646: PPUSH
// for side = 1 to 8 do
15647: LD_ADDR_VAR 0 3
15651: PUSH
15652: DOUBLE
15653: LD_INT 1
15655: DEC
15656: ST_TO_ADDR
15657: LD_INT 8
15659: PUSH
15660: FOR_TO
15661: IFFALSE 19657
// begin for i = 1 to 73 do
15663: LD_ADDR_VAR 0 4
15667: PUSH
15668: DOUBLE
15669: LD_INT 1
15671: DEC
15672: ST_TO_ADDR
15673: LD_INT 73
15675: PUSH
15676: FOR_TO
15677: IFFALSE 15698
// SetTech ( i , side , state_disabled ) ;
15679: LD_VAR 0 4
15683: PPUSH
15684: LD_VAR 0 3
15688: PPUSH
15689: LD_INT 0
15691: PPUSH
15692: CALL_OW 322
15696: GO 15676
15698: POP
15699: POP
// for i = 0 to 40 do
15700: LD_ADDR_VAR 0 4
15704: PUSH
15705: DOUBLE
15706: LD_INT 0
15708: DEC
15709: ST_TO_ADDR
15710: LD_INT 40
15712: PUSH
15713: FOR_TO
15714: IFFALSE 15735
// SetRestrict ( i , side , false ) ;
15716: LD_VAR 0 4
15720: PPUSH
15721: LD_VAR 0 3
15725: PPUSH
15726: LD_INT 0
15728: PPUSH
15729: CALL_OW 324
15733: GO 15713
15735: POP
15736: POP
// case level of 1 :
15737: LD_VAR 0 1
15741: PUSH
15742: LD_INT 1
15744: DOUBLE
15745: EQUAL
15746: IFTRUE 15750
15748: GO 15903
15750: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15751: LD_INT 35
15753: PPUSH
15754: LD_VAR 0 3
15758: PPUSH
15759: LD_INT 1
15761: PPUSH
15762: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15766: LD_INT 45
15768: PPUSH
15769: LD_VAR 0 3
15773: PPUSH
15774: LD_INT 1
15776: PPUSH
15777: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15781: LD_INT 46
15783: PPUSH
15784: LD_VAR 0 3
15788: PPUSH
15789: LD_INT 1
15791: PPUSH
15792: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15796: LD_INT 47
15798: PPUSH
15799: LD_VAR 0 3
15803: PPUSH
15804: LD_INT 1
15806: PPUSH
15807: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15811: LD_INT 0
15813: PPUSH
15814: LD_VAR 0 3
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15826: LD_INT 2
15828: PPUSH
15829: LD_VAR 0 3
15833: PPUSH
15834: LD_INT 1
15836: PPUSH
15837: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15841: LD_INT 4
15843: PPUSH
15844: LD_VAR 0 3
15848: PPUSH
15849: LD_INT 1
15851: PPUSH
15852: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15856: LD_INT 6
15858: PPUSH
15859: LD_VAR 0 3
15863: PPUSH
15864: LD_INT 1
15866: PPUSH
15867: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15871: LD_INT 29
15873: PPUSH
15874: LD_VAR 0 3
15878: PPUSH
15879: LD_INT 1
15881: PPUSH
15882: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15886: LD_INT 31
15888: PPUSH
15889: LD_VAR 0 3
15893: PPUSH
15894: LD_INT 1
15896: PPUSH
15897: CALL_OW 324
// end ; 2 :
15901: GO 19655
15903: LD_INT 2
15905: DOUBLE
15906: EQUAL
15907: IFTRUE 15911
15909: GO 16109
15911: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15912: LD_INT 35
15914: PPUSH
15915: LD_VAR 0 3
15919: PPUSH
15920: LD_INT 1
15922: PPUSH
15923: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15927: LD_INT 45
15929: PPUSH
15930: LD_VAR 0 3
15934: PPUSH
15935: LD_INT 1
15937: PPUSH
15938: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15942: LD_INT 46
15944: PPUSH
15945: LD_VAR 0 3
15949: PPUSH
15950: LD_INT 1
15952: PPUSH
15953: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15957: LD_INT 47
15959: PPUSH
15960: LD_VAR 0 3
15964: PPUSH
15965: LD_INT 1
15967: PPUSH
15968: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15972: LD_INT 1
15974: PPUSH
15975: LD_VAR 0 3
15979: PPUSH
15980: LD_INT 1
15982: PPUSH
15983: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15987: LD_INT 2
15989: PPUSH
15990: LD_VAR 0 3
15994: PPUSH
15995: LD_INT 1
15997: PPUSH
15998: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16002: LD_INT 11
16004: PPUSH
16005: LD_VAR 0 3
16009: PPUSH
16010: LD_INT 1
16012: PPUSH
16013: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16017: LD_INT 0
16019: PPUSH
16020: LD_VAR 0 3
16024: PPUSH
16025: LD_INT 1
16027: PPUSH
16028: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16032: LD_INT 2
16034: PPUSH
16035: LD_VAR 0 3
16039: PPUSH
16040: LD_INT 1
16042: PPUSH
16043: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16047: LD_INT 4
16049: PPUSH
16050: LD_VAR 0 3
16054: PPUSH
16055: LD_INT 1
16057: PPUSH
16058: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16062: LD_INT 6
16064: PPUSH
16065: LD_VAR 0 3
16069: PPUSH
16070: LD_INT 1
16072: PPUSH
16073: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16077: LD_INT 29
16079: PPUSH
16080: LD_VAR 0 3
16084: PPUSH
16085: LD_INT 1
16087: PPUSH
16088: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16092: LD_INT 31
16094: PPUSH
16095: LD_VAR 0 3
16099: PPUSH
16100: LD_INT 1
16102: PPUSH
16103: CALL_OW 324
// end ; 3 :
16107: GO 19655
16109: LD_INT 3
16111: DOUBLE
16112: EQUAL
16113: IFTRUE 16117
16115: GO 16570
16117: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16118: LD_INT 35
16120: PPUSH
16121: LD_VAR 0 3
16125: PPUSH
16126: LD_INT 1
16128: PPUSH
16129: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16133: LD_INT 45
16135: PPUSH
16136: LD_VAR 0 3
16140: PPUSH
16141: LD_INT 1
16143: PPUSH
16144: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16148: LD_INT 46
16150: PPUSH
16151: LD_VAR 0 3
16155: PPUSH
16156: LD_INT 1
16158: PPUSH
16159: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16163: LD_INT 47
16165: PPUSH
16166: LD_VAR 0 3
16170: PPUSH
16171: LD_INT 1
16173: PPUSH
16174: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16178: LD_INT 1
16180: PPUSH
16181: LD_VAR 0 3
16185: PPUSH
16186: LD_INT 1
16188: PPUSH
16189: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16193: LD_INT 2
16195: PPUSH
16196: LD_VAR 0 3
16200: PPUSH
16201: LD_INT 1
16203: PPUSH
16204: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16208: LD_INT 11
16210: PPUSH
16211: LD_VAR 0 3
16215: PPUSH
16216: LD_INT 1
16218: PPUSH
16219: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16223: LD_INT 48
16225: PPUSH
16226: LD_VAR 0 3
16230: PPUSH
16231: LD_INT 1
16233: PPUSH
16234: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16238: LD_INT 69
16240: PPUSH
16241: LD_VAR 0 3
16245: PPUSH
16246: LD_INT 1
16248: PPUSH
16249: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16253: LD_INT 39
16255: PPUSH
16256: LD_VAR 0 3
16260: PPUSH
16261: LD_INT 1
16263: PPUSH
16264: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16268: LD_INT 43
16270: PPUSH
16271: LD_VAR 0 3
16275: PPUSH
16276: LD_INT 1
16278: PPUSH
16279: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16283: LD_INT 51
16285: PPUSH
16286: LD_VAR 0 3
16290: PPUSH
16291: LD_INT 1
16293: PPUSH
16294: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16298: LD_INT 6
16300: PPUSH
16301: LD_VAR 0 3
16305: PPUSH
16306: LD_INT 1
16308: PPUSH
16309: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16313: LD_INT 0
16315: PPUSH
16316: LD_VAR 0 3
16320: PPUSH
16321: LD_INT 1
16323: PPUSH
16324: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16328: LD_INT 2
16330: PPUSH
16331: LD_VAR 0 3
16335: PPUSH
16336: LD_INT 1
16338: PPUSH
16339: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16343: LD_INT 3
16345: PPUSH
16346: LD_VAR 0 3
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16358: LD_INT 4
16360: PPUSH
16361: LD_VAR 0 3
16365: PPUSH
16366: LD_INT 1
16368: PPUSH
16369: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16373: LD_INT 6
16375: PPUSH
16376: LD_VAR 0 3
16380: PPUSH
16381: LD_INT 1
16383: PPUSH
16384: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16388: LD_INT 7
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: LD_INT 1
16398: PPUSH
16399: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16403: LD_INT 8
16405: PPUSH
16406: LD_VAR 0 3
16410: PPUSH
16411: LD_INT 1
16413: PPUSH
16414: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16418: LD_INT 10
16420: PPUSH
16421: LD_VAR 0 3
16425: PPUSH
16426: LD_INT 1
16428: PPUSH
16429: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16433: LD_INT 15
16435: PPUSH
16436: LD_VAR 0 3
16440: PPUSH
16441: LD_INT 1
16443: PPUSH
16444: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16448: LD_INT 16
16450: PPUSH
16451: LD_VAR 0 3
16455: PPUSH
16456: LD_INT 1
16458: PPUSH
16459: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16463: LD_INT 17
16465: PPUSH
16466: LD_VAR 0 3
16470: PPUSH
16471: LD_INT 1
16473: PPUSH
16474: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16478: LD_INT 20
16480: PPUSH
16481: LD_VAR 0 3
16485: PPUSH
16486: LD_INT 1
16488: PPUSH
16489: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16493: LD_INT 26
16495: PPUSH
16496: LD_VAR 0 3
16500: PPUSH
16501: LD_INT 1
16503: PPUSH
16504: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16508: LD_INT 27
16510: PPUSH
16511: LD_VAR 0 3
16515: PPUSH
16516: LD_INT 1
16518: PPUSH
16519: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16523: LD_INT 29
16525: PPUSH
16526: LD_VAR 0 3
16530: PPUSH
16531: LD_INT 1
16533: PPUSH
16534: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16538: LD_INT 31
16540: PPUSH
16541: LD_VAR 0 3
16545: PPUSH
16546: LD_INT 1
16548: PPUSH
16549: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16553: LD_INT 32
16555: PPUSH
16556: LD_VAR 0 3
16560: PPUSH
16561: LD_INT 1
16563: PPUSH
16564: CALL_OW 324
// end ; 4 :
16568: GO 19655
16570: LD_INT 4
16572: DOUBLE
16573: EQUAL
16574: IFTRUE 16578
16576: GO 17526
16578: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16579: LD_INT 35
16581: PPUSH
16582: LD_VAR 0 3
16586: PPUSH
16587: LD_INT 1
16589: PPUSH
16590: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16594: LD_INT 45
16596: PPUSH
16597: LD_VAR 0 3
16601: PPUSH
16602: LD_INT 1
16604: PPUSH
16605: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16609: LD_INT 46
16611: PPUSH
16612: LD_VAR 0 3
16616: PPUSH
16617: LD_INT 1
16619: PPUSH
16620: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16624: LD_INT 47
16626: PPUSH
16627: LD_VAR 0 3
16631: PPUSH
16632: LD_INT 1
16634: PPUSH
16635: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16639: LD_INT 1
16641: PPUSH
16642: LD_VAR 0 3
16646: PPUSH
16647: LD_INT 1
16649: PPUSH
16650: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16654: LD_INT 2
16656: PPUSH
16657: LD_VAR 0 3
16661: PPUSH
16662: LD_INT 1
16664: PPUSH
16665: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16669: LD_INT 11
16671: PPUSH
16672: LD_VAR 0 3
16676: PPUSH
16677: LD_INT 1
16679: PPUSH
16680: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16684: LD_INT 20
16686: PPUSH
16687: LD_VAR 0 3
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16699: LD_INT 48
16701: PPUSH
16702: LD_VAR 0 3
16706: PPUSH
16707: LD_INT 1
16709: PPUSH
16710: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16714: LD_INT 49
16716: PPUSH
16717: LD_VAR 0 3
16721: PPUSH
16722: LD_INT 1
16724: PPUSH
16725: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16729: LD_INT 69
16731: PPUSH
16732: LD_VAR 0 3
16736: PPUSH
16737: LD_INT 1
16739: PPUSH
16740: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16744: LD_INT 39
16746: PPUSH
16747: LD_VAR 0 3
16751: PPUSH
16752: LD_INT 1
16754: PPUSH
16755: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16759: LD_INT 34
16761: PPUSH
16762: LD_VAR 0 3
16766: PPUSH
16767: LD_INT 1
16769: PPUSH
16770: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16774: LD_INT 42
16776: PPUSH
16777: LD_VAR 0 3
16781: PPUSH
16782: LD_INT 1
16784: PPUSH
16785: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16789: LD_INT 44
16791: PPUSH
16792: LD_VAR 0 3
16796: PPUSH
16797: LD_INT 1
16799: PPUSH
16800: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16804: LD_INT 41
16806: PPUSH
16807: LD_VAR 0 3
16811: PPUSH
16812: LD_INT 1
16814: PPUSH
16815: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16819: LD_INT 43
16821: PPUSH
16822: LD_VAR 0 3
16826: PPUSH
16827: LD_INT 1
16829: PPUSH
16830: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16834: LD_INT 70
16836: PPUSH
16837: LD_VAR 0 3
16841: PPUSH
16842: LD_INT 1
16844: PPUSH
16845: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16849: LD_INT 51
16851: PPUSH
16852: LD_VAR 0 3
16856: PPUSH
16857: LD_INT 1
16859: PPUSH
16860: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16864: LD_INT 52
16866: PPUSH
16867: LD_VAR 0 3
16871: PPUSH
16872: LD_INT 1
16874: PPUSH
16875: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16879: LD_INT 6
16881: PPUSH
16882: LD_VAR 0 3
16886: PPUSH
16887: LD_INT 1
16889: PPUSH
16890: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16894: LD_INT 15
16896: PPUSH
16897: LD_VAR 0 3
16901: PPUSH
16902: LD_INT 1
16904: PPUSH
16905: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16909: LD_INT 7
16911: PPUSH
16912: LD_VAR 0 3
16916: PPUSH
16917: LD_INT 1
16919: PPUSH
16920: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16924: LD_INT 12
16926: PPUSH
16927: LD_VAR 0 3
16931: PPUSH
16932: LD_INT 1
16934: PPUSH
16935: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16939: LD_INT 18
16941: PPUSH
16942: LD_VAR 0 3
16946: PPUSH
16947: LD_INT 1
16949: PPUSH
16950: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16954: LD_INT 60
16956: PPUSH
16957: LD_VAR 0 3
16961: PPUSH
16962: LD_INT 1
16964: PPUSH
16965: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16969: LD_INT 9
16971: PPUSH
16972: LD_VAR 0 3
16976: PPUSH
16977: LD_INT 1
16979: PPUSH
16980: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16984: LD_INT 30
16986: PPUSH
16987: LD_VAR 0 3
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16999: LD_INT 37
17001: PPUSH
17002: LD_VAR 0 3
17006: PPUSH
17007: LD_INT 1
17009: PPUSH
17010: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17014: LD_INT 5
17016: PPUSH
17017: LD_VAR 0 3
17021: PPUSH
17022: LD_INT 1
17024: PPUSH
17025: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17029: LD_INT 66
17031: PPUSH
17032: LD_VAR 0 3
17036: PPUSH
17037: LD_INT 1
17039: PPUSH
17040: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17044: LD_INT 21
17046: PPUSH
17047: LD_VAR 0 3
17051: PPUSH
17052: LD_INT 1
17054: PPUSH
17055: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17059: LD_INT 22
17061: PPUSH
17062: LD_VAR 0 3
17066: PPUSH
17067: LD_INT 1
17069: PPUSH
17070: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17074: LD_INT 54
17076: PPUSH
17077: LD_VAR 0 3
17081: PPUSH
17082: LD_INT 1
17084: PPUSH
17085: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17089: LD_INT 0
17091: PPUSH
17092: LD_VAR 0 3
17096: PPUSH
17097: LD_INT 1
17099: PPUSH
17100: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17104: LD_INT 1
17106: PPUSH
17107: LD_VAR 0 3
17111: PPUSH
17112: LD_INT 1
17114: PPUSH
17115: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17119: LD_INT 2
17121: PPUSH
17122: LD_VAR 0 3
17126: PPUSH
17127: LD_INT 1
17129: PPUSH
17130: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17134: LD_INT 3
17136: PPUSH
17137: LD_VAR 0 3
17141: PPUSH
17142: LD_INT 1
17144: PPUSH
17145: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17149: LD_INT 4
17151: PPUSH
17152: LD_VAR 0 3
17156: PPUSH
17157: LD_INT 1
17159: PPUSH
17160: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17164: LD_INT 5
17166: PPUSH
17167: LD_VAR 0 3
17171: PPUSH
17172: LD_INT 1
17174: PPUSH
17175: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17179: LD_INT 6
17181: PPUSH
17182: LD_VAR 0 3
17186: PPUSH
17187: LD_INT 1
17189: PPUSH
17190: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17194: LD_INT 7
17196: PPUSH
17197: LD_VAR 0 3
17201: PPUSH
17202: LD_INT 1
17204: PPUSH
17205: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17209: LD_INT 8
17211: PPUSH
17212: LD_VAR 0 3
17216: PPUSH
17217: LD_INT 1
17219: PPUSH
17220: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17224: LD_INT 10
17226: PPUSH
17227: LD_VAR 0 3
17231: PPUSH
17232: LD_INT 1
17234: PPUSH
17235: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17239: LD_INT 11
17241: PPUSH
17242: LD_VAR 0 3
17246: PPUSH
17247: LD_INT 1
17249: PPUSH
17250: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17254: LD_INT 12
17256: PPUSH
17257: LD_VAR 0 3
17261: PPUSH
17262: LD_INT 1
17264: PPUSH
17265: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17269: LD_INT 13
17271: PPUSH
17272: LD_VAR 0 3
17276: PPUSH
17277: LD_INT 1
17279: PPUSH
17280: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17284: LD_INT 14
17286: PPUSH
17287: LD_VAR 0 3
17291: PPUSH
17292: LD_INT 1
17294: PPUSH
17295: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17299: LD_INT 15
17301: PPUSH
17302: LD_VAR 0 3
17306: PPUSH
17307: LD_INT 1
17309: PPUSH
17310: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17314: LD_INT 16
17316: PPUSH
17317: LD_VAR 0 3
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17329: LD_INT 17
17331: PPUSH
17332: LD_VAR 0 3
17336: PPUSH
17337: LD_INT 1
17339: PPUSH
17340: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17344: LD_INT 19
17346: PPUSH
17347: LD_VAR 0 3
17351: PPUSH
17352: LD_INT 1
17354: PPUSH
17355: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17359: LD_INT 20
17361: PPUSH
17362: LD_VAR 0 3
17366: PPUSH
17367: LD_INT 1
17369: PPUSH
17370: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17374: LD_INT 21
17376: PPUSH
17377: LD_VAR 0 3
17381: PPUSH
17382: LD_INT 1
17384: PPUSH
17385: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17389: LD_INT 23
17391: PPUSH
17392: LD_VAR 0 3
17396: PPUSH
17397: LD_INT 1
17399: PPUSH
17400: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17404: LD_INT 26
17406: PPUSH
17407: LD_VAR 0 3
17411: PPUSH
17412: LD_INT 1
17414: PPUSH
17415: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17419: LD_INT 27
17421: PPUSH
17422: LD_VAR 0 3
17426: PPUSH
17427: LD_INT 1
17429: PPUSH
17430: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17434: LD_INT 28
17436: PPUSH
17437: LD_VAR 0 3
17441: PPUSH
17442: LD_INT 1
17444: PPUSH
17445: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17449: LD_INT 29
17451: PPUSH
17452: LD_VAR 0 3
17456: PPUSH
17457: LD_INT 1
17459: PPUSH
17460: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17464: LD_INT 30
17466: PPUSH
17467: LD_VAR 0 3
17471: PPUSH
17472: LD_INT 1
17474: PPUSH
17475: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17479: LD_INT 31
17481: PPUSH
17482: LD_VAR 0 3
17486: PPUSH
17487: LD_INT 1
17489: PPUSH
17490: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17494: LD_INT 32
17496: PPUSH
17497: LD_VAR 0 3
17501: PPUSH
17502: LD_INT 1
17504: PPUSH
17505: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17509: LD_INT 36
17511: PPUSH
17512: LD_VAR 0 3
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 324
// end ; 5 :
17524: GO 19655
17526: LD_INT 5
17528: DOUBLE
17529: EQUAL
17530: IFTRUE 17534
17532: GO 18647
17534: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17535: LD_INT 35
17537: PPUSH
17538: LD_VAR 0 3
17542: PPUSH
17543: LD_INT 1
17545: PPUSH
17546: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17550: LD_INT 45
17552: PPUSH
17553: LD_VAR 0 3
17557: PPUSH
17558: LD_INT 1
17560: PPUSH
17561: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17565: LD_INT 46
17567: PPUSH
17568: LD_VAR 0 3
17572: PPUSH
17573: LD_INT 1
17575: PPUSH
17576: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17580: LD_INT 47
17582: PPUSH
17583: LD_VAR 0 3
17587: PPUSH
17588: LD_INT 1
17590: PPUSH
17591: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17595: LD_INT 1
17597: PPUSH
17598: LD_VAR 0 3
17602: PPUSH
17603: LD_INT 1
17605: PPUSH
17606: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17610: LD_INT 2
17612: PPUSH
17613: LD_VAR 0 3
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17625: LD_INT 11
17627: PPUSH
17628: LD_VAR 0 3
17632: PPUSH
17633: LD_INT 1
17635: PPUSH
17636: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17640: LD_INT 20
17642: PPUSH
17643: LD_VAR 0 3
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17655: LD_INT 48
17657: PPUSH
17658: LD_VAR 0 3
17662: PPUSH
17663: LD_INT 1
17665: PPUSH
17666: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17670: LD_INT 49
17672: PPUSH
17673: LD_VAR 0 3
17677: PPUSH
17678: LD_INT 1
17680: PPUSH
17681: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17685: LD_INT 69
17687: PPUSH
17688: LD_VAR 0 3
17692: PPUSH
17693: LD_INT 1
17695: PPUSH
17696: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17700: LD_INT 39
17702: PPUSH
17703: LD_VAR 0 3
17707: PPUSH
17708: LD_INT 1
17710: PPUSH
17711: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17715: LD_INT 34
17717: PPUSH
17718: LD_VAR 0 3
17722: PPUSH
17723: LD_INT 1
17725: PPUSH
17726: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17730: LD_INT 42
17732: PPUSH
17733: LD_VAR 0 3
17737: PPUSH
17738: LD_INT 1
17740: PPUSH
17741: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17745: LD_INT 44
17747: PPUSH
17748: LD_VAR 0 3
17752: PPUSH
17753: LD_INT 1
17755: PPUSH
17756: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17760: LD_INT 41
17762: PPUSH
17763: LD_VAR 0 3
17767: PPUSH
17768: LD_INT 1
17770: PPUSH
17771: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17775: LD_INT 40
17777: PPUSH
17778: LD_VAR 0 3
17782: PPUSH
17783: LD_INT 1
17785: PPUSH
17786: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17790: LD_INT 43
17792: PPUSH
17793: LD_VAR 0 3
17797: PPUSH
17798: LD_INT 1
17800: PPUSH
17801: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17805: LD_INT 70
17807: PPUSH
17808: LD_VAR 0 3
17812: PPUSH
17813: LD_INT 1
17815: PPUSH
17816: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17820: LD_INT 51
17822: PPUSH
17823: LD_VAR 0 3
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17835: LD_INT 52
17837: PPUSH
17838: LD_VAR 0 3
17842: PPUSH
17843: LD_INT 1
17845: PPUSH
17846: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17850: LD_INT 6
17852: PPUSH
17853: LD_VAR 0 3
17857: PPUSH
17858: LD_INT 1
17860: PPUSH
17861: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17865: LD_INT 15
17867: PPUSH
17868: LD_VAR 0 3
17872: PPUSH
17873: LD_INT 1
17875: PPUSH
17876: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17880: LD_INT 7
17882: PPUSH
17883: LD_VAR 0 3
17887: PPUSH
17888: LD_INT 1
17890: PPUSH
17891: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17895: LD_INT 12
17897: PPUSH
17898: LD_VAR 0 3
17902: PPUSH
17903: LD_INT 1
17905: PPUSH
17906: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17910: LD_INT 17
17912: PPUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_INT 1
17920: PPUSH
17921: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17925: LD_INT 18
17927: PPUSH
17928: LD_VAR 0 3
17932: PPUSH
17933: LD_INT 1
17935: PPUSH
17936: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17940: LD_INT 60
17942: PPUSH
17943: LD_VAR 0 3
17947: PPUSH
17948: LD_INT 1
17950: PPUSH
17951: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17955: LD_INT 32
17957: PPUSH
17958: LD_VAR 0 3
17962: PPUSH
17963: LD_INT 1
17965: PPUSH
17966: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17970: LD_INT 9
17972: PPUSH
17973: LD_VAR 0 3
17977: PPUSH
17978: LD_INT 1
17980: PPUSH
17981: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17985: LD_INT 57
17987: PPUSH
17988: LD_VAR 0 3
17992: PPUSH
17993: LD_INT 1
17995: PPUSH
17996: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18000: LD_INT 30
18002: PPUSH
18003: LD_VAR 0 3
18007: PPUSH
18008: LD_INT 1
18010: PPUSH
18011: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18015: LD_INT 37
18017: PPUSH
18018: LD_VAR 0 3
18022: PPUSH
18023: LD_INT 1
18025: PPUSH
18026: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18030: LD_INT 63
18032: PPUSH
18033: LD_VAR 0 3
18037: PPUSH
18038: LD_INT 1
18040: PPUSH
18041: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18045: LD_INT 3
18047: PPUSH
18048: LD_VAR 0 3
18052: PPUSH
18053: LD_INT 1
18055: PPUSH
18056: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18060: LD_INT 4
18062: PPUSH
18063: LD_VAR 0 3
18067: PPUSH
18068: LD_INT 1
18070: PPUSH
18071: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18075: LD_INT 5
18077: PPUSH
18078: LD_VAR 0 3
18082: PPUSH
18083: LD_INT 1
18085: PPUSH
18086: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18090: LD_INT 66
18092: PPUSH
18093: LD_VAR 0 3
18097: PPUSH
18098: LD_INT 1
18100: PPUSH
18101: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18105: LD_INT 21
18107: PPUSH
18108: LD_VAR 0 3
18112: PPUSH
18113: LD_INT 1
18115: PPUSH
18116: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18120: LD_INT 22
18122: PPUSH
18123: LD_VAR 0 3
18127: PPUSH
18128: LD_INT 1
18130: PPUSH
18131: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18135: LD_INT 19
18137: PPUSH
18138: LD_VAR 0 3
18142: PPUSH
18143: LD_INT 1
18145: PPUSH
18146: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18150: LD_INT 54
18152: PPUSH
18153: LD_VAR 0 3
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18165: LD_INT 55
18167: PPUSH
18168: LD_VAR 0 3
18172: PPUSH
18173: LD_INT 1
18175: PPUSH
18176: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18180: LD_INT 0
18182: PPUSH
18183: LD_VAR 0 3
18187: PPUSH
18188: LD_INT 1
18190: PPUSH
18191: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18195: LD_INT 1
18197: PPUSH
18198: LD_VAR 0 3
18202: PPUSH
18203: LD_INT 1
18205: PPUSH
18206: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18210: LD_INT 2
18212: PPUSH
18213: LD_VAR 0 3
18217: PPUSH
18218: LD_INT 1
18220: PPUSH
18221: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18225: LD_INT 3
18227: PPUSH
18228: LD_VAR 0 3
18232: PPUSH
18233: LD_INT 1
18235: PPUSH
18236: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18240: LD_INT 4
18242: PPUSH
18243: LD_VAR 0 3
18247: PPUSH
18248: LD_INT 1
18250: PPUSH
18251: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18255: LD_INT 5
18257: PPUSH
18258: LD_VAR 0 3
18262: PPUSH
18263: LD_INT 1
18265: PPUSH
18266: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18270: LD_INT 6
18272: PPUSH
18273: LD_VAR 0 3
18277: PPUSH
18278: LD_INT 1
18280: PPUSH
18281: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18285: LD_INT 7
18287: PPUSH
18288: LD_VAR 0 3
18292: PPUSH
18293: LD_INT 1
18295: PPUSH
18296: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18300: LD_INT 8
18302: PPUSH
18303: LD_VAR 0 3
18307: PPUSH
18308: LD_INT 1
18310: PPUSH
18311: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18315: LD_INT 10
18317: PPUSH
18318: LD_VAR 0 3
18322: PPUSH
18323: LD_INT 1
18325: PPUSH
18326: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18330: LD_INT 11
18332: PPUSH
18333: LD_VAR 0 3
18337: PPUSH
18338: LD_INT 1
18340: PPUSH
18341: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18345: LD_INT 12
18347: PPUSH
18348: LD_VAR 0 3
18352: PPUSH
18353: LD_INT 1
18355: PPUSH
18356: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18360: LD_INT 13
18362: PPUSH
18363: LD_VAR 0 3
18367: PPUSH
18368: LD_INT 1
18370: PPUSH
18371: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18375: LD_INT 14
18377: PPUSH
18378: LD_VAR 0 3
18382: PPUSH
18383: LD_INT 1
18385: PPUSH
18386: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18390: LD_INT 15
18392: PPUSH
18393: LD_VAR 0 3
18397: PPUSH
18398: LD_INT 1
18400: PPUSH
18401: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18405: LD_INT 16
18407: PPUSH
18408: LD_VAR 0 3
18412: PPUSH
18413: LD_INT 1
18415: PPUSH
18416: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18420: LD_INT 17
18422: PPUSH
18423: LD_VAR 0 3
18427: PPUSH
18428: LD_INT 1
18430: PPUSH
18431: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18435: LD_INT 18
18437: PPUSH
18438: LD_VAR 0 3
18442: PPUSH
18443: LD_INT 1
18445: PPUSH
18446: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18450: LD_INT 19
18452: PPUSH
18453: LD_VAR 0 3
18457: PPUSH
18458: LD_INT 1
18460: PPUSH
18461: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18465: LD_INT 20
18467: PPUSH
18468: LD_VAR 0 3
18472: PPUSH
18473: LD_INT 1
18475: PPUSH
18476: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18480: LD_INT 21
18482: PPUSH
18483: LD_VAR 0 3
18487: PPUSH
18488: LD_INT 1
18490: PPUSH
18491: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18495: LD_INT 23
18497: PPUSH
18498: LD_VAR 0 3
18502: PPUSH
18503: LD_INT 1
18505: PPUSH
18506: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18510: LD_INT 26
18512: PPUSH
18513: LD_VAR 0 3
18517: PPUSH
18518: LD_INT 1
18520: PPUSH
18521: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18525: LD_INT 27
18527: PPUSH
18528: LD_VAR 0 3
18532: PPUSH
18533: LD_INT 1
18535: PPUSH
18536: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18540: LD_INT 28
18542: PPUSH
18543: LD_VAR 0 3
18547: PPUSH
18548: LD_INT 1
18550: PPUSH
18551: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18555: LD_INT 29
18557: PPUSH
18558: LD_VAR 0 3
18562: PPUSH
18563: LD_INT 1
18565: PPUSH
18566: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18570: LD_INT 30
18572: PPUSH
18573: LD_VAR 0 3
18577: PPUSH
18578: LD_INT 1
18580: PPUSH
18581: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18585: LD_INT 31
18587: PPUSH
18588: LD_VAR 0 3
18592: PPUSH
18593: LD_INT 1
18595: PPUSH
18596: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18600: LD_INT 32
18602: PPUSH
18603: LD_VAR 0 3
18607: PPUSH
18608: LD_INT 1
18610: PPUSH
18611: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18615: LD_INT 33
18617: PPUSH
18618: LD_VAR 0 3
18622: PPUSH
18623: LD_INT 1
18625: PPUSH
18626: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18630: LD_INT 36
18632: PPUSH
18633: LD_VAR 0 3
18637: PPUSH
18638: LD_INT 1
18640: PPUSH
18641: CALL_OW 324
// end ; 6 :
18645: GO 19655
18647: LD_INT 6
18649: DOUBLE
18650: EQUAL
18651: IFTRUE 18655
18653: GO 19580
18655: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18656: LD_INT 35
18658: PPUSH
18659: LD_VAR 0 3
18663: PPUSH
18664: LD_INT 1
18666: PPUSH
18667: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18671: LD_INT 45
18673: PPUSH
18674: LD_VAR 0 3
18678: PPUSH
18679: LD_INT 1
18681: PPUSH
18682: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18686: LD_INT 46
18688: PPUSH
18689: LD_VAR 0 3
18693: PPUSH
18694: LD_INT 1
18696: PPUSH
18697: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18701: LD_INT 47
18703: PPUSH
18704: LD_VAR 0 3
18708: PPUSH
18709: LD_INT 1
18711: PPUSH
18712: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18716: LD_INT 1
18718: PPUSH
18719: LD_VAR 0 3
18723: PPUSH
18724: LD_INT 1
18726: PPUSH
18727: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18731: LD_INT 2
18733: PPUSH
18734: LD_VAR 0 3
18738: PPUSH
18739: LD_INT 1
18741: PPUSH
18742: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18746: LD_INT 11
18748: PPUSH
18749: LD_VAR 0 3
18753: PPUSH
18754: LD_INT 1
18756: PPUSH
18757: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18761: LD_INT 20
18763: PPUSH
18764: LD_VAR 0 3
18768: PPUSH
18769: LD_INT 1
18771: PPUSH
18772: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18776: LD_INT 48
18778: PPUSH
18779: LD_VAR 0 3
18783: PPUSH
18784: LD_INT 1
18786: PPUSH
18787: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18791: LD_INT 49
18793: PPUSH
18794: LD_VAR 0 3
18798: PPUSH
18799: LD_INT 1
18801: PPUSH
18802: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18806: LD_INT 50
18808: PPUSH
18809: LD_VAR 0 3
18813: PPUSH
18814: LD_INT 1
18816: PPUSH
18817: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18821: LD_INT 69
18823: PPUSH
18824: LD_VAR 0 3
18828: PPUSH
18829: LD_INT 1
18831: PPUSH
18832: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18836: LD_INT 39
18838: PPUSH
18839: LD_VAR 0 3
18843: PPUSH
18844: LD_INT 1
18846: PPUSH
18847: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18851: LD_INT 34
18853: PPUSH
18854: LD_VAR 0 3
18858: PPUSH
18859: LD_INT 1
18861: PPUSH
18862: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18866: LD_INT 42
18868: PPUSH
18869: LD_VAR 0 3
18873: PPUSH
18874: LD_INT 1
18876: PPUSH
18877: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18881: LD_INT 44
18883: PPUSH
18884: LD_VAR 0 3
18888: PPUSH
18889: LD_INT 1
18891: PPUSH
18892: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18896: LD_INT 41
18898: PPUSH
18899: LD_VAR 0 3
18903: PPUSH
18904: LD_INT 1
18906: PPUSH
18907: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18911: LD_INT 13
18913: PPUSH
18914: LD_VAR 0 3
18918: PPUSH
18919: LD_INT 1
18921: PPUSH
18922: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18926: LD_INT 40
18928: PPUSH
18929: LD_VAR 0 3
18933: PPUSH
18934: LD_INT 1
18936: PPUSH
18937: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18941: LD_INT 43
18943: PPUSH
18944: LD_VAR 0 3
18948: PPUSH
18949: LD_INT 1
18951: PPUSH
18952: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18956: LD_INT 70
18958: PPUSH
18959: LD_VAR 0 3
18963: PPUSH
18964: LD_INT 1
18966: PPUSH
18967: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18971: LD_INT 23
18973: PPUSH
18974: LD_VAR 0 3
18978: PPUSH
18979: LD_INT 1
18981: PPUSH
18982: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18986: LD_INT 51
18988: PPUSH
18989: LD_VAR 0 3
18993: PPUSH
18994: LD_INT 1
18996: PPUSH
18997: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19001: LD_INT 52
19003: PPUSH
19004: LD_VAR 0 3
19008: PPUSH
19009: LD_INT 1
19011: PPUSH
19012: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19016: LD_INT 6
19018: PPUSH
19019: LD_VAR 0 3
19023: PPUSH
19024: LD_INT 1
19026: PPUSH
19027: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19031: LD_INT 15
19033: PPUSH
19034: LD_VAR 0 3
19038: PPUSH
19039: LD_INT 1
19041: PPUSH
19042: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19046: LD_INT 7
19048: PPUSH
19049: LD_VAR 0 3
19053: PPUSH
19054: LD_INT 1
19056: PPUSH
19057: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19061: LD_INT 12
19063: PPUSH
19064: LD_VAR 0 3
19068: PPUSH
19069: LD_INT 1
19071: PPUSH
19072: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19076: LD_INT 10
19078: PPUSH
19079: LD_VAR 0 3
19083: PPUSH
19084: LD_INT 1
19086: PPUSH
19087: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19091: LD_INT 17
19093: PPUSH
19094: LD_VAR 0 3
19098: PPUSH
19099: LD_INT 1
19101: PPUSH
19102: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19106: LD_INT 18
19108: PPUSH
19109: LD_VAR 0 3
19113: PPUSH
19114: LD_INT 1
19116: PPUSH
19117: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19121: LD_INT 60
19123: PPUSH
19124: LD_VAR 0 3
19128: PPUSH
19129: LD_INT 1
19131: PPUSH
19132: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19136: LD_INT 61
19138: PPUSH
19139: LD_VAR 0 3
19143: PPUSH
19144: LD_INT 1
19146: PPUSH
19147: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19151: LD_INT 32
19153: PPUSH
19154: LD_VAR 0 3
19158: PPUSH
19159: LD_INT 1
19161: PPUSH
19162: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19166: LD_INT 27
19168: PPUSH
19169: LD_VAR 0 3
19173: PPUSH
19174: LD_INT 1
19176: PPUSH
19177: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19181: LD_INT 36
19183: PPUSH
19184: LD_VAR 0 3
19188: PPUSH
19189: LD_INT 1
19191: PPUSH
19192: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19196: LD_INT 33
19198: PPUSH
19199: LD_VAR 0 3
19203: PPUSH
19204: LD_INT 1
19206: PPUSH
19207: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19211: LD_INT 9
19213: PPUSH
19214: LD_VAR 0 3
19218: PPUSH
19219: LD_INT 1
19221: PPUSH
19222: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19226: LD_INT 38
19228: PPUSH
19229: LD_VAR 0 3
19233: PPUSH
19234: LD_INT 1
19236: PPUSH
19237: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19241: LD_INT 57
19243: PPUSH
19244: LD_VAR 0 3
19248: PPUSH
19249: LD_INT 1
19251: PPUSH
19252: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19256: LD_INT 58
19258: PPUSH
19259: LD_VAR 0 3
19263: PPUSH
19264: LD_INT 1
19266: PPUSH
19267: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19271: LD_INT 28
19273: PPUSH
19274: LD_VAR 0 3
19278: PPUSH
19279: LD_INT 1
19281: PPUSH
19282: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19286: LD_INT 29
19288: PPUSH
19289: LD_VAR 0 3
19293: PPUSH
19294: LD_INT 1
19296: PPUSH
19297: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19301: LD_INT 30
19303: PPUSH
19304: LD_VAR 0 3
19308: PPUSH
19309: LD_INT 1
19311: PPUSH
19312: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19316: LD_INT 37
19318: PPUSH
19319: LD_VAR 0 3
19323: PPUSH
19324: LD_INT 1
19326: PPUSH
19327: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19331: LD_INT 63
19333: PPUSH
19334: LD_VAR 0 3
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19346: LD_INT 64
19348: PPUSH
19349: LD_VAR 0 3
19353: PPUSH
19354: LD_INT 1
19356: PPUSH
19357: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19361: LD_INT 3
19363: PPUSH
19364: LD_VAR 0 3
19368: PPUSH
19369: LD_INT 1
19371: PPUSH
19372: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19376: LD_INT 4
19378: PPUSH
19379: LD_VAR 0 3
19383: PPUSH
19384: LD_INT 1
19386: PPUSH
19387: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19391: LD_INT 5
19393: PPUSH
19394: LD_VAR 0 3
19398: PPUSH
19399: LD_INT 1
19401: PPUSH
19402: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19406: LD_INT 8
19408: PPUSH
19409: LD_VAR 0 3
19413: PPUSH
19414: LD_INT 1
19416: PPUSH
19417: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19421: LD_INT 66
19423: PPUSH
19424: LD_VAR 0 3
19428: PPUSH
19429: LD_INT 1
19431: PPUSH
19432: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19436: LD_INT 67
19438: PPUSH
19439: LD_VAR 0 3
19443: PPUSH
19444: LD_INT 1
19446: PPUSH
19447: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19451: LD_INT 21
19453: PPUSH
19454: LD_VAR 0 3
19458: PPUSH
19459: LD_INT 1
19461: PPUSH
19462: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19466: LD_INT 22
19468: PPUSH
19469: LD_VAR 0 3
19473: PPUSH
19474: LD_INT 1
19476: PPUSH
19477: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19481: LD_INT 19
19483: PPUSH
19484: LD_VAR 0 3
19488: PPUSH
19489: LD_INT 1
19491: PPUSH
19492: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19496: LD_INT 26
19498: PPUSH
19499: LD_VAR 0 3
19503: PPUSH
19504: LD_INT 1
19506: PPUSH
19507: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19511: LD_INT 54
19513: PPUSH
19514: LD_VAR 0 3
19518: PPUSH
19519: LD_INT 1
19521: PPUSH
19522: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19526: LD_INT 55
19528: PPUSH
19529: LD_VAR 0 3
19533: PPUSH
19534: LD_INT 1
19536: PPUSH
19537: CALL_OW 322
// for i = 0 to 39 do
19541: LD_ADDR_VAR 0 4
19545: PUSH
19546: DOUBLE
19547: LD_INT 0
19549: DEC
19550: ST_TO_ADDR
19551: LD_INT 39
19553: PUSH
19554: FOR_TO
19555: IFFALSE 19576
// SetRestrict ( i , side , true ) ;
19557: LD_VAR 0 4
19561: PPUSH
19562: LD_VAR 0 3
19566: PPUSH
19567: LD_INT 1
19569: PPUSH
19570: CALL_OW 324
19574: GO 19554
19576: POP
19577: POP
// end ; else
19578: GO 19655
19580: POP
// begin for i = 1 to 73 do
19581: LD_ADDR_VAR 0 4
19585: PUSH
19586: DOUBLE
19587: LD_INT 1
19589: DEC
19590: ST_TO_ADDR
19591: LD_INT 73
19593: PUSH
19594: FOR_TO
19595: IFFALSE 19616
// SetTech ( i , side , state_enabled ) ;
19597: LD_VAR 0 4
19601: PPUSH
19602: LD_VAR 0 3
19606: PPUSH
19607: LD_INT 1
19609: PPUSH
19610: CALL_OW 322
19614: GO 19594
19616: POP
19617: POP
// for i = 0 to 39 do
19618: LD_ADDR_VAR 0 4
19622: PUSH
19623: DOUBLE
19624: LD_INT 0
19626: DEC
19627: ST_TO_ADDR
19628: LD_INT 39
19630: PUSH
19631: FOR_TO
19632: IFFALSE 19653
// SetRestrict ( i , side , true ) ;
19634: LD_VAR 0 4
19638: PPUSH
19639: LD_VAR 0 3
19643: PPUSH
19644: LD_INT 1
19646: PPUSH
19647: CALL_OW 324
19651: GO 19631
19653: POP
19654: POP
// end ; end ; end ;
19655: GO 15660
19657: POP
19658: POP
// end ;
19659: LD_VAR 0 2
19663: RET
