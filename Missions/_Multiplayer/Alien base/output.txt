// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_siberit , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 39
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 18
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 16
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 21
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 17
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 372
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 39
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 3 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 3
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 167: LD_ADDR_EXP 18
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 6
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 6
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 0 , 0 , 3 ] ;
 245: LD_ADDR_EXP 19
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 21
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 323: LD_ADDR_EXP 17
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 372: LD_ADDR_EXP 20
 376: PUSH
 377: LD_EXP 16
 381: PUSH
 382: LD_INT 0
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: PUSH
 389: LD_INT 1
 391: GREATER
 392: ST_TO_ADDR
// if Multiplayer then
 393: LD_OWVAR 4
 397: IFFALSE 643
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 399: LD_ADDR_EXP 41
 403: PUSH
 404: LD_INT 0
 406: PPUSH
 407: CALL_OW 426
 411: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 412: LD_ADDR_EXP 42
 416: PUSH
 417: LD_INT 1
 419: PPUSH
 420: CALL_OW 426
 424: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 425: LD_ADDR_EXP 43
 429: PUSH
 430: LD_INT 2
 432: PPUSH
 433: CALL_OW 426
 437: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 438: LD_ADDR_EXP 44
 442: PUSH
 443: LD_INT 3
 445: PPUSH
 446: CALL_OW 426
 450: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 451: LD_ADDR_EXP 45
 455: PUSH
 456: LD_INT 4
 458: PPUSH
 459: CALL_OW 426
 463: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 464: LD_ADDR_EXP 46
 468: PUSH
 469: LD_INT 5
 471: PPUSH
 472: CALL_OW 426
 476: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 477: LD_ADDR_EXP 47
 481: PUSH
 482: LD_INT 6
 484: PPUSH
 485: CALL_OW 426
 489: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 490: LD_ADDR_EXP 48
 494: PUSH
 495: LD_INT 10
 497: PPUSH
 498: CALL_OW 426
 502: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 503: LD_ADDR_EXP 49
 507: PUSH
 508: LD_INT 11
 510: PPUSH
 511: CALL_OW 426
 515: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 516: LD_ADDR_EXP 50
 520: PUSH
 521: LD_INT 12
 523: PPUSH
 524: CALL_OW 426
 528: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 529: LD_ADDR_EXP 51
 533: PUSH
 534: LD_INT 13
 536: PPUSH
 537: CALL_OW 426
 541: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 542: LD_ADDR_EXP 52
 546: PUSH
 547: LD_INT 14
 549: PPUSH
 550: CALL_OW 426
 554: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 555: LD_ADDR_EXP 1
 559: PUSH
 560: LD_INT 15
 562: PPUSH
 563: CALL_OW 426
 567: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 568: LD_ADDR_EXP 2
 572: PUSH
 573: LD_INT 16
 575: PPUSH
 576: CALL_OW 426
 580: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 581: LD_ADDR_EXP 53
 585: PUSH
 586: LD_INT 17
 588: PPUSH
 589: CALL_OW 426
 593: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 594: LD_ADDR_EXP 54
 598: PUSH
 599: LD_INT 20
 601: PPUSH
 602: CALL_OW 426
 606: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 607: LD_ADDR_EXP 40
 611: PUSH
 612: LD_INT 21
 614: PPUSH
 615: CALL_OW 426
 619: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 620: LD_ADDR_VAR 0 3
 624: PUSH
 625: LD_INT 22
 627: PPUSH
 628: CALL_OW 426
 632: ST_TO_ADDR
// def_win_rules = 0 ;
 633: LD_ADDR_EXP 30
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// end else
 641: GO 799
// begin Randomize ;
 643: CALL_OW 10
// def_base_level := 2 ;
 647: LD_ADDR_EXP 41
 651: PUSH
 652: LD_INT 2
 654: ST_TO_ADDR
// def_amount_of_people := 11 ;
 655: LD_ADDR_EXP 42
 659: PUSH
 660: LD_INT 11
 662: ST_TO_ADDR
// def_skill_level := 1 ;
 663: LD_ADDR_EXP 43
 667: PUSH
 668: LD_INT 1
 670: ST_TO_ADDR
// def_starting_resources := 2 ;
 671: LD_ADDR_EXP 44
 675: PUSH
 676: LD_INT 2
 678: ST_TO_ADDR
// def_shipments_density := 50 ;
 679: LD_ADDR_EXP 45
 683: PUSH
 684: LD_INT 50
 686: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 687: LD_ADDR_EXP 46
 691: PUSH
 692: LD_INT 0
 694: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 695: LD_ADDR_EXP 47
 699: PUSH
 700: LD_INT 1
 702: ST_TO_ADDR
// def_shared_vision := 1 ;
 703: LD_ADDR_EXP 48
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// def_morale_flags := 1 ;
 711: LD_ADDR_EXP 49
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// def_siberite_detection := 1 ;
 719: LD_ADDR_EXP 50
 723: PUSH
 724: LD_INT 1
 726: ST_TO_ADDR
// def_people_respawning := 2 ;
 727: LD_ADDR_EXP 51
 731: PUSH
 732: LD_INT 2
 734: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 735: LD_ADDR_EXP 52
 739: PUSH
 740: LD_INT 3
 742: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 743: LD_ADDR_EXP 1
 747: PUSH
 748: LD_INT 0
 750: ST_TO_ADDR
// def_public_score := 0 ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: LD_INT 0
 758: ST_TO_ADDR
// def_siberite_bomb := 4 ;
 759: LD_ADDR_EXP 53
 763: PUSH
 764: LD_INT 4
 766: ST_TO_ADDR
// def_builduptime := 0 ;
 767: LD_ADDR_EXP 54
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// def_game_rules := 0 ;
 775: LD_ADDR_EXP 40
 779: PUSH
 780: LD_INT 0
 782: ST_TO_ADDR
// tech_level = 4 ;
 783: LD_ADDR_VAR 0 3
 787: PUSH
 788: LD_INT 4
 790: ST_TO_ADDR
// def_win_rules = 0 ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_INT 0
 798: ST_TO_ADDR
// end ; InitGameRules ;
 799: CALL 9377 0 0
// if def_game_rules = 0 then
 803: LD_EXP 40
 807: PUSH
 808: LD_INT 0
 810: EQUAL
 811: IFFALSE 862
// begin if isSGUI then
 813: LD_OWVAR 83
 817: IFFALSE 825
// setMpTechs ( ) else
 819: CALL 14194 0 0
 823: GO 862
// begin if Game_Type = 3 then
 825: LD_EXP 39
 829: PUSH
 830: LD_INT 3
 832: EQUAL
 833: IFFALSE 849
// tech_level = tech_level + 3 ;
 835: LD_ADDR_VAR 0 3
 839: PUSH
 840: LD_VAR 0 3
 844: PUSH
 845: LD_INT 3
 847: PLUS
 848: ST_TO_ADDR
// SetMpTechLevel ( tech_level + 1 ) ;
 849: LD_VAR 0 3
 853: PUSH
 854: LD_INT 1
 856: PLUS
 857: PPUSH
 858: CALL 14341 0 1
// end ; end ; if ( Game_Type = 5 ) then
 862: LD_EXP 39
 866: PUSH
 867: LD_INT 5
 869: EQUAL
 870: IFFALSE 899
// begin def_base_level := 1 ;
 872: LD_ADDR_EXP 41
 876: PUSH
 877: LD_INT 1
 879: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 880: LD_ADDR_EXP 46
 884: PUSH
 885: LD_INT 0
 887: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 888: LD_ADDR_EXP 47
 892: PUSH
 893: LD_INT 0
 895: ST_TO_ADDR
// disable ( 10 ) ;
 896: LD_INT 10
 898: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 899: LD_ADDR_EXP 3
 903: PUSH
 904: LD_INT 0
 906: PUSH
 907: LD_INT 1
 909: PUSH
 910: LD_INT 1
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: PUSH
 918: LD_EXP 41
 922: PUSH
 923: LD_INT 1
 925: PLUS
 926: ARRAY
 927: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 928: LD_ADDR_EXP 4
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 2
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: PUSH
 947: LD_EXP 41
 951: PUSH
 952: LD_INT 1
 954: PLUS
 955: ARRAY
 956: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 957: LD_ADDR_EXP 5
 961: PUSH
 962: LD_EXP 42
 966: PUSH
 967: LD_INT 4
 969: PLUS
 970: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
 971: LD_ADDR_EXP 9
 975: PUSH
 976: LD_INT 150
 978: PUSH
 979: LD_EXP 45
 983: PUSH
 984: LD_INT 1
 986: PLUS
 987: MINUS
 988: ST_TO_ADDR
// if def_people_respawning = 0 then
 989: LD_EXP 51
 993: PUSH
 994: LD_INT 0
 996: EQUAL
 997: IFFALSE 1017
// begin respawning_time_min = 0 ;
 999: LD_ADDR_EXP 12
1003: PUSH
1004: LD_INT 0
1006: ST_TO_ADDR
// respawning_time_max = 0 ;
1007: LD_ADDR_EXP 13
1011: PUSH
1012: LD_INT 0
1014: ST_TO_ADDR
// end else
1015: GO 1061
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1017: LD_ADDR_EXP 12
1021: PUSH
1022: LD_INT 10500
1024: PUSH
1025: LD_INT 5
1027: DIVREAL
1028: PUSH
1029: LD_INT 6
1031: PUSH
1032: LD_EXP 51
1036: MINUS
1037: MUL
1038: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1039: LD_ADDR_EXP 13
1043: PUSH
1044: LD_INT 31500
1046: PUSH
1047: LD_INT 5
1049: DIVREAL
1050: PUSH
1051: LD_INT 6
1053: PUSH
1054: LD_EXP 51
1058: MINUS
1059: MUL
1060: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1061: LD_EXP 52
1065: NOT
1066: IFFALSE 1078
// amount_of_apemen := 0 else
1068: LD_ADDR_EXP 14
1072: PUSH
1073: LD_INT 0
1075: ST_TO_ADDR
1076: GO 1088
// amount_of_apemen := def_amount_of_apemen ;
1078: LD_ADDR_EXP 14
1082: PUSH
1083: LD_EXP 52
1087: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1088: LD_EXP 53
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: IFFALSE 1108
// siberite_bomb_Delay = 0 else
1098: LD_ADDR_EXP 15
1102: PUSH
1103: LD_INT 0
1105: ST_TO_ADDR
1106: GO 1130
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1108: LD_ADDR_EXP 15
1112: PUSH
1113: LD_EXP 53
1117: PUSH
1118: LD_INT 1
1120: MINUS
1121: PUSH
1122: LD_INT 21000
1124: MUL
1125: PUSH
1126: LD_INT 1
1128: PLUS
1129: ST_TO_ADDR
// amount_of_siberit := [ 30 , 60 , 90 , 120 , 150 , 180 , 210 , 240 , 270 , 300 , 400 , 500 , 600 , 700 , 800 , 900 , 1000 , 1250 , 1500 , 1750 , 2000 , 2250 , 2500 , 2750 , 3000 , 3500 , 4000 , 4500 , 5000 , 6000 , 7000 , 8000 , 9000 , 10000 ] [ def_amount_of_siberit + 1 ] ;
1130: LD_ADDR_EXP 11
1134: PUSH
1135: LD_INT 30
1137: PUSH
1138: LD_INT 60
1140: PUSH
1141: LD_INT 90
1143: PUSH
1144: LD_INT 120
1146: PUSH
1147: LD_INT 150
1149: PUSH
1150: LD_INT 180
1152: PUSH
1153: LD_INT 210
1155: PUSH
1156: LD_INT 240
1158: PUSH
1159: LD_INT 270
1161: PUSH
1162: LD_INT 300
1164: PUSH
1165: LD_INT 400
1167: PUSH
1168: LD_INT 500
1170: PUSH
1171: LD_INT 600
1173: PUSH
1174: LD_INT 700
1176: PUSH
1177: LD_INT 800
1179: PUSH
1180: LD_INT 900
1182: PUSH
1183: LD_INT 1000
1185: PUSH
1186: LD_INT 1250
1188: PUSH
1189: LD_INT 1500
1191: PUSH
1192: LD_INT 1750
1194: PUSH
1195: LD_INT 2000
1197: PUSH
1198: LD_INT 2250
1200: PUSH
1201: LD_INT 2500
1203: PUSH
1204: LD_INT 2750
1206: PUSH
1207: LD_INT 3000
1209: PUSH
1210: LD_INT 3500
1212: PUSH
1213: LD_INT 4000
1215: PUSH
1216: LD_INT 4500
1218: PUSH
1219: LD_INT 5000
1221: PUSH
1222: LD_INT 6000
1224: PUSH
1225: LD_INT 7000
1227: PUSH
1228: LD_INT 8000
1230: PUSH
1231: LD_INT 9000
1233: PUSH
1234: LD_INT 10000
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: PUSH
1273: LD_EXP 1
1277: PUSH
1278: LD_INT 1
1280: PLUS
1281: ARRAY
1282: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1283: LD_ADDR_EXP 6
1287: PUSH
1288: LD_INT 2
1290: PUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 4
1296: PUSH
1297: LD_INT 5
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: PUSH
1306: LD_EXP 43
1310: PUSH
1311: LD_INT 1
1313: PLUS
1314: ARRAY
1315: ST_TO_ADDR
// if ( def_game_rules = 4 ) then
1316: LD_EXP 40
1320: PUSH
1321: LD_INT 4
1323: EQUAL
1324: IFFALSE 1347
// begin starting_resources := [ 10000 , 5000 , 1000 ] ;
1326: LD_ADDR_EXP 8
1330: PUSH
1331: LD_INT 10000
1333: PUSH
1334: LD_INT 5000
1336: PUSH
1337: LD_INT 1000
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// end else
1345: GO 1619
// if ( Game_Type = 5 ) then
1347: LD_EXP 39
1351: PUSH
1352: LD_INT 5
1354: EQUAL
1355: IFFALSE 1473
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1357: LD_ADDR_EXP 8
1361: PUSH
1362: LD_INT 1000
1364: PUSH
1365: LD_INT 100
1367: PUSH
1368: LD_INT 100
1370: PUSH
1371: EMPTY
1372: LIST
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 2000
1378: PUSH
1379: LD_INT 200
1381: PUSH
1382: LD_INT 200
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 5000
1392: PUSH
1393: LD_INT 500
1395: PUSH
1396: LD_INT 500
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 10000
1406: PUSH
1407: LD_INT 1000
1409: PUSH
1410: LD_INT 1000
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 25000
1420: PUSH
1421: LD_INT 2500
1423: PUSH
1424: LD_INT 2500
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 50000
1434: PUSH
1435: LD_INT 5000
1437: PUSH
1438: LD_INT 5000
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: PUSH
1454: LD_EXP 44
1458: PUSH
1459: LD_INT 1
1461: PLUS
1462: ARRAY
1463: ST_TO_ADDR
// starting_crates := [ ] ;
1464: LD_ADDR_EXP 7
1468: PUSH
1469: EMPTY
1470: ST_TO_ADDR
// end else
1471: GO 1619
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1473: LD_ADDR_EXP 8
1477: PUSH
1478: LD_INT 0
1480: PUSH
1481: LD_INT 0
1483: PUSH
1484: LD_INT 0
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 30
1494: PUSH
1495: LD_INT 0
1497: PUSH
1498: LD_INT 0
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 50
1508: PUSH
1509: LD_INT 20
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 80
1522: PUSH
1523: LD_INT 40
1525: PUSH
1526: LD_INT 20
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: PUSH
1540: LD_EXP 44
1544: PUSH
1545: LD_INT 1
1547: PLUS
1548: ARRAY
1549: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1550: LD_ADDR_EXP 7
1554: PUSH
1555: LD_INT 10
1557: PUSH
1558: EMPTY
1559: LIST
1560: PUSH
1561: LD_INT 7
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: LD_INT 6
1573: PUSH
1574: LD_INT 12
1576: PUSH
1577: LD_INT 18
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 5
1587: PUSH
1588: LD_INT 10
1590: PUSH
1591: LD_INT 15
1593: PUSH
1594: LD_INT 20
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_EXP 44
1613: PUSH
1614: LD_INT 1
1616: PLUS
1617: ARRAY
1618: ST_TO_ADDR
// end ; morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1619: LD_ADDR_EXP 10
1623: PUSH
1624: LD_INT 1
1626: NEG
1627: PUSH
1628: LD_INT 350
1630: PUSH
1631: LD_INT 700
1633: PUSH
1634: LD_INT 1400
1636: PUSH
1637: LD_INT 0
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: PUSH
1647: LD_EXP 49
1651: PUSH
1652: LD_INT 1
1654: PLUS
1655: ARRAY
1656: ST_TO_ADDR
// battle_flags_id := [ ] ;
1657: LD_ADDR_EXP 29
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// end ;
1664: LD_VAR 0 1
1668: RET
// function init_map ; var i , j ; begin
1669: LD_INT 0
1671: PPUSH
1672: PPUSH
1673: PPUSH
// normal_oil_deposits_locations := [ [ 28 , 22 ] , [ 69 , 3 ] , [ 138 , 27 ] , [ 180 , 104 ] , [ 138 , 137 ] , [ 76 , 115 ] ] ;
1674: LD_ADDR_EXP 25
1678: PUSH
1679: LD_INT 28
1681: PUSH
1682: LD_INT 22
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 69
1691: PUSH
1692: LD_INT 3
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: LD_INT 138
1701: PUSH
1702: LD_INT 27
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 180
1711: PUSH
1712: LD_INT 104
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 138
1721: PUSH
1722: LD_INT 137
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 76
1731: PUSH
1732: LD_INT 115
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 31 , 38 ] , [ 34 , 21 ] ] , [ [ 58 , 4 ] , [ 82 , 4 ] ] , [ [ 122 , 18 ] , [ 152 , 43 ] ] , [ [ 174 , 90 ] , [ 180 , 120 ] ] , [ [ 152 , 136 ] , [ 130 , 136 ] ] , [ [ 89 , 116 ] , [ 59 , 89 ] ] ] ;
1747: LD_ADDR_EXP 26
1751: PUSH
1752: LD_INT 31
1754: PUSH
1755: LD_INT 38
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PUSH
1762: LD_INT 34
1764: PUSH
1765: LD_INT 21
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 58
1778: PUSH
1779: LD_INT 4
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 82
1788: PUSH
1789: LD_INT 4
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 122
1802: PUSH
1803: LD_INT 18
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 152
1812: PUSH
1813: LD_INT 43
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 174
1826: PUSH
1827: LD_INT 90
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: LD_INT 180
1836: PUSH
1837: LD_INT 120
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 152
1850: PUSH
1851: LD_INT 136
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 130
1860: PUSH
1861: LD_INT 136
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 89
1874: PUSH
1875: LD_INT 116
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: LD_INT 59
1884: PUSH
1885: LD_INT 89
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 28 , 26 ] , [ 73 , 3 ] , [ 133 , 22 ] , [ 180 , 110 ] , [ 142 , 137 ] , [ 72 , 112 ] ] ;
1904: LD_ADDR_EXP 27
1908: PUSH
1909: LD_INT 28
1911: PUSH
1912: LD_INT 26
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 73
1921: PUSH
1922: LD_INT 3
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 133
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: LD_INT 180
1941: PUSH
1942: LD_INT 110
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 142
1951: PUSH
1952: LD_INT 137
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 72
1961: PUSH
1962: LD_INT 112
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 27 , 39 ] , [ 30 , 16 ] ] , [ [ 57 , 8 ] , [ 87 , 8 ] ] , [ [ 128 , 19 ] , [ 146 , 36 ] ] , [ [ 176 , 121 ] , [ 179 , 96 ] ] , [ [ 153 , 132 ] , [ 124 , 133 ] ] , [ [ 85 , 117 ] , [ 62 , 96 ] ] ] ;
1977: LD_ADDR_EXP 28
1981: PUSH
1982: LD_INT 27
1984: PUSH
1985: LD_INT 39
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 30
1994: PUSH
1995: LD_INT 16
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 57
2008: PUSH
2009: LD_INT 8
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 87
2018: PUSH
2019: LD_INT 8
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 128
2032: PUSH
2033: LD_INT 19
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: LD_INT 146
2042: PUSH
2043: LD_INT 36
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 176
2056: PUSH
2057: LD_INT 121
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 179
2066: PUSH
2067: LD_INT 96
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PUSH
2078: LD_INT 153
2080: PUSH
2081: LD_INT 132
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 124
2090: PUSH
2091: LD_INT 133
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: LD_INT 85
2104: PUSH
2105: LD_INT 117
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 62
2114: PUSH
2115: LD_INT 96
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: ST_TO_ADDR
// depot_def := [ [ 53 , 42 , 5 ] , [ 78 , 18 , 0 ] , [ 129 , 43 , 1 ] , [ 155 , 96 , 2 ] , [ 130 , 120 , 3 ] , [ 82 , 98 , 3 ] ] ;
2134: LD_ADDR_EXP 22
2138: PUSH
2139: LD_INT 53
2141: PUSH
2142: LD_INT 42
2144: PUSH
2145: LD_INT 5
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 78
2155: PUSH
2156: LD_INT 18
2158: PUSH
2159: LD_INT 0
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 129
2169: PUSH
2170: LD_INT 43
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 155
2183: PUSH
2184: LD_INT 96
2186: PUSH
2187: LD_INT 2
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 130
2197: PUSH
2198: LD_INT 120
2200: PUSH
2201: LD_INT 3
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 82
2211: PUSH
2212: LD_INT 98
2214: PUSH
2215: LD_INT 3
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: ST_TO_ADDR
// for i in depot_def do
2231: LD_ADDR_VAR 0 2
2235: PUSH
2236: LD_EXP 22
2240: PUSH
2241: FOR_IN
2242: IFFALSE 2316
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2244: LD_ADDR_EXP 24
2248: PUSH
2249: LD_EXP 24
2253: PUSH
2254: LD_VAR 0 2
2258: PUSH
2259: LD_INT 1
2261: ARRAY
2262: PPUSH
2263: LD_VAR 0 2
2267: PUSH
2268: LD_INT 3
2270: ARRAY
2271: PPUSH
2272: LD_INT 10
2274: PPUSH
2275: CALL_OW 272
2279: PUSH
2280: LD_VAR 0 2
2284: PUSH
2285: LD_INT 2
2287: ARRAY
2288: PPUSH
2289: LD_VAR 0 2
2293: PUSH
2294: LD_INT 3
2296: ARRAY
2297: PPUSH
2298: LD_INT 10
2300: PPUSH
2301: CALL_OW 273
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: ADD
2313: ST_TO_ADDR
2314: GO 2241
2316: POP
2317: POP
// breastworks_def := [ [ [ 65 , 53 , 5 ] , [ 65 , 40 , 4 ] ] , [ [ 76 , 28 , 0 ] , [ 89 , 28 , 5 ] ] , [ [ 115 , 41 , 1 ] , [ 128 , 54 , 0 ] ] , [ [ 143 , 82 , 2 ] , [ 143 , 95 , 1 ] ] , [ [ 131 , 108 , 3 ] , [ 118 , 108 , 2 ] ] , [ [ 80 , 85 , 3 ] , [ 92 , 97 , 4 ] ] ] ;
2318: LD_ADDR_EXP 23
2322: PUSH
2323: LD_INT 65
2325: PUSH
2326: LD_INT 53
2328: PUSH
2329: LD_INT 5
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 65
2339: PUSH
2340: LD_INT 40
2342: PUSH
2343: LD_INT 4
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: LD_INT 76
2357: PUSH
2358: LD_INT 28
2360: PUSH
2361: LD_INT 0
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: LIST
2368: PUSH
2369: LD_INT 89
2371: PUSH
2372: LD_INT 28
2374: PUSH
2375: LD_INT 5
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: LIST
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: PUSH
2387: LD_INT 115
2389: PUSH
2390: LD_INT 41
2392: PUSH
2393: LD_INT 1
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: LIST
2400: PUSH
2401: LD_INT 128
2403: PUSH
2404: LD_INT 54
2406: PUSH
2407: LD_INT 0
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 143
2421: PUSH
2422: LD_INT 82
2424: PUSH
2425: LD_INT 2
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 143
2435: PUSH
2436: LD_INT 95
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 131
2453: PUSH
2454: LD_INT 108
2456: PUSH
2457: LD_INT 3
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 118
2467: PUSH
2468: LD_INT 108
2470: PUSH
2471: LD_INT 2
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: PUSH
2483: LD_INT 80
2485: PUSH
2486: LD_INT 85
2488: PUSH
2489: LD_INT 3
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 92
2499: PUSH
2500: LD_INT 97
2502: PUSH
2503: LD_INT 4
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: ST_TO_ADDR
// for i = 1 to Side_Positions do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_EXP 18
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2669
// begin if not Side_Positions [ i ] then
2541: LD_EXP 18
2545: PUSH
2546: LD_VAR 0 2
2550: ARRAY
2551: NOT
2552: IFFALSE 2556
// continue ;
2554: GO 2538
// if def_extra_oil_deposits then
2556: LD_EXP 46
2560: IFFALSE 2618
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2562: LD_ADDR_VAR 0 3
2566: PUSH
2567: LD_EXP 26
2571: PUSH
2572: LD_EXP 18
2576: PUSH
2577: LD_VAR 0 2
2581: ARRAY
2582: ARRAY
2583: PUSH
2584: FOR_IN
2585: IFFALSE 2614
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2587: LD_VAR 0 3
2591: PUSH
2592: LD_INT 1
2594: ARRAY
2595: PPUSH
2596: LD_VAR 0 3
2600: PUSH
2601: LD_INT 2
2603: ARRAY
2604: PPUSH
2605: LD_INT 2
2607: PPUSH
2608: CALL_OW 62
2612: GO 2584
2614: POP
2615: POP
2616: GO 2667
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2618: LD_EXP 25
2622: PUSH
2623: LD_EXP 18
2627: PUSH
2628: LD_VAR 0 2
2632: ARRAY
2633: ARRAY
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: LD_EXP 25
2643: PUSH
2644: LD_EXP 18
2648: PUSH
2649: LD_VAR 0 2
2653: ARRAY
2654: ARRAY
2655: PUSH
2656: LD_INT 2
2658: ARRAY
2659: PPUSH
2660: LD_INT 2
2662: PPUSH
2663: CALL_OW 62
// end ;
2667: GO 2538
2669: POP
2670: POP
// if def_extra_sib_deposits then
2671: LD_EXP 47
2675: IFFALSE 2829
// for i = 1 to Side_Positions do
2677: LD_ADDR_VAR 0 2
2681: PUSH
2682: DOUBLE
2683: LD_INT 1
2685: DEC
2686: ST_TO_ADDR
2687: LD_EXP 18
2691: PUSH
2692: FOR_TO
2693: IFFALSE 2827
// begin if not Side_Positions [ i ] then
2695: LD_EXP 18
2699: PUSH
2700: LD_VAR 0 2
2704: ARRAY
2705: NOT
2706: IFFALSE 2710
// continue ;
2708: GO 2692
// if def_extra_sib_deposits = 2 then
2710: LD_EXP 47
2714: PUSH
2715: LD_INT 2
2717: EQUAL
2718: IFFALSE 2776
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2720: LD_ADDR_VAR 0 3
2724: PUSH
2725: LD_EXP 28
2729: PUSH
2730: LD_EXP 18
2734: PUSH
2735: LD_VAR 0 2
2739: ARRAY
2740: ARRAY
2741: PUSH
2742: FOR_IN
2743: IFFALSE 2772
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2745: LD_VAR 0 3
2749: PUSH
2750: LD_INT 1
2752: ARRAY
2753: PPUSH
2754: LD_VAR 0 3
2758: PUSH
2759: LD_INT 2
2761: ARRAY
2762: PPUSH
2763: LD_INT 3
2765: PPUSH
2766: CALL_OW 62
2770: GO 2742
2772: POP
2773: POP
2774: GO 2825
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2776: LD_EXP 27
2780: PUSH
2781: LD_EXP 18
2785: PUSH
2786: LD_VAR 0 2
2790: ARRAY
2791: ARRAY
2792: PUSH
2793: LD_INT 1
2795: ARRAY
2796: PPUSH
2797: LD_EXP 27
2801: PUSH
2802: LD_EXP 18
2806: PUSH
2807: LD_VAR 0 2
2811: ARRAY
2812: ARRAY
2813: PUSH
2814: LD_INT 2
2816: ARRAY
2817: PPUSH
2818: LD_INT 3
2820: PPUSH
2821: CALL_OW 62
// end ;
2825: GO 2692
2827: POP
2828: POP
// end ;
2829: LD_VAR 0 1
2833: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2834: LD_INT 0
2836: PPUSH
2837: PPUSH
2838: PPUSH
// if not Team_Game then
2839: LD_EXP 20
2843: NOT
2844: IFFALSE 2942
// begin for i = 1 to 8 do
2846: LD_ADDR_VAR 0 2
2850: PUSH
2851: DOUBLE
2852: LD_INT 1
2854: DEC
2855: ST_TO_ADDR
2856: LD_INT 8
2858: PUSH
2859: FOR_TO
2860: IFFALSE 2938
// for j = 1 to 8 do
2862: LD_ADDR_VAR 0 3
2866: PUSH
2867: DOUBLE
2868: LD_INT 1
2870: DEC
2871: ST_TO_ADDR
2872: LD_INT 8
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2934
// if i <> j then
2878: LD_VAR 0 2
2882: PUSH
2883: LD_VAR 0 3
2887: NONEQUAL
2888: IFFALSE 2912
// SetAttitude ( i , j , att_neutral , true ) else
2890: LD_VAR 0 2
2894: PPUSH
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: LD_INT 1
2905: PPUSH
2906: CALL_OW 80
2910: GO 2932
// SetAttitude ( i , j , att_friend , true ) ;
2912: LD_VAR 0 2
2916: PPUSH
2917: LD_VAR 0 3
2921: PPUSH
2922: LD_INT 1
2924: PPUSH
2925: LD_INT 1
2927: PPUSH
2928: CALL_OW 80
2932: GO 2875
2934: POP
2935: POP
2936: GO 2859
2938: POP
2939: POP
// end else
2940: GO 3117
// begin if def_shared_vision then
2942: LD_EXP 48
2946: IFFALSE 3011
// begin for i in Teams do
2948: LD_ADDR_VAR 0 2
2952: PUSH
2953: LD_EXP 17
2957: PUSH
2958: FOR_IN
2959: IFFALSE 3009
// for j = 2 to i do
2961: LD_ADDR_VAR 0 3
2965: PUSH
2966: DOUBLE
2967: LD_INT 2
2969: DEC
2970: ST_TO_ADDR
2971: LD_VAR 0 2
2975: PUSH
2976: FOR_TO
2977: IFFALSE 3005
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2979: LD_VAR 0 2
2983: PUSH
2984: LD_VAR 0 3
2988: ARRAY
2989: PPUSH
2990: LD_VAR 0 2
2994: PUSH
2995: LD_INT 1
2997: ARRAY
2998: PPUSH
2999: CALL_OW 343
3003: GO 2976
3005: POP
3006: POP
3007: GO 2958
3009: POP
3010: POP
// end ; for i = 1 to 8 do
3011: LD_ADDR_VAR 0 2
3015: PUSH
3016: DOUBLE
3017: LD_INT 1
3019: DEC
3020: ST_TO_ADDR
3021: LD_INT 8
3023: PUSH
3024: FOR_TO
3025: IFFALSE 3115
// for j = 1 to 8 do
3027: LD_ADDR_VAR 0 3
3031: PUSH
3032: DOUBLE
3033: LD_INT 1
3035: DEC
3036: ST_TO_ADDR
3037: LD_INT 8
3039: PUSH
3040: FOR_TO
3041: IFFALSE 3111
// if Side_Teams [ i ] = Side_Teams [ j ] then
3043: LD_EXP 16
3047: PUSH
3048: LD_VAR 0 2
3052: ARRAY
3053: PUSH
3054: LD_EXP 16
3058: PUSH
3059: LD_VAR 0 3
3063: ARRAY
3064: EQUAL
3065: IFFALSE 3089
// SetAttitude ( i , j , att_friend , true ) else
3067: LD_VAR 0 2
3071: PPUSH
3072: LD_VAR 0 3
3076: PPUSH
3077: LD_INT 1
3079: PPUSH
3080: LD_INT 1
3082: PPUSH
3083: CALL_OW 80
3087: GO 3109
// SetAttitude ( i , j , att_enemy , true ) ;
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_VAR 0 3
3098: PPUSH
3099: LD_INT 2
3101: PPUSH
3102: LD_INT 1
3104: PPUSH
3105: CALL_OW 80
3109: GO 3040
3111: POP
3112: POP
3113: GO 3024
3115: POP
3116: POP
// end ; end ;
3117: LD_VAR 0 1
3121: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3122: LD_INT 0
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
// result := [ ] ;
3128: LD_ADDR_VAR 0 7
3132: PUSH
3133: EMPTY
3134: ST_TO_ADDR
// for i := 1 to count do
3135: LD_ADDR_VAR 0 8
3139: PUSH
3140: DOUBLE
3141: LD_INT 1
3143: DEC
3144: ST_TO_ADDR
3145: LD_VAR 0 1
3149: PUSH
3150: FOR_TO
3151: IFFALSE 3569
// begin uc_direction := Rand ( 0 , 5 ) ;
3153: LD_ADDR_OWVAR 24
3157: PUSH
3158: LD_INT 0
3160: PPUSH
3161: LD_INT 5
3163: PPUSH
3164: CALL_OW 12
3168: ST_TO_ADDR
// if commander then
3169: LD_LOC 1
3173: IFFALSE 3282
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3175: LD_ADDR_OWVAR 26
3179: PUSH
3180: LD_OWVAR 19
3184: PUSH
3185: LD_OWVAR 20
3189: ARRAY
3190: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3191: LD_INT 1
3193: PPUSH
3194: LD_INT 2
3196: PPUSH
3197: CALL_OW 12
3201: PPUSH
3202: LD_VAR 0 2
3206: PPUSH
3207: LD_EXP 6
3211: PUSH
3212: LD_INT 2
3214: PLUS
3215: PPUSH
3216: CALL_OW 380
// hc_importance := 105 ;
3220: LD_ADDR_OWVAR 32
3224: PUSH
3225: LD_INT 105
3227: ST_TO_ADDR
// commander := false ;
3228: LD_ADDR_LOC 1
3232: PUSH
3233: LD_INT 0
3235: ST_TO_ADDR
// if Multiplayer then
3236: LD_OWVAR 4
3240: IFFALSE 3280
// begin hc_gallery := MULTIAVATARS ;
3242: LD_ADDR_OWVAR 33
3246: PUSH
3247: LD_STRING MULTIAVATARS
3249: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3250: LD_ADDR_OWVAR 34
3254: PUSH
3255: LD_OWVAR 20
3259: PPUSH
3260: CALL_OW 525
3264: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3265: LD_ADDR_OWVAR 27
3269: PUSH
3270: LD_OWVAR 20
3274: PPUSH
3275: CALL_OW 526
3279: ST_TO_ADDR
// end ; end else
3280: GO 3345
// begin hc_name :=  ;
3282: LD_ADDR_OWVAR 26
3286: PUSH
3287: LD_STRING 
3289: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 2
3295: PPUSH
3296: CALL_OW 12
3300: PPUSH
3301: LD_VAR 0 2
3305: PPUSH
3306: LD_EXP 6
3310: PPUSH
3311: CALL_OW 380
// hc_importance := 0 ;
3315: LD_ADDR_OWVAR 32
3319: PUSH
3320: LD_INT 0
3322: ST_TO_ADDR
// if Multiplayer then
3323: LD_OWVAR 4
3327: IFFALSE 3345
// begin hc_gallery :=  ;
3329: LD_ADDR_OWVAR 33
3333: PUSH
3334: LD_STRING 
3336: ST_TO_ADDR
// hc_face_number := 0 ;
3337: LD_ADDR_OWVAR 34
3341: PUSH
3342: LD_INT 0
3344: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3345: LD_ADDR_VAR 0 10
3349: PUSH
3350: CALL_OW 44
3354: ST_TO_ADDR
// if global_defined then
3355: LD_LOC 3
3359: IFFALSE 3499
// begin if ( cl = class_soldier ) then
3361: LD_VAR 0 2
3365: PUSH
3366: LD_INT 1
3368: EQUAL
3369: IFFALSE 3389
// j := i + soldiers_created else
3371: LD_ADDR_VAR 0 9
3375: PUSH
3376: LD_VAR 0 8
3380: PUSH
3381: LD_LOC 4
3385: PLUS
3386: ST_TO_ADDR
3387: GO 3399
// j := i ;
3389: LD_ADDR_VAR 0 9
3393: PUSH
3394: LD_VAR 0 8
3398: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3399: LD_LOC 2
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: PUSH
3410: LD_VAR 0 9
3414: ARRAY
3415: PPUSH
3416: LD_VAR 0 10
3420: PPUSH
3421: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3425: LD_VAR 0 10
3429: PPUSH
3430: LD_INT 2
3432: PPUSH
3433: LD_LOC 2
3437: PUSH
3438: LD_VAR 0 2
3442: ARRAY
3443: PUSH
3444: LD_VAR 0 9
3448: ARRAY
3449: PPUSH
3450: LD_INT 2
3452: PPUSH
3453: CALL_OW 260
3457: PPUSH
3458: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3462: LD_VAR 0 10
3466: PPUSH
3467: LD_INT 1
3469: PPUSH
3470: LD_LOC 2
3474: PUSH
3475: LD_VAR 0 2
3479: ARRAY
3480: PUSH
3481: LD_VAR 0 9
3485: ARRAY
3486: PPUSH
3487: LD_INT 1
3489: PPUSH
3490: CALL_OW 260
3494: PPUSH
3495: CALL_OW 239
// end ; if building then
3499: LD_VAR 0 6
3503: IFFALSE 3521
// PlaceHumanInUnit ( un , building ) else
3505: LD_VAR 0 10
3509: PPUSH
3510: LD_VAR 0 6
3514: PPUSH
3515: CALL_OW 52
3519: GO 3548
// PlaceUnitXYR ( un , x , y , r , false ) ;
3521: LD_VAR 0 10
3525: PPUSH
3526: LD_VAR 0 3
3530: PPUSH
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_VAR 0 5
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 50
// result := result ^ [ un ] ;
3548: LD_ADDR_VAR 0 7
3552: PUSH
3553: LD_VAR 0 7
3557: PUSH
3558: LD_VAR 0 10
3562: PUSH
3563: EMPTY
3564: LIST
3565: ADD
3566: ST_TO_ADDR
// end ;
3567: GO 3150
3569: POP
3570: POP
// if not global_defined then
3571: LD_LOC 3
3575: NOT
3576: IFFALSE 3654
// if ( global_units >= cl ) then
3578: LD_LOC 2
3582: PUSH
3583: LD_VAR 0 2
3587: GREATEREQUAL
3588: IFFALSE 3629
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3590: LD_ADDR_LOC 2
3594: PUSH
3595: LD_LOC 2
3599: PPUSH
3600: LD_VAR 0 2
3604: PPUSH
3605: LD_LOC 2
3609: PUSH
3610: LD_VAR 0 2
3614: ARRAY
3615: PUSH
3616: LD_VAR 0 7
3620: ADD
3621: PPUSH
3622: CALL_OW 1
3626: ST_TO_ADDR
3627: GO 3654
// global_units := Replace ( global_units , cl , result ) ;
3629: LD_ADDR_LOC 2
3633: PUSH
3634: LD_LOC 2
3638: PPUSH
3639: LD_VAR 0 2
3643: PPUSH
3644: LD_VAR 0 7
3648: PPUSH
3649: CALL_OW 1
3653: ST_TO_ADDR
// if commander then
3654: LD_LOC 1
3658: IFFALSE 3705
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3660: LD_ADDR_EXP 31
3664: PUSH
3665: LD_EXP 31
3669: PPUSH
3670: LD_OWVAR 20
3674: PPUSH
3675: LD_EXP 31
3679: PUSH
3680: LD_OWVAR 20
3684: ARRAY
3685: PUSH
3686: LD_VAR 0 10
3690: ADD
3691: PPUSH
3692: CALL_OW 1
3696: ST_TO_ADDR
// commander := false ;
3697: LD_ADDR_LOC 1
3701: PUSH
3702: LD_INT 0
3704: ST_TO_ADDR
// end ; end ;
3705: LD_VAR 0 7
3709: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3710: LD_INT 0
3712: PPUSH
3713: PPUSH
3714: PPUSH
3715: PPUSH
3716: PPUSH
3717: PPUSH
3718: PPUSH
3719: PPUSH
3720: PPUSH
// if side in [ 0 , 9 ] then
3721: LD_VAR 0 1
3725: PUSH
3726: LD_INT 0
3728: PUSH
3729: LD_INT 9
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: IN
3736: IFFALSE 3740
// exit ;
3738: GO 4790
// pos := Side_Positions [ side ] ;
3740: LD_ADDR_VAR 0 3
3744: PUSH
3745: LD_EXP 18
3749: PUSH
3750: LD_VAR 0 1
3754: ARRAY
3755: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3756: LD_ADDR_OWVAR 21
3760: PUSH
3761: LD_EXP 19
3765: PUSH
3766: LD_VAR 0 1
3770: ARRAY
3771: ST_TO_ADDR
// uc_side := side ;
3772: LD_ADDR_OWVAR 20
3776: PUSH
3777: LD_VAR 0 1
3781: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3782: LD_ADDR_VAR 0 4
3786: PUSH
3787: LD_EXP 22
3791: PUSH
3792: LD_VAR 0 3
3796: ARRAY
3797: PUSH
3798: LD_INT 1
3800: ARRAY
3801: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3802: LD_ADDR_VAR 0 5
3806: PUSH
3807: LD_EXP 22
3811: PUSH
3812: LD_VAR 0 3
3816: ARRAY
3817: PUSH
3818: LD_INT 2
3820: ARRAY
3821: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3822: LD_ADDR_VAR 0 6
3826: PUSH
3827: LD_EXP 22
3831: PUSH
3832: LD_VAR 0 3
3836: ARRAY
3837: PUSH
3838: LD_INT 3
3840: ARRAY
3841: ST_TO_ADDR
// if is_depot then
3842: LD_EXP 3
3846: IFFALSE 3979
// begin bc_type = b_depot ;
3848: LD_ADDR_OWVAR 42
3852: PUSH
3853: LD_INT 0
3855: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3856: LD_ADDR_VAR 0 10
3860: PUSH
3861: LD_VAR 0 4
3865: PPUSH
3866: LD_VAR 0 5
3870: PPUSH
3871: LD_VAR 0 6
3875: PPUSH
3876: CALL_OW 47
3880: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3881: LD_VAR 0 10
3885: PPUSH
3886: LD_STRING @
3888: PUSH
3889: LD_VAR 0 1
3893: STR
3894: PPUSH
3895: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3899: LD_VAR 0 10
3903: PPUSH
3904: CALL_OW 274
3908: PPUSH
3909: LD_INT 1
3911: PPUSH
3912: LD_EXP 8
3916: PUSH
3917: LD_INT 1
3919: ARRAY
3920: PPUSH
3921: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3925: LD_VAR 0 10
3929: PPUSH
3930: CALL_OW 274
3934: PPUSH
3935: LD_INT 2
3937: PPUSH
3938: LD_EXP 8
3942: PUSH
3943: LD_INT 2
3945: ARRAY
3946: PPUSH
3947: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3951: LD_VAR 0 10
3955: PPUSH
3956: CALL_OW 274
3960: PPUSH
3961: LD_INT 3
3963: PPUSH
3964: LD_EXP 8
3968: PUSH
3969: LD_INT 3
3971: ARRAY
3972: PPUSH
3973: CALL_OW 277
// end else
3977: GO 4123
// begin for i := 1 to 3 do
3979: LD_ADDR_VAR 0 7
3983: PUSH
3984: DOUBLE
3985: LD_INT 1
3987: DEC
3988: ST_TO_ADDR
3989: LD_INT 3
3991: PUSH
3992: FOR_TO
3993: IFFALSE 4121
// begin r := starting_resources [ i ] ;
3995: LD_ADDR_VAR 0 8
3999: PUSH
4000: LD_EXP 8
4004: PUSH
4005: LD_VAR 0 7
4009: ARRAY
4010: ST_TO_ADDR
// while r >= 10 do
4011: LD_VAR 0 8
4015: PUSH
4016: LD_INT 10
4018: GREATEREQUAL
4019: IFFALSE 4119
// if r > 50 then
4021: LD_VAR 0 8
4025: PUSH
4026: LD_INT 50
4028: GREATER
4029: IFFALSE 4075
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4031: LD_VAR 0 7
4035: PPUSH
4036: LD_INT 5
4038: PPUSH
4039: LD_VAR 0 4
4043: PPUSH
4044: LD_VAR 0 5
4048: PPUSH
4049: LD_INT 4
4051: PPUSH
4052: LD_INT 0
4054: PPUSH
4055: CALL_OW 60
// r := r - 50 ;
4059: LD_ADDR_VAR 0 8
4063: PUSH
4064: LD_VAR 0 8
4068: PUSH
4069: LD_INT 50
4071: MINUS
4072: ST_TO_ADDR
// end else
4073: GO 4117
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4075: LD_VAR 0 7
4079: PPUSH
4080: LD_VAR 0 8
4084: PUSH
4085: LD_INT 10
4087: DIV
4088: PPUSH
4089: LD_VAR 0 4
4093: PPUSH
4094: LD_VAR 0 5
4098: PPUSH
4099: LD_INT 4
4101: PPUSH
4102: LD_INT 0
4104: PPUSH
4105: CALL_OW 60
// r := 0 ;
4109: LD_ADDR_VAR 0 8
4113: PUSH
4114: LD_INT 0
4116: ST_TO_ADDR
// end ;
4117: GO 4011
// end ;
4119: GO 3992
4121: POP
4122: POP
// end ; for r in starting_crates do
4123: LD_ADDR_VAR 0 8
4127: PUSH
4128: LD_EXP 7
4132: PUSH
4133: FOR_IN
4134: IFFALSE 4166
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4136: LD_INT 1
4138: PPUSH
4139: LD_INT 5
4141: PPUSH
4142: LD_VAR 0 4
4146: PPUSH
4147: LD_VAR 0 5
4151: PPUSH
4152: LD_VAR 0 8
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 60
4164: GO 4133
4166: POP
4167: POP
// if def_morale_flags then
4168: LD_EXP 49
4172: IFFALSE 4311
// begin x := start_def [ pos ] [ 1 ] ;
4174: LD_ADDR_VAR 0 4
4178: PUSH
4179: LD_EXP 24
4183: PUSH
4184: LD_VAR 0 3
4188: ARRAY
4189: PUSH
4190: LD_INT 1
4192: ARRAY
4193: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4194: LD_ADDR_VAR 0 5
4198: PUSH
4199: LD_EXP 24
4203: PUSH
4204: LD_VAR 0 3
4208: ARRAY
4209: PUSH
4210: LD_INT 2
4212: ARRAY
4213: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4214: LD_VAR 0 4
4218: PPUSH
4219: LD_VAR 0 5
4223: PPUSH
4224: LD_INT 12
4226: PPUSH
4227: LD_INT 2
4229: PPUSH
4230: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4234: LD_ADDR_EXP 29
4238: PUSH
4239: LD_EXP 29
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_VAR 0 4
4253: PPUSH
4254: LD_VAR 0 5
4258: PPUSH
4259: LD_INT 1
4261: PUSH
4262: LD_INT 100
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: LD_INT 2
4271: PUSH
4272: LD_INT 50
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PUSH
4279: LD_INT 3
4281: PUSH
4282: LD_INT 20
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: PUSH
4289: LD_INT 20
4291: PUSH
4292: LD_INT 100
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: PPUSH
4305: CALL_OW 418
4309: ADD
4310: ST_TO_ADDR
// end ; commander := true ;
4311: LD_ADDR_LOC 1
4315: PUSH
4316: LD_INT 1
4318: ST_TO_ADDR
// soldiers_created := 0 ;
4319: LD_ADDR_LOC 4
4323: PUSH
4324: LD_INT 0
4326: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4327: LD_ADDR_VAR 0 7
4331: PUSH
4332: DOUBLE
4333: LD_INT 1
4335: DEC
4336: ST_TO_ADDR
4337: LD_EXP 4
4341: PUSH
4342: FOR_TO
4343: IFFALSE 4496
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4345: LD_ADDR_VAR 0 4
4349: PUSH
4350: LD_EXP 23
4354: PUSH
4355: LD_VAR 0 3
4359: ARRAY
4360: PUSH
4361: LD_VAR 0 7
4365: ARRAY
4366: PUSH
4367: LD_INT 1
4369: ARRAY
4370: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4371: LD_ADDR_VAR 0 5
4375: PUSH
4376: LD_EXP 23
4380: PUSH
4381: LD_VAR 0 3
4385: ARRAY
4386: PUSH
4387: LD_VAR 0 7
4391: ARRAY
4392: PUSH
4393: LD_INT 2
4395: ARRAY
4396: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4397: LD_ADDR_VAR 0 6
4401: PUSH
4402: LD_EXP 23
4406: PUSH
4407: LD_VAR 0 3
4411: ARRAY
4412: PUSH
4413: LD_VAR 0 7
4417: ARRAY
4418: PUSH
4419: LD_INT 3
4421: ARRAY
4422: ST_TO_ADDR
// bc_type := b_breastwork ;
4423: LD_ADDR_OWVAR 42
4427: PUSH
4428: LD_INT 31
4430: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4431: LD_ADDR_VAR 0 9
4435: PUSH
4436: LD_VAR 0 4
4440: PPUSH
4441: LD_VAR 0 5
4445: PPUSH
4446: LD_VAR 0 6
4450: PPUSH
4451: CALL_OW 47
4455: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4456: LD_INT 1
4458: PPUSH
4459: LD_INT 1
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: LD_VAR 0 9
4475: PPUSH
4476: CALL 3122 0 6
// soldiers_created := soldiers_created + 1 ;
4480: LD_ADDR_LOC 4
4484: PUSH
4485: LD_LOC 4
4489: PUSH
4490: LD_INT 1
4492: PLUS
4493: ST_TO_ADDR
// end ;
4494: GO 4342
4496: POP
4497: POP
// x := start_def [ pos ] [ 1 ] ;
4498: LD_ADDR_VAR 0 4
4502: PUSH
4503: LD_EXP 24
4507: PUSH
4508: LD_VAR 0 3
4512: ARRAY
4513: PUSH
4514: LD_INT 1
4516: ARRAY
4517: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4518: LD_ADDR_VAR 0 5
4522: PUSH
4523: LD_EXP 24
4527: PUSH
4528: LD_VAR 0 3
4532: ARRAY
4533: PUSH
4534: LD_INT 2
4536: ARRAY
4537: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4538: LD_LOC 8
4542: PUSH
4543: LD_EXP 4
4547: MINUS
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: LD_VAR 0 4
4556: PPUSH
4557: LD_VAR 0 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT 0
4567: PPUSH
4568: CALL 3122 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4572: LD_LOC 5
4576: PPUSH
4577: LD_INT 2
4579: PPUSH
4580: LD_VAR 0 4
4584: PPUSH
4585: LD_VAR 0 5
4589: PPUSH
4590: LD_INT 5
4592: PPUSH
4593: LD_INT 0
4595: PPUSH
4596: CALL 3122 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4600: LD_LOC 7
4604: PPUSH
4605: LD_INT 3
4607: PPUSH
4608: LD_VAR 0 4
4612: PPUSH
4613: LD_VAR 0 5
4617: PPUSH
4618: LD_INT 5
4620: PPUSH
4621: LD_INT 0
4623: PPUSH
4624: CALL 3122 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4628: LD_LOC 6
4632: PPUSH
4633: LD_INT 4
4635: PPUSH
4636: LD_VAR 0 4
4640: PPUSH
4641: LD_VAR 0 5
4645: PPUSH
4646: LD_INT 5
4648: PPUSH
4649: LD_INT 0
4651: PPUSH
4652: CALL 3122 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4656: LD_EXP 50
4660: PUSH
4661: LD_INT 20
4663: PPUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: CALL_OW 321
4673: PUSH
4674: LD_INT 1
4676: EQUAL
4677: AND
4678: IFFALSE 4695
// SetTech ( tech_SibDet , side , state_researched ) ;
4680: LD_INT 20
4682: PPUSH
4683: LD_VAR 0 1
4687: PPUSH
4688: LD_INT 2
4690: PPUSH
4691: CALL_OW 322
// if def_siberite_bomb = 1 then
4695: LD_EXP 53
4699: PUSH
4700: LD_INT 1
4702: EQUAL
4703: IFFALSE 4737
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4705: LD_INT 25
4707: PPUSH
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_INT 1
4715: PPUSH
4716: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4720: LD_INT 73
4722: PPUSH
4723: LD_VAR 0 1
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 322
// end else
4735: GO 4767
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4737: LD_INT 25
4739: PPUSH
4740: LD_VAR 0 1
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4752: LD_INT 73
4754: PPUSH
4755: LD_VAR 0 1
4759: PPUSH
4760: LD_INT 0
4762: PPUSH
4763: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4767: LD_INT 24
4769: PPUSH
4770: LD_VAR 0 1
4774: PPUSH
4775: LD_INT 0
4777: PPUSH
4778: CALL_OW 322
// global_defined := true ;
4782: LD_ADDR_LOC 3
4786: PUSH
4787: LD_INT 1
4789: ST_TO_ADDR
// end ;
4790: LD_VAR 0 2
4794: RET
// every 0 0$1 do
4795: GO 4797
4797: DISABLE
// if ( def_siberite_bomb > 1 ) then
4798: LD_EXP 53
4802: PUSH
4803: LD_INT 1
4805: GREATER
4806: IFFALSE 4821
// begin wait ( siberite_bomb_Delay ) ;
4808: LD_EXP 15
4812: PPUSH
4813: CALL_OW 67
// EnableSibFiss ;
4817: CALL 4822 0 0
// end ;
4821: END
// function EnableSibFiss ; var i ; begin
4822: LD_INT 0
4824: PPUSH
4825: PPUSH
// for i := 1 to 8 do
4826: LD_ADDR_VAR 0 2
4830: PUSH
4831: DOUBLE
4832: LD_INT 1
4834: DEC
4835: ST_TO_ADDR
4836: LD_INT 8
4838: PUSH
4839: FOR_TO
4840: IFFALSE 4886
// if Side_Positions [ i ] then
4842: LD_EXP 18
4846: PUSH
4847: LD_VAR 0 2
4851: ARRAY
4852: IFFALSE 4884
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4854: LD_INT 25
4856: PPUSH
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_INT 1
4864: PPUSH
4865: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4869: LD_INT 73
4871: PPUSH
4872: LD_VAR 0 2
4876: PPUSH
4877: LD_INT 1
4879: PPUSH
4880: CALL_OW 322
// end ;
4884: GO 4839
4886: POP
4887: POP
// end ;
4888: LD_VAR 0 1
4892: RET
// function prepare_sides ; var i ; begin
4893: LD_INT 0
4895: PPUSH
4896: PPUSH
// global_units := [ ] ;
4897: LD_ADDR_LOC 2
4901: PUSH
4902: EMPTY
4903: ST_TO_ADDR
// global_defined := false ;
4904: LD_ADDR_LOC 3
4908: PUSH
4909: LD_INT 0
4911: ST_TO_ADDR
// CountClassMembers ;
4912: CALL 4962 0 0
// for i := 1 to 8 do
4916: LD_ADDR_VAR 0 2
4920: PUSH
4921: DOUBLE
4922: LD_INT 1
4924: DEC
4925: ST_TO_ADDR
4926: LD_INT 8
4928: PUSH
4929: FOR_TO
4930: IFFALSE 4955
// if Side_Positions [ i ] then
4932: LD_EXP 18
4936: PUSH
4937: LD_VAR 0 2
4941: ARRAY
4942: IFFALSE 4953
// prepare_side ( i ) ;
4944: LD_VAR 0 2
4948: PPUSH
4949: CALL 3710 0 1
4953: GO 4929
4955: POP
4956: POP
// end ;
4957: LD_VAR 0 1
4961: RET
// function CountClassMembers ; var Mode ; begin
4962: LD_INT 0
4964: PPUSH
4965: PPUSH
// if No_Mechs then
4966: LD_EXP 55
4970: IFFALSE 4982
// Mode := 2 else
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: LD_INT 2
4979: ST_TO_ADDR
4980: GO 4990
// Mode := 1 ;
4982: LD_ADDR_VAR 0 2
4986: PUSH
4987: LD_INT 1
4989: ST_TO_ADDR
// neng := number_of_people ;
4990: LD_ADDR_LOC 5
4994: PUSH
4995: LD_EXP 5
4999: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5000: LD_ADDR_LOC 8
5004: PUSH
5005: LD_LOC 5
5009: PUSH
5010: LD_INT 4
5012: PUSH
5013: LD_INT 3
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_VAR 0 2
5024: ARRAY
5025: DIV
5026: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5027: LD_LOC 8
5031: PUSH
5032: LD_EXP 4
5036: LESS
5037: IFFALSE 5049
// nsol := number_of_breastworks ;
5039: LD_ADDR_LOC 8
5043: PUSH
5044: LD_EXP 4
5048: ST_TO_ADDR
// neng := neng - nsol ;
5049: LD_ADDR_LOC 5
5053: PUSH
5054: LD_LOC 5
5058: PUSH
5059: LD_LOC 8
5063: MINUS
5064: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5065: LD_ADDR_LOC 6
5069: PUSH
5070: LD_LOC 5
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: LD_INT 2
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: PUSH
5085: LD_VAR 0 2
5089: ARRAY
5090: DIV
5091: ST_TO_ADDR
// if ( nsci < 1 ) then
5092: LD_LOC 6
5096: PUSH
5097: LD_INT 1
5099: LESS
5100: IFFALSE 5110
// nsci := 1 ;
5102: LD_ADDR_LOC 6
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// neng := neng - nsci ;
5110: LD_ADDR_LOC 5
5114: PUSH
5115: LD_LOC 5
5119: PUSH
5120: LD_LOC 6
5124: MINUS
5125: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5126: LD_ADDR_LOC 7
5130: PUSH
5131: LD_LOC 5
5135: PUSH
5136: LD_INT 2
5138: DIV
5139: PUSH
5140: LD_INT 0
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: LD_VAR 0 2
5151: ARRAY
5152: ST_TO_ADDR
// neng := neng - nmech ;
5153: LD_ADDR_LOC 5
5157: PUSH
5158: LD_LOC 5
5162: PUSH
5163: LD_LOC 7
5167: MINUS
5168: ST_TO_ADDR
// if ( neng < 1 ) then
5169: LD_LOC 5
5173: PUSH
5174: LD_INT 1
5176: LESS
5177: IFFALSE 5187
// neng := 1 ;
5179: LD_ADDR_LOC 5
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ;
5187: LD_VAR 0 1
5191: RET
// starting begin disable ( 98 ) ;
5192: LD_INT 98
5194: DISABLE_MARKED
// disable ( 99 ) ;
5195: LD_INT 99
5197: DISABLE_MARKED
// disable ( 100 ) ;
5198: LD_INT 100
5200: DISABLE_MARKED
// disable ( 200 ) ;
5201: LD_INT 200
5203: DISABLE_MARKED
// disable ( 400 ) ;
5204: LD_INT 400
5206: DISABLE_MARKED
// disable ( 401 ) ;
5207: LD_INT 401
5209: DISABLE_MARKED
// disable ( 600 ) ;
5210: LD_INT 600
5212: DISABLE_MARKED
// mp_selectmsg := true ;
5213: LD_ADDR_OWVAR 13
5217: PUSH
5218: LD_INT 1
5220: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5221: CALL 68 0 0
// init_map ;
5225: CALL 1669 0 0
// set_shared_visions_and_alliances ;
5229: CALL 2834 0 0
// ResetFog ;
5233: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5237: LD_OWVAR 2
5241: PPUSH
5242: CALL_OW 520
// AnimateTrees ( true ) ;
5246: LD_INT 1
5248: PPUSH
5249: CALL_OW 573
// prepare_sides ;
5253: CALL 4893 0 0
// init_respawning ;
5257: CALL 18918 0 0
// Init_Win_Condition ;
5261: CALL 12899 0 0
// InitLimits ;
5265: CALL 11488 0 0
// ShowTimer ;
5269: CALL 12425 0 0
// case Game_Type of 3 :
5273: LD_EXP 39
5277: PUSH
5278: LD_INT 3
5280: DOUBLE
5281: EQUAL
5282: IFTRUE 5286
5284: GO 5292
5286: POP
// enable ( 100 ) ; 4 :
5287: LD_INT 100
5289: ENABLE_MARKED
5290: GO 5308
5292: LD_INT 4
5294: DOUBLE
5295: EQUAL
5296: IFTRUE 5300
5298: GO 5307
5300: POP
// InitBloodGods ; end ;
5301: CALL 9051 0 0
5305: GO 5308
5307: POP
// music_nat := Side_Nations [ your_side ] ;
5308: LD_ADDR_OWVAR 71
5312: PUSH
5313: LD_EXP 19
5317: PUSH
5318: LD_OWVAR 2
5322: ARRAY
5323: ST_TO_ADDR
// if IAmSpec then
5324: CALL_OW 531
5328: IFFALSE 5352
// begin fogOff ( true ) ;
5330: LD_INT 1
5332: PPUSH
5333: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
5337: LD_INT 104
5339: PPUSH
5340: LD_INT 69
5342: PPUSH
5343: CALL_OW 86
// enable ( 400 ) ;
5347: LD_INT 400
5349: ENABLE_MARKED
// end else
5350: GO 5398
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5352: LD_EXP 24
5356: PUSH
5357: LD_EXP 18
5361: PUSH
5362: LD_OWVAR 2
5366: ARRAY
5367: ARRAY
5368: PUSH
5369: LD_INT 1
5371: ARRAY
5372: PPUSH
5373: LD_EXP 24
5377: PUSH
5378: LD_EXP 18
5382: PUSH
5383: LD_OWVAR 2
5387: ARRAY
5388: ARRAY
5389: PUSH
5390: LD_INT 2
5392: ARRAY
5393: PPUSH
5394: CALL_OW 86
// end ; InitApeman ;
5398: CALL 6159 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5402: LD_ADDR_EXP 58
5406: PUSH
5407: LD_INT 8
5409: PUSH
5410: LD_INT 9
5412: PUSH
5413: LD_INT 10
5415: PUSH
5416: LD_INT 11
5418: PUSH
5419: LD_INT 12
5421: PUSH
5422: LD_INT 13
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: ST_TO_ADDR
// BeginBuildUp ;
5433: CALL 19412 0 0
// end ; end_of_file
5437: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5438: GO 5440
5440: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5441: LD_INT 4
5443: PPUSH
5444: LD_INT 5
5446: PPUSH
5447: CALL_OW 12
5451: PPUSH
5452: LD_INT 1
5454: PPUSH
5455: CALL_OW 57
// enable ;
5459: ENABLE
// end ;
5460: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5461: GO 5463
5463: DISABLE
5464: LD_INT 0
5466: PPUSH
5467: PPUSH
// begin case tick of 1 .. 1 1$0 :
5468: LD_OWVAR 1
5472: PUSH
5473: LD_INT 1
5475: DOUBLE
5476: GREATEREQUAL
5477: IFFALSE 5485
5479: LD_INT 2100
5481: DOUBLE
5482: LESSEQUAL
5483: IFTRUE 5487
5485: GO 5515
5487: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5488: LD_EXP 9
5492: PUSH
5493: LD_INT 100
5495: DIVREAL
5496: PUSH
5497: LD_INT 525
5499: PPUSH
5500: LD_INT 1050
5502: PPUSH
5503: CALL_OW 12
5507: MUL
5508: PPUSH
5509: CALL_OW 67
5513: GO 5817
5515: LD_INT 2100
5517: PUSH
5518: LD_INT 1
5520: PLUS
5521: DOUBLE
5522: GREATEREQUAL
5523: IFFALSE 5531
5525: LD_INT 10500
5527: DOUBLE
5528: LESSEQUAL
5529: IFTRUE 5533
5531: GO 5561
5533: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5534: LD_EXP 9
5538: PUSH
5539: LD_INT 100
5541: DIVREAL
5542: PUSH
5543: LD_INT 1050
5545: PPUSH
5546: LD_INT 1750
5548: PPUSH
5549: CALL_OW 12
5553: MUL
5554: PPUSH
5555: CALL_OW 67
5559: GO 5817
5561: LD_INT 10500
5563: PUSH
5564: LD_INT 1
5566: PLUS
5567: DOUBLE
5568: GREATEREQUAL
5569: IFFALSE 5577
5571: LD_INT 21000
5573: DOUBLE
5574: LESSEQUAL
5575: IFTRUE 5579
5577: GO 5607
5579: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5580: LD_EXP 9
5584: PUSH
5585: LD_INT 100
5587: DIVREAL
5588: PUSH
5589: LD_INT 1750
5591: PPUSH
5592: LD_INT 2100
5594: PPUSH
5595: CALL_OW 12
5599: MUL
5600: PPUSH
5601: CALL_OW 67
5605: GO 5817
5607: LD_INT 21000
5609: PUSH
5610: LD_INT 1
5612: PLUS
5613: DOUBLE
5614: GREATEREQUAL
5615: IFFALSE 5623
5617: LD_INT 42000
5619: DOUBLE
5620: LESSEQUAL
5621: IFTRUE 5625
5623: GO 5653
5625: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5626: LD_EXP 9
5630: PUSH
5631: LD_INT 100
5633: DIVREAL
5634: PUSH
5635: LD_INT 2100
5637: PPUSH
5638: LD_INT 2275
5640: PPUSH
5641: CALL_OW 12
5645: MUL
5646: PPUSH
5647: CALL_OW 67
5651: GO 5817
5653: LD_INT 42000
5655: PUSH
5656: LD_INT 1
5658: PLUS
5659: DOUBLE
5660: GREATEREQUAL
5661: IFFALSE 5669
5663: LD_INT 63000
5665: DOUBLE
5666: LESSEQUAL
5667: IFTRUE 5671
5669: GO 5699
5671: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5672: LD_EXP 9
5676: PUSH
5677: LD_INT 100
5679: DIVREAL
5680: PUSH
5681: LD_INT 2275
5683: PPUSH
5684: LD_INT 2450
5686: PPUSH
5687: CALL_OW 12
5691: MUL
5692: PPUSH
5693: CALL_OW 67
5697: GO 5817
5699: LD_INT 63000
5701: PUSH
5702: LD_INT 1
5704: PLUS
5705: DOUBLE
5706: GREATEREQUAL
5707: IFFALSE 5715
5709: LD_INT 105000
5711: DOUBLE
5712: LESSEQUAL
5713: IFTRUE 5717
5715: GO 5745
5717: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5718: LD_EXP 9
5722: PUSH
5723: LD_INT 100
5725: DIVREAL
5726: PUSH
5727: LD_INT 2450
5729: PPUSH
5730: LD_INT 2800
5732: PPUSH
5733: CALL_OW 12
5737: MUL
5738: PPUSH
5739: CALL_OW 67
5743: GO 5817
5745: LD_INT 105000
5747: PUSH
5748: LD_INT 1
5750: PLUS
5751: DOUBLE
5752: GREATEREQUAL
5753: IFFALSE 5761
5755: LD_INT 630000
5757: DOUBLE
5758: LESSEQUAL
5759: IFTRUE 5763
5761: GO 5791
5763: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5764: LD_EXP 9
5768: PUSH
5769: LD_INT 100
5771: DIVREAL
5772: PUSH
5773: LD_INT 2800
5775: PPUSH
5776: LD_INT 3500
5778: PPUSH
5779: CALL_OW 12
5783: MUL
5784: PPUSH
5785: CALL_OW 67
5789: GO 5817
5791: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5792: LD_EXP 9
5796: PUSH
5797: LD_INT 100
5799: DIVREAL
5800: PUSH
5801: LD_INT 3500
5803: PPUSH
5804: LD_INT 3850
5806: PPUSH
5807: CALL_OW 12
5811: MUL
5812: PPUSH
5813: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5817: LD_ADDR_VAR 0 2
5821: PUSH
5822: LD_INT 3
5824: PPUSH
5825: LD_INT 5
5827: PPUSH
5828: CALL_OW 12
5832: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5833: LD_ADDR_VAR 0 1
5837: PUSH
5838: LD_EXP 18
5842: PUSH
5843: LD_INT 0
5845: PUSH
5846: EMPTY
5847: LIST
5848: DIFF
5849: PUSH
5850: FOR_IN
5851: IFFALSE 5900
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5853: LD_VAR 0 2
5857: PPUSH
5858: LD_EXP 24
5862: PUSH
5863: LD_VAR 0 1
5867: ARRAY
5868: PUSH
5869: LD_INT 1
5871: ARRAY
5872: PPUSH
5873: LD_EXP 24
5877: PUSH
5878: LD_VAR 0 1
5882: ARRAY
5883: PUSH
5884: LD_INT 2
5886: ARRAY
5887: PPUSH
5888: LD_INT 20
5890: PPUSH
5891: LD_INT 1
5893: PPUSH
5894: CALL_OW 56
5898: GO 5850
5900: POP
5901: POP
// enable ;
5902: ENABLE
// end ;
5903: PPOPN 2
5905: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
5906: GO 5908
5908: DISABLE
5909: LD_INT 0
5911: PPUSH
5912: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
5913: LD_INT 1
5915: PPUSH
5916: LD_INT 1
5918: PPUSH
5919: CALL_OW 287
5923: PUSH
5924: LD_INT 200
5926: PUSH
5927: LD_EXP 9
5931: MINUS
5932: PUSH
5933: LD_INT 100
5935: DIVREAL
5936: PUSH
5937: LD_INT 5
5939: MUL
5940: LESS
5941: IFFALSE 5964
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
5943: LD_INT 3
5945: PPUSH
5946: LD_INT 5
5948: PPUSH
5949: CALL_OW 12
5953: PPUSH
5954: LD_INT 1
5956: PPUSH
5957: LD_INT 1
5959: PPUSH
5960: CALL_OW 55
// enable ;
5964: ENABLE
// end ; end_of_file
5965: PPOPN 2
5967: END
// every 20 20$00 trigger apemanNumber do
5968: LD_EXP 32
5972: IFFALSE 6005
5974: GO 5976
5976: DISABLE
// begin enable ;
5977: ENABLE
// if apeLevel >= 8 then
5978: LD_EXP 37
5982: PUSH
5983: LD_INT 8
5985: GREATEREQUAL
5986: IFFALSE 5991
// disable else
5988: DISABLE
5989: GO 6005
// apeLevel := apeLevel + 1 ;
5991: LD_ADDR_EXP 37
5995: PUSH
5996: LD_EXP 37
6000: PUSH
6001: LD_INT 1
6003: PLUS
6004: ST_TO_ADDR
// end ;
6005: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6006: LD_EXP 32
6010: PUSH
6011: LD_EXP 33
6015: LESS
6016: IFFALSE 6156
6018: GO 6020
6020: DISABLE
6021: LD_INT 0
6023: PPUSH
6024: PPUSH
6025: PPUSH
6026: PPUSH
// begin enable ;
6027: ENABLE
// for i := 1 to apemanPos do
6028: LD_ADDR_VAR 0 1
6032: PUSH
6033: DOUBLE
6034: LD_INT 1
6036: DEC
6037: ST_TO_ADDR
6038: LD_EXP 35
6042: PUSH
6043: FOR_TO
6044: IFFALSE 6154
// begin if apemanPlayerCount [ i ] then
6046: LD_EXP 36
6050: PUSH
6051: LD_VAR 0 1
6055: ARRAY
6056: IFFALSE 6152
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6058: LD_EXP 36
6062: PUSH
6063: LD_VAR 0 1
6067: ARRAY
6068: PUSH
6069: LD_EXP 35
6073: PUSH
6074: LD_VAR 0 1
6078: ARRAY
6079: GREATER
6080: IFFALSE 6152
// begin ape := PrepareApeman ;
6082: LD_ADDR_VAR 0 2
6086: PUSH
6087: CALL 6667 0 0
6091: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6092: LD_VAR 0 2
6096: PPUSH
6097: LD_EXP 38
6101: PUSH
6102: LD_VAR 0 1
6106: ARRAY
6107: PPUSH
6108: LD_INT 0
6110: PPUSH
6111: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6115: LD_ADDR_EXP 35
6119: PUSH
6120: LD_EXP 35
6124: PPUSH
6125: LD_VAR 0 1
6129: PPUSH
6130: LD_EXP 35
6134: PUSH
6135: LD_VAR 0 1
6139: ARRAY
6140: PUSH
6141: LD_VAR 0 2
6145: UNION
6146: PPUSH
6147: CALL_OW 1
6151: ST_TO_ADDR
// end ; end ; end ;
6152: GO 6043
6154: POP
6155: POP
// end ;
6156: PPOPN 4
6158: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6159: LD_INT 0
6161: PPUSH
6162: PPUSH
6163: PPUSH
6164: PPUSH
6165: PPUSH
6166: PPUSH
6167: PPUSH
// playersAmount := 0 ;
6168: LD_ADDR_VAR 0 3
6172: PUSH
6173: LD_INT 0
6175: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6176: LD_ADDR_VAR 0 7
6180: PUSH
6181: LD_INT 2
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: LD_INT 4
6189: PUSH
6190: LD_INT 5
6192: PUSH
6193: LD_INT 6
6195: PUSH
6196: LD_INT 7
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6207: LD_ADDR_EXP 38
6211: PUSH
6212: LD_INT 0
6214: PUSH
6215: LD_INT 0
6217: PUSH
6218: LD_INT 0
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: LD_INT 0
6232: PUSH
6233: LD_INT 0
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: ST_TO_ADDR
// for j = 1 to Side_Positions do
6246: LD_ADDR_VAR 0 4
6250: PUSH
6251: DOUBLE
6252: LD_INT 1
6254: DEC
6255: ST_TO_ADDR
6256: LD_EXP 18
6260: PUSH
6261: FOR_TO
6262: IFFALSE 6329
// if Side_Positions [ j ] then
6264: LD_EXP 18
6268: PUSH
6269: LD_VAR 0 4
6273: ARRAY
6274: IFFALSE 6327
// begin playersAmount := playersAmount + 1 ;
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: LD_VAR 0 3
6285: PUSH
6286: LD_INT 1
6288: PLUS
6289: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6290: LD_ADDR_EXP 38
6294: PUSH
6295: LD_EXP 38
6299: PPUSH
6300: LD_VAR 0 4
6304: PPUSH
6305: LD_VAR 0 7
6309: PUSH
6310: LD_EXP 18
6314: PUSH
6315: LD_VAR 0 4
6319: ARRAY
6320: ARRAY
6321: PPUSH
6322: CALL_OW 1
6326: ST_TO_ADDR
// end ;
6327: GO 6261
6329: POP
6330: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6331: LD_ADDR_EXP 34
6335: PUSH
6336: LD_INT 3
6338: PUSH
6339: LD_EXP 14
6343: MUL
6344: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6345: LD_ADDR_EXP 32
6349: PUSH
6350: LD_VAR 0 3
6354: PUSH
6355: LD_EXP 34
6359: MUL
6360: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6361: LD_ADDR_EXP 33
6365: PUSH
6366: LD_EXP 32
6370: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6371: LD_ADDR_EXP 35
6375: PUSH
6376: LD_INT 0
6378: PUSH
6379: LD_INT 0
6381: PUSH
6382: LD_INT 0
6384: PUSH
6385: LD_INT 0
6387: PUSH
6388: LD_INT 0
6390: PUSH
6391: LD_INT 0
6393: PUSH
6394: LD_INT 0
6396: PUSH
6397: LD_INT 0
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6410: LD_ADDR_EXP 36
6414: PUSH
6415: LD_INT 0
6417: PUSH
6418: LD_INT 0
6420: PUSH
6421: LD_INT 0
6423: PUSH
6424: LD_INT 0
6426: PUSH
6427: LD_INT 0
6429: PUSH
6430: LD_INT 0
6432: PUSH
6433: LD_INT 0
6435: PUSH
6436: LD_INT 0
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: ST_TO_ADDR
// apeLevel := 1 ;
6449: LD_ADDR_EXP 37
6453: PUSH
6454: LD_INT 1
6456: ST_TO_ADDR
// if not apemanNumber then
6457: LD_EXP 32
6461: NOT
6462: IFFALSE 6466
// exit ;
6464: GO 6662
// for i := 1 to apemanPerPlayer do
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: DOUBLE
6472: LD_INT 1
6474: DEC
6475: ST_TO_ADDR
6476: LD_EXP 34
6480: PUSH
6481: FOR_TO
6482: IFFALSE 6660
// begin for j := 1 to Side_Positions do
6484: LD_ADDR_VAR 0 4
6488: PUSH
6489: DOUBLE
6490: LD_INT 1
6492: DEC
6493: ST_TO_ADDR
6494: LD_EXP 18
6498: PUSH
6499: FOR_TO
6500: IFFALSE 6656
// if Side_Positions [ j ] then
6502: LD_EXP 18
6506: PUSH
6507: LD_VAR 0 4
6511: ARRAY
6512: IFFALSE 6654
// begin pos := Side_Positions [ j ] ;
6514: LD_ADDR_VAR 0 6
6518: PUSH
6519: LD_EXP 18
6523: PUSH
6524: LD_VAR 0 4
6528: ARRAY
6529: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6530: LD_ADDR_EXP 36
6534: PUSH
6535: LD_EXP 36
6539: PPUSH
6540: LD_VAR 0 4
6544: PPUSH
6545: LD_EXP 36
6549: PUSH
6550: LD_VAR 0 4
6554: ARRAY
6555: PUSH
6556: LD_INT 1
6558: PLUS
6559: PPUSH
6560: CALL_OW 1
6564: ST_TO_ADDR
// ape := PrepareApeman ;
6565: LD_ADDR_VAR 0 5
6569: PUSH
6570: CALL 6667 0 0
6574: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6575: LD_ADDR_EXP 35
6579: PUSH
6580: LD_EXP 35
6584: PPUSH
6585: LD_VAR 0 4
6589: PPUSH
6590: LD_EXP 35
6594: PUSH
6595: LD_VAR 0 4
6599: ARRAY
6600: PPUSH
6601: LD_EXP 35
6605: PUSH
6606: LD_VAR 0 4
6610: ARRAY
6611: PUSH
6612: LD_INT 1
6614: PLUS
6615: PPUSH
6616: LD_VAR 0 5
6620: PPUSH
6621: CALL_OW 1
6625: PPUSH
6626: CALL_OW 1
6630: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6631: LD_VAR 0 5
6635: PPUSH
6636: LD_EXP 38
6640: PUSH
6641: LD_VAR 0 4
6645: ARRAY
6646: PPUSH
6647: LD_INT 0
6649: PPUSH
6650: CALL_OW 49
// end ;
6654: GO 6499
6656: POP
6657: POP
// end ;
6658: GO 6481
6660: POP
6661: POP
// end ;
6662: LD_VAR 0 1
6666: RET
// export function PrepareApeman ; var bonus ; begin
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
// uc_side := 0 ;
6671: LD_ADDR_OWVAR 20
6675: PUSH
6676: LD_INT 0
6678: ST_TO_ADDR
// uc_nation := 0 ;
6679: LD_ADDR_OWVAR 21
6683: PUSH
6684: LD_INT 0
6686: ST_TO_ADDR
// InitHc ;
6687: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6691: LD_ADDR_VAR 0 2
6695: PUSH
6696: LD_INT 1
6698: NEG
6699: PUSH
6700: LD_INT 0
6702: PUSH
6703: LD_INT 1
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: PUSH
6711: LD_INT 25
6713: PUSH
6714: LD_INT 12
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: PUSH
6726: LD_INT 3
6728: MOD
6729: PUSH
6730: LD_INT 1
6732: PLUS
6733: ARRAY
6734: ST_TO_ADDR
// hc_class := class_apeman ;
6735: LD_ADDR_OWVAR 28
6739: PUSH
6740: LD_INT 12
6742: ST_TO_ADDR
// hc_gallery :=  ;
6743: LD_ADDR_OWVAR 33
6747: PUSH
6748: LD_STRING 
6750: ST_TO_ADDR
// hc_name :=  ;
6751: LD_ADDR_OWVAR 26
6755: PUSH
6756: LD_STRING 
6758: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6759: LD_ADDR_OWVAR 31
6763: PUSH
6764: LD_EXP 37
6768: PUSH
6769: LD_VAR 0 2
6773: PLUS
6774: PUSH
6775: LD_EXP 37
6779: PUSH
6780: LD_VAR 0 2
6784: PLUS
6785: PUSH
6786: LD_EXP 37
6790: PUSH
6791: LD_VAR 0 2
6795: PLUS
6796: PUSH
6797: LD_EXP 37
6801: PUSH
6802: LD_VAR 0 2
6806: PLUS
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6814: LD_ADDR_OWVAR 35
6818: PUSH
6819: LD_INT 10
6821: PUSH
6822: LD_VAR 0 2
6826: MUL
6827: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6828: LD_ADDR_OWVAR 29
6832: PUSH
6833: LD_INT 12
6835: PUSH
6836: LD_INT 12
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: ST_TO_ADDR
// result := CreateHuman ;
6843: LD_ADDR_VAR 0 1
6847: PUSH
6848: CALL_OW 44
6852: ST_TO_ADDR
// end ;
6853: LD_VAR 0 1
6857: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
6858: LD_INT 0
6860: PPUSH
6861: PPUSH
6862: PPUSH
// if not ape then
6863: LD_VAR 0 1
6867: NOT
6868: IFFALSE 6872
// exit ;
6870: GO 6975
// for i = 1 to apemanPos do
6872: LD_ADDR_VAR 0 4
6876: PUSH
6877: DOUBLE
6878: LD_INT 1
6880: DEC
6881: ST_TO_ADDR
6882: LD_EXP 35
6886: PUSH
6887: FOR_TO
6888: IFFALSE 6922
// if ape in apemanPos [ i ] then
6890: LD_VAR 0 1
6894: PUSH
6895: LD_EXP 35
6899: PUSH
6900: LD_VAR 0 4
6904: ARRAY
6905: IN
6906: IFFALSE 6920
// begin s := i ;
6908: LD_ADDR_VAR 0 3
6912: PUSH
6913: LD_VAR 0 4
6917: ST_TO_ADDR
// break ;
6918: GO 6922
// end ;
6920: GO 6887
6922: POP
6923: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
6924: LD_ADDR_EXP 35
6928: PUSH
6929: LD_EXP 35
6933: PPUSH
6934: LD_VAR 0 3
6938: PPUSH
6939: LD_EXP 35
6943: PUSH
6944: LD_VAR 0 3
6948: ARRAY
6949: PUSH
6950: LD_VAR 0 1
6954: DIFF
6955: PPUSH
6956: CALL_OW 1
6960: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6961: LD_ADDR_EXP 32
6965: PUSH
6966: LD_EXP 32
6970: PUSH
6971: LD_INT 1
6973: MINUS
6974: ST_TO_ADDR
// end ; end_of_file
6975: LD_VAR 0 2
6979: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6980: LD_VAR 0 1
6984: PPUSH
6985: CALL_OW 266
6989: PUSH
6990: LD_INT 0
6992: PUSH
6993: LD_INT 1
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: IN
7000: IFFALSE 7025
// SetBName ( b , @ & GetSide ( b ) ) ;
7002: LD_VAR 0 1
7006: PPUSH
7007: LD_STRING @
7009: PUSH
7010: LD_VAR 0 1
7014: PPUSH
7015: CALL_OW 255
7019: STR
7020: PPUSH
7021: CALL_OW 500
// if def_game_rules then
7025: LD_EXP 40
7029: IFFALSE 7066
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_VAR 0 1
7040: PPUSH
7041: CALL_OW 266
7045: PPUSH
7046: LD_VAR 0 1
7050: PPUSH
7051: CALL_OW 255
7055: PPUSH
7056: LD_INT 0
7058: PPUSH
7059: LD_INT 1
7061: PPUSH
7062: CALL 11889 0 5
// end ;
7066: PPOPN 2
7068: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7069: LD_VAR 0 1
7073: PPUSH
7074: CALL_OW 266
7078: PUSH
7079: LD_INT 0
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: IN
7089: IFFALSE 7114
// SetBName ( b , @ & GetSide ( b ) ) ;
7091: LD_VAR 0 1
7095: PPUSH
7096: LD_STRING @
7098: PUSH
7099: LD_VAR 0 1
7103: PPUSH
7104: CALL_OW 255
7108: STR
7109: PPUSH
7110: CALL_OW 500
// if def_game_rules then
7114: LD_EXP 40
7118: IFFALSE 7157
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7120: LD_VAR 0 1
7124: PPUSH
7125: LD_VAR 0 1
7129: PPUSH
7130: CALL_OW 266
7134: PPUSH
7135: LD_VAR 0 1
7139: PPUSH
7140: CALL_OW 255
7144: PPUSH
7145: LD_VAR 0 2
7149: PPUSH
7150: LD_INT 1
7152: PPUSH
7153: CALL 11889 0 5
// end ;
7157: PPOPN 3
7159: END
// on VehicleConstructed ( veh , fac ) do var side ;
7160: LD_INT 0
7162: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7163: LD_VAR 0 1
7167: PPUSH
7168: CALL_OW 263
7172: PUSH
7173: LD_INT 5
7175: EQUAL
7176: IFFALSE 7318
// begin side := GetSide ( veh ) ;
7178: LD_ADDR_VAR 0 3
7182: PUSH
7183: LD_VAR 0 1
7187: PPUSH
7188: CALL_OW 255
7192: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7193: LD_ADDR_EXP 35
7197: PUSH
7198: LD_EXP 35
7202: PPUSH
7203: LD_VAR 0 3
7207: PPUSH
7208: LD_EXP 35
7212: PUSH
7213: LD_VAR 0 3
7217: ARRAY
7218: PPUSH
7219: LD_INT 52
7221: PUSH
7222: EMPTY
7223: LIST
7224: PPUSH
7225: CALL_OW 72
7229: PUSH
7230: LD_INT 22
7232: PUSH
7233: LD_VAR 0 3
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 2
7244: PUSH
7245: LD_INT 33
7247: PUSH
7248: LD_INT 5
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 25
7257: PUSH
7258: LD_INT 12
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 25
7267: PUSH
7268: LD_INT 15
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 25
7277: PUSH
7278: LD_INT 16
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: LD_INT 25
7287: PUSH
7288: LD_INT 17
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PPUSH
7307: CALL_OW 69
7311: UNION
7312: PPUSH
7313: CALL_OW 1
7317: ST_TO_ADDR
// end ; end ;
7318: PPOPN 3
7320: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7321: LD_INT 0
7323: PPUSH
7324: PPUSH
7325: PPUSH
7326: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7327: LD_VAR 0 1
7331: PPUSH
7332: CALL_OW 257
7336: PUSH
7337: LD_INT 12
7339: PUSH
7340: LD_INT 15
7342: PUSH
7343: LD_INT 17
7345: PUSH
7346: LD_INT 16
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: IN
7355: PUSH
7356: LD_VAR 0 1
7360: PPUSH
7361: CALL_OW 263
7365: PUSH
7366: LD_INT 5
7368: EQUAL
7369: OR
7370: IFFALSE 7381
// ApeKilled ( j ) ;
7372: LD_VAR 0 1
7376: PPUSH
7377: CALL 6858 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7381: LD_VAR 0 1
7385: PPUSH
7386: CALL_OW 266
7390: PUSH
7391: LD_INT 0
7393: PUSH
7394: LD_INT 1
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: IN
7401: IFFALSE 7483
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7403: LD_ADDR_VAR 0 4
7407: PUSH
7408: LD_EXP 18
7412: PUSH
7413: LD_VAR 0 1
7417: PPUSH
7418: CALL_OW 255
7422: ARRAY
7423: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7424: LD_ADDR_VAR 0 2
7428: PUSH
7429: LD_EXP 24
7433: PUSH
7434: LD_VAR 0 4
7438: ARRAY
7439: PUSH
7440: LD_INT 1
7442: ARRAY
7443: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7444: LD_ADDR_VAR 0 3
7448: PUSH
7449: LD_EXP 24
7453: PUSH
7454: LD_VAR 0 4
7458: ARRAY
7459: PUSH
7460: LD_INT 2
7462: ARRAY
7463: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7464: LD_VAR 0 2
7468: PPUSH
7469: LD_VAR 0 3
7473: PPUSH
7474: CALL_OW 420
7478: PPUSH
7479: CALL_OW 419
// end ; if def_game_rules then
7483: LD_EXP 40
7487: IFFALSE 7586
// if ( GetType ( j ) = 3 ) then
7489: LD_VAR 0 1
7493: PPUSH
7494: CALL_OW 247
7498: PUSH
7499: LD_INT 3
7501: EQUAL
7502: IFFALSE 7542
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7504: LD_VAR 0 1
7508: PPUSH
7509: LD_VAR 0 1
7513: PPUSH
7514: CALL_OW 266
7518: PPUSH
7519: LD_VAR 0 1
7523: PPUSH
7524: CALL_OW 255
7528: PPUSH
7529: LD_INT 0
7531: PPUSH
7532: LD_INT 1
7534: NEG
7535: PPUSH
7536: CALL 11889 0 5
7540: GO 7586
// if ( GetChassis ( j ) = 25 ) then
7542: LD_VAR 0 1
7546: PPUSH
7547: CALL_OW 265
7551: PUSH
7552: LD_INT 25
7554: EQUAL
7555: IFFALSE 7586
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7557: LD_VAR 0 1
7561: PPUSH
7562: LD_INT 37
7564: PPUSH
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 255
7574: PPUSH
7575: LD_INT 0
7577: PPUSH
7578: LD_INT 1
7580: NEG
7581: PPUSH
7582: CALL 11889 0 5
// end ;
7586: PPOPN 5
7588: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7589: LD_EXP 40
7593: PUSH
7594: LD_VAR 0 1
7598: PPUSH
7599: CALL_OW 265
7603: PUSH
7604: LD_INT 25
7606: EQUAL
7607: AND
7608: IFFALSE 7640
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7610: LD_VAR 0 1
7614: PPUSH
7615: LD_INT 37
7617: PPUSH
7618: LD_VAR 0 1
7622: PPUSH
7623: CALL_OW 255
7627: PPUSH
7628: LD_VAR 0 3
7632: PPUSH
7633: LD_INT 1
7635: PPUSH
7636: CALL 11889 0 5
// end ;
7640: PPOPN 4
7642: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7643: LD_VAR 0 1
7647: PPUSH
7648: LD_VAR 0 2
7652: PPUSH
7653: LD_VAR 0 3
7657: PPUSH
7658: LD_OWVAR 2
7662: PPUSH
7663: CALL 12660 0 4
7667: PPOPN 3
7669: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
7670: GO 7672
7672: DISABLE
7673: LD_INT 0
7675: PPUSH
7676: PPUSH
7677: PPUSH
7678: PPUSH
7679: PPUSH
// begin sib_mined := [ ] ;
7680: LD_ADDR_VAR 0 5
7684: PUSH
7685: EMPTY
7686: ST_TO_ADDR
// for i := 1 to 8 do
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: DOUBLE
7693: LD_INT 1
7695: DEC
7696: ST_TO_ADDR
7697: LD_INT 8
7699: PUSH
7700: FOR_TO
7701: IFFALSE 7857
// if Side_Positions [ i ] then
7703: LD_EXP 18
7707: PUSH
7708: LD_VAR 0 1
7712: ARRAY
7713: IFFALSE 7841
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7715: LD_ADDR_VAR 0 4
7719: PUSH
7720: LD_INT 22
7722: PUSH
7723: LD_VAR 0 1
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PUSH
7732: LD_INT 2
7734: PUSH
7735: LD_INT 30
7737: PUSH
7738: LD_INT 0
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PUSH
7745: LD_INT 30
7747: PUSH
7748: LD_INT 1
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PPUSH
7764: CALL_OW 69
7768: ST_TO_ADDR
// pom := 0 ;
7769: LD_ADDR_VAR 0 3
7773: PUSH
7774: LD_INT 0
7776: ST_TO_ADDR
// for base in filter do
7777: LD_ADDR_VAR 0 2
7781: PUSH
7782: LD_VAR 0 4
7786: PUSH
7787: FOR_IN
7788: IFFALSE 7821
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
7790: LD_ADDR_VAR 0 3
7794: PUSH
7795: LD_VAR 0 3
7799: PUSH
7800: LD_VAR 0 2
7804: PPUSH
7805: CALL_OW 274
7809: PPUSH
7810: LD_INT 3
7812: PPUSH
7813: CALL_OW 275
7817: PLUS
7818: ST_TO_ADDR
7819: GO 7787
7821: POP
7822: POP
// sib_mined := sib_mined ^ pom ;
7823: LD_ADDR_VAR 0 5
7827: PUSH
7828: LD_VAR 0 5
7832: PUSH
7833: LD_VAR 0 3
7837: ADD
7838: ST_TO_ADDR
// end else
7839: GO 7855
// sib_mined := sib_mined ^ 0 ;
7841: LD_ADDR_VAR 0 5
7845: PUSH
7846: LD_VAR 0 5
7850: PUSH
7851: LD_INT 0
7853: ADD
7854: ST_TO_ADDR
7855: GO 7700
7857: POP
7858: POP
// if not def_public_score then
7859: LD_EXP 2
7863: NOT
7864: IFFALSE 7954
// begin ExtraStrings := [ ] ;
7866: LD_ADDR_EXP 56
7870: PUSH
7871: EMPTY
7872: ST_TO_ADDR
// for i := 1 to 8 do
7873: LD_ADDR_VAR 0 1
7877: PUSH
7878: DOUBLE
7879: LD_INT 1
7881: DEC
7882: ST_TO_ADDR
7883: LD_INT 8
7885: PUSH
7886: FOR_TO
7887: IFFALSE 7950
// if Side_Positions [ i ] then
7889: LD_EXP 18
7893: PUSH
7894: LD_VAR 0 1
7898: ARRAY
7899: IFFALSE 7948
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
7901: LD_ADDR_EXP 56
7905: PUSH
7906: LD_EXP 56
7910: PUSH
7911: LD_STRING #AlienBase-MinedPublic
7913: PUSH
7914: LD_VAR 0 1
7918: PUSH
7919: LD_VAR 0 1
7923: PUSH
7924: LD_VAR 0 5
7928: PUSH
7929: LD_VAR 0 1
7933: ARRAY
7934: PUSH
7935: LD_EXP 11
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: ADD
7947: ST_TO_ADDR
7948: GO 7886
7950: POP
7951: POP
// end else
7952: GO 7983
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
7954: LD_ADDR_EXP 56
7958: PUSH
7959: LD_STRING #AlienBase-Mined
7961: PUSH
7962: LD_VAR 0 5
7966: PUSH
7967: LD_OWVAR 2
7971: ARRAY
7972: PUSH
7973: LD_EXP 11
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: LIST
7982: ST_TO_ADDR
// for i := 1 to 8 do
7983: LD_ADDR_VAR 0 1
7987: PUSH
7988: DOUBLE
7989: LD_INT 1
7991: DEC
7992: ST_TO_ADDR
7993: LD_INT 8
7995: PUSH
7996: FOR_TO
7997: IFFALSE 8067
// if sib_mined [ i ] >= amount_of_siberit then
7999: LD_VAR 0 5
8003: PUSH
8004: LD_VAR 0 1
8008: ARRAY
8009: PUSH
8010: LD_EXP 11
8014: GREATEREQUAL
8015: IFFALSE 8065
// begin wait ( 0 0$1 ) ;
8017: LD_INT 35
8019: PPUSH
8020: CALL_OW 67
// if IAmServer then
8024: CALL_OW 518
8028: IFFALSE 8037
// wait ( 0 0$1 ) ;
8030: LD_INT 35
8032: PPUSH
8033: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8037: LD_VAR 0 5
8041: PUSH
8042: LD_OWVAR 2
8046: ARRAY
8047: PUSH
8048: LD_EXP 11
8052: GREATEREQUAL
8053: IFFALSE 8061
// YouWinInMultiplayer else
8055: CALL_OW 106
8059: GO 8065
// YouLostInMultiplayer ;
8061: CALL_OW 107
// end ;
8065: GO 7996
8067: POP
8068: POP
// enable ;
8069: ENABLE
// end ; end_of_file
8070: PPOPN 5
8072: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8073: LD_INT 0
8075: PPUSH
8076: PPUSH
// for un in battle_flags_id do
8077: LD_ADDR_VAR 0 2
8081: PUSH
8082: LD_EXP 29
8086: PUSH
8087: FOR_IN
8088: IFFALSE 8163
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_INT 1
8097: PUSH
8098: LD_LOC 9
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 2
8109: PUSH
8110: LD_LOC 9
8114: PUSH
8115: LD_INT 2
8117: DIV
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 3
8125: PUSH
8126: LD_LOC 9
8130: PUSH
8131: LD_INT 5
8133: DIV
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: PUSH
8139: LD_INT 20
8141: PUSH
8142: LD_LOC 9
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: PPUSH
8157: CALL_OW 423
8161: GO 8087
8163: POP
8164: POP
// end ;
8165: LD_VAR 0 1
8169: RET
// every 1 do var un ;
8170: GO 8172
8172: DISABLE
8173: LD_INT 0
8175: PPUSH
// begin if not def_morale_flags then
8176: LD_EXP 49
8180: NOT
8181: IFFALSE 8185
// exit ;
8183: GO 8262
// if not morale_decreasing_time then
8185: LD_EXP 10
8189: NOT
8190: IFFALSE 8194
// exit ;
8192: GO 8262
// strength = 100 ;
8194: LD_ADDR_LOC 9
8198: PUSH
8199: LD_INT 100
8201: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8202: LD_EXP 10
8206: PPUSH
8207: CALL_OW 67
// strength := strength - 1 ;
8211: LD_ADDR_LOC 9
8215: PUSH
8216: LD_LOC 9
8220: PUSH
8221: LD_INT 1
8223: MINUS
8224: ST_TO_ADDR
// Update_Flags ;
8225: CALL 8073 0 0
// until not strength ;
8229: LD_LOC 9
8233: NOT
8234: IFFALSE 8202
// for un in battle_flags_id do
8236: LD_ADDR_VAR 0 1
8240: PUSH
8241: LD_EXP 29
8245: PUSH
8246: FOR_IN
8247: IFFALSE 8260
// KillBattleFlag ( un ) ;
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 419
8258: GO 8246
8260: POP
8261: POP
// end ; end_of_file
8262: PPOPN 1
8264: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
8265: GO 8267
8267: DISABLE
8268: LD_INT 0
8270: PPUSH
// begin enable ;
8271: ENABLE
// for x := 1 to 8 do
8272: LD_ADDR_VAR 0 1
8276: PUSH
8277: DOUBLE
8278: LD_INT 1
8280: DEC
8281: ST_TO_ADDR
8282: LD_INT 8
8284: PUSH
8285: FOR_TO
8286: IFFALSE 8370
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
8288: LD_LOC 16
8292: PUSH
8293: LD_VAR 0 1
8297: ARRAY
8298: PUSH
8299: LD_INT 5
8301: GREATER
8302: PUSH
8303: LD_LOC 14
8307: PUSH
8308: LD_VAR 0 1
8312: ARRAY
8313: PUSH
8314: LD_INT 1
8316: NEG
8317: EQUAL
8318: AND
8319: IFFALSE 8368
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
8321: LD_ADDR_LOC 15
8325: PUSH
8326: LD_LOC 15
8330: PPUSH
8331: LD_VAR 0 1
8335: PPUSH
8336: LD_LOC 15
8340: PUSH
8341: LD_VAR 0 1
8345: ARRAY
8346: PUSH
8347: LD_INT 6
8349: PLUS
8350: PPUSH
8351: CALL_OW 1
8355: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
8356: LD_VAR 0 1
8360: PPUSH
8361: LD_INT 0
8363: PPUSH
8364: CALL 8542 0 2
// end ;
8368: GO 8285
8370: POP
8371: POP
// end ;
8372: PPOPN 1
8374: END
// every 0 0$1 marked 200 do var BGL , x ;
8375: GO 8377
8377: DISABLE
8378: LD_INT 0
8380: PPUSH
8381: PPUSH
// begin enable ;
8382: ENABLE
// for x := 1 to 8 do
8383: LD_ADDR_VAR 0 2
8387: PUSH
8388: DOUBLE
8389: LD_INT 1
8391: DEC
8392: ST_TO_ADDR
8393: LD_INT 8
8395: PUSH
8396: FOR_TO
8397: IFFALSE 8528
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
8399: LD_LOC 14
8403: PUSH
8404: LD_VAR 0 2
8408: ARRAY
8409: PUSH
8410: LD_INT 1
8412: NEG
8413: GREATER
8414: PUSH
8415: LD_LOC 14
8419: PUSH
8420: LD_VAR 0 2
8424: ARRAY
8425: PPUSH
8426: CALL_OW 300
8430: AND
8431: IFFALSE 8526
// begin BGL := GetLives ( BloodGods [ x ] ) ;
8433: LD_ADDR_VAR 0 1
8437: PUSH
8438: LD_LOC 14
8442: PUSH
8443: LD_VAR 0 2
8447: ARRAY
8448: PPUSH
8449: CALL_OW 256
8453: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
8454: LD_VAR 0 1
8458: PUSH
8459: LD_INT 1000
8461: LESS
8462: PUSH
8463: LD_VAR 0 1
8467: PUSH
8468: LD_INT 100
8470: GREATER
8471: AND
8472: IFFALSE 8526
// begin BGL := BGL + 10 ;
8474: LD_ADDR_VAR 0 1
8478: PUSH
8479: LD_VAR 0 1
8483: PUSH
8484: LD_INT 10
8486: PLUS
8487: ST_TO_ADDR
// if BGL > 1000 then
8488: LD_VAR 0 1
8492: PUSH
8493: LD_INT 1000
8495: GREATER
8496: IFFALSE 8506
// BGL := 1000 ;
8498: LD_ADDR_VAR 0 1
8502: PUSH
8503: LD_INT 1000
8505: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
8506: LD_LOC 14
8510: PUSH
8511: LD_VAR 0 2
8515: ARRAY
8516: PPUSH
8517: LD_VAR 0 1
8521: PPUSH
8522: CALL_OW 234
// end ; end ;
8526: GO 8396
8528: POP
8529: POP
// end ;
8530: PPOPN 2
8532: END
// every 0 0$1 marked 200 do
8533: GO 8535
8535: DISABLE
// begin DisplayTimeWithKills ;
8536: CALL 8783 0 0
// enable ;
8540: ENABLE
// end ;
8541: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
8542: LD_INT 0
8544: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
8545: LD_ADDR_OWVAR 24
8549: PUSH
8550: LD_INT 0
8552: PPUSH
8553: LD_INT 5
8555: PPUSH
8556: CALL_OW 12
8560: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
8561: LD_INT 1
8563: PPUSH
8564: LD_INT 1
8566: PPUSH
8567: LD_INT 15
8569: PPUSH
8570: CALL_OW 380
// hc_importance := 106 ;
8574: LD_ADDR_OWVAR 32
8578: PUSH
8579: LD_INT 106
8581: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
8582: LD_ADDR_OWVAR 26
8586: PUSH
8587: LD_STRING Blood God of 
8589: PUSH
8590: LD_OWVAR 19
8594: PUSH
8595: LD_VAR 0 1
8599: ARRAY
8600: STR
8601: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
8602: LD_ADDR_OWVAR 21
8606: PUSH
8607: LD_EXP 19
8611: PUSH
8612: LD_VAR 0 1
8616: ARRAY
8617: ST_TO_ADDR
// uc_side := side ;
8618: LD_ADDR_OWVAR 20
8622: PUSH
8623: LD_VAR 0 1
8627: ST_TO_ADDR
// hc_noskilllimit := true ;
8628: LD_ADDR_OWVAR 76
8632: PUSH
8633: LD_INT 1
8635: ST_TO_ADDR
// hc_agressivity := 50 ;
8636: LD_ADDR_OWVAR 35
8640: PUSH
8641: LD_INT 50
8643: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
8644: LD_ADDR_LOC 14
8648: PUSH
8649: LD_LOC 14
8653: PPUSH
8654: LD_VAR 0 1
8658: PPUSH
8659: CALL_OW 44
8663: PPUSH
8664: CALL_OW 1
8668: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
8669: LD_LOC 14
8673: PUSH
8674: LD_VAR 0 1
8678: ARRAY
8679: PPUSH
8680: LD_LOC 17
8684: PUSH
8685: LD_EXP 18
8689: PUSH
8690: LD_VAR 0 1
8694: ARRAY
8695: ARRAY
8696: PUSH
8697: LD_INT 1
8699: ARRAY
8700: PPUSH
8701: LD_LOC 17
8705: PUSH
8706: LD_EXP 18
8710: PUSH
8711: LD_VAR 0 1
8715: ARRAY
8716: ARRAY
8717: PUSH
8718: LD_INT 2
8720: ARRAY
8721: PPUSH
8722: LD_INT 10
8724: PPUSH
8725: LD_INT 0
8727: PPUSH
8728: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
8732: LD_LOC 14
8736: PUSH
8737: LD_VAR 0 1
8741: ARRAY
8742: PPUSH
8743: LD_INT 1
8745: PPUSH
8746: LD_INT 300
8748: PPUSH
8749: CALL_OW 239
// if not NoDialog then
8753: LD_VAR 0 2
8757: NOT
8758: IFFALSE 8778
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
8760: LD_LOC 14
8764: PUSH
8765: LD_VAR 0 1
8769: ARRAY
8770: PPUSH
8771: LD_STRING DLAwaken
8773: PPUSH
8774: CALL_OW 94
// end ;
8778: LD_VAR 0 3
8782: RET
// function DisplayTimeWithKills ; var x ; begin
8783: LD_INT 0
8785: PPUSH
8786: PPUSH
// ExtraStrings :=  ;
8787: LD_ADDR_EXP 56
8791: PUSH
8792: LD_STRING 
8794: ST_TO_ADDR
// for x = 1 to Side_Positions do
8795: LD_ADDR_VAR 0 2
8799: PUSH
8800: DOUBLE
8801: LD_INT 1
8803: DEC
8804: ST_TO_ADDR
8805: LD_EXP 18
8809: PUSH
8810: FOR_TO
8811: IFFALSE 9044
// if Side_Positions [ x ] then
8813: LD_EXP 18
8817: PUSH
8818: LD_VAR 0 2
8822: ARRAY
8823: IFFALSE 9042
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
8825: LD_ADDR_LOC 16
8829: PUSH
8830: LD_LOC 16
8834: PPUSH
8835: LD_VAR 0 2
8839: PPUSH
8840: LD_VAR 0 2
8844: PPUSH
8845: CALL_OW 515
8849: PUSH
8850: LD_LOC 15
8854: PUSH
8855: LD_VAR 0 2
8859: ARRAY
8860: MINUS
8861: PPUSH
8862: CALL_OW 1
8866: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
8867: LD_LOC 14
8871: PUSH
8872: LD_VAR 0 2
8876: ARRAY
8877: PUSH
8878: LD_INT 1
8880: NEG
8881: GREATER
8882: PUSH
8883: LD_LOC 14
8887: PUSH
8888: LD_VAR 0 2
8892: ARRAY
8893: PPUSH
8894: CALL_OW 300
8898: AND
8899: IFFALSE 8932
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
8901: LD_ADDR_EXP 56
8905: PUSH
8906: LD_EXP 56
8910: PUSH
8911: LD_STRING #godawoken
8913: PUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 2
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: LIST
8928: ADD
8929: ST_TO_ADDR
8930: GO 9042
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
8932: LD_LOC 14
8936: PUSH
8937: LD_VAR 0 2
8941: ARRAY
8942: PUSH
8943: LD_INT 1
8945: NEG
8946: GREATER
8947: PUSH
8948: LD_LOC 14
8952: PUSH
8953: LD_VAR 0 2
8957: ARRAY
8958: PPUSH
8959: CALL_OW 301
8963: AND
8964: IFFALSE 8997
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
8966: LD_ADDR_EXP 56
8970: PUSH
8971: LD_EXP 56
8975: PUSH
8976: LD_STRING #goddied
8978: PUSH
8979: LD_VAR 0 2
8983: PUSH
8984: LD_VAR 0 2
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: LIST
8993: ADD
8994: ST_TO_ADDR
8995: GO 9042
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
8997: LD_ADDR_EXP 56
9001: PUSH
9002: LD_EXP 56
9006: PUSH
9007: LD_STRING #godssacrifise
9009: PUSH
9010: LD_VAR 0 2
9014: PUSH
9015: LD_VAR 0 2
9019: PUSH
9020: LD_LOC 16
9024: PUSH
9025: LD_VAR 0 2
9029: ARRAY
9030: PUSH
9031: LD_INT 6
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: ADD
9041: ST_TO_ADDR
9042: GO 8810
9044: POP
9045: POP
// end ;
9046: LD_VAR 0 1
9050: RET
// export function InitBloodGods ; begin
9051: LD_INT 0
9053: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
9054: LD_ADDR_LOC 14
9058: PUSH
9059: LD_INT 1
9061: NEG
9062: PUSH
9063: LD_INT 1
9065: NEG
9066: PUSH
9067: LD_INT 1
9069: NEG
9070: PUSH
9071: LD_INT 1
9073: NEG
9074: PUSH
9075: LD_INT 1
9077: NEG
9078: PUSH
9079: LD_INT 1
9081: NEG
9082: PUSH
9083: LD_INT 1
9085: NEG
9086: PUSH
9087: LD_INT 1
9089: NEG
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9101: LD_ADDR_LOC 15
9105: PUSH
9106: LD_INT 0
9108: PUSH
9109: LD_INT 0
9111: PUSH
9112: LD_INT 0
9114: PUSH
9115: LD_INT 0
9117: PUSH
9118: LD_INT 0
9120: PUSH
9121: LD_INT 0
9123: PUSH
9124: LD_INT 0
9126: PUSH
9127: LD_INT 0
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9140: LD_ADDR_LOC 16
9144: PUSH
9145: LD_INT 0
9147: PUSH
9148: LD_INT 0
9150: PUSH
9151: LD_INT 0
9153: PUSH
9154: LD_INT 0
9156: PUSH
9157: LD_INT 0
9159: PUSH
9160: LD_INT 0
9162: PUSH
9163: LD_INT 0
9165: PUSH
9166: LD_INT 0
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
9179: LD_ADDR_LOC 17
9183: PUSH
9184: LD_INT 60
9186: PUSH
9187: LD_INT 47
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 82
9196: PUSH
9197: LD_INT 26
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: PUSH
9204: LD_INT 124
9206: PUSH
9207: LD_INT 45
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PUSH
9214: LD_INT 147
9216: PUSH
9217: LD_INT 90
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_INT 126
9226: PUSH
9227: LD_INT 112
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: LD_INT 84
9236: PUSH
9237: LD_INT 92
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: PUSH
9244: LD_INT 106
9246: PUSH
9247: LD_INT 73
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PUSH
9254: LD_INT 106
9256: PUSH
9257: LD_INT 73
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: ST_TO_ADDR
// ClearHumansKilled ;
9274: CALL_OW 516
// enable ( 200 ) ;
9278: LD_INT 200
9280: ENABLE_MARKED
// end ; end_of_file
9281: LD_VAR 0 1
9285: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
9286: LD_INT 0
9288: PPUSH
9289: PPUSH
// if ( not IAmSpec ) then
9290: CALL_OW 531
9294: NOT
9295: IFFALSE 9311
// Result := Limits_Info ^  ;
9297: LD_ADDR_VAR 0 1
9301: PUSH
9302: LD_LOC 25
9306: PUSH
9307: LD_STRING 
9309: ADD
9310: ST_TO_ADDR
// for i := 1 to 8 do
9311: LD_ADDR_VAR 0 2
9315: PUSH
9316: DOUBLE
9317: LD_INT 1
9319: DEC
9320: ST_TO_ADDR
9321: LD_INT 8
9323: PUSH
9324: FOR_TO
9325: IFFALSE 9370
// if Cheaters [ i ] then
9327: LD_LOC 26
9331: PUSH
9332: LD_VAR 0 2
9336: ARRAY
9337: IFFALSE 9368
// Result := Result ^ [ #Cheater , i , i ] ;
9339: LD_ADDR_VAR 0 1
9343: PUSH
9344: LD_VAR 0 1
9348: PUSH
9349: LD_STRING #Cheater
9351: PUSH
9352: LD_VAR 0 2
9356: PUSH
9357: LD_VAR 0 2
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: LIST
9366: ADD
9367: ST_TO_ADDR
9368: GO 9324
9370: POP
9371: POP
// end ;
9372: LD_VAR 0 1
9376: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9377: LD_INT 0
9379: PPUSH
9380: PPUSH
9381: PPUSH
9382: PPUSH
9383: PPUSH
// if game_type in [ 10 , 11 ] then
9384: LD_EXP 39
9388: PUSH
9389: LD_INT 10
9391: PUSH
9392: LD_INT 11
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: IN
9399: IFFALSE 9415
// def_game_rules = def_game_rules + 1 ;
9401: LD_ADDR_EXP 40
9405: PUSH
9406: LD_EXP 40
9410: PUSH
9411: LD_INT 1
9413: PLUS
9414: ST_TO_ADDR
// case def_game_rules of 0 :
9415: LD_EXP 40
9419: PUSH
9420: LD_INT 0
9422: DOUBLE
9423: EQUAL
9424: IFTRUE 9428
9426: GO 9433
9428: POP
// exit ; 1 :
9429: GO 11483
9431: GO 11383
9433: LD_INT 1
9435: DOUBLE
9436: EQUAL
9437: IFTRUE 9441
9439: GO 9657
9441: POP
// begin def_base_level := 2 ;
9442: LD_ADDR_EXP 41
9446: PUSH
9447: LD_INT 2
9449: ST_TO_ADDR
// def_amount_of_people := 11 ;
9450: LD_ADDR_EXP 42
9454: PUSH
9455: LD_INT 11
9457: ST_TO_ADDR
// def_skill_level := 1 ;
9458: LD_ADDR_EXP 43
9462: PUSH
9463: LD_INT 1
9465: ST_TO_ADDR
// def_starting_resources := 2 ;
9466: LD_ADDR_EXP 44
9470: PUSH
9471: LD_INT 2
9473: ST_TO_ADDR
// def_shipments_density := 26 ;
9474: LD_ADDR_EXP 45
9478: PUSH
9479: LD_INT 26
9481: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9482: LD_ADDR_EXP 46
9486: PUSH
9487: LD_INT 0
9489: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9490: LD_ADDR_EXP 47
9494: PUSH
9495: LD_INT 1
9497: ST_TO_ADDR
// def_shared_vision := 1 ;
9498: LD_ADDR_EXP 48
9502: PUSH
9503: LD_INT 1
9505: ST_TO_ADDR
// def_morale_flags := 3 ;
9506: LD_ADDR_EXP 49
9510: PUSH
9511: LD_INT 3
9513: ST_TO_ADDR
// def_siberite_detection := 1 ;
9514: LD_ADDR_EXP 50
9518: PUSH
9519: LD_INT 1
9521: ST_TO_ADDR
// def_people_respawning := 1 ;
9522: LD_ADDR_EXP 51
9526: PUSH
9527: LD_INT 1
9529: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9530: LD_ADDR_EXP 52
9534: PUSH
9535: LD_INT 1
9537: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9538: LD_ADDR_EXP 53
9542: PUSH
9543: LD_INT 0
9545: ST_TO_ADDR
// def_builduptime := 6 ;
9546: LD_ADDR_EXP 54
9550: PUSH
9551: LD_INT 6
9553: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9554: LD_ADDR_VAR 0 2
9558: PUSH
9559: EMPTY
9560: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9561: LD_ADDR_VAR 0 3
9565: PUSH
9566: EMPTY
9567: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9568: LD_ADDR_LOC 20
9572: PUSH
9573: EMPTY
9574: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9575: LD_ADDR_LOC 21
9579: PUSH
9580: EMPTY
9581: ST_TO_ADDR
// Banned_Controls := [ ] ;
9582: LD_ADDR_LOC 22
9586: PUSH
9587: EMPTY
9588: ST_TO_ADDR
// Banned_Engines := [ ] ;
9589: LD_ADDR_LOC 23
9593: PUSH
9594: EMPTY
9595: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9596: LD_ADDR_LOC 18
9600: PUSH
9601: LD_INT 37
9603: PUSH
9604: EMPTY
9605: LIST
9606: PUSH
9607: LD_INT 4
9609: PUSH
9610: LD_INT 5
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 31
9619: PUSH
9620: LD_INT 32
9622: PUSH
9623: LD_INT 33
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: LIST
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: LIST
9635: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9636: LD_ADDR_LOC 19
9640: PUSH
9641: LD_INT 2
9643: PUSH
9644: LD_INT 2
9646: PUSH
9647: LD_INT 4
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: ST_TO_ADDR
// end ; 2 :
9655: GO 11383
9657: LD_INT 2
9659: DOUBLE
9660: EQUAL
9661: IFTRUE 9665
9663: GO 9874
9665: POP
// begin def_base_level := 1 ;
9666: LD_ADDR_EXP 41
9670: PUSH
9671: LD_INT 1
9673: ST_TO_ADDR
// def_amount_of_people := 11 ;
9674: LD_ADDR_EXP 42
9678: PUSH
9679: LD_INT 11
9681: ST_TO_ADDR
// def_skill_level := 3 ;
9682: LD_ADDR_EXP 43
9686: PUSH
9687: LD_INT 3
9689: ST_TO_ADDR
// def_starting_resources := 3 ;
9690: LD_ADDR_EXP 44
9694: PUSH
9695: LD_INT 3
9697: ST_TO_ADDR
// def_shipments_density := 51 ;
9698: LD_ADDR_EXP 45
9702: PUSH
9703: LD_INT 51
9705: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9706: LD_ADDR_EXP 46
9710: PUSH
9711: LD_INT 1
9713: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9714: LD_ADDR_EXP 47
9718: PUSH
9719: LD_INT 2
9721: ST_TO_ADDR
// def_shared_vision := 1 ;
9722: LD_ADDR_EXP 48
9726: PUSH
9727: LD_INT 1
9729: ST_TO_ADDR
// def_morale_flags := 0 ;
9730: LD_ADDR_EXP 49
9734: PUSH
9735: LD_INT 0
9737: ST_TO_ADDR
// def_siberite_detection := 1 ;
9738: LD_ADDR_EXP 50
9742: PUSH
9743: LD_INT 1
9745: ST_TO_ADDR
// def_people_respawning := 0 ;
9746: LD_ADDR_EXP 51
9750: PUSH
9751: LD_INT 0
9753: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9754: LD_ADDR_EXP 52
9758: PUSH
9759: LD_INT 0
9761: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9762: LD_ADDR_EXP 53
9766: PUSH
9767: LD_INT 0
9769: ST_TO_ADDR
// def_builduptime := 6 ;
9770: LD_ADDR_EXP 54
9774: PUSH
9775: LD_INT 6
9777: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9778: LD_ADDR_VAR 0 2
9782: PUSH
9783: LD_INT 1
9785: PUSH
9786: EMPTY
9787: LIST
9788: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9789: LD_ADDR_VAR 0 3
9793: PUSH
9794: EMPTY
9795: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9796: LD_ADDR_LOC 20
9800: PUSH
9801: EMPTY
9802: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9803: LD_ADDR_LOC 21
9807: PUSH
9808: EMPTY
9809: ST_TO_ADDR
// Banned_Controls := [ ] ;
9810: LD_ADDR_LOC 22
9814: PUSH
9815: EMPTY
9816: ST_TO_ADDR
// Banned_Engines := [ ] ;
9817: LD_ADDR_LOC 23
9821: PUSH
9822: EMPTY
9823: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9824: LD_ADDR_LOC 18
9828: PUSH
9829: LD_INT 4
9831: PUSH
9832: LD_INT 5
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PUSH
9839: LD_INT 31
9841: PUSH
9842: LD_INT 32
9844: PUSH
9845: LD_INT 33
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9857: LD_ADDR_LOC 19
9861: PUSH
9862: LD_INT 1
9864: PUSH
9865: LD_INT 2
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: ST_TO_ADDR
// end ; 3 :
9872: GO 11383
9874: LD_INT 3
9876: DOUBLE
9877: EQUAL
9878: IFTRUE 9882
9880: GO 10125
9882: POP
// begin def_base_level := 1 ;
9883: LD_ADDR_EXP 41
9887: PUSH
9888: LD_INT 1
9890: ST_TO_ADDR
// def_amount_of_people := 11 ;
9891: LD_ADDR_EXP 42
9895: PUSH
9896: LD_INT 11
9898: ST_TO_ADDR
// def_skill_level := 3 ;
9899: LD_ADDR_EXP 43
9903: PUSH
9904: LD_INT 3
9906: ST_TO_ADDR
// def_starting_resources := 3 ;
9907: LD_ADDR_EXP 44
9911: PUSH
9912: LD_INT 3
9914: ST_TO_ADDR
// def_shipments_density := 1 ;
9915: LD_ADDR_EXP 45
9919: PUSH
9920: LD_INT 1
9922: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9923: LD_ADDR_EXP 46
9927: PUSH
9928: LD_INT 0
9930: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9931: LD_ADDR_EXP 47
9935: PUSH
9936: LD_INT 1
9938: ST_TO_ADDR
// def_shared_vision := 1 ;
9939: LD_ADDR_EXP 48
9943: PUSH
9944: LD_INT 1
9946: ST_TO_ADDR
// def_morale_flags := 0 ;
9947: LD_ADDR_EXP 49
9951: PUSH
9952: LD_INT 0
9954: ST_TO_ADDR
// def_siberite_detection := 1 ;
9955: LD_ADDR_EXP 50
9959: PUSH
9960: LD_INT 1
9962: ST_TO_ADDR
// def_people_respawning := 0 ;
9963: LD_ADDR_EXP 51
9967: PUSH
9968: LD_INT 0
9970: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9971: LD_ADDR_EXP 52
9975: PUSH
9976: LD_INT 2
9978: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9979: LD_ADDR_EXP 53
9983: PUSH
9984: LD_INT 0
9986: ST_TO_ADDR
// def_builduptime := 6 ;
9987: LD_ADDR_EXP 54
9991: PUSH
9992: LD_INT 6
9994: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9995: LD_ADDR_VAR 0 2
9999: PUSH
10000: LD_INT 23
10002: PUSH
10003: EMPTY
10004: LIST
10005: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
10006: LD_ADDR_VAR 0 3
10010: PUSH
10011: LD_INT 2
10013: PUSH
10014: LD_INT 37
10016: PUSH
10017: LD_INT 32
10019: PUSH
10020: LD_INT 33
10022: PUSH
10023: LD_INT 36
10025: PUSH
10026: LD_INT 16
10028: PUSH
10029: LD_INT 23
10031: PUSH
10032: LD_INT 21
10034: PUSH
10035: LD_INT 18
10037: PUSH
10038: LD_INT 22
10040: PUSH
10041: LD_INT 20
10043: PUSH
10044: LD_INT 19
10046: PUSH
10047: LD_INT 25
10049: PUSH
10050: LD_INT 17
10052: PUSH
10053: LD_INT 24
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10073: LD_ADDR_LOC 20
10077: PUSH
10078: EMPTY
10079: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10080: LD_ADDR_LOC 21
10084: PUSH
10085: EMPTY
10086: ST_TO_ADDR
// Banned_Controls := [ ] ;
10087: LD_ADDR_LOC 22
10091: PUSH
10092: EMPTY
10093: ST_TO_ADDR
// Banned_Engines := [ ] ;
10094: LD_ADDR_LOC 23
10098: PUSH
10099: EMPTY
10100: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10101: LD_ADDR_LOC 18
10105: PUSH
10106: EMPTY
10107: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10108: LD_ADDR_LOC 19
10112: PUSH
10113: EMPTY
10114: ST_TO_ADDR
// No_Mechs := true ;
10115: LD_ADDR_EXP 55
10119: PUSH
10120: LD_INT 1
10122: ST_TO_ADDR
// end ; 4 :
10123: GO 11383
10125: LD_INT 4
10127: DOUBLE
10128: EQUAL
10129: IFTRUE 10133
10131: GO 10308
10133: POP
// begin def_base_level := 1 ;
10134: LD_ADDR_EXP 41
10138: PUSH
10139: LD_INT 1
10141: ST_TO_ADDR
// def_amount_of_people := 11 ;
10142: LD_ADDR_EXP 42
10146: PUSH
10147: LD_INT 11
10149: ST_TO_ADDR
// def_skill_level := 3 ;
10150: LD_ADDR_EXP 43
10154: PUSH
10155: LD_INT 3
10157: ST_TO_ADDR
// def_starting_resources := 3 ;
10158: LD_ADDR_EXP 44
10162: PUSH
10163: LD_INT 3
10165: ST_TO_ADDR
// def_shipments_density := 2 ;
10166: LD_ADDR_EXP 45
10170: PUSH
10171: LD_INT 2
10173: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10174: LD_ADDR_EXP 46
10178: PUSH
10179: LD_INT 1
10181: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10182: LD_ADDR_EXP 47
10186: PUSH
10187: LD_INT 2
10189: ST_TO_ADDR
// def_shared_vision := 1 ;
10190: LD_ADDR_EXP 48
10194: PUSH
10195: LD_INT 1
10197: ST_TO_ADDR
// def_morale_flags := 0 ;
10198: LD_ADDR_EXP 49
10202: PUSH
10203: LD_INT 0
10205: ST_TO_ADDR
// def_siberite_detection := 1 ;
10206: LD_ADDR_EXP 50
10210: PUSH
10211: LD_INT 1
10213: ST_TO_ADDR
// def_people_respawning := 0 ;
10214: LD_ADDR_EXP 51
10218: PUSH
10219: LD_INT 0
10221: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10222: LD_ADDR_EXP 52
10226: PUSH
10227: LD_INT 0
10229: ST_TO_ADDR
// def_siberite_bomb := 1 ;
10230: LD_ADDR_EXP 53
10234: PUSH
10235: LD_INT 1
10237: ST_TO_ADDR
// def_builduptime := 11 ;
10238: LD_ADDR_EXP 54
10242: PUSH
10243: LD_INT 11
10245: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10246: LD_ADDR_VAR 0 2
10250: PUSH
10251: LD_INT 1
10253: PUSH
10254: EMPTY
10255: LIST
10256: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10257: LD_ADDR_VAR 0 3
10261: PUSH
10262: EMPTY
10263: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10264: LD_ADDR_LOC 20
10268: PUSH
10269: EMPTY
10270: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10271: LD_ADDR_LOC 21
10275: PUSH
10276: EMPTY
10277: ST_TO_ADDR
// Banned_Controls := [ ] ;
10278: LD_ADDR_LOC 22
10282: PUSH
10283: EMPTY
10284: ST_TO_ADDR
// Banned_Engines := [ ] ;
10285: LD_ADDR_LOC 23
10289: PUSH
10290: EMPTY
10291: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10292: LD_ADDR_LOC 18
10296: PUSH
10297: EMPTY
10298: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10299: LD_ADDR_LOC 19
10303: PUSH
10304: EMPTY
10305: ST_TO_ADDR
// end ; 5 :
10306: GO 11383
10308: LD_INT 5
10310: DOUBLE
10311: EQUAL
10312: IFTRUE 10316
10314: GO 10565
10316: POP
// begin def_base_level := 0 ;
10317: LD_ADDR_EXP 41
10321: PUSH
10322: LD_INT 0
10324: ST_TO_ADDR
// def_amount_of_people := 5 ;
10325: LD_ADDR_EXP 42
10329: PUSH
10330: LD_INT 5
10332: ST_TO_ADDR
// def_skill_level := 0 ;
10333: LD_ADDR_EXP 43
10337: PUSH
10338: LD_INT 0
10340: ST_TO_ADDR
// def_starting_resources := 0 ;
10341: LD_ADDR_EXP 44
10345: PUSH
10346: LD_INT 0
10348: ST_TO_ADDR
// def_shipments_density := 0 ;
10349: LD_ADDR_EXP 45
10353: PUSH
10354: LD_INT 0
10356: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10357: LD_ADDR_EXP 46
10361: PUSH
10362: LD_INT 0
10364: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10365: LD_ADDR_EXP 47
10369: PUSH
10370: LD_INT 0
10372: ST_TO_ADDR
// def_shared_vision := 1 ;
10373: LD_ADDR_EXP 48
10377: PUSH
10378: LD_INT 1
10380: ST_TO_ADDR
// def_morale_flags := 0 ;
10381: LD_ADDR_EXP 49
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// def_siberite_detection := 0 ;
10389: LD_ADDR_EXP 50
10393: PUSH
10394: LD_INT 0
10396: ST_TO_ADDR
// def_people_respawning := 1 ;
10397: LD_ADDR_EXP 51
10401: PUSH
10402: LD_INT 1
10404: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10405: LD_ADDR_EXP 52
10409: PUSH
10410: LD_INT 1
10412: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10413: LD_ADDR_EXP 53
10417: PUSH
10418: LD_INT 0
10420: ST_TO_ADDR
// def_builduptime := 0 ;
10421: LD_ADDR_EXP 54
10425: PUSH
10426: LD_INT 0
10428: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10429: LD_ADDR_VAR 0 2
10433: PUSH
10434: LD_INT 10
10436: PUSH
10437: LD_INT 3
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10444: LD_ADDR_VAR 0 3
10448: PUSH
10449: LD_INT 12
10451: PUSH
10452: LD_INT 11
10454: PUSH
10455: LD_INT 14
10457: PUSH
10458: LD_INT 13
10460: PUSH
10461: LD_INT 5
10463: PUSH
10464: LD_INT 24
10466: PUSH
10467: LD_INT 21
10469: PUSH
10470: LD_INT 33
10472: PUSH
10473: LD_INT 36
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10487: LD_ADDR_LOC 20
10491: PUSH
10492: LD_INT 31
10494: PUSH
10495: EMPTY
10496: LIST
10497: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10498: LD_ADDR_LOC 21
10502: PUSH
10503: EMPTY
10504: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10505: LD_ADDR_LOC 22
10509: PUSH
10510: LD_INT 2
10512: PUSH
10513: EMPTY
10514: LIST
10515: ST_TO_ADDR
// Banned_Engines := [ ] ;
10516: LD_ADDR_LOC 23
10520: PUSH
10521: EMPTY
10522: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10523: LD_ADDR_LOC 18
10527: PUSH
10528: LD_INT 4
10530: PUSH
10531: EMPTY
10532: LIST
10533: PUSH
10534: LD_INT 31
10536: PUSH
10537: LD_INT 32
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10548: LD_ADDR_LOC 19
10552: PUSH
10553: LD_INT 1
10555: PUSH
10556: LD_INT 1
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: ST_TO_ADDR
// end ; 6 :
10563: GO 11383
10565: LD_INT 6
10567: DOUBLE
10568: EQUAL
10569: IFTRUE 10573
10571: GO 10776
10573: POP
// begin def_base_level := 1 ;
10574: LD_ADDR_EXP 41
10578: PUSH
10579: LD_INT 1
10581: ST_TO_ADDR
// def_amount_of_people := 11 ;
10582: LD_ADDR_EXP 42
10586: PUSH
10587: LD_INT 11
10589: ST_TO_ADDR
// def_skill_level := 3 ;
10590: LD_ADDR_EXP 43
10594: PUSH
10595: LD_INT 3
10597: ST_TO_ADDR
// def_starting_resources := 3 ;
10598: LD_ADDR_EXP 44
10602: PUSH
10603: LD_INT 3
10605: ST_TO_ADDR
// def_shipments_density := 1 ;
10606: LD_ADDR_EXP 45
10610: PUSH
10611: LD_INT 1
10613: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10614: LD_ADDR_EXP 46
10618: PUSH
10619: LD_INT 0
10621: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10622: LD_ADDR_EXP 47
10626: PUSH
10627: LD_INT 1
10629: ST_TO_ADDR
// def_shared_vision := 1 ;
10630: LD_ADDR_EXP 48
10634: PUSH
10635: LD_INT 1
10637: ST_TO_ADDR
// def_morale_flags := 0 ;
10638: LD_ADDR_EXP 49
10642: PUSH
10643: LD_INT 0
10645: ST_TO_ADDR
// def_siberite_detection := 1 ;
10646: LD_ADDR_EXP 50
10650: PUSH
10651: LD_INT 1
10653: ST_TO_ADDR
// def_people_respawning := 2 ;
10654: LD_ADDR_EXP 51
10658: PUSH
10659: LD_INT 2
10661: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10662: LD_ADDR_EXP 52
10666: PUSH
10667: LD_INT 1
10669: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10670: LD_ADDR_EXP 53
10674: PUSH
10675: LD_INT 0
10677: ST_TO_ADDR
// def_builduptime := 6 ;
10678: LD_ADDR_EXP 54
10682: PUSH
10683: LD_INT 6
10685: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10686: LD_ADDR_VAR 0 2
10690: PUSH
10691: LD_INT 23
10693: PUSH
10694: EMPTY
10695: LIST
10696: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10697: LD_ADDR_VAR 0 3
10701: PUSH
10702: LD_INT 2
10704: PUSH
10705: LD_INT 37
10707: PUSH
10708: LD_INT 31
10710: PUSH
10711: LD_INT 32
10713: PUSH
10714: LD_INT 33
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10724: LD_ADDR_LOC 20
10728: PUSH
10729: EMPTY
10730: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10731: LD_ADDR_LOC 21
10735: PUSH
10736: EMPTY
10737: ST_TO_ADDR
// Banned_Controls := [ ] ;
10738: LD_ADDR_LOC 22
10742: PUSH
10743: EMPTY
10744: ST_TO_ADDR
// Banned_Engines := [ ] ;
10745: LD_ADDR_LOC 23
10749: PUSH
10750: EMPTY
10751: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10752: LD_ADDR_LOC 18
10756: PUSH
10757: EMPTY
10758: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10759: LD_ADDR_LOC 19
10763: PUSH
10764: EMPTY
10765: ST_TO_ADDR
// No_Mechs := true ;
10766: LD_ADDR_EXP 55
10770: PUSH
10771: LD_INT 1
10773: ST_TO_ADDR
// end ; 7 :
10774: GO 11383
10776: LD_INT 7
10778: DOUBLE
10779: EQUAL
10780: IFTRUE 10784
10782: GO 10982
10784: POP
// begin def_base_level := 1 ;
10785: LD_ADDR_EXP 41
10789: PUSH
10790: LD_INT 1
10792: ST_TO_ADDR
// def_amount_of_people := 20 ;
10793: LD_ADDR_EXP 42
10797: PUSH
10798: LD_INT 20
10800: ST_TO_ADDR
// def_skill_level := 3 ;
10801: LD_ADDR_EXP 43
10805: PUSH
10806: LD_INT 3
10808: ST_TO_ADDR
// def_starting_resources := 3 ;
10809: LD_ADDR_EXP 44
10813: PUSH
10814: LD_INT 3
10816: ST_TO_ADDR
// def_shipments_density := 1 ;
10817: LD_ADDR_EXP 45
10821: PUSH
10822: LD_INT 1
10824: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10825: LD_ADDR_EXP 46
10829: PUSH
10830: LD_INT 1
10832: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10833: LD_ADDR_EXP 47
10837: PUSH
10838: LD_INT 2
10840: ST_TO_ADDR
// def_shared_vision := 1 ;
10841: LD_ADDR_EXP 48
10845: PUSH
10846: LD_INT 1
10848: ST_TO_ADDR
// def_morale_flags := 0 ;
10849: LD_ADDR_EXP 49
10853: PUSH
10854: LD_INT 0
10856: ST_TO_ADDR
// def_siberite_detection := 1 ;
10857: LD_ADDR_EXP 50
10861: PUSH
10862: LD_INT 1
10864: ST_TO_ADDR
// def_people_respawning := 0 ;
10865: LD_ADDR_EXP 51
10869: PUSH
10870: LD_INT 0
10872: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10873: LD_ADDR_EXP 52
10877: PUSH
10878: LD_INT 1
10880: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10881: LD_ADDR_EXP 53
10885: PUSH
10886: LD_INT 0
10888: ST_TO_ADDR
// def_builduptime := 6 ;
10889: LD_ADDR_EXP 54
10893: PUSH
10894: LD_INT 6
10896: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10897: LD_ADDR_VAR 0 2
10901: PUSH
10902: LD_INT 23
10904: PUSH
10905: EMPTY
10906: LIST
10907: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
10908: LD_ADDR_VAR 0 3
10912: PUSH
10913: LD_INT 37
10915: PUSH
10916: EMPTY
10917: LIST
10918: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10919: LD_ADDR_LOC 20
10923: PUSH
10924: EMPTY
10925: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10926: LD_ADDR_LOC 21
10930: PUSH
10931: EMPTY
10932: ST_TO_ADDR
// Banned_Controls := [ ] ;
10933: LD_ADDR_LOC 22
10937: PUSH
10938: EMPTY
10939: ST_TO_ADDR
// Banned_Engines := [ ] ;
10940: LD_ADDR_LOC 23
10944: PUSH
10945: EMPTY
10946: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10947: LD_ADDR_LOC 18
10951: PUSH
10952: LD_INT 31
10954: PUSH
10955: LD_INT 32
10957: PUSH
10958: LD_INT 33
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: LIST
10965: PUSH
10966: EMPTY
10967: LIST
10968: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
10969: LD_ADDR_LOC 19
10973: PUSH
10974: LD_INT 10
10976: PUSH
10977: EMPTY
10978: LIST
10979: ST_TO_ADDR
// end ; 8 :
10980: GO 11383
10982: LD_INT 8
10984: DOUBLE
10985: EQUAL
10986: IFTRUE 10990
10988: GO 11382
10990: POP
// begin def_base_level := 0 ;
10991: LD_ADDR_EXP 41
10995: PUSH
10996: LD_INT 0
10998: ST_TO_ADDR
// def_amount_of_people := 8 ;
10999: LD_ADDR_EXP 42
11003: PUSH
11004: LD_INT 8
11006: ST_TO_ADDR
// def_skill_level := 0 ;
11007: LD_ADDR_EXP 43
11011: PUSH
11012: LD_INT 0
11014: ST_TO_ADDR
// def_starting_resources := 2 ;
11015: LD_ADDR_EXP 44
11019: PUSH
11020: LD_INT 2
11022: ST_TO_ADDR
// def_shipments_density := 1 ;
11023: LD_ADDR_EXP 45
11027: PUSH
11028: LD_INT 1
11030: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11031: LD_ADDR_EXP 46
11035: PUSH
11036: LD_INT 0
11038: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11039: LD_ADDR_EXP 47
11043: PUSH
11044: LD_INT 0
11046: ST_TO_ADDR
// def_shared_vision := 1 ;
11047: LD_ADDR_EXP 48
11051: PUSH
11052: LD_INT 1
11054: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
11055: LD_ADDR_EXP 49
11059: PUSH
11060: LD_INT 0
11062: PPUSH
11063: LD_INT 2
11065: PPUSH
11066: CALL_OW 12
11070: ST_TO_ADDR
// def_siberite_detection := 0 ;
11071: LD_ADDR_EXP 50
11075: PUSH
11076: LD_INT 0
11078: ST_TO_ADDR
// def_people_respawning := 0 ;
11079: LD_ADDR_EXP 51
11083: PUSH
11084: LD_INT 0
11086: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11087: LD_ADDR_EXP 52
11091: PUSH
11092: LD_INT 2
11094: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11095: LD_ADDR_EXP 53
11099: PUSH
11100: LD_INT 0
11102: ST_TO_ADDR
// def_builduptime := 0 ;
11103: LD_ADDR_EXP 54
11107: PUSH
11108: LD_INT 0
11110: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
11111: LD_ADDR_VAR 0 2
11115: PUSH
11116: LD_INT 23
11118: PUSH
11119: LD_INT 20
11121: PUSH
11122: LD_INT 40
11124: PUSH
11125: LD_INT 47
11127: PUSH
11128: LD_INT 46
11130: PUSH
11131: LD_INT 39
11133: PUSH
11134: LD_INT 71
11136: PUSH
11137: LD_INT 34
11139: PUSH
11140: LD_INT 41
11142: PUSH
11143: LD_INT 44
11145: PUSH
11146: LD_INT 17
11148: PUSH
11149: LD_INT 16
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
11166: LD_ADDR_VAR 0 3
11170: PUSH
11171: LD_INT 37
11173: PUSH
11174: LD_INT 5
11176: PUSH
11177: LD_INT 13
11179: PUSH
11180: LD_INT 34
11182: PUSH
11183: LD_INT 12
11185: PUSH
11186: LD_INT 15
11188: PUSH
11189: LD_INT 11
11191: PUSH
11192: LD_INT 14
11194: PUSH
11195: LD_INT 29
11197: PUSH
11198: LD_INT 30
11200: PUSH
11201: LD_INT 28
11203: PUSH
11204: LD_INT 24
11206: PUSH
11207: LD_INT 25
11209: PUSH
11210: LD_INT 20
11212: PUSH
11213: LD_INT 21
11215: PUSH
11216: LD_INT 22
11218: PUSH
11219: LD_INT 36
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11241: LD_ADDR_LOC 20
11245: PUSH
11246: EMPTY
11247: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
11248: LD_ADDR_LOC 21
11252: PUSH
11253: LD_INT 14
11255: PUSH
11256: EMPTY
11257: LIST
11258: ST_TO_ADDR
// Banned_Controls := [ ] ;
11259: LD_ADDR_LOC 22
11263: PUSH
11264: EMPTY
11265: ST_TO_ADDR
// Banned_Engines := [ ] ;
11266: LD_ADDR_LOC 23
11270: PUSH
11271: EMPTY
11272: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
11273: LD_ADDR_LOC 18
11277: PUSH
11278: LD_INT 31
11280: PUSH
11281: LD_INT 32
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 4
11290: PUSH
11291: EMPTY
11292: LIST
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
11298: LD_ADDR_LOC 19
11302: PUSH
11303: LD_INT 2
11305: PUSH
11306: LD_INT 1
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: ST_TO_ADDR
// for i := 1 to 8 do
11313: LD_ADDR_VAR 0 4
11317: PUSH
11318: DOUBLE
11319: LD_INT 1
11321: DEC
11322: ST_TO_ADDR
11323: LD_INT 8
11325: PUSH
11326: FOR_TO
11327: IFFALSE 11378
// if ( Side_Nations [ i ] = 3 ) then
11329: LD_EXP 19
11333: PUSH
11334: LD_VAR 0 4
11338: ARRAY
11339: PUSH
11340: LD_INT 3
11342: EQUAL
11343: IFFALSE 11376
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11345: LD_ADDR_EXP 19
11349: PUSH
11350: LD_EXP 19
11354: PPUSH
11355: LD_VAR 0 4
11359: PPUSH
11360: LD_INT 1
11362: PPUSH
11363: LD_INT 2
11365: PPUSH
11366: CALL_OW 12
11370: PPUSH
11371: CALL_OW 1
11375: ST_TO_ADDR
11376: GO 11326
11378: POP
11379: POP
// end ; end ;
11380: GO 11383
11382: POP
// for i := 1 to 8 do
11383: LD_ADDR_VAR 0 4
11387: PUSH
11388: DOUBLE
11389: LD_INT 1
11391: DEC
11392: ST_TO_ADDR
11393: LD_INT 8
11395: PUSH
11396: FOR_TO
11397: IFFALSE 11481
// if Side_Positions [ i ] then
11399: LD_EXP 18
11403: PUSH
11404: LD_VAR 0 4
11408: ARRAY
11409: IFFALSE 11479
// begin for j in Unavailable_Techs do
11411: LD_ADDR_VAR 0 5
11415: PUSH
11416: LD_VAR 0 2
11420: PUSH
11421: FOR_IN
11422: IFFALSE 11443
// SetTech ( j , i , 0 ) ;
11424: LD_VAR 0 5
11428: PPUSH
11429: LD_VAR 0 4
11433: PPUSH
11434: LD_INT 0
11436: PPUSH
11437: CALL_OW 322
11441: GO 11421
11443: POP
11444: POP
// for j in Unavailable_Builds do
11445: LD_ADDR_VAR 0 5
11449: PUSH
11450: LD_VAR 0 3
11454: PUSH
11455: FOR_IN
11456: IFFALSE 11477
// SetRestrict ( j , i , 0 ) ;
11458: LD_VAR 0 5
11462: PPUSH
11463: LD_VAR 0 4
11467: PPUSH
11468: LD_INT 0
11470: PPUSH
11471: CALL_OW 324
11475: GO 11455
11477: POP
11478: POP
// end ;
11479: GO 11396
11481: POP
11482: POP
// end ;
11483: LD_VAR 0 1
11487: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11488: LD_INT 0
11490: PPUSH
11491: PPUSH
11492: PPUSH
11493: PPUSH
11494: PPUSH
11495: PPUSH
11496: PPUSH
// for i := 1 to Restricted_Builds do
11497: LD_ADDR_VAR 0 2
11501: PUSH
11502: DOUBLE
11503: LD_INT 1
11505: DEC
11506: ST_TO_ADDR
11507: LD_LOC 18
11511: PUSH
11512: FOR_TO
11513: IFFALSE 11823
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11515: LD_LOC 18
11519: PUSH
11520: LD_VAR 0 2
11524: ARRAY
11525: PUSH
11526: LD_INT 1
11528: ARRAY
11529: PUSH
11530: LD_INT 31
11532: DOUBLE
11533: EQUAL
11534: IFTRUE 11550
11536: LD_INT 32
11538: DOUBLE
11539: EQUAL
11540: IFTRUE 11550
11542: LD_INT 33
11544: DOUBLE
11545: EQUAL
11546: IFTRUE 11550
11548: GO 11561
11550: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11551: LD_ADDR_VAR 0 6
11555: PUSH
11556: LD_STRING #Turrets
11558: ST_TO_ADDR
11559: GO 11606
11561: LD_INT 4
11563: DOUBLE
11564: EQUAL
11565: IFTRUE 11575
11567: LD_INT 5
11569: DOUBLE
11570: EQUAL
11571: IFTRUE 11575
11573: GO 11586
11575: POP
// btype := #Armouries ; b_Behemoth :
11576: LD_ADDR_VAR 0 6
11580: PUSH
11581: LD_STRING #Armouries
11583: ST_TO_ADDR
11584: GO 11606
11586: LD_INT 37
11588: DOUBLE
11589: EQUAL
11590: IFTRUE 11594
11592: GO 11605
11594: POP
// btype := #Behemoths ; end ;
11595: LD_ADDR_VAR 0 6
11599: PUSH
11600: LD_STRING #Behemoths
11602: ST_TO_ADDR
11603: GO 11606
11605: POP
// list := [ ] ;
11606: LD_ADDR_VAR 0 7
11610: PUSH
11611: EMPTY
11612: ST_TO_ADDR
// for j := 1 to 8 do
11613: LD_ADDR_VAR 0 3
11617: PUSH
11618: DOUBLE
11619: LD_INT 1
11621: DEC
11622: ST_TO_ADDR
11623: LD_INT 8
11625: PUSH
11626: FOR_TO
11627: IFFALSE 11720
// if Side_Positions [ j ] then
11629: LD_EXP 18
11633: PUSH
11634: LD_VAR 0 3
11638: ARRAY
11639: IFFALSE 11718
// begin amount := 0 ;
11641: LD_ADDR_VAR 0 5
11645: PUSH
11646: LD_INT 0
11648: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11649: LD_ADDR_VAR 0 4
11653: PUSH
11654: LD_LOC 18
11658: PUSH
11659: LD_VAR 0 2
11663: ARRAY
11664: PUSH
11665: FOR_IN
11666: IFFALSE 11714
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11668: LD_ADDR_VAR 0 5
11672: PUSH
11673: LD_VAR 0 5
11677: PUSH
11678: LD_INT 22
11680: PUSH
11681: LD_VAR 0 3
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 30
11692: PUSH
11693: LD_VAR 0 4
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: PLUS
11711: ST_TO_ADDR
11712: GO 11665
11714: POP
11715: POP
// break ;
11716: GO 11720
// end ;
11718: GO 11626
11720: POP
11721: POP
// list := [ ] ;
11722: LD_ADDR_VAR 0 7
11726: PUSH
11727: EMPTY
11728: ST_TO_ADDR
// for j := 1 to 8 do
11729: LD_ADDR_VAR 0 3
11733: PUSH
11734: DOUBLE
11735: LD_INT 1
11737: DEC
11738: ST_TO_ADDR
11739: LD_INT 8
11741: PUSH
11742: FOR_TO
11743: IFFALSE 11763
// list := list ^ amount ;
11745: LD_ADDR_VAR 0 7
11749: PUSH
11750: LD_VAR 0 7
11754: PUSH
11755: LD_VAR 0 5
11759: ADD
11760: ST_TO_ADDR
11761: GO 11742
11763: POP
11764: POP
// Already_Built := Already_Built ^ [ list ] ;
11765: LD_ADDR_LOC 24
11769: PUSH
11770: LD_LOC 24
11774: PUSH
11775: LD_VAR 0 7
11779: PUSH
11780: EMPTY
11781: LIST
11782: ADD
11783: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11784: LD_ADDR_LOC 25
11788: PUSH
11789: LD_LOC 25
11793: PUSH
11794: LD_VAR 0 6
11798: PUSH
11799: LD_VAR 0 5
11803: PUSH
11804: LD_LOC 19
11808: PUSH
11809: LD_VAR 0 2
11813: ARRAY
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: LIST
11819: ADD
11820: ST_TO_ADDR
// end ;
11821: GO 11512
11823: POP
11824: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11825: LD_ADDR_LOC 26
11829: PUSH
11830: LD_INT 0
11832: PUSH
11833: LD_INT 0
11835: PUSH
11836: LD_INT 0
11838: PUSH
11839: LD_INT 0
11841: PUSH
11842: LD_INT 0
11844: PUSH
11845: LD_INT 0
11847: PUSH
11848: LD_INT 0
11850: PUSH
11851: LD_INT 0
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: ST_TO_ADDR
// if Limits_Info then
11864: LD_LOC 25
11868: IFFALSE 11884
// Limits_Info := #Limits ^ Limits_Info ;
11870: LD_ADDR_LOC 25
11874: PUSH
11875: LD_STRING #Limits
11877: PUSH
11878: LD_LOC 25
11882: ADD
11883: ST_TO_ADDR
// end ;
11884: LD_VAR 0 1
11888: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
11889: LD_INT 0
11891: PPUSH
11892: PPUSH
11893: PPUSH
11894: PPUSH
// for i := 1 to Restricted_Builds do
11895: LD_ADDR_VAR 0 7
11899: PUSH
11900: DOUBLE
11901: LD_INT 1
11903: DEC
11904: ST_TO_ADDR
11905: LD_LOC 18
11909: PUSH
11910: FOR_TO
11911: IFFALSE 12334
// if BType in Restricted_Builds [ i ] then
11913: LD_VAR 0 2
11917: PUSH
11918: LD_LOC 18
11922: PUSH
11923: LD_VAR 0 7
11927: ARRAY
11928: IN
11929: IFFALSE 12332
// begin if old_side then
11931: LD_VAR 0 4
11935: IFFALSE 12061
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
11937: LD_LOC 24
11941: PUSH
11942: LD_VAR 0 7
11946: ARRAY
11947: PUSH
11948: LD_VAR 0 3
11952: ARRAY
11953: PUSH
11954: LD_VAR 0 5
11958: PLUS
11959: PUSH
11960: LD_LOC 19
11964: PUSH
11965: LD_VAR 0 7
11969: ARRAY
11970: GREATER
11971: IFFALSE 11997
// begin SetSide ( un , old_side ) ;
11973: LD_VAR 0 1
11977: PPUSH
11978: LD_VAR 0 4
11982: PPUSH
11983: CALL_OW 235
// count := 0 ;
11987: LD_ADDR_VAR 0 5
11991: PUSH
11992: LD_INT 0
11994: ST_TO_ADDR
// end else
11995: GO 12061
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
11997: LD_ADDR_LOC 24
12001: PUSH
12002: LD_LOC 24
12006: PPUSH
12007: LD_VAR 0 7
12011: PPUSH
12012: LD_LOC 24
12016: PUSH
12017: LD_VAR 0 7
12021: ARRAY
12022: PPUSH
12023: LD_VAR 0 4
12027: PPUSH
12028: LD_LOC 24
12032: PUSH
12033: LD_VAR 0 7
12037: ARRAY
12038: PUSH
12039: LD_VAR 0 4
12043: ARRAY
12044: PUSH
12045: LD_VAR 0 5
12049: MINUS
12050: PPUSH
12051: CALL_OW 1
12055: PPUSH
12056: CALL_OW 1
12060: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
12061: LD_ADDR_LOC 24
12065: PUSH
12066: LD_LOC 24
12070: PPUSH
12071: LD_VAR 0 7
12075: PPUSH
12076: LD_LOC 24
12080: PUSH
12081: LD_VAR 0 7
12085: ARRAY
12086: PPUSH
12087: LD_VAR 0 3
12091: PPUSH
12092: LD_LOC 24
12096: PUSH
12097: LD_VAR 0 7
12101: ARRAY
12102: PUSH
12103: LD_VAR 0 3
12107: ARRAY
12108: PUSH
12109: LD_VAR 0 5
12113: PLUS
12114: PPUSH
12115: CALL_OW 1
12119: PPUSH
12120: CALL_OW 1
12124: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
12125: LD_VAR 0 5
12129: PUSH
12130: LD_INT 0
12132: NONEQUAL
12133: PUSH
12134: LD_VAR 0 3
12138: PUSH
12139: LD_OWVAR 2
12143: EQUAL
12144: AND
12145: IFFALSE 12188
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
12147: LD_ADDR_LOC 25
12151: PUSH
12152: LD_LOC 25
12156: PPUSH
12157: LD_INT 3
12159: PUSH
12160: LD_VAR 0 7
12164: MUL
12165: PPUSH
12166: LD_LOC 24
12170: PUSH
12171: LD_VAR 0 7
12175: ARRAY
12176: PUSH
12177: LD_VAR 0 3
12181: ARRAY
12182: PPUSH
12183: CALL_OW 1
12187: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
12188: LD_LOC 24
12192: PUSH
12193: LD_VAR 0 7
12197: ARRAY
12198: PUSH
12199: LD_VAR 0 3
12203: ARRAY
12204: PUSH
12205: LD_LOC 19
12209: PUSH
12210: LD_VAR 0 7
12214: ARRAY
12215: GREATER
12216: IFFALSE 12243
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
12218: LD_ADDR_LOC 26
12222: PUSH
12223: LD_LOC 26
12227: PPUSH
12228: LD_VAR 0 3
12232: PPUSH
12233: LD_INT 1
12235: PPUSH
12236: CALL_OW 1
12240: ST_TO_ADDR
// end else
12241: GO 12330
// begin for j := 1 to Restricted_Builds do
12243: LD_ADDR_VAR 0 8
12247: PUSH
12248: DOUBLE
12249: LD_INT 1
12251: DEC
12252: ST_TO_ADDR
12253: LD_LOC 18
12257: PUSH
12258: FOR_TO
12259: IFFALSE 12303
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
12261: LD_LOC 24
12265: PUSH
12266: LD_VAR 0 8
12270: ARRAY
12271: PUSH
12272: LD_VAR 0 3
12276: ARRAY
12277: PUSH
12278: LD_LOC 19
12282: PUSH
12283: LD_VAR 0 8
12287: ARRAY
12288: GREATER
12289: IFFALSE 12301
// begin Is_Cheater := true ;
12291: LD_ADDR_VAR 0 9
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// break ;
12299: GO 12303
// end ;
12301: GO 12258
12303: POP
12304: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
12305: LD_ADDR_LOC 26
12309: PUSH
12310: LD_LOC 26
12314: PPUSH
12315: LD_VAR 0 3
12319: PPUSH
12320: LD_VAR 0 9
12324: PPUSH
12325: CALL_OW 1
12329: ST_TO_ADDR
// end ; break ;
12330: GO 12334
// end ;
12332: GO 11910
12334: POP
12335: POP
// end ;
12336: LD_VAR 0 6
12340: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12341: LD_VAR 0 5
12345: PUSH
12346: LD_LOC 20
12350: IN
12351: PUSH
12352: LD_VAR 0 2
12356: PUSH
12357: LD_LOC 21
12361: IN
12362: OR
12363: PUSH
12364: LD_VAR 0 4
12368: PUSH
12369: LD_LOC 22
12373: IN
12374: OR
12375: PUSH
12376: LD_VAR 0 3
12380: PUSH
12381: LD_LOC 23
12385: IN
12386: OR
12387: IFFALSE 12398
// ComCancel ( factory ) ;
12389: LD_VAR 0 1
12393: PPUSH
12394: CALL_OW 127
// end ;
12398: PPOPN 5
12400: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12401: LD_VAR 0 2
12405: PUSH
12406: LD_LOC 20
12410: IN
12411: IFFALSE 12422
// ComCancel ( building ) ;
12413: LD_VAR 0 1
12417: PPUSH
12418: CALL_OW 127
// end ; end_of_file
12422: PPOPN 2
12424: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
12425: LD_INT 0
12427: PPUSH
12428: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12429: LD_ADDR_VAR 0 2
12433: PUSH
12434: LD_STRING #Multi1x1-Time
12436: PUSH
12437: LD_OWVAR 1
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: ST_TO_ADDR
// if WaitServerStrings then
12446: LD_EXP 57
12450: IFFALSE 12468
// AllStrings = AllStrings ^ WaitServerStrings ;
12452: LD_ADDR_VAR 0 2
12456: PUSH
12457: LD_VAR 0 2
12461: PUSH
12462: LD_EXP 57
12466: ADD
12467: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12468: LD_INT 0
12470: PUSH
12471: LD_EXP 15
12475: PUSH
12476: LD_OWVAR 1
12480: MINUS
12481: LESSEQUAL
12482: IFFALSE 12513
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12484: LD_ADDR_VAR 0 2
12488: PUSH
12489: LD_VAR 0 2
12493: PUSH
12494: LD_STRING #allowedsibbomb
12496: PUSH
12497: LD_EXP 15
12501: PUSH
12502: LD_OWVAR 1
12506: MINUS
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: ADD
12512: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
12513: LD_INT 0
12515: PUSH
12516: LD_EXP 60
12520: PUSH
12521: LD_OWVAR 1
12525: MINUS
12526: LESSEQUAL
12527: IFFALSE 12558
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
12529: LD_ADDR_VAR 0 2
12533: PUSH
12534: LD_VAR 0 2
12538: PUSH
12539: LD_STRING #builduptime
12541: PUSH
12542: LD_EXP 60
12546: PUSH
12547: LD_OWVAR 1
12551: MINUS
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: ADD
12557: ST_TO_ADDR
// if ( ExtraStrings ) then
12558: LD_EXP 56
12562: IFFALSE 12584
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12564: LD_ADDR_VAR 0 2
12568: PUSH
12569: LD_VAR 0 2
12573: PUSH
12574: LD_STRING 
12576: ADD
12577: PUSH
12578: LD_EXP 56
12582: ADD
12583: ST_TO_ADDR
// if ( LimitsStrings ) then
12584: CALL 9286 0 0
12588: IFFALSE 12610
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12590: LD_ADDR_VAR 0 2
12594: PUSH
12595: LD_VAR 0 2
12599: PUSH
12600: LD_STRING 
12602: ADD
12603: PUSH
12604: CALL 9286 0 0
12608: ADD
12609: ST_TO_ADDR
// if debug_strings then
12610: LD_OWVAR 48
12614: IFFALSE 12636
// AllStrings := AllStrings ^  ^ debug_strings ;
12616: LD_ADDR_VAR 0 2
12620: PUSH
12621: LD_VAR 0 2
12625: PUSH
12626: LD_STRING 
12628: ADD
12629: PUSH
12630: LD_OWVAR 48
12634: ADD
12635: ST_TO_ADDR
// Display_Strings := AllStrings ;
12636: LD_ADDR_OWVAR 47
12640: PUSH
12641: LD_VAR 0 2
12645: ST_TO_ADDR
// end ;
12646: LD_VAR 0 1
12650: RET
// every 0 0$1 do
12651: GO 12653
12653: DISABLE
// begin ShowTimer ;
12654: CALL 12425 0 0
// enable ;
12658: ENABLE
// end ; end_of_file
12659: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12660: LD_INT 0
12662: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12663: LD_VAR 0 1
12667: PPUSH
12668: CALL_OW 255
12672: PUSH
12673: LD_VAR 0 4
12677: EQUAL
12678: IFFALSE 12697
// begin SetAchievement ( ACH_RAD ) ;
12680: LD_STRING ACH_RAD
12682: PPUSH
12683: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12687: LD_STRING ACH_NL
12689: PPUSH
12690: LD_INT 1
12692: PPUSH
12693: CALL_OW 564
// end end ;
12697: LD_VAR 0 5
12701: RET
// export function SA_Win ( side ) ; begin
12702: LD_INT 0
12704: PPUSH
// case side of 1 :
12705: LD_VAR 0 1
12709: PUSH
12710: LD_INT 1
12712: DOUBLE
12713: EQUAL
12714: IFTRUE 12718
12716: GO 12731
12718: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12719: LD_STRING ACH_AH
12721: PPUSH
12722: LD_INT 1
12724: PPUSH
12725: CALL_OW 564
12729: GO 12894
12731: LD_INT 2
12733: DOUBLE
12734: EQUAL
12735: IFTRUE 12739
12737: GO 12752
12739: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12740: LD_STRING ACH_E
12742: PPUSH
12743: LD_INT 1
12745: PPUSH
12746: CALL_OW 564
12750: GO 12894
12752: LD_INT 3
12754: DOUBLE
12755: EQUAL
12756: IFTRUE 12760
12758: GO 12773
12760: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12761: LD_STRING ACH_OOL
12763: PPUSH
12764: LD_INT 1
12766: PPUSH
12767: CALL_OW 564
12771: GO 12894
12773: LD_INT 1
12775: PUSH
12776: LD_INT 2
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: DOUBLE
12783: EQUAL
12784: IFTRUE 12788
12786: GO 12813
12788: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12789: LD_STRING ACH_AH
12791: PPUSH
12792: LD_REAL  5.00000000000000E-0001
12795: PPUSH
12796: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12800: LD_STRING ACH_E
12802: PPUSH
12803: LD_REAL  5.00000000000000E-0001
12806: PPUSH
12807: CALL_OW 564
// end ; [ 2 , 3 ] :
12811: GO 12894
12813: LD_INT 2
12815: PUSH
12816: LD_INT 3
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: DOUBLE
12823: EQUAL
12824: IFTRUE 12828
12826: GO 12853
12828: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12829: LD_STRING ACH_OOL
12831: PPUSH
12832: LD_REAL  5.00000000000000E-0001
12835: PPUSH
12836: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12840: LD_STRING ACH_E
12842: PPUSH
12843: LD_REAL  5.00000000000000E-0001
12846: PPUSH
12847: CALL_OW 564
// end ; [ 3 , 1 ] :
12851: GO 12894
12853: LD_INT 3
12855: PUSH
12856: LD_INT 1
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: DOUBLE
12863: EQUAL
12864: IFTRUE 12868
12866: GO 12893
12868: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12869: LD_STRING ACH_AH
12871: PPUSH
12872: LD_REAL  5.00000000000000E-0001
12875: PPUSH
12876: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12880: LD_STRING ACH_OOL
12882: PPUSH
12883: LD_REAL  5.00000000000000E-0001
12886: PPUSH
12887: CALL_OW 564
// end ; end ;
12891: GO 12894
12893: POP
// end ; end_of_file
12894: LD_VAR 0 2
12898: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
12899: LD_INT 0
12901: PPUSH
12902: PPUSH
// enable ( 98 ) ;
12903: LD_INT 98
12905: ENABLE_MARKED
// GameEnded = false ;
12906: LD_ADDR_LOC 28
12910: PUSH
12911: LD_INT 0
12913: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12914: LD_ADDR_LOC 27
12918: PUSH
12919: LD_INT 0
12921: PUSH
12922: LD_INT 0
12924: PUSH
12925: LD_INT 0
12927: PUSH
12928: LD_INT 0
12930: PUSH
12931: LD_INT 0
12933: PUSH
12934: LD_INT 0
12936: PUSH
12937: LD_INT 0
12939: PUSH
12940: LD_INT 0
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: ST_TO_ADDR
// unfoged = false ;
12953: LD_ADDR_LOC 29
12957: PUSH
12958: LD_INT 0
12960: ST_TO_ADDR
// defeated_specs := [ ] ;
12961: LD_ADDR_LOC 30
12965: PUSH
12966: EMPTY
12967: ST_TO_ADDR
// for i = 1 to side_positions do
12968: LD_ADDR_VAR 0 2
12972: PUSH
12973: DOUBLE
12974: LD_INT 1
12976: DEC
12977: ST_TO_ADDR
12978: LD_EXP 18
12982: PUSH
12983: FOR_TO
12984: IFFALSE 13024
// if not side_positions [ i ] then
12986: LD_EXP 18
12990: PUSH
12991: LD_VAR 0 2
12995: ARRAY
12996: NOT
12997: IFFALSE 13022
// defeated = replace ( defeated , i , true ) ;
12999: LD_ADDR_LOC 27
13003: PUSH
13004: LD_LOC 27
13008: PPUSH
13009: LD_VAR 0 2
13013: PPUSH
13014: LD_INT 1
13016: PPUSH
13017: CALL_OW 1
13021: ST_TO_ADDR
13022: GO 12983
13024: POP
13025: POP
// end ;
13026: LD_VAR 0 1
13030: RET
// function CanWinLoose ; begin
13031: LD_INT 0
13033: PPUSH
// Result := true ;
13034: LD_ADDR_VAR 0 1
13038: PUSH
13039: LD_INT 1
13041: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
13042: CALL_OW 518
13046: PUSH
13047: CALL_OW 519
13051: PUSH
13052: LD_INT 0
13054: GREATER
13055: AND
13056: IFFALSE 13066
// Result := false ;
13058: LD_ADDR_VAR 0 1
13062: PUSH
13063: LD_INT 0
13065: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13066: CALL_OW 531
13070: PUSH
13071: CALL_OW 519
13075: PUSH
13076: LD_INT 1
13078: GREATER
13079: AND
13080: IFFALSE 13090
// Result := false ;
13082: LD_ADDR_VAR 0 1
13086: PUSH
13087: LD_INT 0
13089: ST_TO_ADDR
// end ;
13090: LD_VAR 0 1
13094: RET
// export function HasPower ( i ) ; var k , h ; begin
13095: LD_INT 0
13097: PPUSH
13098: PPUSH
13099: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
13100: LD_VAR 0 1
13104: PPUSH
13105: CALL_OW 108
13109: NOT
13110: PUSH
13111: LD_EXP 21
13115: PUSH
13116: LD_VAR 0 1
13120: ARRAY
13121: NOT
13122: AND
13123: PUSH
13124: LD_OWVAR 4
13128: AND
13129: IFFALSE 13141
// begin result = false ;
13131: LD_ADDR_VAR 0 2
13135: PUSH
13136: LD_INT 0
13138: ST_TO_ADDR
// end else
13139: GO 13436
// case def_win_rules of 0 :
13141: LD_EXP 30
13145: PUSH
13146: LD_INT 0
13148: DOUBLE
13149: EQUAL
13150: IFTRUE 13154
13152: GO 13317
13154: POP
// if def_people_respawning then
13155: LD_EXP 51
13159: IFFALSE 13250
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
13161: LD_ADDR_VAR 0 2
13165: PUSH
13166: LD_INT 22
13168: PUSH
13169: LD_VAR 0 1
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 2
13180: PUSH
13181: LD_INT 21
13183: PUSH
13184: LD_INT 1
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 33
13193: PUSH
13194: LD_INT 3
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: LD_INT 33
13203: PUSH
13204: LD_INT 5
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 30
13213: PUSH
13214: LD_INT 0
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 30
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PPUSH
13243: CALL_OW 69
13247: ST_TO_ADDR
13248: GO 13315
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
13250: LD_ADDR_VAR 0 2
13254: PUSH
13255: LD_INT 22
13257: PUSH
13258: LD_VAR 0 1
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 2
13269: PUSH
13270: LD_INT 21
13272: PUSH
13273: LD_INT 1
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PUSH
13280: LD_INT 33
13282: PUSH
13283: LD_INT 3
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: LD_INT 33
13292: PUSH
13293: LD_INT 5
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: ST_TO_ADDR
13315: GO 13436
13317: LD_INT 1
13319: DOUBLE
13320: EQUAL
13321: IFTRUE 13325
13323: GO 13364
13325: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
13326: LD_ADDR_VAR 0 2
13330: PUSH
13331: LD_INT 22
13333: PUSH
13334: LD_VAR 0 1
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: LD_INT 21
13345: PUSH
13346: LD_INT 1
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PPUSH
13357: CALL_OW 69
13361: ST_TO_ADDR
13362: GO 13436
13364: LD_INT 2
13366: DOUBLE
13367: EQUAL
13368: IFTRUE 13372
13370: GO 13435
13372: POP
// begin h = false ;
13373: LD_ADDR_VAR 0 4
13377: PUSH
13378: LD_INT 0
13380: ST_TO_ADDR
// for k in heroes [ i ] do
13381: LD_ADDR_VAR 0 3
13385: PUSH
13386: LD_EXP 31
13390: PUSH
13391: LD_VAR 0 1
13395: ARRAY
13396: PUSH
13397: FOR_IN
13398: IFFALSE 13421
// if IsLive ( k ) then
13400: LD_VAR 0 3
13404: PPUSH
13405: CALL_OW 300
13409: IFFALSE 13419
// h = true ;
13411: LD_ADDR_VAR 0 4
13415: PUSH
13416: LD_INT 1
13418: ST_TO_ADDR
13419: GO 13397
13421: POP
13422: POP
// Result := h ;
13423: LD_ADDR_VAR 0 2
13427: PUSH
13428: LD_VAR 0 4
13432: ST_TO_ADDR
// end ; end ;
13433: GO 13436
13435: POP
// end ;
13436: LD_VAR 0 2
13440: RET
// function AlliedSides ( i , j ) ; begin
13441: LD_INT 0
13443: PPUSH
// Result := false ;
13444: LD_ADDR_VAR 0 3
13448: PUSH
13449: LD_INT 0
13451: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
13452: LD_VAR 0 1
13456: PPUSH
13457: LD_VAR 0 2
13461: PPUSH
13462: CALL_OW 81
13466: PUSH
13467: LD_INT 1
13469: EQUAL
13470: PUSH
13471: LD_VAR 0 2
13475: PPUSH
13476: LD_VAR 0 1
13480: PPUSH
13481: CALL_OW 81
13485: PUSH
13486: LD_INT 1
13488: EQUAL
13489: AND
13490: PUSH
13491: LD_VAR 0 1
13495: PPUSH
13496: CALL_OW 83
13500: AND
13501: PUSH
13502: LD_VAR 0 2
13506: PPUSH
13507: CALL_OW 83
13511: AND
13512: IFFALSE 13522
// Result := true ;
13514: LD_ADDR_VAR 0 3
13518: PUSH
13519: LD_INT 1
13521: ST_TO_ADDR
// end ;
13522: LD_VAR 0 3
13526: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
13527: CALL 13031 0 0
13531: PUSH
13532: LD_LOC 28
13536: NOT
13537: AND
13538: IFFALSE 13554
13540: GO 13542
13542: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
13543: LD_ADDR_EXP 57
13547: PUSH
13548: LD_STRING #Player-Ended
13550: PUSH
13551: EMPTY
13552: LIST
13553: ST_TO_ADDR
13554: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
13555: CALL 13031 0 0
13559: PUSH
13560: LD_LOC 28
13564: AND
13565: IFFALSE 13574
13567: GO 13569
13569: DISABLE
// YouLostInMultiplayer ;
13570: CALL_OW 107
13574: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
13575: CALL 13031 0 0
13579: NOT
13580: PUSH
13581: CALL_OW 531
13585: NOT
13586: AND
13587: IFFALSE 13603
13589: GO 13591
13591: DISABLE
// WaitServerStrings = [ #server-wait ] ;
13592: LD_ADDR_EXP 57
13596: PUSH
13597: LD_STRING #server-wait
13599: PUSH
13600: EMPTY
13601: LIST
13602: ST_TO_ADDR
13603: END
// every 100 trigger IAmSpec do
13604: CALL_OW 531
13608: IFFALSE 13624
13610: GO 13612
13612: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
13613: LD_ADDR_EXP 57
13617: PUSH
13618: LD_STRING #Player-IAmSpec
13620: PUSH
13621: EMPTY
13622: LIST
13623: ST_TO_ADDR
13624: END
// every 100 trigger GameEnded and IAmSpec do
13625: LD_LOC 28
13629: PUSH
13630: CALL_OW 531
13634: AND
13635: IFFALSE 13644
13637: GO 13639
13639: DISABLE
// YouLostInMultiplayer ;
13640: CALL_OW 107
13644: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
13645: CALL 13031 0 0
13649: PUSH
13650: LD_LOC 28
13654: NOT
13655: AND
13656: IFFALSE 13672
13658: GO 13660
13660: DISABLE
// WaitServerStrings = [ $player-win ] ;
13661: LD_ADDR_EXP 57
13665: PUSH
13666: LD_STRING $player-win
13668: PUSH
13669: EMPTY
13670: LIST
13671: ST_TO_ADDR
13672: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
13673: CALL 13031 0 0
13677: PUSH
13678: LD_LOC 28
13682: AND
13683: IFFALSE 13707
13685: GO 13687
13687: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
13688: LD_EXP 19
13692: PUSH
13693: LD_OWVAR 7
13697: ARRAY
13698: PPUSH
13699: CALL 12702 0 1
// YouWinInMultiplayer ;
13703: CALL_OW 106
// end ;
13707: END
// every 100 trigger isEditor marked 401 do
13708: LD_OWVAR 84
13712: IFFALSE 13728
13714: GO 13716
13716: DISABLE
// Debug_Strings = [ You won ] ;
13717: LD_ADDR_OWVAR 48
13721: PUSH
13722: LD_STRING You won
13724: PUSH
13725: EMPTY
13726: LIST
13727: ST_TO_ADDR
13728: END
// every 100 trigger isEditor marked 400 do
13729: LD_OWVAR 84
13733: IFFALSE 13749
13735: GO 13737
13737: DISABLE
// Debug_Strings = [ You loss ] ;
13738: LD_ADDR_OWVAR 48
13742: PUSH
13743: LD_STRING You loss
13745: PUSH
13746: EMPTY
13747: LIST
13748: ST_TO_ADDR
13749: END
// every 100 marked 98 do var i , un ;
13750: GO 13752
13752: DISABLE
13753: LD_INT 0
13755: PPUSH
13756: PPUSH
// begin for i = 1 to side_positions do
13757: LD_ADDR_VAR 0 1
13761: PUSH
13762: DOUBLE
13763: LD_INT 1
13765: DEC
13766: ST_TO_ADDR
13767: LD_EXP 18
13771: PUSH
13772: FOR_TO
13773: IFFALSE 13860
// begin if side_positions [ i ] then
13775: LD_EXP 18
13779: PUSH
13780: LD_VAR 0 1
13784: ARRAY
13785: IFFALSE 13858
// if not HasPower ( i ) and not defeated [ i ] then
13787: LD_VAR 0 1
13791: PPUSH
13792: CALL 13095 0 1
13796: NOT
13797: PUSH
13798: LD_LOC 27
13802: PUSH
13803: LD_VAR 0 1
13807: ARRAY
13808: NOT
13809: AND
13810: IFFALSE 13858
// begin defeated = replace ( defeated , i , true ) ;
13812: LD_ADDR_LOC 27
13816: PUSH
13817: LD_LOC 27
13821: PPUSH
13822: LD_VAR 0 1
13826: PPUSH
13827: LD_INT 1
13829: PPUSH
13830: CALL_OW 1
13834: ST_TO_ADDR
// if i = mp_player_side then
13835: LD_VAR 0 1
13839: PUSH
13840: LD_OWVAR 7
13844: EQUAL
13845: IFFALSE 13858
// begin Multiplayer_Loose_Message ;
13847: CALL_OW 521
// SetPlayerSpectator ( ) ;
13851: CALL_OW 572
// enable ( 400 ) ;
13855: LD_INT 400
13857: ENABLE_MARKED
// end ; end ; end ;
13858: GO 13772
13860: POP
13861: POP
// DidGameEnd ;
13862: CALL 13877 0 0
// if not GameEnded then
13866: LD_LOC 28
13870: NOT
13871: IFFALSE 13874
// enable ;
13873: ENABLE
// end ;
13874: PPOPN 2
13876: END
// function DidGameEnd ; var i , k , enemy ; begin
13877: LD_INT 0
13879: PPUSH
13880: PPUSH
13881: PPUSH
13882: PPUSH
// enemy = [ ] ;
13883: LD_ADDR_VAR 0 4
13887: PUSH
13888: EMPTY
13889: ST_TO_ADDR
// for i = 1 to side_positions do
13890: LD_ADDR_VAR 0 2
13894: PUSH
13895: DOUBLE
13896: LD_INT 1
13898: DEC
13899: ST_TO_ADDR
13900: LD_EXP 18
13904: PUSH
13905: FOR_TO
13906: IFFALSE 14000
// if not defeated [ i ] then
13908: LD_LOC 27
13912: PUSH
13913: LD_VAR 0 2
13917: ARRAY
13918: NOT
13919: IFFALSE 13998
// for k = 1 to side_positions do
13921: LD_ADDR_VAR 0 3
13925: PUSH
13926: DOUBLE
13927: LD_INT 1
13929: DEC
13930: ST_TO_ADDR
13931: LD_EXP 18
13935: PUSH
13936: FOR_TO
13937: IFFALSE 13996
// if not defeated [ k ] then
13939: LD_LOC 27
13943: PUSH
13944: LD_VAR 0 3
13948: ARRAY
13949: NOT
13950: IFFALSE 13994
// if not AlliedSides ( i , k ) then
13952: LD_VAR 0 2
13956: PPUSH
13957: LD_VAR 0 3
13961: PPUSH
13962: CALL 13441 0 2
13966: NOT
13967: IFFALSE 13994
// enemy = enemy ^ [ i , k ] ;
13969: LD_ADDR_VAR 0 4
13973: PUSH
13974: LD_VAR 0 4
13978: PUSH
13979: LD_VAR 0 2
13983: PUSH
13984: LD_VAR 0 3
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: ADD
13993: ST_TO_ADDR
13994: GO 13936
13996: POP
13997: POP
13998: GO 13905
14000: POP
14001: POP
// if not enemy then
14002: LD_VAR 0 4
14006: NOT
14007: IFFALSE 14033
// begin GameEnded = true ;
14009: LD_ADDR_LOC 28
14013: PUSH
14014: LD_INT 1
14016: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
14017: LD_LOC 27
14021: PUSH
14022: LD_OWVAR 7
14026: ARRAY
14027: NOT
14028: IFFALSE 14033
// enable ( 401 ) ;
14030: LD_INT 401
14032: ENABLE_MARKED
// end ; end ;
14033: LD_VAR 0 1
14037: RET
// function unfog ; var k , friends ; begin
14038: LD_INT 0
14040: PPUSH
14041: PPUSH
14042: PPUSH
// for k = 1 to side_positions do
14043: LD_ADDR_VAR 0 2
14047: PUSH
14048: DOUBLE
14049: LD_INT 1
14051: DEC
14052: ST_TO_ADDR
14053: LD_EXP 18
14057: PUSH
14058: FOR_TO
14059: IFFALSE 14115
// if not defeated [ k ] then
14061: LD_LOC 27
14065: PUSH
14066: LD_VAR 0 2
14070: ARRAY
14071: NOT
14072: IFFALSE 14113
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
14074: LD_OWVAR 7
14078: PPUSH
14079: LD_VAR 0 2
14083: PPUSH
14084: CALL_OW 81
14088: PUSH
14089: LD_INT 1
14091: PUSH
14092: EMPTY
14093: LIST
14094: IN
14095: IFFALSE 14113
// friends = friends ^ k ;
14097: LD_ADDR_VAR 0 3
14101: PUSH
14102: LD_VAR 0 3
14106: PUSH
14107: LD_VAR 0 2
14111: ADD
14112: ST_TO_ADDR
14113: GO 14058
14115: POP
14116: POP
// if not friends then
14117: LD_VAR 0 3
14121: NOT
14122: IFFALSE 14136
// begin SetPlayerSpectator ( ) ;
14124: CALL_OW 572
// unfoged = true ;
14128: LD_ADDR_LOC 29
14132: PUSH
14133: LD_INT 1
14135: ST_TO_ADDR
// end ; end ;
14136: LD_VAR 0 1
14140: RET
// export function MakeGameEnd ; begin
14141: LD_INT 0
14143: PPUSH
// SetPlayerSpectator ( ) ;
14144: CALL_OW 572
// unfoged = true ;
14148: LD_ADDR_LOC 29
14152: PUSH
14153: LD_INT 1
14155: ST_TO_ADDR
// wait ( 0 0$5 ) ;
14156: LD_INT 175
14158: PPUSH
14159: CALL_OW 67
// GameEnded = true ;
14163: LD_ADDR_LOC 28
14167: PUSH
14168: LD_INT 1
14170: ST_TO_ADDR
// end ;
14171: LD_VAR 0 1
14175: RET
// export function GetGameEnded ; begin
14176: LD_INT 0
14178: PPUSH
// result = GameEnded ;
14179: LD_ADDR_VAR 0 1
14183: PUSH
14184: LD_LOC 28
14188: ST_TO_ADDR
// end ; end_of_file
14189: LD_VAR 0 1
14193: RET
// export function SetMpTechs ( ) ; var side , i ; begin
14194: LD_INT 0
14196: PPUSH
14197: PPUSH
14198: PPUSH
// for side = 1 to 8 do
14199: LD_ADDR_VAR 0 2
14203: PUSH
14204: DOUBLE
14205: LD_INT 1
14207: DEC
14208: ST_TO_ADDR
14209: LD_INT 8
14211: PUSH
14212: FOR_TO
14213: IFFALSE 14334
// begin for i = 1 to 72 do
14215: LD_ADDR_VAR 0 3
14219: PUSH
14220: DOUBLE
14221: LD_INT 1
14223: DEC
14224: ST_TO_ADDR
14225: LD_INT 72
14227: PUSH
14228: FOR_TO
14229: IFFALSE 14260
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
14231: LD_VAR 0 3
14235: PPUSH
14236: LD_VAR 0 2
14240: PPUSH
14241: LD_INT 0
14243: PPUSH
14244: LD_VAR 0 3
14248: PPUSH
14249: CALL_OW 565
14253: PPUSH
14254: CALL_OW 322
14258: GO 14228
14260: POP
14261: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
14262: LD_INT 73
14264: PPUSH
14265: LD_VAR 0 2
14269: PPUSH
14270: LD_INT 0
14272: PPUSH
14273: LD_INT 25
14275: PPUSH
14276: CALL_OW 565
14280: PPUSH
14281: CALL_OW 322
// for i = 0 to 40 do
14285: LD_ADDR_VAR 0 3
14289: PUSH
14290: DOUBLE
14291: LD_INT 0
14293: DEC
14294: ST_TO_ADDR
14295: LD_INT 40
14297: PUSH
14298: FOR_TO
14299: IFFALSE 14330
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
14301: LD_VAR 0 3
14305: PPUSH
14306: LD_VAR 0 2
14310: PPUSH
14311: LD_INT 1
14313: PPUSH
14314: LD_VAR 0 3
14318: PPUSH
14319: CALL_OW 565
14323: PPUSH
14324: CALL_OW 324
14328: GO 14298
14330: POP
14331: POP
// end ;
14332: GO 14212
14334: POP
14335: POP
// end ;
14336: LD_VAR 0 1
14340: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
14341: LD_INT 0
14343: PPUSH
14344: PPUSH
14345: PPUSH
// for side = 1 to 8 do
14346: LD_ADDR_VAR 0 3
14350: PUSH
14351: DOUBLE
14352: LD_INT 1
14354: DEC
14355: ST_TO_ADDR
14356: LD_INT 8
14358: PUSH
14359: FOR_TO
14360: IFFALSE 18356
// begin for i = 1 to 73 do
14362: LD_ADDR_VAR 0 4
14366: PUSH
14367: DOUBLE
14368: LD_INT 1
14370: DEC
14371: ST_TO_ADDR
14372: LD_INT 73
14374: PUSH
14375: FOR_TO
14376: IFFALSE 14397
// SetTech ( i , side , state_disabled ) ;
14378: LD_VAR 0 4
14382: PPUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: LD_INT 0
14390: PPUSH
14391: CALL_OW 322
14395: GO 14375
14397: POP
14398: POP
// for i = 0 to 40 do
14399: LD_ADDR_VAR 0 4
14403: PUSH
14404: DOUBLE
14405: LD_INT 0
14407: DEC
14408: ST_TO_ADDR
14409: LD_INT 40
14411: PUSH
14412: FOR_TO
14413: IFFALSE 14434
// SetRestrict ( i , side , false ) ;
14415: LD_VAR 0 4
14419: PPUSH
14420: LD_VAR 0 3
14424: PPUSH
14425: LD_INT 0
14427: PPUSH
14428: CALL_OW 324
14432: GO 14412
14434: POP
14435: POP
// case level of 1 :
14436: LD_VAR 0 1
14440: PUSH
14441: LD_INT 1
14443: DOUBLE
14444: EQUAL
14445: IFTRUE 14449
14447: GO 14602
14449: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14450: LD_INT 35
14452: PPUSH
14453: LD_VAR 0 3
14457: PPUSH
14458: LD_INT 1
14460: PPUSH
14461: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14465: LD_INT 45
14467: PPUSH
14468: LD_VAR 0 3
14472: PPUSH
14473: LD_INT 1
14475: PPUSH
14476: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14480: LD_INT 46
14482: PPUSH
14483: LD_VAR 0 3
14487: PPUSH
14488: LD_INT 1
14490: PPUSH
14491: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14495: LD_INT 47
14497: PPUSH
14498: LD_VAR 0 3
14502: PPUSH
14503: LD_INT 1
14505: PPUSH
14506: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14510: LD_INT 0
14512: PPUSH
14513: LD_VAR 0 3
14517: PPUSH
14518: LD_INT 1
14520: PPUSH
14521: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14525: LD_INT 2
14527: PPUSH
14528: LD_VAR 0 3
14532: PPUSH
14533: LD_INT 1
14535: PPUSH
14536: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14540: LD_INT 4
14542: PPUSH
14543: LD_VAR 0 3
14547: PPUSH
14548: LD_INT 1
14550: PPUSH
14551: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14555: LD_INT 6
14557: PPUSH
14558: LD_VAR 0 3
14562: PPUSH
14563: LD_INT 1
14565: PPUSH
14566: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14570: LD_INT 29
14572: PPUSH
14573: LD_VAR 0 3
14577: PPUSH
14578: LD_INT 1
14580: PPUSH
14581: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14585: LD_INT 31
14587: PPUSH
14588: LD_VAR 0 3
14592: PPUSH
14593: LD_INT 1
14595: PPUSH
14596: CALL_OW 324
// end ; 2 :
14600: GO 18354
14602: LD_INT 2
14604: DOUBLE
14605: EQUAL
14606: IFTRUE 14610
14608: GO 14808
14610: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14611: LD_INT 35
14613: PPUSH
14614: LD_VAR 0 3
14618: PPUSH
14619: LD_INT 1
14621: PPUSH
14622: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14626: LD_INT 45
14628: PPUSH
14629: LD_VAR 0 3
14633: PPUSH
14634: LD_INT 1
14636: PPUSH
14637: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14641: LD_INT 46
14643: PPUSH
14644: LD_VAR 0 3
14648: PPUSH
14649: LD_INT 1
14651: PPUSH
14652: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14656: LD_INT 47
14658: PPUSH
14659: LD_VAR 0 3
14663: PPUSH
14664: LD_INT 1
14666: PPUSH
14667: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14671: LD_INT 1
14673: PPUSH
14674: LD_VAR 0 3
14678: PPUSH
14679: LD_INT 1
14681: PPUSH
14682: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14686: LD_INT 2
14688: PPUSH
14689: LD_VAR 0 3
14693: PPUSH
14694: LD_INT 1
14696: PPUSH
14697: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14701: LD_INT 11
14703: PPUSH
14704: LD_VAR 0 3
14708: PPUSH
14709: LD_INT 1
14711: PPUSH
14712: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14716: LD_INT 0
14718: PPUSH
14719: LD_VAR 0 3
14723: PPUSH
14724: LD_INT 1
14726: PPUSH
14727: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14731: LD_INT 2
14733: PPUSH
14734: LD_VAR 0 3
14738: PPUSH
14739: LD_INT 1
14741: PPUSH
14742: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14746: LD_INT 4
14748: PPUSH
14749: LD_VAR 0 3
14753: PPUSH
14754: LD_INT 1
14756: PPUSH
14757: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14761: LD_INT 6
14763: PPUSH
14764: LD_VAR 0 3
14768: PPUSH
14769: LD_INT 1
14771: PPUSH
14772: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14776: LD_INT 29
14778: PPUSH
14779: LD_VAR 0 3
14783: PPUSH
14784: LD_INT 1
14786: PPUSH
14787: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14791: LD_INT 31
14793: PPUSH
14794: LD_VAR 0 3
14798: PPUSH
14799: LD_INT 1
14801: PPUSH
14802: CALL_OW 324
// end ; 3 :
14806: GO 18354
14808: LD_INT 3
14810: DOUBLE
14811: EQUAL
14812: IFTRUE 14816
14814: GO 15269
14816: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14817: LD_INT 35
14819: PPUSH
14820: LD_VAR 0 3
14824: PPUSH
14825: LD_INT 1
14827: PPUSH
14828: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14832: LD_INT 45
14834: PPUSH
14835: LD_VAR 0 3
14839: PPUSH
14840: LD_INT 1
14842: PPUSH
14843: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14847: LD_INT 46
14849: PPUSH
14850: LD_VAR 0 3
14854: PPUSH
14855: LD_INT 1
14857: PPUSH
14858: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14862: LD_INT 47
14864: PPUSH
14865: LD_VAR 0 3
14869: PPUSH
14870: LD_INT 1
14872: PPUSH
14873: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14877: LD_INT 1
14879: PPUSH
14880: LD_VAR 0 3
14884: PPUSH
14885: LD_INT 1
14887: PPUSH
14888: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14892: LD_INT 2
14894: PPUSH
14895: LD_VAR 0 3
14899: PPUSH
14900: LD_INT 1
14902: PPUSH
14903: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14907: LD_INT 11
14909: PPUSH
14910: LD_VAR 0 3
14914: PPUSH
14915: LD_INT 1
14917: PPUSH
14918: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14922: LD_INT 48
14924: PPUSH
14925: LD_VAR 0 3
14929: PPUSH
14930: LD_INT 1
14932: PPUSH
14933: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14937: LD_INT 69
14939: PPUSH
14940: LD_VAR 0 3
14944: PPUSH
14945: LD_INT 1
14947: PPUSH
14948: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14952: LD_INT 39
14954: PPUSH
14955: LD_VAR 0 3
14959: PPUSH
14960: LD_INT 1
14962: PPUSH
14963: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14967: LD_INT 43
14969: PPUSH
14970: LD_VAR 0 3
14974: PPUSH
14975: LD_INT 1
14977: PPUSH
14978: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14982: LD_INT 51
14984: PPUSH
14985: LD_VAR 0 3
14989: PPUSH
14990: LD_INT 1
14992: PPUSH
14993: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14997: LD_INT 6
14999: PPUSH
15000: LD_VAR 0 3
15004: PPUSH
15005: LD_INT 1
15007: PPUSH
15008: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15012: LD_INT 0
15014: PPUSH
15015: LD_VAR 0 3
15019: PPUSH
15020: LD_INT 1
15022: PPUSH
15023: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15027: LD_INT 2
15029: PPUSH
15030: LD_VAR 0 3
15034: PPUSH
15035: LD_INT 1
15037: PPUSH
15038: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15042: LD_INT 3
15044: PPUSH
15045: LD_VAR 0 3
15049: PPUSH
15050: LD_INT 1
15052: PPUSH
15053: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15057: LD_INT 4
15059: PPUSH
15060: LD_VAR 0 3
15064: PPUSH
15065: LD_INT 1
15067: PPUSH
15068: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15072: LD_INT 6
15074: PPUSH
15075: LD_VAR 0 3
15079: PPUSH
15080: LD_INT 1
15082: PPUSH
15083: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15087: LD_INT 7
15089: PPUSH
15090: LD_VAR 0 3
15094: PPUSH
15095: LD_INT 1
15097: PPUSH
15098: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15102: LD_INT 8
15104: PPUSH
15105: LD_VAR 0 3
15109: PPUSH
15110: LD_INT 1
15112: PPUSH
15113: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15117: LD_INT 10
15119: PPUSH
15120: LD_VAR 0 3
15124: PPUSH
15125: LD_INT 1
15127: PPUSH
15128: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15132: LD_INT 15
15134: PPUSH
15135: LD_VAR 0 3
15139: PPUSH
15140: LD_INT 1
15142: PPUSH
15143: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15147: LD_INT 16
15149: PPUSH
15150: LD_VAR 0 3
15154: PPUSH
15155: LD_INT 1
15157: PPUSH
15158: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15162: LD_INT 17
15164: PPUSH
15165: LD_VAR 0 3
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15177: LD_INT 20
15179: PPUSH
15180: LD_VAR 0 3
15184: PPUSH
15185: LD_INT 1
15187: PPUSH
15188: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15192: LD_INT 26
15194: PPUSH
15195: LD_VAR 0 3
15199: PPUSH
15200: LD_INT 1
15202: PPUSH
15203: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15207: LD_INT 27
15209: PPUSH
15210: LD_VAR 0 3
15214: PPUSH
15215: LD_INT 1
15217: PPUSH
15218: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15222: LD_INT 29
15224: PPUSH
15225: LD_VAR 0 3
15229: PPUSH
15230: LD_INT 1
15232: PPUSH
15233: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15237: LD_INT 31
15239: PPUSH
15240: LD_VAR 0 3
15244: PPUSH
15245: LD_INT 1
15247: PPUSH
15248: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15252: LD_INT 32
15254: PPUSH
15255: LD_VAR 0 3
15259: PPUSH
15260: LD_INT 1
15262: PPUSH
15263: CALL_OW 324
// end ; 4 :
15267: GO 18354
15269: LD_INT 4
15271: DOUBLE
15272: EQUAL
15273: IFTRUE 15277
15275: GO 16225
15277: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15278: LD_INT 35
15280: PPUSH
15281: LD_VAR 0 3
15285: PPUSH
15286: LD_INT 1
15288: PPUSH
15289: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15293: LD_INT 45
15295: PPUSH
15296: LD_VAR 0 3
15300: PPUSH
15301: LD_INT 1
15303: PPUSH
15304: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15308: LD_INT 46
15310: PPUSH
15311: LD_VAR 0 3
15315: PPUSH
15316: LD_INT 1
15318: PPUSH
15319: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15323: LD_INT 47
15325: PPUSH
15326: LD_VAR 0 3
15330: PPUSH
15331: LD_INT 1
15333: PPUSH
15334: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15338: LD_INT 1
15340: PPUSH
15341: LD_VAR 0 3
15345: PPUSH
15346: LD_INT 1
15348: PPUSH
15349: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15353: LD_INT 2
15355: PPUSH
15356: LD_VAR 0 3
15360: PPUSH
15361: LD_INT 1
15363: PPUSH
15364: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15368: LD_INT 11
15370: PPUSH
15371: LD_VAR 0 3
15375: PPUSH
15376: LD_INT 1
15378: PPUSH
15379: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15383: LD_INT 20
15385: PPUSH
15386: LD_VAR 0 3
15390: PPUSH
15391: LD_INT 1
15393: PPUSH
15394: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15398: LD_INT 48
15400: PPUSH
15401: LD_VAR 0 3
15405: PPUSH
15406: LD_INT 1
15408: PPUSH
15409: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15413: LD_INT 49
15415: PPUSH
15416: LD_VAR 0 3
15420: PPUSH
15421: LD_INT 1
15423: PPUSH
15424: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15428: LD_INT 69
15430: PPUSH
15431: LD_VAR 0 3
15435: PPUSH
15436: LD_INT 1
15438: PPUSH
15439: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15443: LD_INT 39
15445: PPUSH
15446: LD_VAR 0 3
15450: PPUSH
15451: LD_INT 1
15453: PPUSH
15454: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15458: LD_INT 34
15460: PPUSH
15461: LD_VAR 0 3
15465: PPUSH
15466: LD_INT 1
15468: PPUSH
15469: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15473: LD_INT 42
15475: PPUSH
15476: LD_VAR 0 3
15480: PPUSH
15481: LD_INT 1
15483: PPUSH
15484: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15488: LD_INT 44
15490: PPUSH
15491: LD_VAR 0 3
15495: PPUSH
15496: LD_INT 1
15498: PPUSH
15499: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15503: LD_INT 41
15505: PPUSH
15506: LD_VAR 0 3
15510: PPUSH
15511: LD_INT 1
15513: PPUSH
15514: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15518: LD_INT 43
15520: PPUSH
15521: LD_VAR 0 3
15525: PPUSH
15526: LD_INT 1
15528: PPUSH
15529: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15533: LD_INT 70
15535: PPUSH
15536: LD_VAR 0 3
15540: PPUSH
15541: LD_INT 1
15543: PPUSH
15544: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15548: LD_INT 51
15550: PPUSH
15551: LD_VAR 0 3
15555: PPUSH
15556: LD_INT 1
15558: PPUSH
15559: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15563: LD_INT 52
15565: PPUSH
15566: LD_VAR 0 3
15570: PPUSH
15571: LD_INT 1
15573: PPUSH
15574: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15578: LD_INT 6
15580: PPUSH
15581: LD_VAR 0 3
15585: PPUSH
15586: LD_INT 1
15588: PPUSH
15589: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15593: LD_INT 15
15595: PPUSH
15596: LD_VAR 0 3
15600: PPUSH
15601: LD_INT 1
15603: PPUSH
15604: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15608: LD_INT 7
15610: PPUSH
15611: LD_VAR 0 3
15615: PPUSH
15616: LD_INT 1
15618: PPUSH
15619: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15623: LD_INT 12
15625: PPUSH
15626: LD_VAR 0 3
15630: PPUSH
15631: LD_INT 1
15633: PPUSH
15634: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15638: LD_INT 18
15640: PPUSH
15641: LD_VAR 0 3
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15653: LD_INT 60
15655: PPUSH
15656: LD_VAR 0 3
15660: PPUSH
15661: LD_INT 1
15663: PPUSH
15664: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15668: LD_INT 9
15670: PPUSH
15671: LD_VAR 0 3
15675: PPUSH
15676: LD_INT 1
15678: PPUSH
15679: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15683: LD_INT 30
15685: PPUSH
15686: LD_VAR 0 3
15690: PPUSH
15691: LD_INT 1
15693: PPUSH
15694: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15698: LD_INT 37
15700: PPUSH
15701: LD_VAR 0 3
15705: PPUSH
15706: LD_INT 1
15708: PPUSH
15709: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15713: LD_INT 5
15715: PPUSH
15716: LD_VAR 0 3
15720: PPUSH
15721: LD_INT 1
15723: PPUSH
15724: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15728: LD_INT 66
15730: PPUSH
15731: LD_VAR 0 3
15735: PPUSH
15736: LD_INT 1
15738: PPUSH
15739: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15743: LD_INT 21
15745: PPUSH
15746: LD_VAR 0 3
15750: PPUSH
15751: LD_INT 1
15753: PPUSH
15754: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15758: LD_INT 22
15760: PPUSH
15761: LD_VAR 0 3
15765: PPUSH
15766: LD_INT 1
15768: PPUSH
15769: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15773: LD_INT 54
15775: PPUSH
15776: LD_VAR 0 3
15780: PPUSH
15781: LD_INT 1
15783: PPUSH
15784: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15788: LD_INT 0
15790: PPUSH
15791: LD_VAR 0 3
15795: PPUSH
15796: LD_INT 1
15798: PPUSH
15799: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15803: LD_INT 1
15805: PPUSH
15806: LD_VAR 0 3
15810: PPUSH
15811: LD_INT 1
15813: PPUSH
15814: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15818: LD_INT 2
15820: PPUSH
15821: LD_VAR 0 3
15825: PPUSH
15826: LD_INT 1
15828: PPUSH
15829: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15833: LD_INT 3
15835: PPUSH
15836: LD_VAR 0 3
15840: PPUSH
15841: LD_INT 1
15843: PPUSH
15844: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15848: LD_INT 4
15850: PPUSH
15851: LD_VAR 0 3
15855: PPUSH
15856: LD_INT 1
15858: PPUSH
15859: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15863: LD_INT 5
15865: PPUSH
15866: LD_VAR 0 3
15870: PPUSH
15871: LD_INT 1
15873: PPUSH
15874: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15878: LD_INT 6
15880: PPUSH
15881: LD_VAR 0 3
15885: PPUSH
15886: LD_INT 1
15888: PPUSH
15889: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15893: LD_INT 7
15895: PPUSH
15896: LD_VAR 0 3
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15908: LD_INT 8
15910: PPUSH
15911: LD_VAR 0 3
15915: PPUSH
15916: LD_INT 1
15918: PPUSH
15919: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15923: LD_INT 10
15925: PPUSH
15926: LD_VAR 0 3
15930: PPUSH
15931: LD_INT 1
15933: PPUSH
15934: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15938: LD_INT 11
15940: PPUSH
15941: LD_VAR 0 3
15945: PPUSH
15946: LD_INT 1
15948: PPUSH
15949: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15953: LD_INT 12
15955: PPUSH
15956: LD_VAR 0 3
15960: PPUSH
15961: LD_INT 1
15963: PPUSH
15964: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15968: LD_INT 13
15970: PPUSH
15971: LD_VAR 0 3
15975: PPUSH
15976: LD_INT 1
15978: PPUSH
15979: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15983: LD_INT 14
15985: PPUSH
15986: LD_VAR 0 3
15990: PPUSH
15991: LD_INT 1
15993: PPUSH
15994: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15998: LD_INT 15
16000: PPUSH
16001: LD_VAR 0 3
16005: PPUSH
16006: LD_INT 1
16008: PPUSH
16009: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16013: LD_INT 16
16015: PPUSH
16016: LD_VAR 0 3
16020: PPUSH
16021: LD_INT 1
16023: PPUSH
16024: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16028: LD_INT 17
16030: PPUSH
16031: LD_VAR 0 3
16035: PPUSH
16036: LD_INT 1
16038: PPUSH
16039: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16043: LD_INT 19
16045: PPUSH
16046: LD_VAR 0 3
16050: PPUSH
16051: LD_INT 1
16053: PPUSH
16054: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16058: LD_INT 20
16060: PPUSH
16061: LD_VAR 0 3
16065: PPUSH
16066: LD_INT 1
16068: PPUSH
16069: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16073: LD_INT 21
16075: PPUSH
16076: LD_VAR 0 3
16080: PPUSH
16081: LD_INT 1
16083: PPUSH
16084: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16088: LD_INT 23
16090: PPUSH
16091: LD_VAR 0 3
16095: PPUSH
16096: LD_INT 1
16098: PPUSH
16099: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16103: LD_INT 26
16105: PPUSH
16106: LD_VAR 0 3
16110: PPUSH
16111: LD_INT 1
16113: PPUSH
16114: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16118: LD_INT 27
16120: PPUSH
16121: LD_VAR 0 3
16125: PPUSH
16126: LD_INT 1
16128: PPUSH
16129: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16133: LD_INT 28
16135: PPUSH
16136: LD_VAR 0 3
16140: PPUSH
16141: LD_INT 1
16143: PPUSH
16144: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16148: LD_INT 29
16150: PPUSH
16151: LD_VAR 0 3
16155: PPUSH
16156: LD_INT 1
16158: PPUSH
16159: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16163: LD_INT 30
16165: PPUSH
16166: LD_VAR 0 3
16170: PPUSH
16171: LD_INT 1
16173: PPUSH
16174: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16178: LD_INT 31
16180: PPUSH
16181: LD_VAR 0 3
16185: PPUSH
16186: LD_INT 1
16188: PPUSH
16189: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16193: LD_INT 32
16195: PPUSH
16196: LD_VAR 0 3
16200: PPUSH
16201: LD_INT 1
16203: PPUSH
16204: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16208: LD_INT 36
16210: PPUSH
16211: LD_VAR 0 3
16215: PPUSH
16216: LD_INT 1
16218: PPUSH
16219: CALL_OW 324
// end ; 5 :
16223: GO 18354
16225: LD_INT 5
16227: DOUBLE
16228: EQUAL
16229: IFTRUE 16233
16231: GO 17346
16233: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16234: LD_INT 35
16236: PPUSH
16237: LD_VAR 0 3
16241: PPUSH
16242: LD_INT 1
16244: PPUSH
16245: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16249: LD_INT 45
16251: PPUSH
16252: LD_VAR 0 3
16256: PPUSH
16257: LD_INT 1
16259: PPUSH
16260: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16264: LD_INT 46
16266: PPUSH
16267: LD_VAR 0 3
16271: PPUSH
16272: LD_INT 1
16274: PPUSH
16275: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16279: LD_INT 47
16281: PPUSH
16282: LD_VAR 0 3
16286: PPUSH
16287: LD_INT 1
16289: PPUSH
16290: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16294: LD_INT 1
16296: PPUSH
16297: LD_VAR 0 3
16301: PPUSH
16302: LD_INT 1
16304: PPUSH
16305: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16309: LD_INT 2
16311: PPUSH
16312: LD_VAR 0 3
16316: PPUSH
16317: LD_INT 1
16319: PPUSH
16320: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16324: LD_INT 11
16326: PPUSH
16327: LD_VAR 0 3
16331: PPUSH
16332: LD_INT 1
16334: PPUSH
16335: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16339: LD_INT 20
16341: PPUSH
16342: LD_VAR 0 3
16346: PPUSH
16347: LD_INT 1
16349: PPUSH
16350: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16354: LD_INT 48
16356: PPUSH
16357: LD_VAR 0 3
16361: PPUSH
16362: LD_INT 1
16364: PPUSH
16365: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16369: LD_INT 49
16371: PPUSH
16372: LD_VAR 0 3
16376: PPUSH
16377: LD_INT 1
16379: PPUSH
16380: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16384: LD_INT 69
16386: PPUSH
16387: LD_VAR 0 3
16391: PPUSH
16392: LD_INT 1
16394: PPUSH
16395: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16399: LD_INT 39
16401: PPUSH
16402: LD_VAR 0 3
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16414: LD_INT 34
16416: PPUSH
16417: LD_VAR 0 3
16421: PPUSH
16422: LD_INT 1
16424: PPUSH
16425: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16429: LD_INT 42
16431: PPUSH
16432: LD_VAR 0 3
16436: PPUSH
16437: LD_INT 1
16439: PPUSH
16440: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16444: LD_INT 44
16446: PPUSH
16447: LD_VAR 0 3
16451: PPUSH
16452: LD_INT 1
16454: PPUSH
16455: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16459: LD_INT 41
16461: PPUSH
16462: LD_VAR 0 3
16466: PPUSH
16467: LD_INT 1
16469: PPUSH
16470: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16474: LD_INT 40
16476: PPUSH
16477: LD_VAR 0 3
16481: PPUSH
16482: LD_INT 1
16484: PPUSH
16485: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16489: LD_INT 43
16491: PPUSH
16492: LD_VAR 0 3
16496: PPUSH
16497: LD_INT 1
16499: PPUSH
16500: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16504: LD_INT 70
16506: PPUSH
16507: LD_VAR 0 3
16511: PPUSH
16512: LD_INT 1
16514: PPUSH
16515: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16519: LD_INT 51
16521: PPUSH
16522: LD_VAR 0 3
16526: PPUSH
16527: LD_INT 1
16529: PPUSH
16530: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16534: LD_INT 52
16536: PPUSH
16537: LD_VAR 0 3
16541: PPUSH
16542: LD_INT 1
16544: PPUSH
16545: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16549: LD_INT 6
16551: PPUSH
16552: LD_VAR 0 3
16556: PPUSH
16557: LD_INT 1
16559: PPUSH
16560: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16564: LD_INT 15
16566: PPUSH
16567: LD_VAR 0 3
16571: PPUSH
16572: LD_INT 1
16574: PPUSH
16575: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16579: LD_INT 7
16581: PPUSH
16582: LD_VAR 0 3
16586: PPUSH
16587: LD_INT 1
16589: PPUSH
16590: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16594: LD_INT 12
16596: PPUSH
16597: LD_VAR 0 3
16601: PPUSH
16602: LD_INT 1
16604: PPUSH
16605: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16609: LD_INT 17
16611: PPUSH
16612: LD_VAR 0 3
16616: PPUSH
16617: LD_INT 1
16619: PPUSH
16620: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16624: LD_INT 18
16626: PPUSH
16627: LD_VAR 0 3
16631: PPUSH
16632: LD_INT 1
16634: PPUSH
16635: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16639: LD_INT 60
16641: PPUSH
16642: LD_VAR 0 3
16646: PPUSH
16647: LD_INT 1
16649: PPUSH
16650: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16654: LD_INT 32
16656: PPUSH
16657: LD_VAR 0 3
16661: PPUSH
16662: LD_INT 1
16664: PPUSH
16665: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16669: LD_INT 9
16671: PPUSH
16672: LD_VAR 0 3
16676: PPUSH
16677: LD_INT 1
16679: PPUSH
16680: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16684: LD_INT 57
16686: PPUSH
16687: LD_VAR 0 3
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16699: LD_INT 30
16701: PPUSH
16702: LD_VAR 0 3
16706: PPUSH
16707: LD_INT 1
16709: PPUSH
16710: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16714: LD_INT 37
16716: PPUSH
16717: LD_VAR 0 3
16721: PPUSH
16722: LD_INT 1
16724: PPUSH
16725: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16729: LD_INT 63
16731: PPUSH
16732: LD_VAR 0 3
16736: PPUSH
16737: LD_INT 1
16739: PPUSH
16740: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16744: LD_INT 3
16746: PPUSH
16747: LD_VAR 0 3
16751: PPUSH
16752: LD_INT 1
16754: PPUSH
16755: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16759: LD_INT 4
16761: PPUSH
16762: LD_VAR 0 3
16766: PPUSH
16767: LD_INT 1
16769: PPUSH
16770: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16774: LD_INT 5
16776: PPUSH
16777: LD_VAR 0 3
16781: PPUSH
16782: LD_INT 1
16784: PPUSH
16785: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16789: LD_INT 66
16791: PPUSH
16792: LD_VAR 0 3
16796: PPUSH
16797: LD_INT 1
16799: PPUSH
16800: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16804: LD_INT 21
16806: PPUSH
16807: LD_VAR 0 3
16811: PPUSH
16812: LD_INT 1
16814: PPUSH
16815: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16819: LD_INT 22
16821: PPUSH
16822: LD_VAR 0 3
16826: PPUSH
16827: LD_INT 1
16829: PPUSH
16830: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16834: LD_INT 19
16836: PPUSH
16837: LD_VAR 0 3
16841: PPUSH
16842: LD_INT 1
16844: PPUSH
16845: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16849: LD_INT 54
16851: PPUSH
16852: LD_VAR 0 3
16856: PPUSH
16857: LD_INT 1
16859: PPUSH
16860: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16864: LD_INT 55
16866: PPUSH
16867: LD_VAR 0 3
16871: PPUSH
16872: LD_INT 1
16874: PPUSH
16875: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16879: LD_INT 0
16881: PPUSH
16882: LD_VAR 0 3
16886: PPUSH
16887: LD_INT 1
16889: PPUSH
16890: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16894: LD_INT 1
16896: PPUSH
16897: LD_VAR 0 3
16901: PPUSH
16902: LD_INT 1
16904: PPUSH
16905: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16909: LD_INT 2
16911: PPUSH
16912: LD_VAR 0 3
16916: PPUSH
16917: LD_INT 1
16919: PPUSH
16920: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16924: LD_INT 3
16926: PPUSH
16927: LD_VAR 0 3
16931: PPUSH
16932: LD_INT 1
16934: PPUSH
16935: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16939: LD_INT 4
16941: PPUSH
16942: LD_VAR 0 3
16946: PPUSH
16947: LD_INT 1
16949: PPUSH
16950: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16954: LD_INT 5
16956: PPUSH
16957: LD_VAR 0 3
16961: PPUSH
16962: LD_INT 1
16964: PPUSH
16965: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16969: LD_INT 6
16971: PPUSH
16972: LD_VAR 0 3
16976: PPUSH
16977: LD_INT 1
16979: PPUSH
16980: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16984: LD_INT 7
16986: PPUSH
16987: LD_VAR 0 3
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16999: LD_INT 8
17001: PPUSH
17002: LD_VAR 0 3
17006: PPUSH
17007: LD_INT 1
17009: PPUSH
17010: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17014: LD_INT 10
17016: PPUSH
17017: LD_VAR 0 3
17021: PPUSH
17022: LD_INT 1
17024: PPUSH
17025: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17029: LD_INT 11
17031: PPUSH
17032: LD_VAR 0 3
17036: PPUSH
17037: LD_INT 1
17039: PPUSH
17040: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17044: LD_INT 12
17046: PPUSH
17047: LD_VAR 0 3
17051: PPUSH
17052: LD_INT 1
17054: PPUSH
17055: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17059: LD_INT 13
17061: PPUSH
17062: LD_VAR 0 3
17066: PPUSH
17067: LD_INT 1
17069: PPUSH
17070: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17074: LD_INT 14
17076: PPUSH
17077: LD_VAR 0 3
17081: PPUSH
17082: LD_INT 1
17084: PPUSH
17085: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17089: LD_INT 15
17091: PPUSH
17092: LD_VAR 0 3
17096: PPUSH
17097: LD_INT 1
17099: PPUSH
17100: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17104: LD_INT 16
17106: PPUSH
17107: LD_VAR 0 3
17111: PPUSH
17112: LD_INT 1
17114: PPUSH
17115: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17119: LD_INT 17
17121: PPUSH
17122: LD_VAR 0 3
17126: PPUSH
17127: LD_INT 1
17129: PPUSH
17130: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
17134: LD_INT 18
17136: PPUSH
17137: LD_VAR 0 3
17141: PPUSH
17142: LD_INT 1
17144: PPUSH
17145: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17149: LD_INT 19
17151: PPUSH
17152: LD_VAR 0 3
17156: PPUSH
17157: LD_INT 1
17159: PPUSH
17160: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17164: LD_INT 20
17166: PPUSH
17167: LD_VAR 0 3
17171: PPUSH
17172: LD_INT 1
17174: PPUSH
17175: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17179: LD_INT 21
17181: PPUSH
17182: LD_VAR 0 3
17186: PPUSH
17187: LD_INT 1
17189: PPUSH
17190: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17194: LD_INT 23
17196: PPUSH
17197: LD_VAR 0 3
17201: PPUSH
17202: LD_INT 1
17204: PPUSH
17205: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17209: LD_INT 26
17211: PPUSH
17212: LD_VAR 0 3
17216: PPUSH
17217: LD_INT 1
17219: PPUSH
17220: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17224: LD_INT 27
17226: PPUSH
17227: LD_VAR 0 3
17231: PPUSH
17232: LD_INT 1
17234: PPUSH
17235: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17239: LD_INT 28
17241: PPUSH
17242: LD_VAR 0 3
17246: PPUSH
17247: LD_INT 1
17249: PPUSH
17250: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17254: LD_INT 29
17256: PPUSH
17257: LD_VAR 0 3
17261: PPUSH
17262: LD_INT 1
17264: PPUSH
17265: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17269: LD_INT 30
17271: PPUSH
17272: LD_VAR 0 3
17276: PPUSH
17277: LD_INT 1
17279: PPUSH
17280: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17284: LD_INT 31
17286: PPUSH
17287: LD_VAR 0 3
17291: PPUSH
17292: LD_INT 1
17294: PPUSH
17295: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17299: LD_INT 32
17301: PPUSH
17302: LD_VAR 0 3
17306: PPUSH
17307: LD_INT 1
17309: PPUSH
17310: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
17314: LD_INT 33
17316: PPUSH
17317: LD_VAR 0 3
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17329: LD_INT 36
17331: PPUSH
17332: LD_VAR 0 3
17336: PPUSH
17337: LD_INT 1
17339: PPUSH
17340: CALL_OW 324
// end ; 6 :
17344: GO 18354
17346: LD_INT 6
17348: DOUBLE
17349: EQUAL
17350: IFTRUE 17354
17352: GO 18279
17354: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17355: LD_INT 35
17357: PPUSH
17358: LD_VAR 0 3
17362: PPUSH
17363: LD_INT 1
17365: PPUSH
17366: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17370: LD_INT 45
17372: PPUSH
17373: LD_VAR 0 3
17377: PPUSH
17378: LD_INT 1
17380: PPUSH
17381: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17385: LD_INT 46
17387: PPUSH
17388: LD_VAR 0 3
17392: PPUSH
17393: LD_INT 1
17395: PPUSH
17396: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17400: LD_INT 47
17402: PPUSH
17403: LD_VAR 0 3
17407: PPUSH
17408: LD_INT 1
17410: PPUSH
17411: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17415: LD_INT 1
17417: PPUSH
17418: LD_VAR 0 3
17422: PPUSH
17423: LD_INT 1
17425: PPUSH
17426: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17430: LD_INT 2
17432: PPUSH
17433: LD_VAR 0 3
17437: PPUSH
17438: LD_INT 1
17440: PPUSH
17441: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17445: LD_INT 11
17447: PPUSH
17448: LD_VAR 0 3
17452: PPUSH
17453: LD_INT 1
17455: PPUSH
17456: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17460: LD_INT 20
17462: PPUSH
17463: LD_VAR 0 3
17467: PPUSH
17468: LD_INT 1
17470: PPUSH
17471: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17475: LD_INT 48
17477: PPUSH
17478: LD_VAR 0 3
17482: PPUSH
17483: LD_INT 1
17485: PPUSH
17486: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17490: LD_INT 49
17492: PPUSH
17493: LD_VAR 0 3
17497: PPUSH
17498: LD_INT 1
17500: PPUSH
17501: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
17505: LD_INT 50
17507: PPUSH
17508: LD_VAR 0 3
17512: PPUSH
17513: LD_INT 1
17515: PPUSH
17516: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17520: LD_INT 69
17522: PPUSH
17523: LD_VAR 0 3
17527: PPUSH
17528: LD_INT 1
17530: PPUSH
17531: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17535: LD_INT 39
17537: PPUSH
17538: LD_VAR 0 3
17542: PPUSH
17543: LD_INT 1
17545: PPUSH
17546: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17550: LD_INT 34
17552: PPUSH
17553: LD_VAR 0 3
17557: PPUSH
17558: LD_INT 1
17560: PPUSH
17561: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17565: LD_INT 42
17567: PPUSH
17568: LD_VAR 0 3
17572: PPUSH
17573: LD_INT 1
17575: PPUSH
17576: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17580: LD_INT 44
17582: PPUSH
17583: LD_VAR 0 3
17587: PPUSH
17588: LD_INT 1
17590: PPUSH
17591: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17595: LD_INT 41
17597: PPUSH
17598: LD_VAR 0 3
17602: PPUSH
17603: LD_INT 1
17605: PPUSH
17606: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
17610: LD_INT 13
17612: PPUSH
17613: LD_VAR 0 3
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17625: LD_INT 40
17627: PPUSH
17628: LD_VAR 0 3
17632: PPUSH
17633: LD_INT 1
17635: PPUSH
17636: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17640: LD_INT 43
17642: PPUSH
17643: LD_VAR 0 3
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17655: LD_INT 70
17657: PPUSH
17658: LD_VAR 0 3
17662: PPUSH
17663: LD_INT 1
17665: PPUSH
17666: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
17670: LD_INT 23
17672: PPUSH
17673: LD_VAR 0 3
17677: PPUSH
17678: LD_INT 1
17680: PPUSH
17681: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17685: LD_INT 51
17687: PPUSH
17688: LD_VAR 0 3
17692: PPUSH
17693: LD_INT 1
17695: PPUSH
17696: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17700: LD_INT 52
17702: PPUSH
17703: LD_VAR 0 3
17707: PPUSH
17708: LD_INT 1
17710: PPUSH
17711: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17715: LD_INT 6
17717: PPUSH
17718: LD_VAR 0 3
17722: PPUSH
17723: LD_INT 1
17725: PPUSH
17726: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17730: LD_INT 15
17732: PPUSH
17733: LD_VAR 0 3
17737: PPUSH
17738: LD_INT 1
17740: PPUSH
17741: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17745: LD_INT 7
17747: PPUSH
17748: LD_VAR 0 3
17752: PPUSH
17753: LD_INT 1
17755: PPUSH
17756: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17760: LD_INT 12
17762: PPUSH
17763: LD_VAR 0 3
17767: PPUSH
17768: LD_INT 1
17770: PPUSH
17771: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
17775: LD_INT 10
17777: PPUSH
17778: LD_VAR 0 3
17782: PPUSH
17783: LD_INT 1
17785: PPUSH
17786: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17790: LD_INT 17
17792: PPUSH
17793: LD_VAR 0 3
17797: PPUSH
17798: LD_INT 1
17800: PPUSH
17801: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17805: LD_INT 18
17807: PPUSH
17808: LD_VAR 0 3
17812: PPUSH
17813: LD_INT 1
17815: PPUSH
17816: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17820: LD_INT 60
17822: PPUSH
17823: LD_VAR 0 3
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
17835: LD_INT 61
17837: PPUSH
17838: LD_VAR 0 3
17842: PPUSH
17843: LD_INT 1
17845: PPUSH
17846: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17850: LD_INT 32
17852: PPUSH
17853: LD_VAR 0 3
17857: PPUSH
17858: LD_INT 1
17860: PPUSH
17861: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
17865: LD_INT 27
17867: PPUSH
17868: LD_VAR 0 3
17872: PPUSH
17873: LD_INT 1
17875: PPUSH
17876: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
17880: LD_INT 36
17882: PPUSH
17883: LD_VAR 0 3
17887: PPUSH
17888: LD_INT 1
17890: PPUSH
17891: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
17895: LD_INT 33
17897: PPUSH
17898: LD_VAR 0 3
17902: PPUSH
17903: LD_INT 1
17905: PPUSH
17906: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17910: LD_INT 9
17912: PPUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_INT 1
17920: PPUSH
17921: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
17925: LD_INT 38
17927: PPUSH
17928: LD_VAR 0 3
17932: PPUSH
17933: LD_INT 1
17935: PPUSH
17936: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17940: LD_INT 57
17942: PPUSH
17943: LD_VAR 0 3
17947: PPUSH
17948: LD_INT 1
17950: PPUSH
17951: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
17955: LD_INT 58
17957: PPUSH
17958: LD_VAR 0 3
17962: PPUSH
17963: LD_INT 1
17965: PPUSH
17966: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
17970: LD_INT 28
17972: PPUSH
17973: LD_VAR 0 3
17977: PPUSH
17978: LD_INT 1
17980: PPUSH
17981: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
17985: LD_INT 29
17987: PPUSH
17988: LD_VAR 0 3
17992: PPUSH
17993: LD_INT 1
17995: PPUSH
17996: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18000: LD_INT 30
18002: PPUSH
18003: LD_VAR 0 3
18007: PPUSH
18008: LD_INT 1
18010: PPUSH
18011: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18015: LD_INT 37
18017: PPUSH
18018: LD_VAR 0 3
18022: PPUSH
18023: LD_INT 1
18025: PPUSH
18026: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18030: LD_INT 63
18032: PPUSH
18033: LD_VAR 0 3
18037: PPUSH
18038: LD_INT 1
18040: PPUSH
18041: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
18045: LD_INT 64
18047: PPUSH
18048: LD_VAR 0 3
18052: PPUSH
18053: LD_INT 1
18055: PPUSH
18056: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18060: LD_INT 3
18062: PPUSH
18063: LD_VAR 0 3
18067: PPUSH
18068: LD_INT 1
18070: PPUSH
18071: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18075: LD_INT 4
18077: PPUSH
18078: LD_VAR 0 3
18082: PPUSH
18083: LD_INT 1
18085: PPUSH
18086: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18090: LD_INT 5
18092: PPUSH
18093: LD_VAR 0 3
18097: PPUSH
18098: LD_INT 1
18100: PPUSH
18101: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
18105: LD_INT 8
18107: PPUSH
18108: LD_VAR 0 3
18112: PPUSH
18113: LD_INT 1
18115: PPUSH
18116: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18120: LD_INT 66
18122: PPUSH
18123: LD_VAR 0 3
18127: PPUSH
18128: LD_INT 1
18130: PPUSH
18131: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
18135: LD_INT 67
18137: PPUSH
18138: LD_VAR 0 3
18142: PPUSH
18143: LD_INT 1
18145: PPUSH
18146: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18150: LD_INT 21
18152: PPUSH
18153: LD_VAR 0 3
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18165: LD_INT 22
18167: PPUSH
18168: LD_VAR 0 3
18172: PPUSH
18173: LD_INT 1
18175: PPUSH
18176: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18180: LD_INT 19
18182: PPUSH
18183: LD_VAR 0 3
18187: PPUSH
18188: LD_INT 1
18190: PPUSH
18191: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
18195: LD_INT 26
18197: PPUSH
18198: LD_VAR 0 3
18202: PPUSH
18203: LD_INT 1
18205: PPUSH
18206: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18210: LD_INT 54
18212: PPUSH
18213: LD_VAR 0 3
18217: PPUSH
18218: LD_INT 1
18220: PPUSH
18221: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18225: LD_INT 55
18227: PPUSH
18228: LD_VAR 0 3
18232: PPUSH
18233: LD_INT 1
18235: PPUSH
18236: CALL_OW 322
// for i = 0 to 39 do
18240: LD_ADDR_VAR 0 4
18244: PUSH
18245: DOUBLE
18246: LD_INT 0
18248: DEC
18249: ST_TO_ADDR
18250: LD_INT 39
18252: PUSH
18253: FOR_TO
18254: IFFALSE 18275
// SetRestrict ( i , side , true ) ;
18256: LD_VAR 0 4
18260: PPUSH
18261: LD_VAR 0 3
18265: PPUSH
18266: LD_INT 1
18268: PPUSH
18269: CALL_OW 324
18273: GO 18253
18275: POP
18276: POP
// end ; else
18277: GO 18354
18279: POP
// begin for i = 1 to 73 do
18280: LD_ADDR_VAR 0 4
18284: PUSH
18285: DOUBLE
18286: LD_INT 1
18288: DEC
18289: ST_TO_ADDR
18290: LD_INT 73
18292: PUSH
18293: FOR_TO
18294: IFFALSE 18315
// SetTech ( i , side , state_enabled ) ;
18296: LD_VAR 0 4
18300: PPUSH
18301: LD_VAR 0 3
18305: PPUSH
18306: LD_INT 1
18308: PPUSH
18309: CALL_OW 322
18313: GO 18293
18315: POP
18316: POP
// for i = 0 to 39 do
18317: LD_ADDR_VAR 0 4
18321: PUSH
18322: DOUBLE
18323: LD_INT 0
18325: DEC
18326: ST_TO_ADDR
18327: LD_INT 39
18329: PUSH
18330: FOR_TO
18331: IFFALSE 18352
// SetRestrict ( i , side , true ) ;
18333: LD_VAR 0 4
18337: PPUSH
18338: LD_VAR 0 3
18342: PPUSH
18343: LD_INT 1
18345: PPUSH
18346: CALL_OW 324
18350: GO 18330
18352: POP
18353: POP
// end ; end ; end ;
18354: GO 14359
18356: POP
18357: POP
// end ; end_of_file
18358: LD_VAR 0 2
18362: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
18363: LD_INT 0
18365: PPUSH
18366: PPUSH
18367: PPUSH
18368: PPUSH
18369: PPUSH
18370: PPUSH
18371: PPUSH
18372: PPUSH
18373: PPUSH
// for i := 1 to 8 do
18374: LD_ADDR_VAR 0 2
18378: PUSH
18379: DOUBLE
18380: LD_INT 1
18382: DEC
18383: ST_TO_ADDR
18384: LD_INT 8
18386: PUSH
18387: FOR_TO
18388: IFFALSE 18772
// begin if Side_Positions [ i ] then
18390: LD_EXP 18
18394: PUSH
18395: LD_VAR 0 2
18399: ARRAY
18400: IFFALSE 18770
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
18402: LD_ADDR_VAR 0 7
18406: PUSH
18407: LD_INT 22
18409: PUSH
18410: LD_VAR 0 2
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 21
18421: PUSH
18422: LD_INT 1
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PPUSH
18433: CALL_OW 69
18437: PUSH
18438: LD_INT 0
18440: PLUS
18441: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18442: LD_ADDR_VAR 0 9
18446: PUSH
18447: LD_INT 22
18449: PUSH
18450: LD_VAR 0 2
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 2
18461: PUSH
18462: LD_INT 30
18464: PUSH
18465: LD_INT 0
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 30
18474: PUSH
18475: LD_INT 1
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: LIST
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PPUSH
18491: CALL_OW 69
18495: ST_TO_ADDR
// crates := 0 ;
18496: LD_ADDR_VAR 0 4
18500: PUSH
18501: LD_INT 0
18503: ST_TO_ADDR
// oil := 0 ;
18504: LD_ADDR_VAR 0 5
18508: PUSH
18509: LD_INT 0
18511: ST_TO_ADDR
// sib := 0 ;
18512: LD_ADDR_VAR 0 6
18516: PUSH
18517: LD_INT 0
18519: ST_TO_ADDR
// if bases then
18520: LD_VAR 0 9
18524: IFFALSE 18630
// begin for j in bases do
18526: LD_ADDR_VAR 0 3
18530: PUSH
18531: LD_VAR 0 9
18535: PUSH
18536: FOR_IN
18537: IFFALSE 18628
// begin base := GetBase ( j ) ;
18539: LD_ADDR_VAR 0 8
18543: PUSH
18544: LD_VAR 0 3
18548: PPUSH
18549: CALL_OW 274
18553: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
18554: LD_ADDR_VAR 0 4
18558: PUSH
18559: LD_VAR 0 4
18563: PUSH
18564: LD_VAR 0 8
18568: PPUSH
18569: LD_INT 1
18571: PPUSH
18572: CALL_OW 275
18576: PLUS
18577: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
18578: LD_ADDR_VAR 0 5
18582: PUSH
18583: LD_VAR 0 5
18587: PUSH
18588: LD_VAR 0 8
18592: PPUSH
18593: LD_INT 2
18595: PPUSH
18596: CALL_OW 275
18600: PLUS
18601: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
18602: LD_ADDR_VAR 0 6
18606: PUSH
18607: LD_VAR 0 6
18611: PUSH
18612: LD_VAR 0 8
18616: PPUSH
18617: LD_INT 3
18619: PPUSH
18620: CALL_OW 275
18624: PLUS
18625: ST_TO_ADDR
// end ;
18626: GO 18536
18628: POP
18629: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
18630: LD_STRING setSpecText(
18632: PUSH
18633: LD_VAR 0 2
18637: STR
18638: PUSH
18639: LD_STRING ,
18641: STR
18642: PUSH
18643: LD_INT 2
18645: STR
18646: PUSH
18647: LD_STRING ,
18649: STR
18650: PUSH
18651: LD_VAR 0 4
18655: STR
18656: PUSH
18657: LD_STRING )
18659: STR
18660: PPUSH
18661: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
18665: LD_STRING setSpecText(
18667: PUSH
18668: LD_VAR 0 2
18672: STR
18673: PUSH
18674: LD_STRING ,
18676: STR
18677: PUSH
18678: LD_INT 3
18680: STR
18681: PUSH
18682: LD_STRING ,
18684: STR
18685: PUSH
18686: LD_VAR 0 5
18690: STR
18691: PUSH
18692: LD_STRING )
18694: STR
18695: PPUSH
18696: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
18700: LD_STRING setSpecText(
18702: PUSH
18703: LD_VAR 0 2
18707: STR
18708: PUSH
18709: LD_STRING ,
18711: STR
18712: PUSH
18713: LD_INT 4
18715: STR
18716: PUSH
18717: LD_STRING ,
18719: STR
18720: PUSH
18721: LD_VAR 0 6
18725: STR
18726: PUSH
18727: LD_STRING )
18729: STR
18730: PPUSH
18731: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
18735: LD_STRING setSpecText(
18737: PUSH
18738: LD_VAR 0 2
18742: STR
18743: PUSH
18744: LD_STRING ,
18746: STR
18747: PUSH
18748: LD_INT 5
18750: STR
18751: PUSH
18752: LD_STRING ,
18754: STR
18755: PUSH
18756: LD_VAR 0 7
18760: STR
18761: PUSH
18762: LD_STRING )
18764: STR
18765: PPUSH
18766: CALL_OW 559
// end ; end ;
18770: GO 18387
18772: POP
18773: POP
// end ;
18774: LD_VAR 0 1
18778: RET
// every 0 0$1 do
18779: GO 18781
18781: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
18782: LD_STRING setSpecLogoNumber(
18784: PUSH
18785: LD_INT 2
18787: STR
18788: PUSH
18789: LD_STRING ,
18791: STR
18792: PUSH
18793: LD_INT 1
18795: STR
18796: PUSH
18797: LD_STRING )
18799: STR
18800: PPUSH
18801: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
18805: LD_STRING setSpecLogoNumber(
18807: PUSH
18808: LD_INT 3
18810: STR
18811: PUSH
18812: LD_STRING ,
18814: STR
18815: PUSH
18816: LD_INT 2
18818: STR
18819: PUSH
18820: LD_STRING )
18822: STR
18823: PPUSH
18824: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
18828: LD_STRING setSpecLogoNumber(
18830: PUSH
18831: LD_INT 4
18833: STR
18834: PUSH
18835: LD_STRING ,
18837: STR
18838: PUSH
18839: LD_INT 3
18841: STR
18842: PUSH
18843: LD_STRING )
18845: STR
18846: PPUSH
18847: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
18851: LD_STRING setSpecLogoNumber(
18853: PUSH
18854: LD_INT 5
18856: STR
18857: PUSH
18858: LD_STRING ,
18860: STR
18861: PUSH
18862: LD_INT 4
18864: STR
18865: PUSH
18866: LD_STRING )
18868: STR
18869: PPUSH
18870: CALL_OW 559
// end ;
18874: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
18875: LD_INT 2
18877: PUSH
18878: LD_INT 30
18880: PUSH
18881: LD_INT 0
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 30
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: LIST
18902: PPUSH
18903: CALL_OW 69
18907: IFFALSE 18917
18909: GO 18911
18911: DISABLE
// begin enable ;
18912: ENABLE
// UpdateSpectatorBar ;
18913: CALL 18363 0 0
// end ; end_of_file
18917: END
// var respawn , inqueue ; export function init_respawning ; begin
18918: LD_INT 0
18920: PPUSH
// respawn := Rand ( 1 , 8 ) ;
18921: LD_ADDR_LOC 31
18925: PUSH
18926: LD_INT 1
18928: PPUSH
18929: LD_INT 8
18931: PPUSH
18932: CALL_OW 12
18936: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18937: LD_ADDR_LOC 32
18941: PUSH
18942: LD_INT 0
18944: PUSH
18945: LD_INT 0
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: LD_INT 0
18953: PUSH
18954: LD_INT 0
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: LD_INT 0
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: ST_TO_ADDR
// end ;
18976: LD_VAR 0 1
18980: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
18981: GO 18983
18983: DISABLE
18984: LD_INT 0
18986: PPUSH
18987: PPUSH
18988: PPUSH
// begin if respawning_time_max = 0 then
18989: LD_EXP 13
18993: PUSH
18994: LD_INT 0
18996: EQUAL
18997: IFFALSE 19001
// exit ;
18999: GO 19409
// if respawn = 8 then
19001: LD_LOC 31
19005: PUSH
19006: LD_INT 8
19008: EQUAL
19009: IFFALSE 19021
// respawn := 1 else
19011: LD_ADDR_LOC 31
19015: PUSH
19016: LD_INT 1
19018: ST_TO_ADDR
19019: GO 19035
// respawn := respawn + 1 ;
19021: LD_ADDR_LOC 31
19025: PUSH
19026: LD_LOC 31
19030: PUSH
19031: LD_INT 1
19033: PLUS
19034: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
19035: LD_EXP 18
19039: PUSH
19040: LD_LOC 31
19044: ARRAY
19045: PUSH
19046: LD_LOC 32
19050: PUSH
19051: LD_LOC 31
19055: ARRAY
19056: NOT
19057: AND
19058: IFFALSE 19408
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
19060: LD_ADDR_VAR 0 1
19064: PUSH
19065: LD_INT 21
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 22
19077: PUSH
19078: LD_LOC 31
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 3
19089: PUSH
19090: LD_INT 23
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: PPUSH
19106: CALL_OW 69
19110: ST_TO_ADDR
// if n < number_of_people then
19111: LD_VAR 0 1
19115: PUSH
19116: LD_EXP 5
19120: LESS
19121: IFFALSE 19405
// begin aktresp := respawn ;
19123: LD_ADDR_VAR 0 3
19127: PUSH
19128: LD_LOC 31
19132: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
19133: LD_ADDR_LOC 32
19137: PUSH
19138: LD_LOC 32
19142: PPUSH
19143: LD_VAR 0 3
19147: PPUSH
19148: LD_INT 1
19150: PPUSH
19151: CALL_OW 1
19155: ST_TO_ADDR
// enable ;
19156: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
19157: LD_EXP 12
19161: PPUSH
19162: LD_EXP 13
19166: PPUSH
19167: CALL_OW 12
19171: PPUSH
19172: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
19176: LD_ADDR_LOC 32
19180: PUSH
19181: LD_LOC 32
19185: PPUSH
19186: LD_VAR 0 3
19190: PPUSH
19191: LD_INT 0
19193: PPUSH
19194: CALL_OW 1
19198: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
19199: LD_ADDR_VAR 0 2
19203: PUSH
19204: LD_INT 21
19206: PUSH
19207: LD_INT 3
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 2
19216: PUSH
19217: LD_INT 30
19219: PUSH
19220: LD_INT 0
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 30
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 50
19244: PUSH
19245: EMPTY
19246: LIST
19247: PUSH
19248: LD_INT 22
19250: PUSH
19251: LD_VAR 0 3
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: PPUSH
19266: CALL_OW 69
19270: ST_TO_ADDR
// if dep = 0 then
19271: LD_VAR 0 2
19275: PUSH
19276: LD_INT 0
19278: EQUAL
19279: IFFALSE 19283
// exit ;
19281: GO 19409
// hc_name :=  ;
19283: LD_ADDR_OWVAR 26
19287: PUSH
19288: LD_STRING 
19290: ST_TO_ADDR
// hc_importance := 0 ;
19291: LD_ADDR_OWVAR 32
19295: PUSH
19296: LD_INT 0
19298: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
19299: LD_INT 0
19301: PPUSH
19302: LD_INT 0
19304: PPUSH
19305: LD_EXP 6
19309: PUSH
19310: LD_INT 2
19312: DIV
19313: PPUSH
19314: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
19318: LD_ADDR_OWVAR 21
19322: PUSH
19323: LD_EXP 19
19327: PUSH
19328: LD_VAR 0 3
19332: ARRAY
19333: ST_TO_ADDR
// uc_side := aktresp ;
19334: LD_ADDR_OWVAR 20
19338: PUSH
19339: LD_VAR 0 3
19343: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
19344: LD_ADDR_VAR 0 2
19348: PUSH
19349: LD_VAR 0 2
19353: PUSH
19354: LD_INT 1
19356: PPUSH
19357: LD_VAR 0 2
19361: PPUSH
19362: CALL_OW 12
19366: ARRAY
19367: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
19368: CALL_OW 44
19372: PPUSH
19373: LD_VAR 0 2
19377: PPUSH
19378: CALL_OW 250
19382: PPUSH
19383: LD_VAR 0 2
19387: PPUSH
19388: CALL_OW 251
19392: PPUSH
19393: LD_INT 7
19395: PPUSH
19396: LD_INT 1
19398: PPUSH
19399: CALL_OW 50
// end else
19403: GO 19406
// enable ;
19405: ENABLE
// end else
19406: GO 19409
// enable ;
19408: ENABLE
// end ; end_of_file
19409: PPOPN 3
19411: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
19412: LD_INT 0
19414: PPUSH
19415: PPUSH
19416: PPUSH
// BuildUpTime_Delay = 0 ;
19417: LD_ADDR_EXP 60
19421: PUSH
19422: LD_INT 0
19424: ST_TO_ADDR
// if not def_builduptime then
19425: LD_EXP 54
19429: NOT
19430: IFFALSE 19434
// exit ;
19432: GO 19617
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
19434: LD_ADDR_EXP 60
19438: PUSH
19439: LD_INT 8400
19441: PUSH
19442: LD_INT 2100
19444: PUSH
19445: LD_EXP 54
19449: MUL
19450: PLUS
19451: ST_TO_ADDR
// BuildUpTimeActive := true ;
19452: LD_ADDR_EXP 59
19456: PUSH
19457: LD_INT 1
19459: ST_TO_ADDR
// for i := 1 to 8 do
19460: LD_ADDR_VAR 0 2
19464: PUSH
19465: DOUBLE
19466: LD_INT 1
19468: DEC
19469: ST_TO_ADDR
19470: LD_INT 8
19472: PUSH
19473: FOR_TO
19474: IFFALSE 19615
// if Side_Positions [ i ] then
19476: LD_EXP 18
19480: PUSH
19481: LD_VAR 0 2
19485: ARRAY
19486: IFFALSE 19613
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
19488: LD_EXP 58
19492: PUSH
19493: LD_EXP 18
19497: PUSH
19498: LD_VAR 0 2
19502: ARRAY
19503: ARRAY
19504: PPUSH
19505: LD_INT 5
19507: PPUSH
19508: CALL_OW 424
// for j := 1 to 8 do
19512: LD_ADDR_VAR 0 3
19516: PUSH
19517: DOUBLE
19518: LD_INT 1
19520: DEC
19521: ST_TO_ADDR
19522: LD_INT 8
19524: PUSH
19525: FOR_TO
19526: IFFALSE 19611
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19528: LD_EXP 18
19532: PUSH
19533: LD_VAR 0 3
19537: ARRAY
19538: PUSH
19539: LD_EXP 16
19543: PUSH
19544: LD_VAR 0 2
19548: ARRAY
19549: PUSH
19550: LD_EXP 16
19554: PUSH
19555: LD_VAR 0 3
19559: ARRAY
19560: NONEQUAL
19561: PUSH
19562: LD_EXP 20
19566: NOT
19567: PUSH
19568: LD_VAR 0 2
19572: PUSH
19573: LD_VAR 0 3
19577: NONEQUAL
19578: AND
19579: OR
19580: AND
19581: IFFALSE 19609
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19583: LD_VAR 0 3
19587: PPUSH
19588: LD_EXP 58
19592: PUSH
19593: LD_EXP 18
19597: PUSH
19598: LD_VAR 0 2
19602: ARRAY
19603: ARRAY
19604: PPUSH
19605: CALL_OW 333
19609: GO 19525
19611: POP
19612: POP
// end ;
19613: GO 19473
19615: POP
19616: POP
// end ;
19617: LD_VAR 0 1
19621: RET
// export function EndBuildUp ; var i , j ; begin
19622: LD_INT 0
19624: PPUSH
19625: PPUSH
19626: PPUSH
// BuildUpTimeActive := false ;
19627: LD_ADDR_EXP 59
19631: PUSH
19632: LD_INT 0
19634: ST_TO_ADDR
// for i := 1 to 8 do
19635: LD_ADDR_VAR 0 2
19639: PUSH
19640: DOUBLE
19641: LD_INT 1
19643: DEC
19644: ST_TO_ADDR
19645: LD_INT 8
19647: PUSH
19648: FOR_TO
19649: IFFALSE 19790
// if Side_Positions [ i ] then
19651: LD_EXP 18
19655: PUSH
19656: LD_VAR 0 2
19660: ARRAY
19661: IFFALSE 19788
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
19663: LD_EXP 58
19667: PUSH
19668: LD_EXP 18
19672: PUSH
19673: LD_VAR 0 2
19677: ARRAY
19678: ARRAY
19679: PPUSH
19680: LD_INT 0
19682: PPUSH
19683: CALL_OW 424
// for j := 1 to 8 do
19687: LD_ADDR_VAR 0 3
19691: PUSH
19692: DOUBLE
19693: LD_INT 1
19695: DEC
19696: ST_TO_ADDR
19697: LD_INT 8
19699: PUSH
19700: FOR_TO
19701: IFFALSE 19786
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19703: LD_EXP 18
19707: PUSH
19708: LD_VAR 0 3
19712: ARRAY
19713: PUSH
19714: LD_EXP 16
19718: PUSH
19719: LD_VAR 0 2
19723: ARRAY
19724: PUSH
19725: LD_EXP 16
19729: PUSH
19730: LD_VAR 0 3
19734: ARRAY
19735: NONEQUAL
19736: PUSH
19737: LD_EXP 20
19741: NOT
19742: PUSH
19743: LD_VAR 0 2
19747: PUSH
19748: LD_VAR 0 3
19752: NONEQUAL
19753: AND
19754: OR
19755: AND
19756: IFFALSE 19784
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19758: LD_VAR 0 3
19762: PPUSH
19763: LD_EXP 58
19767: PUSH
19768: LD_EXP 18
19772: PUSH
19773: LD_VAR 0 2
19777: ARRAY
19778: ARRAY
19779: PPUSH
19780: CALL_OW 334
19784: GO 19700
19786: POP
19787: POP
// end ;
19788: GO 19648
19790: POP
19791: POP
// end ;
19792: LD_VAR 0 1
19796: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
19797: LD_EXP 59
19801: IFFALSE 19976
19803: GO 19805
19805: DISABLE
19806: LD_INT 0
19808: PPUSH
19809: PPUSH
// begin for i := 1 to 8 do
19810: LD_ADDR_VAR 0 1
19814: PUSH
19815: DOUBLE
19816: LD_INT 1
19818: DEC
19819: ST_TO_ADDR
19820: LD_INT 8
19822: PUSH
19823: FOR_TO
19824: IFFALSE 19973
// if Side_Positions [ i ] then
19826: LD_EXP 18
19830: PUSH
19831: LD_VAR 0 1
19835: ARRAY
19836: IFFALSE 19971
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
19838: LD_ADDR_VAR 0 2
19842: PUSH
19843: LD_EXP 58
19847: PUSH
19848: LD_EXP 18
19852: PUSH
19853: LD_VAR 0 1
19857: ARRAY
19858: ARRAY
19859: PPUSH
19860: LD_INT 2
19862: PUSH
19863: LD_INT 21
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 21
19875: PUSH
19876: LD_INT 2
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 22
19890: PUSH
19891: LD_OWVAR 2
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PPUSH
19904: CALL_OW 70
19908: PUSH
19909: FOR_IN
19910: IFFALSE 19969
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
19912: LD_EXP 16
19916: PUSH
19917: LD_VAR 0 1
19921: ARRAY
19922: PUSH
19923: LD_EXP 16
19927: PUSH
19928: LD_OWVAR 2
19932: ARRAY
19933: NONEQUAL
19934: PUSH
19935: LD_EXP 20
19939: NOT
19940: PUSH
19941: LD_VAR 0 1
19945: PUSH
19946: LD_OWVAR 2
19950: NONEQUAL
19951: AND
19952: OR
19953: IFFALSE 19967
// ComMoveToArea ( un , BuildUpEscape ) ;
19955: LD_VAR 0 2
19959: PPUSH
19960: LD_INT 14
19962: PPUSH
19963: CALL_OW 113
19967: GO 19909
19969: POP
19970: POP
19971: GO 19823
19973: POP
19974: POP
// enable ;
19975: ENABLE
// end ;
19976: PPOPN 2
19978: END
// every 0 0$1 trigger def_builduptime do
19979: LD_EXP 54
19983: IFFALSE 20009
19985: GO 19987
19987: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
19988: LD_INT 8400
19990: PUSH
19991: LD_EXP 54
19995: PUSH
19996: LD_INT 2100
19998: MUL
19999: PLUS
20000: PPUSH
20001: CALL_OW 67
// EndBuildUp ;
20005: CALL 19622 0 0
// end ;
20009: END
