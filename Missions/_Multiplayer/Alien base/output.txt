// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_siberit , respawning_time_min , respawning_time_max , buildUpTime_Delay , amount_of_apemen , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 42
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 19
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 17
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 20
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 22
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 18
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 372
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 42
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 3 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 3
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 167: LD_ADDR_EXP 19
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 6
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 206: LD_ADDR_EXP 17
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 6
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 0 , 0 , 3 ] ;
 245: LD_ADDR_EXP 20
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 22
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 323: LD_ADDR_EXP 18
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// end ; for i := 1 to 8 do
 372: LD_ADDR_VAR 0 2
 376: PUSH
 377: DOUBLE
 378: LD_INT 1
 380: DEC
 381: ST_TO_ADDR
 382: LD_INT 8
 384: PUSH
 385: FOR_TO
 386: IFFALSE 473
// if Multiplayer_GetPlayerIsSpec ( i ) then
 388: LD_VAR 0 2
 392: PPUSH
 393: CALL_OW 530
 397: IFFALSE 471
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 399: LD_ADDR_EXP 19
 403: PUSH
 404: LD_EXP 19
 408: PPUSH
 409: LD_VAR 0 2
 413: PPUSH
 414: LD_INT 0
 416: PPUSH
 417: CALL_OW 1
 421: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 422: LD_ADDR_EXP 18
 426: PUSH
 427: LD_EXP 18
 431: PPUSH
 432: LD_EXP 17
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: PPUSH
 443: LD_EXP 18
 447: PUSH
 448: LD_EXP 17
 452: PUSH
 453: LD_VAR 0 2
 457: ARRAY
 458: ARRAY
 459: PUSH
 460: LD_VAR 0 2
 464: DIFF
 465: PPUSH
 466: CALL_OW 1
 470: ST_TO_ADDR
// end ;
 471: GO 385
 473: POP
 474: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 475: LD_ADDR_EXP 23
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 0
 485: PUSH
 486: LD_INT 0
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 0
 494: PUSH
 495: LD_INT 0
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: ST_TO_ADDR
// for i := 1 to 8 do
 506: LD_ADDR_VAR 0 2
 510: PUSH
 511: DOUBLE
 512: LD_INT 1
 514: DEC
 515: ST_TO_ADDR
 516: LD_INT 8
 518: PUSH
 519: FOR_TO
 520: IFFALSE 567
// if Side_Positions [ i ] then
 522: LD_EXP 19
 526: PUSH
 527: LD_VAR 0 2
 531: ARRAY
 532: IFFALSE 565
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 534: LD_ADDR_EXP 23
 538: PUSH
 539: LD_EXP 23
 543: PPUSH
 544: LD_EXP 19
 548: PUSH
 549: LD_VAR 0 2
 553: ARRAY
 554: PPUSH
 555: LD_VAR 0 2
 559: PPUSH
 560: CALL_OW 1
 564: ST_TO_ADDR
 565: GO 519
 567: POP
 568: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 569: LD_ADDR_EXP 21
 573: PUSH
 574: LD_EXP 17
 578: PUSH
 579: LD_INT 0
 581: PUSH
 582: EMPTY
 583: LIST
 584: DIFF
 585: PUSH
 586: LD_INT 1
 588: GREATER
 589: ST_TO_ADDR
// if Multiplayer then
 590: LD_OWVAR 4
 594: IFFALSE 840
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 596: LD_ADDR_EXP 44
 600: PUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 426
 608: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 609: LD_ADDR_EXP 45
 613: PUSH
 614: LD_INT 1
 616: PPUSH
 617: CALL_OW 426
 621: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 622: LD_ADDR_EXP 46
 626: PUSH
 627: LD_INT 2
 629: PPUSH
 630: CALL_OW 426
 634: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 635: LD_ADDR_EXP 47
 639: PUSH
 640: LD_INT 3
 642: PPUSH
 643: CALL_OW 426
 647: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 648: LD_ADDR_EXP 48
 652: PUSH
 653: LD_INT 4
 655: PPUSH
 656: CALL_OW 426
 660: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 661: LD_ADDR_EXP 49
 665: PUSH
 666: LD_INT 5
 668: PPUSH
 669: CALL_OW 426
 673: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 674: LD_ADDR_EXP 50
 678: PUSH
 679: LD_INT 6
 681: PPUSH
 682: CALL_OW 426
 686: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 687: LD_ADDR_EXP 51
 691: PUSH
 692: LD_INT 10
 694: PPUSH
 695: CALL_OW 426
 699: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 700: LD_ADDR_EXP 52
 704: PUSH
 705: LD_INT 11
 707: PPUSH
 708: CALL_OW 426
 712: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 713: LD_ADDR_EXP 53
 717: PUSH
 718: LD_INT 12
 720: PPUSH
 721: CALL_OW 426
 725: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 726: LD_ADDR_EXP 54
 730: PUSH
 731: LD_INT 13
 733: PPUSH
 734: CALL_OW 426
 738: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 739: LD_ADDR_EXP 55
 743: PUSH
 744: LD_INT 14
 746: PPUSH
 747: CALL_OW 426
 751: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 752: LD_ADDR_EXP 1
 756: PUSH
 757: LD_INT 15
 759: PPUSH
 760: CALL_OW 426
 764: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 765: LD_ADDR_EXP 2
 769: PUSH
 770: LD_INT 16
 772: PPUSH
 773: CALL_OW 426
 777: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 778: LD_ADDR_EXP 56
 782: PUSH
 783: LD_INT 17
 785: PPUSH
 786: CALL_OW 426
 790: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 791: LD_ADDR_EXP 57
 795: PUSH
 796: LD_INT 20
 798: PPUSH
 799: CALL_OW 426
 803: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 804: LD_ADDR_EXP 43
 808: PUSH
 809: LD_INT 21
 811: PPUSH
 812: CALL_OW 426
 816: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_INT 22
 824: PPUSH
 825: CALL_OW 426
 829: ST_TO_ADDR
// def_win_rules = 0 ;
 830: LD_ADDR_EXP 32
 834: PUSH
 835: LD_INT 0
 837: ST_TO_ADDR
// end else
 838: GO 996
// begin Randomize ;
 840: CALL_OW 10
// def_base_level := 2 ;
 844: LD_ADDR_EXP 44
 848: PUSH
 849: LD_INT 2
 851: ST_TO_ADDR
// def_amount_of_people := 0 ;
 852: LD_ADDR_EXP 45
 856: PUSH
 857: LD_INT 0
 859: ST_TO_ADDR
// def_skill_level := 1 ;
 860: LD_ADDR_EXP 46
 864: PUSH
 865: LD_INT 1
 867: ST_TO_ADDR
// def_starting_resources := 2 ;
 868: LD_ADDR_EXP 47
 872: PUSH
 873: LD_INT 2
 875: ST_TO_ADDR
// def_shipments_density := 1 ;
 876: LD_ADDR_EXP 48
 880: PUSH
 881: LD_INT 1
 883: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 884: LD_ADDR_EXP 49
 888: PUSH
 889: LD_INT 0
 891: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 892: LD_ADDR_EXP 50
 896: PUSH
 897: LD_INT 1
 899: ST_TO_ADDR
// def_shared_vision := 1 ;
 900: LD_ADDR_EXP 51
 904: PUSH
 905: LD_INT 1
 907: ST_TO_ADDR
// def_morale_flags := 1 ;
 908: LD_ADDR_EXP 52
 912: PUSH
 913: LD_INT 1
 915: ST_TO_ADDR
// def_siberite_detection := 1 ;
 916: LD_ADDR_EXP 53
 920: PUSH
 921: LD_INT 1
 923: ST_TO_ADDR
// def_people_respawning := 2 ;
 924: LD_ADDR_EXP 54
 928: PUSH
 929: LD_INT 2
 931: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 932: LD_ADDR_EXP 55
 936: PUSH
 937: LD_INT 3
 939: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 940: LD_ADDR_EXP 1
 944: PUSH
 945: LD_INT 0
 947: ST_TO_ADDR
// def_public_score := 0 ;
 948: LD_ADDR_EXP 2
 952: PUSH
 953: LD_INT 0
 955: ST_TO_ADDR
// def_siberite_bomb := 4 ;
 956: LD_ADDR_EXP 56
 960: PUSH
 961: LD_INT 4
 963: ST_TO_ADDR
// def_builduptime := 0 ;
 964: LD_ADDR_EXP 57
 968: PUSH
 969: LD_INT 0
 971: ST_TO_ADDR
// def_game_rules := 0 ;
 972: LD_ADDR_EXP 43
 976: PUSH
 977: LD_INT 0
 979: ST_TO_ADDR
// tech_level = 4 ;
 980: LD_ADDR_VAR 0 3
 984: PUSH
 985: LD_INT 4
 987: ST_TO_ADDR
// def_win_rules = 0 ;
 988: LD_ADDR_EXP 32
 992: PUSH
 993: LD_INT 0
 995: ST_TO_ADDR
// end ; InitGameRules ;
 996: CALL 10615 0 0
// if def_game_rules = 0 then
1000: LD_EXP 43
1004: PUSH
1005: LD_INT 0
1007: EQUAL
1008: IFFALSE 1059
// begin if isSGUI then
1010: LD_OWVAR 83
1014: IFFALSE 1022
// setMpTechs ( ) else
1016: CALL 15508 0 0
1020: GO 1059
// begin if Game_Type = 3 then
1022: LD_EXP 42
1026: PUSH
1027: LD_INT 3
1029: EQUAL
1030: IFFALSE 1046
// tech_level = tech_level + 3 ;
1032: LD_ADDR_VAR 0 3
1036: PUSH
1037: LD_VAR 0 3
1041: PUSH
1042: LD_INT 3
1044: PLUS
1045: ST_TO_ADDR
// SetMpTechLevel ( tech_level + 1 ) ;
1046: LD_VAR 0 3
1050: PUSH
1051: LD_INT 1
1053: PLUS
1054: PPUSH
1055: CALL 15655 0 1
// end ; end ; if ( Game_Type = 5 ) then
1059: LD_EXP 42
1063: PUSH
1064: LD_INT 5
1066: EQUAL
1067: IFFALSE 1096
// begin def_base_level := 1 ;
1069: LD_ADDR_EXP 44
1073: PUSH
1074: LD_INT 1
1076: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
1077: LD_ADDR_EXP 49
1081: PUSH
1082: LD_INT 0
1084: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
1085: LD_ADDR_EXP 50
1089: PUSH
1090: LD_INT 0
1092: ST_TO_ADDR
// disable ( 10 ) ;
1093: LD_INT 10
1095: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 0
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_EXP 44
1119: PUSH
1120: LD_INT 1
1122: PLUS
1123: ARRAY
1124: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
1125: LD_ADDR_EXP 4
1129: PUSH
1130: LD_INT 0
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 2
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: LIST
1143: PUSH
1144: LD_EXP 44
1148: PUSH
1149: LD_INT 1
1151: PLUS
1152: ARRAY
1153: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1154: LD_ADDR_EXP 5
1158: PUSH
1159: LD_EXP 45
1163: PUSH
1164: LD_INT 4
1166: PLUS
1167: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1168: LD_ADDR_EXP 9
1172: PUSH
1173: LD_INT 150
1175: PUSH
1176: LD_EXP 48
1180: PUSH
1181: LD_INT 1
1183: PLUS
1184: MINUS
1185: ST_TO_ADDR
// if def_people_respawning = 0 then
1186: LD_EXP 54
1190: PUSH
1191: LD_INT 0
1193: EQUAL
1194: IFFALSE 1214
// begin respawning_time_min = 0 ;
1196: LD_ADDR_EXP 12
1200: PUSH
1201: LD_INT 0
1203: ST_TO_ADDR
// respawning_time_max = 0 ;
1204: LD_ADDR_EXP 13
1208: PUSH
1209: LD_INT 0
1211: ST_TO_ADDR
// end else
1212: GO 1258
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1214: LD_ADDR_EXP 12
1218: PUSH
1219: LD_INT 10500
1221: PUSH
1222: LD_INT 5
1224: DIVREAL
1225: PUSH
1226: LD_INT 6
1228: PUSH
1229: LD_EXP 54
1233: MINUS
1234: MUL
1235: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1236: LD_ADDR_EXP 13
1240: PUSH
1241: LD_INT 31500
1243: PUSH
1244: LD_INT 5
1246: DIVREAL
1247: PUSH
1248: LD_INT 6
1250: PUSH
1251: LD_EXP 54
1255: MINUS
1256: MUL
1257: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1258: LD_EXP 55
1262: NOT
1263: IFFALSE 1275
// amount_of_apemen := 0 else
1265: LD_ADDR_EXP 15
1269: PUSH
1270: LD_INT 0
1272: ST_TO_ADDR
1273: GO 1285
// amount_of_apemen := def_amount_of_apemen ;
1275: LD_ADDR_EXP 15
1279: PUSH
1280: LD_EXP 55
1284: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1285: LD_EXP 56
1289: PUSH
1290: LD_INT 0
1292: EQUAL
1293: IFFALSE 1305
// siberite_bomb_Delay = 0 else
1295: LD_ADDR_EXP 16
1299: PUSH
1300: LD_INT 0
1302: ST_TO_ADDR
1303: GO 1327
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1305: LD_ADDR_EXP 16
1309: PUSH
1310: LD_EXP 56
1314: PUSH
1315: LD_INT 1
1317: MINUS
1318: PUSH
1319: LD_INT 21000
1321: MUL
1322: PUSH
1323: LD_INT 1
1325: PLUS
1326: ST_TO_ADDR
// if def_builduptime = 0 then
1327: LD_EXP 57
1331: PUSH
1332: LD_INT 0
1334: EQUAL
1335: IFFALSE 1347
// buildUpTime_Delay = 0 else
1337: LD_ADDR_EXP 14
1341: PUSH
1342: LD_INT 0
1344: ST_TO_ADDR
1345: GO 1365
// buildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
1347: LD_ADDR_EXP 14
1351: PUSH
1352: LD_INT 8400
1354: PUSH
1355: LD_INT 2100
1357: PUSH
1358: LD_EXP 57
1362: MUL
1363: PLUS
1364: ST_TO_ADDR
// amount_of_siberit = 30 + def_amount_of_siberit * 5 ;
1365: LD_ADDR_EXP 11
1369: PUSH
1370: LD_INT 30
1372: PUSH
1373: LD_EXP 1
1377: PUSH
1378: LD_INT 5
1380: MUL
1381: PLUS
1382: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1383: LD_ADDR_EXP 6
1387: PUSH
1388: LD_INT 2
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: PUSH
1406: LD_EXP 46
1410: PUSH
1411: LD_INT 1
1413: PLUS
1414: ARRAY
1415: ST_TO_ADDR
// if ( Game_Type = 5 ) then
1416: LD_EXP 42
1420: PUSH
1421: LD_INT 5
1423: EQUAL
1424: IFFALSE 1542
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1426: LD_ADDR_EXP 8
1430: PUSH
1431: LD_INT 1000
1433: PUSH
1434: LD_INT 100
1436: PUSH
1437: LD_INT 100
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: LIST
1444: PUSH
1445: LD_INT 2000
1447: PUSH
1448: LD_INT 200
1450: PUSH
1451: LD_INT 200
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 5000
1461: PUSH
1462: LD_INT 500
1464: PUSH
1465: LD_INT 500
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 10000
1475: PUSH
1476: LD_INT 1000
1478: PUSH
1479: LD_INT 1000
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: PUSH
1487: LD_INT 25000
1489: PUSH
1490: LD_INT 2500
1492: PUSH
1493: LD_INT 2500
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: PUSH
1501: LD_INT 50000
1503: PUSH
1504: LD_INT 5000
1506: PUSH
1507: LD_INT 5000
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: PUSH
1523: LD_EXP 47
1527: PUSH
1528: LD_INT 1
1530: PLUS
1531: ARRAY
1532: ST_TO_ADDR
// starting_crates := [ ] ;
1533: LD_ADDR_EXP 7
1537: PUSH
1538: EMPTY
1539: ST_TO_ADDR
// end else
1540: GO 1688
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1542: LD_ADDR_EXP 8
1546: PUSH
1547: LD_INT 0
1549: PUSH
1550: LD_INT 0
1552: PUSH
1553: LD_INT 0
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: LIST
1560: PUSH
1561: LD_INT 30
1563: PUSH
1564: LD_INT 0
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: PUSH
1575: LD_INT 50
1577: PUSH
1578: LD_INT 20
1580: PUSH
1581: LD_INT 0
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 80
1591: PUSH
1592: LD_INT 40
1594: PUSH
1595: LD_INT 20
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_EXP 47
1613: PUSH
1614: LD_INT 1
1616: PLUS
1617: ARRAY
1618: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1619: LD_ADDR_EXP 7
1623: PUSH
1624: LD_INT 10
1626: PUSH
1627: EMPTY
1628: LIST
1629: PUSH
1630: LD_INT 7
1632: PUSH
1633: LD_INT 14
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 6
1642: PUSH
1643: LD_INT 12
1645: PUSH
1646: LD_INT 18
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 5
1656: PUSH
1657: LD_INT 10
1659: PUSH
1660: LD_INT 15
1662: PUSH
1663: LD_INT 20
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_EXP 47
1682: PUSH
1683: LD_INT 1
1685: PLUS
1686: ARRAY
1687: ST_TO_ADDR
// end ; morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1688: LD_ADDR_EXP 10
1692: PUSH
1693: LD_INT 1
1695: NEG
1696: PUSH
1697: LD_INT 350
1699: PUSH
1700: LD_INT 700
1702: PUSH
1703: LD_INT 1400
1705: PUSH
1706: LD_INT 0
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PUSH
1716: LD_EXP 52
1720: PUSH
1721: LD_INT 1
1723: PLUS
1724: ARRAY
1725: ST_TO_ADDR
// battle_flags_id := [ ] ;
1726: LD_ADDR_EXP 31
1730: PUSH
1731: EMPTY
1732: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1733: LD_ADDR_EXP 41
1737: PUSH
1738: LD_INT 8
1740: PUSH
1741: LD_INT 9
1743: PUSH
1744: LD_INT 10
1746: PUSH
1747: LD_INT 11
1749: PUSH
1750: LD_INT 12
1752: PUSH
1753: LD_INT 13
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: LIST
1760: LIST
1761: LIST
1762: LIST
1763: ST_TO_ADDR
// end ;
1764: LD_VAR 0 1
1768: RET
// function init_map ; var i , j ; begin
1769: LD_INT 0
1771: PPUSH
1772: PPUSH
1773: PPUSH
// normal_oil_deposits_locations := [ [ 28 , 22 ] , [ 69 , 3 ] , [ 138 , 27 ] , [ 180 , 104 ] , [ 138 , 137 ] , [ 76 , 115 ] ] ;
1774: LD_ADDR_EXP 27
1778: PUSH
1779: LD_INT 28
1781: PUSH
1782: LD_INT 22
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: LD_INT 69
1791: PUSH
1792: LD_INT 3
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 138
1801: PUSH
1802: LD_INT 27
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: PUSH
1809: LD_INT 180
1811: PUSH
1812: LD_INT 104
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 138
1821: PUSH
1822: LD_INT 137
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 76
1831: PUSH
1832: LD_INT 115
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 31 , 38 ] , [ 34 , 21 ] ] , [ [ 58 , 4 ] , [ 82 , 4 ] ] , [ [ 122 , 18 ] , [ 152 , 43 ] ] , [ [ 174 , 90 ] , [ 180 , 120 ] ] , [ [ 152 , 136 ] , [ 130 , 136 ] ] , [ [ 89 , 116 ] , [ 59 , 89 ] ] ] ;
1847: LD_ADDR_EXP 28
1851: PUSH
1852: LD_INT 31
1854: PUSH
1855: LD_INT 38
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 34
1864: PUSH
1865: LD_INT 21
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 58
1878: PUSH
1879: LD_INT 4
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 82
1888: PUSH
1889: LD_INT 4
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 122
1902: PUSH
1903: LD_INT 18
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 152
1912: PUSH
1913: LD_INT 43
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 174
1926: PUSH
1927: LD_INT 90
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 180
1936: PUSH
1937: LD_INT 120
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: PUSH
1948: LD_INT 152
1950: PUSH
1951: LD_INT 136
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 130
1960: PUSH
1961: LD_INT 136
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 89
1974: PUSH
1975: LD_INT 116
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 59
1984: PUSH
1985: LD_INT 89
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 28 , 26 ] , [ 73 , 3 ] , [ 133 , 22 ] , [ 180 , 110 ] , [ 142 , 137 ] , [ 72 , 112 ] ] ;
2004: LD_ADDR_EXP 29
2008: PUSH
2009: LD_INT 28
2011: PUSH
2012: LD_INT 26
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: PUSH
2019: LD_INT 73
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 133
2031: PUSH
2032: LD_INT 22
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 180
2041: PUSH
2042: LD_INT 110
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 142
2051: PUSH
2052: LD_INT 137
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 72
2061: PUSH
2062: LD_INT 112
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 27 , 39 ] , [ 30 , 16 ] ] , [ [ 57 , 8 ] , [ 87 , 8 ] ] , [ [ 128 , 19 ] , [ 146 , 36 ] ] , [ [ 176 , 121 ] , [ 179 , 96 ] ] , [ [ 153 , 132 ] , [ 124 , 133 ] ] , [ [ 85 , 117 ] , [ 62 , 96 ] ] ] ;
2077: LD_ADDR_EXP 30
2081: PUSH
2082: LD_INT 27
2084: PUSH
2085: LD_INT 39
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 30
2094: PUSH
2095: LD_INT 16
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: PUSH
2106: LD_INT 57
2108: PUSH
2109: LD_INT 8
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 87
2118: PUSH
2119: LD_INT 8
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 128
2132: PUSH
2133: LD_INT 19
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 146
2142: PUSH
2143: LD_INT 36
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 176
2156: PUSH
2157: LD_INT 121
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PUSH
2164: LD_INT 179
2166: PUSH
2167: LD_INT 96
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PUSH
2178: LD_INT 153
2180: PUSH
2181: LD_INT 132
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: PUSH
2188: LD_INT 124
2190: PUSH
2191: LD_INT 133
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: PUSH
2202: LD_INT 85
2204: PUSH
2205: LD_INT 117
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PUSH
2212: LD_INT 62
2214: PUSH
2215: LD_INT 96
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: ST_TO_ADDR
// depot_def := [ [ 53 , 42 , 5 ] , [ 78 , 18 , 0 ] , [ 129 , 43 , 1 ] , [ 155 , 96 , 2 ] , [ 130 , 120 , 3 ] , [ 82 , 98 , 3 ] ] ;
2234: LD_ADDR_EXP 24
2238: PUSH
2239: LD_INT 53
2241: PUSH
2242: LD_INT 42
2244: PUSH
2245: LD_INT 5
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: LIST
2252: PUSH
2253: LD_INT 78
2255: PUSH
2256: LD_INT 18
2258: PUSH
2259: LD_INT 0
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: LIST
2266: PUSH
2267: LD_INT 129
2269: PUSH
2270: LD_INT 43
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 155
2283: PUSH
2284: LD_INT 96
2286: PUSH
2287: LD_INT 2
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 130
2297: PUSH
2298: LD_INT 120
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 82
2311: PUSH
2312: LD_INT 98
2314: PUSH
2315: LD_INT 3
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: LIST
2330: ST_TO_ADDR
// for i in depot_def do
2331: LD_ADDR_VAR 0 2
2335: PUSH
2336: LD_EXP 24
2340: PUSH
2341: FOR_IN
2342: IFFALSE 2416
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2344: LD_ADDR_EXP 26
2348: PUSH
2349: LD_EXP 26
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_INT 1
2361: ARRAY
2362: PPUSH
2363: LD_VAR 0 2
2367: PUSH
2368: LD_INT 3
2370: ARRAY
2371: PPUSH
2372: LD_INT 10
2374: PPUSH
2375: CALL_OW 272
2379: PUSH
2380: LD_VAR 0 2
2384: PUSH
2385: LD_INT 2
2387: ARRAY
2388: PPUSH
2389: LD_VAR 0 2
2393: PUSH
2394: LD_INT 3
2396: ARRAY
2397: PPUSH
2398: LD_INT 10
2400: PPUSH
2401: CALL_OW 273
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: EMPTY
2411: LIST
2412: ADD
2413: ST_TO_ADDR
2414: GO 2341
2416: POP
2417: POP
// breastworks_def := [ [ [ 65 , 53 , 5 ] , [ 65 , 40 , 4 ] ] , [ [ 76 , 28 , 0 ] , [ 89 , 28 , 5 ] ] , [ [ 115 , 41 , 1 ] , [ 128 , 54 , 0 ] ] , [ [ 143 , 82 , 2 ] , [ 143 , 95 , 1 ] ] , [ [ 131 , 108 , 3 ] , [ 118 , 108 , 2 ] ] , [ [ 80 , 85 , 3 ] , [ 92 , 97 , 4 ] ] ] ;
2418: LD_ADDR_EXP 25
2422: PUSH
2423: LD_INT 65
2425: PUSH
2426: LD_INT 53
2428: PUSH
2429: LD_INT 5
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: LIST
2436: PUSH
2437: LD_INT 65
2439: PUSH
2440: LD_INT 40
2442: PUSH
2443: LD_INT 4
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 76
2457: PUSH
2458: LD_INT 28
2460: PUSH
2461: LD_INT 0
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 89
2471: PUSH
2472: LD_INT 28
2474: PUSH
2475: LD_INT 5
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 115
2489: PUSH
2490: LD_INT 41
2492: PUSH
2493: LD_INT 1
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 128
2503: PUSH
2504: LD_INT 54
2506: PUSH
2507: LD_INT 0
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: LIST
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 143
2521: PUSH
2522: LD_INT 82
2524: PUSH
2525: LD_INT 2
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 143
2535: PUSH
2536: LD_INT 95
2538: PUSH
2539: LD_INT 1
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: LIST
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 131
2553: PUSH
2554: LD_INT 108
2556: PUSH
2557: LD_INT 3
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: LIST
2564: PUSH
2565: LD_INT 118
2567: PUSH
2568: LD_INT 108
2570: PUSH
2571: LD_INT 2
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: LIST
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: LD_INT 80
2585: PUSH
2586: LD_INT 85
2588: PUSH
2589: LD_INT 3
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: LD_INT 92
2599: PUSH
2600: LD_INT 97
2602: PUSH
2603: LD_INT 4
2605: PUSH
2606: EMPTY
2607: LIST
2608: LIST
2609: LIST
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: ST_TO_ADDR
// for i = 1 to Side_Positions do
2623: LD_ADDR_VAR 0 2
2627: PUSH
2628: DOUBLE
2629: LD_INT 1
2631: DEC
2632: ST_TO_ADDR
2633: LD_EXP 19
2637: PUSH
2638: FOR_TO
2639: IFFALSE 2769
// begin if not Side_Positions [ i ] then
2641: LD_EXP 19
2645: PUSH
2646: LD_VAR 0 2
2650: ARRAY
2651: NOT
2652: IFFALSE 2656
// continue ;
2654: GO 2638
// if def_extra_oil_deposits then
2656: LD_EXP 49
2660: IFFALSE 2718
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2662: LD_ADDR_VAR 0 3
2666: PUSH
2667: LD_EXP 28
2671: PUSH
2672: LD_EXP 19
2676: PUSH
2677: LD_VAR 0 2
2681: ARRAY
2682: ARRAY
2683: PUSH
2684: FOR_IN
2685: IFFALSE 2714
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 1
2694: ARRAY
2695: PPUSH
2696: LD_VAR 0 3
2700: PUSH
2701: LD_INT 2
2703: ARRAY
2704: PPUSH
2705: LD_INT 2
2707: PPUSH
2708: CALL_OW 62
2712: GO 2684
2714: POP
2715: POP
2716: GO 2767
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2718: LD_EXP 27
2722: PUSH
2723: LD_EXP 19
2727: PUSH
2728: LD_VAR 0 2
2732: ARRAY
2733: ARRAY
2734: PUSH
2735: LD_INT 1
2737: ARRAY
2738: PPUSH
2739: LD_EXP 27
2743: PUSH
2744: LD_EXP 19
2748: PUSH
2749: LD_VAR 0 2
2753: ARRAY
2754: ARRAY
2755: PUSH
2756: LD_INT 2
2758: ARRAY
2759: PPUSH
2760: LD_INT 2
2762: PPUSH
2763: CALL_OW 62
// end ;
2767: GO 2638
2769: POP
2770: POP
// if def_extra_sib_deposits then
2771: LD_EXP 50
2775: IFFALSE 2929
// for i = 1 to Side_Positions do
2777: LD_ADDR_VAR 0 2
2781: PUSH
2782: DOUBLE
2783: LD_INT 1
2785: DEC
2786: ST_TO_ADDR
2787: LD_EXP 19
2791: PUSH
2792: FOR_TO
2793: IFFALSE 2927
// begin if not Side_Positions [ i ] then
2795: LD_EXP 19
2799: PUSH
2800: LD_VAR 0 2
2804: ARRAY
2805: NOT
2806: IFFALSE 2810
// continue ;
2808: GO 2792
// if def_extra_sib_deposits = 2 then
2810: LD_EXP 50
2814: PUSH
2815: LD_INT 2
2817: EQUAL
2818: IFFALSE 2876
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2820: LD_ADDR_VAR 0 3
2824: PUSH
2825: LD_EXP 30
2829: PUSH
2830: LD_EXP 19
2834: PUSH
2835: LD_VAR 0 2
2839: ARRAY
2840: ARRAY
2841: PUSH
2842: FOR_IN
2843: IFFALSE 2872
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2845: LD_VAR 0 3
2849: PUSH
2850: LD_INT 1
2852: ARRAY
2853: PPUSH
2854: LD_VAR 0 3
2858: PUSH
2859: LD_INT 2
2861: ARRAY
2862: PPUSH
2863: LD_INT 3
2865: PPUSH
2866: CALL_OW 62
2870: GO 2842
2872: POP
2873: POP
2874: GO 2925
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2876: LD_EXP 29
2880: PUSH
2881: LD_EXP 19
2885: PUSH
2886: LD_VAR 0 2
2890: ARRAY
2891: ARRAY
2892: PUSH
2893: LD_INT 1
2895: ARRAY
2896: PPUSH
2897: LD_EXP 29
2901: PUSH
2902: LD_EXP 19
2906: PUSH
2907: LD_VAR 0 2
2911: ARRAY
2912: ARRAY
2913: PUSH
2914: LD_INT 2
2916: ARRAY
2917: PPUSH
2918: LD_INT 3
2920: PPUSH
2921: CALL_OW 62
// end ;
2925: GO 2792
2927: POP
2928: POP
// end ;
2929: LD_VAR 0 1
2933: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2934: LD_INT 0
2936: PPUSH
2937: PPUSH
2938: PPUSH
// if not Team_Game then
2939: LD_EXP 21
2943: NOT
2944: IFFALSE 3042
// begin for i = 1 to 8 do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 8
2958: PUSH
2959: FOR_TO
2960: IFFALSE 3038
// for j = 1 to 8 do
2962: LD_ADDR_VAR 0 3
2966: PUSH
2967: DOUBLE
2968: LD_INT 1
2970: DEC
2971: ST_TO_ADDR
2972: LD_INT 8
2974: PUSH
2975: FOR_TO
2976: IFFALSE 3034
// if i <> j then
2978: LD_VAR 0 2
2982: PUSH
2983: LD_VAR 0 3
2987: NONEQUAL
2988: IFFALSE 3012
// SetAttitude ( i , j , att_neutral , true ) else
2990: LD_VAR 0 2
2994: PPUSH
2995: LD_VAR 0 3
2999: PPUSH
3000: LD_INT 0
3002: PPUSH
3003: LD_INT 1
3005: PPUSH
3006: CALL_OW 80
3010: GO 3032
// SetAttitude ( i , j , att_friend , true ) ;
3012: LD_VAR 0 2
3016: PPUSH
3017: LD_VAR 0 3
3021: PPUSH
3022: LD_INT 1
3024: PPUSH
3025: LD_INT 1
3027: PPUSH
3028: CALL_OW 80
3032: GO 2975
3034: POP
3035: POP
3036: GO 2959
3038: POP
3039: POP
// end else
3040: GO 3217
// begin if def_shared_vision then
3042: LD_EXP 51
3046: IFFALSE 3111
// begin for i in Teams do
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: LD_EXP 18
3057: PUSH
3058: FOR_IN
3059: IFFALSE 3109
// for j = 2 to i do
3061: LD_ADDR_VAR 0 3
3065: PUSH
3066: DOUBLE
3067: LD_INT 2
3069: DEC
3070: ST_TO_ADDR
3071: LD_VAR 0 2
3075: PUSH
3076: FOR_TO
3077: IFFALSE 3105
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3079: LD_VAR 0 2
3083: PUSH
3084: LD_VAR 0 3
3088: ARRAY
3089: PPUSH
3090: LD_VAR 0 2
3094: PUSH
3095: LD_INT 1
3097: ARRAY
3098: PPUSH
3099: CALL_OW 343
3103: GO 3076
3105: POP
3106: POP
3107: GO 3058
3109: POP
3110: POP
// end ; for i = 1 to 8 do
3111: LD_ADDR_VAR 0 2
3115: PUSH
3116: DOUBLE
3117: LD_INT 1
3119: DEC
3120: ST_TO_ADDR
3121: LD_INT 8
3123: PUSH
3124: FOR_TO
3125: IFFALSE 3215
// for j = 1 to 8 do
3127: LD_ADDR_VAR 0 3
3131: PUSH
3132: DOUBLE
3133: LD_INT 1
3135: DEC
3136: ST_TO_ADDR
3137: LD_INT 8
3139: PUSH
3140: FOR_TO
3141: IFFALSE 3211
// if Side_Teams [ i ] = Side_Teams [ j ] then
3143: LD_EXP 17
3147: PUSH
3148: LD_VAR 0 2
3152: ARRAY
3153: PUSH
3154: LD_EXP 17
3158: PUSH
3159: LD_VAR 0 3
3163: ARRAY
3164: EQUAL
3165: IFFALSE 3189
// SetAttitude ( i , j , att_friend , true ) else
3167: LD_VAR 0 2
3171: PPUSH
3172: LD_VAR 0 3
3176: PPUSH
3177: LD_INT 1
3179: PPUSH
3180: LD_INT 1
3182: PPUSH
3183: CALL_OW 80
3187: GO 3209
// SetAttitude ( i , j , att_enemy , true ) ;
3189: LD_VAR 0 2
3193: PPUSH
3194: LD_VAR 0 3
3198: PPUSH
3199: LD_INT 2
3201: PPUSH
3202: LD_INT 1
3204: PPUSH
3205: CALL_OW 80
3209: GO 3140
3211: POP
3212: POP
3213: GO 3124
3215: POP
3216: POP
// end ; end ;
3217: LD_VAR 0 1
3221: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3222: LD_INT 0
3224: PPUSH
3225: PPUSH
3226: PPUSH
3227: PPUSH
// result := [ ] ;
3228: LD_ADDR_VAR 0 7
3232: PUSH
3233: EMPTY
3234: ST_TO_ADDR
// for i := 1 to count do
3235: LD_ADDR_VAR 0 8
3239: PUSH
3240: DOUBLE
3241: LD_INT 1
3243: DEC
3244: ST_TO_ADDR
3245: LD_VAR 0 1
3249: PUSH
3250: FOR_TO
3251: IFFALSE 3669
// begin uc_direction := Rand ( 0 , 5 ) ;
3253: LD_ADDR_OWVAR 24
3257: PUSH
3258: LD_INT 0
3260: PPUSH
3261: LD_INT 5
3263: PPUSH
3264: CALL_OW 12
3268: ST_TO_ADDR
// if commander then
3269: LD_LOC 1
3273: IFFALSE 3382
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3275: LD_ADDR_OWVAR 26
3279: PUSH
3280: LD_OWVAR 19
3284: PUSH
3285: LD_OWVAR 20
3289: ARRAY
3290: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3291: LD_INT 1
3293: PPUSH
3294: LD_INT 2
3296: PPUSH
3297: CALL_OW 12
3301: PPUSH
3302: LD_VAR 0 2
3306: PPUSH
3307: LD_EXP 6
3311: PUSH
3312: LD_INT 2
3314: PLUS
3315: PPUSH
3316: CALL_OW 380
// hc_importance := 105 ;
3320: LD_ADDR_OWVAR 32
3324: PUSH
3325: LD_INT 105
3327: ST_TO_ADDR
// commander := false ;
3328: LD_ADDR_LOC 1
3332: PUSH
3333: LD_INT 0
3335: ST_TO_ADDR
// if Multiplayer then
3336: LD_OWVAR 4
3340: IFFALSE 3380
// begin hc_gallery := MULTIAVATARS ;
3342: LD_ADDR_OWVAR 33
3346: PUSH
3347: LD_STRING MULTIAVATARS
3349: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3350: LD_ADDR_OWVAR 34
3354: PUSH
3355: LD_OWVAR 20
3359: PPUSH
3360: CALL_OW 525
3364: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3365: LD_ADDR_OWVAR 27
3369: PUSH
3370: LD_OWVAR 20
3374: PPUSH
3375: CALL_OW 526
3379: ST_TO_ADDR
// end ; end else
3380: GO 3445
// begin hc_name :=  ;
3382: LD_ADDR_OWVAR 26
3386: PUSH
3387: LD_STRING 
3389: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3390: LD_INT 1
3392: PPUSH
3393: LD_INT 2
3395: PPUSH
3396: CALL_OW 12
3400: PPUSH
3401: LD_VAR 0 2
3405: PPUSH
3406: LD_EXP 6
3410: PPUSH
3411: CALL_OW 380
// hc_importance := 0 ;
3415: LD_ADDR_OWVAR 32
3419: PUSH
3420: LD_INT 0
3422: ST_TO_ADDR
// if Multiplayer then
3423: LD_OWVAR 4
3427: IFFALSE 3445
// begin hc_gallery :=  ;
3429: LD_ADDR_OWVAR 33
3433: PUSH
3434: LD_STRING 
3436: ST_TO_ADDR
// hc_face_number := 0 ;
3437: LD_ADDR_OWVAR 34
3441: PUSH
3442: LD_INT 0
3444: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3445: LD_ADDR_VAR 0 10
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// if global_defined then
3455: LD_LOC 3
3459: IFFALSE 3599
// begin if ( cl = class_soldier ) then
3461: LD_VAR 0 2
3465: PUSH
3466: LD_INT 1
3468: EQUAL
3469: IFFALSE 3489
// j := i + soldiers_created else
3471: LD_ADDR_VAR 0 9
3475: PUSH
3476: LD_VAR 0 8
3480: PUSH
3481: LD_LOC 4
3485: PLUS
3486: ST_TO_ADDR
3487: GO 3499
// j := i ;
3489: LD_ADDR_VAR 0 9
3493: PUSH
3494: LD_VAR 0 8
3498: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3499: LD_LOC 2
3503: PUSH
3504: LD_VAR 0 2
3508: ARRAY
3509: PUSH
3510: LD_VAR 0 9
3514: ARRAY
3515: PPUSH
3516: LD_VAR 0 10
3520: PPUSH
3521: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3525: LD_VAR 0 10
3529: PPUSH
3530: LD_INT 2
3532: PPUSH
3533: LD_LOC 2
3537: PUSH
3538: LD_VAR 0 2
3542: ARRAY
3543: PUSH
3544: LD_VAR 0 9
3548: ARRAY
3549: PPUSH
3550: LD_INT 2
3552: PPUSH
3553: CALL_OW 260
3557: PPUSH
3558: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3562: LD_VAR 0 10
3566: PPUSH
3567: LD_INT 1
3569: PPUSH
3570: LD_LOC 2
3574: PUSH
3575: LD_VAR 0 2
3579: ARRAY
3580: PUSH
3581: LD_VAR 0 9
3585: ARRAY
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: CALL_OW 260
3594: PPUSH
3595: CALL_OW 239
// end ; if building then
3599: LD_VAR 0 6
3603: IFFALSE 3621
// PlaceHumanInUnit ( un , building ) else
3605: LD_VAR 0 10
3609: PPUSH
3610: LD_VAR 0 6
3614: PPUSH
3615: CALL_OW 52
3619: GO 3648
// PlaceUnitXYR ( un , x , y , r , false ) ;
3621: LD_VAR 0 10
3625: PPUSH
3626: LD_VAR 0 3
3630: PPUSH
3631: LD_VAR 0 4
3635: PPUSH
3636: LD_VAR 0 5
3640: PPUSH
3641: LD_INT 0
3643: PPUSH
3644: CALL_OW 50
// result := result ^ [ un ] ;
3648: LD_ADDR_VAR 0 7
3652: PUSH
3653: LD_VAR 0 7
3657: PUSH
3658: LD_VAR 0 10
3662: PUSH
3663: EMPTY
3664: LIST
3665: ADD
3666: ST_TO_ADDR
// end ;
3667: GO 3250
3669: POP
3670: POP
// if not global_defined then
3671: LD_LOC 3
3675: NOT
3676: IFFALSE 3754
// if ( global_units >= cl ) then
3678: LD_LOC 2
3682: PUSH
3683: LD_VAR 0 2
3687: GREATEREQUAL
3688: IFFALSE 3729
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3690: LD_ADDR_LOC 2
3694: PUSH
3695: LD_LOC 2
3699: PPUSH
3700: LD_VAR 0 2
3704: PPUSH
3705: LD_LOC 2
3709: PUSH
3710: LD_VAR 0 2
3714: ARRAY
3715: PUSH
3716: LD_VAR 0 7
3720: ADD
3721: PPUSH
3722: CALL_OW 1
3726: ST_TO_ADDR
3727: GO 3754
// global_units := Replace ( global_units , cl , result ) ;
3729: LD_ADDR_LOC 2
3733: PUSH
3734: LD_LOC 2
3738: PPUSH
3739: LD_VAR 0 2
3743: PPUSH
3744: LD_VAR 0 7
3748: PPUSH
3749: CALL_OW 1
3753: ST_TO_ADDR
// if commander then
3754: LD_LOC 1
3758: IFFALSE 3805
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3760: LD_ADDR_EXP 33
3764: PUSH
3765: LD_EXP 33
3769: PPUSH
3770: LD_OWVAR 20
3774: PPUSH
3775: LD_EXP 33
3779: PUSH
3780: LD_OWVAR 20
3784: ARRAY
3785: PUSH
3786: LD_VAR 0 10
3790: ADD
3791: PPUSH
3792: CALL_OW 1
3796: ST_TO_ADDR
// commander := false ;
3797: LD_ADDR_LOC 1
3801: PUSH
3802: LD_INT 0
3804: ST_TO_ADDR
// end ; end ;
3805: LD_VAR 0 7
3809: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3810: LD_INT 0
3812: PPUSH
3813: PPUSH
3814: PPUSH
3815: PPUSH
3816: PPUSH
3817: PPUSH
3818: PPUSH
3819: PPUSH
3820: PPUSH
// pos := Side_Positions [ side ] ;
3821: LD_ADDR_VAR 0 3
3825: PUSH
3826: LD_EXP 19
3830: PUSH
3831: LD_VAR 0 1
3835: ARRAY
3836: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3837: LD_ADDR_OWVAR 21
3841: PUSH
3842: LD_EXP 20
3846: PUSH
3847: LD_VAR 0 1
3851: ARRAY
3852: ST_TO_ADDR
// uc_side := side ;
3853: LD_ADDR_OWVAR 20
3857: PUSH
3858: LD_VAR 0 1
3862: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3863: LD_ADDR_VAR 0 4
3867: PUSH
3868: LD_EXP 24
3872: PUSH
3873: LD_VAR 0 3
3877: ARRAY
3878: PUSH
3879: LD_INT 1
3881: ARRAY
3882: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3883: LD_ADDR_VAR 0 5
3887: PUSH
3888: LD_EXP 24
3892: PUSH
3893: LD_VAR 0 3
3897: ARRAY
3898: PUSH
3899: LD_INT 2
3901: ARRAY
3902: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3903: LD_ADDR_VAR 0 6
3907: PUSH
3908: LD_EXP 24
3912: PUSH
3913: LD_VAR 0 3
3917: ARRAY
3918: PUSH
3919: LD_INT 3
3921: ARRAY
3922: ST_TO_ADDR
// if is_depot then
3923: LD_EXP 3
3927: IFFALSE 4060
// begin bc_type = b_depot ;
3929: LD_ADDR_OWVAR 42
3933: PUSH
3934: LD_INT 0
3936: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3937: LD_ADDR_VAR 0 10
3941: PUSH
3942: LD_VAR 0 4
3946: PPUSH
3947: LD_VAR 0 5
3951: PPUSH
3952: LD_VAR 0 6
3956: PPUSH
3957: CALL_OW 47
3961: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3962: LD_VAR 0 10
3966: PPUSH
3967: LD_STRING @
3969: PUSH
3970: LD_VAR 0 1
3974: STR
3975: PPUSH
3976: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3980: LD_VAR 0 10
3984: PPUSH
3985: CALL_OW 274
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_EXP 8
3997: PUSH
3998: LD_INT 1
4000: ARRAY
4001: PPUSH
4002: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
4006: LD_VAR 0 10
4010: PPUSH
4011: CALL_OW 274
4015: PPUSH
4016: LD_INT 2
4018: PPUSH
4019: LD_EXP 8
4023: PUSH
4024: LD_INT 2
4026: ARRAY
4027: PPUSH
4028: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4032: LD_VAR 0 10
4036: PPUSH
4037: CALL_OW 274
4041: PPUSH
4042: LD_INT 3
4044: PPUSH
4045: LD_EXP 8
4049: PUSH
4050: LD_INT 3
4052: ARRAY
4053: PPUSH
4054: CALL_OW 277
// end else
4058: GO 4204
// begin for i := 1 to 3 do
4060: LD_ADDR_VAR 0 7
4064: PUSH
4065: DOUBLE
4066: LD_INT 1
4068: DEC
4069: ST_TO_ADDR
4070: LD_INT 3
4072: PUSH
4073: FOR_TO
4074: IFFALSE 4202
// begin r := starting_resources [ i ] ;
4076: LD_ADDR_VAR 0 8
4080: PUSH
4081: LD_EXP 8
4085: PUSH
4086: LD_VAR 0 7
4090: ARRAY
4091: ST_TO_ADDR
// while r >= 10 do
4092: LD_VAR 0 8
4096: PUSH
4097: LD_INT 10
4099: GREATEREQUAL
4100: IFFALSE 4200
// if r > 50 then
4102: LD_VAR 0 8
4106: PUSH
4107: LD_INT 50
4109: GREATER
4110: IFFALSE 4156
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4112: LD_VAR 0 7
4116: PPUSH
4117: LD_INT 5
4119: PPUSH
4120: LD_VAR 0 4
4124: PPUSH
4125: LD_VAR 0 5
4129: PPUSH
4130: LD_INT 4
4132: PPUSH
4133: LD_INT 0
4135: PPUSH
4136: CALL_OW 60
// r := r - 50 ;
4140: LD_ADDR_VAR 0 8
4144: PUSH
4145: LD_VAR 0 8
4149: PUSH
4150: LD_INT 50
4152: MINUS
4153: ST_TO_ADDR
// end else
4154: GO 4198
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4156: LD_VAR 0 7
4160: PPUSH
4161: LD_VAR 0 8
4165: PUSH
4166: LD_INT 10
4168: DIV
4169: PPUSH
4170: LD_VAR 0 4
4174: PPUSH
4175: LD_VAR 0 5
4179: PPUSH
4180: LD_INT 4
4182: PPUSH
4183: LD_INT 0
4185: PPUSH
4186: CALL_OW 60
// r := 0 ;
4190: LD_ADDR_VAR 0 8
4194: PUSH
4195: LD_INT 0
4197: ST_TO_ADDR
// end ;
4198: GO 4092
// end ;
4200: GO 4073
4202: POP
4203: POP
// end ; for r in starting_crates do
4204: LD_ADDR_VAR 0 8
4208: PUSH
4209: LD_EXP 7
4213: PUSH
4214: FOR_IN
4215: IFFALSE 4247
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4217: LD_INT 1
4219: PPUSH
4220: LD_INT 5
4222: PPUSH
4223: LD_VAR 0 4
4227: PPUSH
4228: LD_VAR 0 5
4232: PPUSH
4233: LD_VAR 0 8
4237: PPUSH
4238: LD_INT 0
4240: PPUSH
4241: CALL_OW 60
4245: GO 4214
4247: POP
4248: POP
// if def_morale_flags then
4249: LD_EXP 52
4253: IFFALSE 4392
// begin x := start_def [ pos ] [ 1 ] ;
4255: LD_ADDR_VAR 0 4
4259: PUSH
4260: LD_EXP 26
4264: PUSH
4265: LD_VAR 0 3
4269: ARRAY
4270: PUSH
4271: LD_INT 1
4273: ARRAY
4274: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4275: LD_ADDR_VAR 0 5
4279: PUSH
4280: LD_EXP 26
4284: PUSH
4285: LD_VAR 0 3
4289: ARRAY
4290: PUSH
4291: LD_INT 2
4293: ARRAY
4294: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4295: LD_VAR 0 4
4299: PPUSH
4300: LD_VAR 0 5
4304: PPUSH
4305: LD_INT 12
4307: PPUSH
4308: LD_INT 2
4310: PPUSH
4311: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4315: LD_ADDR_EXP 31
4319: PUSH
4320: LD_EXP 31
4324: PUSH
4325: LD_VAR 0 1
4329: PPUSH
4330: LD_VAR 0 4
4334: PPUSH
4335: LD_VAR 0 5
4339: PPUSH
4340: LD_INT 1
4342: PUSH
4343: LD_INT 100
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 2
4352: PUSH
4353: LD_INT 50
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: LD_INT 3
4362: PUSH
4363: LD_INT 20
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: PUSH
4370: LD_INT 20
4372: PUSH
4373: LD_INT 100
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PPUSH
4386: CALL_OW 418
4390: ADD
4391: ST_TO_ADDR
// end ; commander := true ;
4392: LD_ADDR_LOC 1
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// soldiers_created := 0 ;
4400: LD_ADDR_LOC 4
4404: PUSH
4405: LD_INT 0
4407: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4408: LD_ADDR_VAR 0 7
4412: PUSH
4413: DOUBLE
4414: LD_INT 1
4416: DEC
4417: ST_TO_ADDR
4418: LD_EXP 4
4422: PUSH
4423: FOR_TO
4424: IFFALSE 4577
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4426: LD_ADDR_VAR 0 4
4430: PUSH
4431: LD_EXP 25
4435: PUSH
4436: LD_VAR 0 3
4440: ARRAY
4441: PUSH
4442: LD_VAR 0 7
4446: ARRAY
4447: PUSH
4448: LD_INT 1
4450: ARRAY
4451: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4452: LD_ADDR_VAR 0 5
4456: PUSH
4457: LD_EXP 25
4461: PUSH
4462: LD_VAR 0 3
4466: ARRAY
4467: PUSH
4468: LD_VAR 0 7
4472: ARRAY
4473: PUSH
4474: LD_INT 2
4476: ARRAY
4477: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4478: LD_ADDR_VAR 0 6
4482: PUSH
4483: LD_EXP 25
4487: PUSH
4488: LD_VAR 0 3
4492: ARRAY
4493: PUSH
4494: LD_VAR 0 7
4498: ARRAY
4499: PUSH
4500: LD_INT 3
4502: ARRAY
4503: ST_TO_ADDR
// bc_type := b_breastwork ;
4504: LD_ADDR_OWVAR 42
4508: PUSH
4509: LD_INT 31
4511: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4512: LD_ADDR_VAR 0 9
4516: PUSH
4517: LD_VAR 0 4
4521: PPUSH
4522: LD_VAR 0 5
4526: PPUSH
4527: LD_VAR 0 6
4531: PPUSH
4532: CALL_OW 47
4536: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4537: LD_INT 1
4539: PPUSH
4540: LD_INT 1
4542: PPUSH
4543: LD_INT 0
4545: PPUSH
4546: LD_INT 0
4548: PPUSH
4549: LD_INT 0
4551: PPUSH
4552: LD_VAR 0 9
4556: PPUSH
4557: CALL 3222 0 6
// soldiers_created := soldiers_created + 1 ;
4561: LD_ADDR_LOC 4
4565: PUSH
4566: LD_LOC 4
4570: PUSH
4571: LD_INT 1
4573: PLUS
4574: ST_TO_ADDR
// end ;
4575: GO 4423
4577: POP
4578: POP
// x := start_def [ pos ] [ 1 ] ;
4579: LD_ADDR_VAR 0 4
4583: PUSH
4584: LD_EXP 26
4588: PUSH
4589: LD_VAR 0 3
4593: ARRAY
4594: PUSH
4595: LD_INT 1
4597: ARRAY
4598: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4599: LD_ADDR_VAR 0 5
4603: PUSH
4604: LD_EXP 26
4608: PUSH
4609: LD_VAR 0 3
4613: ARRAY
4614: PUSH
4615: LD_INT 2
4617: ARRAY
4618: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4619: LD_LOC 8
4623: PUSH
4624: LD_EXP 4
4628: MINUS
4629: PPUSH
4630: LD_INT 1
4632: PPUSH
4633: LD_VAR 0 4
4637: PPUSH
4638: LD_VAR 0 5
4642: PPUSH
4643: LD_INT 5
4645: PPUSH
4646: LD_INT 0
4648: PPUSH
4649: CALL 3222 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4653: LD_LOC 5
4657: PPUSH
4658: LD_INT 2
4660: PPUSH
4661: LD_VAR 0 4
4665: PPUSH
4666: LD_VAR 0 5
4670: PPUSH
4671: LD_INT 5
4673: PPUSH
4674: LD_INT 0
4676: PPUSH
4677: CALL 3222 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4681: LD_LOC 7
4685: PPUSH
4686: LD_INT 3
4688: PPUSH
4689: LD_VAR 0 4
4693: PPUSH
4694: LD_VAR 0 5
4698: PPUSH
4699: LD_INT 5
4701: PPUSH
4702: LD_INT 0
4704: PPUSH
4705: CALL 3222 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4709: LD_LOC 6
4713: PPUSH
4714: LD_INT 4
4716: PPUSH
4717: LD_VAR 0 4
4721: PPUSH
4722: LD_VAR 0 5
4726: PPUSH
4727: LD_INT 5
4729: PPUSH
4730: LD_INT 0
4732: PPUSH
4733: CALL 3222 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4737: LD_EXP 53
4741: PUSH
4742: LD_INT 20
4744: PPUSH
4745: LD_VAR 0 1
4749: PPUSH
4750: CALL_OW 321
4754: PUSH
4755: LD_INT 1
4757: EQUAL
4758: AND
4759: IFFALSE 4776
// SetTech ( tech_SibDet , side , state_researched ) ;
4761: LD_INT 20
4763: PPUSH
4764: LD_VAR 0 1
4768: PPUSH
4769: LD_INT 2
4771: PPUSH
4772: CALL_OW 322
// if def_siberite_bomb = 1 then
4776: LD_EXP 56
4780: PUSH
4781: LD_INT 1
4783: EQUAL
4784: IFFALSE 4818
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4786: LD_INT 25
4788: PPUSH
4789: LD_VAR 0 1
4793: PPUSH
4794: LD_INT 1
4796: PPUSH
4797: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4801: LD_INT 73
4803: PPUSH
4804: LD_VAR 0 1
4808: PPUSH
4809: LD_INT 1
4811: PPUSH
4812: CALL_OW 322
// end else
4816: GO 4848
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4818: LD_INT 25
4820: PPUSH
4821: LD_VAR 0 1
4825: PPUSH
4826: LD_INT 0
4828: PPUSH
4829: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4833: LD_INT 73
4835: PPUSH
4836: LD_VAR 0 1
4840: PPUSH
4841: LD_INT 0
4843: PPUSH
4844: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4848: LD_INT 24
4850: PPUSH
4851: LD_VAR 0 1
4855: PPUSH
4856: LD_INT 0
4858: PPUSH
4859: CALL_OW 322
// global_defined := true ;
4863: LD_ADDR_LOC 3
4867: PUSH
4868: LD_INT 1
4870: ST_TO_ADDR
// end ;
4871: LD_VAR 0 2
4875: RET
// every 0 0$1 do
4876: GO 4878
4878: DISABLE
// if ( def_siberite_bomb > 1 ) then
4879: LD_EXP 56
4883: PUSH
4884: LD_INT 1
4886: GREATER
4887: IFFALSE 4902
// begin wait ( siberite_bomb_Delay ) ;
4889: LD_EXP 16
4893: PPUSH
4894: CALL_OW 67
// EnableSibFiss ;
4898: CALL 4903 0 0
// end ;
4902: END
// function EnableSibFiss ; var i ; begin
4903: LD_INT 0
4905: PPUSH
4906: PPUSH
// for i := 1 to 8 do
4907: LD_ADDR_VAR 0 2
4911: PUSH
4912: DOUBLE
4913: LD_INT 1
4915: DEC
4916: ST_TO_ADDR
4917: LD_INT 8
4919: PUSH
4920: FOR_TO
4921: IFFALSE 4967
// if Side_Positions [ i ] then
4923: LD_EXP 19
4927: PUSH
4928: LD_VAR 0 2
4932: ARRAY
4933: IFFALSE 4965
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4935: LD_INT 25
4937: PPUSH
4938: LD_VAR 0 2
4942: PPUSH
4943: LD_INT 1
4945: PPUSH
4946: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4950: LD_INT 73
4952: PPUSH
4953: LD_VAR 0 2
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: CALL_OW 322
// end ;
4965: GO 4920
4967: POP
4968: POP
// end ;
4969: LD_VAR 0 1
4973: RET
// function prepare_sides ; var i ; begin
4974: LD_INT 0
4976: PPUSH
4977: PPUSH
// global_units := [ ] ;
4978: LD_ADDR_LOC 2
4982: PUSH
4983: EMPTY
4984: ST_TO_ADDR
// global_defined := false ;
4985: LD_ADDR_LOC 3
4989: PUSH
4990: LD_INT 0
4992: ST_TO_ADDR
// CountClassMembers ;
4993: CALL 5043 0 0
// for i := 1 to 8 do
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: DOUBLE
5003: LD_INT 1
5005: DEC
5006: ST_TO_ADDR
5007: LD_INT 8
5009: PUSH
5010: FOR_TO
5011: IFFALSE 5036
// if Side_Positions [ i ] then
5013: LD_EXP 19
5017: PUSH
5018: LD_VAR 0 2
5022: ARRAY
5023: IFFALSE 5034
// prepare_side ( i ) ;
5025: LD_VAR 0 2
5029: PPUSH
5030: CALL 3810 0 1
5034: GO 5010
5036: POP
5037: POP
// end ;
5038: LD_VAR 0 1
5042: RET
// function CountClassMembers ; var Mode ; begin
5043: LD_INT 0
5045: PPUSH
5046: PPUSH
// if No_Mechs then
5047: LD_EXP 58
5051: IFFALSE 5063
// Mode := 2 else
5053: LD_ADDR_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ST_TO_ADDR
5061: GO 5071
// Mode := 1 ;
5063: LD_ADDR_VAR 0 2
5067: PUSH
5068: LD_INT 1
5070: ST_TO_ADDR
// neng := number_of_people ;
5071: LD_ADDR_LOC 5
5075: PUSH
5076: LD_EXP 5
5080: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5081: LD_ADDR_LOC 8
5085: PUSH
5086: LD_LOC 5
5090: PUSH
5091: LD_INT 4
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_VAR 0 2
5105: ARRAY
5106: DIV
5107: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5108: LD_LOC 8
5112: PUSH
5113: LD_EXP 4
5117: LESS
5118: IFFALSE 5130
// nsol := number_of_breastworks ;
5120: LD_ADDR_LOC 8
5124: PUSH
5125: LD_EXP 4
5129: ST_TO_ADDR
// neng := neng - nsol ;
5130: LD_ADDR_LOC 5
5134: PUSH
5135: LD_LOC 5
5139: PUSH
5140: LD_LOC 8
5144: MINUS
5145: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5146: LD_ADDR_LOC 6
5150: PUSH
5151: LD_LOC 5
5155: PUSH
5156: LD_INT 3
5158: PUSH
5159: LD_INT 2
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: PUSH
5166: LD_VAR 0 2
5170: ARRAY
5171: DIV
5172: ST_TO_ADDR
// if ( nsci < 1 ) then
5173: LD_LOC 6
5177: PUSH
5178: LD_INT 1
5180: LESS
5181: IFFALSE 5191
// nsci := 1 ;
5183: LD_ADDR_LOC 6
5187: PUSH
5188: LD_INT 1
5190: ST_TO_ADDR
// neng := neng - nsci ;
5191: LD_ADDR_LOC 5
5195: PUSH
5196: LD_LOC 5
5200: PUSH
5201: LD_LOC 6
5205: MINUS
5206: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5207: LD_ADDR_LOC 7
5211: PUSH
5212: LD_LOC 5
5216: PUSH
5217: LD_INT 2
5219: DIV
5220: PUSH
5221: LD_INT 0
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: PUSH
5228: LD_VAR 0 2
5232: ARRAY
5233: ST_TO_ADDR
// neng := neng - nmech ;
5234: LD_ADDR_LOC 5
5238: PUSH
5239: LD_LOC 5
5243: PUSH
5244: LD_LOC 7
5248: MINUS
5249: ST_TO_ADDR
// if ( neng < 1 ) then
5250: LD_LOC 5
5254: PUSH
5255: LD_INT 1
5257: LESS
5258: IFFALSE 5268
// neng := 1 ;
5260: LD_ADDR_LOC 5
5264: PUSH
5265: LD_INT 1
5267: ST_TO_ADDR
// end ;
5268: LD_VAR 0 1
5272: RET
// starting begin disable ( 98 ) ;
5273: LD_INT 98
5275: DISABLE_MARKED
// disable ( 99 ) ;
5276: LD_INT 99
5278: DISABLE_MARKED
// disable ( 100 ) ;
5279: LD_INT 100
5281: DISABLE_MARKED
// disable ( 200 ) ;
5282: LD_INT 200
5284: DISABLE_MARKED
// disable ( 400 ) ;
5285: LD_INT 400
5287: DISABLE_MARKED
// disable ( 401 ) ;
5288: LD_INT 401
5290: DISABLE_MARKED
// disable ( 600 ) ;
5291: LD_INT 600
5293: DISABLE_MARKED
// mp_selectmsg := true ;
5294: LD_ADDR_OWVAR 13
5298: PUSH
5299: LD_INT 1
5301: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5302: CALL 68 0 0
// init_map ;
5306: CALL 1769 0 0
// set_shared_visions_and_alliances ;
5310: CALL 2934 0 0
// ResetFog ;
5314: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5318: LD_OWVAR 2
5322: PPUSH
5323: CALL_OW 520
// prepare_sides ;
5327: CALL 4974 0 0
// init_respawning ;
5331: CALL 7041 0 0
// Init_Win_Condition ;
5335: CALL 14145 0 0
// InitLimits ;
5339: CALL 12734 0 0
// ShowTimer ;
5343: CALL 13671 0 0
// case Game_Type of 3 :
5347: LD_EXP 42
5351: PUSH
5352: LD_INT 3
5354: DOUBLE
5355: EQUAL
5356: IFTRUE 5360
5358: GO 5366
5360: POP
// enable ( 100 ) ; 4 :
5361: LD_INT 100
5363: ENABLE_MARKED
5364: GO 5382
5366: LD_INT 4
5368: DOUBLE
5369: EQUAL
5370: IFTRUE 5374
5372: GO 5381
5374: POP
// InitBloodGods ; end ;
5375: CALL 10289 0 0
5379: GO 5382
5381: POP
// music_nat := Side_Nations [ your_side ] ;
5382: LD_ADDR_OWVAR 71
5386: PUSH
5387: LD_EXP 20
5391: PUSH
5392: LD_OWVAR 2
5396: ARRAY
5397: ST_TO_ADDR
// if IAmSpec then
5398: CALL_OW 531
5402: IFFALSE 5426
// begin fogOff ( true ) ;
5404: LD_INT 1
5406: PPUSH
5407: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
5411: LD_INT 104
5413: PPUSH
5414: LD_INT 69
5416: PPUSH
5417: CALL_OW 86
// enable ( 400 ) ;
5421: LD_INT 400
5423: ENABLE_MARKED
// end else
5424: GO 5472
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5426: LD_EXP 26
5430: PUSH
5431: LD_EXP 19
5435: PUSH
5436: LD_OWVAR 2
5440: ARRAY
5441: ARRAY
5442: PUSH
5443: LD_INT 1
5445: ARRAY
5446: PPUSH
5447: LD_EXP 26
5451: PUSH
5452: LD_EXP 19
5456: PUSH
5457: LD_OWVAR 2
5461: ARRAY
5462: ARRAY
5463: PUSH
5464: LD_INT 2
5466: ARRAY
5467: PPUSH
5468: CALL_OW 86
// end ; InitApeman ;
5472: CALL 6208 0 0
// if def_builduptime then
5476: LD_EXP 57
5480: IFFALSE 5486
// BeginBuildUp ;
5482: CALL 8920 0 0
// end ; end_of_file
5486: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5487: GO 5489
5489: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5490: LD_INT 4
5492: PPUSH
5493: LD_INT 5
5495: PPUSH
5496: CALL_OW 12
5500: PPUSH
5501: LD_INT 1
5503: PPUSH
5504: CALL_OW 57
// enable ;
5508: ENABLE
// end ;
5509: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5510: GO 5512
5512: DISABLE
5513: LD_INT 0
5515: PPUSH
5516: PPUSH
// begin case tick of 1 .. 1 1$0 :
5517: LD_OWVAR 1
5521: PUSH
5522: LD_INT 1
5524: DOUBLE
5525: GREATEREQUAL
5526: IFFALSE 5534
5528: LD_INT 2100
5530: DOUBLE
5531: LESSEQUAL
5532: IFTRUE 5536
5534: GO 5564
5536: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5537: LD_EXP 9
5541: PUSH
5542: LD_INT 100
5544: DIVREAL
5545: PUSH
5546: LD_INT 350
5548: PPUSH
5549: LD_INT 1050
5551: PPUSH
5552: CALL_OW 12
5556: MUL
5557: PPUSH
5558: CALL_OW 67
5562: GO 5866
5564: LD_INT 2100
5566: PUSH
5567: LD_INT 1
5569: PLUS
5570: DOUBLE
5571: GREATEREQUAL
5572: IFFALSE 5580
5574: LD_INT 10500
5576: DOUBLE
5577: LESSEQUAL
5578: IFTRUE 5582
5580: GO 5610
5582: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5583: LD_EXP 9
5587: PUSH
5588: LD_INT 100
5590: DIVREAL
5591: PUSH
5592: LD_INT 1050
5594: PPUSH
5595: LD_INT 1575
5597: PPUSH
5598: CALL_OW 12
5602: MUL
5603: PPUSH
5604: CALL_OW 67
5608: GO 5866
5610: LD_INT 10500
5612: PUSH
5613: LD_INT 1
5615: PLUS
5616: DOUBLE
5617: GREATEREQUAL
5618: IFFALSE 5626
5620: LD_INT 21000
5622: DOUBLE
5623: LESSEQUAL
5624: IFTRUE 5628
5626: GO 5656
5628: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5629: LD_EXP 9
5633: PUSH
5634: LD_INT 100
5636: DIVREAL
5637: PUSH
5638: LD_INT 1575
5640: PPUSH
5641: LD_INT 2100
5643: PPUSH
5644: CALL_OW 12
5648: MUL
5649: PPUSH
5650: CALL_OW 67
5654: GO 5866
5656: LD_INT 21000
5658: PUSH
5659: LD_INT 1
5661: PLUS
5662: DOUBLE
5663: GREATEREQUAL
5664: IFFALSE 5672
5666: LD_INT 42000
5668: DOUBLE
5669: LESSEQUAL
5670: IFTRUE 5674
5672: GO 5702
5674: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5675: LD_EXP 9
5679: PUSH
5680: LD_INT 100
5682: DIVREAL
5683: PUSH
5684: LD_INT 2100
5686: PPUSH
5687: LD_INT 2625
5689: PPUSH
5690: CALL_OW 12
5694: MUL
5695: PPUSH
5696: CALL_OW 67
5700: GO 5866
5702: LD_INT 42000
5704: PUSH
5705: LD_INT 1
5707: PLUS
5708: DOUBLE
5709: GREATEREQUAL
5710: IFFALSE 5718
5712: LD_INT 63000
5714: DOUBLE
5715: LESSEQUAL
5716: IFTRUE 5720
5718: GO 5748
5720: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5721: LD_EXP 9
5725: PUSH
5726: LD_INT 100
5728: DIVREAL
5729: PUSH
5730: LD_INT 2625
5732: PPUSH
5733: LD_INT 3150
5735: PPUSH
5736: CALL_OW 12
5740: MUL
5741: PPUSH
5742: CALL_OW 67
5746: GO 5866
5748: LD_INT 63000
5750: PUSH
5751: LD_INT 1
5753: PLUS
5754: DOUBLE
5755: GREATEREQUAL
5756: IFFALSE 5764
5758: LD_INT 105000
5760: DOUBLE
5761: LESSEQUAL
5762: IFTRUE 5766
5764: GO 5794
5766: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5767: LD_EXP 9
5771: PUSH
5772: LD_INT 100
5774: DIVREAL
5775: PUSH
5776: LD_INT 3150
5778: PPUSH
5779: LD_INT 3675
5781: PPUSH
5782: CALL_OW 12
5786: MUL
5787: PPUSH
5788: CALL_OW 67
5792: GO 5866
5794: LD_INT 105000
5796: PUSH
5797: LD_INT 1
5799: PLUS
5800: DOUBLE
5801: GREATEREQUAL
5802: IFFALSE 5810
5804: LD_INT 630000
5806: DOUBLE
5807: LESSEQUAL
5808: IFTRUE 5812
5810: GO 5840
5812: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5813: LD_EXP 9
5817: PUSH
5818: LD_INT 100
5820: DIVREAL
5821: PUSH
5822: LD_INT 3675
5824: PPUSH
5825: LD_INT 4200
5827: PPUSH
5828: CALL_OW 12
5832: MUL
5833: PPUSH
5834: CALL_OW 67
5838: GO 5866
5840: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5841: LD_EXP 9
5845: PUSH
5846: LD_INT 100
5848: DIVREAL
5849: PUSH
5850: LD_INT 4200
5852: PPUSH
5853: LD_INT 5250
5855: PPUSH
5856: CALL_OW 12
5860: MUL
5861: PPUSH
5862: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5866: LD_ADDR_VAR 0 2
5870: PUSH
5871: LD_INT 3
5873: PPUSH
5874: LD_INT 5
5876: PPUSH
5877: CALL_OW 12
5881: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5882: LD_ADDR_VAR 0 1
5886: PUSH
5887: LD_EXP 19
5891: PUSH
5892: LD_INT 0
5894: PUSH
5895: EMPTY
5896: LIST
5897: DIFF
5898: PUSH
5899: FOR_IN
5900: IFFALSE 5949
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5902: LD_VAR 0 2
5906: PPUSH
5907: LD_EXP 26
5911: PUSH
5912: LD_VAR 0 1
5916: ARRAY
5917: PUSH
5918: LD_INT 1
5920: ARRAY
5921: PPUSH
5922: LD_EXP 26
5926: PUSH
5927: LD_VAR 0 1
5931: ARRAY
5932: PUSH
5933: LD_INT 2
5935: ARRAY
5936: PPUSH
5937: LD_INT 20
5939: PPUSH
5940: LD_INT 1
5942: PPUSH
5943: CALL_OW 56
5947: GO 5899
5949: POP
5950: POP
// enable ;
5951: ENABLE
// end ;
5952: PPOPN 2
5954: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
5955: GO 5957
5957: DISABLE
5958: LD_INT 0
5960: PPUSH
5961: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
5962: LD_INT 1
5964: PPUSH
5965: LD_INT 1
5967: PPUSH
5968: CALL_OW 287
5972: PUSH
5973: LD_INT 200
5975: PUSH
5976: LD_EXP 9
5980: MINUS
5981: PUSH
5982: LD_INT 100
5984: DIVREAL
5985: PUSH
5986: LD_INT 5
5988: MUL
5989: LESS
5990: IFFALSE 6013
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
5992: LD_INT 3
5994: PPUSH
5995: LD_INT 5
5997: PPUSH
5998: CALL_OW 12
6002: PPUSH
6003: LD_INT 1
6005: PPUSH
6006: LD_INT 1
6008: PPUSH
6009: CALL_OW 55
// enable ;
6013: ENABLE
// end ; end_of_file
6014: PPOPN 2
6016: END
// every 20 20$00 trigger apemanNumber do
6017: LD_EXP 34
6021: IFFALSE 6054
6023: GO 6025
6025: DISABLE
// begin enable ;
6026: ENABLE
// if apeLevel >= 8 then
6027: LD_EXP 39
6031: PUSH
6032: LD_INT 8
6034: GREATEREQUAL
6035: IFFALSE 6040
// disable else
6037: DISABLE
6038: GO 6054
// apeLevel := apeLevel + 1 ;
6040: LD_ADDR_EXP 39
6044: PUSH
6045: LD_EXP 39
6049: PUSH
6050: LD_INT 1
6052: PLUS
6053: ST_TO_ADDR
// end ;
6054: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6055: LD_EXP 34
6059: PUSH
6060: LD_EXP 35
6064: LESS
6065: IFFALSE 6205
6067: GO 6069
6069: DISABLE
6070: LD_INT 0
6072: PPUSH
6073: PPUSH
6074: PPUSH
6075: PPUSH
// begin enable ;
6076: ENABLE
// for i := 1 to apemanPos do
6077: LD_ADDR_VAR 0 1
6081: PUSH
6082: DOUBLE
6083: LD_INT 1
6085: DEC
6086: ST_TO_ADDR
6087: LD_EXP 37
6091: PUSH
6092: FOR_TO
6093: IFFALSE 6203
// begin if apemanPlayerCount [ i ] then
6095: LD_EXP 38
6099: PUSH
6100: LD_VAR 0 1
6104: ARRAY
6105: IFFALSE 6201
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6107: LD_EXP 38
6111: PUSH
6112: LD_VAR 0 1
6116: ARRAY
6117: PUSH
6118: LD_EXP 37
6122: PUSH
6123: LD_VAR 0 1
6127: ARRAY
6128: GREATER
6129: IFFALSE 6201
// begin ape := PrepareApeman ;
6131: LD_ADDR_VAR 0 2
6135: PUSH
6136: CALL 6716 0 0
6140: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6141: LD_VAR 0 2
6145: PPUSH
6146: LD_EXP 40
6150: PUSH
6151: LD_VAR 0 1
6155: ARRAY
6156: PPUSH
6157: LD_INT 0
6159: PPUSH
6160: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6164: LD_ADDR_EXP 37
6168: PUSH
6169: LD_EXP 37
6173: PPUSH
6174: LD_VAR 0 1
6178: PPUSH
6179: LD_EXP 37
6183: PUSH
6184: LD_VAR 0 1
6188: ARRAY
6189: PUSH
6190: LD_VAR 0 2
6194: UNION
6195: PPUSH
6196: CALL_OW 1
6200: ST_TO_ADDR
// end ; end ; end ;
6201: GO 6092
6203: POP
6204: POP
// end ;
6205: PPOPN 4
6207: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6208: LD_INT 0
6210: PPUSH
6211: PPUSH
6212: PPUSH
6213: PPUSH
6214: PPUSH
6215: PPUSH
6216: PPUSH
// playersAmount := 0 ;
6217: LD_ADDR_VAR 0 3
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6225: LD_ADDR_VAR 0 7
6229: PUSH
6230: LD_INT 2
6232: PUSH
6233: LD_INT 3
6235: PUSH
6236: LD_INT 4
6238: PUSH
6239: LD_INT 5
6241: PUSH
6242: LD_INT 6
6244: PUSH
6245: LD_INT 7
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6256: LD_ADDR_EXP 40
6260: PUSH
6261: LD_INT 0
6263: PUSH
6264: LD_INT 0
6266: PUSH
6267: LD_INT 0
6269: PUSH
6270: LD_INT 0
6272: PUSH
6273: LD_INT 0
6275: PUSH
6276: LD_INT 0
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: LD_INT 0
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: ST_TO_ADDR
// for j = 1 to Side_Positions do
6295: LD_ADDR_VAR 0 4
6299: PUSH
6300: DOUBLE
6301: LD_INT 1
6303: DEC
6304: ST_TO_ADDR
6305: LD_EXP 19
6309: PUSH
6310: FOR_TO
6311: IFFALSE 6378
// if Side_Positions [ j ] then
6313: LD_EXP 19
6317: PUSH
6318: LD_VAR 0 4
6322: ARRAY
6323: IFFALSE 6376
// begin playersAmount := playersAmount + 1 ;
6325: LD_ADDR_VAR 0 3
6329: PUSH
6330: LD_VAR 0 3
6334: PUSH
6335: LD_INT 1
6337: PLUS
6338: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6339: LD_ADDR_EXP 40
6343: PUSH
6344: LD_EXP 40
6348: PPUSH
6349: LD_VAR 0 4
6353: PPUSH
6354: LD_VAR 0 7
6358: PUSH
6359: LD_EXP 19
6363: PUSH
6364: LD_VAR 0 4
6368: ARRAY
6369: ARRAY
6370: PPUSH
6371: CALL_OW 1
6375: ST_TO_ADDR
// end ;
6376: GO 6310
6378: POP
6379: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6380: LD_ADDR_EXP 36
6384: PUSH
6385: LD_INT 3
6387: PUSH
6388: LD_EXP 15
6392: MUL
6393: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6394: LD_ADDR_EXP 34
6398: PUSH
6399: LD_VAR 0 3
6403: PUSH
6404: LD_EXP 36
6408: MUL
6409: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6410: LD_ADDR_EXP 35
6414: PUSH
6415: LD_EXP 34
6419: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6420: LD_ADDR_EXP 37
6424: PUSH
6425: LD_INT 0
6427: PUSH
6428: LD_INT 0
6430: PUSH
6431: LD_INT 0
6433: PUSH
6434: LD_INT 0
6436: PUSH
6437: LD_INT 0
6439: PUSH
6440: LD_INT 0
6442: PUSH
6443: LD_INT 0
6445: PUSH
6446: LD_INT 0
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6459: LD_ADDR_EXP 38
6463: PUSH
6464: LD_INT 0
6466: PUSH
6467: LD_INT 0
6469: PUSH
6470: LD_INT 0
6472: PUSH
6473: LD_INT 0
6475: PUSH
6476: LD_INT 0
6478: PUSH
6479: LD_INT 0
6481: PUSH
6482: LD_INT 0
6484: PUSH
6485: LD_INT 0
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: ST_TO_ADDR
// apeLevel := 1 ;
6498: LD_ADDR_EXP 39
6502: PUSH
6503: LD_INT 1
6505: ST_TO_ADDR
// if not apemanNumber then
6506: LD_EXP 34
6510: NOT
6511: IFFALSE 6515
// exit ;
6513: GO 6711
// for i := 1 to apemanPerPlayer do
6515: LD_ADDR_VAR 0 2
6519: PUSH
6520: DOUBLE
6521: LD_INT 1
6523: DEC
6524: ST_TO_ADDR
6525: LD_EXP 36
6529: PUSH
6530: FOR_TO
6531: IFFALSE 6709
// begin for j := 1 to Side_Positions do
6533: LD_ADDR_VAR 0 4
6537: PUSH
6538: DOUBLE
6539: LD_INT 1
6541: DEC
6542: ST_TO_ADDR
6543: LD_EXP 19
6547: PUSH
6548: FOR_TO
6549: IFFALSE 6705
// if Side_Positions [ j ] then
6551: LD_EXP 19
6555: PUSH
6556: LD_VAR 0 4
6560: ARRAY
6561: IFFALSE 6703
// begin pos := Side_Positions [ j ] ;
6563: LD_ADDR_VAR 0 6
6567: PUSH
6568: LD_EXP 19
6572: PUSH
6573: LD_VAR 0 4
6577: ARRAY
6578: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6579: LD_ADDR_EXP 38
6583: PUSH
6584: LD_EXP 38
6588: PPUSH
6589: LD_VAR 0 4
6593: PPUSH
6594: LD_EXP 38
6598: PUSH
6599: LD_VAR 0 4
6603: ARRAY
6604: PUSH
6605: LD_INT 1
6607: PLUS
6608: PPUSH
6609: CALL_OW 1
6613: ST_TO_ADDR
// ape := PrepareApeman ;
6614: LD_ADDR_VAR 0 5
6618: PUSH
6619: CALL 6716 0 0
6623: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6624: LD_ADDR_EXP 37
6628: PUSH
6629: LD_EXP 37
6633: PPUSH
6634: LD_VAR 0 4
6638: PPUSH
6639: LD_EXP 37
6643: PUSH
6644: LD_VAR 0 4
6648: ARRAY
6649: PPUSH
6650: LD_EXP 37
6654: PUSH
6655: LD_VAR 0 4
6659: ARRAY
6660: PUSH
6661: LD_INT 1
6663: PLUS
6664: PPUSH
6665: LD_VAR 0 5
6669: PPUSH
6670: CALL_OW 1
6674: PPUSH
6675: CALL_OW 1
6679: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6680: LD_VAR 0 5
6684: PPUSH
6685: LD_EXP 40
6689: PUSH
6690: LD_VAR 0 4
6694: ARRAY
6695: PPUSH
6696: LD_INT 0
6698: PPUSH
6699: CALL_OW 49
// end ;
6703: GO 6548
6705: POP
6706: POP
// end ;
6707: GO 6530
6709: POP
6710: POP
// end ;
6711: LD_VAR 0 1
6715: RET
// export function PrepareApeman ; var bonus ; begin
6716: LD_INT 0
6718: PPUSH
6719: PPUSH
// uc_side := 0 ;
6720: LD_ADDR_OWVAR 20
6724: PUSH
6725: LD_INT 0
6727: ST_TO_ADDR
// uc_nation := 0 ;
6728: LD_ADDR_OWVAR 21
6732: PUSH
6733: LD_INT 0
6735: ST_TO_ADDR
// InitHc ;
6736: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6740: LD_ADDR_VAR 0 2
6744: PUSH
6745: LD_INT 1
6747: NEG
6748: PUSH
6749: LD_INT 0
6751: PUSH
6752: LD_INT 1
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: PUSH
6760: LD_OWVAR 1
6764: PUSH
6765: LD_INT 3
6767: MOD
6768: PUSH
6769: LD_INT 1
6771: PLUS
6772: ARRAY
6773: ST_TO_ADDR
// hc_class := class_apeman ;
6774: LD_ADDR_OWVAR 28
6778: PUSH
6779: LD_INT 12
6781: ST_TO_ADDR
// hc_gallery :=  ;
6782: LD_ADDR_OWVAR 33
6786: PUSH
6787: LD_STRING 
6789: ST_TO_ADDR
// hc_name :=  ;
6790: LD_ADDR_OWVAR 26
6794: PUSH
6795: LD_STRING 
6797: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6798: LD_ADDR_OWVAR 31
6802: PUSH
6803: LD_EXP 39
6807: PUSH
6808: LD_VAR 0 2
6812: PLUS
6813: PUSH
6814: LD_EXP 39
6818: PUSH
6819: LD_VAR 0 2
6823: PLUS
6824: PUSH
6825: LD_EXP 39
6829: PUSH
6830: LD_VAR 0 2
6834: PLUS
6835: PUSH
6836: LD_EXP 39
6840: PUSH
6841: LD_VAR 0 2
6845: PLUS
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6853: LD_ADDR_OWVAR 35
6857: PUSH
6858: LD_INT 10
6860: PUSH
6861: LD_VAR 0 2
6865: MUL
6866: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6867: LD_ADDR_OWVAR 29
6871: PUSH
6872: LD_INT 12
6874: PUSH
6875: LD_INT 10
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: ST_TO_ADDR
// result := CreateHuman ;
6882: LD_ADDR_VAR 0 1
6886: PUSH
6887: CALL_OW 44
6891: ST_TO_ADDR
// end ;
6892: LD_VAR 0 1
6896: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
// if not ape then
6902: LD_VAR 0 1
6906: NOT
6907: IFFALSE 6911
// exit ;
6909: GO 7036
// side := GetSide ( ape ) ;
6911: LD_ADDR_VAR 0 3
6915: PUSH
6916: LD_VAR 0 1
6920: PPUSH
6921: CALL_OW 255
6925: ST_TO_ADDR
// if not side then
6926: LD_VAR 0 3
6930: NOT
6931: IFFALSE 6985
// begin for i = 1 to apemanPos do
6933: LD_ADDR_VAR 0 4
6937: PUSH
6938: DOUBLE
6939: LD_INT 1
6941: DEC
6942: ST_TO_ADDR
6943: LD_EXP 37
6947: PUSH
6948: FOR_TO
6949: IFFALSE 6983
// if ape in apemanPos [ i ] then
6951: LD_VAR 0 1
6955: PUSH
6956: LD_EXP 37
6960: PUSH
6961: LD_VAR 0 4
6965: ARRAY
6966: IN
6967: IFFALSE 6981
// begin side := i ;
6969: LD_ADDR_VAR 0 3
6973: PUSH
6974: LD_VAR 0 4
6978: ST_TO_ADDR
// break ;
6979: GO 6983
// end ;
6981: GO 6948
6983: POP
6984: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6985: LD_ADDR_EXP 37
6989: PUSH
6990: LD_EXP 37
6994: PPUSH
6995: LD_VAR 0 3
6999: PPUSH
7000: LD_EXP 37
7004: PUSH
7005: LD_VAR 0 3
7009: ARRAY
7010: PUSH
7011: LD_VAR 0 1
7015: DIFF
7016: PPUSH
7017: CALL_OW 1
7021: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7022: LD_ADDR_EXP 34
7026: PUSH
7027: LD_EXP 34
7031: PUSH
7032: LD_INT 1
7034: MINUS
7035: ST_TO_ADDR
// end ; end_of_file
7036: LD_VAR 0 2
7040: RET
// var respawn , inqueue ; export function init_respawning ; begin
7041: LD_INT 0
7043: PPUSH
// respawn := Rand ( 1 , 8 ) ;
7044: LD_ADDR_LOC 9
7048: PUSH
7049: LD_INT 1
7051: PPUSH
7052: LD_INT 8
7054: PPUSH
7055: CALL_OW 12
7059: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7060: LD_ADDR_LOC 10
7064: PUSH
7065: LD_INT 0
7067: PUSH
7068: LD_INT 0
7070: PUSH
7071: LD_INT 0
7073: PUSH
7074: LD_INT 0
7076: PUSH
7077: LD_INT 0
7079: PUSH
7080: LD_INT 0
7082: PUSH
7083: LD_INT 0
7085: PUSH
7086: LD_INT 0
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: ST_TO_ADDR
// end ;
7099: LD_VAR 0 1
7103: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
7104: GO 7106
7106: DISABLE
7107: LD_INT 0
7109: PPUSH
7110: PPUSH
7111: PPUSH
7112: PPUSH
// begin if respawning_time_max = 0 then
7113: LD_EXP 13
7117: PUSH
7118: LD_INT 0
7120: EQUAL
7121: IFFALSE 7125
// exit ;
7123: GO 7632
// if respawn = 8 then
7125: LD_LOC 9
7129: PUSH
7130: LD_INT 8
7132: EQUAL
7133: IFFALSE 7145
// respawn := 1 else
7135: LD_ADDR_LOC 9
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
7143: GO 7159
// respawn := respawn + 1 ;
7145: LD_ADDR_LOC 9
7149: PUSH
7150: LD_LOC 9
7154: PUSH
7155: LD_INT 1
7157: PLUS
7158: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
7159: LD_EXP 19
7163: PUSH
7164: LD_LOC 9
7168: ARRAY
7169: PUSH
7170: LD_LOC 10
7174: PUSH
7175: LD_LOC 9
7179: ARRAY
7180: NOT
7181: AND
7182: IFFALSE 7631
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
7184: LD_ADDR_VAR 0 1
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 1
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 22
7201: PUSH
7202: LD_LOC 9
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 3
7213: PUSH
7214: LD_INT 23
7216: PUSH
7217: LD_INT 0
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: PPUSH
7230: CALL_OW 69
7234: ST_TO_ADDR
// if n < number_of_people then
7235: LD_VAR 0 1
7239: PUSH
7240: LD_EXP 5
7244: LESS
7245: IFFALSE 7628
// begin aktresp := respawn ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_LOC 9
7256: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7257: LD_ADDR_LOC 10
7261: PUSH
7262: LD_LOC 10
7266: PPUSH
7267: LD_VAR 0 3
7271: PPUSH
7272: LD_INT 1
7274: PPUSH
7275: CALL_OW 1
7279: ST_TO_ADDR
// enable ;
7280: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7281: LD_EXP 12
7285: PPUSH
7286: LD_EXP 13
7290: PPUSH
7291: CALL_OW 12
7295: PPUSH
7296: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7300: LD_ADDR_LOC 10
7304: PUSH
7305: LD_LOC 10
7309: PPUSH
7310: LD_VAR 0 3
7314: PPUSH
7315: LD_INT 0
7317: PPUSH
7318: CALL_OW 1
7322: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7323: LD_ADDR_VAR 0 2
7327: PUSH
7328: LD_INT 21
7330: PUSH
7331: LD_INT 3
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 2
7340: PUSH
7341: LD_INT 30
7343: PUSH
7344: LD_INT 0
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 30
7353: PUSH
7354: LD_INT 1
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: PUSH
7366: LD_INT 50
7368: PUSH
7369: EMPTY
7370: LIST
7371: PUSH
7372: LD_INT 22
7374: PUSH
7375: LD_VAR 0 3
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: PPUSH
7390: CALL_OW 69
7394: ST_TO_ADDR
// if building_list = 0 then
7395: LD_VAR 0 2
7399: PUSH
7400: LD_INT 0
7402: EQUAL
7403: IFFALSE 7448
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
7405: LD_ADDR_VAR 0 2
7409: PUSH
7410: LD_INT 21
7412: PUSH
7413: LD_INT 3
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PUSH
7420: LD_INT 50
7422: PUSH
7423: EMPTY
7424: LIST
7425: PUSH
7426: LD_INT 22
7428: PUSH
7429: LD_VAR 0 3
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: LIST
7442: PPUSH
7443: CALL_OW 69
7447: ST_TO_ADDR
// if building_list = 0 then
7448: LD_VAR 0 2
7452: PUSH
7453: LD_INT 0
7455: EQUAL
7456: IFFALSE 7460
// exit ;
7458: GO 7632
// hc_name :=  ;
7460: LD_ADDR_OWVAR 26
7464: PUSH
7465: LD_STRING 
7467: ST_TO_ADDR
// hc_importance := 0 ;
7468: LD_ADDR_OWVAR 32
7472: PUSH
7473: LD_INT 0
7475: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7476: LD_INT 0
7478: PPUSH
7479: LD_INT 0
7481: PPUSH
7482: LD_EXP 6
7486: PUSH
7487: LD_INT 2
7489: DIV
7490: PPUSH
7491: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7495: LD_ADDR_OWVAR 21
7499: PUSH
7500: LD_EXP 20
7504: PUSH
7505: LD_VAR 0 3
7509: ARRAY
7510: ST_TO_ADDR
// uc_side := aktresp ;
7511: LD_ADDR_OWVAR 20
7515: PUSH
7516: LD_VAR 0 3
7520: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
7521: LD_ADDR_VAR 0 4
7525: PUSH
7526: LD_VAR 0 2
7530: PUSH
7531: LD_INT 1
7533: PPUSH
7534: LD_VAR 0 2
7538: PUSH
7539: LD_INT 0
7541: PLUS
7542: PPUSH
7543: CALL_OW 12
7547: ARRAY
7548: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
7549: LD_VAR 0 4
7553: PPUSH
7554: CALL_OW 266
7558: PUSH
7559: LD_INT 0
7561: PUSH
7562: LD_INT 1
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: IN
7569: IFFALSE 7581
// n = 25 else
7571: LD_ADDR_VAR 0 1
7575: PUSH
7576: LD_INT 25
7578: ST_TO_ADDR
7579: GO 7589
// n = 10 ;
7581: LD_ADDR_VAR 0 1
7585: PUSH
7586: LD_INT 10
7588: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
7589: CALL_OW 44
7593: PPUSH
7594: LD_VAR 0 4
7598: PPUSH
7599: CALL_OW 250
7603: PPUSH
7604: LD_VAR 0 4
7608: PPUSH
7609: CALL_OW 251
7613: PPUSH
7614: LD_VAR 0 1
7618: PPUSH
7619: LD_INT 1
7621: PPUSH
7622: CALL_OW 50
// end else
7626: GO 7629
// enable ;
7628: ENABLE
// end else
7629: GO 7632
// enable ;
7631: ENABLE
// end ; end_of_file
7632: PPOPN 4
7634: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7635: LD_VAR 0 1
7639: PPUSH
7640: CALL_OW 266
7644: PUSH
7645: LD_INT 0
7647: PUSH
7648: LD_INT 1
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: IN
7655: IFFALSE 7680
// SetBName ( b , @ & GetSide ( b ) ) ;
7657: LD_VAR 0 1
7661: PPUSH
7662: LD_STRING @
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 255
7674: STR
7675: PPUSH
7676: CALL_OW 500
// if def_game_rules then
7680: LD_EXP 43
7684: IFFALSE 7721
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7686: LD_VAR 0 1
7690: PPUSH
7691: LD_VAR 0 1
7695: PPUSH
7696: CALL_OW 266
7700: PPUSH
7701: LD_VAR 0 1
7705: PPUSH
7706: CALL_OW 255
7710: PPUSH
7711: LD_INT 0
7713: PPUSH
7714: LD_INT 1
7716: PPUSH
7717: CALL 13135 0 5
// end ;
7721: PPOPN 2
7723: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7724: LD_VAR 0 1
7728: PPUSH
7729: CALL_OW 266
7733: PUSH
7734: LD_INT 0
7736: PUSH
7737: LD_INT 1
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: IN
7744: IFFALSE 7769
// SetBName ( b , @ & GetSide ( b ) ) ;
7746: LD_VAR 0 1
7750: PPUSH
7751: LD_STRING @
7753: PUSH
7754: LD_VAR 0 1
7758: PPUSH
7759: CALL_OW 255
7763: STR
7764: PPUSH
7765: CALL_OW 500
// if def_game_rules then
7769: LD_EXP 43
7773: IFFALSE 7812
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7775: LD_VAR 0 1
7779: PPUSH
7780: LD_VAR 0 1
7784: PPUSH
7785: CALL_OW 266
7789: PPUSH
7790: LD_VAR 0 1
7794: PPUSH
7795: CALL_OW 255
7799: PPUSH
7800: LD_VAR 0 2
7804: PPUSH
7805: LD_INT 1
7807: PPUSH
7808: CALL 13135 0 5
// end ;
7812: PPOPN 3
7814: END
// on VehicleConstructed ( veh , fac ) do var side ;
7815: LD_INT 0
7817: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7818: LD_VAR 0 1
7822: PPUSH
7823: CALL_OW 263
7827: PUSH
7828: LD_INT 5
7830: EQUAL
7831: IFFALSE 7973
// begin side := GetSide ( veh ) ;
7833: LD_ADDR_VAR 0 3
7837: PUSH
7838: LD_VAR 0 1
7842: PPUSH
7843: CALL_OW 255
7847: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7848: LD_ADDR_EXP 37
7852: PUSH
7853: LD_EXP 37
7857: PPUSH
7858: LD_VAR 0 3
7862: PPUSH
7863: LD_EXP 37
7867: PUSH
7868: LD_VAR 0 3
7872: ARRAY
7873: PPUSH
7874: LD_INT 52
7876: PUSH
7877: EMPTY
7878: LIST
7879: PPUSH
7880: CALL_OW 72
7884: PUSH
7885: LD_INT 22
7887: PUSH
7888: LD_VAR 0 3
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 2
7899: PUSH
7900: LD_INT 33
7902: PUSH
7903: LD_INT 5
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: LD_INT 25
7912: PUSH
7913: LD_INT 12
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 25
7922: PUSH
7923: LD_INT 15
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: LD_INT 25
7932: PUSH
7933: LD_INT 16
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PUSH
7940: LD_INT 25
7942: PUSH
7943: LD_INT 17
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PPUSH
7962: CALL_OW 69
7966: UNION
7967: PPUSH
7968: CALL_OW 1
7972: ST_TO_ADDR
// end ; end ;
7973: PPOPN 3
7975: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7976: LD_INT 0
7978: PPUSH
7979: PPUSH
7980: PPUSH
7981: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7982: LD_VAR 0 1
7986: PPUSH
7987: CALL_OW 257
7991: PUSH
7992: LD_INT 12
7994: PUSH
7995: LD_INT 15
7997: PUSH
7998: LD_INT 17
8000: PUSH
8001: LD_INT 16
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: IN
8010: PUSH
8011: LD_VAR 0 1
8015: PPUSH
8016: CALL_OW 263
8020: PUSH
8021: LD_INT 5
8023: EQUAL
8024: OR
8025: IFFALSE 8036
// ApeKilled ( j ) ;
8027: LD_VAR 0 1
8031: PPUSH
8032: CALL 6897 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
8036: LD_VAR 0 1
8040: PPUSH
8041: CALL_OW 266
8045: PUSH
8046: LD_INT 0
8048: PUSH
8049: LD_INT 1
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: IN
8056: IFFALSE 8138
// begin pos := Side_Positions [ GetSide ( j ) ] ;
8058: LD_ADDR_VAR 0 4
8062: PUSH
8063: LD_EXP 19
8067: PUSH
8068: LD_VAR 0 1
8072: PPUSH
8073: CALL_OW 255
8077: ARRAY
8078: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
8079: LD_ADDR_VAR 0 2
8083: PUSH
8084: LD_EXP 26
8088: PUSH
8089: LD_VAR 0 4
8093: ARRAY
8094: PUSH
8095: LD_INT 1
8097: ARRAY
8098: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
8099: LD_ADDR_VAR 0 3
8103: PUSH
8104: LD_EXP 26
8108: PUSH
8109: LD_VAR 0 4
8113: ARRAY
8114: PUSH
8115: LD_INT 2
8117: ARRAY
8118: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
8119: LD_VAR 0 2
8123: PPUSH
8124: LD_VAR 0 3
8128: PPUSH
8129: CALL_OW 420
8133: PPUSH
8134: CALL_OW 419
// end ; if def_game_rules then
8138: LD_EXP 43
8142: IFFALSE 8241
// if ( GetType ( j ) = 3 ) then
8144: LD_VAR 0 1
8148: PPUSH
8149: CALL_OW 247
8153: PUSH
8154: LD_INT 3
8156: EQUAL
8157: IFFALSE 8197
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8159: LD_VAR 0 1
8163: PPUSH
8164: LD_VAR 0 1
8168: PPUSH
8169: CALL_OW 266
8173: PPUSH
8174: LD_VAR 0 1
8178: PPUSH
8179: CALL_OW 255
8183: PPUSH
8184: LD_INT 0
8186: PPUSH
8187: LD_INT 1
8189: NEG
8190: PPUSH
8191: CALL 13135 0 5
8195: GO 8241
// if ( GetChassis ( j ) = 25 ) then
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 265
8206: PUSH
8207: LD_INT 25
8209: EQUAL
8210: IFFALSE 8241
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8212: LD_VAR 0 1
8216: PPUSH
8217: LD_INT 37
8219: PPUSH
8220: LD_VAR 0 1
8224: PPUSH
8225: CALL_OW 255
8229: PPUSH
8230: LD_INT 0
8232: PPUSH
8233: LD_INT 1
8235: NEG
8236: PPUSH
8237: CALL 13135 0 5
// end ;
8241: PPOPN 5
8243: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8244: LD_EXP 43
8248: PUSH
8249: LD_VAR 0 1
8253: PPUSH
8254: CALL_OW 265
8258: PUSH
8259: LD_INT 25
8261: EQUAL
8262: AND
8263: IFFALSE 8295
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: LD_INT 37
8272: PPUSH
8273: LD_VAR 0 1
8277: PPUSH
8278: CALL_OW 255
8282: PPUSH
8283: LD_VAR 0 3
8287: PPUSH
8288: LD_INT 1
8290: PPUSH
8291: CALL 13135 0 5
// end ;
8295: PPOPN 4
8297: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8298: LD_VAR 0 1
8302: PPUSH
8303: LD_VAR 0 2
8307: PPUSH
8308: LD_VAR 0 3
8312: PPUSH
8313: LD_OWVAR 2
8317: PPUSH
8318: CALL 13906 0 4
8322: PPOPN 3
8324: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8325: GO 8327
8327: DISABLE
8328: LD_INT 0
8330: PPUSH
8331: PPUSH
8332: PPUSH
8333: PPUSH
8334: PPUSH
// begin sib_mined := [ ] ;
8335: LD_ADDR_VAR 0 5
8339: PUSH
8340: EMPTY
8341: ST_TO_ADDR
// for i := 1 to 8 do
8342: LD_ADDR_VAR 0 1
8346: PUSH
8347: DOUBLE
8348: LD_INT 1
8350: DEC
8351: ST_TO_ADDR
8352: LD_INT 8
8354: PUSH
8355: FOR_TO
8356: IFFALSE 8512
// if Side_Positions [ i ] then
8358: LD_EXP 19
8362: PUSH
8363: LD_VAR 0 1
8367: ARRAY
8368: IFFALSE 8496
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8370: LD_ADDR_VAR 0 4
8374: PUSH
8375: LD_INT 22
8377: PUSH
8378: LD_VAR 0 1
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: LD_INT 2
8389: PUSH
8390: LD_INT 30
8392: PUSH
8393: LD_INT 0
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: LD_INT 30
8402: PUSH
8403: LD_INT 1
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: LIST
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 69
8423: ST_TO_ADDR
// pom := 0 ;
8424: LD_ADDR_VAR 0 3
8428: PUSH
8429: LD_INT 0
8431: ST_TO_ADDR
// for base in filter do
8432: LD_ADDR_VAR 0 2
8436: PUSH
8437: LD_VAR 0 4
8441: PUSH
8442: FOR_IN
8443: IFFALSE 8476
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8445: LD_ADDR_VAR 0 3
8449: PUSH
8450: LD_VAR 0 3
8454: PUSH
8455: LD_VAR 0 2
8459: PPUSH
8460: CALL_OW 274
8464: PPUSH
8465: LD_INT 3
8467: PPUSH
8468: CALL_OW 275
8472: PLUS
8473: ST_TO_ADDR
8474: GO 8442
8476: POP
8477: POP
// sib_mined := sib_mined ^ pom ;
8478: LD_ADDR_VAR 0 5
8482: PUSH
8483: LD_VAR 0 5
8487: PUSH
8488: LD_VAR 0 3
8492: ADD
8493: ST_TO_ADDR
// end else
8494: GO 8510
// sib_mined := sib_mined ^ 0 ;
8496: LD_ADDR_VAR 0 5
8500: PUSH
8501: LD_VAR 0 5
8505: PUSH
8506: LD_INT 0
8508: ADD
8509: ST_TO_ADDR
8510: GO 8355
8512: POP
8513: POP
// if not def_public_score then
8514: LD_EXP 2
8518: NOT
8519: IFFALSE 8609
// begin ExtraStrings := [ ] ;
8521: LD_ADDR_EXP 59
8525: PUSH
8526: EMPTY
8527: ST_TO_ADDR
// for i := 1 to 8 do
8528: LD_ADDR_VAR 0 1
8532: PUSH
8533: DOUBLE
8534: LD_INT 1
8536: DEC
8537: ST_TO_ADDR
8538: LD_INT 8
8540: PUSH
8541: FOR_TO
8542: IFFALSE 8605
// if Side_Positions [ i ] then
8544: LD_EXP 19
8548: PUSH
8549: LD_VAR 0 1
8553: ARRAY
8554: IFFALSE 8603
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8556: LD_ADDR_EXP 59
8560: PUSH
8561: LD_EXP 59
8565: PUSH
8566: LD_STRING #AlienBase-MinedPublic
8568: PUSH
8569: LD_VAR 0 1
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 5
8583: PUSH
8584: LD_VAR 0 1
8588: ARRAY
8589: PUSH
8590: LD_EXP 11
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: ADD
8602: ST_TO_ADDR
8603: GO 8541
8605: POP
8606: POP
// end else
8607: GO 8638
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8609: LD_ADDR_EXP 59
8613: PUSH
8614: LD_STRING #AlienBase-Mined
8616: PUSH
8617: LD_VAR 0 5
8621: PUSH
8622: LD_OWVAR 2
8626: ARRAY
8627: PUSH
8628: LD_EXP 11
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: LIST
8637: ST_TO_ADDR
// for i := 1 to 8 do
8638: LD_ADDR_VAR 0 1
8642: PUSH
8643: DOUBLE
8644: LD_INT 1
8646: DEC
8647: ST_TO_ADDR
8648: LD_INT 8
8650: PUSH
8651: FOR_TO
8652: IFFALSE 8722
// if sib_mined [ i ] >= amount_of_siberit then
8654: LD_VAR 0 5
8658: PUSH
8659: LD_VAR 0 1
8663: ARRAY
8664: PUSH
8665: LD_EXP 11
8669: GREATEREQUAL
8670: IFFALSE 8720
// begin wait ( 0 0$1 ) ;
8672: LD_INT 35
8674: PPUSH
8675: CALL_OW 67
// if IAmServer then
8679: CALL_OW 518
8683: IFFALSE 8692
// wait ( 0 0$1 ) ;
8685: LD_INT 35
8687: PPUSH
8688: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8692: LD_VAR 0 5
8696: PUSH
8697: LD_OWVAR 2
8701: ARRAY
8702: PUSH
8703: LD_EXP 11
8707: GREATEREQUAL
8708: IFFALSE 8716
// YouWinInMultiplayer else
8710: CALL_OW 106
8714: GO 8720
// YouLostInMultiplayer ;
8716: CALL_OW 107
// end ;
8720: GO 8651
8722: POP
8723: POP
// enable ;
8724: ENABLE
// end ; end_of_file
8725: PPOPN 5
8727: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8728: LD_INT 0
8730: PPUSH
8731: PPUSH
// for un in battle_flags_id do
8732: LD_ADDR_VAR 0 2
8736: PUSH
8737: LD_EXP 31
8741: PUSH
8742: FOR_IN
8743: IFFALSE 8818
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8745: LD_VAR 0 2
8749: PPUSH
8750: LD_INT 1
8752: PUSH
8753: LD_LOC 11
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 2
8764: PUSH
8765: LD_LOC 11
8769: PUSH
8770: LD_INT 2
8772: DIV
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 3
8780: PUSH
8781: LD_LOC 11
8785: PUSH
8786: LD_INT 5
8788: DIV
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 20
8796: PUSH
8797: LD_LOC 11
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: PPUSH
8812: CALL_OW 423
8816: GO 8742
8818: POP
8819: POP
// end ;
8820: LD_VAR 0 1
8824: RET
// every 1 do var un ;
8825: GO 8827
8827: DISABLE
8828: LD_INT 0
8830: PPUSH
// begin if not def_morale_flags then
8831: LD_EXP 52
8835: NOT
8836: IFFALSE 8840
// exit ;
8838: GO 8917
// if not morale_decreasing_time then
8840: LD_EXP 10
8844: NOT
8845: IFFALSE 8849
// exit ;
8847: GO 8917
// strength = 100 ;
8849: LD_ADDR_LOC 11
8853: PUSH
8854: LD_INT 100
8856: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8857: LD_EXP 10
8861: PPUSH
8862: CALL_OW 67
// strength := strength - 1 ;
8866: LD_ADDR_LOC 11
8870: PUSH
8871: LD_LOC 11
8875: PUSH
8876: LD_INT 1
8878: MINUS
8879: ST_TO_ADDR
// Update_Flags ;
8880: CALL 8728 0 0
// until not strength ;
8884: LD_LOC 11
8888: NOT
8889: IFFALSE 8857
// for un in battle_flags_id do
8891: LD_ADDR_VAR 0 1
8895: PUSH
8896: LD_EXP 31
8900: PUSH
8901: FOR_IN
8902: IFFALSE 8915
// KillBattleFlag ( un ) ;
8904: LD_VAR 0 1
8908: PPUSH
8909: CALL_OW 419
8913: GO 8901
8915: POP
8916: POP
// end ; end_of_file
8917: PPOPN 1
8919: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8920: LD_INT 0
8922: PPUSH
8923: PPUSH
8924: PPUSH
// enable ( 600 ) ;
8925: LD_INT 600
8927: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8928: LD_ADDR_VAR 0 2
8932: PUSH
8933: DOUBLE
8934: LD_INT 1
8936: DEC
8937: ST_TO_ADDR
8938: LD_EXP 41
8942: PUSH
8943: FOR_TO
8944: IFFALSE 9099
// if Position_Sides [ i ] then
8946: LD_EXP 23
8950: PUSH
8951: LD_VAR 0 2
8955: ARRAY
8956: IFFALSE 9097
// for j := 1 to 8 do
8958: LD_ADDR_VAR 0 3
8962: PUSH
8963: DOUBLE
8964: LD_INT 1
8966: DEC
8967: ST_TO_ADDR
8968: LD_INT 8
8970: PUSH
8971: FOR_TO
8972: IFFALSE 9095
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8974: LD_EXP 19
8978: PUSH
8979: LD_VAR 0 3
8983: ARRAY
8984: PUSH
8985: LD_EXP 17
8989: PUSH
8990: LD_EXP 23
8994: PUSH
8995: LD_VAR 0 2
8999: ARRAY
9000: ARRAY
9001: PUSH
9002: LD_EXP 17
9006: PUSH
9007: LD_VAR 0 3
9011: ARRAY
9012: NONEQUAL
9013: PUSH
9014: LD_EXP 21
9018: NOT
9019: PUSH
9020: LD_EXP 23
9024: PUSH
9025: LD_VAR 0 2
9029: ARRAY
9030: PUSH
9031: LD_VAR 0 3
9035: NONEQUAL
9036: AND
9037: OR
9038: AND
9039: IFFALSE 9063
// HideArea ( j , BuildUpAreas [ i ] ) else
9041: LD_VAR 0 3
9045: PPUSH
9046: LD_EXP 41
9050: PUSH
9051: LD_VAR 0 2
9055: ARRAY
9056: PPUSH
9057: CALL_OW 333
9061: GO 9093
// if ( j = your_side ) then
9063: LD_VAR 0 3
9067: PUSH
9068: LD_OWVAR 2
9072: EQUAL
9073: IFFALSE 9093
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
9075: LD_EXP 41
9079: PUSH
9080: LD_VAR 0 2
9084: ARRAY
9085: PPUSH
9086: LD_INT 5
9088: PPUSH
9089: CALL_OW 424
9093: GO 8971
9095: POP
9096: POP
9097: GO 8943
9099: POP
9100: POP
// end ;
9101: LD_VAR 0 1
9105: RET
// export function EndBuildUp ; var i , j ; begin
9106: LD_INT 0
9108: PPUSH
9109: PPUSH
9110: PPUSH
// disable ( 600 ) ;
9111: LD_INT 600
9113: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
9114: LD_ADDR_VAR 0 2
9118: PUSH
9119: DOUBLE
9120: LD_INT 1
9122: DEC
9123: ST_TO_ADDR
9124: LD_EXP 41
9128: PUSH
9129: FOR_TO
9130: IFFALSE 9285
// if Position_Sides [ i ] then
9132: LD_EXP 23
9136: PUSH
9137: LD_VAR 0 2
9141: ARRAY
9142: IFFALSE 9283
// for j := 1 to 8 do
9144: LD_ADDR_VAR 0 3
9148: PUSH
9149: DOUBLE
9150: LD_INT 1
9152: DEC
9153: ST_TO_ADDR
9154: LD_INT 8
9156: PUSH
9157: FOR_TO
9158: IFFALSE 9281
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9160: LD_EXP 19
9164: PUSH
9165: LD_VAR 0 3
9169: ARRAY
9170: PUSH
9171: LD_EXP 17
9175: PUSH
9176: LD_EXP 23
9180: PUSH
9181: LD_VAR 0 2
9185: ARRAY
9186: ARRAY
9187: PUSH
9188: LD_EXP 17
9192: PUSH
9193: LD_VAR 0 3
9197: ARRAY
9198: NONEQUAL
9199: PUSH
9200: LD_EXP 21
9204: NOT
9205: PUSH
9206: LD_EXP 23
9210: PUSH
9211: LD_VAR 0 2
9215: ARRAY
9216: PUSH
9217: LD_VAR 0 3
9221: NONEQUAL
9222: AND
9223: OR
9224: AND
9225: IFFALSE 9249
// ShowArea ( j , BuildUpAreas [ i ] ) else
9227: LD_VAR 0 3
9231: PPUSH
9232: LD_EXP 41
9236: PUSH
9237: LD_VAR 0 2
9241: ARRAY
9242: PPUSH
9243: CALL_OW 334
9247: GO 9279
// if ( j = your_side ) then
9249: LD_VAR 0 3
9253: PUSH
9254: LD_OWVAR 2
9258: EQUAL
9259: IFFALSE 9279
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9261: LD_EXP 41
9265: PUSH
9266: LD_VAR 0 2
9270: ARRAY
9271: PPUSH
9272: LD_INT 0
9274: PPUSH
9275: CALL_OW 424
9279: GO 9157
9281: POP
9282: POP
9283: GO 9129
9285: POP
9286: POP
// end ;
9287: LD_VAR 0 1
9291: RET
// every 5 marked 600 do var i , un ;
9292: GO 9294
9294: DISABLE
9295: LD_INT 0
9297: PPUSH
9298: PPUSH
// begin for i := 1 to BuildUpAreas do
9299: LD_ADDR_VAR 0 1
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_EXP 41
9313: PUSH
9314: FOR_TO
9315: IFFALSE 9470
// if Position_Sides [ i ] then
9317: LD_EXP 23
9321: PUSH
9322: LD_VAR 0 1
9326: ARRAY
9327: IFFALSE 9468
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9329: LD_ADDR_VAR 0 2
9333: PUSH
9334: LD_EXP 41
9338: PUSH
9339: LD_VAR 0 1
9343: ARRAY
9344: PPUSH
9345: LD_INT 2
9347: PUSH
9348: LD_INT 21
9350: PUSH
9351: LD_INT 1
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: PUSH
9358: LD_INT 21
9360: PUSH
9361: LD_INT 2
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: PUSH
9373: LD_INT 22
9375: PUSH
9376: LD_OWVAR 2
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PPUSH
9389: CALL_OW 70
9393: PUSH
9394: FOR_IN
9395: IFFALSE 9466
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9397: LD_EXP 17
9401: PUSH
9402: LD_EXP 23
9406: PUSH
9407: LD_VAR 0 1
9411: ARRAY
9412: ARRAY
9413: PUSH
9414: LD_EXP 17
9418: PUSH
9419: LD_OWVAR 2
9423: ARRAY
9424: NONEQUAL
9425: PUSH
9426: LD_EXP 21
9430: NOT
9431: PUSH
9432: LD_EXP 23
9436: PUSH
9437: LD_VAR 0 1
9441: ARRAY
9442: PUSH
9443: LD_OWVAR 2
9447: NONEQUAL
9448: AND
9449: OR
9450: IFFALSE 9464
// ComMoveToArea ( un , BuildUpEscape ) ;
9452: LD_VAR 0 2
9456: PPUSH
9457: LD_INT 14
9459: PPUSH
9460: CALL_OW 113
9464: GO 9394
9466: POP
9467: POP
9468: GO 9314
9470: POP
9471: POP
// enable ;
9472: ENABLE
// end ;
9473: PPOPN 2
9475: END
// every 1 do
9476: GO 9478
9478: DISABLE
// if ( def_builduptime > 0 ) then
9479: LD_EXP 57
9483: PUSH
9484: LD_INT 0
9486: GREATER
9487: IFFALSE 9502
// begin wait ( buildUpTime_Delay ) ;
9489: LD_EXP 14
9493: PPUSH
9494: CALL_OW 67
// EndBuildUp ;
9498: CALL 9106 0 0
// end ; end_of_file
9502: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
9503: GO 9505
9505: DISABLE
9506: LD_INT 0
9508: PPUSH
// begin enable ;
9509: ENABLE
// for x := 1 to 8 do
9510: LD_ADDR_VAR 0 1
9514: PUSH
9515: DOUBLE
9516: LD_INT 1
9518: DEC
9519: ST_TO_ADDR
9520: LD_INT 8
9522: PUSH
9523: FOR_TO
9524: IFFALSE 9608
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
9526: LD_LOC 18
9530: PUSH
9531: LD_VAR 0 1
9535: ARRAY
9536: PUSH
9537: LD_INT 5
9539: GREATER
9540: PUSH
9541: LD_LOC 16
9545: PUSH
9546: LD_VAR 0 1
9550: ARRAY
9551: PUSH
9552: LD_INT 1
9554: NEG
9555: EQUAL
9556: AND
9557: IFFALSE 9606
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
9559: LD_ADDR_LOC 17
9563: PUSH
9564: LD_LOC 17
9568: PPUSH
9569: LD_VAR 0 1
9573: PPUSH
9574: LD_LOC 17
9578: PUSH
9579: LD_VAR 0 1
9583: ARRAY
9584: PUSH
9585: LD_INT 6
9587: PLUS
9588: PPUSH
9589: CALL_OW 1
9593: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
9594: LD_VAR 0 1
9598: PPUSH
9599: LD_INT 0
9601: PPUSH
9602: CALL 9780 0 2
// end ;
9606: GO 9523
9608: POP
9609: POP
// end ;
9610: PPOPN 1
9612: END
// every 0 0$1 marked 200 do var BGL , x ;
9613: GO 9615
9615: DISABLE
9616: LD_INT 0
9618: PPUSH
9619: PPUSH
// begin enable ;
9620: ENABLE
// for x := 1 to 8 do
9621: LD_ADDR_VAR 0 2
9625: PUSH
9626: DOUBLE
9627: LD_INT 1
9629: DEC
9630: ST_TO_ADDR
9631: LD_INT 8
9633: PUSH
9634: FOR_TO
9635: IFFALSE 9766
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
9637: LD_LOC 16
9641: PUSH
9642: LD_VAR 0 2
9646: ARRAY
9647: PUSH
9648: LD_INT 1
9650: NEG
9651: GREATER
9652: PUSH
9653: LD_LOC 16
9657: PUSH
9658: LD_VAR 0 2
9662: ARRAY
9663: PPUSH
9664: CALL_OW 300
9668: AND
9669: IFFALSE 9764
// begin BGL := GetLives ( BloodGods [ x ] ) ;
9671: LD_ADDR_VAR 0 1
9675: PUSH
9676: LD_LOC 16
9680: PUSH
9681: LD_VAR 0 2
9685: ARRAY
9686: PPUSH
9687: CALL_OW 256
9691: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
9692: LD_VAR 0 1
9696: PUSH
9697: LD_INT 1000
9699: LESS
9700: PUSH
9701: LD_VAR 0 1
9705: PUSH
9706: LD_INT 100
9708: GREATER
9709: AND
9710: IFFALSE 9764
// begin BGL := BGL + 10 ;
9712: LD_ADDR_VAR 0 1
9716: PUSH
9717: LD_VAR 0 1
9721: PUSH
9722: LD_INT 10
9724: PLUS
9725: ST_TO_ADDR
// if BGL > 1000 then
9726: LD_VAR 0 1
9730: PUSH
9731: LD_INT 1000
9733: GREATER
9734: IFFALSE 9744
// BGL := 1000 ;
9736: LD_ADDR_VAR 0 1
9740: PUSH
9741: LD_INT 1000
9743: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
9744: LD_LOC 16
9748: PUSH
9749: LD_VAR 0 2
9753: ARRAY
9754: PPUSH
9755: LD_VAR 0 1
9759: PPUSH
9760: CALL_OW 234
// end ; end ;
9764: GO 9634
9766: POP
9767: POP
// end ;
9768: PPOPN 2
9770: END
// every 0 0$1 marked 200 do
9771: GO 9773
9773: DISABLE
// begin DisplayTimeWithKills ;
9774: CALL 10021 0 0
// enable ;
9778: ENABLE
// end ;
9779: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
9780: LD_INT 0
9782: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
9783: LD_ADDR_OWVAR 24
9787: PUSH
9788: LD_INT 0
9790: PPUSH
9791: LD_INT 5
9793: PPUSH
9794: CALL_OW 12
9798: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
9799: LD_INT 1
9801: PPUSH
9802: LD_INT 1
9804: PPUSH
9805: LD_INT 15
9807: PPUSH
9808: CALL_OW 380
// hc_importance := 106 ;
9812: LD_ADDR_OWVAR 32
9816: PUSH
9817: LD_INT 106
9819: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
9820: LD_ADDR_OWVAR 26
9824: PUSH
9825: LD_STRING Blood God of 
9827: PUSH
9828: LD_OWVAR 19
9832: PUSH
9833: LD_VAR 0 1
9837: ARRAY
9838: STR
9839: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
9840: LD_ADDR_OWVAR 21
9844: PUSH
9845: LD_EXP 20
9849: PUSH
9850: LD_VAR 0 1
9854: ARRAY
9855: ST_TO_ADDR
// uc_side := side ;
9856: LD_ADDR_OWVAR 20
9860: PUSH
9861: LD_VAR 0 1
9865: ST_TO_ADDR
// hc_noskilllimit := true ;
9866: LD_ADDR_OWVAR 76
9870: PUSH
9871: LD_INT 1
9873: ST_TO_ADDR
// hc_agressivity := 50 ;
9874: LD_ADDR_OWVAR 35
9878: PUSH
9879: LD_INT 50
9881: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
9882: LD_ADDR_LOC 16
9886: PUSH
9887: LD_LOC 16
9891: PPUSH
9892: LD_VAR 0 1
9896: PPUSH
9897: CALL_OW 44
9901: PPUSH
9902: CALL_OW 1
9906: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
9907: LD_LOC 16
9911: PUSH
9912: LD_VAR 0 1
9916: ARRAY
9917: PPUSH
9918: LD_LOC 19
9922: PUSH
9923: LD_EXP 19
9927: PUSH
9928: LD_VAR 0 1
9932: ARRAY
9933: ARRAY
9934: PUSH
9935: LD_INT 1
9937: ARRAY
9938: PPUSH
9939: LD_LOC 19
9943: PUSH
9944: LD_EXP 19
9948: PUSH
9949: LD_VAR 0 1
9953: ARRAY
9954: ARRAY
9955: PUSH
9956: LD_INT 2
9958: ARRAY
9959: PPUSH
9960: LD_INT 10
9962: PPUSH
9963: LD_INT 0
9965: PPUSH
9966: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
9970: LD_LOC 16
9974: PUSH
9975: LD_VAR 0 1
9979: ARRAY
9980: PPUSH
9981: LD_INT 1
9983: PPUSH
9984: LD_INT 300
9986: PPUSH
9987: CALL_OW 239
// if not NoDialog then
9991: LD_VAR 0 2
9995: NOT
9996: IFFALSE 10016
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
9998: LD_LOC 16
10002: PUSH
10003: LD_VAR 0 1
10007: ARRAY
10008: PPUSH
10009: LD_STRING DLAwaken
10011: PPUSH
10012: CALL_OW 94
// end ;
10016: LD_VAR 0 3
10020: RET
// function DisplayTimeWithKills ; var x ; begin
10021: LD_INT 0
10023: PPUSH
10024: PPUSH
// ExtraStrings :=  ;
10025: LD_ADDR_EXP 59
10029: PUSH
10030: LD_STRING 
10032: ST_TO_ADDR
// for x = 1 to Side_Positions do
10033: LD_ADDR_VAR 0 2
10037: PUSH
10038: DOUBLE
10039: LD_INT 1
10041: DEC
10042: ST_TO_ADDR
10043: LD_EXP 19
10047: PUSH
10048: FOR_TO
10049: IFFALSE 10282
// if Side_Positions [ x ] then
10051: LD_EXP 19
10055: PUSH
10056: LD_VAR 0 2
10060: ARRAY
10061: IFFALSE 10280
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
10063: LD_ADDR_LOC 18
10067: PUSH
10068: LD_LOC 18
10072: PPUSH
10073: LD_VAR 0 2
10077: PPUSH
10078: LD_VAR 0 2
10082: PPUSH
10083: CALL_OW 515
10087: PUSH
10088: LD_LOC 17
10092: PUSH
10093: LD_VAR 0 2
10097: ARRAY
10098: MINUS
10099: PPUSH
10100: CALL_OW 1
10104: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
10105: LD_LOC 16
10109: PUSH
10110: LD_VAR 0 2
10114: ARRAY
10115: PUSH
10116: LD_INT 1
10118: NEG
10119: GREATER
10120: PUSH
10121: LD_LOC 16
10125: PUSH
10126: LD_VAR 0 2
10130: ARRAY
10131: PPUSH
10132: CALL_OW 300
10136: AND
10137: IFFALSE 10170
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
10139: LD_ADDR_EXP 59
10143: PUSH
10144: LD_EXP 59
10148: PUSH
10149: LD_STRING #godawoken
10151: PUSH
10152: LD_VAR 0 2
10156: PUSH
10157: LD_VAR 0 2
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: ADD
10167: ST_TO_ADDR
10168: GO 10280
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
10170: LD_LOC 16
10174: PUSH
10175: LD_VAR 0 2
10179: ARRAY
10180: PUSH
10181: LD_INT 1
10183: NEG
10184: GREATER
10185: PUSH
10186: LD_LOC 16
10190: PUSH
10191: LD_VAR 0 2
10195: ARRAY
10196: PPUSH
10197: CALL_OW 301
10201: AND
10202: IFFALSE 10235
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
10204: LD_ADDR_EXP 59
10208: PUSH
10209: LD_EXP 59
10213: PUSH
10214: LD_STRING #goddied
10216: PUSH
10217: LD_VAR 0 2
10221: PUSH
10222: LD_VAR 0 2
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: ADD
10232: ST_TO_ADDR
10233: GO 10280
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
10235: LD_ADDR_EXP 59
10239: PUSH
10240: LD_EXP 59
10244: PUSH
10245: LD_STRING #godssacrifise
10247: PUSH
10248: LD_VAR 0 2
10252: PUSH
10253: LD_VAR 0 2
10257: PUSH
10258: LD_LOC 18
10262: PUSH
10263: LD_VAR 0 2
10267: ARRAY
10268: PUSH
10269: LD_INT 6
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: ADD
10279: ST_TO_ADDR
10280: GO 10048
10282: POP
10283: POP
// end ;
10284: LD_VAR 0 1
10288: RET
// export function InitBloodGods ; begin
10289: LD_INT 0
10291: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
10292: LD_ADDR_LOC 16
10296: PUSH
10297: LD_INT 1
10299: NEG
10300: PUSH
10301: LD_INT 1
10303: NEG
10304: PUSH
10305: LD_INT 1
10307: NEG
10308: PUSH
10309: LD_INT 1
10311: NEG
10312: PUSH
10313: LD_INT 1
10315: NEG
10316: PUSH
10317: LD_INT 1
10319: NEG
10320: PUSH
10321: LD_INT 1
10323: NEG
10324: PUSH
10325: LD_INT 1
10327: NEG
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10339: LD_ADDR_LOC 17
10343: PUSH
10344: LD_INT 0
10346: PUSH
10347: LD_INT 0
10349: PUSH
10350: LD_INT 0
10352: PUSH
10353: LD_INT 0
10355: PUSH
10356: LD_INT 0
10358: PUSH
10359: LD_INT 0
10361: PUSH
10362: LD_INT 0
10364: PUSH
10365: LD_INT 0
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10378: LD_ADDR_LOC 18
10382: PUSH
10383: LD_INT 0
10385: PUSH
10386: LD_INT 0
10388: PUSH
10389: LD_INT 0
10391: PUSH
10392: LD_INT 0
10394: PUSH
10395: LD_INT 0
10397: PUSH
10398: LD_INT 0
10400: PUSH
10401: LD_INT 0
10403: PUSH
10404: LD_INT 0
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
10417: LD_ADDR_LOC 19
10421: PUSH
10422: LD_INT 60
10424: PUSH
10425: LD_INT 47
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 82
10434: PUSH
10435: LD_INT 26
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 124
10444: PUSH
10445: LD_INT 45
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 147
10454: PUSH
10455: LD_INT 90
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 126
10464: PUSH
10465: LD_INT 112
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 84
10474: PUSH
10475: LD_INT 92
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 106
10484: PUSH
10485: LD_INT 73
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 106
10494: PUSH
10495: LD_INT 73
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: ST_TO_ADDR
// ClearHumansKilled ;
10512: CALL_OW 516
// enable ( 200 ) ;
10516: LD_INT 200
10518: ENABLE_MARKED
// end ; end_of_file
10519: LD_VAR 0 1
10523: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
10524: LD_INT 0
10526: PPUSH
10527: PPUSH
// if ( not IAmSpec ) then
10528: CALL_OW 531
10532: NOT
10533: IFFALSE 10549
// Result := Limits_Info ^  ;
10535: LD_ADDR_VAR 0 1
10539: PUSH
10540: LD_LOC 27
10544: PUSH
10545: LD_STRING 
10547: ADD
10548: ST_TO_ADDR
// for i := 1 to 8 do
10549: LD_ADDR_VAR 0 2
10553: PUSH
10554: DOUBLE
10555: LD_INT 1
10557: DEC
10558: ST_TO_ADDR
10559: LD_INT 8
10561: PUSH
10562: FOR_TO
10563: IFFALSE 10608
// if Cheaters [ i ] then
10565: LD_LOC 28
10569: PUSH
10570: LD_VAR 0 2
10574: ARRAY
10575: IFFALSE 10606
// Result := Result ^ [ #Cheater , i , i ] ;
10577: LD_ADDR_VAR 0 1
10581: PUSH
10582: LD_VAR 0 1
10586: PUSH
10587: LD_STRING #Cheater
10589: PUSH
10590: LD_VAR 0 2
10594: PUSH
10595: LD_VAR 0 2
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: LIST
10604: ADD
10605: ST_TO_ADDR
10606: GO 10562
10608: POP
10609: POP
// end ;
10610: LD_VAR 0 1
10614: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
10615: LD_INT 0
10617: PPUSH
10618: PPUSH
10619: PPUSH
10620: PPUSH
10621: PPUSH
// if game_type in [ 10 , 11 ] then
10622: LD_EXP 42
10626: PUSH
10627: LD_INT 10
10629: PUSH
10630: LD_INT 11
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: IN
10637: IFFALSE 10653
// def_game_rules = def_game_rules + 1 ;
10639: LD_ADDR_EXP 43
10643: PUSH
10644: LD_EXP 43
10648: PUSH
10649: LD_INT 1
10651: PLUS
10652: ST_TO_ADDR
// case def_game_rules of 0 :
10653: LD_EXP 43
10657: PUSH
10658: LD_INT 0
10660: DOUBLE
10661: EQUAL
10662: IFTRUE 10666
10664: GO 10671
10666: POP
// exit ; 1 :
10667: GO 12729
10669: GO 12629
10671: LD_INT 1
10673: DOUBLE
10674: EQUAL
10675: IFTRUE 10679
10677: GO 10895
10679: POP
// begin def_base_level := 2 ;
10680: LD_ADDR_EXP 44
10684: PUSH
10685: LD_INT 2
10687: ST_TO_ADDR
// def_amount_of_people := 2 ;
10688: LD_ADDR_EXP 45
10692: PUSH
10693: LD_INT 2
10695: ST_TO_ADDR
// def_skill_level := 1 ;
10696: LD_ADDR_EXP 46
10700: PUSH
10701: LD_INT 1
10703: ST_TO_ADDR
// def_starting_resources := 2 ;
10704: LD_ADDR_EXP 47
10708: PUSH
10709: LD_INT 2
10711: ST_TO_ADDR
// def_shipments_density := 1 ;
10712: LD_ADDR_EXP 48
10716: PUSH
10717: LD_INT 1
10719: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10720: LD_ADDR_EXP 49
10724: PUSH
10725: LD_INT 0
10727: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10728: LD_ADDR_EXP 50
10732: PUSH
10733: LD_INT 1
10735: ST_TO_ADDR
// def_shared_vision := 1 ;
10736: LD_ADDR_EXP 51
10740: PUSH
10741: LD_INT 1
10743: ST_TO_ADDR
// def_morale_flags := 3 ;
10744: LD_ADDR_EXP 52
10748: PUSH
10749: LD_INT 3
10751: ST_TO_ADDR
// def_siberite_detection := 1 ;
10752: LD_ADDR_EXP 53
10756: PUSH
10757: LD_INT 1
10759: ST_TO_ADDR
// def_people_respawning := 1 ;
10760: LD_ADDR_EXP 54
10764: PUSH
10765: LD_INT 1
10767: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10768: LD_ADDR_EXP 55
10772: PUSH
10773: LD_INT 1
10775: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10776: LD_ADDR_EXP 56
10780: PUSH
10781: LD_INT 0
10783: ST_TO_ADDR
// def_builduptime := 2 ;
10784: LD_ADDR_EXP 57
10788: PUSH
10789: LD_INT 2
10791: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
10792: LD_ADDR_VAR 0 2
10796: PUSH
10797: EMPTY
10798: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10799: LD_ADDR_VAR 0 3
10803: PUSH
10804: EMPTY
10805: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10806: LD_ADDR_LOC 22
10810: PUSH
10811: EMPTY
10812: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10813: LD_ADDR_LOC 23
10817: PUSH
10818: EMPTY
10819: ST_TO_ADDR
// Banned_Controls := [ ] ;
10820: LD_ADDR_LOC 24
10824: PUSH
10825: EMPTY
10826: ST_TO_ADDR
// Banned_Engines := [ ] ;
10827: LD_ADDR_LOC 25
10831: PUSH
10832: EMPTY
10833: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10834: LD_ADDR_LOC 20
10838: PUSH
10839: LD_INT 37
10841: PUSH
10842: EMPTY
10843: LIST
10844: PUSH
10845: LD_INT 4
10847: PUSH
10848: LD_INT 5
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 31
10857: PUSH
10858: LD_INT 32
10860: PUSH
10861: LD_INT 33
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: LIST
10873: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
10874: LD_ADDR_LOC 21
10878: PUSH
10879: LD_INT 2
10881: PUSH
10882: LD_INT 2
10884: PUSH
10885: LD_INT 4
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: LIST
10892: ST_TO_ADDR
// end ; 2 :
10893: GO 12629
10895: LD_INT 2
10897: DOUBLE
10898: EQUAL
10899: IFTRUE 10903
10901: GO 11112
10903: POP
// begin def_base_level := 1 ;
10904: LD_ADDR_EXP 44
10908: PUSH
10909: LD_INT 1
10911: ST_TO_ADDR
// def_amount_of_people := 2 ;
10912: LD_ADDR_EXP 45
10916: PUSH
10917: LD_INT 2
10919: ST_TO_ADDR
// def_skill_level := 3 ;
10920: LD_ADDR_EXP 46
10924: PUSH
10925: LD_INT 3
10927: ST_TO_ADDR
// def_starting_resources := 3 ;
10928: LD_ADDR_EXP 47
10932: PUSH
10933: LD_INT 3
10935: ST_TO_ADDR
// def_shipments_density := 2 ;
10936: LD_ADDR_EXP 48
10940: PUSH
10941: LD_INT 2
10943: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10944: LD_ADDR_EXP 49
10948: PUSH
10949: LD_INT 1
10951: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10952: LD_ADDR_EXP 50
10956: PUSH
10957: LD_INT 2
10959: ST_TO_ADDR
// def_shared_vision := 1 ;
10960: LD_ADDR_EXP 51
10964: PUSH
10965: LD_INT 1
10967: ST_TO_ADDR
// def_morale_flags := 0 ;
10968: LD_ADDR_EXP 52
10972: PUSH
10973: LD_INT 0
10975: ST_TO_ADDR
// def_siberite_detection := 1 ;
10976: LD_ADDR_EXP 53
10980: PUSH
10981: LD_INT 1
10983: ST_TO_ADDR
// def_people_respawning := 0 ;
10984: LD_ADDR_EXP 54
10988: PUSH
10989: LD_INT 0
10991: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10992: LD_ADDR_EXP 55
10996: PUSH
10997: LD_INT 0
10999: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11000: LD_ADDR_EXP 56
11004: PUSH
11005: LD_INT 0
11007: ST_TO_ADDR
// def_builduptime := 2 ;
11008: LD_ADDR_EXP 57
11012: PUSH
11013: LD_INT 2
11015: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11016: LD_ADDR_VAR 0 2
11020: PUSH
11021: LD_INT 1
11023: PUSH
11024: EMPTY
11025: LIST
11026: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11027: LD_ADDR_VAR 0 3
11031: PUSH
11032: EMPTY
11033: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11034: LD_ADDR_LOC 22
11038: PUSH
11039: EMPTY
11040: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11041: LD_ADDR_LOC 23
11045: PUSH
11046: EMPTY
11047: ST_TO_ADDR
// Banned_Controls := [ ] ;
11048: LD_ADDR_LOC 24
11052: PUSH
11053: EMPTY
11054: ST_TO_ADDR
// Banned_Engines := [ ] ;
11055: LD_ADDR_LOC 25
11059: PUSH
11060: EMPTY
11061: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11062: LD_ADDR_LOC 20
11066: PUSH
11067: LD_INT 4
11069: PUSH
11070: LD_INT 5
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 31
11079: PUSH
11080: LD_INT 32
11082: PUSH
11083: LD_INT 33
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
11095: LD_ADDR_LOC 21
11099: PUSH
11100: LD_INT 1
11102: PUSH
11103: LD_INT 2
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: ST_TO_ADDR
// end ; 3 :
11110: GO 12629
11112: LD_INT 3
11114: DOUBLE
11115: EQUAL
11116: IFTRUE 11120
11118: GO 11363
11120: POP
// begin def_base_level := 1 ;
11121: LD_ADDR_EXP 44
11125: PUSH
11126: LD_INT 1
11128: ST_TO_ADDR
// def_amount_of_people := 2 ;
11129: LD_ADDR_EXP 45
11133: PUSH
11134: LD_INT 2
11136: ST_TO_ADDR
// def_skill_level := 3 ;
11137: LD_ADDR_EXP 46
11141: PUSH
11142: LD_INT 3
11144: ST_TO_ADDR
// def_starting_resources := 3 ;
11145: LD_ADDR_EXP 47
11149: PUSH
11150: LD_INT 3
11152: ST_TO_ADDR
// def_shipments_density := 1 ;
11153: LD_ADDR_EXP 48
11157: PUSH
11158: LD_INT 1
11160: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11161: LD_ADDR_EXP 49
11165: PUSH
11166: LD_INT 0
11168: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11169: LD_ADDR_EXP 50
11173: PUSH
11174: LD_INT 1
11176: ST_TO_ADDR
// def_shared_vision := 1 ;
11177: LD_ADDR_EXP 51
11181: PUSH
11182: LD_INT 1
11184: ST_TO_ADDR
// def_morale_flags := 0 ;
11185: LD_ADDR_EXP 52
11189: PUSH
11190: LD_INT 0
11192: ST_TO_ADDR
// def_siberite_detection := 1 ;
11193: LD_ADDR_EXP 53
11197: PUSH
11198: LD_INT 1
11200: ST_TO_ADDR
// def_people_respawning := 0 ;
11201: LD_ADDR_EXP 54
11205: PUSH
11206: LD_INT 0
11208: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11209: LD_ADDR_EXP 55
11213: PUSH
11214: LD_INT 2
11216: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11217: LD_ADDR_EXP 56
11221: PUSH
11222: LD_INT 0
11224: ST_TO_ADDR
// def_builduptime := 1 ;
11225: LD_ADDR_EXP 57
11229: PUSH
11230: LD_INT 1
11232: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11233: LD_ADDR_VAR 0 2
11237: PUSH
11238: LD_INT 23
11240: PUSH
11241: EMPTY
11242: LIST
11243: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
11244: LD_ADDR_VAR 0 3
11248: PUSH
11249: LD_INT 2
11251: PUSH
11252: LD_INT 37
11254: PUSH
11255: LD_INT 32
11257: PUSH
11258: LD_INT 33
11260: PUSH
11261: LD_INT 36
11263: PUSH
11264: LD_INT 16
11266: PUSH
11267: LD_INT 23
11269: PUSH
11270: LD_INT 21
11272: PUSH
11273: LD_INT 18
11275: PUSH
11276: LD_INT 22
11278: PUSH
11279: LD_INT 20
11281: PUSH
11282: LD_INT 19
11284: PUSH
11285: LD_INT 25
11287: PUSH
11288: LD_INT 17
11290: PUSH
11291: LD_INT 24
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11311: LD_ADDR_LOC 22
11315: PUSH
11316: EMPTY
11317: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11318: LD_ADDR_LOC 23
11322: PUSH
11323: EMPTY
11324: ST_TO_ADDR
// Banned_Controls := [ ] ;
11325: LD_ADDR_LOC 24
11329: PUSH
11330: EMPTY
11331: ST_TO_ADDR
// Banned_Engines := [ ] ;
11332: LD_ADDR_LOC 25
11336: PUSH
11337: EMPTY
11338: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11339: LD_ADDR_LOC 20
11343: PUSH
11344: EMPTY
11345: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11346: LD_ADDR_LOC 21
11350: PUSH
11351: EMPTY
11352: ST_TO_ADDR
// No_Mechs := true ;
11353: LD_ADDR_EXP 58
11357: PUSH
11358: LD_INT 1
11360: ST_TO_ADDR
// end ; 4 :
11361: GO 12629
11363: LD_INT 4
11365: DOUBLE
11366: EQUAL
11367: IFTRUE 11371
11369: GO 11546
11371: POP
// begin def_base_level := 1 ;
11372: LD_ADDR_EXP 44
11376: PUSH
11377: LD_INT 1
11379: ST_TO_ADDR
// def_amount_of_people := 2 ;
11380: LD_ADDR_EXP 45
11384: PUSH
11385: LD_INT 2
11387: ST_TO_ADDR
// def_skill_level := 3 ;
11388: LD_ADDR_EXP 46
11392: PUSH
11393: LD_INT 3
11395: ST_TO_ADDR
// def_starting_resources := 3 ;
11396: LD_ADDR_EXP 47
11400: PUSH
11401: LD_INT 3
11403: ST_TO_ADDR
// def_shipments_density := 2 ;
11404: LD_ADDR_EXP 48
11408: PUSH
11409: LD_INT 2
11411: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11412: LD_ADDR_EXP 49
11416: PUSH
11417: LD_INT 1
11419: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11420: LD_ADDR_EXP 50
11424: PUSH
11425: LD_INT 2
11427: ST_TO_ADDR
// def_shared_vision := 1 ;
11428: LD_ADDR_EXP 51
11432: PUSH
11433: LD_INT 1
11435: ST_TO_ADDR
// def_morale_flags := 0 ;
11436: LD_ADDR_EXP 52
11440: PUSH
11441: LD_INT 0
11443: ST_TO_ADDR
// def_siberite_detection := 1 ;
11444: LD_ADDR_EXP 53
11448: PUSH
11449: LD_INT 1
11451: ST_TO_ADDR
// def_people_respawning := 0 ;
11452: LD_ADDR_EXP 54
11456: PUSH
11457: LD_INT 0
11459: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
11460: LD_ADDR_EXP 55
11464: PUSH
11465: LD_INT 0
11467: ST_TO_ADDR
// def_siberite_bomb := 1 ;
11468: LD_ADDR_EXP 56
11472: PUSH
11473: LD_INT 1
11475: ST_TO_ADDR
// def_builduptime := 3 ;
11476: LD_ADDR_EXP 57
11480: PUSH
11481: LD_INT 3
11483: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
11484: LD_ADDR_VAR 0 2
11488: PUSH
11489: LD_INT 1
11491: PUSH
11492: EMPTY
11493: LIST
11494: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
11495: LD_ADDR_VAR 0 3
11499: PUSH
11500: EMPTY
11501: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11502: LD_ADDR_LOC 22
11506: PUSH
11507: EMPTY
11508: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11509: LD_ADDR_LOC 23
11513: PUSH
11514: EMPTY
11515: ST_TO_ADDR
// Banned_Controls := [ ] ;
11516: LD_ADDR_LOC 24
11520: PUSH
11521: EMPTY
11522: ST_TO_ADDR
// Banned_Engines := [ ] ;
11523: LD_ADDR_LOC 25
11527: PUSH
11528: EMPTY
11529: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11530: LD_ADDR_LOC 20
11534: PUSH
11535: EMPTY
11536: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11537: LD_ADDR_LOC 21
11541: PUSH
11542: EMPTY
11543: ST_TO_ADDR
// end ; 5 :
11544: GO 12629
11546: LD_INT 5
11548: DOUBLE
11549: EQUAL
11550: IFTRUE 11554
11552: GO 11803
11554: POP
// begin def_base_level := 0 ;
11555: LD_ADDR_EXP 44
11559: PUSH
11560: LD_INT 0
11562: ST_TO_ADDR
// def_amount_of_people := 0 ;
11563: LD_ADDR_EXP 45
11567: PUSH
11568: LD_INT 0
11570: ST_TO_ADDR
// def_skill_level := 0 ;
11571: LD_ADDR_EXP 46
11575: PUSH
11576: LD_INT 0
11578: ST_TO_ADDR
// def_starting_resources := 0 ;
11579: LD_ADDR_EXP 47
11583: PUSH
11584: LD_INT 0
11586: ST_TO_ADDR
// def_shipments_density := 0 ;
11587: LD_ADDR_EXP 48
11591: PUSH
11592: LD_INT 0
11594: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11595: LD_ADDR_EXP 49
11599: PUSH
11600: LD_INT 0
11602: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11603: LD_ADDR_EXP 50
11607: PUSH
11608: LD_INT 0
11610: ST_TO_ADDR
// def_shared_vision := 1 ;
11611: LD_ADDR_EXP 51
11615: PUSH
11616: LD_INT 1
11618: ST_TO_ADDR
// def_morale_flags := 0 ;
11619: LD_ADDR_EXP 52
11623: PUSH
11624: LD_INT 0
11626: ST_TO_ADDR
// def_siberite_detection := 0 ;
11627: LD_ADDR_EXP 53
11631: PUSH
11632: LD_INT 0
11634: ST_TO_ADDR
// def_people_respawning := 1 ;
11635: LD_ADDR_EXP 54
11639: PUSH
11640: LD_INT 1
11642: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11643: LD_ADDR_EXP 55
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11651: LD_ADDR_EXP 56
11655: PUSH
11656: LD_INT 0
11658: ST_TO_ADDR
// def_builduptime := 0 ;
11659: LD_ADDR_EXP 57
11663: PUSH
11664: LD_INT 0
11666: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: LD_INT 10
11674: PUSH
11675: LD_INT 3
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
11682: LD_ADDR_VAR 0 3
11686: PUSH
11687: LD_INT 12
11689: PUSH
11690: LD_INT 11
11692: PUSH
11693: LD_INT 14
11695: PUSH
11696: LD_INT 13
11698: PUSH
11699: LD_INT 5
11701: PUSH
11702: LD_INT 24
11704: PUSH
11705: LD_INT 21
11707: PUSH
11708: LD_INT 33
11710: PUSH
11711: LD_INT 36
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
11725: LD_ADDR_LOC 22
11729: PUSH
11730: LD_INT 31
11732: PUSH
11733: EMPTY
11734: LIST
11735: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11736: LD_ADDR_LOC 23
11740: PUSH
11741: EMPTY
11742: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
11743: LD_ADDR_LOC 24
11747: PUSH
11748: LD_INT 2
11750: PUSH
11751: EMPTY
11752: LIST
11753: ST_TO_ADDR
// Banned_Engines := [ ] ;
11754: LD_ADDR_LOC 25
11758: PUSH
11759: EMPTY
11760: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
11761: LD_ADDR_LOC 20
11765: PUSH
11766: LD_INT 4
11768: PUSH
11769: EMPTY
11770: LIST
11771: PUSH
11772: LD_INT 31
11774: PUSH
11775: LD_INT 32
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
11786: LD_ADDR_LOC 21
11790: PUSH
11791: LD_INT 1
11793: PUSH
11794: LD_INT 1
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: ST_TO_ADDR
// end ; 6 :
11801: GO 12629
11803: LD_INT 6
11805: DOUBLE
11806: EQUAL
11807: IFTRUE 11811
11809: GO 12014
11811: POP
// begin def_base_level := 1 ;
11812: LD_ADDR_EXP 44
11816: PUSH
11817: LD_INT 1
11819: ST_TO_ADDR
// def_amount_of_people := 2 ;
11820: LD_ADDR_EXP 45
11824: PUSH
11825: LD_INT 2
11827: ST_TO_ADDR
// def_skill_level := 3 ;
11828: LD_ADDR_EXP 46
11832: PUSH
11833: LD_INT 3
11835: ST_TO_ADDR
// def_starting_resources := 3 ;
11836: LD_ADDR_EXP 47
11840: PUSH
11841: LD_INT 3
11843: ST_TO_ADDR
// def_shipments_density := 1 ;
11844: LD_ADDR_EXP 48
11848: PUSH
11849: LD_INT 1
11851: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11852: LD_ADDR_EXP 49
11856: PUSH
11857: LD_INT 0
11859: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11860: LD_ADDR_EXP 50
11864: PUSH
11865: LD_INT 1
11867: ST_TO_ADDR
// def_shared_vision := 1 ;
11868: LD_ADDR_EXP 51
11872: PUSH
11873: LD_INT 1
11875: ST_TO_ADDR
// def_morale_flags := 0 ;
11876: LD_ADDR_EXP 52
11880: PUSH
11881: LD_INT 0
11883: ST_TO_ADDR
// def_siberite_detection := 1 ;
11884: LD_ADDR_EXP 53
11888: PUSH
11889: LD_INT 1
11891: ST_TO_ADDR
// def_people_respawning := 2 ;
11892: LD_ADDR_EXP 54
11896: PUSH
11897: LD_INT 2
11899: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11900: LD_ADDR_EXP 55
11904: PUSH
11905: LD_INT 1
11907: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11908: LD_ADDR_EXP 56
11912: PUSH
11913: LD_INT 0
11915: ST_TO_ADDR
// def_builduptime := 1 ;
11916: LD_ADDR_EXP 57
11920: PUSH
11921: LD_INT 1
11923: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11924: LD_ADDR_VAR 0 2
11928: PUSH
11929: LD_INT 23
11931: PUSH
11932: EMPTY
11933: LIST
11934: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
11935: LD_ADDR_VAR 0 3
11939: PUSH
11940: LD_INT 2
11942: PUSH
11943: LD_INT 37
11945: PUSH
11946: LD_INT 31
11948: PUSH
11949: LD_INT 32
11951: PUSH
11952: LD_INT 33
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11962: LD_ADDR_LOC 22
11966: PUSH
11967: EMPTY
11968: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11969: LD_ADDR_LOC 23
11973: PUSH
11974: EMPTY
11975: ST_TO_ADDR
// Banned_Controls := [ ] ;
11976: LD_ADDR_LOC 24
11980: PUSH
11981: EMPTY
11982: ST_TO_ADDR
// Banned_Engines := [ ] ;
11983: LD_ADDR_LOC 25
11987: PUSH
11988: EMPTY
11989: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11990: LD_ADDR_LOC 20
11994: PUSH
11995: EMPTY
11996: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11997: LD_ADDR_LOC 21
12001: PUSH
12002: EMPTY
12003: ST_TO_ADDR
// No_Mechs := true ;
12004: LD_ADDR_EXP 58
12008: PUSH
12009: LD_INT 1
12011: ST_TO_ADDR
// end ; 7 :
12012: GO 12629
12014: LD_INT 7
12016: DOUBLE
12017: EQUAL
12018: IFTRUE 12022
12020: GO 12220
12022: POP
// begin def_base_level := 1 ;
12023: LD_ADDR_EXP 44
12027: PUSH
12028: LD_INT 1
12030: ST_TO_ADDR
// def_amount_of_people := 2 ;
12031: LD_ADDR_EXP 45
12035: PUSH
12036: LD_INT 2
12038: ST_TO_ADDR
// def_skill_level := 3 ;
12039: LD_ADDR_EXP 46
12043: PUSH
12044: LD_INT 3
12046: ST_TO_ADDR
// def_starting_resources := 3 ;
12047: LD_ADDR_EXP 47
12051: PUSH
12052: LD_INT 3
12054: ST_TO_ADDR
// def_shipments_density := 1 ;
12055: LD_ADDR_EXP 48
12059: PUSH
12060: LD_INT 1
12062: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
12063: LD_ADDR_EXP 49
12067: PUSH
12068: LD_INT 1
12070: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
12071: LD_ADDR_EXP 50
12075: PUSH
12076: LD_INT 2
12078: ST_TO_ADDR
// def_shared_vision := 1 ;
12079: LD_ADDR_EXP 51
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// def_morale_flags := 0 ;
12087: LD_ADDR_EXP 52
12091: PUSH
12092: LD_INT 0
12094: ST_TO_ADDR
// def_siberite_detection := 1 ;
12095: LD_ADDR_EXP 53
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// def_people_respawning := 0 ;
12103: LD_ADDR_EXP 54
12107: PUSH
12108: LD_INT 0
12110: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
12111: LD_ADDR_EXP 55
12115: PUSH
12116: LD_INT 1
12118: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12119: LD_ADDR_EXP 56
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// def_builduptime := 3 ;
12127: LD_ADDR_EXP 57
12131: PUSH
12132: LD_INT 3
12134: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
12135: LD_ADDR_VAR 0 2
12139: PUSH
12140: LD_INT 23
12142: PUSH
12143: EMPTY
12144: LIST
12145: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
12146: LD_ADDR_VAR 0 3
12150: PUSH
12151: LD_INT 37
12153: PUSH
12154: EMPTY
12155: LIST
12156: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12157: LD_ADDR_LOC 22
12161: PUSH
12162: EMPTY
12163: ST_TO_ADDR
// Banned_Chassis := [ ] ;
12164: LD_ADDR_LOC 23
12168: PUSH
12169: EMPTY
12170: ST_TO_ADDR
// Banned_Controls := [ ] ;
12171: LD_ADDR_LOC 24
12175: PUSH
12176: EMPTY
12177: ST_TO_ADDR
// Banned_Engines := [ ] ;
12178: LD_ADDR_LOC 25
12182: PUSH
12183: EMPTY
12184: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
12185: LD_ADDR_LOC 20
12189: PUSH
12190: LD_INT 31
12192: PUSH
12193: LD_INT 32
12195: PUSH
12196: LD_INT 33
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: EMPTY
12205: LIST
12206: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
12207: LD_ADDR_LOC 21
12211: PUSH
12212: LD_INT 10
12214: PUSH
12215: EMPTY
12216: LIST
12217: ST_TO_ADDR
// end ; 8 :
12218: GO 12629
12220: LD_INT 8
12222: DOUBLE
12223: EQUAL
12224: IFTRUE 12228
12226: GO 12628
12228: POP
// begin def_base_level := 0 ;
12229: LD_ADDR_EXP 44
12233: PUSH
12234: LD_INT 0
12236: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
12237: LD_ADDR_EXP 45
12241: PUSH
12242: LD_INT 0
12244: PPUSH
12245: LD_INT 1
12247: PPUSH
12248: CALL_OW 12
12252: ST_TO_ADDR
// def_skill_level := 0 ;
12253: LD_ADDR_EXP 46
12257: PUSH
12258: LD_INT 0
12260: ST_TO_ADDR
// def_starting_resources := 2 ;
12261: LD_ADDR_EXP 47
12265: PUSH
12266: LD_INT 2
12268: ST_TO_ADDR
// def_shipments_density := 1 ;
12269: LD_ADDR_EXP 48
12273: PUSH
12274: LD_INT 1
12276: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
12277: LD_ADDR_EXP 49
12281: PUSH
12282: LD_INT 0
12284: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
12285: LD_ADDR_EXP 50
12289: PUSH
12290: LD_INT 0
12292: ST_TO_ADDR
// def_shared_vision := 1 ;
12293: LD_ADDR_EXP 51
12297: PUSH
12298: LD_INT 1
12300: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
12301: LD_ADDR_EXP 52
12305: PUSH
12306: LD_INT 0
12308: PPUSH
12309: LD_INT 2
12311: PPUSH
12312: CALL_OW 12
12316: ST_TO_ADDR
// def_siberite_detection := 0 ;
12317: LD_ADDR_EXP 53
12321: PUSH
12322: LD_INT 0
12324: ST_TO_ADDR
// def_people_respawning := 0 ;
12325: LD_ADDR_EXP 54
12329: PUSH
12330: LD_INT 0
12332: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
12333: LD_ADDR_EXP 55
12337: PUSH
12338: LD_INT 2
12340: ST_TO_ADDR
// def_siberite_bomb := 0 ;
12341: LD_ADDR_EXP 56
12345: PUSH
12346: LD_INT 0
12348: ST_TO_ADDR
// def_builduptime := 0 ;
12349: LD_ADDR_EXP 57
12353: PUSH
12354: LD_INT 0
12356: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
12357: LD_ADDR_VAR 0 2
12361: PUSH
12362: LD_INT 23
12364: PUSH
12365: LD_INT 20
12367: PUSH
12368: LD_INT 40
12370: PUSH
12371: LD_INT 47
12373: PUSH
12374: LD_INT 46
12376: PUSH
12377: LD_INT 39
12379: PUSH
12380: LD_INT 71
12382: PUSH
12383: LD_INT 34
12385: PUSH
12386: LD_INT 41
12388: PUSH
12389: LD_INT 44
12391: PUSH
12392: LD_INT 17
12394: PUSH
12395: LD_INT 16
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
12412: LD_ADDR_VAR 0 3
12416: PUSH
12417: LD_INT 37
12419: PUSH
12420: LD_INT 5
12422: PUSH
12423: LD_INT 13
12425: PUSH
12426: LD_INT 34
12428: PUSH
12429: LD_INT 12
12431: PUSH
12432: LD_INT 15
12434: PUSH
12435: LD_INT 11
12437: PUSH
12438: LD_INT 14
12440: PUSH
12441: LD_INT 29
12443: PUSH
12444: LD_INT 30
12446: PUSH
12447: LD_INT 28
12449: PUSH
12450: LD_INT 24
12452: PUSH
12453: LD_INT 25
12455: PUSH
12456: LD_INT 20
12458: PUSH
12459: LD_INT 21
12461: PUSH
12462: LD_INT 22
12464: PUSH
12465: LD_INT 36
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: ST_TO_ADDR
// Banned_Weapons := [ ] ;
12487: LD_ADDR_LOC 22
12491: PUSH
12492: EMPTY
12493: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
12494: LD_ADDR_LOC 23
12498: PUSH
12499: LD_INT 14
12501: PUSH
12502: EMPTY
12503: LIST
12504: ST_TO_ADDR
// Banned_Controls := [ ] ;
12505: LD_ADDR_LOC 24
12509: PUSH
12510: EMPTY
12511: ST_TO_ADDR
// Banned_Engines := [ ] ;
12512: LD_ADDR_LOC 25
12516: PUSH
12517: EMPTY
12518: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
12519: LD_ADDR_LOC 20
12523: PUSH
12524: LD_INT 31
12526: PUSH
12527: LD_INT 32
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 4
12536: PUSH
12537: EMPTY
12538: LIST
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
12544: LD_ADDR_LOC 21
12548: PUSH
12549: LD_INT 2
12551: PUSH
12552: LD_INT 1
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: ST_TO_ADDR
// for i := 1 to 8 do
12559: LD_ADDR_VAR 0 4
12563: PUSH
12564: DOUBLE
12565: LD_INT 1
12567: DEC
12568: ST_TO_ADDR
12569: LD_INT 8
12571: PUSH
12572: FOR_TO
12573: IFFALSE 12624
// if ( Side_Nations [ i ] = 3 ) then
12575: LD_EXP 20
12579: PUSH
12580: LD_VAR 0 4
12584: ARRAY
12585: PUSH
12586: LD_INT 3
12588: EQUAL
12589: IFFALSE 12622
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
12591: LD_ADDR_EXP 20
12595: PUSH
12596: LD_EXP 20
12600: PPUSH
12601: LD_VAR 0 4
12605: PPUSH
12606: LD_INT 1
12608: PPUSH
12609: LD_INT 2
12611: PPUSH
12612: CALL_OW 12
12616: PPUSH
12617: CALL_OW 1
12621: ST_TO_ADDR
12622: GO 12572
12624: POP
12625: POP
// end ; end ;
12626: GO 12629
12628: POP
// for i := 1 to 8 do
12629: LD_ADDR_VAR 0 4
12633: PUSH
12634: DOUBLE
12635: LD_INT 1
12637: DEC
12638: ST_TO_ADDR
12639: LD_INT 8
12641: PUSH
12642: FOR_TO
12643: IFFALSE 12727
// if Side_Positions [ i ] then
12645: LD_EXP 19
12649: PUSH
12650: LD_VAR 0 4
12654: ARRAY
12655: IFFALSE 12725
// begin for j in Unavailable_Techs do
12657: LD_ADDR_VAR 0 5
12661: PUSH
12662: LD_VAR 0 2
12666: PUSH
12667: FOR_IN
12668: IFFALSE 12689
// SetTech ( j , i , 0 ) ;
12670: LD_VAR 0 5
12674: PPUSH
12675: LD_VAR 0 4
12679: PPUSH
12680: LD_INT 0
12682: PPUSH
12683: CALL_OW 322
12687: GO 12667
12689: POP
12690: POP
// for j in Unavailable_Builds do
12691: LD_ADDR_VAR 0 5
12695: PUSH
12696: LD_VAR 0 3
12700: PUSH
12701: FOR_IN
12702: IFFALSE 12723
// SetRestrict ( j , i , 0 ) ;
12704: LD_VAR 0 5
12708: PPUSH
12709: LD_VAR 0 4
12713: PPUSH
12714: LD_INT 0
12716: PPUSH
12717: CALL_OW 324
12721: GO 12701
12723: POP
12724: POP
// end ;
12725: GO 12642
12727: POP
12728: POP
// end ;
12729: LD_VAR 0 1
12733: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
12734: LD_INT 0
12736: PPUSH
12737: PPUSH
12738: PPUSH
12739: PPUSH
12740: PPUSH
12741: PPUSH
12742: PPUSH
// for i := 1 to Restricted_Builds do
12743: LD_ADDR_VAR 0 2
12747: PUSH
12748: DOUBLE
12749: LD_INT 1
12751: DEC
12752: ST_TO_ADDR
12753: LD_LOC 20
12757: PUSH
12758: FOR_TO
12759: IFFALSE 13069
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
12761: LD_LOC 20
12765: PUSH
12766: LD_VAR 0 2
12770: ARRAY
12771: PUSH
12772: LD_INT 1
12774: ARRAY
12775: PUSH
12776: LD_INT 31
12778: DOUBLE
12779: EQUAL
12780: IFTRUE 12796
12782: LD_INT 32
12784: DOUBLE
12785: EQUAL
12786: IFTRUE 12796
12788: LD_INT 33
12790: DOUBLE
12791: EQUAL
12792: IFTRUE 12796
12794: GO 12807
12796: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
12797: LD_ADDR_VAR 0 6
12801: PUSH
12802: LD_STRING #Turrets
12804: ST_TO_ADDR
12805: GO 12852
12807: LD_INT 4
12809: DOUBLE
12810: EQUAL
12811: IFTRUE 12821
12813: LD_INT 5
12815: DOUBLE
12816: EQUAL
12817: IFTRUE 12821
12819: GO 12832
12821: POP
// btype := #Armouries ; b_Behemoth :
12822: LD_ADDR_VAR 0 6
12826: PUSH
12827: LD_STRING #Armouries
12829: ST_TO_ADDR
12830: GO 12852
12832: LD_INT 37
12834: DOUBLE
12835: EQUAL
12836: IFTRUE 12840
12838: GO 12851
12840: POP
// btype := #Behemoths ; end ;
12841: LD_ADDR_VAR 0 6
12845: PUSH
12846: LD_STRING #Behemoths
12848: ST_TO_ADDR
12849: GO 12852
12851: POP
// list := [ ] ;
12852: LD_ADDR_VAR 0 7
12856: PUSH
12857: EMPTY
12858: ST_TO_ADDR
// for j := 1 to 8 do
12859: LD_ADDR_VAR 0 3
12863: PUSH
12864: DOUBLE
12865: LD_INT 1
12867: DEC
12868: ST_TO_ADDR
12869: LD_INT 8
12871: PUSH
12872: FOR_TO
12873: IFFALSE 12966
// if Side_Positions [ j ] then
12875: LD_EXP 19
12879: PUSH
12880: LD_VAR 0 3
12884: ARRAY
12885: IFFALSE 12964
// begin amount := 0 ;
12887: LD_ADDR_VAR 0 5
12891: PUSH
12892: LD_INT 0
12894: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
12895: LD_ADDR_VAR 0 4
12899: PUSH
12900: LD_LOC 20
12904: PUSH
12905: LD_VAR 0 2
12909: ARRAY
12910: PUSH
12911: FOR_IN
12912: IFFALSE 12960
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
12914: LD_ADDR_VAR 0 5
12918: PUSH
12919: LD_VAR 0 5
12923: PUSH
12924: LD_INT 22
12926: PUSH
12927: LD_VAR 0 3
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: LD_INT 30
12938: PUSH
12939: LD_VAR 0 4
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PPUSH
12952: CALL_OW 69
12956: PLUS
12957: ST_TO_ADDR
12958: GO 12911
12960: POP
12961: POP
// break ;
12962: GO 12966
// end ;
12964: GO 12872
12966: POP
12967: POP
// list := [ ] ;
12968: LD_ADDR_VAR 0 7
12972: PUSH
12973: EMPTY
12974: ST_TO_ADDR
// for j := 1 to 8 do
12975: LD_ADDR_VAR 0 3
12979: PUSH
12980: DOUBLE
12981: LD_INT 1
12983: DEC
12984: ST_TO_ADDR
12985: LD_INT 8
12987: PUSH
12988: FOR_TO
12989: IFFALSE 13009
// list := list ^ amount ;
12991: LD_ADDR_VAR 0 7
12995: PUSH
12996: LD_VAR 0 7
13000: PUSH
13001: LD_VAR 0 5
13005: ADD
13006: ST_TO_ADDR
13007: GO 12988
13009: POP
13010: POP
// Already_Built := Already_Built ^ [ list ] ;
13011: LD_ADDR_LOC 26
13015: PUSH
13016: LD_LOC 26
13020: PUSH
13021: LD_VAR 0 7
13025: PUSH
13026: EMPTY
13027: LIST
13028: ADD
13029: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
13030: LD_ADDR_LOC 27
13034: PUSH
13035: LD_LOC 27
13039: PUSH
13040: LD_VAR 0 6
13044: PUSH
13045: LD_VAR 0 5
13049: PUSH
13050: LD_LOC 21
13054: PUSH
13055: LD_VAR 0 2
13059: ARRAY
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: LIST
13065: ADD
13066: ST_TO_ADDR
// end ;
13067: GO 12758
13069: POP
13070: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13071: LD_ADDR_LOC 28
13075: PUSH
13076: LD_INT 0
13078: PUSH
13079: LD_INT 0
13081: PUSH
13082: LD_INT 0
13084: PUSH
13085: LD_INT 0
13087: PUSH
13088: LD_INT 0
13090: PUSH
13091: LD_INT 0
13093: PUSH
13094: LD_INT 0
13096: PUSH
13097: LD_INT 0
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: ST_TO_ADDR
// if Limits_Info then
13110: LD_LOC 27
13114: IFFALSE 13130
// Limits_Info := #Limits ^ Limits_Info ;
13116: LD_ADDR_LOC 27
13120: PUSH
13121: LD_STRING #Limits
13123: PUSH
13124: LD_LOC 27
13128: ADD
13129: ST_TO_ADDR
// end ;
13130: LD_VAR 0 1
13134: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
13135: LD_INT 0
13137: PPUSH
13138: PPUSH
13139: PPUSH
13140: PPUSH
// for i := 1 to Restricted_Builds do
13141: LD_ADDR_VAR 0 7
13145: PUSH
13146: DOUBLE
13147: LD_INT 1
13149: DEC
13150: ST_TO_ADDR
13151: LD_LOC 20
13155: PUSH
13156: FOR_TO
13157: IFFALSE 13580
// if BType in Restricted_Builds [ i ] then
13159: LD_VAR 0 2
13163: PUSH
13164: LD_LOC 20
13168: PUSH
13169: LD_VAR 0 7
13173: ARRAY
13174: IN
13175: IFFALSE 13578
// begin if old_side then
13177: LD_VAR 0 4
13181: IFFALSE 13307
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
13183: LD_LOC 26
13187: PUSH
13188: LD_VAR 0 7
13192: ARRAY
13193: PUSH
13194: LD_VAR 0 3
13198: ARRAY
13199: PUSH
13200: LD_VAR 0 5
13204: PLUS
13205: PUSH
13206: LD_LOC 21
13210: PUSH
13211: LD_VAR 0 7
13215: ARRAY
13216: GREATER
13217: IFFALSE 13243
// begin SetSide ( un , old_side ) ;
13219: LD_VAR 0 1
13223: PPUSH
13224: LD_VAR 0 4
13228: PPUSH
13229: CALL_OW 235
// count := 0 ;
13233: LD_ADDR_VAR 0 5
13237: PUSH
13238: LD_INT 0
13240: ST_TO_ADDR
// end else
13241: GO 13307
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
13243: LD_ADDR_LOC 26
13247: PUSH
13248: LD_LOC 26
13252: PPUSH
13253: LD_VAR 0 7
13257: PPUSH
13258: LD_LOC 26
13262: PUSH
13263: LD_VAR 0 7
13267: ARRAY
13268: PPUSH
13269: LD_VAR 0 4
13273: PPUSH
13274: LD_LOC 26
13278: PUSH
13279: LD_VAR 0 7
13283: ARRAY
13284: PUSH
13285: LD_VAR 0 4
13289: ARRAY
13290: PUSH
13291: LD_VAR 0 5
13295: MINUS
13296: PPUSH
13297: CALL_OW 1
13301: PPUSH
13302: CALL_OW 1
13306: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
13307: LD_ADDR_LOC 26
13311: PUSH
13312: LD_LOC 26
13316: PPUSH
13317: LD_VAR 0 7
13321: PPUSH
13322: LD_LOC 26
13326: PUSH
13327: LD_VAR 0 7
13331: ARRAY
13332: PPUSH
13333: LD_VAR 0 3
13337: PPUSH
13338: LD_LOC 26
13342: PUSH
13343: LD_VAR 0 7
13347: ARRAY
13348: PUSH
13349: LD_VAR 0 3
13353: ARRAY
13354: PUSH
13355: LD_VAR 0 5
13359: PLUS
13360: PPUSH
13361: CALL_OW 1
13365: PPUSH
13366: CALL_OW 1
13370: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
13371: LD_VAR 0 5
13375: PUSH
13376: LD_INT 0
13378: NONEQUAL
13379: PUSH
13380: LD_VAR 0 3
13384: PUSH
13385: LD_OWVAR 2
13389: EQUAL
13390: AND
13391: IFFALSE 13434
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
13393: LD_ADDR_LOC 27
13397: PUSH
13398: LD_LOC 27
13402: PPUSH
13403: LD_INT 3
13405: PUSH
13406: LD_VAR 0 7
13410: MUL
13411: PPUSH
13412: LD_LOC 26
13416: PUSH
13417: LD_VAR 0 7
13421: ARRAY
13422: PUSH
13423: LD_VAR 0 3
13427: ARRAY
13428: PPUSH
13429: CALL_OW 1
13433: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
13434: LD_LOC 26
13438: PUSH
13439: LD_VAR 0 7
13443: ARRAY
13444: PUSH
13445: LD_VAR 0 3
13449: ARRAY
13450: PUSH
13451: LD_LOC 21
13455: PUSH
13456: LD_VAR 0 7
13460: ARRAY
13461: GREATER
13462: IFFALSE 13489
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
13464: LD_ADDR_LOC 28
13468: PUSH
13469: LD_LOC 28
13473: PPUSH
13474: LD_VAR 0 3
13478: PPUSH
13479: LD_INT 1
13481: PPUSH
13482: CALL_OW 1
13486: ST_TO_ADDR
// end else
13487: GO 13576
// begin for j := 1 to Restricted_Builds do
13489: LD_ADDR_VAR 0 8
13493: PUSH
13494: DOUBLE
13495: LD_INT 1
13497: DEC
13498: ST_TO_ADDR
13499: LD_LOC 20
13503: PUSH
13504: FOR_TO
13505: IFFALSE 13549
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
13507: LD_LOC 26
13511: PUSH
13512: LD_VAR 0 8
13516: ARRAY
13517: PUSH
13518: LD_VAR 0 3
13522: ARRAY
13523: PUSH
13524: LD_LOC 21
13528: PUSH
13529: LD_VAR 0 8
13533: ARRAY
13534: GREATER
13535: IFFALSE 13547
// begin Is_Cheater := true ;
13537: LD_ADDR_VAR 0 9
13541: PUSH
13542: LD_INT 1
13544: ST_TO_ADDR
// break ;
13545: GO 13549
// end ;
13547: GO 13504
13549: POP
13550: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
13551: LD_ADDR_LOC 28
13555: PUSH
13556: LD_LOC 28
13560: PPUSH
13561: LD_VAR 0 3
13565: PPUSH
13566: LD_VAR 0 9
13570: PPUSH
13571: CALL_OW 1
13575: ST_TO_ADDR
// end ; break ;
13576: GO 13580
// end ;
13578: GO 13156
13580: POP
13581: POP
// end ;
13582: LD_VAR 0 6
13586: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
13587: LD_VAR 0 5
13591: PUSH
13592: LD_LOC 22
13596: IN
13597: PUSH
13598: LD_VAR 0 2
13602: PUSH
13603: LD_LOC 23
13607: IN
13608: OR
13609: PUSH
13610: LD_VAR 0 4
13614: PUSH
13615: LD_LOC 24
13619: IN
13620: OR
13621: PUSH
13622: LD_VAR 0 3
13626: PUSH
13627: LD_LOC 25
13631: IN
13632: OR
13633: IFFALSE 13644
// ComCancel ( factory ) ;
13635: LD_VAR 0 1
13639: PPUSH
13640: CALL_OW 127
// end ;
13644: PPOPN 5
13646: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
13647: LD_VAR 0 2
13651: PUSH
13652: LD_LOC 22
13656: IN
13657: IFFALSE 13668
// ComCancel ( building ) ;
13659: LD_VAR 0 1
13663: PPUSH
13664: CALL_OW 127
// end ; end_of_file
13668: PPOPN 2
13670: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
13671: LD_INT 0
13673: PPUSH
13674: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
13675: LD_ADDR_VAR 0 2
13679: PUSH
13680: LD_STRING #Multi1x1-Time
13682: PUSH
13683: LD_OWVAR 1
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: ST_TO_ADDR
// if WaitServerStrings then
13692: LD_EXP 60
13696: IFFALSE 13714
// AllStrings = AllStrings ^ WaitServerStrings ;
13698: LD_ADDR_VAR 0 2
13702: PUSH
13703: LD_VAR 0 2
13707: PUSH
13708: LD_EXP 60
13712: ADD
13713: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
13714: LD_INT 0
13716: PUSH
13717: LD_EXP 16
13721: PUSH
13722: LD_OWVAR 1
13726: MINUS
13727: LESSEQUAL
13728: IFFALSE 13759
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
13730: LD_ADDR_VAR 0 2
13734: PUSH
13735: LD_VAR 0 2
13739: PUSH
13740: LD_STRING #allowedsibbomb
13742: PUSH
13743: LD_EXP 16
13747: PUSH
13748: LD_OWVAR 1
13752: MINUS
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: ADD
13758: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
13759: LD_INT 0
13761: PUSH
13762: LD_EXP 14
13766: PUSH
13767: LD_OWVAR 1
13771: MINUS
13772: LESSEQUAL
13773: IFFALSE 13804
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
13775: LD_ADDR_VAR 0 2
13779: PUSH
13780: LD_VAR 0 2
13784: PUSH
13785: LD_STRING #builduptime
13787: PUSH
13788: LD_EXP 14
13792: PUSH
13793: LD_OWVAR 1
13797: MINUS
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: ADD
13803: ST_TO_ADDR
// if ( ExtraStrings ) then
13804: LD_EXP 59
13808: IFFALSE 13830
// AllStrings := AllStrings ^  ^ ExtraStrings ;
13810: LD_ADDR_VAR 0 2
13814: PUSH
13815: LD_VAR 0 2
13819: PUSH
13820: LD_STRING 
13822: ADD
13823: PUSH
13824: LD_EXP 59
13828: ADD
13829: ST_TO_ADDR
// if ( LimitsStrings ) then
13830: CALL 10524 0 0
13834: IFFALSE 13856
// AllStrings := AllStrings ^  ^ LimitsStrings ;
13836: LD_ADDR_VAR 0 2
13840: PUSH
13841: LD_VAR 0 2
13845: PUSH
13846: LD_STRING 
13848: ADD
13849: PUSH
13850: CALL 10524 0 0
13854: ADD
13855: ST_TO_ADDR
// if debug_strings then
13856: LD_OWVAR 48
13860: IFFALSE 13882
// AllStrings := AllStrings ^  ^ debug_strings ;
13862: LD_ADDR_VAR 0 2
13866: PUSH
13867: LD_VAR 0 2
13871: PUSH
13872: LD_STRING 
13874: ADD
13875: PUSH
13876: LD_OWVAR 48
13880: ADD
13881: ST_TO_ADDR
// Display_Strings := AllStrings ;
13882: LD_ADDR_OWVAR 47
13886: PUSH
13887: LD_VAR 0 2
13891: ST_TO_ADDR
// end ;
13892: LD_VAR 0 1
13896: RET
// every 0 0$1 do
13897: GO 13899
13899: DISABLE
// begin ShowTimer ;
13900: CALL 13671 0 0
// enable ;
13904: ENABLE
// end ; end_of_file
13905: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
13906: LD_INT 0
13908: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
13909: LD_VAR 0 1
13913: PPUSH
13914: CALL_OW 255
13918: PUSH
13919: LD_VAR 0 4
13923: EQUAL
13924: IFFALSE 13943
// begin SetAchievement ( ACH_RAD ) ;
13926: LD_STRING ACH_RAD
13928: PPUSH
13929: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
13933: LD_STRING ACH_NL
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: CALL_OW 564
// end end ;
13943: LD_VAR 0 5
13947: RET
// export function SA_Win ( side ) ; begin
13948: LD_INT 0
13950: PPUSH
// case side of 1 :
13951: LD_VAR 0 1
13955: PUSH
13956: LD_INT 1
13958: DOUBLE
13959: EQUAL
13960: IFTRUE 13964
13962: GO 13977
13964: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
13965: LD_STRING ACH_AH
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: CALL_OW 564
13975: GO 14140
13977: LD_INT 2
13979: DOUBLE
13980: EQUAL
13981: IFTRUE 13985
13983: GO 13998
13985: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
13986: LD_STRING ACH_E
13988: PPUSH
13989: LD_INT 1
13991: PPUSH
13992: CALL_OW 564
13996: GO 14140
13998: LD_INT 3
14000: DOUBLE
14001: EQUAL
14002: IFTRUE 14006
14004: GO 14019
14006: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
14007: LD_STRING ACH_OOL
14009: PPUSH
14010: LD_INT 1
14012: PPUSH
14013: CALL_OW 564
14017: GO 14140
14019: LD_INT 1
14021: PUSH
14022: LD_INT 2
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: DOUBLE
14029: EQUAL
14030: IFTRUE 14034
14032: GO 14059
14034: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14035: LD_STRING ACH_AH
14037: PPUSH
14038: LD_REAL  5.00000000000000E-0001
14041: PPUSH
14042: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14046: LD_STRING ACH_E
14048: PPUSH
14049: LD_REAL  5.00000000000000E-0001
14052: PPUSH
14053: CALL_OW 564
// end ; [ 2 , 3 ] :
14057: GO 14140
14059: LD_INT 2
14061: PUSH
14062: LD_INT 3
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: DOUBLE
14069: EQUAL
14070: IFTRUE 14074
14072: GO 14099
14074: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
14075: LD_STRING ACH_OOL
14077: PPUSH
14078: LD_REAL  5.00000000000000E-0001
14081: PPUSH
14082: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
14086: LD_STRING ACH_E
14088: PPUSH
14089: LD_REAL  5.00000000000000E-0001
14092: PPUSH
14093: CALL_OW 564
// end ; [ 3 , 1 ] :
14097: GO 14140
14099: LD_INT 3
14101: PUSH
14102: LD_INT 1
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: DOUBLE
14109: EQUAL
14110: IFTRUE 14114
14112: GO 14139
14114: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
14115: LD_STRING ACH_AH
14117: PPUSH
14118: LD_REAL  5.00000000000000E-0001
14121: PPUSH
14122: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
14126: LD_STRING ACH_OOL
14128: PPUSH
14129: LD_REAL  5.00000000000000E-0001
14132: PPUSH
14133: CALL_OW 564
// end ; end ;
14137: GO 14140
14139: POP
// end ; end_of_file
14140: LD_VAR 0 2
14144: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
14145: LD_INT 0
14147: PPUSH
14148: PPUSH
// enable ( 98 ) ;
14149: LD_INT 98
14151: ENABLE_MARKED
// GameEnded = false ;
14152: LD_ADDR_LOC 30
14156: PUSH
14157: LD_INT 0
14159: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14160: LD_ADDR_LOC 29
14164: PUSH
14165: LD_INT 0
14167: PUSH
14168: LD_INT 0
14170: PUSH
14171: LD_INT 0
14173: PUSH
14174: LD_INT 0
14176: PUSH
14177: LD_INT 0
14179: PUSH
14180: LD_INT 0
14182: PUSH
14183: LD_INT 0
14185: PUSH
14186: LD_INT 0
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: ST_TO_ADDR
// unfoged = false ;
14199: LD_ADDR_LOC 31
14203: PUSH
14204: LD_INT 0
14206: ST_TO_ADDR
// for i = 1 to side_positions do
14207: LD_ADDR_VAR 0 2
14211: PUSH
14212: DOUBLE
14213: LD_INT 1
14215: DEC
14216: ST_TO_ADDR
14217: LD_EXP 19
14221: PUSH
14222: FOR_TO
14223: IFFALSE 14263
// if not side_positions [ i ] then
14225: LD_EXP 19
14229: PUSH
14230: LD_VAR 0 2
14234: ARRAY
14235: NOT
14236: IFFALSE 14261
// defaited = replace ( defaited , i , true ) ;
14238: LD_ADDR_LOC 29
14242: PUSH
14243: LD_LOC 29
14247: PPUSH
14248: LD_VAR 0 2
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: CALL_OW 1
14260: ST_TO_ADDR
14261: GO 14222
14263: POP
14264: POP
// end ;
14265: LD_VAR 0 1
14269: RET
// function CanWinLoose ; begin
14270: LD_INT 0
14272: PPUSH
// Result := true ;
14273: LD_ADDR_VAR 0 1
14277: PUSH
14278: LD_INT 1
14280: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
14281: CALL_OW 518
14285: PUSH
14286: CALL_OW 519
14290: PUSH
14291: LD_INT 0
14293: GREATER
14294: AND
14295: IFFALSE 14305
// Result := false ;
14297: LD_ADDR_VAR 0 1
14301: PUSH
14302: LD_INT 0
14304: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14305: CALL_OW 531
14309: PUSH
14310: CALL_OW 519
14314: PUSH
14315: LD_INT 1
14317: GREATER
14318: AND
14319: IFFALSE 14329
// Result := false ;
14321: LD_ADDR_VAR 0 1
14325: PUSH
14326: LD_INT 0
14328: ST_TO_ADDR
// end ;
14329: LD_VAR 0 1
14333: RET
// export function HasPower ( i ) ; var k , h ; begin
14334: LD_INT 0
14336: PPUSH
14337: PPUSH
14338: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
14339: LD_VAR 0 1
14343: PPUSH
14344: CALL_OW 108
14348: NOT
14349: PUSH
14350: LD_EXP 22
14354: PUSH
14355: LD_VAR 0 1
14359: ARRAY
14360: NOT
14361: AND
14362: PUSH
14363: LD_OWVAR 4
14367: AND
14368: IFFALSE 14380
// begin result = false ;
14370: LD_ADDR_VAR 0 2
14374: PUSH
14375: LD_INT 0
14377: ST_TO_ADDR
// end else
14378: GO 14675
// case def_win_rules of 0 :
14380: LD_EXP 32
14384: PUSH
14385: LD_INT 0
14387: DOUBLE
14388: EQUAL
14389: IFTRUE 14393
14391: GO 14556
14393: POP
// if def_people_respawning then
14394: LD_EXP 54
14398: IFFALSE 14489
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
14400: LD_ADDR_VAR 0 2
14404: PUSH
14405: LD_INT 22
14407: PUSH
14408: LD_VAR 0 1
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 2
14419: PUSH
14420: LD_INT 21
14422: PUSH
14423: LD_INT 1
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 33
14432: PUSH
14433: LD_INT 3
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 33
14442: PUSH
14443: LD_INT 5
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: LD_INT 30
14452: PUSH
14453: LD_INT 0
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PUSH
14460: LD_INT 30
14462: PUSH
14463: LD_INT 1
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PPUSH
14482: CALL_OW 69
14486: ST_TO_ADDR
14487: GO 14554
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
14489: LD_ADDR_VAR 0 2
14493: PUSH
14494: LD_INT 22
14496: PUSH
14497: LD_VAR 0 1
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 2
14508: PUSH
14509: LD_INT 21
14511: PUSH
14512: LD_INT 1
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 33
14521: PUSH
14522: LD_INT 3
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 33
14531: PUSH
14532: LD_INT 5
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PPUSH
14549: CALL_OW 69
14553: ST_TO_ADDR
14554: GO 14675
14556: LD_INT 1
14558: DOUBLE
14559: EQUAL
14560: IFTRUE 14564
14562: GO 14603
14564: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
14565: LD_ADDR_VAR 0 2
14569: PUSH
14570: LD_INT 22
14572: PUSH
14573: LD_VAR 0 1
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 21
14584: PUSH
14585: LD_INT 1
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PPUSH
14596: CALL_OW 69
14600: ST_TO_ADDR
14601: GO 14675
14603: LD_INT 2
14605: DOUBLE
14606: EQUAL
14607: IFTRUE 14611
14609: GO 14674
14611: POP
// begin h = false ;
14612: LD_ADDR_VAR 0 4
14616: PUSH
14617: LD_INT 0
14619: ST_TO_ADDR
// for k in heroes [ i ] do
14620: LD_ADDR_VAR 0 3
14624: PUSH
14625: LD_EXP 33
14629: PUSH
14630: LD_VAR 0 1
14634: ARRAY
14635: PUSH
14636: FOR_IN
14637: IFFALSE 14660
// if IsLive ( k ) then
14639: LD_VAR 0 3
14643: PPUSH
14644: CALL_OW 300
14648: IFFALSE 14658
// h = true ;
14650: LD_ADDR_VAR 0 4
14654: PUSH
14655: LD_INT 1
14657: ST_TO_ADDR
14658: GO 14636
14660: POP
14661: POP
// Result := h ;
14662: LD_ADDR_VAR 0 2
14666: PUSH
14667: LD_VAR 0 4
14671: ST_TO_ADDR
// end ; end ;
14672: GO 14675
14674: POP
// end ;
14675: LD_VAR 0 2
14679: RET
// function AlliedSides ( i , j ) ; begin
14680: LD_INT 0
14682: PPUSH
// Result := false ;
14683: LD_ADDR_VAR 0 3
14687: PUSH
14688: LD_INT 0
14690: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_VAR 0 2
14700: PPUSH
14701: CALL_OW 81
14705: PUSH
14706: LD_INT 1
14708: EQUAL
14709: PUSH
14710: LD_VAR 0 2
14714: PPUSH
14715: LD_VAR 0 1
14719: PPUSH
14720: CALL_OW 81
14724: PUSH
14725: LD_INT 1
14727: EQUAL
14728: AND
14729: PUSH
14730: LD_VAR 0 1
14734: PPUSH
14735: CALL_OW 83
14739: AND
14740: PUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: CALL_OW 83
14750: AND
14751: IFFALSE 14761
// Result := true ;
14753: LD_ADDR_VAR 0 3
14757: PUSH
14758: LD_INT 1
14760: ST_TO_ADDR
// end ;
14761: LD_VAR 0 3
14765: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
14766: CALL 14270 0 0
14770: PUSH
14771: LD_LOC 30
14775: NOT
14776: AND
14777: IFFALSE 14793
14779: GO 14781
14781: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
14782: LD_ADDR_EXP 60
14786: PUSH
14787: LD_STRING #Player-Ended
14789: PUSH
14790: EMPTY
14791: LIST
14792: ST_TO_ADDR
14793: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
14794: CALL 14270 0 0
14798: PUSH
14799: LD_LOC 30
14803: AND
14804: IFFALSE 14813
14806: GO 14808
14808: DISABLE
// YouLostInMultiplayer ;
14809: CALL_OW 107
14813: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
14814: CALL 14270 0 0
14818: NOT
14819: PUSH
14820: CALL_OW 531
14824: NOT
14825: AND
14826: IFFALSE 14842
14828: GO 14830
14830: DISABLE
// WaitServerStrings = [ #server-wait ] ;
14831: LD_ADDR_EXP 60
14835: PUSH
14836: LD_STRING #server-wait
14838: PUSH
14839: EMPTY
14840: LIST
14841: ST_TO_ADDR
14842: END
// every 100 trigger IAmSpec do
14843: CALL_OW 531
14847: IFFALSE 14863
14849: GO 14851
14851: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
14852: LD_ADDR_EXP 60
14856: PUSH
14857: LD_STRING #Player-IAmSpec
14859: PUSH
14860: EMPTY
14861: LIST
14862: ST_TO_ADDR
14863: END
// every 100 trigger GameEnded and IAmSpec do
14864: LD_LOC 30
14868: PUSH
14869: CALL_OW 531
14873: AND
14874: IFFALSE 14883
14876: GO 14878
14878: DISABLE
// YouLostInMultiplayer ;
14879: CALL_OW 107
14883: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
14884: CALL 14270 0 0
14888: PUSH
14889: LD_LOC 30
14893: NOT
14894: AND
14895: IFFALSE 14911
14897: GO 14899
14899: DISABLE
// WaitServerStrings = [ $player-win ] ;
14900: LD_ADDR_EXP 60
14904: PUSH
14905: LD_STRING $player-win
14907: PUSH
14908: EMPTY
14909: LIST
14910: ST_TO_ADDR
14911: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
14912: CALL 14270 0 0
14916: PUSH
14917: LD_LOC 30
14921: AND
14922: IFFALSE 14946
14924: GO 14926
14926: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
14927: LD_EXP 20
14931: PUSH
14932: LD_OWVAR 2
14936: ARRAY
14937: PPUSH
14938: CALL 13948 0 1
// YouWinInMultiplayer ;
14942: CALL_OW 106
// end ;
14946: END
// every 100 trigger isEditor marked 401 do
14947: LD_OWVAR 84
14951: IFFALSE 14967
14953: GO 14955
14955: DISABLE
// Debug_Strings = [ You won ] ;
14956: LD_ADDR_OWVAR 48
14960: PUSH
14961: LD_STRING You won
14963: PUSH
14964: EMPTY
14965: LIST
14966: ST_TO_ADDR
14967: END
// every 100 trigger isEditor marked 400 do
14968: LD_OWVAR 84
14972: IFFALSE 14988
14974: GO 14976
14976: DISABLE
// Debug_Strings = [ You loss ] ;
14977: LD_ADDR_OWVAR 48
14981: PUSH
14982: LD_STRING You loss
14984: PUSH
14985: EMPTY
14986: LIST
14987: ST_TO_ADDR
14988: END
// every 100 marked 98 do var i , un ;
14989: GO 14991
14991: DISABLE
14992: LD_INT 0
14994: PPUSH
14995: PPUSH
// begin for i = 1 to side_positions do
14996: LD_ADDR_VAR 0 1
15000: PUSH
15001: DOUBLE
15002: LD_INT 1
15004: DEC
15005: ST_TO_ADDR
15006: LD_EXP 19
15010: PUSH
15011: FOR_TO
15012: IFFALSE 15135
// if side_positions [ i ] then
15014: LD_EXP 19
15018: PUSH
15019: LD_VAR 0 1
15023: ARRAY
15024: IFFALSE 15133
// if not HasPower ( i ) and not Defaited [ i ] then
15026: LD_VAR 0 1
15030: PPUSH
15031: CALL 14334 0 1
15035: NOT
15036: PUSH
15037: LD_LOC 29
15041: PUSH
15042: LD_VAR 0 1
15046: ARRAY
15047: NOT
15048: AND
15049: IFFALSE 15133
// begin un = filterallunits ( [ f_side , i ] ) ;
15051: LD_ADDR_VAR 0 2
15055: PUSH
15056: LD_INT 22
15058: PUSH
15059: LD_VAR 0 1
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PPUSH
15068: CALL_OW 69
15072: ST_TO_ADDR
// if un then
15073: LD_VAR 0 2
15077: IFFALSE 15091
// SetSide ( un , 0 ) ;
15079: LD_VAR 0 2
15083: PPUSH
15084: LD_INT 0
15086: PPUSH
15087: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
15091: LD_ADDR_LOC 29
15095: PUSH
15096: LD_LOC 29
15100: PPUSH
15101: LD_VAR 0 1
15105: PPUSH
15106: LD_INT 1
15108: PPUSH
15109: CALL_OW 1
15113: ST_TO_ADDR
// if i = your_side then
15114: LD_VAR 0 1
15118: PUSH
15119: LD_OWVAR 2
15123: EQUAL
15124: IFFALSE 15133
// begin Multiplayer_Loose_Message ;
15126: CALL_OW 521
// enable ( 400 ) ;
15130: LD_INT 400
15132: ENABLE_MARKED
// end ; end ;
15133: GO 15011
15135: POP
15136: POP
// if not Unfoged and defaited [ your_side ] then
15137: LD_LOC 31
15141: NOT
15142: PUSH
15143: LD_LOC 29
15147: PUSH
15148: LD_OWVAR 2
15152: ARRAY
15153: AND
15154: IFFALSE 15160
// Unfog ;
15156: CALL 15346 0 0
// DidGameEnd ;
15160: CALL 15175 0 0
// if not GameEnded then
15164: LD_LOC 30
15168: NOT
15169: IFFALSE 15172
// enable ;
15171: ENABLE
// end ;
15172: PPOPN 2
15174: END
// function DidGameEnd ; var i , k , enemy ; begin
15175: LD_INT 0
15177: PPUSH
15178: PPUSH
15179: PPUSH
15180: PPUSH
// enemy = [ ] ;
15181: LD_ADDR_VAR 0 4
15185: PUSH
15186: EMPTY
15187: ST_TO_ADDR
// for i = 1 to side_positions do
15188: LD_ADDR_VAR 0 2
15192: PUSH
15193: DOUBLE
15194: LD_INT 1
15196: DEC
15197: ST_TO_ADDR
15198: LD_EXP 19
15202: PUSH
15203: FOR_TO
15204: IFFALSE 15308
// if not defaited [ i ] then
15206: LD_LOC 29
15210: PUSH
15211: LD_VAR 0 2
15215: ARRAY
15216: NOT
15217: IFFALSE 15306
// for k = 1 to side_positions do
15219: LD_ADDR_VAR 0 3
15223: PUSH
15224: DOUBLE
15225: LD_INT 1
15227: DEC
15228: ST_TO_ADDR
15229: LD_EXP 19
15233: PUSH
15234: FOR_TO
15235: IFFALSE 15304
// if not defaited [ k ] then
15237: LD_LOC 29
15241: PUSH
15242: LD_VAR 0 3
15246: ARRAY
15247: NOT
15248: IFFALSE 15302
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
15250: LD_VAR 0 2
15254: PPUSH
15255: LD_VAR 0 3
15259: PPUSH
15260: CALL_OW 81
15264: PUSH
15265: LD_INT 2
15267: PUSH
15268: LD_INT 0
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: IN
15275: IFFALSE 15302
// enemy = enemy ^ [ i , k ] ;
15277: LD_ADDR_VAR 0 4
15281: PUSH
15282: LD_VAR 0 4
15286: PUSH
15287: LD_VAR 0 2
15291: PUSH
15292: LD_VAR 0 3
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: ADD
15301: ST_TO_ADDR
15302: GO 15234
15304: POP
15305: POP
15306: GO 15203
15308: POP
15309: POP
// if not enemy then
15310: LD_VAR 0 4
15314: NOT
15315: IFFALSE 15341
// begin GameEnded = true ;
15317: LD_ADDR_LOC 30
15321: PUSH
15322: LD_INT 1
15324: ST_TO_ADDR
// if not defaited [ your_side ] then
15325: LD_LOC 29
15329: PUSH
15330: LD_OWVAR 2
15334: ARRAY
15335: NOT
15336: IFFALSE 15341
// enable ( 401 ) ;
15338: LD_INT 401
15340: ENABLE_MARKED
// end ; end ;
15341: LD_VAR 0 1
15345: RET
// function unfog ; var k , friends ; begin
15346: LD_INT 0
15348: PPUSH
15349: PPUSH
15350: PPUSH
// for k = 1 to side_positions do
15351: LD_ADDR_VAR 0 2
15355: PUSH
15356: DOUBLE
15357: LD_INT 1
15359: DEC
15360: ST_TO_ADDR
15361: LD_EXP 19
15365: PUSH
15366: FOR_TO
15367: IFFALSE 15423
// if not defaited [ k ] then
15369: LD_LOC 29
15373: PUSH
15374: LD_VAR 0 2
15378: ARRAY
15379: NOT
15380: IFFALSE 15421
// if GetAttitude ( your_side , k ) in [ att_friend ] then
15382: LD_OWVAR 2
15386: PPUSH
15387: LD_VAR 0 2
15391: PPUSH
15392: CALL_OW 81
15396: PUSH
15397: LD_INT 1
15399: PUSH
15400: EMPTY
15401: LIST
15402: IN
15403: IFFALSE 15421
// friends = friends ^ k ;
15405: LD_ADDR_VAR 0 3
15409: PUSH
15410: LD_VAR 0 3
15414: PUSH
15415: LD_VAR 0 2
15419: ADD
15420: ST_TO_ADDR
15421: GO 15366
15423: POP
15424: POP
// if not friends then
15425: LD_VAR 0 3
15429: NOT
15430: IFFALSE 15447
// begin fogoff ( true ) ;
15432: LD_INT 1
15434: PPUSH
15435: CALL_OW 344
// unfoged = true ;
15439: LD_ADDR_LOC 31
15443: PUSH
15444: LD_INT 1
15446: ST_TO_ADDR
// end ; end ;
15447: LD_VAR 0 1
15451: RET
// export function MakeGameEnd ; begin
15452: LD_INT 0
15454: PPUSH
// fogoff ( true ) ;
15455: LD_INT 1
15457: PPUSH
15458: CALL_OW 344
// unfoged = true ;
15462: LD_ADDR_LOC 31
15466: PUSH
15467: LD_INT 1
15469: ST_TO_ADDR
// wait ( 0 0$5 ) ;
15470: LD_INT 175
15472: PPUSH
15473: CALL_OW 67
// GameEnded = true ;
15477: LD_ADDR_LOC 30
15481: PUSH
15482: LD_INT 1
15484: ST_TO_ADDR
// end ;
15485: LD_VAR 0 1
15489: RET
// export function GetGameEnded ; begin
15490: LD_INT 0
15492: PPUSH
// result = GameEnded ;
15493: LD_ADDR_VAR 0 1
15497: PUSH
15498: LD_LOC 30
15502: ST_TO_ADDR
// end ; end_of_file
15503: LD_VAR 0 1
15507: RET
// export function SetMpTechs ( ) ; var side , i ; begin
15508: LD_INT 0
15510: PPUSH
15511: PPUSH
15512: PPUSH
// for side = 1 to 8 do
15513: LD_ADDR_VAR 0 2
15517: PUSH
15518: DOUBLE
15519: LD_INT 1
15521: DEC
15522: ST_TO_ADDR
15523: LD_INT 8
15525: PUSH
15526: FOR_TO
15527: IFFALSE 15648
// begin for i = 1 to 72 do
15529: LD_ADDR_VAR 0 3
15533: PUSH
15534: DOUBLE
15535: LD_INT 1
15537: DEC
15538: ST_TO_ADDR
15539: LD_INT 72
15541: PUSH
15542: FOR_TO
15543: IFFALSE 15574
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15545: LD_VAR 0 3
15549: PPUSH
15550: LD_VAR 0 2
15554: PPUSH
15555: LD_INT 0
15557: PPUSH
15558: LD_VAR 0 3
15562: PPUSH
15563: CALL_OW 565
15567: PPUSH
15568: CALL_OW 322
15572: GO 15542
15574: POP
15575: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15576: LD_INT 73
15578: PPUSH
15579: LD_VAR 0 2
15583: PPUSH
15584: LD_INT 0
15586: PPUSH
15587: LD_INT 25
15589: PPUSH
15590: CALL_OW 565
15594: PPUSH
15595: CALL_OW 322
// for i = 0 to 40 do
15599: LD_ADDR_VAR 0 3
15603: PUSH
15604: DOUBLE
15605: LD_INT 0
15607: DEC
15608: ST_TO_ADDR
15609: LD_INT 40
15611: PUSH
15612: FOR_TO
15613: IFFALSE 15644
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15615: LD_VAR 0 3
15619: PPUSH
15620: LD_VAR 0 2
15624: PPUSH
15625: LD_INT 1
15627: PPUSH
15628: LD_VAR 0 3
15632: PPUSH
15633: CALL_OW 565
15637: PPUSH
15638: CALL_OW 324
15642: GO 15612
15644: POP
15645: POP
// end ;
15646: GO 15526
15648: POP
15649: POP
// end ;
15650: LD_VAR 0 1
15654: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15655: LD_INT 0
15657: PPUSH
15658: PPUSH
15659: PPUSH
// for side = 1 to 8 do
15660: LD_ADDR_VAR 0 3
15664: PUSH
15665: DOUBLE
15666: LD_INT 1
15668: DEC
15669: ST_TO_ADDR
15670: LD_INT 8
15672: PUSH
15673: FOR_TO
15674: IFFALSE 19670
// begin for i = 1 to 73 do
15676: LD_ADDR_VAR 0 4
15680: PUSH
15681: DOUBLE
15682: LD_INT 1
15684: DEC
15685: ST_TO_ADDR
15686: LD_INT 73
15688: PUSH
15689: FOR_TO
15690: IFFALSE 15711
// SetTech ( i , side , state_disabled ) ;
15692: LD_VAR 0 4
15696: PPUSH
15697: LD_VAR 0 3
15701: PPUSH
15702: LD_INT 0
15704: PPUSH
15705: CALL_OW 322
15709: GO 15689
15711: POP
15712: POP
// for i = 0 to 40 do
15713: LD_ADDR_VAR 0 4
15717: PUSH
15718: DOUBLE
15719: LD_INT 0
15721: DEC
15722: ST_TO_ADDR
15723: LD_INT 40
15725: PUSH
15726: FOR_TO
15727: IFFALSE 15748
// SetRestrict ( i , side , false ) ;
15729: LD_VAR 0 4
15733: PPUSH
15734: LD_VAR 0 3
15738: PPUSH
15739: LD_INT 0
15741: PPUSH
15742: CALL_OW 324
15746: GO 15726
15748: POP
15749: POP
// case level of 1 :
15750: LD_VAR 0 1
15754: PUSH
15755: LD_INT 1
15757: DOUBLE
15758: EQUAL
15759: IFTRUE 15763
15761: GO 15916
15763: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15764: LD_INT 35
15766: PPUSH
15767: LD_VAR 0 3
15771: PPUSH
15772: LD_INT 1
15774: PPUSH
15775: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15779: LD_INT 45
15781: PPUSH
15782: LD_VAR 0 3
15786: PPUSH
15787: LD_INT 1
15789: PPUSH
15790: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15794: LD_INT 46
15796: PPUSH
15797: LD_VAR 0 3
15801: PPUSH
15802: LD_INT 1
15804: PPUSH
15805: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15809: LD_INT 47
15811: PPUSH
15812: LD_VAR 0 3
15816: PPUSH
15817: LD_INT 1
15819: PPUSH
15820: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15824: LD_INT 0
15826: PPUSH
15827: LD_VAR 0 3
15831: PPUSH
15832: LD_INT 1
15834: PPUSH
15835: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15839: LD_INT 2
15841: PPUSH
15842: LD_VAR 0 3
15846: PPUSH
15847: LD_INT 1
15849: PPUSH
15850: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15854: LD_INT 4
15856: PPUSH
15857: LD_VAR 0 3
15861: PPUSH
15862: LD_INT 1
15864: PPUSH
15865: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15869: LD_INT 6
15871: PPUSH
15872: LD_VAR 0 3
15876: PPUSH
15877: LD_INT 1
15879: PPUSH
15880: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15884: LD_INT 29
15886: PPUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15899: LD_INT 31
15901: PPUSH
15902: LD_VAR 0 3
15906: PPUSH
15907: LD_INT 1
15909: PPUSH
15910: CALL_OW 324
// end ; 2 :
15914: GO 19668
15916: LD_INT 2
15918: DOUBLE
15919: EQUAL
15920: IFTRUE 15924
15922: GO 16122
15924: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15925: LD_INT 35
15927: PPUSH
15928: LD_VAR 0 3
15932: PPUSH
15933: LD_INT 1
15935: PPUSH
15936: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15940: LD_INT 45
15942: PPUSH
15943: LD_VAR 0 3
15947: PPUSH
15948: LD_INT 1
15950: PPUSH
15951: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15955: LD_INT 46
15957: PPUSH
15958: LD_VAR 0 3
15962: PPUSH
15963: LD_INT 1
15965: PPUSH
15966: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15970: LD_INT 47
15972: PPUSH
15973: LD_VAR 0 3
15977: PPUSH
15978: LD_INT 1
15980: PPUSH
15981: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15985: LD_INT 1
15987: PPUSH
15988: LD_VAR 0 3
15992: PPUSH
15993: LD_INT 1
15995: PPUSH
15996: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16000: LD_INT 2
16002: PPUSH
16003: LD_VAR 0 3
16007: PPUSH
16008: LD_INT 1
16010: PPUSH
16011: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16015: LD_INT 11
16017: PPUSH
16018: LD_VAR 0 3
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16030: LD_INT 0
16032: PPUSH
16033: LD_VAR 0 3
16037: PPUSH
16038: LD_INT 1
16040: PPUSH
16041: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16045: LD_INT 2
16047: PPUSH
16048: LD_VAR 0 3
16052: PPUSH
16053: LD_INT 1
16055: PPUSH
16056: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16060: LD_INT 4
16062: PPUSH
16063: LD_VAR 0 3
16067: PPUSH
16068: LD_INT 1
16070: PPUSH
16071: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16075: LD_INT 6
16077: PPUSH
16078: LD_VAR 0 3
16082: PPUSH
16083: LD_INT 1
16085: PPUSH
16086: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16090: LD_INT 29
16092: PPUSH
16093: LD_VAR 0 3
16097: PPUSH
16098: LD_INT 1
16100: PPUSH
16101: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16105: LD_INT 31
16107: PPUSH
16108: LD_VAR 0 3
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: CALL_OW 324
// end ; 3 :
16120: GO 19668
16122: LD_INT 3
16124: DOUBLE
16125: EQUAL
16126: IFTRUE 16130
16128: GO 16583
16130: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16131: LD_INT 35
16133: PPUSH
16134: LD_VAR 0 3
16138: PPUSH
16139: LD_INT 1
16141: PPUSH
16142: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16146: LD_INT 45
16148: PPUSH
16149: LD_VAR 0 3
16153: PPUSH
16154: LD_INT 1
16156: PPUSH
16157: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16161: LD_INT 46
16163: PPUSH
16164: LD_VAR 0 3
16168: PPUSH
16169: LD_INT 1
16171: PPUSH
16172: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16176: LD_INT 47
16178: PPUSH
16179: LD_VAR 0 3
16183: PPUSH
16184: LD_INT 1
16186: PPUSH
16187: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16191: LD_INT 1
16193: PPUSH
16194: LD_VAR 0 3
16198: PPUSH
16199: LD_INT 1
16201: PPUSH
16202: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16206: LD_INT 2
16208: PPUSH
16209: LD_VAR 0 3
16213: PPUSH
16214: LD_INT 1
16216: PPUSH
16217: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16221: LD_INT 11
16223: PPUSH
16224: LD_VAR 0 3
16228: PPUSH
16229: LD_INT 1
16231: PPUSH
16232: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16236: LD_INT 48
16238: PPUSH
16239: LD_VAR 0 3
16243: PPUSH
16244: LD_INT 1
16246: PPUSH
16247: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16251: LD_INT 69
16253: PPUSH
16254: LD_VAR 0 3
16258: PPUSH
16259: LD_INT 1
16261: PPUSH
16262: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16266: LD_INT 39
16268: PPUSH
16269: LD_VAR 0 3
16273: PPUSH
16274: LD_INT 1
16276: PPUSH
16277: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16281: LD_INT 43
16283: PPUSH
16284: LD_VAR 0 3
16288: PPUSH
16289: LD_INT 1
16291: PPUSH
16292: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16296: LD_INT 51
16298: PPUSH
16299: LD_VAR 0 3
16303: PPUSH
16304: LD_INT 1
16306: PPUSH
16307: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16311: LD_INT 6
16313: PPUSH
16314: LD_VAR 0 3
16318: PPUSH
16319: LD_INT 1
16321: PPUSH
16322: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16326: LD_INT 0
16328: PPUSH
16329: LD_VAR 0 3
16333: PPUSH
16334: LD_INT 1
16336: PPUSH
16337: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16341: LD_INT 2
16343: PPUSH
16344: LD_VAR 0 3
16348: PPUSH
16349: LD_INT 1
16351: PPUSH
16352: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16356: LD_INT 3
16358: PPUSH
16359: LD_VAR 0 3
16363: PPUSH
16364: LD_INT 1
16366: PPUSH
16367: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16371: LD_INT 4
16373: PPUSH
16374: LD_VAR 0 3
16378: PPUSH
16379: LD_INT 1
16381: PPUSH
16382: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16386: LD_INT 6
16388: PPUSH
16389: LD_VAR 0 3
16393: PPUSH
16394: LD_INT 1
16396: PPUSH
16397: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16401: LD_INT 7
16403: PPUSH
16404: LD_VAR 0 3
16408: PPUSH
16409: LD_INT 1
16411: PPUSH
16412: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16416: LD_INT 8
16418: PPUSH
16419: LD_VAR 0 3
16423: PPUSH
16424: LD_INT 1
16426: PPUSH
16427: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16431: LD_INT 10
16433: PPUSH
16434: LD_VAR 0 3
16438: PPUSH
16439: LD_INT 1
16441: PPUSH
16442: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16446: LD_INT 15
16448: PPUSH
16449: LD_VAR 0 3
16453: PPUSH
16454: LD_INT 1
16456: PPUSH
16457: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16461: LD_INT 16
16463: PPUSH
16464: LD_VAR 0 3
16468: PPUSH
16469: LD_INT 1
16471: PPUSH
16472: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16476: LD_INT 17
16478: PPUSH
16479: LD_VAR 0 3
16483: PPUSH
16484: LD_INT 1
16486: PPUSH
16487: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16491: LD_INT 20
16493: PPUSH
16494: LD_VAR 0 3
16498: PPUSH
16499: LD_INT 1
16501: PPUSH
16502: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16506: LD_INT 26
16508: PPUSH
16509: LD_VAR 0 3
16513: PPUSH
16514: LD_INT 1
16516: PPUSH
16517: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16521: LD_INT 27
16523: PPUSH
16524: LD_VAR 0 3
16528: PPUSH
16529: LD_INT 1
16531: PPUSH
16532: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16536: LD_INT 29
16538: PPUSH
16539: LD_VAR 0 3
16543: PPUSH
16544: LD_INT 1
16546: PPUSH
16547: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16551: LD_INT 31
16553: PPUSH
16554: LD_VAR 0 3
16558: PPUSH
16559: LD_INT 1
16561: PPUSH
16562: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16566: LD_INT 32
16568: PPUSH
16569: LD_VAR 0 3
16573: PPUSH
16574: LD_INT 1
16576: PPUSH
16577: CALL_OW 324
// end ; 4 :
16581: GO 19668
16583: LD_INT 4
16585: DOUBLE
16586: EQUAL
16587: IFTRUE 16591
16589: GO 17539
16591: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16592: LD_INT 35
16594: PPUSH
16595: LD_VAR 0 3
16599: PPUSH
16600: LD_INT 1
16602: PPUSH
16603: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16607: LD_INT 45
16609: PPUSH
16610: LD_VAR 0 3
16614: PPUSH
16615: LD_INT 1
16617: PPUSH
16618: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16622: LD_INT 46
16624: PPUSH
16625: LD_VAR 0 3
16629: PPUSH
16630: LD_INT 1
16632: PPUSH
16633: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16637: LD_INT 47
16639: PPUSH
16640: LD_VAR 0 3
16644: PPUSH
16645: LD_INT 1
16647: PPUSH
16648: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16652: LD_INT 1
16654: PPUSH
16655: LD_VAR 0 3
16659: PPUSH
16660: LD_INT 1
16662: PPUSH
16663: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16667: LD_INT 2
16669: PPUSH
16670: LD_VAR 0 3
16674: PPUSH
16675: LD_INT 1
16677: PPUSH
16678: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16682: LD_INT 11
16684: PPUSH
16685: LD_VAR 0 3
16689: PPUSH
16690: LD_INT 1
16692: PPUSH
16693: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16697: LD_INT 20
16699: PPUSH
16700: LD_VAR 0 3
16704: PPUSH
16705: LD_INT 1
16707: PPUSH
16708: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16712: LD_INT 48
16714: PPUSH
16715: LD_VAR 0 3
16719: PPUSH
16720: LD_INT 1
16722: PPUSH
16723: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16727: LD_INT 49
16729: PPUSH
16730: LD_VAR 0 3
16734: PPUSH
16735: LD_INT 1
16737: PPUSH
16738: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16742: LD_INT 69
16744: PPUSH
16745: LD_VAR 0 3
16749: PPUSH
16750: LD_INT 1
16752: PPUSH
16753: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16757: LD_INT 39
16759: PPUSH
16760: LD_VAR 0 3
16764: PPUSH
16765: LD_INT 1
16767: PPUSH
16768: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16772: LD_INT 34
16774: PPUSH
16775: LD_VAR 0 3
16779: PPUSH
16780: LD_INT 1
16782: PPUSH
16783: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16787: LD_INT 42
16789: PPUSH
16790: LD_VAR 0 3
16794: PPUSH
16795: LD_INT 1
16797: PPUSH
16798: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16802: LD_INT 44
16804: PPUSH
16805: LD_VAR 0 3
16809: PPUSH
16810: LD_INT 1
16812: PPUSH
16813: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16817: LD_INT 41
16819: PPUSH
16820: LD_VAR 0 3
16824: PPUSH
16825: LD_INT 1
16827: PPUSH
16828: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16832: LD_INT 43
16834: PPUSH
16835: LD_VAR 0 3
16839: PPUSH
16840: LD_INT 1
16842: PPUSH
16843: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16847: LD_INT 70
16849: PPUSH
16850: LD_VAR 0 3
16854: PPUSH
16855: LD_INT 1
16857: PPUSH
16858: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16862: LD_INT 51
16864: PPUSH
16865: LD_VAR 0 3
16869: PPUSH
16870: LD_INT 1
16872: PPUSH
16873: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16877: LD_INT 52
16879: PPUSH
16880: LD_VAR 0 3
16884: PPUSH
16885: LD_INT 1
16887: PPUSH
16888: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16892: LD_INT 6
16894: PPUSH
16895: LD_VAR 0 3
16899: PPUSH
16900: LD_INT 1
16902: PPUSH
16903: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16907: LD_INT 15
16909: PPUSH
16910: LD_VAR 0 3
16914: PPUSH
16915: LD_INT 1
16917: PPUSH
16918: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16922: LD_INT 7
16924: PPUSH
16925: LD_VAR 0 3
16929: PPUSH
16930: LD_INT 1
16932: PPUSH
16933: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16937: LD_INT 12
16939: PPUSH
16940: LD_VAR 0 3
16944: PPUSH
16945: LD_INT 1
16947: PPUSH
16948: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16952: LD_INT 18
16954: PPUSH
16955: LD_VAR 0 3
16959: PPUSH
16960: LD_INT 1
16962: PPUSH
16963: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16967: LD_INT 60
16969: PPUSH
16970: LD_VAR 0 3
16974: PPUSH
16975: LD_INT 1
16977: PPUSH
16978: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16982: LD_INT 9
16984: PPUSH
16985: LD_VAR 0 3
16989: PPUSH
16990: LD_INT 1
16992: PPUSH
16993: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16997: LD_INT 30
16999: PPUSH
17000: LD_VAR 0 3
17004: PPUSH
17005: LD_INT 1
17007: PPUSH
17008: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17012: LD_INT 37
17014: PPUSH
17015: LD_VAR 0 3
17019: PPUSH
17020: LD_INT 1
17022: PPUSH
17023: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17027: LD_INT 5
17029: PPUSH
17030: LD_VAR 0 3
17034: PPUSH
17035: LD_INT 1
17037: PPUSH
17038: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17042: LD_INT 66
17044: PPUSH
17045: LD_VAR 0 3
17049: PPUSH
17050: LD_INT 1
17052: PPUSH
17053: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17057: LD_INT 21
17059: PPUSH
17060: LD_VAR 0 3
17064: PPUSH
17065: LD_INT 1
17067: PPUSH
17068: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17072: LD_INT 22
17074: PPUSH
17075: LD_VAR 0 3
17079: PPUSH
17080: LD_INT 1
17082: PPUSH
17083: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17087: LD_INT 54
17089: PPUSH
17090: LD_VAR 0 3
17094: PPUSH
17095: LD_INT 1
17097: PPUSH
17098: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17102: LD_INT 0
17104: PPUSH
17105: LD_VAR 0 3
17109: PPUSH
17110: LD_INT 1
17112: PPUSH
17113: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17117: LD_INT 1
17119: PPUSH
17120: LD_VAR 0 3
17124: PPUSH
17125: LD_INT 1
17127: PPUSH
17128: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17132: LD_INT 2
17134: PPUSH
17135: LD_VAR 0 3
17139: PPUSH
17140: LD_INT 1
17142: PPUSH
17143: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17147: LD_INT 3
17149: PPUSH
17150: LD_VAR 0 3
17154: PPUSH
17155: LD_INT 1
17157: PPUSH
17158: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17162: LD_INT 4
17164: PPUSH
17165: LD_VAR 0 3
17169: PPUSH
17170: LD_INT 1
17172: PPUSH
17173: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17177: LD_INT 5
17179: PPUSH
17180: LD_VAR 0 3
17184: PPUSH
17185: LD_INT 1
17187: PPUSH
17188: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17192: LD_INT 6
17194: PPUSH
17195: LD_VAR 0 3
17199: PPUSH
17200: LD_INT 1
17202: PPUSH
17203: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17207: LD_INT 7
17209: PPUSH
17210: LD_VAR 0 3
17214: PPUSH
17215: LD_INT 1
17217: PPUSH
17218: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17222: LD_INT 8
17224: PPUSH
17225: LD_VAR 0 3
17229: PPUSH
17230: LD_INT 1
17232: PPUSH
17233: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17237: LD_INT 10
17239: PPUSH
17240: LD_VAR 0 3
17244: PPUSH
17245: LD_INT 1
17247: PPUSH
17248: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17252: LD_INT 11
17254: PPUSH
17255: LD_VAR 0 3
17259: PPUSH
17260: LD_INT 1
17262: PPUSH
17263: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17267: LD_INT 12
17269: PPUSH
17270: LD_VAR 0 3
17274: PPUSH
17275: LD_INT 1
17277: PPUSH
17278: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17282: LD_INT 13
17284: PPUSH
17285: LD_VAR 0 3
17289: PPUSH
17290: LD_INT 1
17292: PPUSH
17293: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17297: LD_INT 14
17299: PPUSH
17300: LD_VAR 0 3
17304: PPUSH
17305: LD_INT 1
17307: PPUSH
17308: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17312: LD_INT 15
17314: PPUSH
17315: LD_VAR 0 3
17319: PPUSH
17320: LD_INT 1
17322: PPUSH
17323: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17327: LD_INT 16
17329: PPUSH
17330: LD_VAR 0 3
17334: PPUSH
17335: LD_INT 1
17337: PPUSH
17338: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17342: LD_INT 17
17344: PPUSH
17345: LD_VAR 0 3
17349: PPUSH
17350: LD_INT 1
17352: PPUSH
17353: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17357: LD_INT 19
17359: PPUSH
17360: LD_VAR 0 3
17364: PPUSH
17365: LD_INT 1
17367: PPUSH
17368: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17372: LD_INT 20
17374: PPUSH
17375: LD_VAR 0 3
17379: PPUSH
17380: LD_INT 1
17382: PPUSH
17383: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17387: LD_INT 21
17389: PPUSH
17390: LD_VAR 0 3
17394: PPUSH
17395: LD_INT 1
17397: PPUSH
17398: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17402: LD_INT 23
17404: PPUSH
17405: LD_VAR 0 3
17409: PPUSH
17410: LD_INT 1
17412: PPUSH
17413: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17417: LD_INT 26
17419: PPUSH
17420: LD_VAR 0 3
17424: PPUSH
17425: LD_INT 1
17427: PPUSH
17428: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17432: LD_INT 27
17434: PPUSH
17435: LD_VAR 0 3
17439: PPUSH
17440: LD_INT 1
17442: PPUSH
17443: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17447: LD_INT 28
17449: PPUSH
17450: LD_VAR 0 3
17454: PPUSH
17455: LD_INT 1
17457: PPUSH
17458: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17462: LD_INT 29
17464: PPUSH
17465: LD_VAR 0 3
17469: PPUSH
17470: LD_INT 1
17472: PPUSH
17473: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17477: LD_INT 30
17479: PPUSH
17480: LD_VAR 0 3
17484: PPUSH
17485: LD_INT 1
17487: PPUSH
17488: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17492: LD_INT 31
17494: PPUSH
17495: LD_VAR 0 3
17499: PPUSH
17500: LD_INT 1
17502: PPUSH
17503: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17507: LD_INT 32
17509: PPUSH
17510: LD_VAR 0 3
17514: PPUSH
17515: LD_INT 1
17517: PPUSH
17518: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17522: LD_INT 36
17524: PPUSH
17525: LD_VAR 0 3
17529: PPUSH
17530: LD_INT 1
17532: PPUSH
17533: CALL_OW 324
// end ; 5 :
17537: GO 19668
17539: LD_INT 5
17541: DOUBLE
17542: EQUAL
17543: IFTRUE 17547
17545: GO 18660
17547: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17548: LD_INT 35
17550: PPUSH
17551: LD_VAR 0 3
17555: PPUSH
17556: LD_INT 1
17558: PPUSH
17559: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17563: LD_INT 45
17565: PPUSH
17566: LD_VAR 0 3
17570: PPUSH
17571: LD_INT 1
17573: PPUSH
17574: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17578: LD_INT 46
17580: PPUSH
17581: LD_VAR 0 3
17585: PPUSH
17586: LD_INT 1
17588: PPUSH
17589: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17593: LD_INT 47
17595: PPUSH
17596: LD_VAR 0 3
17600: PPUSH
17601: LD_INT 1
17603: PPUSH
17604: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17608: LD_INT 1
17610: PPUSH
17611: LD_VAR 0 3
17615: PPUSH
17616: LD_INT 1
17618: PPUSH
17619: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17623: LD_INT 2
17625: PPUSH
17626: LD_VAR 0 3
17630: PPUSH
17631: LD_INT 1
17633: PPUSH
17634: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17638: LD_INT 11
17640: PPUSH
17641: LD_VAR 0 3
17645: PPUSH
17646: LD_INT 1
17648: PPUSH
17649: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17653: LD_INT 20
17655: PPUSH
17656: LD_VAR 0 3
17660: PPUSH
17661: LD_INT 1
17663: PPUSH
17664: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17668: LD_INT 48
17670: PPUSH
17671: LD_VAR 0 3
17675: PPUSH
17676: LD_INT 1
17678: PPUSH
17679: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17683: LD_INT 49
17685: PPUSH
17686: LD_VAR 0 3
17690: PPUSH
17691: LD_INT 1
17693: PPUSH
17694: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17698: LD_INT 69
17700: PPUSH
17701: LD_VAR 0 3
17705: PPUSH
17706: LD_INT 1
17708: PPUSH
17709: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17713: LD_INT 39
17715: PPUSH
17716: LD_VAR 0 3
17720: PPUSH
17721: LD_INT 1
17723: PPUSH
17724: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17728: LD_INT 34
17730: PPUSH
17731: LD_VAR 0 3
17735: PPUSH
17736: LD_INT 1
17738: PPUSH
17739: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17743: LD_INT 42
17745: PPUSH
17746: LD_VAR 0 3
17750: PPUSH
17751: LD_INT 1
17753: PPUSH
17754: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17758: LD_INT 44
17760: PPUSH
17761: LD_VAR 0 3
17765: PPUSH
17766: LD_INT 1
17768: PPUSH
17769: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17773: LD_INT 41
17775: PPUSH
17776: LD_VAR 0 3
17780: PPUSH
17781: LD_INT 1
17783: PPUSH
17784: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17788: LD_INT 40
17790: PPUSH
17791: LD_VAR 0 3
17795: PPUSH
17796: LD_INT 1
17798: PPUSH
17799: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17803: LD_INT 43
17805: PPUSH
17806: LD_VAR 0 3
17810: PPUSH
17811: LD_INT 1
17813: PPUSH
17814: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17818: LD_INT 70
17820: PPUSH
17821: LD_VAR 0 3
17825: PPUSH
17826: LD_INT 1
17828: PPUSH
17829: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17833: LD_INT 51
17835: PPUSH
17836: LD_VAR 0 3
17840: PPUSH
17841: LD_INT 1
17843: PPUSH
17844: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17848: LD_INT 52
17850: PPUSH
17851: LD_VAR 0 3
17855: PPUSH
17856: LD_INT 1
17858: PPUSH
17859: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17863: LD_INT 6
17865: PPUSH
17866: LD_VAR 0 3
17870: PPUSH
17871: LD_INT 1
17873: PPUSH
17874: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17878: LD_INT 15
17880: PPUSH
17881: LD_VAR 0 3
17885: PPUSH
17886: LD_INT 1
17888: PPUSH
17889: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17893: LD_INT 7
17895: PPUSH
17896: LD_VAR 0 3
17900: PPUSH
17901: LD_INT 1
17903: PPUSH
17904: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17908: LD_INT 12
17910: PPUSH
17911: LD_VAR 0 3
17915: PPUSH
17916: LD_INT 1
17918: PPUSH
17919: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17923: LD_INT 17
17925: PPUSH
17926: LD_VAR 0 3
17930: PPUSH
17931: LD_INT 1
17933: PPUSH
17934: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17938: LD_INT 18
17940: PPUSH
17941: LD_VAR 0 3
17945: PPUSH
17946: LD_INT 1
17948: PPUSH
17949: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17953: LD_INT 60
17955: PPUSH
17956: LD_VAR 0 3
17960: PPUSH
17961: LD_INT 1
17963: PPUSH
17964: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17968: LD_INT 32
17970: PPUSH
17971: LD_VAR 0 3
17975: PPUSH
17976: LD_INT 1
17978: PPUSH
17979: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17983: LD_INT 9
17985: PPUSH
17986: LD_VAR 0 3
17990: PPUSH
17991: LD_INT 1
17993: PPUSH
17994: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17998: LD_INT 57
18000: PPUSH
18001: LD_VAR 0 3
18005: PPUSH
18006: LD_INT 1
18008: PPUSH
18009: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18013: LD_INT 30
18015: PPUSH
18016: LD_VAR 0 3
18020: PPUSH
18021: LD_INT 1
18023: PPUSH
18024: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18028: LD_INT 37
18030: PPUSH
18031: LD_VAR 0 3
18035: PPUSH
18036: LD_INT 1
18038: PPUSH
18039: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18043: LD_INT 63
18045: PPUSH
18046: LD_VAR 0 3
18050: PPUSH
18051: LD_INT 1
18053: PPUSH
18054: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18058: LD_INT 3
18060: PPUSH
18061: LD_VAR 0 3
18065: PPUSH
18066: LD_INT 1
18068: PPUSH
18069: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18073: LD_INT 4
18075: PPUSH
18076: LD_VAR 0 3
18080: PPUSH
18081: LD_INT 1
18083: PPUSH
18084: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18088: LD_INT 5
18090: PPUSH
18091: LD_VAR 0 3
18095: PPUSH
18096: LD_INT 1
18098: PPUSH
18099: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18103: LD_INT 66
18105: PPUSH
18106: LD_VAR 0 3
18110: PPUSH
18111: LD_INT 1
18113: PPUSH
18114: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18118: LD_INT 21
18120: PPUSH
18121: LD_VAR 0 3
18125: PPUSH
18126: LD_INT 1
18128: PPUSH
18129: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18133: LD_INT 22
18135: PPUSH
18136: LD_VAR 0 3
18140: PPUSH
18141: LD_INT 1
18143: PPUSH
18144: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18148: LD_INT 19
18150: PPUSH
18151: LD_VAR 0 3
18155: PPUSH
18156: LD_INT 1
18158: PPUSH
18159: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18163: LD_INT 54
18165: PPUSH
18166: LD_VAR 0 3
18170: PPUSH
18171: LD_INT 1
18173: PPUSH
18174: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18178: LD_INT 55
18180: PPUSH
18181: LD_VAR 0 3
18185: PPUSH
18186: LD_INT 1
18188: PPUSH
18189: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18193: LD_INT 0
18195: PPUSH
18196: LD_VAR 0 3
18200: PPUSH
18201: LD_INT 1
18203: PPUSH
18204: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18208: LD_INT 1
18210: PPUSH
18211: LD_VAR 0 3
18215: PPUSH
18216: LD_INT 1
18218: PPUSH
18219: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18223: LD_INT 2
18225: PPUSH
18226: LD_VAR 0 3
18230: PPUSH
18231: LD_INT 1
18233: PPUSH
18234: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18238: LD_INT 3
18240: PPUSH
18241: LD_VAR 0 3
18245: PPUSH
18246: LD_INT 1
18248: PPUSH
18249: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18253: LD_INT 4
18255: PPUSH
18256: LD_VAR 0 3
18260: PPUSH
18261: LD_INT 1
18263: PPUSH
18264: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18268: LD_INT 5
18270: PPUSH
18271: LD_VAR 0 3
18275: PPUSH
18276: LD_INT 1
18278: PPUSH
18279: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18283: LD_INT 6
18285: PPUSH
18286: LD_VAR 0 3
18290: PPUSH
18291: LD_INT 1
18293: PPUSH
18294: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18298: LD_INT 7
18300: PPUSH
18301: LD_VAR 0 3
18305: PPUSH
18306: LD_INT 1
18308: PPUSH
18309: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18313: LD_INT 8
18315: PPUSH
18316: LD_VAR 0 3
18320: PPUSH
18321: LD_INT 1
18323: PPUSH
18324: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18328: LD_INT 10
18330: PPUSH
18331: LD_VAR 0 3
18335: PPUSH
18336: LD_INT 1
18338: PPUSH
18339: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18343: LD_INT 11
18345: PPUSH
18346: LD_VAR 0 3
18350: PPUSH
18351: LD_INT 1
18353: PPUSH
18354: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18358: LD_INT 12
18360: PPUSH
18361: LD_VAR 0 3
18365: PPUSH
18366: LD_INT 1
18368: PPUSH
18369: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18373: LD_INT 13
18375: PPUSH
18376: LD_VAR 0 3
18380: PPUSH
18381: LD_INT 1
18383: PPUSH
18384: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18388: LD_INT 14
18390: PPUSH
18391: LD_VAR 0 3
18395: PPUSH
18396: LD_INT 1
18398: PPUSH
18399: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18403: LD_INT 15
18405: PPUSH
18406: LD_VAR 0 3
18410: PPUSH
18411: LD_INT 1
18413: PPUSH
18414: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18418: LD_INT 16
18420: PPUSH
18421: LD_VAR 0 3
18425: PPUSH
18426: LD_INT 1
18428: PPUSH
18429: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18433: LD_INT 17
18435: PPUSH
18436: LD_VAR 0 3
18440: PPUSH
18441: LD_INT 1
18443: PPUSH
18444: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18448: LD_INT 18
18450: PPUSH
18451: LD_VAR 0 3
18455: PPUSH
18456: LD_INT 1
18458: PPUSH
18459: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18463: LD_INT 19
18465: PPUSH
18466: LD_VAR 0 3
18470: PPUSH
18471: LD_INT 1
18473: PPUSH
18474: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18478: LD_INT 20
18480: PPUSH
18481: LD_VAR 0 3
18485: PPUSH
18486: LD_INT 1
18488: PPUSH
18489: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18493: LD_INT 21
18495: PPUSH
18496: LD_VAR 0 3
18500: PPUSH
18501: LD_INT 1
18503: PPUSH
18504: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18508: LD_INT 23
18510: PPUSH
18511: LD_VAR 0 3
18515: PPUSH
18516: LD_INT 1
18518: PPUSH
18519: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18523: LD_INT 26
18525: PPUSH
18526: LD_VAR 0 3
18530: PPUSH
18531: LD_INT 1
18533: PPUSH
18534: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18538: LD_INT 27
18540: PPUSH
18541: LD_VAR 0 3
18545: PPUSH
18546: LD_INT 1
18548: PPUSH
18549: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18553: LD_INT 28
18555: PPUSH
18556: LD_VAR 0 3
18560: PPUSH
18561: LD_INT 1
18563: PPUSH
18564: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18568: LD_INT 29
18570: PPUSH
18571: LD_VAR 0 3
18575: PPUSH
18576: LD_INT 1
18578: PPUSH
18579: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18583: LD_INT 30
18585: PPUSH
18586: LD_VAR 0 3
18590: PPUSH
18591: LD_INT 1
18593: PPUSH
18594: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18598: LD_INT 31
18600: PPUSH
18601: LD_VAR 0 3
18605: PPUSH
18606: LD_INT 1
18608: PPUSH
18609: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18613: LD_INT 32
18615: PPUSH
18616: LD_VAR 0 3
18620: PPUSH
18621: LD_INT 1
18623: PPUSH
18624: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18628: LD_INT 33
18630: PPUSH
18631: LD_VAR 0 3
18635: PPUSH
18636: LD_INT 1
18638: PPUSH
18639: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18643: LD_INT 36
18645: PPUSH
18646: LD_VAR 0 3
18650: PPUSH
18651: LD_INT 1
18653: PPUSH
18654: CALL_OW 324
// end ; 6 :
18658: GO 19668
18660: LD_INT 6
18662: DOUBLE
18663: EQUAL
18664: IFTRUE 18668
18666: GO 19593
18668: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18669: LD_INT 35
18671: PPUSH
18672: LD_VAR 0 3
18676: PPUSH
18677: LD_INT 1
18679: PPUSH
18680: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18684: LD_INT 45
18686: PPUSH
18687: LD_VAR 0 3
18691: PPUSH
18692: LD_INT 1
18694: PPUSH
18695: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18699: LD_INT 46
18701: PPUSH
18702: LD_VAR 0 3
18706: PPUSH
18707: LD_INT 1
18709: PPUSH
18710: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18714: LD_INT 47
18716: PPUSH
18717: LD_VAR 0 3
18721: PPUSH
18722: LD_INT 1
18724: PPUSH
18725: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18729: LD_INT 1
18731: PPUSH
18732: LD_VAR 0 3
18736: PPUSH
18737: LD_INT 1
18739: PPUSH
18740: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18744: LD_INT 2
18746: PPUSH
18747: LD_VAR 0 3
18751: PPUSH
18752: LD_INT 1
18754: PPUSH
18755: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18759: LD_INT 11
18761: PPUSH
18762: LD_VAR 0 3
18766: PPUSH
18767: LD_INT 1
18769: PPUSH
18770: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18774: LD_INT 20
18776: PPUSH
18777: LD_VAR 0 3
18781: PPUSH
18782: LD_INT 1
18784: PPUSH
18785: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18789: LD_INT 48
18791: PPUSH
18792: LD_VAR 0 3
18796: PPUSH
18797: LD_INT 1
18799: PPUSH
18800: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18804: LD_INT 49
18806: PPUSH
18807: LD_VAR 0 3
18811: PPUSH
18812: LD_INT 1
18814: PPUSH
18815: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18819: LD_INT 50
18821: PPUSH
18822: LD_VAR 0 3
18826: PPUSH
18827: LD_INT 1
18829: PPUSH
18830: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18834: LD_INT 69
18836: PPUSH
18837: LD_VAR 0 3
18841: PPUSH
18842: LD_INT 1
18844: PPUSH
18845: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18849: LD_INT 39
18851: PPUSH
18852: LD_VAR 0 3
18856: PPUSH
18857: LD_INT 1
18859: PPUSH
18860: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18864: LD_INT 34
18866: PPUSH
18867: LD_VAR 0 3
18871: PPUSH
18872: LD_INT 1
18874: PPUSH
18875: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18879: LD_INT 42
18881: PPUSH
18882: LD_VAR 0 3
18886: PPUSH
18887: LD_INT 1
18889: PPUSH
18890: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18894: LD_INT 44
18896: PPUSH
18897: LD_VAR 0 3
18901: PPUSH
18902: LD_INT 1
18904: PPUSH
18905: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18909: LD_INT 41
18911: PPUSH
18912: LD_VAR 0 3
18916: PPUSH
18917: LD_INT 1
18919: PPUSH
18920: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18924: LD_INT 13
18926: PPUSH
18927: LD_VAR 0 3
18931: PPUSH
18932: LD_INT 1
18934: PPUSH
18935: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18939: LD_INT 40
18941: PPUSH
18942: LD_VAR 0 3
18946: PPUSH
18947: LD_INT 1
18949: PPUSH
18950: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18954: LD_INT 43
18956: PPUSH
18957: LD_VAR 0 3
18961: PPUSH
18962: LD_INT 1
18964: PPUSH
18965: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18969: LD_INT 70
18971: PPUSH
18972: LD_VAR 0 3
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18984: LD_INT 23
18986: PPUSH
18987: LD_VAR 0 3
18991: PPUSH
18992: LD_INT 1
18994: PPUSH
18995: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18999: LD_INT 51
19001: PPUSH
19002: LD_VAR 0 3
19006: PPUSH
19007: LD_INT 1
19009: PPUSH
19010: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19014: LD_INT 52
19016: PPUSH
19017: LD_VAR 0 3
19021: PPUSH
19022: LD_INT 1
19024: PPUSH
19025: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19029: LD_INT 6
19031: PPUSH
19032: LD_VAR 0 3
19036: PPUSH
19037: LD_INT 1
19039: PPUSH
19040: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19044: LD_INT 15
19046: PPUSH
19047: LD_VAR 0 3
19051: PPUSH
19052: LD_INT 1
19054: PPUSH
19055: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19059: LD_INT 7
19061: PPUSH
19062: LD_VAR 0 3
19066: PPUSH
19067: LD_INT 1
19069: PPUSH
19070: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19074: LD_INT 12
19076: PPUSH
19077: LD_VAR 0 3
19081: PPUSH
19082: LD_INT 1
19084: PPUSH
19085: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19089: LD_INT 10
19091: PPUSH
19092: LD_VAR 0 3
19096: PPUSH
19097: LD_INT 1
19099: PPUSH
19100: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19104: LD_INT 17
19106: PPUSH
19107: LD_VAR 0 3
19111: PPUSH
19112: LD_INT 1
19114: PPUSH
19115: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19119: LD_INT 18
19121: PPUSH
19122: LD_VAR 0 3
19126: PPUSH
19127: LD_INT 1
19129: PPUSH
19130: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19134: LD_INT 60
19136: PPUSH
19137: LD_VAR 0 3
19141: PPUSH
19142: LD_INT 1
19144: PPUSH
19145: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19149: LD_INT 61
19151: PPUSH
19152: LD_VAR 0 3
19156: PPUSH
19157: LD_INT 1
19159: PPUSH
19160: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19164: LD_INT 32
19166: PPUSH
19167: LD_VAR 0 3
19171: PPUSH
19172: LD_INT 1
19174: PPUSH
19175: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19179: LD_INT 27
19181: PPUSH
19182: LD_VAR 0 3
19186: PPUSH
19187: LD_INT 1
19189: PPUSH
19190: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19194: LD_INT 36
19196: PPUSH
19197: LD_VAR 0 3
19201: PPUSH
19202: LD_INT 1
19204: PPUSH
19205: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19209: LD_INT 33
19211: PPUSH
19212: LD_VAR 0 3
19216: PPUSH
19217: LD_INT 1
19219: PPUSH
19220: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19224: LD_INT 9
19226: PPUSH
19227: LD_VAR 0 3
19231: PPUSH
19232: LD_INT 1
19234: PPUSH
19235: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19239: LD_INT 38
19241: PPUSH
19242: LD_VAR 0 3
19246: PPUSH
19247: LD_INT 1
19249: PPUSH
19250: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19254: LD_INT 57
19256: PPUSH
19257: LD_VAR 0 3
19261: PPUSH
19262: LD_INT 1
19264: PPUSH
19265: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19269: LD_INT 58
19271: PPUSH
19272: LD_VAR 0 3
19276: PPUSH
19277: LD_INT 1
19279: PPUSH
19280: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19284: LD_INT 28
19286: PPUSH
19287: LD_VAR 0 3
19291: PPUSH
19292: LD_INT 1
19294: PPUSH
19295: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19299: LD_INT 29
19301: PPUSH
19302: LD_VAR 0 3
19306: PPUSH
19307: LD_INT 1
19309: PPUSH
19310: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19314: LD_INT 30
19316: PPUSH
19317: LD_VAR 0 3
19321: PPUSH
19322: LD_INT 1
19324: PPUSH
19325: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19329: LD_INT 37
19331: PPUSH
19332: LD_VAR 0 3
19336: PPUSH
19337: LD_INT 1
19339: PPUSH
19340: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19344: LD_INT 63
19346: PPUSH
19347: LD_VAR 0 3
19351: PPUSH
19352: LD_INT 1
19354: PPUSH
19355: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19359: LD_INT 64
19361: PPUSH
19362: LD_VAR 0 3
19366: PPUSH
19367: LD_INT 1
19369: PPUSH
19370: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19374: LD_INT 3
19376: PPUSH
19377: LD_VAR 0 3
19381: PPUSH
19382: LD_INT 1
19384: PPUSH
19385: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19389: LD_INT 4
19391: PPUSH
19392: LD_VAR 0 3
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19404: LD_INT 5
19406: PPUSH
19407: LD_VAR 0 3
19411: PPUSH
19412: LD_INT 1
19414: PPUSH
19415: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19419: LD_INT 8
19421: PPUSH
19422: LD_VAR 0 3
19426: PPUSH
19427: LD_INT 1
19429: PPUSH
19430: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19434: LD_INT 66
19436: PPUSH
19437: LD_VAR 0 3
19441: PPUSH
19442: LD_INT 1
19444: PPUSH
19445: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19449: LD_INT 67
19451: PPUSH
19452: LD_VAR 0 3
19456: PPUSH
19457: LD_INT 1
19459: PPUSH
19460: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19464: LD_INT 21
19466: PPUSH
19467: LD_VAR 0 3
19471: PPUSH
19472: LD_INT 1
19474: PPUSH
19475: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19479: LD_INT 22
19481: PPUSH
19482: LD_VAR 0 3
19486: PPUSH
19487: LD_INT 1
19489: PPUSH
19490: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19494: LD_INT 19
19496: PPUSH
19497: LD_VAR 0 3
19501: PPUSH
19502: LD_INT 1
19504: PPUSH
19505: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19509: LD_INT 26
19511: PPUSH
19512: LD_VAR 0 3
19516: PPUSH
19517: LD_INT 1
19519: PPUSH
19520: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19524: LD_INT 54
19526: PPUSH
19527: LD_VAR 0 3
19531: PPUSH
19532: LD_INT 1
19534: PPUSH
19535: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19539: LD_INT 55
19541: PPUSH
19542: LD_VAR 0 3
19546: PPUSH
19547: LD_INT 1
19549: PPUSH
19550: CALL_OW 322
// for i = 0 to 39 do
19554: LD_ADDR_VAR 0 4
19558: PUSH
19559: DOUBLE
19560: LD_INT 0
19562: DEC
19563: ST_TO_ADDR
19564: LD_INT 39
19566: PUSH
19567: FOR_TO
19568: IFFALSE 19589
// SetRestrict ( i , side , true ) ;
19570: LD_VAR 0 4
19574: PPUSH
19575: LD_VAR 0 3
19579: PPUSH
19580: LD_INT 1
19582: PPUSH
19583: CALL_OW 324
19587: GO 19567
19589: POP
19590: POP
// end ; else
19591: GO 19668
19593: POP
// begin for i = 1 to 73 do
19594: LD_ADDR_VAR 0 4
19598: PUSH
19599: DOUBLE
19600: LD_INT 1
19602: DEC
19603: ST_TO_ADDR
19604: LD_INT 73
19606: PUSH
19607: FOR_TO
19608: IFFALSE 19629
// SetTech ( i , side , state_enabled ) ;
19610: LD_VAR 0 4
19614: PPUSH
19615: LD_VAR 0 3
19619: PPUSH
19620: LD_INT 1
19622: PPUSH
19623: CALL_OW 322
19627: GO 19607
19629: POP
19630: POP
// for i = 0 to 39 do
19631: LD_ADDR_VAR 0 4
19635: PUSH
19636: DOUBLE
19637: LD_INT 0
19639: DEC
19640: ST_TO_ADDR
19641: LD_INT 39
19643: PUSH
19644: FOR_TO
19645: IFFALSE 19666
// SetRestrict ( i , side , true ) ;
19647: LD_VAR 0 4
19651: PPUSH
19652: LD_VAR 0 3
19656: PPUSH
19657: LD_INT 1
19659: PPUSH
19660: CALL_OW 324
19664: GO 19644
19666: POP
19667: POP
// end ; end ; end ;
19668: GO 15673
19670: POP
19671: POP
// end ;
19672: LD_VAR 0 2
19676: RET
