// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_siberit , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 39
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 18
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 16
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 21
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 17
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 372
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 39
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 3 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 3
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 167: LD_ADDR_EXP 18
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 6
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 0 , 0 , 6 ] ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 6
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 0 , 0 , 3 ] ;
 245: LD_ADDR_EXP 19
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 21
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 323: LD_ADDR_EXP 17
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 372: LD_ADDR_EXP 20
 376: PUSH
 377: LD_EXP 16
 381: PUSH
 382: LD_INT 0
 384: PUSH
 385: EMPTY
 386: LIST
 387: DIFF
 388: PUSH
 389: LD_INT 1
 391: GREATER
 392: ST_TO_ADDR
// if Multiplayer then
 393: LD_OWVAR 4
 397: IFFALSE 643
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 399: LD_ADDR_EXP 41
 403: PUSH
 404: LD_INT 0
 406: PPUSH
 407: CALL_OW 426
 411: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 412: LD_ADDR_EXP 42
 416: PUSH
 417: LD_INT 1
 419: PPUSH
 420: CALL_OW 426
 424: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 425: LD_ADDR_EXP 43
 429: PUSH
 430: LD_INT 2
 432: PPUSH
 433: CALL_OW 426
 437: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 438: LD_ADDR_EXP 44
 442: PUSH
 443: LD_INT 3
 445: PPUSH
 446: CALL_OW 426
 450: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 451: LD_ADDR_EXP 45
 455: PUSH
 456: LD_INT 4
 458: PPUSH
 459: CALL_OW 426
 463: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 464: LD_ADDR_EXP 46
 468: PUSH
 469: LD_INT 5
 471: PPUSH
 472: CALL_OW 426
 476: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 477: LD_ADDR_EXP 47
 481: PUSH
 482: LD_INT 6
 484: PPUSH
 485: CALL_OW 426
 489: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 490: LD_ADDR_EXP 48
 494: PUSH
 495: LD_INT 10
 497: PPUSH
 498: CALL_OW 426
 502: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 503: LD_ADDR_EXP 49
 507: PUSH
 508: LD_INT 11
 510: PPUSH
 511: CALL_OW 426
 515: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 516: LD_ADDR_EXP 50
 520: PUSH
 521: LD_INT 12
 523: PPUSH
 524: CALL_OW 426
 528: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 529: LD_ADDR_EXP 51
 533: PUSH
 534: LD_INT 13
 536: PPUSH
 537: CALL_OW 426
 541: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 542: LD_ADDR_EXP 52
 546: PUSH
 547: LD_INT 14
 549: PPUSH
 550: CALL_OW 426
 554: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 555: LD_ADDR_EXP 1
 559: PUSH
 560: LD_INT 15
 562: PPUSH
 563: CALL_OW 426
 567: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 568: LD_ADDR_EXP 2
 572: PUSH
 573: LD_INT 16
 575: PPUSH
 576: CALL_OW 426
 580: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 581: LD_ADDR_EXP 53
 585: PUSH
 586: LD_INT 17
 588: PPUSH
 589: CALL_OW 426
 593: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 594: LD_ADDR_EXP 54
 598: PUSH
 599: LD_INT 20
 601: PPUSH
 602: CALL_OW 426
 606: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 607: LD_ADDR_EXP 40
 611: PUSH
 612: LD_INT 21
 614: PPUSH
 615: CALL_OW 426
 619: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 620: LD_ADDR_VAR 0 3
 624: PUSH
 625: LD_INT 22
 627: PPUSH
 628: CALL_OW 426
 632: ST_TO_ADDR
// def_win_rules = 0 ;
 633: LD_ADDR_EXP 30
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// end else
 641: GO 799
// begin Randomize ;
 643: CALL_OW 10
// def_base_level := 2 ;
 647: LD_ADDR_EXP 41
 651: PUSH
 652: LD_INT 2
 654: ST_TO_ADDR
// def_amount_of_people := 11 ;
 655: LD_ADDR_EXP 42
 659: PUSH
 660: LD_INT 11
 662: ST_TO_ADDR
// def_skill_level := 1 ;
 663: LD_ADDR_EXP 43
 667: PUSH
 668: LD_INT 1
 670: ST_TO_ADDR
// def_starting_resources := 2 ;
 671: LD_ADDR_EXP 44
 675: PUSH
 676: LD_INT 2
 678: ST_TO_ADDR
// def_shipments_density := 50 ;
 679: LD_ADDR_EXP 45
 683: PUSH
 684: LD_INT 50
 686: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 687: LD_ADDR_EXP 46
 691: PUSH
 692: LD_INT 0
 694: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 695: LD_ADDR_EXP 47
 699: PUSH
 700: LD_INT 1
 702: ST_TO_ADDR
// def_shared_vision := 1 ;
 703: LD_ADDR_EXP 48
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// def_morale_flags := 1 ;
 711: LD_ADDR_EXP 49
 715: PUSH
 716: LD_INT 1
 718: ST_TO_ADDR
// def_siberite_detection := 1 ;
 719: LD_ADDR_EXP 50
 723: PUSH
 724: LD_INT 1
 726: ST_TO_ADDR
// def_people_respawning := 2 ;
 727: LD_ADDR_EXP 51
 731: PUSH
 732: LD_INT 2
 734: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 735: LD_ADDR_EXP 52
 739: PUSH
 740: LD_INT 3
 742: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 743: LD_ADDR_EXP 1
 747: PUSH
 748: LD_INT 0
 750: ST_TO_ADDR
// def_public_score := 0 ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: LD_INT 0
 758: ST_TO_ADDR
// def_siberite_bomb := 4 ;
 759: LD_ADDR_EXP 53
 763: PUSH
 764: LD_INT 4
 766: ST_TO_ADDR
// def_builduptime := 0 ;
 767: LD_ADDR_EXP 54
 771: PUSH
 772: LD_INT 0
 774: ST_TO_ADDR
// def_game_rules := 0 ;
 775: LD_ADDR_EXP 40
 779: PUSH
 780: LD_INT 0
 782: ST_TO_ADDR
// tech_level = 4 ;
 783: LD_ADDR_VAR 0 3
 787: PUSH
 788: LD_INT 4
 790: ST_TO_ADDR
// def_win_rules = 0 ;
 791: LD_ADDR_EXP 30
 795: PUSH
 796: LD_INT 0
 798: ST_TO_ADDR
// end ; InitGameRules ;
 799: CALL 9399 0 0
// if def_game_rules = 0 then
 803: LD_EXP 40
 807: PUSH
 808: LD_INT 0
 810: EQUAL
 811: IFFALSE 862
// begin if isSGUI then
 813: LD_OWVAR 83
 817: IFFALSE 825
// setMpTechs ( ) else
 819: CALL 14216 0 0
 823: GO 862
// begin if Game_Type = 3 then
 825: LD_EXP 39
 829: PUSH
 830: LD_INT 3
 832: EQUAL
 833: IFFALSE 849
// tech_level = tech_level + 3 ;
 835: LD_ADDR_VAR 0 3
 839: PUSH
 840: LD_VAR 0 3
 844: PUSH
 845: LD_INT 3
 847: PLUS
 848: ST_TO_ADDR
// SetMpTechLevel ( tech_level + 1 ) ;
 849: LD_VAR 0 3
 853: PUSH
 854: LD_INT 1
 856: PLUS
 857: PPUSH
 858: CALL 14363 0 1
// end ; end ; if ( Game_Type = 5 ) then
 862: LD_EXP 39
 866: PUSH
 867: LD_INT 5
 869: EQUAL
 870: IFFALSE 899
// begin def_base_level := 1 ;
 872: LD_ADDR_EXP 41
 876: PUSH
 877: LD_INT 1
 879: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 880: LD_ADDR_EXP 46
 884: PUSH
 885: LD_INT 0
 887: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 888: LD_ADDR_EXP 47
 892: PUSH
 893: LD_INT 0
 895: ST_TO_ADDR
// disable ( 10 ) ;
 896: LD_INT 10
 898: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 899: LD_ADDR_EXP 3
 903: PUSH
 904: LD_INT 0
 906: PUSH
 907: LD_INT 1
 909: PUSH
 910: LD_INT 1
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: PUSH
 918: LD_EXP 41
 922: PUSH
 923: LD_INT 1
 925: PLUS
 926: ARRAY
 927: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 928: LD_ADDR_EXP 4
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 2
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: PUSH
 947: LD_EXP 41
 951: PUSH
 952: LD_INT 1
 954: PLUS
 955: ARRAY
 956: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 957: LD_ADDR_EXP 5
 961: PUSH
 962: LD_EXP 42
 966: PUSH
 967: LD_INT 4
 969: PLUS
 970: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
 971: LD_ADDR_EXP 9
 975: PUSH
 976: LD_INT 150
 978: PUSH
 979: LD_EXP 45
 983: PUSH
 984: LD_INT 1
 986: PLUS
 987: MINUS
 988: ST_TO_ADDR
// if def_people_respawning = 0 then
 989: LD_EXP 51
 993: PUSH
 994: LD_INT 0
 996: EQUAL
 997: IFFALSE 1017
// begin respawning_time_min = 0 ;
 999: LD_ADDR_EXP 12
1003: PUSH
1004: LD_INT 0
1006: ST_TO_ADDR
// respawning_time_max = 0 ;
1007: LD_ADDR_EXP 13
1011: PUSH
1012: LD_INT 0
1014: ST_TO_ADDR
// end else
1015: GO 1061
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1017: LD_ADDR_EXP 12
1021: PUSH
1022: LD_INT 10500
1024: PUSH
1025: LD_INT 5
1027: DIVREAL
1028: PUSH
1029: LD_INT 6
1031: PUSH
1032: LD_EXP 51
1036: MINUS
1037: MUL
1038: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1039: LD_ADDR_EXP 13
1043: PUSH
1044: LD_INT 31500
1046: PUSH
1047: LD_INT 5
1049: DIVREAL
1050: PUSH
1051: LD_INT 6
1053: PUSH
1054: LD_EXP 51
1058: MINUS
1059: MUL
1060: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1061: LD_EXP 52
1065: NOT
1066: IFFALSE 1078
// amount_of_apemen := 0 else
1068: LD_ADDR_EXP 14
1072: PUSH
1073: LD_INT 0
1075: ST_TO_ADDR
1076: GO 1088
// amount_of_apemen := def_amount_of_apemen ;
1078: LD_ADDR_EXP 14
1082: PUSH
1083: LD_EXP 52
1087: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1088: LD_EXP 53
1092: PUSH
1093: LD_INT 0
1095: EQUAL
1096: IFFALSE 1108
// siberite_bomb_Delay = 0 else
1098: LD_ADDR_EXP 15
1102: PUSH
1103: LD_INT 0
1105: ST_TO_ADDR
1106: GO 1130
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1108: LD_ADDR_EXP 15
1112: PUSH
1113: LD_EXP 53
1117: PUSH
1118: LD_INT 1
1120: MINUS
1121: PUSH
1122: LD_INT 21000
1124: MUL
1125: PUSH
1126: LD_INT 1
1128: PLUS
1129: ST_TO_ADDR
// amount_of_siberit := [ 30 , 60 , 90 , 120 , 150 , 180 , 210 , 240 , 270 , 300 , 400 , 500 , 600 , 700 , 800 , 900 , 1000 , 1250 , 1500 , 1750 , 2000 , 2250 , 2500 , 2750 , 3000 , 3500 , 4000 , 4500 , 5000 , 6000 , 7000 , 8000 , 9000 , 10000 ] [ def_amount_of_siberit + 1 ] ;
1130: LD_ADDR_EXP 11
1134: PUSH
1135: LD_INT 30
1137: PUSH
1138: LD_INT 60
1140: PUSH
1141: LD_INT 90
1143: PUSH
1144: LD_INT 120
1146: PUSH
1147: LD_INT 150
1149: PUSH
1150: LD_INT 180
1152: PUSH
1153: LD_INT 210
1155: PUSH
1156: LD_INT 240
1158: PUSH
1159: LD_INT 270
1161: PUSH
1162: LD_INT 300
1164: PUSH
1165: LD_INT 400
1167: PUSH
1168: LD_INT 500
1170: PUSH
1171: LD_INT 600
1173: PUSH
1174: LD_INT 700
1176: PUSH
1177: LD_INT 800
1179: PUSH
1180: LD_INT 900
1182: PUSH
1183: LD_INT 1000
1185: PUSH
1186: LD_INT 1250
1188: PUSH
1189: LD_INT 1500
1191: PUSH
1192: LD_INT 1750
1194: PUSH
1195: LD_INT 2000
1197: PUSH
1198: LD_INT 2250
1200: PUSH
1201: LD_INT 2500
1203: PUSH
1204: LD_INT 2750
1206: PUSH
1207: LD_INT 3000
1209: PUSH
1210: LD_INT 3500
1212: PUSH
1213: LD_INT 4000
1215: PUSH
1216: LD_INT 4500
1218: PUSH
1219: LD_INT 5000
1221: PUSH
1222: LD_INT 6000
1224: PUSH
1225: LD_INT 7000
1227: PUSH
1228: LD_INT 8000
1230: PUSH
1231: LD_INT 9000
1233: PUSH
1234: LD_INT 10000
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: PUSH
1273: LD_EXP 1
1277: PUSH
1278: LD_INT 1
1280: PLUS
1281: ARRAY
1282: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1283: LD_ADDR_EXP 6
1287: PUSH
1288: LD_INT 2
1290: PUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 4
1296: PUSH
1297: LD_INT 5
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: PUSH
1306: LD_EXP 43
1310: PUSH
1311: LD_INT 1
1313: PLUS
1314: ARRAY
1315: ST_TO_ADDR
// if ( def_game_rules = 4 ) then
1316: LD_EXP 40
1320: PUSH
1321: LD_INT 4
1323: EQUAL
1324: IFFALSE 1347
// begin starting_resources := [ 10000 , 5000 , 1000 ] ;
1326: LD_ADDR_EXP 8
1330: PUSH
1331: LD_INT 10000
1333: PUSH
1334: LD_INT 5000
1336: PUSH
1337: LD_INT 1000
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: ST_TO_ADDR
// end else
1345: GO 1619
// if ( Game_Type = 5 ) then
1347: LD_EXP 39
1351: PUSH
1352: LD_INT 5
1354: EQUAL
1355: IFFALSE 1473
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1357: LD_ADDR_EXP 8
1361: PUSH
1362: LD_INT 1000
1364: PUSH
1365: LD_INT 100
1367: PUSH
1368: LD_INT 100
1370: PUSH
1371: EMPTY
1372: LIST
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 2000
1378: PUSH
1379: LD_INT 200
1381: PUSH
1382: LD_INT 200
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 5000
1392: PUSH
1393: LD_INT 500
1395: PUSH
1396: LD_INT 500
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 10000
1406: PUSH
1407: LD_INT 1000
1409: PUSH
1410: LD_INT 1000
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 25000
1420: PUSH
1421: LD_INT 2500
1423: PUSH
1424: LD_INT 2500
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 50000
1434: PUSH
1435: LD_INT 5000
1437: PUSH
1438: LD_INT 5000
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: PUSH
1454: LD_EXP 44
1458: PUSH
1459: LD_INT 1
1461: PLUS
1462: ARRAY
1463: ST_TO_ADDR
// starting_crates := [ ] ;
1464: LD_ADDR_EXP 7
1468: PUSH
1469: EMPTY
1470: ST_TO_ADDR
// end else
1471: GO 1619
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1473: LD_ADDR_EXP 8
1477: PUSH
1478: LD_INT 0
1480: PUSH
1481: LD_INT 0
1483: PUSH
1484: LD_INT 0
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 30
1494: PUSH
1495: LD_INT 0
1497: PUSH
1498: LD_INT 0
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 50
1508: PUSH
1509: LD_INT 20
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 80
1522: PUSH
1523: LD_INT 40
1525: PUSH
1526: LD_INT 20
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: PUSH
1540: LD_EXP 44
1544: PUSH
1545: LD_INT 1
1547: PLUS
1548: ARRAY
1549: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1550: LD_ADDR_EXP 7
1554: PUSH
1555: LD_INT 10
1557: PUSH
1558: EMPTY
1559: LIST
1560: PUSH
1561: LD_INT 7
1563: PUSH
1564: LD_INT 14
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: PUSH
1571: LD_INT 6
1573: PUSH
1574: LD_INT 12
1576: PUSH
1577: LD_INT 18
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 5
1587: PUSH
1588: LD_INT 10
1590: PUSH
1591: LD_INT 15
1593: PUSH
1594: LD_INT 20
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_EXP 44
1613: PUSH
1614: LD_INT 1
1616: PLUS
1617: ARRAY
1618: ST_TO_ADDR
// end ; morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1619: LD_ADDR_EXP 10
1623: PUSH
1624: LD_INT 1
1626: NEG
1627: PUSH
1628: LD_INT 350
1630: PUSH
1631: LD_INT 700
1633: PUSH
1634: LD_INT 1400
1636: PUSH
1637: LD_INT 0
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: PUSH
1647: LD_EXP 49
1651: PUSH
1652: LD_INT 1
1654: PLUS
1655: ARRAY
1656: ST_TO_ADDR
// battle_flags_id := [ ] ;
1657: LD_ADDR_EXP 29
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// end ;
1664: LD_VAR 0 1
1668: RET
// function init_map ; var i , j ; begin
1669: LD_INT 0
1671: PPUSH
1672: PPUSH
1673: PPUSH
// normal_oil_deposits_locations := [ [ 28 , 22 ] , [ 69 , 3 ] , [ 138 , 27 ] , [ 180 , 104 ] , [ 138 , 137 ] , [ 76 , 115 ] ] ;
1674: LD_ADDR_EXP 25
1678: PUSH
1679: LD_INT 28
1681: PUSH
1682: LD_INT 22
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 69
1691: PUSH
1692: LD_INT 3
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: LD_INT 138
1701: PUSH
1702: LD_INT 27
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 180
1711: PUSH
1712: LD_INT 104
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 138
1721: PUSH
1722: LD_INT 137
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 76
1731: PUSH
1732: LD_INT 115
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: LIST
1743: LIST
1744: LIST
1745: LIST
1746: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 31 , 38 ] , [ 34 , 21 ] ] , [ [ 58 , 4 ] , [ 82 , 4 ] ] , [ [ 122 , 18 ] , [ 152 , 43 ] ] , [ [ 174 , 90 ] , [ 180 , 120 ] ] , [ [ 152 , 136 ] , [ 130 , 136 ] ] , [ [ 89 , 116 ] , [ 59 , 89 ] ] ] ;
1747: LD_ADDR_EXP 26
1751: PUSH
1752: LD_INT 31
1754: PUSH
1755: LD_INT 38
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PUSH
1762: LD_INT 34
1764: PUSH
1765: LD_INT 21
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 58
1778: PUSH
1779: LD_INT 4
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 82
1788: PUSH
1789: LD_INT 4
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 122
1802: PUSH
1803: LD_INT 18
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 152
1812: PUSH
1813: LD_INT 43
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 174
1826: PUSH
1827: LD_INT 90
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: LD_INT 180
1836: PUSH
1837: LD_INT 120
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 152
1850: PUSH
1851: LD_INT 136
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 130
1860: PUSH
1861: LD_INT 136
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 89
1874: PUSH
1875: LD_INT 116
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PUSH
1882: LD_INT 59
1884: PUSH
1885: LD_INT 89
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 28 , 26 ] , [ 73 , 3 ] , [ 133 , 22 ] , [ 180 , 110 ] , [ 142 , 137 ] , [ 72 , 112 ] ] ;
1904: LD_ADDR_EXP 27
1908: PUSH
1909: LD_INT 28
1911: PUSH
1912: LD_INT 26
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: PUSH
1919: LD_INT 73
1921: PUSH
1922: LD_INT 3
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 133
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: LD_INT 180
1941: PUSH
1942: LD_INT 110
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 142
1951: PUSH
1952: LD_INT 137
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 72
1961: PUSH
1962: LD_INT 112
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 27 , 39 ] , [ 30 , 16 ] ] , [ [ 57 , 8 ] , [ 87 , 8 ] ] , [ [ 128 , 19 ] , [ 146 , 36 ] ] , [ [ 176 , 121 ] , [ 179 , 96 ] ] , [ [ 153 , 132 ] , [ 124 , 133 ] ] , [ [ 85 , 117 ] , [ 62 , 96 ] ] ] ;
1977: LD_ADDR_EXP 28
1981: PUSH
1982: LD_INT 27
1984: PUSH
1985: LD_INT 39
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 30
1994: PUSH
1995: LD_INT 16
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 57
2008: PUSH
2009: LD_INT 8
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 87
2018: PUSH
2019: LD_INT 8
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 128
2032: PUSH
2033: LD_INT 19
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: LD_INT 146
2042: PUSH
2043: LD_INT 36
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 176
2056: PUSH
2057: LD_INT 121
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 179
2066: PUSH
2067: LD_INT 96
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PUSH
2078: LD_INT 153
2080: PUSH
2081: LD_INT 132
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 124
2090: PUSH
2091: LD_INT 133
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: LD_INT 85
2104: PUSH
2105: LD_INT 117
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 62
2114: PUSH
2115: LD_INT 96
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: ST_TO_ADDR
// depot_def := [ [ 53 , 42 , 5 ] , [ 78 , 18 , 0 ] , [ 129 , 43 , 1 ] , [ 155 , 96 , 2 ] , [ 130 , 120 , 3 ] , [ 82 , 98 , 3 ] ] ;
2134: LD_ADDR_EXP 22
2138: PUSH
2139: LD_INT 53
2141: PUSH
2142: LD_INT 42
2144: PUSH
2145: LD_INT 5
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: LIST
2152: PUSH
2153: LD_INT 78
2155: PUSH
2156: LD_INT 18
2158: PUSH
2159: LD_INT 0
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 129
2169: PUSH
2170: LD_INT 43
2172: PUSH
2173: LD_INT 1
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 155
2183: PUSH
2184: LD_INT 96
2186: PUSH
2187: LD_INT 2
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 130
2197: PUSH
2198: LD_INT 120
2200: PUSH
2201: LD_INT 3
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 82
2211: PUSH
2212: LD_INT 98
2214: PUSH
2215: LD_INT 3
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: ST_TO_ADDR
// for i in depot_def do
2231: LD_ADDR_VAR 0 2
2235: PUSH
2236: LD_EXP 22
2240: PUSH
2241: FOR_IN
2242: IFFALSE 2316
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2244: LD_ADDR_EXP 24
2248: PUSH
2249: LD_EXP 24
2253: PUSH
2254: LD_VAR 0 2
2258: PUSH
2259: LD_INT 1
2261: ARRAY
2262: PPUSH
2263: LD_VAR 0 2
2267: PUSH
2268: LD_INT 3
2270: ARRAY
2271: PPUSH
2272: LD_INT 10
2274: PPUSH
2275: CALL_OW 272
2279: PUSH
2280: LD_VAR 0 2
2284: PUSH
2285: LD_INT 2
2287: ARRAY
2288: PPUSH
2289: LD_VAR 0 2
2293: PUSH
2294: LD_INT 3
2296: ARRAY
2297: PPUSH
2298: LD_INT 10
2300: PPUSH
2301: CALL_OW 273
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: ADD
2313: ST_TO_ADDR
2314: GO 2241
2316: POP
2317: POP
// breastworks_def := [ [ [ 65 , 53 , 5 ] , [ 65 , 40 , 4 ] ] , [ [ 76 , 28 , 0 ] , [ 89 , 28 , 5 ] ] , [ [ 115 , 41 , 1 ] , [ 128 , 54 , 0 ] ] , [ [ 143 , 82 , 2 ] , [ 143 , 95 , 1 ] ] , [ [ 131 , 108 , 3 ] , [ 118 , 108 , 2 ] ] , [ [ 80 , 85 , 3 ] , [ 92 , 97 , 4 ] ] ] ;
2318: LD_ADDR_EXP 23
2322: PUSH
2323: LD_INT 65
2325: PUSH
2326: LD_INT 53
2328: PUSH
2329: LD_INT 5
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 65
2339: PUSH
2340: LD_INT 40
2342: PUSH
2343: LD_INT 4
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: LD_INT 76
2357: PUSH
2358: LD_INT 28
2360: PUSH
2361: LD_INT 0
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: LIST
2368: PUSH
2369: LD_INT 89
2371: PUSH
2372: LD_INT 28
2374: PUSH
2375: LD_INT 5
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: LIST
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: PUSH
2387: LD_INT 115
2389: PUSH
2390: LD_INT 41
2392: PUSH
2393: LD_INT 1
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: LIST
2400: PUSH
2401: LD_INT 128
2403: PUSH
2404: LD_INT 54
2406: PUSH
2407: LD_INT 0
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 143
2421: PUSH
2422: LD_INT 82
2424: PUSH
2425: LD_INT 2
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 143
2435: PUSH
2436: LD_INT 95
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: PUSH
2447: EMPTY
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 131
2453: PUSH
2454: LD_INT 108
2456: PUSH
2457: LD_INT 3
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 118
2467: PUSH
2468: LD_INT 108
2470: PUSH
2471: LD_INT 2
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: PUSH
2483: LD_INT 80
2485: PUSH
2486: LD_INT 85
2488: PUSH
2489: LD_INT 3
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 92
2499: PUSH
2500: LD_INT 97
2502: PUSH
2503: LD_INT 4
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: ST_TO_ADDR
// for i = 1 to Side_Positions do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: DOUBLE
2529: LD_INT 1
2531: DEC
2532: ST_TO_ADDR
2533: LD_EXP 18
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2669
// begin if not Side_Positions [ i ] then
2541: LD_EXP 18
2545: PUSH
2546: LD_VAR 0 2
2550: ARRAY
2551: NOT
2552: IFFALSE 2556
// continue ;
2554: GO 2538
// if def_extra_oil_deposits then
2556: LD_EXP 46
2560: IFFALSE 2618
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2562: LD_ADDR_VAR 0 3
2566: PUSH
2567: LD_EXP 26
2571: PUSH
2572: LD_EXP 18
2576: PUSH
2577: LD_VAR 0 2
2581: ARRAY
2582: ARRAY
2583: PUSH
2584: FOR_IN
2585: IFFALSE 2614
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2587: LD_VAR 0 3
2591: PUSH
2592: LD_INT 1
2594: ARRAY
2595: PPUSH
2596: LD_VAR 0 3
2600: PUSH
2601: LD_INT 2
2603: ARRAY
2604: PPUSH
2605: LD_INT 2
2607: PPUSH
2608: CALL_OW 62
2612: GO 2584
2614: POP
2615: POP
2616: GO 2667
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2618: LD_EXP 25
2622: PUSH
2623: LD_EXP 18
2627: PUSH
2628: LD_VAR 0 2
2632: ARRAY
2633: ARRAY
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: PPUSH
2639: LD_EXP 25
2643: PUSH
2644: LD_EXP 18
2648: PUSH
2649: LD_VAR 0 2
2653: ARRAY
2654: ARRAY
2655: PUSH
2656: LD_INT 2
2658: ARRAY
2659: PPUSH
2660: LD_INT 2
2662: PPUSH
2663: CALL_OW 62
// end ;
2667: GO 2538
2669: POP
2670: POP
// if def_extra_sib_deposits then
2671: LD_EXP 47
2675: IFFALSE 2829
// for i = 1 to Side_Positions do
2677: LD_ADDR_VAR 0 2
2681: PUSH
2682: DOUBLE
2683: LD_INT 1
2685: DEC
2686: ST_TO_ADDR
2687: LD_EXP 18
2691: PUSH
2692: FOR_TO
2693: IFFALSE 2827
// begin if not Side_Positions [ i ] then
2695: LD_EXP 18
2699: PUSH
2700: LD_VAR 0 2
2704: ARRAY
2705: NOT
2706: IFFALSE 2710
// continue ;
2708: GO 2692
// if def_extra_sib_deposits = 2 then
2710: LD_EXP 47
2714: PUSH
2715: LD_INT 2
2717: EQUAL
2718: IFFALSE 2776
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2720: LD_ADDR_VAR 0 3
2724: PUSH
2725: LD_EXP 28
2729: PUSH
2730: LD_EXP 18
2734: PUSH
2735: LD_VAR 0 2
2739: ARRAY
2740: ARRAY
2741: PUSH
2742: FOR_IN
2743: IFFALSE 2772
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2745: LD_VAR 0 3
2749: PUSH
2750: LD_INT 1
2752: ARRAY
2753: PPUSH
2754: LD_VAR 0 3
2758: PUSH
2759: LD_INT 2
2761: ARRAY
2762: PPUSH
2763: LD_INT 3
2765: PPUSH
2766: CALL_OW 62
2770: GO 2742
2772: POP
2773: POP
2774: GO 2825
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2776: LD_EXP 27
2780: PUSH
2781: LD_EXP 18
2785: PUSH
2786: LD_VAR 0 2
2790: ARRAY
2791: ARRAY
2792: PUSH
2793: LD_INT 1
2795: ARRAY
2796: PPUSH
2797: LD_EXP 27
2801: PUSH
2802: LD_EXP 18
2806: PUSH
2807: LD_VAR 0 2
2811: ARRAY
2812: ARRAY
2813: PUSH
2814: LD_INT 2
2816: ARRAY
2817: PPUSH
2818: LD_INT 3
2820: PPUSH
2821: CALL_OW 62
// end ;
2825: GO 2692
2827: POP
2828: POP
// end ;
2829: LD_VAR 0 1
2833: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2834: LD_INT 0
2836: PPUSH
2837: PPUSH
2838: PPUSH
// if not Team_Game then
2839: LD_EXP 20
2843: NOT
2844: IFFALSE 2942
// begin for i = 1 to 8 do
2846: LD_ADDR_VAR 0 2
2850: PUSH
2851: DOUBLE
2852: LD_INT 1
2854: DEC
2855: ST_TO_ADDR
2856: LD_INT 8
2858: PUSH
2859: FOR_TO
2860: IFFALSE 2938
// for j = 1 to 8 do
2862: LD_ADDR_VAR 0 3
2866: PUSH
2867: DOUBLE
2868: LD_INT 1
2870: DEC
2871: ST_TO_ADDR
2872: LD_INT 8
2874: PUSH
2875: FOR_TO
2876: IFFALSE 2934
// if i <> j then
2878: LD_VAR 0 2
2882: PUSH
2883: LD_VAR 0 3
2887: NONEQUAL
2888: IFFALSE 2912
// SetAttitude ( i , j , att_neutral , true ) else
2890: LD_VAR 0 2
2894: PPUSH
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: LD_INT 1
2905: PPUSH
2906: CALL_OW 80
2910: GO 2932
// SetAttitude ( i , j , att_friend , true ) ;
2912: LD_VAR 0 2
2916: PPUSH
2917: LD_VAR 0 3
2921: PPUSH
2922: LD_INT 1
2924: PPUSH
2925: LD_INT 1
2927: PPUSH
2928: CALL_OW 80
2932: GO 2875
2934: POP
2935: POP
2936: GO 2859
2938: POP
2939: POP
// end else
2940: GO 3117
// begin if def_shared_vision then
2942: LD_EXP 48
2946: IFFALSE 3011
// begin for i in Teams do
2948: LD_ADDR_VAR 0 2
2952: PUSH
2953: LD_EXP 17
2957: PUSH
2958: FOR_IN
2959: IFFALSE 3009
// for j = 2 to i do
2961: LD_ADDR_VAR 0 3
2965: PUSH
2966: DOUBLE
2967: LD_INT 2
2969: DEC
2970: ST_TO_ADDR
2971: LD_VAR 0 2
2975: PUSH
2976: FOR_TO
2977: IFFALSE 3005
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2979: LD_VAR 0 2
2983: PUSH
2984: LD_VAR 0 3
2988: ARRAY
2989: PPUSH
2990: LD_VAR 0 2
2994: PUSH
2995: LD_INT 1
2997: ARRAY
2998: PPUSH
2999: CALL_OW 343
3003: GO 2976
3005: POP
3006: POP
3007: GO 2958
3009: POP
3010: POP
// end ; for i = 1 to 8 do
3011: LD_ADDR_VAR 0 2
3015: PUSH
3016: DOUBLE
3017: LD_INT 1
3019: DEC
3020: ST_TO_ADDR
3021: LD_INT 8
3023: PUSH
3024: FOR_TO
3025: IFFALSE 3115
// for j = 1 to 8 do
3027: LD_ADDR_VAR 0 3
3031: PUSH
3032: DOUBLE
3033: LD_INT 1
3035: DEC
3036: ST_TO_ADDR
3037: LD_INT 8
3039: PUSH
3040: FOR_TO
3041: IFFALSE 3111
// if Side_Teams [ i ] = Side_Teams [ j ] then
3043: LD_EXP 16
3047: PUSH
3048: LD_VAR 0 2
3052: ARRAY
3053: PUSH
3054: LD_EXP 16
3058: PUSH
3059: LD_VAR 0 3
3063: ARRAY
3064: EQUAL
3065: IFFALSE 3089
// SetAttitude ( i , j , att_friend , true ) else
3067: LD_VAR 0 2
3071: PPUSH
3072: LD_VAR 0 3
3076: PPUSH
3077: LD_INT 1
3079: PPUSH
3080: LD_INT 1
3082: PPUSH
3083: CALL_OW 80
3087: GO 3109
// SetAttitude ( i , j , att_enemy , true ) ;
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_VAR 0 3
3098: PPUSH
3099: LD_INT 2
3101: PPUSH
3102: LD_INT 1
3104: PPUSH
3105: CALL_OW 80
3109: GO 3040
3111: POP
3112: POP
3113: GO 3024
3115: POP
3116: POP
// end ; end ;
3117: LD_VAR 0 1
3121: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3122: LD_INT 0
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
// result := [ ] ;
3128: LD_ADDR_VAR 0 7
3132: PUSH
3133: EMPTY
3134: ST_TO_ADDR
// for i := 1 to count do
3135: LD_ADDR_VAR 0 8
3139: PUSH
3140: DOUBLE
3141: LD_INT 1
3143: DEC
3144: ST_TO_ADDR
3145: LD_VAR 0 1
3149: PUSH
3150: FOR_TO
3151: IFFALSE 3569
// begin uc_direction := Rand ( 0 , 5 ) ;
3153: LD_ADDR_OWVAR 24
3157: PUSH
3158: LD_INT 0
3160: PPUSH
3161: LD_INT 5
3163: PPUSH
3164: CALL_OW 12
3168: ST_TO_ADDR
// if commander then
3169: LD_LOC 1
3173: IFFALSE 3282
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3175: LD_ADDR_OWVAR 26
3179: PUSH
3180: LD_OWVAR 19
3184: PUSH
3185: LD_OWVAR 20
3189: ARRAY
3190: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3191: LD_INT 1
3193: PPUSH
3194: LD_INT 2
3196: PPUSH
3197: CALL_OW 12
3201: PPUSH
3202: LD_VAR 0 2
3206: PPUSH
3207: LD_EXP 6
3211: PUSH
3212: LD_INT 2
3214: PLUS
3215: PPUSH
3216: CALL_OW 380
// hc_importance := 105 ;
3220: LD_ADDR_OWVAR 32
3224: PUSH
3225: LD_INT 105
3227: ST_TO_ADDR
// commander := false ;
3228: LD_ADDR_LOC 1
3232: PUSH
3233: LD_INT 0
3235: ST_TO_ADDR
// if Multiplayer then
3236: LD_OWVAR 4
3240: IFFALSE 3280
// begin hc_gallery := MULTIAVATARS ;
3242: LD_ADDR_OWVAR 33
3246: PUSH
3247: LD_STRING MULTIAVATARS
3249: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3250: LD_ADDR_OWVAR 34
3254: PUSH
3255: LD_OWVAR 20
3259: PPUSH
3260: CALL_OW 525
3264: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3265: LD_ADDR_OWVAR 27
3269: PUSH
3270: LD_OWVAR 20
3274: PPUSH
3275: CALL_OW 526
3279: ST_TO_ADDR
// end ; end else
3280: GO 3345
// begin hc_name :=  ;
3282: LD_ADDR_OWVAR 26
3286: PUSH
3287: LD_STRING 
3289: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 2
3295: PPUSH
3296: CALL_OW 12
3300: PPUSH
3301: LD_VAR 0 2
3305: PPUSH
3306: LD_EXP 6
3310: PPUSH
3311: CALL_OW 380
// hc_importance := 0 ;
3315: LD_ADDR_OWVAR 32
3319: PUSH
3320: LD_INT 0
3322: ST_TO_ADDR
// if Multiplayer then
3323: LD_OWVAR 4
3327: IFFALSE 3345
// begin hc_gallery :=  ;
3329: LD_ADDR_OWVAR 33
3333: PUSH
3334: LD_STRING 
3336: ST_TO_ADDR
// hc_face_number := 0 ;
3337: LD_ADDR_OWVAR 34
3341: PUSH
3342: LD_INT 0
3344: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3345: LD_ADDR_VAR 0 10
3349: PUSH
3350: CALL_OW 44
3354: ST_TO_ADDR
// if global_defined then
3355: LD_LOC 3
3359: IFFALSE 3499
// begin if ( cl = class_soldier ) then
3361: LD_VAR 0 2
3365: PUSH
3366: LD_INT 1
3368: EQUAL
3369: IFFALSE 3389
// j := i + soldiers_created else
3371: LD_ADDR_VAR 0 9
3375: PUSH
3376: LD_VAR 0 8
3380: PUSH
3381: LD_LOC 4
3385: PLUS
3386: ST_TO_ADDR
3387: GO 3399
// j := i ;
3389: LD_ADDR_VAR 0 9
3393: PUSH
3394: LD_VAR 0 8
3398: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3399: LD_LOC 2
3403: PUSH
3404: LD_VAR 0 2
3408: ARRAY
3409: PUSH
3410: LD_VAR 0 9
3414: ARRAY
3415: PPUSH
3416: LD_VAR 0 10
3420: PPUSH
3421: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3425: LD_VAR 0 10
3429: PPUSH
3430: LD_INT 2
3432: PPUSH
3433: LD_LOC 2
3437: PUSH
3438: LD_VAR 0 2
3442: ARRAY
3443: PUSH
3444: LD_VAR 0 9
3448: ARRAY
3449: PPUSH
3450: LD_INT 2
3452: PPUSH
3453: CALL_OW 260
3457: PPUSH
3458: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3462: LD_VAR 0 10
3466: PPUSH
3467: LD_INT 1
3469: PPUSH
3470: LD_LOC 2
3474: PUSH
3475: LD_VAR 0 2
3479: ARRAY
3480: PUSH
3481: LD_VAR 0 9
3485: ARRAY
3486: PPUSH
3487: LD_INT 1
3489: PPUSH
3490: CALL_OW 260
3494: PPUSH
3495: CALL_OW 239
// end ; if building then
3499: LD_VAR 0 6
3503: IFFALSE 3521
// PlaceHumanInUnit ( un , building ) else
3505: LD_VAR 0 10
3509: PPUSH
3510: LD_VAR 0 6
3514: PPUSH
3515: CALL_OW 52
3519: GO 3548
// PlaceUnitXYR ( un , x , y , r , false ) ;
3521: LD_VAR 0 10
3525: PPUSH
3526: LD_VAR 0 3
3530: PPUSH
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_VAR 0 5
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 50
// result := result ^ [ un ] ;
3548: LD_ADDR_VAR 0 7
3552: PUSH
3553: LD_VAR 0 7
3557: PUSH
3558: LD_VAR 0 10
3562: PUSH
3563: EMPTY
3564: LIST
3565: ADD
3566: ST_TO_ADDR
// end ;
3567: GO 3150
3569: POP
3570: POP
// if not global_defined then
3571: LD_LOC 3
3575: NOT
3576: IFFALSE 3654
// if ( global_units >= cl ) then
3578: LD_LOC 2
3582: PUSH
3583: LD_VAR 0 2
3587: GREATEREQUAL
3588: IFFALSE 3629
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3590: LD_ADDR_LOC 2
3594: PUSH
3595: LD_LOC 2
3599: PPUSH
3600: LD_VAR 0 2
3604: PPUSH
3605: LD_LOC 2
3609: PUSH
3610: LD_VAR 0 2
3614: ARRAY
3615: PUSH
3616: LD_VAR 0 7
3620: ADD
3621: PPUSH
3622: CALL_OW 1
3626: ST_TO_ADDR
3627: GO 3654
// global_units := Replace ( global_units , cl , result ) ;
3629: LD_ADDR_LOC 2
3633: PUSH
3634: LD_LOC 2
3638: PPUSH
3639: LD_VAR 0 2
3643: PPUSH
3644: LD_VAR 0 7
3648: PPUSH
3649: CALL_OW 1
3653: ST_TO_ADDR
// if commander then
3654: LD_LOC 1
3658: IFFALSE 3705
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3660: LD_ADDR_EXP 31
3664: PUSH
3665: LD_EXP 31
3669: PPUSH
3670: LD_OWVAR 20
3674: PPUSH
3675: LD_EXP 31
3679: PUSH
3680: LD_OWVAR 20
3684: ARRAY
3685: PUSH
3686: LD_VAR 0 10
3690: ADD
3691: PPUSH
3692: CALL_OW 1
3696: ST_TO_ADDR
// commander := false ;
3697: LD_ADDR_LOC 1
3701: PUSH
3702: LD_INT 0
3704: ST_TO_ADDR
// end ; end ;
3705: LD_VAR 0 7
3709: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3710: LD_INT 0
3712: PPUSH
3713: PPUSH
3714: PPUSH
3715: PPUSH
3716: PPUSH
3717: PPUSH
3718: PPUSH
3719: PPUSH
3720: PPUSH
// if side in [ 0 , 9 ] then
3721: LD_VAR 0 1
3725: PUSH
3726: LD_INT 0
3728: PUSH
3729: LD_INT 9
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: IN
3736: IFFALSE 3740
// exit ;
3738: GO 4790
// pos := Side_Positions [ side ] ;
3740: LD_ADDR_VAR 0 3
3744: PUSH
3745: LD_EXP 18
3749: PUSH
3750: LD_VAR 0 1
3754: ARRAY
3755: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3756: LD_ADDR_OWVAR 21
3760: PUSH
3761: LD_EXP 19
3765: PUSH
3766: LD_VAR 0 1
3770: ARRAY
3771: ST_TO_ADDR
// uc_side := side ;
3772: LD_ADDR_OWVAR 20
3776: PUSH
3777: LD_VAR 0 1
3781: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3782: LD_ADDR_VAR 0 4
3786: PUSH
3787: LD_EXP 22
3791: PUSH
3792: LD_VAR 0 3
3796: ARRAY
3797: PUSH
3798: LD_INT 1
3800: ARRAY
3801: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3802: LD_ADDR_VAR 0 5
3806: PUSH
3807: LD_EXP 22
3811: PUSH
3812: LD_VAR 0 3
3816: ARRAY
3817: PUSH
3818: LD_INT 2
3820: ARRAY
3821: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3822: LD_ADDR_VAR 0 6
3826: PUSH
3827: LD_EXP 22
3831: PUSH
3832: LD_VAR 0 3
3836: ARRAY
3837: PUSH
3838: LD_INT 3
3840: ARRAY
3841: ST_TO_ADDR
// if is_depot then
3842: LD_EXP 3
3846: IFFALSE 3979
// begin bc_type = b_depot ;
3848: LD_ADDR_OWVAR 42
3852: PUSH
3853: LD_INT 0
3855: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3856: LD_ADDR_VAR 0 10
3860: PUSH
3861: LD_VAR 0 4
3865: PPUSH
3866: LD_VAR 0 5
3870: PPUSH
3871: LD_VAR 0 6
3875: PPUSH
3876: CALL_OW 47
3880: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3881: LD_VAR 0 10
3885: PPUSH
3886: LD_STRING @
3888: PUSH
3889: LD_VAR 0 1
3893: STR
3894: PPUSH
3895: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3899: LD_VAR 0 10
3903: PPUSH
3904: CALL_OW 274
3908: PPUSH
3909: LD_INT 1
3911: PPUSH
3912: LD_EXP 8
3916: PUSH
3917: LD_INT 1
3919: ARRAY
3920: PPUSH
3921: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3925: LD_VAR 0 10
3929: PPUSH
3930: CALL_OW 274
3934: PPUSH
3935: LD_INT 2
3937: PPUSH
3938: LD_EXP 8
3942: PUSH
3943: LD_INT 2
3945: ARRAY
3946: PPUSH
3947: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3951: LD_VAR 0 10
3955: PPUSH
3956: CALL_OW 274
3960: PPUSH
3961: LD_INT 3
3963: PPUSH
3964: LD_EXP 8
3968: PUSH
3969: LD_INT 3
3971: ARRAY
3972: PPUSH
3973: CALL_OW 277
// end else
3977: GO 4123
// begin for i := 1 to 3 do
3979: LD_ADDR_VAR 0 7
3983: PUSH
3984: DOUBLE
3985: LD_INT 1
3987: DEC
3988: ST_TO_ADDR
3989: LD_INT 3
3991: PUSH
3992: FOR_TO
3993: IFFALSE 4121
// begin r := starting_resources [ i ] ;
3995: LD_ADDR_VAR 0 8
3999: PUSH
4000: LD_EXP 8
4004: PUSH
4005: LD_VAR 0 7
4009: ARRAY
4010: ST_TO_ADDR
// while r >= 10 do
4011: LD_VAR 0 8
4015: PUSH
4016: LD_INT 10
4018: GREATEREQUAL
4019: IFFALSE 4119
// if r > 50 then
4021: LD_VAR 0 8
4025: PUSH
4026: LD_INT 50
4028: GREATER
4029: IFFALSE 4075
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4031: LD_VAR 0 7
4035: PPUSH
4036: LD_INT 5
4038: PPUSH
4039: LD_VAR 0 4
4043: PPUSH
4044: LD_VAR 0 5
4048: PPUSH
4049: LD_INT 4
4051: PPUSH
4052: LD_INT 0
4054: PPUSH
4055: CALL_OW 60
// r := r - 50 ;
4059: LD_ADDR_VAR 0 8
4063: PUSH
4064: LD_VAR 0 8
4068: PUSH
4069: LD_INT 50
4071: MINUS
4072: ST_TO_ADDR
// end else
4073: GO 4117
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4075: LD_VAR 0 7
4079: PPUSH
4080: LD_VAR 0 8
4084: PUSH
4085: LD_INT 10
4087: DIV
4088: PPUSH
4089: LD_VAR 0 4
4093: PPUSH
4094: LD_VAR 0 5
4098: PPUSH
4099: LD_INT 4
4101: PPUSH
4102: LD_INT 0
4104: PPUSH
4105: CALL_OW 60
// r := 0 ;
4109: LD_ADDR_VAR 0 8
4113: PUSH
4114: LD_INT 0
4116: ST_TO_ADDR
// end ;
4117: GO 4011
// end ;
4119: GO 3992
4121: POP
4122: POP
// end ; for r in starting_crates do
4123: LD_ADDR_VAR 0 8
4127: PUSH
4128: LD_EXP 7
4132: PUSH
4133: FOR_IN
4134: IFFALSE 4166
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4136: LD_INT 1
4138: PPUSH
4139: LD_INT 5
4141: PPUSH
4142: LD_VAR 0 4
4146: PPUSH
4147: LD_VAR 0 5
4151: PPUSH
4152: LD_VAR 0 8
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 60
4164: GO 4133
4166: POP
4167: POP
// if def_morale_flags then
4168: LD_EXP 49
4172: IFFALSE 4311
// begin x := start_def [ pos ] [ 1 ] ;
4174: LD_ADDR_VAR 0 4
4178: PUSH
4179: LD_EXP 24
4183: PUSH
4184: LD_VAR 0 3
4188: ARRAY
4189: PUSH
4190: LD_INT 1
4192: ARRAY
4193: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4194: LD_ADDR_VAR 0 5
4198: PUSH
4199: LD_EXP 24
4203: PUSH
4204: LD_VAR 0 3
4208: ARRAY
4209: PUSH
4210: LD_INT 2
4212: ARRAY
4213: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4214: LD_VAR 0 4
4218: PPUSH
4219: LD_VAR 0 5
4223: PPUSH
4224: LD_INT 12
4226: PPUSH
4227: LD_INT 2
4229: PPUSH
4230: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4234: LD_ADDR_EXP 29
4238: PUSH
4239: LD_EXP 29
4243: PUSH
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_VAR 0 4
4253: PPUSH
4254: LD_VAR 0 5
4258: PPUSH
4259: LD_INT 1
4261: PUSH
4262: LD_INT 100
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: LD_INT 2
4271: PUSH
4272: LD_INT 50
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PUSH
4279: LD_INT 3
4281: PUSH
4282: LD_INT 20
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: PUSH
4289: LD_INT 20
4291: PUSH
4292: LD_INT 100
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: PPUSH
4305: CALL_OW 418
4309: ADD
4310: ST_TO_ADDR
// end ; commander := true ;
4311: LD_ADDR_LOC 1
4315: PUSH
4316: LD_INT 1
4318: ST_TO_ADDR
// soldiers_created := 0 ;
4319: LD_ADDR_LOC 4
4323: PUSH
4324: LD_INT 0
4326: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4327: LD_ADDR_VAR 0 7
4331: PUSH
4332: DOUBLE
4333: LD_INT 1
4335: DEC
4336: ST_TO_ADDR
4337: LD_EXP 4
4341: PUSH
4342: FOR_TO
4343: IFFALSE 4496
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4345: LD_ADDR_VAR 0 4
4349: PUSH
4350: LD_EXP 23
4354: PUSH
4355: LD_VAR 0 3
4359: ARRAY
4360: PUSH
4361: LD_VAR 0 7
4365: ARRAY
4366: PUSH
4367: LD_INT 1
4369: ARRAY
4370: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4371: LD_ADDR_VAR 0 5
4375: PUSH
4376: LD_EXP 23
4380: PUSH
4381: LD_VAR 0 3
4385: ARRAY
4386: PUSH
4387: LD_VAR 0 7
4391: ARRAY
4392: PUSH
4393: LD_INT 2
4395: ARRAY
4396: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4397: LD_ADDR_VAR 0 6
4401: PUSH
4402: LD_EXP 23
4406: PUSH
4407: LD_VAR 0 3
4411: ARRAY
4412: PUSH
4413: LD_VAR 0 7
4417: ARRAY
4418: PUSH
4419: LD_INT 3
4421: ARRAY
4422: ST_TO_ADDR
// bc_type := b_breastwork ;
4423: LD_ADDR_OWVAR 42
4427: PUSH
4428: LD_INT 31
4430: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4431: LD_ADDR_VAR 0 9
4435: PUSH
4436: LD_VAR 0 4
4440: PPUSH
4441: LD_VAR 0 5
4445: PPUSH
4446: LD_VAR 0 6
4450: PPUSH
4451: CALL_OW 47
4455: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4456: LD_INT 1
4458: PPUSH
4459: LD_INT 1
4461: PPUSH
4462: LD_INT 0
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: LD_VAR 0 9
4475: PPUSH
4476: CALL 3122 0 6
// soldiers_created := soldiers_created + 1 ;
4480: LD_ADDR_LOC 4
4484: PUSH
4485: LD_LOC 4
4489: PUSH
4490: LD_INT 1
4492: PLUS
4493: ST_TO_ADDR
// end ;
4494: GO 4342
4496: POP
4497: POP
// x := start_def [ pos ] [ 1 ] ;
4498: LD_ADDR_VAR 0 4
4502: PUSH
4503: LD_EXP 24
4507: PUSH
4508: LD_VAR 0 3
4512: ARRAY
4513: PUSH
4514: LD_INT 1
4516: ARRAY
4517: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4518: LD_ADDR_VAR 0 5
4522: PUSH
4523: LD_EXP 24
4527: PUSH
4528: LD_VAR 0 3
4532: ARRAY
4533: PUSH
4534: LD_INT 2
4536: ARRAY
4537: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4538: LD_LOC 8
4542: PUSH
4543: LD_EXP 4
4547: MINUS
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: LD_VAR 0 4
4556: PPUSH
4557: LD_VAR 0 5
4561: PPUSH
4562: LD_INT 5
4564: PPUSH
4565: LD_INT 0
4567: PPUSH
4568: CALL 3122 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4572: LD_LOC 5
4576: PPUSH
4577: LD_INT 2
4579: PPUSH
4580: LD_VAR 0 4
4584: PPUSH
4585: LD_VAR 0 5
4589: PPUSH
4590: LD_INT 5
4592: PPUSH
4593: LD_INT 0
4595: PPUSH
4596: CALL 3122 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4600: LD_LOC 7
4604: PPUSH
4605: LD_INT 3
4607: PPUSH
4608: LD_VAR 0 4
4612: PPUSH
4613: LD_VAR 0 5
4617: PPUSH
4618: LD_INT 5
4620: PPUSH
4621: LD_INT 0
4623: PPUSH
4624: CALL 3122 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4628: LD_LOC 6
4632: PPUSH
4633: LD_INT 4
4635: PPUSH
4636: LD_VAR 0 4
4640: PPUSH
4641: LD_VAR 0 5
4645: PPUSH
4646: LD_INT 5
4648: PPUSH
4649: LD_INT 0
4651: PPUSH
4652: CALL 3122 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4656: LD_EXP 50
4660: PUSH
4661: LD_INT 20
4663: PPUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: CALL_OW 321
4673: PUSH
4674: LD_INT 1
4676: EQUAL
4677: AND
4678: IFFALSE 4695
// SetTech ( tech_SibDet , side , state_researched ) ;
4680: LD_INT 20
4682: PPUSH
4683: LD_VAR 0 1
4687: PPUSH
4688: LD_INT 2
4690: PPUSH
4691: CALL_OW 322
// if def_siberite_bomb = 1 then
4695: LD_EXP 53
4699: PUSH
4700: LD_INT 1
4702: EQUAL
4703: IFFALSE 4737
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4705: LD_INT 25
4707: PPUSH
4708: LD_VAR 0 1
4712: PPUSH
4713: LD_INT 1
4715: PPUSH
4716: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4720: LD_INT 73
4722: PPUSH
4723: LD_VAR 0 1
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 322
// end else
4735: GO 4767
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4737: LD_INT 25
4739: PPUSH
4740: LD_VAR 0 1
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4752: LD_INT 73
4754: PPUSH
4755: LD_VAR 0 1
4759: PPUSH
4760: LD_INT 0
4762: PPUSH
4763: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4767: LD_INT 24
4769: PPUSH
4770: LD_VAR 0 1
4774: PPUSH
4775: LD_INT 0
4777: PPUSH
4778: CALL_OW 322
// global_defined := true ;
4782: LD_ADDR_LOC 3
4786: PUSH
4787: LD_INT 1
4789: ST_TO_ADDR
// end ;
4790: LD_VAR 0 2
4794: RET
// every 0 0$1 do
4795: GO 4797
4797: DISABLE
// if ( def_siberite_bomb > 1 ) then
4798: LD_EXP 53
4802: PUSH
4803: LD_INT 1
4805: GREATER
4806: IFFALSE 4821
// begin wait ( siberite_bomb_Delay ) ;
4808: LD_EXP 15
4812: PPUSH
4813: CALL_OW 67
// EnableSibFiss ;
4817: CALL 4822 0 0
// end ;
4821: END
// function EnableSibFiss ; var i ; begin
4822: LD_INT 0
4824: PPUSH
4825: PPUSH
// for i := 1 to 8 do
4826: LD_ADDR_VAR 0 2
4830: PUSH
4831: DOUBLE
4832: LD_INT 1
4834: DEC
4835: ST_TO_ADDR
4836: LD_INT 8
4838: PUSH
4839: FOR_TO
4840: IFFALSE 4886
// if Side_Positions [ i ] then
4842: LD_EXP 18
4846: PUSH
4847: LD_VAR 0 2
4851: ARRAY
4852: IFFALSE 4884
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4854: LD_INT 25
4856: PPUSH
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_INT 1
4864: PPUSH
4865: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4869: LD_INT 73
4871: PPUSH
4872: LD_VAR 0 2
4876: PPUSH
4877: LD_INT 1
4879: PPUSH
4880: CALL_OW 322
// end ;
4884: GO 4839
4886: POP
4887: POP
// end ;
4888: LD_VAR 0 1
4892: RET
// function prepare_sides ; var i ; begin
4893: LD_INT 0
4895: PPUSH
4896: PPUSH
// global_units := [ ] ;
4897: LD_ADDR_LOC 2
4901: PUSH
4902: EMPTY
4903: ST_TO_ADDR
// global_defined := false ;
4904: LD_ADDR_LOC 3
4908: PUSH
4909: LD_INT 0
4911: ST_TO_ADDR
// CountClassMembers ;
4912: CALL 4962 0 0
// for i := 1 to 8 do
4916: LD_ADDR_VAR 0 2
4920: PUSH
4921: DOUBLE
4922: LD_INT 1
4924: DEC
4925: ST_TO_ADDR
4926: LD_INT 8
4928: PUSH
4929: FOR_TO
4930: IFFALSE 4955
// if Side_Positions [ i ] then
4932: LD_EXP 18
4936: PUSH
4937: LD_VAR 0 2
4941: ARRAY
4942: IFFALSE 4953
// prepare_side ( i ) ;
4944: LD_VAR 0 2
4948: PPUSH
4949: CALL 3710 0 1
4953: GO 4929
4955: POP
4956: POP
// end ;
4957: LD_VAR 0 1
4961: RET
// function CountClassMembers ; var Mode ; begin
4962: LD_INT 0
4964: PPUSH
4965: PPUSH
// if No_Mechs then
4966: LD_EXP 55
4970: IFFALSE 4982
// Mode := 2 else
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: LD_INT 2
4979: ST_TO_ADDR
4980: GO 4990
// Mode := 1 ;
4982: LD_ADDR_VAR 0 2
4986: PUSH
4987: LD_INT 1
4989: ST_TO_ADDR
// neng := number_of_people ;
4990: LD_ADDR_LOC 5
4994: PUSH
4995: LD_EXP 5
4999: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5000: LD_ADDR_LOC 8
5004: PUSH
5005: LD_LOC 5
5009: PUSH
5010: LD_INT 4
5012: PUSH
5013: LD_INT 3
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_VAR 0 2
5024: ARRAY
5025: DIV
5026: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5027: LD_LOC 8
5031: PUSH
5032: LD_EXP 4
5036: LESS
5037: IFFALSE 5049
// nsol := number_of_breastworks ;
5039: LD_ADDR_LOC 8
5043: PUSH
5044: LD_EXP 4
5048: ST_TO_ADDR
// neng := neng - nsol ;
5049: LD_ADDR_LOC 5
5053: PUSH
5054: LD_LOC 5
5058: PUSH
5059: LD_LOC 8
5063: MINUS
5064: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5065: LD_ADDR_LOC 6
5069: PUSH
5070: LD_LOC 5
5074: PUSH
5075: LD_INT 3
5077: PUSH
5078: LD_INT 2
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: PUSH
5085: LD_VAR 0 2
5089: ARRAY
5090: DIV
5091: ST_TO_ADDR
// if ( nsci < 1 ) then
5092: LD_LOC 6
5096: PUSH
5097: LD_INT 1
5099: LESS
5100: IFFALSE 5110
// nsci := 1 ;
5102: LD_ADDR_LOC 6
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// neng := neng - nsci ;
5110: LD_ADDR_LOC 5
5114: PUSH
5115: LD_LOC 5
5119: PUSH
5120: LD_LOC 6
5124: MINUS
5125: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5126: LD_ADDR_LOC 7
5130: PUSH
5131: LD_LOC 5
5135: PUSH
5136: LD_INT 2
5138: DIV
5139: PUSH
5140: LD_INT 0
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: LD_VAR 0 2
5151: ARRAY
5152: ST_TO_ADDR
// neng := neng - nmech ;
5153: LD_ADDR_LOC 5
5157: PUSH
5158: LD_LOC 5
5162: PUSH
5163: LD_LOC 7
5167: MINUS
5168: ST_TO_ADDR
// if ( neng < 1 ) then
5169: LD_LOC 5
5173: PUSH
5174: LD_INT 1
5176: LESS
5177: IFFALSE 5187
// neng := 1 ;
5179: LD_ADDR_LOC 5
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// end ;
5187: LD_VAR 0 1
5191: RET
// starting begin disable ( 98 ) ;
5192: LD_INT 98
5194: DISABLE_MARKED
// disable ( 99 ) ;
5195: LD_INT 99
5197: DISABLE_MARKED
// disable ( 100 ) ;
5198: LD_INT 100
5200: DISABLE_MARKED
// disable ( 200 ) ;
5201: LD_INT 200
5203: DISABLE_MARKED
// disable ( 400 ) ;
5204: LD_INT 400
5206: DISABLE_MARKED
// disable ( 401 ) ;
5207: LD_INT 401
5209: DISABLE_MARKED
// disable ( 600 ) ;
5210: LD_INT 600
5212: DISABLE_MARKED
// mp_selectmsg := true ;
5213: LD_ADDR_OWVAR 13
5217: PUSH
5218: LD_INT 1
5220: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5221: CALL 68 0 0
// init_map ;
5225: CALL 1669 0 0
// set_shared_visions_and_alliances ;
5229: CALL 2834 0 0
// ResetFog ;
5233: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5237: LD_OWVAR 2
5241: PPUSH
5242: CALL_OW 520
// AnimateTrees ( true ) ;
5246: LD_INT 1
5248: PPUSH
5249: CALL_OW 573
// prepare_sides ;
5253: CALL 4893 0 0
// init_respawning ;
5257: CALL 18940 0 0
// Init_Win_Condition ;
5261: CALL 12921 0 0
// InitLimits ;
5265: CALL 11510 0 0
// ShowTimer ;
5269: CALL 12447 0 0
// case Game_Type of 3 :
5273: LD_EXP 39
5277: PUSH
5278: LD_INT 3
5280: DOUBLE
5281: EQUAL
5282: IFTRUE 5286
5284: GO 5292
5286: POP
// enable ( 100 ) ; 4 :
5287: LD_INT 100
5289: ENABLE_MARKED
5290: GO 5308
5292: LD_INT 4
5294: DOUBLE
5295: EQUAL
5296: IFTRUE 5300
5298: GO 5307
5300: POP
// InitBloodGods ; end ;
5301: CALL 9073 0 0
5305: GO 5308
5307: POP
// music_nat := Side_Nations [ your_side ] ;
5308: LD_ADDR_OWVAR 71
5312: PUSH
5313: LD_EXP 19
5317: PUSH
5318: LD_OWVAR 2
5322: ARRAY
5323: ST_TO_ADDR
// if IAmSpec then
5324: CALL_OW 531
5328: IFFALSE 5352
// begin fogOff ( true ) ;
5330: LD_INT 1
5332: PPUSH
5333: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
5337: LD_INT 104
5339: PPUSH
5340: LD_INT 69
5342: PPUSH
5343: CALL_OW 86
// enable ( 400 ) ;
5347: LD_INT 400
5349: ENABLE_MARKED
// end else
5350: GO 5398
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5352: LD_EXP 24
5356: PUSH
5357: LD_EXP 18
5361: PUSH
5362: LD_OWVAR 2
5366: ARRAY
5367: ARRAY
5368: PUSH
5369: LD_INT 1
5371: ARRAY
5372: PPUSH
5373: LD_EXP 24
5377: PUSH
5378: LD_EXP 18
5382: PUSH
5383: LD_OWVAR 2
5387: ARRAY
5388: ARRAY
5389: PUSH
5390: LD_INT 2
5392: ARRAY
5393: PPUSH
5394: CALL_OW 86
// end ; InitApeman ;
5398: CALL 6159 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5402: LD_ADDR_EXP 58
5406: PUSH
5407: LD_INT 8
5409: PUSH
5410: LD_INT 9
5412: PUSH
5413: LD_INT 10
5415: PUSH
5416: LD_INT 11
5418: PUSH
5419: LD_INT 12
5421: PUSH
5422: LD_INT 13
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: ST_TO_ADDR
// BeginBuildUp ;
5433: CALL 19434 0 0
// end ; end_of_file
5437: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5438: GO 5440
5440: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5441: LD_INT 4
5443: PPUSH
5444: LD_INT 5
5446: PPUSH
5447: CALL_OW 12
5451: PPUSH
5452: LD_INT 1
5454: PPUSH
5455: CALL_OW 57
// enable ;
5459: ENABLE
// end ;
5460: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5461: GO 5463
5463: DISABLE
5464: LD_INT 0
5466: PPUSH
5467: PPUSH
// begin case tick of 1 .. 1 1$0 :
5468: LD_OWVAR 1
5472: PUSH
5473: LD_INT 1
5475: DOUBLE
5476: GREATEREQUAL
5477: IFFALSE 5485
5479: LD_INT 2100
5481: DOUBLE
5482: LESSEQUAL
5483: IFTRUE 5487
5485: GO 5515
5487: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5488: LD_EXP 9
5492: PUSH
5493: LD_INT 100
5495: DIVREAL
5496: PUSH
5497: LD_INT 525
5499: PPUSH
5500: LD_INT 1050
5502: PPUSH
5503: CALL_OW 12
5507: MUL
5508: PPUSH
5509: CALL_OW 67
5513: GO 5817
5515: LD_INT 2100
5517: PUSH
5518: LD_INT 1
5520: PLUS
5521: DOUBLE
5522: GREATEREQUAL
5523: IFFALSE 5531
5525: LD_INT 10500
5527: DOUBLE
5528: LESSEQUAL
5529: IFTRUE 5533
5531: GO 5561
5533: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5534: LD_EXP 9
5538: PUSH
5539: LD_INT 100
5541: DIVREAL
5542: PUSH
5543: LD_INT 1050
5545: PPUSH
5546: LD_INT 1750
5548: PPUSH
5549: CALL_OW 12
5553: MUL
5554: PPUSH
5555: CALL_OW 67
5559: GO 5817
5561: LD_INT 10500
5563: PUSH
5564: LD_INT 1
5566: PLUS
5567: DOUBLE
5568: GREATEREQUAL
5569: IFFALSE 5577
5571: LD_INT 21000
5573: DOUBLE
5574: LESSEQUAL
5575: IFTRUE 5579
5577: GO 5607
5579: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5580: LD_EXP 9
5584: PUSH
5585: LD_INT 100
5587: DIVREAL
5588: PUSH
5589: LD_INT 1750
5591: PPUSH
5592: LD_INT 2100
5594: PPUSH
5595: CALL_OW 12
5599: MUL
5600: PPUSH
5601: CALL_OW 67
5605: GO 5817
5607: LD_INT 21000
5609: PUSH
5610: LD_INT 1
5612: PLUS
5613: DOUBLE
5614: GREATEREQUAL
5615: IFFALSE 5623
5617: LD_INT 42000
5619: DOUBLE
5620: LESSEQUAL
5621: IFTRUE 5625
5623: GO 5653
5625: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5626: LD_EXP 9
5630: PUSH
5631: LD_INT 100
5633: DIVREAL
5634: PUSH
5635: LD_INT 2100
5637: PPUSH
5638: LD_INT 2275
5640: PPUSH
5641: CALL_OW 12
5645: MUL
5646: PPUSH
5647: CALL_OW 67
5651: GO 5817
5653: LD_INT 42000
5655: PUSH
5656: LD_INT 1
5658: PLUS
5659: DOUBLE
5660: GREATEREQUAL
5661: IFFALSE 5669
5663: LD_INT 63000
5665: DOUBLE
5666: LESSEQUAL
5667: IFTRUE 5671
5669: GO 5699
5671: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5672: LD_EXP 9
5676: PUSH
5677: LD_INT 100
5679: DIVREAL
5680: PUSH
5681: LD_INT 2275
5683: PPUSH
5684: LD_INT 2450
5686: PPUSH
5687: CALL_OW 12
5691: MUL
5692: PPUSH
5693: CALL_OW 67
5697: GO 5817
5699: LD_INT 63000
5701: PUSH
5702: LD_INT 1
5704: PLUS
5705: DOUBLE
5706: GREATEREQUAL
5707: IFFALSE 5715
5709: LD_INT 105000
5711: DOUBLE
5712: LESSEQUAL
5713: IFTRUE 5717
5715: GO 5745
5717: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5718: LD_EXP 9
5722: PUSH
5723: LD_INT 100
5725: DIVREAL
5726: PUSH
5727: LD_INT 2450
5729: PPUSH
5730: LD_INT 2800
5732: PPUSH
5733: CALL_OW 12
5737: MUL
5738: PPUSH
5739: CALL_OW 67
5743: GO 5817
5745: LD_INT 105000
5747: PUSH
5748: LD_INT 1
5750: PLUS
5751: DOUBLE
5752: GREATEREQUAL
5753: IFFALSE 5761
5755: LD_INT 630000
5757: DOUBLE
5758: LESSEQUAL
5759: IFTRUE 5763
5761: GO 5791
5763: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5764: LD_EXP 9
5768: PUSH
5769: LD_INT 100
5771: DIVREAL
5772: PUSH
5773: LD_INT 2800
5775: PPUSH
5776: LD_INT 3500
5778: PPUSH
5779: CALL_OW 12
5783: MUL
5784: PPUSH
5785: CALL_OW 67
5789: GO 5817
5791: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5792: LD_EXP 9
5796: PUSH
5797: LD_INT 100
5799: DIVREAL
5800: PUSH
5801: LD_INT 3500
5803: PPUSH
5804: LD_INT 3850
5806: PPUSH
5807: CALL_OW 12
5811: MUL
5812: PPUSH
5813: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5817: LD_ADDR_VAR 0 2
5821: PUSH
5822: LD_INT 3
5824: PPUSH
5825: LD_INT 5
5827: PPUSH
5828: CALL_OW 12
5832: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5833: LD_ADDR_VAR 0 1
5837: PUSH
5838: LD_EXP 18
5842: PUSH
5843: LD_INT 0
5845: PUSH
5846: EMPTY
5847: LIST
5848: DIFF
5849: PUSH
5850: FOR_IN
5851: IFFALSE 5900
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5853: LD_VAR 0 2
5857: PPUSH
5858: LD_EXP 24
5862: PUSH
5863: LD_VAR 0 1
5867: ARRAY
5868: PUSH
5869: LD_INT 1
5871: ARRAY
5872: PPUSH
5873: LD_EXP 24
5877: PUSH
5878: LD_VAR 0 1
5882: ARRAY
5883: PUSH
5884: LD_INT 2
5886: ARRAY
5887: PPUSH
5888: LD_INT 20
5890: PPUSH
5891: LD_INT 1
5893: PPUSH
5894: CALL_OW 56
5898: GO 5850
5900: POP
5901: POP
// enable ;
5902: ENABLE
// end ;
5903: PPOPN 2
5905: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
5906: GO 5908
5908: DISABLE
5909: LD_INT 0
5911: PPUSH
5912: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
5913: LD_INT 1
5915: PPUSH
5916: LD_INT 1
5918: PPUSH
5919: CALL_OW 287
5923: PUSH
5924: LD_INT 200
5926: PUSH
5927: LD_EXP 9
5931: MINUS
5932: PUSH
5933: LD_INT 100
5935: DIVREAL
5936: PUSH
5937: LD_INT 5
5939: MUL
5940: LESS
5941: IFFALSE 5964
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
5943: LD_INT 3
5945: PPUSH
5946: LD_INT 5
5948: PPUSH
5949: CALL_OW 12
5953: PPUSH
5954: LD_INT 1
5956: PPUSH
5957: LD_INT 1
5959: PPUSH
5960: CALL_OW 55
// enable ;
5964: ENABLE
// end ; end_of_file
5965: PPOPN 2
5967: END
// every 20 20$00 trigger apemanNumber do
5968: LD_EXP 32
5972: IFFALSE 6005
5974: GO 5976
5976: DISABLE
// begin enable ;
5977: ENABLE
// if apeLevel >= 8 then
5978: LD_EXP 37
5982: PUSH
5983: LD_INT 8
5985: GREATEREQUAL
5986: IFFALSE 5991
// disable else
5988: DISABLE
5989: GO 6005
// apeLevel := apeLevel + 1 ;
5991: LD_ADDR_EXP 37
5995: PUSH
5996: LD_EXP 37
6000: PUSH
6001: LD_INT 1
6003: PLUS
6004: ST_TO_ADDR
// end ;
6005: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6006: LD_EXP 32
6010: PUSH
6011: LD_EXP 33
6015: LESS
6016: IFFALSE 6156
6018: GO 6020
6020: DISABLE
6021: LD_INT 0
6023: PPUSH
6024: PPUSH
6025: PPUSH
6026: PPUSH
// begin enable ;
6027: ENABLE
// for i := 1 to apemanPos do
6028: LD_ADDR_VAR 0 1
6032: PUSH
6033: DOUBLE
6034: LD_INT 1
6036: DEC
6037: ST_TO_ADDR
6038: LD_EXP 35
6042: PUSH
6043: FOR_TO
6044: IFFALSE 6154
// begin if apemanPlayerCount [ i ] then
6046: LD_EXP 36
6050: PUSH
6051: LD_VAR 0 1
6055: ARRAY
6056: IFFALSE 6152
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6058: LD_EXP 36
6062: PUSH
6063: LD_VAR 0 1
6067: ARRAY
6068: PUSH
6069: LD_EXP 35
6073: PUSH
6074: LD_VAR 0 1
6078: ARRAY
6079: GREATER
6080: IFFALSE 6152
// begin ape := PrepareApeman ;
6082: LD_ADDR_VAR 0 2
6086: PUSH
6087: CALL 6667 0 0
6091: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6092: LD_VAR 0 2
6096: PPUSH
6097: LD_EXP 38
6101: PUSH
6102: LD_VAR 0 1
6106: ARRAY
6107: PPUSH
6108: LD_INT 0
6110: PPUSH
6111: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6115: LD_ADDR_EXP 35
6119: PUSH
6120: LD_EXP 35
6124: PPUSH
6125: LD_VAR 0 1
6129: PPUSH
6130: LD_EXP 35
6134: PUSH
6135: LD_VAR 0 1
6139: ARRAY
6140: PUSH
6141: LD_VAR 0 2
6145: UNION
6146: PPUSH
6147: CALL_OW 1
6151: ST_TO_ADDR
// end ; end ; end ;
6152: GO 6043
6154: POP
6155: POP
// end ;
6156: PPOPN 4
6158: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6159: LD_INT 0
6161: PPUSH
6162: PPUSH
6163: PPUSH
6164: PPUSH
6165: PPUSH
6166: PPUSH
6167: PPUSH
// playersAmount := 0 ;
6168: LD_ADDR_VAR 0 3
6172: PUSH
6173: LD_INT 0
6175: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
6176: LD_ADDR_VAR 0 7
6180: PUSH
6181: LD_INT 2
6183: PUSH
6184: LD_INT 3
6186: PUSH
6187: LD_INT 4
6189: PUSH
6190: LD_INT 5
6192: PUSH
6193: LD_INT 6
6195: PUSH
6196: LD_INT 7
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6207: LD_ADDR_EXP 38
6211: PUSH
6212: LD_INT 0
6214: PUSH
6215: LD_INT 0
6217: PUSH
6218: LD_INT 0
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: LD_INT 0
6232: PUSH
6233: LD_INT 0
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: ST_TO_ADDR
// for j = 1 to Side_Positions do
6246: LD_ADDR_VAR 0 4
6250: PUSH
6251: DOUBLE
6252: LD_INT 1
6254: DEC
6255: ST_TO_ADDR
6256: LD_EXP 18
6260: PUSH
6261: FOR_TO
6262: IFFALSE 6329
// if Side_Positions [ j ] then
6264: LD_EXP 18
6268: PUSH
6269: LD_VAR 0 4
6273: ARRAY
6274: IFFALSE 6327
// begin playersAmount := playersAmount + 1 ;
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: LD_VAR 0 3
6285: PUSH
6286: LD_INT 1
6288: PLUS
6289: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6290: LD_ADDR_EXP 38
6294: PUSH
6295: LD_EXP 38
6299: PPUSH
6300: LD_VAR 0 4
6304: PPUSH
6305: LD_VAR 0 7
6309: PUSH
6310: LD_EXP 18
6314: PUSH
6315: LD_VAR 0 4
6319: ARRAY
6320: ARRAY
6321: PPUSH
6322: CALL_OW 1
6326: ST_TO_ADDR
// end ;
6327: GO 6261
6329: POP
6330: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6331: LD_ADDR_EXP 34
6335: PUSH
6336: LD_INT 3
6338: PUSH
6339: LD_EXP 14
6343: MUL
6344: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6345: LD_ADDR_EXP 32
6349: PUSH
6350: LD_VAR 0 3
6354: PUSH
6355: LD_EXP 34
6359: MUL
6360: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6361: LD_ADDR_EXP 33
6365: PUSH
6366: LD_EXP 32
6370: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6371: LD_ADDR_EXP 35
6375: PUSH
6376: LD_INT 0
6378: PUSH
6379: LD_INT 0
6381: PUSH
6382: LD_INT 0
6384: PUSH
6385: LD_INT 0
6387: PUSH
6388: LD_INT 0
6390: PUSH
6391: LD_INT 0
6393: PUSH
6394: LD_INT 0
6396: PUSH
6397: LD_INT 0
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6410: LD_ADDR_EXP 36
6414: PUSH
6415: LD_INT 0
6417: PUSH
6418: LD_INT 0
6420: PUSH
6421: LD_INT 0
6423: PUSH
6424: LD_INT 0
6426: PUSH
6427: LD_INT 0
6429: PUSH
6430: LD_INT 0
6432: PUSH
6433: LD_INT 0
6435: PUSH
6436: LD_INT 0
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: ST_TO_ADDR
// apeLevel := 1 ;
6449: LD_ADDR_EXP 37
6453: PUSH
6454: LD_INT 1
6456: ST_TO_ADDR
// if not apemanNumber then
6457: LD_EXP 32
6461: NOT
6462: IFFALSE 6466
// exit ;
6464: GO 6662
// for i := 1 to apemanPerPlayer do
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: DOUBLE
6472: LD_INT 1
6474: DEC
6475: ST_TO_ADDR
6476: LD_EXP 34
6480: PUSH
6481: FOR_TO
6482: IFFALSE 6660
// begin for j := 1 to Side_Positions do
6484: LD_ADDR_VAR 0 4
6488: PUSH
6489: DOUBLE
6490: LD_INT 1
6492: DEC
6493: ST_TO_ADDR
6494: LD_EXP 18
6498: PUSH
6499: FOR_TO
6500: IFFALSE 6656
// if Side_Positions [ j ] then
6502: LD_EXP 18
6506: PUSH
6507: LD_VAR 0 4
6511: ARRAY
6512: IFFALSE 6654
// begin pos := Side_Positions [ j ] ;
6514: LD_ADDR_VAR 0 6
6518: PUSH
6519: LD_EXP 18
6523: PUSH
6524: LD_VAR 0 4
6528: ARRAY
6529: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6530: LD_ADDR_EXP 36
6534: PUSH
6535: LD_EXP 36
6539: PPUSH
6540: LD_VAR 0 4
6544: PPUSH
6545: LD_EXP 36
6549: PUSH
6550: LD_VAR 0 4
6554: ARRAY
6555: PUSH
6556: LD_INT 1
6558: PLUS
6559: PPUSH
6560: CALL_OW 1
6564: ST_TO_ADDR
// ape := PrepareApeman ;
6565: LD_ADDR_VAR 0 5
6569: PUSH
6570: CALL 6667 0 0
6574: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6575: LD_ADDR_EXP 35
6579: PUSH
6580: LD_EXP 35
6584: PPUSH
6585: LD_VAR 0 4
6589: PPUSH
6590: LD_EXP 35
6594: PUSH
6595: LD_VAR 0 4
6599: ARRAY
6600: PPUSH
6601: LD_EXP 35
6605: PUSH
6606: LD_VAR 0 4
6610: ARRAY
6611: PUSH
6612: LD_INT 1
6614: PLUS
6615: PPUSH
6616: LD_VAR 0 5
6620: PPUSH
6621: CALL_OW 1
6625: PPUSH
6626: CALL_OW 1
6630: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6631: LD_VAR 0 5
6635: PPUSH
6636: LD_EXP 38
6640: PUSH
6641: LD_VAR 0 4
6645: ARRAY
6646: PPUSH
6647: LD_INT 0
6649: PPUSH
6650: CALL_OW 49
// end ;
6654: GO 6499
6656: POP
6657: POP
// end ;
6658: GO 6481
6660: POP
6661: POP
// end ;
6662: LD_VAR 0 1
6666: RET
// export function PrepareApeman ; var bonus ; begin
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
// uc_side := 0 ;
6671: LD_ADDR_OWVAR 20
6675: PUSH
6676: LD_INT 0
6678: ST_TO_ADDR
// uc_nation := 0 ;
6679: LD_ADDR_OWVAR 21
6683: PUSH
6684: LD_INT 0
6686: ST_TO_ADDR
// InitHc ;
6687: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6691: LD_ADDR_VAR 0 2
6695: PUSH
6696: LD_INT 1
6698: NEG
6699: PUSH
6700: LD_INT 0
6702: PUSH
6703: LD_INT 1
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: PUSH
6711: LD_INT 25
6713: PUSH
6714: LD_INT 12
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: PUSH
6726: LD_INT 3
6728: MOD
6729: PUSH
6730: LD_INT 1
6732: PLUS
6733: ARRAY
6734: ST_TO_ADDR
// hc_class := class_apeman ;
6735: LD_ADDR_OWVAR 28
6739: PUSH
6740: LD_INT 12
6742: ST_TO_ADDR
// hc_gallery :=  ;
6743: LD_ADDR_OWVAR 33
6747: PUSH
6748: LD_STRING 
6750: ST_TO_ADDR
// hc_name :=  ;
6751: LD_ADDR_OWVAR 26
6755: PUSH
6756: LD_STRING 
6758: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6759: LD_ADDR_OWVAR 31
6763: PUSH
6764: LD_EXP 37
6768: PUSH
6769: LD_VAR 0 2
6773: PLUS
6774: PUSH
6775: LD_EXP 37
6779: PUSH
6780: LD_VAR 0 2
6784: PLUS
6785: PUSH
6786: LD_EXP 37
6790: PUSH
6791: LD_VAR 0 2
6795: PLUS
6796: PUSH
6797: LD_EXP 37
6801: PUSH
6802: LD_VAR 0 2
6806: PLUS
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6814: LD_ADDR_OWVAR 35
6818: PUSH
6819: LD_INT 10
6821: PUSH
6822: LD_VAR 0 2
6826: MUL
6827: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6828: LD_ADDR_OWVAR 29
6832: PUSH
6833: LD_INT 12
6835: PUSH
6836: LD_INT 10
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: ST_TO_ADDR
// result := CreateHuman ;
6843: LD_ADDR_VAR 0 1
6847: PUSH
6848: CALL_OW 44
6852: ST_TO_ADDR
// end ;
6853: LD_VAR 0 1
6857: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6858: LD_INT 0
6860: PPUSH
6861: PPUSH
6862: PPUSH
// if not ape then
6863: LD_VAR 0 1
6867: NOT
6868: IFFALSE 6872
// exit ;
6870: GO 6997
// side := GetSide ( ape ) ;
6872: LD_ADDR_VAR 0 3
6876: PUSH
6877: LD_VAR 0 1
6881: PPUSH
6882: CALL_OW 255
6886: ST_TO_ADDR
// if not side then
6887: LD_VAR 0 3
6891: NOT
6892: IFFALSE 6946
// begin for i = 1 to apemanPos do
6894: LD_ADDR_VAR 0 4
6898: PUSH
6899: DOUBLE
6900: LD_INT 1
6902: DEC
6903: ST_TO_ADDR
6904: LD_EXP 35
6908: PUSH
6909: FOR_TO
6910: IFFALSE 6944
// if ape in apemanPos [ i ] then
6912: LD_VAR 0 1
6916: PUSH
6917: LD_EXP 35
6921: PUSH
6922: LD_VAR 0 4
6926: ARRAY
6927: IN
6928: IFFALSE 6942
// begin side := i ;
6930: LD_ADDR_VAR 0 3
6934: PUSH
6935: LD_VAR 0 4
6939: ST_TO_ADDR
// break ;
6940: GO 6944
// end ;
6942: GO 6909
6944: POP
6945: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6946: LD_ADDR_EXP 35
6950: PUSH
6951: LD_EXP 35
6955: PPUSH
6956: LD_VAR 0 3
6960: PPUSH
6961: LD_EXP 35
6965: PUSH
6966: LD_VAR 0 3
6970: ARRAY
6971: PUSH
6972: LD_VAR 0 1
6976: DIFF
6977: PPUSH
6978: CALL_OW 1
6982: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6983: LD_ADDR_EXP 32
6987: PUSH
6988: LD_EXP 32
6992: PUSH
6993: LD_INT 1
6995: MINUS
6996: ST_TO_ADDR
// end ; end_of_file
6997: LD_VAR 0 2
7001: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7002: LD_VAR 0 1
7006: PPUSH
7007: CALL_OW 266
7011: PUSH
7012: LD_INT 0
7014: PUSH
7015: LD_INT 1
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: IN
7022: IFFALSE 7047
// SetBName ( b , @ & GetSide ( b ) ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: LD_STRING @
7031: PUSH
7032: LD_VAR 0 1
7036: PPUSH
7037: CALL_OW 255
7041: STR
7042: PPUSH
7043: CALL_OW 500
// if def_game_rules then
7047: LD_EXP 40
7051: IFFALSE 7088
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7053: LD_VAR 0 1
7057: PPUSH
7058: LD_VAR 0 1
7062: PPUSH
7063: CALL_OW 266
7067: PPUSH
7068: LD_VAR 0 1
7072: PPUSH
7073: CALL_OW 255
7077: PPUSH
7078: LD_INT 0
7080: PPUSH
7081: LD_INT 1
7083: PPUSH
7084: CALL 11911 0 5
// end ;
7088: PPOPN 2
7090: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7091: LD_VAR 0 1
7095: PPUSH
7096: CALL_OW 266
7100: PUSH
7101: LD_INT 0
7103: PUSH
7104: LD_INT 1
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: IN
7111: IFFALSE 7136
// SetBName ( b , @ & GetSide ( b ) ) ;
7113: LD_VAR 0 1
7117: PPUSH
7118: LD_STRING @
7120: PUSH
7121: LD_VAR 0 1
7125: PPUSH
7126: CALL_OW 255
7130: STR
7131: PPUSH
7132: CALL_OW 500
// if def_game_rules then
7136: LD_EXP 40
7140: IFFALSE 7179
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7142: LD_VAR 0 1
7146: PPUSH
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 266
7156: PPUSH
7157: LD_VAR 0 1
7161: PPUSH
7162: CALL_OW 255
7166: PPUSH
7167: LD_VAR 0 2
7171: PPUSH
7172: LD_INT 1
7174: PPUSH
7175: CALL 11911 0 5
// end ;
7179: PPOPN 3
7181: END
// on VehicleConstructed ( veh , fac ) do var side ;
7182: LD_INT 0
7184: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7185: LD_VAR 0 1
7189: PPUSH
7190: CALL_OW 263
7194: PUSH
7195: LD_INT 5
7197: EQUAL
7198: IFFALSE 7340
// begin side := GetSide ( veh ) ;
7200: LD_ADDR_VAR 0 3
7204: PUSH
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 255
7214: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7215: LD_ADDR_EXP 35
7219: PUSH
7220: LD_EXP 35
7224: PPUSH
7225: LD_VAR 0 3
7229: PPUSH
7230: LD_EXP 35
7234: PUSH
7235: LD_VAR 0 3
7239: ARRAY
7240: PPUSH
7241: LD_INT 52
7243: PUSH
7244: EMPTY
7245: LIST
7246: PPUSH
7247: CALL_OW 72
7251: PUSH
7252: LD_INT 22
7254: PUSH
7255: LD_VAR 0 3
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 2
7266: PUSH
7267: LD_INT 33
7269: PUSH
7270: LD_INT 5
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 25
7279: PUSH
7280: LD_INT 12
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 25
7289: PUSH
7290: LD_INT 15
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 25
7299: PUSH
7300: LD_INT 16
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 25
7309: PUSH
7310: LD_INT 17
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PPUSH
7329: CALL_OW 69
7333: UNION
7334: PPUSH
7335: CALL_OW 1
7339: ST_TO_ADDR
// end ; end ;
7340: PPOPN 3
7342: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7343: LD_INT 0
7345: PPUSH
7346: PPUSH
7347: PPUSH
7348: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7349: LD_VAR 0 1
7353: PPUSH
7354: CALL_OW 257
7358: PUSH
7359: LD_INT 12
7361: PUSH
7362: LD_INT 15
7364: PUSH
7365: LD_INT 17
7367: PUSH
7368: LD_INT 16
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: IN
7377: PUSH
7378: LD_VAR 0 1
7382: PPUSH
7383: CALL_OW 263
7387: PUSH
7388: LD_INT 5
7390: EQUAL
7391: OR
7392: IFFALSE 7403
// ApeKilled ( j ) ;
7394: LD_VAR 0 1
7398: PPUSH
7399: CALL 6858 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7403: LD_VAR 0 1
7407: PPUSH
7408: CALL_OW 266
7412: PUSH
7413: LD_INT 0
7415: PUSH
7416: LD_INT 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: IN
7423: IFFALSE 7505
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7425: LD_ADDR_VAR 0 4
7429: PUSH
7430: LD_EXP 18
7434: PUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: CALL_OW 255
7444: ARRAY
7445: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7446: LD_ADDR_VAR 0 2
7450: PUSH
7451: LD_EXP 24
7455: PUSH
7456: LD_VAR 0 4
7460: ARRAY
7461: PUSH
7462: LD_INT 1
7464: ARRAY
7465: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7466: LD_ADDR_VAR 0 3
7470: PUSH
7471: LD_EXP 24
7475: PUSH
7476: LD_VAR 0 4
7480: ARRAY
7481: PUSH
7482: LD_INT 2
7484: ARRAY
7485: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7486: LD_VAR 0 2
7490: PPUSH
7491: LD_VAR 0 3
7495: PPUSH
7496: CALL_OW 420
7500: PPUSH
7501: CALL_OW 419
// end ; if def_game_rules then
7505: LD_EXP 40
7509: IFFALSE 7608
// if ( GetType ( j ) = 3 ) then
7511: LD_VAR 0 1
7515: PPUSH
7516: CALL_OW 247
7520: PUSH
7521: LD_INT 3
7523: EQUAL
7524: IFFALSE 7564
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7526: LD_VAR 0 1
7530: PPUSH
7531: LD_VAR 0 1
7535: PPUSH
7536: CALL_OW 266
7540: PPUSH
7541: LD_VAR 0 1
7545: PPUSH
7546: CALL_OW 255
7550: PPUSH
7551: LD_INT 0
7553: PPUSH
7554: LD_INT 1
7556: NEG
7557: PPUSH
7558: CALL 11911 0 5
7562: GO 7608
// if ( GetChassis ( j ) = 25 ) then
7564: LD_VAR 0 1
7568: PPUSH
7569: CALL_OW 265
7573: PUSH
7574: LD_INT 25
7576: EQUAL
7577: IFFALSE 7608
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7579: LD_VAR 0 1
7583: PPUSH
7584: LD_INT 37
7586: PPUSH
7587: LD_VAR 0 1
7591: PPUSH
7592: CALL_OW 255
7596: PPUSH
7597: LD_INT 0
7599: PPUSH
7600: LD_INT 1
7602: NEG
7603: PPUSH
7604: CALL 11911 0 5
// end ;
7608: PPOPN 5
7610: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7611: LD_EXP 40
7615: PUSH
7616: LD_VAR 0 1
7620: PPUSH
7621: CALL_OW 265
7625: PUSH
7626: LD_INT 25
7628: EQUAL
7629: AND
7630: IFFALSE 7662
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7632: LD_VAR 0 1
7636: PPUSH
7637: LD_INT 37
7639: PPUSH
7640: LD_VAR 0 1
7644: PPUSH
7645: CALL_OW 255
7649: PPUSH
7650: LD_VAR 0 3
7654: PPUSH
7655: LD_INT 1
7657: PPUSH
7658: CALL 11911 0 5
// end ;
7662: PPOPN 4
7664: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7665: LD_VAR 0 1
7669: PPUSH
7670: LD_VAR 0 2
7674: PPUSH
7675: LD_VAR 0 3
7679: PPUSH
7680: LD_OWVAR 2
7684: PPUSH
7685: CALL 12682 0 4
7689: PPOPN 3
7691: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
7692: GO 7694
7694: DISABLE
7695: LD_INT 0
7697: PPUSH
7698: PPUSH
7699: PPUSH
7700: PPUSH
7701: PPUSH
// begin sib_mined := [ ] ;
7702: LD_ADDR_VAR 0 5
7706: PUSH
7707: EMPTY
7708: ST_TO_ADDR
// for i := 1 to 8 do
7709: LD_ADDR_VAR 0 1
7713: PUSH
7714: DOUBLE
7715: LD_INT 1
7717: DEC
7718: ST_TO_ADDR
7719: LD_INT 8
7721: PUSH
7722: FOR_TO
7723: IFFALSE 7879
// if Side_Positions [ i ] then
7725: LD_EXP 18
7729: PUSH
7730: LD_VAR 0 1
7734: ARRAY
7735: IFFALSE 7863
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7737: LD_ADDR_VAR 0 4
7741: PUSH
7742: LD_INT 22
7744: PUSH
7745: LD_VAR 0 1
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PUSH
7754: LD_INT 2
7756: PUSH
7757: LD_INT 30
7759: PUSH
7760: LD_INT 0
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 30
7769: PUSH
7770: LD_INT 1
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PPUSH
7786: CALL_OW 69
7790: ST_TO_ADDR
// pom := 0 ;
7791: LD_ADDR_VAR 0 3
7795: PUSH
7796: LD_INT 0
7798: ST_TO_ADDR
// for base in filter do
7799: LD_ADDR_VAR 0 2
7803: PUSH
7804: LD_VAR 0 4
7808: PUSH
7809: FOR_IN
7810: IFFALSE 7843
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
7812: LD_ADDR_VAR 0 3
7816: PUSH
7817: LD_VAR 0 3
7821: PUSH
7822: LD_VAR 0 2
7826: PPUSH
7827: CALL_OW 274
7831: PPUSH
7832: LD_INT 3
7834: PPUSH
7835: CALL_OW 275
7839: PLUS
7840: ST_TO_ADDR
7841: GO 7809
7843: POP
7844: POP
// sib_mined := sib_mined ^ pom ;
7845: LD_ADDR_VAR 0 5
7849: PUSH
7850: LD_VAR 0 5
7854: PUSH
7855: LD_VAR 0 3
7859: ADD
7860: ST_TO_ADDR
// end else
7861: GO 7877
// sib_mined := sib_mined ^ 0 ;
7863: LD_ADDR_VAR 0 5
7867: PUSH
7868: LD_VAR 0 5
7872: PUSH
7873: LD_INT 0
7875: ADD
7876: ST_TO_ADDR
7877: GO 7722
7879: POP
7880: POP
// if not def_public_score then
7881: LD_EXP 2
7885: NOT
7886: IFFALSE 7976
// begin ExtraStrings := [ ] ;
7888: LD_ADDR_EXP 56
7892: PUSH
7893: EMPTY
7894: ST_TO_ADDR
// for i := 1 to 8 do
7895: LD_ADDR_VAR 0 1
7899: PUSH
7900: DOUBLE
7901: LD_INT 1
7903: DEC
7904: ST_TO_ADDR
7905: LD_INT 8
7907: PUSH
7908: FOR_TO
7909: IFFALSE 7972
// if Side_Positions [ i ] then
7911: LD_EXP 18
7915: PUSH
7916: LD_VAR 0 1
7920: ARRAY
7921: IFFALSE 7970
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
7923: LD_ADDR_EXP 56
7927: PUSH
7928: LD_EXP 56
7932: PUSH
7933: LD_STRING #AlienBase-MinedPublic
7935: PUSH
7936: LD_VAR 0 1
7940: PUSH
7941: LD_VAR 0 1
7945: PUSH
7946: LD_VAR 0 5
7950: PUSH
7951: LD_VAR 0 1
7955: ARRAY
7956: PUSH
7957: LD_EXP 11
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: ADD
7969: ST_TO_ADDR
7970: GO 7908
7972: POP
7973: POP
// end else
7974: GO 8005
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
7976: LD_ADDR_EXP 56
7980: PUSH
7981: LD_STRING #AlienBase-Mined
7983: PUSH
7984: LD_VAR 0 5
7988: PUSH
7989: LD_OWVAR 2
7993: ARRAY
7994: PUSH
7995: LD_EXP 11
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: LIST
8004: ST_TO_ADDR
// for i := 1 to 8 do
8005: LD_ADDR_VAR 0 1
8009: PUSH
8010: DOUBLE
8011: LD_INT 1
8013: DEC
8014: ST_TO_ADDR
8015: LD_INT 8
8017: PUSH
8018: FOR_TO
8019: IFFALSE 8089
// if sib_mined [ i ] >= amount_of_siberit then
8021: LD_VAR 0 5
8025: PUSH
8026: LD_VAR 0 1
8030: ARRAY
8031: PUSH
8032: LD_EXP 11
8036: GREATEREQUAL
8037: IFFALSE 8087
// begin wait ( 0 0$1 ) ;
8039: LD_INT 35
8041: PPUSH
8042: CALL_OW 67
// if IAmServer then
8046: CALL_OW 518
8050: IFFALSE 8059
// wait ( 0 0$1 ) ;
8052: LD_INT 35
8054: PPUSH
8055: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8059: LD_VAR 0 5
8063: PUSH
8064: LD_OWVAR 2
8068: ARRAY
8069: PUSH
8070: LD_EXP 11
8074: GREATEREQUAL
8075: IFFALSE 8083
// YouWinInMultiplayer else
8077: CALL_OW 106
8081: GO 8087
// YouLostInMultiplayer ;
8083: CALL_OW 107
// end ;
8087: GO 8018
8089: POP
8090: POP
// enable ;
8091: ENABLE
// end ; end_of_file
8092: PPOPN 5
8094: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8095: LD_INT 0
8097: PPUSH
8098: PPUSH
// for un in battle_flags_id do
8099: LD_ADDR_VAR 0 2
8103: PUSH
8104: LD_EXP 29
8108: PUSH
8109: FOR_IN
8110: IFFALSE 8185
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8112: LD_VAR 0 2
8116: PPUSH
8117: LD_INT 1
8119: PUSH
8120: LD_LOC 9
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 2
8131: PUSH
8132: LD_LOC 9
8136: PUSH
8137: LD_INT 2
8139: DIV
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 3
8147: PUSH
8148: LD_LOC 9
8152: PUSH
8153: LD_INT 5
8155: DIV
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_INT 20
8163: PUSH
8164: LD_LOC 9
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: PPUSH
8179: CALL_OW 423
8183: GO 8109
8185: POP
8186: POP
// end ;
8187: LD_VAR 0 1
8191: RET
// every 1 do var un ;
8192: GO 8194
8194: DISABLE
8195: LD_INT 0
8197: PPUSH
// begin if not def_morale_flags then
8198: LD_EXP 49
8202: NOT
8203: IFFALSE 8207
// exit ;
8205: GO 8284
// if not morale_decreasing_time then
8207: LD_EXP 10
8211: NOT
8212: IFFALSE 8216
// exit ;
8214: GO 8284
// strength = 100 ;
8216: LD_ADDR_LOC 9
8220: PUSH
8221: LD_INT 100
8223: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8224: LD_EXP 10
8228: PPUSH
8229: CALL_OW 67
// strength := strength - 1 ;
8233: LD_ADDR_LOC 9
8237: PUSH
8238: LD_LOC 9
8242: PUSH
8243: LD_INT 1
8245: MINUS
8246: ST_TO_ADDR
// Update_Flags ;
8247: CALL 8095 0 0
// until not strength ;
8251: LD_LOC 9
8255: NOT
8256: IFFALSE 8224
// for un in battle_flags_id do
8258: LD_ADDR_VAR 0 1
8262: PUSH
8263: LD_EXP 29
8267: PUSH
8268: FOR_IN
8269: IFFALSE 8282
// KillBattleFlag ( un ) ;
8271: LD_VAR 0 1
8275: PPUSH
8276: CALL_OW 419
8280: GO 8268
8282: POP
8283: POP
// end ; end_of_file
8284: PPOPN 1
8286: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
8287: GO 8289
8289: DISABLE
8290: LD_INT 0
8292: PPUSH
// begin enable ;
8293: ENABLE
// for x := 1 to 8 do
8294: LD_ADDR_VAR 0 1
8298: PUSH
8299: DOUBLE
8300: LD_INT 1
8302: DEC
8303: ST_TO_ADDR
8304: LD_INT 8
8306: PUSH
8307: FOR_TO
8308: IFFALSE 8392
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
8310: LD_LOC 16
8314: PUSH
8315: LD_VAR 0 1
8319: ARRAY
8320: PUSH
8321: LD_INT 5
8323: GREATER
8324: PUSH
8325: LD_LOC 14
8329: PUSH
8330: LD_VAR 0 1
8334: ARRAY
8335: PUSH
8336: LD_INT 1
8338: NEG
8339: EQUAL
8340: AND
8341: IFFALSE 8390
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
8343: LD_ADDR_LOC 15
8347: PUSH
8348: LD_LOC 15
8352: PPUSH
8353: LD_VAR 0 1
8357: PPUSH
8358: LD_LOC 15
8362: PUSH
8363: LD_VAR 0 1
8367: ARRAY
8368: PUSH
8369: LD_INT 6
8371: PLUS
8372: PPUSH
8373: CALL_OW 1
8377: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
8378: LD_VAR 0 1
8382: PPUSH
8383: LD_INT 0
8385: PPUSH
8386: CALL 8564 0 2
// end ;
8390: GO 8307
8392: POP
8393: POP
// end ;
8394: PPOPN 1
8396: END
// every 0 0$1 marked 200 do var BGL , x ;
8397: GO 8399
8399: DISABLE
8400: LD_INT 0
8402: PPUSH
8403: PPUSH
// begin enable ;
8404: ENABLE
// for x := 1 to 8 do
8405: LD_ADDR_VAR 0 2
8409: PUSH
8410: DOUBLE
8411: LD_INT 1
8413: DEC
8414: ST_TO_ADDR
8415: LD_INT 8
8417: PUSH
8418: FOR_TO
8419: IFFALSE 8550
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
8421: LD_LOC 14
8425: PUSH
8426: LD_VAR 0 2
8430: ARRAY
8431: PUSH
8432: LD_INT 1
8434: NEG
8435: GREATER
8436: PUSH
8437: LD_LOC 14
8441: PUSH
8442: LD_VAR 0 2
8446: ARRAY
8447: PPUSH
8448: CALL_OW 300
8452: AND
8453: IFFALSE 8548
// begin BGL := GetLives ( BloodGods [ x ] ) ;
8455: LD_ADDR_VAR 0 1
8459: PUSH
8460: LD_LOC 14
8464: PUSH
8465: LD_VAR 0 2
8469: ARRAY
8470: PPUSH
8471: CALL_OW 256
8475: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
8476: LD_VAR 0 1
8480: PUSH
8481: LD_INT 1000
8483: LESS
8484: PUSH
8485: LD_VAR 0 1
8489: PUSH
8490: LD_INT 100
8492: GREATER
8493: AND
8494: IFFALSE 8548
// begin BGL := BGL + 10 ;
8496: LD_ADDR_VAR 0 1
8500: PUSH
8501: LD_VAR 0 1
8505: PUSH
8506: LD_INT 10
8508: PLUS
8509: ST_TO_ADDR
// if BGL > 1000 then
8510: LD_VAR 0 1
8514: PUSH
8515: LD_INT 1000
8517: GREATER
8518: IFFALSE 8528
// BGL := 1000 ;
8520: LD_ADDR_VAR 0 1
8524: PUSH
8525: LD_INT 1000
8527: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
8528: LD_LOC 14
8532: PUSH
8533: LD_VAR 0 2
8537: ARRAY
8538: PPUSH
8539: LD_VAR 0 1
8543: PPUSH
8544: CALL_OW 234
// end ; end ;
8548: GO 8418
8550: POP
8551: POP
// end ;
8552: PPOPN 2
8554: END
// every 0 0$1 marked 200 do
8555: GO 8557
8557: DISABLE
// begin DisplayTimeWithKills ;
8558: CALL 8805 0 0
// enable ;
8562: ENABLE
// end ;
8563: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
8564: LD_INT 0
8566: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
8567: LD_ADDR_OWVAR 24
8571: PUSH
8572: LD_INT 0
8574: PPUSH
8575: LD_INT 5
8577: PPUSH
8578: CALL_OW 12
8582: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
8583: LD_INT 1
8585: PPUSH
8586: LD_INT 1
8588: PPUSH
8589: LD_INT 15
8591: PPUSH
8592: CALL_OW 380
// hc_importance := 106 ;
8596: LD_ADDR_OWVAR 32
8600: PUSH
8601: LD_INT 106
8603: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
8604: LD_ADDR_OWVAR 26
8608: PUSH
8609: LD_STRING Blood God of 
8611: PUSH
8612: LD_OWVAR 19
8616: PUSH
8617: LD_VAR 0 1
8621: ARRAY
8622: STR
8623: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
8624: LD_ADDR_OWVAR 21
8628: PUSH
8629: LD_EXP 19
8633: PUSH
8634: LD_VAR 0 1
8638: ARRAY
8639: ST_TO_ADDR
// uc_side := side ;
8640: LD_ADDR_OWVAR 20
8644: PUSH
8645: LD_VAR 0 1
8649: ST_TO_ADDR
// hc_noskilllimit := true ;
8650: LD_ADDR_OWVAR 76
8654: PUSH
8655: LD_INT 1
8657: ST_TO_ADDR
// hc_agressivity := 50 ;
8658: LD_ADDR_OWVAR 35
8662: PUSH
8663: LD_INT 50
8665: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
8666: LD_ADDR_LOC 14
8670: PUSH
8671: LD_LOC 14
8675: PPUSH
8676: LD_VAR 0 1
8680: PPUSH
8681: CALL_OW 44
8685: PPUSH
8686: CALL_OW 1
8690: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
8691: LD_LOC 14
8695: PUSH
8696: LD_VAR 0 1
8700: ARRAY
8701: PPUSH
8702: LD_LOC 17
8706: PUSH
8707: LD_EXP 18
8711: PUSH
8712: LD_VAR 0 1
8716: ARRAY
8717: ARRAY
8718: PUSH
8719: LD_INT 1
8721: ARRAY
8722: PPUSH
8723: LD_LOC 17
8727: PUSH
8728: LD_EXP 18
8732: PUSH
8733: LD_VAR 0 1
8737: ARRAY
8738: ARRAY
8739: PUSH
8740: LD_INT 2
8742: ARRAY
8743: PPUSH
8744: LD_INT 10
8746: PPUSH
8747: LD_INT 0
8749: PPUSH
8750: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
8754: LD_LOC 14
8758: PUSH
8759: LD_VAR 0 1
8763: ARRAY
8764: PPUSH
8765: LD_INT 1
8767: PPUSH
8768: LD_INT 300
8770: PPUSH
8771: CALL_OW 239
// if not NoDialog then
8775: LD_VAR 0 2
8779: NOT
8780: IFFALSE 8800
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
8782: LD_LOC 14
8786: PUSH
8787: LD_VAR 0 1
8791: ARRAY
8792: PPUSH
8793: LD_STRING DLAwaken
8795: PPUSH
8796: CALL_OW 94
// end ;
8800: LD_VAR 0 3
8804: RET
// function DisplayTimeWithKills ; var x ; begin
8805: LD_INT 0
8807: PPUSH
8808: PPUSH
// ExtraStrings :=  ;
8809: LD_ADDR_EXP 56
8813: PUSH
8814: LD_STRING 
8816: ST_TO_ADDR
// for x = 1 to Side_Positions do
8817: LD_ADDR_VAR 0 2
8821: PUSH
8822: DOUBLE
8823: LD_INT 1
8825: DEC
8826: ST_TO_ADDR
8827: LD_EXP 18
8831: PUSH
8832: FOR_TO
8833: IFFALSE 9066
// if Side_Positions [ x ] then
8835: LD_EXP 18
8839: PUSH
8840: LD_VAR 0 2
8844: ARRAY
8845: IFFALSE 9064
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
8847: LD_ADDR_LOC 16
8851: PUSH
8852: LD_LOC 16
8856: PPUSH
8857: LD_VAR 0 2
8861: PPUSH
8862: LD_VAR 0 2
8866: PPUSH
8867: CALL_OW 515
8871: PUSH
8872: LD_LOC 15
8876: PUSH
8877: LD_VAR 0 2
8881: ARRAY
8882: MINUS
8883: PPUSH
8884: CALL_OW 1
8888: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
8889: LD_LOC 14
8893: PUSH
8894: LD_VAR 0 2
8898: ARRAY
8899: PUSH
8900: LD_INT 1
8902: NEG
8903: GREATER
8904: PUSH
8905: LD_LOC 14
8909: PUSH
8910: LD_VAR 0 2
8914: ARRAY
8915: PPUSH
8916: CALL_OW 300
8920: AND
8921: IFFALSE 8954
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
8923: LD_ADDR_EXP 56
8927: PUSH
8928: LD_EXP 56
8932: PUSH
8933: LD_STRING #godawoken
8935: PUSH
8936: LD_VAR 0 2
8940: PUSH
8941: LD_VAR 0 2
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: LIST
8950: ADD
8951: ST_TO_ADDR
8952: GO 9064
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
8954: LD_LOC 14
8958: PUSH
8959: LD_VAR 0 2
8963: ARRAY
8964: PUSH
8965: LD_INT 1
8967: NEG
8968: GREATER
8969: PUSH
8970: LD_LOC 14
8974: PUSH
8975: LD_VAR 0 2
8979: ARRAY
8980: PPUSH
8981: CALL_OW 301
8985: AND
8986: IFFALSE 9019
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
8988: LD_ADDR_EXP 56
8992: PUSH
8993: LD_EXP 56
8997: PUSH
8998: LD_STRING #goddied
9000: PUSH
9001: LD_VAR 0 2
9005: PUSH
9006: LD_VAR 0 2
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: LIST
9015: ADD
9016: ST_TO_ADDR
9017: GO 9064
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
9019: LD_ADDR_EXP 56
9023: PUSH
9024: LD_EXP 56
9028: PUSH
9029: LD_STRING #godssacrifise
9031: PUSH
9032: LD_VAR 0 2
9036: PUSH
9037: LD_VAR 0 2
9041: PUSH
9042: LD_LOC 16
9046: PUSH
9047: LD_VAR 0 2
9051: ARRAY
9052: PUSH
9053: LD_INT 6
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: ADD
9063: ST_TO_ADDR
9064: GO 8832
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 1
9072: RET
// export function InitBloodGods ; begin
9073: LD_INT 0
9075: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
9076: LD_ADDR_LOC 14
9080: PUSH
9081: LD_INT 1
9083: NEG
9084: PUSH
9085: LD_INT 1
9087: NEG
9088: PUSH
9089: LD_INT 1
9091: NEG
9092: PUSH
9093: LD_INT 1
9095: NEG
9096: PUSH
9097: LD_INT 1
9099: NEG
9100: PUSH
9101: LD_INT 1
9103: NEG
9104: PUSH
9105: LD_INT 1
9107: NEG
9108: PUSH
9109: LD_INT 1
9111: NEG
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9123: LD_ADDR_LOC 15
9127: PUSH
9128: LD_INT 0
9130: PUSH
9131: LD_INT 0
9133: PUSH
9134: LD_INT 0
9136: PUSH
9137: LD_INT 0
9139: PUSH
9140: LD_INT 0
9142: PUSH
9143: LD_INT 0
9145: PUSH
9146: LD_INT 0
9148: PUSH
9149: LD_INT 0
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9162: LD_ADDR_LOC 16
9166: PUSH
9167: LD_INT 0
9169: PUSH
9170: LD_INT 0
9172: PUSH
9173: LD_INT 0
9175: PUSH
9176: LD_INT 0
9178: PUSH
9179: LD_INT 0
9181: PUSH
9182: LD_INT 0
9184: PUSH
9185: LD_INT 0
9187: PUSH
9188: LD_INT 0
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
9201: LD_ADDR_LOC 17
9205: PUSH
9206: LD_INT 60
9208: PUSH
9209: LD_INT 47
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PUSH
9216: LD_INT 82
9218: PUSH
9219: LD_INT 26
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PUSH
9226: LD_INT 124
9228: PUSH
9229: LD_INT 45
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PUSH
9236: LD_INT 147
9238: PUSH
9239: LD_INT 90
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: LD_INT 126
9248: PUSH
9249: LD_INT 112
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 84
9258: PUSH
9259: LD_INT 92
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: LD_INT 106
9268: PUSH
9269: LD_INT 73
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 106
9278: PUSH
9279: LD_INT 73
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: ST_TO_ADDR
// ClearHumansKilled ;
9296: CALL_OW 516
// enable ( 200 ) ;
9300: LD_INT 200
9302: ENABLE_MARKED
// end ; end_of_file
9303: LD_VAR 0 1
9307: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
9308: LD_INT 0
9310: PPUSH
9311: PPUSH
// if ( not IAmSpec ) then
9312: CALL_OW 531
9316: NOT
9317: IFFALSE 9333
// Result := Limits_Info ^  ;
9319: LD_ADDR_VAR 0 1
9323: PUSH
9324: LD_LOC 25
9328: PUSH
9329: LD_STRING 
9331: ADD
9332: ST_TO_ADDR
// for i := 1 to 8 do
9333: LD_ADDR_VAR 0 2
9337: PUSH
9338: DOUBLE
9339: LD_INT 1
9341: DEC
9342: ST_TO_ADDR
9343: LD_INT 8
9345: PUSH
9346: FOR_TO
9347: IFFALSE 9392
// if Cheaters [ i ] then
9349: LD_LOC 26
9353: PUSH
9354: LD_VAR 0 2
9358: ARRAY
9359: IFFALSE 9390
// Result := Result ^ [ #Cheater , i , i ] ;
9361: LD_ADDR_VAR 0 1
9365: PUSH
9366: LD_VAR 0 1
9370: PUSH
9371: LD_STRING #Cheater
9373: PUSH
9374: LD_VAR 0 2
9378: PUSH
9379: LD_VAR 0 2
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: LIST
9388: ADD
9389: ST_TO_ADDR
9390: GO 9346
9392: POP
9393: POP
// end ;
9394: LD_VAR 0 1
9398: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9399: LD_INT 0
9401: PPUSH
9402: PPUSH
9403: PPUSH
9404: PPUSH
9405: PPUSH
// if game_type in [ 10 , 11 ] then
9406: LD_EXP 39
9410: PUSH
9411: LD_INT 10
9413: PUSH
9414: LD_INT 11
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: IN
9421: IFFALSE 9437
// def_game_rules = def_game_rules + 1 ;
9423: LD_ADDR_EXP 40
9427: PUSH
9428: LD_EXP 40
9432: PUSH
9433: LD_INT 1
9435: PLUS
9436: ST_TO_ADDR
// case def_game_rules of 0 :
9437: LD_EXP 40
9441: PUSH
9442: LD_INT 0
9444: DOUBLE
9445: EQUAL
9446: IFTRUE 9450
9448: GO 9455
9450: POP
// exit ; 1 :
9451: GO 11505
9453: GO 11405
9455: LD_INT 1
9457: DOUBLE
9458: EQUAL
9459: IFTRUE 9463
9461: GO 9679
9463: POP
// begin def_base_level := 2 ;
9464: LD_ADDR_EXP 41
9468: PUSH
9469: LD_INT 2
9471: ST_TO_ADDR
// def_amount_of_people := 11 ;
9472: LD_ADDR_EXP 42
9476: PUSH
9477: LD_INT 11
9479: ST_TO_ADDR
// def_skill_level := 1 ;
9480: LD_ADDR_EXP 43
9484: PUSH
9485: LD_INT 1
9487: ST_TO_ADDR
// def_starting_resources := 2 ;
9488: LD_ADDR_EXP 44
9492: PUSH
9493: LD_INT 2
9495: ST_TO_ADDR
// def_shipments_density := 26 ;
9496: LD_ADDR_EXP 45
9500: PUSH
9501: LD_INT 26
9503: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9504: LD_ADDR_EXP 46
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9512: LD_ADDR_EXP 47
9516: PUSH
9517: LD_INT 1
9519: ST_TO_ADDR
// def_shared_vision := 1 ;
9520: LD_ADDR_EXP 48
9524: PUSH
9525: LD_INT 1
9527: ST_TO_ADDR
// def_morale_flags := 3 ;
9528: LD_ADDR_EXP 49
9532: PUSH
9533: LD_INT 3
9535: ST_TO_ADDR
// def_siberite_detection := 1 ;
9536: LD_ADDR_EXP 50
9540: PUSH
9541: LD_INT 1
9543: ST_TO_ADDR
// def_people_respawning := 1 ;
9544: LD_ADDR_EXP 51
9548: PUSH
9549: LD_INT 1
9551: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9552: LD_ADDR_EXP 52
9556: PUSH
9557: LD_INT 1
9559: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9560: LD_ADDR_EXP 53
9564: PUSH
9565: LD_INT 0
9567: ST_TO_ADDR
// def_builduptime := 6 ;
9568: LD_ADDR_EXP 54
9572: PUSH
9573: LD_INT 6
9575: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9576: LD_ADDR_VAR 0 2
9580: PUSH
9581: EMPTY
9582: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9583: LD_ADDR_VAR 0 3
9587: PUSH
9588: EMPTY
9589: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9590: LD_ADDR_LOC 20
9594: PUSH
9595: EMPTY
9596: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9597: LD_ADDR_LOC 21
9601: PUSH
9602: EMPTY
9603: ST_TO_ADDR
// Banned_Controls := [ ] ;
9604: LD_ADDR_LOC 22
9608: PUSH
9609: EMPTY
9610: ST_TO_ADDR
// Banned_Engines := [ ] ;
9611: LD_ADDR_LOC 23
9615: PUSH
9616: EMPTY
9617: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9618: LD_ADDR_LOC 18
9622: PUSH
9623: LD_INT 37
9625: PUSH
9626: EMPTY
9627: LIST
9628: PUSH
9629: LD_INT 4
9631: PUSH
9632: LD_INT 5
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: LD_INT 31
9641: PUSH
9642: LD_INT 32
9644: PUSH
9645: LD_INT 33
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: LIST
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: LIST
9657: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9658: LD_ADDR_LOC 19
9662: PUSH
9663: LD_INT 2
9665: PUSH
9666: LD_INT 2
9668: PUSH
9669: LD_INT 4
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: ST_TO_ADDR
// end ; 2 :
9677: GO 11405
9679: LD_INT 2
9681: DOUBLE
9682: EQUAL
9683: IFTRUE 9687
9685: GO 9896
9687: POP
// begin def_base_level := 1 ;
9688: LD_ADDR_EXP 41
9692: PUSH
9693: LD_INT 1
9695: ST_TO_ADDR
// def_amount_of_people := 11 ;
9696: LD_ADDR_EXP 42
9700: PUSH
9701: LD_INT 11
9703: ST_TO_ADDR
// def_skill_level := 3 ;
9704: LD_ADDR_EXP 43
9708: PUSH
9709: LD_INT 3
9711: ST_TO_ADDR
// def_starting_resources := 3 ;
9712: LD_ADDR_EXP 44
9716: PUSH
9717: LD_INT 3
9719: ST_TO_ADDR
// def_shipments_density := 51 ;
9720: LD_ADDR_EXP 45
9724: PUSH
9725: LD_INT 51
9727: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9728: LD_ADDR_EXP 46
9732: PUSH
9733: LD_INT 1
9735: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9736: LD_ADDR_EXP 47
9740: PUSH
9741: LD_INT 2
9743: ST_TO_ADDR
// def_shared_vision := 1 ;
9744: LD_ADDR_EXP 48
9748: PUSH
9749: LD_INT 1
9751: ST_TO_ADDR
// def_morale_flags := 0 ;
9752: LD_ADDR_EXP 49
9756: PUSH
9757: LD_INT 0
9759: ST_TO_ADDR
// def_siberite_detection := 1 ;
9760: LD_ADDR_EXP 50
9764: PUSH
9765: LD_INT 1
9767: ST_TO_ADDR
// def_people_respawning := 0 ;
9768: LD_ADDR_EXP 51
9772: PUSH
9773: LD_INT 0
9775: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9776: LD_ADDR_EXP 52
9780: PUSH
9781: LD_INT 0
9783: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9784: LD_ADDR_EXP 53
9788: PUSH
9789: LD_INT 0
9791: ST_TO_ADDR
// def_builduptime := 6 ;
9792: LD_ADDR_EXP 54
9796: PUSH
9797: LD_INT 6
9799: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9800: LD_ADDR_VAR 0 2
9804: PUSH
9805: LD_INT 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9811: LD_ADDR_VAR 0 3
9815: PUSH
9816: EMPTY
9817: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9818: LD_ADDR_LOC 20
9822: PUSH
9823: EMPTY
9824: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9825: LD_ADDR_LOC 21
9829: PUSH
9830: EMPTY
9831: ST_TO_ADDR
// Banned_Controls := [ ] ;
9832: LD_ADDR_LOC 22
9836: PUSH
9837: EMPTY
9838: ST_TO_ADDR
// Banned_Engines := [ ] ;
9839: LD_ADDR_LOC 23
9843: PUSH
9844: EMPTY
9845: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9846: LD_ADDR_LOC 18
9850: PUSH
9851: LD_INT 4
9853: PUSH
9854: LD_INT 5
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 31
9863: PUSH
9864: LD_INT 32
9866: PUSH
9867: LD_INT 33
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: LIST
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9879: LD_ADDR_LOC 19
9883: PUSH
9884: LD_INT 1
9886: PUSH
9887: LD_INT 2
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: ST_TO_ADDR
// end ; 3 :
9894: GO 11405
9896: LD_INT 3
9898: DOUBLE
9899: EQUAL
9900: IFTRUE 9904
9902: GO 10147
9904: POP
// begin def_base_level := 1 ;
9905: LD_ADDR_EXP 41
9909: PUSH
9910: LD_INT 1
9912: ST_TO_ADDR
// def_amount_of_people := 11 ;
9913: LD_ADDR_EXP 42
9917: PUSH
9918: LD_INT 11
9920: ST_TO_ADDR
// def_skill_level := 3 ;
9921: LD_ADDR_EXP 43
9925: PUSH
9926: LD_INT 3
9928: ST_TO_ADDR
// def_starting_resources := 3 ;
9929: LD_ADDR_EXP 44
9933: PUSH
9934: LD_INT 3
9936: ST_TO_ADDR
// def_shipments_density := 1 ;
9937: LD_ADDR_EXP 45
9941: PUSH
9942: LD_INT 1
9944: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9945: LD_ADDR_EXP 46
9949: PUSH
9950: LD_INT 0
9952: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9953: LD_ADDR_EXP 47
9957: PUSH
9958: LD_INT 1
9960: ST_TO_ADDR
// def_shared_vision := 1 ;
9961: LD_ADDR_EXP 48
9965: PUSH
9966: LD_INT 1
9968: ST_TO_ADDR
// def_morale_flags := 0 ;
9969: LD_ADDR_EXP 49
9973: PUSH
9974: LD_INT 0
9976: ST_TO_ADDR
// def_siberite_detection := 1 ;
9977: LD_ADDR_EXP 50
9981: PUSH
9982: LD_INT 1
9984: ST_TO_ADDR
// def_people_respawning := 0 ;
9985: LD_ADDR_EXP 51
9989: PUSH
9990: LD_INT 0
9992: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9993: LD_ADDR_EXP 52
9997: PUSH
9998: LD_INT 2
10000: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10001: LD_ADDR_EXP 53
10005: PUSH
10006: LD_INT 0
10008: ST_TO_ADDR
// def_builduptime := 6 ;
10009: LD_ADDR_EXP 54
10013: PUSH
10014: LD_INT 6
10016: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10017: LD_ADDR_VAR 0 2
10021: PUSH
10022: LD_INT 23
10024: PUSH
10025: EMPTY
10026: LIST
10027: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
10028: LD_ADDR_VAR 0 3
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: LD_INT 37
10038: PUSH
10039: LD_INT 32
10041: PUSH
10042: LD_INT 33
10044: PUSH
10045: LD_INT 36
10047: PUSH
10048: LD_INT 16
10050: PUSH
10051: LD_INT 23
10053: PUSH
10054: LD_INT 21
10056: PUSH
10057: LD_INT 18
10059: PUSH
10060: LD_INT 22
10062: PUSH
10063: LD_INT 20
10065: PUSH
10066: LD_INT 19
10068: PUSH
10069: LD_INT 25
10071: PUSH
10072: LD_INT 17
10074: PUSH
10075: LD_INT 24
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10095: LD_ADDR_LOC 20
10099: PUSH
10100: EMPTY
10101: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10102: LD_ADDR_LOC 21
10106: PUSH
10107: EMPTY
10108: ST_TO_ADDR
// Banned_Controls := [ ] ;
10109: LD_ADDR_LOC 22
10113: PUSH
10114: EMPTY
10115: ST_TO_ADDR
// Banned_Engines := [ ] ;
10116: LD_ADDR_LOC 23
10120: PUSH
10121: EMPTY
10122: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10123: LD_ADDR_LOC 18
10127: PUSH
10128: EMPTY
10129: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10130: LD_ADDR_LOC 19
10134: PUSH
10135: EMPTY
10136: ST_TO_ADDR
// No_Mechs := true ;
10137: LD_ADDR_EXP 55
10141: PUSH
10142: LD_INT 1
10144: ST_TO_ADDR
// end ; 4 :
10145: GO 11405
10147: LD_INT 4
10149: DOUBLE
10150: EQUAL
10151: IFTRUE 10155
10153: GO 10330
10155: POP
// begin def_base_level := 1 ;
10156: LD_ADDR_EXP 41
10160: PUSH
10161: LD_INT 1
10163: ST_TO_ADDR
// def_amount_of_people := 11 ;
10164: LD_ADDR_EXP 42
10168: PUSH
10169: LD_INT 11
10171: ST_TO_ADDR
// def_skill_level := 3 ;
10172: LD_ADDR_EXP 43
10176: PUSH
10177: LD_INT 3
10179: ST_TO_ADDR
// def_starting_resources := 3 ;
10180: LD_ADDR_EXP 44
10184: PUSH
10185: LD_INT 3
10187: ST_TO_ADDR
// def_shipments_density := 2 ;
10188: LD_ADDR_EXP 45
10192: PUSH
10193: LD_INT 2
10195: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10196: LD_ADDR_EXP 46
10200: PUSH
10201: LD_INT 1
10203: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10204: LD_ADDR_EXP 47
10208: PUSH
10209: LD_INT 2
10211: ST_TO_ADDR
// def_shared_vision := 1 ;
10212: LD_ADDR_EXP 48
10216: PUSH
10217: LD_INT 1
10219: ST_TO_ADDR
// def_morale_flags := 0 ;
10220: LD_ADDR_EXP 49
10224: PUSH
10225: LD_INT 0
10227: ST_TO_ADDR
// def_siberite_detection := 1 ;
10228: LD_ADDR_EXP 50
10232: PUSH
10233: LD_INT 1
10235: ST_TO_ADDR
// def_people_respawning := 0 ;
10236: LD_ADDR_EXP 51
10240: PUSH
10241: LD_INT 0
10243: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10244: LD_ADDR_EXP 52
10248: PUSH
10249: LD_INT 0
10251: ST_TO_ADDR
// def_siberite_bomb := 1 ;
10252: LD_ADDR_EXP 53
10256: PUSH
10257: LD_INT 1
10259: ST_TO_ADDR
// def_builduptime := 11 ;
10260: LD_ADDR_EXP 54
10264: PUSH
10265: LD_INT 11
10267: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10268: LD_ADDR_VAR 0 2
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10279: LD_ADDR_VAR 0 3
10283: PUSH
10284: EMPTY
10285: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10286: LD_ADDR_LOC 20
10290: PUSH
10291: EMPTY
10292: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10293: LD_ADDR_LOC 21
10297: PUSH
10298: EMPTY
10299: ST_TO_ADDR
// Banned_Controls := [ ] ;
10300: LD_ADDR_LOC 22
10304: PUSH
10305: EMPTY
10306: ST_TO_ADDR
// Banned_Engines := [ ] ;
10307: LD_ADDR_LOC 23
10311: PUSH
10312: EMPTY
10313: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10314: LD_ADDR_LOC 18
10318: PUSH
10319: EMPTY
10320: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10321: LD_ADDR_LOC 19
10325: PUSH
10326: EMPTY
10327: ST_TO_ADDR
// end ; 5 :
10328: GO 11405
10330: LD_INT 5
10332: DOUBLE
10333: EQUAL
10334: IFTRUE 10338
10336: GO 10587
10338: POP
// begin def_base_level := 0 ;
10339: LD_ADDR_EXP 41
10343: PUSH
10344: LD_INT 0
10346: ST_TO_ADDR
// def_amount_of_people := 5 ;
10347: LD_ADDR_EXP 42
10351: PUSH
10352: LD_INT 5
10354: ST_TO_ADDR
// def_skill_level := 0 ;
10355: LD_ADDR_EXP 43
10359: PUSH
10360: LD_INT 0
10362: ST_TO_ADDR
// def_starting_resources := 0 ;
10363: LD_ADDR_EXP 44
10367: PUSH
10368: LD_INT 0
10370: ST_TO_ADDR
// def_shipments_density := 0 ;
10371: LD_ADDR_EXP 45
10375: PUSH
10376: LD_INT 0
10378: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10379: LD_ADDR_EXP 46
10383: PUSH
10384: LD_INT 0
10386: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10387: LD_ADDR_EXP 47
10391: PUSH
10392: LD_INT 0
10394: ST_TO_ADDR
// def_shared_vision := 1 ;
10395: LD_ADDR_EXP 48
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// def_morale_flags := 0 ;
10403: LD_ADDR_EXP 49
10407: PUSH
10408: LD_INT 0
10410: ST_TO_ADDR
// def_siberite_detection := 0 ;
10411: LD_ADDR_EXP 50
10415: PUSH
10416: LD_INT 0
10418: ST_TO_ADDR
// def_people_respawning := 1 ;
10419: LD_ADDR_EXP 51
10423: PUSH
10424: LD_INT 1
10426: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10427: LD_ADDR_EXP 52
10431: PUSH
10432: LD_INT 1
10434: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10435: LD_ADDR_EXP 53
10439: PUSH
10440: LD_INT 0
10442: ST_TO_ADDR
// def_builduptime := 0 ;
10443: LD_ADDR_EXP 54
10447: PUSH
10448: LD_INT 0
10450: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10451: LD_ADDR_VAR 0 2
10455: PUSH
10456: LD_INT 10
10458: PUSH
10459: LD_INT 3
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10466: LD_ADDR_VAR 0 3
10470: PUSH
10471: LD_INT 12
10473: PUSH
10474: LD_INT 11
10476: PUSH
10477: LD_INT 14
10479: PUSH
10480: LD_INT 13
10482: PUSH
10483: LD_INT 5
10485: PUSH
10486: LD_INT 24
10488: PUSH
10489: LD_INT 21
10491: PUSH
10492: LD_INT 33
10494: PUSH
10495: LD_INT 36
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10509: LD_ADDR_LOC 20
10513: PUSH
10514: LD_INT 31
10516: PUSH
10517: EMPTY
10518: LIST
10519: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10520: LD_ADDR_LOC 21
10524: PUSH
10525: EMPTY
10526: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10527: LD_ADDR_LOC 22
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: ST_TO_ADDR
// Banned_Engines := [ ] ;
10538: LD_ADDR_LOC 23
10542: PUSH
10543: EMPTY
10544: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10545: LD_ADDR_LOC 18
10549: PUSH
10550: LD_INT 4
10552: PUSH
10553: EMPTY
10554: LIST
10555: PUSH
10556: LD_INT 31
10558: PUSH
10559: LD_INT 32
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10570: LD_ADDR_LOC 19
10574: PUSH
10575: LD_INT 1
10577: PUSH
10578: LD_INT 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: ST_TO_ADDR
// end ; 6 :
10585: GO 11405
10587: LD_INT 6
10589: DOUBLE
10590: EQUAL
10591: IFTRUE 10595
10593: GO 10798
10595: POP
// begin def_base_level := 1 ;
10596: LD_ADDR_EXP 41
10600: PUSH
10601: LD_INT 1
10603: ST_TO_ADDR
// def_amount_of_people := 11 ;
10604: LD_ADDR_EXP 42
10608: PUSH
10609: LD_INT 11
10611: ST_TO_ADDR
// def_skill_level := 3 ;
10612: LD_ADDR_EXP 43
10616: PUSH
10617: LD_INT 3
10619: ST_TO_ADDR
// def_starting_resources := 3 ;
10620: LD_ADDR_EXP 44
10624: PUSH
10625: LD_INT 3
10627: ST_TO_ADDR
// def_shipments_density := 1 ;
10628: LD_ADDR_EXP 45
10632: PUSH
10633: LD_INT 1
10635: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10636: LD_ADDR_EXP 46
10640: PUSH
10641: LD_INT 0
10643: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10644: LD_ADDR_EXP 47
10648: PUSH
10649: LD_INT 1
10651: ST_TO_ADDR
// def_shared_vision := 1 ;
10652: LD_ADDR_EXP 48
10656: PUSH
10657: LD_INT 1
10659: ST_TO_ADDR
// def_morale_flags := 0 ;
10660: LD_ADDR_EXP 49
10664: PUSH
10665: LD_INT 0
10667: ST_TO_ADDR
// def_siberite_detection := 1 ;
10668: LD_ADDR_EXP 50
10672: PUSH
10673: LD_INT 1
10675: ST_TO_ADDR
// def_people_respawning := 2 ;
10676: LD_ADDR_EXP 51
10680: PUSH
10681: LD_INT 2
10683: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10684: LD_ADDR_EXP 52
10688: PUSH
10689: LD_INT 1
10691: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10692: LD_ADDR_EXP 53
10696: PUSH
10697: LD_INT 0
10699: ST_TO_ADDR
// def_builduptime := 6 ;
10700: LD_ADDR_EXP 54
10704: PUSH
10705: LD_INT 6
10707: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10708: LD_ADDR_VAR 0 2
10712: PUSH
10713: LD_INT 23
10715: PUSH
10716: EMPTY
10717: LIST
10718: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10719: LD_ADDR_VAR 0 3
10723: PUSH
10724: LD_INT 2
10726: PUSH
10727: LD_INT 37
10729: PUSH
10730: LD_INT 31
10732: PUSH
10733: LD_INT 32
10735: PUSH
10736: LD_INT 33
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10746: LD_ADDR_LOC 20
10750: PUSH
10751: EMPTY
10752: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10753: LD_ADDR_LOC 21
10757: PUSH
10758: EMPTY
10759: ST_TO_ADDR
// Banned_Controls := [ ] ;
10760: LD_ADDR_LOC 22
10764: PUSH
10765: EMPTY
10766: ST_TO_ADDR
// Banned_Engines := [ ] ;
10767: LD_ADDR_LOC 23
10771: PUSH
10772: EMPTY
10773: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10774: LD_ADDR_LOC 18
10778: PUSH
10779: EMPTY
10780: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10781: LD_ADDR_LOC 19
10785: PUSH
10786: EMPTY
10787: ST_TO_ADDR
// No_Mechs := true ;
10788: LD_ADDR_EXP 55
10792: PUSH
10793: LD_INT 1
10795: ST_TO_ADDR
// end ; 7 :
10796: GO 11405
10798: LD_INT 7
10800: DOUBLE
10801: EQUAL
10802: IFTRUE 10806
10804: GO 11004
10806: POP
// begin def_base_level := 1 ;
10807: LD_ADDR_EXP 41
10811: PUSH
10812: LD_INT 1
10814: ST_TO_ADDR
// def_amount_of_people := 20 ;
10815: LD_ADDR_EXP 42
10819: PUSH
10820: LD_INT 20
10822: ST_TO_ADDR
// def_skill_level := 3 ;
10823: LD_ADDR_EXP 43
10827: PUSH
10828: LD_INT 3
10830: ST_TO_ADDR
// def_starting_resources := 3 ;
10831: LD_ADDR_EXP 44
10835: PUSH
10836: LD_INT 3
10838: ST_TO_ADDR
// def_shipments_density := 1 ;
10839: LD_ADDR_EXP 45
10843: PUSH
10844: LD_INT 1
10846: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10847: LD_ADDR_EXP 46
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10855: LD_ADDR_EXP 47
10859: PUSH
10860: LD_INT 2
10862: ST_TO_ADDR
// def_shared_vision := 1 ;
10863: LD_ADDR_EXP 48
10867: PUSH
10868: LD_INT 1
10870: ST_TO_ADDR
// def_morale_flags := 0 ;
10871: LD_ADDR_EXP 49
10875: PUSH
10876: LD_INT 0
10878: ST_TO_ADDR
// def_siberite_detection := 1 ;
10879: LD_ADDR_EXP 50
10883: PUSH
10884: LD_INT 1
10886: ST_TO_ADDR
// def_people_respawning := 0 ;
10887: LD_ADDR_EXP 51
10891: PUSH
10892: LD_INT 0
10894: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10895: LD_ADDR_EXP 52
10899: PUSH
10900: LD_INT 1
10902: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10903: LD_ADDR_EXP 53
10907: PUSH
10908: LD_INT 0
10910: ST_TO_ADDR
// def_builduptime := 6 ;
10911: LD_ADDR_EXP 54
10915: PUSH
10916: LD_INT 6
10918: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10919: LD_ADDR_VAR 0 2
10923: PUSH
10924: LD_INT 23
10926: PUSH
10927: EMPTY
10928: LIST
10929: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
10930: LD_ADDR_VAR 0 3
10934: PUSH
10935: LD_INT 37
10937: PUSH
10938: EMPTY
10939: LIST
10940: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10941: LD_ADDR_LOC 20
10945: PUSH
10946: EMPTY
10947: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10948: LD_ADDR_LOC 21
10952: PUSH
10953: EMPTY
10954: ST_TO_ADDR
// Banned_Controls := [ ] ;
10955: LD_ADDR_LOC 22
10959: PUSH
10960: EMPTY
10961: ST_TO_ADDR
// Banned_Engines := [ ] ;
10962: LD_ADDR_LOC 23
10966: PUSH
10967: EMPTY
10968: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10969: LD_ADDR_LOC 18
10973: PUSH
10974: LD_INT 31
10976: PUSH
10977: LD_INT 32
10979: PUSH
10980: LD_INT 33
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: PUSH
10988: EMPTY
10989: LIST
10990: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
10991: LD_ADDR_LOC 19
10995: PUSH
10996: LD_INT 10
10998: PUSH
10999: EMPTY
11000: LIST
11001: ST_TO_ADDR
// end ; 8 :
11002: GO 11405
11004: LD_INT 8
11006: DOUBLE
11007: EQUAL
11008: IFTRUE 11012
11010: GO 11404
11012: POP
// begin def_base_level := 0 ;
11013: LD_ADDR_EXP 41
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// def_amount_of_people := 8 ;
11021: LD_ADDR_EXP 42
11025: PUSH
11026: LD_INT 8
11028: ST_TO_ADDR
// def_skill_level := 0 ;
11029: LD_ADDR_EXP 43
11033: PUSH
11034: LD_INT 0
11036: ST_TO_ADDR
// def_starting_resources := 2 ;
11037: LD_ADDR_EXP 44
11041: PUSH
11042: LD_INT 2
11044: ST_TO_ADDR
// def_shipments_density := 1 ;
11045: LD_ADDR_EXP 45
11049: PUSH
11050: LD_INT 1
11052: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11053: LD_ADDR_EXP 46
11057: PUSH
11058: LD_INT 0
11060: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11061: LD_ADDR_EXP 47
11065: PUSH
11066: LD_INT 0
11068: ST_TO_ADDR
// def_shared_vision := 1 ;
11069: LD_ADDR_EXP 48
11073: PUSH
11074: LD_INT 1
11076: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
11077: LD_ADDR_EXP 49
11081: PUSH
11082: LD_INT 0
11084: PPUSH
11085: LD_INT 2
11087: PPUSH
11088: CALL_OW 12
11092: ST_TO_ADDR
// def_siberite_detection := 0 ;
11093: LD_ADDR_EXP 50
11097: PUSH
11098: LD_INT 0
11100: ST_TO_ADDR
// def_people_respawning := 0 ;
11101: LD_ADDR_EXP 51
11105: PUSH
11106: LD_INT 0
11108: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11109: LD_ADDR_EXP 52
11113: PUSH
11114: LD_INT 2
11116: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11117: LD_ADDR_EXP 53
11121: PUSH
11122: LD_INT 0
11124: ST_TO_ADDR
// def_builduptime := 0 ;
11125: LD_ADDR_EXP 54
11129: PUSH
11130: LD_INT 0
11132: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
11133: LD_ADDR_VAR 0 2
11137: PUSH
11138: LD_INT 23
11140: PUSH
11141: LD_INT 20
11143: PUSH
11144: LD_INT 40
11146: PUSH
11147: LD_INT 47
11149: PUSH
11150: LD_INT 46
11152: PUSH
11153: LD_INT 39
11155: PUSH
11156: LD_INT 71
11158: PUSH
11159: LD_INT 34
11161: PUSH
11162: LD_INT 41
11164: PUSH
11165: LD_INT 44
11167: PUSH
11168: LD_INT 17
11170: PUSH
11171: LD_INT 16
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
11188: LD_ADDR_VAR 0 3
11192: PUSH
11193: LD_INT 37
11195: PUSH
11196: LD_INT 5
11198: PUSH
11199: LD_INT 13
11201: PUSH
11202: LD_INT 34
11204: PUSH
11205: LD_INT 12
11207: PUSH
11208: LD_INT 15
11210: PUSH
11211: LD_INT 11
11213: PUSH
11214: LD_INT 14
11216: PUSH
11217: LD_INT 29
11219: PUSH
11220: LD_INT 30
11222: PUSH
11223: LD_INT 28
11225: PUSH
11226: LD_INT 24
11228: PUSH
11229: LD_INT 25
11231: PUSH
11232: LD_INT 20
11234: PUSH
11235: LD_INT 21
11237: PUSH
11238: LD_INT 22
11240: PUSH
11241: LD_INT 36
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11263: LD_ADDR_LOC 20
11267: PUSH
11268: EMPTY
11269: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
11270: LD_ADDR_LOC 21
11274: PUSH
11275: LD_INT 14
11277: PUSH
11278: EMPTY
11279: LIST
11280: ST_TO_ADDR
// Banned_Controls := [ ] ;
11281: LD_ADDR_LOC 22
11285: PUSH
11286: EMPTY
11287: ST_TO_ADDR
// Banned_Engines := [ ] ;
11288: LD_ADDR_LOC 23
11292: PUSH
11293: EMPTY
11294: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
11295: LD_ADDR_LOC 18
11299: PUSH
11300: LD_INT 31
11302: PUSH
11303: LD_INT 32
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 4
11312: PUSH
11313: EMPTY
11314: LIST
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
11320: LD_ADDR_LOC 19
11324: PUSH
11325: LD_INT 2
11327: PUSH
11328: LD_INT 1
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: ST_TO_ADDR
// for i := 1 to 8 do
11335: LD_ADDR_VAR 0 4
11339: PUSH
11340: DOUBLE
11341: LD_INT 1
11343: DEC
11344: ST_TO_ADDR
11345: LD_INT 8
11347: PUSH
11348: FOR_TO
11349: IFFALSE 11400
// if ( Side_Nations [ i ] = 3 ) then
11351: LD_EXP 19
11355: PUSH
11356: LD_VAR 0 4
11360: ARRAY
11361: PUSH
11362: LD_INT 3
11364: EQUAL
11365: IFFALSE 11398
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11367: LD_ADDR_EXP 19
11371: PUSH
11372: LD_EXP 19
11376: PPUSH
11377: LD_VAR 0 4
11381: PPUSH
11382: LD_INT 1
11384: PPUSH
11385: LD_INT 2
11387: PPUSH
11388: CALL_OW 12
11392: PPUSH
11393: CALL_OW 1
11397: ST_TO_ADDR
11398: GO 11348
11400: POP
11401: POP
// end ; end ;
11402: GO 11405
11404: POP
// for i := 1 to 8 do
11405: LD_ADDR_VAR 0 4
11409: PUSH
11410: DOUBLE
11411: LD_INT 1
11413: DEC
11414: ST_TO_ADDR
11415: LD_INT 8
11417: PUSH
11418: FOR_TO
11419: IFFALSE 11503
// if Side_Positions [ i ] then
11421: LD_EXP 18
11425: PUSH
11426: LD_VAR 0 4
11430: ARRAY
11431: IFFALSE 11501
// begin for j in Unavailable_Techs do
11433: LD_ADDR_VAR 0 5
11437: PUSH
11438: LD_VAR 0 2
11442: PUSH
11443: FOR_IN
11444: IFFALSE 11465
// SetTech ( j , i , 0 ) ;
11446: LD_VAR 0 5
11450: PPUSH
11451: LD_VAR 0 4
11455: PPUSH
11456: LD_INT 0
11458: PPUSH
11459: CALL_OW 322
11463: GO 11443
11465: POP
11466: POP
// for j in Unavailable_Builds do
11467: LD_ADDR_VAR 0 5
11471: PUSH
11472: LD_VAR 0 3
11476: PUSH
11477: FOR_IN
11478: IFFALSE 11499
// SetRestrict ( j , i , 0 ) ;
11480: LD_VAR 0 5
11484: PPUSH
11485: LD_VAR 0 4
11489: PPUSH
11490: LD_INT 0
11492: PPUSH
11493: CALL_OW 324
11497: GO 11477
11499: POP
11500: POP
// end ;
11501: GO 11418
11503: POP
11504: POP
// end ;
11505: LD_VAR 0 1
11509: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11510: LD_INT 0
11512: PPUSH
11513: PPUSH
11514: PPUSH
11515: PPUSH
11516: PPUSH
11517: PPUSH
11518: PPUSH
// for i := 1 to Restricted_Builds do
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: DOUBLE
11525: LD_INT 1
11527: DEC
11528: ST_TO_ADDR
11529: LD_LOC 18
11533: PUSH
11534: FOR_TO
11535: IFFALSE 11845
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11537: LD_LOC 18
11541: PUSH
11542: LD_VAR 0 2
11546: ARRAY
11547: PUSH
11548: LD_INT 1
11550: ARRAY
11551: PUSH
11552: LD_INT 31
11554: DOUBLE
11555: EQUAL
11556: IFTRUE 11572
11558: LD_INT 32
11560: DOUBLE
11561: EQUAL
11562: IFTRUE 11572
11564: LD_INT 33
11566: DOUBLE
11567: EQUAL
11568: IFTRUE 11572
11570: GO 11583
11572: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11573: LD_ADDR_VAR 0 6
11577: PUSH
11578: LD_STRING #Turrets
11580: ST_TO_ADDR
11581: GO 11628
11583: LD_INT 4
11585: DOUBLE
11586: EQUAL
11587: IFTRUE 11597
11589: LD_INT 5
11591: DOUBLE
11592: EQUAL
11593: IFTRUE 11597
11595: GO 11608
11597: POP
// btype := #Armouries ; b_Behemoth :
11598: LD_ADDR_VAR 0 6
11602: PUSH
11603: LD_STRING #Armouries
11605: ST_TO_ADDR
11606: GO 11628
11608: LD_INT 37
11610: DOUBLE
11611: EQUAL
11612: IFTRUE 11616
11614: GO 11627
11616: POP
// btype := #Behemoths ; end ;
11617: LD_ADDR_VAR 0 6
11621: PUSH
11622: LD_STRING #Behemoths
11624: ST_TO_ADDR
11625: GO 11628
11627: POP
// list := [ ] ;
11628: LD_ADDR_VAR 0 7
11632: PUSH
11633: EMPTY
11634: ST_TO_ADDR
// for j := 1 to 8 do
11635: LD_ADDR_VAR 0 3
11639: PUSH
11640: DOUBLE
11641: LD_INT 1
11643: DEC
11644: ST_TO_ADDR
11645: LD_INT 8
11647: PUSH
11648: FOR_TO
11649: IFFALSE 11742
// if Side_Positions [ j ] then
11651: LD_EXP 18
11655: PUSH
11656: LD_VAR 0 3
11660: ARRAY
11661: IFFALSE 11740
// begin amount := 0 ;
11663: LD_ADDR_VAR 0 5
11667: PUSH
11668: LD_INT 0
11670: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11671: LD_ADDR_VAR 0 4
11675: PUSH
11676: LD_LOC 18
11680: PUSH
11681: LD_VAR 0 2
11685: ARRAY
11686: PUSH
11687: FOR_IN
11688: IFFALSE 11736
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11690: LD_ADDR_VAR 0 5
11694: PUSH
11695: LD_VAR 0 5
11699: PUSH
11700: LD_INT 22
11702: PUSH
11703: LD_VAR 0 3
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 30
11714: PUSH
11715: LD_VAR 0 4
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PPUSH
11728: CALL_OW 69
11732: PLUS
11733: ST_TO_ADDR
11734: GO 11687
11736: POP
11737: POP
// break ;
11738: GO 11742
// end ;
11740: GO 11648
11742: POP
11743: POP
// list := [ ] ;
11744: LD_ADDR_VAR 0 7
11748: PUSH
11749: EMPTY
11750: ST_TO_ADDR
// for j := 1 to 8 do
11751: LD_ADDR_VAR 0 3
11755: PUSH
11756: DOUBLE
11757: LD_INT 1
11759: DEC
11760: ST_TO_ADDR
11761: LD_INT 8
11763: PUSH
11764: FOR_TO
11765: IFFALSE 11785
// list := list ^ amount ;
11767: LD_ADDR_VAR 0 7
11771: PUSH
11772: LD_VAR 0 7
11776: PUSH
11777: LD_VAR 0 5
11781: ADD
11782: ST_TO_ADDR
11783: GO 11764
11785: POP
11786: POP
// Already_Built := Already_Built ^ [ list ] ;
11787: LD_ADDR_LOC 24
11791: PUSH
11792: LD_LOC 24
11796: PUSH
11797: LD_VAR 0 7
11801: PUSH
11802: EMPTY
11803: LIST
11804: ADD
11805: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11806: LD_ADDR_LOC 25
11810: PUSH
11811: LD_LOC 25
11815: PUSH
11816: LD_VAR 0 6
11820: PUSH
11821: LD_VAR 0 5
11825: PUSH
11826: LD_LOC 19
11830: PUSH
11831: LD_VAR 0 2
11835: ARRAY
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: LIST
11841: ADD
11842: ST_TO_ADDR
// end ;
11843: GO 11534
11845: POP
11846: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11847: LD_ADDR_LOC 26
11851: PUSH
11852: LD_INT 0
11854: PUSH
11855: LD_INT 0
11857: PUSH
11858: LD_INT 0
11860: PUSH
11861: LD_INT 0
11863: PUSH
11864: LD_INT 0
11866: PUSH
11867: LD_INT 0
11869: PUSH
11870: LD_INT 0
11872: PUSH
11873: LD_INT 0
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: ST_TO_ADDR
// if Limits_Info then
11886: LD_LOC 25
11890: IFFALSE 11906
// Limits_Info := #Limits ^ Limits_Info ;
11892: LD_ADDR_LOC 25
11896: PUSH
11897: LD_STRING #Limits
11899: PUSH
11900: LD_LOC 25
11904: ADD
11905: ST_TO_ADDR
// end ;
11906: LD_VAR 0 1
11910: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
11911: LD_INT 0
11913: PPUSH
11914: PPUSH
11915: PPUSH
11916: PPUSH
// for i := 1 to Restricted_Builds do
11917: LD_ADDR_VAR 0 7
11921: PUSH
11922: DOUBLE
11923: LD_INT 1
11925: DEC
11926: ST_TO_ADDR
11927: LD_LOC 18
11931: PUSH
11932: FOR_TO
11933: IFFALSE 12356
// if BType in Restricted_Builds [ i ] then
11935: LD_VAR 0 2
11939: PUSH
11940: LD_LOC 18
11944: PUSH
11945: LD_VAR 0 7
11949: ARRAY
11950: IN
11951: IFFALSE 12354
// begin if old_side then
11953: LD_VAR 0 4
11957: IFFALSE 12083
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
11959: LD_LOC 24
11963: PUSH
11964: LD_VAR 0 7
11968: ARRAY
11969: PUSH
11970: LD_VAR 0 3
11974: ARRAY
11975: PUSH
11976: LD_VAR 0 5
11980: PLUS
11981: PUSH
11982: LD_LOC 19
11986: PUSH
11987: LD_VAR 0 7
11991: ARRAY
11992: GREATER
11993: IFFALSE 12019
// begin SetSide ( un , old_side ) ;
11995: LD_VAR 0 1
11999: PPUSH
12000: LD_VAR 0 4
12004: PPUSH
12005: CALL_OW 235
// count := 0 ;
12009: LD_ADDR_VAR 0 5
12013: PUSH
12014: LD_INT 0
12016: ST_TO_ADDR
// end else
12017: GO 12083
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
12019: LD_ADDR_LOC 24
12023: PUSH
12024: LD_LOC 24
12028: PPUSH
12029: LD_VAR 0 7
12033: PPUSH
12034: LD_LOC 24
12038: PUSH
12039: LD_VAR 0 7
12043: ARRAY
12044: PPUSH
12045: LD_VAR 0 4
12049: PPUSH
12050: LD_LOC 24
12054: PUSH
12055: LD_VAR 0 7
12059: ARRAY
12060: PUSH
12061: LD_VAR 0 4
12065: ARRAY
12066: PUSH
12067: LD_VAR 0 5
12071: MINUS
12072: PPUSH
12073: CALL_OW 1
12077: PPUSH
12078: CALL_OW 1
12082: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
12083: LD_ADDR_LOC 24
12087: PUSH
12088: LD_LOC 24
12092: PPUSH
12093: LD_VAR 0 7
12097: PPUSH
12098: LD_LOC 24
12102: PUSH
12103: LD_VAR 0 7
12107: ARRAY
12108: PPUSH
12109: LD_VAR 0 3
12113: PPUSH
12114: LD_LOC 24
12118: PUSH
12119: LD_VAR 0 7
12123: ARRAY
12124: PUSH
12125: LD_VAR 0 3
12129: ARRAY
12130: PUSH
12131: LD_VAR 0 5
12135: PLUS
12136: PPUSH
12137: CALL_OW 1
12141: PPUSH
12142: CALL_OW 1
12146: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
12147: LD_VAR 0 5
12151: PUSH
12152: LD_INT 0
12154: NONEQUAL
12155: PUSH
12156: LD_VAR 0 3
12160: PUSH
12161: LD_OWVAR 2
12165: EQUAL
12166: AND
12167: IFFALSE 12210
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
12169: LD_ADDR_LOC 25
12173: PUSH
12174: LD_LOC 25
12178: PPUSH
12179: LD_INT 3
12181: PUSH
12182: LD_VAR 0 7
12186: MUL
12187: PPUSH
12188: LD_LOC 24
12192: PUSH
12193: LD_VAR 0 7
12197: ARRAY
12198: PUSH
12199: LD_VAR 0 3
12203: ARRAY
12204: PPUSH
12205: CALL_OW 1
12209: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
12210: LD_LOC 24
12214: PUSH
12215: LD_VAR 0 7
12219: ARRAY
12220: PUSH
12221: LD_VAR 0 3
12225: ARRAY
12226: PUSH
12227: LD_LOC 19
12231: PUSH
12232: LD_VAR 0 7
12236: ARRAY
12237: GREATER
12238: IFFALSE 12265
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
12240: LD_ADDR_LOC 26
12244: PUSH
12245: LD_LOC 26
12249: PPUSH
12250: LD_VAR 0 3
12254: PPUSH
12255: LD_INT 1
12257: PPUSH
12258: CALL_OW 1
12262: ST_TO_ADDR
// end else
12263: GO 12352
// begin for j := 1 to Restricted_Builds do
12265: LD_ADDR_VAR 0 8
12269: PUSH
12270: DOUBLE
12271: LD_INT 1
12273: DEC
12274: ST_TO_ADDR
12275: LD_LOC 18
12279: PUSH
12280: FOR_TO
12281: IFFALSE 12325
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
12283: LD_LOC 24
12287: PUSH
12288: LD_VAR 0 8
12292: ARRAY
12293: PUSH
12294: LD_VAR 0 3
12298: ARRAY
12299: PUSH
12300: LD_LOC 19
12304: PUSH
12305: LD_VAR 0 8
12309: ARRAY
12310: GREATER
12311: IFFALSE 12323
// begin Is_Cheater := true ;
12313: LD_ADDR_VAR 0 9
12317: PUSH
12318: LD_INT 1
12320: ST_TO_ADDR
// break ;
12321: GO 12325
// end ;
12323: GO 12280
12325: POP
12326: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
12327: LD_ADDR_LOC 26
12331: PUSH
12332: LD_LOC 26
12336: PPUSH
12337: LD_VAR 0 3
12341: PPUSH
12342: LD_VAR 0 9
12346: PPUSH
12347: CALL_OW 1
12351: ST_TO_ADDR
// end ; break ;
12352: GO 12356
// end ;
12354: GO 11932
12356: POP
12357: POP
// end ;
12358: LD_VAR 0 6
12362: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12363: LD_VAR 0 5
12367: PUSH
12368: LD_LOC 20
12372: IN
12373: PUSH
12374: LD_VAR 0 2
12378: PUSH
12379: LD_LOC 21
12383: IN
12384: OR
12385: PUSH
12386: LD_VAR 0 4
12390: PUSH
12391: LD_LOC 22
12395: IN
12396: OR
12397: PUSH
12398: LD_VAR 0 3
12402: PUSH
12403: LD_LOC 23
12407: IN
12408: OR
12409: IFFALSE 12420
// ComCancel ( factory ) ;
12411: LD_VAR 0 1
12415: PPUSH
12416: CALL_OW 127
// end ;
12420: PPOPN 5
12422: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12423: LD_VAR 0 2
12427: PUSH
12428: LD_LOC 20
12432: IN
12433: IFFALSE 12444
// ComCancel ( building ) ;
12435: LD_VAR 0 1
12439: PPUSH
12440: CALL_OW 127
// end ; end_of_file
12444: PPOPN 2
12446: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
12447: LD_INT 0
12449: PPUSH
12450: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12451: LD_ADDR_VAR 0 2
12455: PUSH
12456: LD_STRING #Multi1x1-Time
12458: PUSH
12459: LD_OWVAR 1
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: ST_TO_ADDR
// if WaitServerStrings then
12468: LD_EXP 57
12472: IFFALSE 12490
// AllStrings = AllStrings ^ WaitServerStrings ;
12474: LD_ADDR_VAR 0 2
12478: PUSH
12479: LD_VAR 0 2
12483: PUSH
12484: LD_EXP 57
12488: ADD
12489: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12490: LD_INT 0
12492: PUSH
12493: LD_EXP 15
12497: PUSH
12498: LD_OWVAR 1
12502: MINUS
12503: LESSEQUAL
12504: IFFALSE 12535
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12506: LD_ADDR_VAR 0 2
12510: PUSH
12511: LD_VAR 0 2
12515: PUSH
12516: LD_STRING #allowedsibbomb
12518: PUSH
12519: LD_EXP 15
12523: PUSH
12524: LD_OWVAR 1
12528: MINUS
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: ADD
12534: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
12535: LD_INT 0
12537: PUSH
12538: LD_EXP 60
12542: PUSH
12543: LD_OWVAR 1
12547: MINUS
12548: LESSEQUAL
12549: IFFALSE 12580
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
12551: LD_ADDR_VAR 0 2
12555: PUSH
12556: LD_VAR 0 2
12560: PUSH
12561: LD_STRING #builduptime
12563: PUSH
12564: LD_EXP 60
12568: PUSH
12569: LD_OWVAR 1
12573: MINUS
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: ADD
12579: ST_TO_ADDR
// if ( ExtraStrings ) then
12580: LD_EXP 56
12584: IFFALSE 12606
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12586: LD_ADDR_VAR 0 2
12590: PUSH
12591: LD_VAR 0 2
12595: PUSH
12596: LD_STRING 
12598: ADD
12599: PUSH
12600: LD_EXP 56
12604: ADD
12605: ST_TO_ADDR
// if ( LimitsStrings ) then
12606: CALL 9308 0 0
12610: IFFALSE 12632
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12612: LD_ADDR_VAR 0 2
12616: PUSH
12617: LD_VAR 0 2
12621: PUSH
12622: LD_STRING 
12624: ADD
12625: PUSH
12626: CALL 9308 0 0
12630: ADD
12631: ST_TO_ADDR
// if debug_strings then
12632: LD_OWVAR 48
12636: IFFALSE 12658
// AllStrings := AllStrings ^  ^ debug_strings ;
12638: LD_ADDR_VAR 0 2
12642: PUSH
12643: LD_VAR 0 2
12647: PUSH
12648: LD_STRING 
12650: ADD
12651: PUSH
12652: LD_OWVAR 48
12656: ADD
12657: ST_TO_ADDR
// Display_Strings := AllStrings ;
12658: LD_ADDR_OWVAR 47
12662: PUSH
12663: LD_VAR 0 2
12667: ST_TO_ADDR
// end ;
12668: LD_VAR 0 1
12672: RET
// every 0 0$1 do
12673: GO 12675
12675: DISABLE
// begin ShowTimer ;
12676: CALL 12447 0 0
// enable ;
12680: ENABLE
// end ; end_of_file
12681: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12682: LD_INT 0
12684: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12685: LD_VAR 0 1
12689: PPUSH
12690: CALL_OW 255
12694: PUSH
12695: LD_VAR 0 4
12699: EQUAL
12700: IFFALSE 12719
// begin SetAchievement ( ACH_RAD ) ;
12702: LD_STRING ACH_RAD
12704: PPUSH
12705: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12709: LD_STRING ACH_NL
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: CALL_OW 564
// end end ;
12719: LD_VAR 0 5
12723: RET
// export function SA_Win ( side ) ; begin
12724: LD_INT 0
12726: PPUSH
// case side of 1 :
12727: LD_VAR 0 1
12731: PUSH
12732: LD_INT 1
12734: DOUBLE
12735: EQUAL
12736: IFTRUE 12740
12738: GO 12753
12740: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12741: LD_STRING ACH_AH
12743: PPUSH
12744: LD_INT 1
12746: PPUSH
12747: CALL_OW 564
12751: GO 12916
12753: LD_INT 2
12755: DOUBLE
12756: EQUAL
12757: IFTRUE 12761
12759: GO 12774
12761: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12762: LD_STRING ACH_E
12764: PPUSH
12765: LD_INT 1
12767: PPUSH
12768: CALL_OW 564
12772: GO 12916
12774: LD_INT 3
12776: DOUBLE
12777: EQUAL
12778: IFTRUE 12782
12780: GO 12795
12782: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12783: LD_STRING ACH_OOL
12785: PPUSH
12786: LD_INT 1
12788: PPUSH
12789: CALL_OW 564
12793: GO 12916
12795: LD_INT 1
12797: PUSH
12798: LD_INT 2
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: DOUBLE
12805: EQUAL
12806: IFTRUE 12810
12808: GO 12835
12810: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12811: LD_STRING ACH_AH
12813: PPUSH
12814: LD_REAL  5.00000000000000E-0001
12817: PPUSH
12818: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12822: LD_STRING ACH_E
12824: PPUSH
12825: LD_REAL  5.00000000000000E-0001
12828: PPUSH
12829: CALL_OW 564
// end ; [ 2 , 3 ] :
12833: GO 12916
12835: LD_INT 2
12837: PUSH
12838: LD_INT 3
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: DOUBLE
12845: EQUAL
12846: IFTRUE 12850
12848: GO 12875
12850: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12851: LD_STRING ACH_OOL
12853: PPUSH
12854: LD_REAL  5.00000000000000E-0001
12857: PPUSH
12858: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12862: LD_STRING ACH_E
12864: PPUSH
12865: LD_REAL  5.00000000000000E-0001
12868: PPUSH
12869: CALL_OW 564
// end ; [ 3 , 1 ] :
12873: GO 12916
12875: LD_INT 3
12877: PUSH
12878: LD_INT 1
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: DOUBLE
12885: EQUAL
12886: IFTRUE 12890
12888: GO 12915
12890: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12891: LD_STRING ACH_AH
12893: PPUSH
12894: LD_REAL  5.00000000000000E-0001
12897: PPUSH
12898: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12902: LD_STRING ACH_OOL
12904: PPUSH
12905: LD_REAL  5.00000000000000E-0001
12908: PPUSH
12909: CALL_OW 564
// end ; end ;
12913: GO 12916
12915: POP
// end ; end_of_file
12916: LD_VAR 0 2
12920: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
12921: LD_INT 0
12923: PPUSH
12924: PPUSH
// enable ( 98 ) ;
12925: LD_INT 98
12927: ENABLE_MARKED
// GameEnded = false ;
12928: LD_ADDR_LOC 28
12932: PUSH
12933: LD_INT 0
12935: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12936: LD_ADDR_LOC 27
12940: PUSH
12941: LD_INT 0
12943: PUSH
12944: LD_INT 0
12946: PUSH
12947: LD_INT 0
12949: PUSH
12950: LD_INT 0
12952: PUSH
12953: LD_INT 0
12955: PUSH
12956: LD_INT 0
12958: PUSH
12959: LD_INT 0
12961: PUSH
12962: LD_INT 0
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: ST_TO_ADDR
// unfoged = false ;
12975: LD_ADDR_LOC 29
12979: PUSH
12980: LD_INT 0
12982: ST_TO_ADDR
// defeated_specs := [ ] ;
12983: LD_ADDR_LOC 30
12987: PUSH
12988: EMPTY
12989: ST_TO_ADDR
// for i = 1 to side_positions do
12990: LD_ADDR_VAR 0 2
12994: PUSH
12995: DOUBLE
12996: LD_INT 1
12998: DEC
12999: ST_TO_ADDR
13000: LD_EXP 18
13004: PUSH
13005: FOR_TO
13006: IFFALSE 13046
// if not side_positions [ i ] then
13008: LD_EXP 18
13012: PUSH
13013: LD_VAR 0 2
13017: ARRAY
13018: NOT
13019: IFFALSE 13044
// defeated = replace ( defeated , i , true ) ;
13021: LD_ADDR_LOC 27
13025: PUSH
13026: LD_LOC 27
13030: PPUSH
13031: LD_VAR 0 2
13035: PPUSH
13036: LD_INT 1
13038: PPUSH
13039: CALL_OW 1
13043: ST_TO_ADDR
13044: GO 13005
13046: POP
13047: POP
// end ;
13048: LD_VAR 0 1
13052: RET
// function CanWinLoose ; begin
13053: LD_INT 0
13055: PPUSH
// Result := true ;
13056: LD_ADDR_VAR 0 1
13060: PUSH
13061: LD_INT 1
13063: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
13064: CALL_OW 518
13068: PUSH
13069: CALL_OW 519
13073: PUSH
13074: LD_INT 0
13076: GREATER
13077: AND
13078: IFFALSE 13088
// Result := false ;
13080: LD_ADDR_VAR 0 1
13084: PUSH
13085: LD_INT 0
13087: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13088: CALL_OW 531
13092: PUSH
13093: CALL_OW 519
13097: PUSH
13098: LD_INT 1
13100: GREATER
13101: AND
13102: IFFALSE 13112
// Result := false ;
13104: LD_ADDR_VAR 0 1
13108: PUSH
13109: LD_INT 0
13111: ST_TO_ADDR
// end ;
13112: LD_VAR 0 1
13116: RET
// export function HasPower ( i ) ; var k , h ; begin
13117: LD_INT 0
13119: PPUSH
13120: PPUSH
13121: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
13122: LD_VAR 0 1
13126: PPUSH
13127: CALL_OW 108
13131: NOT
13132: PUSH
13133: LD_EXP 21
13137: PUSH
13138: LD_VAR 0 1
13142: ARRAY
13143: NOT
13144: AND
13145: PUSH
13146: LD_OWVAR 4
13150: AND
13151: IFFALSE 13163
// begin result = false ;
13153: LD_ADDR_VAR 0 2
13157: PUSH
13158: LD_INT 0
13160: ST_TO_ADDR
// end else
13161: GO 13458
// case def_win_rules of 0 :
13163: LD_EXP 30
13167: PUSH
13168: LD_INT 0
13170: DOUBLE
13171: EQUAL
13172: IFTRUE 13176
13174: GO 13339
13176: POP
// if def_people_respawning then
13177: LD_EXP 51
13181: IFFALSE 13272
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
13183: LD_ADDR_VAR 0 2
13187: PUSH
13188: LD_INT 22
13190: PUSH
13191: LD_VAR 0 1
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 2
13202: PUSH
13203: LD_INT 21
13205: PUSH
13206: LD_INT 1
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 33
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 33
13225: PUSH
13226: LD_INT 5
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: LD_INT 30
13235: PUSH
13236: LD_INT 0
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PUSH
13243: LD_INT 30
13245: PUSH
13246: LD_INT 1
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
13270: GO 13337
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
13272: LD_ADDR_VAR 0 2
13276: PUSH
13277: LD_INT 22
13279: PUSH
13280: LD_VAR 0 1
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 2
13291: PUSH
13292: LD_INT 21
13294: PUSH
13295: LD_INT 1
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 33
13304: PUSH
13305: LD_INT 3
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: LD_INT 33
13314: PUSH
13315: LD_INT 5
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PPUSH
13332: CALL_OW 69
13336: ST_TO_ADDR
13337: GO 13458
13339: LD_INT 1
13341: DOUBLE
13342: EQUAL
13343: IFTRUE 13347
13345: GO 13386
13347: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
13348: LD_ADDR_VAR 0 2
13352: PUSH
13353: LD_INT 22
13355: PUSH
13356: LD_VAR 0 1
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 21
13367: PUSH
13368: LD_INT 1
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PPUSH
13379: CALL_OW 69
13383: ST_TO_ADDR
13384: GO 13458
13386: LD_INT 2
13388: DOUBLE
13389: EQUAL
13390: IFTRUE 13394
13392: GO 13457
13394: POP
// begin h = false ;
13395: LD_ADDR_VAR 0 4
13399: PUSH
13400: LD_INT 0
13402: ST_TO_ADDR
// for k in heroes [ i ] do
13403: LD_ADDR_VAR 0 3
13407: PUSH
13408: LD_EXP 31
13412: PUSH
13413: LD_VAR 0 1
13417: ARRAY
13418: PUSH
13419: FOR_IN
13420: IFFALSE 13443
// if IsLive ( k ) then
13422: LD_VAR 0 3
13426: PPUSH
13427: CALL_OW 300
13431: IFFALSE 13441
// h = true ;
13433: LD_ADDR_VAR 0 4
13437: PUSH
13438: LD_INT 1
13440: ST_TO_ADDR
13441: GO 13419
13443: POP
13444: POP
// Result := h ;
13445: LD_ADDR_VAR 0 2
13449: PUSH
13450: LD_VAR 0 4
13454: ST_TO_ADDR
// end ; end ;
13455: GO 13458
13457: POP
// end ;
13458: LD_VAR 0 2
13462: RET
// function AlliedSides ( i , j ) ; begin
13463: LD_INT 0
13465: PPUSH
// Result := false ;
13466: LD_ADDR_VAR 0 3
13470: PUSH
13471: LD_INT 0
13473: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
13474: LD_VAR 0 1
13478: PPUSH
13479: LD_VAR 0 2
13483: PPUSH
13484: CALL_OW 81
13488: PUSH
13489: LD_INT 1
13491: EQUAL
13492: PUSH
13493: LD_VAR 0 2
13497: PPUSH
13498: LD_VAR 0 1
13502: PPUSH
13503: CALL_OW 81
13507: PUSH
13508: LD_INT 1
13510: EQUAL
13511: AND
13512: PUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 83
13522: AND
13523: PUSH
13524: LD_VAR 0 2
13528: PPUSH
13529: CALL_OW 83
13533: AND
13534: IFFALSE 13544
// Result := true ;
13536: LD_ADDR_VAR 0 3
13540: PUSH
13541: LD_INT 1
13543: ST_TO_ADDR
// end ;
13544: LD_VAR 0 3
13548: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
13549: CALL 13053 0 0
13553: PUSH
13554: LD_LOC 28
13558: NOT
13559: AND
13560: IFFALSE 13576
13562: GO 13564
13564: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
13565: LD_ADDR_EXP 57
13569: PUSH
13570: LD_STRING #Player-Ended
13572: PUSH
13573: EMPTY
13574: LIST
13575: ST_TO_ADDR
13576: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
13577: CALL 13053 0 0
13581: PUSH
13582: LD_LOC 28
13586: AND
13587: IFFALSE 13596
13589: GO 13591
13591: DISABLE
// YouLostInMultiplayer ;
13592: CALL_OW 107
13596: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
13597: CALL 13053 0 0
13601: NOT
13602: PUSH
13603: CALL_OW 531
13607: NOT
13608: AND
13609: IFFALSE 13625
13611: GO 13613
13613: DISABLE
// WaitServerStrings = [ #server-wait ] ;
13614: LD_ADDR_EXP 57
13618: PUSH
13619: LD_STRING #server-wait
13621: PUSH
13622: EMPTY
13623: LIST
13624: ST_TO_ADDR
13625: END
// every 100 trigger IAmSpec do
13626: CALL_OW 531
13630: IFFALSE 13646
13632: GO 13634
13634: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
13635: LD_ADDR_EXP 57
13639: PUSH
13640: LD_STRING #Player-IAmSpec
13642: PUSH
13643: EMPTY
13644: LIST
13645: ST_TO_ADDR
13646: END
// every 100 trigger GameEnded and IAmSpec do
13647: LD_LOC 28
13651: PUSH
13652: CALL_OW 531
13656: AND
13657: IFFALSE 13666
13659: GO 13661
13661: DISABLE
// YouLostInMultiplayer ;
13662: CALL_OW 107
13666: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
13667: CALL 13053 0 0
13671: PUSH
13672: LD_LOC 28
13676: NOT
13677: AND
13678: IFFALSE 13694
13680: GO 13682
13682: DISABLE
// WaitServerStrings = [ $player-win ] ;
13683: LD_ADDR_EXP 57
13687: PUSH
13688: LD_STRING $player-win
13690: PUSH
13691: EMPTY
13692: LIST
13693: ST_TO_ADDR
13694: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
13695: CALL 13053 0 0
13699: PUSH
13700: LD_LOC 28
13704: AND
13705: IFFALSE 13729
13707: GO 13709
13709: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
13710: LD_EXP 19
13714: PUSH
13715: LD_OWVAR 7
13719: ARRAY
13720: PPUSH
13721: CALL 12724 0 1
// YouWinInMultiplayer ;
13725: CALL_OW 106
// end ;
13729: END
// every 100 trigger isEditor marked 401 do
13730: LD_OWVAR 84
13734: IFFALSE 13750
13736: GO 13738
13738: DISABLE
// Debug_Strings = [ You won ] ;
13739: LD_ADDR_OWVAR 48
13743: PUSH
13744: LD_STRING You won
13746: PUSH
13747: EMPTY
13748: LIST
13749: ST_TO_ADDR
13750: END
// every 100 trigger isEditor marked 400 do
13751: LD_OWVAR 84
13755: IFFALSE 13771
13757: GO 13759
13759: DISABLE
// Debug_Strings = [ You loss ] ;
13760: LD_ADDR_OWVAR 48
13764: PUSH
13765: LD_STRING You loss
13767: PUSH
13768: EMPTY
13769: LIST
13770: ST_TO_ADDR
13771: END
// every 100 marked 98 do var i , un ;
13772: GO 13774
13774: DISABLE
13775: LD_INT 0
13777: PPUSH
13778: PPUSH
// begin for i = 1 to side_positions do
13779: LD_ADDR_VAR 0 1
13783: PUSH
13784: DOUBLE
13785: LD_INT 1
13787: DEC
13788: ST_TO_ADDR
13789: LD_EXP 18
13793: PUSH
13794: FOR_TO
13795: IFFALSE 13882
// begin if side_positions [ i ] then
13797: LD_EXP 18
13801: PUSH
13802: LD_VAR 0 1
13806: ARRAY
13807: IFFALSE 13880
// if not HasPower ( i ) and not defeated [ i ] then
13809: LD_VAR 0 1
13813: PPUSH
13814: CALL 13117 0 1
13818: NOT
13819: PUSH
13820: LD_LOC 27
13824: PUSH
13825: LD_VAR 0 1
13829: ARRAY
13830: NOT
13831: AND
13832: IFFALSE 13880
// begin defeated = replace ( defeated , i , true ) ;
13834: LD_ADDR_LOC 27
13838: PUSH
13839: LD_LOC 27
13843: PPUSH
13844: LD_VAR 0 1
13848: PPUSH
13849: LD_INT 1
13851: PPUSH
13852: CALL_OW 1
13856: ST_TO_ADDR
// if i = mp_player_side then
13857: LD_VAR 0 1
13861: PUSH
13862: LD_OWVAR 7
13866: EQUAL
13867: IFFALSE 13880
// begin Multiplayer_Loose_Message ;
13869: CALL_OW 521
// SetPlayerSpectator ( ) ;
13873: CALL_OW 572
// enable ( 400 ) ;
13877: LD_INT 400
13879: ENABLE_MARKED
// end ; end ; end ;
13880: GO 13794
13882: POP
13883: POP
// DidGameEnd ;
13884: CALL 13899 0 0
// if not GameEnded then
13888: LD_LOC 28
13892: NOT
13893: IFFALSE 13896
// enable ;
13895: ENABLE
// end ;
13896: PPOPN 2
13898: END
// function DidGameEnd ; var i , k , enemy ; begin
13899: LD_INT 0
13901: PPUSH
13902: PPUSH
13903: PPUSH
13904: PPUSH
// enemy = [ ] ;
13905: LD_ADDR_VAR 0 4
13909: PUSH
13910: EMPTY
13911: ST_TO_ADDR
// for i = 1 to side_positions do
13912: LD_ADDR_VAR 0 2
13916: PUSH
13917: DOUBLE
13918: LD_INT 1
13920: DEC
13921: ST_TO_ADDR
13922: LD_EXP 18
13926: PUSH
13927: FOR_TO
13928: IFFALSE 14022
// if not defeated [ i ] then
13930: LD_LOC 27
13934: PUSH
13935: LD_VAR 0 2
13939: ARRAY
13940: NOT
13941: IFFALSE 14020
// for k = 1 to side_positions do
13943: LD_ADDR_VAR 0 3
13947: PUSH
13948: DOUBLE
13949: LD_INT 1
13951: DEC
13952: ST_TO_ADDR
13953: LD_EXP 18
13957: PUSH
13958: FOR_TO
13959: IFFALSE 14018
// if not defeated [ k ] then
13961: LD_LOC 27
13965: PUSH
13966: LD_VAR 0 3
13970: ARRAY
13971: NOT
13972: IFFALSE 14016
// if not AlliedSides ( i , k ) then
13974: LD_VAR 0 2
13978: PPUSH
13979: LD_VAR 0 3
13983: PPUSH
13984: CALL 13463 0 2
13988: NOT
13989: IFFALSE 14016
// enemy = enemy ^ [ i , k ] ;
13991: LD_ADDR_VAR 0 4
13995: PUSH
13996: LD_VAR 0 4
14000: PUSH
14001: LD_VAR 0 2
14005: PUSH
14006: LD_VAR 0 3
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: ADD
14015: ST_TO_ADDR
14016: GO 13958
14018: POP
14019: POP
14020: GO 13927
14022: POP
14023: POP
// if not enemy then
14024: LD_VAR 0 4
14028: NOT
14029: IFFALSE 14055
// begin GameEnded = true ;
14031: LD_ADDR_LOC 28
14035: PUSH
14036: LD_INT 1
14038: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
14039: LD_LOC 27
14043: PUSH
14044: LD_OWVAR 7
14048: ARRAY
14049: NOT
14050: IFFALSE 14055
// enable ( 401 ) ;
14052: LD_INT 401
14054: ENABLE_MARKED
// end ; end ;
14055: LD_VAR 0 1
14059: RET
// function unfog ; var k , friends ; begin
14060: LD_INT 0
14062: PPUSH
14063: PPUSH
14064: PPUSH
// for k = 1 to side_positions do
14065: LD_ADDR_VAR 0 2
14069: PUSH
14070: DOUBLE
14071: LD_INT 1
14073: DEC
14074: ST_TO_ADDR
14075: LD_EXP 18
14079: PUSH
14080: FOR_TO
14081: IFFALSE 14137
// if not defeated [ k ] then
14083: LD_LOC 27
14087: PUSH
14088: LD_VAR 0 2
14092: ARRAY
14093: NOT
14094: IFFALSE 14135
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
14096: LD_OWVAR 7
14100: PPUSH
14101: LD_VAR 0 2
14105: PPUSH
14106: CALL_OW 81
14110: PUSH
14111: LD_INT 1
14113: PUSH
14114: EMPTY
14115: LIST
14116: IN
14117: IFFALSE 14135
// friends = friends ^ k ;
14119: LD_ADDR_VAR 0 3
14123: PUSH
14124: LD_VAR 0 3
14128: PUSH
14129: LD_VAR 0 2
14133: ADD
14134: ST_TO_ADDR
14135: GO 14080
14137: POP
14138: POP
// if not friends then
14139: LD_VAR 0 3
14143: NOT
14144: IFFALSE 14158
// begin SetPlayerSpectator ( ) ;
14146: CALL_OW 572
// unfoged = true ;
14150: LD_ADDR_LOC 29
14154: PUSH
14155: LD_INT 1
14157: ST_TO_ADDR
// end ; end ;
14158: LD_VAR 0 1
14162: RET
// export function MakeGameEnd ; begin
14163: LD_INT 0
14165: PPUSH
// SetPlayerSpectator ( ) ;
14166: CALL_OW 572
// unfoged = true ;
14170: LD_ADDR_LOC 29
14174: PUSH
14175: LD_INT 1
14177: ST_TO_ADDR
// wait ( 0 0$5 ) ;
14178: LD_INT 175
14180: PPUSH
14181: CALL_OW 67
// GameEnded = true ;
14185: LD_ADDR_LOC 28
14189: PUSH
14190: LD_INT 1
14192: ST_TO_ADDR
// end ;
14193: LD_VAR 0 1
14197: RET
// export function GetGameEnded ; begin
14198: LD_INT 0
14200: PPUSH
// result = GameEnded ;
14201: LD_ADDR_VAR 0 1
14205: PUSH
14206: LD_LOC 28
14210: ST_TO_ADDR
// end ; end_of_file
14211: LD_VAR 0 1
14215: RET
// export function SetMpTechs ( ) ; var side , i ; begin
14216: LD_INT 0
14218: PPUSH
14219: PPUSH
14220: PPUSH
// for side = 1 to 8 do
14221: LD_ADDR_VAR 0 2
14225: PUSH
14226: DOUBLE
14227: LD_INT 1
14229: DEC
14230: ST_TO_ADDR
14231: LD_INT 8
14233: PUSH
14234: FOR_TO
14235: IFFALSE 14356
// begin for i = 1 to 72 do
14237: LD_ADDR_VAR 0 3
14241: PUSH
14242: DOUBLE
14243: LD_INT 1
14245: DEC
14246: ST_TO_ADDR
14247: LD_INT 72
14249: PUSH
14250: FOR_TO
14251: IFFALSE 14282
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
14253: LD_VAR 0 3
14257: PPUSH
14258: LD_VAR 0 2
14262: PPUSH
14263: LD_INT 0
14265: PPUSH
14266: LD_VAR 0 3
14270: PPUSH
14271: CALL_OW 565
14275: PPUSH
14276: CALL_OW 322
14280: GO 14250
14282: POP
14283: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
14284: LD_INT 73
14286: PPUSH
14287: LD_VAR 0 2
14291: PPUSH
14292: LD_INT 0
14294: PPUSH
14295: LD_INT 25
14297: PPUSH
14298: CALL_OW 565
14302: PPUSH
14303: CALL_OW 322
// for i = 0 to 40 do
14307: LD_ADDR_VAR 0 3
14311: PUSH
14312: DOUBLE
14313: LD_INT 0
14315: DEC
14316: ST_TO_ADDR
14317: LD_INT 40
14319: PUSH
14320: FOR_TO
14321: IFFALSE 14352
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
14323: LD_VAR 0 3
14327: PPUSH
14328: LD_VAR 0 2
14332: PPUSH
14333: LD_INT 1
14335: PPUSH
14336: LD_VAR 0 3
14340: PPUSH
14341: CALL_OW 565
14345: PPUSH
14346: CALL_OW 324
14350: GO 14320
14352: POP
14353: POP
// end ;
14354: GO 14234
14356: POP
14357: POP
// end ;
14358: LD_VAR 0 1
14362: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
14363: LD_INT 0
14365: PPUSH
14366: PPUSH
14367: PPUSH
// for side = 1 to 8 do
14368: LD_ADDR_VAR 0 3
14372: PUSH
14373: DOUBLE
14374: LD_INT 1
14376: DEC
14377: ST_TO_ADDR
14378: LD_INT 8
14380: PUSH
14381: FOR_TO
14382: IFFALSE 18378
// begin for i = 1 to 73 do
14384: LD_ADDR_VAR 0 4
14388: PUSH
14389: DOUBLE
14390: LD_INT 1
14392: DEC
14393: ST_TO_ADDR
14394: LD_INT 73
14396: PUSH
14397: FOR_TO
14398: IFFALSE 14419
// SetTech ( i , side , state_disabled ) ;
14400: LD_VAR 0 4
14404: PPUSH
14405: LD_VAR 0 3
14409: PPUSH
14410: LD_INT 0
14412: PPUSH
14413: CALL_OW 322
14417: GO 14397
14419: POP
14420: POP
// for i = 0 to 40 do
14421: LD_ADDR_VAR 0 4
14425: PUSH
14426: DOUBLE
14427: LD_INT 0
14429: DEC
14430: ST_TO_ADDR
14431: LD_INT 40
14433: PUSH
14434: FOR_TO
14435: IFFALSE 14456
// SetRestrict ( i , side , false ) ;
14437: LD_VAR 0 4
14441: PPUSH
14442: LD_VAR 0 3
14446: PPUSH
14447: LD_INT 0
14449: PPUSH
14450: CALL_OW 324
14454: GO 14434
14456: POP
14457: POP
// case level of 1 :
14458: LD_VAR 0 1
14462: PUSH
14463: LD_INT 1
14465: DOUBLE
14466: EQUAL
14467: IFTRUE 14471
14469: GO 14624
14471: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14472: LD_INT 35
14474: PPUSH
14475: LD_VAR 0 3
14479: PPUSH
14480: LD_INT 1
14482: PPUSH
14483: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14487: LD_INT 45
14489: PPUSH
14490: LD_VAR 0 3
14494: PPUSH
14495: LD_INT 1
14497: PPUSH
14498: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14502: LD_INT 46
14504: PPUSH
14505: LD_VAR 0 3
14509: PPUSH
14510: LD_INT 1
14512: PPUSH
14513: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14517: LD_INT 47
14519: PPUSH
14520: LD_VAR 0 3
14524: PPUSH
14525: LD_INT 1
14527: PPUSH
14528: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14532: LD_INT 0
14534: PPUSH
14535: LD_VAR 0 3
14539: PPUSH
14540: LD_INT 1
14542: PPUSH
14543: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14547: LD_INT 2
14549: PPUSH
14550: LD_VAR 0 3
14554: PPUSH
14555: LD_INT 1
14557: PPUSH
14558: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14562: LD_INT 4
14564: PPUSH
14565: LD_VAR 0 3
14569: PPUSH
14570: LD_INT 1
14572: PPUSH
14573: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14577: LD_INT 6
14579: PPUSH
14580: LD_VAR 0 3
14584: PPUSH
14585: LD_INT 1
14587: PPUSH
14588: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14592: LD_INT 29
14594: PPUSH
14595: LD_VAR 0 3
14599: PPUSH
14600: LD_INT 1
14602: PPUSH
14603: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14607: LD_INT 31
14609: PPUSH
14610: LD_VAR 0 3
14614: PPUSH
14615: LD_INT 1
14617: PPUSH
14618: CALL_OW 324
// end ; 2 :
14622: GO 18376
14624: LD_INT 2
14626: DOUBLE
14627: EQUAL
14628: IFTRUE 14632
14630: GO 14830
14632: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14633: LD_INT 35
14635: PPUSH
14636: LD_VAR 0 3
14640: PPUSH
14641: LD_INT 1
14643: PPUSH
14644: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14648: LD_INT 45
14650: PPUSH
14651: LD_VAR 0 3
14655: PPUSH
14656: LD_INT 1
14658: PPUSH
14659: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14663: LD_INT 46
14665: PPUSH
14666: LD_VAR 0 3
14670: PPUSH
14671: LD_INT 1
14673: PPUSH
14674: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14678: LD_INT 47
14680: PPUSH
14681: LD_VAR 0 3
14685: PPUSH
14686: LD_INT 1
14688: PPUSH
14689: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14693: LD_INT 1
14695: PPUSH
14696: LD_VAR 0 3
14700: PPUSH
14701: LD_INT 1
14703: PPUSH
14704: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14708: LD_INT 2
14710: PPUSH
14711: LD_VAR 0 3
14715: PPUSH
14716: LD_INT 1
14718: PPUSH
14719: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14723: LD_INT 11
14725: PPUSH
14726: LD_VAR 0 3
14730: PPUSH
14731: LD_INT 1
14733: PPUSH
14734: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14738: LD_INT 0
14740: PPUSH
14741: LD_VAR 0 3
14745: PPUSH
14746: LD_INT 1
14748: PPUSH
14749: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14753: LD_INT 2
14755: PPUSH
14756: LD_VAR 0 3
14760: PPUSH
14761: LD_INT 1
14763: PPUSH
14764: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14768: LD_INT 4
14770: PPUSH
14771: LD_VAR 0 3
14775: PPUSH
14776: LD_INT 1
14778: PPUSH
14779: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14783: LD_INT 6
14785: PPUSH
14786: LD_VAR 0 3
14790: PPUSH
14791: LD_INT 1
14793: PPUSH
14794: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14798: LD_INT 29
14800: PPUSH
14801: LD_VAR 0 3
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14813: LD_INT 31
14815: PPUSH
14816: LD_VAR 0 3
14820: PPUSH
14821: LD_INT 1
14823: PPUSH
14824: CALL_OW 324
// end ; 3 :
14828: GO 18376
14830: LD_INT 3
14832: DOUBLE
14833: EQUAL
14834: IFTRUE 14838
14836: GO 15291
14838: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14839: LD_INT 35
14841: PPUSH
14842: LD_VAR 0 3
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14854: LD_INT 45
14856: PPUSH
14857: LD_VAR 0 3
14861: PPUSH
14862: LD_INT 1
14864: PPUSH
14865: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14869: LD_INT 46
14871: PPUSH
14872: LD_VAR 0 3
14876: PPUSH
14877: LD_INT 1
14879: PPUSH
14880: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14884: LD_INT 47
14886: PPUSH
14887: LD_VAR 0 3
14891: PPUSH
14892: LD_INT 1
14894: PPUSH
14895: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14899: LD_INT 1
14901: PPUSH
14902: LD_VAR 0 3
14906: PPUSH
14907: LD_INT 1
14909: PPUSH
14910: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14914: LD_INT 2
14916: PPUSH
14917: LD_VAR 0 3
14921: PPUSH
14922: LD_INT 1
14924: PPUSH
14925: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14929: LD_INT 11
14931: PPUSH
14932: LD_VAR 0 3
14936: PPUSH
14937: LD_INT 1
14939: PPUSH
14940: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14944: LD_INT 48
14946: PPUSH
14947: LD_VAR 0 3
14951: PPUSH
14952: LD_INT 1
14954: PPUSH
14955: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14959: LD_INT 69
14961: PPUSH
14962: LD_VAR 0 3
14966: PPUSH
14967: LD_INT 1
14969: PPUSH
14970: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14974: LD_INT 39
14976: PPUSH
14977: LD_VAR 0 3
14981: PPUSH
14982: LD_INT 1
14984: PPUSH
14985: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14989: LD_INT 43
14991: PPUSH
14992: LD_VAR 0 3
14996: PPUSH
14997: LD_INT 1
14999: PPUSH
15000: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15004: LD_INT 51
15006: PPUSH
15007: LD_VAR 0 3
15011: PPUSH
15012: LD_INT 1
15014: PPUSH
15015: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15019: LD_INT 6
15021: PPUSH
15022: LD_VAR 0 3
15026: PPUSH
15027: LD_INT 1
15029: PPUSH
15030: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15034: LD_INT 0
15036: PPUSH
15037: LD_VAR 0 3
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15049: LD_INT 2
15051: PPUSH
15052: LD_VAR 0 3
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15064: LD_INT 3
15066: PPUSH
15067: LD_VAR 0 3
15071: PPUSH
15072: LD_INT 1
15074: PPUSH
15075: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15079: LD_INT 4
15081: PPUSH
15082: LD_VAR 0 3
15086: PPUSH
15087: LD_INT 1
15089: PPUSH
15090: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15094: LD_INT 6
15096: PPUSH
15097: LD_VAR 0 3
15101: PPUSH
15102: LD_INT 1
15104: PPUSH
15105: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15109: LD_INT 7
15111: PPUSH
15112: LD_VAR 0 3
15116: PPUSH
15117: LD_INT 1
15119: PPUSH
15120: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15124: LD_INT 8
15126: PPUSH
15127: LD_VAR 0 3
15131: PPUSH
15132: LD_INT 1
15134: PPUSH
15135: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15139: LD_INT 10
15141: PPUSH
15142: LD_VAR 0 3
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15154: LD_INT 15
15156: PPUSH
15157: LD_VAR 0 3
15161: PPUSH
15162: LD_INT 1
15164: PPUSH
15165: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15169: LD_INT 16
15171: PPUSH
15172: LD_VAR 0 3
15176: PPUSH
15177: LD_INT 1
15179: PPUSH
15180: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15184: LD_INT 17
15186: PPUSH
15187: LD_VAR 0 3
15191: PPUSH
15192: LD_INT 1
15194: PPUSH
15195: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15199: LD_INT 20
15201: PPUSH
15202: LD_VAR 0 3
15206: PPUSH
15207: LD_INT 1
15209: PPUSH
15210: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15214: LD_INT 26
15216: PPUSH
15217: LD_VAR 0 3
15221: PPUSH
15222: LD_INT 1
15224: PPUSH
15225: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15229: LD_INT 27
15231: PPUSH
15232: LD_VAR 0 3
15236: PPUSH
15237: LD_INT 1
15239: PPUSH
15240: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15244: LD_INT 29
15246: PPUSH
15247: LD_VAR 0 3
15251: PPUSH
15252: LD_INT 1
15254: PPUSH
15255: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15259: LD_INT 31
15261: PPUSH
15262: LD_VAR 0 3
15266: PPUSH
15267: LD_INT 1
15269: PPUSH
15270: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15274: LD_INT 32
15276: PPUSH
15277: LD_VAR 0 3
15281: PPUSH
15282: LD_INT 1
15284: PPUSH
15285: CALL_OW 324
// end ; 4 :
15289: GO 18376
15291: LD_INT 4
15293: DOUBLE
15294: EQUAL
15295: IFTRUE 15299
15297: GO 16247
15299: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15300: LD_INT 35
15302: PPUSH
15303: LD_VAR 0 3
15307: PPUSH
15308: LD_INT 1
15310: PPUSH
15311: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15315: LD_INT 45
15317: PPUSH
15318: LD_VAR 0 3
15322: PPUSH
15323: LD_INT 1
15325: PPUSH
15326: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15330: LD_INT 46
15332: PPUSH
15333: LD_VAR 0 3
15337: PPUSH
15338: LD_INT 1
15340: PPUSH
15341: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15345: LD_INT 47
15347: PPUSH
15348: LD_VAR 0 3
15352: PPUSH
15353: LD_INT 1
15355: PPUSH
15356: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15360: LD_INT 1
15362: PPUSH
15363: LD_VAR 0 3
15367: PPUSH
15368: LD_INT 1
15370: PPUSH
15371: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15375: LD_INT 2
15377: PPUSH
15378: LD_VAR 0 3
15382: PPUSH
15383: LD_INT 1
15385: PPUSH
15386: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15390: LD_INT 11
15392: PPUSH
15393: LD_VAR 0 3
15397: PPUSH
15398: LD_INT 1
15400: PPUSH
15401: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15405: LD_INT 20
15407: PPUSH
15408: LD_VAR 0 3
15412: PPUSH
15413: LD_INT 1
15415: PPUSH
15416: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15420: LD_INT 48
15422: PPUSH
15423: LD_VAR 0 3
15427: PPUSH
15428: LD_INT 1
15430: PPUSH
15431: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15435: LD_INT 49
15437: PPUSH
15438: LD_VAR 0 3
15442: PPUSH
15443: LD_INT 1
15445: PPUSH
15446: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15450: LD_INT 69
15452: PPUSH
15453: LD_VAR 0 3
15457: PPUSH
15458: LD_INT 1
15460: PPUSH
15461: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15465: LD_INT 39
15467: PPUSH
15468: LD_VAR 0 3
15472: PPUSH
15473: LD_INT 1
15475: PPUSH
15476: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15480: LD_INT 34
15482: PPUSH
15483: LD_VAR 0 3
15487: PPUSH
15488: LD_INT 1
15490: PPUSH
15491: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15495: LD_INT 42
15497: PPUSH
15498: LD_VAR 0 3
15502: PPUSH
15503: LD_INT 1
15505: PPUSH
15506: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15510: LD_INT 44
15512: PPUSH
15513: LD_VAR 0 3
15517: PPUSH
15518: LD_INT 1
15520: PPUSH
15521: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15525: LD_INT 41
15527: PPUSH
15528: LD_VAR 0 3
15532: PPUSH
15533: LD_INT 1
15535: PPUSH
15536: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15540: LD_INT 43
15542: PPUSH
15543: LD_VAR 0 3
15547: PPUSH
15548: LD_INT 1
15550: PPUSH
15551: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15555: LD_INT 70
15557: PPUSH
15558: LD_VAR 0 3
15562: PPUSH
15563: LD_INT 1
15565: PPUSH
15566: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15570: LD_INT 51
15572: PPUSH
15573: LD_VAR 0 3
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15585: LD_INT 52
15587: PPUSH
15588: LD_VAR 0 3
15592: PPUSH
15593: LD_INT 1
15595: PPUSH
15596: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15600: LD_INT 6
15602: PPUSH
15603: LD_VAR 0 3
15607: PPUSH
15608: LD_INT 1
15610: PPUSH
15611: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15615: LD_INT 15
15617: PPUSH
15618: LD_VAR 0 3
15622: PPUSH
15623: LD_INT 1
15625: PPUSH
15626: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15630: LD_INT 7
15632: PPUSH
15633: LD_VAR 0 3
15637: PPUSH
15638: LD_INT 1
15640: PPUSH
15641: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15645: LD_INT 12
15647: PPUSH
15648: LD_VAR 0 3
15652: PPUSH
15653: LD_INT 1
15655: PPUSH
15656: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15660: LD_INT 18
15662: PPUSH
15663: LD_VAR 0 3
15667: PPUSH
15668: LD_INT 1
15670: PPUSH
15671: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15675: LD_INT 60
15677: PPUSH
15678: LD_VAR 0 3
15682: PPUSH
15683: LD_INT 1
15685: PPUSH
15686: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15690: LD_INT 9
15692: PPUSH
15693: LD_VAR 0 3
15697: PPUSH
15698: LD_INT 1
15700: PPUSH
15701: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15705: LD_INT 30
15707: PPUSH
15708: LD_VAR 0 3
15712: PPUSH
15713: LD_INT 1
15715: PPUSH
15716: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15720: LD_INT 37
15722: PPUSH
15723: LD_VAR 0 3
15727: PPUSH
15728: LD_INT 1
15730: PPUSH
15731: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15735: LD_INT 5
15737: PPUSH
15738: LD_VAR 0 3
15742: PPUSH
15743: LD_INT 1
15745: PPUSH
15746: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15750: LD_INT 66
15752: PPUSH
15753: LD_VAR 0 3
15757: PPUSH
15758: LD_INT 1
15760: PPUSH
15761: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15765: LD_INT 21
15767: PPUSH
15768: LD_VAR 0 3
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15780: LD_INT 22
15782: PPUSH
15783: LD_VAR 0 3
15787: PPUSH
15788: LD_INT 1
15790: PPUSH
15791: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15795: LD_INT 54
15797: PPUSH
15798: LD_VAR 0 3
15802: PPUSH
15803: LD_INT 1
15805: PPUSH
15806: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15810: LD_INT 0
15812: PPUSH
15813: LD_VAR 0 3
15817: PPUSH
15818: LD_INT 1
15820: PPUSH
15821: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15825: LD_INT 1
15827: PPUSH
15828: LD_VAR 0 3
15832: PPUSH
15833: LD_INT 1
15835: PPUSH
15836: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15840: LD_INT 2
15842: PPUSH
15843: LD_VAR 0 3
15847: PPUSH
15848: LD_INT 1
15850: PPUSH
15851: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15855: LD_INT 3
15857: PPUSH
15858: LD_VAR 0 3
15862: PPUSH
15863: LD_INT 1
15865: PPUSH
15866: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15870: LD_INT 4
15872: PPUSH
15873: LD_VAR 0 3
15877: PPUSH
15878: LD_INT 1
15880: PPUSH
15881: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15885: LD_INT 5
15887: PPUSH
15888: LD_VAR 0 3
15892: PPUSH
15893: LD_INT 1
15895: PPUSH
15896: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15900: LD_INT 6
15902: PPUSH
15903: LD_VAR 0 3
15907: PPUSH
15908: LD_INT 1
15910: PPUSH
15911: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15915: LD_INT 7
15917: PPUSH
15918: LD_VAR 0 3
15922: PPUSH
15923: LD_INT 1
15925: PPUSH
15926: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15930: LD_INT 8
15932: PPUSH
15933: LD_VAR 0 3
15937: PPUSH
15938: LD_INT 1
15940: PPUSH
15941: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15945: LD_INT 10
15947: PPUSH
15948: LD_VAR 0 3
15952: PPUSH
15953: LD_INT 1
15955: PPUSH
15956: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15960: LD_INT 11
15962: PPUSH
15963: LD_VAR 0 3
15967: PPUSH
15968: LD_INT 1
15970: PPUSH
15971: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15975: LD_INT 12
15977: PPUSH
15978: LD_VAR 0 3
15982: PPUSH
15983: LD_INT 1
15985: PPUSH
15986: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15990: LD_INT 13
15992: PPUSH
15993: LD_VAR 0 3
15997: PPUSH
15998: LD_INT 1
16000: PPUSH
16001: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16005: LD_INT 14
16007: PPUSH
16008: LD_VAR 0 3
16012: PPUSH
16013: LD_INT 1
16015: PPUSH
16016: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16020: LD_INT 15
16022: PPUSH
16023: LD_VAR 0 3
16027: PPUSH
16028: LD_INT 1
16030: PPUSH
16031: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16035: LD_INT 16
16037: PPUSH
16038: LD_VAR 0 3
16042: PPUSH
16043: LD_INT 1
16045: PPUSH
16046: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16050: LD_INT 17
16052: PPUSH
16053: LD_VAR 0 3
16057: PPUSH
16058: LD_INT 1
16060: PPUSH
16061: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16065: LD_INT 19
16067: PPUSH
16068: LD_VAR 0 3
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16080: LD_INT 20
16082: PPUSH
16083: LD_VAR 0 3
16087: PPUSH
16088: LD_INT 1
16090: PPUSH
16091: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16095: LD_INT 21
16097: PPUSH
16098: LD_VAR 0 3
16102: PPUSH
16103: LD_INT 1
16105: PPUSH
16106: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16110: LD_INT 23
16112: PPUSH
16113: LD_VAR 0 3
16117: PPUSH
16118: LD_INT 1
16120: PPUSH
16121: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16125: LD_INT 26
16127: PPUSH
16128: LD_VAR 0 3
16132: PPUSH
16133: LD_INT 1
16135: PPUSH
16136: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16140: LD_INT 27
16142: PPUSH
16143: LD_VAR 0 3
16147: PPUSH
16148: LD_INT 1
16150: PPUSH
16151: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16155: LD_INT 28
16157: PPUSH
16158: LD_VAR 0 3
16162: PPUSH
16163: LD_INT 1
16165: PPUSH
16166: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16170: LD_INT 29
16172: PPUSH
16173: LD_VAR 0 3
16177: PPUSH
16178: LD_INT 1
16180: PPUSH
16181: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16185: LD_INT 30
16187: PPUSH
16188: LD_VAR 0 3
16192: PPUSH
16193: LD_INT 1
16195: PPUSH
16196: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16200: LD_INT 31
16202: PPUSH
16203: LD_VAR 0 3
16207: PPUSH
16208: LD_INT 1
16210: PPUSH
16211: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16215: LD_INT 32
16217: PPUSH
16218: LD_VAR 0 3
16222: PPUSH
16223: LD_INT 1
16225: PPUSH
16226: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16230: LD_INT 36
16232: PPUSH
16233: LD_VAR 0 3
16237: PPUSH
16238: LD_INT 1
16240: PPUSH
16241: CALL_OW 324
// end ; 5 :
16245: GO 18376
16247: LD_INT 5
16249: DOUBLE
16250: EQUAL
16251: IFTRUE 16255
16253: GO 17368
16255: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16256: LD_INT 35
16258: PPUSH
16259: LD_VAR 0 3
16263: PPUSH
16264: LD_INT 1
16266: PPUSH
16267: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16271: LD_INT 45
16273: PPUSH
16274: LD_VAR 0 3
16278: PPUSH
16279: LD_INT 1
16281: PPUSH
16282: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16286: LD_INT 46
16288: PPUSH
16289: LD_VAR 0 3
16293: PPUSH
16294: LD_INT 1
16296: PPUSH
16297: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16301: LD_INT 47
16303: PPUSH
16304: LD_VAR 0 3
16308: PPUSH
16309: LD_INT 1
16311: PPUSH
16312: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16316: LD_INT 1
16318: PPUSH
16319: LD_VAR 0 3
16323: PPUSH
16324: LD_INT 1
16326: PPUSH
16327: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16331: LD_INT 2
16333: PPUSH
16334: LD_VAR 0 3
16338: PPUSH
16339: LD_INT 1
16341: PPUSH
16342: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16346: LD_INT 11
16348: PPUSH
16349: LD_VAR 0 3
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16361: LD_INT 20
16363: PPUSH
16364: LD_VAR 0 3
16368: PPUSH
16369: LD_INT 1
16371: PPUSH
16372: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16376: LD_INT 48
16378: PPUSH
16379: LD_VAR 0 3
16383: PPUSH
16384: LD_INT 1
16386: PPUSH
16387: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16391: LD_INT 49
16393: PPUSH
16394: LD_VAR 0 3
16398: PPUSH
16399: LD_INT 1
16401: PPUSH
16402: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16406: LD_INT 69
16408: PPUSH
16409: LD_VAR 0 3
16413: PPUSH
16414: LD_INT 1
16416: PPUSH
16417: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16421: LD_INT 39
16423: PPUSH
16424: LD_VAR 0 3
16428: PPUSH
16429: LD_INT 1
16431: PPUSH
16432: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16436: LD_INT 34
16438: PPUSH
16439: LD_VAR 0 3
16443: PPUSH
16444: LD_INT 1
16446: PPUSH
16447: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16451: LD_INT 42
16453: PPUSH
16454: LD_VAR 0 3
16458: PPUSH
16459: LD_INT 1
16461: PPUSH
16462: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16466: LD_INT 44
16468: PPUSH
16469: LD_VAR 0 3
16473: PPUSH
16474: LD_INT 1
16476: PPUSH
16477: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16481: LD_INT 41
16483: PPUSH
16484: LD_VAR 0 3
16488: PPUSH
16489: LD_INT 1
16491: PPUSH
16492: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16496: LD_INT 40
16498: PPUSH
16499: LD_VAR 0 3
16503: PPUSH
16504: LD_INT 1
16506: PPUSH
16507: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16511: LD_INT 43
16513: PPUSH
16514: LD_VAR 0 3
16518: PPUSH
16519: LD_INT 1
16521: PPUSH
16522: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16526: LD_INT 70
16528: PPUSH
16529: LD_VAR 0 3
16533: PPUSH
16534: LD_INT 1
16536: PPUSH
16537: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16541: LD_INT 51
16543: PPUSH
16544: LD_VAR 0 3
16548: PPUSH
16549: LD_INT 1
16551: PPUSH
16552: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16556: LD_INT 52
16558: PPUSH
16559: LD_VAR 0 3
16563: PPUSH
16564: LD_INT 1
16566: PPUSH
16567: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16571: LD_INT 6
16573: PPUSH
16574: LD_VAR 0 3
16578: PPUSH
16579: LD_INT 1
16581: PPUSH
16582: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16586: LD_INT 15
16588: PPUSH
16589: LD_VAR 0 3
16593: PPUSH
16594: LD_INT 1
16596: PPUSH
16597: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16601: LD_INT 7
16603: PPUSH
16604: LD_VAR 0 3
16608: PPUSH
16609: LD_INT 1
16611: PPUSH
16612: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16616: LD_INT 12
16618: PPUSH
16619: LD_VAR 0 3
16623: PPUSH
16624: LD_INT 1
16626: PPUSH
16627: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16631: LD_INT 17
16633: PPUSH
16634: LD_VAR 0 3
16638: PPUSH
16639: LD_INT 1
16641: PPUSH
16642: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16646: LD_INT 18
16648: PPUSH
16649: LD_VAR 0 3
16653: PPUSH
16654: LD_INT 1
16656: PPUSH
16657: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16661: LD_INT 60
16663: PPUSH
16664: LD_VAR 0 3
16668: PPUSH
16669: LD_INT 1
16671: PPUSH
16672: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16676: LD_INT 32
16678: PPUSH
16679: LD_VAR 0 3
16683: PPUSH
16684: LD_INT 1
16686: PPUSH
16687: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16691: LD_INT 9
16693: PPUSH
16694: LD_VAR 0 3
16698: PPUSH
16699: LD_INT 1
16701: PPUSH
16702: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16706: LD_INT 57
16708: PPUSH
16709: LD_VAR 0 3
16713: PPUSH
16714: LD_INT 1
16716: PPUSH
16717: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16721: LD_INT 30
16723: PPUSH
16724: LD_VAR 0 3
16728: PPUSH
16729: LD_INT 1
16731: PPUSH
16732: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16736: LD_INT 37
16738: PPUSH
16739: LD_VAR 0 3
16743: PPUSH
16744: LD_INT 1
16746: PPUSH
16747: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16751: LD_INT 63
16753: PPUSH
16754: LD_VAR 0 3
16758: PPUSH
16759: LD_INT 1
16761: PPUSH
16762: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16766: LD_INT 3
16768: PPUSH
16769: LD_VAR 0 3
16773: PPUSH
16774: LD_INT 1
16776: PPUSH
16777: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16781: LD_INT 4
16783: PPUSH
16784: LD_VAR 0 3
16788: PPUSH
16789: LD_INT 1
16791: PPUSH
16792: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16796: LD_INT 5
16798: PPUSH
16799: LD_VAR 0 3
16803: PPUSH
16804: LD_INT 1
16806: PPUSH
16807: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16811: LD_INT 66
16813: PPUSH
16814: LD_VAR 0 3
16818: PPUSH
16819: LD_INT 1
16821: PPUSH
16822: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16826: LD_INT 21
16828: PPUSH
16829: LD_VAR 0 3
16833: PPUSH
16834: LD_INT 1
16836: PPUSH
16837: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16841: LD_INT 22
16843: PPUSH
16844: LD_VAR 0 3
16848: PPUSH
16849: LD_INT 1
16851: PPUSH
16852: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16856: LD_INT 19
16858: PPUSH
16859: LD_VAR 0 3
16863: PPUSH
16864: LD_INT 1
16866: PPUSH
16867: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16871: LD_INT 54
16873: PPUSH
16874: LD_VAR 0 3
16878: PPUSH
16879: LD_INT 1
16881: PPUSH
16882: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16886: LD_INT 55
16888: PPUSH
16889: LD_VAR 0 3
16893: PPUSH
16894: LD_INT 1
16896: PPUSH
16897: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16901: LD_INT 0
16903: PPUSH
16904: LD_VAR 0 3
16908: PPUSH
16909: LD_INT 1
16911: PPUSH
16912: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16916: LD_INT 1
16918: PPUSH
16919: LD_VAR 0 3
16923: PPUSH
16924: LD_INT 1
16926: PPUSH
16927: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16931: LD_INT 2
16933: PPUSH
16934: LD_VAR 0 3
16938: PPUSH
16939: LD_INT 1
16941: PPUSH
16942: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16946: LD_INT 3
16948: PPUSH
16949: LD_VAR 0 3
16953: PPUSH
16954: LD_INT 1
16956: PPUSH
16957: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16961: LD_INT 4
16963: PPUSH
16964: LD_VAR 0 3
16968: PPUSH
16969: LD_INT 1
16971: PPUSH
16972: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16976: LD_INT 5
16978: PPUSH
16979: LD_VAR 0 3
16983: PPUSH
16984: LD_INT 1
16986: PPUSH
16987: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16991: LD_INT 6
16993: PPUSH
16994: LD_VAR 0 3
16998: PPUSH
16999: LD_INT 1
17001: PPUSH
17002: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17006: LD_INT 7
17008: PPUSH
17009: LD_VAR 0 3
17013: PPUSH
17014: LD_INT 1
17016: PPUSH
17017: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17021: LD_INT 8
17023: PPUSH
17024: LD_VAR 0 3
17028: PPUSH
17029: LD_INT 1
17031: PPUSH
17032: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17036: LD_INT 10
17038: PPUSH
17039: LD_VAR 0 3
17043: PPUSH
17044: LD_INT 1
17046: PPUSH
17047: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17051: LD_INT 11
17053: PPUSH
17054: LD_VAR 0 3
17058: PPUSH
17059: LD_INT 1
17061: PPUSH
17062: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17066: LD_INT 12
17068: PPUSH
17069: LD_VAR 0 3
17073: PPUSH
17074: LD_INT 1
17076: PPUSH
17077: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17081: LD_INT 13
17083: PPUSH
17084: LD_VAR 0 3
17088: PPUSH
17089: LD_INT 1
17091: PPUSH
17092: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17096: LD_INT 14
17098: PPUSH
17099: LD_VAR 0 3
17103: PPUSH
17104: LD_INT 1
17106: PPUSH
17107: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17111: LD_INT 15
17113: PPUSH
17114: LD_VAR 0 3
17118: PPUSH
17119: LD_INT 1
17121: PPUSH
17122: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17126: LD_INT 16
17128: PPUSH
17129: LD_VAR 0 3
17133: PPUSH
17134: LD_INT 1
17136: PPUSH
17137: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17141: LD_INT 17
17143: PPUSH
17144: LD_VAR 0 3
17148: PPUSH
17149: LD_INT 1
17151: PPUSH
17152: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
17156: LD_INT 18
17158: PPUSH
17159: LD_VAR 0 3
17163: PPUSH
17164: LD_INT 1
17166: PPUSH
17167: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17171: LD_INT 19
17173: PPUSH
17174: LD_VAR 0 3
17178: PPUSH
17179: LD_INT 1
17181: PPUSH
17182: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17186: LD_INT 20
17188: PPUSH
17189: LD_VAR 0 3
17193: PPUSH
17194: LD_INT 1
17196: PPUSH
17197: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17201: LD_INT 21
17203: PPUSH
17204: LD_VAR 0 3
17208: PPUSH
17209: LD_INT 1
17211: PPUSH
17212: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17216: LD_INT 23
17218: PPUSH
17219: LD_VAR 0 3
17223: PPUSH
17224: LD_INT 1
17226: PPUSH
17227: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17231: LD_INT 26
17233: PPUSH
17234: LD_VAR 0 3
17238: PPUSH
17239: LD_INT 1
17241: PPUSH
17242: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17246: LD_INT 27
17248: PPUSH
17249: LD_VAR 0 3
17253: PPUSH
17254: LD_INT 1
17256: PPUSH
17257: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17261: LD_INT 28
17263: PPUSH
17264: LD_VAR 0 3
17268: PPUSH
17269: LD_INT 1
17271: PPUSH
17272: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17276: LD_INT 29
17278: PPUSH
17279: LD_VAR 0 3
17283: PPUSH
17284: LD_INT 1
17286: PPUSH
17287: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17291: LD_INT 30
17293: PPUSH
17294: LD_VAR 0 3
17298: PPUSH
17299: LD_INT 1
17301: PPUSH
17302: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17306: LD_INT 31
17308: PPUSH
17309: LD_VAR 0 3
17313: PPUSH
17314: LD_INT 1
17316: PPUSH
17317: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17321: LD_INT 32
17323: PPUSH
17324: LD_VAR 0 3
17328: PPUSH
17329: LD_INT 1
17331: PPUSH
17332: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
17336: LD_INT 33
17338: PPUSH
17339: LD_VAR 0 3
17343: PPUSH
17344: LD_INT 1
17346: PPUSH
17347: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17351: LD_INT 36
17353: PPUSH
17354: LD_VAR 0 3
17358: PPUSH
17359: LD_INT 1
17361: PPUSH
17362: CALL_OW 324
// end ; 6 :
17366: GO 18376
17368: LD_INT 6
17370: DOUBLE
17371: EQUAL
17372: IFTRUE 17376
17374: GO 18301
17376: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17377: LD_INT 35
17379: PPUSH
17380: LD_VAR 0 3
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17392: LD_INT 45
17394: PPUSH
17395: LD_VAR 0 3
17399: PPUSH
17400: LD_INT 1
17402: PPUSH
17403: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17407: LD_INT 46
17409: PPUSH
17410: LD_VAR 0 3
17414: PPUSH
17415: LD_INT 1
17417: PPUSH
17418: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17422: LD_INT 47
17424: PPUSH
17425: LD_VAR 0 3
17429: PPUSH
17430: LD_INT 1
17432: PPUSH
17433: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17437: LD_INT 1
17439: PPUSH
17440: LD_VAR 0 3
17444: PPUSH
17445: LD_INT 1
17447: PPUSH
17448: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17452: LD_INT 2
17454: PPUSH
17455: LD_VAR 0 3
17459: PPUSH
17460: LD_INT 1
17462: PPUSH
17463: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17467: LD_INT 11
17469: PPUSH
17470: LD_VAR 0 3
17474: PPUSH
17475: LD_INT 1
17477: PPUSH
17478: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17482: LD_INT 20
17484: PPUSH
17485: LD_VAR 0 3
17489: PPUSH
17490: LD_INT 1
17492: PPUSH
17493: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17497: LD_INT 48
17499: PPUSH
17500: LD_VAR 0 3
17504: PPUSH
17505: LD_INT 1
17507: PPUSH
17508: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17512: LD_INT 49
17514: PPUSH
17515: LD_VAR 0 3
17519: PPUSH
17520: LD_INT 1
17522: PPUSH
17523: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
17527: LD_INT 50
17529: PPUSH
17530: LD_VAR 0 3
17534: PPUSH
17535: LD_INT 1
17537: PPUSH
17538: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17542: LD_INT 69
17544: PPUSH
17545: LD_VAR 0 3
17549: PPUSH
17550: LD_INT 1
17552: PPUSH
17553: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17557: LD_INT 39
17559: PPUSH
17560: LD_VAR 0 3
17564: PPUSH
17565: LD_INT 1
17567: PPUSH
17568: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17572: LD_INT 34
17574: PPUSH
17575: LD_VAR 0 3
17579: PPUSH
17580: LD_INT 1
17582: PPUSH
17583: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17587: LD_INT 42
17589: PPUSH
17590: LD_VAR 0 3
17594: PPUSH
17595: LD_INT 1
17597: PPUSH
17598: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17602: LD_INT 44
17604: PPUSH
17605: LD_VAR 0 3
17609: PPUSH
17610: LD_INT 1
17612: PPUSH
17613: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17617: LD_INT 41
17619: PPUSH
17620: LD_VAR 0 3
17624: PPUSH
17625: LD_INT 1
17627: PPUSH
17628: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
17632: LD_INT 13
17634: PPUSH
17635: LD_VAR 0 3
17639: PPUSH
17640: LD_INT 1
17642: PPUSH
17643: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17647: LD_INT 40
17649: PPUSH
17650: LD_VAR 0 3
17654: PPUSH
17655: LD_INT 1
17657: PPUSH
17658: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17662: LD_INT 43
17664: PPUSH
17665: LD_VAR 0 3
17669: PPUSH
17670: LD_INT 1
17672: PPUSH
17673: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17677: LD_INT 70
17679: PPUSH
17680: LD_VAR 0 3
17684: PPUSH
17685: LD_INT 1
17687: PPUSH
17688: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
17692: LD_INT 23
17694: PPUSH
17695: LD_VAR 0 3
17699: PPUSH
17700: LD_INT 1
17702: PPUSH
17703: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17707: LD_INT 51
17709: PPUSH
17710: LD_VAR 0 3
17714: PPUSH
17715: LD_INT 1
17717: PPUSH
17718: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17722: LD_INT 52
17724: PPUSH
17725: LD_VAR 0 3
17729: PPUSH
17730: LD_INT 1
17732: PPUSH
17733: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17737: LD_INT 6
17739: PPUSH
17740: LD_VAR 0 3
17744: PPUSH
17745: LD_INT 1
17747: PPUSH
17748: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17752: LD_INT 15
17754: PPUSH
17755: LD_VAR 0 3
17759: PPUSH
17760: LD_INT 1
17762: PPUSH
17763: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17767: LD_INT 7
17769: PPUSH
17770: LD_VAR 0 3
17774: PPUSH
17775: LD_INT 1
17777: PPUSH
17778: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17782: LD_INT 12
17784: PPUSH
17785: LD_VAR 0 3
17789: PPUSH
17790: LD_INT 1
17792: PPUSH
17793: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
17797: LD_INT 10
17799: PPUSH
17800: LD_VAR 0 3
17804: PPUSH
17805: LD_INT 1
17807: PPUSH
17808: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17812: LD_INT 17
17814: PPUSH
17815: LD_VAR 0 3
17819: PPUSH
17820: LD_INT 1
17822: PPUSH
17823: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17827: LD_INT 18
17829: PPUSH
17830: LD_VAR 0 3
17834: PPUSH
17835: LD_INT 1
17837: PPUSH
17838: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17842: LD_INT 60
17844: PPUSH
17845: LD_VAR 0 3
17849: PPUSH
17850: LD_INT 1
17852: PPUSH
17853: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
17857: LD_INT 61
17859: PPUSH
17860: LD_VAR 0 3
17864: PPUSH
17865: LD_INT 1
17867: PPUSH
17868: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17872: LD_INT 32
17874: PPUSH
17875: LD_VAR 0 3
17879: PPUSH
17880: LD_INT 1
17882: PPUSH
17883: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
17887: LD_INT 27
17889: PPUSH
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_INT 1
17897: PPUSH
17898: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
17902: LD_INT 36
17904: PPUSH
17905: LD_VAR 0 3
17909: PPUSH
17910: LD_INT 1
17912: PPUSH
17913: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
17917: LD_INT 33
17919: PPUSH
17920: LD_VAR 0 3
17924: PPUSH
17925: LD_INT 1
17927: PPUSH
17928: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17932: LD_INT 9
17934: PPUSH
17935: LD_VAR 0 3
17939: PPUSH
17940: LD_INT 1
17942: PPUSH
17943: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
17947: LD_INT 38
17949: PPUSH
17950: LD_VAR 0 3
17954: PPUSH
17955: LD_INT 1
17957: PPUSH
17958: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17962: LD_INT 57
17964: PPUSH
17965: LD_VAR 0 3
17969: PPUSH
17970: LD_INT 1
17972: PPUSH
17973: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
17977: LD_INT 58
17979: PPUSH
17980: LD_VAR 0 3
17984: PPUSH
17985: LD_INT 1
17987: PPUSH
17988: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
17992: LD_INT 28
17994: PPUSH
17995: LD_VAR 0 3
17999: PPUSH
18000: LD_INT 1
18002: PPUSH
18003: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
18007: LD_INT 29
18009: PPUSH
18010: LD_VAR 0 3
18014: PPUSH
18015: LD_INT 1
18017: PPUSH
18018: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18022: LD_INT 30
18024: PPUSH
18025: LD_VAR 0 3
18029: PPUSH
18030: LD_INT 1
18032: PPUSH
18033: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18037: LD_INT 37
18039: PPUSH
18040: LD_VAR 0 3
18044: PPUSH
18045: LD_INT 1
18047: PPUSH
18048: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18052: LD_INT 63
18054: PPUSH
18055: LD_VAR 0 3
18059: PPUSH
18060: LD_INT 1
18062: PPUSH
18063: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
18067: LD_INT 64
18069: PPUSH
18070: LD_VAR 0 3
18074: PPUSH
18075: LD_INT 1
18077: PPUSH
18078: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18082: LD_INT 3
18084: PPUSH
18085: LD_VAR 0 3
18089: PPUSH
18090: LD_INT 1
18092: PPUSH
18093: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18097: LD_INT 4
18099: PPUSH
18100: LD_VAR 0 3
18104: PPUSH
18105: LD_INT 1
18107: PPUSH
18108: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18112: LD_INT 5
18114: PPUSH
18115: LD_VAR 0 3
18119: PPUSH
18120: LD_INT 1
18122: PPUSH
18123: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
18127: LD_INT 8
18129: PPUSH
18130: LD_VAR 0 3
18134: PPUSH
18135: LD_INT 1
18137: PPUSH
18138: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18142: LD_INT 66
18144: PPUSH
18145: LD_VAR 0 3
18149: PPUSH
18150: LD_INT 1
18152: PPUSH
18153: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
18157: LD_INT 67
18159: PPUSH
18160: LD_VAR 0 3
18164: PPUSH
18165: LD_INT 1
18167: PPUSH
18168: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18172: LD_INT 21
18174: PPUSH
18175: LD_VAR 0 3
18179: PPUSH
18180: LD_INT 1
18182: PPUSH
18183: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18187: LD_INT 22
18189: PPUSH
18190: LD_VAR 0 3
18194: PPUSH
18195: LD_INT 1
18197: PPUSH
18198: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18202: LD_INT 19
18204: PPUSH
18205: LD_VAR 0 3
18209: PPUSH
18210: LD_INT 1
18212: PPUSH
18213: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
18217: LD_INT 26
18219: PPUSH
18220: LD_VAR 0 3
18224: PPUSH
18225: LD_INT 1
18227: PPUSH
18228: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18232: LD_INT 54
18234: PPUSH
18235: LD_VAR 0 3
18239: PPUSH
18240: LD_INT 1
18242: PPUSH
18243: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18247: LD_INT 55
18249: PPUSH
18250: LD_VAR 0 3
18254: PPUSH
18255: LD_INT 1
18257: PPUSH
18258: CALL_OW 322
// for i = 0 to 39 do
18262: LD_ADDR_VAR 0 4
18266: PUSH
18267: DOUBLE
18268: LD_INT 0
18270: DEC
18271: ST_TO_ADDR
18272: LD_INT 39
18274: PUSH
18275: FOR_TO
18276: IFFALSE 18297
// SetRestrict ( i , side , true ) ;
18278: LD_VAR 0 4
18282: PPUSH
18283: LD_VAR 0 3
18287: PPUSH
18288: LD_INT 1
18290: PPUSH
18291: CALL_OW 324
18295: GO 18275
18297: POP
18298: POP
// end ; else
18299: GO 18376
18301: POP
// begin for i = 1 to 73 do
18302: LD_ADDR_VAR 0 4
18306: PUSH
18307: DOUBLE
18308: LD_INT 1
18310: DEC
18311: ST_TO_ADDR
18312: LD_INT 73
18314: PUSH
18315: FOR_TO
18316: IFFALSE 18337
// SetTech ( i , side , state_enabled ) ;
18318: LD_VAR 0 4
18322: PPUSH
18323: LD_VAR 0 3
18327: PPUSH
18328: LD_INT 1
18330: PPUSH
18331: CALL_OW 322
18335: GO 18315
18337: POP
18338: POP
// for i = 0 to 39 do
18339: LD_ADDR_VAR 0 4
18343: PUSH
18344: DOUBLE
18345: LD_INT 0
18347: DEC
18348: ST_TO_ADDR
18349: LD_INT 39
18351: PUSH
18352: FOR_TO
18353: IFFALSE 18374
// SetRestrict ( i , side , true ) ;
18355: LD_VAR 0 4
18359: PPUSH
18360: LD_VAR 0 3
18364: PPUSH
18365: LD_INT 1
18367: PPUSH
18368: CALL_OW 324
18372: GO 18352
18374: POP
18375: POP
// end ; end ; end ;
18376: GO 14381
18378: POP
18379: POP
// end ; end_of_file
18380: LD_VAR 0 2
18384: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
18385: LD_INT 0
18387: PPUSH
18388: PPUSH
18389: PPUSH
18390: PPUSH
18391: PPUSH
18392: PPUSH
18393: PPUSH
18394: PPUSH
18395: PPUSH
// for i := 1 to 8 do
18396: LD_ADDR_VAR 0 2
18400: PUSH
18401: DOUBLE
18402: LD_INT 1
18404: DEC
18405: ST_TO_ADDR
18406: LD_INT 8
18408: PUSH
18409: FOR_TO
18410: IFFALSE 18794
// begin if Side_Positions [ i ] then
18412: LD_EXP 18
18416: PUSH
18417: LD_VAR 0 2
18421: ARRAY
18422: IFFALSE 18792
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
18424: LD_ADDR_VAR 0 7
18428: PUSH
18429: LD_INT 22
18431: PUSH
18432: LD_VAR 0 2
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 21
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 69
18459: PUSH
18460: LD_INT 0
18462: PLUS
18463: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18464: LD_ADDR_VAR 0 9
18468: PUSH
18469: LD_INT 22
18471: PUSH
18472: LD_VAR 0 2
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 2
18483: PUSH
18484: LD_INT 30
18486: PUSH
18487: LD_INT 0
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 30
18496: PUSH
18497: LD_INT 1
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: LIST
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PPUSH
18513: CALL_OW 69
18517: ST_TO_ADDR
// crates := 0 ;
18518: LD_ADDR_VAR 0 4
18522: PUSH
18523: LD_INT 0
18525: ST_TO_ADDR
// oil := 0 ;
18526: LD_ADDR_VAR 0 5
18530: PUSH
18531: LD_INT 0
18533: ST_TO_ADDR
// sib := 0 ;
18534: LD_ADDR_VAR 0 6
18538: PUSH
18539: LD_INT 0
18541: ST_TO_ADDR
// if bases then
18542: LD_VAR 0 9
18546: IFFALSE 18652
// begin for j in bases do
18548: LD_ADDR_VAR 0 3
18552: PUSH
18553: LD_VAR 0 9
18557: PUSH
18558: FOR_IN
18559: IFFALSE 18650
// begin base := GetBase ( j ) ;
18561: LD_ADDR_VAR 0 8
18565: PUSH
18566: LD_VAR 0 3
18570: PPUSH
18571: CALL_OW 274
18575: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
18576: LD_ADDR_VAR 0 4
18580: PUSH
18581: LD_VAR 0 4
18585: PUSH
18586: LD_VAR 0 8
18590: PPUSH
18591: LD_INT 1
18593: PPUSH
18594: CALL_OW 275
18598: PLUS
18599: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
18600: LD_ADDR_VAR 0 5
18604: PUSH
18605: LD_VAR 0 5
18609: PUSH
18610: LD_VAR 0 8
18614: PPUSH
18615: LD_INT 2
18617: PPUSH
18618: CALL_OW 275
18622: PLUS
18623: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
18624: LD_ADDR_VAR 0 6
18628: PUSH
18629: LD_VAR 0 6
18633: PUSH
18634: LD_VAR 0 8
18638: PPUSH
18639: LD_INT 3
18641: PPUSH
18642: CALL_OW 275
18646: PLUS
18647: ST_TO_ADDR
// end ;
18648: GO 18558
18650: POP
18651: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
18652: LD_STRING setSpecText(
18654: PUSH
18655: LD_VAR 0 2
18659: STR
18660: PUSH
18661: LD_STRING ,
18663: STR
18664: PUSH
18665: LD_INT 2
18667: STR
18668: PUSH
18669: LD_STRING ,
18671: STR
18672: PUSH
18673: LD_VAR 0 4
18677: STR
18678: PUSH
18679: LD_STRING )
18681: STR
18682: PPUSH
18683: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
18687: LD_STRING setSpecText(
18689: PUSH
18690: LD_VAR 0 2
18694: STR
18695: PUSH
18696: LD_STRING ,
18698: STR
18699: PUSH
18700: LD_INT 3
18702: STR
18703: PUSH
18704: LD_STRING ,
18706: STR
18707: PUSH
18708: LD_VAR 0 5
18712: STR
18713: PUSH
18714: LD_STRING )
18716: STR
18717: PPUSH
18718: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
18722: LD_STRING setSpecText(
18724: PUSH
18725: LD_VAR 0 2
18729: STR
18730: PUSH
18731: LD_STRING ,
18733: STR
18734: PUSH
18735: LD_INT 4
18737: STR
18738: PUSH
18739: LD_STRING ,
18741: STR
18742: PUSH
18743: LD_VAR 0 6
18747: STR
18748: PUSH
18749: LD_STRING )
18751: STR
18752: PPUSH
18753: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
18757: LD_STRING setSpecText(
18759: PUSH
18760: LD_VAR 0 2
18764: STR
18765: PUSH
18766: LD_STRING ,
18768: STR
18769: PUSH
18770: LD_INT 5
18772: STR
18773: PUSH
18774: LD_STRING ,
18776: STR
18777: PUSH
18778: LD_VAR 0 7
18782: STR
18783: PUSH
18784: LD_STRING )
18786: STR
18787: PPUSH
18788: CALL_OW 559
// end ; end ;
18792: GO 18409
18794: POP
18795: POP
// end ;
18796: LD_VAR 0 1
18800: RET
// every 0 0$1 do
18801: GO 18803
18803: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
18804: LD_STRING setSpecLogoNumber(
18806: PUSH
18807: LD_INT 2
18809: STR
18810: PUSH
18811: LD_STRING ,
18813: STR
18814: PUSH
18815: LD_INT 1
18817: STR
18818: PUSH
18819: LD_STRING )
18821: STR
18822: PPUSH
18823: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
18827: LD_STRING setSpecLogoNumber(
18829: PUSH
18830: LD_INT 3
18832: STR
18833: PUSH
18834: LD_STRING ,
18836: STR
18837: PUSH
18838: LD_INT 2
18840: STR
18841: PUSH
18842: LD_STRING )
18844: STR
18845: PPUSH
18846: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
18850: LD_STRING setSpecLogoNumber(
18852: PUSH
18853: LD_INT 4
18855: STR
18856: PUSH
18857: LD_STRING ,
18859: STR
18860: PUSH
18861: LD_INT 3
18863: STR
18864: PUSH
18865: LD_STRING )
18867: STR
18868: PPUSH
18869: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
18873: LD_STRING setSpecLogoNumber(
18875: PUSH
18876: LD_INT 5
18878: STR
18879: PUSH
18880: LD_STRING ,
18882: STR
18883: PUSH
18884: LD_INT 4
18886: STR
18887: PUSH
18888: LD_STRING )
18890: STR
18891: PPUSH
18892: CALL_OW 559
// end ;
18896: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
18897: LD_INT 2
18899: PUSH
18900: LD_INT 30
18902: PUSH
18903: LD_INT 0
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 30
18912: PUSH
18913: LD_INT 1
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: LIST
18924: PPUSH
18925: CALL_OW 69
18929: IFFALSE 18939
18931: GO 18933
18933: DISABLE
// begin enable ;
18934: ENABLE
// UpdateSpectatorBar ;
18935: CALL 18385 0 0
// end ; end_of_file
18939: END
// var respawn , inqueue ; export function init_respawning ; begin
18940: LD_INT 0
18942: PPUSH
// respawn := Rand ( 1 , 8 ) ;
18943: LD_ADDR_LOC 31
18947: PUSH
18948: LD_INT 1
18950: PPUSH
18951: LD_INT 8
18953: PPUSH
18954: CALL_OW 12
18958: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18959: LD_ADDR_LOC 32
18963: PUSH
18964: LD_INT 0
18966: PUSH
18967: LD_INT 0
18969: PUSH
18970: LD_INT 0
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: LD_INT 0
18978: PUSH
18979: LD_INT 0
18981: PUSH
18982: LD_INT 0
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: ST_TO_ADDR
// end ;
18998: LD_VAR 0 1
19002: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
19003: GO 19005
19005: DISABLE
19006: LD_INT 0
19008: PPUSH
19009: PPUSH
19010: PPUSH
// begin if respawning_time_max = 0 then
19011: LD_EXP 13
19015: PUSH
19016: LD_INT 0
19018: EQUAL
19019: IFFALSE 19023
// exit ;
19021: GO 19431
// if respawn = 8 then
19023: LD_LOC 31
19027: PUSH
19028: LD_INT 8
19030: EQUAL
19031: IFFALSE 19043
// respawn := 1 else
19033: LD_ADDR_LOC 31
19037: PUSH
19038: LD_INT 1
19040: ST_TO_ADDR
19041: GO 19057
// respawn := respawn + 1 ;
19043: LD_ADDR_LOC 31
19047: PUSH
19048: LD_LOC 31
19052: PUSH
19053: LD_INT 1
19055: PLUS
19056: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
19057: LD_EXP 18
19061: PUSH
19062: LD_LOC 31
19066: ARRAY
19067: PUSH
19068: LD_LOC 32
19072: PUSH
19073: LD_LOC 31
19077: ARRAY
19078: NOT
19079: AND
19080: IFFALSE 19430
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
19082: LD_ADDR_VAR 0 1
19086: PUSH
19087: LD_INT 21
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 22
19099: PUSH
19100: LD_LOC 31
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 3
19111: PUSH
19112: LD_INT 23
19114: PUSH
19115: LD_INT 0
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: PPUSH
19128: CALL_OW 69
19132: ST_TO_ADDR
// if n < number_of_people then
19133: LD_VAR 0 1
19137: PUSH
19138: LD_EXP 5
19142: LESS
19143: IFFALSE 19427
// begin aktresp := respawn ;
19145: LD_ADDR_VAR 0 3
19149: PUSH
19150: LD_LOC 31
19154: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
19155: LD_ADDR_LOC 32
19159: PUSH
19160: LD_LOC 32
19164: PPUSH
19165: LD_VAR 0 3
19169: PPUSH
19170: LD_INT 1
19172: PPUSH
19173: CALL_OW 1
19177: ST_TO_ADDR
// enable ;
19178: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
19179: LD_EXP 12
19183: PPUSH
19184: LD_EXP 13
19188: PPUSH
19189: CALL_OW 12
19193: PPUSH
19194: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
19198: LD_ADDR_LOC 32
19202: PUSH
19203: LD_LOC 32
19207: PPUSH
19208: LD_VAR 0 3
19212: PPUSH
19213: LD_INT 0
19215: PPUSH
19216: CALL_OW 1
19220: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
19221: LD_ADDR_VAR 0 2
19225: PUSH
19226: LD_INT 21
19228: PUSH
19229: LD_INT 3
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 2
19238: PUSH
19239: LD_INT 30
19241: PUSH
19242: LD_INT 0
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 30
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 50
19266: PUSH
19267: EMPTY
19268: LIST
19269: PUSH
19270: LD_INT 22
19272: PUSH
19273: LD_VAR 0 3
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: PPUSH
19288: CALL_OW 69
19292: ST_TO_ADDR
// if dep = 0 then
19293: LD_VAR 0 2
19297: PUSH
19298: LD_INT 0
19300: EQUAL
19301: IFFALSE 19305
// exit ;
19303: GO 19431
// hc_name :=  ;
19305: LD_ADDR_OWVAR 26
19309: PUSH
19310: LD_STRING 
19312: ST_TO_ADDR
// hc_importance := 0 ;
19313: LD_ADDR_OWVAR 32
19317: PUSH
19318: LD_INT 0
19320: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
19321: LD_INT 0
19323: PPUSH
19324: LD_INT 0
19326: PPUSH
19327: LD_EXP 6
19331: PUSH
19332: LD_INT 2
19334: DIV
19335: PPUSH
19336: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
19340: LD_ADDR_OWVAR 21
19344: PUSH
19345: LD_EXP 19
19349: PUSH
19350: LD_VAR 0 3
19354: ARRAY
19355: ST_TO_ADDR
// uc_side := aktresp ;
19356: LD_ADDR_OWVAR 20
19360: PUSH
19361: LD_VAR 0 3
19365: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
19366: LD_ADDR_VAR 0 2
19370: PUSH
19371: LD_VAR 0 2
19375: PUSH
19376: LD_INT 1
19378: PPUSH
19379: LD_VAR 0 2
19383: PPUSH
19384: CALL_OW 12
19388: ARRAY
19389: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
19390: CALL_OW 44
19394: PPUSH
19395: LD_VAR 0 2
19399: PPUSH
19400: CALL_OW 250
19404: PPUSH
19405: LD_VAR 0 2
19409: PPUSH
19410: CALL_OW 251
19414: PPUSH
19415: LD_INT 7
19417: PPUSH
19418: LD_INT 1
19420: PPUSH
19421: CALL_OW 50
// end else
19425: GO 19428
// enable ;
19427: ENABLE
// end else
19428: GO 19431
// enable ;
19430: ENABLE
// end ; end_of_file
19431: PPOPN 3
19433: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
19434: LD_INT 0
19436: PPUSH
19437: PPUSH
19438: PPUSH
// BuildUpTime_Delay = 0 ;
19439: LD_ADDR_EXP 60
19443: PUSH
19444: LD_INT 0
19446: ST_TO_ADDR
// if not def_builduptime then
19447: LD_EXP 54
19451: NOT
19452: IFFALSE 19456
// exit ;
19454: GO 19639
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
19456: LD_ADDR_EXP 60
19460: PUSH
19461: LD_INT 8400
19463: PUSH
19464: LD_INT 2100
19466: PUSH
19467: LD_EXP 54
19471: MUL
19472: PLUS
19473: ST_TO_ADDR
// BuildUpTimeActive := true ;
19474: LD_ADDR_EXP 59
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// for i := 1 to 8 do
19482: LD_ADDR_VAR 0 2
19486: PUSH
19487: DOUBLE
19488: LD_INT 1
19490: DEC
19491: ST_TO_ADDR
19492: LD_INT 8
19494: PUSH
19495: FOR_TO
19496: IFFALSE 19637
// if Side_Positions [ i ] then
19498: LD_EXP 18
19502: PUSH
19503: LD_VAR 0 2
19507: ARRAY
19508: IFFALSE 19635
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
19510: LD_EXP 58
19514: PUSH
19515: LD_EXP 18
19519: PUSH
19520: LD_VAR 0 2
19524: ARRAY
19525: ARRAY
19526: PPUSH
19527: LD_INT 5
19529: PPUSH
19530: CALL_OW 424
// for j := 1 to 8 do
19534: LD_ADDR_VAR 0 3
19538: PUSH
19539: DOUBLE
19540: LD_INT 1
19542: DEC
19543: ST_TO_ADDR
19544: LD_INT 8
19546: PUSH
19547: FOR_TO
19548: IFFALSE 19633
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19550: LD_EXP 18
19554: PUSH
19555: LD_VAR 0 3
19559: ARRAY
19560: PUSH
19561: LD_EXP 16
19565: PUSH
19566: LD_VAR 0 2
19570: ARRAY
19571: PUSH
19572: LD_EXP 16
19576: PUSH
19577: LD_VAR 0 3
19581: ARRAY
19582: NONEQUAL
19583: PUSH
19584: LD_EXP 20
19588: NOT
19589: PUSH
19590: LD_VAR 0 2
19594: PUSH
19595: LD_VAR 0 3
19599: NONEQUAL
19600: AND
19601: OR
19602: AND
19603: IFFALSE 19631
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19605: LD_VAR 0 3
19609: PPUSH
19610: LD_EXP 58
19614: PUSH
19615: LD_EXP 18
19619: PUSH
19620: LD_VAR 0 2
19624: ARRAY
19625: ARRAY
19626: PPUSH
19627: CALL_OW 333
19631: GO 19547
19633: POP
19634: POP
// end ;
19635: GO 19495
19637: POP
19638: POP
// end ;
19639: LD_VAR 0 1
19643: RET
// export function EndBuildUp ; var i , j ; begin
19644: LD_INT 0
19646: PPUSH
19647: PPUSH
19648: PPUSH
// BuildUpTimeActive := false ;
19649: LD_ADDR_EXP 59
19653: PUSH
19654: LD_INT 0
19656: ST_TO_ADDR
// for i := 1 to 8 do
19657: LD_ADDR_VAR 0 2
19661: PUSH
19662: DOUBLE
19663: LD_INT 1
19665: DEC
19666: ST_TO_ADDR
19667: LD_INT 8
19669: PUSH
19670: FOR_TO
19671: IFFALSE 19812
// if Side_Positions [ i ] then
19673: LD_EXP 18
19677: PUSH
19678: LD_VAR 0 2
19682: ARRAY
19683: IFFALSE 19810
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
19685: LD_EXP 58
19689: PUSH
19690: LD_EXP 18
19694: PUSH
19695: LD_VAR 0 2
19699: ARRAY
19700: ARRAY
19701: PPUSH
19702: LD_INT 0
19704: PPUSH
19705: CALL_OW 424
// for j := 1 to 8 do
19709: LD_ADDR_VAR 0 3
19713: PUSH
19714: DOUBLE
19715: LD_INT 1
19717: DEC
19718: ST_TO_ADDR
19719: LD_INT 8
19721: PUSH
19722: FOR_TO
19723: IFFALSE 19808
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19725: LD_EXP 18
19729: PUSH
19730: LD_VAR 0 3
19734: ARRAY
19735: PUSH
19736: LD_EXP 16
19740: PUSH
19741: LD_VAR 0 2
19745: ARRAY
19746: PUSH
19747: LD_EXP 16
19751: PUSH
19752: LD_VAR 0 3
19756: ARRAY
19757: NONEQUAL
19758: PUSH
19759: LD_EXP 20
19763: NOT
19764: PUSH
19765: LD_VAR 0 2
19769: PUSH
19770: LD_VAR 0 3
19774: NONEQUAL
19775: AND
19776: OR
19777: AND
19778: IFFALSE 19806
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19780: LD_VAR 0 3
19784: PPUSH
19785: LD_EXP 58
19789: PUSH
19790: LD_EXP 18
19794: PUSH
19795: LD_VAR 0 2
19799: ARRAY
19800: ARRAY
19801: PPUSH
19802: CALL_OW 334
19806: GO 19722
19808: POP
19809: POP
// end ;
19810: GO 19670
19812: POP
19813: POP
// end ;
19814: LD_VAR 0 1
19818: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
19819: LD_EXP 59
19823: IFFALSE 19998
19825: GO 19827
19827: DISABLE
19828: LD_INT 0
19830: PPUSH
19831: PPUSH
// begin for i := 1 to 8 do
19832: LD_ADDR_VAR 0 1
19836: PUSH
19837: DOUBLE
19838: LD_INT 1
19840: DEC
19841: ST_TO_ADDR
19842: LD_INT 8
19844: PUSH
19845: FOR_TO
19846: IFFALSE 19995
// if Side_Positions [ i ] then
19848: LD_EXP 18
19852: PUSH
19853: LD_VAR 0 1
19857: ARRAY
19858: IFFALSE 19993
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
19860: LD_ADDR_VAR 0 2
19864: PUSH
19865: LD_EXP 58
19869: PUSH
19870: LD_EXP 18
19874: PUSH
19875: LD_VAR 0 1
19879: ARRAY
19880: ARRAY
19881: PPUSH
19882: LD_INT 2
19884: PUSH
19885: LD_INT 21
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 21
19897: PUSH
19898: LD_INT 2
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 22
19912: PUSH
19913: LD_OWVAR 2
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PPUSH
19926: CALL_OW 70
19930: PUSH
19931: FOR_IN
19932: IFFALSE 19991
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
19934: LD_EXP 16
19938: PUSH
19939: LD_VAR 0 1
19943: ARRAY
19944: PUSH
19945: LD_EXP 16
19949: PUSH
19950: LD_OWVAR 2
19954: ARRAY
19955: NONEQUAL
19956: PUSH
19957: LD_EXP 20
19961: NOT
19962: PUSH
19963: LD_VAR 0 1
19967: PUSH
19968: LD_OWVAR 2
19972: NONEQUAL
19973: AND
19974: OR
19975: IFFALSE 19989
// ComMoveToArea ( un , BuildUpEscape ) ;
19977: LD_VAR 0 2
19981: PPUSH
19982: LD_INT 14
19984: PPUSH
19985: CALL_OW 113
19989: GO 19931
19991: POP
19992: POP
19993: GO 19845
19995: POP
19996: POP
// enable ;
19997: ENABLE
// end ;
19998: PPOPN 2
20000: END
// every 0 0$1 trigger def_builduptime do
20001: LD_EXP 54
20005: IFFALSE 20031
20007: GO 20009
20009: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
20010: LD_INT 8400
20012: PUSH
20013: LD_EXP 54
20017: PUSH
20018: LD_INT 2100
20020: MUL
20021: PLUS
20022: PPUSH
20023: CALL_OW 67
// EndBuildUp ;
20027: CALL 19644 0 0
// end ;
20031: END
