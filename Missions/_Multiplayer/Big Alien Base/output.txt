// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_siberit , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 39
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 18
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 16
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 21
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 17
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 39
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 3 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 3
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 18
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 19
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 21
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 17
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 386: LD_ADDR_EXP 20
 390: PUSH
 391: LD_EXP 16
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: EMPTY
 400: LIST
 401: DIFF
 402: PUSH
 403: LD_INT 1
 405: GREATER
 406: ST_TO_ADDR
// if Multiplayer then
 407: LD_OWVAR 4
 411: IFFALSE 657
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 413: LD_ADDR_EXP 41
 417: PUSH
 418: LD_INT 0
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 426: LD_ADDR_EXP 42
 430: PUSH
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 439: LD_ADDR_EXP 43
 443: PUSH
 444: LD_INT 2
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 452: LD_ADDR_EXP 44
 456: PUSH
 457: LD_INT 3
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 465: LD_ADDR_EXP 45
 469: PUSH
 470: LD_INT 4
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 478: LD_ADDR_EXP 46
 482: PUSH
 483: LD_INT 5
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 491: LD_ADDR_EXP 47
 495: PUSH
 496: LD_INT 6
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 504: LD_ADDR_EXP 48
 508: PUSH
 509: LD_INT 10
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 517: LD_ADDR_EXP 49
 521: PUSH
 522: LD_INT 11
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 530: LD_ADDR_EXP 50
 534: PUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 543: LD_ADDR_EXP 51
 547: PUSH
 548: LD_INT 13
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 556: LD_ADDR_EXP 52
 560: PUSH
 561: LD_INT 14
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 569: LD_ADDR_EXP 1
 573: PUSH
 574: LD_INT 15
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 582: LD_ADDR_EXP 2
 586: PUSH
 587: LD_INT 16
 589: PPUSH
 590: CALL_OW 426
 594: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 595: LD_ADDR_EXP 53
 599: PUSH
 600: LD_INT 17
 602: PPUSH
 603: CALL_OW 426
 607: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 608: LD_ADDR_EXP 54
 612: PUSH
 613: LD_INT 20
 615: PPUSH
 616: CALL_OW 426
 620: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 621: LD_ADDR_EXP 40
 625: PUSH
 626: LD_INT 21
 628: PPUSH
 629: CALL_OW 426
 633: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 634: LD_ADDR_VAR 0 3
 638: PUSH
 639: LD_INT 22
 641: PPUSH
 642: CALL_OW 426
 646: ST_TO_ADDR
// def_win_rules = 0 ;
 647: LD_ADDR_EXP 30
 651: PUSH
 652: LD_INT 0
 654: ST_TO_ADDR
// end else
 655: GO 813
// begin Randomize ;
 657: CALL_OW 10
// def_base_level := 2 ;
 661: LD_ADDR_EXP 41
 665: PUSH
 666: LD_INT 2
 668: ST_TO_ADDR
// def_amount_of_people := 11 ;
 669: LD_ADDR_EXP 42
 673: PUSH
 674: LD_INT 11
 676: ST_TO_ADDR
// def_skill_level := 1 ;
 677: LD_ADDR_EXP 43
 681: PUSH
 682: LD_INT 1
 684: ST_TO_ADDR
// def_starting_resources := 2 ;
 685: LD_ADDR_EXP 44
 689: PUSH
 690: LD_INT 2
 692: ST_TO_ADDR
// def_shipments_density := 50 ;
 693: LD_ADDR_EXP 45
 697: PUSH
 698: LD_INT 50
 700: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 701: LD_ADDR_EXP 46
 705: PUSH
 706: LD_INT 0
 708: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 709: LD_ADDR_EXP 47
 713: PUSH
 714: LD_INT 1
 716: ST_TO_ADDR
// def_shared_vision := 1 ;
 717: LD_ADDR_EXP 48
 721: PUSH
 722: LD_INT 1
 724: ST_TO_ADDR
// def_morale_flags := 1 ;
 725: LD_ADDR_EXP 49
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// def_siberite_detection := 1 ;
 733: LD_ADDR_EXP 50
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// def_people_respawning := 2 ;
 741: LD_ADDR_EXP 51
 745: PUSH
 746: LD_INT 2
 748: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 749: LD_ADDR_EXP 52
 753: PUSH
 754: LD_INT 3
 756: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 757: LD_ADDR_EXP 1
 761: PUSH
 762: LD_INT 0
 764: ST_TO_ADDR
// def_public_score := 0 ;
 765: LD_ADDR_EXP 2
 769: PUSH
 770: LD_INT 0
 772: ST_TO_ADDR
// def_siberite_bomb := 4 ;
 773: LD_ADDR_EXP 53
 777: PUSH
 778: LD_INT 4
 780: ST_TO_ADDR
// def_builduptime := 0 ;
 781: LD_ADDR_EXP 54
 785: PUSH
 786: LD_INT 0
 788: ST_TO_ADDR
// def_game_rules := 0 ;
 789: LD_ADDR_EXP 40
 793: PUSH
 794: LD_INT 0
 796: ST_TO_ADDR
// tech_level = 4 ;
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_INT 4
 804: ST_TO_ADDR
// def_win_rules = 0 ;
 805: LD_ADDR_EXP 30
 809: PUSH
 810: LD_INT 0
 812: ST_TO_ADDR
// end ; InitGameRules ;
 813: CALL 9789 0 0
// if def_game_rules = 0 then
 817: LD_EXP 40
 821: PUSH
 822: LD_INT 0
 824: EQUAL
 825: IFFALSE 876
// begin if isSGUI then
 827: LD_OWVAR 83
 831: IFFALSE 839
// setMpTechs ( ) else
 833: CALL 16114 0 0
 837: GO 876
// begin if Game_Type = 3 then
 839: LD_EXP 39
 843: PUSH
 844: LD_INT 3
 846: EQUAL
 847: IFFALSE 863
// tech_level = tech_level + 3 ;
 849: LD_ADDR_VAR 0 3
 853: PUSH
 854: LD_VAR 0 3
 858: PUSH
 859: LD_INT 3
 861: PLUS
 862: ST_TO_ADDR
// SetMpTechLevel ( tech_level + 1 ) ;
 863: LD_VAR 0 3
 867: PUSH
 868: LD_INT 1
 870: PLUS
 871: PPUSH
 872: CALL 16261 0 1
// end ; end ; if ( Game_Type = 5 ) then
 876: LD_EXP 39
 880: PUSH
 881: LD_INT 5
 883: EQUAL
 884: IFFALSE 913
// begin def_base_level := 1 ;
 886: LD_ADDR_EXP 41
 890: PUSH
 891: LD_INT 1
 893: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 894: LD_ADDR_EXP 46
 898: PUSH
 899: LD_INT 0
 901: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 902: LD_ADDR_EXP 47
 906: PUSH
 907: LD_INT 0
 909: ST_TO_ADDR
// disable ( 10 ) ;
 910: LD_INT 10
 912: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 913: LD_ADDR_EXP 3
 917: PUSH
 918: LD_INT 0
 920: PUSH
 921: LD_INT 1
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_EXP 41
 936: PUSH
 937: LD_INT 1
 939: PLUS
 940: ARRAY
 941: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 942: LD_ADDR_EXP 4
 946: PUSH
 947: LD_INT 0
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 3
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: PUSH
 961: LD_EXP 41
 965: PUSH
 966: LD_INT 1
 968: PLUS
 969: ARRAY
 970: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 971: LD_ADDR_EXP 5
 975: PUSH
 976: LD_EXP 42
 980: PUSH
 981: LD_INT 4
 983: PLUS
 984: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
 985: LD_ADDR_EXP 9
 989: PUSH
 990: LD_INT 150
 992: PUSH
 993: LD_EXP 45
 997: PUSH
 998: LD_INT 1
1000: PLUS
1001: MINUS
1002: ST_TO_ADDR
// if def_people_respawning = 0 then
1003: LD_EXP 51
1007: PUSH
1008: LD_INT 0
1010: EQUAL
1011: IFFALSE 1031
// begin respawning_time_min = 0 ;
1013: LD_ADDR_EXP 12
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// respawning_time_max = 0 ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// end else
1029: GO 1075
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1031: LD_ADDR_EXP 12
1035: PUSH
1036: LD_INT 10500
1038: PUSH
1039: LD_INT 5
1041: DIVREAL
1042: PUSH
1043: LD_INT 6
1045: PUSH
1046: LD_EXP 51
1050: MINUS
1051: MUL
1052: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1053: LD_ADDR_EXP 13
1057: PUSH
1058: LD_INT 31500
1060: PUSH
1061: LD_INT 5
1063: DIVREAL
1064: PUSH
1065: LD_INT 6
1067: PUSH
1068: LD_EXP 51
1072: MINUS
1073: MUL
1074: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1075: LD_EXP 52
1079: NOT
1080: IFFALSE 1092
// amount_of_apemen := 0 else
1082: LD_ADDR_EXP 14
1086: PUSH
1087: LD_INT 0
1089: ST_TO_ADDR
1090: GO 1102
// amount_of_apemen := def_amount_of_apemen ;
1092: LD_ADDR_EXP 14
1096: PUSH
1097: LD_EXP 52
1101: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1102: LD_EXP 53
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: IFFALSE 1122
// siberite_bomb_Delay = 0 else
1112: LD_ADDR_EXP 15
1116: PUSH
1117: LD_INT 0
1119: ST_TO_ADDR
1120: GO 1144
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1122: LD_ADDR_EXP 15
1126: PUSH
1127: LD_EXP 53
1131: PUSH
1132: LD_INT 1
1134: MINUS
1135: PUSH
1136: LD_INT 21000
1138: MUL
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ST_TO_ADDR
// amount_of_siberit := [ 30 , 60 , 90 , 120 , 150 , 180 , 210 , 240 , 270 , 300 , 400 , 500 , 600 , 700 , 800 , 900 , 1000 , 1250 , 1500 , 1750 , 2000 , 2250 , 2500 , 2750 , 3000 , 3500 , 4000 , 4500 , 5000 , 6000 , 7000 , 8000 , 9000 , 10000 ] [ def_amount_of_siberit + 1 ] ;
1144: LD_ADDR_EXP 11
1148: PUSH
1149: LD_INT 30
1151: PUSH
1152: LD_INT 60
1154: PUSH
1155: LD_INT 90
1157: PUSH
1158: LD_INT 120
1160: PUSH
1161: LD_INT 150
1163: PUSH
1164: LD_INT 180
1166: PUSH
1167: LD_INT 210
1169: PUSH
1170: LD_INT 240
1172: PUSH
1173: LD_INT 270
1175: PUSH
1176: LD_INT 300
1178: PUSH
1179: LD_INT 400
1181: PUSH
1182: LD_INT 500
1184: PUSH
1185: LD_INT 600
1187: PUSH
1188: LD_INT 700
1190: PUSH
1191: LD_INT 800
1193: PUSH
1194: LD_INT 900
1196: PUSH
1197: LD_INT 1000
1199: PUSH
1200: LD_INT 1250
1202: PUSH
1203: LD_INT 1500
1205: PUSH
1206: LD_INT 1750
1208: PUSH
1209: LD_INT 2000
1211: PUSH
1212: LD_INT 2250
1214: PUSH
1215: LD_INT 2500
1217: PUSH
1218: LD_INT 2750
1220: PUSH
1221: LD_INT 3000
1223: PUSH
1224: LD_INT 3500
1226: PUSH
1227: LD_INT 4000
1229: PUSH
1230: LD_INT 4500
1232: PUSH
1233: LD_INT 5000
1235: PUSH
1236: LD_INT 6000
1238: PUSH
1239: LD_INT 7000
1241: PUSH
1242: LD_INT 8000
1244: PUSH
1245: LD_INT 9000
1247: PUSH
1248: LD_INT 10000
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: PUSH
1287: LD_EXP 1
1291: PUSH
1292: LD_INT 1
1294: PLUS
1295: ARRAY
1296: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1297: LD_ADDR_EXP 6
1301: PUSH
1302: LD_INT 2
1304: PUSH
1305: LD_INT 3
1307: PUSH
1308: LD_INT 4
1310: PUSH
1311: LD_INT 5
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: PUSH
1320: LD_EXP 43
1324: PUSH
1325: LD_INT 1
1327: PLUS
1328: ARRAY
1329: ST_TO_ADDR
// if ( def_game_rules = 4 ) then
1330: LD_EXP 40
1334: PUSH
1335: LD_INT 4
1337: EQUAL
1338: IFFALSE 1361
// begin starting_resources := [ 10000 , 5000 , 1000 ] ;
1340: LD_ADDR_EXP 8
1344: PUSH
1345: LD_INT 10000
1347: PUSH
1348: LD_INT 5000
1350: PUSH
1351: LD_INT 1000
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: LIST
1358: ST_TO_ADDR
// end else
1359: GO 1633
// if ( Game_Type = 5 ) then
1361: LD_EXP 39
1365: PUSH
1366: LD_INT 5
1368: EQUAL
1369: IFFALSE 1487
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1371: LD_ADDR_EXP 8
1375: PUSH
1376: LD_INT 1000
1378: PUSH
1379: LD_INT 100
1381: PUSH
1382: LD_INT 100
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 2000
1392: PUSH
1393: LD_INT 200
1395: PUSH
1396: LD_INT 200
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 5000
1406: PUSH
1407: LD_INT 500
1409: PUSH
1410: LD_INT 500
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 10000
1420: PUSH
1421: LD_INT 1000
1423: PUSH
1424: LD_INT 1000
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 25000
1434: PUSH
1435: LD_INT 2500
1437: PUSH
1438: LD_INT 2500
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PUSH
1446: LD_INT 50000
1448: PUSH
1449: LD_INT 5000
1451: PUSH
1452: LD_INT 5000
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: PUSH
1468: LD_EXP 44
1472: PUSH
1473: LD_INT 1
1475: PLUS
1476: ARRAY
1477: ST_TO_ADDR
// starting_crates := [ ] ;
1478: LD_ADDR_EXP 7
1482: PUSH
1483: EMPTY
1484: ST_TO_ADDR
// end else
1485: GO 1633
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1487: LD_ADDR_EXP 8
1491: PUSH
1492: LD_INT 0
1494: PUSH
1495: LD_INT 0
1497: PUSH
1498: LD_INT 0
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 30
1508: PUSH
1509: LD_INT 0
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 50
1522: PUSH
1523: LD_INT 20
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 80
1536: PUSH
1537: LD_INT 40
1539: PUSH
1540: LD_INT 20
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_EXP 44
1558: PUSH
1559: LD_INT 1
1561: PLUS
1562: ARRAY
1563: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1564: LD_ADDR_EXP 7
1568: PUSH
1569: LD_INT 10
1571: PUSH
1572: EMPTY
1573: LIST
1574: PUSH
1575: LD_INT 7
1577: PUSH
1578: LD_INT 14
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 6
1587: PUSH
1588: LD_INT 12
1590: PUSH
1591: LD_INT 18
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 5
1601: PUSH
1602: LD_INT 10
1604: PUSH
1605: LD_INT 15
1607: PUSH
1608: LD_INT 20
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_EXP 44
1627: PUSH
1628: LD_INT 1
1630: PLUS
1631: ARRAY
1632: ST_TO_ADDR
// end ; morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1633: LD_ADDR_EXP 10
1637: PUSH
1638: LD_INT 1
1640: NEG
1641: PUSH
1642: LD_INT 350
1644: PUSH
1645: LD_INT 700
1647: PUSH
1648: LD_INT 1400
1650: PUSH
1651: LD_INT 0
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: PUSH
1661: LD_EXP 49
1665: PUSH
1666: LD_INT 1
1668: PLUS
1669: ARRAY
1670: ST_TO_ADDR
// battle_flags_id := [ ] ;
1671: LD_ADDR_EXP 29
1675: PUSH
1676: EMPTY
1677: ST_TO_ADDR
// end ;
1678: LD_VAR 0 1
1682: RET
// function init_map ; var i , j ; begin
1683: LD_INT 0
1685: PPUSH
1686: PPUSH
1687: PPUSH
// normal_oil_deposits_locations := [ [ 49 , 49 ] , [ 85 , 23 ] , [ 147 , 35 ] , [ 187 , 104 ] , [ 226 , 175 ] , [ 198 , 208 ] , [ 140 , 199 ] , [ 90 , 126 ] ] ;
1688: LD_ADDR_EXP 25
1692: PUSH
1693: LD_INT 49
1695: PUSH
1696: LD_INT 49
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 85
1705: PUSH
1706: LD_INT 23
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PUSH
1713: LD_INT 147
1715: PUSH
1716: LD_INT 35
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: PUSH
1723: LD_INT 187
1725: PUSH
1726: LD_INT 104
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 226
1735: PUSH
1736: LD_INT 175
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 198
1745: PUSH
1746: LD_INT 208
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 140
1755: PUSH
1756: LD_INT 199
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 90
1765: PUSH
1766: LD_INT 126
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 49 , 49 ] , [ 53 , 31 ] ] , [ [ 85 , 23 ] , [ 108 , 23 ] ] , [ [ 147 , 35 ] , [ 166 , 58 ] ] , [ [ 187 , 104 ] , [ 203 , 130 ] ] , [ [ 226 , 175 ] , [ 223 , 196 ] ] , [ [ 198 , 208 ] , [ 176 , 207 ] ] , [ [ 140 , 199 ] , [ 118 , 175 ] ] , [ [ 90 , 126 ] , [ 79 , 104 ] ] ] ;
1783: LD_ADDR_EXP 26
1787: PUSH
1788: LD_INT 49
1790: PUSH
1791: LD_INT 49
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: LD_INT 53
1800: PUSH
1801: LD_INT 31
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 85
1814: PUSH
1815: LD_INT 23
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 108
1824: PUSH
1825: LD_INT 23
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 147
1838: PUSH
1839: LD_INT 35
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 166
1848: PUSH
1849: LD_INT 58
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: LD_INT 187
1862: PUSH
1863: LD_INT 104
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: LD_INT 203
1872: PUSH
1873: LD_INT 130
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 226
1886: PUSH
1887: LD_INT 175
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: LD_INT 223
1896: PUSH
1897: LD_INT 196
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: LD_INT 198
1910: PUSH
1911: LD_INT 208
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 176
1920: PUSH
1921: LD_INT 207
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 140
1934: PUSH
1935: LD_INT 199
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 118
1944: PUSH
1945: LD_INT 175
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 90
1958: PUSH
1959: LD_INT 126
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 79
1968: PUSH
1969: LD_INT 104
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 53 , 54 ] , [ 85 , 28 ] , [ 142 , 36 ] , [ 193 , 106 ] , [ 232 , 180 ] , [ 197 , 212 ] , [ 135 , 199 ] , [ 85 , 121 ] ] ;
1990: LD_ADDR_EXP 27
1994: PUSH
1995: LD_INT 53
1997: PUSH
1998: LD_INT 54
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: PUSH
2005: LD_INT 85
2007: PUSH
2008: LD_INT 28
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 142
2017: PUSH
2018: LD_INT 36
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 193
2027: PUSH
2028: LD_INT 106
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 232
2037: PUSH
2038: LD_INT 180
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: LD_INT 197
2047: PUSH
2048: LD_INT 212
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: LD_INT 135
2057: PUSH
2058: LD_INT 199
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 85
2067: PUSH
2068: LD_INT 121
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 53 , 54 ] , [ 58 , 33 ] ] , [ [ 85 , 28 ] , [ 113 , 28 ] ] , [ [ 142 , 36 ] , [ 165 , 62 ] ] , [ [ 193 , 106 ] , [ 203 , 125 ] ] , [ [ 232 , 180 ] , [ 229 , 201 ] ] , [ [ 197 , 212 ] , [ 180 , 212 ] ] , [ [ 135 , 199 ] , [ 118 , 180 ] ] , [ [ 85 , 121 ] , [ 76 , 106 ] ] ] ;
2085: LD_ADDR_EXP 28
2089: PUSH
2090: LD_INT 53
2092: PUSH
2093: LD_INT 54
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 58
2102: PUSH
2103: LD_INT 33
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 85
2116: PUSH
2117: LD_INT 28
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 113
2126: PUSH
2127: LD_INT 28
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 142
2140: PUSH
2141: LD_INT 36
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 165
2150: PUSH
2151: LD_INT 62
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 193
2164: PUSH
2165: LD_INT 106
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 203
2174: PUSH
2175: LD_INT 125
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 232
2188: PUSH
2189: LD_INT 180
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 229
2198: PUSH
2199: LD_INT 201
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 197
2212: PUSH
2213: LD_INT 212
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 180
2222: PUSH
2223: LD_INT 212
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PUSH
2234: LD_INT 135
2236: PUSH
2237: LD_INT 199
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 118
2246: PUSH
2247: LD_INT 180
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: LD_INT 85
2260: PUSH
2261: LD_INT 121
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 76
2270: PUSH
2271: LD_INT 106
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: ST_TO_ADDR
// depot_def := [ [ 71 , 53 , 5 ] , [ 99 , 30 , 5 ] , [ 149 , 55 , 0 ] , [ 193 , 119 , 1 ] , [ 212 , 179 , 2 ] , [ 187 , 206 , 3 ] , [ 136 , 183 , 3 ] , [ 94 , 117 , 4 ] ] ;
2292: LD_ADDR_EXP 22
2296: PUSH
2297: LD_INT 71
2299: PUSH
2300: LD_INT 53
2302: PUSH
2303: LD_INT 5
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: PUSH
2311: LD_INT 99
2313: PUSH
2314: LD_INT 30
2316: PUSH
2317: LD_INT 5
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 149
2327: PUSH
2328: LD_INT 55
2330: PUSH
2331: LD_INT 0
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: PUSH
2339: LD_INT 193
2341: PUSH
2342: LD_INT 119
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 212
2355: PUSH
2356: LD_INT 179
2358: PUSH
2359: LD_INT 2
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: PUSH
2367: LD_INT 187
2369: PUSH
2370: LD_INT 206
2372: PUSH
2373: LD_INT 3
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 136
2383: PUSH
2384: LD_INT 183
2386: PUSH
2387: LD_INT 3
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: LIST
2394: PUSH
2395: LD_INT 94
2397: PUSH
2398: LD_INT 117
2400: PUSH
2401: LD_INT 4
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: LIST
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: ST_TO_ADDR
// for i in depot_def do
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_EXP 22
2428: PUSH
2429: FOR_IN
2430: IFFALSE 2504
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2432: LD_ADDR_EXP 24
2436: PUSH
2437: LD_EXP 24
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_INT 1
2449: ARRAY
2450: PPUSH
2451: LD_VAR 0 2
2455: PUSH
2456: LD_INT 3
2458: ARRAY
2459: PPUSH
2460: LD_INT 10
2462: PPUSH
2463: CALL_OW 272
2467: PUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_INT 2
2475: ARRAY
2476: PPUSH
2477: LD_VAR 0 2
2481: PUSH
2482: LD_INT 3
2484: ARRAY
2485: PPUSH
2486: LD_INT 10
2488: PPUSH
2489: CALL_OW 273
2493: PUSH
2494: EMPTY
2495: LIST
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: ADD
2501: ST_TO_ADDR
2502: GO 2429
2504: POP
2505: POP
// breastworks_def := [ [ [ 84 , 65 , 5 ] , [ 85 , 57 , 5 ] , [ 46 , 36 , 2 ] ] , [ [ 102 , 45 , 0 ] , [ 111 , 45 , 5 ] , [ 93 , 18 , 2 ] ] , [ [ 147 , 65 , 0 ] , [ 138 , 56 , 0 ] , [ 158 , 39 , 3 ] ] , [ [ 177 , 113 , 1 ] , [ 182 , 123 , 1 ] , [ 202 , 114 , 4 ] ] , [ [ 200 , 176 , 2 ] , [ 200 , 167 , 2 ] , [ 235 , 196 , 5 ] ] , [ [ 176 , 192 , 2 ] , [ 184 , 192 , 2 ] , [ 190 , 219 , 5 ] ] , [ [ 144 , 180 , 3 ] , [ 135 , 170 , 3 ] , [ 128 , 193 , 0 ] ] , [ [ 103 , 113 , 4 ] , [ 109 , 125 , 4 ] , [ 75 , 112 , 1 ] ] ] ;
2506: LD_ADDR_EXP 23
2510: PUSH
2511: LD_INT 84
2513: PUSH
2514: LD_INT 65
2516: PUSH
2517: LD_INT 5
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: LIST
2524: PUSH
2525: LD_INT 85
2527: PUSH
2528: LD_INT 57
2530: PUSH
2531: LD_INT 5
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 46
2541: PUSH
2542: LD_INT 36
2544: PUSH
2545: LD_INT 2
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 102
2560: PUSH
2561: LD_INT 45
2563: PUSH
2564: LD_INT 0
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: LIST
2571: PUSH
2572: LD_INT 111
2574: PUSH
2575: LD_INT 45
2577: PUSH
2578: LD_INT 5
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: LIST
2585: PUSH
2586: LD_INT 93
2588: PUSH
2589: LD_INT 18
2591: PUSH
2592: LD_INT 2
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 147
2607: PUSH
2608: LD_INT 65
2610: PUSH
2611: LD_INT 0
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: LIST
2618: PUSH
2619: LD_INT 138
2621: PUSH
2622: LD_INT 56
2624: PUSH
2625: LD_INT 0
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: LD_INT 158
2635: PUSH
2636: LD_INT 39
2638: PUSH
2639: LD_INT 3
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: LIST
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 177
2654: PUSH
2655: LD_INT 113
2657: PUSH
2658: LD_INT 1
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 182
2668: PUSH
2669: LD_INT 123
2671: PUSH
2672: LD_INT 1
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: PUSH
2680: LD_INT 202
2682: PUSH
2683: LD_INT 114
2685: PUSH
2686: LD_INT 4
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: LIST
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 200
2701: PUSH
2702: LD_INT 176
2704: PUSH
2705: LD_INT 2
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 200
2715: PUSH
2716: LD_INT 167
2718: PUSH
2719: LD_INT 2
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 235
2729: PUSH
2730: LD_INT 196
2732: PUSH
2733: LD_INT 5
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: LIST
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 176
2748: PUSH
2749: LD_INT 192
2751: PUSH
2752: LD_INT 2
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: PUSH
2760: LD_INT 184
2762: PUSH
2763: LD_INT 192
2765: PUSH
2766: LD_INT 2
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 190
2776: PUSH
2777: LD_INT 219
2779: PUSH
2780: LD_INT 5
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: LIST
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 144
2795: PUSH
2796: LD_INT 180
2798: PUSH
2799: LD_INT 3
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 135
2809: PUSH
2810: LD_INT 170
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: LIST
2820: PUSH
2821: LD_INT 128
2823: PUSH
2824: LD_INT 193
2826: PUSH
2827: LD_INT 0
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: LIST
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 103
2842: PUSH
2843: LD_INT 113
2845: PUSH
2846: LD_INT 4
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 109
2856: PUSH
2857: LD_INT 125
2859: PUSH
2860: LD_INT 4
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: LIST
2867: PUSH
2868: LD_INT 75
2870: PUSH
2871: LD_INT 112
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: ST_TO_ADDR
// for i = 1 to Side_Positions do
2897: LD_ADDR_VAR 0 2
2901: PUSH
2902: DOUBLE
2903: LD_INT 1
2905: DEC
2906: ST_TO_ADDR
2907: LD_EXP 18
2911: PUSH
2912: FOR_TO
2913: IFFALSE 3043
// begin if not Side_Positions [ i ] then
2915: LD_EXP 18
2919: PUSH
2920: LD_VAR 0 2
2924: ARRAY
2925: NOT
2926: IFFALSE 2930
// continue ;
2928: GO 2912
// if def_extra_oil_deposits then
2930: LD_EXP 46
2934: IFFALSE 2992
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2936: LD_ADDR_VAR 0 3
2940: PUSH
2941: LD_EXP 26
2945: PUSH
2946: LD_EXP 18
2950: PUSH
2951: LD_VAR 0 2
2955: ARRAY
2956: ARRAY
2957: PUSH
2958: FOR_IN
2959: IFFALSE 2988
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2961: LD_VAR 0 3
2965: PUSH
2966: LD_INT 1
2968: ARRAY
2969: PPUSH
2970: LD_VAR 0 3
2974: PUSH
2975: LD_INT 2
2977: ARRAY
2978: PPUSH
2979: LD_INT 2
2981: PPUSH
2982: CALL_OW 62
2986: GO 2958
2988: POP
2989: POP
2990: GO 3041
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2992: LD_EXP 25
2996: PUSH
2997: LD_EXP 18
3001: PUSH
3002: LD_VAR 0 2
3006: ARRAY
3007: ARRAY
3008: PUSH
3009: LD_INT 1
3011: ARRAY
3012: PPUSH
3013: LD_EXP 25
3017: PUSH
3018: LD_EXP 18
3022: PUSH
3023: LD_VAR 0 2
3027: ARRAY
3028: ARRAY
3029: PUSH
3030: LD_INT 2
3032: ARRAY
3033: PPUSH
3034: LD_INT 2
3036: PPUSH
3037: CALL_OW 62
// end ;
3041: GO 2912
3043: POP
3044: POP
// if def_extra_sib_deposits then
3045: LD_EXP 47
3049: IFFALSE 3203
// for i = 1 to Side_Positions do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: DOUBLE
3057: LD_INT 1
3059: DEC
3060: ST_TO_ADDR
3061: LD_EXP 18
3065: PUSH
3066: FOR_TO
3067: IFFALSE 3201
// begin if not Side_Positions [ i ] then
3069: LD_EXP 18
3073: PUSH
3074: LD_VAR 0 2
3078: ARRAY
3079: NOT
3080: IFFALSE 3084
// continue ;
3082: GO 3066
// if def_extra_sib_deposits = 2 then
3084: LD_EXP 47
3088: PUSH
3089: LD_INT 2
3091: EQUAL
3092: IFFALSE 3150
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
3094: LD_ADDR_VAR 0 3
3098: PUSH
3099: LD_EXP 28
3103: PUSH
3104: LD_EXP 18
3108: PUSH
3109: LD_VAR 0 2
3113: ARRAY
3114: ARRAY
3115: PUSH
3116: FOR_IN
3117: IFFALSE 3146
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
3119: LD_VAR 0 3
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_VAR 0 3
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: LD_INT 3
3139: PPUSH
3140: CALL_OW 62
3144: GO 3116
3146: POP
3147: POP
3148: GO 3199
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
3150: LD_EXP 27
3154: PUSH
3155: LD_EXP 18
3159: PUSH
3160: LD_VAR 0 2
3164: ARRAY
3165: ARRAY
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: PPUSH
3171: LD_EXP 27
3175: PUSH
3176: LD_EXP 18
3180: PUSH
3181: LD_VAR 0 2
3185: ARRAY
3186: ARRAY
3187: PUSH
3188: LD_INT 2
3190: ARRAY
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: CALL_OW 62
// end ;
3199: GO 3066
3201: POP
3202: POP
// end ;
3203: LD_VAR 0 1
3207: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
3208: LD_INT 0
3210: PPUSH
3211: PPUSH
3212: PPUSH
// if not Team_Game then
3213: LD_EXP 20
3217: NOT
3218: IFFALSE 3316
// begin for i = 1 to 8 do
3220: LD_ADDR_VAR 0 2
3224: PUSH
3225: DOUBLE
3226: LD_INT 1
3228: DEC
3229: ST_TO_ADDR
3230: LD_INT 8
3232: PUSH
3233: FOR_TO
3234: IFFALSE 3312
// for j = 1 to 8 do
3236: LD_ADDR_VAR 0 3
3240: PUSH
3241: DOUBLE
3242: LD_INT 1
3244: DEC
3245: ST_TO_ADDR
3246: LD_INT 8
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3308
// if i <> j then
3252: LD_VAR 0 2
3256: PUSH
3257: LD_VAR 0 3
3261: NONEQUAL
3262: IFFALSE 3286
// SetAttitude ( i , j , att_neutral , true ) else
3264: LD_VAR 0 2
3268: PPUSH
3269: LD_VAR 0 3
3273: PPUSH
3274: LD_INT 0
3276: PPUSH
3277: LD_INT 1
3279: PPUSH
3280: CALL_OW 80
3284: GO 3306
// SetAttitude ( i , j , att_friend , true ) ;
3286: LD_VAR 0 2
3290: PPUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_INT 1
3298: PPUSH
3299: LD_INT 1
3301: PPUSH
3302: CALL_OW 80
3306: GO 3249
3308: POP
3309: POP
3310: GO 3233
3312: POP
3313: POP
// end else
3314: GO 3491
// begin if def_shared_vision then
3316: LD_EXP 48
3320: IFFALSE 3385
// begin for i in Teams do
3322: LD_ADDR_VAR 0 2
3326: PUSH
3327: LD_EXP 17
3331: PUSH
3332: FOR_IN
3333: IFFALSE 3383
// for j = 2 to i do
3335: LD_ADDR_VAR 0 3
3339: PUSH
3340: DOUBLE
3341: LD_INT 2
3343: DEC
3344: ST_TO_ADDR
3345: LD_VAR 0 2
3349: PUSH
3350: FOR_TO
3351: IFFALSE 3379
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3353: LD_VAR 0 2
3357: PUSH
3358: LD_VAR 0 3
3362: ARRAY
3363: PPUSH
3364: LD_VAR 0 2
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PPUSH
3373: CALL_OW 343
3377: GO 3350
3379: POP
3380: POP
3381: GO 3332
3383: POP
3384: POP
// end ; for i = 1 to 8 do
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: DOUBLE
3391: LD_INT 1
3393: DEC
3394: ST_TO_ADDR
3395: LD_INT 8
3397: PUSH
3398: FOR_TO
3399: IFFALSE 3489
// for j = 1 to 8 do
3401: LD_ADDR_VAR 0 3
3405: PUSH
3406: DOUBLE
3407: LD_INT 1
3409: DEC
3410: ST_TO_ADDR
3411: LD_INT 8
3413: PUSH
3414: FOR_TO
3415: IFFALSE 3485
// if Side_Teams [ i ] = Side_Teams [ j ] then
3417: LD_EXP 16
3421: PUSH
3422: LD_VAR 0 2
3426: ARRAY
3427: PUSH
3428: LD_EXP 16
3432: PUSH
3433: LD_VAR 0 3
3437: ARRAY
3438: EQUAL
3439: IFFALSE 3463
// SetAttitude ( i , j , att_friend , true ) else
3441: LD_VAR 0 2
3445: PPUSH
3446: LD_VAR 0 3
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 1
3456: PPUSH
3457: CALL_OW 80
3461: GO 3483
// SetAttitude ( i , j , att_enemy , true ) ;
3463: LD_VAR 0 2
3467: PPUSH
3468: LD_VAR 0 3
3472: PPUSH
3473: LD_INT 2
3475: PPUSH
3476: LD_INT 1
3478: PPUSH
3479: CALL_OW 80
3483: GO 3414
3485: POP
3486: POP
3487: GO 3398
3489: POP
3490: POP
// end ; end ;
3491: LD_VAR 0 1
3495: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3496: LD_INT 0
3498: PPUSH
3499: PPUSH
3500: PPUSH
3501: PPUSH
// result := [ ] ;
3502: LD_ADDR_VAR 0 7
3506: PUSH
3507: EMPTY
3508: ST_TO_ADDR
// for i := 1 to count do
3509: LD_ADDR_VAR 0 8
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_VAR 0 1
3523: PUSH
3524: FOR_TO
3525: IFFALSE 3943
// begin uc_direction := Rand ( 0 , 5 ) ;
3527: LD_ADDR_OWVAR 24
3531: PUSH
3532: LD_INT 0
3534: PPUSH
3535: LD_INT 5
3537: PPUSH
3538: CALL_OW 12
3542: ST_TO_ADDR
// if commander then
3543: LD_LOC 1
3547: IFFALSE 3656
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3549: LD_ADDR_OWVAR 26
3553: PUSH
3554: LD_OWVAR 19
3558: PUSH
3559: LD_OWVAR 20
3563: ARRAY
3564: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3565: LD_INT 1
3567: PPUSH
3568: LD_INT 2
3570: PPUSH
3571: CALL_OW 12
3575: PPUSH
3576: LD_VAR 0 2
3580: PPUSH
3581: LD_EXP 6
3585: PUSH
3586: LD_INT 2
3588: PLUS
3589: PPUSH
3590: CALL_OW 380
// hc_importance := 105 ;
3594: LD_ADDR_OWVAR 32
3598: PUSH
3599: LD_INT 105
3601: ST_TO_ADDR
// commander := false ;
3602: LD_ADDR_LOC 1
3606: PUSH
3607: LD_INT 0
3609: ST_TO_ADDR
// if Multiplayer then
3610: LD_OWVAR 4
3614: IFFALSE 3654
// begin hc_gallery := MULTIAVATARS ;
3616: LD_ADDR_OWVAR 33
3620: PUSH
3621: LD_STRING MULTIAVATARS
3623: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3624: LD_ADDR_OWVAR 34
3628: PUSH
3629: LD_OWVAR 20
3633: PPUSH
3634: CALL_OW 525
3638: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3639: LD_ADDR_OWVAR 27
3643: PUSH
3644: LD_OWVAR 20
3648: PPUSH
3649: CALL_OW 526
3653: ST_TO_ADDR
// end ; end else
3654: GO 3719
// begin hc_name :=  ;
3656: LD_ADDR_OWVAR 26
3660: PUSH
3661: LD_STRING 
3663: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3664: LD_INT 1
3666: PPUSH
3667: LD_INT 2
3669: PPUSH
3670: CALL_OW 12
3674: PPUSH
3675: LD_VAR 0 2
3679: PPUSH
3680: LD_EXP 6
3684: PPUSH
3685: CALL_OW 380
// hc_importance := 0 ;
3689: LD_ADDR_OWVAR 32
3693: PUSH
3694: LD_INT 0
3696: ST_TO_ADDR
// if Multiplayer then
3697: LD_OWVAR 4
3701: IFFALSE 3719
// begin hc_gallery :=  ;
3703: LD_ADDR_OWVAR 33
3707: PUSH
3708: LD_STRING 
3710: ST_TO_ADDR
// hc_face_number := 0 ;
3711: LD_ADDR_OWVAR 34
3715: PUSH
3716: LD_INT 0
3718: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3719: LD_ADDR_VAR 0 10
3723: PUSH
3724: CALL_OW 44
3728: ST_TO_ADDR
// if global_defined then
3729: LD_LOC 3
3733: IFFALSE 3873
// begin if ( cl = class_soldier ) then
3735: LD_VAR 0 2
3739: PUSH
3740: LD_INT 1
3742: EQUAL
3743: IFFALSE 3763
// j := i + soldiers_created else
3745: LD_ADDR_VAR 0 9
3749: PUSH
3750: LD_VAR 0 8
3754: PUSH
3755: LD_LOC 4
3759: PLUS
3760: ST_TO_ADDR
3761: GO 3773
// j := i ;
3763: LD_ADDR_VAR 0 9
3767: PUSH
3768: LD_VAR 0 8
3772: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3773: LD_LOC 2
3777: PUSH
3778: LD_VAR 0 2
3782: ARRAY
3783: PUSH
3784: LD_VAR 0 9
3788: ARRAY
3789: PPUSH
3790: LD_VAR 0 10
3794: PPUSH
3795: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3799: LD_VAR 0 10
3803: PPUSH
3804: LD_INT 2
3806: PPUSH
3807: LD_LOC 2
3811: PUSH
3812: LD_VAR 0 2
3816: ARRAY
3817: PUSH
3818: LD_VAR 0 9
3822: ARRAY
3823: PPUSH
3824: LD_INT 2
3826: PPUSH
3827: CALL_OW 260
3831: PPUSH
3832: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3836: LD_VAR 0 10
3840: PPUSH
3841: LD_INT 1
3843: PPUSH
3844: LD_LOC 2
3848: PUSH
3849: LD_VAR 0 2
3853: ARRAY
3854: PUSH
3855: LD_VAR 0 9
3859: ARRAY
3860: PPUSH
3861: LD_INT 1
3863: PPUSH
3864: CALL_OW 260
3868: PPUSH
3869: CALL_OW 239
// end ; if building then
3873: LD_VAR 0 6
3877: IFFALSE 3895
// PlaceHumanInUnit ( un , building ) else
3879: LD_VAR 0 10
3883: PPUSH
3884: LD_VAR 0 6
3888: PPUSH
3889: CALL_OW 52
3893: GO 3922
// PlaceUnitXYR ( un , x , y , r , false ) ;
3895: LD_VAR 0 10
3899: PPUSH
3900: LD_VAR 0 3
3904: PPUSH
3905: LD_VAR 0 4
3909: PPUSH
3910: LD_VAR 0 5
3914: PPUSH
3915: LD_INT 0
3917: PPUSH
3918: CALL_OW 50
// result := result ^ [ un ] ;
3922: LD_ADDR_VAR 0 7
3926: PUSH
3927: LD_VAR 0 7
3931: PUSH
3932: LD_VAR 0 10
3936: PUSH
3937: EMPTY
3938: LIST
3939: ADD
3940: ST_TO_ADDR
// end ;
3941: GO 3524
3943: POP
3944: POP
// if not global_defined then
3945: LD_LOC 3
3949: NOT
3950: IFFALSE 4028
// if ( global_units >= cl ) then
3952: LD_LOC 2
3956: PUSH
3957: LD_VAR 0 2
3961: GREATEREQUAL
3962: IFFALSE 4003
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3964: LD_ADDR_LOC 2
3968: PUSH
3969: LD_LOC 2
3973: PPUSH
3974: LD_VAR 0 2
3978: PPUSH
3979: LD_LOC 2
3983: PUSH
3984: LD_VAR 0 2
3988: ARRAY
3989: PUSH
3990: LD_VAR 0 7
3994: ADD
3995: PPUSH
3996: CALL_OW 1
4000: ST_TO_ADDR
4001: GO 4028
// global_units := Replace ( global_units , cl , result ) ;
4003: LD_ADDR_LOC 2
4007: PUSH
4008: LD_LOC 2
4012: PPUSH
4013: LD_VAR 0 2
4017: PPUSH
4018: LD_VAR 0 7
4022: PPUSH
4023: CALL_OW 1
4027: ST_TO_ADDR
// if commander then
4028: LD_LOC 1
4032: IFFALSE 4079
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
4034: LD_ADDR_EXP 31
4038: PUSH
4039: LD_EXP 31
4043: PPUSH
4044: LD_OWVAR 20
4048: PPUSH
4049: LD_EXP 31
4053: PUSH
4054: LD_OWVAR 20
4058: ARRAY
4059: PUSH
4060: LD_VAR 0 10
4064: ADD
4065: PPUSH
4066: CALL_OW 1
4070: ST_TO_ADDR
// commander := false ;
4071: LD_ADDR_LOC 1
4075: PUSH
4076: LD_INT 0
4078: ST_TO_ADDR
// end ; end ;
4079: LD_VAR 0 7
4083: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
4084: LD_INT 0
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
4090: PPUSH
4091: PPUSH
4092: PPUSH
4093: PPUSH
4094: PPUSH
// if side in [ 0 , 9 ] then
4095: LD_VAR 0 1
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: LD_INT 9
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: IN
4110: IFFALSE 4114
// exit ;
4112: GO 5164
// pos := Side_Positions [ side ] ;
4114: LD_ADDR_VAR 0 3
4118: PUSH
4119: LD_EXP 18
4123: PUSH
4124: LD_VAR 0 1
4128: ARRAY
4129: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
4130: LD_ADDR_OWVAR 21
4134: PUSH
4135: LD_EXP 19
4139: PUSH
4140: LD_VAR 0 1
4144: ARRAY
4145: ST_TO_ADDR
// uc_side := side ;
4146: LD_ADDR_OWVAR 20
4150: PUSH
4151: LD_VAR 0 1
4155: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
4156: LD_ADDR_VAR 0 4
4160: PUSH
4161: LD_EXP 22
4165: PUSH
4166: LD_VAR 0 3
4170: ARRAY
4171: PUSH
4172: LD_INT 1
4174: ARRAY
4175: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
4176: LD_ADDR_VAR 0 5
4180: PUSH
4181: LD_EXP 22
4185: PUSH
4186: LD_VAR 0 3
4190: ARRAY
4191: PUSH
4192: LD_INT 2
4194: ARRAY
4195: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
4196: LD_ADDR_VAR 0 6
4200: PUSH
4201: LD_EXP 22
4205: PUSH
4206: LD_VAR 0 3
4210: ARRAY
4211: PUSH
4212: LD_INT 3
4214: ARRAY
4215: ST_TO_ADDR
// if is_depot then
4216: LD_EXP 3
4220: IFFALSE 4353
// begin bc_type = b_depot ;
4222: LD_ADDR_OWVAR 42
4226: PUSH
4227: LD_INT 0
4229: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4230: LD_ADDR_VAR 0 10
4234: PUSH
4235: LD_VAR 0 4
4239: PPUSH
4240: LD_VAR 0 5
4244: PPUSH
4245: LD_VAR 0 6
4249: PPUSH
4250: CALL_OW 47
4254: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
4255: LD_VAR 0 10
4259: PPUSH
4260: LD_STRING @
4262: PUSH
4263: LD_VAR 0 1
4267: STR
4268: PPUSH
4269: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
4273: LD_VAR 0 10
4277: PPUSH
4278: CALL_OW 274
4282: PPUSH
4283: LD_INT 1
4285: PPUSH
4286: LD_EXP 8
4290: PUSH
4291: LD_INT 1
4293: ARRAY
4294: PPUSH
4295: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
4299: LD_VAR 0 10
4303: PPUSH
4304: CALL_OW 274
4308: PPUSH
4309: LD_INT 2
4311: PPUSH
4312: LD_EXP 8
4316: PUSH
4317: LD_INT 2
4319: ARRAY
4320: PPUSH
4321: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4325: LD_VAR 0 10
4329: PPUSH
4330: CALL_OW 274
4334: PPUSH
4335: LD_INT 3
4337: PPUSH
4338: LD_EXP 8
4342: PUSH
4343: LD_INT 3
4345: ARRAY
4346: PPUSH
4347: CALL_OW 277
// end else
4351: GO 4497
// begin for i := 1 to 3 do
4353: LD_ADDR_VAR 0 7
4357: PUSH
4358: DOUBLE
4359: LD_INT 1
4361: DEC
4362: ST_TO_ADDR
4363: LD_INT 3
4365: PUSH
4366: FOR_TO
4367: IFFALSE 4495
// begin r := starting_resources [ i ] ;
4369: LD_ADDR_VAR 0 8
4373: PUSH
4374: LD_EXP 8
4378: PUSH
4379: LD_VAR 0 7
4383: ARRAY
4384: ST_TO_ADDR
// while r >= 10 do
4385: LD_VAR 0 8
4389: PUSH
4390: LD_INT 10
4392: GREATEREQUAL
4393: IFFALSE 4493
// if r > 50 then
4395: LD_VAR 0 8
4399: PUSH
4400: LD_INT 50
4402: GREATER
4403: IFFALSE 4449
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4405: LD_VAR 0 7
4409: PPUSH
4410: LD_INT 5
4412: PPUSH
4413: LD_VAR 0 4
4417: PPUSH
4418: LD_VAR 0 5
4422: PPUSH
4423: LD_INT 4
4425: PPUSH
4426: LD_INT 0
4428: PPUSH
4429: CALL_OW 60
// r := r - 50 ;
4433: LD_ADDR_VAR 0 8
4437: PUSH
4438: LD_VAR 0 8
4442: PUSH
4443: LD_INT 50
4445: MINUS
4446: ST_TO_ADDR
// end else
4447: GO 4491
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4449: LD_VAR 0 7
4453: PPUSH
4454: LD_VAR 0 8
4458: PUSH
4459: LD_INT 10
4461: DIV
4462: PPUSH
4463: LD_VAR 0 4
4467: PPUSH
4468: LD_VAR 0 5
4472: PPUSH
4473: LD_INT 4
4475: PPUSH
4476: LD_INT 0
4478: PPUSH
4479: CALL_OW 60
// r := 0 ;
4483: LD_ADDR_VAR 0 8
4487: PUSH
4488: LD_INT 0
4490: ST_TO_ADDR
// end ;
4491: GO 4385
// end ;
4493: GO 4366
4495: POP
4496: POP
// end ; for r in starting_crates do
4497: LD_ADDR_VAR 0 8
4501: PUSH
4502: LD_EXP 7
4506: PUSH
4507: FOR_IN
4508: IFFALSE 4540
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4510: LD_INT 1
4512: PPUSH
4513: LD_INT 5
4515: PPUSH
4516: LD_VAR 0 4
4520: PPUSH
4521: LD_VAR 0 5
4525: PPUSH
4526: LD_VAR 0 8
4530: PPUSH
4531: LD_INT 0
4533: PPUSH
4534: CALL_OW 60
4538: GO 4507
4540: POP
4541: POP
// if def_morale_flags then
4542: LD_EXP 49
4546: IFFALSE 4685
// begin x := start_def [ pos ] [ 1 ] ;
4548: LD_ADDR_VAR 0 4
4552: PUSH
4553: LD_EXP 24
4557: PUSH
4558: LD_VAR 0 3
4562: ARRAY
4563: PUSH
4564: LD_INT 1
4566: ARRAY
4567: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4568: LD_ADDR_VAR 0 5
4572: PUSH
4573: LD_EXP 24
4577: PUSH
4578: LD_VAR 0 3
4582: ARRAY
4583: PUSH
4584: LD_INT 2
4586: ARRAY
4587: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4588: LD_VAR 0 4
4592: PPUSH
4593: LD_VAR 0 5
4597: PPUSH
4598: LD_INT 12
4600: PPUSH
4601: LD_INT 2
4603: PPUSH
4604: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4608: LD_ADDR_EXP 29
4612: PUSH
4613: LD_EXP 29
4617: PUSH
4618: LD_VAR 0 1
4622: PPUSH
4623: LD_VAR 0 4
4627: PPUSH
4628: LD_VAR 0 5
4632: PPUSH
4633: LD_INT 1
4635: PUSH
4636: LD_INT 100
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: LD_INT 2
4645: PUSH
4646: LD_INT 50
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 3
4655: PUSH
4656: LD_INT 20
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PUSH
4663: LD_INT 20
4665: PUSH
4666: LD_INT 100
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: PPUSH
4679: CALL_OW 418
4683: ADD
4684: ST_TO_ADDR
// end ; commander := true ;
4685: LD_ADDR_LOC 1
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// soldiers_created := 0 ;
4693: LD_ADDR_LOC 4
4697: PUSH
4698: LD_INT 0
4700: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4701: LD_ADDR_VAR 0 7
4705: PUSH
4706: DOUBLE
4707: LD_INT 1
4709: DEC
4710: ST_TO_ADDR
4711: LD_EXP 4
4715: PUSH
4716: FOR_TO
4717: IFFALSE 4870
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4719: LD_ADDR_VAR 0 4
4723: PUSH
4724: LD_EXP 23
4728: PUSH
4729: LD_VAR 0 3
4733: ARRAY
4734: PUSH
4735: LD_VAR 0 7
4739: ARRAY
4740: PUSH
4741: LD_INT 1
4743: ARRAY
4744: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4745: LD_ADDR_VAR 0 5
4749: PUSH
4750: LD_EXP 23
4754: PUSH
4755: LD_VAR 0 3
4759: ARRAY
4760: PUSH
4761: LD_VAR 0 7
4765: ARRAY
4766: PUSH
4767: LD_INT 2
4769: ARRAY
4770: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4771: LD_ADDR_VAR 0 6
4775: PUSH
4776: LD_EXP 23
4780: PUSH
4781: LD_VAR 0 3
4785: ARRAY
4786: PUSH
4787: LD_VAR 0 7
4791: ARRAY
4792: PUSH
4793: LD_INT 3
4795: ARRAY
4796: ST_TO_ADDR
// bc_type := b_breastwork ;
4797: LD_ADDR_OWVAR 42
4801: PUSH
4802: LD_INT 31
4804: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4805: LD_ADDR_VAR 0 9
4809: PUSH
4810: LD_VAR 0 4
4814: PPUSH
4815: LD_VAR 0 5
4819: PPUSH
4820: LD_VAR 0 6
4824: PPUSH
4825: CALL_OW 47
4829: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4830: LD_INT 1
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: LD_INT 0
4838: PPUSH
4839: LD_INT 0
4841: PPUSH
4842: LD_INT 0
4844: PPUSH
4845: LD_VAR 0 9
4849: PPUSH
4850: CALL 3496 0 6
// soldiers_created := soldiers_created + 1 ;
4854: LD_ADDR_LOC 4
4858: PUSH
4859: LD_LOC 4
4863: PUSH
4864: LD_INT 1
4866: PLUS
4867: ST_TO_ADDR
// end ;
4868: GO 4716
4870: POP
4871: POP
// x := start_def [ pos ] [ 1 ] ;
4872: LD_ADDR_VAR 0 4
4876: PUSH
4877: LD_EXP 24
4881: PUSH
4882: LD_VAR 0 3
4886: ARRAY
4887: PUSH
4888: LD_INT 1
4890: ARRAY
4891: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4892: LD_ADDR_VAR 0 5
4896: PUSH
4897: LD_EXP 24
4901: PUSH
4902: LD_VAR 0 3
4906: ARRAY
4907: PUSH
4908: LD_INT 2
4910: ARRAY
4911: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4912: LD_LOC 8
4916: PUSH
4917: LD_EXP 4
4921: MINUS
4922: PPUSH
4923: LD_INT 1
4925: PPUSH
4926: LD_VAR 0 4
4930: PPUSH
4931: LD_VAR 0 5
4935: PPUSH
4936: LD_INT 5
4938: PPUSH
4939: LD_INT 0
4941: PPUSH
4942: CALL 3496 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4946: LD_LOC 5
4950: PPUSH
4951: LD_INT 2
4953: PPUSH
4954: LD_VAR 0 4
4958: PPUSH
4959: LD_VAR 0 5
4963: PPUSH
4964: LD_INT 5
4966: PPUSH
4967: LD_INT 0
4969: PPUSH
4970: CALL 3496 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4974: LD_LOC 7
4978: PPUSH
4979: LD_INT 3
4981: PPUSH
4982: LD_VAR 0 4
4986: PPUSH
4987: LD_VAR 0 5
4991: PPUSH
4992: LD_INT 5
4994: PPUSH
4995: LD_INT 0
4997: PPUSH
4998: CALL 3496 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
5002: LD_LOC 6
5006: PPUSH
5007: LD_INT 4
5009: PPUSH
5010: LD_VAR 0 4
5014: PPUSH
5015: LD_VAR 0 5
5019: PPUSH
5020: LD_INT 5
5022: PPUSH
5023: LD_INT 0
5025: PPUSH
5026: CALL 3496 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
5030: LD_EXP 50
5034: PUSH
5035: LD_INT 20
5037: PPUSH
5038: LD_VAR 0 1
5042: PPUSH
5043: CALL_OW 321
5047: PUSH
5048: LD_INT 1
5050: EQUAL
5051: AND
5052: IFFALSE 5069
// SetTech ( tech_SibDet , side , state_researched ) ;
5054: LD_INT 20
5056: PPUSH
5057: LD_VAR 0 1
5061: PPUSH
5062: LD_INT 2
5064: PPUSH
5065: CALL_OW 322
// if def_siberite_bomb = 1 then
5069: LD_EXP 53
5073: PUSH
5074: LD_INT 1
5076: EQUAL
5077: IFFALSE 5111
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
5079: LD_INT 25
5081: PPUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: LD_INT 1
5089: PPUSH
5090: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
5094: LD_INT 73
5096: PPUSH
5097: LD_VAR 0 1
5101: PPUSH
5102: LD_INT 1
5104: PPUSH
5105: CALL_OW 322
// end else
5109: GO 5141
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
5111: LD_INT 25
5113: PPUSH
5114: LD_VAR 0 1
5118: PPUSH
5119: LD_INT 0
5121: PPUSH
5122: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
5126: LD_INT 73
5128: PPUSH
5129: LD_VAR 0 1
5133: PPUSH
5134: LD_INT 0
5136: PPUSH
5137: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
5141: LD_INT 24
5143: PPUSH
5144: LD_VAR 0 1
5148: PPUSH
5149: LD_INT 0
5151: PPUSH
5152: CALL_OW 322
// global_defined := true ;
5156: LD_ADDR_LOC 3
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// end ;
5164: LD_VAR 0 2
5168: RET
// every 0 0$1 do
5169: GO 5171
5171: DISABLE
// if ( def_siberite_bomb > 1 ) then
5172: LD_EXP 53
5176: PUSH
5177: LD_INT 1
5179: GREATER
5180: IFFALSE 5195
// begin wait ( siberite_bomb_Delay ) ;
5182: LD_EXP 15
5186: PPUSH
5187: CALL_OW 67
// EnableSibFiss ;
5191: CALL 5196 0 0
// end ;
5195: END
// function EnableSibFiss ; var i ; begin
5196: LD_INT 0
5198: PPUSH
5199: PPUSH
// for i := 1 to 8 do
5200: LD_ADDR_VAR 0 2
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_INT 8
5212: PUSH
5213: FOR_TO
5214: IFFALSE 5260
// if Side_Positions [ i ] then
5216: LD_EXP 18
5220: PUSH
5221: LD_VAR 0 2
5225: ARRAY
5226: IFFALSE 5258
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5228: LD_INT 25
5230: PPUSH
5231: LD_VAR 0 2
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5243: LD_INT 73
5245: PPUSH
5246: LD_VAR 0 2
5250: PPUSH
5251: LD_INT 1
5253: PPUSH
5254: CALL_OW 322
// end ;
5258: GO 5213
5260: POP
5261: POP
// end ;
5262: LD_VAR 0 1
5266: RET
// function prepare_sides ; var i ; begin
5267: LD_INT 0
5269: PPUSH
5270: PPUSH
// global_units := [ ] ;
5271: LD_ADDR_LOC 2
5275: PUSH
5276: EMPTY
5277: ST_TO_ADDR
// global_defined := false ;
5278: LD_ADDR_LOC 3
5282: PUSH
5283: LD_INT 0
5285: ST_TO_ADDR
// CountClassMembers ;
5286: CALL 5336 0 0
// for i := 1 to 8 do
5290: LD_ADDR_VAR 0 2
5294: PUSH
5295: DOUBLE
5296: LD_INT 1
5298: DEC
5299: ST_TO_ADDR
5300: LD_INT 8
5302: PUSH
5303: FOR_TO
5304: IFFALSE 5329
// if Side_Positions [ i ] then
5306: LD_EXP 18
5310: PUSH
5311: LD_VAR 0 2
5315: ARRAY
5316: IFFALSE 5327
// prepare_side ( i ) ;
5318: LD_VAR 0 2
5322: PPUSH
5323: CALL 4084 0 1
5327: GO 5303
5329: POP
5330: POP
// end ;
5331: LD_VAR 0 1
5335: RET
// function CountClassMembers ; var Mode ; begin
5336: LD_INT 0
5338: PPUSH
5339: PPUSH
// if No_Mechs then
5340: LD_EXP 55
5344: IFFALSE 5356
// Mode := 2 else
5346: LD_ADDR_VAR 0 2
5350: PUSH
5351: LD_INT 2
5353: ST_TO_ADDR
5354: GO 5364
// Mode := 1 ;
5356: LD_ADDR_VAR 0 2
5360: PUSH
5361: LD_INT 1
5363: ST_TO_ADDR
// neng := number_of_people ;
5364: LD_ADDR_LOC 5
5368: PUSH
5369: LD_EXP 5
5373: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5374: LD_ADDR_LOC 8
5378: PUSH
5379: LD_LOC 5
5383: PUSH
5384: LD_INT 4
5386: PUSH
5387: LD_INT 3
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: PUSH
5394: LD_VAR 0 2
5398: ARRAY
5399: DIV
5400: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5401: LD_LOC 8
5405: PUSH
5406: LD_EXP 4
5410: LESS
5411: IFFALSE 5423
// nsol := number_of_breastworks ;
5413: LD_ADDR_LOC 8
5417: PUSH
5418: LD_EXP 4
5422: ST_TO_ADDR
// neng := neng - nsol ;
5423: LD_ADDR_LOC 5
5427: PUSH
5428: LD_LOC 5
5432: PUSH
5433: LD_LOC 8
5437: MINUS
5438: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5439: LD_ADDR_LOC 6
5443: PUSH
5444: LD_LOC 5
5448: PUSH
5449: LD_INT 3
5451: PUSH
5452: LD_INT 2
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_VAR 0 2
5463: ARRAY
5464: DIV
5465: ST_TO_ADDR
// if ( nsci < 1 ) then
5466: LD_LOC 6
5470: PUSH
5471: LD_INT 1
5473: LESS
5474: IFFALSE 5484
// nsci := 1 ;
5476: LD_ADDR_LOC 6
5480: PUSH
5481: LD_INT 1
5483: ST_TO_ADDR
// neng := neng - nsci ;
5484: LD_ADDR_LOC 5
5488: PUSH
5489: LD_LOC 5
5493: PUSH
5494: LD_LOC 6
5498: MINUS
5499: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5500: LD_ADDR_LOC 7
5504: PUSH
5505: LD_LOC 5
5509: PUSH
5510: LD_INT 2
5512: DIV
5513: PUSH
5514: LD_INT 0
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: LD_VAR 0 2
5525: ARRAY
5526: ST_TO_ADDR
// neng := neng - nmech ;
5527: LD_ADDR_LOC 5
5531: PUSH
5532: LD_LOC 5
5536: PUSH
5537: LD_LOC 7
5541: MINUS
5542: ST_TO_ADDR
// if ( neng < 1 ) then
5543: LD_LOC 5
5547: PUSH
5548: LD_INT 1
5550: LESS
5551: IFFALSE 5561
// neng := 1 ;
5553: LD_ADDR_LOC 5
5557: PUSH
5558: LD_INT 1
5560: ST_TO_ADDR
// end ;
5561: LD_VAR 0 1
5565: RET
// starting begin disable ( 98 ) ;
5566: LD_INT 98
5568: DISABLE_MARKED
// disable ( 99 ) ;
5569: LD_INT 99
5571: DISABLE_MARKED
// disable ( 100 ) ;
5572: LD_INT 100
5574: DISABLE_MARKED
// disable ( 200 ) ;
5575: LD_INT 200
5577: DISABLE_MARKED
// disable ( 400 ) ;
5578: LD_INT 400
5580: DISABLE_MARKED
// disable ( 401 ) ;
5581: LD_INT 401
5583: DISABLE_MARKED
// disable ( 600 ) ;
5584: LD_INT 600
5586: DISABLE_MARKED
// mp_selectmsg := true ;
5587: LD_ADDR_OWVAR 13
5591: PUSH
5592: LD_INT 1
5594: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5595: CALL 68 0 0
// init_map ;
5599: CALL 1683 0 0
// set_shared_visions_and_alliances ;
5603: CALL 3208 0 0
// ResetFog ;
5607: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5611: LD_OWVAR 2
5615: PPUSH
5616: CALL_OW 520
// AnimateTrees ( true ) ;
5620: LD_INT 1
5622: PPUSH
5623: CALL_OW 573
// prepare_sides ;
5627: CALL 5267 0 0
// init_respawning ;
5631: CALL 15022 0 0
// Init_Win_Condition ;
5635: CALL 13311 0 0
// InitLimits ;
5639: CALL 11900 0 0
// ShowTimer ;
5643: CALL 12837 0 0
// case Game_Type of 3 :
5647: LD_EXP 39
5651: PUSH
5652: LD_INT 3
5654: DOUBLE
5655: EQUAL
5656: IFTRUE 5660
5658: GO 5666
5660: POP
// enable ( 100 ) ; 4 :
5661: LD_INT 100
5663: ENABLE_MARKED
5664: GO 5682
5666: LD_INT 4
5668: DOUBLE
5669: EQUAL
5670: IFTRUE 5674
5672: GO 5681
5674: POP
// InitBloodGods ; end ;
5675: CALL 9463 0 0
5679: GO 5682
5681: POP
// music_nat := Side_Nations [ your_side ] ;
5682: LD_ADDR_OWVAR 71
5686: PUSH
5687: LD_EXP 19
5691: PUSH
5692: LD_OWVAR 2
5696: ARRAY
5697: ST_TO_ADDR
// if IAmSpec then
5698: CALL_OW 531
5702: IFFALSE 5726
// begin fogOff ( true ) ;
5704: LD_INT 1
5706: PPUSH
5707: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
5711: LD_INT 104
5713: PPUSH
5714: LD_INT 69
5716: PPUSH
5717: CALL_OW 86
// enable ( 400 ) ;
5721: LD_INT 400
5723: ENABLE_MARKED
// end else
5724: GO 5772
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5726: LD_EXP 24
5730: PUSH
5731: LD_EXP 18
5735: PUSH
5736: LD_OWVAR 2
5740: ARRAY
5741: ARRAY
5742: PUSH
5743: LD_INT 1
5745: ARRAY
5746: PPUSH
5747: LD_EXP 24
5751: PUSH
5752: LD_EXP 18
5756: PUSH
5757: LD_OWVAR 2
5761: ARRAY
5762: ARRAY
5763: PUSH
5764: LD_INT 2
5766: ARRAY
5767: PPUSH
5768: CALL_OW 86
// end ; InitApeman ;
5772: CALL 6541 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
5776: LD_ADDR_EXP 58
5780: PUSH
5781: LD_INT 6
5783: PUSH
5784: LD_INT 8
5786: PUSH
5787: LD_INT 11
5789: PUSH
5790: LD_INT 13
5792: PUSH
5793: LD_INT 15
5795: PUSH
5796: LD_INT 16
5798: PUSH
5799: LD_INT 18
5801: PUSH
5802: LD_INT 20
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: ST_TO_ADDR
// BeginBuildUp ;
5815: CALL 15516 0 0
// end ; end_of_file
5819: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5820: GO 5822
5822: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5823: LD_INT 4
5825: PPUSH
5826: LD_INT 5
5828: PPUSH
5829: CALL_OW 12
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 57
// enable ;
5841: ENABLE
// end ;
5842: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5843: GO 5845
5845: DISABLE
5846: LD_INT 0
5848: PPUSH
5849: PPUSH
// begin case tick of 1 .. 1 1$0 :
5850: LD_OWVAR 1
5854: PUSH
5855: LD_INT 1
5857: DOUBLE
5858: GREATEREQUAL
5859: IFFALSE 5867
5861: LD_INT 2100
5863: DOUBLE
5864: LESSEQUAL
5865: IFTRUE 5869
5867: GO 5897
5869: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5870: LD_EXP 9
5874: PUSH
5875: LD_INT 100
5877: DIVREAL
5878: PUSH
5879: LD_INT 525
5881: PPUSH
5882: LD_INT 1050
5884: PPUSH
5885: CALL_OW 12
5889: MUL
5890: PPUSH
5891: CALL_OW 67
5895: GO 6199
5897: LD_INT 2100
5899: PUSH
5900: LD_INT 1
5902: PLUS
5903: DOUBLE
5904: GREATEREQUAL
5905: IFFALSE 5913
5907: LD_INT 10500
5909: DOUBLE
5910: LESSEQUAL
5911: IFTRUE 5915
5913: GO 5943
5915: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5916: LD_EXP 9
5920: PUSH
5921: LD_INT 100
5923: DIVREAL
5924: PUSH
5925: LD_INT 1050
5927: PPUSH
5928: LD_INT 1750
5930: PPUSH
5931: CALL_OW 12
5935: MUL
5936: PPUSH
5937: CALL_OW 67
5941: GO 6199
5943: LD_INT 10500
5945: PUSH
5946: LD_INT 1
5948: PLUS
5949: DOUBLE
5950: GREATEREQUAL
5951: IFFALSE 5959
5953: LD_INT 21000
5955: DOUBLE
5956: LESSEQUAL
5957: IFTRUE 5961
5959: GO 5989
5961: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5962: LD_EXP 9
5966: PUSH
5967: LD_INT 100
5969: DIVREAL
5970: PUSH
5971: LD_INT 1750
5973: PPUSH
5974: LD_INT 2100
5976: PPUSH
5977: CALL_OW 12
5981: MUL
5982: PPUSH
5983: CALL_OW 67
5987: GO 6199
5989: LD_INT 21000
5991: PUSH
5992: LD_INT 1
5994: PLUS
5995: DOUBLE
5996: GREATEREQUAL
5997: IFFALSE 6005
5999: LD_INT 42000
6001: DOUBLE
6002: LESSEQUAL
6003: IFTRUE 6007
6005: GO 6035
6007: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6008: LD_EXP 9
6012: PUSH
6013: LD_INT 100
6015: DIVREAL
6016: PUSH
6017: LD_INT 2100
6019: PPUSH
6020: LD_INT 2275
6022: PPUSH
6023: CALL_OW 12
6027: MUL
6028: PPUSH
6029: CALL_OW 67
6033: GO 6199
6035: LD_INT 42000
6037: PUSH
6038: LD_INT 1
6040: PLUS
6041: DOUBLE
6042: GREATEREQUAL
6043: IFFALSE 6051
6045: LD_INT 63000
6047: DOUBLE
6048: LESSEQUAL
6049: IFTRUE 6053
6051: GO 6081
6053: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6054: LD_EXP 9
6058: PUSH
6059: LD_INT 100
6061: DIVREAL
6062: PUSH
6063: LD_INT 2275
6065: PPUSH
6066: LD_INT 2450
6068: PPUSH
6069: CALL_OW 12
6073: MUL
6074: PPUSH
6075: CALL_OW 67
6079: GO 6199
6081: LD_INT 63000
6083: PUSH
6084: LD_INT 1
6086: PLUS
6087: DOUBLE
6088: GREATEREQUAL
6089: IFFALSE 6097
6091: LD_INT 105000
6093: DOUBLE
6094: LESSEQUAL
6095: IFTRUE 6099
6097: GO 6127
6099: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6100: LD_EXP 9
6104: PUSH
6105: LD_INT 100
6107: DIVREAL
6108: PUSH
6109: LD_INT 2450
6111: PPUSH
6112: LD_INT 2800
6114: PPUSH
6115: CALL_OW 12
6119: MUL
6120: PPUSH
6121: CALL_OW 67
6125: GO 6199
6127: LD_INT 105000
6129: PUSH
6130: LD_INT 1
6132: PLUS
6133: DOUBLE
6134: GREATEREQUAL
6135: IFFALSE 6143
6137: LD_INT 630000
6139: DOUBLE
6140: LESSEQUAL
6141: IFTRUE 6145
6143: GO 6173
6145: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
6146: LD_EXP 9
6150: PUSH
6151: LD_INT 100
6153: DIVREAL
6154: PUSH
6155: LD_INT 2800
6157: PPUSH
6158: LD_INT 3500
6160: PPUSH
6161: CALL_OW 12
6165: MUL
6166: PPUSH
6167: CALL_OW 67
6171: GO 6199
6173: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
6174: LD_EXP 9
6178: PUSH
6179: LD_INT 100
6181: DIVREAL
6182: PUSH
6183: LD_INT 3500
6185: PPUSH
6186: LD_INT 3850
6188: PPUSH
6189: CALL_OW 12
6193: MUL
6194: PPUSH
6195: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6199: LD_ADDR_VAR 0 2
6203: PUSH
6204: LD_INT 3
6206: PPUSH
6207: LD_INT 5
6209: PPUSH
6210: CALL_OW 12
6214: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6215: LD_ADDR_VAR 0 1
6219: PUSH
6220: LD_EXP 18
6224: PUSH
6225: LD_INT 0
6227: PUSH
6228: EMPTY
6229: LIST
6230: DIFF
6231: PUSH
6232: FOR_IN
6233: IFFALSE 6282
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
6235: LD_VAR 0 2
6239: PPUSH
6240: LD_EXP 24
6244: PUSH
6245: LD_VAR 0 1
6249: ARRAY
6250: PUSH
6251: LD_INT 1
6253: ARRAY
6254: PPUSH
6255: LD_EXP 24
6259: PUSH
6260: LD_VAR 0 1
6264: ARRAY
6265: PUSH
6266: LD_INT 2
6268: ARRAY
6269: PPUSH
6270: LD_INT 20
6272: PPUSH
6273: LD_INT 1
6275: PPUSH
6276: CALL_OW 56
6280: GO 6232
6282: POP
6283: POP
// enable ;
6284: ENABLE
// end ;
6285: PPOPN 2
6287: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
6288: GO 6290
6290: DISABLE
6291: LD_INT 0
6293: PPUSH
6294: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
6295: LD_INT 1
6297: PPUSH
6298: LD_INT 1
6300: PPUSH
6301: CALL_OW 287
6305: PUSH
6306: LD_INT 200
6308: PUSH
6309: LD_EXP 9
6313: MINUS
6314: PUSH
6315: LD_INT 100
6317: DIVREAL
6318: PUSH
6319: LD_INT 5
6321: MUL
6322: LESS
6323: IFFALSE 6346
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
6325: LD_INT 3
6327: PPUSH
6328: LD_INT 5
6330: PPUSH
6331: CALL_OW 12
6335: PPUSH
6336: LD_INT 1
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 55
// enable ;
6346: ENABLE
// end ; end_of_file
6347: PPOPN 2
6349: END
// every 20 20$00 trigger apemanNumber do
6350: LD_EXP 32
6354: IFFALSE 6387
6356: GO 6358
6358: DISABLE
// begin enable ;
6359: ENABLE
// if apeLevel >= 8 then
6360: LD_EXP 37
6364: PUSH
6365: LD_INT 8
6367: GREATEREQUAL
6368: IFFALSE 6373
// disable else
6370: DISABLE
6371: GO 6387
// apeLevel := apeLevel + 1 ;
6373: LD_ADDR_EXP 37
6377: PUSH
6378: LD_EXP 37
6382: PUSH
6383: LD_INT 1
6385: PLUS
6386: ST_TO_ADDR
// end ;
6387: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6388: LD_EXP 32
6392: PUSH
6393: LD_EXP 33
6397: LESS
6398: IFFALSE 6538
6400: GO 6402
6402: DISABLE
6403: LD_INT 0
6405: PPUSH
6406: PPUSH
6407: PPUSH
6408: PPUSH
// begin enable ;
6409: ENABLE
// for i := 1 to apemanPos do
6410: LD_ADDR_VAR 0 1
6414: PUSH
6415: DOUBLE
6416: LD_INT 1
6418: DEC
6419: ST_TO_ADDR
6420: LD_EXP 35
6424: PUSH
6425: FOR_TO
6426: IFFALSE 6536
// begin if apemanPlayerCount [ i ] then
6428: LD_EXP 36
6432: PUSH
6433: LD_VAR 0 1
6437: ARRAY
6438: IFFALSE 6534
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6440: LD_EXP 36
6444: PUSH
6445: LD_VAR 0 1
6449: ARRAY
6450: PUSH
6451: LD_EXP 35
6455: PUSH
6456: LD_VAR 0 1
6460: ARRAY
6461: GREATER
6462: IFFALSE 6534
// begin ape := PrepareApeman ;
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: CALL 7057 0 0
6473: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6474: LD_VAR 0 2
6478: PPUSH
6479: LD_EXP 38
6483: PUSH
6484: LD_VAR 0 1
6488: ARRAY
6489: PPUSH
6490: LD_INT 0
6492: PPUSH
6493: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6497: LD_ADDR_EXP 35
6501: PUSH
6502: LD_EXP 35
6506: PPUSH
6507: LD_VAR 0 1
6511: PPUSH
6512: LD_EXP 35
6516: PUSH
6517: LD_VAR 0 1
6521: ARRAY
6522: PUSH
6523: LD_VAR 0 2
6527: UNION
6528: PPUSH
6529: CALL_OW 1
6533: ST_TO_ADDR
// end ; end ; end ;
6534: GO 6425
6536: POP
6537: POP
// end ;
6538: PPOPN 4
6540: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6541: LD_INT 0
6543: PPUSH
6544: PPUSH
6545: PPUSH
6546: PPUSH
6547: PPUSH
6548: PPUSH
6549: PPUSH
// playersAmount := 0 ;
6550: LD_ADDR_VAR 0 3
6554: PUSH
6555: LD_INT 0
6557: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
6558: LD_ADDR_VAR 0 7
6562: PUSH
6563: LD_INT 7
6565: PUSH
6566: LD_INT 9
6568: PUSH
6569: LD_INT 10
6571: PUSH
6572: LD_INT 12
6574: PUSH
6575: LD_INT 14
6577: PUSH
6578: LD_INT 17
6580: PUSH
6581: LD_INT 19
6583: PUSH
6584: LD_INT 21
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6597: LD_ADDR_EXP 38
6601: PUSH
6602: LD_INT 0
6604: PUSH
6605: LD_INT 0
6607: PUSH
6608: LD_INT 0
6610: PUSH
6611: LD_INT 0
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: LD_INT 0
6619: PUSH
6620: LD_INT 0
6622: PUSH
6623: LD_INT 0
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: ST_TO_ADDR
// for j = 1 to Side_Positions do
6636: LD_ADDR_VAR 0 4
6640: PUSH
6641: DOUBLE
6642: LD_INT 1
6644: DEC
6645: ST_TO_ADDR
6646: LD_EXP 18
6650: PUSH
6651: FOR_TO
6652: IFFALSE 6719
// if Side_Positions [ j ] then
6654: LD_EXP 18
6658: PUSH
6659: LD_VAR 0 4
6663: ARRAY
6664: IFFALSE 6717
// begin playersAmount := playersAmount + 1 ;
6666: LD_ADDR_VAR 0 3
6670: PUSH
6671: LD_VAR 0 3
6675: PUSH
6676: LD_INT 1
6678: PLUS
6679: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6680: LD_ADDR_EXP 38
6684: PUSH
6685: LD_EXP 38
6689: PPUSH
6690: LD_VAR 0 4
6694: PPUSH
6695: LD_VAR 0 7
6699: PUSH
6700: LD_EXP 18
6704: PUSH
6705: LD_VAR 0 4
6709: ARRAY
6710: ARRAY
6711: PPUSH
6712: CALL_OW 1
6716: ST_TO_ADDR
// end ;
6717: GO 6651
6719: POP
6720: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6721: LD_ADDR_EXP 34
6725: PUSH
6726: LD_INT 3
6728: PUSH
6729: LD_EXP 14
6733: MUL
6734: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6735: LD_ADDR_EXP 32
6739: PUSH
6740: LD_VAR 0 3
6744: PUSH
6745: LD_EXP 34
6749: MUL
6750: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6751: LD_ADDR_EXP 33
6755: PUSH
6756: LD_EXP 32
6760: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6761: LD_ADDR_EXP 35
6765: PUSH
6766: LD_INT 0
6768: PUSH
6769: LD_INT 0
6771: PUSH
6772: LD_INT 0
6774: PUSH
6775: LD_INT 0
6777: PUSH
6778: LD_INT 0
6780: PUSH
6781: LD_INT 0
6783: PUSH
6784: LD_INT 0
6786: PUSH
6787: LD_INT 0
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6800: LD_ADDR_EXP 36
6804: PUSH
6805: LD_INT 0
6807: PUSH
6808: LD_INT 0
6810: PUSH
6811: LD_INT 0
6813: PUSH
6814: LD_INT 0
6816: PUSH
6817: LD_INT 0
6819: PUSH
6820: LD_INT 0
6822: PUSH
6823: LD_INT 0
6825: PUSH
6826: LD_INT 0
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: ST_TO_ADDR
// apeLevel := 1 ;
6839: LD_ADDR_EXP 37
6843: PUSH
6844: LD_INT 1
6846: ST_TO_ADDR
// if not apemanNumber then
6847: LD_EXP 32
6851: NOT
6852: IFFALSE 6856
// exit ;
6854: GO 7052
// for i := 1 to apemanPerPlayer do
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: DOUBLE
6862: LD_INT 1
6864: DEC
6865: ST_TO_ADDR
6866: LD_EXP 34
6870: PUSH
6871: FOR_TO
6872: IFFALSE 7050
// begin for j := 1 to Side_Positions do
6874: LD_ADDR_VAR 0 4
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_EXP 18
6888: PUSH
6889: FOR_TO
6890: IFFALSE 7046
// if Side_Positions [ j ] then
6892: LD_EXP 18
6896: PUSH
6897: LD_VAR 0 4
6901: ARRAY
6902: IFFALSE 7044
// begin pos := Side_Positions [ j ] ;
6904: LD_ADDR_VAR 0 6
6908: PUSH
6909: LD_EXP 18
6913: PUSH
6914: LD_VAR 0 4
6918: ARRAY
6919: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6920: LD_ADDR_EXP 36
6924: PUSH
6925: LD_EXP 36
6929: PPUSH
6930: LD_VAR 0 4
6934: PPUSH
6935: LD_EXP 36
6939: PUSH
6940: LD_VAR 0 4
6944: ARRAY
6945: PUSH
6946: LD_INT 1
6948: PLUS
6949: PPUSH
6950: CALL_OW 1
6954: ST_TO_ADDR
// ape := PrepareApeman ;
6955: LD_ADDR_VAR 0 5
6959: PUSH
6960: CALL 7057 0 0
6964: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6965: LD_ADDR_EXP 35
6969: PUSH
6970: LD_EXP 35
6974: PPUSH
6975: LD_VAR 0 4
6979: PPUSH
6980: LD_EXP 35
6984: PUSH
6985: LD_VAR 0 4
6989: ARRAY
6990: PPUSH
6991: LD_EXP 35
6995: PUSH
6996: LD_VAR 0 4
7000: ARRAY
7001: PUSH
7002: LD_INT 1
7004: PLUS
7005: PPUSH
7006: LD_VAR 0 5
7010: PPUSH
7011: CALL_OW 1
7015: PPUSH
7016: CALL_OW 1
7020: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7021: LD_VAR 0 5
7025: PPUSH
7026: LD_EXP 38
7030: PUSH
7031: LD_VAR 0 4
7035: ARRAY
7036: PPUSH
7037: LD_INT 0
7039: PPUSH
7040: CALL_OW 49
// end ;
7044: GO 6889
7046: POP
7047: POP
// end ;
7048: GO 6871
7050: POP
7051: POP
// end ;
7052: LD_VAR 0 1
7056: RET
// export function PrepareApeman ; var bonus ; begin
7057: LD_INT 0
7059: PPUSH
7060: PPUSH
// uc_side := 0 ;
7061: LD_ADDR_OWVAR 20
7065: PUSH
7066: LD_INT 0
7068: ST_TO_ADDR
// uc_nation := 0 ;
7069: LD_ADDR_OWVAR 21
7073: PUSH
7074: LD_INT 0
7076: ST_TO_ADDR
// InitHc ;
7077: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
7081: LD_ADDR_VAR 0 2
7085: PUSH
7086: LD_INT 1
7088: NEG
7089: PUSH
7090: LD_INT 0
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 25
7103: PUSH
7104: LD_INT 12
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PPUSH
7111: CALL_OW 69
7115: PUSH
7116: LD_INT 3
7118: MOD
7119: PUSH
7120: LD_INT 1
7122: PLUS
7123: ARRAY
7124: ST_TO_ADDR
// hc_class := class_apeman ;
7125: LD_ADDR_OWVAR 28
7129: PUSH
7130: LD_INT 12
7132: ST_TO_ADDR
// hc_gallery :=  ;
7133: LD_ADDR_OWVAR 33
7137: PUSH
7138: LD_STRING 
7140: ST_TO_ADDR
// hc_name :=  ;
7141: LD_ADDR_OWVAR 26
7145: PUSH
7146: LD_STRING 
7148: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7149: LD_ADDR_OWVAR 31
7153: PUSH
7154: LD_EXP 37
7158: PUSH
7159: LD_VAR 0 2
7163: PLUS
7164: PUSH
7165: LD_EXP 37
7169: PUSH
7170: LD_VAR 0 2
7174: PLUS
7175: PUSH
7176: LD_EXP 37
7180: PUSH
7181: LD_VAR 0 2
7185: PLUS
7186: PUSH
7187: LD_EXP 37
7191: PUSH
7192: LD_VAR 0 2
7196: PLUS
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7204: LD_ADDR_OWVAR 35
7208: PUSH
7209: LD_INT 10
7211: PUSH
7212: LD_VAR 0 2
7216: MUL
7217: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7218: LD_ADDR_OWVAR 29
7222: PUSH
7223: LD_INT 12
7225: PUSH
7226: LD_INT 12
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: ST_TO_ADDR
// result := CreateHuman ;
7233: LD_ADDR_VAR 0 1
7237: PUSH
7238: CALL_OW 44
7242: ST_TO_ADDR
// end ;
7243: LD_VAR 0 1
7247: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7248: LD_INT 0
7250: PPUSH
7251: PPUSH
7252: PPUSH
// if not ape then
7253: LD_VAR 0 1
7257: NOT
7258: IFFALSE 7262
// exit ;
7260: GO 7387
// side := GetSide ( ape ) ;
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_VAR 0 1
7271: PPUSH
7272: CALL_OW 255
7276: ST_TO_ADDR
// if not side then
7277: LD_VAR 0 3
7281: NOT
7282: IFFALSE 7336
// begin for i = 1 to apemanPos do
7284: LD_ADDR_VAR 0 4
7288: PUSH
7289: DOUBLE
7290: LD_INT 1
7292: DEC
7293: ST_TO_ADDR
7294: LD_EXP 35
7298: PUSH
7299: FOR_TO
7300: IFFALSE 7334
// if ape in apemanPos [ i ] then
7302: LD_VAR 0 1
7306: PUSH
7307: LD_EXP 35
7311: PUSH
7312: LD_VAR 0 4
7316: ARRAY
7317: IN
7318: IFFALSE 7332
// begin side := i ;
7320: LD_ADDR_VAR 0 3
7324: PUSH
7325: LD_VAR 0 4
7329: ST_TO_ADDR
// break ;
7330: GO 7334
// end ;
7332: GO 7299
7334: POP
7335: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7336: LD_ADDR_EXP 35
7340: PUSH
7341: LD_EXP 35
7345: PPUSH
7346: LD_VAR 0 3
7350: PPUSH
7351: LD_EXP 35
7355: PUSH
7356: LD_VAR 0 3
7360: ARRAY
7361: PUSH
7362: LD_VAR 0 1
7366: DIFF
7367: PPUSH
7368: CALL_OW 1
7372: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7373: LD_ADDR_EXP 32
7377: PUSH
7378: LD_EXP 32
7382: PUSH
7383: LD_INT 1
7385: MINUS
7386: ST_TO_ADDR
// end ; end_of_file
7387: LD_VAR 0 2
7391: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7392: LD_VAR 0 1
7396: PPUSH
7397: CALL_OW 266
7401: PUSH
7402: LD_INT 0
7404: PUSH
7405: LD_INT 1
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: IN
7412: IFFALSE 7437
// SetBName ( b , @ & GetSide ( b ) ) ;
7414: LD_VAR 0 1
7418: PPUSH
7419: LD_STRING @
7421: PUSH
7422: LD_VAR 0 1
7426: PPUSH
7427: CALL_OW 255
7431: STR
7432: PPUSH
7433: CALL_OW 500
// if def_game_rules then
7437: LD_EXP 40
7441: IFFALSE 7478
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7443: LD_VAR 0 1
7447: PPUSH
7448: LD_VAR 0 1
7452: PPUSH
7453: CALL_OW 266
7457: PPUSH
7458: LD_VAR 0 1
7462: PPUSH
7463: CALL_OW 255
7467: PPUSH
7468: LD_INT 0
7470: PPUSH
7471: LD_INT 1
7473: PPUSH
7474: CALL 12301 0 5
// end ;
7478: PPOPN 2
7480: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7481: LD_VAR 0 1
7485: PPUSH
7486: CALL_OW 266
7490: PUSH
7491: LD_INT 0
7493: PUSH
7494: LD_INT 1
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: IN
7501: IFFALSE 7526
// SetBName ( b , @ & GetSide ( b ) ) ;
7503: LD_VAR 0 1
7507: PPUSH
7508: LD_STRING @
7510: PUSH
7511: LD_VAR 0 1
7515: PPUSH
7516: CALL_OW 255
7520: STR
7521: PPUSH
7522: CALL_OW 500
// if def_game_rules then
7526: LD_EXP 40
7530: IFFALSE 7569
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7532: LD_VAR 0 1
7536: PPUSH
7537: LD_VAR 0 1
7541: PPUSH
7542: CALL_OW 266
7546: PPUSH
7547: LD_VAR 0 1
7551: PPUSH
7552: CALL_OW 255
7556: PPUSH
7557: LD_VAR 0 2
7561: PPUSH
7562: LD_INT 1
7564: PPUSH
7565: CALL 12301 0 5
// end ;
7569: PPOPN 3
7571: END
// on VehicleConstructed ( veh , fac ) do var side ;
7572: LD_INT 0
7574: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 263
7584: PUSH
7585: LD_INT 5
7587: EQUAL
7588: IFFALSE 7730
// begin side := GetSide ( veh ) ;
7590: LD_ADDR_VAR 0 3
7594: PUSH
7595: LD_VAR 0 1
7599: PPUSH
7600: CALL_OW 255
7604: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7605: LD_ADDR_EXP 35
7609: PUSH
7610: LD_EXP 35
7614: PPUSH
7615: LD_VAR 0 3
7619: PPUSH
7620: LD_EXP 35
7624: PUSH
7625: LD_VAR 0 3
7629: ARRAY
7630: PPUSH
7631: LD_INT 52
7633: PUSH
7634: EMPTY
7635: LIST
7636: PPUSH
7637: CALL_OW 72
7641: PUSH
7642: LD_INT 22
7644: PUSH
7645: LD_VAR 0 3
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: LD_INT 2
7656: PUSH
7657: LD_INT 33
7659: PUSH
7660: LD_INT 5
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_INT 25
7669: PUSH
7670: LD_INT 12
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PUSH
7677: LD_INT 25
7679: PUSH
7680: LD_INT 15
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 25
7689: PUSH
7690: LD_INT 16
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 25
7699: PUSH
7700: LD_INT 17
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: PPUSH
7719: CALL_OW 69
7723: UNION
7724: PPUSH
7725: CALL_OW 1
7729: ST_TO_ADDR
// end ; end ;
7730: PPOPN 3
7732: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7733: LD_INT 0
7735: PPUSH
7736: PPUSH
7737: PPUSH
7738: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 257
7748: PUSH
7749: LD_INT 12
7751: PUSH
7752: LD_INT 15
7754: PUSH
7755: LD_INT 17
7757: PUSH
7758: LD_INT 16
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: IN
7767: PUSH
7768: LD_VAR 0 1
7772: PPUSH
7773: CALL_OW 263
7777: PUSH
7778: LD_INT 5
7780: EQUAL
7781: OR
7782: IFFALSE 7793
// ApeKilled ( j ) ;
7784: LD_VAR 0 1
7788: PPUSH
7789: CALL 7248 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7793: LD_VAR 0 1
7797: PPUSH
7798: CALL_OW 266
7802: PUSH
7803: LD_INT 0
7805: PUSH
7806: LD_INT 1
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: IN
7813: IFFALSE 7895
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7815: LD_ADDR_VAR 0 4
7819: PUSH
7820: LD_EXP 18
7824: PUSH
7825: LD_VAR 0 1
7829: PPUSH
7830: CALL_OW 255
7834: ARRAY
7835: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7836: LD_ADDR_VAR 0 2
7840: PUSH
7841: LD_EXP 24
7845: PUSH
7846: LD_VAR 0 4
7850: ARRAY
7851: PUSH
7852: LD_INT 1
7854: ARRAY
7855: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7856: LD_ADDR_VAR 0 3
7860: PUSH
7861: LD_EXP 24
7865: PUSH
7866: LD_VAR 0 4
7870: ARRAY
7871: PUSH
7872: LD_INT 2
7874: ARRAY
7875: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7876: LD_VAR 0 2
7880: PPUSH
7881: LD_VAR 0 3
7885: PPUSH
7886: CALL_OW 420
7890: PPUSH
7891: CALL_OW 419
// end ; if def_game_rules then
7895: LD_EXP 40
7899: IFFALSE 7998
// if ( GetType ( j ) = 3 ) then
7901: LD_VAR 0 1
7905: PPUSH
7906: CALL_OW 247
7910: PUSH
7911: LD_INT 3
7913: EQUAL
7914: IFFALSE 7954
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7916: LD_VAR 0 1
7920: PPUSH
7921: LD_VAR 0 1
7925: PPUSH
7926: CALL_OW 266
7930: PPUSH
7931: LD_VAR 0 1
7935: PPUSH
7936: CALL_OW 255
7940: PPUSH
7941: LD_INT 0
7943: PPUSH
7944: LD_INT 1
7946: NEG
7947: PPUSH
7948: CALL 12301 0 5
7952: GO 7998
// if ( GetChassis ( j ) = 25 ) then
7954: LD_VAR 0 1
7958: PPUSH
7959: CALL_OW 265
7963: PUSH
7964: LD_INT 25
7966: EQUAL
7967: IFFALSE 7998
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7969: LD_VAR 0 1
7973: PPUSH
7974: LD_INT 37
7976: PPUSH
7977: LD_VAR 0 1
7981: PPUSH
7982: CALL_OW 255
7986: PPUSH
7987: LD_INT 0
7989: PPUSH
7990: LD_INT 1
7992: NEG
7993: PPUSH
7994: CALL 12301 0 5
// end ;
7998: PPOPN 5
8000: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8001: LD_EXP 40
8005: PUSH
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 265
8015: PUSH
8016: LD_INT 25
8018: EQUAL
8019: AND
8020: IFFALSE 8052
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: LD_INT 37
8029: PPUSH
8030: LD_VAR 0 1
8034: PPUSH
8035: CALL_OW 255
8039: PPUSH
8040: LD_VAR 0 3
8044: PPUSH
8045: LD_INT 1
8047: PPUSH
8048: CALL 12301 0 5
// end ;
8052: PPOPN 4
8054: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8055: LD_VAR 0 1
8059: PPUSH
8060: LD_VAR 0 2
8064: PPUSH
8065: LD_VAR 0 3
8069: PPUSH
8070: LD_OWVAR 2
8074: PPUSH
8075: CALL 13072 0 4
8079: PPOPN 3
8081: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8082: GO 8084
8084: DISABLE
8085: LD_INT 0
8087: PPUSH
8088: PPUSH
8089: PPUSH
8090: PPUSH
8091: PPUSH
// begin sib_mined := [ ] ;
8092: LD_ADDR_VAR 0 5
8096: PUSH
8097: EMPTY
8098: ST_TO_ADDR
// for i := 1 to 8 do
8099: LD_ADDR_VAR 0 1
8103: PUSH
8104: DOUBLE
8105: LD_INT 1
8107: DEC
8108: ST_TO_ADDR
8109: LD_INT 8
8111: PUSH
8112: FOR_TO
8113: IFFALSE 8269
// if Side_Positions [ i ] then
8115: LD_EXP 18
8119: PUSH
8120: LD_VAR 0 1
8124: ARRAY
8125: IFFALSE 8253
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8127: LD_ADDR_VAR 0 4
8131: PUSH
8132: LD_INT 22
8134: PUSH
8135: LD_VAR 0 1
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: LD_INT 30
8149: PUSH
8150: LD_INT 0
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: LD_INT 30
8159: PUSH
8160: LD_INT 1
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PPUSH
8176: CALL_OW 69
8180: ST_TO_ADDR
// pom := 0 ;
8181: LD_ADDR_VAR 0 3
8185: PUSH
8186: LD_INT 0
8188: ST_TO_ADDR
// for base in filter do
8189: LD_ADDR_VAR 0 2
8193: PUSH
8194: LD_VAR 0 4
8198: PUSH
8199: FOR_IN
8200: IFFALSE 8233
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8202: LD_ADDR_VAR 0 3
8206: PUSH
8207: LD_VAR 0 3
8211: PUSH
8212: LD_VAR 0 2
8216: PPUSH
8217: CALL_OW 274
8221: PPUSH
8222: LD_INT 3
8224: PPUSH
8225: CALL_OW 275
8229: PLUS
8230: ST_TO_ADDR
8231: GO 8199
8233: POP
8234: POP
// sib_mined := sib_mined ^ pom ;
8235: LD_ADDR_VAR 0 5
8239: PUSH
8240: LD_VAR 0 5
8244: PUSH
8245: LD_VAR 0 3
8249: ADD
8250: ST_TO_ADDR
// end else
8251: GO 8267
// sib_mined := sib_mined ^ 0 ;
8253: LD_ADDR_VAR 0 5
8257: PUSH
8258: LD_VAR 0 5
8262: PUSH
8263: LD_INT 0
8265: ADD
8266: ST_TO_ADDR
8267: GO 8112
8269: POP
8270: POP
// if not def_public_score then
8271: LD_EXP 2
8275: NOT
8276: IFFALSE 8366
// begin ExtraStrings := [ ] ;
8278: LD_ADDR_EXP 56
8282: PUSH
8283: EMPTY
8284: ST_TO_ADDR
// for i := 1 to 8 do
8285: LD_ADDR_VAR 0 1
8289: PUSH
8290: DOUBLE
8291: LD_INT 1
8293: DEC
8294: ST_TO_ADDR
8295: LD_INT 8
8297: PUSH
8298: FOR_TO
8299: IFFALSE 8362
// if Side_Positions [ i ] then
8301: LD_EXP 18
8305: PUSH
8306: LD_VAR 0 1
8310: ARRAY
8311: IFFALSE 8360
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8313: LD_ADDR_EXP 56
8317: PUSH
8318: LD_EXP 56
8322: PUSH
8323: LD_STRING #AlienBase-MinedPublic
8325: PUSH
8326: LD_VAR 0 1
8330: PUSH
8331: LD_VAR 0 1
8335: PUSH
8336: LD_VAR 0 5
8340: PUSH
8341: LD_VAR 0 1
8345: ARRAY
8346: PUSH
8347: LD_EXP 11
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: ADD
8359: ST_TO_ADDR
8360: GO 8298
8362: POP
8363: POP
// end else
8364: GO 8395
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8366: LD_ADDR_EXP 56
8370: PUSH
8371: LD_STRING #AlienBase-Mined
8373: PUSH
8374: LD_VAR 0 5
8378: PUSH
8379: LD_OWVAR 2
8383: ARRAY
8384: PUSH
8385: LD_EXP 11
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: ST_TO_ADDR
// for i := 1 to 8 do
8395: LD_ADDR_VAR 0 1
8399: PUSH
8400: DOUBLE
8401: LD_INT 1
8403: DEC
8404: ST_TO_ADDR
8405: LD_INT 8
8407: PUSH
8408: FOR_TO
8409: IFFALSE 8479
// if sib_mined [ i ] >= amount_of_siberit then
8411: LD_VAR 0 5
8415: PUSH
8416: LD_VAR 0 1
8420: ARRAY
8421: PUSH
8422: LD_EXP 11
8426: GREATEREQUAL
8427: IFFALSE 8477
// begin wait ( 0 0$1 ) ;
8429: LD_INT 35
8431: PPUSH
8432: CALL_OW 67
// if IAmServer then
8436: CALL_OW 518
8440: IFFALSE 8449
// wait ( 0 0$1 ) ;
8442: LD_INT 35
8444: PPUSH
8445: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8449: LD_VAR 0 5
8453: PUSH
8454: LD_OWVAR 2
8458: ARRAY
8459: PUSH
8460: LD_EXP 11
8464: GREATEREQUAL
8465: IFFALSE 8473
// YouWinInMultiplayer else
8467: CALL_OW 106
8471: GO 8477
// YouLostInMultiplayer ;
8473: CALL_OW 107
// end ;
8477: GO 8408
8479: POP
8480: POP
// enable ;
8481: ENABLE
// end ; end_of_file
8482: PPOPN 5
8484: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8485: LD_INT 0
8487: PPUSH
8488: PPUSH
// for un in battle_flags_id do
8489: LD_ADDR_VAR 0 2
8493: PUSH
8494: LD_EXP 29
8498: PUSH
8499: FOR_IN
8500: IFFALSE 8575
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8502: LD_VAR 0 2
8506: PPUSH
8507: LD_INT 1
8509: PUSH
8510: LD_LOC 9
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: LD_INT 2
8521: PUSH
8522: LD_LOC 9
8526: PUSH
8527: LD_INT 2
8529: DIV
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: LD_LOC 9
8542: PUSH
8543: LD_INT 5
8545: DIV
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 20
8553: PUSH
8554: LD_LOC 9
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PPUSH
8569: CALL_OW 423
8573: GO 8499
8575: POP
8576: POP
// end ;
8577: LD_VAR 0 1
8581: RET
// every 1 do var un ;
8582: GO 8584
8584: DISABLE
8585: LD_INT 0
8587: PPUSH
// begin if not def_morale_flags then
8588: LD_EXP 49
8592: NOT
8593: IFFALSE 8597
// exit ;
8595: GO 8674
// if not morale_decreasing_time then
8597: LD_EXP 10
8601: NOT
8602: IFFALSE 8606
// exit ;
8604: GO 8674
// strength = 100 ;
8606: LD_ADDR_LOC 9
8610: PUSH
8611: LD_INT 100
8613: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8614: LD_EXP 10
8618: PPUSH
8619: CALL_OW 67
// strength := strength - 1 ;
8623: LD_ADDR_LOC 9
8627: PUSH
8628: LD_LOC 9
8632: PUSH
8633: LD_INT 1
8635: MINUS
8636: ST_TO_ADDR
// Update_Flags ;
8637: CALL 8485 0 0
// until not strength ;
8641: LD_LOC 9
8645: NOT
8646: IFFALSE 8614
// for un in battle_flags_id do
8648: LD_ADDR_VAR 0 1
8652: PUSH
8653: LD_EXP 29
8657: PUSH
8658: FOR_IN
8659: IFFALSE 8672
// KillBattleFlag ( un ) ;
8661: LD_VAR 0 1
8665: PPUSH
8666: CALL_OW 419
8670: GO 8658
8672: POP
8673: POP
// end ; end_of_file
8674: PPOPN 1
8676: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
8677: GO 8679
8679: DISABLE
8680: LD_INT 0
8682: PPUSH
// begin enable ;
8683: ENABLE
// for x := 1 to 8 do
8684: LD_ADDR_VAR 0 1
8688: PUSH
8689: DOUBLE
8690: LD_INT 1
8692: DEC
8693: ST_TO_ADDR
8694: LD_INT 8
8696: PUSH
8697: FOR_TO
8698: IFFALSE 8782
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
8700: LD_LOC 16
8704: PUSH
8705: LD_VAR 0 1
8709: ARRAY
8710: PUSH
8711: LD_INT 5
8713: GREATER
8714: PUSH
8715: LD_LOC 14
8719: PUSH
8720: LD_VAR 0 1
8724: ARRAY
8725: PUSH
8726: LD_INT 1
8728: NEG
8729: EQUAL
8730: AND
8731: IFFALSE 8780
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
8733: LD_ADDR_LOC 15
8737: PUSH
8738: LD_LOC 15
8742: PPUSH
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_LOC 15
8752: PUSH
8753: LD_VAR 0 1
8757: ARRAY
8758: PUSH
8759: LD_INT 6
8761: PLUS
8762: PPUSH
8763: CALL_OW 1
8767: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
8768: LD_VAR 0 1
8772: PPUSH
8773: LD_INT 0
8775: PPUSH
8776: CALL 8954 0 2
// end ;
8780: GO 8697
8782: POP
8783: POP
// end ;
8784: PPOPN 1
8786: END
// every 0 0$1 marked 200 do var BGL , x ;
8787: GO 8789
8789: DISABLE
8790: LD_INT 0
8792: PPUSH
8793: PPUSH
// begin enable ;
8794: ENABLE
// for x := 1 to 8 do
8795: LD_ADDR_VAR 0 2
8799: PUSH
8800: DOUBLE
8801: LD_INT 1
8803: DEC
8804: ST_TO_ADDR
8805: LD_INT 8
8807: PUSH
8808: FOR_TO
8809: IFFALSE 8940
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
8811: LD_LOC 14
8815: PUSH
8816: LD_VAR 0 2
8820: ARRAY
8821: PUSH
8822: LD_INT 1
8824: NEG
8825: GREATER
8826: PUSH
8827: LD_LOC 14
8831: PUSH
8832: LD_VAR 0 2
8836: ARRAY
8837: PPUSH
8838: CALL_OW 300
8842: AND
8843: IFFALSE 8938
// begin BGL := GetLives ( BloodGods [ x ] ) ;
8845: LD_ADDR_VAR 0 1
8849: PUSH
8850: LD_LOC 14
8854: PUSH
8855: LD_VAR 0 2
8859: ARRAY
8860: PPUSH
8861: CALL_OW 256
8865: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
8866: LD_VAR 0 1
8870: PUSH
8871: LD_INT 1000
8873: LESS
8874: PUSH
8875: LD_VAR 0 1
8879: PUSH
8880: LD_INT 100
8882: GREATER
8883: AND
8884: IFFALSE 8938
// begin BGL := BGL + 10 ;
8886: LD_ADDR_VAR 0 1
8890: PUSH
8891: LD_VAR 0 1
8895: PUSH
8896: LD_INT 10
8898: PLUS
8899: ST_TO_ADDR
// if BGL > 1000 then
8900: LD_VAR 0 1
8904: PUSH
8905: LD_INT 1000
8907: GREATER
8908: IFFALSE 8918
// BGL := 1000 ;
8910: LD_ADDR_VAR 0 1
8914: PUSH
8915: LD_INT 1000
8917: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
8918: LD_LOC 14
8922: PUSH
8923: LD_VAR 0 2
8927: ARRAY
8928: PPUSH
8929: LD_VAR 0 1
8933: PPUSH
8934: CALL_OW 234
// end ; end ;
8938: GO 8808
8940: POP
8941: POP
// end ;
8942: PPOPN 2
8944: END
// every 0 0$1 marked 200 do
8945: GO 8947
8947: DISABLE
// begin DisplayTimeWithKills ;
8948: CALL 9195 0 0
// enable ;
8952: ENABLE
// end ;
8953: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
8954: LD_INT 0
8956: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
8957: LD_ADDR_OWVAR 24
8961: PUSH
8962: LD_INT 0
8964: PPUSH
8965: LD_INT 5
8967: PPUSH
8968: CALL_OW 12
8972: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
8973: LD_INT 1
8975: PPUSH
8976: LD_INT 1
8978: PPUSH
8979: LD_INT 15
8981: PPUSH
8982: CALL_OW 380
// hc_importance := 106 ;
8986: LD_ADDR_OWVAR 32
8990: PUSH
8991: LD_INT 106
8993: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
8994: LD_ADDR_OWVAR 26
8998: PUSH
8999: LD_STRING Blood God of 
9001: PUSH
9002: LD_OWVAR 19
9006: PUSH
9007: LD_VAR 0 1
9011: ARRAY
9012: STR
9013: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
9014: LD_ADDR_OWVAR 21
9018: PUSH
9019: LD_EXP 19
9023: PUSH
9024: LD_VAR 0 1
9028: ARRAY
9029: ST_TO_ADDR
// uc_side := side ;
9030: LD_ADDR_OWVAR 20
9034: PUSH
9035: LD_VAR 0 1
9039: ST_TO_ADDR
// hc_noskilllimit := true ;
9040: LD_ADDR_OWVAR 76
9044: PUSH
9045: LD_INT 1
9047: ST_TO_ADDR
// hc_agressivity := 50 ;
9048: LD_ADDR_OWVAR 35
9052: PUSH
9053: LD_INT 50
9055: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
9056: LD_ADDR_LOC 14
9060: PUSH
9061: LD_LOC 14
9065: PPUSH
9066: LD_VAR 0 1
9070: PPUSH
9071: CALL_OW 44
9075: PPUSH
9076: CALL_OW 1
9080: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
9081: LD_LOC 14
9085: PUSH
9086: LD_VAR 0 1
9090: ARRAY
9091: PPUSH
9092: LD_LOC 17
9096: PUSH
9097: LD_EXP 18
9101: PUSH
9102: LD_VAR 0 1
9106: ARRAY
9107: ARRAY
9108: PUSH
9109: LD_INT 1
9111: ARRAY
9112: PPUSH
9113: LD_LOC 17
9117: PUSH
9118: LD_EXP 18
9122: PUSH
9123: LD_VAR 0 1
9127: ARRAY
9128: ARRAY
9129: PUSH
9130: LD_INT 2
9132: ARRAY
9133: PPUSH
9134: LD_INT 10
9136: PPUSH
9137: LD_INT 0
9139: PPUSH
9140: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
9144: LD_LOC 14
9148: PUSH
9149: LD_VAR 0 1
9153: ARRAY
9154: PPUSH
9155: LD_INT 1
9157: PPUSH
9158: LD_INT 300
9160: PPUSH
9161: CALL_OW 239
// if not NoDialog then
9165: LD_VAR 0 2
9169: NOT
9170: IFFALSE 9190
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
9172: LD_LOC 14
9176: PUSH
9177: LD_VAR 0 1
9181: ARRAY
9182: PPUSH
9183: LD_STRING DLAwaken
9185: PPUSH
9186: CALL_OW 94
// end ;
9190: LD_VAR 0 3
9194: RET
// function DisplayTimeWithKills ; var x ; begin
9195: LD_INT 0
9197: PPUSH
9198: PPUSH
// ExtraStrings :=  ;
9199: LD_ADDR_EXP 56
9203: PUSH
9204: LD_STRING 
9206: ST_TO_ADDR
// for x = 1 to Side_Positions do
9207: LD_ADDR_VAR 0 2
9211: PUSH
9212: DOUBLE
9213: LD_INT 1
9215: DEC
9216: ST_TO_ADDR
9217: LD_EXP 18
9221: PUSH
9222: FOR_TO
9223: IFFALSE 9456
// if Side_Positions [ x ] then
9225: LD_EXP 18
9229: PUSH
9230: LD_VAR 0 2
9234: ARRAY
9235: IFFALSE 9454
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
9237: LD_ADDR_LOC 16
9241: PUSH
9242: LD_LOC 16
9246: PPUSH
9247: LD_VAR 0 2
9251: PPUSH
9252: LD_VAR 0 2
9256: PPUSH
9257: CALL_OW 515
9261: PUSH
9262: LD_LOC 15
9266: PUSH
9267: LD_VAR 0 2
9271: ARRAY
9272: MINUS
9273: PPUSH
9274: CALL_OW 1
9278: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
9279: LD_LOC 14
9283: PUSH
9284: LD_VAR 0 2
9288: ARRAY
9289: PUSH
9290: LD_INT 1
9292: NEG
9293: GREATER
9294: PUSH
9295: LD_LOC 14
9299: PUSH
9300: LD_VAR 0 2
9304: ARRAY
9305: PPUSH
9306: CALL_OW 300
9310: AND
9311: IFFALSE 9344
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
9313: LD_ADDR_EXP 56
9317: PUSH
9318: LD_EXP 56
9322: PUSH
9323: LD_STRING #godawoken
9325: PUSH
9326: LD_VAR 0 2
9330: PUSH
9331: LD_VAR 0 2
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: ADD
9341: ST_TO_ADDR
9342: GO 9454
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
9344: LD_LOC 14
9348: PUSH
9349: LD_VAR 0 2
9353: ARRAY
9354: PUSH
9355: LD_INT 1
9357: NEG
9358: GREATER
9359: PUSH
9360: LD_LOC 14
9364: PUSH
9365: LD_VAR 0 2
9369: ARRAY
9370: PPUSH
9371: CALL_OW 301
9375: AND
9376: IFFALSE 9409
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
9378: LD_ADDR_EXP 56
9382: PUSH
9383: LD_EXP 56
9387: PUSH
9388: LD_STRING #goddied
9390: PUSH
9391: LD_VAR 0 2
9395: PUSH
9396: LD_VAR 0 2
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: ADD
9406: ST_TO_ADDR
9407: GO 9454
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
9409: LD_ADDR_EXP 56
9413: PUSH
9414: LD_EXP 56
9418: PUSH
9419: LD_STRING #godssacrifise
9421: PUSH
9422: LD_VAR 0 2
9426: PUSH
9427: LD_VAR 0 2
9431: PUSH
9432: LD_LOC 16
9436: PUSH
9437: LD_VAR 0 2
9441: ARRAY
9442: PUSH
9443: LD_INT 6
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: ADD
9453: ST_TO_ADDR
9454: GO 9222
9456: POP
9457: POP
// end ;
9458: LD_VAR 0 1
9462: RET
// export function InitBloodGods ; begin
9463: LD_INT 0
9465: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
9466: LD_ADDR_LOC 14
9470: PUSH
9471: LD_INT 1
9473: NEG
9474: PUSH
9475: LD_INT 1
9477: NEG
9478: PUSH
9479: LD_INT 1
9481: NEG
9482: PUSH
9483: LD_INT 1
9485: NEG
9486: PUSH
9487: LD_INT 1
9489: NEG
9490: PUSH
9491: LD_INT 1
9493: NEG
9494: PUSH
9495: LD_INT 1
9497: NEG
9498: PUSH
9499: LD_INT 1
9501: NEG
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9513: LD_ADDR_LOC 15
9517: PUSH
9518: LD_INT 0
9520: PUSH
9521: LD_INT 0
9523: PUSH
9524: LD_INT 0
9526: PUSH
9527: LD_INT 0
9529: PUSH
9530: LD_INT 0
9532: PUSH
9533: LD_INT 0
9535: PUSH
9536: LD_INT 0
9538: PUSH
9539: LD_INT 0
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9552: LD_ADDR_LOC 16
9556: PUSH
9557: LD_INT 0
9559: PUSH
9560: LD_INT 0
9562: PUSH
9563: LD_INT 0
9565: PUSH
9566: LD_INT 0
9568: PUSH
9569: LD_INT 0
9571: PUSH
9572: LD_INT 0
9574: PUSH
9575: LD_INT 0
9577: PUSH
9578: LD_INT 0
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
9591: LD_ADDR_LOC 17
9595: PUSH
9596: LD_INT 60
9598: PUSH
9599: LD_INT 47
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 82
9608: PUSH
9609: LD_INT 26
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 124
9618: PUSH
9619: LD_INT 45
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 147
9628: PUSH
9629: LD_INT 90
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: LD_INT 126
9638: PUSH
9639: LD_INT 112
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: PUSH
9646: LD_INT 84
9648: PUSH
9649: LD_INT 92
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 106
9658: PUSH
9659: LD_INT 73
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 106
9668: PUSH
9669: LD_INT 73
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: ST_TO_ADDR
// ClearHumansKilled ;
9686: CALL_OW 516
// enable ( 200 ) ;
9690: LD_INT 200
9692: ENABLE_MARKED
// end ; end_of_file
9693: LD_VAR 0 1
9697: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
9698: LD_INT 0
9700: PPUSH
9701: PPUSH
// if ( not IAmSpec ) then
9702: CALL_OW 531
9706: NOT
9707: IFFALSE 9723
// Result := Limits_Info ^  ;
9709: LD_ADDR_VAR 0 1
9713: PUSH
9714: LD_LOC 25
9718: PUSH
9719: LD_STRING 
9721: ADD
9722: ST_TO_ADDR
// for i := 1 to 8 do
9723: LD_ADDR_VAR 0 2
9727: PUSH
9728: DOUBLE
9729: LD_INT 1
9731: DEC
9732: ST_TO_ADDR
9733: LD_INT 8
9735: PUSH
9736: FOR_TO
9737: IFFALSE 9782
// if Cheaters [ i ] then
9739: LD_LOC 26
9743: PUSH
9744: LD_VAR 0 2
9748: ARRAY
9749: IFFALSE 9780
// Result := Result ^ [ #Cheater , i , i ] ;
9751: LD_ADDR_VAR 0 1
9755: PUSH
9756: LD_VAR 0 1
9760: PUSH
9761: LD_STRING #Cheater
9763: PUSH
9764: LD_VAR 0 2
9768: PUSH
9769: LD_VAR 0 2
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: LIST
9778: ADD
9779: ST_TO_ADDR
9780: GO 9736
9782: POP
9783: POP
// end ;
9784: LD_VAR 0 1
9788: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9789: LD_INT 0
9791: PPUSH
9792: PPUSH
9793: PPUSH
9794: PPUSH
9795: PPUSH
// if game_type in [ 10 , 11 ] then
9796: LD_EXP 39
9800: PUSH
9801: LD_INT 10
9803: PUSH
9804: LD_INT 11
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: IN
9811: IFFALSE 9827
// def_game_rules = def_game_rules + 1 ;
9813: LD_ADDR_EXP 40
9817: PUSH
9818: LD_EXP 40
9822: PUSH
9823: LD_INT 1
9825: PLUS
9826: ST_TO_ADDR
// case def_game_rules of 0 :
9827: LD_EXP 40
9831: PUSH
9832: LD_INT 0
9834: DOUBLE
9835: EQUAL
9836: IFTRUE 9840
9838: GO 9845
9840: POP
// exit ; 1 :
9841: GO 11895
9843: GO 11795
9845: LD_INT 1
9847: DOUBLE
9848: EQUAL
9849: IFTRUE 9853
9851: GO 10069
9853: POP
// begin def_base_level := 2 ;
9854: LD_ADDR_EXP 41
9858: PUSH
9859: LD_INT 2
9861: ST_TO_ADDR
// def_amount_of_people := 11 ;
9862: LD_ADDR_EXP 42
9866: PUSH
9867: LD_INT 11
9869: ST_TO_ADDR
// def_skill_level := 1 ;
9870: LD_ADDR_EXP 43
9874: PUSH
9875: LD_INT 1
9877: ST_TO_ADDR
// def_starting_resources := 2 ;
9878: LD_ADDR_EXP 44
9882: PUSH
9883: LD_INT 2
9885: ST_TO_ADDR
// def_shipments_density := 26 ;
9886: LD_ADDR_EXP 45
9890: PUSH
9891: LD_INT 26
9893: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9894: LD_ADDR_EXP 46
9898: PUSH
9899: LD_INT 0
9901: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9902: LD_ADDR_EXP 47
9906: PUSH
9907: LD_INT 1
9909: ST_TO_ADDR
// def_shared_vision := 1 ;
9910: LD_ADDR_EXP 48
9914: PUSH
9915: LD_INT 1
9917: ST_TO_ADDR
// def_morale_flags := 3 ;
9918: LD_ADDR_EXP 49
9922: PUSH
9923: LD_INT 3
9925: ST_TO_ADDR
// def_siberite_detection := 1 ;
9926: LD_ADDR_EXP 50
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// def_people_respawning := 1 ;
9934: LD_ADDR_EXP 51
9938: PUSH
9939: LD_INT 1
9941: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9942: LD_ADDR_EXP 52
9946: PUSH
9947: LD_INT 1
9949: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9950: LD_ADDR_EXP 53
9954: PUSH
9955: LD_INT 0
9957: ST_TO_ADDR
// def_builduptime := 6 ;
9958: LD_ADDR_EXP 54
9962: PUSH
9963: LD_INT 6
9965: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9966: LD_ADDR_VAR 0 2
9970: PUSH
9971: EMPTY
9972: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9973: LD_ADDR_VAR 0 3
9977: PUSH
9978: EMPTY
9979: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9980: LD_ADDR_LOC 20
9984: PUSH
9985: EMPTY
9986: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9987: LD_ADDR_LOC 21
9991: PUSH
9992: EMPTY
9993: ST_TO_ADDR
// Banned_Controls := [ ] ;
9994: LD_ADDR_LOC 22
9998: PUSH
9999: EMPTY
10000: ST_TO_ADDR
// Banned_Engines := [ ] ;
10001: LD_ADDR_LOC 23
10005: PUSH
10006: EMPTY
10007: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10008: LD_ADDR_LOC 18
10012: PUSH
10013: LD_INT 37
10015: PUSH
10016: EMPTY
10017: LIST
10018: PUSH
10019: LD_INT 4
10021: PUSH
10022: LD_INT 5
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: LD_INT 31
10031: PUSH
10032: LD_INT 32
10034: PUSH
10035: LD_INT 33
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: LIST
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: LIST
10047: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
10048: LD_ADDR_LOC 19
10052: PUSH
10053: LD_INT 2
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: LD_INT 4
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: LIST
10066: ST_TO_ADDR
// end ; 2 :
10067: GO 11795
10069: LD_INT 2
10071: DOUBLE
10072: EQUAL
10073: IFTRUE 10077
10075: GO 10286
10077: POP
// begin def_base_level := 1 ;
10078: LD_ADDR_EXP 41
10082: PUSH
10083: LD_INT 1
10085: ST_TO_ADDR
// def_amount_of_people := 11 ;
10086: LD_ADDR_EXP 42
10090: PUSH
10091: LD_INT 11
10093: ST_TO_ADDR
// def_skill_level := 3 ;
10094: LD_ADDR_EXP 43
10098: PUSH
10099: LD_INT 3
10101: ST_TO_ADDR
// def_starting_resources := 3 ;
10102: LD_ADDR_EXP 44
10106: PUSH
10107: LD_INT 3
10109: ST_TO_ADDR
// def_shipments_density := 51 ;
10110: LD_ADDR_EXP 45
10114: PUSH
10115: LD_INT 51
10117: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10118: LD_ADDR_EXP 46
10122: PUSH
10123: LD_INT 1
10125: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10126: LD_ADDR_EXP 47
10130: PUSH
10131: LD_INT 2
10133: ST_TO_ADDR
// def_shared_vision := 1 ;
10134: LD_ADDR_EXP 48
10138: PUSH
10139: LD_INT 1
10141: ST_TO_ADDR
// def_morale_flags := 0 ;
10142: LD_ADDR_EXP 49
10146: PUSH
10147: LD_INT 0
10149: ST_TO_ADDR
// def_siberite_detection := 1 ;
10150: LD_ADDR_EXP 50
10154: PUSH
10155: LD_INT 1
10157: ST_TO_ADDR
// def_people_respawning := 0 ;
10158: LD_ADDR_EXP 51
10162: PUSH
10163: LD_INT 0
10165: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10166: LD_ADDR_EXP 52
10170: PUSH
10171: LD_INT 0
10173: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10174: LD_ADDR_EXP 53
10178: PUSH
10179: LD_INT 0
10181: ST_TO_ADDR
// def_builduptime := 6 ;
10182: LD_ADDR_EXP 54
10186: PUSH
10187: LD_INT 6
10189: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10190: LD_ADDR_VAR 0 2
10194: PUSH
10195: LD_INT 1
10197: PUSH
10198: EMPTY
10199: LIST
10200: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10201: LD_ADDR_VAR 0 3
10205: PUSH
10206: EMPTY
10207: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10208: LD_ADDR_LOC 20
10212: PUSH
10213: EMPTY
10214: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10215: LD_ADDR_LOC 21
10219: PUSH
10220: EMPTY
10221: ST_TO_ADDR
// Banned_Controls := [ ] ;
10222: LD_ADDR_LOC 22
10226: PUSH
10227: EMPTY
10228: ST_TO_ADDR
// Banned_Engines := [ ] ;
10229: LD_ADDR_LOC 23
10233: PUSH
10234: EMPTY
10235: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10236: LD_ADDR_LOC 18
10240: PUSH
10241: LD_INT 4
10243: PUSH
10244: LD_INT 5
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: LD_INT 31
10253: PUSH
10254: LD_INT 32
10256: PUSH
10257: LD_INT 33
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: LIST
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
10269: LD_ADDR_LOC 19
10273: PUSH
10274: LD_INT 1
10276: PUSH
10277: LD_INT 2
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: ST_TO_ADDR
// end ; 3 :
10284: GO 11795
10286: LD_INT 3
10288: DOUBLE
10289: EQUAL
10290: IFTRUE 10294
10292: GO 10537
10294: POP
// begin def_base_level := 1 ;
10295: LD_ADDR_EXP 41
10299: PUSH
10300: LD_INT 1
10302: ST_TO_ADDR
// def_amount_of_people := 11 ;
10303: LD_ADDR_EXP 42
10307: PUSH
10308: LD_INT 11
10310: ST_TO_ADDR
// def_skill_level := 3 ;
10311: LD_ADDR_EXP 43
10315: PUSH
10316: LD_INT 3
10318: ST_TO_ADDR
// def_starting_resources := 3 ;
10319: LD_ADDR_EXP 44
10323: PUSH
10324: LD_INT 3
10326: ST_TO_ADDR
// def_shipments_density := 1 ;
10327: LD_ADDR_EXP 45
10331: PUSH
10332: LD_INT 1
10334: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10335: LD_ADDR_EXP 46
10339: PUSH
10340: LD_INT 0
10342: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10343: LD_ADDR_EXP 47
10347: PUSH
10348: LD_INT 1
10350: ST_TO_ADDR
// def_shared_vision := 1 ;
10351: LD_ADDR_EXP 48
10355: PUSH
10356: LD_INT 1
10358: ST_TO_ADDR
// def_morale_flags := 0 ;
10359: LD_ADDR_EXP 49
10363: PUSH
10364: LD_INT 0
10366: ST_TO_ADDR
// def_siberite_detection := 1 ;
10367: LD_ADDR_EXP 50
10371: PUSH
10372: LD_INT 1
10374: ST_TO_ADDR
// def_people_respawning := 0 ;
10375: LD_ADDR_EXP 51
10379: PUSH
10380: LD_INT 0
10382: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10383: LD_ADDR_EXP 52
10387: PUSH
10388: LD_INT 2
10390: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10391: LD_ADDR_EXP 53
10395: PUSH
10396: LD_INT 0
10398: ST_TO_ADDR
// def_builduptime := 6 ;
10399: LD_ADDR_EXP 54
10403: PUSH
10404: LD_INT 6
10406: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10407: LD_ADDR_VAR 0 2
10411: PUSH
10412: LD_INT 23
10414: PUSH
10415: EMPTY
10416: LIST
10417: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
10418: LD_ADDR_VAR 0 3
10422: PUSH
10423: LD_INT 2
10425: PUSH
10426: LD_INT 37
10428: PUSH
10429: LD_INT 32
10431: PUSH
10432: LD_INT 33
10434: PUSH
10435: LD_INT 36
10437: PUSH
10438: LD_INT 16
10440: PUSH
10441: LD_INT 23
10443: PUSH
10444: LD_INT 21
10446: PUSH
10447: LD_INT 18
10449: PUSH
10450: LD_INT 22
10452: PUSH
10453: LD_INT 20
10455: PUSH
10456: LD_INT 19
10458: PUSH
10459: LD_INT 25
10461: PUSH
10462: LD_INT 17
10464: PUSH
10465: LD_INT 24
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10485: LD_ADDR_LOC 20
10489: PUSH
10490: EMPTY
10491: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10492: LD_ADDR_LOC 21
10496: PUSH
10497: EMPTY
10498: ST_TO_ADDR
// Banned_Controls := [ ] ;
10499: LD_ADDR_LOC 22
10503: PUSH
10504: EMPTY
10505: ST_TO_ADDR
// Banned_Engines := [ ] ;
10506: LD_ADDR_LOC 23
10510: PUSH
10511: EMPTY
10512: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10513: LD_ADDR_LOC 18
10517: PUSH
10518: EMPTY
10519: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10520: LD_ADDR_LOC 19
10524: PUSH
10525: EMPTY
10526: ST_TO_ADDR
// No_Mechs := true ;
10527: LD_ADDR_EXP 55
10531: PUSH
10532: LD_INT 1
10534: ST_TO_ADDR
// end ; 4 :
10535: GO 11795
10537: LD_INT 4
10539: DOUBLE
10540: EQUAL
10541: IFTRUE 10545
10543: GO 10720
10545: POP
// begin def_base_level := 1 ;
10546: LD_ADDR_EXP 41
10550: PUSH
10551: LD_INT 1
10553: ST_TO_ADDR
// def_amount_of_people := 11 ;
10554: LD_ADDR_EXP 42
10558: PUSH
10559: LD_INT 11
10561: ST_TO_ADDR
// def_skill_level := 3 ;
10562: LD_ADDR_EXP 43
10566: PUSH
10567: LD_INT 3
10569: ST_TO_ADDR
// def_starting_resources := 3 ;
10570: LD_ADDR_EXP 44
10574: PUSH
10575: LD_INT 3
10577: ST_TO_ADDR
// def_shipments_density := 2 ;
10578: LD_ADDR_EXP 45
10582: PUSH
10583: LD_INT 2
10585: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10586: LD_ADDR_EXP 46
10590: PUSH
10591: LD_INT 1
10593: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10594: LD_ADDR_EXP 47
10598: PUSH
10599: LD_INT 2
10601: ST_TO_ADDR
// def_shared_vision := 1 ;
10602: LD_ADDR_EXP 48
10606: PUSH
10607: LD_INT 1
10609: ST_TO_ADDR
// def_morale_flags := 0 ;
10610: LD_ADDR_EXP 49
10614: PUSH
10615: LD_INT 0
10617: ST_TO_ADDR
// def_siberite_detection := 1 ;
10618: LD_ADDR_EXP 50
10622: PUSH
10623: LD_INT 1
10625: ST_TO_ADDR
// def_people_respawning := 0 ;
10626: LD_ADDR_EXP 51
10630: PUSH
10631: LD_INT 0
10633: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10634: LD_ADDR_EXP 52
10638: PUSH
10639: LD_INT 0
10641: ST_TO_ADDR
// def_siberite_bomb := 1 ;
10642: LD_ADDR_EXP 53
10646: PUSH
10647: LD_INT 1
10649: ST_TO_ADDR
// def_builduptime := 11 ;
10650: LD_ADDR_EXP 54
10654: PUSH
10655: LD_INT 11
10657: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10658: LD_ADDR_VAR 0 2
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10669: LD_ADDR_VAR 0 3
10673: PUSH
10674: EMPTY
10675: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10676: LD_ADDR_LOC 20
10680: PUSH
10681: EMPTY
10682: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10683: LD_ADDR_LOC 21
10687: PUSH
10688: EMPTY
10689: ST_TO_ADDR
// Banned_Controls := [ ] ;
10690: LD_ADDR_LOC 22
10694: PUSH
10695: EMPTY
10696: ST_TO_ADDR
// Banned_Engines := [ ] ;
10697: LD_ADDR_LOC 23
10701: PUSH
10702: EMPTY
10703: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10704: LD_ADDR_LOC 18
10708: PUSH
10709: EMPTY
10710: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10711: LD_ADDR_LOC 19
10715: PUSH
10716: EMPTY
10717: ST_TO_ADDR
// end ; 5 :
10718: GO 11795
10720: LD_INT 5
10722: DOUBLE
10723: EQUAL
10724: IFTRUE 10728
10726: GO 10977
10728: POP
// begin def_base_level := 0 ;
10729: LD_ADDR_EXP 41
10733: PUSH
10734: LD_INT 0
10736: ST_TO_ADDR
// def_amount_of_people := 5 ;
10737: LD_ADDR_EXP 42
10741: PUSH
10742: LD_INT 5
10744: ST_TO_ADDR
// def_skill_level := 0 ;
10745: LD_ADDR_EXP 43
10749: PUSH
10750: LD_INT 0
10752: ST_TO_ADDR
// def_starting_resources := 0 ;
10753: LD_ADDR_EXP 44
10757: PUSH
10758: LD_INT 0
10760: ST_TO_ADDR
// def_shipments_density := 0 ;
10761: LD_ADDR_EXP 45
10765: PUSH
10766: LD_INT 0
10768: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10769: LD_ADDR_EXP 46
10773: PUSH
10774: LD_INT 0
10776: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10777: LD_ADDR_EXP 47
10781: PUSH
10782: LD_INT 0
10784: ST_TO_ADDR
// def_shared_vision := 1 ;
10785: LD_ADDR_EXP 48
10789: PUSH
10790: LD_INT 1
10792: ST_TO_ADDR
// def_morale_flags := 0 ;
10793: LD_ADDR_EXP 49
10797: PUSH
10798: LD_INT 0
10800: ST_TO_ADDR
// def_siberite_detection := 0 ;
10801: LD_ADDR_EXP 50
10805: PUSH
10806: LD_INT 0
10808: ST_TO_ADDR
// def_people_respawning := 1 ;
10809: LD_ADDR_EXP 51
10813: PUSH
10814: LD_INT 1
10816: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10817: LD_ADDR_EXP 52
10821: PUSH
10822: LD_INT 1
10824: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10825: LD_ADDR_EXP 53
10829: PUSH
10830: LD_INT 0
10832: ST_TO_ADDR
// def_builduptime := 0 ;
10833: LD_ADDR_EXP 54
10837: PUSH
10838: LD_INT 0
10840: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10841: LD_ADDR_VAR 0 2
10845: PUSH
10846: LD_INT 10
10848: PUSH
10849: LD_INT 3
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10856: LD_ADDR_VAR 0 3
10860: PUSH
10861: LD_INT 12
10863: PUSH
10864: LD_INT 11
10866: PUSH
10867: LD_INT 14
10869: PUSH
10870: LD_INT 13
10872: PUSH
10873: LD_INT 5
10875: PUSH
10876: LD_INT 24
10878: PUSH
10879: LD_INT 21
10881: PUSH
10882: LD_INT 33
10884: PUSH
10885: LD_INT 36
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10899: LD_ADDR_LOC 20
10903: PUSH
10904: LD_INT 31
10906: PUSH
10907: EMPTY
10908: LIST
10909: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10910: LD_ADDR_LOC 21
10914: PUSH
10915: EMPTY
10916: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10917: LD_ADDR_LOC 22
10921: PUSH
10922: LD_INT 2
10924: PUSH
10925: EMPTY
10926: LIST
10927: ST_TO_ADDR
// Banned_Engines := [ ] ;
10928: LD_ADDR_LOC 23
10932: PUSH
10933: EMPTY
10934: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10935: LD_ADDR_LOC 18
10939: PUSH
10940: LD_INT 4
10942: PUSH
10943: EMPTY
10944: LIST
10945: PUSH
10946: LD_INT 31
10948: PUSH
10949: LD_INT 32
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10960: LD_ADDR_LOC 19
10964: PUSH
10965: LD_INT 1
10967: PUSH
10968: LD_INT 1
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: ST_TO_ADDR
// end ; 6 :
10975: GO 11795
10977: LD_INT 6
10979: DOUBLE
10980: EQUAL
10981: IFTRUE 10985
10983: GO 11188
10985: POP
// begin def_base_level := 1 ;
10986: LD_ADDR_EXP 41
10990: PUSH
10991: LD_INT 1
10993: ST_TO_ADDR
// def_amount_of_people := 11 ;
10994: LD_ADDR_EXP 42
10998: PUSH
10999: LD_INT 11
11001: ST_TO_ADDR
// def_skill_level := 3 ;
11002: LD_ADDR_EXP 43
11006: PUSH
11007: LD_INT 3
11009: ST_TO_ADDR
// def_starting_resources := 3 ;
11010: LD_ADDR_EXP 44
11014: PUSH
11015: LD_INT 3
11017: ST_TO_ADDR
// def_shipments_density := 1 ;
11018: LD_ADDR_EXP 45
11022: PUSH
11023: LD_INT 1
11025: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11026: LD_ADDR_EXP 46
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11034: LD_ADDR_EXP 47
11038: PUSH
11039: LD_INT 1
11041: ST_TO_ADDR
// def_shared_vision := 1 ;
11042: LD_ADDR_EXP 48
11046: PUSH
11047: LD_INT 1
11049: ST_TO_ADDR
// def_morale_flags := 0 ;
11050: LD_ADDR_EXP 49
11054: PUSH
11055: LD_INT 0
11057: ST_TO_ADDR
// def_siberite_detection := 1 ;
11058: LD_ADDR_EXP 50
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// def_people_respawning := 2 ;
11066: LD_ADDR_EXP 51
11070: PUSH
11071: LD_INT 2
11073: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11074: LD_ADDR_EXP 52
11078: PUSH
11079: LD_INT 1
11081: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11082: LD_ADDR_EXP 53
11086: PUSH
11087: LD_INT 0
11089: ST_TO_ADDR
// def_builduptime := 6 ;
11090: LD_ADDR_EXP 54
11094: PUSH
11095: LD_INT 6
11097: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11098: LD_ADDR_VAR 0 2
11102: PUSH
11103: LD_INT 23
11105: PUSH
11106: EMPTY
11107: LIST
11108: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
11109: LD_ADDR_VAR 0 3
11113: PUSH
11114: LD_INT 2
11116: PUSH
11117: LD_INT 37
11119: PUSH
11120: LD_INT 31
11122: PUSH
11123: LD_INT 32
11125: PUSH
11126: LD_INT 33
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11136: LD_ADDR_LOC 20
11140: PUSH
11141: EMPTY
11142: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11143: LD_ADDR_LOC 21
11147: PUSH
11148: EMPTY
11149: ST_TO_ADDR
// Banned_Controls := [ ] ;
11150: LD_ADDR_LOC 22
11154: PUSH
11155: EMPTY
11156: ST_TO_ADDR
// Banned_Engines := [ ] ;
11157: LD_ADDR_LOC 23
11161: PUSH
11162: EMPTY
11163: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11164: LD_ADDR_LOC 18
11168: PUSH
11169: EMPTY
11170: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11171: LD_ADDR_LOC 19
11175: PUSH
11176: EMPTY
11177: ST_TO_ADDR
// No_Mechs := true ;
11178: LD_ADDR_EXP 55
11182: PUSH
11183: LD_INT 1
11185: ST_TO_ADDR
// end ; 7 :
11186: GO 11795
11188: LD_INT 7
11190: DOUBLE
11191: EQUAL
11192: IFTRUE 11196
11194: GO 11394
11196: POP
// begin def_base_level := 1 ;
11197: LD_ADDR_EXP 41
11201: PUSH
11202: LD_INT 1
11204: ST_TO_ADDR
// def_amount_of_people := 20 ;
11205: LD_ADDR_EXP 42
11209: PUSH
11210: LD_INT 20
11212: ST_TO_ADDR
// def_skill_level := 3 ;
11213: LD_ADDR_EXP 43
11217: PUSH
11218: LD_INT 3
11220: ST_TO_ADDR
// def_starting_resources := 3 ;
11221: LD_ADDR_EXP 44
11225: PUSH
11226: LD_INT 3
11228: ST_TO_ADDR
// def_shipments_density := 1 ;
11229: LD_ADDR_EXP 45
11233: PUSH
11234: LD_INT 1
11236: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11237: LD_ADDR_EXP 46
11241: PUSH
11242: LD_INT 1
11244: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11245: LD_ADDR_EXP 47
11249: PUSH
11250: LD_INT 2
11252: ST_TO_ADDR
// def_shared_vision := 1 ;
11253: LD_ADDR_EXP 48
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// def_morale_flags := 0 ;
11261: LD_ADDR_EXP 49
11265: PUSH
11266: LD_INT 0
11268: ST_TO_ADDR
// def_siberite_detection := 1 ;
11269: LD_ADDR_EXP 50
11273: PUSH
11274: LD_INT 1
11276: ST_TO_ADDR
// def_people_respawning := 0 ;
11277: LD_ADDR_EXP 51
11281: PUSH
11282: LD_INT 0
11284: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11285: LD_ADDR_EXP 52
11289: PUSH
11290: LD_INT 1
11292: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11293: LD_ADDR_EXP 53
11297: PUSH
11298: LD_INT 0
11300: ST_TO_ADDR
// def_builduptime := 6 ;
11301: LD_ADDR_EXP 54
11305: PUSH
11306: LD_INT 6
11308: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11309: LD_ADDR_VAR 0 2
11313: PUSH
11314: LD_INT 23
11316: PUSH
11317: EMPTY
11318: LIST
11319: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
11320: LD_ADDR_VAR 0 3
11324: PUSH
11325: LD_INT 37
11327: PUSH
11328: EMPTY
11329: LIST
11330: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11331: LD_ADDR_LOC 20
11335: PUSH
11336: EMPTY
11337: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11338: LD_ADDR_LOC 21
11342: PUSH
11343: EMPTY
11344: ST_TO_ADDR
// Banned_Controls := [ ] ;
11345: LD_ADDR_LOC 22
11349: PUSH
11350: EMPTY
11351: ST_TO_ADDR
// Banned_Engines := [ ] ;
11352: LD_ADDR_LOC 23
11356: PUSH
11357: EMPTY
11358: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11359: LD_ADDR_LOC 18
11363: PUSH
11364: LD_INT 31
11366: PUSH
11367: LD_INT 32
11369: PUSH
11370: LD_INT 33
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: LIST
11377: PUSH
11378: EMPTY
11379: LIST
11380: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
11381: LD_ADDR_LOC 19
11385: PUSH
11386: LD_INT 10
11388: PUSH
11389: EMPTY
11390: LIST
11391: ST_TO_ADDR
// end ; 8 :
11392: GO 11795
11394: LD_INT 8
11396: DOUBLE
11397: EQUAL
11398: IFTRUE 11402
11400: GO 11794
11402: POP
// begin def_base_level := 0 ;
11403: LD_ADDR_EXP 41
11407: PUSH
11408: LD_INT 0
11410: ST_TO_ADDR
// def_amount_of_people := 8 ;
11411: LD_ADDR_EXP 42
11415: PUSH
11416: LD_INT 8
11418: ST_TO_ADDR
// def_skill_level := 0 ;
11419: LD_ADDR_EXP 43
11423: PUSH
11424: LD_INT 0
11426: ST_TO_ADDR
// def_starting_resources := 2 ;
11427: LD_ADDR_EXP 44
11431: PUSH
11432: LD_INT 2
11434: ST_TO_ADDR
// def_shipments_density := 1 ;
11435: LD_ADDR_EXP 45
11439: PUSH
11440: LD_INT 1
11442: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11443: LD_ADDR_EXP 46
11447: PUSH
11448: LD_INT 0
11450: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11451: LD_ADDR_EXP 47
11455: PUSH
11456: LD_INT 0
11458: ST_TO_ADDR
// def_shared_vision := 1 ;
11459: LD_ADDR_EXP 48
11463: PUSH
11464: LD_INT 1
11466: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
11467: LD_ADDR_EXP 49
11471: PUSH
11472: LD_INT 0
11474: PPUSH
11475: LD_INT 2
11477: PPUSH
11478: CALL_OW 12
11482: ST_TO_ADDR
// def_siberite_detection := 0 ;
11483: LD_ADDR_EXP 50
11487: PUSH
11488: LD_INT 0
11490: ST_TO_ADDR
// def_people_respawning := 0 ;
11491: LD_ADDR_EXP 51
11495: PUSH
11496: LD_INT 0
11498: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11499: LD_ADDR_EXP 52
11503: PUSH
11504: LD_INT 2
11506: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11507: LD_ADDR_EXP 53
11511: PUSH
11512: LD_INT 0
11514: ST_TO_ADDR
// def_builduptime := 0 ;
11515: LD_ADDR_EXP 54
11519: PUSH
11520: LD_INT 0
11522: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
11523: LD_ADDR_VAR 0 2
11527: PUSH
11528: LD_INT 23
11530: PUSH
11531: LD_INT 20
11533: PUSH
11534: LD_INT 40
11536: PUSH
11537: LD_INT 47
11539: PUSH
11540: LD_INT 46
11542: PUSH
11543: LD_INT 39
11545: PUSH
11546: LD_INT 71
11548: PUSH
11549: LD_INT 34
11551: PUSH
11552: LD_INT 41
11554: PUSH
11555: LD_INT 44
11557: PUSH
11558: LD_INT 17
11560: PUSH
11561: LD_INT 16
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
11578: LD_ADDR_VAR 0 3
11582: PUSH
11583: LD_INT 37
11585: PUSH
11586: LD_INT 5
11588: PUSH
11589: LD_INT 13
11591: PUSH
11592: LD_INT 34
11594: PUSH
11595: LD_INT 12
11597: PUSH
11598: LD_INT 15
11600: PUSH
11601: LD_INT 11
11603: PUSH
11604: LD_INT 14
11606: PUSH
11607: LD_INT 29
11609: PUSH
11610: LD_INT 30
11612: PUSH
11613: LD_INT 28
11615: PUSH
11616: LD_INT 24
11618: PUSH
11619: LD_INT 25
11621: PUSH
11622: LD_INT 20
11624: PUSH
11625: LD_INT 21
11627: PUSH
11628: LD_INT 22
11630: PUSH
11631: LD_INT 36
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11653: LD_ADDR_LOC 20
11657: PUSH
11658: EMPTY
11659: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
11660: LD_ADDR_LOC 21
11664: PUSH
11665: LD_INT 14
11667: PUSH
11668: EMPTY
11669: LIST
11670: ST_TO_ADDR
// Banned_Controls := [ ] ;
11671: LD_ADDR_LOC 22
11675: PUSH
11676: EMPTY
11677: ST_TO_ADDR
// Banned_Engines := [ ] ;
11678: LD_ADDR_LOC 23
11682: PUSH
11683: EMPTY
11684: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
11685: LD_ADDR_LOC 18
11689: PUSH
11690: LD_INT 31
11692: PUSH
11693: LD_INT 32
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: LD_INT 4
11702: PUSH
11703: EMPTY
11704: LIST
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
11710: LD_ADDR_LOC 19
11714: PUSH
11715: LD_INT 2
11717: PUSH
11718: LD_INT 1
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: ST_TO_ADDR
// for i := 1 to 8 do
11725: LD_ADDR_VAR 0 4
11729: PUSH
11730: DOUBLE
11731: LD_INT 1
11733: DEC
11734: ST_TO_ADDR
11735: LD_INT 8
11737: PUSH
11738: FOR_TO
11739: IFFALSE 11790
// if ( Side_Nations [ i ] = 3 ) then
11741: LD_EXP 19
11745: PUSH
11746: LD_VAR 0 4
11750: ARRAY
11751: PUSH
11752: LD_INT 3
11754: EQUAL
11755: IFFALSE 11788
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11757: LD_ADDR_EXP 19
11761: PUSH
11762: LD_EXP 19
11766: PPUSH
11767: LD_VAR 0 4
11771: PPUSH
11772: LD_INT 1
11774: PPUSH
11775: LD_INT 2
11777: PPUSH
11778: CALL_OW 12
11782: PPUSH
11783: CALL_OW 1
11787: ST_TO_ADDR
11788: GO 11738
11790: POP
11791: POP
// end ; end ;
11792: GO 11795
11794: POP
// for i := 1 to 8 do
11795: LD_ADDR_VAR 0 4
11799: PUSH
11800: DOUBLE
11801: LD_INT 1
11803: DEC
11804: ST_TO_ADDR
11805: LD_INT 8
11807: PUSH
11808: FOR_TO
11809: IFFALSE 11893
// if Side_Positions [ i ] then
11811: LD_EXP 18
11815: PUSH
11816: LD_VAR 0 4
11820: ARRAY
11821: IFFALSE 11891
// begin for j in Unavailable_Techs do
11823: LD_ADDR_VAR 0 5
11827: PUSH
11828: LD_VAR 0 2
11832: PUSH
11833: FOR_IN
11834: IFFALSE 11855
// SetTech ( j , i , 0 ) ;
11836: LD_VAR 0 5
11840: PPUSH
11841: LD_VAR 0 4
11845: PPUSH
11846: LD_INT 0
11848: PPUSH
11849: CALL_OW 322
11853: GO 11833
11855: POP
11856: POP
// for j in Unavailable_Builds do
11857: LD_ADDR_VAR 0 5
11861: PUSH
11862: LD_VAR 0 3
11866: PUSH
11867: FOR_IN
11868: IFFALSE 11889
// SetRestrict ( j , i , 0 ) ;
11870: LD_VAR 0 5
11874: PPUSH
11875: LD_VAR 0 4
11879: PPUSH
11880: LD_INT 0
11882: PPUSH
11883: CALL_OW 324
11887: GO 11867
11889: POP
11890: POP
// end ;
11891: GO 11808
11893: POP
11894: POP
// end ;
11895: LD_VAR 0 1
11899: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11900: LD_INT 0
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
11907: PPUSH
11908: PPUSH
// for i := 1 to Restricted_Builds do
11909: LD_ADDR_VAR 0 2
11913: PUSH
11914: DOUBLE
11915: LD_INT 1
11917: DEC
11918: ST_TO_ADDR
11919: LD_LOC 18
11923: PUSH
11924: FOR_TO
11925: IFFALSE 12235
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11927: LD_LOC 18
11931: PUSH
11932: LD_VAR 0 2
11936: ARRAY
11937: PUSH
11938: LD_INT 1
11940: ARRAY
11941: PUSH
11942: LD_INT 31
11944: DOUBLE
11945: EQUAL
11946: IFTRUE 11962
11948: LD_INT 32
11950: DOUBLE
11951: EQUAL
11952: IFTRUE 11962
11954: LD_INT 33
11956: DOUBLE
11957: EQUAL
11958: IFTRUE 11962
11960: GO 11973
11962: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11963: LD_ADDR_VAR 0 6
11967: PUSH
11968: LD_STRING #Turrets
11970: ST_TO_ADDR
11971: GO 12018
11973: LD_INT 4
11975: DOUBLE
11976: EQUAL
11977: IFTRUE 11987
11979: LD_INT 5
11981: DOUBLE
11982: EQUAL
11983: IFTRUE 11987
11985: GO 11998
11987: POP
// btype := #Armouries ; b_Behemoth :
11988: LD_ADDR_VAR 0 6
11992: PUSH
11993: LD_STRING #Armouries
11995: ST_TO_ADDR
11996: GO 12018
11998: LD_INT 37
12000: DOUBLE
12001: EQUAL
12002: IFTRUE 12006
12004: GO 12017
12006: POP
// btype := #Behemoths ; end ;
12007: LD_ADDR_VAR 0 6
12011: PUSH
12012: LD_STRING #Behemoths
12014: ST_TO_ADDR
12015: GO 12018
12017: POP
// list := [ ] ;
12018: LD_ADDR_VAR 0 7
12022: PUSH
12023: EMPTY
12024: ST_TO_ADDR
// for j := 1 to 8 do
12025: LD_ADDR_VAR 0 3
12029: PUSH
12030: DOUBLE
12031: LD_INT 1
12033: DEC
12034: ST_TO_ADDR
12035: LD_INT 8
12037: PUSH
12038: FOR_TO
12039: IFFALSE 12132
// if Side_Positions [ j ] then
12041: LD_EXP 18
12045: PUSH
12046: LD_VAR 0 3
12050: ARRAY
12051: IFFALSE 12130
// begin amount := 0 ;
12053: LD_ADDR_VAR 0 5
12057: PUSH
12058: LD_INT 0
12060: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
12061: LD_ADDR_VAR 0 4
12065: PUSH
12066: LD_LOC 18
12070: PUSH
12071: LD_VAR 0 2
12075: ARRAY
12076: PUSH
12077: FOR_IN
12078: IFFALSE 12126
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
12080: LD_ADDR_VAR 0 5
12084: PUSH
12085: LD_VAR 0 5
12089: PUSH
12090: LD_INT 22
12092: PUSH
12093: LD_VAR 0 3
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 30
12104: PUSH
12105: LD_VAR 0 4
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PPUSH
12118: CALL_OW 69
12122: PLUS
12123: ST_TO_ADDR
12124: GO 12077
12126: POP
12127: POP
// break ;
12128: GO 12132
// end ;
12130: GO 12038
12132: POP
12133: POP
// list := [ ] ;
12134: LD_ADDR_VAR 0 7
12138: PUSH
12139: EMPTY
12140: ST_TO_ADDR
// for j := 1 to 8 do
12141: LD_ADDR_VAR 0 3
12145: PUSH
12146: DOUBLE
12147: LD_INT 1
12149: DEC
12150: ST_TO_ADDR
12151: LD_INT 8
12153: PUSH
12154: FOR_TO
12155: IFFALSE 12175
// list := list ^ amount ;
12157: LD_ADDR_VAR 0 7
12161: PUSH
12162: LD_VAR 0 7
12166: PUSH
12167: LD_VAR 0 5
12171: ADD
12172: ST_TO_ADDR
12173: GO 12154
12175: POP
12176: POP
// Already_Built := Already_Built ^ [ list ] ;
12177: LD_ADDR_LOC 24
12181: PUSH
12182: LD_LOC 24
12186: PUSH
12187: LD_VAR 0 7
12191: PUSH
12192: EMPTY
12193: LIST
12194: ADD
12195: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
12196: LD_ADDR_LOC 25
12200: PUSH
12201: LD_LOC 25
12205: PUSH
12206: LD_VAR 0 6
12210: PUSH
12211: LD_VAR 0 5
12215: PUSH
12216: LD_LOC 19
12220: PUSH
12221: LD_VAR 0 2
12225: ARRAY
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: ADD
12232: ST_TO_ADDR
// end ;
12233: GO 11924
12235: POP
12236: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12237: LD_ADDR_LOC 26
12241: PUSH
12242: LD_INT 0
12244: PUSH
12245: LD_INT 0
12247: PUSH
12248: LD_INT 0
12250: PUSH
12251: LD_INT 0
12253: PUSH
12254: LD_INT 0
12256: PUSH
12257: LD_INT 0
12259: PUSH
12260: LD_INT 0
12262: PUSH
12263: LD_INT 0
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: ST_TO_ADDR
// if Limits_Info then
12276: LD_LOC 25
12280: IFFALSE 12296
// Limits_Info := #Limits ^ Limits_Info ;
12282: LD_ADDR_LOC 25
12286: PUSH
12287: LD_STRING #Limits
12289: PUSH
12290: LD_LOC 25
12294: ADD
12295: ST_TO_ADDR
// end ;
12296: LD_VAR 0 1
12300: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
12301: LD_INT 0
12303: PPUSH
12304: PPUSH
12305: PPUSH
12306: PPUSH
// for i := 1 to Restricted_Builds do
12307: LD_ADDR_VAR 0 7
12311: PUSH
12312: DOUBLE
12313: LD_INT 1
12315: DEC
12316: ST_TO_ADDR
12317: LD_LOC 18
12321: PUSH
12322: FOR_TO
12323: IFFALSE 12746
// if BType in Restricted_Builds [ i ] then
12325: LD_VAR 0 2
12329: PUSH
12330: LD_LOC 18
12334: PUSH
12335: LD_VAR 0 7
12339: ARRAY
12340: IN
12341: IFFALSE 12744
// begin if old_side then
12343: LD_VAR 0 4
12347: IFFALSE 12473
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
12349: LD_LOC 24
12353: PUSH
12354: LD_VAR 0 7
12358: ARRAY
12359: PUSH
12360: LD_VAR 0 3
12364: ARRAY
12365: PUSH
12366: LD_VAR 0 5
12370: PLUS
12371: PUSH
12372: LD_LOC 19
12376: PUSH
12377: LD_VAR 0 7
12381: ARRAY
12382: GREATER
12383: IFFALSE 12409
// begin SetSide ( un , old_side ) ;
12385: LD_VAR 0 1
12389: PPUSH
12390: LD_VAR 0 4
12394: PPUSH
12395: CALL_OW 235
// count := 0 ;
12399: LD_ADDR_VAR 0 5
12403: PUSH
12404: LD_INT 0
12406: ST_TO_ADDR
// end else
12407: GO 12473
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
12409: LD_ADDR_LOC 24
12413: PUSH
12414: LD_LOC 24
12418: PPUSH
12419: LD_VAR 0 7
12423: PPUSH
12424: LD_LOC 24
12428: PUSH
12429: LD_VAR 0 7
12433: ARRAY
12434: PPUSH
12435: LD_VAR 0 4
12439: PPUSH
12440: LD_LOC 24
12444: PUSH
12445: LD_VAR 0 7
12449: ARRAY
12450: PUSH
12451: LD_VAR 0 4
12455: ARRAY
12456: PUSH
12457: LD_VAR 0 5
12461: MINUS
12462: PPUSH
12463: CALL_OW 1
12467: PPUSH
12468: CALL_OW 1
12472: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
12473: LD_ADDR_LOC 24
12477: PUSH
12478: LD_LOC 24
12482: PPUSH
12483: LD_VAR 0 7
12487: PPUSH
12488: LD_LOC 24
12492: PUSH
12493: LD_VAR 0 7
12497: ARRAY
12498: PPUSH
12499: LD_VAR 0 3
12503: PPUSH
12504: LD_LOC 24
12508: PUSH
12509: LD_VAR 0 7
12513: ARRAY
12514: PUSH
12515: LD_VAR 0 3
12519: ARRAY
12520: PUSH
12521: LD_VAR 0 5
12525: PLUS
12526: PPUSH
12527: CALL_OW 1
12531: PPUSH
12532: CALL_OW 1
12536: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
12537: LD_VAR 0 5
12541: PUSH
12542: LD_INT 0
12544: NONEQUAL
12545: PUSH
12546: LD_VAR 0 3
12550: PUSH
12551: LD_OWVAR 2
12555: EQUAL
12556: AND
12557: IFFALSE 12600
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
12559: LD_ADDR_LOC 25
12563: PUSH
12564: LD_LOC 25
12568: PPUSH
12569: LD_INT 3
12571: PUSH
12572: LD_VAR 0 7
12576: MUL
12577: PPUSH
12578: LD_LOC 24
12582: PUSH
12583: LD_VAR 0 7
12587: ARRAY
12588: PUSH
12589: LD_VAR 0 3
12593: ARRAY
12594: PPUSH
12595: CALL_OW 1
12599: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
12600: LD_LOC 24
12604: PUSH
12605: LD_VAR 0 7
12609: ARRAY
12610: PUSH
12611: LD_VAR 0 3
12615: ARRAY
12616: PUSH
12617: LD_LOC 19
12621: PUSH
12622: LD_VAR 0 7
12626: ARRAY
12627: GREATER
12628: IFFALSE 12655
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
12630: LD_ADDR_LOC 26
12634: PUSH
12635: LD_LOC 26
12639: PPUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: LD_INT 1
12647: PPUSH
12648: CALL_OW 1
12652: ST_TO_ADDR
// end else
12653: GO 12742
// begin for j := 1 to Restricted_Builds do
12655: LD_ADDR_VAR 0 8
12659: PUSH
12660: DOUBLE
12661: LD_INT 1
12663: DEC
12664: ST_TO_ADDR
12665: LD_LOC 18
12669: PUSH
12670: FOR_TO
12671: IFFALSE 12715
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
12673: LD_LOC 24
12677: PUSH
12678: LD_VAR 0 8
12682: ARRAY
12683: PUSH
12684: LD_VAR 0 3
12688: ARRAY
12689: PUSH
12690: LD_LOC 19
12694: PUSH
12695: LD_VAR 0 8
12699: ARRAY
12700: GREATER
12701: IFFALSE 12713
// begin Is_Cheater := true ;
12703: LD_ADDR_VAR 0 9
12707: PUSH
12708: LD_INT 1
12710: ST_TO_ADDR
// break ;
12711: GO 12715
// end ;
12713: GO 12670
12715: POP
12716: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
12717: LD_ADDR_LOC 26
12721: PUSH
12722: LD_LOC 26
12726: PPUSH
12727: LD_VAR 0 3
12731: PPUSH
12732: LD_VAR 0 9
12736: PPUSH
12737: CALL_OW 1
12741: ST_TO_ADDR
// end ; break ;
12742: GO 12746
// end ;
12744: GO 12322
12746: POP
12747: POP
// end ;
12748: LD_VAR 0 6
12752: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12753: LD_VAR 0 5
12757: PUSH
12758: LD_LOC 20
12762: IN
12763: PUSH
12764: LD_VAR 0 2
12768: PUSH
12769: LD_LOC 21
12773: IN
12774: OR
12775: PUSH
12776: LD_VAR 0 4
12780: PUSH
12781: LD_LOC 22
12785: IN
12786: OR
12787: PUSH
12788: LD_VAR 0 3
12792: PUSH
12793: LD_LOC 23
12797: IN
12798: OR
12799: IFFALSE 12810
// ComCancel ( factory ) ;
12801: LD_VAR 0 1
12805: PPUSH
12806: CALL_OW 127
// end ;
12810: PPOPN 5
12812: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12813: LD_VAR 0 2
12817: PUSH
12818: LD_LOC 20
12822: IN
12823: IFFALSE 12834
// ComCancel ( building ) ;
12825: LD_VAR 0 1
12829: PPUSH
12830: CALL_OW 127
// end ; end_of_file
12834: PPOPN 2
12836: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
12837: LD_INT 0
12839: PPUSH
12840: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12841: LD_ADDR_VAR 0 2
12845: PUSH
12846: LD_STRING #Multi1x1-Time
12848: PUSH
12849: LD_OWVAR 1
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: ST_TO_ADDR
// if WaitServerStrings then
12858: LD_EXP 57
12862: IFFALSE 12880
// AllStrings = AllStrings ^ WaitServerStrings ;
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: LD_VAR 0 2
12873: PUSH
12874: LD_EXP 57
12878: ADD
12879: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12880: LD_INT 0
12882: PUSH
12883: LD_EXP 15
12887: PUSH
12888: LD_OWVAR 1
12892: MINUS
12893: LESSEQUAL
12894: IFFALSE 12925
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12896: LD_ADDR_VAR 0 2
12900: PUSH
12901: LD_VAR 0 2
12905: PUSH
12906: LD_STRING #allowedsibbomb
12908: PUSH
12909: LD_EXP 15
12913: PUSH
12914: LD_OWVAR 1
12918: MINUS
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: ADD
12924: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
12925: LD_INT 0
12927: PUSH
12928: LD_EXP 60
12932: PUSH
12933: LD_OWVAR 1
12937: MINUS
12938: LESSEQUAL
12939: IFFALSE 12970
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
12941: LD_ADDR_VAR 0 2
12945: PUSH
12946: LD_VAR 0 2
12950: PUSH
12951: LD_STRING #builduptime
12953: PUSH
12954: LD_EXP 60
12958: PUSH
12959: LD_OWVAR 1
12963: MINUS
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: ADD
12969: ST_TO_ADDR
// if ( ExtraStrings ) then
12970: LD_EXP 56
12974: IFFALSE 12996
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12976: LD_ADDR_VAR 0 2
12980: PUSH
12981: LD_VAR 0 2
12985: PUSH
12986: LD_STRING 
12988: ADD
12989: PUSH
12990: LD_EXP 56
12994: ADD
12995: ST_TO_ADDR
// if ( LimitsStrings ) then
12996: CALL 9698 0 0
13000: IFFALSE 13022
// AllStrings := AllStrings ^  ^ LimitsStrings ;
13002: LD_ADDR_VAR 0 2
13006: PUSH
13007: LD_VAR 0 2
13011: PUSH
13012: LD_STRING 
13014: ADD
13015: PUSH
13016: CALL 9698 0 0
13020: ADD
13021: ST_TO_ADDR
// if debug_strings then
13022: LD_OWVAR 48
13026: IFFALSE 13048
// AllStrings := AllStrings ^  ^ debug_strings ;
13028: LD_ADDR_VAR 0 2
13032: PUSH
13033: LD_VAR 0 2
13037: PUSH
13038: LD_STRING 
13040: ADD
13041: PUSH
13042: LD_OWVAR 48
13046: ADD
13047: ST_TO_ADDR
// Display_Strings := AllStrings ;
13048: LD_ADDR_OWVAR 47
13052: PUSH
13053: LD_VAR 0 2
13057: ST_TO_ADDR
// end ;
13058: LD_VAR 0 1
13062: RET
// every 0 0$1 do
13063: GO 13065
13065: DISABLE
// begin ShowTimer ;
13066: CALL 12837 0 0
// enable ;
13070: ENABLE
// end ; end_of_file
13071: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
13072: LD_INT 0
13074: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
13075: LD_VAR 0 1
13079: PPUSH
13080: CALL_OW 255
13084: PUSH
13085: LD_VAR 0 4
13089: EQUAL
13090: IFFALSE 13109
// begin SetAchievement ( ACH_RAD ) ;
13092: LD_STRING ACH_RAD
13094: PPUSH
13095: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
13099: LD_STRING ACH_NL
13101: PPUSH
13102: LD_INT 1
13104: PPUSH
13105: CALL_OW 564
// end end ;
13109: LD_VAR 0 5
13113: RET
// export function SA_Win ( side ) ; begin
13114: LD_INT 0
13116: PPUSH
// case side of 1 :
13117: LD_VAR 0 1
13121: PUSH
13122: LD_INT 1
13124: DOUBLE
13125: EQUAL
13126: IFTRUE 13130
13128: GO 13143
13130: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
13131: LD_STRING ACH_AH
13133: PPUSH
13134: LD_INT 1
13136: PPUSH
13137: CALL_OW 564
13141: GO 13306
13143: LD_INT 2
13145: DOUBLE
13146: EQUAL
13147: IFTRUE 13151
13149: GO 13164
13151: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
13152: LD_STRING ACH_E
13154: PPUSH
13155: LD_INT 1
13157: PPUSH
13158: CALL_OW 564
13162: GO 13306
13164: LD_INT 3
13166: DOUBLE
13167: EQUAL
13168: IFTRUE 13172
13170: GO 13185
13172: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
13173: LD_STRING ACH_OOL
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: CALL_OW 564
13183: GO 13306
13185: LD_INT 1
13187: PUSH
13188: LD_INT 2
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: DOUBLE
13195: EQUAL
13196: IFTRUE 13200
13198: GO 13225
13200: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
13201: LD_STRING ACH_AH
13203: PPUSH
13204: LD_REAL  5.00000000000000E-0001
13207: PPUSH
13208: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
13212: LD_STRING ACH_E
13214: PPUSH
13215: LD_REAL  5.00000000000000E-0001
13218: PPUSH
13219: CALL_OW 564
// end ; [ 2 , 3 ] :
13223: GO 13306
13225: LD_INT 2
13227: PUSH
13228: LD_INT 3
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: DOUBLE
13235: EQUAL
13236: IFTRUE 13240
13238: GO 13265
13240: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
13241: LD_STRING ACH_OOL
13243: PPUSH
13244: LD_REAL  5.00000000000000E-0001
13247: PPUSH
13248: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
13252: LD_STRING ACH_E
13254: PPUSH
13255: LD_REAL  5.00000000000000E-0001
13258: PPUSH
13259: CALL_OW 564
// end ; [ 3 , 1 ] :
13263: GO 13306
13265: LD_INT 3
13267: PUSH
13268: LD_INT 1
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: DOUBLE
13275: EQUAL
13276: IFTRUE 13280
13278: GO 13305
13280: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
13281: LD_STRING ACH_AH
13283: PPUSH
13284: LD_REAL  5.00000000000000E-0001
13287: PPUSH
13288: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
13292: LD_STRING ACH_OOL
13294: PPUSH
13295: LD_REAL  5.00000000000000E-0001
13298: PPUSH
13299: CALL_OW 564
// end ; end ;
13303: GO 13306
13305: POP
// end ; end_of_file
13306: LD_VAR 0 2
13310: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
13311: LD_INT 0
13313: PPUSH
13314: PPUSH
// enable ( 98 ) ;
13315: LD_INT 98
13317: ENABLE_MARKED
// GameEnded = false ;
13318: LD_ADDR_LOC 28
13322: PUSH
13323: LD_INT 0
13325: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13326: LD_ADDR_LOC 27
13330: PUSH
13331: LD_INT 0
13333: PUSH
13334: LD_INT 0
13336: PUSH
13337: LD_INT 0
13339: PUSH
13340: LD_INT 0
13342: PUSH
13343: LD_INT 0
13345: PUSH
13346: LD_INT 0
13348: PUSH
13349: LD_INT 0
13351: PUSH
13352: LD_INT 0
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: ST_TO_ADDR
// unfoged = false ;
13365: LD_ADDR_LOC 29
13369: PUSH
13370: LD_INT 0
13372: ST_TO_ADDR
// defeated_specs := [ ] ;
13373: LD_ADDR_LOC 30
13377: PUSH
13378: EMPTY
13379: ST_TO_ADDR
// for i = 1 to side_positions do
13380: LD_ADDR_VAR 0 2
13384: PUSH
13385: DOUBLE
13386: LD_INT 1
13388: DEC
13389: ST_TO_ADDR
13390: LD_EXP 18
13394: PUSH
13395: FOR_TO
13396: IFFALSE 13436
// if not side_positions [ i ] then
13398: LD_EXP 18
13402: PUSH
13403: LD_VAR 0 2
13407: ARRAY
13408: NOT
13409: IFFALSE 13434
// defeated = replace ( defeated , i , true ) ;
13411: LD_ADDR_LOC 27
13415: PUSH
13416: LD_LOC 27
13420: PPUSH
13421: LD_VAR 0 2
13425: PPUSH
13426: LD_INT 1
13428: PPUSH
13429: CALL_OW 1
13433: ST_TO_ADDR
13434: GO 13395
13436: POP
13437: POP
// end ;
13438: LD_VAR 0 1
13442: RET
// function CanWinLoose ; begin
13443: LD_INT 0
13445: PPUSH
// Result := true ;
13446: LD_ADDR_VAR 0 1
13450: PUSH
13451: LD_INT 1
13453: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
13454: CALL_OW 518
13458: PUSH
13459: CALL_OW 519
13463: PUSH
13464: LD_INT 0
13466: GREATER
13467: AND
13468: IFFALSE 13478
// Result := false ;
13470: LD_ADDR_VAR 0 1
13474: PUSH
13475: LD_INT 0
13477: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13478: CALL_OW 531
13482: PUSH
13483: CALL_OW 519
13487: PUSH
13488: LD_INT 1
13490: GREATER
13491: AND
13492: IFFALSE 13502
// Result := false ;
13494: LD_ADDR_VAR 0 1
13498: PUSH
13499: LD_INT 0
13501: ST_TO_ADDR
// end ;
13502: LD_VAR 0 1
13506: RET
// export function HasPower ( i ) ; var k , h ; begin
13507: LD_INT 0
13509: PPUSH
13510: PPUSH
13511: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
13512: LD_VAR 0 1
13516: PPUSH
13517: CALL_OW 108
13521: NOT
13522: PUSH
13523: LD_EXP 21
13527: PUSH
13528: LD_VAR 0 1
13532: ARRAY
13533: NOT
13534: AND
13535: PUSH
13536: LD_OWVAR 4
13540: AND
13541: IFFALSE 13553
// begin result = false ;
13543: LD_ADDR_VAR 0 2
13547: PUSH
13548: LD_INT 0
13550: ST_TO_ADDR
// end else
13551: GO 13848
// case def_win_rules of 0 :
13553: LD_EXP 30
13557: PUSH
13558: LD_INT 0
13560: DOUBLE
13561: EQUAL
13562: IFTRUE 13566
13564: GO 13729
13566: POP
// if def_people_respawning then
13567: LD_EXP 51
13571: IFFALSE 13662
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: LD_INT 22
13580: PUSH
13581: LD_VAR 0 1
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 2
13592: PUSH
13593: LD_INT 21
13595: PUSH
13596: LD_INT 1
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 33
13605: PUSH
13606: LD_INT 3
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 33
13615: PUSH
13616: LD_INT 5
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 30
13625: PUSH
13626: LD_INT 0
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 30
13635: PUSH
13636: LD_INT 1
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PPUSH
13655: CALL_OW 69
13659: ST_TO_ADDR
13660: GO 13727
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
13662: LD_ADDR_VAR 0 2
13666: PUSH
13667: LD_INT 22
13669: PUSH
13670: LD_VAR 0 1
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PUSH
13679: LD_INT 2
13681: PUSH
13682: LD_INT 21
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 33
13694: PUSH
13695: LD_INT 3
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 33
13704: PUSH
13705: LD_INT 5
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PPUSH
13722: CALL_OW 69
13726: ST_TO_ADDR
13727: GO 13848
13729: LD_INT 1
13731: DOUBLE
13732: EQUAL
13733: IFTRUE 13737
13735: GO 13776
13737: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
13738: LD_ADDR_VAR 0 2
13742: PUSH
13743: LD_INT 22
13745: PUSH
13746: LD_VAR 0 1
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 21
13757: PUSH
13758: LD_INT 1
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL_OW 69
13773: ST_TO_ADDR
13774: GO 13848
13776: LD_INT 2
13778: DOUBLE
13779: EQUAL
13780: IFTRUE 13784
13782: GO 13847
13784: POP
// begin h = false ;
13785: LD_ADDR_VAR 0 4
13789: PUSH
13790: LD_INT 0
13792: ST_TO_ADDR
// for k in heroes [ i ] do
13793: LD_ADDR_VAR 0 3
13797: PUSH
13798: LD_EXP 31
13802: PUSH
13803: LD_VAR 0 1
13807: ARRAY
13808: PUSH
13809: FOR_IN
13810: IFFALSE 13833
// if IsLive ( k ) then
13812: LD_VAR 0 3
13816: PPUSH
13817: CALL_OW 300
13821: IFFALSE 13831
// h = true ;
13823: LD_ADDR_VAR 0 4
13827: PUSH
13828: LD_INT 1
13830: ST_TO_ADDR
13831: GO 13809
13833: POP
13834: POP
// Result := h ;
13835: LD_ADDR_VAR 0 2
13839: PUSH
13840: LD_VAR 0 4
13844: ST_TO_ADDR
// end ; end ;
13845: GO 13848
13847: POP
// end ;
13848: LD_VAR 0 2
13852: RET
// function AlliedSides ( i , j ) ; begin
13853: LD_INT 0
13855: PPUSH
// Result := false ;
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_INT 0
13863: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
13864: LD_VAR 0 1
13868: PPUSH
13869: LD_VAR 0 2
13873: PPUSH
13874: CALL_OW 81
13878: PUSH
13879: LD_INT 1
13881: EQUAL
13882: PUSH
13883: LD_VAR 0 2
13887: PPUSH
13888: LD_VAR 0 1
13892: PPUSH
13893: CALL_OW 81
13897: PUSH
13898: LD_INT 1
13900: EQUAL
13901: AND
13902: PUSH
13903: LD_VAR 0 1
13907: PPUSH
13908: CALL_OW 83
13912: AND
13913: PUSH
13914: LD_VAR 0 2
13918: PPUSH
13919: CALL_OW 83
13923: AND
13924: IFFALSE 13934
// Result := true ;
13926: LD_ADDR_VAR 0 3
13930: PUSH
13931: LD_INT 1
13933: ST_TO_ADDR
// end ;
13934: LD_VAR 0 3
13938: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
13939: CALL 13443 0 0
13943: PUSH
13944: LD_LOC 28
13948: NOT
13949: AND
13950: IFFALSE 13966
13952: GO 13954
13954: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
13955: LD_ADDR_EXP 57
13959: PUSH
13960: LD_STRING #Player-Ended
13962: PUSH
13963: EMPTY
13964: LIST
13965: ST_TO_ADDR
13966: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
13967: CALL 13443 0 0
13971: PUSH
13972: LD_LOC 28
13976: AND
13977: IFFALSE 13986
13979: GO 13981
13981: DISABLE
// YouLostInMultiplayer ;
13982: CALL_OW 107
13986: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
13987: CALL 13443 0 0
13991: NOT
13992: PUSH
13993: CALL_OW 531
13997: NOT
13998: AND
13999: IFFALSE 14015
14001: GO 14003
14003: DISABLE
// WaitServerStrings = [ #server-wait ] ;
14004: LD_ADDR_EXP 57
14008: PUSH
14009: LD_STRING #server-wait
14011: PUSH
14012: EMPTY
14013: LIST
14014: ST_TO_ADDR
14015: END
// every 100 trigger IAmSpec do
14016: CALL_OW 531
14020: IFFALSE 14036
14022: GO 14024
14024: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
14025: LD_ADDR_EXP 57
14029: PUSH
14030: LD_STRING #Player-IAmSpec
14032: PUSH
14033: EMPTY
14034: LIST
14035: ST_TO_ADDR
14036: END
// every 100 trigger GameEnded and IAmSpec do
14037: LD_LOC 28
14041: PUSH
14042: CALL_OW 531
14046: AND
14047: IFFALSE 14056
14049: GO 14051
14051: DISABLE
// YouLostInMultiplayer ;
14052: CALL_OW 107
14056: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
14057: CALL 13443 0 0
14061: PUSH
14062: LD_LOC 28
14066: NOT
14067: AND
14068: IFFALSE 14084
14070: GO 14072
14072: DISABLE
// WaitServerStrings = [ $player-win ] ;
14073: LD_ADDR_EXP 57
14077: PUSH
14078: LD_STRING $player-win
14080: PUSH
14081: EMPTY
14082: LIST
14083: ST_TO_ADDR
14084: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
14085: CALL 13443 0 0
14089: PUSH
14090: LD_LOC 28
14094: AND
14095: IFFALSE 14119
14097: GO 14099
14099: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
14100: LD_EXP 19
14104: PUSH
14105: LD_OWVAR 7
14109: ARRAY
14110: PPUSH
14111: CALL 13114 0 1
// YouWinInMultiplayer ;
14115: CALL_OW 106
// end ;
14119: END
// every 100 trigger isEditor marked 401 do
14120: LD_OWVAR 84
14124: IFFALSE 14140
14126: GO 14128
14128: DISABLE
// Debug_Strings = [ You won ] ;
14129: LD_ADDR_OWVAR 48
14133: PUSH
14134: LD_STRING You won
14136: PUSH
14137: EMPTY
14138: LIST
14139: ST_TO_ADDR
14140: END
// every 100 trigger isEditor marked 400 do
14141: LD_OWVAR 84
14145: IFFALSE 14161
14147: GO 14149
14149: DISABLE
// Debug_Strings = [ You loss ] ;
14150: LD_ADDR_OWVAR 48
14154: PUSH
14155: LD_STRING You loss
14157: PUSH
14158: EMPTY
14159: LIST
14160: ST_TO_ADDR
14161: END
// every 100 marked 98 do var i , un ;
14162: GO 14164
14164: DISABLE
14165: LD_INT 0
14167: PPUSH
14168: PPUSH
// begin for i = 1 to side_positions do
14169: LD_ADDR_VAR 0 1
14173: PUSH
14174: DOUBLE
14175: LD_INT 1
14177: DEC
14178: ST_TO_ADDR
14179: LD_EXP 18
14183: PUSH
14184: FOR_TO
14185: IFFALSE 14272
// begin if side_positions [ i ] then
14187: LD_EXP 18
14191: PUSH
14192: LD_VAR 0 1
14196: ARRAY
14197: IFFALSE 14270
// if not HasPower ( i ) and not defeated [ i ] then
14199: LD_VAR 0 1
14203: PPUSH
14204: CALL 13507 0 1
14208: NOT
14209: PUSH
14210: LD_LOC 27
14214: PUSH
14215: LD_VAR 0 1
14219: ARRAY
14220: NOT
14221: AND
14222: IFFALSE 14270
// begin defeated = replace ( defeated , i , true ) ;
14224: LD_ADDR_LOC 27
14228: PUSH
14229: LD_LOC 27
14233: PPUSH
14234: LD_VAR 0 1
14238: PPUSH
14239: LD_INT 1
14241: PPUSH
14242: CALL_OW 1
14246: ST_TO_ADDR
// if i = mp_player_side then
14247: LD_VAR 0 1
14251: PUSH
14252: LD_OWVAR 7
14256: EQUAL
14257: IFFALSE 14270
// begin Multiplayer_Loose_Message ;
14259: CALL_OW 521
// SetPlayerSpectator ( ) ;
14263: CALL_OW 572
// enable ( 400 ) ;
14267: LD_INT 400
14269: ENABLE_MARKED
// end ; end ; end ;
14270: GO 14184
14272: POP
14273: POP
// DidGameEnd ;
14274: CALL 14289 0 0
// if not GameEnded then
14278: LD_LOC 28
14282: NOT
14283: IFFALSE 14286
// enable ;
14285: ENABLE
// end ;
14286: PPOPN 2
14288: END
// function DidGameEnd ; var i , k , enemy ; begin
14289: LD_INT 0
14291: PPUSH
14292: PPUSH
14293: PPUSH
14294: PPUSH
// enemy = [ ] ;
14295: LD_ADDR_VAR 0 4
14299: PUSH
14300: EMPTY
14301: ST_TO_ADDR
// for i = 1 to side_positions do
14302: LD_ADDR_VAR 0 2
14306: PUSH
14307: DOUBLE
14308: LD_INT 1
14310: DEC
14311: ST_TO_ADDR
14312: LD_EXP 18
14316: PUSH
14317: FOR_TO
14318: IFFALSE 14412
// if not defeated [ i ] then
14320: LD_LOC 27
14324: PUSH
14325: LD_VAR 0 2
14329: ARRAY
14330: NOT
14331: IFFALSE 14410
// for k = 1 to side_positions do
14333: LD_ADDR_VAR 0 3
14337: PUSH
14338: DOUBLE
14339: LD_INT 1
14341: DEC
14342: ST_TO_ADDR
14343: LD_EXP 18
14347: PUSH
14348: FOR_TO
14349: IFFALSE 14408
// if not defeated [ k ] then
14351: LD_LOC 27
14355: PUSH
14356: LD_VAR 0 3
14360: ARRAY
14361: NOT
14362: IFFALSE 14406
// if not AlliedSides ( i , k ) then
14364: LD_VAR 0 2
14368: PPUSH
14369: LD_VAR 0 3
14373: PPUSH
14374: CALL 13853 0 2
14378: NOT
14379: IFFALSE 14406
// enemy = enemy ^ [ i , k ] ;
14381: LD_ADDR_VAR 0 4
14385: PUSH
14386: LD_VAR 0 4
14390: PUSH
14391: LD_VAR 0 2
14395: PUSH
14396: LD_VAR 0 3
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: ADD
14405: ST_TO_ADDR
14406: GO 14348
14408: POP
14409: POP
14410: GO 14317
14412: POP
14413: POP
// if not enemy then
14414: LD_VAR 0 4
14418: NOT
14419: IFFALSE 14445
// begin GameEnded = true ;
14421: LD_ADDR_LOC 28
14425: PUSH
14426: LD_INT 1
14428: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
14429: LD_LOC 27
14433: PUSH
14434: LD_OWVAR 7
14438: ARRAY
14439: NOT
14440: IFFALSE 14445
// enable ( 401 ) ;
14442: LD_INT 401
14444: ENABLE_MARKED
// end ; end ;
14445: LD_VAR 0 1
14449: RET
// function unfog ; var k , friends ; begin
14450: LD_INT 0
14452: PPUSH
14453: PPUSH
14454: PPUSH
// for k = 1 to side_positions do
14455: LD_ADDR_VAR 0 2
14459: PUSH
14460: DOUBLE
14461: LD_INT 1
14463: DEC
14464: ST_TO_ADDR
14465: LD_EXP 18
14469: PUSH
14470: FOR_TO
14471: IFFALSE 14527
// if not defeated [ k ] then
14473: LD_LOC 27
14477: PUSH
14478: LD_VAR 0 2
14482: ARRAY
14483: NOT
14484: IFFALSE 14525
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
14486: LD_OWVAR 7
14490: PPUSH
14491: LD_VAR 0 2
14495: PPUSH
14496: CALL_OW 81
14500: PUSH
14501: LD_INT 1
14503: PUSH
14504: EMPTY
14505: LIST
14506: IN
14507: IFFALSE 14525
// friends = friends ^ k ;
14509: LD_ADDR_VAR 0 3
14513: PUSH
14514: LD_VAR 0 3
14518: PUSH
14519: LD_VAR 0 2
14523: ADD
14524: ST_TO_ADDR
14525: GO 14470
14527: POP
14528: POP
// if not friends then
14529: LD_VAR 0 3
14533: NOT
14534: IFFALSE 14548
// begin SetPlayerSpectator ( ) ;
14536: CALL_OW 572
// unfoged = true ;
14540: LD_ADDR_LOC 29
14544: PUSH
14545: LD_INT 1
14547: ST_TO_ADDR
// end ; end ;
14548: LD_VAR 0 1
14552: RET
// export function MakeGameEnd ; begin
14553: LD_INT 0
14555: PPUSH
// SetPlayerSpectator ( ) ;
14556: CALL_OW 572
// unfoged = true ;
14560: LD_ADDR_LOC 29
14564: PUSH
14565: LD_INT 1
14567: ST_TO_ADDR
// wait ( 0 0$5 ) ;
14568: LD_INT 175
14570: PPUSH
14571: CALL_OW 67
// GameEnded = true ;
14575: LD_ADDR_LOC 28
14579: PUSH
14580: LD_INT 1
14582: ST_TO_ADDR
// end ;
14583: LD_VAR 0 1
14587: RET
// export function GetGameEnded ; begin
14588: LD_INT 0
14590: PPUSH
// result = GameEnded ;
14591: LD_ADDR_VAR 0 1
14595: PUSH
14596: LD_LOC 28
14600: ST_TO_ADDR
// end ; end_of_file
14601: LD_VAR 0 1
14605: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
14606: LD_INT 0
14608: PPUSH
14609: PPUSH
14610: PPUSH
14611: PPUSH
14612: PPUSH
14613: PPUSH
14614: PPUSH
14615: PPUSH
14616: PPUSH
// for i := 1 to 8 do
14617: LD_ADDR_VAR 0 2
14621: PUSH
14622: DOUBLE
14623: LD_INT 1
14625: DEC
14626: ST_TO_ADDR
14627: LD_INT 8
14629: PUSH
14630: FOR_TO
14631: IFFALSE 15015
// begin if Side_Positions [ i ] then
14633: LD_EXP 18
14637: PUSH
14638: LD_VAR 0 2
14642: ARRAY
14643: IFFALSE 15013
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
14645: LD_ADDR_VAR 0 7
14649: PUSH
14650: LD_INT 22
14652: PUSH
14653: LD_VAR 0 2
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 21
14664: PUSH
14665: LD_INT 1
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PPUSH
14676: CALL_OW 69
14680: PUSH
14681: LD_INT 0
14683: PLUS
14684: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14685: LD_ADDR_VAR 0 9
14689: PUSH
14690: LD_INT 22
14692: PUSH
14693: LD_VAR 0 2
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: LD_INT 30
14707: PUSH
14708: LD_INT 0
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 30
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PPUSH
14734: CALL_OW 69
14738: ST_TO_ADDR
// crates := 0 ;
14739: LD_ADDR_VAR 0 4
14743: PUSH
14744: LD_INT 0
14746: ST_TO_ADDR
// oil := 0 ;
14747: LD_ADDR_VAR 0 5
14751: PUSH
14752: LD_INT 0
14754: ST_TO_ADDR
// sib := 0 ;
14755: LD_ADDR_VAR 0 6
14759: PUSH
14760: LD_INT 0
14762: ST_TO_ADDR
// if bases then
14763: LD_VAR 0 9
14767: IFFALSE 14873
// begin for j in bases do
14769: LD_ADDR_VAR 0 3
14773: PUSH
14774: LD_VAR 0 9
14778: PUSH
14779: FOR_IN
14780: IFFALSE 14871
// begin base := GetBase ( j ) ;
14782: LD_ADDR_VAR 0 8
14786: PUSH
14787: LD_VAR 0 3
14791: PPUSH
14792: CALL_OW 274
14796: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14797: LD_ADDR_VAR 0 4
14801: PUSH
14802: LD_VAR 0 4
14806: PUSH
14807: LD_VAR 0 8
14811: PPUSH
14812: LD_INT 1
14814: PPUSH
14815: CALL_OW 275
14819: PLUS
14820: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14821: LD_ADDR_VAR 0 5
14825: PUSH
14826: LD_VAR 0 5
14830: PUSH
14831: LD_VAR 0 8
14835: PPUSH
14836: LD_INT 2
14838: PPUSH
14839: CALL_OW 275
14843: PLUS
14844: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14845: LD_ADDR_VAR 0 6
14849: PUSH
14850: LD_VAR 0 6
14854: PUSH
14855: LD_VAR 0 8
14859: PPUSH
14860: LD_INT 3
14862: PPUSH
14863: CALL_OW 275
14867: PLUS
14868: ST_TO_ADDR
// end ;
14869: GO 14779
14871: POP
14872: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14873: LD_STRING setSpecText(
14875: PUSH
14876: LD_VAR 0 2
14880: STR
14881: PUSH
14882: LD_STRING ,
14884: STR
14885: PUSH
14886: LD_INT 2
14888: STR
14889: PUSH
14890: LD_STRING ,
14892: STR
14893: PUSH
14894: LD_VAR 0 4
14898: STR
14899: PUSH
14900: LD_STRING )
14902: STR
14903: PPUSH
14904: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14908: LD_STRING setSpecText(
14910: PUSH
14911: LD_VAR 0 2
14915: STR
14916: PUSH
14917: LD_STRING ,
14919: STR
14920: PUSH
14921: LD_INT 3
14923: STR
14924: PUSH
14925: LD_STRING ,
14927: STR
14928: PUSH
14929: LD_VAR 0 5
14933: STR
14934: PUSH
14935: LD_STRING )
14937: STR
14938: PPUSH
14939: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14943: LD_STRING setSpecText(
14945: PUSH
14946: LD_VAR 0 2
14950: STR
14951: PUSH
14952: LD_STRING ,
14954: STR
14955: PUSH
14956: LD_INT 4
14958: STR
14959: PUSH
14960: LD_STRING ,
14962: STR
14963: PUSH
14964: LD_VAR 0 6
14968: STR
14969: PUSH
14970: LD_STRING )
14972: STR
14973: PPUSH
14974: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14978: LD_STRING setSpecText(
14980: PUSH
14981: LD_VAR 0 2
14985: STR
14986: PUSH
14987: LD_STRING ,
14989: STR
14990: PUSH
14991: LD_INT 5
14993: STR
14994: PUSH
14995: LD_STRING ,
14997: STR
14998: PUSH
14999: LD_VAR 0 7
15003: STR
15004: PUSH
15005: LD_STRING )
15007: STR
15008: PPUSH
15009: CALL_OW 559
// end ; end ;
15013: GO 14630
15015: POP
15016: POP
// end ; end_of_file
15017: LD_VAR 0 1
15021: RET
// var respawn , inqueue ; export function init_respawning ; begin
15022: LD_INT 0
15024: PPUSH
// respawn := Rand ( 1 , 8 ) ;
15025: LD_ADDR_LOC 31
15029: PUSH
15030: LD_INT 1
15032: PPUSH
15033: LD_INT 8
15035: PPUSH
15036: CALL_OW 12
15040: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15041: LD_ADDR_LOC 32
15045: PUSH
15046: LD_INT 0
15048: PUSH
15049: LD_INT 0
15051: PUSH
15052: LD_INT 0
15054: PUSH
15055: LD_INT 0
15057: PUSH
15058: LD_INT 0
15060: PUSH
15061: LD_INT 0
15063: PUSH
15064: LD_INT 0
15066: PUSH
15067: LD_INT 0
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: ST_TO_ADDR
// end ;
15080: LD_VAR 0 1
15084: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
15085: GO 15087
15087: DISABLE
15088: LD_INT 0
15090: PPUSH
15091: PPUSH
15092: PPUSH
// begin if respawning_time_max = 0 then
15093: LD_EXP 13
15097: PUSH
15098: LD_INT 0
15100: EQUAL
15101: IFFALSE 15105
// exit ;
15103: GO 15513
// if respawn = 8 then
15105: LD_LOC 31
15109: PUSH
15110: LD_INT 8
15112: EQUAL
15113: IFFALSE 15125
// respawn := 1 else
15115: LD_ADDR_LOC 31
15119: PUSH
15120: LD_INT 1
15122: ST_TO_ADDR
15123: GO 15139
// respawn := respawn + 1 ;
15125: LD_ADDR_LOC 31
15129: PUSH
15130: LD_LOC 31
15134: PUSH
15135: LD_INT 1
15137: PLUS
15138: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
15139: LD_EXP 18
15143: PUSH
15144: LD_LOC 31
15148: ARRAY
15149: PUSH
15150: LD_LOC 32
15154: PUSH
15155: LD_LOC 31
15159: ARRAY
15160: NOT
15161: AND
15162: IFFALSE 15512
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
15164: LD_ADDR_VAR 0 1
15168: PUSH
15169: LD_INT 21
15171: PUSH
15172: LD_INT 1
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: LD_INT 22
15181: PUSH
15182: LD_LOC 31
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 3
15193: PUSH
15194: LD_INT 23
15196: PUSH
15197: LD_INT 0
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: PPUSH
15210: CALL_OW 69
15214: ST_TO_ADDR
// if n < number_of_people then
15215: LD_VAR 0 1
15219: PUSH
15220: LD_EXP 5
15224: LESS
15225: IFFALSE 15509
// begin aktresp := respawn ;
15227: LD_ADDR_VAR 0 3
15231: PUSH
15232: LD_LOC 31
15236: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
15237: LD_ADDR_LOC 32
15241: PUSH
15242: LD_LOC 32
15246: PPUSH
15247: LD_VAR 0 3
15251: PPUSH
15252: LD_INT 1
15254: PPUSH
15255: CALL_OW 1
15259: ST_TO_ADDR
// enable ;
15260: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
15261: LD_EXP 12
15265: PPUSH
15266: LD_EXP 13
15270: PPUSH
15271: CALL_OW 12
15275: PPUSH
15276: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
15280: LD_ADDR_LOC 32
15284: PUSH
15285: LD_LOC 32
15289: PPUSH
15290: LD_VAR 0 3
15294: PPUSH
15295: LD_INT 0
15297: PPUSH
15298: CALL_OW 1
15302: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
15303: LD_ADDR_VAR 0 2
15307: PUSH
15308: LD_INT 21
15310: PUSH
15311: LD_INT 3
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 2
15320: PUSH
15321: LD_INT 30
15323: PUSH
15324: LD_INT 0
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 30
15333: PUSH
15334: LD_INT 1
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 50
15348: PUSH
15349: EMPTY
15350: LIST
15351: PUSH
15352: LD_INT 22
15354: PUSH
15355: LD_VAR 0 3
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: PPUSH
15370: CALL_OW 69
15374: ST_TO_ADDR
// if dep = 0 then
15375: LD_VAR 0 2
15379: PUSH
15380: LD_INT 0
15382: EQUAL
15383: IFFALSE 15387
// exit ;
15385: GO 15513
// hc_name :=  ;
15387: LD_ADDR_OWVAR 26
15391: PUSH
15392: LD_STRING 
15394: ST_TO_ADDR
// hc_importance := 0 ;
15395: LD_ADDR_OWVAR 32
15399: PUSH
15400: LD_INT 0
15402: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
15403: LD_INT 0
15405: PPUSH
15406: LD_INT 0
15408: PPUSH
15409: LD_EXP 6
15413: PUSH
15414: LD_INT 2
15416: DIV
15417: PPUSH
15418: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
15422: LD_ADDR_OWVAR 21
15426: PUSH
15427: LD_EXP 19
15431: PUSH
15432: LD_VAR 0 3
15436: ARRAY
15437: ST_TO_ADDR
// uc_side := aktresp ;
15438: LD_ADDR_OWVAR 20
15442: PUSH
15443: LD_VAR 0 3
15447: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
15448: LD_ADDR_VAR 0 2
15452: PUSH
15453: LD_VAR 0 2
15457: PUSH
15458: LD_INT 1
15460: PPUSH
15461: LD_VAR 0 2
15465: PPUSH
15466: CALL_OW 12
15470: ARRAY
15471: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
15472: CALL_OW 44
15476: PPUSH
15477: LD_VAR 0 2
15481: PPUSH
15482: CALL_OW 250
15486: PPUSH
15487: LD_VAR 0 2
15491: PPUSH
15492: CALL_OW 251
15496: PPUSH
15497: LD_INT 7
15499: PPUSH
15500: LD_INT 1
15502: PPUSH
15503: CALL_OW 50
// end else
15507: GO 15510
// enable ;
15509: ENABLE
// end else
15510: GO 15513
// enable ;
15512: ENABLE
// end ; end_of_file
15513: PPOPN 3
15515: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
15516: LD_INT 0
15518: PPUSH
15519: PPUSH
15520: PPUSH
// BuildUpTime_Delay = 0 ;
15521: LD_ADDR_EXP 60
15525: PUSH
15526: LD_INT 0
15528: ST_TO_ADDR
// if not def_builduptime then
15529: LD_EXP 54
15533: NOT
15534: IFFALSE 15538
// exit ;
15536: GO 15721
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
15538: LD_ADDR_EXP 60
15542: PUSH
15543: LD_INT 8400
15545: PUSH
15546: LD_INT 2100
15548: PUSH
15549: LD_EXP 54
15553: MUL
15554: PLUS
15555: ST_TO_ADDR
// BuildUpTimeActive := true ;
15556: LD_ADDR_EXP 59
15560: PUSH
15561: LD_INT 1
15563: ST_TO_ADDR
// for i := 1 to 8 do
15564: LD_ADDR_VAR 0 2
15568: PUSH
15569: DOUBLE
15570: LD_INT 1
15572: DEC
15573: ST_TO_ADDR
15574: LD_INT 8
15576: PUSH
15577: FOR_TO
15578: IFFALSE 15719
// if Side_Positions [ i ] then
15580: LD_EXP 18
15584: PUSH
15585: LD_VAR 0 2
15589: ARRAY
15590: IFFALSE 15717
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
15592: LD_EXP 58
15596: PUSH
15597: LD_EXP 18
15601: PUSH
15602: LD_VAR 0 2
15606: ARRAY
15607: ARRAY
15608: PPUSH
15609: LD_INT 5
15611: PPUSH
15612: CALL_OW 424
// for j := 1 to 8 do
15616: LD_ADDR_VAR 0 3
15620: PUSH
15621: DOUBLE
15622: LD_INT 1
15624: DEC
15625: ST_TO_ADDR
15626: LD_INT 8
15628: PUSH
15629: FOR_TO
15630: IFFALSE 15715
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15632: LD_EXP 18
15636: PUSH
15637: LD_VAR 0 3
15641: ARRAY
15642: PUSH
15643: LD_EXP 16
15647: PUSH
15648: LD_VAR 0 2
15652: ARRAY
15653: PUSH
15654: LD_EXP 16
15658: PUSH
15659: LD_VAR 0 3
15663: ARRAY
15664: NONEQUAL
15665: PUSH
15666: LD_EXP 20
15670: NOT
15671: PUSH
15672: LD_VAR 0 2
15676: PUSH
15677: LD_VAR 0 3
15681: NONEQUAL
15682: AND
15683: OR
15684: AND
15685: IFFALSE 15713
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15687: LD_VAR 0 3
15691: PPUSH
15692: LD_EXP 58
15696: PUSH
15697: LD_EXP 18
15701: PUSH
15702: LD_VAR 0 2
15706: ARRAY
15707: ARRAY
15708: PPUSH
15709: CALL_OW 333
15713: GO 15629
15715: POP
15716: POP
// end ;
15717: GO 15577
15719: POP
15720: POP
// end ;
15721: LD_VAR 0 1
15725: RET
// export function EndBuildUp ; var i , j ; begin
15726: LD_INT 0
15728: PPUSH
15729: PPUSH
15730: PPUSH
// BuildUpTimeActive := false ;
15731: LD_ADDR_EXP 59
15735: PUSH
15736: LD_INT 0
15738: ST_TO_ADDR
// for i := 1 to 8 do
15739: LD_ADDR_VAR 0 2
15743: PUSH
15744: DOUBLE
15745: LD_INT 1
15747: DEC
15748: ST_TO_ADDR
15749: LD_INT 8
15751: PUSH
15752: FOR_TO
15753: IFFALSE 15894
// if Side_Positions [ i ] then
15755: LD_EXP 18
15759: PUSH
15760: LD_VAR 0 2
15764: ARRAY
15765: IFFALSE 15892
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
15767: LD_EXP 58
15771: PUSH
15772: LD_EXP 18
15776: PUSH
15777: LD_VAR 0 2
15781: ARRAY
15782: ARRAY
15783: PPUSH
15784: LD_INT 0
15786: PPUSH
15787: CALL_OW 424
// for j := 1 to 8 do
15791: LD_ADDR_VAR 0 3
15795: PUSH
15796: DOUBLE
15797: LD_INT 1
15799: DEC
15800: ST_TO_ADDR
15801: LD_INT 8
15803: PUSH
15804: FOR_TO
15805: IFFALSE 15890
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15807: LD_EXP 18
15811: PUSH
15812: LD_VAR 0 3
15816: ARRAY
15817: PUSH
15818: LD_EXP 16
15822: PUSH
15823: LD_VAR 0 2
15827: ARRAY
15828: PUSH
15829: LD_EXP 16
15833: PUSH
15834: LD_VAR 0 3
15838: ARRAY
15839: NONEQUAL
15840: PUSH
15841: LD_EXP 20
15845: NOT
15846: PUSH
15847: LD_VAR 0 2
15851: PUSH
15852: LD_VAR 0 3
15856: NONEQUAL
15857: AND
15858: OR
15859: AND
15860: IFFALSE 15888
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15862: LD_VAR 0 3
15866: PPUSH
15867: LD_EXP 58
15871: PUSH
15872: LD_EXP 18
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: ARRAY
15883: PPUSH
15884: CALL_OW 334
15888: GO 15804
15890: POP
15891: POP
// end ;
15892: GO 15752
15894: POP
15895: POP
// end ;
15896: LD_VAR 0 1
15900: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
15901: LD_EXP 59
15905: IFFALSE 16080
15907: GO 15909
15909: DISABLE
15910: LD_INT 0
15912: PPUSH
15913: PPUSH
// begin for i := 1 to 8 do
15914: LD_ADDR_VAR 0 1
15918: PUSH
15919: DOUBLE
15920: LD_INT 1
15922: DEC
15923: ST_TO_ADDR
15924: LD_INT 8
15926: PUSH
15927: FOR_TO
15928: IFFALSE 16077
// if Side_Positions [ i ] then
15930: LD_EXP 18
15934: PUSH
15935: LD_VAR 0 1
15939: ARRAY
15940: IFFALSE 16075
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
15942: LD_ADDR_VAR 0 2
15946: PUSH
15947: LD_EXP 58
15951: PUSH
15952: LD_EXP 18
15956: PUSH
15957: LD_VAR 0 1
15961: ARRAY
15962: ARRAY
15963: PPUSH
15964: LD_INT 2
15966: PUSH
15967: LD_INT 21
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: LD_INT 21
15979: PUSH
15980: LD_INT 2
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 22
15994: PUSH
15995: LD_OWVAR 2
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PPUSH
16008: CALL_OW 70
16012: PUSH
16013: FOR_IN
16014: IFFALSE 16073
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
16016: LD_EXP 16
16020: PUSH
16021: LD_VAR 0 1
16025: ARRAY
16026: PUSH
16027: LD_EXP 16
16031: PUSH
16032: LD_OWVAR 2
16036: ARRAY
16037: NONEQUAL
16038: PUSH
16039: LD_EXP 20
16043: NOT
16044: PUSH
16045: LD_VAR 0 1
16049: PUSH
16050: LD_OWVAR 2
16054: NONEQUAL
16055: AND
16056: OR
16057: IFFALSE 16071
// ComMoveToArea ( un , BuildUpEscape ) ;
16059: LD_VAR 0 2
16063: PPUSH
16064: LD_INT 22
16066: PPUSH
16067: CALL_OW 113
16071: GO 16013
16073: POP
16074: POP
16075: GO 15927
16077: POP
16078: POP
// enable ;
16079: ENABLE
// end ;
16080: PPOPN 2
16082: END
// every 0 0$1 trigger def_builduptime do
16083: LD_EXP 54
16087: IFFALSE 16113
16089: GO 16091
16091: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
16092: LD_INT 8400
16094: PUSH
16095: LD_EXP 54
16099: PUSH
16100: LD_INT 2100
16102: MUL
16103: PLUS
16104: PPUSH
16105: CALL_OW 67
// EndBuildUp ;
16109: CALL 15726 0 0
// end ; end_of_file
16113: END
// export function SetMpTechs ( ) ; var side , i ; begin
16114: LD_INT 0
16116: PPUSH
16117: PPUSH
16118: PPUSH
// for side = 1 to 8 do
16119: LD_ADDR_VAR 0 2
16123: PUSH
16124: DOUBLE
16125: LD_INT 1
16127: DEC
16128: ST_TO_ADDR
16129: LD_INT 8
16131: PUSH
16132: FOR_TO
16133: IFFALSE 16254
// begin for i = 1 to 72 do
16135: LD_ADDR_VAR 0 3
16139: PUSH
16140: DOUBLE
16141: LD_INT 1
16143: DEC
16144: ST_TO_ADDR
16145: LD_INT 72
16147: PUSH
16148: FOR_TO
16149: IFFALSE 16180
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
16151: LD_VAR 0 3
16155: PPUSH
16156: LD_VAR 0 2
16160: PPUSH
16161: LD_INT 0
16163: PPUSH
16164: LD_VAR 0 3
16168: PPUSH
16169: CALL_OW 565
16173: PPUSH
16174: CALL_OW 322
16178: GO 16148
16180: POP
16181: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
16182: LD_INT 73
16184: PPUSH
16185: LD_VAR 0 2
16189: PPUSH
16190: LD_INT 0
16192: PPUSH
16193: LD_INT 25
16195: PPUSH
16196: CALL_OW 565
16200: PPUSH
16201: CALL_OW 322
// for i = 0 to 40 do
16205: LD_ADDR_VAR 0 3
16209: PUSH
16210: DOUBLE
16211: LD_INT 0
16213: DEC
16214: ST_TO_ADDR
16215: LD_INT 40
16217: PUSH
16218: FOR_TO
16219: IFFALSE 16250
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
16221: LD_VAR 0 3
16225: PPUSH
16226: LD_VAR 0 2
16230: PPUSH
16231: LD_INT 1
16233: PPUSH
16234: LD_VAR 0 3
16238: PPUSH
16239: CALL_OW 565
16243: PPUSH
16244: CALL_OW 324
16248: GO 16218
16250: POP
16251: POP
// end ;
16252: GO 16132
16254: POP
16255: POP
// end ;
16256: LD_VAR 0 1
16260: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
16261: LD_INT 0
16263: PPUSH
16264: PPUSH
16265: PPUSH
// for side = 1 to 8 do
16266: LD_ADDR_VAR 0 3
16270: PUSH
16271: DOUBLE
16272: LD_INT 1
16274: DEC
16275: ST_TO_ADDR
16276: LD_INT 8
16278: PUSH
16279: FOR_TO
16280: IFFALSE 20276
// begin for i = 1 to 73 do
16282: LD_ADDR_VAR 0 4
16286: PUSH
16287: DOUBLE
16288: LD_INT 1
16290: DEC
16291: ST_TO_ADDR
16292: LD_INT 73
16294: PUSH
16295: FOR_TO
16296: IFFALSE 16317
// SetTech ( i , side , state_disabled ) ;
16298: LD_VAR 0 4
16302: PPUSH
16303: LD_VAR 0 3
16307: PPUSH
16308: LD_INT 0
16310: PPUSH
16311: CALL_OW 322
16315: GO 16295
16317: POP
16318: POP
// for i = 0 to 40 do
16319: LD_ADDR_VAR 0 4
16323: PUSH
16324: DOUBLE
16325: LD_INT 0
16327: DEC
16328: ST_TO_ADDR
16329: LD_INT 40
16331: PUSH
16332: FOR_TO
16333: IFFALSE 16354
// SetRestrict ( i , side , false ) ;
16335: LD_VAR 0 4
16339: PPUSH
16340: LD_VAR 0 3
16344: PPUSH
16345: LD_INT 0
16347: PPUSH
16348: CALL_OW 324
16352: GO 16332
16354: POP
16355: POP
// case level of 1 :
16356: LD_VAR 0 1
16360: PUSH
16361: LD_INT 1
16363: DOUBLE
16364: EQUAL
16365: IFTRUE 16369
16367: GO 16522
16369: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16370: LD_INT 35
16372: PPUSH
16373: LD_VAR 0 3
16377: PPUSH
16378: LD_INT 1
16380: PPUSH
16381: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16385: LD_INT 45
16387: PPUSH
16388: LD_VAR 0 3
16392: PPUSH
16393: LD_INT 1
16395: PPUSH
16396: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16400: LD_INT 46
16402: PPUSH
16403: LD_VAR 0 3
16407: PPUSH
16408: LD_INT 1
16410: PPUSH
16411: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16415: LD_INT 47
16417: PPUSH
16418: LD_VAR 0 3
16422: PPUSH
16423: LD_INT 1
16425: PPUSH
16426: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16430: LD_INT 0
16432: PPUSH
16433: LD_VAR 0 3
16437: PPUSH
16438: LD_INT 1
16440: PPUSH
16441: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16445: LD_INT 2
16447: PPUSH
16448: LD_VAR 0 3
16452: PPUSH
16453: LD_INT 1
16455: PPUSH
16456: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16460: LD_INT 4
16462: PPUSH
16463: LD_VAR 0 3
16467: PPUSH
16468: LD_INT 1
16470: PPUSH
16471: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16475: LD_INT 6
16477: PPUSH
16478: LD_VAR 0 3
16482: PPUSH
16483: LD_INT 1
16485: PPUSH
16486: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16490: LD_INT 29
16492: PPUSH
16493: LD_VAR 0 3
16497: PPUSH
16498: LD_INT 1
16500: PPUSH
16501: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16505: LD_INT 31
16507: PPUSH
16508: LD_VAR 0 3
16512: PPUSH
16513: LD_INT 1
16515: PPUSH
16516: CALL_OW 324
// end ; 2 :
16520: GO 20274
16522: LD_INT 2
16524: DOUBLE
16525: EQUAL
16526: IFTRUE 16530
16528: GO 16728
16530: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16531: LD_INT 35
16533: PPUSH
16534: LD_VAR 0 3
16538: PPUSH
16539: LD_INT 1
16541: PPUSH
16542: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16546: LD_INT 45
16548: PPUSH
16549: LD_VAR 0 3
16553: PPUSH
16554: LD_INT 1
16556: PPUSH
16557: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16561: LD_INT 46
16563: PPUSH
16564: LD_VAR 0 3
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16576: LD_INT 47
16578: PPUSH
16579: LD_VAR 0 3
16583: PPUSH
16584: LD_INT 1
16586: PPUSH
16587: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16591: LD_INT 1
16593: PPUSH
16594: LD_VAR 0 3
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16606: LD_INT 2
16608: PPUSH
16609: LD_VAR 0 3
16613: PPUSH
16614: LD_INT 1
16616: PPUSH
16617: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16621: LD_INT 11
16623: PPUSH
16624: LD_VAR 0 3
16628: PPUSH
16629: LD_INT 1
16631: PPUSH
16632: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16636: LD_INT 0
16638: PPUSH
16639: LD_VAR 0 3
16643: PPUSH
16644: LD_INT 1
16646: PPUSH
16647: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16651: LD_INT 2
16653: PPUSH
16654: LD_VAR 0 3
16658: PPUSH
16659: LD_INT 1
16661: PPUSH
16662: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16666: LD_INT 4
16668: PPUSH
16669: LD_VAR 0 3
16673: PPUSH
16674: LD_INT 1
16676: PPUSH
16677: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16681: LD_INT 6
16683: PPUSH
16684: LD_VAR 0 3
16688: PPUSH
16689: LD_INT 1
16691: PPUSH
16692: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16696: LD_INT 29
16698: PPUSH
16699: LD_VAR 0 3
16703: PPUSH
16704: LD_INT 1
16706: PPUSH
16707: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16711: LD_INT 31
16713: PPUSH
16714: LD_VAR 0 3
16718: PPUSH
16719: LD_INT 1
16721: PPUSH
16722: CALL_OW 324
// end ; 3 :
16726: GO 20274
16728: LD_INT 3
16730: DOUBLE
16731: EQUAL
16732: IFTRUE 16736
16734: GO 17189
16736: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16737: LD_INT 35
16739: PPUSH
16740: LD_VAR 0 3
16744: PPUSH
16745: LD_INT 1
16747: PPUSH
16748: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16752: LD_INT 45
16754: PPUSH
16755: LD_VAR 0 3
16759: PPUSH
16760: LD_INT 1
16762: PPUSH
16763: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16767: LD_INT 46
16769: PPUSH
16770: LD_VAR 0 3
16774: PPUSH
16775: LD_INT 1
16777: PPUSH
16778: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16782: LD_INT 47
16784: PPUSH
16785: LD_VAR 0 3
16789: PPUSH
16790: LD_INT 1
16792: PPUSH
16793: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16797: LD_INT 1
16799: PPUSH
16800: LD_VAR 0 3
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16812: LD_INT 2
16814: PPUSH
16815: LD_VAR 0 3
16819: PPUSH
16820: LD_INT 1
16822: PPUSH
16823: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16827: LD_INT 11
16829: PPUSH
16830: LD_VAR 0 3
16834: PPUSH
16835: LD_INT 1
16837: PPUSH
16838: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16842: LD_INT 48
16844: PPUSH
16845: LD_VAR 0 3
16849: PPUSH
16850: LD_INT 1
16852: PPUSH
16853: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16857: LD_INT 69
16859: PPUSH
16860: LD_VAR 0 3
16864: PPUSH
16865: LD_INT 1
16867: PPUSH
16868: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16872: LD_INT 39
16874: PPUSH
16875: LD_VAR 0 3
16879: PPUSH
16880: LD_INT 1
16882: PPUSH
16883: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16887: LD_INT 43
16889: PPUSH
16890: LD_VAR 0 3
16894: PPUSH
16895: LD_INT 1
16897: PPUSH
16898: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16902: LD_INT 51
16904: PPUSH
16905: LD_VAR 0 3
16909: PPUSH
16910: LD_INT 1
16912: PPUSH
16913: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16917: LD_INT 6
16919: PPUSH
16920: LD_VAR 0 3
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16932: LD_INT 0
16934: PPUSH
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 1
16942: PPUSH
16943: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16947: LD_INT 2
16949: PPUSH
16950: LD_VAR 0 3
16954: PPUSH
16955: LD_INT 1
16957: PPUSH
16958: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16962: LD_INT 3
16964: PPUSH
16965: LD_VAR 0 3
16969: PPUSH
16970: LD_INT 1
16972: PPUSH
16973: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16977: LD_INT 4
16979: PPUSH
16980: LD_VAR 0 3
16984: PPUSH
16985: LD_INT 1
16987: PPUSH
16988: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16992: LD_INT 6
16994: PPUSH
16995: LD_VAR 0 3
16999: PPUSH
17000: LD_INT 1
17002: PPUSH
17003: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17007: LD_INT 7
17009: PPUSH
17010: LD_VAR 0 3
17014: PPUSH
17015: LD_INT 1
17017: PPUSH
17018: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17022: LD_INT 8
17024: PPUSH
17025: LD_VAR 0 3
17029: PPUSH
17030: LD_INT 1
17032: PPUSH
17033: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17037: LD_INT 10
17039: PPUSH
17040: LD_VAR 0 3
17044: PPUSH
17045: LD_INT 1
17047: PPUSH
17048: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17052: LD_INT 15
17054: PPUSH
17055: LD_VAR 0 3
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17067: LD_INT 16
17069: PPUSH
17070: LD_VAR 0 3
17074: PPUSH
17075: LD_INT 1
17077: PPUSH
17078: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17082: LD_INT 17
17084: PPUSH
17085: LD_VAR 0 3
17089: PPUSH
17090: LD_INT 1
17092: PPUSH
17093: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17097: LD_INT 20
17099: PPUSH
17100: LD_VAR 0 3
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17112: LD_INT 26
17114: PPUSH
17115: LD_VAR 0 3
17119: PPUSH
17120: LD_INT 1
17122: PPUSH
17123: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17127: LD_INT 27
17129: PPUSH
17130: LD_VAR 0 3
17134: PPUSH
17135: LD_INT 1
17137: PPUSH
17138: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17142: LD_INT 29
17144: PPUSH
17145: LD_VAR 0 3
17149: PPUSH
17150: LD_INT 1
17152: PPUSH
17153: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17157: LD_INT 31
17159: PPUSH
17160: LD_VAR 0 3
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17172: LD_INT 32
17174: PPUSH
17175: LD_VAR 0 3
17179: PPUSH
17180: LD_INT 1
17182: PPUSH
17183: CALL_OW 324
// end ; 4 :
17187: GO 20274
17189: LD_INT 4
17191: DOUBLE
17192: EQUAL
17193: IFTRUE 17197
17195: GO 18145
17197: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17198: LD_INT 35
17200: PPUSH
17201: LD_VAR 0 3
17205: PPUSH
17206: LD_INT 1
17208: PPUSH
17209: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17213: LD_INT 45
17215: PPUSH
17216: LD_VAR 0 3
17220: PPUSH
17221: LD_INT 1
17223: PPUSH
17224: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17228: LD_INT 46
17230: PPUSH
17231: LD_VAR 0 3
17235: PPUSH
17236: LD_INT 1
17238: PPUSH
17239: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17243: LD_INT 47
17245: PPUSH
17246: LD_VAR 0 3
17250: PPUSH
17251: LD_INT 1
17253: PPUSH
17254: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17258: LD_INT 1
17260: PPUSH
17261: LD_VAR 0 3
17265: PPUSH
17266: LD_INT 1
17268: PPUSH
17269: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17273: LD_INT 2
17275: PPUSH
17276: LD_VAR 0 3
17280: PPUSH
17281: LD_INT 1
17283: PPUSH
17284: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17288: LD_INT 11
17290: PPUSH
17291: LD_VAR 0 3
17295: PPUSH
17296: LD_INT 1
17298: PPUSH
17299: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17303: LD_INT 20
17305: PPUSH
17306: LD_VAR 0 3
17310: PPUSH
17311: LD_INT 1
17313: PPUSH
17314: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17318: LD_INT 48
17320: PPUSH
17321: LD_VAR 0 3
17325: PPUSH
17326: LD_INT 1
17328: PPUSH
17329: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17333: LD_INT 49
17335: PPUSH
17336: LD_VAR 0 3
17340: PPUSH
17341: LD_INT 1
17343: PPUSH
17344: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17348: LD_INT 69
17350: PPUSH
17351: LD_VAR 0 3
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17363: LD_INT 39
17365: PPUSH
17366: LD_VAR 0 3
17370: PPUSH
17371: LD_INT 1
17373: PPUSH
17374: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17378: LD_INT 34
17380: PPUSH
17381: LD_VAR 0 3
17385: PPUSH
17386: LD_INT 1
17388: PPUSH
17389: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17393: LD_INT 42
17395: PPUSH
17396: LD_VAR 0 3
17400: PPUSH
17401: LD_INT 1
17403: PPUSH
17404: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17408: LD_INT 44
17410: PPUSH
17411: LD_VAR 0 3
17415: PPUSH
17416: LD_INT 1
17418: PPUSH
17419: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17423: LD_INT 41
17425: PPUSH
17426: LD_VAR 0 3
17430: PPUSH
17431: LD_INT 1
17433: PPUSH
17434: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17438: LD_INT 43
17440: PPUSH
17441: LD_VAR 0 3
17445: PPUSH
17446: LD_INT 1
17448: PPUSH
17449: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17453: LD_INT 70
17455: PPUSH
17456: LD_VAR 0 3
17460: PPUSH
17461: LD_INT 1
17463: PPUSH
17464: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17468: LD_INT 51
17470: PPUSH
17471: LD_VAR 0 3
17475: PPUSH
17476: LD_INT 1
17478: PPUSH
17479: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17483: LD_INT 52
17485: PPUSH
17486: LD_VAR 0 3
17490: PPUSH
17491: LD_INT 1
17493: PPUSH
17494: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17498: LD_INT 6
17500: PPUSH
17501: LD_VAR 0 3
17505: PPUSH
17506: LD_INT 1
17508: PPUSH
17509: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17513: LD_INT 15
17515: PPUSH
17516: LD_VAR 0 3
17520: PPUSH
17521: LD_INT 1
17523: PPUSH
17524: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17528: LD_INT 7
17530: PPUSH
17531: LD_VAR 0 3
17535: PPUSH
17536: LD_INT 1
17538: PPUSH
17539: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17543: LD_INT 12
17545: PPUSH
17546: LD_VAR 0 3
17550: PPUSH
17551: LD_INT 1
17553: PPUSH
17554: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17558: LD_INT 18
17560: PPUSH
17561: LD_VAR 0 3
17565: PPUSH
17566: LD_INT 1
17568: PPUSH
17569: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17573: LD_INT 60
17575: PPUSH
17576: LD_VAR 0 3
17580: PPUSH
17581: LD_INT 1
17583: PPUSH
17584: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17588: LD_INT 9
17590: PPUSH
17591: LD_VAR 0 3
17595: PPUSH
17596: LD_INT 1
17598: PPUSH
17599: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17603: LD_INT 30
17605: PPUSH
17606: LD_VAR 0 3
17610: PPUSH
17611: LD_INT 1
17613: PPUSH
17614: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17618: LD_INT 37
17620: PPUSH
17621: LD_VAR 0 3
17625: PPUSH
17626: LD_INT 1
17628: PPUSH
17629: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17633: LD_INT 5
17635: PPUSH
17636: LD_VAR 0 3
17640: PPUSH
17641: LD_INT 1
17643: PPUSH
17644: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17648: LD_INT 66
17650: PPUSH
17651: LD_VAR 0 3
17655: PPUSH
17656: LD_INT 1
17658: PPUSH
17659: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17663: LD_INT 21
17665: PPUSH
17666: LD_VAR 0 3
17670: PPUSH
17671: LD_INT 1
17673: PPUSH
17674: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17678: LD_INT 22
17680: PPUSH
17681: LD_VAR 0 3
17685: PPUSH
17686: LD_INT 1
17688: PPUSH
17689: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17693: LD_INT 54
17695: PPUSH
17696: LD_VAR 0 3
17700: PPUSH
17701: LD_INT 1
17703: PPUSH
17704: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17708: LD_INT 0
17710: PPUSH
17711: LD_VAR 0 3
17715: PPUSH
17716: LD_INT 1
17718: PPUSH
17719: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17723: LD_INT 1
17725: PPUSH
17726: LD_VAR 0 3
17730: PPUSH
17731: LD_INT 1
17733: PPUSH
17734: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17738: LD_INT 2
17740: PPUSH
17741: LD_VAR 0 3
17745: PPUSH
17746: LD_INT 1
17748: PPUSH
17749: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17753: LD_INT 3
17755: PPUSH
17756: LD_VAR 0 3
17760: PPUSH
17761: LD_INT 1
17763: PPUSH
17764: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17768: LD_INT 4
17770: PPUSH
17771: LD_VAR 0 3
17775: PPUSH
17776: LD_INT 1
17778: PPUSH
17779: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17783: LD_INT 5
17785: PPUSH
17786: LD_VAR 0 3
17790: PPUSH
17791: LD_INT 1
17793: PPUSH
17794: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17798: LD_INT 6
17800: PPUSH
17801: LD_VAR 0 3
17805: PPUSH
17806: LD_INT 1
17808: PPUSH
17809: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17813: LD_INT 7
17815: PPUSH
17816: LD_VAR 0 3
17820: PPUSH
17821: LD_INT 1
17823: PPUSH
17824: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17828: LD_INT 8
17830: PPUSH
17831: LD_VAR 0 3
17835: PPUSH
17836: LD_INT 1
17838: PPUSH
17839: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17843: LD_INT 10
17845: PPUSH
17846: LD_VAR 0 3
17850: PPUSH
17851: LD_INT 1
17853: PPUSH
17854: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17858: LD_INT 11
17860: PPUSH
17861: LD_VAR 0 3
17865: PPUSH
17866: LD_INT 1
17868: PPUSH
17869: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17873: LD_INT 12
17875: PPUSH
17876: LD_VAR 0 3
17880: PPUSH
17881: LD_INT 1
17883: PPUSH
17884: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17888: LD_INT 13
17890: PPUSH
17891: LD_VAR 0 3
17895: PPUSH
17896: LD_INT 1
17898: PPUSH
17899: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17903: LD_INT 14
17905: PPUSH
17906: LD_VAR 0 3
17910: PPUSH
17911: LD_INT 1
17913: PPUSH
17914: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17918: LD_INT 15
17920: PPUSH
17921: LD_VAR 0 3
17925: PPUSH
17926: LD_INT 1
17928: PPUSH
17929: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17933: LD_INT 16
17935: PPUSH
17936: LD_VAR 0 3
17940: PPUSH
17941: LD_INT 1
17943: PPUSH
17944: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17948: LD_INT 17
17950: PPUSH
17951: LD_VAR 0 3
17955: PPUSH
17956: LD_INT 1
17958: PPUSH
17959: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17963: LD_INT 19
17965: PPUSH
17966: LD_VAR 0 3
17970: PPUSH
17971: LD_INT 1
17973: PPUSH
17974: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17978: LD_INT 20
17980: PPUSH
17981: LD_VAR 0 3
17985: PPUSH
17986: LD_INT 1
17988: PPUSH
17989: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17993: LD_INT 21
17995: PPUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: LD_INT 1
18003: PPUSH
18004: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18008: LD_INT 23
18010: PPUSH
18011: LD_VAR 0 3
18015: PPUSH
18016: LD_INT 1
18018: PPUSH
18019: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18023: LD_INT 26
18025: PPUSH
18026: LD_VAR 0 3
18030: PPUSH
18031: LD_INT 1
18033: PPUSH
18034: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18038: LD_INT 27
18040: PPUSH
18041: LD_VAR 0 3
18045: PPUSH
18046: LD_INT 1
18048: PPUSH
18049: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18053: LD_INT 28
18055: PPUSH
18056: LD_VAR 0 3
18060: PPUSH
18061: LD_INT 1
18063: PPUSH
18064: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18068: LD_INT 29
18070: PPUSH
18071: LD_VAR 0 3
18075: PPUSH
18076: LD_INT 1
18078: PPUSH
18079: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18083: LD_INT 30
18085: PPUSH
18086: LD_VAR 0 3
18090: PPUSH
18091: LD_INT 1
18093: PPUSH
18094: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18098: LD_INT 31
18100: PPUSH
18101: LD_VAR 0 3
18105: PPUSH
18106: LD_INT 1
18108: PPUSH
18109: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18113: LD_INT 32
18115: PPUSH
18116: LD_VAR 0 3
18120: PPUSH
18121: LD_INT 1
18123: PPUSH
18124: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18128: LD_INT 36
18130: PPUSH
18131: LD_VAR 0 3
18135: PPUSH
18136: LD_INT 1
18138: PPUSH
18139: CALL_OW 324
// end ; 5 :
18143: GO 20274
18145: LD_INT 5
18147: DOUBLE
18148: EQUAL
18149: IFTRUE 18153
18151: GO 19266
18153: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18154: LD_INT 35
18156: PPUSH
18157: LD_VAR 0 3
18161: PPUSH
18162: LD_INT 1
18164: PPUSH
18165: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18169: LD_INT 45
18171: PPUSH
18172: LD_VAR 0 3
18176: PPUSH
18177: LD_INT 1
18179: PPUSH
18180: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18184: LD_INT 46
18186: PPUSH
18187: LD_VAR 0 3
18191: PPUSH
18192: LD_INT 1
18194: PPUSH
18195: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18199: LD_INT 47
18201: PPUSH
18202: LD_VAR 0 3
18206: PPUSH
18207: LD_INT 1
18209: PPUSH
18210: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18214: LD_INT 1
18216: PPUSH
18217: LD_VAR 0 3
18221: PPUSH
18222: LD_INT 1
18224: PPUSH
18225: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18229: LD_INT 2
18231: PPUSH
18232: LD_VAR 0 3
18236: PPUSH
18237: LD_INT 1
18239: PPUSH
18240: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18244: LD_INT 11
18246: PPUSH
18247: LD_VAR 0 3
18251: PPUSH
18252: LD_INT 1
18254: PPUSH
18255: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18259: LD_INT 20
18261: PPUSH
18262: LD_VAR 0 3
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18274: LD_INT 48
18276: PPUSH
18277: LD_VAR 0 3
18281: PPUSH
18282: LD_INT 1
18284: PPUSH
18285: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18289: LD_INT 49
18291: PPUSH
18292: LD_VAR 0 3
18296: PPUSH
18297: LD_INT 1
18299: PPUSH
18300: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18304: LD_INT 69
18306: PPUSH
18307: LD_VAR 0 3
18311: PPUSH
18312: LD_INT 1
18314: PPUSH
18315: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18319: LD_INT 39
18321: PPUSH
18322: LD_VAR 0 3
18326: PPUSH
18327: LD_INT 1
18329: PPUSH
18330: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18334: LD_INT 34
18336: PPUSH
18337: LD_VAR 0 3
18341: PPUSH
18342: LD_INT 1
18344: PPUSH
18345: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18349: LD_INT 42
18351: PPUSH
18352: LD_VAR 0 3
18356: PPUSH
18357: LD_INT 1
18359: PPUSH
18360: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18364: LD_INT 44
18366: PPUSH
18367: LD_VAR 0 3
18371: PPUSH
18372: LD_INT 1
18374: PPUSH
18375: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18379: LD_INT 41
18381: PPUSH
18382: LD_VAR 0 3
18386: PPUSH
18387: LD_INT 1
18389: PPUSH
18390: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18394: LD_INT 40
18396: PPUSH
18397: LD_VAR 0 3
18401: PPUSH
18402: LD_INT 1
18404: PPUSH
18405: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18409: LD_INT 43
18411: PPUSH
18412: LD_VAR 0 3
18416: PPUSH
18417: LD_INT 1
18419: PPUSH
18420: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18424: LD_INT 70
18426: PPUSH
18427: LD_VAR 0 3
18431: PPUSH
18432: LD_INT 1
18434: PPUSH
18435: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18439: LD_INT 51
18441: PPUSH
18442: LD_VAR 0 3
18446: PPUSH
18447: LD_INT 1
18449: PPUSH
18450: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18454: LD_INT 52
18456: PPUSH
18457: LD_VAR 0 3
18461: PPUSH
18462: LD_INT 1
18464: PPUSH
18465: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18469: LD_INT 6
18471: PPUSH
18472: LD_VAR 0 3
18476: PPUSH
18477: LD_INT 1
18479: PPUSH
18480: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18484: LD_INT 15
18486: PPUSH
18487: LD_VAR 0 3
18491: PPUSH
18492: LD_INT 1
18494: PPUSH
18495: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18499: LD_INT 7
18501: PPUSH
18502: LD_VAR 0 3
18506: PPUSH
18507: LD_INT 1
18509: PPUSH
18510: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18514: LD_INT 12
18516: PPUSH
18517: LD_VAR 0 3
18521: PPUSH
18522: LD_INT 1
18524: PPUSH
18525: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
18529: LD_INT 17
18531: PPUSH
18532: LD_VAR 0 3
18536: PPUSH
18537: LD_INT 1
18539: PPUSH
18540: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18544: LD_INT 18
18546: PPUSH
18547: LD_VAR 0 3
18551: PPUSH
18552: LD_INT 1
18554: PPUSH
18555: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18559: LD_INT 60
18561: PPUSH
18562: LD_VAR 0 3
18566: PPUSH
18567: LD_INT 1
18569: PPUSH
18570: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18574: LD_INT 32
18576: PPUSH
18577: LD_VAR 0 3
18581: PPUSH
18582: LD_INT 1
18584: PPUSH
18585: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18589: LD_INT 9
18591: PPUSH
18592: LD_VAR 0 3
18596: PPUSH
18597: LD_INT 1
18599: PPUSH
18600: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18604: LD_INT 57
18606: PPUSH
18607: LD_VAR 0 3
18611: PPUSH
18612: LD_INT 1
18614: PPUSH
18615: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18619: LD_INT 30
18621: PPUSH
18622: LD_VAR 0 3
18626: PPUSH
18627: LD_INT 1
18629: PPUSH
18630: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18634: LD_INT 37
18636: PPUSH
18637: LD_VAR 0 3
18641: PPUSH
18642: LD_INT 1
18644: PPUSH
18645: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18649: LD_INT 63
18651: PPUSH
18652: LD_VAR 0 3
18656: PPUSH
18657: LD_INT 1
18659: PPUSH
18660: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18664: LD_INT 3
18666: PPUSH
18667: LD_VAR 0 3
18671: PPUSH
18672: LD_INT 1
18674: PPUSH
18675: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18679: LD_INT 4
18681: PPUSH
18682: LD_VAR 0 3
18686: PPUSH
18687: LD_INT 1
18689: PPUSH
18690: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18694: LD_INT 5
18696: PPUSH
18697: LD_VAR 0 3
18701: PPUSH
18702: LD_INT 1
18704: PPUSH
18705: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18709: LD_INT 66
18711: PPUSH
18712: LD_VAR 0 3
18716: PPUSH
18717: LD_INT 1
18719: PPUSH
18720: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18724: LD_INT 21
18726: PPUSH
18727: LD_VAR 0 3
18731: PPUSH
18732: LD_INT 1
18734: PPUSH
18735: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18739: LD_INT 22
18741: PPUSH
18742: LD_VAR 0 3
18746: PPUSH
18747: LD_INT 1
18749: PPUSH
18750: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18754: LD_INT 19
18756: PPUSH
18757: LD_VAR 0 3
18761: PPUSH
18762: LD_INT 1
18764: PPUSH
18765: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18769: LD_INT 54
18771: PPUSH
18772: LD_VAR 0 3
18776: PPUSH
18777: LD_INT 1
18779: PPUSH
18780: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18784: LD_INT 55
18786: PPUSH
18787: LD_VAR 0 3
18791: PPUSH
18792: LD_INT 1
18794: PPUSH
18795: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18799: LD_INT 0
18801: PPUSH
18802: LD_VAR 0 3
18806: PPUSH
18807: LD_INT 1
18809: PPUSH
18810: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18814: LD_INT 1
18816: PPUSH
18817: LD_VAR 0 3
18821: PPUSH
18822: LD_INT 1
18824: PPUSH
18825: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18829: LD_INT 2
18831: PPUSH
18832: LD_VAR 0 3
18836: PPUSH
18837: LD_INT 1
18839: PPUSH
18840: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18844: LD_INT 3
18846: PPUSH
18847: LD_VAR 0 3
18851: PPUSH
18852: LD_INT 1
18854: PPUSH
18855: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18859: LD_INT 4
18861: PPUSH
18862: LD_VAR 0 3
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18874: LD_INT 5
18876: PPUSH
18877: LD_VAR 0 3
18881: PPUSH
18882: LD_INT 1
18884: PPUSH
18885: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18889: LD_INT 6
18891: PPUSH
18892: LD_VAR 0 3
18896: PPUSH
18897: LD_INT 1
18899: PPUSH
18900: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18904: LD_INT 7
18906: PPUSH
18907: LD_VAR 0 3
18911: PPUSH
18912: LD_INT 1
18914: PPUSH
18915: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18919: LD_INT 8
18921: PPUSH
18922: LD_VAR 0 3
18926: PPUSH
18927: LD_INT 1
18929: PPUSH
18930: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18934: LD_INT 10
18936: PPUSH
18937: LD_VAR 0 3
18941: PPUSH
18942: LD_INT 1
18944: PPUSH
18945: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18949: LD_INT 11
18951: PPUSH
18952: LD_VAR 0 3
18956: PPUSH
18957: LD_INT 1
18959: PPUSH
18960: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18964: LD_INT 12
18966: PPUSH
18967: LD_VAR 0 3
18971: PPUSH
18972: LD_INT 1
18974: PPUSH
18975: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18979: LD_INT 13
18981: PPUSH
18982: LD_VAR 0 3
18986: PPUSH
18987: LD_INT 1
18989: PPUSH
18990: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18994: LD_INT 14
18996: PPUSH
18997: LD_VAR 0 3
19001: PPUSH
19002: LD_INT 1
19004: PPUSH
19005: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
19009: LD_INT 15
19011: PPUSH
19012: LD_VAR 0 3
19016: PPUSH
19017: LD_INT 1
19019: PPUSH
19020: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
19024: LD_INT 16
19026: PPUSH
19027: LD_VAR 0 3
19031: PPUSH
19032: LD_INT 1
19034: PPUSH
19035: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
19039: LD_INT 17
19041: PPUSH
19042: LD_VAR 0 3
19046: PPUSH
19047: LD_INT 1
19049: PPUSH
19050: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
19054: LD_INT 18
19056: PPUSH
19057: LD_VAR 0 3
19061: PPUSH
19062: LD_INT 1
19064: PPUSH
19065: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
19069: LD_INT 19
19071: PPUSH
19072: LD_VAR 0 3
19076: PPUSH
19077: LD_INT 1
19079: PPUSH
19080: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
19084: LD_INT 20
19086: PPUSH
19087: LD_VAR 0 3
19091: PPUSH
19092: LD_INT 1
19094: PPUSH
19095: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
19099: LD_INT 21
19101: PPUSH
19102: LD_VAR 0 3
19106: PPUSH
19107: LD_INT 1
19109: PPUSH
19110: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
19114: LD_INT 23
19116: PPUSH
19117: LD_VAR 0 3
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
19129: LD_INT 26
19131: PPUSH
19132: LD_VAR 0 3
19136: PPUSH
19137: LD_INT 1
19139: PPUSH
19140: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
19144: LD_INT 27
19146: PPUSH
19147: LD_VAR 0 3
19151: PPUSH
19152: LD_INT 1
19154: PPUSH
19155: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
19159: LD_INT 28
19161: PPUSH
19162: LD_VAR 0 3
19166: PPUSH
19167: LD_INT 1
19169: PPUSH
19170: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19174: LD_INT 29
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: LD_INT 1
19184: PPUSH
19185: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
19189: LD_INT 30
19191: PPUSH
19192: LD_VAR 0 3
19196: PPUSH
19197: LD_INT 1
19199: PPUSH
19200: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19204: LD_INT 31
19206: PPUSH
19207: LD_VAR 0 3
19211: PPUSH
19212: LD_INT 1
19214: PPUSH
19215: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
19219: LD_INT 32
19221: PPUSH
19222: LD_VAR 0 3
19226: PPUSH
19227: LD_INT 1
19229: PPUSH
19230: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
19234: LD_INT 33
19236: PPUSH
19237: LD_VAR 0 3
19241: PPUSH
19242: LD_INT 1
19244: PPUSH
19245: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
19249: LD_INT 36
19251: PPUSH
19252: LD_VAR 0 3
19256: PPUSH
19257: LD_INT 1
19259: PPUSH
19260: CALL_OW 324
// end ; 6 :
19264: GO 20274
19266: LD_INT 6
19268: DOUBLE
19269: EQUAL
19270: IFTRUE 19274
19272: GO 20199
19274: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19275: LD_INT 35
19277: PPUSH
19278: LD_VAR 0 3
19282: PPUSH
19283: LD_INT 1
19285: PPUSH
19286: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19290: LD_INT 45
19292: PPUSH
19293: LD_VAR 0 3
19297: PPUSH
19298: LD_INT 1
19300: PPUSH
19301: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19305: LD_INT 46
19307: PPUSH
19308: LD_VAR 0 3
19312: PPUSH
19313: LD_INT 1
19315: PPUSH
19316: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19320: LD_INT 47
19322: PPUSH
19323: LD_VAR 0 3
19327: PPUSH
19328: LD_INT 1
19330: PPUSH
19331: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19335: LD_INT 1
19337: PPUSH
19338: LD_VAR 0 3
19342: PPUSH
19343: LD_INT 1
19345: PPUSH
19346: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19350: LD_INT 2
19352: PPUSH
19353: LD_VAR 0 3
19357: PPUSH
19358: LD_INT 1
19360: PPUSH
19361: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19365: LD_INT 11
19367: PPUSH
19368: LD_VAR 0 3
19372: PPUSH
19373: LD_INT 1
19375: PPUSH
19376: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19380: LD_INT 20
19382: PPUSH
19383: LD_VAR 0 3
19387: PPUSH
19388: LD_INT 1
19390: PPUSH
19391: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19395: LD_INT 48
19397: PPUSH
19398: LD_VAR 0 3
19402: PPUSH
19403: LD_INT 1
19405: PPUSH
19406: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19410: LD_INT 49
19412: PPUSH
19413: LD_VAR 0 3
19417: PPUSH
19418: LD_INT 1
19420: PPUSH
19421: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
19425: LD_INT 50
19427: PPUSH
19428: LD_VAR 0 3
19432: PPUSH
19433: LD_INT 1
19435: PPUSH
19436: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19440: LD_INT 69
19442: PPUSH
19443: LD_VAR 0 3
19447: PPUSH
19448: LD_INT 1
19450: PPUSH
19451: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19455: LD_INT 39
19457: PPUSH
19458: LD_VAR 0 3
19462: PPUSH
19463: LD_INT 1
19465: PPUSH
19466: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19470: LD_INT 34
19472: PPUSH
19473: LD_VAR 0 3
19477: PPUSH
19478: LD_INT 1
19480: PPUSH
19481: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
19485: LD_INT 42
19487: PPUSH
19488: LD_VAR 0 3
19492: PPUSH
19493: LD_INT 1
19495: PPUSH
19496: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
19500: LD_INT 44
19502: PPUSH
19503: LD_VAR 0 3
19507: PPUSH
19508: LD_INT 1
19510: PPUSH
19511: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
19515: LD_INT 41
19517: PPUSH
19518: LD_VAR 0 3
19522: PPUSH
19523: LD_INT 1
19525: PPUSH
19526: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
19530: LD_INT 13
19532: PPUSH
19533: LD_VAR 0 3
19537: PPUSH
19538: LD_INT 1
19540: PPUSH
19541: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
19545: LD_INT 40
19547: PPUSH
19548: LD_VAR 0 3
19552: PPUSH
19553: LD_INT 1
19555: PPUSH
19556: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19560: LD_INT 43
19562: PPUSH
19563: LD_VAR 0 3
19567: PPUSH
19568: LD_INT 1
19570: PPUSH
19571: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19575: LD_INT 70
19577: PPUSH
19578: LD_VAR 0 3
19582: PPUSH
19583: LD_INT 1
19585: PPUSH
19586: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
19590: LD_INT 23
19592: PPUSH
19593: LD_VAR 0 3
19597: PPUSH
19598: LD_INT 1
19600: PPUSH
19601: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19605: LD_INT 51
19607: PPUSH
19608: LD_VAR 0 3
19612: PPUSH
19613: LD_INT 1
19615: PPUSH
19616: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19620: LD_INT 52
19622: PPUSH
19623: LD_VAR 0 3
19627: PPUSH
19628: LD_INT 1
19630: PPUSH
19631: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19635: LD_INT 6
19637: PPUSH
19638: LD_VAR 0 3
19642: PPUSH
19643: LD_INT 1
19645: PPUSH
19646: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19650: LD_INT 15
19652: PPUSH
19653: LD_VAR 0 3
19657: PPUSH
19658: LD_INT 1
19660: PPUSH
19661: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19665: LD_INT 7
19667: PPUSH
19668: LD_VAR 0 3
19672: PPUSH
19673: LD_INT 1
19675: PPUSH
19676: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19680: LD_INT 12
19682: PPUSH
19683: LD_VAR 0 3
19687: PPUSH
19688: LD_INT 1
19690: PPUSH
19691: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19695: LD_INT 10
19697: PPUSH
19698: LD_VAR 0 3
19702: PPUSH
19703: LD_INT 1
19705: PPUSH
19706: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19710: LD_INT 17
19712: PPUSH
19713: LD_VAR 0 3
19717: PPUSH
19718: LD_INT 1
19720: PPUSH
19721: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19725: LD_INT 18
19727: PPUSH
19728: LD_VAR 0 3
19732: PPUSH
19733: LD_INT 1
19735: PPUSH
19736: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19740: LD_INT 60
19742: PPUSH
19743: LD_VAR 0 3
19747: PPUSH
19748: LD_INT 1
19750: PPUSH
19751: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19755: LD_INT 61
19757: PPUSH
19758: LD_VAR 0 3
19762: PPUSH
19763: LD_INT 1
19765: PPUSH
19766: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19770: LD_INT 32
19772: PPUSH
19773: LD_VAR 0 3
19777: PPUSH
19778: LD_INT 1
19780: PPUSH
19781: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19785: LD_INT 27
19787: PPUSH
19788: LD_VAR 0 3
19792: PPUSH
19793: LD_INT 1
19795: PPUSH
19796: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19800: LD_INT 36
19802: PPUSH
19803: LD_VAR 0 3
19807: PPUSH
19808: LD_INT 1
19810: PPUSH
19811: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19815: LD_INT 33
19817: PPUSH
19818: LD_VAR 0 3
19822: PPUSH
19823: LD_INT 1
19825: PPUSH
19826: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19830: LD_INT 9
19832: PPUSH
19833: LD_VAR 0 3
19837: PPUSH
19838: LD_INT 1
19840: PPUSH
19841: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19845: LD_INT 38
19847: PPUSH
19848: LD_VAR 0 3
19852: PPUSH
19853: LD_INT 1
19855: PPUSH
19856: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19860: LD_INT 57
19862: PPUSH
19863: LD_VAR 0 3
19867: PPUSH
19868: LD_INT 1
19870: PPUSH
19871: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19875: LD_INT 58
19877: PPUSH
19878: LD_VAR 0 3
19882: PPUSH
19883: LD_INT 1
19885: PPUSH
19886: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19890: LD_INT 28
19892: PPUSH
19893: LD_VAR 0 3
19897: PPUSH
19898: LD_INT 1
19900: PPUSH
19901: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19905: LD_INT 29
19907: PPUSH
19908: LD_VAR 0 3
19912: PPUSH
19913: LD_INT 1
19915: PPUSH
19916: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19920: LD_INT 30
19922: PPUSH
19923: LD_VAR 0 3
19927: PPUSH
19928: LD_INT 1
19930: PPUSH
19931: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19935: LD_INT 37
19937: PPUSH
19938: LD_VAR 0 3
19942: PPUSH
19943: LD_INT 1
19945: PPUSH
19946: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19950: LD_INT 63
19952: PPUSH
19953: LD_VAR 0 3
19957: PPUSH
19958: LD_INT 1
19960: PPUSH
19961: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19965: LD_INT 64
19967: PPUSH
19968: LD_VAR 0 3
19972: PPUSH
19973: LD_INT 1
19975: PPUSH
19976: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19980: LD_INT 3
19982: PPUSH
19983: LD_VAR 0 3
19987: PPUSH
19988: LD_INT 1
19990: PPUSH
19991: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19995: LD_INT 4
19997: PPUSH
19998: LD_VAR 0 3
20002: PPUSH
20003: LD_INT 1
20005: PPUSH
20006: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20010: LD_INT 5
20012: PPUSH
20013: LD_VAR 0 3
20017: PPUSH
20018: LD_INT 1
20020: PPUSH
20021: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
20025: LD_INT 8
20027: PPUSH
20028: LD_VAR 0 3
20032: PPUSH
20033: LD_INT 1
20035: PPUSH
20036: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20040: LD_INT 66
20042: PPUSH
20043: LD_VAR 0 3
20047: PPUSH
20048: LD_INT 1
20050: PPUSH
20051: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
20055: LD_INT 67
20057: PPUSH
20058: LD_VAR 0 3
20062: PPUSH
20063: LD_INT 1
20065: PPUSH
20066: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20070: LD_INT 21
20072: PPUSH
20073: LD_VAR 0 3
20077: PPUSH
20078: LD_INT 1
20080: PPUSH
20081: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20085: LD_INT 22
20087: PPUSH
20088: LD_VAR 0 3
20092: PPUSH
20093: LD_INT 1
20095: PPUSH
20096: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
20100: LD_INT 19
20102: PPUSH
20103: LD_VAR 0 3
20107: PPUSH
20108: LD_INT 1
20110: PPUSH
20111: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
20115: LD_INT 26
20117: PPUSH
20118: LD_VAR 0 3
20122: PPUSH
20123: LD_INT 1
20125: PPUSH
20126: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20130: LD_INT 54
20132: PPUSH
20133: LD_VAR 0 3
20137: PPUSH
20138: LD_INT 1
20140: PPUSH
20141: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
20145: LD_INT 55
20147: PPUSH
20148: LD_VAR 0 3
20152: PPUSH
20153: LD_INT 1
20155: PPUSH
20156: CALL_OW 322
// for i = 0 to 39 do
20160: LD_ADDR_VAR 0 4
20164: PUSH
20165: DOUBLE
20166: LD_INT 0
20168: DEC
20169: ST_TO_ADDR
20170: LD_INT 39
20172: PUSH
20173: FOR_TO
20174: IFFALSE 20195
// SetRestrict ( i , side , true ) ;
20176: LD_VAR 0 4
20180: PPUSH
20181: LD_VAR 0 3
20185: PPUSH
20186: LD_INT 1
20188: PPUSH
20189: CALL_OW 324
20193: GO 20173
20195: POP
20196: POP
// end ; else
20197: GO 20274
20199: POP
// begin for i = 1 to 73 do
20200: LD_ADDR_VAR 0 4
20204: PUSH
20205: DOUBLE
20206: LD_INT 1
20208: DEC
20209: ST_TO_ADDR
20210: LD_INT 73
20212: PUSH
20213: FOR_TO
20214: IFFALSE 20235
// SetTech ( i , side , state_enabled ) ;
20216: LD_VAR 0 4
20220: PPUSH
20221: LD_VAR 0 3
20225: PPUSH
20226: LD_INT 1
20228: PPUSH
20229: CALL_OW 322
20233: GO 20213
20235: POP
20236: POP
// for i = 0 to 39 do
20237: LD_ADDR_VAR 0 4
20241: PUSH
20242: DOUBLE
20243: LD_INT 0
20245: DEC
20246: ST_TO_ADDR
20247: LD_INT 39
20249: PUSH
20250: FOR_TO
20251: IFFALSE 20272
// SetRestrict ( i , side , true ) ;
20253: LD_VAR 0 4
20257: PPUSH
20258: LD_VAR 0 3
20262: PPUSH
20263: LD_INT 1
20265: PPUSH
20266: CALL_OW 324
20270: GO 20250
20272: POP
20273: POP
// end ; end ; end ;
20274: GO 16279
20276: POP
20277: POP
// end ;
20278: LD_VAR 0 2
20282: RET
