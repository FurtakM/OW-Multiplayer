// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_siberit , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id , def_win_rules ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 39
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 18
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 16
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 21
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 17
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 39
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 3 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 3
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 18
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 ] ;
 245: LD_ADDR_EXP 19
 249: PUSH
 250: LD_INT 3
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 3
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 3
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 21
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 17
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 386: LD_ADDR_EXP 20
 390: PUSH
 391: LD_EXP 16
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: EMPTY
 400: LIST
 401: DIFF
 402: PUSH
 403: LD_INT 1
 405: GREATER
 406: ST_TO_ADDR
// if Multiplayer then
 407: LD_OWVAR 4
 411: IFFALSE 657
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 413: LD_ADDR_EXP 41
 417: PUSH
 418: LD_INT 0
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 426: LD_ADDR_EXP 42
 430: PUSH
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 439: LD_ADDR_EXP 43
 443: PUSH
 444: LD_INT 2
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 452: LD_ADDR_EXP 44
 456: PUSH
 457: LD_INT 3
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 465: LD_ADDR_EXP 45
 469: PUSH
 470: LD_INT 4
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 478: LD_ADDR_EXP 46
 482: PUSH
 483: LD_INT 5
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 491: LD_ADDR_EXP 47
 495: PUSH
 496: LD_INT 6
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 504: LD_ADDR_EXP 48
 508: PUSH
 509: LD_INT 10
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 517: LD_ADDR_EXP 49
 521: PUSH
 522: LD_INT 11
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 530: LD_ADDR_EXP 50
 534: PUSH
 535: LD_INT 12
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 543: LD_ADDR_EXP 51
 547: PUSH
 548: LD_INT 13
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 556: LD_ADDR_EXP 52
 560: PUSH
 561: LD_INT 14
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 569: LD_ADDR_EXP 1
 573: PUSH
 574: LD_INT 15
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 582: LD_ADDR_EXP 2
 586: PUSH
 587: LD_INT 16
 589: PPUSH
 590: CALL_OW 426
 594: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 595: LD_ADDR_EXP 53
 599: PUSH
 600: LD_INT 17
 602: PPUSH
 603: CALL_OW 426
 607: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 608: LD_ADDR_EXP 54
 612: PUSH
 613: LD_INT 20
 615: PPUSH
 616: CALL_OW 426
 620: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 621: LD_ADDR_EXP 40
 625: PUSH
 626: LD_INT 21
 628: PPUSH
 629: CALL_OW 426
 633: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 634: LD_ADDR_VAR 0 3
 638: PUSH
 639: LD_INT 22
 641: PPUSH
 642: CALL_OW 426
 646: ST_TO_ADDR
// def_win_rules = 0 ;
 647: LD_ADDR_EXP 30
 651: PUSH
 652: LD_INT 0
 654: ST_TO_ADDR
// end else
 655: GO 813
// begin Randomize ;
 657: CALL_OW 10
// def_base_level := 2 ;
 661: LD_ADDR_EXP 41
 665: PUSH
 666: LD_INT 2
 668: ST_TO_ADDR
// def_amount_of_people := 11 ;
 669: LD_ADDR_EXP 42
 673: PUSH
 674: LD_INT 11
 676: ST_TO_ADDR
// def_skill_level := 1 ;
 677: LD_ADDR_EXP 43
 681: PUSH
 682: LD_INT 1
 684: ST_TO_ADDR
// def_starting_resources := 2 ;
 685: LD_ADDR_EXP 44
 689: PUSH
 690: LD_INT 2
 692: ST_TO_ADDR
// def_shipments_density := 50 ;
 693: LD_ADDR_EXP 45
 697: PUSH
 698: LD_INT 50
 700: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 701: LD_ADDR_EXP 46
 705: PUSH
 706: LD_INT 0
 708: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 709: LD_ADDR_EXP 47
 713: PUSH
 714: LD_INT 1
 716: ST_TO_ADDR
// def_shared_vision := 1 ;
 717: LD_ADDR_EXP 48
 721: PUSH
 722: LD_INT 1
 724: ST_TO_ADDR
// def_morale_flags := 1 ;
 725: LD_ADDR_EXP 49
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// def_siberite_detection := 1 ;
 733: LD_ADDR_EXP 50
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// def_people_respawning := 2 ;
 741: LD_ADDR_EXP 51
 745: PUSH
 746: LD_INT 2
 748: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 749: LD_ADDR_EXP 52
 753: PUSH
 754: LD_INT 3
 756: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 757: LD_ADDR_EXP 1
 761: PUSH
 762: LD_INT 0
 764: ST_TO_ADDR
// def_public_score := 0 ;
 765: LD_ADDR_EXP 2
 769: PUSH
 770: LD_INT 0
 772: ST_TO_ADDR
// def_siberite_bomb := 4 ;
 773: LD_ADDR_EXP 53
 777: PUSH
 778: LD_INT 4
 780: ST_TO_ADDR
// def_builduptime := 0 ;
 781: LD_ADDR_EXP 54
 785: PUSH
 786: LD_INT 0
 788: ST_TO_ADDR
// def_game_rules := 0 ;
 789: LD_ADDR_EXP 40
 793: PUSH
 794: LD_INT 0
 796: ST_TO_ADDR
// tech_level = 4 ;
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_INT 4
 804: ST_TO_ADDR
// def_win_rules = 0 ;
 805: LD_ADDR_EXP 30
 809: PUSH
 810: LD_INT 0
 812: ST_TO_ADDR
// end ; InitGameRules ;
 813: CALL 9767 0 0
// if def_game_rules = 0 then
 817: LD_EXP 40
 821: PUSH
 822: LD_INT 0
 824: EQUAL
 825: IFFALSE 876
// begin if isSGUI then
 827: LD_OWVAR 83
 831: IFFALSE 839
// setMpTechs ( ) else
 833: CALL 16231 0 0
 837: GO 876
// begin if Game_Type = 3 then
 839: LD_EXP 39
 843: PUSH
 844: LD_INT 3
 846: EQUAL
 847: IFFALSE 863
// tech_level = tech_level + 3 ;
 849: LD_ADDR_VAR 0 3
 853: PUSH
 854: LD_VAR 0 3
 858: PUSH
 859: LD_INT 3
 861: PLUS
 862: ST_TO_ADDR
// SetMpTechLevel ( tech_level + 1 ) ;
 863: LD_VAR 0 3
 867: PUSH
 868: LD_INT 1
 870: PLUS
 871: PPUSH
 872: CALL 16378 0 1
// end ; end ; if ( Game_Type = 5 ) then
 876: LD_EXP 39
 880: PUSH
 881: LD_INT 5
 883: EQUAL
 884: IFFALSE 913
// begin def_base_level := 1 ;
 886: LD_ADDR_EXP 41
 890: PUSH
 891: LD_INT 1
 893: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 894: LD_ADDR_EXP 46
 898: PUSH
 899: LD_INT 0
 901: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
 902: LD_ADDR_EXP 47
 906: PUSH
 907: LD_INT 0
 909: ST_TO_ADDR
// disable ( 10 ) ;
 910: LD_INT 10
 912: DISABLE_MARKED
// end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 913: LD_ADDR_EXP 3
 917: PUSH
 918: LD_INT 0
 920: PUSH
 921: LD_INT 1
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_EXP 41
 936: PUSH
 937: LD_INT 1
 939: PLUS
 940: ARRAY
 941: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 942: LD_ADDR_EXP 4
 946: PUSH
 947: LD_INT 0
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 3
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: PUSH
 961: LD_EXP 41
 965: PUSH
 966: LD_INT 1
 968: PLUS
 969: ARRAY
 970: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 971: LD_ADDR_EXP 5
 975: PUSH
 976: LD_EXP 42
 980: PUSH
 981: LD_INT 4
 983: PLUS
 984: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
 985: LD_ADDR_EXP 9
 989: PUSH
 990: LD_INT 150
 992: PUSH
 993: LD_EXP 45
 997: PUSH
 998: LD_INT 1
1000: PLUS
1001: MINUS
1002: ST_TO_ADDR
// if def_people_respawning = 0 then
1003: LD_EXP 51
1007: PUSH
1008: LD_INT 0
1010: EQUAL
1011: IFFALSE 1031
// begin respawning_time_min = 0 ;
1013: LD_ADDR_EXP 12
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// respawning_time_max = 0 ;
1021: LD_ADDR_EXP 13
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// end else
1029: GO 1075
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1031: LD_ADDR_EXP 12
1035: PUSH
1036: LD_INT 10500
1038: PUSH
1039: LD_INT 5
1041: DIVREAL
1042: PUSH
1043: LD_INT 6
1045: PUSH
1046: LD_EXP 51
1050: MINUS
1051: MUL
1052: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1053: LD_ADDR_EXP 13
1057: PUSH
1058: LD_INT 31500
1060: PUSH
1061: LD_INT 5
1063: DIVREAL
1064: PUSH
1065: LD_INT 6
1067: PUSH
1068: LD_EXP 51
1072: MINUS
1073: MUL
1074: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1075: LD_EXP 52
1079: NOT
1080: IFFALSE 1092
// amount_of_apemen := 0 else
1082: LD_ADDR_EXP 14
1086: PUSH
1087: LD_INT 0
1089: ST_TO_ADDR
1090: GO 1102
// amount_of_apemen := def_amount_of_apemen ;
1092: LD_ADDR_EXP 14
1096: PUSH
1097: LD_EXP 52
1101: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1102: LD_EXP 53
1106: PUSH
1107: LD_INT 0
1109: EQUAL
1110: IFFALSE 1122
// siberite_bomb_Delay = 0 else
1112: LD_ADDR_EXP 15
1116: PUSH
1117: LD_INT 0
1119: ST_TO_ADDR
1120: GO 1144
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1122: LD_ADDR_EXP 15
1126: PUSH
1127: LD_EXP 53
1131: PUSH
1132: LD_INT 1
1134: MINUS
1135: PUSH
1136: LD_INT 21000
1138: MUL
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ST_TO_ADDR
// amount_of_siberit := [ 30 , 60 , 90 , 120 , 150 , 180 , 210 , 240 , 270 , 300 , 400 , 500 , 600 , 700 , 800 , 900 , 1000 , 1250 , 1500 , 1750 , 2000 , 2250 , 2500 , 2750 , 3000 , 3500 , 4000 , 4500 , 5000 , 6000 , 7000 , 8000 , 9000 , 10000 ] [ def_amount_of_siberit + 1 ] ;
1144: LD_ADDR_EXP 11
1148: PUSH
1149: LD_INT 30
1151: PUSH
1152: LD_INT 60
1154: PUSH
1155: LD_INT 90
1157: PUSH
1158: LD_INT 120
1160: PUSH
1161: LD_INT 150
1163: PUSH
1164: LD_INT 180
1166: PUSH
1167: LD_INT 210
1169: PUSH
1170: LD_INT 240
1172: PUSH
1173: LD_INT 270
1175: PUSH
1176: LD_INT 300
1178: PUSH
1179: LD_INT 400
1181: PUSH
1182: LD_INT 500
1184: PUSH
1185: LD_INT 600
1187: PUSH
1188: LD_INT 700
1190: PUSH
1191: LD_INT 800
1193: PUSH
1194: LD_INT 900
1196: PUSH
1197: LD_INT 1000
1199: PUSH
1200: LD_INT 1250
1202: PUSH
1203: LD_INT 1500
1205: PUSH
1206: LD_INT 1750
1208: PUSH
1209: LD_INT 2000
1211: PUSH
1212: LD_INT 2250
1214: PUSH
1215: LD_INT 2500
1217: PUSH
1218: LD_INT 2750
1220: PUSH
1221: LD_INT 3000
1223: PUSH
1224: LD_INT 3500
1226: PUSH
1227: LD_INT 4000
1229: PUSH
1230: LD_INT 4500
1232: PUSH
1233: LD_INT 5000
1235: PUSH
1236: LD_INT 6000
1238: PUSH
1239: LD_INT 7000
1241: PUSH
1242: LD_INT 8000
1244: PUSH
1245: LD_INT 9000
1247: PUSH
1248: LD_INT 10000
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: PUSH
1287: LD_EXP 1
1291: PUSH
1292: LD_INT 1
1294: PLUS
1295: ARRAY
1296: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1297: LD_ADDR_EXP 6
1301: PUSH
1302: LD_INT 2
1304: PUSH
1305: LD_INT 3
1307: PUSH
1308: LD_INT 4
1310: PUSH
1311: LD_INT 5
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: PUSH
1320: LD_EXP 43
1324: PUSH
1325: LD_INT 1
1327: PLUS
1328: ARRAY
1329: ST_TO_ADDR
// if ( def_game_rules = 4 ) then
1330: LD_EXP 40
1334: PUSH
1335: LD_INT 4
1337: EQUAL
1338: IFFALSE 1361
// begin starting_resources := [ 10000 , 5000 , 1000 ] ;
1340: LD_ADDR_EXP 8
1344: PUSH
1345: LD_INT 10000
1347: PUSH
1348: LD_INT 5000
1350: PUSH
1351: LD_INT 1000
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: LIST
1358: ST_TO_ADDR
// end else
1359: GO 1633
// if ( Game_Type = 5 ) then
1361: LD_EXP 39
1365: PUSH
1366: LD_INT 5
1368: EQUAL
1369: IFFALSE 1487
// begin starting_resources := [ [ 1000 , 100 , 100 ] , [ 2000 , 200 , 200 ] , [ 5000 , 500 , 500 ] , [ 10000 , 1000 , 1000 ] , [ 25000 , 2500 , 2500 ] , [ 50000 , 5000 , 5000 ] ] [ def_starting_resources + 1 ] ;
1371: LD_ADDR_EXP 8
1375: PUSH
1376: LD_INT 1000
1378: PUSH
1379: LD_INT 100
1381: PUSH
1382: LD_INT 100
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 2000
1392: PUSH
1393: LD_INT 200
1395: PUSH
1396: LD_INT 200
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 5000
1406: PUSH
1407: LD_INT 500
1409: PUSH
1410: LD_INT 500
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 10000
1420: PUSH
1421: LD_INT 1000
1423: PUSH
1424: LD_INT 1000
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 25000
1434: PUSH
1435: LD_INT 2500
1437: PUSH
1438: LD_INT 2500
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PUSH
1446: LD_INT 50000
1448: PUSH
1449: LD_INT 5000
1451: PUSH
1452: LD_INT 5000
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: LIST
1467: PUSH
1468: LD_EXP 44
1472: PUSH
1473: LD_INT 1
1475: PLUS
1476: ARRAY
1477: ST_TO_ADDR
// starting_crates := [ ] ;
1478: LD_ADDR_EXP 7
1482: PUSH
1483: EMPTY
1484: ST_TO_ADDR
// end else
1485: GO 1633
// begin starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1487: LD_ADDR_EXP 8
1491: PUSH
1492: LD_INT 0
1494: PUSH
1495: LD_INT 0
1497: PUSH
1498: LD_INT 0
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 30
1508: PUSH
1509: LD_INT 0
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 50
1522: PUSH
1523: LD_INT 20
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 80
1536: PUSH
1537: LD_INT 40
1539: PUSH
1540: LD_INT 20
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_EXP 44
1558: PUSH
1559: LD_INT 1
1561: PLUS
1562: ARRAY
1563: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1564: LD_ADDR_EXP 7
1568: PUSH
1569: LD_INT 10
1571: PUSH
1572: EMPTY
1573: LIST
1574: PUSH
1575: LD_INT 7
1577: PUSH
1578: LD_INT 14
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 6
1587: PUSH
1588: LD_INT 12
1590: PUSH
1591: LD_INT 18
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 5
1601: PUSH
1602: LD_INT 10
1604: PUSH
1605: LD_INT 15
1607: PUSH
1608: LD_INT 20
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_EXP 44
1627: PUSH
1628: LD_INT 1
1630: PLUS
1631: ARRAY
1632: ST_TO_ADDR
// end ; morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1633: LD_ADDR_EXP 10
1637: PUSH
1638: LD_INT 1
1640: NEG
1641: PUSH
1642: LD_INT 350
1644: PUSH
1645: LD_INT 700
1647: PUSH
1648: LD_INT 1400
1650: PUSH
1651: LD_INT 0
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: PUSH
1661: LD_EXP 49
1665: PUSH
1666: LD_INT 1
1668: PLUS
1669: ARRAY
1670: ST_TO_ADDR
// battle_flags_id := [ ] ;
1671: LD_ADDR_EXP 29
1675: PUSH
1676: EMPTY
1677: ST_TO_ADDR
// end ;
1678: LD_VAR 0 1
1682: RET
// function init_map ; var i , j ; begin
1683: LD_INT 0
1685: PPUSH
1686: PPUSH
1687: PPUSH
// normal_oil_deposits_locations := [ [ 49 , 49 ] , [ 85 , 23 ] , [ 147 , 35 ] , [ 187 , 104 ] , [ 226 , 175 ] , [ 198 , 208 ] , [ 140 , 199 ] , [ 90 , 126 ] ] ;
1688: LD_ADDR_EXP 25
1692: PUSH
1693: LD_INT 49
1695: PUSH
1696: LD_INT 49
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 85
1705: PUSH
1706: LD_INT 23
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PUSH
1713: LD_INT 147
1715: PUSH
1716: LD_INT 35
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: PUSH
1723: LD_INT 187
1725: PUSH
1726: LD_INT 104
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 226
1735: PUSH
1736: LD_INT 175
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 198
1745: PUSH
1746: LD_INT 208
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 140
1755: PUSH
1756: LD_INT 199
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 90
1765: PUSH
1766: LD_INT 126
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 49 , 49 ] , [ 53 , 31 ] ] , [ [ 85 , 23 ] , [ 108 , 23 ] ] , [ [ 147 , 35 ] , [ 166 , 58 ] ] , [ [ 187 , 104 ] , [ 203 , 130 ] ] , [ [ 226 , 175 ] , [ 223 , 196 ] ] , [ [ 198 , 208 ] , [ 176 , 207 ] ] , [ [ 140 , 199 ] , [ 118 , 175 ] ] , [ [ 90 , 126 ] , [ 79 , 104 ] ] ] ;
1783: LD_ADDR_EXP 26
1787: PUSH
1788: LD_INT 49
1790: PUSH
1791: LD_INT 49
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: LD_INT 53
1800: PUSH
1801: LD_INT 31
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 85
1814: PUSH
1815: LD_INT 23
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 108
1824: PUSH
1825: LD_INT 23
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PUSH
1836: LD_INT 147
1838: PUSH
1839: LD_INT 35
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 166
1848: PUSH
1849: LD_INT 58
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: LD_INT 187
1862: PUSH
1863: LD_INT 104
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: PUSH
1870: LD_INT 203
1872: PUSH
1873: LD_INT 130
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 226
1886: PUSH
1887: LD_INT 175
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: LD_INT 223
1896: PUSH
1897: LD_INT 196
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: LD_INT 198
1910: PUSH
1911: LD_INT 208
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 176
1920: PUSH
1921: LD_INT 207
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 140
1934: PUSH
1935: LD_INT 199
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 118
1944: PUSH
1945: LD_INT 175
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 90
1958: PUSH
1959: LD_INT 126
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 79
1968: PUSH
1969: LD_INT 104
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 53 , 54 ] , [ 85 , 28 ] , [ 142 , 36 ] , [ 193 , 106 ] , [ 232 , 180 ] , [ 197 , 212 ] , [ 135 , 199 ] , [ 85 , 121 ] ] ;
1990: LD_ADDR_EXP 27
1994: PUSH
1995: LD_INT 53
1997: PUSH
1998: LD_INT 54
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: PUSH
2005: LD_INT 85
2007: PUSH
2008: LD_INT 28
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 142
2017: PUSH
2018: LD_INT 36
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 193
2027: PUSH
2028: LD_INT 106
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 232
2037: PUSH
2038: LD_INT 180
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: LD_INT 197
2047: PUSH
2048: LD_INT 212
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: LD_INT 135
2057: PUSH
2058: LD_INT 199
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 85
2067: PUSH
2068: LD_INT 121
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 53 , 54 ] , [ 58 , 33 ] ] , [ [ 85 , 28 ] , [ 113 , 28 ] ] , [ [ 142 , 36 ] , [ 165 , 62 ] ] , [ [ 193 , 106 ] , [ 203 , 125 ] ] , [ [ 232 , 180 ] , [ 229 , 201 ] ] , [ [ 197 , 212 ] , [ 180 , 212 ] ] , [ [ 135 , 199 ] , [ 118 , 180 ] ] , [ [ 85 , 121 ] , [ 76 , 106 ] ] ] ;
2085: LD_ADDR_EXP 28
2089: PUSH
2090: LD_INT 53
2092: PUSH
2093: LD_INT 54
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 58
2102: PUSH
2103: LD_INT 33
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 85
2116: PUSH
2117: LD_INT 28
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 113
2126: PUSH
2127: LD_INT 28
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 142
2140: PUSH
2141: LD_INT 36
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 165
2150: PUSH
2151: LD_INT 62
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 193
2164: PUSH
2165: LD_INT 106
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 203
2174: PUSH
2175: LD_INT 125
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 232
2188: PUSH
2189: LD_INT 180
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 229
2198: PUSH
2199: LD_INT 201
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 197
2212: PUSH
2213: LD_INT 212
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 180
2222: PUSH
2223: LD_INT 212
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PUSH
2234: LD_INT 135
2236: PUSH
2237: LD_INT 199
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 118
2246: PUSH
2247: LD_INT 180
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: LD_INT 85
2260: PUSH
2261: LD_INT 121
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 76
2270: PUSH
2271: LD_INT 106
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: ST_TO_ADDR
// depot_def := [ [ 71 , 53 , 5 ] , [ 99 , 30 , 5 ] , [ 150 , 55 , 0 ] , [ 193 , 119 , 1 ] , [ 213 , 179 , 2 ] , [ 187 , 206 , 3 ] , [ 136 , 183 , 3 ] , [ 93 , 117 , 4 ] ] ;
2292: LD_ADDR_EXP 22
2296: PUSH
2297: LD_INT 71
2299: PUSH
2300: LD_INT 53
2302: PUSH
2303: LD_INT 5
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: PUSH
2311: LD_INT 99
2313: PUSH
2314: LD_INT 30
2316: PUSH
2317: LD_INT 5
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 150
2327: PUSH
2328: LD_INT 55
2330: PUSH
2331: LD_INT 0
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: PUSH
2339: LD_INT 193
2341: PUSH
2342: LD_INT 119
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 213
2355: PUSH
2356: LD_INT 179
2358: PUSH
2359: LD_INT 2
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: PUSH
2367: LD_INT 187
2369: PUSH
2370: LD_INT 206
2372: PUSH
2373: LD_INT 3
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 136
2383: PUSH
2384: LD_INT 183
2386: PUSH
2387: LD_INT 3
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: LIST
2394: PUSH
2395: LD_INT 93
2397: PUSH
2398: LD_INT 117
2400: PUSH
2401: LD_INT 4
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: LIST
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: ST_TO_ADDR
// for i in depot_def do
2419: LD_ADDR_VAR 0 2
2423: PUSH
2424: LD_EXP 22
2428: PUSH
2429: FOR_IN
2430: IFFALSE 2504
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 10 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 10 ) ] ] ;
2432: LD_ADDR_EXP 24
2436: PUSH
2437: LD_EXP 24
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_INT 1
2449: ARRAY
2450: PPUSH
2451: LD_VAR 0 2
2455: PUSH
2456: LD_INT 3
2458: ARRAY
2459: PPUSH
2460: LD_INT 10
2462: PPUSH
2463: CALL_OW 272
2467: PUSH
2468: LD_VAR 0 2
2472: PUSH
2473: LD_INT 2
2475: ARRAY
2476: PPUSH
2477: LD_VAR 0 2
2481: PUSH
2482: LD_INT 3
2484: ARRAY
2485: PPUSH
2486: LD_INT 10
2488: PPUSH
2489: CALL_OW 273
2493: PUSH
2494: EMPTY
2495: LIST
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: ADD
2501: ST_TO_ADDR
2502: GO 2429
2504: POP
2505: POP
// breastworks_def := [ [ [ 84 , 65 , 5 ] , [ 85 , 57 , 5 ] , [ 46 , 36 , 2 ] ] , [ [ 102 , 45 , 0 ] , [ 111 , 45 , 5 ] , [ 93 , 18 , 2 ] ] , [ [ 147 , 65 , 0 ] , [ 138 , 56 , 0 ] , [ 158 , 39 , 3 ] ] , [ [ 177 , 113 , 1 ] , [ 182 , 123 , 1 ] , [ 202 , 114 , 4 ] ] , [ [ 200 , 176 , 2 ] , [ 200 , 167 , 2 ] , [ 235 , 196 , 5 ] ] , [ [ 176 , 192 , 2 ] , [ 184 , 192 , 2 ] , [ 190 , 219 , 5 ] ] , [ [ 144 , 180 , 3 ] , [ 135 , 170 , 3 ] , [ 128 , 193 , 0 ] ] , [ [ 103 , 113 , 4 ] , [ 109 , 125 , 4 ] , [ 75 , 112 , 1 ] ] ] ;
2506: LD_ADDR_EXP 23
2510: PUSH
2511: LD_INT 84
2513: PUSH
2514: LD_INT 65
2516: PUSH
2517: LD_INT 5
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: LIST
2524: PUSH
2525: LD_INT 85
2527: PUSH
2528: LD_INT 57
2530: PUSH
2531: LD_INT 5
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 46
2541: PUSH
2542: LD_INT 36
2544: PUSH
2545: LD_INT 2
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 102
2560: PUSH
2561: LD_INT 45
2563: PUSH
2564: LD_INT 0
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: LIST
2571: PUSH
2572: LD_INT 111
2574: PUSH
2575: LD_INT 45
2577: PUSH
2578: LD_INT 5
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: LIST
2585: PUSH
2586: LD_INT 93
2588: PUSH
2589: LD_INT 18
2591: PUSH
2592: LD_INT 2
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 147
2607: PUSH
2608: LD_INT 65
2610: PUSH
2611: LD_INT 0
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: LIST
2618: PUSH
2619: LD_INT 138
2621: PUSH
2622: LD_INT 56
2624: PUSH
2625: LD_INT 0
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: LD_INT 158
2635: PUSH
2636: LD_INT 39
2638: PUSH
2639: LD_INT 3
2641: PUSH
2642: EMPTY
2643: LIST
2644: LIST
2645: LIST
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 177
2654: PUSH
2655: LD_INT 113
2657: PUSH
2658: LD_INT 1
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 182
2668: PUSH
2669: LD_INT 123
2671: PUSH
2672: LD_INT 1
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: PUSH
2680: LD_INT 202
2682: PUSH
2683: LD_INT 114
2685: PUSH
2686: LD_INT 4
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: LIST
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 200
2701: PUSH
2702: LD_INT 176
2704: PUSH
2705: LD_INT 2
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 200
2715: PUSH
2716: LD_INT 167
2718: PUSH
2719: LD_INT 2
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 235
2729: PUSH
2730: LD_INT 196
2732: PUSH
2733: LD_INT 5
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: LIST
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: PUSH
2746: LD_INT 176
2748: PUSH
2749: LD_INT 192
2751: PUSH
2752: LD_INT 2
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: LIST
2759: PUSH
2760: LD_INT 184
2762: PUSH
2763: LD_INT 192
2765: PUSH
2766: LD_INT 2
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 190
2776: PUSH
2777: LD_INT 219
2779: PUSH
2780: LD_INT 5
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: LIST
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 144
2795: PUSH
2796: LD_INT 180
2798: PUSH
2799: LD_INT 3
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 135
2809: PUSH
2810: LD_INT 170
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: LIST
2820: PUSH
2821: LD_INT 128
2823: PUSH
2824: LD_INT 193
2826: PUSH
2827: LD_INT 0
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: LIST
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 103
2842: PUSH
2843: LD_INT 113
2845: PUSH
2846: LD_INT 4
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 109
2856: PUSH
2857: LD_INT 125
2859: PUSH
2860: LD_INT 4
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: LIST
2867: PUSH
2868: LD_INT 75
2870: PUSH
2871: LD_INT 112
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: LIST
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: ST_TO_ADDR
// for i = 1 to Side_Positions do
2897: LD_ADDR_VAR 0 2
2901: PUSH
2902: DOUBLE
2903: LD_INT 1
2905: DEC
2906: ST_TO_ADDR
2907: LD_EXP 18
2911: PUSH
2912: FOR_TO
2913: IFFALSE 3043
// begin if not Side_Positions [ i ] then
2915: LD_EXP 18
2919: PUSH
2920: LD_VAR 0 2
2924: ARRAY
2925: NOT
2926: IFFALSE 2930
// continue ;
2928: GO 2912
// if def_extra_oil_deposits then
2930: LD_EXP 46
2934: IFFALSE 2992
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2936: LD_ADDR_VAR 0 3
2940: PUSH
2941: LD_EXP 26
2945: PUSH
2946: LD_EXP 18
2950: PUSH
2951: LD_VAR 0 2
2955: ARRAY
2956: ARRAY
2957: PUSH
2958: FOR_IN
2959: IFFALSE 2988
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2961: LD_VAR 0 3
2965: PUSH
2966: LD_INT 1
2968: ARRAY
2969: PPUSH
2970: LD_VAR 0 3
2974: PUSH
2975: LD_INT 2
2977: ARRAY
2978: PPUSH
2979: LD_INT 2
2981: PPUSH
2982: CALL_OW 62
2986: GO 2958
2988: POP
2989: POP
2990: GO 3041
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2992: LD_EXP 25
2996: PUSH
2997: LD_EXP 18
3001: PUSH
3002: LD_VAR 0 2
3006: ARRAY
3007: ARRAY
3008: PUSH
3009: LD_INT 1
3011: ARRAY
3012: PPUSH
3013: LD_EXP 25
3017: PUSH
3018: LD_EXP 18
3022: PUSH
3023: LD_VAR 0 2
3027: ARRAY
3028: ARRAY
3029: PUSH
3030: LD_INT 2
3032: ARRAY
3033: PPUSH
3034: LD_INT 2
3036: PPUSH
3037: CALL_OW 62
// end ;
3041: GO 2912
3043: POP
3044: POP
// if def_extra_sib_deposits then
3045: LD_EXP 47
3049: IFFALSE 3203
// for i = 1 to Side_Positions do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: DOUBLE
3057: LD_INT 1
3059: DEC
3060: ST_TO_ADDR
3061: LD_EXP 18
3065: PUSH
3066: FOR_TO
3067: IFFALSE 3201
// begin if not Side_Positions [ i ] then
3069: LD_EXP 18
3073: PUSH
3074: LD_VAR 0 2
3078: ARRAY
3079: NOT
3080: IFFALSE 3084
// continue ;
3082: GO 3066
// if def_extra_sib_deposits = 2 then
3084: LD_EXP 47
3088: PUSH
3089: LD_INT 2
3091: EQUAL
3092: IFFALSE 3150
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
3094: LD_ADDR_VAR 0 3
3098: PUSH
3099: LD_EXP 28
3103: PUSH
3104: LD_EXP 18
3108: PUSH
3109: LD_VAR 0 2
3113: ARRAY
3114: ARRAY
3115: PUSH
3116: FOR_IN
3117: IFFALSE 3146
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
3119: LD_VAR 0 3
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_VAR 0 3
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: LD_INT 3
3139: PPUSH
3140: CALL_OW 62
3144: GO 3116
3146: POP
3147: POP
3148: GO 3199
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
3150: LD_EXP 27
3154: PUSH
3155: LD_EXP 18
3159: PUSH
3160: LD_VAR 0 2
3164: ARRAY
3165: ARRAY
3166: PUSH
3167: LD_INT 1
3169: ARRAY
3170: PPUSH
3171: LD_EXP 27
3175: PUSH
3176: LD_EXP 18
3180: PUSH
3181: LD_VAR 0 2
3185: ARRAY
3186: ARRAY
3187: PUSH
3188: LD_INT 2
3190: ARRAY
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: CALL_OW 62
// end ;
3199: GO 3066
3201: POP
3202: POP
// end ;
3203: LD_VAR 0 1
3207: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
3208: LD_INT 0
3210: PPUSH
3211: PPUSH
3212: PPUSH
// if not Team_Game then
3213: LD_EXP 20
3217: NOT
3218: IFFALSE 3316
// begin for i = 1 to 8 do
3220: LD_ADDR_VAR 0 2
3224: PUSH
3225: DOUBLE
3226: LD_INT 1
3228: DEC
3229: ST_TO_ADDR
3230: LD_INT 8
3232: PUSH
3233: FOR_TO
3234: IFFALSE 3312
// for j = 1 to 8 do
3236: LD_ADDR_VAR 0 3
3240: PUSH
3241: DOUBLE
3242: LD_INT 1
3244: DEC
3245: ST_TO_ADDR
3246: LD_INT 8
3248: PUSH
3249: FOR_TO
3250: IFFALSE 3308
// if i <> j then
3252: LD_VAR 0 2
3256: PUSH
3257: LD_VAR 0 3
3261: NONEQUAL
3262: IFFALSE 3286
// SetAttitude ( i , j , att_neutral , true ) else
3264: LD_VAR 0 2
3268: PPUSH
3269: LD_VAR 0 3
3273: PPUSH
3274: LD_INT 0
3276: PPUSH
3277: LD_INT 1
3279: PPUSH
3280: CALL_OW 80
3284: GO 3306
// SetAttitude ( i , j , att_friend , true ) ;
3286: LD_VAR 0 2
3290: PPUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_INT 1
3298: PPUSH
3299: LD_INT 1
3301: PPUSH
3302: CALL_OW 80
3306: GO 3249
3308: POP
3309: POP
3310: GO 3233
3312: POP
3313: POP
// end else
3314: GO 3491
// begin if def_shared_vision then
3316: LD_EXP 48
3320: IFFALSE 3385
// begin for i in Teams do
3322: LD_ADDR_VAR 0 2
3326: PUSH
3327: LD_EXP 17
3331: PUSH
3332: FOR_IN
3333: IFFALSE 3383
// for j = 2 to i do
3335: LD_ADDR_VAR 0 3
3339: PUSH
3340: DOUBLE
3341: LD_INT 2
3343: DEC
3344: ST_TO_ADDR
3345: LD_VAR 0 2
3349: PUSH
3350: FOR_TO
3351: IFFALSE 3379
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3353: LD_VAR 0 2
3357: PUSH
3358: LD_VAR 0 3
3362: ARRAY
3363: PPUSH
3364: LD_VAR 0 2
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PPUSH
3373: CALL_OW 343
3377: GO 3350
3379: POP
3380: POP
3381: GO 3332
3383: POP
3384: POP
// end ; for i = 1 to 8 do
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: DOUBLE
3391: LD_INT 1
3393: DEC
3394: ST_TO_ADDR
3395: LD_INT 8
3397: PUSH
3398: FOR_TO
3399: IFFALSE 3489
// for j = 1 to 8 do
3401: LD_ADDR_VAR 0 3
3405: PUSH
3406: DOUBLE
3407: LD_INT 1
3409: DEC
3410: ST_TO_ADDR
3411: LD_INT 8
3413: PUSH
3414: FOR_TO
3415: IFFALSE 3485
// if Side_Teams [ i ] = Side_Teams [ j ] then
3417: LD_EXP 16
3421: PUSH
3422: LD_VAR 0 2
3426: ARRAY
3427: PUSH
3428: LD_EXP 16
3432: PUSH
3433: LD_VAR 0 3
3437: ARRAY
3438: EQUAL
3439: IFFALSE 3463
// SetAttitude ( i , j , att_friend , true ) else
3441: LD_VAR 0 2
3445: PPUSH
3446: LD_VAR 0 3
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 1
3456: PPUSH
3457: CALL_OW 80
3461: GO 3483
// SetAttitude ( i , j , att_enemy , true ) ;
3463: LD_VAR 0 2
3467: PPUSH
3468: LD_VAR 0 3
3472: PPUSH
3473: LD_INT 2
3475: PPUSH
3476: LD_INT 1
3478: PPUSH
3479: CALL_OW 80
3483: GO 3414
3485: POP
3486: POP
3487: GO 3398
3489: POP
3490: POP
// end ; end ;
3491: LD_VAR 0 1
3495: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3496: LD_INT 0
3498: PPUSH
3499: PPUSH
3500: PPUSH
3501: PPUSH
// result := [ ] ;
3502: LD_ADDR_VAR 0 7
3506: PUSH
3507: EMPTY
3508: ST_TO_ADDR
// for i := 1 to count do
3509: LD_ADDR_VAR 0 8
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_VAR 0 1
3523: PUSH
3524: FOR_TO
3525: IFFALSE 3943
// begin uc_direction := Rand ( 0 , 5 ) ;
3527: LD_ADDR_OWVAR 24
3531: PUSH
3532: LD_INT 0
3534: PPUSH
3535: LD_INT 5
3537: PPUSH
3538: CALL_OW 12
3542: ST_TO_ADDR
// if commander then
3543: LD_LOC 1
3547: IFFALSE 3656
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3549: LD_ADDR_OWVAR 26
3553: PUSH
3554: LD_OWVAR 19
3558: PUSH
3559: LD_OWVAR 20
3563: ARRAY
3564: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3565: LD_INT 1
3567: PPUSH
3568: LD_INT 2
3570: PPUSH
3571: CALL_OW 12
3575: PPUSH
3576: LD_VAR 0 2
3580: PPUSH
3581: LD_EXP 6
3585: PUSH
3586: LD_INT 2
3588: PLUS
3589: PPUSH
3590: CALL_OW 380
// hc_importance := 105 ;
3594: LD_ADDR_OWVAR 32
3598: PUSH
3599: LD_INT 105
3601: ST_TO_ADDR
// commander := false ;
3602: LD_ADDR_LOC 1
3606: PUSH
3607: LD_INT 0
3609: ST_TO_ADDR
// if Multiplayer then
3610: LD_OWVAR 4
3614: IFFALSE 3654
// begin hc_gallery := MULTIAVATARS ;
3616: LD_ADDR_OWVAR 33
3620: PUSH
3621: LD_STRING MULTIAVATARS
3623: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3624: LD_ADDR_OWVAR 34
3628: PUSH
3629: LD_OWVAR 20
3633: PPUSH
3634: CALL_OW 525
3638: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3639: LD_ADDR_OWVAR 27
3643: PUSH
3644: LD_OWVAR 20
3648: PPUSH
3649: CALL_OW 526
3653: ST_TO_ADDR
// end ; end else
3654: GO 3719
// begin hc_name :=  ;
3656: LD_ADDR_OWVAR 26
3660: PUSH
3661: LD_STRING 
3663: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3664: LD_INT 1
3666: PPUSH
3667: LD_INT 2
3669: PPUSH
3670: CALL_OW 12
3674: PPUSH
3675: LD_VAR 0 2
3679: PPUSH
3680: LD_EXP 6
3684: PPUSH
3685: CALL_OW 380
// hc_importance := 0 ;
3689: LD_ADDR_OWVAR 32
3693: PUSH
3694: LD_INT 0
3696: ST_TO_ADDR
// if Multiplayer then
3697: LD_OWVAR 4
3701: IFFALSE 3719
// begin hc_gallery :=  ;
3703: LD_ADDR_OWVAR 33
3707: PUSH
3708: LD_STRING 
3710: ST_TO_ADDR
// hc_face_number := 0 ;
3711: LD_ADDR_OWVAR 34
3715: PUSH
3716: LD_INT 0
3718: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3719: LD_ADDR_VAR 0 10
3723: PUSH
3724: CALL_OW 44
3728: ST_TO_ADDR
// if global_defined then
3729: LD_LOC 3
3733: IFFALSE 3873
// begin if ( cl = class_soldier ) then
3735: LD_VAR 0 2
3739: PUSH
3740: LD_INT 1
3742: EQUAL
3743: IFFALSE 3763
// j := i + soldiers_created else
3745: LD_ADDR_VAR 0 9
3749: PUSH
3750: LD_VAR 0 8
3754: PUSH
3755: LD_LOC 4
3759: PLUS
3760: ST_TO_ADDR
3761: GO 3773
// j := i ;
3763: LD_ADDR_VAR 0 9
3767: PUSH
3768: LD_VAR 0 8
3772: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3773: LD_LOC 2
3777: PUSH
3778: LD_VAR 0 2
3782: ARRAY
3783: PUSH
3784: LD_VAR 0 9
3788: ARRAY
3789: PPUSH
3790: LD_VAR 0 10
3794: PPUSH
3795: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3799: LD_VAR 0 10
3803: PPUSH
3804: LD_INT 2
3806: PPUSH
3807: LD_LOC 2
3811: PUSH
3812: LD_VAR 0 2
3816: ARRAY
3817: PUSH
3818: LD_VAR 0 9
3822: ARRAY
3823: PPUSH
3824: LD_INT 2
3826: PPUSH
3827: CALL_OW 260
3831: PPUSH
3832: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3836: LD_VAR 0 10
3840: PPUSH
3841: LD_INT 1
3843: PPUSH
3844: LD_LOC 2
3848: PUSH
3849: LD_VAR 0 2
3853: ARRAY
3854: PUSH
3855: LD_VAR 0 9
3859: ARRAY
3860: PPUSH
3861: LD_INT 1
3863: PPUSH
3864: CALL_OW 260
3868: PPUSH
3869: CALL_OW 239
// end ; if building then
3873: LD_VAR 0 6
3877: IFFALSE 3895
// PlaceHumanInUnit ( un , building ) else
3879: LD_VAR 0 10
3883: PPUSH
3884: LD_VAR 0 6
3888: PPUSH
3889: CALL_OW 52
3893: GO 3922
// PlaceUnitXYR ( un , x , y , r , false ) ;
3895: LD_VAR 0 10
3899: PPUSH
3900: LD_VAR 0 3
3904: PPUSH
3905: LD_VAR 0 4
3909: PPUSH
3910: LD_VAR 0 5
3914: PPUSH
3915: LD_INT 0
3917: PPUSH
3918: CALL_OW 50
// result := result ^ [ un ] ;
3922: LD_ADDR_VAR 0 7
3926: PUSH
3927: LD_VAR 0 7
3931: PUSH
3932: LD_VAR 0 10
3936: PUSH
3937: EMPTY
3938: LIST
3939: ADD
3940: ST_TO_ADDR
// end ;
3941: GO 3524
3943: POP
3944: POP
// if not global_defined then
3945: LD_LOC 3
3949: NOT
3950: IFFALSE 4028
// if ( global_units >= cl ) then
3952: LD_LOC 2
3956: PUSH
3957: LD_VAR 0 2
3961: GREATEREQUAL
3962: IFFALSE 4003
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3964: LD_ADDR_LOC 2
3968: PUSH
3969: LD_LOC 2
3973: PPUSH
3974: LD_VAR 0 2
3978: PPUSH
3979: LD_LOC 2
3983: PUSH
3984: LD_VAR 0 2
3988: ARRAY
3989: PUSH
3990: LD_VAR 0 7
3994: ADD
3995: PPUSH
3996: CALL_OW 1
4000: ST_TO_ADDR
4001: GO 4028
// global_units := Replace ( global_units , cl , result ) ;
4003: LD_ADDR_LOC 2
4007: PUSH
4008: LD_LOC 2
4012: PPUSH
4013: LD_VAR 0 2
4017: PPUSH
4018: LD_VAR 0 7
4022: PPUSH
4023: CALL_OW 1
4027: ST_TO_ADDR
// if commander then
4028: LD_LOC 1
4032: IFFALSE 4079
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
4034: LD_ADDR_EXP 31
4038: PUSH
4039: LD_EXP 31
4043: PPUSH
4044: LD_OWVAR 20
4048: PPUSH
4049: LD_EXP 31
4053: PUSH
4054: LD_OWVAR 20
4058: ARRAY
4059: PUSH
4060: LD_VAR 0 10
4064: ADD
4065: PPUSH
4066: CALL_OW 1
4070: ST_TO_ADDR
// commander := false ;
4071: LD_ADDR_LOC 1
4075: PUSH
4076: LD_INT 0
4078: ST_TO_ADDR
// end ; end ;
4079: LD_VAR 0 7
4083: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
4084: LD_INT 0
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
4090: PPUSH
4091: PPUSH
4092: PPUSH
4093: PPUSH
4094: PPUSH
// if side in [ 0 , 9 ] then
4095: LD_VAR 0 1
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: LD_INT 9
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: IN
4110: IFFALSE 4114
// exit ;
4112: GO 5164
// pos := Side_Positions [ side ] ;
4114: LD_ADDR_VAR 0 3
4118: PUSH
4119: LD_EXP 18
4123: PUSH
4124: LD_VAR 0 1
4128: ARRAY
4129: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
4130: LD_ADDR_OWVAR 21
4134: PUSH
4135: LD_EXP 19
4139: PUSH
4140: LD_VAR 0 1
4144: ARRAY
4145: ST_TO_ADDR
// uc_side := side ;
4146: LD_ADDR_OWVAR 20
4150: PUSH
4151: LD_VAR 0 1
4155: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
4156: LD_ADDR_VAR 0 4
4160: PUSH
4161: LD_EXP 22
4165: PUSH
4166: LD_VAR 0 3
4170: ARRAY
4171: PUSH
4172: LD_INT 1
4174: ARRAY
4175: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
4176: LD_ADDR_VAR 0 5
4180: PUSH
4181: LD_EXP 22
4185: PUSH
4186: LD_VAR 0 3
4190: ARRAY
4191: PUSH
4192: LD_INT 2
4194: ARRAY
4195: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
4196: LD_ADDR_VAR 0 6
4200: PUSH
4201: LD_EXP 22
4205: PUSH
4206: LD_VAR 0 3
4210: ARRAY
4211: PUSH
4212: LD_INT 3
4214: ARRAY
4215: ST_TO_ADDR
// if is_depot then
4216: LD_EXP 3
4220: IFFALSE 4353
// begin bc_type = b_depot ;
4222: LD_ADDR_OWVAR 42
4226: PUSH
4227: LD_INT 0
4229: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4230: LD_ADDR_VAR 0 10
4234: PUSH
4235: LD_VAR 0 4
4239: PPUSH
4240: LD_VAR 0 5
4244: PPUSH
4245: LD_VAR 0 6
4249: PPUSH
4250: CALL_OW 47
4254: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
4255: LD_VAR 0 10
4259: PPUSH
4260: LD_STRING @
4262: PUSH
4263: LD_VAR 0 1
4267: STR
4268: PPUSH
4269: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
4273: LD_VAR 0 10
4277: PPUSH
4278: CALL_OW 274
4282: PPUSH
4283: LD_INT 1
4285: PPUSH
4286: LD_EXP 8
4290: PUSH
4291: LD_INT 1
4293: ARRAY
4294: PPUSH
4295: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
4299: LD_VAR 0 10
4303: PPUSH
4304: CALL_OW 274
4308: PPUSH
4309: LD_INT 2
4311: PPUSH
4312: LD_EXP 8
4316: PUSH
4317: LD_INT 2
4319: ARRAY
4320: PPUSH
4321: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
4325: LD_VAR 0 10
4329: PPUSH
4330: CALL_OW 274
4334: PPUSH
4335: LD_INT 3
4337: PPUSH
4338: LD_EXP 8
4342: PUSH
4343: LD_INT 3
4345: ARRAY
4346: PPUSH
4347: CALL_OW 277
// end else
4351: GO 4497
// begin for i := 1 to 3 do
4353: LD_ADDR_VAR 0 7
4357: PUSH
4358: DOUBLE
4359: LD_INT 1
4361: DEC
4362: ST_TO_ADDR
4363: LD_INT 3
4365: PUSH
4366: FOR_TO
4367: IFFALSE 4495
// begin r := starting_resources [ i ] ;
4369: LD_ADDR_VAR 0 8
4373: PUSH
4374: LD_EXP 8
4378: PUSH
4379: LD_VAR 0 7
4383: ARRAY
4384: ST_TO_ADDR
// while r >= 10 do
4385: LD_VAR 0 8
4389: PUSH
4390: LD_INT 10
4392: GREATEREQUAL
4393: IFFALSE 4493
// if r > 50 then
4395: LD_VAR 0 8
4399: PUSH
4400: LD_INT 50
4402: GREATER
4403: IFFALSE 4449
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4405: LD_VAR 0 7
4409: PPUSH
4410: LD_INT 5
4412: PPUSH
4413: LD_VAR 0 4
4417: PPUSH
4418: LD_VAR 0 5
4422: PPUSH
4423: LD_INT 4
4425: PPUSH
4426: LD_INT 0
4428: PPUSH
4429: CALL_OW 60
// r := r - 50 ;
4433: LD_ADDR_VAR 0 8
4437: PUSH
4438: LD_VAR 0 8
4442: PUSH
4443: LD_INT 50
4445: MINUS
4446: ST_TO_ADDR
// end else
4447: GO 4491
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4449: LD_VAR 0 7
4453: PPUSH
4454: LD_VAR 0 8
4458: PUSH
4459: LD_INT 10
4461: DIV
4462: PPUSH
4463: LD_VAR 0 4
4467: PPUSH
4468: LD_VAR 0 5
4472: PPUSH
4473: LD_INT 4
4475: PPUSH
4476: LD_INT 0
4478: PPUSH
4479: CALL_OW 60
// r := 0 ;
4483: LD_ADDR_VAR 0 8
4487: PUSH
4488: LD_INT 0
4490: ST_TO_ADDR
// end ;
4491: GO 4385
// end ;
4493: GO 4366
4495: POP
4496: POP
// end ; for r in starting_crates do
4497: LD_ADDR_VAR 0 8
4501: PUSH
4502: LD_EXP 7
4506: PUSH
4507: FOR_IN
4508: IFFALSE 4540
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4510: LD_INT 1
4512: PPUSH
4513: LD_INT 5
4515: PPUSH
4516: LD_VAR 0 4
4520: PPUSH
4521: LD_VAR 0 5
4525: PPUSH
4526: LD_VAR 0 8
4530: PPUSH
4531: LD_INT 0
4533: PPUSH
4534: CALL_OW 60
4538: GO 4507
4540: POP
4541: POP
// if def_morale_flags then
4542: LD_EXP 49
4546: IFFALSE 4685
// begin x := start_def [ pos ] [ 1 ] ;
4548: LD_ADDR_VAR 0 4
4552: PUSH
4553: LD_EXP 24
4557: PUSH
4558: LD_VAR 0 3
4562: ARRAY
4563: PUSH
4564: LD_INT 1
4566: ARRAY
4567: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4568: LD_ADDR_VAR 0 5
4572: PUSH
4573: LD_EXP 24
4577: PUSH
4578: LD_VAR 0 3
4582: ARRAY
4583: PUSH
4584: LD_INT 2
4586: ARRAY
4587: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4588: LD_VAR 0 4
4592: PPUSH
4593: LD_VAR 0 5
4597: PPUSH
4598: LD_INT 12
4600: PPUSH
4601: LD_INT 2
4603: PPUSH
4604: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4608: LD_ADDR_EXP 29
4612: PUSH
4613: LD_EXP 29
4617: PUSH
4618: LD_VAR 0 1
4622: PPUSH
4623: LD_VAR 0 4
4627: PPUSH
4628: LD_VAR 0 5
4632: PPUSH
4633: LD_INT 1
4635: PUSH
4636: LD_INT 100
4638: PUSH
4639: EMPTY
4640: LIST
4641: LIST
4642: PUSH
4643: LD_INT 2
4645: PUSH
4646: LD_INT 50
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 3
4655: PUSH
4656: LD_INT 20
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: PUSH
4663: LD_INT 20
4665: PUSH
4666: LD_INT 100
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: PPUSH
4679: CALL_OW 418
4683: ADD
4684: ST_TO_ADDR
// end ; commander := true ;
4685: LD_ADDR_LOC 1
4689: PUSH
4690: LD_INT 1
4692: ST_TO_ADDR
// soldiers_created := 0 ;
4693: LD_ADDR_LOC 4
4697: PUSH
4698: LD_INT 0
4700: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4701: LD_ADDR_VAR 0 7
4705: PUSH
4706: DOUBLE
4707: LD_INT 1
4709: DEC
4710: ST_TO_ADDR
4711: LD_EXP 4
4715: PUSH
4716: FOR_TO
4717: IFFALSE 4870
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4719: LD_ADDR_VAR 0 4
4723: PUSH
4724: LD_EXP 23
4728: PUSH
4729: LD_VAR 0 3
4733: ARRAY
4734: PUSH
4735: LD_VAR 0 7
4739: ARRAY
4740: PUSH
4741: LD_INT 1
4743: ARRAY
4744: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4745: LD_ADDR_VAR 0 5
4749: PUSH
4750: LD_EXP 23
4754: PUSH
4755: LD_VAR 0 3
4759: ARRAY
4760: PUSH
4761: LD_VAR 0 7
4765: ARRAY
4766: PUSH
4767: LD_INT 2
4769: ARRAY
4770: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4771: LD_ADDR_VAR 0 6
4775: PUSH
4776: LD_EXP 23
4780: PUSH
4781: LD_VAR 0 3
4785: ARRAY
4786: PUSH
4787: LD_VAR 0 7
4791: ARRAY
4792: PUSH
4793: LD_INT 3
4795: ARRAY
4796: ST_TO_ADDR
// bc_type := b_breastwork ;
4797: LD_ADDR_OWVAR 42
4801: PUSH
4802: LD_INT 31
4804: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4805: LD_ADDR_VAR 0 9
4809: PUSH
4810: LD_VAR 0 4
4814: PPUSH
4815: LD_VAR 0 5
4819: PPUSH
4820: LD_VAR 0 6
4824: PPUSH
4825: CALL_OW 47
4829: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4830: LD_INT 1
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: LD_INT 0
4838: PPUSH
4839: LD_INT 0
4841: PPUSH
4842: LD_INT 0
4844: PPUSH
4845: LD_VAR 0 9
4849: PPUSH
4850: CALL 3496 0 6
// soldiers_created := soldiers_created + 1 ;
4854: LD_ADDR_LOC 4
4858: PUSH
4859: LD_LOC 4
4863: PUSH
4864: LD_INT 1
4866: PLUS
4867: ST_TO_ADDR
// end ;
4868: GO 4716
4870: POP
4871: POP
// x := start_def [ pos ] [ 1 ] ;
4872: LD_ADDR_VAR 0 4
4876: PUSH
4877: LD_EXP 24
4881: PUSH
4882: LD_VAR 0 3
4886: ARRAY
4887: PUSH
4888: LD_INT 1
4890: ARRAY
4891: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4892: LD_ADDR_VAR 0 5
4896: PUSH
4897: LD_EXP 24
4901: PUSH
4902: LD_VAR 0 3
4906: ARRAY
4907: PUSH
4908: LD_INT 2
4910: ARRAY
4911: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4912: LD_LOC 8
4916: PUSH
4917: LD_EXP 4
4921: MINUS
4922: PPUSH
4923: LD_INT 1
4925: PPUSH
4926: LD_VAR 0 4
4930: PPUSH
4931: LD_VAR 0 5
4935: PPUSH
4936: LD_INT 5
4938: PPUSH
4939: LD_INT 0
4941: PPUSH
4942: CALL 3496 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4946: LD_LOC 5
4950: PPUSH
4951: LD_INT 2
4953: PPUSH
4954: LD_VAR 0 4
4958: PPUSH
4959: LD_VAR 0 5
4963: PPUSH
4964: LD_INT 5
4966: PPUSH
4967: LD_INT 0
4969: PPUSH
4970: CALL 3496 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4974: LD_LOC 7
4978: PPUSH
4979: LD_INT 3
4981: PPUSH
4982: LD_VAR 0 4
4986: PPUSH
4987: LD_VAR 0 5
4991: PPUSH
4992: LD_INT 5
4994: PPUSH
4995: LD_INT 0
4997: PPUSH
4998: CALL 3496 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
5002: LD_LOC 6
5006: PPUSH
5007: LD_INT 4
5009: PPUSH
5010: LD_VAR 0 4
5014: PPUSH
5015: LD_VAR 0 5
5019: PPUSH
5020: LD_INT 5
5022: PPUSH
5023: LD_INT 0
5025: PPUSH
5026: CALL 3496 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
5030: LD_EXP 50
5034: PUSH
5035: LD_INT 20
5037: PPUSH
5038: LD_VAR 0 1
5042: PPUSH
5043: CALL_OW 321
5047: PUSH
5048: LD_INT 1
5050: EQUAL
5051: AND
5052: IFFALSE 5069
// SetTech ( tech_SibDet , side , state_researched ) ;
5054: LD_INT 20
5056: PPUSH
5057: LD_VAR 0 1
5061: PPUSH
5062: LD_INT 2
5064: PPUSH
5065: CALL_OW 322
// if def_siberite_bomb = 1 then
5069: LD_EXP 53
5073: PUSH
5074: LD_INT 1
5076: EQUAL
5077: IFFALSE 5111
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
5079: LD_INT 25
5081: PPUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: LD_INT 1
5089: PPUSH
5090: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
5094: LD_INT 73
5096: PPUSH
5097: LD_VAR 0 1
5101: PPUSH
5102: LD_INT 1
5104: PPUSH
5105: CALL_OW 322
// end else
5109: GO 5141
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
5111: LD_INT 25
5113: PPUSH
5114: LD_VAR 0 1
5118: PPUSH
5119: LD_INT 0
5121: PPUSH
5122: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
5126: LD_INT 73
5128: PPUSH
5129: LD_VAR 0 1
5133: PPUSH
5134: LD_INT 0
5136: PPUSH
5137: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
5141: LD_INT 24
5143: PPUSH
5144: LD_VAR 0 1
5148: PPUSH
5149: LD_INT 0
5151: PPUSH
5152: CALL_OW 322
// global_defined := true ;
5156: LD_ADDR_LOC 3
5160: PUSH
5161: LD_INT 1
5163: ST_TO_ADDR
// end ;
5164: LD_VAR 0 2
5168: RET
// every 0 0$1 do
5169: GO 5171
5171: DISABLE
// if ( def_siberite_bomb > 1 ) then
5172: LD_EXP 53
5176: PUSH
5177: LD_INT 1
5179: GREATER
5180: IFFALSE 5195
// begin wait ( siberite_bomb_Delay ) ;
5182: LD_EXP 15
5186: PPUSH
5187: CALL_OW 67
// EnableSibFiss ;
5191: CALL 5196 0 0
// end ;
5195: END
// function EnableSibFiss ; var i ; begin
5196: LD_INT 0
5198: PPUSH
5199: PPUSH
// for i := 1 to 8 do
5200: LD_ADDR_VAR 0 2
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_INT 8
5212: PUSH
5213: FOR_TO
5214: IFFALSE 5260
// if Side_Positions [ i ] then
5216: LD_EXP 18
5220: PUSH
5221: LD_VAR 0 2
5225: ARRAY
5226: IFFALSE 5258
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5228: LD_INT 25
5230: PPUSH
5231: LD_VAR 0 2
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5243: LD_INT 73
5245: PPUSH
5246: LD_VAR 0 2
5250: PPUSH
5251: LD_INT 1
5253: PPUSH
5254: CALL_OW 322
// end ;
5258: GO 5213
5260: POP
5261: POP
// end ;
5262: LD_VAR 0 1
5266: RET
// function prepare_sides ; var i ; begin
5267: LD_INT 0
5269: PPUSH
5270: PPUSH
// global_units := [ ] ;
5271: LD_ADDR_LOC 2
5275: PUSH
5276: EMPTY
5277: ST_TO_ADDR
// global_defined := false ;
5278: LD_ADDR_LOC 3
5282: PUSH
5283: LD_INT 0
5285: ST_TO_ADDR
// CountClassMembers ;
5286: CALL 5336 0 0
// for i := 1 to 8 do
5290: LD_ADDR_VAR 0 2
5294: PUSH
5295: DOUBLE
5296: LD_INT 1
5298: DEC
5299: ST_TO_ADDR
5300: LD_INT 8
5302: PUSH
5303: FOR_TO
5304: IFFALSE 5329
// if Side_Positions [ i ] then
5306: LD_EXP 18
5310: PUSH
5311: LD_VAR 0 2
5315: ARRAY
5316: IFFALSE 5327
// prepare_side ( i ) ;
5318: LD_VAR 0 2
5322: PPUSH
5323: CALL 4084 0 1
5327: GO 5303
5329: POP
5330: POP
// end ;
5331: LD_VAR 0 1
5335: RET
// function CountClassMembers ; var Mode ; begin
5336: LD_INT 0
5338: PPUSH
5339: PPUSH
// if No_Mechs then
5340: LD_EXP 55
5344: IFFALSE 5356
// Mode := 2 else
5346: LD_ADDR_VAR 0 2
5350: PUSH
5351: LD_INT 2
5353: ST_TO_ADDR
5354: GO 5364
// Mode := 1 ;
5356: LD_ADDR_VAR 0 2
5360: PUSH
5361: LD_INT 1
5363: ST_TO_ADDR
// neng := number_of_people ;
5364: LD_ADDR_LOC 5
5368: PUSH
5369: LD_EXP 5
5373: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
5374: LD_ADDR_LOC 8
5378: PUSH
5379: LD_LOC 5
5383: PUSH
5384: LD_INT 4
5386: PUSH
5387: LD_INT 3
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: PUSH
5394: LD_VAR 0 2
5398: ARRAY
5399: DIV
5400: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
5401: LD_LOC 8
5405: PUSH
5406: LD_EXP 4
5410: LESS
5411: IFFALSE 5423
// nsol := number_of_breastworks ;
5413: LD_ADDR_LOC 8
5417: PUSH
5418: LD_EXP 4
5422: ST_TO_ADDR
// neng := neng - nsol ;
5423: LD_ADDR_LOC 5
5427: PUSH
5428: LD_LOC 5
5432: PUSH
5433: LD_LOC 8
5437: MINUS
5438: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
5439: LD_ADDR_LOC 6
5443: PUSH
5444: LD_LOC 5
5448: PUSH
5449: LD_INT 3
5451: PUSH
5452: LD_INT 2
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_VAR 0 2
5463: ARRAY
5464: DIV
5465: ST_TO_ADDR
// if ( nsci < 1 ) then
5466: LD_LOC 6
5470: PUSH
5471: LD_INT 1
5473: LESS
5474: IFFALSE 5484
// nsci := 1 ;
5476: LD_ADDR_LOC 6
5480: PUSH
5481: LD_INT 1
5483: ST_TO_ADDR
// neng := neng - nsci ;
5484: LD_ADDR_LOC 5
5488: PUSH
5489: LD_LOC 5
5493: PUSH
5494: LD_LOC 6
5498: MINUS
5499: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5500: LD_ADDR_LOC 7
5504: PUSH
5505: LD_LOC 5
5509: PUSH
5510: LD_INT 2
5512: DIV
5513: PUSH
5514: LD_INT 0
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: LD_VAR 0 2
5525: ARRAY
5526: ST_TO_ADDR
// neng := neng - nmech ;
5527: LD_ADDR_LOC 5
5531: PUSH
5532: LD_LOC 5
5536: PUSH
5537: LD_LOC 7
5541: MINUS
5542: ST_TO_ADDR
// if ( neng < 1 ) then
5543: LD_LOC 5
5547: PUSH
5548: LD_INT 1
5550: LESS
5551: IFFALSE 5561
// neng := 1 ;
5553: LD_ADDR_LOC 5
5557: PUSH
5558: LD_INT 1
5560: ST_TO_ADDR
// end ;
5561: LD_VAR 0 1
5565: RET
// starting begin disable ( 98 ) ;
5566: LD_INT 98
5568: DISABLE_MARKED
// disable ( 99 ) ;
5569: LD_INT 99
5571: DISABLE_MARKED
// disable ( 100 ) ;
5572: LD_INT 100
5574: DISABLE_MARKED
// disable ( 200 ) ;
5575: LD_INT 200
5577: DISABLE_MARKED
// disable ( 400 ) ;
5578: LD_INT 400
5580: DISABLE_MARKED
// disable ( 401 ) ;
5581: LD_INT 401
5583: DISABLE_MARKED
// disable ( 600 ) ;
5584: LD_INT 600
5586: DISABLE_MARKED
// mp_selectmsg := true ;
5587: LD_ADDR_OWVAR 13
5591: PUSH
5592: LD_INT 1
5594: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5595: CALL 68 0 0
// init_map ;
5599: CALL 1683 0 0
// set_shared_visions_and_alliances ;
5603: CALL 3208 0 0
// ResetFog ;
5607: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5611: LD_OWVAR 2
5615: PPUSH
5616: CALL_OW 520
// AnimateTrees ( true ) ;
5620: LD_INT 1
5622: PPUSH
5623: CALL_OW 573
// prepare_sides ;
5627: CALL 5267 0 0
// init_respawning ;
5631: CALL 15139 0 0
// Init_Win_Condition ;
5635: CALL 13289 0 0
// InitLimits ;
5639: CALL 11878 0 0
// ShowTimer ;
5643: CALL 12815 0 0
// case Game_Type of 3 :
5647: LD_EXP 39
5651: PUSH
5652: LD_INT 3
5654: DOUBLE
5655: EQUAL
5656: IFTRUE 5660
5658: GO 5666
5660: POP
// enable ( 100 ) ; 4 :
5661: LD_INT 100
5663: ENABLE_MARKED
5664: GO 5682
5666: LD_INT 4
5668: DOUBLE
5669: EQUAL
5670: IFTRUE 5674
5672: GO 5681
5674: POP
// InitBloodGods ; end ;
5675: CALL 9441 0 0
5679: GO 5682
5681: POP
// music_nat := Side_Nations [ your_side ] ;
5682: LD_ADDR_OWVAR 71
5686: PUSH
5687: LD_EXP 19
5691: PUSH
5692: LD_OWVAR 2
5696: ARRAY
5697: ST_TO_ADDR
// if IAmSpec then
5698: CALL_OW 531
5702: IFFALSE 5726
// begin fogOff ( true ) ;
5704: LD_INT 1
5706: PPUSH
5707: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
5711: LD_INT 104
5713: PPUSH
5714: LD_INT 69
5716: PPUSH
5717: CALL_OW 86
// enable ( 400 ) ;
5721: LD_INT 400
5723: ENABLE_MARKED
// end else
5724: GO 5772
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5726: LD_EXP 24
5730: PUSH
5731: LD_EXP 18
5735: PUSH
5736: LD_OWVAR 2
5740: ARRAY
5741: ARRAY
5742: PUSH
5743: LD_INT 1
5745: ARRAY
5746: PPUSH
5747: LD_EXP 24
5751: PUSH
5752: LD_EXP 18
5756: PUSH
5757: LD_OWVAR 2
5761: ARRAY
5762: ARRAY
5763: PUSH
5764: LD_INT 2
5766: ARRAY
5767: PPUSH
5768: CALL_OW 86
// end ; InitApeman ;
5772: CALL 6541 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
5776: LD_ADDR_EXP 58
5780: PUSH
5781: LD_INT 6
5783: PUSH
5784: LD_INT 8
5786: PUSH
5787: LD_INT 11
5789: PUSH
5790: LD_INT 13
5792: PUSH
5793: LD_INT 15
5795: PUSH
5796: LD_INT 16
5798: PUSH
5799: LD_INT 18
5801: PUSH
5802: LD_INT 20
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: ST_TO_ADDR
// BeginBuildUp ;
5815: CALL 15633 0 0
// end ; end_of_file
5819: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5820: GO 5822
5822: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5823: LD_INT 4
5825: PPUSH
5826: LD_INT 5
5828: PPUSH
5829: CALL_OW 12
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 57
// enable ;
5841: ENABLE
// end ;
5842: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5843: GO 5845
5845: DISABLE
5846: LD_INT 0
5848: PPUSH
5849: PPUSH
// begin case tick of 1 .. 1 1$0 :
5850: LD_OWVAR 1
5854: PUSH
5855: LD_INT 1
5857: DOUBLE
5858: GREATEREQUAL
5859: IFFALSE 5867
5861: LD_INT 2100
5863: DOUBLE
5864: LESSEQUAL
5865: IFTRUE 5869
5867: GO 5897
5869: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5870: LD_EXP 9
5874: PUSH
5875: LD_INT 100
5877: DIVREAL
5878: PUSH
5879: LD_INT 525
5881: PPUSH
5882: LD_INT 1050
5884: PPUSH
5885: CALL_OW 12
5889: MUL
5890: PPUSH
5891: CALL_OW 67
5895: GO 6199
5897: LD_INT 2100
5899: PUSH
5900: LD_INT 1
5902: PLUS
5903: DOUBLE
5904: GREATEREQUAL
5905: IFFALSE 5913
5907: LD_INT 10500
5909: DOUBLE
5910: LESSEQUAL
5911: IFTRUE 5915
5913: GO 5943
5915: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5916: LD_EXP 9
5920: PUSH
5921: LD_INT 100
5923: DIVREAL
5924: PUSH
5925: LD_INT 1050
5927: PPUSH
5928: LD_INT 1750
5930: PPUSH
5931: CALL_OW 12
5935: MUL
5936: PPUSH
5937: CALL_OW 67
5941: GO 6199
5943: LD_INT 10500
5945: PUSH
5946: LD_INT 1
5948: PLUS
5949: DOUBLE
5950: GREATEREQUAL
5951: IFFALSE 5959
5953: LD_INT 21000
5955: DOUBLE
5956: LESSEQUAL
5957: IFTRUE 5961
5959: GO 5989
5961: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5962: LD_EXP 9
5966: PUSH
5967: LD_INT 100
5969: DIVREAL
5970: PUSH
5971: LD_INT 1750
5973: PPUSH
5974: LD_INT 2100
5976: PPUSH
5977: CALL_OW 12
5981: MUL
5982: PPUSH
5983: CALL_OW 67
5987: GO 6199
5989: LD_INT 21000
5991: PUSH
5992: LD_INT 1
5994: PLUS
5995: DOUBLE
5996: GREATEREQUAL
5997: IFFALSE 6005
5999: LD_INT 42000
6001: DOUBLE
6002: LESSEQUAL
6003: IFTRUE 6007
6005: GO 6035
6007: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6008: LD_EXP 9
6012: PUSH
6013: LD_INT 100
6015: DIVREAL
6016: PUSH
6017: LD_INT 2100
6019: PPUSH
6020: LD_INT 2275
6022: PPUSH
6023: CALL_OW 12
6027: MUL
6028: PPUSH
6029: CALL_OW 67
6033: GO 6199
6035: LD_INT 42000
6037: PUSH
6038: LD_INT 1
6040: PLUS
6041: DOUBLE
6042: GREATEREQUAL
6043: IFFALSE 6051
6045: LD_INT 63000
6047: DOUBLE
6048: LESSEQUAL
6049: IFTRUE 6053
6051: GO 6081
6053: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6054: LD_EXP 9
6058: PUSH
6059: LD_INT 100
6061: DIVREAL
6062: PUSH
6063: LD_INT 2275
6065: PPUSH
6066: LD_INT 2450
6068: PPUSH
6069: CALL_OW 12
6073: MUL
6074: PPUSH
6075: CALL_OW 67
6079: GO 6199
6081: LD_INT 63000
6083: PUSH
6084: LD_INT 1
6086: PLUS
6087: DOUBLE
6088: GREATEREQUAL
6089: IFFALSE 6097
6091: LD_INT 105000
6093: DOUBLE
6094: LESSEQUAL
6095: IFTRUE 6099
6097: GO 6127
6099: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
6100: LD_EXP 9
6104: PUSH
6105: LD_INT 100
6107: DIVREAL
6108: PUSH
6109: LD_INT 2450
6111: PPUSH
6112: LD_INT 2800
6114: PPUSH
6115: CALL_OW 12
6119: MUL
6120: PPUSH
6121: CALL_OW 67
6125: GO 6199
6127: LD_INT 105000
6129: PUSH
6130: LD_INT 1
6132: PLUS
6133: DOUBLE
6134: GREATEREQUAL
6135: IFFALSE 6143
6137: LD_INT 630000
6139: DOUBLE
6140: LESSEQUAL
6141: IFTRUE 6145
6143: GO 6173
6145: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
6146: LD_EXP 9
6150: PUSH
6151: LD_INT 100
6153: DIVREAL
6154: PUSH
6155: LD_INT 2800
6157: PPUSH
6158: LD_INT 3500
6160: PPUSH
6161: CALL_OW 12
6165: MUL
6166: PPUSH
6167: CALL_OW 67
6171: GO 6199
6173: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
6174: LD_EXP 9
6178: PUSH
6179: LD_INT 100
6181: DIVREAL
6182: PUSH
6183: LD_INT 3500
6185: PPUSH
6186: LD_INT 3850
6188: PPUSH
6189: CALL_OW 12
6193: MUL
6194: PPUSH
6195: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
6199: LD_ADDR_VAR 0 2
6203: PUSH
6204: LD_INT 3
6206: PPUSH
6207: LD_INT 5
6209: PPUSH
6210: CALL_OW 12
6214: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6215: LD_ADDR_VAR 0 1
6219: PUSH
6220: LD_EXP 18
6224: PUSH
6225: LD_INT 0
6227: PUSH
6228: EMPTY
6229: LIST
6230: DIFF
6231: PUSH
6232: FOR_IN
6233: IFFALSE 6282
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
6235: LD_VAR 0 2
6239: PPUSH
6240: LD_EXP 24
6244: PUSH
6245: LD_VAR 0 1
6249: ARRAY
6250: PUSH
6251: LD_INT 1
6253: ARRAY
6254: PPUSH
6255: LD_EXP 24
6259: PUSH
6260: LD_VAR 0 1
6264: ARRAY
6265: PUSH
6266: LD_INT 2
6268: ARRAY
6269: PPUSH
6270: LD_INT 20
6272: PPUSH
6273: LD_INT 1
6275: PPUSH
6276: CALL_OW 56
6280: GO 6232
6282: POP
6283: POP
// enable ;
6284: ENABLE
// end ;
6285: PPOPN 2
6287: END
// every 0 0$20 + 0 0$0.9 marked 10 do var i , filter ;
6288: GO 6290
6290: DISABLE
6291: LD_INT 0
6293: PPUSH
6294: PPUSH
// begin if GetResourceArea ( MZBaseArea , mat_cans ) < ( ( 200 - shipments_density ) / 100 * 5 ) then
6295: LD_INT 1
6297: PPUSH
6298: LD_INT 1
6300: PPUSH
6301: CALL_OW 287
6305: PUSH
6306: LD_INT 200
6308: PUSH
6309: LD_EXP 9
6313: MINUS
6314: PUSH
6315: LD_INT 100
6317: DIVREAL
6318: PUSH
6319: LD_INT 5
6321: MUL
6322: LESS
6323: IFFALSE 6346
// CreateCratesArea ( Rand ( 3 , 5 ) , MZBaseArea , true ) ;
6325: LD_INT 3
6327: PPUSH
6328: LD_INT 5
6330: PPUSH
6331: CALL_OW 12
6335: PPUSH
6336: LD_INT 1
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 55
// enable ;
6346: ENABLE
// end ; end_of_file
6347: PPOPN 2
6349: END
// every 20 20$00 trigger apemanNumber do
6350: LD_EXP 32
6354: IFFALSE 6387
6356: GO 6358
6358: DISABLE
// begin enable ;
6359: ENABLE
// if apeLevel >= 8 then
6360: LD_EXP 37
6364: PUSH
6365: LD_INT 8
6367: GREATEREQUAL
6368: IFFALSE 6373
// disable else
6370: DISABLE
6371: GO 6387
// apeLevel := apeLevel + 1 ;
6373: LD_ADDR_EXP 37
6377: PUSH
6378: LD_EXP 37
6382: PUSH
6383: LD_INT 1
6385: PLUS
6386: ST_TO_ADDR
// end ;
6387: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6388: LD_EXP 32
6392: PUSH
6393: LD_EXP 33
6397: LESS
6398: IFFALSE 6538
6400: GO 6402
6402: DISABLE
6403: LD_INT 0
6405: PPUSH
6406: PPUSH
6407: PPUSH
6408: PPUSH
// begin enable ;
6409: ENABLE
// for i := 1 to apemanPos do
6410: LD_ADDR_VAR 0 1
6414: PUSH
6415: DOUBLE
6416: LD_INT 1
6418: DEC
6419: ST_TO_ADDR
6420: LD_EXP 35
6424: PUSH
6425: FOR_TO
6426: IFFALSE 6536
// begin if apemanPlayerCount [ i ] then
6428: LD_EXP 36
6432: PUSH
6433: LD_VAR 0 1
6437: ARRAY
6438: IFFALSE 6534
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6440: LD_EXP 36
6444: PUSH
6445: LD_VAR 0 1
6449: ARRAY
6450: PUSH
6451: LD_EXP 35
6455: PUSH
6456: LD_VAR 0 1
6460: ARRAY
6461: GREATER
6462: IFFALSE 6534
// begin ape := PrepareApeman ;
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: CALL 7057 0 0
6473: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6474: LD_VAR 0 2
6478: PPUSH
6479: LD_EXP 38
6483: PUSH
6484: LD_VAR 0 1
6488: ARRAY
6489: PPUSH
6490: LD_INT 0
6492: PPUSH
6493: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6497: LD_ADDR_EXP 35
6501: PUSH
6502: LD_EXP 35
6506: PPUSH
6507: LD_VAR 0 1
6511: PPUSH
6512: LD_EXP 35
6516: PUSH
6517: LD_VAR 0 1
6521: ARRAY
6522: PUSH
6523: LD_VAR 0 2
6527: UNION
6528: PPUSH
6529: CALL_OW 1
6533: ST_TO_ADDR
// end ; end ; end ;
6534: GO 6425
6536: POP
6537: POP
// end ;
6538: PPOPN 4
6540: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6541: LD_INT 0
6543: PPUSH
6544: PPUSH
6545: PPUSH
6546: PPUSH
6547: PPUSH
6548: PPUSH
6549: PPUSH
// playersAmount := 0 ;
6550: LD_ADDR_VAR 0 3
6554: PUSH
6555: LD_INT 0
6557: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
6558: LD_ADDR_VAR 0 7
6562: PUSH
6563: LD_INT 7
6565: PUSH
6566: LD_INT 9
6568: PUSH
6569: LD_INT 10
6571: PUSH
6572: LD_INT 12
6574: PUSH
6575: LD_INT 14
6577: PUSH
6578: LD_INT 17
6580: PUSH
6581: LD_INT 19
6583: PUSH
6584: LD_INT 21
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6597: LD_ADDR_EXP 38
6601: PUSH
6602: LD_INT 0
6604: PUSH
6605: LD_INT 0
6607: PUSH
6608: LD_INT 0
6610: PUSH
6611: LD_INT 0
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: LD_INT 0
6619: PUSH
6620: LD_INT 0
6622: PUSH
6623: LD_INT 0
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: ST_TO_ADDR
// for j = 1 to Side_Positions do
6636: LD_ADDR_VAR 0 4
6640: PUSH
6641: DOUBLE
6642: LD_INT 1
6644: DEC
6645: ST_TO_ADDR
6646: LD_EXP 18
6650: PUSH
6651: FOR_TO
6652: IFFALSE 6719
// if Side_Positions [ j ] then
6654: LD_EXP 18
6658: PUSH
6659: LD_VAR 0 4
6663: ARRAY
6664: IFFALSE 6717
// begin playersAmount := playersAmount + 1 ;
6666: LD_ADDR_VAR 0 3
6670: PUSH
6671: LD_VAR 0 3
6675: PUSH
6676: LD_INT 1
6678: PLUS
6679: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6680: LD_ADDR_EXP 38
6684: PUSH
6685: LD_EXP 38
6689: PPUSH
6690: LD_VAR 0 4
6694: PPUSH
6695: LD_VAR 0 7
6699: PUSH
6700: LD_EXP 18
6704: PUSH
6705: LD_VAR 0 4
6709: ARRAY
6710: ARRAY
6711: PPUSH
6712: CALL_OW 1
6716: ST_TO_ADDR
// end ;
6717: GO 6651
6719: POP
6720: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6721: LD_ADDR_EXP 34
6725: PUSH
6726: LD_INT 3
6728: PUSH
6729: LD_EXP 14
6733: MUL
6734: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6735: LD_ADDR_EXP 32
6739: PUSH
6740: LD_VAR 0 3
6744: PUSH
6745: LD_EXP 34
6749: MUL
6750: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6751: LD_ADDR_EXP 33
6755: PUSH
6756: LD_EXP 32
6760: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6761: LD_ADDR_EXP 35
6765: PUSH
6766: LD_INT 0
6768: PUSH
6769: LD_INT 0
6771: PUSH
6772: LD_INT 0
6774: PUSH
6775: LD_INT 0
6777: PUSH
6778: LD_INT 0
6780: PUSH
6781: LD_INT 0
6783: PUSH
6784: LD_INT 0
6786: PUSH
6787: LD_INT 0
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6800: LD_ADDR_EXP 36
6804: PUSH
6805: LD_INT 0
6807: PUSH
6808: LD_INT 0
6810: PUSH
6811: LD_INT 0
6813: PUSH
6814: LD_INT 0
6816: PUSH
6817: LD_INT 0
6819: PUSH
6820: LD_INT 0
6822: PUSH
6823: LD_INT 0
6825: PUSH
6826: LD_INT 0
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: ST_TO_ADDR
// apeLevel := 1 ;
6839: LD_ADDR_EXP 37
6843: PUSH
6844: LD_INT 1
6846: ST_TO_ADDR
// if not apemanNumber then
6847: LD_EXP 32
6851: NOT
6852: IFFALSE 6856
// exit ;
6854: GO 7052
// for i := 1 to apemanPerPlayer do
6856: LD_ADDR_VAR 0 2
6860: PUSH
6861: DOUBLE
6862: LD_INT 1
6864: DEC
6865: ST_TO_ADDR
6866: LD_EXP 34
6870: PUSH
6871: FOR_TO
6872: IFFALSE 7050
// begin for j := 1 to Side_Positions do
6874: LD_ADDR_VAR 0 4
6878: PUSH
6879: DOUBLE
6880: LD_INT 1
6882: DEC
6883: ST_TO_ADDR
6884: LD_EXP 18
6888: PUSH
6889: FOR_TO
6890: IFFALSE 7046
// if Side_Positions [ j ] then
6892: LD_EXP 18
6896: PUSH
6897: LD_VAR 0 4
6901: ARRAY
6902: IFFALSE 7044
// begin pos := Side_Positions [ j ] ;
6904: LD_ADDR_VAR 0 6
6908: PUSH
6909: LD_EXP 18
6913: PUSH
6914: LD_VAR 0 4
6918: ARRAY
6919: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6920: LD_ADDR_EXP 36
6924: PUSH
6925: LD_EXP 36
6929: PPUSH
6930: LD_VAR 0 4
6934: PPUSH
6935: LD_EXP 36
6939: PUSH
6940: LD_VAR 0 4
6944: ARRAY
6945: PUSH
6946: LD_INT 1
6948: PLUS
6949: PPUSH
6950: CALL_OW 1
6954: ST_TO_ADDR
// ape := PrepareApeman ;
6955: LD_ADDR_VAR 0 5
6959: PUSH
6960: CALL 7057 0 0
6964: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6965: LD_ADDR_EXP 35
6969: PUSH
6970: LD_EXP 35
6974: PPUSH
6975: LD_VAR 0 4
6979: PPUSH
6980: LD_EXP 35
6984: PUSH
6985: LD_VAR 0 4
6989: ARRAY
6990: PPUSH
6991: LD_EXP 35
6995: PUSH
6996: LD_VAR 0 4
7000: ARRAY
7001: PUSH
7002: LD_INT 1
7004: PLUS
7005: PPUSH
7006: LD_VAR 0 5
7010: PPUSH
7011: CALL_OW 1
7015: PPUSH
7016: CALL_OW 1
7020: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7021: LD_VAR 0 5
7025: PPUSH
7026: LD_EXP 38
7030: PUSH
7031: LD_VAR 0 4
7035: ARRAY
7036: PPUSH
7037: LD_INT 0
7039: PPUSH
7040: CALL_OW 49
// end ;
7044: GO 6889
7046: POP
7047: POP
// end ;
7048: GO 6871
7050: POP
7051: POP
// end ;
7052: LD_VAR 0 1
7056: RET
// export function PrepareApeman ; var bonus ; begin
7057: LD_INT 0
7059: PPUSH
7060: PPUSH
// uc_side := 0 ;
7061: LD_ADDR_OWVAR 20
7065: PUSH
7066: LD_INT 0
7068: ST_TO_ADDR
// uc_nation := 0 ;
7069: LD_ADDR_OWVAR 21
7073: PUSH
7074: LD_INT 0
7076: ST_TO_ADDR
// InitHc ;
7077: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
7081: LD_ADDR_VAR 0 2
7085: PUSH
7086: LD_INT 1
7088: NEG
7089: PUSH
7090: LD_INT 0
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 25
7103: PUSH
7104: LD_INT 12
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PPUSH
7111: CALL_OW 69
7115: PUSH
7116: LD_INT 3
7118: MOD
7119: PUSH
7120: LD_INT 1
7122: PLUS
7123: ARRAY
7124: ST_TO_ADDR
// hc_class := class_apeman ;
7125: LD_ADDR_OWVAR 28
7129: PUSH
7130: LD_INT 12
7132: ST_TO_ADDR
// hc_gallery :=  ;
7133: LD_ADDR_OWVAR 33
7137: PUSH
7138: LD_STRING 
7140: ST_TO_ADDR
// hc_name :=  ;
7141: LD_ADDR_OWVAR 26
7145: PUSH
7146: LD_STRING 
7148: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7149: LD_ADDR_OWVAR 31
7153: PUSH
7154: LD_EXP 37
7158: PUSH
7159: LD_VAR 0 2
7163: PLUS
7164: PUSH
7165: LD_EXP 37
7169: PUSH
7170: LD_VAR 0 2
7174: PLUS
7175: PUSH
7176: LD_EXP 37
7180: PUSH
7181: LD_VAR 0 2
7185: PLUS
7186: PUSH
7187: LD_EXP 37
7191: PUSH
7192: LD_VAR 0 2
7196: PLUS
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7204: LD_ADDR_OWVAR 35
7208: PUSH
7209: LD_INT 10
7211: PUSH
7212: LD_VAR 0 2
7216: MUL
7217: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
7218: LD_ADDR_OWVAR 29
7222: PUSH
7223: LD_INT 12
7225: PUSH
7226: LD_INT 12
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: ST_TO_ADDR
// result := CreateHuman ;
7233: LD_ADDR_VAR 0 1
7237: PUSH
7238: CALL_OW 44
7242: ST_TO_ADDR
// end ;
7243: LD_VAR 0 1
7247: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
7248: LD_INT 0
7250: PPUSH
7251: PPUSH
7252: PPUSH
// if not ape then
7253: LD_VAR 0 1
7257: NOT
7258: IFFALSE 7262
// exit ;
7260: GO 7365
// for i = 1 to apemanPos do
7262: LD_ADDR_VAR 0 4
7266: PUSH
7267: DOUBLE
7268: LD_INT 1
7270: DEC
7271: ST_TO_ADDR
7272: LD_EXP 35
7276: PUSH
7277: FOR_TO
7278: IFFALSE 7312
// if ape in apemanPos [ i ] then
7280: LD_VAR 0 1
7284: PUSH
7285: LD_EXP 35
7289: PUSH
7290: LD_VAR 0 4
7294: ARRAY
7295: IN
7296: IFFALSE 7310
// begin s := i ;
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_VAR 0 4
7307: ST_TO_ADDR
// break ;
7308: GO 7312
// end ;
7310: GO 7277
7312: POP
7313: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
7314: LD_ADDR_EXP 35
7318: PUSH
7319: LD_EXP 35
7323: PPUSH
7324: LD_VAR 0 3
7328: PPUSH
7329: LD_EXP 35
7333: PUSH
7334: LD_VAR 0 3
7338: ARRAY
7339: PUSH
7340: LD_VAR 0 1
7344: DIFF
7345: PPUSH
7346: CALL_OW 1
7350: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7351: LD_ADDR_EXP 32
7355: PUSH
7356: LD_EXP 32
7360: PUSH
7361: LD_INT 1
7363: MINUS
7364: ST_TO_ADDR
// end ; end_of_file
7365: LD_VAR 0 2
7369: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7370: LD_VAR 0 1
7374: PPUSH
7375: CALL_OW 266
7379: PUSH
7380: LD_INT 0
7382: PUSH
7383: LD_INT 1
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: IN
7390: IFFALSE 7415
// SetBName ( b , @ & GetSide ( b ) ) ;
7392: LD_VAR 0 1
7396: PPUSH
7397: LD_STRING @
7399: PUSH
7400: LD_VAR 0 1
7404: PPUSH
7405: CALL_OW 255
7409: STR
7410: PPUSH
7411: CALL_OW 500
// if def_game_rules then
7415: LD_EXP 40
7419: IFFALSE 7456
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7421: LD_VAR 0 1
7425: PPUSH
7426: LD_VAR 0 1
7430: PPUSH
7431: CALL_OW 266
7435: PPUSH
7436: LD_VAR 0 1
7440: PPUSH
7441: CALL_OW 255
7445: PPUSH
7446: LD_INT 0
7448: PPUSH
7449: LD_INT 1
7451: PPUSH
7452: CALL 12279 0 5
// end ;
7456: PPOPN 2
7458: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7459: LD_VAR 0 1
7463: PPUSH
7464: CALL_OW 266
7468: PUSH
7469: LD_INT 0
7471: PUSH
7472: LD_INT 1
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: IN
7479: IFFALSE 7504
// SetBName ( b , @ & GetSide ( b ) ) ;
7481: LD_VAR 0 1
7485: PPUSH
7486: LD_STRING @
7488: PUSH
7489: LD_VAR 0 1
7493: PPUSH
7494: CALL_OW 255
7498: STR
7499: PPUSH
7500: CALL_OW 500
// if def_game_rules then
7504: LD_EXP 40
7508: IFFALSE 7547
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7510: LD_VAR 0 1
7514: PPUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 266
7524: PPUSH
7525: LD_VAR 0 1
7529: PPUSH
7530: CALL_OW 255
7534: PPUSH
7535: LD_VAR 0 2
7539: PPUSH
7540: LD_INT 1
7542: PPUSH
7543: CALL 12279 0 5
// end ;
7547: PPOPN 3
7549: END
// on VehicleConstructed ( veh , fac ) do var side ;
7550: LD_INT 0
7552: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7553: LD_VAR 0 1
7557: PPUSH
7558: CALL_OW 263
7562: PUSH
7563: LD_INT 5
7565: EQUAL
7566: IFFALSE 7708
// begin side := GetSide ( veh ) ;
7568: LD_ADDR_VAR 0 3
7572: PUSH
7573: LD_VAR 0 1
7577: PPUSH
7578: CALL_OW 255
7582: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7583: LD_ADDR_EXP 35
7587: PUSH
7588: LD_EXP 35
7592: PPUSH
7593: LD_VAR 0 3
7597: PPUSH
7598: LD_EXP 35
7602: PUSH
7603: LD_VAR 0 3
7607: ARRAY
7608: PPUSH
7609: LD_INT 52
7611: PUSH
7612: EMPTY
7613: LIST
7614: PPUSH
7615: CALL_OW 72
7619: PUSH
7620: LD_INT 22
7622: PUSH
7623: LD_VAR 0 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 33
7637: PUSH
7638: LD_INT 5
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 25
7647: PUSH
7648: LD_INT 12
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 25
7657: PUSH
7658: LD_INT 15
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 25
7667: PUSH
7668: LD_INT 16
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: LD_INT 25
7677: PUSH
7678: LD_INT 17
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PPUSH
7697: CALL_OW 69
7701: UNION
7702: PPUSH
7703: CALL_OW 1
7707: ST_TO_ADDR
// end ; end ;
7708: PPOPN 3
7710: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7711: LD_INT 0
7713: PPUSH
7714: PPUSH
7715: PPUSH
7716: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7717: LD_VAR 0 1
7721: PPUSH
7722: CALL_OW 257
7726: PUSH
7727: LD_INT 12
7729: PUSH
7730: LD_INT 15
7732: PUSH
7733: LD_INT 17
7735: PUSH
7736: LD_INT 16
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: IN
7745: PUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 263
7755: PUSH
7756: LD_INT 5
7758: EQUAL
7759: OR
7760: IFFALSE 7771
// ApeKilled ( j ) ;
7762: LD_VAR 0 1
7766: PPUSH
7767: CALL 7248 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 266
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: LD_INT 1
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: IN
7791: IFFALSE 7873
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7793: LD_ADDR_VAR 0 4
7797: PUSH
7798: LD_EXP 18
7802: PUSH
7803: LD_VAR 0 1
7807: PPUSH
7808: CALL_OW 255
7812: ARRAY
7813: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7814: LD_ADDR_VAR 0 2
7818: PUSH
7819: LD_EXP 24
7823: PUSH
7824: LD_VAR 0 4
7828: ARRAY
7829: PUSH
7830: LD_INT 1
7832: ARRAY
7833: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7834: LD_ADDR_VAR 0 3
7838: PUSH
7839: LD_EXP 24
7843: PUSH
7844: LD_VAR 0 4
7848: ARRAY
7849: PUSH
7850: LD_INT 2
7852: ARRAY
7853: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7854: LD_VAR 0 2
7858: PPUSH
7859: LD_VAR 0 3
7863: PPUSH
7864: CALL_OW 420
7868: PPUSH
7869: CALL_OW 419
// end ; if def_game_rules then
7873: LD_EXP 40
7877: IFFALSE 7976
// if ( GetType ( j ) = 3 ) then
7879: LD_VAR 0 1
7883: PPUSH
7884: CALL_OW 247
7888: PUSH
7889: LD_INT 3
7891: EQUAL
7892: IFFALSE 7932
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7894: LD_VAR 0 1
7898: PPUSH
7899: LD_VAR 0 1
7903: PPUSH
7904: CALL_OW 266
7908: PPUSH
7909: LD_VAR 0 1
7913: PPUSH
7914: CALL_OW 255
7918: PPUSH
7919: LD_INT 0
7921: PPUSH
7922: LD_INT 1
7924: NEG
7925: PPUSH
7926: CALL 12279 0 5
7930: GO 7976
// if ( GetChassis ( j ) = 25 ) then
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 265
7941: PUSH
7942: LD_INT 25
7944: EQUAL
7945: IFFALSE 7976
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7947: LD_VAR 0 1
7951: PPUSH
7952: LD_INT 37
7954: PPUSH
7955: LD_VAR 0 1
7959: PPUSH
7960: CALL_OW 255
7964: PPUSH
7965: LD_INT 0
7967: PPUSH
7968: LD_INT 1
7970: NEG
7971: PPUSH
7972: CALL 12279 0 5
// end ;
7976: PPOPN 5
7978: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7979: LD_EXP 40
7983: PUSH
7984: LD_VAR 0 1
7988: PPUSH
7989: CALL_OW 265
7993: PUSH
7994: LD_INT 25
7996: EQUAL
7997: AND
7998: IFFALSE 8030
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8000: LD_VAR 0 1
8004: PPUSH
8005: LD_INT 37
8007: PPUSH
8008: LD_VAR 0 1
8012: PPUSH
8013: CALL_OW 255
8017: PPUSH
8018: LD_VAR 0 3
8022: PPUSH
8023: LD_INT 1
8025: PPUSH
8026: CALL 12279 0 5
// end ;
8030: PPOPN 4
8032: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8033: LD_VAR 0 1
8037: PPUSH
8038: LD_VAR 0 2
8042: PPUSH
8043: LD_VAR 0 3
8047: PPUSH
8048: LD_OWVAR 2
8052: PPUSH
8053: CALL 13050 0 4
8057: PPOPN 3
8059: END
// every 0 0$1 marked 100 do var i , base , pom , filter , sib_mined ;
8060: GO 8062
8062: DISABLE
8063: LD_INT 0
8065: PPUSH
8066: PPUSH
8067: PPUSH
8068: PPUSH
8069: PPUSH
// begin sib_mined := [ ] ;
8070: LD_ADDR_VAR 0 5
8074: PUSH
8075: EMPTY
8076: ST_TO_ADDR
// for i := 1 to 8 do
8077: LD_ADDR_VAR 0 1
8081: PUSH
8082: DOUBLE
8083: LD_INT 1
8085: DEC
8086: ST_TO_ADDR
8087: LD_INT 8
8089: PUSH
8090: FOR_TO
8091: IFFALSE 8247
// if Side_Positions [ i ] then
8093: LD_EXP 18
8097: PUSH
8098: LD_VAR 0 1
8102: ARRAY
8103: IFFALSE 8231
// begin filter := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8105: LD_ADDR_VAR 0 4
8109: PUSH
8110: LD_INT 22
8112: PUSH
8113: LD_VAR 0 1
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 2
8124: PUSH
8125: LD_INT 30
8127: PUSH
8128: LD_INT 0
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PUSH
8135: LD_INT 30
8137: PUSH
8138: LD_INT 1
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: LIST
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PPUSH
8154: CALL_OW 69
8158: ST_TO_ADDR
// pom := 0 ;
8159: LD_ADDR_VAR 0 3
8163: PUSH
8164: LD_INT 0
8166: ST_TO_ADDR
// for base in filter do
8167: LD_ADDR_VAR 0 2
8171: PUSH
8172: LD_VAR 0 4
8176: PUSH
8177: FOR_IN
8178: IFFALSE 8211
// pom := pom + GetResourceType ( GetBase ( base ) , mat_siberit ) ;
8180: LD_ADDR_VAR 0 3
8184: PUSH
8185: LD_VAR 0 3
8189: PUSH
8190: LD_VAR 0 2
8194: PPUSH
8195: CALL_OW 274
8199: PPUSH
8200: LD_INT 3
8202: PPUSH
8203: CALL_OW 275
8207: PLUS
8208: ST_TO_ADDR
8209: GO 8177
8211: POP
8212: POP
// sib_mined := sib_mined ^ pom ;
8213: LD_ADDR_VAR 0 5
8217: PUSH
8218: LD_VAR 0 5
8222: PUSH
8223: LD_VAR 0 3
8227: ADD
8228: ST_TO_ADDR
// end else
8229: GO 8245
// sib_mined := sib_mined ^ 0 ;
8231: LD_ADDR_VAR 0 5
8235: PUSH
8236: LD_VAR 0 5
8240: PUSH
8241: LD_INT 0
8243: ADD
8244: ST_TO_ADDR
8245: GO 8090
8247: POP
8248: POP
// if not def_public_score then
8249: LD_EXP 2
8253: NOT
8254: IFFALSE 8344
// begin ExtraStrings := [ ] ;
8256: LD_ADDR_EXP 56
8260: PUSH
8261: EMPTY
8262: ST_TO_ADDR
// for i := 1 to 8 do
8263: LD_ADDR_VAR 0 1
8267: PUSH
8268: DOUBLE
8269: LD_INT 1
8271: DEC
8272: ST_TO_ADDR
8273: LD_INT 8
8275: PUSH
8276: FOR_TO
8277: IFFALSE 8340
// if Side_Positions [ i ] then
8279: LD_EXP 18
8283: PUSH
8284: LD_VAR 0 1
8288: ARRAY
8289: IFFALSE 8338
// ExtraStrings := ExtraStrings ^ [ #AlienBase-MinedPublic , i , i , sib_mined [ i ] , amount_of_siberit ] ;
8291: LD_ADDR_EXP 56
8295: PUSH
8296: LD_EXP 56
8300: PUSH
8301: LD_STRING #AlienBase-MinedPublic
8303: PUSH
8304: LD_VAR 0 1
8308: PUSH
8309: LD_VAR 0 1
8313: PUSH
8314: LD_VAR 0 5
8318: PUSH
8319: LD_VAR 0 1
8323: ARRAY
8324: PUSH
8325: LD_EXP 11
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: ADD
8337: ST_TO_ADDR
8338: GO 8276
8340: POP
8341: POP
// end else
8342: GO 8373
// ExtraStrings := [ #AlienBase-Mined , sib_mined [ Your_Side ] , amount_of_siberit ] ;
8344: LD_ADDR_EXP 56
8348: PUSH
8349: LD_STRING #AlienBase-Mined
8351: PUSH
8352: LD_VAR 0 5
8356: PUSH
8357: LD_OWVAR 2
8361: ARRAY
8362: PUSH
8363: LD_EXP 11
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: LIST
8372: ST_TO_ADDR
// for i := 1 to 8 do
8373: LD_ADDR_VAR 0 1
8377: PUSH
8378: DOUBLE
8379: LD_INT 1
8381: DEC
8382: ST_TO_ADDR
8383: LD_INT 8
8385: PUSH
8386: FOR_TO
8387: IFFALSE 8457
// if sib_mined [ i ] >= amount_of_siberit then
8389: LD_VAR 0 5
8393: PUSH
8394: LD_VAR 0 1
8398: ARRAY
8399: PUSH
8400: LD_EXP 11
8404: GREATEREQUAL
8405: IFFALSE 8455
// begin wait ( 0 0$1 ) ;
8407: LD_INT 35
8409: PPUSH
8410: CALL_OW 67
// if IAmServer then
8414: CALL_OW 518
8418: IFFALSE 8427
// wait ( 0 0$1 ) ;
8420: LD_INT 35
8422: PPUSH
8423: CALL_OW 67
// if sib_mined [ your_side ] >= amount_of_siberit then
8427: LD_VAR 0 5
8431: PUSH
8432: LD_OWVAR 2
8436: ARRAY
8437: PUSH
8438: LD_EXP 11
8442: GREATEREQUAL
8443: IFFALSE 8451
// YouWinInMultiplayer else
8445: CALL_OW 106
8449: GO 8455
// YouLostInMultiplayer ;
8451: CALL_OW 107
// end ;
8455: GO 8386
8457: POP
8458: POP
// enable ;
8459: ENABLE
// end ; end_of_file
8460: PPOPN 5
8462: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8463: LD_INT 0
8465: PPUSH
8466: PPUSH
// for un in battle_flags_id do
8467: LD_ADDR_VAR 0 2
8471: PUSH
8472: LD_EXP 29
8476: PUSH
8477: FOR_IN
8478: IFFALSE 8553
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8480: LD_VAR 0 2
8484: PPUSH
8485: LD_INT 1
8487: PUSH
8488: LD_LOC 9
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: LD_INT 2
8499: PUSH
8500: LD_LOC 9
8504: PUSH
8505: LD_INT 2
8507: DIV
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: LD_INT 3
8515: PUSH
8516: LD_LOC 9
8520: PUSH
8521: LD_INT 5
8523: DIV
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 20
8531: PUSH
8532: LD_LOC 9
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: PPUSH
8547: CALL_OW 423
8551: GO 8477
8553: POP
8554: POP
// end ;
8555: LD_VAR 0 1
8559: RET
// every 1 do var un ;
8560: GO 8562
8562: DISABLE
8563: LD_INT 0
8565: PPUSH
// begin if not def_morale_flags then
8566: LD_EXP 49
8570: NOT
8571: IFFALSE 8575
// exit ;
8573: GO 8652
// if not morale_decreasing_time then
8575: LD_EXP 10
8579: NOT
8580: IFFALSE 8584
// exit ;
8582: GO 8652
// strength = 100 ;
8584: LD_ADDR_LOC 9
8588: PUSH
8589: LD_INT 100
8591: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8592: LD_EXP 10
8596: PPUSH
8597: CALL_OW 67
// strength := strength - 1 ;
8601: LD_ADDR_LOC 9
8605: PUSH
8606: LD_LOC 9
8610: PUSH
8611: LD_INT 1
8613: MINUS
8614: ST_TO_ADDR
// Update_Flags ;
8615: CALL 8463 0 0
// until not strength ;
8619: LD_LOC 9
8623: NOT
8624: IFFALSE 8592
// for un in battle_flags_id do
8626: LD_ADDR_VAR 0 1
8630: PUSH
8631: LD_EXP 29
8635: PUSH
8636: FOR_IN
8637: IFFALSE 8650
// KillBattleFlag ( un ) ;
8639: LD_VAR 0 1
8643: PPUSH
8644: CALL_OW 419
8648: GO 8636
8650: POP
8651: POP
// end ; end_of_file
8652: PPOPN 1
8654: END
// var BloodGods , BloodGods_LastKills , BloodGods_CurrentKills , BloodGods_Positions ; every 0 0$3 marked 200 do var x ;
8655: GO 8657
8657: DISABLE
8658: LD_INT 0
8660: PPUSH
// begin enable ;
8661: ENABLE
// for x := 1 to 8 do
8662: LD_ADDR_VAR 0 1
8666: PUSH
8667: DOUBLE
8668: LD_INT 1
8670: DEC
8671: ST_TO_ADDR
8672: LD_INT 8
8674: PUSH
8675: FOR_TO
8676: IFFALSE 8760
// if ( BloodGods_CurrentKills [ x ] > 5 ) and ( BloodGods [ x ] = - 1 ) then
8678: LD_LOC 16
8682: PUSH
8683: LD_VAR 0 1
8687: ARRAY
8688: PUSH
8689: LD_INT 5
8691: GREATER
8692: PUSH
8693: LD_LOC 14
8697: PUSH
8698: LD_VAR 0 1
8702: ARRAY
8703: PUSH
8704: LD_INT 1
8706: NEG
8707: EQUAL
8708: AND
8709: IFFALSE 8758
// begin BloodGods_LastKills := Replace ( BloodGods_LastKills , x , BloodGods_LastKills [ x ] + 6 ) ;
8711: LD_ADDR_LOC 15
8715: PUSH
8716: LD_LOC 15
8720: PPUSH
8721: LD_VAR 0 1
8725: PPUSH
8726: LD_LOC 15
8730: PUSH
8731: LD_VAR 0 1
8735: ARRAY
8736: PUSH
8737: LD_INT 6
8739: PLUS
8740: PPUSH
8741: CALL_OW 1
8745: ST_TO_ADDR
// AwakenBloodGod ( x , false ) ;
8746: LD_VAR 0 1
8750: PPUSH
8751: LD_INT 0
8753: PPUSH
8754: CALL 8932 0 2
// end ;
8758: GO 8675
8760: POP
8761: POP
// end ;
8762: PPOPN 1
8764: END
// every 0 0$1 marked 200 do var BGL , x ;
8765: GO 8767
8767: DISABLE
8768: LD_INT 0
8770: PPUSH
8771: PPUSH
// begin enable ;
8772: ENABLE
// for x := 1 to 8 do
8773: LD_ADDR_VAR 0 2
8777: PUSH
8778: DOUBLE
8779: LD_INT 1
8781: DEC
8782: ST_TO_ADDR
8783: LD_INT 8
8785: PUSH
8786: FOR_TO
8787: IFFALSE 8918
// if ( BloodGods [ x ] > - 1 ) and IsLive ( BloodGods [ x ] ) then
8789: LD_LOC 14
8793: PUSH
8794: LD_VAR 0 2
8798: ARRAY
8799: PUSH
8800: LD_INT 1
8802: NEG
8803: GREATER
8804: PUSH
8805: LD_LOC 14
8809: PUSH
8810: LD_VAR 0 2
8814: ARRAY
8815: PPUSH
8816: CALL_OW 300
8820: AND
8821: IFFALSE 8916
// begin BGL := GetLives ( BloodGods [ x ] ) ;
8823: LD_ADDR_VAR 0 1
8827: PUSH
8828: LD_LOC 14
8832: PUSH
8833: LD_VAR 0 2
8837: ARRAY
8838: PPUSH
8839: CALL_OW 256
8843: ST_TO_ADDR
// if ( BGL < 1000 ) and ( BGL > 100 ) then
8844: LD_VAR 0 1
8848: PUSH
8849: LD_INT 1000
8851: LESS
8852: PUSH
8853: LD_VAR 0 1
8857: PUSH
8858: LD_INT 100
8860: GREATER
8861: AND
8862: IFFALSE 8916
// begin BGL := BGL + 10 ;
8864: LD_ADDR_VAR 0 1
8868: PUSH
8869: LD_VAR 0 1
8873: PUSH
8874: LD_INT 10
8876: PLUS
8877: ST_TO_ADDR
// if BGL > 1000 then
8878: LD_VAR 0 1
8882: PUSH
8883: LD_INT 1000
8885: GREATER
8886: IFFALSE 8896
// BGL := 1000 ;
8888: LD_ADDR_VAR 0 1
8892: PUSH
8893: LD_INT 1000
8895: ST_TO_ADDR
// SetLives ( BloodGods [ x ] , BGL ) ;
8896: LD_LOC 14
8900: PUSH
8901: LD_VAR 0 2
8905: ARRAY
8906: PPUSH
8907: LD_VAR 0 1
8911: PPUSH
8912: CALL_OW 234
// end ; end ;
8916: GO 8786
8918: POP
8919: POP
// end ;
8920: PPOPN 2
8922: END
// every 0 0$1 marked 200 do
8923: GO 8925
8925: DISABLE
// begin DisplayTimeWithKills ;
8926: CALL 9173 0 0
// enable ;
8930: ENABLE
// end ;
8931: END
// function AwakenBloodGod ( side , NoDialog ) ; begin
8932: LD_INT 0
8934: PPUSH
// uc_direction := Rand ( 0 , 5 ) ;
8935: LD_ADDR_OWVAR 24
8939: PUSH
8940: LD_INT 0
8942: PPUSH
8943: LD_INT 5
8945: PPUSH
8946: CALL_OW 12
8950: ST_TO_ADDR
// PrepareHuman ( 1 , class_soldier , 15 ) ;
8951: LD_INT 1
8953: PPUSH
8954: LD_INT 1
8956: PPUSH
8957: LD_INT 15
8959: PPUSH
8960: CALL_OW 380
// hc_importance := 106 ;
8964: LD_ADDR_OWVAR 32
8968: PUSH
8969: LD_INT 106
8971: ST_TO_ADDR
// hc_name := Blood God of  & mp_sides_players_names [ side ] ;
8972: LD_ADDR_OWVAR 26
8976: PUSH
8977: LD_STRING Blood God of 
8979: PUSH
8980: LD_OWVAR 19
8984: PUSH
8985: LD_VAR 0 1
8989: ARRAY
8990: STR
8991: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
8992: LD_ADDR_OWVAR 21
8996: PUSH
8997: LD_EXP 19
9001: PUSH
9002: LD_VAR 0 1
9006: ARRAY
9007: ST_TO_ADDR
// uc_side := side ;
9008: LD_ADDR_OWVAR 20
9012: PUSH
9013: LD_VAR 0 1
9017: ST_TO_ADDR
// hc_noskilllimit := true ;
9018: LD_ADDR_OWVAR 76
9022: PUSH
9023: LD_INT 1
9025: ST_TO_ADDR
// hc_agressivity := 50 ;
9026: LD_ADDR_OWVAR 35
9030: PUSH
9031: LD_INT 50
9033: ST_TO_ADDR
// BloodGods := Replace ( BloodGods , Side , CreateHuman ) ;
9034: LD_ADDR_LOC 14
9038: PUSH
9039: LD_LOC 14
9043: PPUSH
9044: LD_VAR 0 1
9048: PPUSH
9049: CALL_OW 44
9053: PPUSH
9054: CALL_OW 1
9058: ST_TO_ADDR
// PlaceUnitXYR ( BloodGods [ side ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 1 ] , BloodGods_Positions [ Side_Positions [ side ] ] [ 2 ] , 10 , false ) ;
9059: LD_LOC 14
9063: PUSH
9064: LD_VAR 0 1
9068: ARRAY
9069: PPUSH
9070: LD_LOC 17
9074: PUSH
9075: LD_EXP 18
9079: PUSH
9080: LD_VAR 0 1
9084: ARRAY
9085: ARRAY
9086: PUSH
9087: LD_INT 1
9089: ARRAY
9090: PPUSH
9091: LD_LOC 17
9095: PUSH
9096: LD_EXP 18
9100: PUSH
9101: LD_VAR 0 1
9105: ARRAY
9106: ARRAY
9107: PUSH
9108: LD_INT 2
9110: ARRAY
9111: PPUSH
9112: LD_INT 10
9114: PPUSH
9115: LD_INT 0
9117: PPUSH
9118: CALL_OW 50
// SetAttr ( BloodGods [ side ] , attr_stamina , 300 ) ;
9122: LD_LOC 14
9126: PUSH
9127: LD_VAR 0 1
9131: ARRAY
9132: PPUSH
9133: LD_INT 1
9135: PPUSH
9136: LD_INT 300
9138: PPUSH
9139: CALL_OW 239
// if not NoDialog then
9143: LD_VAR 0 2
9147: NOT
9148: IFFALSE 9168
// SayRadio ( BloodGods [ side ] , DLAwaken ) ;
9150: LD_LOC 14
9154: PUSH
9155: LD_VAR 0 1
9159: ARRAY
9160: PPUSH
9161: LD_STRING DLAwaken
9163: PPUSH
9164: CALL_OW 94
// end ;
9168: LD_VAR 0 3
9172: RET
// function DisplayTimeWithKills ; var x ; begin
9173: LD_INT 0
9175: PPUSH
9176: PPUSH
// ExtraStrings :=  ;
9177: LD_ADDR_EXP 56
9181: PUSH
9182: LD_STRING 
9184: ST_TO_ADDR
// for x = 1 to Side_Positions do
9185: LD_ADDR_VAR 0 2
9189: PUSH
9190: DOUBLE
9191: LD_INT 1
9193: DEC
9194: ST_TO_ADDR
9195: LD_EXP 18
9199: PUSH
9200: FOR_TO
9201: IFFALSE 9434
// if Side_Positions [ x ] then
9203: LD_EXP 18
9207: PUSH
9208: LD_VAR 0 2
9212: ARRAY
9213: IFFALSE 9432
// begin BloodGods_CurrentKills := Replace ( BloodGods_CurrentKills , x , GetHumansKilled ( x ) - BloodGods_LastKills [ x ] ) ;
9215: LD_ADDR_LOC 16
9219: PUSH
9220: LD_LOC 16
9224: PPUSH
9225: LD_VAR 0 2
9229: PPUSH
9230: LD_VAR 0 2
9234: PPUSH
9235: CALL_OW 515
9239: PUSH
9240: LD_LOC 15
9244: PUSH
9245: LD_VAR 0 2
9249: ARRAY
9250: MINUS
9251: PPUSH
9252: CALL_OW 1
9256: ST_TO_ADDR
// if ( BloodGods [ x ] > - 1 ) and ( IsLive ( BloodGods [ x ] ) ) then
9257: LD_LOC 14
9261: PUSH
9262: LD_VAR 0 2
9266: ARRAY
9267: PUSH
9268: LD_INT 1
9270: NEG
9271: GREATER
9272: PUSH
9273: LD_LOC 14
9277: PUSH
9278: LD_VAR 0 2
9282: ARRAY
9283: PPUSH
9284: CALL_OW 300
9288: AND
9289: IFFALSE 9322
// ExtraStrings = ExtraStrings ^ [ #godawoken , x , x ] else
9291: LD_ADDR_EXP 56
9295: PUSH
9296: LD_EXP 56
9300: PUSH
9301: LD_STRING #godawoken
9303: PUSH
9304: LD_VAR 0 2
9308: PUSH
9309: LD_VAR 0 2
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: LIST
9318: ADD
9319: ST_TO_ADDR
9320: GO 9432
// if ( BloodGods [ x ] > - 1 ) and ( IsDead ( BloodGods [ x ] ) ) then
9322: LD_LOC 14
9326: PUSH
9327: LD_VAR 0 2
9331: ARRAY
9332: PUSH
9333: LD_INT 1
9335: NEG
9336: GREATER
9337: PUSH
9338: LD_LOC 14
9342: PUSH
9343: LD_VAR 0 2
9347: ARRAY
9348: PPUSH
9349: CALL_OW 301
9353: AND
9354: IFFALSE 9387
// ExtraStrings = ExtraStrings ^ [ #goddied , x , x ] else
9356: LD_ADDR_EXP 56
9360: PUSH
9361: LD_EXP 56
9365: PUSH
9366: LD_STRING #goddied
9368: PUSH
9369: LD_VAR 0 2
9373: PUSH
9374: LD_VAR 0 2
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: LIST
9383: ADD
9384: ST_TO_ADDR
9385: GO 9432
// ExtraStrings = ExtraStrings ^ [ #godssacrifise , x , x , BloodGods_CurrentKills [ x ] , 6 ] end ;
9387: LD_ADDR_EXP 56
9391: PUSH
9392: LD_EXP 56
9396: PUSH
9397: LD_STRING #godssacrifise
9399: PUSH
9400: LD_VAR 0 2
9404: PUSH
9405: LD_VAR 0 2
9409: PUSH
9410: LD_LOC 16
9414: PUSH
9415: LD_VAR 0 2
9419: ARRAY
9420: PUSH
9421: LD_INT 6
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: ADD
9431: ST_TO_ADDR
9432: GO 9200
9434: POP
9435: POP
// end ;
9436: LD_VAR 0 1
9440: RET
// export function InitBloodGods ; begin
9441: LD_INT 0
9443: PPUSH
// BloodGods = [ - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 , - 1 ] ;
9444: LD_ADDR_LOC 14
9448: PUSH
9449: LD_INT 1
9451: NEG
9452: PUSH
9453: LD_INT 1
9455: NEG
9456: PUSH
9457: LD_INT 1
9459: NEG
9460: PUSH
9461: LD_INT 1
9463: NEG
9464: PUSH
9465: LD_INT 1
9467: NEG
9468: PUSH
9469: LD_INT 1
9471: NEG
9472: PUSH
9473: LD_INT 1
9475: NEG
9476: PUSH
9477: LD_INT 1
9479: NEG
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: ST_TO_ADDR
// BloodGods_LastKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9491: LD_ADDR_LOC 15
9495: PUSH
9496: LD_INT 0
9498: PUSH
9499: LD_INT 0
9501: PUSH
9502: LD_INT 0
9504: PUSH
9505: LD_INT 0
9507: PUSH
9508: LD_INT 0
9510: PUSH
9511: LD_INT 0
9513: PUSH
9514: LD_INT 0
9516: PUSH
9517: LD_INT 0
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: ST_TO_ADDR
// BloodGods_CurrentKills = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9530: LD_ADDR_LOC 16
9534: PUSH
9535: LD_INT 0
9537: PUSH
9538: LD_INT 0
9540: PUSH
9541: LD_INT 0
9543: PUSH
9544: LD_INT 0
9546: PUSH
9547: LD_INT 0
9549: PUSH
9550: LD_INT 0
9552: PUSH
9553: LD_INT 0
9555: PUSH
9556: LD_INT 0
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: ST_TO_ADDR
// BloodGods_Positions = [ [ 60 , 47 ] , [ 82 , 26 ] , [ 124 , 45 ] , [ 147 , 90 ] , [ 126 , 112 ] , [ 84 , 92 ] , [ 106 , 73 ] , [ 106 , 73 ] ] ;
9569: LD_ADDR_LOC 17
9573: PUSH
9574: LD_INT 60
9576: PUSH
9577: LD_INT 47
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 82
9586: PUSH
9587: LD_INT 26
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 124
9596: PUSH
9597: LD_INT 45
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 147
9606: PUSH
9607: LD_INT 90
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 126
9616: PUSH
9617: LD_INT 112
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 84
9626: PUSH
9627: LD_INT 92
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 106
9636: PUSH
9637: LD_INT 73
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 106
9646: PUSH
9647: LD_INT 73
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: ST_TO_ADDR
// ClearHumansKilled ;
9664: CALL_OW 516
// enable ( 200 ) ;
9668: LD_INT 200
9670: ENABLE_MARKED
// end ; end_of_file
9671: LD_VAR 0 1
9675: RET
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
9676: LD_INT 0
9678: PPUSH
9679: PPUSH
// if ( not IAmSpec ) then
9680: CALL_OW 531
9684: NOT
9685: IFFALSE 9701
// Result := Limits_Info ^  ;
9687: LD_ADDR_VAR 0 1
9691: PUSH
9692: LD_LOC 25
9696: PUSH
9697: LD_STRING 
9699: ADD
9700: ST_TO_ADDR
// for i := 1 to 8 do
9701: LD_ADDR_VAR 0 2
9705: PUSH
9706: DOUBLE
9707: LD_INT 1
9709: DEC
9710: ST_TO_ADDR
9711: LD_INT 8
9713: PUSH
9714: FOR_TO
9715: IFFALSE 9760
// if Cheaters [ i ] then
9717: LD_LOC 26
9721: PUSH
9722: LD_VAR 0 2
9726: ARRAY
9727: IFFALSE 9758
// Result := Result ^ [ #Cheater , i , i ] ;
9729: LD_ADDR_VAR 0 1
9733: PUSH
9734: LD_VAR 0 1
9738: PUSH
9739: LD_STRING #Cheater
9741: PUSH
9742: LD_VAR 0 2
9746: PUSH
9747: LD_VAR 0 2
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: LIST
9756: ADD
9757: ST_TO_ADDR
9758: GO 9714
9760: POP
9761: POP
// end ;
9762: LD_VAR 0 1
9766: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9767: LD_INT 0
9769: PPUSH
9770: PPUSH
9771: PPUSH
9772: PPUSH
9773: PPUSH
// if game_type in [ 10 , 11 ] then
9774: LD_EXP 39
9778: PUSH
9779: LD_INT 10
9781: PUSH
9782: LD_INT 11
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: IN
9789: IFFALSE 9805
// def_game_rules = def_game_rules + 1 ;
9791: LD_ADDR_EXP 40
9795: PUSH
9796: LD_EXP 40
9800: PUSH
9801: LD_INT 1
9803: PLUS
9804: ST_TO_ADDR
// case def_game_rules of 0 :
9805: LD_EXP 40
9809: PUSH
9810: LD_INT 0
9812: DOUBLE
9813: EQUAL
9814: IFTRUE 9818
9816: GO 9823
9818: POP
// exit ; 1 :
9819: GO 11873
9821: GO 11773
9823: LD_INT 1
9825: DOUBLE
9826: EQUAL
9827: IFTRUE 9831
9829: GO 10047
9831: POP
// begin def_base_level := 2 ;
9832: LD_ADDR_EXP 41
9836: PUSH
9837: LD_INT 2
9839: ST_TO_ADDR
// def_amount_of_people := 11 ;
9840: LD_ADDR_EXP 42
9844: PUSH
9845: LD_INT 11
9847: ST_TO_ADDR
// def_skill_level := 1 ;
9848: LD_ADDR_EXP 43
9852: PUSH
9853: LD_INT 1
9855: ST_TO_ADDR
// def_starting_resources := 2 ;
9856: LD_ADDR_EXP 44
9860: PUSH
9861: LD_INT 2
9863: ST_TO_ADDR
// def_shipments_density := 26 ;
9864: LD_ADDR_EXP 45
9868: PUSH
9869: LD_INT 26
9871: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9872: LD_ADDR_EXP 46
9876: PUSH
9877: LD_INT 0
9879: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9880: LD_ADDR_EXP 47
9884: PUSH
9885: LD_INT 1
9887: ST_TO_ADDR
// def_shared_vision := 1 ;
9888: LD_ADDR_EXP 48
9892: PUSH
9893: LD_INT 1
9895: ST_TO_ADDR
// def_morale_flags := 3 ;
9896: LD_ADDR_EXP 49
9900: PUSH
9901: LD_INT 3
9903: ST_TO_ADDR
// def_siberite_detection := 1 ;
9904: LD_ADDR_EXP 50
9908: PUSH
9909: LD_INT 1
9911: ST_TO_ADDR
// def_people_respawning := 1 ;
9912: LD_ADDR_EXP 51
9916: PUSH
9917: LD_INT 1
9919: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9920: LD_ADDR_EXP 52
9924: PUSH
9925: LD_INT 1
9927: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9928: LD_ADDR_EXP 53
9932: PUSH
9933: LD_INT 0
9935: ST_TO_ADDR
// def_builduptime := 6 ;
9936: LD_ADDR_EXP 54
9940: PUSH
9941: LD_INT 6
9943: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9944: LD_ADDR_VAR 0 2
9948: PUSH
9949: EMPTY
9950: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9951: LD_ADDR_VAR 0 3
9955: PUSH
9956: EMPTY
9957: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9958: LD_ADDR_LOC 20
9962: PUSH
9963: EMPTY
9964: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9965: LD_ADDR_LOC 21
9969: PUSH
9970: EMPTY
9971: ST_TO_ADDR
// Banned_Controls := [ ] ;
9972: LD_ADDR_LOC 22
9976: PUSH
9977: EMPTY
9978: ST_TO_ADDR
// Banned_Engines := [ ] ;
9979: LD_ADDR_LOC 23
9983: PUSH
9984: EMPTY
9985: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9986: LD_ADDR_LOC 18
9990: PUSH
9991: LD_INT 37
9993: PUSH
9994: EMPTY
9995: LIST
9996: PUSH
9997: LD_INT 4
9999: PUSH
10000: LD_INT 5
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PUSH
10007: LD_INT 31
10009: PUSH
10010: LD_INT 32
10012: PUSH
10013: LD_INT 33
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: LIST
10025: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
10026: LD_ADDR_LOC 19
10030: PUSH
10031: LD_INT 2
10033: PUSH
10034: LD_INT 2
10036: PUSH
10037: LD_INT 4
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: ST_TO_ADDR
// end ; 2 :
10045: GO 11773
10047: LD_INT 2
10049: DOUBLE
10050: EQUAL
10051: IFTRUE 10055
10053: GO 10264
10055: POP
// begin def_base_level := 1 ;
10056: LD_ADDR_EXP 41
10060: PUSH
10061: LD_INT 1
10063: ST_TO_ADDR
// def_amount_of_people := 11 ;
10064: LD_ADDR_EXP 42
10068: PUSH
10069: LD_INT 11
10071: ST_TO_ADDR
// def_skill_level := 3 ;
10072: LD_ADDR_EXP 43
10076: PUSH
10077: LD_INT 3
10079: ST_TO_ADDR
// def_starting_resources := 3 ;
10080: LD_ADDR_EXP 44
10084: PUSH
10085: LD_INT 3
10087: ST_TO_ADDR
// def_shipments_density := 51 ;
10088: LD_ADDR_EXP 45
10092: PUSH
10093: LD_INT 51
10095: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10096: LD_ADDR_EXP 46
10100: PUSH
10101: LD_INT 1
10103: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10104: LD_ADDR_EXP 47
10108: PUSH
10109: LD_INT 2
10111: ST_TO_ADDR
// def_shared_vision := 1 ;
10112: LD_ADDR_EXP 48
10116: PUSH
10117: LD_INT 1
10119: ST_TO_ADDR
// def_morale_flags := 0 ;
10120: LD_ADDR_EXP 49
10124: PUSH
10125: LD_INT 0
10127: ST_TO_ADDR
// def_siberite_detection := 1 ;
10128: LD_ADDR_EXP 50
10132: PUSH
10133: LD_INT 1
10135: ST_TO_ADDR
// def_people_respawning := 0 ;
10136: LD_ADDR_EXP 51
10140: PUSH
10141: LD_INT 0
10143: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10144: LD_ADDR_EXP 52
10148: PUSH
10149: LD_INT 0
10151: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10152: LD_ADDR_EXP 53
10156: PUSH
10157: LD_INT 0
10159: ST_TO_ADDR
// def_builduptime := 6 ;
10160: LD_ADDR_EXP 54
10164: PUSH
10165: LD_INT 6
10167: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10168: LD_ADDR_VAR 0 2
10172: PUSH
10173: LD_INT 1
10175: PUSH
10176: EMPTY
10177: LIST
10178: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10179: LD_ADDR_VAR 0 3
10183: PUSH
10184: EMPTY
10185: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10186: LD_ADDR_LOC 20
10190: PUSH
10191: EMPTY
10192: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10193: LD_ADDR_LOC 21
10197: PUSH
10198: EMPTY
10199: ST_TO_ADDR
// Banned_Controls := [ ] ;
10200: LD_ADDR_LOC 22
10204: PUSH
10205: EMPTY
10206: ST_TO_ADDR
// Banned_Engines := [ ] ;
10207: LD_ADDR_LOC 23
10211: PUSH
10212: EMPTY
10213: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10214: LD_ADDR_LOC 18
10218: PUSH
10219: LD_INT 4
10221: PUSH
10222: LD_INT 5
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 31
10231: PUSH
10232: LD_INT 32
10234: PUSH
10235: LD_INT 33
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
10247: LD_ADDR_LOC 19
10251: PUSH
10252: LD_INT 1
10254: PUSH
10255: LD_INT 2
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: ST_TO_ADDR
// end ; 3 :
10262: GO 11773
10264: LD_INT 3
10266: DOUBLE
10267: EQUAL
10268: IFTRUE 10272
10270: GO 10515
10272: POP
// begin def_base_level := 1 ;
10273: LD_ADDR_EXP 41
10277: PUSH
10278: LD_INT 1
10280: ST_TO_ADDR
// def_amount_of_people := 11 ;
10281: LD_ADDR_EXP 42
10285: PUSH
10286: LD_INT 11
10288: ST_TO_ADDR
// def_skill_level := 3 ;
10289: LD_ADDR_EXP 43
10293: PUSH
10294: LD_INT 3
10296: ST_TO_ADDR
// def_starting_resources := 3 ;
10297: LD_ADDR_EXP 44
10301: PUSH
10302: LD_INT 3
10304: ST_TO_ADDR
// def_shipments_density := 1 ;
10305: LD_ADDR_EXP 45
10309: PUSH
10310: LD_INT 1
10312: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10313: LD_ADDR_EXP 46
10317: PUSH
10318: LD_INT 0
10320: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10321: LD_ADDR_EXP 47
10325: PUSH
10326: LD_INT 1
10328: ST_TO_ADDR
// def_shared_vision := 1 ;
10329: LD_ADDR_EXP 48
10333: PUSH
10334: LD_INT 1
10336: ST_TO_ADDR
// def_morale_flags := 0 ;
10337: LD_ADDR_EXP 49
10341: PUSH
10342: LD_INT 0
10344: ST_TO_ADDR
// def_siberite_detection := 1 ;
10345: LD_ADDR_EXP 50
10349: PUSH
10350: LD_INT 1
10352: ST_TO_ADDR
// def_people_respawning := 0 ;
10353: LD_ADDR_EXP 51
10357: PUSH
10358: LD_INT 0
10360: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10361: LD_ADDR_EXP 52
10365: PUSH
10366: LD_INT 2
10368: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10369: LD_ADDR_EXP 53
10373: PUSH
10374: LD_INT 0
10376: ST_TO_ADDR
// def_builduptime := 6 ;
10377: LD_ADDR_EXP 54
10381: PUSH
10382: LD_INT 6
10384: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10385: LD_ADDR_VAR 0 2
10389: PUSH
10390: LD_INT 23
10392: PUSH
10393: EMPTY
10394: LIST
10395: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
10396: LD_ADDR_VAR 0 3
10400: PUSH
10401: LD_INT 2
10403: PUSH
10404: LD_INT 37
10406: PUSH
10407: LD_INT 32
10409: PUSH
10410: LD_INT 33
10412: PUSH
10413: LD_INT 36
10415: PUSH
10416: LD_INT 16
10418: PUSH
10419: LD_INT 23
10421: PUSH
10422: LD_INT 21
10424: PUSH
10425: LD_INT 18
10427: PUSH
10428: LD_INT 22
10430: PUSH
10431: LD_INT 20
10433: PUSH
10434: LD_INT 19
10436: PUSH
10437: LD_INT 25
10439: PUSH
10440: LD_INT 17
10442: PUSH
10443: LD_INT 24
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10463: LD_ADDR_LOC 20
10467: PUSH
10468: EMPTY
10469: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10470: LD_ADDR_LOC 21
10474: PUSH
10475: EMPTY
10476: ST_TO_ADDR
// Banned_Controls := [ ] ;
10477: LD_ADDR_LOC 22
10481: PUSH
10482: EMPTY
10483: ST_TO_ADDR
// Banned_Engines := [ ] ;
10484: LD_ADDR_LOC 23
10488: PUSH
10489: EMPTY
10490: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10491: LD_ADDR_LOC 18
10495: PUSH
10496: EMPTY
10497: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10498: LD_ADDR_LOC 19
10502: PUSH
10503: EMPTY
10504: ST_TO_ADDR
// No_Mechs := true ;
10505: LD_ADDR_EXP 55
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// end ; 4 :
10513: GO 11773
10515: LD_INT 4
10517: DOUBLE
10518: EQUAL
10519: IFTRUE 10523
10521: GO 10698
10523: POP
// begin def_base_level := 1 ;
10524: LD_ADDR_EXP 41
10528: PUSH
10529: LD_INT 1
10531: ST_TO_ADDR
// def_amount_of_people := 11 ;
10532: LD_ADDR_EXP 42
10536: PUSH
10537: LD_INT 11
10539: ST_TO_ADDR
// def_skill_level := 3 ;
10540: LD_ADDR_EXP 43
10544: PUSH
10545: LD_INT 3
10547: ST_TO_ADDR
// def_starting_resources := 3 ;
10548: LD_ADDR_EXP 44
10552: PUSH
10553: LD_INT 3
10555: ST_TO_ADDR
// def_shipments_density := 2 ;
10556: LD_ADDR_EXP 45
10560: PUSH
10561: LD_INT 2
10563: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10564: LD_ADDR_EXP 46
10568: PUSH
10569: LD_INT 1
10571: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10572: LD_ADDR_EXP 47
10576: PUSH
10577: LD_INT 2
10579: ST_TO_ADDR
// def_shared_vision := 1 ;
10580: LD_ADDR_EXP 48
10584: PUSH
10585: LD_INT 1
10587: ST_TO_ADDR
// def_morale_flags := 0 ;
10588: LD_ADDR_EXP 49
10592: PUSH
10593: LD_INT 0
10595: ST_TO_ADDR
// def_siberite_detection := 1 ;
10596: LD_ADDR_EXP 50
10600: PUSH
10601: LD_INT 1
10603: ST_TO_ADDR
// def_people_respawning := 0 ;
10604: LD_ADDR_EXP 51
10608: PUSH
10609: LD_INT 0
10611: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10612: LD_ADDR_EXP 52
10616: PUSH
10617: LD_INT 0
10619: ST_TO_ADDR
// def_siberite_bomb := 1 ;
10620: LD_ADDR_EXP 53
10624: PUSH
10625: LD_INT 1
10627: ST_TO_ADDR
// def_builduptime := 11 ;
10628: LD_ADDR_EXP 54
10632: PUSH
10633: LD_INT 11
10635: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10636: LD_ADDR_VAR 0 2
10640: PUSH
10641: LD_INT 1
10643: PUSH
10644: EMPTY
10645: LIST
10646: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10647: LD_ADDR_VAR 0 3
10651: PUSH
10652: EMPTY
10653: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10654: LD_ADDR_LOC 20
10658: PUSH
10659: EMPTY
10660: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10661: LD_ADDR_LOC 21
10665: PUSH
10666: EMPTY
10667: ST_TO_ADDR
// Banned_Controls := [ ] ;
10668: LD_ADDR_LOC 22
10672: PUSH
10673: EMPTY
10674: ST_TO_ADDR
// Banned_Engines := [ ] ;
10675: LD_ADDR_LOC 23
10679: PUSH
10680: EMPTY
10681: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10682: LD_ADDR_LOC 18
10686: PUSH
10687: EMPTY
10688: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10689: LD_ADDR_LOC 19
10693: PUSH
10694: EMPTY
10695: ST_TO_ADDR
// end ; 5 :
10696: GO 11773
10698: LD_INT 5
10700: DOUBLE
10701: EQUAL
10702: IFTRUE 10706
10704: GO 10955
10706: POP
// begin def_base_level := 0 ;
10707: LD_ADDR_EXP 41
10711: PUSH
10712: LD_INT 0
10714: ST_TO_ADDR
// def_amount_of_people := 5 ;
10715: LD_ADDR_EXP 42
10719: PUSH
10720: LD_INT 5
10722: ST_TO_ADDR
// def_skill_level := 0 ;
10723: LD_ADDR_EXP 43
10727: PUSH
10728: LD_INT 0
10730: ST_TO_ADDR
// def_starting_resources := 0 ;
10731: LD_ADDR_EXP 44
10735: PUSH
10736: LD_INT 0
10738: ST_TO_ADDR
// def_shipments_density := 0 ;
10739: LD_ADDR_EXP 45
10743: PUSH
10744: LD_INT 0
10746: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10747: LD_ADDR_EXP 46
10751: PUSH
10752: LD_INT 0
10754: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10755: LD_ADDR_EXP 47
10759: PUSH
10760: LD_INT 0
10762: ST_TO_ADDR
// def_shared_vision := 1 ;
10763: LD_ADDR_EXP 48
10767: PUSH
10768: LD_INT 1
10770: ST_TO_ADDR
// def_morale_flags := 0 ;
10771: LD_ADDR_EXP 49
10775: PUSH
10776: LD_INT 0
10778: ST_TO_ADDR
// def_siberite_detection := 0 ;
10779: LD_ADDR_EXP 50
10783: PUSH
10784: LD_INT 0
10786: ST_TO_ADDR
// def_people_respawning := 1 ;
10787: LD_ADDR_EXP 51
10791: PUSH
10792: LD_INT 1
10794: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10795: LD_ADDR_EXP 52
10799: PUSH
10800: LD_INT 1
10802: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10803: LD_ADDR_EXP 53
10807: PUSH
10808: LD_INT 0
10810: ST_TO_ADDR
// def_builduptime := 0 ;
10811: LD_ADDR_EXP 54
10815: PUSH
10816: LD_INT 0
10818: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10819: LD_ADDR_VAR 0 2
10823: PUSH
10824: LD_INT 10
10826: PUSH
10827: LD_INT 3
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10834: LD_ADDR_VAR 0 3
10838: PUSH
10839: LD_INT 12
10841: PUSH
10842: LD_INT 11
10844: PUSH
10845: LD_INT 14
10847: PUSH
10848: LD_INT 13
10850: PUSH
10851: LD_INT 5
10853: PUSH
10854: LD_INT 24
10856: PUSH
10857: LD_INT 21
10859: PUSH
10860: LD_INT 33
10862: PUSH
10863: LD_INT 36
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10877: LD_ADDR_LOC 20
10881: PUSH
10882: LD_INT 31
10884: PUSH
10885: EMPTY
10886: LIST
10887: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10888: LD_ADDR_LOC 21
10892: PUSH
10893: EMPTY
10894: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10895: LD_ADDR_LOC 22
10899: PUSH
10900: LD_INT 2
10902: PUSH
10903: EMPTY
10904: LIST
10905: ST_TO_ADDR
// Banned_Engines := [ ] ;
10906: LD_ADDR_LOC 23
10910: PUSH
10911: EMPTY
10912: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10913: LD_ADDR_LOC 18
10917: PUSH
10918: LD_INT 4
10920: PUSH
10921: EMPTY
10922: LIST
10923: PUSH
10924: LD_INT 31
10926: PUSH
10927: LD_INT 32
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10938: LD_ADDR_LOC 19
10942: PUSH
10943: LD_INT 1
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: ST_TO_ADDR
// end ; 6 :
10953: GO 11773
10955: LD_INT 6
10957: DOUBLE
10958: EQUAL
10959: IFTRUE 10963
10961: GO 11166
10963: POP
// begin def_base_level := 1 ;
10964: LD_ADDR_EXP 41
10968: PUSH
10969: LD_INT 1
10971: ST_TO_ADDR
// def_amount_of_people := 11 ;
10972: LD_ADDR_EXP 42
10976: PUSH
10977: LD_INT 11
10979: ST_TO_ADDR
// def_skill_level := 3 ;
10980: LD_ADDR_EXP 43
10984: PUSH
10985: LD_INT 3
10987: ST_TO_ADDR
// def_starting_resources := 3 ;
10988: LD_ADDR_EXP 44
10992: PUSH
10993: LD_INT 3
10995: ST_TO_ADDR
// def_shipments_density := 1 ;
10996: LD_ADDR_EXP 45
11000: PUSH
11001: LD_INT 1
11003: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11004: LD_ADDR_EXP 46
11008: PUSH
11009: LD_INT 0
11011: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
11012: LD_ADDR_EXP 47
11016: PUSH
11017: LD_INT 1
11019: ST_TO_ADDR
// def_shared_vision := 1 ;
11020: LD_ADDR_EXP 48
11024: PUSH
11025: LD_INT 1
11027: ST_TO_ADDR
// def_morale_flags := 0 ;
11028: LD_ADDR_EXP 49
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// def_siberite_detection := 1 ;
11036: LD_ADDR_EXP 50
11040: PUSH
11041: LD_INT 1
11043: ST_TO_ADDR
// def_people_respawning := 2 ;
11044: LD_ADDR_EXP 51
11048: PUSH
11049: LD_INT 2
11051: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11052: LD_ADDR_EXP 52
11056: PUSH
11057: LD_INT 1
11059: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11060: LD_ADDR_EXP 53
11064: PUSH
11065: LD_INT 0
11067: ST_TO_ADDR
// def_builduptime := 6 ;
11068: LD_ADDR_EXP 54
11072: PUSH
11073: LD_INT 6
11075: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: LD_INT 23
11083: PUSH
11084: EMPTY
11085: LIST
11086: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
11087: LD_ADDR_VAR 0 3
11091: PUSH
11092: LD_INT 2
11094: PUSH
11095: LD_INT 37
11097: PUSH
11098: LD_INT 31
11100: PUSH
11101: LD_INT 32
11103: PUSH
11104: LD_INT 33
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11114: LD_ADDR_LOC 20
11118: PUSH
11119: EMPTY
11120: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11121: LD_ADDR_LOC 21
11125: PUSH
11126: EMPTY
11127: ST_TO_ADDR
// Banned_Controls := [ ] ;
11128: LD_ADDR_LOC 22
11132: PUSH
11133: EMPTY
11134: ST_TO_ADDR
// Banned_Engines := [ ] ;
11135: LD_ADDR_LOC 23
11139: PUSH
11140: EMPTY
11141: ST_TO_ADDR
// Restricted_Builds := [ ] ;
11142: LD_ADDR_LOC 18
11146: PUSH
11147: EMPTY
11148: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
11149: LD_ADDR_LOC 19
11153: PUSH
11154: EMPTY
11155: ST_TO_ADDR
// No_Mechs := true ;
11156: LD_ADDR_EXP 55
11160: PUSH
11161: LD_INT 1
11163: ST_TO_ADDR
// end ; 7 :
11164: GO 11773
11166: LD_INT 7
11168: DOUBLE
11169: EQUAL
11170: IFTRUE 11174
11172: GO 11372
11174: POP
// begin def_base_level := 1 ;
11175: LD_ADDR_EXP 41
11179: PUSH
11180: LD_INT 1
11182: ST_TO_ADDR
// def_amount_of_people := 20 ;
11183: LD_ADDR_EXP 42
11187: PUSH
11188: LD_INT 20
11190: ST_TO_ADDR
// def_skill_level := 3 ;
11191: LD_ADDR_EXP 43
11195: PUSH
11196: LD_INT 3
11198: ST_TO_ADDR
// def_starting_resources := 3 ;
11199: LD_ADDR_EXP 44
11203: PUSH
11204: LD_INT 3
11206: ST_TO_ADDR
// def_shipments_density := 1 ;
11207: LD_ADDR_EXP 45
11211: PUSH
11212: LD_INT 1
11214: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
11215: LD_ADDR_EXP 46
11219: PUSH
11220: LD_INT 1
11222: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
11223: LD_ADDR_EXP 47
11227: PUSH
11228: LD_INT 2
11230: ST_TO_ADDR
// def_shared_vision := 1 ;
11231: LD_ADDR_EXP 48
11235: PUSH
11236: LD_INT 1
11238: ST_TO_ADDR
// def_morale_flags := 0 ;
11239: LD_ADDR_EXP 49
11243: PUSH
11244: LD_INT 0
11246: ST_TO_ADDR
// def_siberite_detection := 1 ;
11247: LD_ADDR_EXP 50
11251: PUSH
11252: LD_INT 1
11254: ST_TO_ADDR
// def_people_respawning := 0 ;
11255: LD_ADDR_EXP 51
11259: PUSH
11260: LD_INT 0
11262: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11263: LD_ADDR_EXP 52
11267: PUSH
11268: LD_INT 1
11270: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11271: LD_ADDR_EXP 53
11275: PUSH
11276: LD_INT 0
11278: ST_TO_ADDR
// def_builduptime := 6 ;
11279: LD_ADDR_EXP 54
11283: PUSH
11284: LD_INT 6
11286: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11287: LD_ADDR_VAR 0 2
11291: PUSH
11292: LD_INT 23
11294: PUSH
11295: EMPTY
11296: LIST
11297: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
11298: LD_ADDR_VAR 0 3
11302: PUSH
11303: LD_INT 37
11305: PUSH
11306: EMPTY
11307: LIST
11308: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11309: LD_ADDR_LOC 20
11313: PUSH
11314: EMPTY
11315: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11316: LD_ADDR_LOC 21
11320: PUSH
11321: EMPTY
11322: ST_TO_ADDR
// Banned_Controls := [ ] ;
11323: LD_ADDR_LOC 22
11327: PUSH
11328: EMPTY
11329: ST_TO_ADDR
// Banned_Engines := [ ] ;
11330: LD_ADDR_LOC 23
11334: PUSH
11335: EMPTY
11336: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11337: LD_ADDR_LOC 18
11341: PUSH
11342: LD_INT 31
11344: PUSH
11345: LD_INT 32
11347: PUSH
11348: LD_INT 33
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
11359: LD_ADDR_LOC 19
11363: PUSH
11364: LD_INT 10
11366: PUSH
11367: EMPTY
11368: LIST
11369: ST_TO_ADDR
// end ; 8 :
11370: GO 11773
11372: LD_INT 8
11374: DOUBLE
11375: EQUAL
11376: IFTRUE 11380
11378: GO 11772
11380: POP
// begin def_base_level := 0 ;
11381: LD_ADDR_EXP 41
11385: PUSH
11386: LD_INT 0
11388: ST_TO_ADDR
// def_amount_of_people := 8 ;
11389: LD_ADDR_EXP 42
11393: PUSH
11394: LD_INT 8
11396: ST_TO_ADDR
// def_skill_level := 0 ;
11397: LD_ADDR_EXP 43
11401: PUSH
11402: LD_INT 0
11404: ST_TO_ADDR
// def_starting_resources := 2 ;
11405: LD_ADDR_EXP 44
11409: PUSH
11410: LD_INT 2
11412: ST_TO_ADDR
// def_shipments_density := 1 ;
11413: LD_ADDR_EXP 45
11417: PUSH
11418: LD_INT 1
11420: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11421: LD_ADDR_EXP 46
11425: PUSH
11426: LD_INT 0
11428: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11429: LD_ADDR_EXP 47
11433: PUSH
11434: LD_INT 0
11436: ST_TO_ADDR
// def_shared_vision := 1 ;
11437: LD_ADDR_EXP 48
11441: PUSH
11442: LD_INT 1
11444: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
11445: LD_ADDR_EXP 49
11449: PUSH
11450: LD_INT 0
11452: PPUSH
11453: LD_INT 2
11455: PPUSH
11456: CALL_OW 12
11460: ST_TO_ADDR
// def_siberite_detection := 0 ;
11461: LD_ADDR_EXP 50
11465: PUSH
11466: LD_INT 0
11468: ST_TO_ADDR
// def_people_respawning := 0 ;
11469: LD_ADDR_EXP 51
11473: PUSH
11474: LD_INT 0
11476: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11477: LD_ADDR_EXP 52
11481: PUSH
11482: LD_INT 2
11484: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11485: LD_ADDR_EXP 53
11489: PUSH
11490: LD_INT 0
11492: ST_TO_ADDR
// def_builduptime := 0 ;
11493: LD_ADDR_EXP 54
11497: PUSH
11498: LD_INT 0
11500: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_INT 23
11508: PUSH
11509: LD_INT 20
11511: PUSH
11512: LD_INT 40
11514: PUSH
11515: LD_INT 47
11517: PUSH
11518: LD_INT 46
11520: PUSH
11521: LD_INT 39
11523: PUSH
11524: LD_INT 71
11526: PUSH
11527: LD_INT 34
11529: PUSH
11530: LD_INT 41
11532: PUSH
11533: LD_INT 44
11535: PUSH
11536: LD_INT 17
11538: PUSH
11539: LD_INT 16
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
11556: LD_ADDR_VAR 0 3
11560: PUSH
11561: LD_INT 37
11563: PUSH
11564: LD_INT 5
11566: PUSH
11567: LD_INT 13
11569: PUSH
11570: LD_INT 34
11572: PUSH
11573: LD_INT 12
11575: PUSH
11576: LD_INT 15
11578: PUSH
11579: LD_INT 11
11581: PUSH
11582: LD_INT 14
11584: PUSH
11585: LD_INT 29
11587: PUSH
11588: LD_INT 30
11590: PUSH
11591: LD_INT 28
11593: PUSH
11594: LD_INT 24
11596: PUSH
11597: LD_INT 25
11599: PUSH
11600: LD_INT 20
11602: PUSH
11603: LD_INT 21
11605: PUSH
11606: LD_INT 22
11608: PUSH
11609: LD_INT 36
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11631: LD_ADDR_LOC 20
11635: PUSH
11636: EMPTY
11637: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
11638: LD_ADDR_LOC 21
11642: PUSH
11643: LD_INT 14
11645: PUSH
11646: EMPTY
11647: LIST
11648: ST_TO_ADDR
// Banned_Controls := [ ] ;
11649: LD_ADDR_LOC 22
11653: PUSH
11654: EMPTY
11655: ST_TO_ADDR
// Banned_Engines := [ ] ;
11656: LD_ADDR_LOC 23
11660: PUSH
11661: EMPTY
11662: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
11663: LD_ADDR_LOC 18
11667: PUSH
11668: LD_INT 31
11670: PUSH
11671: LD_INT 32
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 4
11680: PUSH
11681: EMPTY
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
11688: LD_ADDR_LOC 19
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: LD_INT 1
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: ST_TO_ADDR
// for i := 1 to 8 do
11703: LD_ADDR_VAR 0 4
11707: PUSH
11708: DOUBLE
11709: LD_INT 1
11711: DEC
11712: ST_TO_ADDR
11713: LD_INT 8
11715: PUSH
11716: FOR_TO
11717: IFFALSE 11768
// if ( Side_Nations [ i ] = 3 ) then
11719: LD_EXP 19
11723: PUSH
11724: LD_VAR 0 4
11728: ARRAY
11729: PUSH
11730: LD_INT 3
11732: EQUAL
11733: IFFALSE 11766
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11735: LD_ADDR_EXP 19
11739: PUSH
11740: LD_EXP 19
11744: PPUSH
11745: LD_VAR 0 4
11749: PPUSH
11750: LD_INT 1
11752: PPUSH
11753: LD_INT 2
11755: PPUSH
11756: CALL_OW 12
11760: PPUSH
11761: CALL_OW 1
11765: ST_TO_ADDR
11766: GO 11716
11768: POP
11769: POP
// end ; end ;
11770: GO 11773
11772: POP
// for i := 1 to 8 do
11773: LD_ADDR_VAR 0 4
11777: PUSH
11778: DOUBLE
11779: LD_INT 1
11781: DEC
11782: ST_TO_ADDR
11783: LD_INT 8
11785: PUSH
11786: FOR_TO
11787: IFFALSE 11871
// if Side_Positions [ i ] then
11789: LD_EXP 18
11793: PUSH
11794: LD_VAR 0 4
11798: ARRAY
11799: IFFALSE 11869
// begin for j in Unavailable_Techs do
11801: LD_ADDR_VAR 0 5
11805: PUSH
11806: LD_VAR 0 2
11810: PUSH
11811: FOR_IN
11812: IFFALSE 11833
// SetTech ( j , i , 0 ) ;
11814: LD_VAR 0 5
11818: PPUSH
11819: LD_VAR 0 4
11823: PPUSH
11824: LD_INT 0
11826: PPUSH
11827: CALL_OW 322
11831: GO 11811
11833: POP
11834: POP
// for j in Unavailable_Builds do
11835: LD_ADDR_VAR 0 5
11839: PUSH
11840: LD_VAR 0 3
11844: PUSH
11845: FOR_IN
11846: IFFALSE 11867
// SetRestrict ( j , i , 0 ) ;
11848: LD_VAR 0 5
11852: PPUSH
11853: LD_VAR 0 4
11857: PPUSH
11858: LD_INT 0
11860: PPUSH
11861: CALL_OW 324
11865: GO 11845
11867: POP
11868: POP
// end ;
11869: GO 11786
11871: POP
11872: POP
// end ;
11873: LD_VAR 0 1
11877: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11878: LD_INT 0
11880: PPUSH
11881: PPUSH
11882: PPUSH
11883: PPUSH
11884: PPUSH
11885: PPUSH
11886: PPUSH
// for i := 1 to Restricted_Builds do
11887: LD_ADDR_VAR 0 2
11891: PUSH
11892: DOUBLE
11893: LD_INT 1
11895: DEC
11896: ST_TO_ADDR
11897: LD_LOC 18
11901: PUSH
11902: FOR_TO
11903: IFFALSE 12213
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11905: LD_LOC 18
11909: PUSH
11910: LD_VAR 0 2
11914: ARRAY
11915: PUSH
11916: LD_INT 1
11918: ARRAY
11919: PUSH
11920: LD_INT 31
11922: DOUBLE
11923: EQUAL
11924: IFTRUE 11940
11926: LD_INT 32
11928: DOUBLE
11929: EQUAL
11930: IFTRUE 11940
11932: LD_INT 33
11934: DOUBLE
11935: EQUAL
11936: IFTRUE 11940
11938: GO 11951
11940: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11941: LD_ADDR_VAR 0 6
11945: PUSH
11946: LD_STRING #Turrets
11948: ST_TO_ADDR
11949: GO 11996
11951: LD_INT 4
11953: DOUBLE
11954: EQUAL
11955: IFTRUE 11965
11957: LD_INT 5
11959: DOUBLE
11960: EQUAL
11961: IFTRUE 11965
11963: GO 11976
11965: POP
// btype := #Armouries ; b_Behemoth :
11966: LD_ADDR_VAR 0 6
11970: PUSH
11971: LD_STRING #Armouries
11973: ST_TO_ADDR
11974: GO 11996
11976: LD_INT 37
11978: DOUBLE
11979: EQUAL
11980: IFTRUE 11984
11982: GO 11995
11984: POP
// btype := #Behemoths ; end ;
11985: LD_ADDR_VAR 0 6
11989: PUSH
11990: LD_STRING #Behemoths
11992: ST_TO_ADDR
11993: GO 11996
11995: POP
// list := [ ] ;
11996: LD_ADDR_VAR 0 7
12000: PUSH
12001: EMPTY
12002: ST_TO_ADDR
// for j := 1 to 8 do
12003: LD_ADDR_VAR 0 3
12007: PUSH
12008: DOUBLE
12009: LD_INT 1
12011: DEC
12012: ST_TO_ADDR
12013: LD_INT 8
12015: PUSH
12016: FOR_TO
12017: IFFALSE 12110
// if Side_Positions [ j ] then
12019: LD_EXP 18
12023: PUSH
12024: LD_VAR 0 3
12028: ARRAY
12029: IFFALSE 12108
// begin amount := 0 ;
12031: LD_ADDR_VAR 0 5
12035: PUSH
12036: LD_INT 0
12038: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
12039: LD_ADDR_VAR 0 4
12043: PUSH
12044: LD_LOC 18
12048: PUSH
12049: LD_VAR 0 2
12053: ARRAY
12054: PUSH
12055: FOR_IN
12056: IFFALSE 12104
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
12058: LD_ADDR_VAR 0 5
12062: PUSH
12063: LD_VAR 0 5
12067: PUSH
12068: LD_INT 22
12070: PUSH
12071: LD_VAR 0 3
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: LD_INT 30
12082: PUSH
12083: LD_VAR 0 4
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PPUSH
12096: CALL_OW 69
12100: PLUS
12101: ST_TO_ADDR
12102: GO 12055
12104: POP
12105: POP
// break ;
12106: GO 12110
// end ;
12108: GO 12016
12110: POP
12111: POP
// list := [ ] ;
12112: LD_ADDR_VAR 0 7
12116: PUSH
12117: EMPTY
12118: ST_TO_ADDR
// for j := 1 to 8 do
12119: LD_ADDR_VAR 0 3
12123: PUSH
12124: DOUBLE
12125: LD_INT 1
12127: DEC
12128: ST_TO_ADDR
12129: LD_INT 8
12131: PUSH
12132: FOR_TO
12133: IFFALSE 12153
// list := list ^ amount ;
12135: LD_ADDR_VAR 0 7
12139: PUSH
12140: LD_VAR 0 7
12144: PUSH
12145: LD_VAR 0 5
12149: ADD
12150: ST_TO_ADDR
12151: GO 12132
12153: POP
12154: POP
// Already_Built := Already_Built ^ [ list ] ;
12155: LD_ADDR_LOC 24
12159: PUSH
12160: LD_LOC 24
12164: PUSH
12165: LD_VAR 0 7
12169: PUSH
12170: EMPTY
12171: LIST
12172: ADD
12173: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
12174: LD_ADDR_LOC 25
12178: PUSH
12179: LD_LOC 25
12183: PUSH
12184: LD_VAR 0 6
12188: PUSH
12189: LD_VAR 0 5
12193: PUSH
12194: LD_LOC 19
12198: PUSH
12199: LD_VAR 0 2
12203: ARRAY
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: ADD
12210: ST_TO_ADDR
// end ;
12211: GO 11902
12213: POP
12214: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12215: LD_ADDR_LOC 26
12219: PUSH
12220: LD_INT 0
12222: PUSH
12223: LD_INT 0
12225: PUSH
12226: LD_INT 0
12228: PUSH
12229: LD_INT 0
12231: PUSH
12232: LD_INT 0
12234: PUSH
12235: LD_INT 0
12237: PUSH
12238: LD_INT 0
12240: PUSH
12241: LD_INT 0
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: ST_TO_ADDR
// if Limits_Info then
12254: LD_LOC 25
12258: IFFALSE 12274
// Limits_Info := #Limits ^ Limits_Info ;
12260: LD_ADDR_LOC 25
12264: PUSH
12265: LD_STRING #Limits
12267: PUSH
12268: LD_LOC 25
12272: ADD
12273: ST_TO_ADDR
// end ;
12274: LD_VAR 0 1
12278: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
12279: LD_INT 0
12281: PPUSH
12282: PPUSH
12283: PPUSH
12284: PPUSH
// for i := 1 to Restricted_Builds do
12285: LD_ADDR_VAR 0 7
12289: PUSH
12290: DOUBLE
12291: LD_INT 1
12293: DEC
12294: ST_TO_ADDR
12295: LD_LOC 18
12299: PUSH
12300: FOR_TO
12301: IFFALSE 12724
// if BType in Restricted_Builds [ i ] then
12303: LD_VAR 0 2
12307: PUSH
12308: LD_LOC 18
12312: PUSH
12313: LD_VAR 0 7
12317: ARRAY
12318: IN
12319: IFFALSE 12722
// begin if old_side then
12321: LD_VAR 0 4
12325: IFFALSE 12451
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
12327: LD_LOC 24
12331: PUSH
12332: LD_VAR 0 7
12336: ARRAY
12337: PUSH
12338: LD_VAR 0 3
12342: ARRAY
12343: PUSH
12344: LD_VAR 0 5
12348: PLUS
12349: PUSH
12350: LD_LOC 19
12354: PUSH
12355: LD_VAR 0 7
12359: ARRAY
12360: GREATER
12361: IFFALSE 12387
// begin SetSide ( un , old_side ) ;
12363: LD_VAR 0 1
12367: PPUSH
12368: LD_VAR 0 4
12372: PPUSH
12373: CALL_OW 235
// count := 0 ;
12377: LD_ADDR_VAR 0 5
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// end else
12385: GO 12451
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
12387: LD_ADDR_LOC 24
12391: PUSH
12392: LD_LOC 24
12396: PPUSH
12397: LD_VAR 0 7
12401: PPUSH
12402: LD_LOC 24
12406: PUSH
12407: LD_VAR 0 7
12411: ARRAY
12412: PPUSH
12413: LD_VAR 0 4
12417: PPUSH
12418: LD_LOC 24
12422: PUSH
12423: LD_VAR 0 7
12427: ARRAY
12428: PUSH
12429: LD_VAR 0 4
12433: ARRAY
12434: PUSH
12435: LD_VAR 0 5
12439: MINUS
12440: PPUSH
12441: CALL_OW 1
12445: PPUSH
12446: CALL_OW 1
12450: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
12451: LD_ADDR_LOC 24
12455: PUSH
12456: LD_LOC 24
12460: PPUSH
12461: LD_VAR 0 7
12465: PPUSH
12466: LD_LOC 24
12470: PUSH
12471: LD_VAR 0 7
12475: ARRAY
12476: PPUSH
12477: LD_VAR 0 3
12481: PPUSH
12482: LD_LOC 24
12486: PUSH
12487: LD_VAR 0 7
12491: ARRAY
12492: PUSH
12493: LD_VAR 0 3
12497: ARRAY
12498: PUSH
12499: LD_VAR 0 5
12503: PLUS
12504: PPUSH
12505: CALL_OW 1
12509: PPUSH
12510: CALL_OW 1
12514: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
12515: LD_VAR 0 5
12519: PUSH
12520: LD_INT 0
12522: NONEQUAL
12523: PUSH
12524: LD_VAR 0 3
12528: PUSH
12529: LD_OWVAR 2
12533: EQUAL
12534: AND
12535: IFFALSE 12578
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
12537: LD_ADDR_LOC 25
12541: PUSH
12542: LD_LOC 25
12546: PPUSH
12547: LD_INT 3
12549: PUSH
12550: LD_VAR 0 7
12554: MUL
12555: PPUSH
12556: LD_LOC 24
12560: PUSH
12561: LD_VAR 0 7
12565: ARRAY
12566: PUSH
12567: LD_VAR 0 3
12571: ARRAY
12572: PPUSH
12573: CALL_OW 1
12577: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
12578: LD_LOC 24
12582: PUSH
12583: LD_VAR 0 7
12587: ARRAY
12588: PUSH
12589: LD_VAR 0 3
12593: ARRAY
12594: PUSH
12595: LD_LOC 19
12599: PUSH
12600: LD_VAR 0 7
12604: ARRAY
12605: GREATER
12606: IFFALSE 12633
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
12608: LD_ADDR_LOC 26
12612: PUSH
12613: LD_LOC 26
12617: PPUSH
12618: LD_VAR 0 3
12622: PPUSH
12623: LD_INT 1
12625: PPUSH
12626: CALL_OW 1
12630: ST_TO_ADDR
// end else
12631: GO 12720
// begin for j := 1 to Restricted_Builds do
12633: LD_ADDR_VAR 0 8
12637: PUSH
12638: DOUBLE
12639: LD_INT 1
12641: DEC
12642: ST_TO_ADDR
12643: LD_LOC 18
12647: PUSH
12648: FOR_TO
12649: IFFALSE 12693
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
12651: LD_LOC 24
12655: PUSH
12656: LD_VAR 0 8
12660: ARRAY
12661: PUSH
12662: LD_VAR 0 3
12666: ARRAY
12667: PUSH
12668: LD_LOC 19
12672: PUSH
12673: LD_VAR 0 8
12677: ARRAY
12678: GREATER
12679: IFFALSE 12691
// begin Is_Cheater := true ;
12681: LD_ADDR_VAR 0 9
12685: PUSH
12686: LD_INT 1
12688: ST_TO_ADDR
// break ;
12689: GO 12693
// end ;
12691: GO 12648
12693: POP
12694: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
12695: LD_ADDR_LOC 26
12699: PUSH
12700: LD_LOC 26
12704: PPUSH
12705: LD_VAR 0 3
12709: PPUSH
12710: LD_VAR 0 9
12714: PPUSH
12715: CALL_OW 1
12719: ST_TO_ADDR
// end ; break ;
12720: GO 12724
// end ;
12722: GO 12300
12724: POP
12725: POP
// end ;
12726: LD_VAR 0 6
12730: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12731: LD_VAR 0 5
12735: PUSH
12736: LD_LOC 20
12740: IN
12741: PUSH
12742: LD_VAR 0 2
12746: PUSH
12747: LD_LOC 21
12751: IN
12752: OR
12753: PUSH
12754: LD_VAR 0 4
12758: PUSH
12759: LD_LOC 22
12763: IN
12764: OR
12765: PUSH
12766: LD_VAR 0 3
12770: PUSH
12771: LD_LOC 23
12775: IN
12776: OR
12777: IFFALSE 12788
// ComCancel ( factory ) ;
12779: LD_VAR 0 1
12783: PPUSH
12784: CALL_OW 127
// end ;
12788: PPOPN 5
12790: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12791: LD_VAR 0 2
12795: PUSH
12796: LD_LOC 20
12800: IN
12801: IFFALSE 12812
// ComCancel ( building ) ;
12803: LD_VAR 0 1
12807: PPUSH
12808: CALL_OW 127
// end ; end_of_file
12812: PPOPN 2
12814: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
12815: LD_INT 0
12817: PPUSH
12818: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12819: LD_ADDR_VAR 0 2
12823: PUSH
12824: LD_STRING #Multi1x1-Time
12826: PUSH
12827: LD_OWVAR 1
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: ST_TO_ADDR
// if WaitServerStrings then
12836: LD_EXP 57
12840: IFFALSE 12858
// AllStrings = AllStrings ^ WaitServerStrings ;
12842: LD_ADDR_VAR 0 2
12846: PUSH
12847: LD_VAR 0 2
12851: PUSH
12852: LD_EXP 57
12856: ADD
12857: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12858: LD_INT 0
12860: PUSH
12861: LD_EXP 15
12865: PUSH
12866: LD_OWVAR 1
12870: MINUS
12871: LESSEQUAL
12872: IFFALSE 12903
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12874: LD_ADDR_VAR 0 2
12878: PUSH
12879: LD_VAR 0 2
12883: PUSH
12884: LD_STRING #allowedsibbomb
12886: PUSH
12887: LD_EXP 15
12891: PUSH
12892: LD_OWVAR 1
12896: MINUS
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: ADD
12902: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
12903: LD_INT 0
12905: PUSH
12906: LD_EXP 60
12910: PUSH
12911: LD_OWVAR 1
12915: MINUS
12916: LESSEQUAL
12917: IFFALSE 12948
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
12919: LD_ADDR_VAR 0 2
12923: PUSH
12924: LD_VAR 0 2
12928: PUSH
12929: LD_STRING #builduptime
12931: PUSH
12932: LD_EXP 60
12936: PUSH
12937: LD_OWVAR 1
12941: MINUS
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: ADD
12947: ST_TO_ADDR
// if ( ExtraStrings ) then
12948: LD_EXP 56
12952: IFFALSE 12974
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12954: LD_ADDR_VAR 0 2
12958: PUSH
12959: LD_VAR 0 2
12963: PUSH
12964: LD_STRING 
12966: ADD
12967: PUSH
12968: LD_EXP 56
12972: ADD
12973: ST_TO_ADDR
// if ( LimitsStrings ) then
12974: CALL 9676 0 0
12978: IFFALSE 13000
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12980: LD_ADDR_VAR 0 2
12984: PUSH
12985: LD_VAR 0 2
12989: PUSH
12990: LD_STRING 
12992: ADD
12993: PUSH
12994: CALL 9676 0 0
12998: ADD
12999: ST_TO_ADDR
// if debug_strings then
13000: LD_OWVAR 48
13004: IFFALSE 13026
// AllStrings := AllStrings ^  ^ debug_strings ;
13006: LD_ADDR_VAR 0 2
13010: PUSH
13011: LD_VAR 0 2
13015: PUSH
13016: LD_STRING 
13018: ADD
13019: PUSH
13020: LD_OWVAR 48
13024: ADD
13025: ST_TO_ADDR
// Display_Strings := AllStrings ;
13026: LD_ADDR_OWVAR 47
13030: PUSH
13031: LD_VAR 0 2
13035: ST_TO_ADDR
// end ;
13036: LD_VAR 0 1
13040: RET
// every 0 0$1 do
13041: GO 13043
13043: DISABLE
// begin ShowTimer ;
13044: CALL 12815 0 0
// enable ;
13048: ENABLE
// end ; end_of_file
13049: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
13050: LD_INT 0
13052: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
13053: LD_VAR 0 1
13057: PPUSH
13058: CALL_OW 255
13062: PUSH
13063: LD_VAR 0 4
13067: EQUAL
13068: IFFALSE 13087
// begin SetAchievement ( ACH_RAD ) ;
13070: LD_STRING ACH_RAD
13072: PPUSH
13073: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
13077: LD_STRING ACH_NL
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: CALL_OW 564
// end end ;
13087: LD_VAR 0 5
13091: RET
// export function SA_Win ( side ) ; begin
13092: LD_INT 0
13094: PPUSH
// case side of 1 :
13095: LD_VAR 0 1
13099: PUSH
13100: LD_INT 1
13102: DOUBLE
13103: EQUAL
13104: IFTRUE 13108
13106: GO 13121
13108: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
13109: LD_STRING ACH_AH
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: CALL_OW 564
13119: GO 13284
13121: LD_INT 2
13123: DOUBLE
13124: EQUAL
13125: IFTRUE 13129
13127: GO 13142
13129: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
13130: LD_STRING ACH_E
13132: PPUSH
13133: LD_INT 1
13135: PPUSH
13136: CALL_OW 564
13140: GO 13284
13142: LD_INT 3
13144: DOUBLE
13145: EQUAL
13146: IFTRUE 13150
13148: GO 13163
13150: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
13151: LD_STRING ACH_OOL
13153: PPUSH
13154: LD_INT 1
13156: PPUSH
13157: CALL_OW 564
13161: GO 13284
13163: LD_INT 1
13165: PUSH
13166: LD_INT 2
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: DOUBLE
13173: EQUAL
13174: IFTRUE 13178
13176: GO 13203
13178: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
13179: LD_STRING ACH_AH
13181: PPUSH
13182: LD_REAL  5.00000000000000E-0001
13185: PPUSH
13186: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
13190: LD_STRING ACH_E
13192: PPUSH
13193: LD_REAL  5.00000000000000E-0001
13196: PPUSH
13197: CALL_OW 564
// end ; [ 2 , 3 ] :
13201: GO 13284
13203: LD_INT 2
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: DOUBLE
13213: EQUAL
13214: IFTRUE 13218
13216: GO 13243
13218: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
13219: LD_STRING ACH_OOL
13221: PPUSH
13222: LD_REAL  5.00000000000000E-0001
13225: PPUSH
13226: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
13230: LD_STRING ACH_E
13232: PPUSH
13233: LD_REAL  5.00000000000000E-0001
13236: PPUSH
13237: CALL_OW 564
// end ; [ 3 , 1 ] :
13241: GO 13284
13243: LD_INT 3
13245: PUSH
13246: LD_INT 1
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: DOUBLE
13253: EQUAL
13254: IFTRUE 13258
13256: GO 13283
13258: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
13259: LD_STRING ACH_AH
13261: PPUSH
13262: LD_REAL  5.00000000000000E-0001
13265: PPUSH
13266: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
13270: LD_STRING ACH_OOL
13272: PPUSH
13273: LD_REAL  5.00000000000000E-0001
13276: PPUSH
13277: CALL_OW 564
// end ; end ;
13281: GO 13284
13283: POP
// end ; end_of_file
13284: LD_VAR 0 2
13288: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
13289: LD_INT 0
13291: PPUSH
13292: PPUSH
// enable ( 98 ) ;
13293: LD_INT 98
13295: ENABLE_MARKED
// GameEnded = false ;
13296: LD_ADDR_LOC 28
13300: PUSH
13301: LD_INT 0
13303: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13304: LD_ADDR_LOC 27
13308: PUSH
13309: LD_INT 0
13311: PUSH
13312: LD_INT 0
13314: PUSH
13315: LD_INT 0
13317: PUSH
13318: LD_INT 0
13320: PUSH
13321: LD_INT 0
13323: PUSH
13324: LD_INT 0
13326: PUSH
13327: LD_INT 0
13329: PUSH
13330: LD_INT 0
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: ST_TO_ADDR
// unfoged = false ;
13343: LD_ADDR_LOC 29
13347: PUSH
13348: LD_INT 0
13350: ST_TO_ADDR
// defeated_specs := [ ] ;
13351: LD_ADDR_LOC 30
13355: PUSH
13356: EMPTY
13357: ST_TO_ADDR
// for i = 1 to side_positions do
13358: LD_ADDR_VAR 0 2
13362: PUSH
13363: DOUBLE
13364: LD_INT 1
13366: DEC
13367: ST_TO_ADDR
13368: LD_EXP 18
13372: PUSH
13373: FOR_TO
13374: IFFALSE 13414
// if not side_positions [ i ] then
13376: LD_EXP 18
13380: PUSH
13381: LD_VAR 0 2
13385: ARRAY
13386: NOT
13387: IFFALSE 13412
// defeated = replace ( defeated , i , true ) ;
13389: LD_ADDR_LOC 27
13393: PUSH
13394: LD_LOC 27
13398: PPUSH
13399: LD_VAR 0 2
13403: PPUSH
13404: LD_INT 1
13406: PPUSH
13407: CALL_OW 1
13411: ST_TO_ADDR
13412: GO 13373
13414: POP
13415: POP
// end ;
13416: LD_VAR 0 1
13420: RET
// function CanWinLoose ; begin
13421: LD_INT 0
13423: PPUSH
// Result := true ;
13424: LD_ADDR_VAR 0 1
13428: PUSH
13429: LD_INT 1
13431: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
13432: CALL_OW 518
13436: PUSH
13437: CALL_OW 519
13441: PUSH
13442: LD_INT 0
13444: GREATER
13445: AND
13446: IFFALSE 13456
// Result := false ;
13448: LD_ADDR_VAR 0 1
13452: PUSH
13453: LD_INT 0
13455: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13456: CALL_OW 531
13460: PUSH
13461: CALL_OW 519
13465: PUSH
13466: LD_INT 1
13468: GREATER
13469: AND
13470: IFFALSE 13480
// Result := false ;
13472: LD_ADDR_VAR 0 1
13476: PUSH
13477: LD_INT 0
13479: ST_TO_ADDR
// end ;
13480: LD_VAR 0 1
13484: RET
// export function HasPower ( i ) ; var k , h ; begin
13485: LD_INT 0
13487: PPUSH
13488: PPUSH
13489: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
13490: LD_VAR 0 1
13494: PPUSH
13495: CALL_OW 108
13499: NOT
13500: PUSH
13501: LD_EXP 21
13505: PUSH
13506: LD_VAR 0 1
13510: ARRAY
13511: NOT
13512: AND
13513: PUSH
13514: LD_OWVAR 4
13518: AND
13519: IFFALSE 13531
// begin result = false ;
13521: LD_ADDR_VAR 0 2
13525: PUSH
13526: LD_INT 0
13528: ST_TO_ADDR
// end else
13529: GO 13826
// case def_win_rules of 0 :
13531: LD_EXP 30
13535: PUSH
13536: LD_INT 0
13538: DOUBLE
13539: EQUAL
13540: IFTRUE 13544
13542: GO 13707
13544: POP
// if def_people_respawning then
13545: LD_EXP 51
13549: IFFALSE 13640
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
13551: LD_ADDR_VAR 0 2
13555: PUSH
13556: LD_INT 22
13558: PUSH
13559: LD_VAR 0 1
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 2
13570: PUSH
13571: LD_INT 21
13573: PUSH
13574: LD_INT 1
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 33
13583: PUSH
13584: LD_INT 3
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 33
13593: PUSH
13594: LD_INT 5
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 30
13603: PUSH
13604: LD_INT 0
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 30
13613: PUSH
13614: LD_INT 1
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PPUSH
13633: CALL_OW 69
13637: ST_TO_ADDR
13638: GO 13705
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
13640: LD_ADDR_VAR 0 2
13644: PUSH
13645: LD_INT 22
13647: PUSH
13648: LD_VAR 0 1
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 2
13659: PUSH
13660: LD_INT 21
13662: PUSH
13663: LD_INT 1
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 33
13672: PUSH
13673: LD_INT 3
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 33
13682: PUSH
13683: LD_INT 5
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PPUSH
13700: CALL_OW 69
13704: ST_TO_ADDR
13705: GO 13826
13707: LD_INT 1
13709: DOUBLE
13710: EQUAL
13711: IFTRUE 13715
13713: GO 13754
13715: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
13716: LD_ADDR_VAR 0 2
13720: PUSH
13721: LD_INT 22
13723: PUSH
13724: LD_VAR 0 1
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 21
13735: PUSH
13736: LD_INT 1
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PPUSH
13747: CALL_OW 69
13751: ST_TO_ADDR
13752: GO 13826
13754: LD_INT 2
13756: DOUBLE
13757: EQUAL
13758: IFTRUE 13762
13760: GO 13825
13762: POP
// begin h = false ;
13763: LD_ADDR_VAR 0 4
13767: PUSH
13768: LD_INT 0
13770: ST_TO_ADDR
// for k in heroes [ i ] do
13771: LD_ADDR_VAR 0 3
13775: PUSH
13776: LD_EXP 31
13780: PUSH
13781: LD_VAR 0 1
13785: ARRAY
13786: PUSH
13787: FOR_IN
13788: IFFALSE 13811
// if IsLive ( k ) then
13790: LD_VAR 0 3
13794: PPUSH
13795: CALL_OW 300
13799: IFFALSE 13809
// h = true ;
13801: LD_ADDR_VAR 0 4
13805: PUSH
13806: LD_INT 1
13808: ST_TO_ADDR
13809: GO 13787
13811: POP
13812: POP
// Result := h ;
13813: LD_ADDR_VAR 0 2
13817: PUSH
13818: LD_VAR 0 4
13822: ST_TO_ADDR
// end ; end ;
13823: GO 13826
13825: POP
// end ;
13826: LD_VAR 0 2
13830: RET
// function AlliedSides ( i , j ) ; begin
13831: LD_INT 0
13833: PPUSH
// Result := false ;
13834: LD_ADDR_VAR 0 3
13838: PUSH
13839: LD_INT 0
13841: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
13842: LD_VAR 0 1
13846: PPUSH
13847: LD_VAR 0 2
13851: PPUSH
13852: CALL_OW 81
13856: PUSH
13857: LD_INT 1
13859: EQUAL
13860: PUSH
13861: LD_VAR 0 2
13865: PPUSH
13866: LD_VAR 0 1
13870: PPUSH
13871: CALL_OW 81
13875: PUSH
13876: LD_INT 1
13878: EQUAL
13879: AND
13880: PUSH
13881: LD_VAR 0 1
13885: PPUSH
13886: CALL_OW 83
13890: AND
13891: PUSH
13892: LD_VAR 0 2
13896: PPUSH
13897: CALL_OW 83
13901: AND
13902: IFFALSE 13912
// Result := true ;
13904: LD_ADDR_VAR 0 3
13908: PUSH
13909: LD_INT 1
13911: ST_TO_ADDR
// end ;
13912: LD_VAR 0 3
13916: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
13917: CALL 13421 0 0
13921: PUSH
13922: LD_LOC 28
13926: NOT
13927: AND
13928: IFFALSE 13944
13930: GO 13932
13932: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
13933: LD_ADDR_EXP 57
13937: PUSH
13938: LD_STRING #Player-Ended
13940: PUSH
13941: EMPTY
13942: LIST
13943: ST_TO_ADDR
13944: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
13945: CALL 13421 0 0
13949: PUSH
13950: LD_LOC 28
13954: AND
13955: IFFALSE 13964
13957: GO 13959
13959: DISABLE
// YouLostInMultiplayer ;
13960: CALL_OW 107
13964: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
13965: CALL 13421 0 0
13969: NOT
13970: PUSH
13971: CALL_OW 531
13975: NOT
13976: AND
13977: IFFALSE 13993
13979: GO 13981
13981: DISABLE
// WaitServerStrings = [ #server-wait ] ;
13982: LD_ADDR_EXP 57
13986: PUSH
13987: LD_STRING #server-wait
13989: PUSH
13990: EMPTY
13991: LIST
13992: ST_TO_ADDR
13993: END
// every 100 trigger IAmSpec do
13994: CALL_OW 531
13998: IFFALSE 14014
14000: GO 14002
14002: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
14003: LD_ADDR_EXP 57
14007: PUSH
14008: LD_STRING #Player-IAmSpec
14010: PUSH
14011: EMPTY
14012: LIST
14013: ST_TO_ADDR
14014: END
// every 100 trigger GameEnded and IAmSpec do
14015: LD_LOC 28
14019: PUSH
14020: CALL_OW 531
14024: AND
14025: IFFALSE 14034
14027: GO 14029
14029: DISABLE
// YouLostInMultiplayer ;
14030: CALL_OW 107
14034: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
14035: CALL 13421 0 0
14039: PUSH
14040: LD_LOC 28
14044: NOT
14045: AND
14046: IFFALSE 14062
14048: GO 14050
14050: DISABLE
// WaitServerStrings = [ $player-win ] ;
14051: LD_ADDR_EXP 57
14055: PUSH
14056: LD_STRING $player-win
14058: PUSH
14059: EMPTY
14060: LIST
14061: ST_TO_ADDR
14062: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
14063: CALL 13421 0 0
14067: PUSH
14068: LD_LOC 28
14072: AND
14073: IFFALSE 14097
14075: GO 14077
14077: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
14078: LD_EXP 19
14082: PUSH
14083: LD_OWVAR 7
14087: ARRAY
14088: PPUSH
14089: CALL 13092 0 1
// YouWinInMultiplayer ;
14093: CALL_OW 106
// end ;
14097: END
// every 100 trigger isEditor marked 401 do
14098: LD_OWVAR 84
14102: IFFALSE 14118
14104: GO 14106
14106: DISABLE
// Debug_Strings = [ You won ] ;
14107: LD_ADDR_OWVAR 48
14111: PUSH
14112: LD_STRING You won
14114: PUSH
14115: EMPTY
14116: LIST
14117: ST_TO_ADDR
14118: END
// every 100 trigger isEditor marked 400 do
14119: LD_OWVAR 84
14123: IFFALSE 14139
14125: GO 14127
14127: DISABLE
// Debug_Strings = [ You loss ] ;
14128: LD_ADDR_OWVAR 48
14132: PUSH
14133: LD_STRING You loss
14135: PUSH
14136: EMPTY
14137: LIST
14138: ST_TO_ADDR
14139: END
// every 100 marked 98 do var i , un ;
14140: GO 14142
14142: DISABLE
14143: LD_INT 0
14145: PPUSH
14146: PPUSH
// begin for i = 1 to side_positions do
14147: LD_ADDR_VAR 0 1
14151: PUSH
14152: DOUBLE
14153: LD_INT 1
14155: DEC
14156: ST_TO_ADDR
14157: LD_EXP 18
14161: PUSH
14162: FOR_TO
14163: IFFALSE 14250
// begin if side_positions [ i ] then
14165: LD_EXP 18
14169: PUSH
14170: LD_VAR 0 1
14174: ARRAY
14175: IFFALSE 14248
// if not HasPower ( i ) and not defeated [ i ] then
14177: LD_VAR 0 1
14181: PPUSH
14182: CALL 13485 0 1
14186: NOT
14187: PUSH
14188: LD_LOC 27
14192: PUSH
14193: LD_VAR 0 1
14197: ARRAY
14198: NOT
14199: AND
14200: IFFALSE 14248
// begin defeated = replace ( defeated , i , true ) ;
14202: LD_ADDR_LOC 27
14206: PUSH
14207: LD_LOC 27
14211: PPUSH
14212: LD_VAR 0 1
14216: PPUSH
14217: LD_INT 1
14219: PPUSH
14220: CALL_OW 1
14224: ST_TO_ADDR
// if i = mp_player_side then
14225: LD_VAR 0 1
14229: PUSH
14230: LD_OWVAR 7
14234: EQUAL
14235: IFFALSE 14248
// begin Multiplayer_Loose_Message ;
14237: CALL_OW 521
// SetPlayerSpectator ( ) ;
14241: CALL_OW 572
// enable ( 400 ) ;
14245: LD_INT 400
14247: ENABLE_MARKED
// end ; end ; end ;
14248: GO 14162
14250: POP
14251: POP
// DidGameEnd ;
14252: CALL 14267 0 0
// if not GameEnded then
14256: LD_LOC 28
14260: NOT
14261: IFFALSE 14264
// enable ;
14263: ENABLE
// end ;
14264: PPOPN 2
14266: END
// function DidGameEnd ; var i , k , enemy ; begin
14267: LD_INT 0
14269: PPUSH
14270: PPUSH
14271: PPUSH
14272: PPUSH
// enemy = [ ] ;
14273: LD_ADDR_VAR 0 4
14277: PUSH
14278: EMPTY
14279: ST_TO_ADDR
// for i = 1 to side_positions do
14280: LD_ADDR_VAR 0 2
14284: PUSH
14285: DOUBLE
14286: LD_INT 1
14288: DEC
14289: ST_TO_ADDR
14290: LD_EXP 18
14294: PUSH
14295: FOR_TO
14296: IFFALSE 14390
// if not defeated [ i ] then
14298: LD_LOC 27
14302: PUSH
14303: LD_VAR 0 2
14307: ARRAY
14308: NOT
14309: IFFALSE 14388
// for k = 1 to side_positions do
14311: LD_ADDR_VAR 0 3
14315: PUSH
14316: DOUBLE
14317: LD_INT 1
14319: DEC
14320: ST_TO_ADDR
14321: LD_EXP 18
14325: PUSH
14326: FOR_TO
14327: IFFALSE 14386
// if not defeated [ k ] then
14329: LD_LOC 27
14333: PUSH
14334: LD_VAR 0 3
14338: ARRAY
14339: NOT
14340: IFFALSE 14384
// if not AlliedSides ( i , k ) then
14342: LD_VAR 0 2
14346: PPUSH
14347: LD_VAR 0 3
14351: PPUSH
14352: CALL 13831 0 2
14356: NOT
14357: IFFALSE 14384
// enemy = enemy ^ [ i , k ] ;
14359: LD_ADDR_VAR 0 4
14363: PUSH
14364: LD_VAR 0 4
14368: PUSH
14369: LD_VAR 0 2
14373: PUSH
14374: LD_VAR 0 3
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: ADD
14383: ST_TO_ADDR
14384: GO 14326
14386: POP
14387: POP
14388: GO 14295
14390: POP
14391: POP
// if not enemy then
14392: LD_VAR 0 4
14396: NOT
14397: IFFALSE 14423
// begin GameEnded = true ;
14399: LD_ADDR_LOC 28
14403: PUSH
14404: LD_INT 1
14406: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
14407: LD_LOC 27
14411: PUSH
14412: LD_OWVAR 7
14416: ARRAY
14417: NOT
14418: IFFALSE 14423
// enable ( 401 ) ;
14420: LD_INT 401
14422: ENABLE_MARKED
// end ; end ;
14423: LD_VAR 0 1
14427: RET
// function unfog ; var k , friends ; begin
14428: LD_INT 0
14430: PPUSH
14431: PPUSH
14432: PPUSH
// for k = 1 to side_positions do
14433: LD_ADDR_VAR 0 2
14437: PUSH
14438: DOUBLE
14439: LD_INT 1
14441: DEC
14442: ST_TO_ADDR
14443: LD_EXP 18
14447: PUSH
14448: FOR_TO
14449: IFFALSE 14505
// if not defeated [ k ] then
14451: LD_LOC 27
14455: PUSH
14456: LD_VAR 0 2
14460: ARRAY
14461: NOT
14462: IFFALSE 14503
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
14464: LD_OWVAR 7
14468: PPUSH
14469: LD_VAR 0 2
14473: PPUSH
14474: CALL_OW 81
14478: PUSH
14479: LD_INT 1
14481: PUSH
14482: EMPTY
14483: LIST
14484: IN
14485: IFFALSE 14503
// friends = friends ^ k ;
14487: LD_ADDR_VAR 0 3
14491: PUSH
14492: LD_VAR 0 3
14496: PUSH
14497: LD_VAR 0 2
14501: ADD
14502: ST_TO_ADDR
14503: GO 14448
14505: POP
14506: POP
// if not friends then
14507: LD_VAR 0 3
14511: NOT
14512: IFFALSE 14526
// begin SetPlayerSpectator ( ) ;
14514: CALL_OW 572
// unfoged = true ;
14518: LD_ADDR_LOC 29
14522: PUSH
14523: LD_INT 1
14525: ST_TO_ADDR
// end ; end ;
14526: LD_VAR 0 1
14530: RET
// export function MakeGameEnd ; begin
14531: LD_INT 0
14533: PPUSH
// SetPlayerSpectator ( ) ;
14534: CALL_OW 572
// unfoged = true ;
14538: LD_ADDR_LOC 29
14542: PUSH
14543: LD_INT 1
14545: ST_TO_ADDR
// wait ( 0 0$5 ) ;
14546: LD_INT 175
14548: PPUSH
14549: CALL_OW 67
// GameEnded = true ;
14553: LD_ADDR_LOC 28
14557: PUSH
14558: LD_INT 1
14560: ST_TO_ADDR
// end ;
14561: LD_VAR 0 1
14565: RET
// export function GetGameEnded ; begin
14566: LD_INT 0
14568: PPUSH
// result = GameEnded ;
14569: LD_ADDR_VAR 0 1
14573: PUSH
14574: LD_LOC 28
14578: ST_TO_ADDR
// end ; end_of_file
14579: LD_VAR 0 1
14583: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
14584: LD_INT 0
14586: PPUSH
14587: PPUSH
14588: PPUSH
14589: PPUSH
14590: PPUSH
14591: PPUSH
14592: PPUSH
14593: PPUSH
14594: PPUSH
// for i := 1 to 8 do
14595: LD_ADDR_VAR 0 2
14599: PUSH
14600: DOUBLE
14601: LD_INT 1
14603: DEC
14604: ST_TO_ADDR
14605: LD_INT 8
14607: PUSH
14608: FOR_TO
14609: IFFALSE 14993
// begin if Side_Positions [ i ] then
14611: LD_EXP 18
14615: PUSH
14616: LD_VAR 0 2
14620: ARRAY
14621: IFFALSE 14991
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
14623: LD_ADDR_VAR 0 7
14627: PUSH
14628: LD_INT 22
14630: PUSH
14631: LD_VAR 0 2
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 21
14642: PUSH
14643: LD_INT 1
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PPUSH
14654: CALL_OW 69
14658: PUSH
14659: LD_INT 0
14661: PLUS
14662: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14663: LD_ADDR_VAR 0 9
14667: PUSH
14668: LD_INT 22
14670: PUSH
14671: LD_VAR 0 2
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 2
14682: PUSH
14683: LD_INT 30
14685: PUSH
14686: LD_INT 0
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PUSH
14693: LD_INT 30
14695: PUSH
14696: LD_INT 1
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: LIST
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PPUSH
14712: CALL_OW 69
14716: ST_TO_ADDR
// crates := 0 ;
14717: LD_ADDR_VAR 0 4
14721: PUSH
14722: LD_INT 0
14724: ST_TO_ADDR
// oil := 0 ;
14725: LD_ADDR_VAR 0 5
14729: PUSH
14730: LD_INT 0
14732: ST_TO_ADDR
// sib := 0 ;
14733: LD_ADDR_VAR 0 6
14737: PUSH
14738: LD_INT 0
14740: ST_TO_ADDR
// if bases then
14741: LD_VAR 0 9
14745: IFFALSE 14851
// begin for j in bases do
14747: LD_ADDR_VAR 0 3
14751: PUSH
14752: LD_VAR 0 9
14756: PUSH
14757: FOR_IN
14758: IFFALSE 14849
// begin base := GetBase ( j ) ;
14760: LD_ADDR_VAR 0 8
14764: PUSH
14765: LD_VAR 0 3
14769: PPUSH
14770: CALL_OW 274
14774: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14775: LD_ADDR_VAR 0 4
14779: PUSH
14780: LD_VAR 0 4
14784: PUSH
14785: LD_VAR 0 8
14789: PPUSH
14790: LD_INT 1
14792: PPUSH
14793: CALL_OW 275
14797: PLUS
14798: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14799: LD_ADDR_VAR 0 5
14803: PUSH
14804: LD_VAR 0 5
14808: PUSH
14809: LD_VAR 0 8
14813: PPUSH
14814: LD_INT 2
14816: PPUSH
14817: CALL_OW 275
14821: PLUS
14822: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14823: LD_ADDR_VAR 0 6
14827: PUSH
14828: LD_VAR 0 6
14832: PUSH
14833: LD_VAR 0 8
14837: PPUSH
14838: LD_INT 3
14840: PPUSH
14841: CALL_OW 275
14845: PLUS
14846: ST_TO_ADDR
// end ;
14847: GO 14757
14849: POP
14850: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14851: LD_STRING setSpecText(
14853: PUSH
14854: LD_VAR 0 2
14858: STR
14859: PUSH
14860: LD_STRING ,
14862: STR
14863: PUSH
14864: LD_INT 2
14866: STR
14867: PUSH
14868: LD_STRING ,
14870: STR
14871: PUSH
14872: LD_VAR 0 4
14876: STR
14877: PUSH
14878: LD_STRING )
14880: STR
14881: PPUSH
14882: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14886: LD_STRING setSpecText(
14888: PUSH
14889: LD_VAR 0 2
14893: STR
14894: PUSH
14895: LD_STRING ,
14897: STR
14898: PUSH
14899: LD_INT 3
14901: STR
14902: PUSH
14903: LD_STRING ,
14905: STR
14906: PUSH
14907: LD_VAR 0 5
14911: STR
14912: PUSH
14913: LD_STRING )
14915: STR
14916: PPUSH
14917: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14921: LD_STRING setSpecText(
14923: PUSH
14924: LD_VAR 0 2
14928: STR
14929: PUSH
14930: LD_STRING ,
14932: STR
14933: PUSH
14934: LD_INT 4
14936: STR
14937: PUSH
14938: LD_STRING ,
14940: STR
14941: PUSH
14942: LD_VAR 0 6
14946: STR
14947: PUSH
14948: LD_STRING )
14950: STR
14951: PPUSH
14952: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14956: LD_STRING setSpecText(
14958: PUSH
14959: LD_VAR 0 2
14963: STR
14964: PUSH
14965: LD_STRING ,
14967: STR
14968: PUSH
14969: LD_INT 5
14971: STR
14972: PUSH
14973: LD_STRING ,
14975: STR
14976: PUSH
14977: LD_VAR 0 7
14981: STR
14982: PUSH
14983: LD_STRING )
14985: STR
14986: PPUSH
14987: CALL_OW 559
// end ; end ;
14991: GO 14608
14993: POP
14994: POP
// end ;
14995: LD_VAR 0 1
14999: RET
// every 0 0$1 do
15000: GO 15002
15002: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
15003: LD_STRING setSpecLogoNumber(
15005: PUSH
15006: LD_INT 2
15008: STR
15009: PUSH
15010: LD_STRING ,
15012: STR
15013: PUSH
15014: LD_INT 1
15016: STR
15017: PUSH
15018: LD_STRING )
15020: STR
15021: PPUSH
15022: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
15026: LD_STRING setSpecLogoNumber(
15028: PUSH
15029: LD_INT 3
15031: STR
15032: PUSH
15033: LD_STRING ,
15035: STR
15036: PUSH
15037: LD_INT 2
15039: STR
15040: PUSH
15041: LD_STRING )
15043: STR
15044: PPUSH
15045: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
15049: LD_STRING setSpecLogoNumber(
15051: PUSH
15052: LD_INT 4
15054: STR
15055: PUSH
15056: LD_STRING ,
15058: STR
15059: PUSH
15060: LD_INT 3
15062: STR
15063: PUSH
15064: LD_STRING )
15066: STR
15067: PPUSH
15068: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
15072: LD_STRING setSpecLogoNumber(
15074: PUSH
15075: LD_INT 5
15077: STR
15078: PUSH
15079: LD_STRING ,
15081: STR
15082: PUSH
15083: LD_INT 4
15085: STR
15086: PUSH
15087: LD_STRING )
15089: STR
15090: PPUSH
15091: CALL_OW 559
// end ;
15095: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
15096: LD_INT 2
15098: PUSH
15099: LD_INT 30
15101: PUSH
15102: LD_INT 0
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 30
15111: PUSH
15112: LD_INT 1
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: LIST
15123: PPUSH
15124: CALL_OW 69
15128: IFFALSE 15138
15130: GO 15132
15132: DISABLE
// begin enable ;
15133: ENABLE
// UpdateSpectatorBar ;
15134: CALL 14584 0 0
// end ; end_of_file
15138: END
// var respawn , inqueue ; export function init_respawning ; begin
15139: LD_INT 0
15141: PPUSH
// respawn := Rand ( 1 , 8 ) ;
15142: LD_ADDR_LOC 31
15146: PUSH
15147: LD_INT 1
15149: PPUSH
15150: LD_INT 8
15152: PPUSH
15153: CALL_OW 12
15157: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15158: LD_ADDR_LOC 32
15162: PUSH
15163: LD_INT 0
15165: PUSH
15166: LD_INT 0
15168: PUSH
15169: LD_INT 0
15171: PUSH
15172: LD_INT 0
15174: PUSH
15175: LD_INT 0
15177: PUSH
15178: LD_INT 0
15180: PUSH
15181: LD_INT 0
15183: PUSH
15184: LD_INT 0
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: ST_TO_ADDR
// end ;
15197: LD_VAR 0 1
15201: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
15202: GO 15204
15204: DISABLE
15205: LD_INT 0
15207: PPUSH
15208: PPUSH
15209: PPUSH
// begin if respawning_time_max = 0 then
15210: LD_EXP 13
15214: PUSH
15215: LD_INT 0
15217: EQUAL
15218: IFFALSE 15222
// exit ;
15220: GO 15630
// if respawn = 8 then
15222: LD_LOC 31
15226: PUSH
15227: LD_INT 8
15229: EQUAL
15230: IFFALSE 15242
// respawn := 1 else
15232: LD_ADDR_LOC 31
15236: PUSH
15237: LD_INT 1
15239: ST_TO_ADDR
15240: GO 15256
// respawn := respawn + 1 ;
15242: LD_ADDR_LOC 31
15246: PUSH
15247: LD_LOC 31
15251: PUSH
15252: LD_INT 1
15254: PLUS
15255: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
15256: LD_EXP 18
15260: PUSH
15261: LD_LOC 31
15265: ARRAY
15266: PUSH
15267: LD_LOC 32
15271: PUSH
15272: LD_LOC 31
15276: ARRAY
15277: NOT
15278: AND
15279: IFFALSE 15629
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
15281: LD_ADDR_VAR 0 1
15285: PUSH
15286: LD_INT 21
15288: PUSH
15289: LD_INT 1
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 22
15298: PUSH
15299: LD_LOC 31
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: LD_INT 23
15313: PUSH
15314: LD_INT 0
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: PPUSH
15327: CALL_OW 69
15331: ST_TO_ADDR
// if n < number_of_people then
15332: LD_VAR 0 1
15336: PUSH
15337: LD_EXP 5
15341: LESS
15342: IFFALSE 15626
// begin aktresp := respawn ;
15344: LD_ADDR_VAR 0 3
15348: PUSH
15349: LD_LOC 31
15353: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
15354: LD_ADDR_LOC 32
15358: PUSH
15359: LD_LOC 32
15363: PPUSH
15364: LD_VAR 0 3
15368: PPUSH
15369: LD_INT 1
15371: PPUSH
15372: CALL_OW 1
15376: ST_TO_ADDR
// enable ;
15377: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
15378: LD_EXP 12
15382: PPUSH
15383: LD_EXP 13
15387: PPUSH
15388: CALL_OW 12
15392: PPUSH
15393: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
15397: LD_ADDR_LOC 32
15401: PUSH
15402: LD_LOC 32
15406: PPUSH
15407: LD_VAR 0 3
15411: PPUSH
15412: LD_INT 0
15414: PPUSH
15415: CALL_OW 1
15419: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
15420: LD_ADDR_VAR 0 2
15424: PUSH
15425: LD_INT 21
15427: PUSH
15428: LD_INT 3
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: LD_INT 2
15437: PUSH
15438: LD_INT 30
15440: PUSH
15441: LD_INT 0
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 30
15450: PUSH
15451: LD_INT 1
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 50
15465: PUSH
15466: EMPTY
15467: LIST
15468: PUSH
15469: LD_INT 22
15471: PUSH
15472: LD_VAR 0 3
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: PPUSH
15487: CALL_OW 69
15491: ST_TO_ADDR
// if dep = 0 then
15492: LD_VAR 0 2
15496: PUSH
15497: LD_INT 0
15499: EQUAL
15500: IFFALSE 15504
// exit ;
15502: GO 15630
// hc_name :=  ;
15504: LD_ADDR_OWVAR 26
15508: PUSH
15509: LD_STRING 
15511: ST_TO_ADDR
// hc_importance := 0 ;
15512: LD_ADDR_OWVAR 32
15516: PUSH
15517: LD_INT 0
15519: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
15520: LD_INT 0
15522: PPUSH
15523: LD_INT 0
15525: PPUSH
15526: LD_EXP 6
15530: PUSH
15531: LD_INT 2
15533: DIV
15534: PPUSH
15535: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
15539: LD_ADDR_OWVAR 21
15543: PUSH
15544: LD_EXP 19
15548: PUSH
15549: LD_VAR 0 3
15553: ARRAY
15554: ST_TO_ADDR
// uc_side := aktresp ;
15555: LD_ADDR_OWVAR 20
15559: PUSH
15560: LD_VAR 0 3
15564: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
15565: LD_ADDR_VAR 0 2
15569: PUSH
15570: LD_VAR 0 2
15574: PUSH
15575: LD_INT 1
15577: PPUSH
15578: LD_VAR 0 2
15582: PPUSH
15583: CALL_OW 12
15587: ARRAY
15588: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
15589: CALL_OW 44
15593: PPUSH
15594: LD_VAR 0 2
15598: PPUSH
15599: CALL_OW 250
15603: PPUSH
15604: LD_VAR 0 2
15608: PPUSH
15609: CALL_OW 251
15613: PPUSH
15614: LD_INT 7
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: CALL_OW 50
// end else
15624: GO 15627
// enable ;
15626: ENABLE
// end else
15627: GO 15630
// enable ;
15629: ENABLE
// end ; end_of_file
15630: PPOPN 3
15632: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
15633: LD_INT 0
15635: PPUSH
15636: PPUSH
15637: PPUSH
// BuildUpTime_Delay = 0 ;
15638: LD_ADDR_EXP 60
15642: PUSH
15643: LD_INT 0
15645: ST_TO_ADDR
// if not def_builduptime then
15646: LD_EXP 54
15650: NOT
15651: IFFALSE 15655
// exit ;
15653: GO 15838
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
15655: LD_ADDR_EXP 60
15659: PUSH
15660: LD_INT 8400
15662: PUSH
15663: LD_INT 2100
15665: PUSH
15666: LD_EXP 54
15670: MUL
15671: PLUS
15672: ST_TO_ADDR
// BuildUpTimeActive := true ;
15673: LD_ADDR_EXP 59
15677: PUSH
15678: LD_INT 1
15680: ST_TO_ADDR
// for i := 1 to 8 do
15681: LD_ADDR_VAR 0 2
15685: PUSH
15686: DOUBLE
15687: LD_INT 1
15689: DEC
15690: ST_TO_ADDR
15691: LD_INT 8
15693: PUSH
15694: FOR_TO
15695: IFFALSE 15836
// if Side_Positions [ i ] then
15697: LD_EXP 18
15701: PUSH
15702: LD_VAR 0 2
15706: ARRAY
15707: IFFALSE 15834
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
15709: LD_EXP 58
15713: PUSH
15714: LD_EXP 18
15718: PUSH
15719: LD_VAR 0 2
15723: ARRAY
15724: ARRAY
15725: PPUSH
15726: LD_INT 5
15728: PPUSH
15729: CALL_OW 424
// for j := 1 to 8 do
15733: LD_ADDR_VAR 0 3
15737: PUSH
15738: DOUBLE
15739: LD_INT 1
15741: DEC
15742: ST_TO_ADDR
15743: LD_INT 8
15745: PUSH
15746: FOR_TO
15747: IFFALSE 15832
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15749: LD_EXP 18
15753: PUSH
15754: LD_VAR 0 3
15758: ARRAY
15759: PUSH
15760: LD_EXP 16
15764: PUSH
15765: LD_VAR 0 2
15769: ARRAY
15770: PUSH
15771: LD_EXP 16
15775: PUSH
15776: LD_VAR 0 3
15780: ARRAY
15781: NONEQUAL
15782: PUSH
15783: LD_EXP 20
15787: NOT
15788: PUSH
15789: LD_VAR 0 2
15793: PUSH
15794: LD_VAR 0 3
15798: NONEQUAL
15799: AND
15800: OR
15801: AND
15802: IFFALSE 15830
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15804: LD_VAR 0 3
15808: PPUSH
15809: LD_EXP 58
15813: PUSH
15814: LD_EXP 18
15818: PUSH
15819: LD_VAR 0 2
15823: ARRAY
15824: ARRAY
15825: PPUSH
15826: CALL_OW 333
15830: GO 15746
15832: POP
15833: POP
// end ;
15834: GO 15694
15836: POP
15837: POP
// end ;
15838: LD_VAR 0 1
15842: RET
// export function EndBuildUp ; var i , j ; begin
15843: LD_INT 0
15845: PPUSH
15846: PPUSH
15847: PPUSH
// BuildUpTimeActive := false ;
15848: LD_ADDR_EXP 59
15852: PUSH
15853: LD_INT 0
15855: ST_TO_ADDR
// for i := 1 to 8 do
15856: LD_ADDR_VAR 0 2
15860: PUSH
15861: DOUBLE
15862: LD_INT 1
15864: DEC
15865: ST_TO_ADDR
15866: LD_INT 8
15868: PUSH
15869: FOR_TO
15870: IFFALSE 16011
// if Side_Positions [ i ] then
15872: LD_EXP 18
15876: PUSH
15877: LD_VAR 0 2
15881: ARRAY
15882: IFFALSE 16009
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
15884: LD_EXP 58
15888: PUSH
15889: LD_EXP 18
15893: PUSH
15894: LD_VAR 0 2
15898: ARRAY
15899: ARRAY
15900: PPUSH
15901: LD_INT 0
15903: PPUSH
15904: CALL_OW 424
// for j := 1 to 8 do
15908: LD_ADDR_VAR 0 3
15912: PUSH
15913: DOUBLE
15914: LD_INT 1
15916: DEC
15917: ST_TO_ADDR
15918: LD_INT 8
15920: PUSH
15921: FOR_TO
15922: IFFALSE 16007
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
15924: LD_EXP 18
15928: PUSH
15929: LD_VAR 0 3
15933: ARRAY
15934: PUSH
15935: LD_EXP 16
15939: PUSH
15940: LD_VAR 0 2
15944: ARRAY
15945: PUSH
15946: LD_EXP 16
15950: PUSH
15951: LD_VAR 0 3
15955: ARRAY
15956: NONEQUAL
15957: PUSH
15958: LD_EXP 20
15962: NOT
15963: PUSH
15964: LD_VAR 0 2
15968: PUSH
15969: LD_VAR 0 3
15973: NONEQUAL
15974: AND
15975: OR
15976: AND
15977: IFFALSE 16005
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
15979: LD_VAR 0 3
15983: PPUSH
15984: LD_EXP 58
15988: PUSH
15989: LD_EXP 18
15993: PUSH
15994: LD_VAR 0 2
15998: ARRAY
15999: ARRAY
16000: PPUSH
16001: CALL_OW 334
16005: GO 15921
16007: POP
16008: POP
// end ;
16009: GO 15869
16011: POP
16012: POP
// end ;
16013: LD_VAR 0 1
16017: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
16018: LD_EXP 59
16022: IFFALSE 16197
16024: GO 16026
16026: DISABLE
16027: LD_INT 0
16029: PPUSH
16030: PPUSH
// begin for i := 1 to 8 do
16031: LD_ADDR_VAR 0 1
16035: PUSH
16036: DOUBLE
16037: LD_INT 1
16039: DEC
16040: ST_TO_ADDR
16041: LD_INT 8
16043: PUSH
16044: FOR_TO
16045: IFFALSE 16194
// if Side_Positions [ i ] then
16047: LD_EXP 18
16051: PUSH
16052: LD_VAR 0 1
16056: ARRAY
16057: IFFALSE 16192
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
16059: LD_ADDR_VAR 0 2
16063: PUSH
16064: LD_EXP 58
16068: PUSH
16069: LD_EXP 18
16073: PUSH
16074: LD_VAR 0 1
16078: ARRAY
16079: ARRAY
16080: PPUSH
16081: LD_INT 2
16083: PUSH
16084: LD_INT 21
16086: PUSH
16087: LD_INT 1
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: LD_INT 21
16096: PUSH
16097: LD_INT 2
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 22
16111: PUSH
16112: LD_OWVAR 2
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PPUSH
16125: CALL_OW 70
16129: PUSH
16130: FOR_IN
16131: IFFALSE 16190
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
16133: LD_EXP 16
16137: PUSH
16138: LD_VAR 0 1
16142: ARRAY
16143: PUSH
16144: LD_EXP 16
16148: PUSH
16149: LD_OWVAR 2
16153: ARRAY
16154: NONEQUAL
16155: PUSH
16156: LD_EXP 20
16160: NOT
16161: PUSH
16162: LD_VAR 0 1
16166: PUSH
16167: LD_OWVAR 2
16171: NONEQUAL
16172: AND
16173: OR
16174: IFFALSE 16188
// ComMoveToArea ( un , BuildUpEscape ) ;
16176: LD_VAR 0 2
16180: PPUSH
16181: LD_INT 22
16183: PPUSH
16184: CALL_OW 113
16188: GO 16130
16190: POP
16191: POP
16192: GO 16044
16194: POP
16195: POP
// enable ;
16196: ENABLE
// end ;
16197: PPOPN 2
16199: END
// every 0 0$1 trigger def_builduptime do
16200: LD_EXP 54
16204: IFFALSE 16230
16206: GO 16208
16208: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
16209: LD_INT 8400
16211: PUSH
16212: LD_EXP 54
16216: PUSH
16217: LD_INT 2100
16219: MUL
16220: PLUS
16221: PPUSH
16222: CALL_OW 67
// EndBuildUp ;
16226: CALL 15843 0 0
// end ; end_of_file
16230: END
// export function SetMpTechs ( ) ; var side , i ; begin
16231: LD_INT 0
16233: PPUSH
16234: PPUSH
16235: PPUSH
// for side = 1 to 8 do
16236: LD_ADDR_VAR 0 2
16240: PUSH
16241: DOUBLE
16242: LD_INT 1
16244: DEC
16245: ST_TO_ADDR
16246: LD_INT 8
16248: PUSH
16249: FOR_TO
16250: IFFALSE 16371
// begin for i = 1 to 72 do
16252: LD_ADDR_VAR 0 3
16256: PUSH
16257: DOUBLE
16258: LD_INT 1
16260: DEC
16261: ST_TO_ADDR
16262: LD_INT 72
16264: PUSH
16265: FOR_TO
16266: IFFALSE 16297
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
16268: LD_VAR 0 3
16272: PPUSH
16273: LD_VAR 0 2
16277: PPUSH
16278: LD_INT 0
16280: PPUSH
16281: LD_VAR 0 3
16285: PPUSH
16286: CALL_OW 565
16290: PPUSH
16291: CALL_OW 322
16295: GO 16265
16297: POP
16298: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
16299: LD_INT 73
16301: PPUSH
16302: LD_VAR 0 2
16306: PPUSH
16307: LD_INT 0
16309: PPUSH
16310: LD_INT 25
16312: PPUSH
16313: CALL_OW 565
16317: PPUSH
16318: CALL_OW 322
// for i = 0 to 40 do
16322: LD_ADDR_VAR 0 3
16326: PUSH
16327: DOUBLE
16328: LD_INT 0
16330: DEC
16331: ST_TO_ADDR
16332: LD_INT 40
16334: PUSH
16335: FOR_TO
16336: IFFALSE 16367
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
16338: LD_VAR 0 3
16342: PPUSH
16343: LD_VAR 0 2
16347: PPUSH
16348: LD_INT 1
16350: PPUSH
16351: LD_VAR 0 3
16355: PPUSH
16356: CALL_OW 565
16360: PPUSH
16361: CALL_OW 324
16365: GO 16335
16367: POP
16368: POP
// end ;
16369: GO 16249
16371: POP
16372: POP
// end ;
16373: LD_VAR 0 1
16377: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
16378: LD_INT 0
16380: PPUSH
16381: PPUSH
16382: PPUSH
// for side = 1 to 8 do
16383: LD_ADDR_VAR 0 3
16387: PUSH
16388: DOUBLE
16389: LD_INT 1
16391: DEC
16392: ST_TO_ADDR
16393: LD_INT 8
16395: PUSH
16396: FOR_TO
16397: IFFALSE 20393
// begin for i = 1 to 73 do
16399: LD_ADDR_VAR 0 4
16403: PUSH
16404: DOUBLE
16405: LD_INT 1
16407: DEC
16408: ST_TO_ADDR
16409: LD_INT 73
16411: PUSH
16412: FOR_TO
16413: IFFALSE 16434
// SetTech ( i , side , state_disabled ) ;
16415: LD_VAR 0 4
16419: PPUSH
16420: LD_VAR 0 3
16424: PPUSH
16425: LD_INT 0
16427: PPUSH
16428: CALL_OW 322
16432: GO 16412
16434: POP
16435: POP
// for i = 0 to 40 do
16436: LD_ADDR_VAR 0 4
16440: PUSH
16441: DOUBLE
16442: LD_INT 0
16444: DEC
16445: ST_TO_ADDR
16446: LD_INT 40
16448: PUSH
16449: FOR_TO
16450: IFFALSE 16471
// SetRestrict ( i , side , false ) ;
16452: LD_VAR 0 4
16456: PPUSH
16457: LD_VAR 0 3
16461: PPUSH
16462: LD_INT 0
16464: PPUSH
16465: CALL_OW 324
16469: GO 16449
16471: POP
16472: POP
// case level of 1 :
16473: LD_VAR 0 1
16477: PUSH
16478: LD_INT 1
16480: DOUBLE
16481: EQUAL
16482: IFTRUE 16486
16484: GO 16639
16486: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16487: LD_INT 35
16489: PPUSH
16490: LD_VAR 0 3
16494: PPUSH
16495: LD_INT 1
16497: PPUSH
16498: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16502: LD_INT 45
16504: PPUSH
16505: LD_VAR 0 3
16509: PPUSH
16510: LD_INT 1
16512: PPUSH
16513: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16517: LD_INT 46
16519: PPUSH
16520: LD_VAR 0 3
16524: PPUSH
16525: LD_INT 1
16527: PPUSH
16528: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16532: LD_INT 47
16534: PPUSH
16535: LD_VAR 0 3
16539: PPUSH
16540: LD_INT 1
16542: PPUSH
16543: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16547: LD_INT 0
16549: PPUSH
16550: LD_VAR 0 3
16554: PPUSH
16555: LD_INT 1
16557: PPUSH
16558: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16562: LD_INT 2
16564: PPUSH
16565: LD_VAR 0 3
16569: PPUSH
16570: LD_INT 1
16572: PPUSH
16573: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16577: LD_INT 4
16579: PPUSH
16580: LD_VAR 0 3
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16592: LD_INT 6
16594: PPUSH
16595: LD_VAR 0 3
16599: PPUSH
16600: LD_INT 1
16602: PPUSH
16603: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16607: LD_INT 29
16609: PPUSH
16610: LD_VAR 0 3
16614: PPUSH
16615: LD_INT 1
16617: PPUSH
16618: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16622: LD_INT 31
16624: PPUSH
16625: LD_VAR 0 3
16629: PPUSH
16630: LD_INT 1
16632: PPUSH
16633: CALL_OW 324
// end ; 2 :
16637: GO 20391
16639: LD_INT 2
16641: DOUBLE
16642: EQUAL
16643: IFTRUE 16647
16645: GO 16845
16647: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16648: LD_INT 35
16650: PPUSH
16651: LD_VAR 0 3
16655: PPUSH
16656: LD_INT 1
16658: PPUSH
16659: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16663: LD_INT 45
16665: PPUSH
16666: LD_VAR 0 3
16670: PPUSH
16671: LD_INT 1
16673: PPUSH
16674: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16678: LD_INT 46
16680: PPUSH
16681: LD_VAR 0 3
16685: PPUSH
16686: LD_INT 1
16688: PPUSH
16689: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16693: LD_INT 47
16695: PPUSH
16696: LD_VAR 0 3
16700: PPUSH
16701: LD_INT 1
16703: PPUSH
16704: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16708: LD_INT 1
16710: PPUSH
16711: LD_VAR 0 3
16715: PPUSH
16716: LD_INT 1
16718: PPUSH
16719: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16723: LD_INT 2
16725: PPUSH
16726: LD_VAR 0 3
16730: PPUSH
16731: LD_INT 1
16733: PPUSH
16734: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16738: LD_INT 11
16740: PPUSH
16741: LD_VAR 0 3
16745: PPUSH
16746: LD_INT 1
16748: PPUSH
16749: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16753: LD_INT 0
16755: PPUSH
16756: LD_VAR 0 3
16760: PPUSH
16761: LD_INT 1
16763: PPUSH
16764: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16768: LD_INT 2
16770: PPUSH
16771: LD_VAR 0 3
16775: PPUSH
16776: LD_INT 1
16778: PPUSH
16779: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16783: LD_INT 4
16785: PPUSH
16786: LD_VAR 0 3
16790: PPUSH
16791: LD_INT 1
16793: PPUSH
16794: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16798: LD_INT 6
16800: PPUSH
16801: LD_VAR 0 3
16805: PPUSH
16806: LD_INT 1
16808: PPUSH
16809: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16813: LD_INT 29
16815: PPUSH
16816: LD_VAR 0 3
16820: PPUSH
16821: LD_INT 1
16823: PPUSH
16824: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16828: LD_INT 31
16830: PPUSH
16831: LD_VAR 0 3
16835: PPUSH
16836: LD_INT 1
16838: PPUSH
16839: CALL_OW 324
// end ; 3 :
16843: GO 20391
16845: LD_INT 3
16847: DOUBLE
16848: EQUAL
16849: IFTRUE 16853
16851: GO 17306
16853: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16854: LD_INT 35
16856: PPUSH
16857: LD_VAR 0 3
16861: PPUSH
16862: LD_INT 1
16864: PPUSH
16865: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16869: LD_INT 45
16871: PPUSH
16872: LD_VAR 0 3
16876: PPUSH
16877: LD_INT 1
16879: PPUSH
16880: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16884: LD_INT 46
16886: PPUSH
16887: LD_VAR 0 3
16891: PPUSH
16892: LD_INT 1
16894: PPUSH
16895: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16899: LD_INT 47
16901: PPUSH
16902: LD_VAR 0 3
16906: PPUSH
16907: LD_INT 1
16909: PPUSH
16910: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16914: LD_INT 1
16916: PPUSH
16917: LD_VAR 0 3
16921: PPUSH
16922: LD_INT 1
16924: PPUSH
16925: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16929: LD_INT 2
16931: PPUSH
16932: LD_VAR 0 3
16936: PPUSH
16937: LD_INT 1
16939: PPUSH
16940: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16944: LD_INT 11
16946: PPUSH
16947: LD_VAR 0 3
16951: PPUSH
16952: LD_INT 1
16954: PPUSH
16955: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16959: LD_INT 48
16961: PPUSH
16962: LD_VAR 0 3
16966: PPUSH
16967: LD_INT 1
16969: PPUSH
16970: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16974: LD_INT 69
16976: PPUSH
16977: LD_VAR 0 3
16981: PPUSH
16982: LD_INT 1
16984: PPUSH
16985: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16989: LD_INT 39
16991: PPUSH
16992: LD_VAR 0 3
16996: PPUSH
16997: LD_INT 1
16999: PPUSH
17000: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17004: LD_INT 43
17006: PPUSH
17007: LD_VAR 0 3
17011: PPUSH
17012: LD_INT 1
17014: PPUSH
17015: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17019: LD_INT 51
17021: PPUSH
17022: LD_VAR 0 3
17026: PPUSH
17027: LD_INT 1
17029: PPUSH
17030: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17034: LD_INT 6
17036: PPUSH
17037: LD_VAR 0 3
17041: PPUSH
17042: LD_INT 1
17044: PPUSH
17045: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17049: LD_INT 0
17051: PPUSH
17052: LD_VAR 0 3
17056: PPUSH
17057: LD_INT 1
17059: PPUSH
17060: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17064: LD_INT 2
17066: PPUSH
17067: LD_VAR 0 3
17071: PPUSH
17072: LD_INT 1
17074: PPUSH
17075: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17079: LD_INT 3
17081: PPUSH
17082: LD_VAR 0 3
17086: PPUSH
17087: LD_INT 1
17089: PPUSH
17090: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17094: LD_INT 4
17096: PPUSH
17097: LD_VAR 0 3
17101: PPUSH
17102: LD_INT 1
17104: PPUSH
17105: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17109: LD_INT 6
17111: PPUSH
17112: LD_VAR 0 3
17116: PPUSH
17117: LD_INT 1
17119: PPUSH
17120: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17124: LD_INT 7
17126: PPUSH
17127: LD_VAR 0 3
17131: PPUSH
17132: LD_INT 1
17134: PPUSH
17135: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17139: LD_INT 8
17141: PPUSH
17142: LD_VAR 0 3
17146: PPUSH
17147: LD_INT 1
17149: PPUSH
17150: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17154: LD_INT 10
17156: PPUSH
17157: LD_VAR 0 3
17161: PPUSH
17162: LD_INT 1
17164: PPUSH
17165: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17169: LD_INT 15
17171: PPUSH
17172: LD_VAR 0 3
17176: PPUSH
17177: LD_INT 1
17179: PPUSH
17180: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17184: LD_INT 16
17186: PPUSH
17187: LD_VAR 0 3
17191: PPUSH
17192: LD_INT 1
17194: PPUSH
17195: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17199: LD_INT 17
17201: PPUSH
17202: LD_VAR 0 3
17206: PPUSH
17207: LD_INT 1
17209: PPUSH
17210: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17214: LD_INT 20
17216: PPUSH
17217: LD_VAR 0 3
17221: PPUSH
17222: LD_INT 1
17224: PPUSH
17225: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17229: LD_INT 26
17231: PPUSH
17232: LD_VAR 0 3
17236: PPUSH
17237: LD_INT 1
17239: PPUSH
17240: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17244: LD_INT 27
17246: PPUSH
17247: LD_VAR 0 3
17251: PPUSH
17252: LD_INT 1
17254: PPUSH
17255: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17259: LD_INT 29
17261: PPUSH
17262: LD_VAR 0 3
17266: PPUSH
17267: LD_INT 1
17269: PPUSH
17270: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17274: LD_INT 31
17276: PPUSH
17277: LD_VAR 0 3
17281: PPUSH
17282: LD_INT 1
17284: PPUSH
17285: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17289: LD_INT 32
17291: PPUSH
17292: LD_VAR 0 3
17296: PPUSH
17297: LD_INT 1
17299: PPUSH
17300: CALL_OW 324
// end ; 4 :
17304: GO 20391
17306: LD_INT 4
17308: DOUBLE
17309: EQUAL
17310: IFTRUE 17314
17312: GO 18262
17314: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17315: LD_INT 35
17317: PPUSH
17318: LD_VAR 0 3
17322: PPUSH
17323: LD_INT 1
17325: PPUSH
17326: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17330: LD_INT 45
17332: PPUSH
17333: LD_VAR 0 3
17337: PPUSH
17338: LD_INT 1
17340: PPUSH
17341: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17345: LD_INT 46
17347: PPUSH
17348: LD_VAR 0 3
17352: PPUSH
17353: LD_INT 1
17355: PPUSH
17356: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17360: LD_INT 47
17362: PPUSH
17363: LD_VAR 0 3
17367: PPUSH
17368: LD_INT 1
17370: PPUSH
17371: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17375: LD_INT 1
17377: PPUSH
17378: LD_VAR 0 3
17382: PPUSH
17383: LD_INT 1
17385: PPUSH
17386: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17390: LD_INT 2
17392: PPUSH
17393: LD_VAR 0 3
17397: PPUSH
17398: LD_INT 1
17400: PPUSH
17401: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17405: LD_INT 11
17407: PPUSH
17408: LD_VAR 0 3
17412: PPUSH
17413: LD_INT 1
17415: PPUSH
17416: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17420: LD_INT 20
17422: PPUSH
17423: LD_VAR 0 3
17427: PPUSH
17428: LD_INT 1
17430: PPUSH
17431: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17435: LD_INT 48
17437: PPUSH
17438: LD_VAR 0 3
17442: PPUSH
17443: LD_INT 1
17445: PPUSH
17446: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17450: LD_INT 49
17452: PPUSH
17453: LD_VAR 0 3
17457: PPUSH
17458: LD_INT 1
17460: PPUSH
17461: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17465: LD_INT 69
17467: PPUSH
17468: LD_VAR 0 3
17472: PPUSH
17473: LD_INT 1
17475: PPUSH
17476: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17480: LD_INT 39
17482: PPUSH
17483: LD_VAR 0 3
17487: PPUSH
17488: LD_INT 1
17490: PPUSH
17491: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17495: LD_INT 34
17497: PPUSH
17498: LD_VAR 0 3
17502: PPUSH
17503: LD_INT 1
17505: PPUSH
17506: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17510: LD_INT 42
17512: PPUSH
17513: LD_VAR 0 3
17517: PPUSH
17518: LD_INT 1
17520: PPUSH
17521: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17525: LD_INT 44
17527: PPUSH
17528: LD_VAR 0 3
17532: PPUSH
17533: LD_INT 1
17535: PPUSH
17536: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17540: LD_INT 41
17542: PPUSH
17543: LD_VAR 0 3
17547: PPUSH
17548: LD_INT 1
17550: PPUSH
17551: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17555: LD_INT 43
17557: PPUSH
17558: LD_VAR 0 3
17562: PPUSH
17563: LD_INT 1
17565: PPUSH
17566: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17570: LD_INT 70
17572: PPUSH
17573: LD_VAR 0 3
17577: PPUSH
17578: LD_INT 1
17580: PPUSH
17581: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17585: LD_INT 51
17587: PPUSH
17588: LD_VAR 0 3
17592: PPUSH
17593: LD_INT 1
17595: PPUSH
17596: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17600: LD_INT 52
17602: PPUSH
17603: LD_VAR 0 3
17607: PPUSH
17608: LD_INT 1
17610: PPUSH
17611: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17615: LD_INT 6
17617: PPUSH
17618: LD_VAR 0 3
17622: PPUSH
17623: LD_INT 1
17625: PPUSH
17626: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17630: LD_INT 15
17632: PPUSH
17633: LD_VAR 0 3
17637: PPUSH
17638: LD_INT 1
17640: PPUSH
17641: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17645: LD_INT 7
17647: PPUSH
17648: LD_VAR 0 3
17652: PPUSH
17653: LD_INT 1
17655: PPUSH
17656: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17660: LD_INT 12
17662: PPUSH
17663: LD_VAR 0 3
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17675: LD_INT 18
17677: PPUSH
17678: LD_VAR 0 3
17682: PPUSH
17683: LD_INT 1
17685: PPUSH
17686: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17690: LD_INT 60
17692: PPUSH
17693: LD_VAR 0 3
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17705: LD_INT 9
17707: PPUSH
17708: LD_VAR 0 3
17712: PPUSH
17713: LD_INT 1
17715: PPUSH
17716: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17720: LD_INT 30
17722: PPUSH
17723: LD_VAR 0 3
17727: PPUSH
17728: LD_INT 1
17730: PPUSH
17731: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17735: LD_INT 37
17737: PPUSH
17738: LD_VAR 0 3
17742: PPUSH
17743: LD_INT 1
17745: PPUSH
17746: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17750: LD_INT 5
17752: PPUSH
17753: LD_VAR 0 3
17757: PPUSH
17758: LD_INT 1
17760: PPUSH
17761: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17765: LD_INT 66
17767: PPUSH
17768: LD_VAR 0 3
17772: PPUSH
17773: LD_INT 1
17775: PPUSH
17776: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17780: LD_INT 21
17782: PPUSH
17783: LD_VAR 0 3
17787: PPUSH
17788: LD_INT 1
17790: PPUSH
17791: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17795: LD_INT 22
17797: PPUSH
17798: LD_VAR 0 3
17802: PPUSH
17803: LD_INT 1
17805: PPUSH
17806: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17810: LD_INT 54
17812: PPUSH
17813: LD_VAR 0 3
17817: PPUSH
17818: LD_INT 1
17820: PPUSH
17821: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17825: LD_INT 0
17827: PPUSH
17828: LD_VAR 0 3
17832: PPUSH
17833: LD_INT 1
17835: PPUSH
17836: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17840: LD_INT 1
17842: PPUSH
17843: LD_VAR 0 3
17847: PPUSH
17848: LD_INT 1
17850: PPUSH
17851: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17855: LD_INT 2
17857: PPUSH
17858: LD_VAR 0 3
17862: PPUSH
17863: LD_INT 1
17865: PPUSH
17866: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17870: LD_INT 3
17872: PPUSH
17873: LD_VAR 0 3
17877: PPUSH
17878: LD_INT 1
17880: PPUSH
17881: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17885: LD_INT 4
17887: PPUSH
17888: LD_VAR 0 3
17892: PPUSH
17893: LD_INT 1
17895: PPUSH
17896: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17900: LD_INT 5
17902: PPUSH
17903: LD_VAR 0 3
17907: PPUSH
17908: LD_INT 1
17910: PPUSH
17911: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17915: LD_INT 6
17917: PPUSH
17918: LD_VAR 0 3
17922: PPUSH
17923: LD_INT 1
17925: PPUSH
17926: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17930: LD_INT 7
17932: PPUSH
17933: LD_VAR 0 3
17937: PPUSH
17938: LD_INT 1
17940: PPUSH
17941: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17945: LD_INT 8
17947: PPUSH
17948: LD_VAR 0 3
17952: PPUSH
17953: LD_INT 1
17955: PPUSH
17956: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17960: LD_INT 10
17962: PPUSH
17963: LD_VAR 0 3
17967: PPUSH
17968: LD_INT 1
17970: PPUSH
17971: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17975: LD_INT 11
17977: PPUSH
17978: LD_VAR 0 3
17982: PPUSH
17983: LD_INT 1
17985: PPUSH
17986: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17990: LD_INT 12
17992: PPUSH
17993: LD_VAR 0 3
17997: PPUSH
17998: LD_INT 1
18000: PPUSH
18001: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18005: LD_INT 13
18007: PPUSH
18008: LD_VAR 0 3
18012: PPUSH
18013: LD_INT 1
18015: PPUSH
18016: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18020: LD_INT 14
18022: PPUSH
18023: LD_VAR 0 3
18027: PPUSH
18028: LD_INT 1
18030: PPUSH
18031: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18035: LD_INT 15
18037: PPUSH
18038: LD_VAR 0 3
18042: PPUSH
18043: LD_INT 1
18045: PPUSH
18046: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18050: LD_INT 16
18052: PPUSH
18053: LD_VAR 0 3
18057: PPUSH
18058: LD_INT 1
18060: PPUSH
18061: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18065: LD_INT 17
18067: PPUSH
18068: LD_VAR 0 3
18072: PPUSH
18073: LD_INT 1
18075: PPUSH
18076: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18080: LD_INT 19
18082: PPUSH
18083: LD_VAR 0 3
18087: PPUSH
18088: LD_INT 1
18090: PPUSH
18091: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18095: LD_INT 20
18097: PPUSH
18098: LD_VAR 0 3
18102: PPUSH
18103: LD_INT 1
18105: PPUSH
18106: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18110: LD_INT 21
18112: PPUSH
18113: LD_VAR 0 3
18117: PPUSH
18118: LD_INT 1
18120: PPUSH
18121: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18125: LD_INT 23
18127: PPUSH
18128: LD_VAR 0 3
18132: PPUSH
18133: LD_INT 1
18135: PPUSH
18136: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18140: LD_INT 26
18142: PPUSH
18143: LD_VAR 0 3
18147: PPUSH
18148: LD_INT 1
18150: PPUSH
18151: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18155: LD_INT 27
18157: PPUSH
18158: LD_VAR 0 3
18162: PPUSH
18163: LD_INT 1
18165: PPUSH
18166: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18170: LD_INT 28
18172: PPUSH
18173: LD_VAR 0 3
18177: PPUSH
18178: LD_INT 1
18180: PPUSH
18181: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18185: LD_INT 29
18187: PPUSH
18188: LD_VAR 0 3
18192: PPUSH
18193: LD_INT 1
18195: PPUSH
18196: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18200: LD_INT 30
18202: PPUSH
18203: LD_VAR 0 3
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18215: LD_INT 31
18217: PPUSH
18218: LD_VAR 0 3
18222: PPUSH
18223: LD_INT 1
18225: PPUSH
18226: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18230: LD_INT 32
18232: PPUSH
18233: LD_VAR 0 3
18237: PPUSH
18238: LD_INT 1
18240: PPUSH
18241: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18245: LD_INT 36
18247: PPUSH
18248: LD_VAR 0 3
18252: PPUSH
18253: LD_INT 1
18255: PPUSH
18256: CALL_OW 324
// end ; 5 :
18260: GO 20391
18262: LD_INT 5
18264: DOUBLE
18265: EQUAL
18266: IFTRUE 18270
18268: GO 19383
18270: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18271: LD_INT 35
18273: PPUSH
18274: LD_VAR 0 3
18278: PPUSH
18279: LD_INT 1
18281: PPUSH
18282: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18286: LD_INT 45
18288: PPUSH
18289: LD_VAR 0 3
18293: PPUSH
18294: LD_INT 1
18296: PPUSH
18297: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18301: LD_INT 46
18303: PPUSH
18304: LD_VAR 0 3
18308: PPUSH
18309: LD_INT 1
18311: PPUSH
18312: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18316: LD_INT 47
18318: PPUSH
18319: LD_VAR 0 3
18323: PPUSH
18324: LD_INT 1
18326: PPUSH
18327: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18331: LD_INT 1
18333: PPUSH
18334: LD_VAR 0 3
18338: PPUSH
18339: LD_INT 1
18341: PPUSH
18342: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18346: LD_INT 2
18348: PPUSH
18349: LD_VAR 0 3
18353: PPUSH
18354: LD_INT 1
18356: PPUSH
18357: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18361: LD_INT 11
18363: PPUSH
18364: LD_VAR 0 3
18368: PPUSH
18369: LD_INT 1
18371: PPUSH
18372: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18376: LD_INT 20
18378: PPUSH
18379: LD_VAR 0 3
18383: PPUSH
18384: LD_INT 1
18386: PPUSH
18387: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18391: LD_INT 48
18393: PPUSH
18394: LD_VAR 0 3
18398: PPUSH
18399: LD_INT 1
18401: PPUSH
18402: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18406: LD_INT 49
18408: PPUSH
18409: LD_VAR 0 3
18413: PPUSH
18414: LD_INT 1
18416: PPUSH
18417: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18421: LD_INT 69
18423: PPUSH
18424: LD_VAR 0 3
18428: PPUSH
18429: LD_INT 1
18431: PPUSH
18432: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18436: LD_INT 39
18438: PPUSH
18439: LD_VAR 0 3
18443: PPUSH
18444: LD_INT 1
18446: PPUSH
18447: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18451: LD_INT 34
18453: PPUSH
18454: LD_VAR 0 3
18458: PPUSH
18459: LD_INT 1
18461: PPUSH
18462: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18466: LD_INT 42
18468: PPUSH
18469: LD_VAR 0 3
18473: PPUSH
18474: LD_INT 1
18476: PPUSH
18477: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18481: LD_INT 44
18483: PPUSH
18484: LD_VAR 0 3
18488: PPUSH
18489: LD_INT 1
18491: PPUSH
18492: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18496: LD_INT 41
18498: PPUSH
18499: LD_VAR 0 3
18503: PPUSH
18504: LD_INT 1
18506: PPUSH
18507: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18511: LD_INT 40
18513: PPUSH
18514: LD_VAR 0 3
18518: PPUSH
18519: LD_INT 1
18521: PPUSH
18522: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18526: LD_INT 43
18528: PPUSH
18529: LD_VAR 0 3
18533: PPUSH
18534: LD_INT 1
18536: PPUSH
18537: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18541: LD_INT 70
18543: PPUSH
18544: LD_VAR 0 3
18548: PPUSH
18549: LD_INT 1
18551: PPUSH
18552: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18556: LD_INT 51
18558: PPUSH
18559: LD_VAR 0 3
18563: PPUSH
18564: LD_INT 1
18566: PPUSH
18567: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18571: LD_INT 52
18573: PPUSH
18574: LD_VAR 0 3
18578: PPUSH
18579: LD_INT 1
18581: PPUSH
18582: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18586: LD_INT 6
18588: PPUSH
18589: LD_VAR 0 3
18593: PPUSH
18594: LD_INT 1
18596: PPUSH
18597: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18601: LD_INT 15
18603: PPUSH
18604: LD_VAR 0 3
18608: PPUSH
18609: LD_INT 1
18611: PPUSH
18612: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18616: LD_INT 7
18618: PPUSH
18619: LD_VAR 0 3
18623: PPUSH
18624: LD_INT 1
18626: PPUSH
18627: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18631: LD_INT 12
18633: PPUSH
18634: LD_VAR 0 3
18638: PPUSH
18639: LD_INT 1
18641: PPUSH
18642: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
18646: LD_INT 17
18648: PPUSH
18649: LD_VAR 0 3
18653: PPUSH
18654: LD_INT 1
18656: PPUSH
18657: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18661: LD_INT 18
18663: PPUSH
18664: LD_VAR 0 3
18668: PPUSH
18669: LD_INT 1
18671: PPUSH
18672: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18676: LD_INT 60
18678: PPUSH
18679: LD_VAR 0 3
18683: PPUSH
18684: LD_INT 1
18686: PPUSH
18687: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18691: LD_INT 32
18693: PPUSH
18694: LD_VAR 0 3
18698: PPUSH
18699: LD_INT 1
18701: PPUSH
18702: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18706: LD_INT 9
18708: PPUSH
18709: LD_VAR 0 3
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18721: LD_INT 57
18723: PPUSH
18724: LD_VAR 0 3
18728: PPUSH
18729: LD_INT 1
18731: PPUSH
18732: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18736: LD_INT 30
18738: PPUSH
18739: LD_VAR 0 3
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18751: LD_INT 37
18753: PPUSH
18754: LD_VAR 0 3
18758: PPUSH
18759: LD_INT 1
18761: PPUSH
18762: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18766: LD_INT 63
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: LD_INT 1
18776: PPUSH
18777: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18781: LD_INT 3
18783: PPUSH
18784: LD_VAR 0 3
18788: PPUSH
18789: LD_INT 1
18791: PPUSH
18792: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18796: LD_INT 4
18798: PPUSH
18799: LD_VAR 0 3
18803: PPUSH
18804: LD_INT 1
18806: PPUSH
18807: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18811: LD_INT 5
18813: PPUSH
18814: LD_VAR 0 3
18818: PPUSH
18819: LD_INT 1
18821: PPUSH
18822: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18826: LD_INT 66
18828: PPUSH
18829: LD_VAR 0 3
18833: PPUSH
18834: LD_INT 1
18836: PPUSH
18837: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18841: LD_INT 21
18843: PPUSH
18844: LD_VAR 0 3
18848: PPUSH
18849: LD_INT 1
18851: PPUSH
18852: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18856: LD_INT 22
18858: PPUSH
18859: LD_VAR 0 3
18863: PPUSH
18864: LD_INT 1
18866: PPUSH
18867: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18871: LD_INT 19
18873: PPUSH
18874: LD_VAR 0 3
18878: PPUSH
18879: LD_INT 1
18881: PPUSH
18882: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18886: LD_INT 54
18888: PPUSH
18889: LD_VAR 0 3
18893: PPUSH
18894: LD_INT 1
18896: PPUSH
18897: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18901: LD_INT 55
18903: PPUSH
18904: LD_VAR 0 3
18908: PPUSH
18909: LD_INT 1
18911: PPUSH
18912: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18916: LD_INT 0
18918: PPUSH
18919: LD_VAR 0 3
18923: PPUSH
18924: LD_INT 1
18926: PPUSH
18927: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18931: LD_INT 1
18933: PPUSH
18934: LD_VAR 0 3
18938: PPUSH
18939: LD_INT 1
18941: PPUSH
18942: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18946: LD_INT 2
18948: PPUSH
18949: LD_VAR 0 3
18953: PPUSH
18954: LD_INT 1
18956: PPUSH
18957: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18961: LD_INT 3
18963: PPUSH
18964: LD_VAR 0 3
18968: PPUSH
18969: LD_INT 1
18971: PPUSH
18972: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18976: LD_INT 4
18978: PPUSH
18979: LD_VAR 0 3
18983: PPUSH
18984: LD_INT 1
18986: PPUSH
18987: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18991: LD_INT 5
18993: PPUSH
18994: LD_VAR 0 3
18998: PPUSH
18999: LD_INT 1
19001: PPUSH
19002: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19006: LD_INT 6
19008: PPUSH
19009: LD_VAR 0 3
19013: PPUSH
19014: LD_INT 1
19016: PPUSH
19017: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
19021: LD_INT 7
19023: PPUSH
19024: LD_VAR 0 3
19028: PPUSH
19029: LD_INT 1
19031: PPUSH
19032: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
19036: LD_INT 8
19038: PPUSH
19039: LD_VAR 0 3
19043: PPUSH
19044: LD_INT 1
19046: PPUSH
19047: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
19051: LD_INT 10
19053: PPUSH
19054: LD_VAR 0 3
19058: PPUSH
19059: LD_INT 1
19061: PPUSH
19062: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
19066: LD_INT 11
19068: PPUSH
19069: LD_VAR 0 3
19073: PPUSH
19074: LD_INT 1
19076: PPUSH
19077: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
19081: LD_INT 12
19083: PPUSH
19084: LD_VAR 0 3
19088: PPUSH
19089: LD_INT 1
19091: PPUSH
19092: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
19096: LD_INT 13
19098: PPUSH
19099: LD_VAR 0 3
19103: PPUSH
19104: LD_INT 1
19106: PPUSH
19107: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
19111: LD_INT 14
19113: PPUSH
19114: LD_VAR 0 3
19118: PPUSH
19119: LD_INT 1
19121: PPUSH
19122: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
19126: LD_INT 15
19128: PPUSH
19129: LD_VAR 0 3
19133: PPUSH
19134: LD_INT 1
19136: PPUSH
19137: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
19141: LD_INT 16
19143: PPUSH
19144: LD_VAR 0 3
19148: PPUSH
19149: LD_INT 1
19151: PPUSH
19152: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
19156: LD_INT 17
19158: PPUSH
19159: LD_VAR 0 3
19163: PPUSH
19164: LD_INT 1
19166: PPUSH
19167: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
19171: LD_INT 18
19173: PPUSH
19174: LD_VAR 0 3
19178: PPUSH
19179: LD_INT 1
19181: PPUSH
19182: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
19186: LD_INT 19
19188: PPUSH
19189: LD_VAR 0 3
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
19201: LD_INT 20
19203: PPUSH
19204: LD_VAR 0 3
19208: PPUSH
19209: LD_INT 1
19211: PPUSH
19212: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
19216: LD_INT 21
19218: PPUSH
19219: LD_VAR 0 3
19223: PPUSH
19224: LD_INT 1
19226: PPUSH
19227: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
19231: LD_INT 23
19233: PPUSH
19234: LD_VAR 0 3
19238: PPUSH
19239: LD_INT 1
19241: PPUSH
19242: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
19246: LD_INT 26
19248: PPUSH
19249: LD_VAR 0 3
19253: PPUSH
19254: LD_INT 1
19256: PPUSH
19257: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
19261: LD_INT 27
19263: PPUSH
19264: LD_VAR 0 3
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
19276: LD_INT 28
19278: PPUSH
19279: LD_VAR 0 3
19283: PPUSH
19284: LD_INT 1
19286: PPUSH
19287: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19291: LD_INT 29
19293: PPUSH
19294: LD_VAR 0 3
19298: PPUSH
19299: LD_INT 1
19301: PPUSH
19302: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
19306: LD_INT 30
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: LD_INT 1
19316: PPUSH
19317: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19321: LD_INT 31
19323: PPUSH
19324: LD_VAR 0 3
19328: PPUSH
19329: LD_INT 1
19331: PPUSH
19332: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
19336: LD_INT 32
19338: PPUSH
19339: LD_VAR 0 3
19343: PPUSH
19344: LD_INT 1
19346: PPUSH
19347: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
19351: LD_INT 33
19353: PPUSH
19354: LD_VAR 0 3
19358: PPUSH
19359: LD_INT 1
19361: PPUSH
19362: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
19366: LD_INT 36
19368: PPUSH
19369: LD_VAR 0 3
19373: PPUSH
19374: LD_INT 1
19376: PPUSH
19377: CALL_OW 324
// end ; 6 :
19381: GO 20391
19383: LD_INT 6
19385: DOUBLE
19386: EQUAL
19387: IFTRUE 19391
19389: GO 20316
19391: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19392: LD_INT 35
19394: PPUSH
19395: LD_VAR 0 3
19399: PPUSH
19400: LD_INT 1
19402: PPUSH
19403: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19407: LD_INT 45
19409: PPUSH
19410: LD_VAR 0 3
19414: PPUSH
19415: LD_INT 1
19417: PPUSH
19418: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19422: LD_INT 46
19424: PPUSH
19425: LD_VAR 0 3
19429: PPUSH
19430: LD_INT 1
19432: PPUSH
19433: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19437: LD_INT 47
19439: PPUSH
19440: LD_VAR 0 3
19444: PPUSH
19445: LD_INT 1
19447: PPUSH
19448: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19452: LD_INT 1
19454: PPUSH
19455: LD_VAR 0 3
19459: PPUSH
19460: LD_INT 1
19462: PPUSH
19463: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19467: LD_INT 2
19469: PPUSH
19470: LD_VAR 0 3
19474: PPUSH
19475: LD_INT 1
19477: PPUSH
19478: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19482: LD_INT 11
19484: PPUSH
19485: LD_VAR 0 3
19489: PPUSH
19490: LD_INT 1
19492: PPUSH
19493: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19497: LD_INT 20
19499: PPUSH
19500: LD_VAR 0 3
19504: PPUSH
19505: LD_INT 1
19507: PPUSH
19508: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19512: LD_INT 48
19514: PPUSH
19515: LD_VAR 0 3
19519: PPUSH
19520: LD_INT 1
19522: PPUSH
19523: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19527: LD_INT 49
19529: PPUSH
19530: LD_VAR 0 3
19534: PPUSH
19535: LD_INT 1
19537: PPUSH
19538: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
19542: LD_INT 50
19544: PPUSH
19545: LD_VAR 0 3
19549: PPUSH
19550: LD_INT 1
19552: PPUSH
19553: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19557: LD_INT 69
19559: PPUSH
19560: LD_VAR 0 3
19564: PPUSH
19565: LD_INT 1
19567: PPUSH
19568: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19572: LD_INT 39
19574: PPUSH
19575: LD_VAR 0 3
19579: PPUSH
19580: LD_INT 1
19582: PPUSH
19583: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19587: LD_INT 34
19589: PPUSH
19590: LD_VAR 0 3
19594: PPUSH
19595: LD_INT 1
19597: PPUSH
19598: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
19602: LD_INT 42
19604: PPUSH
19605: LD_VAR 0 3
19609: PPUSH
19610: LD_INT 1
19612: PPUSH
19613: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
19617: LD_INT 44
19619: PPUSH
19620: LD_VAR 0 3
19624: PPUSH
19625: LD_INT 1
19627: PPUSH
19628: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
19632: LD_INT 41
19634: PPUSH
19635: LD_VAR 0 3
19639: PPUSH
19640: LD_INT 1
19642: PPUSH
19643: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
19647: LD_INT 13
19649: PPUSH
19650: LD_VAR 0 3
19654: PPUSH
19655: LD_INT 1
19657: PPUSH
19658: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
19662: LD_INT 40
19664: PPUSH
19665: LD_VAR 0 3
19669: PPUSH
19670: LD_INT 1
19672: PPUSH
19673: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19677: LD_INT 43
19679: PPUSH
19680: LD_VAR 0 3
19684: PPUSH
19685: LD_INT 1
19687: PPUSH
19688: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19692: LD_INT 70
19694: PPUSH
19695: LD_VAR 0 3
19699: PPUSH
19700: LD_INT 1
19702: PPUSH
19703: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
19707: LD_INT 23
19709: PPUSH
19710: LD_VAR 0 3
19714: PPUSH
19715: LD_INT 1
19717: PPUSH
19718: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19722: LD_INT 51
19724: PPUSH
19725: LD_VAR 0 3
19729: PPUSH
19730: LD_INT 1
19732: PPUSH
19733: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19737: LD_INT 52
19739: PPUSH
19740: LD_VAR 0 3
19744: PPUSH
19745: LD_INT 1
19747: PPUSH
19748: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19752: LD_INT 6
19754: PPUSH
19755: LD_VAR 0 3
19759: PPUSH
19760: LD_INT 1
19762: PPUSH
19763: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19767: LD_INT 15
19769: PPUSH
19770: LD_VAR 0 3
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19782: LD_INT 7
19784: PPUSH
19785: LD_VAR 0 3
19789: PPUSH
19790: LD_INT 1
19792: PPUSH
19793: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19797: LD_INT 12
19799: PPUSH
19800: LD_VAR 0 3
19804: PPUSH
19805: LD_INT 1
19807: PPUSH
19808: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19812: LD_INT 10
19814: PPUSH
19815: LD_VAR 0 3
19819: PPUSH
19820: LD_INT 1
19822: PPUSH
19823: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19827: LD_INT 17
19829: PPUSH
19830: LD_VAR 0 3
19834: PPUSH
19835: LD_INT 1
19837: PPUSH
19838: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19842: LD_INT 18
19844: PPUSH
19845: LD_VAR 0 3
19849: PPUSH
19850: LD_INT 1
19852: PPUSH
19853: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19857: LD_INT 60
19859: PPUSH
19860: LD_VAR 0 3
19864: PPUSH
19865: LD_INT 1
19867: PPUSH
19868: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19872: LD_INT 61
19874: PPUSH
19875: LD_VAR 0 3
19879: PPUSH
19880: LD_INT 1
19882: PPUSH
19883: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19887: LD_INT 32
19889: PPUSH
19890: LD_VAR 0 3
19894: PPUSH
19895: LD_INT 1
19897: PPUSH
19898: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19902: LD_INT 27
19904: PPUSH
19905: LD_VAR 0 3
19909: PPUSH
19910: LD_INT 1
19912: PPUSH
19913: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19917: LD_INT 36
19919: PPUSH
19920: LD_VAR 0 3
19924: PPUSH
19925: LD_INT 1
19927: PPUSH
19928: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19932: LD_INT 33
19934: PPUSH
19935: LD_VAR 0 3
19939: PPUSH
19940: LD_INT 1
19942: PPUSH
19943: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19947: LD_INT 9
19949: PPUSH
19950: LD_VAR 0 3
19954: PPUSH
19955: LD_INT 1
19957: PPUSH
19958: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19962: LD_INT 38
19964: PPUSH
19965: LD_VAR 0 3
19969: PPUSH
19970: LD_INT 1
19972: PPUSH
19973: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19977: LD_INT 57
19979: PPUSH
19980: LD_VAR 0 3
19984: PPUSH
19985: LD_INT 1
19987: PPUSH
19988: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19992: LD_INT 58
19994: PPUSH
19995: LD_VAR 0 3
19999: PPUSH
20000: LD_INT 1
20002: PPUSH
20003: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
20007: LD_INT 28
20009: PPUSH
20010: LD_VAR 0 3
20014: PPUSH
20015: LD_INT 1
20017: PPUSH
20018: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
20022: LD_INT 29
20024: PPUSH
20025: LD_VAR 0 3
20029: PPUSH
20030: LD_INT 1
20032: PPUSH
20033: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20037: LD_INT 30
20039: PPUSH
20040: LD_VAR 0 3
20044: PPUSH
20045: LD_INT 1
20047: PPUSH
20048: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20052: LD_INT 37
20054: PPUSH
20055: LD_VAR 0 3
20059: PPUSH
20060: LD_INT 1
20062: PPUSH
20063: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
20067: LD_INT 63
20069: PPUSH
20070: LD_VAR 0 3
20074: PPUSH
20075: LD_INT 1
20077: PPUSH
20078: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
20082: LD_INT 64
20084: PPUSH
20085: LD_VAR 0 3
20089: PPUSH
20090: LD_INT 1
20092: PPUSH
20093: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
20097: LD_INT 3
20099: PPUSH
20100: LD_VAR 0 3
20104: PPUSH
20105: LD_INT 1
20107: PPUSH
20108: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
20112: LD_INT 4
20114: PPUSH
20115: LD_VAR 0 3
20119: PPUSH
20120: LD_INT 1
20122: PPUSH
20123: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20127: LD_INT 5
20129: PPUSH
20130: LD_VAR 0 3
20134: PPUSH
20135: LD_INT 1
20137: PPUSH
20138: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
20142: LD_INT 8
20144: PPUSH
20145: LD_VAR 0 3
20149: PPUSH
20150: LD_INT 1
20152: PPUSH
20153: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20157: LD_INT 66
20159: PPUSH
20160: LD_VAR 0 3
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
20172: LD_INT 67
20174: PPUSH
20175: LD_VAR 0 3
20179: PPUSH
20180: LD_INT 1
20182: PPUSH
20183: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20187: LD_INT 21
20189: PPUSH
20190: LD_VAR 0 3
20194: PPUSH
20195: LD_INT 1
20197: PPUSH
20198: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20202: LD_INT 22
20204: PPUSH
20205: LD_VAR 0 3
20209: PPUSH
20210: LD_INT 1
20212: PPUSH
20213: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
20217: LD_INT 19
20219: PPUSH
20220: LD_VAR 0 3
20224: PPUSH
20225: LD_INT 1
20227: PPUSH
20228: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
20232: LD_INT 26
20234: PPUSH
20235: LD_VAR 0 3
20239: PPUSH
20240: LD_INT 1
20242: PPUSH
20243: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20247: LD_INT 54
20249: PPUSH
20250: LD_VAR 0 3
20254: PPUSH
20255: LD_INT 1
20257: PPUSH
20258: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
20262: LD_INT 55
20264: PPUSH
20265: LD_VAR 0 3
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: CALL_OW 322
// for i = 0 to 39 do
20277: LD_ADDR_VAR 0 4
20281: PUSH
20282: DOUBLE
20283: LD_INT 0
20285: DEC
20286: ST_TO_ADDR
20287: LD_INT 39
20289: PUSH
20290: FOR_TO
20291: IFFALSE 20312
// SetRestrict ( i , side , true ) ;
20293: LD_VAR 0 4
20297: PPUSH
20298: LD_VAR 0 3
20302: PPUSH
20303: LD_INT 1
20305: PPUSH
20306: CALL_OW 324
20310: GO 20290
20312: POP
20313: POP
// end ; else
20314: GO 20391
20316: POP
// begin for i = 1 to 73 do
20317: LD_ADDR_VAR 0 4
20321: PUSH
20322: DOUBLE
20323: LD_INT 1
20325: DEC
20326: ST_TO_ADDR
20327: LD_INT 73
20329: PUSH
20330: FOR_TO
20331: IFFALSE 20352
// SetTech ( i , side , state_enabled ) ;
20333: LD_VAR 0 4
20337: PPUSH
20338: LD_VAR 0 3
20342: PPUSH
20343: LD_INT 1
20345: PPUSH
20346: CALL_OW 322
20350: GO 20330
20352: POP
20353: POP
// for i = 0 to 39 do
20354: LD_ADDR_VAR 0 4
20358: PUSH
20359: DOUBLE
20360: LD_INT 0
20362: DEC
20363: ST_TO_ADDR
20364: LD_INT 39
20366: PUSH
20367: FOR_TO
20368: IFFALSE 20389
// SetRestrict ( i , side , true ) ;
20370: LD_VAR 0 4
20374: PPUSH
20375: LD_VAR 0 3
20379: PPUSH
20380: LD_INT 1
20382: PPUSH
20383: CALL_OW 324
20387: GO 20367
20389: POP
20390: POP
// end ; end ; end ;
20391: GO 16396
20393: POP
20394: POP
// end ;
20395: LD_VAR 0 2
20399: RET
