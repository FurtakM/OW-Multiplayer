// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 344
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 0
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 0
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 344: LD_ADDR_EXP 36
 348: PUSH
 349: LD_EXP 31
 353: PUSH
 354: LD_INT 0
 356: PUSH
 357: EMPTY
 358: LIST
 359: DIFF
 360: PUSH
 361: LD_INT 1
 363: GREATER
 364: ST_TO_ADDR
// if Multiplayer then
 365: LD_OWVAR 4
 369: IFFALSE 576
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 371: LD_ADDR_EXP 1
 375: PUSH
 376: LD_INT 0
 378: PPUSH
 379: CALL_OW 426
 383: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 384: LD_ADDR_EXP 2
 388: PUSH
 389: LD_INT 1
 391: PPUSH
 392: CALL_OW 426
 396: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 397: LD_ADDR_EXP 3
 401: PUSH
 402: LD_INT 2
 404: PPUSH
 405: CALL_OW 426
 409: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 410: LD_ADDR_EXP 4
 414: PUSH
 415: LD_INT 3
 417: PPUSH
 418: CALL_OW 426
 422: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 423: LD_ADDR_EXP 5
 427: PUSH
 428: LD_INT 4
 430: PPUSH
 431: CALL_OW 426
 435: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 436: LD_ADDR_EXP 6
 440: PUSH
 441: LD_INT 5
 443: PPUSH
 444: CALL_OW 426
 448: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 449: LD_ADDR_EXP 7
 453: PUSH
 454: LD_INT 6
 456: PPUSH
 457: CALL_OW 426
 461: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 462: LD_ADDR_EXP 8
 466: PUSH
 467: LD_INT 10
 469: PPUSH
 470: CALL_OW 426
 474: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_INT 11
 482: PPUSH
 483: CALL_OW 426
 487: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 488: LD_ADDR_EXP 10
 492: PUSH
 493: LD_INT 12
 495: PPUSH
 496: CALL_OW 426
 500: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 501: LD_ADDR_EXP 11
 505: PUSH
 506: LD_INT 13
 508: PPUSH
 509: CALL_OW 426
 513: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 514: LD_ADDR_EXP 12
 518: PUSH
 519: LD_INT 14
 521: PPUSH
 522: CALL_OW 426
 526: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 527: LD_ADDR_EXP 13
 531: PUSH
 532: LD_INT 17
 534: PPUSH
 535: CALL_OW 426
 539: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 540: LD_ADDR_EXP 14
 544: PUSH
 545: LD_INT 20
 547: PPUSH
 548: CALL_OW 426
 552: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 553: LD_ADDR_VAR 0 3
 557: PUSH
 558: LD_INT 22
 560: PPUSH
 561: CALL_OW 426
 565: ST_TO_ADDR
// def_win_rules = 0 ;
 566: LD_ADDR_EXP 30
 570: PUSH
 571: LD_INT 0
 573: ST_TO_ADDR
// end else
 574: GO 708
// begin Randomize ;
 576: CALL_OW 10
// def_base_level := 2 ;
 580: LD_ADDR_EXP 1
 584: PUSH
 585: LD_INT 2
 587: ST_TO_ADDR
// def_amount_of_people := 2 ;
 588: LD_ADDR_EXP 2
 592: PUSH
 593: LD_INT 2
 595: ST_TO_ADDR
// def_skill_level := 1 ;
 596: LD_ADDR_EXP 3
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// def_starting_resources := 2 ;
 604: LD_ADDR_EXP 4
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_shipments_density := 50 ;
 612: LD_ADDR_EXP 5
 616: PUSH
 617: LD_INT 50
 619: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 620: LD_ADDR_EXP 6
 624: PUSH
 625: LD_INT 2
 627: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 628: LD_ADDR_EXP 7
 632: PUSH
 633: LD_INT 2
 635: ST_TO_ADDR
// def_shared_vision := 1 ;
 636: LD_ADDR_EXP 8
 640: PUSH
 641: LD_INT 1
 643: ST_TO_ADDR
// def_morale_flags := 1 ;
 644: LD_ADDR_EXP 9
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// def_siberite_detection := 1 ;
 652: LD_ADDR_EXP 10
 656: PUSH
 657: LD_INT 1
 659: ST_TO_ADDR
// def_people_respawning := 2 ;
 660: LD_ADDR_EXP 11
 664: PUSH
 665: LD_INT 2
 667: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 668: LD_ADDR_EXP 12
 672: PUSH
 673: LD_INT 3
 675: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 676: LD_ADDR_EXP 13
 680: PUSH
 681: LD_INT 2
 683: ST_TO_ADDR
// def_builduptime := 1 ;
 684: LD_ADDR_EXP 14
 688: PUSH
 689: LD_INT 1
 691: ST_TO_ADDR
// tech_level = 4 ;
 692: LD_ADDR_VAR 0 3
 696: PUSH
 697: LD_INT 4
 699: ST_TO_ADDR
// def_win_rules = 0 ;
 700: LD_ADDR_EXP 30
 704: PUSH
 705: LD_INT 0
 707: ST_TO_ADDR
// end ; if isSGUI then
 708: LD_OWVAR 83
 712: IFFALSE 720
// setMpTechs ( ) else
 714: CALL 8701 0 0
 718: GO 733
// SetMpTechLevel ( tech_level + 1 ) ;
 720: LD_VAR 0 3
 724: PUSH
 725: LD_INT 1
 727: PLUS
 728: PPUSH
 729: CALL 8848 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 733: LD_ADDR_EXP 17
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 1
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: PUSH
 752: LD_EXP 1
 756: PUSH
 757: LD_INT 1
 759: PLUS
 760: ARRAY
 761: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 762: LD_ADDR_EXP 18
 766: PUSH
 767: LD_INT 0
 769: PUSH
 770: LD_INT 0
 772: PUSH
 773: LD_INT 2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: PUSH
 781: LD_EXP 1
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: ARRAY
 790: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 791: LD_ADDR_EXP 19
 795: PUSH
 796: LD_INT 9
 798: PUSH
 799: LD_INT 12
 801: PUSH
 802: LD_INT 15
 804: PUSH
 805: LD_INT 24
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: LIST
 812: LIST
 813: PUSH
 814: LD_EXP 2
 818: PUSH
 819: LD_INT 1
 821: PLUS
 822: ARRAY
 823: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 824: LD_ADDR_EXP 20
 828: PUSH
 829: LD_INT 2
 831: PUSH
 832: LD_INT 3
 834: PUSH
 835: LD_INT 4
 837: PUSH
 838: LD_INT 5
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_EXP 3
 851: PUSH
 852: LD_INT 1
 854: PLUS
 855: ARRAY
 856: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 857: LD_ADDR_EXP 22
 861: PUSH
 862: LD_INT 0
 864: PUSH
 865: LD_INT 0
 867: PUSH
 868: LD_INT 0
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: PUSH
 876: LD_INT 30
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 50
 892: PUSH
 893: LD_INT 20
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 80
 906: PUSH
 907: LD_INT 40
 909: PUSH
 910: LD_INT 20
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_EXP 4
 928: PUSH
 929: LD_INT 1
 931: PLUS
 932: ARRAY
 933: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 934: LD_ADDR_EXP 21
 938: PUSH
 939: LD_INT 10
 941: PUSH
 942: EMPTY
 943: LIST
 944: PUSH
 945: LD_INT 7
 947: PUSH
 948: LD_INT 14
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PUSH
 955: LD_INT 6
 957: PUSH
 958: LD_INT 12
 960: PUSH
 961: LD_INT 18
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: LIST
 968: PUSH
 969: LD_INT 5
 971: PUSH
 972: LD_INT 10
 974: PUSH
 975: LD_INT 15
 977: PUSH
 978: LD_INT 20
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_EXP 4
 997: PUSH
 998: LD_INT 1
1000: PLUS
1001: ARRAY
1002: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1003: LD_ADDR_EXP 23
1007: PUSH
1008: LD_INT 150
1010: PUSH
1011: LD_EXP 5
1015: MINUS
1016: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1017: LD_ADDR_EXP 27
1021: PUSH
1022: LD_INT 0
1024: PUSH
1025: LD_INT 10500
1027: PUSH
1028: LD_INT 6300
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_EXP 11
1040: PUSH
1041: LD_INT 1
1043: PLUS
1044: ARRAY
1045: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1046: LD_ADDR_EXP 28
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: LD_INT 31500
1056: PUSH
1057: LD_INT 10500
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: PUSH
1065: LD_EXP 11
1069: PUSH
1070: LD_INT 1
1072: PLUS
1073: ARRAY
1074: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1075: LD_ADDR_EXP 25
1079: PUSH
1080: LD_INT 0
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 2
1088: PUSH
1089: LD_INT 3
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_EXP 12
1102: PUSH
1103: LD_INT 1
1105: PLUS
1106: ARRAY
1107: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1108: LD_ADDR_EXP 24
1112: PUSH
1113: LD_INT 1
1115: NEG
1116: PUSH
1117: LD_INT 350
1119: PUSH
1120: LD_INT 700
1122: PUSH
1123: LD_INT 1400
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: LD_EXP 9
1140: PUSH
1141: LD_INT 1
1143: PLUS
1144: ARRAY
1145: ST_TO_ADDR
// battle_flags_id := [ ] ;
1146: LD_ADDR_EXP 44
1150: PUSH
1151: EMPTY
1152: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1153: LD_EXP 13
1157: PUSH
1158: LD_INT 0
1160: EQUAL
1161: IFFALSE 1173
// siberite_bomb_Delay = 0 else
1163: LD_ADDR_EXP 29
1167: PUSH
1168: LD_INT 0
1170: ST_TO_ADDR
1171: GO 1195
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1173: LD_ADDR_EXP 29
1177: PUSH
1178: LD_EXP 13
1182: PUSH
1183: LD_INT 1
1185: MINUS
1186: PUSH
1187: LD_INT 21000
1189: MUL
1190: PUSH
1191: LD_INT 1
1193: PLUS
1194: ST_TO_ADDR
// end ;
1195: LD_VAR 0 1
1199: RET
// function init_map ; var i , j ; begin
1200: LD_INT 0
1202: PPUSH
1203: PPUSH
1204: PPUSH
// normal_oil_deposits_locations := [ [ 25 , 19 ] , [ 184 , 120 ] ] ;
1205: LD_ADDR_EXP 40
1209: PUSH
1210: LD_INT 25
1212: PUSH
1213: LD_INT 19
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: LD_INT 184
1222: PUSH
1223: LD_INT 120
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 121 , 27 ] , [ 88 , 112 ] ] ;
1234: LD_ADDR_EXP 41
1238: PUSH
1239: LD_INT 121
1241: PUSH
1242: LD_INT 27
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 88
1251: PUSH
1252: LD_INT 112
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 98 , 67 ] , [ 111 , 72 ] ] ;
1263: LD_ADDR_EXP 42
1267: PUSH
1268: LD_INT 98
1270: PUSH
1271: LD_INT 67
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 111
1280: PUSH
1281: LD_INT 72
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 24 , 24 ] , [ 185 , 115 ] ] ;
1292: LD_ADDR_EXP 43
1296: PUSH
1297: LD_INT 24
1299: PUSH
1300: LD_INT 24
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 185
1309: PUSH
1310: LD_INT 115
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: ST_TO_ADDR
// depot_def := [ [ 43 , 37 , 2 ] , [ 166 , 102 , 5 ] ] ;
1321: LD_ADDR_EXP 37
1325: PUSH
1326: LD_INT 43
1328: PUSH
1329: LD_INT 37
1331: PUSH
1332: LD_INT 2
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: PUSH
1340: LD_INT 166
1342: PUSH
1343: LD_INT 102
1345: PUSH
1346: LD_INT 5
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: ST_TO_ADDR
// for i in depot_def do
1358: LD_ADDR_VAR 0 2
1362: PUSH
1363: LD_EXP 37
1367: PUSH
1368: FOR_IN
1369: IFFALSE 1445
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1371: LD_ADDR_EXP 39
1375: PUSH
1376: LD_EXP 39
1380: PUSH
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PPUSH
1390: LD_VAR 0 2
1394: PUSH
1395: LD_INT 3
1397: ARRAY
1398: PPUSH
1399: LD_INT 4
1401: NEG
1402: PPUSH
1403: CALL_OW 272
1407: PUSH
1408: LD_VAR 0 2
1412: PUSH
1413: LD_INT 2
1415: ARRAY
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 3
1424: ARRAY
1425: PPUSH
1426: LD_INT 4
1428: NEG
1429: PPUSH
1430: CALL_OW 273
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: EMPTY
1440: LIST
1441: ADD
1442: ST_TO_ADDR
1443: GO 1368
1445: POP
1446: POP
// breastworks_def := [ [ [ 51 , 51 , 5 ] , [ 52 , 36 , 4 ] ] , [ [ 156 , 102 , 1 ] , [ 158 , 88 , 2 ] ] , ] ;
1447: LD_ADDR_EXP 38
1451: PUSH
1452: LD_INT 51
1454: PUSH
1455: LD_INT 51
1457: PUSH
1458: LD_INT 5
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: LD_INT 52
1468: PUSH
1469: LD_INT 36
1471: PUSH
1472: LD_INT 4
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: LIST
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 156
1486: PUSH
1487: LD_INT 102
1489: PUSH
1490: LD_INT 1
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 158
1500: PUSH
1501: LD_INT 88
1503: PUSH
1504: LD_INT 2
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// for i = 1 to Side_Positions do
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: DOUBLE
1526: LD_INT 1
1528: DEC
1529: ST_TO_ADDR
1530: LD_EXP 34
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1659
// begin if not Side_Positions [ i ] then
1538: LD_EXP 34
1542: PUSH
1543: LD_VAR 0 2
1547: ARRAY
1548: NOT
1549: IFFALSE 1553
// continue ;
1551: GO 1535
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
1553: LD_EXP 40
1557: PUSH
1558: LD_EXP 34
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: ARRAY
1569: PUSH
1570: LD_INT 1
1572: ARRAY
1573: PPUSH
1574: LD_EXP 40
1578: PUSH
1579: LD_EXP 34
1583: PUSH
1584: LD_VAR 0 2
1588: ARRAY
1589: ARRAY
1590: PUSH
1591: LD_INT 2
1593: ARRAY
1594: PPUSH
1595: LD_INT 2
1597: PPUSH
1598: CALL_OW 62
// if def_extra_oil_deposits then
1602: LD_EXP 6
1606: IFFALSE 1657
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
1608: LD_EXP 41
1612: PUSH
1613: LD_EXP 34
1617: PUSH
1618: LD_VAR 0 2
1622: ARRAY
1623: ARRAY
1624: PUSH
1625: LD_INT 1
1627: ARRAY
1628: PPUSH
1629: LD_EXP 41
1633: PUSH
1634: LD_EXP 34
1638: PUSH
1639: LD_VAR 0 2
1643: ARRAY
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: ARRAY
1649: PPUSH
1650: LD_INT 2
1652: PPUSH
1653: CALL_OW 62
// end ;
1657: GO 1535
1659: POP
1660: POP
// if def_extra_sib_deposits then
1661: LD_EXP 7
1665: IFFALSE 1812
// for i = 1 to Side_Positions do
1667: LD_ADDR_VAR 0 2
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_EXP 34
1681: PUSH
1682: FOR_TO
1683: IFFALSE 1810
// begin if not Side_Positions [ i ] then
1685: LD_EXP 34
1689: PUSH
1690: LD_VAR 0 2
1694: ARRAY
1695: NOT
1696: IFFALSE 1700
// continue ;
1698: GO 1682
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
1700: LD_EXP 42
1704: PUSH
1705: LD_EXP 34
1709: PUSH
1710: LD_VAR 0 2
1714: ARRAY
1715: ARRAY
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PPUSH
1721: LD_EXP 42
1725: PUSH
1726: LD_EXP 34
1730: PUSH
1731: LD_VAR 0 2
1735: ARRAY
1736: ARRAY
1737: PUSH
1738: LD_INT 2
1740: ARRAY
1741: PPUSH
1742: LD_INT 3
1744: PPUSH
1745: CALL_OW 62
// if def_extra_sib_deposits = 2 then
1749: LD_EXP 7
1753: PUSH
1754: LD_INT 2
1756: EQUAL
1757: IFFALSE 1808
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
1759: LD_EXP 43
1763: PUSH
1764: LD_EXP 34
1768: PUSH
1769: LD_VAR 0 2
1773: ARRAY
1774: ARRAY
1775: PUSH
1776: LD_INT 1
1778: ARRAY
1779: PPUSH
1780: LD_EXP 43
1784: PUSH
1785: LD_EXP 34
1789: PUSH
1790: LD_VAR 0 2
1794: ARRAY
1795: ARRAY
1796: PUSH
1797: LD_INT 2
1799: ARRAY
1800: PPUSH
1801: LD_INT 3
1803: PPUSH
1804: CALL_OW 62
// end ;
1808: GO 1682
1810: POP
1811: POP
// end ;
1812: LD_VAR 0 1
1816: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1817: LD_INT 0
1819: PPUSH
1820: PPUSH
1821: PPUSH
// if not Team_Game then
1822: LD_EXP 36
1826: NOT
1827: IFFALSE 1925
// begin for i = 1 to 8 do
1829: LD_ADDR_VAR 0 2
1833: PUSH
1834: DOUBLE
1835: LD_INT 1
1837: DEC
1838: ST_TO_ADDR
1839: LD_INT 8
1841: PUSH
1842: FOR_TO
1843: IFFALSE 1921
// for j = 1 to 8 do
1845: LD_ADDR_VAR 0 3
1849: PUSH
1850: DOUBLE
1851: LD_INT 1
1853: DEC
1854: ST_TO_ADDR
1855: LD_INT 8
1857: PUSH
1858: FOR_TO
1859: IFFALSE 1917
// if i <> j then
1861: LD_VAR 0 2
1865: PUSH
1866: LD_VAR 0 3
1870: NONEQUAL
1871: IFFALSE 1895
// SetAttitude ( i , j , att_neutral , true ) else
1873: LD_VAR 0 2
1877: PPUSH
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_INT 0
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: CALL_OW 80
1893: GO 1915
// SetAttitude ( i , j , att_friend , true ) ;
1895: LD_VAR 0 2
1899: PPUSH
1900: LD_VAR 0 3
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL_OW 80
1915: GO 1858
1917: POP
1918: POP
1919: GO 1842
1921: POP
1922: POP
// end else
1923: GO 2100
// begin if def_shared_vision then
1925: LD_EXP 8
1929: IFFALSE 1994
// begin for i in Teams do
1931: LD_ADDR_VAR 0 2
1935: PUSH
1936: LD_EXP 32
1940: PUSH
1941: FOR_IN
1942: IFFALSE 1992
// for j = 2 to i do
1944: LD_ADDR_VAR 0 3
1948: PUSH
1949: DOUBLE
1950: LD_INT 2
1952: DEC
1953: ST_TO_ADDR
1954: LD_VAR 0 2
1958: PUSH
1959: FOR_TO
1960: IFFALSE 1988
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1962: LD_VAR 0 2
1966: PUSH
1967: LD_VAR 0 3
1971: ARRAY
1972: PPUSH
1973: LD_VAR 0 2
1977: PUSH
1978: LD_INT 1
1980: ARRAY
1981: PPUSH
1982: CALL_OW 343
1986: GO 1959
1988: POP
1989: POP
1990: GO 1941
1992: POP
1993: POP
// end ; for i = 1 to 8 do
1994: LD_ADDR_VAR 0 2
1998: PUSH
1999: DOUBLE
2000: LD_INT 1
2002: DEC
2003: ST_TO_ADDR
2004: LD_INT 8
2006: PUSH
2007: FOR_TO
2008: IFFALSE 2098
// for j = 1 to 8 do
2010: LD_ADDR_VAR 0 3
2014: PUSH
2015: DOUBLE
2016: LD_INT 1
2018: DEC
2019: ST_TO_ADDR
2020: LD_INT 8
2022: PUSH
2023: FOR_TO
2024: IFFALSE 2094
// if Side_Teams [ i ] = Side_Teams [ j ] then
2026: LD_EXP 31
2030: PUSH
2031: LD_VAR 0 2
2035: ARRAY
2036: PUSH
2037: LD_EXP 31
2041: PUSH
2042: LD_VAR 0 3
2046: ARRAY
2047: EQUAL
2048: IFFALSE 2072
// SetAttitude ( i , j , att_friend , true ) else
2050: LD_VAR 0 2
2054: PPUSH
2055: LD_VAR 0 3
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: LD_INT 1
2065: PPUSH
2066: CALL_OW 80
2070: GO 2092
// SetAttitude ( i , j , att_enemy , true ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_VAR 0 3
2081: PPUSH
2082: LD_INT 2
2084: PPUSH
2085: LD_INT 1
2087: PPUSH
2088: CALL_OW 80
2092: GO 2023
2094: POP
2095: POP
2096: GO 2007
2098: POP
2099: POP
// end ; end ;
2100: LD_VAR 0 1
2104: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2105: LD_INT 0
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
// result := [ ] ;
2111: LD_ADDR_VAR 0 7
2115: PUSH
2116: EMPTY
2117: ST_TO_ADDR
// for i := 1 to count do
2118: LD_ADDR_VAR 0 8
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_VAR 0 1
2132: PUSH
2133: FOR_TO
2134: IFFALSE 2579
// begin uc_direction := Rand ( 0 , 5 ) ;
2136: LD_ADDR_OWVAR 24
2140: PUSH
2141: LD_INT 0
2143: PPUSH
2144: LD_INT 5
2146: PPUSH
2147: CALL_OW 12
2151: ST_TO_ADDR
// if commander then
2152: LD_LOC 1
2156: IFFALSE 2265
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2158: LD_ADDR_OWVAR 26
2162: PUSH
2163: LD_OWVAR 19
2167: PUSH
2168: LD_OWVAR 20
2172: ARRAY
2173: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2174: LD_INT 1
2176: PPUSH
2177: LD_INT 2
2179: PPUSH
2180: CALL_OW 12
2184: PPUSH
2185: LD_VAR 0 2
2189: PPUSH
2190: LD_EXP 20
2194: PUSH
2195: LD_INT 2
2197: PLUS
2198: PPUSH
2199: CALL_OW 380
// hc_importance := 105 ;
2203: LD_ADDR_OWVAR 32
2207: PUSH
2208: LD_INT 105
2210: ST_TO_ADDR
// commander := false ;
2211: LD_ADDR_LOC 1
2215: PUSH
2216: LD_INT 0
2218: ST_TO_ADDR
// if Multiplayer then
2219: LD_OWVAR 4
2223: IFFALSE 2263
// begin hc_gallery := MULTIAVATARS ;
2225: LD_ADDR_OWVAR 33
2229: PUSH
2230: LD_STRING MULTIAVATARS
2232: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2233: LD_ADDR_OWVAR 34
2237: PUSH
2238: LD_OWVAR 20
2242: PPUSH
2243: CALL_OW 525
2247: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2248: LD_ADDR_OWVAR 27
2252: PUSH
2253: LD_OWVAR 20
2257: PPUSH
2258: CALL_OW 526
2262: ST_TO_ADDR
// end ; end else
2263: GO 2328
// begin hc_name :=  ;
2265: LD_ADDR_OWVAR 26
2269: PUSH
2270: LD_STRING 
2272: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2273: LD_INT 1
2275: PPUSH
2276: LD_INT 2
2278: PPUSH
2279: CALL_OW 12
2283: PPUSH
2284: LD_VAR 0 2
2288: PPUSH
2289: LD_EXP 20
2293: PPUSH
2294: CALL_OW 380
// hc_importance := 0 ;
2298: LD_ADDR_OWVAR 32
2302: PUSH
2303: LD_INT 0
2305: ST_TO_ADDR
// if Multiplayer then
2306: LD_OWVAR 4
2310: IFFALSE 2328
// begin hc_gallery :=  ;
2312: LD_ADDR_OWVAR 33
2316: PUSH
2317: LD_STRING 
2319: ST_TO_ADDR
// hc_face_number := 0 ;
2320: LD_ADDR_OWVAR 34
2324: PUSH
2325: LD_INT 0
2327: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: CALL_OW 44
2337: ST_TO_ADDR
// if global_defined then
2338: LD_LOC 3
2342: IFFALSE 2482
// begin if ( cl = class_soldier ) then
2344: LD_VAR 0 2
2348: PUSH
2349: LD_INT 1
2351: EQUAL
2352: IFFALSE 2372
// j := i + soldiers_created else
2354: LD_ADDR_VAR 0 9
2358: PUSH
2359: LD_VAR 0 8
2363: PUSH
2364: LD_LOC 4
2368: PLUS
2369: ST_TO_ADDR
2370: GO 2382
// j := i ;
2372: LD_ADDR_VAR 0 9
2376: PUSH
2377: LD_VAR 0 8
2381: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2382: LD_LOC 2
2386: PUSH
2387: LD_VAR 0 2
2391: ARRAY
2392: PUSH
2393: LD_VAR 0 9
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 10
2403: PPUSH
2404: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2408: LD_VAR 0 10
2412: PPUSH
2413: LD_INT 2
2415: PPUSH
2416: LD_LOC 2
2420: PUSH
2421: LD_VAR 0 2
2425: ARRAY
2426: PUSH
2427: LD_VAR 0 9
2431: ARRAY
2432: PPUSH
2433: LD_INT 2
2435: PPUSH
2436: CALL_OW 260
2440: PPUSH
2441: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2445: LD_VAR 0 10
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: LD_LOC 2
2457: PUSH
2458: LD_VAR 0 2
2462: ARRAY
2463: PUSH
2464: LD_VAR 0 9
2468: ARRAY
2469: PPUSH
2470: LD_INT 1
2472: PPUSH
2473: CALL_OW 260
2477: PPUSH
2478: CALL_OW 239
// end ; if building then
2482: LD_VAR 0 6
2486: IFFALSE 2531
// begin SetDir ( un , ( GetDir ( building ) + 3 ) mod 6 ) ;
2488: LD_VAR 0 10
2492: PPUSH
2493: LD_VAR 0 6
2497: PPUSH
2498: CALL_OW 254
2502: PUSH
2503: LD_INT 3
2505: PLUS
2506: PUSH
2507: LD_INT 6
2509: MOD
2510: PPUSH
2511: CALL_OW 233
// PlaceHumanInUnit ( un , building ) end else
2515: LD_VAR 0 10
2519: PPUSH
2520: LD_VAR 0 6
2524: PPUSH
2525: CALL_OW 52
2529: GO 2558
// PlaceUnitXYR ( un , x , y , r , false ) ;
2531: LD_VAR 0 10
2535: PPUSH
2536: LD_VAR 0 3
2540: PPUSH
2541: LD_VAR 0 4
2545: PPUSH
2546: LD_VAR 0 5
2550: PPUSH
2551: LD_INT 0
2553: PPUSH
2554: CALL_OW 50
// result := result ^ [ un ] ;
2558: LD_ADDR_VAR 0 7
2562: PUSH
2563: LD_VAR 0 7
2567: PUSH
2568: LD_VAR 0 10
2572: PUSH
2573: EMPTY
2574: LIST
2575: ADD
2576: ST_TO_ADDR
// end ;
2577: GO 2133
2579: POP
2580: POP
// if not global_defined then
2581: LD_LOC 3
2585: NOT
2586: IFFALSE 2664
// if ( global_units >= cl ) then
2588: LD_LOC 2
2592: PUSH
2593: LD_VAR 0 2
2597: GREATEREQUAL
2598: IFFALSE 2639
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2600: LD_ADDR_LOC 2
2604: PUSH
2605: LD_LOC 2
2609: PPUSH
2610: LD_VAR 0 2
2614: PPUSH
2615: LD_LOC 2
2619: PUSH
2620: LD_VAR 0 2
2624: ARRAY
2625: PUSH
2626: LD_VAR 0 7
2630: ADD
2631: PPUSH
2632: CALL_OW 1
2636: ST_TO_ADDR
2637: GO 2664
// global_units := Replace ( global_units , cl , result ) ;
2639: LD_ADDR_LOC 2
2643: PUSH
2644: LD_LOC 2
2648: PPUSH
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_VAR 0 7
2658: PPUSH
2659: CALL_OW 1
2663: ST_TO_ADDR
// if commander then
2664: LD_LOC 1
2668: IFFALSE 2715
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2670: LD_ADDR_EXP 45
2674: PUSH
2675: LD_EXP 45
2679: PPUSH
2680: LD_OWVAR 20
2684: PPUSH
2685: LD_EXP 45
2689: PUSH
2690: LD_OWVAR 20
2694: ARRAY
2695: PUSH
2696: LD_VAR 0 10
2700: ADD
2701: PPUSH
2702: CALL_OW 1
2706: ST_TO_ADDR
// commander := false ;
2707: LD_ADDR_LOC 1
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// end ; end ;
2715: LD_VAR 0 7
2719: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2720: LD_INT 0
2722: PPUSH
2723: PPUSH
2724: PPUSH
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
// if side in [ 0 , 9 ] then
2731: LD_VAR 0 1
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: IN
2746: IFFALSE 2750
// exit ;
2748: GO 3800
// pos := Side_Positions [ side ] ;
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: LD_EXP 34
2759: PUSH
2760: LD_VAR 0 1
2764: ARRAY
2765: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2766: LD_ADDR_OWVAR 21
2770: PUSH
2771: LD_EXP 35
2775: PUSH
2776: LD_VAR 0 1
2780: ARRAY
2781: ST_TO_ADDR
// uc_side := side ;
2782: LD_ADDR_OWVAR 20
2786: PUSH
2787: LD_VAR 0 1
2791: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: LD_EXP 37
2801: PUSH
2802: LD_VAR 0 3
2806: ARRAY
2807: PUSH
2808: LD_INT 1
2810: ARRAY
2811: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2812: LD_ADDR_VAR 0 5
2816: PUSH
2817: LD_EXP 37
2821: PUSH
2822: LD_VAR 0 3
2826: ARRAY
2827: PUSH
2828: LD_INT 2
2830: ARRAY
2831: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2832: LD_ADDR_VAR 0 6
2836: PUSH
2837: LD_EXP 37
2841: PUSH
2842: LD_VAR 0 3
2846: ARRAY
2847: PUSH
2848: LD_INT 3
2850: ARRAY
2851: ST_TO_ADDR
// if is_depot then
2852: LD_EXP 17
2856: IFFALSE 2989
// begin bc_type = b_depot ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 0
2865: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2866: LD_ADDR_VAR 0 10
2870: PUSH
2871: LD_VAR 0 4
2875: PPUSH
2876: LD_VAR 0 5
2880: PPUSH
2881: LD_VAR 0 6
2885: PPUSH
2886: CALL_OW 47
2890: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2891: LD_VAR 0 10
2895: PPUSH
2896: LD_STRING @
2898: PUSH
2899: LD_VAR 0 1
2903: STR
2904: PPUSH
2905: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2909: LD_VAR 0 10
2913: PPUSH
2914: CALL_OW 274
2918: PPUSH
2919: LD_INT 1
2921: PPUSH
2922: LD_EXP 22
2926: PUSH
2927: LD_INT 1
2929: ARRAY
2930: PPUSH
2931: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2935: LD_VAR 0 10
2939: PPUSH
2940: CALL_OW 274
2944: PPUSH
2945: LD_INT 2
2947: PPUSH
2948: LD_EXP 22
2952: PUSH
2953: LD_INT 2
2955: ARRAY
2956: PPUSH
2957: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2961: LD_VAR 0 10
2965: PPUSH
2966: CALL_OW 274
2970: PPUSH
2971: LD_INT 3
2973: PPUSH
2974: LD_EXP 22
2978: PUSH
2979: LD_INT 3
2981: ARRAY
2982: PPUSH
2983: CALL_OW 277
// end else
2987: GO 3133
// begin for i := 1 to 3 do
2989: LD_ADDR_VAR 0 7
2993: PUSH
2994: DOUBLE
2995: LD_INT 1
2997: DEC
2998: ST_TO_ADDR
2999: LD_INT 3
3001: PUSH
3002: FOR_TO
3003: IFFALSE 3131
// begin r := starting_resources [ i ] ;
3005: LD_ADDR_VAR 0 8
3009: PUSH
3010: LD_EXP 22
3014: PUSH
3015: LD_VAR 0 7
3019: ARRAY
3020: ST_TO_ADDR
// while r >= 10 do
3021: LD_VAR 0 8
3025: PUSH
3026: LD_INT 10
3028: GREATEREQUAL
3029: IFFALSE 3129
// if r > 50 then
3031: LD_VAR 0 8
3035: PUSH
3036: LD_INT 50
3038: GREATER
3039: IFFALSE 3085
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3041: LD_VAR 0 7
3045: PPUSH
3046: LD_INT 5
3048: PPUSH
3049: LD_VAR 0 4
3053: PPUSH
3054: LD_VAR 0 5
3058: PPUSH
3059: LD_INT 4
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 60
// r := r - 50 ;
3069: LD_ADDR_VAR 0 8
3073: PUSH
3074: LD_VAR 0 8
3078: PUSH
3079: LD_INT 50
3081: MINUS
3082: ST_TO_ADDR
// end else
3083: GO 3127
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3085: LD_VAR 0 7
3089: PPUSH
3090: LD_VAR 0 8
3094: PUSH
3095: LD_INT 10
3097: DIV
3098: PPUSH
3099: LD_VAR 0 4
3103: PPUSH
3104: LD_VAR 0 5
3108: PPUSH
3109: LD_INT 4
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 60
// r := 0 ;
3119: LD_ADDR_VAR 0 8
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// end ;
3127: GO 3021
// end ;
3129: GO 3002
3131: POP
3132: POP
// end ; for r in starting_crates do
3133: LD_ADDR_VAR 0 8
3137: PUSH
3138: LD_EXP 21
3142: PUSH
3143: FOR_IN
3144: IFFALSE 3176
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3146: LD_INT 1
3148: PPUSH
3149: LD_INT 5
3151: PPUSH
3152: LD_VAR 0 4
3156: PPUSH
3157: LD_VAR 0 5
3161: PPUSH
3162: LD_VAR 0 8
3166: PPUSH
3167: LD_INT 0
3169: PPUSH
3170: CALL_OW 60
3174: GO 3143
3176: POP
3177: POP
// if def_morale_flags then
3178: LD_EXP 9
3182: IFFALSE 3321
// begin x := start_def [ pos ] [ 1 ] ;
3184: LD_ADDR_VAR 0 4
3188: PUSH
3189: LD_EXP 39
3193: PUSH
3194: LD_VAR 0 3
3198: ARRAY
3199: PUSH
3200: LD_INT 1
3202: ARRAY
3203: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3204: LD_ADDR_VAR 0 5
3208: PUSH
3209: LD_EXP 39
3213: PUSH
3214: LD_VAR 0 3
3218: ARRAY
3219: PUSH
3220: LD_INT 2
3222: ARRAY
3223: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3224: LD_VAR 0 4
3228: PPUSH
3229: LD_VAR 0 5
3233: PPUSH
3234: LD_INT 12
3236: PPUSH
3237: LD_INT 2
3239: PPUSH
3240: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3244: LD_ADDR_EXP 44
3248: PUSH
3249: LD_EXP 44
3253: PUSH
3254: LD_VAR 0 1
3258: PPUSH
3259: LD_VAR 0 4
3263: PPUSH
3264: LD_VAR 0 5
3268: PPUSH
3269: LD_INT 1
3271: PUSH
3272: LD_INT 100
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PUSH
3279: LD_INT 2
3281: PUSH
3282: LD_INT 50
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PUSH
3289: LD_INT 3
3291: PUSH
3292: LD_INT 20
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 20
3301: PUSH
3302: LD_INT 100
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: PPUSH
3315: CALL_OW 418
3319: ADD
3320: ST_TO_ADDR
// end ; commander := true ;
3321: LD_ADDR_LOC 1
3325: PUSH
3326: LD_INT 1
3328: ST_TO_ADDR
// soldiers_created := 0 ;
3329: LD_ADDR_LOC 4
3333: PUSH
3334: LD_INT 0
3336: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3337: LD_ADDR_VAR 0 7
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_EXP 18
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3506
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3355: LD_ADDR_VAR 0 4
3359: PUSH
3360: LD_EXP 38
3364: PUSH
3365: LD_VAR 0 3
3369: ARRAY
3370: PUSH
3371: LD_VAR 0 7
3375: ARRAY
3376: PUSH
3377: LD_INT 1
3379: ARRAY
3380: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3381: LD_ADDR_VAR 0 5
3385: PUSH
3386: LD_EXP 38
3390: PUSH
3391: LD_VAR 0 3
3395: ARRAY
3396: PUSH
3397: LD_VAR 0 7
3401: ARRAY
3402: PUSH
3403: LD_INT 2
3405: ARRAY
3406: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3407: LD_ADDR_VAR 0 6
3411: PUSH
3412: LD_EXP 38
3416: PUSH
3417: LD_VAR 0 3
3421: ARRAY
3422: PUSH
3423: LD_VAR 0 7
3427: ARRAY
3428: PUSH
3429: LD_INT 3
3431: ARRAY
3432: ST_TO_ADDR
// bc_type := b_breastwork ;
3433: LD_ADDR_OWVAR 42
3437: PUSH
3438: LD_INT 31
3440: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3441: LD_ADDR_VAR 0 9
3445: PUSH
3446: LD_VAR 0 4
3450: PPUSH
3451: LD_VAR 0 5
3455: PPUSH
3456: LD_VAR 0 6
3460: PPUSH
3461: CALL_OW 47
3465: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3466: LD_INT 1
3468: PPUSH
3469: LD_INT 1
3471: PPUSH
3472: LD_INT 0
3474: PPUSH
3475: LD_INT 0
3477: PPUSH
3478: LD_INT 0
3480: PPUSH
3481: LD_VAR 0 9
3485: PPUSH
3486: CALL 2105 0 6
// soldiers_created := soldiers_created + 1 ;
3490: LD_ADDR_LOC 4
3494: PUSH
3495: LD_LOC 4
3499: PUSH
3500: LD_INT 1
3502: PLUS
3503: ST_TO_ADDR
// end ;
3504: GO 3352
3506: POP
3507: POP
// x := start_def [ pos ] [ 1 ] ;
3508: LD_ADDR_VAR 0 4
3512: PUSH
3513: LD_EXP 39
3517: PUSH
3518: LD_VAR 0 3
3522: ARRAY
3523: PUSH
3524: LD_INT 1
3526: ARRAY
3527: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3528: LD_ADDR_VAR 0 5
3532: PUSH
3533: LD_EXP 39
3537: PUSH
3538: LD_VAR 0 3
3542: ARRAY
3543: PUSH
3544: LD_INT 2
3546: ARRAY
3547: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3548: LD_LOC 8
3552: PUSH
3553: LD_EXP 18
3557: MINUS
3558: PPUSH
3559: LD_INT 1
3561: PPUSH
3562: LD_VAR 0 4
3566: PPUSH
3567: LD_VAR 0 5
3571: PPUSH
3572: LD_INT 5
3574: PPUSH
3575: LD_INT 0
3577: PPUSH
3578: CALL 2105 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3582: LD_LOC 5
3586: PPUSH
3587: LD_INT 2
3589: PPUSH
3590: LD_VAR 0 4
3594: PPUSH
3595: LD_VAR 0 5
3599: PPUSH
3600: LD_INT 5
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 2105 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3610: LD_LOC 7
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: LD_VAR 0 4
3622: PPUSH
3623: LD_VAR 0 5
3627: PPUSH
3628: LD_INT 5
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: CALL 2105 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3638: LD_LOC 6
3642: PPUSH
3643: LD_INT 4
3645: PPUSH
3646: LD_VAR 0 4
3650: PPUSH
3651: LD_VAR 0 5
3655: PPUSH
3656: LD_INT 5
3658: PPUSH
3659: LD_INT 0
3661: PPUSH
3662: CALL 2105 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3666: LD_EXP 10
3670: PUSH
3671: LD_INT 20
3673: PPUSH
3674: LD_VAR 0 1
3678: PPUSH
3679: CALL_OW 321
3683: PUSH
3684: LD_INT 1
3686: EQUAL
3687: AND
3688: IFFALSE 3705
// SetTech ( tech_SibDet , side , state_researched ) ;
3690: LD_INT 20
3692: PPUSH
3693: LD_VAR 0 1
3697: PPUSH
3698: LD_INT 2
3700: PPUSH
3701: CALL_OW 322
// if def_siberite_bomb = 1 then
3705: LD_EXP 13
3709: PUSH
3710: LD_INT 1
3712: EQUAL
3713: IFFALSE 3747
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3715: LD_INT 25
3717: PPUSH
3718: LD_VAR 0 1
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3730: LD_INT 73
3732: PPUSH
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 1
3740: PPUSH
3741: CALL_OW 322
// end else
3745: GO 3777
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3747: LD_INT 25
3749: PPUSH
3750: LD_VAR 0 1
3754: PPUSH
3755: LD_INT 0
3757: PPUSH
3758: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3762: LD_INT 73
3764: PPUSH
3765: LD_VAR 0 1
3769: PPUSH
3770: LD_INT 0
3772: PPUSH
3773: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3777: LD_INT 24
3779: PPUSH
3780: LD_VAR 0 1
3784: PPUSH
3785: LD_INT 0
3787: PPUSH
3788: CALL_OW 322
// global_defined := true ;
3792: LD_ADDR_LOC 3
3796: PUSH
3797: LD_INT 1
3799: ST_TO_ADDR
// end ;
3800: LD_VAR 0 2
3804: RET
// function prepare_sides ; var i ; begin
3805: LD_INT 0
3807: PPUSH
3808: PPUSH
// global_units := [ ] ;
3809: LD_ADDR_LOC 2
3813: PUSH
3814: EMPTY
3815: ST_TO_ADDR
// global_defined := false ;
3816: LD_ADDR_LOC 3
3820: PUSH
3821: LD_INT 0
3823: ST_TO_ADDR
// CountClassMembers ;
3824: CALL 3874 0 0
// for i := 1 to 8 do
3828: LD_ADDR_VAR 0 2
3832: PUSH
3833: DOUBLE
3834: LD_INT 1
3836: DEC
3837: ST_TO_ADDR
3838: LD_INT 8
3840: PUSH
3841: FOR_TO
3842: IFFALSE 3867
// if Side_Positions [ i ] then
3844: LD_EXP 34
3848: PUSH
3849: LD_VAR 0 2
3853: ARRAY
3854: IFFALSE 3865
// prepare_side ( i ) ;
3856: LD_VAR 0 2
3860: PPUSH
3861: CALL 2720 0 1
3865: GO 3841
3867: POP
3868: POP
// end ;
3869: LD_VAR 0 1
3873: RET
// function CountClassMembers ; var Mode ; begin
3874: LD_INT 0
3876: PPUSH
3877: PPUSH
// if No_Mechs then
3878: LD_EXP 15
3882: IFFALSE 3894
// Mode := 2 else
3884: LD_ADDR_VAR 0 2
3888: PUSH
3889: LD_INT 2
3891: ST_TO_ADDR
3892: GO 3902
// Mode := 1 ;
3894: LD_ADDR_VAR 0 2
3898: PUSH
3899: LD_INT 1
3901: ST_TO_ADDR
// neng := number_of_people ;
3902: LD_ADDR_LOC 5
3906: PUSH
3907: LD_EXP 19
3911: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
3912: LD_ADDR_LOC 8
3916: PUSH
3917: LD_LOC 5
3921: PUSH
3922: LD_INT 4
3924: PUSH
3925: LD_INT 3
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_VAR 0 2
3936: ARRAY
3937: DIV
3938: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
3939: LD_LOC 8
3943: PUSH
3944: LD_EXP 18
3948: LESS
3949: IFFALSE 3961
// nsol := number_of_breastworks ;
3951: LD_ADDR_LOC 8
3955: PUSH
3956: LD_EXP 18
3960: ST_TO_ADDR
// neng := neng - nsol ;
3961: LD_ADDR_LOC 5
3965: PUSH
3966: LD_LOC 5
3970: PUSH
3971: LD_LOC 8
3975: MINUS
3976: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
3977: LD_ADDR_LOC 6
3981: PUSH
3982: LD_LOC 5
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 2
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PUSH
3997: LD_VAR 0 2
4001: ARRAY
4002: DIV
4003: ST_TO_ADDR
// if ( nsci < 1 ) then
4004: LD_LOC 6
4008: PUSH
4009: LD_INT 1
4011: LESS
4012: IFFALSE 4022
// nsci := 1 ;
4014: LD_ADDR_LOC 6
4018: PUSH
4019: LD_INT 1
4021: ST_TO_ADDR
// neng := neng - nsci ;
4022: LD_ADDR_LOC 5
4026: PUSH
4027: LD_LOC 5
4031: PUSH
4032: LD_LOC 6
4036: MINUS
4037: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4038: LD_ADDR_LOC 7
4042: PUSH
4043: LD_LOC 5
4047: PUSH
4048: LD_INT 2
4050: DIV
4051: PUSH
4052: LD_INT 0
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_VAR 0 2
4063: ARRAY
4064: ST_TO_ADDR
// neng := neng - nmech ;
4065: LD_ADDR_LOC 5
4069: PUSH
4070: LD_LOC 5
4074: PUSH
4075: LD_LOC 7
4079: MINUS
4080: ST_TO_ADDR
// if ( neng < 1 ) then
4081: LD_LOC 5
4085: PUSH
4086: LD_INT 1
4088: LESS
4089: IFFALSE 4099
// neng := 1 ;
4091: LD_ADDR_LOC 5
4095: PUSH
4096: LD_INT 1
4098: ST_TO_ADDR
// end ;
4099: LD_VAR 0 1
4103: RET
// starting begin disable ( 98 ) ;
4104: LD_INT 98
4106: DISABLE_MARKED
// disable ( 99 ) ;
4107: LD_INT 99
4109: DISABLE_MARKED
// disable ( 400 ) ;
4110: LD_INT 400
4112: DISABLE_MARKED
// disable ( 401 ) ;
4113: LD_INT 401
4115: DISABLE_MARKED
// mp_selectmsg := true ;
4116: LD_ADDR_OWVAR 13
4120: PUSH
4121: LD_INT 1
4123: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4124: CALL 68 0 0
// init_map ;
4128: CALL 1200 0 0
// init_respawning ;
4132: CALL 13425 0 0
// set_shared_visions_and_alliances ;
4136: CALL 1817 0 0
// ResetFog ;
4140: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4144: LD_OWVAR 2
4148: PPUSH
4149: CALL_OW 520
// AnimateTrees ( true ) ;
4153: LD_INT 1
4155: PPUSH
4156: CALL_OW 573
// prepare_sides ;
4160: CALL 3805 0 0
// Init_Win_Condition ;
4164: CALL 7406 0 0
// ShowTimer ;
4168: CALL 6984 0 0
// music_nat := Side_Nations [ your_side ] ;
4172: LD_ADDR_OWVAR 71
4176: PUSH
4177: LD_EXP 35
4181: PUSH
4182: LD_OWVAR 2
4186: ARRAY
4187: ST_TO_ADDR
// if IAmSpec then
4188: CALL_OW 531
4192: IFFALSE 4216
// begin fogoff ( true ) ;
4194: LD_INT 1
4196: PPUSH
4197: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4201: LD_INT 130
4203: PPUSH
4204: LD_INT 100
4206: PPUSH
4207: CALL_OW 86
// enable ( 400 ) ;
4211: LD_INT 400
4213: ENABLE_MARKED
// end else
4214: GO 4262
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4216: LD_EXP 39
4220: PUSH
4221: LD_EXP 34
4225: PUSH
4226: LD_OWVAR 2
4230: ARRAY
4231: ARRAY
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PPUSH
4237: LD_EXP 39
4241: PUSH
4242: LD_EXP 34
4246: PUSH
4247: LD_OWVAR 2
4251: ARRAY
4252: ARRAY
4253: PUSH
4254: LD_INT 2
4256: ARRAY
4257: PPUSH
4258: CALL_OW 86
// end ; InitApeman ;
4262: CALL 5538 0 0
// BuildUpAreas := [ BaseArea1 , BaseArea2 ] ;
4266: LD_ADDR_EXP 55
4270: PUSH
4271: LD_INT 15
4273: PUSH
4274: LD_INT 16
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: ST_TO_ADDR
// BeginBuildUp ;
4281: CALL 13919 0 0
// end ;
4285: END
// every 0 0$1 do
4286: GO 4288
4288: DISABLE
// if ( def_siberite_bomb > 1 ) then
4289: LD_EXP 13
4293: PUSH
4294: LD_INT 1
4296: GREATER
4297: IFFALSE 4312
// begin wait ( siberite_bomb_Delay ) ;
4299: LD_EXP 29
4303: PPUSH
4304: CALL_OW 67
// EnableSibFiss ;
4308: CALL 4313 0 0
// end ;
4312: END
// function EnableSibFiss ; var i ; begin
4313: LD_INT 0
4315: PPUSH
4316: PPUSH
// for i := 1 to 8 do
4317: LD_ADDR_VAR 0 2
4321: PUSH
4322: DOUBLE
4323: LD_INT 1
4325: DEC
4326: ST_TO_ADDR
4327: LD_INT 8
4329: PUSH
4330: FOR_TO
4331: IFFALSE 4377
// if Side_Positions [ i ] then
4333: LD_EXP 34
4337: PUSH
4338: LD_VAR 0 2
4342: ARRAY
4343: IFFALSE 4375
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4345: LD_INT 25
4347: PPUSH
4348: LD_VAR 0 2
4352: PPUSH
4353: LD_INT 1
4355: PPUSH
4356: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4360: LD_INT 73
4362: PPUSH
4363: LD_VAR 0 2
4367: PPUSH
4368: LD_INT 1
4370: PPUSH
4371: CALL_OW 322
// end ;
4375: GO 4330
4377: POP
4378: POP
// end ; end_of_file
4379: LD_VAR 0 1
4383: RET
// every 0 0$10 + 0 0$2.0 do var i ;
4384: GO 4386
4386: DISABLE
4387: LD_INT 0
4389: PPUSH
// begin repeat wait ( 0 0$60 + ( shipments_density - 100 ) ) ;
4390: LD_INT 2100
4392: PUSH
4393: LD_EXP 23
4397: PUSH
4398: LD_INT 100
4400: MINUS
4401: PLUS
4402: PPUSH
4403: CALL_OW 67
// i := rand ( 1 , 5 ) ;
4407: LD_ADDR_VAR 0 1
4411: PUSH
4412: LD_INT 1
4414: PPUSH
4415: LD_INT 5
4417: PPUSH
4418: CALL_OW 12
4422: ST_TO_ADDR
// CreateCratesArea ( i , SafeCrates1a , true ) ;
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 11
4430: PPUSH
4431: LD_INT 1
4433: PPUSH
4434: CALL_OW 55
// CreateCratesArea ( i , SafeCrates1b , true ) ;
4438: LD_VAR 0 1
4442: PPUSH
4443: LD_INT 12
4445: PPUSH
4446: LD_INT 1
4448: PPUSH
4449: CALL_OW 55
// until tick < 10 10$00 ;
4453: LD_OWVAR 1
4457: PUSH
4458: LD_INT 21000
4460: LESS
4461: IFFALSE 4390
// repeat wait ( 2 2$55 + ( shipments_density - 60 ) ) ;
4463: LD_INT 6125
4465: PUSH
4466: LD_EXP 23
4470: PUSH
4471: LD_INT 60
4473: MINUS
4474: PLUS
4475: PPUSH
4476: CALL_OW 67
// i := rand ( 1 , 5 ) ;
4480: LD_ADDR_VAR 0 1
4484: PUSH
4485: LD_INT 1
4487: PPUSH
4488: LD_INT 5
4490: PPUSH
4491: CALL_OW 12
4495: ST_TO_ADDR
// CreateCratesArea ( i , SafeCrates2a , true ) ;
4496: LD_VAR 0 1
4500: PPUSH
4501: LD_INT 13
4503: PPUSH
4504: LD_INT 1
4506: PPUSH
4507: CALL_OW 55
// CreateCratesArea ( i , SafeCrates2b , true ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 14
4518: PPUSH
4519: LD_INT 1
4521: PPUSH
4522: CALL_OW 55
// until tick < 30 30$00 ;
4526: LD_OWVAR 1
4530: PUSH
4531: LD_INT 63000
4533: LESS
4534: IFFALSE 4463
// end ;
4536: PPOPN 1
4538: END
// every 1 1$50 + 0 0$2.0 trigger tick >= 5 5$00 do var i ;
4539: LD_OWVAR 1
4543: PUSH
4544: LD_INT 10500
4546: GREATEREQUAL
4547: IFFALSE 4808
4549: GO 4551
4551: DISABLE
4552: LD_INT 0
4554: PPUSH
// begin enable ;
4555: ENABLE
// i := rand ( 1 , 5 ) ;
4556: LD_ADDR_VAR 0 1
4560: PUSH
4561: LD_INT 1
4563: PPUSH
4564: LD_INT 5
4566: PPUSH
4567: CALL_OW 12
4571: ST_TO_ADDR
// CreateCratesArea ( i , MidCrates3a , true ) ;
4572: LD_VAR 0 1
4576: PPUSH
4577: LD_INT 7
4579: PPUSH
4580: LD_INT 1
4582: PPUSH
4583: CALL_OW 55
// CreateCratesArea ( i , MidCrates3b , true ) ;
4587: LD_VAR 0 1
4591: PPUSH
4592: LD_INT 8
4594: PPUSH
4595: LD_INT 1
4597: PPUSH
4598: CALL_OW 55
// if i < 4 then
4602: LD_VAR 0 1
4606: PUSH
4607: LD_INT 4
4609: LESS
4610: IFFALSE 4711
// begin wait ( 0 0$15 ) ;
4612: LD_INT 525
4614: PPUSH
4615: CALL_OW 67
// if GetResourceArea ( MidCrates1a , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4619: LD_INT 3
4621: PPUSH
4622: LD_INT 1
4624: PPUSH
4625: CALL_OW 287
4629: PUSH
4630: LD_INT 200
4632: PUSH
4633: LD_EXP 23
4637: MINUS
4638: PUSH
4639: LD_INT 25
4641: DIVREAL
4642: PUSH
4643: LD_INT 5
4645: MUL
4646: LESS
4647: IFFALSE 4664
// CreateCratesArea ( i , MidCrates1a , true ) ;
4649: LD_VAR 0 1
4653: PPUSH
4654: LD_INT 3
4656: PPUSH
4657: LD_INT 1
4659: PPUSH
4660: CALL_OW 55
// if GetResourceArea ( MidCrates1b , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4664: LD_INT 4
4666: PPUSH
4667: LD_INT 1
4669: PPUSH
4670: CALL_OW 287
4674: PUSH
4675: LD_INT 200
4677: PUSH
4678: LD_EXP 23
4682: MINUS
4683: PUSH
4684: LD_INT 25
4686: DIVREAL
4687: PUSH
4688: LD_INT 5
4690: MUL
4691: LESS
4692: IFFALSE 4709
// CreateCratesArea ( i , MidCrates1b , true ) ;
4694: LD_VAR 0 1
4698: PPUSH
4699: LD_INT 4
4701: PPUSH
4702: LD_INT 1
4704: PPUSH
4705: CALL_OW 55
// end else
4709: GO 4808
// begin wait ( 0 0$10 ) ;
4711: LD_INT 350
4713: PPUSH
4714: CALL_OW 67
// if GetResourceArea ( MidCrates2a , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4718: LD_INT 5
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL_OW 287
4728: PUSH
4729: LD_INT 200
4731: PUSH
4732: LD_EXP 23
4736: MINUS
4737: PUSH
4738: LD_INT 25
4740: DIVREAL
4741: PUSH
4742: LD_INT 5
4744: MUL
4745: LESS
4746: IFFALSE 4763
// CreateCratesArea ( i , MidCrates2a , true ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 5
4755: PPUSH
4756: LD_INT 1
4758: PPUSH
4759: CALL_OW 55
// if GetResourceArea ( MidCrates2b , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4763: LD_INT 6
4765: PPUSH
4766: LD_INT 1
4768: PPUSH
4769: CALL_OW 287
4773: PUSH
4774: LD_INT 200
4776: PUSH
4777: LD_EXP 23
4781: MINUS
4782: PUSH
4783: LD_INT 25
4785: DIVREAL
4786: PUSH
4787: LD_INT 5
4789: MUL
4790: LESS
4791: IFFALSE 4808
// CreateCratesArea ( i , MidCrates2b , true ) ;
4793: LD_VAR 0 1
4797: PPUSH
4798: LD_INT 6
4800: PPUSH
4801: LD_INT 1
4803: PPUSH
4804: CALL_OW 55
// end ; end ;
4808: PPOPN 1
4810: END
// every 1 1$55 + 0 0$1.0 do
4811: GO 4813
4813: DISABLE
// begin if GetResourceArea ( MidCrates3a , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4814: LD_INT 7
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: CALL_OW 287
4824: PUSH
4825: LD_INT 200
4827: PUSH
4828: LD_EXP 23
4832: MINUS
4833: PUSH
4834: LD_INT 25
4836: DIVREAL
4837: PUSH
4838: LD_INT 5
4840: MUL
4841: LESS
4842: IFFALSE 4857
// CreateCratesArea ( 5 , ExpansionCrates1a , true ) ;
4844: LD_INT 5
4846: PPUSH
4847: LD_INT 9
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: CALL_OW 55
// if GetResourceArea ( MidCrates3b , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4857: LD_INT 8
4859: PPUSH
4860: LD_INT 1
4862: PPUSH
4863: CALL_OW 287
4867: PUSH
4868: LD_INT 200
4870: PUSH
4871: LD_EXP 23
4875: MINUS
4876: PUSH
4877: LD_INT 25
4879: DIVREAL
4880: PUSH
4881: LD_INT 5
4883: MUL
4884: LESS
4885: IFFALSE 4900
// CreateCratesArea ( 5 , ExpansionCrates1b , true ) ;
4887: LD_INT 5
4889: PPUSH
4890: LD_INT 10
4892: PPUSH
4893: LD_INT 1
4895: PPUSH
4896: CALL_OW 55
// enable ;
4900: ENABLE
// end ;
4901: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4902: GO 4904
4904: DISABLE
4905: LD_INT 0
4907: PPUSH
4908: PPUSH
// begin case tick of 1 .. 1 1$0 :
4909: LD_OWVAR 1
4913: PUSH
4914: LD_INT 1
4916: DOUBLE
4917: GREATEREQUAL
4918: IFFALSE 4926
4920: LD_INT 2100
4922: DOUBLE
4923: LESSEQUAL
4924: IFTRUE 4928
4926: GO 4956
4928: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4929: LD_EXP 23
4933: PUSH
4934: LD_INT 100
4936: DIVREAL
4937: PUSH
4938: LD_INT 525
4940: PPUSH
4941: LD_INT 1050
4943: PPUSH
4944: CALL_OW 12
4948: MUL
4949: PPUSH
4950: CALL_OW 67
4954: GO 5258
4956: LD_INT 2100
4958: PUSH
4959: LD_INT 1
4961: PLUS
4962: DOUBLE
4963: GREATEREQUAL
4964: IFFALSE 4972
4966: LD_INT 10500
4968: DOUBLE
4969: LESSEQUAL
4970: IFTRUE 4974
4972: GO 5002
4974: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4975: LD_EXP 23
4979: PUSH
4980: LD_INT 100
4982: DIVREAL
4983: PUSH
4984: LD_INT 1050
4986: PPUSH
4987: LD_INT 1750
4989: PPUSH
4990: CALL_OW 12
4994: MUL
4995: PPUSH
4996: CALL_OW 67
5000: GO 5258
5002: LD_INT 10500
5004: PUSH
5005: LD_INT 1
5007: PLUS
5008: DOUBLE
5009: GREATEREQUAL
5010: IFFALSE 5018
5012: LD_INT 21000
5014: DOUBLE
5015: LESSEQUAL
5016: IFTRUE 5020
5018: GO 5048
5020: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5021: LD_EXP 23
5025: PUSH
5026: LD_INT 100
5028: DIVREAL
5029: PUSH
5030: LD_INT 1750
5032: PPUSH
5033: LD_INT 2100
5035: PPUSH
5036: CALL_OW 12
5040: MUL
5041: PPUSH
5042: CALL_OW 67
5046: GO 5258
5048: LD_INT 21000
5050: PUSH
5051: LD_INT 1
5053: PLUS
5054: DOUBLE
5055: GREATEREQUAL
5056: IFFALSE 5064
5058: LD_INT 42000
5060: DOUBLE
5061: LESSEQUAL
5062: IFTRUE 5066
5064: GO 5094
5066: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5067: LD_EXP 23
5071: PUSH
5072: LD_INT 100
5074: DIVREAL
5075: PUSH
5076: LD_INT 2100
5078: PPUSH
5079: LD_INT 2275
5081: PPUSH
5082: CALL_OW 12
5086: MUL
5087: PPUSH
5088: CALL_OW 67
5092: GO 5258
5094: LD_INT 42000
5096: PUSH
5097: LD_INT 1
5099: PLUS
5100: DOUBLE
5101: GREATEREQUAL
5102: IFFALSE 5110
5104: LD_INT 63000
5106: DOUBLE
5107: LESSEQUAL
5108: IFTRUE 5112
5110: GO 5140
5112: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5113: LD_EXP 23
5117: PUSH
5118: LD_INT 100
5120: DIVREAL
5121: PUSH
5122: LD_INT 2275
5124: PPUSH
5125: LD_INT 2450
5127: PPUSH
5128: CALL_OW 12
5132: MUL
5133: PPUSH
5134: CALL_OW 67
5138: GO 5258
5140: LD_INT 63000
5142: PUSH
5143: LD_INT 1
5145: PLUS
5146: DOUBLE
5147: GREATEREQUAL
5148: IFFALSE 5156
5150: LD_INT 105000
5152: DOUBLE
5153: LESSEQUAL
5154: IFTRUE 5158
5156: GO 5186
5158: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5159: LD_EXP 23
5163: PUSH
5164: LD_INT 100
5166: DIVREAL
5167: PUSH
5168: LD_INT 2450
5170: PPUSH
5171: LD_INT 2800
5173: PPUSH
5174: CALL_OW 12
5178: MUL
5179: PPUSH
5180: CALL_OW 67
5184: GO 5258
5186: LD_INT 105000
5188: PUSH
5189: LD_INT 1
5191: PLUS
5192: DOUBLE
5193: GREATEREQUAL
5194: IFFALSE 5202
5196: LD_INT 630000
5198: DOUBLE
5199: LESSEQUAL
5200: IFTRUE 5204
5202: GO 5232
5204: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5205: LD_EXP 23
5209: PUSH
5210: LD_INT 100
5212: DIVREAL
5213: PUSH
5214: LD_INT 2800
5216: PPUSH
5217: LD_INT 3500
5219: PPUSH
5220: CALL_OW 12
5224: MUL
5225: PPUSH
5226: CALL_OW 67
5230: GO 5258
5232: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5233: LD_EXP 23
5237: PUSH
5238: LD_INT 100
5240: DIVREAL
5241: PUSH
5242: LD_INT 3500
5244: PPUSH
5245: LD_INT 3850
5247: PPUSH
5248: CALL_OW 12
5252: MUL
5253: PPUSH
5254: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5258: LD_ADDR_VAR 0 2
5262: PUSH
5263: LD_INT 3
5265: PPUSH
5266: LD_INT 5
5268: PPUSH
5269: CALL_OW 12
5273: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5274: LD_ADDR_VAR 0 1
5278: PUSH
5279: LD_EXP 34
5283: PUSH
5284: LD_INT 0
5286: PUSH
5287: EMPTY
5288: LIST
5289: DIFF
5290: PUSH
5291: FOR_IN
5292: IFFALSE 5341
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5294: LD_VAR 0 2
5298: PPUSH
5299: LD_EXP 39
5303: PUSH
5304: LD_VAR 0 1
5308: ARRAY
5309: PUSH
5310: LD_INT 1
5312: ARRAY
5313: PPUSH
5314: LD_EXP 39
5318: PUSH
5319: LD_VAR 0 1
5323: ARRAY
5324: PUSH
5325: LD_INT 2
5327: ARRAY
5328: PPUSH
5329: LD_INT 20
5331: PPUSH
5332: LD_INT 1
5334: PPUSH
5335: CALL_OW 56
5339: GO 5291
5341: POP
5342: POP
// enable ;
5343: ENABLE
// end ; end_of_file
5344: PPOPN 2
5346: END
// every 20 20$00 trigger apemanNumber do
5347: LD_EXP 46
5351: IFFALSE 5384
5353: GO 5355
5355: DISABLE
// begin enable ;
5356: ENABLE
// if apeLevel >= 8 then
5357: LD_EXP 51
5361: PUSH
5362: LD_INT 8
5364: GREATEREQUAL
5365: IFFALSE 5370
// disable else
5367: DISABLE
5368: GO 5384
// apeLevel := apeLevel + 1 ;
5370: LD_ADDR_EXP 51
5374: PUSH
5375: LD_EXP 51
5379: PUSH
5380: LD_INT 1
5382: PLUS
5383: ST_TO_ADDR
// end ;
5384: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5385: LD_EXP 46
5389: PUSH
5390: LD_EXP 47
5394: LESS
5395: IFFALSE 5535
5397: GO 5399
5399: DISABLE
5400: LD_INT 0
5402: PPUSH
5403: PPUSH
5404: PPUSH
5405: PPUSH
// begin enable ;
5406: ENABLE
// for i := 1 to apemanPos do
5407: LD_ADDR_VAR 0 1
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_EXP 49
5421: PUSH
5422: FOR_TO
5423: IFFALSE 5533
// begin if apemanPlayerCount [ i ] then
5425: LD_EXP 50
5429: PUSH
5430: LD_VAR 0 1
5434: ARRAY
5435: IFFALSE 5531
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5437: LD_EXP 50
5441: PUSH
5442: LD_VAR 0 1
5446: ARRAY
5447: PUSH
5448: LD_EXP 49
5452: PUSH
5453: LD_VAR 0 1
5457: ARRAY
5458: GREATER
5459: IFFALSE 5531
// begin ape := PrepareApeman ;
5461: LD_ADDR_VAR 0 2
5465: PUSH
5466: CALL 6030 0 0
5470: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5471: LD_VAR 0 2
5475: PPUSH
5476: LD_EXP 52
5480: PUSH
5481: LD_VAR 0 1
5485: ARRAY
5486: PPUSH
5487: LD_INT 0
5489: PPUSH
5490: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5494: LD_ADDR_EXP 49
5498: PUSH
5499: LD_EXP 49
5503: PPUSH
5504: LD_VAR 0 1
5508: PPUSH
5509: LD_EXP 49
5513: PUSH
5514: LD_VAR 0 1
5518: ARRAY
5519: PUSH
5520: LD_VAR 0 2
5524: UNION
5525: PPUSH
5526: CALL_OW 1
5530: ST_TO_ADDR
// end ; end ; end ;
5531: GO 5422
5533: POP
5534: POP
// end ;
5535: PPOPN 4
5537: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5538: LD_INT 0
5540: PPUSH
5541: PPUSH
5542: PPUSH
5543: PPUSH
5544: PPUSH
5545: PPUSH
5546: PPUSH
// playersAmount := 0 ;
5547: LD_ADDR_VAR 0 3
5551: PUSH
5552: LD_INT 0
5554: ST_TO_ADDR
// _apeAreas := [ ApeArea1a , ApeArea1b ] ;
5555: LD_ADDR_VAR 0 7
5559: PUSH
5560: LD_INT 18
5562: PUSH
5563: LD_INT 17
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5570: LD_ADDR_EXP 52
5574: PUSH
5575: LD_INT 0
5577: PUSH
5578: LD_INT 0
5580: PUSH
5581: LD_INT 0
5583: PUSH
5584: LD_INT 0
5586: PUSH
5587: LD_INT 0
5589: PUSH
5590: LD_INT 0
5592: PUSH
5593: LD_INT 0
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: ST_TO_ADDR
// for j = 1 to Side_Positions do
5609: LD_ADDR_VAR 0 4
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_EXP 34
5623: PUSH
5624: FOR_TO
5625: IFFALSE 5692
// if Side_Positions [ j ] then
5627: LD_EXP 34
5631: PUSH
5632: LD_VAR 0 4
5636: ARRAY
5637: IFFALSE 5690
// begin playersAmount := playersAmount + 1 ;
5639: LD_ADDR_VAR 0 3
5643: PUSH
5644: LD_VAR 0 3
5648: PUSH
5649: LD_INT 1
5651: PLUS
5652: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5653: LD_ADDR_EXP 52
5657: PUSH
5658: LD_EXP 52
5662: PPUSH
5663: LD_VAR 0 4
5667: PPUSH
5668: LD_VAR 0 7
5672: PUSH
5673: LD_EXP 34
5677: PUSH
5678: LD_VAR 0 4
5682: ARRAY
5683: ARRAY
5684: PPUSH
5685: CALL_OW 1
5689: ST_TO_ADDR
// end ;
5690: GO 5624
5692: POP
5693: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5694: LD_ADDR_EXP 48
5698: PUSH
5699: LD_INT 3
5701: PUSH
5702: LD_EXP 25
5706: MUL
5707: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5708: LD_ADDR_EXP 46
5712: PUSH
5713: LD_VAR 0 3
5717: PUSH
5718: LD_EXP 48
5722: MUL
5723: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5724: LD_ADDR_EXP 47
5728: PUSH
5729: LD_EXP 46
5733: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5734: LD_ADDR_EXP 49
5738: PUSH
5739: LD_INT 0
5741: PUSH
5742: LD_INT 0
5744: PUSH
5745: LD_INT 0
5747: PUSH
5748: LD_INT 0
5750: PUSH
5751: LD_INT 0
5753: PUSH
5754: LD_INT 0
5756: PUSH
5757: LD_INT 0
5759: PUSH
5760: LD_INT 0
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5773: LD_ADDR_EXP 50
5777: PUSH
5778: LD_INT 0
5780: PUSH
5781: LD_INT 0
5783: PUSH
5784: LD_INT 0
5786: PUSH
5787: LD_INT 0
5789: PUSH
5790: LD_INT 0
5792: PUSH
5793: LD_INT 0
5795: PUSH
5796: LD_INT 0
5798: PUSH
5799: LD_INT 0
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: ST_TO_ADDR
// apeLevel := 1 ;
5812: LD_ADDR_EXP 51
5816: PUSH
5817: LD_INT 1
5819: ST_TO_ADDR
// if not apemanNumber then
5820: LD_EXP 46
5824: NOT
5825: IFFALSE 5829
// exit ;
5827: GO 6025
// for i := 1 to apemanPerPlayer do
5829: LD_ADDR_VAR 0 2
5833: PUSH
5834: DOUBLE
5835: LD_INT 1
5837: DEC
5838: ST_TO_ADDR
5839: LD_EXP 48
5843: PUSH
5844: FOR_TO
5845: IFFALSE 6023
// begin for j := 1 to Side_Positions do
5847: LD_ADDR_VAR 0 4
5851: PUSH
5852: DOUBLE
5853: LD_INT 1
5855: DEC
5856: ST_TO_ADDR
5857: LD_EXP 34
5861: PUSH
5862: FOR_TO
5863: IFFALSE 6019
// if Side_Positions [ j ] then
5865: LD_EXP 34
5869: PUSH
5870: LD_VAR 0 4
5874: ARRAY
5875: IFFALSE 6017
// begin pos := Side_Positions [ j ] ;
5877: LD_ADDR_VAR 0 6
5881: PUSH
5882: LD_EXP 34
5886: PUSH
5887: LD_VAR 0 4
5891: ARRAY
5892: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5893: LD_ADDR_EXP 50
5897: PUSH
5898: LD_EXP 50
5902: PPUSH
5903: LD_VAR 0 4
5907: PPUSH
5908: LD_EXP 50
5912: PUSH
5913: LD_VAR 0 4
5917: ARRAY
5918: PUSH
5919: LD_INT 1
5921: PLUS
5922: PPUSH
5923: CALL_OW 1
5927: ST_TO_ADDR
// ape := PrepareApeman ;
5928: LD_ADDR_VAR 0 5
5932: PUSH
5933: CALL 6030 0 0
5937: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5938: LD_ADDR_EXP 49
5942: PUSH
5943: LD_EXP 49
5947: PPUSH
5948: LD_VAR 0 4
5952: PPUSH
5953: LD_EXP 49
5957: PUSH
5958: LD_VAR 0 4
5962: ARRAY
5963: PPUSH
5964: LD_EXP 49
5968: PUSH
5969: LD_VAR 0 4
5973: ARRAY
5974: PUSH
5975: LD_INT 1
5977: PLUS
5978: PPUSH
5979: LD_VAR 0 5
5983: PPUSH
5984: CALL_OW 1
5988: PPUSH
5989: CALL_OW 1
5993: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5994: LD_VAR 0 5
5998: PPUSH
5999: LD_EXP 52
6003: PUSH
6004: LD_VAR 0 4
6008: ARRAY
6009: PPUSH
6010: LD_INT 0
6012: PPUSH
6013: CALL_OW 49
// end ;
6017: GO 5862
6019: POP
6020: POP
// end ;
6021: GO 5844
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 1
6029: RET
// export function PrepareApeman ; var bonus ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
// uc_side := 0 ;
6034: LD_ADDR_OWVAR 20
6038: PUSH
6039: LD_INT 0
6041: ST_TO_ADDR
// uc_nation := 0 ;
6042: LD_ADDR_OWVAR 21
6046: PUSH
6047: LD_INT 0
6049: ST_TO_ADDR
// InitHc ;
6050: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: LD_INT 1
6061: NEG
6062: PUSH
6063: LD_INT 0
6065: PUSH
6066: LD_INT 1
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 12
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PPUSH
6084: CALL_OW 69
6088: PUSH
6089: LD_INT 3
6091: MOD
6092: PUSH
6093: LD_INT 1
6095: PLUS
6096: ARRAY
6097: ST_TO_ADDR
// hc_class := class_apeman ;
6098: LD_ADDR_OWVAR 28
6102: PUSH
6103: LD_INT 12
6105: ST_TO_ADDR
// hc_gallery :=  ;
6106: LD_ADDR_OWVAR 33
6110: PUSH
6111: LD_STRING 
6113: ST_TO_ADDR
// hc_name :=  ;
6114: LD_ADDR_OWVAR 26
6118: PUSH
6119: LD_STRING 
6121: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6122: LD_ADDR_OWVAR 31
6126: PUSH
6127: LD_EXP 51
6131: PUSH
6132: LD_VAR 0 2
6136: PLUS
6137: PUSH
6138: LD_EXP 51
6142: PUSH
6143: LD_VAR 0 2
6147: PLUS
6148: PUSH
6149: LD_EXP 51
6153: PUSH
6154: LD_VAR 0 2
6158: PLUS
6159: PUSH
6160: LD_EXP 51
6164: PUSH
6165: LD_VAR 0 2
6169: PLUS
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6177: LD_ADDR_OWVAR 35
6181: PUSH
6182: LD_INT 10
6184: PUSH
6185: LD_VAR 0 2
6189: MUL
6190: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6191: LD_ADDR_OWVAR 29
6195: PUSH
6196: LD_INT 12
6198: PUSH
6199: LD_INT 12
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: ST_TO_ADDR
// result := CreateHuman ;
6206: LD_ADDR_VAR 0 1
6210: PUSH
6211: CALL_OW 44
6215: ST_TO_ADDR
// end ;
6216: LD_VAR 0 1
6220: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
6221: LD_INT 0
6223: PPUSH
6224: PPUSH
6225: PPUSH
// if not ape then
6226: LD_VAR 0 1
6230: NOT
6231: IFFALSE 6235
// exit ;
6233: GO 6338
// for i = 1 to apemanPos do
6235: LD_ADDR_VAR 0 4
6239: PUSH
6240: DOUBLE
6241: LD_INT 1
6243: DEC
6244: ST_TO_ADDR
6245: LD_EXP 49
6249: PUSH
6250: FOR_TO
6251: IFFALSE 6285
// if ape in apemanPos [ i ] then
6253: LD_VAR 0 1
6257: PUSH
6258: LD_EXP 49
6262: PUSH
6263: LD_VAR 0 4
6267: ARRAY
6268: IN
6269: IFFALSE 6283
// begin s := i ;
6271: LD_ADDR_VAR 0 3
6275: PUSH
6276: LD_VAR 0 4
6280: ST_TO_ADDR
// break ;
6281: GO 6285
// end ;
6283: GO 6250
6285: POP
6286: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
6287: LD_ADDR_EXP 49
6291: PUSH
6292: LD_EXP 49
6296: PPUSH
6297: LD_VAR 0 3
6301: PPUSH
6302: LD_EXP 49
6306: PUSH
6307: LD_VAR 0 3
6311: ARRAY
6312: PUSH
6313: LD_VAR 0 1
6317: DIFF
6318: PPUSH
6319: CALL_OW 1
6323: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6324: LD_ADDR_EXP 46
6328: PUSH
6329: LD_EXP 46
6333: PUSH
6334: LD_INT 1
6336: MINUS
6337: ST_TO_ADDR
// end ; end_of_file
6338: LD_VAR 0 2
6342: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6343: LD_VAR 0 1
6347: PPUSH
6348: CALL_OW 266
6352: PUSH
6353: LD_INT 0
6355: PUSH
6356: LD_INT 1
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: IN
6363: IFFALSE 6388
// SetBName ( b , @ & GetSide ( b ) ) ;
6365: LD_VAR 0 1
6369: PPUSH
6370: LD_STRING @
6372: PUSH
6373: LD_VAR 0 1
6377: PPUSH
6378: CALL_OW 255
6382: STR
6383: PPUSH
6384: CALL_OW 500
// end ;
6388: PPOPN 2
6390: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6391: LD_VAR 0 1
6395: PPUSH
6396: CALL_OW 266
6400: PUSH
6401: LD_INT 0
6403: PUSH
6404: LD_INT 1
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: IN
6411: IFFALSE 6436
// SetBName ( b , @ & GetSide ( b ) ) ;
6413: LD_VAR 0 1
6417: PPUSH
6418: LD_STRING @
6420: PUSH
6421: LD_VAR 0 1
6425: PPUSH
6426: CALL_OW 255
6430: STR
6431: PPUSH
6432: CALL_OW 500
// end ;
6436: PPOPN 3
6438: END
// on VehicleConstructed ( veh , fac ) do var side ;
6439: LD_INT 0
6441: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6442: LD_VAR 0 1
6446: PPUSH
6447: CALL_OW 263
6451: PUSH
6452: LD_INT 5
6454: EQUAL
6455: IFFALSE 6597
// begin side := GetSide ( veh ) ;
6457: LD_ADDR_VAR 0 3
6461: PUSH
6462: LD_VAR 0 1
6466: PPUSH
6467: CALL_OW 255
6471: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6472: LD_ADDR_EXP 49
6476: PUSH
6477: LD_EXP 49
6481: PPUSH
6482: LD_VAR 0 3
6486: PPUSH
6487: LD_EXP 49
6491: PUSH
6492: LD_VAR 0 3
6496: ARRAY
6497: PPUSH
6498: LD_INT 52
6500: PUSH
6501: EMPTY
6502: LIST
6503: PPUSH
6504: CALL_OW 72
6508: PUSH
6509: LD_INT 22
6511: PUSH
6512: LD_VAR 0 3
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 2
6523: PUSH
6524: LD_INT 33
6526: PUSH
6527: LD_INT 5
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: LD_INT 25
6536: PUSH
6537: LD_INT 12
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 25
6546: PUSH
6547: LD_INT 15
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: LD_INT 25
6556: PUSH
6557: LD_INT 16
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PUSH
6564: LD_INT 25
6566: PUSH
6567: LD_INT 17
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PPUSH
6586: CALL_OW 69
6590: UNION
6591: PPUSH
6592: CALL_OW 1
6596: ST_TO_ADDR
// end ; end ;
6597: PPOPN 3
6599: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6600: LD_INT 0
6602: PPUSH
6603: PPUSH
6604: PPUSH
6605: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6606: LD_VAR 0 1
6610: PPUSH
6611: CALL_OW 257
6615: PUSH
6616: LD_INT 12
6618: PUSH
6619: LD_INT 15
6621: PUSH
6622: LD_INT 17
6624: PUSH
6625: LD_INT 16
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: IN
6634: PUSH
6635: LD_VAR 0 1
6639: PPUSH
6640: CALL_OW 263
6644: PUSH
6645: LD_INT 5
6647: EQUAL
6648: OR
6649: IFFALSE 6660
// ApeKilled ( j ) ;
6651: LD_VAR 0 1
6655: PPUSH
6656: CALL 6221 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6660: LD_VAR 0 1
6664: PPUSH
6665: CALL_OW 266
6669: PUSH
6670: LD_INT 0
6672: PUSH
6673: LD_INT 1
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: IN
6680: IFFALSE 6762
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6682: LD_ADDR_VAR 0 4
6686: PUSH
6687: LD_EXP 34
6691: PUSH
6692: LD_VAR 0 1
6696: PPUSH
6697: CALL_OW 255
6701: ARRAY
6702: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6703: LD_ADDR_VAR 0 2
6707: PUSH
6708: LD_EXP 39
6712: PUSH
6713: LD_VAR 0 4
6717: ARRAY
6718: PUSH
6719: LD_INT 1
6721: ARRAY
6722: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6723: LD_ADDR_VAR 0 3
6727: PUSH
6728: LD_EXP 39
6732: PUSH
6733: LD_VAR 0 4
6737: ARRAY
6738: PUSH
6739: LD_INT 2
6741: ARRAY
6742: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6743: LD_VAR 0 2
6747: PPUSH
6748: LD_VAR 0 3
6752: PPUSH
6753: CALL_OW 420
6757: PPUSH
6758: CALL_OW 419
// end ; end ;
6762: PPOPN 5
6764: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6765: LD_VAR 0 1
6769: PPUSH
6770: LD_VAR 0 2
6774: PPUSH
6775: LD_VAR 0 3
6779: PPUSH
6780: LD_OWVAR 2
6784: PPUSH
6785: CALL 7167 0 4
6789: PPOPN 3
6791: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6792: LD_INT 0
6794: PPUSH
6795: PPUSH
// for un in battle_flags_id do
6796: LD_ADDR_VAR 0 2
6800: PUSH
6801: LD_EXP 44
6805: PUSH
6806: FOR_IN
6807: IFFALSE 6882
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6809: LD_VAR 0 2
6813: PPUSH
6814: LD_INT 1
6816: PUSH
6817: LD_LOC 9
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: LD_LOC 9
6833: PUSH
6834: LD_INT 2
6836: DIV
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 3
6844: PUSH
6845: LD_LOC 9
6849: PUSH
6850: LD_INT 5
6852: DIV
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PUSH
6858: LD_INT 20
6860: PUSH
6861: LD_LOC 9
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 423
6880: GO 6806
6882: POP
6883: POP
// end ;
6884: LD_VAR 0 1
6888: RET
// every 1 do var un ;
6889: GO 6891
6891: DISABLE
6892: LD_INT 0
6894: PPUSH
// begin if not def_morale_flags then
6895: LD_EXP 9
6899: NOT
6900: IFFALSE 6904
// exit ;
6902: GO 6981
// if not morale_decreasing_time then
6904: LD_EXP 24
6908: NOT
6909: IFFALSE 6913
// exit ;
6911: GO 6981
// strength = 100 ;
6913: LD_ADDR_LOC 9
6917: PUSH
6918: LD_INT 100
6920: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6921: LD_EXP 24
6925: PPUSH
6926: CALL_OW 67
// strength := strength - 1 ;
6930: LD_ADDR_LOC 9
6934: PUSH
6935: LD_LOC 9
6939: PUSH
6940: LD_INT 1
6942: MINUS
6943: ST_TO_ADDR
// Update_Flags ;
6944: CALL 6792 0 0
// until not strength ;
6948: LD_LOC 9
6952: NOT
6953: IFFALSE 6921
// for un in battle_flags_id do
6955: LD_ADDR_VAR 0 1
6959: PUSH
6960: LD_EXP 44
6964: PUSH
6965: FOR_IN
6966: IFFALSE 6979
// KillBattleFlag ( un ) ;
6968: LD_VAR 0 1
6972: PPUSH
6973: CALL_OW 419
6977: GO 6965
6979: POP
6980: POP
// end ; end_of_file
6981: PPOPN 1
6983: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6984: LD_INT 0
6986: PPUSH
6987: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6988: LD_ADDR_VAR 0 2
6992: PUSH
6993: LD_STRING #Multi1x1-Time
6995: PUSH
6996: LD_OWVAR 1
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: ST_TO_ADDR
// if WaitServerStrings then
7005: LD_EXP 54
7009: IFFALSE 7027
// AllStrings = AllStrings ^ WaitServerStrings ;
7011: LD_ADDR_VAR 0 2
7015: PUSH
7016: LD_VAR 0 2
7020: PUSH
7021: LD_EXP 54
7025: ADD
7026: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7027: LD_INT 0
7029: PUSH
7030: LD_EXP 29
7034: PUSH
7035: LD_OWVAR 1
7039: MINUS
7040: LESSEQUAL
7041: IFFALSE 7072
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7043: LD_ADDR_VAR 0 2
7047: PUSH
7048: LD_VAR 0 2
7052: PUSH
7053: LD_STRING #allowedsibbomb
7055: PUSH
7056: LD_EXP 29
7060: PUSH
7061: LD_OWVAR 1
7065: MINUS
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: ADD
7071: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7072: LD_INT 0
7074: PUSH
7075: LD_EXP 57
7079: PUSH
7080: LD_OWVAR 1
7084: MINUS
7085: LESSEQUAL
7086: IFFALSE 7117
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7088: LD_ADDR_VAR 0 2
7092: PUSH
7093: LD_VAR 0 2
7097: PUSH
7098: LD_STRING #builduptime
7100: PUSH
7101: LD_EXP 57
7105: PUSH
7106: LD_OWVAR 1
7110: MINUS
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: ADD
7116: ST_TO_ADDR
// if ( ExtraStrings ) then
7117: LD_EXP 53
7121: IFFALSE 7143
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7123: LD_ADDR_VAR 0 2
7127: PUSH
7128: LD_VAR 0 2
7132: PUSH
7133: LD_STRING 
7135: ADD
7136: PUSH
7137: LD_EXP 53
7141: ADD
7142: ST_TO_ADDR
// Display_Strings := AllStrings ;
7143: LD_ADDR_OWVAR 47
7147: PUSH
7148: LD_VAR 0 2
7152: ST_TO_ADDR
// end ;
7153: LD_VAR 0 1
7157: RET
// every 0 0$1 do
7158: GO 7160
7160: DISABLE
// begin ShowTimer ;
7161: CALL 6984 0 0
// enable ;
7165: ENABLE
// end ; end_of_file
7166: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7167: LD_INT 0
7169: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7170: LD_VAR 0 1
7174: PPUSH
7175: CALL_OW 255
7179: PUSH
7180: LD_VAR 0 4
7184: EQUAL
7185: IFFALSE 7204
// begin SetAchievement ( ACH_RAD ) ;
7187: LD_STRING ACH_RAD
7189: PPUSH
7190: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7194: LD_STRING ACH_NL
7196: PPUSH
7197: LD_INT 1
7199: PPUSH
7200: CALL_OW 564
// end end ;
7204: LD_VAR 0 5
7208: RET
// export function SA_Win ( side ) ; begin
7209: LD_INT 0
7211: PPUSH
// case side of 1 :
7212: LD_VAR 0 1
7216: PUSH
7217: LD_INT 1
7219: DOUBLE
7220: EQUAL
7221: IFTRUE 7225
7223: GO 7238
7225: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7226: LD_STRING ACH_AH
7228: PPUSH
7229: LD_INT 1
7231: PPUSH
7232: CALL_OW 564
7236: GO 7401
7238: LD_INT 2
7240: DOUBLE
7241: EQUAL
7242: IFTRUE 7246
7244: GO 7259
7246: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7247: LD_STRING ACH_E
7249: PPUSH
7250: LD_INT 1
7252: PPUSH
7253: CALL_OW 564
7257: GO 7401
7259: LD_INT 3
7261: DOUBLE
7262: EQUAL
7263: IFTRUE 7267
7265: GO 7280
7267: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7268: LD_STRING ACH_OOL
7270: PPUSH
7271: LD_INT 1
7273: PPUSH
7274: CALL_OW 564
7278: GO 7401
7280: LD_INT 1
7282: PUSH
7283: LD_INT 2
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: DOUBLE
7290: EQUAL
7291: IFTRUE 7295
7293: GO 7320
7295: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7296: LD_STRING ACH_AH
7298: PPUSH
7299: LD_REAL  5.00000000000000E-0001
7302: PPUSH
7303: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7307: LD_STRING ACH_E
7309: PPUSH
7310: LD_REAL  5.00000000000000E-0001
7313: PPUSH
7314: CALL_OW 564
// end ; [ 2 , 3 ] :
7318: GO 7401
7320: LD_INT 2
7322: PUSH
7323: LD_INT 3
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: DOUBLE
7330: EQUAL
7331: IFTRUE 7335
7333: GO 7360
7335: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7336: LD_STRING ACH_OOL
7338: PPUSH
7339: LD_REAL  5.00000000000000E-0001
7342: PPUSH
7343: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7347: LD_STRING ACH_E
7349: PPUSH
7350: LD_REAL  5.00000000000000E-0001
7353: PPUSH
7354: CALL_OW 564
// end ; [ 3 , 1 ] :
7358: GO 7401
7360: LD_INT 3
7362: PUSH
7363: LD_INT 1
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: DOUBLE
7370: EQUAL
7371: IFTRUE 7375
7373: GO 7400
7375: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7376: LD_STRING ACH_AH
7378: PPUSH
7379: LD_REAL  5.00000000000000E-0001
7382: PPUSH
7383: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7387: LD_STRING ACH_OOL
7389: PPUSH
7390: LD_REAL  5.00000000000000E-0001
7393: PPUSH
7394: CALL_OW 564
// end ; end ;
7398: GO 7401
7400: POP
// end ; end_of_file
7401: LD_VAR 0 2
7405: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7406: LD_INT 0
7408: PPUSH
7409: PPUSH
// enable ( 98 ) ;
7410: LD_INT 98
7412: ENABLE_MARKED
// GameEnded = false ;
7413: LD_ADDR_LOC 15
7417: PUSH
7418: LD_INT 0
7420: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7421: LD_ADDR_LOC 14
7425: PUSH
7426: LD_INT 0
7428: PUSH
7429: LD_INT 0
7431: PUSH
7432: LD_INT 0
7434: PUSH
7435: LD_INT 0
7437: PUSH
7438: LD_INT 0
7440: PUSH
7441: LD_INT 0
7443: PUSH
7444: LD_INT 0
7446: PUSH
7447: LD_INT 0
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: ST_TO_ADDR
// unfoged = false ;
7460: LD_ADDR_LOC 16
7464: PUSH
7465: LD_INT 0
7467: ST_TO_ADDR
// defeated_specs := [ ] ;
7468: LD_ADDR_LOC 17
7472: PUSH
7473: EMPTY
7474: ST_TO_ADDR
// for i = 1 to side_positions do
7475: LD_ADDR_VAR 0 2
7479: PUSH
7480: DOUBLE
7481: LD_INT 1
7483: DEC
7484: ST_TO_ADDR
7485: LD_EXP 34
7489: PUSH
7490: FOR_TO
7491: IFFALSE 7531
// if not side_positions [ i ] then
7493: LD_EXP 34
7497: PUSH
7498: LD_VAR 0 2
7502: ARRAY
7503: NOT
7504: IFFALSE 7529
// defeated = replace ( defeated , i , true ) ;
7506: LD_ADDR_LOC 14
7510: PUSH
7511: LD_LOC 14
7515: PPUSH
7516: LD_VAR 0 2
7520: PPUSH
7521: LD_INT 1
7523: PPUSH
7524: CALL_OW 1
7528: ST_TO_ADDR
7529: GO 7490
7531: POP
7532: POP
// end ;
7533: LD_VAR 0 1
7537: RET
// function CanWinLoose ; begin
7538: LD_INT 0
7540: PPUSH
// Result := true ;
7541: LD_ADDR_VAR 0 1
7545: PUSH
7546: LD_INT 1
7548: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7549: CALL_OW 518
7553: PUSH
7554: CALL_OW 519
7558: PUSH
7559: LD_INT 0
7561: GREATER
7562: AND
7563: IFFALSE 7573
// Result := false ;
7565: LD_ADDR_VAR 0 1
7569: PUSH
7570: LD_INT 0
7572: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7573: CALL_OW 531
7577: PUSH
7578: CALL_OW 519
7582: PUSH
7583: LD_INT 1
7585: GREATER
7586: AND
7587: IFFALSE 7597
// Result := false ;
7589: LD_ADDR_VAR 0 1
7593: PUSH
7594: LD_INT 0
7596: ST_TO_ADDR
// end ;
7597: LD_VAR 0 1
7601: RET
// export function HasPower ( i ) ; var k , h ; begin
7602: LD_INT 0
7604: PPUSH
7605: PPUSH
7606: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7607: LD_VAR 0 1
7611: PPUSH
7612: CALL_OW 108
7616: NOT
7617: PUSH
7618: LD_EXP 33
7622: PUSH
7623: LD_VAR 0 1
7627: ARRAY
7628: NOT
7629: AND
7630: PUSH
7631: LD_OWVAR 4
7635: AND
7636: IFFALSE 7648
// begin result = false ;
7638: LD_ADDR_VAR 0 2
7642: PUSH
7643: LD_INT 0
7645: ST_TO_ADDR
// end else
7646: GO 7943
// case def_win_rules of 0 :
7648: LD_EXP 30
7652: PUSH
7653: LD_INT 0
7655: DOUBLE
7656: EQUAL
7657: IFTRUE 7661
7659: GO 7824
7661: POP
// if def_people_respawning then
7662: LD_EXP 11
7666: IFFALSE 7757
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7668: LD_ADDR_VAR 0 2
7672: PUSH
7673: LD_INT 22
7675: PUSH
7676: LD_VAR 0 1
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 2
7687: PUSH
7688: LD_INT 21
7690: PUSH
7691: LD_INT 1
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: LD_INT 33
7700: PUSH
7701: LD_INT 3
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 33
7710: PUSH
7711: LD_INT 5
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 30
7720: PUSH
7721: LD_INT 0
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 30
7730: PUSH
7731: LD_INT 1
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PPUSH
7750: CALL_OW 69
7754: ST_TO_ADDR
7755: GO 7822
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7757: LD_ADDR_VAR 0 2
7761: PUSH
7762: LD_INT 22
7764: PUSH
7765: LD_VAR 0 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: LD_INT 2
7776: PUSH
7777: LD_INT 21
7779: PUSH
7780: LD_INT 1
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 33
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 33
7799: PUSH
7800: LD_INT 5
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 69
7821: ST_TO_ADDR
7822: GO 7943
7824: LD_INT 1
7826: DOUBLE
7827: EQUAL
7828: IFTRUE 7832
7830: GO 7871
7832: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7833: LD_ADDR_VAR 0 2
7837: PUSH
7838: LD_INT 22
7840: PUSH
7841: LD_VAR 0 1
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 21
7852: PUSH
7853: LD_INT 1
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PPUSH
7864: CALL_OW 69
7868: ST_TO_ADDR
7869: GO 7943
7871: LD_INT 2
7873: DOUBLE
7874: EQUAL
7875: IFTRUE 7879
7877: GO 7942
7879: POP
// begin h = false ;
7880: LD_ADDR_VAR 0 4
7884: PUSH
7885: LD_INT 0
7887: ST_TO_ADDR
// for k in heroes [ i ] do
7888: LD_ADDR_VAR 0 3
7892: PUSH
7893: LD_EXP 45
7897: PUSH
7898: LD_VAR 0 1
7902: ARRAY
7903: PUSH
7904: FOR_IN
7905: IFFALSE 7928
// if IsLive ( k ) then
7907: LD_VAR 0 3
7911: PPUSH
7912: CALL_OW 300
7916: IFFALSE 7926
// h = true ;
7918: LD_ADDR_VAR 0 4
7922: PUSH
7923: LD_INT 1
7925: ST_TO_ADDR
7926: GO 7904
7928: POP
7929: POP
// Result := h ;
7930: LD_ADDR_VAR 0 2
7934: PUSH
7935: LD_VAR 0 4
7939: ST_TO_ADDR
// end ; end ;
7940: GO 7943
7942: POP
// end ;
7943: LD_VAR 0 2
7947: RET
// function AlliedSides ( i , j ) ; begin
7948: LD_INT 0
7950: PPUSH
// Result := false ;
7951: LD_ADDR_VAR 0 3
7955: PUSH
7956: LD_INT 0
7958: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7959: LD_VAR 0 1
7963: PPUSH
7964: LD_VAR 0 2
7968: PPUSH
7969: CALL_OW 81
7973: PUSH
7974: LD_INT 1
7976: EQUAL
7977: PUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: LD_VAR 0 1
7987: PPUSH
7988: CALL_OW 81
7992: PUSH
7993: LD_INT 1
7995: EQUAL
7996: AND
7997: PUSH
7998: LD_VAR 0 1
8002: PPUSH
8003: CALL_OW 83
8007: AND
8008: PUSH
8009: LD_VAR 0 2
8013: PPUSH
8014: CALL_OW 83
8018: AND
8019: IFFALSE 8029
// Result := true ;
8021: LD_ADDR_VAR 0 3
8025: PUSH
8026: LD_INT 1
8028: ST_TO_ADDR
// end ;
8029: LD_VAR 0 3
8033: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8034: CALL 7538 0 0
8038: PUSH
8039: LD_LOC 15
8043: NOT
8044: AND
8045: IFFALSE 8061
8047: GO 8049
8049: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8050: LD_ADDR_EXP 54
8054: PUSH
8055: LD_STRING #Player-Ended
8057: PUSH
8058: EMPTY
8059: LIST
8060: ST_TO_ADDR
8061: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8062: CALL 7538 0 0
8066: PUSH
8067: LD_LOC 15
8071: AND
8072: IFFALSE 8081
8074: GO 8076
8076: DISABLE
// YouLostInMultiplayer ;
8077: CALL_OW 107
8081: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8082: CALL 7538 0 0
8086: NOT
8087: PUSH
8088: CALL_OW 531
8092: NOT
8093: AND
8094: IFFALSE 8110
8096: GO 8098
8098: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8099: LD_ADDR_EXP 54
8103: PUSH
8104: LD_STRING #server-wait
8106: PUSH
8107: EMPTY
8108: LIST
8109: ST_TO_ADDR
8110: END
// every 100 trigger IAmSpec do
8111: CALL_OW 531
8115: IFFALSE 8131
8117: GO 8119
8119: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8120: LD_ADDR_EXP 54
8124: PUSH
8125: LD_STRING #Player-IAmSpec
8127: PUSH
8128: EMPTY
8129: LIST
8130: ST_TO_ADDR
8131: END
// every 100 trigger GameEnded and IAmSpec do
8132: LD_LOC 15
8136: PUSH
8137: CALL_OW 531
8141: AND
8142: IFFALSE 8151
8144: GO 8146
8146: DISABLE
// YouLostInMultiplayer ;
8147: CALL_OW 107
8151: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8152: CALL 7538 0 0
8156: PUSH
8157: LD_LOC 15
8161: NOT
8162: AND
8163: IFFALSE 8179
8165: GO 8167
8167: DISABLE
// WaitServerStrings = [ $player-win ] ;
8168: LD_ADDR_EXP 54
8172: PUSH
8173: LD_STRING $player-win
8175: PUSH
8176: EMPTY
8177: LIST
8178: ST_TO_ADDR
8179: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8180: CALL 7538 0 0
8184: PUSH
8185: LD_LOC 15
8189: AND
8190: IFFALSE 8214
8192: GO 8194
8194: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8195: LD_EXP 35
8199: PUSH
8200: LD_OWVAR 7
8204: ARRAY
8205: PPUSH
8206: CALL 7209 0 1
// YouWinInMultiplayer ;
8210: CALL_OW 106
// end ;
8214: END
// every 100 trigger isEditor marked 401 do
8215: LD_OWVAR 84
8219: IFFALSE 8235
8221: GO 8223
8223: DISABLE
// Debug_Strings = [ You won ] ;
8224: LD_ADDR_OWVAR 48
8228: PUSH
8229: LD_STRING You won
8231: PUSH
8232: EMPTY
8233: LIST
8234: ST_TO_ADDR
8235: END
// every 100 trigger isEditor marked 400 do
8236: LD_OWVAR 84
8240: IFFALSE 8256
8242: GO 8244
8244: DISABLE
// Debug_Strings = [ You loss ] ;
8245: LD_ADDR_OWVAR 48
8249: PUSH
8250: LD_STRING You loss
8252: PUSH
8253: EMPTY
8254: LIST
8255: ST_TO_ADDR
8256: END
// every 100 marked 98 do var i , un ;
8257: GO 8259
8259: DISABLE
8260: LD_INT 0
8262: PPUSH
8263: PPUSH
// begin for i = 1 to side_positions do
8264: LD_ADDR_VAR 0 1
8268: PUSH
8269: DOUBLE
8270: LD_INT 1
8272: DEC
8273: ST_TO_ADDR
8274: LD_EXP 34
8278: PUSH
8279: FOR_TO
8280: IFFALSE 8367
// begin if side_positions [ i ] then
8282: LD_EXP 34
8286: PUSH
8287: LD_VAR 0 1
8291: ARRAY
8292: IFFALSE 8365
// if not HasPower ( i ) and not defeated [ i ] then
8294: LD_VAR 0 1
8298: PPUSH
8299: CALL 7602 0 1
8303: NOT
8304: PUSH
8305: LD_LOC 14
8309: PUSH
8310: LD_VAR 0 1
8314: ARRAY
8315: NOT
8316: AND
8317: IFFALSE 8365
// begin defeated = replace ( defeated , i , true ) ;
8319: LD_ADDR_LOC 14
8323: PUSH
8324: LD_LOC 14
8328: PPUSH
8329: LD_VAR 0 1
8333: PPUSH
8334: LD_INT 1
8336: PPUSH
8337: CALL_OW 1
8341: ST_TO_ADDR
// if i = mp_player_side then
8342: LD_VAR 0 1
8346: PUSH
8347: LD_OWVAR 7
8351: EQUAL
8352: IFFALSE 8365
// begin Multiplayer_Loose_Message ;
8354: CALL_OW 521
// SetPlayerSpectator ( ) ;
8358: CALL_OW 572
// enable ( 400 ) ;
8362: LD_INT 400
8364: ENABLE_MARKED
// end ; end ; end ;
8365: GO 8279
8367: POP
8368: POP
// DidGameEnd ;
8369: CALL 8384 0 0
// if not GameEnded then
8373: LD_LOC 15
8377: NOT
8378: IFFALSE 8381
// enable ;
8380: ENABLE
// end ;
8381: PPOPN 2
8383: END
// function DidGameEnd ; var i , k , enemy ; begin
8384: LD_INT 0
8386: PPUSH
8387: PPUSH
8388: PPUSH
8389: PPUSH
// enemy = [ ] ;
8390: LD_ADDR_VAR 0 4
8394: PUSH
8395: EMPTY
8396: ST_TO_ADDR
// for i = 1 to side_positions do
8397: LD_ADDR_VAR 0 2
8401: PUSH
8402: DOUBLE
8403: LD_INT 1
8405: DEC
8406: ST_TO_ADDR
8407: LD_EXP 34
8411: PUSH
8412: FOR_TO
8413: IFFALSE 8507
// if not defeated [ i ] then
8415: LD_LOC 14
8419: PUSH
8420: LD_VAR 0 2
8424: ARRAY
8425: NOT
8426: IFFALSE 8505
// for k = 1 to side_positions do
8428: LD_ADDR_VAR 0 3
8432: PUSH
8433: DOUBLE
8434: LD_INT 1
8436: DEC
8437: ST_TO_ADDR
8438: LD_EXP 34
8442: PUSH
8443: FOR_TO
8444: IFFALSE 8503
// if not defeated [ k ] then
8446: LD_LOC 14
8450: PUSH
8451: LD_VAR 0 3
8455: ARRAY
8456: NOT
8457: IFFALSE 8501
// if not AlliedSides ( i , k ) then
8459: LD_VAR 0 2
8463: PPUSH
8464: LD_VAR 0 3
8468: PPUSH
8469: CALL 7948 0 2
8473: NOT
8474: IFFALSE 8501
// enemy = enemy ^ [ i , k ] ;
8476: LD_ADDR_VAR 0 4
8480: PUSH
8481: LD_VAR 0 4
8485: PUSH
8486: LD_VAR 0 2
8490: PUSH
8491: LD_VAR 0 3
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: ADD
8500: ST_TO_ADDR
8501: GO 8443
8503: POP
8504: POP
8505: GO 8412
8507: POP
8508: POP
// if not enemy then
8509: LD_VAR 0 4
8513: NOT
8514: IFFALSE 8540
// begin GameEnded = true ;
8516: LD_ADDR_LOC 15
8520: PUSH
8521: LD_INT 1
8523: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8524: LD_LOC 14
8528: PUSH
8529: LD_OWVAR 7
8533: ARRAY
8534: NOT
8535: IFFALSE 8540
// enable ( 401 ) ;
8537: LD_INT 401
8539: ENABLE_MARKED
// end ; end ;
8540: LD_VAR 0 1
8544: RET
// function unfog ; var k , friends ; begin
8545: LD_INT 0
8547: PPUSH
8548: PPUSH
8549: PPUSH
// for k = 1 to side_positions do
8550: LD_ADDR_VAR 0 2
8554: PUSH
8555: DOUBLE
8556: LD_INT 1
8558: DEC
8559: ST_TO_ADDR
8560: LD_EXP 34
8564: PUSH
8565: FOR_TO
8566: IFFALSE 8622
// if not defeated [ k ] then
8568: LD_LOC 14
8572: PUSH
8573: LD_VAR 0 2
8577: ARRAY
8578: NOT
8579: IFFALSE 8620
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8581: LD_OWVAR 7
8585: PPUSH
8586: LD_VAR 0 2
8590: PPUSH
8591: CALL_OW 81
8595: PUSH
8596: LD_INT 1
8598: PUSH
8599: EMPTY
8600: LIST
8601: IN
8602: IFFALSE 8620
// friends = friends ^ k ;
8604: LD_ADDR_VAR 0 3
8608: PUSH
8609: LD_VAR 0 3
8613: PUSH
8614: LD_VAR 0 2
8618: ADD
8619: ST_TO_ADDR
8620: GO 8565
8622: POP
8623: POP
// if not friends then
8624: LD_VAR 0 3
8628: NOT
8629: IFFALSE 8643
// begin SetPlayerSpectator ( ) ;
8631: CALL_OW 572
// unfoged = true ;
8635: LD_ADDR_LOC 16
8639: PUSH
8640: LD_INT 1
8642: ST_TO_ADDR
// end ; end ;
8643: LD_VAR 0 1
8647: RET
// export function MakeGameEnd ; begin
8648: LD_INT 0
8650: PPUSH
// SetPlayerSpectator ( ) ;
8651: CALL_OW 572
// unfoged = true ;
8655: LD_ADDR_LOC 16
8659: PUSH
8660: LD_INT 1
8662: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8663: LD_INT 175
8665: PPUSH
8666: CALL_OW 67
// GameEnded = true ;
8670: LD_ADDR_LOC 15
8674: PUSH
8675: LD_INT 1
8677: ST_TO_ADDR
// end ;
8678: LD_VAR 0 1
8682: RET
// export function GetGameEnded ; begin
8683: LD_INT 0
8685: PPUSH
// result = GameEnded ;
8686: LD_ADDR_VAR 0 1
8690: PUSH
8691: LD_LOC 15
8695: ST_TO_ADDR
// end ; end_of_file
8696: LD_VAR 0 1
8700: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8701: LD_INT 0
8703: PPUSH
8704: PPUSH
8705: PPUSH
// for side = 1 to 8 do
8706: LD_ADDR_VAR 0 2
8710: PUSH
8711: DOUBLE
8712: LD_INT 1
8714: DEC
8715: ST_TO_ADDR
8716: LD_INT 8
8718: PUSH
8719: FOR_TO
8720: IFFALSE 8841
// begin for i = 1 to 72 do
8722: LD_ADDR_VAR 0 3
8726: PUSH
8727: DOUBLE
8728: LD_INT 1
8730: DEC
8731: ST_TO_ADDR
8732: LD_INT 72
8734: PUSH
8735: FOR_TO
8736: IFFALSE 8767
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8738: LD_VAR 0 3
8742: PPUSH
8743: LD_VAR 0 2
8747: PPUSH
8748: LD_INT 0
8750: PPUSH
8751: LD_VAR 0 3
8755: PPUSH
8756: CALL_OW 565
8760: PPUSH
8761: CALL_OW 322
8765: GO 8735
8767: POP
8768: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8769: LD_INT 73
8771: PPUSH
8772: LD_VAR 0 2
8776: PPUSH
8777: LD_INT 0
8779: PPUSH
8780: LD_INT 25
8782: PPUSH
8783: CALL_OW 565
8787: PPUSH
8788: CALL_OW 322
// for i = 0 to 40 do
8792: LD_ADDR_VAR 0 3
8796: PUSH
8797: DOUBLE
8798: LD_INT 0
8800: DEC
8801: ST_TO_ADDR
8802: LD_INT 40
8804: PUSH
8805: FOR_TO
8806: IFFALSE 8837
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8808: LD_VAR 0 3
8812: PPUSH
8813: LD_VAR 0 2
8817: PPUSH
8818: LD_INT 1
8820: PPUSH
8821: LD_VAR 0 3
8825: PPUSH
8826: CALL_OW 565
8830: PPUSH
8831: CALL_OW 324
8835: GO 8805
8837: POP
8838: POP
// end ;
8839: GO 8719
8841: POP
8842: POP
// end ;
8843: LD_VAR 0 1
8847: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8848: LD_INT 0
8850: PPUSH
8851: PPUSH
8852: PPUSH
// for side = 1 to 8 do
8853: LD_ADDR_VAR 0 3
8857: PUSH
8858: DOUBLE
8859: LD_INT 1
8861: DEC
8862: ST_TO_ADDR
8863: LD_INT 8
8865: PUSH
8866: FOR_TO
8867: IFFALSE 12863
// begin for i = 1 to 73 do
8869: LD_ADDR_VAR 0 4
8873: PUSH
8874: DOUBLE
8875: LD_INT 1
8877: DEC
8878: ST_TO_ADDR
8879: LD_INT 73
8881: PUSH
8882: FOR_TO
8883: IFFALSE 8904
// SetTech ( i , side , state_disabled ) ;
8885: LD_VAR 0 4
8889: PPUSH
8890: LD_VAR 0 3
8894: PPUSH
8895: LD_INT 0
8897: PPUSH
8898: CALL_OW 322
8902: GO 8882
8904: POP
8905: POP
// for i = 0 to 40 do
8906: LD_ADDR_VAR 0 4
8910: PUSH
8911: DOUBLE
8912: LD_INT 0
8914: DEC
8915: ST_TO_ADDR
8916: LD_INT 40
8918: PUSH
8919: FOR_TO
8920: IFFALSE 8941
// SetRestrict ( i , side , false ) ;
8922: LD_VAR 0 4
8926: PPUSH
8927: LD_VAR 0 3
8931: PPUSH
8932: LD_INT 0
8934: PPUSH
8935: CALL_OW 324
8939: GO 8919
8941: POP
8942: POP
// case level of 1 :
8943: LD_VAR 0 1
8947: PUSH
8948: LD_INT 1
8950: DOUBLE
8951: EQUAL
8952: IFTRUE 8956
8954: GO 9109
8956: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8957: LD_INT 35
8959: PPUSH
8960: LD_VAR 0 3
8964: PPUSH
8965: LD_INT 1
8967: PPUSH
8968: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8972: LD_INT 45
8974: PPUSH
8975: LD_VAR 0 3
8979: PPUSH
8980: LD_INT 1
8982: PPUSH
8983: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8987: LD_INT 46
8989: PPUSH
8990: LD_VAR 0 3
8994: PPUSH
8995: LD_INT 1
8997: PPUSH
8998: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9002: LD_INT 47
9004: PPUSH
9005: LD_VAR 0 3
9009: PPUSH
9010: LD_INT 1
9012: PPUSH
9013: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9017: LD_INT 0
9019: PPUSH
9020: LD_VAR 0 3
9024: PPUSH
9025: LD_INT 1
9027: PPUSH
9028: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9032: LD_INT 2
9034: PPUSH
9035: LD_VAR 0 3
9039: PPUSH
9040: LD_INT 1
9042: PPUSH
9043: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9047: LD_INT 4
9049: PPUSH
9050: LD_VAR 0 3
9054: PPUSH
9055: LD_INT 1
9057: PPUSH
9058: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9062: LD_INT 6
9064: PPUSH
9065: LD_VAR 0 3
9069: PPUSH
9070: LD_INT 1
9072: PPUSH
9073: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9077: LD_INT 29
9079: PPUSH
9080: LD_VAR 0 3
9084: PPUSH
9085: LD_INT 1
9087: PPUSH
9088: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9092: LD_INT 31
9094: PPUSH
9095: LD_VAR 0 3
9099: PPUSH
9100: LD_INT 1
9102: PPUSH
9103: CALL_OW 324
// end ; 2 :
9107: GO 12861
9109: LD_INT 2
9111: DOUBLE
9112: EQUAL
9113: IFTRUE 9117
9115: GO 9315
9117: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9118: LD_INT 35
9120: PPUSH
9121: LD_VAR 0 3
9125: PPUSH
9126: LD_INT 1
9128: PPUSH
9129: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9133: LD_INT 45
9135: PPUSH
9136: LD_VAR 0 3
9140: PPUSH
9141: LD_INT 1
9143: PPUSH
9144: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9148: LD_INT 46
9150: PPUSH
9151: LD_VAR 0 3
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9163: LD_INT 47
9165: PPUSH
9166: LD_VAR 0 3
9170: PPUSH
9171: LD_INT 1
9173: PPUSH
9174: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9178: LD_INT 1
9180: PPUSH
9181: LD_VAR 0 3
9185: PPUSH
9186: LD_INT 1
9188: PPUSH
9189: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9193: LD_INT 2
9195: PPUSH
9196: LD_VAR 0 3
9200: PPUSH
9201: LD_INT 1
9203: PPUSH
9204: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9208: LD_INT 11
9210: PPUSH
9211: LD_VAR 0 3
9215: PPUSH
9216: LD_INT 1
9218: PPUSH
9219: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9223: LD_INT 0
9225: PPUSH
9226: LD_VAR 0 3
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9238: LD_INT 2
9240: PPUSH
9241: LD_VAR 0 3
9245: PPUSH
9246: LD_INT 1
9248: PPUSH
9249: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9253: LD_INT 4
9255: PPUSH
9256: LD_VAR 0 3
9260: PPUSH
9261: LD_INT 1
9263: PPUSH
9264: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9268: LD_INT 6
9270: PPUSH
9271: LD_VAR 0 3
9275: PPUSH
9276: LD_INT 1
9278: PPUSH
9279: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9283: LD_INT 29
9285: PPUSH
9286: LD_VAR 0 3
9290: PPUSH
9291: LD_INT 1
9293: PPUSH
9294: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9298: LD_INT 31
9300: PPUSH
9301: LD_VAR 0 3
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: CALL_OW 324
// end ; 3 :
9313: GO 12861
9315: LD_INT 3
9317: DOUBLE
9318: EQUAL
9319: IFTRUE 9323
9321: GO 9776
9323: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9324: LD_INT 35
9326: PPUSH
9327: LD_VAR 0 3
9331: PPUSH
9332: LD_INT 1
9334: PPUSH
9335: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9339: LD_INT 45
9341: PPUSH
9342: LD_VAR 0 3
9346: PPUSH
9347: LD_INT 1
9349: PPUSH
9350: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9354: LD_INT 46
9356: PPUSH
9357: LD_VAR 0 3
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9369: LD_INT 47
9371: PPUSH
9372: LD_VAR 0 3
9376: PPUSH
9377: LD_INT 1
9379: PPUSH
9380: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9384: LD_INT 1
9386: PPUSH
9387: LD_VAR 0 3
9391: PPUSH
9392: LD_INT 1
9394: PPUSH
9395: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9399: LD_INT 2
9401: PPUSH
9402: LD_VAR 0 3
9406: PPUSH
9407: LD_INT 1
9409: PPUSH
9410: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9414: LD_INT 11
9416: PPUSH
9417: LD_VAR 0 3
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9429: LD_INT 48
9431: PPUSH
9432: LD_VAR 0 3
9436: PPUSH
9437: LD_INT 1
9439: PPUSH
9440: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9444: LD_INT 69
9446: PPUSH
9447: LD_VAR 0 3
9451: PPUSH
9452: LD_INT 1
9454: PPUSH
9455: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9459: LD_INT 39
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: LD_INT 1
9469: PPUSH
9470: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9474: LD_INT 43
9476: PPUSH
9477: LD_VAR 0 3
9481: PPUSH
9482: LD_INT 1
9484: PPUSH
9485: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9489: LD_INT 51
9491: PPUSH
9492: LD_VAR 0 3
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9504: LD_INT 6
9506: PPUSH
9507: LD_VAR 0 3
9511: PPUSH
9512: LD_INT 1
9514: PPUSH
9515: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9519: LD_INT 0
9521: PPUSH
9522: LD_VAR 0 3
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9534: LD_INT 2
9536: PPUSH
9537: LD_VAR 0 3
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9549: LD_INT 3
9551: PPUSH
9552: LD_VAR 0 3
9556: PPUSH
9557: LD_INT 1
9559: PPUSH
9560: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9564: LD_INT 4
9566: PPUSH
9567: LD_VAR 0 3
9571: PPUSH
9572: LD_INT 1
9574: PPUSH
9575: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9579: LD_INT 6
9581: PPUSH
9582: LD_VAR 0 3
9586: PPUSH
9587: LD_INT 1
9589: PPUSH
9590: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9594: LD_INT 7
9596: PPUSH
9597: LD_VAR 0 3
9601: PPUSH
9602: LD_INT 1
9604: PPUSH
9605: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9609: LD_INT 8
9611: PPUSH
9612: LD_VAR 0 3
9616: PPUSH
9617: LD_INT 1
9619: PPUSH
9620: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9624: LD_INT 10
9626: PPUSH
9627: LD_VAR 0 3
9631: PPUSH
9632: LD_INT 1
9634: PPUSH
9635: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9639: LD_INT 15
9641: PPUSH
9642: LD_VAR 0 3
9646: PPUSH
9647: LD_INT 1
9649: PPUSH
9650: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9654: LD_INT 16
9656: PPUSH
9657: LD_VAR 0 3
9661: PPUSH
9662: LD_INT 1
9664: PPUSH
9665: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9669: LD_INT 17
9671: PPUSH
9672: LD_VAR 0 3
9676: PPUSH
9677: LD_INT 1
9679: PPUSH
9680: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9684: LD_INT 20
9686: PPUSH
9687: LD_VAR 0 3
9691: PPUSH
9692: LD_INT 1
9694: PPUSH
9695: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9699: LD_INT 26
9701: PPUSH
9702: LD_VAR 0 3
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9714: LD_INT 27
9716: PPUSH
9717: LD_VAR 0 3
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9729: LD_INT 29
9731: PPUSH
9732: LD_VAR 0 3
9736: PPUSH
9737: LD_INT 1
9739: PPUSH
9740: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9744: LD_INT 31
9746: PPUSH
9747: LD_VAR 0 3
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9759: LD_INT 32
9761: PPUSH
9762: LD_VAR 0 3
9766: PPUSH
9767: LD_INT 1
9769: PPUSH
9770: CALL_OW 324
// end ; 4 :
9774: GO 12861
9776: LD_INT 4
9778: DOUBLE
9779: EQUAL
9780: IFTRUE 9784
9782: GO 10732
9784: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9785: LD_INT 35
9787: PPUSH
9788: LD_VAR 0 3
9792: PPUSH
9793: LD_INT 1
9795: PPUSH
9796: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9800: LD_INT 45
9802: PPUSH
9803: LD_VAR 0 3
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9815: LD_INT 46
9817: PPUSH
9818: LD_VAR 0 3
9822: PPUSH
9823: LD_INT 1
9825: PPUSH
9826: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9830: LD_INT 47
9832: PPUSH
9833: LD_VAR 0 3
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9845: LD_INT 1
9847: PPUSH
9848: LD_VAR 0 3
9852: PPUSH
9853: LD_INT 1
9855: PPUSH
9856: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9860: LD_INT 2
9862: PPUSH
9863: LD_VAR 0 3
9867: PPUSH
9868: LD_INT 1
9870: PPUSH
9871: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9875: LD_INT 11
9877: PPUSH
9878: LD_VAR 0 3
9882: PPUSH
9883: LD_INT 1
9885: PPUSH
9886: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9890: LD_INT 20
9892: PPUSH
9893: LD_VAR 0 3
9897: PPUSH
9898: LD_INT 1
9900: PPUSH
9901: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9905: LD_INT 48
9907: PPUSH
9908: LD_VAR 0 3
9912: PPUSH
9913: LD_INT 1
9915: PPUSH
9916: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9920: LD_INT 49
9922: PPUSH
9923: LD_VAR 0 3
9927: PPUSH
9928: LD_INT 1
9930: PPUSH
9931: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9935: LD_INT 69
9937: PPUSH
9938: LD_VAR 0 3
9942: PPUSH
9943: LD_INT 1
9945: PPUSH
9946: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9950: LD_INT 39
9952: PPUSH
9953: LD_VAR 0 3
9957: PPUSH
9958: LD_INT 1
9960: PPUSH
9961: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9965: LD_INT 34
9967: PPUSH
9968: LD_VAR 0 3
9972: PPUSH
9973: LD_INT 1
9975: PPUSH
9976: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9980: LD_INT 42
9982: PPUSH
9983: LD_VAR 0 3
9987: PPUSH
9988: LD_INT 1
9990: PPUSH
9991: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9995: LD_INT 44
9997: PPUSH
9998: LD_VAR 0 3
10002: PPUSH
10003: LD_INT 1
10005: PPUSH
10006: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10010: LD_INT 41
10012: PPUSH
10013: LD_VAR 0 3
10017: PPUSH
10018: LD_INT 1
10020: PPUSH
10021: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10025: LD_INT 43
10027: PPUSH
10028: LD_VAR 0 3
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10040: LD_INT 70
10042: PPUSH
10043: LD_VAR 0 3
10047: PPUSH
10048: LD_INT 1
10050: PPUSH
10051: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10055: LD_INT 51
10057: PPUSH
10058: LD_VAR 0 3
10062: PPUSH
10063: LD_INT 1
10065: PPUSH
10066: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10070: LD_INT 52
10072: PPUSH
10073: LD_VAR 0 3
10077: PPUSH
10078: LD_INT 1
10080: PPUSH
10081: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10085: LD_INT 6
10087: PPUSH
10088: LD_VAR 0 3
10092: PPUSH
10093: LD_INT 1
10095: PPUSH
10096: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10100: LD_INT 15
10102: PPUSH
10103: LD_VAR 0 3
10107: PPUSH
10108: LD_INT 1
10110: PPUSH
10111: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10115: LD_INT 7
10117: PPUSH
10118: LD_VAR 0 3
10122: PPUSH
10123: LD_INT 1
10125: PPUSH
10126: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10130: LD_INT 12
10132: PPUSH
10133: LD_VAR 0 3
10137: PPUSH
10138: LD_INT 1
10140: PPUSH
10141: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10145: LD_INT 18
10147: PPUSH
10148: LD_VAR 0 3
10152: PPUSH
10153: LD_INT 1
10155: PPUSH
10156: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10160: LD_INT 60
10162: PPUSH
10163: LD_VAR 0 3
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10175: LD_INT 9
10177: PPUSH
10178: LD_VAR 0 3
10182: PPUSH
10183: LD_INT 1
10185: PPUSH
10186: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10190: LD_INT 30
10192: PPUSH
10193: LD_VAR 0 3
10197: PPUSH
10198: LD_INT 1
10200: PPUSH
10201: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10205: LD_INT 37
10207: PPUSH
10208: LD_VAR 0 3
10212: PPUSH
10213: LD_INT 1
10215: PPUSH
10216: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10220: LD_INT 5
10222: PPUSH
10223: LD_VAR 0 3
10227: PPUSH
10228: LD_INT 1
10230: PPUSH
10231: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10235: LD_INT 66
10237: PPUSH
10238: LD_VAR 0 3
10242: PPUSH
10243: LD_INT 1
10245: PPUSH
10246: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10250: LD_INT 21
10252: PPUSH
10253: LD_VAR 0 3
10257: PPUSH
10258: LD_INT 1
10260: PPUSH
10261: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10265: LD_INT 22
10267: PPUSH
10268: LD_VAR 0 3
10272: PPUSH
10273: LD_INT 1
10275: PPUSH
10276: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10280: LD_INT 54
10282: PPUSH
10283: LD_VAR 0 3
10287: PPUSH
10288: LD_INT 1
10290: PPUSH
10291: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10295: LD_INT 0
10297: PPUSH
10298: LD_VAR 0 3
10302: PPUSH
10303: LD_INT 1
10305: PPUSH
10306: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10310: LD_INT 1
10312: PPUSH
10313: LD_VAR 0 3
10317: PPUSH
10318: LD_INT 1
10320: PPUSH
10321: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10325: LD_INT 2
10327: PPUSH
10328: LD_VAR 0 3
10332: PPUSH
10333: LD_INT 1
10335: PPUSH
10336: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10340: LD_INT 3
10342: PPUSH
10343: LD_VAR 0 3
10347: PPUSH
10348: LD_INT 1
10350: PPUSH
10351: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10355: LD_INT 4
10357: PPUSH
10358: LD_VAR 0 3
10362: PPUSH
10363: LD_INT 1
10365: PPUSH
10366: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10370: LD_INT 5
10372: PPUSH
10373: LD_VAR 0 3
10377: PPUSH
10378: LD_INT 1
10380: PPUSH
10381: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10385: LD_INT 6
10387: PPUSH
10388: LD_VAR 0 3
10392: PPUSH
10393: LD_INT 1
10395: PPUSH
10396: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10400: LD_INT 7
10402: PPUSH
10403: LD_VAR 0 3
10407: PPUSH
10408: LD_INT 1
10410: PPUSH
10411: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10415: LD_INT 8
10417: PPUSH
10418: LD_VAR 0 3
10422: PPUSH
10423: LD_INT 1
10425: PPUSH
10426: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10430: LD_INT 10
10432: PPUSH
10433: LD_VAR 0 3
10437: PPUSH
10438: LD_INT 1
10440: PPUSH
10441: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10445: LD_INT 11
10447: PPUSH
10448: LD_VAR 0 3
10452: PPUSH
10453: LD_INT 1
10455: PPUSH
10456: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10460: LD_INT 12
10462: PPUSH
10463: LD_VAR 0 3
10467: PPUSH
10468: LD_INT 1
10470: PPUSH
10471: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10475: LD_INT 13
10477: PPUSH
10478: LD_VAR 0 3
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10490: LD_INT 14
10492: PPUSH
10493: LD_VAR 0 3
10497: PPUSH
10498: LD_INT 1
10500: PPUSH
10501: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10505: LD_INT 15
10507: PPUSH
10508: LD_VAR 0 3
10512: PPUSH
10513: LD_INT 1
10515: PPUSH
10516: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10520: LD_INT 16
10522: PPUSH
10523: LD_VAR 0 3
10527: PPUSH
10528: LD_INT 1
10530: PPUSH
10531: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10535: LD_INT 17
10537: PPUSH
10538: LD_VAR 0 3
10542: PPUSH
10543: LD_INT 1
10545: PPUSH
10546: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10550: LD_INT 19
10552: PPUSH
10553: LD_VAR 0 3
10557: PPUSH
10558: LD_INT 1
10560: PPUSH
10561: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10565: LD_INT 20
10567: PPUSH
10568: LD_VAR 0 3
10572: PPUSH
10573: LD_INT 1
10575: PPUSH
10576: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10580: LD_INT 21
10582: PPUSH
10583: LD_VAR 0 3
10587: PPUSH
10588: LD_INT 1
10590: PPUSH
10591: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10595: LD_INT 23
10597: PPUSH
10598: LD_VAR 0 3
10602: PPUSH
10603: LD_INT 1
10605: PPUSH
10606: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10610: LD_INT 26
10612: PPUSH
10613: LD_VAR 0 3
10617: PPUSH
10618: LD_INT 1
10620: PPUSH
10621: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10625: LD_INT 27
10627: PPUSH
10628: LD_VAR 0 3
10632: PPUSH
10633: LD_INT 1
10635: PPUSH
10636: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10640: LD_INT 28
10642: PPUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: LD_INT 1
10650: PPUSH
10651: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10655: LD_INT 29
10657: PPUSH
10658: LD_VAR 0 3
10662: PPUSH
10663: LD_INT 1
10665: PPUSH
10666: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10670: LD_INT 30
10672: PPUSH
10673: LD_VAR 0 3
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10685: LD_INT 31
10687: PPUSH
10688: LD_VAR 0 3
10692: PPUSH
10693: LD_INT 1
10695: PPUSH
10696: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10700: LD_INT 32
10702: PPUSH
10703: LD_VAR 0 3
10707: PPUSH
10708: LD_INT 1
10710: PPUSH
10711: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10715: LD_INT 36
10717: PPUSH
10718: LD_VAR 0 3
10722: PPUSH
10723: LD_INT 1
10725: PPUSH
10726: CALL_OW 324
// end ; 5 :
10730: GO 12861
10732: LD_INT 5
10734: DOUBLE
10735: EQUAL
10736: IFTRUE 10740
10738: GO 11853
10740: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10741: LD_INT 35
10743: PPUSH
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_INT 1
10751: PPUSH
10752: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10756: LD_INT 45
10758: PPUSH
10759: LD_VAR 0 3
10763: PPUSH
10764: LD_INT 1
10766: PPUSH
10767: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10771: LD_INT 46
10773: PPUSH
10774: LD_VAR 0 3
10778: PPUSH
10779: LD_INT 1
10781: PPUSH
10782: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10786: LD_INT 47
10788: PPUSH
10789: LD_VAR 0 3
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10801: LD_INT 1
10803: PPUSH
10804: LD_VAR 0 3
10808: PPUSH
10809: LD_INT 1
10811: PPUSH
10812: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10816: LD_INT 2
10818: PPUSH
10819: LD_VAR 0 3
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10831: LD_INT 11
10833: PPUSH
10834: LD_VAR 0 3
10838: PPUSH
10839: LD_INT 1
10841: PPUSH
10842: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10846: LD_INT 20
10848: PPUSH
10849: LD_VAR 0 3
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10861: LD_INT 48
10863: PPUSH
10864: LD_VAR 0 3
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10876: LD_INT 49
10878: PPUSH
10879: LD_VAR 0 3
10883: PPUSH
10884: LD_INT 1
10886: PPUSH
10887: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10891: LD_INT 69
10893: PPUSH
10894: LD_VAR 0 3
10898: PPUSH
10899: LD_INT 1
10901: PPUSH
10902: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10906: LD_INT 39
10908: PPUSH
10909: LD_VAR 0 3
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10921: LD_INT 34
10923: PPUSH
10924: LD_VAR 0 3
10928: PPUSH
10929: LD_INT 1
10931: PPUSH
10932: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10936: LD_INT 42
10938: PPUSH
10939: LD_VAR 0 3
10943: PPUSH
10944: LD_INT 1
10946: PPUSH
10947: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10951: LD_INT 44
10953: PPUSH
10954: LD_VAR 0 3
10958: PPUSH
10959: LD_INT 1
10961: PPUSH
10962: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10966: LD_INT 41
10968: PPUSH
10969: LD_VAR 0 3
10973: PPUSH
10974: LD_INT 1
10976: PPUSH
10977: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
10981: LD_INT 40
10983: PPUSH
10984: LD_VAR 0 3
10988: PPUSH
10989: LD_INT 1
10991: PPUSH
10992: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10996: LD_INT 43
10998: PPUSH
10999: LD_VAR 0 3
11003: PPUSH
11004: LD_INT 1
11006: PPUSH
11007: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11011: LD_INT 70
11013: PPUSH
11014: LD_VAR 0 3
11018: PPUSH
11019: LD_INT 1
11021: PPUSH
11022: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11026: LD_INT 51
11028: PPUSH
11029: LD_VAR 0 3
11033: PPUSH
11034: LD_INT 1
11036: PPUSH
11037: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11041: LD_INT 52
11043: PPUSH
11044: LD_VAR 0 3
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11056: LD_INT 6
11058: PPUSH
11059: LD_VAR 0 3
11063: PPUSH
11064: LD_INT 1
11066: PPUSH
11067: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11071: LD_INT 15
11073: PPUSH
11074: LD_VAR 0 3
11078: PPUSH
11079: LD_INT 1
11081: PPUSH
11082: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11086: LD_INT 7
11088: PPUSH
11089: LD_VAR 0 3
11093: PPUSH
11094: LD_INT 1
11096: PPUSH
11097: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11101: LD_INT 12
11103: PPUSH
11104: LD_VAR 0 3
11108: PPUSH
11109: LD_INT 1
11111: PPUSH
11112: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11116: LD_INT 17
11118: PPUSH
11119: LD_VAR 0 3
11123: PPUSH
11124: LD_INT 1
11126: PPUSH
11127: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11131: LD_INT 18
11133: PPUSH
11134: LD_VAR 0 3
11138: PPUSH
11139: LD_INT 1
11141: PPUSH
11142: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11146: LD_INT 60
11148: PPUSH
11149: LD_VAR 0 3
11153: PPUSH
11154: LD_INT 1
11156: PPUSH
11157: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11161: LD_INT 32
11163: PPUSH
11164: LD_VAR 0 3
11168: PPUSH
11169: LD_INT 1
11171: PPUSH
11172: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11176: LD_INT 9
11178: PPUSH
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_INT 1
11186: PPUSH
11187: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11191: LD_INT 57
11193: PPUSH
11194: LD_VAR 0 3
11198: PPUSH
11199: LD_INT 1
11201: PPUSH
11202: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11206: LD_INT 30
11208: PPUSH
11209: LD_VAR 0 3
11213: PPUSH
11214: LD_INT 1
11216: PPUSH
11217: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11221: LD_INT 37
11223: PPUSH
11224: LD_VAR 0 3
11228: PPUSH
11229: LD_INT 1
11231: PPUSH
11232: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11236: LD_INT 63
11238: PPUSH
11239: LD_VAR 0 3
11243: PPUSH
11244: LD_INT 1
11246: PPUSH
11247: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11251: LD_INT 3
11253: PPUSH
11254: LD_VAR 0 3
11258: PPUSH
11259: LD_INT 1
11261: PPUSH
11262: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11266: LD_INT 4
11268: PPUSH
11269: LD_VAR 0 3
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11281: LD_INT 5
11283: PPUSH
11284: LD_VAR 0 3
11288: PPUSH
11289: LD_INT 1
11291: PPUSH
11292: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11296: LD_INT 66
11298: PPUSH
11299: LD_VAR 0 3
11303: PPUSH
11304: LD_INT 1
11306: PPUSH
11307: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11311: LD_INT 21
11313: PPUSH
11314: LD_VAR 0 3
11318: PPUSH
11319: LD_INT 1
11321: PPUSH
11322: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11326: LD_INT 22
11328: PPUSH
11329: LD_VAR 0 3
11333: PPUSH
11334: LD_INT 1
11336: PPUSH
11337: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11341: LD_INT 19
11343: PPUSH
11344: LD_VAR 0 3
11348: PPUSH
11349: LD_INT 1
11351: PPUSH
11352: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11356: LD_INT 54
11358: PPUSH
11359: LD_VAR 0 3
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11371: LD_INT 55
11373: PPUSH
11374: LD_VAR 0 3
11378: PPUSH
11379: LD_INT 1
11381: PPUSH
11382: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11386: LD_INT 0
11388: PPUSH
11389: LD_VAR 0 3
11393: PPUSH
11394: LD_INT 1
11396: PPUSH
11397: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11401: LD_INT 1
11403: PPUSH
11404: LD_VAR 0 3
11408: PPUSH
11409: LD_INT 1
11411: PPUSH
11412: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11416: LD_INT 2
11418: PPUSH
11419: LD_VAR 0 3
11423: PPUSH
11424: LD_INT 1
11426: PPUSH
11427: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11431: LD_INT 3
11433: PPUSH
11434: LD_VAR 0 3
11438: PPUSH
11439: LD_INT 1
11441: PPUSH
11442: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11446: LD_INT 4
11448: PPUSH
11449: LD_VAR 0 3
11453: PPUSH
11454: LD_INT 1
11456: PPUSH
11457: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11461: LD_INT 5
11463: PPUSH
11464: LD_VAR 0 3
11468: PPUSH
11469: LD_INT 1
11471: PPUSH
11472: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11476: LD_INT 6
11478: PPUSH
11479: LD_VAR 0 3
11483: PPUSH
11484: LD_INT 1
11486: PPUSH
11487: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11491: LD_INT 7
11493: PPUSH
11494: LD_VAR 0 3
11498: PPUSH
11499: LD_INT 1
11501: PPUSH
11502: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11506: LD_INT 8
11508: PPUSH
11509: LD_VAR 0 3
11513: PPUSH
11514: LD_INT 1
11516: PPUSH
11517: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11521: LD_INT 10
11523: PPUSH
11524: LD_VAR 0 3
11528: PPUSH
11529: LD_INT 1
11531: PPUSH
11532: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11536: LD_INT 11
11538: PPUSH
11539: LD_VAR 0 3
11543: PPUSH
11544: LD_INT 1
11546: PPUSH
11547: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11551: LD_INT 12
11553: PPUSH
11554: LD_VAR 0 3
11558: PPUSH
11559: LD_INT 1
11561: PPUSH
11562: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11566: LD_INT 13
11568: PPUSH
11569: LD_VAR 0 3
11573: PPUSH
11574: LD_INT 1
11576: PPUSH
11577: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11581: LD_INT 14
11583: PPUSH
11584: LD_VAR 0 3
11588: PPUSH
11589: LD_INT 1
11591: PPUSH
11592: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11596: LD_INT 15
11598: PPUSH
11599: LD_VAR 0 3
11603: PPUSH
11604: LD_INT 1
11606: PPUSH
11607: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11611: LD_INT 16
11613: PPUSH
11614: LD_VAR 0 3
11618: PPUSH
11619: LD_INT 1
11621: PPUSH
11622: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11626: LD_INT 17
11628: PPUSH
11629: LD_VAR 0 3
11633: PPUSH
11634: LD_INT 1
11636: PPUSH
11637: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11641: LD_INT 18
11643: PPUSH
11644: LD_VAR 0 3
11648: PPUSH
11649: LD_INT 1
11651: PPUSH
11652: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11656: LD_INT 19
11658: PPUSH
11659: LD_VAR 0 3
11663: PPUSH
11664: LD_INT 1
11666: PPUSH
11667: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11671: LD_INT 20
11673: PPUSH
11674: LD_VAR 0 3
11678: PPUSH
11679: LD_INT 1
11681: PPUSH
11682: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11686: LD_INT 21
11688: PPUSH
11689: LD_VAR 0 3
11693: PPUSH
11694: LD_INT 1
11696: PPUSH
11697: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11701: LD_INT 23
11703: PPUSH
11704: LD_VAR 0 3
11708: PPUSH
11709: LD_INT 1
11711: PPUSH
11712: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11716: LD_INT 26
11718: PPUSH
11719: LD_VAR 0 3
11723: PPUSH
11724: LD_INT 1
11726: PPUSH
11727: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11731: LD_INT 27
11733: PPUSH
11734: LD_VAR 0 3
11738: PPUSH
11739: LD_INT 1
11741: PPUSH
11742: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11746: LD_INT 28
11748: PPUSH
11749: LD_VAR 0 3
11753: PPUSH
11754: LD_INT 1
11756: PPUSH
11757: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11761: LD_INT 29
11763: PPUSH
11764: LD_VAR 0 3
11768: PPUSH
11769: LD_INT 1
11771: PPUSH
11772: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11776: LD_INT 30
11778: PPUSH
11779: LD_VAR 0 3
11783: PPUSH
11784: LD_INT 1
11786: PPUSH
11787: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11791: LD_INT 31
11793: PPUSH
11794: LD_VAR 0 3
11798: PPUSH
11799: LD_INT 1
11801: PPUSH
11802: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11806: LD_INT 32
11808: PPUSH
11809: LD_VAR 0 3
11813: PPUSH
11814: LD_INT 1
11816: PPUSH
11817: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11821: LD_INT 33
11823: PPUSH
11824: LD_VAR 0 3
11828: PPUSH
11829: LD_INT 1
11831: PPUSH
11832: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11836: LD_INT 36
11838: PPUSH
11839: LD_VAR 0 3
11843: PPUSH
11844: LD_INT 1
11846: PPUSH
11847: CALL_OW 324
// end ; 6 :
11851: GO 12861
11853: LD_INT 6
11855: DOUBLE
11856: EQUAL
11857: IFTRUE 11861
11859: GO 12786
11861: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11862: LD_INT 35
11864: PPUSH
11865: LD_VAR 0 3
11869: PPUSH
11870: LD_INT 1
11872: PPUSH
11873: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11877: LD_INT 45
11879: PPUSH
11880: LD_VAR 0 3
11884: PPUSH
11885: LD_INT 1
11887: PPUSH
11888: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11892: LD_INT 46
11894: PPUSH
11895: LD_VAR 0 3
11899: PPUSH
11900: LD_INT 1
11902: PPUSH
11903: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11907: LD_INT 47
11909: PPUSH
11910: LD_VAR 0 3
11914: PPUSH
11915: LD_INT 1
11917: PPUSH
11918: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11922: LD_INT 1
11924: PPUSH
11925: LD_VAR 0 3
11929: PPUSH
11930: LD_INT 1
11932: PPUSH
11933: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11937: LD_INT 2
11939: PPUSH
11940: LD_VAR 0 3
11944: PPUSH
11945: LD_INT 1
11947: PPUSH
11948: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11952: LD_INT 11
11954: PPUSH
11955: LD_VAR 0 3
11959: PPUSH
11960: LD_INT 1
11962: PPUSH
11963: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11967: LD_INT 20
11969: PPUSH
11970: LD_VAR 0 3
11974: PPUSH
11975: LD_INT 1
11977: PPUSH
11978: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11982: LD_INT 48
11984: PPUSH
11985: LD_VAR 0 3
11989: PPUSH
11990: LD_INT 1
11992: PPUSH
11993: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11997: LD_INT 49
11999: PPUSH
12000: LD_VAR 0 3
12004: PPUSH
12005: LD_INT 1
12007: PPUSH
12008: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12012: LD_INT 50
12014: PPUSH
12015: LD_VAR 0 3
12019: PPUSH
12020: LD_INT 1
12022: PPUSH
12023: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12027: LD_INT 69
12029: PPUSH
12030: LD_VAR 0 3
12034: PPUSH
12035: LD_INT 1
12037: PPUSH
12038: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12042: LD_INT 39
12044: PPUSH
12045: LD_VAR 0 3
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12057: LD_INT 34
12059: PPUSH
12060: LD_VAR 0 3
12064: PPUSH
12065: LD_INT 1
12067: PPUSH
12068: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12072: LD_INT 42
12074: PPUSH
12075: LD_VAR 0 3
12079: PPUSH
12080: LD_INT 1
12082: PPUSH
12083: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12087: LD_INT 44
12089: PPUSH
12090: LD_VAR 0 3
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12102: LD_INT 41
12104: PPUSH
12105: LD_VAR 0 3
12109: PPUSH
12110: LD_INT 1
12112: PPUSH
12113: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12117: LD_INT 13
12119: PPUSH
12120: LD_VAR 0 3
12124: PPUSH
12125: LD_INT 1
12127: PPUSH
12128: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12132: LD_INT 40
12134: PPUSH
12135: LD_VAR 0 3
12139: PPUSH
12140: LD_INT 1
12142: PPUSH
12143: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12147: LD_INT 43
12149: PPUSH
12150: LD_VAR 0 3
12154: PPUSH
12155: LD_INT 1
12157: PPUSH
12158: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12162: LD_INT 70
12164: PPUSH
12165: LD_VAR 0 3
12169: PPUSH
12170: LD_INT 1
12172: PPUSH
12173: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12177: LD_INT 23
12179: PPUSH
12180: LD_VAR 0 3
12184: PPUSH
12185: LD_INT 1
12187: PPUSH
12188: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12192: LD_INT 51
12194: PPUSH
12195: LD_VAR 0 3
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12207: LD_INT 52
12209: PPUSH
12210: LD_VAR 0 3
12214: PPUSH
12215: LD_INT 1
12217: PPUSH
12218: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12222: LD_INT 6
12224: PPUSH
12225: LD_VAR 0 3
12229: PPUSH
12230: LD_INT 1
12232: PPUSH
12233: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12237: LD_INT 15
12239: PPUSH
12240: LD_VAR 0 3
12244: PPUSH
12245: LD_INT 1
12247: PPUSH
12248: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12252: LD_INT 7
12254: PPUSH
12255: LD_VAR 0 3
12259: PPUSH
12260: LD_INT 1
12262: PPUSH
12263: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12267: LD_INT 12
12269: PPUSH
12270: LD_VAR 0 3
12274: PPUSH
12275: LD_INT 1
12277: PPUSH
12278: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12282: LD_INT 10
12284: PPUSH
12285: LD_VAR 0 3
12289: PPUSH
12290: LD_INT 1
12292: PPUSH
12293: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12297: LD_INT 17
12299: PPUSH
12300: LD_VAR 0 3
12304: PPUSH
12305: LD_INT 1
12307: PPUSH
12308: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12312: LD_INT 18
12314: PPUSH
12315: LD_VAR 0 3
12319: PPUSH
12320: LD_INT 1
12322: PPUSH
12323: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12327: LD_INT 60
12329: PPUSH
12330: LD_VAR 0 3
12334: PPUSH
12335: LD_INT 1
12337: PPUSH
12338: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12342: LD_INT 61
12344: PPUSH
12345: LD_VAR 0 3
12349: PPUSH
12350: LD_INT 1
12352: PPUSH
12353: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12357: LD_INT 32
12359: PPUSH
12360: LD_VAR 0 3
12364: PPUSH
12365: LD_INT 1
12367: PPUSH
12368: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12372: LD_INT 27
12374: PPUSH
12375: LD_VAR 0 3
12379: PPUSH
12380: LD_INT 1
12382: PPUSH
12383: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12387: LD_INT 36
12389: PPUSH
12390: LD_VAR 0 3
12394: PPUSH
12395: LD_INT 1
12397: PPUSH
12398: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12402: LD_INT 33
12404: PPUSH
12405: LD_VAR 0 3
12409: PPUSH
12410: LD_INT 1
12412: PPUSH
12413: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12417: LD_INT 9
12419: PPUSH
12420: LD_VAR 0 3
12424: PPUSH
12425: LD_INT 1
12427: PPUSH
12428: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12432: LD_INT 38
12434: PPUSH
12435: LD_VAR 0 3
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12447: LD_INT 57
12449: PPUSH
12450: LD_VAR 0 3
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12462: LD_INT 58
12464: PPUSH
12465: LD_VAR 0 3
12469: PPUSH
12470: LD_INT 1
12472: PPUSH
12473: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12477: LD_INT 28
12479: PPUSH
12480: LD_VAR 0 3
12484: PPUSH
12485: LD_INT 1
12487: PPUSH
12488: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12492: LD_INT 29
12494: PPUSH
12495: LD_VAR 0 3
12499: PPUSH
12500: LD_INT 1
12502: PPUSH
12503: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12507: LD_INT 30
12509: PPUSH
12510: LD_VAR 0 3
12514: PPUSH
12515: LD_INT 1
12517: PPUSH
12518: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12522: LD_INT 37
12524: PPUSH
12525: LD_VAR 0 3
12529: PPUSH
12530: LD_INT 1
12532: PPUSH
12533: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12537: LD_INT 63
12539: PPUSH
12540: LD_VAR 0 3
12544: PPUSH
12545: LD_INT 1
12547: PPUSH
12548: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12552: LD_INT 64
12554: PPUSH
12555: LD_VAR 0 3
12559: PPUSH
12560: LD_INT 1
12562: PPUSH
12563: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12567: LD_INT 3
12569: PPUSH
12570: LD_VAR 0 3
12574: PPUSH
12575: LD_INT 1
12577: PPUSH
12578: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12582: LD_INT 4
12584: PPUSH
12585: LD_VAR 0 3
12589: PPUSH
12590: LD_INT 1
12592: PPUSH
12593: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12597: LD_INT 5
12599: PPUSH
12600: LD_VAR 0 3
12604: PPUSH
12605: LD_INT 1
12607: PPUSH
12608: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12612: LD_INT 8
12614: PPUSH
12615: LD_VAR 0 3
12619: PPUSH
12620: LD_INT 1
12622: PPUSH
12623: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12627: LD_INT 66
12629: PPUSH
12630: LD_VAR 0 3
12634: PPUSH
12635: LD_INT 1
12637: PPUSH
12638: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12642: LD_INT 67
12644: PPUSH
12645: LD_VAR 0 3
12649: PPUSH
12650: LD_INT 1
12652: PPUSH
12653: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12657: LD_INT 21
12659: PPUSH
12660: LD_VAR 0 3
12664: PPUSH
12665: LD_INT 1
12667: PPUSH
12668: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12672: LD_INT 22
12674: PPUSH
12675: LD_VAR 0 3
12679: PPUSH
12680: LD_INT 1
12682: PPUSH
12683: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12687: LD_INT 19
12689: PPUSH
12690: LD_VAR 0 3
12694: PPUSH
12695: LD_INT 1
12697: PPUSH
12698: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12702: LD_INT 26
12704: PPUSH
12705: LD_VAR 0 3
12709: PPUSH
12710: LD_INT 1
12712: PPUSH
12713: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12717: LD_INT 54
12719: PPUSH
12720: LD_VAR 0 3
12724: PPUSH
12725: LD_INT 1
12727: PPUSH
12728: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12732: LD_INT 55
12734: PPUSH
12735: LD_VAR 0 3
12739: PPUSH
12740: LD_INT 1
12742: PPUSH
12743: CALL_OW 322
// for i = 0 to 39 do
12747: LD_ADDR_VAR 0 4
12751: PUSH
12752: DOUBLE
12753: LD_INT 0
12755: DEC
12756: ST_TO_ADDR
12757: LD_INT 39
12759: PUSH
12760: FOR_TO
12761: IFFALSE 12782
// SetRestrict ( i , side , true ) ;
12763: LD_VAR 0 4
12767: PPUSH
12768: LD_VAR 0 3
12772: PPUSH
12773: LD_INT 1
12775: PPUSH
12776: CALL_OW 324
12780: GO 12760
12782: POP
12783: POP
// end ; else
12784: GO 12861
12786: POP
// begin for i = 1 to 73 do
12787: LD_ADDR_VAR 0 4
12791: PUSH
12792: DOUBLE
12793: LD_INT 1
12795: DEC
12796: ST_TO_ADDR
12797: LD_INT 73
12799: PUSH
12800: FOR_TO
12801: IFFALSE 12822
// SetTech ( i , side , state_enabled ) ;
12803: LD_VAR 0 4
12807: PPUSH
12808: LD_VAR 0 3
12812: PPUSH
12813: LD_INT 1
12815: PPUSH
12816: CALL_OW 322
12820: GO 12800
12822: POP
12823: POP
// for i = 0 to 39 do
12824: LD_ADDR_VAR 0 4
12828: PUSH
12829: DOUBLE
12830: LD_INT 0
12832: DEC
12833: ST_TO_ADDR
12834: LD_INT 39
12836: PUSH
12837: FOR_TO
12838: IFFALSE 12859
// SetRestrict ( i , side , true ) ;
12840: LD_VAR 0 4
12844: PPUSH
12845: LD_VAR 0 3
12849: PPUSH
12850: LD_INT 1
12852: PPUSH
12853: CALL_OW 324
12857: GO 12837
12859: POP
12860: POP
// end ; end ; end ;
12861: GO 8866
12863: POP
12864: POP
// end ; end_of_file
12865: LD_VAR 0 2
12869: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12870: LD_INT 0
12872: PPUSH
12873: PPUSH
12874: PPUSH
12875: PPUSH
12876: PPUSH
12877: PPUSH
12878: PPUSH
12879: PPUSH
12880: PPUSH
// for i := 1 to 8 do
12881: LD_ADDR_VAR 0 2
12885: PUSH
12886: DOUBLE
12887: LD_INT 1
12889: DEC
12890: ST_TO_ADDR
12891: LD_INT 8
12893: PUSH
12894: FOR_TO
12895: IFFALSE 13279
// begin if Side_Positions [ i ] then
12897: LD_EXP 34
12901: PUSH
12902: LD_VAR 0 2
12906: ARRAY
12907: IFFALSE 13277
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12909: LD_ADDR_VAR 0 7
12913: PUSH
12914: LD_INT 22
12916: PUSH
12917: LD_VAR 0 2
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 21
12928: PUSH
12929: LD_INT 1
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PPUSH
12940: CALL_OW 69
12944: PUSH
12945: LD_INT 0
12947: PLUS
12948: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12949: LD_ADDR_VAR 0 9
12953: PUSH
12954: LD_INT 22
12956: PUSH
12957: LD_VAR 0 2
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 2
12968: PUSH
12969: LD_INT 30
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PUSH
12979: LD_INT 30
12981: PUSH
12982: LD_INT 1
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: LIST
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PPUSH
12998: CALL_OW 69
13002: ST_TO_ADDR
// crates := 0 ;
13003: LD_ADDR_VAR 0 4
13007: PUSH
13008: LD_INT 0
13010: ST_TO_ADDR
// oil := 0 ;
13011: LD_ADDR_VAR 0 5
13015: PUSH
13016: LD_INT 0
13018: ST_TO_ADDR
// sib := 0 ;
13019: LD_ADDR_VAR 0 6
13023: PUSH
13024: LD_INT 0
13026: ST_TO_ADDR
// if bases then
13027: LD_VAR 0 9
13031: IFFALSE 13137
// begin for j in bases do
13033: LD_ADDR_VAR 0 3
13037: PUSH
13038: LD_VAR 0 9
13042: PUSH
13043: FOR_IN
13044: IFFALSE 13135
// begin base := GetBase ( j ) ;
13046: LD_ADDR_VAR 0 8
13050: PUSH
13051: LD_VAR 0 3
13055: PPUSH
13056: CALL_OW 274
13060: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13061: LD_ADDR_VAR 0 4
13065: PUSH
13066: LD_VAR 0 4
13070: PUSH
13071: LD_VAR 0 8
13075: PPUSH
13076: LD_INT 1
13078: PPUSH
13079: CALL_OW 275
13083: PLUS
13084: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13085: LD_ADDR_VAR 0 5
13089: PUSH
13090: LD_VAR 0 5
13094: PUSH
13095: LD_VAR 0 8
13099: PPUSH
13100: LD_INT 2
13102: PPUSH
13103: CALL_OW 275
13107: PLUS
13108: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13109: LD_ADDR_VAR 0 6
13113: PUSH
13114: LD_VAR 0 6
13118: PUSH
13119: LD_VAR 0 8
13123: PPUSH
13124: LD_INT 3
13126: PPUSH
13127: CALL_OW 275
13131: PLUS
13132: ST_TO_ADDR
// end ;
13133: GO 13043
13135: POP
13136: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13137: LD_STRING setSpecText(
13139: PUSH
13140: LD_VAR 0 2
13144: STR
13145: PUSH
13146: LD_STRING ,
13148: STR
13149: PUSH
13150: LD_INT 2
13152: STR
13153: PUSH
13154: LD_STRING ,
13156: STR
13157: PUSH
13158: LD_VAR 0 4
13162: STR
13163: PUSH
13164: LD_STRING )
13166: STR
13167: PPUSH
13168: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13172: LD_STRING setSpecText(
13174: PUSH
13175: LD_VAR 0 2
13179: STR
13180: PUSH
13181: LD_STRING ,
13183: STR
13184: PUSH
13185: LD_INT 3
13187: STR
13188: PUSH
13189: LD_STRING ,
13191: STR
13192: PUSH
13193: LD_VAR 0 5
13197: STR
13198: PUSH
13199: LD_STRING )
13201: STR
13202: PPUSH
13203: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13207: LD_STRING setSpecText(
13209: PUSH
13210: LD_VAR 0 2
13214: STR
13215: PUSH
13216: LD_STRING ,
13218: STR
13219: PUSH
13220: LD_INT 4
13222: STR
13223: PUSH
13224: LD_STRING ,
13226: STR
13227: PUSH
13228: LD_VAR 0 6
13232: STR
13233: PUSH
13234: LD_STRING )
13236: STR
13237: PPUSH
13238: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13242: LD_STRING setSpecText(
13244: PUSH
13245: LD_VAR 0 2
13249: STR
13250: PUSH
13251: LD_STRING ,
13253: STR
13254: PUSH
13255: LD_INT 5
13257: STR
13258: PUSH
13259: LD_STRING ,
13261: STR
13262: PUSH
13263: LD_VAR 0 7
13267: STR
13268: PUSH
13269: LD_STRING )
13271: STR
13272: PPUSH
13273: CALL_OW 559
// end ; end ;
13277: GO 12894
13279: POP
13280: POP
// end ;
13281: LD_VAR 0 1
13285: RET
// every 0 0$1 do
13286: GO 13288
13288: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13289: LD_STRING setSpecLogoNumber(
13291: PUSH
13292: LD_INT 2
13294: STR
13295: PUSH
13296: LD_STRING ,
13298: STR
13299: PUSH
13300: LD_INT 1
13302: STR
13303: PUSH
13304: LD_STRING )
13306: STR
13307: PPUSH
13308: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13312: LD_STRING setSpecLogoNumber(
13314: PUSH
13315: LD_INT 3
13317: STR
13318: PUSH
13319: LD_STRING ,
13321: STR
13322: PUSH
13323: LD_INT 2
13325: STR
13326: PUSH
13327: LD_STRING )
13329: STR
13330: PPUSH
13331: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13335: LD_STRING setSpecLogoNumber(
13337: PUSH
13338: LD_INT 4
13340: STR
13341: PUSH
13342: LD_STRING ,
13344: STR
13345: PUSH
13346: LD_INT 3
13348: STR
13349: PUSH
13350: LD_STRING )
13352: STR
13353: PPUSH
13354: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13358: LD_STRING setSpecLogoNumber(
13360: PUSH
13361: LD_INT 5
13363: STR
13364: PUSH
13365: LD_STRING ,
13367: STR
13368: PUSH
13369: LD_INT 4
13371: STR
13372: PUSH
13373: LD_STRING )
13375: STR
13376: PPUSH
13377: CALL_OW 559
// end ;
13381: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13382: LD_INT 2
13384: PUSH
13385: LD_INT 30
13387: PUSH
13388: LD_INT 0
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 30
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 69
13414: IFFALSE 13424
13416: GO 13418
13418: DISABLE
// begin enable ;
13419: ENABLE
// UpdateSpectatorBar ;
13420: CALL 12870 0 0
// end ; end_of_file
13424: END
// var respawn , inqueue ; export function init_respawning ; begin
13425: LD_INT 0
13427: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13428: LD_ADDR_LOC 18
13432: PUSH
13433: LD_INT 1
13435: PPUSH
13436: LD_INT 8
13438: PPUSH
13439: CALL_OW 12
13443: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13444: LD_ADDR_LOC 19
13448: PUSH
13449: LD_INT 0
13451: PUSH
13452: LD_INT 0
13454: PUSH
13455: LD_INT 0
13457: PUSH
13458: LD_INT 0
13460: PUSH
13461: LD_INT 0
13463: PUSH
13464: LD_INT 0
13466: PUSH
13467: LD_INT 0
13469: PUSH
13470: LD_INT 0
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: ST_TO_ADDR
// end ;
13483: LD_VAR 0 1
13487: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13488: GO 13490
13490: DISABLE
13491: LD_INT 0
13493: PPUSH
13494: PPUSH
13495: PPUSH
// begin if respawning_time_max = 0 then
13496: LD_EXP 28
13500: PUSH
13501: LD_INT 0
13503: EQUAL
13504: IFFALSE 13508
// exit ;
13506: GO 13916
// if respawn = 8 then
13508: LD_LOC 18
13512: PUSH
13513: LD_INT 8
13515: EQUAL
13516: IFFALSE 13528
// respawn := 1 else
13518: LD_ADDR_LOC 18
13522: PUSH
13523: LD_INT 1
13525: ST_TO_ADDR
13526: GO 13542
// respawn := respawn + 1 ;
13528: LD_ADDR_LOC 18
13532: PUSH
13533: LD_LOC 18
13537: PUSH
13538: LD_INT 1
13540: PLUS
13541: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13542: LD_EXP 34
13546: PUSH
13547: LD_LOC 18
13551: ARRAY
13552: PUSH
13553: LD_LOC 19
13557: PUSH
13558: LD_LOC 18
13562: ARRAY
13563: NOT
13564: AND
13565: IFFALSE 13915
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13567: LD_ADDR_VAR 0 1
13571: PUSH
13572: LD_INT 21
13574: PUSH
13575: LD_INT 1
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 22
13584: PUSH
13585: LD_LOC 18
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 3
13596: PUSH
13597: LD_INT 23
13599: PUSH
13600: LD_INT 0
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: PPUSH
13613: CALL_OW 69
13617: ST_TO_ADDR
// if n < number_of_people then
13618: LD_VAR 0 1
13622: PUSH
13623: LD_EXP 19
13627: LESS
13628: IFFALSE 13912
// begin aktresp := respawn ;
13630: LD_ADDR_VAR 0 3
13634: PUSH
13635: LD_LOC 18
13639: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13640: LD_ADDR_LOC 19
13644: PUSH
13645: LD_LOC 19
13649: PPUSH
13650: LD_VAR 0 3
13654: PPUSH
13655: LD_INT 1
13657: PPUSH
13658: CALL_OW 1
13662: ST_TO_ADDR
// enable ;
13663: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13664: LD_EXP 27
13668: PPUSH
13669: LD_EXP 28
13673: PPUSH
13674: CALL_OW 12
13678: PPUSH
13679: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13683: LD_ADDR_LOC 19
13687: PUSH
13688: LD_LOC 19
13692: PPUSH
13693: LD_VAR 0 3
13697: PPUSH
13698: LD_INT 0
13700: PPUSH
13701: CALL_OW 1
13705: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13706: LD_ADDR_VAR 0 2
13710: PUSH
13711: LD_INT 21
13713: PUSH
13714: LD_INT 3
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 2
13723: PUSH
13724: LD_INT 30
13726: PUSH
13727: LD_INT 0
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 30
13736: PUSH
13737: LD_INT 1
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: LIST
13748: PUSH
13749: LD_INT 50
13751: PUSH
13752: EMPTY
13753: LIST
13754: PUSH
13755: LD_INT 22
13757: PUSH
13758: LD_VAR 0 3
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: PPUSH
13773: CALL_OW 69
13777: ST_TO_ADDR
// if dep = 0 then
13778: LD_VAR 0 2
13782: PUSH
13783: LD_INT 0
13785: EQUAL
13786: IFFALSE 13790
// exit ;
13788: GO 13916
// hc_name :=  ;
13790: LD_ADDR_OWVAR 26
13794: PUSH
13795: LD_STRING 
13797: ST_TO_ADDR
// hc_importance := 0 ;
13798: LD_ADDR_OWVAR 32
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13806: LD_INT 0
13808: PPUSH
13809: LD_INT 0
13811: PPUSH
13812: LD_EXP 20
13816: PUSH
13817: LD_INT 2
13819: DIV
13820: PPUSH
13821: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13825: LD_ADDR_OWVAR 21
13829: PUSH
13830: LD_EXP 35
13834: PUSH
13835: LD_VAR 0 3
13839: ARRAY
13840: ST_TO_ADDR
// uc_side := aktresp ;
13841: LD_ADDR_OWVAR 20
13845: PUSH
13846: LD_VAR 0 3
13850: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13851: LD_ADDR_VAR 0 2
13855: PUSH
13856: LD_VAR 0 2
13860: PUSH
13861: LD_INT 1
13863: PPUSH
13864: LD_VAR 0 2
13868: PPUSH
13869: CALL_OW 12
13873: ARRAY
13874: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
13875: CALL_OW 44
13879: PPUSH
13880: LD_VAR 0 2
13884: PPUSH
13885: CALL_OW 250
13889: PPUSH
13890: LD_VAR 0 2
13894: PPUSH
13895: CALL_OW 251
13899: PPUSH
13900: LD_INT 7
13902: PPUSH
13903: LD_INT 1
13905: PPUSH
13906: CALL_OW 50
// end else
13910: GO 13913
// enable ;
13912: ENABLE
// end else
13913: GO 13916
// enable ;
13915: ENABLE
// end ; end_of_file
13916: PPOPN 3
13918: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13919: LD_INT 0
13921: PPUSH
13922: PPUSH
13923: PPUSH
// BuildUpTime_Delay = 0 ;
13924: LD_ADDR_EXP 57
13928: PUSH
13929: LD_INT 0
13931: ST_TO_ADDR
// if not def_builduptime then
13932: LD_EXP 14
13936: NOT
13937: IFFALSE 13941
// exit ;
13939: GO 14124
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
13941: LD_ADDR_EXP 57
13945: PUSH
13946: LD_INT 8400
13948: PUSH
13949: LD_INT 2100
13951: PUSH
13952: LD_EXP 14
13956: MUL
13957: PLUS
13958: ST_TO_ADDR
// BuildUpTimeActive := true ;
13959: LD_ADDR_EXP 56
13963: PUSH
13964: LD_INT 1
13966: ST_TO_ADDR
// for i := 1 to 8 do
13967: LD_ADDR_VAR 0 2
13971: PUSH
13972: DOUBLE
13973: LD_INT 1
13975: DEC
13976: ST_TO_ADDR
13977: LD_INT 8
13979: PUSH
13980: FOR_TO
13981: IFFALSE 14122
// if Side_Positions [ i ] then
13983: LD_EXP 34
13987: PUSH
13988: LD_VAR 0 2
13992: ARRAY
13993: IFFALSE 14120
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
13995: LD_EXP 55
13999: PUSH
14000: LD_EXP 34
14004: PUSH
14005: LD_VAR 0 2
14009: ARRAY
14010: ARRAY
14011: PPUSH
14012: LD_INT 5
14014: PPUSH
14015: CALL_OW 424
// for j := 1 to 8 do
14019: LD_ADDR_VAR 0 3
14023: PUSH
14024: DOUBLE
14025: LD_INT 1
14027: DEC
14028: ST_TO_ADDR
14029: LD_INT 8
14031: PUSH
14032: FOR_TO
14033: IFFALSE 14118
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14035: LD_EXP 34
14039: PUSH
14040: LD_VAR 0 3
14044: ARRAY
14045: PUSH
14046: LD_EXP 31
14050: PUSH
14051: LD_VAR 0 2
14055: ARRAY
14056: PUSH
14057: LD_EXP 31
14061: PUSH
14062: LD_VAR 0 3
14066: ARRAY
14067: NONEQUAL
14068: PUSH
14069: LD_EXP 36
14073: NOT
14074: PUSH
14075: LD_VAR 0 2
14079: PUSH
14080: LD_VAR 0 3
14084: NONEQUAL
14085: AND
14086: OR
14087: AND
14088: IFFALSE 14116
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14090: LD_VAR 0 3
14094: PPUSH
14095: LD_EXP 55
14099: PUSH
14100: LD_EXP 34
14104: PUSH
14105: LD_VAR 0 2
14109: ARRAY
14110: ARRAY
14111: PPUSH
14112: CALL_OW 333
14116: GO 14032
14118: POP
14119: POP
// end ;
14120: GO 13980
14122: POP
14123: POP
// end ;
14124: LD_VAR 0 1
14128: RET
// export function EndBuildUp ; var i , j ; begin
14129: LD_INT 0
14131: PPUSH
14132: PPUSH
14133: PPUSH
// BuildUpTimeActive := false ;
14134: LD_ADDR_EXP 56
14138: PUSH
14139: LD_INT 0
14141: ST_TO_ADDR
// for i := 1 to 8 do
14142: LD_ADDR_VAR 0 2
14146: PUSH
14147: DOUBLE
14148: LD_INT 1
14150: DEC
14151: ST_TO_ADDR
14152: LD_INT 8
14154: PUSH
14155: FOR_TO
14156: IFFALSE 14297
// if Side_Positions [ i ] then
14158: LD_EXP 34
14162: PUSH
14163: LD_VAR 0 2
14167: ARRAY
14168: IFFALSE 14295
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14170: LD_EXP 55
14174: PUSH
14175: LD_EXP 34
14179: PUSH
14180: LD_VAR 0 2
14184: ARRAY
14185: ARRAY
14186: PPUSH
14187: LD_INT 0
14189: PPUSH
14190: CALL_OW 424
// for j := 1 to 8 do
14194: LD_ADDR_VAR 0 3
14198: PUSH
14199: DOUBLE
14200: LD_INT 1
14202: DEC
14203: ST_TO_ADDR
14204: LD_INT 8
14206: PUSH
14207: FOR_TO
14208: IFFALSE 14293
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14210: LD_EXP 34
14214: PUSH
14215: LD_VAR 0 3
14219: ARRAY
14220: PUSH
14221: LD_EXP 31
14225: PUSH
14226: LD_VAR 0 2
14230: ARRAY
14231: PUSH
14232: LD_EXP 31
14236: PUSH
14237: LD_VAR 0 3
14241: ARRAY
14242: NONEQUAL
14243: PUSH
14244: LD_EXP 36
14248: NOT
14249: PUSH
14250: LD_VAR 0 2
14254: PUSH
14255: LD_VAR 0 3
14259: NONEQUAL
14260: AND
14261: OR
14262: AND
14263: IFFALSE 14291
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14265: LD_VAR 0 3
14269: PPUSH
14270: LD_EXP 55
14274: PUSH
14275: LD_EXP 34
14279: PUSH
14280: LD_VAR 0 2
14284: ARRAY
14285: ARRAY
14286: PPUSH
14287: CALL_OW 334
14291: GO 14207
14293: POP
14294: POP
// end ;
14295: GO 14155
14297: POP
14298: POP
// end ;
14299: LD_VAR 0 1
14303: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14304: LD_EXP 56
14308: IFFALSE 14483
14310: GO 14312
14312: DISABLE
14313: LD_INT 0
14315: PPUSH
14316: PPUSH
// begin for i := 1 to 8 do
14317: LD_ADDR_VAR 0 1
14321: PUSH
14322: DOUBLE
14323: LD_INT 1
14325: DEC
14326: ST_TO_ADDR
14327: LD_INT 8
14329: PUSH
14330: FOR_TO
14331: IFFALSE 14480
// if Side_Positions [ i ] then
14333: LD_EXP 34
14337: PUSH
14338: LD_VAR 0 1
14342: ARRAY
14343: IFFALSE 14478
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14345: LD_ADDR_VAR 0 2
14349: PUSH
14350: LD_EXP 55
14354: PUSH
14355: LD_EXP 34
14359: PUSH
14360: LD_VAR 0 1
14364: ARRAY
14365: ARRAY
14366: PPUSH
14367: LD_INT 2
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 1
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 21
14382: PUSH
14383: LD_INT 2
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 22
14397: PUSH
14398: LD_OWVAR 2
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PPUSH
14411: CALL_OW 70
14415: PUSH
14416: FOR_IN
14417: IFFALSE 14476
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14419: LD_EXP 31
14423: PUSH
14424: LD_VAR 0 1
14428: ARRAY
14429: PUSH
14430: LD_EXP 31
14434: PUSH
14435: LD_OWVAR 2
14439: ARRAY
14440: NONEQUAL
14441: PUSH
14442: LD_EXP 36
14446: NOT
14447: PUSH
14448: LD_VAR 0 1
14452: PUSH
14453: LD_OWVAR 2
14457: NONEQUAL
14458: AND
14459: OR
14460: IFFALSE 14474
// ComMoveToArea ( un , BuildUpEscape ) ;
14462: LD_VAR 0 2
14466: PPUSH
14467: LD_INT 19
14469: PPUSH
14470: CALL_OW 113
14474: GO 14416
14476: POP
14477: POP
14478: GO 14330
14480: POP
14481: POP
// enable ;
14482: ENABLE
// end ;
14483: PPOPN 2
14485: END
// every 0 0$1 trigger def_builduptime do
14486: LD_EXP 14
14490: IFFALSE 14516
14492: GO 14494
14494: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14495: LD_INT 8400
14497: PUSH
14498: LD_EXP 14
14502: PUSH
14503: LD_INT 2100
14505: MUL
14506: PLUS
14507: PPUSH
14508: CALL_OW 67
// EndBuildUp ;
14512: CALL 14129 0 0
// end ;
14516: END
