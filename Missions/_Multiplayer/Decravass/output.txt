// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 344
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 0
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 0
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 344: LD_ADDR_EXP 36
 348: PUSH
 349: LD_EXP 31
 353: PUSH
 354: LD_INT 0
 356: PUSH
 357: EMPTY
 358: LIST
 359: DIFF
 360: PUSH
 361: LD_INT 1
 363: GREATER
 364: ST_TO_ADDR
// if Multiplayer then
 365: LD_OWVAR 4
 369: IFFALSE 576
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 371: LD_ADDR_EXP 1
 375: PUSH
 376: LD_INT 0
 378: PPUSH
 379: CALL_OW 426
 383: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 384: LD_ADDR_EXP 2
 388: PUSH
 389: LD_INT 1
 391: PPUSH
 392: CALL_OW 426
 396: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 397: LD_ADDR_EXP 3
 401: PUSH
 402: LD_INT 2
 404: PPUSH
 405: CALL_OW 426
 409: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 410: LD_ADDR_EXP 4
 414: PUSH
 415: LD_INT 3
 417: PPUSH
 418: CALL_OW 426
 422: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 423: LD_ADDR_EXP 5
 427: PUSH
 428: LD_INT 4
 430: PPUSH
 431: CALL_OW 426
 435: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 436: LD_ADDR_EXP 6
 440: PUSH
 441: LD_INT 5
 443: PPUSH
 444: CALL_OW 426
 448: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 449: LD_ADDR_EXP 7
 453: PUSH
 454: LD_INT 6
 456: PPUSH
 457: CALL_OW 426
 461: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 462: LD_ADDR_EXP 8
 466: PUSH
 467: LD_INT 10
 469: PPUSH
 470: CALL_OW 426
 474: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_INT 11
 482: PPUSH
 483: CALL_OW 426
 487: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 488: LD_ADDR_EXP 10
 492: PUSH
 493: LD_INT 12
 495: PPUSH
 496: CALL_OW 426
 500: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 501: LD_ADDR_EXP 11
 505: PUSH
 506: LD_INT 13
 508: PPUSH
 509: CALL_OW 426
 513: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 514: LD_ADDR_EXP 12
 518: PUSH
 519: LD_INT 14
 521: PPUSH
 522: CALL_OW 426
 526: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 527: LD_ADDR_EXP 13
 531: PUSH
 532: LD_INT 17
 534: PPUSH
 535: CALL_OW 426
 539: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 540: LD_ADDR_EXP 14
 544: PUSH
 545: LD_INT 20
 547: PPUSH
 548: CALL_OW 426
 552: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 553: LD_ADDR_VAR 0 3
 557: PUSH
 558: LD_INT 22
 560: PPUSH
 561: CALL_OW 426
 565: ST_TO_ADDR
// def_win_rules = 0 ;
 566: LD_ADDR_EXP 30
 570: PUSH
 571: LD_INT 0
 573: ST_TO_ADDR
// end else
 574: GO 708
// begin Randomize ;
 576: CALL_OW 10
// def_base_level := 2 ;
 580: LD_ADDR_EXP 1
 584: PUSH
 585: LD_INT 2
 587: ST_TO_ADDR
// def_amount_of_people := 2 ;
 588: LD_ADDR_EXP 2
 592: PUSH
 593: LD_INT 2
 595: ST_TO_ADDR
// def_skill_level := 1 ;
 596: LD_ADDR_EXP 3
 600: PUSH
 601: LD_INT 1
 603: ST_TO_ADDR
// def_starting_resources := 2 ;
 604: LD_ADDR_EXP 4
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_shipments_density := 50 ;
 612: LD_ADDR_EXP 5
 616: PUSH
 617: LD_INT 50
 619: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 620: LD_ADDR_EXP 6
 624: PUSH
 625: LD_INT 2
 627: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 628: LD_ADDR_EXP 7
 632: PUSH
 633: LD_INT 2
 635: ST_TO_ADDR
// def_shared_vision := 1 ;
 636: LD_ADDR_EXP 8
 640: PUSH
 641: LD_INT 1
 643: ST_TO_ADDR
// def_morale_flags := 1 ;
 644: LD_ADDR_EXP 9
 648: PUSH
 649: LD_INT 1
 651: ST_TO_ADDR
// def_siberite_detection := 1 ;
 652: LD_ADDR_EXP 10
 656: PUSH
 657: LD_INT 1
 659: ST_TO_ADDR
// def_people_respawning := 2 ;
 660: LD_ADDR_EXP 11
 664: PUSH
 665: LD_INT 2
 667: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 668: LD_ADDR_EXP 12
 672: PUSH
 673: LD_INT 3
 675: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 676: LD_ADDR_EXP 13
 680: PUSH
 681: LD_INT 2
 683: ST_TO_ADDR
// def_builduptime := 1 ;
 684: LD_ADDR_EXP 14
 688: PUSH
 689: LD_INT 1
 691: ST_TO_ADDR
// tech_level = 4 ;
 692: LD_ADDR_VAR 0 3
 696: PUSH
 697: LD_INT 4
 699: ST_TO_ADDR
// def_win_rules = 0 ;
 700: LD_ADDR_EXP 30
 704: PUSH
 705: LD_INT 0
 707: ST_TO_ADDR
// end ; if isSGUI then
 708: LD_OWVAR 83
 712: IFFALSE 720
// setMpTechs ( ) else
 714: CALL 8723 0 0
 718: GO 733
// SetMpTechLevel ( tech_level + 1 ) ;
 720: LD_VAR 0 3
 724: PUSH
 725: LD_INT 1
 727: PLUS
 728: PPUSH
 729: CALL 8870 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 733: LD_ADDR_EXP 17
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 1
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: PUSH
 752: LD_EXP 1
 756: PUSH
 757: LD_INT 1
 759: PLUS
 760: ARRAY
 761: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 762: LD_ADDR_EXP 18
 766: PUSH
 767: LD_INT 0
 769: PUSH
 770: LD_INT 0
 772: PUSH
 773: LD_INT 2
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: LIST
 780: PUSH
 781: LD_EXP 1
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: ARRAY
 790: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 791: LD_ADDR_EXP 19
 795: PUSH
 796: LD_INT 9
 798: PUSH
 799: LD_INT 12
 801: PUSH
 802: LD_INT 15
 804: PUSH
 805: LD_INT 24
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: LIST
 812: LIST
 813: PUSH
 814: LD_EXP 2
 818: PUSH
 819: LD_INT 1
 821: PLUS
 822: ARRAY
 823: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 824: LD_ADDR_EXP 20
 828: PUSH
 829: LD_INT 2
 831: PUSH
 832: LD_INT 3
 834: PUSH
 835: LD_INT 4
 837: PUSH
 838: LD_INT 5
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_EXP 3
 851: PUSH
 852: LD_INT 1
 854: PLUS
 855: ARRAY
 856: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 857: LD_ADDR_EXP 22
 861: PUSH
 862: LD_INT 0
 864: PUSH
 865: LD_INT 0
 867: PUSH
 868: LD_INT 0
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: PUSH
 876: LD_INT 30
 878: PUSH
 879: LD_INT 0
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 50
 892: PUSH
 893: LD_INT 20
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: PUSH
 904: LD_INT 80
 906: PUSH
 907: LD_INT 40
 909: PUSH
 910: LD_INT 20
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: PUSH
 918: EMPTY
 919: LIST
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_EXP 4
 928: PUSH
 929: LD_INT 1
 931: PLUS
 932: ARRAY
 933: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 934: LD_ADDR_EXP 21
 938: PUSH
 939: LD_INT 10
 941: PUSH
 942: EMPTY
 943: LIST
 944: PUSH
 945: LD_INT 7
 947: PUSH
 948: LD_INT 14
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PUSH
 955: LD_INT 6
 957: PUSH
 958: LD_INT 12
 960: PUSH
 961: LD_INT 18
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: LIST
 968: PUSH
 969: LD_INT 5
 971: PUSH
 972: LD_INT 10
 974: PUSH
 975: LD_INT 15
 977: PUSH
 978: LD_INT 20
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_EXP 4
 997: PUSH
 998: LD_INT 1
1000: PLUS
1001: ARRAY
1002: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1003: LD_ADDR_EXP 23
1007: PUSH
1008: LD_INT 150
1010: PUSH
1011: LD_EXP 5
1015: MINUS
1016: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1017: LD_ADDR_EXP 27
1021: PUSH
1022: LD_INT 0
1024: PUSH
1025: LD_INT 10500
1027: PUSH
1028: LD_INT 6300
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_EXP 11
1040: PUSH
1041: LD_INT 1
1043: PLUS
1044: ARRAY
1045: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1046: LD_ADDR_EXP 28
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: LD_INT 31500
1056: PUSH
1057: LD_INT 10500
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: PUSH
1065: LD_EXP 11
1069: PUSH
1070: LD_INT 1
1072: PLUS
1073: ARRAY
1074: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1075: LD_ADDR_EXP 25
1079: PUSH
1080: LD_INT 0
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 2
1088: PUSH
1089: LD_INT 3
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_EXP 12
1102: PUSH
1103: LD_INT 1
1105: PLUS
1106: ARRAY
1107: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1108: LD_ADDR_EXP 24
1112: PUSH
1113: LD_INT 1
1115: NEG
1116: PUSH
1117: LD_INT 350
1119: PUSH
1120: LD_INT 700
1122: PUSH
1123: LD_INT 1400
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: PUSH
1136: LD_EXP 9
1140: PUSH
1141: LD_INT 1
1143: PLUS
1144: ARRAY
1145: ST_TO_ADDR
// battle_flags_id := [ ] ;
1146: LD_ADDR_EXP 44
1150: PUSH
1151: EMPTY
1152: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1153: LD_EXP 13
1157: PUSH
1158: LD_INT 0
1160: EQUAL
1161: IFFALSE 1173
// siberite_bomb_Delay = 0 else
1163: LD_ADDR_EXP 29
1167: PUSH
1168: LD_INT 0
1170: ST_TO_ADDR
1171: GO 1195
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1173: LD_ADDR_EXP 29
1177: PUSH
1178: LD_EXP 13
1182: PUSH
1183: LD_INT 1
1185: MINUS
1186: PUSH
1187: LD_INT 21000
1189: MUL
1190: PUSH
1191: LD_INT 1
1193: PLUS
1194: ST_TO_ADDR
// end ;
1195: LD_VAR 0 1
1199: RET
// function init_map ; var i , j ; begin
1200: LD_INT 0
1202: PPUSH
1203: PPUSH
1204: PPUSH
// normal_oil_deposits_locations := [ [ 25 , 19 ] , [ 184 , 120 ] ] ;
1205: LD_ADDR_EXP 40
1209: PUSH
1210: LD_INT 25
1212: PUSH
1213: LD_INT 19
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: LD_INT 184
1222: PUSH
1223: LD_INT 120
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 121 , 27 ] , [ 88 , 112 ] ] ;
1234: LD_ADDR_EXP 41
1238: PUSH
1239: LD_INT 121
1241: PUSH
1242: LD_INT 27
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: LD_INT 88
1251: PUSH
1252: LD_INT 112
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 98 , 67 ] , [ 111 , 72 ] ] ;
1263: LD_ADDR_EXP 42
1267: PUSH
1268: LD_INT 98
1270: PUSH
1271: LD_INT 67
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 111
1280: PUSH
1281: LD_INT 72
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 24 , 24 ] , [ 185 , 115 ] ] ;
1292: LD_ADDR_EXP 43
1296: PUSH
1297: LD_INT 24
1299: PUSH
1300: LD_INT 24
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 185
1309: PUSH
1310: LD_INT 115
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: ST_TO_ADDR
// depot_def := [ [ 43 , 37 , 2 ] , [ 166 , 102 , 5 ] ] ;
1321: LD_ADDR_EXP 37
1325: PUSH
1326: LD_INT 43
1328: PUSH
1329: LD_INT 37
1331: PUSH
1332: LD_INT 2
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: PUSH
1340: LD_INT 166
1342: PUSH
1343: LD_INT 102
1345: PUSH
1346: LD_INT 5
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: ST_TO_ADDR
// for i in depot_def do
1358: LD_ADDR_VAR 0 2
1362: PUSH
1363: LD_EXP 37
1367: PUSH
1368: FOR_IN
1369: IFFALSE 1445
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1371: LD_ADDR_EXP 39
1375: PUSH
1376: LD_EXP 39
1380: PUSH
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PPUSH
1390: LD_VAR 0 2
1394: PUSH
1395: LD_INT 3
1397: ARRAY
1398: PPUSH
1399: LD_INT 4
1401: NEG
1402: PPUSH
1403: CALL_OW 272
1407: PUSH
1408: LD_VAR 0 2
1412: PUSH
1413: LD_INT 2
1415: ARRAY
1416: PPUSH
1417: LD_VAR 0 2
1421: PUSH
1422: LD_INT 3
1424: ARRAY
1425: PPUSH
1426: LD_INT 4
1428: NEG
1429: PPUSH
1430: CALL_OW 273
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: EMPTY
1440: LIST
1441: ADD
1442: ST_TO_ADDR
1443: GO 1368
1445: POP
1446: POP
// breastworks_def := [ [ [ 51 , 51 , 5 ] , [ 52 , 36 , 4 ] ] , [ [ 156 , 102 , 1 ] , [ 158 , 88 , 2 ] ] , ] ;
1447: LD_ADDR_EXP 38
1451: PUSH
1452: LD_INT 51
1454: PUSH
1455: LD_INT 51
1457: PUSH
1458: LD_INT 5
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: LD_INT 52
1468: PUSH
1469: LD_INT 36
1471: PUSH
1472: LD_INT 4
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: LIST
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 156
1486: PUSH
1487: LD_INT 102
1489: PUSH
1490: LD_INT 1
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 158
1500: PUSH
1501: LD_INT 88
1503: PUSH
1504: LD_INT 2
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: LIST
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// for i = 1 to Side_Positions do
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: DOUBLE
1526: LD_INT 1
1528: DEC
1529: ST_TO_ADDR
1530: LD_EXP 34
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1659
// begin if not Side_Positions [ i ] then
1538: LD_EXP 34
1542: PUSH
1543: LD_VAR 0 2
1547: ARRAY
1548: NOT
1549: IFFALSE 1553
// continue ;
1551: GO 1535
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
1553: LD_EXP 40
1557: PUSH
1558: LD_EXP 34
1562: PUSH
1563: LD_VAR 0 2
1567: ARRAY
1568: ARRAY
1569: PUSH
1570: LD_INT 1
1572: ARRAY
1573: PPUSH
1574: LD_EXP 40
1578: PUSH
1579: LD_EXP 34
1583: PUSH
1584: LD_VAR 0 2
1588: ARRAY
1589: ARRAY
1590: PUSH
1591: LD_INT 2
1593: ARRAY
1594: PPUSH
1595: LD_INT 2
1597: PPUSH
1598: CALL_OW 62
// if def_extra_oil_deposits then
1602: LD_EXP 6
1606: IFFALSE 1657
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
1608: LD_EXP 41
1612: PUSH
1613: LD_EXP 34
1617: PUSH
1618: LD_VAR 0 2
1622: ARRAY
1623: ARRAY
1624: PUSH
1625: LD_INT 1
1627: ARRAY
1628: PPUSH
1629: LD_EXP 41
1633: PUSH
1634: LD_EXP 34
1638: PUSH
1639: LD_VAR 0 2
1643: ARRAY
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: ARRAY
1649: PPUSH
1650: LD_INT 2
1652: PPUSH
1653: CALL_OW 62
// end ;
1657: GO 1535
1659: POP
1660: POP
// if def_extra_sib_deposits then
1661: LD_EXP 7
1665: IFFALSE 1812
// for i = 1 to Side_Positions do
1667: LD_ADDR_VAR 0 2
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_EXP 34
1681: PUSH
1682: FOR_TO
1683: IFFALSE 1810
// begin if not Side_Positions [ i ] then
1685: LD_EXP 34
1689: PUSH
1690: LD_VAR 0 2
1694: ARRAY
1695: NOT
1696: IFFALSE 1700
// continue ;
1698: GO 1682
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
1700: LD_EXP 42
1704: PUSH
1705: LD_EXP 34
1709: PUSH
1710: LD_VAR 0 2
1714: ARRAY
1715: ARRAY
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: PPUSH
1721: LD_EXP 42
1725: PUSH
1726: LD_EXP 34
1730: PUSH
1731: LD_VAR 0 2
1735: ARRAY
1736: ARRAY
1737: PUSH
1738: LD_INT 2
1740: ARRAY
1741: PPUSH
1742: LD_INT 3
1744: PPUSH
1745: CALL_OW 62
// if def_extra_sib_deposits = 2 then
1749: LD_EXP 7
1753: PUSH
1754: LD_INT 2
1756: EQUAL
1757: IFFALSE 1808
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
1759: LD_EXP 43
1763: PUSH
1764: LD_EXP 34
1768: PUSH
1769: LD_VAR 0 2
1773: ARRAY
1774: ARRAY
1775: PUSH
1776: LD_INT 1
1778: ARRAY
1779: PPUSH
1780: LD_EXP 43
1784: PUSH
1785: LD_EXP 34
1789: PUSH
1790: LD_VAR 0 2
1794: ARRAY
1795: ARRAY
1796: PUSH
1797: LD_INT 2
1799: ARRAY
1800: PPUSH
1801: LD_INT 3
1803: PPUSH
1804: CALL_OW 62
// end ;
1808: GO 1682
1810: POP
1811: POP
// end ;
1812: LD_VAR 0 1
1816: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1817: LD_INT 0
1819: PPUSH
1820: PPUSH
1821: PPUSH
// if not Team_Game then
1822: LD_EXP 36
1826: NOT
1827: IFFALSE 1925
// begin for i = 1 to 8 do
1829: LD_ADDR_VAR 0 2
1833: PUSH
1834: DOUBLE
1835: LD_INT 1
1837: DEC
1838: ST_TO_ADDR
1839: LD_INT 8
1841: PUSH
1842: FOR_TO
1843: IFFALSE 1921
// for j = 1 to 8 do
1845: LD_ADDR_VAR 0 3
1849: PUSH
1850: DOUBLE
1851: LD_INT 1
1853: DEC
1854: ST_TO_ADDR
1855: LD_INT 8
1857: PUSH
1858: FOR_TO
1859: IFFALSE 1917
// if i <> j then
1861: LD_VAR 0 2
1865: PUSH
1866: LD_VAR 0 3
1870: NONEQUAL
1871: IFFALSE 1895
// SetAttitude ( i , j , att_neutral , true ) else
1873: LD_VAR 0 2
1877: PPUSH
1878: LD_VAR 0 3
1882: PPUSH
1883: LD_INT 0
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: CALL_OW 80
1893: GO 1915
// SetAttitude ( i , j , att_friend , true ) ;
1895: LD_VAR 0 2
1899: PPUSH
1900: LD_VAR 0 3
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL_OW 80
1915: GO 1858
1917: POP
1918: POP
1919: GO 1842
1921: POP
1922: POP
// end else
1923: GO 2100
// begin if def_shared_vision then
1925: LD_EXP 8
1929: IFFALSE 1994
// begin for i in Teams do
1931: LD_ADDR_VAR 0 2
1935: PUSH
1936: LD_EXP 32
1940: PUSH
1941: FOR_IN
1942: IFFALSE 1992
// for j = 2 to i do
1944: LD_ADDR_VAR 0 3
1948: PUSH
1949: DOUBLE
1950: LD_INT 2
1952: DEC
1953: ST_TO_ADDR
1954: LD_VAR 0 2
1958: PUSH
1959: FOR_TO
1960: IFFALSE 1988
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1962: LD_VAR 0 2
1966: PUSH
1967: LD_VAR 0 3
1971: ARRAY
1972: PPUSH
1973: LD_VAR 0 2
1977: PUSH
1978: LD_INT 1
1980: ARRAY
1981: PPUSH
1982: CALL_OW 343
1986: GO 1959
1988: POP
1989: POP
1990: GO 1941
1992: POP
1993: POP
// end ; for i = 1 to 8 do
1994: LD_ADDR_VAR 0 2
1998: PUSH
1999: DOUBLE
2000: LD_INT 1
2002: DEC
2003: ST_TO_ADDR
2004: LD_INT 8
2006: PUSH
2007: FOR_TO
2008: IFFALSE 2098
// for j = 1 to 8 do
2010: LD_ADDR_VAR 0 3
2014: PUSH
2015: DOUBLE
2016: LD_INT 1
2018: DEC
2019: ST_TO_ADDR
2020: LD_INT 8
2022: PUSH
2023: FOR_TO
2024: IFFALSE 2094
// if Side_Teams [ i ] = Side_Teams [ j ] then
2026: LD_EXP 31
2030: PUSH
2031: LD_VAR 0 2
2035: ARRAY
2036: PUSH
2037: LD_EXP 31
2041: PUSH
2042: LD_VAR 0 3
2046: ARRAY
2047: EQUAL
2048: IFFALSE 2072
// SetAttitude ( i , j , att_friend , true ) else
2050: LD_VAR 0 2
2054: PPUSH
2055: LD_VAR 0 3
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: LD_INT 1
2065: PPUSH
2066: CALL_OW 80
2070: GO 2092
// SetAttitude ( i , j , att_enemy , true ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_VAR 0 3
2081: PPUSH
2082: LD_INT 2
2084: PPUSH
2085: LD_INT 1
2087: PPUSH
2088: CALL_OW 80
2092: GO 2023
2094: POP
2095: POP
2096: GO 2007
2098: POP
2099: POP
// end ; end ;
2100: LD_VAR 0 1
2104: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2105: LD_INT 0
2107: PPUSH
2108: PPUSH
2109: PPUSH
2110: PPUSH
// result := [ ] ;
2111: LD_ADDR_VAR 0 7
2115: PUSH
2116: EMPTY
2117: ST_TO_ADDR
// for i := 1 to count do
2118: LD_ADDR_VAR 0 8
2122: PUSH
2123: DOUBLE
2124: LD_INT 1
2126: DEC
2127: ST_TO_ADDR
2128: LD_VAR 0 1
2132: PUSH
2133: FOR_TO
2134: IFFALSE 2579
// begin uc_direction := Rand ( 0 , 5 ) ;
2136: LD_ADDR_OWVAR 24
2140: PUSH
2141: LD_INT 0
2143: PPUSH
2144: LD_INT 5
2146: PPUSH
2147: CALL_OW 12
2151: ST_TO_ADDR
// if commander then
2152: LD_LOC 1
2156: IFFALSE 2265
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2158: LD_ADDR_OWVAR 26
2162: PUSH
2163: LD_OWVAR 19
2167: PUSH
2168: LD_OWVAR 20
2172: ARRAY
2173: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2174: LD_INT 1
2176: PPUSH
2177: LD_INT 2
2179: PPUSH
2180: CALL_OW 12
2184: PPUSH
2185: LD_VAR 0 2
2189: PPUSH
2190: LD_EXP 20
2194: PUSH
2195: LD_INT 2
2197: PLUS
2198: PPUSH
2199: CALL_OW 380
// hc_importance := 105 ;
2203: LD_ADDR_OWVAR 32
2207: PUSH
2208: LD_INT 105
2210: ST_TO_ADDR
// commander := false ;
2211: LD_ADDR_LOC 1
2215: PUSH
2216: LD_INT 0
2218: ST_TO_ADDR
// if Multiplayer then
2219: LD_OWVAR 4
2223: IFFALSE 2263
// begin hc_gallery := MULTIAVATARS ;
2225: LD_ADDR_OWVAR 33
2229: PUSH
2230: LD_STRING MULTIAVATARS
2232: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2233: LD_ADDR_OWVAR 34
2237: PUSH
2238: LD_OWVAR 20
2242: PPUSH
2243: CALL_OW 525
2247: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2248: LD_ADDR_OWVAR 27
2252: PUSH
2253: LD_OWVAR 20
2257: PPUSH
2258: CALL_OW 526
2262: ST_TO_ADDR
// end ; end else
2263: GO 2328
// begin hc_name :=  ;
2265: LD_ADDR_OWVAR 26
2269: PUSH
2270: LD_STRING 
2272: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2273: LD_INT 1
2275: PPUSH
2276: LD_INT 2
2278: PPUSH
2279: CALL_OW 12
2283: PPUSH
2284: LD_VAR 0 2
2288: PPUSH
2289: LD_EXP 20
2293: PPUSH
2294: CALL_OW 380
// hc_importance := 0 ;
2298: LD_ADDR_OWVAR 32
2302: PUSH
2303: LD_INT 0
2305: ST_TO_ADDR
// if Multiplayer then
2306: LD_OWVAR 4
2310: IFFALSE 2328
// begin hc_gallery :=  ;
2312: LD_ADDR_OWVAR 33
2316: PUSH
2317: LD_STRING 
2319: ST_TO_ADDR
// hc_face_number := 0 ;
2320: LD_ADDR_OWVAR 34
2324: PUSH
2325: LD_INT 0
2327: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: CALL_OW 44
2337: ST_TO_ADDR
// if global_defined then
2338: LD_LOC 3
2342: IFFALSE 2482
// begin if ( cl = class_soldier ) then
2344: LD_VAR 0 2
2348: PUSH
2349: LD_INT 1
2351: EQUAL
2352: IFFALSE 2372
// j := i + soldiers_created else
2354: LD_ADDR_VAR 0 9
2358: PUSH
2359: LD_VAR 0 8
2363: PUSH
2364: LD_LOC 4
2368: PLUS
2369: ST_TO_ADDR
2370: GO 2382
// j := i ;
2372: LD_ADDR_VAR 0 9
2376: PUSH
2377: LD_VAR 0 8
2381: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2382: LD_LOC 2
2386: PUSH
2387: LD_VAR 0 2
2391: ARRAY
2392: PUSH
2393: LD_VAR 0 9
2397: ARRAY
2398: PPUSH
2399: LD_VAR 0 10
2403: PPUSH
2404: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2408: LD_VAR 0 10
2412: PPUSH
2413: LD_INT 2
2415: PPUSH
2416: LD_LOC 2
2420: PUSH
2421: LD_VAR 0 2
2425: ARRAY
2426: PUSH
2427: LD_VAR 0 9
2431: ARRAY
2432: PPUSH
2433: LD_INT 2
2435: PPUSH
2436: CALL_OW 260
2440: PPUSH
2441: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2445: LD_VAR 0 10
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: LD_LOC 2
2457: PUSH
2458: LD_VAR 0 2
2462: ARRAY
2463: PUSH
2464: LD_VAR 0 9
2468: ARRAY
2469: PPUSH
2470: LD_INT 1
2472: PPUSH
2473: CALL_OW 260
2477: PPUSH
2478: CALL_OW 239
// end ; if building then
2482: LD_VAR 0 6
2486: IFFALSE 2531
// begin SetDir ( un , ( GetDir ( building ) + 3 ) mod 6 ) ;
2488: LD_VAR 0 10
2492: PPUSH
2493: LD_VAR 0 6
2497: PPUSH
2498: CALL_OW 254
2502: PUSH
2503: LD_INT 3
2505: PLUS
2506: PUSH
2507: LD_INT 6
2509: MOD
2510: PPUSH
2511: CALL_OW 233
// PlaceHumanInUnit ( un , building ) end else
2515: LD_VAR 0 10
2519: PPUSH
2520: LD_VAR 0 6
2524: PPUSH
2525: CALL_OW 52
2529: GO 2558
// PlaceUnitXYR ( un , x , y , r , false ) ;
2531: LD_VAR 0 10
2535: PPUSH
2536: LD_VAR 0 3
2540: PPUSH
2541: LD_VAR 0 4
2545: PPUSH
2546: LD_VAR 0 5
2550: PPUSH
2551: LD_INT 0
2553: PPUSH
2554: CALL_OW 50
// result := result ^ [ un ] ;
2558: LD_ADDR_VAR 0 7
2562: PUSH
2563: LD_VAR 0 7
2567: PUSH
2568: LD_VAR 0 10
2572: PUSH
2573: EMPTY
2574: LIST
2575: ADD
2576: ST_TO_ADDR
// end ;
2577: GO 2133
2579: POP
2580: POP
// if not global_defined then
2581: LD_LOC 3
2585: NOT
2586: IFFALSE 2664
// if ( global_units >= cl ) then
2588: LD_LOC 2
2592: PUSH
2593: LD_VAR 0 2
2597: GREATEREQUAL
2598: IFFALSE 2639
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2600: LD_ADDR_LOC 2
2604: PUSH
2605: LD_LOC 2
2609: PPUSH
2610: LD_VAR 0 2
2614: PPUSH
2615: LD_LOC 2
2619: PUSH
2620: LD_VAR 0 2
2624: ARRAY
2625: PUSH
2626: LD_VAR 0 7
2630: ADD
2631: PPUSH
2632: CALL_OW 1
2636: ST_TO_ADDR
2637: GO 2664
// global_units := Replace ( global_units , cl , result ) ;
2639: LD_ADDR_LOC 2
2643: PUSH
2644: LD_LOC 2
2648: PPUSH
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_VAR 0 7
2658: PPUSH
2659: CALL_OW 1
2663: ST_TO_ADDR
// if commander then
2664: LD_LOC 1
2668: IFFALSE 2715
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2670: LD_ADDR_EXP 45
2674: PUSH
2675: LD_EXP 45
2679: PPUSH
2680: LD_OWVAR 20
2684: PPUSH
2685: LD_EXP 45
2689: PUSH
2690: LD_OWVAR 20
2694: ARRAY
2695: PUSH
2696: LD_VAR 0 10
2700: ADD
2701: PPUSH
2702: CALL_OW 1
2706: ST_TO_ADDR
// commander := false ;
2707: LD_ADDR_LOC 1
2711: PUSH
2712: LD_INT 0
2714: ST_TO_ADDR
// end ; end ;
2715: LD_VAR 0 7
2719: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2720: LD_INT 0
2722: PPUSH
2723: PPUSH
2724: PPUSH
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
// if side in [ 0 , 9 ] then
2731: LD_VAR 0 1
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: LD_INT 9
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: IN
2746: IFFALSE 2750
// exit ;
2748: GO 3800
// pos := Side_Positions [ side ] ;
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: LD_EXP 34
2759: PUSH
2760: LD_VAR 0 1
2764: ARRAY
2765: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2766: LD_ADDR_OWVAR 21
2770: PUSH
2771: LD_EXP 35
2775: PUSH
2776: LD_VAR 0 1
2780: ARRAY
2781: ST_TO_ADDR
// uc_side := side ;
2782: LD_ADDR_OWVAR 20
2786: PUSH
2787: LD_VAR 0 1
2791: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2792: LD_ADDR_VAR 0 4
2796: PUSH
2797: LD_EXP 37
2801: PUSH
2802: LD_VAR 0 3
2806: ARRAY
2807: PUSH
2808: LD_INT 1
2810: ARRAY
2811: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2812: LD_ADDR_VAR 0 5
2816: PUSH
2817: LD_EXP 37
2821: PUSH
2822: LD_VAR 0 3
2826: ARRAY
2827: PUSH
2828: LD_INT 2
2830: ARRAY
2831: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2832: LD_ADDR_VAR 0 6
2836: PUSH
2837: LD_EXP 37
2841: PUSH
2842: LD_VAR 0 3
2846: ARRAY
2847: PUSH
2848: LD_INT 3
2850: ARRAY
2851: ST_TO_ADDR
// if is_depot then
2852: LD_EXP 17
2856: IFFALSE 2989
// begin bc_type = b_depot ;
2858: LD_ADDR_OWVAR 42
2862: PUSH
2863: LD_INT 0
2865: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2866: LD_ADDR_VAR 0 10
2870: PUSH
2871: LD_VAR 0 4
2875: PPUSH
2876: LD_VAR 0 5
2880: PPUSH
2881: LD_VAR 0 6
2885: PPUSH
2886: CALL_OW 47
2890: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2891: LD_VAR 0 10
2895: PPUSH
2896: LD_STRING @
2898: PUSH
2899: LD_VAR 0 1
2903: STR
2904: PPUSH
2905: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2909: LD_VAR 0 10
2913: PPUSH
2914: CALL_OW 274
2918: PPUSH
2919: LD_INT 1
2921: PPUSH
2922: LD_EXP 22
2926: PUSH
2927: LD_INT 1
2929: ARRAY
2930: PPUSH
2931: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2935: LD_VAR 0 10
2939: PPUSH
2940: CALL_OW 274
2944: PPUSH
2945: LD_INT 2
2947: PPUSH
2948: LD_EXP 22
2952: PUSH
2953: LD_INT 2
2955: ARRAY
2956: PPUSH
2957: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2961: LD_VAR 0 10
2965: PPUSH
2966: CALL_OW 274
2970: PPUSH
2971: LD_INT 3
2973: PPUSH
2974: LD_EXP 22
2978: PUSH
2979: LD_INT 3
2981: ARRAY
2982: PPUSH
2983: CALL_OW 277
// end else
2987: GO 3133
// begin for i := 1 to 3 do
2989: LD_ADDR_VAR 0 7
2993: PUSH
2994: DOUBLE
2995: LD_INT 1
2997: DEC
2998: ST_TO_ADDR
2999: LD_INT 3
3001: PUSH
3002: FOR_TO
3003: IFFALSE 3131
// begin r := starting_resources [ i ] ;
3005: LD_ADDR_VAR 0 8
3009: PUSH
3010: LD_EXP 22
3014: PUSH
3015: LD_VAR 0 7
3019: ARRAY
3020: ST_TO_ADDR
// while r >= 10 do
3021: LD_VAR 0 8
3025: PUSH
3026: LD_INT 10
3028: GREATEREQUAL
3029: IFFALSE 3129
// if r > 50 then
3031: LD_VAR 0 8
3035: PUSH
3036: LD_INT 50
3038: GREATER
3039: IFFALSE 3085
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3041: LD_VAR 0 7
3045: PPUSH
3046: LD_INT 5
3048: PPUSH
3049: LD_VAR 0 4
3053: PPUSH
3054: LD_VAR 0 5
3058: PPUSH
3059: LD_INT 4
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 60
// r := r - 50 ;
3069: LD_ADDR_VAR 0 8
3073: PUSH
3074: LD_VAR 0 8
3078: PUSH
3079: LD_INT 50
3081: MINUS
3082: ST_TO_ADDR
// end else
3083: GO 3127
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3085: LD_VAR 0 7
3089: PPUSH
3090: LD_VAR 0 8
3094: PUSH
3095: LD_INT 10
3097: DIV
3098: PPUSH
3099: LD_VAR 0 4
3103: PPUSH
3104: LD_VAR 0 5
3108: PPUSH
3109: LD_INT 4
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 60
// r := 0 ;
3119: LD_ADDR_VAR 0 8
3123: PUSH
3124: LD_INT 0
3126: ST_TO_ADDR
// end ;
3127: GO 3021
// end ;
3129: GO 3002
3131: POP
3132: POP
// end ; for r in starting_crates do
3133: LD_ADDR_VAR 0 8
3137: PUSH
3138: LD_EXP 21
3142: PUSH
3143: FOR_IN
3144: IFFALSE 3176
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3146: LD_INT 1
3148: PPUSH
3149: LD_INT 5
3151: PPUSH
3152: LD_VAR 0 4
3156: PPUSH
3157: LD_VAR 0 5
3161: PPUSH
3162: LD_VAR 0 8
3166: PPUSH
3167: LD_INT 0
3169: PPUSH
3170: CALL_OW 60
3174: GO 3143
3176: POP
3177: POP
// if def_morale_flags then
3178: LD_EXP 9
3182: IFFALSE 3321
// begin x := start_def [ pos ] [ 1 ] ;
3184: LD_ADDR_VAR 0 4
3188: PUSH
3189: LD_EXP 39
3193: PUSH
3194: LD_VAR 0 3
3198: ARRAY
3199: PUSH
3200: LD_INT 1
3202: ARRAY
3203: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3204: LD_ADDR_VAR 0 5
3208: PUSH
3209: LD_EXP 39
3213: PUSH
3214: LD_VAR 0 3
3218: ARRAY
3219: PUSH
3220: LD_INT 2
3222: ARRAY
3223: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3224: LD_VAR 0 4
3228: PPUSH
3229: LD_VAR 0 5
3233: PPUSH
3234: LD_INT 12
3236: PPUSH
3237: LD_INT 2
3239: PPUSH
3240: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3244: LD_ADDR_EXP 44
3248: PUSH
3249: LD_EXP 44
3253: PUSH
3254: LD_VAR 0 1
3258: PPUSH
3259: LD_VAR 0 4
3263: PPUSH
3264: LD_VAR 0 5
3268: PPUSH
3269: LD_INT 1
3271: PUSH
3272: LD_INT 100
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PUSH
3279: LD_INT 2
3281: PUSH
3282: LD_INT 50
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PUSH
3289: LD_INT 3
3291: PUSH
3292: LD_INT 20
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 20
3301: PUSH
3302: LD_INT 100
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: PPUSH
3315: CALL_OW 418
3319: ADD
3320: ST_TO_ADDR
// end ; commander := true ;
3321: LD_ADDR_LOC 1
3325: PUSH
3326: LD_INT 1
3328: ST_TO_ADDR
// soldiers_created := 0 ;
3329: LD_ADDR_LOC 4
3333: PUSH
3334: LD_INT 0
3336: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3337: LD_ADDR_VAR 0 7
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_EXP 18
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3506
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3355: LD_ADDR_VAR 0 4
3359: PUSH
3360: LD_EXP 38
3364: PUSH
3365: LD_VAR 0 3
3369: ARRAY
3370: PUSH
3371: LD_VAR 0 7
3375: ARRAY
3376: PUSH
3377: LD_INT 1
3379: ARRAY
3380: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3381: LD_ADDR_VAR 0 5
3385: PUSH
3386: LD_EXP 38
3390: PUSH
3391: LD_VAR 0 3
3395: ARRAY
3396: PUSH
3397: LD_VAR 0 7
3401: ARRAY
3402: PUSH
3403: LD_INT 2
3405: ARRAY
3406: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3407: LD_ADDR_VAR 0 6
3411: PUSH
3412: LD_EXP 38
3416: PUSH
3417: LD_VAR 0 3
3421: ARRAY
3422: PUSH
3423: LD_VAR 0 7
3427: ARRAY
3428: PUSH
3429: LD_INT 3
3431: ARRAY
3432: ST_TO_ADDR
// bc_type := b_breastwork ;
3433: LD_ADDR_OWVAR 42
3437: PUSH
3438: LD_INT 31
3440: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3441: LD_ADDR_VAR 0 9
3445: PUSH
3446: LD_VAR 0 4
3450: PPUSH
3451: LD_VAR 0 5
3455: PPUSH
3456: LD_VAR 0 6
3460: PPUSH
3461: CALL_OW 47
3465: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3466: LD_INT 1
3468: PPUSH
3469: LD_INT 1
3471: PPUSH
3472: LD_INT 0
3474: PPUSH
3475: LD_INT 0
3477: PPUSH
3478: LD_INT 0
3480: PPUSH
3481: LD_VAR 0 9
3485: PPUSH
3486: CALL 2105 0 6
// soldiers_created := soldiers_created + 1 ;
3490: LD_ADDR_LOC 4
3494: PUSH
3495: LD_LOC 4
3499: PUSH
3500: LD_INT 1
3502: PLUS
3503: ST_TO_ADDR
// end ;
3504: GO 3352
3506: POP
3507: POP
// x := start_def [ pos ] [ 1 ] ;
3508: LD_ADDR_VAR 0 4
3512: PUSH
3513: LD_EXP 39
3517: PUSH
3518: LD_VAR 0 3
3522: ARRAY
3523: PUSH
3524: LD_INT 1
3526: ARRAY
3527: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3528: LD_ADDR_VAR 0 5
3532: PUSH
3533: LD_EXP 39
3537: PUSH
3538: LD_VAR 0 3
3542: ARRAY
3543: PUSH
3544: LD_INT 2
3546: ARRAY
3547: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3548: LD_LOC 8
3552: PUSH
3553: LD_EXP 18
3557: MINUS
3558: PPUSH
3559: LD_INT 1
3561: PPUSH
3562: LD_VAR 0 4
3566: PPUSH
3567: LD_VAR 0 5
3571: PPUSH
3572: LD_INT 5
3574: PPUSH
3575: LD_INT 0
3577: PPUSH
3578: CALL 2105 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3582: LD_LOC 5
3586: PPUSH
3587: LD_INT 2
3589: PPUSH
3590: LD_VAR 0 4
3594: PPUSH
3595: LD_VAR 0 5
3599: PPUSH
3600: LD_INT 5
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 2105 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3610: LD_LOC 7
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: LD_VAR 0 4
3622: PPUSH
3623: LD_VAR 0 5
3627: PPUSH
3628: LD_INT 5
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: CALL 2105 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3638: LD_LOC 6
3642: PPUSH
3643: LD_INT 4
3645: PPUSH
3646: LD_VAR 0 4
3650: PPUSH
3651: LD_VAR 0 5
3655: PPUSH
3656: LD_INT 5
3658: PPUSH
3659: LD_INT 0
3661: PPUSH
3662: CALL 2105 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3666: LD_EXP 10
3670: PUSH
3671: LD_INT 20
3673: PPUSH
3674: LD_VAR 0 1
3678: PPUSH
3679: CALL_OW 321
3683: PUSH
3684: LD_INT 1
3686: EQUAL
3687: AND
3688: IFFALSE 3705
// SetTech ( tech_SibDet , side , state_researched ) ;
3690: LD_INT 20
3692: PPUSH
3693: LD_VAR 0 1
3697: PPUSH
3698: LD_INT 2
3700: PPUSH
3701: CALL_OW 322
// if def_siberite_bomb = 1 then
3705: LD_EXP 13
3709: PUSH
3710: LD_INT 1
3712: EQUAL
3713: IFFALSE 3747
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3715: LD_INT 25
3717: PPUSH
3718: LD_VAR 0 1
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3730: LD_INT 73
3732: PPUSH
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 1
3740: PPUSH
3741: CALL_OW 322
// end else
3745: GO 3777
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3747: LD_INT 25
3749: PPUSH
3750: LD_VAR 0 1
3754: PPUSH
3755: LD_INT 0
3757: PPUSH
3758: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3762: LD_INT 73
3764: PPUSH
3765: LD_VAR 0 1
3769: PPUSH
3770: LD_INT 0
3772: PPUSH
3773: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3777: LD_INT 24
3779: PPUSH
3780: LD_VAR 0 1
3784: PPUSH
3785: LD_INT 0
3787: PPUSH
3788: CALL_OW 322
// global_defined := true ;
3792: LD_ADDR_LOC 3
3796: PUSH
3797: LD_INT 1
3799: ST_TO_ADDR
// end ;
3800: LD_VAR 0 2
3804: RET
// function prepare_sides ; var i ; begin
3805: LD_INT 0
3807: PPUSH
3808: PPUSH
// global_units := [ ] ;
3809: LD_ADDR_LOC 2
3813: PUSH
3814: EMPTY
3815: ST_TO_ADDR
// global_defined := false ;
3816: LD_ADDR_LOC 3
3820: PUSH
3821: LD_INT 0
3823: ST_TO_ADDR
// CountClassMembers ;
3824: CALL 3874 0 0
// for i := 1 to 8 do
3828: LD_ADDR_VAR 0 2
3832: PUSH
3833: DOUBLE
3834: LD_INT 1
3836: DEC
3837: ST_TO_ADDR
3838: LD_INT 8
3840: PUSH
3841: FOR_TO
3842: IFFALSE 3867
// if Side_Positions [ i ] then
3844: LD_EXP 34
3848: PUSH
3849: LD_VAR 0 2
3853: ARRAY
3854: IFFALSE 3865
// prepare_side ( i ) ;
3856: LD_VAR 0 2
3860: PPUSH
3861: CALL 2720 0 1
3865: GO 3841
3867: POP
3868: POP
// end ;
3869: LD_VAR 0 1
3873: RET
// function CountClassMembers ; var Mode ; begin
3874: LD_INT 0
3876: PPUSH
3877: PPUSH
// if No_Mechs then
3878: LD_EXP 15
3882: IFFALSE 3894
// Mode := 2 else
3884: LD_ADDR_VAR 0 2
3888: PUSH
3889: LD_INT 2
3891: ST_TO_ADDR
3892: GO 3902
// Mode := 1 ;
3894: LD_ADDR_VAR 0 2
3898: PUSH
3899: LD_INT 1
3901: ST_TO_ADDR
// neng := number_of_people ;
3902: LD_ADDR_LOC 5
3906: PUSH
3907: LD_EXP 19
3911: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
3912: LD_ADDR_LOC 8
3916: PUSH
3917: LD_LOC 5
3921: PUSH
3922: LD_INT 4
3924: PUSH
3925: LD_INT 3
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_VAR 0 2
3936: ARRAY
3937: DIV
3938: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
3939: LD_LOC 8
3943: PUSH
3944: LD_EXP 18
3948: LESS
3949: IFFALSE 3961
// nsol := number_of_breastworks ;
3951: LD_ADDR_LOC 8
3955: PUSH
3956: LD_EXP 18
3960: ST_TO_ADDR
// neng := neng - nsol ;
3961: LD_ADDR_LOC 5
3965: PUSH
3966: LD_LOC 5
3970: PUSH
3971: LD_LOC 8
3975: MINUS
3976: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
3977: LD_ADDR_LOC 6
3981: PUSH
3982: LD_LOC 5
3986: PUSH
3987: LD_INT 3
3989: PUSH
3990: LD_INT 2
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PUSH
3997: LD_VAR 0 2
4001: ARRAY
4002: DIV
4003: ST_TO_ADDR
// if ( nsci < 1 ) then
4004: LD_LOC 6
4008: PUSH
4009: LD_INT 1
4011: LESS
4012: IFFALSE 4022
// nsci := 1 ;
4014: LD_ADDR_LOC 6
4018: PUSH
4019: LD_INT 1
4021: ST_TO_ADDR
// neng := neng - nsci ;
4022: LD_ADDR_LOC 5
4026: PUSH
4027: LD_LOC 5
4031: PUSH
4032: LD_LOC 6
4036: MINUS
4037: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4038: LD_ADDR_LOC 7
4042: PUSH
4043: LD_LOC 5
4047: PUSH
4048: LD_INT 2
4050: DIV
4051: PUSH
4052: LD_INT 0
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_VAR 0 2
4063: ARRAY
4064: ST_TO_ADDR
// neng := neng - nmech ;
4065: LD_ADDR_LOC 5
4069: PUSH
4070: LD_LOC 5
4074: PUSH
4075: LD_LOC 7
4079: MINUS
4080: ST_TO_ADDR
// if ( neng < 1 ) then
4081: LD_LOC 5
4085: PUSH
4086: LD_INT 1
4088: LESS
4089: IFFALSE 4099
// neng := 1 ;
4091: LD_ADDR_LOC 5
4095: PUSH
4096: LD_INT 1
4098: ST_TO_ADDR
// end ;
4099: LD_VAR 0 1
4103: RET
// starting begin disable ( 98 ) ;
4104: LD_INT 98
4106: DISABLE_MARKED
// disable ( 99 ) ;
4107: LD_INT 99
4109: DISABLE_MARKED
// disable ( 400 ) ;
4110: LD_INT 400
4112: DISABLE_MARKED
// disable ( 401 ) ;
4113: LD_INT 401
4115: DISABLE_MARKED
// mp_selectmsg := true ;
4116: LD_ADDR_OWVAR 13
4120: PUSH
4121: LD_INT 1
4123: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4124: CALL 68 0 0
// init_map ;
4128: CALL 1200 0 0
// init_respawning ;
4132: CALL 13447 0 0
// set_shared_visions_and_alliances ;
4136: CALL 1817 0 0
// ResetFog ;
4140: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4144: LD_OWVAR 2
4148: PPUSH
4149: CALL_OW 520
// AnimateTrees ( true ) ;
4153: LD_INT 1
4155: PPUSH
4156: CALL_OW 573
// prepare_sides ;
4160: CALL 3805 0 0
// Init_Win_Condition ;
4164: CALL 7428 0 0
// ShowTimer ;
4168: CALL 7006 0 0
// music_nat := Side_Nations [ your_side ] ;
4172: LD_ADDR_OWVAR 71
4176: PUSH
4177: LD_EXP 35
4181: PUSH
4182: LD_OWVAR 2
4186: ARRAY
4187: ST_TO_ADDR
// if IAmSpec then
4188: CALL_OW 531
4192: IFFALSE 4216
// begin fogoff ( true ) ;
4194: LD_INT 1
4196: PPUSH
4197: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4201: LD_INT 130
4203: PPUSH
4204: LD_INT 100
4206: PPUSH
4207: CALL_OW 86
// enable ( 400 ) ;
4211: LD_INT 400
4213: ENABLE_MARKED
// end else
4214: GO 4262
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4216: LD_EXP 39
4220: PUSH
4221: LD_EXP 34
4225: PUSH
4226: LD_OWVAR 2
4230: ARRAY
4231: ARRAY
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: PPUSH
4237: LD_EXP 39
4241: PUSH
4242: LD_EXP 34
4246: PUSH
4247: LD_OWVAR 2
4251: ARRAY
4252: ARRAY
4253: PUSH
4254: LD_INT 2
4256: ARRAY
4257: PPUSH
4258: CALL_OW 86
// end ; InitApeman ;
4262: CALL 5538 0 0
// BuildUpAreas := [ BaseArea1 , BaseArea2 ] ;
4266: LD_ADDR_EXP 55
4270: PUSH
4271: LD_INT 15
4273: PUSH
4274: LD_INT 16
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: ST_TO_ADDR
// BeginBuildUp ;
4281: CALL 13941 0 0
// end ;
4285: END
// every 0 0$1 do
4286: GO 4288
4288: DISABLE
// if ( def_siberite_bomb > 1 ) then
4289: LD_EXP 13
4293: PUSH
4294: LD_INT 1
4296: GREATER
4297: IFFALSE 4312
// begin wait ( siberite_bomb_Delay ) ;
4299: LD_EXP 29
4303: PPUSH
4304: CALL_OW 67
// EnableSibFiss ;
4308: CALL 4313 0 0
// end ;
4312: END
// function EnableSibFiss ; var i ; begin
4313: LD_INT 0
4315: PPUSH
4316: PPUSH
// for i := 1 to 8 do
4317: LD_ADDR_VAR 0 2
4321: PUSH
4322: DOUBLE
4323: LD_INT 1
4325: DEC
4326: ST_TO_ADDR
4327: LD_INT 8
4329: PUSH
4330: FOR_TO
4331: IFFALSE 4377
// if Side_Positions [ i ] then
4333: LD_EXP 34
4337: PUSH
4338: LD_VAR 0 2
4342: ARRAY
4343: IFFALSE 4375
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4345: LD_INT 25
4347: PPUSH
4348: LD_VAR 0 2
4352: PPUSH
4353: LD_INT 1
4355: PPUSH
4356: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4360: LD_INT 73
4362: PPUSH
4363: LD_VAR 0 2
4367: PPUSH
4368: LD_INT 1
4370: PPUSH
4371: CALL_OW 322
// end ;
4375: GO 4330
4377: POP
4378: POP
// end ; end_of_file
4379: LD_VAR 0 1
4383: RET
// every 0 0$10 + 0 0$2.0 do var i ;
4384: GO 4386
4386: DISABLE
4387: LD_INT 0
4389: PPUSH
// begin repeat wait ( 0 0$40 + ( shipments_density - 100 ) ) ;
4390: LD_INT 1400
4392: PUSH
4393: LD_EXP 23
4397: PUSH
4398: LD_INT 100
4400: MINUS
4401: PLUS
4402: PPUSH
4403: CALL_OW 67
// i := rand ( 1 , 5 ) ;
4407: LD_ADDR_VAR 0 1
4411: PUSH
4412: LD_INT 1
4414: PPUSH
4415: LD_INT 5
4417: PPUSH
4418: CALL_OW 12
4422: ST_TO_ADDR
// CreateCratesArea ( i , SafeCrates1a , true ) ;
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 11
4430: PPUSH
4431: LD_INT 1
4433: PPUSH
4434: CALL_OW 55
// CreateCratesArea ( i , SafeCrates1b , true ) ;
4438: LD_VAR 0 1
4442: PPUSH
4443: LD_INT 12
4445: PPUSH
4446: LD_INT 1
4448: PPUSH
4449: CALL_OW 55
// until tick < 10 10$00 ;
4453: LD_OWVAR 1
4457: PUSH
4458: LD_INT 21000
4460: LESS
4461: IFFALSE 4390
// repeat wait ( 2 2$55 + ( shipments_density - 60 ) ) ;
4463: LD_INT 6125
4465: PUSH
4466: LD_EXP 23
4470: PUSH
4471: LD_INT 60
4473: MINUS
4474: PLUS
4475: PPUSH
4476: CALL_OW 67
// i := rand ( 1 , 5 ) ;
4480: LD_ADDR_VAR 0 1
4484: PUSH
4485: LD_INT 1
4487: PPUSH
4488: LD_INT 5
4490: PPUSH
4491: CALL_OW 12
4495: ST_TO_ADDR
// CreateCratesArea ( i , SafeCrates2a , true ) ;
4496: LD_VAR 0 1
4500: PPUSH
4501: LD_INT 13
4503: PPUSH
4504: LD_INT 1
4506: PPUSH
4507: CALL_OW 55
// CreateCratesArea ( i , SafeCrates2b , true ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 14
4518: PPUSH
4519: LD_INT 1
4521: PPUSH
4522: CALL_OW 55
// until tick < 30 30$00 ;
4526: LD_OWVAR 1
4530: PUSH
4531: LD_INT 63000
4533: LESS
4534: IFFALSE 4463
// end ;
4536: PPOPN 1
4538: END
// every 1 1$50 + 0 0$2.0 trigger tick >= 5 5$00 do var i ;
4539: LD_OWVAR 1
4543: PUSH
4544: LD_INT 10500
4546: GREATEREQUAL
4547: IFFALSE 4808
4549: GO 4551
4551: DISABLE
4552: LD_INT 0
4554: PPUSH
// begin enable ;
4555: ENABLE
// i := rand ( 1 , 5 ) ;
4556: LD_ADDR_VAR 0 1
4560: PUSH
4561: LD_INT 1
4563: PPUSH
4564: LD_INT 5
4566: PPUSH
4567: CALL_OW 12
4571: ST_TO_ADDR
// CreateCratesArea ( i , MidCrates3a , true ) ;
4572: LD_VAR 0 1
4576: PPUSH
4577: LD_INT 7
4579: PPUSH
4580: LD_INT 1
4582: PPUSH
4583: CALL_OW 55
// CreateCratesArea ( i , MidCrates3b , true ) ;
4587: LD_VAR 0 1
4591: PPUSH
4592: LD_INT 8
4594: PPUSH
4595: LD_INT 1
4597: PPUSH
4598: CALL_OW 55
// if i < 4 then
4602: LD_VAR 0 1
4606: PUSH
4607: LD_INT 4
4609: LESS
4610: IFFALSE 4711
// begin wait ( 0 0$15 ) ;
4612: LD_INT 525
4614: PPUSH
4615: CALL_OW 67
// if GetResourceArea ( MidCrates1a , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4619: LD_INT 3
4621: PPUSH
4622: LD_INT 1
4624: PPUSH
4625: CALL_OW 287
4629: PUSH
4630: LD_INT 200
4632: PUSH
4633: LD_EXP 23
4637: MINUS
4638: PUSH
4639: LD_INT 25
4641: DIVREAL
4642: PUSH
4643: LD_INT 5
4645: MUL
4646: LESS
4647: IFFALSE 4664
// CreateCratesArea ( i , MidCrates1a , true ) ;
4649: LD_VAR 0 1
4653: PPUSH
4654: LD_INT 3
4656: PPUSH
4657: LD_INT 1
4659: PPUSH
4660: CALL_OW 55
// if GetResourceArea ( MidCrates1b , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4664: LD_INT 4
4666: PPUSH
4667: LD_INT 1
4669: PPUSH
4670: CALL_OW 287
4674: PUSH
4675: LD_INT 200
4677: PUSH
4678: LD_EXP 23
4682: MINUS
4683: PUSH
4684: LD_INT 25
4686: DIVREAL
4687: PUSH
4688: LD_INT 5
4690: MUL
4691: LESS
4692: IFFALSE 4709
// CreateCratesArea ( i , MidCrates1b , true ) ;
4694: LD_VAR 0 1
4698: PPUSH
4699: LD_INT 4
4701: PPUSH
4702: LD_INT 1
4704: PPUSH
4705: CALL_OW 55
// end else
4709: GO 4808
// begin wait ( 0 0$10 ) ;
4711: LD_INT 350
4713: PPUSH
4714: CALL_OW 67
// if GetResourceArea ( MidCrates2a , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4718: LD_INT 5
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: CALL_OW 287
4728: PUSH
4729: LD_INT 200
4731: PUSH
4732: LD_EXP 23
4736: MINUS
4737: PUSH
4738: LD_INT 25
4740: DIVREAL
4741: PUSH
4742: LD_INT 5
4744: MUL
4745: LESS
4746: IFFALSE 4763
// CreateCratesArea ( i , MidCrates2a , true ) ;
4748: LD_VAR 0 1
4752: PPUSH
4753: LD_INT 5
4755: PPUSH
4756: LD_INT 1
4758: PPUSH
4759: CALL_OW 55
// if GetResourceArea ( MidCrates2b , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4763: LD_INT 6
4765: PPUSH
4766: LD_INT 1
4768: PPUSH
4769: CALL_OW 287
4773: PUSH
4774: LD_INT 200
4776: PUSH
4777: LD_EXP 23
4781: MINUS
4782: PUSH
4783: LD_INT 25
4785: DIVREAL
4786: PUSH
4787: LD_INT 5
4789: MUL
4790: LESS
4791: IFFALSE 4808
// CreateCratesArea ( i , MidCrates2b , true ) ;
4793: LD_VAR 0 1
4797: PPUSH
4798: LD_INT 6
4800: PPUSH
4801: LD_INT 1
4803: PPUSH
4804: CALL_OW 55
// end ; end ;
4808: PPOPN 1
4810: END
// every 1 1$55 + 0 0$1.0 do
4811: GO 4813
4813: DISABLE
// begin if GetResourceArea ( MidCrates3a , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4814: LD_INT 7
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: CALL_OW 287
4824: PUSH
4825: LD_INT 200
4827: PUSH
4828: LD_EXP 23
4832: MINUS
4833: PUSH
4834: LD_INT 25
4836: DIVREAL
4837: PUSH
4838: LD_INT 5
4840: MUL
4841: LESS
4842: IFFALSE 4857
// CreateCratesArea ( 5 , ExpansionCrates1a , true ) ;
4844: LD_INT 5
4846: PPUSH
4847: LD_INT 9
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: CALL_OW 55
// if GetResourceArea ( MidCrates3b , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4857: LD_INT 8
4859: PPUSH
4860: LD_INT 1
4862: PPUSH
4863: CALL_OW 287
4867: PUSH
4868: LD_INT 200
4870: PUSH
4871: LD_EXP 23
4875: MINUS
4876: PUSH
4877: LD_INT 25
4879: DIVREAL
4880: PUSH
4881: LD_INT 5
4883: MUL
4884: LESS
4885: IFFALSE 4900
// CreateCratesArea ( 5 , ExpansionCrates1b , true ) ;
4887: LD_INT 5
4889: PPUSH
4890: LD_INT 10
4892: PPUSH
4893: LD_INT 1
4895: PPUSH
4896: CALL_OW 55
// enable ;
4900: ENABLE
// end ;
4901: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4902: GO 4904
4904: DISABLE
4905: LD_INT 0
4907: PPUSH
4908: PPUSH
// begin case tick of 1 .. 1 1$0 :
4909: LD_OWVAR 1
4913: PUSH
4914: LD_INT 1
4916: DOUBLE
4917: GREATEREQUAL
4918: IFFALSE 4926
4920: LD_INT 2100
4922: DOUBLE
4923: LESSEQUAL
4924: IFTRUE 4928
4926: GO 4956
4928: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4929: LD_EXP 23
4933: PUSH
4934: LD_INT 100
4936: DIVREAL
4937: PUSH
4938: LD_INT 525
4940: PPUSH
4941: LD_INT 1050
4943: PPUSH
4944: CALL_OW 12
4948: MUL
4949: PPUSH
4950: CALL_OW 67
4954: GO 5258
4956: LD_INT 2100
4958: PUSH
4959: LD_INT 1
4961: PLUS
4962: DOUBLE
4963: GREATEREQUAL
4964: IFFALSE 4972
4966: LD_INT 10500
4968: DOUBLE
4969: LESSEQUAL
4970: IFTRUE 4974
4972: GO 5002
4974: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4975: LD_EXP 23
4979: PUSH
4980: LD_INT 100
4982: DIVREAL
4983: PUSH
4984: LD_INT 1050
4986: PPUSH
4987: LD_INT 1750
4989: PPUSH
4990: CALL_OW 12
4994: MUL
4995: PPUSH
4996: CALL_OW 67
5000: GO 5258
5002: LD_INT 10500
5004: PUSH
5005: LD_INT 1
5007: PLUS
5008: DOUBLE
5009: GREATEREQUAL
5010: IFFALSE 5018
5012: LD_INT 21000
5014: DOUBLE
5015: LESSEQUAL
5016: IFTRUE 5020
5018: GO 5048
5020: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5021: LD_EXP 23
5025: PUSH
5026: LD_INT 100
5028: DIVREAL
5029: PUSH
5030: LD_INT 1750
5032: PPUSH
5033: LD_INT 2100
5035: PPUSH
5036: CALL_OW 12
5040: MUL
5041: PPUSH
5042: CALL_OW 67
5046: GO 5258
5048: LD_INT 21000
5050: PUSH
5051: LD_INT 1
5053: PLUS
5054: DOUBLE
5055: GREATEREQUAL
5056: IFFALSE 5064
5058: LD_INT 42000
5060: DOUBLE
5061: LESSEQUAL
5062: IFTRUE 5066
5064: GO 5094
5066: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5067: LD_EXP 23
5071: PUSH
5072: LD_INT 100
5074: DIVREAL
5075: PUSH
5076: LD_INT 2100
5078: PPUSH
5079: LD_INT 2275
5081: PPUSH
5082: CALL_OW 12
5086: MUL
5087: PPUSH
5088: CALL_OW 67
5092: GO 5258
5094: LD_INT 42000
5096: PUSH
5097: LD_INT 1
5099: PLUS
5100: DOUBLE
5101: GREATEREQUAL
5102: IFFALSE 5110
5104: LD_INT 63000
5106: DOUBLE
5107: LESSEQUAL
5108: IFTRUE 5112
5110: GO 5140
5112: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5113: LD_EXP 23
5117: PUSH
5118: LD_INT 100
5120: DIVREAL
5121: PUSH
5122: LD_INT 2275
5124: PPUSH
5125: LD_INT 2450
5127: PPUSH
5128: CALL_OW 12
5132: MUL
5133: PPUSH
5134: CALL_OW 67
5138: GO 5258
5140: LD_INT 63000
5142: PUSH
5143: LD_INT 1
5145: PLUS
5146: DOUBLE
5147: GREATEREQUAL
5148: IFFALSE 5156
5150: LD_INT 105000
5152: DOUBLE
5153: LESSEQUAL
5154: IFTRUE 5158
5156: GO 5186
5158: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5159: LD_EXP 23
5163: PUSH
5164: LD_INT 100
5166: DIVREAL
5167: PUSH
5168: LD_INT 2450
5170: PPUSH
5171: LD_INT 2800
5173: PPUSH
5174: CALL_OW 12
5178: MUL
5179: PPUSH
5180: CALL_OW 67
5184: GO 5258
5186: LD_INT 105000
5188: PUSH
5189: LD_INT 1
5191: PLUS
5192: DOUBLE
5193: GREATEREQUAL
5194: IFFALSE 5202
5196: LD_INT 630000
5198: DOUBLE
5199: LESSEQUAL
5200: IFTRUE 5204
5202: GO 5232
5204: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5205: LD_EXP 23
5209: PUSH
5210: LD_INT 100
5212: DIVREAL
5213: PUSH
5214: LD_INT 2800
5216: PPUSH
5217: LD_INT 3500
5219: PPUSH
5220: CALL_OW 12
5224: MUL
5225: PPUSH
5226: CALL_OW 67
5230: GO 5258
5232: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5233: LD_EXP 23
5237: PUSH
5238: LD_INT 100
5240: DIVREAL
5241: PUSH
5242: LD_INT 3500
5244: PPUSH
5245: LD_INT 3850
5247: PPUSH
5248: CALL_OW 12
5252: MUL
5253: PPUSH
5254: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5258: LD_ADDR_VAR 0 2
5262: PUSH
5263: LD_INT 3
5265: PPUSH
5266: LD_INT 5
5268: PPUSH
5269: CALL_OW 12
5273: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5274: LD_ADDR_VAR 0 1
5278: PUSH
5279: LD_EXP 34
5283: PUSH
5284: LD_INT 0
5286: PUSH
5287: EMPTY
5288: LIST
5289: DIFF
5290: PUSH
5291: FOR_IN
5292: IFFALSE 5341
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5294: LD_VAR 0 2
5298: PPUSH
5299: LD_EXP 39
5303: PUSH
5304: LD_VAR 0 1
5308: ARRAY
5309: PUSH
5310: LD_INT 1
5312: ARRAY
5313: PPUSH
5314: LD_EXP 39
5318: PUSH
5319: LD_VAR 0 1
5323: ARRAY
5324: PUSH
5325: LD_INT 2
5327: ARRAY
5328: PPUSH
5329: LD_INT 20
5331: PPUSH
5332: LD_INT 1
5334: PPUSH
5335: CALL_OW 56
5339: GO 5291
5341: POP
5342: POP
// enable ;
5343: ENABLE
// end ; end_of_file
5344: PPOPN 2
5346: END
// every 20 20$00 trigger apemanNumber do
5347: LD_EXP 46
5351: IFFALSE 5384
5353: GO 5355
5355: DISABLE
// begin enable ;
5356: ENABLE
// if apeLevel >= 8 then
5357: LD_EXP 51
5361: PUSH
5362: LD_INT 8
5364: GREATEREQUAL
5365: IFFALSE 5370
// disable else
5367: DISABLE
5368: GO 5384
// apeLevel := apeLevel + 1 ;
5370: LD_ADDR_EXP 51
5374: PUSH
5375: LD_EXP 51
5379: PUSH
5380: LD_INT 1
5382: PLUS
5383: ST_TO_ADDR
// end ;
5384: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5385: LD_EXP 46
5389: PUSH
5390: LD_EXP 47
5394: LESS
5395: IFFALSE 5535
5397: GO 5399
5399: DISABLE
5400: LD_INT 0
5402: PPUSH
5403: PPUSH
5404: PPUSH
5405: PPUSH
// begin enable ;
5406: ENABLE
// for i := 1 to apemanPos do
5407: LD_ADDR_VAR 0 1
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_EXP 49
5421: PUSH
5422: FOR_TO
5423: IFFALSE 5533
// begin if apemanPlayerCount [ i ] then
5425: LD_EXP 50
5429: PUSH
5430: LD_VAR 0 1
5434: ARRAY
5435: IFFALSE 5531
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5437: LD_EXP 50
5441: PUSH
5442: LD_VAR 0 1
5446: ARRAY
5447: PUSH
5448: LD_EXP 49
5452: PUSH
5453: LD_VAR 0 1
5457: ARRAY
5458: GREATER
5459: IFFALSE 5531
// begin ape := PrepareApeman ;
5461: LD_ADDR_VAR 0 2
5465: PUSH
5466: CALL 6030 0 0
5470: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5471: LD_VAR 0 2
5475: PPUSH
5476: LD_EXP 52
5480: PUSH
5481: LD_VAR 0 1
5485: ARRAY
5486: PPUSH
5487: LD_INT 0
5489: PPUSH
5490: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5494: LD_ADDR_EXP 49
5498: PUSH
5499: LD_EXP 49
5503: PPUSH
5504: LD_VAR 0 1
5508: PPUSH
5509: LD_EXP 49
5513: PUSH
5514: LD_VAR 0 1
5518: ARRAY
5519: PUSH
5520: LD_VAR 0 2
5524: UNION
5525: PPUSH
5526: CALL_OW 1
5530: ST_TO_ADDR
// end ; end ; end ;
5531: GO 5422
5533: POP
5534: POP
// end ;
5535: PPOPN 4
5537: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5538: LD_INT 0
5540: PPUSH
5541: PPUSH
5542: PPUSH
5543: PPUSH
5544: PPUSH
5545: PPUSH
5546: PPUSH
// playersAmount := 0 ;
5547: LD_ADDR_VAR 0 3
5551: PUSH
5552: LD_INT 0
5554: ST_TO_ADDR
// _apeAreas := [ ApeArea1a , ApeArea1b ] ;
5555: LD_ADDR_VAR 0 7
5559: PUSH
5560: LD_INT 18
5562: PUSH
5563: LD_INT 17
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5570: LD_ADDR_EXP 52
5574: PUSH
5575: LD_INT 0
5577: PUSH
5578: LD_INT 0
5580: PUSH
5581: LD_INT 0
5583: PUSH
5584: LD_INT 0
5586: PUSH
5587: LD_INT 0
5589: PUSH
5590: LD_INT 0
5592: PUSH
5593: LD_INT 0
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: ST_TO_ADDR
// for j = 1 to Side_Positions do
5609: LD_ADDR_VAR 0 4
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_EXP 34
5623: PUSH
5624: FOR_TO
5625: IFFALSE 5692
// if Side_Positions [ j ] then
5627: LD_EXP 34
5631: PUSH
5632: LD_VAR 0 4
5636: ARRAY
5637: IFFALSE 5690
// begin playersAmount := playersAmount + 1 ;
5639: LD_ADDR_VAR 0 3
5643: PUSH
5644: LD_VAR 0 3
5648: PUSH
5649: LD_INT 1
5651: PLUS
5652: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5653: LD_ADDR_EXP 52
5657: PUSH
5658: LD_EXP 52
5662: PPUSH
5663: LD_VAR 0 4
5667: PPUSH
5668: LD_VAR 0 7
5672: PUSH
5673: LD_EXP 34
5677: PUSH
5678: LD_VAR 0 4
5682: ARRAY
5683: ARRAY
5684: PPUSH
5685: CALL_OW 1
5689: ST_TO_ADDR
// end ;
5690: GO 5624
5692: POP
5693: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5694: LD_ADDR_EXP 48
5698: PUSH
5699: LD_INT 3
5701: PUSH
5702: LD_EXP 25
5706: MUL
5707: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5708: LD_ADDR_EXP 46
5712: PUSH
5713: LD_VAR 0 3
5717: PUSH
5718: LD_EXP 48
5722: MUL
5723: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5724: LD_ADDR_EXP 47
5728: PUSH
5729: LD_EXP 46
5733: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5734: LD_ADDR_EXP 49
5738: PUSH
5739: LD_INT 0
5741: PUSH
5742: LD_INT 0
5744: PUSH
5745: LD_INT 0
5747: PUSH
5748: LD_INT 0
5750: PUSH
5751: LD_INT 0
5753: PUSH
5754: LD_INT 0
5756: PUSH
5757: LD_INT 0
5759: PUSH
5760: LD_INT 0
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5773: LD_ADDR_EXP 50
5777: PUSH
5778: LD_INT 0
5780: PUSH
5781: LD_INT 0
5783: PUSH
5784: LD_INT 0
5786: PUSH
5787: LD_INT 0
5789: PUSH
5790: LD_INT 0
5792: PUSH
5793: LD_INT 0
5795: PUSH
5796: LD_INT 0
5798: PUSH
5799: LD_INT 0
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: ST_TO_ADDR
// apeLevel := 1 ;
5812: LD_ADDR_EXP 51
5816: PUSH
5817: LD_INT 1
5819: ST_TO_ADDR
// if not apemanNumber then
5820: LD_EXP 46
5824: NOT
5825: IFFALSE 5829
// exit ;
5827: GO 6025
// for i := 1 to apemanPerPlayer do
5829: LD_ADDR_VAR 0 2
5833: PUSH
5834: DOUBLE
5835: LD_INT 1
5837: DEC
5838: ST_TO_ADDR
5839: LD_EXP 48
5843: PUSH
5844: FOR_TO
5845: IFFALSE 6023
// begin for j := 1 to Side_Positions do
5847: LD_ADDR_VAR 0 4
5851: PUSH
5852: DOUBLE
5853: LD_INT 1
5855: DEC
5856: ST_TO_ADDR
5857: LD_EXP 34
5861: PUSH
5862: FOR_TO
5863: IFFALSE 6019
// if Side_Positions [ j ] then
5865: LD_EXP 34
5869: PUSH
5870: LD_VAR 0 4
5874: ARRAY
5875: IFFALSE 6017
// begin pos := Side_Positions [ j ] ;
5877: LD_ADDR_VAR 0 6
5881: PUSH
5882: LD_EXP 34
5886: PUSH
5887: LD_VAR 0 4
5891: ARRAY
5892: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5893: LD_ADDR_EXP 50
5897: PUSH
5898: LD_EXP 50
5902: PPUSH
5903: LD_VAR 0 4
5907: PPUSH
5908: LD_EXP 50
5912: PUSH
5913: LD_VAR 0 4
5917: ARRAY
5918: PUSH
5919: LD_INT 1
5921: PLUS
5922: PPUSH
5923: CALL_OW 1
5927: ST_TO_ADDR
// ape := PrepareApeman ;
5928: LD_ADDR_VAR 0 5
5932: PUSH
5933: CALL 6030 0 0
5937: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5938: LD_ADDR_EXP 49
5942: PUSH
5943: LD_EXP 49
5947: PPUSH
5948: LD_VAR 0 4
5952: PPUSH
5953: LD_EXP 49
5957: PUSH
5958: LD_VAR 0 4
5962: ARRAY
5963: PPUSH
5964: LD_EXP 49
5968: PUSH
5969: LD_VAR 0 4
5973: ARRAY
5974: PUSH
5975: LD_INT 1
5977: PLUS
5978: PPUSH
5979: LD_VAR 0 5
5983: PPUSH
5984: CALL_OW 1
5988: PPUSH
5989: CALL_OW 1
5993: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5994: LD_VAR 0 5
5998: PPUSH
5999: LD_EXP 52
6003: PUSH
6004: LD_VAR 0 4
6008: ARRAY
6009: PPUSH
6010: LD_INT 0
6012: PPUSH
6013: CALL_OW 49
// end ;
6017: GO 5862
6019: POP
6020: POP
// end ;
6021: GO 5844
6023: POP
6024: POP
// end ;
6025: LD_VAR 0 1
6029: RET
// export function PrepareApeman ; var bonus ; begin
6030: LD_INT 0
6032: PPUSH
6033: PPUSH
// uc_side := 0 ;
6034: LD_ADDR_OWVAR 20
6038: PUSH
6039: LD_INT 0
6041: ST_TO_ADDR
// uc_nation := 0 ;
6042: LD_ADDR_OWVAR 21
6046: PUSH
6047: LD_INT 0
6049: ST_TO_ADDR
// InitHc ;
6050: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6054: LD_ADDR_VAR 0 2
6058: PUSH
6059: LD_INT 1
6061: NEG
6062: PUSH
6063: LD_INT 0
6065: PUSH
6066: LD_INT 1
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 12
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PPUSH
6084: CALL_OW 69
6088: PUSH
6089: LD_INT 3
6091: MOD
6092: PUSH
6093: LD_INT 1
6095: PLUS
6096: ARRAY
6097: ST_TO_ADDR
// hc_class := class_apeman ;
6098: LD_ADDR_OWVAR 28
6102: PUSH
6103: LD_INT 12
6105: ST_TO_ADDR
// hc_gallery :=  ;
6106: LD_ADDR_OWVAR 33
6110: PUSH
6111: LD_STRING 
6113: ST_TO_ADDR
// hc_name :=  ;
6114: LD_ADDR_OWVAR 26
6118: PUSH
6119: LD_STRING 
6121: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6122: LD_ADDR_OWVAR 31
6126: PUSH
6127: LD_EXP 51
6131: PUSH
6132: LD_VAR 0 2
6136: PLUS
6137: PUSH
6138: LD_EXP 51
6142: PUSH
6143: LD_VAR 0 2
6147: PLUS
6148: PUSH
6149: LD_EXP 51
6153: PUSH
6154: LD_VAR 0 2
6158: PLUS
6159: PUSH
6160: LD_EXP 51
6164: PUSH
6165: LD_VAR 0 2
6169: PLUS
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6177: LD_ADDR_OWVAR 35
6181: PUSH
6182: LD_INT 10
6184: PUSH
6185: LD_VAR 0 2
6189: MUL
6190: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6191: LD_ADDR_OWVAR 29
6195: PUSH
6196: LD_INT 12
6198: PUSH
6199: LD_INT 12
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: ST_TO_ADDR
// result := CreateHuman ;
6206: LD_ADDR_VAR 0 1
6210: PUSH
6211: CALL_OW 44
6215: ST_TO_ADDR
// end ;
6216: LD_VAR 0 1
6220: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6221: LD_INT 0
6223: PPUSH
6224: PPUSH
6225: PPUSH
// if not ape then
6226: LD_VAR 0 1
6230: NOT
6231: IFFALSE 6235
// exit ;
6233: GO 6360
// side := GetSide ( ape ) ;
6235: LD_ADDR_VAR 0 3
6239: PUSH
6240: LD_VAR 0 1
6244: PPUSH
6245: CALL_OW 255
6249: ST_TO_ADDR
// if not side then
6250: LD_VAR 0 3
6254: NOT
6255: IFFALSE 6309
// begin for i = 1 to apemanPos do
6257: LD_ADDR_VAR 0 4
6261: PUSH
6262: DOUBLE
6263: LD_INT 1
6265: DEC
6266: ST_TO_ADDR
6267: LD_EXP 49
6271: PUSH
6272: FOR_TO
6273: IFFALSE 6307
// if ape in apemanPos [ i ] then
6275: LD_VAR 0 1
6279: PUSH
6280: LD_EXP 49
6284: PUSH
6285: LD_VAR 0 4
6289: ARRAY
6290: IN
6291: IFFALSE 6305
// begin side := i ;
6293: LD_ADDR_VAR 0 3
6297: PUSH
6298: LD_VAR 0 4
6302: ST_TO_ADDR
// break ;
6303: GO 6307
// end ;
6305: GO 6272
6307: POP
6308: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6309: LD_ADDR_EXP 49
6313: PUSH
6314: LD_EXP 49
6318: PPUSH
6319: LD_VAR 0 3
6323: PPUSH
6324: LD_EXP 49
6328: PUSH
6329: LD_VAR 0 3
6333: ARRAY
6334: PUSH
6335: LD_VAR 0 1
6339: DIFF
6340: PPUSH
6341: CALL_OW 1
6345: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6346: LD_ADDR_EXP 46
6350: PUSH
6351: LD_EXP 46
6355: PUSH
6356: LD_INT 1
6358: MINUS
6359: ST_TO_ADDR
// end ; end_of_file
6360: LD_VAR 0 2
6364: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6365: LD_VAR 0 1
6369: PPUSH
6370: CALL_OW 266
6374: PUSH
6375: LD_INT 0
6377: PUSH
6378: LD_INT 1
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: IN
6385: IFFALSE 6410
// SetBName ( b , @ & GetSide ( b ) ) ;
6387: LD_VAR 0 1
6391: PPUSH
6392: LD_STRING @
6394: PUSH
6395: LD_VAR 0 1
6399: PPUSH
6400: CALL_OW 255
6404: STR
6405: PPUSH
6406: CALL_OW 500
// end ;
6410: PPOPN 2
6412: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6413: LD_VAR 0 1
6417: PPUSH
6418: CALL_OW 266
6422: PUSH
6423: LD_INT 0
6425: PUSH
6426: LD_INT 1
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: IN
6433: IFFALSE 6458
// SetBName ( b , @ & GetSide ( b ) ) ;
6435: LD_VAR 0 1
6439: PPUSH
6440: LD_STRING @
6442: PUSH
6443: LD_VAR 0 1
6447: PPUSH
6448: CALL_OW 255
6452: STR
6453: PPUSH
6454: CALL_OW 500
// end ;
6458: PPOPN 3
6460: END
// on VehicleConstructed ( veh , fac ) do var side ;
6461: LD_INT 0
6463: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6464: LD_VAR 0 1
6468: PPUSH
6469: CALL_OW 263
6473: PUSH
6474: LD_INT 5
6476: EQUAL
6477: IFFALSE 6619
// begin side := GetSide ( veh ) ;
6479: LD_ADDR_VAR 0 3
6483: PUSH
6484: LD_VAR 0 1
6488: PPUSH
6489: CALL_OW 255
6493: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6494: LD_ADDR_EXP 49
6498: PUSH
6499: LD_EXP 49
6503: PPUSH
6504: LD_VAR 0 3
6508: PPUSH
6509: LD_EXP 49
6513: PUSH
6514: LD_VAR 0 3
6518: ARRAY
6519: PPUSH
6520: LD_INT 52
6522: PUSH
6523: EMPTY
6524: LIST
6525: PPUSH
6526: CALL_OW 72
6530: PUSH
6531: LD_INT 22
6533: PUSH
6534: LD_VAR 0 3
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: PUSH
6543: LD_INT 2
6545: PUSH
6546: LD_INT 33
6548: PUSH
6549: LD_INT 5
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: LD_INT 25
6558: PUSH
6559: LD_INT 12
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 25
6568: PUSH
6569: LD_INT 15
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: LD_INT 25
6578: PUSH
6579: LD_INT 16
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 25
6588: PUSH
6589: LD_INT 17
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PPUSH
6608: CALL_OW 69
6612: UNION
6613: PPUSH
6614: CALL_OW 1
6618: ST_TO_ADDR
// end ; end ;
6619: PPOPN 3
6621: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6622: LD_INT 0
6624: PPUSH
6625: PPUSH
6626: PPUSH
6627: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6628: LD_VAR 0 1
6632: PPUSH
6633: CALL_OW 257
6637: PUSH
6638: LD_INT 12
6640: PUSH
6641: LD_INT 15
6643: PUSH
6644: LD_INT 17
6646: PUSH
6647: LD_INT 16
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: IN
6656: PUSH
6657: LD_VAR 0 1
6661: PPUSH
6662: CALL_OW 263
6666: PUSH
6667: LD_INT 5
6669: EQUAL
6670: OR
6671: IFFALSE 6682
// ApeKilled ( j ) ;
6673: LD_VAR 0 1
6677: PPUSH
6678: CALL 6221 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6682: LD_VAR 0 1
6686: PPUSH
6687: CALL_OW 266
6691: PUSH
6692: LD_INT 0
6694: PUSH
6695: LD_INT 1
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: IN
6702: IFFALSE 6784
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6704: LD_ADDR_VAR 0 4
6708: PUSH
6709: LD_EXP 34
6713: PUSH
6714: LD_VAR 0 1
6718: PPUSH
6719: CALL_OW 255
6723: ARRAY
6724: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6725: LD_ADDR_VAR 0 2
6729: PUSH
6730: LD_EXP 39
6734: PUSH
6735: LD_VAR 0 4
6739: ARRAY
6740: PUSH
6741: LD_INT 1
6743: ARRAY
6744: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6745: LD_ADDR_VAR 0 3
6749: PUSH
6750: LD_EXP 39
6754: PUSH
6755: LD_VAR 0 4
6759: ARRAY
6760: PUSH
6761: LD_INT 2
6763: ARRAY
6764: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6765: LD_VAR 0 2
6769: PPUSH
6770: LD_VAR 0 3
6774: PPUSH
6775: CALL_OW 420
6779: PPUSH
6780: CALL_OW 419
// end ; end ;
6784: PPOPN 5
6786: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6787: LD_VAR 0 1
6791: PPUSH
6792: LD_VAR 0 2
6796: PPUSH
6797: LD_VAR 0 3
6801: PPUSH
6802: LD_OWVAR 2
6806: PPUSH
6807: CALL 7189 0 4
6811: PPOPN 3
6813: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6814: LD_INT 0
6816: PPUSH
6817: PPUSH
// for un in battle_flags_id do
6818: LD_ADDR_VAR 0 2
6822: PUSH
6823: LD_EXP 44
6827: PUSH
6828: FOR_IN
6829: IFFALSE 6904
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6831: LD_VAR 0 2
6835: PPUSH
6836: LD_INT 1
6838: PUSH
6839: LD_LOC 9
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: LD_INT 2
6850: PUSH
6851: LD_LOC 9
6855: PUSH
6856: LD_INT 2
6858: DIV
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 3
6866: PUSH
6867: LD_LOC 9
6871: PUSH
6872: LD_INT 5
6874: DIV
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 20
6882: PUSH
6883: LD_LOC 9
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: PPUSH
6898: CALL_OW 423
6902: GO 6828
6904: POP
6905: POP
// end ;
6906: LD_VAR 0 1
6910: RET
// every 1 do var un ;
6911: GO 6913
6913: DISABLE
6914: LD_INT 0
6916: PPUSH
// begin if not def_morale_flags then
6917: LD_EXP 9
6921: NOT
6922: IFFALSE 6926
// exit ;
6924: GO 7003
// if not morale_decreasing_time then
6926: LD_EXP 24
6930: NOT
6931: IFFALSE 6935
// exit ;
6933: GO 7003
// strength = 100 ;
6935: LD_ADDR_LOC 9
6939: PUSH
6940: LD_INT 100
6942: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6943: LD_EXP 24
6947: PPUSH
6948: CALL_OW 67
// strength := strength - 1 ;
6952: LD_ADDR_LOC 9
6956: PUSH
6957: LD_LOC 9
6961: PUSH
6962: LD_INT 1
6964: MINUS
6965: ST_TO_ADDR
// Update_Flags ;
6966: CALL 6814 0 0
// until not strength ;
6970: LD_LOC 9
6974: NOT
6975: IFFALSE 6943
// for un in battle_flags_id do
6977: LD_ADDR_VAR 0 1
6981: PUSH
6982: LD_EXP 44
6986: PUSH
6987: FOR_IN
6988: IFFALSE 7001
// KillBattleFlag ( un ) ;
6990: LD_VAR 0 1
6994: PPUSH
6995: CALL_OW 419
6999: GO 6987
7001: POP
7002: POP
// end ; end_of_file
7003: PPOPN 1
7005: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7006: LD_INT 0
7008: PPUSH
7009: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7010: LD_ADDR_VAR 0 2
7014: PUSH
7015: LD_STRING #Multi1x1-Time
7017: PUSH
7018: LD_OWVAR 1
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: ST_TO_ADDR
// if WaitServerStrings then
7027: LD_EXP 54
7031: IFFALSE 7049
// AllStrings = AllStrings ^ WaitServerStrings ;
7033: LD_ADDR_VAR 0 2
7037: PUSH
7038: LD_VAR 0 2
7042: PUSH
7043: LD_EXP 54
7047: ADD
7048: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7049: LD_INT 0
7051: PUSH
7052: LD_EXP 29
7056: PUSH
7057: LD_OWVAR 1
7061: MINUS
7062: LESSEQUAL
7063: IFFALSE 7094
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7065: LD_ADDR_VAR 0 2
7069: PUSH
7070: LD_VAR 0 2
7074: PUSH
7075: LD_STRING #allowedsibbomb
7077: PUSH
7078: LD_EXP 29
7082: PUSH
7083: LD_OWVAR 1
7087: MINUS
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: ADD
7093: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7094: LD_INT 0
7096: PUSH
7097: LD_EXP 57
7101: PUSH
7102: LD_OWVAR 1
7106: MINUS
7107: LESSEQUAL
7108: IFFALSE 7139
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7110: LD_ADDR_VAR 0 2
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_STRING #builduptime
7122: PUSH
7123: LD_EXP 57
7127: PUSH
7128: LD_OWVAR 1
7132: MINUS
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: ADD
7138: ST_TO_ADDR
// if ( ExtraStrings ) then
7139: LD_EXP 53
7143: IFFALSE 7165
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7145: LD_ADDR_VAR 0 2
7149: PUSH
7150: LD_VAR 0 2
7154: PUSH
7155: LD_STRING 
7157: ADD
7158: PUSH
7159: LD_EXP 53
7163: ADD
7164: ST_TO_ADDR
// Display_Strings := AllStrings ;
7165: LD_ADDR_OWVAR 47
7169: PUSH
7170: LD_VAR 0 2
7174: ST_TO_ADDR
// end ;
7175: LD_VAR 0 1
7179: RET
// every 0 0$1 do
7180: GO 7182
7182: DISABLE
// begin ShowTimer ;
7183: CALL 7006 0 0
// enable ;
7187: ENABLE
// end ; end_of_file
7188: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7189: LD_INT 0
7191: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7192: LD_VAR 0 1
7196: PPUSH
7197: CALL_OW 255
7201: PUSH
7202: LD_VAR 0 4
7206: EQUAL
7207: IFFALSE 7226
// begin SetAchievement ( ACH_RAD ) ;
7209: LD_STRING ACH_RAD
7211: PPUSH
7212: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7216: LD_STRING ACH_NL
7218: PPUSH
7219: LD_INT 1
7221: PPUSH
7222: CALL_OW 564
// end end ;
7226: LD_VAR 0 5
7230: RET
// export function SA_Win ( side ) ; begin
7231: LD_INT 0
7233: PPUSH
// case side of 1 :
7234: LD_VAR 0 1
7238: PUSH
7239: LD_INT 1
7241: DOUBLE
7242: EQUAL
7243: IFTRUE 7247
7245: GO 7260
7247: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7248: LD_STRING ACH_AH
7250: PPUSH
7251: LD_INT 1
7253: PPUSH
7254: CALL_OW 564
7258: GO 7423
7260: LD_INT 2
7262: DOUBLE
7263: EQUAL
7264: IFTRUE 7268
7266: GO 7281
7268: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7269: LD_STRING ACH_E
7271: PPUSH
7272: LD_INT 1
7274: PPUSH
7275: CALL_OW 564
7279: GO 7423
7281: LD_INT 3
7283: DOUBLE
7284: EQUAL
7285: IFTRUE 7289
7287: GO 7302
7289: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7290: LD_STRING ACH_OOL
7292: PPUSH
7293: LD_INT 1
7295: PPUSH
7296: CALL_OW 564
7300: GO 7423
7302: LD_INT 1
7304: PUSH
7305: LD_INT 2
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: DOUBLE
7312: EQUAL
7313: IFTRUE 7317
7315: GO 7342
7317: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7318: LD_STRING ACH_AH
7320: PPUSH
7321: LD_REAL  5.00000000000000E-0001
7324: PPUSH
7325: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7329: LD_STRING ACH_E
7331: PPUSH
7332: LD_REAL  5.00000000000000E-0001
7335: PPUSH
7336: CALL_OW 564
// end ; [ 2 , 3 ] :
7340: GO 7423
7342: LD_INT 2
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: DOUBLE
7352: EQUAL
7353: IFTRUE 7357
7355: GO 7382
7357: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7358: LD_STRING ACH_OOL
7360: PPUSH
7361: LD_REAL  5.00000000000000E-0001
7364: PPUSH
7365: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7369: LD_STRING ACH_E
7371: PPUSH
7372: LD_REAL  5.00000000000000E-0001
7375: PPUSH
7376: CALL_OW 564
// end ; [ 3 , 1 ] :
7380: GO 7423
7382: LD_INT 3
7384: PUSH
7385: LD_INT 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: DOUBLE
7392: EQUAL
7393: IFTRUE 7397
7395: GO 7422
7397: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7398: LD_STRING ACH_AH
7400: PPUSH
7401: LD_REAL  5.00000000000000E-0001
7404: PPUSH
7405: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7409: LD_STRING ACH_OOL
7411: PPUSH
7412: LD_REAL  5.00000000000000E-0001
7415: PPUSH
7416: CALL_OW 564
// end ; end ;
7420: GO 7423
7422: POP
// end ; end_of_file
7423: LD_VAR 0 2
7427: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7428: LD_INT 0
7430: PPUSH
7431: PPUSH
// enable ( 98 ) ;
7432: LD_INT 98
7434: ENABLE_MARKED
// GameEnded = false ;
7435: LD_ADDR_LOC 15
7439: PUSH
7440: LD_INT 0
7442: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7443: LD_ADDR_LOC 14
7447: PUSH
7448: LD_INT 0
7450: PUSH
7451: LD_INT 0
7453: PUSH
7454: LD_INT 0
7456: PUSH
7457: LD_INT 0
7459: PUSH
7460: LD_INT 0
7462: PUSH
7463: LD_INT 0
7465: PUSH
7466: LD_INT 0
7468: PUSH
7469: LD_INT 0
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: ST_TO_ADDR
// unfoged = false ;
7482: LD_ADDR_LOC 16
7486: PUSH
7487: LD_INT 0
7489: ST_TO_ADDR
// defeated_specs := [ ] ;
7490: LD_ADDR_LOC 17
7494: PUSH
7495: EMPTY
7496: ST_TO_ADDR
// for i = 1 to side_positions do
7497: LD_ADDR_VAR 0 2
7501: PUSH
7502: DOUBLE
7503: LD_INT 1
7505: DEC
7506: ST_TO_ADDR
7507: LD_EXP 34
7511: PUSH
7512: FOR_TO
7513: IFFALSE 7553
// if not side_positions [ i ] then
7515: LD_EXP 34
7519: PUSH
7520: LD_VAR 0 2
7524: ARRAY
7525: NOT
7526: IFFALSE 7551
// defeated = replace ( defeated , i , true ) ;
7528: LD_ADDR_LOC 14
7532: PUSH
7533: LD_LOC 14
7537: PPUSH
7538: LD_VAR 0 2
7542: PPUSH
7543: LD_INT 1
7545: PPUSH
7546: CALL_OW 1
7550: ST_TO_ADDR
7551: GO 7512
7553: POP
7554: POP
// end ;
7555: LD_VAR 0 1
7559: RET
// function CanWinLoose ; begin
7560: LD_INT 0
7562: PPUSH
// Result := true ;
7563: LD_ADDR_VAR 0 1
7567: PUSH
7568: LD_INT 1
7570: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7571: CALL_OW 518
7575: PUSH
7576: CALL_OW 519
7580: PUSH
7581: LD_INT 0
7583: GREATER
7584: AND
7585: IFFALSE 7595
// Result := false ;
7587: LD_ADDR_VAR 0 1
7591: PUSH
7592: LD_INT 0
7594: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7595: CALL_OW 531
7599: PUSH
7600: CALL_OW 519
7604: PUSH
7605: LD_INT 1
7607: GREATER
7608: AND
7609: IFFALSE 7619
// Result := false ;
7611: LD_ADDR_VAR 0 1
7615: PUSH
7616: LD_INT 0
7618: ST_TO_ADDR
// end ;
7619: LD_VAR 0 1
7623: RET
// export function HasPower ( i ) ; var k , h ; begin
7624: LD_INT 0
7626: PPUSH
7627: PPUSH
7628: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7629: LD_VAR 0 1
7633: PPUSH
7634: CALL_OW 108
7638: NOT
7639: PUSH
7640: LD_EXP 33
7644: PUSH
7645: LD_VAR 0 1
7649: ARRAY
7650: NOT
7651: AND
7652: PUSH
7653: LD_OWVAR 4
7657: AND
7658: IFFALSE 7670
// begin result = false ;
7660: LD_ADDR_VAR 0 2
7664: PUSH
7665: LD_INT 0
7667: ST_TO_ADDR
// end else
7668: GO 7965
// case def_win_rules of 0 :
7670: LD_EXP 30
7674: PUSH
7675: LD_INT 0
7677: DOUBLE
7678: EQUAL
7679: IFTRUE 7683
7681: GO 7846
7683: POP
// if def_people_respawning then
7684: LD_EXP 11
7688: IFFALSE 7779
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7690: LD_ADDR_VAR 0 2
7694: PUSH
7695: LD_INT 22
7697: PUSH
7698: LD_VAR 0 1
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: LD_INT 21
7712: PUSH
7713: LD_INT 1
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 33
7722: PUSH
7723: LD_INT 3
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 33
7732: PUSH
7733: LD_INT 5
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 30
7742: PUSH
7743: LD_INT 0
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: LD_INT 30
7752: PUSH
7753: LD_INT 1
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PPUSH
7772: CALL_OW 69
7776: ST_TO_ADDR
7777: GO 7844
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7779: LD_ADDR_VAR 0 2
7783: PUSH
7784: LD_INT 22
7786: PUSH
7787: LD_VAR 0 1
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: LD_INT 2
7798: PUSH
7799: LD_INT 21
7801: PUSH
7802: LD_INT 1
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 33
7811: PUSH
7812: LD_INT 3
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 33
7821: PUSH
7822: LD_INT 5
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PPUSH
7839: CALL_OW 69
7843: ST_TO_ADDR
7844: GO 7965
7846: LD_INT 1
7848: DOUBLE
7849: EQUAL
7850: IFTRUE 7854
7852: GO 7893
7854: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7855: LD_ADDR_VAR 0 2
7859: PUSH
7860: LD_INT 22
7862: PUSH
7863: LD_VAR 0 1
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 21
7874: PUSH
7875: LD_INT 1
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 69
7890: ST_TO_ADDR
7891: GO 7965
7893: LD_INT 2
7895: DOUBLE
7896: EQUAL
7897: IFTRUE 7901
7899: GO 7964
7901: POP
// begin h = false ;
7902: LD_ADDR_VAR 0 4
7906: PUSH
7907: LD_INT 0
7909: ST_TO_ADDR
// for k in heroes [ i ] do
7910: LD_ADDR_VAR 0 3
7914: PUSH
7915: LD_EXP 45
7919: PUSH
7920: LD_VAR 0 1
7924: ARRAY
7925: PUSH
7926: FOR_IN
7927: IFFALSE 7950
// if IsLive ( k ) then
7929: LD_VAR 0 3
7933: PPUSH
7934: CALL_OW 300
7938: IFFALSE 7948
// h = true ;
7940: LD_ADDR_VAR 0 4
7944: PUSH
7945: LD_INT 1
7947: ST_TO_ADDR
7948: GO 7926
7950: POP
7951: POP
// Result := h ;
7952: LD_ADDR_VAR 0 2
7956: PUSH
7957: LD_VAR 0 4
7961: ST_TO_ADDR
// end ; end ;
7962: GO 7965
7964: POP
// end ;
7965: LD_VAR 0 2
7969: RET
// function AlliedSides ( i , j ) ; begin
7970: LD_INT 0
7972: PPUSH
// Result := false ;
7973: LD_ADDR_VAR 0 3
7977: PUSH
7978: LD_INT 0
7980: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7981: LD_VAR 0 1
7985: PPUSH
7986: LD_VAR 0 2
7990: PPUSH
7991: CALL_OW 81
7995: PUSH
7996: LD_INT 1
7998: EQUAL
7999: PUSH
8000: LD_VAR 0 2
8004: PPUSH
8005: LD_VAR 0 1
8009: PPUSH
8010: CALL_OW 81
8014: PUSH
8015: LD_INT 1
8017: EQUAL
8018: AND
8019: PUSH
8020: LD_VAR 0 1
8024: PPUSH
8025: CALL_OW 83
8029: AND
8030: PUSH
8031: LD_VAR 0 2
8035: PPUSH
8036: CALL_OW 83
8040: AND
8041: IFFALSE 8051
// Result := true ;
8043: LD_ADDR_VAR 0 3
8047: PUSH
8048: LD_INT 1
8050: ST_TO_ADDR
// end ;
8051: LD_VAR 0 3
8055: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8056: CALL 7560 0 0
8060: PUSH
8061: LD_LOC 15
8065: NOT
8066: AND
8067: IFFALSE 8083
8069: GO 8071
8071: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8072: LD_ADDR_EXP 54
8076: PUSH
8077: LD_STRING #Player-Ended
8079: PUSH
8080: EMPTY
8081: LIST
8082: ST_TO_ADDR
8083: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8084: CALL 7560 0 0
8088: PUSH
8089: LD_LOC 15
8093: AND
8094: IFFALSE 8103
8096: GO 8098
8098: DISABLE
// YouLostInMultiplayer ;
8099: CALL_OW 107
8103: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8104: CALL 7560 0 0
8108: NOT
8109: PUSH
8110: CALL_OW 531
8114: NOT
8115: AND
8116: IFFALSE 8132
8118: GO 8120
8120: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8121: LD_ADDR_EXP 54
8125: PUSH
8126: LD_STRING #server-wait
8128: PUSH
8129: EMPTY
8130: LIST
8131: ST_TO_ADDR
8132: END
// every 100 trigger IAmSpec do
8133: CALL_OW 531
8137: IFFALSE 8153
8139: GO 8141
8141: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8142: LD_ADDR_EXP 54
8146: PUSH
8147: LD_STRING #Player-IAmSpec
8149: PUSH
8150: EMPTY
8151: LIST
8152: ST_TO_ADDR
8153: END
// every 100 trigger GameEnded and IAmSpec do
8154: LD_LOC 15
8158: PUSH
8159: CALL_OW 531
8163: AND
8164: IFFALSE 8173
8166: GO 8168
8168: DISABLE
// YouLostInMultiplayer ;
8169: CALL_OW 107
8173: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8174: CALL 7560 0 0
8178: PUSH
8179: LD_LOC 15
8183: NOT
8184: AND
8185: IFFALSE 8201
8187: GO 8189
8189: DISABLE
// WaitServerStrings = [ $player-win ] ;
8190: LD_ADDR_EXP 54
8194: PUSH
8195: LD_STRING $player-win
8197: PUSH
8198: EMPTY
8199: LIST
8200: ST_TO_ADDR
8201: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8202: CALL 7560 0 0
8206: PUSH
8207: LD_LOC 15
8211: AND
8212: IFFALSE 8236
8214: GO 8216
8216: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8217: LD_EXP 35
8221: PUSH
8222: LD_OWVAR 7
8226: ARRAY
8227: PPUSH
8228: CALL 7231 0 1
// YouWinInMultiplayer ;
8232: CALL_OW 106
// end ;
8236: END
// every 100 trigger isEditor marked 401 do
8237: LD_OWVAR 84
8241: IFFALSE 8257
8243: GO 8245
8245: DISABLE
// Debug_Strings = [ You won ] ;
8246: LD_ADDR_OWVAR 48
8250: PUSH
8251: LD_STRING You won
8253: PUSH
8254: EMPTY
8255: LIST
8256: ST_TO_ADDR
8257: END
// every 100 trigger isEditor marked 400 do
8258: LD_OWVAR 84
8262: IFFALSE 8278
8264: GO 8266
8266: DISABLE
// Debug_Strings = [ You loss ] ;
8267: LD_ADDR_OWVAR 48
8271: PUSH
8272: LD_STRING You loss
8274: PUSH
8275: EMPTY
8276: LIST
8277: ST_TO_ADDR
8278: END
// every 100 marked 98 do var i , un ;
8279: GO 8281
8281: DISABLE
8282: LD_INT 0
8284: PPUSH
8285: PPUSH
// begin for i = 1 to side_positions do
8286: LD_ADDR_VAR 0 1
8290: PUSH
8291: DOUBLE
8292: LD_INT 1
8294: DEC
8295: ST_TO_ADDR
8296: LD_EXP 34
8300: PUSH
8301: FOR_TO
8302: IFFALSE 8389
// begin if side_positions [ i ] then
8304: LD_EXP 34
8308: PUSH
8309: LD_VAR 0 1
8313: ARRAY
8314: IFFALSE 8387
// if not HasPower ( i ) and not defeated [ i ] then
8316: LD_VAR 0 1
8320: PPUSH
8321: CALL 7624 0 1
8325: NOT
8326: PUSH
8327: LD_LOC 14
8331: PUSH
8332: LD_VAR 0 1
8336: ARRAY
8337: NOT
8338: AND
8339: IFFALSE 8387
// begin defeated = replace ( defeated , i , true ) ;
8341: LD_ADDR_LOC 14
8345: PUSH
8346: LD_LOC 14
8350: PPUSH
8351: LD_VAR 0 1
8355: PPUSH
8356: LD_INT 1
8358: PPUSH
8359: CALL_OW 1
8363: ST_TO_ADDR
// if i = mp_player_side then
8364: LD_VAR 0 1
8368: PUSH
8369: LD_OWVAR 7
8373: EQUAL
8374: IFFALSE 8387
// begin Multiplayer_Loose_Message ;
8376: CALL_OW 521
// SetPlayerSpectator ( ) ;
8380: CALL_OW 572
// enable ( 400 ) ;
8384: LD_INT 400
8386: ENABLE_MARKED
// end ; end ; end ;
8387: GO 8301
8389: POP
8390: POP
// DidGameEnd ;
8391: CALL 8406 0 0
// if not GameEnded then
8395: LD_LOC 15
8399: NOT
8400: IFFALSE 8403
// enable ;
8402: ENABLE
// end ;
8403: PPOPN 2
8405: END
// function DidGameEnd ; var i , k , enemy ; begin
8406: LD_INT 0
8408: PPUSH
8409: PPUSH
8410: PPUSH
8411: PPUSH
// enemy = [ ] ;
8412: LD_ADDR_VAR 0 4
8416: PUSH
8417: EMPTY
8418: ST_TO_ADDR
// for i = 1 to side_positions do
8419: LD_ADDR_VAR 0 2
8423: PUSH
8424: DOUBLE
8425: LD_INT 1
8427: DEC
8428: ST_TO_ADDR
8429: LD_EXP 34
8433: PUSH
8434: FOR_TO
8435: IFFALSE 8529
// if not defeated [ i ] then
8437: LD_LOC 14
8441: PUSH
8442: LD_VAR 0 2
8446: ARRAY
8447: NOT
8448: IFFALSE 8527
// for k = 1 to side_positions do
8450: LD_ADDR_VAR 0 3
8454: PUSH
8455: DOUBLE
8456: LD_INT 1
8458: DEC
8459: ST_TO_ADDR
8460: LD_EXP 34
8464: PUSH
8465: FOR_TO
8466: IFFALSE 8525
// if not defeated [ k ] then
8468: LD_LOC 14
8472: PUSH
8473: LD_VAR 0 3
8477: ARRAY
8478: NOT
8479: IFFALSE 8523
// if not AlliedSides ( i , k ) then
8481: LD_VAR 0 2
8485: PPUSH
8486: LD_VAR 0 3
8490: PPUSH
8491: CALL 7970 0 2
8495: NOT
8496: IFFALSE 8523
// enemy = enemy ^ [ i , k ] ;
8498: LD_ADDR_VAR 0 4
8502: PUSH
8503: LD_VAR 0 4
8507: PUSH
8508: LD_VAR 0 2
8512: PUSH
8513: LD_VAR 0 3
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: ADD
8522: ST_TO_ADDR
8523: GO 8465
8525: POP
8526: POP
8527: GO 8434
8529: POP
8530: POP
// if not enemy then
8531: LD_VAR 0 4
8535: NOT
8536: IFFALSE 8562
// begin GameEnded = true ;
8538: LD_ADDR_LOC 15
8542: PUSH
8543: LD_INT 1
8545: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8546: LD_LOC 14
8550: PUSH
8551: LD_OWVAR 7
8555: ARRAY
8556: NOT
8557: IFFALSE 8562
// enable ( 401 ) ;
8559: LD_INT 401
8561: ENABLE_MARKED
// end ; end ;
8562: LD_VAR 0 1
8566: RET
// function unfog ; var k , friends ; begin
8567: LD_INT 0
8569: PPUSH
8570: PPUSH
8571: PPUSH
// for k = 1 to side_positions do
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: DOUBLE
8578: LD_INT 1
8580: DEC
8581: ST_TO_ADDR
8582: LD_EXP 34
8586: PUSH
8587: FOR_TO
8588: IFFALSE 8644
// if not defeated [ k ] then
8590: LD_LOC 14
8594: PUSH
8595: LD_VAR 0 2
8599: ARRAY
8600: NOT
8601: IFFALSE 8642
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8603: LD_OWVAR 7
8607: PPUSH
8608: LD_VAR 0 2
8612: PPUSH
8613: CALL_OW 81
8617: PUSH
8618: LD_INT 1
8620: PUSH
8621: EMPTY
8622: LIST
8623: IN
8624: IFFALSE 8642
// friends = friends ^ k ;
8626: LD_ADDR_VAR 0 3
8630: PUSH
8631: LD_VAR 0 3
8635: PUSH
8636: LD_VAR 0 2
8640: ADD
8641: ST_TO_ADDR
8642: GO 8587
8644: POP
8645: POP
// if not friends then
8646: LD_VAR 0 3
8650: NOT
8651: IFFALSE 8665
// begin SetPlayerSpectator ( ) ;
8653: CALL_OW 572
// unfoged = true ;
8657: LD_ADDR_LOC 16
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// end ; end ;
8665: LD_VAR 0 1
8669: RET
// export function MakeGameEnd ; begin
8670: LD_INT 0
8672: PPUSH
// SetPlayerSpectator ( ) ;
8673: CALL_OW 572
// unfoged = true ;
8677: LD_ADDR_LOC 16
8681: PUSH
8682: LD_INT 1
8684: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8685: LD_INT 175
8687: PPUSH
8688: CALL_OW 67
// GameEnded = true ;
8692: LD_ADDR_LOC 15
8696: PUSH
8697: LD_INT 1
8699: ST_TO_ADDR
// end ;
8700: LD_VAR 0 1
8704: RET
// export function GetGameEnded ; begin
8705: LD_INT 0
8707: PPUSH
// result = GameEnded ;
8708: LD_ADDR_VAR 0 1
8712: PUSH
8713: LD_LOC 15
8717: ST_TO_ADDR
// end ; end_of_file
8718: LD_VAR 0 1
8722: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8723: LD_INT 0
8725: PPUSH
8726: PPUSH
8727: PPUSH
// for side = 1 to 8 do
8728: LD_ADDR_VAR 0 2
8732: PUSH
8733: DOUBLE
8734: LD_INT 1
8736: DEC
8737: ST_TO_ADDR
8738: LD_INT 8
8740: PUSH
8741: FOR_TO
8742: IFFALSE 8863
// begin for i = 1 to 72 do
8744: LD_ADDR_VAR 0 3
8748: PUSH
8749: DOUBLE
8750: LD_INT 1
8752: DEC
8753: ST_TO_ADDR
8754: LD_INT 72
8756: PUSH
8757: FOR_TO
8758: IFFALSE 8789
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8760: LD_VAR 0 3
8764: PPUSH
8765: LD_VAR 0 2
8769: PPUSH
8770: LD_INT 0
8772: PPUSH
8773: LD_VAR 0 3
8777: PPUSH
8778: CALL_OW 565
8782: PPUSH
8783: CALL_OW 322
8787: GO 8757
8789: POP
8790: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8791: LD_INT 73
8793: PPUSH
8794: LD_VAR 0 2
8798: PPUSH
8799: LD_INT 0
8801: PPUSH
8802: LD_INT 25
8804: PPUSH
8805: CALL_OW 565
8809: PPUSH
8810: CALL_OW 322
// for i = 0 to 40 do
8814: LD_ADDR_VAR 0 3
8818: PUSH
8819: DOUBLE
8820: LD_INT 0
8822: DEC
8823: ST_TO_ADDR
8824: LD_INT 40
8826: PUSH
8827: FOR_TO
8828: IFFALSE 8859
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8830: LD_VAR 0 3
8834: PPUSH
8835: LD_VAR 0 2
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: LD_VAR 0 3
8847: PPUSH
8848: CALL_OW 565
8852: PPUSH
8853: CALL_OW 324
8857: GO 8827
8859: POP
8860: POP
// end ;
8861: GO 8741
8863: POP
8864: POP
// end ;
8865: LD_VAR 0 1
8869: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8870: LD_INT 0
8872: PPUSH
8873: PPUSH
8874: PPUSH
// for side = 1 to 8 do
8875: LD_ADDR_VAR 0 3
8879: PUSH
8880: DOUBLE
8881: LD_INT 1
8883: DEC
8884: ST_TO_ADDR
8885: LD_INT 8
8887: PUSH
8888: FOR_TO
8889: IFFALSE 12885
// begin for i = 1 to 73 do
8891: LD_ADDR_VAR 0 4
8895: PUSH
8896: DOUBLE
8897: LD_INT 1
8899: DEC
8900: ST_TO_ADDR
8901: LD_INT 73
8903: PUSH
8904: FOR_TO
8905: IFFALSE 8926
// SetTech ( i , side , state_disabled ) ;
8907: LD_VAR 0 4
8911: PPUSH
8912: LD_VAR 0 3
8916: PPUSH
8917: LD_INT 0
8919: PPUSH
8920: CALL_OW 322
8924: GO 8904
8926: POP
8927: POP
// for i = 0 to 40 do
8928: LD_ADDR_VAR 0 4
8932: PUSH
8933: DOUBLE
8934: LD_INT 0
8936: DEC
8937: ST_TO_ADDR
8938: LD_INT 40
8940: PUSH
8941: FOR_TO
8942: IFFALSE 8963
// SetRestrict ( i , side , false ) ;
8944: LD_VAR 0 4
8948: PPUSH
8949: LD_VAR 0 3
8953: PPUSH
8954: LD_INT 0
8956: PPUSH
8957: CALL_OW 324
8961: GO 8941
8963: POP
8964: POP
// case level of 1 :
8965: LD_VAR 0 1
8969: PUSH
8970: LD_INT 1
8972: DOUBLE
8973: EQUAL
8974: IFTRUE 8978
8976: GO 9131
8978: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8979: LD_INT 35
8981: PPUSH
8982: LD_VAR 0 3
8986: PPUSH
8987: LD_INT 1
8989: PPUSH
8990: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8994: LD_INT 45
8996: PPUSH
8997: LD_VAR 0 3
9001: PPUSH
9002: LD_INT 1
9004: PPUSH
9005: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9009: LD_INT 46
9011: PPUSH
9012: LD_VAR 0 3
9016: PPUSH
9017: LD_INT 1
9019: PPUSH
9020: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9024: LD_INT 47
9026: PPUSH
9027: LD_VAR 0 3
9031: PPUSH
9032: LD_INT 1
9034: PPUSH
9035: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9039: LD_INT 0
9041: PPUSH
9042: LD_VAR 0 3
9046: PPUSH
9047: LD_INT 1
9049: PPUSH
9050: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9054: LD_INT 2
9056: PPUSH
9057: LD_VAR 0 3
9061: PPUSH
9062: LD_INT 1
9064: PPUSH
9065: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9069: LD_INT 4
9071: PPUSH
9072: LD_VAR 0 3
9076: PPUSH
9077: LD_INT 1
9079: PPUSH
9080: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9084: LD_INT 6
9086: PPUSH
9087: LD_VAR 0 3
9091: PPUSH
9092: LD_INT 1
9094: PPUSH
9095: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9099: LD_INT 29
9101: PPUSH
9102: LD_VAR 0 3
9106: PPUSH
9107: LD_INT 1
9109: PPUSH
9110: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9114: LD_INT 31
9116: PPUSH
9117: LD_VAR 0 3
9121: PPUSH
9122: LD_INT 1
9124: PPUSH
9125: CALL_OW 324
// end ; 2 :
9129: GO 12883
9131: LD_INT 2
9133: DOUBLE
9134: EQUAL
9135: IFTRUE 9139
9137: GO 9337
9139: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9140: LD_INT 35
9142: PPUSH
9143: LD_VAR 0 3
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9155: LD_INT 45
9157: PPUSH
9158: LD_VAR 0 3
9162: PPUSH
9163: LD_INT 1
9165: PPUSH
9166: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9170: LD_INT 46
9172: PPUSH
9173: LD_VAR 0 3
9177: PPUSH
9178: LD_INT 1
9180: PPUSH
9181: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9185: LD_INT 47
9187: PPUSH
9188: LD_VAR 0 3
9192: PPUSH
9193: LD_INT 1
9195: PPUSH
9196: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9200: LD_INT 1
9202: PPUSH
9203: LD_VAR 0 3
9207: PPUSH
9208: LD_INT 1
9210: PPUSH
9211: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9215: LD_INT 2
9217: PPUSH
9218: LD_VAR 0 3
9222: PPUSH
9223: LD_INT 1
9225: PPUSH
9226: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9230: LD_INT 11
9232: PPUSH
9233: LD_VAR 0 3
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9245: LD_INT 0
9247: PPUSH
9248: LD_VAR 0 3
9252: PPUSH
9253: LD_INT 1
9255: PPUSH
9256: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9260: LD_INT 2
9262: PPUSH
9263: LD_VAR 0 3
9267: PPUSH
9268: LD_INT 1
9270: PPUSH
9271: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9275: LD_INT 4
9277: PPUSH
9278: LD_VAR 0 3
9282: PPUSH
9283: LD_INT 1
9285: PPUSH
9286: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9290: LD_INT 6
9292: PPUSH
9293: LD_VAR 0 3
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9305: LD_INT 29
9307: PPUSH
9308: LD_VAR 0 3
9312: PPUSH
9313: LD_INT 1
9315: PPUSH
9316: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9320: LD_INT 31
9322: PPUSH
9323: LD_VAR 0 3
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: CALL_OW 324
// end ; 3 :
9335: GO 12883
9337: LD_INT 3
9339: DOUBLE
9340: EQUAL
9341: IFTRUE 9345
9343: GO 9798
9345: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9346: LD_INT 35
9348: PPUSH
9349: LD_VAR 0 3
9353: PPUSH
9354: LD_INT 1
9356: PPUSH
9357: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9361: LD_INT 45
9363: PPUSH
9364: LD_VAR 0 3
9368: PPUSH
9369: LD_INT 1
9371: PPUSH
9372: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9376: LD_INT 46
9378: PPUSH
9379: LD_VAR 0 3
9383: PPUSH
9384: LD_INT 1
9386: PPUSH
9387: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9391: LD_INT 47
9393: PPUSH
9394: LD_VAR 0 3
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9406: LD_INT 1
9408: PPUSH
9409: LD_VAR 0 3
9413: PPUSH
9414: LD_INT 1
9416: PPUSH
9417: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9421: LD_INT 2
9423: PPUSH
9424: LD_VAR 0 3
9428: PPUSH
9429: LD_INT 1
9431: PPUSH
9432: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9436: LD_INT 11
9438: PPUSH
9439: LD_VAR 0 3
9443: PPUSH
9444: LD_INT 1
9446: PPUSH
9447: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9451: LD_INT 48
9453: PPUSH
9454: LD_VAR 0 3
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9466: LD_INT 69
9468: PPUSH
9469: LD_VAR 0 3
9473: PPUSH
9474: LD_INT 1
9476: PPUSH
9477: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9481: LD_INT 39
9483: PPUSH
9484: LD_VAR 0 3
9488: PPUSH
9489: LD_INT 1
9491: PPUSH
9492: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9496: LD_INT 43
9498: PPUSH
9499: LD_VAR 0 3
9503: PPUSH
9504: LD_INT 1
9506: PPUSH
9507: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9511: LD_INT 51
9513: PPUSH
9514: LD_VAR 0 3
9518: PPUSH
9519: LD_INT 1
9521: PPUSH
9522: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9526: LD_INT 6
9528: PPUSH
9529: LD_VAR 0 3
9533: PPUSH
9534: LD_INT 1
9536: PPUSH
9537: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9541: LD_INT 0
9543: PPUSH
9544: LD_VAR 0 3
9548: PPUSH
9549: LD_INT 1
9551: PPUSH
9552: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9556: LD_INT 2
9558: PPUSH
9559: LD_VAR 0 3
9563: PPUSH
9564: LD_INT 1
9566: PPUSH
9567: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9571: LD_INT 3
9573: PPUSH
9574: LD_VAR 0 3
9578: PPUSH
9579: LD_INT 1
9581: PPUSH
9582: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9586: LD_INT 4
9588: PPUSH
9589: LD_VAR 0 3
9593: PPUSH
9594: LD_INT 1
9596: PPUSH
9597: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9601: LD_INT 6
9603: PPUSH
9604: LD_VAR 0 3
9608: PPUSH
9609: LD_INT 1
9611: PPUSH
9612: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9616: LD_INT 7
9618: PPUSH
9619: LD_VAR 0 3
9623: PPUSH
9624: LD_INT 1
9626: PPUSH
9627: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9631: LD_INT 8
9633: PPUSH
9634: LD_VAR 0 3
9638: PPUSH
9639: LD_INT 1
9641: PPUSH
9642: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9646: LD_INT 10
9648: PPUSH
9649: LD_VAR 0 3
9653: PPUSH
9654: LD_INT 1
9656: PPUSH
9657: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9661: LD_INT 15
9663: PPUSH
9664: LD_VAR 0 3
9668: PPUSH
9669: LD_INT 1
9671: PPUSH
9672: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9676: LD_INT 16
9678: PPUSH
9679: LD_VAR 0 3
9683: PPUSH
9684: LD_INT 1
9686: PPUSH
9687: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9691: LD_INT 17
9693: PPUSH
9694: LD_VAR 0 3
9698: PPUSH
9699: LD_INT 1
9701: PPUSH
9702: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9706: LD_INT 20
9708: PPUSH
9709: LD_VAR 0 3
9713: PPUSH
9714: LD_INT 1
9716: PPUSH
9717: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9721: LD_INT 26
9723: PPUSH
9724: LD_VAR 0 3
9728: PPUSH
9729: LD_INT 1
9731: PPUSH
9732: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9736: LD_INT 27
9738: PPUSH
9739: LD_VAR 0 3
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9751: LD_INT 29
9753: PPUSH
9754: LD_VAR 0 3
9758: PPUSH
9759: LD_INT 1
9761: PPUSH
9762: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9766: LD_INT 31
9768: PPUSH
9769: LD_VAR 0 3
9773: PPUSH
9774: LD_INT 1
9776: PPUSH
9777: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9781: LD_INT 32
9783: PPUSH
9784: LD_VAR 0 3
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: CALL_OW 324
// end ; 4 :
9796: GO 12883
9798: LD_INT 4
9800: DOUBLE
9801: EQUAL
9802: IFTRUE 9806
9804: GO 10754
9806: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9807: LD_INT 35
9809: PPUSH
9810: LD_VAR 0 3
9814: PPUSH
9815: LD_INT 1
9817: PPUSH
9818: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9822: LD_INT 45
9824: PPUSH
9825: LD_VAR 0 3
9829: PPUSH
9830: LD_INT 1
9832: PPUSH
9833: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9837: LD_INT 46
9839: PPUSH
9840: LD_VAR 0 3
9844: PPUSH
9845: LD_INT 1
9847: PPUSH
9848: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9852: LD_INT 47
9854: PPUSH
9855: LD_VAR 0 3
9859: PPUSH
9860: LD_INT 1
9862: PPUSH
9863: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9867: LD_INT 1
9869: PPUSH
9870: LD_VAR 0 3
9874: PPUSH
9875: LD_INT 1
9877: PPUSH
9878: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9882: LD_INT 2
9884: PPUSH
9885: LD_VAR 0 3
9889: PPUSH
9890: LD_INT 1
9892: PPUSH
9893: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9897: LD_INT 11
9899: PPUSH
9900: LD_VAR 0 3
9904: PPUSH
9905: LD_INT 1
9907: PPUSH
9908: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9912: LD_INT 20
9914: PPUSH
9915: LD_VAR 0 3
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9927: LD_INT 48
9929: PPUSH
9930: LD_VAR 0 3
9934: PPUSH
9935: LD_INT 1
9937: PPUSH
9938: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9942: LD_INT 49
9944: PPUSH
9945: LD_VAR 0 3
9949: PPUSH
9950: LD_INT 1
9952: PPUSH
9953: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9957: LD_INT 69
9959: PPUSH
9960: LD_VAR 0 3
9964: PPUSH
9965: LD_INT 1
9967: PPUSH
9968: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9972: LD_INT 39
9974: PPUSH
9975: LD_VAR 0 3
9979: PPUSH
9980: LD_INT 1
9982: PPUSH
9983: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9987: LD_INT 34
9989: PPUSH
9990: LD_VAR 0 3
9994: PPUSH
9995: LD_INT 1
9997: PPUSH
9998: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10002: LD_INT 42
10004: PPUSH
10005: LD_VAR 0 3
10009: PPUSH
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10017: LD_INT 44
10019: PPUSH
10020: LD_VAR 0 3
10024: PPUSH
10025: LD_INT 1
10027: PPUSH
10028: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10032: LD_INT 41
10034: PPUSH
10035: LD_VAR 0 3
10039: PPUSH
10040: LD_INT 1
10042: PPUSH
10043: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10047: LD_INT 43
10049: PPUSH
10050: LD_VAR 0 3
10054: PPUSH
10055: LD_INT 1
10057: PPUSH
10058: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10062: LD_INT 70
10064: PPUSH
10065: LD_VAR 0 3
10069: PPUSH
10070: LD_INT 1
10072: PPUSH
10073: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10077: LD_INT 51
10079: PPUSH
10080: LD_VAR 0 3
10084: PPUSH
10085: LD_INT 1
10087: PPUSH
10088: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10092: LD_INT 52
10094: PPUSH
10095: LD_VAR 0 3
10099: PPUSH
10100: LD_INT 1
10102: PPUSH
10103: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10107: LD_INT 6
10109: PPUSH
10110: LD_VAR 0 3
10114: PPUSH
10115: LD_INT 1
10117: PPUSH
10118: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10122: LD_INT 15
10124: PPUSH
10125: LD_VAR 0 3
10129: PPUSH
10130: LD_INT 1
10132: PPUSH
10133: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10137: LD_INT 7
10139: PPUSH
10140: LD_VAR 0 3
10144: PPUSH
10145: LD_INT 1
10147: PPUSH
10148: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10152: LD_INT 12
10154: PPUSH
10155: LD_VAR 0 3
10159: PPUSH
10160: LD_INT 1
10162: PPUSH
10163: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10167: LD_INT 18
10169: PPUSH
10170: LD_VAR 0 3
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10182: LD_INT 60
10184: PPUSH
10185: LD_VAR 0 3
10189: PPUSH
10190: LD_INT 1
10192: PPUSH
10193: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10197: LD_INT 9
10199: PPUSH
10200: LD_VAR 0 3
10204: PPUSH
10205: LD_INT 1
10207: PPUSH
10208: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10212: LD_INT 30
10214: PPUSH
10215: LD_VAR 0 3
10219: PPUSH
10220: LD_INT 1
10222: PPUSH
10223: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10227: LD_INT 37
10229: PPUSH
10230: LD_VAR 0 3
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10242: LD_INT 5
10244: PPUSH
10245: LD_VAR 0 3
10249: PPUSH
10250: LD_INT 1
10252: PPUSH
10253: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10257: LD_INT 66
10259: PPUSH
10260: LD_VAR 0 3
10264: PPUSH
10265: LD_INT 1
10267: PPUSH
10268: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10272: LD_INT 21
10274: PPUSH
10275: LD_VAR 0 3
10279: PPUSH
10280: LD_INT 1
10282: PPUSH
10283: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10287: LD_INT 22
10289: PPUSH
10290: LD_VAR 0 3
10294: PPUSH
10295: LD_INT 1
10297: PPUSH
10298: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10302: LD_INT 54
10304: PPUSH
10305: LD_VAR 0 3
10309: PPUSH
10310: LD_INT 1
10312: PPUSH
10313: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10317: LD_INT 0
10319: PPUSH
10320: LD_VAR 0 3
10324: PPUSH
10325: LD_INT 1
10327: PPUSH
10328: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10332: LD_INT 1
10334: PPUSH
10335: LD_VAR 0 3
10339: PPUSH
10340: LD_INT 1
10342: PPUSH
10343: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10347: LD_INT 2
10349: PPUSH
10350: LD_VAR 0 3
10354: PPUSH
10355: LD_INT 1
10357: PPUSH
10358: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10362: LD_INT 3
10364: PPUSH
10365: LD_VAR 0 3
10369: PPUSH
10370: LD_INT 1
10372: PPUSH
10373: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10377: LD_INT 4
10379: PPUSH
10380: LD_VAR 0 3
10384: PPUSH
10385: LD_INT 1
10387: PPUSH
10388: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10392: LD_INT 5
10394: PPUSH
10395: LD_VAR 0 3
10399: PPUSH
10400: LD_INT 1
10402: PPUSH
10403: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10407: LD_INT 6
10409: PPUSH
10410: LD_VAR 0 3
10414: PPUSH
10415: LD_INT 1
10417: PPUSH
10418: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10422: LD_INT 7
10424: PPUSH
10425: LD_VAR 0 3
10429: PPUSH
10430: LD_INT 1
10432: PPUSH
10433: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10437: LD_INT 8
10439: PPUSH
10440: LD_VAR 0 3
10444: PPUSH
10445: LD_INT 1
10447: PPUSH
10448: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10452: LD_INT 10
10454: PPUSH
10455: LD_VAR 0 3
10459: PPUSH
10460: LD_INT 1
10462: PPUSH
10463: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10467: LD_INT 11
10469: PPUSH
10470: LD_VAR 0 3
10474: PPUSH
10475: LD_INT 1
10477: PPUSH
10478: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10482: LD_INT 12
10484: PPUSH
10485: LD_VAR 0 3
10489: PPUSH
10490: LD_INT 1
10492: PPUSH
10493: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10497: LD_INT 13
10499: PPUSH
10500: LD_VAR 0 3
10504: PPUSH
10505: LD_INT 1
10507: PPUSH
10508: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10512: LD_INT 14
10514: PPUSH
10515: LD_VAR 0 3
10519: PPUSH
10520: LD_INT 1
10522: PPUSH
10523: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10527: LD_INT 15
10529: PPUSH
10530: LD_VAR 0 3
10534: PPUSH
10535: LD_INT 1
10537: PPUSH
10538: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10542: LD_INT 16
10544: PPUSH
10545: LD_VAR 0 3
10549: PPUSH
10550: LD_INT 1
10552: PPUSH
10553: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10557: LD_INT 17
10559: PPUSH
10560: LD_VAR 0 3
10564: PPUSH
10565: LD_INT 1
10567: PPUSH
10568: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10572: LD_INT 19
10574: PPUSH
10575: LD_VAR 0 3
10579: PPUSH
10580: LD_INT 1
10582: PPUSH
10583: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10587: LD_INT 20
10589: PPUSH
10590: LD_VAR 0 3
10594: PPUSH
10595: LD_INT 1
10597: PPUSH
10598: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10602: LD_INT 21
10604: PPUSH
10605: LD_VAR 0 3
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10617: LD_INT 23
10619: PPUSH
10620: LD_VAR 0 3
10624: PPUSH
10625: LD_INT 1
10627: PPUSH
10628: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10632: LD_INT 26
10634: PPUSH
10635: LD_VAR 0 3
10639: PPUSH
10640: LD_INT 1
10642: PPUSH
10643: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10647: LD_INT 27
10649: PPUSH
10650: LD_VAR 0 3
10654: PPUSH
10655: LD_INT 1
10657: PPUSH
10658: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10662: LD_INT 28
10664: PPUSH
10665: LD_VAR 0 3
10669: PPUSH
10670: LD_INT 1
10672: PPUSH
10673: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10677: LD_INT 29
10679: PPUSH
10680: LD_VAR 0 3
10684: PPUSH
10685: LD_INT 1
10687: PPUSH
10688: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10692: LD_INT 30
10694: PPUSH
10695: LD_VAR 0 3
10699: PPUSH
10700: LD_INT 1
10702: PPUSH
10703: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10707: LD_INT 31
10709: PPUSH
10710: LD_VAR 0 3
10714: PPUSH
10715: LD_INT 1
10717: PPUSH
10718: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10722: LD_INT 32
10724: PPUSH
10725: LD_VAR 0 3
10729: PPUSH
10730: LD_INT 1
10732: PPUSH
10733: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10737: LD_INT 36
10739: PPUSH
10740: LD_VAR 0 3
10744: PPUSH
10745: LD_INT 1
10747: PPUSH
10748: CALL_OW 324
// end ; 5 :
10752: GO 12883
10754: LD_INT 5
10756: DOUBLE
10757: EQUAL
10758: IFTRUE 10762
10760: GO 11875
10762: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10763: LD_INT 35
10765: PPUSH
10766: LD_VAR 0 3
10770: PPUSH
10771: LD_INT 1
10773: PPUSH
10774: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10778: LD_INT 45
10780: PPUSH
10781: LD_VAR 0 3
10785: PPUSH
10786: LD_INT 1
10788: PPUSH
10789: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10793: LD_INT 46
10795: PPUSH
10796: LD_VAR 0 3
10800: PPUSH
10801: LD_INT 1
10803: PPUSH
10804: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10808: LD_INT 47
10810: PPUSH
10811: LD_VAR 0 3
10815: PPUSH
10816: LD_INT 1
10818: PPUSH
10819: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10823: LD_INT 1
10825: PPUSH
10826: LD_VAR 0 3
10830: PPUSH
10831: LD_INT 1
10833: PPUSH
10834: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10838: LD_INT 2
10840: PPUSH
10841: LD_VAR 0 3
10845: PPUSH
10846: LD_INT 1
10848: PPUSH
10849: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10853: LD_INT 11
10855: PPUSH
10856: LD_VAR 0 3
10860: PPUSH
10861: LD_INT 1
10863: PPUSH
10864: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10868: LD_INT 20
10870: PPUSH
10871: LD_VAR 0 3
10875: PPUSH
10876: LD_INT 1
10878: PPUSH
10879: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10883: LD_INT 48
10885: PPUSH
10886: LD_VAR 0 3
10890: PPUSH
10891: LD_INT 1
10893: PPUSH
10894: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10898: LD_INT 49
10900: PPUSH
10901: LD_VAR 0 3
10905: PPUSH
10906: LD_INT 1
10908: PPUSH
10909: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10913: LD_INT 69
10915: PPUSH
10916: LD_VAR 0 3
10920: PPUSH
10921: LD_INT 1
10923: PPUSH
10924: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10928: LD_INT 39
10930: PPUSH
10931: LD_VAR 0 3
10935: PPUSH
10936: LD_INT 1
10938: PPUSH
10939: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10943: LD_INT 34
10945: PPUSH
10946: LD_VAR 0 3
10950: PPUSH
10951: LD_INT 1
10953: PPUSH
10954: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10958: LD_INT 42
10960: PPUSH
10961: LD_VAR 0 3
10965: PPUSH
10966: LD_INT 1
10968: PPUSH
10969: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10973: LD_INT 44
10975: PPUSH
10976: LD_VAR 0 3
10980: PPUSH
10981: LD_INT 1
10983: PPUSH
10984: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10988: LD_INT 41
10990: PPUSH
10991: LD_VAR 0 3
10995: PPUSH
10996: LD_INT 1
10998: PPUSH
10999: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11003: LD_INT 40
11005: PPUSH
11006: LD_VAR 0 3
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11018: LD_INT 43
11020: PPUSH
11021: LD_VAR 0 3
11025: PPUSH
11026: LD_INT 1
11028: PPUSH
11029: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11033: LD_INT 70
11035: PPUSH
11036: LD_VAR 0 3
11040: PPUSH
11041: LD_INT 1
11043: PPUSH
11044: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11048: LD_INT 51
11050: PPUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: LD_INT 1
11058: PPUSH
11059: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11063: LD_INT 52
11065: PPUSH
11066: LD_VAR 0 3
11070: PPUSH
11071: LD_INT 1
11073: PPUSH
11074: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11078: LD_INT 6
11080: PPUSH
11081: LD_VAR 0 3
11085: PPUSH
11086: LD_INT 1
11088: PPUSH
11089: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11093: LD_INT 15
11095: PPUSH
11096: LD_VAR 0 3
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11108: LD_INT 7
11110: PPUSH
11111: LD_VAR 0 3
11115: PPUSH
11116: LD_INT 1
11118: PPUSH
11119: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11123: LD_INT 12
11125: PPUSH
11126: LD_VAR 0 3
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11138: LD_INT 17
11140: PPUSH
11141: LD_VAR 0 3
11145: PPUSH
11146: LD_INT 1
11148: PPUSH
11149: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11153: LD_INT 18
11155: PPUSH
11156: LD_VAR 0 3
11160: PPUSH
11161: LD_INT 1
11163: PPUSH
11164: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11168: LD_INT 60
11170: PPUSH
11171: LD_VAR 0 3
11175: PPUSH
11176: LD_INT 1
11178: PPUSH
11179: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11183: LD_INT 32
11185: PPUSH
11186: LD_VAR 0 3
11190: PPUSH
11191: LD_INT 1
11193: PPUSH
11194: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11198: LD_INT 9
11200: PPUSH
11201: LD_VAR 0 3
11205: PPUSH
11206: LD_INT 1
11208: PPUSH
11209: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11213: LD_INT 57
11215: PPUSH
11216: LD_VAR 0 3
11220: PPUSH
11221: LD_INT 1
11223: PPUSH
11224: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11228: LD_INT 30
11230: PPUSH
11231: LD_VAR 0 3
11235: PPUSH
11236: LD_INT 1
11238: PPUSH
11239: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11243: LD_INT 37
11245: PPUSH
11246: LD_VAR 0 3
11250: PPUSH
11251: LD_INT 1
11253: PPUSH
11254: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11258: LD_INT 63
11260: PPUSH
11261: LD_VAR 0 3
11265: PPUSH
11266: LD_INT 1
11268: PPUSH
11269: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11273: LD_INT 3
11275: PPUSH
11276: LD_VAR 0 3
11280: PPUSH
11281: LD_INT 1
11283: PPUSH
11284: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11288: LD_INT 4
11290: PPUSH
11291: LD_VAR 0 3
11295: PPUSH
11296: LD_INT 1
11298: PPUSH
11299: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11303: LD_INT 5
11305: PPUSH
11306: LD_VAR 0 3
11310: PPUSH
11311: LD_INT 1
11313: PPUSH
11314: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11318: LD_INT 66
11320: PPUSH
11321: LD_VAR 0 3
11325: PPUSH
11326: LD_INT 1
11328: PPUSH
11329: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11333: LD_INT 21
11335: PPUSH
11336: LD_VAR 0 3
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11348: LD_INT 22
11350: PPUSH
11351: LD_VAR 0 3
11355: PPUSH
11356: LD_INT 1
11358: PPUSH
11359: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11363: LD_INT 19
11365: PPUSH
11366: LD_VAR 0 3
11370: PPUSH
11371: LD_INT 1
11373: PPUSH
11374: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11378: LD_INT 54
11380: PPUSH
11381: LD_VAR 0 3
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11393: LD_INT 55
11395: PPUSH
11396: LD_VAR 0 3
11400: PPUSH
11401: LD_INT 1
11403: PPUSH
11404: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11408: LD_INT 0
11410: PPUSH
11411: LD_VAR 0 3
11415: PPUSH
11416: LD_INT 1
11418: PPUSH
11419: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11423: LD_INT 1
11425: PPUSH
11426: LD_VAR 0 3
11430: PPUSH
11431: LD_INT 1
11433: PPUSH
11434: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11438: LD_INT 2
11440: PPUSH
11441: LD_VAR 0 3
11445: PPUSH
11446: LD_INT 1
11448: PPUSH
11449: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11453: LD_INT 3
11455: PPUSH
11456: LD_VAR 0 3
11460: PPUSH
11461: LD_INT 1
11463: PPUSH
11464: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11468: LD_INT 4
11470: PPUSH
11471: LD_VAR 0 3
11475: PPUSH
11476: LD_INT 1
11478: PPUSH
11479: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11483: LD_INT 5
11485: PPUSH
11486: LD_VAR 0 3
11490: PPUSH
11491: LD_INT 1
11493: PPUSH
11494: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11498: LD_INT 6
11500: PPUSH
11501: LD_VAR 0 3
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11513: LD_INT 7
11515: PPUSH
11516: LD_VAR 0 3
11520: PPUSH
11521: LD_INT 1
11523: PPUSH
11524: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11528: LD_INT 8
11530: PPUSH
11531: LD_VAR 0 3
11535: PPUSH
11536: LD_INT 1
11538: PPUSH
11539: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11543: LD_INT 10
11545: PPUSH
11546: LD_VAR 0 3
11550: PPUSH
11551: LD_INT 1
11553: PPUSH
11554: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11558: LD_INT 11
11560: PPUSH
11561: LD_VAR 0 3
11565: PPUSH
11566: LD_INT 1
11568: PPUSH
11569: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11573: LD_INT 12
11575: PPUSH
11576: LD_VAR 0 3
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11588: LD_INT 13
11590: PPUSH
11591: LD_VAR 0 3
11595: PPUSH
11596: LD_INT 1
11598: PPUSH
11599: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11603: LD_INT 14
11605: PPUSH
11606: LD_VAR 0 3
11610: PPUSH
11611: LD_INT 1
11613: PPUSH
11614: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11618: LD_INT 15
11620: PPUSH
11621: LD_VAR 0 3
11625: PPUSH
11626: LD_INT 1
11628: PPUSH
11629: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11633: LD_INT 16
11635: PPUSH
11636: LD_VAR 0 3
11640: PPUSH
11641: LD_INT 1
11643: PPUSH
11644: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11648: LD_INT 17
11650: PPUSH
11651: LD_VAR 0 3
11655: PPUSH
11656: LD_INT 1
11658: PPUSH
11659: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11663: LD_INT 18
11665: PPUSH
11666: LD_VAR 0 3
11670: PPUSH
11671: LD_INT 1
11673: PPUSH
11674: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11678: LD_INT 19
11680: PPUSH
11681: LD_VAR 0 3
11685: PPUSH
11686: LD_INT 1
11688: PPUSH
11689: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11693: LD_INT 20
11695: PPUSH
11696: LD_VAR 0 3
11700: PPUSH
11701: LD_INT 1
11703: PPUSH
11704: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11708: LD_INT 21
11710: PPUSH
11711: LD_VAR 0 3
11715: PPUSH
11716: LD_INT 1
11718: PPUSH
11719: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11723: LD_INT 23
11725: PPUSH
11726: LD_VAR 0 3
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11738: LD_INT 26
11740: PPUSH
11741: LD_VAR 0 3
11745: PPUSH
11746: LD_INT 1
11748: PPUSH
11749: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11753: LD_INT 27
11755: PPUSH
11756: LD_VAR 0 3
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11768: LD_INT 28
11770: PPUSH
11771: LD_VAR 0 3
11775: PPUSH
11776: LD_INT 1
11778: PPUSH
11779: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11783: LD_INT 29
11785: PPUSH
11786: LD_VAR 0 3
11790: PPUSH
11791: LD_INT 1
11793: PPUSH
11794: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11798: LD_INT 30
11800: PPUSH
11801: LD_VAR 0 3
11805: PPUSH
11806: LD_INT 1
11808: PPUSH
11809: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11813: LD_INT 31
11815: PPUSH
11816: LD_VAR 0 3
11820: PPUSH
11821: LD_INT 1
11823: PPUSH
11824: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11828: LD_INT 32
11830: PPUSH
11831: LD_VAR 0 3
11835: PPUSH
11836: LD_INT 1
11838: PPUSH
11839: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11843: LD_INT 33
11845: PPUSH
11846: LD_VAR 0 3
11850: PPUSH
11851: LD_INT 1
11853: PPUSH
11854: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11858: LD_INT 36
11860: PPUSH
11861: LD_VAR 0 3
11865: PPUSH
11866: LD_INT 1
11868: PPUSH
11869: CALL_OW 324
// end ; 6 :
11873: GO 12883
11875: LD_INT 6
11877: DOUBLE
11878: EQUAL
11879: IFTRUE 11883
11881: GO 12808
11883: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11884: LD_INT 35
11886: PPUSH
11887: LD_VAR 0 3
11891: PPUSH
11892: LD_INT 1
11894: PPUSH
11895: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11899: LD_INT 45
11901: PPUSH
11902: LD_VAR 0 3
11906: PPUSH
11907: LD_INT 1
11909: PPUSH
11910: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11914: LD_INT 46
11916: PPUSH
11917: LD_VAR 0 3
11921: PPUSH
11922: LD_INT 1
11924: PPUSH
11925: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11929: LD_INT 47
11931: PPUSH
11932: LD_VAR 0 3
11936: PPUSH
11937: LD_INT 1
11939: PPUSH
11940: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11944: LD_INT 1
11946: PPUSH
11947: LD_VAR 0 3
11951: PPUSH
11952: LD_INT 1
11954: PPUSH
11955: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11959: LD_INT 2
11961: PPUSH
11962: LD_VAR 0 3
11966: PPUSH
11967: LD_INT 1
11969: PPUSH
11970: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11974: LD_INT 11
11976: PPUSH
11977: LD_VAR 0 3
11981: PPUSH
11982: LD_INT 1
11984: PPUSH
11985: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11989: LD_INT 20
11991: PPUSH
11992: LD_VAR 0 3
11996: PPUSH
11997: LD_INT 1
11999: PPUSH
12000: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12004: LD_INT 48
12006: PPUSH
12007: LD_VAR 0 3
12011: PPUSH
12012: LD_INT 1
12014: PPUSH
12015: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12019: LD_INT 49
12021: PPUSH
12022: LD_VAR 0 3
12026: PPUSH
12027: LD_INT 1
12029: PPUSH
12030: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12034: LD_INT 50
12036: PPUSH
12037: LD_VAR 0 3
12041: PPUSH
12042: LD_INT 1
12044: PPUSH
12045: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12049: LD_INT 69
12051: PPUSH
12052: LD_VAR 0 3
12056: PPUSH
12057: LD_INT 1
12059: PPUSH
12060: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12064: LD_INT 39
12066: PPUSH
12067: LD_VAR 0 3
12071: PPUSH
12072: LD_INT 1
12074: PPUSH
12075: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12079: LD_INT 34
12081: PPUSH
12082: LD_VAR 0 3
12086: PPUSH
12087: LD_INT 1
12089: PPUSH
12090: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12094: LD_INT 42
12096: PPUSH
12097: LD_VAR 0 3
12101: PPUSH
12102: LD_INT 1
12104: PPUSH
12105: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12109: LD_INT 44
12111: PPUSH
12112: LD_VAR 0 3
12116: PPUSH
12117: LD_INT 1
12119: PPUSH
12120: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12124: LD_INT 41
12126: PPUSH
12127: LD_VAR 0 3
12131: PPUSH
12132: LD_INT 1
12134: PPUSH
12135: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12139: LD_INT 13
12141: PPUSH
12142: LD_VAR 0 3
12146: PPUSH
12147: LD_INT 1
12149: PPUSH
12150: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12154: LD_INT 40
12156: PPUSH
12157: LD_VAR 0 3
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12169: LD_INT 43
12171: PPUSH
12172: LD_VAR 0 3
12176: PPUSH
12177: LD_INT 1
12179: PPUSH
12180: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12184: LD_INT 70
12186: PPUSH
12187: LD_VAR 0 3
12191: PPUSH
12192: LD_INT 1
12194: PPUSH
12195: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12199: LD_INT 23
12201: PPUSH
12202: LD_VAR 0 3
12206: PPUSH
12207: LD_INT 1
12209: PPUSH
12210: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12214: LD_INT 51
12216: PPUSH
12217: LD_VAR 0 3
12221: PPUSH
12222: LD_INT 1
12224: PPUSH
12225: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12229: LD_INT 52
12231: PPUSH
12232: LD_VAR 0 3
12236: PPUSH
12237: LD_INT 1
12239: PPUSH
12240: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12244: LD_INT 6
12246: PPUSH
12247: LD_VAR 0 3
12251: PPUSH
12252: LD_INT 1
12254: PPUSH
12255: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12259: LD_INT 15
12261: PPUSH
12262: LD_VAR 0 3
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12274: LD_INT 7
12276: PPUSH
12277: LD_VAR 0 3
12281: PPUSH
12282: LD_INT 1
12284: PPUSH
12285: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12289: LD_INT 12
12291: PPUSH
12292: LD_VAR 0 3
12296: PPUSH
12297: LD_INT 1
12299: PPUSH
12300: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12304: LD_INT 10
12306: PPUSH
12307: LD_VAR 0 3
12311: PPUSH
12312: LD_INT 1
12314: PPUSH
12315: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12319: LD_INT 17
12321: PPUSH
12322: LD_VAR 0 3
12326: PPUSH
12327: LD_INT 1
12329: PPUSH
12330: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12334: LD_INT 18
12336: PPUSH
12337: LD_VAR 0 3
12341: PPUSH
12342: LD_INT 1
12344: PPUSH
12345: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12349: LD_INT 60
12351: PPUSH
12352: LD_VAR 0 3
12356: PPUSH
12357: LD_INT 1
12359: PPUSH
12360: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12364: LD_INT 61
12366: PPUSH
12367: LD_VAR 0 3
12371: PPUSH
12372: LD_INT 1
12374: PPUSH
12375: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12379: LD_INT 32
12381: PPUSH
12382: LD_VAR 0 3
12386: PPUSH
12387: LD_INT 1
12389: PPUSH
12390: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12394: LD_INT 27
12396: PPUSH
12397: LD_VAR 0 3
12401: PPUSH
12402: LD_INT 1
12404: PPUSH
12405: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12409: LD_INT 36
12411: PPUSH
12412: LD_VAR 0 3
12416: PPUSH
12417: LD_INT 1
12419: PPUSH
12420: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12424: LD_INT 33
12426: PPUSH
12427: LD_VAR 0 3
12431: PPUSH
12432: LD_INT 1
12434: PPUSH
12435: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12439: LD_INT 9
12441: PPUSH
12442: LD_VAR 0 3
12446: PPUSH
12447: LD_INT 1
12449: PPUSH
12450: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12454: LD_INT 38
12456: PPUSH
12457: LD_VAR 0 3
12461: PPUSH
12462: LD_INT 1
12464: PPUSH
12465: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12469: LD_INT 57
12471: PPUSH
12472: LD_VAR 0 3
12476: PPUSH
12477: LD_INT 1
12479: PPUSH
12480: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12484: LD_INT 58
12486: PPUSH
12487: LD_VAR 0 3
12491: PPUSH
12492: LD_INT 1
12494: PPUSH
12495: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12499: LD_INT 28
12501: PPUSH
12502: LD_VAR 0 3
12506: PPUSH
12507: LD_INT 1
12509: PPUSH
12510: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12514: LD_INT 29
12516: PPUSH
12517: LD_VAR 0 3
12521: PPUSH
12522: LD_INT 1
12524: PPUSH
12525: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12529: LD_INT 30
12531: PPUSH
12532: LD_VAR 0 3
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12544: LD_INT 37
12546: PPUSH
12547: LD_VAR 0 3
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12559: LD_INT 63
12561: PPUSH
12562: LD_VAR 0 3
12566: PPUSH
12567: LD_INT 1
12569: PPUSH
12570: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12574: LD_INT 64
12576: PPUSH
12577: LD_VAR 0 3
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12589: LD_INT 3
12591: PPUSH
12592: LD_VAR 0 3
12596: PPUSH
12597: LD_INT 1
12599: PPUSH
12600: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12604: LD_INT 4
12606: PPUSH
12607: LD_VAR 0 3
12611: PPUSH
12612: LD_INT 1
12614: PPUSH
12615: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12619: LD_INT 5
12621: PPUSH
12622: LD_VAR 0 3
12626: PPUSH
12627: LD_INT 1
12629: PPUSH
12630: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12634: LD_INT 8
12636: PPUSH
12637: LD_VAR 0 3
12641: PPUSH
12642: LD_INT 1
12644: PPUSH
12645: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12649: LD_INT 66
12651: PPUSH
12652: LD_VAR 0 3
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12664: LD_INT 67
12666: PPUSH
12667: LD_VAR 0 3
12671: PPUSH
12672: LD_INT 1
12674: PPUSH
12675: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12679: LD_INT 21
12681: PPUSH
12682: LD_VAR 0 3
12686: PPUSH
12687: LD_INT 1
12689: PPUSH
12690: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12694: LD_INT 22
12696: PPUSH
12697: LD_VAR 0 3
12701: PPUSH
12702: LD_INT 1
12704: PPUSH
12705: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12709: LD_INT 19
12711: PPUSH
12712: LD_VAR 0 3
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12724: LD_INT 26
12726: PPUSH
12727: LD_VAR 0 3
12731: PPUSH
12732: LD_INT 1
12734: PPUSH
12735: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12739: LD_INT 54
12741: PPUSH
12742: LD_VAR 0 3
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12754: LD_INT 55
12756: PPUSH
12757: LD_VAR 0 3
12761: PPUSH
12762: LD_INT 1
12764: PPUSH
12765: CALL_OW 322
// for i = 0 to 39 do
12769: LD_ADDR_VAR 0 4
12773: PUSH
12774: DOUBLE
12775: LD_INT 0
12777: DEC
12778: ST_TO_ADDR
12779: LD_INT 39
12781: PUSH
12782: FOR_TO
12783: IFFALSE 12804
// SetRestrict ( i , side , true ) ;
12785: LD_VAR 0 4
12789: PPUSH
12790: LD_VAR 0 3
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: CALL_OW 324
12802: GO 12782
12804: POP
12805: POP
// end ; else
12806: GO 12883
12808: POP
// begin for i = 1 to 73 do
12809: LD_ADDR_VAR 0 4
12813: PUSH
12814: DOUBLE
12815: LD_INT 1
12817: DEC
12818: ST_TO_ADDR
12819: LD_INT 73
12821: PUSH
12822: FOR_TO
12823: IFFALSE 12844
// SetTech ( i , side , state_enabled ) ;
12825: LD_VAR 0 4
12829: PPUSH
12830: LD_VAR 0 3
12834: PPUSH
12835: LD_INT 1
12837: PPUSH
12838: CALL_OW 322
12842: GO 12822
12844: POP
12845: POP
// for i = 0 to 39 do
12846: LD_ADDR_VAR 0 4
12850: PUSH
12851: DOUBLE
12852: LD_INT 0
12854: DEC
12855: ST_TO_ADDR
12856: LD_INT 39
12858: PUSH
12859: FOR_TO
12860: IFFALSE 12881
// SetRestrict ( i , side , true ) ;
12862: LD_VAR 0 4
12866: PPUSH
12867: LD_VAR 0 3
12871: PPUSH
12872: LD_INT 1
12874: PPUSH
12875: CALL_OW 324
12879: GO 12859
12881: POP
12882: POP
// end ; end ; end ;
12883: GO 8888
12885: POP
12886: POP
// end ; end_of_file
12887: LD_VAR 0 2
12891: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12892: LD_INT 0
12894: PPUSH
12895: PPUSH
12896: PPUSH
12897: PPUSH
12898: PPUSH
12899: PPUSH
12900: PPUSH
12901: PPUSH
12902: PPUSH
// for i := 1 to 8 do
12903: LD_ADDR_VAR 0 2
12907: PUSH
12908: DOUBLE
12909: LD_INT 1
12911: DEC
12912: ST_TO_ADDR
12913: LD_INT 8
12915: PUSH
12916: FOR_TO
12917: IFFALSE 13301
// begin if Side_Positions [ i ] then
12919: LD_EXP 34
12923: PUSH
12924: LD_VAR 0 2
12928: ARRAY
12929: IFFALSE 13299
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12931: LD_ADDR_VAR 0 7
12935: PUSH
12936: LD_INT 22
12938: PUSH
12939: LD_VAR 0 2
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 21
12950: PUSH
12951: LD_INT 1
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PPUSH
12962: CALL_OW 69
12966: PUSH
12967: LD_INT 0
12969: PLUS
12970: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12971: LD_ADDR_VAR 0 9
12975: PUSH
12976: LD_INT 22
12978: PUSH
12979: LD_VAR 0 2
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 2
12990: PUSH
12991: LD_INT 30
12993: PUSH
12994: LD_INT 0
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 30
13003: PUSH
13004: LD_INT 1
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 69
13024: ST_TO_ADDR
// crates := 0 ;
13025: LD_ADDR_VAR 0 4
13029: PUSH
13030: LD_INT 0
13032: ST_TO_ADDR
// oil := 0 ;
13033: LD_ADDR_VAR 0 5
13037: PUSH
13038: LD_INT 0
13040: ST_TO_ADDR
// sib := 0 ;
13041: LD_ADDR_VAR 0 6
13045: PUSH
13046: LD_INT 0
13048: ST_TO_ADDR
// if bases then
13049: LD_VAR 0 9
13053: IFFALSE 13159
// begin for j in bases do
13055: LD_ADDR_VAR 0 3
13059: PUSH
13060: LD_VAR 0 9
13064: PUSH
13065: FOR_IN
13066: IFFALSE 13157
// begin base := GetBase ( j ) ;
13068: LD_ADDR_VAR 0 8
13072: PUSH
13073: LD_VAR 0 3
13077: PPUSH
13078: CALL_OW 274
13082: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13083: LD_ADDR_VAR 0 4
13087: PUSH
13088: LD_VAR 0 4
13092: PUSH
13093: LD_VAR 0 8
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: CALL_OW 275
13105: PLUS
13106: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13107: LD_ADDR_VAR 0 5
13111: PUSH
13112: LD_VAR 0 5
13116: PUSH
13117: LD_VAR 0 8
13121: PPUSH
13122: LD_INT 2
13124: PPUSH
13125: CALL_OW 275
13129: PLUS
13130: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13131: LD_ADDR_VAR 0 6
13135: PUSH
13136: LD_VAR 0 6
13140: PUSH
13141: LD_VAR 0 8
13145: PPUSH
13146: LD_INT 3
13148: PPUSH
13149: CALL_OW 275
13153: PLUS
13154: ST_TO_ADDR
// end ;
13155: GO 13065
13157: POP
13158: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13159: LD_STRING setSpecText(
13161: PUSH
13162: LD_VAR 0 2
13166: STR
13167: PUSH
13168: LD_STRING ,
13170: STR
13171: PUSH
13172: LD_INT 2
13174: STR
13175: PUSH
13176: LD_STRING ,
13178: STR
13179: PUSH
13180: LD_VAR 0 4
13184: STR
13185: PUSH
13186: LD_STRING )
13188: STR
13189: PPUSH
13190: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13194: LD_STRING setSpecText(
13196: PUSH
13197: LD_VAR 0 2
13201: STR
13202: PUSH
13203: LD_STRING ,
13205: STR
13206: PUSH
13207: LD_INT 3
13209: STR
13210: PUSH
13211: LD_STRING ,
13213: STR
13214: PUSH
13215: LD_VAR 0 5
13219: STR
13220: PUSH
13221: LD_STRING )
13223: STR
13224: PPUSH
13225: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13229: LD_STRING setSpecText(
13231: PUSH
13232: LD_VAR 0 2
13236: STR
13237: PUSH
13238: LD_STRING ,
13240: STR
13241: PUSH
13242: LD_INT 4
13244: STR
13245: PUSH
13246: LD_STRING ,
13248: STR
13249: PUSH
13250: LD_VAR 0 6
13254: STR
13255: PUSH
13256: LD_STRING )
13258: STR
13259: PPUSH
13260: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13264: LD_STRING setSpecText(
13266: PUSH
13267: LD_VAR 0 2
13271: STR
13272: PUSH
13273: LD_STRING ,
13275: STR
13276: PUSH
13277: LD_INT 5
13279: STR
13280: PUSH
13281: LD_STRING ,
13283: STR
13284: PUSH
13285: LD_VAR 0 7
13289: STR
13290: PUSH
13291: LD_STRING )
13293: STR
13294: PPUSH
13295: CALL_OW 559
// end ; end ;
13299: GO 12916
13301: POP
13302: POP
// end ;
13303: LD_VAR 0 1
13307: RET
// every 0 0$1 do
13308: GO 13310
13310: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13311: LD_STRING setSpecLogoNumber(
13313: PUSH
13314: LD_INT 2
13316: STR
13317: PUSH
13318: LD_STRING ,
13320: STR
13321: PUSH
13322: LD_INT 1
13324: STR
13325: PUSH
13326: LD_STRING )
13328: STR
13329: PPUSH
13330: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13334: LD_STRING setSpecLogoNumber(
13336: PUSH
13337: LD_INT 3
13339: STR
13340: PUSH
13341: LD_STRING ,
13343: STR
13344: PUSH
13345: LD_INT 2
13347: STR
13348: PUSH
13349: LD_STRING )
13351: STR
13352: PPUSH
13353: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13357: LD_STRING setSpecLogoNumber(
13359: PUSH
13360: LD_INT 4
13362: STR
13363: PUSH
13364: LD_STRING ,
13366: STR
13367: PUSH
13368: LD_INT 3
13370: STR
13371: PUSH
13372: LD_STRING )
13374: STR
13375: PPUSH
13376: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13380: LD_STRING setSpecLogoNumber(
13382: PUSH
13383: LD_INT 5
13385: STR
13386: PUSH
13387: LD_STRING ,
13389: STR
13390: PUSH
13391: LD_INT 4
13393: STR
13394: PUSH
13395: LD_STRING )
13397: STR
13398: PPUSH
13399: CALL_OW 559
// end ;
13403: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13404: LD_INT 2
13406: PUSH
13407: LD_INT 30
13409: PUSH
13410: LD_INT 0
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: LD_INT 30
13419: PUSH
13420: LD_INT 1
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: PPUSH
13432: CALL_OW 69
13436: IFFALSE 13446
13438: GO 13440
13440: DISABLE
// begin enable ;
13441: ENABLE
// UpdateSpectatorBar ;
13442: CALL 12892 0 0
// end ; end_of_file
13446: END
// var respawn , inqueue ; export function init_respawning ; begin
13447: LD_INT 0
13449: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13450: LD_ADDR_LOC 18
13454: PUSH
13455: LD_INT 1
13457: PPUSH
13458: LD_INT 8
13460: PPUSH
13461: CALL_OW 12
13465: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13466: LD_ADDR_LOC 19
13470: PUSH
13471: LD_INT 0
13473: PUSH
13474: LD_INT 0
13476: PUSH
13477: LD_INT 0
13479: PUSH
13480: LD_INT 0
13482: PUSH
13483: LD_INT 0
13485: PUSH
13486: LD_INT 0
13488: PUSH
13489: LD_INT 0
13491: PUSH
13492: LD_INT 0
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: ST_TO_ADDR
// end ;
13505: LD_VAR 0 1
13509: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13510: GO 13512
13512: DISABLE
13513: LD_INT 0
13515: PPUSH
13516: PPUSH
13517: PPUSH
// begin if respawning_time_max = 0 then
13518: LD_EXP 28
13522: PUSH
13523: LD_INT 0
13525: EQUAL
13526: IFFALSE 13530
// exit ;
13528: GO 13938
// if respawn = 8 then
13530: LD_LOC 18
13534: PUSH
13535: LD_INT 8
13537: EQUAL
13538: IFFALSE 13550
// respawn := 1 else
13540: LD_ADDR_LOC 18
13544: PUSH
13545: LD_INT 1
13547: ST_TO_ADDR
13548: GO 13564
// respawn := respawn + 1 ;
13550: LD_ADDR_LOC 18
13554: PUSH
13555: LD_LOC 18
13559: PUSH
13560: LD_INT 1
13562: PLUS
13563: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13564: LD_EXP 34
13568: PUSH
13569: LD_LOC 18
13573: ARRAY
13574: PUSH
13575: LD_LOC 19
13579: PUSH
13580: LD_LOC 18
13584: ARRAY
13585: NOT
13586: AND
13587: IFFALSE 13937
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13589: LD_ADDR_VAR 0 1
13593: PUSH
13594: LD_INT 21
13596: PUSH
13597: LD_INT 1
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 22
13606: PUSH
13607: LD_LOC 18
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 3
13618: PUSH
13619: LD_INT 23
13621: PUSH
13622: LD_INT 0
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: PPUSH
13635: CALL_OW 69
13639: ST_TO_ADDR
// if n < number_of_people then
13640: LD_VAR 0 1
13644: PUSH
13645: LD_EXP 19
13649: LESS
13650: IFFALSE 13934
// begin aktresp := respawn ;
13652: LD_ADDR_VAR 0 3
13656: PUSH
13657: LD_LOC 18
13661: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13662: LD_ADDR_LOC 19
13666: PUSH
13667: LD_LOC 19
13671: PPUSH
13672: LD_VAR 0 3
13676: PPUSH
13677: LD_INT 1
13679: PPUSH
13680: CALL_OW 1
13684: ST_TO_ADDR
// enable ;
13685: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13686: LD_EXP 27
13690: PPUSH
13691: LD_EXP 28
13695: PPUSH
13696: CALL_OW 12
13700: PPUSH
13701: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13705: LD_ADDR_LOC 19
13709: PUSH
13710: LD_LOC 19
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 0
13722: PPUSH
13723: CALL_OW 1
13727: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13728: LD_ADDR_VAR 0 2
13732: PUSH
13733: LD_INT 21
13735: PUSH
13736: LD_INT 3
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 2
13745: PUSH
13746: LD_INT 30
13748: PUSH
13749: LD_INT 0
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: LD_INT 30
13758: PUSH
13759: LD_INT 1
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 50
13773: PUSH
13774: EMPTY
13775: LIST
13776: PUSH
13777: LD_INT 22
13779: PUSH
13780: LD_VAR 0 3
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: PPUSH
13795: CALL_OW 69
13799: ST_TO_ADDR
// if dep = 0 then
13800: LD_VAR 0 2
13804: PUSH
13805: LD_INT 0
13807: EQUAL
13808: IFFALSE 13812
// exit ;
13810: GO 13938
// hc_name :=  ;
13812: LD_ADDR_OWVAR 26
13816: PUSH
13817: LD_STRING 
13819: ST_TO_ADDR
// hc_importance := 0 ;
13820: LD_ADDR_OWVAR 32
13824: PUSH
13825: LD_INT 0
13827: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13828: LD_INT 0
13830: PPUSH
13831: LD_INT 0
13833: PPUSH
13834: LD_EXP 20
13838: PUSH
13839: LD_INT 2
13841: DIV
13842: PPUSH
13843: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13847: LD_ADDR_OWVAR 21
13851: PUSH
13852: LD_EXP 35
13856: PUSH
13857: LD_VAR 0 3
13861: ARRAY
13862: ST_TO_ADDR
// uc_side := aktresp ;
13863: LD_ADDR_OWVAR 20
13867: PUSH
13868: LD_VAR 0 3
13872: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13873: LD_ADDR_VAR 0 2
13877: PUSH
13878: LD_VAR 0 2
13882: PUSH
13883: LD_INT 1
13885: PPUSH
13886: LD_VAR 0 2
13890: PPUSH
13891: CALL_OW 12
13895: ARRAY
13896: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
13897: CALL_OW 44
13901: PPUSH
13902: LD_VAR 0 2
13906: PPUSH
13907: CALL_OW 250
13911: PPUSH
13912: LD_VAR 0 2
13916: PPUSH
13917: CALL_OW 251
13921: PPUSH
13922: LD_INT 7
13924: PPUSH
13925: LD_INT 1
13927: PPUSH
13928: CALL_OW 50
// end else
13932: GO 13935
// enable ;
13934: ENABLE
// end else
13935: GO 13938
// enable ;
13937: ENABLE
// end ; end_of_file
13938: PPOPN 3
13940: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13941: LD_INT 0
13943: PPUSH
13944: PPUSH
13945: PPUSH
// BuildUpTime_Delay = 0 ;
13946: LD_ADDR_EXP 57
13950: PUSH
13951: LD_INT 0
13953: ST_TO_ADDR
// if not def_builduptime then
13954: LD_EXP 14
13958: NOT
13959: IFFALSE 13963
// exit ;
13961: GO 14146
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
13963: LD_ADDR_EXP 57
13967: PUSH
13968: LD_INT 8400
13970: PUSH
13971: LD_INT 2100
13973: PUSH
13974: LD_EXP 14
13978: MUL
13979: PLUS
13980: ST_TO_ADDR
// BuildUpTimeActive := true ;
13981: LD_ADDR_EXP 56
13985: PUSH
13986: LD_INT 1
13988: ST_TO_ADDR
// for i := 1 to 8 do
13989: LD_ADDR_VAR 0 2
13993: PUSH
13994: DOUBLE
13995: LD_INT 1
13997: DEC
13998: ST_TO_ADDR
13999: LD_INT 8
14001: PUSH
14002: FOR_TO
14003: IFFALSE 14144
// if Side_Positions [ i ] then
14005: LD_EXP 34
14009: PUSH
14010: LD_VAR 0 2
14014: ARRAY
14015: IFFALSE 14142
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14017: LD_EXP 55
14021: PUSH
14022: LD_EXP 34
14026: PUSH
14027: LD_VAR 0 2
14031: ARRAY
14032: ARRAY
14033: PPUSH
14034: LD_INT 5
14036: PPUSH
14037: CALL_OW 424
// for j := 1 to 8 do
14041: LD_ADDR_VAR 0 3
14045: PUSH
14046: DOUBLE
14047: LD_INT 1
14049: DEC
14050: ST_TO_ADDR
14051: LD_INT 8
14053: PUSH
14054: FOR_TO
14055: IFFALSE 14140
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14057: LD_EXP 34
14061: PUSH
14062: LD_VAR 0 3
14066: ARRAY
14067: PUSH
14068: LD_EXP 31
14072: PUSH
14073: LD_VAR 0 2
14077: ARRAY
14078: PUSH
14079: LD_EXP 31
14083: PUSH
14084: LD_VAR 0 3
14088: ARRAY
14089: NONEQUAL
14090: PUSH
14091: LD_EXP 36
14095: NOT
14096: PUSH
14097: LD_VAR 0 2
14101: PUSH
14102: LD_VAR 0 3
14106: NONEQUAL
14107: AND
14108: OR
14109: AND
14110: IFFALSE 14138
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14112: LD_VAR 0 3
14116: PPUSH
14117: LD_EXP 55
14121: PUSH
14122: LD_EXP 34
14126: PUSH
14127: LD_VAR 0 2
14131: ARRAY
14132: ARRAY
14133: PPUSH
14134: CALL_OW 333
14138: GO 14054
14140: POP
14141: POP
// end ;
14142: GO 14002
14144: POP
14145: POP
// end ;
14146: LD_VAR 0 1
14150: RET
// export function EndBuildUp ; var i , j ; begin
14151: LD_INT 0
14153: PPUSH
14154: PPUSH
14155: PPUSH
// BuildUpTimeActive := false ;
14156: LD_ADDR_EXP 56
14160: PUSH
14161: LD_INT 0
14163: ST_TO_ADDR
// for i := 1 to 8 do
14164: LD_ADDR_VAR 0 2
14168: PUSH
14169: DOUBLE
14170: LD_INT 1
14172: DEC
14173: ST_TO_ADDR
14174: LD_INT 8
14176: PUSH
14177: FOR_TO
14178: IFFALSE 14319
// if Side_Positions [ i ] then
14180: LD_EXP 34
14184: PUSH
14185: LD_VAR 0 2
14189: ARRAY
14190: IFFALSE 14317
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14192: LD_EXP 55
14196: PUSH
14197: LD_EXP 34
14201: PUSH
14202: LD_VAR 0 2
14206: ARRAY
14207: ARRAY
14208: PPUSH
14209: LD_INT 0
14211: PPUSH
14212: CALL_OW 424
// for j := 1 to 8 do
14216: LD_ADDR_VAR 0 3
14220: PUSH
14221: DOUBLE
14222: LD_INT 1
14224: DEC
14225: ST_TO_ADDR
14226: LD_INT 8
14228: PUSH
14229: FOR_TO
14230: IFFALSE 14315
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14232: LD_EXP 34
14236: PUSH
14237: LD_VAR 0 3
14241: ARRAY
14242: PUSH
14243: LD_EXP 31
14247: PUSH
14248: LD_VAR 0 2
14252: ARRAY
14253: PUSH
14254: LD_EXP 31
14258: PUSH
14259: LD_VAR 0 3
14263: ARRAY
14264: NONEQUAL
14265: PUSH
14266: LD_EXP 36
14270: NOT
14271: PUSH
14272: LD_VAR 0 2
14276: PUSH
14277: LD_VAR 0 3
14281: NONEQUAL
14282: AND
14283: OR
14284: AND
14285: IFFALSE 14313
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14287: LD_VAR 0 3
14291: PPUSH
14292: LD_EXP 55
14296: PUSH
14297: LD_EXP 34
14301: PUSH
14302: LD_VAR 0 2
14306: ARRAY
14307: ARRAY
14308: PPUSH
14309: CALL_OW 334
14313: GO 14229
14315: POP
14316: POP
// end ;
14317: GO 14177
14319: POP
14320: POP
// end ;
14321: LD_VAR 0 1
14325: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14326: LD_EXP 56
14330: IFFALSE 14505
14332: GO 14334
14334: DISABLE
14335: LD_INT 0
14337: PPUSH
14338: PPUSH
// begin for i := 1 to 8 do
14339: LD_ADDR_VAR 0 1
14343: PUSH
14344: DOUBLE
14345: LD_INT 1
14347: DEC
14348: ST_TO_ADDR
14349: LD_INT 8
14351: PUSH
14352: FOR_TO
14353: IFFALSE 14502
// if Side_Positions [ i ] then
14355: LD_EXP 34
14359: PUSH
14360: LD_VAR 0 1
14364: ARRAY
14365: IFFALSE 14500
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14367: LD_ADDR_VAR 0 2
14371: PUSH
14372: LD_EXP 55
14376: PUSH
14377: LD_EXP 34
14381: PUSH
14382: LD_VAR 0 1
14386: ARRAY
14387: ARRAY
14388: PPUSH
14389: LD_INT 2
14391: PUSH
14392: LD_INT 21
14394: PUSH
14395: LD_INT 1
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 21
14404: PUSH
14405: LD_INT 2
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 22
14419: PUSH
14420: LD_OWVAR 2
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PPUSH
14433: CALL_OW 70
14437: PUSH
14438: FOR_IN
14439: IFFALSE 14498
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14441: LD_EXP 31
14445: PUSH
14446: LD_VAR 0 1
14450: ARRAY
14451: PUSH
14452: LD_EXP 31
14456: PUSH
14457: LD_OWVAR 2
14461: ARRAY
14462: NONEQUAL
14463: PUSH
14464: LD_EXP 36
14468: NOT
14469: PUSH
14470: LD_VAR 0 1
14474: PUSH
14475: LD_OWVAR 2
14479: NONEQUAL
14480: AND
14481: OR
14482: IFFALSE 14496
// ComMoveToArea ( un , BuildUpEscape ) ;
14484: LD_VAR 0 2
14488: PPUSH
14489: LD_INT 19
14491: PPUSH
14492: CALL_OW 113
14496: GO 14438
14498: POP
14499: POP
14500: GO 14352
14502: POP
14503: POP
// enable ;
14504: ENABLE
// end ;
14505: PPOPN 2
14507: END
// every 0 0$1 trigger def_builduptime do
14508: LD_EXP 14
14512: IFFALSE 14538
14514: GO 14516
14516: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14517: LD_INT 8400
14519: PUSH
14520: LD_EXP 14
14524: PUSH
14525: LD_INT 2100
14527: MUL
14528: PLUS
14529: PPUSH
14530: CALL_OW 67
// EndBuildUp ;
14534: CALL 14151 0 0
// end ;
14538: END
