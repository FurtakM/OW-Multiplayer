// export def_public_score , def_amount_score ; export is_depot , number_of_breastworks , number_of_people , amount_of_apemen , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , amount_score , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , king_territory , final_count , Player_Side , player_team ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if MultiPlayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type = mp_game_type ;
  79: LD_ADDR_EXP 41
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side = mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  99: LD_ADDR_EXP 21
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 109: LD_ADDR_EXP 18
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 119: LD_ADDR_EXP 22
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 20
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams = mp_teams ;
 139: LD_ADDR_EXP 19
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 352
// begin Game_Type = 3 ;
 151: LD_ADDR_EXP 41
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side = 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 21
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 18
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 22
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 20
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 323: LD_ADDR_EXP 19
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: ST_TO_ADDR
// end ; for i := 1 to 8 do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_INT 8
 364: PUSH
 365: FOR_TO
 366: IFFALSE 453
// if Multiplayer_GetPlayerIsSpec ( i ) then
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 530
 377: IFFALSE 451
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 379: LD_ADDR_EXP 21
 383: PUSH
 384: LD_EXP 21
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_INT 0
 396: PPUSH
 397: CALL_OW 1
 401: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 402: LD_ADDR_EXP 19
 406: PUSH
 407: LD_EXP 19
 411: PPUSH
 412: LD_EXP 18
 416: PUSH
 417: LD_VAR 0 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 19
 427: PUSH
 428: LD_EXP 18
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: ARRAY
 439: PUSH
 440: LD_VAR 0 2
 444: DIFF
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// end ;
 451: GO 365
 453: POP
 454: POP
// if MultiPlayer then
 455: LD_OWVAR 4
 459: IFFALSE 666
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 461: LD_ADDR_EXP 43
 465: PUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 474: LD_ADDR_EXP 44
 478: PUSH
 479: LD_INT 1
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 487: LD_ADDR_EXP 45
 491: PUSH
 492: LD_INT 2
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 500: LD_ADDR_EXP 46
 504: PUSH
 505: LD_INT 3
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 513: LD_ADDR_EXP 47
 517: PUSH
 518: LD_INT 4
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 526: LD_ADDR_EXP 48
 530: PUSH
 531: LD_INT 5
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 539: LD_ADDR_EXP 50
 543: PUSH
 544: LD_INT 10
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 552: LD_ADDR_EXP 51
 556: PUSH
 557: LD_INT 11
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 565: LD_ADDR_EXP 52
 569: PUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 578: LD_ADDR_EXP 54
 582: PUSH
 583: LD_INT 13
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 591: LD_ADDR_EXP 53
 595: PUSH
 596: LD_INT 14
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 604: LD_ADDR_EXP 55
 608: PUSH
 609: LD_INT 15
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_public_score = GetMultiplayerSetting ( 16 ) ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 16
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_amount_score = GetMultiplayerSetting ( 17 ) ;
 630: LD_ADDR_EXP 2
 634: PUSH
 635: LD_INT 17
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 643: LD_ADDR_VAR 0 3
 647: PUSH
 648: LD_INT 22
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// def_win_rules = 0 ;
 656: LD_ADDR_EXP 17
 660: PUSH
 661: LD_INT 0
 663: ST_TO_ADDR
// end else
 664: GO 798
// begin randomize ;
 666: CALL_OW 10
// def_base_level = 3 ;
 670: LD_ADDR_EXP 43
 674: PUSH
 675: LD_INT 3
 677: ST_TO_ADDR
// def_amount_of_people = 1 ;
 678: LD_ADDR_EXP 44
 682: PUSH
 683: LD_INT 1
 685: ST_TO_ADDR
// def_skill_level = 1 ;
 686: LD_ADDR_EXP 45
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// def_starting_resources = 2 ;
 694: LD_ADDR_EXP 46
 698: PUSH
 699: LD_INT 2
 701: ST_TO_ADDR
// def_shipments_density = 1 ;
 702: LD_ADDR_EXP 47
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
 710: LD_ADDR_EXP 48
 714: PUSH
 715: LD_INT 0
 717: ST_TO_ADDR
// def_shared_vision = 1 ;
 718: LD_ADDR_EXP 50
 722: PUSH
 723: LD_INT 1
 725: ST_TO_ADDR
// def_morale_flags = 1 ;
 726: LD_ADDR_EXP 51
 730: PUSH
 731: LD_INT 1
 733: ST_TO_ADDR
// def_siberite_detection = 1 ;
 734: LD_ADDR_EXP 52
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 742: LD_ADDR_EXP 54
 746: PUSH
 747: LD_INT 3
 749: ST_TO_ADDR
// def_people_respawning = 2 ;
 750: LD_ADDR_EXP 53
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 758: LD_ADDR_EXP 55
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_public_score = 1 ;
 766: LD_ADDR_EXP 1
 770: PUSH
 771: LD_INT 1
 773: ST_TO_ADDR
// def_amount_score = 0 ;
 774: LD_ADDR_EXP 2
 778: PUSH
 779: LD_INT 0
 781: ST_TO_ADDR
// tech_level = 4 ;
 782: LD_ADDR_VAR 0 3
 786: PUSH
 787: LD_INT 4
 789: ST_TO_ADDR
// def_win_rules = 0 ;
 790: LD_ADDR_EXP 17
 794: PUSH
 795: LD_INT 0
 797: ST_TO_ADDR
// end ; Player_Side = Your_Side ;
 798: LD_ADDR_EXP 31
 802: PUSH
 803: LD_OWVAR 2
 807: ST_TO_ADDR
// player_team = Side_Teams [ Player_Side ] ;
 808: LD_ADDR_EXP 32
 812: PUSH
 813: LD_EXP 18
 817: PUSH
 818: LD_EXP 31
 822: ARRAY
 823: ST_TO_ADDR
// InitGameRules ;
 824: CALL 7781 0 0
// if def_game_rules = 0 then
 828: LD_EXP 42
 832: PUSH
 833: LD_INT 0
 835: EQUAL
 836: IFFALSE 863
// begin if isSGUI then
 838: LD_OWVAR 83
 842: IFFALSE 850
// setMpTechs ( ) else
 844: CALL 15577 0 0
 848: GO 863
// begin SetMpTechLevel ( tech_level + 1 ) ;
 850: LD_VAR 0 3
 854: PUSH
 855: LD_INT 1
 857: PLUS
 858: PPUSH
 859: CALL 15724 0 1
// end ; end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 863: LD_ADDR_EXP 3
 867: PUSH
 868: LD_INT 0
 870: PUSH
 871: LD_INT 1
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: PUSH
 886: LD_EXP 43
 890: PUSH
 891: LD_INT 1
 893: PLUS
 894: ARRAY
 895: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 896: LD_ADDR_EXP 4
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: LD_INT 0
 906: PUSH
 907: LD_INT 2
 909: PUSH
 910: LD_INT 4
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_EXP 43
 923: PUSH
 924: LD_INT 1
 926: PLUS
 927: ARRAY
 928: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 929: LD_ADDR_EXP 5
 933: PUSH
 934: LD_INT 9
 936: PUSH
 937: LD_INT 12
 939: PUSH
 940: LD_INT 15
 942: PUSH
 943: LD_INT 24
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_EXP 44
 956: PUSH
 957: LD_INT 1
 959: PLUS
 960: ARRAY
 961: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 962: LD_ADDR_EXP 7
 966: PUSH
 967: LD_INT 2
 969: PUSH
 970: LD_INT 3
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: LD_INT 5
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_EXP 45
 989: PUSH
 990: LD_INT 1
 992: PLUS
 993: ARRAY
 994: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 995: LD_ADDR_EXP 9
 999: PUSH
1000: LD_INT 0
1002: PUSH
1003: LD_INT 0
1005: PUSH
1006: LD_INT 0
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 30
1016: PUSH
1017: LD_INT 0
1019: PUSH
1020: LD_INT 0
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 50
1030: PUSH
1031: LD_INT 20
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 80
1044: PUSH
1045: LD_INT 40
1047: PUSH
1048: LD_INT 20
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_EXP 46
1066: PUSH
1067: LD_INT 1
1069: PLUS
1070: ARRAY
1071: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1072: LD_ADDR_EXP 8
1076: PUSH
1077: LD_INT 10
1079: PUSH
1080: EMPTY
1081: LIST
1082: PUSH
1083: LD_INT 7
1085: PUSH
1086: LD_INT 14
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 6
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 18
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 5
1109: PUSH
1110: LD_INT 10
1112: PUSH
1113: LD_INT 15
1115: PUSH
1116: LD_INT 20
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: PUSH
1131: LD_EXP 46
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: ARRAY
1140: ST_TO_ADDR
// shipments_density = [ 15 , 20 , 25 ] [ def_shipments_density + 1 ] ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_INT 15
1148: PUSH
1149: LD_INT 20
1151: PUSH
1152: LD_INT 25
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 47
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1170: LD_ADDR_EXP 6
1174: PUSH
1175: LD_INT 0
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: LD_INT 2
1183: PUSH
1184: LD_INT 3
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 54
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1203: LD_ADDR_EXP 12
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 165
1213: PUSH
1214: LD_INT 140
1216: PUSH
1217: LD_INT 115
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_EXP 54
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1236: LD_ADDR_EXP 13
1240: PUSH
1241: LD_INT 0
1243: PUSH
1244: LD_INT 8400
1246: PUSH
1247: LD_INT 1750
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_EXP 53
1259: PUSH
1260: LD_INT 1
1262: PLUS
1263: ARRAY
1264: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1265: LD_ADDR_EXP 14
1269: PUSH
1270: LD_INT 0
1272: PUSH
1273: LD_INT 21000
1275: PUSH
1276: LD_INT 4200
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: PUSH
1284: LD_EXP 53
1288: PUSH
1289: LD_INT 1
1291: PLUS
1292: ARRAY
1293: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1294: LD_ADDR_EXP 11
1298: PUSH
1299: LD_INT 1
1301: NEG
1302: PUSH
1303: LD_INT 350
1305: PUSH
1306: LD_INT 700
1308: PUSH
1309: LD_INT 1400
1311: PUSH
1312: LD_INT 0
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_EXP 51
1326: PUSH
1327: LD_INT 1
1329: PLUS
1330: ARRAY
1331: ST_TO_ADDR
// battle_flags_id = [ ] ;
1332: LD_ADDR_EXP 28
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// amount_score = [ 200 , 300 , 500 , 700 , 1000 , 1500 ] [ def_amount_score + 1 ] ;
1339: LD_ADDR_EXP 15
1343: PUSH
1344: LD_INT 200
1346: PUSH
1347: LD_INT 300
1349: PUSH
1350: LD_INT 500
1352: PUSH
1353: LD_INT 700
1355: PUSH
1356: LD_INT 1000
1358: PUSH
1359: LD_INT 1500
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1380: LD_ADDR_EXP 16
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 63000
1393: PUSH
1394: LD_INT 126000
1396: PUSH
1397: LD_INT 189000
1399: PUSH
1400: LD_INT 252000
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 55
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// if not def_builduptime then
1421: LD_EXP 56
1425: NOT
1426: IFFALSE 1431
// disable ( 600 ) ;
1428: LD_INT 600
1430: DISABLE_MARKED
// king_territory = KopecStred ;
1431: LD_ADDR_EXP 29
1435: PUSH
1436: LD_INT 2
1438: ST_TO_ADDR
// final_count = amount_score ;
1439: LD_ADDR_EXP 30
1443: PUSH
1444: LD_EXP 15
1448: ST_TO_ADDR
// end ;
1449: LD_VAR 0 1
1453: RET
// function init_map ; var i ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
// extra_oil_deposits_locations := [ [ 53 , 26 ] , [ 51 , 53 ] , [ 129 , 20 ] , [ 155 , 53 ] , [ 187 , 139 ] , [ 183 , 107 ] , [ 106 , 135 ] , [ 80 , 106 ] ] ;
1458: LD_ADDR_EXP 27
1462: PUSH
1463: LD_INT 53
1465: PUSH
1466: LD_INT 26
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 51
1475: PUSH
1476: LD_INT 53
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: PUSH
1483: LD_INT 129
1485: PUSH
1486: LD_INT 20
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 155
1495: PUSH
1496: LD_INT 53
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: PUSH
1503: LD_INT 187
1505: PUSH
1506: LD_INT 139
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PUSH
1513: LD_INT 183
1515: PUSH
1516: LD_INT 107
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 106
1525: PUSH
1526: LD_INT 135
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 80
1535: PUSH
1536: LD_INT 106
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// depot_def := [ [ 29 , 22 , 3 ] , [ 154 , 21 , 3 ] , [ 85 , 138 , 0 ] , [ 212 , 141 , 5 ] ] ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_INT 29
1560: PUSH
1561: LD_INT 22
1563: PUSH
1564: LD_INT 3
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 154
1574: PUSH
1575: LD_INT 21
1577: PUSH
1578: LD_INT 3
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 85
1588: PUSH
1589: LD_INT 138
1591: PUSH
1592: LD_INT 0
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 212
1602: PUSH
1603: LD_INT 141
1605: PUSH
1606: LD_INT 5
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: ST_TO_ADDR
// start_def := [ [ 33 , 25 ] , [ 151 , 24 ] , [ 89 , 135 ] , [ 205 , 137 ] ] ;
1620: LD_ADDR_EXP 26
1624: PUSH
1625: LD_INT 33
1627: PUSH
1628: LD_INT 25
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 151
1637: PUSH
1638: LD_INT 24
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 89
1647: PUSH
1648: LD_INT 135
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 205
1657: PUSH
1658: LD_INT 137
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// breastworks_def := [ [ [ 46 , 13 , 4 ] , [ 43 , 39 , 4 ] , [ 47 , 25 , 5 ] , [ 45 , 44 , 5 ] ] , [ [ 129 , 12 , 0 ] , [ 153 , 34 , 1 ] , [ 139 , 24 , 0 ] , [ 158 , 41 , 0 ] ] , [ [ 84 , 121 , 4 ] , [ 109 , 143 , 4 ] , [ 87 , 126 , 4 ] , [ 111 , 148 , 4 ] ] , [ [ 194 , 146 , 2 ] , [ 195 , 121 , 1 ] , [ 193 , 135 , 2 ] , [ 192 , 116 , 2 ] ] , ] ;
1671: LD_ADDR_EXP 25
1675: PUSH
1676: LD_INT 46
1678: PUSH
1679: LD_INT 13
1681: PUSH
1682: LD_INT 4
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 43
1692: PUSH
1693: LD_INT 39
1695: PUSH
1696: LD_INT 4
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 47
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 45
1720: PUSH
1721: LD_INT 44
1723: PUSH
1724: LD_INT 5
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 129
1740: PUSH
1741: LD_INT 12
1743: PUSH
1744: LD_INT 0
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 153
1754: PUSH
1755: LD_INT 34
1757: PUSH
1758: LD_INT 1
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 139
1768: PUSH
1769: LD_INT 24
1771: PUSH
1772: LD_INT 0
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 158
1782: PUSH
1783: LD_INT 41
1785: PUSH
1786: LD_INT 0
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 84
1802: PUSH
1803: LD_INT 121
1805: PUSH
1806: LD_INT 4
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 109
1816: PUSH
1817: LD_INT 143
1819: PUSH
1820: LD_INT 4
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 87
1830: PUSH
1831: LD_INT 126
1833: PUSH
1834: LD_INT 4
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 111
1844: PUSH
1845: LD_INT 148
1847: PUSH
1848: LD_INT 4
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 194
1864: PUSH
1865: LD_INT 146
1867: PUSH
1868: LD_INT 2
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 195
1878: PUSH
1879: LD_INT 121
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 193
1892: PUSH
1893: LD_INT 135
1895: PUSH
1896: LD_INT 2
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 192
1906: PUSH
1907: LD_INT 116
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// if def_extra_oil_deposits then
1930: LD_EXP 48
1934: IFFALSE 1978
// for i in extra_oil_deposits_locations do
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_EXP 27
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1976
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1949: LD_VAR 0 2
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 2
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 2
1969: PPUSH
1970: CALL_OW 62
1974: GO 1946
1976: POP
1977: POP
// end ;
1978: LD_VAR 0 1
1982: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1983: LD_INT 0
1985: PPUSH
1986: PPUSH
1987: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1988: LD_ADDR_EXP 23
1992: PUSH
1993: LD_EXP 18
1997: PUSH
1998: LD_INT 0
2000: PUSH
2001: EMPTY
2002: LIST
2003: DIFF
2004: PUSH
2005: LD_INT 1
2007: GREATER
2008: ST_TO_ADDR
// if not Team_Game then
2009: LD_EXP 23
2013: NOT
2014: IFFALSE 2112
// begin for i = 1 to 8 do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: DOUBLE
2022: LD_INT 1
2024: DEC
2025: ST_TO_ADDR
2026: LD_INT 8
2028: PUSH
2029: FOR_TO
2030: IFFALSE 2108
// for j = 1 to 8 do
2032: LD_ADDR_VAR 0 3
2036: PUSH
2037: DOUBLE
2038: LD_INT 1
2040: DEC
2041: ST_TO_ADDR
2042: LD_INT 8
2044: PUSH
2045: FOR_TO
2046: IFFALSE 2104
// if i <> j then
2048: LD_VAR 0 2
2052: PUSH
2053: LD_VAR 0 3
2057: NONEQUAL
2058: IFFALSE 2082
// SetAttitude ( i , j , att_neutral , true ) else
2060: LD_VAR 0 2
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: LD_INT 0
2072: PPUSH
2073: LD_INT 1
2075: PPUSH
2076: CALL_OW 80
2080: GO 2102
// SetAttitude ( i , j , att_friend , true ) ;
2082: LD_VAR 0 2
2086: PPUSH
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: LD_INT 1
2097: PPUSH
2098: CALL_OW 80
2102: GO 2045
2104: POP
2105: POP
2106: GO 2029
2108: POP
2109: POP
// end else
2110: GO 2287
// begin if def_shared_vision then
2112: LD_EXP 50
2116: IFFALSE 2181
// begin for i in Teams do
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_EXP 19
2127: PUSH
2128: FOR_IN
2129: IFFALSE 2179
// for j = 2 to i do
2131: LD_ADDR_VAR 0 3
2135: PUSH
2136: DOUBLE
2137: LD_INT 2
2139: DEC
2140: ST_TO_ADDR
2141: LD_VAR 0 2
2145: PUSH
2146: FOR_TO
2147: IFFALSE 2175
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2149: LD_VAR 0 2
2153: PUSH
2154: LD_VAR 0 3
2158: ARRAY
2159: PPUSH
2160: LD_VAR 0 2
2164: PUSH
2165: LD_INT 1
2167: ARRAY
2168: PPUSH
2169: CALL_OW 343
2173: GO 2146
2175: POP
2176: POP
2177: GO 2128
2179: POP
2180: POP
// end ; for i = 1 to 8 do
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: DOUBLE
2187: LD_INT 1
2189: DEC
2190: ST_TO_ADDR
2191: LD_INT 8
2193: PUSH
2194: FOR_TO
2195: IFFALSE 2285
// for j = 1 to 8 do
2197: LD_ADDR_VAR 0 3
2201: PUSH
2202: DOUBLE
2203: LD_INT 1
2205: DEC
2206: ST_TO_ADDR
2207: LD_INT 8
2209: PUSH
2210: FOR_TO
2211: IFFALSE 2281
// if Side_Teams [ i ] = Side_Teams [ j ] then
2213: LD_EXP 18
2217: PUSH
2218: LD_VAR 0 2
2222: ARRAY
2223: PUSH
2224: LD_EXP 18
2228: PUSH
2229: LD_VAR 0 3
2233: ARRAY
2234: EQUAL
2235: IFFALSE 2259
// SetAttitude ( i , j , att_friend , true ) else
2237: LD_VAR 0 2
2241: PPUSH
2242: LD_VAR 0 3
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: CALL_OW 80
2257: GO 2279
// SetAttitude ( i , j , att_enemy , true ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: LD_INT 1
2274: PPUSH
2275: CALL_OW 80
2279: GO 2210
2281: POP
2282: POP
2283: GO 2194
2285: POP
2286: POP
// end ; end ;
2287: LD_VAR 0 1
2291: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2292: LD_INT 0
2294: PPUSH
2295: PPUSH
2296: PPUSH
2297: PPUSH
// result := [ ] ;
2298: LD_ADDR_VAR 0 6
2302: PUSH
2303: EMPTY
2304: ST_TO_ADDR
// for i := 1 to count do
2305: LD_ADDR_VAR 0 7
2309: PUSH
2310: DOUBLE
2311: LD_INT 1
2313: DEC
2314: ST_TO_ADDR
2315: LD_VAR 0 1
2319: PUSH
2320: FOR_TO
2321: IFFALSE 2717
// begin uc_direction := Rand ( 0 , 5 ) ;
2323: LD_ADDR_OWVAR 24
2327: PUSH
2328: LD_INT 0
2330: PPUSH
2331: LD_INT 5
2333: PPUSH
2334: CALL_OW 12
2338: ST_TO_ADDR
// if commander then
2339: LD_LOC 1
2343: IFFALSE 2452
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2345: LD_ADDR_OWVAR 26
2349: PUSH
2350: LD_OWVAR 19
2354: PUSH
2355: LD_OWVAR 20
2359: ARRAY
2360: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2361: LD_INT 1
2363: PPUSH
2364: LD_INT 2
2366: PPUSH
2367: CALL_OW 12
2371: PPUSH
2372: LD_VAR 0 2
2376: PPUSH
2377: LD_EXP 7
2381: PUSH
2382: LD_INT 2
2384: PLUS
2385: PPUSH
2386: CALL_OW 380
// hc_importance := 105 ;
2390: LD_ADDR_OWVAR 32
2394: PUSH
2395: LD_INT 105
2397: ST_TO_ADDR
// commander := false ;
2398: LD_ADDR_LOC 1
2402: PUSH
2403: LD_INT 0
2405: ST_TO_ADDR
// if Multiplayer then
2406: LD_OWVAR 4
2410: IFFALSE 2450
// begin hc_gallery := MULTIAVATARS ;
2412: LD_ADDR_OWVAR 33
2416: PUSH
2417: LD_STRING MULTIAVATARS
2419: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2420: LD_ADDR_OWVAR 34
2424: PUSH
2425: LD_OWVAR 20
2429: PPUSH
2430: CALL_OW 525
2434: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2435: LD_ADDR_OWVAR 27
2439: PUSH
2440: LD_OWVAR 20
2444: PPUSH
2445: CALL_OW 526
2449: ST_TO_ADDR
// end ; end else
2450: GO 2515
// begin hc_name :=  ;
2452: LD_ADDR_OWVAR 26
2456: PUSH
2457: LD_STRING 
2459: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2460: LD_INT 1
2462: PPUSH
2463: LD_INT 2
2465: PPUSH
2466: CALL_OW 12
2470: PPUSH
2471: LD_VAR 0 2
2475: PPUSH
2476: LD_EXP 7
2480: PPUSH
2481: CALL_OW 380
// hc_importance := 0 ;
2485: LD_ADDR_OWVAR 32
2489: PUSH
2490: LD_INT 0
2492: ST_TO_ADDR
// if Multiplayer then
2493: LD_OWVAR 4
2497: IFFALSE 2515
// begin hc_gallery :=  ;
2499: LD_ADDR_OWVAR 33
2503: PUSH
2504: LD_STRING 
2506: ST_TO_ADDR
// hc_face_number := 0 ;
2507: LD_ADDR_OWVAR 34
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2515: LD_ADDR_VAR 0 9
2519: PUSH
2520: CALL_OW 44
2524: ST_TO_ADDR
// if global_defined then
2525: LD_LOC 3
2529: IFFALSE 2669
// begin if ( cl = class_soldier ) then
2531: LD_VAR 0 2
2535: PUSH
2536: LD_INT 1
2538: EQUAL
2539: IFFALSE 2559
// j := i + soldiers_created else
2541: LD_ADDR_VAR 0 8
2545: PUSH
2546: LD_VAR 0 7
2550: PUSH
2551: LD_LOC 4
2555: PLUS
2556: ST_TO_ADDR
2557: GO 2569
// j := i ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_VAR 0 7
2568: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2569: LD_LOC 2
2573: PUSH
2574: LD_VAR 0 2
2578: ARRAY
2579: PUSH
2580: LD_VAR 0 8
2584: ARRAY
2585: PPUSH
2586: LD_VAR 0 9
2590: PPUSH
2591: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: LD_INT 2
2602: PPUSH
2603: LD_LOC 2
2607: PUSH
2608: LD_VAR 0 2
2612: ARRAY
2613: PUSH
2614: LD_VAR 0 8
2618: ARRAY
2619: PPUSH
2620: LD_INT 2
2622: PPUSH
2623: CALL_OW 260
2627: PPUSH
2628: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2632: LD_VAR 0 9
2636: PPUSH
2637: LD_INT 1
2639: PPUSH
2640: LD_LOC 2
2644: PUSH
2645: LD_VAR 0 2
2649: ARRAY
2650: PUSH
2651: LD_VAR 0 8
2655: ARRAY
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: CALL_OW 260
2664: PPUSH
2665: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2669: LD_VAR 0 9
2673: PPUSH
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_VAR 0 4
2683: PPUSH
2684: LD_VAR 0 5
2688: PPUSH
2689: LD_INT 0
2691: PPUSH
2692: CALL_OW 50
// result := result ^ [ un ] ;
2696: LD_ADDR_VAR 0 6
2700: PUSH
2701: LD_VAR 0 6
2705: PUSH
2706: LD_VAR 0 9
2710: PUSH
2711: EMPTY
2712: LIST
2713: ADD
2714: ST_TO_ADDR
// end ;
2715: GO 2320
2717: POP
2718: POP
// if not global_defined then
2719: LD_LOC 3
2723: NOT
2724: IFFALSE 2802
// if ( global_units >= cl ) then
2726: LD_LOC 2
2730: PUSH
2731: LD_VAR 0 2
2735: GREATEREQUAL
2736: IFFALSE 2777
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2738: LD_ADDR_LOC 2
2742: PUSH
2743: LD_LOC 2
2747: PPUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: LD_LOC 2
2757: PUSH
2758: LD_VAR 0 2
2762: ARRAY
2763: PUSH
2764: LD_VAR 0 6
2768: ADD
2769: PPUSH
2770: CALL_OW 1
2774: ST_TO_ADDR
2775: GO 2802
// global_units := Replace ( global_units , cl , result ) ;
2777: LD_ADDR_LOC 2
2781: PUSH
2782: LD_LOC 2
2786: PPUSH
2787: LD_VAR 0 2
2791: PPUSH
2792: LD_VAR 0 6
2796: PPUSH
2797: CALL_OW 1
2801: ST_TO_ADDR
// end ;
2802: LD_VAR 0 6
2806: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , sol , br , dep ; begin
2807: LD_INT 0
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
2817: PPUSH
2818: PPUSH
// if side in [ 0 , 9 ] then
2819: LD_VAR 0 1
2823: PUSH
2824: LD_INT 0
2826: PUSH
2827: LD_INT 9
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: IN
2834: IFFALSE 2838
// exit ;
2836: GO 3945
// pos := Side_Positions [ side ] ;
2838: LD_ADDR_VAR 0 3
2842: PUSH
2843: LD_EXP 21
2847: PUSH
2848: LD_VAR 0 1
2852: ARRAY
2853: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2854: LD_ADDR_OWVAR 21
2858: PUSH
2859: LD_EXP 22
2863: PUSH
2864: LD_VAR 0 1
2868: ARRAY
2869: ST_TO_ADDR
// uc_side := side ;
2870: LD_ADDR_OWVAR 20
2874: PUSH
2875: LD_VAR 0 1
2879: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: LD_EXP 24
2889: PUSH
2890: LD_VAR 0 3
2894: ARRAY
2895: PUSH
2896: LD_INT 1
2898: ARRAY
2899: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2900: LD_ADDR_VAR 0 5
2904: PUSH
2905: LD_EXP 24
2909: PUSH
2910: LD_VAR 0 3
2914: ARRAY
2915: PUSH
2916: LD_INT 2
2918: ARRAY
2919: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2920: LD_ADDR_VAR 0 6
2924: PUSH
2925: LD_EXP 24
2929: PUSH
2930: LD_VAR 0 3
2934: ARRAY
2935: PUSH
2936: LD_INT 3
2938: ARRAY
2939: ST_TO_ADDR
// if is_depot then
2940: LD_EXP 3
2944: IFFALSE 3077
// begin bc_type = b_depot ;
2946: LD_ADDR_OWVAR 42
2950: PUSH
2951: LD_INT 0
2953: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2954: LD_ADDR_VAR 0 11
2958: PUSH
2959: LD_VAR 0 4
2963: PPUSH
2964: LD_VAR 0 5
2968: PPUSH
2969: LD_VAR 0 6
2973: PPUSH
2974: CALL_OW 47
2978: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2979: LD_VAR 0 11
2983: PPUSH
2984: LD_STRING @
2986: PUSH
2987: LD_VAR 0 1
2991: STR
2992: PPUSH
2993: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2997: LD_VAR 0 11
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 1
3009: PPUSH
3010: LD_EXP 9
3014: PUSH
3015: LD_INT 1
3017: ARRAY
3018: PPUSH
3019: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3023: LD_VAR 0 11
3027: PPUSH
3028: CALL_OW 274
3032: PPUSH
3033: LD_INT 2
3035: PPUSH
3036: LD_EXP 9
3040: PUSH
3041: LD_INT 2
3043: ARRAY
3044: PPUSH
3045: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3049: LD_VAR 0 11
3053: PPUSH
3054: CALL_OW 274
3058: PPUSH
3059: LD_INT 3
3061: PPUSH
3062: LD_EXP 9
3066: PUSH
3067: LD_INT 3
3069: ARRAY
3070: PPUSH
3071: CALL_OW 277
// end else
3075: GO 3221
// begin for i := 1 to 3 do
3077: LD_ADDR_VAR 0 7
3081: PUSH
3082: DOUBLE
3083: LD_INT 1
3085: DEC
3086: ST_TO_ADDR
3087: LD_INT 3
3089: PUSH
3090: FOR_TO
3091: IFFALSE 3219
// begin r := starting_resources [ i ] ;
3093: LD_ADDR_VAR 0 8
3097: PUSH
3098: LD_EXP 9
3102: PUSH
3103: LD_VAR 0 7
3107: ARRAY
3108: ST_TO_ADDR
// while r >= 10 do
3109: LD_VAR 0 8
3113: PUSH
3114: LD_INT 10
3116: GREATEREQUAL
3117: IFFALSE 3217
// if r > 50 then
3119: LD_VAR 0 8
3123: PUSH
3124: LD_INT 50
3126: GREATER
3127: IFFALSE 3173
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3129: LD_VAR 0 7
3133: PPUSH
3134: LD_INT 5
3136: PPUSH
3137: LD_VAR 0 4
3141: PPUSH
3142: LD_VAR 0 5
3146: PPUSH
3147: LD_INT 4
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 60
// r := r - 50 ;
3157: LD_ADDR_VAR 0 8
3161: PUSH
3162: LD_VAR 0 8
3166: PUSH
3167: LD_INT 50
3169: MINUS
3170: ST_TO_ADDR
// end else
3171: GO 3215
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3173: LD_VAR 0 7
3177: PPUSH
3178: LD_VAR 0 8
3182: PUSH
3183: LD_INT 10
3185: DIV
3186: PPUSH
3187: LD_VAR 0 4
3191: PPUSH
3192: LD_VAR 0 5
3196: PPUSH
3197: LD_INT 4
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: CALL_OW 60
// r := 0 ;
3207: LD_ADDR_VAR 0 8
3211: PUSH
3212: LD_INT 0
3214: ST_TO_ADDR
// end ;
3215: GO 3109
// end ;
3217: GO 3090
3219: POP
3220: POP
// end ; for r in starting_crates do
3221: LD_ADDR_VAR 0 8
3225: PUSH
3226: LD_EXP 8
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3264
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 5
3239: PPUSH
3240: LD_VAR 0 4
3244: PPUSH
3245: LD_VAR 0 5
3249: PPUSH
3250: LD_VAR 0 8
3254: PPUSH
3255: LD_INT 0
3257: PPUSH
3258: CALL_OW 60
3262: GO 3231
3264: POP
3265: POP
// if def_morale_flags then
3266: LD_EXP 51
3270: IFFALSE 3409
// begin x := start_def [ pos ] [ 1 ] ;
3272: LD_ADDR_VAR 0 4
3276: PUSH
3277: LD_EXP 26
3281: PUSH
3282: LD_VAR 0 3
3286: ARRAY
3287: PUSH
3288: LD_INT 1
3290: ARRAY
3291: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3292: LD_ADDR_VAR 0 5
3296: PUSH
3297: LD_EXP 26
3301: PUSH
3302: LD_VAR 0 3
3306: ARRAY
3307: PUSH
3308: LD_INT 2
3310: ARRAY
3311: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3312: LD_VAR 0 4
3316: PPUSH
3317: LD_VAR 0 5
3321: PPUSH
3322: LD_INT 12
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3332: LD_ADDR_EXP 28
3336: PUSH
3337: LD_EXP 28
3341: PUSH
3342: LD_VAR 0 1
3346: PPUSH
3347: LD_VAR 0 4
3351: PPUSH
3352: LD_VAR 0 5
3356: PPUSH
3357: LD_INT 1
3359: PUSH
3360: LD_INT 100
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 2
3369: PUSH
3370: LD_INT 50
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 3
3379: PUSH
3380: LD_INT 20
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: LD_INT 20
3389: PUSH
3390: LD_INT 100
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 418
3407: ADD
3408: ST_TO_ADDR
// end ; commander := true ;
3409: LD_ADDR_LOC 1
3413: PUSH
3414: LD_INT 1
3416: ST_TO_ADDR
// soldiers_created := 0 ;
3417: LD_ADDR_LOC 4
3421: PUSH
3422: LD_INT 0
3424: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3425: LD_ADDR_VAR 0 7
3429: PUSH
3430: DOUBLE
3431: LD_INT 1
3433: DEC
3434: ST_TO_ADDR
3435: LD_EXP 4
3439: PUSH
3440: FOR_TO
3441: IFFALSE 3663
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3443: LD_ADDR_VAR 0 4
3447: PUSH
3448: LD_EXP 25
3452: PUSH
3453: LD_VAR 0 3
3457: ARRAY
3458: PUSH
3459: LD_VAR 0 7
3463: ARRAY
3464: PUSH
3465: LD_INT 1
3467: ARRAY
3468: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3469: LD_ADDR_VAR 0 5
3473: PUSH
3474: LD_EXP 25
3478: PUSH
3479: LD_VAR 0 3
3483: ARRAY
3484: PUSH
3485: LD_VAR 0 7
3489: ARRAY
3490: PUSH
3491: LD_INT 2
3493: ARRAY
3494: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3495: LD_ADDR_VAR 0 6
3499: PUSH
3500: LD_EXP 25
3504: PUSH
3505: LD_VAR 0 3
3509: ARRAY
3510: PUSH
3511: LD_VAR 0 7
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// bc_type := b_breastwork ;
3521: LD_ADDR_OWVAR 42
3525: PUSH
3526: LD_INT 31
3528: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3529: LD_ADDR_VAR 0 10
3533: PUSH
3534: LD_VAR 0 4
3538: PPUSH
3539: LD_VAR 0 5
3543: PPUSH
3544: LD_VAR 0 6
3548: PPUSH
3549: CALL_OW 47
3553: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3554: LD_ADDR_VAR 0 4
3558: PUSH
3559: LD_VAR 0 4
3563: PPUSH
3564: LD_VAR 0 6
3568: PPUSH
3569: LD_INT 2
3571: PPUSH
3572: CALL_OW 272
3576: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3577: LD_ADDR_VAR 0 5
3581: PUSH
3582: LD_VAR 0 5
3586: PPUSH
3587: LD_VAR 0 6
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 273
3599: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3600: LD_ADDR_VAR 0 9
3604: PUSH
3605: LD_INT 1
3607: PPUSH
3608: LD_INT 1
3610: PPUSH
3611: LD_VAR 0 4
3615: PPUSH
3616: LD_VAR 0 5
3620: PPUSH
3621: LD_INT 0
3623: PPUSH
3624: CALL 2292 0 5
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3633: LD_ADDR_LOC 4
3637: PUSH
3638: LD_LOC 4
3642: PUSH
3643: LD_INT 1
3645: PLUS
3646: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3647: LD_VAR 0 9
3651: PPUSH
3652: LD_VAR 0 10
3656: PPUSH
3657: CALL_OW 120
// end ;
3661: GO 3440
3663: POP
3664: POP
// x := start_def [ pos ] [ 1 ] ;
3665: LD_ADDR_VAR 0 4
3669: PUSH
3670: LD_EXP 26
3674: PUSH
3675: LD_VAR 0 3
3679: ARRAY
3680: PUSH
3681: LD_INT 1
3683: ARRAY
3684: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3685: LD_ADDR_VAR 0 5
3689: PUSH
3690: LD_EXP 26
3694: PUSH
3695: LD_VAR 0 3
3699: ARRAY
3700: PUSH
3701: LD_INT 2
3703: ARRAY
3704: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
3705: LD_LOC 8
3709: PUSH
3710: LD_EXP 4
3714: MINUS
3715: PPUSH
3716: LD_INT 1
3718: PPUSH
3719: LD_VAR 0 4
3723: PPUSH
3724: LD_VAR 0 5
3728: PPUSH
3729: LD_INT 5
3731: PPUSH
3732: CALL 2292 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
3736: LD_LOC 5
3740: PPUSH
3741: LD_INT 2
3743: PPUSH
3744: LD_VAR 0 4
3748: PPUSH
3749: LD_VAR 0 5
3753: PPUSH
3754: LD_INT 5
3756: PPUSH
3757: CALL 2292 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
3761: LD_LOC 7
3765: PPUSH
3766: LD_INT 3
3768: PPUSH
3769: LD_VAR 0 4
3773: PPUSH
3774: LD_VAR 0 5
3778: PPUSH
3779: LD_INT 5
3781: PPUSH
3782: CALL 2292 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
3786: LD_LOC 6
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: LD_VAR 0 4
3798: PPUSH
3799: LD_VAR 0 5
3803: PPUSH
3804: LD_INT 5
3806: PPUSH
3807: CALL 2292 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3811: LD_EXP 52
3815: PUSH
3816: LD_INT 20
3818: PPUSH
3819: LD_VAR 0 1
3823: PPUSH
3824: CALL_OW 321
3828: PUSH
3829: LD_INT 1
3831: EQUAL
3832: AND
3833: IFFALSE 3850
// SetTech ( tech_SibDet , side , state_researched ) ;
3835: LD_INT 20
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: LD_INT 2
3845: PPUSH
3846: CALL_OW 322
// if def_siberite_bomb = 1 then
3850: LD_EXP 55
3854: PUSH
3855: LD_INT 1
3857: EQUAL
3858: IFFALSE 3892
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3860: LD_INT 25
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3875: LD_INT 73
3877: PPUSH
3878: LD_VAR 0 1
3882: PPUSH
3883: LD_INT 1
3885: PPUSH
3886: CALL_OW 322
// end else
3890: GO 3922
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3892: LD_INT 25
3894: PPUSH
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3907: LD_INT 73
3909: PPUSH
3910: LD_VAR 0 1
3914: PPUSH
3915: LD_INT 0
3917: PPUSH
3918: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3922: LD_INT 24
3924: PPUSH
3925: LD_VAR 0 1
3929: PPUSH
3930: LD_INT 0
3932: PPUSH
3933: CALL_OW 322
// global_defined := true ;
3937: LD_ADDR_LOC 3
3941: PUSH
3942: LD_INT 1
3944: ST_TO_ADDR
// end ;
3945: LD_VAR 0 2
3949: RET
// every 0 0$1 do
3950: GO 3952
3952: DISABLE
// if ( def_siberite_bomb > 1 ) then
3953: LD_EXP 55
3957: PUSH
3958: LD_INT 1
3960: GREATER
3961: IFFALSE 3976
// begin wait ( siberite_bomb_Delay ) ;
3963: LD_EXP 16
3967: PPUSH
3968: CALL_OW 67
// EnableSibFiss ;
3972: CALL 3977 0 0
// end ;
3976: END
// function EnableSibFiss ; var i ; begin
3977: LD_INT 0
3979: PPUSH
3980: PPUSH
// for i := 1 to 8 do
3981: LD_ADDR_VAR 0 2
3985: PUSH
3986: DOUBLE
3987: LD_INT 1
3989: DEC
3990: ST_TO_ADDR
3991: LD_INT 8
3993: PUSH
3994: FOR_TO
3995: IFFALSE 4041
// if Side_Positions [ i ] then
3997: LD_EXP 21
4001: PUSH
4002: LD_VAR 0 2
4006: ARRAY
4007: IFFALSE 4039
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4009: LD_INT 25
4011: PPUSH
4012: LD_VAR 0 2
4016: PPUSH
4017: LD_INT 1
4019: PPUSH
4020: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4024: LD_INT 73
4026: PPUSH
4027: LD_VAR 0 2
4031: PPUSH
4032: LD_INT 1
4034: PPUSH
4035: CALL_OW 322
// end ;
4039: GO 3994
4041: POP
4042: POP
// end ;
4043: LD_VAR 0 1
4047: RET
// function prepare_sides ; var i ; begin
4048: LD_INT 0
4050: PPUSH
4051: PPUSH
// global_units := [ ] ;
4052: LD_ADDR_LOC 2
4056: PUSH
4057: EMPTY
4058: ST_TO_ADDR
// global_defined := false ;
4059: LD_ADDR_LOC 3
4063: PUSH
4064: LD_INT 0
4066: ST_TO_ADDR
// CountClassMembers ;
4067: CALL 4117 0 0
// for i := 1 to 8 do
4071: LD_ADDR_VAR 0 2
4075: PUSH
4076: DOUBLE
4077: LD_INT 1
4079: DEC
4080: ST_TO_ADDR
4081: LD_INT 8
4083: PUSH
4084: FOR_TO
4085: IFFALSE 4110
// if Side_Positions [ i ] then
4087: LD_EXP 21
4091: PUSH
4092: LD_VAR 0 2
4096: ARRAY
4097: IFFALSE 4108
// prepare_side ( i ) ;
4099: LD_VAR 0 2
4103: PPUSH
4104: CALL 2807 0 1
4108: GO 4084
4110: POP
4111: POP
// end ;
4112: LD_VAR 0 1
4116: RET
// function CountClassMembers ; var Mode ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// if No_Mechs then
4121: LD_EXP 57
4125: IFFALSE 4137
// Mode := 2 else
4127: LD_ADDR_VAR 0 2
4131: PUSH
4132: LD_INT 2
4134: ST_TO_ADDR
4135: GO 4145
// Mode := 1 ;
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_INT 1
4144: ST_TO_ADDR
// neng := number_of_people ;
4145: LD_ADDR_LOC 5
4149: PUSH
4150: LD_EXP 5
4154: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4155: LD_ADDR_LOC 8
4159: PUSH
4160: LD_LOC 5
4164: PUSH
4165: LD_INT 4
4167: PUSH
4168: LD_INT 3
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_VAR 0 2
4179: ARRAY
4180: DIV
4181: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4182: LD_LOC 8
4186: PUSH
4187: LD_EXP 4
4191: LESS
4192: IFFALSE 4204
// nsol := number_of_breastworks ;
4194: LD_ADDR_LOC 8
4198: PUSH
4199: LD_EXP 4
4203: ST_TO_ADDR
// neng := neng - nsol ;
4204: LD_ADDR_LOC 5
4208: PUSH
4209: LD_LOC 5
4213: PUSH
4214: LD_LOC 8
4218: MINUS
4219: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4220: LD_ADDR_LOC 6
4224: PUSH
4225: LD_LOC 5
4229: PUSH
4230: LD_INT 3
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_VAR 0 2
4244: ARRAY
4245: DIV
4246: ST_TO_ADDR
// if ( nsci < 1 ) then
4247: LD_LOC 6
4251: PUSH
4252: LD_INT 1
4254: LESS
4255: IFFALSE 4265
// nsci := 1 ;
4257: LD_ADDR_LOC 6
4261: PUSH
4262: LD_INT 1
4264: ST_TO_ADDR
// neng := neng - nsci ;
4265: LD_ADDR_LOC 5
4269: PUSH
4270: LD_LOC 5
4274: PUSH
4275: LD_LOC 6
4279: MINUS
4280: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4281: LD_ADDR_LOC 7
4285: PUSH
4286: LD_LOC 5
4290: PUSH
4291: LD_INT 2
4293: DIV
4294: PUSH
4295: LD_INT 0
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: PUSH
4302: LD_VAR 0 2
4306: ARRAY
4307: ST_TO_ADDR
// neng := neng - nmech ;
4308: LD_ADDR_LOC 5
4312: PUSH
4313: LD_LOC 5
4317: PUSH
4318: LD_LOC 7
4322: MINUS
4323: ST_TO_ADDR
// if ( neng < 1 ) then
4324: LD_LOC 5
4328: PUSH
4329: LD_INT 1
4331: LESS
4332: IFFALSE 4342
// neng := 1 ;
4334: LD_ADDR_LOC 5
4338: PUSH
4339: LD_INT 1
4341: ST_TO_ADDR
// end ;
4342: LD_VAR 0 1
4346: RET
// starting begin disable ( 98 ) ;
4347: LD_INT 98
4349: DISABLE_MARKED
// disable ( 99 ) ;
4350: LD_INT 99
4352: DISABLE_MARKED
// disable ( 100 ) ;
4353: LD_INT 100
4355: DISABLE_MARKED
// disable ( 4 ) ;
4356: LD_INT 4
4358: DISABLE_MARKED
// disable ( 400 ) ;
4359: LD_INT 400
4361: DISABLE_MARKED
// disable ( 401 ) ;
4362: LD_INT 401
4364: DISABLE_MARKED
// mp_selectmsg := true ;
4365: LD_ADDR_OWVAR 13
4369: PUSH
4370: LD_INT 1
4372: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4373: CALL 68 0 0
// init_map ;
4377: CALL 1454 0 0
// set_shared_visions_and_alliances ;
4381: CALL 1983 0 0
// ResetFog ;
4385: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4389: LD_OWVAR 2
4393: PPUSH
4394: CALL_OW 520
// prepare_sides ;
4398: CALL 4048 0 0
// init_shipments_and_respawning ;
4402: CALL 4543 0 0
// Init_Win_Condition ;
4406: CALL 12040 0 0
// if game_type = 3 then
4410: LD_EXP 41
4414: PUSH
4415: LD_INT 3
4417: EQUAL
4418: IFFALSE 4428
// begin InitPoints ( ) ;
4420: CALL 11043 0 0
// init_kings_counting ;
4424: CALL 13403 0 0
// end ; InitApeman ;
4428: CALL 6673 0 0
// InitLimits ;
4432: CALL 9913 0 0
// ShowTimer ;
4436: CALL 10850 0 0
// music_nat := Side_Nations [ your_side ] ;
4440: LD_ADDR_OWVAR 71
4444: PUSH
4445: LD_EXP 22
4449: PUSH
4450: LD_OWVAR 2
4454: ARRAY
4455: ST_TO_ADDR
// if IAmSpec then
4456: CALL_OW 531
4460: IFFALSE 4496
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4462: LD_INT 0
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: LD_OWVAR 2
4472: PPUSH
4473: LD_INT 32767
4475: NEG
4476: PPUSH
4477: CALL_OW 330
// CenterNowOnXY ( 119 , 79 ) ;
4481: LD_INT 119
4483: PPUSH
4484: LD_INT 79
4486: PPUSH
4487: CALL_OW 86
// enable ( 400 ) ;
4491: LD_INT 400
4493: ENABLE_MARKED
// end else
4494: GO 4542
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4496: LD_EXP 26
4500: PUSH
4501: LD_EXP 21
4505: PUSH
4506: LD_OWVAR 2
4510: ARRAY
4511: ARRAY
4512: PUSH
4513: LD_INT 1
4515: ARRAY
4516: PPUSH
4517: LD_EXP 26
4521: PUSH
4522: LD_EXP 21
4526: PUSH
4527: LD_OWVAR 2
4531: ARRAY
4532: ARRAY
4533: PUSH
4534: LD_INT 2
4536: ARRAY
4537: PPUSH
4538: CALL_OW 86
// end ; end ; end_of_file
4542: END
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4543: LD_INT 0
4545: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4546: LD_ADDR_LOC 9
4550: PUSH
4551: LD_INT 0
4553: PPUSH
4554: LD_INT 3
4556: PPUSH
4557: CALL_OW 12
4561: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
4562: LD_ADDR_LOC 10
4566: PUSH
4567: LD_INT 1
4569: PPUSH
4570: LD_INT 8
4572: PPUSH
4573: CALL_OW 12
4577: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4578: LD_ADDR_LOC 11
4582: PUSH
4583: LD_INT 0
4585: PUSH
4586: LD_INT 0
4588: PUSH
4589: LD_INT 0
4591: PUSH
4592: LD_INT 0
4594: PUSH
4595: LD_INT 0
4597: PUSH
4598: LD_INT 0
4600: PUSH
4601: LD_INT 0
4603: PUSH
4604: LD_INT 0
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: ST_TO_ADDR
// end ;
4617: LD_VAR 0 1
4621: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
4622: GO 4624
4624: DISABLE
4625: LD_INT 0
4627: PPUSH
4628: PPUSH
4629: PPUSH
4630: PPUSH
// begin if respawning_time_max = 0 then
4631: LD_EXP 14
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: IFFALSE 4643
// exit ;
4641: GO 5150
// if respawn = 8 then
4643: LD_LOC 10
4647: PUSH
4648: LD_INT 8
4650: EQUAL
4651: IFFALSE 4663
// respawn := 1 else
4653: LD_ADDR_LOC 10
4657: PUSH
4658: LD_INT 1
4660: ST_TO_ADDR
4661: GO 4677
// respawn := respawn + 1 ;
4663: LD_ADDR_LOC 10
4667: PUSH
4668: LD_LOC 10
4672: PUSH
4673: LD_INT 1
4675: PLUS
4676: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
4677: LD_EXP 21
4681: PUSH
4682: LD_LOC 10
4686: ARRAY
4687: PUSH
4688: LD_LOC 11
4692: PUSH
4693: LD_LOC 10
4697: ARRAY
4698: NOT
4699: AND
4700: IFFALSE 5149
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
4702: LD_ADDR_VAR 0 1
4706: PUSH
4707: LD_INT 21
4709: PUSH
4710: LD_INT 1
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 22
4719: PUSH
4720: LD_LOC 10
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: LD_INT 3
4731: PUSH
4732: LD_INT 23
4734: PUSH
4735: LD_INT 0
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: PPUSH
4748: CALL_OW 69
4752: ST_TO_ADDR
// if n < number_of_people then
4753: LD_VAR 0 1
4757: PUSH
4758: LD_EXP 5
4762: LESS
4763: IFFALSE 5146
// begin aktresp := respawn ;
4765: LD_ADDR_VAR 0 3
4769: PUSH
4770: LD_LOC 10
4774: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
4775: LD_ADDR_LOC 11
4779: PUSH
4780: LD_LOC 11
4784: PPUSH
4785: LD_VAR 0 3
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: CALL_OW 1
4797: ST_TO_ADDR
// enable ;
4798: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
4799: LD_EXP 13
4803: PPUSH
4804: LD_EXP 14
4808: PPUSH
4809: CALL_OW 12
4813: PPUSH
4814: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
4818: LD_ADDR_LOC 11
4822: PUSH
4823: LD_LOC 11
4827: PPUSH
4828: LD_VAR 0 3
4832: PPUSH
4833: LD_INT 0
4835: PPUSH
4836: CALL_OW 1
4840: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4841: LD_ADDR_VAR 0 2
4845: PUSH
4846: LD_INT 21
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 2
4858: PUSH
4859: LD_INT 30
4861: PUSH
4862: LD_INT 0
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 30
4871: PUSH
4872: LD_INT 1
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 50
4886: PUSH
4887: EMPTY
4888: LIST
4889: PUSH
4890: LD_INT 22
4892: PUSH
4893: LD_VAR 0 3
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: PPUSH
4908: CALL_OW 69
4912: ST_TO_ADDR
// if building_list = 0 then
4913: LD_VAR 0 2
4917: PUSH
4918: LD_INT 0
4920: EQUAL
4921: IFFALSE 4966
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4923: LD_ADDR_VAR 0 2
4927: PUSH
4928: LD_INT 21
4930: PUSH
4931: LD_INT 3
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 50
4940: PUSH
4941: EMPTY
4942: LIST
4943: PUSH
4944: LD_INT 22
4946: PUSH
4947: LD_VAR 0 3
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: PPUSH
4961: CALL_OW 69
4965: ST_TO_ADDR
// if building_list = 0 then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_INT 0
4973: EQUAL
4974: IFFALSE 4978
// exit ;
4976: GO 5150
// hc_name :=  ;
4978: LD_ADDR_OWVAR 26
4982: PUSH
4983: LD_STRING 
4985: ST_TO_ADDR
// hc_importance := 0 ;
4986: LD_ADDR_OWVAR 32
4990: PUSH
4991: LD_INT 0
4993: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
4994: LD_INT 0
4996: PPUSH
4997: LD_INT 0
4999: PPUSH
5000: LD_EXP 7
5004: PUSH
5005: LD_INT 2
5007: DIV
5008: PPUSH
5009: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5013: LD_ADDR_OWVAR 21
5017: PUSH
5018: LD_EXP 22
5022: PUSH
5023: LD_VAR 0 3
5027: ARRAY
5028: ST_TO_ADDR
// uc_side := aktresp ;
5029: LD_ADDR_OWVAR 20
5033: PUSH
5034: LD_VAR 0 3
5038: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5039: LD_ADDR_VAR 0 4
5043: PUSH
5044: LD_VAR 0 2
5048: PUSH
5049: LD_INT 1
5051: PPUSH
5052: LD_VAR 0 2
5056: PUSH
5057: LD_INT 0
5059: PLUS
5060: PPUSH
5061: CALL_OW 12
5065: ARRAY
5066: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5067: LD_VAR 0 4
5071: PPUSH
5072: CALL_OW 266
5076: PUSH
5077: LD_INT 0
5079: PUSH
5080: LD_INT 1
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: IN
5087: IFFALSE 5099
// n = 25 else
5089: LD_ADDR_VAR 0 1
5093: PUSH
5094: LD_INT 25
5096: ST_TO_ADDR
5097: GO 5107
// n = 10 ;
5099: LD_ADDR_VAR 0 1
5103: PUSH
5104: LD_INT 10
5106: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5107: CALL_OW 44
5111: PPUSH
5112: LD_VAR 0 4
5116: PPUSH
5117: CALL_OW 250
5121: PPUSH
5122: LD_VAR 0 4
5126: PPUSH
5127: CALL_OW 251
5131: PPUSH
5132: LD_VAR 0 1
5136: PPUSH
5137: LD_INT 1
5139: PPUSH
5140: CALL_OW 50
// end else
5144: GO 5147
// enable ;
5146: ENABLE
// end else
5147: GO 5150
// enable ;
5149: ENABLE
// end ;
5150: PPOPN 4
5152: END
// every 0 0$5 + 0 0$1.1 do var d ;
5153: GO 5155
5155: DISABLE
5156: LD_INT 0
5158: PPUSH
// begin case tick of 1 .. 1 1$0 :
5159: LD_OWVAR 1
5163: PUSH
5164: LD_INT 1
5166: DOUBLE
5167: GREATEREQUAL
5168: IFFALSE 5176
5170: LD_INT 2100
5172: DOUBLE
5173: LESSEQUAL
5174: IFTRUE 5178
5176: GO 5189
5178: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5179: LD_ADDR_VAR 0 1
5183: PUSH
5184: LD_INT 150
5186: ST_TO_ADDR
5187: GO 5372
5189: LD_INT 2100
5191: PUSH
5192: LD_INT 1
5194: PLUS
5195: DOUBLE
5196: GREATEREQUAL
5197: IFFALSE 5205
5199: LD_INT 10500
5201: DOUBLE
5202: LESSEQUAL
5203: IFTRUE 5207
5205: GO 5218
5207: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5208: LD_ADDR_VAR 0 1
5212: PUSH
5213: LD_INT 100
5215: ST_TO_ADDR
5216: GO 5372
5218: LD_INT 10500
5220: PUSH
5221: LD_INT 1
5223: PLUS
5224: DOUBLE
5225: GREATEREQUAL
5226: IFFALSE 5234
5228: LD_INT 21000
5230: DOUBLE
5231: LESSEQUAL
5232: IFTRUE 5236
5234: GO 5247
5236: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5237: LD_ADDR_VAR 0 1
5241: PUSH
5242: LD_INT 90
5244: ST_TO_ADDR
5245: GO 5372
5247: LD_INT 21000
5249: PUSH
5250: LD_INT 1
5252: PLUS
5253: DOUBLE
5254: GREATEREQUAL
5255: IFFALSE 5263
5257: LD_INT 42000
5259: DOUBLE
5260: LESSEQUAL
5261: IFTRUE 5265
5263: GO 5276
5265: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5266: LD_ADDR_VAR 0 1
5270: PUSH
5271: LD_INT 70
5273: ST_TO_ADDR
5274: GO 5372
5276: LD_INT 42000
5278: PUSH
5279: LD_INT 1
5281: PLUS
5282: DOUBLE
5283: GREATEREQUAL
5284: IFFALSE 5292
5286: LD_INT 63000
5288: DOUBLE
5289: LESSEQUAL
5290: IFTRUE 5294
5292: GO 5305
5294: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5295: LD_ADDR_VAR 0 1
5299: PUSH
5300: LD_INT 60
5302: ST_TO_ADDR
5303: GO 5372
5305: LD_INT 63000
5307: PUSH
5308: LD_INT 1
5310: PLUS
5311: DOUBLE
5312: GREATEREQUAL
5313: IFFALSE 5321
5315: LD_INT 105000
5317: DOUBLE
5318: LESSEQUAL
5319: IFTRUE 5323
5321: GO 5334
5323: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5324: LD_ADDR_VAR 0 1
5328: PUSH
5329: LD_INT 35
5331: ST_TO_ADDR
5332: GO 5372
5334: LD_INT 105000
5336: PUSH
5337: LD_INT 1
5339: PLUS
5340: DOUBLE
5341: GREATEREQUAL
5342: IFFALSE 5350
5344: LD_INT 630000
5346: DOUBLE
5347: LESSEQUAL
5348: IFTRUE 5352
5350: GO 5363
5352: POP
// d := 20 ; else
5353: LD_ADDR_VAR 0 1
5357: PUSH
5358: LD_INT 20
5360: ST_TO_ADDR
5361: GO 5372
5363: POP
// d := 0 ; end ;
5364: LD_ADDR_VAR 0 1
5368: PUSH
5369: LD_INT 0
5371: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5372: LD_INT 1
5374: PPUSH
5375: LD_INT 10000
5377: PPUSH
5378: CALL_OW 12
5382: PUSH
5383: LD_VAR 0 1
5387: PUSH
5388: LD_EXP 10
5392: MUL
5393: LESSEQUAL
5394: IFFALSE 5448
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5396: LD_INT 1
5398: PPUSH
5399: LD_INT 140
5401: PPUSH
5402: CALL_OW 12
5406: PPUSH
5407: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5411: LD_ADDR_LOC 9
5415: PUSH
5416: LD_LOC 9
5420: PUSH
5421: LD_INT 1
5423: PLUS
5424: PUSH
5425: LD_INT 4
5427: MOD
5428: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLH + shipment , true ) ;
5429: LD_INT 5
5431: PPUSH
5432: LD_INT 3
5434: PUSH
5435: LD_LOC 9
5439: PLUS
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: CALL_OW 55
// end ; enable ;
5448: ENABLE
// end ;
5449: PPOPN 1
5451: END
// every 0 0$7 + 0 0$1.7 do var d ;
5452: GO 5454
5454: DISABLE
5455: LD_INT 0
5457: PPUSH
// begin case tick of 1 .. 1 1$0 :
5458: LD_OWVAR 1
5462: PUSH
5463: LD_INT 1
5465: DOUBLE
5466: GREATEREQUAL
5467: IFFALSE 5475
5469: LD_INT 2100
5471: DOUBLE
5472: LESSEQUAL
5473: IFTRUE 5477
5475: GO 5488
5477: POP
// d := 20 ; 1 1$0 + 1 .. 5 5$0 :
5478: LD_ADDR_VAR 0 1
5482: PUSH
5483: LD_INT 20
5485: ST_TO_ADDR
5486: GO 5671
5488: LD_INT 2100
5490: PUSH
5491: LD_INT 1
5493: PLUS
5494: DOUBLE
5495: GREATEREQUAL
5496: IFFALSE 5504
5498: LD_INT 10500
5500: DOUBLE
5501: LESSEQUAL
5502: IFTRUE 5506
5504: GO 5517
5506: POP
// d := 50 ; 5 5$0 + 1 .. 10 10$0 :
5507: LD_ADDR_VAR 0 1
5511: PUSH
5512: LD_INT 50
5514: ST_TO_ADDR
5515: GO 5671
5517: LD_INT 10500
5519: PUSH
5520: LD_INT 1
5522: PLUS
5523: DOUBLE
5524: GREATEREQUAL
5525: IFFALSE 5533
5527: LD_INT 21000
5529: DOUBLE
5530: LESSEQUAL
5531: IFTRUE 5535
5533: GO 5546
5535: POP
// d := 150 ; 10 10$0 + 1 .. 20 20$0 :
5536: LD_ADDR_VAR 0 1
5540: PUSH
5541: LD_INT 150
5543: ST_TO_ADDR
5544: GO 5671
5546: LD_INT 21000
5548: PUSH
5549: LD_INT 1
5551: PLUS
5552: DOUBLE
5553: GREATEREQUAL
5554: IFFALSE 5562
5556: LD_INT 42000
5558: DOUBLE
5559: LESSEQUAL
5560: IFTRUE 5564
5562: GO 5575
5564: POP
// d := 100 ; 20 20$0 + 1 .. 30 30$0 :
5565: LD_ADDR_VAR 0 1
5569: PUSH
5570: LD_INT 100
5572: ST_TO_ADDR
5573: GO 5671
5575: LD_INT 42000
5577: PUSH
5578: LD_INT 1
5580: PLUS
5581: DOUBLE
5582: GREATEREQUAL
5583: IFFALSE 5591
5585: LD_INT 63000
5587: DOUBLE
5588: LESSEQUAL
5589: IFTRUE 5593
5591: GO 5604
5593: POP
// d := 90 ; 30 30$0 + 1 .. 50 50$0 :
5594: LD_ADDR_VAR 0 1
5598: PUSH
5599: LD_INT 90
5601: ST_TO_ADDR
5602: GO 5671
5604: LD_INT 63000
5606: PUSH
5607: LD_INT 1
5609: PLUS
5610: DOUBLE
5611: GREATEREQUAL
5612: IFFALSE 5620
5614: LD_INT 105000
5616: DOUBLE
5617: LESSEQUAL
5618: IFTRUE 5622
5620: GO 5633
5622: POP
// d := 70 ; 50 50$0 + 1 .. 300 300$0 :
5623: LD_ADDR_VAR 0 1
5627: PUSH
5628: LD_INT 70
5630: ST_TO_ADDR
5631: GO 5671
5633: LD_INT 105000
5635: PUSH
5636: LD_INT 1
5638: PLUS
5639: DOUBLE
5640: GREATEREQUAL
5641: IFFALSE 5649
5643: LD_INT 630000
5645: DOUBLE
5646: LESSEQUAL
5647: IFTRUE 5651
5649: GO 5662
5651: POP
// d := 60 ; else
5652: LD_ADDR_VAR 0 1
5656: PUSH
5657: LD_INT 60
5659: ST_TO_ADDR
5660: GO 5671
5662: POP
// d := 35 ; end ;
5663: LD_ADDR_VAR 0 1
5667: PUSH
5668: LD_INT 35
5670: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5671: LD_INT 1
5673: PPUSH
5674: LD_INT 10000
5676: PPUSH
5677: CALL_OW 12
5681: PUSH
5682: LD_VAR 0 1
5686: PUSH
5687: LD_EXP 10
5691: MUL
5692: LESSEQUAL
5693: IFFALSE 5747
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5695: LD_INT 1
5697: PPUSH
5698: LD_INT 140
5700: PPUSH
5701: CALL_OW 12
5705: PPUSH
5706: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5710: LD_ADDR_LOC 9
5714: PUSH
5715: LD_LOC 9
5719: PUSH
5720: LD_INT 1
5722: PLUS
5723: PUSH
5724: LD_INT 4
5726: MOD
5727: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLHOut + shipment , true ) ;
5728: LD_INT 5
5730: PPUSH
5731: LD_INT 20
5733: PUSH
5734: LD_LOC 9
5738: PLUS
5739: PPUSH
5740: LD_INT 1
5742: PPUSH
5743: CALL_OW 55
// end ; enable ;
5747: ENABLE
// end ;
5748: PPOPN 1
5750: END
// every 1 1$0 trigger def_shipments_density do
5751: LD_EXP 47
5755: IFFALSE 5791
5757: GO 5759
5759: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5760: LD_INT 5
5762: PPUSH
5763: LD_INT 15
5765: PPUSH
5766: LD_INT 1
5768: PPUSH
5769: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5773: LD_INT 6300
5775: PUSH
5776: LD_INT 2100
5778: PUSH
5779: LD_EXP 47
5783: MUL
5784: MINUS
5785: PPUSH
5786: CALL_OW 67
// enable ;
5790: ENABLE
// end ; end_of_file
5791: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5792: LD_VAR 0 1
5796: PPUSH
5797: CALL_OW 266
5801: PUSH
5802: LD_INT 0
5804: PUSH
5805: LD_INT 1
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: IN
5812: IFFALSE 5837
// SetBName ( b , @ & GetSide ( b ) ) ;
5814: LD_VAR 0 1
5818: PPUSH
5819: LD_STRING @
5821: PUSH
5822: LD_VAR 0 1
5826: PPUSH
5827: CALL_OW 255
5831: STR
5832: PPUSH
5833: CALL_OW 500
// if def_game_rules then
5837: LD_EXP 42
5841: IFFALSE 5878
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
5843: LD_VAR 0 1
5847: PPUSH
5848: LD_VAR 0 1
5852: PPUSH
5853: CALL_OW 266
5857: PPUSH
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 255
5867: PPUSH
5868: LD_INT 0
5870: PPUSH
5871: LD_INT 1
5873: PPUSH
5874: CALL 10314 0 5
// end ;
5878: PPOPN 2
5880: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5881: LD_VAR 0 1
5885: PPUSH
5886: CALL_OW 266
5890: PUSH
5891: LD_INT 0
5893: PUSH
5894: LD_INT 1
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: IN
5901: IFFALSE 5926
// SetBName ( b , @ & GetSide ( b ) ) ;
5903: LD_VAR 0 1
5907: PPUSH
5908: LD_STRING @
5910: PUSH
5911: LD_VAR 0 1
5915: PPUSH
5916: CALL_OW 255
5920: STR
5921: PPUSH
5922: CALL_OW 500
// if def_game_rules then
5926: LD_EXP 42
5930: IFFALSE 5969
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
5932: LD_VAR 0 1
5936: PPUSH
5937: LD_VAR 0 1
5941: PPUSH
5942: CALL_OW 266
5946: PPUSH
5947: LD_VAR 0 1
5951: PPUSH
5952: CALL_OW 255
5956: PPUSH
5957: LD_VAR 0 2
5961: PPUSH
5962: LD_INT 1
5964: PPUSH
5965: CALL 10314 0 5
// end ;
5969: PPOPN 3
5971: END
// on VehicleConstructed ( veh , fac ) do var side ;
5972: LD_INT 0
5974: PPUSH
// begin if GetControl ( veh ) = control_apeman then
5975: LD_VAR 0 1
5979: PPUSH
5980: CALL_OW 263
5984: PUSH
5985: LD_INT 5
5987: EQUAL
5988: IFFALSE 6130
// begin side := GetSide ( veh ) ;
5990: LD_ADDR_VAR 0 3
5994: PUSH
5995: LD_VAR 0 1
5999: PPUSH
6000: CALL_OW 255
6004: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6005: LD_ADDR_EXP 37
6009: PUSH
6010: LD_EXP 37
6014: PPUSH
6015: LD_VAR 0 3
6019: PPUSH
6020: LD_EXP 37
6024: PUSH
6025: LD_VAR 0 3
6029: ARRAY
6030: PPUSH
6031: LD_INT 52
6033: PUSH
6034: EMPTY
6035: LIST
6036: PPUSH
6037: CALL_OW 72
6041: PUSH
6042: LD_INT 22
6044: PUSH
6045: LD_VAR 0 3
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 2
6056: PUSH
6057: LD_INT 33
6059: PUSH
6060: LD_INT 5
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 25
6069: PUSH
6070: LD_INT 12
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PUSH
6077: LD_INT 25
6079: PUSH
6080: LD_INT 15
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 25
6089: PUSH
6090: LD_INT 16
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: PUSH
6097: LD_INT 25
6099: PUSH
6100: LD_INT 17
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PPUSH
6119: CALL_OW 69
6123: UNION
6124: PPUSH
6125: CALL_OW 1
6129: ST_TO_ADDR
// end ; end ;
6130: PPOPN 3
6132: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6133: LD_INT 0
6135: PPUSH
6136: PPUSH
6137: PPUSH
6138: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL_OW 257
6148: PUSH
6149: LD_INT 12
6151: PUSH
6152: LD_INT 15
6154: PUSH
6155: LD_INT 17
6157: PUSH
6158: LD_INT 16
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: IN
6167: PUSH
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 263
6177: PUSH
6178: LD_INT 5
6180: EQUAL
6181: OR
6182: IFFALSE 6193
// ApeKilled ( j ) ;
6184: LD_VAR 0 1
6188: PPUSH
6189: CALL 7354 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6193: LD_VAR 0 1
6197: PPUSH
6198: CALL_OW 266
6202: PUSH
6203: LD_INT 0
6205: PUSH
6206: LD_INT 1
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: IN
6213: IFFALSE 6295
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: LD_EXP 21
6224: PUSH
6225: LD_VAR 0 1
6229: PPUSH
6230: CALL_OW 255
6234: ARRAY
6235: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6236: LD_ADDR_VAR 0 2
6240: PUSH
6241: LD_EXP 26
6245: PUSH
6246: LD_VAR 0 4
6250: ARRAY
6251: PUSH
6252: LD_INT 1
6254: ARRAY
6255: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6256: LD_ADDR_VAR 0 3
6260: PUSH
6261: LD_EXP 26
6265: PUSH
6266: LD_VAR 0 4
6270: ARRAY
6271: PUSH
6272: LD_INT 2
6274: ARRAY
6275: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6276: LD_VAR 0 2
6280: PPUSH
6281: LD_VAR 0 3
6285: PPUSH
6286: CALL_OW 420
6290: PPUSH
6291: CALL_OW 419
// end ; if def_game_rules then
6295: LD_EXP 42
6299: IFFALSE 6398
// if ( GetType ( j ) = 3 ) then
6301: LD_VAR 0 1
6305: PPUSH
6306: CALL_OW 247
6310: PUSH
6311: LD_INT 3
6313: EQUAL
6314: IFFALSE 6354
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6316: LD_VAR 0 1
6320: PPUSH
6321: LD_VAR 0 1
6325: PPUSH
6326: CALL_OW 266
6330: PPUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: CALL_OW 255
6340: PPUSH
6341: LD_INT 0
6343: PPUSH
6344: LD_INT 1
6346: NEG
6347: PPUSH
6348: CALL 10314 0 5
6352: GO 6398
// if ( GetChassis ( j ) = 25 ) then
6354: LD_VAR 0 1
6358: PPUSH
6359: CALL_OW 265
6363: PUSH
6364: LD_INT 25
6366: EQUAL
6367: IFFALSE 6398
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6369: LD_VAR 0 1
6373: PPUSH
6374: LD_INT 37
6376: PPUSH
6377: LD_VAR 0 1
6381: PPUSH
6382: CALL_OW 255
6386: PPUSH
6387: LD_INT 0
6389: PPUSH
6390: LD_INT 1
6392: NEG
6393: PPUSH
6394: CALL 10314 0 5
// end ;
6398: PPOPN 5
6400: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6401: LD_EXP 42
6405: PUSH
6406: LD_VAR 0 1
6410: PPUSH
6411: CALL_OW 265
6415: PUSH
6416: LD_INT 25
6418: EQUAL
6419: AND
6420: IFFALSE 6452
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6422: LD_VAR 0 1
6426: PPUSH
6427: LD_INT 37
6429: PPUSH
6430: LD_VAR 0 1
6434: PPUSH
6435: CALL_OW 255
6439: PPUSH
6440: LD_VAR 0 3
6444: PPUSH
6445: LD_INT 1
6447: PPUSH
6448: CALL 10314 0 5
// end ;
6452: PPOPN 4
6454: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6455: LD_VAR 0 1
6459: PPUSH
6460: LD_VAR 0 2
6464: PPUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_OWVAR 2
6474: PPUSH
6475: CALL 11801 0 4
6479: PPOPN 3
6481: END
// every 20 20$00 trigger apemanNumber do
6482: LD_EXP 34
6486: IFFALSE 6519
6488: GO 6490
6490: DISABLE
// begin enable ;
6491: ENABLE
// if apeLevel >= 8 then
6492: LD_EXP 39
6496: PUSH
6497: LD_INT 8
6499: GREATEREQUAL
6500: IFFALSE 6505
// disable else
6502: DISABLE
6503: GO 6519
// apeLevel := apeLevel + 1 ;
6505: LD_ADDR_EXP 39
6509: PUSH
6510: LD_EXP 39
6514: PUSH
6515: LD_INT 1
6517: PLUS
6518: ST_TO_ADDR
// end ;
6519: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6520: LD_EXP 34
6524: PUSH
6525: LD_EXP 35
6529: LESS
6530: IFFALSE 6670
6532: GO 6534
6534: DISABLE
6535: LD_INT 0
6537: PPUSH
6538: PPUSH
6539: PPUSH
6540: PPUSH
// begin enable ;
6541: ENABLE
// for i := 1 to apemanPos do
6542: LD_ADDR_VAR 0 1
6546: PUSH
6547: DOUBLE
6548: LD_INT 1
6550: DEC
6551: ST_TO_ADDR
6552: LD_EXP 37
6556: PUSH
6557: FOR_TO
6558: IFFALSE 6668
// begin if apemanPlayerCount [ i ] then
6560: LD_EXP 38
6564: PUSH
6565: LD_VAR 0 1
6569: ARRAY
6570: IFFALSE 6666
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6572: LD_EXP 38
6576: PUSH
6577: LD_VAR 0 1
6581: ARRAY
6582: PUSH
6583: LD_EXP 37
6587: PUSH
6588: LD_VAR 0 1
6592: ARRAY
6593: GREATER
6594: IFFALSE 6666
// begin ape := PrepareApeman ;
6596: LD_ADDR_VAR 0 2
6600: PUSH
6601: CALL 7173 0 0
6605: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6606: LD_VAR 0 2
6610: PPUSH
6611: LD_EXP 40
6615: PUSH
6616: LD_VAR 0 1
6620: ARRAY
6621: PPUSH
6622: LD_INT 0
6624: PPUSH
6625: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6629: LD_ADDR_EXP 37
6633: PUSH
6634: LD_EXP 37
6638: PPUSH
6639: LD_VAR 0 1
6643: PPUSH
6644: LD_EXP 37
6648: PUSH
6649: LD_VAR 0 1
6653: ARRAY
6654: PUSH
6655: LD_VAR 0 2
6659: UNION
6660: PPUSH
6661: CALL_OW 1
6665: ST_TO_ADDR
// end ; end ; end ;
6666: GO 6557
6668: POP
6669: POP
// end ;
6670: PPOPN 4
6672: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6673: LD_INT 0
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
6681: PPUSH
// playersAmount := 0 ;
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: LD_INT 0
6689: ST_TO_ADDR
// _apeAreas := [ OpiceSZ , OpiceSV , OpiceJZ , OpiceJV ] ;
6690: LD_ADDR_VAR 0 7
6694: PUSH
6695: LD_INT 11
6697: PUSH
6698: LD_INT 12
6700: PUSH
6701: LD_INT 14
6703: PUSH
6704: LD_INT 13
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6713: LD_ADDR_EXP 40
6717: PUSH
6718: LD_INT 0
6720: PUSH
6721: LD_INT 0
6723: PUSH
6724: LD_INT 0
6726: PUSH
6727: LD_INT 0
6729: PUSH
6730: LD_INT 0
6732: PUSH
6733: LD_INT 0
6735: PUSH
6736: LD_INT 0
6738: PUSH
6739: LD_INT 0
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: ST_TO_ADDR
// for j = 1 to Side_Positions do
6752: LD_ADDR_VAR 0 4
6756: PUSH
6757: DOUBLE
6758: LD_INT 1
6760: DEC
6761: ST_TO_ADDR
6762: LD_EXP 21
6766: PUSH
6767: FOR_TO
6768: IFFALSE 6835
// if Side_Positions [ j ] then
6770: LD_EXP 21
6774: PUSH
6775: LD_VAR 0 4
6779: ARRAY
6780: IFFALSE 6833
// begin playersAmount := playersAmount + 1 ;
6782: LD_ADDR_VAR 0 3
6786: PUSH
6787: LD_VAR 0 3
6791: PUSH
6792: LD_INT 1
6794: PLUS
6795: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6796: LD_ADDR_EXP 40
6800: PUSH
6801: LD_EXP 40
6805: PPUSH
6806: LD_VAR 0 4
6810: PPUSH
6811: LD_VAR 0 7
6815: PUSH
6816: LD_EXP 21
6820: PUSH
6821: LD_VAR 0 4
6825: ARRAY
6826: ARRAY
6827: PPUSH
6828: CALL_OW 1
6832: ST_TO_ADDR
// end ;
6833: GO 6767
6835: POP
6836: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6837: LD_ADDR_EXP 36
6841: PUSH
6842: LD_INT 3
6844: PUSH
6845: LD_EXP 6
6849: MUL
6850: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6851: LD_ADDR_EXP 34
6855: PUSH
6856: LD_VAR 0 3
6860: PUSH
6861: LD_EXP 36
6865: MUL
6866: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6867: LD_ADDR_EXP 35
6871: PUSH
6872: LD_EXP 34
6876: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6877: LD_ADDR_EXP 37
6881: PUSH
6882: LD_INT 0
6884: PUSH
6885: LD_INT 0
6887: PUSH
6888: LD_INT 0
6890: PUSH
6891: LD_INT 0
6893: PUSH
6894: LD_INT 0
6896: PUSH
6897: LD_INT 0
6899: PUSH
6900: LD_INT 0
6902: PUSH
6903: LD_INT 0
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6916: LD_ADDR_EXP 38
6920: PUSH
6921: LD_INT 0
6923: PUSH
6924: LD_INT 0
6926: PUSH
6927: LD_INT 0
6929: PUSH
6930: LD_INT 0
6932: PUSH
6933: LD_INT 0
6935: PUSH
6936: LD_INT 0
6938: PUSH
6939: LD_INT 0
6941: PUSH
6942: LD_INT 0
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: ST_TO_ADDR
// apeLevel := 1 ;
6955: LD_ADDR_EXP 39
6959: PUSH
6960: LD_INT 1
6962: ST_TO_ADDR
// if not apemanNumber then
6963: LD_EXP 34
6967: NOT
6968: IFFALSE 6972
// exit ;
6970: GO 7168
// for i := 1 to apemanPerPlayer do
6972: LD_ADDR_VAR 0 2
6976: PUSH
6977: DOUBLE
6978: LD_INT 1
6980: DEC
6981: ST_TO_ADDR
6982: LD_EXP 36
6986: PUSH
6987: FOR_TO
6988: IFFALSE 7166
// begin for j := 1 to Side_Positions do
6990: LD_ADDR_VAR 0 4
6994: PUSH
6995: DOUBLE
6996: LD_INT 1
6998: DEC
6999: ST_TO_ADDR
7000: LD_EXP 21
7004: PUSH
7005: FOR_TO
7006: IFFALSE 7162
// if Side_Positions [ j ] then
7008: LD_EXP 21
7012: PUSH
7013: LD_VAR 0 4
7017: ARRAY
7018: IFFALSE 7160
// begin pos := Side_Positions [ j ] ;
7020: LD_ADDR_VAR 0 6
7024: PUSH
7025: LD_EXP 21
7029: PUSH
7030: LD_VAR 0 4
7034: ARRAY
7035: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7036: LD_ADDR_EXP 38
7040: PUSH
7041: LD_EXP 38
7045: PPUSH
7046: LD_VAR 0 4
7050: PPUSH
7051: LD_EXP 38
7055: PUSH
7056: LD_VAR 0 4
7060: ARRAY
7061: PUSH
7062: LD_INT 1
7064: PLUS
7065: PPUSH
7066: CALL_OW 1
7070: ST_TO_ADDR
// ape := PrepareApeman ;
7071: LD_ADDR_VAR 0 5
7075: PUSH
7076: CALL 7173 0 0
7080: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7081: LD_ADDR_EXP 37
7085: PUSH
7086: LD_EXP 37
7090: PPUSH
7091: LD_VAR 0 4
7095: PPUSH
7096: LD_EXP 37
7100: PUSH
7101: LD_VAR 0 4
7105: ARRAY
7106: PPUSH
7107: LD_EXP 37
7111: PUSH
7112: LD_VAR 0 4
7116: ARRAY
7117: PUSH
7118: LD_INT 1
7120: PLUS
7121: PPUSH
7122: LD_VAR 0 5
7126: PPUSH
7127: CALL_OW 1
7131: PPUSH
7132: CALL_OW 1
7136: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7137: LD_VAR 0 5
7141: PPUSH
7142: LD_EXP 40
7146: PUSH
7147: LD_VAR 0 4
7151: ARRAY
7152: PPUSH
7153: LD_INT 0
7155: PPUSH
7156: CALL_OW 49
// end ;
7160: GO 7005
7162: POP
7163: POP
// end ;
7164: GO 6987
7166: POP
7167: POP
// end ;
7168: LD_VAR 0 1
7172: RET
// export function PrepareApeman ; var bonus ; begin
7173: LD_INT 0
7175: PPUSH
7176: PPUSH
// uc_side := 0 ;
7177: LD_ADDR_OWVAR 20
7181: PUSH
7182: LD_INT 0
7184: ST_TO_ADDR
// uc_nation := 0 ;
7185: LD_ADDR_OWVAR 21
7189: PUSH
7190: LD_INT 0
7192: ST_TO_ADDR
// InitHc ;
7193: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7197: LD_ADDR_VAR 0 2
7201: PUSH
7202: LD_INT 1
7204: NEG
7205: PUSH
7206: LD_INT 0
7208: PUSH
7209: LD_INT 1
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: PUSH
7217: LD_OWVAR 1
7221: PUSH
7222: LD_INT 3
7224: MOD
7225: PUSH
7226: LD_INT 1
7228: PLUS
7229: ARRAY
7230: ST_TO_ADDR
// hc_class := class_apeman ;
7231: LD_ADDR_OWVAR 28
7235: PUSH
7236: LD_INT 12
7238: ST_TO_ADDR
// hc_gallery :=  ;
7239: LD_ADDR_OWVAR 33
7243: PUSH
7244: LD_STRING 
7246: ST_TO_ADDR
// hc_name :=  ;
7247: LD_ADDR_OWVAR 26
7251: PUSH
7252: LD_STRING 
7254: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7255: LD_ADDR_OWVAR 31
7259: PUSH
7260: LD_EXP 39
7264: PUSH
7265: LD_VAR 0 2
7269: PLUS
7270: PUSH
7271: LD_EXP 39
7275: PUSH
7276: LD_VAR 0 2
7280: PLUS
7281: PUSH
7282: LD_EXP 39
7286: PUSH
7287: LD_VAR 0 2
7291: PLUS
7292: PUSH
7293: LD_EXP 39
7297: PUSH
7298: LD_VAR 0 2
7302: PLUS
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7310: LD_ADDR_OWVAR 35
7314: PUSH
7315: LD_INT 10
7317: PUSH
7318: LD_VAR 0 2
7322: MUL
7323: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7324: LD_ADDR_OWVAR 29
7328: PUSH
7329: LD_INT 12
7331: PUSH
7332: LD_INT 10
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: ST_TO_ADDR
// result := CreateHuman ;
7339: LD_ADDR_VAR 0 1
7343: PUSH
7344: CALL_OW 44
7348: ST_TO_ADDR
// end ;
7349: LD_VAR 0 1
7353: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7354: LD_INT 0
7356: PPUSH
7357: PPUSH
7358: PPUSH
// if not ape then
7359: LD_VAR 0 1
7363: NOT
7364: IFFALSE 7368
// exit ;
7366: GO 7493
// side := GetSide ( ape ) ;
7368: LD_ADDR_VAR 0 3
7372: PUSH
7373: LD_VAR 0 1
7377: PPUSH
7378: CALL_OW 255
7382: ST_TO_ADDR
// if not side then
7383: LD_VAR 0 3
7387: NOT
7388: IFFALSE 7442
// begin for i = 1 to apemanPos do
7390: LD_ADDR_VAR 0 4
7394: PUSH
7395: DOUBLE
7396: LD_INT 1
7398: DEC
7399: ST_TO_ADDR
7400: LD_EXP 37
7404: PUSH
7405: FOR_TO
7406: IFFALSE 7440
// if ape in apemanPos [ i ] then
7408: LD_VAR 0 1
7412: PUSH
7413: LD_EXP 37
7417: PUSH
7418: LD_VAR 0 4
7422: ARRAY
7423: IN
7424: IFFALSE 7438
// begin side := i ;
7426: LD_ADDR_VAR 0 3
7430: PUSH
7431: LD_VAR 0 4
7435: ST_TO_ADDR
// break ;
7436: GO 7440
// end ;
7438: GO 7405
7440: POP
7441: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7442: LD_ADDR_EXP 37
7446: PUSH
7447: LD_EXP 37
7451: PPUSH
7452: LD_VAR 0 3
7456: PPUSH
7457: LD_EXP 37
7461: PUSH
7462: LD_VAR 0 3
7466: ARRAY
7467: PUSH
7468: LD_VAR 0 1
7472: DIFF
7473: PPUSH
7474: CALL_OW 1
7478: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7479: LD_ADDR_EXP 34
7483: PUSH
7484: LD_EXP 34
7488: PUSH
7489: LD_INT 1
7491: MINUS
7492: ST_TO_ADDR
// end ; end_of_file
7493: LD_VAR 0 2
7497: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7498: LD_INT 0
7500: PPUSH
7501: PPUSH
// for un in battle_flags_id do
7502: LD_ADDR_VAR 0 2
7506: PUSH
7507: LD_EXP 28
7511: PUSH
7512: FOR_IN
7513: IFFALSE 7588
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7515: LD_VAR 0 2
7519: PPUSH
7520: LD_INT 1
7522: PUSH
7523: LD_LOC 12
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: LD_LOC 12
7539: PUSH
7540: LD_INT 2
7542: DIV
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 3
7550: PUSH
7551: LD_LOC 12
7555: PUSH
7556: LD_INT 5
7558: DIV
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 20
7566: PUSH
7567: LD_LOC 12
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: PPUSH
7582: CALL_OW 423
7586: GO 7512
7588: POP
7589: POP
// end ;
7590: LD_VAR 0 1
7594: RET
// every 0 0$0.1 do var un ;
7595: GO 7597
7597: DISABLE
7598: LD_INT 0
7600: PPUSH
// begin if not def_morale_flags then
7601: LD_EXP 51
7605: NOT
7606: IFFALSE 7610
// exit ;
7608: GO 7687
// if not morale_decreasing_time then
7610: LD_EXP 11
7614: NOT
7615: IFFALSE 7619
// exit ;
7617: GO 7687
// strength = 100 ;
7619: LD_ADDR_LOC 12
7623: PUSH
7624: LD_INT 100
7626: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7627: LD_EXP 11
7631: PPUSH
7632: CALL_OW 67
// strength := strength - 1 ;
7636: LD_ADDR_LOC 12
7640: PUSH
7641: LD_LOC 12
7645: PUSH
7646: LD_INT 1
7648: MINUS
7649: ST_TO_ADDR
// Update_Flags ;
7650: CALL 7498 0 0
// until not strength ;
7654: LD_LOC 12
7658: NOT
7659: IFFALSE 7627
// for un in battle_flags_id do
7661: LD_ADDR_VAR 0 1
7665: PUSH
7666: LD_EXP 28
7670: PUSH
7671: FOR_IN
7672: IFFALSE 7685
// KillBattleFlag ( un ) ;
7674: LD_VAR 0 1
7678: PPUSH
7679: CALL_OW 419
7683: GO 7671
7685: POP
7686: POP
// end ; end_of_file
7687: PPOPN 1
7689: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7690: LD_INT 0
7692: PPUSH
7693: PPUSH
// if ( not IAmSpec ) then
7694: CALL_OW 531
7698: NOT
7699: IFFALSE 7715
// Result := Limits_Info ^  ;
7701: LD_ADDR_VAR 0 1
7705: PUSH
7706: LD_LOC 24
7710: PUSH
7711: LD_STRING 
7713: ADD
7714: ST_TO_ADDR
// for i := 1 to 8 do
7715: LD_ADDR_VAR 0 2
7719: PUSH
7720: DOUBLE
7721: LD_INT 1
7723: DEC
7724: ST_TO_ADDR
7725: LD_INT 8
7727: PUSH
7728: FOR_TO
7729: IFFALSE 7774
// if Cheaters [ i ] then
7731: LD_LOC 25
7735: PUSH
7736: LD_VAR 0 2
7740: ARRAY
7741: IFFALSE 7772
// Result := Result ^ [ #Cheater , i , i ] ;
7743: LD_ADDR_VAR 0 1
7747: PUSH
7748: LD_VAR 0 1
7752: PUSH
7753: LD_STRING #Cheater
7755: PUSH
7756: LD_VAR 0 2
7760: PUSH
7761: LD_VAR 0 2
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: LIST
7770: ADD
7771: ST_TO_ADDR
7772: GO 7728
7774: POP
7775: POP
// end ;
7776: LD_VAR 0 1
7780: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7781: LD_INT 0
7783: PPUSH
7784: PPUSH
7785: PPUSH
7786: PPUSH
7787: PPUSH
// case Game_Type of 10 :
7788: LD_EXP 41
7792: PUSH
7793: LD_INT 10
7795: DOUBLE
7796: EQUAL
7797: IFTRUE 7801
7799: GO 7812
7801: POP
// def_game_rules := 1 ; 11 :
7802: LD_ADDR_EXP 42
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
7810: GO 7832
7812: LD_INT 11
7814: DOUBLE
7815: EQUAL
7816: IFTRUE 7820
7818: GO 7831
7820: POP
// def_game_rules := 3 ; end ;
7821: LD_ADDR_EXP 42
7825: PUSH
7826: LD_INT 3
7828: ST_TO_ADDR
7829: GO 7832
7831: POP
// case def_game_rules of 0 :
7832: LD_EXP 42
7836: PUSH
7837: LD_INT 0
7839: DOUBLE
7840: EQUAL
7841: IFTRUE 7845
7843: GO 7850
7845: POP
// exit ; 1 :
7846: GO 9908
7848: GO 9808
7850: LD_INT 1
7852: DOUBLE
7853: EQUAL
7854: IFTRUE 7858
7856: GO 8074
7858: POP
// begin def_base_level := 2 ;
7859: LD_ADDR_EXP 43
7863: PUSH
7864: LD_INT 2
7866: ST_TO_ADDR
// def_amount_of_people := 2 ;
7867: LD_ADDR_EXP 44
7871: PUSH
7872: LD_INT 2
7874: ST_TO_ADDR
// def_skill_level := 1 ;
7875: LD_ADDR_EXP 45
7879: PUSH
7880: LD_INT 1
7882: ST_TO_ADDR
// def_starting_resources := 2 ;
7883: LD_ADDR_EXP 46
7887: PUSH
7888: LD_INT 2
7890: ST_TO_ADDR
// def_shipments_density := 1 ;
7891: LD_ADDR_EXP 47
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7899: LD_ADDR_EXP 48
7903: PUSH
7904: LD_INT 0
7906: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7907: LD_ADDR_EXP 49
7911: PUSH
7912: LD_INT 1
7914: ST_TO_ADDR
// def_shared_vision := 1 ;
7915: LD_ADDR_EXP 50
7919: PUSH
7920: LD_INT 1
7922: ST_TO_ADDR
// def_morale_flags := 3 ;
7923: LD_ADDR_EXP 51
7927: PUSH
7928: LD_INT 3
7930: ST_TO_ADDR
// def_siberite_detection := 1 ;
7931: LD_ADDR_EXP 52
7935: PUSH
7936: LD_INT 1
7938: ST_TO_ADDR
// def_people_respawning := 1 ;
7939: LD_ADDR_EXP 53
7943: PUSH
7944: LD_INT 1
7946: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7947: LD_ADDR_EXP 54
7951: PUSH
7952: LD_INT 1
7954: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7955: LD_ADDR_EXP 55
7959: PUSH
7960: LD_INT 0
7962: ST_TO_ADDR
// def_builduptime := 2 ;
7963: LD_ADDR_EXP 56
7967: PUSH
7968: LD_INT 2
7970: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
7971: LD_ADDR_VAR 0 2
7975: PUSH
7976: EMPTY
7977: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7978: LD_ADDR_VAR 0 3
7982: PUSH
7983: EMPTY
7984: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7985: LD_ADDR_LOC 19
7989: PUSH
7990: EMPTY
7991: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7992: LD_ADDR_LOC 20
7996: PUSH
7997: EMPTY
7998: ST_TO_ADDR
// Banned_Controls := [ ] ;
7999: LD_ADDR_LOC 21
8003: PUSH
8004: EMPTY
8005: ST_TO_ADDR
// Banned_Engines := [ ] ;
8006: LD_ADDR_LOC 22
8010: PUSH
8011: EMPTY
8012: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8013: LD_ADDR_LOC 17
8017: PUSH
8018: LD_INT 37
8020: PUSH
8021: EMPTY
8022: LIST
8023: PUSH
8024: LD_INT 4
8026: PUSH
8027: LD_INT 5
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: LD_INT 31
8036: PUSH
8037: LD_INT 32
8039: PUSH
8040: LD_INT 33
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8053: LD_ADDR_LOC 18
8057: PUSH
8058: LD_INT 2
8060: PUSH
8061: LD_INT 2
8063: PUSH
8064: LD_INT 4
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: ST_TO_ADDR
// end ; 2 :
8072: GO 9808
8074: LD_INT 2
8076: DOUBLE
8077: EQUAL
8078: IFTRUE 8082
8080: GO 8291
8082: POP
// begin def_base_level := 1 ;
8083: LD_ADDR_EXP 43
8087: PUSH
8088: LD_INT 1
8090: ST_TO_ADDR
// def_amount_of_people := 2 ;
8091: LD_ADDR_EXP 44
8095: PUSH
8096: LD_INT 2
8098: ST_TO_ADDR
// def_skill_level := 3 ;
8099: LD_ADDR_EXP 45
8103: PUSH
8104: LD_INT 3
8106: ST_TO_ADDR
// def_starting_resources := 3 ;
8107: LD_ADDR_EXP 46
8111: PUSH
8112: LD_INT 3
8114: ST_TO_ADDR
// def_shipments_density := 2 ;
8115: LD_ADDR_EXP 47
8119: PUSH
8120: LD_INT 2
8122: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8123: LD_ADDR_EXP 48
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8131: LD_ADDR_EXP 49
8135: PUSH
8136: LD_INT 2
8138: ST_TO_ADDR
// def_shared_vision := 1 ;
8139: LD_ADDR_EXP 50
8143: PUSH
8144: LD_INT 1
8146: ST_TO_ADDR
// def_morale_flags := 0 ;
8147: LD_ADDR_EXP 51
8151: PUSH
8152: LD_INT 0
8154: ST_TO_ADDR
// def_siberite_detection := 1 ;
8155: LD_ADDR_EXP 52
8159: PUSH
8160: LD_INT 1
8162: ST_TO_ADDR
// def_people_respawning := 0 ;
8163: LD_ADDR_EXP 53
8167: PUSH
8168: LD_INT 0
8170: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8171: LD_ADDR_EXP 54
8175: PUSH
8176: LD_INT 0
8178: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8179: LD_ADDR_EXP 55
8183: PUSH
8184: LD_INT 0
8186: ST_TO_ADDR
// def_builduptime := 2 ;
8187: LD_ADDR_EXP 56
8191: PUSH
8192: LD_INT 2
8194: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8195: LD_ADDR_VAR 0 2
8199: PUSH
8200: LD_INT 1
8202: PUSH
8203: EMPTY
8204: LIST
8205: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8206: LD_ADDR_VAR 0 3
8210: PUSH
8211: EMPTY
8212: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8213: LD_ADDR_LOC 19
8217: PUSH
8218: EMPTY
8219: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8220: LD_ADDR_LOC 20
8224: PUSH
8225: EMPTY
8226: ST_TO_ADDR
// Banned_Controls := [ ] ;
8227: LD_ADDR_LOC 21
8231: PUSH
8232: EMPTY
8233: ST_TO_ADDR
// Banned_Engines := [ ] ;
8234: LD_ADDR_LOC 22
8238: PUSH
8239: EMPTY
8240: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8241: LD_ADDR_LOC 17
8245: PUSH
8246: LD_INT 4
8248: PUSH
8249: LD_INT 5
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: LD_INT 31
8258: PUSH
8259: LD_INT 32
8261: PUSH
8262: LD_INT 33
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8274: LD_ADDR_LOC 18
8278: PUSH
8279: LD_INT 1
8281: PUSH
8282: LD_INT 2
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: ST_TO_ADDR
// end ; 3 :
8289: GO 9808
8291: LD_INT 3
8293: DOUBLE
8294: EQUAL
8295: IFTRUE 8299
8297: GO 8542
8299: POP
// begin def_base_level := 1 ;
8300: LD_ADDR_EXP 43
8304: PUSH
8305: LD_INT 1
8307: ST_TO_ADDR
// def_amount_of_people := 2 ;
8308: LD_ADDR_EXP 44
8312: PUSH
8313: LD_INT 2
8315: ST_TO_ADDR
// def_skill_level := 3 ;
8316: LD_ADDR_EXP 45
8320: PUSH
8321: LD_INT 3
8323: ST_TO_ADDR
// def_starting_resources := 3 ;
8324: LD_ADDR_EXP 46
8328: PUSH
8329: LD_INT 3
8331: ST_TO_ADDR
// def_shipments_density := 1 ;
8332: LD_ADDR_EXP 47
8336: PUSH
8337: LD_INT 1
8339: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8340: LD_ADDR_EXP 48
8344: PUSH
8345: LD_INT 0
8347: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8348: LD_ADDR_EXP 49
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// def_shared_vision := 1 ;
8356: LD_ADDR_EXP 50
8360: PUSH
8361: LD_INT 1
8363: ST_TO_ADDR
// def_morale_flags := 0 ;
8364: LD_ADDR_EXP 51
8368: PUSH
8369: LD_INT 0
8371: ST_TO_ADDR
// def_siberite_detection := 1 ;
8372: LD_ADDR_EXP 52
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// def_people_respawning := 0 ;
8380: LD_ADDR_EXP 53
8384: PUSH
8385: LD_INT 0
8387: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8388: LD_ADDR_EXP 54
8392: PUSH
8393: LD_INT 2
8395: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8396: LD_ADDR_EXP 55
8400: PUSH
8401: LD_INT 0
8403: ST_TO_ADDR
// def_builduptime := 1 ;
8404: LD_ADDR_EXP 56
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8412: LD_ADDR_VAR 0 2
8416: PUSH
8417: LD_INT 23
8419: PUSH
8420: EMPTY
8421: LIST
8422: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8423: LD_ADDR_VAR 0 3
8427: PUSH
8428: LD_INT 2
8430: PUSH
8431: LD_INT 37
8433: PUSH
8434: LD_INT 32
8436: PUSH
8437: LD_INT 33
8439: PUSH
8440: LD_INT 36
8442: PUSH
8443: LD_INT 16
8445: PUSH
8446: LD_INT 23
8448: PUSH
8449: LD_INT 21
8451: PUSH
8452: LD_INT 18
8454: PUSH
8455: LD_INT 22
8457: PUSH
8458: LD_INT 20
8460: PUSH
8461: LD_INT 19
8463: PUSH
8464: LD_INT 25
8466: PUSH
8467: LD_INT 17
8469: PUSH
8470: LD_INT 24
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8490: LD_ADDR_LOC 19
8494: PUSH
8495: EMPTY
8496: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8497: LD_ADDR_LOC 20
8501: PUSH
8502: EMPTY
8503: ST_TO_ADDR
// Banned_Controls := [ ] ;
8504: LD_ADDR_LOC 21
8508: PUSH
8509: EMPTY
8510: ST_TO_ADDR
// Banned_Engines := [ ] ;
8511: LD_ADDR_LOC 22
8515: PUSH
8516: EMPTY
8517: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8518: LD_ADDR_LOC 17
8522: PUSH
8523: EMPTY
8524: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8525: LD_ADDR_LOC 18
8529: PUSH
8530: EMPTY
8531: ST_TO_ADDR
// No_Mechs := true ;
8532: LD_ADDR_EXP 57
8536: PUSH
8537: LD_INT 1
8539: ST_TO_ADDR
// end ; 4 :
8540: GO 9808
8542: LD_INT 4
8544: DOUBLE
8545: EQUAL
8546: IFTRUE 8550
8548: GO 8725
8550: POP
// begin def_base_level := 1 ;
8551: LD_ADDR_EXP 43
8555: PUSH
8556: LD_INT 1
8558: ST_TO_ADDR
// def_amount_of_people := 2 ;
8559: LD_ADDR_EXP 44
8563: PUSH
8564: LD_INT 2
8566: ST_TO_ADDR
// def_skill_level := 3 ;
8567: LD_ADDR_EXP 45
8571: PUSH
8572: LD_INT 3
8574: ST_TO_ADDR
// def_starting_resources := 3 ;
8575: LD_ADDR_EXP 46
8579: PUSH
8580: LD_INT 3
8582: ST_TO_ADDR
// def_shipments_density := 2 ;
8583: LD_ADDR_EXP 47
8587: PUSH
8588: LD_INT 2
8590: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8591: LD_ADDR_EXP 48
8595: PUSH
8596: LD_INT 1
8598: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8599: LD_ADDR_EXP 49
8603: PUSH
8604: LD_INT 2
8606: ST_TO_ADDR
// def_shared_vision := 1 ;
8607: LD_ADDR_EXP 50
8611: PUSH
8612: LD_INT 1
8614: ST_TO_ADDR
// def_morale_flags := 0 ;
8615: LD_ADDR_EXP 51
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// def_siberite_detection := 1 ;
8623: LD_ADDR_EXP 52
8627: PUSH
8628: LD_INT 1
8630: ST_TO_ADDR
// def_people_respawning := 0 ;
8631: LD_ADDR_EXP 53
8635: PUSH
8636: LD_INT 0
8638: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8639: LD_ADDR_EXP 54
8643: PUSH
8644: LD_INT 0
8646: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8647: LD_ADDR_EXP 55
8651: PUSH
8652: LD_INT 1
8654: ST_TO_ADDR
// def_builduptime := 3 ;
8655: LD_ADDR_EXP 56
8659: PUSH
8660: LD_INT 3
8662: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8663: LD_ADDR_VAR 0 2
8667: PUSH
8668: LD_INT 1
8670: PUSH
8671: EMPTY
8672: LIST
8673: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8674: LD_ADDR_VAR 0 3
8678: PUSH
8679: EMPTY
8680: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8681: LD_ADDR_LOC 19
8685: PUSH
8686: EMPTY
8687: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8688: LD_ADDR_LOC 20
8692: PUSH
8693: EMPTY
8694: ST_TO_ADDR
// Banned_Controls := [ ] ;
8695: LD_ADDR_LOC 21
8699: PUSH
8700: EMPTY
8701: ST_TO_ADDR
// Banned_Engines := [ ] ;
8702: LD_ADDR_LOC 22
8706: PUSH
8707: EMPTY
8708: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8709: LD_ADDR_LOC 17
8713: PUSH
8714: EMPTY
8715: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8716: LD_ADDR_LOC 18
8720: PUSH
8721: EMPTY
8722: ST_TO_ADDR
// end ; 5 :
8723: GO 9808
8725: LD_INT 5
8727: DOUBLE
8728: EQUAL
8729: IFTRUE 8733
8731: GO 8982
8733: POP
// begin def_base_level := 0 ;
8734: LD_ADDR_EXP 43
8738: PUSH
8739: LD_INT 0
8741: ST_TO_ADDR
// def_amount_of_people := 0 ;
8742: LD_ADDR_EXP 44
8746: PUSH
8747: LD_INT 0
8749: ST_TO_ADDR
// def_skill_level := 0 ;
8750: LD_ADDR_EXP 45
8754: PUSH
8755: LD_INT 0
8757: ST_TO_ADDR
// def_starting_resources := 0 ;
8758: LD_ADDR_EXP 46
8762: PUSH
8763: LD_INT 0
8765: ST_TO_ADDR
// def_shipments_density := 0 ;
8766: LD_ADDR_EXP 47
8770: PUSH
8771: LD_INT 0
8773: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8774: LD_ADDR_EXP 48
8778: PUSH
8779: LD_INT 0
8781: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8782: LD_ADDR_EXP 49
8786: PUSH
8787: LD_INT 0
8789: ST_TO_ADDR
// def_shared_vision := 1 ;
8790: LD_ADDR_EXP 50
8794: PUSH
8795: LD_INT 1
8797: ST_TO_ADDR
// def_morale_flags := 0 ;
8798: LD_ADDR_EXP 51
8802: PUSH
8803: LD_INT 0
8805: ST_TO_ADDR
// def_siberite_detection := 0 ;
8806: LD_ADDR_EXP 52
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// def_people_respawning := 1 ;
8814: LD_ADDR_EXP 53
8818: PUSH
8819: LD_INT 1
8821: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8822: LD_ADDR_EXP 54
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8830: LD_ADDR_EXP 55
8834: PUSH
8835: LD_INT 0
8837: ST_TO_ADDR
// def_builduptime := 0 ;
8838: LD_ADDR_EXP 56
8842: PUSH
8843: LD_INT 0
8845: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8846: LD_ADDR_VAR 0 2
8850: PUSH
8851: LD_INT 10
8853: PUSH
8854: LD_INT 3
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8861: LD_ADDR_VAR 0 3
8865: PUSH
8866: LD_INT 12
8868: PUSH
8869: LD_INT 11
8871: PUSH
8872: LD_INT 14
8874: PUSH
8875: LD_INT 13
8877: PUSH
8878: LD_INT 5
8880: PUSH
8881: LD_INT 24
8883: PUSH
8884: LD_INT 21
8886: PUSH
8887: LD_INT 33
8889: PUSH
8890: LD_INT 36
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8904: LD_ADDR_LOC 19
8908: PUSH
8909: LD_INT 31
8911: PUSH
8912: EMPTY
8913: LIST
8914: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8915: LD_ADDR_LOC 20
8919: PUSH
8920: EMPTY
8921: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8922: LD_ADDR_LOC 21
8926: PUSH
8927: LD_INT 2
8929: PUSH
8930: EMPTY
8931: LIST
8932: ST_TO_ADDR
// Banned_Engines := [ ] ;
8933: LD_ADDR_LOC 22
8937: PUSH
8938: EMPTY
8939: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8940: LD_ADDR_LOC 17
8944: PUSH
8945: LD_INT 4
8947: PUSH
8948: EMPTY
8949: LIST
8950: PUSH
8951: LD_INT 31
8953: PUSH
8954: LD_INT 32
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
8965: LD_ADDR_LOC 18
8969: PUSH
8970: LD_INT 1
8972: PUSH
8973: LD_INT 1
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: ST_TO_ADDR
// end ; 6 :
8980: GO 9808
8982: LD_INT 6
8984: DOUBLE
8985: EQUAL
8986: IFTRUE 8990
8988: GO 9193
8990: POP
// begin def_base_level := 1 ;
8991: LD_ADDR_EXP 43
8995: PUSH
8996: LD_INT 1
8998: ST_TO_ADDR
// def_amount_of_people := 2 ;
8999: LD_ADDR_EXP 44
9003: PUSH
9004: LD_INT 2
9006: ST_TO_ADDR
// def_skill_level := 3 ;
9007: LD_ADDR_EXP 45
9011: PUSH
9012: LD_INT 3
9014: ST_TO_ADDR
// def_starting_resources := 3 ;
9015: LD_ADDR_EXP 46
9019: PUSH
9020: LD_INT 3
9022: ST_TO_ADDR
// def_shipments_density := 1 ;
9023: LD_ADDR_EXP 47
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9031: LD_ADDR_EXP 48
9035: PUSH
9036: LD_INT 0
9038: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9039: LD_ADDR_EXP 49
9043: PUSH
9044: LD_INT 1
9046: ST_TO_ADDR
// def_shared_vision := 1 ;
9047: LD_ADDR_EXP 50
9051: PUSH
9052: LD_INT 1
9054: ST_TO_ADDR
// def_morale_flags := 0 ;
9055: LD_ADDR_EXP 51
9059: PUSH
9060: LD_INT 0
9062: ST_TO_ADDR
// def_siberite_detection := 1 ;
9063: LD_ADDR_EXP 52
9067: PUSH
9068: LD_INT 1
9070: ST_TO_ADDR
// def_people_respawning := 2 ;
9071: LD_ADDR_EXP 53
9075: PUSH
9076: LD_INT 2
9078: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9079: LD_ADDR_EXP 54
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9087: LD_ADDR_EXP 55
9091: PUSH
9092: LD_INT 0
9094: ST_TO_ADDR
// def_builduptime := 1 ;
9095: LD_ADDR_EXP 56
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9103: LD_ADDR_VAR 0 2
9107: PUSH
9108: LD_INT 23
9110: PUSH
9111: EMPTY
9112: LIST
9113: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9114: LD_ADDR_VAR 0 3
9118: PUSH
9119: LD_INT 2
9121: PUSH
9122: LD_INT 37
9124: PUSH
9125: LD_INT 31
9127: PUSH
9128: LD_INT 32
9130: PUSH
9131: LD_INT 33
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9141: LD_ADDR_LOC 19
9145: PUSH
9146: EMPTY
9147: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9148: LD_ADDR_LOC 20
9152: PUSH
9153: EMPTY
9154: ST_TO_ADDR
// Banned_Controls := [ ] ;
9155: LD_ADDR_LOC 21
9159: PUSH
9160: EMPTY
9161: ST_TO_ADDR
// Banned_Engines := [ ] ;
9162: LD_ADDR_LOC 22
9166: PUSH
9167: EMPTY
9168: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9169: LD_ADDR_LOC 17
9173: PUSH
9174: EMPTY
9175: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9176: LD_ADDR_LOC 18
9180: PUSH
9181: EMPTY
9182: ST_TO_ADDR
// No_Mechs := true ;
9183: LD_ADDR_EXP 57
9187: PUSH
9188: LD_INT 1
9190: ST_TO_ADDR
// end ; 7 :
9191: GO 9808
9193: LD_INT 7
9195: DOUBLE
9196: EQUAL
9197: IFTRUE 9201
9199: GO 9399
9201: POP
// begin def_base_level := 1 ;
9202: LD_ADDR_EXP 43
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// def_amount_of_people := 2 ;
9210: LD_ADDR_EXP 44
9214: PUSH
9215: LD_INT 2
9217: ST_TO_ADDR
// def_skill_level := 3 ;
9218: LD_ADDR_EXP 45
9222: PUSH
9223: LD_INT 3
9225: ST_TO_ADDR
// def_starting_resources := 3 ;
9226: LD_ADDR_EXP 46
9230: PUSH
9231: LD_INT 3
9233: ST_TO_ADDR
// def_shipments_density := 1 ;
9234: LD_ADDR_EXP 47
9238: PUSH
9239: LD_INT 1
9241: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9242: LD_ADDR_EXP 48
9246: PUSH
9247: LD_INT 1
9249: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9250: LD_ADDR_EXP 49
9254: PUSH
9255: LD_INT 2
9257: ST_TO_ADDR
// def_shared_vision := 1 ;
9258: LD_ADDR_EXP 50
9262: PUSH
9263: LD_INT 1
9265: ST_TO_ADDR
// def_morale_flags := 0 ;
9266: LD_ADDR_EXP 51
9270: PUSH
9271: LD_INT 0
9273: ST_TO_ADDR
// def_siberite_detection := 1 ;
9274: LD_ADDR_EXP 52
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// def_people_respawning := 0 ;
9282: LD_ADDR_EXP 53
9286: PUSH
9287: LD_INT 0
9289: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9290: LD_ADDR_EXP 54
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9298: LD_ADDR_EXP 55
9302: PUSH
9303: LD_INT 0
9305: ST_TO_ADDR
// def_builduptime := 3 ;
9306: LD_ADDR_EXP 56
9310: PUSH
9311: LD_INT 3
9313: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9314: LD_ADDR_VAR 0 2
9318: PUSH
9319: LD_INT 23
9321: PUSH
9322: EMPTY
9323: LIST
9324: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9325: LD_ADDR_VAR 0 3
9329: PUSH
9330: LD_INT 37
9332: PUSH
9333: EMPTY
9334: LIST
9335: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9336: LD_ADDR_LOC 19
9340: PUSH
9341: EMPTY
9342: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9343: LD_ADDR_LOC 20
9347: PUSH
9348: EMPTY
9349: ST_TO_ADDR
// Banned_Controls := [ ] ;
9350: LD_ADDR_LOC 21
9354: PUSH
9355: EMPTY
9356: ST_TO_ADDR
// Banned_Engines := [ ] ;
9357: LD_ADDR_LOC 22
9361: PUSH
9362: EMPTY
9363: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9364: LD_ADDR_LOC 17
9368: PUSH
9369: LD_INT 31
9371: PUSH
9372: LD_INT 32
9374: PUSH
9375: LD_INT 33
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: LIST
9382: PUSH
9383: EMPTY
9384: LIST
9385: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9386: LD_ADDR_LOC 18
9390: PUSH
9391: LD_INT 10
9393: PUSH
9394: EMPTY
9395: LIST
9396: ST_TO_ADDR
// end ; 8 :
9397: GO 9808
9399: LD_INT 8
9401: DOUBLE
9402: EQUAL
9403: IFTRUE 9407
9405: GO 9807
9407: POP
// begin def_base_level := 0 ;
9408: LD_ADDR_EXP 43
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9416: LD_ADDR_EXP 44
9420: PUSH
9421: LD_INT 0
9423: PPUSH
9424: LD_INT 1
9426: PPUSH
9427: CALL_OW 12
9431: ST_TO_ADDR
// def_skill_level := 0 ;
9432: LD_ADDR_EXP 45
9436: PUSH
9437: LD_INT 0
9439: ST_TO_ADDR
// def_starting_resources := 2 ;
9440: LD_ADDR_EXP 46
9444: PUSH
9445: LD_INT 2
9447: ST_TO_ADDR
// def_shipments_density := 1 ;
9448: LD_ADDR_EXP 47
9452: PUSH
9453: LD_INT 1
9455: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9456: LD_ADDR_EXP 48
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9464: LD_ADDR_EXP 49
9468: PUSH
9469: LD_INT 0
9471: ST_TO_ADDR
// def_shared_vision := 1 ;
9472: LD_ADDR_EXP 50
9476: PUSH
9477: LD_INT 1
9479: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9480: LD_ADDR_EXP 51
9484: PUSH
9485: LD_INT 0
9487: PPUSH
9488: LD_INT 2
9490: PPUSH
9491: CALL_OW 12
9495: ST_TO_ADDR
// def_siberite_detection := 0 ;
9496: LD_ADDR_EXP 52
9500: PUSH
9501: LD_INT 0
9503: ST_TO_ADDR
// def_people_respawning := 0 ;
9504: LD_ADDR_EXP 53
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9512: LD_ADDR_EXP 54
9516: PUSH
9517: LD_INT 2
9519: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9520: LD_ADDR_EXP 55
9524: PUSH
9525: LD_INT 0
9527: ST_TO_ADDR
// def_builduptime := 0 ;
9528: LD_ADDR_EXP 56
9532: PUSH
9533: LD_INT 0
9535: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9536: LD_ADDR_VAR 0 2
9540: PUSH
9541: LD_INT 23
9543: PUSH
9544: LD_INT 20
9546: PUSH
9547: LD_INT 40
9549: PUSH
9550: LD_INT 47
9552: PUSH
9553: LD_INT 46
9555: PUSH
9556: LD_INT 39
9558: PUSH
9559: LD_INT 71
9561: PUSH
9562: LD_INT 34
9564: PUSH
9565: LD_INT 41
9567: PUSH
9568: LD_INT 44
9570: PUSH
9571: LD_INT 17
9573: PUSH
9574: LD_INT 16
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9591: LD_ADDR_VAR 0 3
9595: PUSH
9596: LD_INT 37
9598: PUSH
9599: LD_INT 5
9601: PUSH
9602: LD_INT 13
9604: PUSH
9605: LD_INT 34
9607: PUSH
9608: LD_INT 12
9610: PUSH
9611: LD_INT 15
9613: PUSH
9614: LD_INT 11
9616: PUSH
9617: LD_INT 14
9619: PUSH
9620: LD_INT 29
9622: PUSH
9623: LD_INT 30
9625: PUSH
9626: LD_INT 28
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 25
9634: PUSH
9635: LD_INT 20
9637: PUSH
9638: LD_INT 21
9640: PUSH
9641: LD_INT 22
9643: PUSH
9644: LD_INT 36
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9666: LD_ADDR_LOC 19
9670: PUSH
9671: EMPTY
9672: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9673: LD_ADDR_LOC 20
9677: PUSH
9678: LD_INT 14
9680: PUSH
9681: EMPTY
9682: LIST
9683: ST_TO_ADDR
// Banned_Controls := [ ] ;
9684: LD_ADDR_LOC 21
9688: PUSH
9689: EMPTY
9690: ST_TO_ADDR
// Banned_Engines := [ ] ;
9691: LD_ADDR_LOC 22
9695: PUSH
9696: EMPTY
9697: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9698: LD_ADDR_LOC 17
9702: PUSH
9703: LD_INT 31
9705: PUSH
9706: LD_INT 32
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 4
9715: PUSH
9716: EMPTY
9717: LIST
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9723: LD_ADDR_LOC 18
9727: PUSH
9728: LD_INT 2
9730: PUSH
9731: LD_INT 1
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: ST_TO_ADDR
// for i := 1 to 8 do
9738: LD_ADDR_VAR 0 4
9742: PUSH
9743: DOUBLE
9744: LD_INT 1
9746: DEC
9747: ST_TO_ADDR
9748: LD_INT 8
9750: PUSH
9751: FOR_TO
9752: IFFALSE 9803
// if ( Side_Nations [ i ] = 3 ) then
9754: LD_EXP 22
9758: PUSH
9759: LD_VAR 0 4
9763: ARRAY
9764: PUSH
9765: LD_INT 3
9767: EQUAL
9768: IFFALSE 9801
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9770: LD_ADDR_EXP 22
9774: PUSH
9775: LD_EXP 22
9779: PPUSH
9780: LD_VAR 0 4
9784: PPUSH
9785: LD_INT 1
9787: PPUSH
9788: LD_INT 2
9790: PPUSH
9791: CALL_OW 12
9795: PPUSH
9796: CALL_OW 1
9800: ST_TO_ADDR
9801: GO 9751
9803: POP
9804: POP
// end ; end ;
9805: GO 9808
9807: POP
// for i := 1 to 8 do
9808: LD_ADDR_VAR 0 4
9812: PUSH
9813: DOUBLE
9814: LD_INT 1
9816: DEC
9817: ST_TO_ADDR
9818: LD_INT 8
9820: PUSH
9821: FOR_TO
9822: IFFALSE 9906
// if Side_Positions [ i ] then
9824: LD_EXP 21
9828: PUSH
9829: LD_VAR 0 4
9833: ARRAY
9834: IFFALSE 9904
// begin for j in Unavailable_Techs do
9836: LD_ADDR_VAR 0 5
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: FOR_IN
9847: IFFALSE 9868
// SetTech ( j , i , 0 ) ;
9849: LD_VAR 0 5
9853: PPUSH
9854: LD_VAR 0 4
9858: PPUSH
9859: LD_INT 0
9861: PPUSH
9862: CALL_OW 322
9866: GO 9846
9868: POP
9869: POP
// for j in Unavailable_Builds do
9870: LD_ADDR_VAR 0 5
9874: PUSH
9875: LD_VAR 0 3
9879: PUSH
9880: FOR_IN
9881: IFFALSE 9902
// SetRestrict ( j , i , 0 ) ;
9883: LD_VAR 0 5
9887: PPUSH
9888: LD_VAR 0 4
9892: PPUSH
9893: LD_INT 0
9895: PPUSH
9896: CALL_OW 324
9900: GO 9880
9902: POP
9903: POP
// end ;
9904: GO 9821
9906: POP
9907: POP
// end ;
9908: LD_VAR 0 1
9912: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9913: LD_INT 0
9915: PPUSH
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
// for i := 1 to Restricted_Builds do
9922: LD_ADDR_VAR 0 2
9926: PUSH
9927: DOUBLE
9928: LD_INT 1
9930: DEC
9931: ST_TO_ADDR
9932: LD_LOC 17
9936: PUSH
9937: FOR_TO
9938: IFFALSE 10248
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9940: LD_LOC 17
9944: PUSH
9945: LD_VAR 0 2
9949: ARRAY
9950: PUSH
9951: LD_INT 1
9953: ARRAY
9954: PUSH
9955: LD_INT 31
9957: DOUBLE
9958: EQUAL
9959: IFTRUE 9975
9961: LD_INT 32
9963: DOUBLE
9964: EQUAL
9965: IFTRUE 9975
9967: LD_INT 33
9969: DOUBLE
9970: EQUAL
9971: IFTRUE 9975
9973: GO 9986
9975: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
9976: LD_ADDR_VAR 0 6
9980: PUSH
9981: LD_STRING #Turrets
9983: ST_TO_ADDR
9984: GO 10031
9986: LD_INT 4
9988: DOUBLE
9989: EQUAL
9990: IFTRUE 10000
9992: LD_INT 5
9994: DOUBLE
9995: EQUAL
9996: IFTRUE 10000
9998: GO 10011
10000: POP
// btype := #Armouries ; b_Behemoth :
10001: LD_ADDR_VAR 0 6
10005: PUSH
10006: LD_STRING #Armouries
10008: ST_TO_ADDR
10009: GO 10031
10011: LD_INT 37
10013: DOUBLE
10014: EQUAL
10015: IFTRUE 10019
10017: GO 10030
10019: POP
// btype := #Behemoths ; end ;
10020: LD_ADDR_VAR 0 6
10024: PUSH
10025: LD_STRING #Behemoths
10027: ST_TO_ADDR
10028: GO 10031
10030: POP
// list := [ ] ;
10031: LD_ADDR_VAR 0 7
10035: PUSH
10036: EMPTY
10037: ST_TO_ADDR
// for j := 1 to 8 do
10038: LD_ADDR_VAR 0 3
10042: PUSH
10043: DOUBLE
10044: LD_INT 1
10046: DEC
10047: ST_TO_ADDR
10048: LD_INT 8
10050: PUSH
10051: FOR_TO
10052: IFFALSE 10145
// if Side_Positions [ j ] then
10054: LD_EXP 21
10058: PUSH
10059: LD_VAR 0 3
10063: ARRAY
10064: IFFALSE 10143
// begin amount := 0 ;
10066: LD_ADDR_VAR 0 5
10070: PUSH
10071: LD_INT 0
10073: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10074: LD_ADDR_VAR 0 4
10078: PUSH
10079: LD_LOC 17
10083: PUSH
10084: LD_VAR 0 2
10088: ARRAY
10089: PUSH
10090: FOR_IN
10091: IFFALSE 10139
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10093: LD_ADDR_VAR 0 5
10097: PUSH
10098: LD_VAR 0 5
10102: PUSH
10103: LD_INT 22
10105: PUSH
10106: LD_VAR 0 3
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 30
10117: PUSH
10118: LD_VAR 0 4
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PPUSH
10131: CALL_OW 69
10135: PLUS
10136: ST_TO_ADDR
10137: GO 10090
10139: POP
10140: POP
// break ;
10141: GO 10145
// end ;
10143: GO 10051
10145: POP
10146: POP
// list := [ ] ;
10147: LD_ADDR_VAR 0 7
10151: PUSH
10152: EMPTY
10153: ST_TO_ADDR
// for j := 1 to 8 do
10154: LD_ADDR_VAR 0 3
10158: PUSH
10159: DOUBLE
10160: LD_INT 1
10162: DEC
10163: ST_TO_ADDR
10164: LD_INT 8
10166: PUSH
10167: FOR_TO
10168: IFFALSE 10188
// list := list ^ amount ;
10170: LD_ADDR_VAR 0 7
10174: PUSH
10175: LD_VAR 0 7
10179: PUSH
10180: LD_VAR 0 5
10184: ADD
10185: ST_TO_ADDR
10186: GO 10167
10188: POP
10189: POP
// Already_Built := Already_Built ^ [ list ] ;
10190: LD_ADDR_LOC 23
10194: PUSH
10195: LD_LOC 23
10199: PUSH
10200: LD_VAR 0 7
10204: PUSH
10205: EMPTY
10206: LIST
10207: ADD
10208: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10209: LD_ADDR_LOC 24
10213: PUSH
10214: LD_LOC 24
10218: PUSH
10219: LD_VAR 0 6
10223: PUSH
10224: LD_VAR 0 5
10228: PUSH
10229: LD_LOC 18
10233: PUSH
10234: LD_VAR 0 2
10238: ARRAY
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: ADD
10245: ST_TO_ADDR
// end ;
10246: GO 9937
10248: POP
10249: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10250: LD_ADDR_LOC 25
10254: PUSH
10255: LD_INT 0
10257: PUSH
10258: LD_INT 0
10260: PUSH
10261: LD_INT 0
10263: PUSH
10264: LD_INT 0
10266: PUSH
10267: LD_INT 0
10269: PUSH
10270: LD_INT 0
10272: PUSH
10273: LD_INT 0
10275: PUSH
10276: LD_INT 0
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: ST_TO_ADDR
// if Limits_Info then
10289: LD_LOC 24
10293: IFFALSE 10309
// Limits_Info := #Limits ^ Limits_Info ;
10295: LD_ADDR_LOC 24
10299: PUSH
10300: LD_STRING #Limits
10302: PUSH
10303: LD_LOC 24
10307: ADD
10308: ST_TO_ADDR
// end ;
10309: LD_VAR 0 1
10313: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10314: LD_INT 0
10316: PPUSH
10317: PPUSH
10318: PPUSH
10319: PPUSH
// for i := 1 to Restricted_Builds do
10320: LD_ADDR_VAR 0 7
10324: PUSH
10325: DOUBLE
10326: LD_INT 1
10328: DEC
10329: ST_TO_ADDR
10330: LD_LOC 17
10334: PUSH
10335: FOR_TO
10336: IFFALSE 10759
// if BType in Restricted_Builds [ i ] then
10338: LD_VAR 0 2
10342: PUSH
10343: LD_LOC 17
10347: PUSH
10348: LD_VAR 0 7
10352: ARRAY
10353: IN
10354: IFFALSE 10757
// begin if old_side then
10356: LD_VAR 0 4
10360: IFFALSE 10486
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10362: LD_LOC 23
10366: PUSH
10367: LD_VAR 0 7
10371: ARRAY
10372: PUSH
10373: LD_VAR 0 3
10377: ARRAY
10378: PUSH
10379: LD_VAR 0 5
10383: PLUS
10384: PUSH
10385: LD_LOC 18
10389: PUSH
10390: LD_VAR 0 7
10394: ARRAY
10395: GREATER
10396: IFFALSE 10422
// begin SetSide ( un , old_side ) ;
10398: LD_VAR 0 1
10402: PPUSH
10403: LD_VAR 0 4
10407: PPUSH
10408: CALL_OW 235
// count := 0 ;
10412: LD_ADDR_VAR 0 5
10416: PUSH
10417: LD_INT 0
10419: ST_TO_ADDR
// end else
10420: GO 10486
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10422: LD_ADDR_LOC 23
10426: PUSH
10427: LD_LOC 23
10431: PPUSH
10432: LD_VAR 0 7
10436: PPUSH
10437: LD_LOC 23
10441: PUSH
10442: LD_VAR 0 7
10446: ARRAY
10447: PPUSH
10448: LD_VAR 0 4
10452: PPUSH
10453: LD_LOC 23
10457: PUSH
10458: LD_VAR 0 7
10462: ARRAY
10463: PUSH
10464: LD_VAR 0 4
10468: ARRAY
10469: PUSH
10470: LD_VAR 0 5
10474: MINUS
10475: PPUSH
10476: CALL_OW 1
10480: PPUSH
10481: CALL_OW 1
10485: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10486: LD_ADDR_LOC 23
10490: PUSH
10491: LD_LOC 23
10495: PPUSH
10496: LD_VAR 0 7
10500: PPUSH
10501: LD_LOC 23
10505: PUSH
10506: LD_VAR 0 7
10510: ARRAY
10511: PPUSH
10512: LD_VAR 0 3
10516: PPUSH
10517: LD_LOC 23
10521: PUSH
10522: LD_VAR 0 7
10526: ARRAY
10527: PUSH
10528: LD_VAR 0 3
10532: ARRAY
10533: PUSH
10534: LD_VAR 0 5
10538: PLUS
10539: PPUSH
10540: CALL_OW 1
10544: PPUSH
10545: CALL_OW 1
10549: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10550: LD_VAR 0 5
10554: PUSH
10555: LD_INT 0
10557: NONEQUAL
10558: PUSH
10559: LD_VAR 0 3
10563: PUSH
10564: LD_OWVAR 2
10568: EQUAL
10569: AND
10570: IFFALSE 10613
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10572: LD_ADDR_LOC 24
10576: PUSH
10577: LD_LOC 24
10581: PPUSH
10582: LD_INT 3
10584: PUSH
10585: LD_VAR 0 7
10589: MUL
10590: PPUSH
10591: LD_LOC 23
10595: PUSH
10596: LD_VAR 0 7
10600: ARRAY
10601: PUSH
10602: LD_VAR 0 3
10606: ARRAY
10607: PPUSH
10608: CALL_OW 1
10612: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10613: LD_LOC 23
10617: PUSH
10618: LD_VAR 0 7
10622: ARRAY
10623: PUSH
10624: LD_VAR 0 3
10628: ARRAY
10629: PUSH
10630: LD_LOC 18
10634: PUSH
10635: LD_VAR 0 7
10639: ARRAY
10640: GREATER
10641: IFFALSE 10668
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10643: LD_ADDR_LOC 25
10647: PUSH
10648: LD_LOC 25
10652: PPUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: LD_INT 1
10660: PPUSH
10661: CALL_OW 1
10665: ST_TO_ADDR
// end else
10666: GO 10755
// begin for j := 1 to Restricted_Builds do
10668: LD_ADDR_VAR 0 8
10672: PUSH
10673: DOUBLE
10674: LD_INT 1
10676: DEC
10677: ST_TO_ADDR
10678: LD_LOC 17
10682: PUSH
10683: FOR_TO
10684: IFFALSE 10728
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10686: LD_LOC 23
10690: PUSH
10691: LD_VAR 0 8
10695: ARRAY
10696: PUSH
10697: LD_VAR 0 3
10701: ARRAY
10702: PUSH
10703: LD_LOC 18
10707: PUSH
10708: LD_VAR 0 8
10712: ARRAY
10713: GREATER
10714: IFFALSE 10726
// begin Is_Cheater := true ;
10716: LD_ADDR_VAR 0 9
10720: PUSH
10721: LD_INT 1
10723: ST_TO_ADDR
// break ;
10724: GO 10728
// end ;
10726: GO 10683
10728: POP
10729: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10730: LD_ADDR_LOC 25
10734: PUSH
10735: LD_LOC 25
10739: PPUSH
10740: LD_VAR 0 3
10744: PPUSH
10745: LD_VAR 0 9
10749: PPUSH
10750: CALL_OW 1
10754: ST_TO_ADDR
// end ; break ;
10755: GO 10759
// end ;
10757: GO 10335
10759: POP
10760: POP
// end ;
10761: LD_VAR 0 6
10765: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10766: LD_VAR 0 5
10770: PUSH
10771: LD_LOC 19
10775: IN
10776: PUSH
10777: LD_VAR 0 2
10781: PUSH
10782: LD_LOC 20
10786: IN
10787: OR
10788: PUSH
10789: LD_VAR 0 4
10793: PUSH
10794: LD_LOC 21
10798: IN
10799: OR
10800: PUSH
10801: LD_VAR 0 3
10805: PUSH
10806: LD_LOC 22
10810: IN
10811: OR
10812: IFFALSE 10823
// ComCancel ( factory ) ;
10814: LD_VAR 0 1
10818: PPUSH
10819: CALL_OW 127
// end ;
10823: PPOPN 5
10825: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10826: LD_VAR 0 2
10830: PUSH
10831: LD_LOC 19
10835: IN
10836: IFFALSE 10847
// ComCancel ( building ) ;
10838: LD_VAR 0 1
10842: PPUSH
10843: CALL_OW 127
// end ; end_of_file
10847: PPOPN 2
10849: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
10850: LD_INT 0
10852: PPUSH
10853: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10854: LD_ADDR_VAR 0 2
10858: PUSH
10859: LD_STRING #Multi1x1-Time
10861: PUSH
10862: LD_OWVAR 1
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: ST_TO_ADDR
// if WaitServerStrings then
10871: LD_EXP 59
10875: IFFALSE 10893
// AllStrings = AllStrings ^ WaitServerStrings ;
10877: LD_ADDR_VAR 0 2
10881: PUSH
10882: LD_VAR 0 2
10886: PUSH
10887: LD_EXP 59
10891: ADD
10892: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10893: LD_INT 0
10895: PUSH
10896: LD_EXP 16
10900: PUSH
10901: LD_OWVAR 1
10905: MINUS
10906: LESSEQUAL
10907: IFFALSE 10938
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10909: LD_ADDR_VAR 0 2
10913: PUSH
10914: LD_VAR 0 2
10918: PUSH
10919: LD_STRING #allowedsibbomb
10921: PUSH
10922: LD_EXP 16
10926: PUSH
10927: LD_OWVAR 1
10931: MINUS
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: ADD
10937: ST_TO_ADDR
// if ( ExtraStrings ) then
10938: LD_EXP 58
10942: IFFALSE 10964
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10944: LD_ADDR_VAR 0 2
10948: PUSH
10949: LD_VAR 0 2
10953: PUSH
10954: LD_STRING 
10956: ADD
10957: PUSH
10958: LD_EXP 58
10962: ADD
10963: ST_TO_ADDR
// if ( Display_kings ) and not isSGUI then
10964: LD_EXP 60
10968: PUSH
10969: LD_OWVAR 83
10973: NOT
10974: AND
10975: IFFALSE 10993
// AllStrings = AllStrings ^ Display_kings ;
10977: LD_ADDR_VAR 0 2
10981: PUSH
10982: LD_VAR 0 2
10986: PUSH
10987: LD_EXP 60
10991: ADD
10992: ST_TO_ADDR
// if ( LimitsStrings ) then
10993: CALL 7690 0 0
10997: IFFALSE 11019
// AllStrings := AllStrings ^  ^ LimitsStrings ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_VAR 0 2
11008: PUSH
11009: LD_STRING 
11011: ADD
11012: PUSH
11013: CALL 7690 0 0
11017: ADD
11018: ST_TO_ADDR
// Display_Strings := AllStrings ;
11019: LD_ADDR_OWVAR 47
11023: PUSH
11024: LD_VAR 0 2
11028: ST_TO_ADDR
// end ;
11029: LD_VAR 0 1
11033: RET
// every 0 0$1 do
11034: GO 11036
11036: DISABLE
// begin ShowTimer ;
11037: CALL 10850 0 0
// enable ;
11041: ENABLE
// end ; end_of_file
11042: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
11043: LD_INT 0
11045: PPUSH
11046: PPUSH
11047: PPUSH
// sharedPoints1 = [ ] ;
11048: LD_ADDR_LOC 26
11052: PUSH
11053: EMPTY
11054: ST_TO_ADDR
// sharedPoints2 = [ ] ;
11055: LD_ADDR_LOC 27
11059: PUSH
11060: EMPTY
11061: ST_TO_ADDR
// sharedPoints3 = [ ] ;
11062: LD_ADDR_LOC 28
11066: PUSH
11067: EMPTY
11068: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
11069: LD_ADDR_VAR 0 2
11073: PUSH
11074: DOUBLE
11075: LD_INT 1
11077: DEC
11078: ST_TO_ADDR
11079: LD_EXP 21
11083: PUSH
11084: LD_INT 0
11086: PLUS
11087: PUSH
11088: FOR_TO
11089: IFFALSE 11191
// begin if not Side_Positions [ i ] = 0 then
11091: LD_EXP 21
11095: PUSH
11096: LD_VAR 0 2
11100: ARRAY
11101: PUSH
11102: LD_INT 0
11104: EQUAL
11105: NOT
11106: IFFALSE 11120
// SetMultiScore ( i , 0 ) ;
11108: LD_VAR 0 2
11112: PPUSH
11113: LD_INT 0
11115: PPUSH
11116: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
11120: LD_ADDR_LOC 26
11124: PUSH
11125: LD_LOC 26
11129: PPUSH
11130: LD_VAR 0 2
11134: PPUSH
11135: LD_INT 0
11137: PPUSH
11138: CALL_OW 1
11142: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
11143: LD_ADDR_LOC 27
11147: PUSH
11148: LD_LOC 27
11152: PPUSH
11153: LD_VAR 0 2
11157: PPUSH
11158: LD_INT 0
11160: PPUSH
11161: CALL_OW 1
11165: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
11166: LD_ADDR_LOC 28
11170: PUSH
11171: LD_LOC 28
11175: PPUSH
11176: LD_VAR 0 2
11180: PPUSH
11181: LD_INT 0
11183: PPUSH
11184: CALL_OW 1
11188: ST_TO_ADDR
// end ;
11189: GO 11088
11191: POP
11192: POP
// pointGame = true ;
11193: LD_ADDR_LOC 29
11197: PUSH
11198: LD_INT 1
11200: ST_TO_ADDR
// end ;
11201: LD_VAR 0 1
11205: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
11206: LD_LOC 29
11210: IFFALSE 11621
11212: GO 11214
11214: DISABLE
11215: LD_INT 0
11217: PPUSH
11218: PPUSH
11219: PPUSH
11220: PPUSH
11221: PPUSH
11222: PPUSH
11223: PPUSH
11224: PPUSH
11225: PPUSH
11226: PPUSH
11227: PPUSH
11228: PPUSH
11229: PPUSH
// begin if isSGUI then
11230: LD_OWVAR 83
11234: IFFALSE 11621
// begin if Teams [ 1 ] then
11236: LD_EXP 19
11240: PUSH
11241: LD_INT 1
11243: ARRAY
11244: IFFALSE 11256
// red = true else
11246: LD_ADDR_VAR 0 2
11250: PUSH
11251: LD_INT 1
11253: ST_TO_ADDR
11254: GO 11264
// red = false ;
11256: LD_ADDR_VAR 0 2
11260: PUSH
11261: LD_INT 0
11263: ST_TO_ADDR
// if Teams [ 2 ] then
11264: LD_EXP 19
11268: PUSH
11269: LD_INT 2
11271: ARRAY
11272: IFFALSE 11284
// blue = true else
11274: LD_ADDR_VAR 0 3
11278: PUSH
11279: LD_INT 1
11281: ST_TO_ADDR
11282: GO 11292
// blue = false ;
11284: LD_ADDR_VAR 0 3
11288: PUSH
11289: LD_INT 0
11291: ST_TO_ADDR
// if Teams [ 3 ] then
11292: LD_EXP 19
11296: PUSH
11297: LD_INT 3
11299: ARRAY
11300: IFFALSE 11312
// yel = true else
11302: LD_ADDR_VAR 0 4
11306: PUSH
11307: LD_INT 1
11309: ST_TO_ADDR
11310: GO 11320
// yel = false ;
11312: LD_ADDR_VAR 0 4
11316: PUSH
11317: LD_INT 0
11319: ST_TO_ADDR
// if Teams [ 4 ] then
11320: LD_EXP 19
11324: PUSH
11325: LD_INT 4
11327: ARRAY
11328: IFFALSE 11340
// green = true else
11330: LD_ADDR_VAR 0 5
11334: PUSH
11335: LD_INT 1
11337: ST_TO_ADDR
11338: GO 11348
// green = false ;
11340: LD_ADDR_VAR 0 5
11344: PUSH
11345: LD_INT 0
11347: ST_TO_ADDR
// if def_public_score then
11348: LD_EXP 1
11352: IFFALSE 11364
// p = true else
11354: LD_ADDR_VAR 0 12
11358: PUSH
11359: LD_INT 1
11361: ST_TO_ADDR
11362: GO 11372
// p = false ;
11364: LD_ADDR_VAR 0 12
11368: PUSH
11369: LD_INT 0
11371: ST_TO_ADDR
// if team_game then
11372: LD_EXP 23
11376: IFFALSE 11457
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
11378: LD_ADDR_VAR 0 13
11382: PUSH
11383: LD_INT 3
11385: PUSH
11386: LD_INT 1
11388: PUSH
11389: LD_INT 2
11391: PUSH
11392: LD_INT 7
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: PUSH
11401: LD_EXP 32
11405: ARRAY
11406: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
11407: LD_ADDR_VAR 0 10
11411: PUSH
11412: LD_STRING {
11414: PUSH
11415: LD_VAR 0 3
11419: STR
11420: PUSH
11421: LD_STRING ,
11423: STR
11424: PUSH
11425: LD_VAR 0 4
11429: STR
11430: PUSH
11431: LD_STRING ,
11433: STR
11434: PUSH
11435: LD_VAR 0 2
11439: STR
11440: PUSH
11441: LD_STRING ,0,0,0,
11443: STR
11444: PUSH
11445: LD_VAR 0 5
11449: STR
11450: PUSH
11451: LD_STRING ,0}
11453: STR
11454: ST_TO_ADDR
// end else
11455: GO 11557
// begin you = your_side ;
11457: LD_ADDR_VAR 0 13
11461: PUSH
11462: LD_OWVAR 2
11466: ST_TO_ADDR
// s = { ;
11467: LD_ADDR_VAR 0 10
11471: PUSH
11472: LD_STRING {
11474: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: DOUBLE
11481: LD_INT 1
11483: DEC
11484: ST_TO_ADDR
11485: LD_EXP 21
11489: PUSH
11490: LD_INT 0
11492: PLUS
11493: PUSH
11494: FOR_TO
11495: IFFALSE 11541
// if side_positions [ i ] then
11497: LD_EXP 21
11501: PUSH
11502: LD_VAR 0 1
11506: ARRAY
11507: IFFALSE 11525
// s = s & 1, else
11509: LD_ADDR_VAR 0 10
11513: PUSH
11514: LD_VAR 0 10
11518: PUSH
11519: LD_STRING 1,
11521: STR
11522: ST_TO_ADDR
11523: GO 11539
// s = s & 0, ;
11525: LD_ADDR_VAR 0 10
11529: PUSH
11530: LD_VAR 0 10
11534: PUSH
11535: LD_STRING 0,
11537: STR
11538: ST_TO_ADDR
11539: GO 11494
11541: POP
11542: POP
// s = s & } ;
11543: LD_ADDR_VAR 0 10
11547: PUSH
11548: LD_VAR 0 10
11552: PUSH
11553: LD_STRING }
11555: STR
11556: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
11557: LD_STRING initScore(
11559: PUSH
11560: LD_VAR 0 10
11564: STR
11565: PUSH
11566: LD_STRING ,
11568: STR
11569: PUSH
11570: LD_VAR 0 12
11574: STR
11575: PUSH
11576: LD_STRING ,
11578: STR
11579: PUSH
11580: LD_VAR 0 13
11584: STR
11585: PUSH
11586: LD_STRING  );
11588: STR
11589: PPUSH
11590: CALL_OW 559
// if game_type = 3 then
11594: LD_EXP 41
11598: PUSH
11599: LD_INT 3
11601: EQUAL
11602: IFFALSE 11621
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
11604: LD_STRING AddScorePoints(2,2,
11606: PUSH
11607: LD_EXP 30
11611: STR
11612: PUSH
11613: LD_STRING  );
11615: STR
11616: PPUSH
11617: CALL_OW 559
// end ; end ;
11621: PPOPN 13
11623: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
11624: LD_INT 0
11626: PPUSH
11627: PPUSH
// case typ of 1 :
11628: LD_VAR 0 3
11632: PUSH
11633: LD_INT 1
11635: DOUBLE
11636: EQUAL
11637: IFTRUE 11641
11639: GO 11669
11641: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
11642: LD_ADDR_LOC 26
11646: PUSH
11647: LD_LOC 26
11651: PPUSH
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_VAR 0 2
11661: PPUSH
11662: CALL_OW 1
11666: ST_TO_ADDR
11667: GO 11742
11669: LD_INT 2
11671: DOUBLE
11672: EQUAL
11673: IFTRUE 11677
11675: GO 11705
11677: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
11678: LD_ADDR_LOC 27
11682: PUSH
11683: LD_LOC 27
11687: PPUSH
11688: LD_VAR 0 1
11692: PPUSH
11693: LD_VAR 0 2
11697: PPUSH
11698: CALL_OW 1
11702: ST_TO_ADDR
11703: GO 11742
11705: LD_INT 3
11707: DOUBLE
11708: EQUAL
11709: IFTRUE 11713
11711: GO 11741
11713: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
11714: LD_ADDR_LOC 28
11718: PUSH
11719: LD_LOC 28
11723: PPUSH
11724: LD_VAR 0 1
11728: PPUSH
11729: LD_VAR 0 2
11733: PPUSH
11734: CALL_OW 1
11738: ST_TO_ADDR
11739: GO 11742
11741: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_LOC 26
11751: PUSH
11752: LD_VAR 0 1
11756: ARRAY
11757: PUSH
11758: LD_LOC 27
11762: PUSH
11763: LD_VAR 0 1
11767: ARRAY
11768: PLUS
11769: PUSH
11770: LD_LOC 28
11774: PUSH
11775: LD_VAR 0 1
11779: ARRAY
11780: PLUS
11781: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
11782: LD_VAR 0 1
11786: PPUSH
11787: LD_VAR 0 5
11791: PPUSH
11792: CALL_OW 506
// end ; end_of_file
11796: LD_VAR 0 4
11800: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11801: LD_INT 0
11803: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11804: LD_VAR 0 1
11808: PPUSH
11809: CALL_OW 255
11813: PUSH
11814: LD_VAR 0 4
11818: EQUAL
11819: IFFALSE 11838
// begin SetAchievement ( ACH_RAD ) ;
11821: LD_STRING ACH_RAD
11823: PPUSH
11824: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11828: LD_STRING ACH_NL
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: CALL_OW 564
// end end ;
11838: LD_VAR 0 5
11842: RET
// export function SA_Win ( side ) ; begin
11843: LD_INT 0
11845: PPUSH
// case side of 1 :
11846: LD_VAR 0 1
11850: PUSH
11851: LD_INT 1
11853: DOUBLE
11854: EQUAL
11855: IFTRUE 11859
11857: GO 11872
11859: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11860: LD_STRING ACH_AH
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: CALL_OW 564
11870: GO 12035
11872: LD_INT 2
11874: DOUBLE
11875: EQUAL
11876: IFTRUE 11880
11878: GO 11893
11880: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11881: LD_STRING ACH_E
11883: PPUSH
11884: LD_INT 1
11886: PPUSH
11887: CALL_OW 564
11891: GO 12035
11893: LD_INT 3
11895: DOUBLE
11896: EQUAL
11897: IFTRUE 11901
11899: GO 11914
11901: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11902: LD_STRING ACH_OOL
11904: PPUSH
11905: LD_INT 1
11907: PPUSH
11908: CALL_OW 564
11912: GO 12035
11914: LD_INT 1
11916: PUSH
11917: LD_INT 2
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: DOUBLE
11924: EQUAL
11925: IFTRUE 11929
11927: GO 11954
11929: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11930: LD_STRING ACH_AH
11932: PPUSH
11933: LD_REAL  5.00000000000000E-0001
11936: PPUSH
11937: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11941: LD_STRING ACH_E
11943: PPUSH
11944: LD_REAL  5.00000000000000E-0001
11947: PPUSH
11948: CALL_OW 564
// end ; [ 2 , 3 ] :
11952: GO 12035
11954: LD_INT 2
11956: PUSH
11957: LD_INT 3
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: DOUBLE
11964: EQUAL
11965: IFTRUE 11969
11967: GO 11994
11969: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11970: LD_STRING ACH_OOL
11972: PPUSH
11973: LD_REAL  5.00000000000000E-0001
11976: PPUSH
11977: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11981: LD_STRING ACH_E
11983: PPUSH
11984: LD_REAL  5.00000000000000E-0001
11987: PPUSH
11988: CALL_OW 564
// end ; [ 3 , 1 ] :
11992: GO 12035
11994: LD_INT 3
11996: PUSH
11997: LD_INT 1
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: DOUBLE
12004: EQUAL
12005: IFTRUE 12009
12007: GO 12034
12009: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12010: LD_STRING ACH_AH
12012: PPUSH
12013: LD_REAL  5.00000000000000E-0001
12016: PPUSH
12017: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12021: LD_STRING ACH_OOL
12023: PPUSH
12024: LD_REAL  5.00000000000000E-0001
12027: PPUSH
12028: CALL_OW 564
// end ; end ;
12032: GO 12035
12034: POP
// end ; end_of_file
12035: LD_VAR 0 2
12039: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
12040: LD_INT 0
12042: PPUSH
12043: PPUSH
// enable ( 98 ) ;
12044: LD_INT 98
12046: ENABLE_MARKED
// GameEnded = false ;
12047: LD_ADDR_LOC 31
12051: PUSH
12052: LD_INT 0
12054: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12055: LD_ADDR_LOC 30
12059: PUSH
12060: LD_INT 0
12062: PUSH
12063: LD_INT 0
12065: PUSH
12066: LD_INT 0
12068: PUSH
12069: LD_INT 0
12071: PUSH
12072: LD_INT 0
12074: PUSH
12075: LD_INT 0
12077: PUSH
12078: LD_INT 0
12080: PUSH
12081: LD_INT 0
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: ST_TO_ADDR
// unfoged = false ;
12094: LD_ADDR_LOC 32
12098: PUSH
12099: LD_INT 0
12101: ST_TO_ADDR
// for i = 1 to side_positions do
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: DOUBLE
12108: LD_INT 1
12110: DEC
12111: ST_TO_ADDR
12112: LD_EXP 21
12116: PUSH
12117: FOR_TO
12118: IFFALSE 12158
// if not side_positions [ i ] then
12120: LD_EXP 21
12124: PUSH
12125: LD_VAR 0 2
12129: ARRAY
12130: NOT
12131: IFFALSE 12156
// defaited = replace ( defaited , i , true ) ;
12133: LD_ADDR_LOC 30
12137: PUSH
12138: LD_LOC 30
12142: PPUSH
12143: LD_VAR 0 2
12147: PPUSH
12148: LD_INT 1
12150: PPUSH
12151: CALL_OW 1
12155: ST_TO_ADDR
12156: GO 12117
12158: POP
12159: POP
// end ;
12160: LD_VAR 0 1
12164: RET
// function CanWinLoose ; begin
12165: LD_INT 0
12167: PPUSH
// Result := true ;
12168: LD_ADDR_VAR 0 1
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12176: CALL_OW 518
12180: PUSH
12181: CALL_OW 519
12185: PUSH
12186: LD_INT 0
12188: GREATER
12189: AND
12190: IFFALSE 12200
// Result := false ;
12192: LD_ADDR_VAR 0 1
12196: PUSH
12197: LD_INT 0
12199: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12200: CALL_OW 531
12204: PUSH
12205: CALL_OW 519
12209: PUSH
12210: LD_INT 1
12212: GREATER
12213: AND
12214: IFFALSE 12224
// Result := false ;
12216: LD_ADDR_VAR 0 1
12220: PUSH
12221: LD_INT 0
12223: ST_TO_ADDR
// end ;
12224: LD_VAR 0 1
12228: RET
// export function HasPower ( i ) ; var k , h ; begin
12229: LD_INT 0
12231: PPUSH
12232: PPUSH
12233: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
12234: LD_VAR 0 1
12238: PPUSH
12239: CALL_OW 108
12243: NOT
12244: PUSH
12245: LD_EXP 20
12249: PUSH
12250: LD_VAR 0 1
12254: ARRAY
12255: NOT
12256: AND
12257: PUSH
12258: LD_OWVAR 4
12262: AND
12263: IFFALSE 12275
// begin result = false ;
12265: LD_ADDR_VAR 0 2
12269: PUSH
12270: LD_INT 0
12272: ST_TO_ADDR
// end else
12273: GO 12570
// case def_win_rules of 0 :
12275: LD_EXP 17
12279: PUSH
12280: LD_INT 0
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12451
12288: POP
// if def_people_respawning then
12289: LD_EXP 53
12293: IFFALSE 12384
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
12295: LD_ADDR_VAR 0 2
12299: PUSH
12300: LD_INT 22
12302: PUSH
12303: LD_VAR 0 1
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 2
12314: PUSH
12315: LD_INT 21
12317: PUSH
12318: LD_INT 1
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PUSH
12325: LD_INT 33
12327: PUSH
12328: LD_INT 3
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 33
12337: PUSH
12338: LD_INT 5
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 30
12347: PUSH
12348: LD_INT 0
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 30
12357: PUSH
12358: LD_INT 1
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 69
12381: ST_TO_ADDR
12382: GO 12449
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
12384: LD_ADDR_VAR 0 2
12388: PUSH
12389: LD_INT 22
12391: PUSH
12392: LD_VAR 0 1
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 2
12403: PUSH
12404: LD_INT 21
12406: PUSH
12407: LD_INT 1
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 33
12416: PUSH
12417: LD_INT 3
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 33
12426: PUSH
12427: LD_INT 5
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PPUSH
12444: CALL_OW 69
12448: ST_TO_ADDR
12449: GO 12570
12451: LD_INT 1
12453: DOUBLE
12454: EQUAL
12455: IFTRUE 12459
12457: GO 12498
12459: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
12460: LD_ADDR_VAR 0 2
12464: PUSH
12465: LD_INT 22
12467: PUSH
12468: LD_VAR 0 1
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: LD_INT 21
12479: PUSH
12480: LD_INT 1
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PPUSH
12491: CALL_OW 69
12495: ST_TO_ADDR
12496: GO 12570
12498: LD_INT 2
12500: DOUBLE
12501: EQUAL
12502: IFTRUE 12506
12504: GO 12569
12506: POP
// begin h = false ;
12507: LD_ADDR_VAR 0 4
12511: PUSH
12512: LD_INT 0
12514: ST_TO_ADDR
// for k in heroes [ i ] do
12515: LD_ADDR_VAR 0 3
12519: PUSH
12520: LD_EXP 33
12524: PUSH
12525: LD_VAR 0 1
12529: ARRAY
12530: PUSH
12531: FOR_IN
12532: IFFALSE 12555
// if IsLive ( k ) then
12534: LD_VAR 0 3
12538: PPUSH
12539: CALL_OW 300
12543: IFFALSE 12553
// h = true ;
12545: LD_ADDR_VAR 0 4
12549: PUSH
12550: LD_INT 1
12552: ST_TO_ADDR
12553: GO 12531
12555: POP
12556: POP
// Result := h ;
12557: LD_ADDR_VAR 0 2
12561: PUSH
12562: LD_VAR 0 4
12566: ST_TO_ADDR
// end ; end ;
12567: GO 12570
12569: POP
// end ;
12570: LD_VAR 0 2
12574: RET
// function AlliedSides ( i , j ) ; begin
12575: LD_INT 0
12577: PPUSH
// Result := false ;
12578: LD_ADDR_VAR 0 3
12582: PUSH
12583: LD_INT 0
12585: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
12586: LD_VAR 0 1
12590: PPUSH
12591: LD_VAR 0 2
12595: PPUSH
12596: CALL_OW 81
12600: PUSH
12601: LD_INT 1
12603: EQUAL
12604: PUSH
12605: LD_VAR 0 2
12609: PPUSH
12610: LD_VAR 0 1
12614: PPUSH
12615: CALL_OW 81
12619: PUSH
12620: LD_INT 1
12622: EQUAL
12623: AND
12624: PUSH
12625: LD_VAR 0 1
12629: PPUSH
12630: CALL_OW 83
12634: AND
12635: PUSH
12636: LD_VAR 0 2
12640: PPUSH
12641: CALL_OW 83
12645: AND
12646: IFFALSE 12656
// Result := true ;
12648: LD_ADDR_VAR 0 3
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
// end ;
12656: LD_VAR 0 3
12660: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
12661: CALL 12165 0 0
12665: PUSH
12666: LD_LOC 31
12670: NOT
12671: AND
12672: IFFALSE 12688
12674: GO 12676
12676: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
12677: LD_ADDR_EXP 59
12681: PUSH
12682: LD_STRING #Player-Ended
12684: PUSH
12685: EMPTY
12686: LIST
12687: ST_TO_ADDR
12688: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
12689: CALL 12165 0 0
12693: PUSH
12694: LD_LOC 31
12698: AND
12699: IFFALSE 12708
12701: GO 12703
12703: DISABLE
// YouLostInMultiplayer ;
12704: CALL_OW 107
12708: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
12709: CALL 12165 0 0
12713: NOT
12714: PUSH
12715: CALL_OW 531
12719: NOT
12720: AND
12721: IFFALSE 12737
12723: GO 12725
12725: DISABLE
// WaitServerStrings = [ #server-wait ] ;
12726: LD_ADDR_EXP 59
12730: PUSH
12731: LD_STRING #server-wait
12733: PUSH
12734: EMPTY
12735: LIST
12736: ST_TO_ADDR
12737: END
// every 100 trigger IAmSpec do
12738: CALL_OW 531
12742: IFFALSE 12758
12744: GO 12746
12746: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
12747: LD_ADDR_EXP 59
12751: PUSH
12752: LD_STRING #Player-IAmSpec
12754: PUSH
12755: EMPTY
12756: LIST
12757: ST_TO_ADDR
12758: END
// every 100 trigger GameEnded and IAmSpec do
12759: LD_LOC 31
12763: PUSH
12764: CALL_OW 531
12768: AND
12769: IFFALSE 12778
12771: GO 12773
12773: DISABLE
// YouLostInMultiplayer ;
12774: CALL_OW 107
12778: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
12779: CALL 12165 0 0
12783: PUSH
12784: LD_LOC 31
12788: NOT
12789: AND
12790: IFFALSE 12806
12792: GO 12794
12794: DISABLE
// WaitServerStrings = [ $player-win ] ;
12795: LD_ADDR_EXP 59
12799: PUSH
12800: LD_STRING $player-win
12802: PUSH
12803: EMPTY
12804: LIST
12805: ST_TO_ADDR
12806: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
12807: CALL 12165 0 0
12811: PUSH
12812: LD_LOC 31
12816: AND
12817: IFFALSE 12841
12819: GO 12821
12821: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
12822: LD_EXP 22
12826: PUSH
12827: LD_OWVAR 2
12831: ARRAY
12832: PPUSH
12833: CALL 11843 0 1
// YouWinInMultiplayer ;
12837: CALL_OW 106
// end ;
12841: END
// every 100 trigger isEditor marked 401 do
12842: LD_OWVAR 84
12846: IFFALSE 12862
12848: GO 12850
12850: DISABLE
// Debug_Strings = [ You won ] ;
12851: LD_ADDR_OWVAR 48
12855: PUSH
12856: LD_STRING You won
12858: PUSH
12859: EMPTY
12860: LIST
12861: ST_TO_ADDR
12862: END
// every 100 trigger isEditor marked 400 do
12863: LD_OWVAR 84
12867: IFFALSE 12883
12869: GO 12871
12871: DISABLE
// Debug_Strings = [ You loss ] ;
12872: LD_ADDR_OWVAR 48
12876: PUSH
12877: LD_STRING You loss
12879: PUSH
12880: EMPTY
12881: LIST
12882: ST_TO_ADDR
12883: END
// every 100 marked 98 do var i , un ;
12884: GO 12886
12886: DISABLE
12887: LD_INT 0
12889: PPUSH
12890: PPUSH
// begin for i = 1 to side_positions do
12891: LD_ADDR_VAR 0 1
12895: PUSH
12896: DOUBLE
12897: LD_INT 1
12899: DEC
12900: ST_TO_ADDR
12901: LD_EXP 21
12905: PUSH
12906: FOR_TO
12907: IFFALSE 13030
// if side_positions [ i ] then
12909: LD_EXP 21
12913: PUSH
12914: LD_VAR 0 1
12918: ARRAY
12919: IFFALSE 13028
// if not HasPower ( i ) and not Defaited [ i ] then
12921: LD_VAR 0 1
12925: PPUSH
12926: CALL 12229 0 1
12930: NOT
12931: PUSH
12932: LD_LOC 30
12936: PUSH
12937: LD_VAR 0 1
12941: ARRAY
12942: NOT
12943: AND
12944: IFFALSE 13028
// begin un = filterallunits ( [ f_side , i ] ) ;
12946: LD_ADDR_VAR 0 2
12950: PUSH
12951: LD_INT 22
12953: PUSH
12954: LD_VAR 0 1
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: ST_TO_ADDR
// if un then
12968: LD_VAR 0 2
12972: IFFALSE 12986
// SetSide ( un , 0 ) ;
12974: LD_VAR 0 2
12978: PPUSH
12979: LD_INT 0
12981: PPUSH
12982: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
12986: LD_ADDR_LOC 30
12990: PUSH
12991: LD_LOC 30
12995: PPUSH
12996: LD_VAR 0 1
13000: PPUSH
13001: LD_INT 1
13003: PPUSH
13004: CALL_OW 1
13008: ST_TO_ADDR
// if i = your_side then
13009: LD_VAR 0 1
13013: PUSH
13014: LD_OWVAR 2
13018: EQUAL
13019: IFFALSE 13028
// begin Multiplayer_Loose_Message ;
13021: CALL_OW 521
// enable ( 400 ) ;
13025: LD_INT 400
13027: ENABLE_MARKED
// end ; end ;
13028: GO 12906
13030: POP
13031: POP
// if not Unfoged and defaited [ your_side ] then
13032: LD_LOC 32
13036: NOT
13037: PUSH
13038: LD_LOC 30
13042: PUSH
13043: LD_OWVAR 2
13047: ARRAY
13048: AND
13049: IFFALSE 13055
// Unfog ;
13051: CALL 13241 0 0
// DidGameEnd ;
13055: CALL 13070 0 0
// if not GameEnded then
13059: LD_LOC 31
13063: NOT
13064: IFFALSE 13067
// enable ;
13066: ENABLE
// end ;
13067: PPOPN 2
13069: END
// function DidGameEnd ; var i , k , enemy ; begin
13070: LD_INT 0
13072: PPUSH
13073: PPUSH
13074: PPUSH
13075: PPUSH
// enemy = [ ] ;
13076: LD_ADDR_VAR 0 4
13080: PUSH
13081: EMPTY
13082: ST_TO_ADDR
// for i = 1 to side_positions do
13083: LD_ADDR_VAR 0 2
13087: PUSH
13088: DOUBLE
13089: LD_INT 1
13091: DEC
13092: ST_TO_ADDR
13093: LD_EXP 21
13097: PUSH
13098: FOR_TO
13099: IFFALSE 13203
// if not defaited [ i ] then
13101: LD_LOC 30
13105: PUSH
13106: LD_VAR 0 2
13110: ARRAY
13111: NOT
13112: IFFALSE 13201
// for k = 1 to side_positions do
13114: LD_ADDR_VAR 0 3
13118: PUSH
13119: DOUBLE
13120: LD_INT 1
13122: DEC
13123: ST_TO_ADDR
13124: LD_EXP 21
13128: PUSH
13129: FOR_TO
13130: IFFALSE 13199
// if not defaited [ k ] then
13132: LD_LOC 30
13136: PUSH
13137: LD_VAR 0 3
13141: ARRAY
13142: NOT
13143: IFFALSE 13197
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
13145: LD_VAR 0 2
13149: PPUSH
13150: LD_VAR 0 3
13154: PPUSH
13155: CALL_OW 81
13159: PUSH
13160: LD_INT 2
13162: PUSH
13163: LD_INT 0
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: IN
13170: IFFALSE 13197
// enemy = enemy ^ [ i , k ] ;
13172: LD_ADDR_VAR 0 4
13176: PUSH
13177: LD_VAR 0 4
13181: PUSH
13182: LD_VAR 0 2
13186: PUSH
13187: LD_VAR 0 3
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: ADD
13196: ST_TO_ADDR
13197: GO 13129
13199: POP
13200: POP
13201: GO 13098
13203: POP
13204: POP
// if not enemy then
13205: LD_VAR 0 4
13209: NOT
13210: IFFALSE 13236
// begin GameEnded = true ;
13212: LD_ADDR_LOC 31
13216: PUSH
13217: LD_INT 1
13219: ST_TO_ADDR
// if not defaited [ your_side ] then
13220: LD_LOC 30
13224: PUSH
13225: LD_OWVAR 2
13229: ARRAY
13230: NOT
13231: IFFALSE 13236
// enable ( 401 ) ;
13233: LD_INT 401
13235: ENABLE_MARKED
// end ; end ;
13236: LD_VAR 0 1
13240: RET
// function unfog ; var k , friends ; begin
13241: LD_INT 0
13243: PPUSH
13244: PPUSH
13245: PPUSH
// for k = 1 to side_positions do
13246: LD_ADDR_VAR 0 2
13250: PUSH
13251: DOUBLE
13252: LD_INT 1
13254: DEC
13255: ST_TO_ADDR
13256: LD_EXP 21
13260: PUSH
13261: FOR_TO
13262: IFFALSE 13318
// if not defaited [ k ] then
13264: LD_LOC 30
13268: PUSH
13269: LD_VAR 0 2
13273: ARRAY
13274: NOT
13275: IFFALSE 13316
// if GetAttitude ( your_side , k ) in [ att_friend ] then
13277: LD_OWVAR 2
13281: PPUSH
13282: LD_VAR 0 2
13286: PPUSH
13287: CALL_OW 81
13291: PUSH
13292: LD_INT 1
13294: PUSH
13295: EMPTY
13296: LIST
13297: IN
13298: IFFALSE 13316
// friends = friends ^ k ;
13300: LD_ADDR_VAR 0 3
13304: PUSH
13305: LD_VAR 0 3
13309: PUSH
13310: LD_VAR 0 2
13314: ADD
13315: ST_TO_ADDR
13316: GO 13261
13318: POP
13319: POP
// if not friends then
13320: LD_VAR 0 3
13324: NOT
13325: IFFALSE 13342
// begin fogoff ( true ) ;
13327: LD_INT 1
13329: PPUSH
13330: CALL_OW 344
// unfoged = true ;
13334: LD_ADDR_LOC 32
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
// end ; end ;
13342: LD_VAR 0 1
13346: RET
// export function MakeGameEnd ; begin
13347: LD_INT 0
13349: PPUSH
// fogoff ( true ) ;
13350: LD_INT 1
13352: PPUSH
13353: CALL_OW 344
// unfoged = true ;
13357: LD_ADDR_LOC 32
13361: PUSH
13362: LD_INT 1
13364: ST_TO_ADDR
// wait ( 0 0$5 ) ;
13365: LD_INT 175
13367: PPUSH
13368: CALL_OW 67
// GameEnded = true ;
13372: LD_ADDR_LOC 31
13376: PUSH
13377: LD_INT 1
13379: ST_TO_ADDR
// end ;
13380: LD_VAR 0 1
13384: RET
// export function GetGameEnded ; begin
13385: LD_INT 0
13387: PPUSH
// result = GameEnded ;
13388: LD_ADDR_VAR 0 1
13392: PUSH
13393: LD_LOC 31
13397: ST_TO_ADDR
// end ; end_of_file
13398: LD_VAR 0 1
13402: RET
// var win ; export function init_kings_counting ; var i ; begin
13403: LD_INT 0
13405: PPUSH
13406: PPUSH
// mp_with_score := true ;
13407: LD_ADDR_OWVAR 14
13411: PUSH
13412: LD_INT 1
13414: ST_TO_ADDR
// ResetMultiScore ;
13415: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
13419: LD_EXP 29
13423: PPUSH
13424: LD_INT 1
13426: PPUSH
13427: CALL_OW 424
// enable ( 2 ) ;
13431: LD_INT 2
13433: ENABLE_MARKED
// end ;
13434: LD_VAR 0 1
13438: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
13439: LD_INT 0
13441: PPUSH
13442: PPUSH
13443: PPUSH
13444: PPUSH
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
// vypis := [ ] ;
13450: LD_ADDR_VAR 0 3
13454: PUSH
13455: EMPTY
13456: ST_TO_ADDR
// red = 0 ;
13457: LD_ADDR_VAR 0 5
13461: PUSH
13462: LD_INT 0
13464: ST_TO_ADDR
// blue = 0 ;
13465: LD_ADDR_VAR 0 6
13469: PUSH
13470: LD_INT 0
13472: ST_TO_ADDR
// yel = 0 ;
13473: LD_ADDR_VAR 0 7
13477: PUSH
13478: LD_INT 0
13480: ST_TO_ADDR
// green = 0 ;
13481: LD_ADDR_VAR 0 8
13485: PUSH
13486: LD_INT 0
13488: ST_TO_ADDR
// if def_public_score or isSGUI then
13489: LD_EXP 1
13493: PUSH
13494: LD_OWVAR 83
13498: OR
13499: IFFALSE 14114
// if not Team_Game then
13501: LD_EXP 23
13505: NOT
13506: IFFALSE 13638
// begin for side = 1 to Side_Positions do
13508: LD_ADDR_VAR 0 2
13512: PUSH
13513: DOUBLE
13514: LD_INT 1
13516: DEC
13517: ST_TO_ADDR
13518: LD_EXP 21
13522: PUSH
13523: FOR_TO
13524: IFFALSE 13634
// if Side_Positions [ side ] then
13526: LD_EXP 21
13530: PUSH
13531: LD_VAR 0 2
13535: ARRAY
13536: IFFALSE 13632
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
13538: LD_ADDR_VAR 0 3
13542: PUSH
13543: LD_VAR 0 3
13547: PUSH
13548: LD_STRING #KingoftheHill-Public
13550: PUSH
13551: LD_VAR 0 2
13555: PUSH
13556: LD_VAR 0 2
13560: PUSH
13561: LD_VAR 0 2
13565: PUSH
13566: LD_INT 10
13568: PLUS
13569: PPUSH
13570: CALL_OW 110
13574: PUSH
13575: LD_INT 3
13577: DIV
13578: PUSH
13579: LD_EXP 30
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: ADD
13591: ST_TO_ADDR
// ToLua ( updateScorePoints(2, & side & , & ( GetTag ( side + 10 ) div 3 ) & ); ) ;
13592: LD_STRING updateScorePoints(2,
13594: PUSH
13595: LD_VAR 0 2
13599: STR
13600: PUSH
13601: LD_STRING ,
13603: STR
13604: PUSH
13605: LD_VAR 0 2
13609: PUSH
13610: LD_INT 10
13612: PLUS
13613: PPUSH
13614: CALL_OW 110
13618: PUSH
13619: LD_INT 3
13621: DIV
13622: STR
13623: PUSH
13624: LD_STRING );
13626: STR
13627: PPUSH
13628: CALL_OW 559
// end ;
13632: GO 13523
13634: POP
13635: POP
// end else
13636: GO 14112
// begin if Teams [ 1 ] then
13638: LD_EXP 19
13642: PUSH
13643: LD_INT 1
13645: ARRAY
13646: IFFALSE 13698
// for i in Teams [ 1 ] do
13648: LD_ADDR_VAR 0 4
13652: PUSH
13653: LD_EXP 19
13657: PUSH
13658: LD_INT 1
13660: ARRAY
13661: PUSH
13662: FOR_IN
13663: IFFALSE 13696
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
13665: LD_ADDR_VAR 0 5
13669: PUSH
13670: LD_VAR 0 5
13674: PUSH
13675: LD_VAR 0 4
13679: PUSH
13680: LD_INT 10
13682: PLUS
13683: PPUSH
13684: CALL_OW 110
13688: PUSH
13689: LD_INT 3
13691: DIV
13692: PLUS
13693: ST_TO_ADDR
13694: GO 13662
13696: POP
13697: POP
// if Teams [ 2 ] then
13698: LD_EXP 19
13702: PUSH
13703: LD_INT 2
13705: ARRAY
13706: IFFALSE 13758
// for i in Teams [ 2 ] do
13708: LD_ADDR_VAR 0 4
13712: PUSH
13713: LD_EXP 19
13717: PUSH
13718: LD_INT 2
13720: ARRAY
13721: PUSH
13722: FOR_IN
13723: IFFALSE 13756
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
13725: LD_ADDR_VAR 0 6
13729: PUSH
13730: LD_VAR 0 6
13734: PUSH
13735: LD_VAR 0 4
13739: PUSH
13740: LD_INT 10
13742: PLUS
13743: PPUSH
13744: CALL_OW 110
13748: PUSH
13749: LD_INT 3
13751: DIV
13752: PLUS
13753: ST_TO_ADDR
13754: GO 13722
13756: POP
13757: POP
// if Teams [ 3 ] then
13758: LD_EXP 19
13762: PUSH
13763: LD_INT 3
13765: ARRAY
13766: IFFALSE 13818
// for i in Teams [ 3 ] do
13768: LD_ADDR_VAR 0 4
13772: PUSH
13773: LD_EXP 19
13777: PUSH
13778: LD_INT 3
13780: ARRAY
13781: PUSH
13782: FOR_IN
13783: IFFALSE 13816
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
13785: LD_ADDR_VAR 0 7
13789: PUSH
13790: LD_VAR 0 7
13794: PUSH
13795: LD_VAR 0 4
13799: PUSH
13800: LD_INT 10
13802: PLUS
13803: PPUSH
13804: CALL_OW 110
13808: PUSH
13809: LD_INT 3
13811: DIV
13812: PLUS
13813: ST_TO_ADDR
13814: GO 13782
13816: POP
13817: POP
// if Teams [ 4 ] then
13818: LD_EXP 19
13822: PUSH
13823: LD_INT 4
13825: ARRAY
13826: IFFALSE 13878
// for i in Teams [ 4 ] do
13828: LD_ADDR_VAR 0 4
13832: PUSH
13833: LD_EXP 19
13837: PUSH
13838: LD_INT 4
13840: ARRAY
13841: PUSH
13842: FOR_IN
13843: IFFALSE 13876
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
13845: LD_ADDR_VAR 0 8
13849: PUSH
13850: LD_VAR 0 8
13854: PUSH
13855: LD_VAR 0 4
13859: PUSH
13860: LD_INT 10
13862: PLUS
13863: PPUSH
13864: CALL_OW 110
13868: PUSH
13869: LD_INT 3
13871: DIV
13872: PLUS
13873: ST_TO_ADDR
13874: GO 13842
13876: POP
13877: POP
// if Teams [ 1 ] then
13878: LD_EXP 19
13882: PUSH
13883: LD_INT 1
13885: ARRAY
13886: IFFALSE 13915
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
13888: LD_ADDR_VAR 0 3
13892: PUSH
13893: LD_STRING #KingoftheHill-Public-red
13895: PUSH
13896: LD_INT 3
13898: PUSH
13899: LD_VAR 0 5
13903: PUSH
13904: LD_EXP 30
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: ST_TO_ADDR
// if Teams [ 2 ] then
13915: LD_EXP 19
13919: PUSH
13920: LD_INT 2
13922: ARRAY
13923: IFFALSE 13958
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
13925: LD_ADDR_VAR 0 3
13929: PUSH
13930: LD_VAR 0 3
13934: PUSH
13935: LD_STRING #KingoftheHill-Public-blue
13937: PUSH
13938: LD_INT 1
13940: PUSH
13941: LD_VAR 0 6
13945: PUSH
13946: LD_EXP 30
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: ADD
13957: ST_TO_ADDR
// if Teams [ 3 ] then
13958: LD_EXP 19
13962: PUSH
13963: LD_INT 3
13965: ARRAY
13966: IFFALSE 14001
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
13968: LD_ADDR_VAR 0 3
13972: PUSH
13973: LD_VAR 0 3
13977: PUSH
13978: LD_STRING #KingoftheHill-Public-yell
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: LD_VAR 0 7
13988: PUSH
13989: LD_EXP 30
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: ADD
14000: ST_TO_ADDR
// if Teams [ 4 ] then
14001: LD_EXP 19
14005: PUSH
14006: LD_INT 4
14008: ARRAY
14009: IFFALSE 14044
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
14011: LD_ADDR_VAR 0 3
14015: PUSH
14016: LD_VAR 0 3
14020: PUSH
14021: LD_STRING #KingoftheHill-Public-green
14023: PUSH
14024: LD_INT 7
14026: PUSH
14027: LD_VAR 0 8
14031: PUSH
14032: LD_EXP 30
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: ADD
14043: ST_TO_ADDR
// ToLua ( updateScorePoints(2,3, & red & ); ) ;
14044: LD_STRING updateScorePoints(2,3,
14046: PUSH
14047: LD_VAR 0 5
14051: STR
14052: PUSH
14053: LD_STRING );
14055: STR
14056: PPUSH
14057: CALL_OW 559
// ToLua ( updateScorePoints(2,1, & blue & ); ) ;
14061: LD_STRING updateScorePoints(2,1,
14063: PUSH
14064: LD_VAR 0 6
14068: STR
14069: PUSH
14070: LD_STRING );
14072: STR
14073: PPUSH
14074: CALL_OW 559
// ToLua ( updateScorePoints(2,2, & yel & ); ) ;
14078: LD_STRING updateScorePoints(2,2,
14080: PUSH
14081: LD_VAR 0 7
14085: STR
14086: PUSH
14087: LD_STRING );
14089: STR
14090: PPUSH
14091: CALL_OW 559
// ToLua ( updateScorePoints(2,7, & green & ); ) ;
14095: LD_STRING updateScorePoints(2,7,
14097: PUSH
14098: LD_VAR 0 8
14102: STR
14103: PUSH
14104: LD_STRING );
14106: STR
14107: PPUSH
14108: CALL_OW 559
// end else
14112: GO 14549
// if not Team_Game then
14114: LD_EXP 23
14118: NOT
14119: IFFALSE 14177
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
14121: LD_ADDR_VAR 0 3
14125: PUSH
14126: LD_VAR 0 3
14130: PUSH
14131: LD_STRING #KingoftheHill-Private
14133: PUSH
14134: LD_OWVAR 2
14138: PUSH
14139: LD_OWVAR 2
14143: PUSH
14144: LD_VAR 0 2
14148: PUSH
14149: LD_INT 10
14151: PLUS
14152: PPUSH
14153: CALL_OW 110
14157: PUSH
14158: LD_INT 3
14160: DIV
14161: PUSH
14162: LD_EXP 30
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: ADD
14174: ST_TO_ADDR
14175: GO 14549
// begin for i in Teams [ 1 ] do
14177: LD_ADDR_VAR 0 4
14181: PUSH
14182: LD_EXP 19
14186: PUSH
14187: LD_INT 1
14189: ARRAY
14190: PUSH
14191: FOR_IN
14192: IFFALSE 14225
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14194: LD_ADDR_VAR 0 5
14198: PUSH
14199: LD_VAR 0 5
14203: PUSH
14204: LD_VAR 0 4
14208: PUSH
14209: LD_INT 10
14211: PLUS
14212: PPUSH
14213: CALL_OW 110
14217: PUSH
14218: LD_INT 3
14220: DIV
14221: PLUS
14222: ST_TO_ADDR
14223: GO 14191
14225: POP
14226: POP
// for i in Teams [ 2 ] do
14227: LD_ADDR_VAR 0 4
14231: PUSH
14232: LD_EXP 19
14236: PUSH
14237: LD_INT 2
14239: ARRAY
14240: PUSH
14241: FOR_IN
14242: IFFALSE 14275
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14244: LD_ADDR_VAR 0 6
14248: PUSH
14249: LD_VAR 0 6
14253: PUSH
14254: LD_VAR 0 4
14258: PUSH
14259: LD_INT 10
14261: PLUS
14262: PPUSH
14263: CALL_OW 110
14267: PUSH
14268: LD_INT 3
14270: DIV
14271: PLUS
14272: ST_TO_ADDR
14273: GO 14241
14275: POP
14276: POP
// for i in Teams [ 3 ] do
14277: LD_ADDR_VAR 0 4
14281: PUSH
14282: LD_EXP 19
14286: PUSH
14287: LD_INT 3
14289: ARRAY
14290: PUSH
14291: FOR_IN
14292: IFFALSE 14325
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14294: LD_ADDR_VAR 0 7
14298: PUSH
14299: LD_VAR 0 7
14303: PUSH
14304: LD_VAR 0 4
14308: PUSH
14309: LD_INT 10
14311: PLUS
14312: PPUSH
14313: CALL_OW 110
14317: PUSH
14318: LD_INT 3
14320: DIV
14321: PLUS
14322: ST_TO_ADDR
14323: GO 14291
14325: POP
14326: POP
// for i in Teams [ 4 ] do
14327: LD_ADDR_VAR 0 4
14331: PUSH
14332: LD_EXP 19
14336: PUSH
14337: LD_INT 4
14339: ARRAY
14340: PUSH
14341: FOR_IN
14342: IFFALSE 14375
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14344: LD_ADDR_VAR 0 8
14348: PUSH
14349: LD_VAR 0 8
14353: PUSH
14354: LD_VAR 0 4
14358: PUSH
14359: LD_INT 10
14361: PLUS
14362: PPUSH
14363: CALL_OW 110
14367: PUSH
14368: LD_INT 3
14370: DIV
14371: PLUS
14372: ST_TO_ADDR
14373: GO 14341
14375: POP
14376: POP
// if your_side in Teams [ 1 ] then
14377: LD_OWVAR 2
14381: PUSH
14382: LD_EXP 19
14386: PUSH
14387: LD_INT 1
14389: ARRAY
14390: IN
14391: IFFALSE 14420
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
14393: LD_ADDR_VAR 0 3
14397: PUSH
14398: LD_STRING #KingoftheHill-Public-red
14400: PUSH
14401: LD_INT 3
14403: PUSH
14404: LD_VAR 0 5
14408: PUSH
14409: LD_EXP 30
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
14420: LD_OWVAR 2
14424: PUSH
14425: LD_EXP 19
14429: PUSH
14430: LD_INT 2
14432: ARRAY
14433: IN
14434: IFFALSE 14463
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
14436: LD_ADDR_VAR 0 3
14440: PUSH
14441: LD_STRING #KingoftheHill-Public-blue
14443: PUSH
14444: LD_INT 1
14446: PUSH
14447: LD_VAR 0 6
14451: PUSH
14452: LD_EXP 30
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
14463: LD_OWVAR 2
14467: PUSH
14468: LD_EXP 19
14472: PUSH
14473: LD_INT 3
14475: ARRAY
14476: IN
14477: IFFALSE 14506
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
14479: LD_ADDR_VAR 0 3
14483: PUSH
14484: LD_STRING #KingoftheHill-Public-yell
14486: PUSH
14487: LD_INT 2
14489: PUSH
14490: LD_VAR 0 7
14494: PUSH
14495: LD_EXP 30
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
14506: LD_OWVAR 2
14510: PUSH
14511: LD_EXP 19
14515: PUSH
14516: LD_INT 4
14518: ARRAY
14519: IN
14520: IFFALSE 14549
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
14522: LD_ADDR_VAR 0 3
14526: PUSH
14527: LD_STRING #KingoftheHill-Public-green
14529: PUSH
14530: LD_INT 7
14532: PUSH
14533: LD_VAR 0 8
14537: PUSH
14538: LD_EXP 30
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: ST_TO_ADDR
// end ; Display_kings := vypis ;
14549: LD_ADDR_EXP 60
14553: PUSH
14554: LD_VAR 0 3
14558: ST_TO_ADDR
// end ;
14559: LD_VAR 0 1
14563: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
14564: LD_INT 0
14566: PPUSH
14567: PPUSH
14568: PPUSH
14569: PPUSH
14570: PPUSH
14571: PPUSH
14572: PPUSH
14573: PPUSH
14574: PPUSH
// side := [ ] ;
14575: LD_ADDR_VAR 0 2
14579: PUSH
14580: EMPTY
14581: ST_TO_ADDR
// red = 0 ;
14582: LD_ADDR_VAR 0 5
14586: PUSH
14587: LD_INT 0
14589: ST_TO_ADDR
// blue = 0 ;
14590: LD_ADDR_VAR 0 6
14594: PUSH
14595: LD_INT 0
14597: ST_TO_ADDR
// yel = 0 ;
14598: LD_ADDR_VAR 0 7
14602: PUSH
14603: LD_INT 0
14605: ST_TO_ADDR
// green = 0 ;
14606: LD_ADDR_VAR 0 8
14610: PUSH
14611: LD_INT 0
14613: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
14614: LD_ADDR_VAR 0 3
14618: PUSH
14619: LD_EXP 29
14623: PPUSH
14624: LD_INT 21
14626: PUSH
14627: LD_INT 3
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: LD_INT 53
14636: PUSH
14637: EMPTY
14638: LIST
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PPUSH
14644: CALL_OW 70
14648: ST_TO_ADDR
// for un in list do
14649: LD_ADDR_VAR 0 4
14653: PUSH
14654: LD_VAR 0 3
14658: PUSH
14659: FOR_IN
14660: IFFALSE 14685
// side := side union GetSide ( un ) ;
14662: LD_ADDR_VAR 0 2
14666: PUSH
14667: LD_VAR 0 2
14671: PUSH
14672: LD_VAR 0 4
14676: PPUSH
14677: CALL_OW 255
14681: UNION
14682: ST_TO_ADDR
14683: GO 14659
14685: POP
14686: POP
// if side <> 1 then
14687: LD_VAR 0 2
14691: PUSH
14692: LD_INT 1
14694: NONEQUAL
14695: IFFALSE 14699
// exit ;
14697: GO 15062
// side := side [ 1 ] ;
14699: LD_ADDR_VAR 0 2
14703: PUSH
14704: LD_VAR 0 2
14708: PUSH
14709: LD_INT 1
14711: ARRAY
14712: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
14713: LD_VAR 0 2
14717: PUSH
14718: LD_INT 10
14720: PLUS
14721: PPUSH
14722: LD_VAR 0 2
14726: PUSH
14727: LD_INT 10
14729: PLUS
14730: PPUSH
14731: CALL_OW 110
14735: PUSH
14736: LD_INT 1
14738: PLUS
14739: PPUSH
14740: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
14744: LD_VAR 0 2
14748: PPUSH
14749: LD_VAR 0 2
14753: PUSH
14754: LD_INT 10
14756: PLUS
14757: PPUSH
14758: CALL_OW 110
14762: PUSH
14763: LD_INT 3
14765: DIV
14766: PPUSH
14767: LD_INT 2
14769: PPUSH
14770: CALL 11624 0 3
// if not Team_Game then
14774: LD_EXP 23
14778: NOT
14779: IFFALSE 15062
// if GetTag ( side + 10 ) >= final_count * 3 then
14781: LD_VAR 0 2
14785: PUSH
14786: LD_INT 10
14788: PLUS
14789: PPUSH
14790: CALL_OW 110
14794: PUSH
14795: LD_EXP 30
14799: PUSH
14800: LD_INT 3
14802: MUL
14803: GREATEREQUAL
14804: IFFALSE 14811
// enable ( 3 ) else
14806: LD_INT 3
14808: ENABLE_MARKED
14809: GO 15062
// begin for i in Teams [ 1 ] do
14811: LD_ADDR_VAR 0 9
14815: PUSH
14816: LD_EXP 19
14820: PUSH
14821: LD_INT 1
14823: ARRAY
14824: PUSH
14825: FOR_IN
14826: IFFALSE 14859
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14828: LD_ADDR_VAR 0 5
14832: PUSH
14833: LD_VAR 0 5
14837: PUSH
14838: LD_VAR 0 9
14842: PUSH
14843: LD_INT 10
14845: PLUS
14846: PPUSH
14847: CALL_OW 110
14851: PUSH
14852: LD_INT 3
14854: DIV
14855: PLUS
14856: ST_TO_ADDR
14857: GO 14825
14859: POP
14860: POP
// for i in Teams [ 2 ] do
14861: LD_ADDR_VAR 0 9
14865: PUSH
14866: LD_EXP 19
14870: PUSH
14871: LD_INT 2
14873: ARRAY
14874: PUSH
14875: FOR_IN
14876: IFFALSE 14909
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14878: LD_ADDR_VAR 0 6
14882: PUSH
14883: LD_VAR 0 6
14887: PUSH
14888: LD_VAR 0 9
14892: PUSH
14893: LD_INT 10
14895: PLUS
14896: PPUSH
14897: CALL_OW 110
14901: PUSH
14902: LD_INT 3
14904: DIV
14905: PLUS
14906: ST_TO_ADDR
14907: GO 14875
14909: POP
14910: POP
// for i in Teams [ 3 ] do
14911: LD_ADDR_VAR 0 9
14915: PUSH
14916: LD_EXP 19
14920: PUSH
14921: LD_INT 3
14923: ARRAY
14924: PUSH
14925: FOR_IN
14926: IFFALSE 14959
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14928: LD_ADDR_VAR 0 7
14932: PUSH
14933: LD_VAR 0 7
14937: PUSH
14938: LD_VAR 0 9
14942: PUSH
14943: LD_INT 10
14945: PLUS
14946: PPUSH
14947: CALL_OW 110
14951: PUSH
14952: LD_INT 3
14954: DIV
14955: PLUS
14956: ST_TO_ADDR
14957: GO 14925
14959: POP
14960: POP
// for i in Teams [ 4 ] do
14961: LD_ADDR_VAR 0 9
14965: PUSH
14966: LD_EXP 19
14970: PUSH
14971: LD_INT 4
14973: ARRAY
14974: PUSH
14975: FOR_IN
14976: IFFALSE 15009
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14978: LD_ADDR_VAR 0 8
14982: PUSH
14983: LD_VAR 0 8
14987: PUSH
14988: LD_VAR 0 9
14992: PUSH
14993: LD_INT 10
14995: PLUS
14996: PPUSH
14997: CALL_OW 110
15001: PUSH
15002: LD_INT 3
15004: DIV
15005: PLUS
15006: ST_TO_ADDR
15007: GO 14975
15009: POP
15010: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
15011: LD_VAR 0 5
15015: PUSH
15016: LD_EXP 30
15020: GREATEREQUAL
15021: PUSH
15022: LD_VAR 0 6
15026: PUSH
15027: LD_EXP 30
15031: GREATEREQUAL
15032: OR
15033: PUSH
15034: LD_VAR 0 7
15038: PUSH
15039: LD_EXP 30
15043: GREATEREQUAL
15044: OR
15045: PUSH
15046: LD_VAR 0 8
15050: PUSH
15051: LD_EXP 30
15055: GREATEREQUAL
15056: OR
15057: IFFALSE 15062
// enable ( 3 ) ;
15059: LD_INT 3
15061: ENABLE_MARKED
// end ; end ;
15062: LD_VAR 0 1
15066: RET
// every 0 0$1 marked 2 do
15067: GO 15069
15069: DISABLE
// begin count_king ;
15070: CALL 14564 0 0
// show_public_points ;
15074: CALL 13439 0 0
// enable ;
15078: ENABLE
// end ;
15079: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
15080: GO 15082
15082: DISABLE
15083: LD_INT 0
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
15090: PPUSH
// begin win := [ ] ;
15091: LD_ADDR_LOC 33
15095: PUSH
15096: EMPTY
15097: ST_TO_ADDR
// red = 0 ;
15098: LD_ADDR_VAR 0 2
15102: PUSH
15103: LD_INT 0
15105: ST_TO_ADDR
// blue = 0 ;
15106: LD_ADDR_VAR 0 3
15110: PUSH
15111: LD_INT 0
15113: ST_TO_ADDR
// yel = 0 ;
15114: LD_ADDR_VAR 0 4
15118: PUSH
15119: LD_INT 0
15121: ST_TO_ADDR
// green = 0 ;
15122: LD_ADDR_VAR 0 5
15126: PUSH
15127: LD_INT 0
15129: ST_TO_ADDR
// if not Team_Game then
15130: LD_EXP 23
15134: NOT
15135: IFFALSE 15212
// begin for side = 1 to 8 do
15137: LD_ADDR_VAR 0 1
15141: PUSH
15142: DOUBLE
15143: LD_INT 1
15145: DEC
15146: ST_TO_ADDR
15147: LD_INT 8
15149: PUSH
15150: FOR_TO
15151: IFFALSE 15196
// if GetTag ( side + 10 ) >= final_count * 3 then
15153: LD_VAR 0 1
15157: PUSH
15158: LD_INT 10
15160: PLUS
15161: PPUSH
15162: CALL_OW 110
15166: PUSH
15167: LD_EXP 30
15171: PUSH
15172: LD_INT 3
15174: MUL
15175: GREATEREQUAL
15176: IFFALSE 15194
// win := win ^ side ;
15178: LD_ADDR_LOC 33
15182: PUSH
15183: LD_LOC 33
15187: PUSH
15188: LD_VAR 0 1
15192: ADD
15193: ST_TO_ADDR
15194: GO 15150
15196: POP
15197: POP
// if win then
15198: LD_LOC 33
15202: IFFALSE 15209
// enable ( 4 ) else
15204: LD_INT 4
15206: ENABLE_MARKED
15207: GO 15210
// enable ;
15209: ENABLE
// end else
15210: GO 15528
// begin for i in Teams [ 1 ] do
15212: LD_ADDR_VAR 0 6
15216: PUSH
15217: LD_EXP 19
15221: PUSH
15222: LD_INT 1
15224: ARRAY
15225: PUSH
15226: FOR_IN
15227: IFFALSE 15260
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
15229: LD_ADDR_VAR 0 2
15233: PUSH
15234: LD_VAR 0 2
15238: PUSH
15239: LD_VAR 0 6
15243: PUSH
15244: LD_INT 10
15246: PLUS
15247: PPUSH
15248: CALL_OW 110
15252: PUSH
15253: LD_INT 3
15255: DIV
15256: PLUS
15257: ST_TO_ADDR
15258: GO 15226
15260: POP
15261: POP
// for i in Teams [ 2 ] do
15262: LD_ADDR_VAR 0 6
15266: PUSH
15267: LD_EXP 19
15271: PUSH
15272: LD_INT 2
15274: ARRAY
15275: PUSH
15276: FOR_IN
15277: IFFALSE 15310
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
15279: LD_ADDR_VAR 0 3
15283: PUSH
15284: LD_VAR 0 3
15288: PUSH
15289: LD_VAR 0 6
15293: PUSH
15294: LD_INT 10
15296: PLUS
15297: PPUSH
15298: CALL_OW 110
15302: PUSH
15303: LD_INT 3
15305: DIV
15306: PLUS
15307: ST_TO_ADDR
15308: GO 15276
15310: POP
15311: POP
// for i in Teams [ 3 ] do
15312: LD_ADDR_VAR 0 6
15316: PUSH
15317: LD_EXP 19
15321: PUSH
15322: LD_INT 3
15324: ARRAY
15325: PUSH
15326: FOR_IN
15327: IFFALSE 15360
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
15329: LD_ADDR_VAR 0 4
15333: PUSH
15334: LD_VAR 0 4
15338: PUSH
15339: LD_VAR 0 6
15343: PUSH
15344: LD_INT 10
15346: PLUS
15347: PPUSH
15348: CALL_OW 110
15352: PUSH
15353: LD_INT 3
15355: DIV
15356: PLUS
15357: ST_TO_ADDR
15358: GO 15326
15360: POP
15361: POP
// for i in Teams [ 4 ] do
15362: LD_ADDR_VAR 0 6
15366: PUSH
15367: LD_EXP 19
15371: PUSH
15372: LD_INT 4
15374: ARRAY
15375: PUSH
15376: FOR_IN
15377: IFFALSE 15410
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
15379: LD_ADDR_VAR 0 5
15383: PUSH
15384: LD_VAR 0 5
15388: PUSH
15389: LD_VAR 0 6
15393: PUSH
15394: LD_INT 10
15396: PLUS
15397: PPUSH
15398: CALL_OW 110
15402: PUSH
15403: LD_INT 3
15405: DIV
15406: PLUS
15407: ST_TO_ADDR
15408: GO 15376
15410: POP
15411: POP
// if red >= final_count then
15412: LD_VAR 0 2
15416: PUSH
15417: LD_EXP 30
15421: GREATEREQUAL
15422: IFFALSE 15438
// win = teams [ 1 ] ;
15424: LD_ADDR_LOC 33
15428: PUSH
15429: LD_EXP 19
15433: PUSH
15434: LD_INT 1
15436: ARRAY
15437: ST_TO_ADDR
// if blue >= final_count then
15438: LD_VAR 0 3
15442: PUSH
15443: LD_EXP 30
15447: GREATEREQUAL
15448: IFFALSE 15464
// win = teams [ 2 ] ;
15450: LD_ADDR_LOC 33
15454: PUSH
15455: LD_EXP 19
15459: PUSH
15460: LD_INT 2
15462: ARRAY
15463: ST_TO_ADDR
// if yel >= final_count then
15464: LD_VAR 0 4
15468: PUSH
15469: LD_EXP 30
15473: GREATEREQUAL
15474: IFFALSE 15490
// win = teams [ 3 ] ;
15476: LD_ADDR_LOC 33
15480: PUSH
15481: LD_EXP 19
15485: PUSH
15486: LD_INT 3
15488: ARRAY
15489: ST_TO_ADDR
// if green >= final_count then
15490: LD_VAR 0 5
15494: PUSH
15495: LD_EXP 30
15499: GREATEREQUAL
15500: IFFALSE 15516
// win = teams [ 4 ] ;
15502: LD_ADDR_LOC 33
15506: PUSH
15507: LD_EXP 19
15511: PUSH
15512: LD_INT 4
15514: ARRAY
15515: ST_TO_ADDR
// if win then
15516: LD_LOC 33
15520: IFFALSE 15527
// enable ( 4 ) else
15522: LD_INT 4
15524: ENABLE_MARKED
15525: GO 15528
// enable ;
15527: ENABLE
// end ; end ;
15528: PPOPN 6
15530: END
// every 0 0$1 marked 4 do
15531: GO 15533
15533: DISABLE
// begin if Player_Side in win then
15534: LD_EXP 31
15538: PUSH
15539: LD_LOC 33
15543: IN
15544: IFFALSE 15560
// begin wait ( 0 0$2 ) ;
15546: LD_INT 70
15548: PPUSH
15549: CALL_OW 67
// enable ( 401 ) ;
15553: LD_INT 401
15555: ENABLE_MARKED
// exit ;
15556: GO 15576
// end else
15558: GO 15576
// begin wait ( 0 0$2 ) ;
15560: LD_INT 70
15562: PPUSH
15563: CALL_OW 67
// Multiplayer_Loose_Message ;
15567: CALL_OW 521
// enable ( 400 ) ;
15571: LD_INT 400
15573: ENABLE_MARKED
// exit ;
15574: GO 15576
// end ; end ; end_of_file
15576: END
// export function SetMpTechs ( ) ; var side , i ; begin
15577: LD_INT 0
15579: PPUSH
15580: PPUSH
15581: PPUSH
// for side = 1 to 8 do
15582: LD_ADDR_VAR 0 2
15586: PUSH
15587: DOUBLE
15588: LD_INT 1
15590: DEC
15591: ST_TO_ADDR
15592: LD_INT 8
15594: PUSH
15595: FOR_TO
15596: IFFALSE 15717
// begin for i = 1 to 72 do
15598: LD_ADDR_VAR 0 3
15602: PUSH
15603: DOUBLE
15604: LD_INT 1
15606: DEC
15607: ST_TO_ADDR
15608: LD_INT 72
15610: PUSH
15611: FOR_TO
15612: IFFALSE 15643
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15614: LD_VAR 0 3
15618: PPUSH
15619: LD_VAR 0 2
15623: PPUSH
15624: LD_INT 0
15626: PPUSH
15627: LD_VAR 0 3
15631: PPUSH
15632: CALL_OW 565
15636: PPUSH
15637: CALL_OW 322
15641: GO 15611
15643: POP
15644: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15645: LD_INT 73
15647: PPUSH
15648: LD_VAR 0 2
15652: PPUSH
15653: LD_INT 0
15655: PPUSH
15656: LD_INT 25
15658: PPUSH
15659: CALL_OW 565
15663: PPUSH
15664: CALL_OW 322
// for i = 0 to 40 do
15668: LD_ADDR_VAR 0 3
15672: PUSH
15673: DOUBLE
15674: LD_INT 0
15676: DEC
15677: ST_TO_ADDR
15678: LD_INT 40
15680: PUSH
15681: FOR_TO
15682: IFFALSE 15713
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15684: LD_VAR 0 3
15688: PPUSH
15689: LD_VAR 0 2
15693: PPUSH
15694: LD_INT 1
15696: PPUSH
15697: LD_VAR 0 3
15701: PPUSH
15702: CALL_OW 565
15706: PPUSH
15707: CALL_OW 324
15711: GO 15681
15713: POP
15714: POP
// end ;
15715: GO 15595
15717: POP
15718: POP
// end ;
15719: LD_VAR 0 1
15723: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15724: LD_INT 0
15726: PPUSH
15727: PPUSH
15728: PPUSH
// for side = 1 to 8 do
15729: LD_ADDR_VAR 0 3
15733: PUSH
15734: DOUBLE
15735: LD_INT 1
15737: DEC
15738: ST_TO_ADDR
15739: LD_INT 8
15741: PUSH
15742: FOR_TO
15743: IFFALSE 19739
// begin for i = 1 to 73 do
15745: LD_ADDR_VAR 0 4
15749: PUSH
15750: DOUBLE
15751: LD_INT 1
15753: DEC
15754: ST_TO_ADDR
15755: LD_INT 73
15757: PUSH
15758: FOR_TO
15759: IFFALSE 15780
// SetTech ( i , side , state_disabled ) ;
15761: LD_VAR 0 4
15765: PPUSH
15766: LD_VAR 0 3
15770: PPUSH
15771: LD_INT 0
15773: PPUSH
15774: CALL_OW 322
15778: GO 15758
15780: POP
15781: POP
// for i = 0 to 40 do
15782: LD_ADDR_VAR 0 4
15786: PUSH
15787: DOUBLE
15788: LD_INT 0
15790: DEC
15791: ST_TO_ADDR
15792: LD_INT 40
15794: PUSH
15795: FOR_TO
15796: IFFALSE 15817
// SetRestrict ( i , side , false ) ;
15798: LD_VAR 0 4
15802: PPUSH
15803: LD_VAR 0 3
15807: PPUSH
15808: LD_INT 0
15810: PPUSH
15811: CALL_OW 324
15815: GO 15795
15817: POP
15818: POP
// case level of 1 :
15819: LD_VAR 0 1
15823: PUSH
15824: LD_INT 1
15826: DOUBLE
15827: EQUAL
15828: IFTRUE 15832
15830: GO 15985
15832: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15833: LD_INT 35
15835: PPUSH
15836: LD_VAR 0 3
15840: PPUSH
15841: LD_INT 1
15843: PPUSH
15844: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15848: LD_INT 45
15850: PPUSH
15851: LD_VAR 0 3
15855: PPUSH
15856: LD_INT 1
15858: PPUSH
15859: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15863: LD_INT 46
15865: PPUSH
15866: LD_VAR 0 3
15870: PPUSH
15871: LD_INT 1
15873: PPUSH
15874: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15878: LD_INT 47
15880: PPUSH
15881: LD_VAR 0 3
15885: PPUSH
15886: LD_INT 1
15888: PPUSH
15889: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15893: LD_INT 0
15895: PPUSH
15896: LD_VAR 0 3
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15908: LD_INT 2
15910: PPUSH
15911: LD_VAR 0 3
15915: PPUSH
15916: LD_INT 1
15918: PPUSH
15919: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15923: LD_INT 4
15925: PPUSH
15926: LD_VAR 0 3
15930: PPUSH
15931: LD_INT 1
15933: PPUSH
15934: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15938: LD_INT 6
15940: PPUSH
15941: LD_VAR 0 3
15945: PPUSH
15946: LD_INT 1
15948: PPUSH
15949: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15953: LD_INT 29
15955: PPUSH
15956: LD_VAR 0 3
15960: PPUSH
15961: LD_INT 1
15963: PPUSH
15964: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15968: LD_INT 31
15970: PPUSH
15971: LD_VAR 0 3
15975: PPUSH
15976: LD_INT 1
15978: PPUSH
15979: CALL_OW 324
// end ; 2 :
15983: GO 19737
15985: LD_INT 2
15987: DOUBLE
15988: EQUAL
15989: IFTRUE 15993
15991: GO 16191
15993: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15994: LD_INT 35
15996: PPUSH
15997: LD_VAR 0 3
16001: PPUSH
16002: LD_INT 1
16004: PPUSH
16005: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16009: LD_INT 45
16011: PPUSH
16012: LD_VAR 0 3
16016: PPUSH
16017: LD_INT 1
16019: PPUSH
16020: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16024: LD_INT 46
16026: PPUSH
16027: LD_VAR 0 3
16031: PPUSH
16032: LD_INT 1
16034: PPUSH
16035: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16039: LD_INT 47
16041: PPUSH
16042: LD_VAR 0 3
16046: PPUSH
16047: LD_INT 1
16049: PPUSH
16050: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16054: LD_INT 1
16056: PPUSH
16057: LD_VAR 0 3
16061: PPUSH
16062: LD_INT 1
16064: PPUSH
16065: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16069: LD_INT 2
16071: PPUSH
16072: LD_VAR 0 3
16076: PPUSH
16077: LD_INT 1
16079: PPUSH
16080: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16084: LD_INT 11
16086: PPUSH
16087: LD_VAR 0 3
16091: PPUSH
16092: LD_INT 1
16094: PPUSH
16095: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16099: LD_INT 0
16101: PPUSH
16102: LD_VAR 0 3
16106: PPUSH
16107: LD_INT 1
16109: PPUSH
16110: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16114: LD_INT 2
16116: PPUSH
16117: LD_VAR 0 3
16121: PPUSH
16122: LD_INT 1
16124: PPUSH
16125: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16129: LD_INT 4
16131: PPUSH
16132: LD_VAR 0 3
16136: PPUSH
16137: LD_INT 1
16139: PPUSH
16140: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16144: LD_INT 6
16146: PPUSH
16147: LD_VAR 0 3
16151: PPUSH
16152: LD_INT 1
16154: PPUSH
16155: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16159: LD_INT 29
16161: PPUSH
16162: LD_VAR 0 3
16166: PPUSH
16167: LD_INT 1
16169: PPUSH
16170: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16174: LD_INT 31
16176: PPUSH
16177: LD_VAR 0 3
16181: PPUSH
16182: LD_INT 1
16184: PPUSH
16185: CALL_OW 324
// end ; 3 :
16189: GO 19737
16191: LD_INT 3
16193: DOUBLE
16194: EQUAL
16195: IFTRUE 16199
16197: GO 16652
16199: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16200: LD_INT 35
16202: PPUSH
16203: LD_VAR 0 3
16207: PPUSH
16208: LD_INT 1
16210: PPUSH
16211: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16215: LD_INT 45
16217: PPUSH
16218: LD_VAR 0 3
16222: PPUSH
16223: LD_INT 1
16225: PPUSH
16226: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16230: LD_INT 46
16232: PPUSH
16233: LD_VAR 0 3
16237: PPUSH
16238: LD_INT 1
16240: PPUSH
16241: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16245: LD_INT 47
16247: PPUSH
16248: LD_VAR 0 3
16252: PPUSH
16253: LD_INT 1
16255: PPUSH
16256: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16260: LD_INT 1
16262: PPUSH
16263: LD_VAR 0 3
16267: PPUSH
16268: LD_INT 1
16270: PPUSH
16271: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16275: LD_INT 2
16277: PPUSH
16278: LD_VAR 0 3
16282: PPUSH
16283: LD_INT 1
16285: PPUSH
16286: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16290: LD_INT 11
16292: PPUSH
16293: LD_VAR 0 3
16297: PPUSH
16298: LD_INT 1
16300: PPUSH
16301: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16305: LD_INT 48
16307: PPUSH
16308: LD_VAR 0 3
16312: PPUSH
16313: LD_INT 1
16315: PPUSH
16316: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16320: LD_INT 69
16322: PPUSH
16323: LD_VAR 0 3
16327: PPUSH
16328: LD_INT 1
16330: PPUSH
16331: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16335: LD_INT 39
16337: PPUSH
16338: LD_VAR 0 3
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16350: LD_INT 43
16352: PPUSH
16353: LD_VAR 0 3
16357: PPUSH
16358: LD_INT 1
16360: PPUSH
16361: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16365: LD_INT 51
16367: PPUSH
16368: LD_VAR 0 3
16372: PPUSH
16373: LD_INT 1
16375: PPUSH
16376: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16380: LD_INT 6
16382: PPUSH
16383: LD_VAR 0 3
16387: PPUSH
16388: LD_INT 1
16390: PPUSH
16391: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16395: LD_INT 0
16397: PPUSH
16398: LD_VAR 0 3
16402: PPUSH
16403: LD_INT 1
16405: PPUSH
16406: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16410: LD_INT 2
16412: PPUSH
16413: LD_VAR 0 3
16417: PPUSH
16418: LD_INT 1
16420: PPUSH
16421: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16425: LD_INT 3
16427: PPUSH
16428: LD_VAR 0 3
16432: PPUSH
16433: LD_INT 1
16435: PPUSH
16436: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16440: LD_INT 4
16442: PPUSH
16443: LD_VAR 0 3
16447: PPUSH
16448: LD_INT 1
16450: PPUSH
16451: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16455: LD_INT 6
16457: PPUSH
16458: LD_VAR 0 3
16462: PPUSH
16463: LD_INT 1
16465: PPUSH
16466: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16470: LD_INT 7
16472: PPUSH
16473: LD_VAR 0 3
16477: PPUSH
16478: LD_INT 1
16480: PPUSH
16481: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16485: LD_INT 8
16487: PPUSH
16488: LD_VAR 0 3
16492: PPUSH
16493: LD_INT 1
16495: PPUSH
16496: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16500: LD_INT 10
16502: PPUSH
16503: LD_VAR 0 3
16507: PPUSH
16508: LD_INT 1
16510: PPUSH
16511: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16515: LD_INT 15
16517: PPUSH
16518: LD_VAR 0 3
16522: PPUSH
16523: LD_INT 1
16525: PPUSH
16526: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16530: LD_INT 16
16532: PPUSH
16533: LD_VAR 0 3
16537: PPUSH
16538: LD_INT 1
16540: PPUSH
16541: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16545: LD_INT 17
16547: PPUSH
16548: LD_VAR 0 3
16552: PPUSH
16553: LD_INT 1
16555: PPUSH
16556: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16560: LD_INT 20
16562: PPUSH
16563: LD_VAR 0 3
16567: PPUSH
16568: LD_INT 1
16570: PPUSH
16571: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16575: LD_INT 26
16577: PPUSH
16578: LD_VAR 0 3
16582: PPUSH
16583: LD_INT 1
16585: PPUSH
16586: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16590: LD_INT 27
16592: PPUSH
16593: LD_VAR 0 3
16597: PPUSH
16598: LD_INT 1
16600: PPUSH
16601: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16605: LD_INT 29
16607: PPUSH
16608: LD_VAR 0 3
16612: PPUSH
16613: LD_INT 1
16615: PPUSH
16616: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16620: LD_INT 31
16622: PPUSH
16623: LD_VAR 0 3
16627: PPUSH
16628: LD_INT 1
16630: PPUSH
16631: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16635: LD_INT 32
16637: PPUSH
16638: LD_VAR 0 3
16642: PPUSH
16643: LD_INT 1
16645: PPUSH
16646: CALL_OW 324
// end ; 4 :
16650: GO 19737
16652: LD_INT 4
16654: DOUBLE
16655: EQUAL
16656: IFTRUE 16660
16658: GO 17608
16660: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16661: LD_INT 35
16663: PPUSH
16664: LD_VAR 0 3
16668: PPUSH
16669: LD_INT 1
16671: PPUSH
16672: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16676: LD_INT 45
16678: PPUSH
16679: LD_VAR 0 3
16683: PPUSH
16684: LD_INT 1
16686: PPUSH
16687: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16691: LD_INT 46
16693: PPUSH
16694: LD_VAR 0 3
16698: PPUSH
16699: LD_INT 1
16701: PPUSH
16702: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16706: LD_INT 47
16708: PPUSH
16709: LD_VAR 0 3
16713: PPUSH
16714: LD_INT 1
16716: PPUSH
16717: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16721: LD_INT 1
16723: PPUSH
16724: LD_VAR 0 3
16728: PPUSH
16729: LD_INT 1
16731: PPUSH
16732: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16736: LD_INT 2
16738: PPUSH
16739: LD_VAR 0 3
16743: PPUSH
16744: LD_INT 1
16746: PPUSH
16747: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16751: LD_INT 11
16753: PPUSH
16754: LD_VAR 0 3
16758: PPUSH
16759: LD_INT 1
16761: PPUSH
16762: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16766: LD_INT 20
16768: PPUSH
16769: LD_VAR 0 3
16773: PPUSH
16774: LD_INT 1
16776: PPUSH
16777: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16781: LD_INT 48
16783: PPUSH
16784: LD_VAR 0 3
16788: PPUSH
16789: LD_INT 1
16791: PPUSH
16792: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16796: LD_INT 49
16798: PPUSH
16799: LD_VAR 0 3
16803: PPUSH
16804: LD_INT 1
16806: PPUSH
16807: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16811: LD_INT 69
16813: PPUSH
16814: LD_VAR 0 3
16818: PPUSH
16819: LD_INT 1
16821: PPUSH
16822: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16826: LD_INT 39
16828: PPUSH
16829: LD_VAR 0 3
16833: PPUSH
16834: LD_INT 1
16836: PPUSH
16837: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16841: LD_INT 34
16843: PPUSH
16844: LD_VAR 0 3
16848: PPUSH
16849: LD_INT 1
16851: PPUSH
16852: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16856: LD_INT 42
16858: PPUSH
16859: LD_VAR 0 3
16863: PPUSH
16864: LD_INT 1
16866: PPUSH
16867: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16871: LD_INT 44
16873: PPUSH
16874: LD_VAR 0 3
16878: PPUSH
16879: LD_INT 1
16881: PPUSH
16882: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16886: LD_INT 41
16888: PPUSH
16889: LD_VAR 0 3
16893: PPUSH
16894: LD_INT 1
16896: PPUSH
16897: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16901: LD_INT 43
16903: PPUSH
16904: LD_VAR 0 3
16908: PPUSH
16909: LD_INT 1
16911: PPUSH
16912: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16916: LD_INT 70
16918: PPUSH
16919: LD_VAR 0 3
16923: PPUSH
16924: LD_INT 1
16926: PPUSH
16927: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16931: LD_INT 51
16933: PPUSH
16934: LD_VAR 0 3
16938: PPUSH
16939: LD_INT 1
16941: PPUSH
16942: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16946: LD_INT 52
16948: PPUSH
16949: LD_VAR 0 3
16953: PPUSH
16954: LD_INT 1
16956: PPUSH
16957: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16961: LD_INT 6
16963: PPUSH
16964: LD_VAR 0 3
16968: PPUSH
16969: LD_INT 1
16971: PPUSH
16972: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16976: LD_INT 15
16978: PPUSH
16979: LD_VAR 0 3
16983: PPUSH
16984: LD_INT 1
16986: PPUSH
16987: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16991: LD_INT 7
16993: PPUSH
16994: LD_VAR 0 3
16998: PPUSH
16999: LD_INT 1
17001: PPUSH
17002: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17006: LD_INT 12
17008: PPUSH
17009: LD_VAR 0 3
17013: PPUSH
17014: LD_INT 1
17016: PPUSH
17017: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17021: LD_INT 18
17023: PPUSH
17024: LD_VAR 0 3
17028: PPUSH
17029: LD_INT 1
17031: PPUSH
17032: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17036: LD_INT 60
17038: PPUSH
17039: LD_VAR 0 3
17043: PPUSH
17044: LD_INT 1
17046: PPUSH
17047: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17051: LD_INT 9
17053: PPUSH
17054: LD_VAR 0 3
17058: PPUSH
17059: LD_INT 1
17061: PPUSH
17062: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17066: LD_INT 30
17068: PPUSH
17069: LD_VAR 0 3
17073: PPUSH
17074: LD_INT 1
17076: PPUSH
17077: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17081: LD_INT 37
17083: PPUSH
17084: LD_VAR 0 3
17088: PPUSH
17089: LD_INT 1
17091: PPUSH
17092: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17096: LD_INT 5
17098: PPUSH
17099: LD_VAR 0 3
17103: PPUSH
17104: LD_INT 1
17106: PPUSH
17107: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17111: LD_INT 66
17113: PPUSH
17114: LD_VAR 0 3
17118: PPUSH
17119: LD_INT 1
17121: PPUSH
17122: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17126: LD_INT 21
17128: PPUSH
17129: LD_VAR 0 3
17133: PPUSH
17134: LD_INT 1
17136: PPUSH
17137: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17141: LD_INT 22
17143: PPUSH
17144: LD_VAR 0 3
17148: PPUSH
17149: LD_INT 1
17151: PPUSH
17152: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17156: LD_INT 54
17158: PPUSH
17159: LD_VAR 0 3
17163: PPUSH
17164: LD_INT 1
17166: PPUSH
17167: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17171: LD_INT 0
17173: PPUSH
17174: LD_VAR 0 3
17178: PPUSH
17179: LD_INT 1
17181: PPUSH
17182: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17186: LD_INT 1
17188: PPUSH
17189: LD_VAR 0 3
17193: PPUSH
17194: LD_INT 1
17196: PPUSH
17197: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17201: LD_INT 2
17203: PPUSH
17204: LD_VAR 0 3
17208: PPUSH
17209: LD_INT 1
17211: PPUSH
17212: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17216: LD_INT 3
17218: PPUSH
17219: LD_VAR 0 3
17223: PPUSH
17224: LD_INT 1
17226: PPUSH
17227: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17231: LD_INT 4
17233: PPUSH
17234: LD_VAR 0 3
17238: PPUSH
17239: LD_INT 1
17241: PPUSH
17242: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17246: LD_INT 5
17248: PPUSH
17249: LD_VAR 0 3
17253: PPUSH
17254: LD_INT 1
17256: PPUSH
17257: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17261: LD_INT 6
17263: PPUSH
17264: LD_VAR 0 3
17268: PPUSH
17269: LD_INT 1
17271: PPUSH
17272: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17276: LD_INT 7
17278: PPUSH
17279: LD_VAR 0 3
17283: PPUSH
17284: LD_INT 1
17286: PPUSH
17287: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17291: LD_INT 8
17293: PPUSH
17294: LD_VAR 0 3
17298: PPUSH
17299: LD_INT 1
17301: PPUSH
17302: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17306: LD_INT 10
17308: PPUSH
17309: LD_VAR 0 3
17313: PPUSH
17314: LD_INT 1
17316: PPUSH
17317: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17321: LD_INT 11
17323: PPUSH
17324: LD_VAR 0 3
17328: PPUSH
17329: LD_INT 1
17331: PPUSH
17332: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17336: LD_INT 12
17338: PPUSH
17339: LD_VAR 0 3
17343: PPUSH
17344: LD_INT 1
17346: PPUSH
17347: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17351: LD_INT 13
17353: PPUSH
17354: LD_VAR 0 3
17358: PPUSH
17359: LD_INT 1
17361: PPUSH
17362: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17366: LD_INT 14
17368: PPUSH
17369: LD_VAR 0 3
17373: PPUSH
17374: LD_INT 1
17376: PPUSH
17377: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17381: LD_INT 15
17383: PPUSH
17384: LD_VAR 0 3
17388: PPUSH
17389: LD_INT 1
17391: PPUSH
17392: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17396: LD_INT 16
17398: PPUSH
17399: LD_VAR 0 3
17403: PPUSH
17404: LD_INT 1
17406: PPUSH
17407: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17411: LD_INT 17
17413: PPUSH
17414: LD_VAR 0 3
17418: PPUSH
17419: LD_INT 1
17421: PPUSH
17422: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17426: LD_INT 19
17428: PPUSH
17429: LD_VAR 0 3
17433: PPUSH
17434: LD_INT 1
17436: PPUSH
17437: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17441: LD_INT 20
17443: PPUSH
17444: LD_VAR 0 3
17448: PPUSH
17449: LD_INT 1
17451: PPUSH
17452: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17456: LD_INT 21
17458: PPUSH
17459: LD_VAR 0 3
17463: PPUSH
17464: LD_INT 1
17466: PPUSH
17467: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17471: LD_INT 23
17473: PPUSH
17474: LD_VAR 0 3
17478: PPUSH
17479: LD_INT 1
17481: PPUSH
17482: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17486: LD_INT 26
17488: PPUSH
17489: LD_VAR 0 3
17493: PPUSH
17494: LD_INT 1
17496: PPUSH
17497: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17501: LD_INT 27
17503: PPUSH
17504: LD_VAR 0 3
17508: PPUSH
17509: LD_INT 1
17511: PPUSH
17512: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17516: LD_INT 28
17518: PPUSH
17519: LD_VAR 0 3
17523: PPUSH
17524: LD_INT 1
17526: PPUSH
17527: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17531: LD_INT 29
17533: PPUSH
17534: LD_VAR 0 3
17538: PPUSH
17539: LD_INT 1
17541: PPUSH
17542: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17546: LD_INT 30
17548: PPUSH
17549: LD_VAR 0 3
17553: PPUSH
17554: LD_INT 1
17556: PPUSH
17557: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17561: LD_INT 31
17563: PPUSH
17564: LD_VAR 0 3
17568: PPUSH
17569: LD_INT 1
17571: PPUSH
17572: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17576: LD_INT 32
17578: PPUSH
17579: LD_VAR 0 3
17583: PPUSH
17584: LD_INT 1
17586: PPUSH
17587: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17591: LD_INT 36
17593: PPUSH
17594: LD_VAR 0 3
17598: PPUSH
17599: LD_INT 1
17601: PPUSH
17602: CALL_OW 324
// end ; 5 :
17606: GO 19737
17608: LD_INT 5
17610: DOUBLE
17611: EQUAL
17612: IFTRUE 17616
17614: GO 18729
17616: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17617: LD_INT 35
17619: PPUSH
17620: LD_VAR 0 3
17624: PPUSH
17625: LD_INT 1
17627: PPUSH
17628: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17632: LD_INT 45
17634: PPUSH
17635: LD_VAR 0 3
17639: PPUSH
17640: LD_INT 1
17642: PPUSH
17643: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17647: LD_INT 46
17649: PPUSH
17650: LD_VAR 0 3
17654: PPUSH
17655: LD_INT 1
17657: PPUSH
17658: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17662: LD_INT 47
17664: PPUSH
17665: LD_VAR 0 3
17669: PPUSH
17670: LD_INT 1
17672: PPUSH
17673: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17677: LD_INT 1
17679: PPUSH
17680: LD_VAR 0 3
17684: PPUSH
17685: LD_INT 1
17687: PPUSH
17688: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17692: LD_INT 2
17694: PPUSH
17695: LD_VAR 0 3
17699: PPUSH
17700: LD_INT 1
17702: PPUSH
17703: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17707: LD_INT 11
17709: PPUSH
17710: LD_VAR 0 3
17714: PPUSH
17715: LD_INT 1
17717: PPUSH
17718: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17722: LD_INT 20
17724: PPUSH
17725: LD_VAR 0 3
17729: PPUSH
17730: LD_INT 1
17732: PPUSH
17733: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17737: LD_INT 48
17739: PPUSH
17740: LD_VAR 0 3
17744: PPUSH
17745: LD_INT 1
17747: PPUSH
17748: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17752: LD_INT 49
17754: PPUSH
17755: LD_VAR 0 3
17759: PPUSH
17760: LD_INT 1
17762: PPUSH
17763: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17767: LD_INT 69
17769: PPUSH
17770: LD_VAR 0 3
17774: PPUSH
17775: LD_INT 1
17777: PPUSH
17778: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17782: LD_INT 39
17784: PPUSH
17785: LD_VAR 0 3
17789: PPUSH
17790: LD_INT 1
17792: PPUSH
17793: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17797: LD_INT 34
17799: PPUSH
17800: LD_VAR 0 3
17804: PPUSH
17805: LD_INT 1
17807: PPUSH
17808: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17812: LD_INT 42
17814: PPUSH
17815: LD_VAR 0 3
17819: PPUSH
17820: LD_INT 1
17822: PPUSH
17823: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17827: LD_INT 44
17829: PPUSH
17830: LD_VAR 0 3
17834: PPUSH
17835: LD_INT 1
17837: PPUSH
17838: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17842: LD_INT 41
17844: PPUSH
17845: LD_VAR 0 3
17849: PPUSH
17850: LD_INT 1
17852: PPUSH
17853: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17857: LD_INT 40
17859: PPUSH
17860: LD_VAR 0 3
17864: PPUSH
17865: LD_INT 1
17867: PPUSH
17868: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17872: LD_INT 43
17874: PPUSH
17875: LD_VAR 0 3
17879: PPUSH
17880: LD_INT 1
17882: PPUSH
17883: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17887: LD_INT 70
17889: PPUSH
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_INT 1
17897: PPUSH
17898: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17902: LD_INT 51
17904: PPUSH
17905: LD_VAR 0 3
17909: PPUSH
17910: LD_INT 1
17912: PPUSH
17913: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17917: LD_INT 52
17919: PPUSH
17920: LD_VAR 0 3
17924: PPUSH
17925: LD_INT 1
17927: PPUSH
17928: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17932: LD_INT 6
17934: PPUSH
17935: LD_VAR 0 3
17939: PPUSH
17940: LD_INT 1
17942: PPUSH
17943: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17947: LD_INT 15
17949: PPUSH
17950: LD_VAR 0 3
17954: PPUSH
17955: LD_INT 1
17957: PPUSH
17958: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17962: LD_INT 7
17964: PPUSH
17965: LD_VAR 0 3
17969: PPUSH
17970: LD_INT 1
17972: PPUSH
17973: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17977: LD_INT 12
17979: PPUSH
17980: LD_VAR 0 3
17984: PPUSH
17985: LD_INT 1
17987: PPUSH
17988: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17992: LD_INT 17
17994: PPUSH
17995: LD_VAR 0 3
17999: PPUSH
18000: LD_INT 1
18002: PPUSH
18003: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18007: LD_INT 18
18009: PPUSH
18010: LD_VAR 0 3
18014: PPUSH
18015: LD_INT 1
18017: PPUSH
18018: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18022: LD_INT 60
18024: PPUSH
18025: LD_VAR 0 3
18029: PPUSH
18030: LD_INT 1
18032: PPUSH
18033: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18037: LD_INT 32
18039: PPUSH
18040: LD_VAR 0 3
18044: PPUSH
18045: LD_INT 1
18047: PPUSH
18048: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18052: LD_INT 9
18054: PPUSH
18055: LD_VAR 0 3
18059: PPUSH
18060: LD_INT 1
18062: PPUSH
18063: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18067: LD_INT 57
18069: PPUSH
18070: LD_VAR 0 3
18074: PPUSH
18075: LD_INT 1
18077: PPUSH
18078: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18082: LD_INT 30
18084: PPUSH
18085: LD_VAR 0 3
18089: PPUSH
18090: LD_INT 1
18092: PPUSH
18093: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18097: LD_INT 37
18099: PPUSH
18100: LD_VAR 0 3
18104: PPUSH
18105: LD_INT 1
18107: PPUSH
18108: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18112: LD_INT 63
18114: PPUSH
18115: LD_VAR 0 3
18119: PPUSH
18120: LD_INT 1
18122: PPUSH
18123: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18127: LD_INT 3
18129: PPUSH
18130: LD_VAR 0 3
18134: PPUSH
18135: LD_INT 1
18137: PPUSH
18138: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18142: LD_INT 4
18144: PPUSH
18145: LD_VAR 0 3
18149: PPUSH
18150: LD_INT 1
18152: PPUSH
18153: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18157: LD_INT 5
18159: PPUSH
18160: LD_VAR 0 3
18164: PPUSH
18165: LD_INT 1
18167: PPUSH
18168: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18172: LD_INT 66
18174: PPUSH
18175: LD_VAR 0 3
18179: PPUSH
18180: LD_INT 1
18182: PPUSH
18183: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18187: LD_INT 21
18189: PPUSH
18190: LD_VAR 0 3
18194: PPUSH
18195: LD_INT 1
18197: PPUSH
18198: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18202: LD_INT 22
18204: PPUSH
18205: LD_VAR 0 3
18209: PPUSH
18210: LD_INT 1
18212: PPUSH
18213: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18217: LD_INT 19
18219: PPUSH
18220: LD_VAR 0 3
18224: PPUSH
18225: LD_INT 1
18227: PPUSH
18228: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18232: LD_INT 54
18234: PPUSH
18235: LD_VAR 0 3
18239: PPUSH
18240: LD_INT 1
18242: PPUSH
18243: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18247: LD_INT 55
18249: PPUSH
18250: LD_VAR 0 3
18254: PPUSH
18255: LD_INT 1
18257: PPUSH
18258: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18262: LD_INT 0
18264: PPUSH
18265: LD_VAR 0 3
18269: PPUSH
18270: LD_INT 1
18272: PPUSH
18273: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18277: LD_INT 1
18279: PPUSH
18280: LD_VAR 0 3
18284: PPUSH
18285: LD_INT 1
18287: PPUSH
18288: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18292: LD_INT 2
18294: PPUSH
18295: LD_VAR 0 3
18299: PPUSH
18300: LD_INT 1
18302: PPUSH
18303: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18307: LD_INT 3
18309: PPUSH
18310: LD_VAR 0 3
18314: PPUSH
18315: LD_INT 1
18317: PPUSH
18318: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18322: LD_INT 4
18324: PPUSH
18325: LD_VAR 0 3
18329: PPUSH
18330: LD_INT 1
18332: PPUSH
18333: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18337: LD_INT 5
18339: PPUSH
18340: LD_VAR 0 3
18344: PPUSH
18345: LD_INT 1
18347: PPUSH
18348: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18352: LD_INT 6
18354: PPUSH
18355: LD_VAR 0 3
18359: PPUSH
18360: LD_INT 1
18362: PPUSH
18363: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18367: LD_INT 7
18369: PPUSH
18370: LD_VAR 0 3
18374: PPUSH
18375: LD_INT 1
18377: PPUSH
18378: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18382: LD_INT 8
18384: PPUSH
18385: LD_VAR 0 3
18389: PPUSH
18390: LD_INT 1
18392: PPUSH
18393: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18397: LD_INT 10
18399: PPUSH
18400: LD_VAR 0 3
18404: PPUSH
18405: LD_INT 1
18407: PPUSH
18408: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18412: LD_INT 11
18414: PPUSH
18415: LD_VAR 0 3
18419: PPUSH
18420: LD_INT 1
18422: PPUSH
18423: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18427: LD_INT 12
18429: PPUSH
18430: LD_VAR 0 3
18434: PPUSH
18435: LD_INT 1
18437: PPUSH
18438: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18442: LD_INT 13
18444: PPUSH
18445: LD_VAR 0 3
18449: PPUSH
18450: LD_INT 1
18452: PPUSH
18453: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18457: LD_INT 14
18459: PPUSH
18460: LD_VAR 0 3
18464: PPUSH
18465: LD_INT 1
18467: PPUSH
18468: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18472: LD_INT 15
18474: PPUSH
18475: LD_VAR 0 3
18479: PPUSH
18480: LD_INT 1
18482: PPUSH
18483: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18487: LD_INT 16
18489: PPUSH
18490: LD_VAR 0 3
18494: PPUSH
18495: LD_INT 1
18497: PPUSH
18498: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18502: LD_INT 17
18504: PPUSH
18505: LD_VAR 0 3
18509: PPUSH
18510: LD_INT 1
18512: PPUSH
18513: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18517: LD_INT 18
18519: PPUSH
18520: LD_VAR 0 3
18524: PPUSH
18525: LD_INT 1
18527: PPUSH
18528: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18532: LD_INT 19
18534: PPUSH
18535: LD_VAR 0 3
18539: PPUSH
18540: LD_INT 1
18542: PPUSH
18543: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18547: LD_INT 20
18549: PPUSH
18550: LD_VAR 0 3
18554: PPUSH
18555: LD_INT 1
18557: PPUSH
18558: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18562: LD_INT 21
18564: PPUSH
18565: LD_VAR 0 3
18569: PPUSH
18570: LD_INT 1
18572: PPUSH
18573: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18577: LD_INT 23
18579: PPUSH
18580: LD_VAR 0 3
18584: PPUSH
18585: LD_INT 1
18587: PPUSH
18588: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18592: LD_INT 26
18594: PPUSH
18595: LD_VAR 0 3
18599: PPUSH
18600: LD_INT 1
18602: PPUSH
18603: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18607: LD_INT 27
18609: PPUSH
18610: LD_VAR 0 3
18614: PPUSH
18615: LD_INT 1
18617: PPUSH
18618: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18622: LD_INT 28
18624: PPUSH
18625: LD_VAR 0 3
18629: PPUSH
18630: LD_INT 1
18632: PPUSH
18633: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18637: LD_INT 29
18639: PPUSH
18640: LD_VAR 0 3
18644: PPUSH
18645: LD_INT 1
18647: PPUSH
18648: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18652: LD_INT 30
18654: PPUSH
18655: LD_VAR 0 3
18659: PPUSH
18660: LD_INT 1
18662: PPUSH
18663: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18667: LD_INT 31
18669: PPUSH
18670: LD_VAR 0 3
18674: PPUSH
18675: LD_INT 1
18677: PPUSH
18678: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18682: LD_INT 32
18684: PPUSH
18685: LD_VAR 0 3
18689: PPUSH
18690: LD_INT 1
18692: PPUSH
18693: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18697: LD_INT 33
18699: PPUSH
18700: LD_VAR 0 3
18704: PPUSH
18705: LD_INT 1
18707: PPUSH
18708: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18712: LD_INT 36
18714: PPUSH
18715: LD_VAR 0 3
18719: PPUSH
18720: LD_INT 1
18722: PPUSH
18723: CALL_OW 324
// end ; 6 :
18727: GO 19737
18729: LD_INT 6
18731: DOUBLE
18732: EQUAL
18733: IFTRUE 18737
18735: GO 19662
18737: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18738: LD_INT 35
18740: PPUSH
18741: LD_VAR 0 3
18745: PPUSH
18746: LD_INT 1
18748: PPUSH
18749: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18753: LD_INT 45
18755: PPUSH
18756: LD_VAR 0 3
18760: PPUSH
18761: LD_INT 1
18763: PPUSH
18764: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18768: LD_INT 46
18770: PPUSH
18771: LD_VAR 0 3
18775: PPUSH
18776: LD_INT 1
18778: PPUSH
18779: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18783: LD_INT 47
18785: PPUSH
18786: LD_VAR 0 3
18790: PPUSH
18791: LD_INT 1
18793: PPUSH
18794: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18798: LD_INT 1
18800: PPUSH
18801: LD_VAR 0 3
18805: PPUSH
18806: LD_INT 1
18808: PPUSH
18809: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18813: LD_INT 2
18815: PPUSH
18816: LD_VAR 0 3
18820: PPUSH
18821: LD_INT 1
18823: PPUSH
18824: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18828: LD_INT 11
18830: PPUSH
18831: LD_VAR 0 3
18835: PPUSH
18836: LD_INT 1
18838: PPUSH
18839: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18843: LD_INT 20
18845: PPUSH
18846: LD_VAR 0 3
18850: PPUSH
18851: LD_INT 1
18853: PPUSH
18854: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18858: LD_INT 48
18860: PPUSH
18861: LD_VAR 0 3
18865: PPUSH
18866: LD_INT 1
18868: PPUSH
18869: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18873: LD_INT 49
18875: PPUSH
18876: LD_VAR 0 3
18880: PPUSH
18881: LD_INT 1
18883: PPUSH
18884: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18888: LD_INT 50
18890: PPUSH
18891: LD_VAR 0 3
18895: PPUSH
18896: LD_INT 1
18898: PPUSH
18899: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18903: LD_INT 69
18905: PPUSH
18906: LD_VAR 0 3
18910: PPUSH
18911: LD_INT 1
18913: PPUSH
18914: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18918: LD_INT 39
18920: PPUSH
18921: LD_VAR 0 3
18925: PPUSH
18926: LD_INT 1
18928: PPUSH
18929: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18933: LD_INT 34
18935: PPUSH
18936: LD_VAR 0 3
18940: PPUSH
18941: LD_INT 1
18943: PPUSH
18944: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18948: LD_INT 42
18950: PPUSH
18951: LD_VAR 0 3
18955: PPUSH
18956: LD_INT 1
18958: PPUSH
18959: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18963: LD_INT 44
18965: PPUSH
18966: LD_VAR 0 3
18970: PPUSH
18971: LD_INT 1
18973: PPUSH
18974: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18978: LD_INT 41
18980: PPUSH
18981: LD_VAR 0 3
18985: PPUSH
18986: LD_INT 1
18988: PPUSH
18989: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18993: LD_INT 13
18995: PPUSH
18996: LD_VAR 0 3
19000: PPUSH
19001: LD_INT 1
19003: PPUSH
19004: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
19008: LD_INT 40
19010: PPUSH
19011: LD_VAR 0 3
19015: PPUSH
19016: LD_INT 1
19018: PPUSH
19019: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19023: LD_INT 43
19025: PPUSH
19026: LD_VAR 0 3
19030: PPUSH
19031: LD_INT 1
19033: PPUSH
19034: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19038: LD_INT 70
19040: PPUSH
19041: LD_VAR 0 3
19045: PPUSH
19046: LD_INT 1
19048: PPUSH
19049: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
19053: LD_INT 23
19055: PPUSH
19056: LD_VAR 0 3
19060: PPUSH
19061: LD_INT 1
19063: PPUSH
19064: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19068: LD_INT 51
19070: PPUSH
19071: LD_VAR 0 3
19075: PPUSH
19076: LD_INT 1
19078: PPUSH
19079: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19083: LD_INT 52
19085: PPUSH
19086: LD_VAR 0 3
19090: PPUSH
19091: LD_INT 1
19093: PPUSH
19094: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19098: LD_INT 6
19100: PPUSH
19101: LD_VAR 0 3
19105: PPUSH
19106: LD_INT 1
19108: PPUSH
19109: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19113: LD_INT 15
19115: PPUSH
19116: LD_VAR 0 3
19120: PPUSH
19121: LD_INT 1
19123: PPUSH
19124: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19128: LD_INT 7
19130: PPUSH
19131: LD_VAR 0 3
19135: PPUSH
19136: LD_INT 1
19138: PPUSH
19139: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19143: LD_INT 12
19145: PPUSH
19146: LD_VAR 0 3
19150: PPUSH
19151: LD_INT 1
19153: PPUSH
19154: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19158: LD_INT 10
19160: PPUSH
19161: LD_VAR 0 3
19165: PPUSH
19166: LD_INT 1
19168: PPUSH
19169: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19173: LD_INT 17
19175: PPUSH
19176: LD_VAR 0 3
19180: PPUSH
19181: LD_INT 1
19183: PPUSH
19184: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19188: LD_INT 18
19190: PPUSH
19191: LD_VAR 0 3
19195: PPUSH
19196: LD_INT 1
19198: PPUSH
19199: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19203: LD_INT 60
19205: PPUSH
19206: LD_VAR 0 3
19210: PPUSH
19211: LD_INT 1
19213: PPUSH
19214: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19218: LD_INT 61
19220: PPUSH
19221: LD_VAR 0 3
19225: PPUSH
19226: LD_INT 1
19228: PPUSH
19229: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19233: LD_INT 32
19235: PPUSH
19236: LD_VAR 0 3
19240: PPUSH
19241: LD_INT 1
19243: PPUSH
19244: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19248: LD_INT 27
19250: PPUSH
19251: LD_VAR 0 3
19255: PPUSH
19256: LD_INT 1
19258: PPUSH
19259: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19263: LD_INT 36
19265: PPUSH
19266: LD_VAR 0 3
19270: PPUSH
19271: LD_INT 1
19273: PPUSH
19274: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19278: LD_INT 33
19280: PPUSH
19281: LD_VAR 0 3
19285: PPUSH
19286: LD_INT 1
19288: PPUSH
19289: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19293: LD_INT 9
19295: PPUSH
19296: LD_VAR 0 3
19300: PPUSH
19301: LD_INT 1
19303: PPUSH
19304: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19308: LD_INT 38
19310: PPUSH
19311: LD_VAR 0 3
19315: PPUSH
19316: LD_INT 1
19318: PPUSH
19319: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19323: LD_INT 57
19325: PPUSH
19326: LD_VAR 0 3
19330: PPUSH
19331: LD_INT 1
19333: PPUSH
19334: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19338: LD_INT 58
19340: PPUSH
19341: LD_VAR 0 3
19345: PPUSH
19346: LD_INT 1
19348: PPUSH
19349: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19353: LD_INT 28
19355: PPUSH
19356: LD_VAR 0 3
19360: PPUSH
19361: LD_INT 1
19363: PPUSH
19364: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19368: LD_INT 29
19370: PPUSH
19371: LD_VAR 0 3
19375: PPUSH
19376: LD_INT 1
19378: PPUSH
19379: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19383: LD_INT 30
19385: PPUSH
19386: LD_VAR 0 3
19390: PPUSH
19391: LD_INT 1
19393: PPUSH
19394: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19398: LD_INT 37
19400: PPUSH
19401: LD_VAR 0 3
19405: PPUSH
19406: LD_INT 1
19408: PPUSH
19409: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19413: LD_INT 63
19415: PPUSH
19416: LD_VAR 0 3
19420: PPUSH
19421: LD_INT 1
19423: PPUSH
19424: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19428: LD_INT 64
19430: PPUSH
19431: LD_VAR 0 3
19435: PPUSH
19436: LD_INT 1
19438: PPUSH
19439: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19443: LD_INT 3
19445: PPUSH
19446: LD_VAR 0 3
19450: PPUSH
19451: LD_INT 1
19453: PPUSH
19454: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19458: LD_INT 4
19460: PPUSH
19461: LD_VAR 0 3
19465: PPUSH
19466: LD_INT 1
19468: PPUSH
19469: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19473: LD_INT 5
19475: PPUSH
19476: LD_VAR 0 3
19480: PPUSH
19481: LD_INT 1
19483: PPUSH
19484: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19488: LD_INT 8
19490: PPUSH
19491: LD_VAR 0 3
19495: PPUSH
19496: LD_INT 1
19498: PPUSH
19499: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19503: LD_INT 66
19505: PPUSH
19506: LD_VAR 0 3
19510: PPUSH
19511: LD_INT 1
19513: PPUSH
19514: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19518: LD_INT 67
19520: PPUSH
19521: LD_VAR 0 3
19525: PPUSH
19526: LD_INT 1
19528: PPUSH
19529: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19533: LD_INT 21
19535: PPUSH
19536: LD_VAR 0 3
19540: PPUSH
19541: LD_INT 1
19543: PPUSH
19544: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19548: LD_INT 22
19550: PPUSH
19551: LD_VAR 0 3
19555: PPUSH
19556: LD_INT 1
19558: PPUSH
19559: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19563: LD_INT 19
19565: PPUSH
19566: LD_VAR 0 3
19570: PPUSH
19571: LD_INT 1
19573: PPUSH
19574: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19578: LD_INT 26
19580: PPUSH
19581: LD_VAR 0 3
19585: PPUSH
19586: LD_INT 1
19588: PPUSH
19589: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19593: LD_INT 54
19595: PPUSH
19596: LD_VAR 0 3
19600: PPUSH
19601: LD_INT 1
19603: PPUSH
19604: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19608: LD_INT 55
19610: PPUSH
19611: LD_VAR 0 3
19615: PPUSH
19616: LD_INT 1
19618: PPUSH
19619: CALL_OW 322
// for i = 0 to 39 do
19623: LD_ADDR_VAR 0 4
19627: PUSH
19628: DOUBLE
19629: LD_INT 0
19631: DEC
19632: ST_TO_ADDR
19633: LD_INT 39
19635: PUSH
19636: FOR_TO
19637: IFFALSE 19658
// SetRestrict ( i , side , true ) ;
19639: LD_VAR 0 4
19643: PPUSH
19644: LD_VAR 0 3
19648: PPUSH
19649: LD_INT 1
19651: PPUSH
19652: CALL_OW 324
19656: GO 19636
19658: POP
19659: POP
// end ; else
19660: GO 19737
19662: POP
// begin for i = 1 to 73 do
19663: LD_ADDR_VAR 0 4
19667: PUSH
19668: DOUBLE
19669: LD_INT 1
19671: DEC
19672: ST_TO_ADDR
19673: LD_INT 73
19675: PUSH
19676: FOR_TO
19677: IFFALSE 19698
// SetTech ( i , side , state_enabled ) ;
19679: LD_VAR 0 4
19683: PPUSH
19684: LD_VAR 0 3
19688: PPUSH
19689: LD_INT 1
19691: PPUSH
19692: CALL_OW 322
19696: GO 19676
19698: POP
19699: POP
// for i = 0 to 39 do
19700: LD_ADDR_VAR 0 4
19704: PUSH
19705: DOUBLE
19706: LD_INT 0
19708: DEC
19709: ST_TO_ADDR
19710: LD_INT 39
19712: PUSH
19713: FOR_TO
19714: IFFALSE 19735
// SetRestrict ( i , side , true ) ;
19716: LD_VAR 0 4
19720: PPUSH
19721: LD_VAR 0 3
19725: PPUSH
19726: LD_INT 1
19728: PPUSH
19729: CALL_OW 324
19733: GO 19713
19735: POP
19736: POP
// end ; end ; end ;
19737: GO 15742
19739: POP
19740: POP
// end ;
19741: LD_VAR 0 2
19745: RET
