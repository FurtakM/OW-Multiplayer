// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_public_score , def_amount_score , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , amount_of_apemen , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , amount_score , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , king_territory , final_count , Player_Side , player_team ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if MultiPlayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type = mp_game_type ;
  79: LD_ADDR_EXP 18
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side = mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  99: LD_ADDR_EXP 37
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 109: LD_ADDR_EXP 34
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 119: LD_ADDR_EXP 38
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 36
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams = mp_teams ;
 139: LD_ADDR_EXP 35
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 352
// begin Game_Type = 3 ;
 151: LD_ADDR_EXP 18
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side = 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 37
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 34
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 38
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 36
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 323: LD_ADDR_EXP 35
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: ST_TO_ADDR
// end ; for i := 1 to 8 do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_INT 8
 364: PUSH
 365: FOR_TO
 366: IFFALSE 453
// if Multiplayer_GetPlayerIsSpec ( i ) then
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 530
 377: IFFALSE 451
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 379: LD_ADDR_EXP 37
 383: PUSH
 384: LD_EXP 37
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_INT 0
 396: PPUSH
 397: CALL_OW 1
 401: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 402: LD_ADDR_EXP 35
 406: PUSH
 407: LD_EXP 35
 411: PPUSH
 412: LD_EXP 34
 416: PUSH
 417: LD_VAR 0 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 35
 427: PUSH
 428: LD_EXP 34
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: ARRAY
 439: PUSH
 440: LD_VAR 0 2
 444: DIFF
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// end ;
 451: GO 365
 453: POP
 454: POP
// if MultiPlayer then
 455: LD_OWVAR 4
 459: IFFALSE 671
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 461: LD_ADDR_EXP 1
 465: PUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_INT 1
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 487: LD_ADDR_EXP 3
 491: PUSH
 492: LD_INT 2
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 500: LD_ADDR_EXP 4
 504: PUSH
 505: LD_INT 3
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 513: LD_ADDR_EXP 5
 517: PUSH
 518: LD_INT 4
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 526: LD_ADDR_EXP 6
 530: PUSH
 531: LD_INT 5
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 539: LD_ADDR_EXP 8
 543: PUSH
 544: LD_INT 10
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 552: LD_ADDR_EXP 9
 556: PUSH
 557: LD_INT 11
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 13 ) ;
 578: LD_ADDR_EXP 11
 582: PUSH
 583: LD_INT 13
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 14 ) ;
 591: LD_ADDR_EXP 12
 595: PUSH
 596: LD_INT 14
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 604: LD_ADDR_EXP 13
 608: PUSH
 609: LD_INT 15
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_public_score = GetMultiplayerSetting ( 16 ) ;
 617: LD_ADDR_EXP 14
 621: PUSH
 622: LD_INT 16
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_amount_score = GetMultiplayerSetting ( 17 ) ;
 630: LD_ADDR_EXP 15
 634: PUSH
 635: LD_INT 17
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 643: LD_ADDR_EXP 16
 647: PUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 656: LD_ADDR_VAR 0 3
 660: PUSH
 661: LD_INT 22
 663: PPUSH
 664: CALL_OW 426
 668: ST_TO_ADDR
// end else
 669: GO 803
// begin randomize ;
 671: CALL_OW 10
// def_base_level = 3 ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_INT 3
 682: ST_TO_ADDR
// def_amount_of_people = 3 ;
 683: LD_ADDR_EXP 2
 687: PUSH
 688: LD_INT 3
 690: ST_TO_ADDR
// def_skill_level = 1 ;
 691: LD_ADDR_EXP 3
 695: PUSH
 696: LD_INT 1
 698: ST_TO_ADDR
// def_starting_resources = 2 ;
 699: LD_ADDR_EXP 4
 703: PUSH
 704: LD_INT 2
 706: ST_TO_ADDR
// def_shipments_density = 50 ;
 707: LD_ADDR_EXP 5
 711: PUSH
 712: LD_INT 50
 714: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
 715: LD_ADDR_EXP 6
 719: PUSH
 720: LD_INT 0
 722: ST_TO_ADDR
// def_shared_vision = 1 ;
 723: LD_ADDR_EXP 8
 727: PUSH
 728: LD_INT 1
 730: ST_TO_ADDR
// def_morale_flags = 1 ;
 731: LD_ADDR_EXP 9
 735: PUSH
 736: LD_INT 1
 738: ST_TO_ADDR
// def_siberite_detection = 1 ;
 739: LD_ADDR_EXP 10
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 747: LD_ADDR_EXP 12
 751: PUSH
 752: LD_INT 3
 754: ST_TO_ADDR
// def_people_respawning = 2 ;
 755: LD_ADDR_EXP 11
 759: PUSH
 760: LD_INT 2
 762: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 763: LD_ADDR_EXP 13
 767: PUSH
 768: LD_INT 0
 770: ST_TO_ADDR
// def_public_score = 1 ;
 771: LD_ADDR_EXP 14
 775: PUSH
 776: LD_INT 1
 778: ST_TO_ADDR
// def_amount_score = 0 ;
 779: LD_ADDR_EXP 15
 783: PUSH
 784: LD_INT 0
 786: ST_TO_ADDR
// def_builduptime = 1 ;
 787: LD_ADDR_EXP 16
 791: PUSH
 792: LD_INT 1
 794: ST_TO_ADDR
// tech_level = 4 ;
 795: LD_ADDR_VAR 0 3
 799: PUSH
 800: LD_INT 4
 802: ST_TO_ADDR
// end ; Player_Side = Your_Side ;
 803: LD_ADDR_EXP 47
 807: PUSH
 808: LD_OWVAR 2
 812: ST_TO_ADDR
// player_team = Side_Teams [ Player_Side ] ;
 813: LD_ADDR_EXP 48
 817: PUSH
 818: LD_EXP 34
 822: PUSH
 823: LD_EXP 47
 827: ARRAY
 828: ST_TO_ADDR
// if isSGUI then
 829: LD_OWVAR 83
 833: IFFALSE 841
// setMpTechs ( ) else
 835: CALL 11983 0 0
 839: GO 854
// SetMpTechLevel ( tech_level + 1 ) ;
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: PLUS
 849: PPUSH
 850: CALL 12130 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 854: LD_ADDR_EXP 19
 858: PUSH
 859: LD_INT 0
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 1
 867: PUSH
 868: LD_INT 1
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 1
 881: PUSH
 882: LD_INT 1
 884: PLUS
 885: ARRAY
 886: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 887: LD_ADDR_EXP 20
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: LD_INT 0
 897: PUSH
 898: LD_INT 2
 900: PUSH
 901: LD_INT 4
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: PUSH
 910: LD_EXP 1
 914: PUSH
 915: LD_INT 1
 917: PLUS
 918: ARRAY
 919: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 920: LD_ADDR_EXP 21
 924: PUSH
 925: LD_INT 9
 927: PUSH
 928: LD_INT 12
 930: PUSH
 931: LD_INT 15
 933: PUSH
 934: LD_INT 24
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_EXP 2
 947: PUSH
 948: LD_INT 1
 950: PLUS
 951: ARRAY
 952: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 953: LD_ADDR_EXP 23
 957: PUSH
 958: LD_INT 2
 960: PUSH
 961: LD_INT 3
 963: PUSH
 964: LD_INT 4
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: PUSH
 976: LD_EXP 3
 980: PUSH
 981: LD_INT 1
 983: PLUS
 984: ARRAY
 985: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 986: LD_ADDR_EXP 25
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: LD_INT 0
 996: PUSH
 997: LD_INT 0
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 30
1007: PUSH
1008: LD_INT 0
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: PUSH
1019: LD_INT 50
1021: PUSH
1022: LD_INT 20
1024: PUSH
1025: LD_INT 0
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_INT 80
1035: PUSH
1036: LD_INT 40
1038: PUSH
1039: LD_INT 20
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 4
1057: PUSH
1058: LD_INT 1
1060: PLUS
1061: ARRAY
1062: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1063: LD_ADDR_EXP 24
1067: PUSH
1068: LD_INT 10
1070: PUSH
1071: EMPTY
1072: LIST
1073: PUSH
1074: LD_INT 7
1076: PUSH
1077: LD_INT 14
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 6
1086: PUSH
1087: LD_INT 12
1089: PUSH
1090: LD_INT 18
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 5
1100: PUSH
1101: LD_INT 10
1103: PUSH
1104: LD_INT 15
1106: PUSH
1107: LD_INT 20
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 4
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// shipments_density = 150 - def_shipments_density ;
1132: LD_ADDR_EXP 26
1136: PUSH
1137: LD_INT 150
1139: PUSH
1140: LD_EXP 5
1144: MINUS
1145: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1146: LD_ADDR_EXP 22
1150: PUSH
1151: LD_INT 0
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 2
1159: PUSH
1160: LD_INT 3
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: LD_EXP 12
1173: PUSH
1174: LD_INT 1
1176: PLUS
1177: ARRAY
1178: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1179: LD_ADDR_EXP 28
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: LD_INT 165
1189: PUSH
1190: LD_INT 140
1192: PUSH
1193: LD_INT 115
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: PUSH
1202: LD_EXP 12
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: ARRAY
1211: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1212: LD_ADDR_EXP 29
1216: PUSH
1217: LD_INT 0
1219: PUSH
1220: LD_INT 8400
1222: PUSH
1223: LD_INT 1750
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: PUSH
1231: LD_EXP 11
1235: PUSH
1236: LD_INT 1
1238: PLUS
1239: ARRAY
1240: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_INT 0
1248: PUSH
1249: LD_INT 21000
1251: PUSH
1252: LD_INT 4200
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 11
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1270: LD_ADDR_EXP 27
1274: PUSH
1275: LD_INT 1
1277: NEG
1278: PUSH
1279: LD_INT 350
1281: PUSH
1282: LD_INT 700
1284: PUSH
1285: LD_INT 1400
1287: PUSH
1288: LD_INT 0
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: PUSH
1298: LD_EXP 9
1302: PUSH
1303: LD_INT 1
1305: PLUS
1306: ARRAY
1307: ST_TO_ADDR
// battle_flags_id = [ ] ;
1308: LD_ADDR_EXP 44
1312: PUSH
1313: EMPTY
1314: ST_TO_ADDR
// amount_score = [ 200 , 300 , 500 , 700 , 1000 , 1500 ] [ def_amount_score + 1 ] ;
1315: LD_ADDR_EXP 31
1319: PUSH
1320: LD_INT 200
1322: PUSH
1323: LD_INT 300
1325: PUSH
1326: LD_INT 500
1328: PUSH
1329: LD_INT 700
1331: PUSH
1332: LD_INT 1000
1334: PUSH
1335: LD_INT 1500
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: PUSH
1346: LD_EXP 15
1350: PUSH
1351: LD_INT 1
1353: PLUS
1354: ARRAY
1355: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1356: LD_EXP 13
1360: PUSH
1361: LD_INT 0
1363: EQUAL
1364: IFFALSE 1376
// siberite_bomb_Delay = 0 else
1366: LD_ADDR_EXP 32
1370: PUSH
1371: LD_INT 0
1373: ST_TO_ADDR
1374: GO 1398
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1376: LD_ADDR_EXP 32
1380: PUSH
1381: LD_EXP 13
1385: PUSH
1386: LD_INT 1
1388: MINUS
1389: PUSH
1390: LD_INT 21000
1392: MUL
1393: PUSH
1394: LD_INT 1
1396: PLUS
1397: ST_TO_ADDR
// king_territory = KopecStred ;
1398: LD_ADDR_EXP 45
1402: PUSH
1403: LD_INT 2
1405: ST_TO_ADDR
// final_count = amount_score ;
1406: LD_ADDR_EXP 46
1410: PUSH
1411: LD_EXP 31
1415: ST_TO_ADDR
// end ;
1416: LD_VAR 0 1
1420: RET
// function init_map ; var i ; begin
1421: LD_INT 0
1423: PPUSH
1424: PPUSH
// extra_oil_deposits_locations := [ [ 53 , 26 ] , [ 51 , 53 ] , [ 129 , 20 ] , [ 155 , 53 ] , [ 187 , 139 ] , [ 183 , 107 ] , [ 106 , 135 ] , [ 80 , 106 ] ] ;
1425: LD_ADDR_EXP 43
1429: PUSH
1430: LD_INT 53
1432: PUSH
1433: LD_INT 26
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: LD_INT 51
1442: PUSH
1443: LD_INT 53
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 129
1452: PUSH
1453: LD_INT 20
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 155
1462: PUSH
1463: LD_INT 53
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 187
1472: PUSH
1473: LD_INT 139
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 183
1482: PUSH
1483: LD_INT 107
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 106
1492: PUSH
1493: LD_INT 135
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 80
1502: PUSH
1503: LD_INT 106
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// depot_def := [ [ 29 , 22 , 3 ] , [ 154 , 21 , 3 ] , [ 85 , 138 , 0 ] , [ 212 , 141 , 5 ] ] ;
1520: LD_ADDR_EXP 40
1524: PUSH
1525: LD_INT 29
1527: PUSH
1528: LD_INT 22
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 154
1541: PUSH
1542: LD_INT 21
1544: PUSH
1545: LD_INT 3
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 85
1555: PUSH
1556: LD_INT 138
1558: PUSH
1559: LD_INT 0
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 212
1569: PUSH
1570: LD_INT 141
1572: PUSH
1573: LD_INT 5
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// start_def := [ [ 33 , 25 ] , [ 151 , 24 ] , [ 89 , 135 ] , [ 205 , 137 ] ] ;
1587: LD_ADDR_EXP 42
1591: PUSH
1592: LD_INT 33
1594: PUSH
1595: LD_INT 25
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 151
1604: PUSH
1605: LD_INT 24
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 89
1614: PUSH
1615: LD_INT 135
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: LD_INT 205
1624: PUSH
1625: LD_INT 137
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: ST_TO_ADDR
// breastworks_def := [ [ [ 46 , 13 , 4 ] , [ 43 , 39 , 4 ] , [ 47 , 25 , 5 ] , [ 45 , 44 , 5 ] ] , [ [ 129 , 12 , 0 ] , [ 153 , 34 , 1 ] , [ 139 , 24 , 0 ] , [ 158 , 41 , 0 ] ] , [ [ 84 , 121 , 4 ] , [ 109 , 143 , 4 ] , [ 87 , 126 , 4 ] , [ 111 , 148 , 4 ] ] , [ [ 194 , 146 , 2 ] , [ 195 , 121 , 1 ] , [ 193 , 135 , 2 ] , [ 192 , 116 , 2 ] ] , ] ;
1638: LD_ADDR_EXP 41
1642: PUSH
1643: LD_INT 46
1645: PUSH
1646: LD_INT 13
1648: PUSH
1649: LD_INT 4
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 43
1659: PUSH
1660: LD_INT 39
1662: PUSH
1663: LD_INT 4
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 47
1673: PUSH
1674: LD_INT 25
1676: PUSH
1677: LD_INT 5
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 45
1687: PUSH
1688: LD_INT 44
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 129
1707: PUSH
1708: LD_INT 12
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 153
1721: PUSH
1722: LD_INT 34
1724: PUSH
1725: LD_INT 1
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 139
1735: PUSH
1736: LD_INT 24
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 158
1749: PUSH
1750: LD_INT 41
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 84
1769: PUSH
1770: LD_INT 121
1772: PUSH
1773: LD_INT 4
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 109
1783: PUSH
1784: LD_INT 143
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: LD_INT 87
1797: PUSH
1798: LD_INT 126
1800: PUSH
1801: LD_INT 4
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: LD_INT 111
1811: PUSH
1812: LD_INT 148
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 194
1831: PUSH
1832: LD_INT 146
1834: PUSH
1835: LD_INT 2
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 195
1845: PUSH
1846: LD_INT 121
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 193
1859: PUSH
1860: LD_INT 135
1862: PUSH
1863: LD_INT 2
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 192
1873: PUSH
1874: LD_INT 116
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: ST_TO_ADDR
// if def_extra_oil_deposits then
1897: LD_EXP 6
1901: IFFALSE 1945
// for i in extra_oil_deposits_locations do
1903: LD_ADDR_VAR 0 2
1907: PUSH
1908: LD_EXP 43
1912: PUSH
1913: FOR_IN
1914: IFFALSE 1943
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1916: LD_VAR 0 2
1920: PUSH
1921: LD_INT 1
1923: ARRAY
1924: PPUSH
1925: LD_VAR 0 2
1929: PUSH
1930: LD_INT 2
1932: ARRAY
1933: PPUSH
1934: LD_INT 2
1936: PPUSH
1937: CALL_OW 62
1941: GO 1913
1943: POP
1944: POP
// end ;
1945: LD_VAR 0 1
1949: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1950: LD_INT 0
1952: PPUSH
1953: PPUSH
1954: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1955: LD_ADDR_EXP 39
1959: PUSH
1960: LD_EXP 34
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: EMPTY
1969: LIST
1970: DIFF
1971: PUSH
1972: LD_INT 1
1974: GREATER
1975: ST_TO_ADDR
// if not Team_Game then
1976: LD_EXP 39
1980: NOT
1981: IFFALSE 2079
// begin for i = 1 to 8 do
1983: LD_ADDR_VAR 0 2
1987: PUSH
1988: DOUBLE
1989: LD_INT 1
1991: DEC
1992: ST_TO_ADDR
1993: LD_INT 8
1995: PUSH
1996: FOR_TO
1997: IFFALSE 2075
// for j = 1 to 8 do
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: DOUBLE
2005: LD_INT 1
2007: DEC
2008: ST_TO_ADDR
2009: LD_INT 8
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2071
// if i <> j then
2015: LD_VAR 0 2
2019: PUSH
2020: LD_VAR 0 3
2024: NONEQUAL
2025: IFFALSE 2049
// SetAttitude ( i , j , att_neutral , true ) else
2027: LD_VAR 0 2
2031: PPUSH
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: LD_INT 1
2042: PPUSH
2043: CALL_OW 80
2047: GO 2069
// SetAttitude ( i , j , att_friend , true ) ;
2049: LD_VAR 0 2
2053: PPUSH
2054: LD_VAR 0 3
2058: PPUSH
2059: LD_INT 1
2061: PPUSH
2062: LD_INT 1
2064: PPUSH
2065: CALL_OW 80
2069: GO 2012
2071: POP
2072: POP
2073: GO 1996
2075: POP
2076: POP
// end else
2077: GO 2254
// begin if def_shared_vision then
2079: LD_EXP 8
2083: IFFALSE 2148
// begin for i in Teams do
2085: LD_ADDR_VAR 0 2
2089: PUSH
2090: LD_EXP 35
2094: PUSH
2095: FOR_IN
2096: IFFALSE 2146
// for j = 2 to i do
2098: LD_ADDR_VAR 0 3
2102: PUSH
2103: DOUBLE
2104: LD_INT 2
2106: DEC
2107: ST_TO_ADDR
2108: LD_VAR 0 2
2112: PUSH
2113: FOR_TO
2114: IFFALSE 2142
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2116: LD_VAR 0 2
2120: PUSH
2121: LD_VAR 0 3
2125: ARRAY
2126: PPUSH
2127: LD_VAR 0 2
2131: PUSH
2132: LD_INT 1
2134: ARRAY
2135: PPUSH
2136: CALL_OW 343
2140: GO 2113
2142: POP
2143: POP
2144: GO 2095
2146: POP
2147: POP
// end ; for i = 1 to 8 do
2148: LD_ADDR_VAR 0 2
2152: PUSH
2153: DOUBLE
2154: LD_INT 1
2156: DEC
2157: ST_TO_ADDR
2158: LD_INT 8
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2252
// for j = 1 to 8 do
2164: LD_ADDR_VAR 0 3
2168: PUSH
2169: DOUBLE
2170: LD_INT 1
2172: DEC
2173: ST_TO_ADDR
2174: LD_INT 8
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2248
// if Side_Teams [ i ] = Side_Teams [ j ] then
2180: LD_EXP 34
2184: PUSH
2185: LD_VAR 0 2
2189: ARRAY
2190: PUSH
2191: LD_EXP 34
2195: PUSH
2196: LD_VAR 0 3
2200: ARRAY
2201: EQUAL
2202: IFFALSE 2226
// SetAttitude ( i , j , att_friend , true ) else
2204: LD_VAR 0 2
2208: PPUSH
2209: LD_VAR 0 3
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: CALL_OW 80
2224: GO 2246
// SetAttitude ( i , j , att_enemy , true ) ;
2226: LD_VAR 0 2
2230: PPUSH
2231: LD_VAR 0 3
2235: PPUSH
2236: LD_INT 2
2238: PPUSH
2239: LD_INT 1
2241: PPUSH
2242: CALL_OW 80
2246: GO 2177
2248: POP
2249: POP
2250: GO 2161
2252: POP
2253: POP
// end ; end ;
2254: LD_VAR 0 1
2258: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2259: LD_INT 0
2261: PPUSH
2262: PPUSH
2263: PPUSH
2264: PPUSH
// result := [ ] ;
2265: LD_ADDR_VAR 0 6
2269: PUSH
2270: EMPTY
2271: ST_TO_ADDR
// for i := 1 to count do
2272: LD_ADDR_VAR 0 7
2276: PUSH
2277: DOUBLE
2278: LD_INT 1
2280: DEC
2281: ST_TO_ADDR
2282: LD_VAR 0 1
2286: PUSH
2287: FOR_TO
2288: IFFALSE 2684
// begin uc_direction := Rand ( 0 , 5 ) ;
2290: LD_ADDR_OWVAR 24
2294: PUSH
2295: LD_INT 0
2297: PPUSH
2298: LD_INT 5
2300: PPUSH
2301: CALL_OW 12
2305: ST_TO_ADDR
// if commander then
2306: LD_LOC 1
2310: IFFALSE 2419
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2312: LD_ADDR_OWVAR 26
2316: PUSH
2317: LD_OWVAR 19
2321: PUSH
2322: LD_OWVAR 20
2326: ARRAY
2327: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2328: LD_INT 1
2330: PPUSH
2331: LD_INT 2
2333: PPUSH
2334: CALL_OW 12
2338: PPUSH
2339: LD_VAR 0 2
2343: PPUSH
2344: LD_EXP 23
2348: PUSH
2349: LD_INT 2
2351: PLUS
2352: PPUSH
2353: CALL_OW 380
// hc_importance := 105 ;
2357: LD_ADDR_OWVAR 32
2361: PUSH
2362: LD_INT 105
2364: ST_TO_ADDR
// commander := false ;
2365: LD_ADDR_LOC 1
2369: PUSH
2370: LD_INT 0
2372: ST_TO_ADDR
// if Multiplayer then
2373: LD_OWVAR 4
2377: IFFALSE 2417
// begin hc_gallery := MULTIAVATARS ;
2379: LD_ADDR_OWVAR 33
2383: PUSH
2384: LD_STRING MULTIAVATARS
2386: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2387: LD_ADDR_OWVAR 34
2391: PUSH
2392: LD_OWVAR 20
2396: PPUSH
2397: CALL_OW 525
2401: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2402: LD_ADDR_OWVAR 27
2406: PUSH
2407: LD_OWVAR 20
2411: PPUSH
2412: CALL_OW 526
2416: ST_TO_ADDR
// end ; end else
2417: GO 2482
// begin hc_name :=  ;
2419: LD_ADDR_OWVAR 26
2423: PUSH
2424: LD_STRING 
2426: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2427: LD_INT 1
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: CALL_OW 12
2437: PPUSH
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_EXP 23
2447: PPUSH
2448: CALL_OW 380
// hc_importance := 0 ;
2452: LD_ADDR_OWVAR 32
2456: PUSH
2457: LD_INT 0
2459: ST_TO_ADDR
// if Multiplayer then
2460: LD_OWVAR 4
2464: IFFALSE 2482
// begin hc_gallery :=  ;
2466: LD_ADDR_OWVAR 33
2470: PUSH
2471: LD_STRING 
2473: ST_TO_ADDR
// hc_face_number := 0 ;
2474: LD_ADDR_OWVAR 34
2478: PUSH
2479: LD_INT 0
2481: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2482: LD_ADDR_VAR 0 9
2486: PUSH
2487: CALL_OW 44
2491: ST_TO_ADDR
// if global_defined then
2492: LD_LOC 3
2496: IFFALSE 2636
// begin if ( cl = class_soldier ) then
2498: LD_VAR 0 2
2502: PUSH
2503: LD_INT 1
2505: EQUAL
2506: IFFALSE 2526
// j := i + soldiers_created else
2508: LD_ADDR_VAR 0 8
2512: PUSH
2513: LD_VAR 0 7
2517: PUSH
2518: LD_LOC 4
2522: PLUS
2523: ST_TO_ADDR
2524: GO 2536
// j := i ;
2526: LD_ADDR_VAR 0 8
2530: PUSH
2531: LD_VAR 0 7
2535: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2536: LD_LOC 2
2540: PUSH
2541: LD_VAR 0 2
2545: ARRAY
2546: PUSH
2547: LD_VAR 0 8
2551: ARRAY
2552: PPUSH
2553: LD_VAR 0 9
2557: PPUSH
2558: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2562: LD_VAR 0 9
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: LD_LOC 2
2574: PUSH
2575: LD_VAR 0 2
2579: ARRAY
2580: PUSH
2581: LD_VAR 0 8
2585: ARRAY
2586: PPUSH
2587: LD_INT 2
2589: PPUSH
2590: CALL_OW 260
2594: PPUSH
2595: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2599: LD_VAR 0 9
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: LD_LOC 2
2611: PUSH
2612: LD_VAR 0 2
2616: ARRAY
2617: PUSH
2618: LD_VAR 0 8
2622: ARRAY
2623: PPUSH
2624: LD_INT 1
2626: PPUSH
2627: CALL_OW 260
2631: PPUSH
2632: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2636: LD_VAR 0 9
2640: PPUSH
2641: LD_VAR 0 3
2645: PPUSH
2646: LD_VAR 0 4
2650: PPUSH
2651: LD_VAR 0 5
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 50
// result := result ^ [ un ] ;
2663: LD_ADDR_VAR 0 6
2667: PUSH
2668: LD_VAR 0 6
2672: PUSH
2673: LD_VAR 0 9
2677: PUSH
2678: EMPTY
2679: LIST
2680: ADD
2681: ST_TO_ADDR
// end ;
2682: GO 2287
2684: POP
2685: POP
// if not global_defined then
2686: LD_LOC 3
2690: NOT
2691: IFFALSE 2769
// if ( global_units >= cl ) then
2693: LD_LOC 2
2697: PUSH
2698: LD_VAR 0 2
2702: GREATEREQUAL
2703: IFFALSE 2744
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2705: LD_ADDR_LOC 2
2709: PUSH
2710: LD_LOC 2
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: LD_LOC 2
2724: PUSH
2725: LD_VAR 0 2
2729: ARRAY
2730: PUSH
2731: LD_VAR 0 6
2735: ADD
2736: PPUSH
2737: CALL_OW 1
2741: ST_TO_ADDR
2742: GO 2769
// global_units := Replace ( global_units , cl , result ) ;
2744: LD_ADDR_LOC 2
2748: PUSH
2749: LD_LOC 2
2753: PPUSH
2754: LD_VAR 0 2
2758: PPUSH
2759: LD_VAR 0 6
2763: PPUSH
2764: CALL_OW 1
2768: ST_TO_ADDR
// end ;
2769: LD_VAR 0 6
2773: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , sol , br , dep ; begin
2774: LD_INT 0
2776: PPUSH
2777: PPUSH
2778: PPUSH
2779: PPUSH
2780: PPUSH
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
// if side in [ 0 , 9 ] then
2786: LD_VAR 0 1
2790: PUSH
2791: LD_INT 0
2793: PUSH
2794: LD_INT 9
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: IN
2801: IFFALSE 2805
// exit ;
2803: GO 3912
// pos := Side_Positions [ side ] ;
2805: LD_ADDR_VAR 0 3
2809: PUSH
2810: LD_EXP 37
2814: PUSH
2815: LD_VAR 0 1
2819: ARRAY
2820: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2821: LD_ADDR_OWVAR 21
2825: PUSH
2826: LD_EXP 38
2830: PUSH
2831: LD_VAR 0 1
2835: ARRAY
2836: ST_TO_ADDR
// uc_side := side ;
2837: LD_ADDR_OWVAR 20
2841: PUSH
2842: LD_VAR 0 1
2846: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2847: LD_ADDR_VAR 0 4
2851: PUSH
2852: LD_EXP 40
2856: PUSH
2857: LD_VAR 0 3
2861: ARRAY
2862: PUSH
2863: LD_INT 1
2865: ARRAY
2866: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2867: LD_ADDR_VAR 0 5
2871: PUSH
2872: LD_EXP 40
2876: PUSH
2877: LD_VAR 0 3
2881: ARRAY
2882: PUSH
2883: LD_INT 2
2885: ARRAY
2886: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2887: LD_ADDR_VAR 0 6
2891: PUSH
2892: LD_EXP 40
2896: PUSH
2897: LD_VAR 0 3
2901: ARRAY
2902: PUSH
2903: LD_INT 3
2905: ARRAY
2906: ST_TO_ADDR
// if is_depot then
2907: LD_EXP 19
2911: IFFALSE 3044
// begin bc_type = b_depot ;
2913: LD_ADDR_OWVAR 42
2917: PUSH
2918: LD_INT 0
2920: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2921: LD_ADDR_VAR 0 11
2925: PUSH
2926: LD_VAR 0 4
2930: PPUSH
2931: LD_VAR 0 5
2935: PPUSH
2936: LD_VAR 0 6
2940: PPUSH
2941: CALL_OW 47
2945: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2946: LD_VAR 0 11
2950: PPUSH
2951: LD_STRING @
2953: PUSH
2954: LD_VAR 0 1
2958: STR
2959: PPUSH
2960: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2964: LD_VAR 0 11
2968: PPUSH
2969: CALL_OW 274
2973: PPUSH
2974: LD_INT 1
2976: PPUSH
2977: LD_EXP 25
2981: PUSH
2982: LD_INT 1
2984: ARRAY
2985: PPUSH
2986: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2990: LD_VAR 0 11
2994: PPUSH
2995: CALL_OW 274
2999: PPUSH
3000: LD_INT 2
3002: PPUSH
3003: LD_EXP 25
3007: PUSH
3008: LD_INT 2
3010: ARRAY
3011: PPUSH
3012: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3016: LD_VAR 0 11
3020: PPUSH
3021: CALL_OW 274
3025: PPUSH
3026: LD_INT 3
3028: PPUSH
3029: LD_EXP 25
3033: PUSH
3034: LD_INT 3
3036: ARRAY
3037: PPUSH
3038: CALL_OW 277
// end else
3042: GO 3188
// begin for i := 1 to 3 do
3044: LD_ADDR_VAR 0 7
3048: PUSH
3049: DOUBLE
3050: LD_INT 1
3052: DEC
3053: ST_TO_ADDR
3054: LD_INT 3
3056: PUSH
3057: FOR_TO
3058: IFFALSE 3186
// begin r := starting_resources [ i ] ;
3060: LD_ADDR_VAR 0 8
3064: PUSH
3065: LD_EXP 25
3069: PUSH
3070: LD_VAR 0 7
3074: ARRAY
3075: ST_TO_ADDR
// while r >= 10 do
3076: LD_VAR 0 8
3080: PUSH
3081: LD_INT 10
3083: GREATEREQUAL
3084: IFFALSE 3184
// if r > 50 then
3086: LD_VAR 0 8
3090: PUSH
3091: LD_INT 50
3093: GREATER
3094: IFFALSE 3140
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3096: LD_VAR 0 7
3100: PPUSH
3101: LD_INT 5
3103: PPUSH
3104: LD_VAR 0 4
3108: PPUSH
3109: LD_VAR 0 5
3113: PPUSH
3114: LD_INT 4
3116: PPUSH
3117: LD_INT 0
3119: PPUSH
3120: CALL_OW 60
// r := r - 50 ;
3124: LD_ADDR_VAR 0 8
3128: PUSH
3129: LD_VAR 0 8
3133: PUSH
3134: LD_INT 50
3136: MINUS
3137: ST_TO_ADDR
// end else
3138: GO 3182
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3140: LD_VAR 0 7
3144: PPUSH
3145: LD_VAR 0 8
3149: PUSH
3150: LD_INT 10
3152: DIV
3153: PPUSH
3154: LD_VAR 0 4
3158: PPUSH
3159: LD_VAR 0 5
3163: PPUSH
3164: LD_INT 4
3166: PPUSH
3167: LD_INT 0
3169: PPUSH
3170: CALL_OW 60
// r := 0 ;
3174: LD_ADDR_VAR 0 8
3178: PUSH
3179: LD_INT 0
3181: ST_TO_ADDR
// end ;
3182: GO 3076
// end ;
3184: GO 3057
3186: POP
3187: POP
// end ; for r in starting_crates do
3188: LD_ADDR_VAR 0 8
3192: PUSH
3193: LD_EXP 24
3197: PUSH
3198: FOR_IN
3199: IFFALSE 3231
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3201: LD_INT 1
3203: PPUSH
3204: LD_INT 5
3206: PPUSH
3207: LD_VAR 0 4
3211: PPUSH
3212: LD_VAR 0 5
3216: PPUSH
3217: LD_VAR 0 8
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 60
3229: GO 3198
3231: POP
3232: POP
// if def_morale_flags then
3233: LD_EXP 9
3237: IFFALSE 3376
// begin x := start_def [ pos ] [ 1 ] ;
3239: LD_ADDR_VAR 0 4
3243: PUSH
3244: LD_EXP 42
3248: PUSH
3249: LD_VAR 0 3
3253: ARRAY
3254: PUSH
3255: LD_INT 1
3257: ARRAY
3258: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3259: LD_ADDR_VAR 0 5
3263: PUSH
3264: LD_EXP 42
3268: PUSH
3269: LD_VAR 0 3
3273: ARRAY
3274: PUSH
3275: LD_INT 2
3277: ARRAY
3278: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3279: LD_VAR 0 4
3283: PPUSH
3284: LD_VAR 0 5
3288: PPUSH
3289: LD_INT 12
3291: PPUSH
3292: LD_INT 2
3294: PPUSH
3295: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3299: LD_ADDR_EXP 44
3303: PUSH
3304: LD_EXP 44
3308: PUSH
3309: LD_VAR 0 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: LD_VAR 0 5
3323: PPUSH
3324: LD_INT 1
3326: PUSH
3327: LD_INT 100
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 2
3336: PUSH
3337: LD_INT 50
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: PUSH
3344: LD_INT 3
3346: PUSH
3347: LD_INT 20
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 20
3356: PUSH
3357: LD_INT 100
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: PPUSH
3370: CALL_OW 418
3374: ADD
3375: ST_TO_ADDR
// end ; commander := true ;
3376: LD_ADDR_LOC 1
3380: PUSH
3381: LD_INT 1
3383: ST_TO_ADDR
// soldiers_created := 0 ;
3384: LD_ADDR_LOC 4
3388: PUSH
3389: LD_INT 0
3391: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3392: LD_ADDR_VAR 0 7
3396: PUSH
3397: DOUBLE
3398: LD_INT 1
3400: DEC
3401: ST_TO_ADDR
3402: LD_EXP 20
3406: PUSH
3407: FOR_TO
3408: IFFALSE 3630
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3410: LD_ADDR_VAR 0 4
3414: PUSH
3415: LD_EXP 41
3419: PUSH
3420: LD_VAR 0 3
3424: ARRAY
3425: PUSH
3426: LD_VAR 0 7
3430: ARRAY
3431: PUSH
3432: LD_INT 1
3434: ARRAY
3435: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3436: LD_ADDR_VAR 0 5
3440: PUSH
3441: LD_EXP 41
3445: PUSH
3446: LD_VAR 0 3
3450: ARRAY
3451: PUSH
3452: LD_VAR 0 7
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3462: LD_ADDR_VAR 0 6
3466: PUSH
3467: LD_EXP 41
3471: PUSH
3472: LD_VAR 0 3
3476: ARRAY
3477: PUSH
3478: LD_VAR 0 7
3482: ARRAY
3483: PUSH
3484: LD_INT 3
3486: ARRAY
3487: ST_TO_ADDR
// bc_type := b_breastwork ;
3488: LD_ADDR_OWVAR 42
3492: PUSH
3493: LD_INT 31
3495: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3496: LD_ADDR_VAR 0 10
3500: PUSH
3501: LD_VAR 0 4
3505: PPUSH
3506: LD_VAR 0 5
3510: PPUSH
3511: LD_VAR 0 6
3515: PPUSH
3516: CALL_OW 47
3520: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3521: LD_ADDR_VAR 0 4
3525: PUSH
3526: LD_VAR 0 4
3530: PPUSH
3531: LD_VAR 0 6
3535: PPUSH
3536: LD_INT 2
3538: PPUSH
3539: CALL_OW 272
3543: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3544: LD_ADDR_VAR 0 5
3548: PUSH
3549: LD_VAR 0 5
3553: PPUSH
3554: LD_VAR 0 6
3558: PPUSH
3559: LD_INT 2
3561: PPUSH
3562: CALL_OW 273
3566: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3567: LD_ADDR_VAR 0 9
3571: PUSH
3572: LD_INT 1
3574: PPUSH
3575: LD_INT 1
3577: PPUSH
3578: LD_VAR 0 4
3582: PPUSH
3583: LD_VAR 0 5
3587: PPUSH
3588: LD_INT 0
3590: PPUSH
3591: CALL 2259 0 5
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3600: LD_ADDR_LOC 4
3604: PUSH
3605: LD_LOC 4
3609: PUSH
3610: LD_INT 1
3612: PLUS
3613: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3614: LD_VAR 0 9
3618: PPUSH
3619: LD_VAR 0 10
3623: PPUSH
3624: CALL_OW 120
// end ;
3628: GO 3407
3630: POP
3631: POP
// x := start_def [ pos ] [ 1 ] ;
3632: LD_ADDR_VAR 0 4
3636: PUSH
3637: LD_EXP 42
3641: PUSH
3642: LD_VAR 0 3
3646: ARRAY
3647: PUSH
3648: LD_INT 1
3650: ARRAY
3651: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: LD_EXP 42
3661: PUSH
3662: LD_VAR 0 3
3666: ARRAY
3667: PUSH
3668: LD_INT 2
3670: ARRAY
3671: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
3672: LD_LOC 8
3676: PUSH
3677: LD_EXP 20
3681: MINUS
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: LD_VAR 0 4
3690: PPUSH
3691: LD_VAR 0 5
3695: PPUSH
3696: LD_INT 5
3698: PPUSH
3699: CALL 2259 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
3703: LD_LOC 5
3707: PPUSH
3708: LD_INT 2
3710: PPUSH
3711: LD_VAR 0 4
3715: PPUSH
3716: LD_VAR 0 5
3720: PPUSH
3721: LD_INT 5
3723: PPUSH
3724: CALL 2259 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
3728: LD_LOC 7
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_VAR 0 4
3740: PPUSH
3741: LD_VAR 0 5
3745: PPUSH
3746: LD_INT 5
3748: PPUSH
3749: CALL 2259 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
3753: LD_LOC 6
3757: PPUSH
3758: LD_INT 4
3760: PPUSH
3761: LD_VAR 0 4
3765: PPUSH
3766: LD_VAR 0 5
3770: PPUSH
3771: LD_INT 5
3773: PPUSH
3774: CALL 2259 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3778: LD_EXP 10
3782: PUSH
3783: LD_INT 20
3785: PPUSH
3786: LD_VAR 0 1
3790: PPUSH
3791: CALL_OW 321
3795: PUSH
3796: LD_INT 1
3798: EQUAL
3799: AND
3800: IFFALSE 3817
// SetTech ( tech_SibDet , side , state_researched ) ;
3802: LD_INT 20
3804: PPUSH
3805: LD_VAR 0 1
3809: PPUSH
3810: LD_INT 2
3812: PPUSH
3813: CALL_OW 322
// if def_siberite_bomb = 1 then
3817: LD_EXP 13
3821: PUSH
3822: LD_INT 1
3824: EQUAL
3825: IFFALSE 3859
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3827: LD_INT 25
3829: PPUSH
3830: LD_VAR 0 1
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3842: LD_INT 73
3844: PPUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_INT 1
3852: PPUSH
3853: CALL_OW 322
// end else
3857: GO 3889
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3859: LD_INT 25
3861: PPUSH
3862: LD_VAR 0 1
3866: PPUSH
3867: LD_INT 0
3869: PPUSH
3870: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3874: LD_INT 73
3876: PPUSH
3877: LD_VAR 0 1
3881: PPUSH
3882: LD_INT 0
3884: PPUSH
3885: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3889: LD_INT 24
3891: PPUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 322
// global_defined := true ;
3904: LD_ADDR_LOC 3
3908: PUSH
3909: LD_INT 1
3911: ST_TO_ADDR
// end ;
3912: LD_VAR 0 2
3916: RET
// every 0 0$1 do
3917: GO 3919
3919: DISABLE
// if ( def_siberite_bomb > 1 ) then
3920: LD_EXP 13
3924: PUSH
3925: LD_INT 1
3927: GREATER
3928: IFFALSE 3943
// begin wait ( siberite_bomb_Delay ) ;
3930: LD_EXP 32
3934: PPUSH
3935: CALL_OW 67
// EnableSibFiss ;
3939: CALL 3944 0 0
// end ;
3943: END
// function EnableSibFiss ; var i ; begin
3944: LD_INT 0
3946: PPUSH
3947: PPUSH
// for i := 1 to 8 do
3948: LD_ADDR_VAR 0 2
3952: PUSH
3953: DOUBLE
3954: LD_INT 1
3956: DEC
3957: ST_TO_ADDR
3958: LD_INT 8
3960: PUSH
3961: FOR_TO
3962: IFFALSE 4008
// if Side_Positions [ i ] then
3964: LD_EXP 37
3968: PUSH
3969: LD_VAR 0 2
3973: ARRAY
3974: IFFALSE 4006
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3976: LD_INT 25
3978: PPUSH
3979: LD_VAR 0 2
3983: PPUSH
3984: LD_INT 1
3986: PPUSH
3987: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3991: LD_INT 73
3993: PPUSH
3994: LD_VAR 0 2
3998: PPUSH
3999: LD_INT 1
4001: PPUSH
4002: CALL_OW 322
// end ;
4006: GO 3961
4008: POP
4009: POP
// end ;
4010: LD_VAR 0 1
4014: RET
// function prepare_sides ; var i ; begin
4015: LD_INT 0
4017: PPUSH
4018: PPUSH
// global_units := [ ] ;
4019: LD_ADDR_LOC 2
4023: PUSH
4024: EMPTY
4025: ST_TO_ADDR
// global_defined := false ;
4026: LD_ADDR_LOC 3
4030: PUSH
4031: LD_INT 0
4033: ST_TO_ADDR
// CountClassMembers ;
4034: CALL 4084 0 0
// for i := 1 to 8 do
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: DOUBLE
4044: LD_INT 1
4046: DEC
4047: ST_TO_ADDR
4048: LD_INT 8
4050: PUSH
4051: FOR_TO
4052: IFFALSE 4077
// if Side_Positions [ i ] then
4054: LD_EXP 37
4058: PUSH
4059: LD_VAR 0 2
4063: ARRAY
4064: IFFALSE 4075
// prepare_side ( i ) ;
4066: LD_VAR 0 2
4070: PPUSH
4071: CALL 2774 0 1
4075: GO 4051
4077: POP
4078: POP
// end ;
4079: LD_VAR 0 1
4083: RET
// function CountClassMembers ; var Mode ; begin
4084: LD_INT 0
4086: PPUSH
4087: PPUSH
// if No_Mechs then
4088: LD_EXP 17
4092: IFFALSE 4104
// Mode := 2 else
4094: LD_ADDR_VAR 0 2
4098: PUSH
4099: LD_INT 2
4101: ST_TO_ADDR
4102: GO 4112
// Mode := 1 ;
4104: LD_ADDR_VAR 0 2
4108: PUSH
4109: LD_INT 1
4111: ST_TO_ADDR
// neng := number_of_people ;
4112: LD_ADDR_LOC 5
4116: PUSH
4117: LD_EXP 21
4121: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4122: LD_ADDR_LOC 8
4126: PUSH
4127: LD_LOC 5
4131: PUSH
4132: LD_INT 4
4134: PUSH
4135: LD_INT 3
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_VAR 0 2
4146: ARRAY
4147: DIV
4148: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4149: LD_LOC 8
4153: PUSH
4154: LD_EXP 20
4158: LESS
4159: IFFALSE 4171
// nsol := number_of_breastworks ;
4161: LD_ADDR_LOC 8
4165: PUSH
4166: LD_EXP 20
4170: ST_TO_ADDR
// neng := neng - nsol ;
4171: LD_ADDR_LOC 5
4175: PUSH
4176: LD_LOC 5
4180: PUSH
4181: LD_LOC 8
4185: MINUS
4186: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4187: LD_ADDR_LOC 6
4191: PUSH
4192: LD_LOC 5
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: LD_INT 2
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_VAR 0 2
4211: ARRAY
4212: DIV
4213: ST_TO_ADDR
// if ( nsci < 1 ) then
4214: LD_LOC 6
4218: PUSH
4219: LD_INT 1
4221: LESS
4222: IFFALSE 4232
// nsci := 1 ;
4224: LD_ADDR_LOC 6
4228: PUSH
4229: LD_INT 1
4231: ST_TO_ADDR
// neng := neng - nsci ;
4232: LD_ADDR_LOC 5
4236: PUSH
4237: LD_LOC 5
4241: PUSH
4242: LD_LOC 6
4246: MINUS
4247: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4248: LD_ADDR_LOC 7
4252: PUSH
4253: LD_LOC 5
4257: PUSH
4258: LD_INT 2
4260: DIV
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: LD_VAR 0 2
4273: ARRAY
4274: ST_TO_ADDR
// neng := neng - nmech ;
4275: LD_ADDR_LOC 5
4279: PUSH
4280: LD_LOC 5
4284: PUSH
4285: LD_LOC 7
4289: MINUS
4290: ST_TO_ADDR
// if ( neng < 1 ) then
4291: LD_LOC 5
4295: PUSH
4296: LD_INT 1
4298: LESS
4299: IFFALSE 4309
// neng := 1 ;
4301: LD_ADDR_LOC 5
4305: PUSH
4306: LD_INT 1
4308: ST_TO_ADDR
// end ;
4309: LD_VAR 0 1
4313: RET
// starting begin disable ( 98 ) ;
4314: LD_INT 98
4316: DISABLE_MARKED
// disable ( 99 ) ;
4317: LD_INT 99
4319: DISABLE_MARKED
// disable ( 100 ) ;
4320: LD_INT 100
4322: DISABLE_MARKED
// disable ( 4 ) ;
4323: LD_INT 4
4325: DISABLE_MARKED
// disable ( 400 ) ;
4326: LD_INT 400
4328: DISABLE_MARKED
// disable ( 401 ) ;
4329: LD_INT 401
4331: DISABLE_MARKED
// mp_selectmsg := true ;
4332: LD_ADDR_OWVAR 13
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4340: CALL 68 0 0
// init_map ;
4344: CALL 1421 0 0
// init_respawning ;
4348: CALL 18288 0 0
// set_shared_visions_and_alliances ;
4352: CALL 1950 0 0
// ResetFog ;
4356: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4360: LD_OWVAR 2
4364: PPUSH
4365: CALL_OW 520
// AnimateTrees ( true ) ;
4369: LD_INT 1
4371: PPUSH
4372: CALL_OW 573
// prepare_sides ;
4376: CALL 4015 0 0
// Init_Win_Condition ;
4380: CALL 8532 0 0
// if game_type = 3 then
4384: LD_EXP 18
4388: PUSH
4389: LD_INT 3
4391: EQUAL
4392: IFFALSE 4402
// begin InitPoints ( ) ;
4394: CALL 7535 0 0
// init_kings_counting ;
4398: CALL 9827 0 0
// end ; InitApeman ;
4402: CALL 5877 0 0
// ShowTimer ;
4406: CALL 7323 0 0
// music_nat := Side_Nations [ your_side ] ;
4410: LD_ADDR_OWVAR 71
4414: PUSH
4415: LD_EXP 38
4419: PUSH
4420: LD_OWVAR 2
4424: ARRAY
4425: ST_TO_ADDR
// if IAmSpec then
4426: CALL_OW 531
4430: IFFALSE 4466
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4432: LD_INT 0
4434: PPUSH
4435: LD_INT 0
4437: PPUSH
4438: LD_OWVAR 2
4442: PPUSH
4443: LD_INT 32767
4445: NEG
4446: PPUSH
4447: CALL_OW 330
// CenterNowOnXY ( 119 , 79 ) ;
4451: LD_INT 119
4453: PPUSH
4454: LD_INT 79
4456: PPUSH
4457: CALL_OW 86
// enable ( 400 ) ;
4461: LD_INT 400
4463: ENABLE_MARKED
// end else
4464: GO 4512
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4466: LD_EXP 42
4470: PUSH
4471: LD_EXP 37
4475: PUSH
4476: LD_OWVAR 2
4480: ARRAY
4481: ARRAY
4482: PUSH
4483: LD_INT 1
4485: ARRAY
4486: PPUSH
4487: LD_EXP 42
4491: PUSH
4492: LD_EXP 37
4496: PUSH
4497: LD_OWVAR 2
4501: ARRAY
4502: ARRAY
4503: PUSH
4504: LD_INT 2
4506: ARRAY
4507: PPUSH
4508: CALL_OW 86
// end ; BuildUpAreas := [ Base_nw , Base_ne , Base_sw , Base_se ] ;
4512: LD_ADDR_EXP 61
4516: PUSH
4517: LD_INT 3
4519: PUSH
4520: LD_INT 4
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: LD_INT 6
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: ST_TO_ADDR
// BeginBuildUp ;
4535: CALL 18782 0 0
// end ; end_of_file
4539: END
// every 0 0$25 + 0 0$1.0 do
4540: GO 4542
4542: DISABLE
// begin if GetResourceArea ( ZaklLHOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4543: LD_INT 16
4545: PPUSH
4546: LD_INT 1
4548: PPUSH
4549: CALL_OW 287
4553: PUSH
4554: LD_INT 200
4556: PUSH
4557: LD_EXP 26
4561: MINUS
4562: PUSH
4563: LD_INT 50
4565: DIVREAL
4566: PUSH
4567: LD_INT 5
4569: MUL
4570: LESS
4571: IFFALSE 4594
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklLHOut , true ) ;
4573: LD_INT 3
4575: PPUSH
4576: LD_INT 4
4578: PPUSH
4579: CALL_OW 12
4583: PPUSH
4584: LD_INT 16
4586: PPUSH
4587: LD_INT 1
4589: PPUSH
4590: CALL_OW 55
// if GetResourceArea ( ZaklPHOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4594: LD_INT 17
4596: PPUSH
4597: LD_INT 1
4599: PPUSH
4600: CALL_OW 287
4604: PUSH
4605: LD_INT 200
4607: PUSH
4608: LD_EXP 26
4612: MINUS
4613: PUSH
4614: LD_INT 50
4616: DIVREAL
4617: PUSH
4618: LD_INT 5
4620: MUL
4621: LESS
4622: IFFALSE 4645
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklPHOut , true ) ;
4624: LD_INT 3
4626: PPUSH
4627: LD_INT 4
4629: PPUSH
4630: CALL_OW 12
4634: PPUSH
4635: LD_INT 17
4637: PPUSH
4638: LD_INT 1
4640: PPUSH
4641: CALL_OW 55
// if GetResourceArea ( ZaklLDOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4645: LD_INT 18
4647: PPUSH
4648: LD_INT 1
4650: PPUSH
4651: CALL_OW 287
4655: PUSH
4656: LD_INT 200
4658: PUSH
4659: LD_EXP 26
4663: MINUS
4664: PUSH
4665: LD_INT 50
4667: DIVREAL
4668: PUSH
4669: LD_INT 5
4671: MUL
4672: LESS
4673: IFFALSE 4696
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklLDOut , true ) ;
4675: LD_INT 3
4677: PPUSH
4678: LD_INT 4
4680: PPUSH
4681: CALL_OW 12
4685: PPUSH
4686: LD_INT 18
4688: PPUSH
4689: LD_INT 1
4691: PPUSH
4692: CALL_OW 55
// if GetResourceArea ( ZaklPDOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4696: LD_INT 19
4698: PPUSH
4699: LD_INT 1
4701: PPUSH
4702: CALL_OW 287
4706: PUSH
4707: LD_INT 200
4709: PUSH
4710: LD_EXP 26
4714: MINUS
4715: PUSH
4716: LD_INT 50
4718: DIVREAL
4719: PUSH
4720: LD_INT 5
4722: MUL
4723: LESS
4724: IFFALSE 4747
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklPDOut , true ) ;
4726: LD_INT 3
4728: PPUSH
4729: LD_INT 4
4731: PPUSH
4732: CALL_OW 12
4736: PPUSH
4737: LD_INT 19
4739: PPUSH
4740: LD_INT 1
4742: PPUSH
4743: CALL_OW 55
// if GetResourceArea ( Map_center , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4747: LD_INT 15
4749: PPUSH
4750: LD_INT 1
4752: PPUSH
4753: CALL_OW 287
4757: PUSH
4758: LD_INT 200
4760: PUSH
4761: LD_EXP 26
4765: MINUS
4766: PUSH
4767: LD_INT 25
4769: DIVREAL
4770: PUSH
4771: LD_INT 5
4773: MUL
4774: LESS
4775: IFFALSE 4790
// CreateCratesArea ( 5 , Map_center , true ) ;
4777: LD_INT 5
4779: PPUSH
4780: LD_INT 15
4782: PPUSH
4783: LD_INT 1
4785: PPUSH
4786: CALL_OW 55
// enable ;
4790: ENABLE
// end ;
4791: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4792: GO 4794
4794: DISABLE
4795: LD_INT 0
4797: PPUSH
4798: PPUSH
// begin case tick of 1 .. 1 1$0 :
4799: LD_OWVAR 1
4803: PUSH
4804: LD_INT 1
4806: DOUBLE
4807: GREATEREQUAL
4808: IFFALSE 4816
4810: LD_INT 2100
4812: DOUBLE
4813: LESSEQUAL
4814: IFTRUE 4818
4816: GO 4846
4818: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4819: LD_EXP 26
4823: PUSH
4824: LD_INT 100
4826: DIVREAL
4827: PUSH
4828: LD_INT 525
4830: PPUSH
4831: LD_INT 1050
4833: PPUSH
4834: CALL_OW 12
4838: MUL
4839: PPUSH
4840: CALL_OW 67
4844: GO 5148
4846: LD_INT 2100
4848: PUSH
4849: LD_INT 1
4851: PLUS
4852: DOUBLE
4853: GREATEREQUAL
4854: IFFALSE 4862
4856: LD_INT 10500
4858: DOUBLE
4859: LESSEQUAL
4860: IFTRUE 4864
4862: GO 4892
4864: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4865: LD_EXP 26
4869: PUSH
4870: LD_INT 100
4872: DIVREAL
4873: PUSH
4874: LD_INT 1050
4876: PPUSH
4877: LD_INT 1750
4879: PPUSH
4880: CALL_OW 12
4884: MUL
4885: PPUSH
4886: CALL_OW 67
4890: GO 5148
4892: LD_INT 10500
4894: PUSH
4895: LD_INT 1
4897: PLUS
4898: DOUBLE
4899: GREATEREQUAL
4900: IFFALSE 4908
4902: LD_INT 21000
4904: DOUBLE
4905: LESSEQUAL
4906: IFTRUE 4910
4908: GO 4938
4910: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4911: LD_EXP 26
4915: PUSH
4916: LD_INT 100
4918: DIVREAL
4919: PUSH
4920: LD_INT 1750
4922: PPUSH
4923: LD_INT 2100
4925: PPUSH
4926: CALL_OW 12
4930: MUL
4931: PPUSH
4932: CALL_OW 67
4936: GO 5148
4938: LD_INT 21000
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: DOUBLE
4945: GREATEREQUAL
4946: IFFALSE 4954
4948: LD_INT 42000
4950: DOUBLE
4951: LESSEQUAL
4952: IFTRUE 4956
4954: GO 4984
4956: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4957: LD_EXP 26
4961: PUSH
4962: LD_INT 100
4964: DIVREAL
4965: PUSH
4966: LD_INT 2100
4968: PPUSH
4969: LD_INT 2275
4971: PPUSH
4972: CALL_OW 12
4976: MUL
4977: PPUSH
4978: CALL_OW 67
4982: GO 5148
4984: LD_INT 42000
4986: PUSH
4987: LD_INT 1
4989: PLUS
4990: DOUBLE
4991: GREATEREQUAL
4992: IFFALSE 5000
4994: LD_INT 63000
4996: DOUBLE
4997: LESSEQUAL
4998: IFTRUE 5002
5000: GO 5030
5002: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5003: LD_EXP 26
5007: PUSH
5008: LD_INT 100
5010: DIVREAL
5011: PUSH
5012: LD_INT 2275
5014: PPUSH
5015: LD_INT 2450
5017: PPUSH
5018: CALL_OW 12
5022: MUL
5023: PPUSH
5024: CALL_OW 67
5028: GO 5148
5030: LD_INT 63000
5032: PUSH
5033: LD_INT 1
5035: PLUS
5036: DOUBLE
5037: GREATEREQUAL
5038: IFFALSE 5046
5040: LD_INT 105000
5042: DOUBLE
5043: LESSEQUAL
5044: IFTRUE 5048
5046: GO 5076
5048: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5049: LD_EXP 26
5053: PUSH
5054: LD_INT 100
5056: DIVREAL
5057: PUSH
5058: LD_INT 2450
5060: PPUSH
5061: LD_INT 2800
5063: PPUSH
5064: CALL_OW 12
5068: MUL
5069: PPUSH
5070: CALL_OW 67
5074: GO 5148
5076: LD_INT 105000
5078: PUSH
5079: LD_INT 1
5081: PLUS
5082: DOUBLE
5083: GREATEREQUAL
5084: IFFALSE 5092
5086: LD_INT 630000
5088: DOUBLE
5089: LESSEQUAL
5090: IFTRUE 5094
5092: GO 5122
5094: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5095: LD_EXP 26
5099: PUSH
5100: LD_INT 100
5102: DIVREAL
5103: PUSH
5104: LD_INT 2800
5106: PPUSH
5107: LD_INT 3500
5109: PPUSH
5110: CALL_OW 12
5114: MUL
5115: PPUSH
5116: CALL_OW 67
5120: GO 5148
5122: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5123: LD_EXP 26
5127: PUSH
5128: LD_INT 100
5130: DIVREAL
5131: PUSH
5132: LD_INT 3500
5134: PPUSH
5135: LD_INT 3850
5137: PPUSH
5138: CALL_OW 12
5142: MUL
5143: PPUSH
5144: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5148: LD_ADDR_VAR 0 2
5152: PUSH
5153: LD_INT 3
5155: PPUSH
5156: LD_INT 5
5158: PPUSH
5159: CALL_OW 12
5163: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5164: LD_ADDR_VAR 0 1
5168: PUSH
5169: LD_EXP 37
5173: PUSH
5174: LD_INT 0
5176: PUSH
5177: EMPTY
5178: LIST
5179: DIFF
5180: PUSH
5181: FOR_IN
5182: IFFALSE 5231
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5184: LD_VAR 0 2
5188: PPUSH
5189: LD_EXP 42
5193: PUSH
5194: LD_VAR 0 1
5198: ARRAY
5199: PUSH
5200: LD_INT 1
5202: ARRAY
5203: PPUSH
5204: LD_EXP 42
5208: PUSH
5209: LD_VAR 0 1
5213: ARRAY
5214: PUSH
5215: LD_INT 2
5217: ARRAY
5218: PPUSH
5219: LD_INT 20
5221: PPUSH
5222: LD_INT 1
5224: PPUSH
5225: CALL_OW 56
5229: GO 5181
5231: POP
5232: POP
// enable ;
5233: ENABLE
// end ; end_of_file
5234: PPOPN 2
5236: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5237: LD_VAR 0 1
5241: PPUSH
5242: CALL_OW 266
5246: PUSH
5247: LD_INT 0
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: IN
5257: IFFALSE 5282
// SetBName ( b , @ & GetSide ( b ) ) ;
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_STRING @
5266: PUSH
5267: LD_VAR 0 1
5271: PPUSH
5272: CALL_OW 255
5276: STR
5277: PPUSH
5278: CALL_OW 500
// end ;
5282: PPOPN 2
5284: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 266
5294: PUSH
5295: LD_INT 0
5297: PUSH
5298: LD_INT 1
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: IN
5305: IFFALSE 5330
// SetBName ( b , @ & GetSide ( b ) ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: LD_STRING @
5314: PUSH
5315: LD_VAR 0 1
5319: PPUSH
5320: CALL_OW 255
5324: STR
5325: PPUSH
5326: CALL_OW 500
// end ;
5330: PPOPN 3
5332: END
// on VehicleConstructed ( veh , fac ) do var side ;
5333: LD_INT 0
5335: PPUSH
// begin if GetControl ( veh ) = control_apeman then
5336: LD_VAR 0 1
5340: PPUSH
5341: CALL_OW 263
5345: PUSH
5346: LD_INT 5
5348: EQUAL
5349: IFFALSE 5491
// begin side := GetSide ( veh ) ;
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: LD_VAR 0 1
5360: PPUSH
5361: CALL_OW 255
5365: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
5366: LD_ADDR_EXP 53
5370: PUSH
5371: LD_EXP 53
5375: PPUSH
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_EXP 53
5385: PUSH
5386: LD_VAR 0 3
5390: ARRAY
5391: PPUSH
5392: LD_INT 52
5394: PUSH
5395: EMPTY
5396: LIST
5397: PPUSH
5398: CALL_OW 72
5402: PUSH
5403: LD_INT 22
5405: PUSH
5406: LD_VAR 0 3
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 33
5420: PUSH
5421: LD_INT 5
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 25
5430: PUSH
5431: LD_INT 12
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 25
5440: PUSH
5441: LD_INT 15
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 25
5450: PUSH
5451: LD_INT 16
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: LD_INT 25
5460: PUSH
5461: LD_INT 17
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: PPUSH
5480: CALL_OW 69
5484: UNION
5485: PPUSH
5486: CALL_OW 1
5490: ST_TO_ADDR
// end ; end ;
5491: PPOPN 3
5493: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
5494: LD_INT 0
5496: PPUSH
5497: PPUSH
5498: PPUSH
5499: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 257
5509: PUSH
5510: LD_INT 12
5512: PUSH
5513: LD_INT 15
5515: PUSH
5516: LD_INT 17
5518: PUSH
5519: LD_INT 16
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: IN
5528: PUSH
5529: LD_VAR 0 1
5533: PPUSH
5534: CALL_OW 263
5538: PUSH
5539: LD_INT 5
5541: EQUAL
5542: OR
5543: IFFALSE 5554
// ApeKilled ( j ) ;
5545: LD_VAR 0 1
5549: PPUSH
5550: CALL 6568 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
5554: LD_VAR 0 1
5558: PPUSH
5559: CALL_OW 266
5563: PUSH
5564: LD_INT 0
5566: PUSH
5567: LD_INT 1
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: IN
5574: IFFALSE 5656
// begin pos := Side_Positions [ GetSide ( j ) ] ;
5576: LD_ADDR_VAR 0 4
5580: PUSH
5581: LD_EXP 37
5585: PUSH
5586: LD_VAR 0 1
5590: PPUSH
5591: CALL_OW 255
5595: ARRAY
5596: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
5597: LD_ADDR_VAR 0 2
5601: PUSH
5602: LD_EXP 42
5606: PUSH
5607: LD_VAR 0 4
5611: ARRAY
5612: PUSH
5613: LD_INT 1
5615: ARRAY
5616: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
5617: LD_ADDR_VAR 0 3
5621: PUSH
5622: LD_EXP 42
5626: PUSH
5627: LD_VAR 0 4
5631: ARRAY
5632: PUSH
5633: LD_INT 2
5635: ARRAY
5636: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
5637: LD_VAR 0 2
5641: PPUSH
5642: LD_VAR 0 3
5646: PPUSH
5647: CALL_OW 420
5651: PPUSH
5652: CALL_OW 419
// end ; end ;
5656: PPOPN 5
5658: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
5659: LD_VAR 0 1
5663: PPUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: LD_OWVAR 2
5678: PPUSH
5679: CALL 8293 0 4
5683: PPOPN 3
5685: END
// every 20 20$00 trigger apemanNumber do
5686: LD_EXP 50
5690: IFFALSE 5723
5692: GO 5694
5694: DISABLE
// begin enable ;
5695: ENABLE
// if apeLevel >= 8 then
5696: LD_EXP 55
5700: PUSH
5701: LD_INT 8
5703: GREATEREQUAL
5704: IFFALSE 5709
// disable else
5706: DISABLE
5707: GO 5723
// apeLevel := apeLevel + 1 ;
5709: LD_ADDR_EXP 55
5713: PUSH
5714: LD_EXP 55
5718: PUSH
5719: LD_INT 1
5721: PLUS
5722: ST_TO_ADDR
// end ;
5723: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5724: LD_EXP 50
5728: PUSH
5729: LD_EXP 51
5733: LESS
5734: IFFALSE 5874
5736: GO 5738
5738: DISABLE
5739: LD_INT 0
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
// begin enable ;
5745: ENABLE
// for i := 1 to apemanPos do
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: DOUBLE
5752: LD_INT 1
5754: DEC
5755: ST_TO_ADDR
5756: LD_EXP 53
5760: PUSH
5761: FOR_TO
5762: IFFALSE 5872
// begin if apemanPlayerCount [ i ] then
5764: LD_EXP 54
5768: PUSH
5769: LD_VAR 0 1
5773: ARRAY
5774: IFFALSE 5870
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5776: LD_EXP 54
5780: PUSH
5781: LD_VAR 0 1
5785: ARRAY
5786: PUSH
5787: LD_EXP 53
5791: PUSH
5792: LD_VAR 0 1
5796: ARRAY
5797: GREATER
5798: IFFALSE 5870
// begin ape := PrepareApeman ;
5800: LD_ADDR_VAR 0 2
5804: PUSH
5805: CALL 6377 0 0
5809: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5810: LD_VAR 0 2
5814: PPUSH
5815: LD_EXP 56
5819: PUSH
5820: LD_VAR 0 1
5824: ARRAY
5825: PPUSH
5826: LD_INT 0
5828: PPUSH
5829: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5833: LD_ADDR_EXP 53
5837: PUSH
5838: LD_EXP 53
5842: PPUSH
5843: LD_VAR 0 1
5847: PPUSH
5848: LD_EXP 53
5852: PUSH
5853: LD_VAR 0 1
5857: ARRAY
5858: PUSH
5859: LD_VAR 0 2
5863: UNION
5864: PPUSH
5865: CALL_OW 1
5869: ST_TO_ADDR
// end ; end ; end ;
5870: GO 5761
5872: POP
5873: POP
// end ;
5874: PPOPN 4
5876: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
5881: PPUSH
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
// playersAmount := 0 ;
5886: LD_ADDR_VAR 0 3
5890: PUSH
5891: LD_INT 0
5893: ST_TO_ADDR
// _apeAreas := [ OpiceSZ , OpiceSV , OpiceJZ , OpiceJV ] ;
5894: LD_ADDR_VAR 0 7
5898: PUSH
5899: LD_INT 11
5901: PUSH
5902: LD_INT 12
5904: PUSH
5905: LD_INT 14
5907: PUSH
5908: LD_INT 13
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5917: LD_ADDR_EXP 56
5921: PUSH
5922: LD_INT 0
5924: PUSH
5925: LD_INT 0
5927: PUSH
5928: LD_INT 0
5930: PUSH
5931: LD_INT 0
5933: PUSH
5934: LD_INT 0
5936: PUSH
5937: LD_INT 0
5939: PUSH
5940: LD_INT 0
5942: PUSH
5943: LD_INT 0
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: ST_TO_ADDR
// for j = 1 to Side_Positions do
5956: LD_ADDR_VAR 0 4
5960: PUSH
5961: DOUBLE
5962: LD_INT 1
5964: DEC
5965: ST_TO_ADDR
5966: LD_EXP 37
5970: PUSH
5971: FOR_TO
5972: IFFALSE 6039
// if Side_Positions [ j ] then
5974: LD_EXP 37
5978: PUSH
5979: LD_VAR 0 4
5983: ARRAY
5984: IFFALSE 6037
// begin playersAmount := playersAmount + 1 ;
5986: LD_ADDR_VAR 0 3
5990: PUSH
5991: LD_VAR 0 3
5995: PUSH
5996: LD_INT 1
5998: PLUS
5999: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6000: LD_ADDR_EXP 56
6004: PUSH
6005: LD_EXP 56
6009: PPUSH
6010: LD_VAR 0 4
6014: PPUSH
6015: LD_VAR 0 7
6019: PUSH
6020: LD_EXP 37
6024: PUSH
6025: LD_VAR 0 4
6029: ARRAY
6030: ARRAY
6031: PPUSH
6032: CALL_OW 1
6036: ST_TO_ADDR
// end ;
6037: GO 5971
6039: POP
6040: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6041: LD_ADDR_EXP 52
6045: PUSH
6046: LD_INT 3
6048: PUSH
6049: LD_EXP 22
6053: MUL
6054: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6055: LD_ADDR_EXP 50
6059: PUSH
6060: LD_VAR 0 3
6064: PUSH
6065: LD_EXP 52
6069: MUL
6070: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6071: LD_ADDR_EXP 51
6075: PUSH
6076: LD_EXP 50
6080: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6081: LD_ADDR_EXP 53
6085: PUSH
6086: LD_INT 0
6088: PUSH
6089: LD_INT 0
6091: PUSH
6092: LD_INT 0
6094: PUSH
6095: LD_INT 0
6097: PUSH
6098: LD_INT 0
6100: PUSH
6101: LD_INT 0
6103: PUSH
6104: LD_INT 0
6106: PUSH
6107: LD_INT 0
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6120: LD_ADDR_EXP 54
6124: PUSH
6125: LD_INT 0
6127: PUSH
6128: LD_INT 0
6130: PUSH
6131: LD_INT 0
6133: PUSH
6134: LD_INT 0
6136: PUSH
6137: LD_INT 0
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: ST_TO_ADDR
// apeLevel := 1 ;
6159: LD_ADDR_EXP 55
6163: PUSH
6164: LD_INT 1
6166: ST_TO_ADDR
// if not apemanNumber then
6167: LD_EXP 50
6171: NOT
6172: IFFALSE 6176
// exit ;
6174: GO 6372
// for i := 1 to apemanPerPlayer do
6176: LD_ADDR_VAR 0 2
6180: PUSH
6181: DOUBLE
6182: LD_INT 1
6184: DEC
6185: ST_TO_ADDR
6186: LD_EXP 52
6190: PUSH
6191: FOR_TO
6192: IFFALSE 6370
// begin for j := 1 to Side_Positions do
6194: LD_ADDR_VAR 0 4
6198: PUSH
6199: DOUBLE
6200: LD_INT 1
6202: DEC
6203: ST_TO_ADDR
6204: LD_EXP 37
6208: PUSH
6209: FOR_TO
6210: IFFALSE 6366
// if Side_Positions [ j ] then
6212: LD_EXP 37
6216: PUSH
6217: LD_VAR 0 4
6221: ARRAY
6222: IFFALSE 6364
// begin pos := Side_Positions [ j ] ;
6224: LD_ADDR_VAR 0 6
6228: PUSH
6229: LD_EXP 37
6233: PUSH
6234: LD_VAR 0 4
6238: ARRAY
6239: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6240: LD_ADDR_EXP 54
6244: PUSH
6245: LD_EXP 54
6249: PPUSH
6250: LD_VAR 0 4
6254: PPUSH
6255: LD_EXP 54
6259: PUSH
6260: LD_VAR 0 4
6264: ARRAY
6265: PUSH
6266: LD_INT 1
6268: PLUS
6269: PPUSH
6270: CALL_OW 1
6274: ST_TO_ADDR
// ape := PrepareApeman ;
6275: LD_ADDR_VAR 0 5
6279: PUSH
6280: CALL 6377 0 0
6284: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6285: LD_ADDR_EXP 53
6289: PUSH
6290: LD_EXP 53
6294: PPUSH
6295: LD_VAR 0 4
6299: PPUSH
6300: LD_EXP 53
6304: PUSH
6305: LD_VAR 0 4
6309: ARRAY
6310: PPUSH
6311: LD_EXP 53
6315: PUSH
6316: LD_VAR 0 4
6320: ARRAY
6321: PUSH
6322: LD_INT 1
6324: PLUS
6325: PPUSH
6326: LD_VAR 0 5
6330: PPUSH
6331: CALL_OW 1
6335: PPUSH
6336: CALL_OW 1
6340: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6341: LD_VAR 0 5
6345: PPUSH
6346: LD_EXP 56
6350: PUSH
6351: LD_VAR 0 4
6355: ARRAY
6356: PPUSH
6357: LD_INT 0
6359: PPUSH
6360: CALL_OW 49
// end ;
6364: GO 6209
6366: POP
6367: POP
// end ;
6368: GO 6191
6370: POP
6371: POP
// end ;
6372: LD_VAR 0 1
6376: RET
// export function PrepareApeman ; var bonus ; begin
6377: LD_INT 0
6379: PPUSH
6380: PPUSH
// uc_side := 0 ;
6381: LD_ADDR_OWVAR 20
6385: PUSH
6386: LD_INT 0
6388: ST_TO_ADDR
// uc_nation := 0 ;
6389: LD_ADDR_OWVAR 21
6393: PUSH
6394: LD_INT 0
6396: ST_TO_ADDR
// InitHc ;
6397: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6401: LD_ADDR_VAR 0 2
6405: PUSH
6406: LD_INT 1
6408: NEG
6409: PUSH
6410: LD_INT 0
6412: PUSH
6413: LD_INT 1
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 12
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PPUSH
6431: CALL_OW 69
6435: PUSH
6436: LD_INT 3
6438: MOD
6439: PUSH
6440: LD_INT 1
6442: PLUS
6443: ARRAY
6444: ST_TO_ADDR
// hc_class := class_apeman ;
6445: LD_ADDR_OWVAR 28
6449: PUSH
6450: LD_INT 12
6452: ST_TO_ADDR
// hc_gallery :=  ;
6453: LD_ADDR_OWVAR 33
6457: PUSH
6458: LD_STRING 
6460: ST_TO_ADDR
// hc_name :=  ;
6461: LD_ADDR_OWVAR 26
6465: PUSH
6466: LD_STRING 
6468: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6469: LD_ADDR_OWVAR 31
6473: PUSH
6474: LD_EXP 55
6478: PUSH
6479: LD_VAR 0 2
6483: PLUS
6484: PUSH
6485: LD_EXP 55
6489: PUSH
6490: LD_VAR 0 2
6494: PLUS
6495: PUSH
6496: LD_EXP 55
6500: PUSH
6501: LD_VAR 0 2
6505: PLUS
6506: PUSH
6507: LD_EXP 55
6511: PUSH
6512: LD_VAR 0 2
6516: PLUS
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6524: LD_ADDR_OWVAR 35
6528: PUSH
6529: LD_INT 10
6531: PUSH
6532: LD_VAR 0 2
6536: MUL
6537: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6538: LD_ADDR_OWVAR 29
6542: PUSH
6543: LD_INT 12
6545: PUSH
6546: LD_INT 12
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: ST_TO_ADDR
// result := CreateHuman ;
6553: LD_ADDR_VAR 0 1
6557: PUSH
6558: CALL_OW 44
6562: ST_TO_ADDR
// end ;
6563: LD_VAR 0 1
6567: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
6568: LD_INT 0
6570: PPUSH
6571: PPUSH
6572: PPUSH
// if not ape then
6573: LD_VAR 0 1
6577: NOT
6578: IFFALSE 6582
// exit ;
6580: GO 6685
// for i = 1 to apemanPos do
6582: LD_ADDR_VAR 0 4
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_EXP 53
6596: PUSH
6597: FOR_TO
6598: IFFALSE 6632
// if ape in apemanPos [ i ] then
6600: LD_VAR 0 1
6604: PUSH
6605: LD_EXP 53
6609: PUSH
6610: LD_VAR 0 4
6614: ARRAY
6615: IN
6616: IFFALSE 6630
// begin s := i ;
6618: LD_ADDR_VAR 0 3
6622: PUSH
6623: LD_VAR 0 4
6627: ST_TO_ADDR
// break ;
6628: GO 6632
// end ;
6630: GO 6597
6632: POP
6633: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
6634: LD_ADDR_EXP 53
6638: PUSH
6639: LD_EXP 53
6643: PPUSH
6644: LD_VAR 0 3
6648: PPUSH
6649: LD_EXP 53
6653: PUSH
6654: LD_VAR 0 3
6658: ARRAY
6659: PUSH
6660: LD_VAR 0 1
6664: DIFF
6665: PPUSH
6666: CALL_OW 1
6670: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6671: LD_ADDR_EXP 50
6675: PUSH
6676: LD_EXP 50
6680: PUSH
6681: LD_INT 1
6683: MINUS
6684: ST_TO_ADDR
// end ; end_of_file
6685: LD_VAR 0 2
6689: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6690: LD_INT 0
6692: PPUSH
6693: PPUSH
// for un in battle_flags_id do
6694: LD_ADDR_VAR 0 2
6698: PUSH
6699: LD_EXP 44
6703: PUSH
6704: FOR_IN
6705: IFFALSE 6780
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6707: LD_VAR 0 2
6711: PPUSH
6712: LD_INT 1
6714: PUSH
6715: LD_LOC 9
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PUSH
6724: LD_INT 2
6726: PUSH
6727: LD_LOC 9
6731: PUSH
6732: LD_INT 2
6734: DIV
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: LD_INT 3
6742: PUSH
6743: LD_LOC 9
6747: PUSH
6748: LD_INT 5
6750: DIV
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: PUSH
6756: LD_INT 20
6758: PUSH
6759: LD_LOC 9
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 423
6778: GO 6704
6780: POP
6781: POP
// end ;
6782: LD_VAR 0 1
6786: RET
// every 0 0$0.1 do var un ;
6787: GO 6789
6789: DISABLE
6790: LD_INT 0
6792: PPUSH
// begin if not def_morale_flags then
6793: LD_EXP 9
6797: NOT
6798: IFFALSE 6802
// exit ;
6800: GO 6879
// if not morale_decreasing_time then
6802: LD_EXP 27
6806: NOT
6807: IFFALSE 6811
// exit ;
6809: GO 6879
// strength = 100 ;
6811: LD_ADDR_LOC 9
6815: PUSH
6816: LD_INT 100
6818: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6819: LD_EXP 27
6823: PPUSH
6824: CALL_OW 67
// strength := strength - 1 ;
6828: LD_ADDR_LOC 9
6832: PUSH
6833: LD_LOC 9
6837: PUSH
6838: LD_INT 1
6840: MINUS
6841: ST_TO_ADDR
// Update_Flags ;
6842: CALL 6690 0 0
// until not strength ;
6846: LD_LOC 9
6850: NOT
6851: IFFALSE 6819
// for un in battle_flags_id do
6853: LD_ADDR_VAR 0 1
6857: PUSH
6858: LD_EXP 44
6862: PUSH
6863: FOR_IN
6864: IFFALSE 6877
// KillBattleFlag ( un ) ;
6866: LD_VAR 0 1
6870: PPUSH
6871: CALL_OW 419
6875: GO 6863
6877: POP
6878: POP
// end ; end_of_file
6879: PPOPN 1
6881: END
// export score ; every 0 0$1 trigger Game_Type = 3 do
6882: LD_EXP 18
6886: PUSH
6887: LD_INT 3
6889: EQUAL
6890: IFFALSE 6905
6892: GO 6894
6894: DISABLE
// begin SetAreaMapShow ( KopecStred , true ) ;
6895: LD_INT 2
6897: PPUSH
6898: LD_INT 1
6900: PPUSH
6901: CALL_OW 424
// end ;
6905: END
// every 0 0$1 trigger Game_Type = 3 do var un , filter , output , side , new_score ;
6906: LD_EXP 18
6910: PUSH
6911: LD_INT 3
6913: EQUAL
6914: IFFALSE 7199
6916: GO 6918
6918: DISABLE
6919: LD_INT 0
6921: PPUSH
6922: PPUSH
6923: PPUSH
6924: PPUSH
6925: PPUSH
// begin filter := FilterUnitsInArea ( KopecStred , [ [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ready ] ] ) ;
6926: LD_ADDR_VAR 0 2
6930: PUSH
6931: LD_INT 2
6933: PPUSH
6934: LD_INT 2
6936: PUSH
6937: LD_INT 30
6939: PUSH
6940: LD_INT 0
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 30
6949: PUSH
6950: LD_INT 1
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 53
6964: PUSH
6965: EMPTY
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PPUSH
6972: CALL_OW 70
6976: ST_TO_ADDR
// if filter then
6977: LD_VAR 0 2
6981: IFFALSE 7055
// for un in filter do
6983: LD_ADDR_VAR 0 1
6987: PUSH
6988: LD_VAR 0 2
6992: PUSH
6993: FOR_IN
6994: IFFALSE 7053
// begin new_score := score [ GetSide ( un ) ] + 1 ;
6996: LD_ADDR_VAR 0 5
7000: PUSH
7001: LD_EXP 57
7005: PUSH
7006: LD_VAR 0 1
7010: PPUSH
7011: CALL_OW 255
7015: ARRAY
7016: PUSH
7017: LD_INT 1
7019: PLUS
7020: ST_TO_ADDR
// score := Replace ( score , GetSide ( un ) , new_score ) ;
7021: LD_ADDR_EXP 57
7025: PUSH
7026: LD_EXP 57
7030: PPUSH
7031: LD_VAR 0 1
7035: PPUSH
7036: CALL_OW 255
7040: PPUSH
7041: LD_VAR 0 5
7045: PPUSH
7046: CALL_OW 1
7050: ST_TO_ADDR
// end ;
7051: GO 6993
7053: POP
7054: POP
// if not def_public_score then
7055: LD_EXP 14
7059: NOT
7060: IFFALSE 7163
// begin output := [ ] ;
7062: LD_ADDR_VAR 0 3
7066: PUSH
7067: EMPTY
7068: ST_TO_ADDR
// for side = 1 to Side_Positions do
7069: LD_ADDR_VAR 0 4
7073: PUSH
7074: DOUBLE
7075: LD_INT 1
7077: DEC
7078: ST_TO_ADDR
7079: LD_EXP 37
7083: PUSH
7084: FOR_TO
7085: IFFALSE 7149
// if Side_Positions [ side ] then
7087: LD_EXP 37
7091: PUSH
7092: LD_VAR 0 4
7096: ARRAY
7097: IFFALSE 7147
// output := output ^ ( mp_sides_players_names [ side ] & :  & score [ side ] & /  & amount_score ) ;
7099: LD_ADDR_VAR 0 3
7103: PUSH
7104: LD_VAR 0 3
7108: PUSH
7109: LD_OWVAR 19
7113: PUSH
7114: LD_VAR 0 4
7118: ARRAY
7119: PUSH
7120: LD_STRING : 
7122: STR
7123: PUSH
7124: LD_EXP 57
7128: PUSH
7129: LD_VAR 0 4
7133: ARRAY
7134: STR
7135: PUSH
7136: LD_STRING / 
7138: STR
7139: PUSH
7140: LD_EXP 31
7144: STR
7145: ADD
7146: ST_TO_ADDR
7147: GO 7084
7149: POP
7150: POP
// ExtraStrings := output ;
7151: LD_ADDR_EXP 58
7155: PUSH
7156: LD_VAR 0 3
7160: ST_TO_ADDR
// end else
7161: GO 7198
// ExtraStrings := [ #KingoftheHill-Private , your_side , score [ Your_Side ] , amount_score ] ;
7163: LD_ADDR_EXP 58
7167: PUSH
7168: LD_STRING #KingoftheHill-Private
7170: PUSH
7171: LD_OWVAR 2
7175: PUSH
7176: LD_EXP 57
7180: PUSH
7181: LD_OWVAR 2
7185: ARRAY
7186: PUSH
7187: LD_EXP 31
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: ST_TO_ADDR
// enable ;
7198: ENABLE
// end ;
7199: PPOPN 5
7201: END
// every 0 0$1 marked 100 do var side ;
7202: GO 7204
7204: DISABLE
7205: LD_INT 0
7207: PPUSH
// begin for side = 1 to Side_Positions do
7208: LD_ADDR_VAR 0 1
7212: PUSH
7213: DOUBLE
7214: LD_INT 1
7216: DEC
7217: ST_TO_ADDR
7218: LD_EXP 37
7222: PUSH
7223: FOR_TO
7224: IFFALSE 7262
// if Side_Positions [ side ] then
7226: LD_EXP 37
7230: PUSH
7231: LD_VAR 0 1
7235: ARRAY
7236: IFFALSE 7260
// if score [ side ] >= amount_score then
7238: LD_EXP 57
7242: PUSH
7243: LD_VAR 0 1
7247: ARRAY
7248: PUSH
7249: LD_EXP 31
7253: GREATEREQUAL
7254: IFFALSE 7260
// show_that_you_are_winner_or_looser ;
7256: CALL 7268 0 0
7260: GO 7223
7262: POP
7263: POP
// enable ;
7264: ENABLE
// end ;
7265: PPOPN 1
7267: END
// function show_that_you_are_winner_or_looser ; var i ; begin
7268: LD_INT 0
7270: PPUSH
7271: PPUSH
// if score [ your_side ] >= amount_score then
7272: LD_EXP 57
7276: PUSH
7277: LD_OWVAR 2
7281: ARRAY
7282: PUSH
7283: LD_EXP 31
7287: GREATEREQUAL
7288: IFFALSE 7305
// begin wait ( 0 0$3 ) ;
7290: LD_INT 105
7292: PPUSH
7293: CALL_OW 67
// YouWinInMultiplayer ;
7297: CALL_OW 106
// exit ;
7301: GO 7318
// end else
7303: GO 7318
// begin wait ( 0 0$3 ) ;
7305: LD_INT 105
7307: PPUSH
7308: CALL_OW 67
// YouLostInMultiplayer ;
7312: CALL_OW 107
// exit ;
7316: GO 7318
// end ; end ; end_of_file
7318: LD_VAR 0 1
7322: RET
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
7323: LD_INT 0
7325: PPUSH
7326: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7327: LD_ADDR_VAR 0 2
7331: PUSH
7332: LD_STRING #Multi1x1-Time
7334: PUSH
7335: LD_OWVAR 1
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: ST_TO_ADDR
// if WaitServerStrings then
7344: LD_EXP 59
7348: IFFALSE 7366
// AllStrings = AllStrings ^ WaitServerStrings ;
7350: LD_ADDR_VAR 0 2
7354: PUSH
7355: LD_VAR 0 2
7359: PUSH
7360: LD_EXP 59
7364: ADD
7365: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7366: LD_INT 0
7368: PUSH
7369: LD_EXP 32
7373: PUSH
7374: LD_OWVAR 1
7378: MINUS
7379: LESSEQUAL
7380: IFFALSE 7411
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7382: LD_ADDR_VAR 0 2
7386: PUSH
7387: LD_VAR 0 2
7391: PUSH
7392: LD_STRING #allowedsibbomb
7394: PUSH
7395: LD_EXP 32
7399: PUSH
7400: LD_OWVAR 1
7404: MINUS
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: ADD
7410: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7411: LD_INT 0
7413: PUSH
7414: LD_EXP 63
7418: PUSH
7419: LD_OWVAR 1
7423: MINUS
7424: LESSEQUAL
7425: IFFALSE 7456
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7427: LD_ADDR_VAR 0 2
7431: PUSH
7432: LD_VAR 0 2
7436: PUSH
7437: LD_STRING #builduptime
7439: PUSH
7440: LD_EXP 63
7444: PUSH
7445: LD_OWVAR 1
7449: MINUS
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: ADD
7455: ST_TO_ADDR
// if ( ExtraStrings ) then
7456: LD_EXP 58
7460: IFFALSE 7482
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7462: LD_ADDR_VAR 0 2
7466: PUSH
7467: LD_VAR 0 2
7471: PUSH
7472: LD_STRING 
7474: ADD
7475: PUSH
7476: LD_EXP 58
7480: ADD
7481: ST_TO_ADDR
// if ( Display_kings ) and not isSGUI then
7482: LD_EXP 60
7486: PUSH
7487: LD_OWVAR 83
7491: NOT
7492: AND
7493: IFFALSE 7511
// AllStrings = AllStrings ^ Display_kings ;
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: LD_VAR 0 2
7504: PUSH
7505: LD_EXP 60
7509: ADD
7510: ST_TO_ADDR
// Display_Strings := AllStrings ;
7511: LD_ADDR_OWVAR 47
7515: PUSH
7516: LD_VAR 0 2
7520: ST_TO_ADDR
// end ;
7521: LD_VAR 0 1
7525: RET
// every 0 0$1 do
7526: GO 7528
7528: DISABLE
// begin ShowTimer ;
7529: CALL 7323 0 0
// enable ;
7533: ENABLE
// end ; end_of_file
7534: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
7535: LD_INT 0
7537: PPUSH
7538: PPUSH
7539: PPUSH
// sharedPoints1 = [ ] ;
7540: LD_ADDR_LOC 14
7544: PUSH
7545: EMPTY
7546: ST_TO_ADDR
// sharedPoints2 = [ ] ;
7547: LD_ADDR_LOC 15
7551: PUSH
7552: EMPTY
7553: ST_TO_ADDR
// sharedPoints3 = [ ] ;
7554: LD_ADDR_LOC 16
7558: PUSH
7559: EMPTY
7560: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
7561: LD_ADDR_VAR 0 2
7565: PUSH
7566: DOUBLE
7567: LD_INT 1
7569: DEC
7570: ST_TO_ADDR
7571: LD_EXP 37
7575: PUSH
7576: LD_INT 0
7578: PLUS
7579: PUSH
7580: FOR_TO
7581: IFFALSE 7683
// begin if not Side_Positions [ i ] = 0 then
7583: LD_EXP 37
7587: PUSH
7588: LD_VAR 0 2
7592: ARRAY
7593: PUSH
7594: LD_INT 0
7596: EQUAL
7597: NOT
7598: IFFALSE 7612
// SetMultiScore ( i , 0 ) ;
7600: LD_VAR 0 2
7604: PPUSH
7605: LD_INT 0
7607: PPUSH
7608: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
7612: LD_ADDR_LOC 14
7616: PUSH
7617: LD_LOC 14
7621: PPUSH
7622: LD_VAR 0 2
7626: PPUSH
7627: LD_INT 0
7629: PPUSH
7630: CALL_OW 1
7634: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
7635: LD_ADDR_LOC 15
7639: PUSH
7640: LD_LOC 15
7644: PPUSH
7645: LD_VAR 0 2
7649: PPUSH
7650: LD_INT 0
7652: PPUSH
7653: CALL_OW 1
7657: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
7658: LD_ADDR_LOC 16
7662: PUSH
7663: LD_LOC 16
7667: PPUSH
7668: LD_VAR 0 2
7672: PPUSH
7673: LD_INT 0
7675: PPUSH
7676: CALL_OW 1
7680: ST_TO_ADDR
// end ;
7681: GO 7580
7683: POP
7684: POP
// pointGame = true ;
7685: LD_ADDR_LOC 17
7689: PUSH
7690: LD_INT 1
7692: ST_TO_ADDR
// end ;
7693: LD_VAR 0 1
7697: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
7698: LD_LOC 17
7702: IFFALSE 8113
7704: GO 7706
7706: DISABLE
7707: LD_INT 0
7709: PPUSH
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
7715: PPUSH
7716: PPUSH
7717: PPUSH
7718: PPUSH
7719: PPUSH
7720: PPUSH
7721: PPUSH
// begin if isSGUI then
7722: LD_OWVAR 83
7726: IFFALSE 8113
// begin if Teams [ 1 ] then
7728: LD_EXP 35
7732: PUSH
7733: LD_INT 1
7735: ARRAY
7736: IFFALSE 7748
// red = true else
7738: LD_ADDR_VAR 0 2
7742: PUSH
7743: LD_INT 1
7745: ST_TO_ADDR
7746: GO 7756
// red = false ;
7748: LD_ADDR_VAR 0 2
7752: PUSH
7753: LD_INT 0
7755: ST_TO_ADDR
// if Teams [ 2 ] then
7756: LD_EXP 35
7760: PUSH
7761: LD_INT 2
7763: ARRAY
7764: IFFALSE 7776
// blue = true else
7766: LD_ADDR_VAR 0 3
7770: PUSH
7771: LD_INT 1
7773: ST_TO_ADDR
7774: GO 7784
// blue = false ;
7776: LD_ADDR_VAR 0 3
7780: PUSH
7781: LD_INT 0
7783: ST_TO_ADDR
// if Teams [ 3 ] then
7784: LD_EXP 35
7788: PUSH
7789: LD_INT 3
7791: ARRAY
7792: IFFALSE 7804
// yel = true else
7794: LD_ADDR_VAR 0 4
7798: PUSH
7799: LD_INT 1
7801: ST_TO_ADDR
7802: GO 7812
// yel = false ;
7804: LD_ADDR_VAR 0 4
7808: PUSH
7809: LD_INT 0
7811: ST_TO_ADDR
// if Teams [ 4 ] then
7812: LD_EXP 35
7816: PUSH
7817: LD_INT 4
7819: ARRAY
7820: IFFALSE 7832
// green = true else
7822: LD_ADDR_VAR 0 5
7826: PUSH
7827: LD_INT 1
7829: ST_TO_ADDR
7830: GO 7840
// green = false ;
7832: LD_ADDR_VAR 0 5
7836: PUSH
7837: LD_INT 0
7839: ST_TO_ADDR
// if def_public_score then
7840: LD_EXP 14
7844: IFFALSE 7856
// p = true else
7846: LD_ADDR_VAR 0 12
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
7854: GO 7864
// p = false ;
7856: LD_ADDR_VAR 0 12
7860: PUSH
7861: LD_INT 0
7863: ST_TO_ADDR
// if team_game then
7864: LD_EXP 39
7868: IFFALSE 7949
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
7870: LD_ADDR_VAR 0 13
7874: PUSH
7875: LD_INT 3
7877: PUSH
7878: LD_INT 1
7880: PUSH
7881: LD_INT 2
7883: PUSH
7884: LD_INT 7
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: PUSH
7893: LD_EXP 48
7897: ARRAY
7898: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
7899: LD_ADDR_VAR 0 10
7903: PUSH
7904: LD_STRING {
7906: PUSH
7907: LD_VAR 0 3
7911: STR
7912: PUSH
7913: LD_STRING ,
7915: STR
7916: PUSH
7917: LD_VAR 0 4
7921: STR
7922: PUSH
7923: LD_STRING ,
7925: STR
7926: PUSH
7927: LD_VAR 0 2
7931: STR
7932: PUSH
7933: LD_STRING ,0,0,0,
7935: STR
7936: PUSH
7937: LD_VAR 0 5
7941: STR
7942: PUSH
7943: LD_STRING ,0}
7945: STR
7946: ST_TO_ADDR
// end else
7947: GO 8049
// begin you = your_side ;
7949: LD_ADDR_VAR 0 13
7953: PUSH
7954: LD_OWVAR 2
7958: ST_TO_ADDR
// s = { ;
7959: LD_ADDR_VAR 0 10
7963: PUSH
7964: LD_STRING {
7966: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
7967: LD_ADDR_VAR 0 1
7971: PUSH
7972: DOUBLE
7973: LD_INT 1
7975: DEC
7976: ST_TO_ADDR
7977: LD_EXP 37
7981: PUSH
7982: LD_INT 0
7984: PLUS
7985: PUSH
7986: FOR_TO
7987: IFFALSE 8033
// if side_positions [ i ] then
7989: LD_EXP 37
7993: PUSH
7994: LD_VAR 0 1
7998: ARRAY
7999: IFFALSE 8017
// s = s & 1, else
8001: LD_ADDR_VAR 0 10
8005: PUSH
8006: LD_VAR 0 10
8010: PUSH
8011: LD_STRING 1,
8013: STR
8014: ST_TO_ADDR
8015: GO 8031
// s = s & 0, ;
8017: LD_ADDR_VAR 0 10
8021: PUSH
8022: LD_VAR 0 10
8026: PUSH
8027: LD_STRING 0,
8029: STR
8030: ST_TO_ADDR
8031: GO 7986
8033: POP
8034: POP
// s = s & } ;
8035: LD_ADDR_VAR 0 10
8039: PUSH
8040: LD_VAR 0 10
8044: PUSH
8045: LD_STRING }
8047: STR
8048: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
8049: LD_STRING initScore(
8051: PUSH
8052: LD_VAR 0 10
8056: STR
8057: PUSH
8058: LD_STRING ,
8060: STR
8061: PUSH
8062: LD_VAR 0 12
8066: STR
8067: PUSH
8068: LD_STRING ,
8070: STR
8071: PUSH
8072: LD_VAR 0 13
8076: STR
8077: PUSH
8078: LD_STRING  );
8080: STR
8081: PPUSH
8082: CALL_OW 559
// if game_type = 3 then
8086: LD_EXP 18
8090: PUSH
8091: LD_INT 3
8093: EQUAL
8094: IFFALSE 8113
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
8096: LD_STRING AddScorePoints(2,2,
8098: PUSH
8099: LD_EXP 46
8103: STR
8104: PUSH
8105: LD_STRING  );
8107: STR
8108: PPUSH
8109: CALL_OW 559
// end ; end ;
8113: PPOPN 13
8115: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
8116: LD_INT 0
8118: PPUSH
8119: PPUSH
// case typ of 1 :
8120: LD_VAR 0 3
8124: PUSH
8125: LD_INT 1
8127: DOUBLE
8128: EQUAL
8129: IFTRUE 8133
8131: GO 8161
8133: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
8134: LD_ADDR_LOC 14
8138: PUSH
8139: LD_LOC 14
8143: PPUSH
8144: LD_VAR 0 1
8148: PPUSH
8149: LD_VAR 0 2
8153: PPUSH
8154: CALL_OW 1
8158: ST_TO_ADDR
8159: GO 8234
8161: LD_INT 2
8163: DOUBLE
8164: EQUAL
8165: IFTRUE 8169
8167: GO 8197
8169: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
8170: LD_ADDR_LOC 15
8174: PUSH
8175: LD_LOC 15
8179: PPUSH
8180: LD_VAR 0 1
8184: PPUSH
8185: LD_VAR 0 2
8189: PPUSH
8190: CALL_OW 1
8194: ST_TO_ADDR
8195: GO 8234
8197: LD_INT 3
8199: DOUBLE
8200: EQUAL
8201: IFTRUE 8205
8203: GO 8233
8205: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
8206: LD_ADDR_LOC 16
8210: PUSH
8211: LD_LOC 16
8215: PPUSH
8216: LD_VAR 0 1
8220: PPUSH
8221: LD_VAR 0 2
8225: PPUSH
8226: CALL_OW 1
8230: ST_TO_ADDR
8231: GO 8234
8233: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
8234: LD_ADDR_VAR 0 5
8238: PUSH
8239: LD_LOC 14
8243: PUSH
8244: LD_VAR 0 1
8248: ARRAY
8249: PUSH
8250: LD_LOC 15
8254: PUSH
8255: LD_VAR 0 1
8259: ARRAY
8260: PLUS
8261: PUSH
8262: LD_LOC 16
8266: PUSH
8267: LD_VAR 0 1
8271: ARRAY
8272: PLUS
8273: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
8274: LD_VAR 0 1
8278: PPUSH
8279: LD_VAR 0 5
8283: PPUSH
8284: CALL_OW 506
// end ; end_of_file
8288: LD_VAR 0 4
8292: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8293: LD_INT 0
8295: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8296: LD_VAR 0 1
8300: PPUSH
8301: CALL_OW 255
8305: PUSH
8306: LD_VAR 0 4
8310: EQUAL
8311: IFFALSE 8330
// begin SetAchievement ( ACH_RAD ) ;
8313: LD_STRING ACH_RAD
8315: PPUSH
8316: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8320: LD_STRING ACH_NL
8322: PPUSH
8323: LD_INT 1
8325: PPUSH
8326: CALL_OW 564
// end end ;
8330: LD_VAR 0 5
8334: RET
// export function SA_Win ( side ) ; begin
8335: LD_INT 0
8337: PPUSH
// case side of 1 :
8338: LD_VAR 0 1
8342: PUSH
8343: LD_INT 1
8345: DOUBLE
8346: EQUAL
8347: IFTRUE 8351
8349: GO 8364
8351: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8352: LD_STRING ACH_AH
8354: PPUSH
8355: LD_INT 1
8357: PPUSH
8358: CALL_OW 564
8362: GO 8527
8364: LD_INT 2
8366: DOUBLE
8367: EQUAL
8368: IFTRUE 8372
8370: GO 8385
8372: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8373: LD_STRING ACH_E
8375: PPUSH
8376: LD_INT 1
8378: PPUSH
8379: CALL_OW 564
8383: GO 8527
8385: LD_INT 3
8387: DOUBLE
8388: EQUAL
8389: IFTRUE 8393
8391: GO 8406
8393: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8394: LD_STRING ACH_OOL
8396: PPUSH
8397: LD_INT 1
8399: PPUSH
8400: CALL_OW 564
8404: GO 8527
8406: LD_INT 1
8408: PUSH
8409: LD_INT 2
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: DOUBLE
8416: EQUAL
8417: IFTRUE 8421
8419: GO 8446
8421: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8422: LD_STRING ACH_AH
8424: PPUSH
8425: LD_REAL  5.00000000000000E-0001
8428: PPUSH
8429: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8433: LD_STRING ACH_E
8435: PPUSH
8436: LD_REAL  5.00000000000000E-0001
8439: PPUSH
8440: CALL_OW 564
// end ; [ 2 , 3 ] :
8444: GO 8527
8446: LD_INT 2
8448: PUSH
8449: LD_INT 3
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: DOUBLE
8456: EQUAL
8457: IFTRUE 8461
8459: GO 8486
8461: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8462: LD_STRING ACH_OOL
8464: PPUSH
8465: LD_REAL  5.00000000000000E-0001
8468: PPUSH
8469: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8473: LD_STRING ACH_E
8475: PPUSH
8476: LD_REAL  5.00000000000000E-0001
8479: PPUSH
8480: CALL_OW 564
// end ; [ 3 , 1 ] :
8484: GO 8527
8486: LD_INT 3
8488: PUSH
8489: LD_INT 1
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: DOUBLE
8496: EQUAL
8497: IFTRUE 8501
8499: GO 8526
8501: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8502: LD_STRING ACH_AH
8504: PPUSH
8505: LD_REAL  5.00000000000000E-0001
8508: PPUSH
8509: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8513: LD_STRING ACH_OOL
8515: PPUSH
8516: LD_REAL  5.00000000000000E-0001
8519: PPUSH
8520: CALL_OW 564
// end ; end ;
8524: GO 8527
8526: POP
// end ; end_of_file
8527: LD_VAR 0 2
8531: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8532: LD_INT 0
8534: PPUSH
8535: PPUSH
// enable ( 98 ) ;
8536: LD_INT 98
8538: ENABLE_MARKED
// GameEnded = false ;
8539: LD_ADDR_LOC 19
8543: PUSH
8544: LD_INT 0
8546: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8547: LD_ADDR_LOC 18
8551: PUSH
8552: LD_INT 0
8554: PUSH
8555: LD_INT 0
8557: PUSH
8558: LD_INT 0
8560: PUSH
8561: LD_INT 0
8563: PUSH
8564: LD_INT 0
8566: PUSH
8567: LD_INT 0
8569: PUSH
8570: LD_INT 0
8572: PUSH
8573: LD_INT 0
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: ST_TO_ADDR
// unfoged = false ;
8586: LD_ADDR_LOC 20
8590: PUSH
8591: LD_INT 0
8593: ST_TO_ADDR
// defeated_specs := [ ] ;
8594: LD_ADDR_LOC 21
8598: PUSH
8599: EMPTY
8600: ST_TO_ADDR
// for i = 1 to side_positions do
8601: LD_ADDR_VAR 0 2
8605: PUSH
8606: DOUBLE
8607: LD_INT 1
8609: DEC
8610: ST_TO_ADDR
8611: LD_EXP 37
8615: PUSH
8616: FOR_TO
8617: IFFALSE 8657
// if not side_positions [ i ] then
8619: LD_EXP 37
8623: PUSH
8624: LD_VAR 0 2
8628: ARRAY
8629: NOT
8630: IFFALSE 8655
// defeated = replace ( defeated , i , true ) ;
8632: LD_ADDR_LOC 18
8636: PUSH
8637: LD_LOC 18
8641: PPUSH
8642: LD_VAR 0 2
8646: PPUSH
8647: LD_INT 1
8649: PPUSH
8650: CALL_OW 1
8654: ST_TO_ADDR
8655: GO 8616
8657: POP
8658: POP
// end ;
8659: LD_VAR 0 1
8663: RET
// function CanWinLoose ; begin
8664: LD_INT 0
8666: PPUSH
// Result := true ;
8667: LD_ADDR_VAR 0 1
8671: PUSH
8672: LD_INT 1
8674: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8675: CALL_OW 518
8679: PUSH
8680: CALL_OW 519
8684: PUSH
8685: LD_INT 0
8687: GREATER
8688: AND
8689: IFFALSE 8699
// Result := false ;
8691: LD_ADDR_VAR 0 1
8695: PUSH
8696: LD_INT 0
8698: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8699: CALL_OW 531
8703: PUSH
8704: CALL_OW 519
8708: PUSH
8709: LD_INT 1
8711: GREATER
8712: AND
8713: IFFALSE 8723
// Result := false ;
8715: LD_ADDR_VAR 0 1
8719: PUSH
8720: LD_INT 0
8722: ST_TO_ADDR
// end ;
8723: LD_VAR 0 1
8727: RET
// export function HasPower ( i ) ; var k , h ; begin
8728: LD_INT 0
8730: PPUSH
8731: PPUSH
8732: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8733: LD_VAR 0 1
8737: PPUSH
8738: CALL_OW 108
8742: NOT
8743: PUSH
8744: LD_EXP 36
8748: PUSH
8749: LD_VAR 0 1
8753: ARRAY
8754: NOT
8755: AND
8756: PUSH
8757: LD_OWVAR 4
8761: AND
8762: IFFALSE 8774
// begin result = false ;
8764: LD_ADDR_VAR 0 2
8768: PUSH
8769: LD_INT 0
8771: ST_TO_ADDR
// end else
8772: GO 9069
// case def_win_rules of 0 :
8774: LD_EXP 33
8778: PUSH
8779: LD_INT 0
8781: DOUBLE
8782: EQUAL
8783: IFTRUE 8787
8785: GO 8950
8787: POP
// if def_people_respawning then
8788: LD_EXP 11
8792: IFFALSE 8883
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8794: LD_ADDR_VAR 0 2
8798: PUSH
8799: LD_INT 22
8801: PUSH
8802: LD_VAR 0 1
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PUSH
8811: LD_INT 2
8813: PUSH
8814: LD_INT 21
8816: PUSH
8817: LD_INT 1
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 33
8826: PUSH
8827: LD_INT 3
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 33
8836: PUSH
8837: LD_INT 5
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 30
8846: PUSH
8847: LD_INT 0
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: LD_INT 30
8856: PUSH
8857: LD_INT 1
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PPUSH
8876: CALL_OW 69
8880: ST_TO_ADDR
8881: GO 8948
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8883: LD_ADDR_VAR 0 2
8887: PUSH
8888: LD_INT 22
8890: PUSH
8891: LD_VAR 0 1
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PUSH
8900: LD_INT 2
8902: PUSH
8903: LD_INT 21
8905: PUSH
8906: LD_INT 1
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 33
8915: PUSH
8916: LD_INT 3
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 33
8925: PUSH
8926: LD_INT 5
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 69
8947: ST_TO_ADDR
8948: GO 9069
8950: LD_INT 1
8952: DOUBLE
8953: EQUAL
8954: IFTRUE 8958
8956: GO 8997
8958: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8959: LD_ADDR_VAR 0 2
8963: PUSH
8964: LD_INT 22
8966: PUSH
8967: LD_VAR 0 1
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 21
8978: PUSH
8979: LD_INT 1
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PPUSH
8990: CALL_OW 69
8994: ST_TO_ADDR
8995: GO 9069
8997: LD_INT 2
8999: DOUBLE
9000: EQUAL
9001: IFTRUE 9005
9003: GO 9068
9005: POP
// begin h = false ;
9006: LD_ADDR_VAR 0 4
9010: PUSH
9011: LD_INT 0
9013: ST_TO_ADDR
// for k in heroes [ i ] do
9014: LD_ADDR_VAR 0 3
9018: PUSH
9019: LD_EXP 49
9023: PUSH
9024: LD_VAR 0 1
9028: ARRAY
9029: PUSH
9030: FOR_IN
9031: IFFALSE 9054
// if IsLive ( k ) then
9033: LD_VAR 0 3
9037: PPUSH
9038: CALL_OW 300
9042: IFFALSE 9052
// h = true ;
9044: LD_ADDR_VAR 0 4
9048: PUSH
9049: LD_INT 1
9051: ST_TO_ADDR
9052: GO 9030
9054: POP
9055: POP
// Result := h ;
9056: LD_ADDR_VAR 0 2
9060: PUSH
9061: LD_VAR 0 4
9065: ST_TO_ADDR
// end ; end ;
9066: GO 9069
9068: POP
// end ;
9069: LD_VAR 0 2
9073: RET
// function AlliedSides ( i , j ) ; begin
9074: LD_INT 0
9076: PPUSH
// Result := false ;
9077: LD_ADDR_VAR 0 3
9081: PUSH
9082: LD_INT 0
9084: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9085: LD_VAR 0 1
9089: PPUSH
9090: LD_VAR 0 2
9094: PPUSH
9095: CALL_OW 81
9099: PUSH
9100: LD_INT 1
9102: EQUAL
9103: PUSH
9104: LD_VAR 0 2
9108: PPUSH
9109: LD_VAR 0 1
9113: PPUSH
9114: CALL_OW 81
9118: PUSH
9119: LD_INT 1
9121: EQUAL
9122: AND
9123: PUSH
9124: LD_VAR 0 1
9128: PPUSH
9129: CALL_OW 83
9133: AND
9134: PUSH
9135: LD_VAR 0 2
9139: PPUSH
9140: CALL_OW 83
9144: AND
9145: IFFALSE 9155
// Result := true ;
9147: LD_ADDR_VAR 0 3
9151: PUSH
9152: LD_INT 1
9154: ST_TO_ADDR
// end ;
9155: LD_VAR 0 3
9159: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9160: CALL 8664 0 0
9164: PUSH
9165: LD_LOC 19
9169: NOT
9170: AND
9171: IFFALSE 9187
9173: GO 9175
9175: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9176: LD_ADDR_EXP 59
9180: PUSH
9181: LD_STRING #Player-Ended
9183: PUSH
9184: EMPTY
9185: LIST
9186: ST_TO_ADDR
9187: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9188: CALL 8664 0 0
9192: PUSH
9193: LD_LOC 19
9197: AND
9198: IFFALSE 9207
9200: GO 9202
9202: DISABLE
// YouLostInMultiplayer ;
9203: CALL_OW 107
9207: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9208: CALL 8664 0 0
9212: NOT
9213: PUSH
9214: CALL_OW 531
9218: NOT
9219: AND
9220: IFFALSE 9236
9222: GO 9224
9224: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9225: LD_ADDR_EXP 59
9229: PUSH
9230: LD_STRING #server-wait
9232: PUSH
9233: EMPTY
9234: LIST
9235: ST_TO_ADDR
9236: END
// every 100 trigger IAmSpec do
9237: CALL_OW 531
9241: IFFALSE 9257
9243: GO 9245
9245: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9246: LD_ADDR_EXP 59
9250: PUSH
9251: LD_STRING #Player-IAmSpec
9253: PUSH
9254: EMPTY
9255: LIST
9256: ST_TO_ADDR
9257: END
// every 100 trigger GameEnded and IAmSpec do
9258: LD_LOC 19
9262: PUSH
9263: CALL_OW 531
9267: AND
9268: IFFALSE 9277
9270: GO 9272
9272: DISABLE
// YouLostInMultiplayer ;
9273: CALL_OW 107
9277: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9278: CALL 8664 0 0
9282: PUSH
9283: LD_LOC 19
9287: NOT
9288: AND
9289: IFFALSE 9305
9291: GO 9293
9293: DISABLE
// WaitServerStrings = [ $player-win ] ;
9294: LD_ADDR_EXP 59
9298: PUSH
9299: LD_STRING $player-win
9301: PUSH
9302: EMPTY
9303: LIST
9304: ST_TO_ADDR
9305: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9306: CALL 8664 0 0
9310: PUSH
9311: LD_LOC 19
9315: AND
9316: IFFALSE 9340
9318: GO 9320
9320: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9321: LD_EXP 38
9325: PUSH
9326: LD_OWVAR 7
9330: ARRAY
9331: PPUSH
9332: CALL 8335 0 1
// YouWinInMultiplayer ;
9336: CALL_OW 106
// end ;
9340: END
// every 100 trigger isEditor marked 401 do
9341: LD_OWVAR 84
9345: IFFALSE 9361
9347: GO 9349
9349: DISABLE
// Debug_Strings = [ You won ] ;
9350: LD_ADDR_OWVAR 48
9354: PUSH
9355: LD_STRING You won
9357: PUSH
9358: EMPTY
9359: LIST
9360: ST_TO_ADDR
9361: END
// every 100 trigger isEditor marked 400 do
9362: LD_OWVAR 84
9366: IFFALSE 9382
9368: GO 9370
9370: DISABLE
// Debug_Strings = [ You loss ] ;
9371: LD_ADDR_OWVAR 48
9375: PUSH
9376: LD_STRING You loss
9378: PUSH
9379: EMPTY
9380: LIST
9381: ST_TO_ADDR
9382: END
// every 100 marked 98 do var i , un ;
9383: GO 9385
9385: DISABLE
9386: LD_INT 0
9388: PPUSH
9389: PPUSH
// begin for i = 1 to side_positions do
9390: LD_ADDR_VAR 0 1
9394: PUSH
9395: DOUBLE
9396: LD_INT 1
9398: DEC
9399: ST_TO_ADDR
9400: LD_EXP 37
9404: PUSH
9405: FOR_TO
9406: IFFALSE 9493
// begin if side_positions [ i ] then
9408: LD_EXP 37
9412: PUSH
9413: LD_VAR 0 1
9417: ARRAY
9418: IFFALSE 9491
// if not HasPower ( i ) and not defeated [ i ] then
9420: LD_VAR 0 1
9424: PPUSH
9425: CALL 8728 0 1
9429: NOT
9430: PUSH
9431: LD_LOC 18
9435: PUSH
9436: LD_VAR 0 1
9440: ARRAY
9441: NOT
9442: AND
9443: IFFALSE 9491
// begin defeated = replace ( defeated , i , true ) ;
9445: LD_ADDR_LOC 18
9449: PUSH
9450: LD_LOC 18
9454: PPUSH
9455: LD_VAR 0 1
9459: PPUSH
9460: LD_INT 1
9462: PPUSH
9463: CALL_OW 1
9467: ST_TO_ADDR
// if i = mp_player_side then
9468: LD_VAR 0 1
9472: PUSH
9473: LD_OWVAR 7
9477: EQUAL
9478: IFFALSE 9491
// begin Multiplayer_Loose_Message ;
9480: CALL_OW 521
// SetPlayerSpectator ( ) ;
9484: CALL_OW 572
// enable ( 400 ) ;
9488: LD_INT 400
9490: ENABLE_MARKED
// end ; end ; end ;
9491: GO 9405
9493: POP
9494: POP
// DidGameEnd ;
9495: CALL 9510 0 0
// if not GameEnded then
9499: LD_LOC 19
9503: NOT
9504: IFFALSE 9507
// enable ;
9506: ENABLE
// end ;
9507: PPOPN 2
9509: END
// function DidGameEnd ; var i , k , enemy ; begin
9510: LD_INT 0
9512: PPUSH
9513: PPUSH
9514: PPUSH
9515: PPUSH
// enemy = [ ] ;
9516: LD_ADDR_VAR 0 4
9520: PUSH
9521: EMPTY
9522: ST_TO_ADDR
// for i = 1 to side_positions do
9523: LD_ADDR_VAR 0 2
9527: PUSH
9528: DOUBLE
9529: LD_INT 1
9531: DEC
9532: ST_TO_ADDR
9533: LD_EXP 37
9537: PUSH
9538: FOR_TO
9539: IFFALSE 9633
// if not defeated [ i ] then
9541: LD_LOC 18
9545: PUSH
9546: LD_VAR 0 2
9550: ARRAY
9551: NOT
9552: IFFALSE 9631
// for k = 1 to side_positions do
9554: LD_ADDR_VAR 0 3
9558: PUSH
9559: DOUBLE
9560: LD_INT 1
9562: DEC
9563: ST_TO_ADDR
9564: LD_EXP 37
9568: PUSH
9569: FOR_TO
9570: IFFALSE 9629
// if not defeated [ k ] then
9572: LD_LOC 18
9576: PUSH
9577: LD_VAR 0 3
9581: ARRAY
9582: NOT
9583: IFFALSE 9627
// if not AlliedSides ( i , k ) then
9585: LD_VAR 0 2
9589: PPUSH
9590: LD_VAR 0 3
9594: PPUSH
9595: CALL 9074 0 2
9599: NOT
9600: IFFALSE 9627
// enemy = enemy ^ [ i , k ] ;
9602: LD_ADDR_VAR 0 4
9606: PUSH
9607: LD_VAR 0 4
9611: PUSH
9612: LD_VAR 0 2
9616: PUSH
9617: LD_VAR 0 3
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: ADD
9626: ST_TO_ADDR
9627: GO 9569
9629: POP
9630: POP
9631: GO 9538
9633: POP
9634: POP
// if not enemy then
9635: LD_VAR 0 4
9639: NOT
9640: IFFALSE 9666
// begin GameEnded = true ;
9642: LD_ADDR_LOC 19
9646: PUSH
9647: LD_INT 1
9649: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9650: LD_LOC 18
9654: PUSH
9655: LD_OWVAR 7
9659: ARRAY
9660: NOT
9661: IFFALSE 9666
// enable ( 401 ) ;
9663: LD_INT 401
9665: ENABLE_MARKED
// end ; end ;
9666: LD_VAR 0 1
9670: RET
// function unfog ; var k , friends ; begin
9671: LD_INT 0
9673: PPUSH
9674: PPUSH
9675: PPUSH
// for k = 1 to side_positions do
9676: LD_ADDR_VAR 0 2
9680: PUSH
9681: DOUBLE
9682: LD_INT 1
9684: DEC
9685: ST_TO_ADDR
9686: LD_EXP 37
9690: PUSH
9691: FOR_TO
9692: IFFALSE 9748
// if not defeated [ k ] then
9694: LD_LOC 18
9698: PUSH
9699: LD_VAR 0 2
9703: ARRAY
9704: NOT
9705: IFFALSE 9746
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9707: LD_OWVAR 7
9711: PPUSH
9712: LD_VAR 0 2
9716: PPUSH
9717: CALL_OW 81
9721: PUSH
9722: LD_INT 1
9724: PUSH
9725: EMPTY
9726: LIST
9727: IN
9728: IFFALSE 9746
// friends = friends ^ k ;
9730: LD_ADDR_VAR 0 3
9734: PUSH
9735: LD_VAR 0 3
9739: PUSH
9740: LD_VAR 0 2
9744: ADD
9745: ST_TO_ADDR
9746: GO 9691
9748: POP
9749: POP
// if not friends then
9750: LD_VAR 0 3
9754: NOT
9755: IFFALSE 9769
// begin SetPlayerSpectator ( ) ;
9757: CALL_OW 572
// unfoged = true ;
9761: LD_ADDR_LOC 20
9765: PUSH
9766: LD_INT 1
9768: ST_TO_ADDR
// end ; end ;
9769: LD_VAR 0 1
9773: RET
// export function MakeGameEnd ; begin
9774: LD_INT 0
9776: PPUSH
// SetPlayerSpectator ( ) ;
9777: CALL_OW 572
// unfoged = true ;
9781: LD_ADDR_LOC 20
9785: PUSH
9786: LD_INT 1
9788: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9789: LD_INT 175
9791: PPUSH
9792: CALL_OW 67
// GameEnded = true ;
9796: LD_ADDR_LOC 19
9800: PUSH
9801: LD_INT 1
9803: ST_TO_ADDR
// end ;
9804: LD_VAR 0 1
9808: RET
// export function GetGameEnded ; begin
9809: LD_INT 0
9811: PPUSH
// result = GameEnded ;
9812: LD_ADDR_VAR 0 1
9816: PUSH
9817: LD_LOC 19
9821: ST_TO_ADDR
// end ; end_of_file
9822: LD_VAR 0 1
9826: RET
// var win ; export function init_kings_counting ; var i ; begin
9827: LD_INT 0
9829: PPUSH
9830: PPUSH
// mp_with_score := true ;
9831: LD_ADDR_OWVAR 14
9835: PUSH
9836: LD_INT 1
9838: ST_TO_ADDR
// ResetMultiScore ;
9839: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
9843: LD_EXP 45
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: CALL_OW 424
// enable ( 2 ) ;
9855: LD_INT 2
9857: ENABLE_MARKED
// end ;
9858: LD_VAR 0 1
9862: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
9863: LD_INT 0
9865: PPUSH
9866: PPUSH
9867: PPUSH
9868: PPUSH
9869: PPUSH
9870: PPUSH
9871: PPUSH
9872: PPUSH
9873: PPUSH
// vypis := [ ] ;
9874: LD_ADDR_VAR 0 3
9878: PUSH
9879: EMPTY
9880: ST_TO_ADDR
// red = 0 ;
9881: LD_ADDR_VAR 0 5
9885: PUSH
9886: LD_INT 0
9888: ST_TO_ADDR
// blue = 0 ;
9889: LD_ADDR_VAR 0 6
9893: PUSH
9894: LD_INT 0
9896: ST_TO_ADDR
// yel = 0 ;
9897: LD_ADDR_VAR 0 7
9901: PUSH
9902: LD_INT 0
9904: ST_TO_ADDR
// green = 0 ;
9905: LD_ADDR_VAR 0 8
9909: PUSH
9910: LD_INT 0
9912: ST_TO_ADDR
// if def_public_score or isSGUI then
9913: LD_EXP 14
9917: PUSH
9918: LD_OWVAR 83
9922: OR
9923: IFFALSE 10520
// if not Team_Game then
9925: LD_EXP 39
9929: NOT
9930: IFFALSE 10052
// begin for side = 1 to Side_Positions do
9932: LD_ADDR_VAR 0 2
9936: PUSH
9937: DOUBLE
9938: LD_INT 1
9940: DEC
9941: ST_TO_ADDR
9942: LD_EXP 37
9946: PUSH
9947: FOR_TO
9948: IFFALSE 10048
// if Side_Positions [ side ] then
9950: LD_EXP 37
9954: PUSH
9955: LD_VAR 0 2
9959: ARRAY
9960: IFFALSE 10046
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
9962: LD_ADDR_VAR 0 3
9966: PUSH
9967: LD_VAR 0 3
9971: PUSH
9972: LD_STRING #KingoftheHill-Public
9974: PUSH
9975: LD_VAR 0 2
9979: PUSH
9980: LD_VAR 0 2
9984: PUSH
9985: LD_VAR 0 2
9989: PUSH
9990: LD_INT 10
9992: PLUS
9993: PPUSH
9994: CALL_OW 110
9998: PUSH
9999: LD_INT 3
10001: DIV
10002: PUSH
10003: LD_EXP 46
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: ADD
10015: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
10016: LD_INT 2
10018: PPUSH
10019: LD_VAR 0 2
10023: PPUSH
10024: LD_VAR 0 2
10028: PUSH
10029: LD_INT 10
10031: PLUS
10032: PPUSH
10033: CALL_OW 110
10037: PUSH
10038: LD_INT 3
10040: DIV
10041: PPUSH
10042: CALL 17424 0 3
// end ;
10046: GO 9947
10048: POP
10049: POP
// end else
10050: GO 10518
// begin if Teams [ 1 ] then
10052: LD_EXP 35
10056: PUSH
10057: LD_INT 1
10059: ARRAY
10060: IFFALSE 10112
// for i in Teams [ 1 ] do
10062: LD_ADDR_VAR 0 4
10066: PUSH
10067: LD_EXP 35
10071: PUSH
10072: LD_INT 1
10074: ARRAY
10075: PUSH
10076: FOR_IN
10077: IFFALSE 10110
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
10079: LD_ADDR_VAR 0 5
10083: PUSH
10084: LD_VAR 0 5
10088: PUSH
10089: LD_VAR 0 4
10093: PUSH
10094: LD_INT 10
10096: PLUS
10097: PPUSH
10098: CALL_OW 110
10102: PUSH
10103: LD_INT 3
10105: DIV
10106: PLUS
10107: ST_TO_ADDR
10108: GO 10076
10110: POP
10111: POP
// if Teams [ 2 ] then
10112: LD_EXP 35
10116: PUSH
10117: LD_INT 2
10119: ARRAY
10120: IFFALSE 10172
// for i in Teams [ 2 ] do
10122: LD_ADDR_VAR 0 4
10126: PUSH
10127: LD_EXP 35
10131: PUSH
10132: LD_INT 2
10134: ARRAY
10135: PUSH
10136: FOR_IN
10137: IFFALSE 10170
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
10139: LD_ADDR_VAR 0 6
10143: PUSH
10144: LD_VAR 0 6
10148: PUSH
10149: LD_VAR 0 4
10153: PUSH
10154: LD_INT 10
10156: PLUS
10157: PPUSH
10158: CALL_OW 110
10162: PUSH
10163: LD_INT 3
10165: DIV
10166: PLUS
10167: ST_TO_ADDR
10168: GO 10136
10170: POP
10171: POP
// if Teams [ 3 ] then
10172: LD_EXP 35
10176: PUSH
10177: LD_INT 3
10179: ARRAY
10180: IFFALSE 10232
// for i in Teams [ 3 ] do
10182: LD_ADDR_VAR 0 4
10186: PUSH
10187: LD_EXP 35
10191: PUSH
10192: LD_INT 3
10194: ARRAY
10195: PUSH
10196: FOR_IN
10197: IFFALSE 10230
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
10199: LD_ADDR_VAR 0 7
10203: PUSH
10204: LD_VAR 0 7
10208: PUSH
10209: LD_VAR 0 4
10213: PUSH
10214: LD_INT 10
10216: PLUS
10217: PPUSH
10218: CALL_OW 110
10222: PUSH
10223: LD_INT 3
10225: DIV
10226: PLUS
10227: ST_TO_ADDR
10228: GO 10196
10230: POP
10231: POP
// if Teams [ 4 ] then
10232: LD_EXP 35
10236: PUSH
10237: LD_INT 4
10239: ARRAY
10240: IFFALSE 10292
// for i in Teams [ 4 ] do
10242: LD_ADDR_VAR 0 4
10246: PUSH
10247: LD_EXP 35
10251: PUSH
10252: LD_INT 4
10254: ARRAY
10255: PUSH
10256: FOR_IN
10257: IFFALSE 10290
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
10259: LD_ADDR_VAR 0 8
10263: PUSH
10264: LD_VAR 0 8
10268: PUSH
10269: LD_VAR 0 4
10273: PUSH
10274: LD_INT 10
10276: PLUS
10277: PPUSH
10278: CALL_OW 110
10282: PUSH
10283: LD_INT 3
10285: DIV
10286: PLUS
10287: ST_TO_ADDR
10288: GO 10256
10290: POP
10291: POP
// if Teams [ 1 ] then
10292: LD_EXP 35
10296: PUSH
10297: LD_INT 1
10299: ARRAY
10300: IFFALSE 10329
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
10302: LD_ADDR_VAR 0 3
10306: PUSH
10307: LD_STRING #KingoftheHill-Public-red
10309: PUSH
10310: LD_INT 3
10312: PUSH
10313: LD_VAR 0 5
10317: PUSH
10318: LD_EXP 46
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: ST_TO_ADDR
// if Teams [ 2 ] then
10329: LD_EXP 35
10333: PUSH
10334: LD_INT 2
10336: ARRAY
10337: IFFALSE 10372
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
10339: LD_ADDR_VAR 0 3
10343: PUSH
10344: LD_VAR 0 3
10348: PUSH
10349: LD_STRING #KingoftheHill-Public-blue
10351: PUSH
10352: LD_INT 1
10354: PUSH
10355: LD_VAR 0 6
10359: PUSH
10360: LD_EXP 46
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: ADD
10371: ST_TO_ADDR
// if Teams [ 3 ] then
10372: LD_EXP 35
10376: PUSH
10377: LD_INT 3
10379: ARRAY
10380: IFFALSE 10415
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
10382: LD_ADDR_VAR 0 3
10386: PUSH
10387: LD_VAR 0 3
10391: PUSH
10392: LD_STRING #KingoftheHill-Public-yell
10394: PUSH
10395: LD_INT 2
10397: PUSH
10398: LD_VAR 0 7
10402: PUSH
10403: LD_EXP 46
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: ADD
10414: ST_TO_ADDR
// if Teams [ 4 ] then
10415: LD_EXP 35
10419: PUSH
10420: LD_INT 4
10422: ARRAY
10423: IFFALSE 10458
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
10425: LD_ADDR_VAR 0 3
10429: PUSH
10430: LD_VAR 0 3
10434: PUSH
10435: LD_STRING #KingoftheHill-Public-green
10437: PUSH
10438: LD_INT 7
10440: PUSH
10441: LD_VAR 0 8
10445: PUSH
10446: LD_EXP 46
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: ADD
10457: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
10458: LD_INT 2
10460: PPUSH
10461: LD_INT 3
10463: PPUSH
10464: LD_VAR 0 5
10468: PPUSH
10469: CALL 17424 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
10473: LD_INT 2
10475: PPUSH
10476: LD_INT 1
10478: PPUSH
10479: LD_VAR 0 6
10483: PPUSH
10484: CALL 17424 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
10488: LD_INT 2
10490: PPUSH
10491: LD_INT 2
10493: PPUSH
10494: LD_VAR 0 7
10498: PPUSH
10499: CALL 17424 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
10503: LD_INT 2
10505: PPUSH
10506: LD_INT 7
10508: PPUSH
10509: LD_VAR 0 8
10513: PPUSH
10514: CALL 17424 0 3
// end else
10518: GO 10955
// if not Team_Game then
10520: LD_EXP 39
10524: NOT
10525: IFFALSE 10583
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
10527: LD_ADDR_VAR 0 3
10531: PUSH
10532: LD_VAR 0 3
10536: PUSH
10537: LD_STRING #KingoftheHill-Private
10539: PUSH
10540: LD_OWVAR 7
10544: PUSH
10545: LD_OWVAR 7
10549: PUSH
10550: LD_VAR 0 2
10554: PUSH
10555: LD_INT 10
10557: PLUS
10558: PPUSH
10559: CALL_OW 110
10563: PUSH
10564: LD_INT 3
10566: DIV
10567: PUSH
10568: LD_EXP 46
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: ADD
10580: ST_TO_ADDR
10581: GO 10955
// begin for i in Teams [ 1 ] do
10583: LD_ADDR_VAR 0 4
10587: PUSH
10588: LD_EXP 35
10592: PUSH
10593: LD_INT 1
10595: ARRAY
10596: PUSH
10597: FOR_IN
10598: IFFALSE 10631
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
10600: LD_ADDR_VAR 0 5
10604: PUSH
10605: LD_VAR 0 5
10609: PUSH
10610: LD_VAR 0 4
10614: PUSH
10615: LD_INT 10
10617: PLUS
10618: PPUSH
10619: CALL_OW 110
10623: PUSH
10624: LD_INT 3
10626: DIV
10627: PLUS
10628: ST_TO_ADDR
10629: GO 10597
10631: POP
10632: POP
// for i in Teams [ 2 ] do
10633: LD_ADDR_VAR 0 4
10637: PUSH
10638: LD_EXP 35
10642: PUSH
10643: LD_INT 2
10645: ARRAY
10646: PUSH
10647: FOR_IN
10648: IFFALSE 10681
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
10650: LD_ADDR_VAR 0 6
10654: PUSH
10655: LD_VAR 0 6
10659: PUSH
10660: LD_VAR 0 4
10664: PUSH
10665: LD_INT 10
10667: PLUS
10668: PPUSH
10669: CALL_OW 110
10673: PUSH
10674: LD_INT 3
10676: DIV
10677: PLUS
10678: ST_TO_ADDR
10679: GO 10647
10681: POP
10682: POP
// for i in Teams [ 3 ] do
10683: LD_ADDR_VAR 0 4
10687: PUSH
10688: LD_EXP 35
10692: PUSH
10693: LD_INT 3
10695: ARRAY
10696: PUSH
10697: FOR_IN
10698: IFFALSE 10731
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
10700: LD_ADDR_VAR 0 7
10704: PUSH
10705: LD_VAR 0 7
10709: PUSH
10710: LD_VAR 0 4
10714: PUSH
10715: LD_INT 10
10717: PLUS
10718: PPUSH
10719: CALL_OW 110
10723: PUSH
10724: LD_INT 3
10726: DIV
10727: PLUS
10728: ST_TO_ADDR
10729: GO 10697
10731: POP
10732: POP
// for i in Teams [ 4 ] do
10733: LD_ADDR_VAR 0 4
10737: PUSH
10738: LD_EXP 35
10742: PUSH
10743: LD_INT 4
10745: ARRAY
10746: PUSH
10747: FOR_IN
10748: IFFALSE 10781
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
10750: LD_ADDR_VAR 0 8
10754: PUSH
10755: LD_VAR 0 8
10759: PUSH
10760: LD_VAR 0 4
10764: PUSH
10765: LD_INT 10
10767: PLUS
10768: PPUSH
10769: CALL_OW 110
10773: PUSH
10774: LD_INT 3
10776: DIV
10777: PLUS
10778: ST_TO_ADDR
10779: GO 10747
10781: POP
10782: POP
// if mp_player_side in Teams [ 1 ] then
10783: LD_OWVAR 7
10787: PUSH
10788: LD_EXP 35
10792: PUSH
10793: LD_INT 1
10795: ARRAY
10796: IN
10797: IFFALSE 10826
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
10799: LD_ADDR_VAR 0 3
10803: PUSH
10804: LD_STRING #KingoftheHill-Public-red
10806: PUSH
10807: LD_INT 3
10809: PUSH
10810: LD_VAR 0 5
10814: PUSH
10815: LD_EXP 46
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
10826: LD_OWVAR 7
10830: PUSH
10831: LD_EXP 35
10835: PUSH
10836: LD_INT 2
10838: ARRAY
10839: IN
10840: IFFALSE 10869
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_STRING #KingoftheHill-Public-blue
10849: PUSH
10850: LD_INT 1
10852: PUSH
10853: LD_VAR 0 6
10857: PUSH
10858: LD_EXP 46
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
10869: LD_OWVAR 7
10873: PUSH
10874: LD_EXP 35
10878: PUSH
10879: LD_INT 3
10881: ARRAY
10882: IN
10883: IFFALSE 10912
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
10885: LD_ADDR_VAR 0 3
10889: PUSH
10890: LD_STRING #KingoftheHill-Public-yell
10892: PUSH
10893: LD_INT 2
10895: PUSH
10896: LD_VAR 0 7
10900: PUSH
10901: LD_EXP 46
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
10912: LD_OWVAR 7
10916: PUSH
10917: LD_EXP 35
10921: PUSH
10922: LD_INT 4
10924: ARRAY
10925: IN
10926: IFFALSE 10955
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
10928: LD_ADDR_VAR 0 3
10932: PUSH
10933: LD_STRING #KingoftheHill-Public-green
10935: PUSH
10936: LD_INT 7
10938: PUSH
10939: LD_VAR 0 8
10943: PUSH
10944: LD_EXP 46
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: ST_TO_ADDR
// end ; Display_kings := vypis ;
10955: LD_ADDR_EXP 60
10959: PUSH
10960: LD_VAR 0 3
10964: ST_TO_ADDR
// end ;
10965: LD_VAR 0 1
10969: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
10970: LD_INT 0
10972: PPUSH
10973: PPUSH
10974: PPUSH
10975: PPUSH
10976: PPUSH
10977: PPUSH
10978: PPUSH
10979: PPUSH
10980: PPUSH
// side := [ ] ;
10981: LD_ADDR_VAR 0 2
10985: PUSH
10986: EMPTY
10987: ST_TO_ADDR
// red = 0 ;
10988: LD_ADDR_VAR 0 5
10992: PUSH
10993: LD_INT 0
10995: ST_TO_ADDR
// blue = 0 ;
10996: LD_ADDR_VAR 0 6
11000: PUSH
11001: LD_INT 0
11003: ST_TO_ADDR
// yel = 0 ;
11004: LD_ADDR_VAR 0 7
11008: PUSH
11009: LD_INT 0
11011: ST_TO_ADDR
// green = 0 ;
11012: LD_ADDR_VAR 0 8
11016: PUSH
11017: LD_INT 0
11019: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
11020: LD_ADDR_VAR 0 3
11024: PUSH
11025: LD_EXP 45
11029: PPUSH
11030: LD_INT 21
11032: PUSH
11033: LD_INT 3
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 53
11042: PUSH
11043: EMPTY
11044: LIST
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PPUSH
11050: CALL_OW 70
11054: ST_TO_ADDR
// for un in list do
11055: LD_ADDR_VAR 0 4
11059: PUSH
11060: LD_VAR 0 3
11064: PUSH
11065: FOR_IN
11066: IFFALSE 11091
// side := side union GetSide ( un ) ;
11068: LD_ADDR_VAR 0 2
11072: PUSH
11073: LD_VAR 0 2
11077: PUSH
11078: LD_VAR 0 4
11082: PPUSH
11083: CALL_OW 255
11087: UNION
11088: ST_TO_ADDR
11089: GO 11065
11091: POP
11092: POP
// if side <> 1 then
11093: LD_VAR 0 2
11097: PUSH
11098: LD_INT 1
11100: NONEQUAL
11101: IFFALSE 11105
// exit ;
11103: GO 11468
// side := side [ 1 ] ;
11105: LD_ADDR_VAR 0 2
11109: PUSH
11110: LD_VAR 0 2
11114: PUSH
11115: LD_INT 1
11117: ARRAY
11118: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
11119: LD_VAR 0 2
11123: PUSH
11124: LD_INT 10
11126: PLUS
11127: PPUSH
11128: LD_VAR 0 2
11132: PUSH
11133: LD_INT 10
11135: PLUS
11136: PPUSH
11137: CALL_OW 110
11141: PUSH
11142: LD_INT 1
11144: PLUS
11145: PPUSH
11146: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
11150: LD_VAR 0 2
11154: PPUSH
11155: LD_VAR 0 2
11159: PUSH
11160: LD_INT 10
11162: PLUS
11163: PPUSH
11164: CALL_OW 110
11168: PUSH
11169: LD_INT 3
11171: DIV
11172: PPUSH
11173: LD_INT 2
11175: PPUSH
11176: CALL 8116 0 3
// if not Team_Game then
11180: LD_EXP 39
11184: NOT
11185: IFFALSE 11468
// if GetTag ( side + 10 ) >= final_count * 3 then
11187: LD_VAR 0 2
11191: PUSH
11192: LD_INT 10
11194: PLUS
11195: PPUSH
11196: CALL_OW 110
11200: PUSH
11201: LD_EXP 46
11205: PUSH
11206: LD_INT 3
11208: MUL
11209: GREATEREQUAL
11210: IFFALSE 11217
// enable ( 3 ) else
11212: LD_INT 3
11214: ENABLE_MARKED
11215: GO 11468
// begin for i in Teams [ 1 ] do
11217: LD_ADDR_VAR 0 9
11221: PUSH
11222: LD_EXP 35
11226: PUSH
11227: LD_INT 1
11229: ARRAY
11230: PUSH
11231: FOR_IN
11232: IFFALSE 11265
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
11234: LD_ADDR_VAR 0 5
11238: PUSH
11239: LD_VAR 0 5
11243: PUSH
11244: LD_VAR 0 9
11248: PUSH
11249: LD_INT 10
11251: PLUS
11252: PPUSH
11253: CALL_OW 110
11257: PUSH
11258: LD_INT 3
11260: DIV
11261: PLUS
11262: ST_TO_ADDR
11263: GO 11231
11265: POP
11266: POP
// for i in Teams [ 2 ] do
11267: LD_ADDR_VAR 0 9
11271: PUSH
11272: LD_EXP 35
11276: PUSH
11277: LD_INT 2
11279: ARRAY
11280: PUSH
11281: FOR_IN
11282: IFFALSE 11315
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
11284: LD_ADDR_VAR 0 6
11288: PUSH
11289: LD_VAR 0 6
11293: PUSH
11294: LD_VAR 0 9
11298: PUSH
11299: LD_INT 10
11301: PLUS
11302: PPUSH
11303: CALL_OW 110
11307: PUSH
11308: LD_INT 3
11310: DIV
11311: PLUS
11312: ST_TO_ADDR
11313: GO 11281
11315: POP
11316: POP
// for i in Teams [ 3 ] do
11317: LD_ADDR_VAR 0 9
11321: PUSH
11322: LD_EXP 35
11326: PUSH
11327: LD_INT 3
11329: ARRAY
11330: PUSH
11331: FOR_IN
11332: IFFALSE 11365
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
11334: LD_ADDR_VAR 0 7
11338: PUSH
11339: LD_VAR 0 7
11343: PUSH
11344: LD_VAR 0 9
11348: PUSH
11349: LD_INT 10
11351: PLUS
11352: PPUSH
11353: CALL_OW 110
11357: PUSH
11358: LD_INT 3
11360: DIV
11361: PLUS
11362: ST_TO_ADDR
11363: GO 11331
11365: POP
11366: POP
// for i in Teams [ 4 ] do
11367: LD_ADDR_VAR 0 9
11371: PUSH
11372: LD_EXP 35
11376: PUSH
11377: LD_INT 4
11379: ARRAY
11380: PUSH
11381: FOR_IN
11382: IFFALSE 11415
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
11384: LD_ADDR_VAR 0 8
11388: PUSH
11389: LD_VAR 0 8
11393: PUSH
11394: LD_VAR 0 9
11398: PUSH
11399: LD_INT 10
11401: PLUS
11402: PPUSH
11403: CALL_OW 110
11407: PUSH
11408: LD_INT 3
11410: DIV
11411: PLUS
11412: ST_TO_ADDR
11413: GO 11381
11415: POP
11416: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
11417: LD_VAR 0 5
11421: PUSH
11422: LD_EXP 46
11426: GREATEREQUAL
11427: PUSH
11428: LD_VAR 0 6
11432: PUSH
11433: LD_EXP 46
11437: GREATEREQUAL
11438: OR
11439: PUSH
11440: LD_VAR 0 7
11444: PUSH
11445: LD_EXP 46
11449: GREATEREQUAL
11450: OR
11451: PUSH
11452: LD_VAR 0 8
11456: PUSH
11457: LD_EXP 46
11461: GREATEREQUAL
11462: OR
11463: IFFALSE 11468
// enable ( 3 ) ;
11465: LD_INT 3
11467: ENABLE_MARKED
// end ; end ;
11468: LD_VAR 0 1
11472: RET
// every 0 0$1 marked 2 do
11473: GO 11475
11475: DISABLE
// begin count_king ;
11476: CALL 10970 0 0
// show_public_points ;
11480: CALL 9863 0 0
// enable ;
11484: ENABLE
// end ;
11485: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
11486: GO 11488
11488: DISABLE
11489: LD_INT 0
11491: PPUSH
11492: PPUSH
11493: PPUSH
11494: PPUSH
11495: PPUSH
11496: PPUSH
// begin win := [ ] ;
11497: LD_ADDR_LOC 22
11501: PUSH
11502: EMPTY
11503: ST_TO_ADDR
// red = 0 ;
11504: LD_ADDR_VAR 0 2
11508: PUSH
11509: LD_INT 0
11511: ST_TO_ADDR
// blue = 0 ;
11512: LD_ADDR_VAR 0 3
11516: PUSH
11517: LD_INT 0
11519: ST_TO_ADDR
// yel = 0 ;
11520: LD_ADDR_VAR 0 4
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
// green = 0 ;
11528: LD_ADDR_VAR 0 5
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// if not Team_Game then
11536: LD_EXP 39
11540: NOT
11541: IFFALSE 11618
// begin for side = 1 to 8 do
11543: LD_ADDR_VAR 0 1
11547: PUSH
11548: DOUBLE
11549: LD_INT 1
11551: DEC
11552: ST_TO_ADDR
11553: LD_INT 8
11555: PUSH
11556: FOR_TO
11557: IFFALSE 11602
// if GetTag ( side + 10 ) >= final_count * 3 then
11559: LD_VAR 0 1
11563: PUSH
11564: LD_INT 10
11566: PLUS
11567: PPUSH
11568: CALL_OW 110
11572: PUSH
11573: LD_EXP 46
11577: PUSH
11578: LD_INT 3
11580: MUL
11581: GREATEREQUAL
11582: IFFALSE 11600
// win := win ^ side ;
11584: LD_ADDR_LOC 22
11588: PUSH
11589: LD_LOC 22
11593: PUSH
11594: LD_VAR 0 1
11598: ADD
11599: ST_TO_ADDR
11600: GO 11556
11602: POP
11603: POP
// if win then
11604: LD_LOC 22
11608: IFFALSE 11615
// enable ( 4 ) else
11610: LD_INT 4
11612: ENABLE_MARKED
11613: GO 11616
// enable ;
11615: ENABLE
// end else
11616: GO 11934
// begin for i in Teams [ 1 ] do
11618: LD_ADDR_VAR 0 6
11622: PUSH
11623: LD_EXP 35
11627: PUSH
11628: LD_INT 1
11630: ARRAY
11631: PUSH
11632: FOR_IN
11633: IFFALSE 11666
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
11635: LD_ADDR_VAR 0 2
11639: PUSH
11640: LD_VAR 0 2
11644: PUSH
11645: LD_VAR 0 6
11649: PUSH
11650: LD_INT 10
11652: PLUS
11653: PPUSH
11654: CALL_OW 110
11658: PUSH
11659: LD_INT 3
11661: DIV
11662: PLUS
11663: ST_TO_ADDR
11664: GO 11632
11666: POP
11667: POP
// for i in Teams [ 2 ] do
11668: LD_ADDR_VAR 0 6
11672: PUSH
11673: LD_EXP 35
11677: PUSH
11678: LD_INT 2
11680: ARRAY
11681: PUSH
11682: FOR_IN
11683: IFFALSE 11716
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
11685: LD_ADDR_VAR 0 3
11689: PUSH
11690: LD_VAR 0 3
11694: PUSH
11695: LD_VAR 0 6
11699: PUSH
11700: LD_INT 10
11702: PLUS
11703: PPUSH
11704: CALL_OW 110
11708: PUSH
11709: LD_INT 3
11711: DIV
11712: PLUS
11713: ST_TO_ADDR
11714: GO 11682
11716: POP
11717: POP
// for i in Teams [ 3 ] do
11718: LD_ADDR_VAR 0 6
11722: PUSH
11723: LD_EXP 35
11727: PUSH
11728: LD_INT 3
11730: ARRAY
11731: PUSH
11732: FOR_IN
11733: IFFALSE 11766
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
11735: LD_ADDR_VAR 0 4
11739: PUSH
11740: LD_VAR 0 4
11744: PUSH
11745: LD_VAR 0 6
11749: PUSH
11750: LD_INT 10
11752: PLUS
11753: PPUSH
11754: CALL_OW 110
11758: PUSH
11759: LD_INT 3
11761: DIV
11762: PLUS
11763: ST_TO_ADDR
11764: GO 11732
11766: POP
11767: POP
// for i in Teams [ 4 ] do
11768: LD_ADDR_VAR 0 6
11772: PUSH
11773: LD_EXP 35
11777: PUSH
11778: LD_INT 4
11780: ARRAY
11781: PUSH
11782: FOR_IN
11783: IFFALSE 11816
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
11785: LD_ADDR_VAR 0 5
11789: PUSH
11790: LD_VAR 0 5
11794: PUSH
11795: LD_VAR 0 6
11799: PUSH
11800: LD_INT 10
11802: PLUS
11803: PPUSH
11804: CALL_OW 110
11808: PUSH
11809: LD_INT 3
11811: DIV
11812: PLUS
11813: ST_TO_ADDR
11814: GO 11782
11816: POP
11817: POP
// if red >= final_count then
11818: LD_VAR 0 2
11822: PUSH
11823: LD_EXP 46
11827: GREATEREQUAL
11828: IFFALSE 11844
// win = teams [ 1 ] ;
11830: LD_ADDR_LOC 22
11834: PUSH
11835: LD_EXP 35
11839: PUSH
11840: LD_INT 1
11842: ARRAY
11843: ST_TO_ADDR
// if blue >= final_count then
11844: LD_VAR 0 3
11848: PUSH
11849: LD_EXP 46
11853: GREATEREQUAL
11854: IFFALSE 11870
// win = teams [ 2 ] ;
11856: LD_ADDR_LOC 22
11860: PUSH
11861: LD_EXP 35
11865: PUSH
11866: LD_INT 2
11868: ARRAY
11869: ST_TO_ADDR
// if yel >= final_count then
11870: LD_VAR 0 4
11874: PUSH
11875: LD_EXP 46
11879: GREATEREQUAL
11880: IFFALSE 11896
// win = teams [ 3 ] ;
11882: LD_ADDR_LOC 22
11886: PUSH
11887: LD_EXP 35
11891: PUSH
11892: LD_INT 3
11894: ARRAY
11895: ST_TO_ADDR
// if green >= final_count then
11896: LD_VAR 0 5
11900: PUSH
11901: LD_EXP 46
11905: GREATEREQUAL
11906: IFFALSE 11922
// win = teams [ 4 ] ;
11908: LD_ADDR_LOC 22
11912: PUSH
11913: LD_EXP 35
11917: PUSH
11918: LD_INT 4
11920: ARRAY
11921: ST_TO_ADDR
// if win then
11922: LD_LOC 22
11926: IFFALSE 11933
// enable ( 4 ) else
11928: LD_INT 4
11930: ENABLE_MARKED
11931: GO 11934
// enable ;
11933: ENABLE
// end ; end ;
11934: PPOPN 6
11936: END
// every 0 0$1 marked 4 do
11937: GO 11939
11939: DISABLE
// begin if Player_Side in win then
11940: LD_EXP 47
11944: PUSH
11945: LD_LOC 22
11949: IN
11950: IFFALSE 11966
// begin wait ( 0 0$2 ) ;
11952: LD_INT 70
11954: PPUSH
11955: CALL_OW 67
// enable ( 401 ) ;
11959: LD_INT 401
11961: ENABLE_MARKED
// exit ;
11962: GO 11982
// end else
11964: GO 11982
// begin wait ( 0 0$2 ) ;
11966: LD_INT 70
11968: PPUSH
11969: CALL_OW 67
// Multiplayer_Loose_Message ;
11973: CALL_OW 521
// enable ( 400 ) ;
11977: LD_INT 400
11979: ENABLE_MARKED
// exit ;
11980: GO 11982
// end ; end ; end_of_file
11982: END
// export function SetMpTechs ( ) ; var side , i ; begin
11983: LD_INT 0
11985: PPUSH
11986: PPUSH
11987: PPUSH
// for side = 1 to 8 do
11988: LD_ADDR_VAR 0 2
11992: PUSH
11993: DOUBLE
11994: LD_INT 1
11996: DEC
11997: ST_TO_ADDR
11998: LD_INT 8
12000: PUSH
12001: FOR_TO
12002: IFFALSE 12123
// begin for i = 1 to 72 do
12004: LD_ADDR_VAR 0 3
12008: PUSH
12009: DOUBLE
12010: LD_INT 1
12012: DEC
12013: ST_TO_ADDR
12014: LD_INT 72
12016: PUSH
12017: FOR_TO
12018: IFFALSE 12049
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12020: LD_VAR 0 3
12024: PPUSH
12025: LD_VAR 0 2
12029: PPUSH
12030: LD_INT 0
12032: PPUSH
12033: LD_VAR 0 3
12037: PPUSH
12038: CALL_OW 565
12042: PPUSH
12043: CALL_OW 322
12047: GO 12017
12049: POP
12050: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12051: LD_INT 73
12053: PPUSH
12054: LD_VAR 0 2
12058: PPUSH
12059: LD_INT 0
12061: PPUSH
12062: LD_INT 25
12064: PPUSH
12065: CALL_OW 565
12069: PPUSH
12070: CALL_OW 322
// for i = 0 to 40 do
12074: LD_ADDR_VAR 0 3
12078: PUSH
12079: DOUBLE
12080: LD_INT 0
12082: DEC
12083: ST_TO_ADDR
12084: LD_INT 40
12086: PUSH
12087: FOR_TO
12088: IFFALSE 12119
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12090: LD_VAR 0 3
12094: PPUSH
12095: LD_VAR 0 2
12099: PPUSH
12100: LD_INT 1
12102: PPUSH
12103: LD_VAR 0 3
12107: PPUSH
12108: CALL_OW 565
12112: PPUSH
12113: CALL_OW 324
12117: GO 12087
12119: POP
12120: POP
// end ;
12121: GO 12001
12123: POP
12124: POP
// end ;
12125: LD_VAR 0 1
12129: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12130: LD_INT 0
12132: PPUSH
12133: PPUSH
12134: PPUSH
// for side = 1 to 8 do
12135: LD_ADDR_VAR 0 3
12139: PUSH
12140: DOUBLE
12141: LD_INT 1
12143: DEC
12144: ST_TO_ADDR
12145: LD_INT 8
12147: PUSH
12148: FOR_TO
12149: IFFALSE 16145
// begin for i = 1 to 73 do
12151: LD_ADDR_VAR 0 4
12155: PUSH
12156: DOUBLE
12157: LD_INT 1
12159: DEC
12160: ST_TO_ADDR
12161: LD_INT 73
12163: PUSH
12164: FOR_TO
12165: IFFALSE 12186
// SetTech ( i , side , state_disabled ) ;
12167: LD_VAR 0 4
12171: PPUSH
12172: LD_VAR 0 3
12176: PPUSH
12177: LD_INT 0
12179: PPUSH
12180: CALL_OW 322
12184: GO 12164
12186: POP
12187: POP
// for i = 0 to 40 do
12188: LD_ADDR_VAR 0 4
12192: PUSH
12193: DOUBLE
12194: LD_INT 0
12196: DEC
12197: ST_TO_ADDR
12198: LD_INT 40
12200: PUSH
12201: FOR_TO
12202: IFFALSE 12223
// SetRestrict ( i , side , false ) ;
12204: LD_VAR 0 4
12208: PPUSH
12209: LD_VAR 0 3
12213: PPUSH
12214: LD_INT 0
12216: PPUSH
12217: CALL_OW 324
12221: GO 12201
12223: POP
12224: POP
// case level of 1 :
12225: LD_VAR 0 1
12229: PUSH
12230: LD_INT 1
12232: DOUBLE
12233: EQUAL
12234: IFTRUE 12238
12236: GO 12391
12238: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12239: LD_INT 35
12241: PPUSH
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12254: LD_INT 45
12256: PPUSH
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12269: LD_INT 46
12271: PPUSH
12272: LD_VAR 0 3
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12284: LD_INT 47
12286: PPUSH
12287: LD_VAR 0 3
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12299: LD_INT 0
12301: PPUSH
12302: LD_VAR 0 3
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12314: LD_INT 2
12316: PPUSH
12317: LD_VAR 0 3
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12329: LD_INT 4
12331: PPUSH
12332: LD_VAR 0 3
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12344: LD_INT 6
12346: PPUSH
12347: LD_VAR 0 3
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12359: LD_INT 29
12361: PPUSH
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 1
12369: PPUSH
12370: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12374: LD_INT 31
12376: PPUSH
12377: LD_VAR 0 3
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: CALL_OW 324
// end ; 2 :
12389: GO 16143
12391: LD_INT 2
12393: DOUBLE
12394: EQUAL
12395: IFTRUE 12399
12397: GO 12597
12399: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12400: LD_INT 35
12402: PPUSH
12403: LD_VAR 0 3
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12415: LD_INT 45
12417: PPUSH
12418: LD_VAR 0 3
12422: PPUSH
12423: LD_INT 1
12425: PPUSH
12426: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12430: LD_INT 46
12432: PPUSH
12433: LD_VAR 0 3
12437: PPUSH
12438: LD_INT 1
12440: PPUSH
12441: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12445: LD_INT 47
12447: PPUSH
12448: LD_VAR 0 3
12452: PPUSH
12453: LD_INT 1
12455: PPUSH
12456: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12460: LD_INT 1
12462: PPUSH
12463: LD_VAR 0 3
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12475: LD_INT 2
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: LD_INT 1
12485: PPUSH
12486: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12490: LD_INT 11
12492: PPUSH
12493: LD_VAR 0 3
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12505: LD_INT 0
12507: PPUSH
12508: LD_VAR 0 3
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12520: LD_INT 2
12522: PPUSH
12523: LD_VAR 0 3
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12535: LD_INT 4
12537: PPUSH
12538: LD_VAR 0 3
12542: PPUSH
12543: LD_INT 1
12545: PPUSH
12546: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12550: LD_INT 6
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: LD_INT 1
12560: PPUSH
12561: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12565: LD_INT 29
12567: PPUSH
12568: LD_VAR 0 3
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12580: LD_INT 31
12582: PPUSH
12583: LD_VAR 0 3
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: CALL_OW 324
// end ; 3 :
12595: GO 16143
12597: LD_INT 3
12599: DOUBLE
12600: EQUAL
12601: IFTRUE 12605
12603: GO 13058
12605: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12606: LD_INT 35
12608: PPUSH
12609: LD_VAR 0 3
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12621: LD_INT 45
12623: PPUSH
12624: LD_VAR 0 3
12628: PPUSH
12629: LD_INT 1
12631: PPUSH
12632: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12636: LD_INT 46
12638: PPUSH
12639: LD_VAR 0 3
12643: PPUSH
12644: LD_INT 1
12646: PPUSH
12647: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12651: LD_INT 47
12653: PPUSH
12654: LD_VAR 0 3
12658: PPUSH
12659: LD_INT 1
12661: PPUSH
12662: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12666: LD_INT 1
12668: PPUSH
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_INT 1
12676: PPUSH
12677: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12681: LD_INT 2
12683: PPUSH
12684: LD_VAR 0 3
12688: PPUSH
12689: LD_INT 1
12691: PPUSH
12692: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12696: LD_INT 11
12698: PPUSH
12699: LD_VAR 0 3
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12711: LD_INT 48
12713: PPUSH
12714: LD_VAR 0 3
12718: PPUSH
12719: LD_INT 1
12721: PPUSH
12722: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12726: LD_INT 69
12728: PPUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: LD_INT 1
12736: PPUSH
12737: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12741: LD_INT 39
12743: PPUSH
12744: LD_VAR 0 3
12748: PPUSH
12749: LD_INT 1
12751: PPUSH
12752: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12756: LD_INT 43
12758: PPUSH
12759: LD_VAR 0 3
12763: PPUSH
12764: LD_INT 1
12766: PPUSH
12767: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12771: LD_INT 51
12773: PPUSH
12774: LD_VAR 0 3
12778: PPUSH
12779: LD_INT 1
12781: PPUSH
12782: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12786: LD_INT 6
12788: PPUSH
12789: LD_VAR 0 3
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12801: LD_INT 0
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: LD_INT 1
12811: PPUSH
12812: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12816: LD_INT 2
12818: PPUSH
12819: LD_VAR 0 3
12823: PPUSH
12824: LD_INT 1
12826: PPUSH
12827: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12831: LD_INT 3
12833: PPUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12846: LD_INT 4
12848: PPUSH
12849: LD_VAR 0 3
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12861: LD_INT 6
12863: PPUSH
12864: LD_VAR 0 3
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12876: LD_INT 7
12878: PPUSH
12879: LD_VAR 0 3
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12891: LD_INT 8
12893: PPUSH
12894: LD_VAR 0 3
12898: PPUSH
12899: LD_INT 1
12901: PPUSH
12902: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12906: LD_INT 10
12908: PPUSH
12909: LD_VAR 0 3
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12921: LD_INT 15
12923: PPUSH
12924: LD_VAR 0 3
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12936: LD_INT 16
12938: PPUSH
12939: LD_VAR 0 3
12943: PPUSH
12944: LD_INT 1
12946: PPUSH
12947: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12951: LD_INT 17
12953: PPUSH
12954: LD_VAR 0 3
12958: PPUSH
12959: LD_INT 1
12961: PPUSH
12962: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12966: LD_INT 20
12968: PPUSH
12969: LD_VAR 0 3
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12981: LD_INT 26
12983: PPUSH
12984: LD_VAR 0 3
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12996: LD_INT 27
12998: PPUSH
12999: LD_VAR 0 3
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13011: LD_INT 29
13013: PPUSH
13014: LD_VAR 0 3
13018: PPUSH
13019: LD_INT 1
13021: PPUSH
13022: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13026: LD_INT 31
13028: PPUSH
13029: LD_VAR 0 3
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13041: LD_INT 32
13043: PPUSH
13044: LD_VAR 0 3
13048: PPUSH
13049: LD_INT 1
13051: PPUSH
13052: CALL_OW 324
// end ; 4 :
13056: GO 16143
13058: LD_INT 4
13060: DOUBLE
13061: EQUAL
13062: IFTRUE 13066
13064: GO 14014
13066: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13067: LD_INT 35
13069: PPUSH
13070: LD_VAR 0 3
13074: PPUSH
13075: LD_INT 1
13077: PPUSH
13078: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13082: LD_INT 45
13084: PPUSH
13085: LD_VAR 0 3
13089: PPUSH
13090: LD_INT 1
13092: PPUSH
13093: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13097: LD_INT 46
13099: PPUSH
13100: LD_VAR 0 3
13104: PPUSH
13105: LD_INT 1
13107: PPUSH
13108: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13112: LD_INT 47
13114: PPUSH
13115: LD_VAR 0 3
13119: PPUSH
13120: LD_INT 1
13122: PPUSH
13123: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13127: LD_INT 1
13129: PPUSH
13130: LD_VAR 0 3
13134: PPUSH
13135: LD_INT 1
13137: PPUSH
13138: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13142: LD_INT 2
13144: PPUSH
13145: LD_VAR 0 3
13149: PPUSH
13150: LD_INT 1
13152: PPUSH
13153: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13157: LD_INT 11
13159: PPUSH
13160: LD_VAR 0 3
13164: PPUSH
13165: LD_INT 1
13167: PPUSH
13168: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13172: LD_INT 20
13174: PPUSH
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 1
13182: PPUSH
13183: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13187: LD_INT 48
13189: PPUSH
13190: LD_VAR 0 3
13194: PPUSH
13195: LD_INT 1
13197: PPUSH
13198: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13202: LD_INT 49
13204: PPUSH
13205: LD_VAR 0 3
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13217: LD_INT 69
13219: PPUSH
13220: LD_VAR 0 3
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13232: LD_INT 39
13234: PPUSH
13235: LD_VAR 0 3
13239: PPUSH
13240: LD_INT 1
13242: PPUSH
13243: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13247: LD_INT 34
13249: PPUSH
13250: LD_VAR 0 3
13254: PPUSH
13255: LD_INT 1
13257: PPUSH
13258: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13262: LD_INT 42
13264: PPUSH
13265: LD_VAR 0 3
13269: PPUSH
13270: LD_INT 1
13272: PPUSH
13273: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13277: LD_INT 44
13279: PPUSH
13280: LD_VAR 0 3
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13292: LD_INT 41
13294: PPUSH
13295: LD_VAR 0 3
13299: PPUSH
13300: LD_INT 1
13302: PPUSH
13303: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13307: LD_INT 43
13309: PPUSH
13310: LD_VAR 0 3
13314: PPUSH
13315: LD_INT 1
13317: PPUSH
13318: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13322: LD_INT 70
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13337: LD_INT 51
13339: PPUSH
13340: LD_VAR 0 3
13344: PPUSH
13345: LD_INT 1
13347: PPUSH
13348: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13352: LD_INT 52
13354: PPUSH
13355: LD_VAR 0 3
13359: PPUSH
13360: LD_INT 1
13362: PPUSH
13363: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13367: LD_INT 6
13369: PPUSH
13370: LD_VAR 0 3
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13382: LD_INT 15
13384: PPUSH
13385: LD_VAR 0 3
13389: PPUSH
13390: LD_INT 1
13392: PPUSH
13393: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13397: LD_INT 7
13399: PPUSH
13400: LD_VAR 0 3
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13412: LD_INT 12
13414: PPUSH
13415: LD_VAR 0 3
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13427: LD_INT 18
13429: PPUSH
13430: LD_VAR 0 3
13434: PPUSH
13435: LD_INT 1
13437: PPUSH
13438: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13442: LD_INT 60
13444: PPUSH
13445: LD_VAR 0 3
13449: PPUSH
13450: LD_INT 1
13452: PPUSH
13453: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13457: LD_INT 9
13459: PPUSH
13460: LD_VAR 0 3
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13472: LD_INT 30
13474: PPUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: LD_INT 1
13482: PPUSH
13483: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13487: LD_INT 37
13489: PPUSH
13490: LD_VAR 0 3
13494: PPUSH
13495: LD_INT 1
13497: PPUSH
13498: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13502: LD_INT 5
13504: PPUSH
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 1
13512: PPUSH
13513: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13517: LD_INT 66
13519: PPUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: LD_INT 1
13527: PPUSH
13528: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13532: LD_INT 21
13534: PPUSH
13535: LD_VAR 0 3
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13547: LD_INT 22
13549: PPUSH
13550: LD_VAR 0 3
13554: PPUSH
13555: LD_INT 1
13557: PPUSH
13558: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13562: LD_INT 54
13564: PPUSH
13565: LD_VAR 0 3
13569: PPUSH
13570: LD_INT 1
13572: PPUSH
13573: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13577: LD_INT 0
13579: PPUSH
13580: LD_VAR 0 3
13584: PPUSH
13585: LD_INT 1
13587: PPUSH
13588: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13592: LD_INT 1
13594: PPUSH
13595: LD_VAR 0 3
13599: PPUSH
13600: LD_INT 1
13602: PPUSH
13603: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13607: LD_INT 2
13609: PPUSH
13610: LD_VAR 0 3
13614: PPUSH
13615: LD_INT 1
13617: PPUSH
13618: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13622: LD_INT 3
13624: PPUSH
13625: LD_VAR 0 3
13629: PPUSH
13630: LD_INT 1
13632: PPUSH
13633: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13637: LD_INT 4
13639: PPUSH
13640: LD_VAR 0 3
13644: PPUSH
13645: LD_INT 1
13647: PPUSH
13648: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13652: LD_INT 5
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: LD_INT 1
13662: PPUSH
13663: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13667: LD_INT 6
13669: PPUSH
13670: LD_VAR 0 3
13674: PPUSH
13675: LD_INT 1
13677: PPUSH
13678: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13682: LD_INT 7
13684: PPUSH
13685: LD_VAR 0 3
13689: PPUSH
13690: LD_INT 1
13692: PPUSH
13693: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13697: LD_INT 8
13699: PPUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13712: LD_INT 10
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 1
13722: PPUSH
13723: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13727: LD_INT 11
13729: PPUSH
13730: LD_VAR 0 3
13734: PPUSH
13735: LD_INT 1
13737: PPUSH
13738: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13742: LD_INT 12
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13757: LD_INT 13
13759: PPUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13772: LD_INT 14
13774: PPUSH
13775: LD_VAR 0 3
13779: PPUSH
13780: LD_INT 1
13782: PPUSH
13783: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13787: LD_INT 15
13789: PPUSH
13790: LD_VAR 0 3
13794: PPUSH
13795: LD_INT 1
13797: PPUSH
13798: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13802: LD_INT 16
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13817: LD_INT 17
13819: PPUSH
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_INT 1
13827: PPUSH
13828: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13832: LD_INT 19
13834: PPUSH
13835: LD_VAR 0 3
13839: PPUSH
13840: LD_INT 1
13842: PPUSH
13843: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13847: LD_INT 20
13849: PPUSH
13850: LD_VAR 0 3
13854: PPUSH
13855: LD_INT 1
13857: PPUSH
13858: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13862: LD_INT 21
13864: PPUSH
13865: LD_VAR 0 3
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13877: LD_INT 23
13879: PPUSH
13880: LD_VAR 0 3
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13892: LD_INT 26
13894: PPUSH
13895: LD_VAR 0 3
13899: PPUSH
13900: LD_INT 1
13902: PPUSH
13903: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13907: LD_INT 27
13909: PPUSH
13910: LD_VAR 0 3
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13922: LD_INT 28
13924: PPUSH
13925: LD_VAR 0 3
13929: PPUSH
13930: LD_INT 1
13932: PPUSH
13933: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13937: LD_INT 29
13939: PPUSH
13940: LD_VAR 0 3
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13952: LD_INT 30
13954: PPUSH
13955: LD_VAR 0 3
13959: PPUSH
13960: LD_INT 1
13962: PPUSH
13963: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13967: LD_INT 31
13969: PPUSH
13970: LD_VAR 0 3
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13982: LD_INT 32
13984: PPUSH
13985: LD_VAR 0 3
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13997: LD_INT 36
13999: PPUSH
14000: LD_VAR 0 3
14004: PPUSH
14005: LD_INT 1
14007: PPUSH
14008: CALL_OW 324
// end ; 5 :
14012: GO 16143
14014: LD_INT 5
14016: DOUBLE
14017: EQUAL
14018: IFTRUE 14022
14020: GO 15135
14022: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14023: LD_INT 35
14025: PPUSH
14026: LD_VAR 0 3
14030: PPUSH
14031: LD_INT 1
14033: PPUSH
14034: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14038: LD_INT 45
14040: PPUSH
14041: LD_VAR 0 3
14045: PPUSH
14046: LD_INT 1
14048: PPUSH
14049: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14053: LD_INT 46
14055: PPUSH
14056: LD_VAR 0 3
14060: PPUSH
14061: LD_INT 1
14063: PPUSH
14064: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14068: LD_INT 47
14070: PPUSH
14071: LD_VAR 0 3
14075: PPUSH
14076: LD_INT 1
14078: PPUSH
14079: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14083: LD_INT 1
14085: PPUSH
14086: LD_VAR 0 3
14090: PPUSH
14091: LD_INT 1
14093: PPUSH
14094: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14098: LD_INT 2
14100: PPUSH
14101: LD_VAR 0 3
14105: PPUSH
14106: LD_INT 1
14108: PPUSH
14109: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14113: LD_INT 11
14115: PPUSH
14116: LD_VAR 0 3
14120: PPUSH
14121: LD_INT 1
14123: PPUSH
14124: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14128: LD_INT 20
14130: PPUSH
14131: LD_VAR 0 3
14135: PPUSH
14136: LD_INT 1
14138: PPUSH
14139: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14143: LD_INT 48
14145: PPUSH
14146: LD_VAR 0 3
14150: PPUSH
14151: LD_INT 1
14153: PPUSH
14154: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14158: LD_INT 49
14160: PPUSH
14161: LD_VAR 0 3
14165: PPUSH
14166: LD_INT 1
14168: PPUSH
14169: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14173: LD_INT 69
14175: PPUSH
14176: LD_VAR 0 3
14180: PPUSH
14181: LD_INT 1
14183: PPUSH
14184: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14188: LD_INT 39
14190: PPUSH
14191: LD_VAR 0 3
14195: PPUSH
14196: LD_INT 1
14198: PPUSH
14199: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14203: LD_INT 34
14205: PPUSH
14206: LD_VAR 0 3
14210: PPUSH
14211: LD_INT 1
14213: PPUSH
14214: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14218: LD_INT 42
14220: PPUSH
14221: LD_VAR 0 3
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14233: LD_INT 44
14235: PPUSH
14236: LD_VAR 0 3
14240: PPUSH
14241: LD_INT 1
14243: PPUSH
14244: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14248: LD_INT 41
14250: PPUSH
14251: LD_VAR 0 3
14255: PPUSH
14256: LD_INT 1
14258: PPUSH
14259: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14263: LD_INT 40
14265: PPUSH
14266: LD_VAR 0 3
14270: PPUSH
14271: LD_INT 1
14273: PPUSH
14274: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14278: LD_INT 43
14280: PPUSH
14281: LD_VAR 0 3
14285: PPUSH
14286: LD_INT 1
14288: PPUSH
14289: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14293: LD_INT 70
14295: PPUSH
14296: LD_VAR 0 3
14300: PPUSH
14301: LD_INT 1
14303: PPUSH
14304: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14308: LD_INT 51
14310: PPUSH
14311: LD_VAR 0 3
14315: PPUSH
14316: LD_INT 1
14318: PPUSH
14319: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14323: LD_INT 52
14325: PPUSH
14326: LD_VAR 0 3
14330: PPUSH
14331: LD_INT 1
14333: PPUSH
14334: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14338: LD_INT 6
14340: PPUSH
14341: LD_VAR 0 3
14345: PPUSH
14346: LD_INT 1
14348: PPUSH
14349: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14353: LD_INT 15
14355: PPUSH
14356: LD_VAR 0 3
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14368: LD_INT 7
14370: PPUSH
14371: LD_VAR 0 3
14375: PPUSH
14376: LD_INT 1
14378: PPUSH
14379: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14383: LD_INT 12
14385: PPUSH
14386: LD_VAR 0 3
14390: PPUSH
14391: LD_INT 1
14393: PPUSH
14394: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14398: LD_INT 17
14400: PPUSH
14401: LD_VAR 0 3
14405: PPUSH
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14413: LD_INT 18
14415: PPUSH
14416: LD_VAR 0 3
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14428: LD_INT 60
14430: PPUSH
14431: LD_VAR 0 3
14435: PPUSH
14436: LD_INT 1
14438: PPUSH
14439: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14443: LD_INT 32
14445: PPUSH
14446: LD_VAR 0 3
14450: PPUSH
14451: LD_INT 1
14453: PPUSH
14454: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14458: LD_INT 9
14460: PPUSH
14461: LD_VAR 0 3
14465: PPUSH
14466: LD_INT 1
14468: PPUSH
14469: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14473: LD_INT 57
14475: PPUSH
14476: LD_VAR 0 3
14480: PPUSH
14481: LD_INT 1
14483: PPUSH
14484: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14488: LD_INT 30
14490: PPUSH
14491: LD_VAR 0 3
14495: PPUSH
14496: LD_INT 1
14498: PPUSH
14499: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14503: LD_INT 37
14505: PPUSH
14506: LD_VAR 0 3
14510: PPUSH
14511: LD_INT 1
14513: PPUSH
14514: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14518: LD_INT 63
14520: PPUSH
14521: LD_VAR 0 3
14525: PPUSH
14526: LD_INT 1
14528: PPUSH
14529: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14533: LD_INT 3
14535: PPUSH
14536: LD_VAR 0 3
14540: PPUSH
14541: LD_INT 1
14543: PPUSH
14544: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14548: LD_INT 4
14550: PPUSH
14551: LD_VAR 0 3
14555: PPUSH
14556: LD_INT 1
14558: PPUSH
14559: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14563: LD_INT 5
14565: PPUSH
14566: LD_VAR 0 3
14570: PPUSH
14571: LD_INT 1
14573: PPUSH
14574: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14578: LD_INT 66
14580: PPUSH
14581: LD_VAR 0 3
14585: PPUSH
14586: LD_INT 1
14588: PPUSH
14589: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14593: LD_INT 21
14595: PPUSH
14596: LD_VAR 0 3
14600: PPUSH
14601: LD_INT 1
14603: PPUSH
14604: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14608: LD_INT 22
14610: PPUSH
14611: LD_VAR 0 3
14615: PPUSH
14616: LD_INT 1
14618: PPUSH
14619: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14623: LD_INT 19
14625: PPUSH
14626: LD_VAR 0 3
14630: PPUSH
14631: LD_INT 1
14633: PPUSH
14634: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14638: LD_INT 54
14640: PPUSH
14641: LD_VAR 0 3
14645: PPUSH
14646: LD_INT 1
14648: PPUSH
14649: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14653: LD_INT 55
14655: PPUSH
14656: LD_VAR 0 3
14660: PPUSH
14661: LD_INT 1
14663: PPUSH
14664: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14668: LD_INT 0
14670: PPUSH
14671: LD_VAR 0 3
14675: PPUSH
14676: LD_INT 1
14678: PPUSH
14679: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14683: LD_INT 1
14685: PPUSH
14686: LD_VAR 0 3
14690: PPUSH
14691: LD_INT 1
14693: PPUSH
14694: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14698: LD_INT 2
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: LD_INT 1
14708: PPUSH
14709: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14713: LD_INT 3
14715: PPUSH
14716: LD_VAR 0 3
14720: PPUSH
14721: LD_INT 1
14723: PPUSH
14724: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14728: LD_INT 4
14730: PPUSH
14731: LD_VAR 0 3
14735: PPUSH
14736: LD_INT 1
14738: PPUSH
14739: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14743: LD_INT 5
14745: PPUSH
14746: LD_VAR 0 3
14750: PPUSH
14751: LD_INT 1
14753: PPUSH
14754: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14758: LD_INT 6
14760: PPUSH
14761: LD_VAR 0 3
14765: PPUSH
14766: LD_INT 1
14768: PPUSH
14769: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14773: LD_INT 7
14775: PPUSH
14776: LD_VAR 0 3
14780: PPUSH
14781: LD_INT 1
14783: PPUSH
14784: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14788: LD_INT 8
14790: PPUSH
14791: LD_VAR 0 3
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14803: LD_INT 10
14805: PPUSH
14806: LD_VAR 0 3
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14818: LD_INT 11
14820: PPUSH
14821: LD_VAR 0 3
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14833: LD_INT 12
14835: PPUSH
14836: LD_VAR 0 3
14840: PPUSH
14841: LD_INT 1
14843: PPUSH
14844: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14848: LD_INT 13
14850: PPUSH
14851: LD_VAR 0 3
14855: PPUSH
14856: LD_INT 1
14858: PPUSH
14859: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14863: LD_INT 14
14865: PPUSH
14866: LD_VAR 0 3
14870: PPUSH
14871: LD_INT 1
14873: PPUSH
14874: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14878: LD_INT 15
14880: PPUSH
14881: LD_VAR 0 3
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14893: LD_INT 16
14895: PPUSH
14896: LD_VAR 0 3
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14908: LD_INT 17
14910: PPUSH
14911: LD_VAR 0 3
14915: PPUSH
14916: LD_INT 1
14918: PPUSH
14919: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14923: LD_INT 18
14925: PPUSH
14926: LD_VAR 0 3
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14938: LD_INT 19
14940: PPUSH
14941: LD_VAR 0 3
14945: PPUSH
14946: LD_INT 1
14948: PPUSH
14949: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14953: LD_INT 20
14955: PPUSH
14956: LD_VAR 0 3
14960: PPUSH
14961: LD_INT 1
14963: PPUSH
14964: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14968: LD_INT 21
14970: PPUSH
14971: LD_VAR 0 3
14975: PPUSH
14976: LD_INT 1
14978: PPUSH
14979: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14983: LD_INT 23
14985: PPUSH
14986: LD_VAR 0 3
14990: PPUSH
14991: LD_INT 1
14993: PPUSH
14994: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14998: LD_INT 26
15000: PPUSH
15001: LD_VAR 0 3
15005: PPUSH
15006: LD_INT 1
15008: PPUSH
15009: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15013: LD_INT 27
15015: PPUSH
15016: LD_VAR 0 3
15020: PPUSH
15021: LD_INT 1
15023: PPUSH
15024: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15028: LD_INT 28
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: LD_INT 1
15038: PPUSH
15039: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15043: LD_INT 29
15045: PPUSH
15046: LD_VAR 0 3
15050: PPUSH
15051: LD_INT 1
15053: PPUSH
15054: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15058: LD_INT 30
15060: PPUSH
15061: LD_VAR 0 3
15065: PPUSH
15066: LD_INT 1
15068: PPUSH
15069: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15073: LD_INT 31
15075: PPUSH
15076: LD_VAR 0 3
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15088: LD_INT 32
15090: PPUSH
15091: LD_VAR 0 3
15095: PPUSH
15096: LD_INT 1
15098: PPUSH
15099: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15103: LD_INT 33
15105: PPUSH
15106: LD_VAR 0 3
15110: PPUSH
15111: LD_INT 1
15113: PPUSH
15114: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15118: LD_INT 36
15120: PPUSH
15121: LD_VAR 0 3
15125: PPUSH
15126: LD_INT 1
15128: PPUSH
15129: CALL_OW 324
// end ; 6 :
15133: GO 16143
15135: LD_INT 6
15137: DOUBLE
15138: EQUAL
15139: IFTRUE 15143
15141: GO 16068
15143: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15144: LD_INT 35
15146: PPUSH
15147: LD_VAR 0 3
15151: PPUSH
15152: LD_INT 1
15154: PPUSH
15155: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15159: LD_INT 45
15161: PPUSH
15162: LD_VAR 0 3
15166: PPUSH
15167: LD_INT 1
15169: PPUSH
15170: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15174: LD_INT 46
15176: PPUSH
15177: LD_VAR 0 3
15181: PPUSH
15182: LD_INT 1
15184: PPUSH
15185: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15189: LD_INT 47
15191: PPUSH
15192: LD_VAR 0 3
15196: PPUSH
15197: LD_INT 1
15199: PPUSH
15200: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15204: LD_INT 1
15206: PPUSH
15207: LD_VAR 0 3
15211: PPUSH
15212: LD_INT 1
15214: PPUSH
15215: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15219: LD_INT 2
15221: PPUSH
15222: LD_VAR 0 3
15226: PPUSH
15227: LD_INT 1
15229: PPUSH
15230: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15234: LD_INT 11
15236: PPUSH
15237: LD_VAR 0 3
15241: PPUSH
15242: LD_INT 1
15244: PPUSH
15245: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15249: LD_INT 20
15251: PPUSH
15252: LD_VAR 0 3
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15264: LD_INT 48
15266: PPUSH
15267: LD_VAR 0 3
15271: PPUSH
15272: LD_INT 1
15274: PPUSH
15275: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15279: LD_INT 49
15281: PPUSH
15282: LD_VAR 0 3
15286: PPUSH
15287: LD_INT 1
15289: PPUSH
15290: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15294: LD_INT 50
15296: PPUSH
15297: LD_VAR 0 3
15301: PPUSH
15302: LD_INT 1
15304: PPUSH
15305: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15309: LD_INT 69
15311: PPUSH
15312: LD_VAR 0 3
15316: PPUSH
15317: LD_INT 1
15319: PPUSH
15320: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15324: LD_INT 39
15326: PPUSH
15327: LD_VAR 0 3
15331: PPUSH
15332: LD_INT 1
15334: PPUSH
15335: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15339: LD_INT 34
15341: PPUSH
15342: LD_VAR 0 3
15346: PPUSH
15347: LD_INT 1
15349: PPUSH
15350: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15354: LD_INT 42
15356: PPUSH
15357: LD_VAR 0 3
15361: PPUSH
15362: LD_INT 1
15364: PPUSH
15365: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15369: LD_INT 44
15371: PPUSH
15372: LD_VAR 0 3
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15384: LD_INT 41
15386: PPUSH
15387: LD_VAR 0 3
15391: PPUSH
15392: LD_INT 1
15394: PPUSH
15395: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15399: LD_INT 13
15401: PPUSH
15402: LD_VAR 0 3
15406: PPUSH
15407: LD_INT 1
15409: PPUSH
15410: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15414: LD_INT 40
15416: PPUSH
15417: LD_VAR 0 3
15421: PPUSH
15422: LD_INT 1
15424: PPUSH
15425: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15429: LD_INT 43
15431: PPUSH
15432: LD_VAR 0 3
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15444: LD_INT 70
15446: PPUSH
15447: LD_VAR 0 3
15451: PPUSH
15452: LD_INT 1
15454: PPUSH
15455: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15459: LD_INT 23
15461: PPUSH
15462: LD_VAR 0 3
15466: PPUSH
15467: LD_INT 1
15469: PPUSH
15470: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15474: LD_INT 51
15476: PPUSH
15477: LD_VAR 0 3
15481: PPUSH
15482: LD_INT 1
15484: PPUSH
15485: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15489: LD_INT 52
15491: PPUSH
15492: LD_VAR 0 3
15496: PPUSH
15497: LD_INT 1
15499: PPUSH
15500: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15504: LD_INT 6
15506: PPUSH
15507: LD_VAR 0 3
15511: PPUSH
15512: LD_INT 1
15514: PPUSH
15515: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15519: LD_INT 15
15521: PPUSH
15522: LD_VAR 0 3
15526: PPUSH
15527: LD_INT 1
15529: PPUSH
15530: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15534: LD_INT 7
15536: PPUSH
15537: LD_VAR 0 3
15541: PPUSH
15542: LD_INT 1
15544: PPUSH
15545: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15549: LD_INT 12
15551: PPUSH
15552: LD_VAR 0 3
15556: PPUSH
15557: LD_INT 1
15559: PPUSH
15560: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15564: LD_INT 10
15566: PPUSH
15567: LD_VAR 0 3
15571: PPUSH
15572: LD_INT 1
15574: PPUSH
15575: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15579: LD_INT 17
15581: PPUSH
15582: LD_VAR 0 3
15586: PPUSH
15587: LD_INT 1
15589: PPUSH
15590: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15594: LD_INT 18
15596: PPUSH
15597: LD_VAR 0 3
15601: PPUSH
15602: LD_INT 1
15604: PPUSH
15605: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15609: LD_INT 60
15611: PPUSH
15612: LD_VAR 0 3
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15624: LD_INT 61
15626: PPUSH
15627: LD_VAR 0 3
15631: PPUSH
15632: LD_INT 1
15634: PPUSH
15635: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15639: LD_INT 32
15641: PPUSH
15642: LD_VAR 0 3
15646: PPUSH
15647: LD_INT 1
15649: PPUSH
15650: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15654: LD_INT 27
15656: PPUSH
15657: LD_VAR 0 3
15661: PPUSH
15662: LD_INT 1
15664: PPUSH
15665: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15669: LD_INT 36
15671: PPUSH
15672: LD_VAR 0 3
15676: PPUSH
15677: LD_INT 1
15679: PPUSH
15680: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15684: LD_INT 33
15686: PPUSH
15687: LD_VAR 0 3
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15699: LD_INT 9
15701: PPUSH
15702: LD_VAR 0 3
15706: PPUSH
15707: LD_INT 1
15709: PPUSH
15710: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15714: LD_INT 38
15716: PPUSH
15717: LD_VAR 0 3
15721: PPUSH
15722: LD_INT 1
15724: PPUSH
15725: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15729: LD_INT 57
15731: PPUSH
15732: LD_VAR 0 3
15736: PPUSH
15737: LD_INT 1
15739: PPUSH
15740: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15744: LD_INT 58
15746: PPUSH
15747: LD_VAR 0 3
15751: PPUSH
15752: LD_INT 1
15754: PPUSH
15755: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15759: LD_INT 28
15761: PPUSH
15762: LD_VAR 0 3
15766: PPUSH
15767: LD_INT 1
15769: PPUSH
15770: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15774: LD_INT 29
15776: PPUSH
15777: LD_VAR 0 3
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15789: LD_INT 30
15791: PPUSH
15792: LD_VAR 0 3
15796: PPUSH
15797: LD_INT 1
15799: PPUSH
15800: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15804: LD_INT 37
15806: PPUSH
15807: LD_VAR 0 3
15811: PPUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15819: LD_INT 63
15821: PPUSH
15822: LD_VAR 0 3
15826: PPUSH
15827: LD_INT 1
15829: PPUSH
15830: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15834: LD_INT 64
15836: PPUSH
15837: LD_VAR 0 3
15841: PPUSH
15842: LD_INT 1
15844: PPUSH
15845: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15849: LD_INT 3
15851: PPUSH
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 1
15859: PPUSH
15860: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15864: LD_INT 4
15866: PPUSH
15867: LD_VAR 0 3
15871: PPUSH
15872: LD_INT 1
15874: PPUSH
15875: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15879: LD_INT 5
15881: PPUSH
15882: LD_VAR 0 3
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
15894: LD_INT 8
15896: PPUSH
15897: LD_VAR 0 3
15901: PPUSH
15902: LD_INT 1
15904: PPUSH
15905: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15909: LD_INT 66
15911: PPUSH
15912: LD_VAR 0 3
15916: PPUSH
15917: LD_INT 1
15919: PPUSH
15920: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15924: LD_INT 67
15926: PPUSH
15927: LD_VAR 0 3
15931: PPUSH
15932: LD_INT 1
15934: PPUSH
15935: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15939: LD_INT 21
15941: PPUSH
15942: LD_VAR 0 3
15946: PPUSH
15947: LD_INT 1
15949: PPUSH
15950: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15954: LD_INT 22
15956: PPUSH
15957: LD_VAR 0 3
15961: PPUSH
15962: LD_INT 1
15964: PPUSH
15965: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15969: LD_INT 19
15971: PPUSH
15972: LD_VAR 0 3
15976: PPUSH
15977: LD_INT 1
15979: PPUSH
15980: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
15984: LD_INT 26
15986: PPUSH
15987: LD_VAR 0 3
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15999: LD_INT 54
16001: PPUSH
16002: LD_VAR 0 3
16006: PPUSH
16007: LD_INT 1
16009: PPUSH
16010: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16014: LD_INT 55
16016: PPUSH
16017: LD_VAR 0 3
16021: PPUSH
16022: LD_INT 1
16024: PPUSH
16025: CALL_OW 322
// for i = 0 to 39 do
16029: LD_ADDR_VAR 0 4
16033: PUSH
16034: DOUBLE
16035: LD_INT 0
16037: DEC
16038: ST_TO_ADDR
16039: LD_INT 39
16041: PUSH
16042: FOR_TO
16043: IFFALSE 16064
// SetRestrict ( i , side , true ) ;
16045: LD_VAR 0 4
16049: PPUSH
16050: LD_VAR 0 3
16054: PPUSH
16055: LD_INT 1
16057: PPUSH
16058: CALL_OW 324
16062: GO 16042
16064: POP
16065: POP
// end ; else
16066: GO 16143
16068: POP
// begin for i = 1 to 73 do
16069: LD_ADDR_VAR 0 4
16073: PUSH
16074: DOUBLE
16075: LD_INT 1
16077: DEC
16078: ST_TO_ADDR
16079: LD_INT 73
16081: PUSH
16082: FOR_TO
16083: IFFALSE 16104
// SetTech ( i , side , state_enabled ) ;
16085: LD_VAR 0 4
16089: PPUSH
16090: LD_VAR 0 3
16094: PPUSH
16095: LD_INT 1
16097: PPUSH
16098: CALL_OW 322
16102: GO 16082
16104: POP
16105: POP
// for i = 0 to 39 do
16106: LD_ADDR_VAR 0 4
16110: PUSH
16111: DOUBLE
16112: LD_INT 0
16114: DEC
16115: ST_TO_ADDR
16116: LD_INT 39
16118: PUSH
16119: FOR_TO
16120: IFFALSE 16141
// SetRestrict ( i , side , true ) ;
16122: LD_VAR 0 4
16126: PPUSH
16127: LD_VAR 0 3
16131: PPUSH
16132: LD_INT 1
16134: PPUSH
16135: CALL_OW 324
16139: GO 16119
16141: POP
16142: POP
// end ; end ; end ;
16143: GO 12148
16145: POP
16146: POP
// end ; end_of_file
16147: LD_VAR 0 2
16151: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
16152: LD_INT 0
16154: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
16155: LD_VAR 0 1
16159: PPUSH
16160: LD_VAR 0 2
16164: PPUSH
16165: LD_VAR 0 3
16169: PPUSH
16170: LD_INT 0
16172: PPUSH
16173: CALL 16182 0 4
// end ;
16177: LD_VAR 0 4
16181: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
16182: LD_INT 0
16184: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
16185: LD_STRING initScore({
16187: PUSH
16188: LD_VAR 0 1
16192: PUSH
16193: LD_INT 1
16195: ARRAY
16196: STR
16197: PUSH
16198: LD_STRING ,
16200: STR
16201: PUSH
16202: LD_VAR 0 1
16206: PUSH
16207: LD_INT 2
16209: ARRAY
16210: STR
16211: PUSH
16212: LD_STRING ,
16214: STR
16215: PUSH
16216: LD_VAR 0 1
16220: PUSH
16221: LD_INT 3
16223: ARRAY
16224: STR
16225: PUSH
16226: LD_STRING ,
16228: STR
16229: PUSH
16230: LD_VAR 0 1
16234: PUSH
16235: LD_INT 4
16237: ARRAY
16238: STR
16239: PUSH
16240: LD_STRING ,
16242: STR
16243: PUSH
16244: LD_VAR 0 1
16248: PUSH
16249: LD_INT 5
16251: ARRAY
16252: STR
16253: PUSH
16254: LD_STRING ,
16256: STR
16257: PUSH
16258: LD_VAR 0 1
16262: PUSH
16263: LD_INT 6
16265: ARRAY
16266: STR
16267: PUSH
16268: LD_STRING ,
16270: STR
16271: PUSH
16272: LD_VAR 0 1
16276: PUSH
16277: LD_INT 7
16279: ARRAY
16280: STR
16281: PUSH
16282: LD_STRING ,
16284: STR
16285: PUSH
16286: LD_VAR 0 1
16290: PUSH
16291: LD_INT 8
16293: ARRAY
16294: STR
16295: PUSH
16296: LD_STRING },
16298: STR
16299: PUSH
16300: LD_VAR 0 2
16304: STR
16305: PUSH
16306: LD_STRING ,
16308: STR
16309: PUSH
16310: LD_VAR 0 3
16314: STR
16315: PUSH
16316: LD_STRING ,
16318: STR
16319: PUSH
16320: LD_VAR 0 4
16324: STR
16325: PUSH
16326: LD_STRING );
16328: STR
16329: PPUSH
16330: CALL_OW 559
// end ;
16334: LD_VAR 0 5
16338: RET
// export function LScore_Reset ( ) ; begin
16339: LD_INT 0
16341: PPUSH
// ToLua ( ResetScorebar(); ) ;
16342: LD_STRING ResetScorebar();
16344: PPUSH
16345: CALL_OW 559
// end ;
16349: LD_VAR 0 1
16353: RET
// export function LScore_Delete ( ID ) ; begin
16354: LD_INT 0
16356: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
16357: LD_STRING deleteScore(
16359: PUSH
16360: LD_VAR 0 1
16364: STR
16365: PUSH
16366: LD_STRING );
16368: STR
16369: PPUSH
16370: CALL_OW 559
// end ;
16374: LD_VAR 0 2
16378: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
16379: LD_INT 0
16381: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
16382: LD_STRING AST(
16384: PUSH
16385: LD_VAR 0 1
16389: STR
16390: PUSH
16391: LD_STRING ,
16393: STR
16394: PUSH
16395: LD_VAR 0 2
16399: STR
16400: PUSH
16401: LD_STRING ,
16403: STR
16404: PUSH
16405: LD_VAR 0 3
16409: STR
16410: PUSH
16411: LD_STRING ,);
16413: STR
16414: PPUSH
16415: CALL_OW 559
// end ;
16419: LD_VAR 0 4
16423: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
16424: LD_INT 0
16426: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
16427: LD_STRING AST(
16429: PUSH
16430: LD_VAR 0 1
16434: STR
16435: PUSH
16436: LD_STRING ,
16438: STR
16439: PUSH
16440: LD_VAR 0 2
16444: STR
16445: PUSH
16446: LD_STRING ,
16448: STR
16449: PUSH
16450: LD_VAR 0 3
16454: STR
16455: PUSH
16456: LD_STRING ,
16458: STR
16459: PUSH
16460: LD_VAR 0 4
16464: STR
16465: PUSH
16466: LD_STRING );
16468: STR
16469: PPUSH
16470: CALL_OW 559
// end ;
16474: LD_VAR 0 5
16478: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
16479: LD_INT 0
16481: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
16482: LD_STRING AST(
16484: PUSH
16485: LD_VAR 0 1
16489: STR
16490: PUSH
16491: LD_STRING ,
16493: STR
16494: PUSH
16495: LD_VAR 0 2
16499: STR
16500: PUSH
16501: LD_STRING ,
16503: STR
16504: PUSH
16505: LD_VAR 0 3
16509: STR
16510: PUSH
16511: LD_STRING ,
16513: STR
16514: PUSH
16515: LD_VAR 0 4
16519: STR
16520: PUSH
16521: LD_STRING ,
16523: STR
16524: PUSH
16525: LD_VAR 0 5
16529: STR
16530: PUSH
16531: LD_STRING );
16533: STR
16534: PPUSH
16535: CALL_OW 559
// end ;
16539: LD_VAR 0 6
16543: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
16544: LD_INT 0
16546: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
16547: LD_STRING ASRT(
16549: PUSH
16550: LD_VAR 0 1
16554: STR
16555: PUSH
16556: LD_STRING ,
16558: STR
16559: PUSH
16560: LD_VAR 0 2
16564: STR
16565: PUSH
16566: LD_STRING ,
16568: STR
16569: PUSH
16570: LD_VAR 0 3
16574: STR
16575: PUSH
16576: LD_STRING ,);
16578: STR
16579: PPUSH
16580: CALL_OW 559
// end ;
16584: LD_VAR 0 4
16588: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
16589: LD_INT 0
16591: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
16592: LD_STRING ASRT(
16594: PUSH
16595: LD_VAR 0 1
16599: STR
16600: PUSH
16601: LD_STRING ,
16603: STR
16604: PUSH
16605: LD_VAR 0 2
16609: STR
16610: PUSH
16611: LD_STRING ,
16613: STR
16614: PUSH
16615: LD_VAR 0 3
16619: STR
16620: PUSH
16621: LD_STRING ,
16623: STR
16624: PUSH
16625: LD_VAR 0 4
16629: STR
16630: PUSH
16631: LD_STRING );
16633: STR
16634: PPUSH
16635: CALL_OW 559
// end ;
16639: LD_VAR 0 5
16643: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
16644: LD_INT 0
16646: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
16647: LD_STRING ASRT(
16649: PUSH
16650: LD_VAR 0 1
16654: STR
16655: PUSH
16656: LD_STRING ,
16658: STR
16659: PUSH
16660: LD_VAR 0 2
16664: STR
16665: PUSH
16666: LD_STRING ,
16668: STR
16669: PUSH
16670: LD_VAR 0 3
16674: STR
16675: PUSH
16676: LD_STRING ,
16678: STR
16679: PUSH
16680: LD_VAR 0 4
16684: STR
16685: PUSH
16686: LD_STRING ,
16688: STR
16689: PUSH
16690: LD_VAR 0 5
16694: STR
16695: PUSH
16696: LD_STRING );
16698: STR
16699: PPUSH
16700: CALL_OW 559
// end ;
16704: LD_VAR 0 6
16708: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
16709: LD_INT 0
16711: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
16712: LD_STRING UST(
16714: PUSH
16715: LD_VAR 0 1
16719: STR
16720: PUSH
16721: LD_STRING ,
16723: STR
16724: PUSH
16725: LD_VAR 0 2
16729: STR
16730: PUSH
16731: LD_STRING );
16733: STR
16734: PPUSH
16735: CALL_OW 559
// end ;
16739: LD_VAR 0 3
16743: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
16744: LD_INT 0
16746: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
16747: LD_STRING UST(
16749: PUSH
16750: LD_VAR 0 1
16754: STR
16755: PUSH
16756: LD_STRING ,
16758: STR
16759: PUSH
16760: LD_VAR 0 2
16764: STR
16765: PUSH
16766: LD_STRING ,
16768: STR
16769: PUSH
16770: LD_VAR 0 3
16774: STR
16775: PUSH
16776: LD_STRING );
16778: STR
16779: PPUSH
16780: CALL_OW 559
// end ;
16784: LD_VAR 0 4
16788: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
16789: LD_INT 0
16791: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
16792: LD_STRING CCST(
16794: PUSH
16795: LD_VAR 0 1
16799: STR
16800: PUSH
16801: LD_STRING ,{
16803: STR
16804: PUSH
16805: LD_VAR 0 2
16809: STR
16810: PUSH
16811: LD_STRING ,
16813: STR
16814: PUSH
16815: LD_VAR 0 3
16819: STR
16820: PUSH
16821: LD_STRING ,
16823: STR
16824: PUSH
16825: LD_VAR 0 4
16829: STR
16830: PUSH
16831: LD_STRING });
16833: STR
16834: PPUSH
16835: CALL_OW 559
// end ;
16839: LD_VAR 0 5
16843: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
16844: LD_INT 0
16846: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
16847: LD_STRING CCST(
16849: PUSH
16850: LD_VAR 0 1
16854: STR
16855: PUSH
16856: LD_STRING ,
16858: STR
16859: PUSH
16860: LD_VAR 0 2
16864: STR
16865: PUSH
16866: LD_STRING );
16868: STR
16869: PPUSH
16870: CALL_OW 559
// end ;
16874: LD_VAR 0 3
16878: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
16879: LD_INT 0
16881: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
16882: LD_STRING ASSP(
16884: PUSH
16885: LD_VAR 0 1
16889: STR
16890: PUSH
16891: LD_STRING ,
16893: STR
16894: PUSH
16895: LD_VAR 0 2
16899: STR
16900: PUSH
16901: LD_STRING ,
16903: STR
16904: PUSH
16905: LD_VAR 0 3
16909: STR
16910: PUSH
16911: LD_STRING ,);
16913: STR
16914: PPUSH
16915: CALL_OW 559
// end ;
16919: LD_VAR 0 4
16923: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
16924: LD_INT 0
16926: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
16927: LD_STRING ASSP(
16929: PUSH
16930: LD_VAR 0 1
16934: STR
16935: PUSH
16936: LD_STRING ,
16938: STR
16939: PUSH
16940: LD_VAR 0 2
16944: STR
16945: PUSH
16946: LD_STRING ,
16948: STR
16949: PUSH
16950: LD_VAR 0 3
16954: STR
16955: PUSH
16956: LD_STRING ,
16958: STR
16959: PUSH
16960: LD_VAR 0 4
16964: STR
16965: PUSH
16966: LD_STRING );
16968: STR
16969: PPUSH
16970: CALL_OW 559
// end ;
16974: LD_VAR 0 5
16978: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
16979: LD_INT 0
16981: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
16982: LD_STRING ASSP(
16984: PUSH
16985: LD_VAR 0 1
16989: STR
16990: PUSH
16991: LD_STRING ,
16993: STR
16994: PUSH
16995: LD_VAR 0 2
16999: STR
17000: PUSH
17001: LD_STRING ,
17003: STR
17004: PUSH
17005: LD_VAR 0 3
17009: STR
17010: PUSH
17011: LD_STRING ,
17013: STR
17014: PUSH
17015: LD_VAR 0 4
17019: STR
17020: PUSH
17021: LD_STRING ,
17023: STR
17024: PUSH
17025: LD_VAR 0 5
17029: STR
17030: PUSH
17031: LD_STRING );
17033: STR
17034: PPUSH
17035: CALL_OW 559
// end ;
17039: LD_VAR 0 6
17043: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
17044: LD_INT 0
17046: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
17047: LD_STRING ASRSP(
17049: PUSH
17050: LD_VAR 0 1
17054: STR
17055: PUSH
17056: LD_STRING ,
17058: STR
17059: PUSH
17060: LD_VAR 0 2
17064: STR
17065: PUSH
17066: LD_STRING ,
17068: STR
17069: PUSH
17070: LD_VAR 0 3
17074: STR
17075: PUSH
17076: LD_STRING ,);
17078: STR
17079: PPUSH
17080: CALL_OW 559
// end ;
17084: LD_VAR 0 4
17088: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
17089: LD_INT 0
17091: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
17092: LD_STRING ASRSP(
17094: PUSH
17095: LD_VAR 0 1
17099: STR
17100: PUSH
17101: LD_STRING ,
17103: STR
17104: PUSH
17105: LD_VAR 0 2
17109: STR
17110: PUSH
17111: LD_STRING ,
17113: STR
17114: PUSH
17115: LD_VAR 0 3
17119: STR
17120: PUSH
17121: LD_STRING ,
17123: STR
17124: PUSH
17125: LD_VAR 0 4
17129: STR
17130: PUSH
17131: LD_STRING );
17133: STR
17134: PPUSH
17135: CALL_OW 559
// end ;
17139: LD_VAR 0 5
17143: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
17144: LD_INT 0
17146: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
17147: LD_STRING ASRSP(
17149: PUSH
17150: LD_VAR 0 1
17154: STR
17155: PUSH
17156: LD_STRING ,
17158: STR
17159: PUSH
17160: LD_VAR 0 2
17164: STR
17165: PUSH
17166: LD_STRING ,
17168: STR
17169: PUSH
17170: LD_VAR 0 3
17174: STR
17175: PUSH
17176: LD_STRING ,
17178: STR
17179: PUSH
17180: LD_VAR 0 4
17184: STR
17185: PUSH
17186: LD_STRING ,
17188: STR
17189: PUSH
17190: LD_VAR 0 5
17194: STR
17195: PUSH
17196: LD_STRING );
17198: STR
17199: PPUSH
17200: CALL_OW 559
// end ;
17204: LD_VAR 0 6
17208: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
17209: LD_INT 0
17211: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
17212: LD_STRING USSP(
17214: PUSH
17215: LD_VAR 0 1
17219: STR
17220: PUSH
17221: LD_STRING ,
17223: STR
17224: PUSH
17225: LD_VAR 0 2
17229: STR
17230: PUSH
17231: LD_STRING );
17233: STR
17234: PPUSH
17235: CALL_OW 559
// end ;
17239: LD_VAR 0 3
17243: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
17244: LD_INT 0
17246: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
17247: LD_STRING USSP(
17249: PUSH
17250: LD_VAR 0 1
17254: STR
17255: PUSH
17256: LD_STRING ,
17258: STR
17259: PUSH
17260: LD_VAR 0 2
17264: STR
17265: PUSH
17266: LD_STRING ,
17268: STR
17269: PUSH
17270: LD_VAR 0 3
17274: STR
17275: PUSH
17276: LD_STRING );
17278: STR
17279: PPUSH
17280: CALL_OW 559
// end ;
17284: LD_VAR 0 4
17288: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
17289: LD_INT 0
17291: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
17292: LD_STRING CCSSP(
17294: PUSH
17295: LD_VAR 0 1
17299: STR
17300: PUSH
17301: LD_STRING ,{
17303: STR
17304: PUSH
17305: LD_VAR 0 2
17309: STR
17310: PUSH
17311: LD_STRING ,
17313: STR
17314: PUSH
17315: LD_VAR 0 3
17319: STR
17320: PUSH
17321: LD_STRING ,
17323: STR
17324: PUSH
17325: LD_VAR 0 4
17329: STR
17330: PUSH
17331: LD_STRING });
17333: STR
17334: PPUSH
17335: CALL_OW 559
// end ;
17339: LD_VAR 0 5
17343: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
17344: LD_INT 0
17346: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
17347: LD_STRING CCSSP(
17349: PUSH
17350: LD_VAR 0 1
17354: STR
17355: PUSH
17356: LD_STRING ,
17358: STR
17359: PUSH
17360: LD_VAR 0 2
17364: STR
17365: PUSH
17366: LD_STRING );
17368: STR
17369: PPUSH
17370: CALL_OW 559
// end ;
17374: LD_VAR 0 3
17378: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
17379: LD_INT 0
17381: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
17382: LD_STRING ASP(
17384: PUSH
17385: LD_VAR 0 1
17389: STR
17390: PUSH
17391: LD_STRING ,
17393: STR
17394: PUSH
17395: LD_VAR 0 2
17399: STR
17400: PUSH
17401: LD_STRING ,
17403: STR
17404: PUSH
17405: LD_VAR 0 3
17409: STR
17410: PUSH
17411: LD_STRING );
17413: STR
17414: PPUSH
17415: CALL_OW 559
// end ;
17419: LD_VAR 0 4
17423: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
17424: LD_INT 0
17426: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
17427: LD_STRING USP(
17429: PUSH
17430: LD_VAR 0 1
17434: STR
17435: PUSH
17436: LD_STRING ,
17438: STR
17439: PUSH
17440: LD_VAR 0 2
17444: STR
17445: PUSH
17446: LD_STRING ,
17448: STR
17449: PUSH
17450: LD_VAR 0 3
17454: STR
17455: PUSH
17456: LD_STRING );
17458: STR
17459: PPUSH
17460: CALL_OW 559
// end ;
17464: LD_VAR 0 4
17468: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
17469: LD_INT 0
17471: PPUSH
17472: PPUSH
// for i = 1 to 8 do
17473: LD_ADDR_VAR 0 4
17477: PUSH
17478: DOUBLE
17479: LD_INT 1
17481: DEC
17482: ST_TO_ADDR
17483: LD_INT 8
17485: PUSH
17486: FOR_TO
17487: IFFALSE 17534
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
17489: LD_STRING USP(
17491: PUSH
17492: LD_VAR 0 1
17496: STR
17497: PUSH
17498: LD_STRING ,
17500: STR
17501: PUSH
17502: LD_VAR 0 4
17506: STR
17507: PUSH
17508: LD_STRING ,
17510: STR
17511: PUSH
17512: LD_VAR 0 2
17516: PUSH
17517: LD_VAR 0 4
17521: ARRAY
17522: STR
17523: PUSH
17524: LD_STRING );
17526: STR
17527: PPUSH
17528: CALL_OW 559
17532: GO 17486
17534: POP
17535: POP
// end ;
17536: LD_VAR 0 3
17540: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
17541: LD_INT 0
17543: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
17544: LD_STRING ASC(
17546: PUSH
17547: LD_VAR 0 1
17551: STR
17552: PUSH
17553: LD_STRING ,
17555: STR
17556: PUSH
17557: LD_VAR 0 2
17561: STR
17562: PUSH
17563: LD_STRING ,
17565: STR
17566: PUSH
17567: LD_VAR 0 3
17571: STR
17572: PUSH
17573: LD_STRING ,
17575: STR
17576: PUSH
17577: LD_VAR 0 4
17581: STR
17582: PUSH
17583: LD_STRING );
17585: STR
17586: PPUSH
17587: CALL_OW 559
// end ;
17591: LD_VAR 0 5
17595: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
17596: LD_INT 0
17598: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
17599: LD_STRING USC(
17601: PUSH
17602: LD_VAR 0 1
17606: STR
17607: PUSH
17608: LD_STRING ,{
17610: STR
17611: PUSH
17612: LD_VAR 0 2
17616: PUSH
17617: LD_INT 1
17619: ARRAY
17620: STR
17621: PUSH
17622: LD_STRING ,
17624: STR
17625: PUSH
17626: LD_VAR 0 2
17630: PUSH
17631: LD_INT 2
17633: ARRAY
17634: STR
17635: PUSH
17636: LD_STRING ,
17638: STR
17639: PUSH
17640: LD_VAR 0 2
17644: PUSH
17645: LD_INT 3
17647: ARRAY
17648: STR
17649: PUSH
17650: LD_STRING ,
17652: STR
17653: PUSH
17654: LD_VAR 0 2
17658: PUSH
17659: LD_INT 4
17661: ARRAY
17662: STR
17663: PUSH
17664: LD_STRING ,
17666: STR
17667: PUSH
17668: LD_VAR 0 2
17672: PUSH
17673: LD_INT 5
17675: ARRAY
17676: STR
17677: PUSH
17678: LD_STRING ,
17680: STR
17681: PUSH
17682: LD_VAR 0 2
17686: PUSH
17687: LD_INT 6
17689: ARRAY
17690: STR
17691: PUSH
17692: LD_STRING ,
17694: STR
17695: PUSH
17696: LD_VAR 0 2
17700: PUSH
17701: LD_INT 7
17703: ARRAY
17704: STR
17705: PUSH
17706: LD_STRING ,
17708: STR
17709: PUSH
17710: LD_VAR 0 2
17714: PUSH
17715: LD_INT 8
17717: ARRAY
17718: STR
17719: PUSH
17720: LD_STRING });
17722: STR
17723: PPUSH
17724: CALL_OW 559
// end ; end_of_file
17728: LD_VAR 0 3
17732: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
17733: LD_INT 0
17735: PPUSH
17736: PPUSH
17737: PPUSH
17738: PPUSH
17739: PPUSH
17740: PPUSH
17741: PPUSH
17742: PPUSH
17743: PPUSH
// for i := 1 to 8 do
17744: LD_ADDR_VAR 0 2
17748: PUSH
17749: DOUBLE
17750: LD_INT 1
17752: DEC
17753: ST_TO_ADDR
17754: LD_INT 8
17756: PUSH
17757: FOR_TO
17758: IFFALSE 18142
// begin if Side_Positions [ i ] then
17760: LD_EXP 37
17764: PUSH
17765: LD_VAR 0 2
17769: ARRAY
17770: IFFALSE 18140
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
17772: LD_ADDR_VAR 0 7
17776: PUSH
17777: LD_INT 22
17779: PUSH
17780: LD_VAR 0 2
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 21
17791: PUSH
17792: LD_INT 1
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PPUSH
17803: CALL_OW 69
17807: PUSH
17808: LD_INT 0
17810: PLUS
17811: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17812: LD_ADDR_VAR 0 9
17816: PUSH
17817: LD_INT 22
17819: PUSH
17820: LD_VAR 0 2
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PUSH
17829: LD_INT 2
17831: PUSH
17832: LD_INT 30
17834: PUSH
17835: LD_INT 0
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 30
17844: PUSH
17845: LD_INT 1
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: LIST
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PPUSH
17861: CALL_OW 69
17865: ST_TO_ADDR
// crates := 0 ;
17866: LD_ADDR_VAR 0 4
17870: PUSH
17871: LD_INT 0
17873: ST_TO_ADDR
// oil := 0 ;
17874: LD_ADDR_VAR 0 5
17878: PUSH
17879: LD_INT 0
17881: ST_TO_ADDR
// sib := 0 ;
17882: LD_ADDR_VAR 0 6
17886: PUSH
17887: LD_INT 0
17889: ST_TO_ADDR
// if bases then
17890: LD_VAR 0 9
17894: IFFALSE 18000
// begin for j in bases do
17896: LD_ADDR_VAR 0 3
17900: PUSH
17901: LD_VAR 0 9
17905: PUSH
17906: FOR_IN
17907: IFFALSE 17998
// begin base := GetBase ( j ) ;
17909: LD_ADDR_VAR 0 8
17913: PUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: CALL_OW 274
17923: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
17924: LD_ADDR_VAR 0 4
17928: PUSH
17929: LD_VAR 0 4
17933: PUSH
17934: LD_VAR 0 8
17938: PPUSH
17939: LD_INT 1
17941: PPUSH
17942: CALL_OW 275
17946: PLUS
17947: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
17948: LD_ADDR_VAR 0 5
17952: PUSH
17953: LD_VAR 0 5
17957: PUSH
17958: LD_VAR 0 8
17962: PPUSH
17963: LD_INT 2
17965: PPUSH
17966: CALL_OW 275
17970: PLUS
17971: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
17972: LD_ADDR_VAR 0 6
17976: PUSH
17977: LD_VAR 0 6
17981: PUSH
17982: LD_VAR 0 8
17986: PPUSH
17987: LD_INT 3
17989: PPUSH
17990: CALL_OW 275
17994: PLUS
17995: ST_TO_ADDR
// end ;
17996: GO 17906
17998: POP
17999: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
18000: LD_STRING setSpecText(
18002: PUSH
18003: LD_VAR 0 2
18007: STR
18008: PUSH
18009: LD_STRING ,
18011: STR
18012: PUSH
18013: LD_INT 2
18015: STR
18016: PUSH
18017: LD_STRING ,
18019: STR
18020: PUSH
18021: LD_VAR 0 4
18025: STR
18026: PUSH
18027: LD_STRING )
18029: STR
18030: PPUSH
18031: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
18035: LD_STRING setSpecText(
18037: PUSH
18038: LD_VAR 0 2
18042: STR
18043: PUSH
18044: LD_STRING ,
18046: STR
18047: PUSH
18048: LD_INT 3
18050: STR
18051: PUSH
18052: LD_STRING ,
18054: STR
18055: PUSH
18056: LD_VAR 0 5
18060: STR
18061: PUSH
18062: LD_STRING )
18064: STR
18065: PPUSH
18066: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
18070: LD_STRING setSpecText(
18072: PUSH
18073: LD_VAR 0 2
18077: STR
18078: PUSH
18079: LD_STRING ,
18081: STR
18082: PUSH
18083: LD_INT 4
18085: STR
18086: PUSH
18087: LD_STRING ,
18089: STR
18090: PUSH
18091: LD_VAR 0 6
18095: STR
18096: PUSH
18097: LD_STRING )
18099: STR
18100: PPUSH
18101: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
18105: LD_STRING setSpecText(
18107: PUSH
18108: LD_VAR 0 2
18112: STR
18113: PUSH
18114: LD_STRING ,
18116: STR
18117: PUSH
18118: LD_INT 5
18120: STR
18121: PUSH
18122: LD_STRING ,
18124: STR
18125: PUSH
18126: LD_VAR 0 7
18130: STR
18131: PUSH
18132: LD_STRING )
18134: STR
18135: PPUSH
18136: CALL_OW 559
// end ; end ;
18140: GO 17757
18142: POP
18143: POP
// end ;
18144: LD_VAR 0 1
18148: RET
// every 0 0$1 do
18149: GO 18151
18151: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
18152: LD_STRING setSpecLogoNumber(
18154: PUSH
18155: LD_INT 2
18157: STR
18158: PUSH
18159: LD_STRING ,
18161: STR
18162: PUSH
18163: LD_INT 1
18165: STR
18166: PUSH
18167: LD_STRING )
18169: STR
18170: PPUSH
18171: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
18175: LD_STRING setSpecLogoNumber(
18177: PUSH
18178: LD_INT 3
18180: STR
18181: PUSH
18182: LD_STRING ,
18184: STR
18185: PUSH
18186: LD_INT 2
18188: STR
18189: PUSH
18190: LD_STRING )
18192: STR
18193: PPUSH
18194: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
18198: LD_STRING setSpecLogoNumber(
18200: PUSH
18201: LD_INT 4
18203: STR
18204: PUSH
18205: LD_STRING ,
18207: STR
18208: PUSH
18209: LD_INT 3
18211: STR
18212: PUSH
18213: LD_STRING )
18215: STR
18216: PPUSH
18217: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
18221: LD_STRING setSpecLogoNumber(
18223: PUSH
18224: LD_INT 5
18226: STR
18227: PUSH
18228: LD_STRING ,
18230: STR
18231: PUSH
18232: LD_INT 4
18234: STR
18235: PUSH
18236: LD_STRING )
18238: STR
18239: PPUSH
18240: CALL_OW 559
// end ;
18244: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
18245: LD_INT 2
18247: PUSH
18248: LD_INT 30
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 30
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: LIST
18272: PPUSH
18273: CALL_OW 69
18277: IFFALSE 18287
18279: GO 18281
18281: DISABLE
// begin enable ;
18282: ENABLE
// UpdateSpectatorBar ;
18283: CALL 17733 0 0
// end ; end_of_file
18287: END
// var respawn , inqueue ; export function init_respawning ; begin
18288: LD_INT 0
18290: PPUSH
// respawn := Rand ( 1 , 8 ) ;
18291: LD_ADDR_LOC 23
18295: PUSH
18296: LD_INT 1
18298: PPUSH
18299: LD_INT 8
18301: PPUSH
18302: CALL_OW 12
18306: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18307: LD_ADDR_LOC 24
18311: PUSH
18312: LD_INT 0
18314: PUSH
18315: LD_INT 0
18317: PUSH
18318: LD_INT 0
18320: PUSH
18321: LD_INT 0
18323: PUSH
18324: LD_INT 0
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: LD_INT 0
18332: PUSH
18333: LD_INT 0
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: ST_TO_ADDR
// end ;
18346: LD_VAR 0 1
18350: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
18351: GO 18353
18353: DISABLE
18354: LD_INT 0
18356: PPUSH
18357: PPUSH
18358: PPUSH
// begin if respawning_time_max = 0 then
18359: LD_EXP 30
18363: PUSH
18364: LD_INT 0
18366: EQUAL
18367: IFFALSE 18371
// exit ;
18369: GO 18779
// if respawn = 8 then
18371: LD_LOC 23
18375: PUSH
18376: LD_INT 8
18378: EQUAL
18379: IFFALSE 18391
// respawn := 1 else
18381: LD_ADDR_LOC 23
18385: PUSH
18386: LD_INT 1
18388: ST_TO_ADDR
18389: GO 18405
// respawn := respawn + 1 ;
18391: LD_ADDR_LOC 23
18395: PUSH
18396: LD_LOC 23
18400: PUSH
18401: LD_INT 1
18403: PLUS
18404: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
18405: LD_EXP 37
18409: PUSH
18410: LD_LOC 23
18414: ARRAY
18415: PUSH
18416: LD_LOC 24
18420: PUSH
18421: LD_LOC 23
18425: ARRAY
18426: NOT
18427: AND
18428: IFFALSE 18778
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
18430: LD_ADDR_VAR 0 1
18434: PUSH
18435: LD_INT 21
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 22
18447: PUSH
18448: LD_LOC 23
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 3
18459: PUSH
18460: LD_INT 23
18462: PUSH
18463: LD_INT 0
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: PPUSH
18476: CALL_OW 69
18480: ST_TO_ADDR
// if n < number_of_people then
18481: LD_VAR 0 1
18485: PUSH
18486: LD_EXP 21
18490: LESS
18491: IFFALSE 18775
// begin aktresp := respawn ;
18493: LD_ADDR_VAR 0 3
18497: PUSH
18498: LD_LOC 23
18502: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
18503: LD_ADDR_LOC 24
18507: PUSH
18508: LD_LOC 24
18512: PPUSH
18513: LD_VAR 0 3
18517: PPUSH
18518: LD_INT 1
18520: PPUSH
18521: CALL_OW 1
18525: ST_TO_ADDR
// enable ;
18526: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
18527: LD_EXP 29
18531: PPUSH
18532: LD_EXP 30
18536: PPUSH
18537: CALL_OW 12
18541: PPUSH
18542: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
18546: LD_ADDR_LOC 24
18550: PUSH
18551: LD_LOC 24
18555: PPUSH
18556: LD_VAR 0 3
18560: PPUSH
18561: LD_INT 0
18563: PPUSH
18564: CALL_OW 1
18568: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
18569: LD_ADDR_VAR 0 2
18573: PUSH
18574: LD_INT 21
18576: PUSH
18577: LD_INT 3
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 2
18586: PUSH
18587: LD_INT 30
18589: PUSH
18590: LD_INT 0
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 30
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 50
18614: PUSH
18615: EMPTY
18616: LIST
18617: PUSH
18618: LD_INT 22
18620: PUSH
18621: LD_VAR 0 3
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: PPUSH
18636: CALL_OW 69
18640: ST_TO_ADDR
// if dep = 0 then
18641: LD_VAR 0 2
18645: PUSH
18646: LD_INT 0
18648: EQUAL
18649: IFFALSE 18653
// exit ;
18651: GO 18779
// hc_name :=  ;
18653: LD_ADDR_OWVAR 26
18657: PUSH
18658: LD_STRING 
18660: ST_TO_ADDR
// hc_importance := 0 ;
18661: LD_ADDR_OWVAR 32
18665: PUSH
18666: LD_INT 0
18668: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
18669: LD_INT 0
18671: PPUSH
18672: LD_INT 0
18674: PPUSH
18675: LD_EXP 23
18679: PUSH
18680: LD_INT 2
18682: DIV
18683: PPUSH
18684: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
18688: LD_ADDR_OWVAR 21
18692: PUSH
18693: LD_EXP 38
18697: PUSH
18698: LD_VAR 0 3
18702: ARRAY
18703: ST_TO_ADDR
// uc_side := aktresp ;
18704: LD_ADDR_OWVAR 20
18708: PUSH
18709: LD_VAR 0 3
18713: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
18714: LD_ADDR_VAR 0 2
18718: PUSH
18719: LD_VAR 0 2
18723: PUSH
18724: LD_INT 1
18726: PPUSH
18727: LD_VAR 0 2
18731: PPUSH
18732: CALL_OW 12
18736: ARRAY
18737: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
18738: CALL_OW 44
18742: PPUSH
18743: LD_VAR 0 2
18747: PPUSH
18748: CALL_OW 250
18752: PPUSH
18753: LD_VAR 0 2
18757: PPUSH
18758: CALL_OW 251
18762: PPUSH
18763: LD_INT 7
18765: PPUSH
18766: LD_INT 1
18768: PPUSH
18769: CALL_OW 50
// end else
18773: GO 18776
// enable ;
18775: ENABLE
// end else
18776: GO 18779
// enable ;
18778: ENABLE
// end ; end_of_file
18779: PPOPN 3
18781: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
18782: LD_INT 0
18784: PPUSH
18785: PPUSH
18786: PPUSH
// BuildUpTime_Delay = 0 ;
18787: LD_ADDR_EXP 63
18791: PUSH
18792: LD_INT 0
18794: ST_TO_ADDR
// if not def_builduptime then
18795: LD_EXP 16
18799: NOT
18800: IFFALSE 18804
// exit ;
18802: GO 18987
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
18804: LD_ADDR_EXP 63
18808: PUSH
18809: LD_INT 8400
18811: PUSH
18812: LD_INT 2100
18814: PUSH
18815: LD_EXP 16
18819: MUL
18820: PLUS
18821: ST_TO_ADDR
// BuildUpTimeActive := true ;
18822: LD_ADDR_EXP 62
18826: PUSH
18827: LD_INT 1
18829: ST_TO_ADDR
// for i := 1 to 8 do
18830: LD_ADDR_VAR 0 2
18834: PUSH
18835: DOUBLE
18836: LD_INT 1
18838: DEC
18839: ST_TO_ADDR
18840: LD_INT 8
18842: PUSH
18843: FOR_TO
18844: IFFALSE 18985
// if Side_Positions [ i ] then
18846: LD_EXP 37
18850: PUSH
18851: LD_VAR 0 2
18855: ARRAY
18856: IFFALSE 18983
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
18858: LD_EXP 61
18862: PUSH
18863: LD_EXP 37
18867: PUSH
18868: LD_VAR 0 2
18872: ARRAY
18873: ARRAY
18874: PPUSH
18875: LD_INT 5
18877: PPUSH
18878: CALL_OW 424
// for j := 1 to 8 do
18882: LD_ADDR_VAR 0 3
18886: PUSH
18887: DOUBLE
18888: LD_INT 1
18890: DEC
18891: ST_TO_ADDR
18892: LD_INT 8
18894: PUSH
18895: FOR_TO
18896: IFFALSE 18981
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
18898: LD_EXP 37
18902: PUSH
18903: LD_VAR 0 3
18907: ARRAY
18908: PUSH
18909: LD_EXP 34
18913: PUSH
18914: LD_VAR 0 2
18918: ARRAY
18919: PUSH
18920: LD_EXP 34
18924: PUSH
18925: LD_VAR 0 3
18929: ARRAY
18930: NONEQUAL
18931: PUSH
18932: LD_EXP 39
18936: NOT
18937: PUSH
18938: LD_VAR 0 2
18942: PUSH
18943: LD_VAR 0 3
18947: NONEQUAL
18948: AND
18949: OR
18950: AND
18951: IFFALSE 18979
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
18953: LD_VAR 0 3
18957: PPUSH
18958: LD_EXP 61
18962: PUSH
18963: LD_EXP 37
18967: PUSH
18968: LD_VAR 0 2
18972: ARRAY
18973: ARRAY
18974: PPUSH
18975: CALL_OW 333
18979: GO 18895
18981: POP
18982: POP
// end ;
18983: GO 18843
18985: POP
18986: POP
// end ;
18987: LD_VAR 0 1
18991: RET
// export function EndBuildUp ; var i , j ; begin
18992: LD_INT 0
18994: PPUSH
18995: PPUSH
18996: PPUSH
// BuildUpTimeActive := false ;
18997: LD_ADDR_EXP 62
19001: PUSH
19002: LD_INT 0
19004: ST_TO_ADDR
// for i := 1 to 8 do
19005: LD_ADDR_VAR 0 2
19009: PUSH
19010: DOUBLE
19011: LD_INT 1
19013: DEC
19014: ST_TO_ADDR
19015: LD_INT 8
19017: PUSH
19018: FOR_TO
19019: IFFALSE 19160
// if Side_Positions [ i ] then
19021: LD_EXP 37
19025: PUSH
19026: LD_VAR 0 2
19030: ARRAY
19031: IFFALSE 19158
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
19033: LD_EXP 61
19037: PUSH
19038: LD_EXP 37
19042: PUSH
19043: LD_VAR 0 2
19047: ARRAY
19048: ARRAY
19049: PPUSH
19050: LD_INT 0
19052: PPUSH
19053: CALL_OW 424
// for j := 1 to 8 do
19057: LD_ADDR_VAR 0 3
19061: PUSH
19062: DOUBLE
19063: LD_INT 1
19065: DEC
19066: ST_TO_ADDR
19067: LD_INT 8
19069: PUSH
19070: FOR_TO
19071: IFFALSE 19156
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19073: LD_EXP 37
19077: PUSH
19078: LD_VAR 0 3
19082: ARRAY
19083: PUSH
19084: LD_EXP 34
19088: PUSH
19089: LD_VAR 0 2
19093: ARRAY
19094: PUSH
19095: LD_EXP 34
19099: PUSH
19100: LD_VAR 0 3
19104: ARRAY
19105: NONEQUAL
19106: PUSH
19107: LD_EXP 39
19111: NOT
19112: PUSH
19113: LD_VAR 0 2
19117: PUSH
19118: LD_VAR 0 3
19122: NONEQUAL
19123: AND
19124: OR
19125: AND
19126: IFFALSE 19154
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19128: LD_VAR 0 3
19132: PPUSH
19133: LD_EXP 61
19137: PUSH
19138: LD_EXP 37
19142: PUSH
19143: LD_VAR 0 2
19147: ARRAY
19148: ARRAY
19149: PPUSH
19150: CALL_OW 334
19154: GO 19070
19156: POP
19157: POP
// end ;
19158: GO 19018
19160: POP
19161: POP
// end ;
19162: LD_VAR 0 1
19166: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
19167: LD_EXP 62
19171: IFFALSE 19346
19173: GO 19175
19175: DISABLE
19176: LD_INT 0
19178: PPUSH
19179: PPUSH
// begin for i := 1 to 8 do
19180: LD_ADDR_VAR 0 1
19184: PUSH
19185: DOUBLE
19186: LD_INT 1
19188: DEC
19189: ST_TO_ADDR
19190: LD_INT 8
19192: PUSH
19193: FOR_TO
19194: IFFALSE 19343
// if Side_Positions [ i ] then
19196: LD_EXP 37
19200: PUSH
19201: LD_VAR 0 1
19205: ARRAY
19206: IFFALSE 19341
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
19208: LD_ADDR_VAR 0 2
19212: PUSH
19213: LD_EXP 61
19217: PUSH
19218: LD_EXP 37
19222: PUSH
19223: LD_VAR 0 1
19227: ARRAY
19228: ARRAY
19229: PPUSH
19230: LD_INT 2
19232: PUSH
19233: LD_INT 21
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 21
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 22
19260: PUSH
19261: LD_OWVAR 2
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PPUSH
19274: CALL_OW 70
19278: PUSH
19279: FOR_IN
19280: IFFALSE 19339
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
19282: LD_EXP 34
19286: PUSH
19287: LD_VAR 0 1
19291: ARRAY
19292: PUSH
19293: LD_EXP 34
19297: PUSH
19298: LD_OWVAR 2
19302: ARRAY
19303: NONEQUAL
19304: PUSH
19305: LD_EXP 39
19309: NOT
19310: PUSH
19311: LD_VAR 0 1
19315: PUSH
19316: LD_OWVAR 2
19320: NONEQUAL
19321: AND
19322: OR
19323: IFFALSE 19337
// ComMoveToArea ( un , BuildUpEscape ) ;
19325: LD_VAR 0 2
19329: PPUSH
19330: LD_INT 20
19332: PPUSH
19333: CALL_OW 113
19337: GO 19279
19339: POP
19340: POP
19341: GO 19193
19343: POP
19344: POP
// enable ;
19345: ENABLE
// end ;
19346: PPOPN 2
19348: END
// every 0 0$1 trigger def_builduptime do
19349: LD_EXP 16
19353: IFFALSE 19379
19355: GO 19357
19357: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
19358: LD_INT 8400
19360: PUSH
19361: LD_EXP 16
19365: PUSH
19366: LD_INT 2100
19368: MUL
19369: PLUS
19370: PPUSH
19371: CALL_OW 67
// EndBuildUp ;
19375: CALL 18992 0 0
// end ;
19379: END
