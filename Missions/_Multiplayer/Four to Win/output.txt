// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_public_score , def_amount_score , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , amount_of_apemen , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , amount_score , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , king_territory , final_count , Player_Side , player_team ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if MultiPlayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type = mp_game_type ;
  79: LD_ADDR_EXP 18
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side = mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  99: LD_ADDR_EXP 37
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 109: LD_ADDR_EXP 34
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 119: LD_ADDR_EXP 38
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 36
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams = mp_teams ;
 139: LD_ADDR_EXP 35
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 352
// begin Game_Type = 3 ;
 151: LD_ADDR_EXP 18
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side = 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 37
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 34
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 38
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 36
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 323: LD_ADDR_EXP 35
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: ST_TO_ADDR
// end ; for i := 1 to 8 do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_INT 8
 364: PUSH
 365: FOR_TO
 366: IFFALSE 453
// if Multiplayer_GetPlayerIsSpec ( i ) then
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 530
 377: IFFALSE 451
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 379: LD_ADDR_EXP 37
 383: PUSH
 384: LD_EXP 37
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_INT 0
 396: PPUSH
 397: CALL_OW 1
 401: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 402: LD_ADDR_EXP 35
 406: PUSH
 407: LD_EXP 35
 411: PPUSH
 412: LD_EXP 34
 416: PUSH
 417: LD_VAR 0 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 35
 427: PUSH
 428: LD_EXP 34
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: ARRAY
 439: PUSH
 440: LD_VAR 0 2
 444: DIFF
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// end ;
 451: GO 365
 453: POP
 454: POP
// if MultiPlayer then
 455: LD_OWVAR 4
 459: IFFALSE 671
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 461: LD_ADDR_EXP 1
 465: PUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_INT 1
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 487: LD_ADDR_EXP 3
 491: PUSH
 492: LD_INT 2
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 500: LD_ADDR_EXP 4
 504: PUSH
 505: LD_INT 3
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 513: LD_ADDR_EXP 5
 517: PUSH
 518: LD_INT 4
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 526: LD_ADDR_EXP 6
 530: PUSH
 531: LD_INT 5
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 539: LD_ADDR_EXP 8
 543: PUSH
 544: LD_INT 10
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 552: LD_ADDR_EXP 9
 556: PUSH
 557: LD_INT 11
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 13 ) ;
 578: LD_ADDR_EXP 11
 582: PUSH
 583: LD_INT 13
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 14 ) ;
 591: LD_ADDR_EXP 12
 595: PUSH
 596: LD_INT 14
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 604: LD_ADDR_EXP 13
 608: PUSH
 609: LD_INT 15
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_public_score = GetMultiplayerSetting ( 16 ) ;
 617: LD_ADDR_EXP 14
 621: PUSH
 622: LD_INT 16
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_amount_score = GetMultiplayerSetting ( 17 ) ;
 630: LD_ADDR_EXP 15
 634: PUSH
 635: LD_INT 17
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 643: LD_ADDR_EXP 16
 647: PUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 656: LD_ADDR_VAR 0 3
 660: PUSH
 661: LD_INT 22
 663: PPUSH
 664: CALL_OW 426
 668: ST_TO_ADDR
// end else
 669: GO 803
// begin randomize ;
 671: CALL_OW 10
// def_base_level = 3 ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_INT 3
 682: ST_TO_ADDR
// def_amount_of_people = 3 ;
 683: LD_ADDR_EXP 2
 687: PUSH
 688: LD_INT 3
 690: ST_TO_ADDR
// def_skill_level = 1 ;
 691: LD_ADDR_EXP 3
 695: PUSH
 696: LD_INT 1
 698: ST_TO_ADDR
// def_starting_resources = 2 ;
 699: LD_ADDR_EXP 4
 703: PUSH
 704: LD_INT 2
 706: ST_TO_ADDR
// def_shipments_density = 50 ;
 707: LD_ADDR_EXP 5
 711: PUSH
 712: LD_INT 50
 714: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
 715: LD_ADDR_EXP 6
 719: PUSH
 720: LD_INT 0
 722: ST_TO_ADDR
// def_shared_vision = 1 ;
 723: LD_ADDR_EXP 8
 727: PUSH
 728: LD_INT 1
 730: ST_TO_ADDR
// def_morale_flags = 1 ;
 731: LD_ADDR_EXP 9
 735: PUSH
 736: LD_INT 1
 738: ST_TO_ADDR
// def_siberite_detection = 1 ;
 739: LD_ADDR_EXP 10
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 747: LD_ADDR_EXP 12
 751: PUSH
 752: LD_INT 3
 754: ST_TO_ADDR
// def_people_respawning = 2 ;
 755: LD_ADDR_EXP 11
 759: PUSH
 760: LD_INT 2
 762: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 763: LD_ADDR_EXP 13
 767: PUSH
 768: LD_INT 0
 770: ST_TO_ADDR
// def_public_score = 1 ;
 771: LD_ADDR_EXP 14
 775: PUSH
 776: LD_INT 1
 778: ST_TO_ADDR
// def_amount_score = 0 ;
 779: LD_ADDR_EXP 15
 783: PUSH
 784: LD_INT 0
 786: ST_TO_ADDR
// def_builduptime = 0 ;
 787: LD_ADDR_EXP 16
 791: PUSH
 792: LD_INT 0
 794: ST_TO_ADDR
// tech_level = 4 ;
 795: LD_ADDR_VAR 0 3
 799: PUSH
 800: LD_INT 4
 802: ST_TO_ADDR
// end ; Player_Side = Your_Side ;
 803: LD_ADDR_EXP 47
 807: PUSH
 808: LD_OWVAR 2
 812: ST_TO_ADDR
// player_team = Side_Teams [ Player_Side ] ;
 813: LD_ADDR_EXP 48
 817: PUSH
 818: LD_EXP 34
 822: PUSH
 823: LD_EXP 47
 827: ARRAY
 828: ST_TO_ADDR
// if isSGUI then
 829: LD_OWVAR 83
 833: IFFALSE 841
// setMpTechs ( ) else
 835: CALL 11968 0 0
 839: GO 854
// SetMpTechLevel ( tech_level + 1 ) ;
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: PLUS
 849: PPUSH
 850: CALL 12115 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 854: LD_ADDR_EXP 19
 858: PUSH
 859: LD_INT 0
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 1
 867: PUSH
 868: LD_INT 1
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 1
 881: PUSH
 882: LD_INT 1
 884: PLUS
 885: ARRAY
 886: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 887: LD_ADDR_EXP 20
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: LD_INT 0
 897: PUSH
 898: LD_INT 2
 900: PUSH
 901: LD_INT 4
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: PUSH
 910: LD_EXP 1
 914: PUSH
 915: LD_INT 1
 917: PLUS
 918: ARRAY
 919: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 920: LD_ADDR_EXP 21
 924: PUSH
 925: LD_INT 9
 927: PUSH
 928: LD_INT 12
 930: PUSH
 931: LD_INT 15
 933: PUSH
 934: LD_INT 24
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_EXP 2
 947: PUSH
 948: LD_INT 1
 950: PLUS
 951: ARRAY
 952: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 953: LD_ADDR_EXP 23
 957: PUSH
 958: LD_INT 2
 960: PUSH
 961: LD_INT 3
 963: PUSH
 964: LD_INT 4
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: PUSH
 976: LD_EXP 3
 980: PUSH
 981: LD_INT 1
 983: PLUS
 984: ARRAY
 985: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 986: LD_ADDR_EXP 25
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: LD_INT 0
 996: PUSH
 997: LD_INT 0
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 30
1007: PUSH
1008: LD_INT 0
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: PUSH
1019: LD_INT 50
1021: PUSH
1022: LD_INT 20
1024: PUSH
1025: LD_INT 0
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_INT 80
1035: PUSH
1036: LD_INT 40
1038: PUSH
1039: LD_INT 20
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 4
1057: PUSH
1058: LD_INT 1
1060: PLUS
1061: ARRAY
1062: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1063: LD_ADDR_EXP 24
1067: PUSH
1068: LD_INT 10
1070: PUSH
1071: EMPTY
1072: LIST
1073: PUSH
1074: LD_INT 7
1076: PUSH
1077: LD_INT 14
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 6
1086: PUSH
1087: LD_INT 12
1089: PUSH
1090: LD_INT 18
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 5
1100: PUSH
1101: LD_INT 10
1103: PUSH
1104: LD_INT 15
1106: PUSH
1107: LD_INT 20
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 4
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// shipments_density = 150 - def_shipments_density ;
1132: LD_ADDR_EXP 26
1136: PUSH
1137: LD_INT 150
1139: PUSH
1140: LD_EXP 5
1144: MINUS
1145: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1146: LD_ADDR_EXP 22
1150: PUSH
1151: LD_INT 0
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 2
1159: PUSH
1160: LD_INT 3
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: LD_EXP 12
1173: PUSH
1174: LD_INT 1
1176: PLUS
1177: ARRAY
1178: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1179: LD_ADDR_EXP 28
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: LD_INT 165
1189: PUSH
1190: LD_INT 140
1192: PUSH
1193: LD_INT 115
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: PUSH
1202: LD_EXP 12
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: ARRAY
1211: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1212: LD_ADDR_EXP 29
1216: PUSH
1217: LD_INT 0
1219: PUSH
1220: LD_INT 8400
1222: PUSH
1223: LD_INT 1750
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: PUSH
1231: LD_EXP 11
1235: PUSH
1236: LD_INT 1
1238: PLUS
1239: ARRAY
1240: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_INT 0
1248: PUSH
1249: LD_INT 21000
1251: PUSH
1252: LD_INT 4200
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 11
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1270: LD_ADDR_EXP 27
1274: PUSH
1275: LD_INT 1
1277: NEG
1278: PUSH
1279: LD_INT 350
1281: PUSH
1282: LD_INT 700
1284: PUSH
1285: LD_INT 1400
1287: PUSH
1288: LD_INT 0
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: PUSH
1298: LD_EXP 9
1302: PUSH
1303: LD_INT 1
1305: PLUS
1306: ARRAY
1307: ST_TO_ADDR
// battle_flags_id = [ ] ;
1308: LD_ADDR_EXP 44
1312: PUSH
1313: EMPTY
1314: ST_TO_ADDR
// amount_score = [ 200 , 300 , 500 , 700 , 1000 , 1500 ] [ def_amount_score + 1 ] ;
1315: LD_ADDR_EXP 31
1319: PUSH
1320: LD_INT 200
1322: PUSH
1323: LD_INT 300
1325: PUSH
1326: LD_INT 500
1328: PUSH
1329: LD_INT 700
1331: PUSH
1332: LD_INT 1000
1334: PUSH
1335: LD_INT 1500
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: PUSH
1346: LD_EXP 15
1350: PUSH
1351: LD_INT 1
1353: PLUS
1354: ARRAY
1355: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1356: LD_EXP 13
1360: PUSH
1361: LD_INT 0
1363: EQUAL
1364: IFFALSE 1376
// siberite_bomb_Delay = 0 else
1366: LD_ADDR_EXP 32
1370: PUSH
1371: LD_INT 0
1373: ST_TO_ADDR
1374: GO 1398
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1376: LD_ADDR_EXP 32
1380: PUSH
1381: LD_EXP 13
1385: PUSH
1386: LD_INT 1
1388: MINUS
1389: PUSH
1390: LD_INT 21000
1392: MUL
1393: PUSH
1394: LD_INT 1
1396: PLUS
1397: ST_TO_ADDR
// king_territory = KopecStred ;
1398: LD_ADDR_EXP 45
1402: PUSH
1403: LD_INT 2
1405: ST_TO_ADDR
// final_count = amount_score ;
1406: LD_ADDR_EXP 46
1410: PUSH
1411: LD_EXP 31
1415: ST_TO_ADDR
// end ;
1416: LD_VAR 0 1
1420: RET
// function init_map ; var i ; begin
1421: LD_INT 0
1423: PPUSH
1424: PPUSH
// extra_oil_deposits_locations := [ [ 53 , 26 ] , [ 51 , 53 ] , [ 129 , 20 ] , [ 155 , 53 ] , [ 187 , 139 ] , [ 183 , 107 ] , [ 106 , 135 ] , [ 80 , 106 ] ] ;
1425: LD_ADDR_EXP 43
1429: PUSH
1430: LD_INT 53
1432: PUSH
1433: LD_INT 26
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: LD_INT 51
1442: PUSH
1443: LD_INT 53
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 129
1452: PUSH
1453: LD_INT 20
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 155
1462: PUSH
1463: LD_INT 53
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 187
1472: PUSH
1473: LD_INT 139
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 183
1482: PUSH
1483: LD_INT 107
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 106
1492: PUSH
1493: LD_INT 135
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 80
1502: PUSH
1503: LD_INT 106
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// depot_def := [ [ 29 , 22 , 3 ] , [ 154 , 21 , 3 ] , [ 85 , 138 , 0 ] , [ 212 , 141 , 5 ] ] ;
1520: LD_ADDR_EXP 40
1524: PUSH
1525: LD_INT 29
1527: PUSH
1528: LD_INT 22
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 154
1541: PUSH
1542: LD_INT 21
1544: PUSH
1545: LD_INT 3
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 85
1555: PUSH
1556: LD_INT 138
1558: PUSH
1559: LD_INT 0
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 212
1569: PUSH
1570: LD_INT 141
1572: PUSH
1573: LD_INT 5
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// start_def := [ [ 33 , 25 ] , [ 151 , 24 ] , [ 89 , 135 ] , [ 205 , 137 ] ] ;
1587: LD_ADDR_EXP 42
1591: PUSH
1592: LD_INT 33
1594: PUSH
1595: LD_INT 25
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 151
1604: PUSH
1605: LD_INT 24
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 89
1614: PUSH
1615: LD_INT 135
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: LD_INT 205
1624: PUSH
1625: LD_INT 137
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: ST_TO_ADDR
// breastworks_def := [ [ [ 46 , 13 , 4 ] , [ 43 , 39 , 4 ] , [ 47 , 25 , 5 ] , [ 45 , 44 , 5 ] ] , [ [ 129 , 12 , 0 ] , [ 153 , 34 , 1 ] , [ 139 , 24 , 0 ] , [ 158 , 41 , 0 ] ] , [ [ 84 , 121 , 4 ] , [ 109 , 143 , 4 ] , [ 87 , 126 , 4 ] , [ 111 , 148 , 4 ] ] , [ [ 194 , 146 , 2 ] , [ 195 , 121 , 1 ] , [ 193 , 135 , 2 ] , [ 192 , 116 , 2 ] ] , ] ;
1638: LD_ADDR_EXP 41
1642: PUSH
1643: LD_INT 46
1645: PUSH
1646: LD_INT 13
1648: PUSH
1649: LD_INT 4
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 43
1659: PUSH
1660: LD_INT 39
1662: PUSH
1663: LD_INT 4
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 47
1673: PUSH
1674: LD_INT 25
1676: PUSH
1677: LD_INT 5
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 45
1687: PUSH
1688: LD_INT 44
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 129
1707: PUSH
1708: LD_INT 12
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 153
1721: PUSH
1722: LD_INT 34
1724: PUSH
1725: LD_INT 1
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 139
1735: PUSH
1736: LD_INT 24
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 158
1749: PUSH
1750: LD_INT 41
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 84
1769: PUSH
1770: LD_INT 121
1772: PUSH
1773: LD_INT 4
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 109
1783: PUSH
1784: LD_INT 143
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: LD_INT 87
1797: PUSH
1798: LD_INT 126
1800: PUSH
1801: LD_INT 4
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: LD_INT 111
1811: PUSH
1812: LD_INT 148
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 194
1831: PUSH
1832: LD_INT 146
1834: PUSH
1835: LD_INT 2
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 195
1845: PUSH
1846: LD_INT 121
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 193
1859: PUSH
1860: LD_INT 135
1862: PUSH
1863: LD_INT 2
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 192
1873: PUSH
1874: LD_INT 116
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: ST_TO_ADDR
// if def_extra_oil_deposits then
1897: LD_EXP 6
1901: IFFALSE 1945
// for i in extra_oil_deposits_locations do
1903: LD_ADDR_VAR 0 2
1907: PUSH
1908: LD_EXP 43
1912: PUSH
1913: FOR_IN
1914: IFFALSE 1943
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1916: LD_VAR 0 2
1920: PUSH
1921: LD_INT 1
1923: ARRAY
1924: PPUSH
1925: LD_VAR 0 2
1929: PUSH
1930: LD_INT 2
1932: ARRAY
1933: PPUSH
1934: LD_INT 2
1936: PPUSH
1937: CALL_OW 62
1941: GO 1913
1943: POP
1944: POP
// end ;
1945: LD_VAR 0 1
1949: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1950: LD_INT 0
1952: PPUSH
1953: PPUSH
1954: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1955: LD_ADDR_EXP 39
1959: PUSH
1960: LD_EXP 34
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: EMPTY
1969: LIST
1970: DIFF
1971: PUSH
1972: LD_INT 1
1974: GREATER
1975: ST_TO_ADDR
// if not Team_Game then
1976: LD_EXP 39
1980: NOT
1981: IFFALSE 2079
// begin for i = 1 to 8 do
1983: LD_ADDR_VAR 0 2
1987: PUSH
1988: DOUBLE
1989: LD_INT 1
1991: DEC
1992: ST_TO_ADDR
1993: LD_INT 8
1995: PUSH
1996: FOR_TO
1997: IFFALSE 2075
// for j = 1 to 8 do
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: DOUBLE
2005: LD_INT 1
2007: DEC
2008: ST_TO_ADDR
2009: LD_INT 8
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2071
// if i <> j then
2015: LD_VAR 0 2
2019: PUSH
2020: LD_VAR 0 3
2024: NONEQUAL
2025: IFFALSE 2049
// SetAttitude ( i , j , att_neutral , true ) else
2027: LD_VAR 0 2
2031: PPUSH
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: LD_INT 1
2042: PPUSH
2043: CALL_OW 80
2047: GO 2069
// SetAttitude ( i , j , att_friend , true ) ;
2049: LD_VAR 0 2
2053: PPUSH
2054: LD_VAR 0 3
2058: PPUSH
2059: LD_INT 1
2061: PPUSH
2062: LD_INT 1
2064: PPUSH
2065: CALL_OW 80
2069: GO 2012
2071: POP
2072: POP
2073: GO 1996
2075: POP
2076: POP
// end else
2077: GO 2254
// begin if def_shared_vision then
2079: LD_EXP 8
2083: IFFALSE 2148
// begin for i in Teams do
2085: LD_ADDR_VAR 0 2
2089: PUSH
2090: LD_EXP 35
2094: PUSH
2095: FOR_IN
2096: IFFALSE 2146
// for j = 2 to i do
2098: LD_ADDR_VAR 0 3
2102: PUSH
2103: DOUBLE
2104: LD_INT 2
2106: DEC
2107: ST_TO_ADDR
2108: LD_VAR 0 2
2112: PUSH
2113: FOR_TO
2114: IFFALSE 2142
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2116: LD_VAR 0 2
2120: PUSH
2121: LD_VAR 0 3
2125: ARRAY
2126: PPUSH
2127: LD_VAR 0 2
2131: PUSH
2132: LD_INT 1
2134: ARRAY
2135: PPUSH
2136: CALL_OW 343
2140: GO 2113
2142: POP
2143: POP
2144: GO 2095
2146: POP
2147: POP
// end ; for i = 1 to 8 do
2148: LD_ADDR_VAR 0 2
2152: PUSH
2153: DOUBLE
2154: LD_INT 1
2156: DEC
2157: ST_TO_ADDR
2158: LD_INT 8
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2252
// for j = 1 to 8 do
2164: LD_ADDR_VAR 0 3
2168: PUSH
2169: DOUBLE
2170: LD_INT 1
2172: DEC
2173: ST_TO_ADDR
2174: LD_INT 8
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2248
// if Side_Teams [ i ] = Side_Teams [ j ] then
2180: LD_EXP 34
2184: PUSH
2185: LD_VAR 0 2
2189: ARRAY
2190: PUSH
2191: LD_EXP 34
2195: PUSH
2196: LD_VAR 0 3
2200: ARRAY
2201: EQUAL
2202: IFFALSE 2226
// SetAttitude ( i , j , att_friend , true ) else
2204: LD_VAR 0 2
2208: PPUSH
2209: LD_VAR 0 3
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: CALL_OW 80
2224: GO 2246
// SetAttitude ( i , j , att_enemy , true ) ;
2226: LD_VAR 0 2
2230: PPUSH
2231: LD_VAR 0 3
2235: PPUSH
2236: LD_INT 2
2238: PPUSH
2239: LD_INT 1
2241: PPUSH
2242: CALL_OW 80
2246: GO 2177
2248: POP
2249: POP
2250: GO 2161
2252: POP
2253: POP
// end ; end ;
2254: LD_VAR 0 1
2258: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2259: LD_INT 0
2261: PPUSH
2262: PPUSH
2263: PPUSH
2264: PPUSH
// result := [ ] ;
2265: LD_ADDR_VAR 0 6
2269: PUSH
2270: EMPTY
2271: ST_TO_ADDR
// for i := 1 to count do
2272: LD_ADDR_VAR 0 7
2276: PUSH
2277: DOUBLE
2278: LD_INT 1
2280: DEC
2281: ST_TO_ADDR
2282: LD_VAR 0 1
2286: PUSH
2287: FOR_TO
2288: IFFALSE 2684
// begin uc_direction := Rand ( 0 , 5 ) ;
2290: LD_ADDR_OWVAR 24
2294: PUSH
2295: LD_INT 0
2297: PPUSH
2298: LD_INT 5
2300: PPUSH
2301: CALL_OW 12
2305: ST_TO_ADDR
// if commander then
2306: LD_LOC 1
2310: IFFALSE 2419
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2312: LD_ADDR_OWVAR 26
2316: PUSH
2317: LD_OWVAR 19
2321: PUSH
2322: LD_OWVAR 20
2326: ARRAY
2327: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2328: LD_INT 1
2330: PPUSH
2331: LD_INT 2
2333: PPUSH
2334: CALL_OW 12
2338: PPUSH
2339: LD_VAR 0 2
2343: PPUSH
2344: LD_EXP 23
2348: PUSH
2349: LD_INT 2
2351: PLUS
2352: PPUSH
2353: CALL_OW 380
// hc_importance := 105 ;
2357: LD_ADDR_OWVAR 32
2361: PUSH
2362: LD_INT 105
2364: ST_TO_ADDR
// commander := false ;
2365: LD_ADDR_LOC 1
2369: PUSH
2370: LD_INT 0
2372: ST_TO_ADDR
// if Multiplayer then
2373: LD_OWVAR 4
2377: IFFALSE 2417
// begin hc_gallery := MULTIAVATARS ;
2379: LD_ADDR_OWVAR 33
2383: PUSH
2384: LD_STRING MULTIAVATARS
2386: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2387: LD_ADDR_OWVAR 34
2391: PUSH
2392: LD_OWVAR 20
2396: PPUSH
2397: CALL_OW 525
2401: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2402: LD_ADDR_OWVAR 27
2406: PUSH
2407: LD_OWVAR 20
2411: PPUSH
2412: CALL_OW 526
2416: ST_TO_ADDR
// end ; end else
2417: GO 2482
// begin hc_name :=  ;
2419: LD_ADDR_OWVAR 26
2423: PUSH
2424: LD_STRING 
2426: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2427: LD_INT 1
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: CALL_OW 12
2437: PPUSH
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_EXP 23
2447: PPUSH
2448: CALL_OW 380
// hc_importance := 0 ;
2452: LD_ADDR_OWVAR 32
2456: PUSH
2457: LD_INT 0
2459: ST_TO_ADDR
// if Multiplayer then
2460: LD_OWVAR 4
2464: IFFALSE 2482
// begin hc_gallery :=  ;
2466: LD_ADDR_OWVAR 33
2470: PUSH
2471: LD_STRING 
2473: ST_TO_ADDR
// hc_face_number := 0 ;
2474: LD_ADDR_OWVAR 34
2478: PUSH
2479: LD_INT 0
2481: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2482: LD_ADDR_VAR 0 9
2486: PUSH
2487: CALL_OW 44
2491: ST_TO_ADDR
// if global_defined then
2492: LD_LOC 3
2496: IFFALSE 2636
// begin if ( cl = class_soldier ) then
2498: LD_VAR 0 2
2502: PUSH
2503: LD_INT 1
2505: EQUAL
2506: IFFALSE 2526
// j := i + soldiers_created else
2508: LD_ADDR_VAR 0 8
2512: PUSH
2513: LD_VAR 0 7
2517: PUSH
2518: LD_LOC 4
2522: PLUS
2523: ST_TO_ADDR
2524: GO 2536
// j := i ;
2526: LD_ADDR_VAR 0 8
2530: PUSH
2531: LD_VAR 0 7
2535: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2536: LD_LOC 2
2540: PUSH
2541: LD_VAR 0 2
2545: ARRAY
2546: PUSH
2547: LD_VAR 0 8
2551: ARRAY
2552: PPUSH
2553: LD_VAR 0 9
2557: PPUSH
2558: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2562: LD_VAR 0 9
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: LD_LOC 2
2574: PUSH
2575: LD_VAR 0 2
2579: ARRAY
2580: PUSH
2581: LD_VAR 0 8
2585: ARRAY
2586: PPUSH
2587: LD_INT 2
2589: PPUSH
2590: CALL_OW 260
2594: PPUSH
2595: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2599: LD_VAR 0 9
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: LD_LOC 2
2611: PUSH
2612: LD_VAR 0 2
2616: ARRAY
2617: PUSH
2618: LD_VAR 0 8
2622: ARRAY
2623: PPUSH
2624: LD_INT 1
2626: PPUSH
2627: CALL_OW 260
2631: PPUSH
2632: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2636: LD_VAR 0 9
2640: PPUSH
2641: LD_VAR 0 3
2645: PPUSH
2646: LD_VAR 0 4
2650: PPUSH
2651: LD_VAR 0 5
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 50
// result := result ^ [ un ] ;
2663: LD_ADDR_VAR 0 6
2667: PUSH
2668: LD_VAR 0 6
2672: PUSH
2673: LD_VAR 0 9
2677: PUSH
2678: EMPTY
2679: LIST
2680: ADD
2681: ST_TO_ADDR
// end ;
2682: GO 2287
2684: POP
2685: POP
// if not global_defined then
2686: LD_LOC 3
2690: NOT
2691: IFFALSE 2769
// if ( global_units >= cl ) then
2693: LD_LOC 2
2697: PUSH
2698: LD_VAR 0 2
2702: GREATEREQUAL
2703: IFFALSE 2744
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2705: LD_ADDR_LOC 2
2709: PUSH
2710: LD_LOC 2
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: LD_LOC 2
2724: PUSH
2725: LD_VAR 0 2
2729: ARRAY
2730: PUSH
2731: LD_VAR 0 6
2735: ADD
2736: PPUSH
2737: CALL_OW 1
2741: ST_TO_ADDR
2742: GO 2769
// global_units := Replace ( global_units , cl , result ) ;
2744: LD_ADDR_LOC 2
2748: PUSH
2749: LD_LOC 2
2753: PPUSH
2754: LD_VAR 0 2
2758: PPUSH
2759: LD_VAR 0 6
2763: PPUSH
2764: CALL_OW 1
2768: ST_TO_ADDR
// end ;
2769: LD_VAR 0 6
2773: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , sol , br , dep ; begin
2774: LD_INT 0
2776: PPUSH
2777: PPUSH
2778: PPUSH
2779: PPUSH
2780: PPUSH
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
// if side in [ 0 , 9 ] then
2786: LD_VAR 0 1
2790: PUSH
2791: LD_INT 0
2793: PUSH
2794: LD_INT 9
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: IN
2801: IFFALSE 2805
// exit ;
2803: GO 3912
// pos := Side_Positions [ side ] ;
2805: LD_ADDR_VAR 0 3
2809: PUSH
2810: LD_EXP 37
2814: PUSH
2815: LD_VAR 0 1
2819: ARRAY
2820: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2821: LD_ADDR_OWVAR 21
2825: PUSH
2826: LD_EXP 38
2830: PUSH
2831: LD_VAR 0 1
2835: ARRAY
2836: ST_TO_ADDR
// uc_side := side ;
2837: LD_ADDR_OWVAR 20
2841: PUSH
2842: LD_VAR 0 1
2846: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2847: LD_ADDR_VAR 0 4
2851: PUSH
2852: LD_EXP 40
2856: PUSH
2857: LD_VAR 0 3
2861: ARRAY
2862: PUSH
2863: LD_INT 1
2865: ARRAY
2866: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2867: LD_ADDR_VAR 0 5
2871: PUSH
2872: LD_EXP 40
2876: PUSH
2877: LD_VAR 0 3
2881: ARRAY
2882: PUSH
2883: LD_INT 2
2885: ARRAY
2886: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2887: LD_ADDR_VAR 0 6
2891: PUSH
2892: LD_EXP 40
2896: PUSH
2897: LD_VAR 0 3
2901: ARRAY
2902: PUSH
2903: LD_INT 3
2905: ARRAY
2906: ST_TO_ADDR
// if is_depot then
2907: LD_EXP 19
2911: IFFALSE 3044
// begin bc_type = b_depot ;
2913: LD_ADDR_OWVAR 42
2917: PUSH
2918: LD_INT 0
2920: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2921: LD_ADDR_VAR 0 11
2925: PUSH
2926: LD_VAR 0 4
2930: PPUSH
2931: LD_VAR 0 5
2935: PPUSH
2936: LD_VAR 0 6
2940: PPUSH
2941: CALL_OW 47
2945: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2946: LD_VAR 0 11
2950: PPUSH
2951: LD_STRING @
2953: PUSH
2954: LD_VAR 0 1
2958: STR
2959: PPUSH
2960: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2964: LD_VAR 0 11
2968: PPUSH
2969: CALL_OW 274
2973: PPUSH
2974: LD_INT 1
2976: PPUSH
2977: LD_EXP 25
2981: PUSH
2982: LD_INT 1
2984: ARRAY
2985: PPUSH
2986: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2990: LD_VAR 0 11
2994: PPUSH
2995: CALL_OW 274
2999: PPUSH
3000: LD_INT 2
3002: PPUSH
3003: LD_EXP 25
3007: PUSH
3008: LD_INT 2
3010: ARRAY
3011: PPUSH
3012: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3016: LD_VAR 0 11
3020: PPUSH
3021: CALL_OW 274
3025: PPUSH
3026: LD_INT 3
3028: PPUSH
3029: LD_EXP 25
3033: PUSH
3034: LD_INT 3
3036: ARRAY
3037: PPUSH
3038: CALL_OW 277
// end else
3042: GO 3188
// begin for i := 1 to 3 do
3044: LD_ADDR_VAR 0 7
3048: PUSH
3049: DOUBLE
3050: LD_INT 1
3052: DEC
3053: ST_TO_ADDR
3054: LD_INT 3
3056: PUSH
3057: FOR_TO
3058: IFFALSE 3186
// begin r := starting_resources [ i ] ;
3060: LD_ADDR_VAR 0 8
3064: PUSH
3065: LD_EXP 25
3069: PUSH
3070: LD_VAR 0 7
3074: ARRAY
3075: ST_TO_ADDR
// while r >= 10 do
3076: LD_VAR 0 8
3080: PUSH
3081: LD_INT 10
3083: GREATEREQUAL
3084: IFFALSE 3184
// if r > 50 then
3086: LD_VAR 0 8
3090: PUSH
3091: LD_INT 50
3093: GREATER
3094: IFFALSE 3140
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3096: LD_VAR 0 7
3100: PPUSH
3101: LD_INT 5
3103: PPUSH
3104: LD_VAR 0 4
3108: PPUSH
3109: LD_VAR 0 5
3113: PPUSH
3114: LD_INT 4
3116: PPUSH
3117: LD_INT 0
3119: PPUSH
3120: CALL_OW 60
// r := r - 50 ;
3124: LD_ADDR_VAR 0 8
3128: PUSH
3129: LD_VAR 0 8
3133: PUSH
3134: LD_INT 50
3136: MINUS
3137: ST_TO_ADDR
// end else
3138: GO 3182
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3140: LD_VAR 0 7
3144: PPUSH
3145: LD_VAR 0 8
3149: PUSH
3150: LD_INT 10
3152: DIV
3153: PPUSH
3154: LD_VAR 0 4
3158: PPUSH
3159: LD_VAR 0 5
3163: PPUSH
3164: LD_INT 4
3166: PPUSH
3167: LD_INT 0
3169: PPUSH
3170: CALL_OW 60
// r := 0 ;
3174: LD_ADDR_VAR 0 8
3178: PUSH
3179: LD_INT 0
3181: ST_TO_ADDR
// end ;
3182: GO 3076
// end ;
3184: GO 3057
3186: POP
3187: POP
// end ; for r in starting_crates do
3188: LD_ADDR_VAR 0 8
3192: PUSH
3193: LD_EXP 24
3197: PUSH
3198: FOR_IN
3199: IFFALSE 3231
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3201: LD_INT 1
3203: PPUSH
3204: LD_INT 5
3206: PPUSH
3207: LD_VAR 0 4
3211: PPUSH
3212: LD_VAR 0 5
3216: PPUSH
3217: LD_VAR 0 8
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 60
3229: GO 3198
3231: POP
3232: POP
// if def_morale_flags then
3233: LD_EXP 9
3237: IFFALSE 3376
// begin x := start_def [ pos ] [ 1 ] ;
3239: LD_ADDR_VAR 0 4
3243: PUSH
3244: LD_EXP 42
3248: PUSH
3249: LD_VAR 0 3
3253: ARRAY
3254: PUSH
3255: LD_INT 1
3257: ARRAY
3258: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3259: LD_ADDR_VAR 0 5
3263: PUSH
3264: LD_EXP 42
3268: PUSH
3269: LD_VAR 0 3
3273: ARRAY
3274: PUSH
3275: LD_INT 2
3277: ARRAY
3278: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3279: LD_VAR 0 4
3283: PPUSH
3284: LD_VAR 0 5
3288: PPUSH
3289: LD_INT 12
3291: PPUSH
3292: LD_INT 2
3294: PPUSH
3295: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3299: LD_ADDR_EXP 44
3303: PUSH
3304: LD_EXP 44
3308: PUSH
3309: LD_VAR 0 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: LD_VAR 0 5
3323: PPUSH
3324: LD_INT 1
3326: PUSH
3327: LD_INT 100
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 2
3336: PUSH
3337: LD_INT 50
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: PUSH
3344: LD_INT 3
3346: PUSH
3347: LD_INT 20
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 20
3356: PUSH
3357: LD_INT 100
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: PPUSH
3370: CALL_OW 418
3374: ADD
3375: ST_TO_ADDR
// end ; commander := true ;
3376: LD_ADDR_LOC 1
3380: PUSH
3381: LD_INT 1
3383: ST_TO_ADDR
// soldiers_created := 0 ;
3384: LD_ADDR_LOC 4
3388: PUSH
3389: LD_INT 0
3391: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3392: LD_ADDR_VAR 0 7
3396: PUSH
3397: DOUBLE
3398: LD_INT 1
3400: DEC
3401: ST_TO_ADDR
3402: LD_EXP 20
3406: PUSH
3407: FOR_TO
3408: IFFALSE 3630
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3410: LD_ADDR_VAR 0 4
3414: PUSH
3415: LD_EXP 41
3419: PUSH
3420: LD_VAR 0 3
3424: ARRAY
3425: PUSH
3426: LD_VAR 0 7
3430: ARRAY
3431: PUSH
3432: LD_INT 1
3434: ARRAY
3435: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3436: LD_ADDR_VAR 0 5
3440: PUSH
3441: LD_EXP 41
3445: PUSH
3446: LD_VAR 0 3
3450: ARRAY
3451: PUSH
3452: LD_VAR 0 7
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3462: LD_ADDR_VAR 0 6
3466: PUSH
3467: LD_EXP 41
3471: PUSH
3472: LD_VAR 0 3
3476: ARRAY
3477: PUSH
3478: LD_VAR 0 7
3482: ARRAY
3483: PUSH
3484: LD_INT 3
3486: ARRAY
3487: ST_TO_ADDR
// bc_type := b_breastwork ;
3488: LD_ADDR_OWVAR 42
3492: PUSH
3493: LD_INT 31
3495: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3496: LD_ADDR_VAR 0 10
3500: PUSH
3501: LD_VAR 0 4
3505: PPUSH
3506: LD_VAR 0 5
3510: PPUSH
3511: LD_VAR 0 6
3515: PPUSH
3516: CALL_OW 47
3520: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3521: LD_ADDR_VAR 0 4
3525: PUSH
3526: LD_VAR 0 4
3530: PPUSH
3531: LD_VAR 0 6
3535: PPUSH
3536: LD_INT 2
3538: PPUSH
3539: CALL_OW 272
3543: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3544: LD_ADDR_VAR 0 5
3548: PUSH
3549: LD_VAR 0 5
3553: PPUSH
3554: LD_VAR 0 6
3558: PPUSH
3559: LD_INT 2
3561: PPUSH
3562: CALL_OW 273
3566: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3567: LD_ADDR_VAR 0 9
3571: PUSH
3572: LD_INT 1
3574: PPUSH
3575: LD_INT 1
3577: PPUSH
3578: LD_VAR 0 4
3582: PPUSH
3583: LD_VAR 0 5
3587: PPUSH
3588: LD_INT 0
3590: PPUSH
3591: CALL 2259 0 5
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3600: LD_ADDR_LOC 4
3604: PUSH
3605: LD_LOC 4
3609: PUSH
3610: LD_INT 1
3612: PLUS
3613: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3614: LD_VAR 0 9
3618: PPUSH
3619: LD_VAR 0 10
3623: PPUSH
3624: CALL_OW 120
// end ;
3628: GO 3407
3630: POP
3631: POP
// x := start_def [ pos ] [ 1 ] ;
3632: LD_ADDR_VAR 0 4
3636: PUSH
3637: LD_EXP 42
3641: PUSH
3642: LD_VAR 0 3
3646: ARRAY
3647: PUSH
3648: LD_INT 1
3650: ARRAY
3651: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: LD_EXP 42
3661: PUSH
3662: LD_VAR 0 3
3666: ARRAY
3667: PUSH
3668: LD_INT 2
3670: ARRAY
3671: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
3672: LD_LOC 8
3676: PUSH
3677: LD_EXP 20
3681: MINUS
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: LD_VAR 0 4
3690: PPUSH
3691: LD_VAR 0 5
3695: PPUSH
3696: LD_INT 5
3698: PPUSH
3699: CALL 2259 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
3703: LD_LOC 5
3707: PPUSH
3708: LD_INT 2
3710: PPUSH
3711: LD_VAR 0 4
3715: PPUSH
3716: LD_VAR 0 5
3720: PPUSH
3721: LD_INT 5
3723: PPUSH
3724: CALL 2259 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
3728: LD_LOC 7
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_VAR 0 4
3740: PPUSH
3741: LD_VAR 0 5
3745: PPUSH
3746: LD_INT 5
3748: PPUSH
3749: CALL 2259 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
3753: LD_LOC 6
3757: PPUSH
3758: LD_INT 4
3760: PPUSH
3761: LD_VAR 0 4
3765: PPUSH
3766: LD_VAR 0 5
3770: PPUSH
3771: LD_INT 5
3773: PPUSH
3774: CALL 2259 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3778: LD_EXP 10
3782: PUSH
3783: LD_INT 20
3785: PPUSH
3786: LD_VAR 0 1
3790: PPUSH
3791: CALL_OW 321
3795: PUSH
3796: LD_INT 1
3798: EQUAL
3799: AND
3800: IFFALSE 3817
// SetTech ( tech_SibDet , side , state_researched ) ;
3802: LD_INT 20
3804: PPUSH
3805: LD_VAR 0 1
3809: PPUSH
3810: LD_INT 2
3812: PPUSH
3813: CALL_OW 322
// if def_siberite_bomb = 1 then
3817: LD_EXP 13
3821: PUSH
3822: LD_INT 1
3824: EQUAL
3825: IFFALSE 3859
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3827: LD_INT 25
3829: PPUSH
3830: LD_VAR 0 1
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3842: LD_INT 73
3844: PPUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_INT 1
3852: PPUSH
3853: CALL_OW 322
// end else
3857: GO 3889
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3859: LD_INT 25
3861: PPUSH
3862: LD_VAR 0 1
3866: PPUSH
3867: LD_INT 0
3869: PPUSH
3870: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3874: LD_INT 73
3876: PPUSH
3877: LD_VAR 0 1
3881: PPUSH
3882: LD_INT 0
3884: PPUSH
3885: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3889: LD_INT 24
3891: PPUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 322
// global_defined := true ;
3904: LD_ADDR_LOC 3
3908: PUSH
3909: LD_INT 1
3911: ST_TO_ADDR
// end ;
3912: LD_VAR 0 2
3916: RET
// every 0 0$1 do
3917: GO 3919
3919: DISABLE
// if ( def_siberite_bomb > 1 ) then
3920: LD_EXP 13
3924: PUSH
3925: LD_INT 1
3927: GREATER
3928: IFFALSE 3943
// begin wait ( siberite_bomb_Delay ) ;
3930: LD_EXP 32
3934: PPUSH
3935: CALL_OW 67
// EnableSibFiss ;
3939: CALL 3944 0 0
// end ;
3943: END
// function EnableSibFiss ; var i ; begin
3944: LD_INT 0
3946: PPUSH
3947: PPUSH
// for i := 1 to 8 do
3948: LD_ADDR_VAR 0 2
3952: PUSH
3953: DOUBLE
3954: LD_INT 1
3956: DEC
3957: ST_TO_ADDR
3958: LD_INT 8
3960: PUSH
3961: FOR_TO
3962: IFFALSE 4008
// if Side_Positions [ i ] then
3964: LD_EXP 37
3968: PUSH
3969: LD_VAR 0 2
3973: ARRAY
3974: IFFALSE 4006
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3976: LD_INT 25
3978: PPUSH
3979: LD_VAR 0 2
3983: PPUSH
3984: LD_INT 1
3986: PPUSH
3987: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3991: LD_INT 73
3993: PPUSH
3994: LD_VAR 0 2
3998: PPUSH
3999: LD_INT 1
4001: PPUSH
4002: CALL_OW 322
// end ;
4006: GO 3961
4008: POP
4009: POP
// end ;
4010: LD_VAR 0 1
4014: RET
// function prepare_sides ; var i ; begin
4015: LD_INT 0
4017: PPUSH
4018: PPUSH
// global_units := [ ] ;
4019: LD_ADDR_LOC 2
4023: PUSH
4024: EMPTY
4025: ST_TO_ADDR
// global_defined := false ;
4026: LD_ADDR_LOC 3
4030: PUSH
4031: LD_INT 0
4033: ST_TO_ADDR
// CountClassMembers ;
4034: CALL 4084 0 0
// for i := 1 to 8 do
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: DOUBLE
4044: LD_INT 1
4046: DEC
4047: ST_TO_ADDR
4048: LD_INT 8
4050: PUSH
4051: FOR_TO
4052: IFFALSE 4077
// if Side_Positions [ i ] then
4054: LD_EXP 37
4058: PUSH
4059: LD_VAR 0 2
4063: ARRAY
4064: IFFALSE 4075
// prepare_side ( i ) ;
4066: LD_VAR 0 2
4070: PPUSH
4071: CALL 2774 0 1
4075: GO 4051
4077: POP
4078: POP
// end ;
4079: LD_VAR 0 1
4083: RET
// function CountClassMembers ; var Mode ; begin
4084: LD_INT 0
4086: PPUSH
4087: PPUSH
// if No_Mechs then
4088: LD_EXP 17
4092: IFFALSE 4104
// Mode := 2 else
4094: LD_ADDR_VAR 0 2
4098: PUSH
4099: LD_INT 2
4101: ST_TO_ADDR
4102: GO 4112
// Mode := 1 ;
4104: LD_ADDR_VAR 0 2
4108: PUSH
4109: LD_INT 1
4111: ST_TO_ADDR
// neng := number_of_people ;
4112: LD_ADDR_LOC 5
4116: PUSH
4117: LD_EXP 21
4121: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4122: LD_ADDR_LOC 8
4126: PUSH
4127: LD_LOC 5
4131: PUSH
4132: LD_INT 4
4134: PUSH
4135: LD_INT 3
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_VAR 0 2
4146: ARRAY
4147: DIV
4148: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4149: LD_LOC 8
4153: PUSH
4154: LD_EXP 20
4158: LESS
4159: IFFALSE 4171
// nsol := number_of_breastworks ;
4161: LD_ADDR_LOC 8
4165: PUSH
4166: LD_EXP 20
4170: ST_TO_ADDR
// neng := neng - nsol ;
4171: LD_ADDR_LOC 5
4175: PUSH
4176: LD_LOC 5
4180: PUSH
4181: LD_LOC 8
4185: MINUS
4186: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4187: LD_ADDR_LOC 6
4191: PUSH
4192: LD_LOC 5
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: LD_INT 2
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_VAR 0 2
4211: ARRAY
4212: DIV
4213: ST_TO_ADDR
// if ( nsci < 1 ) then
4214: LD_LOC 6
4218: PUSH
4219: LD_INT 1
4221: LESS
4222: IFFALSE 4232
// nsci := 1 ;
4224: LD_ADDR_LOC 6
4228: PUSH
4229: LD_INT 1
4231: ST_TO_ADDR
// neng := neng - nsci ;
4232: LD_ADDR_LOC 5
4236: PUSH
4237: LD_LOC 5
4241: PUSH
4242: LD_LOC 6
4246: MINUS
4247: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4248: LD_ADDR_LOC 7
4252: PUSH
4253: LD_LOC 5
4257: PUSH
4258: LD_INT 2
4260: DIV
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: LD_VAR 0 2
4273: ARRAY
4274: ST_TO_ADDR
// neng := neng - nmech ;
4275: LD_ADDR_LOC 5
4279: PUSH
4280: LD_LOC 5
4284: PUSH
4285: LD_LOC 7
4289: MINUS
4290: ST_TO_ADDR
// if ( neng < 1 ) then
4291: LD_LOC 5
4295: PUSH
4296: LD_INT 1
4298: LESS
4299: IFFALSE 4309
// neng := 1 ;
4301: LD_ADDR_LOC 5
4305: PUSH
4306: LD_INT 1
4308: ST_TO_ADDR
// end ;
4309: LD_VAR 0 1
4313: RET
// starting begin disable ( 98 ) ;
4314: LD_INT 98
4316: DISABLE_MARKED
// disable ( 99 ) ;
4317: LD_INT 99
4319: DISABLE_MARKED
// disable ( 100 ) ;
4320: LD_INT 100
4322: DISABLE_MARKED
// disable ( 4 ) ;
4323: LD_INT 4
4325: DISABLE_MARKED
// disable ( 400 ) ;
4326: LD_INT 400
4328: DISABLE_MARKED
// disable ( 401 ) ;
4329: LD_INT 401
4331: DISABLE_MARKED
// mp_selectmsg := true ;
4332: LD_ADDR_OWVAR 13
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4340: CALL 68 0 0
// init_map ;
4344: CALL 1421 0 0
// init_respawning ;
4348: CALL 18273 0 0
// set_shared_visions_and_alliances ;
4352: CALL 1950 0 0
// ResetFog ;
4356: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4360: LD_OWVAR 2
4364: PPUSH
4365: CALL_OW 520
// AnimateTrees ( true ) ;
4369: LD_INT 1
4371: PPUSH
4372: CALL_OW 573
// prepare_sides ;
4376: CALL 4015 0 0
// Init_Win_Condition ;
4380: CALL 8517 0 0
// if game_type = 3 then
4384: LD_EXP 18
4388: PUSH
4389: LD_INT 3
4391: EQUAL
4392: IFFALSE 4402
// begin InitPoints ( ) ;
4394: CALL 7520 0 0
// init_kings_counting ;
4398: CALL 9812 0 0
// end ; InitApeman ;
4402: CALL 5850 0 0
// ShowTimer ;
4406: CALL 7308 0 0
// music_nat := Side_Nations [ your_side ] ;
4410: LD_ADDR_OWVAR 71
4414: PUSH
4415: LD_EXP 38
4419: PUSH
4420: LD_OWVAR 2
4424: ARRAY
4425: ST_TO_ADDR
// if IAmSpec then
4426: CALL_OW 531
4430: IFFALSE 4466
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4432: LD_INT 0
4434: PPUSH
4435: LD_INT 0
4437: PPUSH
4438: LD_OWVAR 2
4442: PPUSH
4443: LD_INT 32767
4445: NEG
4446: PPUSH
4447: CALL_OW 330
// CenterNowOnXY ( 119 , 79 ) ;
4451: LD_INT 119
4453: PPUSH
4454: LD_INT 79
4456: PPUSH
4457: CALL_OW 86
// enable ( 400 ) ;
4461: LD_INT 400
4463: ENABLE_MARKED
// end else
4464: GO 4512
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4466: LD_EXP 42
4470: PUSH
4471: LD_EXP 37
4475: PUSH
4476: LD_OWVAR 2
4480: ARRAY
4481: ARRAY
4482: PUSH
4483: LD_INT 1
4485: ARRAY
4486: PPUSH
4487: LD_EXP 42
4491: PUSH
4492: LD_EXP 37
4496: PUSH
4497: LD_OWVAR 2
4501: ARRAY
4502: ARRAY
4503: PUSH
4504: LD_INT 2
4506: ARRAY
4507: PPUSH
4508: CALL_OW 86
// end ; end ; end_of_file
4512: END
// every 0 0$25 + 0 0$1.0 do
4513: GO 4515
4515: DISABLE
// begin if GetResourceArea ( ZaklLHOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4516: LD_INT 16
4518: PPUSH
4519: LD_INT 1
4521: PPUSH
4522: CALL_OW 287
4526: PUSH
4527: LD_INT 200
4529: PUSH
4530: LD_EXP 26
4534: MINUS
4535: PUSH
4536: LD_INT 50
4538: DIVREAL
4539: PUSH
4540: LD_INT 5
4542: MUL
4543: LESS
4544: IFFALSE 4567
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklLHOut , true ) ;
4546: LD_INT 3
4548: PPUSH
4549: LD_INT 4
4551: PPUSH
4552: CALL_OW 12
4556: PPUSH
4557: LD_INT 16
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: CALL_OW 55
// if GetResourceArea ( ZaklPHOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4567: LD_INT 17
4569: PPUSH
4570: LD_INT 1
4572: PPUSH
4573: CALL_OW 287
4577: PUSH
4578: LD_INT 200
4580: PUSH
4581: LD_EXP 26
4585: MINUS
4586: PUSH
4587: LD_INT 50
4589: DIVREAL
4590: PUSH
4591: LD_INT 5
4593: MUL
4594: LESS
4595: IFFALSE 4618
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklPHOut , true ) ;
4597: LD_INT 3
4599: PPUSH
4600: LD_INT 4
4602: PPUSH
4603: CALL_OW 12
4607: PPUSH
4608: LD_INT 17
4610: PPUSH
4611: LD_INT 1
4613: PPUSH
4614: CALL_OW 55
// if GetResourceArea ( ZaklLDOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4618: LD_INT 18
4620: PPUSH
4621: LD_INT 1
4623: PPUSH
4624: CALL_OW 287
4628: PUSH
4629: LD_INT 200
4631: PUSH
4632: LD_EXP 26
4636: MINUS
4637: PUSH
4638: LD_INT 50
4640: DIVREAL
4641: PUSH
4642: LD_INT 5
4644: MUL
4645: LESS
4646: IFFALSE 4669
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklLDOut , true ) ;
4648: LD_INT 3
4650: PPUSH
4651: LD_INT 4
4653: PPUSH
4654: CALL_OW 12
4658: PPUSH
4659: LD_INT 18
4661: PPUSH
4662: LD_INT 1
4664: PPUSH
4665: CALL_OW 55
// if GetResourceArea ( ZaklPDOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4669: LD_INT 19
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: CALL_OW 287
4679: PUSH
4680: LD_INT 200
4682: PUSH
4683: LD_EXP 26
4687: MINUS
4688: PUSH
4689: LD_INT 50
4691: DIVREAL
4692: PUSH
4693: LD_INT 5
4695: MUL
4696: LESS
4697: IFFALSE 4720
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklPDOut , true ) ;
4699: LD_INT 3
4701: PPUSH
4702: LD_INT 4
4704: PPUSH
4705: CALL_OW 12
4709: PPUSH
4710: LD_INT 19
4712: PPUSH
4713: LD_INT 1
4715: PPUSH
4716: CALL_OW 55
// if GetResourceArea ( Map_center , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4720: LD_INT 15
4722: PPUSH
4723: LD_INT 1
4725: PPUSH
4726: CALL_OW 287
4730: PUSH
4731: LD_INT 200
4733: PUSH
4734: LD_EXP 26
4738: MINUS
4739: PUSH
4740: LD_INT 25
4742: DIVREAL
4743: PUSH
4744: LD_INT 5
4746: MUL
4747: LESS
4748: IFFALSE 4763
// CreateCratesArea ( 5 , Map_center , true ) ;
4750: LD_INT 5
4752: PPUSH
4753: LD_INT 15
4755: PPUSH
4756: LD_INT 1
4758: PPUSH
4759: CALL_OW 55
// enable ;
4763: ENABLE
// end ;
4764: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4765: GO 4767
4767: DISABLE
4768: LD_INT 0
4770: PPUSH
4771: PPUSH
// begin case tick of 1 .. 1 1$0 :
4772: LD_OWVAR 1
4776: PUSH
4777: LD_INT 1
4779: DOUBLE
4780: GREATEREQUAL
4781: IFFALSE 4789
4783: LD_INT 2100
4785: DOUBLE
4786: LESSEQUAL
4787: IFTRUE 4791
4789: GO 4819
4791: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4792: LD_EXP 26
4796: PUSH
4797: LD_INT 100
4799: DIVREAL
4800: PUSH
4801: LD_INT 525
4803: PPUSH
4804: LD_INT 1050
4806: PPUSH
4807: CALL_OW 12
4811: MUL
4812: PPUSH
4813: CALL_OW 67
4817: GO 5121
4819: LD_INT 2100
4821: PUSH
4822: LD_INT 1
4824: PLUS
4825: DOUBLE
4826: GREATEREQUAL
4827: IFFALSE 4835
4829: LD_INT 10500
4831: DOUBLE
4832: LESSEQUAL
4833: IFTRUE 4837
4835: GO 4865
4837: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4838: LD_EXP 26
4842: PUSH
4843: LD_INT 100
4845: DIVREAL
4846: PUSH
4847: LD_INT 1050
4849: PPUSH
4850: LD_INT 1750
4852: PPUSH
4853: CALL_OW 12
4857: MUL
4858: PPUSH
4859: CALL_OW 67
4863: GO 5121
4865: LD_INT 10500
4867: PUSH
4868: LD_INT 1
4870: PLUS
4871: DOUBLE
4872: GREATEREQUAL
4873: IFFALSE 4881
4875: LD_INT 21000
4877: DOUBLE
4878: LESSEQUAL
4879: IFTRUE 4883
4881: GO 4911
4883: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4884: LD_EXP 26
4888: PUSH
4889: LD_INT 100
4891: DIVREAL
4892: PUSH
4893: LD_INT 1750
4895: PPUSH
4896: LD_INT 2100
4898: PPUSH
4899: CALL_OW 12
4903: MUL
4904: PPUSH
4905: CALL_OW 67
4909: GO 5121
4911: LD_INT 21000
4913: PUSH
4914: LD_INT 1
4916: PLUS
4917: DOUBLE
4918: GREATEREQUAL
4919: IFFALSE 4927
4921: LD_INT 42000
4923: DOUBLE
4924: LESSEQUAL
4925: IFTRUE 4929
4927: GO 4957
4929: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4930: LD_EXP 26
4934: PUSH
4935: LD_INT 100
4937: DIVREAL
4938: PUSH
4939: LD_INT 2100
4941: PPUSH
4942: LD_INT 2275
4944: PPUSH
4945: CALL_OW 12
4949: MUL
4950: PPUSH
4951: CALL_OW 67
4955: GO 5121
4957: LD_INT 42000
4959: PUSH
4960: LD_INT 1
4962: PLUS
4963: DOUBLE
4964: GREATEREQUAL
4965: IFFALSE 4973
4967: LD_INT 63000
4969: DOUBLE
4970: LESSEQUAL
4971: IFTRUE 4975
4973: GO 5003
4975: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4976: LD_EXP 26
4980: PUSH
4981: LD_INT 100
4983: DIVREAL
4984: PUSH
4985: LD_INT 2275
4987: PPUSH
4988: LD_INT 2450
4990: PPUSH
4991: CALL_OW 12
4995: MUL
4996: PPUSH
4997: CALL_OW 67
5001: GO 5121
5003: LD_INT 63000
5005: PUSH
5006: LD_INT 1
5008: PLUS
5009: DOUBLE
5010: GREATEREQUAL
5011: IFFALSE 5019
5013: LD_INT 105000
5015: DOUBLE
5016: LESSEQUAL
5017: IFTRUE 5021
5019: GO 5049
5021: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5022: LD_EXP 26
5026: PUSH
5027: LD_INT 100
5029: DIVREAL
5030: PUSH
5031: LD_INT 2450
5033: PPUSH
5034: LD_INT 2800
5036: PPUSH
5037: CALL_OW 12
5041: MUL
5042: PPUSH
5043: CALL_OW 67
5047: GO 5121
5049: LD_INT 105000
5051: PUSH
5052: LD_INT 1
5054: PLUS
5055: DOUBLE
5056: GREATEREQUAL
5057: IFFALSE 5065
5059: LD_INT 630000
5061: DOUBLE
5062: LESSEQUAL
5063: IFTRUE 5067
5065: GO 5095
5067: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5068: LD_EXP 26
5072: PUSH
5073: LD_INT 100
5075: DIVREAL
5076: PUSH
5077: LD_INT 2800
5079: PPUSH
5080: LD_INT 3500
5082: PPUSH
5083: CALL_OW 12
5087: MUL
5088: PPUSH
5089: CALL_OW 67
5093: GO 5121
5095: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5096: LD_EXP 26
5100: PUSH
5101: LD_INT 100
5103: DIVREAL
5104: PUSH
5105: LD_INT 3500
5107: PPUSH
5108: LD_INT 3850
5110: PPUSH
5111: CALL_OW 12
5115: MUL
5116: PPUSH
5117: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5121: LD_ADDR_VAR 0 2
5125: PUSH
5126: LD_INT 3
5128: PPUSH
5129: LD_INT 5
5131: PPUSH
5132: CALL_OW 12
5136: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5137: LD_ADDR_VAR 0 1
5141: PUSH
5142: LD_EXP 37
5146: PUSH
5147: LD_INT 0
5149: PUSH
5150: EMPTY
5151: LIST
5152: DIFF
5153: PUSH
5154: FOR_IN
5155: IFFALSE 5204
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5157: LD_VAR 0 2
5161: PPUSH
5162: LD_EXP 42
5166: PUSH
5167: LD_VAR 0 1
5171: ARRAY
5172: PUSH
5173: LD_INT 1
5175: ARRAY
5176: PPUSH
5177: LD_EXP 42
5181: PUSH
5182: LD_VAR 0 1
5186: ARRAY
5187: PUSH
5188: LD_INT 2
5190: ARRAY
5191: PPUSH
5192: LD_INT 20
5194: PPUSH
5195: LD_INT 1
5197: PPUSH
5198: CALL_OW 56
5202: GO 5154
5204: POP
5205: POP
// enable ;
5206: ENABLE
// end ; end_of_file
5207: PPOPN 2
5209: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5210: LD_VAR 0 1
5214: PPUSH
5215: CALL_OW 266
5219: PUSH
5220: LD_INT 0
5222: PUSH
5223: LD_INT 1
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: IN
5230: IFFALSE 5255
// SetBName ( b , @ & GetSide ( b ) ) ;
5232: LD_VAR 0 1
5236: PPUSH
5237: LD_STRING @
5239: PUSH
5240: LD_VAR 0 1
5244: PPUSH
5245: CALL_OW 255
5249: STR
5250: PPUSH
5251: CALL_OW 500
// end ;
5255: PPOPN 2
5257: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5258: LD_VAR 0 1
5262: PPUSH
5263: CALL_OW 266
5267: PUSH
5268: LD_INT 0
5270: PUSH
5271: LD_INT 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: IN
5278: IFFALSE 5303
// SetBName ( b , @ & GetSide ( b ) ) ;
5280: LD_VAR 0 1
5284: PPUSH
5285: LD_STRING @
5287: PUSH
5288: LD_VAR 0 1
5292: PPUSH
5293: CALL_OW 255
5297: STR
5298: PPUSH
5299: CALL_OW 500
// end ;
5303: PPOPN 3
5305: END
// on VehicleConstructed ( veh , fac ) do var side ;
5306: LD_INT 0
5308: PPUSH
// begin if GetControl ( veh ) = control_apeman then
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 263
5318: PUSH
5319: LD_INT 5
5321: EQUAL
5322: IFFALSE 5464
// begin side := GetSide ( veh ) ;
5324: LD_ADDR_VAR 0 3
5328: PUSH
5329: LD_VAR 0 1
5333: PPUSH
5334: CALL_OW 255
5338: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
5339: LD_ADDR_EXP 53
5343: PUSH
5344: LD_EXP 53
5348: PPUSH
5349: LD_VAR 0 3
5353: PPUSH
5354: LD_EXP 53
5358: PUSH
5359: LD_VAR 0 3
5363: ARRAY
5364: PPUSH
5365: LD_INT 52
5367: PUSH
5368: EMPTY
5369: LIST
5370: PPUSH
5371: CALL_OW 72
5375: PUSH
5376: LD_INT 22
5378: PUSH
5379: LD_VAR 0 3
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: LD_INT 2
5390: PUSH
5391: LD_INT 33
5393: PUSH
5394: LD_INT 5
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PUSH
5401: LD_INT 25
5403: PUSH
5404: LD_INT 12
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PUSH
5411: LD_INT 25
5413: PUSH
5414: LD_INT 15
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_INT 25
5423: PUSH
5424: LD_INT 16
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: LD_INT 25
5433: PUSH
5434: LD_INT 17
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PPUSH
5453: CALL_OW 69
5457: UNION
5458: PPUSH
5459: CALL_OW 1
5463: ST_TO_ADDR
// end ; end ;
5464: PPOPN 3
5466: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
5467: LD_INT 0
5469: PPUSH
5470: PPUSH
5471: PPUSH
5472: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
5473: LD_VAR 0 1
5477: PPUSH
5478: CALL_OW 257
5482: PUSH
5483: LD_INT 12
5485: PUSH
5486: LD_INT 15
5488: PUSH
5489: LD_INT 17
5491: PUSH
5492: LD_INT 16
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: IN
5501: PUSH
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 263
5511: PUSH
5512: LD_INT 5
5514: EQUAL
5515: OR
5516: IFFALSE 5527
// ApeKilled ( j ) ;
5518: LD_VAR 0 1
5522: PPUSH
5523: CALL 6531 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
5527: LD_VAR 0 1
5531: PPUSH
5532: CALL_OW 266
5536: PUSH
5537: LD_INT 0
5539: PUSH
5540: LD_INT 1
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: IN
5547: IFFALSE 5629
// begin pos := Side_Positions [ GetSide ( j ) ] ;
5549: LD_ADDR_VAR 0 4
5553: PUSH
5554: LD_EXP 37
5558: PUSH
5559: LD_VAR 0 1
5563: PPUSH
5564: CALL_OW 255
5568: ARRAY
5569: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
5570: LD_ADDR_VAR 0 2
5574: PUSH
5575: LD_EXP 42
5579: PUSH
5580: LD_VAR 0 4
5584: ARRAY
5585: PUSH
5586: LD_INT 1
5588: ARRAY
5589: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
5590: LD_ADDR_VAR 0 3
5594: PUSH
5595: LD_EXP 42
5599: PUSH
5600: LD_VAR 0 4
5604: ARRAY
5605: PUSH
5606: LD_INT 2
5608: ARRAY
5609: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
5610: LD_VAR 0 2
5614: PPUSH
5615: LD_VAR 0 3
5619: PPUSH
5620: CALL_OW 420
5624: PPUSH
5625: CALL_OW 419
// end ; end ;
5629: PPOPN 5
5631: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
5632: LD_VAR 0 1
5636: PPUSH
5637: LD_VAR 0 2
5641: PPUSH
5642: LD_VAR 0 3
5646: PPUSH
5647: LD_OWVAR 2
5651: PPUSH
5652: CALL 8278 0 4
5656: PPOPN 3
5658: END
// every 20 20$00 trigger apemanNumber do
5659: LD_EXP 50
5663: IFFALSE 5696
5665: GO 5667
5667: DISABLE
// begin enable ;
5668: ENABLE
// if apeLevel >= 8 then
5669: LD_EXP 55
5673: PUSH
5674: LD_INT 8
5676: GREATEREQUAL
5677: IFFALSE 5682
// disable else
5679: DISABLE
5680: GO 5696
// apeLevel := apeLevel + 1 ;
5682: LD_ADDR_EXP 55
5686: PUSH
5687: LD_EXP 55
5691: PUSH
5692: LD_INT 1
5694: PLUS
5695: ST_TO_ADDR
// end ;
5696: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5697: LD_EXP 50
5701: PUSH
5702: LD_EXP 51
5706: LESS
5707: IFFALSE 5847
5709: GO 5711
5711: DISABLE
5712: LD_INT 0
5714: PPUSH
5715: PPUSH
5716: PPUSH
5717: PPUSH
// begin enable ;
5718: ENABLE
// for i := 1 to apemanPos do
5719: LD_ADDR_VAR 0 1
5723: PUSH
5724: DOUBLE
5725: LD_INT 1
5727: DEC
5728: ST_TO_ADDR
5729: LD_EXP 53
5733: PUSH
5734: FOR_TO
5735: IFFALSE 5845
// begin if apemanPlayerCount [ i ] then
5737: LD_EXP 54
5741: PUSH
5742: LD_VAR 0 1
5746: ARRAY
5747: IFFALSE 5843
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5749: LD_EXP 54
5753: PUSH
5754: LD_VAR 0 1
5758: ARRAY
5759: PUSH
5760: LD_EXP 53
5764: PUSH
5765: LD_VAR 0 1
5769: ARRAY
5770: GREATER
5771: IFFALSE 5843
// begin ape := PrepareApeman ;
5773: LD_ADDR_VAR 0 2
5777: PUSH
5778: CALL 6350 0 0
5782: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_EXP 56
5792: PUSH
5793: LD_VAR 0 1
5797: ARRAY
5798: PPUSH
5799: LD_INT 0
5801: PPUSH
5802: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5806: LD_ADDR_EXP 53
5810: PUSH
5811: LD_EXP 53
5815: PPUSH
5816: LD_VAR 0 1
5820: PPUSH
5821: LD_EXP 53
5825: PUSH
5826: LD_VAR 0 1
5830: ARRAY
5831: PUSH
5832: LD_VAR 0 2
5836: UNION
5837: PPUSH
5838: CALL_OW 1
5842: ST_TO_ADDR
// end ; end ; end ;
5843: GO 5734
5845: POP
5846: POP
// end ;
5847: PPOPN 4
5849: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5850: LD_INT 0
5852: PPUSH
5853: PPUSH
5854: PPUSH
5855: PPUSH
5856: PPUSH
5857: PPUSH
5858: PPUSH
// playersAmount := 0 ;
5859: LD_ADDR_VAR 0 3
5863: PUSH
5864: LD_INT 0
5866: ST_TO_ADDR
// _apeAreas := [ OpiceSZ , OpiceSV , OpiceJZ , OpiceJV ] ;
5867: LD_ADDR_VAR 0 7
5871: PUSH
5872: LD_INT 11
5874: PUSH
5875: LD_INT 12
5877: PUSH
5878: LD_INT 14
5880: PUSH
5881: LD_INT 13
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5890: LD_ADDR_EXP 56
5894: PUSH
5895: LD_INT 0
5897: PUSH
5898: LD_INT 0
5900: PUSH
5901: LD_INT 0
5903: PUSH
5904: LD_INT 0
5906: PUSH
5907: LD_INT 0
5909: PUSH
5910: LD_INT 0
5912: PUSH
5913: LD_INT 0
5915: PUSH
5916: LD_INT 0
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: ST_TO_ADDR
// for j = 1 to Side_Positions do
5929: LD_ADDR_VAR 0 4
5933: PUSH
5934: DOUBLE
5935: LD_INT 1
5937: DEC
5938: ST_TO_ADDR
5939: LD_EXP 37
5943: PUSH
5944: FOR_TO
5945: IFFALSE 6012
// if Side_Positions [ j ] then
5947: LD_EXP 37
5951: PUSH
5952: LD_VAR 0 4
5956: ARRAY
5957: IFFALSE 6010
// begin playersAmount := playersAmount + 1 ;
5959: LD_ADDR_VAR 0 3
5963: PUSH
5964: LD_VAR 0 3
5968: PUSH
5969: LD_INT 1
5971: PLUS
5972: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5973: LD_ADDR_EXP 56
5977: PUSH
5978: LD_EXP 56
5982: PPUSH
5983: LD_VAR 0 4
5987: PPUSH
5988: LD_VAR 0 7
5992: PUSH
5993: LD_EXP 37
5997: PUSH
5998: LD_VAR 0 4
6002: ARRAY
6003: ARRAY
6004: PPUSH
6005: CALL_OW 1
6009: ST_TO_ADDR
// end ;
6010: GO 5944
6012: POP
6013: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6014: LD_ADDR_EXP 52
6018: PUSH
6019: LD_INT 3
6021: PUSH
6022: LD_EXP 22
6026: MUL
6027: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6028: LD_ADDR_EXP 50
6032: PUSH
6033: LD_VAR 0 3
6037: PUSH
6038: LD_EXP 52
6042: MUL
6043: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6044: LD_ADDR_EXP 51
6048: PUSH
6049: LD_EXP 50
6053: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6054: LD_ADDR_EXP 53
6058: PUSH
6059: LD_INT 0
6061: PUSH
6062: LD_INT 0
6064: PUSH
6065: LD_INT 0
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: LD_INT 0
6079: PUSH
6080: LD_INT 0
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6093: LD_ADDR_EXP 54
6097: PUSH
6098: LD_INT 0
6100: PUSH
6101: LD_INT 0
6103: PUSH
6104: LD_INT 0
6106: PUSH
6107: LD_INT 0
6109: PUSH
6110: LD_INT 0
6112: PUSH
6113: LD_INT 0
6115: PUSH
6116: LD_INT 0
6118: PUSH
6119: LD_INT 0
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: ST_TO_ADDR
// apeLevel := 1 ;
6132: LD_ADDR_EXP 55
6136: PUSH
6137: LD_INT 1
6139: ST_TO_ADDR
// if not apemanNumber then
6140: LD_EXP 50
6144: NOT
6145: IFFALSE 6149
// exit ;
6147: GO 6345
// for i := 1 to apemanPerPlayer do
6149: LD_ADDR_VAR 0 2
6153: PUSH
6154: DOUBLE
6155: LD_INT 1
6157: DEC
6158: ST_TO_ADDR
6159: LD_EXP 52
6163: PUSH
6164: FOR_TO
6165: IFFALSE 6343
// begin for j := 1 to Side_Positions do
6167: LD_ADDR_VAR 0 4
6171: PUSH
6172: DOUBLE
6173: LD_INT 1
6175: DEC
6176: ST_TO_ADDR
6177: LD_EXP 37
6181: PUSH
6182: FOR_TO
6183: IFFALSE 6339
// if Side_Positions [ j ] then
6185: LD_EXP 37
6189: PUSH
6190: LD_VAR 0 4
6194: ARRAY
6195: IFFALSE 6337
// begin pos := Side_Positions [ j ] ;
6197: LD_ADDR_VAR 0 6
6201: PUSH
6202: LD_EXP 37
6206: PUSH
6207: LD_VAR 0 4
6211: ARRAY
6212: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6213: LD_ADDR_EXP 54
6217: PUSH
6218: LD_EXP 54
6222: PPUSH
6223: LD_VAR 0 4
6227: PPUSH
6228: LD_EXP 54
6232: PUSH
6233: LD_VAR 0 4
6237: ARRAY
6238: PUSH
6239: LD_INT 1
6241: PLUS
6242: PPUSH
6243: CALL_OW 1
6247: ST_TO_ADDR
// ape := PrepareApeman ;
6248: LD_ADDR_VAR 0 5
6252: PUSH
6253: CALL 6350 0 0
6257: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6258: LD_ADDR_EXP 53
6262: PUSH
6263: LD_EXP 53
6267: PPUSH
6268: LD_VAR 0 4
6272: PPUSH
6273: LD_EXP 53
6277: PUSH
6278: LD_VAR 0 4
6282: ARRAY
6283: PPUSH
6284: LD_EXP 53
6288: PUSH
6289: LD_VAR 0 4
6293: ARRAY
6294: PUSH
6295: LD_INT 1
6297: PLUS
6298: PPUSH
6299: LD_VAR 0 5
6303: PPUSH
6304: CALL_OW 1
6308: PPUSH
6309: CALL_OW 1
6313: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6314: LD_VAR 0 5
6318: PPUSH
6319: LD_EXP 56
6323: PUSH
6324: LD_VAR 0 4
6328: ARRAY
6329: PPUSH
6330: LD_INT 0
6332: PPUSH
6333: CALL_OW 49
// end ;
6337: GO 6182
6339: POP
6340: POP
// end ;
6341: GO 6164
6343: POP
6344: POP
// end ;
6345: LD_VAR 0 1
6349: RET
// export function PrepareApeman ; var bonus ; begin
6350: LD_INT 0
6352: PPUSH
6353: PPUSH
// uc_side := 0 ;
6354: LD_ADDR_OWVAR 20
6358: PUSH
6359: LD_INT 0
6361: ST_TO_ADDR
// uc_nation := 0 ;
6362: LD_ADDR_OWVAR 21
6366: PUSH
6367: LD_INT 0
6369: ST_TO_ADDR
// InitHc ;
6370: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6374: LD_ADDR_VAR 0 2
6378: PUSH
6379: LD_INT 1
6381: NEG
6382: PUSH
6383: LD_INT 0
6385: PUSH
6386: LD_INT 1
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: PUSH
6394: LD_OWVAR 1
6398: PUSH
6399: LD_INT 3
6401: MOD
6402: PUSH
6403: LD_INT 1
6405: PLUS
6406: ARRAY
6407: ST_TO_ADDR
// hc_class := class_apeman ;
6408: LD_ADDR_OWVAR 28
6412: PUSH
6413: LD_INT 12
6415: ST_TO_ADDR
// hc_gallery :=  ;
6416: LD_ADDR_OWVAR 33
6420: PUSH
6421: LD_STRING 
6423: ST_TO_ADDR
// hc_name :=  ;
6424: LD_ADDR_OWVAR 26
6428: PUSH
6429: LD_STRING 
6431: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6432: LD_ADDR_OWVAR 31
6436: PUSH
6437: LD_EXP 55
6441: PUSH
6442: LD_VAR 0 2
6446: PLUS
6447: PUSH
6448: LD_EXP 55
6452: PUSH
6453: LD_VAR 0 2
6457: PLUS
6458: PUSH
6459: LD_EXP 55
6463: PUSH
6464: LD_VAR 0 2
6468: PLUS
6469: PUSH
6470: LD_EXP 55
6474: PUSH
6475: LD_VAR 0 2
6479: PLUS
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6487: LD_ADDR_OWVAR 35
6491: PUSH
6492: LD_INT 10
6494: PUSH
6495: LD_VAR 0 2
6499: MUL
6500: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6501: LD_ADDR_OWVAR 29
6505: PUSH
6506: LD_INT 12
6508: PUSH
6509: LD_INT 10
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: ST_TO_ADDR
// result := CreateHuman ;
6516: LD_ADDR_VAR 0 1
6520: PUSH
6521: CALL_OW 44
6525: ST_TO_ADDR
// end ;
6526: LD_VAR 0 1
6530: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6531: LD_INT 0
6533: PPUSH
6534: PPUSH
6535: PPUSH
// if not ape then
6536: LD_VAR 0 1
6540: NOT
6541: IFFALSE 6545
// exit ;
6543: GO 6670
// side := GetSide ( ape ) ;
6545: LD_ADDR_VAR 0 3
6549: PUSH
6550: LD_VAR 0 1
6554: PPUSH
6555: CALL_OW 255
6559: ST_TO_ADDR
// if not side then
6560: LD_VAR 0 3
6564: NOT
6565: IFFALSE 6619
// begin for i = 1 to apemanPos do
6567: LD_ADDR_VAR 0 4
6571: PUSH
6572: DOUBLE
6573: LD_INT 1
6575: DEC
6576: ST_TO_ADDR
6577: LD_EXP 53
6581: PUSH
6582: FOR_TO
6583: IFFALSE 6617
// if ape in apemanPos [ i ] then
6585: LD_VAR 0 1
6589: PUSH
6590: LD_EXP 53
6594: PUSH
6595: LD_VAR 0 4
6599: ARRAY
6600: IN
6601: IFFALSE 6615
// begin side := i ;
6603: LD_ADDR_VAR 0 3
6607: PUSH
6608: LD_VAR 0 4
6612: ST_TO_ADDR
// break ;
6613: GO 6617
// end ;
6615: GO 6582
6617: POP
6618: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6619: LD_ADDR_EXP 53
6623: PUSH
6624: LD_EXP 53
6628: PPUSH
6629: LD_VAR 0 3
6633: PPUSH
6634: LD_EXP 53
6638: PUSH
6639: LD_VAR 0 3
6643: ARRAY
6644: PUSH
6645: LD_VAR 0 1
6649: DIFF
6650: PPUSH
6651: CALL_OW 1
6655: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6656: LD_ADDR_EXP 50
6660: PUSH
6661: LD_EXP 50
6665: PUSH
6666: LD_INT 1
6668: MINUS
6669: ST_TO_ADDR
// end ; end_of_file
6670: LD_VAR 0 2
6674: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6675: LD_INT 0
6677: PPUSH
6678: PPUSH
// for un in battle_flags_id do
6679: LD_ADDR_VAR 0 2
6683: PUSH
6684: LD_EXP 44
6688: PUSH
6689: FOR_IN
6690: IFFALSE 6765
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6692: LD_VAR 0 2
6696: PPUSH
6697: LD_INT 1
6699: PUSH
6700: LD_LOC 9
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PUSH
6709: LD_INT 2
6711: PUSH
6712: LD_LOC 9
6716: PUSH
6717: LD_INT 2
6719: DIV
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 3
6727: PUSH
6728: LD_LOC 9
6732: PUSH
6733: LD_INT 5
6735: DIV
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 20
6743: PUSH
6744: LD_LOC 9
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: PPUSH
6759: CALL_OW 423
6763: GO 6689
6765: POP
6766: POP
// end ;
6767: LD_VAR 0 1
6771: RET
// every 0 0$0.1 do var un ;
6772: GO 6774
6774: DISABLE
6775: LD_INT 0
6777: PPUSH
// begin if not def_morale_flags then
6778: LD_EXP 9
6782: NOT
6783: IFFALSE 6787
// exit ;
6785: GO 6864
// if not morale_decreasing_time then
6787: LD_EXP 27
6791: NOT
6792: IFFALSE 6796
// exit ;
6794: GO 6864
// strength = 100 ;
6796: LD_ADDR_LOC 9
6800: PUSH
6801: LD_INT 100
6803: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6804: LD_EXP 27
6808: PPUSH
6809: CALL_OW 67
// strength := strength - 1 ;
6813: LD_ADDR_LOC 9
6817: PUSH
6818: LD_LOC 9
6822: PUSH
6823: LD_INT 1
6825: MINUS
6826: ST_TO_ADDR
// Update_Flags ;
6827: CALL 6675 0 0
// until not strength ;
6831: LD_LOC 9
6835: NOT
6836: IFFALSE 6804
// for un in battle_flags_id do
6838: LD_ADDR_VAR 0 1
6842: PUSH
6843: LD_EXP 44
6847: PUSH
6848: FOR_IN
6849: IFFALSE 6862
// KillBattleFlag ( un ) ;
6851: LD_VAR 0 1
6855: PPUSH
6856: CALL_OW 419
6860: GO 6848
6862: POP
6863: POP
// end ; end_of_file
6864: PPOPN 1
6866: END
// export score ; every 0 0$1 trigger Game_Type = 3 do
6867: LD_EXP 18
6871: PUSH
6872: LD_INT 3
6874: EQUAL
6875: IFFALSE 6890
6877: GO 6879
6879: DISABLE
// begin SetAreaMapShow ( KopecStred , true ) ;
6880: LD_INT 2
6882: PPUSH
6883: LD_INT 1
6885: PPUSH
6886: CALL_OW 424
// end ;
6890: END
// every 0 0$1 trigger Game_Type = 3 do var un , filter , output , side , new_score ;
6891: LD_EXP 18
6895: PUSH
6896: LD_INT 3
6898: EQUAL
6899: IFFALSE 7184
6901: GO 6903
6903: DISABLE
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
// begin filter := FilterUnitsInArea ( KopecStred , [ [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ready ] ] ) ;
6911: LD_ADDR_VAR 0 2
6915: PUSH
6916: LD_INT 2
6918: PPUSH
6919: LD_INT 2
6921: PUSH
6922: LD_INT 30
6924: PUSH
6925: LD_INT 0
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 30
6934: PUSH
6935: LD_INT 1
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: LIST
6946: PUSH
6947: LD_INT 53
6949: PUSH
6950: EMPTY
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PPUSH
6957: CALL_OW 70
6961: ST_TO_ADDR
// if filter then
6962: LD_VAR 0 2
6966: IFFALSE 7040
// for un in filter do
6968: LD_ADDR_VAR 0 1
6972: PUSH
6973: LD_VAR 0 2
6977: PUSH
6978: FOR_IN
6979: IFFALSE 7038
// begin new_score := score [ GetSide ( un ) ] + 1 ;
6981: LD_ADDR_VAR 0 5
6985: PUSH
6986: LD_EXP 57
6990: PUSH
6991: LD_VAR 0 1
6995: PPUSH
6996: CALL_OW 255
7000: ARRAY
7001: PUSH
7002: LD_INT 1
7004: PLUS
7005: ST_TO_ADDR
// score := Replace ( score , GetSide ( un ) , new_score ) ;
7006: LD_ADDR_EXP 57
7010: PUSH
7011: LD_EXP 57
7015: PPUSH
7016: LD_VAR 0 1
7020: PPUSH
7021: CALL_OW 255
7025: PPUSH
7026: LD_VAR 0 5
7030: PPUSH
7031: CALL_OW 1
7035: ST_TO_ADDR
// end ;
7036: GO 6978
7038: POP
7039: POP
// if not def_public_score then
7040: LD_EXP 14
7044: NOT
7045: IFFALSE 7148
// begin output := [ ] ;
7047: LD_ADDR_VAR 0 3
7051: PUSH
7052: EMPTY
7053: ST_TO_ADDR
// for side = 1 to Side_Positions do
7054: LD_ADDR_VAR 0 4
7058: PUSH
7059: DOUBLE
7060: LD_INT 1
7062: DEC
7063: ST_TO_ADDR
7064: LD_EXP 37
7068: PUSH
7069: FOR_TO
7070: IFFALSE 7134
// if Side_Positions [ side ] then
7072: LD_EXP 37
7076: PUSH
7077: LD_VAR 0 4
7081: ARRAY
7082: IFFALSE 7132
// output := output ^ ( mp_sides_players_names [ side ] & :  & score [ side ] & /  & amount_score ) ;
7084: LD_ADDR_VAR 0 3
7088: PUSH
7089: LD_VAR 0 3
7093: PUSH
7094: LD_OWVAR 19
7098: PUSH
7099: LD_VAR 0 4
7103: ARRAY
7104: PUSH
7105: LD_STRING : 
7107: STR
7108: PUSH
7109: LD_EXP 57
7113: PUSH
7114: LD_VAR 0 4
7118: ARRAY
7119: STR
7120: PUSH
7121: LD_STRING / 
7123: STR
7124: PUSH
7125: LD_EXP 31
7129: STR
7130: ADD
7131: ST_TO_ADDR
7132: GO 7069
7134: POP
7135: POP
// ExtraStrings := output ;
7136: LD_ADDR_EXP 58
7140: PUSH
7141: LD_VAR 0 3
7145: ST_TO_ADDR
// end else
7146: GO 7183
// ExtraStrings := [ #KingoftheHill-Private , your_side , score [ Your_Side ] , amount_score ] ;
7148: LD_ADDR_EXP 58
7152: PUSH
7153: LD_STRING #KingoftheHill-Private
7155: PUSH
7156: LD_OWVAR 2
7160: PUSH
7161: LD_EXP 57
7165: PUSH
7166: LD_OWVAR 2
7170: ARRAY
7171: PUSH
7172: LD_EXP 31
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: ST_TO_ADDR
// enable ;
7183: ENABLE
// end ;
7184: PPOPN 5
7186: END
// every 0 0$1 marked 100 do var side ;
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
// begin for side = 1 to Side_Positions do
7193: LD_ADDR_VAR 0 1
7197: PUSH
7198: DOUBLE
7199: LD_INT 1
7201: DEC
7202: ST_TO_ADDR
7203: LD_EXP 37
7207: PUSH
7208: FOR_TO
7209: IFFALSE 7247
// if Side_Positions [ side ] then
7211: LD_EXP 37
7215: PUSH
7216: LD_VAR 0 1
7220: ARRAY
7221: IFFALSE 7245
// if score [ side ] >= amount_score then
7223: LD_EXP 57
7227: PUSH
7228: LD_VAR 0 1
7232: ARRAY
7233: PUSH
7234: LD_EXP 31
7238: GREATEREQUAL
7239: IFFALSE 7245
// show_that_you_are_winner_or_looser ;
7241: CALL 7253 0 0
7245: GO 7208
7247: POP
7248: POP
// enable ;
7249: ENABLE
// end ;
7250: PPOPN 1
7252: END
// function show_that_you_are_winner_or_looser ; var i ; begin
7253: LD_INT 0
7255: PPUSH
7256: PPUSH
// if score [ your_side ] >= amount_score then
7257: LD_EXP 57
7261: PUSH
7262: LD_OWVAR 2
7266: ARRAY
7267: PUSH
7268: LD_EXP 31
7272: GREATEREQUAL
7273: IFFALSE 7290
// begin wait ( 0 0$3 ) ;
7275: LD_INT 105
7277: PPUSH
7278: CALL_OW 67
// YouWinInMultiplayer ;
7282: CALL_OW 106
// exit ;
7286: GO 7303
// end else
7288: GO 7303
// begin wait ( 0 0$3 ) ;
7290: LD_INT 105
7292: PPUSH
7293: CALL_OW 67
// YouLostInMultiplayer ;
7297: CALL_OW 107
// exit ;
7301: GO 7303
// end ; end ; end_of_file
7303: LD_VAR 0 1
7307: RET
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
7308: LD_INT 0
7310: PPUSH
7311: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7312: LD_ADDR_VAR 0 2
7316: PUSH
7317: LD_STRING #Multi1x1-Time
7319: PUSH
7320: LD_OWVAR 1
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: ST_TO_ADDR
// if WaitServerStrings then
7329: LD_EXP 59
7333: IFFALSE 7351
// AllStrings = AllStrings ^ WaitServerStrings ;
7335: LD_ADDR_VAR 0 2
7339: PUSH
7340: LD_VAR 0 2
7344: PUSH
7345: LD_EXP 59
7349: ADD
7350: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7351: LD_INT 0
7353: PUSH
7354: LD_EXP 32
7358: PUSH
7359: LD_OWVAR 1
7363: MINUS
7364: LESSEQUAL
7365: IFFALSE 7396
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7367: LD_ADDR_VAR 0 2
7371: PUSH
7372: LD_VAR 0 2
7376: PUSH
7377: LD_STRING #allowedsibbomb
7379: PUSH
7380: LD_EXP 32
7384: PUSH
7385: LD_OWVAR 1
7389: MINUS
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: ADD
7395: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7396: LD_INT 0
7398: PUSH
7399: LD_EXP 63
7403: PUSH
7404: LD_OWVAR 1
7408: MINUS
7409: LESSEQUAL
7410: IFFALSE 7441
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7412: LD_ADDR_VAR 0 2
7416: PUSH
7417: LD_VAR 0 2
7421: PUSH
7422: LD_STRING #builduptime
7424: PUSH
7425: LD_EXP 63
7429: PUSH
7430: LD_OWVAR 1
7434: MINUS
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: ADD
7440: ST_TO_ADDR
// if ( ExtraStrings ) then
7441: LD_EXP 58
7445: IFFALSE 7467
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7447: LD_ADDR_VAR 0 2
7451: PUSH
7452: LD_VAR 0 2
7456: PUSH
7457: LD_STRING 
7459: ADD
7460: PUSH
7461: LD_EXP 58
7465: ADD
7466: ST_TO_ADDR
// if ( Display_kings ) and not isSGUI then
7467: LD_EXP 60
7471: PUSH
7472: LD_OWVAR 83
7476: NOT
7477: AND
7478: IFFALSE 7496
// AllStrings = AllStrings ^ Display_kings ;
7480: LD_ADDR_VAR 0 2
7484: PUSH
7485: LD_VAR 0 2
7489: PUSH
7490: LD_EXP 60
7494: ADD
7495: ST_TO_ADDR
// Display_Strings := AllStrings ;
7496: LD_ADDR_OWVAR 47
7500: PUSH
7501: LD_VAR 0 2
7505: ST_TO_ADDR
// end ;
7506: LD_VAR 0 1
7510: RET
// every 0 0$1 do
7511: GO 7513
7513: DISABLE
// begin ShowTimer ;
7514: CALL 7308 0 0
// enable ;
7518: ENABLE
// end ; end_of_file
7519: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
7520: LD_INT 0
7522: PPUSH
7523: PPUSH
7524: PPUSH
// sharedPoints1 = [ ] ;
7525: LD_ADDR_LOC 14
7529: PUSH
7530: EMPTY
7531: ST_TO_ADDR
// sharedPoints2 = [ ] ;
7532: LD_ADDR_LOC 15
7536: PUSH
7537: EMPTY
7538: ST_TO_ADDR
// sharedPoints3 = [ ] ;
7539: LD_ADDR_LOC 16
7543: PUSH
7544: EMPTY
7545: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
7546: LD_ADDR_VAR 0 2
7550: PUSH
7551: DOUBLE
7552: LD_INT 1
7554: DEC
7555: ST_TO_ADDR
7556: LD_EXP 37
7560: PUSH
7561: LD_INT 0
7563: PLUS
7564: PUSH
7565: FOR_TO
7566: IFFALSE 7668
// begin if not Side_Positions [ i ] = 0 then
7568: LD_EXP 37
7572: PUSH
7573: LD_VAR 0 2
7577: ARRAY
7578: PUSH
7579: LD_INT 0
7581: EQUAL
7582: NOT
7583: IFFALSE 7597
// SetMultiScore ( i , 0 ) ;
7585: LD_VAR 0 2
7589: PPUSH
7590: LD_INT 0
7592: PPUSH
7593: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
7597: LD_ADDR_LOC 14
7601: PUSH
7602: LD_LOC 14
7606: PPUSH
7607: LD_VAR 0 2
7611: PPUSH
7612: LD_INT 0
7614: PPUSH
7615: CALL_OW 1
7619: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
7620: LD_ADDR_LOC 15
7624: PUSH
7625: LD_LOC 15
7629: PPUSH
7630: LD_VAR 0 2
7634: PPUSH
7635: LD_INT 0
7637: PPUSH
7638: CALL_OW 1
7642: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
7643: LD_ADDR_LOC 16
7647: PUSH
7648: LD_LOC 16
7652: PPUSH
7653: LD_VAR 0 2
7657: PPUSH
7658: LD_INT 0
7660: PPUSH
7661: CALL_OW 1
7665: ST_TO_ADDR
// end ;
7666: GO 7565
7668: POP
7669: POP
// pointGame = true ;
7670: LD_ADDR_LOC 17
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// end ;
7678: LD_VAR 0 1
7682: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
7683: LD_LOC 17
7687: IFFALSE 8098
7689: GO 7691
7691: DISABLE
7692: LD_INT 0
7694: PPUSH
7695: PPUSH
7696: PPUSH
7697: PPUSH
7698: PPUSH
7699: PPUSH
7700: PPUSH
7701: PPUSH
7702: PPUSH
7703: PPUSH
7704: PPUSH
7705: PPUSH
7706: PPUSH
// begin if isSGUI then
7707: LD_OWVAR 83
7711: IFFALSE 8098
// begin if Teams [ 1 ] then
7713: LD_EXP 35
7717: PUSH
7718: LD_INT 1
7720: ARRAY
7721: IFFALSE 7733
// red = true else
7723: LD_ADDR_VAR 0 2
7727: PUSH
7728: LD_INT 1
7730: ST_TO_ADDR
7731: GO 7741
// red = false ;
7733: LD_ADDR_VAR 0 2
7737: PUSH
7738: LD_INT 0
7740: ST_TO_ADDR
// if Teams [ 2 ] then
7741: LD_EXP 35
7745: PUSH
7746: LD_INT 2
7748: ARRAY
7749: IFFALSE 7761
// blue = true else
7751: LD_ADDR_VAR 0 3
7755: PUSH
7756: LD_INT 1
7758: ST_TO_ADDR
7759: GO 7769
// blue = false ;
7761: LD_ADDR_VAR 0 3
7765: PUSH
7766: LD_INT 0
7768: ST_TO_ADDR
// if Teams [ 3 ] then
7769: LD_EXP 35
7773: PUSH
7774: LD_INT 3
7776: ARRAY
7777: IFFALSE 7789
// yel = true else
7779: LD_ADDR_VAR 0 4
7783: PUSH
7784: LD_INT 1
7786: ST_TO_ADDR
7787: GO 7797
// yel = false ;
7789: LD_ADDR_VAR 0 4
7793: PUSH
7794: LD_INT 0
7796: ST_TO_ADDR
// if Teams [ 4 ] then
7797: LD_EXP 35
7801: PUSH
7802: LD_INT 4
7804: ARRAY
7805: IFFALSE 7817
// green = true else
7807: LD_ADDR_VAR 0 5
7811: PUSH
7812: LD_INT 1
7814: ST_TO_ADDR
7815: GO 7825
// green = false ;
7817: LD_ADDR_VAR 0 5
7821: PUSH
7822: LD_INT 0
7824: ST_TO_ADDR
// if def_public_score then
7825: LD_EXP 14
7829: IFFALSE 7841
// p = true else
7831: LD_ADDR_VAR 0 12
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
7839: GO 7849
// p = false ;
7841: LD_ADDR_VAR 0 12
7845: PUSH
7846: LD_INT 0
7848: ST_TO_ADDR
// if team_game then
7849: LD_EXP 39
7853: IFFALSE 7934
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
7855: LD_ADDR_VAR 0 13
7859: PUSH
7860: LD_INT 3
7862: PUSH
7863: LD_INT 1
7865: PUSH
7866: LD_INT 2
7868: PUSH
7869: LD_INT 7
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: PUSH
7878: LD_EXP 48
7882: ARRAY
7883: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
7884: LD_ADDR_VAR 0 10
7888: PUSH
7889: LD_STRING {
7891: PUSH
7892: LD_VAR 0 3
7896: STR
7897: PUSH
7898: LD_STRING ,
7900: STR
7901: PUSH
7902: LD_VAR 0 4
7906: STR
7907: PUSH
7908: LD_STRING ,
7910: STR
7911: PUSH
7912: LD_VAR 0 2
7916: STR
7917: PUSH
7918: LD_STRING ,0,0,0,
7920: STR
7921: PUSH
7922: LD_VAR 0 5
7926: STR
7927: PUSH
7928: LD_STRING ,0}
7930: STR
7931: ST_TO_ADDR
// end else
7932: GO 8034
// begin you = your_side ;
7934: LD_ADDR_VAR 0 13
7938: PUSH
7939: LD_OWVAR 2
7943: ST_TO_ADDR
// s = { ;
7944: LD_ADDR_VAR 0 10
7948: PUSH
7949: LD_STRING {
7951: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
7952: LD_ADDR_VAR 0 1
7956: PUSH
7957: DOUBLE
7958: LD_INT 1
7960: DEC
7961: ST_TO_ADDR
7962: LD_EXP 37
7966: PUSH
7967: LD_INT 0
7969: PLUS
7970: PUSH
7971: FOR_TO
7972: IFFALSE 8018
// if side_positions [ i ] then
7974: LD_EXP 37
7978: PUSH
7979: LD_VAR 0 1
7983: ARRAY
7984: IFFALSE 8002
// s = s & 1, else
7986: LD_ADDR_VAR 0 10
7990: PUSH
7991: LD_VAR 0 10
7995: PUSH
7996: LD_STRING 1,
7998: STR
7999: ST_TO_ADDR
8000: GO 8016
// s = s & 0, ;
8002: LD_ADDR_VAR 0 10
8006: PUSH
8007: LD_VAR 0 10
8011: PUSH
8012: LD_STRING 0,
8014: STR
8015: ST_TO_ADDR
8016: GO 7971
8018: POP
8019: POP
// s = s & } ;
8020: LD_ADDR_VAR 0 10
8024: PUSH
8025: LD_VAR 0 10
8029: PUSH
8030: LD_STRING }
8032: STR
8033: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
8034: LD_STRING initScore(
8036: PUSH
8037: LD_VAR 0 10
8041: STR
8042: PUSH
8043: LD_STRING ,
8045: STR
8046: PUSH
8047: LD_VAR 0 12
8051: STR
8052: PUSH
8053: LD_STRING ,
8055: STR
8056: PUSH
8057: LD_VAR 0 13
8061: STR
8062: PUSH
8063: LD_STRING  );
8065: STR
8066: PPUSH
8067: CALL_OW 559
// if game_type = 3 then
8071: LD_EXP 18
8075: PUSH
8076: LD_INT 3
8078: EQUAL
8079: IFFALSE 8098
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
8081: LD_STRING AddScorePoints(2,2,
8083: PUSH
8084: LD_EXP 46
8088: STR
8089: PUSH
8090: LD_STRING  );
8092: STR
8093: PPUSH
8094: CALL_OW 559
// end ; end ;
8098: PPOPN 13
8100: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
8101: LD_INT 0
8103: PPUSH
8104: PPUSH
// case typ of 1 :
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 1
8112: DOUBLE
8113: EQUAL
8114: IFTRUE 8118
8116: GO 8146
8118: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
8119: LD_ADDR_LOC 14
8123: PUSH
8124: LD_LOC 14
8128: PPUSH
8129: LD_VAR 0 1
8133: PPUSH
8134: LD_VAR 0 2
8138: PPUSH
8139: CALL_OW 1
8143: ST_TO_ADDR
8144: GO 8219
8146: LD_INT 2
8148: DOUBLE
8149: EQUAL
8150: IFTRUE 8154
8152: GO 8182
8154: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
8155: LD_ADDR_LOC 15
8159: PUSH
8160: LD_LOC 15
8164: PPUSH
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_VAR 0 2
8174: PPUSH
8175: CALL_OW 1
8179: ST_TO_ADDR
8180: GO 8219
8182: LD_INT 3
8184: DOUBLE
8185: EQUAL
8186: IFTRUE 8190
8188: GO 8218
8190: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
8191: LD_ADDR_LOC 16
8195: PUSH
8196: LD_LOC 16
8200: PPUSH
8201: LD_VAR 0 1
8205: PPUSH
8206: LD_VAR 0 2
8210: PPUSH
8211: CALL_OW 1
8215: ST_TO_ADDR
8216: GO 8219
8218: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
8219: LD_ADDR_VAR 0 5
8223: PUSH
8224: LD_LOC 14
8228: PUSH
8229: LD_VAR 0 1
8233: ARRAY
8234: PUSH
8235: LD_LOC 15
8239: PUSH
8240: LD_VAR 0 1
8244: ARRAY
8245: PLUS
8246: PUSH
8247: LD_LOC 16
8251: PUSH
8252: LD_VAR 0 1
8256: ARRAY
8257: PLUS
8258: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
8259: LD_VAR 0 1
8263: PPUSH
8264: LD_VAR 0 5
8268: PPUSH
8269: CALL_OW 506
// end ; end_of_file
8273: LD_VAR 0 4
8277: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8278: LD_INT 0
8280: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8281: LD_VAR 0 1
8285: PPUSH
8286: CALL_OW 255
8290: PUSH
8291: LD_VAR 0 4
8295: EQUAL
8296: IFFALSE 8315
// begin SetAchievement ( ACH_RAD ) ;
8298: LD_STRING ACH_RAD
8300: PPUSH
8301: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8305: LD_STRING ACH_NL
8307: PPUSH
8308: LD_INT 1
8310: PPUSH
8311: CALL_OW 564
// end end ;
8315: LD_VAR 0 5
8319: RET
// export function SA_Win ( side ) ; begin
8320: LD_INT 0
8322: PPUSH
// case side of 1 :
8323: LD_VAR 0 1
8327: PUSH
8328: LD_INT 1
8330: DOUBLE
8331: EQUAL
8332: IFTRUE 8336
8334: GO 8349
8336: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8337: LD_STRING ACH_AH
8339: PPUSH
8340: LD_INT 1
8342: PPUSH
8343: CALL_OW 564
8347: GO 8512
8349: LD_INT 2
8351: DOUBLE
8352: EQUAL
8353: IFTRUE 8357
8355: GO 8370
8357: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8358: LD_STRING ACH_E
8360: PPUSH
8361: LD_INT 1
8363: PPUSH
8364: CALL_OW 564
8368: GO 8512
8370: LD_INT 3
8372: DOUBLE
8373: EQUAL
8374: IFTRUE 8378
8376: GO 8391
8378: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8379: LD_STRING ACH_OOL
8381: PPUSH
8382: LD_INT 1
8384: PPUSH
8385: CALL_OW 564
8389: GO 8512
8391: LD_INT 1
8393: PUSH
8394: LD_INT 2
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: DOUBLE
8401: EQUAL
8402: IFTRUE 8406
8404: GO 8431
8406: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8407: LD_STRING ACH_AH
8409: PPUSH
8410: LD_REAL  5.00000000000000E-0001
8413: PPUSH
8414: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8418: LD_STRING ACH_E
8420: PPUSH
8421: LD_REAL  5.00000000000000E-0001
8424: PPUSH
8425: CALL_OW 564
// end ; [ 2 , 3 ] :
8429: GO 8512
8431: LD_INT 2
8433: PUSH
8434: LD_INT 3
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: DOUBLE
8441: EQUAL
8442: IFTRUE 8446
8444: GO 8471
8446: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8447: LD_STRING ACH_OOL
8449: PPUSH
8450: LD_REAL  5.00000000000000E-0001
8453: PPUSH
8454: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8458: LD_STRING ACH_E
8460: PPUSH
8461: LD_REAL  5.00000000000000E-0001
8464: PPUSH
8465: CALL_OW 564
// end ; [ 3 , 1 ] :
8469: GO 8512
8471: LD_INT 3
8473: PUSH
8474: LD_INT 1
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: DOUBLE
8481: EQUAL
8482: IFTRUE 8486
8484: GO 8511
8486: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8487: LD_STRING ACH_AH
8489: PPUSH
8490: LD_REAL  5.00000000000000E-0001
8493: PPUSH
8494: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8498: LD_STRING ACH_OOL
8500: PPUSH
8501: LD_REAL  5.00000000000000E-0001
8504: PPUSH
8505: CALL_OW 564
// end ; end ;
8509: GO 8512
8511: POP
// end ; end_of_file
8512: LD_VAR 0 2
8516: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8517: LD_INT 0
8519: PPUSH
8520: PPUSH
// enable ( 98 ) ;
8521: LD_INT 98
8523: ENABLE_MARKED
// GameEnded = false ;
8524: LD_ADDR_LOC 19
8528: PUSH
8529: LD_INT 0
8531: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8532: LD_ADDR_LOC 18
8536: PUSH
8537: LD_INT 0
8539: PUSH
8540: LD_INT 0
8542: PUSH
8543: LD_INT 0
8545: PUSH
8546: LD_INT 0
8548: PUSH
8549: LD_INT 0
8551: PUSH
8552: LD_INT 0
8554: PUSH
8555: LD_INT 0
8557: PUSH
8558: LD_INT 0
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: ST_TO_ADDR
// unfoged = false ;
8571: LD_ADDR_LOC 20
8575: PUSH
8576: LD_INT 0
8578: ST_TO_ADDR
// defeated_specs := [ ] ;
8579: LD_ADDR_LOC 21
8583: PUSH
8584: EMPTY
8585: ST_TO_ADDR
// for i = 1 to side_positions do
8586: LD_ADDR_VAR 0 2
8590: PUSH
8591: DOUBLE
8592: LD_INT 1
8594: DEC
8595: ST_TO_ADDR
8596: LD_EXP 37
8600: PUSH
8601: FOR_TO
8602: IFFALSE 8642
// if not side_positions [ i ] then
8604: LD_EXP 37
8608: PUSH
8609: LD_VAR 0 2
8613: ARRAY
8614: NOT
8615: IFFALSE 8640
// defeated = replace ( defeated , i , true ) ;
8617: LD_ADDR_LOC 18
8621: PUSH
8622: LD_LOC 18
8626: PPUSH
8627: LD_VAR 0 2
8631: PPUSH
8632: LD_INT 1
8634: PPUSH
8635: CALL_OW 1
8639: ST_TO_ADDR
8640: GO 8601
8642: POP
8643: POP
// end ;
8644: LD_VAR 0 1
8648: RET
// function CanWinLoose ; begin
8649: LD_INT 0
8651: PPUSH
// Result := true ;
8652: LD_ADDR_VAR 0 1
8656: PUSH
8657: LD_INT 1
8659: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8660: CALL_OW 518
8664: PUSH
8665: CALL_OW 519
8669: PUSH
8670: LD_INT 0
8672: GREATER
8673: AND
8674: IFFALSE 8684
// Result := false ;
8676: LD_ADDR_VAR 0 1
8680: PUSH
8681: LD_INT 0
8683: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8684: CALL_OW 531
8688: PUSH
8689: CALL_OW 519
8693: PUSH
8694: LD_INT 1
8696: GREATER
8697: AND
8698: IFFALSE 8708
// Result := false ;
8700: LD_ADDR_VAR 0 1
8704: PUSH
8705: LD_INT 0
8707: ST_TO_ADDR
// end ;
8708: LD_VAR 0 1
8712: RET
// export function HasPower ( i ) ; var k , h ; begin
8713: LD_INT 0
8715: PPUSH
8716: PPUSH
8717: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8718: LD_VAR 0 1
8722: PPUSH
8723: CALL_OW 108
8727: NOT
8728: PUSH
8729: LD_EXP 36
8733: PUSH
8734: LD_VAR 0 1
8738: ARRAY
8739: NOT
8740: AND
8741: PUSH
8742: LD_OWVAR 4
8746: AND
8747: IFFALSE 8759
// begin result = false ;
8749: LD_ADDR_VAR 0 2
8753: PUSH
8754: LD_INT 0
8756: ST_TO_ADDR
// end else
8757: GO 9054
// case def_win_rules of 0 :
8759: LD_EXP 33
8763: PUSH
8764: LD_INT 0
8766: DOUBLE
8767: EQUAL
8768: IFTRUE 8772
8770: GO 8935
8772: POP
// if def_people_respawning then
8773: LD_EXP 11
8777: IFFALSE 8868
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8779: LD_ADDR_VAR 0 2
8783: PUSH
8784: LD_INT 22
8786: PUSH
8787: LD_VAR 0 1
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: LD_INT 2
8798: PUSH
8799: LD_INT 21
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 33
8811: PUSH
8812: LD_INT 3
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 33
8821: PUSH
8822: LD_INT 5
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_INT 30
8831: PUSH
8832: LD_INT 0
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 30
8841: PUSH
8842: LD_INT 1
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PPUSH
8861: CALL_OW 69
8865: ST_TO_ADDR
8866: GO 8933
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8868: LD_ADDR_VAR 0 2
8872: PUSH
8873: LD_INT 22
8875: PUSH
8876: LD_VAR 0 1
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: PUSH
8885: LD_INT 2
8887: PUSH
8888: LD_INT 21
8890: PUSH
8891: LD_INT 1
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 33
8900: PUSH
8901: LD_INT 3
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 33
8910: PUSH
8911: LD_INT 5
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PPUSH
8928: CALL_OW 69
8932: ST_TO_ADDR
8933: GO 9054
8935: LD_INT 1
8937: DOUBLE
8938: EQUAL
8939: IFTRUE 8943
8941: GO 8982
8943: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_INT 22
8951: PUSH
8952: LD_VAR 0 1
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 21
8963: PUSH
8964: LD_INT 1
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PPUSH
8975: CALL_OW 69
8979: ST_TO_ADDR
8980: GO 9054
8982: LD_INT 2
8984: DOUBLE
8985: EQUAL
8986: IFTRUE 8990
8988: GO 9053
8990: POP
// begin h = false ;
8991: LD_ADDR_VAR 0 4
8995: PUSH
8996: LD_INT 0
8998: ST_TO_ADDR
// for k in heroes [ i ] do
8999: LD_ADDR_VAR 0 3
9003: PUSH
9004: LD_EXP 49
9008: PUSH
9009: LD_VAR 0 1
9013: ARRAY
9014: PUSH
9015: FOR_IN
9016: IFFALSE 9039
// if IsLive ( k ) then
9018: LD_VAR 0 3
9022: PPUSH
9023: CALL_OW 300
9027: IFFALSE 9037
// h = true ;
9029: LD_ADDR_VAR 0 4
9033: PUSH
9034: LD_INT 1
9036: ST_TO_ADDR
9037: GO 9015
9039: POP
9040: POP
// Result := h ;
9041: LD_ADDR_VAR 0 2
9045: PUSH
9046: LD_VAR 0 4
9050: ST_TO_ADDR
// end ; end ;
9051: GO 9054
9053: POP
// end ;
9054: LD_VAR 0 2
9058: RET
// function AlliedSides ( i , j ) ; begin
9059: LD_INT 0
9061: PPUSH
// Result := false ;
9062: LD_ADDR_VAR 0 3
9066: PUSH
9067: LD_INT 0
9069: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9070: LD_VAR 0 1
9074: PPUSH
9075: LD_VAR 0 2
9079: PPUSH
9080: CALL_OW 81
9084: PUSH
9085: LD_INT 1
9087: EQUAL
9088: PUSH
9089: LD_VAR 0 2
9093: PPUSH
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL_OW 81
9103: PUSH
9104: LD_INT 1
9106: EQUAL
9107: AND
9108: PUSH
9109: LD_VAR 0 1
9113: PPUSH
9114: CALL_OW 83
9118: AND
9119: PUSH
9120: LD_VAR 0 2
9124: PPUSH
9125: CALL_OW 83
9129: AND
9130: IFFALSE 9140
// Result := true ;
9132: LD_ADDR_VAR 0 3
9136: PUSH
9137: LD_INT 1
9139: ST_TO_ADDR
// end ;
9140: LD_VAR 0 3
9144: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9145: CALL 8649 0 0
9149: PUSH
9150: LD_LOC 19
9154: NOT
9155: AND
9156: IFFALSE 9172
9158: GO 9160
9160: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9161: LD_ADDR_EXP 59
9165: PUSH
9166: LD_STRING #Player-Ended
9168: PUSH
9169: EMPTY
9170: LIST
9171: ST_TO_ADDR
9172: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9173: CALL 8649 0 0
9177: PUSH
9178: LD_LOC 19
9182: AND
9183: IFFALSE 9192
9185: GO 9187
9187: DISABLE
// YouLostInMultiplayer ;
9188: CALL_OW 107
9192: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9193: CALL 8649 0 0
9197: NOT
9198: PUSH
9199: CALL_OW 531
9203: NOT
9204: AND
9205: IFFALSE 9221
9207: GO 9209
9209: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9210: LD_ADDR_EXP 59
9214: PUSH
9215: LD_STRING #server-wait
9217: PUSH
9218: EMPTY
9219: LIST
9220: ST_TO_ADDR
9221: END
// every 100 trigger IAmSpec do
9222: CALL_OW 531
9226: IFFALSE 9242
9228: GO 9230
9230: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9231: LD_ADDR_EXP 59
9235: PUSH
9236: LD_STRING #Player-IAmSpec
9238: PUSH
9239: EMPTY
9240: LIST
9241: ST_TO_ADDR
9242: END
// every 100 trigger GameEnded and IAmSpec do
9243: LD_LOC 19
9247: PUSH
9248: CALL_OW 531
9252: AND
9253: IFFALSE 9262
9255: GO 9257
9257: DISABLE
// YouLostInMultiplayer ;
9258: CALL_OW 107
9262: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9263: CALL 8649 0 0
9267: PUSH
9268: LD_LOC 19
9272: NOT
9273: AND
9274: IFFALSE 9290
9276: GO 9278
9278: DISABLE
// WaitServerStrings = [ $player-win ] ;
9279: LD_ADDR_EXP 59
9283: PUSH
9284: LD_STRING $player-win
9286: PUSH
9287: EMPTY
9288: LIST
9289: ST_TO_ADDR
9290: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9291: CALL 8649 0 0
9295: PUSH
9296: LD_LOC 19
9300: AND
9301: IFFALSE 9325
9303: GO 9305
9305: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9306: LD_EXP 38
9310: PUSH
9311: LD_OWVAR 7
9315: ARRAY
9316: PPUSH
9317: CALL 8320 0 1
// YouWinInMultiplayer ;
9321: CALL_OW 106
// end ;
9325: END
// every 100 trigger isEditor marked 401 do
9326: LD_OWVAR 84
9330: IFFALSE 9346
9332: GO 9334
9334: DISABLE
// Debug_Strings = [ You won ] ;
9335: LD_ADDR_OWVAR 48
9339: PUSH
9340: LD_STRING You won
9342: PUSH
9343: EMPTY
9344: LIST
9345: ST_TO_ADDR
9346: END
// every 100 trigger isEditor marked 400 do
9347: LD_OWVAR 84
9351: IFFALSE 9367
9353: GO 9355
9355: DISABLE
// Debug_Strings = [ You loss ] ;
9356: LD_ADDR_OWVAR 48
9360: PUSH
9361: LD_STRING You loss
9363: PUSH
9364: EMPTY
9365: LIST
9366: ST_TO_ADDR
9367: END
// every 100 marked 98 do var i , un ;
9368: GO 9370
9370: DISABLE
9371: LD_INT 0
9373: PPUSH
9374: PPUSH
// begin for i = 1 to side_positions do
9375: LD_ADDR_VAR 0 1
9379: PUSH
9380: DOUBLE
9381: LD_INT 1
9383: DEC
9384: ST_TO_ADDR
9385: LD_EXP 37
9389: PUSH
9390: FOR_TO
9391: IFFALSE 9478
// begin if side_positions [ i ] then
9393: LD_EXP 37
9397: PUSH
9398: LD_VAR 0 1
9402: ARRAY
9403: IFFALSE 9476
// if not HasPower ( i ) and not defeated [ i ] then
9405: LD_VAR 0 1
9409: PPUSH
9410: CALL 8713 0 1
9414: NOT
9415: PUSH
9416: LD_LOC 18
9420: PUSH
9421: LD_VAR 0 1
9425: ARRAY
9426: NOT
9427: AND
9428: IFFALSE 9476
// begin defeated = replace ( defeated , i , true ) ;
9430: LD_ADDR_LOC 18
9434: PUSH
9435: LD_LOC 18
9439: PPUSH
9440: LD_VAR 0 1
9444: PPUSH
9445: LD_INT 1
9447: PPUSH
9448: CALL_OW 1
9452: ST_TO_ADDR
// if i = mp_player_side then
9453: LD_VAR 0 1
9457: PUSH
9458: LD_OWVAR 7
9462: EQUAL
9463: IFFALSE 9476
// begin Multiplayer_Loose_Message ;
9465: CALL_OW 521
// SetPlayerSpectator ( ) ;
9469: CALL_OW 572
// enable ( 400 ) ;
9473: LD_INT 400
9475: ENABLE_MARKED
// end ; end ; end ;
9476: GO 9390
9478: POP
9479: POP
// DidGameEnd ;
9480: CALL 9495 0 0
// if not GameEnded then
9484: LD_LOC 19
9488: NOT
9489: IFFALSE 9492
// enable ;
9491: ENABLE
// end ;
9492: PPOPN 2
9494: END
// function DidGameEnd ; var i , k , enemy ; begin
9495: LD_INT 0
9497: PPUSH
9498: PPUSH
9499: PPUSH
9500: PPUSH
// enemy = [ ] ;
9501: LD_ADDR_VAR 0 4
9505: PUSH
9506: EMPTY
9507: ST_TO_ADDR
// for i = 1 to side_positions do
9508: LD_ADDR_VAR 0 2
9512: PUSH
9513: DOUBLE
9514: LD_INT 1
9516: DEC
9517: ST_TO_ADDR
9518: LD_EXP 37
9522: PUSH
9523: FOR_TO
9524: IFFALSE 9618
// if not defeated [ i ] then
9526: LD_LOC 18
9530: PUSH
9531: LD_VAR 0 2
9535: ARRAY
9536: NOT
9537: IFFALSE 9616
// for k = 1 to side_positions do
9539: LD_ADDR_VAR 0 3
9543: PUSH
9544: DOUBLE
9545: LD_INT 1
9547: DEC
9548: ST_TO_ADDR
9549: LD_EXP 37
9553: PUSH
9554: FOR_TO
9555: IFFALSE 9614
// if not defeated [ k ] then
9557: LD_LOC 18
9561: PUSH
9562: LD_VAR 0 3
9566: ARRAY
9567: NOT
9568: IFFALSE 9612
// if not AlliedSides ( i , k ) then
9570: LD_VAR 0 2
9574: PPUSH
9575: LD_VAR 0 3
9579: PPUSH
9580: CALL 9059 0 2
9584: NOT
9585: IFFALSE 9612
// enemy = enemy ^ [ i , k ] ;
9587: LD_ADDR_VAR 0 4
9591: PUSH
9592: LD_VAR 0 4
9596: PUSH
9597: LD_VAR 0 2
9601: PUSH
9602: LD_VAR 0 3
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: ADD
9611: ST_TO_ADDR
9612: GO 9554
9614: POP
9615: POP
9616: GO 9523
9618: POP
9619: POP
// if not enemy then
9620: LD_VAR 0 4
9624: NOT
9625: IFFALSE 9651
// begin GameEnded = true ;
9627: LD_ADDR_LOC 19
9631: PUSH
9632: LD_INT 1
9634: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9635: LD_LOC 18
9639: PUSH
9640: LD_OWVAR 7
9644: ARRAY
9645: NOT
9646: IFFALSE 9651
// enable ( 401 ) ;
9648: LD_INT 401
9650: ENABLE_MARKED
// end ; end ;
9651: LD_VAR 0 1
9655: RET
// function unfog ; var k , friends ; begin
9656: LD_INT 0
9658: PPUSH
9659: PPUSH
9660: PPUSH
// for k = 1 to side_positions do
9661: LD_ADDR_VAR 0 2
9665: PUSH
9666: DOUBLE
9667: LD_INT 1
9669: DEC
9670: ST_TO_ADDR
9671: LD_EXP 37
9675: PUSH
9676: FOR_TO
9677: IFFALSE 9733
// if not defeated [ k ] then
9679: LD_LOC 18
9683: PUSH
9684: LD_VAR 0 2
9688: ARRAY
9689: NOT
9690: IFFALSE 9731
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9692: LD_OWVAR 7
9696: PPUSH
9697: LD_VAR 0 2
9701: PPUSH
9702: CALL_OW 81
9706: PUSH
9707: LD_INT 1
9709: PUSH
9710: EMPTY
9711: LIST
9712: IN
9713: IFFALSE 9731
// friends = friends ^ k ;
9715: LD_ADDR_VAR 0 3
9719: PUSH
9720: LD_VAR 0 3
9724: PUSH
9725: LD_VAR 0 2
9729: ADD
9730: ST_TO_ADDR
9731: GO 9676
9733: POP
9734: POP
// if not friends then
9735: LD_VAR 0 3
9739: NOT
9740: IFFALSE 9754
// begin SetPlayerSpectator ( ) ;
9742: CALL_OW 572
// unfoged = true ;
9746: LD_ADDR_LOC 20
9750: PUSH
9751: LD_INT 1
9753: ST_TO_ADDR
// end ; end ;
9754: LD_VAR 0 1
9758: RET
// export function MakeGameEnd ; begin
9759: LD_INT 0
9761: PPUSH
// SetPlayerSpectator ( ) ;
9762: CALL_OW 572
// unfoged = true ;
9766: LD_ADDR_LOC 20
9770: PUSH
9771: LD_INT 1
9773: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9774: LD_INT 175
9776: PPUSH
9777: CALL_OW 67
// GameEnded = true ;
9781: LD_ADDR_LOC 19
9785: PUSH
9786: LD_INT 1
9788: ST_TO_ADDR
// end ;
9789: LD_VAR 0 1
9793: RET
// export function GetGameEnded ; begin
9794: LD_INT 0
9796: PPUSH
// result = GameEnded ;
9797: LD_ADDR_VAR 0 1
9801: PUSH
9802: LD_LOC 19
9806: ST_TO_ADDR
// end ; end_of_file
9807: LD_VAR 0 1
9811: RET
// var win ; export function init_kings_counting ; var i ; begin
9812: LD_INT 0
9814: PPUSH
9815: PPUSH
// mp_with_score := true ;
9816: LD_ADDR_OWVAR 14
9820: PUSH
9821: LD_INT 1
9823: ST_TO_ADDR
// ResetMultiScore ;
9824: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
9828: LD_EXP 45
9832: PPUSH
9833: LD_INT 1
9835: PPUSH
9836: CALL_OW 424
// enable ( 2 ) ;
9840: LD_INT 2
9842: ENABLE_MARKED
// end ;
9843: LD_VAR 0 1
9847: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
9848: LD_INT 0
9850: PPUSH
9851: PPUSH
9852: PPUSH
9853: PPUSH
9854: PPUSH
9855: PPUSH
9856: PPUSH
9857: PPUSH
9858: PPUSH
// vypis := [ ] ;
9859: LD_ADDR_VAR 0 3
9863: PUSH
9864: EMPTY
9865: ST_TO_ADDR
// red = 0 ;
9866: LD_ADDR_VAR 0 5
9870: PUSH
9871: LD_INT 0
9873: ST_TO_ADDR
// blue = 0 ;
9874: LD_ADDR_VAR 0 6
9878: PUSH
9879: LD_INT 0
9881: ST_TO_ADDR
// yel = 0 ;
9882: LD_ADDR_VAR 0 7
9886: PUSH
9887: LD_INT 0
9889: ST_TO_ADDR
// green = 0 ;
9890: LD_ADDR_VAR 0 8
9894: PUSH
9895: LD_INT 0
9897: ST_TO_ADDR
// if def_public_score or isSGUI then
9898: LD_EXP 14
9902: PUSH
9903: LD_OWVAR 83
9907: OR
9908: IFFALSE 10505
// if not Team_Game then
9910: LD_EXP 39
9914: NOT
9915: IFFALSE 10037
// begin for side = 1 to Side_Positions do
9917: LD_ADDR_VAR 0 2
9921: PUSH
9922: DOUBLE
9923: LD_INT 1
9925: DEC
9926: ST_TO_ADDR
9927: LD_EXP 37
9931: PUSH
9932: FOR_TO
9933: IFFALSE 10033
// if Side_Positions [ side ] then
9935: LD_EXP 37
9939: PUSH
9940: LD_VAR 0 2
9944: ARRAY
9945: IFFALSE 10031
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
9947: LD_ADDR_VAR 0 3
9951: PUSH
9952: LD_VAR 0 3
9956: PUSH
9957: LD_STRING #KingoftheHill-Public
9959: PUSH
9960: LD_VAR 0 2
9964: PUSH
9965: LD_VAR 0 2
9969: PUSH
9970: LD_VAR 0 2
9974: PUSH
9975: LD_INT 10
9977: PLUS
9978: PPUSH
9979: CALL_OW 110
9983: PUSH
9984: LD_INT 3
9986: DIV
9987: PUSH
9988: LD_EXP 46
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: ADD
10000: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
10001: LD_INT 2
10003: PPUSH
10004: LD_VAR 0 2
10008: PPUSH
10009: LD_VAR 0 2
10013: PUSH
10014: LD_INT 10
10016: PLUS
10017: PPUSH
10018: CALL_OW 110
10022: PUSH
10023: LD_INT 3
10025: DIV
10026: PPUSH
10027: CALL 17409 0 3
// end ;
10031: GO 9932
10033: POP
10034: POP
// end else
10035: GO 10503
// begin if Teams [ 1 ] then
10037: LD_EXP 35
10041: PUSH
10042: LD_INT 1
10044: ARRAY
10045: IFFALSE 10097
// for i in Teams [ 1 ] do
10047: LD_ADDR_VAR 0 4
10051: PUSH
10052: LD_EXP 35
10056: PUSH
10057: LD_INT 1
10059: ARRAY
10060: PUSH
10061: FOR_IN
10062: IFFALSE 10095
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
10064: LD_ADDR_VAR 0 5
10068: PUSH
10069: LD_VAR 0 5
10073: PUSH
10074: LD_VAR 0 4
10078: PUSH
10079: LD_INT 10
10081: PLUS
10082: PPUSH
10083: CALL_OW 110
10087: PUSH
10088: LD_INT 3
10090: DIV
10091: PLUS
10092: ST_TO_ADDR
10093: GO 10061
10095: POP
10096: POP
// if Teams [ 2 ] then
10097: LD_EXP 35
10101: PUSH
10102: LD_INT 2
10104: ARRAY
10105: IFFALSE 10157
// for i in Teams [ 2 ] do
10107: LD_ADDR_VAR 0 4
10111: PUSH
10112: LD_EXP 35
10116: PUSH
10117: LD_INT 2
10119: ARRAY
10120: PUSH
10121: FOR_IN
10122: IFFALSE 10155
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
10124: LD_ADDR_VAR 0 6
10128: PUSH
10129: LD_VAR 0 6
10133: PUSH
10134: LD_VAR 0 4
10138: PUSH
10139: LD_INT 10
10141: PLUS
10142: PPUSH
10143: CALL_OW 110
10147: PUSH
10148: LD_INT 3
10150: DIV
10151: PLUS
10152: ST_TO_ADDR
10153: GO 10121
10155: POP
10156: POP
// if Teams [ 3 ] then
10157: LD_EXP 35
10161: PUSH
10162: LD_INT 3
10164: ARRAY
10165: IFFALSE 10217
// for i in Teams [ 3 ] do
10167: LD_ADDR_VAR 0 4
10171: PUSH
10172: LD_EXP 35
10176: PUSH
10177: LD_INT 3
10179: ARRAY
10180: PUSH
10181: FOR_IN
10182: IFFALSE 10215
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
10184: LD_ADDR_VAR 0 7
10188: PUSH
10189: LD_VAR 0 7
10193: PUSH
10194: LD_VAR 0 4
10198: PUSH
10199: LD_INT 10
10201: PLUS
10202: PPUSH
10203: CALL_OW 110
10207: PUSH
10208: LD_INT 3
10210: DIV
10211: PLUS
10212: ST_TO_ADDR
10213: GO 10181
10215: POP
10216: POP
// if Teams [ 4 ] then
10217: LD_EXP 35
10221: PUSH
10222: LD_INT 4
10224: ARRAY
10225: IFFALSE 10277
// for i in Teams [ 4 ] do
10227: LD_ADDR_VAR 0 4
10231: PUSH
10232: LD_EXP 35
10236: PUSH
10237: LD_INT 4
10239: ARRAY
10240: PUSH
10241: FOR_IN
10242: IFFALSE 10275
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
10244: LD_ADDR_VAR 0 8
10248: PUSH
10249: LD_VAR 0 8
10253: PUSH
10254: LD_VAR 0 4
10258: PUSH
10259: LD_INT 10
10261: PLUS
10262: PPUSH
10263: CALL_OW 110
10267: PUSH
10268: LD_INT 3
10270: DIV
10271: PLUS
10272: ST_TO_ADDR
10273: GO 10241
10275: POP
10276: POP
// if Teams [ 1 ] then
10277: LD_EXP 35
10281: PUSH
10282: LD_INT 1
10284: ARRAY
10285: IFFALSE 10314
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
10287: LD_ADDR_VAR 0 3
10291: PUSH
10292: LD_STRING #KingoftheHill-Public-red
10294: PUSH
10295: LD_INT 3
10297: PUSH
10298: LD_VAR 0 5
10302: PUSH
10303: LD_EXP 46
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: ST_TO_ADDR
// if Teams [ 2 ] then
10314: LD_EXP 35
10318: PUSH
10319: LD_INT 2
10321: ARRAY
10322: IFFALSE 10357
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
10324: LD_ADDR_VAR 0 3
10328: PUSH
10329: LD_VAR 0 3
10333: PUSH
10334: LD_STRING #KingoftheHill-Public-blue
10336: PUSH
10337: LD_INT 1
10339: PUSH
10340: LD_VAR 0 6
10344: PUSH
10345: LD_EXP 46
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: ADD
10356: ST_TO_ADDR
// if Teams [ 3 ] then
10357: LD_EXP 35
10361: PUSH
10362: LD_INT 3
10364: ARRAY
10365: IFFALSE 10400
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
10367: LD_ADDR_VAR 0 3
10371: PUSH
10372: LD_VAR 0 3
10376: PUSH
10377: LD_STRING #KingoftheHill-Public-yell
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: LD_VAR 0 7
10387: PUSH
10388: LD_EXP 46
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: ADD
10399: ST_TO_ADDR
// if Teams [ 4 ] then
10400: LD_EXP 35
10404: PUSH
10405: LD_INT 4
10407: ARRAY
10408: IFFALSE 10443
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
10410: LD_ADDR_VAR 0 3
10414: PUSH
10415: LD_VAR 0 3
10419: PUSH
10420: LD_STRING #KingoftheHill-Public-green
10422: PUSH
10423: LD_INT 7
10425: PUSH
10426: LD_VAR 0 8
10430: PUSH
10431: LD_EXP 46
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: ADD
10442: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
10443: LD_INT 2
10445: PPUSH
10446: LD_INT 3
10448: PPUSH
10449: LD_VAR 0 5
10453: PPUSH
10454: CALL 17409 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
10458: LD_INT 2
10460: PPUSH
10461: LD_INT 1
10463: PPUSH
10464: LD_VAR 0 6
10468: PPUSH
10469: CALL 17409 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
10473: LD_INT 2
10475: PPUSH
10476: LD_INT 2
10478: PPUSH
10479: LD_VAR 0 7
10483: PPUSH
10484: CALL 17409 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
10488: LD_INT 2
10490: PPUSH
10491: LD_INT 7
10493: PPUSH
10494: LD_VAR 0 8
10498: PPUSH
10499: CALL 17409 0 3
// end else
10503: GO 10940
// if not Team_Game then
10505: LD_EXP 39
10509: NOT
10510: IFFALSE 10568
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
10512: LD_ADDR_VAR 0 3
10516: PUSH
10517: LD_VAR 0 3
10521: PUSH
10522: LD_STRING #KingoftheHill-Private
10524: PUSH
10525: LD_OWVAR 7
10529: PUSH
10530: LD_OWVAR 7
10534: PUSH
10535: LD_VAR 0 2
10539: PUSH
10540: LD_INT 10
10542: PLUS
10543: PPUSH
10544: CALL_OW 110
10548: PUSH
10549: LD_INT 3
10551: DIV
10552: PUSH
10553: LD_EXP 46
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: ADD
10565: ST_TO_ADDR
10566: GO 10940
// begin for i in Teams [ 1 ] do
10568: LD_ADDR_VAR 0 4
10572: PUSH
10573: LD_EXP 35
10577: PUSH
10578: LD_INT 1
10580: ARRAY
10581: PUSH
10582: FOR_IN
10583: IFFALSE 10616
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
10585: LD_ADDR_VAR 0 5
10589: PUSH
10590: LD_VAR 0 5
10594: PUSH
10595: LD_VAR 0 4
10599: PUSH
10600: LD_INT 10
10602: PLUS
10603: PPUSH
10604: CALL_OW 110
10608: PUSH
10609: LD_INT 3
10611: DIV
10612: PLUS
10613: ST_TO_ADDR
10614: GO 10582
10616: POP
10617: POP
// for i in Teams [ 2 ] do
10618: LD_ADDR_VAR 0 4
10622: PUSH
10623: LD_EXP 35
10627: PUSH
10628: LD_INT 2
10630: ARRAY
10631: PUSH
10632: FOR_IN
10633: IFFALSE 10666
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
10635: LD_ADDR_VAR 0 6
10639: PUSH
10640: LD_VAR 0 6
10644: PUSH
10645: LD_VAR 0 4
10649: PUSH
10650: LD_INT 10
10652: PLUS
10653: PPUSH
10654: CALL_OW 110
10658: PUSH
10659: LD_INT 3
10661: DIV
10662: PLUS
10663: ST_TO_ADDR
10664: GO 10632
10666: POP
10667: POP
// for i in Teams [ 3 ] do
10668: LD_ADDR_VAR 0 4
10672: PUSH
10673: LD_EXP 35
10677: PUSH
10678: LD_INT 3
10680: ARRAY
10681: PUSH
10682: FOR_IN
10683: IFFALSE 10716
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
10685: LD_ADDR_VAR 0 7
10689: PUSH
10690: LD_VAR 0 7
10694: PUSH
10695: LD_VAR 0 4
10699: PUSH
10700: LD_INT 10
10702: PLUS
10703: PPUSH
10704: CALL_OW 110
10708: PUSH
10709: LD_INT 3
10711: DIV
10712: PLUS
10713: ST_TO_ADDR
10714: GO 10682
10716: POP
10717: POP
// for i in Teams [ 4 ] do
10718: LD_ADDR_VAR 0 4
10722: PUSH
10723: LD_EXP 35
10727: PUSH
10728: LD_INT 4
10730: ARRAY
10731: PUSH
10732: FOR_IN
10733: IFFALSE 10766
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
10735: LD_ADDR_VAR 0 8
10739: PUSH
10740: LD_VAR 0 8
10744: PUSH
10745: LD_VAR 0 4
10749: PUSH
10750: LD_INT 10
10752: PLUS
10753: PPUSH
10754: CALL_OW 110
10758: PUSH
10759: LD_INT 3
10761: DIV
10762: PLUS
10763: ST_TO_ADDR
10764: GO 10732
10766: POP
10767: POP
// if mp_player_side in Teams [ 1 ] then
10768: LD_OWVAR 7
10772: PUSH
10773: LD_EXP 35
10777: PUSH
10778: LD_INT 1
10780: ARRAY
10781: IN
10782: IFFALSE 10811
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
10784: LD_ADDR_VAR 0 3
10788: PUSH
10789: LD_STRING #KingoftheHill-Public-red
10791: PUSH
10792: LD_INT 3
10794: PUSH
10795: LD_VAR 0 5
10799: PUSH
10800: LD_EXP 46
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
10811: LD_OWVAR 7
10815: PUSH
10816: LD_EXP 35
10820: PUSH
10821: LD_INT 2
10823: ARRAY
10824: IN
10825: IFFALSE 10854
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
10827: LD_ADDR_VAR 0 3
10831: PUSH
10832: LD_STRING #KingoftheHill-Public-blue
10834: PUSH
10835: LD_INT 1
10837: PUSH
10838: LD_VAR 0 6
10842: PUSH
10843: LD_EXP 46
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
10854: LD_OWVAR 7
10858: PUSH
10859: LD_EXP 35
10863: PUSH
10864: LD_INT 3
10866: ARRAY
10867: IN
10868: IFFALSE 10897
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
10870: LD_ADDR_VAR 0 3
10874: PUSH
10875: LD_STRING #KingoftheHill-Public-yell
10877: PUSH
10878: LD_INT 2
10880: PUSH
10881: LD_VAR 0 7
10885: PUSH
10886: LD_EXP 46
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
10897: LD_OWVAR 7
10901: PUSH
10902: LD_EXP 35
10906: PUSH
10907: LD_INT 4
10909: ARRAY
10910: IN
10911: IFFALSE 10940
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
10913: LD_ADDR_VAR 0 3
10917: PUSH
10918: LD_STRING #KingoftheHill-Public-green
10920: PUSH
10921: LD_INT 7
10923: PUSH
10924: LD_VAR 0 8
10928: PUSH
10929: LD_EXP 46
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: ST_TO_ADDR
// end ; Display_kings := vypis ;
10940: LD_ADDR_EXP 60
10944: PUSH
10945: LD_VAR 0 3
10949: ST_TO_ADDR
// end ;
10950: LD_VAR 0 1
10954: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
10955: LD_INT 0
10957: PPUSH
10958: PPUSH
10959: PPUSH
10960: PPUSH
10961: PPUSH
10962: PPUSH
10963: PPUSH
10964: PPUSH
10965: PPUSH
// side := [ ] ;
10966: LD_ADDR_VAR 0 2
10970: PUSH
10971: EMPTY
10972: ST_TO_ADDR
// red = 0 ;
10973: LD_ADDR_VAR 0 5
10977: PUSH
10978: LD_INT 0
10980: ST_TO_ADDR
// blue = 0 ;
10981: LD_ADDR_VAR 0 6
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// yel = 0 ;
10989: LD_ADDR_VAR 0 7
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// green = 0 ;
10997: LD_ADDR_VAR 0 8
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
11005: LD_ADDR_VAR 0 3
11009: PUSH
11010: LD_EXP 45
11014: PPUSH
11015: LD_INT 21
11017: PUSH
11018: LD_INT 3
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 53
11027: PUSH
11028: EMPTY
11029: LIST
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PPUSH
11035: CALL_OW 70
11039: ST_TO_ADDR
// for un in list do
11040: LD_ADDR_VAR 0 4
11044: PUSH
11045: LD_VAR 0 3
11049: PUSH
11050: FOR_IN
11051: IFFALSE 11076
// side := side union GetSide ( un ) ;
11053: LD_ADDR_VAR 0 2
11057: PUSH
11058: LD_VAR 0 2
11062: PUSH
11063: LD_VAR 0 4
11067: PPUSH
11068: CALL_OW 255
11072: UNION
11073: ST_TO_ADDR
11074: GO 11050
11076: POP
11077: POP
// if side <> 1 then
11078: LD_VAR 0 2
11082: PUSH
11083: LD_INT 1
11085: NONEQUAL
11086: IFFALSE 11090
// exit ;
11088: GO 11453
// side := side [ 1 ] ;
11090: LD_ADDR_VAR 0 2
11094: PUSH
11095: LD_VAR 0 2
11099: PUSH
11100: LD_INT 1
11102: ARRAY
11103: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
11104: LD_VAR 0 2
11108: PUSH
11109: LD_INT 10
11111: PLUS
11112: PPUSH
11113: LD_VAR 0 2
11117: PUSH
11118: LD_INT 10
11120: PLUS
11121: PPUSH
11122: CALL_OW 110
11126: PUSH
11127: LD_INT 1
11129: PLUS
11130: PPUSH
11131: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
11135: LD_VAR 0 2
11139: PPUSH
11140: LD_VAR 0 2
11144: PUSH
11145: LD_INT 10
11147: PLUS
11148: PPUSH
11149: CALL_OW 110
11153: PUSH
11154: LD_INT 3
11156: DIV
11157: PPUSH
11158: LD_INT 2
11160: PPUSH
11161: CALL 8101 0 3
// if not Team_Game then
11165: LD_EXP 39
11169: NOT
11170: IFFALSE 11453
// if GetTag ( side + 10 ) >= final_count * 3 then
11172: LD_VAR 0 2
11176: PUSH
11177: LD_INT 10
11179: PLUS
11180: PPUSH
11181: CALL_OW 110
11185: PUSH
11186: LD_EXP 46
11190: PUSH
11191: LD_INT 3
11193: MUL
11194: GREATEREQUAL
11195: IFFALSE 11202
// enable ( 3 ) else
11197: LD_INT 3
11199: ENABLE_MARKED
11200: GO 11453
// begin for i in Teams [ 1 ] do
11202: LD_ADDR_VAR 0 9
11206: PUSH
11207: LD_EXP 35
11211: PUSH
11212: LD_INT 1
11214: ARRAY
11215: PUSH
11216: FOR_IN
11217: IFFALSE 11250
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
11219: LD_ADDR_VAR 0 5
11223: PUSH
11224: LD_VAR 0 5
11228: PUSH
11229: LD_VAR 0 9
11233: PUSH
11234: LD_INT 10
11236: PLUS
11237: PPUSH
11238: CALL_OW 110
11242: PUSH
11243: LD_INT 3
11245: DIV
11246: PLUS
11247: ST_TO_ADDR
11248: GO 11216
11250: POP
11251: POP
// for i in Teams [ 2 ] do
11252: LD_ADDR_VAR 0 9
11256: PUSH
11257: LD_EXP 35
11261: PUSH
11262: LD_INT 2
11264: ARRAY
11265: PUSH
11266: FOR_IN
11267: IFFALSE 11300
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
11269: LD_ADDR_VAR 0 6
11273: PUSH
11274: LD_VAR 0 6
11278: PUSH
11279: LD_VAR 0 9
11283: PUSH
11284: LD_INT 10
11286: PLUS
11287: PPUSH
11288: CALL_OW 110
11292: PUSH
11293: LD_INT 3
11295: DIV
11296: PLUS
11297: ST_TO_ADDR
11298: GO 11266
11300: POP
11301: POP
// for i in Teams [ 3 ] do
11302: LD_ADDR_VAR 0 9
11306: PUSH
11307: LD_EXP 35
11311: PUSH
11312: LD_INT 3
11314: ARRAY
11315: PUSH
11316: FOR_IN
11317: IFFALSE 11350
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
11319: LD_ADDR_VAR 0 7
11323: PUSH
11324: LD_VAR 0 7
11328: PUSH
11329: LD_VAR 0 9
11333: PUSH
11334: LD_INT 10
11336: PLUS
11337: PPUSH
11338: CALL_OW 110
11342: PUSH
11343: LD_INT 3
11345: DIV
11346: PLUS
11347: ST_TO_ADDR
11348: GO 11316
11350: POP
11351: POP
// for i in Teams [ 4 ] do
11352: LD_ADDR_VAR 0 9
11356: PUSH
11357: LD_EXP 35
11361: PUSH
11362: LD_INT 4
11364: ARRAY
11365: PUSH
11366: FOR_IN
11367: IFFALSE 11400
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
11369: LD_ADDR_VAR 0 8
11373: PUSH
11374: LD_VAR 0 8
11378: PUSH
11379: LD_VAR 0 9
11383: PUSH
11384: LD_INT 10
11386: PLUS
11387: PPUSH
11388: CALL_OW 110
11392: PUSH
11393: LD_INT 3
11395: DIV
11396: PLUS
11397: ST_TO_ADDR
11398: GO 11366
11400: POP
11401: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
11402: LD_VAR 0 5
11406: PUSH
11407: LD_EXP 46
11411: GREATEREQUAL
11412: PUSH
11413: LD_VAR 0 6
11417: PUSH
11418: LD_EXP 46
11422: GREATEREQUAL
11423: OR
11424: PUSH
11425: LD_VAR 0 7
11429: PUSH
11430: LD_EXP 46
11434: GREATEREQUAL
11435: OR
11436: PUSH
11437: LD_VAR 0 8
11441: PUSH
11442: LD_EXP 46
11446: GREATEREQUAL
11447: OR
11448: IFFALSE 11453
// enable ( 3 ) ;
11450: LD_INT 3
11452: ENABLE_MARKED
// end ; end ;
11453: LD_VAR 0 1
11457: RET
// every 0 0$1 marked 2 do
11458: GO 11460
11460: DISABLE
// begin count_king ;
11461: CALL 10955 0 0
// show_public_points ;
11465: CALL 9848 0 0
// enable ;
11469: ENABLE
// end ;
11470: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
11471: GO 11473
11473: DISABLE
11474: LD_INT 0
11476: PPUSH
11477: PPUSH
11478: PPUSH
11479: PPUSH
11480: PPUSH
11481: PPUSH
// begin win := [ ] ;
11482: LD_ADDR_LOC 22
11486: PUSH
11487: EMPTY
11488: ST_TO_ADDR
// red = 0 ;
11489: LD_ADDR_VAR 0 2
11493: PUSH
11494: LD_INT 0
11496: ST_TO_ADDR
// blue = 0 ;
11497: LD_ADDR_VAR 0 3
11501: PUSH
11502: LD_INT 0
11504: ST_TO_ADDR
// yel = 0 ;
11505: LD_ADDR_VAR 0 4
11509: PUSH
11510: LD_INT 0
11512: ST_TO_ADDR
// green = 0 ;
11513: LD_ADDR_VAR 0 5
11517: PUSH
11518: LD_INT 0
11520: ST_TO_ADDR
// if not Team_Game then
11521: LD_EXP 39
11525: NOT
11526: IFFALSE 11603
// begin for side = 1 to 8 do
11528: LD_ADDR_VAR 0 1
11532: PUSH
11533: DOUBLE
11534: LD_INT 1
11536: DEC
11537: ST_TO_ADDR
11538: LD_INT 8
11540: PUSH
11541: FOR_TO
11542: IFFALSE 11587
// if GetTag ( side + 10 ) >= final_count * 3 then
11544: LD_VAR 0 1
11548: PUSH
11549: LD_INT 10
11551: PLUS
11552: PPUSH
11553: CALL_OW 110
11557: PUSH
11558: LD_EXP 46
11562: PUSH
11563: LD_INT 3
11565: MUL
11566: GREATEREQUAL
11567: IFFALSE 11585
// win := win ^ side ;
11569: LD_ADDR_LOC 22
11573: PUSH
11574: LD_LOC 22
11578: PUSH
11579: LD_VAR 0 1
11583: ADD
11584: ST_TO_ADDR
11585: GO 11541
11587: POP
11588: POP
// if win then
11589: LD_LOC 22
11593: IFFALSE 11600
// enable ( 4 ) else
11595: LD_INT 4
11597: ENABLE_MARKED
11598: GO 11601
// enable ;
11600: ENABLE
// end else
11601: GO 11919
// begin for i in Teams [ 1 ] do
11603: LD_ADDR_VAR 0 6
11607: PUSH
11608: LD_EXP 35
11612: PUSH
11613: LD_INT 1
11615: ARRAY
11616: PUSH
11617: FOR_IN
11618: IFFALSE 11651
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
11620: LD_ADDR_VAR 0 2
11624: PUSH
11625: LD_VAR 0 2
11629: PUSH
11630: LD_VAR 0 6
11634: PUSH
11635: LD_INT 10
11637: PLUS
11638: PPUSH
11639: CALL_OW 110
11643: PUSH
11644: LD_INT 3
11646: DIV
11647: PLUS
11648: ST_TO_ADDR
11649: GO 11617
11651: POP
11652: POP
// for i in Teams [ 2 ] do
11653: LD_ADDR_VAR 0 6
11657: PUSH
11658: LD_EXP 35
11662: PUSH
11663: LD_INT 2
11665: ARRAY
11666: PUSH
11667: FOR_IN
11668: IFFALSE 11701
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
11670: LD_ADDR_VAR 0 3
11674: PUSH
11675: LD_VAR 0 3
11679: PUSH
11680: LD_VAR 0 6
11684: PUSH
11685: LD_INT 10
11687: PLUS
11688: PPUSH
11689: CALL_OW 110
11693: PUSH
11694: LD_INT 3
11696: DIV
11697: PLUS
11698: ST_TO_ADDR
11699: GO 11667
11701: POP
11702: POP
// for i in Teams [ 3 ] do
11703: LD_ADDR_VAR 0 6
11707: PUSH
11708: LD_EXP 35
11712: PUSH
11713: LD_INT 3
11715: ARRAY
11716: PUSH
11717: FOR_IN
11718: IFFALSE 11751
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
11720: LD_ADDR_VAR 0 4
11724: PUSH
11725: LD_VAR 0 4
11729: PUSH
11730: LD_VAR 0 6
11734: PUSH
11735: LD_INT 10
11737: PLUS
11738: PPUSH
11739: CALL_OW 110
11743: PUSH
11744: LD_INT 3
11746: DIV
11747: PLUS
11748: ST_TO_ADDR
11749: GO 11717
11751: POP
11752: POP
// for i in Teams [ 4 ] do
11753: LD_ADDR_VAR 0 6
11757: PUSH
11758: LD_EXP 35
11762: PUSH
11763: LD_INT 4
11765: ARRAY
11766: PUSH
11767: FOR_IN
11768: IFFALSE 11801
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
11770: LD_ADDR_VAR 0 5
11774: PUSH
11775: LD_VAR 0 5
11779: PUSH
11780: LD_VAR 0 6
11784: PUSH
11785: LD_INT 10
11787: PLUS
11788: PPUSH
11789: CALL_OW 110
11793: PUSH
11794: LD_INT 3
11796: DIV
11797: PLUS
11798: ST_TO_ADDR
11799: GO 11767
11801: POP
11802: POP
// if red >= final_count then
11803: LD_VAR 0 2
11807: PUSH
11808: LD_EXP 46
11812: GREATEREQUAL
11813: IFFALSE 11829
// win = teams [ 1 ] ;
11815: LD_ADDR_LOC 22
11819: PUSH
11820: LD_EXP 35
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: ST_TO_ADDR
// if blue >= final_count then
11829: LD_VAR 0 3
11833: PUSH
11834: LD_EXP 46
11838: GREATEREQUAL
11839: IFFALSE 11855
// win = teams [ 2 ] ;
11841: LD_ADDR_LOC 22
11845: PUSH
11846: LD_EXP 35
11850: PUSH
11851: LD_INT 2
11853: ARRAY
11854: ST_TO_ADDR
// if yel >= final_count then
11855: LD_VAR 0 4
11859: PUSH
11860: LD_EXP 46
11864: GREATEREQUAL
11865: IFFALSE 11881
// win = teams [ 3 ] ;
11867: LD_ADDR_LOC 22
11871: PUSH
11872: LD_EXP 35
11876: PUSH
11877: LD_INT 3
11879: ARRAY
11880: ST_TO_ADDR
// if green >= final_count then
11881: LD_VAR 0 5
11885: PUSH
11886: LD_EXP 46
11890: GREATEREQUAL
11891: IFFALSE 11907
// win = teams [ 4 ] ;
11893: LD_ADDR_LOC 22
11897: PUSH
11898: LD_EXP 35
11902: PUSH
11903: LD_INT 4
11905: ARRAY
11906: ST_TO_ADDR
// if win then
11907: LD_LOC 22
11911: IFFALSE 11918
// enable ( 4 ) else
11913: LD_INT 4
11915: ENABLE_MARKED
11916: GO 11919
// enable ;
11918: ENABLE
// end ; end ;
11919: PPOPN 6
11921: END
// every 0 0$1 marked 4 do
11922: GO 11924
11924: DISABLE
// begin if Player_Side in win then
11925: LD_EXP 47
11929: PUSH
11930: LD_LOC 22
11934: IN
11935: IFFALSE 11951
// begin wait ( 0 0$2 ) ;
11937: LD_INT 70
11939: PPUSH
11940: CALL_OW 67
// enable ( 401 ) ;
11944: LD_INT 401
11946: ENABLE_MARKED
// exit ;
11947: GO 11967
// end else
11949: GO 11967
// begin wait ( 0 0$2 ) ;
11951: LD_INT 70
11953: PPUSH
11954: CALL_OW 67
// Multiplayer_Loose_Message ;
11958: CALL_OW 521
// enable ( 400 ) ;
11962: LD_INT 400
11964: ENABLE_MARKED
// exit ;
11965: GO 11967
// end ; end ; end_of_file
11967: END
// export function SetMpTechs ( ) ; var side , i ; begin
11968: LD_INT 0
11970: PPUSH
11971: PPUSH
11972: PPUSH
// for side = 1 to 8 do
11973: LD_ADDR_VAR 0 2
11977: PUSH
11978: DOUBLE
11979: LD_INT 1
11981: DEC
11982: ST_TO_ADDR
11983: LD_INT 8
11985: PUSH
11986: FOR_TO
11987: IFFALSE 12108
// begin for i = 1 to 72 do
11989: LD_ADDR_VAR 0 3
11993: PUSH
11994: DOUBLE
11995: LD_INT 1
11997: DEC
11998: ST_TO_ADDR
11999: LD_INT 72
12001: PUSH
12002: FOR_TO
12003: IFFALSE 12034
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12005: LD_VAR 0 3
12009: PPUSH
12010: LD_VAR 0 2
12014: PPUSH
12015: LD_INT 0
12017: PPUSH
12018: LD_VAR 0 3
12022: PPUSH
12023: CALL_OW 565
12027: PPUSH
12028: CALL_OW 322
12032: GO 12002
12034: POP
12035: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12036: LD_INT 73
12038: PPUSH
12039: LD_VAR 0 2
12043: PPUSH
12044: LD_INT 0
12046: PPUSH
12047: LD_INT 25
12049: PPUSH
12050: CALL_OW 565
12054: PPUSH
12055: CALL_OW 322
// for i = 0 to 40 do
12059: LD_ADDR_VAR 0 3
12063: PUSH
12064: DOUBLE
12065: LD_INT 0
12067: DEC
12068: ST_TO_ADDR
12069: LD_INT 40
12071: PUSH
12072: FOR_TO
12073: IFFALSE 12104
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12075: LD_VAR 0 3
12079: PPUSH
12080: LD_VAR 0 2
12084: PPUSH
12085: LD_INT 1
12087: PPUSH
12088: LD_VAR 0 3
12092: PPUSH
12093: CALL_OW 565
12097: PPUSH
12098: CALL_OW 324
12102: GO 12072
12104: POP
12105: POP
// end ;
12106: GO 11986
12108: POP
12109: POP
// end ;
12110: LD_VAR 0 1
12114: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12115: LD_INT 0
12117: PPUSH
12118: PPUSH
12119: PPUSH
// for side = 1 to 8 do
12120: LD_ADDR_VAR 0 3
12124: PUSH
12125: DOUBLE
12126: LD_INT 1
12128: DEC
12129: ST_TO_ADDR
12130: LD_INT 8
12132: PUSH
12133: FOR_TO
12134: IFFALSE 16130
// begin for i = 1 to 73 do
12136: LD_ADDR_VAR 0 4
12140: PUSH
12141: DOUBLE
12142: LD_INT 1
12144: DEC
12145: ST_TO_ADDR
12146: LD_INT 73
12148: PUSH
12149: FOR_TO
12150: IFFALSE 12171
// SetTech ( i , side , state_disabled ) ;
12152: LD_VAR 0 4
12156: PPUSH
12157: LD_VAR 0 3
12161: PPUSH
12162: LD_INT 0
12164: PPUSH
12165: CALL_OW 322
12169: GO 12149
12171: POP
12172: POP
// for i = 0 to 40 do
12173: LD_ADDR_VAR 0 4
12177: PUSH
12178: DOUBLE
12179: LD_INT 0
12181: DEC
12182: ST_TO_ADDR
12183: LD_INT 40
12185: PUSH
12186: FOR_TO
12187: IFFALSE 12208
// SetRestrict ( i , side , false ) ;
12189: LD_VAR 0 4
12193: PPUSH
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 0
12201: PPUSH
12202: CALL_OW 324
12206: GO 12186
12208: POP
12209: POP
// case level of 1 :
12210: LD_VAR 0 1
12214: PUSH
12215: LD_INT 1
12217: DOUBLE
12218: EQUAL
12219: IFTRUE 12223
12221: GO 12376
12223: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12224: LD_INT 35
12226: PPUSH
12227: LD_VAR 0 3
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12239: LD_INT 45
12241: PPUSH
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12254: LD_INT 46
12256: PPUSH
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12269: LD_INT 47
12271: PPUSH
12272: LD_VAR 0 3
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12284: LD_INT 0
12286: PPUSH
12287: LD_VAR 0 3
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12299: LD_INT 2
12301: PPUSH
12302: LD_VAR 0 3
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12314: LD_INT 4
12316: PPUSH
12317: LD_VAR 0 3
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12329: LD_INT 6
12331: PPUSH
12332: LD_VAR 0 3
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12344: LD_INT 29
12346: PPUSH
12347: LD_VAR 0 3
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12359: LD_INT 31
12361: PPUSH
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 1
12369: PPUSH
12370: CALL_OW 324
// end ; 2 :
12374: GO 16128
12376: LD_INT 2
12378: DOUBLE
12379: EQUAL
12380: IFTRUE 12384
12382: GO 12582
12384: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12385: LD_INT 35
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: LD_INT 1
12395: PPUSH
12396: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12400: LD_INT 45
12402: PPUSH
12403: LD_VAR 0 3
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12415: LD_INT 46
12417: PPUSH
12418: LD_VAR 0 3
12422: PPUSH
12423: LD_INT 1
12425: PPUSH
12426: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12430: LD_INT 47
12432: PPUSH
12433: LD_VAR 0 3
12437: PPUSH
12438: LD_INT 1
12440: PPUSH
12441: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12445: LD_INT 1
12447: PPUSH
12448: LD_VAR 0 3
12452: PPUSH
12453: LD_INT 1
12455: PPUSH
12456: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12460: LD_INT 2
12462: PPUSH
12463: LD_VAR 0 3
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12475: LD_INT 11
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: LD_INT 1
12485: PPUSH
12486: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12490: LD_INT 0
12492: PPUSH
12493: LD_VAR 0 3
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12505: LD_INT 2
12507: PPUSH
12508: LD_VAR 0 3
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12520: LD_INT 4
12522: PPUSH
12523: LD_VAR 0 3
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12535: LD_INT 6
12537: PPUSH
12538: LD_VAR 0 3
12542: PPUSH
12543: LD_INT 1
12545: PPUSH
12546: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12550: LD_INT 29
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: LD_INT 1
12560: PPUSH
12561: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12565: LD_INT 31
12567: PPUSH
12568: LD_VAR 0 3
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: CALL_OW 324
// end ; 3 :
12580: GO 16128
12582: LD_INT 3
12584: DOUBLE
12585: EQUAL
12586: IFTRUE 12590
12588: GO 13043
12590: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12591: LD_INT 35
12593: PPUSH
12594: LD_VAR 0 3
12598: PPUSH
12599: LD_INT 1
12601: PPUSH
12602: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12606: LD_INT 45
12608: PPUSH
12609: LD_VAR 0 3
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12621: LD_INT 46
12623: PPUSH
12624: LD_VAR 0 3
12628: PPUSH
12629: LD_INT 1
12631: PPUSH
12632: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12636: LD_INT 47
12638: PPUSH
12639: LD_VAR 0 3
12643: PPUSH
12644: LD_INT 1
12646: PPUSH
12647: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12651: LD_INT 1
12653: PPUSH
12654: LD_VAR 0 3
12658: PPUSH
12659: LD_INT 1
12661: PPUSH
12662: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12666: LD_INT 2
12668: PPUSH
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_INT 1
12676: PPUSH
12677: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12681: LD_INT 11
12683: PPUSH
12684: LD_VAR 0 3
12688: PPUSH
12689: LD_INT 1
12691: PPUSH
12692: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12696: LD_INT 48
12698: PPUSH
12699: LD_VAR 0 3
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12711: LD_INT 69
12713: PPUSH
12714: LD_VAR 0 3
12718: PPUSH
12719: LD_INT 1
12721: PPUSH
12722: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12726: LD_INT 39
12728: PPUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: LD_INT 1
12736: PPUSH
12737: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12741: LD_INT 43
12743: PPUSH
12744: LD_VAR 0 3
12748: PPUSH
12749: LD_INT 1
12751: PPUSH
12752: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12756: LD_INT 51
12758: PPUSH
12759: LD_VAR 0 3
12763: PPUSH
12764: LD_INT 1
12766: PPUSH
12767: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12771: LD_INT 6
12773: PPUSH
12774: LD_VAR 0 3
12778: PPUSH
12779: LD_INT 1
12781: PPUSH
12782: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12786: LD_INT 0
12788: PPUSH
12789: LD_VAR 0 3
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12801: LD_INT 2
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: LD_INT 1
12811: PPUSH
12812: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12816: LD_INT 3
12818: PPUSH
12819: LD_VAR 0 3
12823: PPUSH
12824: LD_INT 1
12826: PPUSH
12827: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12831: LD_INT 4
12833: PPUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12846: LD_INT 6
12848: PPUSH
12849: LD_VAR 0 3
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12861: LD_INT 7
12863: PPUSH
12864: LD_VAR 0 3
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12876: LD_INT 8
12878: PPUSH
12879: LD_VAR 0 3
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12891: LD_INT 10
12893: PPUSH
12894: LD_VAR 0 3
12898: PPUSH
12899: LD_INT 1
12901: PPUSH
12902: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12906: LD_INT 15
12908: PPUSH
12909: LD_VAR 0 3
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12921: LD_INT 16
12923: PPUSH
12924: LD_VAR 0 3
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12936: LD_INT 17
12938: PPUSH
12939: LD_VAR 0 3
12943: PPUSH
12944: LD_INT 1
12946: PPUSH
12947: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12951: LD_INT 20
12953: PPUSH
12954: LD_VAR 0 3
12958: PPUSH
12959: LD_INT 1
12961: PPUSH
12962: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12966: LD_INT 26
12968: PPUSH
12969: LD_VAR 0 3
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12981: LD_INT 27
12983: PPUSH
12984: LD_VAR 0 3
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12996: LD_INT 29
12998: PPUSH
12999: LD_VAR 0 3
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13011: LD_INT 31
13013: PPUSH
13014: LD_VAR 0 3
13018: PPUSH
13019: LD_INT 1
13021: PPUSH
13022: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13026: LD_INT 32
13028: PPUSH
13029: LD_VAR 0 3
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: CALL_OW 324
// end ; 4 :
13041: GO 16128
13043: LD_INT 4
13045: DOUBLE
13046: EQUAL
13047: IFTRUE 13051
13049: GO 13999
13051: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13052: LD_INT 35
13054: PPUSH
13055: LD_VAR 0 3
13059: PPUSH
13060: LD_INT 1
13062: PPUSH
13063: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13067: LD_INT 45
13069: PPUSH
13070: LD_VAR 0 3
13074: PPUSH
13075: LD_INT 1
13077: PPUSH
13078: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13082: LD_INT 46
13084: PPUSH
13085: LD_VAR 0 3
13089: PPUSH
13090: LD_INT 1
13092: PPUSH
13093: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13097: LD_INT 47
13099: PPUSH
13100: LD_VAR 0 3
13104: PPUSH
13105: LD_INT 1
13107: PPUSH
13108: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13112: LD_INT 1
13114: PPUSH
13115: LD_VAR 0 3
13119: PPUSH
13120: LD_INT 1
13122: PPUSH
13123: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13127: LD_INT 2
13129: PPUSH
13130: LD_VAR 0 3
13134: PPUSH
13135: LD_INT 1
13137: PPUSH
13138: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13142: LD_INT 11
13144: PPUSH
13145: LD_VAR 0 3
13149: PPUSH
13150: LD_INT 1
13152: PPUSH
13153: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13157: LD_INT 20
13159: PPUSH
13160: LD_VAR 0 3
13164: PPUSH
13165: LD_INT 1
13167: PPUSH
13168: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13172: LD_INT 48
13174: PPUSH
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 1
13182: PPUSH
13183: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13187: LD_INT 49
13189: PPUSH
13190: LD_VAR 0 3
13194: PPUSH
13195: LD_INT 1
13197: PPUSH
13198: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13202: LD_INT 69
13204: PPUSH
13205: LD_VAR 0 3
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13217: LD_INT 39
13219: PPUSH
13220: LD_VAR 0 3
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13232: LD_INT 34
13234: PPUSH
13235: LD_VAR 0 3
13239: PPUSH
13240: LD_INT 1
13242: PPUSH
13243: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13247: LD_INT 42
13249: PPUSH
13250: LD_VAR 0 3
13254: PPUSH
13255: LD_INT 1
13257: PPUSH
13258: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13262: LD_INT 44
13264: PPUSH
13265: LD_VAR 0 3
13269: PPUSH
13270: LD_INT 1
13272: PPUSH
13273: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13277: LD_INT 41
13279: PPUSH
13280: LD_VAR 0 3
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13292: LD_INT 43
13294: PPUSH
13295: LD_VAR 0 3
13299: PPUSH
13300: LD_INT 1
13302: PPUSH
13303: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13307: LD_INT 70
13309: PPUSH
13310: LD_VAR 0 3
13314: PPUSH
13315: LD_INT 1
13317: PPUSH
13318: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13322: LD_INT 51
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13337: LD_INT 52
13339: PPUSH
13340: LD_VAR 0 3
13344: PPUSH
13345: LD_INT 1
13347: PPUSH
13348: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13352: LD_INT 6
13354: PPUSH
13355: LD_VAR 0 3
13359: PPUSH
13360: LD_INT 1
13362: PPUSH
13363: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13367: LD_INT 15
13369: PPUSH
13370: LD_VAR 0 3
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13382: LD_INT 7
13384: PPUSH
13385: LD_VAR 0 3
13389: PPUSH
13390: LD_INT 1
13392: PPUSH
13393: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13397: LD_INT 12
13399: PPUSH
13400: LD_VAR 0 3
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13412: LD_INT 18
13414: PPUSH
13415: LD_VAR 0 3
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13427: LD_INT 60
13429: PPUSH
13430: LD_VAR 0 3
13434: PPUSH
13435: LD_INT 1
13437: PPUSH
13438: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13442: LD_INT 9
13444: PPUSH
13445: LD_VAR 0 3
13449: PPUSH
13450: LD_INT 1
13452: PPUSH
13453: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13457: LD_INT 30
13459: PPUSH
13460: LD_VAR 0 3
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13472: LD_INT 37
13474: PPUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: LD_INT 1
13482: PPUSH
13483: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13487: LD_INT 5
13489: PPUSH
13490: LD_VAR 0 3
13494: PPUSH
13495: LD_INT 1
13497: PPUSH
13498: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13502: LD_INT 66
13504: PPUSH
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 1
13512: PPUSH
13513: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13517: LD_INT 21
13519: PPUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: LD_INT 1
13527: PPUSH
13528: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13532: LD_INT 22
13534: PPUSH
13535: LD_VAR 0 3
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13547: LD_INT 54
13549: PPUSH
13550: LD_VAR 0 3
13554: PPUSH
13555: LD_INT 1
13557: PPUSH
13558: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13562: LD_INT 0
13564: PPUSH
13565: LD_VAR 0 3
13569: PPUSH
13570: LD_INT 1
13572: PPUSH
13573: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13577: LD_INT 1
13579: PPUSH
13580: LD_VAR 0 3
13584: PPUSH
13585: LD_INT 1
13587: PPUSH
13588: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13592: LD_INT 2
13594: PPUSH
13595: LD_VAR 0 3
13599: PPUSH
13600: LD_INT 1
13602: PPUSH
13603: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13607: LD_INT 3
13609: PPUSH
13610: LD_VAR 0 3
13614: PPUSH
13615: LD_INT 1
13617: PPUSH
13618: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13622: LD_INT 4
13624: PPUSH
13625: LD_VAR 0 3
13629: PPUSH
13630: LD_INT 1
13632: PPUSH
13633: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13637: LD_INT 5
13639: PPUSH
13640: LD_VAR 0 3
13644: PPUSH
13645: LD_INT 1
13647: PPUSH
13648: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13652: LD_INT 6
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: LD_INT 1
13662: PPUSH
13663: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13667: LD_INT 7
13669: PPUSH
13670: LD_VAR 0 3
13674: PPUSH
13675: LD_INT 1
13677: PPUSH
13678: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13682: LD_INT 8
13684: PPUSH
13685: LD_VAR 0 3
13689: PPUSH
13690: LD_INT 1
13692: PPUSH
13693: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13697: LD_INT 10
13699: PPUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13712: LD_INT 11
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 1
13722: PPUSH
13723: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13727: LD_INT 12
13729: PPUSH
13730: LD_VAR 0 3
13734: PPUSH
13735: LD_INT 1
13737: PPUSH
13738: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13742: LD_INT 13
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13757: LD_INT 14
13759: PPUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13772: LD_INT 15
13774: PPUSH
13775: LD_VAR 0 3
13779: PPUSH
13780: LD_INT 1
13782: PPUSH
13783: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13787: LD_INT 16
13789: PPUSH
13790: LD_VAR 0 3
13794: PPUSH
13795: LD_INT 1
13797: PPUSH
13798: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13802: LD_INT 17
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13817: LD_INT 19
13819: PPUSH
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_INT 1
13827: PPUSH
13828: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13832: LD_INT 20
13834: PPUSH
13835: LD_VAR 0 3
13839: PPUSH
13840: LD_INT 1
13842: PPUSH
13843: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13847: LD_INT 21
13849: PPUSH
13850: LD_VAR 0 3
13854: PPUSH
13855: LD_INT 1
13857: PPUSH
13858: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13862: LD_INT 23
13864: PPUSH
13865: LD_VAR 0 3
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13877: LD_INT 26
13879: PPUSH
13880: LD_VAR 0 3
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13892: LD_INT 27
13894: PPUSH
13895: LD_VAR 0 3
13899: PPUSH
13900: LD_INT 1
13902: PPUSH
13903: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13907: LD_INT 28
13909: PPUSH
13910: LD_VAR 0 3
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13922: LD_INT 29
13924: PPUSH
13925: LD_VAR 0 3
13929: PPUSH
13930: LD_INT 1
13932: PPUSH
13933: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13937: LD_INT 30
13939: PPUSH
13940: LD_VAR 0 3
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13952: LD_INT 31
13954: PPUSH
13955: LD_VAR 0 3
13959: PPUSH
13960: LD_INT 1
13962: PPUSH
13963: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13967: LD_INT 32
13969: PPUSH
13970: LD_VAR 0 3
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13982: LD_INT 36
13984: PPUSH
13985: LD_VAR 0 3
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 324
// end ; 5 :
13997: GO 16128
13999: LD_INT 5
14001: DOUBLE
14002: EQUAL
14003: IFTRUE 14007
14005: GO 15120
14007: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14008: LD_INT 35
14010: PPUSH
14011: LD_VAR 0 3
14015: PPUSH
14016: LD_INT 1
14018: PPUSH
14019: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14023: LD_INT 45
14025: PPUSH
14026: LD_VAR 0 3
14030: PPUSH
14031: LD_INT 1
14033: PPUSH
14034: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14038: LD_INT 46
14040: PPUSH
14041: LD_VAR 0 3
14045: PPUSH
14046: LD_INT 1
14048: PPUSH
14049: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14053: LD_INT 47
14055: PPUSH
14056: LD_VAR 0 3
14060: PPUSH
14061: LD_INT 1
14063: PPUSH
14064: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14068: LD_INT 1
14070: PPUSH
14071: LD_VAR 0 3
14075: PPUSH
14076: LD_INT 1
14078: PPUSH
14079: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14083: LD_INT 2
14085: PPUSH
14086: LD_VAR 0 3
14090: PPUSH
14091: LD_INT 1
14093: PPUSH
14094: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14098: LD_INT 11
14100: PPUSH
14101: LD_VAR 0 3
14105: PPUSH
14106: LD_INT 1
14108: PPUSH
14109: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14113: LD_INT 20
14115: PPUSH
14116: LD_VAR 0 3
14120: PPUSH
14121: LD_INT 1
14123: PPUSH
14124: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14128: LD_INT 48
14130: PPUSH
14131: LD_VAR 0 3
14135: PPUSH
14136: LD_INT 1
14138: PPUSH
14139: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14143: LD_INT 49
14145: PPUSH
14146: LD_VAR 0 3
14150: PPUSH
14151: LD_INT 1
14153: PPUSH
14154: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14158: LD_INT 69
14160: PPUSH
14161: LD_VAR 0 3
14165: PPUSH
14166: LD_INT 1
14168: PPUSH
14169: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14173: LD_INT 39
14175: PPUSH
14176: LD_VAR 0 3
14180: PPUSH
14181: LD_INT 1
14183: PPUSH
14184: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14188: LD_INT 34
14190: PPUSH
14191: LD_VAR 0 3
14195: PPUSH
14196: LD_INT 1
14198: PPUSH
14199: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14203: LD_INT 42
14205: PPUSH
14206: LD_VAR 0 3
14210: PPUSH
14211: LD_INT 1
14213: PPUSH
14214: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14218: LD_INT 44
14220: PPUSH
14221: LD_VAR 0 3
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14233: LD_INT 41
14235: PPUSH
14236: LD_VAR 0 3
14240: PPUSH
14241: LD_INT 1
14243: PPUSH
14244: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14248: LD_INT 40
14250: PPUSH
14251: LD_VAR 0 3
14255: PPUSH
14256: LD_INT 1
14258: PPUSH
14259: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14263: LD_INT 43
14265: PPUSH
14266: LD_VAR 0 3
14270: PPUSH
14271: LD_INT 1
14273: PPUSH
14274: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14278: LD_INT 70
14280: PPUSH
14281: LD_VAR 0 3
14285: PPUSH
14286: LD_INT 1
14288: PPUSH
14289: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14293: LD_INT 51
14295: PPUSH
14296: LD_VAR 0 3
14300: PPUSH
14301: LD_INT 1
14303: PPUSH
14304: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14308: LD_INT 52
14310: PPUSH
14311: LD_VAR 0 3
14315: PPUSH
14316: LD_INT 1
14318: PPUSH
14319: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14323: LD_INT 6
14325: PPUSH
14326: LD_VAR 0 3
14330: PPUSH
14331: LD_INT 1
14333: PPUSH
14334: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14338: LD_INT 15
14340: PPUSH
14341: LD_VAR 0 3
14345: PPUSH
14346: LD_INT 1
14348: PPUSH
14349: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14353: LD_INT 7
14355: PPUSH
14356: LD_VAR 0 3
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14368: LD_INT 12
14370: PPUSH
14371: LD_VAR 0 3
14375: PPUSH
14376: LD_INT 1
14378: PPUSH
14379: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14383: LD_INT 17
14385: PPUSH
14386: LD_VAR 0 3
14390: PPUSH
14391: LD_INT 1
14393: PPUSH
14394: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14398: LD_INT 18
14400: PPUSH
14401: LD_VAR 0 3
14405: PPUSH
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14413: LD_INT 60
14415: PPUSH
14416: LD_VAR 0 3
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14428: LD_INT 32
14430: PPUSH
14431: LD_VAR 0 3
14435: PPUSH
14436: LD_INT 1
14438: PPUSH
14439: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14443: LD_INT 9
14445: PPUSH
14446: LD_VAR 0 3
14450: PPUSH
14451: LD_INT 1
14453: PPUSH
14454: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14458: LD_INT 57
14460: PPUSH
14461: LD_VAR 0 3
14465: PPUSH
14466: LD_INT 1
14468: PPUSH
14469: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14473: LD_INT 30
14475: PPUSH
14476: LD_VAR 0 3
14480: PPUSH
14481: LD_INT 1
14483: PPUSH
14484: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14488: LD_INT 37
14490: PPUSH
14491: LD_VAR 0 3
14495: PPUSH
14496: LD_INT 1
14498: PPUSH
14499: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14503: LD_INT 63
14505: PPUSH
14506: LD_VAR 0 3
14510: PPUSH
14511: LD_INT 1
14513: PPUSH
14514: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14518: LD_INT 3
14520: PPUSH
14521: LD_VAR 0 3
14525: PPUSH
14526: LD_INT 1
14528: PPUSH
14529: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14533: LD_INT 4
14535: PPUSH
14536: LD_VAR 0 3
14540: PPUSH
14541: LD_INT 1
14543: PPUSH
14544: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14548: LD_INT 5
14550: PPUSH
14551: LD_VAR 0 3
14555: PPUSH
14556: LD_INT 1
14558: PPUSH
14559: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14563: LD_INT 66
14565: PPUSH
14566: LD_VAR 0 3
14570: PPUSH
14571: LD_INT 1
14573: PPUSH
14574: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14578: LD_INT 21
14580: PPUSH
14581: LD_VAR 0 3
14585: PPUSH
14586: LD_INT 1
14588: PPUSH
14589: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14593: LD_INT 22
14595: PPUSH
14596: LD_VAR 0 3
14600: PPUSH
14601: LD_INT 1
14603: PPUSH
14604: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14608: LD_INT 19
14610: PPUSH
14611: LD_VAR 0 3
14615: PPUSH
14616: LD_INT 1
14618: PPUSH
14619: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14623: LD_INT 54
14625: PPUSH
14626: LD_VAR 0 3
14630: PPUSH
14631: LD_INT 1
14633: PPUSH
14634: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14638: LD_INT 55
14640: PPUSH
14641: LD_VAR 0 3
14645: PPUSH
14646: LD_INT 1
14648: PPUSH
14649: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14653: LD_INT 0
14655: PPUSH
14656: LD_VAR 0 3
14660: PPUSH
14661: LD_INT 1
14663: PPUSH
14664: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14668: LD_INT 1
14670: PPUSH
14671: LD_VAR 0 3
14675: PPUSH
14676: LD_INT 1
14678: PPUSH
14679: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14683: LD_INT 2
14685: PPUSH
14686: LD_VAR 0 3
14690: PPUSH
14691: LD_INT 1
14693: PPUSH
14694: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14698: LD_INT 3
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: LD_INT 1
14708: PPUSH
14709: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14713: LD_INT 4
14715: PPUSH
14716: LD_VAR 0 3
14720: PPUSH
14721: LD_INT 1
14723: PPUSH
14724: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14728: LD_INT 5
14730: PPUSH
14731: LD_VAR 0 3
14735: PPUSH
14736: LD_INT 1
14738: PPUSH
14739: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14743: LD_INT 6
14745: PPUSH
14746: LD_VAR 0 3
14750: PPUSH
14751: LD_INT 1
14753: PPUSH
14754: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14758: LD_INT 7
14760: PPUSH
14761: LD_VAR 0 3
14765: PPUSH
14766: LD_INT 1
14768: PPUSH
14769: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14773: LD_INT 8
14775: PPUSH
14776: LD_VAR 0 3
14780: PPUSH
14781: LD_INT 1
14783: PPUSH
14784: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14788: LD_INT 10
14790: PPUSH
14791: LD_VAR 0 3
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14803: LD_INT 11
14805: PPUSH
14806: LD_VAR 0 3
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14818: LD_INT 12
14820: PPUSH
14821: LD_VAR 0 3
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14833: LD_INT 13
14835: PPUSH
14836: LD_VAR 0 3
14840: PPUSH
14841: LD_INT 1
14843: PPUSH
14844: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14848: LD_INT 14
14850: PPUSH
14851: LD_VAR 0 3
14855: PPUSH
14856: LD_INT 1
14858: PPUSH
14859: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14863: LD_INT 15
14865: PPUSH
14866: LD_VAR 0 3
14870: PPUSH
14871: LD_INT 1
14873: PPUSH
14874: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14878: LD_INT 16
14880: PPUSH
14881: LD_VAR 0 3
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14893: LD_INT 17
14895: PPUSH
14896: LD_VAR 0 3
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14908: LD_INT 18
14910: PPUSH
14911: LD_VAR 0 3
14915: PPUSH
14916: LD_INT 1
14918: PPUSH
14919: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14923: LD_INT 19
14925: PPUSH
14926: LD_VAR 0 3
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14938: LD_INT 20
14940: PPUSH
14941: LD_VAR 0 3
14945: PPUSH
14946: LD_INT 1
14948: PPUSH
14949: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14953: LD_INT 21
14955: PPUSH
14956: LD_VAR 0 3
14960: PPUSH
14961: LD_INT 1
14963: PPUSH
14964: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14968: LD_INT 23
14970: PPUSH
14971: LD_VAR 0 3
14975: PPUSH
14976: LD_INT 1
14978: PPUSH
14979: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14983: LD_INT 26
14985: PPUSH
14986: LD_VAR 0 3
14990: PPUSH
14991: LD_INT 1
14993: PPUSH
14994: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14998: LD_INT 27
15000: PPUSH
15001: LD_VAR 0 3
15005: PPUSH
15006: LD_INT 1
15008: PPUSH
15009: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15013: LD_INT 28
15015: PPUSH
15016: LD_VAR 0 3
15020: PPUSH
15021: LD_INT 1
15023: PPUSH
15024: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15028: LD_INT 29
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: LD_INT 1
15038: PPUSH
15039: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15043: LD_INT 30
15045: PPUSH
15046: LD_VAR 0 3
15050: PPUSH
15051: LD_INT 1
15053: PPUSH
15054: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15058: LD_INT 31
15060: PPUSH
15061: LD_VAR 0 3
15065: PPUSH
15066: LD_INT 1
15068: PPUSH
15069: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15073: LD_INT 32
15075: PPUSH
15076: LD_VAR 0 3
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15088: LD_INT 33
15090: PPUSH
15091: LD_VAR 0 3
15095: PPUSH
15096: LD_INT 1
15098: PPUSH
15099: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15103: LD_INT 36
15105: PPUSH
15106: LD_VAR 0 3
15110: PPUSH
15111: LD_INT 1
15113: PPUSH
15114: CALL_OW 324
// end ; 6 :
15118: GO 16128
15120: LD_INT 6
15122: DOUBLE
15123: EQUAL
15124: IFTRUE 15128
15126: GO 16053
15128: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15129: LD_INT 35
15131: PPUSH
15132: LD_VAR 0 3
15136: PPUSH
15137: LD_INT 1
15139: PPUSH
15140: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15144: LD_INT 45
15146: PPUSH
15147: LD_VAR 0 3
15151: PPUSH
15152: LD_INT 1
15154: PPUSH
15155: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15159: LD_INT 46
15161: PPUSH
15162: LD_VAR 0 3
15166: PPUSH
15167: LD_INT 1
15169: PPUSH
15170: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15174: LD_INT 47
15176: PPUSH
15177: LD_VAR 0 3
15181: PPUSH
15182: LD_INT 1
15184: PPUSH
15185: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15189: LD_INT 1
15191: PPUSH
15192: LD_VAR 0 3
15196: PPUSH
15197: LD_INT 1
15199: PPUSH
15200: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15204: LD_INT 2
15206: PPUSH
15207: LD_VAR 0 3
15211: PPUSH
15212: LD_INT 1
15214: PPUSH
15215: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15219: LD_INT 11
15221: PPUSH
15222: LD_VAR 0 3
15226: PPUSH
15227: LD_INT 1
15229: PPUSH
15230: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15234: LD_INT 20
15236: PPUSH
15237: LD_VAR 0 3
15241: PPUSH
15242: LD_INT 1
15244: PPUSH
15245: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15249: LD_INT 48
15251: PPUSH
15252: LD_VAR 0 3
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15264: LD_INT 49
15266: PPUSH
15267: LD_VAR 0 3
15271: PPUSH
15272: LD_INT 1
15274: PPUSH
15275: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15279: LD_INT 50
15281: PPUSH
15282: LD_VAR 0 3
15286: PPUSH
15287: LD_INT 1
15289: PPUSH
15290: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15294: LD_INT 69
15296: PPUSH
15297: LD_VAR 0 3
15301: PPUSH
15302: LD_INT 1
15304: PPUSH
15305: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15309: LD_INT 39
15311: PPUSH
15312: LD_VAR 0 3
15316: PPUSH
15317: LD_INT 1
15319: PPUSH
15320: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15324: LD_INT 34
15326: PPUSH
15327: LD_VAR 0 3
15331: PPUSH
15332: LD_INT 1
15334: PPUSH
15335: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15339: LD_INT 42
15341: PPUSH
15342: LD_VAR 0 3
15346: PPUSH
15347: LD_INT 1
15349: PPUSH
15350: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15354: LD_INT 44
15356: PPUSH
15357: LD_VAR 0 3
15361: PPUSH
15362: LD_INT 1
15364: PPUSH
15365: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15369: LD_INT 41
15371: PPUSH
15372: LD_VAR 0 3
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15384: LD_INT 13
15386: PPUSH
15387: LD_VAR 0 3
15391: PPUSH
15392: LD_INT 1
15394: PPUSH
15395: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15399: LD_INT 40
15401: PPUSH
15402: LD_VAR 0 3
15406: PPUSH
15407: LD_INT 1
15409: PPUSH
15410: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15414: LD_INT 43
15416: PPUSH
15417: LD_VAR 0 3
15421: PPUSH
15422: LD_INT 1
15424: PPUSH
15425: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15429: LD_INT 70
15431: PPUSH
15432: LD_VAR 0 3
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15444: LD_INT 23
15446: PPUSH
15447: LD_VAR 0 3
15451: PPUSH
15452: LD_INT 1
15454: PPUSH
15455: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15459: LD_INT 51
15461: PPUSH
15462: LD_VAR 0 3
15466: PPUSH
15467: LD_INT 1
15469: PPUSH
15470: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15474: LD_INT 52
15476: PPUSH
15477: LD_VAR 0 3
15481: PPUSH
15482: LD_INT 1
15484: PPUSH
15485: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15489: LD_INT 6
15491: PPUSH
15492: LD_VAR 0 3
15496: PPUSH
15497: LD_INT 1
15499: PPUSH
15500: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15504: LD_INT 15
15506: PPUSH
15507: LD_VAR 0 3
15511: PPUSH
15512: LD_INT 1
15514: PPUSH
15515: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15519: LD_INT 7
15521: PPUSH
15522: LD_VAR 0 3
15526: PPUSH
15527: LD_INT 1
15529: PPUSH
15530: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15534: LD_INT 12
15536: PPUSH
15537: LD_VAR 0 3
15541: PPUSH
15542: LD_INT 1
15544: PPUSH
15545: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15549: LD_INT 10
15551: PPUSH
15552: LD_VAR 0 3
15556: PPUSH
15557: LD_INT 1
15559: PPUSH
15560: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15564: LD_INT 17
15566: PPUSH
15567: LD_VAR 0 3
15571: PPUSH
15572: LD_INT 1
15574: PPUSH
15575: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15579: LD_INT 18
15581: PPUSH
15582: LD_VAR 0 3
15586: PPUSH
15587: LD_INT 1
15589: PPUSH
15590: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15594: LD_INT 60
15596: PPUSH
15597: LD_VAR 0 3
15601: PPUSH
15602: LD_INT 1
15604: PPUSH
15605: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15609: LD_INT 61
15611: PPUSH
15612: LD_VAR 0 3
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15624: LD_INT 32
15626: PPUSH
15627: LD_VAR 0 3
15631: PPUSH
15632: LD_INT 1
15634: PPUSH
15635: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15639: LD_INT 27
15641: PPUSH
15642: LD_VAR 0 3
15646: PPUSH
15647: LD_INT 1
15649: PPUSH
15650: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15654: LD_INT 36
15656: PPUSH
15657: LD_VAR 0 3
15661: PPUSH
15662: LD_INT 1
15664: PPUSH
15665: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15669: LD_INT 33
15671: PPUSH
15672: LD_VAR 0 3
15676: PPUSH
15677: LD_INT 1
15679: PPUSH
15680: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15684: LD_INT 9
15686: PPUSH
15687: LD_VAR 0 3
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15699: LD_INT 38
15701: PPUSH
15702: LD_VAR 0 3
15706: PPUSH
15707: LD_INT 1
15709: PPUSH
15710: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15714: LD_INT 57
15716: PPUSH
15717: LD_VAR 0 3
15721: PPUSH
15722: LD_INT 1
15724: PPUSH
15725: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15729: LD_INT 58
15731: PPUSH
15732: LD_VAR 0 3
15736: PPUSH
15737: LD_INT 1
15739: PPUSH
15740: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15744: LD_INT 28
15746: PPUSH
15747: LD_VAR 0 3
15751: PPUSH
15752: LD_INT 1
15754: PPUSH
15755: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15759: LD_INT 29
15761: PPUSH
15762: LD_VAR 0 3
15766: PPUSH
15767: LD_INT 1
15769: PPUSH
15770: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15774: LD_INT 30
15776: PPUSH
15777: LD_VAR 0 3
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15789: LD_INT 37
15791: PPUSH
15792: LD_VAR 0 3
15796: PPUSH
15797: LD_INT 1
15799: PPUSH
15800: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15804: LD_INT 63
15806: PPUSH
15807: LD_VAR 0 3
15811: PPUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15819: LD_INT 64
15821: PPUSH
15822: LD_VAR 0 3
15826: PPUSH
15827: LD_INT 1
15829: PPUSH
15830: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15834: LD_INT 3
15836: PPUSH
15837: LD_VAR 0 3
15841: PPUSH
15842: LD_INT 1
15844: PPUSH
15845: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15849: LD_INT 4
15851: PPUSH
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 1
15859: PPUSH
15860: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15864: LD_INT 5
15866: PPUSH
15867: LD_VAR 0 3
15871: PPUSH
15872: LD_INT 1
15874: PPUSH
15875: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
15879: LD_INT 8
15881: PPUSH
15882: LD_VAR 0 3
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15894: LD_INT 66
15896: PPUSH
15897: LD_VAR 0 3
15901: PPUSH
15902: LD_INT 1
15904: PPUSH
15905: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15909: LD_INT 67
15911: PPUSH
15912: LD_VAR 0 3
15916: PPUSH
15917: LD_INT 1
15919: PPUSH
15920: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15924: LD_INT 21
15926: PPUSH
15927: LD_VAR 0 3
15931: PPUSH
15932: LD_INT 1
15934: PPUSH
15935: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15939: LD_INT 22
15941: PPUSH
15942: LD_VAR 0 3
15946: PPUSH
15947: LD_INT 1
15949: PPUSH
15950: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15954: LD_INT 19
15956: PPUSH
15957: LD_VAR 0 3
15961: PPUSH
15962: LD_INT 1
15964: PPUSH
15965: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
15969: LD_INT 26
15971: PPUSH
15972: LD_VAR 0 3
15976: PPUSH
15977: LD_INT 1
15979: PPUSH
15980: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15984: LD_INT 54
15986: PPUSH
15987: LD_VAR 0 3
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15999: LD_INT 55
16001: PPUSH
16002: LD_VAR 0 3
16006: PPUSH
16007: LD_INT 1
16009: PPUSH
16010: CALL_OW 322
// for i = 0 to 39 do
16014: LD_ADDR_VAR 0 4
16018: PUSH
16019: DOUBLE
16020: LD_INT 0
16022: DEC
16023: ST_TO_ADDR
16024: LD_INT 39
16026: PUSH
16027: FOR_TO
16028: IFFALSE 16049
// SetRestrict ( i , side , true ) ;
16030: LD_VAR 0 4
16034: PPUSH
16035: LD_VAR 0 3
16039: PPUSH
16040: LD_INT 1
16042: PPUSH
16043: CALL_OW 324
16047: GO 16027
16049: POP
16050: POP
// end ; else
16051: GO 16128
16053: POP
// begin for i = 1 to 73 do
16054: LD_ADDR_VAR 0 4
16058: PUSH
16059: DOUBLE
16060: LD_INT 1
16062: DEC
16063: ST_TO_ADDR
16064: LD_INT 73
16066: PUSH
16067: FOR_TO
16068: IFFALSE 16089
// SetTech ( i , side , state_enabled ) ;
16070: LD_VAR 0 4
16074: PPUSH
16075: LD_VAR 0 3
16079: PPUSH
16080: LD_INT 1
16082: PPUSH
16083: CALL_OW 322
16087: GO 16067
16089: POP
16090: POP
// for i = 0 to 39 do
16091: LD_ADDR_VAR 0 4
16095: PUSH
16096: DOUBLE
16097: LD_INT 0
16099: DEC
16100: ST_TO_ADDR
16101: LD_INT 39
16103: PUSH
16104: FOR_TO
16105: IFFALSE 16126
// SetRestrict ( i , side , true ) ;
16107: LD_VAR 0 4
16111: PPUSH
16112: LD_VAR 0 3
16116: PPUSH
16117: LD_INT 1
16119: PPUSH
16120: CALL_OW 324
16124: GO 16104
16126: POP
16127: POP
// end ; end ; end ;
16128: GO 12133
16130: POP
16131: POP
// end ; end_of_file
16132: LD_VAR 0 2
16136: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
16137: LD_INT 0
16139: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
16140: LD_VAR 0 1
16144: PPUSH
16145: LD_VAR 0 2
16149: PPUSH
16150: LD_VAR 0 3
16154: PPUSH
16155: LD_INT 0
16157: PPUSH
16158: CALL 16167 0 4
// end ;
16162: LD_VAR 0 4
16166: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
16167: LD_INT 0
16169: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
16170: LD_STRING initScore({
16172: PUSH
16173: LD_VAR 0 1
16177: PUSH
16178: LD_INT 1
16180: ARRAY
16181: STR
16182: PUSH
16183: LD_STRING ,
16185: STR
16186: PUSH
16187: LD_VAR 0 1
16191: PUSH
16192: LD_INT 2
16194: ARRAY
16195: STR
16196: PUSH
16197: LD_STRING ,
16199: STR
16200: PUSH
16201: LD_VAR 0 1
16205: PUSH
16206: LD_INT 3
16208: ARRAY
16209: STR
16210: PUSH
16211: LD_STRING ,
16213: STR
16214: PUSH
16215: LD_VAR 0 1
16219: PUSH
16220: LD_INT 4
16222: ARRAY
16223: STR
16224: PUSH
16225: LD_STRING ,
16227: STR
16228: PUSH
16229: LD_VAR 0 1
16233: PUSH
16234: LD_INT 5
16236: ARRAY
16237: STR
16238: PUSH
16239: LD_STRING ,
16241: STR
16242: PUSH
16243: LD_VAR 0 1
16247: PUSH
16248: LD_INT 6
16250: ARRAY
16251: STR
16252: PUSH
16253: LD_STRING ,
16255: STR
16256: PUSH
16257: LD_VAR 0 1
16261: PUSH
16262: LD_INT 7
16264: ARRAY
16265: STR
16266: PUSH
16267: LD_STRING ,
16269: STR
16270: PUSH
16271: LD_VAR 0 1
16275: PUSH
16276: LD_INT 8
16278: ARRAY
16279: STR
16280: PUSH
16281: LD_STRING },
16283: STR
16284: PUSH
16285: LD_VAR 0 2
16289: STR
16290: PUSH
16291: LD_STRING ,
16293: STR
16294: PUSH
16295: LD_VAR 0 3
16299: STR
16300: PUSH
16301: LD_STRING ,
16303: STR
16304: PUSH
16305: LD_VAR 0 4
16309: STR
16310: PUSH
16311: LD_STRING );
16313: STR
16314: PPUSH
16315: CALL_OW 559
// end ;
16319: LD_VAR 0 5
16323: RET
// export function LScore_Reset ( ) ; begin
16324: LD_INT 0
16326: PPUSH
// ToLua ( ResetScorebar(); ) ;
16327: LD_STRING ResetScorebar();
16329: PPUSH
16330: CALL_OW 559
// end ;
16334: LD_VAR 0 1
16338: RET
// export function LScore_Delete ( ID ) ; begin
16339: LD_INT 0
16341: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
16342: LD_STRING deleteScore(
16344: PUSH
16345: LD_VAR 0 1
16349: STR
16350: PUSH
16351: LD_STRING );
16353: STR
16354: PPUSH
16355: CALL_OW 559
// end ;
16359: LD_VAR 0 2
16363: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
16364: LD_INT 0
16366: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
16367: LD_STRING AST(
16369: PUSH
16370: LD_VAR 0 1
16374: STR
16375: PUSH
16376: LD_STRING ,
16378: STR
16379: PUSH
16380: LD_VAR 0 2
16384: STR
16385: PUSH
16386: LD_STRING ,
16388: STR
16389: PUSH
16390: LD_VAR 0 3
16394: STR
16395: PUSH
16396: LD_STRING ,);
16398: STR
16399: PPUSH
16400: CALL_OW 559
// end ;
16404: LD_VAR 0 4
16408: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
16409: LD_INT 0
16411: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
16412: LD_STRING AST(
16414: PUSH
16415: LD_VAR 0 1
16419: STR
16420: PUSH
16421: LD_STRING ,
16423: STR
16424: PUSH
16425: LD_VAR 0 2
16429: STR
16430: PUSH
16431: LD_STRING ,
16433: STR
16434: PUSH
16435: LD_VAR 0 3
16439: STR
16440: PUSH
16441: LD_STRING ,
16443: STR
16444: PUSH
16445: LD_VAR 0 4
16449: STR
16450: PUSH
16451: LD_STRING );
16453: STR
16454: PPUSH
16455: CALL_OW 559
// end ;
16459: LD_VAR 0 5
16463: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
16464: LD_INT 0
16466: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
16467: LD_STRING AST(
16469: PUSH
16470: LD_VAR 0 1
16474: STR
16475: PUSH
16476: LD_STRING ,
16478: STR
16479: PUSH
16480: LD_VAR 0 2
16484: STR
16485: PUSH
16486: LD_STRING ,
16488: STR
16489: PUSH
16490: LD_VAR 0 3
16494: STR
16495: PUSH
16496: LD_STRING ,
16498: STR
16499: PUSH
16500: LD_VAR 0 4
16504: STR
16505: PUSH
16506: LD_STRING ,
16508: STR
16509: PUSH
16510: LD_VAR 0 5
16514: STR
16515: PUSH
16516: LD_STRING );
16518: STR
16519: PPUSH
16520: CALL_OW 559
// end ;
16524: LD_VAR 0 6
16528: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
16529: LD_INT 0
16531: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
16532: LD_STRING ASRT(
16534: PUSH
16535: LD_VAR 0 1
16539: STR
16540: PUSH
16541: LD_STRING ,
16543: STR
16544: PUSH
16545: LD_VAR 0 2
16549: STR
16550: PUSH
16551: LD_STRING ,
16553: STR
16554: PUSH
16555: LD_VAR 0 3
16559: STR
16560: PUSH
16561: LD_STRING ,);
16563: STR
16564: PPUSH
16565: CALL_OW 559
// end ;
16569: LD_VAR 0 4
16573: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
16574: LD_INT 0
16576: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
16577: LD_STRING ASRT(
16579: PUSH
16580: LD_VAR 0 1
16584: STR
16585: PUSH
16586: LD_STRING ,
16588: STR
16589: PUSH
16590: LD_VAR 0 2
16594: STR
16595: PUSH
16596: LD_STRING ,
16598: STR
16599: PUSH
16600: LD_VAR 0 3
16604: STR
16605: PUSH
16606: LD_STRING ,
16608: STR
16609: PUSH
16610: LD_VAR 0 4
16614: STR
16615: PUSH
16616: LD_STRING );
16618: STR
16619: PPUSH
16620: CALL_OW 559
// end ;
16624: LD_VAR 0 5
16628: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
16629: LD_INT 0
16631: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
16632: LD_STRING ASRT(
16634: PUSH
16635: LD_VAR 0 1
16639: STR
16640: PUSH
16641: LD_STRING ,
16643: STR
16644: PUSH
16645: LD_VAR 0 2
16649: STR
16650: PUSH
16651: LD_STRING ,
16653: STR
16654: PUSH
16655: LD_VAR 0 3
16659: STR
16660: PUSH
16661: LD_STRING ,
16663: STR
16664: PUSH
16665: LD_VAR 0 4
16669: STR
16670: PUSH
16671: LD_STRING ,
16673: STR
16674: PUSH
16675: LD_VAR 0 5
16679: STR
16680: PUSH
16681: LD_STRING );
16683: STR
16684: PPUSH
16685: CALL_OW 559
// end ;
16689: LD_VAR 0 6
16693: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
16694: LD_INT 0
16696: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
16697: LD_STRING UST(
16699: PUSH
16700: LD_VAR 0 1
16704: STR
16705: PUSH
16706: LD_STRING ,
16708: STR
16709: PUSH
16710: LD_VAR 0 2
16714: STR
16715: PUSH
16716: LD_STRING );
16718: STR
16719: PPUSH
16720: CALL_OW 559
// end ;
16724: LD_VAR 0 3
16728: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
16729: LD_INT 0
16731: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
16732: LD_STRING UST(
16734: PUSH
16735: LD_VAR 0 1
16739: STR
16740: PUSH
16741: LD_STRING ,
16743: STR
16744: PUSH
16745: LD_VAR 0 2
16749: STR
16750: PUSH
16751: LD_STRING ,
16753: STR
16754: PUSH
16755: LD_VAR 0 3
16759: STR
16760: PUSH
16761: LD_STRING );
16763: STR
16764: PPUSH
16765: CALL_OW 559
// end ;
16769: LD_VAR 0 4
16773: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
16774: LD_INT 0
16776: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
16777: LD_STRING CCST(
16779: PUSH
16780: LD_VAR 0 1
16784: STR
16785: PUSH
16786: LD_STRING ,{
16788: STR
16789: PUSH
16790: LD_VAR 0 2
16794: STR
16795: PUSH
16796: LD_STRING ,
16798: STR
16799: PUSH
16800: LD_VAR 0 3
16804: STR
16805: PUSH
16806: LD_STRING ,
16808: STR
16809: PUSH
16810: LD_VAR 0 4
16814: STR
16815: PUSH
16816: LD_STRING });
16818: STR
16819: PPUSH
16820: CALL_OW 559
// end ;
16824: LD_VAR 0 5
16828: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
16829: LD_INT 0
16831: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
16832: LD_STRING CCST(
16834: PUSH
16835: LD_VAR 0 1
16839: STR
16840: PUSH
16841: LD_STRING ,
16843: STR
16844: PUSH
16845: LD_VAR 0 2
16849: STR
16850: PUSH
16851: LD_STRING );
16853: STR
16854: PPUSH
16855: CALL_OW 559
// end ;
16859: LD_VAR 0 3
16863: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
16864: LD_INT 0
16866: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
16867: LD_STRING ASSP(
16869: PUSH
16870: LD_VAR 0 1
16874: STR
16875: PUSH
16876: LD_STRING ,
16878: STR
16879: PUSH
16880: LD_VAR 0 2
16884: STR
16885: PUSH
16886: LD_STRING ,
16888: STR
16889: PUSH
16890: LD_VAR 0 3
16894: STR
16895: PUSH
16896: LD_STRING ,);
16898: STR
16899: PPUSH
16900: CALL_OW 559
// end ;
16904: LD_VAR 0 4
16908: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
16909: LD_INT 0
16911: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
16912: LD_STRING ASSP(
16914: PUSH
16915: LD_VAR 0 1
16919: STR
16920: PUSH
16921: LD_STRING ,
16923: STR
16924: PUSH
16925: LD_VAR 0 2
16929: STR
16930: PUSH
16931: LD_STRING ,
16933: STR
16934: PUSH
16935: LD_VAR 0 3
16939: STR
16940: PUSH
16941: LD_STRING ,
16943: STR
16944: PUSH
16945: LD_VAR 0 4
16949: STR
16950: PUSH
16951: LD_STRING );
16953: STR
16954: PPUSH
16955: CALL_OW 559
// end ;
16959: LD_VAR 0 5
16963: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
16964: LD_INT 0
16966: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
16967: LD_STRING ASSP(
16969: PUSH
16970: LD_VAR 0 1
16974: STR
16975: PUSH
16976: LD_STRING ,
16978: STR
16979: PUSH
16980: LD_VAR 0 2
16984: STR
16985: PUSH
16986: LD_STRING ,
16988: STR
16989: PUSH
16990: LD_VAR 0 3
16994: STR
16995: PUSH
16996: LD_STRING ,
16998: STR
16999: PUSH
17000: LD_VAR 0 4
17004: STR
17005: PUSH
17006: LD_STRING ,
17008: STR
17009: PUSH
17010: LD_VAR 0 5
17014: STR
17015: PUSH
17016: LD_STRING );
17018: STR
17019: PPUSH
17020: CALL_OW 559
// end ;
17024: LD_VAR 0 6
17028: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
17029: LD_INT 0
17031: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
17032: LD_STRING ASRSP(
17034: PUSH
17035: LD_VAR 0 1
17039: STR
17040: PUSH
17041: LD_STRING ,
17043: STR
17044: PUSH
17045: LD_VAR 0 2
17049: STR
17050: PUSH
17051: LD_STRING ,
17053: STR
17054: PUSH
17055: LD_VAR 0 3
17059: STR
17060: PUSH
17061: LD_STRING ,);
17063: STR
17064: PPUSH
17065: CALL_OW 559
// end ;
17069: LD_VAR 0 4
17073: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
17074: LD_INT 0
17076: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
17077: LD_STRING ASRSP(
17079: PUSH
17080: LD_VAR 0 1
17084: STR
17085: PUSH
17086: LD_STRING ,
17088: STR
17089: PUSH
17090: LD_VAR 0 2
17094: STR
17095: PUSH
17096: LD_STRING ,
17098: STR
17099: PUSH
17100: LD_VAR 0 3
17104: STR
17105: PUSH
17106: LD_STRING ,
17108: STR
17109: PUSH
17110: LD_VAR 0 4
17114: STR
17115: PUSH
17116: LD_STRING );
17118: STR
17119: PPUSH
17120: CALL_OW 559
// end ;
17124: LD_VAR 0 5
17128: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
17129: LD_INT 0
17131: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
17132: LD_STRING ASRSP(
17134: PUSH
17135: LD_VAR 0 1
17139: STR
17140: PUSH
17141: LD_STRING ,
17143: STR
17144: PUSH
17145: LD_VAR 0 2
17149: STR
17150: PUSH
17151: LD_STRING ,
17153: STR
17154: PUSH
17155: LD_VAR 0 3
17159: STR
17160: PUSH
17161: LD_STRING ,
17163: STR
17164: PUSH
17165: LD_VAR 0 4
17169: STR
17170: PUSH
17171: LD_STRING ,
17173: STR
17174: PUSH
17175: LD_VAR 0 5
17179: STR
17180: PUSH
17181: LD_STRING );
17183: STR
17184: PPUSH
17185: CALL_OW 559
// end ;
17189: LD_VAR 0 6
17193: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
17194: LD_INT 0
17196: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
17197: LD_STRING USSP(
17199: PUSH
17200: LD_VAR 0 1
17204: STR
17205: PUSH
17206: LD_STRING ,
17208: STR
17209: PUSH
17210: LD_VAR 0 2
17214: STR
17215: PUSH
17216: LD_STRING );
17218: STR
17219: PPUSH
17220: CALL_OW 559
// end ;
17224: LD_VAR 0 3
17228: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
17229: LD_INT 0
17231: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
17232: LD_STRING USSP(
17234: PUSH
17235: LD_VAR 0 1
17239: STR
17240: PUSH
17241: LD_STRING ,
17243: STR
17244: PUSH
17245: LD_VAR 0 2
17249: STR
17250: PUSH
17251: LD_STRING ,
17253: STR
17254: PUSH
17255: LD_VAR 0 3
17259: STR
17260: PUSH
17261: LD_STRING );
17263: STR
17264: PPUSH
17265: CALL_OW 559
// end ;
17269: LD_VAR 0 4
17273: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
17274: LD_INT 0
17276: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
17277: LD_STRING CCSSP(
17279: PUSH
17280: LD_VAR 0 1
17284: STR
17285: PUSH
17286: LD_STRING ,{
17288: STR
17289: PUSH
17290: LD_VAR 0 2
17294: STR
17295: PUSH
17296: LD_STRING ,
17298: STR
17299: PUSH
17300: LD_VAR 0 3
17304: STR
17305: PUSH
17306: LD_STRING ,
17308: STR
17309: PUSH
17310: LD_VAR 0 4
17314: STR
17315: PUSH
17316: LD_STRING });
17318: STR
17319: PPUSH
17320: CALL_OW 559
// end ;
17324: LD_VAR 0 5
17328: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
17329: LD_INT 0
17331: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
17332: LD_STRING CCSSP(
17334: PUSH
17335: LD_VAR 0 1
17339: STR
17340: PUSH
17341: LD_STRING ,
17343: STR
17344: PUSH
17345: LD_VAR 0 2
17349: STR
17350: PUSH
17351: LD_STRING );
17353: STR
17354: PPUSH
17355: CALL_OW 559
// end ;
17359: LD_VAR 0 3
17363: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
17364: LD_INT 0
17366: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
17367: LD_STRING ASP(
17369: PUSH
17370: LD_VAR 0 1
17374: STR
17375: PUSH
17376: LD_STRING ,
17378: STR
17379: PUSH
17380: LD_VAR 0 2
17384: STR
17385: PUSH
17386: LD_STRING ,
17388: STR
17389: PUSH
17390: LD_VAR 0 3
17394: STR
17395: PUSH
17396: LD_STRING );
17398: STR
17399: PPUSH
17400: CALL_OW 559
// end ;
17404: LD_VAR 0 4
17408: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
17409: LD_INT 0
17411: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
17412: LD_STRING USP(
17414: PUSH
17415: LD_VAR 0 1
17419: STR
17420: PUSH
17421: LD_STRING ,
17423: STR
17424: PUSH
17425: LD_VAR 0 2
17429: STR
17430: PUSH
17431: LD_STRING ,
17433: STR
17434: PUSH
17435: LD_VAR 0 3
17439: STR
17440: PUSH
17441: LD_STRING );
17443: STR
17444: PPUSH
17445: CALL_OW 559
// end ;
17449: LD_VAR 0 4
17453: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
17454: LD_INT 0
17456: PPUSH
17457: PPUSH
// for i = 1 to 8 do
17458: LD_ADDR_VAR 0 4
17462: PUSH
17463: DOUBLE
17464: LD_INT 1
17466: DEC
17467: ST_TO_ADDR
17468: LD_INT 8
17470: PUSH
17471: FOR_TO
17472: IFFALSE 17519
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
17474: LD_STRING USP(
17476: PUSH
17477: LD_VAR 0 1
17481: STR
17482: PUSH
17483: LD_STRING ,
17485: STR
17486: PUSH
17487: LD_VAR 0 4
17491: STR
17492: PUSH
17493: LD_STRING ,
17495: STR
17496: PUSH
17497: LD_VAR 0 2
17501: PUSH
17502: LD_VAR 0 4
17506: ARRAY
17507: STR
17508: PUSH
17509: LD_STRING );
17511: STR
17512: PPUSH
17513: CALL_OW 559
17517: GO 17471
17519: POP
17520: POP
// end ;
17521: LD_VAR 0 3
17525: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
17526: LD_INT 0
17528: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
17529: LD_STRING ASC(
17531: PUSH
17532: LD_VAR 0 1
17536: STR
17537: PUSH
17538: LD_STRING ,
17540: STR
17541: PUSH
17542: LD_VAR 0 2
17546: STR
17547: PUSH
17548: LD_STRING ,
17550: STR
17551: PUSH
17552: LD_VAR 0 3
17556: STR
17557: PUSH
17558: LD_STRING ,
17560: STR
17561: PUSH
17562: LD_VAR 0 4
17566: STR
17567: PUSH
17568: LD_STRING );
17570: STR
17571: PPUSH
17572: CALL_OW 559
// end ;
17576: LD_VAR 0 5
17580: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
17581: LD_INT 0
17583: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
17584: LD_STRING USC(
17586: PUSH
17587: LD_VAR 0 1
17591: STR
17592: PUSH
17593: LD_STRING ,{
17595: STR
17596: PUSH
17597: LD_VAR 0 2
17601: PUSH
17602: LD_INT 1
17604: ARRAY
17605: STR
17606: PUSH
17607: LD_STRING ,
17609: STR
17610: PUSH
17611: LD_VAR 0 2
17615: PUSH
17616: LD_INT 2
17618: ARRAY
17619: STR
17620: PUSH
17621: LD_STRING ,
17623: STR
17624: PUSH
17625: LD_VAR 0 2
17629: PUSH
17630: LD_INT 3
17632: ARRAY
17633: STR
17634: PUSH
17635: LD_STRING ,
17637: STR
17638: PUSH
17639: LD_VAR 0 2
17643: PUSH
17644: LD_INT 4
17646: ARRAY
17647: STR
17648: PUSH
17649: LD_STRING ,
17651: STR
17652: PUSH
17653: LD_VAR 0 2
17657: PUSH
17658: LD_INT 5
17660: ARRAY
17661: STR
17662: PUSH
17663: LD_STRING ,
17665: STR
17666: PUSH
17667: LD_VAR 0 2
17671: PUSH
17672: LD_INT 6
17674: ARRAY
17675: STR
17676: PUSH
17677: LD_STRING ,
17679: STR
17680: PUSH
17681: LD_VAR 0 2
17685: PUSH
17686: LD_INT 7
17688: ARRAY
17689: STR
17690: PUSH
17691: LD_STRING ,
17693: STR
17694: PUSH
17695: LD_VAR 0 2
17699: PUSH
17700: LD_INT 8
17702: ARRAY
17703: STR
17704: PUSH
17705: LD_STRING });
17707: STR
17708: PPUSH
17709: CALL_OW 559
// end ; end_of_file
17713: LD_VAR 0 3
17717: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
17718: LD_INT 0
17720: PPUSH
17721: PPUSH
17722: PPUSH
17723: PPUSH
17724: PPUSH
17725: PPUSH
17726: PPUSH
17727: PPUSH
17728: PPUSH
// for i := 1 to 8 do
17729: LD_ADDR_VAR 0 2
17733: PUSH
17734: DOUBLE
17735: LD_INT 1
17737: DEC
17738: ST_TO_ADDR
17739: LD_INT 8
17741: PUSH
17742: FOR_TO
17743: IFFALSE 18127
// begin if Side_Positions [ i ] then
17745: LD_EXP 37
17749: PUSH
17750: LD_VAR 0 2
17754: ARRAY
17755: IFFALSE 18125
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
17757: LD_ADDR_VAR 0 7
17761: PUSH
17762: LD_INT 22
17764: PUSH
17765: LD_VAR 0 2
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 21
17776: PUSH
17777: LD_INT 1
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PPUSH
17788: CALL_OW 69
17792: PUSH
17793: LD_INT 0
17795: PLUS
17796: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17797: LD_ADDR_VAR 0 9
17801: PUSH
17802: LD_INT 22
17804: PUSH
17805: LD_VAR 0 2
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 2
17816: PUSH
17817: LD_INT 30
17819: PUSH
17820: LD_INT 0
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 30
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: LIST
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PPUSH
17846: CALL_OW 69
17850: ST_TO_ADDR
// crates := 0 ;
17851: LD_ADDR_VAR 0 4
17855: PUSH
17856: LD_INT 0
17858: ST_TO_ADDR
// oil := 0 ;
17859: LD_ADDR_VAR 0 5
17863: PUSH
17864: LD_INT 0
17866: ST_TO_ADDR
// sib := 0 ;
17867: LD_ADDR_VAR 0 6
17871: PUSH
17872: LD_INT 0
17874: ST_TO_ADDR
// if bases then
17875: LD_VAR 0 9
17879: IFFALSE 17985
// begin for j in bases do
17881: LD_ADDR_VAR 0 3
17885: PUSH
17886: LD_VAR 0 9
17890: PUSH
17891: FOR_IN
17892: IFFALSE 17983
// begin base := GetBase ( j ) ;
17894: LD_ADDR_VAR 0 8
17898: PUSH
17899: LD_VAR 0 3
17903: PPUSH
17904: CALL_OW 274
17908: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
17909: LD_ADDR_VAR 0 4
17913: PUSH
17914: LD_VAR 0 4
17918: PUSH
17919: LD_VAR 0 8
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: CALL_OW 275
17931: PLUS
17932: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
17933: LD_ADDR_VAR 0 5
17937: PUSH
17938: LD_VAR 0 5
17942: PUSH
17943: LD_VAR 0 8
17947: PPUSH
17948: LD_INT 2
17950: PPUSH
17951: CALL_OW 275
17955: PLUS
17956: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
17957: LD_ADDR_VAR 0 6
17961: PUSH
17962: LD_VAR 0 6
17966: PUSH
17967: LD_VAR 0 8
17971: PPUSH
17972: LD_INT 3
17974: PPUSH
17975: CALL_OW 275
17979: PLUS
17980: ST_TO_ADDR
// end ;
17981: GO 17891
17983: POP
17984: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
17985: LD_STRING setSpecText(
17987: PUSH
17988: LD_VAR 0 2
17992: STR
17993: PUSH
17994: LD_STRING ,
17996: STR
17997: PUSH
17998: LD_INT 2
18000: STR
18001: PUSH
18002: LD_STRING ,
18004: STR
18005: PUSH
18006: LD_VAR 0 4
18010: STR
18011: PUSH
18012: LD_STRING )
18014: STR
18015: PPUSH
18016: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
18020: LD_STRING setSpecText(
18022: PUSH
18023: LD_VAR 0 2
18027: STR
18028: PUSH
18029: LD_STRING ,
18031: STR
18032: PUSH
18033: LD_INT 3
18035: STR
18036: PUSH
18037: LD_STRING ,
18039: STR
18040: PUSH
18041: LD_VAR 0 5
18045: STR
18046: PUSH
18047: LD_STRING )
18049: STR
18050: PPUSH
18051: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
18055: LD_STRING setSpecText(
18057: PUSH
18058: LD_VAR 0 2
18062: STR
18063: PUSH
18064: LD_STRING ,
18066: STR
18067: PUSH
18068: LD_INT 4
18070: STR
18071: PUSH
18072: LD_STRING ,
18074: STR
18075: PUSH
18076: LD_VAR 0 6
18080: STR
18081: PUSH
18082: LD_STRING )
18084: STR
18085: PPUSH
18086: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
18090: LD_STRING setSpecText(
18092: PUSH
18093: LD_VAR 0 2
18097: STR
18098: PUSH
18099: LD_STRING ,
18101: STR
18102: PUSH
18103: LD_INT 5
18105: STR
18106: PUSH
18107: LD_STRING ,
18109: STR
18110: PUSH
18111: LD_VAR 0 7
18115: STR
18116: PUSH
18117: LD_STRING )
18119: STR
18120: PPUSH
18121: CALL_OW 559
// end ; end ;
18125: GO 17742
18127: POP
18128: POP
// end ;
18129: LD_VAR 0 1
18133: RET
// every 0 0$1 do
18134: GO 18136
18136: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
18137: LD_STRING setSpecLogoNumber(
18139: PUSH
18140: LD_INT 2
18142: STR
18143: PUSH
18144: LD_STRING ,
18146: STR
18147: PUSH
18148: LD_INT 1
18150: STR
18151: PUSH
18152: LD_STRING )
18154: STR
18155: PPUSH
18156: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
18160: LD_STRING setSpecLogoNumber(
18162: PUSH
18163: LD_INT 3
18165: STR
18166: PUSH
18167: LD_STRING ,
18169: STR
18170: PUSH
18171: LD_INT 2
18173: STR
18174: PUSH
18175: LD_STRING )
18177: STR
18178: PPUSH
18179: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
18183: LD_STRING setSpecLogoNumber(
18185: PUSH
18186: LD_INT 4
18188: STR
18189: PUSH
18190: LD_STRING ,
18192: STR
18193: PUSH
18194: LD_INT 3
18196: STR
18197: PUSH
18198: LD_STRING )
18200: STR
18201: PPUSH
18202: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
18206: LD_STRING setSpecLogoNumber(
18208: PUSH
18209: LD_INT 5
18211: STR
18212: PUSH
18213: LD_STRING ,
18215: STR
18216: PUSH
18217: LD_INT 4
18219: STR
18220: PUSH
18221: LD_STRING )
18223: STR
18224: PPUSH
18225: CALL_OW 559
// end ;
18229: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
18230: LD_INT 2
18232: PUSH
18233: LD_INT 30
18235: PUSH
18236: LD_INT 0
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 30
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: PPUSH
18258: CALL_OW 69
18262: IFFALSE 18272
18264: GO 18266
18266: DISABLE
// begin enable ;
18267: ENABLE
// UpdateSpectatorBar ;
18268: CALL 17718 0 0
// end ; end_of_file
18272: END
// var respawn , inqueue ; export function init_respawning ; begin
18273: LD_INT 0
18275: PPUSH
// respawn := Rand ( 1 , 8 ) ;
18276: LD_ADDR_LOC 23
18280: PUSH
18281: LD_INT 1
18283: PPUSH
18284: LD_INT 8
18286: PPUSH
18287: CALL_OW 12
18291: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18292: LD_ADDR_LOC 24
18296: PUSH
18297: LD_INT 0
18299: PUSH
18300: LD_INT 0
18302: PUSH
18303: LD_INT 0
18305: PUSH
18306: LD_INT 0
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: LD_INT 0
18314: PUSH
18315: LD_INT 0
18317: PUSH
18318: LD_INT 0
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: ST_TO_ADDR
// end ;
18331: LD_VAR 0 1
18335: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
18336: GO 18338
18338: DISABLE
18339: LD_INT 0
18341: PPUSH
18342: PPUSH
18343: PPUSH
// begin if respawning_time_max = 0 then
18344: LD_EXP 30
18348: PUSH
18349: LD_INT 0
18351: EQUAL
18352: IFFALSE 18356
// exit ;
18354: GO 18764
// if respawn = 8 then
18356: LD_LOC 23
18360: PUSH
18361: LD_INT 8
18363: EQUAL
18364: IFFALSE 18376
// respawn := 1 else
18366: LD_ADDR_LOC 23
18370: PUSH
18371: LD_INT 1
18373: ST_TO_ADDR
18374: GO 18390
// respawn := respawn + 1 ;
18376: LD_ADDR_LOC 23
18380: PUSH
18381: LD_LOC 23
18385: PUSH
18386: LD_INT 1
18388: PLUS
18389: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
18390: LD_EXP 37
18394: PUSH
18395: LD_LOC 23
18399: ARRAY
18400: PUSH
18401: LD_LOC 24
18405: PUSH
18406: LD_LOC 23
18410: ARRAY
18411: NOT
18412: AND
18413: IFFALSE 18763
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
18415: LD_ADDR_VAR 0 1
18419: PUSH
18420: LD_INT 21
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 22
18432: PUSH
18433: LD_LOC 23
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 3
18444: PUSH
18445: LD_INT 23
18447: PUSH
18448: LD_INT 0
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: PPUSH
18461: CALL_OW 69
18465: ST_TO_ADDR
// if n < number_of_people then
18466: LD_VAR 0 1
18470: PUSH
18471: LD_EXP 21
18475: LESS
18476: IFFALSE 18760
// begin aktresp := respawn ;
18478: LD_ADDR_VAR 0 3
18482: PUSH
18483: LD_LOC 23
18487: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
18488: LD_ADDR_LOC 24
18492: PUSH
18493: LD_LOC 24
18497: PPUSH
18498: LD_VAR 0 3
18502: PPUSH
18503: LD_INT 1
18505: PPUSH
18506: CALL_OW 1
18510: ST_TO_ADDR
// enable ;
18511: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
18512: LD_EXP 29
18516: PPUSH
18517: LD_EXP 30
18521: PPUSH
18522: CALL_OW 12
18526: PPUSH
18527: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
18531: LD_ADDR_LOC 24
18535: PUSH
18536: LD_LOC 24
18540: PPUSH
18541: LD_VAR 0 3
18545: PPUSH
18546: LD_INT 0
18548: PPUSH
18549: CALL_OW 1
18553: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
18554: LD_ADDR_VAR 0 2
18558: PUSH
18559: LD_INT 21
18561: PUSH
18562: LD_INT 3
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 2
18571: PUSH
18572: LD_INT 30
18574: PUSH
18575: LD_INT 0
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 30
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 50
18599: PUSH
18600: EMPTY
18601: LIST
18602: PUSH
18603: LD_INT 22
18605: PUSH
18606: LD_VAR 0 3
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: PPUSH
18621: CALL_OW 69
18625: ST_TO_ADDR
// if dep = 0 then
18626: LD_VAR 0 2
18630: PUSH
18631: LD_INT 0
18633: EQUAL
18634: IFFALSE 18638
// exit ;
18636: GO 18764
// hc_name :=  ;
18638: LD_ADDR_OWVAR 26
18642: PUSH
18643: LD_STRING 
18645: ST_TO_ADDR
// hc_importance := 0 ;
18646: LD_ADDR_OWVAR 32
18650: PUSH
18651: LD_INT 0
18653: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
18654: LD_INT 0
18656: PPUSH
18657: LD_INT 0
18659: PPUSH
18660: LD_EXP 23
18664: PUSH
18665: LD_INT 2
18667: DIV
18668: PPUSH
18669: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
18673: LD_ADDR_OWVAR 21
18677: PUSH
18678: LD_EXP 38
18682: PUSH
18683: LD_VAR 0 3
18687: ARRAY
18688: ST_TO_ADDR
// uc_side := aktresp ;
18689: LD_ADDR_OWVAR 20
18693: PUSH
18694: LD_VAR 0 3
18698: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
18699: LD_ADDR_VAR 0 2
18703: PUSH
18704: LD_VAR 0 2
18708: PUSH
18709: LD_INT 1
18711: PPUSH
18712: LD_VAR 0 2
18716: PPUSH
18717: CALL_OW 12
18721: ARRAY
18722: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
18723: CALL_OW 44
18727: PPUSH
18728: LD_VAR 0 2
18732: PPUSH
18733: CALL_OW 250
18737: PPUSH
18738: LD_VAR 0 2
18742: PPUSH
18743: CALL_OW 251
18747: PPUSH
18748: LD_INT 7
18750: PPUSH
18751: LD_INT 1
18753: PPUSH
18754: CALL_OW 50
// end else
18758: GO 18761
// enable ;
18760: ENABLE
// end else
18761: GO 18764
// enable ;
18763: ENABLE
// end ; end_of_file
18764: PPOPN 3
18766: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
18767: LD_INT 0
18769: PPUSH
18770: PPUSH
18771: PPUSH
// BuildUpTime_Delay = 0 ;
18772: LD_ADDR_EXP 63
18776: PUSH
18777: LD_INT 0
18779: ST_TO_ADDR
// if not def_builduptime then
18780: LD_EXP 16
18784: NOT
18785: IFFALSE 18789
// exit ;
18787: GO 18972
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
18789: LD_ADDR_EXP 63
18793: PUSH
18794: LD_INT 8400
18796: PUSH
18797: LD_INT 2100
18799: PUSH
18800: LD_EXP 16
18804: MUL
18805: PLUS
18806: ST_TO_ADDR
// BuildUpTimeActive := true ;
18807: LD_ADDR_EXP 62
18811: PUSH
18812: LD_INT 1
18814: ST_TO_ADDR
// for i := 1 to 8 do
18815: LD_ADDR_VAR 0 2
18819: PUSH
18820: DOUBLE
18821: LD_INT 1
18823: DEC
18824: ST_TO_ADDR
18825: LD_INT 8
18827: PUSH
18828: FOR_TO
18829: IFFALSE 18970
// if Side_Positions [ i ] then
18831: LD_EXP 37
18835: PUSH
18836: LD_VAR 0 2
18840: ARRAY
18841: IFFALSE 18968
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
18843: LD_EXP 61
18847: PUSH
18848: LD_EXP 37
18852: PUSH
18853: LD_VAR 0 2
18857: ARRAY
18858: ARRAY
18859: PPUSH
18860: LD_INT 5
18862: PPUSH
18863: CALL_OW 424
// for j := 1 to 8 do
18867: LD_ADDR_VAR 0 3
18871: PUSH
18872: DOUBLE
18873: LD_INT 1
18875: DEC
18876: ST_TO_ADDR
18877: LD_INT 8
18879: PUSH
18880: FOR_TO
18881: IFFALSE 18966
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
18883: LD_EXP 37
18887: PUSH
18888: LD_VAR 0 3
18892: ARRAY
18893: PUSH
18894: LD_EXP 34
18898: PUSH
18899: LD_VAR 0 2
18903: ARRAY
18904: PUSH
18905: LD_EXP 34
18909: PUSH
18910: LD_VAR 0 3
18914: ARRAY
18915: NONEQUAL
18916: PUSH
18917: LD_EXP 39
18921: NOT
18922: PUSH
18923: LD_VAR 0 2
18927: PUSH
18928: LD_VAR 0 3
18932: NONEQUAL
18933: AND
18934: OR
18935: AND
18936: IFFALSE 18964
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
18938: LD_VAR 0 3
18942: PPUSH
18943: LD_EXP 61
18947: PUSH
18948: LD_EXP 37
18952: PUSH
18953: LD_VAR 0 2
18957: ARRAY
18958: ARRAY
18959: PPUSH
18960: CALL_OW 333
18964: GO 18880
18966: POP
18967: POP
// end ;
18968: GO 18828
18970: POP
18971: POP
// end ;
18972: LD_VAR 0 1
18976: RET
// export function EndBuildUp ; var i , j ; begin
18977: LD_INT 0
18979: PPUSH
18980: PPUSH
18981: PPUSH
// BuildUpTimeActive := false ;
18982: LD_ADDR_EXP 62
18986: PUSH
18987: LD_INT 0
18989: ST_TO_ADDR
// for i := 1 to 8 do
18990: LD_ADDR_VAR 0 2
18994: PUSH
18995: DOUBLE
18996: LD_INT 1
18998: DEC
18999: ST_TO_ADDR
19000: LD_INT 8
19002: PUSH
19003: FOR_TO
19004: IFFALSE 19145
// if Side_Positions [ i ] then
19006: LD_EXP 37
19010: PUSH
19011: LD_VAR 0 2
19015: ARRAY
19016: IFFALSE 19143
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
19018: LD_EXP 61
19022: PUSH
19023: LD_EXP 37
19027: PUSH
19028: LD_VAR 0 2
19032: ARRAY
19033: ARRAY
19034: PPUSH
19035: LD_INT 0
19037: PPUSH
19038: CALL_OW 424
// for j := 1 to 8 do
19042: LD_ADDR_VAR 0 3
19046: PUSH
19047: DOUBLE
19048: LD_INT 1
19050: DEC
19051: ST_TO_ADDR
19052: LD_INT 8
19054: PUSH
19055: FOR_TO
19056: IFFALSE 19141
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19058: LD_EXP 37
19062: PUSH
19063: LD_VAR 0 3
19067: ARRAY
19068: PUSH
19069: LD_EXP 34
19073: PUSH
19074: LD_VAR 0 2
19078: ARRAY
19079: PUSH
19080: LD_EXP 34
19084: PUSH
19085: LD_VAR 0 3
19089: ARRAY
19090: NONEQUAL
19091: PUSH
19092: LD_EXP 39
19096: NOT
19097: PUSH
19098: LD_VAR 0 2
19102: PUSH
19103: LD_VAR 0 3
19107: NONEQUAL
19108: AND
19109: OR
19110: AND
19111: IFFALSE 19139
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19113: LD_VAR 0 3
19117: PPUSH
19118: LD_EXP 61
19122: PUSH
19123: LD_EXP 37
19127: PUSH
19128: LD_VAR 0 2
19132: ARRAY
19133: ARRAY
19134: PPUSH
19135: CALL_OW 334
19139: GO 19055
19141: POP
19142: POP
// end ;
19143: GO 19003
19145: POP
19146: POP
// end ;
19147: LD_VAR 0 1
19151: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
19152: LD_EXP 62
19156: IFFALSE 19331
19158: GO 19160
19160: DISABLE
19161: LD_INT 0
19163: PPUSH
19164: PPUSH
// begin for i := 1 to 8 do
19165: LD_ADDR_VAR 0 1
19169: PUSH
19170: DOUBLE
19171: LD_INT 1
19173: DEC
19174: ST_TO_ADDR
19175: LD_INT 8
19177: PUSH
19178: FOR_TO
19179: IFFALSE 19328
// if Side_Positions [ i ] then
19181: LD_EXP 37
19185: PUSH
19186: LD_VAR 0 1
19190: ARRAY
19191: IFFALSE 19326
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
19193: LD_ADDR_VAR 0 2
19197: PUSH
19198: LD_EXP 61
19202: PUSH
19203: LD_EXP 37
19207: PUSH
19208: LD_VAR 0 1
19212: ARRAY
19213: ARRAY
19214: PPUSH
19215: LD_INT 2
19217: PUSH
19218: LD_INT 21
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 21
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 22
19245: PUSH
19246: LD_OWVAR 2
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PPUSH
19259: CALL_OW 70
19263: PUSH
19264: FOR_IN
19265: IFFALSE 19324
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
19267: LD_EXP 34
19271: PUSH
19272: LD_VAR 0 1
19276: ARRAY
19277: PUSH
19278: LD_EXP 34
19282: PUSH
19283: LD_OWVAR 2
19287: ARRAY
19288: NONEQUAL
19289: PUSH
19290: LD_EXP 39
19294: NOT
19295: PUSH
19296: LD_VAR 0 1
19300: PUSH
19301: LD_OWVAR 2
19305: NONEQUAL
19306: AND
19307: OR
19308: IFFALSE 19322
// ComMoveToArea ( un , BuildUpEscape ) ;
19310: LD_VAR 0 2
19314: PPUSH
19315: LD_INT 20
19317: PPUSH
19318: CALL_OW 113
19322: GO 19264
19324: POP
19325: POP
19326: GO 19178
19328: POP
19329: POP
// enable ;
19330: ENABLE
// end ;
19331: PPOPN 2
19333: END
// every 0 0$1 trigger def_builduptime do
19334: LD_EXP 16
19338: IFFALSE 19364
19340: GO 19342
19342: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
19343: LD_INT 8400
19345: PUSH
19346: LD_EXP 16
19350: PUSH
19351: LD_INT 2100
19353: MUL
19354: PLUS
19355: PPUSH
19356: CALL_OW 67
// EndBuildUp ;
19360: CALL 18977 0 0
// end ;
19364: END
