// export def_public_score , def_amount_score ; export is_depot , number_of_breastworks , number_of_people , amount_of_apemen , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , amount_score , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , king_territory , final_count , Player_Side , player_team ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if MultiPlayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type = mp_game_type ;
  79: LD_ADDR_EXP 41
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side = mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  99: LD_ADDR_EXP 21
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 109: LD_ADDR_EXP 18
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 119: LD_ADDR_EXP 22
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 20
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams = mp_teams ;
 139: LD_ADDR_EXP 19
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 352
// begin Game_Type = 3 ;
 151: LD_ADDR_EXP 41
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side = 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 21
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 18
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 22
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 20
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 323: LD_ADDR_EXP 19
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: ST_TO_ADDR
// end ; for i := 1 to 8 do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_INT 8
 364: PUSH
 365: FOR_TO
 366: IFFALSE 453
// if Multiplayer_GetPlayerIsSpec ( i ) then
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 530
 377: IFFALSE 451
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 379: LD_ADDR_EXP 21
 383: PUSH
 384: LD_EXP 21
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_INT 0
 396: PPUSH
 397: CALL_OW 1
 401: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 402: LD_ADDR_EXP 19
 406: PUSH
 407: LD_EXP 19
 411: PPUSH
 412: LD_EXP 18
 416: PUSH
 417: LD_VAR 0 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 19
 427: PUSH
 428: LD_EXP 18
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: ARRAY
 439: PUSH
 440: LD_VAR 0 2
 444: DIFF
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// end ;
 451: GO 365
 453: POP
 454: POP
// if MultiPlayer then
 455: LD_OWVAR 4
 459: IFFALSE 666
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 461: LD_ADDR_EXP 43
 465: PUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 474: LD_ADDR_EXP 44
 478: PUSH
 479: LD_INT 1
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 487: LD_ADDR_EXP 45
 491: PUSH
 492: LD_INT 2
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 500: LD_ADDR_EXP 46
 504: PUSH
 505: LD_INT 3
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 513: LD_ADDR_EXP 47
 517: PUSH
 518: LD_INT 4
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 526: LD_ADDR_EXP 48
 530: PUSH
 531: LD_INT 5
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 539: LD_ADDR_EXP 50
 543: PUSH
 544: LD_INT 10
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 552: LD_ADDR_EXP 51
 556: PUSH
 557: LD_INT 11
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 565: LD_ADDR_EXP 52
 569: PUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 578: LD_ADDR_EXP 54
 582: PUSH
 583: LD_INT 13
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 591: LD_ADDR_EXP 53
 595: PUSH
 596: LD_INT 14
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 604: LD_ADDR_EXP 55
 608: PUSH
 609: LD_INT 15
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_public_score = GetMultiplayerSetting ( 16 ) ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 16
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_amount_score = GetMultiplayerSetting ( 17 ) ;
 630: LD_ADDR_EXP 2
 634: PUSH
 635: LD_INT 17
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 643: LD_ADDR_VAR 0 3
 647: PUSH
 648: LD_INT 22
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// def_win_rules = 0 ;
 656: LD_ADDR_EXP 17
 660: PUSH
 661: LD_INT 0
 663: ST_TO_ADDR
// end else
 664: GO 798
// begin randomize ;
 666: CALL_OW 10
// def_base_level = 3 ;
 670: LD_ADDR_EXP 43
 674: PUSH
 675: LD_INT 3
 677: ST_TO_ADDR
// def_amount_of_people = 1 ;
 678: LD_ADDR_EXP 44
 682: PUSH
 683: LD_INT 1
 685: ST_TO_ADDR
// def_skill_level = 1 ;
 686: LD_ADDR_EXP 45
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// def_starting_resources = 2 ;
 694: LD_ADDR_EXP 46
 698: PUSH
 699: LD_INT 2
 701: ST_TO_ADDR
// def_shipments_density = 1 ;
 702: LD_ADDR_EXP 47
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
 710: LD_ADDR_EXP 48
 714: PUSH
 715: LD_INT 0
 717: ST_TO_ADDR
// def_shared_vision = 1 ;
 718: LD_ADDR_EXP 50
 722: PUSH
 723: LD_INT 1
 725: ST_TO_ADDR
// def_morale_flags = 1 ;
 726: LD_ADDR_EXP 51
 730: PUSH
 731: LD_INT 1
 733: ST_TO_ADDR
// def_siberite_detection = 1 ;
 734: LD_ADDR_EXP 52
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 742: LD_ADDR_EXP 54
 746: PUSH
 747: LD_INT 3
 749: ST_TO_ADDR
// def_people_respawning = 2 ;
 750: LD_ADDR_EXP 53
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 758: LD_ADDR_EXP 55
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_public_score = 1 ;
 766: LD_ADDR_EXP 1
 770: PUSH
 771: LD_INT 1
 773: ST_TO_ADDR
// def_amount_score = 0 ;
 774: LD_ADDR_EXP 2
 778: PUSH
 779: LD_INT 0
 781: ST_TO_ADDR
// tech_level = 4 ;
 782: LD_ADDR_VAR 0 3
 786: PUSH
 787: LD_INT 4
 789: ST_TO_ADDR
// def_win_rules = 0 ;
 790: LD_ADDR_EXP 17
 794: PUSH
 795: LD_INT 0
 797: ST_TO_ADDR
// end ; Player_Side = Your_Side ;
 798: LD_ADDR_EXP 31
 802: PUSH
 803: LD_OWVAR 2
 807: ST_TO_ADDR
// player_team = Side_Teams [ Player_Side ] ;
 808: LD_ADDR_EXP 32
 812: PUSH
 813: LD_EXP 18
 817: PUSH
 818: LD_EXP 31
 822: ARRAY
 823: ST_TO_ADDR
// InitGameRules ;
 824: CALL 7762 0 0
// if def_game_rules = 0 then
 828: LD_EXP 42
 832: PUSH
 833: LD_INT 0
 835: EQUAL
 836: IFFALSE 863
// begin if isSGUI then
 838: LD_OWVAR 83
 842: IFFALSE 850
// setMpTechs ( ) else
 844: CALL 15558 0 0
 848: GO 863
// begin SetMpTechLevel ( tech_level + 1 ) ;
 850: LD_VAR 0 3
 854: PUSH
 855: LD_INT 1
 857: PLUS
 858: PPUSH
 859: CALL 15705 0 1
// end ; end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 863: LD_ADDR_EXP 3
 867: PUSH
 868: LD_INT 0
 870: PUSH
 871: LD_INT 1
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: PUSH
 886: LD_EXP 43
 890: PUSH
 891: LD_INT 1
 893: PLUS
 894: ARRAY
 895: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 896: LD_ADDR_EXP 4
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: LD_INT 0
 906: PUSH
 907: LD_INT 2
 909: PUSH
 910: LD_INT 4
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_EXP 43
 923: PUSH
 924: LD_INT 1
 926: PLUS
 927: ARRAY
 928: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 929: LD_ADDR_EXP 5
 933: PUSH
 934: LD_INT 9
 936: PUSH
 937: LD_INT 12
 939: PUSH
 940: LD_INT 15
 942: PUSH
 943: LD_INT 24
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_EXP 44
 956: PUSH
 957: LD_INT 1
 959: PLUS
 960: ARRAY
 961: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 962: LD_ADDR_EXP 7
 966: PUSH
 967: LD_INT 2
 969: PUSH
 970: LD_INT 3
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: LD_INT 5
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_EXP 45
 989: PUSH
 990: LD_INT 1
 992: PLUS
 993: ARRAY
 994: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 995: LD_ADDR_EXP 9
 999: PUSH
1000: LD_INT 0
1002: PUSH
1003: LD_INT 0
1005: PUSH
1006: LD_INT 0
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 30
1016: PUSH
1017: LD_INT 0
1019: PUSH
1020: LD_INT 0
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 50
1030: PUSH
1031: LD_INT 20
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 80
1044: PUSH
1045: LD_INT 40
1047: PUSH
1048: LD_INT 20
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_EXP 46
1066: PUSH
1067: LD_INT 1
1069: PLUS
1070: ARRAY
1071: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1072: LD_ADDR_EXP 8
1076: PUSH
1077: LD_INT 10
1079: PUSH
1080: EMPTY
1081: LIST
1082: PUSH
1083: LD_INT 7
1085: PUSH
1086: LD_INT 14
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 6
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 18
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 5
1109: PUSH
1110: LD_INT 10
1112: PUSH
1113: LD_INT 15
1115: PUSH
1116: LD_INT 20
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: PUSH
1131: LD_EXP 46
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: ARRAY
1140: ST_TO_ADDR
// shipments_density = [ 15 , 20 , 25 ] [ def_shipments_density + 1 ] ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_INT 15
1148: PUSH
1149: LD_INT 20
1151: PUSH
1152: LD_INT 25
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 47
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1170: LD_ADDR_EXP 6
1174: PUSH
1175: LD_INT 0
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: LD_INT 2
1183: PUSH
1184: LD_INT 3
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 54
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1203: LD_ADDR_EXP 12
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 165
1213: PUSH
1214: LD_INT 140
1216: PUSH
1217: LD_INT 115
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_EXP 54
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1236: LD_ADDR_EXP 13
1240: PUSH
1241: LD_INT 0
1243: PUSH
1244: LD_INT 8400
1246: PUSH
1247: LD_INT 1750
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_EXP 53
1259: PUSH
1260: LD_INT 1
1262: PLUS
1263: ARRAY
1264: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1265: LD_ADDR_EXP 14
1269: PUSH
1270: LD_INT 0
1272: PUSH
1273: LD_INT 21000
1275: PUSH
1276: LD_INT 4200
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: PUSH
1284: LD_EXP 53
1288: PUSH
1289: LD_INT 1
1291: PLUS
1292: ARRAY
1293: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1294: LD_ADDR_EXP 11
1298: PUSH
1299: LD_INT 1
1301: NEG
1302: PUSH
1303: LD_INT 350
1305: PUSH
1306: LD_INT 700
1308: PUSH
1309: LD_INT 1400
1311: PUSH
1312: LD_INT 0
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_EXP 51
1326: PUSH
1327: LD_INT 1
1329: PLUS
1330: ARRAY
1331: ST_TO_ADDR
// battle_flags_id = [ ] ;
1332: LD_ADDR_EXP 28
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// amount_score = [ 200 , 300 , 500 , 700 , 1000 , 1500 ] [ def_amount_score + 1 ] ;
1339: LD_ADDR_EXP 15
1343: PUSH
1344: LD_INT 200
1346: PUSH
1347: LD_INT 300
1349: PUSH
1350: LD_INT 500
1352: PUSH
1353: LD_INT 700
1355: PUSH
1356: LD_INT 1000
1358: PUSH
1359: LD_INT 1500
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1380: LD_ADDR_EXP 16
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 63000
1393: PUSH
1394: LD_INT 126000
1396: PUSH
1397: LD_INT 189000
1399: PUSH
1400: LD_INT 252000
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 55
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// if not def_builduptime then
1421: LD_EXP 56
1425: NOT
1426: IFFALSE 1431
// disable ( 600 ) ;
1428: LD_INT 600
1430: DISABLE_MARKED
// king_territory = KopecStred ;
1431: LD_ADDR_EXP 29
1435: PUSH
1436: LD_INT 2
1438: ST_TO_ADDR
// final_count = amount_score ;
1439: LD_ADDR_EXP 30
1443: PUSH
1444: LD_EXP 15
1448: ST_TO_ADDR
// end ;
1449: LD_VAR 0 1
1453: RET
// function init_map ; var i ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
// extra_oil_deposits_locations := [ [ 53 , 26 ] , [ 51 , 53 ] , [ 129 , 20 ] , [ 155 , 53 ] , [ 187 , 139 ] , [ 183 , 107 ] , [ 106 , 135 ] , [ 80 , 106 ] ] ;
1458: LD_ADDR_EXP 27
1462: PUSH
1463: LD_INT 53
1465: PUSH
1466: LD_INT 26
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 51
1475: PUSH
1476: LD_INT 53
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: PUSH
1483: LD_INT 129
1485: PUSH
1486: LD_INT 20
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 155
1495: PUSH
1496: LD_INT 53
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: PUSH
1503: LD_INT 187
1505: PUSH
1506: LD_INT 139
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PUSH
1513: LD_INT 183
1515: PUSH
1516: LD_INT 107
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 106
1525: PUSH
1526: LD_INT 135
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 80
1535: PUSH
1536: LD_INT 106
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// depot_def := [ [ 29 , 22 , 3 ] , [ 154 , 21 , 3 ] , [ 85 , 138 , 0 ] , [ 212 , 141 , 5 ] ] ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_INT 29
1560: PUSH
1561: LD_INT 22
1563: PUSH
1564: LD_INT 3
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 154
1574: PUSH
1575: LD_INT 21
1577: PUSH
1578: LD_INT 3
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 85
1588: PUSH
1589: LD_INT 138
1591: PUSH
1592: LD_INT 0
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 212
1602: PUSH
1603: LD_INT 141
1605: PUSH
1606: LD_INT 5
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: ST_TO_ADDR
// start_def := [ [ 33 , 25 ] , [ 151 , 24 ] , [ 89 , 135 ] , [ 205 , 137 ] ] ;
1620: LD_ADDR_EXP 26
1624: PUSH
1625: LD_INT 33
1627: PUSH
1628: LD_INT 25
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 151
1637: PUSH
1638: LD_INT 24
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 89
1647: PUSH
1648: LD_INT 135
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 205
1657: PUSH
1658: LD_INT 137
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// breastworks_def := [ [ [ 46 , 13 , 4 ] , [ 43 , 39 , 4 ] , [ 47 , 25 , 5 ] , [ 45 , 44 , 5 ] ] , [ [ 129 , 12 , 0 ] , [ 153 , 34 , 1 ] , [ 139 , 24 , 0 ] , [ 158 , 41 , 0 ] ] , [ [ 84 , 121 , 4 ] , [ 109 , 143 , 4 ] , [ 87 , 126 , 4 ] , [ 111 , 148 , 4 ] ] , [ [ 194 , 146 , 2 ] , [ 195 , 121 , 1 ] , [ 193 , 135 , 2 ] , [ 192 , 116 , 2 ] ] , ] ;
1671: LD_ADDR_EXP 25
1675: PUSH
1676: LD_INT 46
1678: PUSH
1679: LD_INT 13
1681: PUSH
1682: LD_INT 4
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 43
1692: PUSH
1693: LD_INT 39
1695: PUSH
1696: LD_INT 4
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 47
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 45
1720: PUSH
1721: LD_INT 44
1723: PUSH
1724: LD_INT 5
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 129
1740: PUSH
1741: LD_INT 12
1743: PUSH
1744: LD_INT 0
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 153
1754: PUSH
1755: LD_INT 34
1757: PUSH
1758: LD_INT 1
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 139
1768: PUSH
1769: LD_INT 24
1771: PUSH
1772: LD_INT 0
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 158
1782: PUSH
1783: LD_INT 41
1785: PUSH
1786: LD_INT 0
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 84
1802: PUSH
1803: LD_INT 121
1805: PUSH
1806: LD_INT 4
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 109
1816: PUSH
1817: LD_INT 143
1819: PUSH
1820: LD_INT 4
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 87
1830: PUSH
1831: LD_INT 126
1833: PUSH
1834: LD_INT 4
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 111
1844: PUSH
1845: LD_INT 148
1847: PUSH
1848: LD_INT 4
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 194
1864: PUSH
1865: LD_INT 146
1867: PUSH
1868: LD_INT 2
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 195
1878: PUSH
1879: LD_INT 121
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 193
1892: PUSH
1893: LD_INT 135
1895: PUSH
1896: LD_INT 2
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 192
1906: PUSH
1907: LD_INT 116
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// if def_extra_oil_deposits then
1930: LD_EXP 48
1934: IFFALSE 1978
// for i in extra_oil_deposits_locations do
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_EXP 27
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1976
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1949: LD_VAR 0 2
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 2
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 2
1969: PPUSH
1970: CALL_OW 62
1974: GO 1946
1976: POP
1977: POP
// end ;
1978: LD_VAR 0 1
1982: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1983: LD_INT 0
1985: PPUSH
1986: PPUSH
1987: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1988: LD_ADDR_EXP 23
1992: PUSH
1993: LD_EXP 18
1997: PUSH
1998: LD_INT 0
2000: PUSH
2001: EMPTY
2002: LIST
2003: DIFF
2004: PUSH
2005: LD_INT 1
2007: GREATER
2008: ST_TO_ADDR
// if not Team_Game then
2009: LD_EXP 23
2013: NOT
2014: IFFALSE 2112
// begin for i = 1 to 8 do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: DOUBLE
2022: LD_INT 1
2024: DEC
2025: ST_TO_ADDR
2026: LD_INT 8
2028: PUSH
2029: FOR_TO
2030: IFFALSE 2108
// for j = 1 to 8 do
2032: LD_ADDR_VAR 0 3
2036: PUSH
2037: DOUBLE
2038: LD_INT 1
2040: DEC
2041: ST_TO_ADDR
2042: LD_INT 8
2044: PUSH
2045: FOR_TO
2046: IFFALSE 2104
// if i <> j then
2048: LD_VAR 0 2
2052: PUSH
2053: LD_VAR 0 3
2057: NONEQUAL
2058: IFFALSE 2082
// SetAttitude ( i , j , att_neutral , true ) else
2060: LD_VAR 0 2
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: LD_INT 0
2072: PPUSH
2073: LD_INT 1
2075: PPUSH
2076: CALL_OW 80
2080: GO 2102
// SetAttitude ( i , j , att_friend , true ) ;
2082: LD_VAR 0 2
2086: PPUSH
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: LD_INT 1
2097: PPUSH
2098: CALL_OW 80
2102: GO 2045
2104: POP
2105: POP
2106: GO 2029
2108: POP
2109: POP
// end else
2110: GO 2287
// begin if def_shared_vision then
2112: LD_EXP 50
2116: IFFALSE 2181
// begin for i in Teams do
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_EXP 19
2127: PUSH
2128: FOR_IN
2129: IFFALSE 2179
// for j = 2 to i do
2131: LD_ADDR_VAR 0 3
2135: PUSH
2136: DOUBLE
2137: LD_INT 2
2139: DEC
2140: ST_TO_ADDR
2141: LD_VAR 0 2
2145: PUSH
2146: FOR_TO
2147: IFFALSE 2175
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2149: LD_VAR 0 2
2153: PUSH
2154: LD_VAR 0 3
2158: ARRAY
2159: PPUSH
2160: LD_VAR 0 2
2164: PUSH
2165: LD_INT 1
2167: ARRAY
2168: PPUSH
2169: CALL_OW 343
2173: GO 2146
2175: POP
2176: POP
2177: GO 2128
2179: POP
2180: POP
// end ; for i = 1 to 8 do
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: DOUBLE
2187: LD_INT 1
2189: DEC
2190: ST_TO_ADDR
2191: LD_INT 8
2193: PUSH
2194: FOR_TO
2195: IFFALSE 2285
// for j = 1 to 8 do
2197: LD_ADDR_VAR 0 3
2201: PUSH
2202: DOUBLE
2203: LD_INT 1
2205: DEC
2206: ST_TO_ADDR
2207: LD_INT 8
2209: PUSH
2210: FOR_TO
2211: IFFALSE 2281
// if Side_Teams [ i ] = Side_Teams [ j ] then
2213: LD_EXP 18
2217: PUSH
2218: LD_VAR 0 2
2222: ARRAY
2223: PUSH
2224: LD_EXP 18
2228: PUSH
2229: LD_VAR 0 3
2233: ARRAY
2234: EQUAL
2235: IFFALSE 2259
// SetAttitude ( i , j , att_friend , true ) else
2237: LD_VAR 0 2
2241: PPUSH
2242: LD_VAR 0 3
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: CALL_OW 80
2257: GO 2279
// SetAttitude ( i , j , att_enemy , true ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: LD_INT 1
2274: PPUSH
2275: CALL_OW 80
2279: GO 2210
2281: POP
2282: POP
2283: GO 2194
2285: POP
2286: POP
// end ; end ;
2287: LD_VAR 0 1
2291: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2292: LD_INT 0
2294: PPUSH
2295: PPUSH
2296: PPUSH
2297: PPUSH
// result := [ ] ;
2298: LD_ADDR_VAR 0 6
2302: PUSH
2303: EMPTY
2304: ST_TO_ADDR
// for i := 1 to count do
2305: LD_ADDR_VAR 0 7
2309: PUSH
2310: DOUBLE
2311: LD_INT 1
2313: DEC
2314: ST_TO_ADDR
2315: LD_VAR 0 1
2319: PUSH
2320: FOR_TO
2321: IFFALSE 2717
// begin uc_direction := Rand ( 0 , 5 ) ;
2323: LD_ADDR_OWVAR 24
2327: PUSH
2328: LD_INT 0
2330: PPUSH
2331: LD_INT 5
2333: PPUSH
2334: CALL_OW 12
2338: ST_TO_ADDR
// if commander then
2339: LD_LOC 1
2343: IFFALSE 2452
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2345: LD_ADDR_OWVAR 26
2349: PUSH
2350: LD_OWVAR 19
2354: PUSH
2355: LD_OWVAR 20
2359: ARRAY
2360: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2361: LD_INT 1
2363: PPUSH
2364: LD_INT 2
2366: PPUSH
2367: CALL_OW 12
2371: PPUSH
2372: LD_VAR 0 2
2376: PPUSH
2377: LD_EXP 7
2381: PUSH
2382: LD_INT 2
2384: PLUS
2385: PPUSH
2386: CALL_OW 380
// hc_importance := 105 ;
2390: LD_ADDR_OWVAR 32
2394: PUSH
2395: LD_INT 105
2397: ST_TO_ADDR
// commander := false ;
2398: LD_ADDR_LOC 1
2402: PUSH
2403: LD_INT 0
2405: ST_TO_ADDR
// if Multiplayer then
2406: LD_OWVAR 4
2410: IFFALSE 2450
// begin hc_gallery := MULTIAVATARS ;
2412: LD_ADDR_OWVAR 33
2416: PUSH
2417: LD_STRING MULTIAVATARS
2419: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2420: LD_ADDR_OWVAR 34
2424: PUSH
2425: LD_OWVAR 20
2429: PPUSH
2430: CALL_OW 525
2434: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2435: LD_ADDR_OWVAR 27
2439: PUSH
2440: LD_OWVAR 20
2444: PPUSH
2445: CALL_OW 526
2449: ST_TO_ADDR
// end ; end else
2450: GO 2515
// begin hc_name :=  ;
2452: LD_ADDR_OWVAR 26
2456: PUSH
2457: LD_STRING 
2459: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2460: LD_INT 1
2462: PPUSH
2463: LD_INT 2
2465: PPUSH
2466: CALL_OW 12
2470: PPUSH
2471: LD_VAR 0 2
2475: PPUSH
2476: LD_EXP 7
2480: PPUSH
2481: CALL_OW 380
// hc_importance := 0 ;
2485: LD_ADDR_OWVAR 32
2489: PUSH
2490: LD_INT 0
2492: ST_TO_ADDR
// if Multiplayer then
2493: LD_OWVAR 4
2497: IFFALSE 2515
// begin hc_gallery :=  ;
2499: LD_ADDR_OWVAR 33
2503: PUSH
2504: LD_STRING 
2506: ST_TO_ADDR
// hc_face_number := 0 ;
2507: LD_ADDR_OWVAR 34
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2515: LD_ADDR_VAR 0 9
2519: PUSH
2520: CALL_OW 44
2524: ST_TO_ADDR
// if global_defined then
2525: LD_LOC 3
2529: IFFALSE 2669
// begin if ( cl = class_soldier ) then
2531: LD_VAR 0 2
2535: PUSH
2536: LD_INT 1
2538: EQUAL
2539: IFFALSE 2559
// j := i + soldiers_created else
2541: LD_ADDR_VAR 0 8
2545: PUSH
2546: LD_VAR 0 7
2550: PUSH
2551: LD_LOC 4
2555: PLUS
2556: ST_TO_ADDR
2557: GO 2569
// j := i ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_VAR 0 7
2568: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2569: LD_LOC 2
2573: PUSH
2574: LD_VAR 0 2
2578: ARRAY
2579: PUSH
2580: LD_VAR 0 8
2584: ARRAY
2585: PPUSH
2586: LD_VAR 0 9
2590: PPUSH
2591: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: LD_INT 2
2602: PPUSH
2603: LD_LOC 2
2607: PUSH
2608: LD_VAR 0 2
2612: ARRAY
2613: PUSH
2614: LD_VAR 0 8
2618: ARRAY
2619: PPUSH
2620: LD_INT 2
2622: PPUSH
2623: CALL_OW 260
2627: PPUSH
2628: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2632: LD_VAR 0 9
2636: PPUSH
2637: LD_INT 1
2639: PPUSH
2640: LD_LOC 2
2644: PUSH
2645: LD_VAR 0 2
2649: ARRAY
2650: PUSH
2651: LD_VAR 0 8
2655: ARRAY
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: CALL_OW 260
2664: PPUSH
2665: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2669: LD_VAR 0 9
2673: PPUSH
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_VAR 0 4
2683: PPUSH
2684: LD_VAR 0 5
2688: PPUSH
2689: LD_INT 0
2691: PPUSH
2692: CALL_OW 50
// result := result ^ [ un ] ;
2696: LD_ADDR_VAR 0 6
2700: PUSH
2701: LD_VAR 0 6
2705: PUSH
2706: LD_VAR 0 9
2710: PUSH
2711: EMPTY
2712: LIST
2713: ADD
2714: ST_TO_ADDR
// end ;
2715: GO 2320
2717: POP
2718: POP
// if not global_defined then
2719: LD_LOC 3
2723: NOT
2724: IFFALSE 2802
// if ( global_units >= cl ) then
2726: LD_LOC 2
2730: PUSH
2731: LD_VAR 0 2
2735: GREATEREQUAL
2736: IFFALSE 2777
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2738: LD_ADDR_LOC 2
2742: PUSH
2743: LD_LOC 2
2747: PPUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: LD_LOC 2
2757: PUSH
2758: LD_VAR 0 2
2762: ARRAY
2763: PUSH
2764: LD_VAR 0 6
2768: ADD
2769: PPUSH
2770: CALL_OW 1
2774: ST_TO_ADDR
2775: GO 2802
// global_units := Replace ( global_units , cl , result ) ;
2777: LD_ADDR_LOC 2
2781: PUSH
2782: LD_LOC 2
2786: PPUSH
2787: LD_VAR 0 2
2791: PPUSH
2792: LD_VAR 0 6
2796: PPUSH
2797: CALL_OW 1
2801: ST_TO_ADDR
// end ;
2802: LD_VAR 0 6
2806: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , sol , br , dep ; begin
2807: LD_INT 0
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
2817: PPUSH
2818: PPUSH
// pos := Side_Positions [ side ] ;
2819: LD_ADDR_VAR 0 3
2823: PUSH
2824: LD_EXP 21
2828: PUSH
2829: LD_VAR 0 1
2833: ARRAY
2834: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2835: LD_ADDR_OWVAR 21
2839: PUSH
2840: LD_EXP 22
2844: PUSH
2845: LD_VAR 0 1
2849: ARRAY
2850: ST_TO_ADDR
// uc_side := side ;
2851: LD_ADDR_OWVAR 20
2855: PUSH
2856: LD_VAR 0 1
2860: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2861: LD_ADDR_VAR 0 4
2865: PUSH
2866: LD_EXP 24
2870: PUSH
2871: LD_VAR 0 3
2875: ARRAY
2876: PUSH
2877: LD_INT 1
2879: ARRAY
2880: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2881: LD_ADDR_VAR 0 5
2885: PUSH
2886: LD_EXP 24
2890: PUSH
2891: LD_VAR 0 3
2895: ARRAY
2896: PUSH
2897: LD_INT 2
2899: ARRAY
2900: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2901: LD_ADDR_VAR 0 6
2905: PUSH
2906: LD_EXP 24
2910: PUSH
2911: LD_VAR 0 3
2915: ARRAY
2916: PUSH
2917: LD_INT 3
2919: ARRAY
2920: ST_TO_ADDR
// if is_depot then
2921: LD_EXP 3
2925: IFFALSE 3058
// begin bc_type = b_depot ;
2927: LD_ADDR_OWVAR 42
2931: PUSH
2932: LD_INT 0
2934: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2935: LD_ADDR_VAR 0 11
2939: PUSH
2940: LD_VAR 0 4
2944: PPUSH
2945: LD_VAR 0 5
2949: PPUSH
2950: LD_VAR 0 6
2954: PPUSH
2955: CALL_OW 47
2959: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2960: LD_VAR 0 11
2964: PPUSH
2965: LD_STRING @
2967: PUSH
2968: LD_VAR 0 1
2972: STR
2973: PPUSH
2974: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2978: LD_VAR 0 11
2982: PPUSH
2983: CALL_OW 274
2987: PPUSH
2988: LD_INT 1
2990: PPUSH
2991: LD_EXP 9
2995: PUSH
2996: LD_INT 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3004: LD_VAR 0 11
3008: PPUSH
3009: CALL_OW 274
3013: PPUSH
3014: LD_INT 2
3016: PPUSH
3017: LD_EXP 9
3021: PUSH
3022: LD_INT 2
3024: ARRAY
3025: PPUSH
3026: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3030: LD_VAR 0 11
3034: PPUSH
3035: CALL_OW 274
3039: PPUSH
3040: LD_INT 3
3042: PPUSH
3043: LD_EXP 9
3047: PUSH
3048: LD_INT 3
3050: ARRAY
3051: PPUSH
3052: CALL_OW 277
// end else
3056: GO 3202
// begin for i := 1 to 3 do
3058: LD_ADDR_VAR 0 7
3062: PUSH
3063: DOUBLE
3064: LD_INT 1
3066: DEC
3067: ST_TO_ADDR
3068: LD_INT 3
3070: PUSH
3071: FOR_TO
3072: IFFALSE 3200
// begin r := starting_resources [ i ] ;
3074: LD_ADDR_VAR 0 8
3078: PUSH
3079: LD_EXP 9
3083: PUSH
3084: LD_VAR 0 7
3088: ARRAY
3089: ST_TO_ADDR
// while r >= 10 do
3090: LD_VAR 0 8
3094: PUSH
3095: LD_INT 10
3097: GREATEREQUAL
3098: IFFALSE 3198
// if r > 50 then
3100: LD_VAR 0 8
3104: PUSH
3105: LD_INT 50
3107: GREATER
3108: IFFALSE 3154
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3110: LD_VAR 0 7
3114: PPUSH
3115: LD_INT 5
3117: PPUSH
3118: LD_VAR 0 4
3122: PPUSH
3123: LD_VAR 0 5
3127: PPUSH
3128: LD_INT 4
3130: PPUSH
3131: LD_INT 0
3133: PPUSH
3134: CALL_OW 60
// r := r - 50 ;
3138: LD_ADDR_VAR 0 8
3142: PUSH
3143: LD_VAR 0 8
3147: PUSH
3148: LD_INT 50
3150: MINUS
3151: ST_TO_ADDR
// end else
3152: GO 3196
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3154: LD_VAR 0 7
3158: PPUSH
3159: LD_VAR 0 8
3163: PUSH
3164: LD_INT 10
3166: DIV
3167: PPUSH
3168: LD_VAR 0 4
3172: PPUSH
3173: LD_VAR 0 5
3177: PPUSH
3178: LD_INT 4
3180: PPUSH
3181: LD_INT 0
3183: PPUSH
3184: CALL_OW 60
// r := 0 ;
3188: LD_ADDR_VAR 0 8
3192: PUSH
3193: LD_INT 0
3195: ST_TO_ADDR
// end ;
3196: GO 3090
// end ;
3198: GO 3071
3200: POP
3201: POP
// end ; for r in starting_crates do
3202: LD_ADDR_VAR 0 8
3206: PUSH
3207: LD_EXP 8
3211: PUSH
3212: FOR_IN
3213: IFFALSE 3245
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3215: LD_INT 1
3217: PPUSH
3218: LD_INT 5
3220: PPUSH
3221: LD_VAR 0 4
3225: PPUSH
3226: LD_VAR 0 5
3230: PPUSH
3231: LD_VAR 0 8
3235: PPUSH
3236: LD_INT 0
3238: PPUSH
3239: CALL_OW 60
3243: GO 3212
3245: POP
3246: POP
// if def_morale_flags then
3247: LD_EXP 51
3251: IFFALSE 3390
// begin x := start_def [ pos ] [ 1 ] ;
3253: LD_ADDR_VAR 0 4
3257: PUSH
3258: LD_EXP 26
3262: PUSH
3263: LD_VAR 0 3
3267: ARRAY
3268: PUSH
3269: LD_INT 1
3271: ARRAY
3272: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3273: LD_ADDR_VAR 0 5
3277: PUSH
3278: LD_EXP 26
3282: PUSH
3283: LD_VAR 0 3
3287: ARRAY
3288: PUSH
3289: LD_INT 2
3291: ARRAY
3292: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3293: LD_VAR 0 4
3297: PPUSH
3298: LD_VAR 0 5
3302: PPUSH
3303: LD_INT 12
3305: PPUSH
3306: LD_INT 2
3308: PPUSH
3309: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3313: LD_ADDR_EXP 28
3317: PUSH
3318: LD_EXP 28
3322: PUSH
3323: LD_VAR 0 1
3327: PPUSH
3328: LD_VAR 0 4
3332: PPUSH
3333: LD_VAR 0 5
3337: PPUSH
3338: LD_INT 1
3340: PUSH
3341: LD_INT 100
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 2
3350: PUSH
3351: LD_INT 50
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: LD_INT 3
3360: PUSH
3361: LD_INT 20
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PUSH
3368: LD_INT 20
3370: PUSH
3371: LD_INT 100
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: PPUSH
3384: CALL_OW 418
3388: ADD
3389: ST_TO_ADDR
// end ; commander := true ;
3390: LD_ADDR_LOC 1
3394: PUSH
3395: LD_INT 1
3397: ST_TO_ADDR
// soldiers_created := 0 ;
3398: LD_ADDR_LOC 4
3402: PUSH
3403: LD_INT 0
3405: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3406: LD_ADDR_VAR 0 7
3410: PUSH
3411: DOUBLE
3412: LD_INT 1
3414: DEC
3415: ST_TO_ADDR
3416: LD_EXP 4
3420: PUSH
3421: FOR_TO
3422: IFFALSE 3644
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3424: LD_ADDR_VAR 0 4
3428: PUSH
3429: LD_EXP 25
3433: PUSH
3434: LD_VAR 0 3
3438: ARRAY
3439: PUSH
3440: LD_VAR 0 7
3444: ARRAY
3445: PUSH
3446: LD_INT 1
3448: ARRAY
3449: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3450: LD_ADDR_VAR 0 5
3454: PUSH
3455: LD_EXP 25
3459: PUSH
3460: LD_VAR 0 3
3464: ARRAY
3465: PUSH
3466: LD_VAR 0 7
3470: ARRAY
3471: PUSH
3472: LD_INT 2
3474: ARRAY
3475: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3476: LD_ADDR_VAR 0 6
3480: PUSH
3481: LD_EXP 25
3485: PUSH
3486: LD_VAR 0 3
3490: ARRAY
3491: PUSH
3492: LD_VAR 0 7
3496: ARRAY
3497: PUSH
3498: LD_INT 3
3500: ARRAY
3501: ST_TO_ADDR
// bc_type := b_breastwork ;
3502: LD_ADDR_OWVAR 42
3506: PUSH
3507: LD_INT 31
3509: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3510: LD_ADDR_VAR 0 10
3514: PUSH
3515: LD_VAR 0 4
3519: PPUSH
3520: LD_VAR 0 5
3524: PPUSH
3525: LD_VAR 0 6
3529: PPUSH
3530: CALL_OW 47
3534: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3535: LD_ADDR_VAR 0 4
3539: PUSH
3540: LD_VAR 0 4
3544: PPUSH
3545: LD_VAR 0 6
3549: PPUSH
3550: LD_INT 2
3552: PPUSH
3553: CALL_OW 272
3557: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3558: LD_ADDR_VAR 0 5
3562: PUSH
3563: LD_VAR 0 5
3567: PPUSH
3568: LD_VAR 0 6
3572: PPUSH
3573: LD_INT 2
3575: PPUSH
3576: CALL_OW 273
3580: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3581: LD_ADDR_VAR 0 9
3585: PUSH
3586: LD_INT 1
3588: PPUSH
3589: LD_INT 1
3591: PPUSH
3592: LD_VAR 0 4
3596: PPUSH
3597: LD_VAR 0 5
3601: PPUSH
3602: LD_INT 0
3604: PPUSH
3605: CALL 2292 0 5
3609: PUSH
3610: LD_INT 1
3612: ARRAY
3613: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3614: LD_ADDR_LOC 4
3618: PUSH
3619: LD_LOC 4
3623: PUSH
3624: LD_INT 1
3626: PLUS
3627: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3628: LD_VAR 0 9
3632: PPUSH
3633: LD_VAR 0 10
3637: PPUSH
3638: CALL_OW 120
// end ;
3642: GO 3421
3644: POP
3645: POP
// x := start_def [ pos ] [ 1 ] ;
3646: LD_ADDR_VAR 0 4
3650: PUSH
3651: LD_EXP 26
3655: PUSH
3656: LD_VAR 0 3
3660: ARRAY
3661: PUSH
3662: LD_INT 1
3664: ARRAY
3665: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3666: LD_ADDR_VAR 0 5
3670: PUSH
3671: LD_EXP 26
3675: PUSH
3676: LD_VAR 0 3
3680: ARRAY
3681: PUSH
3682: LD_INT 2
3684: ARRAY
3685: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
3686: LD_LOC 8
3690: PUSH
3691: LD_EXP 4
3695: MINUS
3696: PPUSH
3697: LD_INT 1
3699: PPUSH
3700: LD_VAR 0 4
3704: PPUSH
3705: LD_VAR 0 5
3709: PPUSH
3710: LD_INT 5
3712: PPUSH
3713: CALL 2292 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
3717: LD_LOC 5
3721: PPUSH
3722: LD_INT 2
3724: PPUSH
3725: LD_VAR 0 4
3729: PPUSH
3730: LD_VAR 0 5
3734: PPUSH
3735: LD_INT 5
3737: PPUSH
3738: CALL 2292 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
3742: LD_LOC 7
3746: PPUSH
3747: LD_INT 3
3749: PPUSH
3750: LD_VAR 0 4
3754: PPUSH
3755: LD_VAR 0 5
3759: PPUSH
3760: LD_INT 5
3762: PPUSH
3763: CALL 2292 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
3767: LD_LOC 6
3771: PPUSH
3772: LD_INT 4
3774: PPUSH
3775: LD_VAR 0 4
3779: PPUSH
3780: LD_VAR 0 5
3784: PPUSH
3785: LD_INT 5
3787: PPUSH
3788: CALL 2292 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3792: LD_EXP 52
3796: PUSH
3797: LD_INT 20
3799: PPUSH
3800: LD_VAR 0 1
3804: PPUSH
3805: CALL_OW 321
3809: PUSH
3810: LD_INT 1
3812: EQUAL
3813: AND
3814: IFFALSE 3831
// SetTech ( tech_SibDet , side , state_researched ) ;
3816: LD_INT 20
3818: PPUSH
3819: LD_VAR 0 1
3823: PPUSH
3824: LD_INT 2
3826: PPUSH
3827: CALL_OW 322
// if def_siberite_bomb = 1 then
3831: LD_EXP 55
3835: PUSH
3836: LD_INT 1
3838: EQUAL
3839: IFFALSE 3873
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3841: LD_INT 25
3843: PPUSH
3844: LD_VAR 0 1
3848: PPUSH
3849: LD_INT 1
3851: PPUSH
3852: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3856: LD_INT 73
3858: PPUSH
3859: LD_VAR 0 1
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: CALL_OW 322
// end else
3871: GO 3903
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3873: LD_INT 25
3875: PPUSH
3876: LD_VAR 0 1
3880: PPUSH
3881: LD_INT 0
3883: PPUSH
3884: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3888: LD_INT 73
3890: PPUSH
3891: LD_VAR 0 1
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3903: LD_INT 24
3905: PPUSH
3906: LD_VAR 0 1
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 322
// global_defined := true ;
3918: LD_ADDR_LOC 3
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// end ;
3926: LD_VAR 0 2
3930: RET
// every 0 0$1 do
3931: GO 3933
3933: DISABLE
// if ( def_siberite_bomb > 1 ) then
3934: LD_EXP 55
3938: PUSH
3939: LD_INT 1
3941: GREATER
3942: IFFALSE 3957
// begin wait ( siberite_bomb_Delay ) ;
3944: LD_EXP 16
3948: PPUSH
3949: CALL_OW 67
// EnableSibFiss ;
3953: CALL 3958 0 0
// end ;
3957: END
// function EnableSibFiss ; var i ; begin
3958: LD_INT 0
3960: PPUSH
3961: PPUSH
// for i := 1 to 8 do
3962: LD_ADDR_VAR 0 2
3966: PUSH
3967: DOUBLE
3968: LD_INT 1
3970: DEC
3971: ST_TO_ADDR
3972: LD_INT 8
3974: PUSH
3975: FOR_TO
3976: IFFALSE 4022
// if Side_Positions [ i ] then
3978: LD_EXP 21
3982: PUSH
3983: LD_VAR 0 2
3987: ARRAY
3988: IFFALSE 4020
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3990: LD_INT 25
3992: PPUSH
3993: LD_VAR 0 2
3997: PPUSH
3998: LD_INT 1
4000: PPUSH
4001: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4005: LD_INT 73
4007: PPUSH
4008: LD_VAR 0 2
4012: PPUSH
4013: LD_INT 1
4015: PPUSH
4016: CALL_OW 322
// end ;
4020: GO 3975
4022: POP
4023: POP
// end ;
4024: LD_VAR 0 1
4028: RET
// function prepare_sides ; var i ; begin
4029: LD_INT 0
4031: PPUSH
4032: PPUSH
// global_units := [ ] ;
4033: LD_ADDR_LOC 2
4037: PUSH
4038: EMPTY
4039: ST_TO_ADDR
// global_defined := false ;
4040: LD_ADDR_LOC 3
4044: PUSH
4045: LD_INT 0
4047: ST_TO_ADDR
// CountClassMembers ;
4048: CALL 4098 0 0
// for i := 1 to 8 do
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: DOUBLE
4058: LD_INT 1
4060: DEC
4061: ST_TO_ADDR
4062: LD_INT 8
4064: PUSH
4065: FOR_TO
4066: IFFALSE 4091
// if Side_Positions [ i ] then
4068: LD_EXP 21
4072: PUSH
4073: LD_VAR 0 2
4077: ARRAY
4078: IFFALSE 4089
// prepare_side ( i ) ;
4080: LD_VAR 0 2
4084: PPUSH
4085: CALL 2807 0 1
4089: GO 4065
4091: POP
4092: POP
// end ;
4093: LD_VAR 0 1
4097: RET
// function CountClassMembers ; var Mode ; begin
4098: LD_INT 0
4100: PPUSH
4101: PPUSH
// if No_Mechs then
4102: LD_EXP 57
4106: IFFALSE 4118
// Mode := 2 else
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: LD_INT 2
4115: ST_TO_ADDR
4116: GO 4126
// Mode := 1 ;
4118: LD_ADDR_VAR 0 2
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// neng := number_of_people ;
4126: LD_ADDR_LOC 5
4130: PUSH
4131: LD_EXP 5
4135: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4136: LD_ADDR_LOC 8
4140: PUSH
4141: LD_LOC 5
4145: PUSH
4146: LD_INT 4
4148: PUSH
4149: LD_INT 3
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: LD_VAR 0 2
4160: ARRAY
4161: DIV
4162: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4163: LD_LOC 8
4167: PUSH
4168: LD_EXP 4
4172: LESS
4173: IFFALSE 4185
// nsol := number_of_breastworks ;
4175: LD_ADDR_LOC 8
4179: PUSH
4180: LD_EXP 4
4184: ST_TO_ADDR
// neng := neng - nsol ;
4185: LD_ADDR_LOC 5
4189: PUSH
4190: LD_LOC 5
4194: PUSH
4195: LD_LOC 8
4199: MINUS
4200: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4201: LD_ADDR_LOC 6
4205: PUSH
4206: LD_LOC 5
4210: PUSH
4211: LD_INT 3
4213: PUSH
4214: LD_INT 2
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_VAR 0 2
4225: ARRAY
4226: DIV
4227: ST_TO_ADDR
// if ( nsci < 1 ) then
4228: LD_LOC 6
4232: PUSH
4233: LD_INT 1
4235: LESS
4236: IFFALSE 4246
// nsci := 1 ;
4238: LD_ADDR_LOC 6
4242: PUSH
4243: LD_INT 1
4245: ST_TO_ADDR
// neng := neng - nsci ;
4246: LD_ADDR_LOC 5
4250: PUSH
4251: LD_LOC 5
4255: PUSH
4256: LD_LOC 6
4260: MINUS
4261: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4262: LD_ADDR_LOC 7
4266: PUSH
4267: LD_LOC 5
4271: PUSH
4272: LD_INT 2
4274: DIV
4275: PUSH
4276: LD_INT 0
4278: PUSH
4279: EMPTY
4280: LIST
4281: LIST
4282: PUSH
4283: LD_VAR 0 2
4287: ARRAY
4288: ST_TO_ADDR
// neng := neng - nmech ;
4289: LD_ADDR_LOC 5
4293: PUSH
4294: LD_LOC 5
4298: PUSH
4299: LD_LOC 7
4303: MINUS
4304: ST_TO_ADDR
// if ( neng < 1 ) then
4305: LD_LOC 5
4309: PUSH
4310: LD_INT 1
4312: LESS
4313: IFFALSE 4323
// neng := 1 ;
4315: LD_ADDR_LOC 5
4319: PUSH
4320: LD_INT 1
4322: ST_TO_ADDR
// end ;
4323: LD_VAR 0 1
4327: RET
// starting begin disable ( 98 ) ;
4328: LD_INT 98
4330: DISABLE_MARKED
// disable ( 99 ) ;
4331: LD_INT 99
4333: DISABLE_MARKED
// disable ( 100 ) ;
4334: LD_INT 100
4336: DISABLE_MARKED
// disable ( 4 ) ;
4337: LD_INT 4
4339: DISABLE_MARKED
// disable ( 400 ) ;
4340: LD_INT 400
4342: DISABLE_MARKED
// disable ( 401 ) ;
4343: LD_INT 401
4345: DISABLE_MARKED
// mp_selectmsg := true ;
4346: LD_ADDR_OWVAR 13
4350: PUSH
4351: LD_INT 1
4353: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4354: CALL 68 0 0
// init_map ;
4358: CALL 1454 0 0
// set_shared_visions_and_alliances ;
4362: CALL 1983 0 0
// ResetFog ;
4366: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4370: LD_OWVAR 2
4374: PPUSH
4375: CALL_OW 520
// prepare_sides ;
4379: CALL 4029 0 0
// init_shipments_and_respawning ;
4383: CALL 4524 0 0
// Init_Win_Condition ;
4387: CALL 12021 0 0
// if game_type = 3 then
4391: LD_EXP 41
4395: PUSH
4396: LD_INT 3
4398: EQUAL
4399: IFFALSE 4409
// begin InitPoints ( ) ;
4401: CALL 11024 0 0
// init_kings_counting ;
4405: CALL 13384 0 0
// end ; InitApeman ;
4409: CALL 6654 0 0
// InitLimits ;
4413: CALL 9894 0 0
// ShowTimer ;
4417: CALL 10831 0 0
// music_nat := Side_Nations [ your_side ] ;
4421: LD_ADDR_OWVAR 71
4425: PUSH
4426: LD_EXP 22
4430: PUSH
4431: LD_OWVAR 2
4435: ARRAY
4436: ST_TO_ADDR
// if IAmSpec then
4437: CALL_OW 531
4441: IFFALSE 4477
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4443: LD_INT 0
4445: PPUSH
4446: LD_INT 0
4448: PPUSH
4449: LD_OWVAR 2
4453: PPUSH
4454: LD_INT 32767
4456: NEG
4457: PPUSH
4458: CALL_OW 330
// CenterNowOnXY ( 119 , 79 ) ;
4462: LD_INT 119
4464: PPUSH
4465: LD_INT 79
4467: PPUSH
4468: CALL_OW 86
// enable ( 400 ) ;
4472: LD_INT 400
4474: ENABLE_MARKED
// end else
4475: GO 4523
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4477: LD_EXP 26
4481: PUSH
4482: LD_EXP 21
4486: PUSH
4487: LD_OWVAR 2
4491: ARRAY
4492: ARRAY
4493: PUSH
4494: LD_INT 1
4496: ARRAY
4497: PPUSH
4498: LD_EXP 26
4502: PUSH
4503: LD_EXP 21
4507: PUSH
4508: LD_OWVAR 2
4512: ARRAY
4513: ARRAY
4514: PUSH
4515: LD_INT 2
4517: ARRAY
4518: PPUSH
4519: CALL_OW 86
// end ; end ; end_of_file
4523: END
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4524: LD_INT 0
4526: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4527: LD_ADDR_LOC 9
4531: PUSH
4532: LD_INT 0
4534: PPUSH
4535: LD_INT 3
4537: PPUSH
4538: CALL_OW 12
4542: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
4543: LD_ADDR_LOC 10
4547: PUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 8
4553: PPUSH
4554: CALL_OW 12
4558: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4559: LD_ADDR_LOC 11
4563: PUSH
4564: LD_INT 0
4566: PUSH
4567: LD_INT 0
4569: PUSH
4570: LD_INT 0
4572: PUSH
4573: LD_INT 0
4575: PUSH
4576: LD_INT 0
4578: PUSH
4579: LD_INT 0
4581: PUSH
4582: LD_INT 0
4584: PUSH
4585: LD_INT 0
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: ST_TO_ADDR
// end ;
4598: LD_VAR 0 1
4602: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
4603: GO 4605
4605: DISABLE
4606: LD_INT 0
4608: PPUSH
4609: PPUSH
4610: PPUSH
4611: PPUSH
// begin if respawning_time_max = 0 then
4612: LD_EXP 14
4616: PUSH
4617: LD_INT 0
4619: EQUAL
4620: IFFALSE 4624
// exit ;
4622: GO 5131
// if respawn = 8 then
4624: LD_LOC 10
4628: PUSH
4629: LD_INT 8
4631: EQUAL
4632: IFFALSE 4644
// respawn := 1 else
4634: LD_ADDR_LOC 10
4638: PUSH
4639: LD_INT 1
4641: ST_TO_ADDR
4642: GO 4658
// respawn := respawn + 1 ;
4644: LD_ADDR_LOC 10
4648: PUSH
4649: LD_LOC 10
4653: PUSH
4654: LD_INT 1
4656: PLUS
4657: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
4658: LD_EXP 21
4662: PUSH
4663: LD_LOC 10
4667: ARRAY
4668: PUSH
4669: LD_LOC 11
4673: PUSH
4674: LD_LOC 10
4678: ARRAY
4679: NOT
4680: AND
4681: IFFALSE 5130
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
4683: LD_ADDR_VAR 0 1
4687: PUSH
4688: LD_INT 21
4690: PUSH
4691: LD_INT 1
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PUSH
4698: LD_INT 22
4700: PUSH
4701: LD_LOC 10
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 3
4712: PUSH
4713: LD_INT 23
4715: PUSH
4716: LD_INT 0
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: PPUSH
4729: CALL_OW 69
4733: ST_TO_ADDR
// if n < number_of_people then
4734: LD_VAR 0 1
4738: PUSH
4739: LD_EXP 5
4743: LESS
4744: IFFALSE 5127
// begin aktresp := respawn ;
4746: LD_ADDR_VAR 0 3
4750: PUSH
4751: LD_LOC 10
4755: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
4756: LD_ADDR_LOC 11
4760: PUSH
4761: LD_LOC 11
4765: PPUSH
4766: LD_VAR 0 3
4770: PPUSH
4771: LD_INT 1
4773: PPUSH
4774: CALL_OW 1
4778: ST_TO_ADDR
// enable ;
4779: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
4780: LD_EXP 13
4784: PPUSH
4785: LD_EXP 14
4789: PPUSH
4790: CALL_OW 12
4794: PPUSH
4795: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
4799: LD_ADDR_LOC 11
4803: PUSH
4804: LD_LOC 11
4808: PPUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 0
4816: PPUSH
4817: CALL_OW 1
4821: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: LD_INT 21
4829: PUSH
4830: LD_INT 3
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 2
4839: PUSH
4840: LD_INT 30
4842: PUSH
4843: LD_INT 0
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 30
4852: PUSH
4853: LD_INT 1
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 50
4867: PUSH
4868: EMPTY
4869: LIST
4870: PUSH
4871: LD_INT 22
4873: PUSH
4874: LD_VAR 0 3
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: PPUSH
4889: CALL_OW 69
4893: ST_TO_ADDR
// if building_list = 0 then
4894: LD_VAR 0 2
4898: PUSH
4899: LD_INT 0
4901: EQUAL
4902: IFFALSE 4947
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4904: LD_ADDR_VAR 0 2
4908: PUSH
4909: LD_INT 21
4911: PUSH
4912: LD_INT 3
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: LD_INT 50
4921: PUSH
4922: EMPTY
4923: LIST
4924: PUSH
4925: LD_INT 22
4927: PUSH
4928: LD_VAR 0 3
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: PPUSH
4942: CALL_OW 69
4946: ST_TO_ADDR
// if building_list = 0 then
4947: LD_VAR 0 2
4951: PUSH
4952: LD_INT 0
4954: EQUAL
4955: IFFALSE 4959
// exit ;
4957: GO 5131
// hc_name :=  ;
4959: LD_ADDR_OWVAR 26
4963: PUSH
4964: LD_STRING 
4966: ST_TO_ADDR
// hc_importance := 0 ;
4967: LD_ADDR_OWVAR 32
4971: PUSH
4972: LD_INT 0
4974: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
4975: LD_INT 0
4977: PPUSH
4978: LD_INT 0
4980: PPUSH
4981: LD_EXP 7
4985: PUSH
4986: LD_INT 2
4988: DIV
4989: PPUSH
4990: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
4994: LD_ADDR_OWVAR 21
4998: PUSH
4999: LD_EXP 22
5003: PUSH
5004: LD_VAR 0 3
5008: ARRAY
5009: ST_TO_ADDR
// uc_side := aktresp ;
5010: LD_ADDR_OWVAR 20
5014: PUSH
5015: LD_VAR 0 3
5019: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5020: LD_ADDR_VAR 0 4
5024: PUSH
5025: LD_VAR 0 2
5029: PUSH
5030: LD_INT 1
5032: PPUSH
5033: LD_VAR 0 2
5037: PUSH
5038: LD_INT 0
5040: PLUS
5041: PPUSH
5042: CALL_OW 12
5046: ARRAY
5047: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5048: LD_VAR 0 4
5052: PPUSH
5053: CALL_OW 266
5057: PUSH
5058: LD_INT 0
5060: PUSH
5061: LD_INT 1
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: IN
5068: IFFALSE 5080
// n = 25 else
5070: LD_ADDR_VAR 0 1
5074: PUSH
5075: LD_INT 25
5077: ST_TO_ADDR
5078: GO 5088
// n = 10 ;
5080: LD_ADDR_VAR 0 1
5084: PUSH
5085: LD_INT 10
5087: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5088: CALL_OW 44
5092: PPUSH
5093: LD_VAR 0 4
5097: PPUSH
5098: CALL_OW 250
5102: PPUSH
5103: LD_VAR 0 4
5107: PPUSH
5108: CALL_OW 251
5112: PPUSH
5113: LD_VAR 0 1
5117: PPUSH
5118: LD_INT 1
5120: PPUSH
5121: CALL_OW 50
// end else
5125: GO 5128
// enable ;
5127: ENABLE
// end else
5128: GO 5131
// enable ;
5130: ENABLE
// end ;
5131: PPOPN 4
5133: END
// every 0 0$5 + 0 0$1.1 do var d ;
5134: GO 5136
5136: DISABLE
5137: LD_INT 0
5139: PPUSH
// begin case tick of 1 .. 1 1$0 :
5140: LD_OWVAR 1
5144: PUSH
5145: LD_INT 1
5147: DOUBLE
5148: GREATEREQUAL
5149: IFFALSE 5157
5151: LD_INT 2100
5153: DOUBLE
5154: LESSEQUAL
5155: IFTRUE 5159
5157: GO 5170
5159: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5160: LD_ADDR_VAR 0 1
5164: PUSH
5165: LD_INT 150
5167: ST_TO_ADDR
5168: GO 5353
5170: LD_INT 2100
5172: PUSH
5173: LD_INT 1
5175: PLUS
5176: DOUBLE
5177: GREATEREQUAL
5178: IFFALSE 5186
5180: LD_INT 10500
5182: DOUBLE
5183: LESSEQUAL
5184: IFTRUE 5188
5186: GO 5199
5188: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5189: LD_ADDR_VAR 0 1
5193: PUSH
5194: LD_INT 100
5196: ST_TO_ADDR
5197: GO 5353
5199: LD_INT 10500
5201: PUSH
5202: LD_INT 1
5204: PLUS
5205: DOUBLE
5206: GREATEREQUAL
5207: IFFALSE 5215
5209: LD_INT 21000
5211: DOUBLE
5212: LESSEQUAL
5213: IFTRUE 5217
5215: GO 5228
5217: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: LD_INT 90
5225: ST_TO_ADDR
5226: GO 5353
5228: LD_INT 21000
5230: PUSH
5231: LD_INT 1
5233: PLUS
5234: DOUBLE
5235: GREATEREQUAL
5236: IFFALSE 5244
5238: LD_INT 42000
5240: DOUBLE
5241: LESSEQUAL
5242: IFTRUE 5246
5244: GO 5257
5246: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5247: LD_ADDR_VAR 0 1
5251: PUSH
5252: LD_INT 70
5254: ST_TO_ADDR
5255: GO 5353
5257: LD_INT 42000
5259: PUSH
5260: LD_INT 1
5262: PLUS
5263: DOUBLE
5264: GREATEREQUAL
5265: IFFALSE 5273
5267: LD_INT 63000
5269: DOUBLE
5270: LESSEQUAL
5271: IFTRUE 5275
5273: GO 5286
5275: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5276: LD_ADDR_VAR 0 1
5280: PUSH
5281: LD_INT 60
5283: ST_TO_ADDR
5284: GO 5353
5286: LD_INT 63000
5288: PUSH
5289: LD_INT 1
5291: PLUS
5292: DOUBLE
5293: GREATEREQUAL
5294: IFFALSE 5302
5296: LD_INT 105000
5298: DOUBLE
5299: LESSEQUAL
5300: IFTRUE 5304
5302: GO 5315
5304: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5305: LD_ADDR_VAR 0 1
5309: PUSH
5310: LD_INT 35
5312: ST_TO_ADDR
5313: GO 5353
5315: LD_INT 105000
5317: PUSH
5318: LD_INT 1
5320: PLUS
5321: DOUBLE
5322: GREATEREQUAL
5323: IFFALSE 5331
5325: LD_INT 630000
5327: DOUBLE
5328: LESSEQUAL
5329: IFTRUE 5333
5331: GO 5344
5333: POP
// d := 20 ; else
5334: LD_ADDR_VAR 0 1
5338: PUSH
5339: LD_INT 20
5341: ST_TO_ADDR
5342: GO 5353
5344: POP
// d := 0 ; end ;
5345: LD_ADDR_VAR 0 1
5349: PUSH
5350: LD_INT 0
5352: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5353: LD_INT 1
5355: PPUSH
5356: LD_INT 10000
5358: PPUSH
5359: CALL_OW 12
5363: PUSH
5364: LD_VAR 0 1
5368: PUSH
5369: LD_EXP 10
5373: MUL
5374: LESSEQUAL
5375: IFFALSE 5429
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5377: LD_INT 1
5379: PPUSH
5380: LD_INT 140
5382: PPUSH
5383: CALL_OW 12
5387: PPUSH
5388: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5392: LD_ADDR_LOC 9
5396: PUSH
5397: LD_LOC 9
5401: PUSH
5402: LD_INT 1
5404: PLUS
5405: PUSH
5406: LD_INT 4
5408: MOD
5409: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLH + shipment , true ) ;
5410: LD_INT 5
5412: PPUSH
5413: LD_INT 3
5415: PUSH
5416: LD_LOC 9
5420: PLUS
5421: PPUSH
5422: LD_INT 1
5424: PPUSH
5425: CALL_OW 55
// end ; enable ;
5429: ENABLE
// end ;
5430: PPOPN 1
5432: END
// every 0 0$7 + 0 0$1.7 do var d ;
5433: GO 5435
5435: DISABLE
5436: LD_INT 0
5438: PPUSH
// begin case tick of 1 .. 1 1$0 :
5439: LD_OWVAR 1
5443: PUSH
5444: LD_INT 1
5446: DOUBLE
5447: GREATEREQUAL
5448: IFFALSE 5456
5450: LD_INT 2100
5452: DOUBLE
5453: LESSEQUAL
5454: IFTRUE 5458
5456: GO 5469
5458: POP
// d := 20 ; 1 1$0 + 1 .. 5 5$0 :
5459: LD_ADDR_VAR 0 1
5463: PUSH
5464: LD_INT 20
5466: ST_TO_ADDR
5467: GO 5652
5469: LD_INT 2100
5471: PUSH
5472: LD_INT 1
5474: PLUS
5475: DOUBLE
5476: GREATEREQUAL
5477: IFFALSE 5485
5479: LD_INT 10500
5481: DOUBLE
5482: LESSEQUAL
5483: IFTRUE 5487
5485: GO 5498
5487: POP
// d := 50 ; 5 5$0 + 1 .. 10 10$0 :
5488: LD_ADDR_VAR 0 1
5492: PUSH
5493: LD_INT 50
5495: ST_TO_ADDR
5496: GO 5652
5498: LD_INT 10500
5500: PUSH
5501: LD_INT 1
5503: PLUS
5504: DOUBLE
5505: GREATEREQUAL
5506: IFFALSE 5514
5508: LD_INT 21000
5510: DOUBLE
5511: LESSEQUAL
5512: IFTRUE 5516
5514: GO 5527
5516: POP
// d := 150 ; 10 10$0 + 1 .. 20 20$0 :
5517: LD_ADDR_VAR 0 1
5521: PUSH
5522: LD_INT 150
5524: ST_TO_ADDR
5525: GO 5652
5527: LD_INT 21000
5529: PUSH
5530: LD_INT 1
5532: PLUS
5533: DOUBLE
5534: GREATEREQUAL
5535: IFFALSE 5543
5537: LD_INT 42000
5539: DOUBLE
5540: LESSEQUAL
5541: IFTRUE 5545
5543: GO 5556
5545: POP
// d := 100 ; 20 20$0 + 1 .. 30 30$0 :
5546: LD_ADDR_VAR 0 1
5550: PUSH
5551: LD_INT 100
5553: ST_TO_ADDR
5554: GO 5652
5556: LD_INT 42000
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: DOUBLE
5563: GREATEREQUAL
5564: IFFALSE 5572
5566: LD_INT 63000
5568: DOUBLE
5569: LESSEQUAL
5570: IFTRUE 5574
5572: GO 5585
5574: POP
// d := 90 ; 30 30$0 + 1 .. 50 50$0 :
5575: LD_ADDR_VAR 0 1
5579: PUSH
5580: LD_INT 90
5582: ST_TO_ADDR
5583: GO 5652
5585: LD_INT 63000
5587: PUSH
5588: LD_INT 1
5590: PLUS
5591: DOUBLE
5592: GREATEREQUAL
5593: IFFALSE 5601
5595: LD_INT 105000
5597: DOUBLE
5598: LESSEQUAL
5599: IFTRUE 5603
5601: GO 5614
5603: POP
// d := 70 ; 50 50$0 + 1 .. 300 300$0 :
5604: LD_ADDR_VAR 0 1
5608: PUSH
5609: LD_INT 70
5611: ST_TO_ADDR
5612: GO 5652
5614: LD_INT 105000
5616: PUSH
5617: LD_INT 1
5619: PLUS
5620: DOUBLE
5621: GREATEREQUAL
5622: IFFALSE 5630
5624: LD_INT 630000
5626: DOUBLE
5627: LESSEQUAL
5628: IFTRUE 5632
5630: GO 5643
5632: POP
// d := 60 ; else
5633: LD_ADDR_VAR 0 1
5637: PUSH
5638: LD_INT 60
5640: ST_TO_ADDR
5641: GO 5652
5643: POP
// d := 35 ; end ;
5644: LD_ADDR_VAR 0 1
5648: PUSH
5649: LD_INT 35
5651: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5652: LD_INT 1
5654: PPUSH
5655: LD_INT 10000
5657: PPUSH
5658: CALL_OW 12
5662: PUSH
5663: LD_VAR 0 1
5667: PUSH
5668: LD_EXP 10
5672: MUL
5673: LESSEQUAL
5674: IFFALSE 5728
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5676: LD_INT 1
5678: PPUSH
5679: LD_INT 140
5681: PPUSH
5682: CALL_OW 12
5686: PPUSH
5687: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5691: LD_ADDR_LOC 9
5695: PUSH
5696: LD_LOC 9
5700: PUSH
5701: LD_INT 1
5703: PLUS
5704: PUSH
5705: LD_INT 4
5707: MOD
5708: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLHOut + shipment , true ) ;
5709: LD_INT 5
5711: PPUSH
5712: LD_INT 20
5714: PUSH
5715: LD_LOC 9
5719: PLUS
5720: PPUSH
5721: LD_INT 1
5723: PPUSH
5724: CALL_OW 55
// end ; enable ;
5728: ENABLE
// end ;
5729: PPOPN 1
5731: END
// every 1 1$0 trigger def_shipments_density do
5732: LD_EXP 47
5736: IFFALSE 5772
5738: GO 5740
5740: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5741: LD_INT 5
5743: PPUSH
5744: LD_INT 15
5746: PPUSH
5747: LD_INT 1
5749: PPUSH
5750: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5754: LD_INT 6300
5756: PUSH
5757: LD_INT 2100
5759: PUSH
5760: LD_EXP 47
5764: MUL
5765: MINUS
5766: PPUSH
5767: CALL_OW 67
// enable ;
5771: ENABLE
// end ; end_of_file
5772: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5773: LD_VAR 0 1
5777: PPUSH
5778: CALL_OW 266
5782: PUSH
5783: LD_INT 0
5785: PUSH
5786: LD_INT 1
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: IN
5793: IFFALSE 5818
// SetBName ( b , @ & GetSide ( b ) ) ;
5795: LD_VAR 0 1
5799: PPUSH
5800: LD_STRING @
5802: PUSH
5803: LD_VAR 0 1
5807: PPUSH
5808: CALL_OW 255
5812: STR
5813: PPUSH
5814: CALL_OW 500
// if def_game_rules then
5818: LD_EXP 42
5822: IFFALSE 5859
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
5824: LD_VAR 0 1
5828: PPUSH
5829: LD_VAR 0 1
5833: PPUSH
5834: CALL_OW 266
5838: PPUSH
5839: LD_VAR 0 1
5843: PPUSH
5844: CALL_OW 255
5848: PPUSH
5849: LD_INT 0
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL 10295 0 5
// end ;
5859: PPOPN 2
5861: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5862: LD_VAR 0 1
5866: PPUSH
5867: CALL_OW 266
5871: PUSH
5872: LD_INT 0
5874: PUSH
5875: LD_INT 1
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: IN
5882: IFFALSE 5907
// SetBName ( b , @ & GetSide ( b ) ) ;
5884: LD_VAR 0 1
5888: PPUSH
5889: LD_STRING @
5891: PUSH
5892: LD_VAR 0 1
5896: PPUSH
5897: CALL_OW 255
5901: STR
5902: PPUSH
5903: CALL_OW 500
// if def_game_rules then
5907: LD_EXP 42
5911: IFFALSE 5950
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
5913: LD_VAR 0 1
5917: PPUSH
5918: LD_VAR 0 1
5922: PPUSH
5923: CALL_OW 266
5927: PPUSH
5928: LD_VAR 0 1
5932: PPUSH
5933: CALL_OW 255
5937: PPUSH
5938: LD_VAR 0 2
5942: PPUSH
5943: LD_INT 1
5945: PPUSH
5946: CALL 10295 0 5
// end ;
5950: PPOPN 3
5952: END
// on VehicleConstructed ( veh , fac ) do var side ;
5953: LD_INT 0
5955: PPUSH
// begin if GetControl ( veh ) = control_apeman then
5956: LD_VAR 0 1
5960: PPUSH
5961: CALL_OW 263
5965: PUSH
5966: LD_INT 5
5968: EQUAL
5969: IFFALSE 6111
// begin side := GetSide ( veh ) ;
5971: LD_ADDR_VAR 0 3
5975: PUSH
5976: LD_VAR 0 1
5980: PPUSH
5981: CALL_OW 255
5985: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
5986: LD_ADDR_EXP 37
5990: PUSH
5991: LD_EXP 37
5995: PPUSH
5996: LD_VAR 0 3
6000: PPUSH
6001: LD_EXP 37
6005: PUSH
6006: LD_VAR 0 3
6010: ARRAY
6011: PPUSH
6012: LD_INT 52
6014: PUSH
6015: EMPTY
6016: LIST
6017: PPUSH
6018: CALL_OW 72
6022: PUSH
6023: LD_INT 22
6025: PUSH
6026: LD_VAR 0 3
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 2
6037: PUSH
6038: LD_INT 33
6040: PUSH
6041: LD_INT 5
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PUSH
6048: LD_INT 25
6050: PUSH
6051: LD_INT 12
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PUSH
6058: LD_INT 25
6060: PUSH
6061: LD_INT 15
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 25
6070: PUSH
6071: LD_INT 16
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 25
6080: PUSH
6081: LD_INT 17
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PPUSH
6100: CALL_OW 69
6104: UNION
6105: PPUSH
6106: CALL_OW 1
6110: ST_TO_ADDR
// end ; end ;
6111: PPOPN 3
6113: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6114: LD_INT 0
6116: PPUSH
6117: PPUSH
6118: PPUSH
6119: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6120: LD_VAR 0 1
6124: PPUSH
6125: CALL_OW 257
6129: PUSH
6130: LD_INT 12
6132: PUSH
6133: LD_INT 15
6135: PUSH
6136: LD_INT 17
6138: PUSH
6139: LD_INT 16
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: IN
6148: PUSH
6149: LD_VAR 0 1
6153: PPUSH
6154: CALL_OW 263
6158: PUSH
6159: LD_INT 5
6161: EQUAL
6162: OR
6163: IFFALSE 6174
// ApeKilled ( j ) ;
6165: LD_VAR 0 1
6169: PPUSH
6170: CALL 7335 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6174: LD_VAR 0 1
6178: PPUSH
6179: CALL_OW 266
6183: PUSH
6184: LD_INT 0
6186: PUSH
6187: LD_INT 1
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: IN
6194: IFFALSE 6276
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6196: LD_ADDR_VAR 0 4
6200: PUSH
6201: LD_EXP 21
6205: PUSH
6206: LD_VAR 0 1
6210: PPUSH
6211: CALL_OW 255
6215: ARRAY
6216: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6217: LD_ADDR_VAR 0 2
6221: PUSH
6222: LD_EXP 26
6226: PUSH
6227: LD_VAR 0 4
6231: ARRAY
6232: PUSH
6233: LD_INT 1
6235: ARRAY
6236: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6237: LD_ADDR_VAR 0 3
6241: PUSH
6242: LD_EXP 26
6246: PUSH
6247: LD_VAR 0 4
6251: ARRAY
6252: PUSH
6253: LD_INT 2
6255: ARRAY
6256: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6257: LD_VAR 0 2
6261: PPUSH
6262: LD_VAR 0 3
6266: PPUSH
6267: CALL_OW 420
6271: PPUSH
6272: CALL_OW 419
// end ; if def_game_rules then
6276: LD_EXP 42
6280: IFFALSE 6379
// if ( GetType ( j ) = 3 ) then
6282: LD_VAR 0 1
6286: PPUSH
6287: CALL_OW 247
6291: PUSH
6292: LD_INT 3
6294: EQUAL
6295: IFFALSE 6335
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6297: LD_VAR 0 1
6301: PPUSH
6302: LD_VAR 0 1
6306: PPUSH
6307: CALL_OW 266
6311: PPUSH
6312: LD_VAR 0 1
6316: PPUSH
6317: CALL_OW 255
6321: PPUSH
6322: LD_INT 0
6324: PPUSH
6325: LD_INT 1
6327: NEG
6328: PPUSH
6329: CALL 10295 0 5
6333: GO 6379
// if ( GetChassis ( j ) = 25 ) then
6335: LD_VAR 0 1
6339: PPUSH
6340: CALL_OW 265
6344: PUSH
6345: LD_INT 25
6347: EQUAL
6348: IFFALSE 6379
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6350: LD_VAR 0 1
6354: PPUSH
6355: LD_INT 37
6357: PPUSH
6358: LD_VAR 0 1
6362: PPUSH
6363: CALL_OW 255
6367: PPUSH
6368: LD_INT 0
6370: PPUSH
6371: LD_INT 1
6373: NEG
6374: PPUSH
6375: CALL 10295 0 5
// end ;
6379: PPOPN 5
6381: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6382: LD_EXP 42
6386: PUSH
6387: LD_VAR 0 1
6391: PPUSH
6392: CALL_OW 265
6396: PUSH
6397: LD_INT 25
6399: EQUAL
6400: AND
6401: IFFALSE 6433
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6403: LD_VAR 0 1
6407: PPUSH
6408: LD_INT 37
6410: PPUSH
6411: LD_VAR 0 1
6415: PPUSH
6416: CALL_OW 255
6420: PPUSH
6421: LD_VAR 0 3
6425: PPUSH
6426: LD_INT 1
6428: PPUSH
6429: CALL 10295 0 5
// end ;
6433: PPOPN 4
6435: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6436: LD_VAR 0 1
6440: PPUSH
6441: LD_VAR 0 2
6445: PPUSH
6446: LD_VAR 0 3
6450: PPUSH
6451: LD_OWVAR 2
6455: PPUSH
6456: CALL 11782 0 4
6460: PPOPN 3
6462: END
// every 20 20$00 trigger apemanNumber do
6463: LD_EXP 34
6467: IFFALSE 6500
6469: GO 6471
6471: DISABLE
// begin enable ;
6472: ENABLE
// if apeLevel >= 8 then
6473: LD_EXP 39
6477: PUSH
6478: LD_INT 8
6480: GREATEREQUAL
6481: IFFALSE 6486
// disable else
6483: DISABLE
6484: GO 6500
// apeLevel := apeLevel + 1 ;
6486: LD_ADDR_EXP 39
6490: PUSH
6491: LD_EXP 39
6495: PUSH
6496: LD_INT 1
6498: PLUS
6499: ST_TO_ADDR
// end ;
6500: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6501: LD_EXP 34
6505: PUSH
6506: LD_EXP 35
6510: LESS
6511: IFFALSE 6651
6513: GO 6515
6515: DISABLE
6516: LD_INT 0
6518: PPUSH
6519: PPUSH
6520: PPUSH
6521: PPUSH
// begin enable ;
6522: ENABLE
// for i := 1 to apemanPos do
6523: LD_ADDR_VAR 0 1
6527: PUSH
6528: DOUBLE
6529: LD_INT 1
6531: DEC
6532: ST_TO_ADDR
6533: LD_EXP 37
6537: PUSH
6538: FOR_TO
6539: IFFALSE 6649
// begin if apemanPlayerCount [ i ] then
6541: LD_EXP 38
6545: PUSH
6546: LD_VAR 0 1
6550: ARRAY
6551: IFFALSE 6647
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6553: LD_EXP 38
6557: PUSH
6558: LD_VAR 0 1
6562: ARRAY
6563: PUSH
6564: LD_EXP 37
6568: PUSH
6569: LD_VAR 0 1
6573: ARRAY
6574: GREATER
6575: IFFALSE 6647
// begin ape := PrepareApeman ;
6577: LD_ADDR_VAR 0 2
6581: PUSH
6582: CALL 7154 0 0
6586: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6587: LD_VAR 0 2
6591: PPUSH
6592: LD_EXP 40
6596: PUSH
6597: LD_VAR 0 1
6601: ARRAY
6602: PPUSH
6603: LD_INT 0
6605: PPUSH
6606: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6610: LD_ADDR_EXP 37
6614: PUSH
6615: LD_EXP 37
6619: PPUSH
6620: LD_VAR 0 1
6624: PPUSH
6625: LD_EXP 37
6629: PUSH
6630: LD_VAR 0 1
6634: ARRAY
6635: PUSH
6636: LD_VAR 0 2
6640: UNION
6641: PPUSH
6642: CALL_OW 1
6646: ST_TO_ADDR
// end ; end ; end ;
6647: GO 6538
6649: POP
6650: POP
// end ;
6651: PPOPN 4
6653: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6654: LD_INT 0
6656: PPUSH
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
// playersAmount := 0 ;
6663: LD_ADDR_VAR 0 3
6667: PUSH
6668: LD_INT 0
6670: ST_TO_ADDR
// _apeAreas := [ OpiceSZ , OpiceSV , OpiceJZ , OpiceJV ] ;
6671: LD_ADDR_VAR 0 7
6675: PUSH
6676: LD_INT 11
6678: PUSH
6679: LD_INT 12
6681: PUSH
6682: LD_INT 14
6684: PUSH
6685: LD_INT 13
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6694: LD_ADDR_EXP 40
6698: PUSH
6699: LD_INT 0
6701: PUSH
6702: LD_INT 0
6704: PUSH
6705: LD_INT 0
6707: PUSH
6708: LD_INT 0
6710: PUSH
6711: LD_INT 0
6713: PUSH
6714: LD_INT 0
6716: PUSH
6717: LD_INT 0
6719: PUSH
6720: LD_INT 0
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: ST_TO_ADDR
// for j = 1 to Side_Positions do
6733: LD_ADDR_VAR 0 4
6737: PUSH
6738: DOUBLE
6739: LD_INT 1
6741: DEC
6742: ST_TO_ADDR
6743: LD_EXP 21
6747: PUSH
6748: FOR_TO
6749: IFFALSE 6816
// if Side_Positions [ j ] then
6751: LD_EXP 21
6755: PUSH
6756: LD_VAR 0 4
6760: ARRAY
6761: IFFALSE 6814
// begin playersAmount := playersAmount + 1 ;
6763: LD_ADDR_VAR 0 3
6767: PUSH
6768: LD_VAR 0 3
6772: PUSH
6773: LD_INT 1
6775: PLUS
6776: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6777: LD_ADDR_EXP 40
6781: PUSH
6782: LD_EXP 40
6786: PPUSH
6787: LD_VAR 0 4
6791: PPUSH
6792: LD_VAR 0 7
6796: PUSH
6797: LD_EXP 21
6801: PUSH
6802: LD_VAR 0 4
6806: ARRAY
6807: ARRAY
6808: PPUSH
6809: CALL_OW 1
6813: ST_TO_ADDR
// end ;
6814: GO 6748
6816: POP
6817: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6818: LD_ADDR_EXP 36
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: LD_EXP 6
6830: MUL
6831: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6832: LD_ADDR_EXP 34
6836: PUSH
6837: LD_VAR 0 3
6841: PUSH
6842: LD_EXP 36
6846: MUL
6847: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6848: LD_ADDR_EXP 35
6852: PUSH
6853: LD_EXP 34
6857: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6858: LD_ADDR_EXP 37
6862: PUSH
6863: LD_INT 0
6865: PUSH
6866: LD_INT 0
6868: PUSH
6869: LD_INT 0
6871: PUSH
6872: LD_INT 0
6874: PUSH
6875: LD_INT 0
6877: PUSH
6878: LD_INT 0
6880: PUSH
6881: LD_INT 0
6883: PUSH
6884: LD_INT 0
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6897: LD_ADDR_EXP 38
6901: PUSH
6902: LD_INT 0
6904: PUSH
6905: LD_INT 0
6907: PUSH
6908: LD_INT 0
6910: PUSH
6911: LD_INT 0
6913: PUSH
6914: LD_INT 0
6916: PUSH
6917: LD_INT 0
6919: PUSH
6920: LD_INT 0
6922: PUSH
6923: LD_INT 0
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: ST_TO_ADDR
// apeLevel := 1 ;
6936: LD_ADDR_EXP 39
6940: PUSH
6941: LD_INT 1
6943: ST_TO_ADDR
// if not apemanNumber then
6944: LD_EXP 34
6948: NOT
6949: IFFALSE 6953
// exit ;
6951: GO 7149
// for i := 1 to apemanPerPlayer do
6953: LD_ADDR_VAR 0 2
6957: PUSH
6958: DOUBLE
6959: LD_INT 1
6961: DEC
6962: ST_TO_ADDR
6963: LD_EXP 36
6967: PUSH
6968: FOR_TO
6969: IFFALSE 7147
// begin for j := 1 to Side_Positions do
6971: LD_ADDR_VAR 0 4
6975: PUSH
6976: DOUBLE
6977: LD_INT 1
6979: DEC
6980: ST_TO_ADDR
6981: LD_EXP 21
6985: PUSH
6986: FOR_TO
6987: IFFALSE 7143
// if Side_Positions [ j ] then
6989: LD_EXP 21
6993: PUSH
6994: LD_VAR 0 4
6998: ARRAY
6999: IFFALSE 7141
// begin pos := Side_Positions [ j ] ;
7001: LD_ADDR_VAR 0 6
7005: PUSH
7006: LD_EXP 21
7010: PUSH
7011: LD_VAR 0 4
7015: ARRAY
7016: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7017: LD_ADDR_EXP 38
7021: PUSH
7022: LD_EXP 38
7026: PPUSH
7027: LD_VAR 0 4
7031: PPUSH
7032: LD_EXP 38
7036: PUSH
7037: LD_VAR 0 4
7041: ARRAY
7042: PUSH
7043: LD_INT 1
7045: PLUS
7046: PPUSH
7047: CALL_OW 1
7051: ST_TO_ADDR
// ape := PrepareApeman ;
7052: LD_ADDR_VAR 0 5
7056: PUSH
7057: CALL 7154 0 0
7061: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7062: LD_ADDR_EXP 37
7066: PUSH
7067: LD_EXP 37
7071: PPUSH
7072: LD_VAR 0 4
7076: PPUSH
7077: LD_EXP 37
7081: PUSH
7082: LD_VAR 0 4
7086: ARRAY
7087: PPUSH
7088: LD_EXP 37
7092: PUSH
7093: LD_VAR 0 4
7097: ARRAY
7098: PUSH
7099: LD_INT 1
7101: PLUS
7102: PPUSH
7103: LD_VAR 0 5
7107: PPUSH
7108: CALL_OW 1
7112: PPUSH
7113: CALL_OW 1
7117: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7118: LD_VAR 0 5
7122: PPUSH
7123: LD_EXP 40
7127: PUSH
7128: LD_VAR 0 4
7132: ARRAY
7133: PPUSH
7134: LD_INT 0
7136: PPUSH
7137: CALL_OW 49
// end ;
7141: GO 6986
7143: POP
7144: POP
// end ;
7145: GO 6968
7147: POP
7148: POP
// end ;
7149: LD_VAR 0 1
7153: RET
// export function PrepareApeman ; var bonus ; begin
7154: LD_INT 0
7156: PPUSH
7157: PPUSH
// uc_side := 0 ;
7158: LD_ADDR_OWVAR 20
7162: PUSH
7163: LD_INT 0
7165: ST_TO_ADDR
// uc_nation := 0 ;
7166: LD_ADDR_OWVAR 21
7170: PUSH
7171: LD_INT 0
7173: ST_TO_ADDR
// InitHc ;
7174: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 1
7185: NEG
7186: PUSH
7187: LD_INT 0
7189: PUSH
7190: LD_INT 1
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: LIST
7197: PUSH
7198: LD_OWVAR 1
7202: PUSH
7203: LD_INT 3
7205: MOD
7206: PUSH
7207: LD_INT 1
7209: PLUS
7210: ARRAY
7211: ST_TO_ADDR
// hc_class := class_apeman ;
7212: LD_ADDR_OWVAR 28
7216: PUSH
7217: LD_INT 12
7219: ST_TO_ADDR
// hc_gallery :=  ;
7220: LD_ADDR_OWVAR 33
7224: PUSH
7225: LD_STRING 
7227: ST_TO_ADDR
// hc_name :=  ;
7228: LD_ADDR_OWVAR 26
7232: PUSH
7233: LD_STRING 
7235: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7236: LD_ADDR_OWVAR 31
7240: PUSH
7241: LD_EXP 39
7245: PUSH
7246: LD_VAR 0 2
7250: PLUS
7251: PUSH
7252: LD_EXP 39
7256: PUSH
7257: LD_VAR 0 2
7261: PLUS
7262: PUSH
7263: LD_EXP 39
7267: PUSH
7268: LD_VAR 0 2
7272: PLUS
7273: PUSH
7274: LD_EXP 39
7278: PUSH
7279: LD_VAR 0 2
7283: PLUS
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7291: LD_ADDR_OWVAR 35
7295: PUSH
7296: LD_INT 10
7298: PUSH
7299: LD_VAR 0 2
7303: MUL
7304: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7305: LD_ADDR_OWVAR 29
7309: PUSH
7310: LD_INT 12
7312: PUSH
7313: LD_INT 10
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: ST_TO_ADDR
// result := CreateHuman ;
7320: LD_ADDR_VAR 0 1
7324: PUSH
7325: CALL_OW 44
7329: ST_TO_ADDR
// end ;
7330: LD_VAR 0 1
7334: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7335: LD_INT 0
7337: PPUSH
7338: PPUSH
7339: PPUSH
// if not ape then
7340: LD_VAR 0 1
7344: NOT
7345: IFFALSE 7349
// exit ;
7347: GO 7474
// side := GetSide ( ape ) ;
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_VAR 0 1
7358: PPUSH
7359: CALL_OW 255
7363: ST_TO_ADDR
// if not side then
7364: LD_VAR 0 3
7368: NOT
7369: IFFALSE 7423
// begin for i = 1 to apemanPos do
7371: LD_ADDR_VAR 0 4
7375: PUSH
7376: DOUBLE
7377: LD_INT 1
7379: DEC
7380: ST_TO_ADDR
7381: LD_EXP 37
7385: PUSH
7386: FOR_TO
7387: IFFALSE 7421
// if ape in apemanPos [ i ] then
7389: LD_VAR 0 1
7393: PUSH
7394: LD_EXP 37
7398: PUSH
7399: LD_VAR 0 4
7403: ARRAY
7404: IN
7405: IFFALSE 7419
// begin side := i ;
7407: LD_ADDR_VAR 0 3
7411: PUSH
7412: LD_VAR 0 4
7416: ST_TO_ADDR
// break ;
7417: GO 7421
// end ;
7419: GO 7386
7421: POP
7422: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7423: LD_ADDR_EXP 37
7427: PUSH
7428: LD_EXP 37
7432: PPUSH
7433: LD_VAR 0 3
7437: PPUSH
7438: LD_EXP 37
7442: PUSH
7443: LD_VAR 0 3
7447: ARRAY
7448: PUSH
7449: LD_VAR 0 1
7453: DIFF
7454: PPUSH
7455: CALL_OW 1
7459: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7460: LD_ADDR_EXP 34
7464: PUSH
7465: LD_EXP 34
7469: PUSH
7470: LD_INT 1
7472: MINUS
7473: ST_TO_ADDR
// end ; end_of_file
7474: LD_VAR 0 2
7478: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7479: LD_INT 0
7481: PPUSH
7482: PPUSH
// for un in battle_flags_id do
7483: LD_ADDR_VAR 0 2
7487: PUSH
7488: LD_EXP 28
7492: PUSH
7493: FOR_IN
7494: IFFALSE 7569
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7496: LD_VAR 0 2
7500: PPUSH
7501: LD_INT 1
7503: PUSH
7504: LD_LOC 12
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: LD_LOC 12
7520: PUSH
7521: LD_INT 2
7523: DIV
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 3
7531: PUSH
7532: LD_LOC 12
7536: PUSH
7537: LD_INT 5
7539: DIV
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: PUSH
7545: LD_INT 20
7547: PUSH
7548: LD_LOC 12
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: PPUSH
7563: CALL_OW 423
7567: GO 7493
7569: POP
7570: POP
// end ;
7571: LD_VAR 0 1
7575: RET
// every 0 0$0.1 do var un ;
7576: GO 7578
7578: DISABLE
7579: LD_INT 0
7581: PPUSH
// begin if not def_morale_flags then
7582: LD_EXP 51
7586: NOT
7587: IFFALSE 7591
// exit ;
7589: GO 7668
// if not morale_decreasing_time then
7591: LD_EXP 11
7595: NOT
7596: IFFALSE 7600
// exit ;
7598: GO 7668
// strength = 100 ;
7600: LD_ADDR_LOC 12
7604: PUSH
7605: LD_INT 100
7607: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7608: LD_EXP 11
7612: PPUSH
7613: CALL_OW 67
// strength := strength - 1 ;
7617: LD_ADDR_LOC 12
7621: PUSH
7622: LD_LOC 12
7626: PUSH
7627: LD_INT 1
7629: MINUS
7630: ST_TO_ADDR
// Update_Flags ;
7631: CALL 7479 0 0
// until not strength ;
7635: LD_LOC 12
7639: NOT
7640: IFFALSE 7608
// for un in battle_flags_id do
7642: LD_ADDR_VAR 0 1
7646: PUSH
7647: LD_EXP 28
7651: PUSH
7652: FOR_IN
7653: IFFALSE 7666
// KillBattleFlag ( un ) ;
7655: LD_VAR 0 1
7659: PPUSH
7660: CALL_OW 419
7664: GO 7652
7666: POP
7667: POP
// end ; end_of_file
7668: PPOPN 1
7670: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7671: LD_INT 0
7673: PPUSH
7674: PPUSH
// if ( not IAmSpec ) then
7675: CALL_OW 531
7679: NOT
7680: IFFALSE 7696
// Result := Limits_Info ^  ;
7682: LD_ADDR_VAR 0 1
7686: PUSH
7687: LD_LOC 24
7691: PUSH
7692: LD_STRING 
7694: ADD
7695: ST_TO_ADDR
// for i := 1 to 8 do
7696: LD_ADDR_VAR 0 2
7700: PUSH
7701: DOUBLE
7702: LD_INT 1
7704: DEC
7705: ST_TO_ADDR
7706: LD_INT 8
7708: PUSH
7709: FOR_TO
7710: IFFALSE 7755
// if Cheaters [ i ] then
7712: LD_LOC 25
7716: PUSH
7717: LD_VAR 0 2
7721: ARRAY
7722: IFFALSE 7753
// Result := Result ^ [ #Cheater , i , i ] ;
7724: LD_ADDR_VAR 0 1
7728: PUSH
7729: LD_VAR 0 1
7733: PUSH
7734: LD_STRING #Cheater
7736: PUSH
7737: LD_VAR 0 2
7741: PUSH
7742: LD_VAR 0 2
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: LIST
7751: ADD
7752: ST_TO_ADDR
7753: GO 7709
7755: POP
7756: POP
// end ;
7757: LD_VAR 0 1
7761: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7762: LD_INT 0
7764: PPUSH
7765: PPUSH
7766: PPUSH
7767: PPUSH
7768: PPUSH
// case Game_Type of 10 :
7769: LD_EXP 41
7773: PUSH
7774: LD_INT 10
7776: DOUBLE
7777: EQUAL
7778: IFTRUE 7782
7780: GO 7793
7782: POP
// def_game_rules := 1 ; 11 :
7783: LD_ADDR_EXP 42
7787: PUSH
7788: LD_INT 1
7790: ST_TO_ADDR
7791: GO 7813
7793: LD_INT 11
7795: DOUBLE
7796: EQUAL
7797: IFTRUE 7801
7799: GO 7812
7801: POP
// def_game_rules := 3 ; end ;
7802: LD_ADDR_EXP 42
7806: PUSH
7807: LD_INT 3
7809: ST_TO_ADDR
7810: GO 7813
7812: POP
// case def_game_rules of 0 :
7813: LD_EXP 42
7817: PUSH
7818: LD_INT 0
7820: DOUBLE
7821: EQUAL
7822: IFTRUE 7826
7824: GO 7831
7826: POP
// exit ; 1 :
7827: GO 9889
7829: GO 9789
7831: LD_INT 1
7833: DOUBLE
7834: EQUAL
7835: IFTRUE 7839
7837: GO 8055
7839: POP
// begin def_base_level := 2 ;
7840: LD_ADDR_EXP 43
7844: PUSH
7845: LD_INT 2
7847: ST_TO_ADDR
// def_amount_of_people := 2 ;
7848: LD_ADDR_EXP 44
7852: PUSH
7853: LD_INT 2
7855: ST_TO_ADDR
// def_skill_level := 1 ;
7856: LD_ADDR_EXP 45
7860: PUSH
7861: LD_INT 1
7863: ST_TO_ADDR
// def_starting_resources := 2 ;
7864: LD_ADDR_EXP 46
7868: PUSH
7869: LD_INT 2
7871: ST_TO_ADDR
// def_shipments_density := 1 ;
7872: LD_ADDR_EXP 47
7876: PUSH
7877: LD_INT 1
7879: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7880: LD_ADDR_EXP 48
7884: PUSH
7885: LD_INT 0
7887: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7888: LD_ADDR_EXP 49
7892: PUSH
7893: LD_INT 1
7895: ST_TO_ADDR
// def_shared_vision := 1 ;
7896: LD_ADDR_EXP 50
7900: PUSH
7901: LD_INT 1
7903: ST_TO_ADDR
// def_morale_flags := 3 ;
7904: LD_ADDR_EXP 51
7908: PUSH
7909: LD_INT 3
7911: ST_TO_ADDR
// def_siberite_detection := 1 ;
7912: LD_ADDR_EXP 52
7916: PUSH
7917: LD_INT 1
7919: ST_TO_ADDR
// def_people_respawning := 1 ;
7920: LD_ADDR_EXP 53
7924: PUSH
7925: LD_INT 1
7927: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7928: LD_ADDR_EXP 54
7932: PUSH
7933: LD_INT 1
7935: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7936: LD_ADDR_EXP 55
7940: PUSH
7941: LD_INT 0
7943: ST_TO_ADDR
// def_builduptime := 2 ;
7944: LD_ADDR_EXP 56
7948: PUSH
7949: LD_INT 2
7951: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
7952: LD_ADDR_VAR 0 2
7956: PUSH
7957: EMPTY
7958: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7959: LD_ADDR_VAR 0 3
7963: PUSH
7964: EMPTY
7965: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7966: LD_ADDR_LOC 19
7970: PUSH
7971: EMPTY
7972: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7973: LD_ADDR_LOC 20
7977: PUSH
7978: EMPTY
7979: ST_TO_ADDR
// Banned_Controls := [ ] ;
7980: LD_ADDR_LOC 21
7984: PUSH
7985: EMPTY
7986: ST_TO_ADDR
// Banned_Engines := [ ] ;
7987: LD_ADDR_LOC 22
7991: PUSH
7992: EMPTY
7993: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7994: LD_ADDR_LOC 17
7998: PUSH
7999: LD_INT 37
8001: PUSH
8002: EMPTY
8003: LIST
8004: PUSH
8005: LD_INT 4
8007: PUSH
8008: LD_INT 5
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 31
8017: PUSH
8018: LD_INT 32
8020: PUSH
8021: LD_INT 33
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: LIST
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8034: LD_ADDR_LOC 18
8038: PUSH
8039: LD_INT 2
8041: PUSH
8042: LD_INT 2
8044: PUSH
8045: LD_INT 4
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: ST_TO_ADDR
// end ; 2 :
8053: GO 9789
8055: LD_INT 2
8057: DOUBLE
8058: EQUAL
8059: IFTRUE 8063
8061: GO 8272
8063: POP
// begin def_base_level := 1 ;
8064: LD_ADDR_EXP 43
8068: PUSH
8069: LD_INT 1
8071: ST_TO_ADDR
// def_amount_of_people := 2 ;
8072: LD_ADDR_EXP 44
8076: PUSH
8077: LD_INT 2
8079: ST_TO_ADDR
// def_skill_level := 3 ;
8080: LD_ADDR_EXP 45
8084: PUSH
8085: LD_INT 3
8087: ST_TO_ADDR
// def_starting_resources := 3 ;
8088: LD_ADDR_EXP 46
8092: PUSH
8093: LD_INT 3
8095: ST_TO_ADDR
// def_shipments_density := 2 ;
8096: LD_ADDR_EXP 47
8100: PUSH
8101: LD_INT 2
8103: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8104: LD_ADDR_EXP 48
8108: PUSH
8109: LD_INT 1
8111: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8112: LD_ADDR_EXP 49
8116: PUSH
8117: LD_INT 2
8119: ST_TO_ADDR
// def_shared_vision := 1 ;
8120: LD_ADDR_EXP 50
8124: PUSH
8125: LD_INT 1
8127: ST_TO_ADDR
// def_morale_flags := 0 ;
8128: LD_ADDR_EXP 51
8132: PUSH
8133: LD_INT 0
8135: ST_TO_ADDR
// def_siberite_detection := 1 ;
8136: LD_ADDR_EXP 52
8140: PUSH
8141: LD_INT 1
8143: ST_TO_ADDR
// def_people_respawning := 0 ;
8144: LD_ADDR_EXP 53
8148: PUSH
8149: LD_INT 0
8151: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8152: LD_ADDR_EXP 54
8156: PUSH
8157: LD_INT 0
8159: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8160: LD_ADDR_EXP 55
8164: PUSH
8165: LD_INT 0
8167: ST_TO_ADDR
// def_builduptime := 2 ;
8168: LD_ADDR_EXP 56
8172: PUSH
8173: LD_INT 2
8175: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8176: LD_ADDR_VAR 0 2
8180: PUSH
8181: LD_INT 1
8183: PUSH
8184: EMPTY
8185: LIST
8186: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8187: LD_ADDR_VAR 0 3
8191: PUSH
8192: EMPTY
8193: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8194: LD_ADDR_LOC 19
8198: PUSH
8199: EMPTY
8200: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8201: LD_ADDR_LOC 20
8205: PUSH
8206: EMPTY
8207: ST_TO_ADDR
// Banned_Controls := [ ] ;
8208: LD_ADDR_LOC 21
8212: PUSH
8213: EMPTY
8214: ST_TO_ADDR
// Banned_Engines := [ ] ;
8215: LD_ADDR_LOC 22
8219: PUSH
8220: EMPTY
8221: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8222: LD_ADDR_LOC 17
8226: PUSH
8227: LD_INT 4
8229: PUSH
8230: LD_INT 5
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 31
8239: PUSH
8240: LD_INT 32
8242: PUSH
8243: LD_INT 33
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: LIST
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8255: LD_ADDR_LOC 18
8259: PUSH
8260: LD_INT 1
8262: PUSH
8263: LD_INT 2
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: ST_TO_ADDR
// end ; 3 :
8270: GO 9789
8272: LD_INT 3
8274: DOUBLE
8275: EQUAL
8276: IFTRUE 8280
8278: GO 8523
8280: POP
// begin def_base_level := 1 ;
8281: LD_ADDR_EXP 43
8285: PUSH
8286: LD_INT 1
8288: ST_TO_ADDR
// def_amount_of_people := 2 ;
8289: LD_ADDR_EXP 44
8293: PUSH
8294: LD_INT 2
8296: ST_TO_ADDR
// def_skill_level := 3 ;
8297: LD_ADDR_EXP 45
8301: PUSH
8302: LD_INT 3
8304: ST_TO_ADDR
// def_starting_resources := 3 ;
8305: LD_ADDR_EXP 46
8309: PUSH
8310: LD_INT 3
8312: ST_TO_ADDR
// def_shipments_density := 1 ;
8313: LD_ADDR_EXP 47
8317: PUSH
8318: LD_INT 1
8320: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8321: LD_ADDR_EXP 48
8325: PUSH
8326: LD_INT 0
8328: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8329: LD_ADDR_EXP 49
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// def_shared_vision := 1 ;
8337: LD_ADDR_EXP 50
8341: PUSH
8342: LD_INT 1
8344: ST_TO_ADDR
// def_morale_flags := 0 ;
8345: LD_ADDR_EXP 51
8349: PUSH
8350: LD_INT 0
8352: ST_TO_ADDR
// def_siberite_detection := 1 ;
8353: LD_ADDR_EXP 52
8357: PUSH
8358: LD_INT 1
8360: ST_TO_ADDR
// def_people_respawning := 0 ;
8361: LD_ADDR_EXP 53
8365: PUSH
8366: LD_INT 0
8368: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8369: LD_ADDR_EXP 54
8373: PUSH
8374: LD_INT 2
8376: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8377: LD_ADDR_EXP 55
8381: PUSH
8382: LD_INT 0
8384: ST_TO_ADDR
// def_builduptime := 1 ;
8385: LD_ADDR_EXP 56
8389: PUSH
8390: LD_INT 1
8392: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8393: LD_ADDR_VAR 0 2
8397: PUSH
8398: LD_INT 23
8400: PUSH
8401: EMPTY
8402: LIST
8403: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8404: LD_ADDR_VAR 0 3
8408: PUSH
8409: LD_INT 2
8411: PUSH
8412: LD_INT 37
8414: PUSH
8415: LD_INT 32
8417: PUSH
8418: LD_INT 33
8420: PUSH
8421: LD_INT 36
8423: PUSH
8424: LD_INT 16
8426: PUSH
8427: LD_INT 23
8429: PUSH
8430: LD_INT 21
8432: PUSH
8433: LD_INT 18
8435: PUSH
8436: LD_INT 22
8438: PUSH
8439: LD_INT 20
8441: PUSH
8442: LD_INT 19
8444: PUSH
8445: LD_INT 25
8447: PUSH
8448: LD_INT 17
8450: PUSH
8451: LD_INT 24
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8471: LD_ADDR_LOC 19
8475: PUSH
8476: EMPTY
8477: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8478: LD_ADDR_LOC 20
8482: PUSH
8483: EMPTY
8484: ST_TO_ADDR
// Banned_Controls := [ ] ;
8485: LD_ADDR_LOC 21
8489: PUSH
8490: EMPTY
8491: ST_TO_ADDR
// Banned_Engines := [ ] ;
8492: LD_ADDR_LOC 22
8496: PUSH
8497: EMPTY
8498: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8499: LD_ADDR_LOC 17
8503: PUSH
8504: EMPTY
8505: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8506: LD_ADDR_LOC 18
8510: PUSH
8511: EMPTY
8512: ST_TO_ADDR
// No_Mechs := true ;
8513: LD_ADDR_EXP 57
8517: PUSH
8518: LD_INT 1
8520: ST_TO_ADDR
// end ; 4 :
8521: GO 9789
8523: LD_INT 4
8525: DOUBLE
8526: EQUAL
8527: IFTRUE 8531
8529: GO 8706
8531: POP
// begin def_base_level := 1 ;
8532: LD_ADDR_EXP 43
8536: PUSH
8537: LD_INT 1
8539: ST_TO_ADDR
// def_amount_of_people := 2 ;
8540: LD_ADDR_EXP 44
8544: PUSH
8545: LD_INT 2
8547: ST_TO_ADDR
// def_skill_level := 3 ;
8548: LD_ADDR_EXP 45
8552: PUSH
8553: LD_INT 3
8555: ST_TO_ADDR
// def_starting_resources := 3 ;
8556: LD_ADDR_EXP 46
8560: PUSH
8561: LD_INT 3
8563: ST_TO_ADDR
// def_shipments_density := 2 ;
8564: LD_ADDR_EXP 47
8568: PUSH
8569: LD_INT 2
8571: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8572: LD_ADDR_EXP 48
8576: PUSH
8577: LD_INT 1
8579: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8580: LD_ADDR_EXP 49
8584: PUSH
8585: LD_INT 2
8587: ST_TO_ADDR
// def_shared_vision := 1 ;
8588: LD_ADDR_EXP 50
8592: PUSH
8593: LD_INT 1
8595: ST_TO_ADDR
// def_morale_flags := 0 ;
8596: LD_ADDR_EXP 51
8600: PUSH
8601: LD_INT 0
8603: ST_TO_ADDR
// def_siberite_detection := 1 ;
8604: LD_ADDR_EXP 52
8608: PUSH
8609: LD_INT 1
8611: ST_TO_ADDR
// def_people_respawning := 0 ;
8612: LD_ADDR_EXP 53
8616: PUSH
8617: LD_INT 0
8619: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8620: LD_ADDR_EXP 54
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8628: LD_ADDR_EXP 55
8632: PUSH
8633: LD_INT 1
8635: ST_TO_ADDR
// def_builduptime := 3 ;
8636: LD_ADDR_EXP 56
8640: PUSH
8641: LD_INT 3
8643: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8644: LD_ADDR_VAR 0 2
8648: PUSH
8649: LD_INT 1
8651: PUSH
8652: EMPTY
8653: LIST
8654: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8655: LD_ADDR_VAR 0 3
8659: PUSH
8660: EMPTY
8661: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8662: LD_ADDR_LOC 19
8666: PUSH
8667: EMPTY
8668: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8669: LD_ADDR_LOC 20
8673: PUSH
8674: EMPTY
8675: ST_TO_ADDR
// Banned_Controls := [ ] ;
8676: LD_ADDR_LOC 21
8680: PUSH
8681: EMPTY
8682: ST_TO_ADDR
// Banned_Engines := [ ] ;
8683: LD_ADDR_LOC 22
8687: PUSH
8688: EMPTY
8689: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8690: LD_ADDR_LOC 17
8694: PUSH
8695: EMPTY
8696: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8697: LD_ADDR_LOC 18
8701: PUSH
8702: EMPTY
8703: ST_TO_ADDR
// end ; 5 :
8704: GO 9789
8706: LD_INT 5
8708: DOUBLE
8709: EQUAL
8710: IFTRUE 8714
8712: GO 8963
8714: POP
// begin def_base_level := 0 ;
8715: LD_ADDR_EXP 43
8719: PUSH
8720: LD_INT 0
8722: ST_TO_ADDR
// def_amount_of_people := 0 ;
8723: LD_ADDR_EXP 44
8727: PUSH
8728: LD_INT 0
8730: ST_TO_ADDR
// def_skill_level := 0 ;
8731: LD_ADDR_EXP 45
8735: PUSH
8736: LD_INT 0
8738: ST_TO_ADDR
// def_starting_resources := 0 ;
8739: LD_ADDR_EXP 46
8743: PUSH
8744: LD_INT 0
8746: ST_TO_ADDR
// def_shipments_density := 0 ;
8747: LD_ADDR_EXP 47
8751: PUSH
8752: LD_INT 0
8754: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8755: LD_ADDR_EXP 48
8759: PUSH
8760: LD_INT 0
8762: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8763: LD_ADDR_EXP 49
8767: PUSH
8768: LD_INT 0
8770: ST_TO_ADDR
// def_shared_vision := 1 ;
8771: LD_ADDR_EXP 50
8775: PUSH
8776: LD_INT 1
8778: ST_TO_ADDR
// def_morale_flags := 0 ;
8779: LD_ADDR_EXP 51
8783: PUSH
8784: LD_INT 0
8786: ST_TO_ADDR
// def_siberite_detection := 0 ;
8787: LD_ADDR_EXP 52
8791: PUSH
8792: LD_INT 0
8794: ST_TO_ADDR
// def_people_respawning := 1 ;
8795: LD_ADDR_EXP 53
8799: PUSH
8800: LD_INT 1
8802: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8803: LD_ADDR_EXP 54
8807: PUSH
8808: LD_INT 1
8810: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8811: LD_ADDR_EXP 55
8815: PUSH
8816: LD_INT 0
8818: ST_TO_ADDR
// def_builduptime := 0 ;
8819: LD_ADDR_EXP 56
8823: PUSH
8824: LD_INT 0
8826: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8827: LD_ADDR_VAR 0 2
8831: PUSH
8832: LD_INT 10
8834: PUSH
8835: LD_INT 3
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8842: LD_ADDR_VAR 0 3
8846: PUSH
8847: LD_INT 12
8849: PUSH
8850: LD_INT 11
8852: PUSH
8853: LD_INT 14
8855: PUSH
8856: LD_INT 13
8858: PUSH
8859: LD_INT 5
8861: PUSH
8862: LD_INT 24
8864: PUSH
8865: LD_INT 21
8867: PUSH
8868: LD_INT 33
8870: PUSH
8871: LD_INT 36
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8885: LD_ADDR_LOC 19
8889: PUSH
8890: LD_INT 31
8892: PUSH
8893: EMPTY
8894: LIST
8895: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8896: LD_ADDR_LOC 20
8900: PUSH
8901: EMPTY
8902: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8903: LD_ADDR_LOC 21
8907: PUSH
8908: LD_INT 2
8910: PUSH
8911: EMPTY
8912: LIST
8913: ST_TO_ADDR
// Banned_Engines := [ ] ;
8914: LD_ADDR_LOC 22
8918: PUSH
8919: EMPTY
8920: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8921: LD_ADDR_LOC 17
8925: PUSH
8926: LD_INT 4
8928: PUSH
8929: EMPTY
8930: LIST
8931: PUSH
8932: LD_INT 31
8934: PUSH
8935: LD_INT 32
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
8946: LD_ADDR_LOC 18
8950: PUSH
8951: LD_INT 1
8953: PUSH
8954: LD_INT 1
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: ST_TO_ADDR
// end ; 6 :
8961: GO 9789
8963: LD_INT 6
8965: DOUBLE
8966: EQUAL
8967: IFTRUE 8971
8969: GO 9174
8971: POP
// begin def_base_level := 1 ;
8972: LD_ADDR_EXP 43
8976: PUSH
8977: LD_INT 1
8979: ST_TO_ADDR
// def_amount_of_people := 2 ;
8980: LD_ADDR_EXP 44
8984: PUSH
8985: LD_INT 2
8987: ST_TO_ADDR
// def_skill_level := 3 ;
8988: LD_ADDR_EXP 45
8992: PUSH
8993: LD_INT 3
8995: ST_TO_ADDR
// def_starting_resources := 3 ;
8996: LD_ADDR_EXP 46
9000: PUSH
9001: LD_INT 3
9003: ST_TO_ADDR
// def_shipments_density := 1 ;
9004: LD_ADDR_EXP 47
9008: PUSH
9009: LD_INT 1
9011: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9012: LD_ADDR_EXP 48
9016: PUSH
9017: LD_INT 0
9019: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9020: LD_ADDR_EXP 49
9024: PUSH
9025: LD_INT 1
9027: ST_TO_ADDR
// def_shared_vision := 1 ;
9028: LD_ADDR_EXP 50
9032: PUSH
9033: LD_INT 1
9035: ST_TO_ADDR
// def_morale_flags := 0 ;
9036: LD_ADDR_EXP 51
9040: PUSH
9041: LD_INT 0
9043: ST_TO_ADDR
// def_siberite_detection := 1 ;
9044: LD_ADDR_EXP 52
9048: PUSH
9049: LD_INT 1
9051: ST_TO_ADDR
// def_people_respawning := 2 ;
9052: LD_ADDR_EXP 53
9056: PUSH
9057: LD_INT 2
9059: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9060: LD_ADDR_EXP 54
9064: PUSH
9065: LD_INT 1
9067: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9068: LD_ADDR_EXP 55
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// def_builduptime := 1 ;
9076: LD_ADDR_EXP 56
9080: PUSH
9081: LD_INT 1
9083: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9084: LD_ADDR_VAR 0 2
9088: PUSH
9089: LD_INT 23
9091: PUSH
9092: EMPTY
9093: LIST
9094: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9095: LD_ADDR_VAR 0 3
9099: PUSH
9100: LD_INT 2
9102: PUSH
9103: LD_INT 37
9105: PUSH
9106: LD_INT 31
9108: PUSH
9109: LD_INT 32
9111: PUSH
9112: LD_INT 33
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9122: LD_ADDR_LOC 19
9126: PUSH
9127: EMPTY
9128: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9129: LD_ADDR_LOC 20
9133: PUSH
9134: EMPTY
9135: ST_TO_ADDR
// Banned_Controls := [ ] ;
9136: LD_ADDR_LOC 21
9140: PUSH
9141: EMPTY
9142: ST_TO_ADDR
// Banned_Engines := [ ] ;
9143: LD_ADDR_LOC 22
9147: PUSH
9148: EMPTY
9149: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9150: LD_ADDR_LOC 17
9154: PUSH
9155: EMPTY
9156: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9157: LD_ADDR_LOC 18
9161: PUSH
9162: EMPTY
9163: ST_TO_ADDR
// No_Mechs := true ;
9164: LD_ADDR_EXP 57
9168: PUSH
9169: LD_INT 1
9171: ST_TO_ADDR
// end ; 7 :
9172: GO 9789
9174: LD_INT 7
9176: DOUBLE
9177: EQUAL
9178: IFTRUE 9182
9180: GO 9380
9182: POP
// begin def_base_level := 1 ;
9183: LD_ADDR_EXP 43
9187: PUSH
9188: LD_INT 1
9190: ST_TO_ADDR
// def_amount_of_people := 2 ;
9191: LD_ADDR_EXP 44
9195: PUSH
9196: LD_INT 2
9198: ST_TO_ADDR
// def_skill_level := 3 ;
9199: LD_ADDR_EXP 45
9203: PUSH
9204: LD_INT 3
9206: ST_TO_ADDR
// def_starting_resources := 3 ;
9207: LD_ADDR_EXP 46
9211: PUSH
9212: LD_INT 3
9214: ST_TO_ADDR
// def_shipments_density := 1 ;
9215: LD_ADDR_EXP 47
9219: PUSH
9220: LD_INT 1
9222: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9223: LD_ADDR_EXP 48
9227: PUSH
9228: LD_INT 1
9230: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9231: LD_ADDR_EXP 49
9235: PUSH
9236: LD_INT 2
9238: ST_TO_ADDR
// def_shared_vision := 1 ;
9239: LD_ADDR_EXP 50
9243: PUSH
9244: LD_INT 1
9246: ST_TO_ADDR
// def_morale_flags := 0 ;
9247: LD_ADDR_EXP 51
9251: PUSH
9252: LD_INT 0
9254: ST_TO_ADDR
// def_siberite_detection := 1 ;
9255: LD_ADDR_EXP 52
9259: PUSH
9260: LD_INT 1
9262: ST_TO_ADDR
// def_people_respawning := 0 ;
9263: LD_ADDR_EXP 53
9267: PUSH
9268: LD_INT 0
9270: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9271: LD_ADDR_EXP 54
9275: PUSH
9276: LD_INT 1
9278: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9279: LD_ADDR_EXP 55
9283: PUSH
9284: LD_INT 0
9286: ST_TO_ADDR
// def_builduptime := 3 ;
9287: LD_ADDR_EXP 56
9291: PUSH
9292: LD_INT 3
9294: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9295: LD_ADDR_VAR 0 2
9299: PUSH
9300: LD_INT 23
9302: PUSH
9303: EMPTY
9304: LIST
9305: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9306: LD_ADDR_VAR 0 3
9310: PUSH
9311: LD_INT 37
9313: PUSH
9314: EMPTY
9315: LIST
9316: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9317: LD_ADDR_LOC 19
9321: PUSH
9322: EMPTY
9323: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9324: LD_ADDR_LOC 20
9328: PUSH
9329: EMPTY
9330: ST_TO_ADDR
// Banned_Controls := [ ] ;
9331: LD_ADDR_LOC 21
9335: PUSH
9336: EMPTY
9337: ST_TO_ADDR
// Banned_Engines := [ ] ;
9338: LD_ADDR_LOC 22
9342: PUSH
9343: EMPTY
9344: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9345: LD_ADDR_LOC 17
9349: PUSH
9350: LD_INT 31
9352: PUSH
9353: LD_INT 32
9355: PUSH
9356: LD_INT 33
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: PUSH
9364: EMPTY
9365: LIST
9366: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9367: LD_ADDR_LOC 18
9371: PUSH
9372: LD_INT 10
9374: PUSH
9375: EMPTY
9376: LIST
9377: ST_TO_ADDR
// end ; 8 :
9378: GO 9789
9380: LD_INT 8
9382: DOUBLE
9383: EQUAL
9384: IFTRUE 9388
9386: GO 9788
9388: POP
// begin def_base_level := 0 ;
9389: LD_ADDR_EXP 43
9393: PUSH
9394: LD_INT 0
9396: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9397: LD_ADDR_EXP 44
9401: PUSH
9402: LD_INT 0
9404: PPUSH
9405: LD_INT 1
9407: PPUSH
9408: CALL_OW 12
9412: ST_TO_ADDR
// def_skill_level := 0 ;
9413: LD_ADDR_EXP 45
9417: PUSH
9418: LD_INT 0
9420: ST_TO_ADDR
// def_starting_resources := 2 ;
9421: LD_ADDR_EXP 46
9425: PUSH
9426: LD_INT 2
9428: ST_TO_ADDR
// def_shipments_density := 1 ;
9429: LD_ADDR_EXP 47
9433: PUSH
9434: LD_INT 1
9436: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9437: LD_ADDR_EXP 48
9441: PUSH
9442: LD_INT 0
9444: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9445: LD_ADDR_EXP 49
9449: PUSH
9450: LD_INT 0
9452: ST_TO_ADDR
// def_shared_vision := 1 ;
9453: LD_ADDR_EXP 50
9457: PUSH
9458: LD_INT 1
9460: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9461: LD_ADDR_EXP 51
9465: PUSH
9466: LD_INT 0
9468: PPUSH
9469: LD_INT 2
9471: PPUSH
9472: CALL_OW 12
9476: ST_TO_ADDR
// def_siberite_detection := 0 ;
9477: LD_ADDR_EXP 52
9481: PUSH
9482: LD_INT 0
9484: ST_TO_ADDR
// def_people_respawning := 0 ;
9485: LD_ADDR_EXP 53
9489: PUSH
9490: LD_INT 0
9492: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9493: LD_ADDR_EXP 54
9497: PUSH
9498: LD_INT 2
9500: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9501: LD_ADDR_EXP 55
9505: PUSH
9506: LD_INT 0
9508: ST_TO_ADDR
// def_builduptime := 0 ;
9509: LD_ADDR_EXP 56
9513: PUSH
9514: LD_INT 0
9516: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9517: LD_ADDR_VAR 0 2
9521: PUSH
9522: LD_INT 23
9524: PUSH
9525: LD_INT 20
9527: PUSH
9528: LD_INT 40
9530: PUSH
9531: LD_INT 47
9533: PUSH
9534: LD_INT 46
9536: PUSH
9537: LD_INT 39
9539: PUSH
9540: LD_INT 71
9542: PUSH
9543: LD_INT 34
9545: PUSH
9546: LD_INT 41
9548: PUSH
9549: LD_INT 44
9551: PUSH
9552: LD_INT 17
9554: PUSH
9555: LD_INT 16
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9572: LD_ADDR_VAR 0 3
9576: PUSH
9577: LD_INT 37
9579: PUSH
9580: LD_INT 5
9582: PUSH
9583: LD_INT 13
9585: PUSH
9586: LD_INT 34
9588: PUSH
9589: LD_INT 12
9591: PUSH
9592: LD_INT 15
9594: PUSH
9595: LD_INT 11
9597: PUSH
9598: LD_INT 14
9600: PUSH
9601: LD_INT 29
9603: PUSH
9604: LD_INT 30
9606: PUSH
9607: LD_INT 28
9609: PUSH
9610: LD_INT 24
9612: PUSH
9613: LD_INT 25
9615: PUSH
9616: LD_INT 20
9618: PUSH
9619: LD_INT 21
9621: PUSH
9622: LD_INT 22
9624: PUSH
9625: LD_INT 36
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9647: LD_ADDR_LOC 19
9651: PUSH
9652: EMPTY
9653: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9654: LD_ADDR_LOC 20
9658: PUSH
9659: LD_INT 14
9661: PUSH
9662: EMPTY
9663: LIST
9664: ST_TO_ADDR
// Banned_Controls := [ ] ;
9665: LD_ADDR_LOC 21
9669: PUSH
9670: EMPTY
9671: ST_TO_ADDR
// Banned_Engines := [ ] ;
9672: LD_ADDR_LOC 22
9676: PUSH
9677: EMPTY
9678: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9679: LD_ADDR_LOC 17
9683: PUSH
9684: LD_INT 31
9686: PUSH
9687: LD_INT 32
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 4
9696: PUSH
9697: EMPTY
9698: LIST
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9704: LD_ADDR_LOC 18
9708: PUSH
9709: LD_INT 2
9711: PUSH
9712: LD_INT 1
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: ST_TO_ADDR
// for i := 1 to 8 do
9719: LD_ADDR_VAR 0 4
9723: PUSH
9724: DOUBLE
9725: LD_INT 1
9727: DEC
9728: ST_TO_ADDR
9729: LD_INT 8
9731: PUSH
9732: FOR_TO
9733: IFFALSE 9784
// if ( Side_Nations [ i ] = 3 ) then
9735: LD_EXP 22
9739: PUSH
9740: LD_VAR 0 4
9744: ARRAY
9745: PUSH
9746: LD_INT 3
9748: EQUAL
9749: IFFALSE 9782
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9751: LD_ADDR_EXP 22
9755: PUSH
9756: LD_EXP 22
9760: PPUSH
9761: LD_VAR 0 4
9765: PPUSH
9766: LD_INT 1
9768: PPUSH
9769: LD_INT 2
9771: PPUSH
9772: CALL_OW 12
9776: PPUSH
9777: CALL_OW 1
9781: ST_TO_ADDR
9782: GO 9732
9784: POP
9785: POP
// end ; end ;
9786: GO 9789
9788: POP
// for i := 1 to 8 do
9789: LD_ADDR_VAR 0 4
9793: PUSH
9794: DOUBLE
9795: LD_INT 1
9797: DEC
9798: ST_TO_ADDR
9799: LD_INT 8
9801: PUSH
9802: FOR_TO
9803: IFFALSE 9887
// if Side_Positions [ i ] then
9805: LD_EXP 21
9809: PUSH
9810: LD_VAR 0 4
9814: ARRAY
9815: IFFALSE 9885
// begin for j in Unavailable_Techs do
9817: LD_ADDR_VAR 0 5
9821: PUSH
9822: LD_VAR 0 2
9826: PUSH
9827: FOR_IN
9828: IFFALSE 9849
// SetTech ( j , i , 0 ) ;
9830: LD_VAR 0 5
9834: PPUSH
9835: LD_VAR 0 4
9839: PPUSH
9840: LD_INT 0
9842: PPUSH
9843: CALL_OW 322
9847: GO 9827
9849: POP
9850: POP
// for j in Unavailable_Builds do
9851: LD_ADDR_VAR 0 5
9855: PUSH
9856: LD_VAR 0 3
9860: PUSH
9861: FOR_IN
9862: IFFALSE 9883
// SetRestrict ( j , i , 0 ) ;
9864: LD_VAR 0 5
9868: PPUSH
9869: LD_VAR 0 4
9873: PPUSH
9874: LD_INT 0
9876: PPUSH
9877: CALL_OW 324
9881: GO 9861
9883: POP
9884: POP
// end ;
9885: GO 9802
9887: POP
9888: POP
// end ;
9889: LD_VAR 0 1
9893: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
9899: PPUSH
9900: PPUSH
9901: PPUSH
9902: PPUSH
// for i := 1 to Restricted_Builds do
9903: LD_ADDR_VAR 0 2
9907: PUSH
9908: DOUBLE
9909: LD_INT 1
9911: DEC
9912: ST_TO_ADDR
9913: LD_LOC 17
9917: PUSH
9918: FOR_TO
9919: IFFALSE 10229
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9921: LD_LOC 17
9925: PUSH
9926: LD_VAR 0 2
9930: ARRAY
9931: PUSH
9932: LD_INT 1
9934: ARRAY
9935: PUSH
9936: LD_INT 31
9938: DOUBLE
9939: EQUAL
9940: IFTRUE 9956
9942: LD_INT 32
9944: DOUBLE
9945: EQUAL
9946: IFTRUE 9956
9948: LD_INT 33
9950: DOUBLE
9951: EQUAL
9952: IFTRUE 9956
9954: GO 9967
9956: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
9957: LD_ADDR_VAR 0 6
9961: PUSH
9962: LD_STRING #Turrets
9964: ST_TO_ADDR
9965: GO 10012
9967: LD_INT 4
9969: DOUBLE
9970: EQUAL
9971: IFTRUE 9981
9973: LD_INT 5
9975: DOUBLE
9976: EQUAL
9977: IFTRUE 9981
9979: GO 9992
9981: POP
// btype := #Armouries ; b_Behemoth :
9982: LD_ADDR_VAR 0 6
9986: PUSH
9987: LD_STRING #Armouries
9989: ST_TO_ADDR
9990: GO 10012
9992: LD_INT 37
9994: DOUBLE
9995: EQUAL
9996: IFTRUE 10000
9998: GO 10011
10000: POP
// btype := #Behemoths ; end ;
10001: LD_ADDR_VAR 0 6
10005: PUSH
10006: LD_STRING #Behemoths
10008: ST_TO_ADDR
10009: GO 10012
10011: POP
// list := [ ] ;
10012: LD_ADDR_VAR 0 7
10016: PUSH
10017: EMPTY
10018: ST_TO_ADDR
// for j := 1 to 8 do
10019: LD_ADDR_VAR 0 3
10023: PUSH
10024: DOUBLE
10025: LD_INT 1
10027: DEC
10028: ST_TO_ADDR
10029: LD_INT 8
10031: PUSH
10032: FOR_TO
10033: IFFALSE 10126
// if Side_Positions [ j ] then
10035: LD_EXP 21
10039: PUSH
10040: LD_VAR 0 3
10044: ARRAY
10045: IFFALSE 10124
// begin amount := 0 ;
10047: LD_ADDR_VAR 0 5
10051: PUSH
10052: LD_INT 0
10054: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10055: LD_ADDR_VAR 0 4
10059: PUSH
10060: LD_LOC 17
10064: PUSH
10065: LD_VAR 0 2
10069: ARRAY
10070: PUSH
10071: FOR_IN
10072: IFFALSE 10120
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10074: LD_ADDR_VAR 0 5
10078: PUSH
10079: LD_VAR 0 5
10083: PUSH
10084: LD_INT 22
10086: PUSH
10087: LD_VAR 0 3
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 30
10098: PUSH
10099: LD_VAR 0 4
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PPUSH
10112: CALL_OW 69
10116: PLUS
10117: ST_TO_ADDR
10118: GO 10071
10120: POP
10121: POP
// break ;
10122: GO 10126
// end ;
10124: GO 10032
10126: POP
10127: POP
// list := [ ] ;
10128: LD_ADDR_VAR 0 7
10132: PUSH
10133: EMPTY
10134: ST_TO_ADDR
// for j := 1 to 8 do
10135: LD_ADDR_VAR 0 3
10139: PUSH
10140: DOUBLE
10141: LD_INT 1
10143: DEC
10144: ST_TO_ADDR
10145: LD_INT 8
10147: PUSH
10148: FOR_TO
10149: IFFALSE 10169
// list := list ^ amount ;
10151: LD_ADDR_VAR 0 7
10155: PUSH
10156: LD_VAR 0 7
10160: PUSH
10161: LD_VAR 0 5
10165: ADD
10166: ST_TO_ADDR
10167: GO 10148
10169: POP
10170: POP
// Already_Built := Already_Built ^ [ list ] ;
10171: LD_ADDR_LOC 23
10175: PUSH
10176: LD_LOC 23
10180: PUSH
10181: LD_VAR 0 7
10185: PUSH
10186: EMPTY
10187: LIST
10188: ADD
10189: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10190: LD_ADDR_LOC 24
10194: PUSH
10195: LD_LOC 24
10199: PUSH
10200: LD_VAR 0 6
10204: PUSH
10205: LD_VAR 0 5
10209: PUSH
10210: LD_LOC 18
10214: PUSH
10215: LD_VAR 0 2
10219: ARRAY
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: LIST
10225: ADD
10226: ST_TO_ADDR
// end ;
10227: GO 9918
10229: POP
10230: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10231: LD_ADDR_LOC 25
10235: PUSH
10236: LD_INT 0
10238: PUSH
10239: LD_INT 0
10241: PUSH
10242: LD_INT 0
10244: PUSH
10245: LD_INT 0
10247: PUSH
10248: LD_INT 0
10250: PUSH
10251: LD_INT 0
10253: PUSH
10254: LD_INT 0
10256: PUSH
10257: LD_INT 0
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: ST_TO_ADDR
// if Limits_Info then
10270: LD_LOC 24
10274: IFFALSE 10290
// Limits_Info := #Limits ^ Limits_Info ;
10276: LD_ADDR_LOC 24
10280: PUSH
10281: LD_STRING #Limits
10283: PUSH
10284: LD_LOC 24
10288: ADD
10289: ST_TO_ADDR
// end ;
10290: LD_VAR 0 1
10294: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10295: LD_INT 0
10297: PPUSH
10298: PPUSH
10299: PPUSH
10300: PPUSH
// for i := 1 to Restricted_Builds do
10301: LD_ADDR_VAR 0 7
10305: PUSH
10306: DOUBLE
10307: LD_INT 1
10309: DEC
10310: ST_TO_ADDR
10311: LD_LOC 17
10315: PUSH
10316: FOR_TO
10317: IFFALSE 10740
// if BType in Restricted_Builds [ i ] then
10319: LD_VAR 0 2
10323: PUSH
10324: LD_LOC 17
10328: PUSH
10329: LD_VAR 0 7
10333: ARRAY
10334: IN
10335: IFFALSE 10738
// begin if old_side then
10337: LD_VAR 0 4
10341: IFFALSE 10467
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10343: LD_LOC 23
10347: PUSH
10348: LD_VAR 0 7
10352: ARRAY
10353: PUSH
10354: LD_VAR 0 3
10358: ARRAY
10359: PUSH
10360: LD_VAR 0 5
10364: PLUS
10365: PUSH
10366: LD_LOC 18
10370: PUSH
10371: LD_VAR 0 7
10375: ARRAY
10376: GREATER
10377: IFFALSE 10403
// begin SetSide ( un , old_side ) ;
10379: LD_VAR 0 1
10383: PPUSH
10384: LD_VAR 0 4
10388: PPUSH
10389: CALL_OW 235
// count := 0 ;
10393: LD_ADDR_VAR 0 5
10397: PUSH
10398: LD_INT 0
10400: ST_TO_ADDR
// end else
10401: GO 10467
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10403: LD_ADDR_LOC 23
10407: PUSH
10408: LD_LOC 23
10412: PPUSH
10413: LD_VAR 0 7
10417: PPUSH
10418: LD_LOC 23
10422: PUSH
10423: LD_VAR 0 7
10427: ARRAY
10428: PPUSH
10429: LD_VAR 0 4
10433: PPUSH
10434: LD_LOC 23
10438: PUSH
10439: LD_VAR 0 7
10443: ARRAY
10444: PUSH
10445: LD_VAR 0 4
10449: ARRAY
10450: PUSH
10451: LD_VAR 0 5
10455: MINUS
10456: PPUSH
10457: CALL_OW 1
10461: PPUSH
10462: CALL_OW 1
10466: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10467: LD_ADDR_LOC 23
10471: PUSH
10472: LD_LOC 23
10476: PPUSH
10477: LD_VAR 0 7
10481: PPUSH
10482: LD_LOC 23
10486: PUSH
10487: LD_VAR 0 7
10491: ARRAY
10492: PPUSH
10493: LD_VAR 0 3
10497: PPUSH
10498: LD_LOC 23
10502: PUSH
10503: LD_VAR 0 7
10507: ARRAY
10508: PUSH
10509: LD_VAR 0 3
10513: ARRAY
10514: PUSH
10515: LD_VAR 0 5
10519: PLUS
10520: PPUSH
10521: CALL_OW 1
10525: PPUSH
10526: CALL_OW 1
10530: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10531: LD_VAR 0 5
10535: PUSH
10536: LD_INT 0
10538: NONEQUAL
10539: PUSH
10540: LD_VAR 0 3
10544: PUSH
10545: LD_OWVAR 2
10549: EQUAL
10550: AND
10551: IFFALSE 10594
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10553: LD_ADDR_LOC 24
10557: PUSH
10558: LD_LOC 24
10562: PPUSH
10563: LD_INT 3
10565: PUSH
10566: LD_VAR 0 7
10570: MUL
10571: PPUSH
10572: LD_LOC 23
10576: PUSH
10577: LD_VAR 0 7
10581: ARRAY
10582: PUSH
10583: LD_VAR 0 3
10587: ARRAY
10588: PPUSH
10589: CALL_OW 1
10593: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10594: LD_LOC 23
10598: PUSH
10599: LD_VAR 0 7
10603: ARRAY
10604: PUSH
10605: LD_VAR 0 3
10609: ARRAY
10610: PUSH
10611: LD_LOC 18
10615: PUSH
10616: LD_VAR 0 7
10620: ARRAY
10621: GREATER
10622: IFFALSE 10649
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10624: LD_ADDR_LOC 25
10628: PUSH
10629: LD_LOC 25
10633: PPUSH
10634: LD_VAR 0 3
10638: PPUSH
10639: LD_INT 1
10641: PPUSH
10642: CALL_OW 1
10646: ST_TO_ADDR
// end else
10647: GO 10736
// begin for j := 1 to Restricted_Builds do
10649: LD_ADDR_VAR 0 8
10653: PUSH
10654: DOUBLE
10655: LD_INT 1
10657: DEC
10658: ST_TO_ADDR
10659: LD_LOC 17
10663: PUSH
10664: FOR_TO
10665: IFFALSE 10709
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10667: LD_LOC 23
10671: PUSH
10672: LD_VAR 0 8
10676: ARRAY
10677: PUSH
10678: LD_VAR 0 3
10682: ARRAY
10683: PUSH
10684: LD_LOC 18
10688: PUSH
10689: LD_VAR 0 8
10693: ARRAY
10694: GREATER
10695: IFFALSE 10707
// begin Is_Cheater := true ;
10697: LD_ADDR_VAR 0 9
10701: PUSH
10702: LD_INT 1
10704: ST_TO_ADDR
// break ;
10705: GO 10709
// end ;
10707: GO 10664
10709: POP
10710: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10711: LD_ADDR_LOC 25
10715: PUSH
10716: LD_LOC 25
10720: PPUSH
10721: LD_VAR 0 3
10725: PPUSH
10726: LD_VAR 0 9
10730: PPUSH
10731: CALL_OW 1
10735: ST_TO_ADDR
// end ; break ;
10736: GO 10740
// end ;
10738: GO 10316
10740: POP
10741: POP
// end ;
10742: LD_VAR 0 6
10746: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10747: LD_VAR 0 5
10751: PUSH
10752: LD_LOC 19
10756: IN
10757: PUSH
10758: LD_VAR 0 2
10762: PUSH
10763: LD_LOC 20
10767: IN
10768: OR
10769: PUSH
10770: LD_VAR 0 4
10774: PUSH
10775: LD_LOC 21
10779: IN
10780: OR
10781: PUSH
10782: LD_VAR 0 3
10786: PUSH
10787: LD_LOC 22
10791: IN
10792: OR
10793: IFFALSE 10804
// ComCancel ( factory ) ;
10795: LD_VAR 0 1
10799: PPUSH
10800: CALL_OW 127
// end ;
10804: PPOPN 5
10806: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10807: LD_VAR 0 2
10811: PUSH
10812: LD_LOC 19
10816: IN
10817: IFFALSE 10828
// ComCancel ( building ) ;
10819: LD_VAR 0 1
10823: PPUSH
10824: CALL_OW 127
// end ; end_of_file
10828: PPOPN 2
10830: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
10831: LD_INT 0
10833: PPUSH
10834: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10835: LD_ADDR_VAR 0 2
10839: PUSH
10840: LD_STRING #Multi1x1-Time
10842: PUSH
10843: LD_OWVAR 1
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: ST_TO_ADDR
// if WaitServerStrings then
10852: LD_EXP 59
10856: IFFALSE 10874
// AllStrings = AllStrings ^ WaitServerStrings ;
10858: LD_ADDR_VAR 0 2
10862: PUSH
10863: LD_VAR 0 2
10867: PUSH
10868: LD_EXP 59
10872: ADD
10873: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10874: LD_INT 0
10876: PUSH
10877: LD_EXP 16
10881: PUSH
10882: LD_OWVAR 1
10886: MINUS
10887: LESSEQUAL
10888: IFFALSE 10919
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10890: LD_ADDR_VAR 0 2
10894: PUSH
10895: LD_VAR 0 2
10899: PUSH
10900: LD_STRING #allowedsibbomb
10902: PUSH
10903: LD_EXP 16
10907: PUSH
10908: LD_OWVAR 1
10912: MINUS
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: ADD
10918: ST_TO_ADDR
// if ( ExtraStrings ) then
10919: LD_EXP 58
10923: IFFALSE 10945
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10925: LD_ADDR_VAR 0 2
10929: PUSH
10930: LD_VAR 0 2
10934: PUSH
10935: LD_STRING 
10937: ADD
10938: PUSH
10939: LD_EXP 58
10943: ADD
10944: ST_TO_ADDR
// if ( Display_kings ) and not isSGUI then
10945: LD_EXP 60
10949: PUSH
10950: LD_OWVAR 83
10954: NOT
10955: AND
10956: IFFALSE 10974
// AllStrings = AllStrings ^ Display_kings ;
10958: LD_ADDR_VAR 0 2
10962: PUSH
10963: LD_VAR 0 2
10967: PUSH
10968: LD_EXP 60
10972: ADD
10973: ST_TO_ADDR
// if ( LimitsStrings ) then
10974: CALL 7671 0 0
10978: IFFALSE 11000
// AllStrings := AllStrings ^  ^ LimitsStrings ;
10980: LD_ADDR_VAR 0 2
10984: PUSH
10985: LD_VAR 0 2
10989: PUSH
10990: LD_STRING 
10992: ADD
10993: PUSH
10994: CALL 7671 0 0
10998: ADD
10999: ST_TO_ADDR
// Display_Strings := AllStrings ;
11000: LD_ADDR_OWVAR 47
11004: PUSH
11005: LD_VAR 0 2
11009: ST_TO_ADDR
// end ;
11010: LD_VAR 0 1
11014: RET
// every 0 0$1 do
11015: GO 11017
11017: DISABLE
// begin ShowTimer ;
11018: CALL 10831 0 0
// enable ;
11022: ENABLE
// end ; end_of_file
11023: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
11024: LD_INT 0
11026: PPUSH
11027: PPUSH
11028: PPUSH
// sharedPoints1 = [ ] ;
11029: LD_ADDR_LOC 26
11033: PUSH
11034: EMPTY
11035: ST_TO_ADDR
// sharedPoints2 = [ ] ;
11036: LD_ADDR_LOC 27
11040: PUSH
11041: EMPTY
11042: ST_TO_ADDR
// sharedPoints3 = [ ] ;
11043: LD_ADDR_LOC 28
11047: PUSH
11048: EMPTY
11049: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
11050: LD_ADDR_VAR 0 2
11054: PUSH
11055: DOUBLE
11056: LD_INT 1
11058: DEC
11059: ST_TO_ADDR
11060: LD_EXP 21
11064: PUSH
11065: LD_INT 0
11067: PLUS
11068: PUSH
11069: FOR_TO
11070: IFFALSE 11172
// begin if not Side_Positions [ i ] = 0 then
11072: LD_EXP 21
11076: PUSH
11077: LD_VAR 0 2
11081: ARRAY
11082: PUSH
11083: LD_INT 0
11085: EQUAL
11086: NOT
11087: IFFALSE 11101
// SetMultiScore ( i , 0 ) ;
11089: LD_VAR 0 2
11093: PPUSH
11094: LD_INT 0
11096: PPUSH
11097: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
11101: LD_ADDR_LOC 26
11105: PUSH
11106: LD_LOC 26
11110: PPUSH
11111: LD_VAR 0 2
11115: PPUSH
11116: LD_INT 0
11118: PPUSH
11119: CALL_OW 1
11123: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
11124: LD_ADDR_LOC 27
11128: PUSH
11129: LD_LOC 27
11133: PPUSH
11134: LD_VAR 0 2
11138: PPUSH
11139: LD_INT 0
11141: PPUSH
11142: CALL_OW 1
11146: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
11147: LD_ADDR_LOC 28
11151: PUSH
11152: LD_LOC 28
11156: PPUSH
11157: LD_VAR 0 2
11161: PPUSH
11162: LD_INT 0
11164: PPUSH
11165: CALL_OW 1
11169: ST_TO_ADDR
// end ;
11170: GO 11069
11172: POP
11173: POP
// pointGame = true ;
11174: LD_ADDR_LOC 29
11178: PUSH
11179: LD_INT 1
11181: ST_TO_ADDR
// end ;
11182: LD_VAR 0 1
11186: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
11187: LD_LOC 29
11191: IFFALSE 11602
11193: GO 11195
11195: DISABLE
11196: LD_INT 0
11198: PPUSH
11199: PPUSH
11200: PPUSH
11201: PPUSH
11202: PPUSH
11203: PPUSH
11204: PPUSH
11205: PPUSH
11206: PPUSH
11207: PPUSH
11208: PPUSH
11209: PPUSH
11210: PPUSH
// begin if isSGUI then
11211: LD_OWVAR 83
11215: IFFALSE 11602
// begin if Teams [ 1 ] then
11217: LD_EXP 19
11221: PUSH
11222: LD_INT 1
11224: ARRAY
11225: IFFALSE 11237
// red = true else
11227: LD_ADDR_VAR 0 2
11231: PUSH
11232: LD_INT 1
11234: ST_TO_ADDR
11235: GO 11245
// red = false ;
11237: LD_ADDR_VAR 0 2
11241: PUSH
11242: LD_INT 0
11244: ST_TO_ADDR
// if Teams [ 2 ] then
11245: LD_EXP 19
11249: PUSH
11250: LD_INT 2
11252: ARRAY
11253: IFFALSE 11265
// blue = true else
11255: LD_ADDR_VAR 0 3
11259: PUSH
11260: LD_INT 1
11262: ST_TO_ADDR
11263: GO 11273
// blue = false ;
11265: LD_ADDR_VAR 0 3
11269: PUSH
11270: LD_INT 0
11272: ST_TO_ADDR
// if Teams [ 3 ] then
11273: LD_EXP 19
11277: PUSH
11278: LD_INT 3
11280: ARRAY
11281: IFFALSE 11293
// yel = true else
11283: LD_ADDR_VAR 0 4
11287: PUSH
11288: LD_INT 1
11290: ST_TO_ADDR
11291: GO 11301
// yel = false ;
11293: LD_ADDR_VAR 0 4
11297: PUSH
11298: LD_INT 0
11300: ST_TO_ADDR
// if Teams [ 4 ] then
11301: LD_EXP 19
11305: PUSH
11306: LD_INT 4
11308: ARRAY
11309: IFFALSE 11321
// green = true else
11311: LD_ADDR_VAR 0 5
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
11319: GO 11329
// green = false ;
11321: LD_ADDR_VAR 0 5
11325: PUSH
11326: LD_INT 0
11328: ST_TO_ADDR
// if def_public_score then
11329: LD_EXP 1
11333: IFFALSE 11345
// p = true else
11335: LD_ADDR_VAR 0 12
11339: PUSH
11340: LD_INT 1
11342: ST_TO_ADDR
11343: GO 11353
// p = false ;
11345: LD_ADDR_VAR 0 12
11349: PUSH
11350: LD_INT 0
11352: ST_TO_ADDR
// if team_game then
11353: LD_EXP 23
11357: IFFALSE 11438
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
11359: LD_ADDR_VAR 0 13
11363: PUSH
11364: LD_INT 3
11366: PUSH
11367: LD_INT 1
11369: PUSH
11370: LD_INT 2
11372: PUSH
11373: LD_INT 7
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: PUSH
11382: LD_EXP 32
11386: ARRAY
11387: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
11388: LD_ADDR_VAR 0 10
11392: PUSH
11393: LD_STRING {
11395: PUSH
11396: LD_VAR 0 3
11400: STR
11401: PUSH
11402: LD_STRING ,
11404: STR
11405: PUSH
11406: LD_VAR 0 4
11410: STR
11411: PUSH
11412: LD_STRING ,
11414: STR
11415: PUSH
11416: LD_VAR 0 2
11420: STR
11421: PUSH
11422: LD_STRING ,0,0,0,
11424: STR
11425: PUSH
11426: LD_VAR 0 5
11430: STR
11431: PUSH
11432: LD_STRING ,0}
11434: STR
11435: ST_TO_ADDR
// end else
11436: GO 11538
// begin you = your_side ;
11438: LD_ADDR_VAR 0 13
11442: PUSH
11443: LD_OWVAR 2
11447: ST_TO_ADDR
// s = { ;
11448: LD_ADDR_VAR 0 10
11452: PUSH
11453: LD_STRING {
11455: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
11456: LD_ADDR_VAR 0 1
11460: PUSH
11461: DOUBLE
11462: LD_INT 1
11464: DEC
11465: ST_TO_ADDR
11466: LD_EXP 21
11470: PUSH
11471: LD_INT 0
11473: PLUS
11474: PUSH
11475: FOR_TO
11476: IFFALSE 11522
// if side_positions [ i ] then
11478: LD_EXP 21
11482: PUSH
11483: LD_VAR 0 1
11487: ARRAY
11488: IFFALSE 11506
// s = s & 1, else
11490: LD_ADDR_VAR 0 10
11494: PUSH
11495: LD_VAR 0 10
11499: PUSH
11500: LD_STRING 1,
11502: STR
11503: ST_TO_ADDR
11504: GO 11520
// s = s & 0, ;
11506: LD_ADDR_VAR 0 10
11510: PUSH
11511: LD_VAR 0 10
11515: PUSH
11516: LD_STRING 0,
11518: STR
11519: ST_TO_ADDR
11520: GO 11475
11522: POP
11523: POP
// s = s & } ;
11524: LD_ADDR_VAR 0 10
11528: PUSH
11529: LD_VAR 0 10
11533: PUSH
11534: LD_STRING }
11536: STR
11537: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
11538: LD_STRING initScore(
11540: PUSH
11541: LD_VAR 0 10
11545: STR
11546: PUSH
11547: LD_STRING ,
11549: STR
11550: PUSH
11551: LD_VAR 0 12
11555: STR
11556: PUSH
11557: LD_STRING ,
11559: STR
11560: PUSH
11561: LD_VAR 0 13
11565: STR
11566: PUSH
11567: LD_STRING  );
11569: STR
11570: PPUSH
11571: CALL_OW 559
// if game_type = 3 then
11575: LD_EXP 41
11579: PUSH
11580: LD_INT 3
11582: EQUAL
11583: IFFALSE 11602
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
11585: LD_STRING AddScorePoints(2,2,
11587: PUSH
11588: LD_EXP 30
11592: STR
11593: PUSH
11594: LD_STRING  );
11596: STR
11597: PPUSH
11598: CALL_OW 559
// end ; end ;
11602: PPOPN 13
11604: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
11605: LD_INT 0
11607: PPUSH
11608: PPUSH
// case typ of 1 :
11609: LD_VAR 0 3
11613: PUSH
11614: LD_INT 1
11616: DOUBLE
11617: EQUAL
11618: IFTRUE 11622
11620: GO 11650
11622: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
11623: LD_ADDR_LOC 26
11627: PUSH
11628: LD_LOC 26
11632: PPUSH
11633: LD_VAR 0 1
11637: PPUSH
11638: LD_VAR 0 2
11642: PPUSH
11643: CALL_OW 1
11647: ST_TO_ADDR
11648: GO 11723
11650: LD_INT 2
11652: DOUBLE
11653: EQUAL
11654: IFTRUE 11658
11656: GO 11686
11658: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
11659: LD_ADDR_LOC 27
11663: PUSH
11664: LD_LOC 27
11668: PPUSH
11669: LD_VAR 0 1
11673: PPUSH
11674: LD_VAR 0 2
11678: PPUSH
11679: CALL_OW 1
11683: ST_TO_ADDR
11684: GO 11723
11686: LD_INT 3
11688: DOUBLE
11689: EQUAL
11690: IFTRUE 11694
11692: GO 11722
11694: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
11695: LD_ADDR_LOC 28
11699: PUSH
11700: LD_LOC 28
11704: PPUSH
11705: LD_VAR 0 1
11709: PPUSH
11710: LD_VAR 0 2
11714: PPUSH
11715: CALL_OW 1
11719: ST_TO_ADDR
11720: GO 11723
11722: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
11723: LD_ADDR_VAR 0 5
11727: PUSH
11728: LD_LOC 26
11732: PUSH
11733: LD_VAR 0 1
11737: ARRAY
11738: PUSH
11739: LD_LOC 27
11743: PUSH
11744: LD_VAR 0 1
11748: ARRAY
11749: PLUS
11750: PUSH
11751: LD_LOC 28
11755: PUSH
11756: LD_VAR 0 1
11760: ARRAY
11761: PLUS
11762: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
11763: LD_VAR 0 1
11767: PPUSH
11768: LD_VAR 0 5
11772: PPUSH
11773: CALL_OW 506
// end ; end_of_file
11777: LD_VAR 0 4
11781: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11782: LD_INT 0
11784: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11785: LD_VAR 0 1
11789: PPUSH
11790: CALL_OW 255
11794: PUSH
11795: LD_VAR 0 4
11799: EQUAL
11800: IFFALSE 11819
// begin SetAchievement ( ACH_RAD ) ;
11802: LD_STRING ACH_RAD
11804: PPUSH
11805: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11809: LD_STRING ACH_NL
11811: PPUSH
11812: LD_INT 1
11814: PPUSH
11815: CALL_OW 564
// end end ;
11819: LD_VAR 0 5
11823: RET
// export function SA_Win ( side ) ; begin
11824: LD_INT 0
11826: PPUSH
// case side of 1 :
11827: LD_VAR 0 1
11831: PUSH
11832: LD_INT 1
11834: DOUBLE
11835: EQUAL
11836: IFTRUE 11840
11838: GO 11853
11840: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11841: LD_STRING ACH_AH
11843: PPUSH
11844: LD_INT 1
11846: PPUSH
11847: CALL_OW 564
11851: GO 12016
11853: LD_INT 2
11855: DOUBLE
11856: EQUAL
11857: IFTRUE 11861
11859: GO 11874
11861: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11862: LD_STRING ACH_E
11864: PPUSH
11865: LD_INT 1
11867: PPUSH
11868: CALL_OW 564
11872: GO 12016
11874: LD_INT 3
11876: DOUBLE
11877: EQUAL
11878: IFTRUE 11882
11880: GO 11895
11882: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11883: LD_STRING ACH_OOL
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 564
11893: GO 12016
11895: LD_INT 1
11897: PUSH
11898: LD_INT 2
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: DOUBLE
11905: EQUAL
11906: IFTRUE 11910
11908: GO 11935
11910: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11911: LD_STRING ACH_AH
11913: PPUSH
11914: LD_REAL  5.00000000000000E-0001
11917: PPUSH
11918: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11922: LD_STRING ACH_E
11924: PPUSH
11925: LD_REAL  5.00000000000000E-0001
11928: PPUSH
11929: CALL_OW 564
// end ; [ 2 , 3 ] :
11933: GO 12016
11935: LD_INT 2
11937: PUSH
11938: LD_INT 3
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: DOUBLE
11945: EQUAL
11946: IFTRUE 11950
11948: GO 11975
11950: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11951: LD_STRING ACH_OOL
11953: PPUSH
11954: LD_REAL  5.00000000000000E-0001
11957: PPUSH
11958: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11962: LD_STRING ACH_E
11964: PPUSH
11965: LD_REAL  5.00000000000000E-0001
11968: PPUSH
11969: CALL_OW 564
// end ; [ 3 , 1 ] :
11973: GO 12016
11975: LD_INT 3
11977: PUSH
11978: LD_INT 1
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: DOUBLE
11985: EQUAL
11986: IFTRUE 11990
11988: GO 12015
11990: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11991: LD_STRING ACH_AH
11993: PPUSH
11994: LD_REAL  5.00000000000000E-0001
11997: PPUSH
11998: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12002: LD_STRING ACH_OOL
12004: PPUSH
12005: LD_REAL  5.00000000000000E-0001
12008: PPUSH
12009: CALL_OW 564
// end ; end ;
12013: GO 12016
12015: POP
// end ; end_of_file
12016: LD_VAR 0 2
12020: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
12021: LD_INT 0
12023: PPUSH
12024: PPUSH
// enable ( 98 ) ;
12025: LD_INT 98
12027: ENABLE_MARKED
// GameEnded = false ;
12028: LD_ADDR_LOC 31
12032: PUSH
12033: LD_INT 0
12035: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12036: LD_ADDR_LOC 30
12040: PUSH
12041: LD_INT 0
12043: PUSH
12044: LD_INT 0
12046: PUSH
12047: LD_INT 0
12049: PUSH
12050: LD_INT 0
12052: PUSH
12053: LD_INT 0
12055: PUSH
12056: LD_INT 0
12058: PUSH
12059: LD_INT 0
12061: PUSH
12062: LD_INT 0
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: ST_TO_ADDR
// unfoged = false ;
12075: LD_ADDR_LOC 32
12079: PUSH
12080: LD_INT 0
12082: ST_TO_ADDR
// for i = 1 to side_positions do
12083: LD_ADDR_VAR 0 2
12087: PUSH
12088: DOUBLE
12089: LD_INT 1
12091: DEC
12092: ST_TO_ADDR
12093: LD_EXP 21
12097: PUSH
12098: FOR_TO
12099: IFFALSE 12139
// if not side_positions [ i ] then
12101: LD_EXP 21
12105: PUSH
12106: LD_VAR 0 2
12110: ARRAY
12111: NOT
12112: IFFALSE 12137
// defaited = replace ( defaited , i , true ) ;
12114: LD_ADDR_LOC 30
12118: PUSH
12119: LD_LOC 30
12123: PPUSH
12124: LD_VAR 0 2
12128: PPUSH
12129: LD_INT 1
12131: PPUSH
12132: CALL_OW 1
12136: ST_TO_ADDR
12137: GO 12098
12139: POP
12140: POP
// end ;
12141: LD_VAR 0 1
12145: RET
// function CanWinLoose ; begin
12146: LD_INT 0
12148: PPUSH
// Result := true ;
12149: LD_ADDR_VAR 0 1
12153: PUSH
12154: LD_INT 1
12156: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12157: CALL_OW 518
12161: PUSH
12162: CALL_OW 519
12166: PUSH
12167: LD_INT 0
12169: GREATER
12170: AND
12171: IFFALSE 12181
// Result := false ;
12173: LD_ADDR_VAR 0 1
12177: PUSH
12178: LD_INT 0
12180: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12181: CALL_OW 531
12185: PUSH
12186: CALL_OW 519
12190: PUSH
12191: LD_INT 1
12193: GREATER
12194: AND
12195: IFFALSE 12205
// Result := false ;
12197: LD_ADDR_VAR 0 1
12201: PUSH
12202: LD_INT 0
12204: ST_TO_ADDR
// end ;
12205: LD_VAR 0 1
12209: RET
// export function HasPower ( i ) ; var k , h ; begin
12210: LD_INT 0
12212: PPUSH
12213: PPUSH
12214: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
12215: LD_VAR 0 1
12219: PPUSH
12220: CALL_OW 108
12224: NOT
12225: PUSH
12226: LD_EXP 20
12230: PUSH
12231: LD_VAR 0 1
12235: ARRAY
12236: NOT
12237: AND
12238: PUSH
12239: LD_OWVAR 4
12243: AND
12244: IFFALSE 12256
// begin result = false ;
12246: LD_ADDR_VAR 0 2
12250: PUSH
12251: LD_INT 0
12253: ST_TO_ADDR
// end else
12254: GO 12551
// case def_win_rules of 0 :
12256: LD_EXP 17
12260: PUSH
12261: LD_INT 0
12263: DOUBLE
12264: EQUAL
12265: IFTRUE 12269
12267: GO 12432
12269: POP
// if def_people_respawning then
12270: LD_EXP 53
12274: IFFALSE 12365
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
12276: LD_ADDR_VAR 0 2
12280: PUSH
12281: LD_INT 22
12283: PUSH
12284: LD_VAR 0 1
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 2
12295: PUSH
12296: LD_INT 21
12298: PUSH
12299: LD_INT 1
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PUSH
12306: LD_INT 33
12308: PUSH
12309: LD_INT 3
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: LD_INT 33
12318: PUSH
12319: LD_INT 5
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 30
12328: PUSH
12329: LD_INT 0
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 30
12338: PUSH
12339: LD_INT 1
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: ST_TO_ADDR
12363: GO 12430
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
12365: LD_ADDR_VAR 0 2
12369: PUSH
12370: LD_INT 22
12372: PUSH
12373: LD_VAR 0 1
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 2
12384: PUSH
12385: LD_INT 21
12387: PUSH
12388: LD_INT 1
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 33
12397: PUSH
12398: LD_INT 3
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 33
12407: PUSH
12408: LD_INT 5
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 69
12429: ST_TO_ADDR
12430: GO 12551
12432: LD_INT 1
12434: DOUBLE
12435: EQUAL
12436: IFTRUE 12440
12438: GO 12479
12440: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
12441: LD_ADDR_VAR 0 2
12445: PUSH
12446: LD_INT 22
12448: PUSH
12449: LD_VAR 0 1
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 21
12460: PUSH
12461: LD_INT 1
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PPUSH
12472: CALL_OW 69
12476: ST_TO_ADDR
12477: GO 12551
12479: LD_INT 2
12481: DOUBLE
12482: EQUAL
12483: IFTRUE 12487
12485: GO 12550
12487: POP
// begin h = false ;
12488: LD_ADDR_VAR 0 4
12492: PUSH
12493: LD_INT 0
12495: ST_TO_ADDR
// for k in heroes [ i ] do
12496: LD_ADDR_VAR 0 3
12500: PUSH
12501: LD_EXP 33
12505: PUSH
12506: LD_VAR 0 1
12510: ARRAY
12511: PUSH
12512: FOR_IN
12513: IFFALSE 12536
// if IsLive ( k ) then
12515: LD_VAR 0 3
12519: PPUSH
12520: CALL_OW 300
12524: IFFALSE 12534
// h = true ;
12526: LD_ADDR_VAR 0 4
12530: PUSH
12531: LD_INT 1
12533: ST_TO_ADDR
12534: GO 12512
12536: POP
12537: POP
// Result := h ;
12538: LD_ADDR_VAR 0 2
12542: PUSH
12543: LD_VAR 0 4
12547: ST_TO_ADDR
// end ; end ;
12548: GO 12551
12550: POP
// end ;
12551: LD_VAR 0 2
12555: RET
// function AlliedSides ( i , j ) ; begin
12556: LD_INT 0
12558: PPUSH
// Result := false ;
12559: LD_ADDR_VAR 0 3
12563: PUSH
12564: LD_INT 0
12566: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
12567: LD_VAR 0 1
12571: PPUSH
12572: LD_VAR 0 2
12576: PPUSH
12577: CALL_OW 81
12581: PUSH
12582: LD_INT 1
12584: EQUAL
12585: PUSH
12586: LD_VAR 0 2
12590: PPUSH
12591: LD_VAR 0 1
12595: PPUSH
12596: CALL_OW 81
12600: PUSH
12601: LD_INT 1
12603: EQUAL
12604: AND
12605: PUSH
12606: LD_VAR 0 1
12610: PPUSH
12611: CALL_OW 83
12615: AND
12616: PUSH
12617: LD_VAR 0 2
12621: PPUSH
12622: CALL_OW 83
12626: AND
12627: IFFALSE 12637
// Result := true ;
12629: LD_ADDR_VAR 0 3
12633: PUSH
12634: LD_INT 1
12636: ST_TO_ADDR
// end ;
12637: LD_VAR 0 3
12641: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
12642: CALL 12146 0 0
12646: PUSH
12647: LD_LOC 31
12651: NOT
12652: AND
12653: IFFALSE 12669
12655: GO 12657
12657: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
12658: LD_ADDR_EXP 59
12662: PUSH
12663: LD_STRING #Player-Ended
12665: PUSH
12666: EMPTY
12667: LIST
12668: ST_TO_ADDR
12669: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
12670: CALL 12146 0 0
12674: PUSH
12675: LD_LOC 31
12679: AND
12680: IFFALSE 12689
12682: GO 12684
12684: DISABLE
// YouLostInMultiplayer ;
12685: CALL_OW 107
12689: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
12690: CALL 12146 0 0
12694: NOT
12695: PUSH
12696: CALL_OW 531
12700: NOT
12701: AND
12702: IFFALSE 12718
12704: GO 12706
12706: DISABLE
// WaitServerStrings = [ #server-wait ] ;
12707: LD_ADDR_EXP 59
12711: PUSH
12712: LD_STRING #server-wait
12714: PUSH
12715: EMPTY
12716: LIST
12717: ST_TO_ADDR
12718: END
// every 100 trigger IAmSpec do
12719: CALL_OW 531
12723: IFFALSE 12739
12725: GO 12727
12727: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
12728: LD_ADDR_EXP 59
12732: PUSH
12733: LD_STRING #Player-IAmSpec
12735: PUSH
12736: EMPTY
12737: LIST
12738: ST_TO_ADDR
12739: END
// every 100 trigger GameEnded and IAmSpec do
12740: LD_LOC 31
12744: PUSH
12745: CALL_OW 531
12749: AND
12750: IFFALSE 12759
12752: GO 12754
12754: DISABLE
// YouLostInMultiplayer ;
12755: CALL_OW 107
12759: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
12760: CALL 12146 0 0
12764: PUSH
12765: LD_LOC 31
12769: NOT
12770: AND
12771: IFFALSE 12787
12773: GO 12775
12775: DISABLE
// WaitServerStrings = [ $player-win ] ;
12776: LD_ADDR_EXP 59
12780: PUSH
12781: LD_STRING $player-win
12783: PUSH
12784: EMPTY
12785: LIST
12786: ST_TO_ADDR
12787: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
12788: CALL 12146 0 0
12792: PUSH
12793: LD_LOC 31
12797: AND
12798: IFFALSE 12822
12800: GO 12802
12802: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
12803: LD_EXP 22
12807: PUSH
12808: LD_OWVAR 2
12812: ARRAY
12813: PPUSH
12814: CALL 11824 0 1
// YouWinInMultiplayer ;
12818: CALL_OW 106
// end ;
12822: END
// every 100 trigger isEditor marked 401 do
12823: LD_OWVAR 84
12827: IFFALSE 12843
12829: GO 12831
12831: DISABLE
// Debug_Strings = [ You won ] ;
12832: LD_ADDR_OWVAR 48
12836: PUSH
12837: LD_STRING You won
12839: PUSH
12840: EMPTY
12841: LIST
12842: ST_TO_ADDR
12843: END
// every 100 trigger isEditor marked 400 do
12844: LD_OWVAR 84
12848: IFFALSE 12864
12850: GO 12852
12852: DISABLE
// Debug_Strings = [ You loss ] ;
12853: LD_ADDR_OWVAR 48
12857: PUSH
12858: LD_STRING You loss
12860: PUSH
12861: EMPTY
12862: LIST
12863: ST_TO_ADDR
12864: END
// every 100 marked 98 do var i , un ;
12865: GO 12867
12867: DISABLE
12868: LD_INT 0
12870: PPUSH
12871: PPUSH
// begin for i = 1 to side_positions do
12872: LD_ADDR_VAR 0 1
12876: PUSH
12877: DOUBLE
12878: LD_INT 1
12880: DEC
12881: ST_TO_ADDR
12882: LD_EXP 21
12886: PUSH
12887: FOR_TO
12888: IFFALSE 13011
// if side_positions [ i ] then
12890: LD_EXP 21
12894: PUSH
12895: LD_VAR 0 1
12899: ARRAY
12900: IFFALSE 13009
// if not HasPower ( i ) and not Defaited [ i ] then
12902: LD_VAR 0 1
12906: PPUSH
12907: CALL 12210 0 1
12911: NOT
12912: PUSH
12913: LD_LOC 30
12917: PUSH
12918: LD_VAR 0 1
12922: ARRAY
12923: NOT
12924: AND
12925: IFFALSE 13009
// begin un = filterallunits ( [ f_side , i ] ) ;
12927: LD_ADDR_VAR 0 2
12931: PUSH
12932: LD_INT 22
12934: PUSH
12935: LD_VAR 0 1
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 69
12948: ST_TO_ADDR
// if un then
12949: LD_VAR 0 2
12953: IFFALSE 12967
// SetSide ( un , 0 ) ;
12955: LD_VAR 0 2
12959: PPUSH
12960: LD_INT 0
12962: PPUSH
12963: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
12967: LD_ADDR_LOC 30
12971: PUSH
12972: LD_LOC 30
12976: PPUSH
12977: LD_VAR 0 1
12981: PPUSH
12982: LD_INT 1
12984: PPUSH
12985: CALL_OW 1
12989: ST_TO_ADDR
// if i = your_side then
12990: LD_VAR 0 1
12994: PUSH
12995: LD_OWVAR 2
12999: EQUAL
13000: IFFALSE 13009
// begin Multiplayer_Loose_Message ;
13002: CALL_OW 521
// enable ( 400 ) ;
13006: LD_INT 400
13008: ENABLE_MARKED
// end ; end ;
13009: GO 12887
13011: POP
13012: POP
// if not Unfoged and defaited [ your_side ] then
13013: LD_LOC 32
13017: NOT
13018: PUSH
13019: LD_LOC 30
13023: PUSH
13024: LD_OWVAR 2
13028: ARRAY
13029: AND
13030: IFFALSE 13036
// Unfog ;
13032: CALL 13222 0 0
// DidGameEnd ;
13036: CALL 13051 0 0
// if not GameEnded then
13040: LD_LOC 31
13044: NOT
13045: IFFALSE 13048
// enable ;
13047: ENABLE
// end ;
13048: PPOPN 2
13050: END
// function DidGameEnd ; var i , k , enemy ; begin
13051: LD_INT 0
13053: PPUSH
13054: PPUSH
13055: PPUSH
13056: PPUSH
// enemy = [ ] ;
13057: LD_ADDR_VAR 0 4
13061: PUSH
13062: EMPTY
13063: ST_TO_ADDR
// for i = 1 to side_positions do
13064: LD_ADDR_VAR 0 2
13068: PUSH
13069: DOUBLE
13070: LD_INT 1
13072: DEC
13073: ST_TO_ADDR
13074: LD_EXP 21
13078: PUSH
13079: FOR_TO
13080: IFFALSE 13184
// if not defaited [ i ] then
13082: LD_LOC 30
13086: PUSH
13087: LD_VAR 0 2
13091: ARRAY
13092: NOT
13093: IFFALSE 13182
// for k = 1 to side_positions do
13095: LD_ADDR_VAR 0 3
13099: PUSH
13100: DOUBLE
13101: LD_INT 1
13103: DEC
13104: ST_TO_ADDR
13105: LD_EXP 21
13109: PUSH
13110: FOR_TO
13111: IFFALSE 13180
// if not defaited [ k ] then
13113: LD_LOC 30
13117: PUSH
13118: LD_VAR 0 3
13122: ARRAY
13123: NOT
13124: IFFALSE 13178
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
13126: LD_VAR 0 2
13130: PPUSH
13131: LD_VAR 0 3
13135: PPUSH
13136: CALL_OW 81
13140: PUSH
13141: LD_INT 2
13143: PUSH
13144: LD_INT 0
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: IN
13151: IFFALSE 13178
// enemy = enemy ^ [ i , k ] ;
13153: LD_ADDR_VAR 0 4
13157: PUSH
13158: LD_VAR 0 4
13162: PUSH
13163: LD_VAR 0 2
13167: PUSH
13168: LD_VAR 0 3
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: ADD
13177: ST_TO_ADDR
13178: GO 13110
13180: POP
13181: POP
13182: GO 13079
13184: POP
13185: POP
// if not enemy then
13186: LD_VAR 0 4
13190: NOT
13191: IFFALSE 13217
// begin GameEnded = true ;
13193: LD_ADDR_LOC 31
13197: PUSH
13198: LD_INT 1
13200: ST_TO_ADDR
// if not defaited [ your_side ] then
13201: LD_LOC 30
13205: PUSH
13206: LD_OWVAR 2
13210: ARRAY
13211: NOT
13212: IFFALSE 13217
// enable ( 401 ) ;
13214: LD_INT 401
13216: ENABLE_MARKED
// end ; end ;
13217: LD_VAR 0 1
13221: RET
// function unfog ; var k , friends ; begin
13222: LD_INT 0
13224: PPUSH
13225: PPUSH
13226: PPUSH
// for k = 1 to side_positions do
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: DOUBLE
13233: LD_INT 1
13235: DEC
13236: ST_TO_ADDR
13237: LD_EXP 21
13241: PUSH
13242: FOR_TO
13243: IFFALSE 13299
// if not defaited [ k ] then
13245: LD_LOC 30
13249: PUSH
13250: LD_VAR 0 2
13254: ARRAY
13255: NOT
13256: IFFALSE 13297
// if GetAttitude ( your_side , k ) in [ att_friend ] then
13258: LD_OWVAR 2
13262: PPUSH
13263: LD_VAR 0 2
13267: PPUSH
13268: CALL_OW 81
13272: PUSH
13273: LD_INT 1
13275: PUSH
13276: EMPTY
13277: LIST
13278: IN
13279: IFFALSE 13297
// friends = friends ^ k ;
13281: LD_ADDR_VAR 0 3
13285: PUSH
13286: LD_VAR 0 3
13290: PUSH
13291: LD_VAR 0 2
13295: ADD
13296: ST_TO_ADDR
13297: GO 13242
13299: POP
13300: POP
// if not friends then
13301: LD_VAR 0 3
13305: NOT
13306: IFFALSE 13323
// begin fogoff ( true ) ;
13308: LD_INT 1
13310: PPUSH
13311: CALL_OW 344
// unfoged = true ;
13315: LD_ADDR_LOC 32
13319: PUSH
13320: LD_INT 1
13322: ST_TO_ADDR
// end ; end ;
13323: LD_VAR 0 1
13327: RET
// export function MakeGameEnd ; begin
13328: LD_INT 0
13330: PPUSH
// fogoff ( true ) ;
13331: LD_INT 1
13333: PPUSH
13334: CALL_OW 344
// unfoged = true ;
13338: LD_ADDR_LOC 32
13342: PUSH
13343: LD_INT 1
13345: ST_TO_ADDR
// wait ( 0 0$5 ) ;
13346: LD_INT 175
13348: PPUSH
13349: CALL_OW 67
// GameEnded = true ;
13353: LD_ADDR_LOC 31
13357: PUSH
13358: LD_INT 1
13360: ST_TO_ADDR
// end ;
13361: LD_VAR 0 1
13365: RET
// export function GetGameEnded ; begin
13366: LD_INT 0
13368: PPUSH
// result = GameEnded ;
13369: LD_ADDR_VAR 0 1
13373: PUSH
13374: LD_LOC 31
13378: ST_TO_ADDR
// end ; end_of_file
13379: LD_VAR 0 1
13383: RET
// var win ; export function init_kings_counting ; var i ; begin
13384: LD_INT 0
13386: PPUSH
13387: PPUSH
// mp_with_score := true ;
13388: LD_ADDR_OWVAR 14
13392: PUSH
13393: LD_INT 1
13395: ST_TO_ADDR
// ResetMultiScore ;
13396: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
13400: LD_EXP 29
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: CALL_OW 424
// enable ( 2 ) ;
13412: LD_INT 2
13414: ENABLE_MARKED
// end ;
13415: LD_VAR 0 1
13419: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
13420: LD_INT 0
13422: PPUSH
13423: PPUSH
13424: PPUSH
13425: PPUSH
13426: PPUSH
13427: PPUSH
13428: PPUSH
13429: PPUSH
13430: PPUSH
// vypis := [ ] ;
13431: LD_ADDR_VAR 0 3
13435: PUSH
13436: EMPTY
13437: ST_TO_ADDR
// red = 0 ;
13438: LD_ADDR_VAR 0 5
13442: PUSH
13443: LD_INT 0
13445: ST_TO_ADDR
// blue = 0 ;
13446: LD_ADDR_VAR 0 6
13450: PUSH
13451: LD_INT 0
13453: ST_TO_ADDR
// yel = 0 ;
13454: LD_ADDR_VAR 0 7
13458: PUSH
13459: LD_INT 0
13461: ST_TO_ADDR
// green = 0 ;
13462: LD_ADDR_VAR 0 8
13466: PUSH
13467: LD_INT 0
13469: ST_TO_ADDR
// if def_public_score or isSGUI then
13470: LD_EXP 1
13474: PUSH
13475: LD_OWVAR 83
13479: OR
13480: IFFALSE 14095
// if not Team_Game then
13482: LD_EXP 23
13486: NOT
13487: IFFALSE 13619
// begin for side = 1 to Side_Positions do
13489: LD_ADDR_VAR 0 2
13493: PUSH
13494: DOUBLE
13495: LD_INT 1
13497: DEC
13498: ST_TO_ADDR
13499: LD_EXP 21
13503: PUSH
13504: FOR_TO
13505: IFFALSE 13615
// if Side_Positions [ side ] then
13507: LD_EXP 21
13511: PUSH
13512: LD_VAR 0 2
13516: ARRAY
13517: IFFALSE 13613
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
13519: LD_ADDR_VAR 0 3
13523: PUSH
13524: LD_VAR 0 3
13528: PUSH
13529: LD_STRING #KingoftheHill-Public
13531: PUSH
13532: LD_VAR 0 2
13536: PUSH
13537: LD_VAR 0 2
13541: PUSH
13542: LD_VAR 0 2
13546: PUSH
13547: LD_INT 10
13549: PLUS
13550: PPUSH
13551: CALL_OW 110
13555: PUSH
13556: LD_INT 3
13558: DIV
13559: PUSH
13560: LD_EXP 30
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: ADD
13572: ST_TO_ADDR
// ToLua ( updateScorePoints(2, & side & , & ( GetTag ( side + 10 ) div 3 ) & ); ) ;
13573: LD_STRING updateScorePoints(2,
13575: PUSH
13576: LD_VAR 0 2
13580: STR
13581: PUSH
13582: LD_STRING ,
13584: STR
13585: PUSH
13586: LD_VAR 0 2
13590: PUSH
13591: LD_INT 10
13593: PLUS
13594: PPUSH
13595: CALL_OW 110
13599: PUSH
13600: LD_INT 3
13602: DIV
13603: STR
13604: PUSH
13605: LD_STRING );
13607: STR
13608: PPUSH
13609: CALL_OW 559
// end ;
13613: GO 13504
13615: POP
13616: POP
// end else
13617: GO 14093
// begin if Teams [ 1 ] then
13619: LD_EXP 19
13623: PUSH
13624: LD_INT 1
13626: ARRAY
13627: IFFALSE 13679
// for i in Teams [ 1 ] do
13629: LD_ADDR_VAR 0 4
13633: PUSH
13634: LD_EXP 19
13638: PUSH
13639: LD_INT 1
13641: ARRAY
13642: PUSH
13643: FOR_IN
13644: IFFALSE 13677
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
13646: LD_ADDR_VAR 0 5
13650: PUSH
13651: LD_VAR 0 5
13655: PUSH
13656: LD_VAR 0 4
13660: PUSH
13661: LD_INT 10
13663: PLUS
13664: PPUSH
13665: CALL_OW 110
13669: PUSH
13670: LD_INT 3
13672: DIV
13673: PLUS
13674: ST_TO_ADDR
13675: GO 13643
13677: POP
13678: POP
// if Teams [ 2 ] then
13679: LD_EXP 19
13683: PUSH
13684: LD_INT 2
13686: ARRAY
13687: IFFALSE 13739
// for i in Teams [ 2 ] do
13689: LD_ADDR_VAR 0 4
13693: PUSH
13694: LD_EXP 19
13698: PUSH
13699: LD_INT 2
13701: ARRAY
13702: PUSH
13703: FOR_IN
13704: IFFALSE 13737
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
13706: LD_ADDR_VAR 0 6
13710: PUSH
13711: LD_VAR 0 6
13715: PUSH
13716: LD_VAR 0 4
13720: PUSH
13721: LD_INT 10
13723: PLUS
13724: PPUSH
13725: CALL_OW 110
13729: PUSH
13730: LD_INT 3
13732: DIV
13733: PLUS
13734: ST_TO_ADDR
13735: GO 13703
13737: POP
13738: POP
// if Teams [ 3 ] then
13739: LD_EXP 19
13743: PUSH
13744: LD_INT 3
13746: ARRAY
13747: IFFALSE 13799
// for i in Teams [ 3 ] do
13749: LD_ADDR_VAR 0 4
13753: PUSH
13754: LD_EXP 19
13758: PUSH
13759: LD_INT 3
13761: ARRAY
13762: PUSH
13763: FOR_IN
13764: IFFALSE 13797
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
13766: LD_ADDR_VAR 0 7
13770: PUSH
13771: LD_VAR 0 7
13775: PUSH
13776: LD_VAR 0 4
13780: PUSH
13781: LD_INT 10
13783: PLUS
13784: PPUSH
13785: CALL_OW 110
13789: PUSH
13790: LD_INT 3
13792: DIV
13793: PLUS
13794: ST_TO_ADDR
13795: GO 13763
13797: POP
13798: POP
// if Teams [ 4 ] then
13799: LD_EXP 19
13803: PUSH
13804: LD_INT 4
13806: ARRAY
13807: IFFALSE 13859
// for i in Teams [ 4 ] do
13809: LD_ADDR_VAR 0 4
13813: PUSH
13814: LD_EXP 19
13818: PUSH
13819: LD_INT 4
13821: ARRAY
13822: PUSH
13823: FOR_IN
13824: IFFALSE 13857
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
13826: LD_ADDR_VAR 0 8
13830: PUSH
13831: LD_VAR 0 8
13835: PUSH
13836: LD_VAR 0 4
13840: PUSH
13841: LD_INT 10
13843: PLUS
13844: PPUSH
13845: CALL_OW 110
13849: PUSH
13850: LD_INT 3
13852: DIV
13853: PLUS
13854: ST_TO_ADDR
13855: GO 13823
13857: POP
13858: POP
// if Teams [ 1 ] then
13859: LD_EXP 19
13863: PUSH
13864: LD_INT 1
13866: ARRAY
13867: IFFALSE 13896
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
13869: LD_ADDR_VAR 0 3
13873: PUSH
13874: LD_STRING #KingoftheHill-Public-red
13876: PUSH
13877: LD_INT 3
13879: PUSH
13880: LD_VAR 0 5
13884: PUSH
13885: LD_EXP 30
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: ST_TO_ADDR
// if Teams [ 2 ] then
13896: LD_EXP 19
13900: PUSH
13901: LD_INT 2
13903: ARRAY
13904: IFFALSE 13939
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
13906: LD_ADDR_VAR 0 3
13910: PUSH
13911: LD_VAR 0 3
13915: PUSH
13916: LD_STRING #KingoftheHill-Public-blue
13918: PUSH
13919: LD_INT 1
13921: PUSH
13922: LD_VAR 0 6
13926: PUSH
13927: LD_EXP 30
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: ADD
13938: ST_TO_ADDR
// if Teams [ 3 ] then
13939: LD_EXP 19
13943: PUSH
13944: LD_INT 3
13946: ARRAY
13947: IFFALSE 13982
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
13949: LD_ADDR_VAR 0 3
13953: PUSH
13954: LD_VAR 0 3
13958: PUSH
13959: LD_STRING #KingoftheHill-Public-yell
13961: PUSH
13962: LD_INT 2
13964: PUSH
13965: LD_VAR 0 7
13969: PUSH
13970: LD_EXP 30
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: ADD
13981: ST_TO_ADDR
// if Teams [ 4 ] then
13982: LD_EXP 19
13986: PUSH
13987: LD_INT 4
13989: ARRAY
13990: IFFALSE 14025
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
13992: LD_ADDR_VAR 0 3
13996: PUSH
13997: LD_VAR 0 3
14001: PUSH
14002: LD_STRING #KingoftheHill-Public-green
14004: PUSH
14005: LD_INT 7
14007: PUSH
14008: LD_VAR 0 8
14012: PUSH
14013: LD_EXP 30
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: ADD
14024: ST_TO_ADDR
// ToLua ( updateScorePoints(2,3, & red & ); ) ;
14025: LD_STRING updateScorePoints(2,3,
14027: PUSH
14028: LD_VAR 0 5
14032: STR
14033: PUSH
14034: LD_STRING );
14036: STR
14037: PPUSH
14038: CALL_OW 559
// ToLua ( updateScorePoints(2,1, & blue & ); ) ;
14042: LD_STRING updateScorePoints(2,1,
14044: PUSH
14045: LD_VAR 0 6
14049: STR
14050: PUSH
14051: LD_STRING );
14053: STR
14054: PPUSH
14055: CALL_OW 559
// ToLua ( updateScorePoints(2,2, & yel & ); ) ;
14059: LD_STRING updateScorePoints(2,2,
14061: PUSH
14062: LD_VAR 0 7
14066: STR
14067: PUSH
14068: LD_STRING );
14070: STR
14071: PPUSH
14072: CALL_OW 559
// ToLua ( updateScorePoints(2,7, & green & ); ) ;
14076: LD_STRING updateScorePoints(2,7,
14078: PUSH
14079: LD_VAR 0 8
14083: STR
14084: PUSH
14085: LD_STRING );
14087: STR
14088: PPUSH
14089: CALL_OW 559
// end else
14093: GO 14530
// if not Team_Game then
14095: LD_EXP 23
14099: NOT
14100: IFFALSE 14158
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
14102: LD_ADDR_VAR 0 3
14106: PUSH
14107: LD_VAR 0 3
14111: PUSH
14112: LD_STRING #KingoftheHill-Private
14114: PUSH
14115: LD_OWVAR 2
14119: PUSH
14120: LD_OWVAR 2
14124: PUSH
14125: LD_VAR 0 2
14129: PUSH
14130: LD_INT 10
14132: PLUS
14133: PPUSH
14134: CALL_OW 110
14138: PUSH
14139: LD_INT 3
14141: DIV
14142: PUSH
14143: LD_EXP 30
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: ADD
14155: ST_TO_ADDR
14156: GO 14530
// begin for i in Teams [ 1 ] do
14158: LD_ADDR_VAR 0 4
14162: PUSH
14163: LD_EXP 19
14167: PUSH
14168: LD_INT 1
14170: ARRAY
14171: PUSH
14172: FOR_IN
14173: IFFALSE 14206
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14175: LD_ADDR_VAR 0 5
14179: PUSH
14180: LD_VAR 0 5
14184: PUSH
14185: LD_VAR 0 4
14189: PUSH
14190: LD_INT 10
14192: PLUS
14193: PPUSH
14194: CALL_OW 110
14198: PUSH
14199: LD_INT 3
14201: DIV
14202: PLUS
14203: ST_TO_ADDR
14204: GO 14172
14206: POP
14207: POP
// for i in Teams [ 2 ] do
14208: LD_ADDR_VAR 0 4
14212: PUSH
14213: LD_EXP 19
14217: PUSH
14218: LD_INT 2
14220: ARRAY
14221: PUSH
14222: FOR_IN
14223: IFFALSE 14256
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14225: LD_ADDR_VAR 0 6
14229: PUSH
14230: LD_VAR 0 6
14234: PUSH
14235: LD_VAR 0 4
14239: PUSH
14240: LD_INT 10
14242: PLUS
14243: PPUSH
14244: CALL_OW 110
14248: PUSH
14249: LD_INT 3
14251: DIV
14252: PLUS
14253: ST_TO_ADDR
14254: GO 14222
14256: POP
14257: POP
// for i in Teams [ 3 ] do
14258: LD_ADDR_VAR 0 4
14262: PUSH
14263: LD_EXP 19
14267: PUSH
14268: LD_INT 3
14270: ARRAY
14271: PUSH
14272: FOR_IN
14273: IFFALSE 14306
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14275: LD_ADDR_VAR 0 7
14279: PUSH
14280: LD_VAR 0 7
14284: PUSH
14285: LD_VAR 0 4
14289: PUSH
14290: LD_INT 10
14292: PLUS
14293: PPUSH
14294: CALL_OW 110
14298: PUSH
14299: LD_INT 3
14301: DIV
14302: PLUS
14303: ST_TO_ADDR
14304: GO 14272
14306: POP
14307: POP
// for i in Teams [ 4 ] do
14308: LD_ADDR_VAR 0 4
14312: PUSH
14313: LD_EXP 19
14317: PUSH
14318: LD_INT 4
14320: ARRAY
14321: PUSH
14322: FOR_IN
14323: IFFALSE 14356
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14325: LD_ADDR_VAR 0 8
14329: PUSH
14330: LD_VAR 0 8
14334: PUSH
14335: LD_VAR 0 4
14339: PUSH
14340: LD_INT 10
14342: PLUS
14343: PPUSH
14344: CALL_OW 110
14348: PUSH
14349: LD_INT 3
14351: DIV
14352: PLUS
14353: ST_TO_ADDR
14354: GO 14322
14356: POP
14357: POP
// if your_side in Teams [ 1 ] then
14358: LD_OWVAR 2
14362: PUSH
14363: LD_EXP 19
14367: PUSH
14368: LD_INT 1
14370: ARRAY
14371: IN
14372: IFFALSE 14401
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
14374: LD_ADDR_VAR 0 3
14378: PUSH
14379: LD_STRING #KingoftheHill-Public-red
14381: PUSH
14382: LD_INT 3
14384: PUSH
14385: LD_VAR 0 5
14389: PUSH
14390: LD_EXP 30
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
14401: LD_OWVAR 2
14405: PUSH
14406: LD_EXP 19
14410: PUSH
14411: LD_INT 2
14413: ARRAY
14414: IN
14415: IFFALSE 14444
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
14417: LD_ADDR_VAR 0 3
14421: PUSH
14422: LD_STRING #KingoftheHill-Public-blue
14424: PUSH
14425: LD_INT 1
14427: PUSH
14428: LD_VAR 0 6
14432: PUSH
14433: LD_EXP 30
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
14444: LD_OWVAR 2
14448: PUSH
14449: LD_EXP 19
14453: PUSH
14454: LD_INT 3
14456: ARRAY
14457: IN
14458: IFFALSE 14487
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
14460: LD_ADDR_VAR 0 3
14464: PUSH
14465: LD_STRING #KingoftheHill-Public-yell
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: LD_VAR 0 7
14475: PUSH
14476: LD_EXP 30
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
14487: LD_OWVAR 2
14491: PUSH
14492: LD_EXP 19
14496: PUSH
14497: LD_INT 4
14499: ARRAY
14500: IN
14501: IFFALSE 14530
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
14503: LD_ADDR_VAR 0 3
14507: PUSH
14508: LD_STRING #KingoftheHill-Public-green
14510: PUSH
14511: LD_INT 7
14513: PUSH
14514: LD_VAR 0 8
14518: PUSH
14519: LD_EXP 30
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: ST_TO_ADDR
// end ; Display_kings := vypis ;
14530: LD_ADDR_EXP 60
14534: PUSH
14535: LD_VAR 0 3
14539: ST_TO_ADDR
// end ;
14540: LD_VAR 0 1
14544: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
14545: LD_INT 0
14547: PPUSH
14548: PPUSH
14549: PPUSH
14550: PPUSH
14551: PPUSH
14552: PPUSH
14553: PPUSH
14554: PPUSH
14555: PPUSH
// side := [ ] ;
14556: LD_ADDR_VAR 0 2
14560: PUSH
14561: EMPTY
14562: ST_TO_ADDR
// red = 0 ;
14563: LD_ADDR_VAR 0 5
14567: PUSH
14568: LD_INT 0
14570: ST_TO_ADDR
// blue = 0 ;
14571: LD_ADDR_VAR 0 6
14575: PUSH
14576: LD_INT 0
14578: ST_TO_ADDR
// yel = 0 ;
14579: LD_ADDR_VAR 0 7
14583: PUSH
14584: LD_INT 0
14586: ST_TO_ADDR
// green = 0 ;
14587: LD_ADDR_VAR 0 8
14591: PUSH
14592: LD_INT 0
14594: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
14595: LD_ADDR_VAR 0 3
14599: PUSH
14600: LD_EXP 29
14604: PPUSH
14605: LD_INT 21
14607: PUSH
14608: LD_INT 3
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: LD_INT 53
14617: PUSH
14618: EMPTY
14619: LIST
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PPUSH
14625: CALL_OW 70
14629: ST_TO_ADDR
// for un in list do
14630: LD_ADDR_VAR 0 4
14634: PUSH
14635: LD_VAR 0 3
14639: PUSH
14640: FOR_IN
14641: IFFALSE 14666
// side := side union GetSide ( un ) ;
14643: LD_ADDR_VAR 0 2
14647: PUSH
14648: LD_VAR 0 2
14652: PUSH
14653: LD_VAR 0 4
14657: PPUSH
14658: CALL_OW 255
14662: UNION
14663: ST_TO_ADDR
14664: GO 14640
14666: POP
14667: POP
// if side <> 1 then
14668: LD_VAR 0 2
14672: PUSH
14673: LD_INT 1
14675: NONEQUAL
14676: IFFALSE 14680
// exit ;
14678: GO 15043
// side := side [ 1 ] ;
14680: LD_ADDR_VAR 0 2
14684: PUSH
14685: LD_VAR 0 2
14689: PUSH
14690: LD_INT 1
14692: ARRAY
14693: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
14694: LD_VAR 0 2
14698: PUSH
14699: LD_INT 10
14701: PLUS
14702: PPUSH
14703: LD_VAR 0 2
14707: PUSH
14708: LD_INT 10
14710: PLUS
14711: PPUSH
14712: CALL_OW 110
14716: PUSH
14717: LD_INT 1
14719: PLUS
14720: PPUSH
14721: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
14725: LD_VAR 0 2
14729: PPUSH
14730: LD_VAR 0 2
14734: PUSH
14735: LD_INT 10
14737: PLUS
14738: PPUSH
14739: CALL_OW 110
14743: PUSH
14744: LD_INT 3
14746: DIV
14747: PPUSH
14748: LD_INT 2
14750: PPUSH
14751: CALL 11605 0 3
// if not Team_Game then
14755: LD_EXP 23
14759: NOT
14760: IFFALSE 15043
// if GetTag ( side + 10 ) >= final_count * 3 then
14762: LD_VAR 0 2
14766: PUSH
14767: LD_INT 10
14769: PLUS
14770: PPUSH
14771: CALL_OW 110
14775: PUSH
14776: LD_EXP 30
14780: PUSH
14781: LD_INT 3
14783: MUL
14784: GREATEREQUAL
14785: IFFALSE 14792
// enable ( 3 ) else
14787: LD_INT 3
14789: ENABLE_MARKED
14790: GO 15043
// begin for i in Teams [ 1 ] do
14792: LD_ADDR_VAR 0 9
14796: PUSH
14797: LD_EXP 19
14801: PUSH
14802: LD_INT 1
14804: ARRAY
14805: PUSH
14806: FOR_IN
14807: IFFALSE 14840
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14809: LD_ADDR_VAR 0 5
14813: PUSH
14814: LD_VAR 0 5
14818: PUSH
14819: LD_VAR 0 9
14823: PUSH
14824: LD_INT 10
14826: PLUS
14827: PPUSH
14828: CALL_OW 110
14832: PUSH
14833: LD_INT 3
14835: DIV
14836: PLUS
14837: ST_TO_ADDR
14838: GO 14806
14840: POP
14841: POP
// for i in Teams [ 2 ] do
14842: LD_ADDR_VAR 0 9
14846: PUSH
14847: LD_EXP 19
14851: PUSH
14852: LD_INT 2
14854: ARRAY
14855: PUSH
14856: FOR_IN
14857: IFFALSE 14890
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14859: LD_ADDR_VAR 0 6
14863: PUSH
14864: LD_VAR 0 6
14868: PUSH
14869: LD_VAR 0 9
14873: PUSH
14874: LD_INT 10
14876: PLUS
14877: PPUSH
14878: CALL_OW 110
14882: PUSH
14883: LD_INT 3
14885: DIV
14886: PLUS
14887: ST_TO_ADDR
14888: GO 14856
14890: POP
14891: POP
// for i in Teams [ 3 ] do
14892: LD_ADDR_VAR 0 9
14896: PUSH
14897: LD_EXP 19
14901: PUSH
14902: LD_INT 3
14904: ARRAY
14905: PUSH
14906: FOR_IN
14907: IFFALSE 14940
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14909: LD_ADDR_VAR 0 7
14913: PUSH
14914: LD_VAR 0 7
14918: PUSH
14919: LD_VAR 0 9
14923: PUSH
14924: LD_INT 10
14926: PLUS
14927: PPUSH
14928: CALL_OW 110
14932: PUSH
14933: LD_INT 3
14935: DIV
14936: PLUS
14937: ST_TO_ADDR
14938: GO 14906
14940: POP
14941: POP
// for i in Teams [ 4 ] do
14942: LD_ADDR_VAR 0 9
14946: PUSH
14947: LD_EXP 19
14951: PUSH
14952: LD_INT 4
14954: ARRAY
14955: PUSH
14956: FOR_IN
14957: IFFALSE 14990
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14959: LD_ADDR_VAR 0 8
14963: PUSH
14964: LD_VAR 0 8
14968: PUSH
14969: LD_VAR 0 9
14973: PUSH
14974: LD_INT 10
14976: PLUS
14977: PPUSH
14978: CALL_OW 110
14982: PUSH
14983: LD_INT 3
14985: DIV
14986: PLUS
14987: ST_TO_ADDR
14988: GO 14956
14990: POP
14991: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
14992: LD_VAR 0 5
14996: PUSH
14997: LD_EXP 30
15001: GREATEREQUAL
15002: PUSH
15003: LD_VAR 0 6
15007: PUSH
15008: LD_EXP 30
15012: GREATEREQUAL
15013: OR
15014: PUSH
15015: LD_VAR 0 7
15019: PUSH
15020: LD_EXP 30
15024: GREATEREQUAL
15025: OR
15026: PUSH
15027: LD_VAR 0 8
15031: PUSH
15032: LD_EXP 30
15036: GREATEREQUAL
15037: OR
15038: IFFALSE 15043
// enable ( 3 ) ;
15040: LD_INT 3
15042: ENABLE_MARKED
// end ; end ;
15043: LD_VAR 0 1
15047: RET
// every 0 0$1 marked 2 do
15048: GO 15050
15050: DISABLE
// begin count_king ;
15051: CALL 14545 0 0
// show_public_points ;
15055: CALL 13420 0 0
// enable ;
15059: ENABLE
// end ;
15060: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
15061: GO 15063
15063: DISABLE
15064: LD_INT 0
15066: PPUSH
15067: PPUSH
15068: PPUSH
15069: PPUSH
15070: PPUSH
15071: PPUSH
// begin win := [ ] ;
15072: LD_ADDR_LOC 33
15076: PUSH
15077: EMPTY
15078: ST_TO_ADDR
// red = 0 ;
15079: LD_ADDR_VAR 0 2
15083: PUSH
15084: LD_INT 0
15086: ST_TO_ADDR
// blue = 0 ;
15087: LD_ADDR_VAR 0 3
15091: PUSH
15092: LD_INT 0
15094: ST_TO_ADDR
// yel = 0 ;
15095: LD_ADDR_VAR 0 4
15099: PUSH
15100: LD_INT 0
15102: ST_TO_ADDR
// green = 0 ;
15103: LD_ADDR_VAR 0 5
15107: PUSH
15108: LD_INT 0
15110: ST_TO_ADDR
// if not Team_Game then
15111: LD_EXP 23
15115: NOT
15116: IFFALSE 15193
// begin for side = 1 to 8 do
15118: LD_ADDR_VAR 0 1
15122: PUSH
15123: DOUBLE
15124: LD_INT 1
15126: DEC
15127: ST_TO_ADDR
15128: LD_INT 8
15130: PUSH
15131: FOR_TO
15132: IFFALSE 15177
// if GetTag ( side + 10 ) >= final_count * 3 then
15134: LD_VAR 0 1
15138: PUSH
15139: LD_INT 10
15141: PLUS
15142: PPUSH
15143: CALL_OW 110
15147: PUSH
15148: LD_EXP 30
15152: PUSH
15153: LD_INT 3
15155: MUL
15156: GREATEREQUAL
15157: IFFALSE 15175
// win := win ^ side ;
15159: LD_ADDR_LOC 33
15163: PUSH
15164: LD_LOC 33
15168: PUSH
15169: LD_VAR 0 1
15173: ADD
15174: ST_TO_ADDR
15175: GO 15131
15177: POP
15178: POP
// if win then
15179: LD_LOC 33
15183: IFFALSE 15190
// enable ( 4 ) else
15185: LD_INT 4
15187: ENABLE_MARKED
15188: GO 15191
// enable ;
15190: ENABLE
// end else
15191: GO 15509
// begin for i in Teams [ 1 ] do
15193: LD_ADDR_VAR 0 6
15197: PUSH
15198: LD_EXP 19
15202: PUSH
15203: LD_INT 1
15205: ARRAY
15206: PUSH
15207: FOR_IN
15208: IFFALSE 15241
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
15210: LD_ADDR_VAR 0 2
15214: PUSH
15215: LD_VAR 0 2
15219: PUSH
15220: LD_VAR 0 6
15224: PUSH
15225: LD_INT 10
15227: PLUS
15228: PPUSH
15229: CALL_OW 110
15233: PUSH
15234: LD_INT 3
15236: DIV
15237: PLUS
15238: ST_TO_ADDR
15239: GO 15207
15241: POP
15242: POP
// for i in Teams [ 2 ] do
15243: LD_ADDR_VAR 0 6
15247: PUSH
15248: LD_EXP 19
15252: PUSH
15253: LD_INT 2
15255: ARRAY
15256: PUSH
15257: FOR_IN
15258: IFFALSE 15291
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
15260: LD_ADDR_VAR 0 3
15264: PUSH
15265: LD_VAR 0 3
15269: PUSH
15270: LD_VAR 0 6
15274: PUSH
15275: LD_INT 10
15277: PLUS
15278: PPUSH
15279: CALL_OW 110
15283: PUSH
15284: LD_INT 3
15286: DIV
15287: PLUS
15288: ST_TO_ADDR
15289: GO 15257
15291: POP
15292: POP
// for i in Teams [ 3 ] do
15293: LD_ADDR_VAR 0 6
15297: PUSH
15298: LD_EXP 19
15302: PUSH
15303: LD_INT 3
15305: ARRAY
15306: PUSH
15307: FOR_IN
15308: IFFALSE 15341
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
15310: LD_ADDR_VAR 0 4
15314: PUSH
15315: LD_VAR 0 4
15319: PUSH
15320: LD_VAR 0 6
15324: PUSH
15325: LD_INT 10
15327: PLUS
15328: PPUSH
15329: CALL_OW 110
15333: PUSH
15334: LD_INT 3
15336: DIV
15337: PLUS
15338: ST_TO_ADDR
15339: GO 15307
15341: POP
15342: POP
// for i in Teams [ 4 ] do
15343: LD_ADDR_VAR 0 6
15347: PUSH
15348: LD_EXP 19
15352: PUSH
15353: LD_INT 4
15355: ARRAY
15356: PUSH
15357: FOR_IN
15358: IFFALSE 15391
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
15360: LD_ADDR_VAR 0 5
15364: PUSH
15365: LD_VAR 0 5
15369: PUSH
15370: LD_VAR 0 6
15374: PUSH
15375: LD_INT 10
15377: PLUS
15378: PPUSH
15379: CALL_OW 110
15383: PUSH
15384: LD_INT 3
15386: DIV
15387: PLUS
15388: ST_TO_ADDR
15389: GO 15357
15391: POP
15392: POP
// if red >= final_count then
15393: LD_VAR 0 2
15397: PUSH
15398: LD_EXP 30
15402: GREATEREQUAL
15403: IFFALSE 15419
// win = teams [ 1 ] ;
15405: LD_ADDR_LOC 33
15409: PUSH
15410: LD_EXP 19
15414: PUSH
15415: LD_INT 1
15417: ARRAY
15418: ST_TO_ADDR
// if blue >= final_count then
15419: LD_VAR 0 3
15423: PUSH
15424: LD_EXP 30
15428: GREATEREQUAL
15429: IFFALSE 15445
// win = teams [ 2 ] ;
15431: LD_ADDR_LOC 33
15435: PUSH
15436: LD_EXP 19
15440: PUSH
15441: LD_INT 2
15443: ARRAY
15444: ST_TO_ADDR
// if yel >= final_count then
15445: LD_VAR 0 4
15449: PUSH
15450: LD_EXP 30
15454: GREATEREQUAL
15455: IFFALSE 15471
// win = teams [ 3 ] ;
15457: LD_ADDR_LOC 33
15461: PUSH
15462: LD_EXP 19
15466: PUSH
15467: LD_INT 3
15469: ARRAY
15470: ST_TO_ADDR
// if green >= final_count then
15471: LD_VAR 0 5
15475: PUSH
15476: LD_EXP 30
15480: GREATEREQUAL
15481: IFFALSE 15497
// win = teams [ 4 ] ;
15483: LD_ADDR_LOC 33
15487: PUSH
15488: LD_EXP 19
15492: PUSH
15493: LD_INT 4
15495: ARRAY
15496: ST_TO_ADDR
// if win then
15497: LD_LOC 33
15501: IFFALSE 15508
// enable ( 4 ) else
15503: LD_INT 4
15505: ENABLE_MARKED
15506: GO 15509
// enable ;
15508: ENABLE
// end ; end ;
15509: PPOPN 6
15511: END
// every 0 0$1 marked 4 do
15512: GO 15514
15514: DISABLE
// begin if Player_Side in win then
15515: LD_EXP 31
15519: PUSH
15520: LD_LOC 33
15524: IN
15525: IFFALSE 15541
// begin wait ( 0 0$2 ) ;
15527: LD_INT 70
15529: PPUSH
15530: CALL_OW 67
// enable ( 401 ) ;
15534: LD_INT 401
15536: ENABLE_MARKED
// exit ;
15537: GO 15557
// end else
15539: GO 15557
// begin wait ( 0 0$2 ) ;
15541: LD_INT 70
15543: PPUSH
15544: CALL_OW 67
// Multiplayer_Loose_Message ;
15548: CALL_OW 521
// enable ( 400 ) ;
15552: LD_INT 400
15554: ENABLE_MARKED
// exit ;
15555: GO 15557
// end ; end ; end_of_file
15557: END
// export function SetMpTechs ( ) ; var side , i ; begin
15558: LD_INT 0
15560: PPUSH
15561: PPUSH
15562: PPUSH
// for side = 1 to 8 do
15563: LD_ADDR_VAR 0 2
15567: PUSH
15568: DOUBLE
15569: LD_INT 1
15571: DEC
15572: ST_TO_ADDR
15573: LD_INT 8
15575: PUSH
15576: FOR_TO
15577: IFFALSE 15698
// begin for i = 1 to 72 do
15579: LD_ADDR_VAR 0 3
15583: PUSH
15584: DOUBLE
15585: LD_INT 1
15587: DEC
15588: ST_TO_ADDR
15589: LD_INT 72
15591: PUSH
15592: FOR_TO
15593: IFFALSE 15624
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15595: LD_VAR 0 3
15599: PPUSH
15600: LD_VAR 0 2
15604: PPUSH
15605: LD_INT 0
15607: PPUSH
15608: LD_VAR 0 3
15612: PPUSH
15613: CALL_OW 565
15617: PPUSH
15618: CALL_OW 322
15622: GO 15592
15624: POP
15625: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15626: LD_INT 73
15628: PPUSH
15629: LD_VAR 0 2
15633: PPUSH
15634: LD_INT 0
15636: PPUSH
15637: LD_INT 25
15639: PPUSH
15640: CALL_OW 565
15644: PPUSH
15645: CALL_OW 322
// for i = 0 to 40 do
15649: LD_ADDR_VAR 0 3
15653: PUSH
15654: DOUBLE
15655: LD_INT 0
15657: DEC
15658: ST_TO_ADDR
15659: LD_INT 40
15661: PUSH
15662: FOR_TO
15663: IFFALSE 15694
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15665: LD_VAR 0 3
15669: PPUSH
15670: LD_VAR 0 2
15674: PPUSH
15675: LD_INT 1
15677: PPUSH
15678: LD_VAR 0 3
15682: PPUSH
15683: CALL_OW 565
15687: PPUSH
15688: CALL_OW 324
15692: GO 15662
15694: POP
15695: POP
// end ;
15696: GO 15576
15698: POP
15699: POP
// end ;
15700: LD_VAR 0 1
15704: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15705: LD_INT 0
15707: PPUSH
15708: PPUSH
15709: PPUSH
// for side = 1 to 8 do
15710: LD_ADDR_VAR 0 3
15714: PUSH
15715: DOUBLE
15716: LD_INT 1
15718: DEC
15719: ST_TO_ADDR
15720: LD_INT 8
15722: PUSH
15723: FOR_TO
15724: IFFALSE 19720
// begin for i = 1 to 73 do
15726: LD_ADDR_VAR 0 4
15730: PUSH
15731: DOUBLE
15732: LD_INT 1
15734: DEC
15735: ST_TO_ADDR
15736: LD_INT 73
15738: PUSH
15739: FOR_TO
15740: IFFALSE 15761
// SetTech ( i , side , state_disabled ) ;
15742: LD_VAR 0 4
15746: PPUSH
15747: LD_VAR 0 3
15751: PPUSH
15752: LD_INT 0
15754: PPUSH
15755: CALL_OW 322
15759: GO 15739
15761: POP
15762: POP
// for i = 0 to 40 do
15763: LD_ADDR_VAR 0 4
15767: PUSH
15768: DOUBLE
15769: LD_INT 0
15771: DEC
15772: ST_TO_ADDR
15773: LD_INT 40
15775: PUSH
15776: FOR_TO
15777: IFFALSE 15798
// SetRestrict ( i , side , false ) ;
15779: LD_VAR 0 4
15783: PPUSH
15784: LD_VAR 0 3
15788: PPUSH
15789: LD_INT 0
15791: PPUSH
15792: CALL_OW 324
15796: GO 15776
15798: POP
15799: POP
// case level of 1 :
15800: LD_VAR 0 1
15804: PUSH
15805: LD_INT 1
15807: DOUBLE
15808: EQUAL
15809: IFTRUE 15813
15811: GO 15966
15813: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15814: LD_INT 35
15816: PPUSH
15817: LD_VAR 0 3
15821: PPUSH
15822: LD_INT 1
15824: PPUSH
15825: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15829: LD_INT 45
15831: PPUSH
15832: LD_VAR 0 3
15836: PPUSH
15837: LD_INT 1
15839: PPUSH
15840: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15844: LD_INT 46
15846: PPUSH
15847: LD_VAR 0 3
15851: PPUSH
15852: LD_INT 1
15854: PPUSH
15855: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15859: LD_INT 47
15861: PPUSH
15862: LD_VAR 0 3
15866: PPUSH
15867: LD_INT 1
15869: PPUSH
15870: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15874: LD_INT 0
15876: PPUSH
15877: LD_VAR 0 3
15881: PPUSH
15882: LD_INT 1
15884: PPUSH
15885: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15889: LD_INT 2
15891: PPUSH
15892: LD_VAR 0 3
15896: PPUSH
15897: LD_INT 1
15899: PPUSH
15900: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15904: LD_INT 4
15906: PPUSH
15907: LD_VAR 0 3
15911: PPUSH
15912: LD_INT 1
15914: PPUSH
15915: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15919: LD_INT 6
15921: PPUSH
15922: LD_VAR 0 3
15926: PPUSH
15927: LD_INT 1
15929: PPUSH
15930: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15934: LD_INT 29
15936: PPUSH
15937: LD_VAR 0 3
15941: PPUSH
15942: LD_INT 1
15944: PPUSH
15945: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15949: LD_INT 31
15951: PPUSH
15952: LD_VAR 0 3
15956: PPUSH
15957: LD_INT 1
15959: PPUSH
15960: CALL_OW 324
// end ; 2 :
15964: GO 19718
15966: LD_INT 2
15968: DOUBLE
15969: EQUAL
15970: IFTRUE 15974
15972: GO 16172
15974: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15975: LD_INT 35
15977: PPUSH
15978: LD_VAR 0 3
15982: PPUSH
15983: LD_INT 1
15985: PPUSH
15986: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15990: LD_INT 45
15992: PPUSH
15993: LD_VAR 0 3
15997: PPUSH
15998: LD_INT 1
16000: PPUSH
16001: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16005: LD_INT 46
16007: PPUSH
16008: LD_VAR 0 3
16012: PPUSH
16013: LD_INT 1
16015: PPUSH
16016: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16020: LD_INT 47
16022: PPUSH
16023: LD_VAR 0 3
16027: PPUSH
16028: LD_INT 1
16030: PPUSH
16031: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16035: LD_INT 1
16037: PPUSH
16038: LD_VAR 0 3
16042: PPUSH
16043: LD_INT 1
16045: PPUSH
16046: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16050: LD_INT 2
16052: PPUSH
16053: LD_VAR 0 3
16057: PPUSH
16058: LD_INT 1
16060: PPUSH
16061: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16065: LD_INT 11
16067: PPUSH
16068: LD_VAR 0 3
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16080: LD_INT 0
16082: PPUSH
16083: LD_VAR 0 3
16087: PPUSH
16088: LD_INT 1
16090: PPUSH
16091: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16095: LD_INT 2
16097: PPUSH
16098: LD_VAR 0 3
16102: PPUSH
16103: LD_INT 1
16105: PPUSH
16106: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16110: LD_INT 4
16112: PPUSH
16113: LD_VAR 0 3
16117: PPUSH
16118: LD_INT 1
16120: PPUSH
16121: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16125: LD_INT 6
16127: PPUSH
16128: LD_VAR 0 3
16132: PPUSH
16133: LD_INT 1
16135: PPUSH
16136: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16140: LD_INT 29
16142: PPUSH
16143: LD_VAR 0 3
16147: PPUSH
16148: LD_INT 1
16150: PPUSH
16151: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16155: LD_INT 31
16157: PPUSH
16158: LD_VAR 0 3
16162: PPUSH
16163: LD_INT 1
16165: PPUSH
16166: CALL_OW 324
// end ; 3 :
16170: GO 19718
16172: LD_INT 3
16174: DOUBLE
16175: EQUAL
16176: IFTRUE 16180
16178: GO 16633
16180: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16181: LD_INT 35
16183: PPUSH
16184: LD_VAR 0 3
16188: PPUSH
16189: LD_INT 1
16191: PPUSH
16192: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16196: LD_INT 45
16198: PPUSH
16199: LD_VAR 0 3
16203: PPUSH
16204: LD_INT 1
16206: PPUSH
16207: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16211: LD_INT 46
16213: PPUSH
16214: LD_VAR 0 3
16218: PPUSH
16219: LD_INT 1
16221: PPUSH
16222: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16226: LD_INT 47
16228: PPUSH
16229: LD_VAR 0 3
16233: PPUSH
16234: LD_INT 1
16236: PPUSH
16237: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16241: LD_INT 1
16243: PPUSH
16244: LD_VAR 0 3
16248: PPUSH
16249: LD_INT 1
16251: PPUSH
16252: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16256: LD_INT 2
16258: PPUSH
16259: LD_VAR 0 3
16263: PPUSH
16264: LD_INT 1
16266: PPUSH
16267: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16271: LD_INT 11
16273: PPUSH
16274: LD_VAR 0 3
16278: PPUSH
16279: LD_INT 1
16281: PPUSH
16282: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16286: LD_INT 48
16288: PPUSH
16289: LD_VAR 0 3
16293: PPUSH
16294: LD_INT 1
16296: PPUSH
16297: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16301: LD_INT 69
16303: PPUSH
16304: LD_VAR 0 3
16308: PPUSH
16309: LD_INT 1
16311: PPUSH
16312: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16316: LD_INT 39
16318: PPUSH
16319: LD_VAR 0 3
16323: PPUSH
16324: LD_INT 1
16326: PPUSH
16327: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16331: LD_INT 43
16333: PPUSH
16334: LD_VAR 0 3
16338: PPUSH
16339: LD_INT 1
16341: PPUSH
16342: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16346: LD_INT 51
16348: PPUSH
16349: LD_VAR 0 3
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16361: LD_INT 6
16363: PPUSH
16364: LD_VAR 0 3
16368: PPUSH
16369: LD_INT 1
16371: PPUSH
16372: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16376: LD_INT 0
16378: PPUSH
16379: LD_VAR 0 3
16383: PPUSH
16384: LD_INT 1
16386: PPUSH
16387: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16391: LD_INT 2
16393: PPUSH
16394: LD_VAR 0 3
16398: PPUSH
16399: LD_INT 1
16401: PPUSH
16402: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16406: LD_INT 3
16408: PPUSH
16409: LD_VAR 0 3
16413: PPUSH
16414: LD_INT 1
16416: PPUSH
16417: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16421: LD_INT 4
16423: PPUSH
16424: LD_VAR 0 3
16428: PPUSH
16429: LD_INT 1
16431: PPUSH
16432: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16436: LD_INT 6
16438: PPUSH
16439: LD_VAR 0 3
16443: PPUSH
16444: LD_INT 1
16446: PPUSH
16447: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16451: LD_INT 7
16453: PPUSH
16454: LD_VAR 0 3
16458: PPUSH
16459: LD_INT 1
16461: PPUSH
16462: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16466: LD_INT 8
16468: PPUSH
16469: LD_VAR 0 3
16473: PPUSH
16474: LD_INT 1
16476: PPUSH
16477: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16481: LD_INT 10
16483: PPUSH
16484: LD_VAR 0 3
16488: PPUSH
16489: LD_INT 1
16491: PPUSH
16492: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16496: LD_INT 15
16498: PPUSH
16499: LD_VAR 0 3
16503: PPUSH
16504: LD_INT 1
16506: PPUSH
16507: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16511: LD_INT 16
16513: PPUSH
16514: LD_VAR 0 3
16518: PPUSH
16519: LD_INT 1
16521: PPUSH
16522: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16526: LD_INT 17
16528: PPUSH
16529: LD_VAR 0 3
16533: PPUSH
16534: LD_INT 1
16536: PPUSH
16537: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16541: LD_INT 20
16543: PPUSH
16544: LD_VAR 0 3
16548: PPUSH
16549: LD_INT 1
16551: PPUSH
16552: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16556: LD_INT 26
16558: PPUSH
16559: LD_VAR 0 3
16563: PPUSH
16564: LD_INT 1
16566: PPUSH
16567: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16571: LD_INT 27
16573: PPUSH
16574: LD_VAR 0 3
16578: PPUSH
16579: LD_INT 1
16581: PPUSH
16582: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16586: LD_INT 29
16588: PPUSH
16589: LD_VAR 0 3
16593: PPUSH
16594: LD_INT 1
16596: PPUSH
16597: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16601: LD_INT 31
16603: PPUSH
16604: LD_VAR 0 3
16608: PPUSH
16609: LD_INT 1
16611: PPUSH
16612: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16616: LD_INT 32
16618: PPUSH
16619: LD_VAR 0 3
16623: PPUSH
16624: LD_INT 1
16626: PPUSH
16627: CALL_OW 324
// end ; 4 :
16631: GO 19718
16633: LD_INT 4
16635: DOUBLE
16636: EQUAL
16637: IFTRUE 16641
16639: GO 17589
16641: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16642: LD_INT 35
16644: PPUSH
16645: LD_VAR 0 3
16649: PPUSH
16650: LD_INT 1
16652: PPUSH
16653: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16657: LD_INT 45
16659: PPUSH
16660: LD_VAR 0 3
16664: PPUSH
16665: LD_INT 1
16667: PPUSH
16668: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16672: LD_INT 46
16674: PPUSH
16675: LD_VAR 0 3
16679: PPUSH
16680: LD_INT 1
16682: PPUSH
16683: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16687: LD_INT 47
16689: PPUSH
16690: LD_VAR 0 3
16694: PPUSH
16695: LD_INT 1
16697: PPUSH
16698: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16702: LD_INT 1
16704: PPUSH
16705: LD_VAR 0 3
16709: PPUSH
16710: LD_INT 1
16712: PPUSH
16713: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16717: LD_INT 2
16719: PPUSH
16720: LD_VAR 0 3
16724: PPUSH
16725: LD_INT 1
16727: PPUSH
16728: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16732: LD_INT 11
16734: PPUSH
16735: LD_VAR 0 3
16739: PPUSH
16740: LD_INT 1
16742: PPUSH
16743: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16747: LD_INT 20
16749: PPUSH
16750: LD_VAR 0 3
16754: PPUSH
16755: LD_INT 1
16757: PPUSH
16758: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16762: LD_INT 48
16764: PPUSH
16765: LD_VAR 0 3
16769: PPUSH
16770: LD_INT 1
16772: PPUSH
16773: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16777: LD_INT 49
16779: PPUSH
16780: LD_VAR 0 3
16784: PPUSH
16785: LD_INT 1
16787: PPUSH
16788: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16792: LD_INT 69
16794: PPUSH
16795: LD_VAR 0 3
16799: PPUSH
16800: LD_INT 1
16802: PPUSH
16803: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16807: LD_INT 39
16809: PPUSH
16810: LD_VAR 0 3
16814: PPUSH
16815: LD_INT 1
16817: PPUSH
16818: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16822: LD_INT 34
16824: PPUSH
16825: LD_VAR 0 3
16829: PPUSH
16830: LD_INT 1
16832: PPUSH
16833: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16837: LD_INT 42
16839: PPUSH
16840: LD_VAR 0 3
16844: PPUSH
16845: LD_INT 1
16847: PPUSH
16848: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16852: LD_INT 44
16854: PPUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: LD_INT 1
16862: PPUSH
16863: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16867: LD_INT 41
16869: PPUSH
16870: LD_VAR 0 3
16874: PPUSH
16875: LD_INT 1
16877: PPUSH
16878: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16882: LD_INT 43
16884: PPUSH
16885: LD_VAR 0 3
16889: PPUSH
16890: LD_INT 1
16892: PPUSH
16893: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16897: LD_INT 70
16899: PPUSH
16900: LD_VAR 0 3
16904: PPUSH
16905: LD_INT 1
16907: PPUSH
16908: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16912: LD_INT 51
16914: PPUSH
16915: LD_VAR 0 3
16919: PPUSH
16920: LD_INT 1
16922: PPUSH
16923: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16927: LD_INT 52
16929: PPUSH
16930: LD_VAR 0 3
16934: PPUSH
16935: LD_INT 1
16937: PPUSH
16938: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16942: LD_INT 6
16944: PPUSH
16945: LD_VAR 0 3
16949: PPUSH
16950: LD_INT 1
16952: PPUSH
16953: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16957: LD_INT 15
16959: PPUSH
16960: LD_VAR 0 3
16964: PPUSH
16965: LD_INT 1
16967: PPUSH
16968: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16972: LD_INT 7
16974: PPUSH
16975: LD_VAR 0 3
16979: PPUSH
16980: LD_INT 1
16982: PPUSH
16983: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16987: LD_INT 12
16989: PPUSH
16990: LD_VAR 0 3
16994: PPUSH
16995: LD_INT 1
16997: PPUSH
16998: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17002: LD_INT 18
17004: PPUSH
17005: LD_VAR 0 3
17009: PPUSH
17010: LD_INT 1
17012: PPUSH
17013: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17017: LD_INT 60
17019: PPUSH
17020: LD_VAR 0 3
17024: PPUSH
17025: LD_INT 1
17027: PPUSH
17028: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17032: LD_INT 9
17034: PPUSH
17035: LD_VAR 0 3
17039: PPUSH
17040: LD_INT 1
17042: PPUSH
17043: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17047: LD_INT 30
17049: PPUSH
17050: LD_VAR 0 3
17054: PPUSH
17055: LD_INT 1
17057: PPUSH
17058: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17062: LD_INT 37
17064: PPUSH
17065: LD_VAR 0 3
17069: PPUSH
17070: LD_INT 1
17072: PPUSH
17073: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17077: LD_INT 5
17079: PPUSH
17080: LD_VAR 0 3
17084: PPUSH
17085: LD_INT 1
17087: PPUSH
17088: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17092: LD_INT 66
17094: PPUSH
17095: LD_VAR 0 3
17099: PPUSH
17100: LD_INT 1
17102: PPUSH
17103: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17107: LD_INT 21
17109: PPUSH
17110: LD_VAR 0 3
17114: PPUSH
17115: LD_INT 1
17117: PPUSH
17118: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17122: LD_INT 22
17124: PPUSH
17125: LD_VAR 0 3
17129: PPUSH
17130: LD_INT 1
17132: PPUSH
17133: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17137: LD_INT 54
17139: PPUSH
17140: LD_VAR 0 3
17144: PPUSH
17145: LD_INT 1
17147: PPUSH
17148: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17152: LD_INT 0
17154: PPUSH
17155: LD_VAR 0 3
17159: PPUSH
17160: LD_INT 1
17162: PPUSH
17163: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17167: LD_INT 1
17169: PPUSH
17170: LD_VAR 0 3
17174: PPUSH
17175: LD_INT 1
17177: PPUSH
17178: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17182: LD_INT 2
17184: PPUSH
17185: LD_VAR 0 3
17189: PPUSH
17190: LD_INT 1
17192: PPUSH
17193: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17197: LD_INT 3
17199: PPUSH
17200: LD_VAR 0 3
17204: PPUSH
17205: LD_INT 1
17207: PPUSH
17208: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17212: LD_INT 4
17214: PPUSH
17215: LD_VAR 0 3
17219: PPUSH
17220: LD_INT 1
17222: PPUSH
17223: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17227: LD_INT 5
17229: PPUSH
17230: LD_VAR 0 3
17234: PPUSH
17235: LD_INT 1
17237: PPUSH
17238: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17242: LD_INT 6
17244: PPUSH
17245: LD_VAR 0 3
17249: PPUSH
17250: LD_INT 1
17252: PPUSH
17253: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17257: LD_INT 7
17259: PPUSH
17260: LD_VAR 0 3
17264: PPUSH
17265: LD_INT 1
17267: PPUSH
17268: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17272: LD_INT 8
17274: PPUSH
17275: LD_VAR 0 3
17279: PPUSH
17280: LD_INT 1
17282: PPUSH
17283: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17287: LD_INT 10
17289: PPUSH
17290: LD_VAR 0 3
17294: PPUSH
17295: LD_INT 1
17297: PPUSH
17298: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17302: LD_INT 11
17304: PPUSH
17305: LD_VAR 0 3
17309: PPUSH
17310: LD_INT 1
17312: PPUSH
17313: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17317: LD_INT 12
17319: PPUSH
17320: LD_VAR 0 3
17324: PPUSH
17325: LD_INT 1
17327: PPUSH
17328: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17332: LD_INT 13
17334: PPUSH
17335: LD_VAR 0 3
17339: PPUSH
17340: LD_INT 1
17342: PPUSH
17343: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17347: LD_INT 14
17349: PPUSH
17350: LD_VAR 0 3
17354: PPUSH
17355: LD_INT 1
17357: PPUSH
17358: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17362: LD_INT 15
17364: PPUSH
17365: LD_VAR 0 3
17369: PPUSH
17370: LD_INT 1
17372: PPUSH
17373: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17377: LD_INT 16
17379: PPUSH
17380: LD_VAR 0 3
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17392: LD_INT 17
17394: PPUSH
17395: LD_VAR 0 3
17399: PPUSH
17400: LD_INT 1
17402: PPUSH
17403: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17407: LD_INT 19
17409: PPUSH
17410: LD_VAR 0 3
17414: PPUSH
17415: LD_INT 1
17417: PPUSH
17418: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17422: LD_INT 20
17424: PPUSH
17425: LD_VAR 0 3
17429: PPUSH
17430: LD_INT 1
17432: PPUSH
17433: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17437: LD_INT 21
17439: PPUSH
17440: LD_VAR 0 3
17444: PPUSH
17445: LD_INT 1
17447: PPUSH
17448: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17452: LD_INT 23
17454: PPUSH
17455: LD_VAR 0 3
17459: PPUSH
17460: LD_INT 1
17462: PPUSH
17463: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17467: LD_INT 26
17469: PPUSH
17470: LD_VAR 0 3
17474: PPUSH
17475: LD_INT 1
17477: PPUSH
17478: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17482: LD_INT 27
17484: PPUSH
17485: LD_VAR 0 3
17489: PPUSH
17490: LD_INT 1
17492: PPUSH
17493: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17497: LD_INT 28
17499: PPUSH
17500: LD_VAR 0 3
17504: PPUSH
17505: LD_INT 1
17507: PPUSH
17508: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17512: LD_INT 29
17514: PPUSH
17515: LD_VAR 0 3
17519: PPUSH
17520: LD_INT 1
17522: PPUSH
17523: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17527: LD_INT 30
17529: PPUSH
17530: LD_VAR 0 3
17534: PPUSH
17535: LD_INT 1
17537: PPUSH
17538: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17542: LD_INT 31
17544: PPUSH
17545: LD_VAR 0 3
17549: PPUSH
17550: LD_INT 1
17552: PPUSH
17553: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17557: LD_INT 32
17559: PPUSH
17560: LD_VAR 0 3
17564: PPUSH
17565: LD_INT 1
17567: PPUSH
17568: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17572: LD_INT 36
17574: PPUSH
17575: LD_VAR 0 3
17579: PPUSH
17580: LD_INT 1
17582: PPUSH
17583: CALL_OW 324
// end ; 5 :
17587: GO 19718
17589: LD_INT 5
17591: DOUBLE
17592: EQUAL
17593: IFTRUE 17597
17595: GO 18710
17597: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17598: LD_INT 35
17600: PPUSH
17601: LD_VAR 0 3
17605: PPUSH
17606: LD_INT 1
17608: PPUSH
17609: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17613: LD_INT 45
17615: PPUSH
17616: LD_VAR 0 3
17620: PPUSH
17621: LD_INT 1
17623: PPUSH
17624: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17628: LD_INT 46
17630: PPUSH
17631: LD_VAR 0 3
17635: PPUSH
17636: LD_INT 1
17638: PPUSH
17639: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17643: LD_INT 47
17645: PPUSH
17646: LD_VAR 0 3
17650: PPUSH
17651: LD_INT 1
17653: PPUSH
17654: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17658: LD_INT 1
17660: PPUSH
17661: LD_VAR 0 3
17665: PPUSH
17666: LD_INT 1
17668: PPUSH
17669: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17673: LD_INT 2
17675: PPUSH
17676: LD_VAR 0 3
17680: PPUSH
17681: LD_INT 1
17683: PPUSH
17684: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17688: LD_INT 11
17690: PPUSH
17691: LD_VAR 0 3
17695: PPUSH
17696: LD_INT 1
17698: PPUSH
17699: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17703: LD_INT 20
17705: PPUSH
17706: LD_VAR 0 3
17710: PPUSH
17711: LD_INT 1
17713: PPUSH
17714: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17718: LD_INT 48
17720: PPUSH
17721: LD_VAR 0 3
17725: PPUSH
17726: LD_INT 1
17728: PPUSH
17729: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17733: LD_INT 49
17735: PPUSH
17736: LD_VAR 0 3
17740: PPUSH
17741: LD_INT 1
17743: PPUSH
17744: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17748: LD_INT 69
17750: PPUSH
17751: LD_VAR 0 3
17755: PPUSH
17756: LD_INT 1
17758: PPUSH
17759: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17763: LD_INT 39
17765: PPUSH
17766: LD_VAR 0 3
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17778: LD_INT 34
17780: PPUSH
17781: LD_VAR 0 3
17785: PPUSH
17786: LD_INT 1
17788: PPUSH
17789: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17793: LD_INT 42
17795: PPUSH
17796: LD_VAR 0 3
17800: PPUSH
17801: LD_INT 1
17803: PPUSH
17804: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17808: LD_INT 44
17810: PPUSH
17811: LD_VAR 0 3
17815: PPUSH
17816: LD_INT 1
17818: PPUSH
17819: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17823: LD_INT 41
17825: PPUSH
17826: LD_VAR 0 3
17830: PPUSH
17831: LD_INT 1
17833: PPUSH
17834: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17838: LD_INT 40
17840: PPUSH
17841: LD_VAR 0 3
17845: PPUSH
17846: LD_INT 1
17848: PPUSH
17849: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17853: LD_INT 43
17855: PPUSH
17856: LD_VAR 0 3
17860: PPUSH
17861: LD_INT 1
17863: PPUSH
17864: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17868: LD_INT 70
17870: PPUSH
17871: LD_VAR 0 3
17875: PPUSH
17876: LD_INT 1
17878: PPUSH
17879: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17883: LD_INT 51
17885: PPUSH
17886: LD_VAR 0 3
17890: PPUSH
17891: LD_INT 1
17893: PPUSH
17894: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17898: LD_INT 52
17900: PPUSH
17901: LD_VAR 0 3
17905: PPUSH
17906: LD_INT 1
17908: PPUSH
17909: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17913: LD_INT 6
17915: PPUSH
17916: LD_VAR 0 3
17920: PPUSH
17921: LD_INT 1
17923: PPUSH
17924: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17928: LD_INT 15
17930: PPUSH
17931: LD_VAR 0 3
17935: PPUSH
17936: LD_INT 1
17938: PPUSH
17939: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17943: LD_INT 7
17945: PPUSH
17946: LD_VAR 0 3
17950: PPUSH
17951: LD_INT 1
17953: PPUSH
17954: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17958: LD_INT 12
17960: PPUSH
17961: LD_VAR 0 3
17965: PPUSH
17966: LD_INT 1
17968: PPUSH
17969: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17973: LD_INT 17
17975: PPUSH
17976: LD_VAR 0 3
17980: PPUSH
17981: LD_INT 1
17983: PPUSH
17984: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17988: LD_INT 18
17990: PPUSH
17991: LD_VAR 0 3
17995: PPUSH
17996: LD_INT 1
17998: PPUSH
17999: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18003: LD_INT 60
18005: PPUSH
18006: LD_VAR 0 3
18010: PPUSH
18011: LD_INT 1
18013: PPUSH
18014: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18018: LD_INT 32
18020: PPUSH
18021: LD_VAR 0 3
18025: PPUSH
18026: LD_INT 1
18028: PPUSH
18029: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18033: LD_INT 9
18035: PPUSH
18036: LD_VAR 0 3
18040: PPUSH
18041: LD_INT 1
18043: PPUSH
18044: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18048: LD_INT 57
18050: PPUSH
18051: LD_VAR 0 3
18055: PPUSH
18056: LD_INT 1
18058: PPUSH
18059: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18063: LD_INT 30
18065: PPUSH
18066: LD_VAR 0 3
18070: PPUSH
18071: LD_INT 1
18073: PPUSH
18074: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18078: LD_INT 37
18080: PPUSH
18081: LD_VAR 0 3
18085: PPUSH
18086: LD_INT 1
18088: PPUSH
18089: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18093: LD_INT 63
18095: PPUSH
18096: LD_VAR 0 3
18100: PPUSH
18101: LD_INT 1
18103: PPUSH
18104: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18108: LD_INT 3
18110: PPUSH
18111: LD_VAR 0 3
18115: PPUSH
18116: LD_INT 1
18118: PPUSH
18119: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18123: LD_INT 4
18125: PPUSH
18126: LD_VAR 0 3
18130: PPUSH
18131: LD_INT 1
18133: PPUSH
18134: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18138: LD_INT 5
18140: PPUSH
18141: LD_VAR 0 3
18145: PPUSH
18146: LD_INT 1
18148: PPUSH
18149: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18153: LD_INT 66
18155: PPUSH
18156: LD_VAR 0 3
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18168: LD_INT 21
18170: PPUSH
18171: LD_VAR 0 3
18175: PPUSH
18176: LD_INT 1
18178: PPUSH
18179: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18183: LD_INT 22
18185: PPUSH
18186: LD_VAR 0 3
18190: PPUSH
18191: LD_INT 1
18193: PPUSH
18194: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18198: LD_INT 19
18200: PPUSH
18201: LD_VAR 0 3
18205: PPUSH
18206: LD_INT 1
18208: PPUSH
18209: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18213: LD_INT 54
18215: PPUSH
18216: LD_VAR 0 3
18220: PPUSH
18221: LD_INT 1
18223: PPUSH
18224: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18228: LD_INT 55
18230: PPUSH
18231: LD_VAR 0 3
18235: PPUSH
18236: LD_INT 1
18238: PPUSH
18239: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18243: LD_INT 0
18245: PPUSH
18246: LD_VAR 0 3
18250: PPUSH
18251: LD_INT 1
18253: PPUSH
18254: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18258: LD_INT 1
18260: PPUSH
18261: LD_VAR 0 3
18265: PPUSH
18266: LD_INT 1
18268: PPUSH
18269: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18273: LD_INT 2
18275: PPUSH
18276: LD_VAR 0 3
18280: PPUSH
18281: LD_INT 1
18283: PPUSH
18284: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18288: LD_INT 3
18290: PPUSH
18291: LD_VAR 0 3
18295: PPUSH
18296: LD_INT 1
18298: PPUSH
18299: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18303: LD_INT 4
18305: PPUSH
18306: LD_VAR 0 3
18310: PPUSH
18311: LD_INT 1
18313: PPUSH
18314: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18318: LD_INT 5
18320: PPUSH
18321: LD_VAR 0 3
18325: PPUSH
18326: LD_INT 1
18328: PPUSH
18329: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18333: LD_INT 6
18335: PPUSH
18336: LD_VAR 0 3
18340: PPUSH
18341: LD_INT 1
18343: PPUSH
18344: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18348: LD_INT 7
18350: PPUSH
18351: LD_VAR 0 3
18355: PPUSH
18356: LD_INT 1
18358: PPUSH
18359: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18363: LD_INT 8
18365: PPUSH
18366: LD_VAR 0 3
18370: PPUSH
18371: LD_INT 1
18373: PPUSH
18374: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18378: LD_INT 10
18380: PPUSH
18381: LD_VAR 0 3
18385: PPUSH
18386: LD_INT 1
18388: PPUSH
18389: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18393: LD_INT 11
18395: PPUSH
18396: LD_VAR 0 3
18400: PPUSH
18401: LD_INT 1
18403: PPUSH
18404: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18408: LD_INT 12
18410: PPUSH
18411: LD_VAR 0 3
18415: PPUSH
18416: LD_INT 1
18418: PPUSH
18419: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18423: LD_INT 13
18425: PPUSH
18426: LD_VAR 0 3
18430: PPUSH
18431: LD_INT 1
18433: PPUSH
18434: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18438: LD_INT 14
18440: PPUSH
18441: LD_VAR 0 3
18445: PPUSH
18446: LD_INT 1
18448: PPUSH
18449: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18453: LD_INT 15
18455: PPUSH
18456: LD_VAR 0 3
18460: PPUSH
18461: LD_INT 1
18463: PPUSH
18464: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18468: LD_INT 16
18470: PPUSH
18471: LD_VAR 0 3
18475: PPUSH
18476: LD_INT 1
18478: PPUSH
18479: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18483: LD_INT 17
18485: PPUSH
18486: LD_VAR 0 3
18490: PPUSH
18491: LD_INT 1
18493: PPUSH
18494: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18498: LD_INT 18
18500: PPUSH
18501: LD_VAR 0 3
18505: PPUSH
18506: LD_INT 1
18508: PPUSH
18509: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18513: LD_INT 19
18515: PPUSH
18516: LD_VAR 0 3
18520: PPUSH
18521: LD_INT 1
18523: PPUSH
18524: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18528: LD_INT 20
18530: PPUSH
18531: LD_VAR 0 3
18535: PPUSH
18536: LD_INT 1
18538: PPUSH
18539: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18543: LD_INT 21
18545: PPUSH
18546: LD_VAR 0 3
18550: PPUSH
18551: LD_INT 1
18553: PPUSH
18554: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18558: LD_INT 23
18560: PPUSH
18561: LD_VAR 0 3
18565: PPUSH
18566: LD_INT 1
18568: PPUSH
18569: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18573: LD_INT 26
18575: PPUSH
18576: LD_VAR 0 3
18580: PPUSH
18581: LD_INT 1
18583: PPUSH
18584: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18588: LD_INT 27
18590: PPUSH
18591: LD_VAR 0 3
18595: PPUSH
18596: LD_INT 1
18598: PPUSH
18599: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18603: LD_INT 28
18605: PPUSH
18606: LD_VAR 0 3
18610: PPUSH
18611: LD_INT 1
18613: PPUSH
18614: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18618: LD_INT 29
18620: PPUSH
18621: LD_VAR 0 3
18625: PPUSH
18626: LD_INT 1
18628: PPUSH
18629: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18633: LD_INT 30
18635: PPUSH
18636: LD_VAR 0 3
18640: PPUSH
18641: LD_INT 1
18643: PPUSH
18644: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18648: LD_INT 31
18650: PPUSH
18651: LD_VAR 0 3
18655: PPUSH
18656: LD_INT 1
18658: PPUSH
18659: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18663: LD_INT 32
18665: PPUSH
18666: LD_VAR 0 3
18670: PPUSH
18671: LD_INT 1
18673: PPUSH
18674: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18678: LD_INT 33
18680: PPUSH
18681: LD_VAR 0 3
18685: PPUSH
18686: LD_INT 1
18688: PPUSH
18689: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18693: LD_INT 36
18695: PPUSH
18696: LD_VAR 0 3
18700: PPUSH
18701: LD_INT 1
18703: PPUSH
18704: CALL_OW 324
// end ; 6 :
18708: GO 19718
18710: LD_INT 6
18712: DOUBLE
18713: EQUAL
18714: IFTRUE 18718
18716: GO 19643
18718: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18719: LD_INT 35
18721: PPUSH
18722: LD_VAR 0 3
18726: PPUSH
18727: LD_INT 1
18729: PPUSH
18730: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18734: LD_INT 45
18736: PPUSH
18737: LD_VAR 0 3
18741: PPUSH
18742: LD_INT 1
18744: PPUSH
18745: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18749: LD_INT 46
18751: PPUSH
18752: LD_VAR 0 3
18756: PPUSH
18757: LD_INT 1
18759: PPUSH
18760: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18764: LD_INT 47
18766: PPUSH
18767: LD_VAR 0 3
18771: PPUSH
18772: LD_INT 1
18774: PPUSH
18775: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18779: LD_INT 1
18781: PPUSH
18782: LD_VAR 0 3
18786: PPUSH
18787: LD_INT 1
18789: PPUSH
18790: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18794: LD_INT 2
18796: PPUSH
18797: LD_VAR 0 3
18801: PPUSH
18802: LD_INT 1
18804: PPUSH
18805: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18809: LD_INT 11
18811: PPUSH
18812: LD_VAR 0 3
18816: PPUSH
18817: LD_INT 1
18819: PPUSH
18820: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18824: LD_INT 20
18826: PPUSH
18827: LD_VAR 0 3
18831: PPUSH
18832: LD_INT 1
18834: PPUSH
18835: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18839: LD_INT 48
18841: PPUSH
18842: LD_VAR 0 3
18846: PPUSH
18847: LD_INT 1
18849: PPUSH
18850: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18854: LD_INT 49
18856: PPUSH
18857: LD_VAR 0 3
18861: PPUSH
18862: LD_INT 1
18864: PPUSH
18865: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18869: LD_INT 50
18871: PPUSH
18872: LD_VAR 0 3
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18884: LD_INT 69
18886: PPUSH
18887: LD_VAR 0 3
18891: PPUSH
18892: LD_INT 1
18894: PPUSH
18895: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18899: LD_INT 39
18901: PPUSH
18902: LD_VAR 0 3
18906: PPUSH
18907: LD_INT 1
18909: PPUSH
18910: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18914: LD_INT 34
18916: PPUSH
18917: LD_VAR 0 3
18921: PPUSH
18922: LD_INT 1
18924: PPUSH
18925: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18929: LD_INT 42
18931: PPUSH
18932: LD_VAR 0 3
18936: PPUSH
18937: LD_INT 1
18939: PPUSH
18940: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18944: LD_INT 44
18946: PPUSH
18947: LD_VAR 0 3
18951: PPUSH
18952: LD_INT 1
18954: PPUSH
18955: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18959: LD_INT 41
18961: PPUSH
18962: LD_VAR 0 3
18966: PPUSH
18967: LD_INT 1
18969: PPUSH
18970: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18974: LD_INT 13
18976: PPUSH
18977: LD_VAR 0 3
18981: PPUSH
18982: LD_INT 1
18984: PPUSH
18985: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18989: LD_INT 40
18991: PPUSH
18992: LD_VAR 0 3
18996: PPUSH
18997: LD_INT 1
18999: PPUSH
19000: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19004: LD_INT 43
19006: PPUSH
19007: LD_VAR 0 3
19011: PPUSH
19012: LD_INT 1
19014: PPUSH
19015: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19019: LD_INT 70
19021: PPUSH
19022: LD_VAR 0 3
19026: PPUSH
19027: LD_INT 1
19029: PPUSH
19030: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
19034: LD_INT 23
19036: PPUSH
19037: LD_VAR 0 3
19041: PPUSH
19042: LD_INT 1
19044: PPUSH
19045: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19049: LD_INT 51
19051: PPUSH
19052: LD_VAR 0 3
19056: PPUSH
19057: LD_INT 1
19059: PPUSH
19060: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19064: LD_INT 52
19066: PPUSH
19067: LD_VAR 0 3
19071: PPUSH
19072: LD_INT 1
19074: PPUSH
19075: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19079: LD_INT 6
19081: PPUSH
19082: LD_VAR 0 3
19086: PPUSH
19087: LD_INT 1
19089: PPUSH
19090: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19094: LD_INT 15
19096: PPUSH
19097: LD_VAR 0 3
19101: PPUSH
19102: LD_INT 1
19104: PPUSH
19105: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19109: LD_INT 7
19111: PPUSH
19112: LD_VAR 0 3
19116: PPUSH
19117: LD_INT 1
19119: PPUSH
19120: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19124: LD_INT 12
19126: PPUSH
19127: LD_VAR 0 3
19131: PPUSH
19132: LD_INT 1
19134: PPUSH
19135: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19139: LD_INT 10
19141: PPUSH
19142: LD_VAR 0 3
19146: PPUSH
19147: LD_INT 1
19149: PPUSH
19150: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19154: LD_INT 17
19156: PPUSH
19157: LD_VAR 0 3
19161: PPUSH
19162: LD_INT 1
19164: PPUSH
19165: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19169: LD_INT 18
19171: PPUSH
19172: LD_VAR 0 3
19176: PPUSH
19177: LD_INT 1
19179: PPUSH
19180: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19184: LD_INT 60
19186: PPUSH
19187: LD_VAR 0 3
19191: PPUSH
19192: LD_INT 1
19194: PPUSH
19195: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19199: LD_INT 61
19201: PPUSH
19202: LD_VAR 0 3
19206: PPUSH
19207: LD_INT 1
19209: PPUSH
19210: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19214: LD_INT 32
19216: PPUSH
19217: LD_VAR 0 3
19221: PPUSH
19222: LD_INT 1
19224: PPUSH
19225: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19229: LD_INT 27
19231: PPUSH
19232: LD_VAR 0 3
19236: PPUSH
19237: LD_INT 1
19239: PPUSH
19240: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19244: LD_INT 36
19246: PPUSH
19247: LD_VAR 0 3
19251: PPUSH
19252: LD_INT 1
19254: PPUSH
19255: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19259: LD_INT 33
19261: PPUSH
19262: LD_VAR 0 3
19266: PPUSH
19267: LD_INT 1
19269: PPUSH
19270: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19274: LD_INT 9
19276: PPUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: LD_INT 1
19284: PPUSH
19285: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19289: LD_INT 38
19291: PPUSH
19292: LD_VAR 0 3
19296: PPUSH
19297: LD_INT 1
19299: PPUSH
19300: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19304: LD_INT 57
19306: PPUSH
19307: LD_VAR 0 3
19311: PPUSH
19312: LD_INT 1
19314: PPUSH
19315: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19319: LD_INT 58
19321: PPUSH
19322: LD_VAR 0 3
19326: PPUSH
19327: LD_INT 1
19329: PPUSH
19330: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19334: LD_INT 28
19336: PPUSH
19337: LD_VAR 0 3
19341: PPUSH
19342: LD_INT 1
19344: PPUSH
19345: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19349: LD_INT 29
19351: PPUSH
19352: LD_VAR 0 3
19356: PPUSH
19357: LD_INT 1
19359: PPUSH
19360: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19364: LD_INT 30
19366: PPUSH
19367: LD_VAR 0 3
19371: PPUSH
19372: LD_INT 1
19374: PPUSH
19375: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19379: LD_INT 37
19381: PPUSH
19382: LD_VAR 0 3
19386: PPUSH
19387: LD_INT 1
19389: PPUSH
19390: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19394: LD_INT 63
19396: PPUSH
19397: LD_VAR 0 3
19401: PPUSH
19402: LD_INT 1
19404: PPUSH
19405: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19409: LD_INT 64
19411: PPUSH
19412: LD_VAR 0 3
19416: PPUSH
19417: LD_INT 1
19419: PPUSH
19420: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19424: LD_INT 3
19426: PPUSH
19427: LD_VAR 0 3
19431: PPUSH
19432: LD_INT 1
19434: PPUSH
19435: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19439: LD_INT 4
19441: PPUSH
19442: LD_VAR 0 3
19446: PPUSH
19447: LD_INT 1
19449: PPUSH
19450: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19454: LD_INT 5
19456: PPUSH
19457: LD_VAR 0 3
19461: PPUSH
19462: LD_INT 1
19464: PPUSH
19465: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19469: LD_INT 8
19471: PPUSH
19472: LD_VAR 0 3
19476: PPUSH
19477: LD_INT 1
19479: PPUSH
19480: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19484: LD_INT 66
19486: PPUSH
19487: LD_VAR 0 3
19491: PPUSH
19492: LD_INT 1
19494: PPUSH
19495: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19499: LD_INT 67
19501: PPUSH
19502: LD_VAR 0 3
19506: PPUSH
19507: LD_INT 1
19509: PPUSH
19510: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19514: LD_INT 21
19516: PPUSH
19517: LD_VAR 0 3
19521: PPUSH
19522: LD_INT 1
19524: PPUSH
19525: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19529: LD_INT 22
19531: PPUSH
19532: LD_VAR 0 3
19536: PPUSH
19537: LD_INT 1
19539: PPUSH
19540: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19544: LD_INT 19
19546: PPUSH
19547: LD_VAR 0 3
19551: PPUSH
19552: LD_INT 1
19554: PPUSH
19555: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19559: LD_INT 26
19561: PPUSH
19562: LD_VAR 0 3
19566: PPUSH
19567: LD_INT 1
19569: PPUSH
19570: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19574: LD_INT 54
19576: PPUSH
19577: LD_VAR 0 3
19581: PPUSH
19582: LD_INT 1
19584: PPUSH
19585: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19589: LD_INT 55
19591: PPUSH
19592: LD_VAR 0 3
19596: PPUSH
19597: LD_INT 1
19599: PPUSH
19600: CALL_OW 322
// for i = 0 to 39 do
19604: LD_ADDR_VAR 0 4
19608: PUSH
19609: DOUBLE
19610: LD_INT 0
19612: DEC
19613: ST_TO_ADDR
19614: LD_INT 39
19616: PUSH
19617: FOR_TO
19618: IFFALSE 19639
// SetRestrict ( i , side , true ) ;
19620: LD_VAR 0 4
19624: PPUSH
19625: LD_VAR 0 3
19629: PPUSH
19630: LD_INT 1
19632: PPUSH
19633: CALL_OW 324
19637: GO 19617
19639: POP
19640: POP
// end ; else
19641: GO 19718
19643: POP
// begin for i = 1 to 73 do
19644: LD_ADDR_VAR 0 4
19648: PUSH
19649: DOUBLE
19650: LD_INT 1
19652: DEC
19653: ST_TO_ADDR
19654: LD_INT 73
19656: PUSH
19657: FOR_TO
19658: IFFALSE 19679
// SetTech ( i , side , state_enabled ) ;
19660: LD_VAR 0 4
19664: PPUSH
19665: LD_VAR 0 3
19669: PPUSH
19670: LD_INT 1
19672: PPUSH
19673: CALL_OW 322
19677: GO 19657
19679: POP
19680: POP
// for i = 0 to 39 do
19681: LD_ADDR_VAR 0 4
19685: PUSH
19686: DOUBLE
19687: LD_INT 0
19689: DEC
19690: ST_TO_ADDR
19691: LD_INT 39
19693: PUSH
19694: FOR_TO
19695: IFFALSE 19716
// SetRestrict ( i , side , true ) ;
19697: LD_VAR 0 4
19701: PPUSH
19702: LD_VAR 0 3
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: CALL_OW 324
19714: GO 19694
19716: POP
19717: POP
// end ; end ; end ;
19718: GO 15723
19720: POP
19721: POP
// end ;
19722: LD_VAR 0 2
19726: RET
