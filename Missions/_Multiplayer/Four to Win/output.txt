// export def_public_score , def_amount_score ; export is_depot , number_of_breastworks , number_of_people , amount_of_apemen , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , amount_score , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , king_territory , final_count , Player_Side , player_team ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if MultiPlayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type = mp_game_type ;
  79: LD_ADDR_EXP 41
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side = mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  99: LD_ADDR_EXP 21
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 109: LD_ADDR_EXP 18
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 119: LD_ADDR_EXP 22
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 20
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams = mp_teams ;
 139: LD_ADDR_EXP 19
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 352
// begin Game_Type = 3 ;
 151: LD_ADDR_EXP 41
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side = 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 21
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 18
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 22
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 20
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 323: LD_ADDR_EXP 19
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: ST_TO_ADDR
// end ; for i := 1 to 8 do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_INT 8
 364: PUSH
 365: FOR_TO
 366: IFFALSE 453
// if Multiplayer_GetPlayerIsSpec ( i ) then
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 530
 377: IFFALSE 451
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 379: LD_ADDR_EXP 21
 383: PUSH
 384: LD_EXP 21
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_INT 0
 396: PPUSH
 397: CALL_OW 1
 401: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 402: LD_ADDR_EXP 19
 406: PUSH
 407: LD_EXP 19
 411: PPUSH
 412: LD_EXP 18
 416: PUSH
 417: LD_VAR 0 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 19
 427: PUSH
 428: LD_EXP 18
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: ARRAY
 439: PUSH
 440: LD_VAR 0 2
 444: DIFF
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// end ;
 451: GO 365
 453: POP
 454: POP
// if MultiPlayer then
 455: LD_OWVAR 4
 459: IFFALSE 666
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 461: LD_ADDR_EXP 43
 465: PUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 474: LD_ADDR_EXP 44
 478: PUSH
 479: LD_INT 1
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 487: LD_ADDR_EXP 45
 491: PUSH
 492: LD_INT 2
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 500: LD_ADDR_EXP 46
 504: PUSH
 505: LD_INT 3
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 513: LD_ADDR_EXP 47
 517: PUSH
 518: LD_INT 4
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 526: LD_ADDR_EXP 48
 530: PUSH
 531: LD_INT 5
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 539: LD_ADDR_EXP 50
 543: PUSH
 544: LD_INT 10
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 552: LD_ADDR_EXP 51
 556: PUSH
 557: LD_INT 11
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 565: LD_ADDR_EXP 52
 569: PUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 13 ) ;
 578: LD_ADDR_EXP 53
 582: PUSH
 583: LD_INT 13
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 14 ) ;
 591: LD_ADDR_EXP 54
 595: PUSH
 596: LD_INT 14
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 604: LD_ADDR_EXP 55
 608: PUSH
 609: LD_INT 15
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_public_score = GetMultiplayerSetting ( 16 ) ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 16
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_amount_score = GetMultiplayerSetting ( 17 ) ;
 630: LD_ADDR_EXP 2
 634: PUSH
 635: LD_INT 17
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 643: LD_ADDR_VAR 0 3
 647: PUSH
 648: LD_INT 22
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// def_win_rules = 0 ;
 656: LD_ADDR_EXP 17
 660: PUSH
 661: LD_INT 0
 663: ST_TO_ADDR
// end else
 664: GO 798
// begin randomize ;
 666: CALL_OW 10
// def_base_level = 3 ;
 670: LD_ADDR_EXP 43
 674: PUSH
 675: LD_INT 3
 677: ST_TO_ADDR
// def_amount_of_people = 1 ;
 678: LD_ADDR_EXP 44
 682: PUSH
 683: LD_INT 1
 685: ST_TO_ADDR
// def_skill_level = 1 ;
 686: LD_ADDR_EXP 45
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// def_starting_resources = 2 ;
 694: LD_ADDR_EXP 46
 698: PUSH
 699: LD_INT 2
 701: ST_TO_ADDR
// def_shipments_density = 1 ;
 702: LD_ADDR_EXP 47
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
 710: LD_ADDR_EXP 48
 714: PUSH
 715: LD_INT 0
 717: ST_TO_ADDR
// def_shared_vision = 1 ;
 718: LD_ADDR_EXP 50
 722: PUSH
 723: LD_INT 1
 725: ST_TO_ADDR
// def_morale_flags = 1 ;
 726: LD_ADDR_EXP 51
 730: PUSH
 731: LD_INT 1
 733: ST_TO_ADDR
// def_siberite_detection = 1 ;
 734: LD_ADDR_EXP 52
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 742: LD_ADDR_EXP 54
 746: PUSH
 747: LD_INT 3
 749: ST_TO_ADDR
// def_people_respawning = 2 ;
 750: LD_ADDR_EXP 53
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 758: LD_ADDR_EXP 55
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_public_score = 1 ;
 766: LD_ADDR_EXP 1
 770: PUSH
 771: LD_INT 1
 773: ST_TO_ADDR
// def_amount_score = 0 ;
 774: LD_ADDR_EXP 2
 778: PUSH
 779: LD_INT 0
 781: ST_TO_ADDR
// tech_level = 4 ;
 782: LD_ADDR_VAR 0 3
 786: PUSH
 787: LD_INT 4
 789: ST_TO_ADDR
// def_win_rules = 0 ;
 790: LD_ADDR_EXP 17
 794: PUSH
 795: LD_INT 0
 797: ST_TO_ADDR
// end ; Player_Side = Your_Side ;
 798: LD_ADDR_EXP 31
 802: PUSH
 803: LD_OWVAR 2
 807: ST_TO_ADDR
// player_team = Side_Teams [ Player_Side ] ;
 808: LD_ADDR_EXP 32
 812: PUSH
 813: LD_EXP 18
 817: PUSH
 818: LD_EXP 31
 822: ARRAY
 823: ST_TO_ADDR
// InitGameRules ;
 824: CALL 7206 0 0
// if def_game_rules = 0 then
 828: LD_EXP 42
 832: PUSH
 833: LD_INT 0
 835: EQUAL
 836: IFFALSE 863
// begin if isSGUI then
 838: LD_OWVAR 83
 842: IFFALSE 850
// setMpTechs ( ) else
 844: CALL 14916 0 0
 848: GO 863
// begin SetMpTechLevel ( tech_level + 1 ) ;
 850: LD_VAR 0 3
 854: PUSH
 855: LD_INT 1
 857: PLUS
 858: PPUSH
 859: CALL 15063 0 1
// end ; end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 863: LD_ADDR_EXP 3
 867: PUSH
 868: LD_INT 0
 870: PUSH
 871: LD_INT 1
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: PUSH
 886: LD_EXP 43
 890: PUSH
 891: LD_INT 1
 893: PLUS
 894: ARRAY
 895: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 896: LD_ADDR_EXP 4
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: LD_INT 0
 906: PUSH
 907: LD_INT 2
 909: PUSH
 910: LD_INT 4
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_EXP 43
 923: PUSH
 924: LD_INT 1
 926: PLUS
 927: ARRAY
 928: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 929: LD_ADDR_EXP 5
 933: PUSH
 934: LD_INT 9
 936: PUSH
 937: LD_INT 12
 939: PUSH
 940: LD_INT 15
 942: PUSH
 943: LD_INT 24
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_EXP 44
 956: PUSH
 957: LD_INT 1
 959: PLUS
 960: ARRAY
 961: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 962: LD_ADDR_EXP 7
 966: PUSH
 967: LD_INT 2
 969: PUSH
 970: LD_INT 3
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: LD_INT 5
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_EXP 45
 989: PUSH
 990: LD_INT 1
 992: PLUS
 993: ARRAY
 994: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 995: LD_ADDR_EXP 9
 999: PUSH
1000: LD_INT 0
1002: PUSH
1003: LD_INT 0
1005: PUSH
1006: LD_INT 0
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 30
1016: PUSH
1017: LD_INT 0
1019: PUSH
1020: LD_INT 0
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 50
1030: PUSH
1031: LD_INT 20
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 80
1044: PUSH
1045: LD_INT 40
1047: PUSH
1048: LD_INT 20
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_EXP 46
1066: PUSH
1067: LD_INT 1
1069: PLUS
1070: ARRAY
1071: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1072: LD_ADDR_EXP 8
1076: PUSH
1077: LD_INT 10
1079: PUSH
1080: EMPTY
1081: LIST
1082: PUSH
1083: LD_INT 7
1085: PUSH
1086: LD_INT 14
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 6
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 18
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 5
1109: PUSH
1110: LD_INT 10
1112: PUSH
1113: LD_INT 15
1115: PUSH
1116: LD_INT 20
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: PUSH
1131: LD_EXP 46
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: ARRAY
1140: ST_TO_ADDR
// shipments_density = [ 15 , 20 , 25 ] [ def_shipments_density + 1 ] ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_INT 15
1148: PUSH
1149: LD_INT 20
1151: PUSH
1152: LD_INT 25
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 47
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1170: LD_ADDR_EXP 6
1174: PUSH
1175: LD_INT 0
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: LD_INT 2
1183: PUSH
1184: LD_INT 3
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 54
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1203: LD_ADDR_EXP 12
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 165
1213: PUSH
1214: LD_INT 140
1216: PUSH
1217: LD_INT 115
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_EXP 54
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1236: LD_ADDR_EXP 13
1240: PUSH
1241: LD_INT 0
1243: PUSH
1244: LD_INT 8400
1246: PUSH
1247: LD_INT 1750
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_EXP 53
1259: PUSH
1260: LD_INT 1
1262: PLUS
1263: ARRAY
1264: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1265: LD_ADDR_EXP 14
1269: PUSH
1270: LD_INT 0
1272: PUSH
1273: LD_INT 21000
1275: PUSH
1276: LD_INT 4200
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: PUSH
1284: LD_EXP 53
1288: PUSH
1289: LD_INT 1
1291: PLUS
1292: ARRAY
1293: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1294: LD_ADDR_EXP 11
1298: PUSH
1299: LD_INT 1
1301: NEG
1302: PUSH
1303: LD_INT 350
1305: PUSH
1306: LD_INT 700
1308: PUSH
1309: LD_INT 1400
1311: PUSH
1312: LD_INT 0
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_EXP 51
1326: PUSH
1327: LD_INT 1
1329: PLUS
1330: ARRAY
1331: ST_TO_ADDR
// battle_flags_id = [ ] ;
1332: LD_ADDR_EXP 28
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// amount_score = [ 200 , 300 , 500 , 700 , 1000 , 1500 ] [ def_amount_score + 1 ] ;
1339: LD_ADDR_EXP 15
1343: PUSH
1344: LD_INT 200
1346: PUSH
1347: LD_INT 300
1349: PUSH
1350: LD_INT 500
1352: PUSH
1353: LD_INT 700
1355: PUSH
1356: LD_INT 1000
1358: PUSH
1359: LD_INT 1500
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1380: LD_ADDR_EXP 16
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 63000
1393: PUSH
1394: LD_INT 126000
1396: PUSH
1397: LD_INT 189000
1399: PUSH
1400: LD_INT 252000
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 55
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// if not def_builduptime then
1421: LD_EXP 56
1425: NOT
1426: IFFALSE 1431
// disable ( 600 ) ;
1428: LD_INT 600
1430: DISABLE_MARKED
// king_territory = KopecStred ;
1431: LD_ADDR_EXP 29
1435: PUSH
1436: LD_INT 2
1438: ST_TO_ADDR
// final_count = amount_score ;
1439: LD_ADDR_EXP 30
1443: PUSH
1444: LD_EXP 15
1448: ST_TO_ADDR
// end ;
1449: LD_VAR 0 1
1453: RET
// function init_map ; var i ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
// extra_oil_deposits_locations := [ [ 53 , 26 ] , [ 51 , 53 ] , [ 129 , 20 ] , [ 155 , 53 ] , [ 187 , 139 ] , [ 183 , 107 ] , [ 106 , 135 ] , [ 80 , 106 ] ] ;
1458: LD_ADDR_EXP 27
1462: PUSH
1463: LD_INT 53
1465: PUSH
1466: LD_INT 26
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 51
1475: PUSH
1476: LD_INT 53
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: PUSH
1483: LD_INT 129
1485: PUSH
1486: LD_INT 20
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 155
1495: PUSH
1496: LD_INT 53
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: PUSH
1503: LD_INT 187
1505: PUSH
1506: LD_INT 139
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PUSH
1513: LD_INT 183
1515: PUSH
1516: LD_INT 107
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 106
1525: PUSH
1526: LD_INT 135
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 80
1535: PUSH
1536: LD_INT 106
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// depot_def := [ [ 29 , 22 , 3 ] , [ 154 , 21 , 3 ] , [ 85 , 138 , 0 ] , [ 212 , 141 , 5 ] ] ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_INT 29
1560: PUSH
1561: LD_INT 22
1563: PUSH
1564: LD_INT 3
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 154
1574: PUSH
1575: LD_INT 21
1577: PUSH
1578: LD_INT 3
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 85
1588: PUSH
1589: LD_INT 138
1591: PUSH
1592: LD_INT 0
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 212
1602: PUSH
1603: LD_INT 141
1605: PUSH
1606: LD_INT 5
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: ST_TO_ADDR
// start_def := [ [ 33 , 25 ] , [ 151 , 24 ] , [ 89 , 135 ] , [ 205 , 137 ] ] ;
1620: LD_ADDR_EXP 26
1624: PUSH
1625: LD_INT 33
1627: PUSH
1628: LD_INT 25
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 151
1637: PUSH
1638: LD_INT 24
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 89
1647: PUSH
1648: LD_INT 135
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 205
1657: PUSH
1658: LD_INT 137
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// breastworks_def := [ [ [ 46 , 13 , 4 ] , [ 43 , 39 , 4 ] , [ 47 , 25 , 5 ] , [ 45 , 44 , 5 ] ] , [ [ 129 , 12 , 0 ] , [ 153 , 34 , 1 ] , [ 139 , 24 , 0 ] , [ 158 , 41 , 0 ] ] , [ [ 84 , 121 , 4 ] , [ 109 , 143 , 4 ] , [ 87 , 126 , 4 ] , [ 111 , 148 , 4 ] ] , [ [ 194 , 146 , 2 ] , [ 195 , 121 , 1 ] , [ 193 , 135 , 2 ] , [ 192 , 116 , 2 ] ] , ] ;
1671: LD_ADDR_EXP 25
1675: PUSH
1676: LD_INT 46
1678: PUSH
1679: LD_INT 13
1681: PUSH
1682: LD_INT 4
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 43
1692: PUSH
1693: LD_INT 39
1695: PUSH
1696: LD_INT 4
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 47
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 45
1720: PUSH
1721: LD_INT 44
1723: PUSH
1724: LD_INT 5
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 129
1740: PUSH
1741: LD_INT 12
1743: PUSH
1744: LD_INT 0
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 153
1754: PUSH
1755: LD_INT 34
1757: PUSH
1758: LD_INT 1
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 139
1768: PUSH
1769: LD_INT 24
1771: PUSH
1772: LD_INT 0
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 158
1782: PUSH
1783: LD_INT 41
1785: PUSH
1786: LD_INT 0
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 84
1802: PUSH
1803: LD_INT 121
1805: PUSH
1806: LD_INT 4
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 109
1816: PUSH
1817: LD_INT 143
1819: PUSH
1820: LD_INT 4
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 87
1830: PUSH
1831: LD_INT 126
1833: PUSH
1834: LD_INT 4
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 111
1844: PUSH
1845: LD_INT 148
1847: PUSH
1848: LD_INT 4
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 194
1864: PUSH
1865: LD_INT 146
1867: PUSH
1868: LD_INT 2
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 195
1878: PUSH
1879: LD_INT 121
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 193
1892: PUSH
1893: LD_INT 135
1895: PUSH
1896: LD_INT 2
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 192
1906: PUSH
1907: LD_INT 116
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// if def_extra_oil_deposits then
1930: LD_EXP 48
1934: IFFALSE 1978
// for i in extra_oil_deposits_locations do
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_EXP 27
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1976
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1949: LD_VAR 0 2
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 2
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 2
1969: PPUSH
1970: CALL_OW 62
1974: GO 1946
1976: POP
1977: POP
// end ;
1978: LD_VAR 0 1
1982: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1983: LD_INT 0
1985: PPUSH
1986: PPUSH
1987: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1988: LD_ADDR_EXP 23
1992: PUSH
1993: LD_EXP 18
1997: PUSH
1998: LD_INT 0
2000: PUSH
2001: EMPTY
2002: LIST
2003: DIFF
2004: PUSH
2005: LD_INT 1
2007: GREATER
2008: ST_TO_ADDR
// if not Team_Game then
2009: LD_EXP 23
2013: NOT
2014: IFFALSE 2112
// begin for i = 1 to 8 do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: DOUBLE
2022: LD_INT 1
2024: DEC
2025: ST_TO_ADDR
2026: LD_INT 8
2028: PUSH
2029: FOR_TO
2030: IFFALSE 2108
// for j = 1 to 8 do
2032: LD_ADDR_VAR 0 3
2036: PUSH
2037: DOUBLE
2038: LD_INT 1
2040: DEC
2041: ST_TO_ADDR
2042: LD_INT 8
2044: PUSH
2045: FOR_TO
2046: IFFALSE 2104
// if i <> j then
2048: LD_VAR 0 2
2052: PUSH
2053: LD_VAR 0 3
2057: NONEQUAL
2058: IFFALSE 2082
// SetAttitude ( i , j , att_neutral , true ) else
2060: LD_VAR 0 2
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: LD_INT 0
2072: PPUSH
2073: LD_INT 1
2075: PPUSH
2076: CALL_OW 80
2080: GO 2102
// SetAttitude ( i , j , att_friend , true ) ;
2082: LD_VAR 0 2
2086: PPUSH
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: LD_INT 1
2097: PPUSH
2098: CALL_OW 80
2102: GO 2045
2104: POP
2105: POP
2106: GO 2029
2108: POP
2109: POP
// end else
2110: GO 2287
// begin if def_shared_vision then
2112: LD_EXP 50
2116: IFFALSE 2181
// begin for i in Teams do
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_EXP 19
2127: PUSH
2128: FOR_IN
2129: IFFALSE 2179
// for j = 2 to i do
2131: LD_ADDR_VAR 0 3
2135: PUSH
2136: DOUBLE
2137: LD_INT 2
2139: DEC
2140: ST_TO_ADDR
2141: LD_VAR 0 2
2145: PUSH
2146: FOR_TO
2147: IFFALSE 2175
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2149: LD_VAR 0 2
2153: PUSH
2154: LD_VAR 0 3
2158: ARRAY
2159: PPUSH
2160: LD_VAR 0 2
2164: PUSH
2165: LD_INT 1
2167: ARRAY
2168: PPUSH
2169: CALL_OW 343
2173: GO 2146
2175: POP
2176: POP
2177: GO 2128
2179: POP
2180: POP
// end ; for i = 1 to 8 do
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: DOUBLE
2187: LD_INT 1
2189: DEC
2190: ST_TO_ADDR
2191: LD_INT 8
2193: PUSH
2194: FOR_TO
2195: IFFALSE 2285
// for j = 1 to 8 do
2197: LD_ADDR_VAR 0 3
2201: PUSH
2202: DOUBLE
2203: LD_INT 1
2205: DEC
2206: ST_TO_ADDR
2207: LD_INT 8
2209: PUSH
2210: FOR_TO
2211: IFFALSE 2281
// if Side_Teams [ i ] = Side_Teams [ j ] then
2213: LD_EXP 18
2217: PUSH
2218: LD_VAR 0 2
2222: ARRAY
2223: PUSH
2224: LD_EXP 18
2228: PUSH
2229: LD_VAR 0 3
2233: ARRAY
2234: EQUAL
2235: IFFALSE 2259
// SetAttitude ( i , j , att_friend , true ) else
2237: LD_VAR 0 2
2241: PPUSH
2242: LD_VAR 0 3
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: CALL_OW 80
2257: GO 2279
// SetAttitude ( i , j , att_enemy , true ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: LD_INT 1
2274: PPUSH
2275: CALL_OW 80
2279: GO 2210
2281: POP
2282: POP
2283: GO 2194
2285: POP
2286: POP
// end ; end ;
2287: LD_VAR 0 1
2291: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2292: LD_INT 0
2294: PPUSH
2295: PPUSH
2296: PPUSH
2297: PPUSH
// result := [ ] ;
2298: LD_ADDR_VAR 0 6
2302: PUSH
2303: EMPTY
2304: ST_TO_ADDR
// for i := 1 to count do
2305: LD_ADDR_VAR 0 7
2309: PUSH
2310: DOUBLE
2311: LD_INT 1
2313: DEC
2314: ST_TO_ADDR
2315: LD_VAR 0 1
2319: PUSH
2320: FOR_TO
2321: IFFALSE 2717
// begin uc_direction := Rand ( 0 , 5 ) ;
2323: LD_ADDR_OWVAR 24
2327: PUSH
2328: LD_INT 0
2330: PPUSH
2331: LD_INT 5
2333: PPUSH
2334: CALL_OW 12
2338: ST_TO_ADDR
// if commander then
2339: LD_LOC 1
2343: IFFALSE 2452
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2345: LD_ADDR_OWVAR 26
2349: PUSH
2350: LD_OWVAR 19
2354: PUSH
2355: LD_OWVAR 20
2359: ARRAY
2360: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2361: LD_INT 1
2363: PPUSH
2364: LD_INT 2
2366: PPUSH
2367: CALL_OW 12
2371: PPUSH
2372: LD_VAR 0 2
2376: PPUSH
2377: LD_EXP 7
2381: PUSH
2382: LD_INT 2
2384: PLUS
2385: PPUSH
2386: CALL_OW 380
// hc_importance := 105 ;
2390: LD_ADDR_OWVAR 32
2394: PUSH
2395: LD_INT 105
2397: ST_TO_ADDR
// commander := false ;
2398: LD_ADDR_LOC 1
2402: PUSH
2403: LD_INT 0
2405: ST_TO_ADDR
// if Multiplayer then
2406: LD_OWVAR 4
2410: IFFALSE 2450
// begin hc_gallery := MULTIAVATARS ;
2412: LD_ADDR_OWVAR 33
2416: PUSH
2417: LD_STRING MULTIAVATARS
2419: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2420: LD_ADDR_OWVAR 34
2424: PUSH
2425: LD_OWVAR 20
2429: PPUSH
2430: CALL_OW 525
2434: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2435: LD_ADDR_OWVAR 27
2439: PUSH
2440: LD_OWVAR 20
2444: PPUSH
2445: CALL_OW 526
2449: ST_TO_ADDR
// end ; end else
2450: GO 2515
// begin hc_name :=  ;
2452: LD_ADDR_OWVAR 26
2456: PUSH
2457: LD_STRING 
2459: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2460: LD_INT 1
2462: PPUSH
2463: LD_INT 2
2465: PPUSH
2466: CALL_OW 12
2470: PPUSH
2471: LD_VAR 0 2
2475: PPUSH
2476: LD_EXP 7
2480: PPUSH
2481: CALL_OW 380
// hc_importance := 0 ;
2485: LD_ADDR_OWVAR 32
2489: PUSH
2490: LD_INT 0
2492: ST_TO_ADDR
// if Multiplayer then
2493: LD_OWVAR 4
2497: IFFALSE 2515
// begin hc_gallery :=  ;
2499: LD_ADDR_OWVAR 33
2503: PUSH
2504: LD_STRING 
2506: ST_TO_ADDR
// hc_face_number := 0 ;
2507: LD_ADDR_OWVAR 34
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2515: LD_ADDR_VAR 0 9
2519: PUSH
2520: CALL_OW 44
2524: ST_TO_ADDR
// if global_defined then
2525: LD_LOC 3
2529: IFFALSE 2669
// begin if ( cl = class_soldier ) then
2531: LD_VAR 0 2
2535: PUSH
2536: LD_INT 1
2538: EQUAL
2539: IFFALSE 2559
// j := i + soldiers_created else
2541: LD_ADDR_VAR 0 8
2545: PUSH
2546: LD_VAR 0 7
2550: PUSH
2551: LD_LOC 4
2555: PLUS
2556: ST_TO_ADDR
2557: GO 2569
// j := i ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_VAR 0 7
2568: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2569: LD_LOC 2
2573: PUSH
2574: LD_VAR 0 2
2578: ARRAY
2579: PUSH
2580: LD_VAR 0 8
2584: ARRAY
2585: PPUSH
2586: LD_VAR 0 9
2590: PPUSH
2591: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: LD_INT 2
2602: PPUSH
2603: LD_LOC 2
2607: PUSH
2608: LD_VAR 0 2
2612: ARRAY
2613: PUSH
2614: LD_VAR 0 8
2618: ARRAY
2619: PPUSH
2620: LD_INT 2
2622: PPUSH
2623: CALL_OW 260
2627: PPUSH
2628: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2632: LD_VAR 0 9
2636: PPUSH
2637: LD_INT 1
2639: PPUSH
2640: LD_LOC 2
2644: PUSH
2645: LD_VAR 0 2
2649: ARRAY
2650: PUSH
2651: LD_VAR 0 8
2655: ARRAY
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: CALL_OW 260
2664: PPUSH
2665: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2669: LD_VAR 0 9
2673: PPUSH
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_VAR 0 4
2683: PPUSH
2684: LD_VAR 0 5
2688: PPUSH
2689: LD_INT 0
2691: PPUSH
2692: CALL_OW 50
// result := result ^ [ un ] ;
2696: LD_ADDR_VAR 0 6
2700: PUSH
2701: LD_VAR 0 6
2705: PUSH
2706: LD_VAR 0 9
2710: PUSH
2711: EMPTY
2712: LIST
2713: ADD
2714: ST_TO_ADDR
// end ;
2715: GO 2320
2717: POP
2718: POP
// if not global_defined then
2719: LD_LOC 3
2723: NOT
2724: IFFALSE 2802
// if ( global_units >= cl ) then
2726: LD_LOC 2
2730: PUSH
2731: LD_VAR 0 2
2735: GREATEREQUAL
2736: IFFALSE 2777
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2738: LD_ADDR_LOC 2
2742: PUSH
2743: LD_LOC 2
2747: PPUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: LD_LOC 2
2757: PUSH
2758: LD_VAR 0 2
2762: ARRAY
2763: PUSH
2764: LD_VAR 0 6
2768: ADD
2769: PPUSH
2770: CALL_OW 1
2774: ST_TO_ADDR
2775: GO 2802
// global_units := Replace ( global_units , cl , result ) ;
2777: LD_ADDR_LOC 2
2781: PUSH
2782: LD_LOC 2
2786: PPUSH
2787: LD_VAR 0 2
2791: PPUSH
2792: LD_VAR 0 6
2796: PPUSH
2797: CALL_OW 1
2801: ST_TO_ADDR
// end ;
2802: LD_VAR 0 6
2806: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , sol , br , dep ; begin
2807: LD_INT 0
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
2817: PPUSH
2818: PPUSH
// if side in [ 0 , 9 ] then
2819: LD_VAR 0 1
2823: PUSH
2824: LD_INT 0
2826: PUSH
2827: LD_INT 9
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: IN
2834: IFFALSE 2838
// exit ;
2836: GO 3945
// pos := Side_Positions [ side ] ;
2838: LD_ADDR_VAR 0 3
2842: PUSH
2843: LD_EXP 21
2847: PUSH
2848: LD_VAR 0 1
2852: ARRAY
2853: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2854: LD_ADDR_OWVAR 21
2858: PUSH
2859: LD_EXP 22
2863: PUSH
2864: LD_VAR 0 1
2868: ARRAY
2869: ST_TO_ADDR
// uc_side := side ;
2870: LD_ADDR_OWVAR 20
2874: PUSH
2875: LD_VAR 0 1
2879: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: LD_EXP 24
2889: PUSH
2890: LD_VAR 0 3
2894: ARRAY
2895: PUSH
2896: LD_INT 1
2898: ARRAY
2899: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2900: LD_ADDR_VAR 0 5
2904: PUSH
2905: LD_EXP 24
2909: PUSH
2910: LD_VAR 0 3
2914: ARRAY
2915: PUSH
2916: LD_INT 2
2918: ARRAY
2919: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2920: LD_ADDR_VAR 0 6
2924: PUSH
2925: LD_EXP 24
2929: PUSH
2930: LD_VAR 0 3
2934: ARRAY
2935: PUSH
2936: LD_INT 3
2938: ARRAY
2939: ST_TO_ADDR
// if is_depot then
2940: LD_EXP 3
2944: IFFALSE 3077
// begin bc_type = b_depot ;
2946: LD_ADDR_OWVAR 42
2950: PUSH
2951: LD_INT 0
2953: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2954: LD_ADDR_VAR 0 11
2958: PUSH
2959: LD_VAR 0 4
2963: PPUSH
2964: LD_VAR 0 5
2968: PPUSH
2969: LD_VAR 0 6
2973: PPUSH
2974: CALL_OW 47
2978: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2979: LD_VAR 0 11
2983: PPUSH
2984: LD_STRING @
2986: PUSH
2987: LD_VAR 0 1
2991: STR
2992: PPUSH
2993: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2997: LD_VAR 0 11
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 1
3009: PPUSH
3010: LD_EXP 9
3014: PUSH
3015: LD_INT 1
3017: ARRAY
3018: PPUSH
3019: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3023: LD_VAR 0 11
3027: PPUSH
3028: CALL_OW 274
3032: PPUSH
3033: LD_INT 2
3035: PPUSH
3036: LD_EXP 9
3040: PUSH
3041: LD_INT 2
3043: ARRAY
3044: PPUSH
3045: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3049: LD_VAR 0 11
3053: PPUSH
3054: CALL_OW 274
3058: PPUSH
3059: LD_INT 3
3061: PPUSH
3062: LD_EXP 9
3066: PUSH
3067: LD_INT 3
3069: ARRAY
3070: PPUSH
3071: CALL_OW 277
// end else
3075: GO 3221
// begin for i := 1 to 3 do
3077: LD_ADDR_VAR 0 7
3081: PUSH
3082: DOUBLE
3083: LD_INT 1
3085: DEC
3086: ST_TO_ADDR
3087: LD_INT 3
3089: PUSH
3090: FOR_TO
3091: IFFALSE 3219
// begin r := starting_resources [ i ] ;
3093: LD_ADDR_VAR 0 8
3097: PUSH
3098: LD_EXP 9
3102: PUSH
3103: LD_VAR 0 7
3107: ARRAY
3108: ST_TO_ADDR
// while r >= 10 do
3109: LD_VAR 0 8
3113: PUSH
3114: LD_INT 10
3116: GREATEREQUAL
3117: IFFALSE 3217
// if r > 50 then
3119: LD_VAR 0 8
3123: PUSH
3124: LD_INT 50
3126: GREATER
3127: IFFALSE 3173
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3129: LD_VAR 0 7
3133: PPUSH
3134: LD_INT 5
3136: PPUSH
3137: LD_VAR 0 4
3141: PPUSH
3142: LD_VAR 0 5
3146: PPUSH
3147: LD_INT 4
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 60
// r := r - 50 ;
3157: LD_ADDR_VAR 0 8
3161: PUSH
3162: LD_VAR 0 8
3166: PUSH
3167: LD_INT 50
3169: MINUS
3170: ST_TO_ADDR
// end else
3171: GO 3215
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3173: LD_VAR 0 7
3177: PPUSH
3178: LD_VAR 0 8
3182: PUSH
3183: LD_INT 10
3185: DIV
3186: PPUSH
3187: LD_VAR 0 4
3191: PPUSH
3192: LD_VAR 0 5
3196: PPUSH
3197: LD_INT 4
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: CALL_OW 60
// r := 0 ;
3207: LD_ADDR_VAR 0 8
3211: PUSH
3212: LD_INT 0
3214: ST_TO_ADDR
// end ;
3215: GO 3109
// end ;
3217: GO 3090
3219: POP
3220: POP
// end ; for r in starting_crates do
3221: LD_ADDR_VAR 0 8
3225: PUSH
3226: LD_EXP 8
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3264
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 5
3239: PPUSH
3240: LD_VAR 0 4
3244: PPUSH
3245: LD_VAR 0 5
3249: PPUSH
3250: LD_VAR 0 8
3254: PPUSH
3255: LD_INT 0
3257: PPUSH
3258: CALL_OW 60
3262: GO 3231
3264: POP
3265: POP
// if def_morale_flags then
3266: LD_EXP 51
3270: IFFALSE 3409
// begin x := start_def [ pos ] [ 1 ] ;
3272: LD_ADDR_VAR 0 4
3276: PUSH
3277: LD_EXP 26
3281: PUSH
3282: LD_VAR 0 3
3286: ARRAY
3287: PUSH
3288: LD_INT 1
3290: ARRAY
3291: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3292: LD_ADDR_VAR 0 5
3296: PUSH
3297: LD_EXP 26
3301: PUSH
3302: LD_VAR 0 3
3306: ARRAY
3307: PUSH
3308: LD_INT 2
3310: ARRAY
3311: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3312: LD_VAR 0 4
3316: PPUSH
3317: LD_VAR 0 5
3321: PPUSH
3322: LD_INT 12
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3332: LD_ADDR_EXP 28
3336: PUSH
3337: LD_EXP 28
3341: PUSH
3342: LD_VAR 0 1
3346: PPUSH
3347: LD_VAR 0 4
3351: PPUSH
3352: LD_VAR 0 5
3356: PPUSH
3357: LD_INT 1
3359: PUSH
3360: LD_INT 100
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 2
3369: PUSH
3370: LD_INT 50
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 3
3379: PUSH
3380: LD_INT 20
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: LD_INT 20
3389: PUSH
3390: LD_INT 100
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 418
3407: ADD
3408: ST_TO_ADDR
// end ; commander := true ;
3409: LD_ADDR_LOC 1
3413: PUSH
3414: LD_INT 1
3416: ST_TO_ADDR
// soldiers_created := 0 ;
3417: LD_ADDR_LOC 4
3421: PUSH
3422: LD_INT 0
3424: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3425: LD_ADDR_VAR 0 7
3429: PUSH
3430: DOUBLE
3431: LD_INT 1
3433: DEC
3434: ST_TO_ADDR
3435: LD_EXP 4
3439: PUSH
3440: FOR_TO
3441: IFFALSE 3663
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3443: LD_ADDR_VAR 0 4
3447: PUSH
3448: LD_EXP 25
3452: PUSH
3453: LD_VAR 0 3
3457: ARRAY
3458: PUSH
3459: LD_VAR 0 7
3463: ARRAY
3464: PUSH
3465: LD_INT 1
3467: ARRAY
3468: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3469: LD_ADDR_VAR 0 5
3473: PUSH
3474: LD_EXP 25
3478: PUSH
3479: LD_VAR 0 3
3483: ARRAY
3484: PUSH
3485: LD_VAR 0 7
3489: ARRAY
3490: PUSH
3491: LD_INT 2
3493: ARRAY
3494: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3495: LD_ADDR_VAR 0 6
3499: PUSH
3500: LD_EXP 25
3504: PUSH
3505: LD_VAR 0 3
3509: ARRAY
3510: PUSH
3511: LD_VAR 0 7
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// bc_type := b_breastwork ;
3521: LD_ADDR_OWVAR 42
3525: PUSH
3526: LD_INT 31
3528: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3529: LD_ADDR_VAR 0 10
3533: PUSH
3534: LD_VAR 0 4
3538: PPUSH
3539: LD_VAR 0 5
3543: PPUSH
3544: LD_VAR 0 6
3548: PPUSH
3549: CALL_OW 47
3553: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3554: LD_ADDR_VAR 0 4
3558: PUSH
3559: LD_VAR 0 4
3563: PPUSH
3564: LD_VAR 0 6
3568: PPUSH
3569: LD_INT 2
3571: PPUSH
3572: CALL_OW 272
3576: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3577: LD_ADDR_VAR 0 5
3581: PUSH
3582: LD_VAR 0 5
3586: PPUSH
3587: LD_VAR 0 6
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 273
3599: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3600: LD_ADDR_VAR 0 9
3604: PUSH
3605: LD_INT 1
3607: PPUSH
3608: LD_INT 1
3610: PPUSH
3611: LD_VAR 0 4
3615: PPUSH
3616: LD_VAR 0 5
3620: PPUSH
3621: LD_INT 0
3623: PPUSH
3624: CALL 2292 0 5
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3633: LD_ADDR_LOC 4
3637: PUSH
3638: LD_LOC 4
3642: PUSH
3643: LD_INT 1
3645: PLUS
3646: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3647: LD_VAR 0 9
3651: PPUSH
3652: LD_VAR 0 10
3656: PPUSH
3657: CALL_OW 120
// end ;
3661: GO 3440
3663: POP
3664: POP
// x := start_def [ pos ] [ 1 ] ;
3665: LD_ADDR_VAR 0 4
3669: PUSH
3670: LD_EXP 26
3674: PUSH
3675: LD_VAR 0 3
3679: ARRAY
3680: PUSH
3681: LD_INT 1
3683: ARRAY
3684: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3685: LD_ADDR_VAR 0 5
3689: PUSH
3690: LD_EXP 26
3694: PUSH
3695: LD_VAR 0 3
3699: ARRAY
3700: PUSH
3701: LD_INT 2
3703: ARRAY
3704: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
3705: LD_LOC 8
3709: PUSH
3710: LD_EXP 4
3714: MINUS
3715: PPUSH
3716: LD_INT 1
3718: PPUSH
3719: LD_VAR 0 4
3723: PPUSH
3724: LD_VAR 0 5
3728: PPUSH
3729: LD_INT 5
3731: PPUSH
3732: CALL 2292 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
3736: LD_LOC 5
3740: PPUSH
3741: LD_INT 2
3743: PPUSH
3744: LD_VAR 0 4
3748: PPUSH
3749: LD_VAR 0 5
3753: PPUSH
3754: LD_INT 5
3756: PPUSH
3757: CALL 2292 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
3761: LD_LOC 7
3765: PPUSH
3766: LD_INT 3
3768: PPUSH
3769: LD_VAR 0 4
3773: PPUSH
3774: LD_VAR 0 5
3778: PPUSH
3779: LD_INT 5
3781: PPUSH
3782: CALL 2292 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
3786: LD_LOC 6
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: LD_VAR 0 4
3798: PPUSH
3799: LD_VAR 0 5
3803: PPUSH
3804: LD_INT 5
3806: PPUSH
3807: CALL 2292 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3811: LD_EXP 52
3815: PUSH
3816: LD_INT 20
3818: PPUSH
3819: LD_VAR 0 1
3823: PPUSH
3824: CALL_OW 321
3828: PUSH
3829: LD_INT 1
3831: EQUAL
3832: AND
3833: IFFALSE 3850
// SetTech ( tech_SibDet , side , state_researched ) ;
3835: LD_INT 20
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: LD_INT 2
3845: PPUSH
3846: CALL_OW 322
// if def_siberite_bomb = 1 then
3850: LD_EXP 55
3854: PUSH
3855: LD_INT 1
3857: EQUAL
3858: IFFALSE 3892
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3860: LD_INT 25
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3875: LD_INT 73
3877: PPUSH
3878: LD_VAR 0 1
3882: PPUSH
3883: LD_INT 1
3885: PPUSH
3886: CALL_OW 322
// end else
3890: GO 3922
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3892: LD_INT 25
3894: PPUSH
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3907: LD_INT 73
3909: PPUSH
3910: LD_VAR 0 1
3914: PPUSH
3915: LD_INT 0
3917: PPUSH
3918: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3922: LD_INT 24
3924: PPUSH
3925: LD_VAR 0 1
3929: PPUSH
3930: LD_INT 0
3932: PPUSH
3933: CALL_OW 322
// global_defined := true ;
3937: LD_ADDR_LOC 3
3941: PUSH
3942: LD_INT 1
3944: ST_TO_ADDR
// end ;
3945: LD_VAR 0 2
3949: RET
// every 0 0$1 do
3950: GO 3952
3952: DISABLE
// if ( def_siberite_bomb > 1 ) then
3953: LD_EXP 55
3957: PUSH
3958: LD_INT 1
3960: GREATER
3961: IFFALSE 3976
// begin wait ( siberite_bomb_Delay ) ;
3963: LD_EXP 16
3967: PPUSH
3968: CALL_OW 67
// EnableSibFiss ;
3972: CALL 3977 0 0
// end ;
3976: END
// function EnableSibFiss ; var i ; begin
3977: LD_INT 0
3979: PPUSH
3980: PPUSH
// for i := 1 to 8 do
3981: LD_ADDR_VAR 0 2
3985: PUSH
3986: DOUBLE
3987: LD_INT 1
3989: DEC
3990: ST_TO_ADDR
3991: LD_INT 8
3993: PUSH
3994: FOR_TO
3995: IFFALSE 4041
// if Side_Positions [ i ] then
3997: LD_EXP 21
4001: PUSH
4002: LD_VAR 0 2
4006: ARRAY
4007: IFFALSE 4039
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4009: LD_INT 25
4011: PPUSH
4012: LD_VAR 0 2
4016: PPUSH
4017: LD_INT 1
4019: PPUSH
4020: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4024: LD_INT 73
4026: PPUSH
4027: LD_VAR 0 2
4031: PPUSH
4032: LD_INT 1
4034: PPUSH
4035: CALL_OW 322
// end ;
4039: GO 3994
4041: POP
4042: POP
// end ;
4043: LD_VAR 0 1
4047: RET
// function prepare_sides ; var i ; begin
4048: LD_INT 0
4050: PPUSH
4051: PPUSH
// global_units := [ ] ;
4052: LD_ADDR_LOC 2
4056: PUSH
4057: EMPTY
4058: ST_TO_ADDR
// global_defined := false ;
4059: LD_ADDR_LOC 3
4063: PUSH
4064: LD_INT 0
4066: ST_TO_ADDR
// CountClassMembers ;
4067: CALL 4117 0 0
// for i := 1 to 8 do
4071: LD_ADDR_VAR 0 2
4075: PUSH
4076: DOUBLE
4077: LD_INT 1
4079: DEC
4080: ST_TO_ADDR
4081: LD_INT 8
4083: PUSH
4084: FOR_TO
4085: IFFALSE 4110
// if Side_Positions [ i ] then
4087: LD_EXP 21
4091: PUSH
4092: LD_VAR 0 2
4096: ARRAY
4097: IFFALSE 4108
// prepare_side ( i ) ;
4099: LD_VAR 0 2
4103: PPUSH
4104: CALL 2807 0 1
4108: GO 4084
4110: POP
4111: POP
// end ;
4112: LD_VAR 0 1
4116: RET
// function CountClassMembers ; var Mode ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// if No_Mechs then
4121: LD_EXP 57
4125: IFFALSE 4137
// Mode := 2 else
4127: LD_ADDR_VAR 0 2
4131: PUSH
4132: LD_INT 2
4134: ST_TO_ADDR
4135: GO 4145
// Mode := 1 ;
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_INT 1
4144: ST_TO_ADDR
// neng := number_of_people ;
4145: LD_ADDR_LOC 5
4149: PUSH
4150: LD_EXP 5
4154: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4155: LD_ADDR_LOC 8
4159: PUSH
4160: LD_LOC 5
4164: PUSH
4165: LD_INT 4
4167: PUSH
4168: LD_INT 3
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_VAR 0 2
4179: ARRAY
4180: DIV
4181: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4182: LD_LOC 8
4186: PUSH
4187: LD_EXP 4
4191: LESS
4192: IFFALSE 4204
// nsol := number_of_breastworks ;
4194: LD_ADDR_LOC 8
4198: PUSH
4199: LD_EXP 4
4203: ST_TO_ADDR
// neng := neng - nsol ;
4204: LD_ADDR_LOC 5
4208: PUSH
4209: LD_LOC 5
4213: PUSH
4214: LD_LOC 8
4218: MINUS
4219: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4220: LD_ADDR_LOC 6
4224: PUSH
4225: LD_LOC 5
4229: PUSH
4230: LD_INT 3
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_VAR 0 2
4244: ARRAY
4245: DIV
4246: ST_TO_ADDR
// if ( nsci < 1 ) then
4247: LD_LOC 6
4251: PUSH
4252: LD_INT 1
4254: LESS
4255: IFFALSE 4265
// nsci := 1 ;
4257: LD_ADDR_LOC 6
4261: PUSH
4262: LD_INT 1
4264: ST_TO_ADDR
// neng := neng - nsci ;
4265: LD_ADDR_LOC 5
4269: PUSH
4270: LD_LOC 5
4274: PUSH
4275: LD_LOC 6
4279: MINUS
4280: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4281: LD_ADDR_LOC 7
4285: PUSH
4286: LD_LOC 5
4290: PUSH
4291: LD_INT 2
4293: DIV
4294: PUSH
4295: LD_INT 0
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: PUSH
4302: LD_VAR 0 2
4306: ARRAY
4307: ST_TO_ADDR
// neng := neng - nmech ;
4308: LD_ADDR_LOC 5
4312: PUSH
4313: LD_LOC 5
4317: PUSH
4318: LD_LOC 7
4322: MINUS
4323: ST_TO_ADDR
// if ( neng < 1 ) then
4324: LD_LOC 5
4328: PUSH
4329: LD_INT 1
4331: LESS
4332: IFFALSE 4342
// neng := 1 ;
4334: LD_ADDR_LOC 5
4338: PUSH
4339: LD_INT 1
4341: ST_TO_ADDR
// end ;
4342: LD_VAR 0 1
4346: RET
// starting begin disable ( 98 ) ;
4347: LD_INT 98
4349: DISABLE_MARKED
// disable ( 99 ) ;
4350: LD_INT 99
4352: DISABLE_MARKED
// disable ( 100 ) ;
4353: LD_INT 100
4355: DISABLE_MARKED
// disable ( 4 ) ;
4356: LD_INT 4
4358: DISABLE_MARKED
// disable ( 400 ) ;
4359: LD_INT 400
4361: DISABLE_MARKED
// disable ( 401 ) ;
4362: LD_INT 401
4364: DISABLE_MARKED
// mp_selectmsg := true ;
4365: LD_ADDR_OWVAR 13
4369: PUSH
4370: LD_INT 1
4372: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4373: CALL 68 0 0
// init_map ;
4377: CALL 1454 0 0
// init_respawning ;
4381: CALL 21221 0 0
// set_shared_visions_and_alliances ;
4385: CALL 1983 0 0
// ResetFog ;
4389: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4393: LD_OWVAR 2
4397: PPUSH
4398: CALL_OW 520
// AnimateTrees ( true ) ;
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 573
// prepare_sides ;
4409: CALL 4048 0 0
// init_shipments_and_respawning ;
4413: CALL 4554 0 0
// Init_Win_Condition ;
4417: CALL 11465 0 0
// if game_type = 3 then
4421: LD_EXP 41
4425: PUSH
4426: LD_INT 3
4428: EQUAL
4429: IFFALSE 4439
// begin InitPoints ( ) ;
4431: CALL 10468 0 0
// init_kings_counting ;
4435: CALL 12760 0 0
// end ; InitApeman ;
4439: CALL 6098 0 0
// InitLimits ;
4443: CALL 9338 0 0
// ShowTimer ;
4447: CALL 10275 0 0
// music_nat := Side_Nations [ your_side ] ;
4451: LD_ADDR_OWVAR 71
4455: PUSH
4456: LD_EXP 22
4460: PUSH
4461: LD_OWVAR 2
4465: ARRAY
4466: ST_TO_ADDR
// if IAmSpec then
4467: CALL_OW 531
4471: IFFALSE 4507
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4473: LD_INT 0
4475: PPUSH
4476: LD_INT 0
4478: PPUSH
4479: LD_OWVAR 2
4483: PPUSH
4484: LD_INT 32767
4486: NEG
4487: PPUSH
4488: CALL_OW 330
// CenterNowOnXY ( 119 , 79 ) ;
4492: LD_INT 119
4494: PPUSH
4495: LD_INT 79
4497: PPUSH
4498: CALL_OW 86
// enable ( 400 ) ;
4502: LD_INT 400
4504: ENABLE_MARKED
// end else
4505: GO 4553
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4507: LD_EXP 26
4511: PUSH
4512: LD_EXP 21
4516: PUSH
4517: LD_OWVAR 2
4521: ARRAY
4522: ARRAY
4523: PUSH
4524: LD_INT 1
4526: ARRAY
4527: PPUSH
4528: LD_EXP 26
4532: PUSH
4533: LD_EXP 21
4537: PUSH
4538: LD_OWVAR 2
4542: ARRAY
4543: ARRAY
4544: PUSH
4545: LD_INT 2
4547: ARRAY
4548: PPUSH
4549: CALL_OW 86
// end ; end ; end_of_file
4553: END
// var shipment ; export function init_shipments_and_respawning ; begin
4554: LD_INT 0
4556: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4557: LD_ADDR_LOC 9
4561: PUSH
4562: LD_INT 0
4564: PPUSH
4565: LD_INT 3
4567: PPUSH
4568: CALL_OW 12
4572: ST_TO_ADDR
// end ;
4573: LD_VAR 0 1
4577: RET
// every 0 0$5 + 0 0$1.1 do var d ;
4578: GO 4580
4580: DISABLE
4581: LD_INT 0
4583: PPUSH
// begin case tick of 1 .. 1 1$0 :
4584: LD_OWVAR 1
4588: PUSH
4589: LD_INT 1
4591: DOUBLE
4592: GREATEREQUAL
4593: IFFALSE 4601
4595: LD_INT 2100
4597: DOUBLE
4598: LESSEQUAL
4599: IFTRUE 4603
4601: GO 4614
4603: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
4604: LD_ADDR_VAR 0 1
4608: PUSH
4609: LD_INT 150
4611: ST_TO_ADDR
4612: GO 4797
4614: LD_INT 2100
4616: PUSH
4617: LD_INT 1
4619: PLUS
4620: DOUBLE
4621: GREATEREQUAL
4622: IFFALSE 4630
4624: LD_INT 10500
4626: DOUBLE
4627: LESSEQUAL
4628: IFTRUE 4632
4630: GO 4643
4632: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
4633: LD_ADDR_VAR 0 1
4637: PUSH
4638: LD_INT 100
4640: ST_TO_ADDR
4641: GO 4797
4643: LD_INT 10500
4645: PUSH
4646: LD_INT 1
4648: PLUS
4649: DOUBLE
4650: GREATEREQUAL
4651: IFFALSE 4659
4653: LD_INT 21000
4655: DOUBLE
4656: LESSEQUAL
4657: IFTRUE 4661
4659: GO 4672
4661: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
4662: LD_ADDR_VAR 0 1
4666: PUSH
4667: LD_INT 90
4669: ST_TO_ADDR
4670: GO 4797
4672: LD_INT 21000
4674: PUSH
4675: LD_INT 1
4677: PLUS
4678: DOUBLE
4679: GREATEREQUAL
4680: IFFALSE 4688
4682: LD_INT 42000
4684: DOUBLE
4685: LESSEQUAL
4686: IFTRUE 4690
4688: GO 4701
4690: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
4691: LD_ADDR_VAR 0 1
4695: PUSH
4696: LD_INT 70
4698: ST_TO_ADDR
4699: GO 4797
4701: LD_INT 42000
4703: PUSH
4704: LD_INT 1
4706: PLUS
4707: DOUBLE
4708: GREATEREQUAL
4709: IFFALSE 4717
4711: LD_INT 63000
4713: DOUBLE
4714: LESSEQUAL
4715: IFTRUE 4719
4717: GO 4730
4719: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
4720: LD_ADDR_VAR 0 1
4724: PUSH
4725: LD_INT 60
4727: ST_TO_ADDR
4728: GO 4797
4730: LD_INT 63000
4732: PUSH
4733: LD_INT 1
4735: PLUS
4736: DOUBLE
4737: GREATEREQUAL
4738: IFFALSE 4746
4740: LD_INT 105000
4742: DOUBLE
4743: LESSEQUAL
4744: IFTRUE 4748
4746: GO 4759
4748: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
4749: LD_ADDR_VAR 0 1
4753: PUSH
4754: LD_INT 35
4756: ST_TO_ADDR
4757: GO 4797
4759: LD_INT 105000
4761: PUSH
4762: LD_INT 1
4764: PLUS
4765: DOUBLE
4766: GREATEREQUAL
4767: IFFALSE 4775
4769: LD_INT 630000
4771: DOUBLE
4772: LESSEQUAL
4773: IFTRUE 4777
4775: GO 4788
4777: POP
// d := 20 ; else
4778: LD_ADDR_VAR 0 1
4782: PUSH
4783: LD_INT 20
4785: ST_TO_ADDR
4786: GO 4797
4788: POP
// d := 0 ; end ;
4789: LD_ADDR_VAR 0 1
4793: PUSH
4794: LD_INT 0
4796: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
4797: LD_INT 1
4799: PPUSH
4800: LD_INT 10000
4802: PPUSH
4803: CALL_OW 12
4807: PUSH
4808: LD_VAR 0 1
4812: PUSH
4813: LD_EXP 10
4817: MUL
4818: LESSEQUAL
4819: IFFALSE 4873
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
4821: LD_INT 1
4823: PPUSH
4824: LD_INT 140
4826: PPUSH
4827: CALL_OW 12
4831: PPUSH
4832: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
4836: LD_ADDR_LOC 9
4840: PUSH
4841: LD_LOC 9
4845: PUSH
4846: LD_INT 1
4848: PLUS
4849: PUSH
4850: LD_INT 4
4852: MOD
4853: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLH + shipment , true ) ;
4854: LD_INT 5
4856: PPUSH
4857: LD_INT 3
4859: PUSH
4860: LD_LOC 9
4864: PLUS
4865: PPUSH
4866: LD_INT 1
4868: PPUSH
4869: CALL_OW 55
// end ; enable ;
4873: ENABLE
// end ;
4874: PPOPN 1
4876: END
// every 0 0$7 + 0 0$1.7 do var d ;
4877: GO 4879
4879: DISABLE
4880: LD_INT 0
4882: PPUSH
// begin case tick of 1 .. 1 1$0 :
4883: LD_OWVAR 1
4887: PUSH
4888: LD_INT 1
4890: DOUBLE
4891: GREATEREQUAL
4892: IFFALSE 4900
4894: LD_INT 2100
4896: DOUBLE
4897: LESSEQUAL
4898: IFTRUE 4902
4900: GO 4913
4902: POP
// d := 20 ; 1 1$0 + 1 .. 5 5$0 :
4903: LD_ADDR_VAR 0 1
4907: PUSH
4908: LD_INT 20
4910: ST_TO_ADDR
4911: GO 5096
4913: LD_INT 2100
4915: PUSH
4916: LD_INT 1
4918: PLUS
4919: DOUBLE
4920: GREATEREQUAL
4921: IFFALSE 4929
4923: LD_INT 10500
4925: DOUBLE
4926: LESSEQUAL
4927: IFTRUE 4931
4929: GO 4942
4931: POP
// d := 50 ; 5 5$0 + 1 .. 10 10$0 :
4932: LD_ADDR_VAR 0 1
4936: PUSH
4937: LD_INT 50
4939: ST_TO_ADDR
4940: GO 5096
4942: LD_INT 10500
4944: PUSH
4945: LD_INT 1
4947: PLUS
4948: DOUBLE
4949: GREATEREQUAL
4950: IFFALSE 4958
4952: LD_INT 21000
4954: DOUBLE
4955: LESSEQUAL
4956: IFTRUE 4960
4958: GO 4971
4960: POP
// d := 150 ; 10 10$0 + 1 .. 20 20$0 :
4961: LD_ADDR_VAR 0 1
4965: PUSH
4966: LD_INT 150
4968: ST_TO_ADDR
4969: GO 5096
4971: LD_INT 21000
4973: PUSH
4974: LD_INT 1
4976: PLUS
4977: DOUBLE
4978: GREATEREQUAL
4979: IFFALSE 4987
4981: LD_INT 42000
4983: DOUBLE
4984: LESSEQUAL
4985: IFTRUE 4989
4987: GO 5000
4989: POP
// d := 100 ; 20 20$0 + 1 .. 30 30$0 :
4990: LD_ADDR_VAR 0 1
4994: PUSH
4995: LD_INT 100
4997: ST_TO_ADDR
4998: GO 5096
5000: LD_INT 42000
5002: PUSH
5003: LD_INT 1
5005: PLUS
5006: DOUBLE
5007: GREATEREQUAL
5008: IFFALSE 5016
5010: LD_INT 63000
5012: DOUBLE
5013: LESSEQUAL
5014: IFTRUE 5018
5016: GO 5029
5018: POP
// d := 90 ; 30 30$0 + 1 .. 50 50$0 :
5019: LD_ADDR_VAR 0 1
5023: PUSH
5024: LD_INT 90
5026: ST_TO_ADDR
5027: GO 5096
5029: LD_INT 63000
5031: PUSH
5032: LD_INT 1
5034: PLUS
5035: DOUBLE
5036: GREATEREQUAL
5037: IFFALSE 5045
5039: LD_INT 105000
5041: DOUBLE
5042: LESSEQUAL
5043: IFTRUE 5047
5045: GO 5058
5047: POP
// d := 70 ; 50 50$0 + 1 .. 300 300$0 :
5048: LD_ADDR_VAR 0 1
5052: PUSH
5053: LD_INT 70
5055: ST_TO_ADDR
5056: GO 5096
5058: LD_INT 105000
5060: PUSH
5061: LD_INT 1
5063: PLUS
5064: DOUBLE
5065: GREATEREQUAL
5066: IFFALSE 5074
5068: LD_INT 630000
5070: DOUBLE
5071: LESSEQUAL
5072: IFTRUE 5076
5074: GO 5087
5076: POP
// d := 60 ; else
5077: LD_ADDR_VAR 0 1
5081: PUSH
5082: LD_INT 60
5084: ST_TO_ADDR
5085: GO 5096
5087: POP
// d := 35 ; end ;
5088: LD_ADDR_VAR 0 1
5092: PUSH
5093: LD_INT 35
5095: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5096: LD_INT 1
5098: PPUSH
5099: LD_INT 10000
5101: PPUSH
5102: CALL_OW 12
5106: PUSH
5107: LD_VAR 0 1
5111: PUSH
5112: LD_EXP 10
5116: MUL
5117: LESSEQUAL
5118: IFFALSE 5172
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5120: LD_INT 1
5122: PPUSH
5123: LD_INT 140
5125: PPUSH
5126: CALL_OW 12
5130: PPUSH
5131: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5135: LD_ADDR_LOC 9
5139: PUSH
5140: LD_LOC 9
5144: PUSH
5145: LD_INT 1
5147: PLUS
5148: PUSH
5149: LD_INT 4
5151: MOD
5152: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLHOut + shipment , true ) ;
5153: LD_INT 5
5155: PPUSH
5156: LD_INT 20
5158: PUSH
5159: LD_LOC 9
5163: PLUS
5164: PPUSH
5165: LD_INT 1
5167: PPUSH
5168: CALL_OW 55
// end ; enable ;
5172: ENABLE
// end ;
5173: PPOPN 1
5175: END
// every 1 1$0 trigger def_shipments_density do
5176: LD_EXP 47
5180: IFFALSE 5216
5182: GO 5184
5184: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5185: LD_INT 5
5187: PPUSH
5188: LD_INT 15
5190: PPUSH
5191: LD_INT 1
5193: PPUSH
5194: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5198: LD_INT 6300
5200: PUSH
5201: LD_INT 2100
5203: PUSH
5204: LD_EXP 47
5208: MUL
5209: MINUS
5210: PPUSH
5211: CALL_OW 67
// enable ;
5215: ENABLE
// end ; end_of_file
5216: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5217: LD_VAR 0 1
5221: PPUSH
5222: CALL_OW 266
5226: PUSH
5227: LD_INT 0
5229: PUSH
5230: LD_INT 1
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: IN
5237: IFFALSE 5262
// SetBName ( b , @ & GetSide ( b ) ) ;
5239: LD_VAR 0 1
5243: PPUSH
5244: LD_STRING @
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 255
5256: STR
5257: PPUSH
5258: CALL_OW 500
// if def_game_rules then
5262: LD_EXP 42
5266: IFFALSE 5303
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
5268: LD_VAR 0 1
5272: PPUSH
5273: LD_VAR 0 1
5277: PPUSH
5278: CALL_OW 266
5282: PPUSH
5283: LD_VAR 0 1
5287: PPUSH
5288: CALL_OW 255
5292: PPUSH
5293: LD_INT 0
5295: PPUSH
5296: LD_INT 1
5298: PPUSH
5299: CALL 9739 0 5
// end ;
5303: PPOPN 2
5305: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5306: LD_VAR 0 1
5310: PPUSH
5311: CALL_OW 266
5315: PUSH
5316: LD_INT 0
5318: PUSH
5319: LD_INT 1
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: IN
5326: IFFALSE 5351
// SetBName ( b , @ & GetSide ( b ) ) ;
5328: LD_VAR 0 1
5332: PPUSH
5333: LD_STRING @
5335: PUSH
5336: LD_VAR 0 1
5340: PPUSH
5341: CALL_OW 255
5345: STR
5346: PPUSH
5347: CALL_OW 500
// if def_game_rules then
5351: LD_EXP 42
5355: IFFALSE 5394
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
5357: LD_VAR 0 1
5361: PPUSH
5362: LD_VAR 0 1
5366: PPUSH
5367: CALL_OW 266
5371: PPUSH
5372: LD_VAR 0 1
5376: PPUSH
5377: CALL_OW 255
5381: PPUSH
5382: LD_VAR 0 2
5386: PPUSH
5387: LD_INT 1
5389: PPUSH
5390: CALL 9739 0 5
// end ;
5394: PPOPN 3
5396: END
// on VehicleConstructed ( veh , fac ) do var side ;
5397: LD_INT 0
5399: PPUSH
// begin if GetControl ( veh ) = control_apeman then
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 263
5409: PUSH
5410: LD_INT 5
5412: EQUAL
5413: IFFALSE 5555
// begin side := GetSide ( veh ) ;
5415: LD_ADDR_VAR 0 3
5419: PUSH
5420: LD_VAR 0 1
5424: PPUSH
5425: CALL_OW 255
5429: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
5430: LD_ADDR_EXP 37
5434: PUSH
5435: LD_EXP 37
5439: PPUSH
5440: LD_VAR 0 3
5444: PPUSH
5445: LD_EXP 37
5449: PUSH
5450: LD_VAR 0 3
5454: ARRAY
5455: PPUSH
5456: LD_INT 52
5458: PUSH
5459: EMPTY
5460: LIST
5461: PPUSH
5462: CALL_OW 72
5466: PUSH
5467: LD_INT 22
5469: PUSH
5470: LD_VAR 0 3
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: LD_INT 33
5484: PUSH
5485: LD_INT 5
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 25
5494: PUSH
5495: LD_INT 12
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 25
5504: PUSH
5505: LD_INT 15
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 25
5514: PUSH
5515: LD_INT 16
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 25
5524: PUSH
5525: LD_INT 17
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PPUSH
5544: CALL_OW 69
5548: UNION
5549: PPUSH
5550: CALL_OW 1
5554: ST_TO_ADDR
// end ; end ;
5555: PPOPN 3
5557: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
5558: LD_INT 0
5560: PPUSH
5561: PPUSH
5562: PPUSH
5563: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
5564: LD_VAR 0 1
5568: PPUSH
5569: CALL_OW 257
5573: PUSH
5574: LD_INT 12
5576: PUSH
5577: LD_INT 15
5579: PUSH
5580: LD_INT 17
5582: PUSH
5583: LD_INT 16
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: IN
5592: PUSH
5593: LD_VAR 0 1
5597: PPUSH
5598: CALL_OW 263
5602: PUSH
5603: LD_INT 5
5605: EQUAL
5606: OR
5607: IFFALSE 5618
// ApeKilled ( j ) ;
5609: LD_VAR 0 1
5613: PPUSH
5614: CALL 6779 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
5618: LD_VAR 0 1
5622: PPUSH
5623: CALL_OW 266
5627: PUSH
5628: LD_INT 0
5630: PUSH
5631: LD_INT 1
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: IN
5638: IFFALSE 5720
// begin pos := Side_Positions [ GetSide ( j ) ] ;
5640: LD_ADDR_VAR 0 4
5644: PUSH
5645: LD_EXP 21
5649: PUSH
5650: LD_VAR 0 1
5654: PPUSH
5655: CALL_OW 255
5659: ARRAY
5660: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
5661: LD_ADDR_VAR 0 2
5665: PUSH
5666: LD_EXP 26
5670: PUSH
5671: LD_VAR 0 4
5675: ARRAY
5676: PUSH
5677: LD_INT 1
5679: ARRAY
5680: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
5681: LD_ADDR_VAR 0 3
5685: PUSH
5686: LD_EXP 26
5690: PUSH
5691: LD_VAR 0 4
5695: ARRAY
5696: PUSH
5697: LD_INT 2
5699: ARRAY
5700: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
5701: LD_VAR 0 2
5705: PPUSH
5706: LD_VAR 0 3
5710: PPUSH
5711: CALL_OW 420
5715: PPUSH
5716: CALL_OW 419
// end ; if def_game_rules then
5720: LD_EXP 42
5724: IFFALSE 5823
// if ( GetType ( j ) = 3 ) then
5726: LD_VAR 0 1
5730: PPUSH
5731: CALL_OW 247
5735: PUSH
5736: LD_INT 3
5738: EQUAL
5739: IFFALSE 5779
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
5741: LD_VAR 0 1
5745: PPUSH
5746: LD_VAR 0 1
5750: PPUSH
5751: CALL_OW 266
5755: PPUSH
5756: LD_VAR 0 1
5760: PPUSH
5761: CALL_OW 255
5765: PPUSH
5766: LD_INT 0
5768: PPUSH
5769: LD_INT 1
5771: NEG
5772: PPUSH
5773: CALL 9739 0 5
5777: GO 5823
// if ( GetChassis ( j ) = 25 ) then
5779: LD_VAR 0 1
5783: PPUSH
5784: CALL_OW 265
5788: PUSH
5789: LD_INT 25
5791: EQUAL
5792: IFFALSE 5823
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
5794: LD_VAR 0 1
5798: PPUSH
5799: LD_INT 37
5801: PPUSH
5802: LD_VAR 0 1
5806: PPUSH
5807: CALL_OW 255
5811: PPUSH
5812: LD_INT 0
5814: PPUSH
5815: LD_INT 1
5817: NEG
5818: PPUSH
5819: CALL 9739 0 5
// end ;
5823: PPOPN 5
5825: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
5826: LD_EXP 42
5830: PUSH
5831: LD_VAR 0 1
5835: PPUSH
5836: CALL_OW 265
5840: PUSH
5841: LD_INT 25
5843: EQUAL
5844: AND
5845: IFFALSE 5877
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
5847: LD_VAR 0 1
5851: PPUSH
5852: LD_INT 37
5854: PPUSH
5855: LD_VAR 0 1
5859: PPUSH
5860: CALL_OW 255
5864: PPUSH
5865: LD_VAR 0 3
5869: PPUSH
5870: LD_INT 1
5872: PPUSH
5873: CALL 9739 0 5
// end ;
5877: PPOPN 4
5879: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
5880: LD_VAR 0 1
5884: PPUSH
5885: LD_VAR 0 2
5889: PPUSH
5890: LD_VAR 0 3
5894: PPUSH
5895: LD_OWVAR 2
5899: PPUSH
5900: CALL 11226 0 4
5904: PPOPN 3
5906: END
// every 20 20$00 trigger apemanNumber do
5907: LD_EXP 34
5911: IFFALSE 5944
5913: GO 5915
5915: DISABLE
// begin enable ;
5916: ENABLE
// if apeLevel >= 8 then
5917: LD_EXP 39
5921: PUSH
5922: LD_INT 8
5924: GREATEREQUAL
5925: IFFALSE 5930
// disable else
5927: DISABLE
5928: GO 5944
// apeLevel := apeLevel + 1 ;
5930: LD_ADDR_EXP 39
5934: PUSH
5935: LD_EXP 39
5939: PUSH
5940: LD_INT 1
5942: PLUS
5943: ST_TO_ADDR
// end ;
5944: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5945: LD_EXP 34
5949: PUSH
5950: LD_EXP 35
5954: LESS
5955: IFFALSE 6095
5957: GO 5959
5959: DISABLE
5960: LD_INT 0
5962: PPUSH
5963: PPUSH
5964: PPUSH
5965: PPUSH
// begin enable ;
5966: ENABLE
// for i := 1 to apemanPos do
5967: LD_ADDR_VAR 0 1
5971: PUSH
5972: DOUBLE
5973: LD_INT 1
5975: DEC
5976: ST_TO_ADDR
5977: LD_EXP 37
5981: PUSH
5982: FOR_TO
5983: IFFALSE 6093
// begin if apemanPlayerCount [ i ] then
5985: LD_EXP 38
5989: PUSH
5990: LD_VAR 0 1
5994: ARRAY
5995: IFFALSE 6091
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5997: LD_EXP 38
6001: PUSH
6002: LD_VAR 0 1
6006: ARRAY
6007: PUSH
6008: LD_EXP 37
6012: PUSH
6013: LD_VAR 0 1
6017: ARRAY
6018: GREATER
6019: IFFALSE 6091
// begin ape := PrepareApeman ;
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: CALL 6598 0 0
6030: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6031: LD_VAR 0 2
6035: PPUSH
6036: LD_EXP 40
6040: PUSH
6041: LD_VAR 0 1
6045: ARRAY
6046: PPUSH
6047: LD_INT 0
6049: PPUSH
6050: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6054: LD_ADDR_EXP 37
6058: PUSH
6059: LD_EXP 37
6063: PPUSH
6064: LD_VAR 0 1
6068: PPUSH
6069: LD_EXP 37
6073: PUSH
6074: LD_VAR 0 1
6078: ARRAY
6079: PUSH
6080: LD_VAR 0 2
6084: UNION
6085: PPUSH
6086: CALL_OW 1
6090: ST_TO_ADDR
// end ; end ; end ;
6091: GO 5982
6093: POP
6094: POP
// end ;
6095: PPOPN 4
6097: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6098: LD_INT 0
6100: PPUSH
6101: PPUSH
6102: PPUSH
6103: PPUSH
6104: PPUSH
6105: PPUSH
6106: PPUSH
// playersAmount := 0 ;
6107: LD_ADDR_VAR 0 3
6111: PUSH
6112: LD_INT 0
6114: ST_TO_ADDR
// _apeAreas := [ OpiceSZ , OpiceSV , OpiceJZ , OpiceJV ] ;
6115: LD_ADDR_VAR 0 7
6119: PUSH
6120: LD_INT 11
6122: PUSH
6123: LD_INT 12
6125: PUSH
6126: LD_INT 14
6128: PUSH
6129: LD_INT 13
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6138: LD_ADDR_EXP 40
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: LD_INT 0
6157: PUSH
6158: LD_INT 0
6160: PUSH
6161: LD_INT 0
6163: PUSH
6164: LD_INT 0
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: ST_TO_ADDR
// for j = 1 to Side_Positions do
6177: LD_ADDR_VAR 0 4
6181: PUSH
6182: DOUBLE
6183: LD_INT 1
6185: DEC
6186: ST_TO_ADDR
6187: LD_EXP 21
6191: PUSH
6192: FOR_TO
6193: IFFALSE 6260
// if Side_Positions [ j ] then
6195: LD_EXP 21
6199: PUSH
6200: LD_VAR 0 4
6204: ARRAY
6205: IFFALSE 6258
// begin playersAmount := playersAmount + 1 ;
6207: LD_ADDR_VAR 0 3
6211: PUSH
6212: LD_VAR 0 3
6216: PUSH
6217: LD_INT 1
6219: PLUS
6220: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6221: LD_ADDR_EXP 40
6225: PUSH
6226: LD_EXP 40
6230: PPUSH
6231: LD_VAR 0 4
6235: PPUSH
6236: LD_VAR 0 7
6240: PUSH
6241: LD_EXP 21
6245: PUSH
6246: LD_VAR 0 4
6250: ARRAY
6251: ARRAY
6252: PPUSH
6253: CALL_OW 1
6257: ST_TO_ADDR
// end ;
6258: GO 6192
6260: POP
6261: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6262: LD_ADDR_EXP 36
6266: PUSH
6267: LD_INT 3
6269: PUSH
6270: LD_EXP 6
6274: MUL
6275: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6276: LD_ADDR_EXP 34
6280: PUSH
6281: LD_VAR 0 3
6285: PUSH
6286: LD_EXP 36
6290: MUL
6291: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6292: LD_ADDR_EXP 35
6296: PUSH
6297: LD_EXP 34
6301: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6302: LD_ADDR_EXP 37
6306: PUSH
6307: LD_INT 0
6309: PUSH
6310: LD_INT 0
6312: PUSH
6313: LD_INT 0
6315: PUSH
6316: LD_INT 0
6318: PUSH
6319: LD_INT 0
6321: PUSH
6322: LD_INT 0
6324: PUSH
6325: LD_INT 0
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6341: LD_ADDR_EXP 38
6345: PUSH
6346: LD_INT 0
6348: PUSH
6349: LD_INT 0
6351: PUSH
6352: LD_INT 0
6354: PUSH
6355: LD_INT 0
6357: PUSH
6358: LD_INT 0
6360: PUSH
6361: LD_INT 0
6363: PUSH
6364: LD_INT 0
6366: PUSH
6367: LD_INT 0
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: ST_TO_ADDR
// apeLevel := 1 ;
6380: LD_ADDR_EXP 39
6384: PUSH
6385: LD_INT 1
6387: ST_TO_ADDR
// if not apemanNumber then
6388: LD_EXP 34
6392: NOT
6393: IFFALSE 6397
// exit ;
6395: GO 6593
// for i := 1 to apemanPerPlayer do
6397: LD_ADDR_VAR 0 2
6401: PUSH
6402: DOUBLE
6403: LD_INT 1
6405: DEC
6406: ST_TO_ADDR
6407: LD_EXP 36
6411: PUSH
6412: FOR_TO
6413: IFFALSE 6591
// begin for j := 1 to Side_Positions do
6415: LD_ADDR_VAR 0 4
6419: PUSH
6420: DOUBLE
6421: LD_INT 1
6423: DEC
6424: ST_TO_ADDR
6425: LD_EXP 21
6429: PUSH
6430: FOR_TO
6431: IFFALSE 6587
// if Side_Positions [ j ] then
6433: LD_EXP 21
6437: PUSH
6438: LD_VAR 0 4
6442: ARRAY
6443: IFFALSE 6585
// begin pos := Side_Positions [ j ] ;
6445: LD_ADDR_VAR 0 6
6449: PUSH
6450: LD_EXP 21
6454: PUSH
6455: LD_VAR 0 4
6459: ARRAY
6460: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6461: LD_ADDR_EXP 38
6465: PUSH
6466: LD_EXP 38
6470: PPUSH
6471: LD_VAR 0 4
6475: PPUSH
6476: LD_EXP 38
6480: PUSH
6481: LD_VAR 0 4
6485: ARRAY
6486: PUSH
6487: LD_INT 1
6489: PLUS
6490: PPUSH
6491: CALL_OW 1
6495: ST_TO_ADDR
// ape := PrepareApeman ;
6496: LD_ADDR_VAR 0 5
6500: PUSH
6501: CALL 6598 0 0
6505: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6506: LD_ADDR_EXP 37
6510: PUSH
6511: LD_EXP 37
6515: PPUSH
6516: LD_VAR 0 4
6520: PPUSH
6521: LD_EXP 37
6525: PUSH
6526: LD_VAR 0 4
6530: ARRAY
6531: PPUSH
6532: LD_EXP 37
6536: PUSH
6537: LD_VAR 0 4
6541: ARRAY
6542: PUSH
6543: LD_INT 1
6545: PLUS
6546: PPUSH
6547: LD_VAR 0 5
6551: PPUSH
6552: CALL_OW 1
6556: PPUSH
6557: CALL_OW 1
6561: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6562: LD_VAR 0 5
6566: PPUSH
6567: LD_EXP 40
6571: PUSH
6572: LD_VAR 0 4
6576: ARRAY
6577: PPUSH
6578: LD_INT 0
6580: PPUSH
6581: CALL_OW 49
// end ;
6585: GO 6430
6587: POP
6588: POP
// end ;
6589: GO 6412
6591: POP
6592: POP
// end ;
6593: LD_VAR 0 1
6597: RET
// export function PrepareApeman ; var bonus ; begin
6598: LD_INT 0
6600: PPUSH
6601: PPUSH
// uc_side := 0 ;
6602: LD_ADDR_OWVAR 20
6606: PUSH
6607: LD_INT 0
6609: ST_TO_ADDR
// uc_nation := 0 ;
6610: LD_ADDR_OWVAR 21
6614: PUSH
6615: LD_INT 0
6617: ST_TO_ADDR
// InitHc ;
6618: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6622: LD_ADDR_VAR 0 2
6626: PUSH
6627: LD_INT 1
6629: NEG
6630: PUSH
6631: LD_INT 0
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: PUSH
6642: LD_OWVAR 1
6646: PUSH
6647: LD_INT 3
6649: MOD
6650: PUSH
6651: LD_INT 1
6653: PLUS
6654: ARRAY
6655: ST_TO_ADDR
// hc_class := class_apeman ;
6656: LD_ADDR_OWVAR 28
6660: PUSH
6661: LD_INT 12
6663: ST_TO_ADDR
// hc_gallery :=  ;
6664: LD_ADDR_OWVAR 33
6668: PUSH
6669: LD_STRING 
6671: ST_TO_ADDR
// hc_name :=  ;
6672: LD_ADDR_OWVAR 26
6676: PUSH
6677: LD_STRING 
6679: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6680: LD_ADDR_OWVAR 31
6684: PUSH
6685: LD_EXP 39
6689: PUSH
6690: LD_VAR 0 2
6694: PLUS
6695: PUSH
6696: LD_EXP 39
6700: PUSH
6701: LD_VAR 0 2
6705: PLUS
6706: PUSH
6707: LD_EXP 39
6711: PUSH
6712: LD_VAR 0 2
6716: PLUS
6717: PUSH
6718: LD_EXP 39
6722: PUSH
6723: LD_VAR 0 2
6727: PLUS
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6735: LD_ADDR_OWVAR 35
6739: PUSH
6740: LD_INT 10
6742: PUSH
6743: LD_VAR 0 2
6747: MUL
6748: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6749: LD_ADDR_OWVAR 29
6753: PUSH
6754: LD_INT 12
6756: PUSH
6757: LD_INT 10
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: ST_TO_ADDR
// result := CreateHuman ;
6764: LD_ADDR_VAR 0 1
6768: PUSH
6769: CALL_OW 44
6773: ST_TO_ADDR
// end ;
6774: LD_VAR 0 1
6778: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6779: LD_INT 0
6781: PPUSH
6782: PPUSH
6783: PPUSH
// if not ape then
6784: LD_VAR 0 1
6788: NOT
6789: IFFALSE 6793
// exit ;
6791: GO 6918
// side := GetSide ( ape ) ;
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: LD_VAR 0 1
6802: PPUSH
6803: CALL_OW 255
6807: ST_TO_ADDR
// if not side then
6808: LD_VAR 0 3
6812: NOT
6813: IFFALSE 6867
// begin for i = 1 to apemanPos do
6815: LD_ADDR_VAR 0 4
6819: PUSH
6820: DOUBLE
6821: LD_INT 1
6823: DEC
6824: ST_TO_ADDR
6825: LD_EXP 37
6829: PUSH
6830: FOR_TO
6831: IFFALSE 6865
// if ape in apemanPos [ i ] then
6833: LD_VAR 0 1
6837: PUSH
6838: LD_EXP 37
6842: PUSH
6843: LD_VAR 0 4
6847: ARRAY
6848: IN
6849: IFFALSE 6863
// begin side := i ;
6851: LD_ADDR_VAR 0 3
6855: PUSH
6856: LD_VAR 0 4
6860: ST_TO_ADDR
// break ;
6861: GO 6865
// end ;
6863: GO 6830
6865: POP
6866: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6867: LD_ADDR_EXP 37
6871: PUSH
6872: LD_EXP 37
6876: PPUSH
6877: LD_VAR 0 3
6881: PPUSH
6882: LD_EXP 37
6886: PUSH
6887: LD_VAR 0 3
6891: ARRAY
6892: PUSH
6893: LD_VAR 0 1
6897: DIFF
6898: PPUSH
6899: CALL_OW 1
6903: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6904: LD_ADDR_EXP 34
6908: PUSH
6909: LD_EXP 34
6913: PUSH
6914: LD_INT 1
6916: MINUS
6917: ST_TO_ADDR
// end ; end_of_file
6918: LD_VAR 0 2
6922: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6923: LD_INT 0
6925: PPUSH
6926: PPUSH
// for un in battle_flags_id do
6927: LD_ADDR_VAR 0 2
6931: PUSH
6932: LD_EXP 28
6936: PUSH
6937: FOR_IN
6938: IFFALSE 7013
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6940: LD_VAR 0 2
6944: PPUSH
6945: LD_INT 1
6947: PUSH
6948: LD_LOC 10
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_LOC 10
6964: PUSH
6965: LD_INT 2
6967: DIV
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 3
6975: PUSH
6976: LD_LOC 10
6980: PUSH
6981: LD_INT 5
6983: DIV
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 20
6991: PUSH
6992: LD_LOC 10
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 423
7011: GO 6937
7013: POP
7014: POP
// end ;
7015: LD_VAR 0 1
7019: RET
// every 0 0$0.1 do var un ;
7020: GO 7022
7022: DISABLE
7023: LD_INT 0
7025: PPUSH
// begin if not def_morale_flags then
7026: LD_EXP 51
7030: NOT
7031: IFFALSE 7035
// exit ;
7033: GO 7112
// if not morale_decreasing_time then
7035: LD_EXP 11
7039: NOT
7040: IFFALSE 7044
// exit ;
7042: GO 7112
// strength = 100 ;
7044: LD_ADDR_LOC 10
7048: PUSH
7049: LD_INT 100
7051: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7052: LD_EXP 11
7056: PPUSH
7057: CALL_OW 67
// strength := strength - 1 ;
7061: LD_ADDR_LOC 10
7065: PUSH
7066: LD_LOC 10
7070: PUSH
7071: LD_INT 1
7073: MINUS
7074: ST_TO_ADDR
// Update_Flags ;
7075: CALL 6923 0 0
// until not strength ;
7079: LD_LOC 10
7083: NOT
7084: IFFALSE 7052
// for un in battle_flags_id do
7086: LD_ADDR_VAR 0 1
7090: PUSH
7091: LD_EXP 28
7095: PUSH
7096: FOR_IN
7097: IFFALSE 7110
// KillBattleFlag ( un ) ;
7099: LD_VAR 0 1
7103: PPUSH
7104: CALL_OW 419
7108: GO 7096
7110: POP
7111: POP
// end ; end_of_file
7112: PPOPN 1
7114: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7115: LD_INT 0
7117: PPUSH
7118: PPUSH
// if ( not IAmSpec ) then
7119: CALL_OW 531
7123: NOT
7124: IFFALSE 7140
// Result := Limits_Info ^  ;
7126: LD_ADDR_VAR 0 1
7130: PUSH
7131: LD_LOC 22
7135: PUSH
7136: LD_STRING 
7138: ADD
7139: ST_TO_ADDR
// for i := 1 to 8 do
7140: LD_ADDR_VAR 0 2
7144: PUSH
7145: DOUBLE
7146: LD_INT 1
7148: DEC
7149: ST_TO_ADDR
7150: LD_INT 8
7152: PUSH
7153: FOR_TO
7154: IFFALSE 7199
// if Cheaters [ i ] then
7156: LD_LOC 23
7160: PUSH
7161: LD_VAR 0 2
7165: ARRAY
7166: IFFALSE 7197
// Result := Result ^ [ #Cheater , i , i ] ;
7168: LD_ADDR_VAR 0 1
7172: PUSH
7173: LD_VAR 0 1
7177: PUSH
7178: LD_STRING #Cheater
7180: PUSH
7181: LD_VAR 0 2
7185: PUSH
7186: LD_VAR 0 2
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: LIST
7195: ADD
7196: ST_TO_ADDR
7197: GO 7153
7199: POP
7200: POP
// end ;
7201: LD_VAR 0 1
7205: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7206: LD_INT 0
7208: PPUSH
7209: PPUSH
7210: PPUSH
7211: PPUSH
7212: PPUSH
// case Game_Type of 10 :
7213: LD_EXP 41
7217: PUSH
7218: LD_INT 10
7220: DOUBLE
7221: EQUAL
7222: IFTRUE 7226
7224: GO 7237
7226: POP
// def_game_rules := 1 ; 11 :
7227: LD_ADDR_EXP 42
7231: PUSH
7232: LD_INT 1
7234: ST_TO_ADDR
7235: GO 7257
7237: LD_INT 11
7239: DOUBLE
7240: EQUAL
7241: IFTRUE 7245
7243: GO 7256
7245: POP
// def_game_rules := 3 ; end ;
7246: LD_ADDR_EXP 42
7250: PUSH
7251: LD_INT 3
7253: ST_TO_ADDR
7254: GO 7257
7256: POP
// case def_game_rules of 0 :
7257: LD_EXP 42
7261: PUSH
7262: LD_INT 0
7264: DOUBLE
7265: EQUAL
7266: IFTRUE 7270
7268: GO 7275
7270: POP
// exit ; 1 :
7271: GO 9333
7273: GO 9233
7275: LD_INT 1
7277: DOUBLE
7278: EQUAL
7279: IFTRUE 7283
7281: GO 7499
7283: POP
// begin def_base_level := 2 ;
7284: LD_ADDR_EXP 43
7288: PUSH
7289: LD_INT 2
7291: ST_TO_ADDR
// def_amount_of_people := 2 ;
7292: LD_ADDR_EXP 44
7296: PUSH
7297: LD_INT 2
7299: ST_TO_ADDR
// def_skill_level := 1 ;
7300: LD_ADDR_EXP 45
7304: PUSH
7305: LD_INT 1
7307: ST_TO_ADDR
// def_starting_resources := 2 ;
7308: LD_ADDR_EXP 46
7312: PUSH
7313: LD_INT 2
7315: ST_TO_ADDR
// def_shipments_density := 1 ;
7316: LD_ADDR_EXP 47
7320: PUSH
7321: LD_INT 1
7323: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7324: LD_ADDR_EXP 48
7328: PUSH
7329: LD_INT 0
7331: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7332: LD_ADDR_EXP 49
7336: PUSH
7337: LD_INT 1
7339: ST_TO_ADDR
// def_shared_vision := 1 ;
7340: LD_ADDR_EXP 50
7344: PUSH
7345: LD_INT 1
7347: ST_TO_ADDR
// def_morale_flags := 3 ;
7348: LD_ADDR_EXP 51
7352: PUSH
7353: LD_INT 3
7355: ST_TO_ADDR
// def_siberite_detection := 1 ;
7356: LD_ADDR_EXP 52
7360: PUSH
7361: LD_INT 1
7363: ST_TO_ADDR
// def_people_respawning := 1 ;
7364: LD_ADDR_EXP 53
7368: PUSH
7369: LD_INT 1
7371: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7372: LD_ADDR_EXP 54
7376: PUSH
7377: LD_INT 1
7379: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7380: LD_ADDR_EXP 55
7384: PUSH
7385: LD_INT 0
7387: ST_TO_ADDR
// def_builduptime := 2 ;
7388: LD_ADDR_EXP 56
7392: PUSH
7393: LD_INT 2
7395: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
7396: LD_ADDR_VAR 0 2
7400: PUSH
7401: EMPTY
7402: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7403: LD_ADDR_VAR 0 3
7407: PUSH
7408: EMPTY
7409: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7410: LD_ADDR_LOC 17
7414: PUSH
7415: EMPTY
7416: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7417: LD_ADDR_LOC 18
7421: PUSH
7422: EMPTY
7423: ST_TO_ADDR
// Banned_Controls := [ ] ;
7424: LD_ADDR_LOC 19
7428: PUSH
7429: EMPTY
7430: ST_TO_ADDR
// Banned_Engines := [ ] ;
7431: LD_ADDR_LOC 20
7435: PUSH
7436: EMPTY
7437: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7438: LD_ADDR_LOC 15
7442: PUSH
7443: LD_INT 37
7445: PUSH
7446: EMPTY
7447: LIST
7448: PUSH
7449: LD_INT 4
7451: PUSH
7452: LD_INT 5
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PUSH
7459: LD_INT 31
7461: PUSH
7462: LD_INT 32
7464: PUSH
7465: LD_INT 33
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: LIST
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: LIST
7477: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
7478: LD_ADDR_LOC 16
7482: PUSH
7483: LD_INT 2
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: LD_INT 4
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: ST_TO_ADDR
// end ; 2 :
7497: GO 9233
7499: LD_INT 2
7501: DOUBLE
7502: EQUAL
7503: IFTRUE 7507
7505: GO 7716
7507: POP
// begin def_base_level := 1 ;
7508: LD_ADDR_EXP 43
7512: PUSH
7513: LD_INT 1
7515: ST_TO_ADDR
// def_amount_of_people := 2 ;
7516: LD_ADDR_EXP 44
7520: PUSH
7521: LD_INT 2
7523: ST_TO_ADDR
// def_skill_level := 3 ;
7524: LD_ADDR_EXP 45
7528: PUSH
7529: LD_INT 3
7531: ST_TO_ADDR
// def_starting_resources := 3 ;
7532: LD_ADDR_EXP 46
7536: PUSH
7537: LD_INT 3
7539: ST_TO_ADDR
// def_shipments_density := 2 ;
7540: LD_ADDR_EXP 47
7544: PUSH
7545: LD_INT 2
7547: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
7548: LD_ADDR_EXP 48
7552: PUSH
7553: LD_INT 1
7555: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
7556: LD_ADDR_EXP 49
7560: PUSH
7561: LD_INT 2
7563: ST_TO_ADDR
// def_shared_vision := 1 ;
7564: LD_ADDR_EXP 50
7568: PUSH
7569: LD_INT 1
7571: ST_TO_ADDR
// def_morale_flags := 0 ;
7572: LD_ADDR_EXP 51
7576: PUSH
7577: LD_INT 0
7579: ST_TO_ADDR
// def_siberite_detection := 1 ;
7580: LD_ADDR_EXP 52
7584: PUSH
7585: LD_INT 1
7587: ST_TO_ADDR
// def_people_respawning := 0 ;
7588: LD_ADDR_EXP 53
7592: PUSH
7593: LD_INT 0
7595: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
7596: LD_ADDR_EXP 54
7600: PUSH
7601: LD_INT 0
7603: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7604: LD_ADDR_EXP 55
7608: PUSH
7609: LD_INT 0
7611: ST_TO_ADDR
// def_builduptime := 2 ;
7612: LD_ADDR_EXP 56
7616: PUSH
7617: LD_INT 2
7619: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
7620: LD_ADDR_VAR 0 2
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7631: LD_ADDR_VAR 0 3
7635: PUSH
7636: EMPTY
7637: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7638: LD_ADDR_LOC 17
7642: PUSH
7643: EMPTY
7644: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7645: LD_ADDR_LOC 18
7649: PUSH
7650: EMPTY
7651: ST_TO_ADDR
// Banned_Controls := [ ] ;
7652: LD_ADDR_LOC 19
7656: PUSH
7657: EMPTY
7658: ST_TO_ADDR
// Banned_Engines := [ ] ;
7659: LD_ADDR_LOC 20
7663: PUSH
7664: EMPTY
7665: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7666: LD_ADDR_LOC 15
7670: PUSH
7671: LD_INT 4
7673: PUSH
7674: LD_INT 5
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 31
7683: PUSH
7684: LD_INT 32
7686: PUSH
7687: LD_INT 33
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
7699: LD_ADDR_LOC 16
7703: PUSH
7704: LD_INT 1
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: ST_TO_ADDR
// end ; 3 :
7714: GO 9233
7716: LD_INT 3
7718: DOUBLE
7719: EQUAL
7720: IFTRUE 7724
7722: GO 7967
7724: POP
// begin def_base_level := 1 ;
7725: LD_ADDR_EXP 43
7729: PUSH
7730: LD_INT 1
7732: ST_TO_ADDR
// def_amount_of_people := 2 ;
7733: LD_ADDR_EXP 44
7737: PUSH
7738: LD_INT 2
7740: ST_TO_ADDR
// def_skill_level := 3 ;
7741: LD_ADDR_EXP 45
7745: PUSH
7746: LD_INT 3
7748: ST_TO_ADDR
// def_starting_resources := 3 ;
7749: LD_ADDR_EXP 46
7753: PUSH
7754: LD_INT 3
7756: ST_TO_ADDR
// def_shipments_density := 1 ;
7757: LD_ADDR_EXP 47
7761: PUSH
7762: LD_INT 1
7764: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7765: LD_ADDR_EXP 48
7769: PUSH
7770: LD_INT 0
7772: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7773: LD_ADDR_EXP 49
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// def_shared_vision := 1 ;
7781: LD_ADDR_EXP 50
7785: PUSH
7786: LD_INT 1
7788: ST_TO_ADDR
// def_morale_flags := 0 ;
7789: LD_ADDR_EXP 51
7793: PUSH
7794: LD_INT 0
7796: ST_TO_ADDR
// def_siberite_detection := 1 ;
7797: LD_ADDR_EXP 52
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// def_people_respawning := 0 ;
7805: LD_ADDR_EXP 53
7809: PUSH
7810: LD_INT 0
7812: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
7813: LD_ADDR_EXP 54
7817: PUSH
7818: LD_INT 2
7820: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7821: LD_ADDR_EXP 55
7825: PUSH
7826: LD_INT 0
7828: ST_TO_ADDR
// def_builduptime := 1 ;
7829: LD_ADDR_EXP 56
7833: PUSH
7834: LD_INT 1
7836: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
7837: LD_ADDR_VAR 0 2
7841: PUSH
7842: LD_INT 23
7844: PUSH
7845: EMPTY
7846: LIST
7847: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
7848: LD_ADDR_VAR 0 3
7852: PUSH
7853: LD_INT 2
7855: PUSH
7856: LD_INT 37
7858: PUSH
7859: LD_INT 32
7861: PUSH
7862: LD_INT 33
7864: PUSH
7865: LD_INT 36
7867: PUSH
7868: LD_INT 16
7870: PUSH
7871: LD_INT 23
7873: PUSH
7874: LD_INT 21
7876: PUSH
7877: LD_INT 18
7879: PUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 20
7885: PUSH
7886: LD_INT 19
7888: PUSH
7889: LD_INT 25
7891: PUSH
7892: LD_INT 17
7894: PUSH
7895: LD_INT 24
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7915: LD_ADDR_LOC 17
7919: PUSH
7920: EMPTY
7921: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7922: LD_ADDR_LOC 18
7926: PUSH
7927: EMPTY
7928: ST_TO_ADDR
// Banned_Controls := [ ] ;
7929: LD_ADDR_LOC 19
7933: PUSH
7934: EMPTY
7935: ST_TO_ADDR
// Banned_Engines := [ ] ;
7936: LD_ADDR_LOC 20
7940: PUSH
7941: EMPTY
7942: ST_TO_ADDR
// Restricted_Builds := [ ] ;
7943: LD_ADDR_LOC 15
7947: PUSH
7948: EMPTY
7949: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
7950: LD_ADDR_LOC 16
7954: PUSH
7955: EMPTY
7956: ST_TO_ADDR
// No_Mechs := true ;
7957: LD_ADDR_EXP 57
7961: PUSH
7962: LD_INT 1
7964: ST_TO_ADDR
// end ; 4 :
7965: GO 9233
7967: LD_INT 4
7969: DOUBLE
7970: EQUAL
7971: IFTRUE 7975
7973: GO 8150
7975: POP
// begin def_base_level := 1 ;
7976: LD_ADDR_EXP 43
7980: PUSH
7981: LD_INT 1
7983: ST_TO_ADDR
// def_amount_of_people := 2 ;
7984: LD_ADDR_EXP 44
7988: PUSH
7989: LD_INT 2
7991: ST_TO_ADDR
// def_skill_level := 3 ;
7992: LD_ADDR_EXP 45
7996: PUSH
7997: LD_INT 3
7999: ST_TO_ADDR
// def_starting_resources := 3 ;
8000: LD_ADDR_EXP 46
8004: PUSH
8005: LD_INT 3
8007: ST_TO_ADDR
// def_shipments_density := 2 ;
8008: LD_ADDR_EXP 47
8012: PUSH
8013: LD_INT 2
8015: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8016: LD_ADDR_EXP 48
8020: PUSH
8021: LD_INT 1
8023: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8024: LD_ADDR_EXP 49
8028: PUSH
8029: LD_INT 2
8031: ST_TO_ADDR
// def_shared_vision := 1 ;
8032: LD_ADDR_EXP 50
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// def_morale_flags := 0 ;
8040: LD_ADDR_EXP 51
8044: PUSH
8045: LD_INT 0
8047: ST_TO_ADDR
// def_siberite_detection := 1 ;
8048: LD_ADDR_EXP 52
8052: PUSH
8053: LD_INT 1
8055: ST_TO_ADDR
// def_people_respawning := 0 ;
8056: LD_ADDR_EXP 53
8060: PUSH
8061: LD_INT 0
8063: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8064: LD_ADDR_EXP 54
8068: PUSH
8069: LD_INT 0
8071: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8072: LD_ADDR_EXP 55
8076: PUSH
8077: LD_INT 1
8079: ST_TO_ADDR
// def_builduptime := 3 ;
8080: LD_ADDR_EXP 56
8084: PUSH
8085: LD_INT 3
8087: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: LD_INT 1
8095: PUSH
8096: EMPTY
8097: LIST
8098: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8099: LD_ADDR_VAR 0 3
8103: PUSH
8104: EMPTY
8105: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8106: LD_ADDR_LOC 17
8110: PUSH
8111: EMPTY
8112: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8113: LD_ADDR_LOC 18
8117: PUSH
8118: EMPTY
8119: ST_TO_ADDR
// Banned_Controls := [ ] ;
8120: LD_ADDR_LOC 19
8124: PUSH
8125: EMPTY
8126: ST_TO_ADDR
// Banned_Engines := [ ] ;
8127: LD_ADDR_LOC 20
8131: PUSH
8132: EMPTY
8133: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8134: LD_ADDR_LOC 15
8138: PUSH
8139: EMPTY
8140: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8141: LD_ADDR_LOC 16
8145: PUSH
8146: EMPTY
8147: ST_TO_ADDR
// end ; 5 :
8148: GO 9233
8150: LD_INT 5
8152: DOUBLE
8153: EQUAL
8154: IFTRUE 8158
8156: GO 8407
8158: POP
// begin def_base_level := 0 ;
8159: LD_ADDR_EXP 43
8163: PUSH
8164: LD_INT 0
8166: ST_TO_ADDR
// def_amount_of_people := 0 ;
8167: LD_ADDR_EXP 44
8171: PUSH
8172: LD_INT 0
8174: ST_TO_ADDR
// def_skill_level := 0 ;
8175: LD_ADDR_EXP 45
8179: PUSH
8180: LD_INT 0
8182: ST_TO_ADDR
// def_starting_resources := 0 ;
8183: LD_ADDR_EXP 46
8187: PUSH
8188: LD_INT 0
8190: ST_TO_ADDR
// def_shipments_density := 0 ;
8191: LD_ADDR_EXP 47
8195: PUSH
8196: LD_INT 0
8198: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8199: LD_ADDR_EXP 48
8203: PUSH
8204: LD_INT 0
8206: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8207: LD_ADDR_EXP 49
8211: PUSH
8212: LD_INT 0
8214: ST_TO_ADDR
// def_shared_vision := 1 ;
8215: LD_ADDR_EXP 50
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// def_morale_flags := 0 ;
8223: LD_ADDR_EXP 51
8227: PUSH
8228: LD_INT 0
8230: ST_TO_ADDR
// def_siberite_detection := 0 ;
8231: LD_ADDR_EXP 52
8235: PUSH
8236: LD_INT 0
8238: ST_TO_ADDR
// def_people_respawning := 1 ;
8239: LD_ADDR_EXP 53
8243: PUSH
8244: LD_INT 1
8246: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8247: LD_ADDR_EXP 54
8251: PUSH
8252: LD_INT 1
8254: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8255: LD_ADDR_EXP 55
8259: PUSH
8260: LD_INT 0
8262: ST_TO_ADDR
// def_builduptime := 0 ;
8263: LD_ADDR_EXP 56
8267: PUSH
8268: LD_INT 0
8270: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8271: LD_ADDR_VAR 0 2
8275: PUSH
8276: LD_INT 10
8278: PUSH
8279: LD_INT 3
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8286: LD_ADDR_VAR 0 3
8290: PUSH
8291: LD_INT 12
8293: PUSH
8294: LD_INT 11
8296: PUSH
8297: LD_INT 14
8299: PUSH
8300: LD_INT 13
8302: PUSH
8303: LD_INT 5
8305: PUSH
8306: LD_INT 24
8308: PUSH
8309: LD_INT 21
8311: PUSH
8312: LD_INT 33
8314: PUSH
8315: LD_INT 36
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8329: LD_ADDR_LOC 17
8333: PUSH
8334: LD_INT 31
8336: PUSH
8337: EMPTY
8338: LIST
8339: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8340: LD_ADDR_LOC 18
8344: PUSH
8345: EMPTY
8346: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8347: LD_ADDR_LOC 19
8351: PUSH
8352: LD_INT 2
8354: PUSH
8355: EMPTY
8356: LIST
8357: ST_TO_ADDR
// Banned_Engines := [ ] ;
8358: LD_ADDR_LOC 20
8362: PUSH
8363: EMPTY
8364: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8365: LD_ADDR_LOC 15
8369: PUSH
8370: LD_INT 4
8372: PUSH
8373: EMPTY
8374: LIST
8375: PUSH
8376: LD_INT 31
8378: PUSH
8379: LD_INT 32
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
8390: LD_ADDR_LOC 16
8394: PUSH
8395: LD_INT 1
8397: PUSH
8398: LD_INT 1
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: ST_TO_ADDR
// end ; 6 :
8405: GO 9233
8407: LD_INT 6
8409: DOUBLE
8410: EQUAL
8411: IFTRUE 8415
8413: GO 8618
8415: POP
// begin def_base_level := 1 ;
8416: LD_ADDR_EXP 43
8420: PUSH
8421: LD_INT 1
8423: ST_TO_ADDR
// def_amount_of_people := 2 ;
8424: LD_ADDR_EXP 44
8428: PUSH
8429: LD_INT 2
8431: ST_TO_ADDR
// def_skill_level := 3 ;
8432: LD_ADDR_EXP 45
8436: PUSH
8437: LD_INT 3
8439: ST_TO_ADDR
// def_starting_resources := 3 ;
8440: LD_ADDR_EXP 46
8444: PUSH
8445: LD_INT 3
8447: ST_TO_ADDR
// def_shipments_density := 1 ;
8448: LD_ADDR_EXP 47
8452: PUSH
8453: LD_INT 1
8455: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8456: LD_ADDR_EXP 48
8460: PUSH
8461: LD_INT 0
8463: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8464: LD_ADDR_EXP 49
8468: PUSH
8469: LD_INT 1
8471: ST_TO_ADDR
// def_shared_vision := 1 ;
8472: LD_ADDR_EXP 50
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// def_morale_flags := 0 ;
8480: LD_ADDR_EXP 51
8484: PUSH
8485: LD_INT 0
8487: ST_TO_ADDR
// def_siberite_detection := 1 ;
8488: LD_ADDR_EXP 52
8492: PUSH
8493: LD_INT 1
8495: ST_TO_ADDR
// def_people_respawning := 2 ;
8496: LD_ADDR_EXP 53
8500: PUSH
8501: LD_INT 2
8503: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8504: LD_ADDR_EXP 54
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8512: LD_ADDR_EXP 55
8516: PUSH
8517: LD_INT 0
8519: ST_TO_ADDR
// def_builduptime := 1 ;
8520: LD_ADDR_EXP 56
8524: PUSH
8525: LD_INT 1
8527: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8528: LD_ADDR_VAR 0 2
8532: PUSH
8533: LD_INT 23
8535: PUSH
8536: EMPTY
8537: LIST
8538: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
8539: LD_ADDR_VAR 0 3
8543: PUSH
8544: LD_INT 2
8546: PUSH
8547: LD_INT 37
8549: PUSH
8550: LD_INT 31
8552: PUSH
8553: LD_INT 32
8555: PUSH
8556: LD_INT 33
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8566: LD_ADDR_LOC 17
8570: PUSH
8571: EMPTY
8572: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8573: LD_ADDR_LOC 18
8577: PUSH
8578: EMPTY
8579: ST_TO_ADDR
// Banned_Controls := [ ] ;
8580: LD_ADDR_LOC 19
8584: PUSH
8585: EMPTY
8586: ST_TO_ADDR
// Banned_Engines := [ ] ;
8587: LD_ADDR_LOC 20
8591: PUSH
8592: EMPTY
8593: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8594: LD_ADDR_LOC 15
8598: PUSH
8599: EMPTY
8600: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8601: LD_ADDR_LOC 16
8605: PUSH
8606: EMPTY
8607: ST_TO_ADDR
// No_Mechs := true ;
8608: LD_ADDR_EXP 57
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// end ; 7 :
8616: GO 9233
8618: LD_INT 7
8620: DOUBLE
8621: EQUAL
8622: IFTRUE 8626
8624: GO 8824
8626: POP
// begin def_base_level := 1 ;
8627: LD_ADDR_EXP 43
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// def_amount_of_people := 2 ;
8635: LD_ADDR_EXP 44
8639: PUSH
8640: LD_INT 2
8642: ST_TO_ADDR
// def_skill_level := 3 ;
8643: LD_ADDR_EXP 45
8647: PUSH
8648: LD_INT 3
8650: ST_TO_ADDR
// def_starting_resources := 3 ;
8651: LD_ADDR_EXP 46
8655: PUSH
8656: LD_INT 3
8658: ST_TO_ADDR
// def_shipments_density := 1 ;
8659: LD_ADDR_EXP 47
8663: PUSH
8664: LD_INT 1
8666: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8667: LD_ADDR_EXP 48
8671: PUSH
8672: LD_INT 1
8674: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8675: LD_ADDR_EXP 49
8679: PUSH
8680: LD_INT 2
8682: ST_TO_ADDR
// def_shared_vision := 1 ;
8683: LD_ADDR_EXP 50
8687: PUSH
8688: LD_INT 1
8690: ST_TO_ADDR
// def_morale_flags := 0 ;
8691: LD_ADDR_EXP 51
8695: PUSH
8696: LD_INT 0
8698: ST_TO_ADDR
// def_siberite_detection := 1 ;
8699: LD_ADDR_EXP 52
8703: PUSH
8704: LD_INT 1
8706: ST_TO_ADDR
// def_people_respawning := 0 ;
8707: LD_ADDR_EXP 53
8711: PUSH
8712: LD_INT 0
8714: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8715: LD_ADDR_EXP 54
8719: PUSH
8720: LD_INT 1
8722: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8723: LD_ADDR_EXP 55
8727: PUSH
8728: LD_INT 0
8730: ST_TO_ADDR
// def_builduptime := 3 ;
8731: LD_ADDR_EXP 56
8735: PUSH
8736: LD_INT 3
8738: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8739: LD_ADDR_VAR 0 2
8743: PUSH
8744: LD_INT 23
8746: PUSH
8747: EMPTY
8748: LIST
8749: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
8750: LD_ADDR_VAR 0 3
8754: PUSH
8755: LD_INT 37
8757: PUSH
8758: EMPTY
8759: LIST
8760: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8761: LD_ADDR_LOC 17
8765: PUSH
8766: EMPTY
8767: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8768: LD_ADDR_LOC 18
8772: PUSH
8773: EMPTY
8774: ST_TO_ADDR
// Banned_Controls := [ ] ;
8775: LD_ADDR_LOC 19
8779: PUSH
8780: EMPTY
8781: ST_TO_ADDR
// Banned_Engines := [ ] ;
8782: LD_ADDR_LOC 20
8786: PUSH
8787: EMPTY
8788: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8789: LD_ADDR_LOC 15
8793: PUSH
8794: LD_INT 31
8796: PUSH
8797: LD_INT 32
8799: PUSH
8800: LD_INT 33
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: LIST
8807: PUSH
8808: EMPTY
8809: LIST
8810: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
8811: LD_ADDR_LOC 16
8815: PUSH
8816: LD_INT 10
8818: PUSH
8819: EMPTY
8820: LIST
8821: ST_TO_ADDR
// end ; 8 :
8822: GO 9233
8824: LD_INT 8
8826: DOUBLE
8827: EQUAL
8828: IFTRUE 8832
8830: GO 9232
8832: POP
// begin def_base_level := 0 ;
8833: LD_ADDR_EXP 43
8837: PUSH
8838: LD_INT 0
8840: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
8841: LD_ADDR_EXP 44
8845: PUSH
8846: LD_INT 0
8848: PPUSH
8849: LD_INT 1
8851: PPUSH
8852: CALL_OW 12
8856: ST_TO_ADDR
// def_skill_level := 0 ;
8857: LD_ADDR_EXP 45
8861: PUSH
8862: LD_INT 0
8864: ST_TO_ADDR
// def_starting_resources := 2 ;
8865: LD_ADDR_EXP 46
8869: PUSH
8870: LD_INT 2
8872: ST_TO_ADDR
// def_shipments_density := 1 ;
8873: LD_ADDR_EXP 47
8877: PUSH
8878: LD_INT 1
8880: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8881: LD_ADDR_EXP 48
8885: PUSH
8886: LD_INT 0
8888: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8889: LD_ADDR_EXP 49
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// def_shared_vision := 1 ;
8897: LD_ADDR_EXP 50
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
8905: LD_ADDR_EXP 51
8909: PUSH
8910: LD_INT 0
8912: PPUSH
8913: LD_INT 2
8915: PPUSH
8916: CALL_OW 12
8920: ST_TO_ADDR
// def_siberite_detection := 0 ;
8921: LD_ADDR_EXP 52
8925: PUSH
8926: LD_INT 0
8928: ST_TO_ADDR
// def_people_respawning := 0 ;
8929: LD_ADDR_EXP 53
8933: PUSH
8934: LD_INT 0
8936: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8937: LD_ADDR_EXP 54
8941: PUSH
8942: LD_INT 2
8944: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8945: LD_ADDR_EXP 55
8949: PUSH
8950: LD_INT 0
8952: ST_TO_ADDR
// def_builduptime := 0 ;
8953: LD_ADDR_EXP 56
8957: PUSH
8958: LD_INT 0
8960: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
8961: LD_ADDR_VAR 0 2
8965: PUSH
8966: LD_INT 23
8968: PUSH
8969: LD_INT 20
8971: PUSH
8972: LD_INT 40
8974: PUSH
8975: LD_INT 47
8977: PUSH
8978: LD_INT 46
8980: PUSH
8981: LD_INT 39
8983: PUSH
8984: LD_INT 71
8986: PUSH
8987: LD_INT 34
8989: PUSH
8990: LD_INT 41
8992: PUSH
8993: LD_INT 44
8995: PUSH
8996: LD_INT 17
8998: PUSH
8999: LD_INT 16
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9016: LD_ADDR_VAR 0 3
9020: PUSH
9021: LD_INT 37
9023: PUSH
9024: LD_INT 5
9026: PUSH
9027: LD_INT 13
9029: PUSH
9030: LD_INT 34
9032: PUSH
9033: LD_INT 12
9035: PUSH
9036: LD_INT 15
9038: PUSH
9039: LD_INT 11
9041: PUSH
9042: LD_INT 14
9044: PUSH
9045: LD_INT 29
9047: PUSH
9048: LD_INT 30
9050: PUSH
9051: LD_INT 28
9053: PUSH
9054: LD_INT 24
9056: PUSH
9057: LD_INT 25
9059: PUSH
9060: LD_INT 20
9062: PUSH
9063: LD_INT 21
9065: PUSH
9066: LD_INT 22
9068: PUSH
9069: LD_INT 36
9071: PUSH
9072: EMPTY
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9091: LD_ADDR_LOC 17
9095: PUSH
9096: EMPTY
9097: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9098: LD_ADDR_LOC 18
9102: PUSH
9103: LD_INT 14
9105: PUSH
9106: EMPTY
9107: LIST
9108: ST_TO_ADDR
// Banned_Controls := [ ] ;
9109: LD_ADDR_LOC 19
9113: PUSH
9114: EMPTY
9115: ST_TO_ADDR
// Banned_Engines := [ ] ;
9116: LD_ADDR_LOC 20
9120: PUSH
9121: EMPTY
9122: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9123: LD_ADDR_LOC 15
9127: PUSH
9128: LD_INT 31
9130: PUSH
9131: LD_INT 32
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 4
9140: PUSH
9141: EMPTY
9142: LIST
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9148: LD_ADDR_LOC 16
9152: PUSH
9153: LD_INT 2
9155: PUSH
9156: LD_INT 1
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: ST_TO_ADDR
// for i := 1 to 8 do
9163: LD_ADDR_VAR 0 4
9167: PUSH
9168: DOUBLE
9169: LD_INT 1
9171: DEC
9172: ST_TO_ADDR
9173: LD_INT 8
9175: PUSH
9176: FOR_TO
9177: IFFALSE 9228
// if ( Side_Nations [ i ] = 3 ) then
9179: LD_EXP 22
9183: PUSH
9184: LD_VAR 0 4
9188: ARRAY
9189: PUSH
9190: LD_INT 3
9192: EQUAL
9193: IFFALSE 9226
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9195: LD_ADDR_EXP 22
9199: PUSH
9200: LD_EXP 22
9204: PPUSH
9205: LD_VAR 0 4
9209: PPUSH
9210: LD_INT 1
9212: PPUSH
9213: LD_INT 2
9215: PPUSH
9216: CALL_OW 12
9220: PPUSH
9221: CALL_OW 1
9225: ST_TO_ADDR
9226: GO 9176
9228: POP
9229: POP
// end ; end ;
9230: GO 9233
9232: POP
// for i := 1 to 8 do
9233: LD_ADDR_VAR 0 4
9237: PUSH
9238: DOUBLE
9239: LD_INT 1
9241: DEC
9242: ST_TO_ADDR
9243: LD_INT 8
9245: PUSH
9246: FOR_TO
9247: IFFALSE 9331
// if Side_Positions [ i ] then
9249: LD_EXP 21
9253: PUSH
9254: LD_VAR 0 4
9258: ARRAY
9259: IFFALSE 9329
// begin for j in Unavailable_Techs do
9261: LD_ADDR_VAR 0 5
9265: PUSH
9266: LD_VAR 0 2
9270: PUSH
9271: FOR_IN
9272: IFFALSE 9293
// SetTech ( j , i , 0 ) ;
9274: LD_VAR 0 5
9278: PPUSH
9279: LD_VAR 0 4
9283: PPUSH
9284: LD_INT 0
9286: PPUSH
9287: CALL_OW 322
9291: GO 9271
9293: POP
9294: POP
// for j in Unavailable_Builds do
9295: LD_ADDR_VAR 0 5
9299: PUSH
9300: LD_VAR 0 3
9304: PUSH
9305: FOR_IN
9306: IFFALSE 9327
// SetRestrict ( j , i , 0 ) ;
9308: LD_VAR 0 5
9312: PPUSH
9313: LD_VAR 0 4
9317: PPUSH
9318: LD_INT 0
9320: PPUSH
9321: CALL_OW 324
9325: GO 9305
9327: POP
9328: POP
// end ;
9329: GO 9246
9331: POP
9332: POP
// end ;
9333: LD_VAR 0 1
9337: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9338: LD_INT 0
9340: PPUSH
9341: PPUSH
9342: PPUSH
9343: PPUSH
9344: PPUSH
9345: PPUSH
9346: PPUSH
// for i := 1 to Restricted_Builds do
9347: LD_ADDR_VAR 0 2
9351: PUSH
9352: DOUBLE
9353: LD_INT 1
9355: DEC
9356: ST_TO_ADDR
9357: LD_LOC 15
9361: PUSH
9362: FOR_TO
9363: IFFALSE 9673
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9365: LD_LOC 15
9369: PUSH
9370: LD_VAR 0 2
9374: ARRAY
9375: PUSH
9376: LD_INT 1
9378: ARRAY
9379: PUSH
9380: LD_INT 31
9382: DOUBLE
9383: EQUAL
9384: IFTRUE 9400
9386: LD_INT 32
9388: DOUBLE
9389: EQUAL
9390: IFTRUE 9400
9392: LD_INT 33
9394: DOUBLE
9395: EQUAL
9396: IFTRUE 9400
9398: GO 9411
9400: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
9401: LD_ADDR_VAR 0 6
9405: PUSH
9406: LD_STRING #Turrets
9408: ST_TO_ADDR
9409: GO 9456
9411: LD_INT 4
9413: DOUBLE
9414: EQUAL
9415: IFTRUE 9425
9417: LD_INT 5
9419: DOUBLE
9420: EQUAL
9421: IFTRUE 9425
9423: GO 9436
9425: POP
// btype := #Armouries ; b_Behemoth :
9426: LD_ADDR_VAR 0 6
9430: PUSH
9431: LD_STRING #Armouries
9433: ST_TO_ADDR
9434: GO 9456
9436: LD_INT 37
9438: DOUBLE
9439: EQUAL
9440: IFTRUE 9444
9442: GO 9455
9444: POP
// btype := #Behemoths ; end ;
9445: LD_ADDR_VAR 0 6
9449: PUSH
9450: LD_STRING #Behemoths
9452: ST_TO_ADDR
9453: GO 9456
9455: POP
// list := [ ] ;
9456: LD_ADDR_VAR 0 7
9460: PUSH
9461: EMPTY
9462: ST_TO_ADDR
// for j := 1 to 8 do
9463: LD_ADDR_VAR 0 3
9467: PUSH
9468: DOUBLE
9469: LD_INT 1
9471: DEC
9472: ST_TO_ADDR
9473: LD_INT 8
9475: PUSH
9476: FOR_TO
9477: IFFALSE 9570
// if Side_Positions [ j ] then
9479: LD_EXP 21
9483: PUSH
9484: LD_VAR 0 3
9488: ARRAY
9489: IFFALSE 9568
// begin amount := 0 ;
9491: LD_ADDR_VAR 0 5
9495: PUSH
9496: LD_INT 0
9498: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
9499: LD_ADDR_VAR 0 4
9503: PUSH
9504: LD_LOC 15
9508: PUSH
9509: LD_VAR 0 2
9513: ARRAY
9514: PUSH
9515: FOR_IN
9516: IFFALSE 9564
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
9518: LD_ADDR_VAR 0 5
9522: PUSH
9523: LD_VAR 0 5
9527: PUSH
9528: LD_INT 22
9530: PUSH
9531: LD_VAR 0 3
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 30
9542: PUSH
9543: LD_VAR 0 4
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: PLUS
9561: ST_TO_ADDR
9562: GO 9515
9564: POP
9565: POP
// break ;
9566: GO 9570
// end ;
9568: GO 9476
9570: POP
9571: POP
// list := [ ] ;
9572: LD_ADDR_VAR 0 7
9576: PUSH
9577: EMPTY
9578: ST_TO_ADDR
// for j := 1 to 8 do
9579: LD_ADDR_VAR 0 3
9583: PUSH
9584: DOUBLE
9585: LD_INT 1
9587: DEC
9588: ST_TO_ADDR
9589: LD_INT 8
9591: PUSH
9592: FOR_TO
9593: IFFALSE 9613
// list := list ^ amount ;
9595: LD_ADDR_VAR 0 7
9599: PUSH
9600: LD_VAR 0 7
9604: PUSH
9605: LD_VAR 0 5
9609: ADD
9610: ST_TO_ADDR
9611: GO 9592
9613: POP
9614: POP
// Already_Built := Already_Built ^ [ list ] ;
9615: LD_ADDR_LOC 21
9619: PUSH
9620: LD_LOC 21
9624: PUSH
9625: LD_VAR 0 7
9629: PUSH
9630: EMPTY
9631: LIST
9632: ADD
9633: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
9634: LD_ADDR_LOC 22
9638: PUSH
9639: LD_LOC 22
9643: PUSH
9644: LD_VAR 0 6
9648: PUSH
9649: LD_VAR 0 5
9653: PUSH
9654: LD_LOC 16
9658: PUSH
9659: LD_VAR 0 2
9663: ARRAY
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: ADD
9670: ST_TO_ADDR
// end ;
9671: GO 9362
9673: POP
9674: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9675: LD_ADDR_LOC 23
9679: PUSH
9680: LD_INT 0
9682: PUSH
9683: LD_INT 0
9685: PUSH
9686: LD_INT 0
9688: PUSH
9689: LD_INT 0
9691: PUSH
9692: LD_INT 0
9694: PUSH
9695: LD_INT 0
9697: PUSH
9698: LD_INT 0
9700: PUSH
9701: LD_INT 0
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: ST_TO_ADDR
// if Limits_Info then
9714: LD_LOC 22
9718: IFFALSE 9734
// Limits_Info := #Limits ^ Limits_Info ;
9720: LD_ADDR_LOC 22
9724: PUSH
9725: LD_STRING #Limits
9727: PUSH
9728: LD_LOC 22
9732: ADD
9733: ST_TO_ADDR
// end ;
9734: LD_VAR 0 1
9738: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
9739: LD_INT 0
9741: PPUSH
9742: PPUSH
9743: PPUSH
9744: PPUSH
// for i := 1 to Restricted_Builds do
9745: LD_ADDR_VAR 0 7
9749: PUSH
9750: DOUBLE
9751: LD_INT 1
9753: DEC
9754: ST_TO_ADDR
9755: LD_LOC 15
9759: PUSH
9760: FOR_TO
9761: IFFALSE 10184
// if BType in Restricted_Builds [ i ] then
9763: LD_VAR 0 2
9767: PUSH
9768: LD_LOC 15
9772: PUSH
9773: LD_VAR 0 7
9777: ARRAY
9778: IN
9779: IFFALSE 10182
// begin if old_side then
9781: LD_VAR 0 4
9785: IFFALSE 9911
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
9787: LD_LOC 21
9791: PUSH
9792: LD_VAR 0 7
9796: ARRAY
9797: PUSH
9798: LD_VAR 0 3
9802: ARRAY
9803: PUSH
9804: LD_VAR 0 5
9808: PLUS
9809: PUSH
9810: LD_LOC 16
9814: PUSH
9815: LD_VAR 0 7
9819: ARRAY
9820: GREATER
9821: IFFALSE 9847
// begin SetSide ( un , old_side ) ;
9823: LD_VAR 0 1
9827: PPUSH
9828: LD_VAR 0 4
9832: PPUSH
9833: CALL_OW 235
// count := 0 ;
9837: LD_ADDR_VAR 0 5
9841: PUSH
9842: LD_INT 0
9844: ST_TO_ADDR
// end else
9845: GO 9911
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
9847: LD_ADDR_LOC 21
9851: PUSH
9852: LD_LOC 21
9856: PPUSH
9857: LD_VAR 0 7
9861: PPUSH
9862: LD_LOC 21
9866: PUSH
9867: LD_VAR 0 7
9871: ARRAY
9872: PPUSH
9873: LD_VAR 0 4
9877: PPUSH
9878: LD_LOC 21
9882: PUSH
9883: LD_VAR 0 7
9887: ARRAY
9888: PUSH
9889: LD_VAR 0 4
9893: ARRAY
9894: PUSH
9895: LD_VAR 0 5
9899: MINUS
9900: PPUSH
9901: CALL_OW 1
9905: PPUSH
9906: CALL_OW 1
9910: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
9911: LD_ADDR_LOC 21
9915: PUSH
9916: LD_LOC 21
9920: PPUSH
9921: LD_VAR 0 7
9925: PPUSH
9926: LD_LOC 21
9930: PUSH
9931: LD_VAR 0 7
9935: ARRAY
9936: PPUSH
9937: LD_VAR 0 3
9941: PPUSH
9942: LD_LOC 21
9946: PUSH
9947: LD_VAR 0 7
9951: ARRAY
9952: PUSH
9953: LD_VAR 0 3
9957: ARRAY
9958: PUSH
9959: LD_VAR 0 5
9963: PLUS
9964: PPUSH
9965: CALL_OW 1
9969: PPUSH
9970: CALL_OW 1
9974: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
9975: LD_VAR 0 5
9979: PUSH
9980: LD_INT 0
9982: NONEQUAL
9983: PUSH
9984: LD_VAR 0 3
9988: PUSH
9989: LD_OWVAR 2
9993: EQUAL
9994: AND
9995: IFFALSE 10038
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
9997: LD_ADDR_LOC 22
10001: PUSH
10002: LD_LOC 22
10006: PPUSH
10007: LD_INT 3
10009: PUSH
10010: LD_VAR 0 7
10014: MUL
10015: PPUSH
10016: LD_LOC 21
10020: PUSH
10021: LD_VAR 0 7
10025: ARRAY
10026: PUSH
10027: LD_VAR 0 3
10031: ARRAY
10032: PPUSH
10033: CALL_OW 1
10037: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10038: LD_LOC 21
10042: PUSH
10043: LD_VAR 0 7
10047: ARRAY
10048: PUSH
10049: LD_VAR 0 3
10053: ARRAY
10054: PUSH
10055: LD_LOC 16
10059: PUSH
10060: LD_VAR 0 7
10064: ARRAY
10065: GREATER
10066: IFFALSE 10093
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10068: LD_ADDR_LOC 23
10072: PUSH
10073: LD_LOC 23
10077: PPUSH
10078: LD_VAR 0 3
10082: PPUSH
10083: LD_INT 1
10085: PPUSH
10086: CALL_OW 1
10090: ST_TO_ADDR
// end else
10091: GO 10180
// begin for j := 1 to Restricted_Builds do
10093: LD_ADDR_VAR 0 8
10097: PUSH
10098: DOUBLE
10099: LD_INT 1
10101: DEC
10102: ST_TO_ADDR
10103: LD_LOC 15
10107: PUSH
10108: FOR_TO
10109: IFFALSE 10153
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10111: LD_LOC 21
10115: PUSH
10116: LD_VAR 0 8
10120: ARRAY
10121: PUSH
10122: LD_VAR 0 3
10126: ARRAY
10127: PUSH
10128: LD_LOC 16
10132: PUSH
10133: LD_VAR 0 8
10137: ARRAY
10138: GREATER
10139: IFFALSE 10151
// begin Is_Cheater := true ;
10141: LD_ADDR_VAR 0 9
10145: PUSH
10146: LD_INT 1
10148: ST_TO_ADDR
// break ;
10149: GO 10153
// end ;
10151: GO 10108
10153: POP
10154: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10155: LD_ADDR_LOC 23
10159: PUSH
10160: LD_LOC 23
10164: PPUSH
10165: LD_VAR 0 3
10169: PPUSH
10170: LD_VAR 0 9
10174: PPUSH
10175: CALL_OW 1
10179: ST_TO_ADDR
// end ; break ;
10180: GO 10184
// end ;
10182: GO 9760
10184: POP
10185: POP
// end ;
10186: LD_VAR 0 6
10190: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10191: LD_VAR 0 5
10195: PUSH
10196: LD_LOC 17
10200: IN
10201: PUSH
10202: LD_VAR 0 2
10206: PUSH
10207: LD_LOC 18
10211: IN
10212: OR
10213: PUSH
10214: LD_VAR 0 4
10218: PUSH
10219: LD_LOC 19
10223: IN
10224: OR
10225: PUSH
10226: LD_VAR 0 3
10230: PUSH
10231: LD_LOC 20
10235: IN
10236: OR
10237: IFFALSE 10248
// ComCancel ( factory ) ;
10239: LD_VAR 0 1
10243: PPUSH
10244: CALL_OW 127
// end ;
10248: PPOPN 5
10250: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10251: LD_VAR 0 2
10255: PUSH
10256: LD_LOC 17
10260: IN
10261: IFFALSE 10272
// ComCancel ( building ) ;
10263: LD_VAR 0 1
10267: PPUSH
10268: CALL_OW 127
// end ; end_of_file
10272: PPOPN 2
10274: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
10275: LD_INT 0
10277: PPUSH
10278: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10279: LD_ADDR_VAR 0 2
10283: PUSH
10284: LD_STRING #Multi1x1-Time
10286: PUSH
10287: LD_OWVAR 1
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: ST_TO_ADDR
// if WaitServerStrings then
10296: LD_EXP 59
10300: IFFALSE 10318
// AllStrings = AllStrings ^ WaitServerStrings ;
10302: LD_ADDR_VAR 0 2
10306: PUSH
10307: LD_VAR 0 2
10311: PUSH
10312: LD_EXP 59
10316: ADD
10317: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10318: LD_INT 0
10320: PUSH
10321: LD_EXP 16
10325: PUSH
10326: LD_OWVAR 1
10330: MINUS
10331: LESSEQUAL
10332: IFFALSE 10363
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10334: LD_ADDR_VAR 0 2
10338: PUSH
10339: LD_VAR 0 2
10343: PUSH
10344: LD_STRING #allowedsibbomb
10346: PUSH
10347: LD_EXP 16
10351: PUSH
10352: LD_OWVAR 1
10356: MINUS
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: ADD
10362: ST_TO_ADDR
// if ( ExtraStrings ) then
10363: LD_EXP 58
10367: IFFALSE 10389
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10369: LD_ADDR_VAR 0 2
10373: PUSH
10374: LD_VAR 0 2
10378: PUSH
10379: LD_STRING 
10381: ADD
10382: PUSH
10383: LD_EXP 58
10387: ADD
10388: ST_TO_ADDR
// if ( Display_kings ) and not isSGUI then
10389: LD_EXP 60
10393: PUSH
10394: LD_OWVAR 83
10398: NOT
10399: AND
10400: IFFALSE 10418
// AllStrings = AllStrings ^ Display_kings ;
10402: LD_ADDR_VAR 0 2
10406: PUSH
10407: LD_VAR 0 2
10411: PUSH
10412: LD_EXP 60
10416: ADD
10417: ST_TO_ADDR
// if ( LimitsStrings ) then
10418: CALL 7115 0 0
10422: IFFALSE 10444
// AllStrings := AllStrings ^  ^ LimitsStrings ;
10424: LD_ADDR_VAR 0 2
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_STRING 
10436: ADD
10437: PUSH
10438: CALL 7115 0 0
10442: ADD
10443: ST_TO_ADDR
// Display_Strings := AllStrings ;
10444: LD_ADDR_OWVAR 47
10448: PUSH
10449: LD_VAR 0 2
10453: ST_TO_ADDR
// end ;
10454: LD_VAR 0 1
10458: RET
// every 0 0$1 do
10459: GO 10461
10461: DISABLE
// begin ShowTimer ;
10462: CALL 10275 0 0
// enable ;
10466: ENABLE
// end ; end_of_file
10467: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
10468: LD_INT 0
10470: PPUSH
10471: PPUSH
10472: PPUSH
// sharedPoints1 = [ ] ;
10473: LD_ADDR_LOC 24
10477: PUSH
10478: EMPTY
10479: ST_TO_ADDR
// sharedPoints2 = [ ] ;
10480: LD_ADDR_LOC 25
10484: PUSH
10485: EMPTY
10486: ST_TO_ADDR
// sharedPoints3 = [ ] ;
10487: LD_ADDR_LOC 26
10491: PUSH
10492: EMPTY
10493: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
10494: LD_ADDR_VAR 0 2
10498: PUSH
10499: DOUBLE
10500: LD_INT 1
10502: DEC
10503: ST_TO_ADDR
10504: LD_EXP 21
10508: PUSH
10509: LD_INT 0
10511: PLUS
10512: PUSH
10513: FOR_TO
10514: IFFALSE 10616
// begin if not Side_Positions [ i ] = 0 then
10516: LD_EXP 21
10520: PUSH
10521: LD_VAR 0 2
10525: ARRAY
10526: PUSH
10527: LD_INT 0
10529: EQUAL
10530: NOT
10531: IFFALSE 10545
// SetMultiScore ( i , 0 ) ;
10533: LD_VAR 0 2
10537: PPUSH
10538: LD_INT 0
10540: PPUSH
10541: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
10545: LD_ADDR_LOC 24
10549: PUSH
10550: LD_LOC 24
10554: PPUSH
10555: LD_VAR 0 2
10559: PPUSH
10560: LD_INT 0
10562: PPUSH
10563: CALL_OW 1
10567: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
10568: LD_ADDR_LOC 25
10572: PUSH
10573: LD_LOC 25
10577: PPUSH
10578: LD_VAR 0 2
10582: PPUSH
10583: LD_INT 0
10585: PPUSH
10586: CALL_OW 1
10590: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
10591: LD_ADDR_LOC 26
10595: PUSH
10596: LD_LOC 26
10600: PPUSH
10601: LD_VAR 0 2
10605: PPUSH
10606: LD_INT 0
10608: PPUSH
10609: CALL_OW 1
10613: ST_TO_ADDR
// end ;
10614: GO 10513
10616: POP
10617: POP
// pointGame = true ;
10618: LD_ADDR_LOC 27
10622: PUSH
10623: LD_INT 1
10625: ST_TO_ADDR
// end ;
10626: LD_VAR 0 1
10630: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
10631: LD_LOC 27
10635: IFFALSE 11046
10637: GO 10639
10639: DISABLE
10640: LD_INT 0
10642: PPUSH
10643: PPUSH
10644: PPUSH
10645: PPUSH
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
10650: PPUSH
10651: PPUSH
10652: PPUSH
10653: PPUSH
10654: PPUSH
// begin if isSGUI then
10655: LD_OWVAR 83
10659: IFFALSE 11046
// begin if Teams [ 1 ] then
10661: LD_EXP 19
10665: PUSH
10666: LD_INT 1
10668: ARRAY
10669: IFFALSE 10681
// red = true else
10671: LD_ADDR_VAR 0 2
10675: PUSH
10676: LD_INT 1
10678: ST_TO_ADDR
10679: GO 10689
// red = false ;
10681: LD_ADDR_VAR 0 2
10685: PUSH
10686: LD_INT 0
10688: ST_TO_ADDR
// if Teams [ 2 ] then
10689: LD_EXP 19
10693: PUSH
10694: LD_INT 2
10696: ARRAY
10697: IFFALSE 10709
// blue = true else
10699: LD_ADDR_VAR 0 3
10703: PUSH
10704: LD_INT 1
10706: ST_TO_ADDR
10707: GO 10717
// blue = false ;
10709: LD_ADDR_VAR 0 3
10713: PUSH
10714: LD_INT 0
10716: ST_TO_ADDR
// if Teams [ 3 ] then
10717: LD_EXP 19
10721: PUSH
10722: LD_INT 3
10724: ARRAY
10725: IFFALSE 10737
// yel = true else
10727: LD_ADDR_VAR 0 4
10731: PUSH
10732: LD_INT 1
10734: ST_TO_ADDR
10735: GO 10745
// yel = false ;
10737: LD_ADDR_VAR 0 4
10741: PUSH
10742: LD_INT 0
10744: ST_TO_ADDR
// if Teams [ 4 ] then
10745: LD_EXP 19
10749: PUSH
10750: LD_INT 4
10752: ARRAY
10753: IFFALSE 10765
// green = true else
10755: LD_ADDR_VAR 0 5
10759: PUSH
10760: LD_INT 1
10762: ST_TO_ADDR
10763: GO 10773
// green = false ;
10765: LD_ADDR_VAR 0 5
10769: PUSH
10770: LD_INT 0
10772: ST_TO_ADDR
// if def_public_score then
10773: LD_EXP 1
10777: IFFALSE 10789
// p = true else
10779: LD_ADDR_VAR 0 12
10783: PUSH
10784: LD_INT 1
10786: ST_TO_ADDR
10787: GO 10797
// p = false ;
10789: LD_ADDR_VAR 0 12
10793: PUSH
10794: LD_INT 0
10796: ST_TO_ADDR
// if team_game then
10797: LD_EXP 23
10801: IFFALSE 10882
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
10803: LD_ADDR_VAR 0 13
10807: PUSH
10808: LD_INT 3
10810: PUSH
10811: LD_INT 1
10813: PUSH
10814: LD_INT 2
10816: PUSH
10817: LD_INT 7
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: PUSH
10826: LD_EXP 32
10830: ARRAY
10831: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
10832: LD_ADDR_VAR 0 10
10836: PUSH
10837: LD_STRING {
10839: PUSH
10840: LD_VAR 0 3
10844: STR
10845: PUSH
10846: LD_STRING ,
10848: STR
10849: PUSH
10850: LD_VAR 0 4
10854: STR
10855: PUSH
10856: LD_STRING ,
10858: STR
10859: PUSH
10860: LD_VAR 0 2
10864: STR
10865: PUSH
10866: LD_STRING ,0,0,0,
10868: STR
10869: PUSH
10870: LD_VAR 0 5
10874: STR
10875: PUSH
10876: LD_STRING ,0}
10878: STR
10879: ST_TO_ADDR
// end else
10880: GO 10982
// begin you = your_side ;
10882: LD_ADDR_VAR 0 13
10886: PUSH
10887: LD_OWVAR 2
10891: ST_TO_ADDR
// s = { ;
10892: LD_ADDR_VAR 0 10
10896: PUSH
10897: LD_STRING {
10899: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
10900: LD_ADDR_VAR 0 1
10904: PUSH
10905: DOUBLE
10906: LD_INT 1
10908: DEC
10909: ST_TO_ADDR
10910: LD_EXP 21
10914: PUSH
10915: LD_INT 0
10917: PLUS
10918: PUSH
10919: FOR_TO
10920: IFFALSE 10966
// if side_positions [ i ] then
10922: LD_EXP 21
10926: PUSH
10927: LD_VAR 0 1
10931: ARRAY
10932: IFFALSE 10950
// s = s & 1, else
10934: LD_ADDR_VAR 0 10
10938: PUSH
10939: LD_VAR 0 10
10943: PUSH
10944: LD_STRING 1,
10946: STR
10947: ST_TO_ADDR
10948: GO 10964
// s = s & 0, ;
10950: LD_ADDR_VAR 0 10
10954: PUSH
10955: LD_VAR 0 10
10959: PUSH
10960: LD_STRING 0,
10962: STR
10963: ST_TO_ADDR
10964: GO 10919
10966: POP
10967: POP
// s = s & } ;
10968: LD_ADDR_VAR 0 10
10972: PUSH
10973: LD_VAR 0 10
10977: PUSH
10978: LD_STRING }
10980: STR
10981: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
10982: LD_STRING initScore(
10984: PUSH
10985: LD_VAR 0 10
10989: STR
10990: PUSH
10991: LD_STRING ,
10993: STR
10994: PUSH
10995: LD_VAR 0 12
10999: STR
11000: PUSH
11001: LD_STRING ,
11003: STR
11004: PUSH
11005: LD_VAR 0 13
11009: STR
11010: PUSH
11011: LD_STRING  );
11013: STR
11014: PPUSH
11015: CALL_OW 559
// if game_type = 3 then
11019: LD_EXP 41
11023: PUSH
11024: LD_INT 3
11026: EQUAL
11027: IFFALSE 11046
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
11029: LD_STRING AddScorePoints(2,2,
11031: PUSH
11032: LD_EXP 30
11036: STR
11037: PUSH
11038: LD_STRING  );
11040: STR
11041: PPUSH
11042: CALL_OW 559
// end ; end ;
11046: PPOPN 13
11048: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
// case typ of 1 :
11053: LD_VAR 0 3
11057: PUSH
11058: LD_INT 1
11060: DOUBLE
11061: EQUAL
11062: IFTRUE 11066
11064: GO 11094
11066: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
11067: LD_ADDR_LOC 24
11071: PUSH
11072: LD_LOC 24
11076: PPUSH
11077: LD_VAR 0 1
11081: PPUSH
11082: LD_VAR 0 2
11086: PPUSH
11087: CALL_OW 1
11091: ST_TO_ADDR
11092: GO 11167
11094: LD_INT 2
11096: DOUBLE
11097: EQUAL
11098: IFTRUE 11102
11100: GO 11130
11102: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
11103: LD_ADDR_LOC 25
11107: PUSH
11108: LD_LOC 25
11112: PPUSH
11113: LD_VAR 0 1
11117: PPUSH
11118: LD_VAR 0 2
11122: PPUSH
11123: CALL_OW 1
11127: ST_TO_ADDR
11128: GO 11167
11130: LD_INT 3
11132: DOUBLE
11133: EQUAL
11134: IFTRUE 11138
11136: GO 11166
11138: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
11139: LD_ADDR_LOC 26
11143: PUSH
11144: LD_LOC 26
11148: PPUSH
11149: LD_VAR 0 1
11153: PPUSH
11154: LD_VAR 0 2
11158: PPUSH
11159: CALL_OW 1
11163: ST_TO_ADDR
11164: GO 11167
11166: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
11167: LD_ADDR_VAR 0 5
11171: PUSH
11172: LD_LOC 24
11176: PUSH
11177: LD_VAR 0 1
11181: ARRAY
11182: PUSH
11183: LD_LOC 25
11187: PUSH
11188: LD_VAR 0 1
11192: ARRAY
11193: PLUS
11194: PUSH
11195: LD_LOC 26
11199: PUSH
11200: LD_VAR 0 1
11204: ARRAY
11205: PLUS
11206: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
11207: LD_VAR 0 1
11211: PPUSH
11212: LD_VAR 0 5
11216: PPUSH
11217: CALL_OW 506
// end ; end_of_file
11221: LD_VAR 0 4
11225: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11226: LD_INT 0
11228: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11229: LD_VAR 0 1
11233: PPUSH
11234: CALL_OW 255
11238: PUSH
11239: LD_VAR 0 4
11243: EQUAL
11244: IFFALSE 11263
// begin SetAchievement ( ACH_RAD ) ;
11246: LD_STRING ACH_RAD
11248: PPUSH
11249: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11253: LD_STRING ACH_NL
11255: PPUSH
11256: LD_INT 1
11258: PPUSH
11259: CALL_OW 564
// end end ;
11263: LD_VAR 0 5
11267: RET
// export function SA_Win ( side ) ; begin
11268: LD_INT 0
11270: PPUSH
// case side of 1 :
11271: LD_VAR 0 1
11275: PUSH
11276: LD_INT 1
11278: DOUBLE
11279: EQUAL
11280: IFTRUE 11284
11282: GO 11297
11284: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11285: LD_STRING ACH_AH
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 564
11295: GO 11460
11297: LD_INT 2
11299: DOUBLE
11300: EQUAL
11301: IFTRUE 11305
11303: GO 11318
11305: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11306: LD_STRING ACH_E
11308: PPUSH
11309: LD_INT 1
11311: PPUSH
11312: CALL_OW 564
11316: GO 11460
11318: LD_INT 3
11320: DOUBLE
11321: EQUAL
11322: IFTRUE 11326
11324: GO 11339
11326: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11327: LD_STRING ACH_OOL
11329: PPUSH
11330: LD_INT 1
11332: PPUSH
11333: CALL_OW 564
11337: GO 11460
11339: LD_INT 1
11341: PUSH
11342: LD_INT 2
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: DOUBLE
11349: EQUAL
11350: IFTRUE 11354
11352: GO 11379
11354: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11355: LD_STRING ACH_AH
11357: PPUSH
11358: LD_REAL  5.00000000000000E-0001
11361: PPUSH
11362: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11366: LD_STRING ACH_E
11368: PPUSH
11369: LD_REAL  5.00000000000000E-0001
11372: PPUSH
11373: CALL_OW 564
// end ; [ 2 , 3 ] :
11377: GO 11460
11379: LD_INT 2
11381: PUSH
11382: LD_INT 3
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: DOUBLE
11389: EQUAL
11390: IFTRUE 11394
11392: GO 11419
11394: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11395: LD_STRING ACH_OOL
11397: PPUSH
11398: LD_REAL  5.00000000000000E-0001
11401: PPUSH
11402: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11406: LD_STRING ACH_E
11408: PPUSH
11409: LD_REAL  5.00000000000000E-0001
11412: PPUSH
11413: CALL_OW 564
// end ; [ 3 , 1 ] :
11417: GO 11460
11419: LD_INT 3
11421: PUSH
11422: LD_INT 1
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: DOUBLE
11429: EQUAL
11430: IFTRUE 11434
11432: GO 11459
11434: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11435: LD_STRING ACH_AH
11437: PPUSH
11438: LD_REAL  5.00000000000000E-0001
11441: PPUSH
11442: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
11446: LD_STRING ACH_OOL
11448: PPUSH
11449: LD_REAL  5.00000000000000E-0001
11452: PPUSH
11453: CALL_OW 564
// end ; end ;
11457: GO 11460
11459: POP
// end ; end_of_file
11460: LD_VAR 0 2
11464: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
11465: LD_INT 0
11467: PPUSH
11468: PPUSH
// enable ( 98 ) ;
11469: LD_INT 98
11471: ENABLE_MARKED
// GameEnded = false ;
11472: LD_ADDR_LOC 29
11476: PUSH
11477: LD_INT 0
11479: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11480: LD_ADDR_LOC 28
11484: PUSH
11485: LD_INT 0
11487: PUSH
11488: LD_INT 0
11490: PUSH
11491: LD_INT 0
11493: PUSH
11494: LD_INT 0
11496: PUSH
11497: LD_INT 0
11499: PUSH
11500: LD_INT 0
11502: PUSH
11503: LD_INT 0
11505: PUSH
11506: LD_INT 0
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: ST_TO_ADDR
// unfoged = false ;
11519: LD_ADDR_LOC 30
11523: PUSH
11524: LD_INT 0
11526: ST_TO_ADDR
// defeated_specs := [ ] ;
11527: LD_ADDR_LOC 31
11531: PUSH
11532: EMPTY
11533: ST_TO_ADDR
// for i = 1 to side_positions do
11534: LD_ADDR_VAR 0 2
11538: PUSH
11539: DOUBLE
11540: LD_INT 1
11542: DEC
11543: ST_TO_ADDR
11544: LD_EXP 21
11548: PUSH
11549: FOR_TO
11550: IFFALSE 11590
// if not side_positions [ i ] then
11552: LD_EXP 21
11556: PUSH
11557: LD_VAR 0 2
11561: ARRAY
11562: NOT
11563: IFFALSE 11588
// defeated = replace ( defeated , i , true ) ;
11565: LD_ADDR_LOC 28
11569: PUSH
11570: LD_LOC 28
11574: PPUSH
11575: LD_VAR 0 2
11579: PPUSH
11580: LD_INT 1
11582: PPUSH
11583: CALL_OW 1
11587: ST_TO_ADDR
11588: GO 11549
11590: POP
11591: POP
// end ;
11592: LD_VAR 0 1
11596: RET
// function CanWinLoose ; begin
11597: LD_INT 0
11599: PPUSH
// Result := true ;
11600: LD_ADDR_VAR 0 1
11604: PUSH
11605: LD_INT 1
11607: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
11608: CALL_OW 518
11612: PUSH
11613: CALL_OW 519
11617: PUSH
11618: LD_INT 0
11620: GREATER
11621: AND
11622: IFFALSE 11632
// Result := false ;
11624: LD_ADDR_VAR 0 1
11628: PUSH
11629: LD_INT 0
11631: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11632: CALL_OW 531
11636: PUSH
11637: CALL_OW 519
11641: PUSH
11642: LD_INT 1
11644: GREATER
11645: AND
11646: IFFALSE 11656
// Result := false ;
11648: LD_ADDR_VAR 0 1
11652: PUSH
11653: LD_INT 0
11655: ST_TO_ADDR
// end ;
11656: LD_VAR 0 1
11660: RET
// export function HasPower ( i ) ; var k , h ; begin
11661: LD_INT 0
11663: PPUSH
11664: PPUSH
11665: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
11666: LD_VAR 0 1
11670: PPUSH
11671: CALL_OW 108
11675: NOT
11676: PUSH
11677: LD_EXP 20
11681: PUSH
11682: LD_VAR 0 1
11686: ARRAY
11687: NOT
11688: AND
11689: PUSH
11690: LD_OWVAR 4
11694: AND
11695: IFFALSE 11707
// begin result = false ;
11697: LD_ADDR_VAR 0 2
11701: PUSH
11702: LD_INT 0
11704: ST_TO_ADDR
// end else
11705: GO 12002
// case def_win_rules of 0 :
11707: LD_EXP 17
11711: PUSH
11712: LD_INT 0
11714: DOUBLE
11715: EQUAL
11716: IFTRUE 11720
11718: GO 11883
11720: POP
// if def_people_respawning then
11721: LD_EXP 53
11725: IFFALSE 11816
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
11727: LD_ADDR_VAR 0 2
11731: PUSH
11732: LD_INT 22
11734: PUSH
11735: LD_VAR 0 1
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 2
11746: PUSH
11747: LD_INT 21
11749: PUSH
11750: LD_INT 1
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 33
11759: PUSH
11760: LD_INT 3
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 33
11769: PUSH
11770: LD_INT 5
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 30
11779: PUSH
11780: LD_INT 0
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 30
11789: PUSH
11790: LD_INT 1
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PPUSH
11809: CALL_OW 69
11813: ST_TO_ADDR
11814: GO 11881
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
11816: LD_ADDR_VAR 0 2
11820: PUSH
11821: LD_INT 22
11823: PUSH
11824: LD_VAR 0 1
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: LD_INT 2
11835: PUSH
11836: LD_INT 21
11838: PUSH
11839: LD_INT 1
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 33
11848: PUSH
11849: LD_INT 3
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 33
11858: PUSH
11859: LD_INT 5
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: ST_TO_ADDR
11881: GO 12002
11883: LD_INT 1
11885: DOUBLE
11886: EQUAL
11887: IFTRUE 11891
11889: GO 11930
11891: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 22
11899: PUSH
11900: LD_VAR 0 1
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 21
11911: PUSH
11912: LD_INT 1
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PPUSH
11923: CALL_OW 69
11927: ST_TO_ADDR
11928: GO 12002
11930: LD_INT 2
11932: DOUBLE
11933: EQUAL
11934: IFTRUE 11938
11936: GO 12001
11938: POP
// begin h = false ;
11939: LD_ADDR_VAR 0 4
11943: PUSH
11944: LD_INT 0
11946: ST_TO_ADDR
// for k in heroes [ i ] do
11947: LD_ADDR_VAR 0 3
11951: PUSH
11952: LD_EXP 33
11956: PUSH
11957: LD_VAR 0 1
11961: ARRAY
11962: PUSH
11963: FOR_IN
11964: IFFALSE 11987
// if IsLive ( k ) then
11966: LD_VAR 0 3
11970: PPUSH
11971: CALL_OW 300
11975: IFFALSE 11985
// h = true ;
11977: LD_ADDR_VAR 0 4
11981: PUSH
11982: LD_INT 1
11984: ST_TO_ADDR
11985: GO 11963
11987: POP
11988: POP
// Result := h ;
11989: LD_ADDR_VAR 0 2
11993: PUSH
11994: LD_VAR 0 4
11998: ST_TO_ADDR
// end ; end ;
11999: GO 12002
12001: POP
// end ;
12002: LD_VAR 0 2
12006: RET
// function AlliedSides ( i , j ) ; begin
12007: LD_INT 0
12009: PPUSH
// Result := false ;
12010: LD_ADDR_VAR 0 3
12014: PUSH
12015: LD_INT 0
12017: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
12018: LD_VAR 0 1
12022: PPUSH
12023: LD_VAR 0 2
12027: PPUSH
12028: CALL_OW 81
12032: PUSH
12033: LD_INT 1
12035: EQUAL
12036: PUSH
12037: LD_VAR 0 2
12041: PPUSH
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 81
12051: PUSH
12052: LD_INT 1
12054: EQUAL
12055: AND
12056: PUSH
12057: LD_VAR 0 1
12061: PPUSH
12062: CALL_OW 83
12066: AND
12067: PUSH
12068: LD_VAR 0 2
12072: PPUSH
12073: CALL_OW 83
12077: AND
12078: IFFALSE 12088
// Result := true ;
12080: LD_ADDR_VAR 0 3
12084: PUSH
12085: LD_INT 1
12087: ST_TO_ADDR
// end ;
12088: LD_VAR 0 3
12092: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
12093: CALL 11597 0 0
12097: PUSH
12098: LD_LOC 29
12102: NOT
12103: AND
12104: IFFALSE 12120
12106: GO 12108
12108: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
12109: LD_ADDR_EXP 59
12113: PUSH
12114: LD_STRING #Player-Ended
12116: PUSH
12117: EMPTY
12118: LIST
12119: ST_TO_ADDR
12120: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
12121: CALL 11597 0 0
12125: PUSH
12126: LD_LOC 29
12130: AND
12131: IFFALSE 12140
12133: GO 12135
12135: DISABLE
// YouLostInMultiplayer ;
12136: CALL_OW 107
12140: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
12141: CALL 11597 0 0
12145: NOT
12146: PUSH
12147: CALL_OW 531
12151: NOT
12152: AND
12153: IFFALSE 12169
12155: GO 12157
12157: DISABLE
// WaitServerStrings = [ #server-wait ] ;
12158: LD_ADDR_EXP 59
12162: PUSH
12163: LD_STRING #server-wait
12165: PUSH
12166: EMPTY
12167: LIST
12168: ST_TO_ADDR
12169: END
// every 100 trigger IAmSpec do
12170: CALL_OW 531
12174: IFFALSE 12190
12176: GO 12178
12178: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
12179: LD_ADDR_EXP 59
12183: PUSH
12184: LD_STRING #Player-IAmSpec
12186: PUSH
12187: EMPTY
12188: LIST
12189: ST_TO_ADDR
12190: END
// every 100 trigger GameEnded and IAmSpec do
12191: LD_LOC 29
12195: PUSH
12196: CALL_OW 531
12200: AND
12201: IFFALSE 12210
12203: GO 12205
12205: DISABLE
// YouLostInMultiplayer ;
12206: CALL_OW 107
12210: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
12211: CALL 11597 0 0
12215: PUSH
12216: LD_LOC 29
12220: NOT
12221: AND
12222: IFFALSE 12238
12224: GO 12226
12226: DISABLE
// WaitServerStrings = [ $player-win ] ;
12227: LD_ADDR_EXP 59
12231: PUSH
12232: LD_STRING $player-win
12234: PUSH
12235: EMPTY
12236: LIST
12237: ST_TO_ADDR
12238: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
12239: CALL 11597 0 0
12243: PUSH
12244: LD_LOC 29
12248: AND
12249: IFFALSE 12273
12251: GO 12253
12253: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
12254: LD_EXP 22
12258: PUSH
12259: LD_OWVAR 7
12263: ARRAY
12264: PPUSH
12265: CALL 11268 0 1
// YouWinInMultiplayer ;
12269: CALL_OW 106
// end ;
12273: END
// every 100 trigger isEditor marked 401 do
12274: LD_OWVAR 84
12278: IFFALSE 12294
12280: GO 12282
12282: DISABLE
// Debug_Strings = [ You won ] ;
12283: LD_ADDR_OWVAR 48
12287: PUSH
12288: LD_STRING You won
12290: PUSH
12291: EMPTY
12292: LIST
12293: ST_TO_ADDR
12294: END
// every 100 trigger isEditor marked 400 do
12295: LD_OWVAR 84
12299: IFFALSE 12315
12301: GO 12303
12303: DISABLE
// Debug_Strings = [ You loss ] ;
12304: LD_ADDR_OWVAR 48
12308: PUSH
12309: LD_STRING You loss
12311: PUSH
12312: EMPTY
12313: LIST
12314: ST_TO_ADDR
12315: END
// every 100 marked 98 do var i , un ;
12316: GO 12318
12318: DISABLE
12319: LD_INT 0
12321: PPUSH
12322: PPUSH
// begin for i = 1 to side_positions do
12323: LD_ADDR_VAR 0 1
12327: PUSH
12328: DOUBLE
12329: LD_INT 1
12331: DEC
12332: ST_TO_ADDR
12333: LD_EXP 21
12337: PUSH
12338: FOR_TO
12339: IFFALSE 12426
// begin if side_positions [ i ] then
12341: LD_EXP 21
12345: PUSH
12346: LD_VAR 0 1
12350: ARRAY
12351: IFFALSE 12424
// if not HasPower ( i ) and not defeated [ i ] then
12353: LD_VAR 0 1
12357: PPUSH
12358: CALL 11661 0 1
12362: NOT
12363: PUSH
12364: LD_LOC 28
12368: PUSH
12369: LD_VAR 0 1
12373: ARRAY
12374: NOT
12375: AND
12376: IFFALSE 12424
// begin defeated = replace ( defeated , i , true ) ;
12378: LD_ADDR_LOC 28
12382: PUSH
12383: LD_LOC 28
12387: PPUSH
12388: LD_VAR 0 1
12392: PPUSH
12393: LD_INT 1
12395: PPUSH
12396: CALL_OW 1
12400: ST_TO_ADDR
// if i = mp_player_side then
12401: LD_VAR 0 1
12405: PUSH
12406: LD_OWVAR 7
12410: EQUAL
12411: IFFALSE 12424
// begin Multiplayer_Loose_Message ;
12413: CALL_OW 521
// SetPlayerSpectator ( ) ;
12417: CALL_OW 572
// enable ( 400 ) ;
12421: LD_INT 400
12423: ENABLE_MARKED
// end ; end ; end ;
12424: GO 12338
12426: POP
12427: POP
// DidGameEnd ;
12428: CALL 12443 0 0
// if not GameEnded then
12432: LD_LOC 29
12436: NOT
12437: IFFALSE 12440
// enable ;
12439: ENABLE
// end ;
12440: PPOPN 2
12442: END
// function DidGameEnd ; var i , k , enemy ; begin
12443: LD_INT 0
12445: PPUSH
12446: PPUSH
12447: PPUSH
12448: PPUSH
// enemy = [ ] ;
12449: LD_ADDR_VAR 0 4
12453: PUSH
12454: EMPTY
12455: ST_TO_ADDR
// for i = 1 to side_positions do
12456: LD_ADDR_VAR 0 2
12460: PUSH
12461: DOUBLE
12462: LD_INT 1
12464: DEC
12465: ST_TO_ADDR
12466: LD_EXP 21
12470: PUSH
12471: FOR_TO
12472: IFFALSE 12566
// if not defeated [ i ] then
12474: LD_LOC 28
12478: PUSH
12479: LD_VAR 0 2
12483: ARRAY
12484: NOT
12485: IFFALSE 12564
// for k = 1 to side_positions do
12487: LD_ADDR_VAR 0 3
12491: PUSH
12492: DOUBLE
12493: LD_INT 1
12495: DEC
12496: ST_TO_ADDR
12497: LD_EXP 21
12501: PUSH
12502: FOR_TO
12503: IFFALSE 12562
// if not defeated [ k ] then
12505: LD_LOC 28
12509: PUSH
12510: LD_VAR 0 3
12514: ARRAY
12515: NOT
12516: IFFALSE 12560
// if not AlliedSides ( i , k ) then
12518: LD_VAR 0 2
12522: PPUSH
12523: LD_VAR 0 3
12527: PPUSH
12528: CALL 12007 0 2
12532: NOT
12533: IFFALSE 12560
// enemy = enemy ^ [ i , k ] ;
12535: LD_ADDR_VAR 0 4
12539: PUSH
12540: LD_VAR 0 4
12544: PUSH
12545: LD_VAR 0 2
12549: PUSH
12550: LD_VAR 0 3
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: ADD
12559: ST_TO_ADDR
12560: GO 12502
12562: POP
12563: POP
12564: GO 12471
12566: POP
12567: POP
// if not enemy then
12568: LD_VAR 0 4
12572: NOT
12573: IFFALSE 12599
// begin GameEnded = true ;
12575: LD_ADDR_LOC 29
12579: PUSH
12580: LD_INT 1
12582: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
12583: LD_LOC 28
12587: PUSH
12588: LD_OWVAR 7
12592: ARRAY
12593: NOT
12594: IFFALSE 12599
// enable ( 401 ) ;
12596: LD_INT 401
12598: ENABLE_MARKED
// end ; end ;
12599: LD_VAR 0 1
12603: RET
// function unfog ; var k , friends ; begin
12604: LD_INT 0
12606: PPUSH
12607: PPUSH
12608: PPUSH
// for k = 1 to side_positions do
12609: LD_ADDR_VAR 0 2
12613: PUSH
12614: DOUBLE
12615: LD_INT 1
12617: DEC
12618: ST_TO_ADDR
12619: LD_EXP 21
12623: PUSH
12624: FOR_TO
12625: IFFALSE 12681
// if not defeated [ k ] then
12627: LD_LOC 28
12631: PUSH
12632: LD_VAR 0 2
12636: ARRAY
12637: NOT
12638: IFFALSE 12679
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
12640: LD_OWVAR 7
12644: PPUSH
12645: LD_VAR 0 2
12649: PPUSH
12650: CALL_OW 81
12654: PUSH
12655: LD_INT 1
12657: PUSH
12658: EMPTY
12659: LIST
12660: IN
12661: IFFALSE 12679
// friends = friends ^ k ;
12663: LD_ADDR_VAR 0 3
12667: PUSH
12668: LD_VAR 0 3
12672: PUSH
12673: LD_VAR 0 2
12677: ADD
12678: ST_TO_ADDR
12679: GO 12624
12681: POP
12682: POP
// if not friends then
12683: LD_VAR 0 3
12687: NOT
12688: IFFALSE 12702
// begin SetPlayerSpectator ( ) ;
12690: CALL_OW 572
// unfoged = true ;
12694: LD_ADDR_LOC 30
12698: PUSH
12699: LD_INT 1
12701: ST_TO_ADDR
// end ; end ;
12702: LD_VAR 0 1
12706: RET
// export function MakeGameEnd ; begin
12707: LD_INT 0
12709: PPUSH
// SetPlayerSpectator ( ) ;
12710: CALL_OW 572
// unfoged = true ;
12714: LD_ADDR_LOC 30
12718: PUSH
12719: LD_INT 1
12721: ST_TO_ADDR
// wait ( 0 0$5 ) ;
12722: LD_INT 175
12724: PPUSH
12725: CALL_OW 67
// GameEnded = true ;
12729: LD_ADDR_LOC 29
12733: PUSH
12734: LD_INT 1
12736: ST_TO_ADDR
// end ;
12737: LD_VAR 0 1
12741: RET
// export function GetGameEnded ; begin
12742: LD_INT 0
12744: PPUSH
// result = GameEnded ;
12745: LD_ADDR_VAR 0 1
12749: PUSH
12750: LD_LOC 29
12754: ST_TO_ADDR
// end ; end_of_file
12755: LD_VAR 0 1
12759: RET
// var win ; export function init_kings_counting ; var i ; begin
12760: LD_INT 0
12762: PPUSH
12763: PPUSH
// mp_with_score := true ;
12764: LD_ADDR_OWVAR 14
12768: PUSH
12769: LD_INT 1
12771: ST_TO_ADDR
// ResetMultiScore ;
12772: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
12776: LD_EXP 29
12780: PPUSH
12781: LD_INT 1
12783: PPUSH
12784: CALL_OW 424
// enable ( 2 ) ;
12788: LD_INT 2
12790: ENABLE_MARKED
// end ;
12791: LD_VAR 0 1
12795: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
12796: LD_INT 0
12798: PPUSH
12799: PPUSH
12800: PPUSH
12801: PPUSH
12802: PPUSH
12803: PPUSH
12804: PPUSH
12805: PPUSH
12806: PPUSH
// vypis := [ ] ;
12807: LD_ADDR_VAR 0 3
12811: PUSH
12812: EMPTY
12813: ST_TO_ADDR
// red = 0 ;
12814: LD_ADDR_VAR 0 5
12818: PUSH
12819: LD_INT 0
12821: ST_TO_ADDR
// blue = 0 ;
12822: LD_ADDR_VAR 0 6
12826: PUSH
12827: LD_INT 0
12829: ST_TO_ADDR
// yel = 0 ;
12830: LD_ADDR_VAR 0 7
12834: PUSH
12835: LD_INT 0
12837: ST_TO_ADDR
// green = 0 ;
12838: LD_ADDR_VAR 0 8
12842: PUSH
12843: LD_INT 0
12845: ST_TO_ADDR
// if def_public_score or isSGUI then
12846: LD_EXP 1
12850: PUSH
12851: LD_OWVAR 83
12855: OR
12856: IFFALSE 13453
// if not Team_Game then
12858: LD_EXP 23
12862: NOT
12863: IFFALSE 12985
// begin for side = 1 to Side_Positions do
12865: LD_ADDR_VAR 0 2
12869: PUSH
12870: DOUBLE
12871: LD_INT 1
12873: DEC
12874: ST_TO_ADDR
12875: LD_EXP 21
12879: PUSH
12880: FOR_TO
12881: IFFALSE 12981
// if Side_Positions [ side ] then
12883: LD_EXP 21
12887: PUSH
12888: LD_VAR 0 2
12892: ARRAY
12893: IFFALSE 12979
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
12895: LD_ADDR_VAR 0 3
12899: PUSH
12900: LD_VAR 0 3
12904: PUSH
12905: LD_STRING #KingoftheHill-Public
12907: PUSH
12908: LD_VAR 0 2
12912: PUSH
12913: LD_VAR 0 2
12917: PUSH
12918: LD_VAR 0 2
12922: PUSH
12923: LD_INT 10
12925: PLUS
12926: PPUSH
12927: CALL_OW 110
12931: PUSH
12932: LD_INT 3
12934: DIV
12935: PUSH
12936: LD_EXP 30
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: ADD
12948: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
12949: LD_INT 2
12951: PPUSH
12952: LD_VAR 0 2
12956: PPUSH
12957: LD_VAR 0 2
12961: PUSH
12962: LD_INT 10
12964: PLUS
12965: PPUSH
12966: CALL_OW 110
12970: PUSH
12971: LD_INT 3
12973: DIV
12974: PPUSH
12975: CALL 20357 0 3
// end ;
12979: GO 12880
12981: POP
12982: POP
// end else
12983: GO 13451
// begin if Teams [ 1 ] then
12985: LD_EXP 19
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: IFFALSE 13045
// for i in Teams [ 1 ] do
12995: LD_ADDR_VAR 0 4
12999: PUSH
13000: LD_EXP 19
13004: PUSH
13005: LD_INT 1
13007: ARRAY
13008: PUSH
13009: FOR_IN
13010: IFFALSE 13043
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
13012: LD_ADDR_VAR 0 5
13016: PUSH
13017: LD_VAR 0 5
13021: PUSH
13022: LD_VAR 0 4
13026: PUSH
13027: LD_INT 10
13029: PLUS
13030: PPUSH
13031: CALL_OW 110
13035: PUSH
13036: LD_INT 3
13038: DIV
13039: PLUS
13040: ST_TO_ADDR
13041: GO 13009
13043: POP
13044: POP
// if Teams [ 2 ] then
13045: LD_EXP 19
13049: PUSH
13050: LD_INT 2
13052: ARRAY
13053: IFFALSE 13105
// for i in Teams [ 2 ] do
13055: LD_ADDR_VAR 0 4
13059: PUSH
13060: LD_EXP 19
13064: PUSH
13065: LD_INT 2
13067: ARRAY
13068: PUSH
13069: FOR_IN
13070: IFFALSE 13103
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
13072: LD_ADDR_VAR 0 6
13076: PUSH
13077: LD_VAR 0 6
13081: PUSH
13082: LD_VAR 0 4
13086: PUSH
13087: LD_INT 10
13089: PLUS
13090: PPUSH
13091: CALL_OW 110
13095: PUSH
13096: LD_INT 3
13098: DIV
13099: PLUS
13100: ST_TO_ADDR
13101: GO 13069
13103: POP
13104: POP
// if Teams [ 3 ] then
13105: LD_EXP 19
13109: PUSH
13110: LD_INT 3
13112: ARRAY
13113: IFFALSE 13165
// for i in Teams [ 3 ] do
13115: LD_ADDR_VAR 0 4
13119: PUSH
13120: LD_EXP 19
13124: PUSH
13125: LD_INT 3
13127: ARRAY
13128: PUSH
13129: FOR_IN
13130: IFFALSE 13163
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
13132: LD_ADDR_VAR 0 7
13136: PUSH
13137: LD_VAR 0 7
13141: PUSH
13142: LD_VAR 0 4
13146: PUSH
13147: LD_INT 10
13149: PLUS
13150: PPUSH
13151: CALL_OW 110
13155: PUSH
13156: LD_INT 3
13158: DIV
13159: PLUS
13160: ST_TO_ADDR
13161: GO 13129
13163: POP
13164: POP
// if Teams [ 4 ] then
13165: LD_EXP 19
13169: PUSH
13170: LD_INT 4
13172: ARRAY
13173: IFFALSE 13225
// for i in Teams [ 4 ] do
13175: LD_ADDR_VAR 0 4
13179: PUSH
13180: LD_EXP 19
13184: PUSH
13185: LD_INT 4
13187: ARRAY
13188: PUSH
13189: FOR_IN
13190: IFFALSE 13223
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
13192: LD_ADDR_VAR 0 8
13196: PUSH
13197: LD_VAR 0 8
13201: PUSH
13202: LD_VAR 0 4
13206: PUSH
13207: LD_INT 10
13209: PLUS
13210: PPUSH
13211: CALL_OW 110
13215: PUSH
13216: LD_INT 3
13218: DIV
13219: PLUS
13220: ST_TO_ADDR
13221: GO 13189
13223: POP
13224: POP
// if Teams [ 1 ] then
13225: LD_EXP 19
13229: PUSH
13230: LD_INT 1
13232: ARRAY
13233: IFFALSE 13262
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
13235: LD_ADDR_VAR 0 3
13239: PUSH
13240: LD_STRING #KingoftheHill-Public-red
13242: PUSH
13243: LD_INT 3
13245: PUSH
13246: LD_VAR 0 5
13250: PUSH
13251: LD_EXP 30
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: ST_TO_ADDR
// if Teams [ 2 ] then
13262: LD_EXP 19
13266: PUSH
13267: LD_INT 2
13269: ARRAY
13270: IFFALSE 13305
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
13272: LD_ADDR_VAR 0 3
13276: PUSH
13277: LD_VAR 0 3
13281: PUSH
13282: LD_STRING #KingoftheHill-Public-blue
13284: PUSH
13285: LD_INT 1
13287: PUSH
13288: LD_VAR 0 6
13292: PUSH
13293: LD_EXP 30
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: ADD
13304: ST_TO_ADDR
// if Teams [ 3 ] then
13305: LD_EXP 19
13309: PUSH
13310: LD_INT 3
13312: ARRAY
13313: IFFALSE 13348
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
13315: LD_ADDR_VAR 0 3
13319: PUSH
13320: LD_VAR 0 3
13324: PUSH
13325: LD_STRING #KingoftheHill-Public-yell
13327: PUSH
13328: LD_INT 2
13330: PUSH
13331: LD_VAR 0 7
13335: PUSH
13336: LD_EXP 30
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: ADD
13347: ST_TO_ADDR
// if Teams [ 4 ] then
13348: LD_EXP 19
13352: PUSH
13353: LD_INT 4
13355: ARRAY
13356: IFFALSE 13391
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
13358: LD_ADDR_VAR 0 3
13362: PUSH
13363: LD_VAR 0 3
13367: PUSH
13368: LD_STRING #KingoftheHill-Public-green
13370: PUSH
13371: LD_INT 7
13373: PUSH
13374: LD_VAR 0 8
13378: PUSH
13379: LD_EXP 30
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: ADD
13390: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
13391: LD_INT 2
13393: PPUSH
13394: LD_INT 3
13396: PPUSH
13397: LD_VAR 0 5
13401: PPUSH
13402: CALL 20357 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
13406: LD_INT 2
13408: PPUSH
13409: LD_INT 1
13411: PPUSH
13412: LD_VAR 0 6
13416: PPUSH
13417: CALL 20357 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
13421: LD_INT 2
13423: PPUSH
13424: LD_INT 2
13426: PPUSH
13427: LD_VAR 0 7
13431: PPUSH
13432: CALL 20357 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
13436: LD_INT 2
13438: PPUSH
13439: LD_INT 7
13441: PPUSH
13442: LD_VAR 0 8
13446: PPUSH
13447: CALL 20357 0 3
// end else
13451: GO 13888
// if not Team_Game then
13453: LD_EXP 23
13457: NOT
13458: IFFALSE 13516
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
13460: LD_ADDR_VAR 0 3
13464: PUSH
13465: LD_VAR 0 3
13469: PUSH
13470: LD_STRING #KingoftheHill-Private
13472: PUSH
13473: LD_OWVAR 7
13477: PUSH
13478: LD_OWVAR 7
13482: PUSH
13483: LD_VAR 0 2
13487: PUSH
13488: LD_INT 10
13490: PLUS
13491: PPUSH
13492: CALL_OW 110
13496: PUSH
13497: LD_INT 3
13499: DIV
13500: PUSH
13501: LD_EXP 30
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: ADD
13513: ST_TO_ADDR
13514: GO 13888
// begin for i in Teams [ 1 ] do
13516: LD_ADDR_VAR 0 4
13520: PUSH
13521: LD_EXP 19
13525: PUSH
13526: LD_INT 1
13528: ARRAY
13529: PUSH
13530: FOR_IN
13531: IFFALSE 13564
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
13533: LD_ADDR_VAR 0 5
13537: PUSH
13538: LD_VAR 0 5
13542: PUSH
13543: LD_VAR 0 4
13547: PUSH
13548: LD_INT 10
13550: PLUS
13551: PPUSH
13552: CALL_OW 110
13556: PUSH
13557: LD_INT 3
13559: DIV
13560: PLUS
13561: ST_TO_ADDR
13562: GO 13530
13564: POP
13565: POP
// for i in Teams [ 2 ] do
13566: LD_ADDR_VAR 0 4
13570: PUSH
13571: LD_EXP 19
13575: PUSH
13576: LD_INT 2
13578: ARRAY
13579: PUSH
13580: FOR_IN
13581: IFFALSE 13614
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
13583: LD_ADDR_VAR 0 6
13587: PUSH
13588: LD_VAR 0 6
13592: PUSH
13593: LD_VAR 0 4
13597: PUSH
13598: LD_INT 10
13600: PLUS
13601: PPUSH
13602: CALL_OW 110
13606: PUSH
13607: LD_INT 3
13609: DIV
13610: PLUS
13611: ST_TO_ADDR
13612: GO 13580
13614: POP
13615: POP
// for i in Teams [ 3 ] do
13616: LD_ADDR_VAR 0 4
13620: PUSH
13621: LD_EXP 19
13625: PUSH
13626: LD_INT 3
13628: ARRAY
13629: PUSH
13630: FOR_IN
13631: IFFALSE 13664
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
13633: LD_ADDR_VAR 0 7
13637: PUSH
13638: LD_VAR 0 7
13642: PUSH
13643: LD_VAR 0 4
13647: PUSH
13648: LD_INT 10
13650: PLUS
13651: PPUSH
13652: CALL_OW 110
13656: PUSH
13657: LD_INT 3
13659: DIV
13660: PLUS
13661: ST_TO_ADDR
13662: GO 13630
13664: POP
13665: POP
// for i in Teams [ 4 ] do
13666: LD_ADDR_VAR 0 4
13670: PUSH
13671: LD_EXP 19
13675: PUSH
13676: LD_INT 4
13678: ARRAY
13679: PUSH
13680: FOR_IN
13681: IFFALSE 13714
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
13683: LD_ADDR_VAR 0 8
13687: PUSH
13688: LD_VAR 0 8
13692: PUSH
13693: LD_VAR 0 4
13697: PUSH
13698: LD_INT 10
13700: PLUS
13701: PPUSH
13702: CALL_OW 110
13706: PUSH
13707: LD_INT 3
13709: DIV
13710: PLUS
13711: ST_TO_ADDR
13712: GO 13680
13714: POP
13715: POP
// if mp_player_side in Teams [ 1 ] then
13716: LD_OWVAR 7
13720: PUSH
13721: LD_EXP 19
13725: PUSH
13726: LD_INT 1
13728: ARRAY
13729: IN
13730: IFFALSE 13759
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
13732: LD_ADDR_VAR 0 3
13736: PUSH
13737: LD_STRING #KingoftheHill-Public-red
13739: PUSH
13740: LD_INT 3
13742: PUSH
13743: LD_VAR 0 5
13747: PUSH
13748: LD_EXP 30
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
13759: LD_OWVAR 7
13763: PUSH
13764: LD_EXP 19
13768: PUSH
13769: LD_INT 2
13771: ARRAY
13772: IN
13773: IFFALSE 13802
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
13775: LD_ADDR_VAR 0 3
13779: PUSH
13780: LD_STRING #KingoftheHill-Public-blue
13782: PUSH
13783: LD_INT 1
13785: PUSH
13786: LD_VAR 0 6
13790: PUSH
13791: LD_EXP 30
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
13802: LD_OWVAR 7
13806: PUSH
13807: LD_EXP 19
13811: PUSH
13812: LD_INT 3
13814: ARRAY
13815: IN
13816: IFFALSE 13845
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
13818: LD_ADDR_VAR 0 3
13822: PUSH
13823: LD_STRING #KingoftheHill-Public-yell
13825: PUSH
13826: LD_INT 2
13828: PUSH
13829: LD_VAR 0 7
13833: PUSH
13834: LD_EXP 30
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
13845: LD_OWVAR 7
13849: PUSH
13850: LD_EXP 19
13854: PUSH
13855: LD_INT 4
13857: ARRAY
13858: IN
13859: IFFALSE 13888
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
13861: LD_ADDR_VAR 0 3
13865: PUSH
13866: LD_STRING #KingoftheHill-Public-green
13868: PUSH
13869: LD_INT 7
13871: PUSH
13872: LD_VAR 0 8
13876: PUSH
13877: LD_EXP 30
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: ST_TO_ADDR
// end ; Display_kings := vypis ;
13888: LD_ADDR_EXP 60
13892: PUSH
13893: LD_VAR 0 3
13897: ST_TO_ADDR
// end ;
13898: LD_VAR 0 1
13902: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
13903: LD_INT 0
13905: PPUSH
13906: PPUSH
13907: PPUSH
13908: PPUSH
13909: PPUSH
13910: PPUSH
13911: PPUSH
13912: PPUSH
13913: PPUSH
// side := [ ] ;
13914: LD_ADDR_VAR 0 2
13918: PUSH
13919: EMPTY
13920: ST_TO_ADDR
// red = 0 ;
13921: LD_ADDR_VAR 0 5
13925: PUSH
13926: LD_INT 0
13928: ST_TO_ADDR
// blue = 0 ;
13929: LD_ADDR_VAR 0 6
13933: PUSH
13934: LD_INT 0
13936: ST_TO_ADDR
// yel = 0 ;
13937: LD_ADDR_VAR 0 7
13941: PUSH
13942: LD_INT 0
13944: ST_TO_ADDR
// green = 0 ;
13945: LD_ADDR_VAR 0 8
13949: PUSH
13950: LD_INT 0
13952: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
13953: LD_ADDR_VAR 0 3
13957: PUSH
13958: LD_EXP 29
13962: PPUSH
13963: LD_INT 21
13965: PUSH
13966: LD_INT 3
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: PUSH
13973: LD_INT 53
13975: PUSH
13976: EMPTY
13977: LIST
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PPUSH
13983: CALL_OW 70
13987: ST_TO_ADDR
// for un in list do
13988: LD_ADDR_VAR 0 4
13992: PUSH
13993: LD_VAR 0 3
13997: PUSH
13998: FOR_IN
13999: IFFALSE 14024
// side := side union GetSide ( un ) ;
14001: LD_ADDR_VAR 0 2
14005: PUSH
14006: LD_VAR 0 2
14010: PUSH
14011: LD_VAR 0 4
14015: PPUSH
14016: CALL_OW 255
14020: UNION
14021: ST_TO_ADDR
14022: GO 13998
14024: POP
14025: POP
// if side <> 1 then
14026: LD_VAR 0 2
14030: PUSH
14031: LD_INT 1
14033: NONEQUAL
14034: IFFALSE 14038
// exit ;
14036: GO 14401
// side := side [ 1 ] ;
14038: LD_ADDR_VAR 0 2
14042: PUSH
14043: LD_VAR 0 2
14047: PUSH
14048: LD_INT 1
14050: ARRAY
14051: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
14052: LD_VAR 0 2
14056: PUSH
14057: LD_INT 10
14059: PLUS
14060: PPUSH
14061: LD_VAR 0 2
14065: PUSH
14066: LD_INT 10
14068: PLUS
14069: PPUSH
14070: CALL_OW 110
14074: PUSH
14075: LD_INT 1
14077: PLUS
14078: PPUSH
14079: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
14083: LD_VAR 0 2
14087: PPUSH
14088: LD_VAR 0 2
14092: PUSH
14093: LD_INT 10
14095: PLUS
14096: PPUSH
14097: CALL_OW 110
14101: PUSH
14102: LD_INT 3
14104: DIV
14105: PPUSH
14106: LD_INT 2
14108: PPUSH
14109: CALL 11049 0 3
// if not Team_Game then
14113: LD_EXP 23
14117: NOT
14118: IFFALSE 14401
// if GetTag ( side + 10 ) >= final_count * 3 then
14120: LD_VAR 0 2
14124: PUSH
14125: LD_INT 10
14127: PLUS
14128: PPUSH
14129: CALL_OW 110
14133: PUSH
14134: LD_EXP 30
14138: PUSH
14139: LD_INT 3
14141: MUL
14142: GREATEREQUAL
14143: IFFALSE 14150
// enable ( 3 ) else
14145: LD_INT 3
14147: ENABLE_MARKED
14148: GO 14401
// begin for i in Teams [ 1 ] do
14150: LD_ADDR_VAR 0 9
14154: PUSH
14155: LD_EXP 19
14159: PUSH
14160: LD_INT 1
14162: ARRAY
14163: PUSH
14164: FOR_IN
14165: IFFALSE 14198
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14167: LD_ADDR_VAR 0 5
14171: PUSH
14172: LD_VAR 0 5
14176: PUSH
14177: LD_VAR 0 9
14181: PUSH
14182: LD_INT 10
14184: PLUS
14185: PPUSH
14186: CALL_OW 110
14190: PUSH
14191: LD_INT 3
14193: DIV
14194: PLUS
14195: ST_TO_ADDR
14196: GO 14164
14198: POP
14199: POP
// for i in Teams [ 2 ] do
14200: LD_ADDR_VAR 0 9
14204: PUSH
14205: LD_EXP 19
14209: PUSH
14210: LD_INT 2
14212: ARRAY
14213: PUSH
14214: FOR_IN
14215: IFFALSE 14248
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14217: LD_ADDR_VAR 0 6
14221: PUSH
14222: LD_VAR 0 6
14226: PUSH
14227: LD_VAR 0 9
14231: PUSH
14232: LD_INT 10
14234: PLUS
14235: PPUSH
14236: CALL_OW 110
14240: PUSH
14241: LD_INT 3
14243: DIV
14244: PLUS
14245: ST_TO_ADDR
14246: GO 14214
14248: POP
14249: POP
// for i in Teams [ 3 ] do
14250: LD_ADDR_VAR 0 9
14254: PUSH
14255: LD_EXP 19
14259: PUSH
14260: LD_INT 3
14262: ARRAY
14263: PUSH
14264: FOR_IN
14265: IFFALSE 14298
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14267: LD_ADDR_VAR 0 7
14271: PUSH
14272: LD_VAR 0 7
14276: PUSH
14277: LD_VAR 0 9
14281: PUSH
14282: LD_INT 10
14284: PLUS
14285: PPUSH
14286: CALL_OW 110
14290: PUSH
14291: LD_INT 3
14293: DIV
14294: PLUS
14295: ST_TO_ADDR
14296: GO 14264
14298: POP
14299: POP
// for i in Teams [ 4 ] do
14300: LD_ADDR_VAR 0 9
14304: PUSH
14305: LD_EXP 19
14309: PUSH
14310: LD_INT 4
14312: ARRAY
14313: PUSH
14314: FOR_IN
14315: IFFALSE 14348
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14317: LD_ADDR_VAR 0 8
14321: PUSH
14322: LD_VAR 0 8
14326: PUSH
14327: LD_VAR 0 9
14331: PUSH
14332: LD_INT 10
14334: PLUS
14335: PPUSH
14336: CALL_OW 110
14340: PUSH
14341: LD_INT 3
14343: DIV
14344: PLUS
14345: ST_TO_ADDR
14346: GO 14314
14348: POP
14349: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
14350: LD_VAR 0 5
14354: PUSH
14355: LD_EXP 30
14359: GREATEREQUAL
14360: PUSH
14361: LD_VAR 0 6
14365: PUSH
14366: LD_EXP 30
14370: GREATEREQUAL
14371: OR
14372: PUSH
14373: LD_VAR 0 7
14377: PUSH
14378: LD_EXP 30
14382: GREATEREQUAL
14383: OR
14384: PUSH
14385: LD_VAR 0 8
14389: PUSH
14390: LD_EXP 30
14394: GREATEREQUAL
14395: OR
14396: IFFALSE 14401
// enable ( 3 ) ;
14398: LD_INT 3
14400: ENABLE_MARKED
// end ; end ;
14401: LD_VAR 0 1
14405: RET
// every 0 0$1 marked 2 do
14406: GO 14408
14408: DISABLE
// begin count_king ;
14409: CALL 13903 0 0
// show_public_points ;
14413: CALL 12796 0 0
// enable ;
14417: ENABLE
// end ;
14418: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
14419: GO 14421
14421: DISABLE
14422: LD_INT 0
14424: PPUSH
14425: PPUSH
14426: PPUSH
14427: PPUSH
14428: PPUSH
14429: PPUSH
// begin win := [ ] ;
14430: LD_ADDR_LOC 32
14434: PUSH
14435: EMPTY
14436: ST_TO_ADDR
// red = 0 ;
14437: LD_ADDR_VAR 0 2
14441: PUSH
14442: LD_INT 0
14444: ST_TO_ADDR
// blue = 0 ;
14445: LD_ADDR_VAR 0 3
14449: PUSH
14450: LD_INT 0
14452: ST_TO_ADDR
// yel = 0 ;
14453: LD_ADDR_VAR 0 4
14457: PUSH
14458: LD_INT 0
14460: ST_TO_ADDR
// green = 0 ;
14461: LD_ADDR_VAR 0 5
14465: PUSH
14466: LD_INT 0
14468: ST_TO_ADDR
// if not Team_Game then
14469: LD_EXP 23
14473: NOT
14474: IFFALSE 14551
// begin for side = 1 to 8 do
14476: LD_ADDR_VAR 0 1
14480: PUSH
14481: DOUBLE
14482: LD_INT 1
14484: DEC
14485: ST_TO_ADDR
14486: LD_INT 8
14488: PUSH
14489: FOR_TO
14490: IFFALSE 14535
// if GetTag ( side + 10 ) >= final_count * 3 then
14492: LD_VAR 0 1
14496: PUSH
14497: LD_INT 10
14499: PLUS
14500: PPUSH
14501: CALL_OW 110
14505: PUSH
14506: LD_EXP 30
14510: PUSH
14511: LD_INT 3
14513: MUL
14514: GREATEREQUAL
14515: IFFALSE 14533
// win := win ^ side ;
14517: LD_ADDR_LOC 32
14521: PUSH
14522: LD_LOC 32
14526: PUSH
14527: LD_VAR 0 1
14531: ADD
14532: ST_TO_ADDR
14533: GO 14489
14535: POP
14536: POP
// if win then
14537: LD_LOC 32
14541: IFFALSE 14548
// enable ( 4 ) else
14543: LD_INT 4
14545: ENABLE_MARKED
14546: GO 14549
// enable ;
14548: ENABLE
// end else
14549: GO 14867
// begin for i in Teams [ 1 ] do
14551: LD_ADDR_VAR 0 6
14555: PUSH
14556: LD_EXP 19
14560: PUSH
14561: LD_INT 1
14563: ARRAY
14564: PUSH
14565: FOR_IN
14566: IFFALSE 14599
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14568: LD_ADDR_VAR 0 2
14572: PUSH
14573: LD_VAR 0 2
14577: PUSH
14578: LD_VAR 0 6
14582: PUSH
14583: LD_INT 10
14585: PLUS
14586: PPUSH
14587: CALL_OW 110
14591: PUSH
14592: LD_INT 3
14594: DIV
14595: PLUS
14596: ST_TO_ADDR
14597: GO 14565
14599: POP
14600: POP
// for i in Teams [ 2 ] do
14601: LD_ADDR_VAR 0 6
14605: PUSH
14606: LD_EXP 19
14610: PUSH
14611: LD_INT 2
14613: ARRAY
14614: PUSH
14615: FOR_IN
14616: IFFALSE 14649
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14618: LD_ADDR_VAR 0 3
14622: PUSH
14623: LD_VAR 0 3
14627: PUSH
14628: LD_VAR 0 6
14632: PUSH
14633: LD_INT 10
14635: PLUS
14636: PPUSH
14637: CALL_OW 110
14641: PUSH
14642: LD_INT 3
14644: DIV
14645: PLUS
14646: ST_TO_ADDR
14647: GO 14615
14649: POP
14650: POP
// for i in Teams [ 3 ] do
14651: LD_ADDR_VAR 0 6
14655: PUSH
14656: LD_EXP 19
14660: PUSH
14661: LD_INT 3
14663: ARRAY
14664: PUSH
14665: FOR_IN
14666: IFFALSE 14699
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14668: LD_ADDR_VAR 0 4
14672: PUSH
14673: LD_VAR 0 4
14677: PUSH
14678: LD_VAR 0 6
14682: PUSH
14683: LD_INT 10
14685: PLUS
14686: PPUSH
14687: CALL_OW 110
14691: PUSH
14692: LD_INT 3
14694: DIV
14695: PLUS
14696: ST_TO_ADDR
14697: GO 14665
14699: POP
14700: POP
// for i in Teams [ 4 ] do
14701: LD_ADDR_VAR 0 6
14705: PUSH
14706: LD_EXP 19
14710: PUSH
14711: LD_INT 4
14713: ARRAY
14714: PUSH
14715: FOR_IN
14716: IFFALSE 14749
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14718: LD_ADDR_VAR 0 5
14722: PUSH
14723: LD_VAR 0 5
14727: PUSH
14728: LD_VAR 0 6
14732: PUSH
14733: LD_INT 10
14735: PLUS
14736: PPUSH
14737: CALL_OW 110
14741: PUSH
14742: LD_INT 3
14744: DIV
14745: PLUS
14746: ST_TO_ADDR
14747: GO 14715
14749: POP
14750: POP
// if red >= final_count then
14751: LD_VAR 0 2
14755: PUSH
14756: LD_EXP 30
14760: GREATEREQUAL
14761: IFFALSE 14777
// win = teams [ 1 ] ;
14763: LD_ADDR_LOC 32
14767: PUSH
14768: LD_EXP 19
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: ST_TO_ADDR
// if blue >= final_count then
14777: LD_VAR 0 3
14781: PUSH
14782: LD_EXP 30
14786: GREATEREQUAL
14787: IFFALSE 14803
// win = teams [ 2 ] ;
14789: LD_ADDR_LOC 32
14793: PUSH
14794: LD_EXP 19
14798: PUSH
14799: LD_INT 2
14801: ARRAY
14802: ST_TO_ADDR
// if yel >= final_count then
14803: LD_VAR 0 4
14807: PUSH
14808: LD_EXP 30
14812: GREATEREQUAL
14813: IFFALSE 14829
// win = teams [ 3 ] ;
14815: LD_ADDR_LOC 32
14819: PUSH
14820: LD_EXP 19
14824: PUSH
14825: LD_INT 3
14827: ARRAY
14828: ST_TO_ADDR
// if green >= final_count then
14829: LD_VAR 0 5
14833: PUSH
14834: LD_EXP 30
14838: GREATEREQUAL
14839: IFFALSE 14855
// win = teams [ 4 ] ;
14841: LD_ADDR_LOC 32
14845: PUSH
14846: LD_EXP 19
14850: PUSH
14851: LD_INT 4
14853: ARRAY
14854: ST_TO_ADDR
// if win then
14855: LD_LOC 32
14859: IFFALSE 14866
// enable ( 4 ) else
14861: LD_INT 4
14863: ENABLE_MARKED
14864: GO 14867
// enable ;
14866: ENABLE
// end ; end ;
14867: PPOPN 6
14869: END
// every 0 0$1 marked 4 do
14870: GO 14872
14872: DISABLE
// begin if Player_Side in win then
14873: LD_EXP 31
14877: PUSH
14878: LD_LOC 32
14882: IN
14883: IFFALSE 14899
// begin wait ( 0 0$2 ) ;
14885: LD_INT 70
14887: PPUSH
14888: CALL_OW 67
// enable ( 401 ) ;
14892: LD_INT 401
14894: ENABLE_MARKED
// exit ;
14895: GO 14915
// end else
14897: GO 14915
// begin wait ( 0 0$2 ) ;
14899: LD_INT 70
14901: PPUSH
14902: CALL_OW 67
// Multiplayer_Loose_Message ;
14906: CALL_OW 521
// enable ( 400 ) ;
14910: LD_INT 400
14912: ENABLE_MARKED
// exit ;
14913: GO 14915
// end ; end ; end_of_file
14915: END
// export function SetMpTechs ( ) ; var side , i ; begin
14916: LD_INT 0
14918: PPUSH
14919: PPUSH
14920: PPUSH
// for side = 1 to 8 do
14921: LD_ADDR_VAR 0 2
14925: PUSH
14926: DOUBLE
14927: LD_INT 1
14929: DEC
14930: ST_TO_ADDR
14931: LD_INT 8
14933: PUSH
14934: FOR_TO
14935: IFFALSE 15056
// begin for i = 1 to 72 do
14937: LD_ADDR_VAR 0 3
14941: PUSH
14942: DOUBLE
14943: LD_INT 1
14945: DEC
14946: ST_TO_ADDR
14947: LD_INT 72
14949: PUSH
14950: FOR_TO
14951: IFFALSE 14982
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
14953: LD_VAR 0 3
14957: PPUSH
14958: LD_VAR 0 2
14962: PPUSH
14963: LD_INT 0
14965: PPUSH
14966: LD_VAR 0 3
14970: PPUSH
14971: CALL_OW 565
14975: PPUSH
14976: CALL_OW 322
14980: GO 14950
14982: POP
14983: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
14984: LD_INT 73
14986: PPUSH
14987: LD_VAR 0 2
14991: PPUSH
14992: LD_INT 0
14994: PPUSH
14995: LD_INT 25
14997: PPUSH
14998: CALL_OW 565
15002: PPUSH
15003: CALL_OW 322
// for i = 0 to 40 do
15007: LD_ADDR_VAR 0 3
15011: PUSH
15012: DOUBLE
15013: LD_INT 0
15015: DEC
15016: ST_TO_ADDR
15017: LD_INT 40
15019: PUSH
15020: FOR_TO
15021: IFFALSE 15052
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15023: LD_VAR 0 3
15027: PPUSH
15028: LD_VAR 0 2
15032: PPUSH
15033: LD_INT 1
15035: PPUSH
15036: LD_VAR 0 3
15040: PPUSH
15041: CALL_OW 565
15045: PPUSH
15046: CALL_OW 324
15050: GO 15020
15052: POP
15053: POP
// end ;
15054: GO 14934
15056: POP
15057: POP
// end ;
15058: LD_VAR 0 1
15062: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15063: LD_INT 0
15065: PPUSH
15066: PPUSH
15067: PPUSH
// for side = 1 to 8 do
15068: LD_ADDR_VAR 0 3
15072: PUSH
15073: DOUBLE
15074: LD_INT 1
15076: DEC
15077: ST_TO_ADDR
15078: LD_INT 8
15080: PUSH
15081: FOR_TO
15082: IFFALSE 19078
// begin for i = 1 to 73 do
15084: LD_ADDR_VAR 0 4
15088: PUSH
15089: DOUBLE
15090: LD_INT 1
15092: DEC
15093: ST_TO_ADDR
15094: LD_INT 73
15096: PUSH
15097: FOR_TO
15098: IFFALSE 15119
// SetTech ( i , side , state_disabled ) ;
15100: LD_VAR 0 4
15104: PPUSH
15105: LD_VAR 0 3
15109: PPUSH
15110: LD_INT 0
15112: PPUSH
15113: CALL_OW 322
15117: GO 15097
15119: POP
15120: POP
// for i = 0 to 40 do
15121: LD_ADDR_VAR 0 4
15125: PUSH
15126: DOUBLE
15127: LD_INT 0
15129: DEC
15130: ST_TO_ADDR
15131: LD_INT 40
15133: PUSH
15134: FOR_TO
15135: IFFALSE 15156
// SetRestrict ( i , side , false ) ;
15137: LD_VAR 0 4
15141: PPUSH
15142: LD_VAR 0 3
15146: PPUSH
15147: LD_INT 0
15149: PPUSH
15150: CALL_OW 324
15154: GO 15134
15156: POP
15157: POP
// case level of 1 :
15158: LD_VAR 0 1
15162: PUSH
15163: LD_INT 1
15165: DOUBLE
15166: EQUAL
15167: IFTRUE 15171
15169: GO 15324
15171: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15172: LD_INT 35
15174: PPUSH
15175: LD_VAR 0 3
15179: PPUSH
15180: LD_INT 1
15182: PPUSH
15183: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15187: LD_INT 45
15189: PPUSH
15190: LD_VAR 0 3
15194: PPUSH
15195: LD_INT 1
15197: PPUSH
15198: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15202: LD_INT 46
15204: PPUSH
15205: LD_VAR 0 3
15209: PPUSH
15210: LD_INT 1
15212: PPUSH
15213: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15217: LD_INT 47
15219: PPUSH
15220: LD_VAR 0 3
15224: PPUSH
15225: LD_INT 1
15227: PPUSH
15228: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15232: LD_INT 0
15234: PPUSH
15235: LD_VAR 0 3
15239: PPUSH
15240: LD_INT 1
15242: PPUSH
15243: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15247: LD_INT 2
15249: PPUSH
15250: LD_VAR 0 3
15254: PPUSH
15255: LD_INT 1
15257: PPUSH
15258: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15262: LD_INT 4
15264: PPUSH
15265: LD_VAR 0 3
15269: PPUSH
15270: LD_INT 1
15272: PPUSH
15273: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15277: LD_INT 6
15279: PPUSH
15280: LD_VAR 0 3
15284: PPUSH
15285: LD_INT 1
15287: PPUSH
15288: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15292: LD_INT 29
15294: PPUSH
15295: LD_VAR 0 3
15299: PPUSH
15300: LD_INT 1
15302: PPUSH
15303: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15307: LD_INT 31
15309: PPUSH
15310: LD_VAR 0 3
15314: PPUSH
15315: LD_INT 1
15317: PPUSH
15318: CALL_OW 324
// end ; 2 :
15322: GO 19076
15324: LD_INT 2
15326: DOUBLE
15327: EQUAL
15328: IFTRUE 15332
15330: GO 15530
15332: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15333: LD_INT 35
15335: PPUSH
15336: LD_VAR 0 3
15340: PPUSH
15341: LD_INT 1
15343: PPUSH
15344: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15348: LD_INT 45
15350: PPUSH
15351: LD_VAR 0 3
15355: PPUSH
15356: LD_INT 1
15358: PPUSH
15359: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15363: LD_INT 46
15365: PPUSH
15366: LD_VAR 0 3
15370: PPUSH
15371: LD_INT 1
15373: PPUSH
15374: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15378: LD_INT 47
15380: PPUSH
15381: LD_VAR 0 3
15385: PPUSH
15386: LD_INT 1
15388: PPUSH
15389: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15393: LD_INT 1
15395: PPUSH
15396: LD_VAR 0 3
15400: PPUSH
15401: LD_INT 1
15403: PPUSH
15404: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15408: LD_INT 2
15410: PPUSH
15411: LD_VAR 0 3
15415: PPUSH
15416: LD_INT 1
15418: PPUSH
15419: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15423: LD_INT 11
15425: PPUSH
15426: LD_VAR 0 3
15430: PPUSH
15431: LD_INT 1
15433: PPUSH
15434: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15438: LD_INT 0
15440: PPUSH
15441: LD_VAR 0 3
15445: PPUSH
15446: LD_INT 1
15448: PPUSH
15449: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15453: LD_INT 2
15455: PPUSH
15456: LD_VAR 0 3
15460: PPUSH
15461: LD_INT 1
15463: PPUSH
15464: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15468: LD_INT 4
15470: PPUSH
15471: LD_VAR 0 3
15475: PPUSH
15476: LD_INT 1
15478: PPUSH
15479: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15483: LD_INT 6
15485: PPUSH
15486: LD_VAR 0 3
15490: PPUSH
15491: LD_INT 1
15493: PPUSH
15494: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15498: LD_INT 29
15500: PPUSH
15501: LD_VAR 0 3
15505: PPUSH
15506: LD_INT 1
15508: PPUSH
15509: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15513: LD_INT 31
15515: PPUSH
15516: LD_VAR 0 3
15520: PPUSH
15521: LD_INT 1
15523: PPUSH
15524: CALL_OW 324
// end ; 3 :
15528: GO 19076
15530: LD_INT 3
15532: DOUBLE
15533: EQUAL
15534: IFTRUE 15538
15536: GO 15991
15538: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15539: LD_INT 35
15541: PPUSH
15542: LD_VAR 0 3
15546: PPUSH
15547: LD_INT 1
15549: PPUSH
15550: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15554: LD_INT 45
15556: PPUSH
15557: LD_VAR 0 3
15561: PPUSH
15562: LD_INT 1
15564: PPUSH
15565: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15569: LD_INT 46
15571: PPUSH
15572: LD_VAR 0 3
15576: PPUSH
15577: LD_INT 1
15579: PPUSH
15580: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15584: LD_INT 47
15586: PPUSH
15587: LD_VAR 0 3
15591: PPUSH
15592: LD_INT 1
15594: PPUSH
15595: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15599: LD_INT 1
15601: PPUSH
15602: LD_VAR 0 3
15606: PPUSH
15607: LD_INT 1
15609: PPUSH
15610: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15614: LD_INT 2
15616: PPUSH
15617: LD_VAR 0 3
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15629: LD_INT 11
15631: PPUSH
15632: LD_VAR 0 3
15636: PPUSH
15637: LD_INT 1
15639: PPUSH
15640: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15644: LD_INT 48
15646: PPUSH
15647: LD_VAR 0 3
15651: PPUSH
15652: LD_INT 1
15654: PPUSH
15655: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15659: LD_INT 69
15661: PPUSH
15662: LD_VAR 0 3
15666: PPUSH
15667: LD_INT 1
15669: PPUSH
15670: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15674: LD_INT 39
15676: PPUSH
15677: LD_VAR 0 3
15681: PPUSH
15682: LD_INT 1
15684: PPUSH
15685: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15689: LD_INT 43
15691: PPUSH
15692: LD_VAR 0 3
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15704: LD_INT 51
15706: PPUSH
15707: LD_VAR 0 3
15711: PPUSH
15712: LD_INT 1
15714: PPUSH
15715: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15719: LD_INT 6
15721: PPUSH
15722: LD_VAR 0 3
15726: PPUSH
15727: LD_INT 1
15729: PPUSH
15730: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15734: LD_INT 0
15736: PPUSH
15737: LD_VAR 0 3
15741: PPUSH
15742: LD_INT 1
15744: PPUSH
15745: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15749: LD_INT 2
15751: PPUSH
15752: LD_VAR 0 3
15756: PPUSH
15757: LD_INT 1
15759: PPUSH
15760: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15764: LD_INT 3
15766: PPUSH
15767: LD_VAR 0 3
15771: PPUSH
15772: LD_INT 1
15774: PPUSH
15775: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15779: LD_INT 4
15781: PPUSH
15782: LD_VAR 0 3
15786: PPUSH
15787: LD_INT 1
15789: PPUSH
15790: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15794: LD_INT 6
15796: PPUSH
15797: LD_VAR 0 3
15801: PPUSH
15802: LD_INT 1
15804: PPUSH
15805: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15809: LD_INT 7
15811: PPUSH
15812: LD_VAR 0 3
15816: PPUSH
15817: LD_INT 1
15819: PPUSH
15820: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15824: LD_INT 8
15826: PPUSH
15827: LD_VAR 0 3
15831: PPUSH
15832: LD_INT 1
15834: PPUSH
15835: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15839: LD_INT 10
15841: PPUSH
15842: LD_VAR 0 3
15846: PPUSH
15847: LD_INT 1
15849: PPUSH
15850: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15854: LD_INT 15
15856: PPUSH
15857: LD_VAR 0 3
15861: PPUSH
15862: LD_INT 1
15864: PPUSH
15865: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15869: LD_INT 16
15871: PPUSH
15872: LD_VAR 0 3
15876: PPUSH
15877: LD_INT 1
15879: PPUSH
15880: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15884: LD_INT 17
15886: PPUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15899: LD_INT 20
15901: PPUSH
15902: LD_VAR 0 3
15906: PPUSH
15907: LD_INT 1
15909: PPUSH
15910: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15914: LD_INT 26
15916: PPUSH
15917: LD_VAR 0 3
15921: PPUSH
15922: LD_INT 1
15924: PPUSH
15925: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15929: LD_INT 27
15931: PPUSH
15932: LD_VAR 0 3
15936: PPUSH
15937: LD_INT 1
15939: PPUSH
15940: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15944: LD_INT 29
15946: PPUSH
15947: LD_VAR 0 3
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15959: LD_INT 31
15961: PPUSH
15962: LD_VAR 0 3
15966: PPUSH
15967: LD_INT 1
15969: PPUSH
15970: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15974: LD_INT 32
15976: PPUSH
15977: LD_VAR 0 3
15981: PPUSH
15982: LD_INT 1
15984: PPUSH
15985: CALL_OW 324
// end ; 4 :
15989: GO 19076
15991: LD_INT 4
15993: DOUBLE
15994: EQUAL
15995: IFTRUE 15999
15997: GO 16947
15999: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16000: LD_INT 35
16002: PPUSH
16003: LD_VAR 0 3
16007: PPUSH
16008: LD_INT 1
16010: PPUSH
16011: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16015: LD_INT 45
16017: PPUSH
16018: LD_VAR 0 3
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16030: LD_INT 46
16032: PPUSH
16033: LD_VAR 0 3
16037: PPUSH
16038: LD_INT 1
16040: PPUSH
16041: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16045: LD_INT 47
16047: PPUSH
16048: LD_VAR 0 3
16052: PPUSH
16053: LD_INT 1
16055: PPUSH
16056: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16060: LD_INT 1
16062: PPUSH
16063: LD_VAR 0 3
16067: PPUSH
16068: LD_INT 1
16070: PPUSH
16071: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16075: LD_INT 2
16077: PPUSH
16078: LD_VAR 0 3
16082: PPUSH
16083: LD_INT 1
16085: PPUSH
16086: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16090: LD_INT 11
16092: PPUSH
16093: LD_VAR 0 3
16097: PPUSH
16098: LD_INT 1
16100: PPUSH
16101: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16105: LD_INT 20
16107: PPUSH
16108: LD_VAR 0 3
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16120: LD_INT 48
16122: PPUSH
16123: LD_VAR 0 3
16127: PPUSH
16128: LD_INT 1
16130: PPUSH
16131: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16135: LD_INT 49
16137: PPUSH
16138: LD_VAR 0 3
16142: PPUSH
16143: LD_INT 1
16145: PPUSH
16146: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16150: LD_INT 69
16152: PPUSH
16153: LD_VAR 0 3
16157: PPUSH
16158: LD_INT 1
16160: PPUSH
16161: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16165: LD_INT 39
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: LD_INT 1
16175: PPUSH
16176: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16180: LD_INT 34
16182: PPUSH
16183: LD_VAR 0 3
16187: PPUSH
16188: LD_INT 1
16190: PPUSH
16191: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16195: LD_INT 42
16197: PPUSH
16198: LD_VAR 0 3
16202: PPUSH
16203: LD_INT 1
16205: PPUSH
16206: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16210: LD_INT 44
16212: PPUSH
16213: LD_VAR 0 3
16217: PPUSH
16218: LD_INT 1
16220: PPUSH
16221: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16225: LD_INT 41
16227: PPUSH
16228: LD_VAR 0 3
16232: PPUSH
16233: LD_INT 1
16235: PPUSH
16236: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16240: LD_INT 43
16242: PPUSH
16243: LD_VAR 0 3
16247: PPUSH
16248: LD_INT 1
16250: PPUSH
16251: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16255: LD_INT 70
16257: PPUSH
16258: LD_VAR 0 3
16262: PPUSH
16263: LD_INT 1
16265: PPUSH
16266: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16270: LD_INT 51
16272: PPUSH
16273: LD_VAR 0 3
16277: PPUSH
16278: LD_INT 1
16280: PPUSH
16281: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16285: LD_INT 52
16287: PPUSH
16288: LD_VAR 0 3
16292: PPUSH
16293: LD_INT 1
16295: PPUSH
16296: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16300: LD_INT 6
16302: PPUSH
16303: LD_VAR 0 3
16307: PPUSH
16308: LD_INT 1
16310: PPUSH
16311: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16315: LD_INT 15
16317: PPUSH
16318: LD_VAR 0 3
16322: PPUSH
16323: LD_INT 1
16325: PPUSH
16326: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16330: LD_INT 7
16332: PPUSH
16333: LD_VAR 0 3
16337: PPUSH
16338: LD_INT 1
16340: PPUSH
16341: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16345: LD_INT 12
16347: PPUSH
16348: LD_VAR 0 3
16352: PPUSH
16353: LD_INT 1
16355: PPUSH
16356: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16360: LD_INT 18
16362: PPUSH
16363: LD_VAR 0 3
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16375: LD_INT 60
16377: PPUSH
16378: LD_VAR 0 3
16382: PPUSH
16383: LD_INT 1
16385: PPUSH
16386: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16390: LD_INT 9
16392: PPUSH
16393: LD_VAR 0 3
16397: PPUSH
16398: LD_INT 1
16400: PPUSH
16401: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16405: LD_INT 30
16407: PPUSH
16408: LD_VAR 0 3
16412: PPUSH
16413: LD_INT 1
16415: PPUSH
16416: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16420: LD_INT 37
16422: PPUSH
16423: LD_VAR 0 3
16427: PPUSH
16428: LD_INT 1
16430: PPUSH
16431: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16435: LD_INT 5
16437: PPUSH
16438: LD_VAR 0 3
16442: PPUSH
16443: LD_INT 1
16445: PPUSH
16446: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16450: LD_INT 66
16452: PPUSH
16453: LD_VAR 0 3
16457: PPUSH
16458: LD_INT 1
16460: PPUSH
16461: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16465: LD_INT 21
16467: PPUSH
16468: LD_VAR 0 3
16472: PPUSH
16473: LD_INT 1
16475: PPUSH
16476: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16480: LD_INT 22
16482: PPUSH
16483: LD_VAR 0 3
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16495: LD_INT 54
16497: PPUSH
16498: LD_VAR 0 3
16502: PPUSH
16503: LD_INT 1
16505: PPUSH
16506: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16510: LD_INT 0
16512: PPUSH
16513: LD_VAR 0 3
16517: PPUSH
16518: LD_INT 1
16520: PPUSH
16521: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16525: LD_INT 1
16527: PPUSH
16528: LD_VAR 0 3
16532: PPUSH
16533: LD_INT 1
16535: PPUSH
16536: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16540: LD_INT 2
16542: PPUSH
16543: LD_VAR 0 3
16547: PPUSH
16548: LD_INT 1
16550: PPUSH
16551: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16555: LD_INT 3
16557: PPUSH
16558: LD_VAR 0 3
16562: PPUSH
16563: LD_INT 1
16565: PPUSH
16566: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16570: LD_INT 4
16572: PPUSH
16573: LD_VAR 0 3
16577: PPUSH
16578: LD_INT 1
16580: PPUSH
16581: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16585: LD_INT 5
16587: PPUSH
16588: LD_VAR 0 3
16592: PPUSH
16593: LD_INT 1
16595: PPUSH
16596: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16600: LD_INT 6
16602: PPUSH
16603: LD_VAR 0 3
16607: PPUSH
16608: LD_INT 1
16610: PPUSH
16611: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16615: LD_INT 7
16617: PPUSH
16618: LD_VAR 0 3
16622: PPUSH
16623: LD_INT 1
16625: PPUSH
16626: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16630: LD_INT 8
16632: PPUSH
16633: LD_VAR 0 3
16637: PPUSH
16638: LD_INT 1
16640: PPUSH
16641: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16645: LD_INT 10
16647: PPUSH
16648: LD_VAR 0 3
16652: PPUSH
16653: LD_INT 1
16655: PPUSH
16656: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16660: LD_INT 11
16662: PPUSH
16663: LD_VAR 0 3
16667: PPUSH
16668: LD_INT 1
16670: PPUSH
16671: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16675: LD_INT 12
16677: PPUSH
16678: LD_VAR 0 3
16682: PPUSH
16683: LD_INT 1
16685: PPUSH
16686: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16690: LD_INT 13
16692: PPUSH
16693: LD_VAR 0 3
16697: PPUSH
16698: LD_INT 1
16700: PPUSH
16701: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16705: LD_INT 14
16707: PPUSH
16708: LD_VAR 0 3
16712: PPUSH
16713: LD_INT 1
16715: PPUSH
16716: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16720: LD_INT 15
16722: PPUSH
16723: LD_VAR 0 3
16727: PPUSH
16728: LD_INT 1
16730: PPUSH
16731: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16735: LD_INT 16
16737: PPUSH
16738: LD_VAR 0 3
16742: PPUSH
16743: LD_INT 1
16745: PPUSH
16746: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16750: LD_INT 17
16752: PPUSH
16753: LD_VAR 0 3
16757: PPUSH
16758: LD_INT 1
16760: PPUSH
16761: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16765: LD_INT 19
16767: PPUSH
16768: LD_VAR 0 3
16772: PPUSH
16773: LD_INT 1
16775: PPUSH
16776: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16780: LD_INT 20
16782: PPUSH
16783: LD_VAR 0 3
16787: PPUSH
16788: LD_INT 1
16790: PPUSH
16791: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16795: LD_INT 21
16797: PPUSH
16798: LD_VAR 0 3
16802: PPUSH
16803: LD_INT 1
16805: PPUSH
16806: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16810: LD_INT 23
16812: PPUSH
16813: LD_VAR 0 3
16817: PPUSH
16818: LD_INT 1
16820: PPUSH
16821: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16825: LD_INT 26
16827: PPUSH
16828: LD_VAR 0 3
16832: PPUSH
16833: LD_INT 1
16835: PPUSH
16836: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16840: LD_INT 27
16842: PPUSH
16843: LD_VAR 0 3
16847: PPUSH
16848: LD_INT 1
16850: PPUSH
16851: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16855: LD_INT 28
16857: PPUSH
16858: LD_VAR 0 3
16862: PPUSH
16863: LD_INT 1
16865: PPUSH
16866: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16870: LD_INT 29
16872: PPUSH
16873: LD_VAR 0 3
16877: PPUSH
16878: LD_INT 1
16880: PPUSH
16881: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16885: LD_INT 30
16887: PPUSH
16888: LD_VAR 0 3
16892: PPUSH
16893: LD_INT 1
16895: PPUSH
16896: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16900: LD_INT 31
16902: PPUSH
16903: LD_VAR 0 3
16907: PPUSH
16908: LD_INT 1
16910: PPUSH
16911: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16915: LD_INT 32
16917: PPUSH
16918: LD_VAR 0 3
16922: PPUSH
16923: LD_INT 1
16925: PPUSH
16926: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16930: LD_INT 36
16932: PPUSH
16933: LD_VAR 0 3
16937: PPUSH
16938: LD_INT 1
16940: PPUSH
16941: CALL_OW 324
// end ; 5 :
16945: GO 19076
16947: LD_INT 5
16949: DOUBLE
16950: EQUAL
16951: IFTRUE 16955
16953: GO 18068
16955: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16956: LD_INT 35
16958: PPUSH
16959: LD_VAR 0 3
16963: PPUSH
16964: LD_INT 1
16966: PPUSH
16967: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16971: LD_INT 45
16973: PPUSH
16974: LD_VAR 0 3
16978: PPUSH
16979: LD_INT 1
16981: PPUSH
16982: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16986: LD_INT 46
16988: PPUSH
16989: LD_VAR 0 3
16993: PPUSH
16994: LD_INT 1
16996: PPUSH
16997: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17001: LD_INT 47
17003: PPUSH
17004: LD_VAR 0 3
17008: PPUSH
17009: LD_INT 1
17011: PPUSH
17012: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17016: LD_INT 1
17018: PPUSH
17019: LD_VAR 0 3
17023: PPUSH
17024: LD_INT 1
17026: PPUSH
17027: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17031: LD_INT 2
17033: PPUSH
17034: LD_VAR 0 3
17038: PPUSH
17039: LD_INT 1
17041: PPUSH
17042: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17046: LD_INT 11
17048: PPUSH
17049: LD_VAR 0 3
17053: PPUSH
17054: LD_INT 1
17056: PPUSH
17057: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17061: LD_INT 20
17063: PPUSH
17064: LD_VAR 0 3
17068: PPUSH
17069: LD_INT 1
17071: PPUSH
17072: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17076: LD_INT 48
17078: PPUSH
17079: LD_VAR 0 3
17083: PPUSH
17084: LD_INT 1
17086: PPUSH
17087: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17091: LD_INT 49
17093: PPUSH
17094: LD_VAR 0 3
17098: PPUSH
17099: LD_INT 1
17101: PPUSH
17102: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17106: LD_INT 69
17108: PPUSH
17109: LD_VAR 0 3
17113: PPUSH
17114: LD_INT 1
17116: PPUSH
17117: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17121: LD_INT 39
17123: PPUSH
17124: LD_VAR 0 3
17128: PPUSH
17129: LD_INT 1
17131: PPUSH
17132: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17136: LD_INT 34
17138: PPUSH
17139: LD_VAR 0 3
17143: PPUSH
17144: LD_INT 1
17146: PPUSH
17147: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17151: LD_INT 42
17153: PPUSH
17154: LD_VAR 0 3
17158: PPUSH
17159: LD_INT 1
17161: PPUSH
17162: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17166: LD_INT 44
17168: PPUSH
17169: LD_VAR 0 3
17173: PPUSH
17174: LD_INT 1
17176: PPUSH
17177: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17181: LD_INT 41
17183: PPUSH
17184: LD_VAR 0 3
17188: PPUSH
17189: LD_INT 1
17191: PPUSH
17192: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17196: LD_INT 40
17198: PPUSH
17199: LD_VAR 0 3
17203: PPUSH
17204: LD_INT 1
17206: PPUSH
17207: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17211: LD_INT 43
17213: PPUSH
17214: LD_VAR 0 3
17218: PPUSH
17219: LD_INT 1
17221: PPUSH
17222: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17226: LD_INT 70
17228: PPUSH
17229: LD_VAR 0 3
17233: PPUSH
17234: LD_INT 1
17236: PPUSH
17237: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17241: LD_INT 51
17243: PPUSH
17244: LD_VAR 0 3
17248: PPUSH
17249: LD_INT 1
17251: PPUSH
17252: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17256: LD_INT 52
17258: PPUSH
17259: LD_VAR 0 3
17263: PPUSH
17264: LD_INT 1
17266: PPUSH
17267: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17271: LD_INT 6
17273: PPUSH
17274: LD_VAR 0 3
17278: PPUSH
17279: LD_INT 1
17281: PPUSH
17282: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17286: LD_INT 15
17288: PPUSH
17289: LD_VAR 0 3
17293: PPUSH
17294: LD_INT 1
17296: PPUSH
17297: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17301: LD_INT 7
17303: PPUSH
17304: LD_VAR 0 3
17308: PPUSH
17309: LD_INT 1
17311: PPUSH
17312: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17316: LD_INT 12
17318: PPUSH
17319: LD_VAR 0 3
17323: PPUSH
17324: LD_INT 1
17326: PPUSH
17327: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17331: LD_INT 17
17333: PPUSH
17334: LD_VAR 0 3
17338: PPUSH
17339: LD_INT 1
17341: PPUSH
17342: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17346: LD_INT 18
17348: PPUSH
17349: LD_VAR 0 3
17353: PPUSH
17354: LD_INT 1
17356: PPUSH
17357: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17361: LD_INT 60
17363: PPUSH
17364: LD_VAR 0 3
17368: PPUSH
17369: LD_INT 1
17371: PPUSH
17372: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17376: LD_INT 32
17378: PPUSH
17379: LD_VAR 0 3
17383: PPUSH
17384: LD_INT 1
17386: PPUSH
17387: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17391: LD_INT 9
17393: PPUSH
17394: LD_VAR 0 3
17398: PPUSH
17399: LD_INT 1
17401: PPUSH
17402: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17406: LD_INT 57
17408: PPUSH
17409: LD_VAR 0 3
17413: PPUSH
17414: LD_INT 1
17416: PPUSH
17417: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17421: LD_INT 30
17423: PPUSH
17424: LD_VAR 0 3
17428: PPUSH
17429: LD_INT 1
17431: PPUSH
17432: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17436: LD_INT 37
17438: PPUSH
17439: LD_VAR 0 3
17443: PPUSH
17444: LD_INT 1
17446: PPUSH
17447: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17451: LD_INT 63
17453: PPUSH
17454: LD_VAR 0 3
17458: PPUSH
17459: LD_INT 1
17461: PPUSH
17462: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17466: LD_INT 3
17468: PPUSH
17469: LD_VAR 0 3
17473: PPUSH
17474: LD_INT 1
17476: PPUSH
17477: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17481: LD_INT 4
17483: PPUSH
17484: LD_VAR 0 3
17488: PPUSH
17489: LD_INT 1
17491: PPUSH
17492: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17496: LD_INT 5
17498: PPUSH
17499: LD_VAR 0 3
17503: PPUSH
17504: LD_INT 1
17506: PPUSH
17507: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17511: LD_INT 66
17513: PPUSH
17514: LD_VAR 0 3
17518: PPUSH
17519: LD_INT 1
17521: PPUSH
17522: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17526: LD_INT 21
17528: PPUSH
17529: LD_VAR 0 3
17533: PPUSH
17534: LD_INT 1
17536: PPUSH
17537: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17541: LD_INT 22
17543: PPUSH
17544: LD_VAR 0 3
17548: PPUSH
17549: LD_INT 1
17551: PPUSH
17552: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17556: LD_INT 19
17558: PPUSH
17559: LD_VAR 0 3
17563: PPUSH
17564: LD_INT 1
17566: PPUSH
17567: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17571: LD_INT 54
17573: PPUSH
17574: LD_VAR 0 3
17578: PPUSH
17579: LD_INT 1
17581: PPUSH
17582: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17586: LD_INT 55
17588: PPUSH
17589: LD_VAR 0 3
17593: PPUSH
17594: LD_INT 1
17596: PPUSH
17597: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17601: LD_INT 0
17603: PPUSH
17604: LD_VAR 0 3
17608: PPUSH
17609: LD_INT 1
17611: PPUSH
17612: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17616: LD_INT 1
17618: PPUSH
17619: LD_VAR 0 3
17623: PPUSH
17624: LD_INT 1
17626: PPUSH
17627: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17631: LD_INT 2
17633: PPUSH
17634: LD_VAR 0 3
17638: PPUSH
17639: LD_INT 1
17641: PPUSH
17642: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17646: LD_INT 3
17648: PPUSH
17649: LD_VAR 0 3
17653: PPUSH
17654: LD_INT 1
17656: PPUSH
17657: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17661: LD_INT 4
17663: PPUSH
17664: LD_VAR 0 3
17668: PPUSH
17669: LD_INT 1
17671: PPUSH
17672: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17676: LD_INT 5
17678: PPUSH
17679: LD_VAR 0 3
17683: PPUSH
17684: LD_INT 1
17686: PPUSH
17687: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17691: LD_INT 6
17693: PPUSH
17694: LD_VAR 0 3
17698: PPUSH
17699: LD_INT 1
17701: PPUSH
17702: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17706: LD_INT 7
17708: PPUSH
17709: LD_VAR 0 3
17713: PPUSH
17714: LD_INT 1
17716: PPUSH
17717: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17721: LD_INT 8
17723: PPUSH
17724: LD_VAR 0 3
17728: PPUSH
17729: LD_INT 1
17731: PPUSH
17732: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17736: LD_INT 10
17738: PPUSH
17739: LD_VAR 0 3
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17751: LD_INT 11
17753: PPUSH
17754: LD_VAR 0 3
17758: PPUSH
17759: LD_INT 1
17761: PPUSH
17762: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17766: LD_INT 12
17768: PPUSH
17769: LD_VAR 0 3
17773: PPUSH
17774: LD_INT 1
17776: PPUSH
17777: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17781: LD_INT 13
17783: PPUSH
17784: LD_VAR 0 3
17788: PPUSH
17789: LD_INT 1
17791: PPUSH
17792: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17796: LD_INT 14
17798: PPUSH
17799: LD_VAR 0 3
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17811: LD_INT 15
17813: PPUSH
17814: LD_VAR 0 3
17818: PPUSH
17819: LD_INT 1
17821: PPUSH
17822: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17826: LD_INT 16
17828: PPUSH
17829: LD_VAR 0 3
17833: PPUSH
17834: LD_INT 1
17836: PPUSH
17837: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17841: LD_INT 17
17843: PPUSH
17844: LD_VAR 0 3
17848: PPUSH
17849: LD_INT 1
17851: PPUSH
17852: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
17856: LD_INT 18
17858: PPUSH
17859: LD_VAR 0 3
17863: PPUSH
17864: LD_INT 1
17866: PPUSH
17867: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17871: LD_INT 19
17873: PPUSH
17874: LD_VAR 0 3
17878: PPUSH
17879: LD_INT 1
17881: PPUSH
17882: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17886: LD_INT 20
17888: PPUSH
17889: LD_VAR 0 3
17893: PPUSH
17894: LD_INT 1
17896: PPUSH
17897: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17901: LD_INT 21
17903: PPUSH
17904: LD_VAR 0 3
17908: PPUSH
17909: LD_INT 1
17911: PPUSH
17912: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17916: LD_INT 23
17918: PPUSH
17919: LD_VAR 0 3
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17931: LD_INT 26
17933: PPUSH
17934: LD_VAR 0 3
17938: PPUSH
17939: LD_INT 1
17941: PPUSH
17942: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17946: LD_INT 27
17948: PPUSH
17949: LD_VAR 0 3
17953: PPUSH
17954: LD_INT 1
17956: PPUSH
17957: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17961: LD_INT 28
17963: PPUSH
17964: LD_VAR 0 3
17968: PPUSH
17969: LD_INT 1
17971: PPUSH
17972: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17976: LD_INT 29
17978: PPUSH
17979: LD_VAR 0 3
17983: PPUSH
17984: LD_INT 1
17986: PPUSH
17987: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17991: LD_INT 30
17993: PPUSH
17994: LD_VAR 0 3
17998: PPUSH
17999: LD_INT 1
18001: PPUSH
18002: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18006: LD_INT 31
18008: PPUSH
18009: LD_VAR 0 3
18013: PPUSH
18014: LD_INT 1
18016: PPUSH
18017: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18021: LD_INT 32
18023: PPUSH
18024: LD_VAR 0 3
18028: PPUSH
18029: LD_INT 1
18031: PPUSH
18032: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18036: LD_INT 33
18038: PPUSH
18039: LD_VAR 0 3
18043: PPUSH
18044: LD_INT 1
18046: PPUSH
18047: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18051: LD_INT 36
18053: PPUSH
18054: LD_VAR 0 3
18058: PPUSH
18059: LD_INT 1
18061: PPUSH
18062: CALL_OW 324
// end ; 6 :
18066: GO 19076
18068: LD_INT 6
18070: DOUBLE
18071: EQUAL
18072: IFTRUE 18076
18074: GO 19001
18076: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18077: LD_INT 35
18079: PPUSH
18080: LD_VAR 0 3
18084: PPUSH
18085: LD_INT 1
18087: PPUSH
18088: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18092: LD_INT 45
18094: PPUSH
18095: LD_VAR 0 3
18099: PPUSH
18100: LD_INT 1
18102: PPUSH
18103: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18107: LD_INT 46
18109: PPUSH
18110: LD_VAR 0 3
18114: PPUSH
18115: LD_INT 1
18117: PPUSH
18118: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18122: LD_INT 47
18124: PPUSH
18125: LD_VAR 0 3
18129: PPUSH
18130: LD_INT 1
18132: PPUSH
18133: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18137: LD_INT 1
18139: PPUSH
18140: LD_VAR 0 3
18144: PPUSH
18145: LD_INT 1
18147: PPUSH
18148: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18152: LD_INT 2
18154: PPUSH
18155: LD_VAR 0 3
18159: PPUSH
18160: LD_INT 1
18162: PPUSH
18163: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18167: LD_INT 11
18169: PPUSH
18170: LD_VAR 0 3
18174: PPUSH
18175: LD_INT 1
18177: PPUSH
18178: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18182: LD_INT 20
18184: PPUSH
18185: LD_VAR 0 3
18189: PPUSH
18190: LD_INT 1
18192: PPUSH
18193: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18197: LD_INT 48
18199: PPUSH
18200: LD_VAR 0 3
18204: PPUSH
18205: LD_INT 1
18207: PPUSH
18208: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18212: LD_INT 49
18214: PPUSH
18215: LD_VAR 0 3
18219: PPUSH
18220: LD_INT 1
18222: PPUSH
18223: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18227: LD_INT 50
18229: PPUSH
18230: LD_VAR 0 3
18234: PPUSH
18235: LD_INT 1
18237: PPUSH
18238: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18242: LD_INT 69
18244: PPUSH
18245: LD_VAR 0 3
18249: PPUSH
18250: LD_INT 1
18252: PPUSH
18253: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18257: LD_INT 39
18259: PPUSH
18260: LD_VAR 0 3
18264: PPUSH
18265: LD_INT 1
18267: PPUSH
18268: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18272: LD_INT 34
18274: PPUSH
18275: LD_VAR 0 3
18279: PPUSH
18280: LD_INT 1
18282: PPUSH
18283: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18287: LD_INT 42
18289: PPUSH
18290: LD_VAR 0 3
18294: PPUSH
18295: LD_INT 1
18297: PPUSH
18298: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18302: LD_INT 44
18304: PPUSH
18305: LD_VAR 0 3
18309: PPUSH
18310: LD_INT 1
18312: PPUSH
18313: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18317: LD_INT 41
18319: PPUSH
18320: LD_VAR 0 3
18324: PPUSH
18325: LD_INT 1
18327: PPUSH
18328: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18332: LD_INT 13
18334: PPUSH
18335: LD_VAR 0 3
18339: PPUSH
18340: LD_INT 1
18342: PPUSH
18343: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18347: LD_INT 40
18349: PPUSH
18350: LD_VAR 0 3
18354: PPUSH
18355: LD_INT 1
18357: PPUSH
18358: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18362: LD_INT 43
18364: PPUSH
18365: LD_VAR 0 3
18369: PPUSH
18370: LD_INT 1
18372: PPUSH
18373: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18377: LD_INT 70
18379: PPUSH
18380: LD_VAR 0 3
18384: PPUSH
18385: LD_INT 1
18387: PPUSH
18388: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18392: LD_INT 23
18394: PPUSH
18395: LD_VAR 0 3
18399: PPUSH
18400: LD_INT 1
18402: PPUSH
18403: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18407: LD_INT 51
18409: PPUSH
18410: LD_VAR 0 3
18414: PPUSH
18415: LD_INT 1
18417: PPUSH
18418: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18422: LD_INT 52
18424: PPUSH
18425: LD_VAR 0 3
18429: PPUSH
18430: LD_INT 1
18432: PPUSH
18433: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18437: LD_INT 6
18439: PPUSH
18440: LD_VAR 0 3
18444: PPUSH
18445: LD_INT 1
18447: PPUSH
18448: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18452: LD_INT 15
18454: PPUSH
18455: LD_VAR 0 3
18459: PPUSH
18460: LD_INT 1
18462: PPUSH
18463: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18467: LD_INT 7
18469: PPUSH
18470: LD_VAR 0 3
18474: PPUSH
18475: LD_INT 1
18477: PPUSH
18478: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18482: LD_INT 12
18484: PPUSH
18485: LD_VAR 0 3
18489: PPUSH
18490: LD_INT 1
18492: PPUSH
18493: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
18497: LD_INT 10
18499: PPUSH
18500: LD_VAR 0 3
18504: PPUSH
18505: LD_INT 1
18507: PPUSH
18508: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
18512: LD_INT 17
18514: PPUSH
18515: LD_VAR 0 3
18519: PPUSH
18520: LD_INT 1
18522: PPUSH
18523: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18527: LD_INT 18
18529: PPUSH
18530: LD_VAR 0 3
18534: PPUSH
18535: LD_INT 1
18537: PPUSH
18538: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18542: LD_INT 60
18544: PPUSH
18545: LD_VAR 0 3
18549: PPUSH
18550: LD_INT 1
18552: PPUSH
18553: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
18557: LD_INT 61
18559: PPUSH
18560: LD_VAR 0 3
18564: PPUSH
18565: LD_INT 1
18567: PPUSH
18568: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18572: LD_INT 32
18574: PPUSH
18575: LD_VAR 0 3
18579: PPUSH
18580: LD_INT 1
18582: PPUSH
18583: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
18587: LD_INT 27
18589: PPUSH
18590: LD_VAR 0 3
18594: PPUSH
18595: LD_INT 1
18597: PPUSH
18598: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
18602: LD_INT 36
18604: PPUSH
18605: LD_VAR 0 3
18609: PPUSH
18610: LD_INT 1
18612: PPUSH
18613: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
18617: LD_INT 33
18619: PPUSH
18620: LD_VAR 0 3
18624: PPUSH
18625: LD_INT 1
18627: PPUSH
18628: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18632: LD_INT 9
18634: PPUSH
18635: LD_VAR 0 3
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
18647: LD_INT 38
18649: PPUSH
18650: LD_VAR 0 3
18654: PPUSH
18655: LD_INT 1
18657: PPUSH
18658: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18662: LD_INT 57
18664: PPUSH
18665: LD_VAR 0 3
18669: PPUSH
18670: LD_INT 1
18672: PPUSH
18673: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
18677: LD_INT 58
18679: PPUSH
18680: LD_VAR 0 3
18684: PPUSH
18685: LD_INT 1
18687: PPUSH
18688: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
18692: LD_INT 28
18694: PPUSH
18695: LD_VAR 0 3
18699: PPUSH
18700: LD_INT 1
18702: PPUSH
18703: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
18707: LD_INT 29
18709: PPUSH
18710: LD_VAR 0 3
18714: PPUSH
18715: LD_INT 1
18717: PPUSH
18718: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18722: LD_INT 30
18724: PPUSH
18725: LD_VAR 0 3
18729: PPUSH
18730: LD_INT 1
18732: PPUSH
18733: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18737: LD_INT 37
18739: PPUSH
18740: LD_VAR 0 3
18744: PPUSH
18745: LD_INT 1
18747: PPUSH
18748: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18752: LD_INT 63
18754: PPUSH
18755: LD_VAR 0 3
18759: PPUSH
18760: LD_INT 1
18762: PPUSH
18763: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
18767: LD_INT 64
18769: PPUSH
18770: LD_VAR 0 3
18774: PPUSH
18775: LD_INT 1
18777: PPUSH
18778: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18782: LD_INT 3
18784: PPUSH
18785: LD_VAR 0 3
18789: PPUSH
18790: LD_INT 1
18792: PPUSH
18793: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18797: LD_INT 4
18799: PPUSH
18800: LD_VAR 0 3
18804: PPUSH
18805: LD_INT 1
18807: PPUSH
18808: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18812: LD_INT 5
18814: PPUSH
18815: LD_VAR 0 3
18819: PPUSH
18820: LD_INT 1
18822: PPUSH
18823: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
18827: LD_INT 8
18829: PPUSH
18830: LD_VAR 0 3
18834: PPUSH
18835: LD_INT 1
18837: PPUSH
18838: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18842: LD_INT 66
18844: PPUSH
18845: LD_VAR 0 3
18849: PPUSH
18850: LD_INT 1
18852: PPUSH
18853: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
18857: LD_INT 67
18859: PPUSH
18860: LD_VAR 0 3
18864: PPUSH
18865: LD_INT 1
18867: PPUSH
18868: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18872: LD_INT 21
18874: PPUSH
18875: LD_VAR 0 3
18879: PPUSH
18880: LD_INT 1
18882: PPUSH
18883: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18887: LD_INT 22
18889: PPUSH
18890: LD_VAR 0 3
18894: PPUSH
18895: LD_INT 1
18897: PPUSH
18898: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18902: LD_INT 19
18904: PPUSH
18905: LD_VAR 0 3
18909: PPUSH
18910: LD_INT 1
18912: PPUSH
18913: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
18917: LD_INT 26
18919: PPUSH
18920: LD_VAR 0 3
18924: PPUSH
18925: LD_INT 1
18927: PPUSH
18928: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18932: LD_INT 54
18934: PPUSH
18935: LD_VAR 0 3
18939: PPUSH
18940: LD_INT 1
18942: PPUSH
18943: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18947: LD_INT 55
18949: PPUSH
18950: LD_VAR 0 3
18954: PPUSH
18955: LD_INT 1
18957: PPUSH
18958: CALL_OW 322
// for i = 0 to 39 do
18962: LD_ADDR_VAR 0 4
18966: PUSH
18967: DOUBLE
18968: LD_INT 0
18970: DEC
18971: ST_TO_ADDR
18972: LD_INT 39
18974: PUSH
18975: FOR_TO
18976: IFFALSE 18997
// SetRestrict ( i , side , true ) ;
18978: LD_VAR 0 4
18982: PPUSH
18983: LD_VAR 0 3
18987: PPUSH
18988: LD_INT 1
18990: PPUSH
18991: CALL_OW 324
18995: GO 18975
18997: POP
18998: POP
// end ; else
18999: GO 19076
19001: POP
// begin for i = 1 to 73 do
19002: LD_ADDR_VAR 0 4
19006: PUSH
19007: DOUBLE
19008: LD_INT 1
19010: DEC
19011: ST_TO_ADDR
19012: LD_INT 73
19014: PUSH
19015: FOR_TO
19016: IFFALSE 19037
// SetTech ( i , side , state_enabled ) ;
19018: LD_VAR 0 4
19022: PPUSH
19023: LD_VAR 0 3
19027: PPUSH
19028: LD_INT 1
19030: PPUSH
19031: CALL_OW 322
19035: GO 19015
19037: POP
19038: POP
// for i = 0 to 39 do
19039: LD_ADDR_VAR 0 4
19043: PUSH
19044: DOUBLE
19045: LD_INT 0
19047: DEC
19048: ST_TO_ADDR
19049: LD_INT 39
19051: PUSH
19052: FOR_TO
19053: IFFALSE 19074
// SetRestrict ( i , side , true ) ;
19055: LD_VAR 0 4
19059: PPUSH
19060: LD_VAR 0 3
19064: PPUSH
19065: LD_INT 1
19067: PPUSH
19068: CALL_OW 324
19072: GO 19052
19074: POP
19075: POP
// end ; end ; end ;
19076: GO 15081
19078: POP
19079: POP
// end ; end_of_file
19080: LD_VAR 0 2
19084: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
19085: LD_INT 0
19087: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
19088: LD_VAR 0 1
19092: PPUSH
19093: LD_VAR 0 2
19097: PPUSH
19098: LD_VAR 0 3
19102: PPUSH
19103: LD_INT 0
19105: PPUSH
19106: CALL 19115 0 4
// end ;
19110: LD_VAR 0 4
19114: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
19115: LD_INT 0
19117: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
19118: LD_STRING initScore({
19120: PUSH
19121: LD_VAR 0 1
19125: PUSH
19126: LD_INT 1
19128: ARRAY
19129: STR
19130: PUSH
19131: LD_STRING ,
19133: STR
19134: PUSH
19135: LD_VAR 0 1
19139: PUSH
19140: LD_INT 2
19142: ARRAY
19143: STR
19144: PUSH
19145: LD_STRING ,
19147: STR
19148: PUSH
19149: LD_VAR 0 1
19153: PUSH
19154: LD_INT 3
19156: ARRAY
19157: STR
19158: PUSH
19159: LD_STRING ,
19161: STR
19162: PUSH
19163: LD_VAR 0 1
19167: PUSH
19168: LD_INT 4
19170: ARRAY
19171: STR
19172: PUSH
19173: LD_STRING ,
19175: STR
19176: PUSH
19177: LD_VAR 0 1
19181: PUSH
19182: LD_INT 5
19184: ARRAY
19185: STR
19186: PUSH
19187: LD_STRING ,
19189: STR
19190: PUSH
19191: LD_VAR 0 1
19195: PUSH
19196: LD_INT 6
19198: ARRAY
19199: STR
19200: PUSH
19201: LD_STRING ,
19203: STR
19204: PUSH
19205: LD_VAR 0 1
19209: PUSH
19210: LD_INT 7
19212: ARRAY
19213: STR
19214: PUSH
19215: LD_STRING ,
19217: STR
19218: PUSH
19219: LD_VAR 0 1
19223: PUSH
19224: LD_INT 8
19226: ARRAY
19227: STR
19228: PUSH
19229: LD_STRING },
19231: STR
19232: PUSH
19233: LD_VAR 0 2
19237: STR
19238: PUSH
19239: LD_STRING ,
19241: STR
19242: PUSH
19243: LD_VAR 0 3
19247: STR
19248: PUSH
19249: LD_STRING ,
19251: STR
19252: PUSH
19253: LD_VAR 0 4
19257: STR
19258: PUSH
19259: LD_STRING );
19261: STR
19262: PPUSH
19263: CALL_OW 559
// end ;
19267: LD_VAR 0 5
19271: RET
// export function LScore_Reset ( ) ; begin
19272: LD_INT 0
19274: PPUSH
// ToLua ( ResetScorebar(); ) ;
19275: LD_STRING ResetScorebar();
19277: PPUSH
19278: CALL_OW 559
// end ;
19282: LD_VAR 0 1
19286: RET
// export function LScore_Delete ( ID ) ; begin
19287: LD_INT 0
19289: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
19290: LD_STRING deleteScore(
19292: PUSH
19293: LD_VAR 0 1
19297: STR
19298: PUSH
19299: LD_STRING );
19301: STR
19302: PPUSH
19303: CALL_OW 559
// end ;
19307: LD_VAR 0 2
19311: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
19312: LD_INT 0
19314: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
19315: LD_STRING AST(
19317: PUSH
19318: LD_VAR 0 1
19322: STR
19323: PUSH
19324: LD_STRING ,
19326: STR
19327: PUSH
19328: LD_VAR 0 2
19332: STR
19333: PUSH
19334: LD_STRING ,
19336: STR
19337: PUSH
19338: LD_VAR 0 3
19342: STR
19343: PUSH
19344: LD_STRING ,);
19346: STR
19347: PPUSH
19348: CALL_OW 559
// end ;
19352: LD_VAR 0 4
19356: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
19357: LD_INT 0
19359: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
19360: LD_STRING AST(
19362: PUSH
19363: LD_VAR 0 1
19367: STR
19368: PUSH
19369: LD_STRING ,
19371: STR
19372: PUSH
19373: LD_VAR 0 2
19377: STR
19378: PUSH
19379: LD_STRING ,
19381: STR
19382: PUSH
19383: LD_VAR 0 3
19387: STR
19388: PUSH
19389: LD_STRING ,
19391: STR
19392: PUSH
19393: LD_VAR 0 4
19397: STR
19398: PUSH
19399: LD_STRING );
19401: STR
19402: PPUSH
19403: CALL_OW 559
// end ;
19407: LD_VAR 0 5
19411: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
19412: LD_INT 0
19414: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
19415: LD_STRING AST(
19417: PUSH
19418: LD_VAR 0 1
19422: STR
19423: PUSH
19424: LD_STRING ,
19426: STR
19427: PUSH
19428: LD_VAR 0 2
19432: STR
19433: PUSH
19434: LD_STRING ,
19436: STR
19437: PUSH
19438: LD_VAR 0 3
19442: STR
19443: PUSH
19444: LD_STRING ,
19446: STR
19447: PUSH
19448: LD_VAR 0 4
19452: STR
19453: PUSH
19454: LD_STRING ,
19456: STR
19457: PUSH
19458: LD_VAR 0 5
19462: STR
19463: PUSH
19464: LD_STRING );
19466: STR
19467: PPUSH
19468: CALL_OW 559
// end ;
19472: LD_VAR 0 6
19476: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
19477: LD_INT 0
19479: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
19480: LD_STRING ASRT(
19482: PUSH
19483: LD_VAR 0 1
19487: STR
19488: PUSH
19489: LD_STRING ,
19491: STR
19492: PUSH
19493: LD_VAR 0 2
19497: STR
19498: PUSH
19499: LD_STRING ,
19501: STR
19502: PUSH
19503: LD_VAR 0 3
19507: STR
19508: PUSH
19509: LD_STRING ,);
19511: STR
19512: PPUSH
19513: CALL_OW 559
// end ;
19517: LD_VAR 0 4
19521: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
19522: LD_INT 0
19524: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
19525: LD_STRING ASRT(
19527: PUSH
19528: LD_VAR 0 1
19532: STR
19533: PUSH
19534: LD_STRING ,
19536: STR
19537: PUSH
19538: LD_VAR 0 2
19542: STR
19543: PUSH
19544: LD_STRING ,
19546: STR
19547: PUSH
19548: LD_VAR 0 3
19552: STR
19553: PUSH
19554: LD_STRING ,
19556: STR
19557: PUSH
19558: LD_VAR 0 4
19562: STR
19563: PUSH
19564: LD_STRING );
19566: STR
19567: PPUSH
19568: CALL_OW 559
// end ;
19572: LD_VAR 0 5
19576: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
19577: LD_INT 0
19579: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
19580: LD_STRING ASRT(
19582: PUSH
19583: LD_VAR 0 1
19587: STR
19588: PUSH
19589: LD_STRING ,
19591: STR
19592: PUSH
19593: LD_VAR 0 2
19597: STR
19598: PUSH
19599: LD_STRING ,
19601: STR
19602: PUSH
19603: LD_VAR 0 3
19607: STR
19608: PUSH
19609: LD_STRING ,
19611: STR
19612: PUSH
19613: LD_VAR 0 4
19617: STR
19618: PUSH
19619: LD_STRING ,
19621: STR
19622: PUSH
19623: LD_VAR 0 5
19627: STR
19628: PUSH
19629: LD_STRING );
19631: STR
19632: PPUSH
19633: CALL_OW 559
// end ;
19637: LD_VAR 0 6
19641: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
19642: LD_INT 0
19644: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
19645: LD_STRING UST(
19647: PUSH
19648: LD_VAR 0 1
19652: STR
19653: PUSH
19654: LD_STRING ,
19656: STR
19657: PUSH
19658: LD_VAR 0 2
19662: STR
19663: PUSH
19664: LD_STRING );
19666: STR
19667: PPUSH
19668: CALL_OW 559
// end ;
19672: LD_VAR 0 3
19676: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
19677: LD_INT 0
19679: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
19680: LD_STRING UST(
19682: PUSH
19683: LD_VAR 0 1
19687: STR
19688: PUSH
19689: LD_STRING ,
19691: STR
19692: PUSH
19693: LD_VAR 0 2
19697: STR
19698: PUSH
19699: LD_STRING ,
19701: STR
19702: PUSH
19703: LD_VAR 0 3
19707: STR
19708: PUSH
19709: LD_STRING );
19711: STR
19712: PPUSH
19713: CALL_OW 559
// end ;
19717: LD_VAR 0 4
19721: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
19722: LD_INT 0
19724: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
19725: LD_STRING CCST(
19727: PUSH
19728: LD_VAR 0 1
19732: STR
19733: PUSH
19734: LD_STRING ,{
19736: STR
19737: PUSH
19738: LD_VAR 0 2
19742: STR
19743: PUSH
19744: LD_STRING ,
19746: STR
19747: PUSH
19748: LD_VAR 0 3
19752: STR
19753: PUSH
19754: LD_STRING ,
19756: STR
19757: PUSH
19758: LD_VAR 0 4
19762: STR
19763: PUSH
19764: LD_STRING });
19766: STR
19767: PPUSH
19768: CALL_OW 559
// end ;
19772: LD_VAR 0 5
19776: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
19777: LD_INT 0
19779: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
19780: LD_STRING CCST(
19782: PUSH
19783: LD_VAR 0 1
19787: STR
19788: PUSH
19789: LD_STRING ,
19791: STR
19792: PUSH
19793: LD_VAR 0 2
19797: STR
19798: PUSH
19799: LD_STRING );
19801: STR
19802: PPUSH
19803: CALL_OW 559
// end ;
19807: LD_VAR 0 3
19811: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
19812: LD_INT 0
19814: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
19815: LD_STRING ASSP(
19817: PUSH
19818: LD_VAR 0 1
19822: STR
19823: PUSH
19824: LD_STRING ,
19826: STR
19827: PUSH
19828: LD_VAR 0 2
19832: STR
19833: PUSH
19834: LD_STRING ,
19836: STR
19837: PUSH
19838: LD_VAR 0 3
19842: STR
19843: PUSH
19844: LD_STRING ,);
19846: STR
19847: PPUSH
19848: CALL_OW 559
// end ;
19852: LD_VAR 0 4
19856: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
19857: LD_INT 0
19859: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
19860: LD_STRING ASSP(
19862: PUSH
19863: LD_VAR 0 1
19867: STR
19868: PUSH
19869: LD_STRING ,
19871: STR
19872: PUSH
19873: LD_VAR 0 2
19877: STR
19878: PUSH
19879: LD_STRING ,
19881: STR
19882: PUSH
19883: LD_VAR 0 3
19887: STR
19888: PUSH
19889: LD_STRING ,
19891: STR
19892: PUSH
19893: LD_VAR 0 4
19897: STR
19898: PUSH
19899: LD_STRING );
19901: STR
19902: PPUSH
19903: CALL_OW 559
// end ;
19907: LD_VAR 0 5
19911: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
19912: LD_INT 0
19914: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
19915: LD_STRING ASSP(
19917: PUSH
19918: LD_VAR 0 1
19922: STR
19923: PUSH
19924: LD_STRING ,
19926: STR
19927: PUSH
19928: LD_VAR 0 2
19932: STR
19933: PUSH
19934: LD_STRING ,
19936: STR
19937: PUSH
19938: LD_VAR 0 3
19942: STR
19943: PUSH
19944: LD_STRING ,
19946: STR
19947: PUSH
19948: LD_VAR 0 4
19952: STR
19953: PUSH
19954: LD_STRING ,
19956: STR
19957: PUSH
19958: LD_VAR 0 5
19962: STR
19963: PUSH
19964: LD_STRING );
19966: STR
19967: PPUSH
19968: CALL_OW 559
// end ;
19972: LD_VAR 0 6
19976: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
19977: LD_INT 0
19979: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
19980: LD_STRING ASRSP(
19982: PUSH
19983: LD_VAR 0 1
19987: STR
19988: PUSH
19989: LD_STRING ,
19991: STR
19992: PUSH
19993: LD_VAR 0 2
19997: STR
19998: PUSH
19999: LD_STRING ,
20001: STR
20002: PUSH
20003: LD_VAR 0 3
20007: STR
20008: PUSH
20009: LD_STRING ,);
20011: STR
20012: PPUSH
20013: CALL_OW 559
// end ;
20017: LD_VAR 0 4
20021: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
20022: LD_INT 0
20024: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
20025: LD_STRING ASRSP(
20027: PUSH
20028: LD_VAR 0 1
20032: STR
20033: PUSH
20034: LD_STRING ,
20036: STR
20037: PUSH
20038: LD_VAR 0 2
20042: STR
20043: PUSH
20044: LD_STRING ,
20046: STR
20047: PUSH
20048: LD_VAR 0 3
20052: STR
20053: PUSH
20054: LD_STRING ,
20056: STR
20057: PUSH
20058: LD_VAR 0 4
20062: STR
20063: PUSH
20064: LD_STRING );
20066: STR
20067: PPUSH
20068: CALL_OW 559
// end ;
20072: LD_VAR 0 5
20076: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
20077: LD_INT 0
20079: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
20080: LD_STRING ASRSP(
20082: PUSH
20083: LD_VAR 0 1
20087: STR
20088: PUSH
20089: LD_STRING ,
20091: STR
20092: PUSH
20093: LD_VAR 0 2
20097: STR
20098: PUSH
20099: LD_STRING ,
20101: STR
20102: PUSH
20103: LD_VAR 0 3
20107: STR
20108: PUSH
20109: LD_STRING ,
20111: STR
20112: PUSH
20113: LD_VAR 0 4
20117: STR
20118: PUSH
20119: LD_STRING ,
20121: STR
20122: PUSH
20123: LD_VAR 0 5
20127: STR
20128: PUSH
20129: LD_STRING );
20131: STR
20132: PPUSH
20133: CALL_OW 559
// end ;
20137: LD_VAR 0 6
20141: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
20142: LD_INT 0
20144: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
20145: LD_STRING USSP(
20147: PUSH
20148: LD_VAR 0 1
20152: STR
20153: PUSH
20154: LD_STRING ,
20156: STR
20157: PUSH
20158: LD_VAR 0 2
20162: STR
20163: PUSH
20164: LD_STRING );
20166: STR
20167: PPUSH
20168: CALL_OW 559
// end ;
20172: LD_VAR 0 3
20176: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
20177: LD_INT 0
20179: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
20180: LD_STRING USSP(
20182: PUSH
20183: LD_VAR 0 1
20187: STR
20188: PUSH
20189: LD_STRING ,
20191: STR
20192: PUSH
20193: LD_VAR 0 2
20197: STR
20198: PUSH
20199: LD_STRING ,
20201: STR
20202: PUSH
20203: LD_VAR 0 3
20207: STR
20208: PUSH
20209: LD_STRING );
20211: STR
20212: PPUSH
20213: CALL_OW 559
// end ;
20217: LD_VAR 0 4
20221: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
20222: LD_INT 0
20224: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
20225: LD_STRING CCSSP(
20227: PUSH
20228: LD_VAR 0 1
20232: STR
20233: PUSH
20234: LD_STRING ,{
20236: STR
20237: PUSH
20238: LD_VAR 0 2
20242: STR
20243: PUSH
20244: LD_STRING ,
20246: STR
20247: PUSH
20248: LD_VAR 0 3
20252: STR
20253: PUSH
20254: LD_STRING ,
20256: STR
20257: PUSH
20258: LD_VAR 0 4
20262: STR
20263: PUSH
20264: LD_STRING });
20266: STR
20267: PPUSH
20268: CALL_OW 559
// end ;
20272: LD_VAR 0 5
20276: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
20277: LD_INT 0
20279: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
20280: LD_STRING CCSSP(
20282: PUSH
20283: LD_VAR 0 1
20287: STR
20288: PUSH
20289: LD_STRING ,
20291: STR
20292: PUSH
20293: LD_VAR 0 2
20297: STR
20298: PUSH
20299: LD_STRING );
20301: STR
20302: PPUSH
20303: CALL_OW 559
// end ;
20307: LD_VAR 0 3
20311: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
20312: LD_INT 0
20314: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
20315: LD_STRING ASP(
20317: PUSH
20318: LD_VAR 0 1
20322: STR
20323: PUSH
20324: LD_STRING ,
20326: STR
20327: PUSH
20328: LD_VAR 0 2
20332: STR
20333: PUSH
20334: LD_STRING ,
20336: STR
20337: PUSH
20338: LD_VAR 0 3
20342: STR
20343: PUSH
20344: LD_STRING );
20346: STR
20347: PPUSH
20348: CALL_OW 559
// end ;
20352: LD_VAR 0 4
20356: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
20357: LD_INT 0
20359: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
20360: LD_STRING USP(
20362: PUSH
20363: LD_VAR 0 1
20367: STR
20368: PUSH
20369: LD_STRING ,
20371: STR
20372: PUSH
20373: LD_VAR 0 2
20377: STR
20378: PUSH
20379: LD_STRING ,
20381: STR
20382: PUSH
20383: LD_VAR 0 3
20387: STR
20388: PUSH
20389: LD_STRING );
20391: STR
20392: PPUSH
20393: CALL_OW 559
// end ;
20397: LD_VAR 0 4
20401: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
20402: LD_INT 0
20404: PPUSH
20405: PPUSH
// for i = 1 to 8 do
20406: LD_ADDR_VAR 0 4
20410: PUSH
20411: DOUBLE
20412: LD_INT 1
20414: DEC
20415: ST_TO_ADDR
20416: LD_INT 8
20418: PUSH
20419: FOR_TO
20420: IFFALSE 20467
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
20422: LD_STRING USP(
20424: PUSH
20425: LD_VAR 0 1
20429: STR
20430: PUSH
20431: LD_STRING ,
20433: STR
20434: PUSH
20435: LD_VAR 0 4
20439: STR
20440: PUSH
20441: LD_STRING ,
20443: STR
20444: PUSH
20445: LD_VAR 0 2
20449: PUSH
20450: LD_VAR 0 4
20454: ARRAY
20455: STR
20456: PUSH
20457: LD_STRING );
20459: STR
20460: PPUSH
20461: CALL_OW 559
20465: GO 20419
20467: POP
20468: POP
// end ;
20469: LD_VAR 0 3
20473: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
20474: LD_INT 0
20476: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
20477: LD_STRING ASC(
20479: PUSH
20480: LD_VAR 0 1
20484: STR
20485: PUSH
20486: LD_STRING ,
20488: STR
20489: PUSH
20490: LD_VAR 0 2
20494: STR
20495: PUSH
20496: LD_STRING ,
20498: STR
20499: PUSH
20500: LD_VAR 0 3
20504: STR
20505: PUSH
20506: LD_STRING ,
20508: STR
20509: PUSH
20510: LD_VAR 0 4
20514: STR
20515: PUSH
20516: LD_STRING );
20518: STR
20519: PPUSH
20520: CALL_OW 559
// end ;
20524: LD_VAR 0 5
20528: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
20529: LD_INT 0
20531: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
20532: LD_STRING USC(
20534: PUSH
20535: LD_VAR 0 1
20539: STR
20540: PUSH
20541: LD_STRING ,{
20543: STR
20544: PUSH
20545: LD_VAR 0 2
20549: PUSH
20550: LD_INT 1
20552: ARRAY
20553: STR
20554: PUSH
20555: LD_STRING ,
20557: STR
20558: PUSH
20559: LD_VAR 0 2
20563: PUSH
20564: LD_INT 2
20566: ARRAY
20567: STR
20568: PUSH
20569: LD_STRING ,
20571: STR
20572: PUSH
20573: LD_VAR 0 2
20577: PUSH
20578: LD_INT 3
20580: ARRAY
20581: STR
20582: PUSH
20583: LD_STRING ,
20585: STR
20586: PUSH
20587: LD_VAR 0 2
20591: PUSH
20592: LD_INT 4
20594: ARRAY
20595: STR
20596: PUSH
20597: LD_STRING ,
20599: STR
20600: PUSH
20601: LD_VAR 0 2
20605: PUSH
20606: LD_INT 5
20608: ARRAY
20609: STR
20610: PUSH
20611: LD_STRING ,
20613: STR
20614: PUSH
20615: LD_VAR 0 2
20619: PUSH
20620: LD_INT 6
20622: ARRAY
20623: STR
20624: PUSH
20625: LD_STRING ,
20627: STR
20628: PUSH
20629: LD_VAR 0 2
20633: PUSH
20634: LD_INT 7
20636: ARRAY
20637: STR
20638: PUSH
20639: LD_STRING ,
20641: STR
20642: PUSH
20643: LD_VAR 0 2
20647: PUSH
20648: LD_INT 8
20650: ARRAY
20651: STR
20652: PUSH
20653: LD_STRING });
20655: STR
20656: PPUSH
20657: CALL_OW 559
// end ; end_of_file
20661: LD_VAR 0 3
20665: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
20666: LD_INT 0
20668: PPUSH
20669: PPUSH
20670: PPUSH
20671: PPUSH
20672: PPUSH
20673: PPUSH
20674: PPUSH
20675: PPUSH
20676: PPUSH
// for i := 1 to 8 do
20677: LD_ADDR_VAR 0 2
20681: PUSH
20682: DOUBLE
20683: LD_INT 1
20685: DEC
20686: ST_TO_ADDR
20687: LD_INT 8
20689: PUSH
20690: FOR_TO
20691: IFFALSE 21075
// begin if Side_Positions [ i ] then
20693: LD_EXP 21
20697: PUSH
20698: LD_VAR 0 2
20702: ARRAY
20703: IFFALSE 21073
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
20705: LD_ADDR_VAR 0 7
20709: PUSH
20710: LD_INT 22
20712: PUSH
20713: LD_VAR 0 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 21
20724: PUSH
20725: LD_INT 1
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PPUSH
20736: CALL_OW 69
20740: PUSH
20741: LD_INT 0
20743: PLUS
20744: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20745: LD_ADDR_VAR 0 9
20749: PUSH
20750: LD_INT 22
20752: PUSH
20753: LD_VAR 0 2
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: LD_INT 30
20767: PUSH
20768: LD_INT 0
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 30
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: LIST
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PPUSH
20794: CALL_OW 69
20798: ST_TO_ADDR
// crates := 0 ;
20799: LD_ADDR_VAR 0 4
20803: PUSH
20804: LD_INT 0
20806: ST_TO_ADDR
// oil := 0 ;
20807: LD_ADDR_VAR 0 5
20811: PUSH
20812: LD_INT 0
20814: ST_TO_ADDR
// sib := 0 ;
20815: LD_ADDR_VAR 0 6
20819: PUSH
20820: LD_INT 0
20822: ST_TO_ADDR
// if bases then
20823: LD_VAR 0 9
20827: IFFALSE 20933
// begin for j in bases do
20829: LD_ADDR_VAR 0 3
20833: PUSH
20834: LD_VAR 0 9
20838: PUSH
20839: FOR_IN
20840: IFFALSE 20931
// begin base := GetBase ( j ) ;
20842: LD_ADDR_VAR 0 8
20846: PUSH
20847: LD_VAR 0 3
20851: PPUSH
20852: CALL_OW 274
20856: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
20857: LD_ADDR_VAR 0 4
20861: PUSH
20862: LD_VAR 0 4
20866: PUSH
20867: LD_VAR 0 8
20871: PPUSH
20872: LD_INT 1
20874: PPUSH
20875: CALL_OW 275
20879: PLUS
20880: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
20881: LD_ADDR_VAR 0 5
20885: PUSH
20886: LD_VAR 0 5
20890: PUSH
20891: LD_VAR 0 8
20895: PPUSH
20896: LD_INT 2
20898: PPUSH
20899: CALL_OW 275
20903: PLUS
20904: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
20905: LD_ADDR_VAR 0 6
20909: PUSH
20910: LD_VAR 0 6
20914: PUSH
20915: LD_VAR 0 8
20919: PPUSH
20920: LD_INT 3
20922: PPUSH
20923: CALL_OW 275
20927: PLUS
20928: ST_TO_ADDR
// end ;
20929: GO 20839
20931: POP
20932: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
20933: LD_STRING setSpecText(
20935: PUSH
20936: LD_VAR 0 2
20940: STR
20941: PUSH
20942: LD_STRING ,
20944: STR
20945: PUSH
20946: LD_INT 2
20948: STR
20949: PUSH
20950: LD_STRING ,
20952: STR
20953: PUSH
20954: LD_VAR 0 4
20958: STR
20959: PUSH
20960: LD_STRING )
20962: STR
20963: PPUSH
20964: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
20968: LD_STRING setSpecText(
20970: PUSH
20971: LD_VAR 0 2
20975: STR
20976: PUSH
20977: LD_STRING ,
20979: STR
20980: PUSH
20981: LD_INT 3
20983: STR
20984: PUSH
20985: LD_STRING ,
20987: STR
20988: PUSH
20989: LD_VAR 0 5
20993: STR
20994: PUSH
20995: LD_STRING )
20997: STR
20998: PPUSH
20999: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
21003: LD_STRING setSpecText(
21005: PUSH
21006: LD_VAR 0 2
21010: STR
21011: PUSH
21012: LD_STRING ,
21014: STR
21015: PUSH
21016: LD_INT 4
21018: STR
21019: PUSH
21020: LD_STRING ,
21022: STR
21023: PUSH
21024: LD_VAR 0 6
21028: STR
21029: PUSH
21030: LD_STRING )
21032: STR
21033: PPUSH
21034: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
21038: LD_STRING setSpecText(
21040: PUSH
21041: LD_VAR 0 2
21045: STR
21046: PUSH
21047: LD_STRING ,
21049: STR
21050: PUSH
21051: LD_INT 5
21053: STR
21054: PUSH
21055: LD_STRING ,
21057: STR
21058: PUSH
21059: LD_VAR 0 7
21063: STR
21064: PUSH
21065: LD_STRING )
21067: STR
21068: PPUSH
21069: CALL_OW 559
// end ; end ;
21073: GO 20690
21075: POP
21076: POP
// end ;
21077: LD_VAR 0 1
21081: RET
// every 0 0$1 do
21082: GO 21084
21084: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
21085: LD_STRING setSpecLogoNumber(
21087: PUSH
21088: LD_INT 2
21090: STR
21091: PUSH
21092: LD_STRING ,
21094: STR
21095: PUSH
21096: LD_INT 1
21098: STR
21099: PUSH
21100: LD_STRING )
21102: STR
21103: PPUSH
21104: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
21108: LD_STRING setSpecLogoNumber(
21110: PUSH
21111: LD_INT 3
21113: STR
21114: PUSH
21115: LD_STRING ,
21117: STR
21118: PUSH
21119: LD_INT 2
21121: STR
21122: PUSH
21123: LD_STRING )
21125: STR
21126: PPUSH
21127: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
21131: LD_STRING setSpecLogoNumber(
21133: PUSH
21134: LD_INT 4
21136: STR
21137: PUSH
21138: LD_STRING ,
21140: STR
21141: PUSH
21142: LD_INT 3
21144: STR
21145: PUSH
21146: LD_STRING )
21148: STR
21149: PPUSH
21150: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
21154: LD_STRING setSpecLogoNumber(
21156: PUSH
21157: LD_INT 5
21159: STR
21160: PUSH
21161: LD_STRING ,
21163: STR
21164: PUSH
21165: LD_INT 4
21167: STR
21168: PUSH
21169: LD_STRING )
21171: STR
21172: PPUSH
21173: CALL_OW 559
// end ;
21177: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
21178: LD_INT 2
21180: PUSH
21181: LD_INT 30
21183: PUSH
21184: LD_INT 0
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: LD_INT 30
21193: PUSH
21194: LD_INT 1
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: LIST
21205: PPUSH
21206: CALL_OW 69
21210: IFFALSE 21220
21212: GO 21214
21214: DISABLE
// begin enable ;
21215: ENABLE
// UpdateSpectatorBar ;
21216: CALL 20666 0 0
// end ; end_of_file
21220: END
// var respawn , inqueue ; export function init_respawning ; begin
21221: LD_INT 0
21223: PPUSH
// respawn := Rand ( 1 , 8 ) ;
21224: LD_ADDR_LOC 33
21228: PUSH
21229: LD_INT 1
21231: PPUSH
21232: LD_INT 8
21234: PPUSH
21235: CALL_OW 12
21239: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
21240: LD_ADDR_LOC 34
21244: PUSH
21245: LD_INT 0
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: LD_INT 0
21253: PUSH
21254: LD_INT 0
21256: PUSH
21257: LD_INT 0
21259: PUSH
21260: LD_INT 0
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: LD_INT 0
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: ST_TO_ADDR
// end ;
21279: LD_VAR 0 1
21283: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
21284: GO 21286
21286: DISABLE
21287: LD_INT 0
21289: PPUSH
21290: PPUSH
21291: PPUSH
// begin if respawning_time_max = 0 then
21292: LD_EXP 14
21296: PUSH
21297: LD_INT 0
21299: EQUAL
21300: IFFALSE 21304
// exit ;
21302: GO 21712
// if respawn = 8 then
21304: LD_LOC 33
21308: PUSH
21309: LD_INT 8
21311: EQUAL
21312: IFFALSE 21324
// respawn := 1 else
21314: LD_ADDR_LOC 33
21318: PUSH
21319: LD_INT 1
21321: ST_TO_ADDR
21322: GO 21338
// respawn := respawn + 1 ;
21324: LD_ADDR_LOC 33
21328: PUSH
21329: LD_LOC 33
21333: PUSH
21334: LD_INT 1
21336: PLUS
21337: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
21338: LD_EXP 21
21342: PUSH
21343: LD_LOC 33
21347: ARRAY
21348: PUSH
21349: LD_LOC 34
21353: PUSH
21354: LD_LOC 33
21358: ARRAY
21359: NOT
21360: AND
21361: IFFALSE 21711
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
21363: LD_ADDR_VAR 0 1
21367: PUSH
21368: LD_INT 21
21370: PUSH
21371: LD_INT 1
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 22
21380: PUSH
21381: LD_LOC 33
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 3
21392: PUSH
21393: LD_INT 23
21395: PUSH
21396: LD_INT 0
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: PPUSH
21409: CALL_OW 69
21413: ST_TO_ADDR
// if n < number_of_people then
21414: LD_VAR 0 1
21418: PUSH
21419: LD_EXP 5
21423: LESS
21424: IFFALSE 21708
// begin aktresp := respawn ;
21426: LD_ADDR_VAR 0 3
21430: PUSH
21431: LD_LOC 33
21435: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
21436: LD_ADDR_LOC 34
21440: PUSH
21441: LD_LOC 34
21445: PPUSH
21446: LD_VAR 0 3
21450: PPUSH
21451: LD_INT 1
21453: PPUSH
21454: CALL_OW 1
21458: ST_TO_ADDR
// enable ;
21459: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
21460: LD_EXP 13
21464: PPUSH
21465: LD_EXP 14
21469: PPUSH
21470: CALL_OW 12
21474: PPUSH
21475: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
21479: LD_ADDR_LOC 34
21483: PUSH
21484: LD_LOC 34
21488: PPUSH
21489: LD_VAR 0 3
21493: PPUSH
21494: LD_INT 0
21496: PPUSH
21497: CALL_OW 1
21501: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
21502: LD_ADDR_VAR 0 2
21506: PUSH
21507: LD_INT 21
21509: PUSH
21510: LD_INT 3
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 2
21519: PUSH
21520: LD_INT 30
21522: PUSH
21523: LD_INT 0
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 30
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 50
21547: PUSH
21548: EMPTY
21549: LIST
21550: PUSH
21551: LD_INT 22
21553: PUSH
21554: LD_VAR 0 3
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: PPUSH
21569: CALL_OW 69
21573: ST_TO_ADDR
// if dep = 0 then
21574: LD_VAR 0 2
21578: PUSH
21579: LD_INT 0
21581: EQUAL
21582: IFFALSE 21586
// exit ;
21584: GO 21712
// hc_name :=  ;
21586: LD_ADDR_OWVAR 26
21590: PUSH
21591: LD_STRING 
21593: ST_TO_ADDR
// hc_importance := 0 ;
21594: LD_ADDR_OWVAR 32
21598: PUSH
21599: LD_INT 0
21601: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
21602: LD_INT 0
21604: PPUSH
21605: LD_INT 0
21607: PPUSH
21608: LD_EXP 7
21612: PUSH
21613: LD_INT 2
21615: DIV
21616: PPUSH
21617: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
21621: LD_ADDR_OWVAR 21
21625: PUSH
21626: LD_EXP 22
21630: PUSH
21631: LD_VAR 0 3
21635: ARRAY
21636: ST_TO_ADDR
// uc_side := aktresp ;
21637: LD_ADDR_OWVAR 20
21641: PUSH
21642: LD_VAR 0 3
21646: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
21647: LD_ADDR_VAR 0 2
21651: PUSH
21652: LD_VAR 0 2
21656: PUSH
21657: LD_INT 1
21659: PPUSH
21660: LD_VAR 0 2
21664: PPUSH
21665: CALL_OW 12
21669: ARRAY
21670: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
21671: CALL_OW 44
21675: PPUSH
21676: LD_VAR 0 2
21680: PPUSH
21681: CALL_OW 250
21685: PPUSH
21686: LD_VAR 0 2
21690: PPUSH
21691: CALL_OW 251
21695: PPUSH
21696: LD_INT 7
21698: PPUSH
21699: LD_INT 1
21701: PPUSH
21702: CALL_OW 50
// end else
21706: GO 21709
// enable ;
21708: ENABLE
// end else
21709: GO 21712
// enable ;
21711: ENABLE
// end ;
21712: PPOPN 3
21714: END
