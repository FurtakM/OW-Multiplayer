// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_public_score , def_amount_score , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , amount_of_apemen , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , amount_score , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , king_territory , final_count , Player_Side , player_team ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if MultiPlayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type = mp_game_type ;
  79: LD_ADDR_EXP 18
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side = mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  99: LD_ADDR_EXP 37
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 109: LD_ADDR_EXP 34
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 119: LD_ADDR_EXP 38
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 36
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams = mp_teams ;
 139: LD_ADDR_EXP 35
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 352
// begin Game_Type = 3 ;
 151: LD_ADDR_EXP 18
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side = 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 37
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 34
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 38
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 36
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 323: LD_ADDR_EXP 35
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: ST_TO_ADDR
// end ; for i := 1 to 8 do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_INT 8
 364: PUSH
 365: FOR_TO
 366: IFFALSE 453
// if Multiplayer_GetPlayerIsSpec ( i ) then
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 530
 377: IFFALSE 451
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 379: LD_ADDR_EXP 37
 383: PUSH
 384: LD_EXP 37
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_INT 0
 396: PPUSH
 397: CALL_OW 1
 401: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 402: LD_ADDR_EXP 35
 406: PUSH
 407: LD_EXP 35
 411: PPUSH
 412: LD_EXP 34
 416: PUSH
 417: LD_VAR 0 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 35
 427: PUSH
 428: LD_EXP 34
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: ARRAY
 439: PUSH
 440: LD_VAR 0 2
 444: DIFF
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// end ;
 451: GO 365
 453: POP
 454: POP
// if MultiPlayer then
 455: LD_OWVAR 4
 459: IFFALSE 671
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 461: LD_ADDR_EXP 1
 465: PUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_INT 1
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 487: LD_ADDR_EXP 3
 491: PUSH
 492: LD_INT 2
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 500: LD_ADDR_EXP 4
 504: PUSH
 505: LD_INT 3
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 513: LD_ADDR_EXP 5
 517: PUSH
 518: LD_INT 4
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 526: LD_ADDR_EXP 6
 530: PUSH
 531: LD_INT 5
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 539: LD_ADDR_EXP 8
 543: PUSH
 544: LD_INT 10
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 552: LD_ADDR_EXP 9
 556: PUSH
 557: LD_INT 11
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 13 ) ;
 578: LD_ADDR_EXP 11
 582: PUSH
 583: LD_INT 13
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 14 ) ;
 591: LD_ADDR_EXP 12
 595: PUSH
 596: LD_INT 14
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 604: LD_ADDR_EXP 13
 608: PUSH
 609: LD_INT 15
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_public_score = GetMultiplayerSetting ( 16 ) ;
 617: LD_ADDR_EXP 14
 621: PUSH
 622: LD_INT 16
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_amount_score = GetMultiplayerSetting ( 17 ) ;
 630: LD_ADDR_EXP 15
 634: PUSH
 635: LD_INT 17
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 643: LD_ADDR_EXP 16
 647: PUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 656: LD_ADDR_VAR 0 3
 660: PUSH
 661: LD_INT 22
 663: PPUSH
 664: CALL_OW 426
 668: ST_TO_ADDR
// end else
 669: GO 803
// begin randomize ;
 671: CALL_OW 10
// def_base_level = 3 ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_INT 3
 682: ST_TO_ADDR
// def_amount_of_people = 3 ;
 683: LD_ADDR_EXP 2
 687: PUSH
 688: LD_INT 3
 690: ST_TO_ADDR
// def_skill_level = 1 ;
 691: LD_ADDR_EXP 3
 695: PUSH
 696: LD_INT 1
 698: ST_TO_ADDR
// def_starting_resources = 2 ;
 699: LD_ADDR_EXP 4
 703: PUSH
 704: LD_INT 2
 706: ST_TO_ADDR
// def_shipments_density = 50 ;
 707: LD_ADDR_EXP 5
 711: PUSH
 712: LD_INT 50
 714: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
 715: LD_ADDR_EXP 6
 719: PUSH
 720: LD_INT 0
 722: ST_TO_ADDR
// def_shared_vision = 1 ;
 723: LD_ADDR_EXP 8
 727: PUSH
 728: LD_INT 1
 730: ST_TO_ADDR
// def_morale_flags = 1 ;
 731: LD_ADDR_EXP 9
 735: PUSH
 736: LD_INT 1
 738: ST_TO_ADDR
// def_siberite_detection = 1 ;
 739: LD_ADDR_EXP 10
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 747: LD_ADDR_EXP 12
 751: PUSH
 752: LD_INT 3
 754: ST_TO_ADDR
// def_people_respawning = 2 ;
 755: LD_ADDR_EXP 11
 759: PUSH
 760: LD_INT 2
 762: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 763: LD_ADDR_EXP 13
 767: PUSH
 768: LD_INT 0
 770: ST_TO_ADDR
// def_public_score = 1 ;
 771: LD_ADDR_EXP 14
 775: PUSH
 776: LD_INT 1
 778: ST_TO_ADDR
// def_amount_score = 0 ;
 779: LD_ADDR_EXP 15
 783: PUSH
 784: LD_INT 0
 786: ST_TO_ADDR
// def_builduptime = 0 ;
 787: LD_ADDR_EXP 16
 791: PUSH
 792: LD_INT 0
 794: ST_TO_ADDR
// tech_level = 4 ;
 795: LD_ADDR_VAR 0 3
 799: PUSH
 800: LD_INT 4
 802: ST_TO_ADDR
// end ; Player_Side = Your_Side ;
 803: LD_ADDR_EXP 47
 807: PUSH
 808: LD_OWVAR 2
 812: ST_TO_ADDR
// player_team = Side_Teams [ Player_Side ] ;
 813: LD_ADDR_EXP 48
 817: PUSH
 818: LD_EXP 34
 822: PUSH
 823: LD_EXP 47
 827: ARRAY
 828: ST_TO_ADDR
// if isSGUI then
 829: LD_OWVAR 83
 833: IFFALSE 841
// setMpTechs ( ) else
 835: CALL 11978 0 0
 839: GO 854
// SetMpTechLevel ( tech_level + 1 ) ;
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: PLUS
 849: PPUSH
 850: CALL 12125 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 854: LD_ADDR_EXP 19
 858: PUSH
 859: LD_INT 0
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 1
 867: PUSH
 868: LD_INT 1
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 1
 881: PUSH
 882: LD_INT 1
 884: PLUS
 885: ARRAY
 886: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 887: LD_ADDR_EXP 20
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: LD_INT 0
 897: PUSH
 898: LD_INT 2
 900: PUSH
 901: LD_INT 4
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: PUSH
 910: LD_EXP 1
 914: PUSH
 915: LD_INT 1
 917: PLUS
 918: ARRAY
 919: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 920: LD_ADDR_EXP 21
 924: PUSH
 925: LD_INT 9
 927: PUSH
 928: LD_INT 12
 930: PUSH
 931: LD_INT 15
 933: PUSH
 934: LD_INT 24
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_EXP 2
 947: PUSH
 948: LD_INT 1
 950: PLUS
 951: ARRAY
 952: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 953: LD_ADDR_EXP 23
 957: PUSH
 958: LD_INT 2
 960: PUSH
 961: LD_INT 3
 963: PUSH
 964: LD_INT 4
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: PUSH
 976: LD_EXP 3
 980: PUSH
 981: LD_INT 1
 983: PLUS
 984: ARRAY
 985: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 986: LD_ADDR_EXP 25
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: LD_INT 0
 996: PUSH
 997: LD_INT 0
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 30
1007: PUSH
1008: LD_INT 0
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: PUSH
1019: LD_INT 50
1021: PUSH
1022: LD_INT 20
1024: PUSH
1025: LD_INT 0
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_INT 80
1035: PUSH
1036: LD_INT 40
1038: PUSH
1039: LD_INT 20
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 4
1057: PUSH
1058: LD_INT 1
1060: PLUS
1061: ARRAY
1062: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1063: LD_ADDR_EXP 24
1067: PUSH
1068: LD_INT 10
1070: PUSH
1071: EMPTY
1072: LIST
1073: PUSH
1074: LD_INT 7
1076: PUSH
1077: LD_INT 14
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 6
1086: PUSH
1087: LD_INT 12
1089: PUSH
1090: LD_INT 18
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 5
1100: PUSH
1101: LD_INT 10
1103: PUSH
1104: LD_INT 15
1106: PUSH
1107: LD_INT 20
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 4
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// shipments_density = 150 - def_shipments_density ;
1132: LD_ADDR_EXP 26
1136: PUSH
1137: LD_INT 150
1139: PUSH
1140: LD_EXP 5
1144: MINUS
1145: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1146: LD_ADDR_EXP 22
1150: PUSH
1151: LD_INT 0
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 2
1159: PUSH
1160: LD_INT 3
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: LD_EXP 12
1173: PUSH
1174: LD_INT 1
1176: PLUS
1177: ARRAY
1178: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1179: LD_ADDR_EXP 28
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: LD_INT 165
1189: PUSH
1190: LD_INT 140
1192: PUSH
1193: LD_INT 115
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: PUSH
1202: LD_EXP 12
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: ARRAY
1211: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1212: LD_ADDR_EXP 29
1216: PUSH
1217: LD_INT 0
1219: PUSH
1220: LD_INT 8400
1222: PUSH
1223: LD_INT 1750
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: PUSH
1231: LD_EXP 11
1235: PUSH
1236: LD_INT 1
1238: PLUS
1239: ARRAY
1240: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_INT 0
1248: PUSH
1249: LD_INT 21000
1251: PUSH
1252: LD_INT 4200
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 11
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1270: LD_ADDR_EXP 27
1274: PUSH
1275: LD_INT 1
1277: NEG
1278: PUSH
1279: LD_INT 350
1281: PUSH
1282: LD_INT 700
1284: PUSH
1285: LD_INT 1400
1287: PUSH
1288: LD_INT 0
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: PUSH
1298: LD_EXP 9
1302: PUSH
1303: LD_INT 1
1305: PLUS
1306: ARRAY
1307: ST_TO_ADDR
// battle_flags_id = [ ] ;
1308: LD_ADDR_EXP 44
1312: PUSH
1313: EMPTY
1314: ST_TO_ADDR
// amount_score = [ 200 , 300 , 500 , 700 , 1000 , 1500 ] [ def_amount_score + 1 ] ;
1315: LD_ADDR_EXP 31
1319: PUSH
1320: LD_INT 200
1322: PUSH
1323: LD_INT 300
1325: PUSH
1326: LD_INT 500
1328: PUSH
1329: LD_INT 700
1331: PUSH
1332: LD_INT 1000
1334: PUSH
1335: LD_INT 1500
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: PUSH
1346: LD_EXP 15
1350: PUSH
1351: LD_INT 1
1353: PLUS
1354: ARRAY
1355: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1356: LD_EXP 13
1360: PUSH
1361: LD_INT 0
1363: EQUAL
1364: IFFALSE 1376
// siberite_bomb_Delay = 0 else
1366: LD_ADDR_EXP 32
1370: PUSH
1371: LD_INT 0
1373: ST_TO_ADDR
1374: GO 1398
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1376: LD_ADDR_EXP 32
1380: PUSH
1381: LD_EXP 13
1385: PUSH
1386: LD_INT 1
1388: MINUS
1389: PUSH
1390: LD_INT 21000
1392: MUL
1393: PUSH
1394: LD_INT 1
1396: PLUS
1397: ST_TO_ADDR
// king_territory = KopecStred ;
1398: LD_ADDR_EXP 45
1402: PUSH
1403: LD_INT 2
1405: ST_TO_ADDR
// final_count = amount_score ;
1406: LD_ADDR_EXP 46
1410: PUSH
1411: LD_EXP 31
1415: ST_TO_ADDR
// end ;
1416: LD_VAR 0 1
1420: RET
// function init_map ; var i ; begin
1421: LD_INT 0
1423: PPUSH
1424: PPUSH
// extra_oil_deposits_locations := [ [ 53 , 26 ] , [ 51 , 53 ] , [ 129 , 20 ] , [ 155 , 53 ] , [ 187 , 139 ] , [ 183 , 107 ] , [ 106 , 135 ] , [ 80 , 106 ] ] ;
1425: LD_ADDR_EXP 43
1429: PUSH
1430: LD_INT 53
1432: PUSH
1433: LD_INT 26
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: LD_INT 51
1442: PUSH
1443: LD_INT 53
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 129
1452: PUSH
1453: LD_INT 20
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 155
1462: PUSH
1463: LD_INT 53
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 187
1472: PUSH
1473: LD_INT 139
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 183
1482: PUSH
1483: LD_INT 107
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 106
1492: PUSH
1493: LD_INT 135
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 80
1502: PUSH
1503: LD_INT 106
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// depot_def := [ [ 29 , 22 , 3 ] , [ 154 , 21 , 3 ] , [ 85 , 138 , 0 ] , [ 212 , 141 , 5 ] ] ;
1520: LD_ADDR_EXP 40
1524: PUSH
1525: LD_INT 29
1527: PUSH
1528: LD_INT 22
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 154
1541: PUSH
1542: LD_INT 21
1544: PUSH
1545: LD_INT 3
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 85
1555: PUSH
1556: LD_INT 138
1558: PUSH
1559: LD_INT 0
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 212
1569: PUSH
1570: LD_INT 141
1572: PUSH
1573: LD_INT 5
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// start_def := [ [ 33 , 25 ] , [ 151 , 24 ] , [ 89 , 135 ] , [ 205 , 137 ] ] ;
1587: LD_ADDR_EXP 42
1591: PUSH
1592: LD_INT 33
1594: PUSH
1595: LD_INT 25
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 151
1604: PUSH
1605: LD_INT 24
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 89
1614: PUSH
1615: LD_INT 135
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: LD_INT 205
1624: PUSH
1625: LD_INT 137
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: ST_TO_ADDR
// breastworks_def := [ [ [ 46 , 13 , 4 ] , [ 43 , 39 , 4 ] , [ 47 , 25 , 5 ] , [ 45 , 44 , 5 ] ] , [ [ 129 , 12 , 0 ] , [ 153 , 34 , 1 ] , [ 139 , 24 , 0 ] , [ 158 , 41 , 0 ] ] , [ [ 84 , 121 , 4 ] , [ 109 , 143 , 4 ] , [ 87 , 126 , 4 ] , [ 111 , 148 , 4 ] ] , [ [ 194 , 146 , 2 ] , [ 195 , 121 , 1 ] , [ 193 , 135 , 2 ] , [ 192 , 116 , 2 ] ] , ] ;
1638: LD_ADDR_EXP 41
1642: PUSH
1643: LD_INT 46
1645: PUSH
1646: LD_INT 13
1648: PUSH
1649: LD_INT 4
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 43
1659: PUSH
1660: LD_INT 39
1662: PUSH
1663: LD_INT 4
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 47
1673: PUSH
1674: LD_INT 25
1676: PUSH
1677: LD_INT 5
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 45
1687: PUSH
1688: LD_INT 44
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 129
1707: PUSH
1708: LD_INT 12
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 153
1721: PUSH
1722: LD_INT 34
1724: PUSH
1725: LD_INT 1
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 139
1735: PUSH
1736: LD_INT 24
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 158
1749: PUSH
1750: LD_INT 41
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 84
1769: PUSH
1770: LD_INT 121
1772: PUSH
1773: LD_INT 4
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 109
1783: PUSH
1784: LD_INT 143
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: LD_INT 87
1797: PUSH
1798: LD_INT 126
1800: PUSH
1801: LD_INT 4
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: LD_INT 111
1811: PUSH
1812: LD_INT 148
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 194
1831: PUSH
1832: LD_INT 146
1834: PUSH
1835: LD_INT 2
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 195
1845: PUSH
1846: LD_INT 121
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 193
1859: PUSH
1860: LD_INT 135
1862: PUSH
1863: LD_INT 2
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 192
1873: PUSH
1874: LD_INT 116
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: ST_TO_ADDR
// if def_extra_oil_deposits then
1897: LD_EXP 6
1901: IFFALSE 1945
// for i in extra_oil_deposits_locations do
1903: LD_ADDR_VAR 0 2
1907: PUSH
1908: LD_EXP 43
1912: PUSH
1913: FOR_IN
1914: IFFALSE 1943
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1916: LD_VAR 0 2
1920: PUSH
1921: LD_INT 1
1923: ARRAY
1924: PPUSH
1925: LD_VAR 0 2
1929: PUSH
1930: LD_INT 2
1932: ARRAY
1933: PPUSH
1934: LD_INT 2
1936: PPUSH
1937: CALL_OW 62
1941: GO 1913
1943: POP
1944: POP
// end ;
1945: LD_VAR 0 1
1949: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1950: LD_INT 0
1952: PPUSH
1953: PPUSH
1954: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1955: LD_ADDR_EXP 39
1959: PUSH
1960: LD_EXP 34
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: EMPTY
1969: LIST
1970: DIFF
1971: PUSH
1972: LD_INT 1
1974: GREATER
1975: ST_TO_ADDR
// if not Team_Game then
1976: LD_EXP 39
1980: NOT
1981: IFFALSE 2079
// begin for i = 1 to 8 do
1983: LD_ADDR_VAR 0 2
1987: PUSH
1988: DOUBLE
1989: LD_INT 1
1991: DEC
1992: ST_TO_ADDR
1993: LD_INT 8
1995: PUSH
1996: FOR_TO
1997: IFFALSE 2075
// for j = 1 to 8 do
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: DOUBLE
2005: LD_INT 1
2007: DEC
2008: ST_TO_ADDR
2009: LD_INT 8
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2071
// if i <> j then
2015: LD_VAR 0 2
2019: PUSH
2020: LD_VAR 0 3
2024: NONEQUAL
2025: IFFALSE 2049
// SetAttitude ( i , j , att_neutral , true ) else
2027: LD_VAR 0 2
2031: PPUSH
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: LD_INT 1
2042: PPUSH
2043: CALL_OW 80
2047: GO 2069
// SetAttitude ( i , j , att_friend , true ) ;
2049: LD_VAR 0 2
2053: PPUSH
2054: LD_VAR 0 3
2058: PPUSH
2059: LD_INT 1
2061: PPUSH
2062: LD_INT 1
2064: PPUSH
2065: CALL_OW 80
2069: GO 2012
2071: POP
2072: POP
2073: GO 1996
2075: POP
2076: POP
// end else
2077: GO 2254
// begin if def_shared_vision then
2079: LD_EXP 8
2083: IFFALSE 2148
// begin for i in Teams do
2085: LD_ADDR_VAR 0 2
2089: PUSH
2090: LD_EXP 35
2094: PUSH
2095: FOR_IN
2096: IFFALSE 2146
// for j = 2 to i do
2098: LD_ADDR_VAR 0 3
2102: PUSH
2103: DOUBLE
2104: LD_INT 2
2106: DEC
2107: ST_TO_ADDR
2108: LD_VAR 0 2
2112: PUSH
2113: FOR_TO
2114: IFFALSE 2142
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2116: LD_VAR 0 2
2120: PUSH
2121: LD_VAR 0 3
2125: ARRAY
2126: PPUSH
2127: LD_VAR 0 2
2131: PUSH
2132: LD_INT 1
2134: ARRAY
2135: PPUSH
2136: CALL_OW 343
2140: GO 2113
2142: POP
2143: POP
2144: GO 2095
2146: POP
2147: POP
// end ; for i = 1 to 8 do
2148: LD_ADDR_VAR 0 2
2152: PUSH
2153: DOUBLE
2154: LD_INT 1
2156: DEC
2157: ST_TO_ADDR
2158: LD_INT 8
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2252
// for j = 1 to 8 do
2164: LD_ADDR_VAR 0 3
2168: PUSH
2169: DOUBLE
2170: LD_INT 1
2172: DEC
2173: ST_TO_ADDR
2174: LD_INT 8
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2248
// if Side_Teams [ i ] = Side_Teams [ j ] then
2180: LD_EXP 34
2184: PUSH
2185: LD_VAR 0 2
2189: ARRAY
2190: PUSH
2191: LD_EXP 34
2195: PUSH
2196: LD_VAR 0 3
2200: ARRAY
2201: EQUAL
2202: IFFALSE 2226
// SetAttitude ( i , j , att_friend , true ) else
2204: LD_VAR 0 2
2208: PPUSH
2209: LD_VAR 0 3
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: CALL_OW 80
2224: GO 2246
// SetAttitude ( i , j , att_enemy , true ) ;
2226: LD_VAR 0 2
2230: PPUSH
2231: LD_VAR 0 3
2235: PPUSH
2236: LD_INT 2
2238: PPUSH
2239: LD_INT 1
2241: PPUSH
2242: CALL_OW 80
2246: GO 2177
2248: POP
2249: POP
2250: GO 2161
2252: POP
2253: POP
// end ; end ;
2254: LD_VAR 0 1
2258: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2259: LD_INT 0
2261: PPUSH
2262: PPUSH
2263: PPUSH
2264: PPUSH
// result := [ ] ;
2265: LD_ADDR_VAR 0 6
2269: PUSH
2270: EMPTY
2271: ST_TO_ADDR
// for i := 1 to count do
2272: LD_ADDR_VAR 0 7
2276: PUSH
2277: DOUBLE
2278: LD_INT 1
2280: DEC
2281: ST_TO_ADDR
2282: LD_VAR 0 1
2286: PUSH
2287: FOR_TO
2288: IFFALSE 2684
// begin uc_direction := Rand ( 0 , 5 ) ;
2290: LD_ADDR_OWVAR 24
2294: PUSH
2295: LD_INT 0
2297: PPUSH
2298: LD_INT 5
2300: PPUSH
2301: CALL_OW 12
2305: ST_TO_ADDR
// if commander then
2306: LD_LOC 1
2310: IFFALSE 2419
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2312: LD_ADDR_OWVAR 26
2316: PUSH
2317: LD_OWVAR 19
2321: PUSH
2322: LD_OWVAR 20
2326: ARRAY
2327: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2328: LD_INT 1
2330: PPUSH
2331: LD_INT 2
2333: PPUSH
2334: CALL_OW 12
2338: PPUSH
2339: LD_VAR 0 2
2343: PPUSH
2344: LD_EXP 23
2348: PUSH
2349: LD_INT 2
2351: PLUS
2352: PPUSH
2353: CALL_OW 380
// hc_importance := 105 ;
2357: LD_ADDR_OWVAR 32
2361: PUSH
2362: LD_INT 105
2364: ST_TO_ADDR
// commander := false ;
2365: LD_ADDR_LOC 1
2369: PUSH
2370: LD_INT 0
2372: ST_TO_ADDR
// if Multiplayer then
2373: LD_OWVAR 4
2377: IFFALSE 2417
// begin hc_gallery := MULTIAVATARS ;
2379: LD_ADDR_OWVAR 33
2383: PUSH
2384: LD_STRING MULTIAVATARS
2386: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2387: LD_ADDR_OWVAR 34
2391: PUSH
2392: LD_OWVAR 20
2396: PPUSH
2397: CALL_OW 525
2401: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2402: LD_ADDR_OWVAR 27
2406: PUSH
2407: LD_OWVAR 20
2411: PPUSH
2412: CALL_OW 526
2416: ST_TO_ADDR
// end ; end else
2417: GO 2482
// begin hc_name :=  ;
2419: LD_ADDR_OWVAR 26
2423: PUSH
2424: LD_STRING 
2426: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2427: LD_INT 1
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: CALL_OW 12
2437: PPUSH
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_EXP 23
2447: PPUSH
2448: CALL_OW 380
// hc_importance := 0 ;
2452: LD_ADDR_OWVAR 32
2456: PUSH
2457: LD_INT 0
2459: ST_TO_ADDR
// if Multiplayer then
2460: LD_OWVAR 4
2464: IFFALSE 2482
// begin hc_gallery :=  ;
2466: LD_ADDR_OWVAR 33
2470: PUSH
2471: LD_STRING 
2473: ST_TO_ADDR
// hc_face_number := 0 ;
2474: LD_ADDR_OWVAR 34
2478: PUSH
2479: LD_INT 0
2481: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2482: LD_ADDR_VAR 0 9
2486: PUSH
2487: CALL_OW 44
2491: ST_TO_ADDR
// if global_defined then
2492: LD_LOC 3
2496: IFFALSE 2636
// begin if ( cl = class_soldier ) then
2498: LD_VAR 0 2
2502: PUSH
2503: LD_INT 1
2505: EQUAL
2506: IFFALSE 2526
// j := i + soldiers_created else
2508: LD_ADDR_VAR 0 8
2512: PUSH
2513: LD_VAR 0 7
2517: PUSH
2518: LD_LOC 4
2522: PLUS
2523: ST_TO_ADDR
2524: GO 2536
// j := i ;
2526: LD_ADDR_VAR 0 8
2530: PUSH
2531: LD_VAR 0 7
2535: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2536: LD_LOC 2
2540: PUSH
2541: LD_VAR 0 2
2545: ARRAY
2546: PUSH
2547: LD_VAR 0 8
2551: ARRAY
2552: PPUSH
2553: LD_VAR 0 9
2557: PPUSH
2558: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2562: LD_VAR 0 9
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: LD_LOC 2
2574: PUSH
2575: LD_VAR 0 2
2579: ARRAY
2580: PUSH
2581: LD_VAR 0 8
2585: ARRAY
2586: PPUSH
2587: LD_INT 2
2589: PPUSH
2590: CALL_OW 260
2594: PPUSH
2595: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2599: LD_VAR 0 9
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: LD_LOC 2
2611: PUSH
2612: LD_VAR 0 2
2616: ARRAY
2617: PUSH
2618: LD_VAR 0 8
2622: ARRAY
2623: PPUSH
2624: LD_INT 1
2626: PPUSH
2627: CALL_OW 260
2631: PPUSH
2632: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2636: LD_VAR 0 9
2640: PPUSH
2641: LD_VAR 0 3
2645: PPUSH
2646: LD_VAR 0 4
2650: PPUSH
2651: LD_VAR 0 5
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 50
// result := result ^ [ un ] ;
2663: LD_ADDR_VAR 0 6
2667: PUSH
2668: LD_VAR 0 6
2672: PUSH
2673: LD_VAR 0 9
2677: PUSH
2678: EMPTY
2679: LIST
2680: ADD
2681: ST_TO_ADDR
// end ;
2682: GO 2287
2684: POP
2685: POP
// if not global_defined then
2686: LD_LOC 3
2690: NOT
2691: IFFALSE 2769
// if ( global_units >= cl ) then
2693: LD_LOC 2
2697: PUSH
2698: LD_VAR 0 2
2702: GREATEREQUAL
2703: IFFALSE 2744
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2705: LD_ADDR_LOC 2
2709: PUSH
2710: LD_LOC 2
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: LD_LOC 2
2724: PUSH
2725: LD_VAR 0 2
2729: ARRAY
2730: PUSH
2731: LD_VAR 0 6
2735: ADD
2736: PPUSH
2737: CALL_OW 1
2741: ST_TO_ADDR
2742: GO 2769
// global_units := Replace ( global_units , cl , result ) ;
2744: LD_ADDR_LOC 2
2748: PUSH
2749: LD_LOC 2
2753: PPUSH
2754: LD_VAR 0 2
2758: PPUSH
2759: LD_VAR 0 6
2763: PPUSH
2764: CALL_OW 1
2768: ST_TO_ADDR
// end ;
2769: LD_VAR 0 6
2773: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , sol , br , dep ; begin
2774: LD_INT 0
2776: PPUSH
2777: PPUSH
2778: PPUSH
2779: PPUSH
2780: PPUSH
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
// if side in [ 0 , 9 ] then
2786: LD_VAR 0 1
2790: PUSH
2791: LD_INT 0
2793: PUSH
2794: LD_INT 9
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: IN
2801: IFFALSE 2805
// exit ;
2803: GO 3912
// pos := Side_Positions [ side ] ;
2805: LD_ADDR_VAR 0 3
2809: PUSH
2810: LD_EXP 37
2814: PUSH
2815: LD_VAR 0 1
2819: ARRAY
2820: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2821: LD_ADDR_OWVAR 21
2825: PUSH
2826: LD_EXP 38
2830: PUSH
2831: LD_VAR 0 1
2835: ARRAY
2836: ST_TO_ADDR
// uc_side := side ;
2837: LD_ADDR_OWVAR 20
2841: PUSH
2842: LD_VAR 0 1
2846: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2847: LD_ADDR_VAR 0 4
2851: PUSH
2852: LD_EXP 40
2856: PUSH
2857: LD_VAR 0 3
2861: ARRAY
2862: PUSH
2863: LD_INT 1
2865: ARRAY
2866: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2867: LD_ADDR_VAR 0 5
2871: PUSH
2872: LD_EXP 40
2876: PUSH
2877: LD_VAR 0 3
2881: ARRAY
2882: PUSH
2883: LD_INT 2
2885: ARRAY
2886: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2887: LD_ADDR_VAR 0 6
2891: PUSH
2892: LD_EXP 40
2896: PUSH
2897: LD_VAR 0 3
2901: ARRAY
2902: PUSH
2903: LD_INT 3
2905: ARRAY
2906: ST_TO_ADDR
// if is_depot then
2907: LD_EXP 19
2911: IFFALSE 3044
// begin bc_type = b_depot ;
2913: LD_ADDR_OWVAR 42
2917: PUSH
2918: LD_INT 0
2920: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2921: LD_ADDR_VAR 0 11
2925: PUSH
2926: LD_VAR 0 4
2930: PPUSH
2931: LD_VAR 0 5
2935: PPUSH
2936: LD_VAR 0 6
2940: PPUSH
2941: CALL_OW 47
2945: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2946: LD_VAR 0 11
2950: PPUSH
2951: LD_STRING @
2953: PUSH
2954: LD_VAR 0 1
2958: STR
2959: PPUSH
2960: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2964: LD_VAR 0 11
2968: PPUSH
2969: CALL_OW 274
2973: PPUSH
2974: LD_INT 1
2976: PPUSH
2977: LD_EXP 25
2981: PUSH
2982: LD_INT 1
2984: ARRAY
2985: PPUSH
2986: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2990: LD_VAR 0 11
2994: PPUSH
2995: CALL_OW 274
2999: PPUSH
3000: LD_INT 2
3002: PPUSH
3003: LD_EXP 25
3007: PUSH
3008: LD_INT 2
3010: ARRAY
3011: PPUSH
3012: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3016: LD_VAR 0 11
3020: PPUSH
3021: CALL_OW 274
3025: PPUSH
3026: LD_INT 3
3028: PPUSH
3029: LD_EXP 25
3033: PUSH
3034: LD_INT 3
3036: ARRAY
3037: PPUSH
3038: CALL_OW 277
// end else
3042: GO 3188
// begin for i := 1 to 3 do
3044: LD_ADDR_VAR 0 7
3048: PUSH
3049: DOUBLE
3050: LD_INT 1
3052: DEC
3053: ST_TO_ADDR
3054: LD_INT 3
3056: PUSH
3057: FOR_TO
3058: IFFALSE 3186
// begin r := starting_resources [ i ] ;
3060: LD_ADDR_VAR 0 8
3064: PUSH
3065: LD_EXP 25
3069: PUSH
3070: LD_VAR 0 7
3074: ARRAY
3075: ST_TO_ADDR
// while r >= 10 do
3076: LD_VAR 0 8
3080: PUSH
3081: LD_INT 10
3083: GREATEREQUAL
3084: IFFALSE 3184
// if r > 50 then
3086: LD_VAR 0 8
3090: PUSH
3091: LD_INT 50
3093: GREATER
3094: IFFALSE 3140
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3096: LD_VAR 0 7
3100: PPUSH
3101: LD_INT 5
3103: PPUSH
3104: LD_VAR 0 4
3108: PPUSH
3109: LD_VAR 0 5
3113: PPUSH
3114: LD_INT 4
3116: PPUSH
3117: LD_INT 0
3119: PPUSH
3120: CALL_OW 60
// r := r - 50 ;
3124: LD_ADDR_VAR 0 8
3128: PUSH
3129: LD_VAR 0 8
3133: PUSH
3134: LD_INT 50
3136: MINUS
3137: ST_TO_ADDR
// end else
3138: GO 3182
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3140: LD_VAR 0 7
3144: PPUSH
3145: LD_VAR 0 8
3149: PUSH
3150: LD_INT 10
3152: DIV
3153: PPUSH
3154: LD_VAR 0 4
3158: PPUSH
3159: LD_VAR 0 5
3163: PPUSH
3164: LD_INT 4
3166: PPUSH
3167: LD_INT 0
3169: PPUSH
3170: CALL_OW 60
// r := 0 ;
3174: LD_ADDR_VAR 0 8
3178: PUSH
3179: LD_INT 0
3181: ST_TO_ADDR
// end ;
3182: GO 3076
// end ;
3184: GO 3057
3186: POP
3187: POP
// end ; for r in starting_crates do
3188: LD_ADDR_VAR 0 8
3192: PUSH
3193: LD_EXP 24
3197: PUSH
3198: FOR_IN
3199: IFFALSE 3231
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3201: LD_INT 1
3203: PPUSH
3204: LD_INT 5
3206: PPUSH
3207: LD_VAR 0 4
3211: PPUSH
3212: LD_VAR 0 5
3216: PPUSH
3217: LD_VAR 0 8
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 60
3229: GO 3198
3231: POP
3232: POP
// if def_morale_flags then
3233: LD_EXP 9
3237: IFFALSE 3376
// begin x := start_def [ pos ] [ 1 ] ;
3239: LD_ADDR_VAR 0 4
3243: PUSH
3244: LD_EXP 42
3248: PUSH
3249: LD_VAR 0 3
3253: ARRAY
3254: PUSH
3255: LD_INT 1
3257: ARRAY
3258: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3259: LD_ADDR_VAR 0 5
3263: PUSH
3264: LD_EXP 42
3268: PUSH
3269: LD_VAR 0 3
3273: ARRAY
3274: PUSH
3275: LD_INT 2
3277: ARRAY
3278: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3279: LD_VAR 0 4
3283: PPUSH
3284: LD_VAR 0 5
3288: PPUSH
3289: LD_INT 12
3291: PPUSH
3292: LD_INT 2
3294: PPUSH
3295: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3299: LD_ADDR_EXP 44
3303: PUSH
3304: LD_EXP 44
3308: PUSH
3309: LD_VAR 0 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: LD_VAR 0 5
3323: PPUSH
3324: LD_INT 1
3326: PUSH
3327: LD_INT 100
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 2
3336: PUSH
3337: LD_INT 50
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: PUSH
3344: LD_INT 3
3346: PUSH
3347: LD_INT 20
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 20
3356: PUSH
3357: LD_INT 100
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: PPUSH
3370: CALL_OW 418
3374: ADD
3375: ST_TO_ADDR
// end ; commander := true ;
3376: LD_ADDR_LOC 1
3380: PUSH
3381: LD_INT 1
3383: ST_TO_ADDR
// soldiers_created := 0 ;
3384: LD_ADDR_LOC 4
3388: PUSH
3389: LD_INT 0
3391: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3392: LD_ADDR_VAR 0 7
3396: PUSH
3397: DOUBLE
3398: LD_INT 1
3400: DEC
3401: ST_TO_ADDR
3402: LD_EXP 20
3406: PUSH
3407: FOR_TO
3408: IFFALSE 3630
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3410: LD_ADDR_VAR 0 4
3414: PUSH
3415: LD_EXP 41
3419: PUSH
3420: LD_VAR 0 3
3424: ARRAY
3425: PUSH
3426: LD_VAR 0 7
3430: ARRAY
3431: PUSH
3432: LD_INT 1
3434: ARRAY
3435: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3436: LD_ADDR_VAR 0 5
3440: PUSH
3441: LD_EXP 41
3445: PUSH
3446: LD_VAR 0 3
3450: ARRAY
3451: PUSH
3452: LD_VAR 0 7
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3462: LD_ADDR_VAR 0 6
3466: PUSH
3467: LD_EXP 41
3471: PUSH
3472: LD_VAR 0 3
3476: ARRAY
3477: PUSH
3478: LD_VAR 0 7
3482: ARRAY
3483: PUSH
3484: LD_INT 3
3486: ARRAY
3487: ST_TO_ADDR
// bc_type := b_breastwork ;
3488: LD_ADDR_OWVAR 42
3492: PUSH
3493: LD_INT 31
3495: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3496: LD_ADDR_VAR 0 10
3500: PUSH
3501: LD_VAR 0 4
3505: PPUSH
3506: LD_VAR 0 5
3510: PPUSH
3511: LD_VAR 0 6
3515: PPUSH
3516: CALL_OW 47
3520: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3521: LD_ADDR_VAR 0 4
3525: PUSH
3526: LD_VAR 0 4
3530: PPUSH
3531: LD_VAR 0 6
3535: PPUSH
3536: LD_INT 2
3538: PPUSH
3539: CALL_OW 272
3543: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3544: LD_ADDR_VAR 0 5
3548: PUSH
3549: LD_VAR 0 5
3553: PPUSH
3554: LD_VAR 0 6
3558: PPUSH
3559: LD_INT 2
3561: PPUSH
3562: CALL_OW 273
3566: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3567: LD_ADDR_VAR 0 9
3571: PUSH
3572: LD_INT 1
3574: PPUSH
3575: LD_INT 1
3577: PPUSH
3578: LD_VAR 0 4
3582: PPUSH
3583: LD_VAR 0 5
3587: PPUSH
3588: LD_INT 0
3590: PPUSH
3591: CALL 2259 0 5
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3600: LD_ADDR_LOC 4
3604: PUSH
3605: LD_LOC 4
3609: PUSH
3610: LD_INT 1
3612: PLUS
3613: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3614: LD_VAR 0 9
3618: PPUSH
3619: LD_VAR 0 10
3623: PPUSH
3624: CALL_OW 120
// end ;
3628: GO 3407
3630: POP
3631: POP
// x := start_def [ pos ] [ 1 ] ;
3632: LD_ADDR_VAR 0 4
3636: PUSH
3637: LD_EXP 42
3641: PUSH
3642: LD_VAR 0 3
3646: ARRAY
3647: PUSH
3648: LD_INT 1
3650: ARRAY
3651: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: LD_EXP 42
3661: PUSH
3662: LD_VAR 0 3
3666: ARRAY
3667: PUSH
3668: LD_INT 2
3670: ARRAY
3671: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
3672: LD_LOC 8
3676: PUSH
3677: LD_EXP 20
3681: MINUS
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: LD_VAR 0 4
3690: PPUSH
3691: LD_VAR 0 5
3695: PPUSH
3696: LD_INT 5
3698: PPUSH
3699: CALL 2259 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
3703: LD_LOC 5
3707: PPUSH
3708: LD_INT 2
3710: PPUSH
3711: LD_VAR 0 4
3715: PPUSH
3716: LD_VAR 0 5
3720: PPUSH
3721: LD_INT 5
3723: PPUSH
3724: CALL 2259 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
3728: LD_LOC 7
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_VAR 0 4
3740: PPUSH
3741: LD_VAR 0 5
3745: PPUSH
3746: LD_INT 5
3748: PPUSH
3749: CALL 2259 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
3753: LD_LOC 6
3757: PPUSH
3758: LD_INT 4
3760: PPUSH
3761: LD_VAR 0 4
3765: PPUSH
3766: LD_VAR 0 5
3770: PPUSH
3771: LD_INT 5
3773: PPUSH
3774: CALL 2259 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3778: LD_EXP 10
3782: PUSH
3783: LD_INT 20
3785: PPUSH
3786: LD_VAR 0 1
3790: PPUSH
3791: CALL_OW 321
3795: PUSH
3796: LD_INT 1
3798: EQUAL
3799: AND
3800: IFFALSE 3817
// SetTech ( tech_SibDet , side , state_researched ) ;
3802: LD_INT 20
3804: PPUSH
3805: LD_VAR 0 1
3809: PPUSH
3810: LD_INT 2
3812: PPUSH
3813: CALL_OW 322
// if def_siberite_bomb = 1 then
3817: LD_EXP 13
3821: PUSH
3822: LD_INT 1
3824: EQUAL
3825: IFFALSE 3859
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3827: LD_INT 25
3829: PPUSH
3830: LD_VAR 0 1
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3842: LD_INT 73
3844: PPUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_INT 1
3852: PPUSH
3853: CALL_OW 322
// end else
3857: GO 3889
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3859: LD_INT 25
3861: PPUSH
3862: LD_VAR 0 1
3866: PPUSH
3867: LD_INT 0
3869: PPUSH
3870: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3874: LD_INT 73
3876: PPUSH
3877: LD_VAR 0 1
3881: PPUSH
3882: LD_INT 0
3884: PPUSH
3885: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3889: LD_INT 24
3891: PPUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 322
// global_defined := true ;
3904: LD_ADDR_LOC 3
3908: PUSH
3909: LD_INT 1
3911: ST_TO_ADDR
// end ;
3912: LD_VAR 0 2
3916: RET
// every 0 0$1 do
3917: GO 3919
3919: DISABLE
// if ( def_siberite_bomb > 1 ) then
3920: LD_EXP 13
3924: PUSH
3925: LD_INT 1
3927: GREATER
3928: IFFALSE 3943
// begin wait ( siberite_bomb_Delay ) ;
3930: LD_EXP 32
3934: PPUSH
3935: CALL_OW 67
// EnableSibFiss ;
3939: CALL 3944 0 0
// end ;
3943: END
// function EnableSibFiss ; var i ; begin
3944: LD_INT 0
3946: PPUSH
3947: PPUSH
// for i := 1 to 8 do
3948: LD_ADDR_VAR 0 2
3952: PUSH
3953: DOUBLE
3954: LD_INT 1
3956: DEC
3957: ST_TO_ADDR
3958: LD_INT 8
3960: PUSH
3961: FOR_TO
3962: IFFALSE 4008
// if Side_Positions [ i ] then
3964: LD_EXP 37
3968: PUSH
3969: LD_VAR 0 2
3973: ARRAY
3974: IFFALSE 4006
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3976: LD_INT 25
3978: PPUSH
3979: LD_VAR 0 2
3983: PPUSH
3984: LD_INT 1
3986: PPUSH
3987: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3991: LD_INT 73
3993: PPUSH
3994: LD_VAR 0 2
3998: PPUSH
3999: LD_INT 1
4001: PPUSH
4002: CALL_OW 322
// end ;
4006: GO 3961
4008: POP
4009: POP
// end ;
4010: LD_VAR 0 1
4014: RET
// function prepare_sides ; var i ; begin
4015: LD_INT 0
4017: PPUSH
4018: PPUSH
// global_units := [ ] ;
4019: LD_ADDR_LOC 2
4023: PUSH
4024: EMPTY
4025: ST_TO_ADDR
// global_defined := false ;
4026: LD_ADDR_LOC 3
4030: PUSH
4031: LD_INT 0
4033: ST_TO_ADDR
// CountClassMembers ;
4034: CALL 4084 0 0
// for i := 1 to 8 do
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: DOUBLE
4044: LD_INT 1
4046: DEC
4047: ST_TO_ADDR
4048: LD_INT 8
4050: PUSH
4051: FOR_TO
4052: IFFALSE 4077
// if Side_Positions [ i ] then
4054: LD_EXP 37
4058: PUSH
4059: LD_VAR 0 2
4063: ARRAY
4064: IFFALSE 4075
// prepare_side ( i ) ;
4066: LD_VAR 0 2
4070: PPUSH
4071: CALL 2774 0 1
4075: GO 4051
4077: POP
4078: POP
// end ;
4079: LD_VAR 0 1
4083: RET
// function CountClassMembers ; var Mode ; begin
4084: LD_INT 0
4086: PPUSH
4087: PPUSH
// if No_Mechs then
4088: LD_EXP 17
4092: IFFALSE 4104
// Mode := 2 else
4094: LD_ADDR_VAR 0 2
4098: PUSH
4099: LD_INT 2
4101: ST_TO_ADDR
4102: GO 4112
// Mode := 1 ;
4104: LD_ADDR_VAR 0 2
4108: PUSH
4109: LD_INT 1
4111: ST_TO_ADDR
// neng := number_of_people ;
4112: LD_ADDR_LOC 5
4116: PUSH
4117: LD_EXP 21
4121: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4122: LD_ADDR_LOC 8
4126: PUSH
4127: LD_LOC 5
4131: PUSH
4132: LD_INT 4
4134: PUSH
4135: LD_INT 3
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_VAR 0 2
4146: ARRAY
4147: DIV
4148: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4149: LD_LOC 8
4153: PUSH
4154: LD_EXP 20
4158: LESS
4159: IFFALSE 4171
// nsol := number_of_breastworks ;
4161: LD_ADDR_LOC 8
4165: PUSH
4166: LD_EXP 20
4170: ST_TO_ADDR
// neng := neng - nsol ;
4171: LD_ADDR_LOC 5
4175: PUSH
4176: LD_LOC 5
4180: PUSH
4181: LD_LOC 8
4185: MINUS
4186: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4187: LD_ADDR_LOC 6
4191: PUSH
4192: LD_LOC 5
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: LD_INT 2
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_VAR 0 2
4211: ARRAY
4212: DIV
4213: ST_TO_ADDR
// if ( nsci < 1 ) then
4214: LD_LOC 6
4218: PUSH
4219: LD_INT 1
4221: LESS
4222: IFFALSE 4232
// nsci := 1 ;
4224: LD_ADDR_LOC 6
4228: PUSH
4229: LD_INT 1
4231: ST_TO_ADDR
// neng := neng - nsci ;
4232: LD_ADDR_LOC 5
4236: PUSH
4237: LD_LOC 5
4241: PUSH
4242: LD_LOC 6
4246: MINUS
4247: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4248: LD_ADDR_LOC 7
4252: PUSH
4253: LD_LOC 5
4257: PUSH
4258: LD_INT 2
4260: DIV
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: LD_VAR 0 2
4273: ARRAY
4274: ST_TO_ADDR
// neng := neng - nmech ;
4275: LD_ADDR_LOC 5
4279: PUSH
4280: LD_LOC 5
4284: PUSH
4285: LD_LOC 7
4289: MINUS
4290: ST_TO_ADDR
// if ( neng < 1 ) then
4291: LD_LOC 5
4295: PUSH
4296: LD_INT 1
4298: LESS
4299: IFFALSE 4309
// neng := 1 ;
4301: LD_ADDR_LOC 5
4305: PUSH
4306: LD_INT 1
4308: ST_TO_ADDR
// end ;
4309: LD_VAR 0 1
4313: RET
// starting begin disable ( 98 ) ;
4314: LD_INT 98
4316: DISABLE_MARKED
// disable ( 99 ) ;
4317: LD_INT 99
4319: DISABLE_MARKED
// disable ( 100 ) ;
4320: LD_INT 100
4322: DISABLE_MARKED
// disable ( 4 ) ;
4323: LD_INT 4
4325: DISABLE_MARKED
// disable ( 400 ) ;
4326: LD_INT 400
4328: DISABLE_MARKED
// disable ( 401 ) ;
4329: LD_INT 401
4331: DISABLE_MARKED
// mp_selectmsg := true ;
4332: LD_ADDR_OWVAR 13
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4340: CALL 68 0 0
// init_map ;
4344: CALL 1421 0 0
// init_respawning ;
4348: CALL 18283 0 0
// set_shared_visions_and_alliances ;
4352: CALL 1950 0 0
// ResetFog ;
4356: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4360: LD_OWVAR 2
4364: PPUSH
4365: CALL_OW 520
// AnimateTrees ( true ) ;
4369: LD_INT 1
4371: PPUSH
4372: CALL_OW 573
// prepare_sides ;
4376: CALL 4015 0 0
// Init_Win_Condition ;
4380: CALL 8527 0 0
// if game_type = 3 then
4384: LD_EXP 18
4388: PUSH
4389: LD_INT 3
4391: EQUAL
4392: IFFALSE 4402
// begin InitPoints ( ) ;
4394: CALL 7530 0 0
// init_kings_counting ;
4398: CALL 9822 0 0
// end ; InitApeman ;
4402: CALL 5850 0 0
// ShowTimer ;
4406: CALL 7318 0 0
// music_nat := Side_Nations [ your_side ] ;
4410: LD_ADDR_OWVAR 71
4414: PUSH
4415: LD_EXP 38
4419: PUSH
4420: LD_OWVAR 2
4424: ARRAY
4425: ST_TO_ADDR
// if IAmSpec then
4426: CALL_OW 531
4430: IFFALSE 4466
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4432: LD_INT 0
4434: PPUSH
4435: LD_INT 0
4437: PPUSH
4438: LD_OWVAR 2
4442: PPUSH
4443: LD_INT 32767
4445: NEG
4446: PPUSH
4447: CALL_OW 330
// CenterNowOnXY ( 119 , 79 ) ;
4451: LD_INT 119
4453: PPUSH
4454: LD_INT 79
4456: PPUSH
4457: CALL_OW 86
// enable ( 400 ) ;
4461: LD_INT 400
4463: ENABLE_MARKED
// end else
4464: GO 4512
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4466: LD_EXP 42
4470: PUSH
4471: LD_EXP 37
4475: PUSH
4476: LD_OWVAR 2
4480: ARRAY
4481: ARRAY
4482: PUSH
4483: LD_INT 1
4485: ARRAY
4486: PPUSH
4487: LD_EXP 42
4491: PUSH
4492: LD_EXP 37
4496: PUSH
4497: LD_OWVAR 2
4501: ARRAY
4502: ARRAY
4503: PUSH
4504: LD_INT 2
4506: ARRAY
4507: PPUSH
4508: CALL_OW 86
// end ; end ; end_of_file
4512: END
// every 0 0$25 + 0 0$1.0 do
4513: GO 4515
4515: DISABLE
// begin if GetResourceArea ( ZaklLHOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4516: LD_INT 16
4518: PPUSH
4519: LD_INT 1
4521: PPUSH
4522: CALL_OW 287
4526: PUSH
4527: LD_INT 200
4529: PUSH
4530: LD_EXP 26
4534: MINUS
4535: PUSH
4536: LD_INT 50
4538: DIVREAL
4539: PUSH
4540: LD_INT 5
4542: MUL
4543: LESS
4544: IFFALSE 4567
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklLHOut , true ) ;
4546: LD_INT 3
4548: PPUSH
4549: LD_INT 4
4551: PPUSH
4552: CALL_OW 12
4556: PPUSH
4557: LD_INT 16
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: CALL_OW 55
// if GetResourceArea ( ZaklPHOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4567: LD_INT 17
4569: PPUSH
4570: LD_INT 1
4572: PPUSH
4573: CALL_OW 287
4577: PUSH
4578: LD_INT 200
4580: PUSH
4581: LD_EXP 26
4585: MINUS
4586: PUSH
4587: LD_INT 50
4589: DIVREAL
4590: PUSH
4591: LD_INT 5
4593: MUL
4594: LESS
4595: IFFALSE 4618
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklPHOut , true ) ;
4597: LD_INT 3
4599: PPUSH
4600: LD_INT 4
4602: PPUSH
4603: CALL_OW 12
4607: PPUSH
4608: LD_INT 17
4610: PPUSH
4611: LD_INT 1
4613: PPUSH
4614: CALL_OW 55
// if GetResourceArea ( ZaklLDOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4618: LD_INT 18
4620: PPUSH
4621: LD_INT 1
4623: PPUSH
4624: CALL_OW 287
4628: PUSH
4629: LD_INT 200
4631: PUSH
4632: LD_EXP 26
4636: MINUS
4637: PUSH
4638: LD_INT 50
4640: DIVREAL
4641: PUSH
4642: LD_INT 5
4644: MUL
4645: LESS
4646: IFFALSE 4669
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklLDOut , true ) ;
4648: LD_INT 3
4650: PPUSH
4651: LD_INT 4
4653: PPUSH
4654: CALL_OW 12
4658: PPUSH
4659: LD_INT 18
4661: PPUSH
4662: LD_INT 1
4664: PPUSH
4665: CALL_OW 55
// if GetResourceArea ( ZaklPDOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4669: LD_INT 19
4671: PPUSH
4672: LD_INT 1
4674: PPUSH
4675: CALL_OW 287
4679: PUSH
4680: LD_INT 200
4682: PUSH
4683: LD_EXP 26
4687: MINUS
4688: PUSH
4689: LD_INT 50
4691: DIVREAL
4692: PUSH
4693: LD_INT 5
4695: MUL
4696: LESS
4697: IFFALSE 4720
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklPDOut , true ) ;
4699: LD_INT 3
4701: PPUSH
4702: LD_INT 4
4704: PPUSH
4705: CALL_OW 12
4709: PPUSH
4710: LD_INT 19
4712: PPUSH
4713: LD_INT 1
4715: PPUSH
4716: CALL_OW 55
// if GetResourceArea ( Map_center , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4720: LD_INT 15
4722: PPUSH
4723: LD_INT 1
4725: PPUSH
4726: CALL_OW 287
4730: PUSH
4731: LD_INT 200
4733: PUSH
4734: LD_EXP 26
4738: MINUS
4739: PUSH
4740: LD_INT 25
4742: DIVREAL
4743: PUSH
4744: LD_INT 5
4746: MUL
4747: LESS
4748: IFFALSE 4763
// CreateCratesArea ( 5 , Map_center , true ) ;
4750: LD_INT 5
4752: PPUSH
4753: LD_INT 15
4755: PPUSH
4756: LD_INT 1
4758: PPUSH
4759: CALL_OW 55
// enable ;
4763: ENABLE
// end ;
4764: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4765: GO 4767
4767: DISABLE
4768: LD_INT 0
4770: PPUSH
4771: PPUSH
// begin case tick of 1 .. 1 1$0 :
4772: LD_OWVAR 1
4776: PUSH
4777: LD_INT 1
4779: DOUBLE
4780: GREATEREQUAL
4781: IFFALSE 4789
4783: LD_INT 2100
4785: DOUBLE
4786: LESSEQUAL
4787: IFTRUE 4791
4789: GO 4819
4791: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4792: LD_EXP 26
4796: PUSH
4797: LD_INT 100
4799: DIVREAL
4800: PUSH
4801: LD_INT 525
4803: PPUSH
4804: LD_INT 1050
4806: PPUSH
4807: CALL_OW 12
4811: MUL
4812: PPUSH
4813: CALL_OW 67
4817: GO 5121
4819: LD_INT 2100
4821: PUSH
4822: LD_INT 1
4824: PLUS
4825: DOUBLE
4826: GREATEREQUAL
4827: IFFALSE 4835
4829: LD_INT 10500
4831: DOUBLE
4832: LESSEQUAL
4833: IFTRUE 4837
4835: GO 4865
4837: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4838: LD_EXP 26
4842: PUSH
4843: LD_INT 100
4845: DIVREAL
4846: PUSH
4847: LD_INT 1050
4849: PPUSH
4850: LD_INT 1750
4852: PPUSH
4853: CALL_OW 12
4857: MUL
4858: PPUSH
4859: CALL_OW 67
4863: GO 5121
4865: LD_INT 10500
4867: PUSH
4868: LD_INT 1
4870: PLUS
4871: DOUBLE
4872: GREATEREQUAL
4873: IFFALSE 4881
4875: LD_INT 21000
4877: DOUBLE
4878: LESSEQUAL
4879: IFTRUE 4883
4881: GO 4911
4883: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4884: LD_EXP 26
4888: PUSH
4889: LD_INT 100
4891: DIVREAL
4892: PUSH
4893: LD_INT 1750
4895: PPUSH
4896: LD_INT 2100
4898: PPUSH
4899: CALL_OW 12
4903: MUL
4904: PPUSH
4905: CALL_OW 67
4909: GO 5121
4911: LD_INT 21000
4913: PUSH
4914: LD_INT 1
4916: PLUS
4917: DOUBLE
4918: GREATEREQUAL
4919: IFFALSE 4927
4921: LD_INT 42000
4923: DOUBLE
4924: LESSEQUAL
4925: IFTRUE 4929
4927: GO 4957
4929: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4930: LD_EXP 26
4934: PUSH
4935: LD_INT 100
4937: DIVREAL
4938: PUSH
4939: LD_INT 2100
4941: PPUSH
4942: LD_INT 2275
4944: PPUSH
4945: CALL_OW 12
4949: MUL
4950: PPUSH
4951: CALL_OW 67
4955: GO 5121
4957: LD_INT 42000
4959: PUSH
4960: LD_INT 1
4962: PLUS
4963: DOUBLE
4964: GREATEREQUAL
4965: IFFALSE 4973
4967: LD_INT 63000
4969: DOUBLE
4970: LESSEQUAL
4971: IFTRUE 4975
4973: GO 5003
4975: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4976: LD_EXP 26
4980: PUSH
4981: LD_INT 100
4983: DIVREAL
4984: PUSH
4985: LD_INT 2275
4987: PPUSH
4988: LD_INT 2450
4990: PPUSH
4991: CALL_OW 12
4995: MUL
4996: PPUSH
4997: CALL_OW 67
5001: GO 5121
5003: LD_INT 63000
5005: PUSH
5006: LD_INT 1
5008: PLUS
5009: DOUBLE
5010: GREATEREQUAL
5011: IFFALSE 5019
5013: LD_INT 105000
5015: DOUBLE
5016: LESSEQUAL
5017: IFTRUE 5021
5019: GO 5049
5021: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5022: LD_EXP 26
5026: PUSH
5027: LD_INT 100
5029: DIVREAL
5030: PUSH
5031: LD_INT 2450
5033: PPUSH
5034: LD_INT 2800
5036: PPUSH
5037: CALL_OW 12
5041: MUL
5042: PPUSH
5043: CALL_OW 67
5047: GO 5121
5049: LD_INT 105000
5051: PUSH
5052: LD_INT 1
5054: PLUS
5055: DOUBLE
5056: GREATEREQUAL
5057: IFFALSE 5065
5059: LD_INT 630000
5061: DOUBLE
5062: LESSEQUAL
5063: IFTRUE 5067
5065: GO 5095
5067: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5068: LD_EXP 26
5072: PUSH
5073: LD_INT 100
5075: DIVREAL
5076: PUSH
5077: LD_INT 2800
5079: PPUSH
5080: LD_INT 3500
5082: PPUSH
5083: CALL_OW 12
5087: MUL
5088: PPUSH
5089: CALL_OW 67
5093: GO 5121
5095: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5096: LD_EXP 26
5100: PUSH
5101: LD_INT 100
5103: DIVREAL
5104: PUSH
5105: LD_INT 3500
5107: PPUSH
5108: LD_INT 3850
5110: PPUSH
5111: CALL_OW 12
5115: MUL
5116: PPUSH
5117: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5121: LD_ADDR_VAR 0 2
5125: PUSH
5126: LD_INT 3
5128: PPUSH
5129: LD_INT 5
5131: PPUSH
5132: CALL_OW 12
5136: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5137: LD_ADDR_VAR 0 1
5141: PUSH
5142: LD_EXP 37
5146: PUSH
5147: LD_INT 0
5149: PUSH
5150: EMPTY
5151: LIST
5152: DIFF
5153: PUSH
5154: FOR_IN
5155: IFFALSE 5204
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5157: LD_VAR 0 2
5161: PPUSH
5162: LD_EXP 42
5166: PUSH
5167: LD_VAR 0 1
5171: ARRAY
5172: PUSH
5173: LD_INT 1
5175: ARRAY
5176: PPUSH
5177: LD_EXP 42
5181: PUSH
5182: LD_VAR 0 1
5186: ARRAY
5187: PUSH
5188: LD_INT 2
5190: ARRAY
5191: PPUSH
5192: LD_INT 20
5194: PPUSH
5195: LD_INT 1
5197: PPUSH
5198: CALL_OW 56
5202: GO 5154
5204: POP
5205: POP
// enable ;
5206: ENABLE
// end ; end_of_file
5207: PPOPN 2
5209: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5210: LD_VAR 0 1
5214: PPUSH
5215: CALL_OW 266
5219: PUSH
5220: LD_INT 0
5222: PUSH
5223: LD_INT 1
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: IN
5230: IFFALSE 5255
// SetBName ( b , @ & GetSide ( b ) ) ;
5232: LD_VAR 0 1
5236: PPUSH
5237: LD_STRING @
5239: PUSH
5240: LD_VAR 0 1
5244: PPUSH
5245: CALL_OW 255
5249: STR
5250: PPUSH
5251: CALL_OW 500
// end ;
5255: PPOPN 2
5257: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5258: LD_VAR 0 1
5262: PPUSH
5263: CALL_OW 266
5267: PUSH
5268: LD_INT 0
5270: PUSH
5271: LD_INT 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: IN
5278: IFFALSE 5303
// SetBName ( b , @ & GetSide ( b ) ) ;
5280: LD_VAR 0 1
5284: PPUSH
5285: LD_STRING @
5287: PUSH
5288: LD_VAR 0 1
5292: PPUSH
5293: CALL_OW 255
5297: STR
5298: PPUSH
5299: CALL_OW 500
// end ;
5303: PPOPN 3
5305: END
// on VehicleConstructed ( veh , fac ) do var side ;
5306: LD_INT 0
5308: PPUSH
// begin if GetControl ( veh ) = control_apeman then
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 263
5318: PUSH
5319: LD_INT 5
5321: EQUAL
5322: IFFALSE 5464
// begin side := GetSide ( veh ) ;
5324: LD_ADDR_VAR 0 3
5328: PUSH
5329: LD_VAR 0 1
5333: PPUSH
5334: CALL_OW 255
5338: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
5339: LD_ADDR_EXP 53
5343: PUSH
5344: LD_EXP 53
5348: PPUSH
5349: LD_VAR 0 3
5353: PPUSH
5354: LD_EXP 53
5358: PUSH
5359: LD_VAR 0 3
5363: ARRAY
5364: PPUSH
5365: LD_INT 52
5367: PUSH
5368: EMPTY
5369: LIST
5370: PPUSH
5371: CALL_OW 72
5375: PUSH
5376: LD_INT 22
5378: PUSH
5379: LD_VAR 0 3
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: PUSH
5388: LD_INT 2
5390: PUSH
5391: LD_INT 33
5393: PUSH
5394: LD_INT 5
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PUSH
5401: LD_INT 25
5403: PUSH
5404: LD_INT 12
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PUSH
5411: LD_INT 25
5413: PUSH
5414: LD_INT 15
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_INT 25
5423: PUSH
5424: LD_INT 16
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: LD_INT 25
5433: PUSH
5434: LD_INT 17
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: PPUSH
5453: CALL_OW 69
5457: UNION
5458: PPUSH
5459: CALL_OW 1
5463: ST_TO_ADDR
// end ; end ;
5464: PPOPN 3
5466: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
5467: LD_INT 0
5469: PPUSH
5470: PPUSH
5471: PPUSH
5472: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
5473: LD_VAR 0 1
5477: PPUSH
5478: CALL_OW 257
5482: PUSH
5483: LD_INT 12
5485: PUSH
5486: LD_INT 15
5488: PUSH
5489: LD_INT 17
5491: PUSH
5492: LD_INT 16
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: IN
5501: PUSH
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 263
5511: PUSH
5512: LD_INT 5
5514: EQUAL
5515: OR
5516: IFFALSE 5527
// ApeKilled ( j ) ;
5518: LD_VAR 0 1
5522: PPUSH
5523: CALL 6541 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
5527: LD_VAR 0 1
5531: PPUSH
5532: CALL_OW 266
5536: PUSH
5537: LD_INT 0
5539: PUSH
5540: LD_INT 1
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: IN
5547: IFFALSE 5629
// begin pos := Side_Positions [ GetSide ( j ) ] ;
5549: LD_ADDR_VAR 0 4
5553: PUSH
5554: LD_EXP 37
5558: PUSH
5559: LD_VAR 0 1
5563: PPUSH
5564: CALL_OW 255
5568: ARRAY
5569: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
5570: LD_ADDR_VAR 0 2
5574: PUSH
5575: LD_EXP 42
5579: PUSH
5580: LD_VAR 0 4
5584: ARRAY
5585: PUSH
5586: LD_INT 1
5588: ARRAY
5589: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
5590: LD_ADDR_VAR 0 3
5594: PUSH
5595: LD_EXP 42
5599: PUSH
5600: LD_VAR 0 4
5604: ARRAY
5605: PUSH
5606: LD_INT 2
5608: ARRAY
5609: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
5610: LD_VAR 0 2
5614: PPUSH
5615: LD_VAR 0 3
5619: PPUSH
5620: CALL_OW 420
5624: PPUSH
5625: CALL_OW 419
// end ; end ;
5629: PPOPN 5
5631: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
5632: LD_VAR 0 1
5636: PPUSH
5637: LD_VAR 0 2
5641: PPUSH
5642: LD_VAR 0 3
5646: PPUSH
5647: LD_OWVAR 2
5651: PPUSH
5652: CALL 8288 0 4
5656: PPOPN 3
5658: END
// every 20 20$00 trigger apemanNumber do
5659: LD_EXP 50
5663: IFFALSE 5696
5665: GO 5667
5667: DISABLE
// begin enable ;
5668: ENABLE
// if apeLevel >= 8 then
5669: LD_EXP 55
5673: PUSH
5674: LD_INT 8
5676: GREATEREQUAL
5677: IFFALSE 5682
// disable else
5679: DISABLE
5680: GO 5696
// apeLevel := apeLevel + 1 ;
5682: LD_ADDR_EXP 55
5686: PUSH
5687: LD_EXP 55
5691: PUSH
5692: LD_INT 1
5694: PLUS
5695: ST_TO_ADDR
// end ;
5696: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5697: LD_EXP 50
5701: PUSH
5702: LD_EXP 51
5706: LESS
5707: IFFALSE 5847
5709: GO 5711
5711: DISABLE
5712: LD_INT 0
5714: PPUSH
5715: PPUSH
5716: PPUSH
5717: PPUSH
// begin enable ;
5718: ENABLE
// for i := 1 to apemanPos do
5719: LD_ADDR_VAR 0 1
5723: PUSH
5724: DOUBLE
5725: LD_INT 1
5727: DEC
5728: ST_TO_ADDR
5729: LD_EXP 53
5733: PUSH
5734: FOR_TO
5735: IFFALSE 5845
// begin if apemanPlayerCount [ i ] then
5737: LD_EXP 54
5741: PUSH
5742: LD_VAR 0 1
5746: ARRAY
5747: IFFALSE 5843
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5749: LD_EXP 54
5753: PUSH
5754: LD_VAR 0 1
5758: ARRAY
5759: PUSH
5760: LD_EXP 53
5764: PUSH
5765: LD_VAR 0 1
5769: ARRAY
5770: GREATER
5771: IFFALSE 5843
// begin ape := PrepareApeman ;
5773: LD_ADDR_VAR 0 2
5777: PUSH
5778: CALL 6350 0 0
5782: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_EXP 56
5792: PUSH
5793: LD_VAR 0 1
5797: ARRAY
5798: PPUSH
5799: LD_INT 0
5801: PPUSH
5802: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5806: LD_ADDR_EXP 53
5810: PUSH
5811: LD_EXP 53
5815: PPUSH
5816: LD_VAR 0 1
5820: PPUSH
5821: LD_EXP 53
5825: PUSH
5826: LD_VAR 0 1
5830: ARRAY
5831: PUSH
5832: LD_VAR 0 2
5836: UNION
5837: PPUSH
5838: CALL_OW 1
5842: ST_TO_ADDR
// end ; end ; end ;
5843: GO 5734
5845: POP
5846: POP
// end ;
5847: PPOPN 4
5849: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5850: LD_INT 0
5852: PPUSH
5853: PPUSH
5854: PPUSH
5855: PPUSH
5856: PPUSH
5857: PPUSH
5858: PPUSH
// playersAmount := 0 ;
5859: LD_ADDR_VAR 0 3
5863: PUSH
5864: LD_INT 0
5866: ST_TO_ADDR
// _apeAreas := [ OpiceSZ , OpiceSV , OpiceJZ , OpiceJV ] ;
5867: LD_ADDR_VAR 0 7
5871: PUSH
5872: LD_INT 11
5874: PUSH
5875: LD_INT 12
5877: PUSH
5878: LD_INT 14
5880: PUSH
5881: LD_INT 13
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5890: LD_ADDR_EXP 56
5894: PUSH
5895: LD_INT 0
5897: PUSH
5898: LD_INT 0
5900: PUSH
5901: LD_INT 0
5903: PUSH
5904: LD_INT 0
5906: PUSH
5907: LD_INT 0
5909: PUSH
5910: LD_INT 0
5912: PUSH
5913: LD_INT 0
5915: PUSH
5916: LD_INT 0
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: ST_TO_ADDR
// for j = 1 to Side_Positions do
5929: LD_ADDR_VAR 0 4
5933: PUSH
5934: DOUBLE
5935: LD_INT 1
5937: DEC
5938: ST_TO_ADDR
5939: LD_EXP 37
5943: PUSH
5944: FOR_TO
5945: IFFALSE 6012
// if Side_Positions [ j ] then
5947: LD_EXP 37
5951: PUSH
5952: LD_VAR 0 4
5956: ARRAY
5957: IFFALSE 6010
// begin playersAmount := playersAmount + 1 ;
5959: LD_ADDR_VAR 0 3
5963: PUSH
5964: LD_VAR 0 3
5968: PUSH
5969: LD_INT 1
5971: PLUS
5972: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5973: LD_ADDR_EXP 56
5977: PUSH
5978: LD_EXP 56
5982: PPUSH
5983: LD_VAR 0 4
5987: PPUSH
5988: LD_VAR 0 7
5992: PUSH
5993: LD_EXP 37
5997: PUSH
5998: LD_VAR 0 4
6002: ARRAY
6003: ARRAY
6004: PPUSH
6005: CALL_OW 1
6009: ST_TO_ADDR
// end ;
6010: GO 5944
6012: POP
6013: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6014: LD_ADDR_EXP 52
6018: PUSH
6019: LD_INT 3
6021: PUSH
6022: LD_EXP 22
6026: MUL
6027: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6028: LD_ADDR_EXP 50
6032: PUSH
6033: LD_VAR 0 3
6037: PUSH
6038: LD_EXP 52
6042: MUL
6043: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6044: LD_ADDR_EXP 51
6048: PUSH
6049: LD_EXP 50
6053: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6054: LD_ADDR_EXP 53
6058: PUSH
6059: LD_INT 0
6061: PUSH
6062: LD_INT 0
6064: PUSH
6065: LD_INT 0
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: LD_INT 0
6079: PUSH
6080: LD_INT 0
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6093: LD_ADDR_EXP 54
6097: PUSH
6098: LD_INT 0
6100: PUSH
6101: LD_INT 0
6103: PUSH
6104: LD_INT 0
6106: PUSH
6107: LD_INT 0
6109: PUSH
6110: LD_INT 0
6112: PUSH
6113: LD_INT 0
6115: PUSH
6116: LD_INT 0
6118: PUSH
6119: LD_INT 0
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: ST_TO_ADDR
// apeLevel := 1 ;
6132: LD_ADDR_EXP 55
6136: PUSH
6137: LD_INT 1
6139: ST_TO_ADDR
// if not apemanNumber then
6140: LD_EXP 50
6144: NOT
6145: IFFALSE 6149
// exit ;
6147: GO 6345
// for i := 1 to apemanPerPlayer do
6149: LD_ADDR_VAR 0 2
6153: PUSH
6154: DOUBLE
6155: LD_INT 1
6157: DEC
6158: ST_TO_ADDR
6159: LD_EXP 52
6163: PUSH
6164: FOR_TO
6165: IFFALSE 6343
// begin for j := 1 to Side_Positions do
6167: LD_ADDR_VAR 0 4
6171: PUSH
6172: DOUBLE
6173: LD_INT 1
6175: DEC
6176: ST_TO_ADDR
6177: LD_EXP 37
6181: PUSH
6182: FOR_TO
6183: IFFALSE 6339
// if Side_Positions [ j ] then
6185: LD_EXP 37
6189: PUSH
6190: LD_VAR 0 4
6194: ARRAY
6195: IFFALSE 6337
// begin pos := Side_Positions [ j ] ;
6197: LD_ADDR_VAR 0 6
6201: PUSH
6202: LD_EXP 37
6206: PUSH
6207: LD_VAR 0 4
6211: ARRAY
6212: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6213: LD_ADDR_EXP 54
6217: PUSH
6218: LD_EXP 54
6222: PPUSH
6223: LD_VAR 0 4
6227: PPUSH
6228: LD_EXP 54
6232: PUSH
6233: LD_VAR 0 4
6237: ARRAY
6238: PUSH
6239: LD_INT 1
6241: PLUS
6242: PPUSH
6243: CALL_OW 1
6247: ST_TO_ADDR
// ape := PrepareApeman ;
6248: LD_ADDR_VAR 0 5
6252: PUSH
6253: CALL 6350 0 0
6257: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6258: LD_ADDR_EXP 53
6262: PUSH
6263: LD_EXP 53
6267: PPUSH
6268: LD_VAR 0 4
6272: PPUSH
6273: LD_EXP 53
6277: PUSH
6278: LD_VAR 0 4
6282: ARRAY
6283: PPUSH
6284: LD_EXP 53
6288: PUSH
6289: LD_VAR 0 4
6293: ARRAY
6294: PUSH
6295: LD_INT 1
6297: PLUS
6298: PPUSH
6299: LD_VAR 0 5
6303: PPUSH
6304: CALL_OW 1
6308: PPUSH
6309: CALL_OW 1
6313: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6314: LD_VAR 0 5
6318: PPUSH
6319: LD_EXP 56
6323: PUSH
6324: LD_VAR 0 4
6328: ARRAY
6329: PPUSH
6330: LD_INT 0
6332: PPUSH
6333: CALL_OW 49
// end ;
6337: GO 6182
6339: POP
6340: POP
// end ;
6341: GO 6164
6343: POP
6344: POP
// end ;
6345: LD_VAR 0 1
6349: RET
// export function PrepareApeman ; var bonus ; begin
6350: LD_INT 0
6352: PPUSH
6353: PPUSH
// uc_side := 0 ;
6354: LD_ADDR_OWVAR 20
6358: PUSH
6359: LD_INT 0
6361: ST_TO_ADDR
// uc_nation := 0 ;
6362: LD_ADDR_OWVAR 21
6366: PUSH
6367: LD_INT 0
6369: ST_TO_ADDR
// InitHc ;
6370: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6374: LD_ADDR_VAR 0 2
6378: PUSH
6379: LD_INT 1
6381: NEG
6382: PUSH
6383: LD_INT 0
6385: PUSH
6386: LD_INT 1
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 25
6396: PUSH
6397: LD_INT 12
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 69
6408: PUSH
6409: LD_INT 3
6411: MOD
6412: PUSH
6413: LD_INT 1
6415: PLUS
6416: ARRAY
6417: ST_TO_ADDR
// hc_class := class_apeman ;
6418: LD_ADDR_OWVAR 28
6422: PUSH
6423: LD_INT 12
6425: ST_TO_ADDR
// hc_gallery :=  ;
6426: LD_ADDR_OWVAR 33
6430: PUSH
6431: LD_STRING 
6433: ST_TO_ADDR
// hc_name :=  ;
6434: LD_ADDR_OWVAR 26
6438: PUSH
6439: LD_STRING 
6441: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6442: LD_ADDR_OWVAR 31
6446: PUSH
6447: LD_EXP 55
6451: PUSH
6452: LD_VAR 0 2
6456: PLUS
6457: PUSH
6458: LD_EXP 55
6462: PUSH
6463: LD_VAR 0 2
6467: PLUS
6468: PUSH
6469: LD_EXP 55
6473: PUSH
6474: LD_VAR 0 2
6478: PLUS
6479: PUSH
6480: LD_EXP 55
6484: PUSH
6485: LD_VAR 0 2
6489: PLUS
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6497: LD_ADDR_OWVAR 35
6501: PUSH
6502: LD_INT 10
6504: PUSH
6505: LD_VAR 0 2
6509: MUL
6510: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6511: LD_ADDR_OWVAR 29
6515: PUSH
6516: LD_INT 12
6518: PUSH
6519: LD_INT 10
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: ST_TO_ADDR
// result := CreateHuman ;
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: CALL_OW 44
6535: ST_TO_ADDR
// end ;
6536: LD_VAR 0 1
6540: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6541: LD_INT 0
6543: PPUSH
6544: PPUSH
6545: PPUSH
// if not ape then
6546: LD_VAR 0 1
6550: NOT
6551: IFFALSE 6555
// exit ;
6553: GO 6680
// side := GetSide ( ape ) ;
6555: LD_ADDR_VAR 0 3
6559: PUSH
6560: LD_VAR 0 1
6564: PPUSH
6565: CALL_OW 255
6569: ST_TO_ADDR
// if not side then
6570: LD_VAR 0 3
6574: NOT
6575: IFFALSE 6629
// begin for i = 1 to apemanPos do
6577: LD_ADDR_VAR 0 4
6581: PUSH
6582: DOUBLE
6583: LD_INT 1
6585: DEC
6586: ST_TO_ADDR
6587: LD_EXP 53
6591: PUSH
6592: FOR_TO
6593: IFFALSE 6627
// if ape in apemanPos [ i ] then
6595: LD_VAR 0 1
6599: PUSH
6600: LD_EXP 53
6604: PUSH
6605: LD_VAR 0 4
6609: ARRAY
6610: IN
6611: IFFALSE 6625
// begin side := i ;
6613: LD_ADDR_VAR 0 3
6617: PUSH
6618: LD_VAR 0 4
6622: ST_TO_ADDR
// break ;
6623: GO 6627
// end ;
6625: GO 6592
6627: POP
6628: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6629: LD_ADDR_EXP 53
6633: PUSH
6634: LD_EXP 53
6638: PPUSH
6639: LD_VAR 0 3
6643: PPUSH
6644: LD_EXP 53
6648: PUSH
6649: LD_VAR 0 3
6653: ARRAY
6654: PUSH
6655: LD_VAR 0 1
6659: DIFF
6660: PPUSH
6661: CALL_OW 1
6665: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6666: LD_ADDR_EXP 50
6670: PUSH
6671: LD_EXP 50
6675: PUSH
6676: LD_INT 1
6678: MINUS
6679: ST_TO_ADDR
// end ; end_of_file
6680: LD_VAR 0 2
6684: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6685: LD_INT 0
6687: PPUSH
6688: PPUSH
// for un in battle_flags_id do
6689: LD_ADDR_VAR 0 2
6693: PUSH
6694: LD_EXP 44
6698: PUSH
6699: FOR_IN
6700: IFFALSE 6775
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6702: LD_VAR 0 2
6706: PPUSH
6707: LD_INT 1
6709: PUSH
6710: LD_LOC 9
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 2
6721: PUSH
6722: LD_LOC 9
6726: PUSH
6727: LD_INT 2
6729: DIV
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 3
6737: PUSH
6738: LD_LOC 9
6742: PUSH
6743: LD_INT 5
6745: DIV
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 20
6753: PUSH
6754: LD_LOC 9
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: PPUSH
6769: CALL_OW 423
6773: GO 6699
6775: POP
6776: POP
// end ;
6777: LD_VAR 0 1
6781: RET
// every 0 0$0.1 do var un ;
6782: GO 6784
6784: DISABLE
6785: LD_INT 0
6787: PPUSH
// begin if not def_morale_flags then
6788: LD_EXP 9
6792: NOT
6793: IFFALSE 6797
// exit ;
6795: GO 6874
// if not morale_decreasing_time then
6797: LD_EXP 27
6801: NOT
6802: IFFALSE 6806
// exit ;
6804: GO 6874
// strength = 100 ;
6806: LD_ADDR_LOC 9
6810: PUSH
6811: LD_INT 100
6813: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6814: LD_EXP 27
6818: PPUSH
6819: CALL_OW 67
// strength := strength - 1 ;
6823: LD_ADDR_LOC 9
6827: PUSH
6828: LD_LOC 9
6832: PUSH
6833: LD_INT 1
6835: MINUS
6836: ST_TO_ADDR
// Update_Flags ;
6837: CALL 6685 0 0
// until not strength ;
6841: LD_LOC 9
6845: NOT
6846: IFFALSE 6814
// for un in battle_flags_id do
6848: LD_ADDR_VAR 0 1
6852: PUSH
6853: LD_EXP 44
6857: PUSH
6858: FOR_IN
6859: IFFALSE 6872
// KillBattleFlag ( un ) ;
6861: LD_VAR 0 1
6865: PPUSH
6866: CALL_OW 419
6870: GO 6858
6872: POP
6873: POP
// end ; end_of_file
6874: PPOPN 1
6876: END
// export score ; every 0 0$1 trigger Game_Type = 3 do
6877: LD_EXP 18
6881: PUSH
6882: LD_INT 3
6884: EQUAL
6885: IFFALSE 6900
6887: GO 6889
6889: DISABLE
// begin SetAreaMapShow ( KopecStred , true ) ;
6890: LD_INT 2
6892: PPUSH
6893: LD_INT 1
6895: PPUSH
6896: CALL_OW 424
// end ;
6900: END
// every 0 0$1 trigger Game_Type = 3 do var un , filter , output , side , new_score ;
6901: LD_EXP 18
6905: PUSH
6906: LD_INT 3
6908: EQUAL
6909: IFFALSE 7194
6911: GO 6913
6913: DISABLE
6914: LD_INT 0
6916: PPUSH
6917: PPUSH
6918: PPUSH
6919: PPUSH
6920: PPUSH
// begin filter := FilterUnitsInArea ( KopecStred , [ [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ready ] ] ) ;
6921: LD_ADDR_VAR 0 2
6925: PUSH
6926: LD_INT 2
6928: PPUSH
6929: LD_INT 2
6931: PUSH
6932: LD_INT 30
6934: PUSH
6935: LD_INT 0
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 30
6944: PUSH
6945: LD_INT 1
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 53
6959: PUSH
6960: EMPTY
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PPUSH
6967: CALL_OW 70
6971: ST_TO_ADDR
// if filter then
6972: LD_VAR 0 2
6976: IFFALSE 7050
// for un in filter do
6978: LD_ADDR_VAR 0 1
6982: PUSH
6983: LD_VAR 0 2
6987: PUSH
6988: FOR_IN
6989: IFFALSE 7048
// begin new_score := score [ GetSide ( un ) ] + 1 ;
6991: LD_ADDR_VAR 0 5
6995: PUSH
6996: LD_EXP 57
7000: PUSH
7001: LD_VAR 0 1
7005: PPUSH
7006: CALL_OW 255
7010: ARRAY
7011: PUSH
7012: LD_INT 1
7014: PLUS
7015: ST_TO_ADDR
// score := Replace ( score , GetSide ( un ) , new_score ) ;
7016: LD_ADDR_EXP 57
7020: PUSH
7021: LD_EXP 57
7025: PPUSH
7026: LD_VAR 0 1
7030: PPUSH
7031: CALL_OW 255
7035: PPUSH
7036: LD_VAR 0 5
7040: PPUSH
7041: CALL_OW 1
7045: ST_TO_ADDR
// end ;
7046: GO 6988
7048: POP
7049: POP
// if not def_public_score then
7050: LD_EXP 14
7054: NOT
7055: IFFALSE 7158
// begin output := [ ] ;
7057: LD_ADDR_VAR 0 3
7061: PUSH
7062: EMPTY
7063: ST_TO_ADDR
// for side = 1 to Side_Positions do
7064: LD_ADDR_VAR 0 4
7068: PUSH
7069: DOUBLE
7070: LD_INT 1
7072: DEC
7073: ST_TO_ADDR
7074: LD_EXP 37
7078: PUSH
7079: FOR_TO
7080: IFFALSE 7144
// if Side_Positions [ side ] then
7082: LD_EXP 37
7086: PUSH
7087: LD_VAR 0 4
7091: ARRAY
7092: IFFALSE 7142
// output := output ^ ( mp_sides_players_names [ side ] & :  & score [ side ] & /  & amount_score ) ;
7094: LD_ADDR_VAR 0 3
7098: PUSH
7099: LD_VAR 0 3
7103: PUSH
7104: LD_OWVAR 19
7108: PUSH
7109: LD_VAR 0 4
7113: ARRAY
7114: PUSH
7115: LD_STRING : 
7117: STR
7118: PUSH
7119: LD_EXP 57
7123: PUSH
7124: LD_VAR 0 4
7128: ARRAY
7129: STR
7130: PUSH
7131: LD_STRING / 
7133: STR
7134: PUSH
7135: LD_EXP 31
7139: STR
7140: ADD
7141: ST_TO_ADDR
7142: GO 7079
7144: POP
7145: POP
// ExtraStrings := output ;
7146: LD_ADDR_EXP 58
7150: PUSH
7151: LD_VAR 0 3
7155: ST_TO_ADDR
// end else
7156: GO 7193
// ExtraStrings := [ #KingoftheHill-Private , your_side , score [ Your_Side ] , amount_score ] ;
7158: LD_ADDR_EXP 58
7162: PUSH
7163: LD_STRING #KingoftheHill-Private
7165: PUSH
7166: LD_OWVAR 2
7170: PUSH
7171: LD_EXP 57
7175: PUSH
7176: LD_OWVAR 2
7180: ARRAY
7181: PUSH
7182: LD_EXP 31
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: ST_TO_ADDR
// enable ;
7193: ENABLE
// end ;
7194: PPOPN 5
7196: END
// every 0 0$1 marked 100 do var side ;
7197: GO 7199
7199: DISABLE
7200: LD_INT 0
7202: PPUSH
// begin for side = 1 to Side_Positions do
7203: LD_ADDR_VAR 0 1
7207: PUSH
7208: DOUBLE
7209: LD_INT 1
7211: DEC
7212: ST_TO_ADDR
7213: LD_EXP 37
7217: PUSH
7218: FOR_TO
7219: IFFALSE 7257
// if Side_Positions [ side ] then
7221: LD_EXP 37
7225: PUSH
7226: LD_VAR 0 1
7230: ARRAY
7231: IFFALSE 7255
// if score [ side ] >= amount_score then
7233: LD_EXP 57
7237: PUSH
7238: LD_VAR 0 1
7242: ARRAY
7243: PUSH
7244: LD_EXP 31
7248: GREATEREQUAL
7249: IFFALSE 7255
// show_that_you_are_winner_or_looser ;
7251: CALL 7263 0 0
7255: GO 7218
7257: POP
7258: POP
// enable ;
7259: ENABLE
// end ;
7260: PPOPN 1
7262: END
// function show_that_you_are_winner_or_looser ; var i ; begin
7263: LD_INT 0
7265: PPUSH
7266: PPUSH
// if score [ your_side ] >= amount_score then
7267: LD_EXP 57
7271: PUSH
7272: LD_OWVAR 2
7276: ARRAY
7277: PUSH
7278: LD_EXP 31
7282: GREATEREQUAL
7283: IFFALSE 7300
// begin wait ( 0 0$3 ) ;
7285: LD_INT 105
7287: PPUSH
7288: CALL_OW 67
// YouWinInMultiplayer ;
7292: CALL_OW 106
// exit ;
7296: GO 7313
// end else
7298: GO 7313
// begin wait ( 0 0$3 ) ;
7300: LD_INT 105
7302: PPUSH
7303: CALL_OW 67
// YouLostInMultiplayer ;
7307: CALL_OW 107
// exit ;
7311: GO 7313
// end ; end ; end_of_file
7313: LD_VAR 0 1
7317: RET
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
7318: LD_INT 0
7320: PPUSH
7321: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7322: LD_ADDR_VAR 0 2
7326: PUSH
7327: LD_STRING #Multi1x1-Time
7329: PUSH
7330: LD_OWVAR 1
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: ST_TO_ADDR
// if WaitServerStrings then
7339: LD_EXP 59
7343: IFFALSE 7361
// AllStrings = AllStrings ^ WaitServerStrings ;
7345: LD_ADDR_VAR 0 2
7349: PUSH
7350: LD_VAR 0 2
7354: PUSH
7355: LD_EXP 59
7359: ADD
7360: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7361: LD_INT 0
7363: PUSH
7364: LD_EXP 32
7368: PUSH
7369: LD_OWVAR 1
7373: MINUS
7374: LESSEQUAL
7375: IFFALSE 7406
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7377: LD_ADDR_VAR 0 2
7381: PUSH
7382: LD_VAR 0 2
7386: PUSH
7387: LD_STRING #allowedsibbomb
7389: PUSH
7390: LD_EXP 32
7394: PUSH
7395: LD_OWVAR 1
7399: MINUS
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: ADD
7405: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7406: LD_INT 0
7408: PUSH
7409: LD_EXP 63
7413: PUSH
7414: LD_OWVAR 1
7418: MINUS
7419: LESSEQUAL
7420: IFFALSE 7451
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7422: LD_ADDR_VAR 0 2
7426: PUSH
7427: LD_VAR 0 2
7431: PUSH
7432: LD_STRING #builduptime
7434: PUSH
7435: LD_EXP 63
7439: PUSH
7440: LD_OWVAR 1
7444: MINUS
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: ADD
7450: ST_TO_ADDR
// if ( ExtraStrings ) then
7451: LD_EXP 58
7455: IFFALSE 7477
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_VAR 0 2
7466: PUSH
7467: LD_STRING 
7469: ADD
7470: PUSH
7471: LD_EXP 58
7475: ADD
7476: ST_TO_ADDR
// if ( Display_kings ) and not isSGUI then
7477: LD_EXP 60
7481: PUSH
7482: LD_OWVAR 83
7486: NOT
7487: AND
7488: IFFALSE 7506
// AllStrings = AllStrings ^ Display_kings ;
7490: LD_ADDR_VAR 0 2
7494: PUSH
7495: LD_VAR 0 2
7499: PUSH
7500: LD_EXP 60
7504: ADD
7505: ST_TO_ADDR
// Display_Strings := AllStrings ;
7506: LD_ADDR_OWVAR 47
7510: PUSH
7511: LD_VAR 0 2
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 1
7520: RET
// every 0 0$1 do
7521: GO 7523
7523: DISABLE
// begin ShowTimer ;
7524: CALL 7318 0 0
// enable ;
7528: ENABLE
// end ; end_of_file
7529: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
7530: LD_INT 0
7532: PPUSH
7533: PPUSH
7534: PPUSH
// sharedPoints1 = [ ] ;
7535: LD_ADDR_LOC 14
7539: PUSH
7540: EMPTY
7541: ST_TO_ADDR
// sharedPoints2 = [ ] ;
7542: LD_ADDR_LOC 15
7546: PUSH
7547: EMPTY
7548: ST_TO_ADDR
// sharedPoints3 = [ ] ;
7549: LD_ADDR_LOC 16
7553: PUSH
7554: EMPTY
7555: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
7556: LD_ADDR_VAR 0 2
7560: PUSH
7561: DOUBLE
7562: LD_INT 1
7564: DEC
7565: ST_TO_ADDR
7566: LD_EXP 37
7570: PUSH
7571: LD_INT 0
7573: PLUS
7574: PUSH
7575: FOR_TO
7576: IFFALSE 7678
// begin if not Side_Positions [ i ] = 0 then
7578: LD_EXP 37
7582: PUSH
7583: LD_VAR 0 2
7587: ARRAY
7588: PUSH
7589: LD_INT 0
7591: EQUAL
7592: NOT
7593: IFFALSE 7607
// SetMultiScore ( i , 0 ) ;
7595: LD_VAR 0 2
7599: PPUSH
7600: LD_INT 0
7602: PPUSH
7603: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
7607: LD_ADDR_LOC 14
7611: PUSH
7612: LD_LOC 14
7616: PPUSH
7617: LD_VAR 0 2
7621: PPUSH
7622: LD_INT 0
7624: PPUSH
7625: CALL_OW 1
7629: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
7630: LD_ADDR_LOC 15
7634: PUSH
7635: LD_LOC 15
7639: PPUSH
7640: LD_VAR 0 2
7644: PPUSH
7645: LD_INT 0
7647: PPUSH
7648: CALL_OW 1
7652: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
7653: LD_ADDR_LOC 16
7657: PUSH
7658: LD_LOC 16
7662: PPUSH
7663: LD_VAR 0 2
7667: PPUSH
7668: LD_INT 0
7670: PPUSH
7671: CALL_OW 1
7675: ST_TO_ADDR
// end ;
7676: GO 7575
7678: POP
7679: POP
// pointGame = true ;
7680: LD_ADDR_LOC 17
7684: PUSH
7685: LD_INT 1
7687: ST_TO_ADDR
// end ;
7688: LD_VAR 0 1
7692: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
7693: LD_LOC 17
7697: IFFALSE 8108
7699: GO 7701
7701: DISABLE
7702: LD_INT 0
7704: PPUSH
7705: PPUSH
7706: PPUSH
7707: PPUSH
7708: PPUSH
7709: PPUSH
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
7715: PPUSH
7716: PPUSH
// begin if isSGUI then
7717: LD_OWVAR 83
7721: IFFALSE 8108
// begin if Teams [ 1 ] then
7723: LD_EXP 35
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: IFFALSE 7743
// red = true else
7733: LD_ADDR_VAR 0 2
7737: PUSH
7738: LD_INT 1
7740: ST_TO_ADDR
7741: GO 7751
// red = false ;
7743: LD_ADDR_VAR 0 2
7747: PUSH
7748: LD_INT 0
7750: ST_TO_ADDR
// if Teams [ 2 ] then
7751: LD_EXP 35
7755: PUSH
7756: LD_INT 2
7758: ARRAY
7759: IFFALSE 7771
// blue = true else
7761: LD_ADDR_VAR 0 3
7765: PUSH
7766: LD_INT 1
7768: ST_TO_ADDR
7769: GO 7779
// blue = false ;
7771: LD_ADDR_VAR 0 3
7775: PUSH
7776: LD_INT 0
7778: ST_TO_ADDR
// if Teams [ 3 ] then
7779: LD_EXP 35
7783: PUSH
7784: LD_INT 3
7786: ARRAY
7787: IFFALSE 7799
// yel = true else
7789: LD_ADDR_VAR 0 4
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
7797: GO 7807
// yel = false ;
7799: LD_ADDR_VAR 0 4
7803: PUSH
7804: LD_INT 0
7806: ST_TO_ADDR
// if Teams [ 4 ] then
7807: LD_EXP 35
7811: PUSH
7812: LD_INT 4
7814: ARRAY
7815: IFFALSE 7827
// green = true else
7817: LD_ADDR_VAR 0 5
7821: PUSH
7822: LD_INT 1
7824: ST_TO_ADDR
7825: GO 7835
// green = false ;
7827: LD_ADDR_VAR 0 5
7831: PUSH
7832: LD_INT 0
7834: ST_TO_ADDR
// if def_public_score then
7835: LD_EXP 14
7839: IFFALSE 7851
// p = true else
7841: LD_ADDR_VAR 0 12
7845: PUSH
7846: LD_INT 1
7848: ST_TO_ADDR
7849: GO 7859
// p = false ;
7851: LD_ADDR_VAR 0 12
7855: PUSH
7856: LD_INT 0
7858: ST_TO_ADDR
// if team_game then
7859: LD_EXP 39
7863: IFFALSE 7944
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
7865: LD_ADDR_VAR 0 13
7869: PUSH
7870: LD_INT 3
7872: PUSH
7873: LD_INT 1
7875: PUSH
7876: LD_INT 2
7878: PUSH
7879: LD_INT 7
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: PUSH
7888: LD_EXP 48
7892: ARRAY
7893: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
7894: LD_ADDR_VAR 0 10
7898: PUSH
7899: LD_STRING {
7901: PUSH
7902: LD_VAR 0 3
7906: STR
7907: PUSH
7908: LD_STRING ,
7910: STR
7911: PUSH
7912: LD_VAR 0 4
7916: STR
7917: PUSH
7918: LD_STRING ,
7920: STR
7921: PUSH
7922: LD_VAR 0 2
7926: STR
7927: PUSH
7928: LD_STRING ,0,0,0,
7930: STR
7931: PUSH
7932: LD_VAR 0 5
7936: STR
7937: PUSH
7938: LD_STRING ,0}
7940: STR
7941: ST_TO_ADDR
// end else
7942: GO 8044
// begin you = your_side ;
7944: LD_ADDR_VAR 0 13
7948: PUSH
7949: LD_OWVAR 2
7953: ST_TO_ADDR
// s = { ;
7954: LD_ADDR_VAR 0 10
7958: PUSH
7959: LD_STRING {
7961: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
7962: LD_ADDR_VAR 0 1
7966: PUSH
7967: DOUBLE
7968: LD_INT 1
7970: DEC
7971: ST_TO_ADDR
7972: LD_EXP 37
7976: PUSH
7977: LD_INT 0
7979: PLUS
7980: PUSH
7981: FOR_TO
7982: IFFALSE 8028
// if side_positions [ i ] then
7984: LD_EXP 37
7988: PUSH
7989: LD_VAR 0 1
7993: ARRAY
7994: IFFALSE 8012
// s = s & 1, else
7996: LD_ADDR_VAR 0 10
8000: PUSH
8001: LD_VAR 0 10
8005: PUSH
8006: LD_STRING 1,
8008: STR
8009: ST_TO_ADDR
8010: GO 8026
// s = s & 0, ;
8012: LD_ADDR_VAR 0 10
8016: PUSH
8017: LD_VAR 0 10
8021: PUSH
8022: LD_STRING 0,
8024: STR
8025: ST_TO_ADDR
8026: GO 7981
8028: POP
8029: POP
// s = s & } ;
8030: LD_ADDR_VAR 0 10
8034: PUSH
8035: LD_VAR 0 10
8039: PUSH
8040: LD_STRING }
8042: STR
8043: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
8044: LD_STRING initScore(
8046: PUSH
8047: LD_VAR 0 10
8051: STR
8052: PUSH
8053: LD_STRING ,
8055: STR
8056: PUSH
8057: LD_VAR 0 12
8061: STR
8062: PUSH
8063: LD_STRING ,
8065: STR
8066: PUSH
8067: LD_VAR 0 13
8071: STR
8072: PUSH
8073: LD_STRING  );
8075: STR
8076: PPUSH
8077: CALL_OW 559
// if game_type = 3 then
8081: LD_EXP 18
8085: PUSH
8086: LD_INT 3
8088: EQUAL
8089: IFFALSE 8108
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
8091: LD_STRING AddScorePoints(2,2,
8093: PUSH
8094: LD_EXP 46
8098: STR
8099: PUSH
8100: LD_STRING  );
8102: STR
8103: PPUSH
8104: CALL_OW 559
// end ; end ;
8108: PPOPN 13
8110: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
8111: LD_INT 0
8113: PPUSH
8114: PPUSH
// case typ of 1 :
8115: LD_VAR 0 3
8119: PUSH
8120: LD_INT 1
8122: DOUBLE
8123: EQUAL
8124: IFTRUE 8128
8126: GO 8156
8128: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
8129: LD_ADDR_LOC 14
8133: PUSH
8134: LD_LOC 14
8138: PPUSH
8139: LD_VAR 0 1
8143: PPUSH
8144: LD_VAR 0 2
8148: PPUSH
8149: CALL_OW 1
8153: ST_TO_ADDR
8154: GO 8229
8156: LD_INT 2
8158: DOUBLE
8159: EQUAL
8160: IFTRUE 8164
8162: GO 8192
8164: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
8165: LD_ADDR_LOC 15
8169: PUSH
8170: LD_LOC 15
8174: PPUSH
8175: LD_VAR 0 1
8179: PPUSH
8180: LD_VAR 0 2
8184: PPUSH
8185: CALL_OW 1
8189: ST_TO_ADDR
8190: GO 8229
8192: LD_INT 3
8194: DOUBLE
8195: EQUAL
8196: IFTRUE 8200
8198: GO 8228
8200: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
8201: LD_ADDR_LOC 16
8205: PUSH
8206: LD_LOC 16
8210: PPUSH
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_VAR 0 2
8220: PPUSH
8221: CALL_OW 1
8225: ST_TO_ADDR
8226: GO 8229
8228: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
8229: LD_ADDR_VAR 0 5
8233: PUSH
8234: LD_LOC 14
8238: PUSH
8239: LD_VAR 0 1
8243: ARRAY
8244: PUSH
8245: LD_LOC 15
8249: PUSH
8250: LD_VAR 0 1
8254: ARRAY
8255: PLUS
8256: PUSH
8257: LD_LOC 16
8261: PUSH
8262: LD_VAR 0 1
8266: ARRAY
8267: PLUS
8268: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
8269: LD_VAR 0 1
8273: PPUSH
8274: LD_VAR 0 5
8278: PPUSH
8279: CALL_OW 506
// end ; end_of_file
8283: LD_VAR 0 4
8287: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8288: LD_INT 0
8290: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8291: LD_VAR 0 1
8295: PPUSH
8296: CALL_OW 255
8300: PUSH
8301: LD_VAR 0 4
8305: EQUAL
8306: IFFALSE 8325
// begin SetAchievement ( ACH_RAD ) ;
8308: LD_STRING ACH_RAD
8310: PPUSH
8311: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8315: LD_STRING ACH_NL
8317: PPUSH
8318: LD_INT 1
8320: PPUSH
8321: CALL_OW 564
// end end ;
8325: LD_VAR 0 5
8329: RET
// export function SA_Win ( side ) ; begin
8330: LD_INT 0
8332: PPUSH
// case side of 1 :
8333: LD_VAR 0 1
8337: PUSH
8338: LD_INT 1
8340: DOUBLE
8341: EQUAL
8342: IFTRUE 8346
8344: GO 8359
8346: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8347: LD_STRING ACH_AH
8349: PPUSH
8350: LD_INT 1
8352: PPUSH
8353: CALL_OW 564
8357: GO 8522
8359: LD_INT 2
8361: DOUBLE
8362: EQUAL
8363: IFTRUE 8367
8365: GO 8380
8367: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8368: LD_STRING ACH_E
8370: PPUSH
8371: LD_INT 1
8373: PPUSH
8374: CALL_OW 564
8378: GO 8522
8380: LD_INT 3
8382: DOUBLE
8383: EQUAL
8384: IFTRUE 8388
8386: GO 8401
8388: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8389: LD_STRING ACH_OOL
8391: PPUSH
8392: LD_INT 1
8394: PPUSH
8395: CALL_OW 564
8399: GO 8522
8401: LD_INT 1
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: DOUBLE
8411: EQUAL
8412: IFTRUE 8416
8414: GO 8441
8416: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8417: LD_STRING ACH_AH
8419: PPUSH
8420: LD_REAL  5.00000000000000E-0001
8423: PPUSH
8424: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8428: LD_STRING ACH_E
8430: PPUSH
8431: LD_REAL  5.00000000000000E-0001
8434: PPUSH
8435: CALL_OW 564
// end ; [ 2 , 3 ] :
8439: GO 8522
8441: LD_INT 2
8443: PUSH
8444: LD_INT 3
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: DOUBLE
8451: EQUAL
8452: IFTRUE 8456
8454: GO 8481
8456: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8457: LD_STRING ACH_OOL
8459: PPUSH
8460: LD_REAL  5.00000000000000E-0001
8463: PPUSH
8464: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8468: LD_STRING ACH_E
8470: PPUSH
8471: LD_REAL  5.00000000000000E-0001
8474: PPUSH
8475: CALL_OW 564
// end ; [ 3 , 1 ] :
8479: GO 8522
8481: LD_INT 3
8483: PUSH
8484: LD_INT 1
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: DOUBLE
8491: EQUAL
8492: IFTRUE 8496
8494: GO 8521
8496: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8497: LD_STRING ACH_AH
8499: PPUSH
8500: LD_REAL  5.00000000000000E-0001
8503: PPUSH
8504: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8508: LD_STRING ACH_OOL
8510: PPUSH
8511: LD_REAL  5.00000000000000E-0001
8514: PPUSH
8515: CALL_OW 564
// end ; end ;
8519: GO 8522
8521: POP
// end ; end_of_file
8522: LD_VAR 0 2
8526: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8527: LD_INT 0
8529: PPUSH
8530: PPUSH
// enable ( 98 ) ;
8531: LD_INT 98
8533: ENABLE_MARKED
// GameEnded = false ;
8534: LD_ADDR_LOC 19
8538: PUSH
8539: LD_INT 0
8541: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8542: LD_ADDR_LOC 18
8546: PUSH
8547: LD_INT 0
8549: PUSH
8550: LD_INT 0
8552: PUSH
8553: LD_INT 0
8555: PUSH
8556: LD_INT 0
8558: PUSH
8559: LD_INT 0
8561: PUSH
8562: LD_INT 0
8564: PUSH
8565: LD_INT 0
8567: PUSH
8568: LD_INT 0
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: ST_TO_ADDR
// unfoged = false ;
8581: LD_ADDR_LOC 20
8585: PUSH
8586: LD_INT 0
8588: ST_TO_ADDR
// defeated_specs := [ ] ;
8589: LD_ADDR_LOC 21
8593: PUSH
8594: EMPTY
8595: ST_TO_ADDR
// for i = 1 to side_positions do
8596: LD_ADDR_VAR 0 2
8600: PUSH
8601: DOUBLE
8602: LD_INT 1
8604: DEC
8605: ST_TO_ADDR
8606: LD_EXP 37
8610: PUSH
8611: FOR_TO
8612: IFFALSE 8652
// if not side_positions [ i ] then
8614: LD_EXP 37
8618: PUSH
8619: LD_VAR 0 2
8623: ARRAY
8624: NOT
8625: IFFALSE 8650
// defeated = replace ( defeated , i , true ) ;
8627: LD_ADDR_LOC 18
8631: PUSH
8632: LD_LOC 18
8636: PPUSH
8637: LD_VAR 0 2
8641: PPUSH
8642: LD_INT 1
8644: PPUSH
8645: CALL_OW 1
8649: ST_TO_ADDR
8650: GO 8611
8652: POP
8653: POP
// end ;
8654: LD_VAR 0 1
8658: RET
// function CanWinLoose ; begin
8659: LD_INT 0
8661: PPUSH
// Result := true ;
8662: LD_ADDR_VAR 0 1
8666: PUSH
8667: LD_INT 1
8669: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8670: CALL_OW 518
8674: PUSH
8675: CALL_OW 519
8679: PUSH
8680: LD_INT 0
8682: GREATER
8683: AND
8684: IFFALSE 8694
// Result := false ;
8686: LD_ADDR_VAR 0 1
8690: PUSH
8691: LD_INT 0
8693: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8694: CALL_OW 531
8698: PUSH
8699: CALL_OW 519
8703: PUSH
8704: LD_INT 1
8706: GREATER
8707: AND
8708: IFFALSE 8718
// Result := false ;
8710: LD_ADDR_VAR 0 1
8714: PUSH
8715: LD_INT 0
8717: ST_TO_ADDR
// end ;
8718: LD_VAR 0 1
8722: RET
// export function HasPower ( i ) ; var k , h ; begin
8723: LD_INT 0
8725: PPUSH
8726: PPUSH
8727: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8728: LD_VAR 0 1
8732: PPUSH
8733: CALL_OW 108
8737: NOT
8738: PUSH
8739: LD_EXP 36
8743: PUSH
8744: LD_VAR 0 1
8748: ARRAY
8749: NOT
8750: AND
8751: PUSH
8752: LD_OWVAR 4
8756: AND
8757: IFFALSE 8769
// begin result = false ;
8759: LD_ADDR_VAR 0 2
8763: PUSH
8764: LD_INT 0
8766: ST_TO_ADDR
// end else
8767: GO 9064
// case def_win_rules of 0 :
8769: LD_EXP 33
8773: PUSH
8774: LD_INT 0
8776: DOUBLE
8777: EQUAL
8778: IFTRUE 8782
8780: GO 8945
8782: POP
// if def_people_respawning then
8783: LD_EXP 11
8787: IFFALSE 8878
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8789: LD_ADDR_VAR 0 2
8793: PUSH
8794: LD_INT 22
8796: PUSH
8797: LD_VAR 0 1
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 2
8808: PUSH
8809: LD_INT 21
8811: PUSH
8812: LD_INT 1
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: LD_INT 33
8821: PUSH
8822: LD_INT 3
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_INT 33
8831: PUSH
8832: LD_INT 5
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 30
8841: PUSH
8842: LD_INT 0
8844: PUSH
8845: EMPTY
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 30
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PPUSH
8871: CALL_OW 69
8875: ST_TO_ADDR
8876: GO 8943
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8878: LD_ADDR_VAR 0 2
8882: PUSH
8883: LD_INT 22
8885: PUSH
8886: LD_VAR 0 1
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PUSH
8895: LD_INT 2
8897: PUSH
8898: LD_INT 21
8900: PUSH
8901: LD_INT 1
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 33
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 33
8920: PUSH
8921: LD_INT 5
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PPUSH
8938: CALL_OW 69
8942: ST_TO_ADDR
8943: GO 9064
8945: LD_INT 1
8947: DOUBLE
8948: EQUAL
8949: IFTRUE 8953
8951: GO 8992
8953: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8954: LD_ADDR_VAR 0 2
8958: PUSH
8959: LD_INT 22
8961: PUSH
8962: LD_VAR 0 1
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 21
8973: PUSH
8974: LD_INT 1
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PPUSH
8985: CALL_OW 69
8989: ST_TO_ADDR
8990: GO 9064
8992: LD_INT 2
8994: DOUBLE
8995: EQUAL
8996: IFTRUE 9000
8998: GO 9063
9000: POP
// begin h = false ;
9001: LD_ADDR_VAR 0 4
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// for k in heroes [ i ] do
9009: LD_ADDR_VAR 0 3
9013: PUSH
9014: LD_EXP 49
9018: PUSH
9019: LD_VAR 0 1
9023: ARRAY
9024: PUSH
9025: FOR_IN
9026: IFFALSE 9049
// if IsLive ( k ) then
9028: LD_VAR 0 3
9032: PPUSH
9033: CALL_OW 300
9037: IFFALSE 9047
// h = true ;
9039: LD_ADDR_VAR 0 4
9043: PUSH
9044: LD_INT 1
9046: ST_TO_ADDR
9047: GO 9025
9049: POP
9050: POP
// Result := h ;
9051: LD_ADDR_VAR 0 2
9055: PUSH
9056: LD_VAR 0 4
9060: ST_TO_ADDR
// end ; end ;
9061: GO 9064
9063: POP
// end ;
9064: LD_VAR 0 2
9068: RET
// function AlliedSides ( i , j ) ; begin
9069: LD_INT 0
9071: PPUSH
// Result := false ;
9072: LD_ADDR_VAR 0 3
9076: PUSH
9077: LD_INT 0
9079: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9080: LD_VAR 0 1
9084: PPUSH
9085: LD_VAR 0 2
9089: PPUSH
9090: CALL_OW 81
9094: PUSH
9095: LD_INT 1
9097: EQUAL
9098: PUSH
9099: LD_VAR 0 2
9103: PPUSH
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 81
9113: PUSH
9114: LD_INT 1
9116: EQUAL
9117: AND
9118: PUSH
9119: LD_VAR 0 1
9123: PPUSH
9124: CALL_OW 83
9128: AND
9129: PUSH
9130: LD_VAR 0 2
9134: PPUSH
9135: CALL_OW 83
9139: AND
9140: IFFALSE 9150
// Result := true ;
9142: LD_ADDR_VAR 0 3
9146: PUSH
9147: LD_INT 1
9149: ST_TO_ADDR
// end ;
9150: LD_VAR 0 3
9154: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9155: CALL 8659 0 0
9159: PUSH
9160: LD_LOC 19
9164: NOT
9165: AND
9166: IFFALSE 9182
9168: GO 9170
9170: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9171: LD_ADDR_EXP 59
9175: PUSH
9176: LD_STRING #Player-Ended
9178: PUSH
9179: EMPTY
9180: LIST
9181: ST_TO_ADDR
9182: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9183: CALL 8659 0 0
9187: PUSH
9188: LD_LOC 19
9192: AND
9193: IFFALSE 9202
9195: GO 9197
9197: DISABLE
// YouLostInMultiplayer ;
9198: CALL_OW 107
9202: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9203: CALL 8659 0 0
9207: NOT
9208: PUSH
9209: CALL_OW 531
9213: NOT
9214: AND
9215: IFFALSE 9231
9217: GO 9219
9219: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9220: LD_ADDR_EXP 59
9224: PUSH
9225: LD_STRING #server-wait
9227: PUSH
9228: EMPTY
9229: LIST
9230: ST_TO_ADDR
9231: END
// every 100 trigger IAmSpec do
9232: CALL_OW 531
9236: IFFALSE 9252
9238: GO 9240
9240: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9241: LD_ADDR_EXP 59
9245: PUSH
9246: LD_STRING #Player-IAmSpec
9248: PUSH
9249: EMPTY
9250: LIST
9251: ST_TO_ADDR
9252: END
// every 100 trigger GameEnded and IAmSpec do
9253: LD_LOC 19
9257: PUSH
9258: CALL_OW 531
9262: AND
9263: IFFALSE 9272
9265: GO 9267
9267: DISABLE
// YouLostInMultiplayer ;
9268: CALL_OW 107
9272: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9273: CALL 8659 0 0
9277: PUSH
9278: LD_LOC 19
9282: NOT
9283: AND
9284: IFFALSE 9300
9286: GO 9288
9288: DISABLE
// WaitServerStrings = [ $player-win ] ;
9289: LD_ADDR_EXP 59
9293: PUSH
9294: LD_STRING $player-win
9296: PUSH
9297: EMPTY
9298: LIST
9299: ST_TO_ADDR
9300: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9301: CALL 8659 0 0
9305: PUSH
9306: LD_LOC 19
9310: AND
9311: IFFALSE 9335
9313: GO 9315
9315: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9316: LD_EXP 38
9320: PUSH
9321: LD_OWVAR 7
9325: ARRAY
9326: PPUSH
9327: CALL 8330 0 1
// YouWinInMultiplayer ;
9331: CALL_OW 106
// end ;
9335: END
// every 100 trigger isEditor marked 401 do
9336: LD_OWVAR 84
9340: IFFALSE 9356
9342: GO 9344
9344: DISABLE
// Debug_Strings = [ You won ] ;
9345: LD_ADDR_OWVAR 48
9349: PUSH
9350: LD_STRING You won
9352: PUSH
9353: EMPTY
9354: LIST
9355: ST_TO_ADDR
9356: END
// every 100 trigger isEditor marked 400 do
9357: LD_OWVAR 84
9361: IFFALSE 9377
9363: GO 9365
9365: DISABLE
// Debug_Strings = [ You loss ] ;
9366: LD_ADDR_OWVAR 48
9370: PUSH
9371: LD_STRING You loss
9373: PUSH
9374: EMPTY
9375: LIST
9376: ST_TO_ADDR
9377: END
// every 100 marked 98 do var i , un ;
9378: GO 9380
9380: DISABLE
9381: LD_INT 0
9383: PPUSH
9384: PPUSH
// begin for i = 1 to side_positions do
9385: LD_ADDR_VAR 0 1
9389: PUSH
9390: DOUBLE
9391: LD_INT 1
9393: DEC
9394: ST_TO_ADDR
9395: LD_EXP 37
9399: PUSH
9400: FOR_TO
9401: IFFALSE 9488
// begin if side_positions [ i ] then
9403: LD_EXP 37
9407: PUSH
9408: LD_VAR 0 1
9412: ARRAY
9413: IFFALSE 9486
// if not HasPower ( i ) and not defeated [ i ] then
9415: LD_VAR 0 1
9419: PPUSH
9420: CALL 8723 0 1
9424: NOT
9425: PUSH
9426: LD_LOC 18
9430: PUSH
9431: LD_VAR 0 1
9435: ARRAY
9436: NOT
9437: AND
9438: IFFALSE 9486
// begin defeated = replace ( defeated , i , true ) ;
9440: LD_ADDR_LOC 18
9444: PUSH
9445: LD_LOC 18
9449: PPUSH
9450: LD_VAR 0 1
9454: PPUSH
9455: LD_INT 1
9457: PPUSH
9458: CALL_OW 1
9462: ST_TO_ADDR
// if i = mp_player_side then
9463: LD_VAR 0 1
9467: PUSH
9468: LD_OWVAR 7
9472: EQUAL
9473: IFFALSE 9486
// begin Multiplayer_Loose_Message ;
9475: CALL_OW 521
// SetPlayerSpectator ( ) ;
9479: CALL_OW 572
// enable ( 400 ) ;
9483: LD_INT 400
9485: ENABLE_MARKED
// end ; end ; end ;
9486: GO 9400
9488: POP
9489: POP
// DidGameEnd ;
9490: CALL 9505 0 0
// if not GameEnded then
9494: LD_LOC 19
9498: NOT
9499: IFFALSE 9502
// enable ;
9501: ENABLE
// end ;
9502: PPOPN 2
9504: END
// function DidGameEnd ; var i , k , enemy ; begin
9505: LD_INT 0
9507: PPUSH
9508: PPUSH
9509: PPUSH
9510: PPUSH
// enemy = [ ] ;
9511: LD_ADDR_VAR 0 4
9515: PUSH
9516: EMPTY
9517: ST_TO_ADDR
// for i = 1 to side_positions do
9518: LD_ADDR_VAR 0 2
9522: PUSH
9523: DOUBLE
9524: LD_INT 1
9526: DEC
9527: ST_TO_ADDR
9528: LD_EXP 37
9532: PUSH
9533: FOR_TO
9534: IFFALSE 9628
// if not defeated [ i ] then
9536: LD_LOC 18
9540: PUSH
9541: LD_VAR 0 2
9545: ARRAY
9546: NOT
9547: IFFALSE 9626
// for k = 1 to side_positions do
9549: LD_ADDR_VAR 0 3
9553: PUSH
9554: DOUBLE
9555: LD_INT 1
9557: DEC
9558: ST_TO_ADDR
9559: LD_EXP 37
9563: PUSH
9564: FOR_TO
9565: IFFALSE 9624
// if not defeated [ k ] then
9567: LD_LOC 18
9571: PUSH
9572: LD_VAR 0 3
9576: ARRAY
9577: NOT
9578: IFFALSE 9622
// if not AlliedSides ( i , k ) then
9580: LD_VAR 0 2
9584: PPUSH
9585: LD_VAR 0 3
9589: PPUSH
9590: CALL 9069 0 2
9594: NOT
9595: IFFALSE 9622
// enemy = enemy ^ [ i , k ] ;
9597: LD_ADDR_VAR 0 4
9601: PUSH
9602: LD_VAR 0 4
9606: PUSH
9607: LD_VAR 0 2
9611: PUSH
9612: LD_VAR 0 3
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: ADD
9621: ST_TO_ADDR
9622: GO 9564
9624: POP
9625: POP
9626: GO 9533
9628: POP
9629: POP
// if not enemy then
9630: LD_VAR 0 4
9634: NOT
9635: IFFALSE 9661
// begin GameEnded = true ;
9637: LD_ADDR_LOC 19
9641: PUSH
9642: LD_INT 1
9644: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9645: LD_LOC 18
9649: PUSH
9650: LD_OWVAR 7
9654: ARRAY
9655: NOT
9656: IFFALSE 9661
// enable ( 401 ) ;
9658: LD_INT 401
9660: ENABLE_MARKED
// end ; end ;
9661: LD_VAR 0 1
9665: RET
// function unfog ; var k , friends ; begin
9666: LD_INT 0
9668: PPUSH
9669: PPUSH
9670: PPUSH
// for k = 1 to side_positions do
9671: LD_ADDR_VAR 0 2
9675: PUSH
9676: DOUBLE
9677: LD_INT 1
9679: DEC
9680: ST_TO_ADDR
9681: LD_EXP 37
9685: PUSH
9686: FOR_TO
9687: IFFALSE 9743
// if not defeated [ k ] then
9689: LD_LOC 18
9693: PUSH
9694: LD_VAR 0 2
9698: ARRAY
9699: NOT
9700: IFFALSE 9741
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9702: LD_OWVAR 7
9706: PPUSH
9707: LD_VAR 0 2
9711: PPUSH
9712: CALL_OW 81
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: IN
9723: IFFALSE 9741
// friends = friends ^ k ;
9725: LD_ADDR_VAR 0 3
9729: PUSH
9730: LD_VAR 0 3
9734: PUSH
9735: LD_VAR 0 2
9739: ADD
9740: ST_TO_ADDR
9741: GO 9686
9743: POP
9744: POP
// if not friends then
9745: LD_VAR 0 3
9749: NOT
9750: IFFALSE 9764
// begin SetPlayerSpectator ( ) ;
9752: CALL_OW 572
// unfoged = true ;
9756: LD_ADDR_LOC 20
9760: PUSH
9761: LD_INT 1
9763: ST_TO_ADDR
// end ; end ;
9764: LD_VAR 0 1
9768: RET
// export function MakeGameEnd ; begin
9769: LD_INT 0
9771: PPUSH
// SetPlayerSpectator ( ) ;
9772: CALL_OW 572
// unfoged = true ;
9776: LD_ADDR_LOC 20
9780: PUSH
9781: LD_INT 1
9783: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9784: LD_INT 175
9786: PPUSH
9787: CALL_OW 67
// GameEnded = true ;
9791: LD_ADDR_LOC 19
9795: PUSH
9796: LD_INT 1
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 1
9803: RET
// export function GetGameEnded ; begin
9804: LD_INT 0
9806: PPUSH
// result = GameEnded ;
9807: LD_ADDR_VAR 0 1
9811: PUSH
9812: LD_LOC 19
9816: ST_TO_ADDR
// end ; end_of_file
9817: LD_VAR 0 1
9821: RET
// var win ; export function init_kings_counting ; var i ; begin
9822: LD_INT 0
9824: PPUSH
9825: PPUSH
// mp_with_score := true ;
9826: LD_ADDR_OWVAR 14
9830: PUSH
9831: LD_INT 1
9833: ST_TO_ADDR
// ResetMultiScore ;
9834: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
9838: LD_EXP 45
9842: PPUSH
9843: LD_INT 1
9845: PPUSH
9846: CALL_OW 424
// enable ( 2 ) ;
9850: LD_INT 2
9852: ENABLE_MARKED
// end ;
9853: LD_VAR 0 1
9857: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
9858: LD_INT 0
9860: PPUSH
9861: PPUSH
9862: PPUSH
9863: PPUSH
9864: PPUSH
9865: PPUSH
9866: PPUSH
9867: PPUSH
9868: PPUSH
// vypis := [ ] ;
9869: LD_ADDR_VAR 0 3
9873: PUSH
9874: EMPTY
9875: ST_TO_ADDR
// red = 0 ;
9876: LD_ADDR_VAR 0 5
9880: PUSH
9881: LD_INT 0
9883: ST_TO_ADDR
// blue = 0 ;
9884: LD_ADDR_VAR 0 6
9888: PUSH
9889: LD_INT 0
9891: ST_TO_ADDR
// yel = 0 ;
9892: LD_ADDR_VAR 0 7
9896: PUSH
9897: LD_INT 0
9899: ST_TO_ADDR
// green = 0 ;
9900: LD_ADDR_VAR 0 8
9904: PUSH
9905: LD_INT 0
9907: ST_TO_ADDR
// if def_public_score or isSGUI then
9908: LD_EXP 14
9912: PUSH
9913: LD_OWVAR 83
9917: OR
9918: IFFALSE 10515
// if not Team_Game then
9920: LD_EXP 39
9924: NOT
9925: IFFALSE 10047
// begin for side = 1 to Side_Positions do
9927: LD_ADDR_VAR 0 2
9931: PUSH
9932: DOUBLE
9933: LD_INT 1
9935: DEC
9936: ST_TO_ADDR
9937: LD_EXP 37
9941: PUSH
9942: FOR_TO
9943: IFFALSE 10043
// if Side_Positions [ side ] then
9945: LD_EXP 37
9949: PUSH
9950: LD_VAR 0 2
9954: ARRAY
9955: IFFALSE 10041
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
9957: LD_ADDR_VAR 0 3
9961: PUSH
9962: LD_VAR 0 3
9966: PUSH
9967: LD_STRING #KingoftheHill-Public
9969: PUSH
9970: LD_VAR 0 2
9974: PUSH
9975: LD_VAR 0 2
9979: PUSH
9980: LD_VAR 0 2
9984: PUSH
9985: LD_INT 10
9987: PLUS
9988: PPUSH
9989: CALL_OW 110
9993: PUSH
9994: LD_INT 3
9996: DIV
9997: PUSH
9998: LD_EXP 46
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: ADD
10010: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
10011: LD_INT 2
10013: PPUSH
10014: LD_VAR 0 2
10018: PPUSH
10019: LD_VAR 0 2
10023: PUSH
10024: LD_INT 10
10026: PLUS
10027: PPUSH
10028: CALL_OW 110
10032: PUSH
10033: LD_INT 3
10035: DIV
10036: PPUSH
10037: CALL 17419 0 3
// end ;
10041: GO 9942
10043: POP
10044: POP
// end else
10045: GO 10513
// begin if Teams [ 1 ] then
10047: LD_EXP 35
10051: PUSH
10052: LD_INT 1
10054: ARRAY
10055: IFFALSE 10107
// for i in Teams [ 1 ] do
10057: LD_ADDR_VAR 0 4
10061: PUSH
10062: LD_EXP 35
10066: PUSH
10067: LD_INT 1
10069: ARRAY
10070: PUSH
10071: FOR_IN
10072: IFFALSE 10105
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
10074: LD_ADDR_VAR 0 5
10078: PUSH
10079: LD_VAR 0 5
10083: PUSH
10084: LD_VAR 0 4
10088: PUSH
10089: LD_INT 10
10091: PLUS
10092: PPUSH
10093: CALL_OW 110
10097: PUSH
10098: LD_INT 3
10100: DIV
10101: PLUS
10102: ST_TO_ADDR
10103: GO 10071
10105: POP
10106: POP
// if Teams [ 2 ] then
10107: LD_EXP 35
10111: PUSH
10112: LD_INT 2
10114: ARRAY
10115: IFFALSE 10167
// for i in Teams [ 2 ] do
10117: LD_ADDR_VAR 0 4
10121: PUSH
10122: LD_EXP 35
10126: PUSH
10127: LD_INT 2
10129: ARRAY
10130: PUSH
10131: FOR_IN
10132: IFFALSE 10165
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
10134: LD_ADDR_VAR 0 6
10138: PUSH
10139: LD_VAR 0 6
10143: PUSH
10144: LD_VAR 0 4
10148: PUSH
10149: LD_INT 10
10151: PLUS
10152: PPUSH
10153: CALL_OW 110
10157: PUSH
10158: LD_INT 3
10160: DIV
10161: PLUS
10162: ST_TO_ADDR
10163: GO 10131
10165: POP
10166: POP
// if Teams [ 3 ] then
10167: LD_EXP 35
10171: PUSH
10172: LD_INT 3
10174: ARRAY
10175: IFFALSE 10227
// for i in Teams [ 3 ] do
10177: LD_ADDR_VAR 0 4
10181: PUSH
10182: LD_EXP 35
10186: PUSH
10187: LD_INT 3
10189: ARRAY
10190: PUSH
10191: FOR_IN
10192: IFFALSE 10225
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
10194: LD_ADDR_VAR 0 7
10198: PUSH
10199: LD_VAR 0 7
10203: PUSH
10204: LD_VAR 0 4
10208: PUSH
10209: LD_INT 10
10211: PLUS
10212: PPUSH
10213: CALL_OW 110
10217: PUSH
10218: LD_INT 3
10220: DIV
10221: PLUS
10222: ST_TO_ADDR
10223: GO 10191
10225: POP
10226: POP
// if Teams [ 4 ] then
10227: LD_EXP 35
10231: PUSH
10232: LD_INT 4
10234: ARRAY
10235: IFFALSE 10287
// for i in Teams [ 4 ] do
10237: LD_ADDR_VAR 0 4
10241: PUSH
10242: LD_EXP 35
10246: PUSH
10247: LD_INT 4
10249: ARRAY
10250: PUSH
10251: FOR_IN
10252: IFFALSE 10285
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
10254: LD_ADDR_VAR 0 8
10258: PUSH
10259: LD_VAR 0 8
10263: PUSH
10264: LD_VAR 0 4
10268: PUSH
10269: LD_INT 10
10271: PLUS
10272: PPUSH
10273: CALL_OW 110
10277: PUSH
10278: LD_INT 3
10280: DIV
10281: PLUS
10282: ST_TO_ADDR
10283: GO 10251
10285: POP
10286: POP
// if Teams [ 1 ] then
10287: LD_EXP 35
10291: PUSH
10292: LD_INT 1
10294: ARRAY
10295: IFFALSE 10324
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
10297: LD_ADDR_VAR 0 3
10301: PUSH
10302: LD_STRING #KingoftheHill-Public-red
10304: PUSH
10305: LD_INT 3
10307: PUSH
10308: LD_VAR 0 5
10312: PUSH
10313: LD_EXP 46
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: ST_TO_ADDR
// if Teams [ 2 ] then
10324: LD_EXP 35
10328: PUSH
10329: LD_INT 2
10331: ARRAY
10332: IFFALSE 10367
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
10334: LD_ADDR_VAR 0 3
10338: PUSH
10339: LD_VAR 0 3
10343: PUSH
10344: LD_STRING #KingoftheHill-Public-blue
10346: PUSH
10347: LD_INT 1
10349: PUSH
10350: LD_VAR 0 6
10354: PUSH
10355: LD_EXP 46
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: ADD
10366: ST_TO_ADDR
// if Teams [ 3 ] then
10367: LD_EXP 35
10371: PUSH
10372: LD_INT 3
10374: ARRAY
10375: IFFALSE 10410
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
10377: LD_ADDR_VAR 0 3
10381: PUSH
10382: LD_VAR 0 3
10386: PUSH
10387: LD_STRING #KingoftheHill-Public-yell
10389: PUSH
10390: LD_INT 2
10392: PUSH
10393: LD_VAR 0 7
10397: PUSH
10398: LD_EXP 46
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: ADD
10409: ST_TO_ADDR
// if Teams [ 4 ] then
10410: LD_EXP 35
10414: PUSH
10415: LD_INT 4
10417: ARRAY
10418: IFFALSE 10453
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
10420: LD_ADDR_VAR 0 3
10424: PUSH
10425: LD_VAR 0 3
10429: PUSH
10430: LD_STRING #KingoftheHill-Public-green
10432: PUSH
10433: LD_INT 7
10435: PUSH
10436: LD_VAR 0 8
10440: PUSH
10441: LD_EXP 46
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: ADD
10452: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
10453: LD_INT 2
10455: PPUSH
10456: LD_INT 3
10458: PPUSH
10459: LD_VAR 0 5
10463: PPUSH
10464: CALL 17419 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
10468: LD_INT 2
10470: PPUSH
10471: LD_INT 1
10473: PPUSH
10474: LD_VAR 0 6
10478: PPUSH
10479: CALL 17419 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
10483: LD_INT 2
10485: PPUSH
10486: LD_INT 2
10488: PPUSH
10489: LD_VAR 0 7
10493: PPUSH
10494: CALL 17419 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
10498: LD_INT 2
10500: PPUSH
10501: LD_INT 7
10503: PPUSH
10504: LD_VAR 0 8
10508: PPUSH
10509: CALL 17419 0 3
// end else
10513: GO 10950
// if not Team_Game then
10515: LD_EXP 39
10519: NOT
10520: IFFALSE 10578
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
10522: LD_ADDR_VAR 0 3
10526: PUSH
10527: LD_VAR 0 3
10531: PUSH
10532: LD_STRING #KingoftheHill-Private
10534: PUSH
10535: LD_OWVAR 7
10539: PUSH
10540: LD_OWVAR 7
10544: PUSH
10545: LD_VAR 0 2
10549: PUSH
10550: LD_INT 10
10552: PLUS
10553: PPUSH
10554: CALL_OW 110
10558: PUSH
10559: LD_INT 3
10561: DIV
10562: PUSH
10563: LD_EXP 46
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: ADD
10575: ST_TO_ADDR
10576: GO 10950
// begin for i in Teams [ 1 ] do
10578: LD_ADDR_VAR 0 4
10582: PUSH
10583: LD_EXP 35
10587: PUSH
10588: LD_INT 1
10590: ARRAY
10591: PUSH
10592: FOR_IN
10593: IFFALSE 10626
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
10595: LD_ADDR_VAR 0 5
10599: PUSH
10600: LD_VAR 0 5
10604: PUSH
10605: LD_VAR 0 4
10609: PUSH
10610: LD_INT 10
10612: PLUS
10613: PPUSH
10614: CALL_OW 110
10618: PUSH
10619: LD_INT 3
10621: DIV
10622: PLUS
10623: ST_TO_ADDR
10624: GO 10592
10626: POP
10627: POP
// for i in Teams [ 2 ] do
10628: LD_ADDR_VAR 0 4
10632: PUSH
10633: LD_EXP 35
10637: PUSH
10638: LD_INT 2
10640: ARRAY
10641: PUSH
10642: FOR_IN
10643: IFFALSE 10676
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
10645: LD_ADDR_VAR 0 6
10649: PUSH
10650: LD_VAR 0 6
10654: PUSH
10655: LD_VAR 0 4
10659: PUSH
10660: LD_INT 10
10662: PLUS
10663: PPUSH
10664: CALL_OW 110
10668: PUSH
10669: LD_INT 3
10671: DIV
10672: PLUS
10673: ST_TO_ADDR
10674: GO 10642
10676: POP
10677: POP
// for i in Teams [ 3 ] do
10678: LD_ADDR_VAR 0 4
10682: PUSH
10683: LD_EXP 35
10687: PUSH
10688: LD_INT 3
10690: ARRAY
10691: PUSH
10692: FOR_IN
10693: IFFALSE 10726
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
10695: LD_ADDR_VAR 0 7
10699: PUSH
10700: LD_VAR 0 7
10704: PUSH
10705: LD_VAR 0 4
10709: PUSH
10710: LD_INT 10
10712: PLUS
10713: PPUSH
10714: CALL_OW 110
10718: PUSH
10719: LD_INT 3
10721: DIV
10722: PLUS
10723: ST_TO_ADDR
10724: GO 10692
10726: POP
10727: POP
// for i in Teams [ 4 ] do
10728: LD_ADDR_VAR 0 4
10732: PUSH
10733: LD_EXP 35
10737: PUSH
10738: LD_INT 4
10740: ARRAY
10741: PUSH
10742: FOR_IN
10743: IFFALSE 10776
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
10745: LD_ADDR_VAR 0 8
10749: PUSH
10750: LD_VAR 0 8
10754: PUSH
10755: LD_VAR 0 4
10759: PUSH
10760: LD_INT 10
10762: PLUS
10763: PPUSH
10764: CALL_OW 110
10768: PUSH
10769: LD_INT 3
10771: DIV
10772: PLUS
10773: ST_TO_ADDR
10774: GO 10742
10776: POP
10777: POP
// if mp_player_side in Teams [ 1 ] then
10778: LD_OWVAR 7
10782: PUSH
10783: LD_EXP 35
10787: PUSH
10788: LD_INT 1
10790: ARRAY
10791: IN
10792: IFFALSE 10821
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
10794: LD_ADDR_VAR 0 3
10798: PUSH
10799: LD_STRING #KingoftheHill-Public-red
10801: PUSH
10802: LD_INT 3
10804: PUSH
10805: LD_VAR 0 5
10809: PUSH
10810: LD_EXP 46
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
10821: LD_OWVAR 7
10825: PUSH
10826: LD_EXP 35
10830: PUSH
10831: LD_INT 2
10833: ARRAY
10834: IN
10835: IFFALSE 10864
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
10837: LD_ADDR_VAR 0 3
10841: PUSH
10842: LD_STRING #KingoftheHill-Public-blue
10844: PUSH
10845: LD_INT 1
10847: PUSH
10848: LD_VAR 0 6
10852: PUSH
10853: LD_EXP 46
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
10864: LD_OWVAR 7
10868: PUSH
10869: LD_EXP 35
10873: PUSH
10874: LD_INT 3
10876: ARRAY
10877: IN
10878: IFFALSE 10907
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
10880: LD_ADDR_VAR 0 3
10884: PUSH
10885: LD_STRING #KingoftheHill-Public-yell
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: LD_VAR 0 7
10895: PUSH
10896: LD_EXP 46
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
10907: LD_OWVAR 7
10911: PUSH
10912: LD_EXP 35
10916: PUSH
10917: LD_INT 4
10919: ARRAY
10920: IN
10921: IFFALSE 10950
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
10923: LD_ADDR_VAR 0 3
10927: PUSH
10928: LD_STRING #KingoftheHill-Public-green
10930: PUSH
10931: LD_INT 7
10933: PUSH
10934: LD_VAR 0 8
10938: PUSH
10939: LD_EXP 46
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: ST_TO_ADDR
// end ; Display_kings := vypis ;
10950: LD_ADDR_EXP 60
10954: PUSH
10955: LD_VAR 0 3
10959: ST_TO_ADDR
// end ;
10960: LD_VAR 0 1
10964: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
10965: LD_INT 0
10967: PPUSH
10968: PPUSH
10969: PPUSH
10970: PPUSH
10971: PPUSH
10972: PPUSH
10973: PPUSH
10974: PPUSH
10975: PPUSH
// side := [ ] ;
10976: LD_ADDR_VAR 0 2
10980: PUSH
10981: EMPTY
10982: ST_TO_ADDR
// red = 0 ;
10983: LD_ADDR_VAR 0 5
10987: PUSH
10988: LD_INT 0
10990: ST_TO_ADDR
// blue = 0 ;
10991: LD_ADDR_VAR 0 6
10995: PUSH
10996: LD_INT 0
10998: ST_TO_ADDR
// yel = 0 ;
10999: LD_ADDR_VAR 0 7
11003: PUSH
11004: LD_INT 0
11006: ST_TO_ADDR
// green = 0 ;
11007: LD_ADDR_VAR 0 8
11011: PUSH
11012: LD_INT 0
11014: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
11015: LD_ADDR_VAR 0 3
11019: PUSH
11020: LD_EXP 45
11024: PPUSH
11025: LD_INT 21
11027: PUSH
11028: LD_INT 3
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 53
11037: PUSH
11038: EMPTY
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PPUSH
11045: CALL_OW 70
11049: ST_TO_ADDR
// for un in list do
11050: LD_ADDR_VAR 0 4
11054: PUSH
11055: LD_VAR 0 3
11059: PUSH
11060: FOR_IN
11061: IFFALSE 11086
// side := side union GetSide ( un ) ;
11063: LD_ADDR_VAR 0 2
11067: PUSH
11068: LD_VAR 0 2
11072: PUSH
11073: LD_VAR 0 4
11077: PPUSH
11078: CALL_OW 255
11082: UNION
11083: ST_TO_ADDR
11084: GO 11060
11086: POP
11087: POP
// if side <> 1 then
11088: LD_VAR 0 2
11092: PUSH
11093: LD_INT 1
11095: NONEQUAL
11096: IFFALSE 11100
// exit ;
11098: GO 11463
// side := side [ 1 ] ;
11100: LD_ADDR_VAR 0 2
11104: PUSH
11105: LD_VAR 0 2
11109: PUSH
11110: LD_INT 1
11112: ARRAY
11113: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
11114: LD_VAR 0 2
11118: PUSH
11119: LD_INT 10
11121: PLUS
11122: PPUSH
11123: LD_VAR 0 2
11127: PUSH
11128: LD_INT 10
11130: PLUS
11131: PPUSH
11132: CALL_OW 110
11136: PUSH
11137: LD_INT 1
11139: PLUS
11140: PPUSH
11141: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
11145: LD_VAR 0 2
11149: PPUSH
11150: LD_VAR 0 2
11154: PUSH
11155: LD_INT 10
11157: PLUS
11158: PPUSH
11159: CALL_OW 110
11163: PUSH
11164: LD_INT 3
11166: DIV
11167: PPUSH
11168: LD_INT 2
11170: PPUSH
11171: CALL 8111 0 3
// if not Team_Game then
11175: LD_EXP 39
11179: NOT
11180: IFFALSE 11463
// if GetTag ( side + 10 ) >= final_count * 3 then
11182: LD_VAR 0 2
11186: PUSH
11187: LD_INT 10
11189: PLUS
11190: PPUSH
11191: CALL_OW 110
11195: PUSH
11196: LD_EXP 46
11200: PUSH
11201: LD_INT 3
11203: MUL
11204: GREATEREQUAL
11205: IFFALSE 11212
// enable ( 3 ) else
11207: LD_INT 3
11209: ENABLE_MARKED
11210: GO 11463
// begin for i in Teams [ 1 ] do
11212: LD_ADDR_VAR 0 9
11216: PUSH
11217: LD_EXP 35
11221: PUSH
11222: LD_INT 1
11224: ARRAY
11225: PUSH
11226: FOR_IN
11227: IFFALSE 11260
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
11229: LD_ADDR_VAR 0 5
11233: PUSH
11234: LD_VAR 0 5
11238: PUSH
11239: LD_VAR 0 9
11243: PUSH
11244: LD_INT 10
11246: PLUS
11247: PPUSH
11248: CALL_OW 110
11252: PUSH
11253: LD_INT 3
11255: DIV
11256: PLUS
11257: ST_TO_ADDR
11258: GO 11226
11260: POP
11261: POP
// for i in Teams [ 2 ] do
11262: LD_ADDR_VAR 0 9
11266: PUSH
11267: LD_EXP 35
11271: PUSH
11272: LD_INT 2
11274: ARRAY
11275: PUSH
11276: FOR_IN
11277: IFFALSE 11310
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
11279: LD_ADDR_VAR 0 6
11283: PUSH
11284: LD_VAR 0 6
11288: PUSH
11289: LD_VAR 0 9
11293: PUSH
11294: LD_INT 10
11296: PLUS
11297: PPUSH
11298: CALL_OW 110
11302: PUSH
11303: LD_INT 3
11305: DIV
11306: PLUS
11307: ST_TO_ADDR
11308: GO 11276
11310: POP
11311: POP
// for i in Teams [ 3 ] do
11312: LD_ADDR_VAR 0 9
11316: PUSH
11317: LD_EXP 35
11321: PUSH
11322: LD_INT 3
11324: ARRAY
11325: PUSH
11326: FOR_IN
11327: IFFALSE 11360
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
11329: LD_ADDR_VAR 0 7
11333: PUSH
11334: LD_VAR 0 7
11338: PUSH
11339: LD_VAR 0 9
11343: PUSH
11344: LD_INT 10
11346: PLUS
11347: PPUSH
11348: CALL_OW 110
11352: PUSH
11353: LD_INT 3
11355: DIV
11356: PLUS
11357: ST_TO_ADDR
11358: GO 11326
11360: POP
11361: POP
// for i in Teams [ 4 ] do
11362: LD_ADDR_VAR 0 9
11366: PUSH
11367: LD_EXP 35
11371: PUSH
11372: LD_INT 4
11374: ARRAY
11375: PUSH
11376: FOR_IN
11377: IFFALSE 11410
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
11379: LD_ADDR_VAR 0 8
11383: PUSH
11384: LD_VAR 0 8
11388: PUSH
11389: LD_VAR 0 9
11393: PUSH
11394: LD_INT 10
11396: PLUS
11397: PPUSH
11398: CALL_OW 110
11402: PUSH
11403: LD_INT 3
11405: DIV
11406: PLUS
11407: ST_TO_ADDR
11408: GO 11376
11410: POP
11411: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
11412: LD_VAR 0 5
11416: PUSH
11417: LD_EXP 46
11421: GREATEREQUAL
11422: PUSH
11423: LD_VAR 0 6
11427: PUSH
11428: LD_EXP 46
11432: GREATEREQUAL
11433: OR
11434: PUSH
11435: LD_VAR 0 7
11439: PUSH
11440: LD_EXP 46
11444: GREATEREQUAL
11445: OR
11446: PUSH
11447: LD_VAR 0 8
11451: PUSH
11452: LD_EXP 46
11456: GREATEREQUAL
11457: OR
11458: IFFALSE 11463
// enable ( 3 ) ;
11460: LD_INT 3
11462: ENABLE_MARKED
// end ; end ;
11463: LD_VAR 0 1
11467: RET
// every 0 0$1 marked 2 do
11468: GO 11470
11470: DISABLE
// begin count_king ;
11471: CALL 10965 0 0
// show_public_points ;
11475: CALL 9858 0 0
// enable ;
11479: ENABLE
// end ;
11480: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
11481: GO 11483
11483: DISABLE
11484: LD_INT 0
11486: PPUSH
11487: PPUSH
11488: PPUSH
11489: PPUSH
11490: PPUSH
11491: PPUSH
// begin win := [ ] ;
11492: LD_ADDR_LOC 22
11496: PUSH
11497: EMPTY
11498: ST_TO_ADDR
// red = 0 ;
11499: LD_ADDR_VAR 0 2
11503: PUSH
11504: LD_INT 0
11506: ST_TO_ADDR
// blue = 0 ;
11507: LD_ADDR_VAR 0 3
11511: PUSH
11512: LD_INT 0
11514: ST_TO_ADDR
// yel = 0 ;
11515: LD_ADDR_VAR 0 4
11519: PUSH
11520: LD_INT 0
11522: ST_TO_ADDR
// green = 0 ;
11523: LD_ADDR_VAR 0 5
11527: PUSH
11528: LD_INT 0
11530: ST_TO_ADDR
// if not Team_Game then
11531: LD_EXP 39
11535: NOT
11536: IFFALSE 11613
// begin for side = 1 to 8 do
11538: LD_ADDR_VAR 0 1
11542: PUSH
11543: DOUBLE
11544: LD_INT 1
11546: DEC
11547: ST_TO_ADDR
11548: LD_INT 8
11550: PUSH
11551: FOR_TO
11552: IFFALSE 11597
// if GetTag ( side + 10 ) >= final_count * 3 then
11554: LD_VAR 0 1
11558: PUSH
11559: LD_INT 10
11561: PLUS
11562: PPUSH
11563: CALL_OW 110
11567: PUSH
11568: LD_EXP 46
11572: PUSH
11573: LD_INT 3
11575: MUL
11576: GREATEREQUAL
11577: IFFALSE 11595
// win := win ^ side ;
11579: LD_ADDR_LOC 22
11583: PUSH
11584: LD_LOC 22
11588: PUSH
11589: LD_VAR 0 1
11593: ADD
11594: ST_TO_ADDR
11595: GO 11551
11597: POP
11598: POP
// if win then
11599: LD_LOC 22
11603: IFFALSE 11610
// enable ( 4 ) else
11605: LD_INT 4
11607: ENABLE_MARKED
11608: GO 11611
// enable ;
11610: ENABLE
// end else
11611: GO 11929
// begin for i in Teams [ 1 ] do
11613: LD_ADDR_VAR 0 6
11617: PUSH
11618: LD_EXP 35
11622: PUSH
11623: LD_INT 1
11625: ARRAY
11626: PUSH
11627: FOR_IN
11628: IFFALSE 11661
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
11630: LD_ADDR_VAR 0 2
11634: PUSH
11635: LD_VAR 0 2
11639: PUSH
11640: LD_VAR 0 6
11644: PUSH
11645: LD_INT 10
11647: PLUS
11648: PPUSH
11649: CALL_OW 110
11653: PUSH
11654: LD_INT 3
11656: DIV
11657: PLUS
11658: ST_TO_ADDR
11659: GO 11627
11661: POP
11662: POP
// for i in Teams [ 2 ] do
11663: LD_ADDR_VAR 0 6
11667: PUSH
11668: LD_EXP 35
11672: PUSH
11673: LD_INT 2
11675: ARRAY
11676: PUSH
11677: FOR_IN
11678: IFFALSE 11711
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
11680: LD_ADDR_VAR 0 3
11684: PUSH
11685: LD_VAR 0 3
11689: PUSH
11690: LD_VAR 0 6
11694: PUSH
11695: LD_INT 10
11697: PLUS
11698: PPUSH
11699: CALL_OW 110
11703: PUSH
11704: LD_INT 3
11706: DIV
11707: PLUS
11708: ST_TO_ADDR
11709: GO 11677
11711: POP
11712: POP
// for i in Teams [ 3 ] do
11713: LD_ADDR_VAR 0 6
11717: PUSH
11718: LD_EXP 35
11722: PUSH
11723: LD_INT 3
11725: ARRAY
11726: PUSH
11727: FOR_IN
11728: IFFALSE 11761
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
11730: LD_ADDR_VAR 0 4
11734: PUSH
11735: LD_VAR 0 4
11739: PUSH
11740: LD_VAR 0 6
11744: PUSH
11745: LD_INT 10
11747: PLUS
11748: PPUSH
11749: CALL_OW 110
11753: PUSH
11754: LD_INT 3
11756: DIV
11757: PLUS
11758: ST_TO_ADDR
11759: GO 11727
11761: POP
11762: POP
// for i in Teams [ 4 ] do
11763: LD_ADDR_VAR 0 6
11767: PUSH
11768: LD_EXP 35
11772: PUSH
11773: LD_INT 4
11775: ARRAY
11776: PUSH
11777: FOR_IN
11778: IFFALSE 11811
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
11780: LD_ADDR_VAR 0 5
11784: PUSH
11785: LD_VAR 0 5
11789: PUSH
11790: LD_VAR 0 6
11794: PUSH
11795: LD_INT 10
11797: PLUS
11798: PPUSH
11799: CALL_OW 110
11803: PUSH
11804: LD_INT 3
11806: DIV
11807: PLUS
11808: ST_TO_ADDR
11809: GO 11777
11811: POP
11812: POP
// if red >= final_count then
11813: LD_VAR 0 2
11817: PUSH
11818: LD_EXP 46
11822: GREATEREQUAL
11823: IFFALSE 11839
// win = teams [ 1 ] ;
11825: LD_ADDR_LOC 22
11829: PUSH
11830: LD_EXP 35
11834: PUSH
11835: LD_INT 1
11837: ARRAY
11838: ST_TO_ADDR
// if blue >= final_count then
11839: LD_VAR 0 3
11843: PUSH
11844: LD_EXP 46
11848: GREATEREQUAL
11849: IFFALSE 11865
// win = teams [ 2 ] ;
11851: LD_ADDR_LOC 22
11855: PUSH
11856: LD_EXP 35
11860: PUSH
11861: LD_INT 2
11863: ARRAY
11864: ST_TO_ADDR
// if yel >= final_count then
11865: LD_VAR 0 4
11869: PUSH
11870: LD_EXP 46
11874: GREATEREQUAL
11875: IFFALSE 11891
// win = teams [ 3 ] ;
11877: LD_ADDR_LOC 22
11881: PUSH
11882: LD_EXP 35
11886: PUSH
11887: LD_INT 3
11889: ARRAY
11890: ST_TO_ADDR
// if green >= final_count then
11891: LD_VAR 0 5
11895: PUSH
11896: LD_EXP 46
11900: GREATEREQUAL
11901: IFFALSE 11917
// win = teams [ 4 ] ;
11903: LD_ADDR_LOC 22
11907: PUSH
11908: LD_EXP 35
11912: PUSH
11913: LD_INT 4
11915: ARRAY
11916: ST_TO_ADDR
// if win then
11917: LD_LOC 22
11921: IFFALSE 11928
// enable ( 4 ) else
11923: LD_INT 4
11925: ENABLE_MARKED
11926: GO 11929
// enable ;
11928: ENABLE
// end ; end ;
11929: PPOPN 6
11931: END
// every 0 0$1 marked 4 do
11932: GO 11934
11934: DISABLE
// begin if Player_Side in win then
11935: LD_EXP 47
11939: PUSH
11940: LD_LOC 22
11944: IN
11945: IFFALSE 11961
// begin wait ( 0 0$2 ) ;
11947: LD_INT 70
11949: PPUSH
11950: CALL_OW 67
// enable ( 401 ) ;
11954: LD_INT 401
11956: ENABLE_MARKED
// exit ;
11957: GO 11977
// end else
11959: GO 11977
// begin wait ( 0 0$2 ) ;
11961: LD_INT 70
11963: PPUSH
11964: CALL_OW 67
// Multiplayer_Loose_Message ;
11968: CALL_OW 521
// enable ( 400 ) ;
11972: LD_INT 400
11974: ENABLE_MARKED
// exit ;
11975: GO 11977
// end ; end ; end_of_file
11977: END
// export function SetMpTechs ( ) ; var side , i ; begin
11978: LD_INT 0
11980: PPUSH
11981: PPUSH
11982: PPUSH
// for side = 1 to 8 do
11983: LD_ADDR_VAR 0 2
11987: PUSH
11988: DOUBLE
11989: LD_INT 1
11991: DEC
11992: ST_TO_ADDR
11993: LD_INT 8
11995: PUSH
11996: FOR_TO
11997: IFFALSE 12118
// begin for i = 1 to 72 do
11999: LD_ADDR_VAR 0 3
12003: PUSH
12004: DOUBLE
12005: LD_INT 1
12007: DEC
12008: ST_TO_ADDR
12009: LD_INT 72
12011: PUSH
12012: FOR_TO
12013: IFFALSE 12044
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12015: LD_VAR 0 3
12019: PPUSH
12020: LD_VAR 0 2
12024: PPUSH
12025: LD_INT 0
12027: PPUSH
12028: LD_VAR 0 3
12032: PPUSH
12033: CALL_OW 565
12037: PPUSH
12038: CALL_OW 322
12042: GO 12012
12044: POP
12045: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12046: LD_INT 73
12048: PPUSH
12049: LD_VAR 0 2
12053: PPUSH
12054: LD_INT 0
12056: PPUSH
12057: LD_INT 25
12059: PPUSH
12060: CALL_OW 565
12064: PPUSH
12065: CALL_OW 322
// for i = 0 to 40 do
12069: LD_ADDR_VAR 0 3
12073: PUSH
12074: DOUBLE
12075: LD_INT 0
12077: DEC
12078: ST_TO_ADDR
12079: LD_INT 40
12081: PUSH
12082: FOR_TO
12083: IFFALSE 12114
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12085: LD_VAR 0 3
12089: PPUSH
12090: LD_VAR 0 2
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: LD_VAR 0 3
12102: PPUSH
12103: CALL_OW 565
12107: PPUSH
12108: CALL_OW 324
12112: GO 12082
12114: POP
12115: POP
// end ;
12116: GO 11996
12118: POP
12119: POP
// end ;
12120: LD_VAR 0 1
12124: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12125: LD_INT 0
12127: PPUSH
12128: PPUSH
12129: PPUSH
// for side = 1 to 8 do
12130: LD_ADDR_VAR 0 3
12134: PUSH
12135: DOUBLE
12136: LD_INT 1
12138: DEC
12139: ST_TO_ADDR
12140: LD_INT 8
12142: PUSH
12143: FOR_TO
12144: IFFALSE 16140
// begin for i = 1 to 73 do
12146: LD_ADDR_VAR 0 4
12150: PUSH
12151: DOUBLE
12152: LD_INT 1
12154: DEC
12155: ST_TO_ADDR
12156: LD_INT 73
12158: PUSH
12159: FOR_TO
12160: IFFALSE 12181
// SetTech ( i , side , state_disabled ) ;
12162: LD_VAR 0 4
12166: PPUSH
12167: LD_VAR 0 3
12171: PPUSH
12172: LD_INT 0
12174: PPUSH
12175: CALL_OW 322
12179: GO 12159
12181: POP
12182: POP
// for i = 0 to 40 do
12183: LD_ADDR_VAR 0 4
12187: PUSH
12188: DOUBLE
12189: LD_INT 0
12191: DEC
12192: ST_TO_ADDR
12193: LD_INT 40
12195: PUSH
12196: FOR_TO
12197: IFFALSE 12218
// SetRestrict ( i , side , false ) ;
12199: LD_VAR 0 4
12203: PPUSH
12204: LD_VAR 0 3
12208: PPUSH
12209: LD_INT 0
12211: PPUSH
12212: CALL_OW 324
12216: GO 12196
12218: POP
12219: POP
// case level of 1 :
12220: LD_VAR 0 1
12224: PUSH
12225: LD_INT 1
12227: DOUBLE
12228: EQUAL
12229: IFTRUE 12233
12231: GO 12386
12233: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12234: LD_INT 35
12236: PPUSH
12237: LD_VAR 0 3
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12249: LD_INT 45
12251: PPUSH
12252: LD_VAR 0 3
12256: PPUSH
12257: LD_INT 1
12259: PPUSH
12260: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12264: LD_INT 46
12266: PPUSH
12267: LD_VAR 0 3
12271: PPUSH
12272: LD_INT 1
12274: PPUSH
12275: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12279: LD_INT 47
12281: PPUSH
12282: LD_VAR 0 3
12286: PPUSH
12287: LD_INT 1
12289: PPUSH
12290: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12294: LD_INT 0
12296: PPUSH
12297: LD_VAR 0 3
12301: PPUSH
12302: LD_INT 1
12304: PPUSH
12305: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12309: LD_INT 2
12311: PPUSH
12312: LD_VAR 0 3
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12324: LD_INT 4
12326: PPUSH
12327: LD_VAR 0 3
12331: PPUSH
12332: LD_INT 1
12334: PPUSH
12335: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12339: LD_INT 6
12341: PPUSH
12342: LD_VAR 0 3
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12354: LD_INT 29
12356: PPUSH
12357: LD_VAR 0 3
12361: PPUSH
12362: LD_INT 1
12364: PPUSH
12365: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12369: LD_INT 31
12371: PPUSH
12372: LD_VAR 0 3
12376: PPUSH
12377: LD_INT 1
12379: PPUSH
12380: CALL_OW 324
// end ; 2 :
12384: GO 16138
12386: LD_INT 2
12388: DOUBLE
12389: EQUAL
12390: IFTRUE 12394
12392: GO 12592
12394: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12395: LD_INT 35
12397: PPUSH
12398: LD_VAR 0 3
12402: PPUSH
12403: LD_INT 1
12405: PPUSH
12406: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12410: LD_INT 45
12412: PPUSH
12413: LD_VAR 0 3
12417: PPUSH
12418: LD_INT 1
12420: PPUSH
12421: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12425: LD_INT 46
12427: PPUSH
12428: LD_VAR 0 3
12432: PPUSH
12433: LD_INT 1
12435: PPUSH
12436: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12440: LD_INT 47
12442: PPUSH
12443: LD_VAR 0 3
12447: PPUSH
12448: LD_INT 1
12450: PPUSH
12451: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12455: LD_INT 1
12457: PPUSH
12458: LD_VAR 0 3
12462: PPUSH
12463: LD_INT 1
12465: PPUSH
12466: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12470: LD_INT 2
12472: PPUSH
12473: LD_VAR 0 3
12477: PPUSH
12478: LD_INT 1
12480: PPUSH
12481: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12485: LD_INT 11
12487: PPUSH
12488: LD_VAR 0 3
12492: PPUSH
12493: LD_INT 1
12495: PPUSH
12496: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12500: LD_INT 0
12502: PPUSH
12503: LD_VAR 0 3
12507: PPUSH
12508: LD_INT 1
12510: PPUSH
12511: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12515: LD_INT 2
12517: PPUSH
12518: LD_VAR 0 3
12522: PPUSH
12523: LD_INT 1
12525: PPUSH
12526: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12530: LD_INT 4
12532: PPUSH
12533: LD_VAR 0 3
12537: PPUSH
12538: LD_INT 1
12540: PPUSH
12541: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12545: LD_INT 6
12547: PPUSH
12548: LD_VAR 0 3
12552: PPUSH
12553: LD_INT 1
12555: PPUSH
12556: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12560: LD_INT 29
12562: PPUSH
12563: LD_VAR 0 3
12567: PPUSH
12568: LD_INT 1
12570: PPUSH
12571: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12575: LD_INT 31
12577: PPUSH
12578: LD_VAR 0 3
12582: PPUSH
12583: LD_INT 1
12585: PPUSH
12586: CALL_OW 324
// end ; 3 :
12590: GO 16138
12592: LD_INT 3
12594: DOUBLE
12595: EQUAL
12596: IFTRUE 12600
12598: GO 13053
12600: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12601: LD_INT 35
12603: PPUSH
12604: LD_VAR 0 3
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12616: LD_INT 45
12618: PPUSH
12619: LD_VAR 0 3
12623: PPUSH
12624: LD_INT 1
12626: PPUSH
12627: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12631: LD_INT 46
12633: PPUSH
12634: LD_VAR 0 3
12638: PPUSH
12639: LD_INT 1
12641: PPUSH
12642: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12646: LD_INT 47
12648: PPUSH
12649: LD_VAR 0 3
12653: PPUSH
12654: LD_INT 1
12656: PPUSH
12657: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12661: LD_INT 1
12663: PPUSH
12664: LD_VAR 0 3
12668: PPUSH
12669: LD_INT 1
12671: PPUSH
12672: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12676: LD_INT 2
12678: PPUSH
12679: LD_VAR 0 3
12683: PPUSH
12684: LD_INT 1
12686: PPUSH
12687: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12691: LD_INT 11
12693: PPUSH
12694: LD_VAR 0 3
12698: PPUSH
12699: LD_INT 1
12701: PPUSH
12702: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12706: LD_INT 48
12708: PPUSH
12709: LD_VAR 0 3
12713: PPUSH
12714: LD_INT 1
12716: PPUSH
12717: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12721: LD_INT 69
12723: PPUSH
12724: LD_VAR 0 3
12728: PPUSH
12729: LD_INT 1
12731: PPUSH
12732: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12736: LD_INT 39
12738: PPUSH
12739: LD_VAR 0 3
12743: PPUSH
12744: LD_INT 1
12746: PPUSH
12747: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12751: LD_INT 43
12753: PPUSH
12754: LD_VAR 0 3
12758: PPUSH
12759: LD_INT 1
12761: PPUSH
12762: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12766: LD_INT 51
12768: PPUSH
12769: LD_VAR 0 3
12773: PPUSH
12774: LD_INT 1
12776: PPUSH
12777: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12781: LD_INT 6
12783: PPUSH
12784: LD_VAR 0 3
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12796: LD_INT 0
12798: PPUSH
12799: LD_VAR 0 3
12803: PPUSH
12804: LD_INT 1
12806: PPUSH
12807: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12811: LD_INT 2
12813: PPUSH
12814: LD_VAR 0 3
12818: PPUSH
12819: LD_INT 1
12821: PPUSH
12822: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12826: LD_INT 3
12828: PPUSH
12829: LD_VAR 0 3
12833: PPUSH
12834: LD_INT 1
12836: PPUSH
12837: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12841: LD_INT 4
12843: PPUSH
12844: LD_VAR 0 3
12848: PPUSH
12849: LD_INT 1
12851: PPUSH
12852: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12856: LD_INT 6
12858: PPUSH
12859: LD_VAR 0 3
12863: PPUSH
12864: LD_INT 1
12866: PPUSH
12867: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12871: LD_INT 7
12873: PPUSH
12874: LD_VAR 0 3
12878: PPUSH
12879: LD_INT 1
12881: PPUSH
12882: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12886: LD_INT 8
12888: PPUSH
12889: LD_VAR 0 3
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12901: LD_INT 10
12903: PPUSH
12904: LD_VAR 0 3
12908: PPUSH
12909: LD_INT 1
12911: PPUSH
12912: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12916: LD_INT 15
12918: PPUSH
12919: LD_VAR 0 3
12923: PPUSH
12924: LD_INT 1
12926: PPUSH
12927: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12931: LD_INT 16
12933: PPUSH
12934: LD_VAR 0 3
12938: PPUSH
12939: LD_INT 1
12941: PPUSH
12942: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12946: LD_INT 17
12948: PPUSH
12949: LD_VAR 0 3
12953: PPUSH
12954: LD_INT 1
12956: PPUSH
12957: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12961: LD_INT 20
12963: PPUSH
12964: LD_VAR 0 3
12968: PPUSH
12969: LD_INT 1
12971: PPUSH
12972: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12976: LD_INT 26
12978: PPUSH
12979: LD_VAR 0 3
12983: PPUSH
12984: LD_INT 1
12986: PPUSH
12987: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12991: LD_INT 27
12993: PPUSH
12994: LD_VAR 0 3
12998: PPUSH
12999: LD_INT 1
13001: PPUSH
13002: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13006: LD_INT 29
13008: PPUSH
13009: LD_VAR 0 3
13013: PPUSH
13014: LD_INT 1
13016: PPUSH
13017: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13021: LD_INT 31
13023: PPUSH
13024: LD_VAR 0 3
13028: PPUSH
13029: LD_INT 1
13031: PPUSH
13032: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13036: LD_INT 32
13038: PPUSH
13039: LD_VAR 0 3
13043: PPUSH
13044: LD_INT 1
13046: PPUSH
13047: CALL_OW 324
// end ; 4 :
13051: GO 16138
13053: LD_INT 4
13055: DOUBLE
13056: EQUAL
13057: IFTRUE 13061
13059: GO 14009
13061: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13062: LD_INT 35
13064: PPUSH
13065: LD_VAR 0 3
13069: PPUSH
13070: LD_INT 1
13072: PPUSH
13073: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13077: LD_INT 45
13079: PPUSH
13080: LD_VAR 0 3
13084: PPUSH
13085: LD_INT 1
13087: PPUSH
13088: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13092: LD_INT 46
13094: PPUSH
13095: LD_VAR 0 3
13099: PPUSH
13100: LD_INT 1
13102: PPUSH
13103: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13107: LD_INT 47
13109: PPUSH
13110: LD_VAR 0 3
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13122: LD_INT 1
13124: PPUSH
13125: LD_VAR 0 3
13129: PPUSH
13130: LD_INT 1
13132: PPUSH
13133: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13137: LD_INT 2
13139: PPUSH
13140: LD_VAR 0 3
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13152: LD_INT 11
13154: PPUSH
13155: LD_VAR 0 3
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13167: LD_INT 20
13169: PPUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13182: LD_INT 48
13184: PPUSH
13185: LD_VAR 0 3
13189: PPUSH
13190: LD_INT 1
13192: PPUSH
13193: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13197: LD_INT 49
13199: PPUSH
13200: LD_VAR 0 3
13204: PPUSH
13205: LD_INT 1
13207: PPUSH
13208: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13212: LD_INT 69
13214: PPUSH
13215: LD_VAR 0 3
13219: PPUSH
13220: LD_INT 1
13222: PPUSH
13223: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13227: LD_INT 39
13229: PPUSH
13230: LD_VAR 0 3
13234: PPUSH
13235: LD_INT 1
13237: PPUSH
13238: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13242: LD_INT 34
13244: PPUSH
13245: LD_VAR 0 3
13249: PPUSH
13250: LD_INT 1
13252: PPUSH
13253: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13257: LD_INT 42
13259: PPUSH
13260: LD_VAR 0 3
13264: PPUSH
13265: LD_INT 1
13267: PPUSH
13268: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13272: LD_INT 44
13274: PPUSH
13275: LD_VAR 0 3
13279: PPUSH
13280: LD_INT 1
13282: PPUSH
13283: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13287: LD_INT 41
13289: PPUSH
13290: LD_VAR 0 3
13294: PPUSH
13295: LD_INT 1
13297: PPUSH
13298: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13302: LD_INT 43
13304: PPUSH
13305: LD_VAR 0 3
13309: PPUSH
13310: LD_INT 1
13312: PPUSH
13313: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13317: LD_INT 70
13319: PPUSH
13320: LD_VAR 0 3
13324: PPUSH
13325: LD_INT 1
13327: PPUSH
13328: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13332: LD_INT 51
13334: PPUSH
13335: LD_VAR 0 3
13339: PPUSH
13340: LD_INT 1
13342: PPUSH
13343: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13347: LD_INT 52
13349: PPUSH
13350: LD_VAR 0 3
13354: PPUSH
13355: LD_INT 1
13357: PPUSH
13358: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13362: LD_INT 6
13364: PPUSH
13365: LD_VAR 0 3
13369: PPUSH
13370: LD_INT 1
13372: PPUSH
13373: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13377: LD_INT 15
13379: PPUSH
13380: LD_VAR 0 3
13384: PPUSH
13385: LD_INT 1
13387: PPUSH
13388: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13392: LD_INT 7
13394: PPUSH
13395: LD_VAR 0 3
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13407: LD_INT 12
13409: PPUSH
13410: LD_VAR 0 3
13414: PPUSH
13415: LD_INT 1
13417: PPUSH
13418: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13422: LD_INT 18
13424: PPUSH
13425: LD_VAR 0 3
13429: PPUSH
13430: LD_INT 1
13432: PPUSH
13433: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13437: LD_INT 60
13439: PPUSH
13440: LD_VAR 0 3
13444: PPUSH
13445: LD_INT 1
13447: PPUSH
13448: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13452: LD_INT 9
13454: PPUSH
13455: LD_VAR 0 3
13459: PPUSH
13460: LD_INT 1
13462: PPUSH
13463: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13467: LD_INT 30
13469: PPUSH
13470: LD_VAR 0 3
13474: PPUSH
13475: LD_INT 1
13477: PPUSH
13478: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13482: LD_INT 37
13484: PPUSH
13485: LD_VAR 0 3
13489: PPUSH
13490: LD_INT 1
13492: PPUSH
13493: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13497: LD_INT 5
13499: PPUSH
13500: LD_VAR 0 3
13504: PPUSH
13505: LD_INT 1
13507: PPUSH
13508: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13512: LD_INT 66
13514: PPUSH
13515: LD_VAR 0 3
13519: PPUSH
13520: LD_INT 1
13522: PPUSH
13523: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13527: LD_INT 21
13529: PPUSH
13530: LD_VAR 0 3
13534: PPUSH
13535: LD_INT 1
13537: PPUSH
13538: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13542: LD_INT 22
13544: PPUSH
13545: LD_VAR 0 3
13549: PPUSH
13550: LD_INT 1
13552: PPUSH
13553: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13557: LD_INT 54
13559: PPUSH
13560: LD_VAR 0 3
13564: PPUSH
13565: LD_INT 1
13567: PPUSH
13568: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13572: LD_INT 0
13574: PPUSH
13575: LD_VAR 0 3
13579: PPUSH
13580: LD_INT 1
13582: PPUSH
13583: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13587: LD_INT 1
13589: PPUSH
13590: LD_VAR 0 3
13594: PPUSH
13595: LD_INT 1
13597: PPUSH
13598: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13602: LD_INT 2
13604: PPUSH
13605: LD_VAR 0 3
13609: PPUSH
13610: LD_INT 1
13612: PPUSH
13613: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13617: LD_INT 3
13619: PPUSH
13620: LD_VAR 0 3
13624: PPUSH
13625: LD_INT 1
13627: PPUSH
13628: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13632: LD_INT 4
13634: PPUSH
13635: LD_VAR 0 3
13639: PPUSH
13640: LD_INT 1
13642: PPUSH
13643: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13647: LD_INT 5
13649: PPUSH
13650: LD_VAR 0 3
13654: PPUSH
13655: LD_INT 1
13657: PPUSH
13658: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13662: LD_INT 6
13664: PPUSH
13665: LD_VAR 0 3
13669: PPUSH
13670: LD_INT 1
13672: PPUSH
13673: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13677: LD_INT 7
13679: PPUSH
13680: LD_VAR 0 3
13684: PPUSH
13685: LD_INT 1
13687: PPUSH
13688: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13692: LD_INT 8
13694: PPUSH
13695: LD_VAR 0 3
13699: PPUSH
13700: LD_INT 1
13702: PPUSH
13703: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13707: LD_INT 10
13709: PPUSH
13710: LD_VAR 0 3
13714: PPUSH
13715: LD_INT 1
13717: PPUSH
13718: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13722: LD_INT 11
13724: PPUSH
13725: LD_VAR 0 3
13729: PPUSH
13730: LD_INT 1
13732: PPUSH
13733: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13737: LD_INT 12
13739: PPUSH
13740: LD_VAR 0 3
13744: PPUSH
13745: LD_INT 1
13747: PPUSH
13748: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13752: LD_INT 13
13754: PPUSH
13755: LD_VAR 0 3
13759: PPUSH
13760: LD_INT 1
13762: PPUSH
13763: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13767: LD_INT 14
13769: PPUSH
13770: LD_VAR 0 3
13774: PPUSH
13775: LD_INT 1
13777: PPUSH
13778: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13782: LD_INT 15
13784: PPUSH
13785: LD_VAR 0 3
13789: PPUSH
13790: LD_INT 1
13792: PPUSH
13793: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13797: LD_INT 16
13799: PPUSH
13800: LD_VAR 0 3
13804: PPUSH
13805: LD_INT 1
13807: PPUSH
13808: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13812: LD_INT 17
13814: PPUSH
13815: LD_VAR 0 3
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13827: LD_INT 19
13829: PPUSH
13830: LD_VAR 0 3
13834: PPUSH
13835: LD_INT 1
13837: PPUSH
13838: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13842: LD_INT 20
13844: PPUSH
13845: LD_VAR 0 3
13849: PPUSH
13850: LD_INT 1
13852: PPUSH
13853: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13857: LD_INT 21
13859: PPUSH
13860: LD_VAR 0 3
13864: PPUSH
13865: LD_INT 1
13867: PPUSH
13868: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13872: LD_INT 23
13874: PPUSH
13875: LD_VAR 0 3
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13887: LD_INT 26
13889: PPUSH
13890: LD_VAR 0 3
13894: PPUSH
13895: LD_INT 1
13897: PPUSH
13898: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13902: LD_INT 27
13904: PPUSH
13905: LD_VAR 0 3
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13917: LD_INT 28
13919: PPUSH
13920: LD_VAR 0 3
13924: PPUSH
13925: LD_INT 1
13927: PPUSH
13928: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13932: LD_INT 29
13934: PPUSH
13935: LD_VAR 0 3
13939: PPUSH
13940: LD_INT 1
13942: PPUSH
13943: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13947: LD_INT 30
13949: PPUSH
13950: LD_VAR 0 3
13954: PPUSH
13955: LD_INT 1
13957: PPUSH
13958: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13962: LD_INT 31
13964: PPUSH
13965: LD_VAR 0 3
13969: PPUSH
13970: LD_INT 1
13972: PPUSH
13973: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13977: LD_INT 32
13979: PPUSH
13980: LD_VAR 0 3
13984: PPUSH
13985: LD_INT 1
13987: PPUSH
13988: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13992: LD_INT 36
13994: PPUSH
13995: LD_VAR 0 3
13999: PPUSH
14000: LD_INT 1
14002: PPUSH
14003: CALL_OW 324
// end ; 5 :
14007: GO 16138
14009: LD_INT 5
14011: DOUBLE
14012: EQUAL
14013: IFTRUE 14017
14015: GO 15130
14017: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14018: LD_INT 35
14020: PPUSH
14021: LD_VAR 0 3
14025: PPUSH
14026: LD_INT 1
14028: PPUSH
14029: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14033: LD_INT 45
14035: PPUSH
14036: LD_VAR 0 3
14040: PPUSH
14041: LD_INT 1
14043: PPUSH
14044: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14048: LD_INT 46
14050: PPUSH
14051: LD_VAR 0 3
14055: PPUSH
14056: LD_INT 1
14058: PPUSH
14059: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14063: LD_INT 47
14065: PPUSH
14066: LD_VAR 0 3
14070: PPUSH
14071: LD_INT 1
14073: PPUSH
14074: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14078: LD_INT 1
14080: PPUSH
14081: LD_VAR 0 3
14085: PPUSH
14086: LD_INT 1
14088: PPUSH
14089: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14093: LD_INT 2
14095: PPUSH
14096: LD_VAR 0 3
14100: PPUSH
14101: LD_INT 1
14103: PPUSH
14104: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14108: LD_INT 11
14110: PPUSH
14111: LD_VAR 0 3
14115: PPUSH
14116: LD_INT 1
14118: PPUSH
14119: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14123: LD_INT 20
14125: PPUSH
14126: LD_VAR 0 3
14130: PPUSH
14131: LD_INT 1
14133: PPUSH
14134: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14138: LD_INT 48
14140: PPUSH
14141: LD_VAR 0 3
14145: PPUSH
14146: LD_INT 1
14148: PPUSH
14149: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14153: LD_INT 49
14155: PPUSH
14156: LD_VAR 0 3
14160: PPUSH
14161: LD_INT 1
14163: PPUSH
14164: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14168: LD_INT 69
14170: PPUSH
14171: LD_VAR 0 3
14175: PPUSH
14176: LD_INT 1
14178: PPUSH
14179: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14183: LD_INT 39
14185: PPUSH
14186: LD_VAR 0 3
14190: PPUSH
14191: LD_INT 1
14193: PPUSH
14194: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14198: LD_INT 34
14200: PPUSH
14201: LD_VAR 0 3
14205: PPUSH
14206: LD_INT 1
14208: PPUSH
14209: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14213: LD_INT 42
14215: PPUSH
14216: LD_VAR 0 3
14220: PPUSH
14221: LD_INT 1
14223: PPUSH
14224: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14228: LD_INT 44
14230: PPUSH
14231: LD_VAR 0 3
14235: PPUSH
14236: LD_INT 1
14238: PPUSH
14239: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14243: LD_INT 41
14245: PPUSH
14246: LD_VAR 0 3
14250: PPUSH
14251: LD_INT 1
14253: PPUSH
14254: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14258: LD_INT 40
14260: PPUSH
14261: LD_VAR 0 3
14265: PPUSH
14266: LD_INT 1
14268: PPUSH
14269: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14273: LD_INT 43
14275: PPUSH
14276: LD_VAR 0 3
14280: PPUSH
14281: LD_INT 1
14283: PPUSH
14284: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14288: LD_INT 70
14290: PPUSH
14291: LD_VAR 0 3
14295: PPUSH
14296: LD_INT 1
14298: PPUSH
14299: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14303: LD_INT 51
14305: PPUSH
14306: LD_VAR 0 3
14310: PPUSH
14311: LD_INT 1
14313: PPUSH
14314: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14318: LD_INT 52
14320: PPUSH
14321: LD_VAR 0 3
14325: PPUSH
14326: LD_INT 1
14328: PPUSH
14329: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14333: LD_INT 6
14335: PPUSH
14336: LD_VAR 0 3
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14348: LD_INT 15
14350: PPUSH
14351: LD_VAR 0 3
14355: PPUSH
14356: LD_INT 1
14358: PPUSH
14359: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14363: LD_INT 7
14365: PPUSH
14366: LD_VAR 0 3
14370: PPUSH
14371: LD_INT 1
14373: PPUSH
14374: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14378: LD_INT 12
14380: PPUSH
14381: LD_VAR 0 3
14385: PPUSH
14386: LD_INT 1
14388: PPUSH
14389: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14393: LD_INT 17
14395: PPUSH
14396: LD_VAR 0 3
14400: PPUSH
14401: LD_INT 1
14403: PPUSH
14404: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14408: LD_INT 18
14410: PPUSH
14411: LD_VAR 0 3
14415: PPUSH
14416: LD_INT 1
14418: PPUSH
14419: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14423: LD_INT 60
14425: PPUSH
14426: LD_VAR 0 3
14430: PPUSH
14431: LD_INT 1
14433: PPUSH
14434: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14438: LD_INT 32
14440: PPUSH
14441: LD_VAR 0 3
14445: PPUSH
14446: LD_INT 1
14448: PPUSH
14449: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14453: LD_INT 9
14455: PPUSH
14456: LD_VAR 0 3
14460: PPUSH
14461: LD_INT 1
14463: PPUSH
14464: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14468: LD_INT 57
14470: PPUSH
14471: LD_VAR 0 3
14475: PPUSH
14476: LD_INT 1
14478: PPUSH
14479: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14483: LD_INT 30
14485: PPUSH
14486: LD_VAR 0 3
14490: PPUSH
14491: LD_INT 1
14493: PPUSH
14494: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14498: LD_INT 37
14500: PPUSH
14501: LD_VAR 0 3
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14513: LD_INT 63
14515: PPUSH
14516: LD_VAR 0 3
14520: PPUSH
14521: LD_INT 1
14523: PPUSH
14524: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14528: LD_INT 3
14530: PPUSH
14531: LD_VAR 0 3
14535: PPUSH
14536: LD_INT 1
14538: PPUSH
14539: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14543: LD_INT 4
14545: PPUSH
14546: LD_VAR 0 3
14550: PPUSH
14551: LD_INT 1
14553: PPUSH
14554: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14558: LD_INT 5
14560: PPUSH
14561: LD_VAR 0 3
14565: PPUSH
14566: LD_INT 1
14568: PPUSH
14569: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14573: LD_INT 66
14575: PPUSH
14576: LD_VAR 0 3
14580: PPUSH
14581: LD_INT 1
14583: PPUSH
14584: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14588: LD_INT 21
14590: PPUSH
14591: LD_VAR 0 3
14595: PPUSH
14596: LD_INT 1
14598: PPUSH
14599: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14603: LD_INT 22
14605: PPUSH
14606: LD_VAR 0 3
14610: PPUSH
14611: LD_INT 1
14613: PPUSH
14614: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14618: LD_INT 19
14620: PPUSH
14621: LD_VAR 0 3
14625: PPUSH
14626: LD_INT 1
14628: PPUSH
14629: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14633: LD_INT 54
14635: PPUSH
14636: LD_VAR 0 3
14640: PPUSH
14641: LD_INT 1
14643: PPUSH
14644: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14648: LD_INT 55
14650: PPUSH
14651: LD_VAR 0 3
14655: PPUSH
14656: LD_INT 1
14658: PPUSH
14659: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14663: LD_INT 0
14665: PPUSH
14666: LD_VAR 0 3
14670: PPUSH
14671: LD_INT 1
14673: PPUSH
14674: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14678: LD_INT 1
14680: PPUSH
14681: LD_VAR 0 3
14685: PPUSH
14686: LD_INT 1
14688: PPUSH
14689: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14693: LD_INT 2
14695: PPUSH
14696: LD_VAR 0 3
14700: PPUSH
14701: LD_INT 1
14703: PPUSH
14704: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14708: LD_INT 3
14710: PPUSH
14711: LD_VAR 0 3
14715: PPUSH
14716: LD_INT 1
14718: PPUSH
14719: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14723: LD_INT 4
14725: PPUSH
14726: LD_VAR 0 3
14730: PPUSH
14731: LD_INT 1
14733: PPUSH
14734: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14738: LD_INT 5
14740: PPUSH
14741: LD_VAR 0 3
14745: PPUSH
14746: LD_INT 1
14748: PPUSH
14749: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14753: LD_INT 6
14755: PPUSH
14756: LD_VAR 0 3
14760: PPUSH
14761: LD_INT 1
14763: PPUSH
14764: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14768: LD_INT 7
14770: PPUSH
14771: LD_VAR 0 3
14775: PPUSH
14776: LD_INT 1
14778: PPUSH
14779: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14783: LD_INT 8
14785: PPUSH
14786: LD_VAR 0 3
14790: PPUSH
14791: LD_INT 1
14793: PPUSH
14794: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14798: LD_INT 10
14800: PPUSH
14801: LD_VAR 0 3
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14813: LD_INT 11
14815: PPUSH
14816: LD_VAR 0 3
14820: PPUSH
14821: LD_INT 1
14823: PPUSH
14824: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14828: LD_INT 12
14830: PPUSH
14831: LD_VAR 0 3
14835: PPUSH
14836: LD_INT 1
14838: PPUSH
14839: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14843: LD_INT 13
14845: PPUSH
14846: LD_VAR 0 3
14850: PPUSH
14851: LD_INT 1
14853: PPUSH
14854: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14858: LD_INT 14
14860: PPUSH
14861: LD_VAR 0 3
14865: PPUSH
14866: LD_INT 1
14868: PPUSH
14869: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14873: LD_INT 15
14875: PPUSH
14876: LD_VAR 0 3
14880: PPUSH
14881: LD_INT 1
14883: PPUSH
14884: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14888: LD_INT 16
14890: PPUSH
14891: LD_VAR 0 3
14895: PPUSH
14896: LD_INT 1
14898: PPUSH
14899: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14903: LD_INT 17
14905: PPUSH
14906: LD_VAR 0 3
14910: PPUSH
14911: LD_INT 1
14913: PPUSH
14914: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14918: LD_INT 18
14920: PPUSH
14921: LD_VAR 0 3
14925: PPUSH
14926: LD_INT 1
14928: PPUSH
14929: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14933: LD_INT 19
14935: PPUSH
14936: LD_VAR 0 3
14940: PPUSH
14941: LD_INT 1
14943: PPUSH
14944: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14948: LD_INT 20
14950: PPUSH
14951: LD_VAR 0 3
14955: PPUSH
14956: LD_INT 1
14958: PPUSH
14959: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14963: LD_INT 21
14965: PPUSH
14966: LD_VAR 0 3
14970: PPUSH
14971: LD_INT 1
14973: PPUSH
14974: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14978: LD_INT 23
14980: PPUSH
14981: LD_VAR 0 3
14985: PPUSH
14986: LD_INT 1
14988: PPUSH
14989: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14993: LD_INT 26
14995: PPUSH
14996: LD_VAR 0 3
15000: PPUSH
15001: LD_INT 1
15003: PPUSH
15004: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15008: LD_INT 27
15010: PPUSH
15011: LD_VAR 0 3
15015: PPUSH
15016: LD_INT 1
15018: PPUSH
15019: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15023: LD_INT 28
15025: PPUSH
15026: LD_VAR 0 3
15030: PPUSH
15031: LD_INT 1
15033: PPUSH
15034: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15038: LD_INT 29
15040: PPUSH
15041: LD_VAR 0 3
15045: PPUSH
15046: LD_INT 1
15048: PPUSH
15049: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15053: LD_INT 30
15055: PPUSH
15056: LD_VAR 0 3
15060: PPUSH
15061: LD_INT 1
15063: PPUSH
15064: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15068: LD_INT 31
15070: PPUSH
15071: LD_VAR 0 3
15075: PPUSH
15076: LD_INT 1
15078: PPUSH
15079: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15083: LD_INT 32
15085: PPUSH
15086: LD_VAR 0 3
15090: PPUSH
15091: LD_INT 1
15093: PPUSH
15094: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15098: LD_INT 33
15100: PPUSH
15101: LD_VAR 0 3
15105: PPUSH
15106: LD_INT 1
15108: PPUSH
15109: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15113: LD_INT 36
15115: PPUSH
15116: LD_VAR 0 3
15120: PPUSH
15121: LD_INT 1
15123: PPUSH
15124: CALL_OW 324
// end ; 6 :
15128: GO 16138
15130: LD_INT 6
15132: DOUBLE
15133: EQUAL
15134: IFTRUE 15138
15136: GO 16063
15138: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15139: LD_INT 35
15141: PPUSH
15142: LD_VAR 0 3
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15154: LD_INT 45
15156: PPUSH
15157: LD_VAR 0 3
15161: PPUSH
15162: LD_INT 1
15164: PPUSH
15165: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15169: LD_INT 46
15171: PPUSH
15172: LD_VAR 0 3
15176: PPUSH
15177: LD_INT 1
15179: PPUSH
15180: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15184: LD_INT 47
15186: PPUSH
15187: LD_VAR 0 3
15191: PPUSH
15192: LD_INT 1
15194: PPUSH
15195: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15199: LD_INT 1
15201: PPUSH
15202: LD_VAR 0 3
15206: PPUSH
15207: LD_INT 1
15209: PPUSH
15210: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15214: LD_INT 2
15216: PPUSH
15217: LD_VAR 0 3
15221: PPUSH
15222: LD_INT 1
15224: PPUSH
15225: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15229: LD_INT 11
15231: PPUSH
15232: LD_VAR 0 3
15236: PPUSH
15237: LD_INT 1
15239: PPUSH
15240: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15244: LD_INT 20
15246: PPUSH
15247: LD_VAR 0 3
15251: PPUSH
15252: LD_INT 1
15254: PPUSH
15255: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15259: LD_INT 48
15261: PPUSH
15262: LD_VAR 0 3
15266: PPUSH
15267: LD_INT 1
15269: PPUSH
15270: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15274: LD_INT 49
15276: PPUSH
15277: LD_VAR 0 3
15281: PPUSH
15282: LD_INT 1
15284: PPUSH
15285: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15289: LD_INT 50
15291: PPUSH
15292: LD_VAR 0 3
15296: PPUSH
15297: LD_INT 1
15299: PPUSH
15300: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15304: LD_INT 69
15306: PPUSH
15307: LD_VAR 0 3
15311: PPUSH
15312: LD_INT 1
15314: PPUSH
15315: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15319: LD_INT 39
15321: PPUSH
15322: LD_VAR 0 3
15326: PPUSH
15327: LD_INT 1
15329: PPUSH
15330: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15334: LD_INT 34
15336: PPUSH
15337: LD_VAR 0 3
15341: PPUSH
15342: LD_INT 1
15344: PPUSH
15345: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15349: LD_INT 42
15351: PPUSH
15352: LD_VAR 0 3
15356: PPUSH
15357: LD_INT 1
15359: PPUSH
15360: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15364: LD_INT 44
15366: PPUSH
15367: LD_VAR 0 3
15371: PPUSH
15372: LD_INT 1
15374: PPUSH
15375: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15379: LD_INT 41
15381: PPUSH
15382: LD_VAR 0 3
15386: PPUSH
15387: LD_INT 1
15389: PPUSH
15390: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15394: LD_INT 13
15396: PPUSH
15397: LD_VAR 0 3
15401: PPUSH
15402: LD_INT 1
15404: PPUSH
15405: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15409: LD_INT 40
15411: PPUSH
15412: LD_VAR 0 3
15416: PPUSH
15417: LD_INT 1
15419: PPUSH
15420: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15424: LD_INT 43
15426: PPUSH
15427: LD_VAR 0 3
15431: PPUSH
15432: LD_INT 1
15434: PPUSH
15435: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15439: LD_INT 70
15441: PPUSH
15442: LD_VAR 0 3
15446: PPUSH
15447: LD_INT 1
15449: PPUSH
15450: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15454: LD_INT 23
15456: PPUSH
15457: LD_VAR 0 3
15461: PPUSH
15462: LD_INT 1
15464: PPUSH
15465: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15469: LD_INT 51
15471: PPUSH
15472: LD_VAR 0 3
15476: PPUSH
15477: LD_INT 1
15479: PPUSH
15480: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15484: LD_INT 52
15486: PPUSH
15487: LD_VAR 0 3
15491: PPUSH
15492: LD_INT 1
15494: PPUSH
15495: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15499: LD_INT 6
15501: PPUSH
15502: LD_VAR 0 3
15506: PPUSH
15507: LD_INT 1
15509: PPUSH
15510: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15514: LD_INT 15
15516: PPUSH
15517: LD_VAR 0 3
15521: PPUSH
15522: LD_INT 1
15524: PPUSH
15525: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15529: LD_INT 7
15531: PPUSH
15532: LD_VAR 0 3
15536: PPUSH
15537: LD_INT 1
15539: PPUSH
15540: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15544: LD_INT 12
15546: PPUSH
15547: LD_VAR 0 3
15551: PPUSH
15552: LD_INT 1
15554: PPUSH
15555: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15559: LD_INT 10
15561: PPUSH
15562: LD_VAR 0 3
15566: PPUSH
15567: LD_INT 1
15569: PPUSH
15570: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15574: LD_INT 17
15576: PPUSH
15577: LD_VAR 0 3
15581: PPUSH
15582: LD_INT 1
15584: PPUSH
15585: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15589: LD_INT 18
15591: PPUSH
15592: LD_VAR 0 3
15596: PPUSH
15597: LD_INT 1
15599: PPUSH
15600: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15604: LD_INT 60
15606: PPUSH
15607: LD_VAR 0 3
15611: PPUSH
15612: LD_INT 1
15614: PPUSH
15615: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15619: LD_INT 61
15621: PPUSH
15622: LD_VAR 0 3
15626: PPUSH
15627: LD_INT 1
15629: PPUSH
15630: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15634: LD_INT 32
15636: PPUSH
15637: LD_VAR 0 3
15641: PPUSH
15642: LD_INT 1
15644: PPUSH
15645: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15649: LD_INT 27
15651: PPUSH
15652: LD_VAR 0 3
15656: PPUSH
15657: LD_INT 1
15659: PPUSH
15660: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15664: LD_INT 36
15666: PPUSH
15667: LD_VAR 0 3
15671: PPUSH
15672: LD_INT 1
15674: PPUSH
15675: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15679: LD_INT 33
15681: PPUSH
15682: LD_VAR 0 3
15686: PPUSH
15687: LD_INT 1
15689: PPUSH
15690: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15694: LD_INT 9
15696: PPUSH
15697: LD_VAR 0 3
15701: PPUSH
15702: LD_INT 1
15704: PPUSH
15705: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15709: LD_INT 38
15711: PPUSH
15712: LD_VAR 0 3
15716: PPUSH
15717: LD_INT 1
15719: PPUSH
15720: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15724: LD_INT 57
15726: PPUSH
15727: LD_VAR 0 3
15731: PPUSH
15732: LD_INT 1
15734: PPUSH
15735: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15739: LD_INT 58
15741: PPUSH
15742: LD_VAR 0 3
15746: PPUSH
15747: LD_INT 1
15749: PPUSH
15750: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15754: LD_INT 28
15756: PPUSH
15757: LD_VAR 0 3
15761: PPUSH
15762: LD_INT 1
15764: PPUSH
15765: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15769: LD_INT 29
15771: PPUSH
15772: LD_VAR 0 3
15776: PPUSH
15777: LD_INT 1
15779: PPUSH
15780: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15784: LD_INT 30
15786: PPUSH
15787: LD_VAR 0 3
15791: PPUSH
15792: LD_INT 1
15794: PPUSH
15795: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15799: LD_INT 37
15801: PPUSH
15802: LD_VAR 0 3
15806: PPUSH
15807: LD_INT 1
15809: PPUSH
15810: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15814: LD_INT 63
15816: PPUSH
15817: LD_VAR 0 3
15821: PPUSH
15822: LD_INT 1
15824: PPUSH
15825: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15829: LD_INT 64
15831: PPUSH
15832: LD_VAR 0 3
15836: PPUSH
15837: LD_INT 1
15839: PPUSH
15840: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15844: LD_INT 3
15846: PPUSH
15847: LD_VAR 0 3
15851: PPUSH
15852: LD_INT 1
15854: PPUSH
15855: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15859: LD_INT 4
15861: PPUSH
15862: LD_VAR 0 3
15866: PPUSH
15867: LD_INT 1
15869: PPUSH
15870: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15874: LD_INT 5
15876: PPUSH
15877: LD_VAR 0 3
15881: PPUSH
15882: LD_INT 1
15884: PPUSH
15885: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
15889: LD_INT 8
15891: PPUSH
15892: LD_VAR 0 3
15896: PPUSH
15897: LD_INT 1
15899: PPUSH
15900: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15904: LD_INT 66
15906: PPUSH
15907: LD_VAR 0 3
15911: PPUSH
15912: LD_INT 1
15914: PPUSH
15915: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15919: LD_INT 67
15921: PPUSH
15922: LD_VAR 0 3
15926: PPUSH
15927: LD_INT 1
15929: PPUSH
15930: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15934: LD_INT 21
15936: PPUSH
15937: LD_VAR 0 3
15941: PPUSH
15942: LD_INT 1
15944: PPUSH
15945: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15949: LD_INT 22
15951: PPUSH
15952: LD_VAR 0 3
15956: PPUSH
15957: LD_INT 1
15959: PPUSH
15960: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15964: LD_INT 19
15966: PPUSH
15967: LD_VAR 0 3
15971: PPUSH
15972: LD_INT 1
15974: PPUSH
15975: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
15979: LD_INT 26
15981: PPUSH
15982: LD_VAR 0 3
15986: PPUSH
15987: LD_INT 1
15989: PPUSH
15990: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15994: LD_INT 54
15996: PPUSH
15997: LD_VAR 0 3
16001: PPUSH
16002: LD_INT 1
16004: PPUSH
16005: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16009: LD_INT 55
16011: PPUSH
16012: LD_VAR 0 3
16016: PPUSH
16017: LD_INT 1
16019: PPUSH
16020: CALL_OW 322
// for i = 0 to 39 do
16024: LD_ADDR_VAR 0 4
16028: PUSH
16029: DOUBLE
16030: LD_INT 0
16032: DEC
16033: ST_TO_ADDR
16034: LD_INT 39
16036: PUSH
16037: FOR_TO
16038: IFFALSE 16059
// SetRestrict ( i , side , true ) ;
16040: LD_VAR 0 4
16044: PPUSH
16045: LD_VAR 0 3
16049: PPUSH
16050: LD_INT 1
16052: PPUSH
16053: CALL_OW 324
16057: GO 16037
16059: POP
16060: POP
// end ; else
16061: GO 16138
16063: POP
// begin for i = 1 to 73 do
16064: LD_ADDR_VAR 0 4
16068: PUSH
16069: DOUBLE
16070: LD_INT 1
16072: DEC
16073: ST_TO_ADDR
16074: LD_INT 73
16076: PUSH
16077: FOR_TO
16078: IFFALSE 16099
// SetTech ( i , side , state_enabled ) ;
16080: LD_VAR 0 4
16084: PPUSH
16085: LD_VAR 0 3
16089: PPUSH
16090: LD_INT 1
16092: PPUSH
16093: CALL_OW 322
16097: GO 16077
16099: POP
16100: POP
// for i = 0 to 39 do
16101: LD_ADDR_VAR 0 4
16105: PUSH
16106: DOUBLE
16107: LD_INT 0
16109: DEC
16110: ST_TO_ADDR
16111: LD_INT 39
16113: PUSH
16114: FOR_TO
16115: IFFALSE 16136
// SetRestrict ( i , side , true ) ;
16117: LD_VAR 0 4
16121: PPUSH
16122: LD_VAR 0 3
16126: PPUSH
16127: LD_INT 1
16129: PPUSH
16130: CALL_OW 324
16134: GO 16114
16136: POP
16137: POP
// end ; end ; end ;
16138: GO 12143
16140: POP
16141: POP
// end ; end_of_file
16142: LD_VAR 0 2
16146: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
16147: LD_INT 0
16149: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
16150: LD_VAR 0 1
16154: PPUSH
16155: LD_VAR 0 2
16159: PPUSH
16160: LD_VAR 0 3
16164: PPUSH
16165: LD_INT 0
16167: PPUSH
16168: CALL 16177 0 4
// end ;
16172: LD_VAR 0 4
16176: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
16177: LD_INT 0
16179: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
16180: LD_STRING initScore({
16182: PUSH
16183: LD_VAR 0 1
16187: PUSH
16188: LD_INT 1
16190: ARRAY
16191: STR
16192: PUSH
16193: LD_STRING ,
16195: STR
16196: PUSH
16197: LD_VAR 0 1
16201: PUSH
16202: LD_INT 2
16204: ARRAY
16205: STR
16206: PUSH
16207: LD_STRING ,
16209: STR
16210: PUSH
16211: LD_VAR 0 1
16215: PUSH
16216: LD_INT 3
16218: ARRAY
16219: STR
16220: PUSH
16221: LD_STRING ,
16223: STR
16224: PUSH
16225: LD_VAR 0 1
16229: PUSH
16230: LD_INT 4
16232: ARRAY
16233: STR
16234: PUSH
16235: LD_STRING ,
16237: STR
16238: PUSH
16239: LD_VAR 0 1
16243: PUSH
16244: LD_INT 5
16246: ARRAY
16247: STR
16248: PUSH
16249: LD_STRING ,
16251: STR
16252: PUSH
16253: LD_VAR 0 1
16257: PUSH
16258: LD_INT 6
16260: ARRAY
16261: STR
16262: PUSH
16263: LD_STRING ,
16265: STR
16266: PUSH
16267: LD_VAR 0 1
16271: PUSH
16272: LD_INT 7
16274: ARRAY
16275: STR
16276: PUSH
16277: LD_STRING ,
16279: STR
16280: PUSH
16281: LD_VAR 0 1
16285: PUSH
16286: LD_INT 8
16288: ARRAY
16289: STR
16290: PUSH
16291: LD_STRING },
16293: STR
16294: PUSH
16295: LD_VAR 0 2
16299: STR
16300: PUSH
16301: LD_STRING ,
16303: STR
16304: PUSH
16305: LD_VAR 0 3
16309: STR
16310: PUSH
16311: LD_STRING ,
16313: STR
16314: PUSH
16315: LD_VAR 0 4
16319: STR
16320: PUSH
16321: LD_STRING );
16323: STR
16324: PPUSH
16325: CALL_OW 559
// end ;
16329: LD_VAR 0 5
16333: RET
// export function LScore_Reset ( ) ; begin
16334: LD_INT 0
16336: PPUSH
// ToLua ( ResetScorebar(); ) ;
16337: LD_STRING ResetScorebar();
16339: PPUSH
16340: CALL_OW 559
// end ;
16344: LD_VAR 0 1
16348: RET
// export function LScore_Delete ( ID ) ; begin
16349: LD_INT 0
16351: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
16352: LD_STRING deleteScore(
16354: PUSH
16355: LD_VAR 0 1
16359: STR
16360: PUSH
16361: LD_STRING );
16363: STR
16364: PPUSH
16365: CALL_OW 559
// end ;
16369: LD_VAR 0 2
16373: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
16374: LD_INT 0
16376: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
16377: LD_STRING AST(
16379: PUSH
16380: LD_VAR 0 1
16384: STR
16385: PUSH
16386: LD_STRING ,
16388: STR
16389: PUSH
16390: LD_VAR 0 2
16394: STR
16395: PUSH
16396: LD_STRING ,
16398: STR
16399: PUSH
16400: LD_VAR 0 3
16404: STR
16405: PUSH
16406: LD_STRING ,);
16408: STR
16409: PPUSH
16410: CALL_OW 559
// end ;
16414: LD_VAR 0 4
16418: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
16419: LD_INT 0
16421: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
16422: LD_STRING AST(
16424: PUSH
16425: LD_VAR 0 1
16429: STR
16430: PUSH
16431: LD_STRING ,
16433: STR
16434: PUSH
16435: LD_VAR 0 2
16439: STR
16440: PUSH
16441: LD_STRING ,
16443: STR
16444: PUSH
16445: LD_VAR 0 3
16449: STR
16450: PUSH
16451: LD_STRING ,
16453: STR
16454: PUSH
16455: LD_VAR 0 4
16459: STR
16460: PUSH
16461: LD_STRING );
16463: STR
16464: PPUSH
16465: CALL_OW 559
// end ;
16469: LD_VAR 0 5
16473: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
16474: LD_INT 0
16476: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
16477: LD_STRING AST(
16479: PUSH
16480: LD_VAR 0 1
16484: STR
16485: PUSH
16486: LD_STRING ,
16488: STR
16489: PUSH
16490: LD_VAR 0 2
16494: STR
16495: PUSH
16496: LD_STRING ,
16498: STR
16499: PUSH
16500: LD_VAR 0 3
16504: STR
16505: PUSH
16506: LD_STRING ,
16508: STR
16509: PUSH
16510: LD_VAR 0 4
16514: STR
16515: PUSH
16516: LD_STRING ,
16518: STR
16519: PUSH
16520: LD_VAR 0 5
16524: STR
16525: PUSH
16526: LD_STRING );
16528: STR
16529: PPUSH
16530: CALL_OW 559
// end ;
16534: LD_VAR 0 6
16538: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
16539: LD_INT 0
16541: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
16542: LD_STRING ASRT(
16544: PUSH
16545: LD_VAR 0 1
16549: STR
16550: PUSH
16551: LD_STRING ,
16553: STR
16554: PUSH
16555: LD_VAR 0 2
16559: STR
16560: PUSH
16561: LD_STRING ,
16563: STR
16564: PUSH
16565: LD_VAR 0 3
16569: STR
16570: PUSH
16571: LD_STRING ,);
16573: STR
16574: PPUSH
16575: CALL_OW 559
// end ;
16579: LD_VAR 0 4
16583: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
16584: LD_INT 0
16586: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
16587: LD_STRING ASRT(
16589: PUSH
16590: LD_VAR 0 1
16594: STR
16595: PUSH
16596: LD_STRING ,
16598: STR
16599: PUSH
16600: LD_VAR 0 2
16604: STR
16605: PUSH
16606: LD_STRING ,
16608: STR
16609: PUSH
16610: LD_VAR 0 3
16614: STR
16615: PUSH
16616: LD_STRING ,
16618: STR
16619: PUSH
16620: LD_VAR 0 4
16624: STR
16625: PUSH
16626: LD_STRING );
16628: STR
16629: PPUSH
16630: CALL_OW 559
// end ;
16634: LD_VAR 0 5
16638: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
16639: LD_INT 0
16641: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
16642: LD_STRING ASRT(
16644: PUSH
16645: LD_VAR 0 1
16649: STR
16650: PUSH
16651: LD_STRING ,
16653: STR
16654: PUSH
16655: LD_VAR 0 2
16659: STR
16660: PUSH
16661: LD_STRING ,
16663: STR
16664: PUSH
16665: LD_VAR 0 3
16669: STR
16670: PUSH
16671: LD_STRING ,
16673: STR
16674: PUSH
16675: LD_VAR 0 4
16679: STR
16680: PUSH
16681: LD_STRING ,
16683: STR
16684: PUSH
16685: LD_VAR 0 5
16689: STR
16690: PUSH
16691: LD_STRING );
16693: STR
16694: PPUSH
16695: CALL_OW 559
// end ;
16699: LD_VAR 0 6
16703: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
16704: LD_INT 0
16706: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
16707: LD_STRING UST(
16709: PUSH
16710: LD_VAR 0 1
16714: STR
16715: PUSH
16716: LD_STRING ,
16718: STR
16719: PUSH
16720: LD_VAR 0 2
16724: STR
16725: PUSH
16726: LD_STRING );
16728: STR
16729: PPUSH
16730: CALL_OW 559
// end ;
16734: LD_VAR 0 3
16738: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
16739: LD_INT 0
16741: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
16742: LD_STRING UST(
16744: PUSH
16745: LD_VAR 0 1
16749: STR
16750: PUSH
16751: LD_STRING ,
16753: STR
16754: PUSH
16755: LD_VAR 0 2
16759: STR
16760: PUSH
16761: LD_STRING ,
16763: STR
16764: PUSH
16765: LD_VAR 0 3
16769: STR
16770: PUSH
16771: LD_STRING );
16773: STR
16774: PPUSH
16775: CALL_OW 559
// end ;
16779: LD_VAR 0 4
16783: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
16784: LD_INT 0
16786: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
16787: LD_STRING CCST(
16789: PUSH
16790: LD_VAR 0 1
16794: STR
16795: PUSH
16796: LD_STRING ,{
16798: STR
16799: PUSH
16800: LD_VAR 0 2
16804: STR
16805: PUSH
16806: LD_STRING ,
16808: STR
16809: PUSH
16810: LD_VAR 0 3
16814: STR
16815: PUSH
16816: LD_STRING ,
16818: STR
16819: PUSH
16820: LD_VAR 0 4
16824: STR
16825: PUSH
16826: LD_STRING });
16828: STR
16829: PPUSH
16830: CALL_OW 559
// end ;
16834: LD_VAR 0 5
16838: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
16839: LD_INT 0
16841: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
16842: LD_STRING CCST(
16844: PUSH
16845: LD_VAR 0 1
16849: STR
16850: PUSH
16851: LD_STRING ,
16853: STR
16854: PUSH
16855: LD_VAR 0 2
16859: STR
16860: PUSH
16861: LD_STRING );
16863: STR
16864: PPUSH
16865: CALL_OW 559
// end ;
16869: LD_VAR 0 3
16873: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
16874: LD_INT 0
16876: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
16877: LD_STRING ASSP(
16879: PUSH
16880: LD_VAR 0 1
16884: STR
16885: PUSH
16886: LD_STRING ,
16888: STR
16889: PUSH
16890: LD_VAR 0 2
16894: STR
16895: PUSH
16896: LD_STRING ,
16898: STR
16899: PUSH
16900: LD_VAR 0 3
16904: STR
16905: PUSH
16906: LD_STRING ,);
16908: STR
16909: PPUSH
16910: CALL_OW 559
// end ;
16914: LD_VAR 0 4
16918: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
16919: LD_INT 0
16921: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
16922: LD_STRING ASSP(
16924: PUSH
16925: LD_VAR 0 1
16929: STR
16930: PUSH
16931: LD_STRING ,
16933: STR
16934: PUSH
16935: LD_VAR 0 2
16939: STR
16940: PUSH
16941: LD_STRING ,
16943: STR
16944: PUSH
16945: LD_VAR 0 3
16949: STR
16950: PUSH
16951: LD_STRING ,
16953: STR
16954: PUSH
16955: LD_VAR 0 4
16959: STR
16960: PUSH
16961: LD_STRING );
16963: STR
16964: PPUSH
16965: CALL_OW 559
// end ;
16969: LD_VAR 0 5
16973: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
16974: LD_INT 0
16976: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
16977: LD_STRING ASSP(
16979: PUSH
16980: LD_VAR 0 1
16984: STR
16985: PUSH
16986: LD_STRING ,
16988: STR
16989: PUSH
16990: LD_VAR 0 2
16994: STR
16995: PUSH
16996: LD_STRING ,
16998: STR
16999: PUSH
17000: LD_VAR 0 3
17004: STR
17005: PUSH
17006: LD_STRING ,
17008: STR
17009: PUSH
17010: LD_VAR 0 4
17014: STR
17015: PUSH
17016: LD_STRING ,
17018: STR
17019: PUSH
17020: LD_VAR 0 5
17024: STR
17025: PUSH
17026: LD_STRING );
17028: STR
17029: PPUSH
17030: CALL_OW 559
// end ;
17034: LD_VAR 0 6
17038: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
17039: LD_INT 0
17041: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
17042: LD_STRING ASRSP(
17044: PUSH
17045: LD_VAR 0 1
17049: STR
17050: PUSH
17051: LD_STRING ,
17053: STR
17054: PUSH
17055: LD_VAR 0 2
17059: STR
17060: PUSH
17061: LD_STRING ,
17063: STR
17064: PUSH
17065: LD_VAR 0 3
17069: STR
17070: PUSH
17071: LD_STRING ,);
17073: STR
17074: PPUSH
17075: CALL_OW 559
// end ;
17079: LD_VAR 0 4
17083: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
17084: LD_INT 0
17086: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
17087: LD_STRING ASRSP(
17089: PUSH
17090: LD_VAR 0 1
17094: STR
17095: PUSH
17096: LD_STRING ,
17098: STR
17099: PUSH
17100: LD_VAR 0 2
17104: STR
17105: PUSH
17106: LD_STRING ,
17108: STR
17109: PUSH
17110: LD_VAR 0 3
17114: STR
17115: PUSH
17116: LD_STRING ,
17118: STR
17119: PUSH
17120: LD_VAR 0 4
17124: STR
17125: PUSH
17126: LD_STRING );
17128: STR
17129: PPUSH
17130: CALL_OW 559
// end ;
17134: LD_VAR 0 5
17138: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
17139: LD_INT 0
17141: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
17142: LD_STRING ASRSP(
17144: PUSH
17145: LD_VAR 0 1
17149: STR
17150: PUSH
17151: LD_STRING ,
17153: STR
17154: PUSH
17155: LD_VAR 0 2
17159: STR
17160: PUSH
17161: LD_STRING ,
17163: STR
17164: PUSH
17165: LD_VAR 0 3
17169: STR
17170: PUSH
17171: LD_STRING ,
17173: STR
17174: PUSH
17175: LD_VAR 0 4
17179: STR
17180: PUSH
17181: LD_STRING ,
17183: STR
17184: PUSH
17185: LD_VAR 0 5
17189: STR
17190: PUSH
17191: LD_STRING );
17193: STR
17194: PPUSH
17195: CALL_OW 559
// end ;
17199: LD_VAR 0 6
17203: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
17204: LD_INT 0
17206: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
17207: LD_STRING USSP(
17209: PUSH
17210: LD_VAR 0 1
17214: STR
17215: PUSH
17216: LD_STRING ,
17218: STR
17219: PUSH
17220: LD_VAR 0 2
17224: STR
17225: PUSH
17226: LD_STRING );
17228: STR
17229: PPUSH
17230: CALL_OW 559
// end ;
17234: LD_VAR 0 3
17238: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
17239: LD_INT 0
17241: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
17242: LD_STRING USSP(
17244: PUSH
17245: LD_VAR 0 1
17249: STR
17250: PUSH
17251: LD_STRING ,
17253: STR
17254: PUSH
17255: LD_VAR 0 2
17259: STR
17260: PUSH
17261: LD_STRING ,
17263: STR
17264: PUSH
17265: LD_VAR 0 3
17269: STR
17270: PUSH
17271: LD_STRING );
17273: STR
17274: PPUSH
17275: CALL_OW 559
// end ;
17279: LD_VAR 0 4
17283: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
17284: LD_INT 0
17286: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
17287: LD_STRING CCSSP(
17289: PUSH
17290: LD_VAR 0 1
17294: STR
17295: PUSH
17296: LD_STRING ,{
17298: STR
17299: PUSH
17300: LD_VAR 0 2
17304: STR
17305: PUSH
17306: LD_STRING ,
17308: STR
17309: PUSH
17310: LD_VAR 0 3
17314: STR
17315: PUSH
17316: LD_STRING ,
17318: STR
17319: PUSH
17320: LD_VAR 0 4
17324: STR
17325: PUSH
17326: LD_STRING });
17328: STR
17329: PPUSH
17330: CALL_OW 559
// end ;
17334: LD_VAR 0 5
17338: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
17339: LD_INT 0
17341: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
17342: LD_STRING CCSSP(
17344: PUSH
17345: LD_VAR 0 1
17349: STR
17350: PUSH
17351: LD_STRING ,
17353: STR
17354: PUSH
17355: LD_VAR 0 2
17359: STR
17360: PUSH
17361: LD_STRING );
17363: STR
17364: PPUSH
17365: CALL_OW 559
// end ;
17369: LD_VAR 0 3
17373: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
17374: LD_INT 0
17376: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
17377: LD_STRING ASP(
17379: PUSH
17380: LD_VAR 0 1
17384: STR
17385: PUSH
17386: LD_STRING ,
17388: STR
17389: PUSH
17390: LD_VAR 0 2
17394: STR
17395: PUSH
17396: LD_STRING ,
17398: STR
17399: PUSH
17400: LD_VAR 0 3
17404: STR
17405: PUSH
17406: LD_STRING );
17408: STR
17409: PPUSH
17410: CALL_OW 559
// end ;
17414: LD_VAR 0 4
17418: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
17419: LD_INT 0
17421: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
17422: LD_STRING USP(
17424: PUSH
17425: LD_VAR 0 1
17429: STR
17430: PUSH
17431: LD_STRING ,
17433: STR
17434: PUSH
17435: LD_VAR 0 2
17439: STR
17440: PUSH
17441: LD_STRING ,
17443: STR
17444: PUSH
17445: LD_VAR 0 3
17449: STR
17450: PUSH
17451: LD_STRING );
17453: STR
17454: PPUSH
17455: CALL_OW 559
// end ;
17459: LD_VAR 0 4
17463: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
17464: LD_INT 0
17466: PPUSH
17467: PPUSH
// for i = 1 to 8 do
17468: LD_ADDR_VAR 0 4
17472: PUSH
17473: DOUBLE
17474: LD_INT 1
17476: DEC
17477: ST_TO_ADDR
17478: LD_INT 8
17480: PUSH
17481: FOR_TO
17482: IFFALSE 17529
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
17484: LD_STRING USP(
17486: PUSH
17487: LD_VAR 0 1
17491: STR
17492: PUSH
17493: LD_STRING ,
17495: STR
17496: PUSH
17497: LD_VAR 0 4
17501: STR
17502: PUSH
17503: LD_STRING ,
17505: STR
17506: PUSH
17507: LD_VAR 0 2
17511: PUSH
17512: LD_VAR 0 4
17516: ARRAY
17517: STR
17518: PUSH
17519: LD_STRING );
17521: STR
17522: PPUSH
17523: CALL_OW 559
17527: GO 17481
17529: POP
17530: POP
// end ;
17531: LD_VAR 0 3
17535: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
17536: LD_INT 0
17538: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
17539: LD_STRING ASC(
17541: PUSH
17542: LD_VAR 0 1
17546: STR
17547: PUSH
17548: LD_STRING ,
17550: STR
17551: PUSH
17552: LD_VAR 0 2
17556: STR
17557: PUSH
17558: LD_STRING ,
17560: STR
17561: PUSH
17562: LD_VAR 0 3
17566: STR
17567: PUSH
17568: LD_STRING ,
17570: STR
17571: PUSH
17572: LD_VAR 0 4
17576: STR
17577: PUSH
17578: LD_STRING );
17580: STR
17581: PPUSH
17582: CALL_OW 559
// end ;
17586: LD_VAR 0 5
17590: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
17591: LD_INT 0
17593: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
17594: LD_STRING USC(
17596: PUSH
17597: LD_VAR 0 1
17601: STR
17602: PUSH
17603: LD_STRING ,{
17605: STR
17606: PUSH
17607: LD_VAR 0 2
17611: PUSH
17612: LD_INT 1
17614: ARRAY
17615: STR
17616: PUSH
17617: LD_STRING ,
17619: STR
17620: PUSH
17621: LD_VAR 0 2
17625: PUSH
17626: LD_INT 2
17628: ARRAY
17629: STR
17630: PUSH
17631: LD_STRING ,
17633: STR
17634: PUSH
17635: LD_VAR 0 2
17639: PUSH
17640: LD_INT 3
17642: ARRAY
17643: STR
17644: PUSH
17645: LD_STRING ,
17647: STR
17648: PUSH
17649: LD_VAR 0 2
17653: PUSH
17654: LD_INT 4
17656: ARRAY
17657: STR
17658: PUSH
17659: LD_STRING ,
17661: STR
17662: PUSH
17663: LD_VAR 0 2
17667: PUSH
17668: LD_INT 5
17670: ARRAY
17671: STR
17672: PUSH
17673: LD_STRING ,
17675: STR
17676: PUSH
17677: LD_VAR 0 2
17681: PUSH
17682: LD_INT 6
17684: ARRAY
17685: STR
17686: PUSH
17687: LD_STRING ,
17689: STR
17690: PUSH
17691: LD_VAR 0 2
17695: PUSH
17696: LD_INT 7
17698: ARRAY
17699: STR
17700: PUSH
17701: LD_STRING ,
17703: STR
17704: PUSH
17705: LD_VAR 0 2
17709: PUSH
17710: LD_INT 8
17712: ARRAY
17713: STR
17714: PUSH
17715: LD_STRING });
17717: STR
17718: PPUSH
17719: CALL_OW 559
// end ; end_of_file
17723: LD_VAR 0 3
17727: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
17728: LD_INT 0
17730: PPUSH
17731: PPUSH
17732: PPUSH
17733: PPUSH
17734: PPUSH
17735: PPUSH
17736: PPUSH
17737: PPUSH
17738: PPUSH
// for i := 1 to 8 do
17739: LD_ADDR_VAR 0 2
17743: PUSH
17744: DOUBLE
17745: LD_INT 1
17747: DEC
17748: ST_TO_ADDR
17749: LD_INT 8
17751: PUSH
17752: FOR_TO
17753: IFFALSE 18137
// begin if Side_Positions [ i ] then
17755: LD_EXP 37
17759: PUSH
17760: LD_VAR 0 2
17764: ARRAY
17765: IFFALSE 18135
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
17767: LD_ADDR_VAR 0 7
17771: PUSH
17772: LD_INT 22
17774: PUSH
17775: LD_VAR 0 2
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 21
17786: PUSH
17787: LD_INT 1
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PPUSH
17798: CALL_OW 69
17802: PUSH
17803: LD_INT 0
17805: PLUS
17806: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17807: LD_ADDR_VAR 0 9
17811: PUSH
17812: LD_INT 22
17814: PUSH
17815: LD_VAR 0 2
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: LD_INT 30
17829: PUSH
17830: LD_INT 0
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 30
17839: PUSH
17840: LD_INT 1
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: LIST
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PPUSH
17856: CALL_OW 69
17860: ST_TO_ADDR
// crates := 0 ;
17861: LD_ADDR_VAR 0 4
17865: PUSH
17866: LD_INT 0
17868: ST_TO_ADDR
// oil := 0 ;
17869: LD_ADDR_VAR 0 5
17873: PUSH
17874: LD_INT 0
17876: ST_TO_ADDR
// sib := 0 ;
17877: LD_ADDR_VAR 0 6
17881: PUSH
17882: LD_INT 0
17884: ST_TO_ADDR
// if bases then
17885: LD_VAR 0 9
17889: IFFALSE 17995
// begin for j in bases do
17891: LD_ADDR_VAR 0 3
17895: PUSH
17896: LD_VAR 0 9
17900: PUSH
17901: FOR_IN
17902: IFFALSE 17993
// begin base := GetBase ( j ) ;
17904: LD_ADDR_VAR 0 8
17908: PUSH
17909: LD_VAR 0 3
17913: PPUSH
17914: CALL_OW 274
17918: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
17919: LD_ADDR_VAR 0 4
17923: PUSH
17924: LD_VAR 0 4
17928: PUSH
17929: LD_VAR 0 8
17933: PPUSH
17934: LD_INT 1
17936: PPUSH
17937: CALL_OW 275
17941: PLUS
17942: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
17943: LD_ADDR_VAR 0 5
17947: PUSH
17948: LD_VAR 0 5
17952: PUSH
17953: LD_VAR 0 8
17957: PPUSH
17958: LD_INT 2
17960: PPUSH
17961: CALL_OW 275
17965: PLUS
17966: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
17967: LD_ADDR_VAR 0 6
17971: PUSH
17972: LD_VAR 0 6
17976: PUSH
17977: LD_VAR 0 8
17981: PPUSH
17982: LD_INT 3
17984: PPUSH
17985: CALL_OW 275
17989: PLUS
17990: ST_TO_ADDR
// end ;
17991: GO 17901
17993: POP
17994: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
17995: LD_STRING setSpecText(
17997: PUSH
17998: LD_VAR 0 2
18002: STR
18003: PUSH
18004: LD_STRING ,
18006: STR
18007: PUSH
18008: LD_INT 2
18010: STR
18011: PUSH
18012: LD_STRING ,
18014: STR
18015: PUSH
18016: LD_VAR 0 4
18020: STR
18021: PUSH
18022: LD_STRING )
18024: STR
18025: PPUSH
18026: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
18030: LD_STRING setSpecText(
18032: PUSH
18033: LD_VAR 0 2
18037: STR
18038: PUSH
18039: LD_STRING ,
18041: STR
18042: PUSH
18043: LD_INT 3
18045: STR
18046: PUSH
18047: LD_STRING ,
18049: STR
18050: PUSH
18051: LD_VAR 0 5
18055: STR
18056: PUSH
18057: LD_STRING )
18059: STR
18060: PPUSH
18061: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
18065: LD_STRING setSpecText(
18067: PUSH
18068: LD_VAR 0 2
18072: STR
18073: PUSH
18074: LD_STRING ,
18076: STR
18077: PUSH
18078: LD_INT 4
18080: STR
18081: PUSH
18082: LD_STRING ,
18084: STR
18085: PUSH
18086: LD_VAR 0 6
18090: STR
18091: PUSH
18092: LD_STRING )
18094: STR
18095: PPUSH
18096: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
18100: LD_STRING setSpecText(
18102: PUSH
18103: LD_VAR 0 2
18107: STR
18108: PUSH
18109: LD_STRING ,
18111: STR
18112: PUSH
18113: LD_INT 5
18115: STR
18116: PUSH
18117: LD_STRING ,
18119: STR
18120: PUSH
18121: LD_VAR 0 7
18125: STR
18126: PUSH
18127: LD_STRING )
18129: STR
18130: PPUSH
18131: CALL_OW 559
// end ; end ;
18135: GO 17752
18137: POP
18138: POP
// end ;
18139: LD_VAR 0 1
18143: RET
// every 0 0$1 do
18144: GO 18146
18146: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
18147: LD_STRING setSpecLogoNumber(
18149: PUSH
18150: LD_INT 2
18152: STR
18153: PUSH
18154: LD_STRING ,
18156: STR
18157: PUSH
18158: LD_INT 1
18160: STR
18161: PUSH
18162: LD_STRING )
18164: STR
18165: PPUSH
18166: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
18170: LD_STRING setSpecLogoNumber(
18172: PUSH
18173: LD_INT 3
18175: STR
18176: PUSH
18177: LD_STRING ,
18179: STR
18180: PUSH
18181: LD_INT 2
18183: STR
18184: PUSH
18185: LD_STRING )
18187: STR
18188: PPUSH
18189: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
18193: LD_STRING setSpecLogoNumber(
18195: PUSH
18196: LD_INT 4
18198: STR
18199: PUSH
18200: LD_STRING ,
18202: STR
18203: PUSH
18204: LD_INT 3
18206: STR
18207: PUSH
18208: LD_STRING )
18210: STR
18211: PPUSH
18212: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
18216: LD_STRING setSpecLogoNumber(
18218: PUSH
18219: LD_INT 5
18221: STR
18222: PUSH
18223: LD_STRING ,
18225: STR
18226: PUSH
18227: LD_INT 4
18229: STR
18230: PUSH
18231: LD_STRING )
18233: STR
18234: PPUSH
18235: CALL_OW 559
// end ;
18239: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
18240: LD_INT 2
18242: PUSH
18243: LD_INT 30
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 30
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: IFFALSE 18282
18274: GO 18276
18276: DISABLE
// begin enable ;
18277: ENABLE
// UpdateSpectatorBar ;
18278: CALL 17728 0 0
// end ; end_of_file
18282: END
// var respawn , inqueue ; export function init_respawning ; begin
18283: LD_INT 0
18285: PPUSH
// respawn := Rand ( 1 , 8 ) ;
18286: LD_ADDR_LOC 23
18290: PUSH
18291: LD_INT 1
18293: PPUSH
18294: LD_INT 8
18296: PPUSH
18297: CALL_OW 12
18301: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18302: LD_ADDR_LOC 24
18306: PUSH
18307: LD_INT 0
18309: PUSH
18310: LD_INT 0
18312: PUSH
18313: LD_INT 0
18315: PUSH
18316: LD_INT 0
18318: PUSH
18319: LD_INT 0
18321: PUSH
18322: LD_INT 0
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: LD_INT 0
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: ST_TO_ADDR
// end ;
18341: LD_VAR 0 1
18345: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
18346: GO 18348
18348: DISABLE
18349: LD_INT 0
18351: PPUSH
18352: PPUSH
18353: PPUSH
// begin if respawning_time_max = 0 then
18354: LD_EXP 30
18358: PUSH
18359: LD_INT 0
18361: EQUAL
18362: IFFALSE 18366
// exit ;
18364: GO 18774
// if respawn = 8 then
18366: LD_LOC 23
18370: PUSH
18371: LD_INT 8
18373: EQUAL
18374: IFFALSE 18386
// respawn := 1 else
18376: LD_ADDR_LOC 23
18380: PUSH
18381: LD_INT 1
18383: ST_TO_ADDR
18384: GO 18400
// respawn := respawn + 1 ;
18386: LD_ADDR_LOC 23
18390: PUSH
18391: LD_LOC 23
18395: PUSH
18396: LD_INT 1
18398: PLUS
18399: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
18400: LD_EXP 37
18404: PUSH
18405: LD_LOC 23
18409: ARRAY
18410: PUSH
18411: LD_LOC 24
18415: PUSH
18416: LD_LOC 23
18420: ARRAY
18421: NOT
18422: AND
18423: IFFALSE 18773
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
18425: LD_ADDR_VAR 0 1
18429: PUSH
18430: LD_INT 21
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 22
18442: PUSH
18443: LD_LOC 23
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 3
18454: PUSH
18455: LD_INT 23
18457: PUSH
18458: LD_INT 0
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: PPUSH
18471: CALL_OW 69
18475: ST_TO_ADDR
// if n < number_of_people then
18476: LD_VAR 0 1
18480: PUSH
18481: LD_EXP 21
18485: LESS
18486: IFFALSE 18770
// begin aktresp := respawn ;
18488: LD_ADDR_VAR 0 3
18492: PUSH
18493: LD_LOC 23
18497: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
18498: LD_ADDR_LOC 24
18502: PUSH
18503: LD_LOC 24
18507: PPUSH
18508: LD_VAR 0 3
18512: PPUSH
18513: LD_INT 1
18515: PPUSH
18516: CALL_OW 1
18520: ST_TO_ADDR
// enable ;
18521: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
18522: LD_EXP 29
18526: PPUSH
18527: LD_EXP 30
18531: PPUSH
18532: CALL_OW 12
18536: PPUSH
18537: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
18541: LD_ADDR_LOC 24
18545: PUSH
18546: LD_LOC 24
18550: PPUSH
18551: LD_VAR 0 3
18555: PPUSH
18556: LD_INT 0
18558: PPUSH
18559: CALL_OW 1
18563: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
18564: LD_ADDR_VAR 0 2
18568: PUSH
18569: LD_INT 21
18571: PUSH
18572: LD_INT 3
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 2
18581: PUSH
18582: LD_INT 30
18584: PUSH
18585: LD_INT 0
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 30
18594: PUSH
18595: LD_INT 1
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 50
18609: PUSH
18610: EMPTY
18611: LIST
18612: PUSH
18613: LD_INT 22
18615: PUSH
18616: LD_VAR 0 3
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: PPUSH
18631: CALL_OW 69
18635: ST_TO_ADDR
// if dep = 0 then
18636: LD_VAR 0 2
18640: PUSH
18641: LD_INT 0
18643: EQUAL
18644: IFFALSE 18648
// exit ;
18646: GO 18774
// hc_name :=  ;
18648: LD_ADDR_OWVAR 26
18652: PUSH
18653: LD_STRING 
18655: ST_TO_ADDR
// hc_importance := 0 ;
18656: LD_ADDR_OWVAR 32
18660: PUSH
18661: LD_INT 0
18663: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
18664: LD_INT 0
18666: PPUSH
18667: LD_INT 0
18669: PPUSH
18670: LD_EXP 23
18674: PUSH
18675: LD_INT 2
18677: DIV
18678: PPUSH
18679: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
18683: LD_ADDR_OWVAR 21
18687: PUSH
18688: LD_EXP 38
18692: PUSH
18693: LD_VAR 0 3
18697: ARRAY
18698: ST_TO_ADDR
// uc_side := aktresp ;
18699: LD_ADDR_OWVAR 20
18703: PUSH
18704: LD_VAR 0 3
18708: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
18709: LD_ADDR_VAR 0 2
18713: PUSH
18714: LD_VAR 0 2
18718: PUSH
18719: LD_INT 1
18721: PPUSH
18722: LD_VAR 0 2
18726: PPUSH
18727: CALL_OW 12
18731: ARRAY
18732: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
18733: CALL_OW 44
18737: PPUSH
18738: LD_VAR 0 2
18742: PPUSH
18743: CALL_OW 250
18747: PPUSH
18748: LD_VAR 0 2
18752: PPUSH
18753: CALL_OW 251
18757: PPUSH
18758: LD_INT 7
18760: PPUSH
18761: LD_INT 1
18763: PPUSH
18764: CALL_OW 50
// end else
18768: GO 18771
// enable ;
18770: ENABLE
// end else
18771: GO 18774
// enable ;
18773: ENABLE
// end ; end_of_file
18774: PPOPN 3
18776: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
18777: LD_INT 0
18779: PPUSH
18780: PPUSH
18781: PPUSH
// BuildUpTime_Delay = 0 ;
18782: LD_ADDR_EXP 63
18786: PUSH
18787: LD_INT 0
18789: ST_TO_ADDR
// if not def_builduptime then
18790: LD_EXP 16
18794: NOT
18795: IFFALSE 18799
// exit ;
18797: GO 18982
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
18799: LD_ADDR_EXP 63
18803: PUSH
18804: LD_INT 8400
18806: PUSH
18807: LD_INT 2100
18809: PUSH
18810: LD_EXP 16
18814: MUL
18815: PLUS
18816: ST_TO_ADDR
// BuildUpTimeActive := true ;
18817: LD_ADDR_EXP 62
18821: PUSH
18822: LD_INT 1
18824: ST_TO_ADDR
// for i := 1 to 8 do
18825: LD_ADDR_VAR 0 2
18829: PUSH
18830: DOUBLE
18831: LD_INT 1
18833: DEC
18834: ST_TO_ADDR
18835: LD_INT 8
18837: PUSH
18838: FOR_TO
18839: IFFALSE 18980
// if Side_Positions [ i ] then
18841: LD_EXP 37
18845: PUSH
18846: LD_VAR 0 2
18850: ARRAY
18851: IFFALSE 18978
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
18853: LD_EXP 61
18857: PUSH
18858: LD_EXP 37
18862: PUSH
18863: LD_VAR 0 2
18867: ARRAY
18868: ARRAY
18869: PPUSH
18870: LD_INT 5
18872: PPUSH
18873: CALL_OW 424
// for j := 1 to 8 do
18877: LD_ADDR_VAR 0 3
18881: PUSH
18882: DOUBLE
18883: LD_INT 1
18885: DEC
18886: ST_TO_ADDR
18887: LD_INT 8
18889: PUSH
18890: FOR_TO
18891: IFFALSE 18976
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
18893: LD_EXP 37
18897: PUSH
18898: LD_VAR 0 3
18902: ARRAY
18903: PUSH
18904: LD_EXP 34
18908: PUSH
18909: LD_VAR 0 2
18913: ARRAY
18914: PUSH
18915: LD_EXP 34
18919: PUSH
18920: LD_VAR 0 3
18924: ARRAY
18925: NONEQUAL
18926: PUSH
18927: LD_EXP 39
18931: NOT
18932: PUSH
18933: LD_VAR 0 2
18937: PUSH
18938: LD_VAR 0 3
18942: NONEQUAL
18943: AND
18944: OR
18945: AND
18946: IFFALSE 18974
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
18948: LD_VAR 0 3
18952: PPUSH
18953: LD_EXP 61
18957: PUSH
18958: LD_EXP 37
18962: PUSH
18963: LD_VAR 0 2
18967: ARRAY
18968: ARRAY
18969: PPUSH
18970: CALL_OW 333
18974: GO 18890
18976: POP
18977: POP
// end ;
18978: GO 18838
18980: POP
18981: POP
// end ;
18982: LD_VAR 0 1
18986: RET
// export function EndBuildUp ; var i , j ; begin
18987: LD_INT 0
18989: PPUSH
18990: PPUSH
18991: PPUSH
// BuildUpTimeActive := false ;
18992: LD_ADDR_EXP 62
18996: PUSH
18997: LD_INT 0
18999: ST_TO_ADDR
// for i := 1 to 8 do
19000: LD_ADDR_VAR 0 2
19004: PUSH
19005: DOUBLE
19006: LD_INT 1
19008: DEC
19009: ST_TO_ADDR
19010: LD_INT 8
19012: PUSH
19013: FOR_TO
19014: IFFALSE 19155
// if Side_Positions [ i ] then
19016: LD_EXP 37
19020: PUSH
19021: LD_VAR 0 2
19025: ARRAY
19026: IFFALSE 19153
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
19028: LD_EXP 61
19032: PUSH
19033: LD_EXP 37
19037: PUSH
19038: LD_VAR 0 2
19042: ARRAY
19043: ARRAY
19044: PPUSH
19045: LD_INT 0
19047: PPUSH
19048: CALL_OW 424
// for j := 1 to 8 do
19052: LD_ADDR_VAR 0 3
19056: PUSH
19057: DOUBLE
19058: LD_INT 1
19060: DEC
19061: ST_TO_ADDR
19062: LD_INT 8
19064: PUSH
19065: FOR_TO
19066: IFFALSE 19151
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19068: LD_EXP 37
19072: PUSH
19073: LD_VAR 0 3
19077: ARRAY
19078: PUSH
19079: LD_EXP 34
19083: PUSH
19084: LD_VAR 0 2
19088: ARRAY
19089: PUSH
19090: LD_EXP 34
19094: PUSH
19095: LD_VAR 0 3
19099: ARRAY
19100: NONEQUAL
19101: PUSH
19102: LD_EXP 39
19106: NOT
19107: PUSH
19108: LD_VAR 0 2
19112: PUSH
19113: LD_VAR 0 3
19117: NONEQUAL
19118: AND
19119: OR
19120: AND
19121: IFFALSE 19149
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19123: LD_VAR 0 3
19127: PPUSH
19128: LD_EXP 61
19132: PUSH
19133: LD_EXP 37
19137: PUSH
19138: LD_VAR 0 2
19142: ARRAY
19143: ARRAY
19144: PPUSH
19145: CALL_OW 334
19149: GO 19065
19151: POP
19152: POP
// end ;
19153: GO 19013
19155: POP
19156: POP
// end ;
19157: LD_VAR 0 1
19161: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
19162: LD_EXP 62
19166: IFFALSE 19341
19168: GO 19170
19170: DISABLE
19171: LD_INT 0
19173: PPUSH
19174: PPUSH
// begin for i := 1 to 8 do
19175: LD_ADDR_VAR 0 1
19179: PUSH
19180: DOUBLE
19181: LD_INT 1
19183: DEC
19184: ST_TO_ADDR
19185: LD_INT 8
19187: PUSH
19188: FOR_TO
19189: IFFALSE 19338
// if Side_Positions [ i ] then
19191: LD_EXP 37
19195: PUSH
19196: LD_VAR 0 1
19200: ARRAY
19201: IFFALSE 19336
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
19203: LD_ADDR_VAR 0 2
19207: PUSH
19208: LD_EXP 61
19212: PUSH
19213: LD_EXP 37
19217: PUSH
19218: LD_VAR 0 1
19222: ARRAY
19223: ARRAY
19224: PPUSH
19225: LD_INT 2
19227: PUSH
19228: LD_INT 21
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 21
19240: PUSH
19241: LD_INT 2
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 22
19255: PUSH
19256: LD_OWVAR 2
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PPUSH
19269: CALL_OW 70
19273: PUSH
19274: FOR_IN
19275: IFFALSE 19334
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
19277: LD_EXP 34
19281: PUSH
19282: LD_VAR 0 1
19286: ARRAY
19287: PUSH
19288: LD_EXP 34
19292: PUSH
19293: LD_OWVAR 2
19297: ARRAY
19298: NONEQUAL
19299: PUSH
19300: LD_EXP 39
19304: NOT
19305: PUSH
19306: LD_VAR 0 1
19310: PUSH
19311: LD_OWVAR 2
19315: NONEQUAL
19316: AND
19317: OR
19318: IFFALSE 19332
// ComMoveToArea ( un , BuildUpEscape ) ;
19320: LD_VAR 0 2
19324: PPUSH
19325: LD_INT 20
19327: PPUSH
19328: CALL_OW 113
19332: GO 19274
19334: POP
19335: POP
19336: GO 19188
19338: POP
19339: POP
// enable ;
19340: ENABLE
// end ;
19341: PPOPN 2
19343: END
// every 0 0$1 trigger def_builduptime do
19344: LD_EXP 16
19348: IFFALSE 19374
19350: GO 19352
19352: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
19353: LD_INT 8400
19355: PUSH
19356: LD_EXP 16
19360: PUSH
19361: LD_INT 2100
19363: MUL
19364: PLUS
19365: PPUSH
19366: CALL_OW 67
// EndBuildUp ;
19370: CALL 18987 0 0
// end ;
19374: END
