// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_public_score , def_amount_score , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , amount_of_apemen , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , amount_score , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , king_territory , final_count , Player_Side , player_team ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if MultiPlayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type = mp_game_type ;
  79: LD_ADDR_EXP 18
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side = mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  99: LD_ADDR_EXP 37
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 109: LD_ADDR_EXP 34
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 119: LD_ADDR_EXP 38
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 36
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams = mp_teams ;
 139: LD_ADDR_EXP 35
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 352
// begin Game_Type = 3 ;
 151: LD_ADDR_EXP 18
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side = 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 37
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 34
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 38
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 36
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 323: LD_ADDR_EXP 35
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: ST_TO_ADDR
// end ; for i := 1 to 8 do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_INT 8
 364: PUSH
 365: FOR_TO
 366: IFFALSE 453
// if Multiplayer_GetPlayerIsSpec ( i ) then
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 530
 377: IFFALSE 451
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 379: LD_ADDR_EXP 37
 383: PUSH
 384: LD_EXP 37
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_INT 0
 396: PPUSH
 397: CALL_OW 1
 401: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 402: LD_ADDR_EXP 35
 406: PUSH
 407: LD_EXP 35
 411: PPUSH
 412: LD_EXP 34
 416: PUSH
 417: LD_VAR 0 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 35
 427: PUSH
 428: LD_EXP 34
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: ARRAY
 439: PUSH
 440: LD_VAR 0 2
 444: DIFF
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// end ;
 451: GO 365
 453: POP
 454: POP
// if MultiPlayer then
 455: LD_OWVAR 4
 459: IFFALSE 671
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 461: LD_ADDR_EXP 1
 465: PUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_INT 1
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 487: LD_ADDR_EXP 3
 491: PUSH
 492: LD_INT 2
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 500: LD_ADDR_EXP 4
 504: PUSH
 505: LD_INT 3
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 513: LD_ADDR_EXP 5
 517: PUSH
 518: LD_INT 4
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 526: LD_ADDR_EXP 6
 530: PUSH
 531: LD_INT 5
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 539: LD_ADDR_EXP 8
 543: PUSH
 544: LD_INT 10
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 552: LD_ADDR_EXP 9
 556: PUSH
 557: LD_INT 11
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 13 ) ;
 578: LD_ADDR_EXP 11
 582: PUSH
 583: LD_INT 13
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 14 ) ;
 591: LD_ADDR_EXP 12
 595: PUSH
 596: LD_INT 14
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 604: LD_ADDR_EXP 13
 608: PUSH
 609: LD_INT 15
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_public_score = GetMultiplayerSetting ( 16 ) ;
 617: LD_ADDR_EXP 14
 621: PUSH
 622: LD_INT 16
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_amount_score = GetMultiplayerSetting ( 17 ) ;
 630: LD_ADDR_EXP 15
 634: PUSH
 635: LD_INT 17
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 643: LD_ADDR_EXP 16
 647: PUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 656: LD_ADDR_VAR 0 3
 660: PUSH
 661: LD_INT 22
 663: PPUSH
 664: CALL_OW 426
 668: ST_TO_ADDR
// end else
 669: GO 803
// begin randomize ;
 671: CALL_OW 10
// def_base_level = 3 ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_INT 3
 682: ST_TO_ADDR
// def_amount_of_people = 1 ;
 683: LD_ADDR_EXP 2
 687: PUSH
 688: LD_INT 1
 690: ST_TO_ADDR
// def_skill_level = 1 ;
 691: LD_ADDR_EXP 3
 695: PUSH
 696: LD_INT 1
 698: ST_TO_ADDR
// def_starting_resources = 2 ;
 699: LD_ADDR_EXP 4
 703: PUSH
 704: LD_INT 2
 706: ST_TO_ADDR
// def_shipments_density = 1 ;
 707: LD_ADDR_EXP 5
 711: PUSH
 712: LD_INT 1
 714: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
 715: LD_ADDR_EXP 6
 719: PUSH
 720: LD_INT 0
 722: ST_TO_ADDR
// def_shared_vision = 1 ;
 723: LD_ADDR_EXP 8
 727: PUSH
 728: LD_INT 1
 730: ST_TO_ADDR
// def_morale_flags = 1 ;
 731: LD_ADDR_EXP 9
 735: PUSH
 736: LD_INT 1
 738: ST_TO_ADDR
// def_siberite_detection = 1 ;
 739: LD_ADDR_EXP 10
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 747: LD_ADDR_EXP 12
 751: PUSH
 752: LD_INT 3
 754: ST_TO_ADDR
// def_people_respawning = 2 ;
 755: LD_ADDR_EXP 11
 759: PUSH
 760: LD_INT 2
 762: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 763: LD_ADDR_EXP 13
 767: PUSH
 768: LD_INT 0
 770: ST_TO_ADDR
// def_public_score = 1 ;
 771: LD_ADDR_EXP 14
 775: PUSH
 776: LD_INT 1
 778: ST_TO_ADDR
// def_amount_score = 0 ;
 779: LD_ADDR_EXP 15
 783: PUSH
 784: LD_INT 0
 786: ST_TO_ADDR
// def_builduptime = 0 ;
 787: LD_ADDR_EXP 16
 791: PUSH
 792: LD_INT 0
 794: ST_TO_ADDR
// tech_level = 4 ;
 795: LD_ADDR_VAR 0 3
 799: PUSH
 800: LD_INT 4
 802: ST_TO_ADDR
// end ; Player_Side = Your_Side ;
 803: LD_ADDR_EXP 47
 807: PUSH
 808: LD_OWVAR 2
 812: ST_TO_ADDR
// player_team = Side_Teams [ Player_Side ] ;
 813: LD_ADDR_EXP 48
 817: PUSH
 818: LD_EXP 34
 822: PUSH
 823: LD_EXP 47
 827: ARRAY
 828: ST_TO_ADDR
// if isSGUI then
 829: LD_OWVAR 83
 833: IFFALSE 841
// setMpTechs ( ) else
 835: CALL 12088 0 0
 839: GO 854
// SetMpTechLevel ( tech_level + 1 ) ;
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: PLUS
 849: PPUSH
 850: CALL 12235 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 854: LD_ADDR_EXP 19
 858: PUSH
 859: LD_INT 0
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 1
 867: PUSH
 868: LD_INT 1
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 1
 881: PUSH
 882: LD_INT 1
 884: PLUS
 885: ARRAY
 886: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 887: LD_ADDR_EXP 20
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: LD_INT 0
 897: PUSH
 898: LD_INT 2
 900: PUSH
 901: LD_INT 4
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: PUSH
 910: LD_EXP 1
 914: PUSH
 915: LD_INT 1
 917: PLUS
 918: ARRAY
 919: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 920: LD_ADDR_EXP 21
 924: PUSH
 925: LD_INT 9
 927: PUSH
 928: LD_INT 12
 930: PUSH
 931: LD_INT 15
 933: PUSH
 934: LD_INT 24
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_EXP 2
 947: PUSH
 948: LD_INT 1
 950: PLUS
 951: ARRAY
 952: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 953: LD_ADDR_EXP 23
 957: PUSH
 958: LD_INT 2
 960: PUSH
 961: LD_INT 3
 963: PUSH
 964: LD_INT 4
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: PUSH
 976: LD_EXP 3
 980: PUSH
 981: LD_INT 1
 983: PLUS
 984: ARRAY
 985: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 986: LD_ADDR_EXP 25
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: LD_INT 0
 996: PUSH
 997: LD_INT 0
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 30
1007: PUSH
1008: LD_INT 0
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: PUSH
1019: LD_INT 50
1021: PUSH
1022: LD_INT 20
1024: PUSH
1025: LD_INT 0
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_INT 80
1035: PUSH
1036: LD_INT 40
1038: PUSH
1039: LD_INT 20
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 4
1057: PUSH
1058: LD_INT 1
1060: PLUS
1061: ARRAY
1062: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1063: LD_ADDR_EXP 24
1067: PUSH
1068: LD_INT 10
1070: PUSH
1071: EMPTY
1072: LIST
1073: PUSH
1074: LD_INT 7
1076: PUSH
1077: LD_INT 14
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 6
1086: PUSH
1087: LD_INT 12
1089: PUSH
1090: LD_INT 18
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 5
1100: PUSH
1101: LD_INT 10
1103: PUSH
1104: LD_INT 15
1106: PUSH
1107: LD_INT 20
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 4
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// shipments_density = [ 15 , 20 , 25 ] [ def_shipments_density + 1 ] ;
1132: LD_ADDR_EXP 26
1136: PUSH
1137: LD_INT 15
1139: PUSH
1140: LD_INT 20
1142: PUSH
1143: LD_INT 25
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_EXP 5
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: ARRAY
1160: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1161: LD_ADDR_EXP 22
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: LD_INT 2
1174: PUSH
1175: LD_INT 3
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: PUSH
1184: LD_EXP 12
1188: PUSH
1189: LD_INT 1
1191: PLUS
1192: ARRAY
1193: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1194: LD_ADDR_EXP 28
1198: PUSH
1199: LD_INT 0
1201: PUSH
1202: LD_INT 165
1204: PUSH
1205: LD_INT 140
1207: PUSH
1208: LD_INT 115
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: PUSH
1217: LD_EXP 12
1221: PUSH
1222: LD_INT 1
1224: PLUS
1225: ARRAY
1226: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1227: LD_ADDR_EXP 29
1231: PUSH
1232: LD_INT 0
1234: PUSH
1235: LD_INT 8400
1237: PUSH
1238: LD_INT 1750
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: PUSH
1246: LD_EXP 11
1250: PUSH
1251: LD_INT 1
1253: PLUS
1254: ARRAY
1255: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1256: LD_ADDR_EXP 30
1260: PUSH
1261: LD_INT 0
1263: PUSH
1264: LD_INT 21000
1266: PUSH
1267: LD_INT 4200
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: PUSH
1275: LD_EXP 11
1279: PUSH
1280: LD_INT 1
1282: PLUS
1283: ARRAY
1284: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1285: LD_ADDR_EXP 27
1289: PUSH
1290: LD_INT 1
1292: NEG
1293: PUSH
1294: LD_INT 350
1296: PUSH
1297: LD_INT 700
1299: PUSH
1300: LD_INT 1400
1302: PUSH
1303: LD_INT 0
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_EXP 9
1317: PUSH
1318: LD_INT 1
1320: PLUS
1321: ARRAY
1322: ST_TO_ADDR
// battle_flags_id = [ ] ;
1323: LD_ADDR_EXP 44
1327: PUSH
1328: EMPTY
1329: ST_TO_ADDR
// amount_score = [ 200 , 300 , 500 , 700 , 1000 , 1500 ] [ def_amount_score + 1 ] ;
1330: LD_ADDR_EXP 31
1334: PUSH
1335: LD_INT 200
1337: PUSH
1338: LD_INT 300
1340: PUSH
1341: LD_INT 500
1343: PUSH
1344: LD_INT 700
1346: PUSH
1347: LD_INT 1000
1349: PUSH
1350: LD_INT 1500
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: PUSH
1361: LD_EXP 15
1365: PUSH
1366: LD_INT 1
1368: PLUS
1369: ARRAY
1370: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1371: LD_EXP 13
1375: PUSH
1376: LD_INT 0
1378: EQUAL
1379: IFFALSE 1391
// siberite_bomb_Delay = 0 else
1381: LD_ADDR_EXP 32
1385: PUSH
1386: LD_INT 0
1388: ST_TO_ADDR
1389: GO 1413
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1391: LD_ADDR_EXP 32
1395: PUSH
1396: LD_EXP 13
1400: PUSH
1401: LD_INT 1
1403: MINUS
1404: PUSH
1405: LD_INT 21000
1407: MUL
1408: PUSH
1409: LD_INT 1
1411: PLUS
1412: ST_TO_ADDR
// king_territory = KopecStred ;
1413: LD_ADDR_EXP 45
1417: PUSH
1418: LD_INT 2
1420: ST_TO_ADDR
// final_count = amount_score ;
1421: LD_ADDR_EXP 46
1425: PUSH
1426: LD_EXP 31
1430: ST_TO_ADDR
// end ;
1431: LD_VAR 0 1
1435: RET
// function init_map ; var i ; begin
1436: LD_INT 0
1438: PPUSH
1439: PPUSH
// extra_oil_deposits_locations := [ [ 53 , 26 ] , [ 51 , 53 ] , [ 129 , 20 ] , [ 155 , 53 ] , [ 187 , 139 ] , [ 183 , 107 ] , [ 106 , 135 ] , [ 80 , 106 ] ] ;
1440: LD_ADDR_EXP 43
1444: PUSH
1445: LD_INT 53
1447: PUSH
1448: LD_INT 26
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 51
1457: PUSH
1458: LD_INT 53
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PUSH
1465: LD_INT 129
1467: PUSH
1468: LD_INT 20
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: PUSH
1475: LD_INT 155
1477: PUSH
1478: LD_INT 53
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: PUSH
1485: LD_INT 187
1487: PUSH
1488: LD_INT 139
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PUSH
1495: LD_INT 183
1497: PUSH
1498: LD_INT 107
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: PUSH
1505: LD_INT 106
1507: PUSH
1508: LD_INT 135
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PUSH
1515: LD_INT 80
1517: PUSH
1518: LD_INT 106
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: ST_TO_ADDR
// depot_def := [ [ 29 , 22 , 3 ] , [ 154 , 21 , 3 ] , [ 85 , 138 , 0 ] , [ 212 , 141 , 5 ] ] ;
1535: LD_ADDR_EXP 40
1539: PUSH
1540: LD_INT 29
1542: PUSH
1543: LD_INT 22
1545: PUSH
1546: LD_INT 3
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 154
1556: PUSH
1557: LD_INT 21
1559: PUSH
1560: LD_INT 3
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: PUSH
1568: LD_INT 85
1570: PUSH
1571: LD_INT 138
1573: PUSH
1574: LD_INT 0
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 212
1584: PUSH
1585: LD_INT 141
1587: PUSH
1588: LD_INT 5
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: ST_TO_ADDR
// start_def := [ [ 33 , 25 ] , [ 151 , 24 ] , [ 89 , 135 ] , [ 205 , 137 ] ] ;
1602: LD_ADDR_EXP 42
1606: PUSH
1607: LD_INT 33
1609: PUSH
1610: LD_INT 25
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 151
1619: PUSH
1620: LD_INT 24
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 89
1629: PUSH
1630: LD_INT 135
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 205
1639: PUSH
1640: LD_INT 137
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: ST_TO_ADDR
// breastworks_def := [ [ [ 46 , 13 , 4 ] , [ 43 , 39 , 4 ] , [ 47 , 25 , 5 ] , [ 45 , 44 , 5 ] ] , [ [ 129 , 12 , 0 ] , [ 153 , 34 , 1 ] , [ 139 , 24 , 0 ] , [ 158 , 41 , 0 ] ] , [ [ 84 , 121 , 4 ] , [ 109 , 143 , 4 ] , [ 87 , 126 , 4 ] , [ 111 , 148 , 4 ] ] , [ [ 194 , 146 , 2 ] , [ 195 , 121 , 1 ] , [ 193 , 135 , 2 ] , [ 192 , 116 , 2 ] ] , ] ;
1653: LD_ADDR_EXP 41
1657: PUSH
1658: LD_INT 46
1660: PUSH
1661: LD_INT 13
1663: PUSH
1664: LD_INT 4
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: PUSH
1672: LD_INT 43
1674: PUSH
1675: LD_INT 39
1677: PUSH
1678: LD_INT 4
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 47
1688: PUSH
1689: LD_INT 25
1691: PUSH
1692: LD_INT 5
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: LIST
1699: PUSH
1700: LD_INT 45
1702: PUSH
1703: LD_INT 44
1705: PUSH
1706: LD_INT 5
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: LIST
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 129
1722: PUSH
1723: LD_INT 12
1725: PUSH
1726: LD_INT 0
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 153
1736: PUSH
1737: LD_INT 34
1739: PUSH
1740: LD_INT 1
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 139
1750: PUSH
1751: LD_INT 24
1753: PUSH
1754: LD_INT 0
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: PUSH
1762: LD_INT 158
1764: PUSH
1765: LD_INT 41
1767: PUSH
1768: LD_INT 0
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: LIST
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: PUSH
1782: LD_INT 84
1784: PUSH
1785: LD_INT 121
1787: PUSH
1788: LD_INT 4
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 109
1798: PUSH
1799: LD_INT 143
1801: PUSH
1802: LD_INT 4
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 87
1812: PUSH
1813: LD_INT 126
1815: PUSH
1816: LD_INT 4
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 111
1826: PUSH
1827: LD_INT 148
1829: PUSH
1830: LD_INT 4
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 194
1846: PUSH
1847: LD_INT 146
1849: PUSH
1850: LD_INT 2
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 195
1860: PUSH
1861: LD_INT 121
1863: PUSH
1864: LD_INT 1
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: LD_INT 193
1874: PUSH
1875: LD_INT 135
1877: PUSH
1878: LD_INT 2
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 192
1888: PUSH
1889: LD_INT 116
1891: PUSH
1892: LD_INT 2
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// if def_extra_oil_deposits then
1912: LD_EXP 6
1916: IFFALSE 1960
// for i in extra_oil_deposits_locations do
1918: LD_ADDR_VAR 0 2
1922: PUSH
1923: LD_EXP 43
1927: PUSH
1928: FOR_IN
1929: IFFALSE 1958
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1931: LD_VAR 0 2
1935: PUSH
1936: LD_INT 1
1938: ARRAY
1939: PPUSH
1940: LD_VAR 0 2
1944: PUSH
1945: LD_INT 2
1947: ARRAY
1948: PPUSH
1949: LD_INT 2
1951: PPUSH
1952: CALL_OW 62
1956: GO 1928
1958: POP
1959: POP
// end ;
1960: LD_VAR 0 1
1964: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1965: LD_INT 0
1967: PPUSH
1968: PPUSH
1969: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1970: LD_ADDR_EXP 39
1974: PUSH
1975: LD_EXP 34
1979: PUSH
1980: LD_INT 0
1982: PUSH
1983: EMPTY
1984: LIST
1985: DIFF
1986: PUSH
1987: LD_INT 1
1989: GREATER
1990: ST_TO_ADDR
// if not Team_Game then
1991: LD_EXP 39
1995: NOT
1996: IFFALSE 2094
// begin for i = 1 to 8 do
1998: LD_ADDR_VAR 0 2
2002: PUSH
2003: DOUBLE
2004: LD_INT 1
2006: DEC
2007: ST_TO_ADDR
2008: LD_INT 8
2010: PUSH
2011: FOR_TO
2012: IFFALSE 2090
// for j = 1 to 8 do
2014: LD_ADDR_VAR 0 3
2018: PUSH
2019: DOUBLE
2020: LD_INT 1
2022: DEC
2023: ST_TO_ADDR
2024: LD_INT 8
2026: PUSH
2027: FOR_TO
2028: IFFALSE 2086
// if i <> j then
2030: LD_VAR 0 2
2034: PUSH
2035: LD_VAR 0 3
2039: NONEQUAL
2040: IFFALSE 2064
// SetAttitude ( i , j , att_neutral , true ) else
2042: LD_VAR 0 2
2046: PPUSH
2047: LD_VAR 0 3
2051: PPUSH
2052: LD_INT 0
2054: PPUSH
2055: LD_INT 1
2057: PPUSH
2058: CALL_OW 80
2062: GO 2084
// SetAttitude ( i , j , att_friend , true ) ;
2064: LD_VAR 0 2
2068: PPUSH
2069: LD_VAR 0 3
2073: PPUSH
2074: LD_INT 1
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL_OW 80
2084: GO 2027
2086: POP
2087: POP
2088: GO 2011
2090: POP
2091: POP
// end else
2092: GO 2269
// begin if def_shared_vision then
2094: LD_EXP 8
2098: IFFALSE 2163
// begin for i in Teams do
2100: LD_ADDR_VAR 0 2
2104: PUSH
2105: LD_EXP 35
2109: PUSH
2110: FOR_IN
2111: IFFALSE 2161
// for j = 2 to i do
2113: LD_ADDR_VAR 0 3
2117: PUSH
2118: DOUBLE
2119: LD_INT 2
2121: DEC
2122: ST_TO_ADDR
2123: LD_VAR 0 2
2127: PUSH
2128: FOR_TO
2129: IFFALSE 2157
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2131: LD_VAR 0 2
2135: PUSH
2136: LD_VAR 0 3
2140: ARRAY
2141: PPUSH
2142: LD_VAR 0 2
2146: PUSH
2147: LD_INT 1
2149: ARRAY
2150: PPUSH
2151: CALL_OW 343
2155: GO 2128
2157: POP
2158: POP
2159: GO 2110
2161: POP
2162: POP
// end ; for i = 1 to 8 do
2163: LD_ADDR_VAR 0 2
2167: PUSH
2168: DOUBLE
2169: LD_INT 1
2171: DEC
2172: ST_TO_ADDR
2173: LD_INT 8
2175: PUSH
2176: FOR_TO
2177: IFFALSE 2267
// for j = 1 to 8 do
2179: LD_ADDR_VAR 0 3
2183: PUSH
2184: DOUBLE
2185: LD_INT 1
2187: DEC
2188: ST_TO_ADDR
2189: LD_INT 8
2191: PUSH
2192: FOR_TO
2193: IFFALSE 2263
// if Side_Teams [ i ] = Side_Teams [ j ] then
2195: LD_EXP 34
2199: PUSH
2200: LD_VAR 0 2
2204: ARRAY
2205: PUSH
2206: LD_EXP 34
2210: PUSH
2211: LD_VAR 0 3
2215: ARRAY
2216: EQUAL
2217: IFFALSE 2241
// SetAttitude ( i , j , att_friend , true ) else
2219: LD_VAR 0 2
2223: PPUSH
2224: LD_VAR 0 3
2228: PPUSH
2229: LD_INT 1
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL_OW 80
2239: GO 2261
// SetAttitude ( i , j , att_enemy , true ) ;
2241: LD_VAR 0 2
2245: PPUSH
2246: LD_VAR 0 3
2250: PPUSH
2251: LD_INT 2
2253: PPUSH
2254: LD_INT 1
2256: PPUSH
2257: CALL_OW 80
2261: GO 2192
2263: POP
2264: POP
2265: GO 2176
2267: POP
2268: POP
// end ; end ;
2269: LD_VAR 0 1
2273: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2274: LD_INT 0
2276: PPUSH
2277: PPUSH
2278: PPUSH
2279: PPUSH
// result := [ ] ;
2280: LD_ADDR_VAR 0 6
2284: PUSH
2285: EMPTY
2286: ST_TO_ADDR
// for i := 1 to count do
2287: LD_ADDR_VAR 0 7
2291: PUSH
2292: DOUBLE
2293: LD_INT 1
2295: DEC
2296: ST_TO_ADDR
2297: LD_VAR 0 1
2301: PUSH
2302: FOR_TO
2303: IFFALSE 2699
// begin uc_direction := Rand ( 0 , 5 ) ;
2305: LD_ADDR_OWVAR 24
2309: PUSH
2310: LD_INT 0
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: CALL_OW 12
2320: ST_TO_ADDR
// if commander then
2321: LD_LOC 1
2325: IFFALSE 2434
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2327: LD_ADDR_OWVAR 26
2331: PUSH
2332: LD_OWVAR 19
2336: PUSH
2337: LD_OWVAR 20
2341: ARRAY
2342: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2343: LD_INT 1
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 12
2353: PPUSH
2354: LD_VAR 0 2
2358: PPUSH
2359: LD_EXP 23
2363: PUSH
2364: LD_INT 2
2366: PLUS
2367: PPUSH
2368: CALL_OW 380
// hc_importance := 105 ;
2372: LD_ADDR_OWVAR 32
2376: PUSH
2377: LD_INT 105
2379: ST_TO_ADDR
// commander := false ;
2380: LD_ADDR_LOC 1
2384: PUSH
2385: LD_INT 0
2387: ST_TO_ADDR
// if Multiplayer then
2388: LD_OWVAR 4
2392: IFFALSE 2432
// begin hc_gallery := MULTIAVATARS ;
2394: LD_ADDR_OWVAR 33
2398: PUSH
2399: LD_STRING MULTIAVATARS
2401: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2402: LD_ADDR_OWVAR 34
2406: PUSH
2407: LD_OWVAR 20
2411: PPUSH
2412: CALL_OW 525
2416: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2417: LD_ADDR_OWVAR 27
2421: PUSH
2422: LD_OWVAR 20
2426: PPUSH
2427: CALL_OW 526
2431: ST_TO_ADDR
// end ; end else
2432: GO 2497
// begin hc_name :=  ;
2434: LD_ADDR_OWVAR 26
2438: PUSH
2439: LD_STRING 
2441: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2442: LD_INT 1
2444: PPUSH
2445: LD_INT 2
2447: PPUSH
2448: CALL_OW 12
2452: PPUSH
2453: LD_VAR 0 2
2457: PPUSH
2458: LD_EXP 23
2462: PPUSH
2463: CALL_OW 380
// hc_importance := 0 ;
2467: LD_ADDR_OWVAR 32
2471: PUSH
2472: LD_INT 0
2474: ST_TO_ADDR
// if Multiplayer then
2475: LD_OWVAR 4
2479: IFFALSE 2497
// begin hc_gallery :=  ;
2481: LD_ADDR_OWVAR 33
2485: PUSH
2486: LD_STRING 
2488: ST_TO_ADDR
// hc_face_number := 0 ;
2489: LD_ADDR_OWVAR 34
2493: PUSH
2494: LD_INT 0
2496: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2497: LD_ADDR_VAR 0 9
2501: PUSH
2502: CALL_OW 44
2506: ST_TO_ADDR
// if global_defined then
2507: LD_LOC 3
2511: IFFALSE 2651
// begin if ( cl = class_soldier ) then
2513: LD_VAR 0 2
2517: PUSH
2518: LD_INT 1
2520: EQUAL
2521: IFFALSE 2541
// j := i + soldiers_created else
2523: LD_ADDR_VAR 0 8
2527: PUSH
2528: LD_VAR 0 7
2532: PUSH
2533: LD_LOC 4
2537: PLUS
2538: ST_TO_ADDR
2539: GO 2551
// j := i ;
2541: LD_ADDR_VAR 0 8
2545: PUSH
2546: LD_VAR 0 7
2550: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2551: LD_LOC 2
2555: PUSH
2556: LD_VAR 0 2
2560: ARRAY
2561: PUSH
2562: LD_VAR 0 8
2566: ARRAY
2567: PPUSH
2568: LD_VAR 0 9
2572: PPUSH
2573: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2577: LD_VAR 0 9
2581: PPUSH
2582: LD_INT 2
2584: PPUSH
2585: LD_LOC 2
2589: PUSH
2590: LD_VAR 0 2
2594: ARRAY
2595: PUSH
2596: LD_VAR 0 8
2600: ARRAY
2601: PPUSH
2602: LD_INT 2
2604: PPUSH
2605: CALL_OW 260
2609: PPUSH
2610: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2614: LD_VAR 0 9
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: LD_LOC 2
2626: PUSH
2627: LD_VAR 0 2
2631: ARRAY
2632: PUSH
2633: LD_VAR 0 8
2637: ARRAY
2638: PPUSH
2639: LD_INT 1
2641: PPUSH
2642: CALL_OW 260
2646: PPUSH
2647: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2651: LD_VAR 0 9
2655: PPUSH
2656: LD_VAR 0 3
2660: PPUSH
2661: LD_VAR 0 4
2665: PPUSH
2666: LD_VAR 0 5
2670: PPUSH
2671: LD_INT 0
2673: PPUSH
2674: CALL_OW 50
// result := result ^ [ un ] ;
2678: LD_ADDR_VAR 0 6
2682: PUSH
2683: LD_VAR 0 6
2687: PUSH
2688: LD_VAR 0 9
2692: PUSH
2693: EMPTY
2694: LIST
2695: ADD
2696: ST_TO_ADDR
// end ;
2697: GO 2302
2699: POP
2700: POP
// if not global_defined then
2701: LD_LOC 3
2705: NOT
2706: IFFALSE 2784
// if ( global_units >= cl ) then
2708: LD_LOC 2
2712: PUSH
2713: LD_VAR 0 2
2717: GREATEREQUAL
2718: IFFALSE 2759
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2720: LD_ADDR_LOC 2
2724: PUSH
2725: LD_LOC 2
2729: PPUSH
2730: LD_VAR 0 2
2734: PPUSH
2735: LD_LOC 2
2739: PUSH
2740: LD_VAR 0 2
2744: ARRAY
2745: PUSH
2746: LD_VAR 0 6
2750: ADD
2751: PPUSH
2752: CALL_OW 1
2756: ST_TO_ADDR
2757: GO 2784
// global_units := Replace ( global_units , cl , result ) ;
2759: LD_ADDR_LOC 2
2763: PUSH
2764: LD_LOC 2
2768: PPUSH
2769: LD_VAR 0 2
2773: PPUSH
2774: LD_VAR 0 6
2778: PPUSH
2779: CALL_OW 1
2783: ST_TO_ADDR
// end ;
2784: LD_VAR 0 6
2788: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , sol , br , dep ; begin
2789: LD_INT 0
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
2800: PPUSH
// if side in [ 0 , 9 ] then
2801: LD_VAR 0 1
2805: PUSH
2806: LD_INT 0
2808: PUSH
2809: LD_INT 9
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: IN
2816: IFFALSE 2820
// exit ;
2818: GO 3927
// pos := Side_Positions [ side ] ;
2820: LD_ADDR_VAR 0 3
2824: PUSH
2825: LD_EXP 37
2829: PUSH
2830: LD_VAR 0 1
2834: ARRAY
2835: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2836: LD_ADDR_OWVAR 21
2840: PUSH
2841: LD_EXP 38
2845: PUSH
2846: LD_VAR 0 1
2850: ARRAY
2851: ST_TO_ADDR
// uc_side := side ;
2852: LD_ADDR_OWVAR 20
2856: PUSH
2857: LD_VAR 0 1
2861: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2862: LD_ADDR_VAR 0 4
2866: PUSH
2867: LD_EXP 40
2871: PUSH
2872: LD_VAR 0 3
2876: ARRAY
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2882: LD_ADDR_VAR 0 5
2886: PUSH
2887: LD_EXP 40
2891: PUSH
2892: LD_VAR 0 3
2896: ARRAY
2897: PUSH
2898: LD_INT 2
2900: ARRAY
2901: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2902: LD_ADDR_VAR 0 6
2906: PUSH
2907: LD_EXP 40
2911: PUSH
2912: LD_VAR 0 3
2916: ARRAY
2917: PUSH
2918: LD_INT 3
2920: ARRAY
2921: ST_TO_ADDR
// if is_depot then
2922: LD_EXP 19
2926: IFFALSE 3059
// begin bc_type = b_depot ;
2928: LD_ADDR_OWVAR 42
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2936: LD_ADDR_VAR 0 11
2940: PUSH
2941: LD_VAR 0 4
2945: PPUSH
2946: LD_VAR 0 5
2950: PPUSH
2951: LD_VAR 0 6
2955: PPUSH
2956: CALL_OW 47
2960: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2961: LD_VAR 0 11
2965: PPUSH
2966: LD_STRING @
2968: PUSH
2969: LD_VAR 0 1
2973: STR
2974: PPUSH
2975: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2979: LD_VAR 0 11
2983: PPUSH
2984: CALL_OW 274
2988: PPUSH
2989: LD_INT 1
2991: PPUSH
2992: LD_EXP 25
2996: PUSH
2997: LD_INT 1
2999: ARRAY
3000: PPUSH
3001: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3005: LD_VAR 0 11
3009: PPUSH
3010: CALL_OW 274
3014: PPUSH
3015: LD_INT 2
3017: PPUSH
3018: LD_EXP 25
3022: PUSH
3023: LD_INT 2
3025: ARRAY
3026: PPUSH
3027: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3031: LD_VAR 0 11
3035: PPUSH
3036: CALL_OW 274
3040: PPUSH
3041: LD_INT 3
3043: PPUSH
3044: LD_EXP 25
3048: PUSH
3049: LD_INT 3
3051: ARRAY
3052: PPUSH
3053: CALL_OW 277
// end else
3057: GO 3203
// begin for i := 1 to 3 do
3059: LD_ADDR_VAR 0 7
3063: PUSH
3064: DOUBLE
3065: LD_INT 1
3067: DEC
3068: ST_TO_ADDR
3069: LD_INT 3
3071: PUSH
3072: FOR_TO
3073: IFFALSE 3201
// begin r := starting_resources [ i ] ;
3075: LD_ADDR_VAR 0 8
3079: PUSH
3080: LD_EXP 25
3084: PUSH
3085: LD_VAR 0 7
3089: ARRAY
3090: ST_TO_ADDR
// while r >= 10 do
3091: LD_VAR 0 8
3095: PUSH
3096: LD_INT 10
3098: GREATEREQUAL
3099: IFFALSE 3199
// if r > 50 then
3101: LD_VAR 0 8
3105: PUSH
3106: LD_INT 50
3108: GREATER
3109: IFFALSE 3155
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3111: LD_VAR 0 7
3115: PPUSH
3116: LD_INT 5
3118: PPUSH
3119: LD_VAR 0 4
3123: PPUSH
3124: LD_VAR 0 5
3128: PPUSH
3129: LD_INT 4
3131: PPUSH
3132: LD_INT 0
3134: PPUSH
3135: CALL_OW 60
// r := r - 50 ;
3139: LD_ADDR_VAR 0 8
3143: PUSH
3144: LD_VAR 0 8
3148: PUSH
3149: LD_INT 50
3151: MINUS
3152: ST_TO_ADDR
// end else
3153: GO 3197
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3155: LD_VAR 0 7
3159: PPUSH
3160: LD_VAR 0 8
3164: PUSH
3165: LD_INT 10
3167: DIV
3168: PPUSH
3169: LD_VAR 0 4
3173: PPUSH
3174: LD_VAR 0 5
3178: PPUSH
3179: LD_INT 4
3181: PPUSH
3182: LD_INT 0
3184: PPUSH
3185: CALL_OW 60
// r := 0 ;
3189: LD_ADDR_VAR 0 8
3193: PUSH
3194: LD_INT 0
3196: ST_TO_ADDR
// end ;
3197: GO 3091
// end ;
3199: GO 3072
3201: POP
3202: POP
// end ; for r in starting_crates do
3203: LD_ADDR_VAR 0 8
3207: PUSH
3208: LD_EXP 24
3212: PUSH
3213: FOR_IN
3214: IFFALSE 3246
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3216: LD_INT 1
3218: PPUSH
3219: LD_INT 5
3221: PPUSH
3222: LD_VAR 0 4
3226: PPUSH
3227: LD_VAR 0 5
3231: PPUSH
3232: LD_VAR 0 8
3236: PPUSH
3237: LD_INT 0
3239: PPUSH
3240: CALL_OW 60
3244: GO 3213
3246: POP
3247: POP
// if def_morale_flags then
3248: LD_EXP 9
3252: IFFALSE 3391
// begin x := start_def [ pos ] [ 1 ] ;
3254: LD_ADDR_VAR 0 4
3258: PUSH
3259: LD_EXP 42
3263: PUSH
3264: LD_VAR 0 3
3268: ARRAY
3269: PUSH
3270: LD_INT 1
3272: ARRAY
3273: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3274: LD_ADDR_VAR 0 5
3278: PUSH
3279: LD_EXP 42
3283: PUSH
3284: LD_VAR 0 3
3288: ARRAY
3289: PUSH
3290: LD_INT 2
3292: ARRAY
3293: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3294: LD_VAR 0 4
3298: PPUSH
3299: LD_VAR 0 5
3303: PPUSH
3304: LD_INT 12
3306: PPUSH
3307: LD_INT 2
3309: PPUSH
3310: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3314: LD_ADDR_EXP 44
3318: PUSH
3319: LD_EXP 44
3323: PUSH
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_VAR 0 4
3333: PPUSH
3334: LD_VAR 0 5
3338: PPUSH
3339: LD_INT 1
3341: PUSH
3342: LD_INT 100
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 2
3351: PUSH
3352: LD_INT 50
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 3
3361: PUSH
3362: LD_INT 20
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 20
3371: PUSH
3372: LD_INT 100
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: PPUSH
3385: CALL_OW 418
3389: ADD
3390: ST_TO_ADDR
// end ; commander := true ;
3391: LD_ADDR_LOC 1
3395: PUSH
3396: LD_INT 1
3398: ST_TO_ADDR
// soldiers_created := 0 ;
3399: LD_ADDR_LOC 4
3403: PUSH
3404: LD_INT 0
3406: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3407: LD_ADDR_VAR 0 7
3411: PUSH
3412: DOUBLE
3413: LD_INT 1
3415: DEC
3416: ST_TO_ADDR
3417: LD_EXP 20
3421: PUSH
3422: FOR_TO
3423: IFFALSE 3645
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3425: LD_ADDR_VAR 0 4
3429: PUSH
3430: LD_EXP 41
3434: PUSH
3435: LD_VAR 0 3
3439: ARRAY
3440: PUSH
3441: LD_VAR 0 7
3445: ARRAY
3446: PUSH
3447: LD_INT 1
3449: ARRAY
3450: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3451: LD_ADDR_VAR 0 5
3455: PUSH
3456: LD_EXP 41
3460: PUSH
3461: LD_VAR 0 3
3465: ARRAY
3466: PUSH
3467: LD_VAR 0 7
3471: ARRAY
3472: PUSH
3473: LD_INT 2
3475: ARRAY
3476: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3477: LD_ADDR_VAR 0 6
3481: PUSH
3482: LD_EXP 41
3486: PUSH
3487: LD_VAR 0 3
3491: ARRAY
3492: PUSH
3493: LD_VAR 0 7
3497: ARRAY
3498: PUSH
3499: LD_INT 3
3501: ARRAY
3502: ST_TO_ADDR
// bc_type := b_breastwork ;
3503: LD_ADDR_OWVAR 42
3507: PUSH
3508: LD_INT 31
3510: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3511: LD_ADDR_VAR 0 10
3515: PUSH
3516: LD_VAR 0 4
3520: PPUSH
3521: LD_VAR 0 5
3525: PPUSH
3526: LD_VAR 0 6
3530: PPUSH
3531: CALL_OW 47
3535: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3536: LD_ADDR_VAR 0 4
3540: PUSH
3541: LD_VAR 0 4
3545: PPUSH
3546: LD_VAR 0 6
3550: PPUSH
3551: LD_INT 2
3553: PPUSH
3554: CALL_OW 272
3558: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3559: LD_ADDR_VAR 0 5
3563: PUSH
3564: LD_VAR 0 5
3568: PPUSH
3569: LD_VAR 0 6
3573: PPUSH
3574: LD_INT 2
3576: PPUSH
3577: CALL_OW 273
3581: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3582: LD_ADDR_VAR 0 9
3586: PUSH
3587: LD_INT 1
3589: PPUSH
3590: LD_INT 1
3592: PPUSH
3593: LD_VAR 0 4
3597: PPUSH
3598: LD_VAR 0 5
3602: PPUSH
3603: LD_INT 0
3605: PPUSH
3606: CALL 2274 0 5
3610: PUSH
3611: LD_INT 1
3613: ARRAY
3614: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3615: LD_ADDR_LOC 4
3619: PUSH
3620: LD_LOC 4
3624: PUSH
3625: LD_INT 1
3627: PLUS
3628: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3629: LD_VAR 0 9
3633: PPUSH
3634: LD_VAR 0 10
3638: PPUSH
3639: CALL_OW 120
// end ;
3643: GO 3422
3645: POP
3646: POP
// x := start_def [ pos ] [ 1 ] ;
3647: LD_ADDR_VAR 0 4
3651: PUSH
3652: LD_EXP 42
3656: PUSH
3657: LD_VAR 0 3
3661: ARRAY
3662: PUSH
3663: LD_INT 1
3665: ARRAY
3666: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3667: LD_ADDR_VAR 0 5
3671: PUSH
3672: LD_EXP 42
3676: PUSH
3677: LD_VAR 0 3
3681: ARRAY
3682: PUSH
3683: LD_INT 2
3685: ARRAY
3686: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
3687: LD_LOC 8
3691: PUSH
3692: LD_EXP 20
3696: MINUS
3697: PPUSH
3698: LD_INT 1
3700: PPUSH
3701: LD_VAR 0 4
3705: PPUSH
3706: LD_VAR 0 5
3710: PPUSH
3711: LD_INT 5
3713: PPUSH
3714: CALL 2274 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
3718: LD_LOC 5
3722: PPUSH
3723: LD_INT 2
3725: PPUSH
3726: LD_VAR 0 4
3730: PPUSH
3731: LD_VAR 0 5
3735: PPUSH
3736: LD_INT 5
3738: PPUSH
3739: CALL 2274 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
3743: LD_LOC 7
3747: PPUSH
3748: LD_INT 3
3750: PPUSH
3751: LD_VAR 0 4
3755: PPUSH
3756: LD_VAR 0 5
3760: PPUSH
3761: LD_INT 5
3763: PPUSH
3764: CALL 2274 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
3768: LD_LOC 6
3772: PPUSH
3773: LD_INT 4
3775: PPUSH
3776: LD_VAR 0 4
3780: PPUSH
3781: LD_VAR 0 5
3785: PPUSH
3786: LD_INT 5
3788: PPUSH
3789: CALL 2274 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3793: LD_EXP 10
3797: PUSH
3798: LD_INT 20
3800: PPUSH
3801: LD_VAR 0 1
3805: PPUSH
3806: CALL_OW 321
3810: PUSH
3811: LD_INT 1
3813: EQUAL
3814: AND
3815: IFFALSE 3832
// SetTech ( tech_SibDet , side , state_researched ) ;
3817: LD_INT 20
3819: PPUSH
3820: LD_VAR 0 1
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: CALL_OW 322
// if def_siberite_bomb = 1 then
3832: LD_EXP 13
3836: PUSH
3837: LD_INT 1
3839: EQUAL
3840: IFFALSE 3874
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3842: LD_INT 25
3844: PPUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_INT 1
3852: PPUSH
3853: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3857: LD_INT 73
3859: PPUSH
3860: LD_VAR 0 1
3864: PPUSH
3865: LD_INT 1
3867: PPUSH
3868: CALL_OW 322
// end else
3872: GO 3904
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3874: LD_INT 25
3876: PPUSH
3877: LD_VAR 0 1
3881: PPUSH
3882: LD_INT 0
3884: PPUSH
3885: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3889: LD_INT 73
3891: PPUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3904: LD_INT 24
3906: PPUSH
3907: LD_VAR 0 1
3911: PPUSH
3912: LD_INT 0
3914: PPUSH
3915: CALL_OW 322
// global_defined := true ;
3919: LD_ADDR_LOC 3
3923: PUSH
3924: LD_INT 1
3926: ST_TO_ADDR
// end ;
3927: LD_VAR 0 2
3931: RET
// every 0 0$1 do
3932: GO 3934
3934: DISABLE
// if ( def_siberite_bomb > 1 ) then
3935: LD_EXP 13
3939: PUSH
3940: LD_INT 1
3942: GREATER
3943: IFFALSE 3958
// begin wait ( siberite_bomb_Delay ) ;
3945: LD_EXP 32
3949: PPUSH
3950: CALL_OW 67
// EnableSibFiss ;
3954: CALL 3959 0 0
// end ;
3958: END
// function EnableSibFiss ; var i ; begin
3959: LD_INT 0
3961: PPUSH
3962: PPUSH
// for i := 1 to 8 do
3963: LD_ADDR_VAR 0 2
3967: PUSH
3968: DOUBLE
3969: LD_INT 1
3971: DEC
3972: ST_TO_ADDR
3973: LD_INT 8
3975: PUSH
3976: FOR_TO
3977: IFFALSE 4023
// if Side_Positions [ i ] then
3979: LD_EXP 37
3983: PUSH
3984: LD_VAR 0 2
3988: ARRAY
3989: IFFALSE 4021
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3991: LD_INT 25
3993: PPUSH
3994: LD_VAR 0 2
3998: PPUSH
3999: LD_INT 1
4001: PPUSH
4002: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4006: LD_INT 73
4008: PPUSH
4009: LD_VAR 0 2
4013: PPUSH
4014: LD_INT 1
4016: PPUSH
4017: CALL_OW 322
// end ;
4021: GO 3976
4023: POP
4024: POP
// end ;
4025: LD_VAR 0 1
4029: RET
// function prepare_sides ; var i ; begin
4030: LD_INT 0
4032: PPUSH
4033: PPUSH
// global_units := [ ] ;
4034: LD_ADDR_LOC 2
4038: PUSH
4039: EMPTY
4040: ST_TO_ADDR
// global_defined := false ;
4041: LD_ADDR_LOC 3
4045: PUSH
4046: LD_INT 0
4048: ST_TO_ADDR
// CountClassMembers ;
4049: CALL 4099 0 0
// for i := 1 to 8 do
4053: LD_ADDR_VAR 0 2
4057: PUSH
4058: DOUBLE
4059: LD_INT 1
4061: DEC
4062: ST_TO_ADDR
4063: LD_INT 8
4065: PUSH
4066: FOR_TO
4067: IFFALSE 4092
// if Side_Positions [ i ] then
4069: LD_EXP 37
4073: PUSH
4074: LD_VAR 0 2
4078: ARRAY
4079: IFFALSE 4090
// prepare_side ( i ) ;
4081: LD_VAR 0 2
4085: PPUSH
4086: CALL 2789 0 1
4090: GO 4066
4092: POP
4093: POP
// end ;
4094: LD_VAR 0 1
4098: RET
// function CountClassMembers ; var Mode ; begin
4099: LD_INT 0
4101: PPUSH
4102: PPUSH
// if No_Mechs then
4103: LD_EXP 17
4107: IFFALSE 4119
// Mode := 2 else
4109: LD_ADDR_VAR 0 2
4113: PUSH
4114: LD_INT 2
4116: ST_TO_ADDR
4117: GO 4127
// Mode := 1 ;
4119: LD_ADDR_VAR 0 2
4123: PUSH
4124: LD_INT 1
4126: ST_TO_ADDR
// neng := number_of_people ;
4127: LD_ADDR_LOC 5
4131: PUSH
4132: LD_EXP 21
4136: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4137: LD_ADDR_LOC 8
4141: PUSH
4142: LD_LOC 5
4146: PUSH
4147: LD_INT 4
4149: PUSH
4150: LD_INT 3
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PUSH
4157: LD_VAR 0 2
4161: ARRAY
4162: DIV
4163: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4164: LD_LOC 8
4168: PUSH
4169: LD_EXP 20
4173: LESS
4174: IFFALSE 4186
// nsol := number_of_breastworks ;
4176: LD_ADDR_LOC 8
4180: PUSH
4181: LD_EXP 20
4185: ST_TO_ADDR
// neng := neng - nsol ;
4186: LD_ADDR_LOC 5
4190: PUSH
4191: LD_LOC 5
4195: PUSH
4196: LD_LOC 8
4200: MINUS
4201: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4202: LD_ADDR_LOC 6
4206: PUSH
4207: LD_LOC 5
4211: PUSH
4212: LD_INT 3
4214: PUSH
4215: LD_INT 2
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PUSH
4222: LD_VAR 0 2
4226: ARRAY
4227: DIV
4228: ST_TO_ADDR
// if ( nsci < 1 ) then
4229: LD_LOC 6
4233: PUSH
4234: LD_INT 1
4236: LESS
4237: IFFALSE 4247
// nsci := 1 ;
4239: LD_ADDR_LOC 6
4243: PUSH
4244: LD_INT 1
4246: ST_TO_ADDR
// neng := neng - nsci ;
4247: LD_ADDR_LOC 5
4251: PUSH
4252: LD_LOC 5
4256: PUSH
4257: LD_LOC 6
4261: MINUS
4262: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4263: LD_ADDR_LOC 7
4267: PUSH
4268: LD_LOC 5
4272: PUSH
4273: LD_INT 2
4275: DIV
4276: PUSH
4277: LD_INT 0
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_VAR 0 2
4288: ARRAY
4289: ST_TO_ADDR
// neng := neng - nmech ;
4290: LD_ADDR_LOC 5
4294: PUSH
4295: LD_LOC 5
4299: PUSH
4300: LD_LOC 7
4304: MINUS
4305: ST_TO_ADDR
// if ( neng < 1 ) then
4306: LD_LOC 5
4310: PUSH
4311: LD_INT 1
4313: LESS
4314: IFFALSE 4324
// neng := 1 ;
4316: LD_ADDR_LOC 5
4320: PUSH
4321: LD_INT 1
4323: ST_TO_ADDR
// end ;
4324: LD_VAR 0 1
4328: RET
// starting begin disable ( 98 ) ;
4329: LD_INT 98
4331: DISABLE_MARKED
// disable ( 99 ) ;
4332: LD_INT 99
4334: DISABLE_MARKED
// disable ( 100 ) ;
4335: LD_INT 100
4337: DISABLE_MARKED
// disable ( 4 ) ;
4338: LD_INT 4
4340: DISABLE_MARKED
// disable ( 400 ) ;
4341: LD_INT 400
4343: DISABLE_MARKED
// disable ( 401 ) ;
4344: LD_INT 401
4346: DISABLE_MARKED
// mp_selectmsg := true ;
4347: LD_ADDR_OWVAR 13
4351: PUSH
4352: LD_INT 1
4354: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4355: CALL 68 0 0
// init_map ;
4359: CALL 1436 0 0
// init_respawning ;
4363: CALL 18393 0 0
// set_shared_visions_and_alliances ;
4367: CALL 1965 0 0
// ResetFog ;
4371: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4375: LD_OWVAR 2
4379: PPUSH
4380: CALL_OW 520
// AnimateTrees ( true ) ;
4384: LD_INT 1
4386: PPUSH
4387: CALL_OW 573
// prepare_sides ;
4391: CALL 4030 0 0
// Init_Win_Condition ;
4395: CALL 8637 0 0
// if game_type = 3 then
4399: LD_EXP 18
4403: PUSH
4404: LD_INT 3
4406: EQUAL
4407: IFFALSE 4417
// begin InitPoints ( ) ;
4409: CALL 7640 0 0
// init_kings_counting ;
4413: CALL 9932 0 0
// end ; InitApeman ;
4417: CALL 5970 0 0
// ShowTimer ;
4421: CALL 7428 0 0
// music_nat := Side_Nations [ your_side ] ;
4425: LD_ADDR_OWVAR 71
4429: PUSH
4430: LD_EXP 38
4434: PUSH
4435: LD_OWVAR 2
4439: ARRAY
4440: ST_TO_ADDR
// if IAmSpec then
4441: CALL_OW 531
4445: IFFALSE 4481
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4447: LD_INT 0
4449: PPUSH
4450: LD_INT 0
4452: PPUSH
4453: LD_OWVAR 2
4457: PPUSH
4458: LD_INT 32767
4460: NEG
4461: PPUSH
4462: CALL_OW 330
// CenterNowOnXY ( 119 , 79 ) ;
4466: LD_INT 119
4468: PPUSH
4469: LD_INT 79
4471: PPUSH
4472: CALL_OW 86
// enable ( 400 ) ;
4476: LD_INT 400
4478: ENABLE_MARKED
// end else
4479: GO 4527
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4481: LD_EXP 42
4485: PUSH
4486: LD_EXP 37
4490: PUSH
4491: LD_OWVAR 2
4495: ARRAY
4496: ARRAY
4497: PUSH
4498: LD_INT 1
4500: ARRAY
4501: PPUSH
4502: LD_EXP 42
4506: PUSH
4507: LD_EXP 37
4511: PUSH
4512: LD_OWVAR 2
4516: ARRAY
4517: ARRAY
4518: PUSH
4519: LD_INT 2
4521: ARRAY
4522: PPUSH
4523: CALL_OW 86
// end ; end ; end_of_file
4527: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4528: GO 4530
4530: DISABLE
4531: LD_INT 0
4533: PPUSH
4534: PPUSH
// begin case tick of 1 .. 1 1$0 :
4535: LD_OWVAR 1
4539: PUSH
4540: LD_INT 1
4542: DOUBLE
4543: GREATEREQUAL
4544: IFFALSE 4552
4546: LD_INT 2100
4548: DOUBLE
4549: LESSEQUAL
4550: IFTRUE 4554
4552: GO 4582
4554: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4555: LD_EXP 26
4559: PUSH
4560: LD_INT 100
4562: DIVREAL
4563: PUSH
4564: LD_INT 525
4566: PPUSH
4567: LD_INT 1050
4569: PPUSH
4570: CALL_OW 12
4574: MUL
4575: PPUSH
4576: CALL_OW 67
4580: GO 4884
4582: LD_INT 2100
4584: PUSH
4585: LD_INT 1
4587: PLUS
4588: DOUBLE
4589: GREATEREQUAL
4590: IFFALSE 4598
4592: LD_INT 10500
4594: DOUBLE
4595: LESSEQUAL
4596: IFTRUE 4600
4598: GO 4628
4600: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4601: LD_EXP 26
4605: PUSH
4606: LD_INT 100
4608: DIVREAL
4609: PUSH
4610: LD_INT 1050
4612: PPUSH
4613: LD_INT 1750
4615: PPUSH
4616: CALL_OW 12
4620: MUL
4621: PPUSH
4622: CALL_OW 67
4626: GO 4884
4628: LD_INT 10500
4630: PUSH
4631: LD_INT 1
4633: PLUS
4634: DOUBLE
4635: GREATEREQUAL
4636: IFFALSE 4644
4638: LD_INT 21000
4640: DOUBLE
4641: LESSEQUAL
4642: IFTRUE 4646
4644: GO 4674
4646: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4647: LD_EXP 26
4651: PUSH
4652: LD_INT 100
4654: DIVREAL
4655: PUSH
4656: LD_INT 1750
4658: PPUSH
4659: LD_INT 2100
4661: PPUSH
4662: CALL_OW 12
4666: MUL
4667: PPUSH
4668: CALL_OW 67
4672: GO 4884
4674: LD_INT 21000
4676: PUSH
4677: LD_INT 1
4679: PLUS
4680: DOUBLE
4681: GREATEREQUAL
4682: IFFALSE 4690
4684: LD_INT 42000
4686: DOUBLE
4687: LESSEQUAL
4688: IFTRUE 4692
4690: GO 4720
4692: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4693: LD_EXP 26
4697: PUSH
4698: LD_INT 100
4700: DIVREAL
4701: PUSH
4702: LD_INT 2100
4704: PPUSH
4705: LD_INT 2275
4707: PPUSH
4708: CALL_OW 12
4712: MUL
4713: PPUSH
4714: CALL_OW 67
4718: GO 4884
4720: LD_INT 42000
4722: PUSH
4723: LD_INT 1
4725: PLUS
4726: DOUBLE
4727: GREATEREQUAL
4728: IFFALSE 4736
4730: LD_INT 63000
4732: DOUBLE
4733: LESSEQUAL
4734: IFTRUE 4738
4736: GO 4766
4738: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4739: LD_EXP 26
4743: PUSH
4744: LD_INT 100
4746: DIVREAL
4747: PUSH
4748: LD_INT 2275
4750: PPUSH
4751: LD_INT 2450
4753: PPUSH
4754: CALL_OW 12
4758: MUL
4759: PPUSH
4760: CALL_OW 67
4764: GO 4884
4766: LD_INT 63000
4768: PUSH
4769: LD_INT 1
4771: PLUS
4772: DOUBLE
4773: GREATEREQUAL
4774: IFFALSE 4782
4776: LD_INT 105000
4778: DOUBLE
4779: LESSEQUAL
4780: IFTRUE 4784
4782: GO 4812
4784: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4785: LD_EXP 26
4789: PUSH
4790: LD_INT 100
4792: DIVREAL
4793: PUSH
4794: LD_INT 2450
4796: PPUSH
4797: LD_INT 2800
4799: PPUSH
4800: CALL_OW 12
4804: MUL
4805: PPUSH
4806: CALL_OW 67
4810: GO 4884
4812: LD_INT 105000
4814: PUSH
4815: LD_INT 1
4817: PLUS
4818: DOUBLE
4819: GREATEREQUAL
4820: IFFALSE 4828
4822: LD_INT 630000
4824: DOUBLE
4825: LESSEQUAL
4826: IFTRUE 4830
4828: GO 4858
4830: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
4831: LD_EXP 26
4835: PUSH
4836: LD_INT 100
4838: DIVREAL
4839: PUSH
4840: LD_INT 2800
4842: PPUSH
4843: LD_INT 3500
4845: PPUSH
4846: CALL_OW 12
4850: MUL
4851: PPUSH
4852: CALL_OW 67
4856: GO 4884
4858: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
4859: LD_EXP 26
4863: PUSH
4864: LD_INT 100
4866: DIVREAL
4867: PUSH
4868: LD_INT 3500
4870: PPUSH
4871: LD_INT 3850
4873: PPUSH
4874: CALL_OW 12
4878: MUL
4879: PPUSH
4880: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
4884: LD_ADDR_VAR 0 2
4888: PUSH
4889: LD_INT 3
4891: PPUSH
4892: LD_INT 5
4894: PPUSH
4895: CALL_OW 12
4899: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
4900: LD_ADDR_VAR 0 1
4904: PUSH
4905: LD_EXP 37
4909: PUSH
4910: LD_INT 0
4912: PUSH
4913: EMPTY
4914: LIST
4915: DIFF
4916: PUSH
4917: FOR_IN
4918: IFFALSE 4967
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
4920: LD_VAR 0 2
4924: PPUSH
4925: LD_EXP 42
4929: PUSH
4930: LD_VAR 0 1
4934: ARRAY
4935: PUSH
4936: LD_INT 1
4938: ARRAY
4939: PPUSH
4940: LD_EXP 42
4944: PUSH
4945: LD_VAR 0 1
4949: ARRAY
4950: PUSH
4951: LD_INT 2
4953: ARRAY
4954: PPUSH
4955: LD_INT 20
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: CALL_OW 56
4965: GO 4917
4967: POP
4968: POP
// enable ;
4969: ENABLE
// end ;
4970: PPOPN 2
4972: END
// every 0 0$7 + 0 0$1.7 do var d , shipment ;
4973: GO 4975
4975: DISABLE
4976: LD_INT 0
4978: PPUSH
4979: PPUSH
// begin shipment := Rand ( 0 , 3 ) ;
4980: LD_ADDR_VAR 0 2
4984: PUSH
4985: LD_INT 0
4987: PPUSH
4988: LD_INT 3
4990: PPUSH
4991: CALL_OW 12
4995: ST_TO_ADDR
// case tick of 1 .. 1 1$0 :
4996: LD_OWVAR 1
5000: PUSH
5001: LD_INT 1
5003: DOUBLE
5004: GREATEREQUAL
5005: IFFALSE 5013
5007: LD_INT 2100
5009: DOUBLE
5010: LESSEQUAL
5011: IFTRUE 5015
5013: GO 5026
5015: POP
// d := 20 ; 1 1$0 + 1 .. 5 5$0 :
5016: LD_ADDR_VAR 0 1
5020: PUSH
5021: LD_INT 20
5023: ST_TO_ADDR
5024: GO 5209
5026: LD_INT 2100
5028: PUSH
5029: LD_INT 1
5031: PLUS
5032: DOUBLE
5033: GREATEREQUAL
5034: IFFALSE 5042
5036: LD_INT 10500
5038: DOUBLE
5039: LESSEQUAL
5040: IFTRUE 5044
5042: GO 5055
5044: POP
// d := 50 ; 5 5$0 + 1 .. 10 10$0 :
5045: LD_ADDR_VAR 0 1
5049: PUSH
5050: LD_INT 50
5052: ST_TO_ADDR
5053: GO 5209
5055: LD_INT 10500
5057: PUSH
5058: LD_INT 1
5060: PLUS
5061: DOUBLE
5062: GREATEREQUAL
5063: IFFALSE 5071
5065: LD_INT 21000
5067: DOUBLE
5068: LESSEQUAL
5069: IFTRUE 5073
5071: GO 5084
5073: POP
// d := 150 ; 10 10$0 + 1 .. 20 20$0 :
5074: LD_ADDR_VAR 0 1
5078: PUSH
5079: LD_INT 150
5081: ST_TO_ADDR
5082: GO 5209
5084: LD_INT 21000
5086: PUSH
5087: LD_INT 1
5089: PLUS
5090: DOUBLE
5091: GREATEREQUAL
5092: IFFALSE 5100
5094: LD_INT 42000
5096: DOUBLE
5097: LESSEQUAL
5098: IFTRUE 5102
5100: GO 5113
5102: POP
// d := 100 ; 20 20$0 + 1 .. 30 30$0 :
5103: LD_ADDR_VAR 0 1
5107: PUSH
5108: LD_INT 100
5110: ST_TO_ADDR
5111: GO 5209
5113: LD_INT 42000
5115: PUSH
5116: LD_INT 1
5118: PLUS
5119: DOUBLE
5120: GREATEREQUAL
5121: IFFALSE 5129
5123: LD_INT 63000
5125: DOUBLE
5126: LESSEQUAL
5127: IFTRUE 5131
5129: GO 5142
5131: POP
// d := 90 ; 30 30$0 + 1 .. 50 50$0 :
5132: LD_ADDR_VAR 0 1
5136: PUSH
5137: LD_INT 90
5139: ST_TO_ADDR
5140: GO 5209
5142: LD_INT 63000
5144: PUSH
5145: LD_INT 1
5147: PLUS
5148: DOUBLE
5149: GREATEREQUAL
5150: IFFALSE 5158
5152: LD_INT 105000
5154: DOUBLE
5155: LESSEQUAL
5156: IFTRUE 5160
5158: GO 5171
5160: POP
// d := 70 ; 50 50$0 + 1 .. 300 300$0 :
5161: LD_ADDR_VAR 0 1
5165: PUSH
5166: LD_INT 70
5168: ST_TO_ADDR
5169: GO 5209
5171: LD_INT 105000
5173: PUSH
5174: LD_INT 1
5176: PLUS
5177: DOUBLE
5178: GREATEREQUAL
5179: IFFALSE 5187
5181: LD_INT 630000
5183: DOUBLE
5184: LESSEQUAL
5185: IFTRUE 5189
5187: GO 5200
5189: POP
// d := 60 ; else
5190: LD_ADDR_VAR 0 1
5194: PUSH
5195: LD_INT 60
5197: ST_TO_ADDR
5198: GO 5209
5200: POP
// d := 35 ; end ;
5201: LD_ADDR_VAR 0 1
5205: PUSH
5206: LD_INT 35
5208: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5209: LD_INT 1
5211: PPUSH
5212: LD_INT 10000
5214: PPUSH
5215: CALL_OW 12
5219: PUSH
5220: LD_VAR 0 1
5224: PUSH
5225: LD_EXP 26
5229: MUL
5230: LESSEQUAL
5231: IFFALSE 5285
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5233: LD_INT 1
5235: PPUSH
5236: LD_INT 140
5238: PPUSH
5239: CALL_OW 12
5243: PPUSH
5244: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5248: LD_ADDR_VAR 0 2
5252: PUSH
5253: LD_VAR 0 2
5257: PUSH
5258: LD_INT 1
5260: PLUS
5261: PUSH
5262: LD_INT 4
5264: MOD
5265: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLHOut + shipment , true ) ;
5266: LD_INT 5
5268: PPUSH
5269: LD_INT 20
5271: PUSH
5272: LD_VAR 0 2
5276: PLUS
5277: PPUSH
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 55
// end ; enable ;
5285: ENABLE
// end ;
5286: PPOPN 2
5288: END
// every 1 1$0 trigger def_shipments_density do
5289: LD_EXP 5
5293: IFFALSE 5329
5295: GO 5297
5297: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5298: LD_INT 5
5300: PPUSH
5301: LD_INT 15
5303: PPUSH
5304: LD_INT 1
5306: PPUSH
5307: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5311: LD_INT 6300
5313: PUSH
5314: LD_INT 2100
5316: PUSH
5317: LD_EXP 5
5321: MUL
5322: MINUS
5323: PPUSH
5324: CALL_OW 67
// enable ;
5328: ENABLE
// end ; end_of_file
5329: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5330: LD_VAR 0 1
5334: PPUSH
5335: CALL_OW 266
5339: PUSH
5340: LD_INT 0
5342: PUSH
5343: LD_INT 1
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: IN
5350: IFFALSE 5375
// SetBName ( b , @ & GetSide ( b ) ) ;
5352: LD_VAR 0 1
5356: PPUSH
5357: LD_STRING @
5359: PUSH
5360: LD_VAR 0 1
5364: PPUSH
5365: CALL_OW 255
5369: STR
5370: PPUSH
5371: CALL_OW 500
// end ;
5375: PPOPN 2
5377: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5378: LD_VAR 0 1
5382: PPUSH
5383: CALL_OW 266
5387: PUSH
5388: LD_INT 0
5390: PUSH
5391: LD_INT 1
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: IN
5398: IFFALSE 5423
// SetBName ( b , @ & GetSide ( b ) ) ;
5400: LD_VAR 0 1
5404: PPUSH
5405: LD_STRING @
5407: PUSH
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 255
5417: STR
5418: PPUSH
5419: CALL_OW 500
// end ;
5423: PPOPN 3
5425: END
// on VehicleConstructed ( veh , fac ) do var side ;
5426: LD_INT 0
5428: PPUSH
// begin if GetControl ( veh ) = control_apeman then
5429: LD_VAR 0 1
5433: PPUSH
5434: CALL_OW 263
5438: PUSH
5439: LD_INT 5
5441: EQUAL
5442: IFFALSE 5584
// begin side := GetSide ( veh ) ;
5444: LD_ADDR_VAR 0 3
5448: PUSH
5449: LD_VAR 0 1
5453: PPUSH
5454: CALL_OW 255
5458: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
5459: LD_ADDR_EXP 53
5463: PUSH
5464: LD_EXP 53
5468: PPUSH
5469: LD_VAR 0 3
5473: PPUSH
5474: LD_EXP 53
5478: PUSH
5479: LD_VAR 0 3
5483: ARRAY
5484: PPUSH
5485: LD_INT 52
5487: PUSH
5488: EMPTY
5489: LIST
5490: PPUSH
5491: CALL_OW 72
5495: PUSH
5496: LD_INT 22
5498: PUSH
5499: LD_VAR 0 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PUSH
5508: LD_INT 2
5510: PUSH
5511: LD_INT 33
5513: PUSH
5514: LD_INT 5
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: LD_INT 25
5523: PUSH
5524: LD_INT 12
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 25
5533: PUSH
5534: LD_INT 15
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PUSH
5541: LD_INT 25
5543: PUSH
5544: LD_INT 16
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 25
5553: PUSH
5554: LD_INT 17
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PPUSH
5573: CALL_OW 69
5577: UNION
5578: PPUSH
5579: CALL_OW 1
5583: ST_TO_ADDR
// end ; end ;
5584: PPOPN 3
5586: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
5587: LD_INT 0
5589: PPUSH
5590: PPUSH
5591: PPUSH
5592: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
5593: LD_VAR 0 1
5597: PPUSH
5598: CALL_OW 257
5602: PUSH
5603: LD_INT 12
5605: PUSH
5606: LD_INT 15
5608: PUSH
5609: LD_INT 17
5611: PUSH
5612: LD_INT 16
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: IN
5621: PUSH
5622: LD_VAR 0 1
5626: PPUSH
5627: CALL_OW 263
5631: PUSH
5632: LD_INT 5
5634: EQUAL
5635: OR
5636: IFFALSE 5647
// ApeKilled ( j ) ;
5638: LD_VAR 0 1
5642: PPUSH
5643: CALL 6651 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
5647: LD_VAR 0 1
5651: PPUSH
5652: CALL_OW 266
5656: PUSH
5657: LD_INT 0
5659: PUSH
5660: LD_INT 1
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: IN
5667: IFFALSE 5749
// begin pos := Side_Positions [ GetSide ( j ) ] ;
5669: LD_ADDR_VAR 0 4
5673: PUSH
5674: LD_EXP 37
5678: PUSH
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 255
5688: ARRAY
5689: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
5690: LD_ADDR_VAR 0 2
5694: PUSH
5695: LD_EXP 42
5699: PUSH
5700: LD_VAR 0 4
5704: ARRAY
5705: PUSH
5706: LD_INT 1
5708: ARRAY
5709: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
5710: LD_ADDR_VAR 0 3
5714: PUSH
5715: LD_EXP 42
5719: PUSH
5720: LD_VAR 0 4
5724: ARRAY
5725: PUSH
5726: LD_INT 2
5728: ARRAY
5729: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
5730: LD_VAR 0 2
5734: PPUSH
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 420
5744: PPUSH
5745: CALL_OW 419
// end ; end ;
5749: PPOPN 5
5751: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
5752: LD_VAR 0 1
5756: PPUSH
5757: LD_VAR 0 2
5761: PPUSH
5762: LD_VAR 0 3
5766: PPUSH
5767: LD_OWVAR 2
5771: PPUSH
5772: CALL 8398 0 4
5776: PPOPN 3
5778: END
// every 20 20$00 trigger apemanNumber do
5779: LD_EXP 50
5783: IFFALSE 5816
5785: GO 5787
5787: DISABLE
// begin enable ;
5788: ENABLE
// if apeLevel >= 8 then
5789: LD_EXP 55
5793: PUSH
5794: LD_INT 8
5796: GREATEREQUAL
5797: IFFALSE 5802
// disable else
5799: DISABLE
5800: GO 5816
// apeLevel := apeLevel + 1 ;
5802: LD_ADDR_EXP 55
5806: PUSH
5807: LD_EXP 55
5811: PUSH
5812: LD_INT 1
5814: PLUS
5815: ST_TO_ADDR
// end ;
5816: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5817: LD_EXP 50
5821: PUSH
5822: LD_EXP 51
5826: LESS
5827: IFFALSE 5967
5829: GO 5831
5831: DISABLE
5832: LD_INT 0
5834: PPUSH
5835: PPUSH
5836: PPUSH
5837: PPUSH
// begin enable ;
5838: ENABLE
// for i := 1 to apemanPos do
5839: LD_ADDR_VAR 0 1
5843: PUSH
5844: DOUBLE
5845: LD_INT 1
5847: DEC
5848: ST_TO_ADDR
5849: LD_EXP 53
5853: PUSH
5854: FOR_TO
5855: IFFALSE 5965
// begin if apemanPlayerCount [ i ] then
5857: LD_EXP 54
5861: PUSH
5862: LD_VAR 0 1
5866: ARRAY
5867: IFFALSE 5963
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5869: LD_EXP 54
5873: PUSH
5874: LD_VAR 0 1
5878: ARRAY
5879: PUSH
5880: LD_EXP 53
5884: PUSH
5885: LD_VAR 0 1
5889: ARRAY
5890: GREATER
5891: IFFALSE 5963
// begin ape := PrepareApeman ;
5893: LD_ADDR_VAR 0 2
5897: PUSH
5898: CALL 6470 0 0
5902: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5903: LD_VAR 0 2
5907: PPUSH
5908: LD_EXP 56
5912: PUSH
5913: LD_VAR 0 1
5917: ARRAY
5918: PPUSH
5919: LD_INT 0
5921: PPUSH
5922: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5926: LD_ADDR_EXP 53
5930: PUSH
5931: LD_EXP 53
5935: PPUSH
5936: LD_VAR 0 1
5940: PPUSH
5941: LD_EXP 53
5945: PUSH
5946: LD_VAR 0 1
5950: ARRAY
5951: PUSH
5952: LD_VAR 0 2
5956: UNION
5957: PPUSH
5958: CALL_OW 1
5962: ST_TO_ADDR
// end ; end ; end ;
5963: GO 5854
5965: POP
5966: POP
// end ;
5967: PPOPN 4
5969: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5970: LD_INT 0
5972: PPUSH
5973: PPUSH
5974: PPUSH
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
// playersAmount := 0 ;
5979: LD_ADDR_VAR 0 3
5983: PUSH
5984: LD_INT 0
5986: ST_TO_ADDR
// _apeAreas := [ OpiceSZ , OpiceSV , OpiceJZ , OpiceJV ] ;
5987: LD_ADDR_VAR 0 7
5991: PUSH
5992: LD_INT 11
5994: PUSH
5995: LD_INT 12
5997: PUSH
5998: LD_INT 14
6000: PUSH
6001: LD_INT 13
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6010: LD_ADDR_EXP 56
6014: PUSH
6015: LD_INT 0
6017: PUSH
6018: LD_INT 0
6020: PUSH
6021: LD_INT 0
6023: PUSH
6024: LD_INT 0
6026: PUSH
6027: LD_INT 0
6029: PUSH
6030: LD_INT 0
6032: PUSH
6033: LD_INT 0
6035: PUSH
6036: LD_INT 0
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: ST_TO_ADDR
// for j = 1 to Side_Positions do
6049: LD_ADDR_VAR 0 4
6053: PUSH
6054: DOUBLE
6055: LD_INT 1
6057: DEC
6058: ST_TO_ADDR
6059: LD_EXP 37
6063: PUSH
6064: FOR_TO
6065: IFFALSE 6132
// if Side_Positions [ j ] then
6067: LD_EXP 37
6071: PUSH
6072: LD_VAR 0 4
6076: ARRAY
6077: IFFALSE 6130
// begin playersAmount := playersAmount + 1 ;
6079: LD_ADDR_VAR 0 3
6083: PUSH
6084: LD_VAR 0 3
6088: PUSH
6089: LD_INT 1
6091: PLUS
6092: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6093: LD_ADDR_EXP 56
6097: PUSH
6098: LD_EXP 56
6102: PPUSH
6103: LD_VAR 0 4
6107: PPUSH
6108: LD_VAR 0 7
6112: PUSH
6113: LD_EXP 37
6117: PUSH
6118: LD_VAR 0 4
6122: ARRAY
6123: ARRAY
6124: PPUSH
6125: CALL_OW 1
6129: ST_TO_ADDR
// end ;
6130: GO 6064
6132: POP
6133: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6134: LD_ADDR_EXP 52
6138: PUSH
6139: LD_INT 3
6141: PUSH
6142: LD_EXP 22
6146: MUL
6147: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6148: LD_ADDR_EXP 50
6152: PUSH
6153: LD_VAR 0 3
6157: PUSH
6158: LD_EXP 52
6162: MUL
6163: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6164: LD_ADDR_EXP 51
6168: PUSH
6169: LD_EXP 50
6173: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6174: LD_ADDR_EXP 53
6178: PUSH
6179: LD_INT 0
6181: PUSH
6182: LD_INT 0
6184: PUSH
6185: LD_INT 0
6187: PUSH
6188: LD_INT 0
6190: PUSH
6191: LD_INT 0
6193: PUSH
6194: LD_INT 0
6196: PUSH
6197: LD_INT 0
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6213: LD_ADDR_EXP 54
6217: PUSH
6218: LD_INT 0
6220: PUSH
6221: LD_INT 0
6223: PUSH
6224: LD_INT 0
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: LD_INT 0
6232: PUSH
6233: LD_INT 0
6235: PUSH
6236: LD_INT 0
6238: PUSH
6239: LD_INT 0
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: ST_TO_ADDR
// apeLevel := 1 ;
6252: LD_ADDR_EXP 55
6256: PUSH
6257: LD_INT 1
6259: ST_TO_ADDR
// if not apemanNumber then
6260: LD_EXP 50
6264: NOT
6265: IFFALSE 6269
// exit ;
6267: GO 6465
// for i := 1 to apemanPerPlayer do
6269: LD_ADDR_VAR 0 2
6273: PUSH
6274: DOUBLE
6275: LD_INT 1
6277: DEC
6278: ST_TO_ADDR
6279: LD_EXP 52
6283: PUSH
6284: FOR_TO
6285: IFFALSE 6463
// begin for j := 1 to Side_Positions do
6287: LD_ADDR_VAR 0 4
6291: PUSH
6292: DOUBLE
6293: LD_INT 1
6295: DEC
6296: ST_TO_ADDR
6297: LD_EXP 37
6301: PUSH
6302: FOR_TO
6303: IFFALSE 6459
// if Side_Positions [ j ] then
6305: LD_EXP 37
6309: PUSH
6310: LD_VAR 0 4
6314: ARRAY
6315: IFFALSE 6457
// begin pos := Side_Positions [ j ] ;
6317: LD_ADDR_VAR 0 6
6321: PUSH
6322: LD_EXP 37
6326: PUSH
6327: LD_VAR 0 4
6331: ARRAY
6332: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6333: LD_ADDR_EXP 54
6337: PUSH
6338: LD_EXP 54
6342: PPUSH
6343: LD_VAR 0 4
6347: PPUSH
6348: LD_EXP 54
6352: PUSH
6353: LD_VAR 0 4
6357: ARRAY
6358: PUSH
6359: LD_INT 1
6361: PLUS
6362: PPUSH
6363: CALL_OW 1
6367: ST_TO_ADDR
// ape := PrepareApeman ;
6368: LD_ADDR_VAR 0 5
6372: PUSH
6373: CALL 6470 0 0
6377: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6378: LD_ADDR_EXP 53
6382: PUSH
6383: LD_EXP 53
6387: PPUSH
6388: LD_VAR 0 4
6392: PPUSH
6393: LD_EXP 53
6397: PUSH
6398: LD_VAR 0 4
6402: ARRAY
6403: PPUSH
6404: LD_EXP 53
6408: PUSH
6409: LD_VAR 0 4
6413: ARRAY
6414: PUSH
6415: LD_INT 1
6417: PLUS
6418: PPUSH
6419: LD_VAR 0 5
6423: PPUSH
6424: CALL_OW 1
6428: PPUSH
6429: CALL_OW 1
6433: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6434: LD_VAR 0 5
6438: PPUSH
6439: LD_EXP 56
6443: PUSH
6444: LD_VAR 0 4
6448: ARRAY
6449: PPUSH
6450: LD_INT 0
6452: PPUSH
6453: CALL_OW 49
// end ;
6457: GO 6302
6459: POP
6460: POP
// end ;
6461: GO 6284
6463: POP
6464: POP
// end ;
6465: LD_VAR 0 1
6469: RET
// export function PrepareApeman ; var bonus ; begin
6470: LD_INT 0
6472: PPUSH
6473: PPUSH
// uc_side := 0 ;
6474: LD_ADDR_OWVAR 20
6478: PUSH
6479: LD_INT 0
6481: ST_TO_ADDR
// uc_nation := 0 ;
6482: LD_ADDR_OWVAR 21
6486: PUSH
6487: LD_INT 0
6489: ST_TO_ADDR
// InitHc ;
6490: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6494: LD_ADDR_VAR 0 2
6498: PUSH
6499: LD_INT 1
6501: NEG
6502: PUSH
6503: LD_INT 0
6505: PUSH
6506: LD_INT 1
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: PUSH
6514: LD_OWVAR 1
6518: PUSH
6519: LD_INT 3
6521: MOD
6522: PUSH
6523: LD_INT 1
6525: PLUS
6526: ARRAY
6527: ST_TO_ADDR
// hc_class := class_apeman ;
6528: LD_ADDR_OWVAR 28
6532: PUSH
6533: LD_INT 12
6535: ST_TO_ADDR
// hc_gallery :=  ;
6536: LD_ADDR_OWVAR 33
6540: PUSH
6541: LD_STRING 
6543: ST_TO_ADDR
// hc_name :=  ;
6544: LD_ADDR_OWVAR 26
6548: PUSH
6549: LD_STRING 
6551: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6552: LD_ADDR_OWVAR 31
6556: PUSH
6557: LD_EXP 55
6561: PUSH
6562: LD_VAR 0 2
6566: PLUS
6567: PUSH
6568: LD_EXP 55
6572: PUSH
6573: LD_VAR 0 2
6577: PLUS
6578: PUSH
6579: LD_EXP 55
6583: PUSH
6584: LD_VAR 0 2
6588: PLUS
6589: PUSH
6590: LD_EXP 55
6594: PUSH
6595: LD_VAR 0 2
6599: PLUS
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6607: LD_ADDR_OWVAR 35
6611: PUSH
6612: LD_INT 10
6614: PUSH
6615: LD_VAR 0 2
6619: MUL
6620: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6621: LD_ADDR_OWVAR 29
6625: PUSH
6626: LD_INT 12
6628: PUSH
6629: LD_INT 10
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: ST_TO_ADDR
// result := CreateHuman ;
6636: LD_ADDR_VAR 0 1
6640: PUSH
6641: CALL_OW 44
6645: ST_TO_ADDR
// end ;
6646: LD_VAR 0 1
6650: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6651: LD_INT 0
6653: PPUSH
6654: PPUSH
6655: PPUSH
// if not ape then
6656: LD_VAR 0 1
6660: NOT
6661: IFFALSE 6665
// exit ;
6663: GO 6790
// side := GetSide ( ape ) ;
6665: LD_ADDR_VAR 0 3
6669: PUSH
6670: LD_VAR 0 1
6674: PPUSH
6675: CALL_OW 255
6679: ST_TO_ADDR
// if not side then
6680: LD_VAR 0 3
6684: NOT
6685: IFFALSE 6739
// begin for i = 1 to apemanPos do
6687: LD_ADDR_VAR 0 4
6691: PUSH
6692: DOUBLE
6693: LD_INT 1
6695: DEC
6696: ST_TO_ADDR
6697: LD_EXP 53
6701: PUSH
6702: FOR_TO
6703: IFFALSE 6737
// if ape in apemanPos [ i ] then
6705: LD_VAR 0 1
6709: PUSH
6710: LD_EXP 53
6714: PUSH
6715: LD_VAR 0 4
6719: ARRAY
6720: IN
6721: IFFALSE 6735
// begin side := i ;
6723: LD_ADDR_VAR 0 3
6727: PUSH
6728: LD_VAR 0 4
6732: ST_TO_ADDR
// break ;
6733: GO 6737
// end ;
6735: GO 6702
6737: POP
6738: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6739: LD_ADDR_EXP 53
6743: PUSH
6744: LD_EXP 53
6748: PPUSH
6749: LD_VAR 0 3
6753: PPUSH
6754: LD_EXP 53
6758: PUSH
6759: LD_VAR 0 3
6763: ARRAY
6764: PUSH
6765: LD_VAR 0 1
6769: DIFF
6770: PPUSH
6771: CALL_OW 1
6775: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6776: LD_ADDR_EXP 50
6780: PUSH
6781: LD_EXP 50
6785: PUSH
6786: LD_INT 1
6788: MINUS
6789: ST_TO_ADDR
// end ; end_of_file
6790: LD_VAR 0 2
6794: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6795: LD_INT 0
6797: PPUSH
6798: PPUSH
// for un in battle_flags_id do
6799: LD_ADDR_VAR 0 2
6803: PUSH
6804: LD_EXP 44
6808: PUSH
6809: FOR_IN
6810: IFFALSE 6885
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6812: LD_VAR 0 2
6816: PPUSH
6817: LD_INT 1
6819: PUSH
6820: LD_LOC 9
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 2
6831: PUSH
6832: LD_LOC 9
6836: PUSH
6837: LD_INT 2
6839: DIV
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 3
6847: PUSH
6848: LD_LOC 9
6852: PUSH
6853: LD_INT 5
6855: DIV
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 20
6863: PUSH
6864: LD_LOC 9
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: PPUSH
6879: CALL_OW 423
6883: GO 6809
6885: POP
6886: POP
// end ;
6887: LD_VAR 0 1
6891: RET
// every 0 0$0.1 do var un ;
6892: GO 6894
6894: DISABLE
6895: LD_INT 0
6897: PPUSH
// begin if not def_morale_flags then
6898: LD_EXP 9
6902: NOT
6903: IFFALSE 6907
// exit ;
6905: GO 6984
// if not morale_decreasing_time then
6907: LD_EXP 27
6911: NOT
6912: IFFALSE 6916
// exit ;
6914: GO 6984
// strength = 100 ;
6916: LD_ADDR_LOC 9
6920: PUSH
6921: LD_INT 100
6923: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6924: LD_EXP 27
6928: PPUSH
6929: CALL_OW 67
// strength := strength - 1 ;
6933: LD_ADDR_LOC 9
6937: PUSH
6938: LD_LOC 9
6942: PUSH
6943: LD_INT 1
6945: MINUS
6946: ST_TO_ADDR
// Update_Flags ;
6947: CALL 6795 0 0
// until not strength ;
6951: LD_LOC 9
6955: NOT
6956: IFFALSE 6924
// for un in battle_flags_id do
6958: LD_ADDR_VAR 0 1
6962: PUSH
6963: LD_EXP 44
6967: PUSH
6968: FOR_IN
6969: IFFALSE 6982
// KillBattleFlag ( un ) ;
6971: LD_VAR 0 1
6975: PPUSH
6976: CALL_OW 419
6980: GO 6968
6982: POP
6983: POP
// end ; end_of_file
6984: PPOPN 1
6986: END
// export score ; every 0 0$1 trigger Game_Type = 3 do
6987: LD_EXP 18
6991: PUSH
6992: LD_INT 3
6994: EQUAL
6995: IFFALSE 7010
6997: GO 6999
6999: DISABLE
// begin SetAreaMapShow ( KopecStred , true ) ;
7000: LD_INT 2
7002: PPUSH
7003: LD_INT 1
7005: PPUSH
7006: CALL_OW 424
// end ;
7010: END
// every 0 0$1 trigger Game_Type = 3 do var un , filter , output , side , new_score ;
7011: LD_EXP 18
7015: PUSH
7016: LD_INT 3
7018: EQUAL
7019: IFFALSE 7304
7021: GO 7023
7023: DISABLE
7024: LD_INT 0
7026: PPUSH
7027: PPUSH
7028: PPUSH
7029: PPUSH
7030: PPUSH
// begin filter := FilterUnitsInArea ( KopecStred , [ [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ready ] ] ) ;
7031: LD_ADDR_VAR 0 2
7035: PUSH
7036: LD_INT 2
7038: PPUSH
7039: LD_INT 2
7041: PUSH
7042: LD_INT 30
7044: PUSH
7045: LD_INT 0
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: PUSH
7052: LD_INT 30
7054: PUSH
7055: LD_INT 1
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 53
7069: PUSH
7070: EMPTY
7071: LIST
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PPUSH
7077: CALL_OW 70
7081: ST_TO_ADDR
// if filter then
7082: LD_VAR 0 2
7086: IFFALSE 7160
// for un in filter do
7088: LD_ADDR_VAR 0 1
7092: PUSH
7093: LD_VAR 0 2
7097: PUSH
7098: FOR_IN
7099: IFFALSE 7158
// begin new_score := score [ GetSide ( un ) ] + 1 ;
7101: LD_ADDR_VAR 0 5
7105: PUSH
7106: LD_EXP 57
7110: PUSH
7111: LD_VAR 0 1
7115: PPUSH
7116: CALL_OW 255
7120: ARRAY
7121: PUSH
7122: LD_INT 1
7124: PLUS
7125: ST_TO_ADDR
// score := Replace ( score , GetSide ( un ) , new_score ) ;
7126: LD_ADDR_EXP 57
7130: PUSH
7131: LD_EXP 57
7135: PPUSH
7136: LD_VAR 0 1
7140: PPUSH
7141: CALL_OW 255
7145: PPUSH
7146: LD_VAR 0 5
7150: PPUSH
7151: CALL_OW 1
7155: ST_TO_ADDR
// end ;
7156: GO 7098
7158: POP
7159: POP
// if not def_public_score then
7160: LD_EXP 14
7164: NOT
7165: IFFALSE 7268
// begin output := [ ] ;
7167: LD_ADDR_VAR 0 3
7171: PUSH
7172: EMPTY
7173: ST_TO_ADDR
// for side = 1 to Side_Positions do
7174: LD_ADDR_VAR 0 4
7178: PUSH
7179: DOUBLE
7180: LD_INT 1
7182: DEC
7183: ST_TO_ADDR
7184: LD_EXP 37
7188: PUSH
7189: FOR_TO
7190: IFFALSE 7254
// if Side_Positions [ side ] then
7192: LD_EXP 37
7196: PUSH
7197: LD_VAR 0 4
7201: ARRAY
7202: IFFALSE 7252
// output := output ^ ( mp_sides_players_names [ side ] & :  & score [ side ] & /  & amount_score ) ;
7204: LD_ADDR_VAR 0 3
7208: PUSH
7209: LD_VAR 0 3
7213: PUSH
7214: LD_OWVAR 19
7218: PUSH
7219: LD_VAR 0 4
7223: ARRAY
7224: PUSH
7225: LD_STRING : 
7227: STR
7228: PUSH
7229: LD_EXP 57
7233: PUSH
7234: LD_VAR 0 4
7238: ARRAY
7239: STR
7240: PUSH
7241: LD_STRING / 
7243: STR
7244: PUSH
7245: LD_EXP 31
7249: STR
7250: ADD
7251: ST_TO_ADDR
7252: GO 7189
7254: POP
7255: POP
// ExtraStrings := output ;
7256: LD_ADDR_EXP 58
7260: PUSH
7261: LD_VAR 0 3
7265: ST_TO_ADDR
// end else
7266: GO 7303
// ExtraStrings := [ #KingoftheHill-Private , your_side , score [ Your_Side ] , amount_score ] ;
7268: LD_ADDR_EXP 58
7272: PUSH
7273: LD_STRING #KingoftheHill-Private
7275: PUSH
7276: LD_OWVAR 2
7280: PUSH
7281: LD_EXP 57
7285: PUSH
7286: LD_OWVAR 2
7290: ARRAY
7291: PUSH
7292: LD_EXP 31
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: ST_TO_ADDR
// enable ;
7303: ENABLE
// end ;
7304: PPOPN 5
7306: END
// every 0 0$1 marked 100 do var side ;
7307: GO 7309
7309: DISABLE
7310: LD_INT 0
7312: PPUSH
// begin for side = 1 to Side_Positions do
7313: LD_ADDR_VAR 0 1
7317: PUSH
7318: DOUBLE
7319: LD_INT 1
7321: DEC
7322: ST_TO_ADDR
7323: LD_EXP 37
7327: PUSH
7328: FOR_TO
7329: IFFALSE 7367
// if Side_Positions [ side ] then
7331: LD_EXP 37
7335: PUSH
7336: LD_VAR 0 1
7340: ARRAY
7341: IFFALSE 7365
// if score [ side ] >= amount_score then
7343: LD_EXP 57
7347: PUSH
7348: LD_VAR 0 1
7352: ARRAY
7353: PUSH
7354: LD_EXP 31
7358: GREATEREQUAL
7359: IFFALSE 7365
// show_that_you_are_winner_or_looser ;
7361: CALL 7373 0 0
7365: GO 7328
7367: POP
7368: POP
// enable ;
7369: ENABLE
// end ;
7370: PPOPN 1
7372: END
// function show_that_you_are_winner_or_looser ; var i ; begin
7373: LD_INT 0
7375: PPUSH
7376: PPUSH
// if score [ your_side ] >= amount_score then
7377: LD_EXP 57
7381: PUSH
7382: LD_OWVAR 2
7386: ARRAY
7387: PUSH
7388: LD_EXP 31
7392: GREATEREQUAL
7393: IFFALSE 7410
// begin wait ( 0 0$3 ) ;
7395: LD_INT 105
7397: PPUSH
7398: CALL_OW 67
// YouWinInMultiplayer ;
7402: CALL_OW 106
// exit ;
7406: GO 7423
// end else
7408: GO 7423
// begin wait ( 0 0$3 ) ;
7410: LD_INT 105
7412: PPUSH
7413: CALL_OW 67
// YouLostInMultiplayer ;
7417: CALL_OW 107
// exit ;
7421: GO 7423
// end ; end ; end_of_file
7423: LD_VAR 0 1
7427: RET
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
7428: LD_INT 0
7430: PPUSH
7431: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7432: LD_ADDR_VAR 0 2
7436: PUSH
7437: LD_STRING #Multi1x1-Time
7439: PUSH
7440: LD_OWVAR 1
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: ST_TO_ADDR
// if WaitServerStrings then
7449: LD_EXP 59
7453: IFFALSE 7471
// AllStrings = AllStrings ^ WaitServerStrings ;
7455: LD_ADDR_VAR 0 2
7459: PUSH
7460: LD_VAR 0 2
7464: PUSH
7465: LD_EXP 59
7469: ADD
7470: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7471: LD_INT 0
7473: PUSH
7474: LD_EXP 32
7478: PUSH
7479: LD_OWVAR 1
7483: MINUS
7484: LESSEQUAL
7485: IFFALSE 7516
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7487: LD_ADDR_VAR 0 2
7491: PUSH
7492: LD_VAR 0 2
7496: PUSH
7497: LD_STRING #allowedsibbomb
7499: PUSH
7500: LD_EXP 32
7504: PUSH
7505: LD_OWVAR 1
7509: MINUS
7510: PUSH
7511: EMPTY
7512: LIST
7513: LIST
7514: ADD
7515: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7516: LD_INT 0
7518: PUSH
7519: LD_EXP 63
7523: PUSH
7524: LD_OWVAR 1
7528: MINUS
7529: LESSEQUAL
7530: IFFALSE 7561
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7532: LD_ADDR_VAR 0 2
7536: PUSH
7537: LD_VAR 0 2
7541: PUSH
7542: LD_STRING #builduptime
7544: PUSH
7545: LD_EXP 63
7549: PUSH
7550: LD_OWVAR 1
7554: MINUS
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: ADD
7560: ST_TO_ADDR
// if ( ExtraStrings ) then
7561: LD_EXP 58
7565: IFFALSE 7587
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7567: LD_ADDR_VAR 0 2
7571: PUSH
7572: LD_VAR 0 2
7576: PUSH
7577: LD_STRING 
7579: ADD
7580: PUSH
7581: LD_EXP 58
7585: ADD
7586: ST_TO_ADDR
// if ( Display_kings ) and not isSGUI then
7587: LD_EXP 60
7591: PUSH
7592: LD_OWVAR 83
7596: NOT
7597: AND
7598: IFFALSE 7616
// AllStrings = AllStrings ^ Display_kings ;
7600: LD_ADDR_VAR 0 2
7604: PUSH
7605: LD_VAR 0 2
7609: PUSH
7610: LD_EXP 60
7614: ADD
7615: ST_TO_ADDR
// Display_Strings := AllStrings ;
7616: LD_ADDR_OWVAR 47
7620: PUSH
7621: LD_VAR 0 2
7625: ST_TO_ADDR
// end ;
7626: LD_VAR 0 1
7630: RET
// every 0 0$1 do
7631: GO 7633
7633: DISABLE
// begin ShowTimer ;
7634: CALL 7428 0 0
// enable ;
7638: ENABLE
// end ; end_of_file
7639: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
7640: LD_INT 0
7642: PPUSH
7643: PPUSH
7644: PPUSH
// sharedPoints1 = [ ] ;
7645: LD_ADDR_LOC 14
7649: PUSH
7650: EMPTY
7651: ST_TO_ADDR
// sharedPoints2 = [ ] ;
7652: LD_ADDR_LOC 15
7656: PUSH
7657: EMPTY
7658: ST_TO_ADDR
// sharedPoints3 = [ ] ;
7659: LD_ADDR_LOC 16
7663: PUSH
7664: EMPTY
7665: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
7666: LD_ADDR_VAR 0 2
7670: PUSH
7671: DOUBLE
7672: LD_INT 1
7674: DEC
7675: ST_TO_ADDR
7676: LD_EXP 37
7680: PUSH
7681: LD_INT 0
7683: PLUS
7684: PUSH
7685: FOR_TO
7686: IFFALSE 7788
// begin if not Side_Positions [ i ] = 0 then
7688: LD_EXP 37
7692: PUSH
7693: LD_VAR 0 2
7697: ARRAY
7698: PUSH
7699: LD_INT 0
7701: EQUAL
7702: NOT
7703: IFFALSE 7717
// SetMultiScore ( i , 0 ) ;
7705: LD_VAR 0 2
7709: PPUSH
7710: LD_INT 0
7712: PPUSH
7713: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
7717: LD_ADDR_LOC 14
7721: PUSH
7722: LD_LOC 14
7726: PPUSH
7727: LD_VAR 0 2
7731: PPUSH
7732: LD_INT 0
7734: PPUSH
7735: CALL_OW 1
7739: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
7740: LD_ADDR_LOC 15
7744: PUSH
7745: LD_LOC 15
7749: PPUSH
7750: LD_VAR 0 2
7754: PPUSH
7755: LD_INT 0
7757: PPUSH
7758: CALL_OW 1
7762: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
7763: LD_ADDR_LOC 16
7767: PUSH
7768: LD_LOC 16
7772: PPUSH
7773: LD_VAR 0 2
7777: PPUSH
7778: LD_INT 0
7780: PPUSH
7781: CALL_OW 1
7785: ST_TO_ADDR
// end ;
7786: GO 7685
7788: POP
7789: POP
// pointGame = true ;
7790: LD_ADDR_LOC 17
7794: PUSH
7795: LD_INT 1
7797: ST_TO_ADDR
// end ;
7798: LD_VAR 0 1
7802: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
7803: LD_LOC 17
7807: IFFALSE 8218
7809: GO 7811
7811: DISABLE
7812: LD_INT 0
7814: PPUSH
7815: PPUSH
7816: PPUSH
7817: PPUSH
7818: PPUSH
7819: PPUSH
7820: PPUSH
7821: PPUSH
7822: PPUSH
7823: PPUSH
7824: PPUSH
7825: PPUSH
7826: PPUSH
// begin if isSGUI then
7827: LD_OWVAR 83
7831: IFFALSE 8218
// begin if Teams [ 1 ] then
7833: LD_EXP 35
7837: PUSH
7838: LD_INT 1
7840: ARRAY
7841: IFFALSE 7853
// red = true else
7843: LD_ADDR_VAR 0 2
7847: PUSH
7848: LD_INT 1
7850: ST_TO_ADDR
7851: GO 7861
// red = false ;
7853: LD_ADDR_VAR 0 2
7857: PUSH
7858: LD_INT 0
7860: ST_TO_ADDR
// if Teams [ 2 ] then
7861: LD_EXP 35
7865: PUSH
7866: LD_INT 2
7868: ARRAY
7869: IFFALSE 7881
// blue = true else
7871: LD_ADDR_VAR 0 3
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
7879: GO 7889
// blue = false ;
7881: LD_ADDR_VAR 0 3
7885: PUSH
7886: LD_INT 0
7888: ST_TO_ADDR
// if Teams [ 3 ] then
7889: LD_EXP 35
7893: PUSH
7894: LD_INT 3
7896: ARRAY
7897: IFFALSE 7909
// yel = true else
7899: LD_ADDR_VAR 0 4
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
7907: GO 7917
// yel = false ;
7909: LD_ADDR_VAR 0 4
7913: PUSH
7914: LD_INT 0
7916: ST_TO_ADDR
// if Teams [ 4 ] then
7917: LD_EXP 35
7921: PUSH
7922: LD_INT 4
7924: ARRAY
7925: IFFALSE 7937
// green = true else
7927: LD_ADDR_VAR 0 5
7931: PUSH
7932: LD_INT 1
7934: ST_TO_ADDR
7935: GO 7945
// green = false ;
7937: LD_ADDR_VAR 0 5
7941: PUSH
7942: LD_INT 0
7944: ST_TO_ADDR
// if def_public_score then
7945: LD_EXP 14
7949: IFFALSE 7961
// p = true else
7951: LD_ADDR_VAR 0 12
7955: PUSH
7956: LD_INT 1
7958: ST_TO_ADDR
7959: GO 7969
// p = false ;
7961: LD_ADDR_VAR 0 12
7965: PUSH
7966: LD_INT 0
7968: ST_TO_ADDR
// if team_game then
7969: LD_EXP 39
7973: IFFALSE 8054
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
7975: LD_ADDR_VAR 0 13
7979: PUSH
7980: LD_INT 3
7982: PUSH
7983: LD_INT 1
7985: PUSH
7986: LD_INT 2
7988: PUSH
7989: LD_INT 7
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: LD_EXP 48
8002: ARRAY
8003: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
8004: LD_ADDR_VAR 0 10
8008: PUSH
8009: LD_STRING {
8011: PUSH
8012: LD_VAR 0 3
8016: STR
8017: PUSH
8018: LD_STRING ,
8020: STR
8021: PUSH
8022: LD_VAR 0 4
8026: STR
8027: PUSH
8028: LD_STRING ,
8030: STR
8031: PUSH
8032: LD_VAR 0 2
8036: STR
8037: PUSH
8038: LD_STRING ,0,0,0,
8040: STR
8041: PUSH
8042: LD_VAR 0 5
8046: STR
8047: PUSH
8048: LD_STRING ,0}
8050: STR
8051: ST_TO_ADDR
// end else
8052: GO 8154
// begin you = your_side ;
8054: LD_ADDR_VAR 0 13
8058: PUSH
8059: LD_OWVAR 2
8063: ST_TO_ADDR
// s = { ;
8064: LD_ADDR_VAR 0 10
8068: PUSH
8069: LD_STRING {
8071: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
8072: LD_ADDR_VAR 0 1
8076: PUSH
8077: DOUBLE
8078: LD_INT 1
8080: DEC
8081: ST_TO_ADDR
8082: LD_EXP 37
8086: PUSH
8087: LD_INT 0
8089: PLUS
8090: PUSH
8091: FOR_TO
8092: IFFALSE 8138
// if side_positions [ i ] then
8094: LD_EXP 37
8098: PUSH
8099: LD_VAR 0 1
8103: ARRAY
8104: IFFALSE 8122
// s = s & 1, else
8106: LD_ADDR_VAR 0 10
8110: PUSH
8111: LD_VAR 0 10
8115: PUSH
8116: LD_STRING 1,
8118: STR
8119: ST_TO_ADDR
8120: GO 8136
// s = s & 0, ;
8122: LD_ADDR_VAR 0 10
8126: PUSH
8127: LD_VAR 0 10
8131: PUSH
8132: LD_STRING 0,
8134: STR
8135: ST_TO_ADDR
8136: GO 8091
8138: POP
8139: POP
// s = s & } ;
8140: LD_ADDR_VAR 0 10
8144: PUSH
8145: LD_VAR 0 10
8149: PUSH
8150: LD_STRING }
8152: STR
8153: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
8154: LD_STRING initScore(
8156: PUSH
8157: LD_VAR 0 10
8161: STR
8162: PUSH
8163: LD_STRING ,
8165: STR
8166: PUSH
8167: LD_VAR 0 12
8171: STR
8172: PUSH
8173: LD_STRING ,
8175: STR
8176: PUSH
8177: LD_VAR 0 13
8181: STR
8182: PUSH
8183: LD_STRING  );
8185: STR
8186: PPUSH
8187: CALL_OW 559
// if game_type = 3 then
8191: LD_EXP 18
8195: PUSH
8196: LD_INT 3
8198: EQUAL
8199: IFFALSE 8218
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
8201: LD_STRING AddScorePoints(2,2,
8203: PUSH
8204: LD_EXP 46
8208: STR
8209: PUSH
8210: LD_STRING  );
8212: STR
8213: PPUSH
8214: CALL_OW 559
// end ; end ;
8218: PPOPN 13
8220: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
8221: LD_INT 0
8223: PPUSH
8224: PPUSH
// case typ of 1 :
8225: LD_VAR 0 3
8229: PUSH
8230: LD_INT 1
8232: DOUBLE
8233: EQUAL
8234: IFTRUE 8238
8236: GO 8266
8238: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
8239: LD_ADDR_LOC 14
8243: PUSH
8244: LD_LOC 14
8248: PPUSH
8249: LD_VAR 0 1
8253: PPUSH
8254: LD_VAR 0 2
8258: PPUSH
8259: CALL_OW 1
8263: ST_TO_ADDR
8264: GO 8339
8266: LD_INT 2
8268: DOUBLE
8269: EQUAL
8270: IFTRUE 8274
8272: GO 8302
8274: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
8275: LD_ADDR_LOC 15
8279: PUSH
8280: LD_LOC 15
8284: PPUSH
8285: LD_VAR 0 1
8289: PPUSH
8290: LD_VAR 0 2
8294: PPUSH
8295: CALL_OW 1
8299: ST_TO_ADDR
8300: GO 8339
8302: LD_INT 3
8304: DOUBLE
8305: EQUAL
8306: IFTRUE 8310
8308: GO 8338
8310: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
8311: LD_ADDR_LOC 16
8315: PUSH
8316: LD_LOC 16
8320: PPUSH
8321: LD_VAR 0 1
8325: PPUSH
8326: LD_VAR 0 2
8330: PPUSH
8331: CALL_OW 1
8335: ST_TO_ADDR
8336: GO 8339
8338: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
8339: LD_ADDR_VAR 0 5
8343: PUSH
8344: LD_LOC 14
8348: PUSH
8349: LD_VAR 0 1
8353: ARRAY
8354: PUSH
8355: LD_LOC 15
8359: PUSH
8360: LD_VAR 0 1
8364: ARRAY
8365: PLUS
8366: PUSH
8367: LD_LOC 16
8371: PUSH
8372: LD_VAR 0 1
8376: ARRAY
8377: PLUS
8378: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
8379: LD_VAR 0 1
8383: PPUSH
8384: LD_VAR 0 5
8388: PPUSH
8389: CALL_OW 506
// end ; end_of_file
8393: LD_VAR 0 4
8397: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8398: LD_INT 0
8400: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8401: LD_VAR 0 1
8405: PPUSH
8406: CALL_OW 255
8410: PUSH
8411: LD_VAR 0 4
8415: EQUAL
8416: IFFALSE 8435
// begin SetAchievement ( ACH_RAD ) ;
8418: LD_STRING ACH_RAD
8420: PPUSH
8421: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8425: LD_STRING ACH_NL
8427: PPUSH
8428: LD_INT 1
8430: PPUSH
8431: CALL_OW 564
// end end ;
8435: LD_VAR 0 5
8439: RET
// export function SA_Win ( side ) ; begin
8440: LD_INT 0
8442: PPUSH
// case side of 1 :
8443: LD_VAR 0 1
8447: PUSH
8448: LD_INT 1
8450: DOUBLE
8451: EQUAL
8452: IFTRUE 8456
8454: GO 8469
8456: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8457: LD_STRING ACH_AH
8459: PPUSH
8460: LD_INT 1
8462: PPUSH
8463: CALL_OW 564
8467: GO 8632
8469: LD_INT 2
8471: DOUBLE
8472: EQUAL
8473: IFTRUE 8477
8475: GO 8490
8477: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8478: LD_STRING ACH_E
8480: PPUSH
8481: LD_INT 1
8483: PPUSH
8484: CALL_OW 564
8488: GO 8632
8490: LD_INT 3
8492: DOUBLE
8493: EQUAL
8494: IFTRUE 8498
8496: GO 8511
8498: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8499: LD_STRING ACH_OOL
8501: PPUSH
8502: LD_INT 1
8504: PPUSH
8505: CALL_OW 564
8509: GO 8632
8511: LD_INT 1
8513: PUSH
8514: LD_INT 2
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: DOUBLE
8521: EQUAL
8522: IFTRUE 8526
8524: GO 8551
8526: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8527: LD_STRING ACH_AH
8529: PPUSH
8530: LD_REAL  5.00000000000000E-0001
8533: PPUSH
8534: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8538: LD_STRING ACH_E
8540: PPUSH
8541: LD_REAL  5.00000000000000E-0001
8544: PPUSH
8545: CALL_OW 564
// end ; [ 2 , 3 ] :
8549: GO 8632
8551: LD_INT 2
8553: PUSH
8554: LD_INT 3
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: DOUBLE
8561: EQUAL
8562: IFTRUE 8566
8564: GO 8591
8566: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8567: LD_STRING ACH_OOL
8569: PPUSH
8570: LD_REAL  5.00000000000000E-0001
8573: PPUSH
8574: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8578: LD_STRING ACH_E
8580: PPUSH
8581: LD_REAL  5.00000000000000E-0001
8584: PPUSH
8585: CALL_OW 564
// end ; [ 3 , 1 ] :
8589: GO 8632
8591: LD_INT 3
8593: PUSH
8594: LD_INT 1
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: DOUBLE
8601: EQUAL
8602: IFTRUE 8606
8604: GO 8631
8606: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8607: LD_STRING ACH_AH
8609: PPUSH
8610: LD_REAL  5.00000000000000E-0001
8613: PPUSH
8614: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8618: LD_STRING ACH_OOL
8620: PPUSH
8621: LD_REAL  5.00000000000000E-0001
8624: PPUSH
8625: CALL_OW 564
// end ; end ;
8629: GO 8632
8631: POP
// end ; end_of_file
8632: LD_VAR 0 2
8636: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8637: LD_INT 0
8639: PPUSH
8640: PPUSH
// enable ( 98 ) ;
8641: LD_INT 98
8643: ENABLE_MARKED
// GameEnded = false ;
8644: LD_ADDR_LOC 19
8648: PUSH
8649: LD_INT 0
8651: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8652: LD_ADDR_LOC 18
8656: PUSH
8657: LD_INT 0
8659: PUSH
8660: LD_INT 0
8662: PUSH
8663: LD_INT 0
8665: PUSH
8666: LD_INT 0
8668: PUSH
8669: LD_INT 0
8671: PUSH
8672: LD_INT 0
8674: PUSH
8675: LD_INT 0
8677: PUSH
8678: LD_INT 0
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: ST_TO_ADDR
// unfoged = false ;
8691: LD_ADDR_LOC 20
8695: PUSH
8696: LD_INT 0
8698: ST_TO_ADDR
// defeated_specs := [ ] ;
8699: LD_ADDR_LOC 21
8703: PUSH
8704: EMPTY
8705: ST_TO_ADDR
// for i = 1 to side_positions do
8706: LD_ADDR_VAR 0 2
8710: PUSH
8711: DOUBLE
8712: LD_INT 1
8714: DEC
8715: ST_TO_ADDR
8716: LD_EXP 37
8720: PUSH
8721: FOR_TO
8722: IFFALSE 8762
// if not side_positions [ i ] then
8724: LD_EXP 37
8728: PUSH
8729: LD_VAR 0 2
8733: ARRAY
8734: NOT
8735: IFFALSE 8760
// defeated = replace ( defeated , i , true ) ;
8737: LD_ADDR_LOC 18
8741: PUSH
8742: LD_LOC 18
8746: PPUSH
8747: LD_VAR 0 2
8751: PPUSH
8752: LD_INT 1
8754: PPUSH
8755: CALL_OW 1
8759: ST_TO_ADDR
8760: GO 8721
8762: POP
8763: POP
// end ;
8764: LD_VAR 0 1
8768: RET
// function CanWinLoose ; begin
8769: LD_INT 0
8771: PPUSH
// Result := true ;
8772: LD_ADDR_VAR 0 1
8776: PUSH
8777: LD_INT 1
8779: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8780: CALL_OW 518
8784: PUSH
8785: CALL_OW 519
8789: PUSH
8790: LD_INT 0
8792: GREATER
8793: AND
8794: IFFALSE 8804
// Result := false ;
8796: LD_ADDR_VAR 0 1
8800: PUSH
8801: LD_INT 0
8803: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8804: CALL_OW 531
8808: PUSH
8809: CALL_OW 519
8813: PUSH
8814: LD_INT 1
8816: GREATER
8817: AND
8818: IFFALSE 8828
// Result := false ;
8820: LD_ADDR_VAR 0 1
8824: PUSH
8825: LD_INT 0
8827: ST_TO_ADDR
// end ;
8828: LD_VAR 0 1
8832: RET
// export function HasPower ( i ) ; var k , h ; begin
8833: LD_INT 0
8835: PPUSH
8836: PPUSH
8837: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8838: LD_VAR 0 1
8842: PPUSH
8843: CALL_OW 108
8847: NOT
8848: PUSH
8849: LD_EXP 36
8853: PUSH
8854: LD_VAR 0 1
8858: ARRAY
8859: NOT
8860: AND
8861: PUSH
8862: LD_OWVAR 4
8866: AND
8867: IFFALSE 8879
// begin result = false ;
8869: LD_ADDR_VAR 0 2
8873: PUSH
8874: LD_INT 0
8876: ST_TO_ADDR
// end else
8877: GO 9174
// case def_win_rules of 0 :
8879: LD_EXP 33
8883: PUSH
8884: LD_INT 0
8886: DOUBLE
8887: EQUAL
8888: IFTRUE 8892
8890: GO 9055
8892: POP
// if def_people_respawning then
8893: LD_EXP 11
8897: IFFALSE 8988
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8899: LD_ADDR_VAR 0 2
8903: PUSH
8904: LD_INT 22
8906: PUSH
8907: LD_VAR 0 1
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 2
8918: PUSH
8919: LD_INT 21
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: LD_INT 33
8931: PUSH
8932: LD_INT 3
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: LD_INT 33
8941: PUSH
8942: LD_INT 5
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: LD_INT 30
8951: PUSH
8952: LD_INT 0
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 30
8961: PUSH
8962: LD_INT 1
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PPUSH
8981: CALL_OW 69
8985: ST_TO_ADDR
8986: GO 9053
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8988: LD_ADDR_VAR 0 2
8992: PUSH
8993: LD_INT 22
8995: PUSH
8996: LD_VAR 0 1
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: LD_INT 2
9007: PUSH
9008: LD_INT 21
9010: PUSH
9011: LD_INT 1
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 33
9020: PUSH
9021: LD_INT 3
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: LD_INT 33
9030: PUSH
9031: LD_INT 5
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PPUSH
9048: CALL_OW 69
9052: ST_TO_ADDR
9053: GO 9174
9055: LD_INT 1
9057: DOUBLE
9058: EQUAL
9059: IFTRUE 9063
9061: GO 9102
9063: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
9064: LD_ADDR_VAR 0 2
9068: PUSH
9069: LD_INT 22
9071: PUSH
9072: LD_VAR 0 1
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 1
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PPUSH
9095: CALL_OW 69
9099: ST_TO_ADDR
9100: GO 9174
9102: LD_INT 2
9104: DOUBLE
9105: EQUAL
9106: IFTRUE 9110
9108: GO 9173
9110: POP
// begin h = false ;
9111: LD_ADDR_VAR 0 4
9115: PUSH
9116: LD_INT 0
9118: ST_TO_ADDR
// for k in heroes [ i ] do
9119: LD_ADDR_VAR 0 3
9123: PUSH
9124: LD_EXP 49
9128: PUSH
9129: LD_VAR 0 1
9133: ARRAY
9134: PUSH
9135: FOR_IN
9136: IFFALSE 9159
// if IsLive ( k ) then
9138: LD_VAR 0 3
9142: PPUSH
9143: CALL_OW 300
9147: IFFALSE 9157
// h = true ;
9149: LD_ADDR_VAR 0 4
9153: PUSH
9154: LD_INT 1
9156: ST_TO_ADDR
9157: GO 9135
9159: POP
9160: POP
// Result := h ;
9161: LD_ADDR_VAR 0 2
9165: PUSH
9166: LD_VAR 0 4
9170: ST_TO_ADDR
// end ; end ;
9171: GO 9174
9173: POP
// end ;
9174: LD_VAR 0 2
9178: RET
// function AlliedSides ( i , j ) ; begin
9179: LD_INT 0
9181: PPUSH
// Result := false ;
9182: LD_ADDR_VAR 0 3
9186: PUSH
9187: LD_INT 0
9189: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9190: LD_VAR 0 1
9194: PPUSH
9195: LD_VAR 0 2
9199: PPUSH
9200: CALL_OW 81
9204: PUSH
9205: LD_INT 1
9207: EQUAL
9208: PUSH
9209: LD_VAR 0 2
9213: PPUSH
9214: LD_VAR 0 1
9218: PPUSH
9219: CALL_OW 81
9223: PUSH
9224: LD_INT 1
9226: EQUAL
9227: AND
9228: PUSH
9229: LD_VAR 0 1
9233: PPUSH
9234: CALL_OW 83
9238: AND
9239: PUSH
9240: LD_VAR 0 2
9244: PPUSH
9245: CALL_OW 83
9249: AND
9250: IFFALSE 9260
// Result := true ;
9252: LD_ADDR_VAR 0 3
9256: PUSH
9257: LD_INT 1
9259: ST_TO_ADDR
// end ;
9260: LD_VAR 0 3
9264: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9265: CALL 8769 0 0
9269: PUSH
9270: LD_LOC 19
9274: NOT
9275: AND
9276: IFFALSE 9292
9278: GO 9280
9280: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9281: LD_ADDR_EXP 59
9285: PUSH
9286: LD_STRING #Player-Ended
9288: PUSH
9289: EMPTY
9290: LIST
9291: ST_TO_ADDR
9292: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9293: CALL 8769 0 0
9297: PUSH
9298: LD_LOC 19
9302: AND
9303: IFFALSE 9312
9305: GO 9307
9307: DISABLE
// YouLostInMultiplayer ;
9308: CALL_OW 107
9312: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9313: CALL 8769 0 0
9317: NOT
9318: PUSH
9319: CALL_OW 531
9323: NOT
9324: AND
9325: IFFALSE 9341
9327: GO 9329
9329: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9330: LD_ADDR_EXP 59
9334: PUSH
9335: LD_STRING #server-wait
9337: PUSH
9338: EMPTY
9339: LIST
9340: ST_TO_ADDR
9341: END
// every 100 trigger IAmSpec do
9342: CALL_OW 531
9346: IFFALSE 9362
9348: GO 9350
9350: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9351: LD_ADDR_EXP 59
9355: PUSH
9356: LD_STRING #Player-IAmSpec
9358: PUSH
9359: EMPTY
9360: LIST
9361: ST_TO_ADDR
9362: END
// every 100 trigger GameEnded and IAmSpec do
9363: LD_LOC 19
9367: PUSH
9368: CALL_OW 531
9372: AND
9373: IFFALSE 9382
9375: GO 9377
9377: DISABLE
// YouLostInMultiplayer ;
9378: CALL_OW 107
9382: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9383: CALL 8769 0 0
9387: PUSH
9388: LD_LOC 19
9392: NOT
9393: AND
9394: IFFALSE 9410
9396: GO 9398
9398: DISABLE
// WaitServerStrings = [ $player-win ] ;
9399: LD_ADDR_EXP 59
9403: PUSH
9404: LD_STRING $player-win
9406: PUSH
9407: EMPTY
9408: LIST
9409: ST_TO_ADDR
9410: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9411: CALL 8769 0 0
9415: PUSH
9416: LD_LOC 19
9420: AND
9421: IFFALSE 9445
9423: GO 9425
9425: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9426: LD_EXP 38
9430: PUSH
9431: LD_OWVAR 7
9435: ARRAY
9436: PPUSH
9437: CALL 8440 0 1
// YouWinInMultiplayer ;
9441: CALL_OW 106
// end ;
9445: END
// every 100 trigger isEditor marked 401 do
9446: LD_OWVAR 84
9450: IFFALSE 9466
9452: GO 9454
9454: DISABLE
// Debug_Strings = [ You won ] ;
9455: LD_ADDR_OWVAR 48
9459: PUSH
9460: LD_STRING You won
9462: PUSH
9463: EMPTY
9464: LIST
9465: ST_TO_ADDR
9466: END
// every 100 trigger isEditor marked 400 do
9467: LD_OWVAR 84
9471: IFFALSE 9487
9473: GO 9475
9475: DISABLE
// Debug_Strings = [ You loss ] ;
9476: LD_ADDR_OWVAR 48
9480: PUSH
9481: LD_STRING You loss
9483: PUSH
9484: EMPTY
9485: LIST
9486: ST_TO_ADDR
9487: END
// every 100 marked 98 do var i , un ;
9488: GO 9490
9490: DISABLE
9491: LD_INT 0
9493: PPUSH
9494: PPUSH
// begin for i = 1 to side_positions do
9495: LD_ADDR_VAR 0 1
9499: PUSH
9500: DOUBLE
9501: LD_INT 1
9503: DEC
9504: ST_TO_ADDR
9505: LD_EXP 37
9509: PUSH
9510: FOR_TO
9511: IFFALSE 9598
// begin if side_positions [ i ] then
9513: LD_EXP 37
9517: PUSH
9518: LD_VAR 0 1
9522: ARRAY
9523: IFFALSE 9596
// if not HasPower ( i ) and not defeated [ i ] then
9525: LD_VAR 0 1
9529: PPUSH
9530: CALL 8833 0 1
9534: NOT
9535: PUSH
9536: LD_LOC 18
9540: PUSH
9541: LD_VAR 0 1
9545: ARRAY
9546: NOT
9547: AND
9548: IFFALSE 9596
// begin defeated = replace ( defeated , i , true ) ;
9550: LD_ADDR_LOC 18
9554: PUSH
9555: LD_LOC 18
9559: PPUSH
9560: LD_VAR 0 1
9564: PPUSH
9565: LD_INT 1
9567: PPUSH
9568: CALL_OW 1
9572: ST_TO_ADDR
// if i = mp_player_side then
9573: LD_VAR 0 1
9577: PUSH
9578: LD_OWVAR 7
9582: EQUAL
9583: IFFALSE 9596
// begin Multiplayer_Loose_Message ;
9585: CALL_OW 521
// SetPlayerSpectator ( ) ;
9589: CALL_OW 572
// enable ( 400 ) ;
9593: LD_INT 400
9595: ENABLE_MARKED
// end ; end ; end ;
9596: GO 9510
9598: POP
9599: POP
// DidGameEnd ;
9600: CALL 9615 0 0
// if not GameEnded then
9604: LD_LOC 19
9608: NOT
9609: IFFALSE 9612
// enable ;
9611: ENABLE
// end ;
9612: PPOPN 2
9614: END
// function DidGameEnd ; var i , k , enemy ; begin
9615: LD_INT 0
9617: PPUSH
9618: PPUSH
9619: PPUSH
9620: PPUSH
// enemy = [ ] ;
9621: LD_ADDR_VAR 0 4
9625: PUSH
9626: EMPTY
9627: ST_TO_ADDR
// for i = 1 to side_positions do
9628: LD_ADDR_VAR 0 2
9632: PUSH
9633: DOUBLE
9634: LD_INT 1
9636: DEC
9637: ST_TO_ADDR
9638: LD_EXP 37
9642: PUSH
9643: FOR_TO
9644: IFFALSE 9738
// if not defeated [ i ] then
9646: LD_LOC 18
9650: PUSH
9651: LD_VAR 0 2
9655: ARRAY
9656: NOT
9657: IFFALSE 9736
// for k = 1 to side_positions do
9659: LD_ADDR_VAR 0 3
9663: PUSH
9664: DOUBLE
9665: LD_INT 1
9667: DEC
9668: ST_TO_ADDR
9669: LD_EXP 37
9673: PUSH
9674: FOR_TO
9675: IFFALSE 9734
// if not defeated [ k ] then
9677: LD_LOC 18
9681: PUSH
9682: LD_VAR 0 3
9686: ARRAY
9687: NOT
9688: IFFALSE 9732
// if not AlliedSides ( i , k ) then
9690: LD_VAR 0 2
9694: PPUSH
9695: LD_VAR 0 3
9699: PPUSH
9700: CALL 9179 0 2
9704: NOT
9705: IFFALSE 9732
// enemy = enemy ^ [ i , k ] ;
9707: LD_ADDR_VAR 0 4
9711: PUSH
9712: LD_VAR 0 4
9716: PUSH
9717: LD_VAR 0 2
9721: PUSH
9722: LD_VAR 0 3
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: ADD
9731: ST_TO_ADDR
9732: GO 9674
9734: POP
9735: POP
9736: GO 9643
9738: POP
9739: POP
// if not enemy then
9740: LD_VAR 0 4
9744: NOT
9745: IFFALSE 9771
// begin GameEnded = true ;
9747: LD_ADDR_LOC 19
9751: PUSH
9752: LD_INT 1
9754: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9755: LD_LOC 18
9759: PUSH
9760: LD_OWVAR 7
9764: ARRAY
9765: NOT
9766: IFFALSE 9771
// enable ( 401 ) ;
9768: LD_INT 401
9770: ENABLE_MARKED
// end ; end ;
9771: LD_VAR 0 1
9775: RET
// function unfog ; var k , friends ; begin
9776: LD_INT 0
9778: PPUSH
9779: PPUSH
9780: PPUSH
// for k = 1 to side_positions do
9781: LD_ADDR_VAR 0 2
9785: PUSH
9786: DOUBLE
9787: LD_INT 1
9789: DEC
9790: ST_TO_ADDR
9791: LD_EXP 37
9795: PUSH
9796: FOR_TO
9797: IFFALSE 9853
// if not defeated [ k ] then
9799: LD_LOC 18
9803: PUSH
9804: LD_VAR 0 2
9808: ARRAY
9809: NOT
9810: IFFALSE 9851
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9812: LD_OWVAR 7
9816: PPUSH
9817: LD_VAR 0 2
9821: PPUSH
9822: CALL_OW 81
9826: PUSH
9827: LD_INT 1
9829: PUSH
9830: EMPTY
9831: LIST
9832: IN
9833: IFFALSE 9851
// friends = friends ^ k ;
9835: LD_ADDR_VAR 0 3
9839: PUSH
9840: LD_VAR 0 3
9844: PUSH
9845: LD_VAR 0 2
9849: ADD
9850: ST_TO_ADDR
9851: GO 9796
9853: POP
9854: POP
// if not friends then
9855: LD_VAR 0 3
9859: NOT
9860: IFFALSE 9874
// begin SetPlayerSpectator ( ) ;
9862: CALL_OW 572
// unfoged = true ;
9866: LD_ADDR_LOC 20
9870: PUSH
9871: LD_INT 1
9873: ST_TO_ADDR
// end ; end ;
9874: LD_VAR 0 1
9878: RET
// export function MakeGameEnd ; begin
9879: LD_INT 0
9881: PPUSH
// SetPlayerSpectator ( ) ;
9882: CALL_OW 572
// unfoged = true ;
9886: LD_ADDR_LOC 20
9890: PUSH
9891: LD_INT 1
9893: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9894: LD_INT 175
9896: PPUSH
9897: CALL_OW 67
// GameEnded = true ;
9901: LD_ADDR_LOC 19
9905: PUSH
9906: LD_INT 1
9908: ST_TO_ADDR
// end ;
9909: LD_VAR 0 1
9913: RET
// export function GetGameEnded ; begin
9914: LD_INT 0
9916: PPUSH
// result = GameEnded ;
9917: LD_ADDR_VAR 0 1
9921: PUSH
9922: LD_LOC 19
9926: ST_TO_ADDR
// end ; end_of_file
9927: LD_VAR 0 1
9931: RET
// var win ; export function init_kings_counting ; var i ; begin
9932: LD_INT 0
9934: PPUSH
9935: PPUSH
// mp_with_score := true ;
9936: LD_ADDR_OWVAR 14
9940: PUSH
9941: LD_INT 1
9943: ST_TO_ADDR
// ResetMultiScore ;
9944: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
9948: LD_EXP 45
9952: PPUSH
9953: LD_INT 1
9955: PPUSH
9956: CALL_OW 424
// enable ( 2 ) ;
9960: LD_INT 2
9962: ENABLE_MARKED
// end ;
9963: LD_VAR 0 1
9967: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
9968: LD_INT 0
9970: PPUSH
9971: PPUSH
9972: PPUSH
9973: PPUSH
9974: PPUSH
9975: PPUSH
9976: PPUSH
9977: PPUSH
9978: PPUSH
// vypis := [ ] ;
9979: LD_ADDR_VAR 0 3
9983: PUSH
9984: EMPTY
9985: ST_TO_ADDR
// red = 0 ;
9986: LD_ADDR_VAR 0 5
9990: PUSH
9991: LD_INT 0
9993: ST_TO_ADDR
// blue = 0 ;
9994: LD_ADDR_VAR 0 6
9998: PUSH
9999: LD_INT 0
10001: ST_TO_ADDR
// yel = 0 ;
10002: LD_ADDR_VAR 0 7
10006: PUSH
10007: LD_INT 0
10009: ST_TO_ADDR
// green = 0 ;
10010: LD_ADDR_VAR 0 8
10014: PUSH
10015: LD_INT 0
10017: ST_TO_ADDR
// if def_public_score or isSGUI then
10018: LD_EXP 14
10022: PUSH
10023: LD_OWVAR 83
10027: OR
10028: IFFALSE 10625
// if not Team_Game then
10030: LD_EXP 39
10034: NOT
10035: IFFALSE 10157
// begin for side = 1 to Side_Positions do
10037: LD_ADDR_VAR 0 2
10041: PUSH
10042: DOUBLE
10043: LD_INT 1
10045: DEC
10046: ST_TO_ADDR
10047: LD_EXP 37
10051: PUSH
10052: FOR_TO
10053: IFFALSE 10153
// if Side_Positions [ side ] then
10055: LD_EXP 37
10059: PUSH
10060: LD_VAR 0 2
10064: ARRAY
10065: IFFALSE 10151
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
10067: LD_ADDR_VAR 0 3
10071: PUSH
10072: LD_VAR 0 3
10076: PUSH
10077: LD_STRING #KingoftheHill-Public
10079: PUSH
10080: LD_VAR 0 2
10084: PUSH
10085: LD_VAR 0 2
10089: PUSH
10090: LD_VAR 0 2
10094: PUSH
10095: LD_INT 10
10097: PLUS
10098: PPUSH
10099: CALL_OW 110
10103: PUSH
10104: LD_INT 3
10106: DIV
10107: PUSH
10108: LD_EXP 46
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: ADD
10120: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
10121: LD_INT 2
10123: PPUSH
10124: LD_VAR 0 2
10128: PPUSH
10129: LD_VAR 0 2
10133: PUSH
10134: LD_INT 10
10136: PLUS
10137: PPUSH
10138: CALL_OW 110
10142: PUSH
10143: LD_INT 3
10145: DIV
10146: PPUSH
10147: CALL 17529 0 3
// end ;
10151: GO 10052
10153: POP
10154: POP
// end else
10155: GO 10623
// begin if Teams [ 1 ] then
10157: LD_EXP 35
10161: PUSH
10162: LD_INT 1
10164: ARRAY
10165: IFFALSE 10217
// for i in Teams [ 1 ] do
10167: LD_ADDR_VAR 0 4
10171: PUSH
10172: LD_EXP 35
10176: PUSH
10177: LD_INT 1
10179: ARRAY
10180: PUSH
10181: FOR_IN
10182: IFFALSE 10215
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
10184: LD_ADDR_VAR 0 5
10188: PUSH
10189: LD_VAR 0 5
10193: PUSH
10194: LD_VAR 0 4
10198: PUSH
10199: LD_INT 10
10201: PLUS
10202: PPUSH
10203: CALL_OW 110
10207: PUSH
10208: LD_INT 3
10210: DIV
10211: PLUS
10212: ST_TO_ADDR
10213: GO 10181
10215: POP
10216: POP
// if Teams [ 2 ] then
10217: LD_EXP 35
10221: PUSH
10222: LD_INT 2
10224: ARRAY
10225: IFFALSE 10277
// for i in Teams [ 2 ] do
10227: LD_ADDR_VAR 0 4
10231: PUSH
10232: LD_EXP 35
10236: PUSH
10237: LD_INT 2
10239: ARRAY
10240: PUSH
10241: FOR_IN
10242: IFFALSE 10275
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
10244: LD_ADDR_VAR 0 6
10248: PUSH
10249: LD_VAR 0 6
10253: PUSH
10254: LD_VAR 0 4
10258: PUSH
10259: LD_INT 10
10261: PLUS
10262: PPUSH
10263: CALL_OW 110
10267: PUSH
10268: LD_INT 3
10270: DIV
10271: PLUS
10272: ST_TO_ADDR
10273: GO 10241
10275: POP
10276: POP
// if Teams [ 3 ] then
10277: LD_EXP 35
10281: PUSH
10282: LD_INT 3
10284: ARRAY
10285: IFFALSE 10337
// for i in Teams [ 3 ] do
10287: LD_ADDR_VAR 0 4
10291: PUSH
10292: LD_EXP 35
10296: PUSH
10297: LD_INT 3
10299: ARRAY
10300: PUSH
10301: FOR_IN
10302: IFFALSE 10335
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
10304: LD_ADDR_VAR 0 7
10308: PUSH
10309: LD_VAR 0 7
10313: PUSH
10314: LD_VAR 0 4
10318: PUSH
10319: LD_INT 10
10321: PLUS
10322: PPUSH
10323: CALL_OW 110
10327: PUSH
10328: LD_INT 3
10330: DIV
10331: PLUS
10332: ST_TO_ADDR
10333: GO 10301
10335: POP
10336: POP
// if Teams [ 4 ] then
10337: LD_EXP 35
10341: PUSH
10342: LD_INT 4
10344: ARRAY
10345: IFFALSE 10397
// for i in Teams [ 4 ] do
10347: LD_ADDR_VAR 0 4
10351: PUSH
10352: LD_EXP 35
10356: PUSH
10357: LD_INT 4
10359: ARRAY
10360: PUSH
10361: FOR_IN
10362: IFFALSE 10395
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
10364: LD_ADDR_VAR 0 8
10368: PUSH
10369: LD_VAR 0 8
10373: PUSH
10374: LD_VAR 0 4
10378: PUSH
10379: LD_INT 10
10381: PLUS
10382: PPUSH
10383: CALL_OW 110
10387: PUSH
10388: LD_INT 3
10390: DIV
10391: PLUS
10392: ST_TO_ADDR
10393: GO 10361
10395: POP
10396: POP
// if Teams [ 1 ] then
10397: LD_EXP 35
10401: PUSH
10402: LD_INT 1
10404: ARRAY
10405: IFFALSE 10434
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
10407: LD_ADDR_VAR 0 3
10411: PUSH
10412: LD_STRING #KingoftheHill-Public-red
10414: PUSH
10415: LD_INT 3
10417: PUSH
10418: LD_VAR 0 5
10422: PUSH
10423: LD_EXP 46
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: ST_TO_ADDR
// if Teams [ 2 ] then
10434: LD_EXP 35
10438: PUSH
10439: LD_INT 2
10441: ARRAY
10442: IFFALSE 10477
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
10444: LD_ADDR_VAR 0 3
10448: PUSH
10449: LD_VAR 0 3
10453: PUSH
10454: LD_STRING #KingoftheHill-Public-blue
10456: PUSH
10457: LD_INT 1
10459: PUSH
10460: LD_VAR 0 6
10464: PUSH
10465: LD_EXP 46
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: ADD
10476: ST_TO_ADDR
// if Teams [ 3 ] then
10477: LD_EXP 35
10481: PUSH
10482: LD_INT 3
10484: ARRAY
10485: IFFALSE 10520
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
10487: LD_ADDR_VAR 0 3
10491: PUSH
10492: LD_VAR 0 3
10496: PUSH
10497: LD_STRING #KingoftheHill-Public-yell
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: LD_VAR 0 7
10507: PUSH
10508: LD_EXP 46
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: ADD
10519: ST_TO_ADDR
// if Teams [ 4 ] then
10520: LD_EXP 35
10524: PUSH
10525: LD_INT 4
10527: ARRAY
10528: IFFALSE 10563
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
10530: LD_ADDR_VAR 0 3
10534: PUSH
10535: LD_VAR 0 3
10539: PUSH
10540: LD_STRING #KingoftheHill-Public-green
10542: PUSH
10543: LD_INT 7
10545: PUSH
10546: LD_VAR 0 8
10550: PUSH
10551: LD_EXP 46
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: ADD
10562: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
10563: LD_INT 2
10565: PPUSH
10566: LD_INT 3
10568: PPUSH
10569: LD_VAR 0 5
10573: PPUSH
10574: CALL 17529 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
10578: LD_INT 2
10580: PPUSH
10581: LD_INT 1
10583: PPUSH
10584: LD_VAR 0 6
10588: PPUSH
10589: CALL 17529 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
10593: LD_INT 2
10595: PPUSH
10596: LD_INT 2
10598: PPUSH
10599: LD_VAR 0 7
10603: PPUSH
10604: CALL 17529 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
10608: LD_INT 2
10610: PPUSH
10611: LD_INT 7
10613: PPUSH
10614: LD_VAR 0 8
10618: PPUSH
10619: CALL 17529 0 3
// end else
10623: GO 11060
// if not Team_Game then
10625: LD_EXP 39
10629: NOT
10630: IFFALSE 10688
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
10632: LD_ADDR_VAR 0 3
10636: PUSH
10637: LD_VAR 0 3
10641: PUSH
10642: LD_STRING #KingoftheHill-Private
10644: PUSH
10645: LD_OWVAR 7
10649: PUSH
10650: LD_OWVAR 7
10654: PUSH
10655: LD_VAR 0 2
10659: PUSH
10660: LD_INT 10
10662: PLUS
10663: PPUSH
10664: CALL_OW 110
10668: PUSH
10669: LD_INT 3
10671: DIV
10672: PUSH
10673: LD_EXP 46
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: ADD
10685: ST_TO_ADDR
10686: GO 11060
// begin for i in Teams [ 1 ] do
10688: LD_ADDR_VAR 0 4
10692: PUSH
10693: LD_EXP 35
10697: PUSH
10698: LD_INT 1
10700: ARRAY
10701: PUSH
10702: FOR_IN
10703: IFFALSE 10736
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
10705: LD_ADDR_VAR 0 5
10709: PUSH
10710: LD_VAR 0 5
10714: PUSH
10715: LD_VAR 0 4
10719: PUSH
10720: LD_INT 10
10722: PLUS
10723: PPUSH
10724: CALL_OW 110
10728: PUSH
10729: LD_INT 3
10731: DIV
10732: PLUS
10733: ST_TO_ADDR
10734: GO 10702
10736: POP
10737: POP
// for i in Teams [ 2 ] do
10738: LD_ADDR_VAR 0 4
10742: PUSH
10743: LD_EXP 35
10747: PUSH
10748: LD_INT 2
10750: ARRAY
10751: PUSH
10752: FOR_IN
10753: IFFALSE 10786
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
10755: LD_ADDR_VAR 0 6
10759: PUSH
10760: LD_VAR 0 6
10764: PUSH
10765: LD_VAR 0 4
10769: PUSH
10770: LD_INT 10
10772: PLUS
10773: PPUSH
10774: CALL_OW 110
10778: PUSH
10779: LD_INT 3
10781: DIV
10782: PLUS
10783: ST_TO_ADDR
10784: GO 10752
10786: POP
10787: POP
// for i in Teams [ 3 ] do
10788: LD_ADDR_VAR 0 4
10792: PUSH
10793: LD_EXP 35
10797: PUSH
10798: LD_INT 3
10800: ARRAY
10801: PUSH
10802: FOR_IN
10803: IFFALSE 10836
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
10805: LD_ADDR_VAR 0 7
10809: PUSH
10810: LD_VAR 0 7
10814: PUSH
10815: LD_VAR 0 4
10819: PUSH
10820: LD_INT 10
10822: PLUS
10823: PPUSH
10824: CALL_OW 110
10828: PUSH
10829: LD_INT 3
10831: DIV
10832: PLUS
10833: ST_TO_ADDR
10834: GO 10802
10836: POP
10837: POP
// for i in Teams [ 4 ] do
10838: LD_ADDR_VAR 0 4
10842: PUSH
10843: LD_EXP 35
10847: PUSH
10848: LD_INT 4
10850: ARRAY
10851: PUSH
10852: FOR_IN
10853: IFFALSE 10886
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
10855: LD_ADDR_VAR 0 8
10859: PUSH
10860: LD_VAR 0 8
10864: PUSH
10865: LD_VAR 0 4
10869: PUSH
10870: LD_INT 10
10872: PLUS
10873: PPUSH
10874: CALL_OW 110
10878: PUSH
10879: LD_INT 3
10881: DIV
10882: PLUS
10883: ST_TO_ADDR
10884: GO 10852
10886: POP
10887: POP
// if mp_player_side in Teams [ 1 ] then
10888: LD_OWVAR 7
10892: PUSH
10893: LD_EXP 35
10897: PUSH
10898: LD_INT 1
10900: ARRAY
10901: IN
10902: IFFALSE 10931
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
10904: LD_ADDR_VAR 0 3
10908: PUSH
10909: LD_STRING #KingoftheHill-Public-red
10911: PUSH
10912: LD_INT 3
10914: PUSH
10915: LD_VAR 0 5
10919: PUSH
10920: LD_EXP 46
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
10931: LD_OWVAR 7
10935: PUSH
10936: LD_EXP 35
10940: PUSH
10941: LD_INT 2
10943: ARRAY
10944: IN
10945: IFFALSE 10974
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
10947: LD_ADDR_VAR 0 3
10951: PUSH
10952: LD_STRING #KingoftheHill-Public-blue
10954: PUSH
10955: LD_INT 1
10957: PUSH
10958: LD_VAR 0 6
10962: PUSH
10963: LD_EXP 46
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
10974: LD_OWVAR 7
10978: PUSH
10979: LD_EXP 35
10983: PUSH
10984: LD_INT 3
10986: ARRAY
10987: IN
10988: IFFALSE 11017
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
10990: LD_ADDR_VAR 0 3
10994: PUSH
10995: LD_STRING #KingoftheHill-Public-yell
10997: PUSH
10998: LD_INT 2
11000: PUSH
11001: LD_VAR 0 7
11005: PUSH
11006: LD_EXP 46
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
11017: LD_OWVAR 7
11021: PUSH
11022: LD_EXP 35
11026: PUSH
11027: LD_INT 4
11029: ARRAY
11030: IN
11031: IFFALSE 11060
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
11033: LD_ADDR_VAR 0 3
11037: PUSH
11038: LD_STRING #KingoftheHill-Public-green
11040: PUSH
11041: LD_INT 7
11043: PUSH
11044: LD_VAR 0 8
11048: PUSH
11049: LD_EXP 46
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: ST_TO_ADDR
// end ; Display_kings := vypis ;
11060: LD_ADDR_EXP 60
11064: PUSH
11065: LD_VAR 0 3
11069: ST_TO_ADDR
// end ;
11070: LD_VAR 0 1
11074: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
11075: LD_INT 0
11077: PPUSH
11078: PPUSH
11079: PPUSH
11080: PPUSH
11081: PPUSH
11082: PPUSH
11083: PPUSH
11084: PPUSH
11085: PPUSH
// side := [ ] ;
11086: LD_ADDR_VAR 0 2
11090: PUSH
11091: EMPTY
11092: ST_TO_ADDR
// red = 0 ;
11093: LD_ADDR_VAR 0 5
11097: PUSH
11098: LD_INT 0
11100: ST_TO_ADDR
// blue = 0 ;
11101: LD_ADDR_VAR 0 6
11105: PUSH
11106: LD_INT 0
11108: ST_TO_ADDR
// yel = 0 ;
11109: LD_ADDR_VAR 0 7
11113: PUSH
11114: LD_INT 0
11116: ST_TO_ADDR
// green = 0 ;
11117: LD_ADDR_VAR 0 8
11121: PUSH
11122: LD_INT 0
11124: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
11125: LD_ADDR_VAR 0 3
11129: PUSH
11130: LD_EXP 45
11134: PPUSH
11135: LD_INT 21
11137: PUSH
11138: LD_INT 3
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 53
11147: PUSH
11148: EMPTY
11149: LIST
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PPUSH
11155: CALL_OW 70
11159: ST_TO_ADDR
// for un in list do
11160: LD_ADDR_VAR 0 4
11164: PUSH
11165: LD_VAR 0 3
11169: PUSH
11170: FOR_IN
11171: IFFALSE 11196
// side := side union GetSide ( un ) ;
11173: LD_ADDR_VAR 0 2
11177: PUSH
11178: LD_VAR 0 2
11182: PUSH
11183: LD_VAR 0 4
11187: PPUSH
11188: CALL_OW 255
11192: UNION
11193: ST_TO_ADDR
11194: GO 11170
11196: POP
11197: POP
// if side <> 1 then
11198: LD_VAR 0 2
11202: PUSH
11203: LD_INT 1
11205: NONEQUAL
11206: IFFALSE 11210
// exit ;
11208: GO 11573
// side := side [ 1 ] ;
11210: LD_ADDR_VAR 0 2
11214: PUSH
11215: LD_VAR 0 2
11219: PUSH
11220: LD_INT 1
11222: ARRAY
11223: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
11224: LD_VAR 0 2
11228: PUSH
11229: LD_INT 10
11231: PLUS
11232: PPUSH
11233: LD_VAR 0 2
11237: PUSH
11238: LD_INT 10
11240: PLUS
11241: PPUSH
11242: CALL_OW 110
11246: PUSH
11247: LD_INT 1
11249: PLUS
11250: PPUSH
11251: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
11255: LD_VAR 0 2
11259: PPUSH
11260: LD_VAR 0 2
11264: PUSH
11265: LD_INT 10
11267: PLUS
11268: PPUSH
11269: CALL_OW 110
11273: PUSH
11274: LD_INT 3
11276: DIV
11277: PPUSH
11278: LD_INT 2
11280: PPUSH
11281: CALL 8221 0 3
// if not Team_Game then
11285: LD_EXP 39
11289: NOT
11290: IFFALSE 11573
// if GetTag ( side + 10 ) >= final_count * 3 then
11292: LD_VAR 0 2
11296: PUSH
11297: LD_INT 10
11299: PLUS
11300: PPUSH
11301: CALL_OW 110
11305: PUSH
11306: LD_EXP 46
11310: PUSH
11311: LD_INT 3
11313: MUL
11314: GREATEREQUAL
11315: IFFALSE 11322
// enable ( 3 ) else
11317: LD_INT 3
11319: ENABLE_MARKED
11320: GO 11573
// begin for i in Teams [ 1 ] do
11322: LD_ADDR_VAR 0 9
11326: PUSH
11327: LD_EXP 35
11331: PUSH
11332: LD_INT 1
11334: ARRAY
11335: PUSH
11336: FOR_IN
11337: IFFALSE 11370
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
11339: LD_ADDR_VAR 0 5
11343: PUSH
11344: LD_VAR 0 5
11348: PUSH
11349: LD_VAR 0 9
11353: PUSH
11354: LD_INT 10
11356: PLUS
11357: PPUSH
11358: CALL_OW 110
11362: PUSH
11363: LD_INT 3
11365: DIV
11366: PLUS
11367: ST_TO_ADDR
11368: GO 11336
11370: POP
11371: POP
// for i in Teams [ 2 ] do
11372: LD_ADDR_VAR 0 9
11376: PUSH
11377: LD_EXP 35
11381: PUSH
11382: LD_INT 2
11384: ARRAY
11385: PUSH
11386: FOR_IN
11387: IFFALSE 11420
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
11389: LD_ADDR_VAR 0 6
11393: PUSH
11394: LD_VAR 0 6
11398: PUSH
11399: LD_VAR 0 9
11403: PUSH
11404: LD_INT 10
11406: PLUS
11407: PPUSH
11408: CALL_OW 110
11412: PUSH
11413: LD_INT 3
11415: DIV
11416: PLUS
11417: ST_TO_ADDR
11418: GO 11386
11420: POP
11421: POP
// for i in Teams [ 3 ] do
11422: LD_ADDR_VAR 0 9
11426: PUSH
11427: LD_EXP 35
11431: PUSH
11432: LD_INT 3
11434: ARRAY
11435: PUSH
11436: FOR_IN
11437: IFFALSE 11470
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
11439: LD_ADDR_VAR 0 7
11443: PUSH
11444: LD_VAR 0 7
11448: PUSH
11449: LD_VAR 0 9
11453: PUSH
11454: LD_INT 10
11456: PLUS
11457: PPUSH
11458: CALL_OW 110
11462: PUSH
11463: LD_INT 3
11465: DIV
11466: PLUS
11467: ST_TO_ADDR
11468: GO 11436
11470: POP
11471: POP
// for i in Teams [ 4 ] do
11472: LD_ADDR_VAR 0 9
11476: PUSH
11477: LD_EXP 35
11481: PUSH
11482: LD_INT 4
11484: ARRAY
11485: PUSH
11486: FOR_IN
11487: IFFALSE 11520
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
11489: LD_ADDR_VAR 0 8
11493: PUSH
11494: LD_VAR 0 8
11498: PUSH
11499: LD_VAR 0 9
11503: PUSH
11504: LD_INT 10
11506: PLUS
11507: PPUSH
11508: CALL_OW 110
11512: PUSH
11513: LD_INT 3
11515: DIV
11516: PLUS
11517: ST_TO_ADDR
11518: GO 11486
11520: POP
11521: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
11522: LD_VAR 0 5
11526: PUSH
11527: LD_EXP 46
11531: GREATEREQUAL
11532: PUSH
11533: LD_VAR 0 6
11537: PUSH
11538: LD_EXP 46
11542: GREATEREQUAL
11543: OR
11544: PUSH
11545: LD_VAR 0 7
11549: PUSH
11550: LD_EXP 46
11554: GREATEREQUAL
11555: OR
11556: PUSH
11557: LD_VAR 0 8
11561: PUSH
11562: LD_EXP 46
11566: GREATEREQUAL
11567: OR
11568: IFFALSE 11573
// enable ( 3 ) ;
11570: LD_INT 3
11572: ENABLE_MARKED
// end ; end ;
11573: LD_VAR 0 1
11577: RET
// every 0 0$1 marked 2 do
11578: GO 11580
11580: DISABLE
// begin count_king ;
11581: CALL 11075 0 0
// show_public_points ;
11585: CALL 9968 0 0
// enable ;
11589: ENABLE
// end ;
11590: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
11591: GO 11593
11593: DISABLE
11594: LD_INT 0
11596: PPUSH
11597: PPUSH
11598: PPUSH
11599: PPUSH
11600: PPUSH
11601: PPUSH
// begin win := [ ] ;
11602: LD_ADDR_LOC 22
11606: PUSH
11607: EMPTY
11608: ST_TO_ADDR
// red = 0 ;
11609: LD_ADDR_VAR 0 2
11613: PUSH
11614: LD_INT 0
11616: ST_TO_ADDR
// blue = 0 ;
11617: LD_ADDR_VAR 0 3
11621: PUSH
11622: LD_INT 0
11624: ST_TO_ADDR
// yel = 0 ;
11625: LD_ADDR_VAR 0 4
11629: PUSH
11630: LD_INT 0
11632: ST_TO_ADDR
// green = 0 ;
11633: LD_ADDR_VAR 0 5
11637: PUSH
11638: LD_INT 0
11640: ST_TO_ADDR
// if not Team_Game then
11641: LD_EXP 39
11645: NOT
11646: IFFALSE 11723
// begin for side = 1 to 8 do
11648: LD_ADDR_VAR 0 1
11652: PUSH
11653: DOUBLE
11654: LD_INT 1
11656: DEC
11657: ST_TO_ADDR
11658: LD_INT 8
11660: PUSH
11661: FOR_TO
11662: IFFALSE 11707
// if GetTag ( side + 10 ) >= final_count * 3 then
11664: LD_VAR 0 1
11668: PUSH
11669: LD_INT 10
11671: PLUS
11672: PPUSH
11673: CALL_OW 110
11677: PUSH
11678: LD_EXP 46
11682: PUSH
11683: LD_INT 3
11685: MUL
11686: GREATEREQUAL
11687: IFFALSE 11705
// win := win ^ side ;
11689: LD_ADDR_LOC 22
11693: PUSH
11694: LD_LOC 22
11698: PUSH
11699: LD_VAR 0 1
11703: ADD
11704: ST_TO_ADDR
11705: GO 11661
11707: POP
11708: POP
// if win then
11709: LD_LOC 22
11713: IFFALSE 11720
// enable ( 4 ) else
11715: LD_INT 4
11717: ENABLE_MARKED
11718: GO 11721
// enable ;
11720: ENABLE
// end else
11721: GO 12039
// begin for i in Teams [ 1 ] do
11723: LD_ADDR_VAR 0 6
11727: PUSH
11728: LD_EXP 35
11732: PUSH
11733: LD_INT 1
11735: ARRAY
11736: PUSH
11737: FOR_IN
11738: IFFALSE 11771
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: LD_VAR 0 2
11749: PUSH
11750: LD_VAR 0 6
11754: PUSH
11755: LD_INT 10
11757: PLUS
11758: PPUSH
11759: CALL_OW 110
11763: PUSH
11764: LD_INT 3
11766: DIV
11767: PLUS
11768: ST_TO_ADDR
11769: GO 11737
11771: POP
11772: POP
// for i in Teams [ 2 ] do
11773: LD_ADDR_VAR 0 6
11777: PUSH
11778: LD_EXP 35
11782: PUSH
11783: LD_INT 2
11785: ARRAY
11786: PUSH
11787: FOR_IN
11788: IFFALSE 11821
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
11790: LD_ADDR_VAR 0 3
11794: PUSH
11795: LD_VAR 0 3
11799: PUSH
11800: LD_VAR 0 6
11804: PUSH
11805: LD_INT 10
11807: PLUS
11808: PPUSH
11809: CALL_OW 110
11813: PUSH
11814: LD_INT 3
11816: DIV
11817: PLUS
11818: ST_TO_ADDR
11819: GO 11787
11821: POP
11822: POP
// for i in Teams [ 3 ] do
11823: LD_ADDR_VAR 0 6
11827: PUSH
11828: LD_EXP 35
11832: PUSH
11833: LD_INT 3
11835: ARRAY
11836: PUSH
11837: FOR_IN
11838: IFFALSE 11871
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
11840: LD_ADDR_VAR 0 4
11844: PUSH
11845: LD_VAR 0 4
11849: PUSH
11850: LD_VAR 0 6
11854: PUSH
11855: LD_INT 10
11857: PLUS
11858: PPUSH
11859: CALL_OW 110
11863: PUSH
11864: LD_INT 3
11866: DIV
11867: PLUS
11868: ST_TO_ADDR
11869: GO 11837
11871: POP
11872: POP
// for i in Teams [ 4 ] do
11873: LD_ADDR_VAR 0 6
11877: PUSH
11878: LD_EXP 35
11882: PUSH
11883: LD_INT 4
11885: ARRAY
11886: PUSH
11887: FOR_IN
11888: IFFALSE 11921
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
11890: LD_ADDR_VAR 0 5
11894: PUSH
11895: LD_VAR 0 5
11899: PUSH
11900: LD_VAR 0 6
11904: PUSH
11905: LD_INT 10
11907: PLUS
11908: PPUSH
11909: CALL_OW 110
11913: PUSH
11914: LD_INT 3
11916: DIV
11917: PLUS
11918: ST_TO_ADDR
11919: GO 11887
11921: POP
11922: POP
// if red >= final_count then
11923: LD_VAR 0 2
11927: PUSH
11928: LD_EXP 46
11932: GREATEREQUAL
11933: IFFALSE 11949
// win = teams [ 1 ] ;
11935: LD_ADDR_LOC 22
11939: PUSH
11940: LD_EXP 35
11944: PUSH
11945: LD_INT 1
11947: ARRAY
11948: ST_TO_ADDR
// if blue >= final_count then
11949: LD_VAR 0 3
11953: PUSH
11954: LD_EXP 46
11958: GREATEREQUAL
11959: IFFALSE 11975
// win = teams [ 2 ] ;
11961: LD_ADDR_LOC 22
11965: PUSH
11966: LD_EXP 35
11970: PUSH
11971: LD_INT 2
11973: ARRAY
11974: ST_TO_ADDR
// if yel >= final_count then
11975: LD_VAR 0 4
11979: PUSH
11980: LD_EXP 46
11984: GREATEREQUAL
11985: IFFALSE 12001
// win = teams [ 3 ] ;
11987: LD_ADDR_LOC 22
11991: PUSH
11992: LD_EXP 35
11996: PUSH
11997: LD_INT 3
11999: ARRAY
12000: ST_TO_ADDR
// if green >= final_count then
12001: LD_VAR 0 5
12005: PUSH
12006: LD_EXP 46
12010: GREATEREQUAL
12011: IFFALSE 12027
// win = teams [ 4 ] ;
12013: LD_ADDR_LOC 22
12017: PUSH
12018: LD_EXP 35
12022: PUSH
12023: LD_INT 4
12025: ARRAY
12026: ST_TO_ADDR
// if win then
12027: LD_LOC 22
12031: IFFALSE 12038
// enable ( 4 ) else
12033: LD_INT 4
12035: ENABLE_MARKED
12036: GO 12039
// enable ;
12038: ENABLE
// end ; end ;
12039: PPOPN 6
12041: END
// every 0 0$1 marked 4 do
12042: GO 12044
12044: DISABLE
// begin if Player_Side in win then
12045: LD_EXP 47
12049: PUSH
12050: LD_LOC 22
12054: IN
12055: IFFALSE 12071
// begin wait ( 0 0$2 ) ;
12057: LD_INT 70
12059: PPUSH
12060: CALL_OW 67
// enable ( 401 ) ;
12064: LD_INT 401
12066: ENABLE_MARKED
// exit ;
12067: GO 12087
// end else
12069: GO 12087
// begin wait ( 0 0$2 ) ;
12071: LD_INT 70
12073: PPUSH
12074: CALL_OW 67
// Multiplayer_Loose_Message ;
12078: CALL_OW 521
// enable ( 400 ) ;
12082: LD_INT 400
12084: ENABLE_MARKED
// exit ;
12085: GO 12087
// end ; end ; end_of_file
12087: END
// export function SetMpTechs ( ) ; var side , i ; begin
12088: LD_INT 0
12090: PPUSH
12091: PPUSH
12092: PPUSH
// for side = 1 to 8 do
12093: LD_ADDR_VAR 0 2
12097: PUSH
12098: DOUBLE
12099: LD_INT 1
12101: DEC
12102: ST_TO_ADDR
12103: LD_INT 8
12105: PUSH
12106: FOR_TO
12107: IFFALSE 12228
// begin for i = 1 to 72 do
12109: LD_ADDR_VAR 0 3
12113: PUSH
12114: DOUBLE
12115: LD_INT 1
12117: DEC
12118: ST_TO_ADDR
12119: LD_INT 72
12121: PUSH
12122: FOR_TO
12123: IFFALSE 12154
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12125: LD_VAR 0 3
12129: PPUSH
12130: LD_VAR 0 2
12134: PPUSH
12135: LD_INT 0
12137: PPUSH
12138: LD_VAR 0 3
12142: PPUSH
12143: CALL_OW 565
12147: PPUSH
12148: CALL_OW 322
12152: GO 12122
12154: POP
12155: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12156: LD_INT 73
12158: PPUSH
12159: LD_VAR 0 2
12163: PPUSH
12164: LD_INT 0
12166: PPUSH
12167: LD_INT 25
12169: PPUSH
12170: CALL_OW 565
12174: PPUSH
12175: CALL_OW 322
// for i = 0 to 40 do
12179: LD_ADDR_VAR 0 3
12183: PUSH
12184: DOUBLE
12185: LD_INT 0
12187: DEC
12188: ST_TO_ADDR
12189: LD_INT 40
12191: PUSH
12192: FOR_TO
12193: IFFALSE 12224
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12195: LD_VAR 0 3
12199: PPUSH
12200: LD_VAR 0 2
12204: PPUSH
12205: LD_INT 1
12207: PPUSH
12208: LD_VAR 0 3
12212: PPUSH
12213: CALL_OW 565
12217: PPUSH
12218: CALL_OW 324
12222: GO 12192
12224: POP
12225: POP
// end ;
12226: GO 12106
12228: POP
12229: POP
// end ;
12230: LD_VAR 0 1
12234: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12235: LD_INT 0
12237: PPUSH
12238: PPUSH
12239: PPUSH
// for side = 1 to 8 do
12240: LD_ADDR_VAR 0 3
12244: PUSH
12245: DOUBLE
12246: LD_INT 1
12248: DEC
12249: ST_TO_ADDR
12250: LD_INT 8
12252: PUSH
12253: FOR_TO
12254: IFFALSE 16250
// begin for i = 1 to 73 do
12256: LD_ADDR_VAR 0 4
12260: PUSH
12261: DOUBLE
12262: LD_INT 1
12264: DEC
12265: ST_TO_ADDR
12266: LD_INT 73
12268: PUSH
12269: FOR_TO
12270: IFFALSE 12291
// SetTech ( i , side , state_disabled ) ;
12272: LD_VAR 0 4
12276: PPUSH
12277: LD_VAR 0 3
12281: PPUSH
12282: LD_INT 0
12284: PPUSH
12285: CALL_OW 322
12289: GO 12269
12291: POP
12292: POP
// for i = 0 to 40 do
12293: LD_ADDR_VAR 0 4
12297: PUSH
12298: DOUBLE
12299: LD_INT 0
12301: DEC
12302: ST_TO_ADDR
12303: LD_INT 40
12305: PUSH
12306: FOR_TO
12307: IFFALSE 12328
// SetRestrict ( i , side , false ) ;
12309: LD_VAR 0 4
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: LD_INT 0
12321: PPUSH
12322: CALL_OW 324
12326: GO 12306
12328: POP
12329: POP
// case level of 1 :
12330: LD_VAR 0 1
12334: PUSH
12335: LD_INT 1
12337: DOUBLE
12338: EQUAL
12339: IFTRUE 12343
12341: GO 12496
12343: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12344: LD_INT 35
12346: PPUSH
12347: LD_VAR 0 3
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12359: LD_INT 45
12361: PPUSH
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 1
12369: PPUSH
12370: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12374: LD_INT 46
12376: PPUSH
12377: LD_VAR 0 3
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12389: LD_INT 47
12391: PPUSH
12392: LD_VAR 0 3
12396: PPUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12404: LD_INT 0
12406: PPUSH
12407: LD_VAR 0 3
12411: PPUSH
12412: LD_INT 1
12414: PPUSH
12415: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12419: LD_INT 2
12421: PPUSH
12422: LD_VAR 0 3
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12434: LD_INT 4
12436: PPUSH
12437: LD_VAR 0 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12449: LD_INT 6
12451: PPUSH
12452: LD_VAR 0 3
12456: PPUSH
12457: LD_INT 1
12459: PPUSH
12460: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12464: LD_INT 29
12466: PPUSH
12467: LD_VAR 0 3
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12479: LD_INT 31
12481: PPUSH
12482: LD_VAR 0 3
12486: PPUSH
12487: LD_INT 1
12489: PPUSH
12490: CALL_OW 324
// end ; 2 :
12494: GO 16248
12496: LD_INT 2
12498: DOUBLE
12499: EQUAL
12500: IFTRUE 12504
12502: GO 12702
12504: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12505: LD_INT 35
12507: PPUSH
12508: LD_VAR 0 3
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12520: LD_INT 45
12522: PPUSH
12523: LD_VAR 0 3
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12535: LD_INT 46
12537: PPUSH
12538: LD_VAR 0 3
12542: PPUSH
12543: LD_INT 1
12545: PPUSH
12546: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12550: LD_INT 47
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: LD_INT 1
12560: PPUSH
12561: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12565: LD_INT 1
12567: PPUSH
12568: LD_VAR 0 3
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12580: LD_INT 2
12582: PPUSH
12583: LD_VAR 0 3
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12595: LD_INT 11
12597: PPUSH
12598: LD_VAR 0 3
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12610: LD_INT 0
12612: PPUSH
12613: LD_VAR 0 3
12617: PPUSH
12618: LD_INT 1
12620: PPUSH
12621: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12625: LD_INT 2
12627: PPUSH
12628: LD_VAR 0 3
12632: PPUSH
12633: LD_INT 1
12635: PPUSH
12636: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12640: LD_INT 4
12642: PPUSH
12643: LD_VAR 0 3
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12655: LD_INT 6
12657: PPUSH
12658: LD_VAR 0 3
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12670: LD_INT 29
12672: PPUSH
12673: LD_VAR 0 3
12677: PPUSH
12678: LD_INT 1
12680: PPUSH
12681: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12685: LD_INT 31
12687: PPUSH
12688: LD_VAR 0 3
12692: PPUSH
12693: LD_INT 1
12695: PPUSH
12696: CALL_OW 324
// end ; 3 :
12700: GO 16248
12702: LD_INT 3
12704: DOUBLE
12705: EQUAL
12706: IFTRUE 12710
12708: GO 13163
12710: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12711: LD_INT 35
12713: PPUSH
12714: LD_VAR 0 3
12718: PPUSH
12719: LD_INT 1
12721: PPUSH
12722: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12726: LD_INT 45
12728: PPUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: LD_INT 1
12736: PPUSH
12737: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12741: LD_INT 46
12743: PPUSH
12744: LD_VAR 0 3
12748: PPUSH
12749: LD_INT 1
12751: PPUSH
12752: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12756: LD_INT 47
12758: PPUSH
12759: LD_VAR 0 3
12763: PPUSH
12764: LD_INT 1
12766: PPUSH
12767: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12771: LD_INT 1
12773: PPUSH
12774: LD_VAR 0 3
12778: PPUSH
12779: LD_INT 1
12781: PPUSH
12782: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12786: LD_INT 2
12788: PPUSH
12789: LD_VAR 0 3
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12801: LD_INT 11
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: LD_INT 1
12811: PPUSH
12812: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12816: LD_INT 48
12818: PPUSH
12819: LD_VAR 0 3
12823: PPUSH
12824: LD_INT 1
12826: PPUSH
12827: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12831: LD_INT 69
12833: PPUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12846: LD_INT 39
12848: PPUSH
12849: LD_VAR 0 3
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12861: LD_INT 43
12863: PPUSH
12864: LD_VAR 0 3
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12876: LD_INT 51
12878: PPUSH
12879: LD_VAR 0 3
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12891: LD_INT 6
12893: PPUSH
12894: LD_VAR 0 3
12898: PPUSH
12899: LD_INT 1
12901: PPUSH
12902: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12906: LD_INT 0
12908: PPUSH
12909: LD_VAR 0 3
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12921: LD_INT 2
12923: PPUSH
12924: LD_VAR 0 3
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12936: LD_INT 3
12938: PPUSH
12939: LD_VAR 0 3
12943: PPUSH
12944: LD_INT 1
12946: PPUSH
12947: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12951: LD_INT 4
12953: PPUSH
12954: LD_VAR 0 3
12958: PPUSH
12959: LD_INT 1
12961: PPUSH
12962: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12966: LD_INT 6
12968: PPUSH
12969: LD_VAR 0 3
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12981: LD_INT 7
12983: PPUSH
12984: LD_VAR 0 3
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12996: LD_INT 8
12998: PPUSH
12999: LD_VAR 0 3
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13011: LD_INT 10
13013: PPUSH
13014: LD_VAR 0 3
13018: PPUSH
13019: LD_INT 1
13021: PPUSH
13022: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13026: LD_INT 15
13028: PPUSH
13029: LD_VAR 0 3
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13041: LD_INT 16
13043: PPUSH
13044: LD_VAR 0 3
13048: PPUSH
13049: LD_INT 1
13051: PPUSH
13052: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13056: LD_INT 17
13058: PPUSH
13059: LD_VAR 0 3
13063: PPUSH
13064: LD_INT 1
13066: PPUSH
13067: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13071: LD_INT 20
13073: PPUSH
13074: LD_VAR 0 3
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13086: LD_INT 26
13088: PPUSH
13089: LD_VAR 0 3
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13101: LD_INT 27
13103: PPUSH
13104: LD_VAR 0 3
13108: PPUSH
13109: LD_INT 1
13111: PPUSH
13112: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13116: LD_INT 29
13118: PPUSH
13119: LD_VAR 0 3
13123: PPUSH
13124: LD_INT 1
13126: PPUSH
13127: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13131: LD_INT 31
13133: PPUSH
13134: LD_VAR 0 3
13138: PPUSH
13139: LD_INT 1
13141: PPUSH
13142: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13146: LD_INT 32
13148: PPUSH
13149: LD_VAR 0 3
13153: PPUSH
13154: LD_INT 1
13156: PPUSH
13157: CALL_OW 324
// end ; 4 :
13161: GO 16248
13163: LD_INT 4
13165: DOUBLE
13166: EQUAL
13167: IFTRUE 13171
13169: GO 14119
13171: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13172: LD_INT 35
13174: PPUSH
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 1
13182: PPUSH
13183: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13187: LD_INT 45
13189: PPUSH
13190: LD_VAR 0 3
13194: PPUSH
13195: LD_INT 1
13197: PPUSH
13198: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13202: LD_INT 46
13204: PPUSH
13205: LD_VAR 0 3
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13217: LD_INT 47
13219: PPUSH
13220: LD_VAR 0 3
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13232: LD_INT 1
13234: PPUSH
13235: LD_VAR 0 3
13239: PPUSH
13240: LD_INT 1
13242: PPUSH
13243: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13247: LD_INT 2
13249: PPUSH
13250: LD_VAR 0 3
13254: PPUSH
13255: LD_INT 1
13257: PPUSH
13258: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13262: LD_INT 11
13264: PPUSH
13265: LD_VAR 0 3
13269: PPUSH
13270: LD_INT 1
13272: PPUSH
13273: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13277: LD_INT 20
13279: PPUSH
13280: LD_VAR 0 3
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13292: LD_INT 48
13294: PPUSH
13295: LD_VAR 0 3
13299: PPUSH
13300: LD_INT 1
13302: PPUSH
13303: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13307: LD_INT 49
13309: PPUSH
13310: LD_VAR 0 3
13314: PPUSH
13315: LD_INT 1
13317: PPUSH
13318: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13322: LD_INT 69
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13337: LD_INT 39
13339: PPUSH
13340: LD_VAR 0 3
13344: PPUSH
13345: LD_INT 1
13347: PPUSH
13348: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13352: LD_INT 34
13354: PPUSH
13355: LD_VAR 0 3
13359: PPUSH
13360: LD_INT 1
13362: PPUSH
13363: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13367: LD_INT 42
13369: PPUSH
13370: LD_VAR 0 3
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13382: LD_INT 44
13384: PPUSH
13385: LD_VAR 0 3
13389: PPUSH
13390: LD_INT 1
13392: PPUSH
13393: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13397: LD_INT 41
13399: PPUSH
13400: LD_VAR 0 3
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13412: LD_INT 43
13414: PPUSH
13415: LD_VAR 0 3
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13427: LD_INT 70
13429: PPUSH
13430: LD_VAR 0 3
13434: PPUSH
13435: LD_INT 1
13437: PPUSH
13438: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13442: LD_INT 51
13444: PPUSH
13445: LD_VAR 0 3
13449: PPUSH
13450: LD_INT 1
13452: PPUSH
13453: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13457: LD_INT 52
13459: PPUSH
13460: LD_VAR 0 3
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13472: LD_INT 6
13474: PPUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: LD_INT 1
13482: PPUSH
13483: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13487: LD_INT 15
13489: PPUSH
13490: LD_VAR 0 3
13494: PPUSH
13495: LD_INT 1
13497: PPUSH
13498: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13502: LD_INT 7
13504: PPUSH
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 1
13512: PPUSH
13513: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13517: LD_INT 12
13519: PPUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: LD_INT 1
13527: PPUSH
13528: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13532: LD_INT 18
13534: PPUSH
13535: LD_VAR 0 3
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13547: LD_INT 60
13549: PPUSH
13550: LD_VAR 0 3
13554: PPUSH
13555: LD_INT 1
13557: PPUSH
13558: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13562: LD_INT 9
13564: PPUSH
13565: LD_VAR 0 3
13569: PPUSH
13570: LD_INT 1
13572: PPUSH
13573: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13577: LD_INT 30
13579: PPUSH
13580: LD_VAR 0 3
13584: PPUSH
13585: LD_INT 1
13587: PPUSH
13588: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13592: LD_INT 37
13594: PPUSH
13595: LD_VAR 0 3
13599: PPUSH
13600: LD_INT 1
13602: PPUSH
13603: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13607: LD_INT 5
13609: PPUSH
13610: LD_VAR 0 3
13614: PPUSH
13615: LD_INT 1
13617: PPUSH
13618: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13622: LD_INT 66
13624: PPUSH
13625: LD_VAR 0 3
13629: PPUSH
13630: LD_INT 1
13632: PPUSH
13633: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13637: LD_INT 21
13639: PPUSH
13640: LD_VAR 0 3
13644: PPUSH
13645: LD_INT 1
13647: PPUSH
13648: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13652: LD_INT 22
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: LD_INT 1
13662: PPUSH
13663: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13667: LD_INT 54
13669: PPUSH
13670: LD_VAR 0 3
13674: PPUSH
13675: LD_INT 1
13677: PPUSH
13678: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13682: LD_INT 0
13684: PPUSH
13685: LD_VAR 0 3
13689: PPUSH
13690: LD_INT 1
13692: PPUSH
13693: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13697: LD_INT 1
13699: PPUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13712: LD_INT 2
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 1
13722: PPUSH
13723: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13727: LD_INT 3
13729: PPUSH
13730: LD_VAR 0 3
13734: PPUSH
13735: LD_INT 1
13737: PPUSH
13738: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13742: LD_INT 4
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13757: LD_INT 5
13759: PPUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13772: LD_INT 6
13774: PPUSH
13775: LD_VAR 0 3
13779: PPUSH
13780: LD_INT 1
13782: PPUSH
13783: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13787: LD_INT 7
13789: PPUSH
13790: LD_VAR 0 3
13794: PPUSH
13795: LD_INT 1
13797: PPUSH
13798: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13802: LD_INT 8
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13817: LD_INT 10
13819: PPUSH
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_INT 1
13827: PPUSH
13828: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13832: LD_INT 11
13834: PPUSH
13835: LD_VAR 0 3
13839: PPUSH
13840: LD_INT 1
13842: PPUSH
13843: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13847: LD_INT 12
13849: PPUSH
13850: LD_VAR 0 3
13854: PPUSH
13855: LD_INT 1
13857: PPUSH
13858: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13862: LD_INT 13
13864: PPUSH
13865: LD_VAR 0 3
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13877: LD_INT 14
13879: PPUSH
13880: LD_VAR 0 3
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13892: LD_INT 15
13894: PPUSH
13895: LD_VAR 0 3
13899: PPUSH
13900: LD_INT 1
13902: PPUSH
13903: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13907: LD_INT 16
13909: PPUSH
13910: LD_VAR 0 3
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13922: LD_INT 17
13924: PPUSH
13925: LD_VAR 0 3
13929: PPUSH
13930: LD_INT 1
13932: PPUSH
13933: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13937: LD_INT 19
13939: PPUSH
13940: LD_VAR 0 3
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13952: LD_INT 20
13954: PPUSH
13955: LD_VAR 0 3
13959: PPUSH
13960: LD_INT 1
13962: PPUSH
13963: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13967: LD_INT 21
13969: PPUSH
13970: LD_VAR 0 3
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13982: LD_INT 23
13984: PPUSH
13985: LD_VAR 0 3
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13997: LD_INT 26
13999: PPUSH
14000: LD_VAR 0 3
14004: PPUSH
14005: LD_INT 1
14007: PPUSH
14008: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14012: LD_INT 27
14014: PPUSH
14015: LD_VAR 0 3
14019: PPUSH
14020: LD_INT 1
14022: PPUSH
14023: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14027: LD_INT 28
14029: PPUSH
14030: LD_VAR 0 3
14034: PPUSH
14035: LD_INT 1
14037: PPUSH
14038: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14042: LD_INT 29
14044: PPUSH
14045: LD_VAR 0 3
14049: PPUSH
14050: LD_INT 1
14052: PPUSH
14053: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14057: LD_INT 30
14059: PPUSH
14060: LD_VAR 0 3
14064: PPUSH
14065: LD_INT 1
14067: PPUSH
14068: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14072: LD_INT 31
14074: PPUSH
14075: LD_VAR 0 3
14079: PPUSH
14080: LD_INT 1
14082: PPUSH
14083: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14087: LD_INT 32
14089: PPUSH
14090: LD_VAR 0 3
14094: PPUSH
14095: LD_INT 1
14097: PPUSH
14098: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14102: LD_INT 36
14104: PPUSH
14105: LD_VAR 0 3
14109: PPUSH
14110: LD_INT 1
14112: PPUSH
14113: CALL_OW 324
// end ; 5 :
14117: GO 16248
14119: LD_INT 5
14121: DOUBLE
14122: EQUAL
14123: IFTRUE 14127
14125: GO 15240
14127: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14128: LD_INT 35
14130: PPUSH
14131: LD_VAR 0 3
14135: PPUSH
14136: LD_INT 1
14138: PPUSH
14139: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14143: LD_INT 45
14145: PPUSH
14146: LD_VAR 0 3
14150: PPUSH
14151: LD_INT 1
14153: PPUSH
14154: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14158: LD_INT 46
14160: PPUSH
14161: LD_VAR 0 3
14165: PPUSH
14166: LD_INT 1
14168: PPUSH
14169: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14173: LD_INT 47
14175: PPUSH
14176: LD_VAR 0 3
14180: PPUSH
14181: LD_INT 1
14183: PPUSH
14184: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14188: LD_INT 1
14190: PPUSH
14191: LD_VAR 0 3
14195: PPUSH
14196: LD_INT 1
14198: PPUSH
14199: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14203: LD_INT 2
14205: PPUSH
14206: LD_VAR 0 3
14210: PPUSH
14211: LD_INT 1
14213: PPUSH
14214: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14218: LD_INT 11
14220: PPUSH
14221: LD_VAR 0 3
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14233: LD_INT 20
14235: PPUSH
14236: LD_VAR 0 3
14240: PPUSH
14241: LD_INT 1
14243: PPUSH
14244: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14248: LD_INT 48
14250: PPUSH
14251: LD_VAR 0 3
14255: PPUSH
14256: LD_INT 1
14258: PPUSH
14259: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14263: LD_INT 49
14265: PPUSH
14266: LD_VAR 0 3
14270: PPUSH
14271: LD_INT 1
14273: PPUSH
14274: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14278: LD_INT 69
14280: PPUSH
14281: LD_VAR 0 3
14285: PPUSH
14286: LD_INT 1
14288: PPUSH
14289: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14293: LD_INT 39
14295: PPUSH
14296: LD_VAR 0 3
14300: PPUSH
14301: LD_INT 1
14303: PPUSH
14304: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14308: LD_INT 34
14310: PPUSH
14311: LD_VAR 0 3
14315: PPUSH
14316: LD_INT 1
14318: PPUSH
14319: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14323: LD_INT 42
14325: PPUSH
14326: LD_VAR 0 3
14330: PPUSH
14331: LD_INT 1
14333: PPUSH
14334: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14338: LD_INT 44
14340: PPUSH
14341: LD_VAR 0 3
14345: PPUSH
14346: LD_INT 1
14348: PPUSH
14349: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14353: LD_INT 41
14355: PPUSH
14356: LD_VAR 0 3
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14368: LD_INT 40
14370: PPUSH
14371: LD_VAR 0 3
14375: PPUSH
14376: LD_INT 1
14378: PPUSH
14379: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14383: LD_INT 43
14385: PPUSH
14386: LD_VAR 0 3
14390: PPUSH
14391: LD_INT 1
14393: PPUSH
14394: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14398: LD_INT 70
14400: PPUSH
14401: LD_VAR 0 3
14405: PPUSH
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14413: LD_INT 51
14415: PPUSH
14416: LD_VAR 0 3
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14428: LD_INT 52
14430: PPUSH
14431: LD_VAR 0 3
14435: PPUSH
14436: LD_INT 1
14438: PPUSH
14439: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14443: LD_INT 6
14445: PPUSH
14446: LD_VAR 0 3
14450: PPUSH
14451: LD_INT 1
14453: PPUSH
14454: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14458: LD_INT 15
14460: PPUSH
14461: LD_VAR 0 3
14465: PPUSH
14466: LD_INT 1
14468: PPUSH
14469: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14473: LD_INT 7
14475: PPUSH
14476: LD_VAR 0 3
14480: PPUSH
14481: LD_INT 1
14483: PPUSH
14484: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14488: LD_INT 12
14490: PPUSH
14491: LD_VAR 0 3
14495: PPUSH
14496: LD_INT 1
14498: PPUSH
14499: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14503: LD_INT 17
14505: PPUSH
14506: LD_VAR 0 3
14510: PPUSH
14511: LD_INT 1
14513: PPUSH
14514: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14518: LD_INT 18
14520: PPUSH
14521: LD_VAR 0 3
14525: PPUSH
14526: LD_INT 1
14528: PPUSH
14529: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14533: LD_INT 60
14535: PPUSH
14536: LD_VAR 0 3
14540: PPUSH
14541: LD_INT 1
14543: PPUSH
14544: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14548: LD_INT 32
14550: PPUSH
14551: LD_VAR 0 3
14555: PPUSH
14556: LD_INT 1
14558: PPUSH
14559: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14563: LD_INT 9
14565: PPUSH
14566: LD_VAR 0 3
14570: PPUSH
14571: LD_INT 1
14573: PPUSH
14574: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14578: LD_INT 57
14580: PPUSH
14581: LD_VAR 0 3
14585: PPUSH
14586: LD_INT 1
14588: PPUSH
14589: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14593: LD_INT 30
14595: PPUSH
14596: LD_VAR 0 3
14600: PPUSH
14601: LD_INT 1
14603: PPUSH
14604: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14608: LD_INT 37
14610: PPUSH
14611: LD_VAR 0 3
14615: PPUSH
14616: LD_INT 1
14618: PPUSH
14619: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14623: LD_INT 63
14625: PPUSH
14626: LD_VAR 0 3
14630: PPUSH
14631: LD_INT 1
14633: PPUSH
14634: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14638: LD_INT 3
14640: PPUSH
14641: LD_VAR 0 3
14645: PPUSH
14646: LD_INT 1
14648: PPUSH
14649: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14653: LD_INT 4
14655: PPUSH
14656: LD_VAR 0 3
14660: PPUSH
14661: LD_INT 1
14663: PPUSH
14664: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14668: LD_INT 5
14670: PPUSH
14671: LD_VAR 0 3
14675: PPUSH
14676: LD_INT 1
14678: PPUSH
14679: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14683: LD_INT 66
14685: PPUSH
14686: LD_VAR 0 3
14690: PPUSH
14691: LD_INT 1
14693: PPUSH
14694: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14698: LD_INT 21
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: LD_INT 1
14708: PPUSH
14709: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14713: LD_INT 22
14715: PPUSH
14716: LD_VAR 0 3
14720: PPUSH
14721: LD_INT 1
14723: PPUSH
14724: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14728: LD_INT 19
14730: PPUSH
14731: LD_VAR 0 3
14735: PPUSH
14736: LD_INT 1
14738: PPUSH
14739: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14743: LD_INT 54
14745: PPUSH
14746: LD_VAR 0 3
14750: PPUSH
14751: LD_INT 1
14753: PPUSH
14754: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14758: LD_INT 55
14760: PPUSH
14761: LD_VAR 0 3
14765: PPUSH
14766: LD_INT 1
14768: PPUSH
14769: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14773: LD_INT 0
14775: PPUSH
14776: LD_VAR 0 3
14780: PPUSH
14781: LD_INT 1
14783: PPUSH
14784: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14788: LD_INT 1
14790: PPUSH
14791: LD_VAR 0 3
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14803: LD_INT 2
14805: PPUSH
14806: LD_VAR 0 3
14810: PPUSH
14811: LD_INT 1
14813: PPUSH
14814: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14818: LD_INT 3
14820: PPUSH
14821: LD_VAR 0 3
14825: PPUSH
14826: LD_INT 1
14828: PPUSH
14829: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14833: LD_INT 4
14835: PPUSH
14836: LD_VAR 0 3
14840: PPUSH
14841: LD_INT 1
14843: PPUSH
14844: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14848: LD_INT 5
14850: PPUSH
14851: LD_VAR 0 3
14855: PPUSH
14856: LD_INT 1
14858: PPUSH
14859: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14863: LD_INT 6
14865: PPUSH
14866: LD_VAR 0 3
14870: PPUSH
14871: LD_INT 1
14873: PPUSH
14874: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14878: LD_INT 7
14880: PPUSH
14881: LD_VAR 0 3
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14893: LD_INT 8
14895: PPUSH
14896: LD_VAR 0 3
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14908: LD_INT 10
14910: PPUSH
14911: LD_VAR 0 3
14915: PPUSH
14916: LD_INT 1
14918: PPUSH
14919: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14923: LD_INT 11
14925: PPUSH
14926: LD_VAR 0 3
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14938: LD_INT 12
14940: PPUSH
14941: LD_VAR 0 3
14945: PPUSH
14946: LD_INT 1
14948: PPUSH
14949: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14953: LD_INT 13
14955: PPUSH
14956: LD_VAR 0 3
14960: PPUSH
14961: LD_INT 1
14963: PPUSH
14964: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14968: LD_INT 14
14970: PPUSH
14971: LD_VAR 0 3
14975: PPUSH
14976: LD_INT 1
14978: PPUSH
14979: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14983: LD_INT 15
14985: PPUSH
14986: LD_VAR 0 3
14990: PPUSH
14991: LD_INT 1
14993: PPUSH
14994: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14998: LD_INT 16
15000: PPUSH
15001: LD_VAR 0 3
15005: PPUSH
15006: LD_INT 1
15008: PPUSH
15009: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15013: LD_INT 17
15015: PPUSH
15016: LD_VAR 0 3
15020: PPUSH
15021: LD_INT 1
15023: PPUSH
15024: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
15028: LD_INT 18
15030: PPUSH
15031: LD_VAR 0 3
15035: PPUSH
15036: LD_INT 1
15038: PPUSH
15039: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15043: LD_INT 19
15045: PPUSH
15046: LD_VAR 0 3
15050: PPUSH
15051: LD_INT 1
15053: PPUSH
15054: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15058: LD_INT 20
15060: PPUSH
15061: LD_VAR 0 3
15065: PPUSH
15066: LD_INT 1
15068: PPUSH
15069: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15073: LD_INT 21
15075: PPUSH
15076: LD_VAR 0 3
15080: PPUSH
15081: LD_INT 1
15083: PPUSH
15084: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15088: LD_INT 23
15090: PPUSH
15091: LD_VAR 0 3
15095: PPUSH
15096: LD_INT 1
15098: PPUSH
15099: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15103: LD_INT 26
15105: PPUSH
15106: LD_VAR 0 3
15110: PPUSH
15111: LD_INT 1
15113: PPUSH
15114: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15118: LD_INT 27
15120: PPUSH
15121: LD_VAR 0 3
15125: PPUSH
15126: LD_INT 1
15128: PPUSH
15129: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15133: LD_INT 28
15135: PPUSH
15136: LD_VAR 0 3
15140: PPUSH
15141: LD_INT 1
15143: PPUSH
15144: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15148: LD_INT 29
15150: PPUSH
15151: LD_VAR 0 3
15155: PPUSH
15156: LD_INT 1
15158: PPUSH
15159: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15163: LD_INT 30
15165: PPUSH
15166: LD_VAR 0 3
15170: PPUSH
15171: LD_INT 1
15173: PPUSH
15174: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15178: LD_INT 31
15180: PPUSH
15181: LD_VAR 0 3
15185: PPUSH
15186: LD_INT 1
15188: PPUSH
15189: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15193: LD_INT 32
15195: PPUSH
15196: LD_VAR 0 3
15200: PPUSH
15201: LD_INT 1
15203: PPUSH
15204: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15208: LD_INT 33
15210: PPUSH
15211: LD_VAR 0 3
15215: PPUSH
15216: LD_INT 1
15218: PPUSH
15219: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15223: LD_INT 36
15225: PPUSH
15226: LD_VAR 0 3
15230: PPUSH
15231: LD_INT 1
15233: PPUSH
15234: CALL_OW 324
// end ; 6 :
15238: GO 16248
15240: LD_INT 6
15242: DOUBLE
15243: EQUAL
15244: IFTRUE 15248
15246: GO 16173
15248: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15249: LD_INT 35
15251: PPUSH
15252: LD_VAR 0 3
15256: PPUSH
15257: LD_INT 1
15259: PPUSH
15260: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15264: LD_INT 45
15266: PPUSH
15267: LD_VAR 0 3
15271: PPUSH
15272: LD_INT 1
15274: PPUSH
15275: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15279: LD_INT 46
15281: PPUSH
15282: LD_VAR 0 3
15286: PPUSH
15287: LD_INT 1
15289: PPUSH
15290: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15294: LD_INT 47
15296: PPUSH
15297: LD_VAR 0 3
15301: PPUSH
15302: LD_INT 1
15304: PPUSH
15305: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15309: LD_INT 1
15311: PPUSH
15312: LD_VAR 0 3
15316: PPUSH
15317: LD_INT 1
15319: PPUSH
15320: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15324: LD_INT 2
15326: PPUSH
15327: LD_VAR 0 3
15331: PPUSH
15332: LD_INT 1
15334: PPUSH
15335: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15339: LD_INT 11
15341: PPUSH
15342: LD_VAR 0 3
15346: PPUSH
15347: LD_INT 1
15349: PPUSH
15350: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15354: LD_INT 20
15356: PPUSH
15357: LD_VAR 0 3
15361: PPUSH
15362: LD_INT 1
15364: PPUSH
15365: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15369: LD_INT 48
15371: PPUSH
15372: LD_VAR 0 3
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15384: LD_INT 49
15386: PPUSH
15387: LD_VAR 0 3
15391: PPUSH
15392: LD_INT 1
15394: PPUSH
15395: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15399: LD_INT 50
15401: PPUSH
15402: LD_VAR 0 3
15406: PPUSH
15407: LD_INT 1
15409: PPUSH
15410: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15414: LD_INT 69
15416: PPUSH
15417: LD_VAR 0 3
15421: PPUSH
15422: LD_INT 1
15424: PPUSH
15425: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15429: LD_INT 39
15431: PPUSH
15432: LD_VAR 0 3
15436: PPUSH
15437: LD_INT 1
15439: PPUSH
15440: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15444: LD_INT 34
15446: PPUSH
15447: LD_VAR 0 3
15451: PPUSH
15452: LD_INT 1
15454: PPUSH
15455: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15459: LD_INT 42
15461: PPUSH
15462: LD_VAR 0 3
15466: PPUSH
15467: LD_INT 1
15469: PPUSH
15470: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15474: LD_INT 44
15476: PPUSH
15477: LD_VAR 0 3
15481: PPUSH
15482: LD_INT 1
15484: PPUSH
15485: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15489: LD_INT 41
15491: PPUSH
15492: LD_VAR 0 3
15496: PPUSH
15497: LD_INT 1
15499: PPUSH
15500: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15504: LD_INT 13
15506: PPUSH
15507: LD_VAR 0 3
15511: PPUSH
15512: LD_INT 1
15514: PPUSH
15515: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15519: LD_INT 40
15521: PPUSH
15522: LD_VAR 0 3
15526: PPUSH
15527: LD_INT 1
15529: PPUSH
15530: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15534: LD_INT 43
15536: PPUSH
15537: LD_VAR 0 3
15541: PPUSH
15542: LD_INT 1
15544: PPUSH
15545: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15549: LD_INT 70
15551: PPUSH
15552: LD_VAR 0 3
15556: PPUSH
15557: LD_INT 1
15559: PPUSH
15560: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15564: LD_INT 23
15566: PPUSH
15567: LD_VAR 0 3
15571: PPUSH
15572: LD_INT 1
15574: PPUSH
15575: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15579: LD_INT 51
15581: PPUSH
15582: LD_VAR 0 3
15586: PPUSH
15587: LD_INT 1
15589: PPUSH
15590: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15594: LD_INT 52
15596: PPUSH
15597: LD_VAR 0 3
15601: PPUSH
15602: LD_INT 1
15604: PPUSH
15605: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15609: LD_INT 6
15611: PPUSH
15612: LD_VAR 0 3
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15624: LD_INT 15
15626: PPUSH
15627: LD_VAR 0 3
15631: PPUSH
15632: LD_INT 1
15634: PPUSH
15635: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15639: LD_INT 7
15641: PPUSH
15642: LD_VAR 0 3
15646: PPUSH
15647: LD_INT 1
15649: PPUSH
15650: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15654: LD_INT 12
15656: PPUSH
15657: LD_VAR 0 3
15661: PPUSH
15662: LD_INT 1
15664: PPUSH
15665: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15669: LD_INT 10
15671: PPUSH
15672: LD_VAR 0 3
15676: PPUSH
15677: LD_INT 1
15679: PPUSH
15680: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15684: LD_INT 17
15686: PPUSH
15687: LD_VAR 0 3
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15699: LD_INT 18
15701: PPUSH
15702: LD_VAR 0 3
15706: PPUSH
15707: LD_INT 1
15709: PPUSH
15710: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15714: LD_INT 60
15716: PPUSH
15717: LD_VAR 0 3
15721: PPUSH
15722: LD_INT 1
15724: PPUSH
15725: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15729: LD_INT 61
15731: PPUSH
15732: LD_VAR 0 3
15736: PPUSH
15737: LD_INT 1
15739: PPUSH
15740: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15744: LD_INT 32
15746: PPUSH
15747: LD_VAR 0 3
15751: PPUSH
15752: LD_INT 1
15754: PPUSH
15755: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15759: LD_INT 27
15761: PPUSH
15762: LD_VAR 0 3
15766: PPUSH
15767: LD_INT 1
15769: PPUSH
15770: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15774: LD_INT 36
15776: PPUSH
15777: LD_VAR 0 3
15781: PPUSH
15782: LD_INT 1
15784: PPUSH
15785: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15789: LD_INT 33
15791: PPUSH
15792: LD_VAR 0 3
15796: PPUSH
15797: LD_INT 1
15799: PPUSH
15800: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15804: LD_INT 9
15806: PPUSH
15807: LD_VAR 0 3
15811: PPUSH
15812: LD_INT 1
15814: PPUSH
15815: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15819: LD_INT 38
15821: PPUSH
15822: LD_VAR 0 3
15826: PPUSH
15827: LD_INT 1
15829: PPUSH
15830: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15834: LD_INT 57
15836: PPUSH
15837: LD_VAR 0 3
15841: PPUSH
15842: LD_INT 1
15844: PPUSH
15845: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15849: LD_INT 58
15851: PPUSH
15852: LD_VAR 0 3
15856: PPUSH
15857: LD_INT 1
15859: PPUSH
15860: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15864: LD_INT 28
15866: PPUSH
15867: LD_VAR 0 3
15871: PPUSH
15872: LD_INT 1
15874: PPUSH
15875: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15879: LD_INT 29
15881: PPUSH
15882: LD_VAR 0 3
15886: PPUSH
15887: LD_INT 1
15889: PPUSH
15890: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15894: LD_INT 30
15896: PPUSH
15897: LD_VAR 0 3
15901: PPUSH
15902: LD_INT 1
15904: PPUSH
15905: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15909: LD_INT 37
15911: PPUSH
15912: LD_VAR 0 3
15916: PPUSH
15917: LD_INT 1
15919: PPUSH
15920: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15924: LD_INT 63
15926: PPUSH
15927: LD_VAR 0 3
15931: PPUSH
15932: LD_INT 1
15934: PPUSH
15935: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15939: LD_INT 64
15941: PPUSH
15942: LD_VAR 0 3
15946: PPUSH
15947: LD_INT 1
15949: PPUSH
15950: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15954: LD_INT 3
15956: PPUSH
15957: LD_VAR 0 3
15961: PPUSH
15962: LD_INT 1
15964: PPUSH
15965: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15969: LD_INT 4
15971: PPUSH
15972: LD_VAR 0 3
15976: PPUSH
15977: LD_INT 1
15979: PPUSH
15980: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15984: LD_INT 5
15986: PPUSH
15987: LD_VAR 0 3
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
15999: LD_INT 8
16001: PPUSH
16002: LD_VAR 0 3
16006: PPUSH
16007: LD_INT 1
16009: PPUSH
16010: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16014: LD_INT 66
16016: PPUSH
16017: LD_VAR 0 3
16021: PPUSH
16022: LD_INT 1
16024: PPUSH
16025: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
16029: LD_INT 67
16031: PPUSH
16032: LD_VAR 0 3
16036: PPUSH
16037: LD_INT 1
16039: PPUSH
16040: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16044: LD_INT 21
16046: PPUSH
16047: LD_VAR 0 3
16051: PPUSH
16052: LD_INT 1
16054: PPUSH
16055: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16059: LD_INT 22
16061: PPUSH
16062: LD_VAR 0 3
16066: PPUSH
16067: LD_INT 1
16069: PPUSH
16070: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16074: LD_INT 19
16076: PPUSH
16077: LD_VAR 0 3
16081: PPUSH
16082: LD_INT 1
16084: PPUSH
16085: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16089: LD_INT 26
16091: PPUSH
16092: LD_VAR 0 3
16096: PPUSH
16097: LD_INT 1
16099: PPUSH
16100: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16104: LD_INT 54
16106: PPUSH
16107: LD_VAR 0 3
16111: PPUSH
16112: LD_INT 1
16114: PPUSH
16115: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16119: LD_INT 55
16121: PPUSH
16122: LD_VAR 0 3
16126: PPUSH
16127: LD_INT 1
16129: PPUSH
16130: CALL_OW 322
// for i = 0 to 39 do
16134: LD_ADDR_VAR 0 4
16138: PUSH
16139: DOUBLE
16140: LD_INT 0
16142: DEC
16143: ST_TO_ADDR
16144: LD_INT 39
16146: PUSH
16147: FOR_TO
16148: IFFALSE 16169
// SetRestrict ( i , side , true ) ;
16150: LD_VAR 0 4
16154: PPUSH
16155: LD_VAR 0 3
16159: PPUSH
16160: LD_INT 1
16162: PPUSH
16163: CALL_OW 324
16167: GO 16147
16169: POP
16170: POP
// end ; else
16171: GO 16248
16173: POP
// begin for i = 1 to 73 do
16174: LD_ADDR_VAR 0 4
16178: PUSH
16179: DOUBLE
16180: LD_INT 1
16182: DEC
16183: ST_TO_ADDR
16184: LD_INT 73
16186: PUSH
16187: FOR_TO
16188: IFFALSE 16209
// SetTech ( i , side , state_enabled ) ;
16190: LD_VAR 0 4
16194: PPUSH
16195: LD_VAR 0 3
16199: PPUSH
16200: LD_INT 1
16202: PPUSH
16203: CALL_OW 322
16207: GO 16187
16209: POP
16210: POP
// for i = 0 to 39 do
16211: LD_ADDR_VAR 0 4
16215: PUSH
16216: DOUBLE
16217: LD_INT 0
16219: DEC
16220: ST_TO_ADDR
16221: LD_INT 39
16223: PUSH
16224: FOR_TO
16225: IFFALSE 16246
// SetRestrict ( i , side , true ) ;
16227: LD_VAR 0 4
16231: PPUSH
16232: LD_VAR 0 3
16236: PPUSH
16237: LD_INT 1
16239: PPUSH
16240: CALL_OW 324
16244: GO 16224
16246: POP
16247: POP
// end ; end ; end ;
16248: GO 12253
16250: POP
16251: POP
// end ; end_of_file
16252: LD_VAR 0 2
16256: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
16257: LD_INT 0
16259: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
16260: LD_VAR 0 1
16264: PPUSH
16265: LD_VAR 0 2
16269: PPUSH
16270: LD_VAR 0 3
16274: PPUSH
16275: LD_INT 0
16277: PPUSH
16278: CALL 16287 0 4
// end ;
16282: LD_VAR 0 4
16286: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
16287: LD_INT 0
16289: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
16290: LD_STRING initScore({
16292: PUSH
16293: LD_VAR 0 1
16297: PUSH
16298: LD_INT 1
16300: ARRAY
16301: STR
16302: PUSH
16303: LD_STRING ,
16305: STR
16306: PUSH
16307: LD_VAR 0 1
16311: PUSH
16312: LD_INT 2
16314: ARRAY
16315: STR
16316: PUSH
16317: LD_STRING ,
16319: STR
16320: PUSH
16321: LD_VAR 0 1
16325: PUSH
16326: LD_INT 3
16328: ARRAY
16329: STR
16330: PUSH
16331: LD_STRING ,
16333: STR
16334: PUSH
16335: LD_VAR 0 1
16339: PUSH
16340: LD_INT 4
16342: ARRAY
16343: STR
16344: PUSH
16345: LD_STRING ,
16347: STR
16348: PUSH
16349: LD_VAR 0 1
16353: PUSH
16354: LD_INT 5
16356: ARRAY
16357: STR
16358: PUSH
16359: LD_STRING ,
16361: STR
16362: PUSH
16363: LD_VAR 0 1
16367: PUSH
16368: LD_INT 6
16370: ARRAY
16371: STR
16372: PUSH
16373: LD_STRING ,
16375: STR
16376: PUSH
16377: LD_VAR 0 1
16381: PUSH
16382: LD_INT 7
16384: ARRAY
16385: STR
16386: PUSH
16387: LD_STRING ,
16389: STR
16390: PUSH
16391: LD_VAR 0 1
16395: PUSH
16396: LD_INT 8
16398: ARRAY
16399: STR
16400: PUSH
16401: LD_STRING },
16403: STR
16404: PUSH
16405: LD_VAR 0 2
16409: STR
16410: PUSH
16411: LD_STRING ,
16413: STR
16414: PUSH
16415: LD_VAR 0 3
16419: STR
16420: PUSH
16421: LD_STRING ,
16423: STR
16424: PUSH
16425: LD_VAR 0 4
16429: STR
16430: PUSH
16431: LD_STRING );
16433: STR
16434: PPUSH
16435: CALL_OW 559
// end ;
16439: LD_VAR 0 5
16443: RET
// export function LScore_Reset ( ) ; begin
16444: LD_INT 0
16446: PPUSH
// ToLua ( ResetScorebar(); ) ;
16447: LD_STRING ResetScorebar();
16449: PPUSH
16450: CALL_OW 559
// end ;
16454: LD_VAR 0 1
16458: RET
// export function LScore_Delete ( ID ) ; begin
16459: LD_INT 0
16461: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
16462: LD_STRING deleteScore(
16464: PUSH
16465: LD_VAR 0 1
16469: STR
16470: PUSH
16471: LD_STRING );
16473: STR
16474: PPUSH
16475: CALL_OW 559
// end ;
16479: LD_VAR 0 2
16483: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
16484: LD_INT 0
16486: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
16487: LD_STRING AST(
16489: PUSH
16490: LD_VAR 0 1
16494: STR
16495: PUSH
16496: LD_STRING ,
16498: STR
16499: PUSH
16500: LD_VAR 0 2
16504: STR
16505: PUSH
16506: LD_STRING ,
16508: STR
16509: PUSH
16510: LD_VAR 0 3
16514: STR
16515: PUSH
16516: LD_STRING ,);
16518: STR
16519: PPUSH
16520: CALL_OW 559
// end ;
16524: LD_VAR 0 4
16528: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
16529: LD_INT 0
16531: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
16532: LD_STRING AST(
16534: PUSH
16535: LD_VAR 0 1
16539: STR
16540: PUSH
16541: LD_STRING ,
16543: STR
16544: PUSH
16545: LD_VAR 0 2
16549: STR
16550: PUSH
16551: LD_STRING ,
16553: STR
16554: PUSH
16555: LD_VAR 0 3
16559: STR
16560: PUSH
16561: LD_STRING ,
16563: STR
16564: PUSH
16565: LD_VAR 0 4
16569: STR
16570: PUSH
16571: LD_STRING );
16573: STR
16574: PPUSH
16575: CALL_OW 559
// end ;
16579: LD_VAR 0 5
16583: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
16584: LD_INT 0
16586: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
16587: LD_STRING AST(
16589: PUSH
16590: LD_VAR 0 1
16594: STR
16595: PUSH
16596: LD_STRING ,
16598: STR
16599: PUSH
16600: LD_VAR 0 2
16604: STR
16605: PUSH
16606: LD_STRING ,
16608: STR
16609: PUSH
16610: LD_VAR 0 3
16614: STR
16615: PUSH
16616: LD_STRING ,
16618: STR
16619: PUSH
16620: LD_VAR 0 4
16624: STR
16625: PUSH
16626: LD_STRING ,
16628: STR
16629: PUSH
16630: LD_VAR 0 5
16634: STR
16635: PUSH
16636: LD_STRING );
16638: STR
16639: PPUSH
16640: CALL_OW 559
// end ;
16644: LD_VAR 0 6
16648: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
16649: LD_INT 0
16651: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
16652: LD_STRING ASRT(
16654: PUSH
16655: LD_VAR 0 1
16659: STR
16660: PUSH
16661: LD_STRING ,
16663: STR
16664: PUSH
16665: LD_VAR 0 2
16669: STR
16670: PUSH
16671: LD_STRING ,
16673: STR
16674: PUSH
16675: LD_VAR 0 3
16679: STR
16680: PUSH
16681: LD_STRING ,);
16683: STR
16684: PPUSH
16685: CALL_OW 559
// end ;
16689: LD_VAR 0 4
16693: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
16694: LD_INT 0
16696: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
16697: LD_STRING ASRT(
16699: PUSH
16700: LD_VAR 0 1
16704: STR
16705: PUSH
16706: LD_STRING ,
16708: STR
16709: PUSH
16710: LD_VAR 0 2
16714: STR
16715: PUSH
16716: LD_STRING ,
16718: STR
16719: PUSH
16720: LD_VAR 0 3
16724: STR
16725: PUSH
16726: LD_STRING ,
16728: STR
16729: PUSH
16730: LD_VAR 0 4
16734: STR
16735: PUSH
16736: LD_STRING );
16738: STR
16739: PPUSH
16740: CALL_OW 559
// end ;
16744: LD_VAR 0 5
16748: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
16749: LD_INT 0
16751: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
16752: LD_STRING ASRT(
16754: PUSH
16755: LD_VAR 0 1
16759: STR
16760: PUSH
16761: LD_STRING ,
16763: STR
16764: PUSH
16765: LD_VAR 0 2
16769: STR
16770: PUSH
16771: LD_STRING ,
16773: STR
16774: PUSH
16775: LD_VAR 0 3
16779: STR
16780: PUSH
16781: LD_STRING ,
16783: STR
16784: PUSH
16785: LD_VAR 0 4
16789: STR
16790: PUSH
16791: LD_STRING ,
16793: STR
16794: PUSH
16795: LD_VAR 0 5
16799: STR
16800: PUSH
16801: LD_STRING );
16803: STR
16804: PPUSH
16805: CALL_OW 559
// end ;
16809: LD_VAR 0 6
16813: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
16814: LD_INT 0
16816: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
16817: LD_STRING UST(
16819: PUSH
16820: LD_VAR 0 1
16824: STR
16825: PUSH
16826: LD_STRING ,
16828: STR
16829: PUSH
16830: LD_VAR 0 2
16834: STR
16835: PUSH
16836: LD_STRING );
16838: STR
16839: PPUSH
16840: CALL_OW 559
// end ;
16844: LD_VAR 0 3
16848: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
16849: LD_INT 0
16851: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
16852: LD_STRING UST(
16854: PUSH
16855: LD_VAR 0 1
16859: STR
16860: PUSH
16861: LD_STRING ,
16863: STR
16864: PUSH
16865: LD_VAR 0 2
16869: STR
16870: PUSH
16871: LD_STRING ,
16873: STR
16874: PUSH
16875: LD_VAR 0 3
16879: STR
16880: PUSH
16881: LD_STRING );
16883: STR
16884: PPUSH
16885: CALL_OW 559
// end ;
16889: LD_VAR 0 4
16893: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
16894: LD_INT 0
16896: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
16897: LD_STRING CCST(
16899: PUSH
16900: LD_VAR 0 1
16904: STR
16905: PUSH
16906: LD_STRING ,{
16908: STR
16909: PUSH
16910: LD_VAR 0 2
16914: STR
16915: PUSH
16916: LD_STRING ,
16918: STR
16919: PUSH
16920: LD_VAR 0 3
16924: STR
16925: PUSH
16926: LD_STRING ,
16928: STR
16929: PUSH
16930: LD_VAR 0 4
16934: STR
16935: PUSH
16936: LD_STRING });
16938: STR
16939: PPUSH
16940: CALL_OW 559
// end ;
16944: LD_VAR 0 5
16948: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
16949: LD_INT 0
16951: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
16952: LD_STRING CCST(
16954: PUSH
16955: LD_VAR 0 1
16959: STR
16960: PUSH
16961: LD_STRING ,
16963: STR
16964: PUSH
16965: LD_VAR 0 2
16969: STR
16970: PUSH
16971: LD_STRING );
16973: STR
16974: PPUSH
16975: CALL_OW 559
// end ;
16979: LD_VAR 0 3
16983: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
16984: LD_INT 0
16986: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
16987: LD_STRING ASSP(
16989: PUSH
16990: LD_VAR 0 1
16994: STR
16995: PUSH
16996: LD_STRING ,
16998: STR
16999: PUSH
17000: LD_VAR 0 2
17004: STR
17005: PUSH
17006: LD_STRING ,
17008: STR
17009: PUSH
17010: LD_VAR 0 3
17014: STR
17015: PUSH
17016: LD_STRING ,);
17018: STR
17019: PPUSH
17020: CALL_OW 559
// end ;
17024: LD_VAR 0 4
17028: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
17029: LD_INT 0
17031: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
17032: LD_STRING ASSP(
17034: PUSH
17035: LD_VAR 0 1
17039: STR
17040: PUSH
17041: LD_STRING ,
17043: STR
17044: PUSH
17045: LD_VAR 0 2
17049: STR
17050: PUSH
17051: LD_STRING ,
17053: STR
17054: PUSH
17055: LD_VAR 0 3
17059: STR
17060: PUSH
17061: LD_STRING ,
17063: STR
17064: PUSH
17065: LD_VAR 0 4
17069: STR
17070: PUSH
17071: LD_STRING );
17073: STR
17074: PPUSH
17075: CALL_OW 559
// end ;
17079: LD_VAR 0 5
17083: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
17084: LD_INT 0
17086: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
17087: LD_STRING ASSP(
17089: PUSH
17090: LD_VAR 0 1
17094: STR
17095: PUSH
17096: LD_STRING ,
17098: STR
17099: PUSH
17100: LD_VAR 0 2
17104: STR
17105: PUSH
17106: LD_STRING ,
17108: STR
17109: PUSH
17110: LD_VAR 0 3
17114: STR
17115: PUSH
17116: LD_STRING ,
17118: STR
17119: PUSH
17120: LD_VAR 0 4
17124: STR
17125: PUSH
17126: LD_STRING ,
17128: STR
17129: PUSH
17130: LD_VAR 0 5
17134: STR
17135: PUSH
17136: LD_STRING );
17138: STR
17139: PPUSH
17140: CALL_OW 559
// end ;
17144: LD_VAR 0 6
17148: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
17149: LD_INT 0
17151: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
17152: LD_STRING ASRSP(
17154: PUSH
17155: LD_VAR 0 1
17159: STR
17160: PUSH
17161: LD_STRING ,
17163: STR
17164: PUSH
17165: LD_VAR 0 2
17169: STR
17170: PUSH
17171: LD_STRING ,
17173: STR
17174: PUSH
17175: LD_VAR 0 3
17179: STR
17180: PUSH
17181: LD_STRING ,);
17183: STR
17184: PPUSH
17185: CALL_OW 559
// end ;
17189: LD_VAR 0 4
17193: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
17194: LD_INT 0
17196: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
17197: LD_STRING ASRSP(
17199: PUSH
17200: LD_VAR 0 1
17204: STR
17205: PUSH
17206: LD_STRING ,
17208: STR
17209: PUSH
17210: LD_VAR 0 2
17214: STR
17215: PUSH
17216: LD_STRING ,
17218: STR
17219: PUSH
17220: LD_VAR 0 3
17224: STR
17225: PUSH
17226: LD_STRING ,
17228: STR
17229: PUSH
17230: LD_VAR 0 4
17234: STR
17235: PUSH
17236: LD_STRING );
17238: STR
17239: PPUSH
17240: CALL_OW 559
// end ;
17244: LD_VAR 0 5
17248: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
17249: LD_INT 0
17251: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
17252: LD_STRING ASRSP(
17254: PUSH
17255: LD_VAR 0 1
17259: STR
17260: PUSH
17261: LD_STRING ,
17263: STR
17264: PUSH
17265: LD_VAR 0 2
17269: STR
17270: PUSH
17271: LD_STRING ,
17273: STR
17274: PUSH
17275: LD_VAR 0 3
17279: STR
17280: PUSH
17281: LD_STRING ,
17283: STR
17284: PUSH
17285: LD_VAR 0 4
17289: STR
17290: PUSH
17291: LD_STRING ,
17293: STR
17294: PUSH
17295: LD_VAR 0 5
17299: STR
17300: PUSH
17301: LD_STRING );
17303: STR
17304: PPUSH
17305: CALL_OW 559
// end ;
17309: LD_VAR 0 6
17313: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
17314: LD_INT 0
17316: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
17317: LD_STRING USSP(
17319: PUSH
17320: LD_VAR 0 1
17324: STR
17325: PUSH
17326: LD_STRING ,
17328: STR
17329: PUSH
17330: LD_VAR 0 2
17334: STR
17335: PUSH
17336: LD_STRING );
17338: STR
17339: PPUSH
17340: CALL_OW 559
// end ;
17344: LD_VAR 0 3
17348: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
17349: LD_INT 0
17351: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
17352: LD_STRING USSP(
17354: PUSH
17355: LD_VAR 0 1
17359: STR
17360: PUSH
17361: LD_STRING ,
17363: STR
17364: PUSH
17365: LD_VAR 0 2
17369: STR
17370: PUSH
17371: LD_STRING ,
17373: STR
17374: PUSH
17375: LD_VAR 0 3
17379: STR
17380: PUSH
17381: LD_STRING );
17383: STR
17384: PPUSH
17385: CALL_OW 559
// end ;
17389: LD_VAR 0 4
17393: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
17394: LD_INT 0
17396: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
17397: LD_STRING CCSSP(
17399: PUSH
17400: LD_VAR 0 1
17404: STR
17405: PUSH
17406: LD_STRING ,{
17408: STR
17409: PUSH
17410: LD_VAR 0 2
17414: STR
17415: PUSH
17416: LD_STRING ,
17418: STR
17419: PUSH
17420: LD_VAR 0 3
17424: STR
17425: PUSH
17426: LD_STRING ,
17428: STR
17429: PUSH
17430: LD_VAR 0 4
17434: STR
17435: PUSH
17436: LD_STRING });
17438: STR
17439: PPUSH
17440: CALL_OW 559
// end ;
17444: LD_VAR 0 5
17448: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
17449: LD_INT 0
17451: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
17452: LD_STRING CCSSP(
17454: PUSH
17455: LD_VAR 0 1
17459: STR
17460: PUSH
17461: LD_STRING ,
17463: STR
17464: PUSH
17465: LD_VAR 0 2
17469: STR
17470: PUSH
17471: LD_STRING );
17473: STR
17474: PPUSH
17475: CALL_OW 559
// end ;
17479: LD_VAR 0 3
17483: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
17484: LD_INT 0
17486: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
17487: LD_STRING ASP(
17489: PUSH
17490: LD_VAR 0 1
17494: STR
17495: PUSH
17496: LD_STRING ,
17498: STR
17499: PUSH
17500: LD_VAR 0 2
17504: STR
17505: PUSH
17506: LD_STRING ,
17508: STR
17509: PUSH
17510: LD_VAR 0 3
17514: STR
17515: PUSH
17516: LD_STRING );
17518: STR
17519: PPUSH
17520: CALL_OW 559
// end ;
17524: LD_VAR 0 4
17528: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
17529: LD_INT 0
17531: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
17532: LD_STRING USP(
17534: PUSH
17535: LD_VAR 0 1
17539: STR
17540: PUSH
17541: LD_STRING ,
17543: STR
17544: PUSH
17545: LD_VAR 0 2
17549: STR
17550: PUSH
17551: LD_STRING ,
17553: STR
17554: PUSH
17555: LD_VAR 0 3
17559: STR
17560: PUSH
17561: LD_STRING );
17563: STR
17564: PPUSH
17565: CALL_OW 559
// end ;
17569: LD_VAR 0 4
17573: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
17574: LD_INT 0
17576: PPUSH
17577: PPUSH
// for i = 1 to 8 do
17578: LD_ADDR_VAR 0 4
17582: PUSH
17583: DOUBLE
17584: LD_INT 1
17586: DEC
17587: ST_TO_ADDR
17588: LD_INT 8
17590: PUSH
17591: FOR_TO
17592: IFFALSE 17639
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
17594: LD_STRING USP(
17596: PUSH
17597: LD_VAR 0 1
17601: STR
17602: PUSH
17603: LD_STRING ,
17605: STR
17606: PUSH
17607: LD_VAR 0 4
17611: STR
17612: PUSH
17613: LD_STRING ,
17615: STR
17616: PUSH
17617: LD_VAR 0 2
17621: PUSH
17622: LD_VAR 0 4
17626: ARRAY
17627: STR
17628: PUSH
17629: LD_STRING );
17631: STR
17632: PPUSH
17633: CALL_OW 559
17637: GO 17591
17639: POP
17640: POP
// end ;
17641: LD_VAR 0 3
17645: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
17646: LD_INT 0
17648: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
17649: LD_STRING ASC(
17651: PUSH
17652: LD_VAR 0 1
17656: STR
17657: PUSH
17658: LD_STRING ,
17660: STR
17661: PUSH
17662: LD_VAR 0 2
17666: STR
17667: PUSH
17668: LD_STRING ,
17670: STR
17671: PUSH
17672: LD_VAR 0 3
17676: STR
17677: PUSH
17678: LD_STRING ,
17680: STR
17681: PUSH
17682: LD_VAR 0 4
17686: STR
17687: PUSH
17688: LD_STRING );
17690: STR
17691: PPUSH
17692: CALL_OW 559
// end ;
17696: LD_VAR 0 5
17700: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
17701: LD_INT 0
17703: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
17704: LD_STRING USC(
17706: PUSH
17707: LD_VAR 0 1
17711: STR
17712: PUSH
17713: LD_STRING ,{
17715: STR
17716: PUSH
17717: LD_VAR 0 2
17721: PUSH
17722: LD_INT 1
17724: ARRAY
17725: STR
17726: PUSH
17727: LD_STRING ,
17729: STR
17730: PUSH
17731: LD_VAR 0 2
17735: PUSH
17736: LD_INT 2
17738: ARRAY
17739: STR
17740: PUSH
17741: LD_STRING ,
17743: STR
17744: PUSH
17745: LD_VAR 0 2
17749: PUSH
17750: LD_INT 3
17752: ARRAY
17753: STR
17754: PUSH
17755: LD_STRING ,
17757: STR
17758: PUSH
17759: LD_VAR 0 2
17763: PUSH
17764: LD_INT 4
17766: ARRAY
17767: STR
17768: PUSH
17769: LD_STRING ,
17771: STR
17772: PUSH
17773: LD_VAR 0 2
17777: PUSH
17778: LD_INT 5
17780: ARRAY
17781: STR
17782: PUSH
17783: LD_STRING ,
17785: STR
17786: PUSH
17787: LD_VAR 0 2
17791: PUSH
17792: LD_INT 6
17794: ARRAY
17795: STR
17796: PUSH
17797: LD_STRING ,
17799: STR
17800: PUSH
17801: LD_VAR 0 2
17805: PUSH
17806: LD_INT 7
17808: ARRAY
17809: STR
17810: PUSH
17811: LD_STRING ,
17813: STR
17814: PUSH
17815: LD_VAR 0 2
17819: PUSH
17820: LD_INT 8
17822: ARRAY
17823: STR
17824: PUSH
17825: LD_STRING });
17827: STR
17828: PPUSH
17829: CALL_OW 559
// end ; end_of_file
17833: LD_VAR 0 3
17837: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
17838: LD_INT 0
17840: PPUSH
17841: PPUSH
17842: PPUSH
17843: PPUSH
17844: PPUSH
17845: PPUSH
17846: PPUSH
17847: PPUSH
17848: PPUSH
// for i := 1 to 8 do
17849: LD_ADDR_VAR 0 2
17853: PUSH
17854: DOUBLE
17855: LD_INT 1
17857: DEC
17858: ST_TO_ADDR
17859: LD_INT 8
17861: PUSH
17862: FOR_TO
17863: IFFALSE 18247
// begin if Side_Positions [ i ] then
17865: LD_EXP 37
17869: PUSH
17870: LD_VAR 0 2
17874: ARRAY
17875: IFFALSE 18245
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
17877: LD_ADDR_VAR 0 7
17881: PUSH
17882: LD_INT 22
17884: PUSH
17885: LD_VAR 0 2
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 21
17896: PUSH
17897: LD_INT 1
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PPUSH
17908: CALL_OW 69
17912: PUSH
17913: LD_INT 0
17915: PLUS
17916: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17917: LD_ADDR_VAR 0 9
17921: PUSH
17922: LD_INT 22
17924: PUSH
17925: LD_VAR 0 2
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 2
17936: PUSH
17937: LD_INT 30
17939: PUSH
17940: LD_INT 0
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 30
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: LIST
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PPUSH
17966: CALL_OW 69
17970: ST_TO_ADDR
// crates := 0 ;
17971: LD_ADDR_VAR 0 4
17975: PUSH
17976: LD_INT 0
17978: ST_TO_ADDR
// oil := 0 ;
17979: LD_ADDR_VAR 0 5
17983: PUSH
17984: LD_INT 0
17986: ST_TO_ADDR
// sib := 0 ;
17987: LD_ADDR_VAR 0 6
17991: PUSH
17992: LD_INT 0
17994: ST_TO_ADDR
// if bases then
17995: LD_VAR 0 9
17999: IFFALSE 18105
// begin for j in bases do
18001: LD_ADDR_VAR 0 3
18005: PUSH
18006: LD_VAR 0 9
18010: PUSH
18011: FOR_IN
18012: IFFALSE 18103
// begin base := GetBase ( j ) ;
18014: LD_ADDR_VAR 0 8
18018: PUSH
18019: LD_VAR 0 3
18023: PPUSH
18024: CALL_OW 274
18028: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
18029: LD_ADDR_VAR 0 4
18033: PUSH
18034: LD_VAR 0 4
18038: PUSH
18039: LD_VAR 0 8
18043: PPUSH
18044: LD_INT 1
18046: PPUSH
18047: CALL_OW 275
18051: PLUS
18052: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
18053: LD_ADDR_VAR 0 5
18057: PUSH
18058: LD_VAR 0 5
18062: PUSH
18063: LD_VAR 0 8
18067: PPUSH
18068: LD_INT 2
18070: PPUSH
18071: CALL_OW 275
18075: PLUS
18076: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
18077: LD_ADDR_VAR 0 6
18081: PUSH
18082: LD_VAR 0 6
18086: PUSH
18087: LD_VAR 0 8
18091: PPUSH
18092: LD_INT 3
18094: PPUSH
18095: CALL_OW 275
18099: PLUS
18100: ST_TO_ADDR
// end ;
18101: GO 18011
18103: POP
18104: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
18105: LD_STRING setSpecText(
18107: PUSH
18108: LD_VAR 0 2
18112: STR
18113: PUSH
18114: LD_STRING ,
18116: STR
18117: PUSH
18118: LD_INT 2
18120: STR
18121: PUSH
18122: LD_STRING ,
18124: STR
18125: PUSH
18126: LD_VAR 0 4
18130: STR
18131: PUSH
18132: LD_STRING )
18134: STR
18135: PPUSH
18136: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
18140: LD_STRING setSpecText(
18142: PUSH
18143: LD_VAR 0 2
18147: STR
18148: PUSH
18149: LD_STRING ,
18151: STR
18152: PUSH
18153: LD_INT 3
18155: STR
18156: PUSH
18157: LD_STRING ,
18159: STR
18160: PUSH
18161: LD_VAR 0 5
18165: STR
18166: PUSH
18167: LD_STRING )
18169: STR
18170: PPUSH
18171: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
18175: LD_STRING setSpecText(
18177: PUSH
18178: LD_VAR 0 2
18182: STR
18183: PUSH
18184: LD_STRING ,
18186: STR
18187: PUSH
18188: LD_INT 4
18190: STR
18191: PUSH
18192: LD_STRING ,
18194: STR
18195: PUSH
18196: LD_VAR 0 6
18200: STR
18201: PUSH
18202: LD_STRING )
18204: STR
18205: PPUSH
18206: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
18210: LD_STRING setSpecText(
18212: PUSH
18213: LD_VAR 0 2
18217: STR
18218: PUSH
18219: LD_STRING ,
18221: STR
18222: PUSH
18223: LD_INT 5
18225: STR
18226: PUSH
18227: LD_STRING ,
18229: STR
18230: PUSH
18231: LD_VAR 0 7
18235: STR
18236: PUSH
18237: LD_STRING )
18239: STR
18240: PPUSH
18241: CALL_OW 559
// end ; end ;
18245: GO 17862
18247: POP
18248: POP
// end ;
18249: LD_VAR 0 1
18253: RET
// every 0 0$1 do
18254: GO 18256
18256: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
18257: LD_STRING setSpecLogoNumber(
18259: PUSH
18260: LD_INT 2
18262: STR
18263: PUSH
18264: LD_STRING ,
18266: STR
18267: PUSH
18268: LD_INT 1
18270: STR
18271: PUSH
18272: LD_STRING )
18274: STR
18275: PPUSH
18276: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
18280: LD_STRING setSpecLogoNumber(
18282: PUSH
18283: LD_INT 3
18285: STR
18286: PUSH
18287: LD_STRING ,
18289: STR
18290: PUSH
18291: LD_INT 2
18293: STR
18294: PUSH
18295: LD_STRING )
18297: STR
18298: PPUSH
18299: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
18303: LD_STRING setSpecLogoNumber(
18305: PUSH
18306: LD_INT 4
18308: STR
18309: PUSH
18310: LD_STRING ,
18312: STR
18313: PUSH
18314: LD_INT 3
18316: STR
18317: PUSH
18318: LD_STRING )
18320: STR
18321: PPUSH
18322: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
18326: LD_STRING setSpecLogoNumber(
18328: PUSH
18329: LD_INT 5
18331: STR
18332: PUSH
18333: LD_STRING ,
18335: STR
18336: PUSH
18337: LD_INT 4
18339: STR
18340: PUSH
18341: LD_STRING )
18343: STR
18344: PPUSH
18345: CALL_OW 559
// end ;
18349: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
18350: LD_INT 2
18352: PUSH
18353: LD_INT 30
18355: PUSH
18356: LD_INT 0
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 30
18365: PUSH
18366: LD_INT 1
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: LIST
18377: PPUSH
18378: CALL_OW 69
18382: IFFALSE 18392
18384: GO 18386
18386: DISABLE
// begin enable ;
18387: ENABLE
// UpdateSpectatorBar ;
18388: CALL 17838 0 0
// end ; end_of_file
18392: END
// var respawn , inqueue ; export function init_respawning ; begin
18393: LD_INT 0
18395: PPUSH
// respawn := Rand ( 1 , 8 ) ;
18396: LD_ADDR_LOC 23
18400: PUSH
18401: LD_INT 1
18403: PPUSH
18404: LD_INT 8
18406: PPUSH
18407: CALL_OW 12
18411: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18412: LD_ADDR_LOC 24
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: LD_INT 0
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: LD_INT 0
18428: PUSH
18429: LD_INT 0
18431: PUSH
18432: LD_INT 0
18434: PUSH
18435: LD_INT 0
18437: PUSH
18438: LD_INT 0
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: ST_TO_ADDR
// end ;
18451: LD_VAR 0 1
18455: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
18456: GO 18458
18458: DISABLE
18459: LD_INT 0
18461: PPUSH
18462: PPUSH
18463: PPUSH
// begin if respawning_time_max = 0 then
18464: LD_EXP 30
18468: PUSH
18469: LD_INT 0
18471: EQUAL
18472: IFFALSE 18476
// exit ;
18474: GO 18884
// if respawn = 8 then
18476: LD_LOC 23
18480: PUSH
18481: LD_INT 8
18483: EQUAL
18484: IFFALSE 18496
// respawn := 1 else
18486: LD_ADDR_LOC 23
18490: PUSH
18491: LD_INT 1
18493: ST_TO_ADDR
18494: GO 18510
// respawn := respawn + 1 ;
18496: LD_ADDR_LOC 23
18500: PUSH
18501: LD_LOC 23
18505: PUSH
18506: LD_INT 1
18508: PLUS
18509: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
18510: LD_EXP 37
18514: PUSH
18515: LD_LOC 23
18519: ARRAY
18520: PUSH
18521: LD_LOC 24
18525: PUSH
18526: LD_LOC 23
18530: ARRAY
18531: NOT
18532: AND
18533: IFFALSE 18883
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
18535: LD_ADDR_VAR 0 1
18539: PUSH
18540: LD_INT 21
18542: PUSH
18543: LD_INT 1
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 22
18552: PUSH
18553: LD_LOC 23
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 3
18564: PUSH
18565: LD_INT 23
18567: PUSH
18568: LD_INT 0
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: PPUSH
18581: CALL_OW 69
18585: ST_TO_ADDR
// if n < number_of_people then
18586: LD_VAR 0 1
18590: PUSH
18591: LD_EXP 21
18595: LESS
18596: IFFALSE 18880
// begin aktresp := respawn ;
18598: LD_ADDR_VAR 0 3
18602: PUSH
18603: LD_LOC 23
18607: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
18608: LD_ADDR_LOC 24
18612: PUSH
18613: LD_LOC 24
18617: PPUSH
18618: LD_VAR 0 3
18622: PPUSH
18623: LD_INT 1
18625: PPUSH
18626: CALL_OW 1
18630: ST_TO_ADDR
// enable ;
18631: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
18632: LD_EXP 29
18636: PPUSH
18637: LD_EXP 30
18641: PPUSH
18642: CALL_OW 12
18646: PPUSH
18647: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
18651: LD_ADDR_LOC 24
18655: PUSH
18656: LD_LOC 24
18660: PPUSH
18661: LD_VAR 0 3
18665: PPUSH
18666: LD_INT 0
18668: PPUSH
18669: CALL_OW 1
18673: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
18674: LD_ADDR_VAR 0 2
18678: PUSH
18679: LD_INT 21
18681: PUSH
18682: LD_INT 3
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 2
18691: PUSH
18692: LD_INT 30
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 30
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 50
18719: PUSH
18720: EMPTY
18721: LIST
18722: PUSH
18723: LD_INT 22
18725: PUSH
18726: LD_VAR 0 3
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: PPUSH
18741: CALL_OW 69
18745: ST_TO_ADDR
// if dep = 0 then
18746: LD_VAR 0 2
18750: PUSH
18751: LD_INT 0
18753: EQUAL
18754: IFFALSE 18758
// exit ;
18756: GO 18884
// hc_name :=  ;
18758: LD_ADDR_OWVAR 26
18762: PUSH
18763: LD_STRING 
18765: ST_TO_ADDR
// hc_importance := 0 ;
18766: LD_ADDR_OWVAR 32
18770: PUSH
18771: LD_INT 0
18773: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
18774: LD_INT 0
18776: PPUSH
18777: LD_INT 0
18779: PPUSH
18780: LD_EXP 23
18784: PUSH
18785: LD_INT 2
18787: DIV
18788: PPUSH
18789: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
18793: LD_ADDR_OWVAR 21
18797: PUSH
18798: LD_EXP 38
18802: PUSH
18803: LD_VAR 0 3
18807: ARRAY
18808: ST_TO_ADDR
// uc_side := aktresp ;
18809: LD_ADDR_OWVAR 20
18813: PUSH
18814: LD_VAR 0 3
18818: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
18819: LD_ADDR_VAR 0 2
18823: PUSH
18824: LD_VAR 0 2
18828: PUSH
18829: LD_INT 1
18831: PPUSH
18832: LD_VAR 0 2
18836: PPUSH
18837: CALL_OW 12
18841: ARRAY
18842: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
18843: CALL_OW 44
18847: PPUSH
18848: LD_VAR 0 2
18852: PPUSH
18853: CALL_OW 250
18857: PPUSH
18858: LD_VAR 0 2
18862: PPUSH
18863: CALL_OW 251
18867: PPUSH
18868: LD_INT 7
18870: PPUSH
18871: LD_INT 1
18873: PPUSH
18874: CALL_OW 50
// end else
18878: GO 18881
// enable ;
18880: ENABLE
// end else
18881: GO 18884
// enable ;
18883: ENABLE
// end ; end_of_file
18884: PPOPN 3
18886: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
18887: LD_INT 0
18889: PPUSH
18890: PPUSH
18891: PPUSH
// BuildUpTime_Delay = 0 ;
18892: LD_ADDR_EXP 63
18896: PUSH
18897: LD_INT 0
18899: ST_TO_ADDR
// if not def_builduptime then
18900: LD_EXP 16
18904: NOT
18905: IFFALSE 18909
// exit ;
18907: GO 19092
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
18909: LD_ADDR_EXP 63
18913: PUSH
18914: LD_INT 8400
18916: PUSH
18917: LD_INT 2100
18919: PUSH
18920: LD_EXP 16
18924: MUL
18925: PLUS
18926: ST_TO_ADDR
// BuildUpTimeActive := true ;
18927: LD_ADDR_EXP 62
18931: PUSH
18932: LD_INT 1
18934: ST_TO_ADDR
// for i := 1 to 8 do
18935: LD_ADDR_VAR 0 2
18939: PUSH
18940: DOUBLE
18941: LD_INT 1
18943: DEC
18944: ST_TO_ADDR
18945: LD_INT 8
18947: PUSH
18948: FOR_TO
18949: IFFALSE 19090
// if Side_Positions [ i ] then
18951: LD_EXP 37
18955: PUSH
18956: LD_VAR 0 2
18960: ARRAY
18961: IFFALSE 19088
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
18963: LD_EXP 61
18967: PUSH
18968: LD_EXP 37
18972: PUSH
18973: LD_VAR 0 2
18977: ARRAY
18978: ARRAY
18979: PPUSH
18980: LD_INT 5
18982: PPUSH
18983: CALL_OW 424
// for j := 1 to 8 do
18987: LD_ADDR_VAR 0 3
18991: PUSH
18992: DOUBLE
18993: LD_INT 1
18995: DEC
18996: ST_TO_ADDR
18997: LD_INT 8
18999: PUSH
19000: FOR_TO
19001: IFFALSE 19086
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19003: LD_EXP 37
19007: PUSH
19008: LD_VAR 0 3
19012: ARRAY
19013: PUSH
19014: LD_EXP 34
19018: PUSH
19019: LD_VAR 0 2
19023: ARRAY
19024: PUSH
19025: LD_EXP 34
19029: PUSH
19030: LD_VAR 0 3
19034: ARRAY
19035: NONEQUAL
19036: PUSH
19037: LD_EXP 39
19041: NOT
19042: PUSH
19043: LD_VAR 0 2
19047: PUSH
19048: LD_VAR 0 3
19052: NONEQUAL
19053: AND
19054: OR
19055: AND
19056: IFFALSE 19084
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19058: LD_VAR 0 3
19062: PPUSH
19063: LD_EXP 61
19067: PUSH
19068: LD_EXP 37
19072: PUSH
19073: LD_VAR 0 2
19077: ARRAY
19078: ARRAY
19079: PPUSH
19080: CALL_OW 333
19084: GO 19000
19086: POP
19087: POP
// end ;
19088: GO 18948
19090: POP
19091: POP
// end ;
19092: LD_VAR 0 1
19096: RET
// export function EndBuildUp ; var i , j ; begin
19097: LD_INT 0
19099: PPUSH
19100: PPUSH
19101: PPUSH
// BuildUpTimeActive := false ;
19102: LD_ADDR_EXP 62
19106: PUSH
19107: LD_INT 0
19109: ST_TO_ADDR
// for i := 1 to 8 do
19110: LD_ADDR_VAR 0 2
19114: PUSH
19115: DOUBLE
19116: LD_INT 1
19118: DEC
19119: ST_TO_ADDR
19120: LD_INT 8
19122: PUSH
19123: FOR_TO
19124: IFFALSE 19265
// if Side_Positions [ i ] then
19126: LD_EXP 37
19130: PUSH
19131: LD_VAR 0 2
19135: ARRAY
19136: IFFALSE 19263
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
19138: LD_EXP 61
19142: PUSH
19143: LD_EXP 37
19147: PUSH
19148: LD_VAR 0 2
19152: ARRAY
19153: ARRAY
19154: PPUSH
19155: LD_INT 0
19157: PPUSH
19158: CALL_OW 424
// for j := 1 to 8 do
19162: LD_ADDR_VAR 0 3
19166: PUSH
19167: DOUBLE
19168: LD_INT 1
19170: DEC
19171: ST_TO_ADDR
19172: LD_INT 8
19174: PUSH
19175: FOR_TO
19176: IFFALSE 19261
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
19178: LD_EXP 37
19182: PUSH
19183: LD_VAR 0 3
19187: ARRAY
19188: PUSH
19189: LD_EXP 34
19193: PUSH
19194: LD_VAR 0 2
19198: ARRAY
19199: PUSH
19200: LD_EXP 34
19204: PUSH
19205: LD_VAR 0 3
19209: ARRAY
19210: NONEQUAL
19211: PUSH
19212: LD_EXP 39
19216: NOT
19217: PUSH
19218: LD_VAR 0 2
19222: PUSH
19223: LD_VAR 0 3
19227: NONEQUAL
19228: AND
19229: OR
19230: AND
19231: IFFALSE 19259
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19233: LD_VAR 0 3
19237: PPUSH
19238: LD_EXP 61
19242: PUSH
19243: LD_EXP 37
19247: PUSH
19248: LD_VAR 0 2
19252: ARRAY
19253: ARRAY
19254: PPUSH
19255: CALL_OW 334
19259: GO 19175
19261: POP
19262: POP
// end ;
19263: GO 19123
19265: POP
19266: POP
// end ;
19267: LD_VAR 0 1
19271: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
19272: LD_EXP 62
19276: IFFALSE 19451
19278: GO 19280
19280: DISABLE
19281: LD_INT 0
19283: PPUSH
19284: PPUSH
// begin for i := 1 to 8 do
19285: LD_ADDR_VAR 0 1
19289: PUSH
19290: DOUBLE
19291: LD_INT 1
19293: DEC
19294: ST_TO_ADDR
19295: LD_INT 8
19297: PUSH
19298: FOR_TO
19299: IFFALSE 19448
// if Side_Positions [ i ] then
19301: LD_EXP 37
19305: PUSH
19306: LD_VAR 0 1
19310: ARRAY
19311: IFFALSE 19446
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
19313: LD_ADDR_VAR 0 2
19317: PUSH
19318: LD_EXP 61
19322: PUSH
19323: LD_EXP 37
19327: PUSH
19328: LD_VAR 0 1
19332: ARRAY
19333: ARRAY
19334: PPUSH
19335: LD_INT 2
19337: PUSH
19338: LD_INT 21
19340: PUSH
19341: LD_INT 1
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 21
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 22
19365: PUSH
19366: LD_OWVAR 2
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PPUSH
19379: CALL_OW 70
19383: PUSH
19384: FOR_IN
19385: IFFALSE 19444
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
19387: LD_EXP 34
19391: PUSH
19392: LD_VAR 0 1
19396: ARRAY
19397: PUSH
19398: LD_EXP 34
19402: PUSH
19403: LD_OWVAR 2
19407: ARRAY
19408: NONEQUAL
19409: PUSH
19410: LD_EXP 39
19414: NOT
19415: PUSH
19416: LD_VAR 0 1
19420: PUSH
19421: LD_OWVAR 2
19425: NONEQUAL
19426: AND
19427: OR
19428: IFFALSE 19442
// ComMoveToArea ( un , BuildUpEscape ) ;
19430: LD_VAR 0 2
19434: PPUSH
19435: LD_INT 24
19437: PPUSH
19438: CALL_OW 113
19442: GO 19384
19444: POP
19445: POP
19446: GO 19298
19448: POP
19449: POP
// enable ;
19450: ENABLE
// end ;
19451: PPOPN 2
19453: END
// every 0 0$1 trigger def_builduptime do
19454: LD_EXP 16
19458: IFFALSE 19484
19460: GO 19462
19462: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
19463: LD_INT 8400
19465: PUSH
19466: LD_EXP 16
19470: PUSH
19471: LD_INT 2100
19473: MUL
19474: PLUS
19475: PPUSH
19476: CALL_OW 67
// EndBuildUp ;
19480: CALL 19097 0 0
// end ;
19484: END
