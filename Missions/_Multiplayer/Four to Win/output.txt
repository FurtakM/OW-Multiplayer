// export def_public_score , def_amount_score ; export is_depot , number_of_breastworks , number_of_people , amount_of_apemen , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , amount_score , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , king_territory , final_count , Player_Side , player_team ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if MultiPlayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type = mp_game_type ;
  79: LD_ADDR_EXP 41
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side = mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  99: LD_ADDR_EXP 21
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 109: LD_ADDR_EXP 18
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 119: LD_ADDR_EXP 22
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 20
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams = mp_teams ;
 139: LD_ADDR_EXP 19
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 352
// begin Game_Type = 3 ;
 151: LD_ADDR_EXP 41
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side = 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 21
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 18
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 22
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 20
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 323: LD_ADDR_EXP 19
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: ST_TO_ADDR
// end ; for i := 1 to 8 do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_INT 8
 364: PUSH
 365: FOR_TO
 366: IFFALSE 453
// if Multiplayer_GetPlayerIsSpec ( i ) then
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 530
 377: IFFALSE 451
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 379: LD_ADDR_EXP 21
 383: PUSH
 384: LD_EXP 21
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_INT 0
 396: PPUSH
 397: CALL_OW 1
 401: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 402: LD_ADDR_EXP 19
 406: PUSH
 407: LD_EXP 19
 411: PPUSH
 412: LD_EXP 18
 416: PUSH
 417: LD_VAR 0 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 19
 427: PUSH
 428: LD_EXP 18
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: ARRAY
 439: PUSH
 440: LD_VAR 0 2
 444: DIFF
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// end ;
 451: GO 365
 453: POP
 454: POP
// if MultiPlayer then
 455: LD_OWVAR 4
 459: IFFALSE 666
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 461: LD_ADDR_EXP 43
 465: PUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 474: LD_ADDR_EXP 44
 478: PUSH
 479: LD_INT 1
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 487: LD_ADDR_EXP 45
 491: PUSH
 492: LD_INT 2
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 500: LD_ADDR_EXP 46
 504: PUSH
 505: LD_INT 3
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 513: LD_ADDR_EXP 47
 517: PUSH
 518: LD_INT 4
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 526: LD_ADDR_EXP 48
 530: PUSH
 531: LD_INT 5
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 539: LD_ADDR_EXP 50
 543: PUSH
 544: LD_INT 10
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 552: LD_ADDR_EXP 51
 556: PUSH
 557: LD_INT 11
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 565: LD_ADDR_EXP 52
 569: PUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 578: LD_ADDR_EXP 54
 582: PUSH
 583: LD_INT 13
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 591: LD_ADDR_EXP 53
 595: PUSH
 596: LD_INT 14
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 604: LD_ADDR_EXP 55
 608: PUSH
 609: LD_INT 15
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_public_score = GetMultiplayerSetting ( 16 ) ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 16
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_amount_score = GetMultiplayerSetting ( 17 ) ;
 630: LD_ADDR_EXP 2
 634: PUSH
 635: LD_INT 17
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 643: LD_ADDR_VAR 0 3
 647: PUSH
 648: LD_INT 22
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// def_win_rules = 0 ;
 656: LD_ADDR_EXP 17
 660: PUSH
 661: LD_INT 0
 663: ST_TO_ADDR
// end else
 664: GO 798
// begin randomize ;
 666: CALL_OW 10
// def_base_level = 3 ;
 670: LD_ADDR_EXP 43
 674: PUSH
 675: LD_INT 3
 677: ST_TO_ADDR
// def_amount_of_people = 1 ;
 678: LD_ADDR_EXP 44
 682: PUSH
 683: LD_INT 1
 685: ST_TO_ADDR
// def_skill_level = 1 ;
 686: LD_ADDR_EXP 45
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// def_starting_resources = 2 ;
 694: LD_ADDR_EXP 46
 698: PUSH
 699: LD_INT 2
 701: ST_TO_ADDR
// def_shipments_density = 1 ;
 702: LD_ADDR_EXP 47
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
 710: LD_ADDR_EXP 48
 714: PUSH
 715: LD_INT 0
 717: ST_TO_ADDR
// def_shared_vision = 1 ;
 718: LD_ADDR_EXP 50
 722: PUSH
 723: LD_INT 1
 725: ST_TO_ADDR
// def_morale_flags = 1 ;
 726: LD_ADDR_EXP 51
 730: PUSH
 731: LD_INT 1
 733: ST_TO_ADDR
// def_siberite_detection = 1 ;
 734: LD_ADDR_EXP 52
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 742: LD_ADDR_EXP 54
 746: PUSH
 747: LD_INT 3
 749: ST_TO_ADDR
// def_people_respawning = 2 ;
 750: LD_ADDR_EXP 53
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 758: LD_ADDR_EXP 55
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_public_score = 1 ;
 766: LD_ADDR_EXP 1
 770: PUSH
 771: LD_INT 1
 773: ST_TO_ADDR
// def_amount_score = 0 ;
 774: LD_ADDR_EXP 2
 778: PUSH
 779: LD_INT 0
 781: ST_TO_ADDR
// tech_level = 4 ;
 782: LD_ADDR_VAR 0 3
 786: PUSH
 787: LD_INT 4
 789: ST_TO_ADDR
// def_win_rules = 0 ;
 790: LD_ADDR_EXP 17
 794: PUSH
 795: LD_INT 0
 797: ST_TO_ADDR
// end ; Player_Side = Your_Side ;
 798: LD_ADDR_EXP 31
 802: PUSH
 803: LD_OWVAR 2
 807: ST_TO_ADDR
// player_team = Side_Teams [ Player_Side ] ;
 808: LD_ADDR_EXP 32
 812: PUSH
 813: LD_EXP 18
 817: PUSH
 818: LD_EXP 31
 822: ARRAY
 823: ST_TO_ADDR
// InitGameRules ;
 824: CALL 7749 0 0
// if def_game_rules = 0 then
 828: LD_EXP 42
 832: PUSH
 833: LD_INT 0
 835: EQUAL
 836: IFFALSE 863
// begin if isSGUI then
 838: LD_OWVAR 83
 842: IFFALSE 850
// setMpTechs ( ) else
 844: CALL 15545 0 0
 848: GO 863
// begin SetMpTechLevel ( tech_level + 1 ) ;
 850: LD_VAR 0 3
 854: PUSH
 855: LD_INT 1
 857: PLUS
 858: PPUSH
 859: CALL 15692 0 1
// end ; end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 863: LD_ADDR_EXP 3
 867: PUSH
 868: LD_INT 0
 870: PUSH
 871: LD_INT 1
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: PUSH
 886: LD_EXP 43
 890: PUSH
 891: LD_INT 1
 893: PLUS
 894: ARRAY
 895: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 896: LD_ADDR_EXP 4
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: LD_INT 0
 906: PUSH
 907: LD_INT 2
 909: PUSH
 910: LD_INT 4
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_EXP 43
 923: PUSH
 924: LD_INT 1
 926: PLUS
 927: ARRAY
 928: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 929: LD_ADDR_EXP 5
 933: PUSH
 934: LD_INT 9
 936: PUSH
 937: LD_INT 12
 939: PUSH
 940: LD_INT 15
 942: PUSH
 943: LD_INT 24
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_EXP 44
 956: PUSH
 957: LD_INT 1
 959: PLUS
 960: ARRAY
 961: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 962: LD_ADDR_EXP 7
 966: PUSH
 967: LD_INT 2
 969: PUSH
 970: LD_INT 3
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: LD_INT 5
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_EXP 45
 989: PUSH
 990: LD_INT 1
 992: PLUS
 993: ARRAY
 994: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 995: LD_ADDR_EXP 9
 999: PUSH
1000: LD_INT 0
1002: PUSH
1003: LD_INT 0
1005: PUSH
1006: LD_INT 0
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 30
1016: PUSH
1017: LD_INT 0
1019: PUSH
1020: LD_INT 0
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 50
1030: PUSH
1031: LD_INT 20
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 80
1044: PUSH
1045: LD_INT 40
1047: PUSH
1048: LD_INT 20
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_EXP 46
1066: PUSH
1067: LD_INT 1
1069: PLUS
1070: ARRAY
1071: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1072: LD_ADDR_EXP 8
1076: PUSH
1077: LD_INT 10
1079: PUSH
1080: EMPTY
1081: LIST
1082: PUSH
1083: LD_INT 7
1085: PUSH
1086: LD_INT 14
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 6
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 18
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 5
1109: PUSH
1110: LD_INT 10
1112: PUSH
1113: LD_INT 15
1115: PUSH
1116: LD_INT 20
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: PUSH
1131: LD_EXP 46
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: ARRAY
1140: ST_TO_ADDR
// shipments_density = [ 15 , 20 , 25 ] [ def_shipments_density + 1 ] ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_INT 15
1148: PUSH
1149: LD_INT 20
1151: PUSH
1152: LD_INT 25
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 47
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1170: LD_ADDR_EXP 6
1174: PUSH
1175: LD_INT 0
1177: PUSH
1178: LD_INT 3
1180: PUSH
1181: LD_INT 6
1183: PUSH
1184: LD_INT 9
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 54
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1203: LD_ADDR_EXP 12
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 165
1213: PUSH
1214: LD_INT 140
1216: PUSH
1217: LD_INT 115
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_EXP 54
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1236: LD_ADDR_EXP 13
1240: PUSH
1241: LD_INT 0
1243: PUSH
1244: LD_INT 8400
1246: PUSH
1247: LD_INT 1750
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_EXP 53
1259: PUSH
1260: LD_INT 1
1262: PLUS
1263: ARRAY
1264: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1265: LD_ADDR_EXP 14
1269: PUSH
1270: LD_INT 0
1272: PUSH
1273: LD_INT 21000
1275: PUSH
1276: LD_INT 4200
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: PUSH
1284: LD_EXP 53
1288: PUSH
1289: LD_INT 1
1291: PLUS
1292: ARRAY
1293: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1294: LD_ADDR_EXP 11
1298: PUSH
1299: LD_INT 1
1301: NEG
1302: PUSH
1303: LD_INT 350
1305: PUSH
1306: LD_INT 700
1308: PUSH
1309: LD_INT 1400
1311: PUSH
1312: LD_INT 0
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_EXP 51
1326: PUSH
1327: LD_INT 1
1329: PLUS
1330: ARRAY
1331: ST_TO_ADDR
// battle_flags_id = [ ] ;
1332: LD_ADDR_EXP 28
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// amount_score = [ 200 , 300 , 500 , 700 , 1000 , 1500 ] [ def_amount_score + 1 ] ;
1339: LD_ADDR_EXP 15
1343: PUSH
1344: LD_INT 200
1346: PUSH
1347: LD_INT 300
1349: PUSH
1350: LD_INT 500
1352: PUSH
1353: LD_INT 700
1355: PUSH
1356: LD_INT 1000
1358: PUSH
1359: LD_INT 1500
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1380: LD_ADDR_EXP 16
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 63000
1393: PUSH
1394: LD_INT 126000
1396: PUSH
1397: LD_INT 189000
1399: PUSH
1400: LD_INT 252000
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 55
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// if not def_builduptime then
1421: LD_EXP 56
1425: NOT
1426: IFFALSE 1431
// disable ( 600 ) ;
1428: LD_INT 600
1430: DISABLE_MARKED
// king_territory = KopecStred ;
1431: LD_ADDR_EXP 29
1435: PUSH
1436: LD_INT 2
1438: ST_TO_ADDR
// final_count = amount_score ;
1439: LD_ADDR_EXP 30
1443: PUSH
1444: LD_EXP 15
1448: ST_TO_ADDR
// end ;
1449: LD_VAR 0 1
1453: RET
// function init_map ; var i ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
// extra_oil_deposits_locations := [ [ 53 , 26 ] , [ 51 , 53 ] , [ 129 , 20 ] , [ 155 , 53 ] , [ 187 , 139 ] , [ 183 , 107 ] , [ 106 , 135 ] , [ 80 , 106 ] ] ;
1458: LD_ADDR_EXP 27
1462: PUSH
1463: LD_INT 53
1465: PUSH
1466: LD_INT 26
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 51
1475: PUSH
1476: LD_INT 53
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: PUSH
1483: LD_INT 129
1485: PUSH
1486: LD_INT 20
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 155
1495: PUSH
1496: LD_INT 53
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: PUSH
1503: LD_INT 187
1505: PUSH
1506: LD_INT 139
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PUSH
1513: LD_INT 183
1515: PUSH
1516: LD_INT 107
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 106
1525: PUSH
1526: LD_INT 135
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 80
1535: PUSH
1536: LD_INT 106
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// depot_def := [ [ 29 , 22 , 3 ] , [ 154 , 21 , 3 ] , [ 85 , 138 , 0 ] , [ 212 , 141 , 5 ] ] ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_INT 29
1560: PUSH
1561: LD_INT 22
1563: PUSH
1564: LD_INT 3
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 154
1574: PUSH
1575: LD_INT 21
1577: PUSH
1578: LD_INT 3
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 85
1588: PUSH
1589: LD_INT 138
1591: PUSH
1592: LD_INT 0
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 212
1602: PUSH
1603: LD_INT 141
1605: PUSH
1606: LD_INT 5
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: ST_TO_ADDR
// start_def := [ [ 33 , 25 ] , [ 151 , 24 ] , [ 89 , 135 ] , [ 205 , 137 ] ] ;
1620: LD_ADDR_EXP 26
1624: PUSH
1625: LD_INT 33
1627: PUSH
1628: LD_INT 25
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 151
1637: PUSH
1638: LD_INT 24
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 89
1647: PUSH
1648: LD_INT 135
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 205
1657: PUSH
1658: LD_INT 137
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// breastworks_def := [ [ [ 46 , 13 , 4 ] , [ 43 , 39 , 4 ] , [ 47 , 25 , 5 ] , [ 45 , 44 , 5 ] ] , [ [ 129 , 12 , 0 ] , [ 153 , 34 , 1 ] , [ 139 , 24 , 0 ] , [ 158 , 41 , 0 ] ] , [ [ 84 , 121 , 4 ] , [ 109 , 143 , 4 ] , [ 87 , 126 , 4 ] , [ 111 , 148 , 4 ] ] , [ [ 194 , 146 , 2 ] , [ 195 , 121 , 1 ] , [ 193 , 135 , 2 ] , [ 192 , 116 , 2 ] ] , ] ;
1671: LD_ADDR_EXP 25
1675: PUSH
1676: LD_INT 46
1678: PUSH
1679: LD_INT 13
1681: PUSH
1682: LD_INT 4
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 43
1692: PUSH
1693: LD_INT 39
1695: PUSH
1696: LD_INT 4
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 47
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 45
1720: PUSH
1721: LD_INT 44
1723: PUSH
1724: LD_INT 5
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 129
1740: PUSH
1741: LD_INT 12
1743: PUSH
1744: LD_INT 0
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 153
1754: PUSH
1755: LD_INT 34
1757: PUSH
1758: LD_INT 1
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 139
1768: PUSH
1769: LD_INT 24
1771: PUSH
1772: LD_INT 0
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 158
1782: PUSH
1783: LD_INT 41
1785: PUSH
1786: LD_INT 0
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 84
1802: PUSH
1803: LD_INT 121
1805: PUSH
1806: LD_INT 4
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 109
1816: PUSH
1817: LD_INT 143
1819: PUSH
1820: LD_INT 4
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 87
1830: PUSH
1831: LD_INT 126
1833: PUSH
1834: LD_INT 4
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 111
1844: PUSH
1845: LD_INT 148
1847: PUSH
1848: LD_INT 4
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 194
1864: PUSH
1865: LD_INT 146
1867: PUSH
1868: LD_INT 2
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 195
1878: PUSH
1879: LD_INT 121
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 193
1892: PUSH
1893: LD_INT 135
1895: PUSH
1896: LD_INT 2
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 192
1906: PUSH
1907: LD_INT 116
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// if def_extra_oil_deposits then
1930: LD_EXP 48
1934: IFFALSE 1978
// for i in extra_oil_deposits_locations do
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_EXP 27
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1976
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1949: LD_VAR 0 2
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 2
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 2
1969: PPUSH
1970: CALL_OW 62
1974: GO 1946
1976: POP
1977: POP
// end ;
1978: LD_VAR 0 1
1982: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1983: LD_INT 0
1985: PPUSH
1986: PPUSH
1987: PPUSH
// Team_Game := 1 ;
1988: LD_ADDR_EXP 23
1992: PUSH
1993: LD_INT 1
1995: ST_TO_ADDR
// if not Team_Game then
1996: LD_EXP 23
2000: NOT
2001: IFFALSE 2099
// begin for i = 1 to 8 do
2003: LD_ADDR_VAR 0 2
2007: PUSH
2008: DOUBLE
2009: LD_INT 1
2011: DEC
2012: ST_TO_ADDR
2013: LD_INT 8
2015: PUSH
2016: FOR_TO
2017: IFFALSE 2095
// for j = 1 to 8 do
2019: LD_ADDR_VAR 0 3
2023: PUSH
2024: DOUBLE
2025: LD_INT 1
2027: DEC
2028: ST_TO_ADDR
2029: LD_INT 8
2031: PUSH
2032: FOR_TO
2033: IFFALSE 2091
// if i <> j then
2035: LD_VAR 0 2
2039: PUSH
2040: LD_VAR 0 3
2044: NONEQUAL
2045: IFFALSE 2069
// SetAttitude ( i , j , att_neutral , true ) else
2047: LD_VAR 0 2
2051: PPUSH
2052: LD_VAR 0 3
2056: PPUSH
2057: LD_INT 0
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: CALL_OW 80
2067: GO 2089
// SetAttitude ( i , j , att_friend , true ) ;
2069: LD_VAR 0 2
2073: PPUSH
2074: LD_VAR 0 3
2078: PPUSH
2079: LD_INT 1
2081: PPUSH
2082: LD_INT 1
2084: PPUSH
2085: CALL_OW 80
2089: GO 2032
2091: POP
2092: POP
2093: GO 2016
2095: POP
2096: POP
// end else
2097: GO 2274
// begin if def_shared_vision then
2099: LD_EXP 50
2103: IFFALSE 2168
// begin for i in Teams do
2105: LD_ADDR_VAR 0 2
2109: PUSH
2110: LD_EXP 19
2114: PUSH
2115: FOR_IN
2116: IFFALSE 2166
// for j = 2 to i do
2118: LD_ADDR_VAR 0 3
2122: PUSH
2123: DOUBLE
2124: LD_INT 2
2126: DEC
2127: ST_TO_ADDR
2128: LD_VAR 0 2
2132: PUSH
2133: FOR_TO
2134: IFFALSE 2162
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2136: LD_VAR 0 2
2140: PUSH
2141: LD_VAR 0 3
2145: ARRAY
2146: PPUSH
2147: LD_VAR 0 2
2151: PUSH
2152: LD_INT 1
2154: ARRAY
2155: PPUSH
2156: CALL_OW 343
2160: GO 2133
2162: POP
2163: POP
2164: GO 2115
2166: POP
2167: POP
// end ; for i = 1 to 8 do
2168: LD_ADDR_VAR 0 2
2172: PUSH
2173: DOUBLE
2174: LD_INT 1
2176: DEC
2177: ST_TO_ADDR
2178: LD_INT 8
2180: PUSH
2181: FOR_TO
2182: IFFALSE 2272
// for j = 1 to 8 do
2184: LD_ADDR_VAR 0 3
2188: PUSH
2189: DOUBLE
2190: LD_INT 1
2192: DEC
2193: ST_TO_ADDR
2194: LD_INT 8
2196: PUSH
2197: FOR_TO
2198: IFFALSE 2268
// if Side_Teams [ i ] = Side_Teams [ j ] then
2200: LD_EXP 18
2204: PUSH
2205: LD_VAR 0 2
2209: ARRAY
2210: PUSH
2211: LD_EXP 18
2215: PUSH
2216: LD_VAR 0 3
2220: ARRAY
2221: EQUAL
2222: IFFALSE 2246
// SetAttitude ( i , j , att_friend , true ) else
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_VAR 0 3
2233: PPUSH
2234: LD_INT 1
2236: PPUSH
2237: LD_INT 1
2239: PPUSH
2240: CALL_OW 80
2244: GO 2266
// SetAttitude ( i , j , att_enemy , true ) ;
2246: LD_VAR 0 2
2250: PPUSH
2251: LD_VAR 0 3
2255: PPUSH
2256: LD_INT 2
2258: PPUSH
2259: LD_INT 1
2261: PPUSH
2262: CALL_OW 80
2266: GO 2197
2268: POP
2269: POP
2270: GO 2181
2272: POP
2273: POP
// end ; end ;
2274: LD_VAR 0 1
2278: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2279: LD_INT 0
2281: PPUSH
2282: PPUSH
2283: PPUSH
2284: PPUSH
// result := [ ] ;
2285: LD_ADDR_VAR 0 6
2289: PUSH
2290: EMPTY
2291: ST_TO_ADDR
// for i := 1 to count do
2292: LD_ADDR_VAR 0 7
2296: PUSH
2297: DOUBLE
2298: LD_INT 1
2300: DEC
2301: ST_TO_ADDR
2302: LD_VAR 0 1
2306: PUSH
2307: FOR_TO
2308: IFFALSE 2704
// begin uc_direction := Rand ( 0 , 5 ) ;
2310: LD_ADDR_OWVAR 24
2314: PUSH
2315: LD_INT 0
2317: PPUSH
2318: LD_INT 5
2320: PPUSH
2321: CALL_OW 12
2325: ST_TO_ADDR
// if commander then
2326: LD_LOC 1
2330: IFFALSE 2439
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2332: LD_ADDR_OWVAR 26
2336: PUSH
2337: LD_OWVAR 19
2341: PUSH
2342: LD_OWVAR 20
2346: ARRAY
2347: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2348: LD_INT 1
2350: PPUSH
2351: LD_INT 2
2353: PPUSH
2354: CALL_OW 12
2358: PPUSH
2359: LD_VAR 0 2
2363: PPUSH
2364: LD_EXP 7
2368: PUSH
2369: LD_INT 2
2371: PLUS
2372: PPUSH
2373: CALL_OW 380
// hc_importance := 105 ;
2377: LD_ADDR_OWVAR 32
2381: PUSH
2382: LD_INT 105
2384: ST_TO_ADDR
// commander := false ;
2385: LD_ADDR_LOC 1
2389: PUSH
2390: LD_INT 0
2392: ST_TO_ADDR
// if Multiplayer then
2393: LD_OWVAR 4
2397: IFFALSE 2437
// begin hc_gallery := MULTIAVATARS ;
2399: LD_ADDR_OWVAR 33
2403: PUSH
2404: LD_STRING MULTIAVATARS
2406: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2407: LD_ADDR_OWVAR 34
2411: PUSH
2412: LD_OWVAR 20
2416: PPUSH
2417: CALL_OW 525
2421: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2422: LD_ADDR_OWVAR 27
2426: PUSH
2427: LD_OWVAR 20
2431: PPUSH
2432: CALL_OW 526
2436: ST_TO_ADDR
// end ; end else
2437: GO 2502
// begin hc_name :=  ;
2439: LD_ADDR_OWVAR 26
2443: PUSH
2444: LD_STRING 
2446: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2447: LD_INT 1
2449: PPUSH
2450: LD_INT 2
2452: PPUSH
2453: CALL_OW 12
2457: PPUSH
2458: LD_VAR 0 2
2462: PPUSH
2463: LD_EXP 7
2467: PPUSH
2468: CALL_OW 380
// hc_importance := 0 ;
2472: LD_ADDR_OWVAR 32
2476: PUSH
2477: LD_INT 0
2479: ST_TO_ADDR
// if Multiplayer then
2480: LD_OWVAR 4
2484: IFFALSE 2502
// begin hc_gallery :=  ;
2486: LD_ADDR_OWVAR 33
2490: PUSH
2491: LD_STRING 
2493: ST_TO_ADDR
// hc_face_number := 0 ;
2494: LD_ADDR_OWVAR 34
2498: PUSH
2499: LD_INT 0
2501: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2502: LD_ADDR_VAR 0 9
2506: PUSH
2507: CALL_OW 44
2511: ST_TO_ADDR
// if global_defined then
2512: LD_LOC 3
2516: IFFALSE 2656
// begin if ( cl = class_soldier ) then
2518: LD_VAR 0 2
2522: PUSH
2523: LD_INT 1
2525: EQUAL
2526: IFFALSE 2546
// j := i + soldiers_created else
2528: LD_ADDR_VAR 0 8
2532: PUSH
2533: LD_VAR 0 7
2537: PUSH
2538: LD_LOC 4
2542: PLUS
2543: ST_TO_ADDR
2544: GO 2556
// j := i ;
2546: LD_ADDR_VAR 0 8
2550: PUSH
2551: LD_VAR 0 7
2555: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2556: LD_LOC 2
2560: PUSH
2561: LD_VAR 0 2
2565: ARRAY
2566: PUSH
2567: LD_VAR 0 8
2571: ARRAY
2572: PPUSH
2573: LD_VAR 0 9
2577: PPUSH
2578: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2582: LD_VAR 0 9
2586: PPUSH
2587: LD_INT 2
2589: PPUSH
2590: LD_LOC 2
2594: PUSH
2595: LD_VAR 0 2
2599: ARRAY
2600: PUSH
2601: LD_VAR 0 8
2605: ARRAY
2606: PPUSH
2607: LD_INT 2
2609: PPUSH
2610: CALL_OW 260
2614: PPUSH
2615: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2619: LD_VAR 0 9
2623: PPUSH
2624: LD_INT 1
2626: PPUSH
2627: LD_LOC 2
2631: PUSH
2632: LD_VAR 0 2
2636: ARRAY
2637: PUSH
2638: LD_VAR 0 8
2642: ARRAY
2643: PPUSH
2644: LD_INT 1
2646: PPUSH
2647: CALL_OW 260
2651: PPUSH
2652: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2656: LD_VAR 0 9
2660: PPUSH
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_VAR 0 4
2670: PPUSH
2671: LD_VAR 0 5
2675: PPUSH
2676: LD_INT 0
2678: PPUSH
2679: CALL_OW 50
// result := result ^ [ un ] ;
2683: LD_ADDR_VAR 0 6
2687: PUSH
2688: LD_VAR 0 6
2692: PUSH
2693: LD_VAR 0 9
2697: PUSH
2698: EMPTY
2699: LIST
2700: ADD
2701: ST_TO_ADDR
// end ;
2702: GO 2307
2704: POP
2705: POP
// if not global_defined then
2706: LD_LOC 3
2710: NOT
2711: IFFALSE 2789
// if ( global_units >= cl ) then
2713: LD_LOC 2
2717: PUSH
2718: LD_VAR 0 2
2722: GREATEREQUAL
2723: IFFALSE 2764
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2725: LD_ADDR_LOC 2
2729: PUSH
2730: LD_LOC 2
2734: PPUSH
2735: LD_VAR 0 2
2739: PPUSH
2740: LD_LOC 2
2744: PUSH
2745: LD_VAR 0 2
2749: ARRAY
2750: PUSH
2751: LD_VAR 0 6
2755: ADD
2756: PPUSH
2757: CALL_OW 1
2761: ST_TO_ADDR
2762: GO 2789
// global_units := Replace ( global_units , cl , result ) ;
2764: LD_ADDR_LOC 2
2768: PUSH
2769: LD_LOC 2
2773: PPUSH
2774: LD_VAR 0 2
2778: PPUSH
2779: LD_VAR 0 6
2783: PPUSH
2784: CALL_OW 1
2788: ST_TO_ADDR
// end ;
2789: LD_VAR 0 6
2793: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , sol , br , dep ; begin
2794: LD_INT 0
2796: PPUSH
2797: PPUSH
2798: PPUSH
2799: PPUSH
2800: PPUSH
2801: PPUSH
2802: PPUSH
2803: PPUSH
2804: PPUSH
2805: PPUSH
// pos := Side_Positions [ side ] ;
2806: LD_ADDR_VAR 0 3
2810: PUSH
2811: LD_EXP 21
2815: PUSH
2816: LD_VAR 0 1
2820: ARRAY
2821: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2822: LD_ADDR_OWVAR 21
2826: PUSH
2827: LD_EXP 22
2831: PUSH
2832: LD_VAR 0 1
2836: ARRAY
2837: ST_TO_ADDR
// uc_side := side ;
2838: LD_ADDR_OWVAR 20
2842: PUSH
2843: LD_VAR 0 1
2847: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2848: LD_ADDR_VAR 0 4
2852: PUSH
2853: LD_EXP 24
2857: PUSH
2858: LD_VAR 0 3
2862: ARRAY
2863: PUSH
2864: LD_INT 1
2866: ARRAY
2867: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2868: LD_ADDR_VAR 0 5
2872: PUSH
2873: LD_EXP 24
2877: PUSH
2878: LD_VAR 0 3
2882: ARRAY
2883: PUSH
2884: LD_INT 2
2886: ARRAY
2887: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2888: LD_ADDR_VAR 0 6
2892: PUSH
2893: LD_EXP 24
2897: PUSH
2898: LD_VAR 0 3
2902: ARRAY
2903: PUSH
2904: LD_INT 3
2906: ARRAY
2907: ST_TO_ADDR
// if is_depot then
2908: LD_EXP 3
2912: IFFALSE 3045
// begin bc_type = b_depot ;
2914: LD_ADDR_OWVAR 42
2918: PUSH
2919: LD_INT 0
2921: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2922: LD_ADDR_VAR 0 11
2926: PUSH
2927: LD_VAR 0 4
2931: PPUSH
2932: LD_VAR 0 5
2936: PPUSH
2937: LD_VAR 0 6
2941: PPUSH
2942: CALL_OW 47
2946: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2947: LD_VAR 0 11
2951: PPUSH
2952: LD_STRING @
2954: PUSH
2955: LD_VAR 0 1
2959: STR
2960: PPUSH
2961: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2965: LD_VAR 0 11
2969: PPUSH
2970: CALL_OW 274
2974: PPUSH
2975: LD_INT 1
2977: PPUSH
2978: LD_EXP 9
2982: PUSH
2983: LD_INT 1
2985: ARRAY
2986: PPUSH
2987: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2991: LD_VAR 0 11
2995: PPUSH
2996: CALL_OW 274
3000: PPUSH
3001: LD_INT 2
3003: PPUSH
3004: LD_EXP 9
3008: PUSH
3009: LD_INT 2
3011: ARRAY
3012: PPUSH
3013: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3017: LD_VAR 0 11
3021: PPUSH
3022: CALL_OW 274
3026: PPUSH
3027: LD_INT 3
3029: PPUSH
3030: LD_EXP 9
3034: PUSH
3035: LD_INT 3
3037: ARRAY
3038: PPUSH
3039: CALL_OW 277
// end else
3043: GO 3189
// begin for i := 1 to 3 do
3045: LD_ADDR_VAR 0 7
3049: PUSH
3050: DOUBLE
3051: LD_INT 1
3053: DEC
3054: ST_TO_ADDR
3055: LD_INT 3
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3187
// begin r := starting_resources [ i ] ;
3061: LD_ADDR_VAR 0 8
3065: PUSH
3066: LD_EXP 9
3070: PUSH
3071: LD_VAR 0 7
3075: ARRAY
3076: ST_TO_ADDR
// while r >= 10 do
3077: LD_VAR 0 8
3081: PUSH
3082: LD_INT 10
3084: GREATEREQUAL
3085: IFFALSE 3185
// if r > 50 then
3087: LD_VAR 0 8
3091: PUSH
3092: LD_INT 50
3094: GREATER
3095: IFFALSE 3141
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3097: LD_VAR 0 7
3101: PPUSH
3102: LD_INT 5
3104: PPUSH
3105: LD_VAR 0 4
3109: PPUSH
3110: LD_VAR 0 5
3114: PPUSH
3115: LD_INT 4
3117: PPUSH
3118: LD_INT 0
3120: PPUSH
3121: CALL_OW 60
// r := r - 50 ;
3125: LD_ADDR_VAR 0 8
3129: PUSH
3130: LD_VAR 0 8
3134: PUSH
3135: LD_INT 50
3137: MINUS
3138: ST_TO_ADDR
// end else
3139: GO 3183
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3141: LD_VAR 0 7
3145: PPUSH
3146: LD_VAR 0 8
3150: PUSH
3151: LD_INT 10
3153: DIV
3154: PPUSH
3155: LD_VAR 0 4
3159: PPUSH
3160: LD_VAR 0 5
3164: PPUSH
3165: LD_INT 4
3167: PPUSH
3168: LD_INT 0
3170: PPUSH
3171: CALL_OW 60
// r := 0 ;
3175: LD_ADDR_VAR 0 8
3179: PUSH
3180: LD_INT 0
3182: ST_TO_ADDR
// end ;
3183: GO 3077
// end ;
3185: GO 3058
3187: POP
3188: POP
// end ; for r in starting_crates do
3189: LD_ADDR_VAR 0 8
3193: PUSH
3194: LD_EXP 8
3198: PUSH
3199: FOR_IN
3200: IFFALSE 3232
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3202: LD_INT 1
3204: PPUSH
3205: LD_INT 5
3207: PPUSH
3208: LD_VAR 0 4
3212: PPUSH
3213: LD_VAR 0 5
3217: PPUSH
3218: LD_VAR 0 8
3222: PPUSH
3223: LD_INT 0
3225: PPUSH
3226: CALL_OW 60
3230: GO 3199
3232: POP
3233: POP
// if def_morale_flags then
3234: LD_EXP 51
3238: IFFALSE 3377
// begin x := start_def [ pos ] [ 1 ] ;
3240: LD_ADDR_VAR 0 4
3244: PUSH
3245: LD_EXP 26
3249: PUSH
3250: LD_VAR 0 3
3254: ARRAY
3255: PUSH
3256: LD_INT 1
3258: ARRAY
3259: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3260: LD_ADDR_VAR 0 5
3264: PUSH
3265: LD_EXP 26
3269: PUSH
3270: LD_VAR 0 3
3274: ARRAY
3275: PUSH
3276: LD_INT 2
3278: ARRAY
3279: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3280: LD_VAR 0 4
3284: PPUSH
3285: LD_VAR 0 5
3289: PPUSH
3290: LD_INT 12
3292: PPUSH
3293: LD_INT 2
3295: PPUSH
3296: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3300: LD_ADDR_EXP 28
3304: PUSH
3305: LD_EXP 28
3309: PUSH
3310: LD_VAR 0 1
3314: PPUSH
3315: LD_VAR 0 4
3319: PPUSH
3320: LD_VAR 0 5
3324: PPUSH
3325: LD_INT 1
3327: PUSH
3328: LD_INT 100
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: PUSH
3335: LD_INT 2
3337: PUSH
3338: LD_INT 50
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: LD_INT 3
3347: PUSH
3348: LD_INT 20
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: PUSH
3355: LD_INT 20
3357: PUSH
3358: LD_INT 100
3360: PUSH
3361: EMPTY
3362: LIST
3363: LIST
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: PPUSH
3371: CALL_OW 418
3375: ADD
3376: ST_TO_ADDR
// end ; commander := true ;
3377: LD_ADDR_LOC 1
3381: PUSH
3382: LD_INT 1
3384: ST_TO_ADDR
// soldiers_created := 0 ;
3385: LD_ADDR_LOC 4
3389: PUSH
3390: LD_INT 0
3392: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3393: LD_ADDR_VAR 0 7
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_EXP 4
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3631
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3411: LD_ADDR_VAR 0 4
3415: PUSH
3416: LD_EXP 25
3420: PUSH
3421: LD_VAR 0 3
3425: ARRAY
3426: PUSH
3427: LD_VAR 0 7
3431: ARRAY
3432: PUSH
3433: LD_INT 1
3435: ARRAY
3436: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3437: LD_ADDR_VAR 0 5
3441: PUSH
3442: LD_EXP 25
3446: PUSH
3447: LD_VAR 0 3
3451: ARRAY
3452: PUSH
3453: LD_VAR 0 7
3457: ARRAY
3458: PUSH
3459: LD_INT 2
3461: ARRAY
3462: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3463: LD_ADDR_VAR 0 6
3467: PUSH
3468: LD_EXP 25
3472: PUSH
3473: LD_VAR 0 3
3477: ARRAY
3478: PUSH
3479: LD_VAR 0 7
3483: ARRAY
3484: PUSH
3485: LD_INT 3
3487: ARRAY
3488: ST_TO_ADDR
// bc_type := b_breastwork ;
3489: LD_ADDR_OWVAR 42
3493: PUSH
3494: LD_INT 31
3496: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3497: LD_ADDR_VAR 0 10
3501: PUSH
3502: LD_VAR 0 4
3506: PPUSH
3507: LD_VAR 0 5
3511: PPUSH
3512: LD_VAR 0 6
3516: PPUSH
3517: CALL_OW 47
3521: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3522: LD_ADDR_VAR 0 4
3526: PUSH
3527: LD_VAR 0 4
3531: PPUSH
3532: LD_VAR 0 6
3536: PPUSH
3537: LD_INT 2
3539: PPUSH
3540: CALL_OW 272
3544: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3545: LD_ADDR_VAR 0 5
3549: PUSH
3550: LD_VAR 0 5
3554: PPUSH
3555: LD_VAR 0 6
3559: PPUSH
3560: LD_INT 2
3562: PPUSH
3563: CALL_OW 273
3567: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3568: LD_ADDR_VAR 0 9
3572: PUSH
3573: LD_INT 1
3575: PPUSH
3576: LD_INT 1
3578: PPUSH
3579: LD_VAR 0 4
3583: PPUSH
3584: LD_VAR 0 5
3588: PPUSH
3589: LD_INT 0
3591: PPUSH
3592: CALL 2279 0 5
3596: PUSH
3597: LD_INT 1
3599: ARRAY
3600: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3601: LD_ADDR_LOC 4
3605: PUSH
3606: LD_LOC 4
3610: PUSH
3611: LD_INT 1
3613: PLUS
3614: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3615: LD_VAR 0 9
3619: PPUSH
3620: LD_VAR 0 10
3624: PPUSH
3625: CALL_OW 120
// end ;
3629: GO 3408
3631: POP
3632: POP
// x := start_def [ pos ] [ 1 ] ;
3633: LD_ADDR_VAR 0 4
3637: PUSH
3638: LD_EXP 26
3642: PUSH
3643: LD_VAR 0 3
3647: ARRAY
3648: PUSH
3649: LD_INT 1
3651: ARRAY
3652: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3653: LD_ADDR_VAR 0 5
3657: PUSH
3658: LD_EXP 26
3662: PUSH
3663: LD_VAR 0 3
3667: ARRAY
3668: PUSH
3669: LD_INT 2
3671: ARRAY
3672: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
3673: LD_LOC 8
3677: PUSH
3678: LD_EXP 4
3682: MINUS
3683: PPUSH
3684: LD_INT 1
3686: PPUSH
3687: LD_VAR 0 4
3691: PPUSH
3692: LD_VAR 0 5
3696: PPUSH
3697: LD_INT 5
3699: PPUSH
3700: CALL 2279 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
3704: LD_LOC 5
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_VAR 0 4
3716: PPUSH
3717: LD_VAR 0 5
3721: PPUSH
3722: LD_INT 5
3724: PPUSH
3725: CALL 2279 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
3729: LD_LOC 7
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: LD_VAR 0 4
3741: PPUSH
3742: LD_VAR 0 5
3746: PPUSH
3747: LD_INT 5
3749: PPUSH
3750: CALL 2279 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
3754: LD_LOC 6
3758: PPUSH
3759: LD_INT 4
3761: PPUSH
3762: LD_VAR 0 4
3766: PPUSH
3767: LD_VAR 0 5
3771: PPUSH
3772: LD_INT 5
3774: PPUSH
3775: CALL 2279 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3779: LD_EXP 52
3783: PUSH
3784: LD_INT 20
3786: PPUSH
3787: LD_VAR 0 1
3791: PPUSH
3792: CALL_OW 321
3796: PUSH
3797: LD_INT 1
3799: EQUAL
3800: AND
3801: IFFALSE 3818
// SetTech ( tech_SibDet , side , state_researched ) ;
3803: LD_INT 20
3805: PPUSH
3806: LD_VAR 0 1
3810: PPUSH
3811: LD_INT 2
3813: PPUSH
3814: CALL_OW 322
// if def_siberite_bomb = 1 then
3818: LD_EXP 55
3822: PUSH
3823: LD_INT 1
3825: EQUAL
3826: IFFALSE 3860
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3828: LD_INT 25
3830: PPUSH
3831: LD_VAR 0 1
3835: PPUSH
3836: LD_INT 1
3838: PPUSH
3839: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3843: LD_INT 73
3845: PPUSH
3846: LD_VAR 0 1
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 322
// end else
3858: GO 3890
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3860: LD_INT 25
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: LD_INT 0
3870: PPUSH
3871: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3875: LD_INT 73
3877: PPUSH
3878: LD_VAR 0 1
3882: PPUSH
3883: LD_INT 0
3885: PPUSH
3886: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3890: LD_INT 24
3892: PPUSH
3893: LD_VAR 0 1
3897: PPUSH
3898: LD_INT 0
3900: PPUSH
3901: CALL_OW 322
// global_defined := true ;
3905: LD_ADDR_LOC 3
3909: PUSH
3910: LD_INT 1
3912: ST_TO_ADDR
// end ;
3913: LD_VAR 0 2
3917: RET
// every 0 0$1 do
3918: GO 3920
3920: DISABLE
// if ( def_siberite_bomb > 1 ) then
3921: LD_EXP 55
3925: PUSH
3926: LD_INT 1
3928: GREATER
3929: IFFALSE 3944
// begin wait ( siberite_bomb_Delay ) ;
3931: LD_EXP 16
3935: PPUSH
3936: CALL_OW 67
// EnableSibFiss ;
3940: CALL 3945 0 0
// end ;
3944: END
// function EnableSibFiss ; var i ; begin
3945: LD_INT 0
3947: PPUSH
3948: PPUSH
// for i := 1 to 8 do
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: DOUBLE
3955: LD_INT 1
3957: DEC
3958: ST_TO_ADDR
3959: LD_INT 8
3961: PUSH
3962: FOR_TO
3963: IFFALSE 4009
// if Side_Positions [ i ] then
3965: LD_EXP 21
3969: PUSH
3970: LD_VAR 0 2
3974: ARRAY
3975: IFFALSE 4007
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3977: LD_INT 25
3979: PPUSH
3980: LD_VAR 0 2
3984: PPUSH
3985: LD_INT 1
3987: PPUSH
3988: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3992: LD_INT 73
3994: PPUSH
3995: LD_VAR 0 2
3999: PPUSH
4000: LD_INT 1
4002: PPUSH
4003: CALL_OW 322
// end ;
4007: GO 3962
4009: POP
4010: POP
// end ;
4011: LD_VAR 0 1
4015: RET
// function prepare_sides ; var i ; begin
4016: LD_INT 0
4018: PPUSH
4019: PPUSH
// global_units := [ ] ;
4020: LD_ADDR_LOC 2
4024: PUSH
4025: EMPTY
4026: ST_TO_ADDR
// global_defined := false ;
4027: LD_ADDR_LOC 3
4031: PUSH
4032: LD_INT 0
4034: ST_TO_ADDR
// CountClassMembers ;
4035: CALL 4085 0 0
// for i := 1 to 8 do
4039: LD_ADDR_VAR 0 2
4043: PUSH
4044: DOUBLE
4045: LD_INT 1
4047: DEC
4048: ST_TO_ADDR
4049: LD_INT 8
4051: PUSH
4052: FOR_TO
4053: IFFALSE 4078
// if Side_Positions [ i ] then
4055: LD_EXP 21
4059: PUSH
4060: LD_VAR 0 2
4064: ARRAY
4065: IFFALSE 4076
// prepare_side ( i ) ;
4067: LD_VAR 0 2
4071: PPUSH
4072: CALL 2794 0 1
4076: GO 4052
4078: POP
4079: POP
// end ;
4080: LD_VAR 0 1
4084: RET
// function CountClassMembers ; var Mode ; begin
4085: LD_INT 0
4087: PPUSH
4088: PPUSH
// if No_Mechs then
4089: LD_EXP 57
4093: IFFALSE 4105
// Mode := 2 else
4095: LD_ADDR_VAR 0 2
4099: PUSH
4100: LD_INT 2
4102: ST_TO_ADDR
4103: GO 4113
// Mode := 1 ;
4105: LD_ADDR_VAR 0 2
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// neng := number_of_people ;
4113: LD_ADDR_LOC 5
4117: PUSH
4118: LD_EXP 5
4122: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4123: LD_ADDR_LOC 8
4127: PUSH
4128: LD_LOC 5
4132: PUSH
4133: LD_INT 4
4135: PUSH
4136: LD_INT 3
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: LD_VAR 0 2
4147: ARRAY
4148: DIV
4149: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4150: LD_LOC 8
4154: PUSH
4155: LD_EXP 4
4159: LESS
4160: IFFALSE 4172
// nsol := number_of_breastworks ;
4162: LD_ADDR_LOC 8
4166: PUSH
4167: LD_EXP 4
4171: ST_TO_ADDR
// neng := neng - nsol ;
4172: LD_ADDR_LOC 5
4176: PUSH
4177: LD_LOC 5
4181: PUSH
4182: LD_LOC 8
4186: MINUS
4187: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4188: LD_ADDR_LOC 6
4192: PUSH
4193: LD_LOC 5
4197: PUSH
4198: LD_INT 3
4200: PUSH
4201: LD_INT 2
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PUSH
4208: LD_VAR 0 2
4212: ARRAY
4213: DIV
4214: ST_TO_ADDR
// if ( nsci < 1 ) then
4215: LD_LOC 6
4219: PUSH
4220: LD_INT 1
4222: LESS
4223: IFFALSE 4233
// nsci := 1 ;
4225: LD_ADDR_LOC 6
4229: PUSH
4230: LD_INT 1
4232: ST_TO_ADDR
// neng := neng - nsci ;
4233: LD_ADDR_LOC 5
4237: PUSH
4238: LD_LOC 5
4242: PUSH
4243: LD_LOC 6
4247: MINUS
4248: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4249: LD_ADDR_LOC 7
4253: PUSH
4254: LD_LOC 5
4258: PUSH
4259: LD_INT 2
4261: DIV
4262: PUSH
4263: LD_INT 0
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: PUSH
4270: LD_VAR 0 2
4274: ARRAY
4275: ST_TO_ADDR
// neng := neng - nmech ;
4276: LD_ADDR_LOC 5
4280: PUSH
4281: LD_LOC 5
4285: PUSH
4286: LD_LOC 7
4290: MINUS
4291: ST_TO_ADDR
// if ( neng < 1 ) then
4292: LD_LOC 5
4296: PUSH
4297: LD_INT 1
4299: LESS
4300: IFFALSE 4310
// neng := 1 ;
4302: LD_ADDR_LOC 5
4306: PUSH
4307: LD_INT 1
4309: ST_TO_ADDR
// end ;
4310: LD_VAR 0 1
4314: RET
// starting begin disable ( 98 ) ;
4315: LD_INT 98
4317: DISABLE_MARKED
// disable ( 99 ) ;
4318: LD_INT 99
4320: DISABLE_MARKED
// disable ( 100 ) ;
4321: LD_INT 100
4323: DISABLE_MARKED
// disable ( 4 ) ;
4324: LD_INT 4
4326: DISABLE_MARKED
// disable ( 400 ) ;
4327: LD_INT 400
4329: DISABLE_MARKED
// disable ( 401 ) ;
4330: LD_INT 401
4332: DISABLE_MARKED
// mp_selectmsg := true ;
4333: LD_ADDR_OWVAR 13
4337: PUSH
4338: LD_INT 1
4340: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4341: CALL 68 0 0
// init_map ;
4345: CALL 1454 0 0
// set_shared_visions_and_alliances ;
4349: CALL 1983 0 0
// ResetFog ;
4353: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4357: LD_OWVAR 2
4361: PPUSH
4362: CALL_OW 520
// prepare_sides ;
4366: CALL 4016 0 0
// init_shipments_and_respawning ;
4370: CALL 4511 0 0
// Init_Win_Condition ;
4374: CALL 12008 0 0
// if game_type = 3 then
4378: LD_EXP 41
4382: PUSH
4383: LD_INT 3
4385: EQUAL
4386: IFFALSE 4396
// begin InitPoints ( ) ;
4388: CALL 11011 0 0
// init_kings_counting ;
4392: CALL 13371 0 0
// end ; InitApeman ;
4396: CALL 6641 0 0
// InitLimits ;
4400: CALL 9881 0 0
// ShowTimer ;
4404: CALL 10818 0 0
// music_nat := Side_Nations [ your_side ] ;
4408: LD_ADDR_OWVAR 71
4412: PUSH
4413: LD_EXP 22
4417: PUSH
4418: LD_OWVAR 2
4422: ARRAY
4423: ST_TO_ADDR
// if IAmSpec then
4424: CALL_OW 531
4428: IFFALSE 4464
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4430: LD_INT 0
4432: PPUSH
4433: LD_INT 0
4435: PPUSH
4436: LD_OWVAR 2
4440: PPUSH
4441: LD_INT 32767
4443: NEG
4444: PPUSH
4445: CALL_OW 330
// CenterNowOnXY ( 119 , 79 ) ;
4449: LD_INT 119
4451: PPUSH
4452: LD_INT 79
4454: PPUSH
4455: CALL_OW 86
// enable ( 400 ) ;
4459: LD_INT 400
4461: ENABLE_MARKED
// end else
4462: GO 4510
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4464: LD_EXP 26
4468: PUSH
4469: LD_EXP 21
4473: PUSH
4474: LD_OWVAR 2
4478: ARRAY
4479: ARRAY
4480: PUSH
4481: LD_INT 1
4483: ARRAY
4484: PPUSH
4485: LD_EXP 26
4489: PUSH
4490: LD_EXP 21
4494: PUSH
4495: LD_OWVAR 2
4499: ARRAY
4500: ARRAY
4501: PUSH
4502: LD_INT 2
4504: ARRAY
4505: PPUSH
4506: CALL_OW 86
// end ; end ; end_of_file
4510: END
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4511: LD_INT 0
4513: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4514: LD_ADDR_LOC 9
4518: PUSH
4519: LD_INT 0
4521: PPUSH
4522: LD_INT 3
4524: PPUSH
4525: CALL_OW 12
4529: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
4530: LD_ADDR_LOC 10
4534: PUSH
4535: LD_INT 1
4537: PPUSH
4538: LD_INT 8
4540: PPUSH
4541: CALL_OW 12
4545: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4546: LD_ADDR_LOC 11
4550: PUSH
4551: LD_INT 0
4553: PUSH
4554: LD_INT 0
4556: PUSH
4557: LD_INT 0
4559: PUSH
4560: LD_INT 0
4562: PUSH
4563: LD_INT 0
4565: PUSH
4566: LD_INT 0
4568: PUSH
4569: LD_INT 0
4571: PUSH
4572: LD_INT 0
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: ST_TO_ADDR
// end ;
4585: LD_VAR 0 1
4589: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
4590: GO 4592
4592: DISABLE
4593: LD_INT 0
4595: PPUSH
4596: PPUSH
4597: PPUSH
4598: PPUSH
// begin if respawning_time_max = 0 then
4599: LD_EXP 14
4603: PUSH
4604: LD_INT 0
4606: EQUAL
4607: IFFALSE 4611
// exit ;
4609: GO 5118
// if respawn = 8 then
4611: LD_LOC 10
4615: PUSH
4616: LD_INT 8
4618: EQUAL
4619: IFFALSE 4631
// respawn := 1 else
4621: LD_ADDR_LOC 10
4625: PUSH
4626: LD_INT 1
4628: ST_TO_ADDR
4629: GO 4645
// respawn := respawn + 1 ;
4631: LD_ADDR_LOC 10
4635: PUSH
4636: LD_LOC 10
4640: PUSH
4641: LD_INT 1
4643: PLUS
4644: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
4645: LD_EXP 21
4649: PUSH
4650: LD_LOC 10
4654: ARRAY
4655: PUSH
4656: LD_LOC 11
4660: PUSH
4661: LD_LOC 10
4665: ARRAY
4666: NOT
4667: AND
4668: IFFALSE 5117
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
4670: LD_ADDR_VAR 0 1
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 22
4687: PUSH
4688: LD_LOC 10
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 3
4699: PUSH
4700: LD_INT 23
4702: PUSH
4703: LD_INT 0
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: PPUSH
4716: CALL_OW 69
4720: ST_TO_ADDR
// if n < number_of_people then
4721: LD_VAR 0 1
4725: PUSH
4726: LD_EXP 5
4730: LESS
4731: IFFALSE 5114
// begin aktresp := respawn ;
4733: LD_ADDR_VAR 0 3
4737: PUSH
4738: LD_LOC 10
4742: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
4743: LD_ADDR_LOC 11
4747: PUSH
4748: LD_LOC 11
4752: PPUSH
4753: LD_VAR 0 3
4757: PPUSH
4758: LD_INT 1
4760: PPUSH
4761: CALL_OW 1
4765: ST_TO_ADDR
// enable ;
4766: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
4767: LD_EXP 13
4771: PPUSH
4772: LD_EXP 14
4776: PPUSH
4777: CALL_OW 12
4781: PPUSH
4782: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
4786: LD_ADDR_LOC 11
4790: PUSH
4791: LD_LOC 11
4795: PPUSH
4796: LD_VAR 0 3
4800: PPUSH
4801: LD_INT 0
4803: PPUSH
4804: CALL_OW 1
4808: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4809: LD_ADDR_VAR 0 2
4813: PUSH
4814: LD_INT 21
4816: PUSH
4817: LD_INT 3
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: PUSH
4824: LD_INT 2
4826: PUSH
4827: LD_INT 30
4829: PUSH
4830: LD_INT 0
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: LD_INT 30
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_INT 50
4854: PUSH
4855: EMPTY
4856: LIST
4857: PUSH
4858: LD_INT 22
4860: PUSH
4861: LD_VAR 0 3
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: PPUSH
4876: CALL_OW 69
4880: ST_TO_ADDR
// if building_list = 0 then
4881: LD_VAR 0 2
4885: PUSH
4886: LD_INT 0
4888: EQUAL
4889: IFFALSE 4934
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4891: LD_ADDR_VAR 0 2
4895: PUSH
4896: LD_INT 21
4898: PUSH
4899: LD_INT 3
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 50
4908: PUSH
4909: EMPTY
4910: LIST
4911: PUSH
4912: LD_INT 22
4914: PUSH
4915: LD_VAR 0 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: LIST
4928: PPUSH
4929: CALL_OW 69
4933: ST_TO_ADDR
// if building_list = 0 then
4934: LD_VAR 0 2
4938: PUSH
4939: LD_INT 0
4941: EQUAL
4942: IFFALSE 4946
// exit ;
4944: GO 5118
// hc_name :=  ;
4946: LD_ADDR_OWVAR 26
4950: PUSH
4951: LD_STRING 
4953: ST_TO_ADDR
// hc_importance := 0 ;
4954: LD_ADDR_OWVAR 32
4958: PUSH
4959: LD_INT 0
4961: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
4962: LD_INT 0
4964: PPUSH
4965: LD_INT 0
4967: PPUSH
4968: LD_EXP 7
4972: PUSH
4973: LD_INT 2
4975: DIV
4976: PPUSH
4977: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
4981: LD_ADDR_OWVAR 21
4985: PUSH
4986: LD_EXP 22
4990: PUSH
4991: LD_VAR 0 3
4995: ARRAY
4996: ST_TO_ADDR
// uc_side := aktresp ;
4997: LD_ADDR_OWVAR 20
5001: PUSH
5002: LD_VAR 0 3
5006: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5007: LD_ADDR_VAR 0 4
5011: PUSH
5012: LD_VAR 0 2
5016: PUSH
5017: LD_INT 1
5019: PPUSH
5020: LD_VAR 0 2
5024: PUSH
5025: LD_INT 0
5027: PLUS
5028: PPUSH
5029: CALL_OW 12
5033: ARRAY
5034: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5035: LD_VAR 0 4
5039: PPUSH
5040: CALL_OW 266
5044: PUSH
5045: LD_INT 0
5047: PUSH
5048: LD_INT 1
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: IN
5055: IFFALSE 5067
// n = 25 else
5057: LD_ADDR_VAR 0 1
5061: PUSH
5062: LD_INT 25
5064: ST_TO_ADDR
5065: GO 5075
// n = 10 ;
5067: LD_ADDR_VAR 0 1
5071: PUSH
5072: LD_INT 10
5074: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5075: CALL_OW 44
5079: PPUSH
5080: LD_VAR 0 4
5084: PPUSH
5085: CALL_OW 250
5089: PPUSH
5090: LD_VAR 0 4
5094: PPUSH
5095: CALL_OW 251
5099: PPUSH
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 1
5107: PPUSH
5108: CALL_OW 50
// end else
5112: GO 5115
// enable ;
5114: ENABLE
// end else
5115: GO 5118
// enable ;
5117: ENABLE
// end ;
5118: PPOPN 4
5120: END
// every 0 0$5 + 0 0$1.1 do var d ;
5121: GO 5123
5123: DISABLE
5124: LD_INT 0
5126: PPUSH
// begin case tick of 1 .. 1 1$0 :
5127: LD_OWVAR 1
5131: PUSH
5132: LD_INT 1
5134: DOUBLE
5135: GREATEREQUAL
5136: IFFALSE 5144
5138: LD_INT 2100
5140: DOUBLE
5141: LESSEQUAL
5142: IFTRUE 5146
5144: GO 5157
5146: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5147: LD_ADDR_VAR 0 1
5151: PUSH
5152: LD_INT 150
5154: ST_TO_ADDR
5155: GO 5340
5157: LD_INT 2100
5159: PUSH
5160: LD_INT 1
5162: PLUS
5163: DOUBLE
5164: GREATEREQUAL
5165: IFFALSE 5173
5167: LD_INT 10500
5169: DOUBLE
5170: LESSEQUAL
5171: IFTRUE 5175
5173: GO 5186
5175: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5176: LD_ADDR_VAR 0 1
5180: PUSH
5181: LD_INT 100
5183: ST_TO_ADDR
5184: GO 5340
5186: LD_INT 10500
5188: PUSH
5189: LD_INT 1
5191: PLUS
5192: DOUBLE
5193: GREATEREQUAL
5194: IFFALSE 5202
5196: LD_INT 21000
5198: DOUBLE
5199: LESSEQUAL
5200: IFTRUE 5204
5202: GO 5215
5204: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5205: LD_ADDR_VAR 0 1
5209: PUSH
5210: LD_INT 90
5212: ST_TO_ADDR
5213: GO 5340
5215: LD_INT 21000
5217: PUSH
5218: LD_INT 1
5220: PLUS
5221: DOUBLE
5222: GREATEREQUAL
5223: IFFALSE 5231
5225: LD_INT 42000
5227: DOUBLE
5228: LESSEQUAL
5229: IFTRUE 5233
5231: GO 5244
5233: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5234: LD_ADDR_VAR 0 1
5238: PUSH
5239: LD_INT 70
5241: ST_TO_ADDR
5242: GO 5340
5244: LD_INT 42000
5246: PUSH
5247: LD_INT 1
5249: PLUS
5250: DOUBLE
5251: GREATEREQUAL
5252: IFFALSE 5260
5254: LD_INT 63000
5256: DOUBLE
5257: LESSEQUAL
5258: IFTRUE 5262
5260: GO 5273
5262: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5263: LD_ADDR_VAR 0 1
5267: PUSH
5268: LD_INT 60
5270: ST_TO_ADDR
5271: GO 5340
5273: LD_INT 63000
5275: PUSH
5276: LD_INT 1
5278: PLUS
5279: DOUBLE
5280: GREATEREQUAL
5281: IFFALSE 5289
5283: LD_INT 105000
5285: DOUBLE
5286: LESSEQUAL
5287: IFTRUE 5291
5289: GO 5302
5291: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5292: LD_ADDR_VAR 0 1
5296: PUSH
5297: LD_INT 35
5299: ST_TO_ADDR
5300: GO 5340
5302: LD_INT 105000
5304: PUSH
5305: LD_INT 1
5307: PLUS
5308: DOUBLE
5309: GREATEREQUAL
5310: IFFALSE 5318
5312: LD_INT 630000
5314: DOUBLE
5315: LESSEQUAL
5316: IFTRUE 5320
5318: GO 5331
5320: POP
// d := 20 ; else
5321: LD_ADDR_VAR 0 1
5325: PUSH
5326: LD_INT 20
5328: ST_TO_ADDR
5329: GO 5340
5331: POP
// d := 0 ; end ;
5332: LD_ADDR_VAR 0 1
5336: PUSH
5337: LD_INT 0
5339: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5340: LD_INT 1
5342: PPUSH
5343: LD_INT 10000
5345: PPUSH
5346: CALL_OW 12
5350: PUSH
5351: LD_VAR 0 1
5355: PUSH
5356: LD_EXP 10
5360: MUL
5361: LESSEQUAL
5362: IFFALSE 5416
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5364: LD_INT 1
5366: PPUSH
5367: LD_INT 140
5369: PPUSH
5370: CALL_OW 12
5374: PPUSH
5375: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5379: LD_ADDR_LOC 9
5383: PUSH
5384: LD_LOC 9
5388: PUSH
5389: LD_INT 1
5391: PLUS
5392: PUSH
5393: LD_INT 4
5395: MOD
5396: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLH + shipment , true ) ;
5397: LD_INT 5
5399: PPUSH
5400: LD_INT 3
5402: PUSH
5403: LD_LOC 9
5407: PLUS
5408: PPUSH
5409: LD_INT 1
5411: PPUSH
5412: CALL_OW 55
// end ; enable ;
5416: ENABLE
// end ;
5417: PPOPN 1
5419: END
// every 0 0$7 + 0 0$1.7 do var d ;
5420: GO 5422
5422: DISABLE
5423: LD_INT 0
5425: PPUSH
// begin case tick of 1 .. 1 1$0 :
5426: LD_OWVAR 1
5430: PUSH
5431: LD_INT 1
5433: DOUBLE
5434: GREATEREQUAL
5435: IFFALSE 5443
5437: LD_INT 2100
5439: DOUBLE
5440: LESSEQUAL
5441: IFTRUE 5445
5443: GO 5456
5445: POP
// d := 20 ; 1 1$0 + 1 .. 5 5$0 :
5446: LD_ADDR_VAR 0 1
5450: PUSH
5451: LD_INT 20
5453: ST_TO_ADDR
5454: GO 5639
5456: LD_INT 2100
5458: PUSH
5459: LD_INT 1
5461: PLUS
5462: DOUBLE
5463: GREATEREQUAL
5464: IFFALSE 5472
5466: LD_INT 10500
5468: DOUBLE
5469: LESSEQUAL
5470: IFTRUE 5474
5472: GO 5485
5474: POP
// d := 50 ; 5 5$0 + 1 .. 10 10$0 :
5475: LD_ADDR_VAR 0 1
5479: PUSH
5480: LD_INT 50
5482: ST_TO_ADDR
5483: GO 5639
5485: LD_INT 10500
5487: PUSH
5488: LD_INT 1
5490: PLUS
5491: DOUBLE
5492: GREATEREQUAL
5493: IFFALSE 5501
5495: LD_INT 21000
5497: DOUBLE
5498: LESSEQUAL
5499: IFTRUE 5503
5501: GO 5514
5503: POP
// d := 150 ; 10 10$0 + 1 .. 20 20$0 :
5504: LD_ADDR_VAR 0 1
5508: PUSH
5509: LD_INT 150
5511: ST_TO_ADDR
5512: GO 5639
5514: LD_INT 21000
5516: PUSH
5517: LD_INT 1
5519: PLUS
5520: DOUBLE
5521: GREATEREQUAL
5522: IFFALSE 5530
5524: LD_INT 42000
5526: DOUBLE
5527: LESSEQUAL
5528: IFTRUE 5532
5530: GO 5543
5532: POP
// d := 100 ; 20 20$0 + 1 .. 30 30$0 :
5533: LD_ADDR_VAR 0 1
5537: PUSH
5538: LD_INT 100
5540: ST_TO_ADDR
5541: GO 5639
5543: LD_INT 42000
5545: PUSH
5546: LD_INT 1
5548: PLUS
5549: DOUBLE
5550: GREATEREQUAL
5551: IFFALSE 5559
5553: LD_INT 63000
5555: DOUBLE
5556: LESSEQUAL
5557: IFTRUE 5561
5559: GO 5572
5561: POP
// d := 90 ; 30 30$0 + 1 .. 50 50$0 :
5562: LD_ADDR_VAR 0 1
5566: PUSH
5567: LD_INT 90
5569: ST_TO_ADDR
5570: GO 5639
5572: LD_INT 63000
5574: PUSH
5575: LD_INT 1
5577: PLUS
5578: DOUBLE
5579: GREATEREQUAL
5580: IFFALSE 5588
5582: LD_INT 105000
5584: DOUBLE
5585: LESSEQUAL
5586: IFTRUE 5590
5588: GO 5601
5590: POP
// d := 70 ; 50 50$0 + 1 .. 300 300$0 :
5591: LD_ADDR_VAR 0 1
5595: PUSH
5596: LD_INT 70
5598: ST_TO_ADDR
5599: GO 5639
5601: LD_INT 105000
5603: PUSH
5604: LD_INT 1
5606: PLUS
5607: DOUBLE
5608: GREATEREQUAL
5609: IFFALSE 5617
5611: LD_INT 630000
5613: DOUBLE
5614: LESSEQUAL
5615: IFTRUE 5619
5617: GO 5630
5619: POP
// d := 60 ; else
5620: LD_ADDR_VAR 0 1
5624: PUSH
5625: LD_INT 60
5627: ST_TO_ADDR
5628: GO 5639
5630: POP
// d := 35 ; end ;
5631: LD_ADDR_VAR 0 1
5635: PUSH
5636: LD_INT 35
5638: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5639: LD_INT 1
5641: PPUSH
5642: LD_INT 10000
5644: PPUSH
5645: CALL_OW 12
5649: PUSH
5650: LD_VAR 0 1
5654: PUSH
5655: LD_EXP 10
5659: MUL
5660: LESSEQUAL
5661: IFFALSE 5715
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5663: LD_INT 1
5665: PPUSH
5666: LD_INT 140
5668: PPUSH
5669: CALL_OW 12
5673: PPUSH
5674: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5678: LD_ADDR_LOC 9
5682: PUSH
5683: LD_LOC 9
5687: PUSH
5688: LD_INT 1
5690: PLUS
5691: PUSH
5692: LD_INT 4
5694: MOD
5695: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLHOut + shipment , true ) ;
5696: LD_INT 5
5698: PPUSH
5699: LD_INT 20
5701: PUSH
5702: LD_LOC 9
5706: PLUS
5707: PPUSH
5708: LD_INT 1
5710: PPUSH
5711: CALL_OW 55
// end ; enable ;
5715: ENABLE
// end ;
5716: PPOPN 1
5718: END
// every 1 1$0 trigger def_shipments_density do
5719: LD_EXP 47
5723: IFFALSE 5759
5725: GO 5727
5727: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5728: LD_INT 5
5730: PPUSH
5731: LD_INT 15
5733: PPUSH
5734: LD_INT 1
5736: PPUSH
5737: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5741: LD_INT 6300
5743: PUSH
5744: LD_INT 2100
5746: PUSH
5747: LD_EXP 47
5751: MUL
5752: MINUS
5753: PPUSH
5754: CALL_OW 67
// enable ;
5758: ENABLE
// end ; end_of_file
5759: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5760: LD_VAR 0 1
5764: PPUSH
5765: CALL_OW 266
5769: PUSH
5770: LD_INT 0
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: IN
5780: IFFALSE 5805
// SetBName ( b , @ & GetSide ( b ) ) ;
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_STRING @
5789: PUSH
5790: LD_VAR 0 1
5794: PPUSH
5795: CALL_OW 255
5799: STR
5800: PPUSH
5801: CALL_OW 500
// if def_game_rules then
5805: LD_EXP 42
5809: IFFALSE 5846
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
5811: LD_VAR 0 1
5815: PPUSH
5816: LD_VAR 0 1
5820: PPUSH
5821: CALL_OW 266
5825: PPUSH
5826: LD_VAR 0 1
5830: PPUSH
5831: CALL_OW 255
5835: PPUSH
5836: LD_INT 0
5838: PPUSH
5839: LD_INT 1
5841: PPUSH
5842: CALL 10282 0 5
// end ;
5846: PPOPN 2
5848: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5849: LD_VAR 0 1
5853: PPUSH
5854: CALL_OW 266
5858: PUSH
5859: LD_INT 0
5861: PUSH
5862: LD_INT 1
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: IN
5869: IFFALSE 5894
// SetBName ( b , @ & GetSide ( b ) ) ;
5871: LD_VAR 0 1
5875: PPUSH
5876: LD_STRING @
5878: PUSH
5879: LD_VAR 0 1
5883: PPUSH
5884: CALL_OW 255
5888: STR
5889: PPUSH
5890: CALL_OW 500
// if def_game_rules then
5894: LD_EXP 42
5898: IFFALSE 5937
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
5900: LD_VAR 0 1
5904: PPUSH
5905: LD_VAR 0 1
5909: PPUSH
5910: CALL_OW 266
5914: PPUSH
5915: LD_VAR 0 1
5919: PPUSH
5920: CALL_OW 255
5924: PPUSH
5925: LD_VAR 0 2
5929: PPUSH
5930: LD_INT 1
5932: PPUSH
5933: CALL 10282 0 5
// end ;
5937: PPOPN 3
5939: END
// on VehicleConstructed ( veh , fac ) do var side ;
5940: LD_INT 0
5942: PPUSH
// begin if GetControl ( veh ) = control_apeman then
5943: LD_VAR 0 1
5947: PPUSH
5948: CALL_OW 263
5952: PUSH
5953: LD_INT 5
5955: EQUAL
5956: IFFALSE 6098
// begin side := GetSide ( veh ) ;
5958: LD_ADDR_VAR 0 3
5962: PUSH
5963: LD_VAR 0 1
5967: PPUSH
5968: CALL_OW 255
5972: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
5973: LD_ADDR_EXP 37
5977: PUSH
5978: LD_EXP 37
5982: PPUSH
5983: LD_VAR 0 3
5987: PPUSH
5988: LD_EXP 37
5992: PUSH
5993: LD_VAR 0 3
5997: ARRAY
5998: PPUSH
5999: LD_INT 52
6001: PUSH
6002: EMPTY
6003: LIST
6004: PPUSH
6005: CALL_OW 72
6009: PUSH
6010: LD_INT 22
6012: PUSH
6013: LD_VAR 0 3
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PUSH
6022: LD_INT 2
6024: PUSH
6025: LD_INT 33
6027: PUSH
6028: LD_INT 5
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 25
6037: PUSH
6038: LD_INT 12
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 25
6047: PUSH
6048: LD_INT 15
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 25
6057: PUSH
6058: LD_INT 16
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: PUSH
6065: LD_INT 25
6067: PUSH
6068: LD_INT 17
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PPUSH
6087: CALL_OW 69
6091: UNION
6092: PPUSH
6093: CALL_OW 1
6097: ST_TO_ADDR
// end ; end ;
6098: PPOPN 3
6100: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6101: LD_INT 0
6103: PPUSH
6104: PPUSH
6105: PPUSH
6106: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6107: LD_VAR 0 1
6111: PPUSH
6112: CALL_OW 257
6116: PUSH
6117: LD_INT 12
6119: PUSH
6120: LD_INT 15
6122: PUSH
6123: LD_INT 17
6125: PUSH
6126: LD_INT 16
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: IN
6135: PUSH
6136: LD_VAR 0 1
6140: PPUSH
6141: CALL_OW 263
6145: PUSH
6146: LD_INT 5
6148: EQUAL
6149: OR
6150: IFFALSE 6161
// ApeKilled ( j ) ;
6152: LD_VAR 0 1
6156: PPUSH
6157: CALL 7322 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6161: LD_VAR 0 1
6165: PPUSH
6166: CALL_OW 266
6170: PUSH
6171: LD_INT 0
6173: PUSH
6174: LD_INT 1
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: IN
6181: IFFALSE 6263
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6183: LD_ADDR_VAR 0 4
6187: PUSH
6188: LD_EXP 21
6192: PUSH
6193: LD_VAR 0 1
6197: PPUSH
6198: CALL_OW 255
6202: ARRAY
6203: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6204: LD_ADDR_VAR 0 2
6208: PUSH
6209: LD_EXP 26
6213: PUSH
6214: LD_VAR 0 4
6218: ARRAY
6219: PUSH
6220: LD_INT 1
6222: ARRAY
6223: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6224: LD_ADDR_VAR 0 3
6228: PUSH
6229: LD_EXP 26
6233: PUSH
6234: LD_VAR 0 4
6238: ARRAY
6239: PUSH
6240: LD_INT 2
6242: ARRAY
6243: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6244: LD_VAR 0 2
6248: PPUSH
6249: LD_VAR 0 3
6253: PPUSH
6254: CALL_OW 420
6258: PPUSH
6259: CALL_OW 419
// end ; if def_game_rules then
6263: LD_EXP 42
6267: IFFALSE 6366
// if ( GetType ( j ) = 3 ) then
6269: LD_VAR 0 1
6273: PPUSH
6274: CALL_OW 247
6278: PUSH
6279: LD_INT 3
6281: EQUAL
6282: IFFALSE 6322
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6284: LD_VAR 0 1
6288: PPUSH
6289: LD_VAR 0 1
6293: PPUSH
6294: CALL_OW 266
6298: PPUSH
6299: LD_VAR 0 1
6303: PPUSH
6304: CALL_OW 255
6308: PPUSH
6309: LD_INT 0
6311: PPUSH
6312: LD_INT 1
6314: NEG
6315: PPUSH
6316: CALL 10282 0 5
6320: GO 6366
// if ( GetChassis ( j ) = 25 ) then
6322: LD_VAR 0 1
6326: PPUSH
6327: CALL_OW 265
6331: PUSH
6332: LD_INT 25
6334: EQUAL
6335: IFFALSE 6366
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6337: LD_VAR 0 1
6341: PPUSH
6342: LD_INT 37
6344: PPUSH
6345: LD_VAR 0 1
6349: PPUSH
6350: CALL_OW 255
6354: PPUSH
6355: LD_INT 0
6357: PPUSH
6358: LD_INT 1
6360: NEG
6361: PPUSH
6362: CALL 10282 0 5
// end ;
6366: PPOPN 5
6368: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6369: LD_EXP 42
6373: PUSH
6374: LD_VAR 0 1
6378: PPUSH
6379: CALL_OW 265
6383: PUSH
6384: LD_INT 25
6386: EQUAL
6387: AND
6388: IFFALSE 6420
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6390: LD_VAR 0 1
6394: PPUSH
6395: LD_INT 37
6397: PPUSH
6398: LD_VAR 0 1
6402: PPUSH
6403: CALL_OW 255
6407: PPUSH
6408: LD_VAR 0 3
6412: PPUSH
6413: LD_INT 1
6415: PPUSH
6416: CALL 10282 0 5
// end ;
6420: PPOPN 4
6422: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6423: LD_VAR 0 1
6427: PPUSH
6428: LD_VAR 0 2
6432: PPUSH
6433: LD_VAR 0 3
6437: PPUSH
6438: LD_OWVAR 2
6442: PPUSH
6443: CALL 11769 0 4
6447: PPOPN 3
6449: END
// every 20 20$00 trigger apemanNumber do
6450: LD_EXP 34
6454: IFFALSE 6487
6456: GO 6458
6458: DISABLE
// begin enable ;
6459: ENABLE
// if apeLevel >= 8 then
6460: LD_EXP 39
6464: PUSH
6465: LD_INT 8
6467: GREATEREQUAL
6468: IFFALSE 6473
// disable else
6470: DISABLE
6471: GO 6487
// apeLevel := apeLevel + 1 ;
6473: LD_ADDR_EXP 39
6477: PUSH
6478: LD_EXP 39
6482: PUSH
6483: LD_INT 1
6485: PLUS
6486: ST_TO_ADDR
// end ;
6487: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6488: LD_EXP 34
6492: PUSH
6493: LD_EXP 35
6497: LESS
6498: IFFALSE 6638
6500: GO 6502
6502: DISABLE
6503: LD_INT 0
6505: PPUSH
6506: PPUSH
6507: PPUSH
6508: PPUSH
// begin enable ;
6509: ENABLE
// for i := 1 to apemanPos do
6510: LD_ADDR_VAR 0 1
6514: PUSH
6515: DOUBLE
6516: LD_INT 1
6518: DEC
6519: ST_TO_ADDR
6520: LD_EXP 37
6524: PUSH
6525: FOR_TO
6526: IFFALSE 6636
// begin if apemanPlayerCount [ i ] then
6528: LD_EXP 38
6532: PUSH
6533: LD_VAR 0 1
6537: ARRAY
6538: IFFALSE 6634
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6540: LD_EXP 38
6544: PUSH
6545: LD_VAR 0 1
6549: ARRAY
6550: PUSH
6551: LD_EXP 37
6555: PUSH
6556: LD_VAR 0 1
6560: ARRAY
6561: GREATER
6562: IFFALSE 6634
// begin ape := PrepareApeman ;
6564: LD_ADDR_VAR 0 2
6568: PUSH
6569: CALL 7141 0 0
6573: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6574: LD_VAR 0 2
6578: PPUSH
6579: LD_EXP 40
6583: PUSH
6584: LD_VAR 0 1
6588: ARRAY
6589: PPUSH
6590: LD_INT 0
6592: PPUSH
6593: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6597: LD_ADDR_EXP 37
6601: PUSH
6602: LD_EXP 37
6606: PPUSH
6607: LD_VAR 0 1
6611: PPUSH
6612: LD_EXP 37
6616: PUSH
6617: LD_VAR 0 1
6621: ARRAY
6622: PUSH
6623: LD_VAR 0 2
6627: UNION
6628: PPUSH
6629: CALL_OW 1
6633: ST_TO_ADDR
// end ; end ; end ;
6634: GO 6525
6636: POP
6637: POP
// end ;
6638: PPOPN 4
6640: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6641: LD_INT 0
6643: PPUSH
6644: PPUSH
6645: PPUSH
6646: PPUSH
6647: PPUSH
6648: PPUSH
6649: PPUSH
// playersAmount := 0 ;
6650: LD_ADDR_VAR 0 3
6654: PUSH
6655: LD_INT 0
6657: ST_TO_ADDR
// _apeAreas := [ OpiceSZ , OpiceSV , OpiceJZ , OpiceJV ] ;
6658: LD_ADDR_VAR 0 7
6662: PUSH
6663: LD_INT 11
6665: PUSH
6666: LD_INT 12
6668: PUSH
6669: LD_INT 14
6671: PUSH
6672: LD_INT 13
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6681: LD_ADDR_EXP 40
6685: PUSH
6686: LD_INT 0
6688: PUSH
6689: LD_INT 0
6691: PUSH
6692: LD_INT 0
6694: PUSH
6695: LD_INT 0
6697: PUSH
6698: LD_INT 0
6700: PUSH
6701: LD_INT 0
6703: PUSH
6704: LD_INT 0
6706: PUSH
6707: LD_INT 0
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: ST_TO_ADDR
// for j = 1 to Side_Positions do
6720: LD_ADDR_VAR 0 4
6724: PUSH
6725: DOUBLE
6726: LD_INT 1
6728: DEC
6729: ST_TO_ADDR
6730: LD_EXP 21
6734: PUSH
6735: FOR_TO
6736: IFFALSE 6803
// if Side_Positions [ j ] then
6738: LD_EXP 21
6742: PUSH
6743: LD_VAR 0 4
6747: ARRAY
6748: IFFALSE 6801
// begin playersAmount := playersAmount + 1 ;
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_VAR 0 3
6759: PUSH
6760: LD_INT 1
6762: PLUS
6763: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6764: LD_ADDR_EXP 40
6768: PUSH
6769: LD_EXP 40
6773: PPUSH
6774: LD_VAR 0 4
6778: PPUSH
6779: LD_VAR 0 7
6783: PUSH
6784: LD_EXP 21
6788: PUSH
6789: LD_VAR 0 4
6793: ARRAY
6794: ARRAY
6795: PPUSH
6796: CALL_OW 1
6800: ST_TO_ADDR
// end ;
6801: GO 6735
6803: POP
6804: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6805: LD_ADDR_EXP 36
6809: PUSH
6810: LD_INT 3
6812: PUSH
6813: LD_EXP 6
6817: MUL
6818: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6819: LD_ADDR_EXP 34
6823: PUSH
6824: LD_VAR 0 3
6828: PUSH
6829: LD_EXP 36
6833: MUL
6834: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6835: LD_ADDR_EXP 35
6839: PUSH
6840: LD_EXP 34
6844: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6845: LD_ADDR_EXP 37
6849: PUSH
6850: LD_INT 0
6852: PUSH
6853: LD_INT 0
6855: PUSH
6856: LD_INT 0
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: LD_INT 0
6864: PUSH
6865: LD_INT 0
6867: PUSH
6868: LD_INT 0
6870: PUSH
6871: LD_INT 0
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6884: LD_ADDR_EXP 38
6888: PUSH
6889: LD_INT 0
6891: PUSH
6892: LD_INT 0
6894: PUSH
6895: LD_INT 0
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: LD_INT 0
6903: PUSH
6904: LD_INT 0
6906: PUSH
6907: LD_INT 0
6909: PUSH
6910: LD_INT 0
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: ST_TO_ADDR
// apeLevel := 1 ;
6923: LD_ADDR_EXP 39
6927: PUSH
6928: LD_INT 1
6930: ST_TO_ADDR
// if not apemanNumber then
6931: LD_EXP 34
6935: NOT
6936: IFFALSE 6940
// exit ;
6938: GO 7136
// for i := 1 to apemanPerPlayer do
6940: LD_ADDR_VAR 0 2
6944: PUSH
6945: DOUBLE
6946: LD_INT 1
6948: DEC
6949: ST_TO_ADDR
6950: LD_EXP 36
6954: PUSH
6955: FOR_TO
6956: IFFALSE 7134
// begin for j := 1 to Side_Positions do
6958: LD_ADDR_VAR 0 4
6962: PUSH
6963: DOUBLE
6964: LD_INT 1
6966: DEC
6967: ST_TO_ADDR
6968: LD_EXP 21
6972: PUSH
6973: FOR_TO
6974: IFFALSE 7130
// if Side_Positions [ j ] then
6976: LD_EXP 21
6980: PUSH
6981: LD_VAR 0 4
6985: ARRAY
6986: IFFALSE 7128
// begin pos := Side_Positions [ j ] ;
6988: LD_ADDR_VAR 0 6
6992: PUSH
6993: LD_EXP 21
6997: PUSH
6998: LD_VAR 0 4
7002: ARRAY
7003: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7004: LD_ADDR_EXP 38
7008: PUSH
7009: LD_EXP 38
7013: PPUSH
7014: LD_VAR 0 4
7018: PPUSH
7019: LD_EXP 38
7023: PUSH
7024: LD_VAR 0 4
7028: ARRAY
7029: PUSH
7030: LD_INT 1
7032: PLUS
7033: PPUSH
7034: CALL_OW 1
7038: ST_TO_ADDR
// ape := PrepareApeman ;
7039: LD_ADDR_VAR 0 5
7043: PUSH
7044: CALL 7141 0 0
7048: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7049: LD_ADDR_EXP 37
7053: PUSH
7054: LD_EXP 37
7058: PPUSH
7059: LD_VAR 0 4
7063: PPUSH
7064: LD_EXP 37
7068: PUSH
7069: LD_VAR 0 4
7073: ARRAY
7074: PPUSH
7075: LD_EXP 37
7079: PUSH
7080: LD_VAR 0 4
7084: ARRAY
7085: PUSH
7086: LD_INT 1
7088: PLUS
7089: PPUSH
7090: LD_VAR 0 5
7094: PPUSH
7095: CALL_OW 1
7099: PPUSH
7100: CALL_OW 1
7104: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7105: LD_VAR 0 5
7109: PPUSH
7110: LD_EXP 40
7114: PUSH
7115: LD_VAR 0 4
7119: ARRAY
7120: PPUSH
7121: LD_INT 0
7123: PPUSH
7124: CALL_OW 49
// end ;
7128: GO 6973
7130: POP
7131: POP
// end ;
7132: GO 6955
7134: POP
7135: POP
// end ;
7136: LD_VAR 0 1
7140: RET
// export function PrepareApeman ; var bonus ; begin
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
// uc_side := 0 ;
7145: LD_ADDR_OWVAR 20
7149: PUSH
7150: LD_INT 0
7152: ST_TO_ADDR
// uc_nation := 0 ;
7153: LD_ADDR_OWVAR 21
7157: PUSH
7158: LD_INT 0
7160: ST_TO_ADDR
// InitHc ;
7161: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_INT 1
7172: NEG
7173: PUSH
7174: LD_INT 0
7176: PUSH
7177: LD_INT 1
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_OWVAR 1
7189: PUSH
7190: LD_INT 3
7192: MOD
7193: PUSH
7194: LD_INT 1
7196: PLUS
7197: ARRAY
7198: ST_TO_ADDR
// hc_class := class_apeman ;
7199: LD_ADDR_OWVAR 28
7203: PUSH
7204: LD_INT 12
7206: ST_TO_ADDR
// hc_gallery :=  ;
7207: LD_ADDR_OWVAR 33
7211: PUSH
7212: LD_STRING 
7214: ST_TO_ADDR
// hc_name :=  ;
7215: LD_ADDR_OWVAR 26
7219: PUSH
7220: LD_STRING 
7222: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7223: LD_ADDR_OWVAR 31
7227: PUSH
7228: LD_EXP 39
7232: PUSH
7233: LD_VAR 0 2
7237: PLUS
7238: PUSH
7239: LD_EXP 39
7243: PUSH
7244: LD_VAR 0 2
7248: PLUS
7249: PUSH
7250: LD_EXP 39
7254: PUSH
7255: LD_VAR 0 2
7259: PLUS
7260: PUSH
7261: LD_EXP 39
7265: PUSH
7266: LD_VAR 0 2
7270: PLUS
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7278: LD_ADDR_OWVAR 35
7282: PUSH
7283: LD_INT 10
7285: PUSH
7286: LD_VAR 0 2
7290: MUL
7291: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7292: LD_ADDR_OWVAR 29
7296: PUSH
7297: LD_INT 12
7299: PUSH
7300: LD_INT 10
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: ST_TO_ADDR
// result := CreateHuman ;
7307: LD_ADDR_VAR 0 1
7311: PUSH
7312: CALL_OW 44
7316: ST_TO_ADDR
// end ;
7317: LD_VAR 0 1
7321: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7322: LD_INT 0
7324: PPUSH
7325: PPUSH
7326: PPUSH
// if not ape then
7327: LD_VAR 0 1
7331: NOT
7332: IFFALSE 7336
// exit ;
7334: GO 7461
// side := GetSide ( ape ) ;
7336: LD_ADDR_VAR 0 3
7340: PUSH
7341: LD_VAR 0 1
7345: PPUSH
7346: CALL_OW 255
7350: ST_TO_ADDR
// if not side then
7351: LD_VAR 0 3
7355: NOT
7356: IFFALSE 7410
// begin for i = 1 to apemanPos do
7358: LD_ADDR_VAR 0 4
7362: PUSH
7363: DOUBLE
7364: LD_INT 1
7366: DEC
7367: ST_TO_ADDR
7368: LD_EXP 37
7372: PUSH
7373: FOR_TO
7374: IFFALSE 7408
// if ape in apemanPos [ i ] then
7376: LD_VAR 0 1
7380: PUSH
7381: LD_EXP 37
7385: PUSH
7386: LD_VAR 0 4
7390: ARRAY
7391: IN
7392: IFFALSE 7406
// begin side := i ;
7394: LD_ADDR_VAR 0 3
7398: PUSH
7399: LD_VAR 0 4
7403: ST_TO_ADDR
// break ;
7404: GO 7408
// end ;
7406: GO 7373
7408: POP
7409: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7410: LD_ADDR_EXP 37
7414: PUSH
7415: LD_EXP 37
7419: PPUSH
7420: LD_VAR 0 3
7424: PPUSH
7425: LD_EXP 37
7429: PUSH
7430: LD_VAR 0 3
7434: ARRAY
7435: PUSH
7436: LD_VAR 0 1
7440: DIFF
7441: PPUSH
7442: CALL_OW 1
7446: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7447: LD_ADDR_EXP 34
7451: PUSH
7452: LD_EXP 34
7456: PUSH
7457: LD_INT 1
7459: MINUS
7460: ST_TO_ADDR
// end ; end_of_file
7461: LD_VAR 0 2
7465: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7466: LD_INT 0
7468: PPUSH
7469: PPUSH
// for un in battle_flags_id do
7470: LD_ADDR_VAR 0 2
7474: PUSH
7475: LD_EXP 28
7479: PUSH
7480: FOR_IN
7481: IFFALSE 7556
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7483: LD_VAR 0 2
7487: PPUSH
7488: LD_INT 1
7490: PUSH
7491: LD_LOC 12
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 2
7502: PUSH
7503: LD_LOC 12
7507: PUSH
7508: LD_INT 2
7510: DIV
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: LD_LOC 12
7523: PUSH
7524: LD_INT 5
7526: DIV
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 20
7534: PUSH
7535: LD_LOC 12
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: PPUSH
7550: CALL_OW 423
7554: GO 7480
7556: POP
7557: POP
// end ;
7558: LD_VAR 0 1
7562: RET
// every 0 0$0.1 do var un ;
7563: GO 7565
7565: DISABLE
7566: LD_INT 0
7568: PPUSH
// begin if not def_morale_flags then
7569: LD_EXP 51
7573: NOT
7574: IFFALSE 7578
// exit ;
7576: GO 7655
// if not morale_decreasing_time then
7578: LD_EXP 11
7582: NOT
7583: IFFALSE 7587
// exit ;
7585: GO 7655
// strength = 100 ;
7587: LD_ADDR_LOC 12
7591: PUSH
7592: LD_INT 100
7594: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7595: LD_EXP 11
7599: PPUSH
7600: CALL_OW 67
// strength := strength - 1 ;
7604: LD_ADDR_LOC 12
7608: PUSH
7609: LD_LOC 12
7613: PUSH
7614: LD_INT 1
7616: MINUS
7617: ST_TO_ADDR
// Update_Flags ;
7618: CALL 7466 0 0
// until not strength ;
7622: LD_LOC 12
7626: NOT
7627: IFFALSE 7595
// for un in battle_flags_id do
7629: LD_ADDR_VAR 0 1
7633: PUSH
7634: LD_EXP 28
7638: PUSH
7639: FOR_IN
7640: IFFALSE 7653
// KillBattleFlag ( un ) ;
7642: LD_VAR 0 1
7646: PPUSH
7647: CALL_OW 419
7651: GO 7639
7653: POP
7654: POP
// end ; end_of_file
7655: PPOPN 1
7657: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7658: LD_INT 0
7660: PPUSH
7661: PPUSH
// if ( not IAmSpec ) then
7662: CALL_OW 531
7666: NOT
7667: IFFALSE 7683
// Result := Limits_Info ^  ;
7669: LD_ADDR_VAR 0 1
7673: PUSH
7674: LD_LOC 24
7678: PUSH
7679: LD_STRING 
7681: ADD
7682: ST_TO_ADDR
// for i := 1 to 8 do
7683: LD_ADDR_VAR 0 2
7687: PUSH
7688: DOUBLE
7689: LD_INT 1
7691: DEC
7692: ST_TO_ADDR
7693: LD_INT 8
7695: PUSH
7696: FOR_TO
7697: IFFALSE 7742
// if Cheaters [ i ] then
7699: LD_LOC 25
7703: PUSH
7704: LD_VAR 0 2
7708: ARRAY
7709: IFFALSE 7740
// Result := Result ^ [ #Cheater , i , i ] ;
7711: LD_ADDR_VAR 0 1
7715: PUSH
7716: LD_VAR 0 1
7720: PUSH
7721: LD_STRING #Cheater
7723: PUSH
7724: LD_VAR 0 2
7728: PUSH
7729: LD_VAR 0 2
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: ADD
7739: ST_TO_ADDR
7740: GO 7696
7742: POP
7743: POP
// end ;
7744: LD_VAR 0 1
7748: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7749: LD_INT 0
7751: PPUSH
7752: PPUSH
7753: PPUSH
7754: PPUSH
7755: PPUSH
// case Game_Type of 10 :
7756: LD_EXP 41
7760: PUSH
7761: LD_INT 10
7763: DOUBLE
7764: EQUAL
7765: IFTRUE 7769
7767: GO 7780
7769: POP
// def_game_rules := 1 ; 11 :
7770: LD_ADDR_EXP 42
7774: PUSH
7775: LD_INT 1
7777: ST_TO_ADDR
7778: GO 7800
7780: LD_INT 11
7782: DOUBLE
7783: EQUAL
7784: IFTRUE 7788
7786: GO 7799
7788: POP
// def_game_rules := 3 ; end ;
7789: LD_ADDR_EXP 42
7793: PUSH
7794: LD_INT 3
7796: ST_TO_ADDR
7797: GO 7800
7799: POP
// case def_game_rules of 0 :
7800: LD_EXP 42
7804: PUSH
7805: LD_INT 0
7807: DOUBLE
7808: EQUAL
7809: IFTRUE 7813
7811: GO 7818
7813: POP
// exit ; 1 :
7814: GO 9876
7816: GO 9776
7818: LD_INT 1
7820: DOUBLE
7821: EQUAL
7822: IFTRUE 7826
7824: GO 8042
7826: POP
// begin def_base_level := 2 ;
7827: LD_ADDR_EXP 43
7831: PUSH
7832: LD_INT 2
7834: ST_TO_ADDR
// def_amount_of_people := 2 ;
7835: LD_ADDR_EXP 44
7839: PUSH
7840: LD_INT 2
7842: ST_TO_ADDR
// def_skill_level := 1 ;
7843: LD_ADDR_EXP 45
7847: PUSH
7848: LD_INT 1
7850: ST_TO_ADDR
// def_starting_resources := 2 ;
7851: LD_ADDR_EXP 46
7855: PUSH
7856: LD_INT 2
7858: ST_TO_ADDR
// def_shipments_density := 1 ;
7859: LD_ADDR_EXP 47
7863: PUSH
7864: LD_INT 1
7866: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7867: LD_ADDR_EXP 48
7871: PUSH
7872: LD_INT 0
7874: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7875: LD_ADDR_EXP 49
7879: PUSH
7880: LD_INT 1
7882: ST_TO_ADDR
// def_shared_vision := 1 ;
7883: LD_ADDR_EXP 50
7887: PUSH
7888: LD_INT 1
7890: ST_TO_ADDR
// def_morale_flags := 3 ;
7891: LD_ADDR_EXP 51
7895: PUSH
7896: LD_INT 3
7898: ST_TO_ADDR
// def_siberite_detection := 1 ;
7899: LD_ADDR_EXP 52
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// def_people_respawning := 1 ;
7907: LD_ADDR_EXP 53
7911: PUSH
7912: LD_INT 1
7914: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7915: LD_ADDR_EXP 54
7919: PUSH
7920: LD_INT 1
7922: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7923: LD_ADDR_EXP 55
7927: PUSH
7928: LD_INT 0
7930: ST_TO_ADDR
// def_builduptime := 2 ;
7931: LD_ADDR_EXP 56
7935: PUSH
7936: LD_INT 2
7938: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
7939: LD_ADDR_VAR 0 2
7943: PUSH
7944: EMPTY
7945: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7946: LD_ADDR_VAR 0 3
7950: PUSH
7951: EMPTY
7952: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7953: LD_ADDR_LOC 19
7957: PUSH
7958: EMPTY
7959: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7960: LD_ADDR_LOC 20
7964: PUSH
7965: EMPTY
7966: ST_TO_ADDR
// Banned_Controls := [ ] ;
7967: LD_ADDR_LOC 21
7971: PUSH
7972: EMPTY
7973: ST_TO_ADDR
// Banned_Engines := [ ] ;
7974: LD_ADDR_LOC 22
7978: PUSH
7979: EMPTY
7980: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7981: LD_ADDR_LOC 17
7985: PUSH
7986: LD_INT 37
7988: PUSH
7989: EMPTY
7990: LIST
7991: PUSH
7992: LD_INT 4
7994: PUSH
7995: LD_INT 5
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PUSH
8002: LD_INT 31
8004: PUSH
8005: LD_INT 32
8007: PUSH
8008: LD_INT 33
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: LIST
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: LIST
8020: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8021: LD_ADDR_LOC 18
8025: PUSH
8026: LD_INT 2
8028: PUSH
8029: LD_INT 2
8031: PUSH
8032: LD_INT 4
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: ST_TO_ADDR
// end ; 2 :
8040: GO 9776
8042: LD_INT 2
8044: DOUBLE
8045: EQUAL
8046: IFTRUE 8050
8048: GO 8259
8050: POP
// begin def_base_level := 1 ;
8051: LD_ADDR_EXP 43
8055: PUSH
8056: LD_INT 1
8058: ST_TO_ADDR
// def_amount_of_people := 2 ;
8059: LD_ADDR_EXP 44
8063: PUSH
8064: LD_INT 2
8066: ST_TO_ADDR
// def_skill_level := 3 ;
8067: LD_ADDR_EXP 45
8071: PUSH
8072: LD_INT 3
8074: ST_TO_ADDR
// def_starting_resources := 3 ;
8075: LD_ADDR_EXP 46
8079: PUSH
8080: LD_INT 3
8082: ST_TO_ADDR
// def_shipments_density := 2 ;
8083: LD_ADDR_EXP 47
8087: PUSH
8088: LD_INT 2
8090: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8091: LD_ADDR_EXP 48
8095: PUSH
8096: LD_INT 1
8098: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8099: LD_ADDR_EXP 49
8103: PUSH
8104: LD_INT 2
8106: ST_TO_ADDR
// def_shared_vision := 1 ;
8107: LD_ADDR_EXP 50
8111: PUSH
8112: LD_INT 1
8114: ST_TO_ADDR
// def_morale_flags := 0 ;
8115: LD_ADDR_EXP 51
8119: PUSH
8120: LD_INT 0
8122: ST_TO_ADDR
// def_siberite_detection := 1 ;
8123: LD_ADDR_EXP 52
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// def_people_respawning := 0 ;
8131: LD_ADDR_EXP 53
8135: PUSH
8136: LD_INT 0
8138: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8139: LD_ADDR_EXP 54
8143: PUSH
8144: LD_INT 0
8146: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8147: LD_ADDR_EXP 55
8151: PUSH
8152: LD_INT 0
8154: ST_TO_ADDR
// def_builduptime := 2 ;
8155: LD_ADDR_EXP 56
8159: PUSH
8160: LD_INT 2
8162: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8163: LD_ADDR_VAR 0 2
8167: PUSH
8168: LD_INT 1
8170: PUSH
8171: EMPTY
8172: LIST
8173: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8174: LD_ADDR_VAR 0 3
8178: PUSH
8179: EMPTY
8180: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8181: LD_ADDR_LOC 19
8185: PUSH
8186: EMPTY
8187: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8188: LD_ADDR_LOC 20
8192: PUSH
8193: EMPTY
8194: ST_TO_ADDR
// Banned_Controls := [ ] ;
8195: LD_ADDR_LOC 21
8199: PUSH
8200: EMPTY
8201: ST_TO_ADDR
// Banned_Engines := [ ] ;
8202: LD_ADDR_LOC 22
8206: PUSH
8207: EMPTY
8208: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8209: LD_ADDR_LOC 17
8213: PUSH
8214: LD_INT 4
8216: PUSH
8217: LD_INT 5
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: PUSH
8224: LD_INT 31
8226: PUSH
8227: LD_INT 32
8229: PUSH
8230: LD_INT 33
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8242: LD_ADDR_LOC 18
8246: PUSH
8247: LD_INT 1
8249: PUSH
8250: LD_INT 2
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: ST_TO_ADDR
// end ; 3 :
8257: GO 9776
8259: LD_INT 3
8261: DOUBLE
8262: EQUAL
8263: IFTRUE 8267
8265: GO 8510
8267: POP
// begin def_base_level := 1 ;
8268: LD_ADDR_EXP 43
8272: PUSH
8273: LD_INT 1
8275: ST_TO_ADDR
// def_amount_of_people := 2 ;
8276: LD_ADDR_EXP 44
8280: PUSH
8281: LD_INT 2
8283: ST_TO_ADDR
// def_skill_level := 3 ;
8284: LD_ADDR_EXP 45
8288: PUSH
8289: LD_INT 3
8291: ST_TO_ADDR
// def_starting_resources := 3 ;
8292: LD_ADDR_EXP 46
8296: PUSH
8297: LD_INT 3
8299: ST_TO_ADDR
// def_shipments_density := 1 ;
8300: LD_ADDR_EXP 47
8304: PUSH
8305: LD_INT 1
8307: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8308: LD_ADDR_EXP 48
8312: PUSH
8313: LD_INT 0
8315: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8316: LD_ADDR_EXP 49
8320: PUSH
8321: LD_INT 1
8323: ST_TO_ADDR
// def_shared_vision := 1 ;
8324: LD_ADDR_EXP 50
8328: PUSH
8329: LD_INT 1
8331: ST_TO_ADDR
// def_morale_flags := 0 ;
8332: LD_ADDR_EXP 51
8336: PUSH
8337: LD_INT 0
8339: ST_TO_ADDR
// def_siberite_detection := 1 ;
8340: LD_ADDR_EXP 52
8344: PUSH
8345: LD_INT 1
8347: ST_TO_ADDR
// def_people_respawning := 0 ;
8348: LD_ADDR_EXP 53
8352: PUSH
8353: LD_INT 0
8355: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8356: LD_ADDR_EXP 54
8360: PUSH
8361: LD_INT 2
8363: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8364: LD_ADDR_EXP 55
8368: PUSH
8369: LD_INT 0
8371: ST_TO_ADDR
// def_builduptime := 1 ;
8372: LD_ADDR_EXP 56
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8380: LD_ADDR_VAR 0 2
8384: PUSH
8385: LD_INT 23
8387: PUSH
8388: EMPTY
8389: LIST
8390: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8391: LD_ADDR_VAR 0 3
8395: PUSH
8396: LD_INT 2
8398: PUSH
8399: LD_INT 37
8401: PUSH
8402: LD_INT 32
8404: PUSH
8405: LD_INT 33
8407: PUSH
8408: LD_INT 36
8410: PUSH
8411: LD_INT 16
8413: PUSH
8414: LD_INT 23
8416: PUSH
8417: LD_INT 21
8419: PUSH
8420: LD_INT 18
8422: PUSH
8423: LD_INT 22
8425: PUSH
8426: LD_INT 20
8428: PUSH
8429: LD_INT 19
8431: PUSH
8432: LD_INT 25
8434: PUSH
8435: LD_INT 17
8437: PUSH
8438: LD_INT 24
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8458: LD_ADDR_LOC 19
8462: PUSH
8463: EMPTY
8464: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8465: LD_ADDR_LOC 20
8469: PUSH
8470: EMPTY
8471: ST_TO_ADDR
// Banned_Controls := [ ] ;
8472: LD_ADDR_LOC 21
8476: PUSH
8477: EMPTY
8478: ST_TO_ADDR
// Banned_Engines := [ ] ;
8479: LD_ADDR_LOC 22
8483: PUSH
8484: EMPTY
8485: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8486: LD_ADDR_LOC 17
8490: PUSH
8491: EMPTY
8492: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8493: LD_ADDR_LOC 18
8497: PUSH
8498: EMPTY
8499: ST_TO_ADDR
// No_Mechs := true ;
8500: LD_ADDR_EXP 57
8504: PUSH
8505: LD_INT 1
8507: ST_TO_ADDR
// end ; 4 :
8508: GO 9776
8510: LD_INT 4
8512: DOUBLE
8513: EQUAL
8514: IFTRUE 8518
8516: GO 8693
8518: POP
// begin def_base_level := 1 ;
8519: LD_ADDR_EXP 43
8523: PUSH
8524: LD_INT 1
8526: ST_TO_ADDR
// def_amount_of_people := 2 ;
8527: LD_ADDR_EXP 44
8531: PUSH
8532: LD_INT 2
8534: ST_TO_ADDR
// def_skill_level := 3 ;
8535: LD_ADDR_EXP 45
8539: PUSH
8540: LD_INT 3
8542: ST_TO_ADDR
// def_starting_resources := 3 ;
8543: LD_ADDR_EXP 46
8547: PUSH
8548: LD_INT 3
8550: ST_TO_ADDR
// def_shipments_density := 2 ;
8551: LD_ADDR_EXP 47
8555: PUSH
8556: LD_INT 2
8558: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8559: LD_ADDR_EXP 48
8563: PUSH
8564: LD_INT 1
8566: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8567: LD_ADDR_EXP 49
8571: PUSH
8572: LD_INT 2
8574: ST_TO_ADDR
// def_shared_vision := 1 ;
8575: LD_ADDR_EXP 50
8579: PUSH
8580: LD_INT 1
8582: ST_TO_ADDR
// def_morale_flags := 0 ;
8583: LD_ADDR_EXP 51
8587: PUSH
8588: LD_INT 0
8590: ST_TO_ADDR
// def_siberite_detection := 1 ;
8591: LD_ADDR_EXP 52
8595: PUSH
8596: LD_INT 1
8598: ST_TO_ADDR
// def_people_respawning := 0 ;
8599: LD_ADDR_EXP 53
8603: PUSH
8604: LD_INT 0
8606: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8607: LD_ADDR_EXP 54
8611: PUSH
8612: LD_INT 0
8614: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8615: LD_ADDR_EXP 55
8619: PUSH
8620: LD_INT 1
8622: ST_TO_ADDR
// def_builduptime := 3 ;
8623: LD_ADDR_EXP 56
8627: PUSH
8628: LD_INT 3
8630: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_INT 1
8638: PUSH
8639: EMPTY
8640: LIST
8641: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8642: LD_ADDR_VAR 0 3
8646: PUSH
8647: EMPTY
8648: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8649: LD_ADDR_LOC 19
8653: PUSH
8654: EMPTY
8655: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8656: LD_ADDR_LOC 20
8660: PUSH
8661: EMPTY
8662: ST_TO_ADDR
// Banned_Controls := [ ] ;
8663: LD_ADDR_LOC 21
8667: PUSH
8668: EMPTY
8669: ST_TO_ADDR
// Banned_Engines := [ ] ;
8670: LD_ADDR_LOC 22
8674: PUSH
8675: EMPTY
8676: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8677: LD_ADDR_LOC 17
8681: PUSH
8682: EMPTY
8683: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8684: LD_ADDR_LOC 18
8688: PUSH
8689: EMPTY
8690: ST_TO_ADDR
// end ; 5 :
8691: GO 9776
8693: LD_INT 5
8695: DOUBLE
8696: EQUAL
8697: IFTRUE 8701
8699: GO 8950
8701: POP
// begin def_base_level := 0 ;
8702: LD_ADDR_EXP 43
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// def_amount_of_people := 0 ;
8710: LD_ADDR_EXP 44
8714: PUSH
8715: LD_INT 0
8717: ST_TO_ADDR
// def_skill_level := 0 ;
8718: LD_ADDR_EXP 45
8722: PUSH
8723: LD_INT 0
8725: ST_TO_ADDR
// def_starting_resources := 0 ;
8726: LD_ADDR_EXP 46
8730: PUSH
8731: LD_INT 0
8733: ST_TO_ADDR
// def_shipments_density := 0 ;
8734: LD_ADDR_EXP 47
8738: PUSH
8739: LD_INT 0
8741: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8742: LD_ADDR_EXP 48
8746: PUSH
8747: LD_INT 0
8749: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8750: LD_ADDR_EXP 49
8754: PUSH
8755: LD_INT 0
8757: ST_TO_ADDR
// def_shared_vision := 1 ;
8758: LD_ADDR_EXP 50
8762: PUSH
8763: LD_INT 1
8765: ST_TO_ADDR
// def_morale_flags := 0 ;
8766: LD_ADDR_EXP 51
8770: PUSH
8771: LD_INT 0
8773: ST_TO_ADDR
// def_siberite_detection := 0 ;
8774: LD_ADDR_EXP 52
8778: PUSH
8779: LD_INT 0
8781: ST_TO_ADDR
// def_people_respawning := 1 ;
8782: LD_ADDR_EXP 53
8786: PUSH
8787: LD_INT 1
8789: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8790: LD_ADDR_EXP 54
8794: PUSH
8795: LD_INT 1
8797: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8798: LD_ADDR_EXP 55
8802: PUSH
8803: LD_INT 0
8805: ST_TO_ADDR
// def_builduptime := 0 ;
8806: LD_ADDR_EXP 56
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8814: LD_ADDR_VAR 0 2
8818: PUSH
8819: LD_INT 10
8821: PUSH
8822: LD_INT 3
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8829: LD_ADDR_VAR 0 3
8833: PUSH
8834: LD_INT 12
8836: PUSH
8837: LD_INT 11
8839: PUSH
8840: LD_INT 14
8842: PUSH
8843: LD_INT 13
8845: PUSH
8846: LD_INT 5
8848: PUSH
8849: LD_INT 24
8851: PUSH
8852: LD_INT 21
8854: PUSH
8855: LD_INT 33
8857: PUSH
8858: LD_INT 36
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8872: LD_ADDR_LOC 19
8876: PUSH
8877: LD_INT 31
8879: PUSH
8880: EMPTY
8881: LIST
8882: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8883: LD_ADDR_LOC 20
8887: PUSH
8888: EMPTY
8889: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8890: LD_ADDR_LOC 21
8894: PUSH
8895: LD_INT 2
8897: PUSH
8898: EMPTY
8899: LIST
8900: ST_TO_ADDR
// Banned_Engines := [ ] ;
8901: LD_ADDR_LOC 22
8905: PUSH
8906: EMPTY
8907: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8908: LD_ADDR_LOC 17
8912: PUSH
8913: LD_INT 4
8915: PUSH
8916: EMPTY
8917: LIST
8918: PUSH
8919: LD_INT 31
8921: PUSH
8922: LD_INT 32
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
8933: LD_ADDR_LOC 18
8937: PUSH
8938: LD_INT 1
8940: PUSH
8941: LD_INT 1
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: ST_TO_ADDR
// end ; 6 :
8948: GO 9776
8950: LD_INT 6
8952: DOUBLE
8953: EQUAL
8954: IFTRUE 8958
8956: GO 9161
8958: POP
// begin def_base_level := 1 ;
8959: LD_ADDR_EXP 43
8963: PUSH
8964: LD_INT 1
8966: ST_TO_ADDR
// def_amount_of_people := 2 ;
8967: LD_ADDR_EXP 44
8971: PUSH
8972: LD_INT 2
8974: ST_TO_ADDR
// def_skill_level := 3 ;
8975: LD_ADDR_EXP 45
8979: PUSH
8980: LD_INT 3
8982: ST_TO_ADDR
// def_starting_resources := 3 ;
8983: LD_ADDR_EXP 46
8987: PUSH
8988: LD_INT 3
8990: ST_TO_ADDR
// def_shipments_density := 1 ;
8991: LD_ADDR_EXP 47
8995: PUSH
8996: LD_INT 1
8998: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8999: LD_ADDR_EXP 48
9003: PUSH
9004: LD_INT 0
9006: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9007: LD_ADDR_EXP 49
9011: PUSH
9012: LD_INT 1
9014: ST_TO_ADDR
// def_shared_vision := 1 ;
9015: LD_ADDR_EXP 50
9019: PUSH
9020: LD_INT 1
9022: ST_TO_ADDR
// def_morale_flags := 0 ;
9023: LD_ADDR_EXP 51
9027: PUSH
9028: LD_INT 0
9030: ST_TO_ADDR
// def_siberite_detection := 1 ;
9031: LD_ADDR_EXP 52
9035: PUSH
9036: LD_INT 1
9038: ST_TO_ADDR
// def_people_respawning := 2 ;
9039: LD_ADDR_EXP 53
9043: PUSH
9044: LD_INT 2
9046: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9047: LD_ADDR_EXP 54
9051: PUSH
9052: LD_INT 1
9054: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9055: LD_ADDR_EXP 55
9059: PUSH
9060: LD_INT 0
9062: ST_TO_ADDR
// def_builduptime := 1 ;
9063: LD_ADDR_EXP 56
9067: PUSH
9068: LD_INT 1
9070: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9071: LD_ADDR_VAR 0 2
9075: PUSH
9076: LD_INT 23
9078: PUSH
9079: EMPTY
9080: LIST
9081: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9082: LD_ADDR_VAR 0 3
9086: PUSH
9087: LD_INT 2
9089: PUSH
9090: LD_INT 37
9092: PUSH
9093: LD_INT 31
9095: PUSH
9096: LD_INT 32
9098: PUSH
9099: LD_INT 33
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9109: LD_ADDR_LOC 19
9113: PUSH
9114: EMPTY
9115: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9116: LD_ADDR_LOC 20
9120: PUSH
9121: EMPTY
9122: ST_TO_ADDR
// Banned_Controls := [ ] ;
9123: LD_ADDR_LOC 21
9127: PUSH
9128: EMPTY
9129: ST_TO_ADDR
// Banned_Engines := [ ] ;
9130: LD_ADDR_LOC 22
9134: PUSH
9135: EMPTY
9136: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9137: LD_ADDR_LOC 17
9141: PUSH
9142: EMPTY
9143: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9144: LD_ADDR_LOC 18
9148: PUSH
9149: EMPTY
9150: ST_TO_ADDR
// No_Mechs := true ;
9151: LD_ADDR_EXP 57
9155: PUSH
9156: LD_INT 1
9158: ST_TO_ADDR
// end ; 7 :
9159: GO 9776
9161: LD_INT 7
9163: DOUBLE
9164: EQUAL
9165: IFTRUE 9169
9167: GO 9367
9169: POP
// begin def_base_level := 1 ;
9170: LD_ADDR_EXP 43
9174: PUSH
9175: LD_INT 1
9177: ST_TO_ADDR
// def_amount_of_people := 2 ;
9178: LD_ADDR_EXP 44
9182: PUSH
9183: LD_INT 2
9185: ST_TO_ADDR
// def_skill_level := 3 ;
9186: LD_ADDR_EXP 45
9190: PUSH
9191: LD_INT 3
9193: ST_TO_ADDR
// def_starting_resources := 3 ;
9194: LD_ADDR_EXP 46
9198: PUSH
9199: LD_INT 3
9201: ST_TO_ADDR
// def_shipments_density := 1 ;
9202: LD_ADDR_EXP 47
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9210: LD_ADDR_EXP 48
9214: PUSH
9215: LD_INT 1
9217: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9218: LD_ADDR_EXP 49
9222: PUSH
9223: LD_INT 2
9225: ST_TO_ADDR
// def_shared_vision := 1 ;
9226: LD_ADDR_EXP 50
9230: PUSH
9231: LD_INT 1
9233: ST_TO_ADDR
// def_morale_flags := 0 ;
9234: LD_ADDR_EXP 51
9238: PUSH
9239: LD_INT 0
9241: ST_TO_ADDR
// def_siberite_detection := 1 ;
9242: LD_ADDR_EXP 52
9246: PUSH
9247: LD_INT 1
9249: ST_TO_ADDR
// def_people_respawning := 0 ;
9250: LD_ADDR_EXP 53
9254: PUSH
9255: LD_INT 0
9257: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9258: LD_ADDR_EXP 54
9262: PUSH
9263: LD_INT 1
9265: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9266: LD_ADDR_EXP 55
9270: PUSH
9271: LD_INT 0
9273: ST_TO_ADDR
// def_builduptime := 3 ;
9274: LD_ADDR_EXP 56
9278: PUSH
9279: LD_INT 3
9281: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9282: LD_ADDR_VAR 0 2
9286: PUSH
9287: LD_INT 23
9289: PUSH
9290: EMPTY
9291: LIST
9292: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9293: LD_ADDR_VAR 0 3
9297: PUSH
9298: LD_INT 37
9300: PUSH
9301: EMPTY
9302: LIST
9303: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9304: LD_ADDR_LOC 19
9308: PUSH
9309: EMPTY
9310: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9311: LD_ADDR_LOC 20
9315: PUSH
9316: EMPTY
9317: ST_TO_ADDR
// Banned_Controls := [ ] ;
9318: LD_ADDR_LOC 21
9322: PUSH
9323: EMPTY
9324: ST_TO_ADDR
// Banned_Engines := [ ] ;
9325: LD_ADDR_LOC 22
9329: PUSH
9330: EMPTY
9331: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9332: LD_ADDR_LOC 17
9336: PUSH
9337: LD_INT 31
9339: PUSH
9340: LD_INT 32
9342: PUSH
9343: LD_INT 33
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: PUSH
9351: EMPTY
9352: LIST
9353: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9354: LD_ADDR_LOC 18
9358: PUSH
9359: LD_INT 10
9361: PUSH
9362: EMPTY
9363: LIST
9364: ST_TO_ADDR
// end ; 8 :
9365: GO 9776
9367: LD_INT 8
9369: DOUBLE
9370: EQUAL
9371: IFTRUE 9375
9373: GO 9775
9375: POP
// begin def_base_level := 0 ;
9376: LD_ADDR_EXP 43
9380: PUSH
9381: LD_INT 0
9383: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9384: LD_ADDR_EXP 44
9388: PUSH
9389: LD_INT 0
9391: PPUSH
9392: LD_INT 1
9394: PPUSH
9395: CALL_OW 12
9399: ST_TO_ADDR
// def_skill_level := 0 ;
9400: LD_ADDR_EXP 45
9404: PUSH
9405: LD_INT 0
9407: ST_TO_ADDR
// def_starting_resources := 2 ;
9408: LD_ADDR_EXP 46
9412: PUSH
9413: LD_INT 2
9415: ST_TO_ADDR
// def_shipments_density := 1 ;
9416: LD_ADDR_EXP 47
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9424: LD_ADDR_EXP 48
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9432: LD_ADDR_EXP 49
9436: PUSH
9437: LD_INT 0
9439: ST_TO_ADDR
// def_shared_vision := 1 ;
9440: LD_ADDR_EXP 50
9444: PUSH
9445: LD_INT 1
9447: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9448: LD_ADDR_EXP 51
9452: PUSH
9453: LD_INT 0
9455: PPUSH
9456: LD_INT 2
9458: PPUSH
9459: CALL_OW 12
9463: ST_TO_ADDR
// def_siberite_detection := 0 ;
9464: LD_ADDR_EXP 52
9468: PUSH
9469: LD_INT 0
9471: ST_TO_ADDR
// def_people_respawning := 0 ;
9472: LD_ADDR_EXP 53
9476: PUSH
9477: LD_INT 0
9479: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9480: LD_ADDR_EXP 54
9484: PUSH
9485: LD_INT 2
9487: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9488: LD_ADDR_EXP 55
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// def_builduptime := 0 ;
9496: LD_ADDR_EXP 56
9500: PUSH
9501: LD_INT 0
9503: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9504: LD_ADDR_VAR 0 2
9508: PUSH
9509: LD_INT 23
9511: PUSH
9512: LD_INT 20
9514: PUSH
9515: LD_INT 40
9517: PUSH
9518: LD_INT 47
9520: PUSH
9521: LD_INT 46
9523: PUSH
9524: LD_INT 39
9526: PUSH
9527: LD_INT 71
9529: PUSH
9530: LD_INT 34
9532: PUSH
9533: LD_INT 41
9535: PUSH
9536: LD_INT 44
9538: PUSH
9539: LD_INT 17
9541: PUSH
9542: LD_INT 16
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9559: LD_ADDR_VAR 0 3
9563: PUSH
9564: LD_INT 37
9566: PUSH
9567: LD_INT 5
9569: PUSH
9570: LD_INT 13
9572: PUSH
9573: LD_INT 34
9575: PUSH
9576: LD_INT 12
9578: PUSH
9579: LD_INT 15
9581: PUSH
9582: LD_INT 11
9584: PUSH
9585: LD_INT 14
9587: PUSH
9588: LD_INT 29
9590: PUSH
9591: LD_INT 30
9593: PUSH
9594: LD_INT 28
9596: PUSH
9597: LD_INT 24
9599: PUSH
9600: LD_INT 25
9602: PUSH
9603: LD_INT 20
9605: PUSH
9606: LD_INT 21
9608: PUSH
9609: LD_INT 22
9611: PUSH
9612: LD_INT 36
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9634: LD_ADDR_LOC 19
9638: PUSH
9639: EMPTY
9640: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9641: LD_ADDR_LOC 20
9645: PUSH
9646: LD_INT 14
9648: PUSH
9649: EMPTY
9650: LIST
9651: ST_TO_ADDR
// Banned_Controls := [ ] ;
9652: LD_ADDR_LOC 21
9656: PUSH
9657: EMPTY
9658: ST_TO_ADDR
// Banned_Engines := [ ] ;
9659: LD_ADDR_LOC 22
9663: PUSH
9664: EMPTY
9665: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9666: LD_ADDR_LOC 17
9670: PUSH
9671: LD_INT 31
9673: PUSH
9674: LD_INT 32
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 4
9683: PUSH
9684: EMPTY
9685: LIST
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9691: LD_ADDR_LOC 18
9695: PUSH
9696: LD_INT 2
9698: PUSH
9699: LD_INT 1
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: ST_TO_ADDR
// for i := 1 to 8 do
9706: LD_ADDR_VAR 0 4
9710: PUSH
9711: DOUBLE
9712: LD_INT 1
9714: DEC
9715: ST_TO_ADDR
9716: LD_INT 8
9718: PUSH
9719: FOR_TO
9720: IFFALSE 9771
// if ( Side_Nations [ i ] = 3 ) then
9722: LD_EXP 22
9726: PUSH
9727: LD_VAR 0 4
9731: ARRAY
9732: PUSH
9733: LD_INT 3
9735: EQUAL
9736: IFFALSE 9769
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9738: LD_ADDR_EXP 22
9742: PUSH
9743: LD_EXP 22
9747: PPUSH
9748: LD_VAR 0 4
9752: PPUSH
9753: LD_INT 1
9755: PPUSH
9756: LD_INT 2
9758: PPUSH
9759: CALL_OW 12
9763: PPUSH
9764: CALL_OW 1
9768: ST_TO_ADDR
9769: GO 9719
9771: POP
9772: POP
// end ; end ;
9773: GO 9776
9775: POP
// for i := 1 to 8 do
9776: LD_ADDR_VAR 0 4
9780: PUSH
9781: DOUBLE
9782: LD_INT 1
9784: DEC
9785: ST_TO_ADDR
9786: LD_INT 8
9788: PUSH
9789: FOR_TO
9790: IFFALSE 9874
// if Side_Positions [ i ] then
9792: LD_EXP 21
9796: PUSH
9797: LD_VAR 0 4
9801: ARRAY
9802: IFFALSE 9872
// begin for j in Unavailable_Techs do
9804: LD_ADDR_VAR 0 5
9808: PUSH
9809: LD_VAR 0 2
9813: PUSH
9814: FOR_IN
9815: IFFALSE 9836
// SetTech ( j , i , 0 ) ;
9817: LD_VAR 0 5
9821: PPUSH
9822: LD_VAR 0 4
9826: PPUSH
9827: LD_INT 0
9829: PPUSH
9830: CALL_OW 322
9834: GO 9814
9836: POP
9837: POP
// for j in Unavailable_Builds do
9838: LD_ADDR_VAR 0 5
9842: PUSH
9843: LD_VAR 0 3
9847: PUSH
9848: FOR_IN
9849: IFFALSE 9870
// SetRestrict ( j , i , 0 ) ;
9851: LD_VAR 0 5
9855: PPUSH
9856: LD_VAR 0 4
9860: PPUSH
9861: LD_INT 0
9863: PPUSH
9864: CALL_OW 324
9868: GO 9848
9870: POP
9871: POP
// end ;
9872: GO 9789
9874: POP
9875: POP
// end ;
9876: LD_VAR 0 1
9880: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9881: LD_INT 0
9883: PPUSH
9884: PPUSH
9885: PPUSH
9886: PPUSH
9887: PPUSH
9888: PPUSH
9889: PPUSH
// for i := 1 to Restricted_Builds do
9890: LD_ADDR_VAR 0 2
9894: PUSH
9895: DOUBLE
9896: LD_INT 1
9898: DEC
9899: ST_TO_ADDR
9900: LD_LOC 17
9904: PUSH
9905: FOR_TO
9906: IFFALSE 10216
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9908: LD_LOC 17
9912: PUSH
9913: LD_VAR 0 2
9917: ARRAY
9918: PUSH
9919: LD_INT 1
9921: ARRAY
9922: PUSH
9923: LD_INT 31
9925: DOUBLE
9926: EQUAL
9927: IFTRUE 9943
9929: LD_INT 32
9931: DOUBLE
9932: EQUAL
9933: IFTRUE 9943
9935: LD_INT 33
9937: DOUBLE
9938: EQUAL
9939: IFTRUE 9943
9941: GO 9954
9943: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
9944: LD_ADDR_VAR 0 6
9948: PUSH
9949: LD_STRING #Turrets
9951: ST_TO_ADDR
9952: GO 9999
9954: LD_INT 4
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9968
9960: LD_INT 5
9962: DOUBLE
9963: EQUAL
9964: IFTRUE 9968
9966: GO 9979
9968: POP
// btype := #Armouries ; b_Behemoth :
9969: LD_ADDR_VAR 0 6
9973: PUSH
9974: LD_STRING #Armouries
9976: ST_TO_ADDR
9977: GO 9999
9979: LD_INT 37
9981: DOUBLE
9982: EQUAL
9983: IFTRUE 9987
9985: GO 9998
9987: POP
// btype := #Behemoths ; end ;
9988: LD_ADDR_VAR 0 6
9992: PUSH
9993: LD_STRING #Behemoths
9995: ST_TO_ADDR
9996: GO 9999
9998: POP
// list := [ ] ;
9999: LD_ADDR_VAR 0 7
10003: PUSH
10004: EMPTY
10005: ST_TO_ADDR
// for j := 1 to 8 do
10006: LD_ADDR_VAR 0 3
10010: PUSH
10011: DOUBLE
10012: LD_INT 1
10014: DEC
10015: ST_TO_ADDR
10016: LD_INT 8
10018: PUSH
10019: FOR_TO
10020: IFFALSE 10113
// if Side_Positions [ j ] then
10022: LD_EXP 21
10026: PUSH
10027: LD_VAR 0 3
10031: ARRAY
10032: IFFALSE 10111
// begin amount := 0 ;
10034: LD_ADDR_VAR 0 5
10038: PUSH
10039: LD_INT 0
10041: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10042: LD_ADDR_VAR 0 4
10046: PUSH
10047: LD_LOC 17
10051: PUSH
10052: LD_VAR 0 2
10056: ARRAY
10057: PUSH
10058: FOR_IN
10059: IFFALSE 10107
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10061: LD_ADDR_VAR 0 5
10065: PUSH
10066: LD_VAR 0 5
10070: PUSH
10071: LD_INT 22
10073: PUSH
10074: LD_VAR 0 3
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 30
10085: PUSH
10086: LD_VAR 0 4
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 69
10103: PLUS
10104: ST_TO_ADDR
10105: GO 10058
10107: POP
10108: POP
// break ;
10109: GO 10113
// end ;
10111: GO 10019
10113: POP
10114: POP
// list := [ ] ;
10115: LD_ADDR_VAR 0 7
10119: PUSH
10120: EMPTY
10121: ST_TO_ADDR
// for j := 1 to 8 do
10122: LD_ADDR_VAR 0 3
10126: PUSH
10127: DOUBLE
10128: LD_INT 1
10130: DEC
10131: ST_TO_ADDR
10132: LD_INT 8
10134: PUSH
10135: FOR_TO
10136: IFFALSE 10156
// list := list ^ amount ;
10138: LD_ADDR_VAR 0 7
10142: PUSH
10143: LD_VAR 0 7
10147: PUSH
10148: LD_VAR 0 5
10152: ADD
10153: ST_TO_ADDR
10154: GO 10135
10156: POP
10157: POP
// Already_Built := Already_Built ^ [ list ] ;
10158: LD_ADDR_LOC 23
10162: PUSH
10163: LD_LOC 23
10167: PUSH
10168: LD_VAR 0 7
10172: PUSH
10173: EMPTY
10174: LIST
10175: ADD
10176: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10177: LD_ADDR_LOC 24
10181: PUSH
10182: LD_LOC 24
10186: PUSH
10187: LD_VAR 0 6
10191: PUSH
10192: LD_VAR 0 5
10196: PUSH
10197: LD_LOC 18
10201: PUSH
10202: LD_VAR 0 2
10206: ARRAY
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: LIST
10212: ADD
10213: ST_TO_ADDR
// end ;
10214: GO 9905
10216: POP
10217: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10218: LD_ADDR_LOC 25
10222: PUSH
10223: LD_INT 0
10225: PUSH
10226: LD_INT 0
10228: PUSH
10229: LD_INT 0
10231: PUSH
10232: LD_INT 0
10234: PUSH
10235: LD_INT 0
10237: PUSH
10238: LD_INT 0
10240: PUSH
10241: LD_INT 0
10243: PUSH
10244: LD_INT 0
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: ST_TO_ADDR
// if Limits_Info then
10257: LD_LOC 24
10261: IFFALSE 10277
// Limits_Info := #Limits ^ Limits_Info ;
10263: LD_ADDR_LOC 24
10267: PUSH
10268: LD_STRING #Limits
10270: PUSH
10271: LD_LOC 24
10275: ADD
10276: ST_TO_ADDR
// end ;
10277: LD_VAR 0 1
10281: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10282: LD_INT 0
10284: PPUSH
10285: PPUSH
10286: PPUSH
10287: PPUSH
// for i := 1 to Restricted_Builds do
10288: LD_ADDR_VAR 0 7
10292: PUSH
10293: DOUBLE
10294: LD_INT 1
10296: DEC
10297: ST_TO_ADDR
10298: LD_LOC 17
10302: PUSH
10303: FOR_TO
10304: IFFALSE 10727
// if BType in Restricted_Builds [ i ] then
10306: LD_VAR 0 2
10310: PUSH
10311: LD_LOC 17
10315: PUSH
10316: LD_VAR 0 7
10320: ARRAY
10321: IN
10322: IFFALSE 10725
// begin if old_side then
10324: LD_VAR 0 4
10328: IFFALSE 10454
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10330: LD_LOC 23
10334: PUSH
10335: LD_VAR 0 7
10339: ARRAY
10340: PUSH
10341: LD_VAR 0 3
10345: ARRAY
10346: PUSH
10347: LD_VAR 0 5
10351: PLUS
10352: PUSH
10353: LD_LOC 18
10357: PUSH
10358: LD_VAR 0 7
10362: ARRAY
10363: GREATER
10364: IFFALSE 10390
// begin SetSide ( un , old_side ) ;
10366: LD_VAR 0 1
10370: PPUSH
10371: LD_VAR 0 4
10375: PPUSH
10376: CALL_OW 235
// count := 0 ;
10380: LD_ADDR_VAR 0 5
10384: PUSH
10385: LD_INT 0
10387: ST_TO_ADDR
// end else
10388: GO 10454
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10390: LD_ADDR_LOC 23
10394: PUSH
10395: LD_LOC 23
10399: PPUSH
10400: LD_VAR 0 7
10404: PPUSH
10405: LD_LOC 23
10409: PUSH
10410: LD_VAR 0 7
10414: ARRAY
10415: PPUSH
10416: LD_VAR 0 4
10420: PPUSH
10421: LD_LOC 23
10425: PUSH
10426: LD_VAR 0 7
10430: ARRAY
10431: PUSH
10432: LD_VAR 0 4
10436: ARRAY
10437: PUSH
10438: LD_VAR 0 5
10442: MINUS
10443: PPUSH
10444: CALL_OW 1
10448: PPUSH
10449: CALL_OW 1
10453: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10454: LD_ADDR_LOC 23
10458: PUSH
10459: LD_LOC 23
10463: PPUSH
10464: LD_VAR 0 7
10468: PPUSH
10469: LD_LOC 23
10473: PUSH
10474: LD_VAR 0 7
10478: ARRAY
10479: PPUSH
10480: LD_VAR 0 3
10484: PPUSH
10485: LD_LOC 23
10489: PUSH
10490: LD_VAR 0 7
10494: ARRAY
10495: PUSH
10496: LD_VAR 0 3
10500: ARRAY
10501: PUSH
10502: LD_VAR 0 5
10506: PLUS
10507: PPUSH
10508: CALL_OW 1
10512: PPUSH
10513: CALL_OW 1
10517: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10518: LD_VAR 0 5
10522: PUSH
10523: LD_INT 0
10525: NONEQUAL
10526: PUSH
10527: LD_VAR 0 3
10531: PUSH
10532: LD_OWVAR 2
10536: EQUAL
10537: AND
10538: IFFALSE 10581
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10540: LD_ADDR_LOC 24
10544: PUSH
10545: LD_LOC 24
10549: PPUSH
10550: LD_INT 3
10552: PUSH
10553: LD_VAR 0 7
10557: MUL
10558: PPUSH
10559: LD_LOC 23
10563: PUSH
10564: LD_VAR 0 7
10568: ARRAY
10569: PUSH
10570: LD_VAR 0 3
10574: ARRAY
10575: PPUSH
10576: CALL_OW 1
10580: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10581: LD_LOC 23
10585: PUSH
10586: LD_VAR 0 7
10590: ARRAY
10591: PUSH
10592: LD_VAR 0 3
10596: ARRAY
10597: PUSH
10598: LD_LOC 18
10602: PUSH
10603: LD_VAR 0 7
10607: ARRAY
10608: GREATER
10609: IFFALSE 10636
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10611: LD_ADDR_LOC 25
10615: PUSH
10616: LD_LOC 25
10620: PPUSH
10621: LD_VAR 0 3
10625: PPUSH
10626: LD_INT 1
10628: PPUSH
10629: CALL_OW 1
10633: ST_TO_ADDR
// end else
10634: GO 10723
// begin for j := 1 to Restricted_Builds do
10636: LD_ADDR_VAR 0 8
10640: PUSH
10641: DOUBLE
10642: LD_INT 1
10644: DEC
10645: ST_TO_ADDR
10646: LD_LOC 17
10650: PUSH
10651: FOR_TO
10652: IFFALSE 10696
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10654: LD_LOC 23
10658: PUSH
10659: LD_VAR 0 8
10663: ARRAY
10664: PUSH
10665: LD_VAR 0 3
10669: ARRAY
10670: PUSH
10671: LD_LOC 18
10675: PUSH
10676: LD_VAR 0 8
10680: ARRAY
10681: GREATER
10682: IFFALSE 10694
// begin Is_Cheater := true ;
10684: LD_ADDR_VAR 0 9
10688: PUSH
10689: LD_INT 1
10691: ST_TO_ADDR
// break ;
10692: GO 10696
// end ;
10694: GO 10651
10696: POP
10697: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10698: LD_ADDR_LOC 25
10702: PUSH
10703: LD_LOC 25
10707: PPUSH
10708: LD_VAR 0 3
10712: PPUSH
10713: LD_VAR 0 9
10717: PPUSH
10718: CALL_OW 1
10722: ST_TO_ADDR
// end ; break ;
10723: GO 10727
// end ;
10725: GO 10303
10727: POP
10728: POP
// end ;
10729: LD_VAR 0 6
10733: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10734: LD_VAR 0 5
10738: PUSH
10739: LD_LOC 19
10743: IN
10744: PUSH
10745: LD_VAR 0 2
10749: PUSH
10750: LD_LOC 20
10754: IN
10755: OR
10756: PUSH
10757: LD_VAR 0 4
10761: PUSH
10762: LD_LOC 21
10766: IN
10767: OR
10768: PUSH
10769: LD_VAR 0 3
10773: PUSH
10774: LD_LOC 22
10778: IN
10779: OR
10780: IFFALSE 10791
// ComCancel ( factory ) ;
10782: LD_VAR 0 1
10786: PPUSH
10787: CALL_OW 127
// end ;
10791: PPOPN 5
10793: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10794: LD_VAR 0 2
10798: PUSH
10799: LD_LOC 19
10803: IN
10804: IFFALSE 10815
// ComCancel ( building ) ;
10806: LD_VAR 0 1
10810: PPUSH
10811: CALL_OW 127
// end ; end_of_file
10815: PPOPN 2
10817: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
10818: LD_INT 0
10820: PPUSH
10821: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10822: LD_ADDR_VAR 0 2
10826: PUSH
10827: LD_STRING #Multi1x1-Time
10829: PUSH
10830: LD_OWVAR 1
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: ST_TO_ADDR
// if WaitServerStrings then
10839: LD_EXP 59
10843: IFFALSE 10861
// AllStrings = AllStrings ^ WaitServerStrings ;
10845: LD_ADDR_VAR 0 2
10849: PUSH
10850: LD_VAR 0 2
10854: PUSH
10855: LD_EXP 59
10859: ADD
10860: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10861: LD_INT 0
10863: PUSH
10864: LD_EXP 16
10868: PUSH
10869: LD_OWVAR 1
10873: MINUS
10874: LESSEQUAL
10875: IFFALSE 10906
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10877: LD_ADDR_VAR 0 2
10881: PUSH
10882: LD_VAR 0 2
10886: PUSH
10887: LD_STRING #allowedsibbomb
10889: PUSH
10890: LD_EXP 16
10894: PUSH
10895: LD_OWVAR 1
10899: MINUS
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: ADD
10905: ST_TO_ADDR
// if ( ExtraStrings ) then
10906: LD_EXP 58
10910: IFFALSE 10932
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10912: LD_ADDR_VAR 0 2
10916: PUSH
10917: LD_VAR 0 2
10921: PUSH
10922: LD_STRING 
10924: ADD
10925: PUSH
10926: LD_EXP 58
10930: ADD
10931: ST_TO_ADDR
// if ( Display_kings ) and not isSGUI then
10932: LD_EXP 60
10936: PUSH
10937: LD_OWVAR 83
10941: NOT
10942: AND
10943: IFFALSE 10961
// AllStrings = AllStrings ^ Display_kings ;
10945: LD_ADDR_VAR 0 2
10949: PUSH
10950: LD_VAR 0 2
10954: PUSH
10955: LD_EXP 60
10959: ADD
10960: ST_TO_ADDR
// if ( LimitsStrings ) then
10961: CALL 7658 0 0
10965: IFFALSE 10987
// AllStrings := AllStrings ^  ^ LimitsStrings ;
10967: LD_ADDR_VAR 0 2
10971: PUSH
10972: LD_VAR 0 2
10976: PUSH
10977: LD_STRING 
10979: ADD
10980: PUSH
10981: CALL 7658 0 0
10985: ADD
10986: ST_TO_ADDR
// Display_Strings := AllStrings ;
10987: LD_ADDR_OWVAR 47
10991: PUSH
10992: LD_VAR 0 2
10996: ST_TO_ADDR
// end ;
10997: LD_VAR 0 1
11001: RET
// every 0 0$1 do
11002: GO 11004
11004: DISABLE
// begin ShowTimer ;
11005: CALL 10818 0 0
// enable ;
11009: ENABLE
// end ; end_of_file
11010: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
11011: LD_INT 0
11013: PPUSH
11014: PPUSH
11015: PPUSH
// sharedPoints1 = [ ] ;
11016: LD_ADDR_LOC 26
11020: PUSH
11021: EMPTY
11022: ST_TO_ADDR
// sharedPoints2 = [ ] ;
11023: LD_ADDR_LOC 27
11027: PUSH
11028: EMPTY
11029: ST_TO_ADDR
// sharedPoints3 = [ ] ;
11030: LD_ADDR_LOC 28
11034: PUSH
11035: EMPTY
11036: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
11037: LD_ADDR_VAR 0 2
11041: PUSH
11042: DOUBLE
11043: LD_INT 1
11045: DEC
11046: ST_TO_ADDR
11047: LD_EXP 21
11051: PUSH
11052: LD_INT 0
11054: PLUS
11055: PUSH
11056: FOR_TO
11057: IFFALSE 11159
// begin if not Side_Positions [ i ] = 0 then
11059: LD_EXP 21
11063: PUSH
11064: LD_VAR 0 2
11068: ARRAY
11069: PUSH
11070: LD_INT 0
11072: EQUAL
11073: NOT
11074: IFFALSE 11088
// SetMultiScore ( i , 0 ) ;
11076: LD_VAR 0 2
11080: PPUSH
11081: LD_INT 0
11083: PPUSH
11084: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
11088: LD_ADDR_LOC 26
11092: PUSH
11093: LD_LOC 26
11097: PPUSH
11098: LD_VAR 0 2
11102: PPUSH
11103: LD_INT 0
11105: PPUSH
11106: CALL_OW 1
11110: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
11111: LD_ADDR_LOC 27
11115: PUSH
11116: LD_LOC 27
11120: PPUSH
11121: LD_VAR 0 2
11125: PPUSH
11126: LD_INT 0
11128: PPUSH
11129: CALL_OW 1
11133: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
11134: LD_ADDR_LOC 28
11138: PUSH
11139: LD_LOC 28
11143: PPUSH
11144: LD_VAR 0 2
11148: PPUSH
11149: LD_INT 0
11151: PPUSH
11152: CALL_OW 1
11156: ST_TO_ADDR
// end ;
11157: GO 11056
11159: POP
11160: POP
// pointGame = true ;
11161: LD_ADDR_LOC 29
11165: PUSH
11166: LD_INT 1
11168: ST_TO_ADDR
// end ;
11169: LD_VAR 0 1
11173: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
11174: LD_LOC 29
11178: IFFALSE 11589
11180: GO 11182
11182: DISABLE
11183: LD_INT 0
11185: PPUSH
11186: PPUSH
11187: PPUSH
11188: PPUSH
11189: PPUSH
11190: PPUSH
11191: PPUSH
11192: PPUSH
11193: PPUSH
11194: PPUSH
11195: PPUSH
11196: PPUSH
11197: PPUSH
// begin if isSGUI then
11198: LD_OWVAR 83
11202: IFFALSE 11589
// begin if Teams [ 1 ] then
11204: LD_EXP 19
11208: PUSH
11209: LD_INT 1
11211: ARRAY
11212: IFFALSE 11224
// red = true else
11214: LD_ADDR_VAR 0 2
11218: PUSH
11219: LD_INT 1
11221: ST_TO_ADDR
11222: GO 11232
// red = false ;
11224: LD_ADDR_VAR 0 2
11228: PUSH
11229: LD_INT 0
11231: ST_TO_ADDR
// if Teams [ 2 ] then
11232: LD_EXP 19
11236: PUSH
11237: LD_INT 2
11239: ARRAY
11240: IFFALSE 11252
// blue = true else
11242: LD_ADDR_VAR 0 3
11246: PUSH
11247: LD_INT 1
11249: ST_TO_ADDR
11250: GO 11260
// blue = false ;
11252: LD_ADDR_VAR 0 3
11256: PUSH
11257: LD_INT 0
11259: ST_TO_ADDR
// if Teams [ 3 ] then
11260: LD_EXP 19
11264: PUSH
11265: LD_INT 3
11267: ARRAY
11268: IFFALSE 11280
// yel = true else
11270: LD_ADDR_VAR 0 4
11274: PUSH
11275: LD_INT 1
11277: ST_TO_ADDR
11278: GO 11288
// yel = false ;
11280: LD_ADDR_VAR 0 4
11284: PUSH
11285: LD_INT 0
11287: ST_TO_ADDR
// if Teams [ 4 ] then
11288: LD_EXP 19
11292: PUSH
11293: LD_INT 4
11295: ARRAY
11296: IFFALSE 11308
// green = true else
11298: LD_ADDR_VAR 0 5
11302: PUSH
11303: LD_INT 1
11305: ST_TO_ADDR
11306: GO 11316
// green = false ;
11308: LD_ADDR_VAR 0 5
11312: PUSH
11313: LD_INT 0
11315: ST_TO_ADDR
// if def_public_score then
11316: LD_EXP 1
11320: IFFALSE 11332
// p = true else
11322: LD_ADDR_VAR 0 12
11326: PUSH
11327: LD_INT 1
11329: ST_TO_ADDR
11330: GO 11340
// p = false ;
11332: LD_ADDR_VAR 0 12
11336: PUSH
11337: LD_INT 0
11339: ST_TO_ADDR
// if team_game then
11340: LD_EXP 23
11344: IFFALSE 11425
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
11346: LD_ADDR_VAR 0 13
11350: PUSH
11351: LD_INT 3
11353: PUSH
11354: LD_INT 1
11356: PUSH
11357: LD_INT 2
11359: PUSH
11360: LD_INT 7
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: PUSH
11369: LD_EXP 32
11373: ARRAY
11374: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
11375: LD_ADDR_VAR 0 10
11379: PUSH
11380: LD_STRING {
11382: PUSH
11383: LD_VAR 0 3
11387: STR
11388: PUSH
11389: LD_STRING ,
11391: STR
11392: PUSH
11393: LD_VAR 0 4
11397: STR
11398: PUSH
11399: LD_STRING ,
11401: STR
11402: PUSH
11403: LD_VAR 0 2
11407: STR
11408: PUSH
11409: LD_STRING ,0,0,0,
11411: STR
11412: PUSH
11413: LD_VAR 0 5
11417: STR
11418: PUSH
11419: LD_STRING ,0}
11421: STR
11422: ST_TO_ADDR
// end else
11423: GO 11525
// begin you = your_side ;
11425: LD_ADDR_VAR 0 13
11429: PUSH
11430: LD_OWVAR 2
11434: ST_TO_ADDR
// s = { ;
11435: LD_ADDR_VAR 0 10
11439: PUSH
11440: LD_STRING {
11442: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
11443: LD_ADDR_VAR 0 1
11447: PUSH
11448: DOUBLE
11449: LD_INT 1
11451: DEC
11452: ST_TO_ADDR
11453: LD_EXP 21
11457: PUSH
11458: LD_INT 0
11460: PLUS
11461: PUSH
11462: FOR_TO
11463: IFFALSE 11509
// if side_positions [ i ] then
11465: LD_EXP 21
11469: PUSH
11470: LD_VAR 0 1
11474: ARRAY
11475: IFFALSE 11493
// s = s & 1, else
11477: LD_ADDR_VAR 0 10
11481: PUSH
11482: LD_VAR 0 10
11486: PUSH
11487: LD_STRING 1,
11489: STR
11490: ST_TO_ADDR
11491: GO 11507
// s = s & 0, ;
11493: LD_ADDR_VAR 0 10
11497: PUSH
11498: LD_VAR 0 10
11502: PUSH
11503: LD_STRING 0,
11505: STR
11506: ST_TO_ADDR
11507: GO 11462
11509: POP
11510: POP
// s = s & } ;
11511: LD_ADDR_VAR 0 10
11515: PUSH
11516: LD_VAR 0 10
11520: PUSH
11521: LD_STRING }
11523: STR
11524: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
11525: LD_STRING initScore(
11527: PUSH
11528: LD_VAR 0 10
11532: STR
11533: PUSH
11534: LD_STRING ,
11536: STR
11537: PUSH
11538: LD_VAR 0 12
11542: STR
11543: PUSH
11544: LD_STRING ,
11546: STR
11547: PUSH
11548: LD_VAR 0 13
11552: STR
11553: PUSH
11554: LD_STRING  );
11556: STR
11557: PPUSH
11558: CALL_OW 559
// if game_type = 3 then
11562: LD_EXP 41
11566: PUSH
11567: LD_INT 3
11569: EQUAL
11570: IFFALSE 11589
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
11572: LD_STRING AddScorePoints(2,2,
11574: PUSH
11575: LD_EXP 30
11579: STR
11580: PUSH
11581: LD_STRING  );
11583: STR
11584: PPUSH
11585: CALL_OW 559
// end ; end ;
11589: PPOPN 13
11591: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
11592: LD_INT 0
11594: PPUSH
11595: PPUSH
// case typ of 1 :
11596: LD_VAR 0 3
11600: PUSH
11601: LD_INT 1
11603: DOUBLE
11604: EQUAL
11605: IFTRUE 11609
11607: GO 11637
11609: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
11610: LD_ADDR_LOC 26
11614: PUSH
11615: LD_LOC 26
11619: PPUSH
11620: LD_VAR 0 1
11624: PPUSH
11625: LD_VAR 0 2
11629: PPUSH
11630: CALL_OW 1
11634: ST_TO_ADDR
11635: GO 11710
11637: LD_INT 2
11639: DOUBLE
11640: EQUAL
11641: IFTRUE 11645
11643: GO 11673
11645: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
11646: LD_ADDR_LOC 27
11650: PUSH
11651: LD_LOC 27
11655: PPUSH
11656: LD_VAR 0 1
11660: PPUSH
11661: LD_VAR 0 2
11665: PPUSH
11666: CALL_OW 1
11670: ST_TO_ADDR
11671: GO 11710
11673: LD_INT 3
11675: DOUBLE
11676: EQUAL
11677: IFTRUE 11681
11679: GO 11709
11681: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
11682: LD_ADDR_LOC 28
11686: PUSH
11687: LD_LOC 28
11691: PPUSH
11692: LD_VAR 0 1
11696: PPUSH
11697: LD_VAR 0 2
11701: PPUSH
11702: CALL_OW 1
11706: ST_TO_ADDR
11707: GO 11710
11709: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
11710: LD_ADDR_VAR 0 5
11714: PUSH
11715: LD_LOC 26
11719: PUSH
11720: LD_VAR 0 1
11724: ARRAY
11725: PUSH
11726: LD_LOC 27
11730: PUSH
11731: LD_VAR 0 1
11735: ARRAY
11736: PLUS
11737: PUSH
11738: LD_LOC 28
11742: PUSH
11743: LD_VAR 0 1
11747: ARRAY
11748: PLUS
11749: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
11750: LD_VAR 0 1
11754: PPUSH
11755: LD_VAR 0 5
11759: PPUSH
11760: CALL_OW 506
// end ; end_of_file
11764: LD_VAR 0 4
11768: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11769: LD_INT 0
11771: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11772: LD_VAR 0 1
11776: PPUSH
11777: CALL_OW 255
11781: PUSH
11782: LD_VAR 0 4
11786: EQUAL
11787: IFFALSE 11806
// begin SetAchievement ( ACH_RAD ) ;
11789: LD_STRING ACH_RAD
11791: PPUSH
11792: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11796: LD_STRING ACH_NL
11798: PPUSH
11799: LD_INT 1
11801: PPUSH
11802: CALL_OW 564
// end end ;
11806: LD_VAR 0 5
11810: RET
// export function SA_Win ( side ) ; begin
11811: LD_INT 0
11813: PPUSH
// case side of 1 :
11814: LD_VAR 0 1
11818: PUSH
11819: LD_INT 1
11821: DOUBLE
11822: EQUAL
11823: IFTRUE 11827
11825: GO 11840
11827: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11828: LD_STRING ACH_AH
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: CALL_OW 564
11838: GO 12003
11840: LD_INT 2
11842: DOUBLE
11843: EQUAL
11844: IFTRUE 11848
11846: GO 11861
11848: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11849: LD_STRING ACH_E
11851: PPUSH
11852: LD_INT 1
11854: PPUSH
11855: CALL_OW 564
11859: GO 12003
11861: LD_INT 3
11863: DOUBLE
11864: EQUAL
11865: IFTRUE 11869
11867: GO 11882
11869: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11870: LD_STRING ACH_OOL
11872: PPUSH
11873: LD_INT 1
11875: PPUSH
11876: CALL_OW 564
11880: GO 12003
11882: LD_INT 1
11884: PUSH
11885: LD_INT 2
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: DOUBLE
11892: EQUAL
11893: IFTRUE 11897
11895: GO 11922
11897: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11898: LD_STRING ACH_AH
11900: PPUSH
11901: LD_REAL  5.00000000000000E-0001
11904: PPUSH
11905: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11909: LD_STRING ACH_E
11911: PPUSH
11912: LD_REAL  5.00000000000000E-0001
11915: PPUSH
11916: CALL_OW 564
// end ; [ 2 , 3 ] :
11920: GO 12003
11922: LD_INT 2
11924: PUSH
11925: LD_INT 3
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: DOUBLE
11932: EQUAL
11933: IFTRUE 11937
11935: GO 11962
11937: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11938: LD_STRING ACH_OOL
11940: PPUSH
11941: LD_REAL  5.00000000000000E-0001
11944: PPUSH
11945: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11949: LD_STRING ACH_E
11951: PPUSH
11952: LD_REAL  5.00000000000000E-0001
11955: PPUSH
11956: CALL_OW 564
// end ; [ 3 , 1 ] :
11960: GO 12003
11962: LD_INT 3
11964: PUSH
11965: LD_INT 1
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: DOUBLE
11972: EQUAL
11973: IFTRUE 11977
11975: GO 12002
11977: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11978: LD_STRING ACH_AH
11980: PPUSH
11981: LD_REAL  5.00000000000000E-0001
11984: PPUSH
11985: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
11989: LD_STRING ACH_OOL
11991: PPUSH
11992: LD_REAL  5.00000000000000E-0001
11995: PPUSH
11996: CALL_OW 564
// end ; end ;
12000: GO 12003
12002: POP
// end ; end_of_file
12003: LD_VAR 0 2
12007: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
12008: LD_INT 0
12010: PPUSH
12011: PPUSH
// enable ( 98 ) ;
12012: LD_INT 98
12014: ENABLE_MARKED
// GameEnded = false ;
12015: LD_ADDR_LOC 31
12019: PUSH
12020: LD_INT 0
12022: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12023: LD_ADDR_LOC 30
12027: PUSH
12028: LD_INT 0
12030: PUSH
12031: LD_INT 0
12033: PUSH
12034: LD_INT 0
12036: PUSH
12037: LD_INT 0
12039: PUSH
12040: LD_INT 0
12042: PUSH
12043: LD_INT 0
12045: PUSH
12046: LD_INT 0
12048: PUSH
12049: LD_INT 0
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: ST_TO_ADDR
// unfoged = false ;
12062: LD_ADDR_LOC 32
12066: PUSH
12067: LD_INT 0
12069: ST_TO_ADDR
// for i = 1 to side_positions do
12070: LD_ADDR_VAR 0 2
12074: PUSH
12075: DOUBLE
12076: LD_INT 1
12078: DEC
12079: ST_TO_ADDR
12080: LD_EXP 21
12084: PUSH
12085: FOR_TO
12086: IFFALSE 12126
// if not side_positions [ i ] then
12088: LD_EXP 21
12092: PUSH
12093: LD_VAR 0 2
12097: ARRAY
12098: NOT
12099: IFFALSE 12124
// defaited = replace ( defaited , i , true ) ;
12101: LD_ADDR_LOC 30
12105: PUSH
12106: LD_LOC 30
12110: PPUSH
12111: LD_VAR 0 2
12115: PPUSH
12116: LD_INT 1
12118: PPUSH
12119: CALL_OW 1
12123: ST_TO_ADDR
12124: GO 12085
12126: POP
12127: POP
// end ;
12128: LD_VAR 0 1
12132: RET
// function CanWinLoose ; begin
12133: LD_INT 0
12135: PPUSH
// Result := true ;
12136: LD_ADDR_VAR 0 1
12140: PUSH
12141: LD_INT 1
12143: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12144: CALL_OW 518
12148: PUSH
12149: CALL_OW 519
12153: PUSH
12154: LD_INT 0
12156: GREATER
12157: AND
12158: IFFALSE 12168
// Result := false ;
12160: LD_ADDR_VAR 0 1
12164: PUSH
12165: LD_INT 0
12167: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12168: CALL_OW 531
12172: PUSH
12173: CALL_OW 519
12177: PUSH
12178: LD_INT 1
12180: GREATER
12181: AND
12182: IFFALSE 12192
// Result := false ;
12184: LD_ADDR_VAR 0 1
12188: PUSH
12189: LD_INT 0
12191: ST_TO_ADDR
// end ;
12192: LD_VAR 0 1
12196: RET
// export function HasPower ( i ) ; var k , h ; begin
12197: LD_INT 0
12199: PPUSH
12200: PPUSH
12201: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
12202: LD_VAR 0 1
12206: PPUSH
12207: CALL_OW 108
12211: NOT
12212: PUSH
12213: LD_EXP 20
12217: PUSH
12218: LD_VAR 0 1
12222: ARRAY
12223: NOT
12224: AND
12225: PUSH
12226: LD_OWVAR 4
12230: AND
12231: IFFALSE 12243
// begin result = false ;
12233: LD_ADDR_VAR 0 2
12237: PUSH
12238: LD_INT 0
12240: ST_TO_ADDR
// end else
12241: GO 12538
// case def_win_rules of 0 :
12243: LD_EXP 17
12247: PUSH
12248: LD_INT 0
12250: DOUBLE
12251: EQUAL
12252: IFTRUE 12256
12254: GO 12419
12256: POP
// if def_people_respawning then
12257: LD_EXP 53
12261: IFFALSE 12352
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
12263: LD_ADDR_VAR 0 2
12267: PUSH
12268: LD_INT 22
12270: PUSH
12271: LD_VAR 0 1
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 2
12282: PUSH
12283: LD_INT 21
12285: PUSH
12286: LD_INT 1
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 33
12295: PUSH
12296: LD_INT 3
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: LD_INT 33
12305: PUSH
12306: LD_INT 5
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 30
12315: PUSH
12316: LD_INT 0
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 30
12325: PUSH
12326: LD_INT 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PPUSH
12345: CALL_OW 69
12349: ST_TO_ADDR
12350: GO 12417
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
12352: LD_ADDR_VAR 0 2
12356: PUSH
12357: LD_INT 22
12359: PUSH
12360: LD_VAR 0 1
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 2
12371: PUSH
12372: LD_INT 21
12374: PUSH
12375: LD_INT 1
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 33
12384: PUSH
12385: LD_INT 3
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PUSH
12392: LD_INT 33
12394: PUSH
12395: LD_INT 5
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PPUSH
12412: CALL_OW 69
12416: ST_TO_ADDR
12417: GO 12538
12419: LD_INT 1
12421: DOUBLE
12422: EQUAL
12423: IFTRUE 12427
12425: GO 12466
12427: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
12428: LD_ADDR_VAR 0 2
12432: PUSH
12433: LD_INT 22
12435: PUSH
12436: LD_VAR 0 1
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: PUSH
12445: LD_INT 21
12447: PUSH
12448: LD_INT 1
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PPUSH
12459: CALL_OW 69
12463: ST_TO_ADDR
12464: GO 12538
12466: LD_INT 2
12468: DOUBLE
12469: EQUAL
12470: IFTRUE 12474
12472: GO 12537
12474: POP
// begin h = false ;
12475: LD_ADDR_VAR 0 4
12479: PUSH
12480: LD_INT 0
12482: ST_TO_ADDR
// for k in heroes [ i ] do
12483: LD_ADDR_VAR 0 3
12487: PUSH
12488: LD_EXP 33
12492: PUSH
12493: LD_VAR 0 1
12497: ARRAY
12498: PUSH
12499: FOR_IN
12500: IFFALSE 12523
// if IsLive ( k ) then
12502: LD_VAR 0 3
12506: PPUSH
12507: CALL_OW 300
12511: IFFALSE 12521
// h = true ;
12513: LD_ADDR_VAR 0 4
12517: PUSH
12518: LD_INT 1
12520: ST_TO_ADDR
12521: GO 12499
12523: POP
12524: POP
// Result := h ;
12525: LD_ADDR_VAR 0 2
12529: PUSH
12530: LD_VAR 0 4
12534: ST_TO_ADDR
// end ; end ;
12535: GO 12538
12537: POP
// end ;
12538: LD_VAR 0 2
12542: RET
// function AlliedSides ( i , j ) ; begin
12543: LD_INT 0
12545: PPUSH
// Result := false ;
12546: LD_ADDR_VAR 0 3
12550: PUSH
12551: LD_INT 0
12553: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
12554: LD_VAR 0 1
12558: PPUSH
12559: LD_VAR 0 2
12563: PPUSH
12564: CALL_OW 81
12568: PUSH
12569: LD_INT 1
12571: EQUAL
12572: PUSH
12573: LD_VAR 0 2
12577: PPUSH
12578: LD_VAR 0 1
12582: PPUSH
12583: CALL_OW 81
12587: PUSH
12588: LD_INT 1
12590: EQUAL
12591: AND
12592: PUSH
12593: LD_VAR 0 1
12597: PPUSH
12598: CALL_OW 83
12602: AND
12603: PUSH
12604: LD_VAR 0 2
12608: PPUSH
12609: CALL_OW 83
12613: AND
12614: IFFALSE 12624
// Result := true ;
12616: LD_ADDR_VAR 0 3
12620: PUSH
12621: LD_INT 1
12623: ST_TO_ADDR
// end ;
12624: LD_VAR 0 3
12628: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
12629: CALL 12133 0 0
12633: PUSH
12634: LD_LOC 31
12638: NOT
12639: AND
12640: IFFALSE 12656
12642: GO 12644
12644: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
12645: LD_ADDR_EXP 59
12649: PUSH
12650: LD_STRING #Player-Ended
12652: PUSH
12653: EMPTY
12654: LIST
12655: ST_TO_ADDR
12656: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
12657: CALL 12133 0 0
12661: PUSH
12662: LD_LOC 31
12666: AND
12667: IFFALSE 12676
12669: GO 12671
12671: DISABLE
// YouLostInMultiplayer ;
12672: CALL_OW 107
12676: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
12677: CALL 12133 0 0
12681: NOT
12682: PUSH
12683: CALL_OW 531
12687: NOT
12688: AND
12689: IFFALSE 12705
12691: GO 12693
12693: DISABLE
// WaitServerStrings = [ #server-wait ] ;
12694: LD_ADDR_EXP 59
12698: PUSH
12699: LD_STRING #server-wait
12701: PUSH
12702: EMPTY
12703: LIST
12704: ST_TO_ADDR
12705: END
// every 100 trigger IAmSpec do
12706: CALL_OW 531
12710: IFFALSE 12726
12712: GO 12714
12714: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
12715: LD_ADDR_EXP 59
12719: PUSH
12720: LD_STRING #Player-IAmSpec
12722: PUSH
12723: EMPTY
12724: LIST
12725: ST_TO_ADDR
12726: END
// every 100 trigger GameEnded and IAmSpec do
12727: LD_LOC 31
12731: PUSH
12732: CALL_OW 531
12736: AND
12737: IFFALSE 12746
12739: GO 12741
12741: DISABLE
// YouLostInMultiplayer ;
12742: CALL_OW 107
12746: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
12747: CALL 12133 0 0
12751: PUSH
12752: LD_LOC 31
12756: NOT
12757: AND
12758: IFFALSE 12774
12760: GO 12762
12762: DISABLE
// WaitServerStrings = [ $player-win ] ;
12763: LD_ADDR_EXP 59
12767: PUSH
12768: LD_STRING $player-win
12770: PUSH
12771: EMPTY
12772: LIST
12773: ST_TO_ADDR
12774: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
12775: CALL 12133 0 0
12779: PUSH
12780: LD_LOC 31
12784: AND
12785: IFFALSE 12809
12787: GO 12789
12789: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
12790: LD_EXP 22
12794: PUSH
12795: LD_OWVAR 2
12799: ARRAY
12800: PPUSH
12801: CALL 11811 0 1
// YouWinInMultiplayer ;
12805: CALL_OW 106
// end ;
12809: END
// every 100 trigger isEditor marked 401 do
12810: LD_OWVAR 84
12814: IFFALSE 12830
12816: GO 12818
12818: DISABLE
// Debug_Strings = [ You won ] ;
12819: LD_ADDR_OWVAR 48
12823: PUSH
12824: LD_STRING You won
12826: PUSH
12827: EMPTY
12828: LIST
12829: ST_TO_ADDR
12830: END
// every 100 trigger isEditor marked 400 do
12831: LD_OWVAR 84
12835: IFFALSE 12851
12837: GO 12839
12839: DISABLE
// Debug_Strings = [ You loss ] ;
12840: LD_ADDR_OWVAR 48
12844: PUSH
12845: LD_STRING You loss
12847: PUSH
12848: EMPTY
12849: LIST
12850: ST_TO_ADDR
12851: END
// every 100 marked 98 do var i , un ;
12852: GO 12854
12854: DISABLE
12855: LD_INT 0
12857: PPUSH
12858: PPUSH
// begin for i = 1 to side_positions do
12859: LD_ADDR_VAR 0 1
12863: PUSH
12864: DOUBLE
12865: LD_INT 1
12867: DEC
12868: ST_TO_ADDR
12869: LD_EXP 21
12873: PUSH
12874: FOR_TO
12875: IFFALSE 12998
// if side_positions [ i ] then
12877: LD_EXP 21
12881: PUSH
12882: LD_VAR 0 1
12886: ARRAY
12887: IFFALSE 12996
// if not HasPower ( i ) and not Defaited [ i ] then
12889: LD_VAR 0 1
12893: PPUSH
12894: CALL 12197 0 1
12898: NOT
12899: PUSH
12900: LD_LOC 30
12904: PUSH
12905: LD_VAR 0 1
12909: ARRAY
12910: NOT
12911: AND
12912: IFFALSE 12996
// begin un = filterallunits ( [ f_side , i ] ) ;
12914: LD_ADDR_VAR 0 2
12918: PUSH
12919: LD_INT 22
12921: PUSH
12922: LD_VAR 0 1
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PPUSH
12931: CALL_OW 69
12935: ST_TO_ADDR
// if un then
12936: LD_VAR 0 2
12940: IFFALSE 12954
// SetSide ( un , 0 ) ;
12942: LD_VAR 0 2
12946: PPUSH
12947: LD_INT 0
12949: PPUSH
12950: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
12954: LD_ADDR_LOC 30
12958: PUSH
12959: LD_LOC 30
12963: PPUSH
12964: LD_VAR 0 1
12968: PPUSH
12969: LD_INT 1
12971: PPUSH
12972: CALL_OW 1
12976: ST_TO_ADDR
// if i = your_side then
12977: LD_VAR 0 1
12981: PUSH
12982: LD_OWVAR 2
12986: EQUAL
12987: IFFALSE 12996
// begin Multiplayer_Loose_Message ;
12989: CALL_OW 521
// enable ( 400 ) ;
12993: LD_INT 400
12995: ENABLE_MARKED
// end ; end ;
12996: GO 12874
12998: POP
12999: POP
// if not Unfoged and defaited [ your_side ] then
13000: LD_LOC 32
13004: NOT
13005: PUSH
13006: LD_LOC 30
13010: PUSH
13011: LD_OWVAR 2
13015: ARRAY
13016: AND
13017: IFFALSE 13023
// Unfog ;
13019: CALL 13209 0 0
// DidGameEnd ;
13023: CALL 13038 0 0
// if not GameEnded then
13027: LD_LOC 31
13031: NOT
13032: IFFALSE 13035
// enable ;
13034: ENABLE
// end ;
13035: PPOPN 2
13037: END
// function DidGameEnd ; var i , k , enemy ; begin
13038: LD_INT 0
13040: PPUSH
13041: PPUSH
13042: PPUSH
13043: PPUSH
// enemy = [ ] ;
13044: LD_ADDR_VAR 0 4
13048: PUSH
13049: EMPTY
13050: ST_TO_ADDR
// for i = 1 to side_positions do
13051: LD_ADDR_VAR 0 2
13055: PUSH
13056: DOUBLE
13057: LD_INT 1
13059: DEC
13060: ST_TO_ADDR
13061: LD_EXP 21
13065: PUSH
13066: FOR_TO
13067: IFFALSE 13171
// if not defaited [ i ] then
13069: LD_LOC 30
13073: PUSH
13074: LD_VAR 0 2
13078: ARRAY
13079: NOT
13080: IFFALSE 13169
// for k = 1 to side_positions do
13082: LD_ADDR_VAR 0 3
13086: PUSH
13087: DOUBLE
13088: LD_INT 1
13090: DEC
13091: ST_TO_ADDR
13092: LD_EXP 21
13096: PUSH
13097: FOR_TO
13098: IFFALSE 13167
// if not defaited [ k ] then
13100: LD_LOC 30
13104: PUSH
13105: LD_VAR 0 3
13109: ARRAY
13110: NOT
13111: IFFALSE 13165
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
13113: LD_VAR 0 2
13117: PPUSH
13118: LD_VAR 0 3
13122: PPUSH
13123: CALL_OW 81
13127: PUSH
13128: LD_INT 2
13130: PUSH
13131: LD_INT 0
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: IN
13138: IFFALSE 13165
// enemy = enemy ^ [ i , k ] ;
13140: LD_ADDR_VAR 0 4
13144: PUSH
13145: LD_VAR 0 4
13149: PUSH
13150: LD_VAR 0 2
13154: PUSH
13155: LD_VAR 0 3
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: ADD
13164: ST_TO_ADDR
13165: GO 13097
13167: POP
13168: POP
13169: GO 13066
13171: POP
13172: POP
// if not enemy then
13173: LD_VAR 0 4
13177: NOT
13178: IFFALSE 13204
// begin GameEnded = true ;
13180: LD_ADDR_LOC 31
13184: PUSH
13185: LD_INT 1
13187: ST_TO_ADDR
// if not defaited [ your_side ] then
13188: LD_LOC 30
13192: PUSH
13193: LD_OWVAR 2
13197: ARRAY
13198: NOT
13199: IFFALSE 13204
// enable ( 401 ) ;
13201: LD_INT 401
13203: ENABLE_MARKED
// end ; end ;
13204: LD_VAR 0 1
13208: RET
// function unfog ; var k , friends ; begin
13209: LD_INT 0
13211: PPUSH
13212: PPUSH
13213: PPUSH
// for k = 1 to side_positions do
13214: LD_ADDR_VAR 0 2
13218: PUSH
13219: DOUBLE
13220: LD_INT 1
13222: DEC
13223: ST_TO_ADDR
13224: LD_EXP 21
13228: PUSH
13229: FOR_TO
13230: IFFALSE 13286
// if not defaited [ k ] then
13232: LD_LOC 30
13236: PUSH
13237: LD_VAR 0 2
13241: ARRAY
13242: NOT
13243: IFFALSE 13284
// if GetAttitude ( your_side , k ) in [ att_friend ] then
13245: LD_OWVAR 2
13249: PPUSH
13250: LD_VAR 0 2
13254: PPUSH
13255: CALL_OW 81
13259: PUSH
13260: LD_INT 1
13262: PUSH
13263: EMPTY
13264: LIST
13265: IN
13266: IFFALSE 13284
// friends = friends ^ k ;
13268: LD_ADDR_VAR 0 3
13272: PUSH
13273: LD_VAR 0 3
13277: PUSH
13278: LD_VAR 0 2
13282: ADD
13283: ST_TO_ADDR
13284: GO 13229
13286: POP
13287: POP
// if not friends then
13288: LD_VAR 0 3
13292: NOT
13293: IFFALSE 13310
// begin fogoff ( true ) ;
13295: LD_INT 1
13297: PPUSH
13298: CALL_OW 344
// unfoged = true ;
13302: LD_ADDR_LOC 32
13306: PUSH
13307: LD_INT 1
13309: ST_TO_ADDR
// end ; end ;
13310: LD_VAR 0 1
13314: RET
// export function MakeGameEnd ; begin
13315: LD_INT 0
13317: PPUSH
// fogoff ( true ) ;
13318: LD_INT 1
13320: PPUSH
13321: CALL_OW 344
// unfoged = true ;
13325: LD_ADDR_LOC 32
13329: PUSH
13330: LD_INT 1
13332: ST_TO_ADDR
// wait ( 0 0$5 ) ;
13333: LD_INT 175
13335: PPUSH
13336: CALL_OW 67
// GameEnded = true ;
13340: LD_ADDR_LOC 31
13344: PUSH
13345: LD_INT 1
13347: ST_TO_ADDR
// end ;
13348: LD_VAR 0 1
13352: RET
// export function GetGameEnded ; begin
13353: LD_INT 0
13355: PPUSH
// result = GameEnded ;
13356: LD_ADDR_VAR 0 1
13360: PUSH
13361: LD_LOC 31
13365: ST_TO_ADDR
// end ; end_of_file
13366: LD_VAR 0 1
13370: RET
// var win ; export function init_kings_counting ; var i ; begin
13371: LD_INT 0
13373: PPUSH
13374: PPUSH
// mp_with_score := true ;
13375: LD_ADDR_OWVAR 14
13379: PUSH
13380: LD_INT 1
13382: ST_TO_ADDR
// ResetMultiScore ;
13383: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
13387: LD_EXP 29
13391: PPUSH
13392: LD_INT 1
13394: PPUSH
13395: CALL_OW 424
// enable ( 2 ) ;
13399: LD_INT 2
13401: ENABLE_MARKED
// end ;
13402: LD_VAR 0 1
13406: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
13407: LD_INT 0
13409: PPUSH
13410: PPUSH
13411: PPUSH
13412: PPUSH
13413: PPUSH
13414: PPUSH
13415: PPUSH
13416: PPUSH
13417: PPUSH
// vypis := [ ] ;
13418: LD_ADDR_VAR 0 3
13422: PUSH
13423: EMPTY
13424: ST_TO_ADDR
// red = 0 ;
13425: LD_ADDR_VAR 0 5
13429: PUSH
13430: LD_INT 0
13432: ST_TO_ADDR
// blue = 0 ;
13433: LD_ADDR_VAR 0 6
13437: PUSH
13438: LD_INT 0
13440: ST_TO_ADDR
// yel = 0 ;
13441: LD_ADDR_VAR 0 7
13445: PUSH
13446: LD_INT 0
13448: ST_TO_ADDR
// green = 0 ;
13449: LD_ADDR_VAR 0 8
13453: PUSH
13454: LD_INT 0
13456: ST_TO_ADDR
// if def_public_score or isSGUI then
13457: LD_EXP 1
13461: PUSH
13462: LD_OWVAR 83
13466: OR
13467: IFFALSE 14082
// if not Team_Game then
13469: LD_EXP 23
13473: NOT
13474: IFFALSE 13606
// begin for side = 1 to Side_Positions do
13476: LD_ADDR_VAR 0 2
13480: PUSH
13481: DOUBLE
13482: LD_INT 1
13484: DEC
13485: ST_TO_ADDR
13486: LD_EXP 21
13490: PUSH
13491: FOR_TO
13492: IFFALSE 13602
// if Side_Positions [ side ] then
13494: LD_EXP 21
13498: PUSH
13499: LD_VAR 0 2
13503: ARRAY
13504: IFFALSE 13600
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
13506: LD_ADDR_VAR 0 3
13510: PUSH
13511: LD_VAR 0 3
13515: PUSH
13516: LD_STRING #KingoftheHill-Public
13518: PUSH
13519: LD_VAR 0 2
13523: PUSH
13524: LD_VAR 0 2
13528: PUSH
13529: LD_VAR 0 2
13533: PUSH
13534: LD_INT 10
13536: PLUS
13537: PPUSH
13538: CALL_OW 110
13542: PUSH
13543: LD_INT 3
13545: DIV
13546: PUSH
13547: LD_EXP 30
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: ADD
13559: ST_TO_ADDR
// ToLua ( updateScorePoints(2, & side & , & ( GetTag ( side + 10 ) div 3 ) & ); ) ;
13560: LD_STRING updateScorePoints(2,
13562: PUSH
13563: LD_VAR 0 2
13567: STR
13568: PUSH
13569: LD_STRING ,
13571: STR
13572: PUSH
13573: LD_VAR 0 2
13577: PUSH
13578: LD_INT 10
13580: PLUS
13581: PPUSH
13582: CALL_OW 110
13586: PUSH
13587: LD_INT 3
13589: DIV
13590: STR
13591: PUSH
13592: LD_STRING );
13594: STR
13595: PPUSH
13596: CALL_OW 559
// end ;
13600: GO 13491
13602: POP
13603: POP
// end else
13604: GO 14080
// begin if Teams [ 1 ] then
13606: LD_EXP 19
13610: PUSH
13611: LD_INT 1
13613: ARRAY
13614: IFFALSE 13666
// for i in Teams [ 1 ] do
13616: LD_ADDR_VAR 0 4
13620: PUSH
13621: LD_EXP 19
13625: PUSH
13626: LD_INT 1
13628: ARRAY
13629: PUSH
13630: FOR_IN
13631: IFFALSE 13664
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
13633: LD_ADDR_VAR 0 5
13637: PUSH
13638: LD_VAR 0 5
13642: PUSH
13643: LD_VAR 0 4
13647: PUSH
13648: LD_INT 10
13650: PLUS
13651: PPUSH
13652: CALL_OW 110
13656: PUSH
13657: LD_INT 3
13659: DIV
13660: PLUS
13661: ST_TO_ADDR
13662: GO 13630
13664: POP
13665: POP
// if Teams [ 2 ] then
13666: LD_EXP 19
13670: PUSH
13671: LD_INT 2
13673: ARRAY
13674: IFFALSE 13726
// for i in Teams [ 2 ] do
13676: LD_ADDR_VAR 0 4
13680: PUSH
13681: LD_EXP 19
13685: PUSH
13686: LD_INT 2
13688: ARRAY
13689: PUSH
13690: FOR_IN
13691: IFFALSE 13724
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
13693: LD_ADDR_VAR 0 6
13697: PUSH
13698: LD_VAR 0 6
13702: PUSH
13703: LD_VAR 0 4
13707: PUSH
13708: LD_INT 10
13710: PLUS
13711: PPUSH
13712: CALL_OW 110
13716: PUSH
13717: LD_INT 3
13719: DIV
13720: PLUS
13721: ST_TO_ADDR
13722: GO 13690
13724: POP
13725: POP
// if Teams [ 3 ] then
13726: LD_EXP 19
13730: PUSH
13731: LD_INT 3
13733: ARRAY
13734: IFFALSE 13786
// for i in Teams [ 3 ] do
13736: LD_ADDR_VAR 0 4
13740: PUSH
13741: LD_EXP 19
13745: PUSH
13746: LD_INT 3
13748: ARRAY
13749: PUSH
13750: FOR_IN
13751: IFFALSE 13784
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
13753: LD_ADDR_VAR 0 7
13757: PUSH
13758: LD_VAR 0 7
13762: PUSH
13763: LD_VAR 0 4
13767: PUSH
13768: LD_INT 10
13770: PLUS
13771: PPUSH
13772: CALL_OW 110
13776: PUSH
13777: LD_INT 3
13779: DIV
13780: PLUS
13781: ST_TO_ADDR
13782: GO 13750
13784: POP
13785: POP
// if Teams [ 4 ] then
13786: LD_EXP 19
13790: PUSH
13791: LD_INT 4
13793: ARRAY
13794: IFFALSE 13846
// for i in Teams [ 4 ] do
13796: LD_ADDR_VAR 0 4
13800: PUSH
13801: LD_EXP 19
13805: PUSH
13806: LD_INT 4
13808: ARRAY
13809: PUSH
13810: FOR_IN
13811: IFFALSE 13844
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
13813: LD_ADDR_VAR 0 8
13817: PUSH
13818: LD_VAR 0 8
13822: PUSH
13823: LD_VAR 0 4
13827: PUSH
13828: LD_INT 10
13830: PLUS
13831: PPUSH
13832: CALL_OW 110
13836: PUSH
13837: LD_INT 3
13839: DIV
13840: PLUS
13841: ST_TO_ADDR
13842: GO 13810
13844: POP
13845: POP
// if Teams [ 1 ] then
13846: LD_EXP 19
13850: PUSH
13851: LD_INT 1
13853: ARRAY
13854: IFFALSE 13883
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_STRING #KingoftheHill-Public-red
13863: PUSH
13864: LD_INT 3
13866: PUSH
13867: LD_VAR 0 5
13871: PUSH
13872: LD_EXP 30
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: ST_TO_ADDR
// if Teams [ 2 ] then
13883: LD_EXP 19
13887: PUSH
13888: LD_INT 2
13890: ARRAY
13891: IFFALSE 13926
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
13893: LD_ADDR_VAR 0 3
13897: PUSH
13898: LD_VAR 0 3
13902: PUSH
13903: LD_STRING #KingoftheHill-Public-blue
13905: PUSH
13906: LD_INT 1
13908: PUSH
13909: LD_VAR 0 6
13913: PUSH
13914: LD_EXP 30
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: ADD
13925: ST_TO_ADDR
// if Teams [ 3 ] then
13926: LD_EXP 19
13930: PUSH
13931: LD_INT 3
13933: ARRAY
13934: IFFALSE 13969
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
13936: LD_ADDR_VAR 0 3
13940: PUSH
13941: LD_VAR 0 3
13945: PUSH
13946: LD_STRING #KingoftheHill-Public-yell
13948: PUSH
13949: LD_INT 2
13951: PUSH
13952: LD_VAR 0 7
13956: PUSH
13957: LD_EXP 30
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: ADD
13968: ST_TO_ADDR
// if Teams [ 4 ] then
13969: LD_EXP 19
13973: PUSH
13974: LD_INT 4
13976: ARRAY
13977: IFFALSE 14012
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
13979: LD_ADDR_VAR 0 3
13983: PUSH
13984: LD_VAR 0 3
13988: PUSH
13989: LD_STRING #KingoftheHill-Public-green
13991: PUSH
13992: LD_INT 7
13994: PUSH
13995: LD_VAR 0 8
13999: PUSH
14000: LD_EXP 30
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: ADD
14011: ST_TO_ADDR
// ToLua ( updateScorePoints(2,3, & red & ); ) ;
14012: LD_STRING updateScorePoints(2,3,
14014: PUSH
14015: LD_VAR 0 5
14019: STR
14020: PUSH
14021: LD_STRING );
14023: STR
14024: PPUSH
14025: CALL_OW 559
// ToLua ( updateScorePoints(2,1, & blue & ); ) ;
14029: LD_STRING updateScorePoints(2,1,
14031: PUSH
14032: LD_VAR 0 6
14036: STR
14037: PUSH
14038: LD_STRING );
14040: STR
14041: PPUSH
14042: CALL_OW 559
// ToLua ( updateScorePoints(2,2, & yel & ); ) ;
14046: LD_STRING updateScorePoints(2,2,
14048: PUSH
14049: LD_VAR 0 7
14053: STR
14054: PUSH
14055: LD_STRING );
14057: STR
14058: PPUSH
14059: CALL_OW 559
// ToLua ( updateScorePoints(2,7, & green & ); ) ;
14063: LD_STRING updateScorePoints(2,7,
14065: PUSH
14066: LD_VAR 0 8
14070: STR
14071: PUSH
14072: LD_STRING );
14074: STR
14075: PPUSH
14076: CALL_OW 559
// end else
14080: GO 14517
// if not Team_Game then
14082: LD_EXP 23
14086: NOT
14087: IFFALSE 14145
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
14089: LD_ADDR_VAR 0 3
14093: PUSH
14094: LD_VAR 0 3
14098: PUSH
14099: LD_STRING #KingoftheHill-Private
14101: PUSH
14102: LD_OWVAR 2
14106: PUSH
14107: LD_OWVAR 2
14111: PUSH
14112: LD_VAR 0 2
14116: PUSH
14117: LD_INT 10
14119: PLUS
14120: PPUSH
14121: CALL_OW 110
14125: PUSH
14126: LD_INT 3
14128: DIV
14129: PUSH
14130: LD_EXP 30
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: ADD
14142: ST_TO_ADDR
14143: GO 14517
// begin for i in Teams [ 1 ] do
14145: LD_ADDR_VAR 0 4
14149: PUSH
14150: LD_EXP 19
14154: PUSH
14155: LD_INT 1
14157: ARRAY
14158: PUSH
14159: FOR_IN
14160: IFFALSE 14193
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14162: LD_ADDR_VAR 0 5
14166: PUSH
14167: LD_VAR 0 5
14171: PUSH
14172: LD_VAR 0 4
14176: PUSH
14177: LD_INT 10
14179: PLUS
14180: PPUSH
14181: CALL_OW 110
14185: PUSH
14186: LD_INT 3
14188: DIV
14189: PLUS
14190: ST_TO_ADDR
14191: GO 14159
14193: POP
14194: POP
// for i in Teams [ 2 ] do
14195: LD_ADDR_VAR 0 4
14199: PUSH
14200: LD_EXP 19
14204: PUSH
14205: LD_INT 2
14207: ARRAY
14208: PUSH
14209: FOR_IN
14210: IFFALSE 14243
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14212: LD_ADDR_VAR 0 6
14216: PUSH
14217: LD_VAR 0 6
14221: PUSH
14222: LD_VAR 0 4
14226: PUSH
14227: LD_INT 10
14229: PLUS
14230: PPUSH
14231: CALL_OW 110
14235: PUSH
14236: LD_INT 3
14238: DIV
14239: PLUS
14240: ST_TO_ADDR
14241: GO 14209
14243: POP
14244: POP
// for i in Teams [ 3 ] do
14245: LD_ADDR_VAR 0 4
14249: PUSH
14250: LD_EXP 19
14254: PUSH
14255: LD_INT 3
14257: ARRAY
14258: PUSH
14259: FOR_IN
14260: IFFALSE 14293
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14262: LD_ADDR_VAR 0 7
14266: PUSH
14267: LD_VAR 0 7
14271: PUSH
14272: LD_VAR 0 4
14276: PUSH
14277: LD_INT 10
14279: PLUS
14280: PPUSH
14281: CALL_OW 110
14285: PUSH
14286: LD_INT 3
14288: DIV
14289: PLUS
14290: ST_TO_ADDR
14291: GO 14259
14293: POP
14294: POP
// for i in Teams [ 4 ] do
14295: LD_ADDR_VAR 0 4
14299: PUSH
14300: LD_EXP 19
14304: PUSH
14305: LD_INT 4
14307: ARRAY
14308: PUSH
14309: FOR_IN
14310: IFFALSE 14343
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14312: LD_ADDR_VAR 0 8
14316: PUSH
14317: LD_VAR 0 8
14321: PUSH
14322: LD_VAR 0 4
14326: PUSH
14327: LD_INT 10
14329: PLUS
14330: PPUSH
14331: CALL_OW 110
14335: PUSH
14336: LD_INT 3
14338: DIV
14339: PLUS
14340: ST_TO_ADDR
14341: GO 14309
14343: POP
14344: POP
// if your_side in Teams [ 1 ] then
14345: LD_OWVAR 2
14349: PUSH
14350: LD_EXP 19
14354: PUSH
14355: LD_INT 1
14357: ARRAY
14358: IN
14359: IFFALSE 14388
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
14361: LD_ADDR_VAR 0 3
14365: PUSH
14366: LD_STRING #KingoftheHill-Public-red
14368: PUSH
14369: LD_INT 3
14371: PUSH
14372: LD_VAR 0 5
14376: PUSH
14377: LD_EXP 30
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
14388: LD_OWVAR 2
14392: PUSH
14393: LD_EXP 19
14397: PUSH
14398: LD_INT 2
14400: ARRAY
14401: IN
14402: IFFALSE 14431
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
14404: LD_ADDR_VAR 0 3
14408: PUSH
14409: LD_STRING #KingoftheHill-Public-blue
14411: PUSH
14412: LD_INT 1
14414: PUSH
14415: LD_VAR 0 6
14419: PUSH
14420: LD_EXP 30
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
14431: LD_OWVAR 2
14435: PUSH
14436: LD_EXP 19
14440: PUSH
14441: LD_INT 3
14443: ARRAY
14444: IN
14445: IFFALSE 14474
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: LD_STRING #KingoftheHill-Public-yell
14454: PUSH
14455: LD_INT 2
14457: PUSH
14458: LD_VAR 0 7
14462: PUSH
14463: LD_EXP 30
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
14474: LD_OWVAR 2
14478: PUSH
14479: LD_EXP 19
14483: PUSH
14484: LD_INT 4
14486: ARRAY
14487: IN
14488: IFFALSE 14517
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
14490: LD_ADDR_VAR 0 3
14494: PUSH
14495: LD_STRING #KingoftheHill-Public-green
14497: PUSH
14498: LD_INT 7
14500: PUSH
14501: LD_VAR 0 8
14505: PUSH
14506: LD_EXP 30
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: ST_TO_ADDR
// end ; Display_kings := vypis ;
14517: LD_ADDR_EXP 60
14521: PUSH
14522: LD_VAR 0 3
14526: ST_TO_ADDR
// end ;
14527: LD_VAR 0 1
14531: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
14532: LD_INT 0
14534: PPUSH
14535: PPUSH
14536: PPUSH
14537: PPUSH
14538: PPUSH
14539: PPUSH
14540: PPUSH
14541: PPUSH
14542: PPUSH
// side := [ ] ;
14543: LD_ADDR_VAR 0 2
14547: PUSH
14548: EMPTY
14549: ST_TO_ADDR
// red = 0 ;
14550: LD_ADDR_VAR 0 5
14554: PUSH
14555: LD_INT 0
14557: ST_TO_ADDR
// blue = 0 ;
14558: LD_ADDR_VAR 0 6
14562: PUSH
14563: LD_INT 0
14565: ST_TO_ADDR
// yel = 0 ;
14566: LD_ADDR_VAR 0 7
14570: PUSH
14571: LD_INT 0
14573: ST_TO_ADDR
// green = 0 ;
14574: LD_ADDR_VAR 0 8
14578: PUSH
14579: LD_INT 0
14581: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
14582: LD_ADDR_VAR 0 3
14586: PUSH
14587: LD_EXP 29
14591: PPUSH
14592: LD_INT 21
14594: PUSH
14595: LD_INT 3
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 53
14604: PUSH
14605: EMPTY
14606: LIST
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PPUSH
14612: CALL_OW 70
14616: ST_TO_ADDR
// for un in list do
14617: LD_ADDR_VAR 0 4
14621: PUSH
14622: LD_VAR 0 3
14626: PUSH
14627: FOR_IN
14628: IFFALSE 14653
// side := side union GetSide ( un ) ;
14630: LD_ADDR_VAR 0 2
14634: PUSH
14635: LD_VAR 0 2
14639: PUSH
14640: LD_VAR 0 4
14644: PPUSH
14645: CALL_OW 255
14649: UNION
14650: ST_TO_ADDR
14651: GO 14627
14653: POP
14654: POP
// if side <> 1 then
14655: LD_VAR 0 2
14659: PUSH
14660: LD_INT 1
14662: NONEQUAL
14663: IFFALSE 14667
// exit ;
14665: GO 15030
// side := side [ 1 ] ;
14667: LD_ADDR_VAR 0 2
14671: PUSH
14672: LD_VAR 0 2
14676: PUSH
14677: LD_INT 1
14679: ARRAY
14680: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
14681: LD_VAR 0 2
14685: PUSH
14686: LD_INT 10
14688: PLUS
14689: PPUSH
14690: LD_VAR 0 2
14694: PUSH
14695: LD_INT 10
14697: PLUS
14698: PPUSH
14699: CALL_OW 110
14703: PUSH
14704: LD_INT 1
14706: PLUS
14707: PPUSH
14708: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
14712: LD_VAR 0 2
14716: PPUSH
14717: LD_VAR 0 2
14721: PUSH
14722: LD_INT 10
14724: PLUS
14725: PPUSH
14726: CALL_OW 110
14730: PUSH
14731: LD_INT 3
14733: DIV
14734: PPUSH
14735: LD_INT 2
14737: PPUSH
14738: CALL 11592 0 3
// if not Team_Game then
14742: LD_EXP 23
14746: NOT
14747: IFFALSE 15030
// if GetTag ( side + 10 ) >= final_count * 3 then
14749: LD_VAR 0 2
14753: PUSH
14754: LD_INT 10
14756: PLUS
14757: PPUSH
14758: CALL_OW 110
14762: PUSH
14763: LD_EXP 30
14767: PUSH
14768: LD_INT 3
14770: MUL
14771: GREATEREQUAL
14772: IFFALSE 14779
// enable ( 3 ) else
14774: LD_INT 3
14776: ENABLE_MARKED
14777: GO 15030
// begin for i in Teams [ 1 ] do
14779: LD_ADDR_VAR 0 9
14783: PUSH
14784: LD_EXP 19
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PUSH
14793: FOR_IN
14794: IFFALSE 14827
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14796: LD_ADDR_VAR 0 5
14800: PUSH
14801: LD_VAR 0 5
14805: PUSH
14806: LD_VAR 0 9
14810: PUSH
14811: LD_INT 10
14813: PLUS
14814: PPUSH
14815: CALL_OW 110
14819: PUSH
14820: LD_INT 3
14822: DIV
14823: PLUS
14824: ST_TO_ADDR
14825: GO 14793
14827: POP
14828: POP
// for i in Teams [ 2 ] do
14829: LD_ADDR_VAR 0 9
14833: PUSH
14834: LD_EXP 19
14838: PUSH
14839: LD_INT 2
14841: ARRAY
14842: PUSH
14843: FOR_IN
14844: IFFALSE 14877
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14846: LD_ADDR_VAR 0 6
14850: PUSH
14851: LD_VAR 0 6
14855: PUSH
14856: LD_VAR 0 9
14860: PUSH
14861: LD_INT 10
14863: PLUS
14864: PPUSH
14865: CALL_OW 110
14869: PUSH
14870: LD_INT 3
14872: DIV
14873: PLUS
14874: ST_TO_ADDR
14875: GO 14843
14877: POP
14878: POP
// for i in Teams [ 3 ] do
14879: LD_ADDR_VAR 0 9
14883: PUSH
14884: LD_EXP 19
14888: PUSH
14889: LD_INT 3
14891: ARRAY
14892: PUSH
14893: FOR_IN
14894: IFFALSE 14927
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14896: LD_ADDR_VAR 0 7
14900: PUSH
14901: LD_VAR 0 7
14905: PUSH
14906: LD_VAR 0 9
14910: PUSH
14911: LD_INT 10
14913: PLUS
14914: PPUSH
14915: CALL_OW 110
14919: PUSH
14920: LD_INT 3
14922: DIV
14923: PLUS
14924: ST_TO_ADDR
14925: GO 14893
14927: POP
14928: POP
// for i in Teams [ 4 ] do
14929: LD_ADDR_VAR 0 9
14933: PUSH
14934: LD_EXP 19
14938: PUSH
14939: LD_INT 4
14941: ARRAY
14942: PUSH
14943: FOR_IN
14944: IFFALSE 14977
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14946: LD_ADDR_VAR 0 8
14950: PUSH
14951: LD_VAR 0 8
14955: PUSH
14956: LD_VAR 0 9
14960: PUSH
14961: LD_INT 10
14963: PLUS
14964: PPUSH
14965: CALL_OW 110
14969: PUSH
14970: LD_INT 3
14972: DIV
14973: PLUS
14974: ST_TO_ADDR
14975: GO 14943
14977: POP
14978: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
14979: LD_VAR 0 5
14983: PUSH
14984: LD_EXP 30
14988: GREATEREQUAL
14989: PUSH
14990: LD_VAR 0 6
14994: PUSH
14995: LD_EXP 30
14999: GREATEREQUAL
15000: OR
15001: PUSH
15002: LD_VAR 0 7
15006: PUSH
15007: LD_EXP 30
15011: GREATEREQUAL
15012: OR
15013: PUSH
15014: LD_VAR 0 8
15018: PUSH
15019: LD_EXP 30
15023: GREATEREQUAL
15024: OR
15025: IFFALSE 15030
// enable ( 3 ) ;
15027: LD_INT 3
15029: ENABLE_MARKED
// end ; end ;
15030: LD_VAR 0 1
15034: RET
// every 0 0$1 marked 2 do
15035: GO 15037
15037: DISABLE
// begin count_king ;
15038: CALL 14532 0 0
// show_public_points ;
15042: CALL 13407 0 0
// enable ;
15046: ENABLE
// end ;
15047: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
15048: GO 15050
15050: DISABLE
15051: LD_INT 0
15053: PPUSH
15054: PPUSH
15055: PPUSH
15056: PPUSH
15057: PPUSH
15058: PPUSH
// begin win := [ ] ;
15059: LD_ADDR_LOC 33
15063: PUSH
15064: EMPTY
15065: ST_TO_ADDR
// red = 0 ;
15066: LD_ADDR_VAR 0 2
15070: PUSH
15071: LD_INT 0
15073: ST_TO_ADDR
// blue = 0 ;
15074: LD_ADDR_VAR 0 3
15078: PUSH
15079: LD_INT 0
15081: ST_TO_ADDR
// yel = 0 ;
15082: LD_ADDR_VAR 0 4
15086: PUSH
15087: LD_INT 0
15089: ST_TO_ADDR
// green = 0 ;
15090: LD_ADDR_VAR 0 5
15094: PUSH
15095: LD_INT 0
15097: ST_TO_ADDR
// if not Team_Game then
15098: LD_EXP 23
15102: NOT
15103: IFFALSE 15180
// begin for side = 1 to 8 do
15105: LD_ADDR_VAR 0 1
15109: PUSH
15110: DOUBLE
15111: LD_INT 1
15113: DEC
15114: ST_TO_ADDR
15115: LD_INT 8
15117: PUSH
15118: FOR_TO
15119: IFFALSE 15164
// if GetTag ( side + 10 ) >= final_count * 3 then
15121: LD_VAR 0 1
15125: PUSH
15126: LD_INT 10
15128: PLUS
15129: PPUSH
15130: CALL_OW 110
15134: PUSH
15135: LD_EXP 30
15139: PUSH
15140: LD_INT 3
15142: MUL
15143: GREATEREQUAL
15144: IFFALSE 15162
// win := win ^ side ;
15146: LD_ADDR_LOC 33
15150: PUSH
15151: LD_LOC 33
15155: PUSH
15156: LD_VAR 0 1
15160: ADD
15161: ST_TO_ADDR
15162: GO 15118
15164: POP
15165: POP
// if win then
15166: LD_LOC 33
15170: IFFALSE 15177
// enable ( 4 ) else
15172: LD_INT 4
15174: ENABLE_MARKED
15175: GO 15178
// enable ;
15177: ENABLE
// end else
15178: GO 15496
// begin for i in Teams [ 1 ] do
15180: LD_ADDR_VAR 0 6
15184: PUSH
15185: LD_EXP 19
15189: PUSH
15190: LD_INT 1
15192: ARRAY
15193: PUSH
15194: FOR_IN
15195: IFFALSE 15228
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
15197: LD_ADDR_VAR 0 2
15201: PUSH
15202: LD_VAR 0 2
15206: PUSH
15207: LD_VAR 0 6
15211: PUSH
15212: LD_INT 10
15214: PLUS
15215: PPUSH
15216: CALL_OW 110
15220: PUSH
15221: LD_INT 3
15223: DIV
15224: PLUS
15225: ST_TO_ADDR
15226: GO 15194
15228: POP
15229: POP
// for i in Teams [ 2 ] do
15230: LD_ADDR_VAR 0 6
15234: PUSH
15235: LD_EXP 19
15239: PUSH
15240: LD_INT 2
15242: ARRAY
15243: PUSH
15244: FOR_IN
15245: IFFALSE 15278
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
15247: LD_ADDR_VAR 0 3
15251: PUSH
15252: LD_VAR 0 3
15256: PUSH
15257: LD_VAR 0 6
15261: PUSH
15262: LD_INT 10
15264: PLUS
15265: PPUSH
15266: CALL_OW 110
15270: PUSH
15271: LD_INT 3
15273: DIV
15274: PLUS
15275: ST_TO_ADDR
15276: GO 15244
15278: POP
15279: POP
// for i in Teams [ 3 ] do
15280: LD_ADDR_VAR 0 6
15284: PUSH
15285: LD_EXP 19
15289: PUSH
15290: LD_INT 3
15292: ARRAY
15293: PUSH
15294: FOR_IN
15295: IFFALSE 15328
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
15297: LD_ADDR_VAR 0 4
15301: PUSH
15302: LD_VAR 0 4
15306: PUSH
15307: LD_VAR 0 6
15311: PUSH
15312: LD_INT 10
15314: PLUS
15315: PPUSH
15316: CALL_OW 110
15320: PUSH
15321: LD_INT 3
15323: DIV
15324: PLUS
15325: ST_TO_ADDR
15326: GO 15294
15328: POP
15329: POP
// for i in Teams [ 4 ] do
15330: LD_ADDR_VAR 0 6
15334: PUSH
15335: LD_EXP 19
15339: PUSH
15340: LD_INT 4
15342: ARRAY
15343: PUSH
15344: FOR_IN
15345: IFFALSE 15378
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
15347: LD_ADDR_VAR 0 5
15351: PUSH
15352: LD_VAR 0 5
15356: PUSH
15357: LD_VAR 0 6
15361: PUSH
15362: LD_INT 10
15364: PLUS
15365: PPUSH
15366: CALL_OW 110
15370: PUSH
15371: LD_INT 3
15373: DIV
15374: PLUS
15375: ST_TO_ADDR
15376: GO 15344
15378: POP
15379: POP
// if red >= final_count then
15380: LD_VAR 0 2
15384: PUSH
15385: LD_EXP 30
15389: GREATEREQUAL
15390: IFFALSE 15406
// win = teams [ 1 ] ;
15392: LD_ADDR_LOC 33
15396: PUSH
15397: LD_EXP 19
15401: PUSH
15402: LD_INT 1
15404: ARRAY
15405: ST_TO_ADDR
// if blue >= final_count then
15406: LD_VAR 0 3
15410: PUSH
15411: LD_EXP 30
15415: GREATEREQUAL
15416: IFFALSE 15432
// win = teams [ 2 ] ;
15418: LD_ADDR_LOC 33
15422: PUSH
15423: LD_EXP 19
15427: PUSH
15428: LD_INT 2
15430: ARRAY
15431: ST_TO_ADDR
// if yel >= final_count then
15432: LD_VAR 0 4
15436: PUSH
15437: LD_EXP 30
15441: GREATEREQUAL
15442: IFFALSE 15458
// win = teams [ 3 ] ;
15444: LD_ADDR_LOC 33
15448: PUSH
15449: LD_EXP 19
15453: PUSH
15454: LD_INT 3
15456: ARRAY
15457: ST_TO_ADDR
// if green >= final_count then
15458: LD_VAR 0 5
15462: PUSH
15463: LD_EXP 30
15467: GREATEREQUAL
15468: IFFALSE 15484
// win = teams [ 4 ] ;
15470: LD_ADDR_LOC 33
15474: PUSH
15475: LD_EXP 19
15479: PUSH
15480: LD_INT 4
15482: ARRAY
15483: ST_TO_ADDR
// if win then
15484: LD_LOC 33
15488: IFFALSE 15495
// enable ( 4 ) else
15490: LD_INT 4
15492: ENABLE_MARKED
15493: GO 15496
// enable ;
15495: ENABLE
// end ; end ;
15496: PPOPN 6
15498: END
// every 0 0$1 marked 4 do
15499: GO 15501
15501: DISABLE
// begin if Player_Side in win then
15502: LD_EXP 31
15506: PUSH
15507: LD_LOC 33
15511: IN
15512: IFFALSE 15528
// begin wait ( 0 0$2 ) ;
15514: LD_INT 70
15516: PPUSH
15517: CALL_OW 67
// enable ( 401 ) ;
15521: LD_INT 401
15523: ENABLE_MARKED
// exit ;
15524: GO 15544
// end else
15526: GO 15544
// begin wait ( 0 0$2 ) ;
15528: LD_INT 70
15530: PPUSH
15531: CALL_OW 67
// Multiplayer_Loose_Message ;
15535: CALL_OW 521
// enable ( 400 ) ;
15539: LD_INT 400
15541: ENABLE_MARKED
// exit ;
15542: GO 15544
// end ; end ; end_of_file
15544: END
// export function SetMpTechs ( ) ; var side , i ; begin
15545: LD_INT 0
15547: PPUSH
15548: PPUSH
15549: PPUSH
// for side = 1 to 8 do
15550: LD_ADDR_VAR 0 2
15554: PUSH
15555: DOUBLE
15556: LD_INT 1
15558: DEC
15559: ST_TO_ADDR
15560: LD_INT 8
15562: PUSH
15563: FOR_TO
15564: IFFALSE 15685
// begin for i = 1 to 72 do
15566: LD_ADDR_VAR 0 3
15570: PUSH
15571: DOUBLE
15572: LD_INT 1
15574: DEC
15575: ST_TO_ADDR
15576: LD_INT 72
15578: PUSH
15579: FOR_TO
15580: IFFALSE 15611
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15582: LD_VAR 0 3
15586: PPUSH
15587: LD_VAR 0 2
15591: PPUSH
15592: LD_INT 0
15594: PPUSH
15595: LD_VAR 0 3
15599: PPUSH
15600: CALL_OW 565
15604: PPUSH
15605: CALL_OW 322
15609: GO 15579
15611: POP
15612: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15613: LD_INT 73
15615: PPUSH
15616: LD_VAR 0 2
15620: PPUSH
15621: LD_INT 0
15623: PPUSH
15624: LD_INT 25
15626: PPUSH
15627: CALL_OW 565
15631: PPUSH
15632: CALL_OW 322
// for i = 0 to 40 do
15636: LD_ADDR_VAR 0 3
15640: PUSH
15641: DOUBLE
15642: LD_INT 0
15644: DEC
15645: ST_TO_ADDR
15646: LD_INT 40
15648: PUSH
15649: FOR_TO
15650: IFFALSE 15681
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15652: LD_VAR 0 3
15656: PPUSH
15657: LD_VAR 0 2
15661: PPUSH
15662: LD_INT 1
15664: PPUSH
15665: LD_VAR 0 3
15669: PPUSH
15670: CALL_OW 565
15674: PPUSH
15675: CALL_OW 324
15679: GO 15649
15681: POP
15682: POP
// end ;
15683: GO 15563
15685: POP
15686: POP
// end ;
15687: LD_VAR 0 1
15691: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15692: LD_INT 0
15694: PPUSH
15695: PPUSH
15696: PPUSH
// for side = 1 to 8 do
15697: LD_ADDR_VAR 0 3
15701: PUSH
15702: DOUBLE
15703: LD_INT 1
15705: DEC
15706: ST_TO_ADDR
15707: LD_INT 8
15709: PUSH
15710: FOR_TO
15711: IFFALSE 19707
// begin for i = 1 to 73 do
15713: LD_ADDR_VAR 0 4
15717: PUSH
15718: DOUBLE
15719: LD_INT 1
15721: DEC
15722: ST_TO_ADDR
15723: LD_INT 73
15725: PUSH
15726: FOR_TO
15727: IFFALSE 15748
// SetTech ( i , side , state_disabled ) ;
15729: LD_VAR 0 4
15733: PPUSH
15734: LD_VAR 0 3
15738: PPUSH
15739: LD_INT 0
15741: PPUSH
15742: CALL_OW 322
15746: GO 15726
15748: POP
15749: POP
// for i = 0 to 40 do
15750: LD_ADDR_VAR 0 4
15754: PUSH
15755: DOUBLE
15756: LD_INT 0
15758: DEC
15759: ST_TO_ADDR
15760: LD_INT 40
15762: PUSH
15763: FOR_TO
15764: IFFALSE 15785
// SetRestrict ( i , side , false ) ;
15766: LD_VAR 0 4
15770: PPUSH
15771: LD_VAR 0 3
15775: PPUSH
15776: LD_INT 0
15778: PPUSH
15779: CALL_OW 324
15783: GO 15763
15785: POP
15786: POP
// case level of 1 :
15787: LD_VAR 0 1
15791: PUSH
15792: LD_INT 1
15794: DOUBLE
15795: EQUAL
15796: IFTRUE 15800
15798: GO 15953
15800: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15801: LD_INT 35
15803: PPUSH
15804: LD_VAR 0 3
15808: PPUSH
15809: LD_INT 1
15811: PPUSH
15812: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15816: LD_INT 45
15818: PPUSH
15819: LD_VAR 0 3
15823: PPUSH
15824: LD_INT 1
15826: PPUSH
15827: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15831: LD_INT 46
15833: PPUSH
15834: LD_VAR 0 3
15838: PPUSH
15839: LD_INT 1
15841: PPUSH
15842: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15846: LD_INT 47
15848: PPUSH
15849: LD_VAR 0 3
15853: PPUSH
15854: LD_INT 1
15856: PPUSH
15857: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15861: LD_INT 0
15863: PPUSH
15864: LD_VAR 0 3
15868: PPUSH
15869: LD_INT 1
15871: PPUSH
15872: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15876: LD_INT 2
15878: PPUSH
15879: LD_VAR 0 3
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15891: LD_INT 4
15893: PPUSH
15894: LD_VAR 0 3
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15906: LD_INT 6
15908: PPUSH
15909: LD_VAR 0 3
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15921: LD_INT 29
15923: PPUSH
15924: LD_VAR 0 3
15928: PPUSH
15929: LD_INT 1
15931: PPUSH
15932: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15936: LD_INT 31
15938: PPUSH
15939: LD_VAR 0 3
15943: PPUSH
15944: LD_INT 1
15946: PPUSH
15947: CALL_OW 324
// end ; 2 :
15951: GO 19705
15953: LD_INT 2
15955: DOUBLE
15956: EQUAL
15957: IFTRUE 15961
15959: GO 16159
15961: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15962: LD_INT 35
15964: PPUSH
15965: LD_VAR 0 3
15969: PPUSH
15970: LD_INT 1
15972: PPUSH
15973: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15977: LD_INT 45
15979: PPUSH
15980: LD_VAR 0 3
15984: PPUSH
15985: LD_INT 1
15987: PPUSH
15988: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15992: LD_INT 46
15994: PPUSH
15995: LD_VAR 0 3
15999: PPUSH
16000: LD_INT 1
16002: PPUSH
16003: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16007: LD_INT 47
16009: PPUSH
16010: LD_VAR 0 3
16014: PPUSH
16015: LD_INT 1
16017: PPUSH
16018: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16022: LD_INT 1
16024: PPUSH
16025: LD_VAR 0 3
16029: PPUSH
16030: LD_INT 1
16032: PPUSH
16033: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16037: LD_INT 2
16039: PPUSH
16040: LD_VAR 0 3
16044: PPUSH
16045: LD_INT 1
16047: PPUSH
16048: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16052: LD_INT 11
16054: PPUSH
16055: LD_VAR 0 3
16059: PPUSH
16060: LD_INT 1
16062: PPUSH
16063: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16067: LD_INT 0
16069: PPUSH
16070: LD_VAR 0 3
16074: PPUSH
16075: LD_INT 1
16077: PPUSH
16078: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16082: LD_INT 2
16084: PPUSH
16085: LD_VAR 0 3
16089: PPUSH
16090: LD_INT 1
16092: PPUSH
16093: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16097: LD_INT 4
16099: PPUSH
16100: LD_VAR 0 3
16104: PPUSH
16105: LD_INT 1
16107: PPUSH
16108: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16112: LD_INT 6
16114: PPUSH
16115: LD_VAR 0 3
16119: PPUSH
16120: LD_INT 1
16122: PPUSH
16123: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16127: LD_INT 29
16129: PPUSH
16130: LD_VAR 0 3
16134: PPUSH
16135: LD_INT 1
16137: PPUSH
16138: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16142: LD_INT 31
16144: PPUSH
16145: LD_VAR 0 3
16149: PPUSH
16150: LD_INT 1
16152: PPUSH
16153: CALL_OW 324
// end ; 3 :
16157: GO 19705
16159: LD_INT 3
16161: DOUBLE
16162: EQUAL
16163: IFTRUE 16167
16165: GO 16620
16167: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16168: LD_INT 35
16170: PPUSH
16171: LD_VAR 0 3
16175: PPUSH
16176: LD_INT 1
16178: PPUSH
16179: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16183: LD_INT 45
16185: PPUSH
16186: LD_VAR 0 3
16190: PPUSH
16191: LD_INT 1
16193: PPUSH
16194: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16198: LD_INT 46
16200: PPUSH
16201: LD_VAR 0 3
16205: PPUSH
16206: LD_INT 1
16208: PPUSH
16209: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16213: LD_INT 47
16215: PPUSH
16216: LD_VAR 0 3
16220: PPUSH
16221: LD_INT 1
16223: PPUSH
16224: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16228: LD_INT 1
16230: PPUSH
16231: LD_VAR 0 3
16235: PPUSH
16236: LD_INT 1
16238: PPUSH
16239: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16243: LD_INT 2
16245: PPUSH
16246: LD_VAR 0 3
16250: PPUSH
16251: LD_INT 1
16253: PPUSH
16254: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16258: LD_INT 11
16260: PPUSH
16261: LD_VAR 0 3
16265: PPUSH
16266: LD_INT 1
16268: PPUSH
16269: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16273: LD_INT 48
16275: PPUSH
16276: LD_VAR 0 3
16280: PPUSH
16281: LD_INT 1
16283: PPUSH
16284: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16288: LD_INT 69
16290: PPUSH
16291: LD_VAR 0 3
16295: PPUSH
16296: LD_INT 1
16298: PPUSH
16299: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16303: LD_INT 39
16305: PPUSH
16306: LD_VAR 0 3
16310: PPUSH
16311: LD_INT 1
16313: PPUSH
16314: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16318: LD_INT 43
16320: PPUSH
16321: LD_VAR 0 3
16325: PPUSH
16326: LD_INT 1
16328: PPUSH
16329: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16333: LD_INT 51
16335: PPUSH
16336: LD_VAR 0 3
16340: PPUSH
16341: LD_INT 1
16343: PPUSH
16344: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16348: LD_INT 6
16350: PPUSH
16351: LD_VAR 0 3
16355: PPUSH
16356: LD_INT 1
16358: PPUSH
16359: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16363: LD_INT 0
16365: PPUSH
16366: LD_VAR 0 3
16370: PPUSH
16371: LD_INT 1
16373: PPUSH
16374: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16378: LD_INT 2
16380: PPUSH
16381: LD_VAR 0 3
16385: PPUSH
16386: LD_INT 1
16388: PPUSH
16389: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16393: LD_INT 3
16395: PPUSH
16396: LD_VAR 0 3
16400: PPUSH
16401: LD_INT 1
16403: PPUSH
16404: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16408: LD_INT 4
16410: PPUSH
16411: LD_VAR 0 3
16415: PPUSH
16416: LD_INT 1
16418: PPUSH
16419: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16423: LD_INT 6
16425: PPUSH
16426: LD_VAR 0 3
16430: PPUSH
16431: LD_INT 1
16433: PPUSH
16434: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16438: LD_INT 7
16440: PPUSH
16441: LD_VAR 0 3
16445: PPUSH
16446: LD_INT 1
16448: PPUSH
16449: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16453: LD_INT 8
16455: PPUSH
16456: LD_VAR 0 3
16460: PPUSH
16461: LD_INT 1
16463: PPUSH
16464: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16468: LD_INT 10
16470: PPUSH
16471: LD_VAR 0 3
16475: PPUSH
16476: LD_INT 1
16478: PPUSH
16479: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16483: LD_INT 15
16485: PPUSH
16486: LD_VAR 0 3
16490: PPUSH
16491: LD_INT 1
16493: PPUSH
16494: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16498: LD_INT 16
16500: PPUSH
16501: LD_VAR 0 3
16505: PPUSH
16506: LD_INT 1
16508: PPUSH
16509: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16513: LD_INT 17
16515: PPUSH
16516: LD_VAR 0 3
16520: PPUSH
16521: LD_INT 1
16523: PPUSH
16524: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16528: LD_INT 20
16530: PPUSH
16531: LD_VAR 0 3
16535: PPUSH
16536: LD_INT 1
16538: PPUSH
16539: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16543: LD_INT 26
16545: PPUSH
16546: LD_VAR 0 3
16550: PPUSH
16551: LD_INT 1
16553: PPUSH
16554: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16558: LD_INT 27
16560: PPUSH
16561: LD_VAR 0 3
16565: PPUSH
16566: LD_INT 1
16568: PPUSH
16569: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16573: LD_INT 29
16575: PPUSH
16576: LD_VAR 0 3
16580: PPUSH
16581: LD_INT 1
16583: PPUSH
16584: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16588: LD_INT 31
16590: PPUSH
16591: LD_VAR 0 3
16595: PPUSH
16596: LD_INT 1
16598: PPUSH
16599: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16603: LD_INT 32
16605: PPUSH
16606: LD_VAR 0 3
16610: PPUSH
16611: LD_INT 1
16613: PPUSH
16614: CALL_OW 324
// end ; 4 :
16618: GO 19705
16620: LD_INT 4
16622: DOUBLE
16623: EQUAL
16624: IFTRUE 16628
16626: GO 17576
16628: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16629: LD_INT 35
16631: PPUSH
16632: LD_VAR 0 3
16636: PPUSH
16637: LD_INT 1
16639: PPUSH
16640: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16644: LD_INT 45
16646: PPUSH
16647: LD_VAR 0 3
16651: PPUSH
16652: LD_INT 1
16654: PPUSH
16655: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16659: LD_INT 46
16661: PPUSH
16662: LD_VAR 0 3
16666: PPUSH
16667: LD_INT 1
16669: PPUSH
16670: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16674: LD_INT 47
16676: PPUSH
16677: LD_VAR 0 3
16681: PPUSH
16682: LD_INT 1
16684: PPUSH
16685: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16689: LD_INT 1
16691: PPUSH
16692: LD_VAR 0 3
16696: PPUSH
16697: LD_INT 1
16699: PPUSH
16700: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16704: LD_INT 2
16706: PPUSH
16707: LD_VAR 0 3
16711: PPUSH
16712: LD_INT 1
16714: PPUSH
16715: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16719: LD_INT 11
16721: PPUSH
16722: LD_VAR 0 3
16726: PPUSH
16727: LD_INT 1
16729: PPUSH
16730: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16734: LD_INT 20
16736: PPUSH
16737: LD_VAR 0 3
16741: PPUSH
16742: LD_INT 1
16744: PPUSH
16745: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16749: LD_INT 48
16751: PPUSH
16752: LD_VAR 0 3
16756: PPUSH
16757: LD_INT 1
16759: PPUSH
16760: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16764: LD_INT 49
16766: PPUSH
16767: LD_VAR 0 3
16771: PPUSH
16772: LD_INT 1
16774: PPUSH
16775: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16779: LD_INT 69
16781: PPUSH
16782: LD_VAR 0 3
16786: PPUSH
16787: LD_INT 1
16789: PPUSH
16790: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16794: LD_INT 39
16796: PPUSH
16797: LD_VAR 0 3
16801: PPUSH
16802: LD_INT 1
16804: PPUSH
16805: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16809: LD_INT 34
16811: PPUSH
16812: LD_VAR 0 3
16816: PPUSH
16817: LD_INT 1
16819: PPUSH
16820: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16824: LD_INT 42
16826: PPUSH
16827: LD_VAR 0 3
16831: PPUSH
16832: LD_INT 1
16834: PPUSH
16835: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16839: LD_INT 44
16841: PPUSH
16842: LD_VAR 0 3
16846: PPUSH
16847: LD_INT 1
16849: PPUSH
16850: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16854: LD_INT 41
16856: PPUSH
16857: LD_VAR 0 3
16861: PPUSH
16862: LD_INT 1
16864: PPUSH
16865: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16869: LD_INT 43
16871: PPUSH
16872: LD_VAR 0 3
16876: PPUSH
16877: LD_INT 1
16879: PPUSH
16880: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16884: LD_INT 70
16886: PPUSH
16887: LD_VAR 0 3
16891: PPUSH
16892: LD_INT 1
16894: PPUSH
16895: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16899: LD_INT 51
16901: PPUSH
16902: LD_VAR 0 3
16906: PPUSH
16907: LD_INT 1
16909: PPUSH
16910: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16914: LD_INT 52
16916: PPUSH
16917: LD_VAR 0 3
16921: PPUSH
16922: LD_INT 1
16924: PPUSH
16925: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16929: LD_INT 6
16931: PPUSH
16932: LD_VAR 0 3
16936: PPUSH
16937: LD_INT 1
16939: PPUSH
16940: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16944: LD_INT 15
16946: PPUSH
16947: LD_VAR 0 3
16951: PPUSH
16952: LD_INT 1
16954: PPUSH
16955: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16959: LD_INT 7
16961: PPUSH
16962: LD_VAR 0 3
16966: PPUSH
16967: LD_INT 1
16969: PPUSH
16970: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16974: LD_INT 12
16976: PPUSH
16977: LD_VAR 0 3
16981: PPUSH
16982: LD_INT 1
16984: PPUSH
16985: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16989: LD_INT 18
16991: PPUSH
16992: LD_VAR 0 3
16996: PPUSH
16997: LD_INT 1
16999: PPUSH
17000: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17004: LD_INT 60
17006: PPUSH
17007: LD_VAR 0 3
17011: PPUSH
17012: LD_INT 1
17014: PPUSH
17015: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17019: LD_INT 9
17021: PPUSH
17022: LD_VAR 0 3
17026: PPUSH
17027: LD_INT 1
17029: PPUSH
17030: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17034: LD_INT 30
17036: PPUSH
17037: LD_VAR 0 3
17041: PPUSH
17042: LD_INT 1
17044: PPUSH
17045: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17049: LD_INT 37
17051: PPUSH
17052: LD_VAR 0 3
17056: PPUSH
17057: LD_INT 1
17059: PPUSH
17060: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17064: LD_INT 5
17066: PPUSH
17067: LD_VAR 0 3
17071: PPUSH
17072: LD_INT 1
17074: PPUSH
17075: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17079: LD_INT 66
17081: PPUSH
17082: LD_VAR 0 3
17086: PPUSH
17087: LD_INT 1
17089: PPUSH
17090: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17094: LD_INT 21
17096: PPUSH
17097: LD_VAR 0 3
17101: PPUSH
17102: LD_INT 1
17104: PPUSH
17105: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17109: LD_INT 22
17111: PPUSH
17112: LD_VAR 0 3
17116: PPUSH
17117: LD_INT 1
17119: PPUSH
17120: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17124: LD_INT 54
17126: PPUSH
17127: LD_VAR 0 3
17131: PPUSH
17132: LD_INT 1
17134: PPUSH
17135: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17139: LD_INT 0
17141: PPUSH
17142: LD_VAR 0 3
17146: PPUSH
17147: LD_INT 1
17149: PPUSH
17150: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17154: LD_INT 1
17156: PPUSH
17157: LD_VAR 0 3
17161: PPUSH
17162: LD_INT 1
17164: PPUSH
17165: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17169: LD_INT 2
17171: PPUSH
17172: LD_VAR 0 3
17176: PPUSH
17177: LD_INT 1
17179: PPUSH
17180: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17184: LD_INT 3
17186: PPUSH
17187: LD_VAR 0 3
17191: PPUSH
17192: LD_INT 1
17194: PPUSH
17195: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17199: LD_INT 4
17201: PPUSH
17202: LD_VAR 0 3
17206: PPUSH
17207: LD_INT 1
17209: PPUSH
17210: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17214: LD_INT 5
17216: PPUSH
17217: LD_VAR 0 3
17221: PPUSH
17222: LD_INT 1
17224: PPUSH
17225: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17229: LD_INT 6
17231: PPUSH
17232: LD_VAR 0 3
17236: PPUSH
17237: LD_INT 1
17239: PPUSH
17240: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17244: LD_INT 7
17246: PPUSH
17247: LD_VAR 0 3
17251: PPUSH
17252: LD_INT 1
17254: PPUSH
17255: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17259: LD_INT 8
17261: PPUSH
17262: LD_VAR 0 3
17266: PPUSH
17267: LD_INT 1
17269: PPUSH
17270: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17274: LD_INT 10
17276: PPUSH
17277: LD_VAR 0 3
17281: PPUSH
17282: LD_INT 1
17284: PPUSH
17285: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17289: LD_INT 11
17291: PPUSH
17292: LD_VAR 0 3
17296: PPUSH
17297: LD_INT 1
17299: PPUSH
17300: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17304: LD_INT 12
17306: PPUSH
17307: LD_VAR 0 3
17311: PPUSH
17312: LD_INT 1
17314: PPUSH
17315: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17319: LD_INT 13
17321: PPUSH
17322: LD_VAR 0 3
17326: PPUSH
17327: LD_INT 1
17329: PPUSH
17330: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17334: LD_INT 14
17336: PPUSH
17337: LD_VAR 0 3
17341: PPUSH
17342: LD_INT 1
17344: PPUSH
17345: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17349: LD_INT 15
17351: PPUSH
17352: LD_VAR 0 3
17356: PPUSH
17357: LD_INT 1
17359: PPUSH
17360: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17364: LD_INT 16
17366: PPUSH
17367: LD_VAR 0 3
17371: PPUSH
17372: LD_INT 1
17374: PPUSH
17375: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17379: LD_INT 17
17381: PPUSH
17382: LD_VAR 0 3
17386: PPUSH
17387: LD_INT 1
17389: PPUSH
17390: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17394: LD_INT 19
17396: PPUSH
17397: LD_VAR 0 3
17401: PPUSH
17402: LD_INT 1
17404: PPUSH
17405: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17409: LD_INT 20
17411: PPUSH
17412: LD_VAR 0 3
17416: PPUSH
17417: LD_INT 1
17419: PPUSH
17420: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17424: LD_INT 21
17426: PPUSH
17427: LD_VAR 0 3
17431: PPUSH
17432: LD_INT 1
17434: PPUSH
17435: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17439: LD_INT 23
17441: PPUSH
17442: LD_VAR 0 3
17446: PPUSH
17447: LD_INT 1
17449: PPUSH
17450: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17454: LD_INT 26
17456: PPUSH
17457: LD_VAR 0 3
17461: PPUSH
17462: LD_INT 1
17464: PPUSH
17465: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17469: LD_INT 27
17471: PPUSH
17472: LD_VAR 0 3
17476: PPUSH
17477: LD_INT 1
17479: PPUSH
17480: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17484: LD_INT 28
17486: PPUSH
17487: LD_VAR 0 3
17491: PPUSH
17492: LD_INT 1
17494: PPUSH
17495: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17499: LD_INT 29
17501: PPUSH
17502: LD_VAR 0 3
17506: PPUSH
17507: LD_INT 1
17509: PPUSH
17510: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17514: LD_INT 30
17516: PPUSH
17517: LD_VAR 0 3
17521: PPUSH
17522: LD_INT 1
17524: PPUSH
17525: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17529: LD_INT 31
17531: PPUSH
17532: LD_VAR 0 3
17536: PPUSH
17537: LD_INT 1
17539: PPUSH
17540: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17544: LD_INT 32
17546: PPUSH
17547: LD_VAR 0 3
17551: PPUSH
17552: LD_INT 1
17554: PPUSH
17555: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17559: LD_INT 36
17561: PPUSH
17562: LD_VAR 0 3
17566: PPUSH
17567: LD_INT 1
17569: PPUSH
17570: CALL_OW 324
// end ; 5 :
17574: GO 19705
17576: LD_INT 5
17578: DOUBLE
17579: EQUAL
17580: IFTRUE 17584
17582: GO 18697
17584: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17585: LD_INT 35
17587: PPUSH
17588: LD_VAR 0 3
17592: PPUSH
17593: LD_INT 1
17595: PPUSH
17596: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17600: LD_INT 45
17602: PPUSH
17603: LD_VAR 0 3
17607: PPUSH
17608: LD_INT 1
17610: PPUSH
17611: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17615: LD_INT 46
17617: PPUSH
17618: LD_VAR 0 3
17622: PPUSH
17623: LD_INT 1
17625: PPUSH
17626: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17630: LD_INT 47
17632: PPUSH
17633: LD_VAR 0 3
17637: PPUSH
17638: LD_INT 1
17640: PPUSH
17641: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17645: LD_INT 1
17647: PPUSH
17648: LD_VAR 0 3
17652: PPUSH
17653: LD_INT 1
17655: PPUSH
17656: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17660: LD_INT 2
17662: PPUSH
17663: LD_VAR 0 3
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17675: LD_INT 11
17677: PPUSH
17678: LD_VAR 0 3
17682: PPUSH
17683: LD_INT 1
17685: PPUSH
17686: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17690: LD_INT 20
17692: PPUSH
17693: LD_VAR 0 3
17697: PPUSH
17698: LD_INT 1
17700: PPUSH
17701: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17705: LD_INT 48
17707: PPUSH
17708: LD_VAR 0 3
17712: PPUSH
17713: LD_INT 1
17715: PPUSH
17716: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17720: LD_INT 49
17722: PPUSH
17723: LD_VAR 0 3
17727: PPUSH
17728: LD_INT 1
17730: PPUSH
17731: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17735: LD_INT 69
17737: PPUSH
17738: LD_VAR 0 3
17742: PPUSH
17743: LD_INT 1
17745: PPUSH
17746: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17750: LD_INT 39
17752: PPUSH
17753: LD_VAR 0 3
17757: PPUSH
17758: LD_INT 1
17760: PPUSH
17761: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17765: LD_INT 34
17767: PPUSH
17768: LD_VAR 0 3
17772: PPUSH
17773: LD_INT 1
17775: PPUSH
17776: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17780: LD_INT 42
17782: PPUSH
17783: LD_VAR 0 3
17787: PPUSH
17788: LD_INT 1
17790: PPUSH
17791: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17795: LD_INT 44
17797: PPUSH
17798: LD_VAR 0 3
17802: PPUSH
17803: LD_INT 1
17805: PPUSH
17806: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17810: LD_INT 41
17812: PPUSH
17813: LD_VAR 0 3
17817: PPUSH
17818: LD_INT 1
17820: PPUSH
17821: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17825: LD_INT 40
17827: PPUSH
17828: LD_VAR 0 3
17832: PPUSH
17833: LD_INT 1
17835: PPUSH
17836: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17840: LD_INT 43
17842: PPUSH
17843: LD_VAR 0 3
17847: PPUSH
17848: LD_INT 1
17850: PPUSH
17851: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17855: LD_INT 70
17857: PPUSH
17858: LD_VAR 0 3
17862: PPUSH
17863: LD_INT 1
17865: PPUSH
17866: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17870: LD_INT 51
17872: PPUSH
17873: LD_VAR 0 3
17877: PPUSH
17878: LD_INT 1
17880: PPUSH
17881: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17885: LD_INT 52
17887: PPUSH
17888: LD_VAR 0 3
17892: PPUSH
17893: LD_INT 1
17895: PPUSH
17896: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17900: LD_INT 6
17902: PPUSH
17903: LD_VAR 0 3
17907: PPUSH
17908: LD_INT 1
17910: PPUSH
17911: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17915: LD_INT 15
17917: PPUSH
17918: LD_VAR 0 3
17922: PPUSH
17923: LD_INT 1
17925: PPUSH
17926: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17930: LD_INT 7
17932: PPUSH
17933: LD_VAR 0 3
17937: PPUSH
17938: LD_INT 1
17940: PPUSH
17941: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17945: LD_INT 12
17947: PPUSH
17948: LD_VAR 0 3
17952: PPUSH
17953: LD_INT 1
17955: PPUSH
17956: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17960: LD_INT 17
17962: PPUSH
17963: LD_VAR 0 3
17967: PPUSH
17968: LD_INT 1
17970: PPUSH
17971: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17975: LD_INT 18
17977: PPUSH
17978: LD_VAR 0 3
17982: PPUSH
17983: LD_INT 1
17985: PPUSH
17986: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17990: LD_INT 60
17992: PPUSH
17993: LD_VAR 0 3
17997: PPUSH
17998: LD_INT 1
18000: PPUSH
18001: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18005: LD_INT 32
18007: PPUSH
18008: LD_VAR 0 3
18012: PPUSH
18013: LD_INT 1
18015: PPUSH
18016: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18020: LD_INT 9
18022: PPUSH
18023: LD_VAR 0 3
18027: PPUSH
18028: LD_INT 1
18030: PPUSH
18031: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18035: LD_INT 57
18037: PPUSH
18038: LD_VAR 0 3
18042: PPUSH
18043: LD_INT 1
18045: PPUSH
18046: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18050: LD_INT 30
18052: PPUSH
18053: LD_VAR 0 3
18057: PPUSH
18058: LD_INT 1
18060: PPUSH
18061: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18065: LD_INT 37
18067: PPUSH
18068: LD_VAR 0 3
18072: PPUSH
18073: LD_INT 1
18075: PPUSH
18076: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18080: LD_INT 63
18082: PPUSH
18083: LD_VAR 0 3
18087: PPUSH
18088: LD_INT 1
18090: PPUSH
18091: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18095: LD_INT 3
18097: PPUSH
18098: LD_VAR 0 3
18102: PPUSH
18103: LD_INT 1
18105: PPUSH
18106: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18110: LD_INT 4
18112: PPUSH
18113: LD_VAR 0 3
18117: PPUSH
18118: LD_INT 1
18120: PPUSH
18121: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18125: LD_INT 5
18127: PPUSH
18128: LD_VAR 0 3
18132: PPUSH
18133: LD_INT 1
18135: PPUSH
18136: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18140: LD_INT 66
18142: PPUSH
18143: LD_VAR 0 3
18147: PPUSH
18148: LD_INT 1
18150: PPUSH
18151: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18155: LD_INT 21
18157: PPUSH
18158: LD_VAR 0 3
18162: PPUSH
18163: LD_INT 1
18165: PPUSH
18166: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18170: LD_INT 22
18172: PPUSH
18173: LD_VAR 0 3
18177: PPUSH
18178: LD_INT 1
18180: PPUSH
18181: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18185: LD_INT 19
18187: PPUSH
18188: LD_VAR 0 3
18192: PPUSH
18193: LD_INT 1
18195: PPUSH
18196: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18200: LD_INT 54
18202: PPUSH
18203: LD_VAR 0 3
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18215: LD_INT 55
18217: PPUSH
18218: LD_VAR 0 3
18222: PPUSH
18223: LD_INT 1
18225: PPUSH
18226: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18230: LD_INT 0
18232: PPUSH
18233: LD_VAR 0 3
18237: PPUSH
18238: LD_INT 1
18240: PPUSH
18241: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18245: LD_INT 1
18247: PPUSH
18248: LD_VAR 0 3
18252: PPUSH
18253: LD_INT 1
18255: PPUSH
18256: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18260: LD_INT 2
18262: PPUSH
18263: LD_VAR 0 3
18267: PPUSH
18268: LD_INT 1
18270: PPUSH
18271: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18275: LD_INT 3
18277: PPUSH
18278: LD_VAR 0 3
18282: PPUSH
18283: LD_INT 1
18285: PPUSH
18286: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18290: LD_INT 4
18292: PPUSH
18293: LD_VAR 0 3
18297: PPUSH
18298: LD_INT 1
18300: PPUSH
18301: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18305: LD_INT 5
18307: PPUSH
18308: LD_VAR 0 3
18312: PPUSH
18313: LD_INT 1
18315: PPUSH
18316: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18320: LD_INT 6
18322: PPUSH
18323: LD_VAR 0 3
18327: PPUSH
18328: LD_INT 1
18330: PPUSH
18331: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18335: LD_INT 7
18337: PPUSH
18338: LD_VAR 0 3
18342: PPUSH
18343: LD_INT 1
18345: PPUSH
18346: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18350: LD_INT 8
18352: PPUSH
18353: LD_VAR 0 3
18357: PPUSH
18358: LD_INT 1
18360: PPUSH
18361: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18365: LD_INT 10
18367: PPUSH
18368: LD_VAR 0 3
18372: PPUSH
18373: LD_INT 1
18375: PPUSH
18376: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18380: LD_INT 11
18382: PPUSH
18383: LD_VAR 0 3
18387: PPUSH
18388: LD_INT 1
18390: PPUSH
18391: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18395: LD_INT 12
18397: PPUSH
18398: LD_VAR 0 3
18402: PPUSH
18403: LD_INT 1
18405: PPUSH
18406: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18410: LD_INT 13
18412: PPUSH
18413: LD_VAR 0 3
18417: PPUSH
18418: LD_INT 1
18420: PPUSH
18421: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18425: LD_INT 14
18427: PPUSH
18428: LD_VAR 0 3
18432: PPUSH
18433: LD_INT 1
18435: PPUSH
18436: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18440: LD_INT 15
18442: PPUSH
18443: LD_VAR 0 3
18447: PPUSH
18448: LD_INT 1
18450: PPUSH
18451: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18455: LD_INT 16
18457: PPUSH
18458: LD_VAR 0 3
18462: PPUSH
18463: LD_INT 1
18465: PPUSH
18466: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18470: LD_INT 17
18472: PPUSH
18473: LD_VAR 0 3
18477: PPUSH
18478: LD_INT 1
18480: PPUSH
18481: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18485: LD_INT 18
18487: PPUSH
18488: LD_VAR 0 3
18492: PPUSH
18493: LD_INT 1
18495: PPUSH
18496: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18500: LD_INT 19
18502: PPUSH
18503: LD_VAR 0 3
18507: PPUSH
18508: LD_INT 1
18510: PPUSH
18511: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18515: LD_INT 20
18517: PPUSH
18518: LD_VAR 0 3
18522: PPUSH
18523: LD_INT 1
18525: PPUSH
18526: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18530: LD_INT 21
18532: PPUSH
18533: LD_VAR 0 3
18537: PPUSH
18538: LD_INT 1
18540: PPUSH
18541: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18545: LD_INT 23
18547: PPUSH
18548: LD_VAR 0 3
18552: PPUSH
18553: LD_INT 1
18555: PPUSH
18556: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18560: LD_INT 26
18562: PPUSH
18563: LD_VAR 0 3
18567: PPUSH
18568: LD_INT 1
18570: PPUSH
18571: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18575: LD_INT 27
18577: PPUSH
18578: LD_VAR 0 3
18582: PPUSH
18583: LD_INT 1
18585: PPUSH
18586: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18590: LD_INT 28
18592: PPUSH
18593: LD_VAR 0 3
18597: PPUSH
18598: LD_INT 1
18600: PPUSH
18601: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18605: LD_INT 29
18607: PPUSH
18608: LD_VAR 0 3
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18620: LD_INT 30
18622: PPUSH
18623: LD_VAR 0 3
18627: PPUSH
18628: LD_INT 1
18630: PPUSH
18631: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18635: LD_INT 31
18637: PPUSH
18638: LD_VAR 0 3
18642: PPUSH
18643: LD_INT 1
18645: PPUSH
18646: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18650: LD_INT 32
18652: PPUSH
18653: LD_VAR 0 3
18657: PPUSH
18658: LD_INT 1
18660: PPUSH
18661: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18665: LD_INT 33
18667: PPUSH
18668: LD_VAR 0 3
18672: PPUSH
18673: LD_INT 1
18675: PPUSH
18676: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18680: LD_INT 36
18682: PPUSH
18683: LD_VAR 0 3
18687: PPUSH
18688: LD_INT 1
18690: PPUSH
18691: CALL_OW 324
// end ; 6 :
18695: GO 19705
18697: LD_INT 6
18699: DOUBLE
18700: EQUAL
18701: IFTRUE 18705
18703: GO 19630
18705: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18706: LD_INT 35
18708: PPUSH
18709: LD_VAR 0 3
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18721: LD_INT 45
18723: PPUSH
18724: LD_VAR 0 3
18728: PPUSH
18729: LD_INT 1
18731: PPUSH
18732: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18736: LD_INT 46
18738: PPUSH
18739: LD_VAR 0 3
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18751: LD_INT 47
18753: PPUSH
18754: LD_VAR 0 3
18758: PPUSH
18759: LD_INT 1
18761: PPUSH
18762: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18766: LD_INT 1
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: LD_INT 1
18776: PPUSH
18777: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18781: LD_INT 2
18783: PPUSH
18784: LD_VAR 0 3
18788: PPUSH
18789: LD_INT 1
18791: PPUSH
18792: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18796: LD_INT 11
18798: PPUSH
18799: LD_VAR 0 3
18803: PPUSH
18804: LD_INT 1
18806: PPUSH
18807: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18811: LD_INT 20
18813: PPUSH
18814: LD_VAR 0 3
18818: PPUSH
18819: LD_INT 1
18821: PPUSH
18822: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18826: LD_INT 48
18828: PPUSH
18829: LD_VAR 0 3
18833: PPUSH
18834: LD_INT 1
18836: PPUSH
18837: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18841: LD_INT 49
18843: PPUSH
18844: LD_VAR 0 3
18848: PPUSH
18849: LD_INT 1
18851: PPUSH
18852: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18856: LD_INT 50
18858: PPUSH
18859: LD_VAR 0 3
18863: PPUSH
18864: LD_INT 1
18866: PPUSH
18867: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18871: LD_INT 69
18873: PPUSH
18874: LD_VAR 0 3
18878: PPUSH
18879: LD_INT 1
18881: PPUSH
18882: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18886: LD_INT 39
18888: PPUSH
18889: LD_VAR 0 3
18893: PPUSH
18894: LD_INT 1
18896: PPUSH
18897: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18901: LD_INT 34
18903: PPUSH
18904: LD_VAR 0 3
18908: PPUSH
18909: LD_INT 1
18911: PPUSH
18912: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18916: LD_INT 42
18918: PPUSH
18919: LD_VAR 0 3
18923: PPUSH
18924: LD_INT 1
18926: PPUSH
18927: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18931: LD_INT 44
18933: PPUSH
18934: LD_VAR 0 3
18938: PPUSH
18939: LD_INT 1
18941: PPUSH
18942: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18946: LD_INT 41
18948: PPUSH
18949: LD_VAR 0 3
18953: PPUSH
18954: LD_INT 1
18956: PPUSH
18957: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18961: LD_INT 13
18963: PPUSH
18964: LD_VAR 0 3
18968: PPUSH
18969: LD_INT 1
18971: PPUSH
18972: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18976: LD_INT 40
18978: PPUSH
18979: LD_VAR 0 3
18983: PPUSH
18984: LD_INT 1
18986: PPUSH
18987: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18991: LD_INT 43
18993: PPUSH
18994: LD_VAR 0 3
18998: PPUSH
18999: LD_INT 1
19001: PPUSH
19002: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19006: LD_INT 70
19008: PPUSH
19009: LD_VAR 0 3
19013: PPUSH
19014: LD_INT 1
19016: PPUSH
19017: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
19021: LD_INT 23
19023: PPUSH
19024: LD_VAR 0 3
19028: PPUSH
19029: LD_INT 1
19031: PPUSH
19032: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19036: LD_INT 51
19038: PPUSH
19039: LD_VAR 0 3
19043: PPUSH
19044: LD_INT 1
19046: PPUSH
19047: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19051: LD_INT 52
19053: PPUSH
19054: LD_VAR 0 3
19058: PPUSH
19059: LD_INT 1
19061: PPUSH
19062: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19066: LD_INT 6
19068: PPUSH
19069: LD_VAR 0 3
19073: PPUSH
19074: LD_INT 1
19076: PPUSH
19077: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19081: LD_INT 15
19083: PPUSH
19084: LD_VAR 0 3
19088: PPUSH
19089: LD_INT 1
19091: PPUSH
19092: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19096: LD_INT 7
19098: PPUSH
19099: LD_VAR 0 3
19103: PPUSH
19104: LD_INT 1
19106: PPUSH
19107: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19111: LD_INT 12
19113: PPUSH
19114: LD_VAR 0 3
19118: PPUSH
19119: LD_INT 1
19121: PPUSH
19122: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19126: LD_INT 10
19128: PPUSH
19129: LD_VAR 0 3
19133: PPUSH
19134: LD_INT 1
19136: PPUSH
19137: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19141: LD_INT 17
19143: PPUSH
19144: LD_VAR 0 3
19148: PPUSH
19149: LD_INT 1
19151: PPUSH
19152: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19156: LD_INT 18
19158: PPUSH
19159: LD_VAR 0 3
19163: PPUSH
19164: LD_INT 1
19166: PPUSH
19167: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19171: LD_INT 60
19173: PPUSH
19174: LD_VAR 0 3
19178: PPUSH
19179: LD_INT 1
19181: PPUSH
19182: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19186: LD_INT 61
19188: PPUSH
19189: LD_VAR 0 3
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19201: LD_INT 32
19203: PPUSH
19204: LD_VAR 0 3
19208: PPUSH
19209: LD_INT 1
19211: PPUSH
19212: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19216: LD_INT 27
19218: PPUSH
19219: LD_VAR 0 3
19223: PPUSH
19224: LD_INT 1
19226: PPUSH
19227: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19231: LD_INT 36
19233: PPUSH
19234: LD_VAR 0 3
19238: PPUSH
19239: LD_INT 1
19241: PPUSH
19242: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19246: LD_INT 33
19248: PPUSH
19249: LD_VAR 0 3
19253: PPUSH
19254: LD_INT 1
19256: PPUSH
19257: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19261: LD_INT 9
19263: PPUSH
19264: LD_VAR 0 3
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19276: LD_INT 38
19278: PPUSH
19279: LD_VAR 0 3
19283: PPUSH
19284: LD_INT 1
19286: PPUSH
19287: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19291: LD_INT 57
19293: PPUSH
19294: LD_VAR 0 3
19298: PPUSH
19299: LD_INT 1
19301: PPUSH
19302: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19306: LD_INT 58
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: LD_INT 1
19316: PPUSH
19317: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19321: LD_INT 28
19323: PPUSH
19324: LD_VAR 0 3
19328: PPUSH
19329: LD_INT 1
19331: PPUSH
19332: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19336: LD_INT 29
19338: PPUSH
19339: LD_VAR 0 3
19343: PPUSH
19344: LD_INT 1
19346: PPUSH
19347: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19351: LD_INT 30
19353: PPUSH
19354: LD_VAR 0 3
19358: PPUSH
19359: LD_INT 1
19361: PPUSH
19362: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19366: LD_INT 37
19368: PPUSH
19369: LD_VAR 0 3
19373: PPUSH
19374: LD_INT 1
19376: PPUSH
19377: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19381: LD_INT 63
19383: PPUSH
19384: LD_VAR 0 3
19388: PPUSH
19389: LD_INT 1
19391: PPUSH
19392: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19396: LD_INT 64
19398: PPUSH
19399: LD_VAR 0 3
19403: PPUSH
19404: LD_INT 1
19406: PPUSH
19407: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19411: LD_INT 3
19413: PPUSH
19414: LD_VAR 0 3
19418: PPUSH
19419: LD_INT 1
19421: PPUSH
19422: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19426: LD_INT 4
19428: PPUSH
19429: LD_VAR 0 3
19433: PPUSH
19434: LD_INT 1
19436: PPUSH
19437: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19441: LD_INT 5
19443: PPUSH
19444: LD_VAR 0 3
19448: PPUSH
19449: LD_INT 1
19451: PPUSH
19452: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19456: LD_INT 8
19458: PPUSH
19459: LD_VAR 0 3
19463: PPUSH
19464: LD_INT 1
19466: PPUSH
19467: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19471: LD_INT 66
19473: PPUSH
19474: LD_VAR 0 3
19478: PPUSH
19479: LD_INT 1
19481: PPUSH
19482: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19486: LD_INT 67
19488: PPUSH
19489: LD_VAR 0 3
19493: PPUSH
19494: LD_INT 1
19496: PPUSH
19497: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19501: LD_INT 21
19503: PPUSH
19504: LD_VAR 0 3
19508: PPUSH
19509: LD_INT 1
19511: PPUSH
19512: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19516: LD_INT 22
19518: PPUSH
19519: LD_VAR 0 3
19523: PPUSH
19524: LD_INT 1
19526: PPUSH
19527: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19531: LD_INT 19
19533: PPUSH
19534: LD_VAR 0 3
19538: PPUSH
19539: LD_INT 1
19541: PPUSH
19542: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19546: LD_INT 26
19548: PPUSH
19549: LD_VAR 0 3
19553: PPUSH
19554: LD_INT 1
19556: PPUSH
19557: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19561: LD_INT 54
19563: PPUSH
19564: LD_VAR 0 3
19568: PPUSH
19569: LD_INT 1
19571: PPUSH
19572: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19576: LD_INT 55
19578: PPUSH
19579: LD_VAR 0 3
19583: PPUSH
19584: LD_INT 1
19586: PPUSH
19587: CALL_OW 322
// for i = 0 to 39 do
19591: LD_ADDR_VAR 0 4
19595: PUSH
19596: DOUBLE
19597: LD_INT 0
19599: DEC
19600: ST_TO_ADDR
19601: LD_INT 39
19603: PUSH
19604: FOR_TO
19605: IFFALSE 19626
// SetRestrict ( i , side , true ) ;
19607: LD_VAR 0 4
19611: PPUSH
19612: LD_VAR 0 3
19616: PPUSH
19617: LD_INT 1
19619: PPUSH
19620: CALL_OW 324
19624: GO 19604
19626: POP
19627: POP
// end ; else
19628: GO 19705
19630: POP
// begin for i = 1 to 73 do
19631: LD_ADDR_VAR 0 4
19635: PUSH
19636: DOUBLE
19637: LD_INT 1
19639: DEC
19640: ST_TO_ADDR
19641: LD_INT 73
19643: PUSH
19644: FOR_TO
19645: IFFALSE 19666
// SetTech ( i , side , state_enabled ) ;
19647: LD_VAR 0 4
19651: PPUSH
19652: LD_VAR 0 3
19656: PPUSH
19657: LD_INT 1
19659: PPUSH
19660: CALL_OW 322
19664: GO 19644
19666: POP
19667: POP
// for i = 0 to 39 do
19668: LD_ADDR_VAR 0 4
19672: PUSH
19673: DOUBLE
19674: LD_INT 0
19676: DEC
19677: ST_TO_ADDR
19678: LD_INT 39
19680: PUSH
19681: FOR_TO
19682: IFFALSE 19703
// SetRestrict ( i , side , true ) ;
19684: LD_VAR 0 4
19688: PPUSH
19689: LD_VAR 0 3
19693: PPUSH
19694: LD_INT 1
19696: PPUSH
19697: CALL_OW 324
19701: GO 19681
19703: POP
19704: POP
// end ; end ; end ;
19705: GO 15710
19707: POP
19708: POP
// end ;
19709: LD_VAR 0 2
19713: RET
