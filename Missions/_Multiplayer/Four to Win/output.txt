// export def_public_score , def_amount_score ; export is_depot , number_of_breastworks , number_of_people , amount_of_apemen , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , amount_score , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , king_territory , final_count , Player_Side , player_team ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if MultiPlayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type = mp_game_type ;
  79: LD_ADDR_EXP 34
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side = mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  99: LD_ADDR_EXP 21
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 109: LD_ADDR_EXP 18
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 119: LD_ADDR_EXP 22
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 20
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams = mp_teams ;
 139: LD_ADDR_EXP 19
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 352
// begin Game_Type = 3 ;
 151: LD_ADDR_EXP 34
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side = 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 21
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 18
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 22
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 20
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 323: LD_ADDR_EXP 19
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: ST_TO_ADDR
// end ; for i := 1 to 8 do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_INT 8
 364: PUSH
 365: FOR_TO
 366: IFFALSE 453
// if Multiplayer_GetPlayerIsSpec ( i ) then
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 530
 377: IFFALSE 451
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 379: LD_ADDR_EXP 21
 383: PUSH
 384: LD_EXP 21
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_INT 0
 396: PPUSH
 397: CALL_OW 1
 401: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 402: LD_ADDR_EXP 19
 406: PUSH
 407: LD_EXP 19
 411: PPUSH
 412: LD_EXP 18
 416: PUSH
 417: LD_VAR 0 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 19
 427: PUSH
 428: LD_EXP 18
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: ARRAY
 439: PUSH
 440: LD_VAR 0 2
 444: DIFF
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// end ;
 451: GO 365
 453: POP
 454: POP
// if MultiPlayer then
 455: LD_OWVAR 4
 459: IFFALSE 666
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 461: LD_ADDR_EXP 36
 465: PUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 474: LD_ADDR_EXP 37
 478: PUSH
 479: LD_INT 1
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 487: LD_ADDR_EXP 38
 491: PUSH
 492: LD_INT 2
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 500: LD_ADDR_EXP 39
 504: PUSH
 505: LD_INT 3
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 513: LD_ADDR_EXP 40
 517: PUSH
 518: LD_INT 4
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 526: LD_ADDR_EXP 41
 530: PUSH
 531: LD_INT 5
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 539: LD_ADDR_EXP 43
 543: PUSH
 544: LD_INT 10
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 552: LD_ADDR_EXP 44
 556: PUSH
 557: LD_INT 11
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 565: LD_ADDR_EXP 45
 569: PUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 578: LD_ADDR_EXP 47
 582: PUSH
 583: LD_INT 13
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 591: LD_ADDR_EXP 46
 595: PUSH
 596: LD_INT 14
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 604: LD_ADDR_EXP 48
 608: PUSH
 609: LD_INT 15
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_public_score = GetMultiplayerSetting ( 16 ) ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 16
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_amount_score = GetMultiplayerSetting ( 17 ) ;
 630: LD_ADDR_EXP 2
 634: PUSH
 635: LD_INT 17
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 643: LD_ADDR_VAR 0 3
 647: PUSH
 648: LD_INT 22
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// def_win_rules = 0 ;
 656: LD_ADDR_EXP 17
 660: PUSH
 661: LD_INT 0
 663: ST_TO_ADDR
// end else
 664: GO 798
// begin randomize ;
 666: CALL_OW 10
// def_base_level = 3 ;
 670: LD_ADDR_EXP 36
 674: PUSH
 675: LD_INT 3
 677: ST_TO_ADDR
// def_amount_of_people = 1 ;
 678: LD_ADDR_EXP 37
 682: PUSH
 683: LD_INT 1
 685: ST_TO_ADDR
// def_skill_level = 1 ;
 686: LD_ADDR_EXP 38
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// def_starting_resources = 2 ;
 694: LD_ADDR_EXP 39
 698: PUSH
 699: LD_INT 2
 701: ST_TO_ADDR
// def_shipments_density = 1 ;
 702: LD_ADDR_EXP 40
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
 710: LD_ADDR_EXP 41
 714: PUSH
 715: LD_INT 0
 717: ST_TO_ADDR
// def_shared_vision = 1 ;
 718: LD_ADDR_EXP 43
 722: PUSH
 723: LD_INT 1
 725: ST_TO_ADDR
// def_morale_flags = 1 ;
 726: LD_ADDR_EXP 44
 730: PUSH
 731: LD_INT 1
 733: ST_TO_ADDR
// def_siberite_detection = 1 ;
 734: LD_ADDR_EXP 45
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 742: LD_ADDR_EXP 47
 746: PUSH
 747: LD_INT 3
 749: ST_TO_ADDR
// def_people_respawning = 2 ;
 750: LD_ADDR_EXP 46
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 758: LD_ADDR_EXP 48
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_public_score = 1 ;
 766: LD_ADDR_EXP 1
 770: PUSH
 771: LD_INT 1
 773: ST_TO_ADDR
// def_amount_score = 0 ;
 774: LD_ADDR_EXP 2
 778: PUSH
 779: LD_INT 0
 781: ST_TO_ADDR
// tech_level = 4 ;
 782: LD_ADDR_VAR 0 3
 786: PUSH
 787: LD_INT 4
 789: ST_TO_ADDR
// def_win_rules = 0 ;
 790: LD_ADDR_EXP 17
 794: PUSH
 795: LD_INT 0
 797: ST_TO_ADDR
// end ; Player_Side = Your_Side ;
 798: LD_ADDR_EXP 31
 802: PUSH
 803: LD_OWVAR 2
 807: ST_TO_ADDR
// player_team = Side_Teams [ Player_Side ] ;
 808: LD_ADDR_EXP 32
 812: PUSH
 813: LD_EXP 18
 817: PUSH
 818: LD_EXP 31
 822: ARRAY
 823: ST_TO_ADDR
// InitGameRules ;
 824: CALL 7133 0 0
// if def_game_rules = 0 then
 828: LD_EXP 35
 832: PUSH
 833: LD_INT 0
 835: EQUAL
 836: IFFALSE 863
// begin if isSGUI then
 838: LD_OWVAR 83
 842: IFFALSE 850
// setMpTechs ( ) else
 844: CALL 14929 0 0
 848: GO 863
// begin SetMpTechLevel ( tech_level + 1 ) ;
 850: LD_VAR 0 3
 854: PUSH
 855: LD_INT 1
 857: PLUS
 858: PPUSH
 859: CALL 15076 0 1
// end ; end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 863: LD_ADDR_EXP 3
 867: PUSH
 868: LD_INT 0
 870: PUSH
 871: LD_INT 1
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: PUSH
 886: LD_EXP 36
 890: PUSH
 891: LD_INT 1
 893: PLUS
 894: ARRAY
 895: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 896: LD_ADDR_EXP 4
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: LD_INT 0
 906: PUSH
 907: LD_INT 2
 909: PUSH
 910: LD_INT 4
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_EXP 36
 923: PUSH
 924: LD_INT 1
 926: PLUS
 927: ARRAY
 928: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 929: LD_ADDR_EXP 5
 933: PUSH
 934: LD_INT 9
 936: PUSH
 937: LD_INT 12
 939: PUSH
 940: LD_INT 15
 942: PUSH
 943: LD_INT 24
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_EXP 37
 956: PUSH
 957: LD_INT 1
 959: PLUS
 960: ARRAY
 961: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 962: LD_ADDR_EXP 7
 966: PUSH
 967: LD_INT 2
 969: PUSH
 970: LD_INT 3
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: LD_INT 5
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_EXP 38
 989: PUSH
 990: LD_INT 1
 992: PLUS
 993: ARRAY
 994: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 995: LD_ADDR_EXP 9
 999: PUSH
1000: LD_INT 0
1002: PUSH
1003: LD_INT 0
1005: PUSH
1006: LD_INT 0
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 30
1016: PUSH
1017: LD_INT 0
1019: PUSH
1020: LD_INT 0
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 50
1030: PUSH
1031: LD_INT 20
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 80
1044: PUSH
1045: LD_INT 40
1047: PUSH
1048: LD_INT 20
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_EXP 39
1066: PUSH
1067: LD_INT 1
1069: PLUS
1070: ARRAY
1071: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1072: LD_ADDR_EXP 8
1076: PUSH
1077: LD_INT 10
1079: PUSH
1080: EMPTY
1081: LIST
1082: PUSH
1083: LD_INT 7
1085: PUSH
1086: LD_INT 14
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 6
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 18
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 5
1109: PUSH
1110: LD_INT 10
1112: PUSH
1113: LD_INT 15
1115: PUSH
1116: LD_INT 20
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: PUSH
1131: LD_EXP 39
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: ARRAY
1140: ST_TO_ADDR
// shipments_density = [ 15 , 20 , 25 ] [ def_shipments_density + 1 ] ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_INT 15
1148: PUSH
1149: LD_INT 20
1151: PUSH
1152: LD_INT 25
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 40
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1170: LD_ADDR_EXP 6
1174: PUSH
1175: LD_INT 0
1177: PUSH
1178: LD_INT 3
1180: PUSH
1181: LD_INT 6
1183: PUSH
1184: LD_INT 9
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 47
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1203: LD_ADDR_EXP 12
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 165
1213: PUSH
1214: LD_INT 140
1216: PUSH
1217: LD_INT 115
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_EXP 47
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1236: LD_ADDR_EXP 13
1240: PUSH
1241: LD_INT 0
1243: PUSH
1244: LD_INT 8400
1246: PUSH
1247: LD_INT 1750
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_EXP 46
1259: PUSH
1260: LD_INT 1
1262: PLUS
1263: ARRAY
1264: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1265: LD_ADDR_EXP 14
1269: PUSH
1270: LD_INT 0
1272: PUSH
1273: LD_INT 21000
1275: PUSH
1276: LD_INT 4200
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: PUSH
1284: LD_EXP 46
1288: PUSH
1289: LD_INT 1
1291: PLUS
1292: ARRAY
1293: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1294: LD_ADDR_EXP 11
1298: PUSH
1299: LD_INT 1
1301: NEG
1302: PUSH
1303: LD_INT 350
1305: PUSH
1306: LD_INT 700
1308: PUSH
1309: LD_INT 1400
1311: PUSH
1312: LD_INT 0
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_EXP 44
1326: PUSH
1327: LD_INT 1
1329: PLUS
1330: ARRAY
1331: ST_TO_ADDR
// battle_flags_id = [ ] ;
1332: LD_ADDR_EXP 28
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// amount_score = [ 200 , 300 , 500 , 700 , 1000 , 1500 ] [ def_amount_score + 1 ] ;
1339: LD_ADDR_EXP 15
1343: PUSH
1344: LD_INT 200
1346: PUSH
1347: LD_INT 300
1349: PUSH
1350: LD_INT 500
1352: PUSH
1353: LD_INT 700
1355: PUSH
1356: LD_INT 1000
1358: PUSH
1359: LD_INT 1500
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1380: LD_ADDR_EXP 16
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 63000
1393: PUSH
1394: LD_INT 126000
1396: PUSH
1397: LD_INT 189000
1399: PUSH
1400: LD_INT 252000
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 48
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// if not def_builduptime then
1421: LD_EXP 49
1425: NOT
1426: IFFALSE 1431
// disable ( 600 ) ;
1428: LD_INT 600
1430: DISABLE_MARKED
// king_territory = KopecStred ;
1431: LD_ADDR_EXP 29
1435: PUSH
1436: LD_INT 2
1438: ST_TO_ADDR
// final_count = amount_score ;
1439: LD_ADDR_EXP 30
1443: PUSH
1444: LD_EXP 15
1448: ST_TO_ADDR
// end ;
1449: LD_VAR 0 1
1453: RET
// function init_map ; var i ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
// extra_oil_deposits_locations := [ [ 53 , 26 ] , [ 51 , 53 ] , [ 129 , 20 ] , [ 155 , 53 ] , [ 187 , 139 ] , [ 183 , 107 ] , [ 106 , 135 ] , [ 80 , 106 ] ] ;
1458: LD_ADDR_EXP 27
1462: PUSH
1463: LD_INT 53
1465: PUSH
1466: LD_INT 26
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 51
1475: PUSH
1476: LD_INT 53
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: PUSH
1483: LD_INT 129
1485: PUSH
1486: LD_INT 20
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 155
1495: PUSH
1496: LD_INT 53
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: PUSH
1503: LD_INT 187
1505: PUSH
1506: LD_INT 139
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PUSH
1513: LD_INT 183
1515: PUSH
1516: LD_INT 107
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 106
1525: PUSH
1526: LD_INT 135
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 80
1535: PUSH
1536: LD_INT 106
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// depot_def := [ [ 29 , 22 , 3 ] , [ 154 , 21 , 3 ] , [ 85 , 138 , 0 ] , [ 212 , 141 , 5 ] ] ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_INT 29
1560: PUSH
1561: LD_INT 22
1563: PUSH
1564: LD_INT 3
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 154
1574: PUSH
1575: LD_INT 21
1577: PUSH
1578: LD_INT 3
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 85
1588: PUSH
1589: LD_INT 138
1591: PUSH
1592: LD_INT 0
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 212
1602: PUSH
1603: LD_INT 141
1605: PUSH
1606: LD_INT 5
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: ST_TO_ADDR
// start_def := [ [ 33 , 25 ] , [ 151 , 24 ] , [ 89 , 135 ] , [ 205 , 137 ] ] ;
1620: LD_ADDR_EXP 26
1624: PUSH
1625: LD_INT 33
1627: PUSH
1628: LD_INT 25
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 151
1637: PUSH
1638: LD_INT 24
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 89
1647: PUSH
1648: LD_INT 135
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 205
1657: PUSH
1658: LD_INT 137
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// breastworks_def := [ [ [ 46 , 13 , 4 ] , [ 43 , 39 , 4 ] , [ 47 , 25 , 5 ] , [ 45 , 44 , 5 ] ] , [ [ 129 , 12 , 0 ] , [ 153 , 34 , 1 ] , [ 139 , 24 , 0 ] , [ 158 , 41 , 0 ] ] , [ [ 84 , 121 , 4 ] , [ 109 , 143 , 4 ] , [ 87 , 126 , 4 ] , [ 111 , 148 , 4 ] ] , [ [ 194 , 146 , 2 ] , [ 195 , 121 , 1 ] , [ 193 , 135 , 2 ] , [ 192 , 116 , 2 ] ] , ] ;
1671: LD_ADDR_EXP 25
1675: PUSH
1676: LD_INT 46
1678: PUSH
1679: LD_INT 13
1681: PUSH
1682: LD_INT 4
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 43
1692: PUSH
1693: LD_INT 39
1695: PUSH
1696: LD_INT 4
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 47
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 45
1720: PUSH
1721: LD_INT 44
1723: PUSH
1724: LD_INT 5
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 129
1740: PUSH
1741: LD_INT 12
1743: PUSH
1744: LD_INT 0
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 153
1754: PUSH
1755: LD_INT 34
1757: PUSH
1758: LD_INT 1
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 139
1768: PUSH
1769: LD_INT 24
1771: PUSH
1772: LD_INT 0
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 158
1782: PUSH
1783: LD_INT 41
1785: PUSH
1786: LD_INT 0
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 84
1802: PUSH
1803: LD_INT 121
1805: PUSH
1806: LD_INT 4
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 109
1816: PUSH
1817: LD_INT 143
1819: PUSH
1820: LD_INT 4
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 87
1830: PUSH
1831: LD_INT 126
1833: PUSH
1834: LD_INT 4
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 111
1844: PUSH
1845: LD_INT 148
1847: PUSH
1848: LD_INT 4
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 194
1864: PUSH
1865: LD_INT 146
1867: PUSH
1868: LD_INT 2
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 195
1878: PUSH
1879: LD_INT 121
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 193
1892: PUSH
1893: LD_INT 135
1895: PUSH
1896: LD_INT 2
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 192
1906: PUSH
1907: LD_INT 116
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// if def_extra_oil_deposits then
1930: LD_EXP 41
1934: IFFALSE 1978
// for i in extra_oil_deposits_locations do
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_EXP 27
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1976
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1949: LD_VAR 0 2
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 2
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 2
1969: PPUSH
1970: CALL_OW 62
1974: GO 1946
1976: POP
1977: POP
// end ;
1978: LD_VAR 0 1
1982: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1983: LD_INT 0
1985: PPUSH
1986: PPUSH
1987: PPUSH
// Team_Game := Side_Teams [ your_side ] ;
1988: LD_ADDR_EXP 23
1992: PUSH
1993: LD_EXP 18
1997: PUSH
1998: LD_OWVAR 2
2002: ARRAY
2003: ST_TO_ADDR
// if not Team_Game then
2004: LD_EXP 23
2008: NOT
2009: IFFALSE 2107
// begin for i = 1 to 8 do
2011: LD_ADDR_VAR 0 2
2015: PUSH
2016: DOUBLE
2017: LD_INT 1
2019: DEC
2020: ST_TO_ADDR
2021: LD_INT 8
2023: PUSH
2024: FOR_TO
2025: IFFALSE 2103
// for j = 1 to 8 do
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: DOUBLE
2033: LD_INT 1
2035: DEC
2036: ST_TO_ADDR
2037: LD_INT 8
2039: PUSH
2040: FOR_TO
2041: IFFALSE 2099
// if i <> j then
2043: LD_VAR 0 2
2047: PUSH
2048: LD_VAR 0 3
2052: NONEQUAL
2053: IFFALSE 2077
// SetAttitude ( i , j , att_neutral , true ) else
2055: LD_VAR 0 2
2059: PPUSH
2060: LD_VAR 0 3
2064: PPUSH
2065: LD_INT 0
2067: PPUSH
2068: LD_INT 1
2070: PPUSH
2071: CALL_OW 80
2075: GO 2097
// SetAttitude ( i , j , att_friend , true ) ;
2077: LD_VAR 0 2
2081: PPUSH
2082: LD_VAR 0 3
2086: PPUSH
2087: LD_INT 1
2089: PPUSH
2090: LD_INT 1
2092: PPUSH
2093: CALL_OW 80
2097: GO 2040
2099: POP
2100: POP
2101: GO 2024
2103: POP
2104: POP
// end else
2105: GO 2282
// begin if def_shared_vision then
2107: LD_EXP 43
2111: IFFALSE 2176
// begin for i in Teams do
2113: LD_ADDR_VAR 0 2
2117: PUSH
2118: LD_EXP 19
2122: PUSH
2123: FOR_IN
2124: IFFALSE 2174
// for j = 2 to i do
2126: LD_ADDR_VAR 0 3
2130: PUSH
2131: DOUBLE
2132: LD_INT 2
2134: DEC
2135: ST_TO_ADDR
2136: LD_VAR 0 2
2140: PUSH
2141: FOR_TO
2142: IFFALSE 2170
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2144: LD_VAR 0 2
2148: PUSH
2149: LD_VAR 0 3
2153: ARRAY
2154: PPUSH
2155: LD_VAR 0 2
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: CALL_OW 343
2168: GO 2141
2170: POP
2171: POP
2172: GO 2123
2174: POP
2175: POP
// end ; for i = 1 to 8 do
2176: LD_ADDR_VAR 0 2
2180: PUSH
2181: DOUBLE
2182: LD_INT 1
2184: DEC
2185: ST_TO_ADDR
2186: LD_INT 8
2188: PUSH
2189: FOR_TO
2190: IFFALSE 2280
// for j = 1 to 8 do
2192: LD_ADDR_VAR 0 3
2196: PUSH
2197: DOUBLE
2198: LD_INT 1
2200: DEC
2201: ST_TO_ADDR
2202: LD_INT 8
2204: PUSH
2205: FOR_TO
2206: IFFALSE 2276
// if Side_Teams [ i ] = Side_Teams [ j ] then
2208: LD_EXP 18
2212: PUSH
2213: LD_VAR 0 2
2217: ARRAY
2218: PUSH
2219: LD_EXP 18
2223: PUSH
2224: LD_VAR 0 3
2228: ARRAY
2229: EQUAL
2230: IFFALSE 2254
// SetAttitude ( i , j , att_friend , true ) else
2232: LD_VAR 0 2
2236: PPUSH
2237: LD_VAR 0 3
2241: PPUSH
2242: LD_INT 1
2244: PPUSH
2245: LD_INT 1
2247: PPUSH
2248: CALL_OW 80
2252: GO 2274
// SetAttitude ( i , j , att_enemy , true ) ;
2254: LD_VAR 0 2
2258: PPUSH
2259: LD_VAR 0 3
2263: PPUSH
2264: LD_INT 2
2266: PPUSH
2267: LD_INT 1
2269: PPUSH
2270: CALL_OW 80
2274: GO 2205
2276: POP
2277: POP
2278: GO 2189
2280: POP
2281: POP
// end ; end ;
2282: LD_VAR 0 1
2286: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2287: LD_INT 0
2289: PPUSH
2290: PPUSH
2291: PPUSH
2292: PPUSH
// result := [ ] ;
2293: LD_ADDR_VAR 0 6
2297: PUSH
2298: EMPTY
2299: ST_TO_ADDR
// for i := 1 to count do
2300: LD_ADDR_VAR 0 7
2304: PUSH
2305: DOUBLE
2306: LD_INT 1
2308: DEC
2309: ST_TO_ADDR
2310: LD_VAR 0 1
2314: PUSH
2315: FOR_TO
2316: IFFALSE 2712
// begin uc_direction := Rand ( 0 , 5 ) ;
2318: LD_ADDR_OWVAR 24
2322: PUSH
2323: LD_INT 0
2325: PPUSH
2326: LD_INT 5
2328: PPUSH
2329: CALL_OW 12
2333: ST_TO_ADDR
// if commander then
2334: LD_LOC 1
2338: IFFALSE 2447
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2340: LD_ADDR_OWVAR 26
2344: PUSH
2345: LD_OWVAR 19
2349: PUSH
2350: LD_OWVAR 20
2354: ARRAY
2355: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 2
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_EXP 7
2376: PUSH
2377: LD_INT 2
2379: PLUS
2380: PPUSH
2381: CALL_OW 380
// hc_importance := 105 ;
2385: LD_ADDR_OWVAR 32
2389: PUSH
2390: LD_INT 105
2392: ST_TO_ADDR
// commander := false ;
2393: LD_ADDR_LOC 1
2397: PUSH
2398: LD_INT 0
2400: ST_TO_ADDR
// if Multiplayer then
2401: LD_OWVAR 4
2405: IFFALSE 2445
// begin hc_gallery := MULTIAVATARS ;
2407: LD_ADDR_OWVAR 33
2411: PUSH
2412: LD_STRING MULTIAVATARS
2414: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2415: LD_ADDR_OWVAR 34
2419: PUSH
2420: LD_OWVAR 20
2424: PPUSH
2425: CALL_OW 525
2429: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2430: LD_ADDR_OWVAR 27
2434: PUSH
2435: LD_OWVAR 20
2439: PPUSH
2440: CALL_OW 526
2444: ST_TO_ADDR
// end ; end else
2445: GO 2510
// begin hc_name :=  ;
2447: LD_ADDR_OWVAR 26
2451: PUSH
2452: LD_STRING 
2454: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2455: LD_INT 1
2457: PPUSH
2458: LD_INT 2
2460: PPUSH
2461: CALL_OW 12
2465: PPUSH
2466: LD_VAR 0 2
2470: PPUSH
2471: LD_EXP 7
2475: PPUSH
2476: CALL_OW 380
// hc_importance := 0 ;
2480: LD_ADDR_OWVAR 32
2484: PUSH
2485: LD_INT 0
2487: ST_TO_ADDR
// if Multiplayer then
2488: LD_OWVAR 4
2492: IFFALSE 2510
// begin hc_gallery :=  ;
2494: LD_ADDR_OWVAR 33
2498: PUSH
2499: LD_STRING 
2501: ST_TO_ADDR
// hc_face_number := 0 ;
2502: LD_ADDR_OWVAR 34
2506: PUSH
2507: LD_INT 0
2509: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2510: LD_ADDR_VAR 0 9
2514: PUSH
2515: CALL_OW 44
2519: ST_TO_ADDR
// if global_defined then
2520: LD_LOC 3
2524: IFFALSE 2664
// begin if ( cl = class_soldier ) then
2526: LD_VAR 0 2
2530: PUSH
2531: LD_INT 1
2533: EQUAL
2534: IFFALSE 2554
// j := i + soldiers_created else
2536: LD_ADDR_VAR 0 8
2540: PUSH
2541: LD_VAR 0 7
2545: PUSH
2546: LD_LOC 4
2550: PLUS
2551: ST_TO_ADDR
2552: GO 2564
// j := i ;
2554: LD_ADDR_VAR 0 8
2558: PUSH
2559: LD_VAR 0 7
2563: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2564: LD_LOC 2
2568: PUSH
2569: LD_VAR 0 2
2573: ARRAY
2574: PUSH
2575: LD_VAR 0 8
2579: ARRAY
2580: PPUSH
2581: LD_VAR 0 9
2585: PPUSH
2586: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2590: LD_VAR 0 9
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: LD_LOC 2
2602: PUSH
2603: LD_VAR 0 2
2607: ARRAY
2608: PUSH
2609: LD_VAR 0 8
2613: ARRAY
2614: PPUSH
2615: LD_INT 2
2617: PPUSH
2618: CALL_OW 260
2622: PPUSH
2623: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2627: LD_VAR 0 9
2631: PPUSH
2632: LD_INT 1
2634: PPUSH
2635: LD_LOC 2
2639: PUSH
2640: LD_VAR 0 2
2644: ARRAY
2645: PUSH
2646: LD_VAR 0 8
2650: ARRAY
2651: PPUSH
2652: LD_INT 1
2654: PPUSH
2655: CALL_OW 260
2659: PPUSH
2660: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2664: LD_VAR 0 9
2668: PPUSH
2669: LD_VAR 0 3
2673: PPUSH
2674: LD_VAR 0 4
2678: PPUSH
2679: LD_VAR 0 5
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 50
// result := result ^ [ un ] ;
2691: LD_ADDR_VAR 0 6
2695: PUSH
2696: LD_VAR 0 6
2700: PUSH
2701: LD_VAR 0 9
2705: PUSH
2706: EMPTY
2707: LIST
2708: ADD
2709: ST_TO_ADDR
// end ;
2710: GO 2315
2712: POP
2713: POP
// if not global_defined then
2714: LD_LOC 3
2718: NOT
2719: IFFALSE 2797
// if ( global_units >= cl ) then
2721: LD_LOC 2
2725: PUSH
2726: LD_VAR 0 2
2730: GREATEREQUAL
2731: IFFALSE 2772
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2733: LD_ADDR_LOC 2
2737: PUSH
2738: LD_LOC 2
2742: PPUSH
2743: LD_VAR 0 2
2747: PPUSH
2748: LD_LOC 2
2752: PUSH
2753: LD_VAR 0 2
2757: ARRAY
2758: PUSH
2759: LD_VAR 0 6
2763: ADD
2764: PPUSH
2765: CALL_OW 1
2769: ST_TO_ADDR
2770: GO 2797
// global_units := Replace ( global_units , cl , result ) ;
2772: LD_ADDR_LOC 2
2776: PUSH
2777: LD_LOC 2
2781: PPUSH
2782: LD_VAR 0 2
2786: PPUSH
2787: LD_VAR 0 6
2791: PPUSH
2792: CALL_OW 1
2796: ST_TO_ADDR
// end ;
2797: LD_VAR 0 6
2801: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , sol , br , dep ; begin
2802: LD_INT 0
2804: PPUSH
2805: PPUSH
2806: PPUSH
2807: PPUSH
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
2813: PPUSH
// pos := Side_Positions [ side ] ;
2814: LD_ADDR_VAR 0 3
2818: PUSH
2819: LD_EXP 21
2823: PUSH
2824: LD_VAR 0 1
2828: ARRAY
2829: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2830: LD_ADDR_OWVAR 21
2834: PUSH
2835: LD_EXP 22
2839: PUSH
2840: LD_VAR 0 1
2844: ARRAY
2845: ST_TO_ADDR
// uc_side := side ;
2846: LD_ADDR_OWVAR 20
2850: PUSH
2851: LD_VAR 0 1
2855: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2856: LD_ADDR_VAR 0 4
2860: PUSH
2861: LD_EXP 24
2865: PUSH
2866: LD_VAR 0 3
2870: ARRAY
2871: PUSH
2872: LD_INT 1
2874: ARRAY
2875: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2876: LD_ADDR_VAR 0 5
2880: PUSH
2881: LD_EXP 24
2885: PUSH
2886: LD_VAR 0 3
2890: ARRAY
2891: PUSH
2892: LD_INT 2
2894: ARRAY
2895: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2896: LD_ADDR_VAR 0 6
2900: PUSH
2901: LD_EXP 24
2905: PUSH
2906: LD_VAR 0 3
2910: ARRAY
2911: PUSH
2912: LD_INT 3
2914: ARRAY
2915: ST_TO_ADDR
// if is_depot then
2916: LD_EXP 3
2920: IFFALSE 3053
// begin bc_type = b_depot ;
2922: LD_ADDR_OWVAR 42
2926: PUSH
2927: LD_INT 0
2929: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2930: LD_ADDR_VAR 0 11
2934: PUSH
2935: LD_VAR 0 4
2939: PPUSH
2940: LD_VAR 0 5
2944: PPUSH
2945: LD_VAR 0 6
2949: PPUSH
2950: CALL_OW 47
2954: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2955: LD_VAR 0 11
2959: PPUSH
2960: LD_STRING @
2962: PUSH
2963: LD_VAR 0 1
2967: STR
2968: PPUSH
2969: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2973: LD_VAR 0 11
2977: PPUSH
2978: CALL_OW 274
2982: PPUSH
2983: LD_INT 1
2985: PPUSH
2986: LD_EXP 9
2990: PUSH
2991: LD_INT 1
2993: ARRAY
2994: PPUSH
2995: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2999: LD_VAR 0 11
3003: PPUSH
3004: CALL_OW 274
3008: PPUSH
3009: LD_INT 2
3011: PPUSH
3012: LD_EXP 9
3016: PUSH
3017: LD_INT 2
3019: ARRAY
3020: PPUSH
3021: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3025: LD_VAR 0 11
3029: PPUSH
3030: CALL_OW 274
3034: PPUSH
3035: LD_INT 3
3037: PPUSH
3038: LD_EXP 9
3042: PUSH
3043: LD_INT 3
3045: ARRAY
3046: PPUSH
3047: CALL_OW 277
// end else
3051: GO 3197
// begin for i := 1 to 3 do
3053: LD_ADDR_VAR 0 7
3057: PUSH
3058: DOUBLE
3059: LD_INT 1
3061: DEC
3062: ST_TO_ADDR
3063: LD_INT 3
3065: PUSH
3066: FOR_TO
3067: IFFALSE 3195
// begin r := starting_resources [ i ] ;
3069: LD_ADDR_VAR 0 8
3073: PUSH
3074: LD_EXP 9
3078: PUSH
3079: LD_VAR 0 7
3083: ARRAY
3084: ST_TO_ADDR
// while r >= 10 do
3085: LD_VAR 0 8
3089: PUSH
3090: LD_INT 10
3092: GREATEREQUAL
3093: IFFALSE 3193
// if r > 50 then
3095: LD_VAR 0 8
3099: PUSH
3100: LD_INT 50
3102: GREATER
3103: IFFALSE 3149
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3105: LD_VAR 0 7
3109: PPUSH
3110: LD_INT 5
3112: PPUSH
3113: LD_VAR 0 4
3117: PPUSH
3118: LD_VAR 0 5
3122: PPUSH
3123: LD_INT 4
3125: PPUSH
3126: LD_INT 0
3128: PPUSH
3129: CALL_OW 60
// r := r - 50 ;
3133: LD_ADDR_VAR 0 8
3137: PUSH
3138: LD_VAR 0 8
3142: PUSH
3143: LD_INT 50
3145: MINUS
3146: ST_TO_ADDR
// end else
3147: GO 3191
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3149: LD_VAR 0 7
3153: PPUSH
3154: LD_VAR 0 8
3158: PUSH
3159: LD_INT 10
3161: DIV
3162: PPUSH
3163: LD_VAR 0 4
3167: PPUSH
3168: LD_VAR 0 5
3172: PPUSH
3173: LD_INT 4
3175: PPUSH
3176: LD_INT 0
3178: PPUSH
3179: CALL_OW 60
// r := 0 ;
3183: LD_ADDR_VAR 0 8
3187: PUSH
3188: LD_INT 0
3190: ST_TO_ADDR
// end ;
3191: GO 3085
// end ;
3193: GO 3066
3195: POP
3196: POP
// end ; for r in starting_crates do
3197: LD_ADDR_VAR 0 8
3201: PUSH
3202: LD_EXP 8
3206: PUSH
3207: FOR_IN
3208: IFFALSE 3240
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3210: LD_INT 1
3212: PPUSH
3213: LD_INT 5
3215: PPUSH
3216: LD_VAR 0 4
3220: PPUSH
3221: LD_VAR 0 5
3225: PPUSH
3226: LD_VAR 0 8
3230: PPUSH
3231: LD_INT 0
3233: PPUSH
3234: CALL_OW 60
3238: GO 3207
3240: POP
3241: POP
// if def_morale_flags then
3242: LD_EXP 44
3246: IFFALSE 3385
// begin x := start_def [ pos ] [ 1 ] ;
3248: LD_ADDR_VAR 0 4
3252: PUSH
3253: LD_EXP 26
3257: PUSH
3258: LD_VAR 0 3
3262: ARRAY
3263: PUSH
3264: LD_INT 1
3266: ARRAY
3267: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3268: LD_ADDR_VAR 0 5
3272: PUSH
3273: LD_EXP 26
3277: PUSH
3278: LD_VAR 0 3
3282: ARRAY
3283: PUSH
3284: LD_INT 2
3286: ARRAY
3287: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3288: LD_VAR 0 4
3292: PPUSH
3293: LD_VAR 0 5
3297: PPUSH
3298: LD_INT 12
3300: PPUSH
3301: LD_INT 2
3303: PPUSH
3304: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3308: LD_ADDR_EXP 28
3312: PUSH
3313: LD_EXP 28
3317: PUSH
3318: LD_VAR 0 1
3322: PPUSH
3323: LD_VAR 0 4
3327: PPUSH
3328: LD_VAR 0 5
3332: PPUSH
3333: LD_INT 1
3335: PUSH
3336: LD_INT 100
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 2
3345: PUSH
3346: LD_INT 50
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: LD_INT 3
3355: PUSH
3356: LD_INT 20
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PUSH
3363: LD_INT 20
3365: PUSH
3366: LD_INT 100
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: PPUSH
3379: CALL_OW 418
3383: ADD
3384: ST_TO_ADDR
// end ; commander := true ;
3385: LD_ADDR_LOC 1
3389: PUSH
3390: LD_INT 1
3392: ST_TO_ADDR
// soldiers_created := 0 ;
3393: LD_ADDR_LOC 4
3397: PUSH
3398: LD_INT 0
3400: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3401: LD_ADDR_VAR 0 7
3405: PUSH
3406: DOUBLE
3407: LD_INT 1
3409: DEC
3410: ST_TO_ADDR
3411: LD_EXP 4
3415: PUSH
3416: FOR_TO
3417: IFFALSE 3639
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3419: LD_ADDR_VAR 0 4
3423: PUSH
3424: LD_EXP 25
3428: PUSH
3429: LD_VAR 0 3
3433: ARRAY
3434: PUSH
3435: LD_VAR 0 7
3439: ARRAY
3440: PUSH
3441: LD_INT 1
3443: ARRAY
3444: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3445: LD_ADDR_VAR 0 5
3449: PUSH
3450: LD_EXP 25
3454: PUSH
3455: LD_VAR 0 3
3459: ARRAY
3460: PUSH
3461: LD_VAR 0 7
3465: ARRAY
3466: PUSH
3467: LD_INT 2
3469: ARRAY
3470: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3471: LD_ADDR_VAR 0 6
3475: PUSH
3476: LD_EXP 25
3480: PUSH
3481: LD_VAR 0 3
3485: ARRAY
3486: PUSH
3487: LD_VAR 0 7
3491: ARRAY
3492: PUSH
3493: LD_INT 3
3495: ARRAY
3496: ST_TO_ADDR
// bc_type := b_breastwork ;
3497: LD_ADDR_OWVAR 42
3501: PUSH
3502: LD_INT 31
3504: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3505: LD_ADDR_VAR 0 10
3509: PUSH
3510: LD_VAR 0 4
3514: PPUSH
3515: LD_VAR 0 5
3519: PPUSH
3520: LD_VAR 0 6
3524: PPUSH
3525: CALL_OW 47
3529: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3530: LD_ADDR_VAR 0 4
3534: PUSH
3535: LD_VAR 0 4
3539: PPUSH
3540: LD_VAR 0 6
3544: PPUSH
3545: LD_INT 2
3547: PPUSH
3548: CALL_OW 272
3552: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3553: LD_ADDR_VAR 0 5
3557: PUSH
3558: LD_VAR 0 5
3562: PPUSH
3563: LD_VAR 0 6
3567: PPUSH
3568: LD_INT 2
3570: PPUSH
3571: CALL_OW 273
3575: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3576: LD_ADDR_VAR 0 9
3580: PUSH
3581: LD_INT 1
3583: PPUSH
3584: LD_INT 1
3586: PPUSH
3587: LD_VAR 0 4
3591: PPUSH
3592: LD_VAR 0 5
3596: PPUSH
3597: LD_INT 0
3599: PPUSH
3600: CALL 2287 0 5
3604: PUSH
3605: LD_INT 1
3607: ARRAY
3608: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3609: LD_ADDR_LOC 4
3613: PUSH
3614: LD_LOC 4
3618: PUSH
3619: LD_INT 1
3621: PLUS
3622: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3623: LD_VAR 0 9
3627: PPUSH
3628: LD_VAR 0 10
3632: PPUSH
3633: CALL_OW 120
// end ;
3637: GO 3416
3639: POP
3640: POP
// x := start_def [ pos ] [ 1 ] ;
3641: LD_ADDR_VAR 0 4
3645: PUSH
3646: LD_EXP 26
3650: PUSH
3651: LD_VAR 0 3
3655: ARRAY
3656: PUSH
3657: LD_INT 1
3659: ARRAY
3660: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3661: LD_ADDR_VAR 0 5
3665: PUSH
3666: LD_EXP 26
3670: PUSH
3671: LD_VAR 0 3
3675: ARRAY
3676: PUSH
3677: LD_INT 2
3679: ARRAY
3680: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
3681: LD_LOC 8
3685: PUSH
3686: LD_EXP 4
3690: MINUS
3691: PPUSH
3692: LD_INT 1
3694: PPUSH
3695: LD_VAR 0 4
3699: PPUSH
3700: LD_VAR 0 5
3704: PPUSH
3705: LD_INT 5
3707: PPUSH
3708: CALL 2287 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
3712: LD_LOC 5
3716: PPUSH
3717: LD_INT 2
3719: PPUSH
3720: LD_VAR 0 4
3724: PPUSH
3725: LD_VAR 0 5
3729: PPUSH
3730: LD_INT 5
3732: PPUSH
3733: CALL 2287 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
3737: LD_LOC 7
3741: PPUSH
3742: LD_INT 3
3744: PPUSH
3745: LD_VAR 0 4
3749: PPUSH
3750: LD_VAR 0 5
3754: PPUSH
3755: LD_INT 5
3757: PPUSH
3758: CALL 2287 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
3762: LD_LOC 6
3766: PPUSH
3767: LD_INT 4
3769: PPUSH
3770: LD_VAR 0 4
3774: PPUSH
3775: LD_VAR 0 5
3779: PPUSH
3780: LD_INT 5
3782: PPUSH
3783: CALL 2287 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3787: LD_EXP 45
3791: PUSH
3792: LD_INT 20
3794: PPUSH
3795: LD_VAR 0 1
3799: PPUSH
3800: CALL_OW 321
3804: PUSH
3805: LD_INT 1
3807: EQUAL
3808: AND
3809: IFFALSE 3826
// SetTech ( tech_SibDet , side , state_researched ) ;
3811: LD_INT 20
3813: PPUSH
3814: LD_VAR 0 1
3818: PPUSH
3819: LD_INT 2
3821: PPUSH
3822: CALL_OW 322
// if def_siberite_bomb = 1 then
3826: LD_EXP 48
3830: PUSH
3831: LD_INT 1
3833: EQUAL
3834: IFFALSE 3868
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3836: LD_INT 25
3838: PPUSH
3839: LD_VAR 0 1
3843: PPUSH
3844: LD_INT 1
3846: PPUSH
3847: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3851: LD_INT 73
3853: PPUSH
3854: LD_VAR 0 1
3858: PPUSH
3859: LD_INT 1
3861: PPUSH
3862: CALL_OW 322
// end else
3866: GO 3898
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3868: LD_INT 25
3870: PPUSH
3871: LD_VAR 0 1
3875: PPUSH
3876: LD_INT 0
3878: PPUSH
3879: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3883: LD_INT 73
3885: PPUSH
3886: LD_VAR 0 1
3890: PPUSH
3891: LD_INT 0
3893: PPUSH
3894: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3898: LD_INT 24
3900: PPUSH
3901: LD_VAR 0 1
3905: PPUSH
3906: LD_INT 0
3908: PPUSH
3909: CALL_OW 322
// global_defined := true ;
3913: LD_ADDR_LOC 3
3917: PUSH
3918: LD_INT 1
3920: ST_TO_ADDR
// end ;
3921: LD_VAR 0 2
3925: RET
// every 0 0$1 do
3926: GO 3928
3928: DISABLE
// if ( def_siberite_bomb > 1 ) then
3929: LD_EXP 48
3933: PUSH
3934: LD_INT 1
3936: GREATER
3937: IFFALSE 3952
// begin wait ( siberite_bomb_Delay ) ;
3939: LD_EXP 16
3943: PPUSH
3944: CALL_OW 67
// EnableSibFiss ;
3948: CALL 3953 0 0
// end ;
3952: END
// function EnableSibFiss ; var i ; begin
3953: LD_INT 0
3955: PPUSH
3956: PPUSH
// for i := 1 to 8 do
3957: LD_ADDR_VAR 0 2
3961: PUSH
3962: DOUBLE
3963: LD_INT 1
3965: DEC
3966: ST_TO_ADDR
3967: LD_INT 8
3969: PUSH
3970: FOR_TO
3971: IFFALSE 4017
// if Side_Positions [ i ] then
3973: LD_EXP 21
3977: PUSH
3978: LD_VAR 0 2
3982: ARRAY
3983: IFFALSE 4015
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3985: LD_INT 25
3987: PPUSH
3988: LD_VAR 0 2
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4000: LD_INT 73
4002: PPUSH
4003: LD_VAR 0 2
4007: PPUSH
4008: LD_INT 1
4010: PPUSH
4011: CALL_OW 322
// end ;
4015: GO 3970
4017: POP
4018: POP
// end ;
4019: LD_VAR 0 1
4023: RET
// function prepare_sides ; var i ; begin
4024: LD_INT 0
4026: PPUSH
4027: PPUSH
// global_units := [ ] ;
4028: LD_ADDR_LOC 2
4032: PUSH
4033: EMPTY
4034: ST_TO_ADDR
// global_defined := false ;
4035: LD_ADDR_LOC 3
4039: PUSH
4040: LD_INT 0
4042: ST_TO_ADDR
// CountClassMembers ;
4043: CALL 4093 0 0
// for i := 1 to 8 do
4047: LD_ADDR_VAR 0 2
4051: PUSH
4052: DOUBLE
4053: LD_INT 1
4055: DEC
4056: ST_TO_ADDR
4057: LD_INT 8
4059: PUSH
4060: FOR_TO
4061: IFFALSE 4086
// if Side_Positions [ i ] then
4063: LD_EXP 21
4067: PUSH
4068: LD_VAR 0 2
4072: ARRAY
4073: IFFALSE 4084
// prepare_side ( i ) ;
4075: LD_VAR 0 2
4079: PPUSH
4080: CALL 2802 0 1
4084: GO 4060
4086: POP
4087: POP
// end ;
4088: LD_VAR 0 1
4092: RET
// function CountClassMembers ; var Mode ; begin
4093: LD_INT 0
4095: PPUSH
4096: PPUSH
// if No_Mechs then
4097: LD_EXP 50
4101: IFFALSE 4113
// Mode := 2 else
4103: LD_ADDR_VAR 0 2
4107: PUSH
4108: LD_INT 2
4110: ST_TO_ADDR
4111: GO 4121
// Mode := 1 ;
4113: LD_ADDR_VAR 0 2
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// neng := number_of_people ;
4121: LD_ADDR_LOC 5
4125: PUSH
4126: LD_EXP 5
4130: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4131: LD_ADDR_LOC 8
4135: PUSH
4136: LD_LOC 5
4140: PUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_VAR 0 2
4155: ARRAY
4156: DIV
4157: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4158: LD_LOC 8
4162: PUSH
4163: LD_EXP 4
4167: LESS
4168: IFFALSE 4180
// nsol := number_of_breastworks ;
4170: LD_ADDR_LOC 8
4174: PUSH
4175: LD_EXP 4
4179: ST_TO_ADDR
// neng := neng - nsol ;
4180: LD_ADDR_LOC 5
4184: PUSH
4185: LD_LOC 5
4189: PUSH
4190: LD_LOC 8
4194: MINUS
4195: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4196: LD_ADDR_LOC 6
4200: PUSH
4201: LD_LOC 5
4205: PUSH
4206: LD_INT 3
4208: PUSH
4209: LD_INT 2
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: LD_VAR 0 2
4220: ARRAY
4221: DIV
4222: ST_TO_ADDR
// if ( nsci < 1 ) then
4223: LD_LOC 6
4227: PUSH
4228: LD_INT 1
4230: LESS
4231: IFFALSE 4241
// nsci := 1 ;
4233: LD_ADDR_LOC 6
4237: PUSH
4238: LD_INT 1
4240: ST_TO_ADDR
// neng := neng - nsci ;
4241: LD_ADDR_LOC 5
4245: PUSH
4246: LD_LOC 5
4250: PUSH
4251: LD_LOC 6
4255: MINUS
4256: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4257: LD_ADDR_LOC 7
4261: PUSH
4262: LD_LOC 5
4266: PUSH
4267: LD_INT 2
4269: DIV
4270: PUSH
4271: LD_INT 0
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PUSH
4278: LD_VAR 0 2
4282: ARRAY
4283: ST_TO_ADDR
// neng := neng - nmech ;
4284: LD_ADDR_LOC 5
4288: PUSH
4289: LD_LOC 5
4293: PUSH
4294: LD_LOC 7
4298: MINUS
4299: ST_TO_ADDR
// if ( neng < 1 ) then
4300: LD_LOC 5
4304: PUSH
4305: LD_INT 1
4307: LESS
4308: IFFALSE 4318
// neng := 1 ;
4310: LD_ADDR_LOC 5
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// end ;
4318: LD_VAR 0 1
4322: RET
// starting begin disable ( 98 ) ;
4323: LD_INT 98
4325: DISABLE_MARKED
// disable ( 99 ) ;
4326: LD_INT 99
4328: DISABLE_MARKED
// disable ( 100 ) ;
4329: LD_INT 100
4331: DISABLE_MARKED
// disable ( 4 ) ;
4332: LD_INT 4
4334: DISABLE_MARKED
// disable ( 400 ) ;
4335: LD_INT 400
4337: DISABLE_MARKED
// disable ( 401 ) ;
4338: LD_INT 401
4340: DISABLE_MARKED
// mp_selectmsg := true ;
4341: LD_ADDR_OWVAR 13
4345: PUSH
4346: LD_INT 1
4348: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4349: CALL 68 0 0
// init_map ;
4353: CALL 1454 0 0
// set_shared_visions_and_alliances ;
4357: CALL 1983 0 0
// ResetFog ;
4361: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4365: LD_OWVAR 2
4369: PPUSH
4370: CALL_OW 520
// prepare_sides ;
4374: CALL 4024 0 0
// init_shipments_and_respawning ;
4378: CALL 4515 0 0
// Init_Win_Condition ;
4382: CALL 11392 0 0
// if game_type = 3 then
4386: LD_EXP 34
4390: PUSH
4391: LD_INT 3
4393: EQUAL
4394: IFFALSE 4404
// begin InitPoints ( ) ;
4396: CALL 10395 0 0
// init_kings_counting ;
4400: CALL 12755 0 0
// end ; InitLimits ;
4404: CALL 9265 0 0
// ShowTimer ;
4408: CALL 10202 0 0
// music_nat := Side_Nations [ your_side ] ;
4412: LD_ADDR_OWVAR 71
4416: PUSH
4417: LD_EXP 22
4421: PUSH
4422: LD_OWVAR 2
4426: ARRAY
4427: ST_TO_ADDR
// if IAmSpec then
4428: CALL_OW 531
4432: IFFALSE 4468
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4434: LD_INT 0
4436: PPUSH
4437: LD_INT 0
4439: PPUSH
4440: LD_OWVAR 2
4444: PPUSH
4445: LD_INT 32767
4447: NEG
4448: PPUSH
4449: CALL_OW 330
// CenterNowOnXY ( 119 , 79 ) ;
4453: LD_INT 119
4455: PPUSH
4456: LD_INT 79
4458: PPUSH
4459: CALL_OW 86
// enable ( 400 ) ;
4463: LD_INT 400
4465: ENABLE_MARKED
// end else
4466: GO 4514
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4468: LD_EXP 26
4472: PUSH
4473: LD_EXP 21
4477: PUSH
4478: LD_OWVAR 2
4482: ARRAY
4483: ARRAY
4484: PUSH
4485: LD_INT 1
4487: ARRAY
4488: PPUSH
4489: LD_EXP 26
4493: PUSH
4494: LD_EXP 21
4498: PUSH
4499: LD_OWVAR 2
4503: ARRAY
4504: ARRAY
4505: PUSH
4506: LD_INT 2
4508: ARRAY
4509: PPUSH
4510: CALL_OW 86
// end ; end ; end_of_file
4514: END
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4515: LD_INT 0
4517: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4518: LD_ADDR_LOC 9
4522: PUSH
4523: LD_INT 0
4525: PPUSH
4526: LD_INT 3
4528: PPUSH
4529: CALL_OW 12
4533: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
4534: LD_ADDR_LOC 10
4538: PUSH
4539: LD_INT 1
4541: PPUSH
4542: LD_INT 8
4544: PPUSH
4545: CALL_OW 12
4549: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4550: LD_ADDR_LOC 11
4554: PUSH
4555: LD_INT 0
4557: PUSH
4558: LD_INT 0
4560: PUSH
4561: LD_INT 0
4563: PUSH
4564: LD_INT 0
4566: PUSH
4567: LD_INT 0
4569: PUSH
4570: LD_INT 0
4572: PUSH
4573: LD_INT 0
4575: PUSH
4576: LD_INT 0
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: ST_TO_ADDR
// end ;
4589: LD_VAR 0 1
4593: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
4594: GO 4596
4596: DISABLE
4597: LD_INT 0
4599: PPUSH
4600: PPUSH
4601: PPUSH
4602: PPUSH
// begin if respawning_time_max = 0 then
4603: LD_EXP 14
4607: PUSH
4608: LD_INT 0
4610: EQUAL
4611: IFFALSE 4615
// exit ;
4613: GO 5122
// if respawn = 8 then
4615: LD_LOC 10
4619: PUSH
4620: LD_INT 8
4622: EQUAL
4623: IFFALSE 4635
// respawn := 1 else
4625: LD_ADDR_LOC 10
4629: PUSH
4630: LD_INT 1
4632: ST_TO_ADDR
4633: GO 4649
// respawn := respawn + 1 ;
4635: LD_ADDR_LOC 10
4639: PUSH
4640: LD_LOC 10
4644: PUSH
4645: LD_INT 1
4647: PLUS
4648: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
4649: LD_EXP 21
4653: PUSH
4654: LD_LOC 10
4658: ARRAY
4659: PUSH
4660: LD_LOC 11
4664: PUSH
4665: LD_LOC 10
4669: ARRAY
4670: NOT
4671: AND
4672: IFFALSE 5121
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
4674: LD_ADDR_VAR 0 1
4678: PUSH
4679: LD_INT 21
4681: PUSH
4682: LD_INT 1
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 22
4691: PUSH
4692: LD_LOC 10
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: PUSH
4701: LD_INT 3
4703: PUSH
4704: LD_INT 23
4706: PUSH
4707: LD_INT 0
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: PPUSH
4720: CALL_OW 69
4724: ST_TO_ADDR
// if n < number_of_people then
4725: LD_VAR 0 1
4729: PUSH
4730: LD_EXP 5
4734: LESS
4735: IFFALSE 5118
// begin aktresp := respawn ;
4737: LD_ADDR_VAR 0 3
4741: PUSH
4742: LD_LOC 10
4746: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
4747: LD_ADDR_LOC 11
4751: PUSH
4752: LD_LOC 11
4756: PPUSH
4757: LD_VAR 0 3
4761: PPUSH
4762: LD_INT 1
4764: PPUSH
4765: CALL_OW 1
4769: ST_TO_ADDR
// enable ;
4770: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
4771: LD_EXP 13
4775: PPUSH
4776: LD_EXP 14
4780: PPUSH
4781: CALL_OW 12
4785: PPUSH
4786: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
4790: LD_ADDR_LOC 11
4794: PUSH
4795: LD_LOC 11
4799: PPUSH
4800: LD_VAR 0 3
4804: PPUSH
4805: LD_INT 0
4807: PPUSH
4808: CALL_OW 1
4812: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4813: LD_ADDR_VAR 0 2
4817: PUSH
4818: LD_INT 21
4820: PUSH
4821: LD_INT 3
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 2
4830: PUSH
4831: LD_INT 30
4833: PUSH
4834: LD_INT 0
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: LD_INT 30
4843: PUSH
4844: LD_INT 1
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 50
4858: PUSH
4859: EMPTY
4860: LIST
4861: PUSH
4862: LD_INT 22
4864: PUSH
4865: LD_VAR 0 3
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: PPUSH
4880: CALL_OW 69
4884: ST_TO_ADDR
// if building_list = 0 then
4885: LD_VAR 0 2
4889: PUSH
4890: LD_INT 0
4892: EQUAL
4893: IFFALSE 4938
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4895: LD_ADDR_VAR 0 2
4899: PUSH
4900: LD_INT 21
4902: PUSH
4903: LD_INT 3
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 50
4912: PUSH
4913: EMPTY
4914: LIST
4915: PUSH
4916: LD_INT 22
4918: PUSH
4919: LD_VAR 0 3
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: PPUSH
4933: CALL_OW 69
4937: ST_TO_ADDR
// if building_list = 0 then
4938: LD_VAR 0 2
4942: PUSH
4943: LD_INT 0
4945: EQUAL
4946: IFFALSE 4950
// exit ;
4948: GO 5122
// hc_name :=  ;
4950: LD_ADDR_OWVAR 26
4954: PUSH
4955: LD_STRING 
4957: ST_TO_ADDR
// hc_importance := 0 ;
4958: LD_ADDR_OWVAR 32
4962: PUSH
4963: LD_INT 0
4965: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
4966: LD_INT 0
4968: PPUSH
4969: LD_INT 0
4971: PPUSH
4972: LD_EXP 7
4976: PUSH
4977: LD_INT 2
4979: DIV
4980: PPUSH
4981: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
4985: LD_ADDR_OWVAR 21
4989: PUSH
4990: LD_EXP 22
4994: PUSH
4995: LD_VAR 0 3
4999: ARRAY
5000: ST_TO_ADDR
// uc_side := aktresp ;
5001: LD_ADDR_OWVAR 20
5005: PUSH
5006: LD_VAR 0 3
5010: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5011: LD_ADDR_VAR 0 4
5015: PUSH
5016: LD_VAR 0 2
5020: PUSH
5021: LD_INT 1
5023: PPUSH
5024: LD_VAR 0 2
5028: PUSH
5029: LD_INT 0
5031: PLUS
5032: PPUSH
5033: CALL_OW 12
5037: ARRAY
5038: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5039: LD_VAR 0 4
5043: PPUSH
5044: CALL_OW 266
5048: PUSH
5049: LD_INT 0
5051: PUSH
5052: LD_INT 1
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: IN
5059: IFFALSE 5071
// n = 25 else
5061: LD_ADDR_VAR 0 1
5065: PUSH
5066: LD_INT 25
5068: ST_TO_ADDR
5069: GO 5079
// n = 10 ;
5071: LD_ADDR_VAR 0 1
5075: PUSH
5076: LD_INT 10
5078: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5079: CALL_OW 44
5083: PPUSH
5084: LD_VAR 0 4
5088: PPUSH
5089: CALL_OW 250
5093: PPUSH
5094: LD_VAR 0 4
5098: PPUSH
5099: CALL_OW 251
5103: PPUSH
5104: LD_VAR 0 1
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: CALL_OW 50
// end else
5116: GO 5119
// enable ;
5118: ENABLE
// end else
5119: GO 5122
// enable ;
5121: ENABLE
// end ;
5122: PPOPN 4
5124: END
// every 0 0$5 + 0 0$1.1 do var d ;
5125: GO 5127
5127: DISABLE
5128: LD_INT 0
5130: PPUSH
// begin case tick of 1 .. 1 1$0 :
5131: LD_OWVAR 1
5135: PUSH
5136: LD_INT 1
5138: DOUBLE
5139: GREATEREQUAL
5140: IFFALSE 5148
5142: LD_INT 2100
5144: DOUBLE
5145: LESSEQUAL
5146: IFTRUE 5150
5148: GO 5161
5150: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5151: LD_ADDR_VAR 0 1
5155: PUSH
5156: LD_INT 150
5158: ST_TO_ADDR
5159: GO 5344
5161: LD_INT 2100
5163: PUSH
5164: LD_INT 1
5166: PLUS
5167: DOUBLE
5168: GREATEREQUAL
5169: IFFALSE 5177
5171: LD_INT 10500
5173: DOUBLE
5174: LESSEQUAL
5175: IFTRUE 5179
5177: GO 5190
5179: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5180: LD_ADDR_VAR 0 1
5184: PUSH
5185: LD_INT 100
5187: ST_TO_ADDR
5188: GO 5344
5190: LD_INT 10500
5192: PUSH
5193: LD_INT 1
5195: PLUS
5196: DOUBLE
5197: GREATEREQUAL
5198: IFFALSE 5206
5200: LD_INT 21000
5202: DOUBLE
5203: LESSEQUAL
5204: IFTRUE 5208
5206: GO 5219
5208: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5209: LD_ADDR_VAR 0 1
5213: PUSH
5214: LD_INT 90
5216: ST_TO_ADDR
5217: GO 5344
5219: LD_INT 21000
5221: PUSH
5222: LD_INT 1
5224: PLUS
5225: DOUBLE
5226: GREATEREQUAL
5227: IFFALSE 5235
5229: LD_INT 42000
5231: DOUBLE
5232: LESSEQUAL
5233: IFTRUE 5237
5235: GO 5248
5237: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5238: LD_ADDR_VAR 0 1
5242: PUSH
5243: LD_INT 70
5245: ST_TO_ADDR
5246: GO 5344
5248: LD_INT 42000
5250: PUSH
5251: LD_INT 1
5253: PLUS
5254: DOUBLE
5255: GREATEREQUAL
5256: IFFALSE 5264
5258: LD_INT 63000
5260: DOUBLE
5261: LESSEQUAL
5262: IFTRUE 5266
5264: GO 5277
5266: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5267: LD_ADDR_VAR 0 1
5271: PUSH
5272: LD_INT 60
5274: ST_TO_ADDR
5275: GO 5344
5277: LD_INT 63000
5279: PUSH
5280: LD_INT 1
5282: PLUS
5283: DOUBLE
5284: GREATEREQUAL
5285: IFFALSE 5293
5287: LD_INT 105000
5289: DOUBLE
5290: LESSEQUAL
5291: IFTRUE 5295
5293: GO 5306
5295: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5296: LD_ADDR_VAR 0 1
5300: PUSH
5301: LD_INT 35
5303: ST_TO_ADDR
5304: GO 5344
5306: LD_INT 105000
5308: PUSH
5309: LD_INT 1
5311: PLUS
5312: DOUBLE
5313: GREATEREQUAL
5314: IFFALSE 5322
5316: LD_INT 630000
5318: DOUBLE
5319: LESSEQUAL
5320: IFTRUE 5324
5322: GO 5335
5324: POP
// d := 20 ; else
5325: LD_ADDR_VAR 0 1
5329: PUSH
5330: LD_INT 20
5332: ST_TO_ADDR
5333: GO 5344
5335: POP
// d := 0 ; end ;
5336: LD_ADDR_VAR 0 1
5340: PUSH
5341: LD_INT 0
5343: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5344: LD_INT 1
5346: PPUSH
5347: LD_INT 10000
5349: PPUSH
5350: CALL_OW 12
5354: PUSH
5355: LD_VAR 0 1
5359: PUSH
5360: LD_EXP 10
5364: MUL
5365: LESSEQUAL
5366: IFFALSE 5420
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5368: LD_INT 1
5370: PPUSH
5371: LD_INT 140
5373: PPUSH
5374: CALL_OW 12
5378: PPUSH
5379: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5383: LD_ADDR_LOC 9
5387: PUSH
5388: LD_LOC 9
5392: PUSH
5393: LD_INT 1
5395: PLUS
5396: PUSH
5397: LD_INT 4
5399: MOD
5400: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLH + shipment , true ) ;
5401: LD_INT 5
5403: PPUSH
5404: LD_INT 3
5406: PUSH
5407: LD_LOC 9
5411: PLUS
5412: PPUSH
5413: LD_INT 1
5415: PPUSH
5416: CALL_OW 55
// end ; enable ;
5420: ENABLE
// end ;
5421: PPOPN 1
5423: END
// every 0 0$7 + 0 0$1.7 do var d ;
5424: GO 5426
5426: DISABLE
5427: LD_INT 0
5429: PPUSH
// begin case tick of 1 .. 1 1$0 :
5430: LD_OWVAR 1
5434: PUSH
5435: LD_INT 1
5437: DOUBLE
5438: GREATEREQUAL
5439: IFFALSE 5447
5441: LD_INT 2100
5443: DOUBLE
5444: LESSEQUAL
5445: IFTRUE 5449
5447: GO 5460
5449: POP
// d := 20 ; 1 1$0 + 1 .. 5 5$0 :
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 20
5457: ST_TO_ADDR
5458: GO 5643
5460: LD_INT 2100
5462: PUSH
5463: LD_INT 1
5465: PLUS
5466: DOUBLE
5467: GREATEREQUAL
5468: IFFALSE 5476
5470: LD_INT 10500
5472: DOUBLE
5473: LESSEQUAL
5474: IFTRUE 5478
5476: GO 5489
5478: POP
// d := 50 ; 5 5$0 + 1 .. 10 10$0 :
5479: LD_ADDR_VAR 0 1
5483: PUSH
5484: LD_INT 50
5486: ST_TO_ADDR
5487: GO 5643
5489: LD_INT 10500
5491: PUSH
5492: LD_INT 1
5494: PLUS
5495: DOUBLE
5496: GREATEREQUAL
5497: IFFALSE 5505
5499: LD_INT 21000
5501: DOUBLE
5502: LESSEQUAL
5503: IFTRUE 5507
5505: GO 5518
5507: POP
// d := 150 ; 10 10$0 + 1 .. 20 20$0 :
5508: LD_ADDR_VAR 0 1
5512: PUSH
5513: LD_INT 150
5515: ST_TO_ADDR
5516: GO 5643
5518: LD_INT 21000
5520: PUSH
5521: LD_INT 1
5523: PLUS
5524: DOUBLE
5525: GREATEREQUAL
5526: IFFALSE 5534
5528: LD_INT 42000
5530: DOUBLE
5531: LESSEQUAL
5532: IFTRUE 5536
5534: GO 5547
5536: POP
// d := 100 ; 20 20$0 + 1 .. 30 30$0 :
5537: LD_ADDR_VAR 0 1
5541: PUSH
5542: LD_INT 100
5544: ST_TO_ADDR
5545: GO 5643
5547: LD_INT 42000
5549: PUSH
5550: LD_INT 1
5552: PLUS
5553: DOUBLE
5554: GREATEREQUAL
5555: IFFALSE 5563
5557: LD_INT 63000
5559: DOUBLE
5560: LESSEQUAL
5561: IFTRUE 5565
5563: GO 5576
5565: POP
// d := 90 ; 30 30$0 + 1 .. 50 50$0 :
5566: LD_ADDR_VAR 0 1
5570: PUSH
5571: LD_INT 90
5573: ST_TO_ADDR
5574: GO 5643
5576: LD_INT 63000
5578: PUSH
5579: LD_INT 1
5581: PLUS
5582: DOUBLE
5583: GREATEREQUAL
5584: IFFALSE 5592
5586: LD_INT 105000
5588: DOUBLE
5589: LESSEQUAL
5590: IFTRUE 5594
5592: GO 5605
5594: POP
// d := 70 ; 50 50$0 + 1 .. 300 300$0 :
5595: LD_ADDR_VAR 0 1
5599: PUSH
5600: LD_INT 70
5602: ST_TO_ADDR
5603: GO 5643
5605: LD_INT 105000
5607: PUSH
5608: LD_INT 1
5610: PLUS
5611: DOUBLE
5612: GREATEREQUAL
5613: IFFALSE 5621
5615: LD_INT 630000
5617: DOUBLE
5618: LESSEQUAL
5619: IFTRUE 5623
5621: GO 5634
5623: POP
// d := 60 ; else
5624: LD_ADDR_VAR 0 1
5628: PUSH
5629: LD_INT 60
5631: ST_TO_ADDR
5632: GO 5643
5634: POP
// d := 35 ; end ;
5635: LD_ADDR_VAR 0 1
5639: PUSH
5640: LD_INT 35
5642: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5643: LD_INT 1
5645: PPUSH
5646: LD_INT 10000
5648: PPUSH
5649: CALL_OW 12
5653: PUSH
5654: LD_VAR 0 1
5658: PUSH
5659: LD_EXP 10
5663: MUL
5664: LESSEQUAL
5665: IFFALSE 5719
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 140
5672: PPUSH
5673: CALL_OW 12
5677: PPUSH
5678: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5682: LD_ADDR_LOC 9
5686: PUSH
5687: LD_LOC 9
5691: PUSH
5692: LD_INT 1
5694: PLUS
5695: PUSH
5696: LD_INT 4
5698: MOD
5699: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLHOut + shipment , true ) ;
5700: LD_INT 5
5702: PPUSH
5703: LD_INT 20
5705: PUSH
5706: LD_LOC 9
5710: PLUS
5711: PPUSH
5712: LD_INT 1
5714: PPUSH
5715: CALL_OW 55
// end ; enable ;
5719: ENABLE
// end ;
5720: PPOPN 1
5722: END
// every 1 1$0 trigger def_shipments_density do
5723: LD_EXP 40
5727: IFFALSE 5763
5729: GO 5731
5731: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 15
5737: PPUSH
5738: LD_INT 1
5740: PPUSH
5741: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5745: LD_INT 6300
5747: PUSH
5748: LD_INT 2100
5750: PUSH
5751: LD_EXP 40
5755: MUL
5756: MINUS
5757: PPUSH
5758: CALL_OW 67
// enable ;
5762: ENABLE
// end ; end_of_file
5763: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5764: LD_VAR 0 1
5768: PPUSH
5769: CALL_OW 266
5773: PUSH
5774: LD_INT 0
5776: PUSH
5777: LD_INT 1
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: IN
5784: IFFALSE 5809
// SetBName ( b , @ & GetSide ( b ) ) ;
5786: LD_VAR 0 1
5790: PPUSH
5791: LD_STRING @
5793: PUSH
5794: LD_VAR 0 1
5798: PPUSH
5799: CALL_OW 255
5803: STR
5804: PPUSH
5805: CALL_OW 500
// if def_game_rules then
5809: LD_EXP 35
5813: IFFALSE 5850
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
5815: LD_VAR 0 1
5819: PPUSH
5820: LD_VAR 0 1
5824: PPUSH
5825: CALL_OW 266
5829: PPUSH
5830: LD_VAR 0 1
5834: PPUSH
5835: CALL_OW 255
5839: PPUSH
5840: LD_INT 0
5842: PPUSH
5843: LD_INT 1
5845: PPUSH
5846: CALL 9666 0 5
// end ;
5850: PPOPN 2
5852: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5853: LD_VAR 0 1
5857: PPUSH
5858: CALL_OW 266
5862: PUSH
5863: LD_INT 0
5865: PUSH
5866: LD_INT 1
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: IN
5873: IFFALSE 5898
// SetBName ( b , @ & GetSide ( b ) ) ;
5875: LD_VAR 0 1
5879: PPUSH
5880: LD_STRING @
5882: PUSH
5883: LD_VAR 0 1
5887: PPUSH
5888: CALL_OW 255
5892: STR
5893: PPUSH
5894: CALL_OW 500
// if def_game_rules then
5898: LD_EXP 35
5902: IFFALSE 5941
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
5904: LD_VAR 0 1
5908: PPUSH
5909: LD_VAR 0 1
5913: PPUSH
5914: CALL_OW 266
5918: PPUSH
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 255
5928: PPUSH
5929: LD_VAR 0 2
5933: PPUSH
5934: LD_INT 1
5936: PPUSH
5937: CALL 9666 0 5
// end ;
5941: PPOPN 3
5943: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
5944: LD_INT 0
5946: PPUSH
5947: PPUSH
5948: PPUSH
5949: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
5950: LD_VAR 0 1
5954: PPUSH
5955: CALL_OW 255
5959: PUSH
5960: LD_INT 0
5962: EQUAL
5963: PUSH
5964: LD_VAR 0 1
5968: PPUSH
5969: CALL_OW 257
5973: PUSH
5974: LD_INT 12
5976: EQUAL
5977: AND
5978: IFFALSE 5984
// CheckApemenAmount ;
5980: CALL 6393 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
5984: LD_VAR 0 1
5988: PPUSH
5989: CALL_OW 266
5993: PUSH
5994: LD_INT 0
5996: PUSH
5997: LD_INT 1
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: IN
6004: IFFALSE 6086
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6006: LD_ADDR_VAR 0 4
6010: PUSH
6011: LD_EXP 21
6015: PUSH
6016: LD_VAR 0 1
6020: PPUSH
6021: CALL_OW 255
6025: ARRAY
6026: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: LD_EXP 26
6036: PUSH
6037: LD_VAR 0 4
6041: ARRAY
6042: PUSH
6043: LD_INT 1
6045: ARRAY
6046: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6047: LD_ADDR_VAR 0 3
6051: PUSH
6052: LD_EXP 26
6056: PUSH
6057: LD_VAR 0 4
6061: ARRAY
6062: PUSH
6063: LD_INT 2
6065: ARRAY
6066: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 3
6076: PPUSH
6077: CALL_OW 420
6081: PPUSH
6082: CALL_OW 419
// end ; if def_game_rules then
6086: LD_EXP 35
6090: IFFALSE 6189
// if ( GetType ( j ) = 3 ) then
6092: LD_VAR 0 1
6096: PPUSH
6097: CALL_OW 247
6101: PUSH
6102: LD_INT 3
6104: EQUAL
6105: IFFALSE 6145
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6107: LD_VAR 0 1
6111: PPUSH
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 266
6121: PPUSH
6122: LD_VAR 0 1
6126: PPUSH
6127: CALL_OW 255
6131: PPUSH
6132: LD_INT 0
6134: PPUSH
6135: LD_INT 1
6137: NEG
6138: PPUSH
6139: CALL 9666 0 5
6143: GO 6189
// if ( GetChassis ( j ) = 25 ) then
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 265
6154: PUSH
6155: LD_INT 25
6157: EQUAL
6158: IFFALSE 6189
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6160: LD_VAR 0 1
6164: PPUSH
6165: LD_INT 37
6167: PPUSH
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 255
6177: PPUSH
6178: LD_INT 0
6180: PPUSH
6181: LD_INT 1
6183: NEG
6184: PPUSH
6185: CALL 9666 0 5
// end ;
6189: PPOPN 5
6191: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6192: LD_EXP 35
6196: PUSH
6197: LD_VAR 0 1
6201: PPUSH
6202: CALL_OW 265
6206: PUSH
6207: LD_INT 25
6209: EQUAL
6210: AND
6211: IFFALSE 6243
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6213: LD_VAR 0 1
6217: PPUSH
6218: LD_INT 37
6220: PPUSH
6221: LD_VAR 0 1
6225: PPUSH
6226: CALL_OW 255
6230: PPUSH
6231: LD_VAR 0 3
6235: PPUSH
6236: LD_INT 1
6238: PPUSH
6239: CALL 9666 0 5
// end ;
6243: PPOPN 4
6245: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_VAR 0 2
6255: PPUSH
6256: LD_VAR 0 3
6260: PPUSH
6261: LD_OWVAR 2
6265: PPUSH
6266: CALL 11153 0 4
6270: PPOPN 3
6272: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
6273: GO 6275
6275: DISABLE
6276: LD_INT 0
6278: PPUSH
// begin _apemenIncrement := 0 ;
6279: LD_ADDR_LOC 12
6283: PUSH
6284: LD_INT 0
6286: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
6287: LD_ADDR_LOC 14
6291: PUSH
6292: LD_INT 0
6294: ST_TO_ADDR
// _isSpawning := true ;
6295: LD_ADDR_LOC 16
6299: PUSH
6300: LD_INT 1
6302: ST_TO_ADDR
// _wildApemenAmount := 0 ;
6303: LD_ADDR_LOC 17
6307: PUSH
6308: LD_INT 0
6310: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
6311: LD_ADDR_VAR 0 1
6315: PUSH
6316: LD_EXP 21
6320: PUSH
6321: LD_INT 0
6323: PUSH
6324: EMPTY
6325: LIST
6326: DIFF
6327: PUSH
6328: FOR_IN
6329: IFFALSE 6347
// _apemenIncrement := _apemenIncrement + 1 ;
6331: LD_ADDR_LOC 12
6335: PUSH
6336: LD_LOC 12
6340: PUSH
6341: LD_INT 1
6343: PLUS
6344: ST_TO_ADDR
6345: GO 6328
6347: POP
6348: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
6349: LD_ADDR_LOC 13
6353: PUSH
6354: LD_LOC 12
6358: PUSH
6359: LD_EXP 6
6363: MUL
6364: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
6365: LD_ADDR_LOC 15
6369: PUSH
6370: LD_LOC 13
6374: PUSH
6375: LD_INT 2
6377: DIVREAL
6378: ST_TO_ADDR
// prepare_apemen ;
6379: CALL 6471 0 0
// end ;
6383: PPOPN 1
6385: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
6386: CALL 6393 0 0
// end ;
6390: PPOPN 2
6392: END
// export function CheckApemenAmount ; begin
6393: LD_INT 0
6395: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
6396: LD_ADDR_LOC 17
6400: PUSH
6401: LD_LOC 17
6405: PUSH
6406: LD_INT 1
6408: MINUS
6409: ST_TO_ADDR
// if _isSpawning then
6410: LD_LOC 16
6414: IFFALSE 6418
// exit ;
6416: GO 6466
// if _wildApemenAmount <= ( _apemenThreshold ) then
6418: LD_LOC 17
6422: PUSH
6423: LD_LOC 15
6427: LESSEQUAL
6428: IFFALSE 6466
// begin if _apemenSkillLevel < 8 then
6430: LD_LOC 14
6434: PUSH
6435: LD_INT 8
6437: LESS
6438: IFFALSE 6454
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
6440: LD_ADDR_LOC 14
6444: PUSH
6445: LD_LOC 14
6449: PUSH
6450: LD_INT 1
6452: PLUS
6453: ST_TO_ADDR
// _isSpawning := true ;
6454: LD_ADDR_LOC 16
6458: PUSH
6459: LD_INT 1
6461: ST_TO_ADDR
// prepare_apemen ;
6462: CALL 6471 0 0
// end ; end ;
6466: LD_VAR 0 1
6470: RET
// function prepare_apemen ; var i ; begin
6471: LD_INT 0
6473: PPUSH
6474: PPUSH
// if not amount_of_apemen then
6475: LD_EXP 6
6479: NOT
6480: IFFALSE 6484
// exit ;
6482: GO 6663
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
6484: LD_INT 1050
6486: PPUSH
6487: LD_INT 3150
6489: PPUSH
6490: CALL_OW 12
6494: PPUSH
6495: CALL_OW 67
// apeman_init ;
6499: CALL 6668 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
6503: LD_ADDR_VAR 0 2
6507: PUSH
6508: LD_EXP 21
6512: PUSH
6513: LD_INT 0
6515: PUSH
6516: EMPTY
6517: LIST
6518: DIFF
6519: PUSH
6520: FOR_IN
6521: IFFALSE 6625
// begin if i = 1 then
6523: LD_VAR 0 2
6527: PUSH
6528: LD_INT 1
6530: EQUAL
6531: IFFALSE 6548
// PlaceUnitArea ( CreateHuman , OpiceSZ , false ) ;
6533: CALL_OW 44
6537: PPUSH
6538: LD_INT 11
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 49
// if i = 2 then
6548: LD_VAR 0 2
6552: PUSH
6553: LD_INT 2
6555: EQUAL
6556: IFFALSE 6573
// PlaceUnitArea ( CreateHuman , OpiceSV , false ) ;
6558: CALL_OW 44
6562: PPUSH
6563: LD_INT 12
6565: PPUSH
6566: LD_INT 0
6568: PPUSH
6569: CALL_OW 49
// if i = 3 then
6573: LD_VAR 0 2
6577: PUSH
6578: LD_INT 3
6580: EQUAL
6581: IFFALSE 6598
// PlaceUnitArea ( CreateHuman , OpiceJZ , false ) ;
6583: CALL_OW 44
6587: PPUSH
6588: LD_INT 14
6590: PPUSH
6591: LD_INT 0
6593: PPUSH
6594: CALL_OW 49
// if i = 4 then
6598: LD_VAR 0 2
6602: PUSH
6603: LD_INT 4
6605: EQUAL
6606: IFFALSE 6623
// PlaceUnitArea ( CreateHuman , OpiceJV , false ) ;
6608: CALL_OW 44
6612: PPUSH
6613: LD_INT 13
6615: PPUSH
6616: LD_INT 0
6618: PPUSH
6619: CALL_OW 49
// end ;
6623: GO 6520
6625: POP
6626: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
6627: LD_ADDR_LOC 17
6631: PUSH
6632: LD_LOC 17
6636: PUSH
6637: LD_LOC 12
6641: PLUS
6642: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
6643: LD_LOC 17
6647: PUSH
6648: LD_LOC 13
6652: GREATEREQUAL
6653: IFFALSE 6484
// _isSpawning := false ;
6655: LD_ADDR_LOC 16
6659: PUSH
6660: LD_INT 0
6662: ST_TO_ADDR
// end ;
6663: LD_VAR 0 1
6667: RET
// function apeman_init ; begin
6668: LD_INT 0
6670: PPUSH
// uc_side := 0 ;
6671: LD_ADDR_OWVAR 20
6675: PUSH
6676: LD_INT 0
6678: ST_TO_ADDR
// uc_nation := nation_nature ;
6679: LD_ADDR_OWVAR 21
6683: PUSH
6684: LD_INT 0
6686: ST_TO_ADDR
// hc_class := class_apeman ;
6687: LD_ADDR_OWVAR 28
6691: PUSH
6692: LD_INT 12
6694: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
6695: LD_ADDR_OWVAR 30
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: LD_INT 2
6705: PUSH
6706: LD_INT 2
6708: PUSH
6709: LD_INT 2
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
6718: LD_ADDR_OWVAR 31
6722: PUSH
6723: LD_INT 0
6725: PPUSH
6726: LD_INT 2
6728: PPUSH
6729: CALL_OW 12
6733: PUSH
6734: LD_LOC 14
6738: PLUS
6739: PUSH
6740: LD_INT 0
6742: PPUSH
6743: LD_INT 2
6745: PPUSH
6746: CALL_OW 12
6750: PUSH
6751: LD_LOC 14
6755: PLUS
6756: PUSH
6757: LD_INT 0
6759: PPUSH
6760: LD_INT 2
6762: PPUSH
6763: CALL_OW 12
6767: PUSH
6768: LD_LOC 14
6772: PLUS
6773: PUSH
6774: LD_INT 0
6776: PPUSH
6777: LD_INT 2
6779: PPUSH
6780: CALL_OW 12
6784: PUSH
6785: LD_LOC 14
6789: PLUS
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
6797: LD_ADDR_OWVAR 29
6801: PUSH
6802: LD_INT 10
6804: PUSH
6805: LD_INT 12
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: ST_TO_ADDR
// hc_sex := sex_male ;
6812: LD_ADDR_OWVAR 27
6816: PUSH
6817: LD_INT 1
6819: ST_TO_ADDR
// hc_importance := 0 ;
6820: LD_ADDR_OWVAR 32
6824: PUSH
6825: LD_INT 0
6827: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
6828: LD_ADDR_OWVAR 35
6832: PUSH
6833: LD_INT 20
6835: NEG
6836: PPUSH
6837: LD_INT 20
6839: PPUSH
6840: CALL_OW 12
6844: ST_TO_ADDR
// end ; end_of_file
6845: LD_VAR 0 1
6849: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6850: LD_INT 0
6852: PPUSH
6853: PPUSH
// for un in battle_flags_id do
6854: LD_ADDR_VAR 0 2
6858: PUSH
6859: LD_EXP 28
6863: PUSH
6864: FOR_IN
6865: IFFALSE 6940
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_INT 1
6874: PUSH
6875: LD_LOC 18
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 2
6886: PUSH
6887: LD_LOC 18
6891: PUSH
6892: LD_INT 2
6894: DIV
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 3
6902: PUSH
6903: LD_LOC 18
6907: PUSH
6908: LD_INT 5
6910: DIV
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: PUSH
6916: LD_INT 20
6918: PUSH
6919: LD_LOC 18
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: PPUSH
6934: CALL_OW 423
6938: GO 6864
6940: POP
6941: POP
// end ;
6942: LD_VAR 0 1
6946: RET
// every 0 0$0.1 do var un ;
6947: GO 6949
6949: DISABLE
6950: LD_INT 0
6952: PPUSH
// begin if not def_morale_flags then
6953: LD_EXP 44
6957: NOT
6958: IFFALSE 6962
// exit ;
6960: GO 7039
// if not morale_decreasing_time then
6962: LD_EXP 11
6966: NOT
6967: IFFALSE 6971
// exit ;
6969: GO 7039
// strength = 100 ;
6971: LD_ADDR_LOC 18
6975: PUSH
6976: LD_INT 100
6978: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6979: LD_EXP 11
6983: PPUSH
6984: CALL_OW 67
// strength := strength - 1 ;
6988: LD_ADDR_LOC 18
6992: PUSH
6993: LD_LOC 18
6997: PUSH
6998: LD_INT 1
7000: MINUS
7001: ST_TO_ADDR
// Update_Flags ;
7002: CALL 6850 0 0
// until not strength ;
7006: LD_LOC 18
7010: NOT
7011: IFFALSE 6979
// for un in battle_flags_id do
7013: LD_ADDR_VAR 0 1
7017: PUSH
7018: LD_EXP 28
7022: PUSH
7023: FOR_IN
7024: IFFALSE 7037
// KillBattleFlag ( un ) ;
7026: LD_VAR 0 1
7030: PPUSH
7031: CALL_OW 419
7035: GO 7023
7037: POP
7038: POP
// end ; end_of_file
7039: PPOPN 1
7041: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7042: LD_INT 0
7044: PPUSH
7045: PPUSH
// if ( not IAmSpec ) then
7046: CALL_OW 531
7050: NOT
7051: IFFALSE 7067
// Result := Limits_Info ^  ;
7053: LD_ADDR_VAR 0 1
7057: PUSH
7058: LD_LOC 30
7062: PUSH
7063: LD_STRING 
7065: ADD
7066: ST_TO_ADDR
// for i := 1 to 8 do
7067: LD_ADDR_VAR 0 2
7071: PUSH
7072: DOUBLE
7073: LD_INT 1
7075: DEC
7076: ST_TO_ADDR
7077: LD_INT 8
7079: PUSH
7080: FOR_TO
7081: IFFALSE 7126
// if Cheaters [ i ] then
7083: LD_LOC 31
7087: PUSH
7088: LD_VAR 0 2
7092: ARRAY
7093: IFFALSE 7124
// Result := Result ^ [ #Cheater , i , i ] ;
7095: LD_ADDR_VAR 0 1
7099: PUSH
7100: LD_VAR 0 1
7104: PUSH
7105: LD_STRING #Cheater
7107: PUSH
7108: LD_VAR 0 2
7112: PUSH
7113: LD_VAR 0 2
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: ADD
7123: ST_TO_ADDR
7124: GO 7080
7126: POP
7127: POP
// end ;
7128: LD_VAR 0 1
7132: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7133: LD_INT 0
7135: PPUSH
7136: PPUSH
7137: PPUSH
7138: PPUSH
7139: PPUSH
// case Game_Type of 10 :
7140: LD_EXP 34
7144: PUSH
7145: LD_INT 10
7147: DOUBLE
7148: EQUAL
7149: IFTRUE 7153
7151: GO 7164
7153: POP
// def_game_rules := 1 ; 11 :
7154: LD_ADDR_EXP 35
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
7162: GO 7184
7164: LD_INT 11
7166: DOUBLE
7167: EQUAL
7168: IFTRUE 7172
7170: GO 7183
7172: POP
// def_game_rules := 3 ; end ;
7173: LD_ADDR_EXP 35
7177: PUSH
7178: LD_INT 3
7180: ST_TO_ADDR
7181: GO 7184
7183: POP
// case def_game_rules of 0 :
7184: LD_EXP 35
7188: PUSH
7189: LD_INT 0
7191: DOUBLE
7192: EQUAL
7193: IFTRUE 7197
7195: GO 7202
7197: POP
// exit ; 1 :
7198: GO 9260
7200: GO 9160
7202: LD_INT 1
7204: DOUBLE
7205: EQUAL
7206: IFTRUE 7210
7208: GO 7426
7210: POP
// begin def_base_level := 2 ;
7211: LD_ADDR_EXP 36
7215: PUSH
7216: LD_INT 2
7218: ST_TO_ADDR
// def_amount_of_people := 2 ;
7219: LD_ADDR_EXP 37
7223: PUSH
7224: LD_INT 2
7226: ST_TO_ADDR
// def_skill_level := 1 ;
7227: LD_ADDR_EXP 38
7231: PUSH
7232: LD_INT 1
7234: ST_TO_ADDR
// def_starting_resources := 2 ;
7235: LD_ADDR_EXP 39
7239: PUSH
7240: LD_INT 2
7242: ST_TO_ADDR
// def_shipments_density := 1 ;
7243: LD_ADDR_EXP 40
7247: PUSH
7248: LD_INT 1
7250: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7251: LD_ADDR_EXP 41
7255: PUSH
7256: LD_INT 0
7258: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7259: LD_ADDR_EXP 42
7263: PUSH
7264: LD_INT 1
7266: ST_TO_ADDR
// def_shared_vision := 1 ;
7267: LD_ADDR_EXP 43
7271: PUSH
7272: LD_INT 1
7274: ST_TO_ADDR
// def_morale_flags := 3 ;
7275: LD_ADDR_EXP 44
7279: PUSH
7280: LD_INT 3
7282: ST_TO_ADDR
// def_siberite_detection := 1 ;
7283: LD_ADDR_EXP 45
7287: PUSH
7288: LD_INT 1
7290: ST_TO_ADDR
// def_people_respawning := 1 ;
7291: LD_ADDR_EXP 46
7295: PUSH
7296: LD_INT 1
7298: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7299: LD_ADDR_EXP 47
7303: PUSH
7304: LD_INT 1
7306: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7307: LD_ADDR_EXP 48
7311: PUSH
7312: LD_INT 0
7314: ST_TO_ADDR
// def_builduptime := 2 ;
7315: LD_ADDR_EXP 49
7319: PUSH
7320: LD_INT 2
7322: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
7323: LD_ADDR_VAR 0 2
7327: PUSH
7328: EMPTY
7329: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7330: LD_ADDR_VAR 0 3
7334: PUSH
7335: EMPTY
7336: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7337: LD_ADDR_LOC 25
7341: PUSH
7342: EMPTY
7343: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7344: LD_ADDR_LOC 26
7348: PUSH
7349: EMPTY
7350: ST_TO_ADDR
// Banned_Controls := [ ] ;
7351: LD_ADDR_LOC 27
7355: PUSH
7356: EMPTY
7357: ST_TO_ADDR
// Banned_Engines := [ ] ;
7358: LD_ADDR_LOC 28
7362: PUSH
7363: EMPTY
7364: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7365: LD_ADDR_LOC 23
7369: PUSH
7370: LD_INT 37
7372: PUSH
7373: EMPTY
7374: LIST
7375: PUSH
7376: LD_INT 4
7378: PUSH
7379: LD_INT 5
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: LD_INT 31
7388: PUSH
7389: LD_INT 32
7391: PUSH
7392: LD_INT 33
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
7405: LD_ADDR_LOC 24
7409: PUSH
7410: LD_INT 2
7412: PUSH
7413: LD_INT 2
7415: PUSH
7416: LD_INT 4
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: LIST
7423: ST_TO_ADDR
// end ; 2 :
7424: GO 9160
7426: LD_INT 2
7428: DOUBLE
7429: EQUAL
7430: IFTRUE 7434
7432: GO 7643
7434: POP
// begin def_base_level := 1 ;
7435: LD_ADDR_EXP 36
7439: PUSH
7440: LD_INT 1
7442: ST_TO_ADDR
// def_amount_of_people := 2 ;
7443: LD_ADDR_EXP 37
7447: PUSH
7448: LD_INT 2
7450: ST_TO_ADDR
// def_skill_level := 3 ;
7451: LD_ADDR_EXP 38
7455: PUSH
7456: LD_INT 3
7458: ST_TO_ADDR
// def_starting_resources := 3 ;
7459: LD_ADDR_EXP 39
7463: PUSH
7464: LD_INT 3
7466: ST_TO_ADDR
// def_shipments_density := 2 ;
7467: LD_ADDR_EXP 40
7471: PUSH
7472: LD_INT 2
7474: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
7475: LD_ADDR_EXP 41
7479: PUSH
7480: LD_INT 1
7482: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
7483: LD_ADDR_EXP 42
7487: PUSH
7488: LD_INT 2
7490: ST_TO_ADDR
// def_shared_vision := 1 ;
7491: LD_ADDR_EXP 43
7495: PUSH
7496: LD_INT 1
7498: ST_TO_ADDR
// def_morale_flags := 0 ;
7499: LD_ADDR_EXP 44
7503: PUSH
7504: LD_INT 0
7506: ST_TO_ADDR
// def_siberite_detection := 1 ;
7507: LD_ADDR_EXP 45
7511: PUSH
7512: LD_INT 1
7514: ST_TO_ADDR
// def_people_respawning := 0 ;
7515: LD_ADDR_EXP 46
7519: PUSH
7520: LD_INT 0
7522: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
7523: LD_ADDR_EXP 47
7527: PUSH
7528: LD_INT 0
7530: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7531: LD_ADDR_EXP 48
7535: PUSH
7536: LD_INT 0
7538: ST_TO_ADDR
// def_builduptime := 2 ;
7539: LD_ADDR_EXP 49
7543: PUSH
7544: LD_INT 2
7546: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
7547: LD_ADDR_VAR 0 2
7551: PUSH
7552: LD_INT 1
7554: PUSH
7555: EMPTY
7556: LIST
7557: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7558: LD_ADDR_VAR 0 3
7562: PUSH
7563: EMPTY
7564: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7565: LD_ADDR_LOC 25
7569: PUSH
7570: EMPTY
7571: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7572: LD_ADDR_LOC 26
7576: PUSH
7577: EMPTY
7578: ST_TO_ADDR
// Banned_Controls := [ ] ;
7579: LD_ADDR_LOC 27
7583: PUSH
7584: EMPTY
7585: ST_TO_ADDR
// Banned_Engines := [ ] ;
7586: LD_ADDR_LOC 28
7590: PUSH
7591: EMPTY
7592: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
7593: LD_ADDR_LOC 23
7597: PUSH
7598: LD_INT 4
7600: PUSH
7601: LD_INT 5
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 31
7610: PUSH
7611: LD_INT 32
7613: PUSH
7614: LD_INT 33
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
7626: LD_ADDR_LOC 24
7630: PUSH
7631: LD_INT 1
7633: PUSH
7634: LD_INT 2
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: ST_TO_ADDR
// end ; 3 :
7641: GO 9160
7643: LD_INT 3
7645: DOUBLE
7646: EQUAL
7647: IFTRUE 7651
7649: GO 7894
7651: POP
// begin def_base_level := 1 ;
7652: LD_ADDR_EXP 36
7656: PUSH
7657: LD_INT 1
7659: ST_TO_ADDR
// def_amount_of_people := 2 ;
7660: LD_ADDR_EXP 37
7664: PUSH
7665: LD_INT 2
7667: ST_TO_ADDR
// def_skill_level := 3 ;
7668: LD_ADDR_EXP 38
7672: PUSH
7673: LD_INT 3
7675: ST_TO_ADDR
// def_starting_resources := 3 ;
7676: LD_ADDR_EXP 39
7680: PUSH
7681: LD_INT 3
7683: ST_TO_ADDR
// def_shipments_density := 1 ;
7684: LD_ADDR_EXP 40
7688: PUSH
7689: LD_INT 1
7691: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7692: LD_ADDR_EXP 41
7696: PUSH
7697: LD_INT 0
7699: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7700: LD_ADDR_EXP 42
7704: PUSH
7705: LD_INT 1
7707: ST_TO_ADDR
// def_shared_vision := 1 ;
7708: LD_ADDR_EXP 43
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// def_morale_flags := 0 ;
7716: LD_ADDR_EXP 44
7720: PUSH
7721: LD_INT 0
7723: ST_TO_ADDR
// def_siberite_detection := 1 ;
7724: LD_ADDR_EXP 45
7728: PUSH
7729: LD_INT 1
7731: ST_TO_ADDR
// def_people_respawning := 0 ;
7732: LD_ADDR_EXP 46
7736: PUSH
7737: LD_INT 0
7739: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
7740: LD_ADDR_EXP 47
7744: PUSH
7745: LD_INT 2
7747: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7748: LD_ADDR_EXP 48
7752: PUSH
7753: LD_INT 0
7755: ST_TO_ADDR
// def_builduptime := 1 ;
7756: LD_ADDR_EXP 49
7760: PUSH
7761: LD_INT 1
7763: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
7764: LD_ADDR_VAR 0 2
7768: PUSH
7769: LD_INT 23
7771: PUSH
7772: EMPTY
7773: LIST
7774: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
7775: LD_ADDR_VAR 0 3
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: LD_INT 37
7785: PUSH
7786: LD_INT 32
7788: PUSH
7789: LD_INT 33
7791: PUSH
7792: LD_INT 36
7794: PUSH
7795: LD_INT 16
7797: PUSH
7798: LD_INT 23
7800: PUSH
7801: LD_INT 21
7803: PUSH
7804: LD_INT 18
7806: PUSH
7807: LD_INT 22
7809: PUSH
7810: LD_INT 20
7812: PUSH
7813: LD_INT 19
7815: PUSH
7816: LD_INT 25
7818: PUSH
7819: LD_INT 17
7821: PUSH
7822: LD_INT 24
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7842: LD_ADDR_LOC 25
7846: PUSH
7847: EMPTY
7848: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7849: LD_ADDR_LOC 26
7853: PUSH
7854: EMPTY
7855: ST_TO_ADDR
// Banned_Controls := [ ] ;
7856: LD_ADDR_LOC 27
7860: PUSH
7861: EMPTY
7862: ST_TO_ADDR
// Banned_Engines := [ ] ;
7863: LD_ADDR_LOC 28
7867: PUSH
7868: EMPTY
7869: ST_TO_ADDR
// Restricted_Builds := [ ] ;
7870: LD_ADDR_LOC 23
7874: PUSH
7875: EMPTY
7876: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
7877: LD_ADDR_LOC 24
7881: PUSH
7882: EMPTY
7883: ST_TO_ADDR
// No_Mechs := true ;
7884: LD_ADDR_EXP 50
7888: PUSH
7889: LD_INT 1
7891: ST_TO_ADDR
// end ; 4 :
7892: GO 9160
7894: LD_INT 4
7896: DOUBLE
7897: EQUAL
7898: IFTRUE 7902
7900: GO 8077
7902: POP
// begin def_base_level := 1 ;
7903: LD_ADDR_EXP 36
7907: PUSH
7908: LD_INT 1
7910: ST_TO_ADDR
// def_amount_of_people := 2 ;
7911: LD_ADDR_EXP 37
7915: PUSH
7916: LD_INT 2
7918: ST_TO_ADDR
// def_skill_level := 3 ;
7919: LD_ADDR_EXP 38
7923: PUSH
7924: LD_INT 3
7926: ST_TO_ADDR
// def_starting_resources := 3 ;
7927: LD_ADDR_EXP 39
7931: PUSH
7932: LD_INT 3
7934: ST_TO_ADDR
// def_shipments_density := 2 ;
7935: LD_ADDR_EXP 40
7939: PUSH
7940: LD_INT 2
7942: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
7943: LD_ADDR_EXP 41
7947: PUSH
7948: LD_INT 1
7950: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
7951: LD_ADDR_EXP 42
7955: PUSH
7956: LD_INT 2
7958: ST_TO_ADDR
// def_shared_vision := 1 ;
7959: LD_ADDR_EXP 43
7963: PUSH
7964: LD_INT 1
7966: ST_TO_ADDR
// def_morale_flags := 0 ;
7967: LD_ADDR_EXP 44
7971: PUSH
7972: LD_INT 0
7974: ST_TO_ADDR
// def_siberite_detection := 1 ;
7975: LD_ADDR_EXP 45
7979: PUSH
7980: LD_INT 1
7982: ST_TO_ADDR
// def_people_respawning := 0 ;
7983: LD_ADDR_EXP 46
7987: PUSH
7988: LD_INT 0
7990: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
7991: LD_ADDR_EXP 47
7995: PUSH
7996: LD_INT 0
7998: ST_TO_ADDR
// def_siberite_bomb := 1 ;
7999: LD_ADDR_EXP 48
8003: PUSH
8004: LD_INT 1
8006: ST_TO_ADDR
// def_builduptime := 3 ;
8007: LD_ADDR_EXP 49
8011: PUSH
8012: LD_INT 3
8014: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8015: LD_ADDR_VAR 0 2
8019: PUSH
8020: LD_INT 1
8022: PUSH
8023: EMPTY
8024: LIST
8025: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8026: LD_ADDR_VAR 0 3
8030: PUSH
8031: EMPTY
8032: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8033: LD_ADDR_LOC 25
8037: PUSH
8038: EMPTY
8039: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8040: LD_ADDR_LOC 26
8044: PUSH
8045: EMPTY
8046: ST_TO_ADDR
// Banned_Controls := [ ] ;
8047: LD_ADDR_LOC 27
8051: PUSH
8052: EMPTY
8053: ST_TO_ADDR
// Banned_Engines := [ ] ;
8054: LD_ADDR_LOC 28
8058: PUSH
8059: EMPTY
8060: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8061: LD_ADDR_LOC 23
8065: PUSH
8066: EMPTY
8067: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8068: LD_ADDR_LOC 24
8072: PUSH
8073: EMPTY
8074: ST_TO_ADDR
// end ; 5 :
8075: GO 9160
8077: LD_INT 5
8079: DOUBLE
8080: EQUAL
8081: IFTRUE 8085
8083: GO 8334
8085: POP
// begin def_base_level := 0 ;
8086: LD_ADDR_EXP 36
8090: PUSH
8091: LD_INT 0
8093: ST_TO_ADDR
// def_amount_of_people := 0 ;
8094: LD_ADDR_EXP 37
8098: PUSH
8099: LD_INT 0
8101: ST_TO_ADDR
// def_skill_level := 0 ;
8102: LD_ADDR_EXP 38
8106: PUSH
8107: LD_INT 0
8109: ST_TO_ADDR
// def_starting_resources := 0 ;
8110: LD_ADDR_EXP 39
8114: PUSH
8115: LD_INT 0
8117: ST_TO_ADDR
// def_shipments_density := 0 ;
8118: LD_ADDR_EXP 40
8122: PUSH
8123: LD_INT 0
8125: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8126: LD_ADDR_EXP 41
8130: PUSH
8131: LD_INT 0
8133: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8134: LD_ADDR_EXP 42
8138: PUSH
8139: LD_INT 0
8141: ST_TO_ADDR
// def_shared_vision := 1 ;
8142: LD_ADDR_EXP 43
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// def_morale_flags := 0 ;
8150: LD_ADDR_EXP 44
8154: PUSH
8155: LD_INT 0
8157: ST_TO_ADDR
// def_siberite_detection := 0 ;
8158: LD_ADDR_EXP 45
8162: PUSH
8163: LD_INT 0
8165: ST_TO_ADDR
// def_people_respawning := 1 ;
8166: LD_ADDR_EXP 46
8170: PUSH
8171: LD_INT 1
8173: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8174: LD_ADDR_EXP 47
8178: PUSH
8179: LD_INT 1
8181: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8182: LD_ADDR_EXP 48
8186: PUSH
8187: LD_INT 0
8189: ST_TO_ADDR
// def_builduptime := 0 ;
8190: LD_ADDR_EXP 49
8194: PUSH
8195: LD_INT 0
8197: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8198: LD_ADDR_VAR 0 2
8202: PUSH
8203: LD_INT 10
8205: PUSH
8206: LD_INT 3
8208: PUSH
8209: EMPTY
8210: LIST
8211: LIST
8212: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8213: LD_ADDR_VAR 0 3
8217: PUSH
8218: LD_INT 12
8220: PUSH
8221: LD_INT 11
8223: PUSH
8224: LD_INT 14
8226: PUSH
8227: LD_INT 13
8229: PUSH
8230: LD_INT 5
8232: PUSH
8233: LD_INT 24
8235: PUSH
8236: LD_INT 21
8238: PUSH
8239: LD_INT 33
8241: PUSH
8242: LD_INT 36
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8256: LD_ADDR_LOC 25
8260: PUSH
8261: LD_INT 31
8263: PUSH
8264: EMPTY
8265: LIST
8266: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8267: LD_ADDR_LOC 26
8271: PUSH
8272: EMPTY
8273: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8274: LD_ADDR_LOC 27
8278: PUSH
8279: LD_INT 2
8281: PUSH
8282: EMPTY
8283: LIST
8284: ST_TO_ADDR
// Banned_Engines := [ ] ;
8285: LD_ADDR_LOC 28
8289: PUSH
8290: EMPTY
8291: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8292: LD_ADDR_LOC 23
8296: PUSH
8297: LD_INT 4
8299: PUSH
8300: EMPTY
8301: LIST
8302: PUSH
8303: LD_INT 31
8305: PUSH
8306: LD_INT 32
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
8317: LD_ADDR_LOC 24
8321: PUSH
8322: LD_INT 1
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
// end ; 6 :
8332: GO 9160
8334: LD_INT 6
8336: DOUBLE
8337: EQUAL
8338: IFTRUE 8342
8340: GO 8545
8342: POP
// begin def_base_level := 1 ;
8343: LD_ADDR_EXP 36
8347: PUSH
8348: LD_INT 1
8350: ST_TO_ADDR
// def_amount_of_people := 2 ;
8351: LD_ADDR_EXP 37
8355: PUSH
8356: LD_INT 2
8358: ST_TO_ADDR
// def_skill_level := 3 ;
8359: LD_ADDR_EXP 38
8363: PUSH
8364: LD_INT 3
8366: ST_TO_ADDR
// def_starting_resources := 3 ;
8367: LD_ADDR_EXP 39
8371: PUSH
8372: LD_INT 3
8374: ST_TO_ADDR
// def_shipments_density := 1 ;
8375: LD_ADDR_EXP 40
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8383: LD_ADDR_EXP 41
8387: PUSH
8388: LD_INT 0
8390: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8391: LD_ADDR_EXP 42
8395: PUSH
8396: LD_INT 1
8398: ST_TO_ADDR
// def_shared_vision := 1 ;
8399: LD_ADDR_EXP 43
8403: PUSH
8404: LD_INT 1
8406: ST_TO_ADDR
// def_morale_flags := 0 ;
8407: LD_ADDR_EXP 44
8411: PUSH
8412: LD_INT 0
8414: ST_TO_ADDR
// def_siberite_detection := 1 ;
8415: LD_ADDR_EXP 45
8419: PUSH
8420: LD_INT 1
8422: ST_TO_ADDR
// def_people_respawning := 2 ;
8423: LD_ADDR_EXP 46
8427: PUSH
8428: LD_INT 2
8430: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8431: LD_ADDR_EXP 47
8435: PUSH
8436: LD_INT 1
8438: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8439: LD_ADDR_EXP 48
8443: PUSH
8444: LD_INT 0
8446: ST_TO_ADDR
// def_builduptime := 1 ;
8447: LD_ADDR_EXP 49
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8455: LD_ADDR_VAR 0 2
8459: PUSH
8460: LD_INT 23
8462: PUSH
8463: EMPTY
8464: LIST
8465: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
8466: LD_ADDR_VAR 0 3
8470: PUSH
8471: LD_INT 2
8473: PUSH
8474: LD_INT 37
8476: PUSH
8477: LD_INT 31
8479: PUSH
8480: LD_INT 32
8482: PUSH
8483: LD_INT 33
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8493: LD_ADDR_LOC 25
8497: PUSH
8498: EMPTY
8499: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8500: LD_ADDR_LOC 26
8504: PUSH
8505: EMPTY
8506: ST_TO_ADDR
// Banned_Controls := [ ] ;
8507: LD_ADDR_LOC 27
8511: PUSH
8512: EMPTY
8513: ST_TO_ADDR
// Banned_Engines := [ ] ;
8514: LD_ADDR_LOC 28
8518: PUSH
8519: EMPTY
8520: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8521: LD_ADDR_LOC 23
8525: PUSH
8526: EMPTY
8527: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8528: LD_ADDR_LOC 24
8532: PUSH
8533: EMPTY
8534: ST_TO_ADDR
// No_Mechs := true ;
8535: LD_ADDR_EXP 50
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// end ; 7 :
8543: GO 9160
8545: LD_INT 7
8547: DOUBLE
8548: EQUAL
8549: IFTRUE 8553
8551: GO 8751
8553: POP
// begin def_base_level := 1 ;
8554: LD_ADDR_EXP 36
8558: PUSH
8559: LD_INT 1
8561: ST_TO_ADDR
// def_amount_of_people := 2 ;
8562: LD_ADDR_EXP 37
8566: PUSH
8567: LD_INT 2
8569: ST_TO_ADDR
// def_skill_level := 3 ;
8570: LD_ADDR_EXP 38
8574: PUSH
8575: LD_INT 3
8577: ST_TO_ADDR
// def_starting_resources := 3 ;
8578: LD_ADDR_EXP 39
8582: PUSH
8583: LD_INT 3
8585: ST_TO_ADDR
// def_shipments_density := 1 ;
8586: LD_ADDR_EXP 40
8590: PUSH
8591: LD_INT 1
8593: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8594: LD_ADDR_EXP 41
8598: PUSH
8599: LD_INT 1
8601: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8602: LD_ADDR_EXP 42
8606: PUSH
8607: LD_INT 2
8609: ST_TO_ADDR
// def_shared_vision := 1 ;
8610: LD_ADDR_EXP 43
8614: PUSH
8615: LD_INT 1
8617: ST_TO_ADDR
// def_morale_flags := 0 ;
8618: LD_ADDR_EXP 44
8622: PUSH
8623: LD_INT 0
8625: ST_TO_ADDR
// def_siberite_detection := 1 ;
8626: LD_ADDR_EXP 45
8630: PUSH
8631: LD_INT 1
8633: ST_TO_ADDR
// def_people_respawning := 0 ;
8634: LD_ADDR_EXP 46
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8642: LD_ADDR_EXP 47
8646: PUSH
8647: LD_INT 1
8649: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8650: LD_ADDR_EXP 48
8654: PUSH
8655: LD_INT 0
8657: ST_TO_ADDR
// def_builduptime := 3 ;
8658: LD_ADDR_EXP 49
8662: PUSH
8663: LD_INT 3
8665: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8666: LD_ADDR_VAR 0 2
8670: PUSH
8671: LD_INT 23
8673: PUSH
8674: EMPTY
8675: LIST
8676: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
8677: LD_ADDR_VAR 0 3
8681: PUSH
8682: LD_INT 37
8684: PUSH
8685: EMPTY
8686: LIST
8687: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8688: LD_ADDR_LOC 25
8692: PUSH
8693: EMPTY
8694: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8695: LD_ADDR_LOC 26
8699: PUSH
8700: EMPTY
8701: ST_TO_ADDR
// Banned_Controls := [ ] ;
8702: LD_ADDR_LOC 27
8706: PUSH
8707: EMPTY
8708: ST_TO_ADDR
// Banned_Engines := [ ] ;
8709: LD_ADDR_LOC 28
8713: PUSH
8714: EMPTY
8715: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8716: LD_ADDR_LOC 23
8720: PUSH
8721: LD_INT 31
8723: PUSH
8724: LD_INT 32
8726: PUSH
8727: LD_INT 33
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: LIST
8734: PUSH
8735: EMPTY
8736: LIST
8737: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
8738: LD_ADDR_LOC 24
8742: PUSH
8743: LD_INT 10
8745: PUSH
8746: EMPTY
8747: LIST
8748: ST_TO_ADDR
// end ; 8 :
8749: GO 9160
8751: LD_INT 8
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 9159
8759: POP
// begin def_base_level := 0 ;
8760: LD_ADDR_EXP 36
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
8768: LD_ADDR_EXP 37
8772: PUSH
8773: LD_INT 0
8775: PPUSH
8776: LD_INT 1
8778: PPUSH
8779: CALL_OW 12
8783: ST_TO_ADDR
// def_skill_level := 0 ;
8784: LD_ADDR_EXP 38
8788: PUSH
8789: LD_INT 0
8791: ST_TO_ADDR
// def_starting_resources := 2 ;
8792: LD_ADDR_EXP 39
8796: PUSH
8797: LD_INT 2
8799: ST_TO_ADDR
// def_shipments_density := 1 ;
8800: LD_ADDR_EXP 40
8804: PUSH
8805: LD_INT 1
8807: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8808: LD_ADDR_EXP 41
8812: PUSH
8813: LD_INT 0
8815: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8816: LD_ADDR_EXP 42
8820: PUSH
8821: LD_INT 0
8823: ST_TO_ADDR
// def_shared_vision := 1 ;
8824: LD_ADDR_EXP 43
8828: PUSH
8829: LD_INT 1
8831: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
8832: LD_ADDR_EXP 44
8836: PUSH
8837: LD_INT 0
8839: PPUSH
8840: LD_INT 2
8842: PPUSH
8843: CALL_OW 12
8847: ST_TO_ADDR
// def_siberite_detection := 0 ;
8848: LD_ADDR_EXP 45
8852: PUSH
8853: LD_INT 0
8855: ST_TO_ADDR
// def_people_respawning := 0 ;
8856: LD_ADDR_EXP 46
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8864: LD_ADDR_EXP 47
8868: PUSH
8869: LD_INT 2
8871: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8872: LD_ADDR_EXP 48
8876: PUSH
8877: LD_INT 0
8879: ST_TO_ADDR
// def_builduptime := 0 ;
8880: LD_ADDR_EXP 49
8884: PUSH
8885: LD_INT 0
8887: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
8888: LD_ADDR_VAR 0 2
8892: PUSH
8893: LD_INT 23
8895: PUSH
8896: LD_INT 20
8898: PUSH
8899: LD_INT 40
8901: PUSH
8902: LD_INT 47
8904: PUSH
8905: LD_INT 46
8907: PUSH
8908: LD_INT 39
8910: PUSH
8911: LD_INT 71
8913: PUSH
8914: LD_INT 34
8916: PUSH
8917: LD_INT 41
8919: PUSH
8920: LD_INT 44
8922: PUSH
8923: LD_INT 17
8925: PUSH
8926: LD_INT 16
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
8943: LD_ADDR_VAR 0 3
8947: PUSH
8948: LD_INT 37
8950: PUSH
8951: LD_INT 5
8953: PUSH
8954: LD_INT 13
8956: PUSH
8957: LD_INT 34
8959: PUSH
8960: LD_INT 12
8962: PUSH
8963: LD_INT 15
8965: PUSH
8966: LD_INT 11
8968: PUSH
8969: LD_INT 14
8971: PUSH
8972: LD_INT 29
8974: PUSH
8975: LD_INT 30
8977: PUSH
8978: LD_INT 28
8980: PUSH
8981: LD_INT 24
8983: PUSH
8984: LD_INT 25
8986: PUSH
8987: LD_INT 20
8989: PUSH
8990: LD_INT 21
8992: PUSH
8993: LD_INT 22
8995: PUSH
8996: LD_INT 36
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9018: LD_ADDR_LOC 25
9022: PUSH
9023: EMPTY
9024: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9025: LD_ADDR_LOC 26
9029: PUSH
9030: LD_INT 14
9032: PUSH
9033: EMPTY
9034: LIST
9035: ST_TO_ADDR
// Banned_Controls := [ ] ;
9036: LD_ADDR_LOC 27
9040: PUSH
9041: EMPTY
9042: ST_TO_ADDR
// Banned_Engines := [ ] ;
9043: LD_ADDR_LOC 28
9047: PUSH
9048: EMPTY
9049: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9050: LD_ADDR_LOC 23
9054: PUSH
9055: LD_INT 31
9057: PUSH
9058: LD_INT 32
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: LD_INT 4
9067: PUSH
9068: EMPTY
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9075: LD_ADDR_LOC 24
9079: PUSH
9080: LD_INT 2
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: ST_TO_ADDR
// for i := 1 to 8 do
9090: LD_ADDR_VAR 0 4
9094: PUSH
9095: DOUBLE
9096: LD_INT 1
9098: DEC
9099: ST_TO_ADDR
9100: LD_INT 8
9102: PUSH
9103: FOR_TO
9104: IFFALSE 9155
// if ( Side_Nations [ i ] = 3 ) then
9106: LD_EXP 22
9110: PUSH
9111: LD_VAR 0 4
9115: ARRAY
9116: PUSH
9117: LD_INT 3
9119: EQUAL
9120: IFFALSE 9153
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9122: LD_ADDR_EXP 22
9126: PUSH
9127: LD_EXP 22
9131: PPUSH
9132: LD_VAR 0 4
9136: PPUSH
9137: LD_INT 1
9139: PPUSH
9140: LD_INT 2
9142: PPUSH
9143: CALL_OW 12
9147: PPUSH
9148: CALL_OW 1
9152: ST_TO_ADDR
9153: GO 9103
9155: POP
9156: POP
// end ; end ;
9157: GO 9160
9159: POP
// for i := 1 to 8 do
9160: LD_ADDR_VAR 0 4
9164: PUSH
9165: DOUBLE
9166: LD_INT 1
9168: DEC
9169: ST_TO_ADDR
9170: LD_INT 8
9172: PUSH
9173: FOR_TO
9174: IFFALSE 9258
// if Side_Positions [ i ] then
9176: LD_EXP 21
9180: PUSH
9181: LD_VAR 0 4
9185: ARRAY
9186: IFFALSE 9256
// begin for j in Unavailable_Techs do
9188: LD_ADDR_VAR 0 5
9192: PUSH
9193: LD_VAR 0 2
9197: PUSH
9198: FOR_IN
9199: IFFALSE 9220
// SetTech ( j , i , 0 ) ;
9201: LD_VAR 0 5
9205: PPUSH
9206: LD_VAR 0 4
9210: PPUSH
9211: LD_INT 0
9213: PPUSH
9214: CALL_OW 322
9218: GO 9198
9220: POP
9221: POP
// for j in Unavailable_Builds do
9222: LD_ADDR_VAR 0 5
9226: PUSH
9227: LD_VAR 0 3
9231: PUSH
9232: FOR_IN
9233: IFFALSE 9254
// SetRestrict ( j , i , 0 ) ;
9235: LD_VAR 0 5
9239: PPUSH
9240: LD_VAR 0 4
9244: PPUSH
9245: LD_INT 0
9247: PPUSH
9248: CALL_OW 324
9252: GO 9232
9254: POP
9255: POP
// end ;
9256: GO 9173
9258: POP
9259: POP
// end ;
9260: LD_VAR 0 1
9264: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
9273: PPUSH
// for i := 1 to Restricted_Builds do
9274: LD_ADDR_VAR 0 2
9278: PUSH
9279: DOUBLE
9280: LD_INT 1
9282: DEC
9283: ST_TO_ADDR
9284: LD_LOC 23
9288: PUSH
9289: FOR_TO
9290: IFFALSE 9600
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9292: LD_LOC 23
9296: PUSH
9297: LD_VAR 0 2
9301: ARRAY
9302: PUSH
9303: LD_INT 1
9305: ARRAY
9306: PUSH
9307: LD_INT 31
9309: DOUBLE
9310: EQUAL
9311: IFTRUE 9327
9313: LD_INT 32
9315: DOUBLE
9316: EQUAL
9317: IFTRUE 9327
9319: LD_INT 33
9321: DOUBLE
9322: EQUAL
9323: IFTRUE 9327
9325: GO 9338
9327: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
9328: LD_ADDR_VAR 0 6
9332: PUSH
9333: LD_STRING #Turrets
9335: ST_TO_ADDR
9336: GO 9383
9338: LD_INT 4
9340: DOUBLE
9341: EQUAL
9342: IFTRUE 9352
9344: LD_INT 5
9346: DOUBLE
9347: EQUAL
9348: IFTRUE 9352
9350: GO 9363
9352: POP
// btype := #Armouries ; b_Behemoth :
9353: LD_ADDR_VAR 0 6
9357: PUSH
9358: LD_STRING #Armouries
9360: ST_TO_ADDR
9361: GO 9383
9363: LD_INT 37
9365: DOUBLE
9366: EQUAL
9367: IFTRUE 9371
9369: GO 9382
9371: POP
// btype := #Behemoths ; end ;
9372: LD_ADDR_VAR 0 6
9376: PUSH
9377: LD_STRING #Behemoths
9379: ST_TO_ADDR
9380: GO 9383
9382: POP
// list := [ ] ;
9383: LD_ADDR_VAR 0 7
9387: PUSH
9388: EMPTY
9389: ST_TO_ADDR
// for j := 1 to 8 do
9390: LD_ADDR_VAR 0 3
9394: PUSH
9395: DOUBLE
9396: LD_INT 1
9398: DEC
9399: ST_TO_ADDR
9400: LD_INT 8
9402: PUSH
9403: FOR_TO
9404: IFFALSE 9497
// if Side_Positions [ j ] then
9406: LD_EXP 21
9410: PUSH
9411: LD_VAR 0 3
9415: ARRAY
9416: IFFALSE 9495
// begin amount := 0 ;
9418: LD_ADDR_VAR 0 5
9422: PUSH
9423: LD_INT 0
9425: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
9426: LD_ADDR_VAR 0 4
9430: PUSH
9431: LD_LOC 23
9435: PUSH
9436: LD_VAR 0 2
9440: ARRAY
9441: PUSH
9442: FOR_IN
9443: IFFALSE 9491
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
9445: LD_ADDR_VAR 0 5
9449: PUSH
9450: LD_VAR 0 5
9454: PUSH
9455: LD_INT 22
9457: PUSH
9458: LD_VAR 0 3
9462: PUSH
9463: EMPTY
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 30
9469: PUSH
9470: LD_VAR 0 4
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PPUSH
9483: CALL_OW 69
9487: PLUS
9488: ST_TO_ADDR
9489: GO 9442
9491: POP
9492: POP
// break ;
9493: GO 9497
// end ;
9495: GO 9403
9497: POP
9498: POP
// list := [ ] ;
9499: LD_ADDR_VAR 0 7
9503: PUSH
9504: EMPTY
9505: ST_TO_ADDR
// for j := 1 to 8 do
9506: LD_ADDR_VAR 0 3
9510: PUSH
9511: DOUBLE
9512: LD_INT 1
9514: DEC
9515: ST_TO_ADDR
9516: LD_INT 8
9518: PUSH
9519: FOR_TO
9520: IFFALSE 9540
// list := list ^ amount ;
9522: LD_ADDR_VAR 0 7
9526: PUSH
9527: LD_VAR 0 7
9531: PUSH
9532: LD_VAR 0 5
9536: ADD
9537: ST_TO_ADDR
9538: GO 9519
9540: POP
9541: POP
// Already_Built := Already_Built ^ [ list ] ;
9542: LD_ADDR_LOC 29
9546: PUSH
9547: LD_LOC 29
9551: PUSH
9552: LD_VAR 0 7
9556: PUSH
9557: EMPTY
9558: LIST
9559: ADD
9560: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
9561: LD_ADDR_LOC 30
9565: PUSH
9566: LD_LOC 30
9570: PUSH
9571: LD_VAR 0 6
9575: PUSH
9576: LD_VAR 0 5
9580: PUSH
9581: LD_LOC 24
9585: PUSH
9586: LD_VAR 0 2
9590: ARRAY
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: ADD
9597: ST_TO_ADDR
// end ;
9598: GO 9289
9600: POP
9601: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9602: LD_ADDR_LOC 31
9606: PUSH
9607: LD_INT 0
9609: PUSH
9610: LD_INT 0
9612: PUSH
9613: LD_INT 0
9615: PUSH
9616: LD_INT 0
9618: PUSH
9619: LD_INT 0
9621: PUSH
9622: LD_INT 0
9624: PUSH
9625: LD_INT 0
9627: PUSH
9628: LD_INT 0
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: ST_TO_ADDR
// if Limits_Info then
9641: LD_LOC 30
9645: IFFALSE 9661
// Limits_Info := #Limits ^ Limits_Info ;
9647: LD_ADDR_LOC 30
9651: PUSH
9652: LD_STRING #Limits
9654: PUSH
9655: LD_LOC 30
9659: ADD
9660: ST_TO_ADDR
// end ;
9661: LD_VAR 0 1
9665: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
9666: LD_INT 0
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
// for i := 1 to Restricted_Builds do
9672: LD_ADDR_VAR 0 7
9676: PUSH
9677: DOUBLE
9678: LD_INT 1
9680: DEC
9681: ST_TO_ADDR
9682: LD_LOC 23
9686: PUSH
9687: FOR_TO
9688: IFFALSE 10111
// if BType in Restricted_Builds [ i ] then
9690: LD_VAR 0 2
9694: PUSH
9695: LD_LOC 23
9699: PUSH
9700: LD_VAR 0 7
9704: ARRAY
9705: IN
9706: IFFALSE 10109
// begin if old_side then
9708: LD_VAR 0 4
9712: IFFALSE 9838
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
9714: LD_LOC 29
9718: PUSH
9719: LD_VAR 0 7
9723: ARRAY
9724: PUSH
9725: LD_VAR 0 3
9729: ARRAY
9730: PUSH
9731: LD_VAR 0 5
9735: PLUS
9736: PUSH
9737: LD_LOC 24
9741: PUSH
9742: LD_VAR 0 7
9746: ARRAY
9747: GREATER
9748: IFFALSE 9774
// begin SetSide ( un , old_side ) ;
9750: LD_VAR 0 1
9754: PPUSH
9755: LD_VAR 0 4
9759: PPUSH
9760: CALL_OW 235
// count := 0 ;
9764: LD_ADDR_VAR 0 5
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// end else
9772: GO 9838
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
9774: LD_ADDR_LOC 29
9778: PUSH
9779: LD_LOC 29
9783: PPUSH
9784: LD_VAR 0 7
9788: PPUSH
9789: LD_LOC 29
9793: PUSH
9794: LD_VAR 0 7
9798: ARRAY
9799: PPUSH
9800: LD_VAR 0 4
9804: PPUSH
9805: LD_LOC 29
9809: PUSH
9810: LD_VAR 0 7
9814: ARRAY
9815: PUSH
9816: LD_VAR 0 4
9820: ARRAY
9821: PUSH
9822: LD_VAR 0 5
9826: MINUS
9827: PPUSH
9828: CALL_OW 1
9832: PPUSH
9833: CALL_OW 1
9837: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
9838: LD_ADDR_LOC 29
9842: PUSH
9843: LD_LOC 29
9847: PPUSH
9848: LD_VAR 0 7
9852: PPUSH
9853: LD_LOC 29
9857: PUSH
9858: LD_VAR 0 7
9862: ARRAY
9863: PPUSH
9864: LD_VAR 0 3
9868: PPUSH
9869: LD_LOC 29
9873: PUSH
9874: LD_VAR 0 7
9878: ARRAY
9879: PUSH
9880: LD_VAR 0 3
9884: ARRAY
9885: PUSH
9886: LD_VAR 0 5
9890: PLUS
9891: PPUSH
9892: CALL_OW 1
9896: PPUSH
9897: CALL_OW 1
9901: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
9902: LD_VAR 0 5
9906: PUSH
9907: LD_INT 0
9909: NONEQUAL
9910: PUSH
9911: LD_VAR 0 3
9915: PUSH
9916: LD_OWVAR 2
9920: EQUAL
9921: AND
9922: IFFALSE 9965
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
9924: LD_ADDR_LOC 30
9928: PUSH
9929: LD_LOC 30
9933: PPUSH
9934: LD_INT 3
9936: PUSH
9937: LD_VAR 0 7
9941: MUL
9942: PPUSH
9943: LD_LOC 29
9947: PUSH
9948: LD_VAR 0 7
9952: ARRAY
9953: PUSH
9954: LD_VAR 0 3
9958: ARRAY
9959: PPUSH
9960: CALL_OW 1
9964: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
9965: LD_LOC 29
9969: PUSH
9970: LD_VAR 0 7
9974: ARRAY
9975: PUSH
9976: LD_VAR 0 3
9980: ARRAY
9981: PUSH
9982: LD_LOC 24
9986: PUSH
9987: LD_VAR 0 7
9991: ARRAY
9992: GREATER
9993: IFFALSE 10020
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
9995: LD_ADDR_LOC 31
9999: PUSH
10000: LD_LOC 31
10004: PPUSH
10005: LD_VAR 0 3
10009: PPUSH
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 1
10017: ST_TO_ADDR
// end else
10018: GO 10107
// begin for j := 1 to Restricted_Builds do
10020: LD_ADDR_VAR 0 8
10024: PUSH
10025: DOUBLE
10026: LD_INT 1
10028: DEC
10029: ST_TO_ADDR
10030: LD_LOC 23
10034: PUSH
10035: FOR_TO
10036: IFFALSE 10080
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10038: LD_LOC 29
10042: PUSH
10043: LD_VAR 0 8
10047: ARRAY
10048: PUSH
10049: LD_VAR 0 3
10053: ARRAY
10054: PUSH
10055: LD_LOC 24
10059: PUSH
10060: LD_VAR 0 8
10064: ARRAY
10065: GREATER
10066: IFFALSE 10078
// begin Is_Cheater := true ;
10068: LD_ADDR_VAR 0 9
10072: PUSH
10073: LD_INT 1
10075: ST_TO_ADDR
// break ;
10076: GO 10080
// end ;
10078: GO 10035
10080: POP
10081: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10082: LD_ADDR_LOC 31
10086: PUSH
10087: LD_LOC 31
10091: PPUSH
10092: LD_VAR 0 3
10096: PPUSH
10097: LD_VAR 0 9
10101: PPUSH
10102: CALL_OW 1
10106: ST_TO_ADDR
// end ; break ;
10107: GO 10111
// end ;
10109: GO 9687
10111: POP
10112: POP
// end ;
10113: LD_VAR 0 6
10117: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10118: LD_VAR 0 5
10122: PUSH
10123: LD_LOC 25
10127: IN
10128: PUSH
10129: LD_VAR 0 2
10133: PUSH
10134: LD_LOC 26
10138: IN
10139: OR
10140: PUSH
10141: LD_VAR 0 4
10145: PUSH
10146: LD_LOC 27
10150: IN
10151: OR
10152: PUSH
10153: LD_VAR 0 3
10157: PUSH
10158: LD_LOC 28
10162: IN
10163: OR
10164: IFFALSE 10175
// ComCancel ( factory ) ;
10166: LD_VAR 0 1
10170: PPUSH
10171: CALL_OW 127
// end ;
10175: PPOPN 5
10177: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10178: LD_VAR 0 2
10182: PUSH
10183: LD_LOC 25
10187: IN
10188: IFFALSE 10199
// ComCancel ( building ) ;
10190: LD_VAR 0 1
10194: PPUSH
10195: CALL_OW 127
// end ; end_of_file
10199: PPOPN 2
10201: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
10202: LD_INT 0
10204: PPUSH
10205: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10206: LD_ADDR_VAR 0 2
10210: PUSH
10211: LD_STRING #Multi1x1-Time
10213: PUSH
10214: LD_OWVAR 1
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: ST_TO_ADDR
// if WaitServerStrings then
10223: LD_EXP 52
10227: IFFALSE 10245
// AllStrings = AllStrings ^ WaitServerStrings ;
10229: LD_ADDR_VAR 0 2
10233: PUSH
10234: LD_VAR 0 2
10238: PUSH
10239: LD_EXP 52
10243: ADD
10244: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10245: LD_INT 0
10247: PUSH
10248: LD_EXP 16
10252: PUSH
10253: LD_OWVAR 1
10257: MINUS
10258: LESSEQUAL
10259: IFFALSE 10290
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10261: LD_ADDR_VAR 0 2
10265: PUSH
10266: LD_VAR 0 2
10270: PUSH
10271: LD_STRING #allowedsibbomb
10273: PUSH
10274: LD_EXP 16
10278: PUSH
10279: LD_OWVAR 1
10283: MINUS
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: ADD
10289: ST_TO_ADDR
// if ( ExtraStrings ) then
10290: LD_EXP 51
10294: IFFALSE 10316
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10296: LD_ADDR_VAR 0 2
10300: PUSH
10301: LD_VAR 0 2
10305: PUSH
10306: LD_STRING 
10308: ADD
10309: PUSH
10310: LD_EXP 51
10314: ADD
10315: ST_TO_ADDR
// if ( Display_kings ) and not isSGUI then
10316: LD_EXP 53
10320: PUSH
10321: LD_OWVAR 83
10325: NOT
10326: AND
10327: IFFALSE 10345
// AllStrings = AllStrings ^ Display_kings ;
10329: LD_ADDR_VAR 0 2
10333: PUSH
10334: LD_VAR 0 2
10338: PUSH
10339: LD_EXP 53
10343: ADD
10344: ST_TO_ADDR
// if ( LimitsStrings ) then
10345: CALL 7042 0 0
10349: IFFALSE 10371
// AllStrings := AllStrings ^  ^ LimitsStrings ;
10351: LD_ADDR_VAR 0 2
10355: PUSH
10356: LD_VAR 0 2
10360: PUSH
10361: LD_STRING 
10363: ADD
10364: PUSH
10365: CALL 7042 0 0
10369: ADD
10370: ST_TO_ADDR
// Display_Strings := AllStrings ;
10371: LD_ADDR_OWVAR 47
10375: PUSH
10376: LD_VAR 0 2
10380: ST_TO_ADDR
// end ;
10381: LD_VAR 0 1
10385: RET
// every 0 0$1 do
10386: GO 10388
10388: DISABLE
// begin ShowTimer ;
10389: CALL 10202 0 0
// enable ;
10393: ENABLE
// end ; end_of_file
10394: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
10395: LD_INT 0
10397: PPUSH
10398: PPUSH
10399: PPUSH
// sharedPoints1 = [ ] ;
10400: LD_ADDR_LOC 32
10404: PUSH
10405: EMPTY
10406: ST_TO_ADDR
// sharedPoints2 = [ ] ;
10407: LD_ADDR_LOC 33
10411: PUSH
10412: EMPTY
10413: ST_TO_ADDR
// sharedPoints3 = [ ] ;
10414: LD_ADDR_LOC 34
10418: PUSH
10419: EMPTY
10420: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
10421: LD_ADDR_VAR 0 2
10425: PUSH
10426: DOUBLE
10427: LD_INT 1
10429: DEC
10430: ST_TO_ADDR
10431: LD_EXP 21
10435: PUSH
10436: LD_INT 0
10438: PLUS
10439: PUSH
10440: FOR_TO
10441: IFFALSE 10543
// begin if not Side_Positions [ i ] = 0 then
10443: LD_EXP 21
10447: PUSH
10448: LD_VAR 0 2
10452: ARRAY
10453: PUSH
10454: LD_INT 0
10456: EQUAL
10457: NOT
10458: IFFALSE 10472
// SetMultiScore ( i , 0 ) ;
10460: LD_VAR 0 2
10464: PPUSH
10465: LD_INT 0
10467: PPUSH
10468: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
10472: LD_ADDR_LOC 32
10476: PUSH
10477: LD_LOC 32
10481: PPUSH
10482: LD_VAR 0 2
10486: PPUSH
10487: LD_INT 0
10489: PPUSH
10490: CALL_OW 1
10494: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
10495: LD_ADDR_LOC 33
10499: PUSH
10500: LD_LOC 33
10504: PPUSH
10505: LD_VAR 0 2
10509: PPUSH
10510: LD_INT 0
10512: PPUSH
10513: CALL_OW 1
10517: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
10518: LD_ADDR_LOC 34
10522: PUSH
10523: LD_LOC 34
10527: PPUSH
10528: LD_VAR 0 2
10532: PPUSH
10533: LD_INT 0
10535: PPUSH
10536: CALL_OW 1
10540: ST_TO_ADDR
// end ;
10541: GO 10440
10543: POP
10544: POP
// pointGame = true ;
10545: LD_ADDR_LOC 35
10549: PUSH
10550: LD_INT 1
10552: ST_TO_ADDR
// end ;
10553: LD_VAR 0 1
10557: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
10558: LD_LOC 35
10562: IFFALSE 10973
10564: GO 10566
10566: DISABLE
10567: LD_INT 0
10569: PPUSH
10570: PPUSH
10571: PPUSH
10572: PPUSH
10573: PPUSH
10574: PPUSH
10575: PPUSH
10576: PPUSH
10577: PPUSH
10578: PPUSH
10579: PPUSH
10580: PPUSH
10581: PPUSH
// begin if isSGUI then
10582: LD_OWVAR 83
10586: IFFALSE 10973
// begin if Teams [ 1 ] then
10588: LD_EXP 19
10592: PUSH
10593: LD_INT 1
10595: ARRAY
10596: IFFALSE 10608
// red = true else
10598: LD_ADDR_VAR 0 2
10602: PUSH
10603: LD_INT 1
10605: ST_TO_ADDR
10606: GO 10616
// red = false ;
10608: LD_ADDR_VAR 0 2
10612: PUSH
10613: LD_INT 0
10615: ST_TO_ADDR
// if Teams [ 2 ] then
10616: LD_EXP 19
10620: PUSH
10621: LD_INT 2
10623: ARRAY
10624: IFFALSE 10636
// blue = true else
10626: LD_ADDR_VAR 0 3
10630: PUSH
10631: LD_INT 1
10633: ST_TO_ADDR
10634: GO 10644
// blue = false ;
10636: LD_ADDR_VAR 0 3
10640: PUSH
10641: LD_INT 0
10643: ST_TO_ADDR
// if Teams [ 3 ] then
10644: LD_EXP 19
10648: PUSH
10649: LD_INT 3
10651: ARRAY
10652: IFFALSE 10664
// yel = true else
10654: LD_ADDR_VAR 0 4
10658: PUSH
10659: LD_INT 1
10661: ST_TO_ADDR
10662: GO 10672
// yel = false ;
10664: LD_ADDR_VAR 0 4
10668: PUSH
10669: LD_INT 0
10671: ST_TO_ADDR
// if Teams [ 4 ] then
10672: LD_EXP 19
10676: PUSH
10677: LD_INT 4
10679: ARRAY
10680: IFFALSE 10692
// green = true else
10682: LD_ADDR_VAR 0 5
10686: PUSH
10687: LD_INT 1
10689: ST_TO_ADDR
10690: GO 10700
// green = false ;
10692: LD_ADDR_VAR 0 5
10696: PUSH
10697: LD_INT 0
10699: ST_TO_ADDR
// if def_public_score then
10700: LD_EXP 1
10704: IFFALSE 10716
// p = true else
10706: LD_ADDR_VAR 0 12
10710: PUSH
10711: LD_INT 1
10713: ST_TO_ADDR
10714: GO 10724
// p = false ;
10716: LD_ADDR_VAR 0 12
10720: PUSH
10721: LD_INT 0
10723: ST_TO_ADDR
// if team_game then
10724: LD_EXP 23
10728: IFFALSE 10809
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
10730: LD_ADDR_VAR 0 13
10734: PUSH
10735: LD_INT 3
10737: PUSH
10738: LD_INT 1
10740: PUSH
10741: LD_INT 2
10743: PUSH
10744: LD_INT 7
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: LD_EXP 32
10757: ARRAY
10758: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
10759: LD_ADDR_VAR 0 10
10763: PUSH
10764: LD_STRING {
10766: PUSH
10767: LD_VAR 0 3
10771: STR
10772: PUSH
10773: LD_STRING ,
10775: STR
10776: PUSH
10777: LD_VAR 0 4
10781: STR
10782: PUSH
10783: LD_STRING ,
10785: STR
10786: PUSH
10787: LD_VAR 0 2
10791: STR
10792: PUSH
10793: LD_STRING ,0,0,0,
10795: STR
10796: PUSH
10797: LD_VAR 0 5
10801: STR
10802: PUSH
10803: LD_STRING ,0}
10805: STR
10806: ST_TO_ADDR
// end else
10807: GO 10909
// begin you = your_side ;
10809: LD_ADDR_VAR 0 13
10813: PUSH
10814: LD_OWVAR 2
10818: ST_TO_ADDR
// s = { ;
10819: LD_ADDR_VAR 0 10
10823: PUSH
10824: LD_STRING {
10826: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
10827: LD_ADDR_VAR 0 1
10831: PUSH
10832: DOUBLE
10833: LD_INT 1
10835: DEC
10836: ST_TO_ADDR
10837: LD_EXP 21
10841: PUSH
10842: LD_INT 0
10844: PLUS
10845: PUSH
10846: FOR_TO
10847: IFFALSE 10893
// if side_positions [ i ] then
10849: LD_EXP 21
10853: PUSH
10854: LD_VAR 0 1
10858: ARRAY
10859: IFFALSE 10877
// s = s & 1, else
10861: LD_ADDR_VAR 0 10
10865: PUSH
10866: LD_VAR 0 10
10870: PUSH
10871: LD_STRING 1,
10873: STR
10874: ST_TO_ADDR
10875: GO 10891
// s = s & 0, ;
10877: LD_ADDR_VAR 0 10
10881: PUSH
10882: LD_VAR 0 10
10886: PUSH
10887: LD_STRING 0,
10889: STR
10890: ST_TO_ADDR
10891: GO 10846
10893: POP
10894: POP
// s = s & } ;
10895: LD_ADDR_VAR 0 10
10899: PUSH
10900: LD_VAR 0 10
10904: PUSH
10905: LD_STRING }
10907: STR
10908: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
10909: LD_STRING initScore(
10911: PUSH
10912: LD_VAR 0 10
10916: STR
10917: PUSH
10918: LD_STRING ,
10920: STR
10921: PUSH
10922: LD_VAR 0 12
10926: STR
10927: PUSH
10928: LD_STRING ,
10930: STR
10931: PUSH
10932: LD_VAR 0 13
10936: STR
10937: PUSH
10938: LD_STRING  );
10940: STR
10941: PPUSH
10942: CALL_OW 559
// if game_type = 3 then
10946: LD_EXP 34
10950: PUSH
10951: LD_INT 3
10953: EQUAL
10954: IFFALSE 10973
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
10956: LD_STRING AddScorePoints(2,2,
10958: PUSH
10959: LD_EXP 30
10963: STR
10964: PUSH
10965: LD_STRING  );
10967: STR
10968: PPUSH
10969: CALL_OW 559
// end ; end ;
10973: PPOPN 13
10975: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
10976: LD_INT 0
10978: PPUSH
10979: PPUSH
// case typ of 1 :
10980: LD_VAR 0 3
10984: PUSH
10985: LD_INT 1
10987: DOUBLE
10988: EQUAL
10989: IFTRUE 10993
10991: GO 11021
10993: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
10994: LD_ADDR_LOC 32
10998: PUSH
10999: LD_LOC 32
11003: PPUSH
11004: LD_VAR 0 1
11008: PPUSH
11009: LD_VAR 0 2
11013: PPUSH
11014: CALL_OW 1
11018: ST_TO_ADDR
11019: GO 11094
11021: LD_INT 2
11023: DOUBLE
11024: EQUAL
11025: IFTRUE 11029
11027: GO 11057
11029: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
11030: LD_ADDR_LOC 33
11034: PUSH
11035: LD_LOC 33
11039: PPUSH
11040: LD_VAR 0 1
11044: PPUSH
11045: LD_VAR 0 2
11049: PPUSH
11050: CALL_OW 1
11054: ST_TO_ADDR
11055: GO 11094
11057: LD_INT 3
11059: DOUBLE
11060: EQUAL
11061: IFTRUE 11065
11063: GO 11093
11065: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
11066: LD_ADDR_LOC 34
11070: PUSH
11071: LD_LOC 34
11075: PPUSH
11076: LD_VAR 0 1
11080: PPUSH
11081: LD_VAR 0 2
11085: PPUSH
11086: CALL_OW 1
11090: ST_TO_ADDR
11091: GO 11094
11093: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
11094: LD_ADDR_VAR 0 5
11098: PUSH
11099: LD_LOC 32
11103: PUSH
11104: LD_VAR 0 1
11108: ARRAY
11109: PUSH
11110: LD_LOC 33
11114: PUSH
11115: LD_VAR 0 1
11119: ARRAY
11120: PLUS
11121: PUSH
11122: LD_LOC 34
11126: PUSH
11127: LD_VAR 0 1
11131: ARRAY
11132: PLUS
11133: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
11134: LD_VAR 0 1
11138: PPUSH
11139: LD_VAR 0 5
11143: PPUSH
11144: CALL_OW 506
// end ; end_of_file
11148: LD_VAR 0 4
11152: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11153: LD_INT 0
11155: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11156: LD_VAR 0 1
11160: PPUSH
11161: CALL_OW 255
11165: PUSH
11166: LD_VAR 0 4
11170: EQUAL
11171: IFFALSE 11190
// begin SetAchievement ( ACH_RAD ) ;
11173: LD_STRING ACH_RAD
11175: PPUSH
11176: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11180: LD_STRING ACH_NL
11182: PPUSH
11183: LD_INT 1
11185: PPUSH
11186: CALL_OW 564
// end end ;
11190: LD_VAR 0 5
11194: RET
// export function SA_Win ( side ) ; begin
11195: LD_INT 0
11197: PPUSH
// case side of 1 :
11198: LD_VAR 0 1
11202: PUSH
11203: LD_INT 1
11205: DOUBLE
11206: EQUAL
11207: IFTRUE 11211
11209: GO 11224
11211: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11212: LD_STRING ACH_AH
11214: PPUSH
11215: LD_INT 1
11217: PPUSH
11218: CALL_OW 564
11222: GO 11387
11224: LD_INT 2
11226: DOUBLE
11227: EQUAL
11228: IFTRUE 11232
11230: GO 11245
11232: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11233: LD_STRING ACH_E
11235: PPUSH
11236: LD_INT 1
11238: PPUSH
11239: CALL_OW 564
11243: GO 11387
11245: LD_INT 3
11247: DOUBLE
11248: EQUAL
11249: IFTRUE 11253
11251: GO 11266
11253: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11254: LD_STRING ACH_OOL
11256: PPUSH
11257: LD_INT 1
11259: PPUSH
11260: CALL_OW 564
11264: GO 11387
11266: LD_INT 1
11268: PUSH
11269: LD_INT 2
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: DOUBLE
11276: EQUAL
11277: IFTRUE 11281
11279: GO 11306
11281: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11282: LD_STRING ACH_AH
11284: PPUSH
11285: LD_REAL  5.00000000000000E-0001
11288: PPUSH
11289: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11293: LD_STRING ACH_E
11295: PPUSH
11296: LD_REAL  5.00000000000000E-0001
11299: PPUSH
11300: CALL_OW 564
// end ; [ 2 , 3 ] :
11304: GO 11387
11306: LD_INT 2
11308: PUSH
11309: LD_INT 3
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: DOUBLE
11316: EQUAL
11317: IFTRUE 11321
11319: GO 11346
11321: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11322: LD_STRING ACH_OOL
11324: PPUSH
11325: LD_REAL  5.00000000000000E-0001
11328: PPUSH
11329: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11333: LD_STRING ACH_E
11335: PPUSH
11336: LD_REAL  5.00000000000000E-0001
11339: PPUSH
11340: CALL_OW 564
// end ; [ 3 , 1 ] :
11344: GO 11387
11346: LD_INT 3
11348: PUSH
11349: LD_INT 1
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: DOUBLE
11356: EQUAL
11357: IFTRUE 11361
11359: GO 11386
11361: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11362: LD_STRING ACH_AH
11364: PPUSH
11365: LD_REAL  5.00000000000000E-0001
11368: PPUSH
11369: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
11373: LD_STRING ACH_OOL
11375: PPUSH
11376: LD_REAL  5.00000000000000E-0001
11379: PPUSH
11380: CALL_OW 564
// end ; end ;
11384: GO 11387
11386: POP
// end ; end_of_file
11387: LD_VAR 0 2
11391: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
11392: LD_INT 0
11394: PPUSH
11395: PPUSH
// enable ( 98 ) ;
11396: LD_INT 98
11398: ENABLE_MARKED
// GameEnded = false ;
11399: LD_ADDR_LOC 37
11403: PUSH
11404: LD_INT 0
11406: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11407: LD_ADDR_LOC 36
11411: PUSH
11412: LD_INT 0
11414: PUSH
11415: LD_INT 0
11417: PUSH
11418: LD_INT 0
11420: PUSH
11421: LD_INT 0
11423: PUSH
11424: LD_INT 0
11426: PUSH
11427: LD_INT 0
11429: PUSH
11430: LD_INT 0
11432: PUSH
11433: LD_INT 0
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: ST_TO_ADDR
// unfoged = false ;
11446: LD_ADDR_LOC 38
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// for i = 1 to side_positions do
11454: LD_ADDR_VAR 0 2
11458: PUSH
11459: DOUBLE
11460: LD_INT 1
11462: DEC
11463: ST_TO_ADDR
11464: LD_EXP 21
11468: PUSH
11469: FOR_TO
11470: IFFALSE 11510
// if not side_positions [ i ] then
11472: LD_EXP 21
11476: PUSH
11477: LD_VAR 0 2
11481: ARRAY
11482: NOT
11483: IFFALSE 11508
// defaited = replace ( defaited , i , true ) ;
11485: LD_ADDR_LOC 36
11489: PUSH
11490: LD_LOC 36
11494: PPUSH
11495: LD_VAR 0 2
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 1
11507: ST_TO_ADDR
11508: GO 11469
11510: POP
11511: POP
// end ;
11512: LD_VAR 0 1
11516: RET
// function CanWinLoose ; begin
11517: LD_INT 0
11519: PPUSH
// Result := true ;
11520: LD_ADDR_VAR 0 1
11524: PUSH
11525: LD_INT 1
11527: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
11528: CALL_OW 518
11532: PUSH
11533: CALL_OW 519
11537: PUSH
11538: LD_INT 0
11540: GREATER
11541: AND
11542: IFFALSE 11552
// Result := false ;
11544: LD_ADDR_VAR 0 1
11548: PUSH
11549: LD_INT 0
11551: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11552: CALL_OW 531
11556: PUSH
11557: CALL_OW 519
11561: PUSH
11562: LD_INT 1
11564: GREATER
11565: AND
11566: IFFALSE 11576
// Result := false ;
11568: LD_ADDR_VAR 0 1
11572: PUSH
11573: LD_INT 0
11575: ST_TO_ADDR
// end ;
11576: LD_VAR 0 1
11580: RET
// export function HasPower ( i ) ; var k , h ; begin
11581: LD_INT 0
11583: PPUSH
11584: PPUSH
11585: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
11586: LD_VAR 0 1
11590: PPUSH
11591: CALL_OW 108
11595: NOT
11596: PUSH
11597: LD_EXP 20
11601: PUSH
11602: LD_VAR 0 1
11606: ARRAY
11607: NOT
11608: AND
11609: PUSH
11610: LD_OWVAR 4
11614: AND
11615: IFFALSE 11627
// begin result = false ;
11617: LD_ADDR_VAR 0 2
11621: PUSH
11622: LD_INT 0
11624: ST_TO_ADDR
// end else
11625: GO 11922
// case def_win_rules of 0 :
11627: LD_EXP 17
11631: PUSH
11632: LD_INT 0
11634: DOUBLE
11635: EQUAL
11636: IFTRUE 11640
11638: GO 11803
11640: POP
// if def_people_respawning then
11641: LD_EXP 46
11645: IFFALSE 11736
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
11647: LD_ADDR_VAR 0 2
11651: PUSH
11652: LD_INT 22
11654: PUSH
11655: LD_VAR 0 1
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: LD_INT 2
11666: PUSH
11667: LD_INT 21
11669: PUSH
11670: LD_INT 1
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 33
11679: PUSH
11680: LD_INT 3
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 33
11689: PUSH
11690: LD_INT 5
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: LD_INT 30
11699: PUSH
11700: LD_INT 0
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 30
11709: PUSH
11710: LD_INT 1
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PPUSH
11729: CALL_OW 69
11733: ST_TO_ADDR
11734: GO 11801
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
11736: LD_ADDR_VAR 0 2
11740: PUSH
11741: LD_INT 22
11743: PUSH
11744: LD_VAR 0 1
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 2
11755: PUSH
11756: LD_INT 21
11758: PUSH
11759: LD_INT 1
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 33
11768: PUSH
11769: LD_INT 3
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: PUSH
11776: LD_INT 33
11778: PUSH
11779: LD_INT 5
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PPUSH
11796: CALL_OW 69
11800: ST_TO_ADDR
11801: GO 11922
11803: LD_INT 1
11805: DOUBLE
11806: EQUAL
11807: IFTRUE 11811
11809: GO 11850
11811: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
11812: LD_ADDR_VAR 0 2
11816: PUSH
11817: LD_INT 22
11819: PUSH
11820: LD_VAR 0 1
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: LD_INT 21
11831: PUSH
11832: LD_INT 1
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PPUSH
11843: CALL_OW 69
11847: ST_TO_ADDR
11848: GO 11922
11850: LD_INT 2
11852: DOUBLE
11853: EQUAL
11854: IFTRUE 11858
11856: GO 11921
11858: POP
// begin h = false ;
11859: LD_ADDR_VAR 0 4
11863: PUSH
11864: LD_INT 0
11866: ST_TO_ADDR
// for k in heroes [ i ] do
11867: LD_ADDR_VAR 0 3
11871: PUSH
11872: LD_EXP 33
11876: PUSH
11877: LD_VAR 0 1
11881: ARRAY
11882: PUSH
11883: FOR_IN
11884: IFFALSE 11907
// if IsLive ( k ) then
11886: LD_VAR 0 3
11890: PPUSH
11891: CALL_OW 300
11895: IFFALSE 11905
// h = true ;
11897: LD_ADDR_VAR 0 4
11901: PUSH
11902: LD_INT 1
11904: ST_TO_ADDR
11905: GO 11883
11907: POP
11908: POP
// Result := h ;
11909: LD_ADDR_VAR 0 2
11913: PUSH
11914: LD_VAR 0 4
11918: ST_TO_ADDR
// end ; end ;
11919: GO 11922
11921: POP
// end ;
11922: LD_VAR 0 2
11926: RET
// function AlliedSides ( i , j ) ; begin
11927: LD_INT 0
11929: PPUSH
// Result := false ;
11930: LD_ADDR_VAR 0 3
11934: PUSH
11935: LD_INT 0
11937: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
11938: LD_VAR 0 1
11942: PPUSH
11943: LD_VAR 0 2
11947: PPUSH
11948: CALL_OW 81
11952: PUSH
11953: LD_INT 1
11955: EQUAL
11956: PUSH
11957: LD_VAR 0 2
11961: PPUSH
11962: LD_VAR 0 1
11966: PPUSH
11967: CALL_OW 81
11971: PUSH
11972: LD_INT 1
11974: EQUAL
11975: AND
11976: PUSH
11977: LD_VAR 0 1
11981: PPUSH
11982: CALL_OW 83
11986: AND
11987: PUSH
11988: LD_VAR 0 2
11992: PPUSH
11993: CALL_OW 83
11997: AND
11998: IFFALSE 12008
// Result := true ;
12000: LD_ADDR_VAR 0 3
12004: PUSH
12005: LD_INT 1
12007: ST_TO_ADDR
// end ;
12008: LD_VAR 0 3
12012: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
12013: CALL 11517 0 0
12017: PUSH
12018: LD_LOC 37
12022: NOT
12023: AND
12024: IFFALSE 12040
12026: GO 12028
12028: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
12029: LD_ADDR_EXP 52
12033: PUSH
12034: LD_STRING #Player-Ended
12036: PUSH
12037: EMPTY
12038: LIST
12039: ST_TO_ADDR
12040: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
12041: CALL 11517 0 0
12045: PUSH
12046: LD_LOC 37
12050: AND
12051: IFFALSE 12060
12053: GO 12055
12055: DISABLE
// YouLostInMultiplayer ;
12056: CALL_OW 107
12060: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
12061: CALL 11517 0 0
12065: NOT
12066: PUSH
12067: CALL_OW 531
12071: NOT
12072: AND
12073: IFFALSE 12089
12075: GO 12077
12077: DISABLE
// WaitServerStrings = [ #server-wait ] ;
12078: LD_ADDR_EXP 52
12082: PUSH
12083: LD_STRING #server-wait
12085: PUSH
12086: EMPTY
12087: LIST
12088: ST_TO_ADDR
12089: END
// every 100 trigger IAmSpec do
12090: CALL_OW 531
12094: IFFALSE 12110
12096: GO 12098
12098: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
12099: LD_ADDR_EXP 52
12103: PUSH
12104: LD_STRING #Player-IAmSpec
12106: PUSH
12107: EMPTY
12108: LIST
12109: ST_TO_ADDR
12110: END
// every 100 trigger GameEnded and IAmSpec do
12111: LD_LOC 37
12115: PUSH
12116: CALL_OW 531
12120: AND
12121: IFFALSE 12130
12123: GO 12125
12125: DISABLE
// YouLostInMultiplayer ;
12126: CALL_OW 107
12130: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
12131: CALL 11517 0 0
12135: PUSH
12136: LD_LOC 37
12140: NOT
12141: AND
12142: IFFALSE 12158
12144: GO 12146
12146: DISABLE
// WaitServerStrings = [ $player-win ] ;
12147: LD_ADDR_EXP 52
12151: PUSH
12152: LD_STRING $player-win
12154: PUSH
12155: EMPTY
12156: LIST
12157: ST_TO_ADDR
12158: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
12159: CALL 11517 0 0
12163: PUSH
12164: LD_LOC 37
12168: AND
12169: IFFALSE 12193
12171: GO 12173
12173: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
12174: LD_EXP 22
12178: PUSH
12179: LD_OWVAR 2
12183: ARRAY
12184: PPUSH
12185: CALL 11195 0 1
// YouWinInMultiplayer ;
12189: CALL_OW 106
// end ;
12193: END
// every 100 trigger isEditor marked 401 do
12194: LD_OWVAR 84
12198: IFFALSE 12214
12200: GO 12202
12202: DISABLE
// Debug_Strings = [ You won ] ;
12203: LD_ADDR_OWVAR 48
12207: PUSH
12208: LD_STRING You won
12210: PUSH
12211: EMPTY
12212: LIST
12213: ST_TO_ADDR
12214: END
// every 100 trigger isEditor marked 400 do
12215: LD_OWVAR 84
12219: IFFALSE 12235
12221: GO 12223
12223: DISABLE
// Debug_Strings = [ You loss ] ;
12224: LD_ADDR_OWVAR 48
12228: PUSH
12229: LD_STRING You loss
12231: PUSH
12232: EMPTY
12233: LIST
12234: ST_TO_ADDR
12235: END
// every 100 marked 98 do var i , un ;
12236: GO 12238
12238: DISABLE
12239: LD_INT 0
12241: PPUSH
12242: PPUSH
// begin for i = 1 to side_positions do
12243: LD_ADDR_VAR 0 1
12247: PUSH
12248: DOUBLE
12249: LD_INT 1
12251: DEC
12252: ST_TO_ADDR
12253: LD_EXP 21
12257: PUSH
12258: FOR_TO
12259: IFFALSE 12382
// if side_positions [ i ] then
12261: LD_EXP 21
12265: PUSH
12266: LD_VAR 0 1
12270: ARRAY
12271: IFFALSE 12380
// if not HasPower ( i ) and not Defaited [ i ] then
12273: LD_VAR 0 1
12277: PPUSH
12278: CALL 11581 0 1
12282: NOT
12283: PUSH
12284: LD_LOC 36
12288: PUSH
12289: LD_VAR 0 1
12293: ARRAY
12294: NOT
12295: AND
12296: IFFALSE 12380
// begin un = filterallunits ( [ f_side , i ] ) ;
12298: LD_ADDR_VAR 0 2
12302: PUSH
12303: LD_INT 22
12305: PUSH
12306: LD_VAR 0 1
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PPUSH
12315: CALL_OW 69
12319: ST_TO_ADDR
// if un then
12320: LD_VAR 0 2
12324: IFFALSE 12338
// SetSide ( un , 0 ) ;
12326: LD_VAR 0 2
12330: PPUSH
12331: LD_INT 0
12333: PPUSH
12334: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
12338: LD_ADDR_LOC 36
12342: PUSH
12343: LD_LOC 36
12347: PPUSH
12348: LD_VAR 0 1
12352: PPUSH
12353: LD_INT 1
12355: PPUSH
12356: CALL_OW 1
12360: ST_TO_ADDR
// if i = your_side then
12361: LD_VAR 0 1
12365: PUSH
12366: LD_OWVAR 2
12370: EQUAL
12371: IFFALSE 12380
// begin Multiplayer_Loose_Message ;
12373: CALL_OW 521
// enable ( 400 ) ;
12377: LD_INT 400
12379: ENABLE_MARKED
// end ; end ;
12380: GO 12258
12382: POP
12383: POP
// if not Unfoged and defaited [ your_side ] then
12384: LD_LOC 38
12388: NOT
12389: PUSH
12390: LD_LOC 36
12394: PUSH
12395: LD_OWVAR 2
12399: ARRAY
12400: AND
12401: IFFALSE 12407
// Unfog ;
12403: CALL 12593 0 0
// DidGameEnd ;
12407: CALL 12422 0 0
// if not GameEnded then
12411: LD_LOC 37
12415: NOT
12416: IFFALSE 12419
// enable ;
12418: ENABLE
// end ;
12419: PPOPN 2
12421: END
// function DidGameEnd ; var i , k , enemy ; begin
12422: LD_INT 0
12424: PPUSH
12425: PPUSH
12426: PPUSH
12427: PPUSH
// enemy = [ ] ;
12428: LD_ADDR_VAR 0 4
12432: PUSH
12433: EMPTY
12434: ST_TO_ADDR
// for i = 1 to side_positions do
12435: LD_ADDR_VAR 0 2
12439: PUSH
12440: DOUBLE
12441: LD_INT 1
12443: DEC
12444: ST_TO_ADDR
12445: LD_EXP 21
12449: PUSH
12450: FOR_TO
12451: IFFALSE 12555
// if not defaited [ i ] then
12453: LD_LOC 36
12457: PUSH
12458: LD_VAR 0 2
12462: ARRAY
12463: NOT
12464: IFFALSE 12553
// for k = 1 to side_positions do
12466: LD_ADDR_VAR 0 3
12470: PUSH
12471: DOUBLE
12472: LD_INT 1
12474: DEC
12475: ST_TO_ADDR
12476: LD_EXP 21
12480: PUSH
12481: FOR_TO
12482: IFFALSE 12551
// if not defaited [ k ] then
12484: LD_LOC 36
12488: PUSH
12489: LD_VAR 0 3
12493: ARRAY
12494: NOT
12495: IFFALSE 12549
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
12497: LD_VAR 0 2
12501: PPUSH
12502: LD_VAR 0 3
12506: PPUSH
12507: CALL_OW 81
12511: PUSH
12512: LD_INT 2
12514: PUSH
12515: LD_INT 0
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: IN
12522: IFFALSE 12549
// enemy = enemy ^ [ i , k ] ;
12524: LD_ADDR_VAR 0 4
12528: PUSH
12529: LD_VAR 0 4
12533: PUSH
12534: LD_VAR 0 2
12538: PUSH
12539: LD_VAR 0 3
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: ADD
12548: ST_TO_ADDR
12549: GO 12481
12551: POP
12552: POP
12553: GO 12450
12555: POP
12556: POP
// if not enemy then
12557: LD_VAR 0 4
12561: NOT
12562: IFFALSE 12588
// begin GameEnded = true ;
12564: LD_ADDR_LOC 37
12568: PUSH
12569: LD_INT 1
12571: ST_TO_ADDR
// if not defaited [ your_side ] then
12572: LD_LOC 36
12576: PUSH
12577: LD_OWVAR 2
12581: ARRAY
12582: NOT
12583: IFFALSE 12588
// enable ( 401 ) ;
12585: LD_INT 401
12587: ENABLE_MARKED
// end ; end ;
12588: LD_VAR 0 1
12592: RET
// function unfog ; var k , friends ; begin
12593: LD_INT 0
12595: PPUSH
12596: PPUSH
12597: PPUSH
// for k = 1 to side_positions do
12598: LD_ADDR_VAR 0 2
12602: PUSH
12603: DOUBLE
12604: LD_INT 1
12606: DEC
12607: ST_TO_ADDR
12608: LD_EXP 21
12612: PUSH
12613: FOR_TO
12614: IFFALSE 12670
// if not defaited [ k ] then
12616: LD_LOC 36
12620: PUSH
12621: LD_VAR 0 2
12625: ARRAY
12626: NOT
12627: IFFALSE 12668
// if GetAttitude ( your_side , k ) in [ att_friend ] then
12629: LD_OWVAR 2
12633: PPUSH
12634: LD_VAR 0 2
12638: PPUSH
12639: CALL_OW 81
12643: PUSH
12644: LD_INT 1
12646: PUSH
12647: EMPTY
12648: LIST
12649: IN
12650: IFFALSE 12668
// friends = friends ^ k ;
12652: LD_ADDR_VAR 0 3
12656: PUSH
12657: LD_VAR 0 3
12661: PUSH
12662: LD_VAR 0 2
12666: ADD
12667: ST_TO_ADDR
12668: GO 12613
12670: POP
12671: POP
// if not friends then
12672: LD_VAR 0 3
12676: NOT
12677: IFFALSE 12694
// begin fogoff ( true ) ;
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 344
// unfoged = true ;
12686: LD_ADDR_LOC 38
12690: PUSH
12691: LD_INT 1
12693: ST_TO_ADDR
// end ; end ;
12694: LD_VAR 0 1
12698: RET
// export function MakeGameEnd ; begin
12699: LD_INT 0
12701: PPUSH
// fogoff ( true ) ;
12702: LD_INT 1
12704: PPUSH
12705: CALL_OW 344
// unfoged = true ;
12709: LD_ADDR_LOC 38
12713: PUSH
12714: LD_INT 1
12716: ST_TO_ADDR
// wait ( 0 0$5 ) ;
12717: LD_INT 175
12719: PPUSH
12720: CALL_OW 67
// GameEnded = true ;
12724: LD_ADDR_LOC 37
12728: PUSH
12729: LD_INT 1
12731: ST_TO_ADDR
// end ;
12732: LD_VAR 0 1
12736: RET
// export function GetGameEnded ; begin
12737: LD_INT 0
12739: PPUSH
// result = GameEnded ;
12740: LD_ADDR_VAR 0 1
12744: PUSH
12745: LD_LOC 37
12749: ST_TO_ADDR
// end ; end_of_file
12750: LD_VAR 0 1
12754: RET
// var win ; export function init_kings_counting ; var i ; begin
12755: LD_INT 0
12757: PPUSH
12758: PPUSH
// mp_with_score := true ;
12759: LD_ADDR_OWVAR 14
12763: PUSH
12764: LD_INT 1
12766: ST_TO_ADDR
// ResetMultiScore ;
12767: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
12771: LD_EXP 29
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: CALL_OW 424
// enable ( 2 ) ;
12783: LD_INT 2
12785: ENABLE_MARKED
// end ;
12786: LD_VAR 0 1
12790: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
12791: LD_INT 0
12793: PPUSH
12794: PPUSH
12795: PPUSH
12796: PPUSH
12797: PPUSH
12798: PPUSH
12799: PPUSH
12800: PPUSH
12801: PPUSH
// vypis := [ ] ;
12802: LD_ADDR_VAR 0 3
12806: PUSH
12807: EMPTY
12808: ST_TO_ADDR
// red = 0 ;
12809: LD_ADDR_VAR 0 5
12813: PUSH
12814: LD_INT 0
12816: ST_TO_ADDR
// blue = 0 ;
12817: LD_ADDR_VAR 0 6
12821: PUSH
12822: LD_INT 0
12824: ST_TO_ADDR
// yel = 0 ;
12825: LD_ADDR_VAR 0 7
12829: PUSH
12830: LD_INT 0
12832: ST_TO_ADDR
// green = 0 ;
12833: LD_ADDR_VAR 0 8
12837: PUSH
12838: LD_INT 0
12840: ST_TO_ADDR
// if def_public_score or isSGUI then
12841: LD_EXP 1
12845: PUSH
12846: LD_OWVAR 83
12850: OR
12851: IFFALSE 13466
// if not Team_Game then
12853: LD_EXP 23
12857: NOT
12858: IFFALSE 12990
// begin for side = 1 to Side_Positions do
12860: LD_ADDR_VAR 0 2
12864: PUSH
12865: DOUBLE
12866: LD_INT 1
12868: DEC
12869: ST_TO_ADDR
12870: LD_EXP 21
12874: PUSH
12875: FOR_TO
12876: IFFALSE 12986
// if Side_Positions [ side ] then
12878: LD_EXP 21
12882: PUSH
12883: LD_VAR 0 2
12887: ARRAY
12888: IFFALSE 12984
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
12890: LD_ADDR_VAR 0 3
12894: PUSH
12895: LD_VAR 0 3
12899: PUSH
12900: LD_STRING #KingoftheHill-Public
12902: PUSH
12903: LD_VAR 0 2
12907: PUSH
12908: LD_VAR 0 2
12912: PUSH
12913: LD_VAR 0 2
12917: PUSH
12918: LD_INT 10
12920: PLUS
12921: PPUSH
12922: CALL_OW 110
12926: PUSH
12927: LD_INT 3
12929: DIV
12930: PUSH
12931: LD_EXP 30
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: ADD
12943: ST_TO_ADDR
// ToLua ( updateScorePoints(2, & side & , & ( GetTag ( side + 10 ) div 3 ) & ); ) ;
12944: LD_STRING updateScorePoints(2,
12946: PUSH
12947: LD_VAR 0 2
12951: STR
12952: PUSH
12953: LD_STRING ,
12955: STR
12956: PUSH
12957: LD_VAR 0 2
12961: PUSH
12962: LD_INT 10
12964: PLUS
12965: PPUSH
12966: CALL_OW 110
12970: PUSH
12971: LD_INT 3
12973: DIV
12974: STR
12975: PUSH
12976: LD_STRING );
12978: STR
12979: PPUSH
12980: CALL_OW 559
// end ;
12984: GO 12875
12986: POP
12987: POP
// end else
12988: GO 13464
// begin if Teams [ 1 ] then
12990: LD_EXP 19
12994: PUSH
12995: LD_INT 1
12997: ARRAY
12998: IFFALSE 13050
// for i in Teams [ 1 ] do
13000: LD_ADDR_VAR 0 4
13004: PUSH
13005: LD_EXP 19
13009: PUSH
13010: LD_INT 1
13012: ARRAY
13013: PUSH
13014: FOR_IN
13015: IFFALSE 13048
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
13017: LD_ADDR_VAR 0 5
13021: PUSH
13022: LD_VAR 0 5
13026: PUSH
13027: LD_VAR 0 4
13031: PUSH
13032: LD_INT 10
13034: PLUS
13035: PPUSH
13036: CALL_OW 110
13040: PUSH
13041: LD_INT 3
13043: DIV
13044: PLUS
13045: ST_TO_ADDR
13046: GO 13014
13048: POP
13049: POP
// if Teams [ 2 ] then
13050: LD_EXP 19
13054: PUSH
13055: LD_INT 2
13057: ARRAY
13058: IFFALSE 13110
// for i in Teams [ 2 ] do
13060: LD_ADDR_VAR 0 4
13064: PUSH
13065: LD_EXP 19
13069: PUSH
13070: LD_INT 2
13072: ARRAY
13073: PUSH
13074: FOR_IN
13075: IFFALSE 13108
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
13077: LD_ADDR_VAR 0 6
13081: PUSH
13082: LD_VAR 0 6
13086: PUSH
13087: LD_VAR 0 4
13091: PUSH
13092: LD_INT 10
13094: PLUS
13095: PPUSH
13096: CALL_OW 110
13100: PUSH
13101: LD_INT 3
13103: DIV
13104: PLUS
13105: ST_TO_ADDR
13106: GO 13074
13108: POP
13109: POP
// if Teams [ 3 ] then
13110: LD_EXP 19
13114: PUSH
13115: LD_INT 3
13117: ARRAY
13118: IFFALSE 13170
// for i in Teams [ 3 ] do
13120: LD_ADDR_VAR 0 4
13124: PUSH
13125: LD_EXP 19
13129: PUSH
13130: LD_INT 3
13132: ARRAY
13133: PUSH
13134: FOR_IN
13135: IFFALSE 13168
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
13137: LD_ADDR_VAR 0 7
13141: PUSH
13142: LD_VAR 0 7
13146: PUSH
13147: LD_VAR 0 4
13151: PUSH
13152: LD_INT 10
13154: PLUS
13155: PPUSH
13156: CALL_OW 110
13160: PUSH
13161: LD_INT 3
13163: DIV
13164: PLUS
13165: ST_TO_ADDR
13166: GO 13134
13168: POP
13169: POP
// if Teams [ 4 ] then
13170: LD_EXP 19
13174: PUSH
13175: LD_INT 4
13177: ARRAY
13178: IFFALSE 13230
// for i in Teams [ 4 ] do
13180: LD_ADDR_VAR 0 4
13184: PUSH
13185: LD_EXP 19
13189: PUSH
13190: LD_INT 4
13192: ARRAY
13193: PUSH
13194: FOR_IN
13195: IFFALSE 13228
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
13197: LD_ADDR_VAR 0 8
13201: PUSH
13202: LD_VAR 0 8
13206: PUSH
13207: LD_VAR 0 4
13211: PUSH
13212: LD_INT 10
13214: PLUS
13215: PPUSH
13216: CALL_OW 110
13220: PUSH
13221: LD_INT 3
13223: DIV
13224: PLUS
13225: ST_TO_ADDR
13226: GO 13194
13228: POP
13229: POP
// if Teams [ 1 ] then
13230: LD_EXP 19
13234: PUSH
13235: LD_INT 1
13237: ARRAY
13238: IFFALSE 13267
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
13240: LD_ADDR_VAR 0 3
13244: PUSH
13245: LD_STRING #KingoftheHill-Public-red
13247: PUSH
13248: LD_INT 3
13250: PUSH
13251: LD_VAR 0 5
13255: PUSH
13256: LD_EXP 30
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: ST_TO_ADDR
// if Teams [ 2 ] then
13267: LD_EXP 19
13271: PUSH
13272: LD_INT 2
13274: ARRAY
13275: IFFALSE 13310
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
13277: LD_ADDR_VAR 0 3
13281: PUSH
13282: LD_VAR 0 3
13286: PUSH
13287: LD_STRING #KingoftheHill-Public-blue
13289: PUSH
13290: LD_INT 1
13292: PUSH
13293: LD_VAR 0 6
13297: PUSH
13298: LD_EXP 30
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: ADD
13309: ST_TO_ADDR
// if Teams [ 3 ] then
13310: LD_EXP 19
13314: PUSH
13315: LD_INT 3
13317: ARRAY
13318: IFFALSE 13353
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
13320: LD_ADDR_VAR 0 3
13324: PUSH
13325: LD_VAR 0 3
13329: PUSH
13330: LD_STRING #KingoftheHill-Public-yell
13332: PUSH
13333: LD_INT 2
13335: PUSH
13336: LD_VAR 0 7
13340: PUSH
13341: LD_EXP 30
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: ADD
13352: ST_TO_ADDR
// if Teams [ 4 ] then
13353: LD_EXP 19
13357: PUSH
13358: LD_INT 4
13360: ARRAY
13361: IFFALSE 13396
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
13363: LD_ADDR_VAR 0 3
13367: PUSH
13368: LD_VAR 0 3
13372: PUSH
13373: LD_STRING #KingoftheHill-Public-green
13375: PUSH
13376: LD_INT 7
13378: PUSH
13379: LD_VAR 0 8
13383: PUSH
13384: LD_EXP 30
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: ADD
13395: ST_TO_ADDR
// ToLua ( updateScorePoints(2,3, & red & ); ) ;
13396: LD_STRING updateScorePoints(2,3,
13398: PUSH
13399: LD_VAR 0 5
13403: STR
13404: PUSH
13405: LD_STRING );
13407: STR
13408: PPUSH
13409: CALL_OW 559
// ToLua ( updateScorePoints(2,1, & blue & ); ) ;
13413: LD_STRING updateScorePoints(2,1,
13415: PUSH
13416: LD_VAR 0 6
13420: STR
13421: PUSH
13422: LD_STRING );
13424: STR
13425: PPUSH
13426: CALL_OW 559
// ToLua ( updateScorePoints(2,2, & yel & ); ) ;
13430: LD_STRING updateScorePoints(2,2,
13432: PUSH
13433: LD_VAR 0 7
13437: STR
13438: PUSH
13439: LD_STRING );
13441: STR
13442: PPUSH
13443: CALL_OW 559
// ToLua ( updateScorePoints(2,7, & green & ); ) ;
13447: LD_STRING updateScorePoints(2,7,
13449: PUSH
13450: LD_VAR 0 8
13454: STR
13455: PUSH
13456: LD_STRING );
13458: STR
13459: PPUSH
13460: CALL_OW 559
// end else
13464: GO 13901
// if not Team_Game then
13466: LD_EXP 23
13470: NOT
13471: IFFALSE 13529
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
13473: LD_ADDR_VAR 0 3
13477: PUSH
13478: LD_VAR 0 3
13482: PUSH
13483: LD_STRING #KingoftheHill-Private
13485: PUSH
13486: LD_OWVAR 2
13490: PUSH
13491: LD_OWVAR 2
13495: PUSH
13496: LD_VAR 0 2
13500: PUSH
13501: LD_INT 10
13503: PLUS
13504: PPUSH
13505: CALL_OW 110
13509: PUSH
13510: LD_INT 3
13512: DIV
13513: PUSH
13514: LD_EXP 30
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: ADD
13526: ST_TO_ADDR
13527: GO 13901
// begin for i in Teams [ 1 ] do
13529: LD_ADDR_VAR 0 4
13533: PUSH
13534: LD_EXP 19
13538: PUSH
13539: LD_INT 1
13541: ARRAY
13542: PUSH
13543: FOR_IN
13544: IFFALSE 13577
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
13546: LD_ADDR_VAR 0 5
13550: PUSH
13551: LD_VAR 0 5
13555: PUSH
13556: LD_VAR 0 4
13560: PUSH
13561: LD_INT 10
13563: PLUS
13564: PPUSH
13565: CALL_OW 110
13569: PUSH
13570: LD_INT 3
13572: DIV
13573: PLUS
13574: ST_TO_ADDR
13575: GO 13543
13577: POP
13578: POP
// for i in Teams [ 2 ] do
13579: LD_ADDR_VAR 0 4
13583: PUSH
13584: LD_EXP 19
13588: PUSH
13589: LD_INT 2
13591: ARRAY
13592: PUSH
13593: FOR_IN
13594: IFFALSE 13627
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
13596: LD_ADDR_VAR 0 6
13600: PUSH
13601: LD_VAR 0 6
13605: PUSH
13606: LD_VAR 0 4
13610: PUSH
13611: LD_INT 10
13613: PLUS
13614: PPUSH
13615: CALL_OW 110
13619: PUSH
13620: LD_INT 3
13622: DIV
13623: PLUS
13624: ST_TO_ADDR
13625: GO 13593
13627: POP
13628: POP
// for i in Teams [ 3 ] do
13629: LD_ADDR_VAR 0 4
13633: PUSH
13634: LD_EXP 19
13638: PUSH
13639: LD_INT 3
13641: ARRAY
13642: PUSH
13643: FOR_IN
13644: IFFALSE 13677
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
13646: LD_ADDR_VAR 0 7
13650: PUSH
13651: LD_VAR 0 7
13655: PUSH
13656: LD_VAR 0 4
13660: PUSH
13661: LD_INT 10
13663: PLUS
13664: PPUSH
13665: CALL_OW 110
13669: PUSH
13670: LD_INT 3
13672: DIV
13673: PLUS
13674: ST_TO_ADDR
13675: GO 13643
13677: POP
13678: POP
// for i in Teams [ 4 ] do
13679: LD_ADDR_VAR 0 4
13683: PUSH
13684: LD_EXP 19
13688: PUSH
13689: LD_INT 4
13691: ARRAY
13692: PUSH
13693: FOR_IN
13694: IFFALSE 13727
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
13696: LD_ADDR_VAR 0 8
13700: PUSH
13701: LD_VAR 0 8
13705: PUSH
13706: LD_VAR 0 4
13710: PUSH
13711: LD_INT 10
13713: PLUS
13714: PPUSH
13715: CALL_OW 110
13719: PUSH
13720: LD_INT 3
13722: DIV
13723: PLUS
13724: ST_TO_ADDR
13725: GO 13693
13727: POP
13728: POP
// if your_side in Teams [ 1 ] then
13729: LD_OWVAR 2
13733: PUSH
13734: LD_EXP 19
13738: PUSH
13739: LD_INT 1
13741: ARRAY
13742: IN
13743: IFFALSE 13772
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
13745: LD_ADDR_VAR 0 3
13749: PUSH
13750: LD_STRING #KingoftheHill-Public-red
13752: PUSH
13753: LD_INT 3
13755: PUSH
13756: LD_VAR 0 5
13760: PUSH
13761: LD_EXP 30
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
13772: LD_OWVAR 2
13776: PUSH
13777: LD_EXP 19
13781: PUSH
13782: LD_INT 2
13784: ARRAY
13785: IN
13786: IFFALSE 13815
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
13788: LD_ADDR_VAR 0 3
13792: PUSH
13793: LD_STRING #KingoftheHill-Public-blue
13795: PUSH
13796: LD_INT 1
13798: PUSH
13799: LD_VAR 0 6
13803: PUSH
13804: LD_EXP 30
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
13815: LD_OWVAR 2
13819: PUSH
13820: LD_EXP 19
13824: PUSH
13825: LD_INT 3
13827: ARRAY
13828: IN
13829: IFFALSE 13858
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
13831: LD_ADDR_VAR 0 3
13835: PUSH
13836: LD_STRING #KingoftheHill-Public-yell
13838: PUSH
13839: LD_INT 2
13841: PUSH
13842: LD_VAR 0 7
13846: PUSH
13847: LD_EXP 30
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
13858: LD_OWVAR 2
13862: PUSH
13863: LD_EXP 19
13867: PUSH
13868: LD_INT 4
13870: ARRAY
13871: IN
13872: IFFALSE 13901
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
13874: LD_ADDR_VAR 0 3
13878: PUSH
13879: LD_STRING #KingoftheHill-Public-green
13881: PUSH
13882: LD_INT 7
13884: PUSH
13885: LD_VAR 0 8
13889: PUSH
13890: LD_EXP 30
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: ST_TO_ADDR
// end ; Display_kings := vypis ;
13901: LD_ADDR_EXP 53
13905: PUSH
13906: LD_VAR 0 3
13910: ST_TO_ADDR
// end ;
13911: LD_VAR 0 1
13915: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
13916: LD_INT 0
13918: PPUSH
13919: PPUSH
13920: PPUSH
13921: PPUSH
13922: PPUSH
13923: PPUSH
13924: PPUSH
13925: PPUSH
13926: PPUSH
// side := [ ] ;
13927: LD_ADDR_VAR 0 2
13931: PUSH
13932: EMPTY
13933: ST_TO_ADDR
// red = 0 ;
13934: LD_ADDR_VAR 0 5
13938: PUSH
13939: LD_INT 0
13941: ST_TO_ADDR
// blue = 0 ;
13942: LD_ADDR_VAR 0 6
13946: PUSH
13947: LD_INT 0
13949: ST_TO_ADDR
// yel = 0 ;
13950: LD_ADDR_VAR 0 7
13954: PUSH
13955: LD_INT 0
13957: ST_TO_ADDR
// green = 0 ;
13958: LD_ADDR_VAR 0 8
13962: PUSH
13963: LD_INT 0
13965: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
13966: LD_ADDR_VAR 0 3
13970: PUSH
13971: LD_EXP 29
13975: PPUSH
13976: LD_INT 21
13978: PUSH
13979: LD_INT 3
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: LD_INT 53
13988: PUSH
13989: EMPTY
13990: LIST
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PPUSH
13996: CALL_OW 70
14000: ST_TO_ADDR
// for un in list do
14001: LD_ADDR_VAR 0 4
14005: PUSH
14006: LD_VAR 0 3
14010: PUSH
14011: FOR_IN
14012: IFFALSE 14037
// side := side union GetSide ( un ) ;
14014: LD_ADDR_VAR 0 2
14018: PUSH
14019: LD_VAR 0 2
14023: PUSH
14024: LD_VAR 0 4
14028: PPUSH
14029: CALL_OW 255
14033: UNION
14034: ST_TO_ADDR
14035: GO 14011
14037: POP
14038: POP
// if side <> 1 then
14039: LD_VAR 0 2
14043: PUSH
14044: LD_INT 1
14046: NONEQUAL
14047: IFFALSE 14051
// exit ;
14049: GO 14414
// side := side [ 1 ] ;
14051: LD_ADDR_VAR 0 2
14055: PUSH
14056: LD_VAR 0 2
14060: PUSH
14061: LD_INT 1
14063: ARRAY
14064: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
14065: LD_VAR 0 2
14069: PUSH
14070: LD_INT 10
14072: PLUS
14073: PPUSH
14074: LD_VAR 0 2
14078: PUSH
14079: LD_INT 10
14081: PLUS
14082: PPUSH
14083: CALL_OW 110
14087: PUSH
14088: LD_INT 1
14090: PLUS
14091: PPUSH
14092: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
14096: LD_VAR 0 2
14100: PPUSH
14101: LD_VAR 0 2
14105: PUSH
14106: LD_INT 10
14108: PLUS
14109: PPUSH
14110: CALL_OW 110
14114: PUSH
14115: LD_INT 3
14117: DIV
14118: PPUSH
14119: LD_INT 2
14121: PPUSH
14122: CALL 10976 0 3
// if not Team_Game then
14126: LD_EXP 23
14130: NOT
14131: IFFALSE 14414
// if GetTag ( side + 10 ) >= final_count * 3 then
14133: LD_VAR 0 2
14137: PUSH
14138: LD_INT 10
14140: PLUS
14141: PPUSH
14142: CALL_OW 110
14146: PUSH
14147: LD_EXP 30
14151: PUSH
14152: LD_INT 3
14154: MUL
14155: GREATEREQUAL
14156: IFFALSE 14163
// enable ( 3 ) else
14158: LD_INT 3
14160: ENABLE_MARKED
14161: GO 14414
// begin for i in Teams [ 1 ] do
14163: LD_ADDR_VAR 0 9
14167: PUSH
14168: LD_EXP 19
14172: PUSH
14173: LD_INT 1
14175: ARRAY
14176: PUSH
14177: FOR_IN
14178: IFFALSE 14211
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14180: LD_ADDR_VAR 0 5
14184: PUSH
14185: LD_VAR 0 5
14189: PUSH
14190: LD_VAR 0 9
14194: PUSH
14195: LD_INT 10
14197: PLUS
14198: PPUSH
14199: CALL_OW 110
14203: PUSH
14204: LD_INT 3
14206: DIV
14207: PLUS
14208: ST_TO_ADDR
14209: GO 14177
14211: POP
14212: POP
// for i in Teams [ 2 ] do
14213: LD_ADDR_VAR 0 9
14217: PUSH
14218: LD_EXP 19
14222: PUSH
14223: LD_INT 2
14225: ARRAY
14226: PUSH
14227: FOR_IN
14228: IFFALSE 14261
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14230: LD_ADDR_VAR 0 6
14234: PUSH
14235: LD_VAR 0 6
14239: PUSH
14240: LD_VAR 0 9
14244: PUSH
14245: LD_INT 10
14247: PLUS
14248: PPUSH
14249: CALL_OW 110
14253: PUSH
14254: LD_INT 3
14256: DIV
14257: PLUS
14258: ST_TO_ADDR
14259: GO 14227
14261: POP
14262: POP
// for i in Teams [ 3 ] do
14263: LD_ADDR_VAR 0 9
14267: PUSH
14268: LD_EXP 19
14272: PUSH
14273: LD_INT 3
14275: ARRAY
14276: PUSH
14277: FOR_IN
14278: IFFALSE 14311
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14280: LD_ADDR_VAR 0 7
14284: PUSH
14285: LD_VAR 0 7
14289: PUSH
14290: LD_VAR 0 9
14294: PUSH
14295: LD_INT 10
14297: PLUS
14298: PPUSH
14299: CALL_OW 110
14303: PUSH
14304: LD_INT 3
14306: DIV
14307: PLUS
14308: ST_TO_ADDR
14309: GO 14277
14311: POP
14312: POP
// for i in Teams [ 4 ] do
14313: LD_ADDR_VAR 0 9
14317: PUSH
14318: LD_EXP 19
14322: PUSH
14323: LD_INT 4
14325: ARRAY
14326: PUSH
14327: FOR_IN
14328: IFFALSE 14361
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14330: LD_ADDR_VAR 0 8
14334: PUSH
14335: LD_VAR 0 8
14339: PUSH
14340: LD_VAR 0 9
14344: PUSH
14345: LD_INT 10
14347: PLUS
14348: PPUSH
14349: CALL_OW 110
14353: PUSH
14354: LD_INT 3
14356: DIV
14357: PLUS
14358: ST_TO_ADDR
14359: GO 14327
14361: POP
14362: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
14363: LD_VAR 0 5
14367: PUSH
14368: LD_EXP 30
14372: GREATEREQUAL
14373: PUSH
14374: LD_VAR 0 6
14378: PUSH
14379: LD_EXP 30
14383: GREATEREQUAL
14384: OR
14385: PUSH
14386: LD_VAR 0 7
14390: PUSH
14391: LD_EXP 30
14395: GREATEREQUAL
14396: OR
14397: PUSH
14398: LD_VAR 0 8
14402: PUSH
14403: LD_EXP 30
14407: GREATEREQUAL
14408: OR
14409: IFFALSE 14414
// enable ( 3 ) ;
14411: LD_INT 3
14413: ENABLE_MARKED
// end ; end ;
14414: LD_VAR 0 1
14418: RET
// every 0 0$1 marked 2 do
14419: GO 14421
14421: DISABLE
// begin count_king ;
14422: CALL 13916 0 0
// show_public_points ;
14426: CALL 12791 0 0
// enable ;
14430: ENABLE
// end ;
14431: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
14432: GO 14434
14434: DISABLE
14435: LD_INT 0
14437: PPUSH
14438: PPUSH
14439: PPUSH
14440: PPUSH
14441: PPUSH
14442: PPUSH
// begin win := [ ] ;
14443: LD_ADDR_LOC 39
14447: PUSH
14448: EMPTY
14449: ST_TO_ADDR
// red = 0 ;
14450: LD_ADDR_VAR 0 2
14454: PUSH
14455: LD_INT 0
14457: ST_TO_ADDR
// blue = 0 ;
14458: LD_ADDR_VAR 0 3
14462: PUSH
14463: LD_INT 0
14465: ST_TO_ADDR
// yel = 0 ;
14466: LD_ADDR_VAR 0 4
14470: PUSH
14471: LD_INT 0
14473: ST_TO_ADDR
// green = 0 ;
14474: LD_ADDR_VAR 0 5
14478: PUSH
14479: LD_INT 0
14481: ST_TO_ADDR
// if not Team_Game then
14482: LD_EXP 23
14486: NOT
14487: IFFALSE 14564
// begin for side = 1 to 8 do
14489: LD_ADDR_VAR 0 1
14493: PUSH
14494: DOUBLE
14495: LD_INT 1
14497: DEC
14498: ST_TO_ADDR
14499: LD_INT 8
14501: PUSH
14502: FOR_TO
14503: IFFALSE 14548
// if GetTag ( side + 10 ) >= final_count * 3 then
14505: LD_VAR 0 1
14509: PUSH
14510: LD_INT 10
14512: PLUS
14513: PPUSH
14514: CALL_OW 110
14518: PUSH
14519: LD_EXP 30
14523: PUSH
14524: LD_INT 3
14526: MUL
14527: GREATEREQUAL
14528: IFFALSE 14546
// win := win ^ side ;
14530: LD_ADDR_LOC 39
14534: PUSH
14535: LD_LOC 39
14539: PUSH
14540: LD_VAR 0 1
14544: ADD
14545: ST_TO_ADDR
14546: GO 14502
14548: POP
14549: POP
// if win then
14550: LD_LOC 39
14554: IFFALSE 14561
// enable ( 4 ) else
14556: LD_INT 4
14558: ENABLE_MARKED
14559: GO 14562
// enable ;
14561: ENABLE
// end else
14562: GO 14880
// begin for i in Teams [ 1 ] do
14564: LD_ADDR_VAR 0 6
14568: PUSH
14569: LD_EXP 19
14573: PUSH
14574: LD_INT 1
14576: ARRAY
14577: PUSH
14578: FOR_IN
14579: IFFALSE 14612
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: LD_VAR 0 2
14590: PUSH
14591: LD_VAR 0 6
14595: PUSH
14596: LD_INT 10
14598: PLUS
14599: PPUSH
14600: CALL_OW 110
14604: PUSH
14605: LD_INT 3
14607: DIV
14608: PLUS
14609: ST_TO_ADDR
14610: GO 14578
14612: POP
14613: POP
// for i in Teams [ 2 ] do
14614: LD_ADDR_VAR 0 6
14618: PUSH
14619: LD_EXP 19
14623: PUSH
14624: LD_INT 2
14626: ARRAY
14627: PUSH
14628: FOR_IN
14629: IFFALSE 14662
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14631: LD_ADDR_VAR 0 3
14635: PUSH
14636: LD_VAR 0 3
14640: PUSH
14641: LD_VAR 0 6
14645: PUSH
14646: LD_INT 10
14648: PLUS
14649: PPUSH
14650: CALL_OW 110
14654: PUSH
14655: LD_INT 3
14657: DIV
14658: PLUS
14659: ST_TO_ADDR
14660: GO 14628
14662: POP
14663: POP
// for i in Teams [ 3 ] do
14664: LD_ADDR_VAR 0 6
14668: PUSH
14669: LD_EXP 19
14673: PUSH
14674: LD_INT 3
14676: ARRAY
14677: PUSH
14678: FOR_IN
14679: IFFALSE 14712
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14681: LD_ADDR_VAR 0 4
14685: PUSH
14686: LD_VAR 0 4
14690: PUSH
14691: LD_VAR 0 6
14695: PUSH
14696: LD_INT 10
14698: PLUS
14699: PPUSH
14700: CALL_OW 110
14704: PUSH
14705: LD_INT 3
14707: DIV
14708: PLUS
14709: ST_TO_ADDR
14710: GO 14678
14712: POP
14713: POP
// for i in Teams [ 4 ] do
14714: LD_ADDR_VAR 0 6
14718: PUSH
14719: LD_EXP 19
14723: PUSH
14724: LD_INT 4
14726: ARRAY
14727: PUSH
14728: FOR_IN
14729: IFFALSE 14762
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14731: LD_ADDR_VAR 0 5
14735: PUSH
14736: LD_VAR 0 5
14740: PUSH
14741: LD_VAR 0 6
14745: PUSH
14746: LD_INT 10
14748: PLUS
14749: PPUSH
14750: CALL_OW 110
14754: PUSH
14755: LD_INT 3
14757: DIV
14758: PLUS
14759: ST_TO_ADDR
14760: GO 14728
14762: POP
14763: POP
// if red >= final_count then
14764: LD_VAR 0 2
14768: PUSH
14769: LD_EXP 30
14773: GREATEREQUAL
14774: IFFALSE 14790
// win = teams [ 1 ] ;
14776: LD_ADDR_LOC 39
14780: PUSH
14781: LD_EXP 19
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: ST_TO_ADDR
// if blue >= final_count then
14790: LD_VAR 0 3
14794: PUSH
14795: LD_EXP 30
14799: GREATEREQUAL
14800: IFFALSE 14816
// win = teams [ 2 ] ;
14802: LD_ADDR_LOC 39
14806: PUSH
14807: LD_EXP 19
14811: PUSH
14812: LD_INT 2
14814: ARRAY
14815: ST_TO_ADDR
// if yel >= final_count then
14816: LD_VAR 0 4
14820: PUSH
14821: LD_EXP 30
14825: GREATEREQUAL
14826: IFFALSE 14842
// win = teams [ 3 ] ;
14828: LD_ADDR_LOC 39
14832: PUSH
14833: LD_EXP 19
14837: PUSH
14838: LD_INT 3
14840: ARRAY
14841: ST_TO_ADDR
// if green >= final_count then
14842: LD_VAR 0 5
14846: PUSH
14847: LD_EXP 30
14851: GREATEREQUAL
14852: IFFALSE 14868
// win = teams [ 4 ] ;
14854: LD_ADDR_LOC 39
14858: PUSH
14859: LD_EXP 19
14863: PUSH
14864: LD_INT 4
14866: ARRAY
14867: ST_TO_ADDR
// if win then
14868: LD_LOC 39
14872: IFFALSE 14879
// enable ( 4 ) else
14874: LD_INT 4
14876: ENABLE_MARKED
14877: GO 14880
// enable ;
14879: ENABLE
// end ; end ;
14880: PPOPN 6
14882: END
// every 0 0$1 marked 4 do
14883: GO 14885
14885: DISABLE
// begin if Player_Side in win then
14886: LD_EXP 31
14890: PUSH
14891: LD_LOC 39
14895: IN
14896: IFFALSE 14912
// begin wait ( 0 0$2 ) ;
14898: LD_INT 70
14900: PPUSH
14901: CALL_OW 67
// enable ( 401 ) ;
14905: LD_INT 401
14907: ENABLE_MARKED
// exit ;
14908: GO 14928
// end else
14910: GO 14928
// begin wait ( 0 0$2 ) ;
14912: LD_INT 70
14914: PPUSH
14915: CALL_OW 67
// Multiplayer_Loose_Message ;
14919: CALL_OW 521
// enable ( 400 ) ;
14923: LD_INT 400
14925: ENABLE_MARKED
// exit ;
14926: GO 14928
// end ; end ; end_of_file
14928: END
// export function SetMpTechs ( ) ; var side , i ; begin
14929: LD_INT 0
14931: PPUSH
14932: PPUSH
14933: PPUSH
// for side = 1 to 8 do
14934: LD_ADDR_VAR 0 2
14938: PUSH
14939: DOUBLE
14940: LD_INT 1
14942: DEC
14943: ST_TO_ADDR
14944: LD_INT 8
14946: PUSH
14947: FOR_TO
14948: IFFALSE 15069
// begin for i = 1 to 72 do
14950: LD_ADDR_VAR 0 3
14954: PUSH
14955: DOUBLE
14956: LD_INT 1
14958: DEC
14959: ST_TO_ADDR
14960: LD_INT 72
14962: PUSH
14963: FOR_TO
14964: IFFALSE 14995
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
14966: LD_VAR 0 3
14970: PPUSH
14971: LD_VAR 0 2
14975: PPUSH
14976: LD_INT 0
14978: PPUSH
14979: LD_VAR 0 3
14983: PPUSH
14984: CALL_OW 565
14988: PPUSH
14989: CALL_OW 322
14993: GO 14963
14995: POP
14996: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
14997: LD_INT 73
14999: PPUSH
15000: LD_VAR 0 2
15004: PPUSH
15005: LD_INT 0
15007: PPUSH
15008: LD_INT 25
15010: PPUSH
15011: CALL_OW 565
15015: PPUSH
15016: CALL_OW 322
// for i = 0 to 40 do
15020: LD_ADDR_VAR 0 3
15024: PUSH
15025: DOUBLE
15026: LD_INT 0
15028: DEC
15029: ST_TO_ADDR
15030: LD_INT 40
15032: PUSH
15033: FOR_TO
15034: IFFALSE 15065
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15036: LD_VAR 0 3
15040: PPUSH
15041: LD_VAR 0 2
15045: PPUSH
15046: LD_INT 1
15048: PPUSH
15049: LD_VAR 0 3
15053: PPUSH
15054: CALL_OW 565
15058: PPUSH
15059: CALL_OW 324
15063: GO 15033
15065: POP
15066: POP
// end ;
15067: GO 14947
15069: POP
15070: POP
// end ;
15071: LD_VAR 0 1
15075: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15076: LD_INT 0
15078: PPUSH
15079: PPUSH
15080: PPUSH
// for side = 1 to 8 do
15081: LD_ADDR_VAR 0 3
15085: PUSH
15086: DOUBLE
15087: LD_INT 1
15089: DEC
15090: ST_TO_ADDR
15091: LD_INT 8
15093: PUSH
15094: FOR_TO
15095: IFFALSE 19091
// begin for i = 1 to 73 do
15097: LD_ADDR_VAR 0 4
15101: PUSH
15102: DOUBLE
15103: LD_INT 1
15105: DEC
15106: ST_TO_ADDR
15107: LD_INT 73
15109: PUSH
15110: FOR_TO
15111: IFFALSE 15132
// SetTech ( i , side , state_disabled ) ;
15113: LD_VAR 0 4
15117: PPUSH
15118: LD_VAR 0 3
15122: PPUSH
15123: LD_INT 0
15125: PPUSH
15126: CALL_OW 322
15130: GO 15110
15132: POP
15133: POP
// for i = 0 to 40 do
15134: LD_ADDR_VAR 0 4
15138: PUSH
15139: DOUBLE
15140: LD_INT 0
15142: DEC
15143: ST_TO_ADDR
15144: LD_INT 40
15146: PUSH
15147: FOR_TO
15148: IFFALSE 15169
// SetRestrict ( i , side , false ) ;
15150: LD_VAR 0 4
15154: PPUSH
15155: LD_VAR 0 3
15159: PPUSH
15160: LD_INT 0
15162: PPUSH
15163: CALL_OW 324
15167: GO 15147
15169: POP
15170: POP
// case level of 1 :
15171: LD_VAR 0 1
15175: PUSH
15176: LD_INT 1
15178: DOUBLE
15179: EQUAL
15180: IFTRUE 15184
15182: GO 15337
15184: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15185: LD_INT 35
15187: PPUSH
15188: LD_VAR 0 3
15192: PPUSH
15193: LD_INT 1
15195: PPUSH
15196: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15200: LD_INT 45
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: LD_INT 1
15210: PPUSH
15211: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15215: LD_INT 46
15217: PPUSH
15218: LD_VAR 0 3
15222: PPUSH
15223: LD_INT 1
15225: PPUSH
15226: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15230: LD_INT 47
15232: PPUSH
15233: LD_VAR 0 3
15237: PPUSH
15238: LD_INT 1
15240: PPUSH
15241: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15245: LD_INT 0
15247: PPUSH
15248: LD_VAR 0 3
15252: PPUSH
15253: LD_INT 1
15255: PPUSH
15256: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15260: LD_INT 2
15262: PPUSH
15263: LD_VAR 0 3
15267: PPUSH
15268: LD_INT 1
15270: PPUSH
15271: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15275: LD_INT 4
15277: PPUSH
15278: LD_VAR 0 3
15282: PPUSH
15283: LD_INT 1
15285: PPUSH
15286: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15290: LD_INT 6
15292: PPUSH
15293: LD_VAR 0 3
15297: PPUSH
15298: LD_INT 1
15300: PPUSH
15301: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15305: LD_INT 29
15307: PPUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: LD_INT 1
15315: PPUSH
15316: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15320: LD_INT 31
15322: PPUSH
15323: LD_VAR 0 3
15327: PPUSH
15328: LD_INT 1
15330: PPUSH
15331: CALL_OW 324
// end ; 2 :
15335: GO 19089
15337: LD_INT 2
15339: DOUBLE
15340: EQUAL
15341: IFTRUE 15345
15343: GO 15543
15345: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15346: LD_INT 35
15348: PPUSH
15349: LD_VAR 0 3
15353: PPUSH
15354: LD_INT 1
15356: PPUSH
15357: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15361: LD_INT 45
15363: PPUSH
15364: LD_VAR 0 3
15368: PPUSH
15369: LD_INT 1
15371: PPUSH
15372: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15376: LD_INT 46
15378: PPUSH
15379: LD_VAR 0 3
15383: PPUSH
15384: LD_INT 1
15386: PPUSH
15387: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15391: LD_INT 47
15393: PPUSH
15394: LD_VAR 0 3
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15406: LD_INT 1
15408: PPUSH
15409: LD_VAR 0 3
15413: PPUSH
15414: LD_INT 1
15416: PPUSH
15417: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15421: LD_INT 2
15423: PPUSH
15424: LD_VAR 0 3
15428: PPUSH
15429: LD_INT 1
15431: PPUSH
15432: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15436: LD_INT 11
15438: PPUSH
15439: LD_VAR 0 3
15443: PPUSH
15444: LD_INT 1
15446: PPUSH
15447: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15451: LD_INT 0
15453: PPUSH
15454: LD_VAR 0 3
15458: PPUSH
15459: LD_INT 1
15461: PPUSH
15462: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15466: LD_INT 2
15468: PPUSH
15469: LD_VAR 0 3
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15481: LD_INT 4
15483: PPUSH
15484: LD_VAR 0 3
15488: PPUSH
15489: LD_INT 1
15491: PPUSH
15492: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15496: LD_INT 6
15498: PPUSH
15499: LD_VAR 0 3
15503: PPUSH
15504: LD_INT 1
15506: PPUSH
15507: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15511: LD_INT 29
15513: PPUSH
15514: LD_VAR 0 3
15518: PPUSH
15519: LD_INT 1
15521: PPUSH
15522: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15526: LD_INT 31
15528: PPUSH
15529: LD_VAR 0 3
15533: PPUSH
15534: LD_INT 1
15536: PPUSH
15537: CALL_OW 324
// end ; 3 :
15541: GO 19089
15543: LD_INT 3
15545: DOUBLE
15546: EQUAL
15547: IFTRUE 15551
15549: GO 16004
15551: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15552: LD_INT 35
15554: PPUSH
15555: LD_VAR 0 3
15559: PPUSH
15560: LD_INT 1
15562: PPUSH
15563: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15567: LD_INT 45
15569: PPUSH
15570: LD_VAR 0 3
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15582: LD_INT 46
15584: PPUSH
15585: LD_VAR 0 3
15589: PPUSH
15590: LD_INT 1
15592: PPUSH
15593: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15597: LD_INT 47
15599: PPUSH
15600: LD_VAR 0 3
15604: PPUSH
15605: LD_INT 1
15607: PPUSH
15608: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15612: LD_INT 1
15614: PPUSH
15615: LD_VAR 0 3
15619: PPUSH
15620: LD_INT 1
15622: PPUSH
15623: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15627: LD_INT 2
15629: PPUSH
15630: LD_VAR 0 3
15634: PPUSH
15635: LD_INT 1
15637: PPUSH
15638: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15642: LD_INT 11
15644: PPUSH
15645: LD_VAR 0 3
15649: PPUSH
15650: LD_INT 1
15652: PPUSH
15653: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15657: LD_INT 48
15659: PPUSH
15660: LD_VAR 0 3
15664: PPUSH
15665: LD_INT 1
15667: PPUSH
15668: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15672: LD_INT 69
15674: PPUSH
15675: LD_VAR 0 3
15679: PPUSH
15680: LD_INT 1
15682: PPUSH
15683: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15687: LD_INT 39
15689: PPUSH
15690: LD_VAR 0 3
15694: PPUSH
15695: LD_INT 1
15697: PPUSH
15698: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15702: LD_INT 43
15704: PPUSH
15705: LD_VAR 0 3
15709: PPUSH
15710: LD_INT 1
15712: PPUSH
15713: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15717: LD_INT 51
15719: PPUSH
15720: LD_VAR 0 3
15724: PPUSH
15725: LD_INT 1
15727: PPUSH
15728: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15732: LD_INT 6
15734: PPUSH
15735: LD_VAR 0 3
15739: PPUSH
15740: LD_INT 1
15742: PPUSH
15743: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15747: LD_INT 0
15749: PPUSH
15750: LD_VAR 0 3
15754: PPUSH
15755: LD_INT 1
15757: PPUSH
15758: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15762: LD_INT 2
15764: PPUSH
15765: LD_VAR 0 3
15769: PPUSH
15770: LD_INT 1
15772: PPUSH
15773: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15777: LD_INT 3
15779: PPUSH
15780: LD_VAR 0 3
15784: PPUSH
15785: LD_INT 1
15787: PPUSH
15788: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15792: LD_INT 4
15794: PPUSH
15795: LD_VAR 0 3
15799: PPUSH
15800: LD_INT 1
15802: PPUSH
15803: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15807: LD_INT 6
15809: PPUSH
15810: LD_VAR 0 3
15814: PPUSH
15815: LD_INT 1
15817: PPUSH
15818: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15822: LD_INT 7
15824: PPUSH
15825: LD_VAR 0 3
15829: PPUSH
15830: LD_INT 1
15832: PPUSH
15833: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15837: LD_INT 8
15839: PPUSH
15840: LD_VAR 0 3
15844: PPUSH
15845: LD_INT 1
15847: PPUSH
15848: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15852: LD_INT 10
15854: PPUSH
15855: LD_VAR 0 3
15859: PPUSH
15860: LD_INT 1
15862: PPUSH
15863: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15867: LD_INT 15
15869: PPUSH
15870: LD_VAR 0 3
15874: PPUSH
15875: LD_INT 1
15877: PPUSH
15878: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15882: LD_INT 16
15884: PPUSH
15885: LD_VAR 0 3
15889: PPUSH
15890: LD_INT 1
15892: PPUSH
15893: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15897: LD_INT 17
15899: PPUSH
15900: LD_VAR 0 3
15904: PPUSH
15905: LD_INT 1
15907: PPUSH
15908: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15912: LD_INT 20
15914: PPUSH
15915: LD_VAR 0 3
15919: PPUSH
15920: LD_INT 1
15922: PPUSH
15923: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15927: LD_INT 26
15929: PPUSH
15930: LD_VAR 0 3
15934: PPUSH
15935: LD_INT 1
15937: PPUSH
15938: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15942: LD_INT 27
15944: PPUSH
15945: LD_VAR 0 3
15949: PPUSH
15950: LD_INT 1
15952: PPUSH
15953: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15957: LD_INT 29
15959: PPUSH
15960: LD_VAR 0 3
15964: PPUSH
15965: LD_INT 1
15967: PPUSH
15968: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15972: LD_INT 31
15974: PPUSH
15975: LD_VAR 0 3
15979: PPUSH
15980: LD_INT 1
15982: PPUSH
15983: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15987: LD_INT 32
15989: PPUSH
15990: LD_VAR 0 3
15994: PPUSH
15995: LD_INT 1
15997: PPUSH
15998: CALL_OW 324
// end ; 4 :
16002: GO 19089
16004: LD_INT 4
16006: DOUBLE
16007: EQUAL
16008: IFTRUE 16012
16010: GO 16960
16012: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16013: LD_INT 35
16015: PPUSH
16016: LD_VAR 0 3
16020: PPUSH
16021: LD_INT 1
16023: PPUSH
16024: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16028: LD_INT 45
16030: PPUSH
16031: LD_VAR 0 3
16035: PPUSH
16036: LD_INT 1
16038: PPUSH
16039: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16043: LD_INT 46
16045: PPUSH
16046: LD_VAR 0 3
16050: PPUSH
16051: LD_INT 1
16053: PPUSH
16054: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16058: LD_INT 47
16060: PPUSH
16061: LD_VAR 0 3
16065: PPUSH
16066: LD_INT 1
16068: PPUSH
16069: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16073: LD_INT 1
16075: PPUSH
16076: LD_VAR 0 3
16080: PPUSH
16081: LD_INT 1
16083: PPUSH
16084: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16088: LD_INT 2
16090: PPUSH
16091: LD_VAR 0 3
16095: PPUSH
16096: LD_INT 1
16098: PPUSH
16099: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16103: LD_INT 11
16105: PPUSH
16106: LD_VAR 0 3
16110: PPUSH
16111: LD_INT 1
16113: PPUSH
16114: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16118: LD_INT 20
16120: PPUSH
16121: LD_VAR 0 3
16125: PPUSH
16126: LD_INT 1
16128: PPUSH
16129: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16133: LD_INT 48
16135: PPUSH
16136: LD_VAR 0 3
16140: PPUSH
16141: LD_INT 1
16143: PPUSH
16144: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16148: LD_INT 49
16150: PPUSH
16151: LD_VAR 0 3
16155: PPUSH
16156: LD_INT 1
16158: PPUSH
16159: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16163: LD_INT 69
16165: PPUSH
16166: LD_VAR 0 3
16170: PPUSH
16171: LD_INT 1
16173: PPUSH
16174: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16178: LD_INT 39
16180: PPUSH
16181: LD_VAR 0 3
16185: PPUSH
16186: LD_INT 1
16188: PPUSH
16189: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16193: LD_INT 34
16195: PPUSH
16196: LD_VAR 0 3
16200: PPUSH
16201: LD_INT 1
16203: PPUSH
16204: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16208: LD_INT 42
16210: PPUSH
16211: LD_VAR 0 3
16215: PPUSH
16216: LD_INT 1
16218: PPUSH
16219: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16223: LD_INT 44
16225: PPUSH
16226: LD_VAR 0 3
16230: PPUSH
16231: LD_INT 1
16233: PPUSH
16234: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16238: LD_INT 41
16240: PPUSH
16241: LD_VAR 0 3
16245: PPUSH
16246: LD_INT 1
16248: PPUSH
16249: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16253: LD_INT 43
16255: PPUSH
16256: LD_VAR 0 3
16260: PPUSH
16261: LD_INT 1
16263: PPUSH
16264: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16268: LD_INT 70
16270: PPUSH
16271: LD_VAR 0 3
16275: PPUSH
16276: LD_INT 1
16278: PPUSH
16279: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16283: LD_INT 51
16285: PPUSH
16286: LD_VAR 0 3
16290: PPUSH
16291: LD_INT 1
16293: PPUSH
16294: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16298: LD_INT 52
16300: PPUSH
16301: LD_VAR 0 3
16305: PPUSH
16306: LD_INT 1
16308: PPUSH
16309: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16313: LD_INT 6
16315: PPUSH
16316: LD_VAR 0 3
16320: PPUSH
16321: LD_INT 1
16323: PPUSH
16324: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16328: LD_INT 15
16330: PPUSH
16331: LD_VAR 0 3
16335: PPUSH
16336: LD_INT 1
16338: PPUSH
16339: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16343: LD_INT 7
16345: PPUSH
16346: LD_VAR 0 3
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16358: LD_INT 12
16360: PPUSH
16361: LD_VAR 0 3
16365: PPUSH
16366: LD_INT 1
16368: PPUSH
16369: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16373: LD_INT 18
16375: PPUSH
16376: LD_VAR 0 3
16380: PPUSH
16381: LD_INT 1
16383: PPUSH
16384: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16388: LD_INT 60
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: LD_INT 1
16398: PPUSH
16399: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16403: LD_INT 9
16405: PPUSH
16406: LD_VAR 0 3
16410: PPUSH
16411: LD_INT 1
16413: PPUSH
16414: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16418: LD_INT 30
16420: PPUSH
16421: LD_VAR 0 3
16425: PPUSH
16426: LD_INT 1
16428: PPUSH
16429: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16433: LD_INT 37
16435: PPUSH
16436: LD_VAR 0 3
16440: PPUSH
16441: LD_INT 1
16443: PPUSH
16444: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16448: LD_INT 5
16450: PPUSH
16451: LD_VAR 0 3
16455: PPUSH
16456: LD_INT 1
16458: PPUSH
16459: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16463: LD_INT 66
16465: PPUSH
16466: LD_VAR 0 3
16470: PPUSH
16471: LD_INT 1
16473: PPUSH
16474: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16478: LD_INT 21
16480: PPUSH
16481: LD_VAR 0 3
16485: PPUSH
16486: LD_INT 1
16488: PPUSH
16489: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16493: LD_INT 22
16495: PPUSH
16496: LD_VAR 0 3
16500: PPUSH
16501: LD_INT 1
16503: PPUSH
16504: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16508: LD_INT 54
16510: PPUSH
16511: LD_VAR 0 3
16515: PPUSH
16516: LD_INT 1
16518: PPUSH
16519: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16523: LD_INT 0
16525: PPUSH
16526: LD_VAR 0 3
16530: PPUSH
16531: LD_INT 1
16533: PPUSH
16534: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16538: LD_INT 1
16540: PPUSH
16541: LD_VAR 0 3
16545: PPUSH
16546: LD_INT 1
16548: PPUSH
16549: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16553: LD_INT 2
16555: PPUSH
16556: LD_VAR 0 3
16560: PPUSH
16561: LD_INT 1
16563: PPUSH
16564: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16568: LD_INT 3
16570: PPUSH
16571: LD_VAR 0 3
16575: PPUSH
16576: LD_INT 1
16578: PPUSH
16579: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16583: LD_INT 4
16585: PPUSH
16586: LD_VAR 0 3
16590: PPUSH
16591: LD_INT 1
16593: PPUSH
16594: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16598: LD_INT 5
16600: PPUSH
16601: LD_VAR 0 3
16605: PPUSH
16606: LD_INT 1
16608: PPUSH
16609: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16613: LD_INT 6
16615: PPUSH
16616: LD_VAR 0 3
16620: PPUSH
16621: LD_INT 1
16623: PPUSH
16624: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16628: LD_INT 7
16630: PPUSH
16631: LD_VAR 0 3
16635: PPUSH
16636: LD_INT 1
16638: PPUSH
16639: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16643: LD_INT 8
16645: PPUSH
16646: LD_VAR 0 3
16650: PPUSH
16651: LD_INT 1
16653: PPUSH
16654: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16658: LD_INT 10
16660: PPUSH
16661: LD_VAR 0 3
16665: PPUSH
16666: LD_INT 1
16668: PPUSH
16669: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16673: LD_INT 11
16675: PPUSH
16676: LD_VAR 0 3
16680: PPUSH
16681: LD_INT 1
16683: PPUSH
16684: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16688: LD_INT 12
16690: PPUSH
16691: LD_VAR 0 3
16695: PPUSH
16696: LD_INT 1
16698: PPUSH
16699: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16703: LD_INT 13
16705: PPUSH
16706: LD_VAR 0 3
16710: PPUSH
16711: LD_INT 1
16713: PPUSH
16714: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16718: LD_INT 14
16720: PPUSH
16721: LD_VAR 0 3
16725: PPUSH
16726: LD_INT 1
16728: PPUSH
16729: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16733: LD_INT 15
16735: PPUSH
16736: LD_VAR 0 3
16740: PPUSH
16741: LD_INT 1
16743: PPUSH
16744: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16748: LD_INT 16
16750: PPUSH
16751: LD_VAR 0 3
16755: PPUSH
16756: LD_INT 1
16758: PPUSH
16759: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16763: LD_INT 17
16765: PPUSH
16766: LD_VAR 0 3
16770: PPUSH
16771: LD_INT 1
16773: PPUSH
16774: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16778: LD_INT 19
16780: PPUSH
16781: LD_VAR 0 3
16785: PPUSH
16786: LD_INT 1
16788: PPUSH
16789: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16793: LD_INT 20
16795: PPUSH
16796: LD_VAR 0 3
16800: PPUSH
16801: LD_INT 1
16803: PPUSH
16804: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16808: LD_INT 21
16810: PPUSH
16811: LD_VAR 0 3
16815: PPUSH
16816: LD_INT 1
16818: PPUSH
16819: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16823: LD_INT 23
16825: PPUSH
16826: LD_VAR 0 3
16830: PPUSH
16831: LD_INT 1
16833: PPUSH
16834: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16838: LD_INT 26
16840: PPUSH
16841: LD_VAR 0 3
16845: PPUSH
16846: LD_INT 1
16848: PPUSH
16849: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16853: LD_INT 27
16855: PPUSH
16856: LD_VAR 0 3
16860: PPUSH
16861: LD_INT 1
16863: PPUSH
16864: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16868: LD_INT 28
16870: PPUSH
16871: LD_VAR 0 3
16875: PPUSH
16876: LD_INT 1
16878: PPUSH
16879: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16883: LD_INT 29
16885: PPUSH
16886: LD_VAR 0 3
16890: PPUSH
16891: LD_INT 1
16893: PPUSH
16894: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16898: LD_INT 30
16900: PPUSH
16901: LD_VAR 0 3
16905: PPUSH
16906: LD_INT 1
16908: PPUSH
16909: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16913: LD_INT 31
16915: PPUSH
16916: LD_VAR 0 3
16920: PPUSH
16921: LD_INT 1
16923: PPUSH
16924: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16928: LD_INT 32
16930: PPUSH
16931: LD_VAR 0 3
16935: PPUSH
16936: LD_INT 1
16938: PPUSH
16939: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16943: LD_INT 36
16945: PPUSH
16946: LD_VAR 0 3
16950: PPUSH
16951: LD_INT 1
16953: PPUSH
16954: CALL_OW 324
// end ; 5 :
16958: GO 19089
16960: LD_INT 5
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 18081
16968: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16969: LD_INT 35
16971: PPUSH
16972: LD_VAR 0 3
16976: PPUSH
16977: LD_INT 1
16979: PPUSH
16980: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16984: LD_INT 45
16986: PPUSH
16987: LD_VAR 0 3
16991: PPUSH
16992: LD_INT 1
16994: PPUSH
16995: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16999: LD_INT 46
17001: PPUSH
17002: LD_VAR 0 3
17006: PPUSH
17007: LD_INT 1
17009: PPUSH
17010: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17014: LD_INT 47
17016: PPUSH
17017: LD_VAR 0 3
17021: PPUSH
17022: LD_INT 1
17024: PPUSH
17025: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17029: LD_INT 1
17031: PPUSH
17032: LD_VAR 0 3
17036: PPUSH
17037: LD_INT 1
17039: PPUSH
17040: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17044: LD_INT 2
17046: PPUSH
17047: LD_VAR 0 3
17051: PPUSH
17052: LD_INT 1
17054: PPUSH
17055: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17059: LD_INT 11
17061: PPUSH
17062: LD_VAR 0 3
17066: PPUSH
17067: LD_INT 1
17069: PPUSH
17070: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17074: LD_INT 20
17076: PPUSH
17077: LD_VAR 0 3
17081: PPUSH
17082: LD_INT 1
17084: PPUSH
17085: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17089: LD_INT 48
17091: PPUSH
17092: LD_VAR 0 3
17096: PPUSH
17097: LD_INT 1
17099: PPUSH
17100: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17104: LD_INT 49
17106: PPUSH
17107: LD_VAR 0 3
17111: PPUSH
17112: LD_INT 1
17114: PPUSH
17115: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17119: LD_INT 69
17121: PPUSH
17122: LD_VAR 0 3
17126: PPUSH
17127: LD_INT 1
17129: PPUSH
17130: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17134: LD_INT 39
17136: PPUSH
17137: LD_VAR 0 3
17141: PPUSH
17142: LD_INT 1
17144: PPUSH
17145: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17149: LD_INT 34
17151: PPUSH
17152: LD_VAR 0 3
17156: PPUSH
17157: LD_INT 1
17159: PPUSH
17160: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17164: LD_INT 42
17166: PPUSH
17167: LD_VAR 0 3
17171: PPUSH
17172: LD_INT 1
17174: PPUSH
17175: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17179: LD_INT 44
17181: PPUSH
17182: LD_VAR 0 3
17186: PPUSH
17187: LD_INT 1
17189: PPUSH
17190: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17194: LD_INT 41
17196: PPUSH
17197: LD_VAR 0 3
17201: PPUSH
17202: LD_INT 1
17204: PPUSH
17205: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17209: LD_INT 40
17211: PPUSH
17212: LD_VAR 0 3
17216: PPUSH
17217: LD_INT 1
17219: PPUSH
17220: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17224: LD_INT 43
17226: PPUSH
17227: LD_VAR 0 3
17231: PPUSH
17232: LD_INT 1
17234: PPUSH
17235: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17239: LD_INT 70
17241: PPUSH
17242: LD_VAR 0 3
17246: PPUSH
17247: LD_INT 1
17249: PPUSH
17250: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17254: LD_INT 51
17256: PPUSH
17257: LD_VAR 0 3
17261: PPUSH
17262: LD_INT 1
17264: PPUSH
17265: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17269: LD_INT 52
17271: PPUSH
17272: LD_VAR 0 3
17276: PPUSH
17277: LD_INT 1
17279: PPUSH
17280: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17284: LD_INT 6
17286: PPUSH
17287: LD_VAR 0 3
17291: PPUSH
17292: LD_INT 1
17294: PPUSH
17295: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17299: LD_INT 15
17301: PPUSH
17302: LD_VAR 0 3
17306: PPUSH
17307: LD_INT 1
17309: PPUSH
17310: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17314: LD_INT 7
17316: PPUSH
17317: LD_VAR 0 3
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17329: LD_INT 12
17331: PPUSH
17332: LD_VAR 0 3
17336: PPUSH
17337: LD_INT 1
17339: PPUSH
17340: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17344: LD_INT 17
17346: PPUSH
17347: LD_VAR 0 3
17351: PPUSH
17352: LD_INT 1
17354: PPUSH
17355: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17359: LD_INT 18
17361: PPUSH
17362: LD_VAR 0 3
17366: PPUSH
17367: LD_INT 1
17369: PPUSH
17370: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17374: LD_INT 60
17376: PPUSH
17377: LD_VAR 0 3
17381: PPUSH
17382: LD_INT 1
17384: PPUSH
17385: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17389: LD_INT 32
17391: PPUSH
17392: LD_VAR 0 3
17396: PPUSH
17397: LD_INT 1
17399: PPUSH
17400: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17404: LD_INT 9
17406: PPUSH
17407: LD_VAR 0 3
17411: PPUSH
17412: LD_INT 1
17414: PPUSH
17415: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17419: LD_INT 57
17421: PPUSH
17422: LD_VAR 0 3
17426: PPUSH
17427: LD_INT 1
17429: PPUSH
17430: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17434: LD_INT 30
17436: PPUSH
17437: LD_VAR 0 3
17441: PPUSH
17442: LD_INT 1
17444: PPUSH
17445: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17449: LD_INT 37
17451: PPUSH
17452: LD_VAR 0 3
17456: PPUSH
17457: LD_INT 1
17459: PPUSH
17460: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17464: LD_INT 63
17466: PPUSH
17467: LD_VAR 0 3
17471: PPUSH
17472: LD_INT 1
17474: PPUSH
17475: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17479: LD_INT 3
17481: PPUSH
17482: LD_VAR 0 3
17486: PPUSH
17487: LD_INT 1
17489: PPUSH
17490: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17494: LD_INT 4
17496: PPUSH
17497: LD_VAR 0 3
17501: PPUSH
17502: LD_INT 1
17504: PPUSH
17505: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17509: LD_INT 5
17511: PPUSH
17512: LD_VAR 0 3
17516: PPUSH
17517: LD_INT 1
17519: PPUSH
17520: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17524: LD_INT 66
17526: PPUSH
17527: LD_VAR 0 3
17531: PPUSH
17532: LD_INT 1
17534: PPUSH
17535: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17539: LD_INT 21
17541: PPUSH
17542: LD_VAR 0 3
17546: PPUSH
17547: LD_INT 1
17549: PPUSH
17550: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17554: LD_INT 22
17556: PPUSH
17557: LD_VAR 0 3
17561: PPUSH
17562: LD_INT 1
17564: PPUSH
17565: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17569: LD_INT 19
17571: PPUSH
17572: LD_VAR 0 3
17576: PPUSH
17577: LD_INT 1
17579: PPUSH
17580: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17584: LD_INT 54
17586: PPUSH
17587: LD_VAR 0 3
17591: PPUSH
17592: LD_INT 1
17594: PPUSH
17595: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17599: LD_INT 55
17601: PPUSH
17602: LD_VAR 0 3
17606: PPUSH
17607: LD_INT 1
17609: PPUSH
17610: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17614: LD_INT 0
17616: PPUSH
17617: LD_VAR 0 3
17621: PPUSH
17622: LD_INT 1
17624: PPUSH
17625: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17629: LD_INT 1
17631: PPUSH
17632: LD_VAR 0 3
17636: PPUSH
17637: LD_INT 1
17639: PPUSH
17640: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17644: LD_INT 2
17646: PPUSH
17647: LD_VAR 0 3
17651: PPUSH
17652: LD_INT 1
17654: PPUSH
17655: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17659: LD_INT 3
17661: PPUSH
17662: LD_VAR 0 3
17666: PPUSH
17667: LD_INT 1
17669: PPUSH
17670: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17674: LD_INT 4
17676: PPUSH
17677: LD_VAR 0 3
17681: PPUSH
17682: LD_INT 1
17684: PPUSH
17685: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17689: LD_INT 5
17691: PPUSH
17692: LD_VAR 0 3
17696: PPUSH
17697: LD_INT 1
17699: PPUSH
17700: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17704: LD_INT 6
17706: PPUSH
17707: LD_VAR 0 3
17711: PPUSH
17712: LD_INT 1
17714: PPUSH
17715: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17719: LD_INT 7
17721: PPUSH
17722: LD_VAR 0 3
17726: PPUSH
17727: LD_INT 1
17729: PPUSH
17730: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17734: LD_INT 8
17736: PPUSH
17737: LD_VAR 0 3
17741: PPUSH
17742: LD_INT 1
17744: PPUSH
17745: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17749: LD_INT 10
17751: PPUSH
17752: LD_VAR 0 3
17756: PPUSH
17757: LD_INT 1
17759: PPUSH
17760: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17764: LD_INT 11
17766: PPUSH
17767: LD_VAR 0 3
17771: PPUSH
17772: LD_INT 1
17774: PPUSH
17775: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17779: LD_INT 12
17781: PPUSH
17782: LD_VAR 0 3
17786: PPUSH
17787: LD_INT 1
17789: PPUSH
17790: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17794: LD_INT 13
17796: PPUSH
17797: LD_VAR 0 3
17801: PPUSH
17802: LD_INT 1
17804: PPUSH
17805: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17809: LD_INT 14
17811: PPUSH
17812: LD_VAR 0 3
17816: PPUSH
17817: LD_INT 1
17819: PPUSH
17820: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17824: LD_INT 15
17826: PPUSH
17827: LD_VAR 0 3
17831: PPUSH
17832: LD_INT 1
17834: PPUSH
17835: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17839: LD_INT 16
17841: PPUSH
17842: LD_VAR 0 3
17846: PPUSH
17847: LD_INT 1
17849: PPUSH
17850: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17854: LD_INT 17
17856: PPUSH
17857: LD_VAR 0 3
17861: PPUSH
17862: LD_INT 1
17864: PPUSH
17865: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
17869: LD_INT 18
17871: PPUSH
17872: LD_VAR 0 3
17876: PPUSH
17877: LD_INT 1
17879: PPUSH
17880: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17884: LD_INT 19
17886: PPUSH
17887: LD_VAR 0 3
17891: PPUSH
17892: LD_INT 1
17894: PPUSH
17895: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17899: LD_INT 20
17901: PPUSH
17902: LD_VAR 0 3
17906: PPUSH
17907: LD_INT 1
17909: PPUSH
17910: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17914: LD_INT 21
17916: PPUSH
17917: LD_VAR 0 3
17921: PPUSH
17922: LD_INT 1
17924: PPUSH
17925: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17929: LD_INT 23
17931: PPUSH
17932: LD_VAR 0 3
17936: PPUSH
17937: LD_INT 1
17939: PPUSH
17940: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17944: LD_INT 26
17946: PPUSH
17947: LD_VAR 0 3
17951: PPUSH
17952: LD_INT 1
17954: PPUSH
17955: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17959: LD_INT 27
17961: PPUSH
17962: LD_VAR 0 3
17966: PPUSH
17967: LD_INT 1
17969: PPUSH
17970: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17974: LD_INT 28
17976: PPUSH
17977: LD_VAR 0 3
17981: PPUSH
17982: LD_INT 1
17984: PPUSH
17985: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17989: LD_INT 29
17991: PPUSH
17992: LD_VAR 0 3
17996: PPUSH
17997: LD_INT 1
17999: PPUSH
18000: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18004: LD_INT 30
18006: PPUSH
18007: LD_VAR 0 3
18011: PPUSH
18012: LD_INT 1
18014: PPUSH
18015: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18019: LD_INT 31
18021: PPUSH
18022: LD_VAR 0 3
18026: PPUSH
18027: LD_INT 1
18029: PPUSH
18030: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18034: LD_INT 32
18036: PPUSH
18037: LD_VAR 0 3
18041: PPUSH
18042: LD_INT 1
18044: PPUSH
18045: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18049: LD_INT 33
18051: PPUSH
18052: LD_VAR 0 3
18056: PPUSH
18057: LD_INT 1
18059: PPUSH
18060: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18064: LD_INT 36
18066: PPUSH
18067: LD_VAR 0 3
18071: PPUSH
18072: LD_INT 1
18074: PPUSH
18075: CALL_OW 324
// end ; 6 :
18079: GO 19089
18081: LD_INT 6
18083: DOUBLE
18084: EQUAL
18085: IFTRUE 18089
18087: GO 19014
18089: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18090: LD_INT 35
18092: PPUSH
18093: LD_VAR 0 3
18097: PPUSH
18098: LD_INT 1
18100: PPUSH
18101: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18105: LD_INT 45
18107: PPUSH
18108: LD_VAR 0 3
18112: PPUSH
18113: LD_INT 1
18115: PPUSH
18116: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18120: LD_INT 46
18122: PPUSH
18123: LD_VAR 0 3
18127: PPUSH
18128: LD_INT 1
18130: PPUSH
18131: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18135: LD_INT 47
18137: PPUSH
18138: LD_VAR 0 3
18142: PPUSH
18143: LD_INT 1
18145: PPUSH
18146: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18150: LD_INT 1
18152: PPUSH
18153: LD_VAR 0 3
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18165: LD_INT 2
18167: PPUSH
18168: LD_VAR 0 3
18172: PPUSH
18173: LD_INT 1
18175: PPUSH
18176: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18180: LD_INT 11
18182: PPUSH
18183: LD_VAR 0 3
18187: PPUSH
18188: LD_INT 1
18190: PPUSH
18191: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18195: LD_INT 20
18197: PPUSH
18198: LD_VAR 0 3
18202: PPUSH
18203: LD_INT 1
18205: PPUSH
18206: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18210: LD_INT 48
18212: PPUSH
18213: LD_VAR 0 3
18217: PPUSH
18218: LD_INT 1
18220: PPUSH
18221: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18225: LD_INT 49
18227: PPUSH
18228: LD_VAR 0 3
18232: PPUSH
18233: LD_INT 1
18235: PPUSH
18236: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18240: LD_INT 50
18242: PPUSH
18243: LD_VAR 0 3
18247: PPUSH
18248: LD_INT 1
18250: PPUSH
18251: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18255: LD_INT 69
18257: PPUSH
18258: LD_VAR 0 3
18262: PPUSH
18263: LD_INT 1
18265: PPUSH
18266: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18270: LD_INT 39
18272: PPUSH
18273: LD_VAR 0 3
18277: PPUSH
18278: LD_INT 1
18280: PPUSH
18281: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18285: LD_INT 34
18287: PPUSH
18288: LD_VAR 0 3
18292: PPUSH
18293: LD_INT 1
18295: PPUSH
18296: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18300: LD_INT 42
18302: PPUSH
18303: LD_VAR 0 3
18307: PPUSH
18308: LD_INT 1
18310: PPUSH
18311: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18315: LD_INT 44
18317: PPUSH
18318: LD_VAR 0 3
18322: PPUSH
18323: LD_INT 1
18325: PPUSH
18326: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18330: LD_INT 41
18332: PPUSH
18333: LD_VAR 0 3
18337: PPUSH
18338: LD_INT 1
18340: PPUSH
18341: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18345: LD_INT 13
18347: PPUSH
18348: LD_VAR 0 3
18352: PPUSH
18353: LD_INT 1
18355: PPUSH
18356: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18360: LD_INT 40
18362: PPUSH
18363: LD_VAR 0 3
18367: PPUSH
18368: LD_INT 1
18370: PPUSH
18371: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18375: LD_INT 43
18377: PPUSH
18378: LD_VAR 0 3
18382: PPUSH
18383: LD_INT 1
18385: PPUSH
18386: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18390: LD_INT 70
18392: PPUSH
18393: LD_VAR 0 3
18397: PPUSH
18398: LD_INT 1
18400: PPUSH
18401: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18405: LD_INT 23
18407: PPUSH
18408: LD_VAR 0 3
18412: PPUSH
18413: LD_INT 1
18415: PPUSH
18416: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18420: LD_INT 51
18422: PPUSH
18423: LD_VAR 0 3
18427: PPUSH
18428: LD_INT 1
18430: PPUSH
18431: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18435: LD_INT 52
18437: PPUSH
18438: LD_VAR 0 3
18442: PPUSH
18443: LD_INT 1
18445: PPUSH
18446: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18450: LD_INT 6
18452: PPUSH
18453: LD_VAR 0 3
18457: PPUSH
18458: LD_INT 1
18460: PPUSH
18461: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18465: LD_INT 15
18467: PPUSH
18468: LD_VAR 0 3
18472: PPUSH
18473: LD_INT 1
18475: PPUSH
18476: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18480: LD_INT 7
18482: PPUSH
18483: LD_VAR 0 3
18487: PPUSH
18488: LD_INT 1
18490: PPUSH
18491: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18495: LD_INT 12
18497: PPUSH
18498: LD_VAR 0 3
18502: PPUSH
18503: LD_INT 1
18505: PPUSH
18506: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
18510: LD_INT 10
18512: PPUSH
18513: LD_VAR 0 3
18517: PPUSH
18518: LD_INT 1
18520: PPUSH
18521: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
18525: LD_INT 17
18527: PPUSH
18528: LD_VAR 0 3
18532: PPUSH
18533: LD_INT 1
18535: PPUSH
18536: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18540: LD_INT 18
18542: PPUSH
18543: LD_VAR 0 3
18547: PPUSH
18548: LD_INT 1
18550: PPUSH
18551: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18555: LD_INT 60
18557: PPUSH
18558: LD_VAR 0 3
18562: PPUSH
18563: LD_INT 1
18565: PPUSH
18566: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
18570: LD_INT 61
18572: PPUSH
18573: LD_VAR 0 3
18577: PPUSH
18578: LD_INT 1
18580: PPUSH
18581: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
18585: LD_INT 32
18587: PPUSH
18588: LD_VAR 0 3
18592: PPUSH
18593: LD_INT 1
18595: PPUSH
18596: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
18600: LD_INT 27
18602: PPUSH
18603: LD_VAR 0 3
18607: PPUSH
18608: LD_INT 1
18610: PPUSH
18611: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
18615: LD_INT 36
18617: PPUSH
18618: LD_VAR 0 3
18622: PPUSH
18623: LD_INT 1
18625: PPUSH
18626: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
18630: LD_INT 33
18632: PPUSH
18633: LD_VAR 0 3
18637: PPUSH
18638: LD_INT 1
18640: PPUSH
18641: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18645: LD_INT 9
18647: PPUSH
18648: LD_VAR 0 3
18652: PPUSH
18653: LD_INT 1
18655: PPUSH
18656: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
18660: LD_INT 38
18662: PPUSH
18663: LD_VAR 0 3
18667: PPUSH
18668: LD_INT 1
18670: PPUSH
18671: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
18675: LD_INT 57
18677: PPUSH
18678: LD_VAR 0 3
18682: PPUSH
18683: LD_INT 1
18685: PPUSH
18686: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
18690: LD_INT 58
18692: PPUSH
18693: LD_VAR 0 3
18697: PPUSH
18698: LD_INT 1
18700: PPUSH
18701: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
18705: LD_INT 28
18707: PPUSH
18708: LD_VAR 0 3
18712: PPUSH
18713: LD_INT 1
18715: PPUSH
18716: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
18720: LD_INT 29
18722: PPUSH
18723: LD_VAR 0 3
18727: PPUSH
18728: LD_INT 1
18730: PPUSH
18731: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18735: LD_INT 30
18737: PPUSH
18738: LD_VAR 0 3
18742: PPUSH
18743: LD_INT 1
18745: PPUSH
18746: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18750: LD_INT 37
18752: PPUSH
18753: LD_VAR 0 3
18757: PPUSH
18758: LD_INT 1
18760: PPUSH
18761: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18765: LD_INT 63
18767: PPUSH
18768: LD_VAR 0 3
18772: PPUSH
18773: LD_INT 1
18775: PPUSH
18776: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
18780: LD_INT 64
18782: PPUSH
18783: LD_VAR 0 3
18787: PPUSH
18788: LD_INT 1
18790: PPUSH
18791: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18795: LD_INT 3
18797: PPUSH
18798: LD_VAR 0 3
18802: PPUSH
18803: LD_INT 1
18805: PPUSH
18806: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18810: LD_INT 4
18812: PPUSH
18813: LD_VAR 0 3
18817: PPUSH
18818: LD_INT 1
18820: PPUSH
18821: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18825: LD_INT 5
18827: PPUSH
18828: LD_VAR 0 3
18832: PPUSH
18833: LD_INT 1
18835: PPUSH
18836: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
18840: LD_INT 8
18842: PPUSH
18843: LD_VAR 0 3
18847: PPUSH
18848: LD_INT 1
18850: PPUSH
18851: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18855: LD_INT 66
18857: PPUSH
18858: LD_VAR 0 3
18862: PPUSH
18863: LD_INT 1
18865: PPUSH
18866: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
18870: LD_INT 67
18872: PPUSH
18873: LD_VAR 0 3
18877: PPUSH
18878: LD_INT 1
18880: PPUSH
18881: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18885: LD_INT 21
18887: PPUSH
18888: LD_VAR 0 3
18892: PPUSH
18893: LD_INT 1
18895: PPUSH
18896: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18900: LD_INT 22
18902: PPUSH
18903: LD_VAR 0 3
18907: PPUSH
18908: LD_INT 1
18910: PPUSH
18911: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18915: LD_INT 19
18917: PPUSH
18918: LD_VAR 0 3
18922: PPUSH
18923: LD_INT 1
18925: PPUSH
18926: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
18930: LD_INT 26
18932: PPUSH
18933: LD_VAR 0 3
18937: PPUSH
18938: LD_INT 1
18940: PPUSH
18941: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18945: LD_INT 54
18947: PPUSH
18948: LD_VAR 0 3
18952: PPUSH
18953: LD_INT 1
18955: PPUSH
18956: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18960: LD_INT 55
18962: PPUSH
18963: LD_VAR 0 3
18967: PPUSH
18968: LD_INT 1
18970: PPUSH
18971: CALL_OW 322
// for i = 0 to 39 do
18975: LD_ADDR_VAR 0 4
18979: PUSH
18980: DOUBLE
18981: LD_INT 0
18983: DEC
18984: ST_TO_ADDR
18985: LD_INT 39
18987: PUSH
18988: FOR_TO
18989: IFFALSE 19010
// SetRestrict ( i , side , true ) ;
18991: LD_VAR 0 4
18995: PPUSH
18996: LD_VAR 0 3
19000: PPUSH
19001: LD_INT 1
19003: PPUSH
19004: CALL_OW 324
19008: GO 18988
19010: POP
19011: POP
// end ; else
19012: GO 19089
19014: POP
// begin for i = 1 to 73 do
19015: LD_ADDR_VAR 0 4
19019: PUSH
19020: DOUBLE
19021: LD_INT 1
19023: DEC
19024: ST_TO_ADDR
19025: LD_INT 73
19027: PUSH
19028: FOR_TO
19029: IFFALSE 19050
// SetTech ( i , side , state_enabled ) ;
19031: LD_VAR 0 4
19035: PPUSH
19036: LD_VAR 0 3
19040: PPUSH
19041: LD_INT 1
19043: PPUSH
19044: CALL_OW 322
19048: GO 19028
19050: POP
19051: POP
// for i = 0 to 39 do
19052: LD_ADDR_VAR 0 4
19056: PUSH
19057: DOUBLE
19058: LD_INT 0
19060: DEC
19061: ST_TO_ADDR
19062: LD_INT 39
19064: PUSH
19065: FOR_TO
19066: IFFALSE 19087
// SetRestrict ( i , side , true ) ;
19068: LD_VAR 0 4
19072: PPUSH
19073: LD_VAR 0 3
19077: PPUSH
19078: LD_INT 1
19080: PPUSH
19081: CALL_OW 324
19085: GO 19065
19087: POP
19088: POP
// end ; end ; end ;
19089: GO 15094
19091: POP
19092: POP
// end ;
19093: LD_VAR 0 2
19097: RET
