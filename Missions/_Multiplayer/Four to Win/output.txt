// export def_public_score , def_amount_score ; export is_depot , number_of_breastworks , number_of_people , amount_of_apemen , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , amount_score , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , king_territory , final_count , Player_Side , player_team ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if MultiPlayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type = mp_game_type ;
  79: LD_ADDR_EXP 41
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side = mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  99: LD_ADDR_EXP 21
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 109: LD_ADDR_EXP 18
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 119: LD_ADDR_EXP 22
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 20
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams = mp_teams ;
 139: LD_ADDR_EXP 19
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 352
// begin Game_Type = 3 ;
 151: LD_ADDR_EXP 41
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side = 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 21
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 18
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 22
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 20
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 323: LD_ADDR_EXP 19
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: ST_TO_ADDR
// end ; for i := 1 to 8 do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_INT 8
 364: PUSH
 365: FOR_TO
 366: IFFALSE 453
// if Multiplayer_GetPlayerIsSpec ( i ) then
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 530
 377: IFFALSE 451
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 379: LD_ADDR_EXP 21
 383: PUSH
 384: LD_EXP 21
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_INT 0
 396: PPUSH
 397: CALL_OW 1
 401: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 402: LD_ADDR_EXP 19
 406: PUSH
 407: LD_EXP 19
 411: PPUSH
 412: LD_EXP 18
 416: PUSH
 417: LD_VAR 0 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 19
 427: PUSH
 428: LD_EXP 18
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: ARRAY
 439: PUSH
 440: LD_VAR 0 2
 444: DIFF
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// end ;
 451: GO 365
 453: POP
 454: POP
// if MultiPlayer then
 455: LD_OWVAR 4
 459: IFFALSE 666
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 461: LD_ADDR_EXP 43
 465: PUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 474: LD_ADDR_EXP 44
 478: PUSH
 479: LD_INT 1
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 487: LD_ADDR_EXP 45
 491: PUSH
 492: LD_INT 2
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 500: LD_ADDR_EXP 46
 504: PUSH
 505: LD_INT 3
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 513: LD_ADDR_EXP 47
 517: PUSH
 518: LD_INT 4
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 526: LD_ADDR_EXP 48
 530: PUSH
 531: LD_INT 5
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 539: LD_ADDR_EXP 50
 543: PUSH
 544: LD_INT 10
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 552: LD_ADDR_EXP 51
 556: PUSH
 557: LD_INT 11
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 565: LD_ADDR_EXP 52
 569: PUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 13 ) ;
 578: LD_ADDR_EXP 53
 582: PUSH
 583: LD_INT 13
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 14 ) ;
 591: LD_ADDR_EXP 54
 595: PUSH
 596: LD_INT 14
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 604: LD_ADDR_EXP 55
 608: PUSH
 609: LD_INT 15
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_public_score = GetMultiplayerSetting ( 16 ) ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 16
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_amount_score = GetMultiplayerSetting ( 17 ) ;
 630: LD_ADDR_EXP 2
 634: PUSH
 635: LD_INT 17
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 643: LD_ADDR_VAR 0 3
 647: PUSH
 648: LD_INT 22
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// def_win_rules = 0 ;
 656: LD_ADDR_EXP 17
 660: PUSH
 661: LD_INT 0
 663: ST_TO_ADDR
// end else
 664: GO 798
// begin randomize ;
 666: CALL_OW 10
// def_base_level = 3 ;
 670: LD_ADDR_EXP 43
 674: PUSH
 675: LD_INT 3
 677: ST_TO_ADDR
// def_amount_of_people = 1 ;
 678: LD_ADDR_EXP 44
 682: PUSH
 683: LD_INT 1
 685: ST_TO_ADDR
// def_skill_level = 1 ;
 686: LD_ADDR_EXP 45
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// def_starting_resources = 2 ;
 694: LD_ADDR_EXP 46
 698: PUSH
 699: LD_INT 2
 701: ST_TO_ADDR
// def_shipments_density = 1 ;
 702: LD_ADDR_EXP 47
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
 710: LD_ADDR_EXP 48
 714: PUSH
 715: LD_INT 0
 717: ST_TO_ADDR
// def_shared_vision = 1 ;
 718: LD_ADDR_EXP 50
 722: PUSH
 723: LD_INT 1
 725: ST_TO_ADDR
// def_morale_flags = 1 ;
 726: LD_ADDR_EXP 51
 730: PUSH
 731: LD_INT 1
 733: ST_TO_ADDR
// def_siberite_detection = 1 ;
 734: LD_ADDR_EXP 52
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 742: LD_ADDR_EXP 54
 746: PUSH
 747: LD_INT 3
 749: ST_TO_ADDR
// def_people_respawning = 2 ;
 750: LD_ADDR_EXP 53
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 758: LD_ADDR_EXP 55
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_public_score = 1 ;
 766: LD_ADDR_EXP 1
 770: PUSH
 771: LD_INT 1
 773: ST_TO_ADDR
// def_amount_score = 0 ;
 774: LD_ADDR_EXP 2
 778: PUSH
 779: LD_INT 0
 781: ST_TO_ADDR
// tech_level = 4 ;
 782: LD_ADDR_VAR 0 3
 786: PUSH
 787: LD_INT 4
 789: ST_TO_ADDR
// def_win_rules = 0 ;
 790: LD_ADDR_EXP 17
 794: PUSH
 795: LD_INT 0
 797: ST_TO_ADDR
// end ; Player_Side = Your_Side ;
 798: LD_ADDR_EXP 31
 802: PUSH
 803: LD_OWVAR 2
 807: ST_TO_ADDR
// player_team = Side_Teams [ Player_Side ] ;
 808: LD_ADDR_EXP 32
 812: PUSH
 813: LD_EXP 18
 817: PUSH
 818: LD_EXP 31
 822: ARRAY
 823: ST_TO_ADDR
// InitGameRules ;
 824: CALL 7788 0 0
// if def_game_rules = 0 then
 828: LD_EXP 42
 832: PUSH
 833: LD_INT 0
 835: EQUAL
 836: IFFALSE 863
// begin if isSGUI then
 838: LD_OWVAR 83
 842: IFFALSE 850
// setMpTechs ( ) else
 844: CALL 15429 0 0
 848: GO 863
// begin SetMpTechLevel ( tech_level + 1 ) ;
 850: LD_VAR 0 3
 854: PUSH
 855: LD_INT 1
 857: PLUS
 858: PPUSH
 859: CALL 15576 0 1
// end ; end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 863: LD_ADDR_EXP 3
 867: PUSH
 868: LD_INT 0
 870: PUSH
 871: LD_INT 1
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: PUSH
 886: LD_EXP 43
 890: PUSH
 891: LD_INT 1
 893: PLUS
 894: ARRAY
 895: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 896: LD_ADDR_EXP 4
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: LD_INT 0
 906: PUSH
 907: LD_INT 2
 909: PUSH
 910: LD_INT 4
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_EXP 43
 923: PUSH
 924: LD_INT 1
 926: PLUS
 927: ARRAY
 928: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 929: LD_ADDR_EXP 5
 933: PUSH
 934: LD_INT 9
 936: PUSH
 937: LD_INT 12
 939: PUSH
 940: LD_INT 15
 942: PUSH
 943: LD_INT 24
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_EXP 44
 956: PUSH
 957: LD_INT 1
 959: PLUS
 960: ARRAY
 961: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 962: LD_ADDR_EXP 7
 966: PUSH
 967: LD_INT 2
 969: PUSH
 970: LD_INT 3
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: LD_INT 5
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_EXP 45
 989: PUSH
 990: LD_INT 1
 992: PLUS
 993: ARRAY
 994: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 995: LD_ADDR_EXP 9
 999: PUSH
1000: LD_INT 0
1002: PUSH
1003: LD_INT 0
1005: PUSH
1006: LD_INT 0
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 30
1016: PUSH
1017: LD_INT 0
1019: PUSH
1020: LD_INT 0
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 50
1030: PUSH
1031: LD_INT 20
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 80
1044: PUSH
1045: LD_INT 40
1047: PUSH
1048: LD_INT 20
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_EXP 46
1066: PUSH
1067: LD_INT 1
1069: PLUS
1070: ARRAY
1071: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1072: LD_ADDR_EXP 8
1076: PUSH
1077: LD_INT 10
1079: PUSH
1080: EMPTY
1081: LIST
1082: PUSH
1083: LD_INT 7
1085: PUSH
1086: LD_INT 14
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 6
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 18
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 5
1109: PUSH
1110: LD_INT 10
1112: PUSH
1113: LD_INT 15
1115: PUSH
1116: LD_INT 20
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: PUSH
1131: LD_EXP 46
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: ARRAY
1140: ST_TO_ADDR
// shipments_density = [ 15 , 20 , 25 ] [ def_shipments_density + 1 ] ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_INT 15
1148: PUSH
1149: LD_INT 20
1151: PUSH
1152: LD_INT 25
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 47
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1170: LD_ADDR_EXP 6
1174: PUSH
1175: LD_INT 0
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: LD_INT 2
1183: PUSH
1184: LD_INT 3
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 54
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1203: LD_ADDR_EXP 12
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 165
1213: PUSH
1214: LD_INT 140
1216: PUSH
1217: LD_INT 115
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_EXP 54
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1236: LD_ADDR_EXP 13
1240: PUSH
1241: LD_INT 0
1243: PUSH
1244: LD_INT 8400
1246: PUSH
1247: LD_INT 1750
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_EXP 53
1259: PUSH
1260: LD_INT 1
1262: PLUS
1263: ARRAY
1264: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1265: LD_ADDR_EXP 14
1269: PUSH
1270: LD_INT 0
1272: PUSH
1273: LD_INT 21000
1275: PUSH
1276: LD_INT 4200
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: PUSH
1284: LD_EXP 53
1288: PUSH
1289: LD_INT 1
1291: PLUS
1292: ARRAY
1293: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1294: LD_ADDR_EXP 11
1298: PUSH
1299: LD_INT 1
1301: NEG
1302: PUSH
1303: LD_INT 350
1305: PUSH
1306: LD_INT 700
1308: PUSH
1309: LD_INT 1400
1311: PUSH
1312: LD_INT 0
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_EXP 51
1326: PUSH
1327: LD_INT 1
1329: PLUS
1330: ARRAY
1331: ST_TO_ADDR
// battle_flags_id = [ ] ;
1332: LD_ADDR_EXP 28
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// amount_score = [ 200 , 300 , 500 , 700 , 1000 , 1500 ] [ def_amount_score + 1 ] ;
1339: LD_ADDR_EXP 15
1343: PUSH
1344: LD_INT 200
1346: PUSH
1347: LD_INT 300
1349: PUSH
1350: LD_INT 500
1352: PUSH
1353: LD_INT 700
1355: PUSH
1356: LD_INT 1000
1358: PUSH
1359: LD_INT 1500
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1380: LD_ADDR_EXP 16
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 63000
1393: PUSH
1394: LD_INT 126000
1396: PUSH
1397: LD_INT 189000
1399: PUSH
1400: LD_INT 252000
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 55
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// if not def_builduptime then
1421: LD_EXP 56
1425: NOT
1426: IFFALSE 1431
// disable ( 600 ) ;
1428: LD_INT 600
1430: DISABLE_MARKED
// king_territory = KopecStred ;
1431: LD_ADDR_EXP 29
1435: PUSH
1436: LD_INT 2
1438: ST_TO_ADDR
// final_count = amount_score ;
1439: LD_ADDR_EXP 30
1443: PUSH
1444: LD_EXP 15
1448: ST_TO_ADDR
// end ;
1449: LD_VAR 0 1
1453: RET
// function init_map ; var i ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
// extra_oil_deposits_locations := [ [ 53 , 26 ] , [ 51 , 53 ] , [ 129 , 20 ] , [ 155 , 53 ] , [ 187 , 139 ] , [ 183 , 107 ] , [ 106 , 135 ] , [ 80 , 106 ] ] ;
1458: LD_ADDR_EXP 27
1462: PUSH
1463: LD_INT 53
1465: PUSH
1466: LD_INT 26
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 51
1475: PUSH
1476: LD_INT 53
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: PUSH
1483: LD_INT 129
1485: PUSH
1486: LD_INT 20
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 155
1495: PUSH
1496: LD_INT 53
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: PUSH
1503: LD_INT 187
1505: PUSH
1506: LD_INT 139
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PUSH
1513: LD_INT 183
1515: PUSH
1516: LD_INT 107
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 106
1525: PUSH
1526: LD_INT 135
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 80
1535: PUSH
1536: LD_INT 106
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// depot_def := [ [ 29 , 22 , 3 ] , [ 154 , 21 , 3 ] , [ 85 , 138 , 0 ] , [ 212 , 141 , 5 ] ] ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_INT 29
1560: PUSH
1561: LD_INT 22
1563: PUSH
1564: LD_INT 3
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 154
1574: PUSH
1575: LD_INT 21
1577: PUSH
1578: LD_INT 3
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 85
1588: PUSH
1589: LD_INT 138
1591: PUSH
1592: LD_INT 0
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 212
1602: PUSH
1603: LD_INT 141
1605: PUSH
1606: LD_INT 5
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: ST_TO_ADDR
// start_def := [ [ 33 , 25 ] , [ 151 , 24 ] , [ 89 , 135 ] , [ 205 , 137 ] ] ;
1620: LD_ADDR_EXP 26
1624: PUSH
1625: LD_INT 33
1627: PUSH
1628: LD_INT 25
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 151
1637: PUSH
1638: LD_INT 24
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 89
1647: PUSH
1648: LD_INT 135
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 205
1657: PUSH
1658: LD_INT 137
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// breastworks_def := [ [ [ 46 , 13 , 4 ] , [ 43 , 39 , 4 ] , [ 47 , 25 , 5 ] , [ 45 , 44 , 5 ] ] , [ [ 129 , 12 , 0 ] , [ 153 , 34 , 1 ] , [ 139 , 24 , 0 ] , [ 158 , 41 , 0 ] ] , [ [ 84 , 121 , 4 ] , [ 109 , 143 , 4 ] , [ 87 , 126 , 4 ] , [ 111 , 148 , 4 ] ] , [ [ 194 , 146 , 2 ] , [ 195 , 121 , 1 ] , [ 193 , 135 , 2 ] , [ 192 , 116 , 2 ] ] , ] ;
1671: LD_ADDR_EXP 25
1675: PUSH
1676: LD_INT 46
1678: PUSH
1679: LD_INT 13
1681: PUSH
1682: LD_INT 4
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 43
1692: PUSH
1693: LD_INT 39
1695: PUSH
1696: LD_INT 4
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 47
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 45
1720: PUSH
1721: LD_INT 44
1723: PUSH
1724: LD_INT 5
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 129
1740: PUSH
1741: LD_INT 12
1743: PUSH
1744: LD_INT 0
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 153
1754: PUSH
1755: LD_INT 34
1757: PUSH
1758: LD_INT 1
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 139
1768: PUSH
1769: LD_INT 24
1771: PUSH
1772: LD_INT 0
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 158
1782: PUSH
1783: LD_INT 41
1785: PUSH
1786: LD_INT 0
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 84
1802: PUSH
1803: LD_INT 121
1805: PUSH
1806: LD_INT 4
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 109
1816: PUSH
1817: LD_INT 143
1819: PUSH
1820: LD_INT 4
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 87
1830: PUSH
1831: LD_INT 126
1833: PUSH
1834: LD_INT 4
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 111
1844: PUSH
1845: LD_INT 148
1847: PUSH
1848: LD_INT 4
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 194
1864: PUSH
1865: LD_INT 146
1867: PUSH
1868: LD_INT 2
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 195
1878: PUSH
1879: LD_INT 121
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 193
1892: PUSH
1893: LD_INT 135
1895: PUSH
1896: LD_INT 2
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 192
1906: PUSH
1907: LD_INT 116
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// if def_extra_oil_deposits then
1930: LD_EXP 48
1934: IFFALSE 1978
// for i in extra_oil_deposits_locations do
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_EXP 27
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1976
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1949: LD_VAR 0 2
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 2
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 2
1969: PPUSH
1970: CALL_OW 62
1974: GO 1946
1976: POP
1977: POP
// end ;
1978: LD_VAR 0 1
1982: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1983: LD_INT 0
1985: PPUSH
1986: PPUSH
1987: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1988: LD_ADDR_EXP 23
1992: PUSH
1993: LD_EXP 18
1997: PUSH
1998: LD_INT 0
2000: PUSH
2001: EMPTY
2002: LIST
2003: DIFF
2004: PUSH
2005: LD_INT 1
2007: GREATER
2008: ST_TO_ADDR
// if not Team_Game then
2009: LD_EXP 23
2013: NOT
2014: IFFALSE 2112
// begin for i = 1 to 8 do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: DOUBLE
2022: LD_INT 1
2024: DEC
2025: ST_TO_ADDR
2026: LD_INT 8
2028: PUSH
2029: FOR_TO
2030: IFFALSE 2108
// for j = 1 to 8 do
2032: LD_ADDR_VAR 0 3
2036: PUSH
2037: DOUBLE
2038: LD_INT 1
2040: DEC
2041: ST_TO_ADDR
2042: LD_INT 8
2044: PUSH
2045: FOR_TO
2046: IFFALSE 2104
// if i <> j then
2048: LD_VAR 0 2
2052: PUSH
2053: LD_VAR 0 3
2057: NONEQUAL
2058: IFFALSE 2082
// SetAttitude ( i , j , att_neutral , true ) else
2060: LD_VAR 0 2
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: LD_INT 0
2072: PPUSH
2073: LD_INT 1
2075: PPUSH
2076: CALL_OW 80
2080: GO 2102
// SetAttitude ( i , j , att_friend , true ) ;
2082: LD_VAR 0 2
2086: PPUSH
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: LD_INT 1
2097: PPUSH
2098: CALL_OW 80
2102: GO 2045
2104: POP
2105: POP
2106: GO 2029
2108: POP
2109: POP
// end else
2110: GO 2287
// begin if def_shared_vision then
2112: LD_EXP 50
2116: IFFALSE 2181
// begin for i in Teams do
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_EXP 19
2127: PUSH
2128: FOR_IN
2129: IFFALSE 2179
// for j = 2 to i do
2131: LD_ADDR_VAR 0 3
2135: PUSH
2136: DOUBLE
2137: LD_INT 2
2139: DEC
2140: ST_TO_ADDR
2141: LD_VAR 0 2
2145: PUSH
2146: FOR_TO
2147: IFFALSE 2175
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2149: LD_VAR 0 2
2153: PUSH
2154: LD_VAR 0 3
2158: ARRAY
2159: PPUSH
2160: LD_VAR 0 2
2164: PUSH
2165: LD_INT 1
2167: ARRAY
2168: PPUSH
2169: CALL_OW 343
2173: GO 2146
2175: POP
2176: POP
2177: GO 2128
2179: POP
2180: POP
// end ; for i = 1 to 8 do
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: DOUBLE
2187: LD_INT 1
2189: DEC
2190: ST_TO_ADDR
2191: LD_INT 8
2193: PUSH
2194: FOR_TO
2195: IFFALSE 2285
// for j = 1 to 8 do
2197: LD_ADDR_VAR 0 3
2201: PUSH
2202: DOUBLE
2203: LD_INT 1
2205: DEC
2206: ST_TO_ADDR
2207: LD_INT 8
2209: PUSH
2210: FOR_TO
2211: IFFALSE 2281
// if Side_Teams [ i ] = Side_Teams [ j ] then
2213: LD_EXP 18
2217: PUSH
2218: LD_VAR 0 2
2222: ARRAY
2223: PUSH
2224: LD_EXP 18
2228: PUSH
2229: LD_VAR 0 3
2233: ARRAY
2234: EQUAL
2235: IFFALSE 2259
// SetAttitude ( i , j , att_friend , true ) else
2237: LD_VAR 0 2
2241: PPUSH
2242: LD_VAR 0 3
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: CALL_OW 80
2257: GO 2279
// SetAttitude ( i , j , att_enemy , true ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: LD_INT 1
2274: PPUSH
2275: CALL_OW 80
2279: GO 2210
2281: POP
2282: POP
2283: GO 2194
2285: POP
2286: POP
// end ; end ;
2287: LD_VAR 0 1
2291: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2292: LD_INT 0
2294: PPUSH
2295: PPUSH
2296: PPUSH
2297: PPUSH
// result := [ ] ;
2298: LD_ADDR_VAR 0 6
2302: PUSH
2303: EMPTY
2304: ST_TO_ADDR
// for i := 1 to count do
2305: LD_ADDR_VAR 0 7
2309: PUSH
2310: DOUBLE
2311: LD_INT 1
2313: DEC
2314: ST_TO_ADDR
2315: LD_VAR 0 1
2319: PUSH
2320: FOR_TO
2321: IFFALSE 2717
// begin uc_direction := Rand ( 0 , 5 ) ;
2323: LD_ADDR_OWVAR 24
2327: PUSH
2328: LD_INT 0
2330: PPUSH
2331: LD_INT 5
2333: PPUSH
2334: CALL_OW 12
2338: ST_TO_ADDR
// if commander then
2339: LD_LOC 1
2343: IFFALSE 2452
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2345: LD_ADDR_OWVAR 26
2349: PUSH
2350: LD_OWVAR 19
2354: PUSH
2355: LD_OWVAR 20
2359: ARRAY
2360: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2361: LD_INT 1
2363: PPUSH
2364: LD_INT 2
2366: PPUSH
2367: CALL_OW 12
2371: PPUSH
2372: LD_VAR 0 2
2376: PPUSH
2377: LD_EXP 7
2381: PUSH
2382: LD_INT 2
2384: PLUS
2385: PPUSH
2386: CALL_OW 380
// hc_importance := 105 ;
2390: LD_ADDR_OWVAR 32
2394: PUSH
2395: LD_INT 105
2397: ST_TO_ADDR
// commander := false ;
2398: LD_ADDR_LOC 1
2402: PUSH
2403: LD_INT 0
2405: ST_TO_ADDR
// if Multiplayer then
2406: LD_OWVAR 4
2410: IFFALSE 2450
// begin hc_gallery := MULTIAVATARS ;
2412: LD_ADDR_OWVAR 33
2416: PUSH
2417: LD_STRING MULTIAVATARS
2419: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2420: LD_ADDR_OWVAR 34
2424: PUSH
2425: LD_OWVAR 20
2429: PPUSH
2430: CALL_OW 525
2434: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2435: LD_ADDR_OWVAR 27
2439: PUSH
2440: LD_OWVAR 20
2444: PPUSH
2445: CALL_OW 526
2449: ST_TO_ADDR
// end ; end else
2450: GO 2515
// begin hc_name :=  ;
2452: LD_ADDR_OWVAR 26
2456: PUSH
2457: LD_STRING 
2459: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2460: LD_INT 1
2462: PPUSH
2463: LD_INT 2
2465: PPUSH
2466: CALL_OW 12
2470: PPUSH
2471: LD_VAR 0 2
2475: PPUSH
2476: LD_EXP 7
2480: PPUSH
2481: CALL_OW 380
// hc_importance := 0 ;
2485: LD_ADDR_OWVAR 32
2489: PUSH
2490: LD_INT 0
2492: ST_TO_ADDR
// if Multiplayer then
2493: LD_OWVAR 4
2497: IFFALSE 2515
// begin hc_gallery :=  ;
2499: LD_ADDR_OWVAR 33
2503: PUSH
2504: LD_STRING 
2506: ST_TO_ADDR
// hc_face_number := 0 ;
2507: LD_ADDR_OWVAR 34
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2515: LD_ADDR_VAR 0 9
2519: PUSH
2520: CALL_OW 44
2524: ST_TO_ADDR
// if global_defined then
2525: LD_LOC 3
2529: IFFALSE 2669
// begin if ( cl = class_soldier ) then
2531: LD_VAR 0 2
2535: PUSH
2536: LD_INT 1
2538: EQUAL
2539: IFFALSE 2559
// j := i + soldiers_created else
2541: LD_ADDR_VAR 0 8
2545: PUSH
2546: LD_VAR 0 7
2550: PUSH
2551: LD_LOC 4
2555: PLUS
2556: ST_TO_ADDR
2557: GO 2569
// j := i ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_VAR 0 7
2568: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2569: LD_LOC 2
2573: PUSH
2574: LD_VAR 0 2
2578: ARRAY
2579: PUSH
2580: LD_VAR 0 8
2584: ARRAY
2585: PPUSH
2586: LD_VAR 0 9
2590: PPUSH
2591: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: LD_INT 2
2602: PPUSH
2603: LD_LOC 2
2607: PUSH
2608: LD_VAR 0 2
2612: ARRAY
2613: PUSH
2614: LD_VAR 0 8
2618: ARRAY
2619: PPUSH
2620: LD_INT 2
2622: PPUSH
2623: CALL_OW 260
2627: PPUSH
2628: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2632: LD_VAR 0 9
2636: PPUSH
2637: LD_INT 1
2639: PPUSH
2640: LD_LOC 2
2644: PUSH
2645: LD_VAR 0 2
2649: ARRAY
2650: PUSH
2651: LD_VAR 0 8
2655: ARRAY
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: CALL_OW 260
2664: PPUSH
2665: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2669: LD_VAR 0 9
2673: PPUSH
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_VAR 0 4
2683: PPUSH
2684: LD_VAR 0 5
2688: PPUSH
2689: LD_INT 0
2691: PPUSH
2692: CALL_OW 50
// result := result ^ [ un ] ;
2696: LD_ADDR_VAR 0 6
2700: PUSH
2701: LD_VAR 0 6
2705: PUSH
2706: LD_VAR 0 9
2710: PUSH
2711: EMPTY
2712: LIST
2713: ADD
2714: ST_TO_ADDR
// end ;
2715: GO 2320
2717: POP
2718: POP
// if not global_defined then
2719: LD_LOC 3
2723: NOT
2724: IFFALSE 2802
// if ( global_units >= cl ) then
2726: LD_LOC 2
2730: PUSH
2731: LD_VAR 0 2
2735: GREATEREQUAL
2736: IFFALSE 2777
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2738: LD_ADDR_LOC 2
2742: PUSH
2743: LD_LOC 2
2747: PPUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: LD_LOC 2
2757: PUSH
2758: LD_VAR 0 2
2762: ARRAY
2763: PUSH
2764: LD_VAR 0 6
2768: ADD
2769: PPUSH
2770: CALL_OW 1
2774: ST_TO_ADDR
2775: GO 2802
// global_units := Replace ( global_units , cl , result ) ;
2777: LD_ADDR_LOC 2
2781: PUSH
2782: LD_LOC 2
2786: PPUSH
2787: LD_VAR 0 2
2791: PPUSH
2792: LD_VAR 0 6
2796: PPUSH
2797: CALL_OW 1
2801: ST_TO_ADDR
// end ;
2802: LD_VAR 0 6
2806: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , sol , br , dep ; begin
2807: LD_INT 0
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
2817: PPUSH
2818: PPUSH
// if side in [ 0 , 9 ] then
2819: LD_VAR 0 1
2823: PUSH
2824: LD_INT 0
2826: PUSH
2827: LD_INT 9
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: IN
2834: IFFALSE 2838
// exit ;
2836: GO 3945
// pos := Side_Positions [ side ] ;
2838: LD_ADDR_VAR 0 3
2842: PUSH
2843: LD_EXP 21
2847: PUSH
2848: LD_VAR 0 1
2852: ARRAY
2853: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2854: LD_ADDR_OWVAR 21
2858: PUSH
2859: LD_EXP 22
2863: PUSH
2864: LD_VAR 0 1
2868: ARRAY
2869: ST_TO_ADDR
// uc_side := side ;
2870: LD_ADDR_OWVAR 20
2874: PUSH
2875: LD_VAR 0 1
2879: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: LD_EXP 24
2889: PUSH
2890: LD_VAR 0 3
2894: ARRAY
2895: PUSH
2896: LD_INT 1
2898: ARRAY
2899: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2900: LD_ADDR_VAR 0 5
2904: PUSH
2905: LD_EXP 24
2909: PUSH
2910: LD_VAR 0 3
2914: ARRAY
2915: PUSH
2916: LD_INT 2
2918: ARRAY
2919: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2920: LD_ADDR_VAR 0 6
2924: PUSH
2925: LD_EXP 24
2929: PUSH
2930: LD_VAR 0 3
2934: ARRAY
2935: PUSH
2936: LD_INT 3
2938: ARRAY
2939: ST_TO_ADDR
// if is_depot then
2940: LD_EXP 3
2944: IFFALSE 3077
// begin bc_type = b_depot ;
2946: LD_ADDR_OWVAR 42
2950: PUSH
2951: LD_INT 0
2953: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2954: LD_ADDR_VAR 0 11
2958: PUSH
2959: LD_VAR 0 4
2963: PPUSH
2964: LD_VAR 0 5
2968: PPUSH
2969: LD_VAR 0 6
2973: PPUSH
2974: CALL_OW 47
2978: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2979: LD_VAR 0 11
2983: PPUSH
2984: LD_STRING @
2986: PUSH
2987: LD_VAR 0 1
2991: STR
2992: PPUSH
2993: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2997: LD_VAR 0 11
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 1
3009: PPUSH
3010: LD_EXP 9
3014: PUSH
3015: LD_INT 1
3017: ARRAY
3018: PPUSH
3019: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3023: LD_VAR 0 11
3027: PPUSH
3028: CALL_OW 274
3032: PPUSH
3033: LD_INT 2
3035: PPUSH
3036: LD_EXP 9
3040: PUSH
3041: LD_INT 2
3043: ARRAY
3044: PPUSH
3045: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3049: LD_VAR 0 11
3053: PPUSH
3054: CALL_OW 274
3058: PPUSH
3059: LD_INT 3
3061: PPUSH
3062: LD_EXP 9
3066: PUSH
3067: LD_INT 3
3069: ARRAY
3070: PPUSH
3071: CALL_OW 277
// end else
3075: GO 3221
// begin for i := 1 to 3 do
3077: LD_ADDR_VAR 0 7
3081: PUSH
3082: DOUBLE
3083: LD_INT 1
3085: DEC
3086: ST_TO_ADDR
3087: LD_INT 3
3089: PUSH
3090: FOR_TO
3091: IFFALSE 3219
// begin r := starting_resources [ i ] ;
3093: LD_ADDR_VAR 0 8
3097: PUSH
3098: LD_EXP 9
3102: PUSH
3103: LD_VAR 0 7
3107: ARRAY
3108: ST_TO_ADDR
// while r >= 10 do
3109: LD_VAR 0 8
3113: PUSH
3114: LD_INT 10
3116: GREATEREQUAL
3117: IFFALSE 3217
// if r > 50 then
3119: LD_VAR 0 8
3123: PUSH
3124: LD_INT 50
3126: GREATER
3127: IFFALSE 3173
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3129: LD_VAR 0 7
3133: PPUSH
3134: LD_INT 5
3136: PPUSH
3137: LD_VAR 0 4
3141: PPUSH
3142: LD_VAR 0 5
3146: PPUSH
3147: LD_INT 4
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 60
// r := r - 50 ;
3157: LD_ADDR_VAR 0 8
3161: PUSH
3162: LD_VAR 0 8
3166: PUSH
3167: LD_INT 50
3169: MINUS
3170: ST_TO_ADDR
// end else
3171: GO 3215
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3173: LD_VAR 0 7
3177: PPUSH
3178: LD_VAR 0 8
3182: PUSH
3183: LD_INT 10
3185: DIV
3186: PPUSH
3187: LD_VAR 0 4
3191: PPUSH
3192: LD_VAR 0 5
3196: PPUSH
3197: LD_INT 4
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: CALL_OW 60
// r := 0 ;
3207: LD_ADDR_VAR 0 8
3211: PUSH
3212: LD_INT 0
3214: ST_TO_ADDR
// end ;
3215: GO 3109
// end ;
3217: GO 3090
3219: POP
3220: POP
// end ; for r in starting_crates do
3221: LD_ADDR_VAR 0 8
3225: PUSH
3226: LD_EXP 8
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3264
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 5
3239: PPUSH
3240: LD_VAR 0 4
3244: PPUSH
3245: LD_VAR 0 5
3249: PPUSH
3250: LD_VAR 0 8
3254: PPUSH
3255: LD_INT 0
3257: PPUSH
3258: CALL_OW 60
3262: GO 3231
3264: POP
3265: POP
// if def_morale_flags then
3266: LD_EXP 51
3270: IFFALSE 3409
// begin x := start_def [ pos ] [ 1 ] ;
3272: LD_ADDR_VAR 0 4
3276: PUSH
3277: LD_EXP 26
3281: PUSH
3282: LD_VAR 0 3
3286: ARRAY
3287: PUSH
3288: LD_INT 1
3290: ARRAY
3291: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3292: LD_ADDR_VAR 0 5
3296: PUSH
3297: LD_EXP 26
3301: PUSH
3302: LD_VAR 0 3
3306: ARRAY
3307: PUSH
3308: LD_INT 2
3310: ARRAY
3311: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3312: LD_VAR 0 4
3316: PPUSH
3317: LD_VAR 0 5
3321: PPUSH
3322: LD_INT 12
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3332: LD_ADDR_EXP 28
3336: PUSH
3337: LD_EXP 28
3341: PUSH
3342: LD_VAR 0 1
3346: PPUSH
3347: LD_VAR 0 4
3351: PPUSH
3352: LD_VAR 0 5
3356: PPUSH
3357: LD_INT 1
3359: PUSH
3360: LD_INT 100
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 2
3369: PUSH
3370: LD_INT 50
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 3
3379: PUSH
3380: LD_INT 20
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: LD_INT 20
3389: PUSH
3390: LD_INT 100
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 418
3407: ADD
3408: ST_TO_ADDR
// end ; commander := true ;
3409: LD_ADDR_LOC 1
3413: PUSH
3414: LD_INT 1
3416: ST_TO_ADDR
// soldiers_created := 0 ;
3417: LD_ADDR_LOC 4
3421: PUSH
3422: LD_INT 0
3424: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3425: LD_ADDR_VAR 0 7
3429: PUSH
3430: DOUBLE
3431: LD_INT 1
3433: DEC
3434: ST_TO_ADDR
3435: LD_EXP 4
3439: PUSH
3440: FOR_TO
3441: IFFALSE 3663
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3443: LD_ADDR_VAR 0 4
3447: PUSH
3448: LD_EXP 25
3452: PUSH
3453: LD_VAR 0 3
3457: ARRAY
3458: PUSH
3459: LD_VAR 0 7
3463: ARRAY
3464: PUSH
3465: LD_INT 1
3467: ARRAY
3468: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3469: LD_ADDR_VAR 0 5
3473: PUSH
3474: LD_EXP 25
3478: PUSH
3479: LD_VAR 0 3
3483: ARRAY
3484: PUSH
3485: LD_VAR 0 7
3489: ARRAY
3490: PUSH
3491: LD_INT 2
3493: ARRAY
3494: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3495: LD_ADDR_VAR 0 6
3499: PUSH
3500: LD_EXP 25
3504: PUSH
3505: LD_VAR 0 3
3509: ARRAY
3510: PUSH
3511: LD_VAR 0 7
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// bc_type := b_breastwork ;
3521: LD_ADDR_OWVAR 42
3525: PUSH
3526: LD_INT 31
3528: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3529: LD_ADDR_VAR 0 10
3533: PUSH
3534: LD_VAR 0 4
3538: PPUSH
3539: LD_VAR 0 5
3543: PPUSH
3544: LD_VAR 0 6
3548: PPUSH
3549: CALL_OW 47
3553: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3554: LD_ADDR_VAR 0 4
3558: PUSH
3559: LD_VAR 0 4
3563: PPUSH
3564: LD_VAR 0 6
3568: PPUSH
3569: LD_INT 2
3571: PPUSH
3572: CALL_OW 272
3576: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3577: LD_ADDR_VAR 0 5
3581: PUSH
3582: LD_VAR 0 5
3586: PPUSH
3587: LD_VAR 0 6
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 273
3599: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3600: LD_ADDR_VAR 0 9
3604: PUSH
3605: LD_INT 1
3607: PPUSH
3608: LD_INT 1
3610: PPUSH
3611: LD_VAR 0 4
3615: PPUSH
3616: LD_VAR 0 5
3620: PPUSH
3621: LD_INT 0
3623: PPUSH
3624: CALL 2292 0 5
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3633: LD_ADDR_LOC 4
3637: PUSH
3638: LD_LOC 4
3642: PUSH
3643: LD_INT 1
3645: PLUS
3646: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3647: LD_VAR 0 9
3651: PPUSH
3652: LD_VAR 0 10
3656: PPUSH
3657: CALL_OW 120
// end ;
3661: GO 3440
3663: POP
3664: POP
// x := start_def [ pos ] [ 1 ] ;
3665: LD_ADDR_VAR 0 4
3669: PUSH
3670: LD_EXP 26
3674: PUSH
3675: LD_VAR 0 3
3679: ARRAY
3680: PUSH
3681: LD_INT 1
3683: ARRAY
3684: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3685: LD_ADDR_VAR 0 5
3689: PUSH
3690: LD_EXP 26
3694: PUSH
3695: LD_VAR 0 3
3699: ARRAY
3700: PUSH
3701: LD_INT 2
3703: ARRAY
3704: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
3705: LD_LOC 8
3709: PUSH
3710: LD_EXP 4
3714: MINUS
3715: PPUSH
3716: LD_INT 1
3718: PPUSH
3719: LD_VAR 0 4
3723: PPUSH
3724: LD_VAR 0 5
3728: PPUSH
3729: LD_INT 5
3731: PPUSH
3732: CALL 2292 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
3736: LD_LOC 5
3740: PPUSH
3741: LD_INT 2
3743: PPUSH
3744: LD_VAR 0 4
3748: PPUSH
3749: LD_VAR 0 5
3753: PPUSH
3754: LD_INT 5
3756: PPUSH
3757: CALL 2292 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
3761: LD_LOC 7
3765: PPUSH
3766: LD_INT 3
3768: PPUSH
3769: LD_VAR 0 4
3773: PPUSH
3774: LD_VAR 0 5
3778: PPUSH
3779: LD_INT 5
3781: PPUSH
3782: CALL 2292 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
3786: LD_LOC 6
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: LD_VAR 0 4
3798: PPUSH
3799: LD_VAR 0 5
3803: PPUSH
3804: LD_INT 5
3806: PPUSH
3807: CALL 2292 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3811: LD_EXP 52
3815: PUSH
3816: LD_INT 20
3818: PPUSH
3819: LD_VAR 0 1
3823: PPUSH
3824: CALL_OW 321
3828: PUSH
3829: LD_INT 1
3831: EQUAL
3832: AND
3833: IFFALSE 3850
// SetTech ( tech_SibDet , side , state_researched ) ;
3835: LD_INT 20
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: LD_INT 2
3845: PPUSH
3846: CALL_OW 322
// if def_siberite_bomb = 1 then
3850: LD_EXP 55
3854: PUSH
3855: LD_INT 1
3857: EQUAL
3858: IFFALSE 3892
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3860: LD_INT 25
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3875: LD_INT 73
3877: PPUSH
3878: LD_VAR 0 1
3882: PPUSH
3883: LD_INT 1
3885: PPUSH
3886: CALL_OW 322
// end else
3890: GO 3922
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3892: LD_INT 25
3894: PPUSH
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3907: LD_INT 73
3909: PPUSH
3910: LD_VAR 0 1
3914: PPUSH
3915: LD_INT 0
3917: PPUSH
3918: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3922: LD_INT 24
3924: PPUSH
3925: LD_VAR 0 1
3929: PPUSH
3930: LD_INT 0
3932: PPUSH
3933: CALL_OW 322
// global_defined := true ;
3937: LD_ADDR_LOC 3
3941: PUSH
3942: LD_INT 1
3944: ST_TO_ADDR
// end ;
3945: LD_VAR 0 2
3949: RET
// every 0 0$1 do
3950: GO 3952
3952: DISABLE
// if ( def_siberite_bomb > 1 ) then
3953: LD_EXP 55
3957: PUSH
3958: LD_INT 1
3960: GREATER
3961: IFFALSE 3976
// begin wait ( siberite_bomb_Delay ) ;
3963: LD_EXP 16
3967: PPUSH
3968: CALL_OW 67
// EnableSibFiss ;
3972: CALL 3977 0 0
// end ;
3976: END
// function EnableSibFiss ; var i ; begin
3977: LD_INT 0
3979: PPUSH
3980: PPUSH
// for i := 1 to 8 do
3981: LD_ADDR_VAR 0 2
3985: PUSH
3986: DOUBLE
3987: LD_INT 1
3989: DEC
3990: ST_TO_ADDR
3991: LD_INT 8
3993: PUSH
3994: FOR_TO
3995: IFFALSE 4041
// if Side_Positions [ i ] then
3997: LD_EXP 21
4001: PUSH
4002: LD_VAR 0 2
4006: ARRAY
4007: IFFALSE 4039
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4009: LD_INT 25
4011: PPUSH
4012: LD_VAR 0 2
4016: PPUSH
4017: LD_INT 1
4019: PPUSH
4020: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4024: LD_INT 73
4026: PPUSH
4027: LD_VAR 0 2
4031: PPUSH
4032: LD_INT 1
4034: PPUSH
4035: CALL_OW 322
// end ;
4039: GO 3994
4041: POP
4042: POP
// end ;
4043: LD_VAR 0 1
4047: RET
// function prepare_sides ; var i ; begin
4048: LD_INT 0
4050: PPUSH
4051: PPUSH
// global_units := [ ] ;
4052: LD_ADDR_LOC 2
4056: PUSH
4057: EMPTY
4058: ST_TO_ADDR
// global_defined := false ;
4059: LD_ADDR_LOC 3
4063: PUSH
4064: LD_INT 0
4066: ST_TO_ADDR
// CountClassMembers ;
4067: CALL 4117 0 0
// for i := 1 to 8 do
4071: LD_ADDR_VAR 0 2
4075: PUSH
4076: DOUBLE
4077: LD_INT 1
4079: DEC
4080: ST_TO_ADDR
4081: LD_INT 8
4083: PUSH
4084: FOR_TO
4085: IFFALSE 4110
// if Side_Positions [ i ] then
4087: LD_EXP 21
4091: PUSH
4092: LD_VAR 0 2
4096: ARRAY
4097: IFFALSE 4108
// prepare_side ( i ) ;
4099: LD_VAR 0 2
4103: PPUSH
4104: CALL 2807 0 1
4108: GO 4084
4110: POP
4111: POP
// end ;
4112: LD_VAR 0 1
4116: RET
// function CountClassMembers ; var Mode ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// if No_Mechs then
4121: LD_EXP 57
4125: IFFALSE 4137
// Mode := 2 else
4127: LD_ADDR_VAR 0 2
4131: PUSH
4132: LD_INT 2
4134: ST_TO_ADDR
4135: GO 4145
// Mode := 1 ;
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_INT 1
4144: ST_TO_ADDR
// neng := number_of_people ;
4145: LD_ADDR_LOC 5
4149: PUSH
4150: LD_EXP 5
4154: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4155: LD_ADDR_LOC 8
4159: PUSH
4160: LD_LOC 5
4164: PUSH
4165: LD_INT 4
4167: PUSH
4168: LD_INT 3
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_VAR 0 2
4179: ARRAY
4180: DIV
4181: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4182: LD_LOC 8
4186: PUSH
4187: LD_EXP 4
4191: LESS
4192: IFFALSE 4204
// nsol := number_of_breastworks ;
4194: LD_ADDR_LOC 8
4198: PUSH
4199: LD_EXP 4
4203: ST_TO_ADDR
// neng := neng - nsol ;
4204: LD_ADDR_LOC 5
4208: PUSH
4209: LD_LOC 5
4213: PUSH
4214: LD_LOC 8
4218: MINUS
4219: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4220: LD_ADDR_LOC 6
4224: PUSH
4225: LD_LOC 5
4229: PUSH
4230: LD_INT 3
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_VAR 0 2
4244: ARRAY
4245: DIV
4246: ST_TO_ADDR
// if ( nsci < 1 ) then
4247: LD_LOC 6
4251: PUSH
4252: LD_INT 1
4254: LESS
4255: IFFALSE 4265
// nsci := 1 ;
4257: LD_ADDR_LOC 6
4261: PUSH
4262: LD_INT 1
4264: ST_TO_ADDR
// neng := neng - nsci ;
4265: LD_ADDR_LOC 5
4269: PUSH
4270: LD_LOC 5
4274: PUSH
4275: LD_LOC 6
4279: MINUS
4280: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4281: LD_ADDR_LOC 7
4285: PUSH
4286: LD_LOC 5
4290: PUSH
4291: LD_INT 2
4293: DIV
4294: PUSH
4295: LD_INT 0
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: PUSH
4302: LD_VAR 0 2
4306: ARRAY
4307: ST_TO_ADDR
// neng := neng - nmech ;
4308: LD_ADDR_LOC 5
4312: PUSH
4313: LD_LOC 5
4317: PUSH
4318: LD_LOC 7
4322: MINUS
4323: ST_TO_ADDR
// if ( neng < 1 ) then
4324: LD_LOC 5
4328: PUSH
4329: LD_INT 1
4331: LESS
4332: IFFALSE 4342
// neng := 1 ;
4334: LD_ADDR_LOC 5
4338: PUSH
4339: LD_INT 1
4341: ST_TO_ADDR
// end ;
4342: LD_VAR 0 1
4346: RET
// starting begin disable ( 98 ) ;
4347: LD_INT 98
4349: DISABLE_MARKED
// disable ( 99 ) ;
4350: LD_INT 99
4352: DISABLE_MARKED
// disable ( 100 ) ;
4353: LD_INT 100
4355: DISABLE_MARKED
// disable ( 4 ) ;
4356: LD_INT 4
4358: DISABLE_MARKED
// disable ( 400 ) ;
4359: LD_INT 400
4361: DISABLE_MARKED
// disable ( 401 ) ;
4362: LD_INT 401
4364: DISABLE_MARKED
// mp_selectmsg := true ;
4365: LD_ADDR_OWVAR 13
4369: PUSH
4370: LD_INT 1
4372: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4373: CALL 68 0 0
// init_map ;
4377: CALL 1454 0 0
// set_shared_visions_and_alliances ;
4381: CALL 1983 0 0
// ResetFog ;
4385: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4389: LD_OWVAR 2
4393: PPUSH
4394: CALL_OW 520
// AnimateTrees ( true ) ;
4398: LD_INT 1
4400: PPUSH
4401: CALL_OW 573
// prepare_sides ;
4405: CALL 4048 0 0
// init_shipments_and_respawning ;
4409: CALL 4550 0 0
// Init_Win_Condition ;
4413: CALL 12047 0 0
// if game_type = 3 then
4417: LD_EXP 41
4421: PUSH
4422: LD_INT 3
4424: EQUAL
4425: IFFALSE 4435
// begin InitPoints ( ) ;
4427: CALL 11050 0 0
// init_kings_counting ;
4431: CALL 13273 0 0
// end ; InitApeman ;
4435: CALL 6680 0 0
// InitLimits ;
4439: CALL 9920 0 0
// ShowTimer ;
4443: CALL 10857 0 0
// music_nat := Side_Nations [ your_side ] ;
4447: LD_ADDR_OWVAR 71
4451: PUSH
4452: LD_EXP 22
4456: PUSH
4457: LD_OWVAR 2
4461: ARRAY
4462: ST_TO_ADDR
// if IAmSpec then
4463: CALL_OW 531
4467: IFFALSE 4503
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4469: LD_INT 0
4471: PPUSH
4472: LD_INT 0
4474: PPUSH
4475: LD_OWVAR 2
4479: PPUSH
4480: LD_INT 32767
4482: NEG
4483: PPUSH
4484: CALL_OW 330
// CenterNowOnXY ( 119 , 79 ) ;
4488: LD_INT 119
4490: PPUSH
4491: LD_INT 79
4493: PPUSH
4494: CALL_OW 86
// enable ( 400 ) ;
4498: LD_INT 400
4500: ENABLE_MARKED
// end else
4501: GO 4549
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4503: LD_EXP 26
4507: PUSH
4508: LD_EXP 21
4512: PUSH
4513: LD_OWVAR 2
4517: ARRAY
4518: ARRAY
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PPUSH
4524: LD_EXP 26
4528: PUSH
4529: LD_EXP 21
4533: PUSH
4534: LD_OWVAR 2
4538: ARRAY
4539: ARRAY
4540: PUSH
4541: LD_INT 2
4543: ARRAY
4544: PPUSH
4545: CALL_OW 86
// end ; end ; end_of_file
4549: END
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4550: LD_INT 0
4552: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4553: LD_ADDR_LOC 9
4557: PUSH
4558: LD_INT 0
4560: PPUSH
4561: LD_INT 3
4563: PPUSH
4564: CALL_OW 12
4568: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
4569: LD_ADDR_LOC 10
4573: PUSH
4574: LD_INT 1
4576: PPUSH
4577: LD_INT 8
4579: PPUSH
4580: CALL_OW 12
4584: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4585: LD_ADDR_LOC 11
4589: PUSH
4590: LD_INT 0
4592: PUSH
4593: LD_INT 0
4595: PUSH
4596: LD_INT 0
4598: PUSH
4599: LD_INT 0
4601: PUSH
4602: LD_INT 0
4604: PUSH
4605: LD_INT 0
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: LD_INT 0
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: ST_TO_ADDR
// end ;
4624: LD_VAR 0 1
4628: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
4629: GO 4631
4631: DISABLE
4632: LD_INT 0
4634: PPUSH
4635: PPUSH
4636: PPUSH
4637: PPUSH
// begin if respawning_time_max = 0 then
4638: LD_EXP 14
4642: PUSH
4643: LD_INT 0
4645: EQUAL
4646: IFFALSE 4650
// exit ;
4648: GO 5157
// if respawn = 8 then
4650: LD_LOC 10
4654: PUSH
4655: LD_INT 8
4657: EQUAL
4658: IFFALSE 4670
// respawn := 1 else
4660: LD_ADDR_LOC 10
4664: PUSH
4665: LD_INT 1
4667: ST_TO_ADDR
4668: GO 4684
// respawn := respawn + 1 ;
4670: LD_ADDR_LOC 10
4674: PUSH
4675: LD_LOC 10
4679: PUSH
4680: LD_INT 1
4682: PLUS
4683: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
4684: LD_EXP 21
4688: PUSH
4689: LD_LOC 10
4693: ARRAY
4694: PUSH
4695: LD_LOC 11
4699: PUSH
4700: LD_LOC 10
4704: ARRAY
4705: NOT
4706: AND
4707: IFFALSE 5156
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
4709: LD_ADDR_VAR 0 1
4713: PUSH
4714: LD_INT 21
4716: PUSH
4717: LD_INT 1
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 22
4726: PUSH
4727: LD_LOC 10
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 23
4741: PUSH
4742: LD_INT 0
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: PPUSH
4755: CALL_OW 69
4759: ST_TO_ADDR
// if n < number_of_people then
4760: LD_VAR 0 1
4764: PUSH
4765: LD_EXP 5
4769: LESS
4770: IFFALSE 5153
// begin aktresp := respawn ;
4772: LD_ADDR_VAR 0 3
4776: PUSH
4777: LD_LOC 10
4781: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
4782: LD_ADDR_LOC 11
4786: PUSH
4787: LD_LOC 11
4791: PPUSH
4792: LD_VAR 0 3
4796: PPUSH
4797: LD_INT 1
4799: PPUSH
4800: CALL_OW 1
4804: ST_TO_ADDR
// enable ;
4805: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
4806: LD_EXP 13
4810: PPUSH
4811: LD_EXP 14
4815: PPUSH
4816: CALL_OW 12
4820: PPUSH
4821: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
4825: LD_ADDR_LOC 11
4829: PUSH
4830: LD_LOC 11
4834: PPUSH
4835: LD_VAR 0 3
4839: PPUSH
4840: LD_INT 0
4842: PPUSH
4843: CALL_OW 1
4847: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4848: LD_ADDR_VAR 0 2
4852: PUSH
4853: LD_INT 21
4855: PUSH
4856: LD_INT 3
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 2
4865: PUSH
4866: LD_INT 30
4868: PUSH
4869: LD_INT 0
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 30
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 50
4893: PUSH
4894: EMPTY
4895: LIST
4896: PUSH
4897: LD_INT 22
4899: PUSH
4900: LD_VAR 0 3
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: PPUSH
4915: CALL_OW 69
4919: ST_TO_ADDR
// if building_list = 0 then
4920: LD_VAR 0 2
4924: PUSH
4925: LD_INT 0
4927: EQUAL
4928: IFFALSE 4973
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4930: LD_ADDR_VAR 0 2
4934: PUSH
4935: LD_INT 21
4937: PUSH
4938: LD_INT 3
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 50
4947: PUSH
4948: EMPTY
4949: LIST
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_VAR 0 3
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: PPUSH
4968: CALL_OW 69
4972: ST_TO_ADDR
// if building_list = 0 then
4973: LD_VAR 0 2
4977: PUSH
4978: LD_INT 0
4980: EQUAL
4981: IFFALSE 4985
// exit ;
4983: GO 5157
// hc_name :=  ;
4985: LD_ADDR_OWVAR 26
4989: PUSH
4990: LD_STRING 
4992: ST_TO_ADDR
// hc_importance := 0 ;
4993: LD_ADDR_OWVAR 32
4997: PUSH
4998: LD_INT 0
5000: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5001: LD_INT 0
5003: PPUSH
5004: LD_INT 0
5006: PPUSH
5007: LD_EXP 7
5011: PUSH
5012: LD_INT 2
5014: DIV
5015: PPUSH
5016: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5020: LD_ADDR_OWVAR 21
5024: PUSH
5025: LD_EXP 22
5029: PUSH
5030: LD_VAR 0 3
5034: ARRAY
5035: ST_TO_ADDR
// uc_side := aktresp ;
5036: LD_ADDR_OWVAR 20
5040: PUSH
5041: LD_VAR 0 3
5045: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5046: LD_ADDR_VAR 0 4
5050: PUSH
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 1
5058: PPUSH
5059: LD_VAR 0 2
5063: PUSH
5064: LD_INT 0
5066: PLUS
5067: PPUSH
5068: CALL_OW 12
5072: ARRAY
5073: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5074: LD_VAR 0 4
5078: PPUSH
5079: CALL_OW 266
5083: PUSH
5084: LD_INT 0
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: IN
5094: IFFALSE 5106
// n = 25 else
5096: LD_ADDR_VAR 0 1
5100: PUSH
5101: LD_INT 25
5103: ST_TO_ADDR
5104: GO 5114
// n = 10 ;
5106: LD_ADDR_VAR 0 1
5110: PUSH
5111: LD_INT 10
5113: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5114: CALL_OW 44
5118: PPUSH
5119: LD_VAR 0 4
5123: PPUSH
5124: CALL_OW 250
5128: PPUSH
5129: LD_VAR 0 4
5133: PPUSH
5134: CALL_OW 251
5138: PPUSH
5139: LD_VAR 0 1
5143: PPUSH
5144: LD_INT 1
5146: PPUSH
5147: CALL_OW 50
// end else
5151: GO 5154
// enable ;
5153: ENABLE
// end else
5154: GO 5157
// enable ;
5156: ENABLE
// end ;
5157: PPOPN 4
5159: END
// every 0 0$5 + 0 0$1.1 do var d ;
5160: GO 5162
5162: DISABLE
5163: LD_INT 0
5165: PPUSH
// begin case tick of 1 .. 1 1$0 :
5166: LD_OWVAR 1
5170: PUSH
5171: LD_INT 1
5173: DOUBLE
5174: GREATEREQUAL
5175: IFFALSE 5183
5177: LD_INT 2100
5179: DOUBLE
5180: LESSEQUAL
5181: IFTRUE 5185
5183: GO 5196
5185: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5186: LD_ADDR_VAR 0 1
5190: PUSH
5191: LD_INT 150
5193: ST_TO_ADDR
5194: GO 5379
5196: LD_INT 2100
5198: PUSH
5199: LD_INT 1
5201: PLUS
5202: DOUBLE
5203: GREATEREQUAL
5204: IFFALSE 5212
5206: LD_INT 10500
5208: DOUBLE
5209: LESSEQUAL
5210: IFTRUE 5214
5212: GO 5225
5214: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5215: LD_ADDR_VAR 0 1
5219: PUSH
5220: LD_INT 100
5222: ST_TO_ADDR
5223: GO 5379
5225: LD_INT 10500
5227: PUSH
5228: LD_INT 1
5230: PLUS
5231: DOUBLE
5232: GREATEREQUAL
5233: IFFALSE 5241
5235: LD_INT 21000
5237: DOUBLE
5238: LESSEQUAL
5239: IFTRUE 5243
5241: GO 5254
5243: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5244: LD_ADDR_VAR 0 1
5248: PUSH
5249: LD_INT 90
5251: ST_TO_ADDR
5252: GO 5379
5254: LD_INT 21000
5256: PUSH
5257: LD_INT 1
5259: PLUS
5260: DOUBLE
5261: GREATEREQUAL
5262: IFFALSE 5270
5264: LD_INT 42000
5266: DOUBLE
5267: LESSEQUAL
5268: IFTRUE 5272
5270: GO 5283
5272: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 70
5280: ST_TO_ADDR
5281: GO 5379
5283: LD_INT 42000
5285: PUSH
5286: LD_INT 1
5288: PLUS
5289: DOUBLE
5290: GREATEREQUAL
5291: IFFALSE 5299
5293: LD_INT 63000
5295: DOUBLE
5296: LESSEQUAL
5297: IFTRUE 5301
5299: GO 5312
5301: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5302: LD_ADDR_VAR 0 1
5306: PUSH
5307: LD_INT 60
5309: ST_TO_ADDR
5310: GO 5379
5312: LD_INT 63000
5314: PUSH
5315: LD_INT 1
5317: PLUS
5318: DOUBLE
5319: GREATEREQUAL
5320: IFFALSE 5328
5322: LD_INT 105000
5324: DOUBLE
5325: LESSEQUAL
5326: IFTRUE 5330
5328: GO 5341
5330: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5331: LD_ADDR_VAR 0 1
5335: PUSH
5336: LD_INT 35
5338: ST_TO_ADDR
5339: GO 5379
5341: LD_INT 105000
5343: PUSH
5344: LD_INT 1
5346: PLUS
5347: DOUBLE
5348: GREATEREQUAL
5349: IFFALSE 5357
5351: LD_INT 630000
5353: DOUBLE
5354: LESSEQUAL
5355: IFTRUE 5359
5357: GO 5370
5359: POP
// d := 20 ; else
5360: LD_ADDR_VAR 0 1
5364: PUSH
5365: LD_INT 20
5367: ST_TO_ADDR
5368: GO 5379
5370: POP
// d := 0 ; end ;
5371: LD_ADDR_VAR 0 1
5375: PUSH
5376: LD_INT 0
5378: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5379: LD_INT 1
5381: PPUSH
5382: LD_INT 10000
5384: PPUSH
5385: CALL_OW 12
5389: PUSH
5390: LD_VAR 0 1
5394: PUSH
5395: LD_EXP 10
5399: MUL
5400: LESSEQUAL
5401: IFFALSE 5455
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5403: LD_INT 1
5405: PPUSH
5406: LD_INT 140
5408: PPUSH
5409: CALL_OW 12
5413: PPUSH
5414: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5418: LD_ADDR_LOC 9
5422: PUSH
5423: LD_LOC 9
5427: PUSH
5428: LD_INT 1
5430: PLUS
5431: PUSH
5432: LD_INT 4
5434: MOD
5435: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLH + shipment , true ) ;
5436: LD_INT 5
5438: PPUSH
5439: LD_INT 3
5441: PUSH
5442: LD_LOC 9
5446: PLUS
5447: PPUSH
5448: LD_INT 1
5450: PPUSH
5451: CALL_OW 55
// end ; enable ;
5455: ENABLE
// end ;
5456: PPOPN 1
5458: END
// every 0 0$7 + 0 0$1.7 do var d ;
5459: GO 5461
5461: DISABLE
5462: LD_INT 0
5464: PPUSH
// begin case tick of 1 .. 1 1$0 :
5465: LD_OWVAR 1
5469: PUSH
5470: LD_INT 1
5472: DOUBLE
5473: GREATEREQUAL
5474: IFFALSE 5482
5476: LD_INT 2100
5478: DOUBLE
5479: LESSEQUAL
5480: IFTRUE 5484
5482: GO 5495
5484: POP
// d := 20 ; 1 1$0 + 1 .. 5 5$0 :
5485: LD_ADDR_VAR 0 1
5489: PUSH
5490: LD_INT 20
5492: ST_TO_ADDR
5493: GO 5678
5495: LD_INT 2100
5497: PUSH
5498: LD_INT 1
5500: PLUS
5501: DOUBLE
5502: GREATEREQUAL
5503: IFFALSE 5511
5505: LD_INT 10500
5507: DOUBLE
5508: LESSEQUAL
5509: IFTRUE 5513
5511: GO 5524
5513: POP
// d := 50 ; 5 5$0 + 1 .. 10 10$0 :
5514: LD_ADDR_VAR 0 1
5518: PUSH
5519: LD_INT 50
5521: ST_TO_ADDR
5522: GO 5678
5524: LD_INT 10500
5526: PUSH
5527: LD_INT 1
5529: PLUS
5530: DOUBLE
5531: GREATEREQUAL
5532: IFFALSE 5540
5534: LD_INT 21000
5536: DOUBLE
5537: LESSEQUAL
5538: IFTRUE 5542
5540: GO 5553
5542: POP
// d := 150 ; 10 10$0 + 1 .. 20 20$0 :
5543: LD_ADDR_VAR 0 1
5547: PUSH
5548: LD_INT 150
5550: ST_TO_ADDR
5551: GO 5678
5553: LD_INT 21000
5555: PUSH
5556: LD_INT 1
5558: PLUS
5559: DOUBLE
5560: GREATEREQUAL
5561: IFFALSE 5569
5563: LD_INT 42000
5565: DOUBLE
5566: LESSEQUAL
5567: IFTRUE 5571
5569: GO 5582
5571: POP
// d := 100 ; 20 20$0 + 1 .. 30 30$0 :
5572: LD_ADDR_VAR 0 1
5576: PUSH
5577: LD_INT 100
5579: ST_TO_ADDR
5580: GO 5678
5582: LD_INT 42000
5584: PUSH
5585: LD_INT 1
5587: PLUS
5588: DOUBLE
5589: GREATEREQUAL
5590: IFFALSE 5598
5592: LD_INT 63000
5594: DOUBLE
5595: LESSEQUAL
5596: IFTRUE 5600
5598: GO 5611
5600: POP
// d := 90 ; 30 30$0 + 1 .. 50 50$0 :
5601: LD_ADDR_VAR 0 1
5605: PUSH
5606: LD_INT 90
5608: ST_TO_ADDR
5609: GO 5678
5611: LD_INT 63000
5613: PUSH
5614: LD_INT 1
5616: PLUS
5617: DOUBLE
5618: GREATEREQUAL
5619: IFFALSE 5627
5621: LD_INT 105000
5623: DOUBLE
5624: LESSEQUAL
5625: IFTRUE 5629
5627: GO 5640
5629: POP
// d := 70 ; 50 50$0 + 1 .. 300 300$0 :
5630: LD_ADDR_VAR 0 1
5634: PUSH
5635: LD_INT 70
5637: ST_TO_ADDR
5638: GO 5678
5640: LD_INT 105000
5642: PUSH
5643: LD_INT 1
5645: PLUS
5646: DOUBLE
5647: GREATEREQUAL
5648: IFFALSE 5656
5650: LD_INT 630000
5652: DOUBLE
5653: LESSEQUAL
5654: IFTRUE 5658
5656: GO 5669
5658: POP
// d := 60 ; else
5659: LD_ADDR_VAR 0 1
5663: PUSH
5664: LD_INT 60
5666: ST_TO_ADDR
5667: GO 5678
5669: POP
// d := 35 ; end ;
5670: LD_ADDR_VAR 0 1
5674: PUSH
5675: LD_INT 35
5677: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5678: LD_INT 1
5680: PPUSH
5681: LD_INT 10000
5683: PPUSH
5684: CALL_OW 12
5688: PUSH
5689: LD_VAR 0 1
5693: PUSH
5694: LD_EXP 10
5698: MUL
5699: LESSEQUAL
5700: IFFALSE 5754
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5702: LD_INT 1
5704: PPUSH
5705: LD_INT 140
5707: PPUSH
5708: CALL_OW 12
5712: PPUSH
5713: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5717: LD_ADDR_LOC 9
5721: PUSH
5722: LD_LOC 9
5726: PUSH
5727: LD_INT 1
5729: PLUS
5730: PUSH
5731: LD_INT 4
5733: MOD
5734: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLHOut + shipment , true ) ;
5735: LD_INT 5
5737: PPUSH
5738: LD_INT 20
5740: PUSH
5741: LD_LOC 9
5745: PLUS
5746: PPUSH
5747: LD_INT 1
5749: PPUSH
5750: CALL_OW 55
// end ; enable ;
5754: ENABLE
// end ;
5755: PPOPN 1
5757: END
// every 1 1$0 trigger def_shipments_density do
5758: LD_EXP 47
5762: IFFALSE 5798
5764: GO 5766
5766: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5767: LD_INT 5
5769: PPUSH
5770: LD_INT 15
5772: PPUSH
5773: LD_INT 1
5775: PPUSH
5776: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5780: LD_INT 6300
5782: PUSH
5783: LD_INT 2100
5785: PUSH
5786: LD_EXP 47
5790: MUL
5791: MINUS
5792: PPUSH
5793: CALL_OW 67
// enable ;
5797: ENABLE
// end ; end_of_file
5798: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5799: LD_VAR 0 1
5803: PPUSH
5804: CALL_OW 266
5808: PUSH
5809: LD_INT 0
5811: PUSH
5812: LD_INT 1
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: IN
5819: IFFALSE 5844
// SetBName ( b , @ & GetSide ( b ) ) ;
5821: LD_VAR 0 1
5825: PPUSH
5826: LD_STRING @
5828: PUSH
5829: LD_VAR 0 1
5833: PPUSH
5834: CALL_OW 255
5838: STR
5839: PPUSH
5840: CALL_OW 500
// if def_game_rules then
5844: LD_EXP 42
5848: IFFALSE 5885
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
5850: LD_VAR 0 1
5854: PPUSH
5855: LD_VAR 0 1
5859: PPUSH
5860: CALL_OW 266
5864: PPUSH
5865: LD_VAR 0 1
5869: PPUSH
5870: CALL_OW 255
5874: PPUSH
5875: LD_INT 0
5877: PPUSH
5878: LD_INT 1
5880: PPUSH
5881: CALL 10321 0 5
// end ;
5885: PPOPN 2
5887: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5888: LD_VAR 0 1
5892: PPUSH
5893: CALL_OW 266
5897: PUSH
5898: LD_INT 0
5900: PUSH
5901: LD_INT 1
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: IN
5908: IFFALSE 5933
// SetBName ( b , @ & GetSide ( b ) ) ;
5910: LD_VAR 0 1
5914: PPUSH
5915: LD_STRING @
5917: PUSH
5918: LD_VAR 0 1
5922: PPUSH
5923: CALL_OW 255
5927: STR
5928: PPUSH
5929: CALL_OW 500
// if def_game_rules then
5933: LD_EXP 42
5937: IFFALSE 5976
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
5939: LD_VAR 0 1
5943: PPUSH
5944: LD_VAR 0 1
5948: PPUSH
5949: CALL_OW 266
5953: PPUSH
5954: LD_VAR 0 1
5958: PPUSH
5959: CALL_OW 255
5963: PPUSH
5964: LD_VAR 0 2
5968: PPUSH
5969: LD_INT 1
5971: PPUSH
5972: CALL 10321 0 5
// end ;
5976: PPOPN 3
5978: END
// on VehicleConstructed ( veh , fac ) do var side ;
5979: LD_INT 0
5981: PPUSH
// begin if GetControl ( veh ) = control_apeman then
5982: LD_VAR 0 1
5986: PPUSH
5987: CALL_OW 263
5991: PUSH
5992: LD_INT 5
5994: EQUAL
5995: IFFALSE 6137
// begin side := GetSide ( veh ) ;
5997: LD_ADDR_VAR 0 3
6001: PUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 255
6011: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6012: LD_ADDR_EXP 37
6016: PUSH
6017: LD_EXP 37
6021: PPUSH
6022: LD_VAR 0 3
6026: PPUSH
6027: LD_EXP 37
6031: PUSH
6032: LD_VAR 0 3
6036: ARRAY
6037: PPUSH
6038: LD_INT 52
6040: PUSH
6041: EMPTY
6042: LIST
6043: PPUSH
6044: CALL_OW 72
6048: PUSH
6049: LD_INT 22
6051: PUSH
6052: LD_VAR 0 3
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PUSH
6061: LD_INT 2
6063: PUSH
6064: LD_INT 33
6066: PUSH
6067: LD_INT 5
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 12
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 25
6086: PUSH
6087: LD_INT 15
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 25
6096: PUSH
6097: LD_INT 16
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 25
6106: PUSH
6107: LD_INT 17
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PPUSH
6126: CALL_OW 69
6130: UNION
6131: PPUSH
6132: CALL_OW 1
6136: ST_TO_ADDR
// end ; end ;
6137: PPOPN 3
6139: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6140: LD_INT 0
6142: PPUSH
6143: PPUSH
6144: PPUSH
6145: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6146: LD_VAR 0 1
6150: PPUSH
6151: CALL_OW 257
6155: PUSH
6156: LD_INT 12
6158: PUSH
6159: LD_INT 15
6161: PUSH
6162: LD_INT 17
6164: PUSH
6165: LD_INT 16
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: IN
6174: PUSH
6175: LD_VAR 0 1
6179: PPUSH
6180: CALL_OW 263
6184: PUSH
6185: LD_INT 5
6187: EQUAL
6188: OR
6189: IFFALSE 6200
// ApeKilled ( j ) ;
6191: LD_VAR 0 1
6195: PPUSH
6196: CALL 7361 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6200: LD_VAR 0 1
6204: PPUSH
6205: CALL_OW 266
6209: PUSH
6210: LD_INT 0
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: IN
6220: IFFALSE 6302
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6222: LD_ADDR_VAR 0 4
6226: PUSH
6227: LD_EXP 21
6231: PUSH
6232: LD_VAR 0 1
6236: PPUSH
6237: CALL_OW 255
6241: ARRAY
6242: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6243: LD_ADDR_VAR 0 2
6247: PUSH
6248: LD_EXP 26
6252: PUSH
6253: LD_VAR 0 4
6257: ARRAY
6258: PUSH
6259: LD_INT 1
6261: ARRAY
6262: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6263: LD_ADDR_VAR 0 3
6267: PUSH
6268: LD_EXP 26
6272: PUSH
6273: LD_VAR 0 4
6277: ARRAY
6278: PUSH
6279: LD_INT 2
6281: ARRAY
6282: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6283: LD_VAR 0 2
6287: PPUSH
6288: LD_VAR 0 3
6292: PPUSH
6293: CALL_OW 420
6297: PPUSH
6298: CALL_OW 419
// end ; if def_game_rules then
6302: LD_EXP 42
6306: IFFALSE 6405
// if ( GetType ( j ) = 3 ) then
6308: LD_VAR 0 1
6312: PPUSH
6313: CALL_OW 247
6317: PUSH
6318: LD_INT 3
6320: EQUAL
6321: IFFALSE 6361
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6323: LD_VAR 0 1
6327: PPUSH
6328: LD_VAR 0 1
6332: PPUSH
6333: CALL_OW 266
6337: PPUSH
6338: LD_VAR 0 1
6342: PPUSH
6343: CALL_OW 255
6347: PPUSH
6348: LD_INT 0
6350: PPUSH
6351: LD_INT 1
6353: NEG
6354: PPUSH
6355: CALL 10321 0 5
6359: GO 6405
// if ( GetChassis ( j ) = 25 ) then
6361: LD_VAR 0 1
6365: PPUSH
6366: CALL_OW 265
6370: PUSH
6371: LD_INT 25
6373: EQUAL
6374: IFFALSE 6405
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6376: LD_VAR 0 1
6380: PPUSH
6381: LD_INT 37
6383: PPUSH
6384: LD_VAR 0 1
6388: PPUSH
6389: CALL_OW 255
6393: PPUSH
6394: LD_INT 0
6396: PPUSH
6397: LD_INT 1
6399: NEG
6400: PPUSH
6401: CALL 10321 0 5
// end ;
6405: PPOPN 5
6407: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6408: LD_EXP 42
6412: PUSH
6413: LD_VAR 0 1
6417: PPUSH
6418: CALL_OW 265
6422: PUSH
6423: LD_INT 25
6425: EQUAL
6426: AND
6427: IFFALSE 6459
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6429: LD_VAR 0 1
6433: PPUSH
6434: LD_INT 37
6436: PPUSH
6437: LD_VAR 0 1
6441: PPUSH
6442: CALL_OW 255
6446: PPUSH
6447: LD_VAR 0 3
6451: PPUSH
6452: LD_INT 1
6454: PPUSH
6455: CALL 10321 0 5
// end ;
6459: PPOPN 4
6461: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_VAR 0 3
6476: PPUSH
6477: LD_OWVAR 2
6481: PPUSH
6482: CALL 11808 0 4
6486: PPOPN 3
6488: END
// every 20 20$00 trigger apemanNumber do
6489: LD_EXP 34
6493: IFFALSE 6526
6495: GO 6497
6497: DISABLE
// begin enable ;
6498: ENABLE
// if apeLevel >= 8 then
6499: LD_EXP 39
6503: PUSH
6504: LD_INT 8
6506: GREATEREQUAL
6507: IFFALSE 6512
// disable else
6509: DISABLE
6510: GO 6526
// apeLevel := apeLevel + 1 ;
6512: LD_ADDR_EXP 39
6516: PUSH
6517: LD_EXP 39
6521: PUSH
6522: LD_INT 1
6524: PLUS
6525: ST_TO_ADDR
// end ;
6526: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6527: LD_EXP 34
6531: PUSH
6532: LD_EXP 35
6536: LESS
6537: IFFALSE 6677
6539: GO 6541
6541: DISABLE
6542: LD_INT 0
6544: PPUSH
6545: PPUSH
6546: PPUSH
6547: PPUSH
// begin enable ;
6548: ENABLE
// for i := 1 to apemanPos do
6549: LD_ADDR_VAR 0 1
6553: PUSH
6554: DOUBLE
6555: LD_INT 1
6557: DEC
6558: ST_TO_ADDR
6559: LD_EXP 37
6563: PUSH
6564: FOR_TO
6565: IFFALSE 6675
// begin if apemanPlayerCount [ i ] then
6567: LD_EXP 38
6571: PUSH
6572: LD_VAR 0 1
6576: ARRAY
6577: IFFALSE 6673
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6579: LD_EXP 38
6583: PUSH
6584: LD_VAR 0 1
6588: ARRAY
6589: PUSH
6590: LD_EXP 37
6594: PUSH
6595: LD_VAR 0 1
6599: ARRAY
6600: GREATER
6601: IFFALSE 6673
// begin ape := PrepareApeman ;
6603: LD_ADDR_VAR 0 2
6607: PUSH
6608: CALL 7180 0 0
6612: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6613: LD_VAR 0 2
6617: PPUSH
6618: LD_EXP 40
6622: PUSH
6623: LD_VAR 0 1
6627: ARRAY
6628: PPUSH
6629: LD_INT 0
6631: PPUSH
6632: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6636: LD_ADDR_EXP 37
6640: PUSH
6641: LD_EXP 37
6645: PPUSH
6646: LD_VAR 0 1
6650: PPUSH
6651: LD_EXP 37
6655: PUSH
6656: LD_VAR 0 1
6660: ARRAY
6661: PUSH
6662: LD_VAR 0 2
6666: UNION
6667: PPUSH
6668: CALL_OW 1
6672: ST_TO_ADDR
// end ; end ; end ;
6673: GO 6564
6675: POP
6676: POP
// end ;
6677: PPOPN 4
6679: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6680: LD_INT 0
6682: PPUSH
6683: PPUSH
6684: PPUSH
6685: PPUSH
6686: PPUSH
6687: PPUSH
6688: PPUSH
// playersAmount := 0 ;
6689: LD_ADDR_VAR 0 3
6693: PUSH
6694: LD_INT 0
6696: ST_TO_ADDR
// _apeAreas := [ OpiceSZ , OpiceSV , OpiceJZ , OpiceJV ] ;
6697: LD_ADDR_VAR 0 7
6701: PUSH
6702: LD_INT 11
6704: PUSH
6705: LD_INT 12
6707: PUSH
6708: LD_INT 14
6710: PUSH
6711: LD_INT 13
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6720: LD_ADDR_EXP 40
6724: PUSH
6725: LD_INT 0
6727: PUSH
6728: LD_INT 0
6730: PUSH
6731: LD_INT 0
6733: PUSH
6734: LD_INT 0
6736: PUSH
6737: LD_INT 0
6739: PUSH
6740: LD_INT 0
6742: PUSH
6743: LD_INT 0
6745: PUSH
6746: LD_INT 0
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: ST_TO_ADDR
// for j = 1 to Side_Positions do
6759: LD_ADDR_VAR 0 4
6763: PUSH
6764: DOUBLE
6765: LD_INT 1
6767: DEC
6768: ST_TO_ADDR
6769: LD_EXP 21
6773: PUSH
6774: FOR_TO
6775: IFFALSE 6842
// if Side_Positions [ j ] then
6777: LD_EXP 21
6781: PUSH
6782: LD_VAR 0 4
6786: ARRAY
6787: IFFALSE 6840
// begin playersAmount := playersAmount + 1 ;
6789: LD_ADDR_VAR 0 3
6793: PUSH
6794: LD_VAR 0 3
6798: PUSH
6799: LD_INT 1
6801: PLUS
6802: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6803: LD_ADDR_EXP 40
6807: PUSH
6808: LD_EXP 40
6812: PPUSH
6813: LD_VAR 0 4
6817: PPUSH
6818: LD_VAR 0 7
6822: PUSH
6823: LD_EXP 21
6827: PUSH
6828: LD_VAR 0 4
6832: ARRAY
6833: ARRAY
6834: PPUSH
6835: CALL_OW 1
6839: ST_TO_ADDR
// end ;
6840: GO 6774
6842: POP
6843: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6844: LD_ADDR_EXP 36
6848: PUSH
6849: LD_INT 3
6851: PUSH
6852: LD_EXP 6
6856: MUL
6857: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6858: LD_ADDR_EXP 34
6862: PUSH
6863: LD_VAR 0 3
6867: PUSH
6868: LD_EXP 36
6872: MUL
6873: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6874: LD_ADDR_EXP 35
6878: PUSH
6879: LD_EXP 34
6883: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6884: LD_ADDR_EXP 37
6888: PUSH
6889: LD_INT 0
6891: PUSH
6892: LD_INT 0
6894: PUSH
6895: LD_INT 0
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: LD_INT 0
6903: PUSH
6904: LD_INT 0
6906: PUSH
6907: LD_INT 0
6909: PUSH
6910: LD_INT 0
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6923: LD_ADDR_EXP 38
6927: PUSH
6928: LD_INT 0
6930: PUSH
6931: LD_INT 0
6933: PUSH
6934: LD_INT 0
6936: PUSH
6937: LD_INT 0
6939: PUSH
6940: LD_INT 0
6942: PUSH
6943: LD_INT 0
6945: PUSH
6946: LD_INT 0
6948: PUSH
6949: LD_INT 0
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: ST_TO_ADDR
// apeLevel := 1 ;
6962: LD_ADDR_EXP 39
6966: PUSH
6967: LD_INT 1
6969: ST_TO_ADDR
// if not apemanNumber then
6970: LD_EXP 34
6974: NOT
6975: IFFALSE 6979
// exit ;
6977: GO 7175
// for i := 1 to apemanPerPlayer do
6979: LD_ADDR_VAR 0 2
6983: PUSH
6984: DOUBLE
6985: LD_INT 1
6987: DEC
6988: ST_TO_ADDR
6989: LD_EXP 36
6993: PUSH
6994: FOR_TO
6995: IFFALSE 7173
// begin for j := 1 to Side_Positions do
6997: LD_ADDR_VAR 0 4
7001: PUSH
7002: DOUBLE
7003: LD_INT 1
7005: DEC
7006: ST_TO_ADDR
7007: LD_EXP 21
7011: PUSH
7012: FOR_TO
7013: IFFALSE 7169
// if Side_Positions [ j ] then
7015: LD_EXP 21
7019: PUSH
7020: LD_VAR 0 4
7024: ARRAY
7025: IFFALSE 7167
// begin pos := Side_Positions [ j ] ;
7027: LD_ADDR_VAR 0 6
7031: PUSH
7032: LD_EXP 21
7036: PUSH
7037: LD_VAR 0 4
7041: ARRAY
7042: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7043: LD_ADDR_EXP 38
7047: PUSH
7048: LD_EXP 38
7052: PPUSH
7053: LD_VAR 0 4
7057: PPUSH
7058: LD_EXP 38
7062: PUSH
7063: LD_VAR 0 4
7067: ARRAY
7068: PUSH
7069: LD_INT 1
7071: PLUS
7072: PPUSH
7073: CALL_OW 1
7077: ST_TO_ADDR
// ape := PrepareApeman ;
7078: LD_ADDR_VAR 0 5
7082: PUSH
7083: CALL 7180 0 0
7087: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7088: LD_ADDR_EXP 37
7092: PUSH
7093: LD_EXP 37
7097: PPUSH
7098: LD_VAR 0 4
7102: PPUSH
7103: LD_EXP 37
7107: PUSH
7108: LD_VAR 0 4
7112: ARRAY
7113: PPUSH
7114: LD_EXP 37
7118: PUSH
7119: LD_VAR 0 4
7123: ARRAY
7124: PUSH
7125: LD_INT 1
7127: PLUS
7128: PPUSH
7129: LD_VAR 0 5
7133: PPUSH
7134: CALL_OW 1
7138: PPUSH
7139: CALL_OW 1
7143: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7144: LD_VAR 0 5
7148: PPUSH
7149: LD_EXP 40
7153: PUSH
7154: LD_VAR 0 4
7158: ARRAY
7159: PPUSH
7160: LD_INT 0
7162: PPUSH
7163: CALL_OW 49
// end ;
7167: GO 7012
7169: POP
7170: POP
// end ;
7171: GO 6994
7173: POP
7174: POP
// end ;
7175: LD_VAR 0 1
7179: RET
// export function PrepareApeman ; var bonus ; begin
7180: LD_INT 0
7182: PPUSH
7183: PPUSH
// uc_side := 0 ;
7184: LD_ADDR_OWVAR 20
7188: PUSH
7189: LD_INT 0
7191: ST_TO_ADDR
// uc_nation := 0 ;
7192: LD_ADDR_OWVAR 21
7196: PUSH
7197: LD_INT 0
7199: ST_TO_ADDR
// InitHc ;
7200: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7204: LD_ADDR_VAR 0 2
7208: PUSH
7209: LD_INT 1
7211: NEG
7212: PUSH
7213: LD_INT 0
7215: PUSH
7216: LD_INT 1
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: PUSH
7224: LD_OWVAR 1
7228: PUSH
7229: LD_INT 3
7231: MOD
7232: PUSH
7233: LD_INT 1
7235: PLUS
7236: ARRAY
7237: ST_TO_ADDR
// hc_class := class_apeman ;
7238: LD_ADDR_OWVAR 28
7242: PUSH
7243: LD_INT 12
7245: ST_TO_ADDR
// hc_gallery :=  ;
7246: LD_ADDR_OWVAR 33
7250: PUSH
7251: LD_STRING 
7253: ST_TO_ADDR
// hc_name :=  ;
7254: LD_ADDR_OWVAR 26
7258: PUSH
7259: LD_STRING 
7261: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7262: LD_ADDR_OWVAR 31
7266: PUSH
7267: LD_EXP 39
7271: PUSH
7272: LD_VAR 0 2
7276: PLUS
7277: PUSH
7278: LD_EXP 39
7282: PUSH
7283: LD_VAR 0 2
7287: PLUS
7288: PUSH
7289: LD_EXP 39
7293: PUSH
7294: LD_VAR 0 2
7298: PLUS
7299: PUSH
7300: LD_EXP 39
7304: PUSH
7305: LD_VAR 0 2
7309: PLUS
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7317: LD_ADDR_OWVAR 35
7321: PUSH
7322: LD_INT 10
7324: PUSH
7325: LD_VAR 0 2
7329: MUL
7330: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7331: LD_ADDR_OWVAR 29
7335: PUSH
7336: LD_INT 12
7338: PUSH
7339: LD_INT 10
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: ST_TO_ADDR
// result := CreateHuman ;
7346: LD_ADDR_VAR 0 1
7350: PUSH
7351: CALL_OW 44
7355: ST_TO_ADDR
// end ;
7356: LD_VAR 0 1
7360: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7361: LD_INT 0
7363: PPUSH
7364: PPUSH
7365: PPUSH
// if not ape then
7366: LD_VAR 0 1
7370: NOT
7371: IFFALSE 7375
// exit ;
7373: GO 7500
// side := GetSide ( ape ) ;
7375: LD_ADDR_VAR 0 3
7379: PUSH
7380: LD_VAR 0 1
7384: PPUSH
7385: CALL_OW 255
7389: ST_TO_ADDR
// if not side then
7390: LD_VAR 0 3
7394: NOT
7395: IFFALSE 7449
// begin for i = 1 to apemanPos do
7397: LD_ADDR_VAR 0 4
7401: PUSH
7402: DOUBLE
7403: LD_INT 1
7405: DEC
7406: ST_TO_ADDR
7407: LD_EXP 37
7411: PUSH
7412: FOR_TO
7413: IFFALSE 7447
// if ape in apemanPos [ i ] then
7415: LD_VAR 0 1
7419: PUSH
7420: LD_EXP 37
7424: PUSH
7425: LD_VAR 0 4
7429: ARRAY
7430: IN
7431: IFFALSE 7445
// begin side := i ;
7433: LD_ADDR_VAR 0 3
7437: PUSH
7438: LD_VAR 0 4
7442: ST_TO_ADDR
// break ;
7443: GO 7447
// end ;
7445: GO 7412
7447: POP
7448: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7449: LD_ADDR_EXP 37
7453: PUSH
7454: LD_EXP 37
7458: PPUSH
7459: LD_VAR 0 3
7463: PPUSH
7464: LD_EXP 37
7468: PUSH
7469: LD_VAR 0 3
7473: ARRAY
7474: PUSH
7475: LD_VAR 0 1
7479: DIFF
7480: PPUSH
7481: CALL_OW 1
7485: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7486: LD_ADDR_EXP 34
7490: PUSH
7491: LD_EXP 34
7495: PUSH
7496: LD_INT 1
7498: MINUS
7499: ST_TO_ADDR
// end ; end_of_file
7500: LD_VAR 0 2
7504: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
// for un in battle_flags_id do
7509: LD_ADDR_VAR 0 2
7513: PUSH
7514: LD_EXP 28
7518: PUSH
7519: FOR_IN
7520: IFFALSE 7595
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7522: LD_VAR 0 2
7526: PPUSH
7527: LD_INT 1
7529: PUSH
7530: LD_LOC 12
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_LOC 12
7546: PUSH
7547: LD_INT 2
7549: DIV
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: LD_INT 3
7557: PUSH
7558: LD_LOC 12
7562: PUSH
7563: LD_INT 5
7565: DIV
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 20
7573: PUSH
7574: LD_LOC 12
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: PPUSH
7589: CALL_OW 423
7593: GO 7519
7595: POP
7596: POP
// end ;
7597: LD_VAR 0 1
7601: RET
// every 0 0$0.1 do var un ;
7602: GO 7604
7604: DISABLE
7605: LD_INT 0
7607: PPUSH
// begin if not def_morale_flags then
7608: LD_EXP 51
7612: NOT
7613: IFFALSE 7617
// exit ;
7615: GO 7694
// if not morale_decreasing_time then
7617: LD_EXP 11
7621: NOT
7622: IFFALSE 7626
// exit ;
7624: GO 7694
// strength = 100 ;
7626: LD_ADDR_LOC 12
7630: PUSH
7631: LD_INT 100
7633: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7634: LD_EXP 11
7638: PPUSH
7639: CALL_OW 67
// strength := strength - 1 ;
7643: LD_ADDR_LOC 12
7647: PUSH
7648: LD_LOC 12
7652: PUSH
7653: LD_INT 1
7655: MINUS
7656: ST_TO_ADDR
// Update_Flags ;
7657: CALL 7505 0 0
// until not strength ;
7661: LD_LOC 12
7665: NOT
7666: IFFALSE 7634
// for un in battle_flags_id do
7668: LD_ADDR_VAR 0 1
7672: PUSH
7673: LD_EXP 28
7677: PUSH
7678: FOR_IN
7679: IFFALSE 7692
// KillBattleFlag ( un ) ;
7681: LD_VAR 0 1
7685: PPUSH
7686: CALL_OW 419
7690: GO 7678
7692: POP
7693: POP
// end ; end_of_file
7694: PPOPN 1
7696: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7697: LD_INT 0
7699: PPUSH
7700: PPUSH
// if ( not IAmSpec ) then
7701: CALL_OW 531
7705: NOT
7706: IFFALSE 7722
// Result := Limits_Info ^  ;
7708: LD_ADDR_VAR 0 1
7712: PUSH
7713: LD_LOC 24
7717: PUSH
7718: LD_STRING 
7720: ADD
7721: ST_TO_ADDR
// for i := 1 to 8 do
7722: LD_ADDR_VAR 0 2
7726: PUSH
7727: DOUBLE
7728: LD_INT 1
7730: DEC
7731: ST_TO_ADDR
7732: LD_INT 8
7734: PUSH
7735: FOR_TO
7736: IFFALSE 7781
// if Cheaters [ i ] then
7738: LD_LOC 25
7742: PUSH
7743: LD_VAR 0 2
7747: ARRAY
7748: IFFALSE 7779
// Result := Result ^ [ #Cheater , i , i ] ;
7750: LD_ADDR_VAR 0 1
7754: PUSH
7755: LD_VAR 0 1
7759: PUSH
7760: LD_STRING #Cheater
7762: PUSH
7763: LD_VAR 0 2
7767: PUSH
7768: LD_VAR 0 2
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: ADD
7778: ST_TO_ADDR
7779: GO 7735
7781: POP
7782: POP
// end ;
7783: LD_VAR 0 1
7787: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7788: LD_INT 0
7790: PPUSH
7791: PPUSH
7792: PPUSH
7793: PPUSH
7794: PPUSH
// case Game_Type of 10 :
7795: LD_EXP 41
7799: PUSH
7800: LD_INT 10
7802: DOUBLE
7803: EQUAL
7804: IFTRUE 7808
7806: GO 7819
7808: POP
// def_game_rules := 1 ; 11 :
7809: LD_ADDR_EXP 42
7813: PUSH
7814: LD_INT 1
7816: ST_TO_ADDR
7817: GO 7839
7819: LD_INT 11
7821: DOUBLE
7822: EQUAL
7823: IFTRUE 7827
7825: GO 7838
7827: POP
// def_game_rules := 3 ; end ;
7828: LD_ADDR_EXP 42
7832: PUSH
7833: LD_INT 3
7835: ST_TO_ADDR
7836: GO 7839
7838: POP
// case def_game_rules of 0 :
7839: LD_EXP 42
7843: PUSH
7844: LD_INT 0
7846: DOUBLE
7847: EQUAL
7848: IFTRUE 7852
7850: GO 7857
7852: POP
// exit ; 1 :
7853: GO 9915
7855: GO 9815
7857: LD_INT 1
7859: DOUBLE
7860: EQUAL
7861: IFTRUE 7865
7863: GO 8081
7865: POP
// begin def_base_level := 2 ;
7866: LD_ADDR_EXP 43
7870: PUSH
7871: LD_INT 2
7873: ST_TO_ADDR
// def_amount_of_people := 2 ;
7874: LD_ADDR_EXP 44
7878: PUSH
7879: LD_INT 2
7881: ST_TO_ADDR
// def_skill_level := 1 ;
7882: LD_ADDR_EXP 45
7886: PUSH
7887: LD_INT 1
7889: ST_TO_ADDR
// def_starting_resources := 2 ;
7890: LD_ADDR_EXP 46
7894: PUSH
7895: LD_INT 2
7897: ST_TO_ADDR
// def_shipments_density := 1 ;
7898: LD_ADDR_EXP 47
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7906: LD_ADDR_EXP 48
7910: PUSH
7911: LD_INT 0
7913: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7914: LD_ADDR_EXP 49
7918: PUSH
7919: LD_INT 1
7921: ST_TO_ADDR
// def_shared_vision := 1 ;
7922: LD_ADDR_EXP 50
7926: PUSH
7927: LD_INT 1
7929: ST_TO_ADDR
// def_morale_flags := 3 ;
7930: LD_ADDR_EXP 51
7934: PUSH
7935: LD_INT 3
7937: ST_TO_ADDR
// def_siberite_detection := 1 ;
7938: LD_ADDR_EXP 52
7942: PUSH
7943: LD_INT 1
7945: ST_TO_ADDR
// def_people_respawning := 1 ;
7946: LD_ADDR_EXP 53
7950: PUSH
7951: LD_INT 1
7953: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7954: LD_ADDR_EXP 54
7958: PUSH
7959: LD_INT 1
7961: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7962: LD_ADDR_EXP 55
7966: PUSH
7967: LD_INT 0
7969: ST_TO_ADDR
// def_builduptime := 2 ;
7970: LD_ADDR_EXP 56
7974: PUSH
7975: LD_INT 2
7977: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
7978: LD_ADDR_VAR 0 2
7982: PUSH
7983: EMPTY
7984: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7985: LD_ADDR_VAR 0 3
7989: PUSH
7990: EMPTY
7991: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7992: LD_ADDR_LOC 19
7996: PUSH
7997: EMPTY
7998: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7999: LD_ADDR_LOC 20
8003: PUSH
8004: EMPTY
8005: ST_TO_ADDR
// Banned_Controls := [ ] ;
8006: LD_ADDR_LOC 21
8010: PUSH
8011: EMPTY
8012: ST_TO_ADDR
// Banned_Engines := [ ] ;
8013: LD_ADDR_LOC 22
8017: PUSH
8018: EMPTY
8019: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8020: LD_ADDR_LOC 17
8024: PUSH
8025: LD_INT 37
8027: PUSH
8028: EMPTY
8029: LIST
8030: PUSH
8031: LD_INT 4
8033: PUSH
8034: LD_INT 5
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 31
8043: PUSH
8044: LD_INT 32
8046: PUSH
8047: LD_INT 33
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: LIST
8059: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8060: LD_ADDR_LOC 18
8064: PUSH
8065: LD_INT 2
8067: PUSH
8068: LD_INT 2
8070: PUSH
8071: LD_INT 4
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: ST_TO_ADDR
// end ; 2 :
8079: GO 9815
8081: LD_INT 2
8083: DOUBLE
8084: EQUAL
8085: IFTRUE 8089
8087: GO 8298
8089: POP
// begin def_base_level := 1 ;
8090: LD_ADDR_EXP 43
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// def_amount_of_people := 2 ;
8098: LD_ADDR_EXP 44
8102: PUSH
8103: LD_INT 2
8105: ST_TO_ADDR
// def_skill_level := 3 ;
8106: LD_ADDR_EXP 45
8110: PUSH
8111: LD_INT 3
8113: ST_TO_ADDR
// def_starting_resources := 3 ;
8114: LD_ADDR_EXP 46
8118: PUSH
8119: LD_INT 3
8121: ST_TO_ADDR
// def_shipments_density := 2 ;
8122: LD_ADDR_EXP 47
8126: PUSH
8127: LD_INT 2
8129: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8130: LD_ADDR_EXP 48
8134: PUSH
8135: LD_INT 1
8137: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8138: LD_ADDR_EXP 49
8142: PUSH
8143: LD_INT 2
8145: ST_TO_ADDR
// def_shared_vision := 1 ;
8146: LD_ADDR_EXP 50
8150: PUSH
8151: LD_INT 1
8153: ST_TO_ADDR
// def_morale_flags := 0 ;
8154: LD_ADDR_EXP 51
8158: PUSH
8159: LD_INT 0
8161: ST_TO_ADDR
// def_siberite_detection := 1 ;
8162: LD_ADDR_EXP 52
8166: PUSH
8167: LD_INT 1
8169: ST_TO_ADDR
// def_people_respawning := 0 ;
8170: LD_ADDR_EXP 53
8174: PUSH
8175: LD_INT 0
8177: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8178: LD_ADDR_EXP 54
8182: PUSH
8183: LD_INT 0
8185: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8186: LD_ADDR_EXP 55
8190: PUSH
8191: LD_INT 0
8193: ST_TO_ADDR
// def_builduptime := 2 ;
8194: LD_ADDR_EXP 56
8198: PUSH
8199: LD_INT 2
8201: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8202: LD_ADDR_VAR 0 2
8206: PUSH
8207: LD_INT 1
8209: PUSH
8210: EMPTY
8211: LIST
8212: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8213: LD_ADDR_VAR 0 3
8217: PUSH
8218: EMPTY
8219: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8220: LD_ADDR_LOC 19
8224: PUSH
8225: EMPTY
8226: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8227: LD_ADDR_LOC 20
8231: PUSH
8232: EMPTY
8233: ST_TO_ADDR
// Banned_Controls := [ ] ;
8234: LD_ADDR_LOC 21
8238: PUSH
8239: EMPTY
8240: ST_TO_ADDR
// Banned_Engines := [ ] ;
8241: LD_ADDR_LOC 22
8245: PUSH
8246: EMPTY
8247: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8248: LD_ADDR_LOC 17
8252: PUSH
8253: LD_INT 4
8255: PUSH
8256: LD_INT 5
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 31
8265: PUSH
8266: LD_INT 32
8268: PUSH
8269: LD_INT 33
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: LIST
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8281: LD_ADDR_LOC 18
8285: PUSH
8286: LD_INT 1
8288: PUSH
8289: LD_INT 2
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: ST_TO_ADDR
// end ; 3 :
8296: GO 9815
8298: LD_INT 3
8300: DOUBLE
8301: EQUAL
8302: IFTRUE 8306
8304: GO 8549
8306: POP
// begin def_base_level := 1 ;
8307: LD_ADDR_EXP 43
8311: PUSH
8312: LD_INT 1
8314: ST_TO_ADDR
// def_amount_of_people := 2 ;
8315: LD_ADDR_EXP 44
8319: PUSH
8320: LD_INT 2
8322: ST_TO_ADDR
// def_skill_level := 3 ;
8323: LD_ADDR_EXP 45
8327: PUSH
8328: LD_INT 3
8330: ST_TO_ADDR
// def_starting_resources := 3 ;
8331: LD_ADDR_EXP 46
8335: PUSH
8336: LD_INT 3
8338: ST_TO_ADDR
// def_shipments_density := 1 ;
8339: LD_ADDR_EXP 47
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8347: LD_ADDR_EXP 48
8351: PUSH
8352: LD_INT 0
8354: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8355: LD_ADDR_EXP 49
8359: PUSH
8360: LD_INT 1
8362: ST_TO_ADDR
// def_shared_vision := 1 ;
8363: LD_ADDR_EXP 50
8367: PUSH
8368: LD_INT 1
8370: ST_TO_ADDR
// def_morale_flags := 0 ;
8371: LD_ADDR_EXP 51
8375: PUSH
8376: LD_INT 0
8378: ST_TO_ADDR
// def_siberite_detection := 1 ;
8379: LD_ADDR_EXP 52
8383: PUSH
8384: LD_INT 1
8386: ST_TO_ADDR
// def_people_respawning := 0 ;
8387: LD_ADDR_EXP 53
8391: PUSH
8392: LD_INT 0
8394: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8395: LD_ADDR_EXP 54
8399: PUSH
8400: LD_INT 2
8402: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8403: LD_ADDR_EXP 55
8407: PUSH
8408: LD_INT 0
8410: ST_TO_ADDR
// def_builduptime := 1 ;
8411: LD_ADDR_EXP 56
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8419: LD_ADDR_VAR 0 2
8423: PUSH
8424: LD_INT 23
8426: PUSH
8427: EMPTY
8428: LIST
8429: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8430: LD_ADDR_VAR 0 3
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: LD_INT 37
8440: PUSH
8441: LD_INT 32
8443: PUSH
8444: LD_INT 33
8446: PUSH
8447: LD_INT 36
8449: PUSH
8450: LD_INT 16
8452: PUSH
8453: LD_INT 23
8455: PUSH
8456: LD_INT 21
8458: PUSH
8459: LD_INT 18
8461: PUSH
8462: LD_INT 22
8464: PUSH
8465: LD_INT 20
8467: PUSH
8468: LD_INT 19
8470: PUSH
8471: LD_INT 25
8473: PUSH
8474: LD_INT 17
8476: PUSH
8477: LD_INT 24
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8497: LD_ADDR_LOC 19
8501: PUSH
8502: EMPTY
8503: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8504: LD_ADDR_LOC 20
8508: PUSH
8509: EMPTY
8510: ST_TO_ADDR
// Banned_Controls := [ ] ;
8511: LD_ADDR_LOC 21
8515: PUSH
8516: EMPTY
8517: ST_TO_ADDR
// Banned_Engines := [ ] ;
8518: LD_ADDR_LOC 22
8522: PUSH
8523: EMPTY
8524: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8525: LD_ADDR_LOC 17
8529: PUSH
8530: EMPTY
8531: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8532: LD_ADDR_LOC 18
8536: PUSH
8537: EMPTY
8538: ST_TO_ADDR
// No_Mechs := true ;
8539: LD_ADDR_EXP 57
8543: PUSH
8544: LD_INT 1
8546: ST_TO_ADDR
// end ; 4 :
8547: GO 9815
8549: LD_INT 4
8551: DOUBLE
8552: EQUAL
8553: IFTRUE 8557
8555: GO 8732
8557: POP
// begin def_base_level := 1 ;
8558: LD_ADDR_EXP 43
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// def_amount_of_people := 2 ;
8566: LD_ADDR_EXP 44
8570: PUSH
8571: LD_INT 2
8573: ST_TO_ADDR
// def_skill_level := 3 ;
8574: LD_ADDR_EXP 45
8578: PUSH
8579: LD_INT 3
8581: ST_TO_ADDR
// def_starting_resources := 3 ;
8582: LD_ADDR_EXP 46
8586: PUSH
8587: LD_INT 3
8589: ST_TO_ADDR
// def_shipments_density := 2 ;
8590: LD_ADDR_EXP 47
8594: PUSH
8595: LD_INT 2
8597: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8598: LD_ADDR_EXP 48
8602: PUSH
8603: LD_INT 1
8605: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8606: LD_ADDR_EXP 49
8610: PUSH
8611: LD_INT 2
8613: ST_TO_ADDR
// def_shared_vision := 1 ;
8614: LD_ADDR_EXP 50
8618: PUSH
8619: LD_INT 1
8621: ST_TO_ADDR
// def_morale_flags := 0 ;
8622: LD_ADDR_EXP 51
8626: PUSH
8627: LD_INT 0
8629: ST_TO_ADDR
// def_siberite_detection := 1 ;
8630: LD_ADDR_EXP 52
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// def_people_respawning := 0 ;
8638: LD_ADDR_EXP 53
8642: PUSH
8643: LD_INT 0
8645: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8646: LD_ADDR_EXP 54
8650: PUSH
8651: LD_INT 0
8653: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8654: LD_ADDR_EXP 55
8658: PUSH
8659: LD_INT 1
8661: ST_TO_ADDR
// def_builduptime := 3 ;
8662: LD_ADDR_EXP 56
8666: PUSH
8667: LD_INT 3
8669: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8670: LD_ADDR_VAR 0 2
8674: PUSH
8675: LD_INT 1
8677: PUSH
8678: EMPTY
8679: LIST
8680: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: EMPTY
8687: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8688: LD_ADDR_LOC 19
8692: PUSH
8693: EMPTY
8694: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8695: LD_ADDR_LOC 20
8699: PUSH
8700: EMPTY
8701: ST_TO_ADDR
// Banned_Controls := [ ] ;
8702: LD_ADDR_LOC 21
8706: PUSH
8707: EMPTY
8708: ST_TO_ADDR
// Banned_Engines := [ ] ;
8709: LD_ADDR_LOC 22
8713: PUSH
8714: EMPTY
8715: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8716: LD_ADDR_LOC 17
8720: PUSH
8721: EMPTY
8722: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8723: LD_ADDR_LOC 18
8727: PUSH
8728: EMPTY
8729: ST_TO_ADDR
// end ; 5 :
8730: GO 9815
8732: LD_INT 5
8734: DOUBLE
8735: EQUAL
8736: IFTRUE 8740
8738: GO 8989
8740: POP
// begin def_base_level := 0 ;
8741: LD_ADDR_EXP 43
8745: PUSH
8746: LD_INT 0
8748: ST_TO_ADDR
// def_amount_of_people := 0 ;
8749: LD_ADDR_EXP 44
8753: PUSH
8754: LD_INT 0
8756: ST_TO_ADDR
// def_skill_level := 0 ;
8757: LD_ADDR_EXP 45
8761: PUSH
8762: LD_INT 0
8764: ST_TO_ADDR
// def_starting_resources := 0 ;
8765: LD_ADDR_EXP 46
8769: PUSH
8770: LD_INT 0
8772: ST_TO_ADDR
// def_shipments_density := 0 ;
8773: LD_ADDR_EXP 47
8777: PUSH
8778: LD_INT 0
8780: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8781: LD_ADDR_EXP 48
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8789: LD_ADDR_EXP 49
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// def_shared_vision := 1 ;
8797: LD_ADDR_EXP 50
8801: PUSH
8802: LD_INT 1
8804: ST_TO_ADDR
// def_morale_flags := 0 ;
8805: LD_ADDR_EXP 51
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// def_siberite_detection := 0 ;
8813: LD_ADDR_EXP 52
8817: PUSH
8818: LD_INT 0
8820: ST_TO_ADDR
// def_people_respawning := 1 ;
8821: LD_ADDR_EXP 53
8825: PUSH
8826: LD_INT 1
8828: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8829: LD_ADDR_EXP 54
8833: PUSH
8834: LD_INT 1
8836: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8837: LD_ADDR_EXP 55
8841: PUSH
8842: LD_INT 0
8844: ST_TO_ADDR
// def_builduptime := 0 ;
8845: LD_ADDR_EXP 56
8849: PUSH
8850: LD_INT 0
8852: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8853: LD_ADDR_VAR 0 2
8857: PUSH
8858: LD_INT 10
8860: PUSH
8861: LD_INT 3
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8868: LD_ADDR_VAR 0 3
8872: PUSH
8873: LD_INT 12
8875: PUSH
8876: LD_INT 11
8878: PUSH
8879: LD_INT 14
8881: PUSH
8882: LD_INT 13
8884: PUSH
8885: LD_INT 5
8887: PUSH
8888: LD_INT 24
8890: PUSH
8891: LD_INT 21
8893: PUSH
8894: LD_INT 33
8896: PUSH
8897: LD_INT 36
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8911: LD_ADDR_LOC 19
8915: PUSH
8916: LD_INT 31
8918: PUSH
8919: EMPTY
8920: LIST
8921: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8922: LD_ADDR_LOC 20
8926: PUSH
8927: EMPTY
8928: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8929: LD_ADDR_LOC 21
8933: PUSH
8934: LD_INT 2
8936: PUSH
8937: EMPTY
8938: LIST
8939: ST_TO_ADDR
// Banned_Engines := [ ] ;
8940: LD_ADDR_LOC 22
8944: PUSH
8945: EMPTY
8946: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8947: LD_ADDR_LOC 17
8951: PUSH
8952: LD_INT 4
8954: PUSH
8955: EMPTY
8956: LIST
8957: PUSH
8958: LD_INT 31
8960: PUSH
8961: LD_INT 32
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
8972: LD_ADDR_LOC 18
8976: PUSH
8977: LD_INT 1
8979: PUSH
8980: LD_INT 1
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: ST_TO_ADDR
// end ; 6 :
8987: GO 9815
8989: LD_INT 6
8991: DOUBLE
8992: EQUAL
8993: IFTRUE 8997
8995: GO 9200
8997: POP
// begin def_base_level := 1 ;
8998: LD_ADDR_EXP 43
9002: PUSH
9003: LD_INT 1
9005: ST_TO_ADDR
// def_amount_of_people := 2 ;
9006: LD_ADDR_EXP 44
9010: PUSH
9011: LD_INT 2
9013: ST_TO_ADDR
// def_skill_level := 3 ;
9014: LD_ADDR_EXP 45
9018: PUSH
9019: LD_INT 3
9021: ST_TO_ADDR
// def_starting_resources := 3 ;
9022: LD_ADDR_EXP 46
9026: PUSH
9027: LD_INT 3
9029: ST_TO_ADDR
// def_shipments_density := 1 ;
9030: LD_ADDR_EXP 47
9034: PUSH
9035: LD_INT 1
9037: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9038: LD_ADDR_EXP 48
9042: PUSH
9043: LD_INT 0
9045: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9046: LD_ADDR_EXP 49
9050: PUSH
9051: LD_INT 1
9053: ST_TO_ADDR
// def_shared_vision := 1 ;
9054: LD_ADDR_EXP 50
9058: PUSH
9059: LD_INT 1
9061: ST_TO_ADDR
// def_morale_flags := 0 ;
9062: LD_ADDR_EXP 51
9066: PUSH
9067: LD_INT 0
9069: ST_TO_ADDR
// def_siberite_detection := 1 ;
9070: LD_ADDR_EXP 52
9074: PUSH
9075: LD_INT 1
9077: ST_TO_ADDR
// def_people_respawning := 2 ;
9078: LD_ADDR_EXP 53
9082: PUSH
9083: LD_INT 2
9085: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9086: LD_ADDR_EXP 54
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9094: LD_ADDR_EXP 55
9098: PUSH
9099: LD_INT 0
9101: ST_TO_ADDR
// def_builduptime := 1 ;
9102: LD_ADDR_EXP 56
9106: PUSH
9107: LD_INT 1
9109: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9110: LD_ADDR_VAR 0 2
9114: PUSH
9115: LD_INT 23
9117: PUSH
9118: EMPTY
9119: LIST
9120: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9121: LD_ADDR_VAR 0 3
9125: PUSH
9126: LD_INT 2
9128: PUSH
9129: LD_INT 37
9131: PUSH
9132: LD_INT 31
9134: PUSH
9135: LD_INT 32
9137: PUSH
9138: LD_INT 33
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9148: LD_ADDR_LOC 19
9152: PUSH
9153: EMPTY
9154: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9155: LD_ADDR_LOC 20
9159: PUSH
9160: EMPTY
9161: ST_TO_ADDR
// Banned_Controls := [ ] ;
9162: LD_ADDR_LOC 21
9166: PUSH
9167: EMPTY
9168: ST_TO_ADDR
// Banned_Engines := [ ] ;
9169: LD_ADDR_LOC 22
9173: PUSH
9174: EMPTY
9175: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9176: LD_ADDR_LOC 17
9180: PUSH
9181: EMPTY
9182: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9183: LD_ADDR_LOC 18
9187: PUSH
9188: EMPTY
9189: ST_TO_ADDR
// No_Mechs := true ;
9190: LD_ADDR_EXP 57
9194: PUSH
9195: LD_INT 1
9197: ST_TO_ADDR
// end ; 7 :
9198: GO 9815
9200: LD_INT 7
9202: DOUBLE
9203: EQUAL
9204: IFTRUE 9208
9206: GO 9406
9208: POP
// begin def_base_level := 1 ;
9209: LD_ADDR_EXP 43
9213: PUSH
9214: LD_INT 1
9216: ST_TO_ADDR
// def_amount_of_people := 2 ;
9217: LD_ADDR_EXP 44
9221: PUSH
9222: LD_INT 2
9224: ST_TO_ADDR
// def_skill_level := 3 ;
9225: LD_ADDR_EXP 45
9229: PUSH
9230: LD_INT 3
9232: ST_TO_ADDR
// def_starting_resources := 3 ;
9233: LD_ADDR_EXP 46
9237: PUSH
9238: LD_INT 3
9240: ST_TO_ADDR
// def_shipments_density := 1 ;
9241: LD_ADDR_EXP 47
9245: PUSH
9246: LD_INT 1
9248: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9249: LD_ADDR_EXP 48
9253: PUSH
9254: LD_INT 1
9256: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9257: LD_ADDR_EXP 49
9261: PUSH
9262: LD_INT 2
9264: ST_TO_ADDR
// def_shared_vision := 1 ;
9265: LD_ADDR_EXP 50
9269: PUSH
9270: LD_INT 1
9272: ST_TO_ADDR
// def_morale_flags := 0 ;
9273: LD_ADDR_EXP 51
9277: PUSH
9278: LD_INT 0
9280: ST_TO_ADDR
// def_siberite_detection := 1 ;
9281: LD_ADDR_EXP 52
9285: PUSH
9286: LD_INT 1
9288: ST_TO_ADDR
// def_people_respawning := 0 ;
9289: LD_ADDR_EXP 53
9293: PUSH
9294: LD_INT 0
9296: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9297: LD_ADDR_EXP 54
9301: PUSH
9302: LD_INT 1
9304: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9305: LD_ADDR_EXP 55
9309: PUSH
9310: LD_INT 0
9312: ST_TO_ADDR
// def_builduptime := 3 ;
9313: LD_ADDR_EXP 56
9317: PUSH
9318: LD_INT 3
9320: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9321: LD_ADDR_VAR 0 2
9325: PUSH
9326: LD_INT 23
9328: PUSH
9329: EMPTY
9330: LIST
9331: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9332: LD_ADDR_VAR 0 3
9336: PUSH
9337: LD_INT 37
9339: PUSH
9340: EMPTY
9341: LIST
9342: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9343: LD_ADDR_LOC 19
9347: PUSH
9348: EMPTY
9349: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9350: LD_ADDR_LOC 20
9354: PUSH
9355: EMPTY
9356: ST_TO_ADDR
// Banned_Controls := [ ] ;
9357: LD_ADDR_LOC 21
9361: PUSH
9362: EMPTY
9363: ST_TO_ADDR
// Banned_Engines := [ ] ;
9364: LD_ADDR_LOC 22
9368: PUSH
9369: EMPTY
9370: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9371: LD_ADDR_LOC 17
9375: PUSH
9376: LD_INT 31
9378: PUSH
9379: LD_INT 32
9381: PUSH
9382: LD_INT 33
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: PUSH
9390: EMPTY
9391: LIST
9392: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9393: LD_ADDR_LOC 18
9397: PUSH
9398: LD_INT 10
9400: PUSH
9401: EMPTY
9402: LIST
9403: ST_TO_ADDR
// end ; 8 :
9404: GO 9815
9406: LD_INT 8
9408: DOUBLE
9409: EQUAL
9410: IFTRUE 9414
9412: GO 9814
9414: POP
// begin def_base_level := 0 ;
9415: LD_ADDR_EXP 43
9419: PUSH
9420: LD_INT 0
9422: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9423: LD_ADDR_EXP 44
9427: PUSH
9428: LD_INT 0
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 12
9438: ST_TO_ADDR
// def_skill_level := 0 ;
9439: LD_ADDR_EXP 45
9443: PUSH
9444: LD_INT 0
9446: ST_TO_ADDR
// def_starting_resources := 2 ;
9447: LD_ADDR_EXP 46
9451: PUSH
9452: LD_INT 2
9454: ST_TO_ADDR
// def_shipments_density := 1 ;
9455: LD_ADDR_EXP 47
9459: PUSH
9460: LD_INT 1
9462: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9463: LD_ADDR_EXP 48
9467: PUSH
9468: LD_INT 0
9470: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9471: LD_ADDR_EXP 49
9475: PUSH
9476: LD_INT 0
9478: ST_TO_ADDR
// def_shared_vision := 1 ;
9479: LD_ADDR_EXP 50
9483: PUSH
9484: LD_INT 1
9486: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9487: LD_ADDR_EXP 51
9491: PUSH
9492: LD_INT 0
9494: PPUSH
9495: LD_INT 2
9497: PPUSH
9498: CALL_OW 12
9502: ST_TO_ADDR
// def_siberite_detection := 0 ;
9503: LD_ADDR_EXP 52
9507: PUSH
9508: LD_INT 0
9510: ST_TO_ADDR
// def_people_respawning := 0 ;
9511: LD_ADDR_EXP 53
9515: PUSH
9516: LD_INT 0
9518: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9519: LD_ADDR_EXP 54
9523: PUSH
9524: LD_INT 2
9526: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9527: LD_ADDR_EXP 55
9531: PUSH
9532: LD_INT 0
9534: ST_TO_ADDR
// def_builduptime := 0 ;
9535: LD_ADDR_EXP 56
9539: PUSH
9540: LD_INT 0
9542: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9543: LD_ADDR_VAR 0 2
9547: PUSH
9548: LD_INT 23
9550: PUSH
9551: LD_INT 20
9553: PUSH
9554: LD_INT 40
9556: PUSH
9557: LD_INT 47
9559: PUSH
9560: LD_INT 46
9562: PUSH
9563: LD_INT 39
9565: PUSH
9566: LD_INT 71
9568: PUSH
9569: LD_INT 34
9571: PUSH
9572: LD_INT 41
9574: PUSH
9575: LD_INT 44
9577: PUSH
9578: LD_INT 17
9580: PUSH
9581: LD_INT 16
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9598: LD_ADDR_VAR 0 3
9602: PUSH
9603: LD_INT 37
9605: PUSH
9606: LD_INT 5
9608: PUSH
9609: LD_INT 13
9611: PUSH
9612: LD_INT 34
9614: PUSH
9615: LD_INT 12
9617: PUSH
9618: LD_INT 15
9620: PUSH
9621: LD_INT 11
9623: PUSH
9624: LD_INT 14
9626: PUSH
9627: LD_INT 29
9629: PUSH
9630: LD_INT 30
9632: PUSH
9633: LD_INT 28
9635: PUSH
9636: LD_INT 24
9638: PUSH
9639: LD_INT 25
9641: PUSH
9642: LD_INT 20
9644: PUSH
9645: LD_INT 21
9647: PUSH
9648: LD_INT 22
9650: PUSH
9651: LD_INT 36
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9673: LD_ADDR_LOC 19
9677: PUSH
9678: EMPTY
9679: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9680: LD_ADDR_LOC 20
9684: PUSH
9685: LD_INT 14
9687: PUSH
9688: EMPTY
9689: LIST
9690: ST_TO_ADDR
// Banned_Controls := [ ] ;
9691: LD_ADDR_LOC 21
9695: PUSH
9696: EMPTY
9697: ST_TO_ADDR
// Banned_Engines := [ ] ;
9698: LD_ADDR_LOC 22
9702: PUSH
9703: EMPTY
9704: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9705: LD_ADDR_LOC 17
9709: PUSH
9710: LD_INT 31
9712: PUSH
9713: LD_INT 32
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 4
9722: PUSH
9723: EMPTY
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9730: LD_ADDR_LOC 18
9734: PUSH
9735: LD_INT 2
9737: PUSH
9738: LD_INT 1
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: ST_TO_ADDR
// for i := 1 to 8 do
9745: LD_ADDR_VAR 0 4
9749: PUSH
9750: DOUBLE
9751: LD_INT 1
9753: DEC
9754: ST_TO_ADDR
9755: LD_INT 8
9757: PUSH
9758: FOR_TO
9759: IFFALSE 9810
// if ( Side_Nations [ i ] = 3 ) then
9761: LD_EXP 22
9765: PUSH
9766: LD_VAR 0 4
9770: ARRAY
9771: PUSH
9772: LD_INT 3
9774: EQUAL
9775: IFFALSE 9808
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9777: LD_ADDR_EXP 22
9781: PUSH
9782: LD_EXP 22
9786: PPUSH
9787: LD_VAR 0 4
9791: PPUSH
9792: LD_INT 1
9794: PPUSH
9795: LD_INT 2
9797: PPUSH
9798: CALL_OW 12
9802: PPUSH
9803: CALL_OW 1
9807: ST_TO_ADDR
9808: GO 9758
9810: POP
9811: POP
// end ; end ;
9812: GO 9815
9814: POP
// for i := 1 to 8 do
9815: LD_ADDR_VAR 0 4
9819: PUSH
9820: DOUBLE
9821: LD_INT 1
9823: DEC
9824: ST_TO_ADDR
9825: LD_INT 8
9827: PUSH
9828: FOR_TO
9829: IFFALSE 9913
// if Side_Positions [ i ] then
9831: LD_EXP 21
9835: PUSH
9836: LD_VAR 0 4
9840: ARRAY
9841: IFFALSE 9911
// begin for j in Unavailable_Techs do
9843: LD_ADDR_VAR 0 5
9847: PUSH
9848: LD_VAR 0 2
9852: PUSH
9853: FOR_IN
9854: IFFALSE 9875
// SetTech ( j , i , 0 ) ;
9856: LD_VAR 0 5
9860: PPUSH
9861: LD_VAR 0 4
9865: PPUSH
9866: LD_INT 0
9868: PPUSH
9869: CALL_OW 322
9873: GO 9853
9875: POP
9876: POP
// for j in Unavailable_Builds do
9877: LD_ADDR_VAR 0 5
9881: PUSH
9882: LD_VAR 0 3
9886: PUSH
9887: FOR_IN
9888: IFFALSE 9909
// SetRestrict ( j , i , 0 ) ;
9890: LD_VAR 0 5
9894: PPUSH
9895: LD_VAR 0 4
9899: PPUSH
9900: LD_INT 0
9902: PPUSH
9903: CALL_OW 324
9907: GO 9887
9909: POP
9910: POP
// end ;
9911: GO 9828
9913: POP
9914: POP
// end ;
9915: LD_VAR 0 1
9919: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9920: LD_INT 0
9922: PPUSH
9923: PPUSH
9924: PPUSH
9925: PPUSH
9926: PPUSH
9927: PPUSH
9928: PPUSH
// for i := 1 to Restricted_Builds do
9929: LD_ADDR_VAR 0 2
9933: PUSH
9934: DOUBLE
9935: LD_INT 1
9937: DEC
9938: ST_TO_ADDR
9939: LD_LOC 17
9943: PUSH
9944: FOR_TO
9945: IFFALSE 10255
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9947: LD_LOC 17
9951: PUSH
9952: LD_VAR 0 2
9956: ARRAY
9957: PUSH
9958: LD_INT 1
9960: ARRAY
9961: PUSH
9962: LD_INT 31
9964: DOUBLE
9965: EQUAL
9966: IFTRUE 9982
9968: LD_INT 32
9970: DOUBLE
9971: EQUAL
9972: IFTRUE 9982
9974: LD_INT 33
9976: DOUBLE
9977: EQUAL
9978: IFTRUE 9982
9980: GO 9993
9982: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
9983: LD_ADDR_VAR 0 6
9987: PUSH
9988: LD_STRING #Turrets
9990: ST_TO_ADDR
9991: GO 10038
9993: LD_INT 4
9995: DOUBLE
9996: EQUAL
9997: IFTRUE 10007
9999: LD_INT 5
10001: DOUBLE
10002: EQUAL
10003: IFTRUE 10007
10005: GO 10018
10007: POP
// btype := #Armouries ; b_Behemoth :
10008: LD_ADDR_VAR 0 6
10012: PUSH
10013: LD_STRING #Armouries
10015: ST_TO_ADDR
10016: GO 10038
10018: LD_INT 37
10020: DOUBLE
10021: EQUAL
10022: IFTRUE 10026
10024: GO 10037
10026: POP
// btype := #Behemoths ; end ;
10027: LD_ADDR_VAR 0 6
10031: PUSH
10032: LD_STRING #Behemoths
10034: ST_TO_ADDR
10035: GO 10038
10037: POP
// list := [ ] ;
10038: LD_ADDR_VAR 0 7
10042: PUSH
10043: EMPTY
10044: ST_TO_ADDR
// for j := 1 to 8 do
10045: LD_ADDR_VAR 0 3
10049: PUSH
10050: DOUBLE
10051: LD_INT 1
10053: DEC
10054: ST_TO_ADDR
10055: LD_INT 8
10057: PUSH
10058: FOR_TO
10059: IFFALSE 10152
// if Side_Positions [ j ] then
10061: LD_EXP 21
10065: PUSH
10066: LD_VAR 0 3
10070: ARRAY
10071: IFFALSE 10150
// begin amount := 0 ;
10073: LD_ADDR_VAR 0 5
10077: PUSH
10078: LD_INT 0
10080: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10081: LD_ADDR_VAR 0 4
10085: PUSH
10086: LD_LOC 17
10090: PUSH
10091: LD_VAR 0 2
10095: ARRAY
10096: PUSH
10097: FOR_IN
10098: IFFALSE 10146
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10100: LD_ADDR_VAR 0 5
10104: PUSH
10105: LD_VAR 0 5
10109: PUSH
10110: LD_INT 22
10112: PUSH
10113: LD_VAR 0 3
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PUSH
10122: LD_INT 30
10124: PUSH
10125: LD_VAR 0 4
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PPUSH
10138: CALL_OW 69
10142: PLUS
10143: ST_TO_ADDR
10144: GO 10097
10146: POP
10147: POP
// break ;
10148: GO 10152
// end ;
10150: GO 10058
10152: POP
10153: POP
// list := [ ] ;
10154: LD_ADDR_VAR 0 7
10158: PUSH
10159: EMPTY
10160: ST_TO_ADDR
// for j := 1 to 8 do
10161: LD_ADDR_VAR 0 3
10165: PUSH
10166: DOUBLE
10167: LD_INT 1
10169: DEC
10170: ST_TO_ADDR
10171: LD_INT 8
10173: PUSH
10174: FOR_TO
10175: IFFALSE 10195
// list := list ^ amount ;
10177: LD_ADDR_VAR 0 7
10181: PUSH
10182: LD_VAR 0 7
10186: PUSH
10187: LD_VAR 0 5
10191: ADD
10192: ST_TO_ADDR
10193: GO 10174
10195: POP
10196: POP
// Already_Built := Already_Built ^ [ list ] ;
10197: LD_ADDR_LOC 23
10201: PUSH
10202: LD_LOC 23
10206: PUSH
10207: LD_VAR 0 7
10211: PUSH
10212: EMPTY
10213: LIST
10214: ADD
10215: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10216: LD_ADDR_LOC 24
10220: PUSH
10221: LD_LOC 24
10225: PUSH
10226: LD_VAR 0 6
10230: PUSH
10231: LD_VAR 0 5
10235: PUSH
10236: LD_LOC 18
10240: PUSH
10241: LD_VAR 0 2
10245: ARRAY
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: ADD
10252: ST_TO_ADDR
// end ;
10253: GO 9944
10255: POP
10256: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10257: LD_ADDR_LOC 25
10261: PUSH
10262: LD_INT 0
10264: PUSH
10265: LD_INT 0
10267: PUSH
10268: LD_INT 0
10270: PUSH
10271: LD_INT 0
10273: PUSH
10274: LD_INT 0
10276: PUSH
10277: LD_INT 0
10279: PUSH
10280: LD_INT 0
10282: PUSH
10283: LD_INT 0
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: ST_TO_ADDR
// if Limits_Info then
10296: LD_LOC 24
10300: IFFALSE 10316
// Limits_Info := #Limits ^ Limits_Info ;
10302: LD_ADDR_LOC 24
10306: PUSH
10307: LD_STRING #Limits
10309: PUSH
10310: LD_LOC 24
10314: ADD
10315: ST_TO_ADDR
// end ;
10316: LD_VAR 0 1
10320: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10321: LD_INT 0
10323: PPUSH
10324: PPUSH
10325: PPUSH
10326: PPUSH
// for i := 1 to Restricted_Builds do
10327: LD_ADDR_VAR 0 7
10331: PUSH
10332: DOUBLE
10333: LD_INT 1
10335: DEC
10336: ST_TO_ADDR
10337: LD_LOC 17
10341: PUSH
10342: FOR_TO
10343: IFFALSE 10766
// if BType in Restricted_Builds [ i ] then
10345: LD_VAR 0 2
10349: PUSH
10350: LD_LOC 17
10354: PUSH
10355: LD_VAR 0 7
10359: ARRAY
10360: IN
10361: IFFALSE 10764
// begin if old_side then
10363: LD_VAR 0 4
10367: IFFALSE 10493
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10369: LD_LOC 23
10373: PUSH
10374: LD_VAR 0 7
10378: ARRAY
10379: PUSH
10380: LD_VAR 0 3
10384: ARRAY
10385: PUSH
10386: LD_VAR 0 5
10390: PLUS
10391: PUSH
10392: LD_LOC 18
10396: PUSH
10397: LD_VAR 0 7
10401: ARRAY
10402: GREATER
10403: IFFALSE 10429
// begin SetSide ( un , old_side ) ;
10405: LD_VAR 0 1
10409: PPUSH
10410: LD_VAR 0 4
10414: PPUSH
10415: CALL_OW 235
// count := 0 ;
10419: LD_ADDR_VAR 0 5
10423: PUSH
10424: LD_INT 0
10426: ST_TO_ADDR
// end else
10427: GO 10493
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10429: LD_ADDR_LOC 23
10433: PUSH
10434: LD_LOC 23
10438: PPUSH
10439: LD_VAR 0 7
10443: PPUSH
10444: LD_LOC 23
10448: PUSH
10449: LD_VAR 0 7
10453: ARRAY
10454: PPUSH
10455: LD_VAR 0 4
10459: PPUSH
10460: LD_LOC 23
10464: PUSH
10465: LD_VAR 0 7
10469: ARRAY
10470: PUSH
10471: LD_VAR 0 4
10475: ARRAY
10476: PUSH
10477: LD_VAR 0 5
10481: MINUS
10482: PPUSH
10483: CALL_OW 1
10487: PPUSH
10488: CALL_OW 1
10492: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10493: LD_ADDR_LOC 23
10497: PUSH
10498: LD_LOC 23
10502: PPUSH
10503: LD_VAR 0 7
10507: PPUSH
10508: LD_LOC 23
10512: PUSH
10513: LD_VAR 0 7
10517: ARRAY
10518: PPUSH
10519: LD_VAR 0 3
10523: PPUSH
10524: LD_LOC 23
10528: PUSH
10529: LD_VAR 0 7
10533: ARRAY
10534: PUSH
10535: LD_VAR 0 3
10539: ARRAY
10540: PUSH
10541: LD_VAR 0 5
10545: PLUS
10546: PPUSH
10547: CALL_OW 1
10551: PPUSH
10552: CALL_OW 1
10556: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10557: LD_VAR 0 5
10561: PUSH
10562: LD_INT 0
10564: NONEQUAL
10565: PUSH
10566: LD_VAR 0 3
10570: PUSH
10571: LD_OWVAR 2
10575: EQUAL
10576: AND
10577: IFFALSE 10620
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10579: LD_ADDR_LOC 24
10583: PUSH
10584: LD_LOC 24
10588: PPUSH
10589: LD_INT 3
10591: PUSH
10592: LD_VAR 0 7
10596: MUL
10597: PPUSH
10598: LD_LOC 23
10602: PUSH
10603: LD_VAR 0 7
10607: ARRAY
10608: PUSH
10609: LD_VAR 0 3
10613: ARRAY
10614: PPUSH
10615: CALL_OW 1
10619: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10620: LD_LOC 23
10624: PUSH
10625: LD_VAR 0 7
10629: ARRAY
10630: PUSH
10631: LD_VAR 0 3
10635: ARRAY
10636: PUSH
10637: LD_LOC 18
10641: PUSH
10642: LD_VAR 0 7
10646: ARRAY
10647: GREATER
10648: IFFALSE 10675
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10650: LD_ADDR_LOC 25
10654: PUSH
10655: LD_LOC 25
10659: PPUSH
10660: LD_VAR 0 3
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 1
10672: ST_TO_ADDR
// end else
10673: GO 10762
// begin for j := 1 to Restricted_Builds do
10675: LD_ADDR_VAR 0 8
10679: PUSH
10680: DOUBLE
10681: LD_INT 1
10683: DEC
10684: ST_TO_ADDR
10685: LD_LOC 17
10689: PUSH
10690: FOR_TO
10691: IFFALSE 10735
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10693: LD_LOC 23
10697: PUSH
10698: LD_VAR 0 8
10702: ARRAY
10703: PUSH
10704: LD_VAR 0 3
10708: ARRAY
10709: PUSH
10710: LD_LOC 18
10714: PUSH
10715: LD_VAR 0 8
10719: ARRAY
10720: GREATER
10721: IFFALSE 10733
// begin Is_Cheater := true ;
10723: LD_ADDR_VAR 0 9
10727: PUSH
10728: LD_INT 1
10730: ST_TO_ADDR
// break ;
10731: GO 10735
// end ;
10733: GO 10690
10735: POP
10736: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10737: LD_ADDR_LOC 25
10741: PUSH
10742: LD_LOC 25
10746: PPUSH
10747: LD_VAR 0 3
10751: PPUSH
10752: LD_VAR 0 9
10756: PPUSH
10757: CALL_OW 1
10761: ST_TO_ADDR
// end ; break ;
10762: GO 10766
// end ;
10764: GO 10342
10766: POP
10767: POP
// end ;
10768: LD_VAR 0 6
10772: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10773: LD_VAR 0 5
10777: PUSH
10778: LD_LOC 19
10782: IN
10783: PUSH
10784: LD_VAR 0 2
10788: PUSH
10789: LD_LOC 20
10793: IN
10794: OR
10795: PUSH
10796: LD_VAR 0 4
10800: PUSH
10801: LD_LOC 21
10805: IN
10806: OR
10807: PUSH
10808: LD_VAR 0 3
10812: PUSH
10813: LD_LOC 22
10817: IN
10818: OR
10819: IFFALSE 10830
// ComCancel ( factory ) ;
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 127
// end ;
10830: PPOPN 5
10832: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10833: LD_VAR 0 2
10837: PUSH
10838: LD_LOC 19
10842: IN
10843: IFFALSE 10854
// ComCancel ( building ) ;
10845: LD_VAR 0 1
10849: PPUSH
10850: CALL_OW 127
// end ; end_of_file
10854: PPOPN 2
10856: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
10857: LD_INT 0
10859: PPUSH
10860: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10861: LD_ADDR_VAR 0 2
10865: PUSH
10866: LD_STRING #Multi1x1-Time
10868: PUSH
10869: LD_OWVAR 1
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: ST_TO_ADDR
// if WaitServerStrings then
10878: LD_EXP 59
10882: IFFALSE 10900
// AllStrings = AllStrings ^ WaitServerStrings ;
10884: LD_ADDR_VAR 0 2
10888: PUSH
10889: LD_VAR 0 2
10893: PUSH
10894: LD_EXP 59
10898: ADD
10899: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10900: LD_INT 0
10902: PUSH
10903: LD_EXP 16
10907: PUSH
10908: LD_OWVAR 1
10912: MINUS
10913: LESSEQUAL
10914: IFFALSE 10945
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10916: LD_ADDR_VAR 0 2
10920: PUSH
10921: LD_VAR 0 2
10925: PUSH
10926: LD_STRING #allowedsibbomb
10928: PUSH
10929: LD_EXP 16
10933: PUSH
10934: LD_OWVAR 1
10938: MINUS
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: ADD
10944: ST_TO_ADDR
// if ( ExtraStrings ) then
10945: LD_EXP 58
10949: IFFALSE 10971
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10951: LD_ADDR_VAR 0 2
10955: PUSH
10956: LD_VAR 0 2
10960: PUSH
10961: LD_STRING 
10963: ADD
10964: PUSH
10965: LD_EXP 58
10969: ADD
10970: ST_TO_ADDR
// if ( Display_kings ) and not isSGUI then
10971: LD_EXP 60
10975: PUSH
10976: LD_OWVAR 83
10980: NOT
10981: AND
10982: IFFALSE 11000
// AllStrings = AllStrings ^ Display_kings ;
10984: LD_ADDR_VAR 0 2
10988: PUSH
10989: LD_VAR 0 2
10993: PUSH
10994: LD_EXP 60
10998: ADD
10999: ST_TO_ADDR
// if ( LimitsStrings ) then
11000: CALL 7697 0 0
11004: IFFALSE 11026
// AllStrings := AllStrings ^  ^ LimitsStrings ;
11006: LD_ADDR_VAR 0 2
11010: PUSH
11011: LD_VAR 0 2
11015: PUSH
11016: LD_STRING 
11018: ADD
11019: PUSH
11020: CALL 7697 0 0
11024: ADD
11025: ST_TO_ADDR
// Display_Strings := AllStrings ;
11026: LD_ADDR_OWVAR 47
11030: PUSH
11031: LD_VAR 0 2
11035: ST_TO_ADDR
// end ;
11036: LD_VAR 0 1
11040: RET
// every 0 0$1 do
11041: GO 11043
11043: DISABLE
// begin ShowTimer ;
11044: CALL 10857 0 0
// enable ;
11048: ENABLE
// end ; end_of_file
11049: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
11050: LD_INT 0
11052: PPUSH
11053: PPUSH
11054: PPUSH
// sharedPoints1 = [ ] ;
11055: LD_ADDR_LOC 26
11059: PUSH
11060: EMPTY
11061: ST_TO_ADDR
// sharedPoints2 = [ ] ;
11062: LD_ADDR_LOC 27
11066: PUSH
11067: EMPTY
11068: ST_TO_ADDR
// sharedPoints3 = [ ] ;
11069: LD_ADDR_LOC 28
11073: PUSH
11074: EMPTY
11075: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: DOUBLE
11082: LD_INT 1
11084: DEC
11085: ST_TO_ADDR
11086: LD_EXP 21
11090: PUSH
11091: LD_INT 0
11093: PLUS
11094: PUSH
11095: FOR_TO
11096: IFFALSE 11198
// begin if not Side_Positions [ i ] = 0 then
11098: LD_EXP 21
11102: PUSH
11103: LD_VAR 0 2
11107: ARRAY
11108: PUSH
11109: LD_INT 0
11111: EQUAL
11112: NOT
11113: IFFALSE 11127
// SetMultiScore ( i , 0 ) ;
11115: LD_VAR 0 2
11119: PPUSH
11120: LD_INT 0
11122: PPUSH
11123: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
11127: LD_ADDR_LOC 26
11131: PUSH
11132: LD_LOC 26
11136: PPUSH
11137: LD_VAR 0 2
11141: PPUSH
11142: LD_INT 0
11144: PPUSH
11145: CALL_OW 1
11149: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
11150: LD_ADDR_LOC 27
11154: PUSH
11155: LD_LOC 27
11159: PPUSH
11160: LD_VAR 0 2
11164: PPUSH
11165: LD_INT 0
11167: PPUSH
11168: CALL_OW 1
11172: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
11173: LD_ADDR_LOC 28
11177: PUSH
11178: LD_LOC 28
11182: PPUSH
11183: LD_VAR 0 2
11187: PPUSH
11188: LD_INT 0
11190: PPUSH
11191: CALL_OW 1
11195: ST_TO_ADDR
// end ;
11196: GO 11095
11198: POP
11199: POP
// pointGame = true ;
11200: LD_ADDR_LOC 29
11204: PUSH
11205: LD_INT 1
11207: ST_TO_ADDR
// end ;
11208: LD_VAR 0 1
11212: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
11213: LD_LOC 29
11217: IFFALSE 11628
11219: GO 11221
11221: DISABLE
11222: LD_INT 0
11224: PPUSH
11225: PPUSH
11226: PPUSH
11227: PPUSH
11228: PPUSH
11229: PPUSH
11230: PPUSH
11231: PPUSH
11232: PPUSH
11233: PPUSH
11234: PPUSH
11235: PPUSH
11236: PPUSH
// begin if isSGUI then
11237: LD_OWVAR 83
11241: IFFALSE 11628
// begin if Teams [ 1 ] then
11243: LD_EXP 19
11247: PUSH
11248: LD_INT 1
11250: ARRAY
11251: IFFALSE 11263
// red = true else
11253: LD_ADDR_VAR 0 2
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
11261: GO 11271
// red = false ;
11263: LD_ADDR_VAR 0 2
11267: PUSH
11268: LD_INT 0
11270: ST_TO_ADDR
// if Teams [ 2 ] then
11271: LD_EXP 19
11275: PUSH
11276: LD_INT 2
11278: ARRAY
11279: IFFALSE 11291
// blue = true else
11281: LD_ADDR_VAR 0 3
11285: PUSH
11286: LD_INT 1
11288: ST_TO_ADDR
11289: GO 11299
// blue = false ;
11291: LD_ADDR_VAR 0 3
11295: PUSH
11296: LD_INT 0
11298: ST_TO_ADDR
// if Teams [ 3 ] then
11299: LD_EXP 19
11303: PUSH
11304: LD_INT 3
11306: ARRAY
11307: IFFALSE 11319
// yel = true else
11309: LD_ADDR_VAR 0 4
11313: PUSH
11314: LD_INT 1
11316: ST_TO_ADDR
11317: GO 11327
// yel = false ;
11319: LD_ADDR_VAR 0 4
11323: PUSH
11324: LD_INT 0
11326: ST_TO_ADDR
// if Teams [ 4 ] then
11327: LD_EXP 19
11331: PUSH
11332: LD_INT 4
11334: ARRAY
11335: IFFALSE 11347
// green = true else
11337: LD_ADDR_VAR 0 5
11341: PUSH
11342: LD_INT 1
11344: ST_TO_ADDR
11345: GO 11355
// green = false ;
11347: LD_ADDR_VAR 0 5
11351: PUSH
11352: LD_INT 0
11354: ST_TO_ADDR
// if def_public_score then
11355: LD_EXP 1
11359: IFFALSE 11371
// p = true else
11361: LD_ADDR_VAR 0 12
11365: PUSH
11366: LD_INT 1
11368: ST_TO_ADDR
11369: GO 11379
// p = false ;
11371: LD_ADDR_VAR 0 12
11375: PUSH
11376: LD_INT 0
11378: ST_TO_ADDR
// if team_game then
11379: LD_EXP 23
11383: IFFALSE 11464
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
11385: LD_ADDR_VAR 0 13
11389: PUSH
11390: LD_INT 3
11392: PUSH
11393: LD_INT 1
11395: PUSH
11396: LD_INT 2
11398: PUSH
11399: LD_INT 7
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: PUSH
11408: LD_EXP 32
11412: ARRAY
11413: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
11414: LD_ADDR_VAR 0 10
11418: PUSH
11419: LD_STRING {
11421: PUSH
11422: LD_VAR 0 3
11426: STR
11427: PUSH
11428: LD_STRING ,
11430: STR
11431: PUSH
11432: LD_VAR 0 4
11436: STR
11437: PUSH
11438: LD_STRING ,
11440: STR
11441: PUSH
11442: LD_VAR 0 2
11446: STR
11447: PUSH
11448: LD_STRING ,0,0,0,
11450: STR
11451: PUSH
11452: LD_VAR 0 5
11456: STR
11457: PUSH
11458: LD_STRING ,0}
11460: STR
11461: ST_TO_ADDR
// end else
11462: GO 11564
// begin you = your_side ;
11464: LD_ADDR_VAR 0 13
11468: PUSH
11469: LD_OWVAR 2
11473: ST_TO_ADDR
// s = { ;
11474: LD_ADDR_VAR 0 10
11478: PUSH
11479: LD_STRING {
11481: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
11482: LD_ADDR_VAR 0 1
11486: PUSH
11487: DOUBLE
11488: LD_INT 1
11490: DEC
11491: ST_TO_ADDR
11492: LD_EXP 21
11496: PUSH
11497: LD_INT 0
11499: PLUS
11500: PUSH
11501: FOR_TO
11502: IFFALSE 11548
// if side_positions [ i ] then
11504: LD_EXP 21
11508: PUSH
11509: LD_VAR 0 1
11513: ARRAY
11514: IFFALSE 11532
// s = s & 1, else
11516: LD_ADDR_VAR 0 10
11520: PUSH
11521: LD_VAR 0 10
11525: PUSH
11526: LD_STRING 1,
11528: STR
11529: ST_TO_ADDR
11530: GO 11546
// s = s & 0, ;
11532: LD_ADDR_VAR 0 10
11536: PUSH
11537: LD_VAR 0 10
11541: PUSH
11542: LD_STRING 0,
11544: STR
11545: ST_TO_ADDR
11546: GO 11501
11548: POP
11549: POP
// s = s & } ;
11550: LD_ADDR_VAR 0 10
11554: PUSH
11555: LD_VAR 0 10
11559: PUSH
11560: LD_STRING }
11562: STR
11563: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
11564: LD_STRING initScore(
11566: PUSH
11567: LD_VAR 0 10
11571: STR
11572: PUSH
11573: LD_STRING ,
11575: STR
11576: PUSH
11577: LD_VAR 0 12
11581: STR
11582: PUSH
11583: LD_STRING ,
11585: STR
11586: PUSH
11587: LD_VAR 0 13
11591: STR
11592: PUSH
11593: LD_STRING  );
11595: STR
11596: PPUSH
11597: CALL_OW 559
// if game_type = 3 then
11601: LD_EXP 41
11605: PUSH
11606: LD_INT 3
11608: EQUAL
11609: IFFALSE 11628
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
11611: LD_STRING AddScorePoints(2,2,
11613: PUSH
11614: LD_EXP 30
11618: STR
11619: PUSH
11620: LD_STRING  );
11622: STR
11623: PPUSH
11624: CALL_OW 559
// end ; end ;
11628: PPOPN 13
11630: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
11631: LD_INT 0
11633: PPUSH
11634: PPUSH
// case typ of 1 :
11635: LD_VAR 0 3
11639: PUSH
11640: LD_INT 1
11642: DOUBLE
11643: EQUAL
11644: IFTRUE 11648
11646: GO 11676
11648: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
11649: LD_ADDR_LOC 26
11653: PUSH
11654: LD_LOC 26
11658: PPUSH
11659: LD_VAR 0 1
11663: PPUSH
11664: LD_VAR 0 2
11668: PPUSH
11669: CALL_OW 1
11673: ST_TO_ADDR
11674: GO 11749
11676: LD_INT 2
11678: DOUBLE
11679: EQUAL
11680: IFTRUE 11684
11682: GO 11712
11684: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
11685: LD_ADDR_LOC 27
11689: PUSH
11690: LD_LOC 27
11694: PPUSH
11695: LD_VAR 0 1
11699: PPUSH
11700: LD_VAR 0 2
11704: PPUSH
11705: CALL_OW 1
11709: ST_TO_ADDR
11710: GO 11749
11712: LD_INT 3
11714: DOUBLE
11715: EQUAL
11716: IFTRUE 11720
11718: GO 11748
11720: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
11721: LD_ADDR_LOC 28
11725: PUSH
11726: LD_LOC 28
11730: PPUSH
11731: LD_VAR 0 1
11735: PPUSH
11736: LD_VAR 0 2
11740: PPUSH
11741: CALL_OW 1
11745: ST_TO_ADDR
11746: GO 11749
11748: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
11749: LD_ADDR_VAR 0 5
11753: PUSH
11754: LD_LOC 26
11758: PUSH
11759: LD_VAR 0 1
11763: ARRAY
11764: PUSH
11765: LD_LOC 27
11769: PUSH
11770: LD_VAR 0 1
11774: ARRAY
11775: PLUS
11776: PUSH
11777: LD_LOC 28
11781: PUSH
11782: LD_VAR 0 1
11786: ARRAY
11787: PLUS
11788: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
11789: LD_VAR 0 1
11793: PPUSH
11794: LD_VAR 0 5
11798: PPUSH
11799: CALL_OW 506
// end ; end_of_file
11803: LD_VAR 0 4
11807: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11808: LD_INT 0
11810: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11811: LD_VAR 0 1
11815: PPUSH
11816: CALL_OW 255
11820: PUSH
11821: LD_VAR 0 4
11825: EQUAL
11826: IFFALSE 11845
// begin SetAchievement ( ACH_RAD ) ;
11828: LD_STRING ACH_RAD
11830: PPUSH
11831: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11835: LD_STRING ACH_NL
11837: PPUSH
11838: LD_INT 1
11840: PPUSH
11841: CALL_OW 564
// end end ;
11845: LD_VAR 0 5
11849: RET
// export function SA_Win ( side ) ; begin
11850: LD_INT 0
11852: PPUSH
// case side of 1 :
11853: LD_VAR 0 1
11857: PUSH
11858: LD_INT 1
11860: DOUBLE
11861: EQUAL
11862: IFTRUE 11866
11864: GO 11879
11866: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11867: LD_STRING ACH_AH
11869: PPUSH
11870: LD_INT 1
11872: PPUSH
11873: CALL_OW 564
11877: GO 12042
11879: LD_INT 2
11881: DOUBLE
11882: EQUAL
11883: IFTRUE 11887
11885: GO 11900
11887: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11888: LD_STRING ACH_E
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: CALL_OW 564
11898: GO 12042
11900: LD_INT 3
11902: DOUBLE
11903: EQUAL
11904: IFTRUE 11908
11906: GO 11921
11908: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11909: LD_STRING ACH_OOL
11911: PPUSH
11912: LD_INT 1
11914: PPUSH
11915: CALL_OW 564
11919: GO 12042
11921: LD_INT 1
11923: PUSH
11924: LD_INT 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: DOUBLE
11931: EQUAL
11932: IFTRUE 11936
11934: GO 11961
11936: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11937: LD_STRING ACH_AH
11939: PPUSH
11940: LD_REAL  5.00000000000000E-0001
11943: PPUSH
11944: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11948: LD_STRING ACH_E
11950: PPUSH
11951: LD_REAL  5.00000000000000E-0001
11954: PPUSH
11955: CALL_OW 564
// end ; [ 2 , 3 ] :
11959: GO 12042
11961: LD_INT 2
11963: PUSH
11964: LD_INT 3
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: DOUBLE
11971: EQUAL
11972: IFTRUE 11976
11974: GO 12001
11976: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11977: LD_STRING ACH_OOL
11979: PPUSH
11980: LD_REAL  5.00000000000000E-0001
11983: PPUSH
11984: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11988: LD_STRING ACH_E
11990: PPUSH
11991: LD_REAL  5.00000000000000E-0001
11994: PPUSH
11995: CALL_OW 564
// end ; [ 3 , 1 ] :
11999: GO 12042
12001: LD_INT 3
12003: PUSH
12004: LD_INT 1
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: DOUBLE
12011: EQUAL
12012: IFTRUE 12016
12014: GO 12041
12016: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12017: LD_STRING ACH_AH
12019: PPUSH
12020: LD_REAL  5.00000000000000E-0001
12023: PPUSH
12024: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12028: LD_STRING ACH_OOL
12030: PPUSH
12031: LD_REAL  5.00000000000000E-0001
12034: PPUSH
12035: CALL_OW 564
// end ; end ;
12039: GO 12042
12041: POP
// end ; end_of_file
12042: LD_VAR 0 2
12046: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
12047: LD_INT 0
12049: PPUSH
12050: PPUSH
// enable ( 98 ) ;
12051: LD_INT 98
12053: ENABLE_MARKED
// GameEnded = false ;
12054: LD_ADDR_LOC 31
12058: PUSH
12059: LD_INT 0
12061: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12062: LD_ADDR_LOC 30
12066: PUSH
12067: LD_INT 0
12069: PUSH
12070: LD_INT 0
12072: PUSH
12073: LD_INT 0
12075: PUSH
12076: LD_INT 0
12078: PUSH
12079: LD_INT 0
12081: PUSH
12082: LD_INT 0
12084: PUSH
12085: LD_INT 0
12087: PUSH
12088: LD_INT 0
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: ST_TO_ADDR
// unfoged = false ;
12101: LD_ADDR_LOC 32
12105: PUSH
12106: LD_INT 0
12108: ST_TO_ADDR
// for i = 1 to side_positions do
12109: LD_ADDR_VAR 0 2
12113: PUSH
12114: DOUBLE
12115: LD_INT 1
12117: DEC
12118: ST_TO_ADDR
12119: LD_EXP 21
12123: PUSH
12124: FOR_TO
12125: IFFALSE 12165
// if not side_positions [ i ] then
12127: LD_EXP 21
12131: PUSH
12132: LD_VAR 0 2
12136: ARRAY
12137: NOT
12138: IFFALSE 12163
// defaited = replace ( defaited , i , true ) ;
12140: LD_ADDR_LOC 30
12144: PUSH
12145: LD_LOC 30
12149: PPUSH
12150: LD_VAR 0 2
12154: PPUSH
12155: LD_INT 1
12157: PPUSH
12158: CALL_OW 1
12162: ST_TO_ADDR
12163: GO 12124
12165: POP
12166: POP
// end ;
12167: LD_VAR 0 1
12171: RET
// function CanWinLoose ; begin
12172: LD_INT 0
12174: PPUSH
// Result := true ;
12175: LD_ADDR_VAR 0 1
12179: PUSH
12180: LD_INT 1
12182: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12183: CALL_OW 518
12187: PUSH
12188: CALL_OW 519
12192: PUSH
12193: LD_INT 0
12195: GREATER
12196: AND
12197: IFFALSE 12207
// Result := false ;
12199: LD_ADDR_VAR 0 1
12203: PUSH
12204: LD_INT 0
12206: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12207: CALL_OW 531
12211: PUSH
12212: CALL_OW 519
12216: PUSH
12217: LD_INT 1
12219: GREATER
12220: AND
12221: IFFALSE 12231
// Result := false ;
12223: LD_ADDR_VAR 0 1
12227: PUSH
12228: LD_INT 0
12230: ST_TO_ADDR
// end ;
12231: LD_VAR 0 1
12235: RET
// export function HasPower ( i ) ; var k , h ; begin
12236: LD_INT 0
12238: PPUSH
12239: PPUSH
12240: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
12241: LD_VAR 0 1
12245: PPUSH
12246: CALL_OW 108
12250: NOT
12251: PUSH
12252: LD_EXP 20
12256: PUSH
12257: LD_VAR 0 1
12261: ARRAY
12262: NOT
12263: AND
12264: PUSH
12265: LD_OWVAR 4
12269: AND
12270: IFFALSE 12282
// begin result = false ;
12272: LD_ADDR_VAR 0 2
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// end else
12280: GO 12577
// case def_win_rules of 0 :
12282: LD_EXP 17
12286: PUSH
12287: LD_INT 0
12289: DOUBLE
12290: EQUAL
12291: IFTRUE 12295
12293: GO 12458
12295: POP
// if def_people_respawning then
12296: LD_EXP 53
12300: IFFALSE 12391
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
12302: LD_ADDR_VAR 0 2
12306: PUSH
12307: LD_INT 22
12309: PUSH
12310: LD_VAR 0 1
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 2
12321: PUSH
12322: LD_INT 21
12324: PUSH
12325: LD_INT 1
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 33
12334: PUSH
12335: LD_INT 3
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 33
12344: PUSH
12345: LD_INT 5
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 30
12354: PUSH
12355: LD_INT 0
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 30
12364: PUSH
12365: LD_INT 1
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PPUSH
12384: CALL_OW 69
12388: ST_TO_ADDR
12389: GO 12456
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
12391: LD_ADDR_VAR 0 2
12395: PUSH
12396: LD_INT 22
12398: PUSH
12399: LD_VAR 0 1
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: LD_INT 21
12413: PUSH
12414: LD_INT 1
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 33
12423: PUSH
12424: LD_INT 3
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 33
12433: PUSH
12434: LD_INT 5
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PPUSH
12451: CALL_OW 69
12455: ST_TO_ADDR
12456: GO 12577
12458: LD_INT 1
12460: DOUBLE
12461: EQUAL
12462: IFTRUE 12466
12464: GO 12505
12466: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
12467: LD_ADDR_VAR 0 2
12471: PUSH
12472: LD_INT 22
12474: PUSH
12475: LD_VAR 0 1
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 21
12486: PUSH
12487: LD_INT 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PPUSH
12498: CALL_OW 69
12502: ST_TO_ADDR
12503: GO 12577
12505: LD_INT 2
12507: DOUBLE
12508: EQUAL
12509: IFTRUE 12513
12511: GO 12576
12513: POP
// begin h = false ;
12514: LD_ADDR_VAR 0 4
12518: PUSH
12519: LD_INT 0
12521: ST_TO_ADDR
// for k in heroes [ i ] do
12522: LD_ADDR_VAR 0 3
12526: PUSH
12527: LD_EXP 33
12531: PUSH
12532: LD_VAR 0 1
12536: ARRAY
12537: PUSH
12538: FOR_IN
12539: IFFALSE 12562
// if IsLive ( k ) then
12541: LD_VAR 0 3
12545: PPUSH
12546: CALL_OW 300
12550: IFFALSE 12560
// h = true ;
12552: LD_ADDR_VAR 0 4
12556: PUSH
12557: LD_INT 1
12559: ST_TO_ADDR
12560: GO 12538
12562: POP
12563: POP
// Result := h ;
12564: LD_ADDR_VAR 0 2
12568: PUSH
12569: LD_VAR 0 4
12573: ST_TO_ADDR
// end ; end ;
12574: GO 12577
12576: POP
// end ;
12577: LD_VAR 0 2
12581: RET
// function AlliedSides ( i , j ) ; begin
12582: LD_INT 0
12584: PPUSH
// Result := false ;
12585: LD_ADDR_VAR 0 3
12589: PUSH
12590: LD_INT 0
12592: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
12593: LD_VAR 0 1
12597: PPUSH
12598: LD_VAR 0 2
12602: PPUSH
12603: CALL_OW 81
12607: PUSH
12608: LD_INT 1
12610: EQUAL
12611: PUSH
12612: LD_VAR 0 2
12616: PPUSH
12617: LD_VAR 0 1
12621: PPUSH
12622: CALL_OW 81
12626: PUSH
12627: LD_INT 1
12629: EQUAL
12630: AND
12631: PUSH
12632: LD_VAR 0 1
12636: PPUSH
12637: CALL_OW 83
12641: AND
12642: PUSH
12643: LD_VAR 0 2
12647: PPUSH
12648: CALL_OW 83
12652: AND
12653: IFFALSE 12663
// Result := true ;
12655: LD_ADDR_VAR 0 3
12659: PUSH
12660: LD_INT 1
12662: ST_TO_ADDR
// end ;
12663: LD_VAR 0 3
12667: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
12668: CALL 12172 0 0
12672: PUSH
12673: LD_LOC 31
12677: NOT
12678: AND
12679: IFFALSE 12695
12681: GO 12683
12683: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
12684: LD_ADDR_EXP 59
12688: PUSH
12689: LD_STRING #Player-Ended
12691: PUSH
12692: EMPTY
12693: LIST
12694: ST_TO_ADDR
12695: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
12696: CALL 12172 0 0
12700: PUSH
12701: LD_LOC 31
12705: AND
12706: IFFALSE 12715
12708: GO 12710
12710: DISABLE
// YouLostInMultiplayer ;
12711: CALL_OW 107
12715: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
12716: CALL 12172 0 0
12720: NOT
12721: PUSH
12722: CALL_OW 531
12726: NOT
12727: AND
12728: IFFALSE 12744
12730: GO 12732
12732: DISABLE
// WaitServerStrings = [ #server-wait ] ;
12733: LD_ADDR_EXP 59
12737: PUSH
12738: LD_STRING #server-wait
12740: PUSH
12741: EMPTY
12742: LIST
12743: ST_TO_ADDR
12744: END
// every 100 trigger IAmSpec do
12745: CALL_OW 531
12749: IFFALSE 12765
12751: GO 12753
12753: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
12754: LD_ADDR_EXP 59
12758: PUSH
12759: LD_STRING #Player-IAmSpec
12761: PUSH
12762: EMPTY
12763: LIST
12764: ST_TO_ADDR
12765: END
// every 100 trigger GameEnded and IAmSpec do
12766: LD_LOC 31
12770: PUSH
12771: CALL_OW 531
12775: AND
12776: IFFALSE 12785
12778: GO 12780
12780: DISABLE
// YouLostInMultiplayer ;
12781: CALL_OW 107
12785: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
12786: CALL 12172 0 0
12790: PUSH
12791: LD_LOC 31
12795: NOT
12796: AND
12797: IFFALSE 12813
12799: GO 12801
12801: DISABLE
// WaitServerStrings = [ $player-win ] ;
12802: LD_ADDR_EXP 59
12806: PUSH
12807: LD_STRING $player-win
12809: PUSH
12810: EMPTY
12811: LIST
12812: ST_TO_ADDR
12813: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
12814: CALL 12172 0 0
12818: PUSH
12819: LD_LOC 31
12823: AND
12824: IFFALSE 12848
12826: GO 12828
12828: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
12829: LD_EXP 22
12833: PUSH
12834: LD_OWVAR 2
12838: ARRAY
12839: PPUSH
12840: CALL 11850 0 1
// YouWinInMultiplayer ;
12844: CALL_OW 106
// end ;
12848: END
// every 100 trigger isEditor marked 401 do
12849: LD_OWVAR 84
12853: IFFALSE 12869
12855: GO 12857
12857: DISABLE
// Debug_Strings = [ You won ] ;
12858: LD_ADDR_OWVAR 48
12862: PUSH
12863: LD_STRING You won
12865: PUSH
12866: EMPTY
12867: LIST
12868: ST_TO_ADDR
12869: END
// every 100 trigger isEditor marked 400 do
12870: LD_OWVAR 84
12874: IFFALSE 12890
12876: GO 12878
12878: DISABLE
// Debug_Strings = [ You loss ] ;
12879: LD_ADDR_OWVAR 48
12883: PUSH
12884: LD_STRING You loss
12886: PUSH
12887: EMPTY
12888: LIST
12889: ST_TO_ADDR
12890: END
// every 100 marked 98 do var i , un ;
12891: GO 12893
12893: DISABLE
12894: LD_INT 0
12896: PPUSH
12897: PPUSH
// begin for i = 1 to side_positions do
12898: LD_ADDR_VAR 0 1
12902: PUSH
12903: DOUBLE
12904: LD_INT 1
12906: DEC
12907: ST_TO_ADDR
12908: LD_EXP 21
12912: PUSH
12913: FOR_TO
12914: IFFALSE 12997
// if side_positions [ i ] then
12916: LD_EXP 21
12920: PUSH
12921: LD_VAR 0 1
12925: ARRAY
12926: IFFALSE 12995
// if not HasPower ( i ) and not Defaited [ i ] then
12928: LD_VAR 0 1
12932: PPUSH
12933: CALL 12236 0 1
12937: NOT
12938: PUSH
12939: LD_LOC 30
12943: PUSH
12944: LD_VAR 0 1
12948: ARRAY
12949: NOT
12950: AND
12951: IFFALSE 12995
// begin Defaited = replace ( Defaited , i , true ) ;
12953: LD_ADDR_LOC 30
12957: PUSH
12958: LD_LOC 30
12962: PPUSH
12963: LD_VAR 0 1
12967: PPUSH
12968: LD_INT 1
12970: PPUSH
12971: CALL_OW 1
12975: ST_TO_ADDR
// if i = your_side then
12976: LD_VAR 0 1
12980: PUSH
12981: LD_OWVAR 2
12985: EQUAL
12986: IFFALSE 12995
// begin Multiplayer_Loose_Message ;
12988: CALL_OW 521
// enable ( 400 ) ;
12992: LD_INT 400
12994: ENABLE_MARKED
// end ; end ;
12995: GO 12913
12997: POP
12998: POP
// if not Unfoged and defaited [ your_side ] then
12999: LD_LOC 32
13003: NOT
13004: PUSH
13005: LD_LOC 30
13009: PUSH
13010: LD_OWVAR 2
13014: ARRAY
13015: AND
13016: IFFALSE 13022
// Unfog ;
13018: CALL 13198 0 0
// DidGameEnd ;
13022: CALL 13037 0 0
// if not GameEnded then
13026: LD_LOC 31
13030: NOT
13031: IFFALSE 13034
// enable ;
13033: ENABLE
// end ;
13034: PPOPN 2
13036: END
// function DidGameEnd ; var i , k , enemy ; begin
13037: LD_INT 0
13039: PPUSH
13040: PPUSH
13041: PPUSH
13042: PPUSH
// enemy = [ ] ;
13043: LD_ADDR_VAR 0 4
13047: PUSH
13048: EMPTY
13049: ST_TO_ADDR
// for i = 1 to side_positions do
13050: LD_ADDR_VAR 0 2
13054: PUSH
13055: DOUBLE
13056: LD_INT 1
13058: DEC
13059: ST_TO_ADDR
13060: LD_EXP 21
13064: PUSH
13065: FOR_TO
13066: IFFALSE 13160
// if not defaited [ i ] then
13068: LD_LOC 30
13072: PUSH
13073: LD_VAR 0 2
13077: ARRAY
13078: NOT
13079: IFFALSE 13158
// for k = 1 to side_positions do
13081: LD_ADDR_VAR 0 3
13085: PUSH
13086: DOUBLE
13087: LD_INT 1
13089: DEC
13090: ST_TO_ADDR
13091: LD_EXP 21
13095: PUSH
13096: FOR_TO
13097: IFFALSE 13156
// if not defaited [ k ] then
13099: LD_LOC 30
13103: PUSH
13104: LD_VAR 0 3
13108: ARRAY
13109: NOT
13110: IFFALSE 13154
// if not AlliedSides ( i , k ) then
13112: LD_VAR 0 2
13116: PPUSH
13117: LD_VAR 0 3
13121: PPUSH
13122: CALL 12582 0 2
13126: NOT
13127: IFFALSE 13154
// enemy = enemy ^ [ i , k ] ;
13129: LD_ADDR_VAR 0 4
13133: PUSH
13134: LD_VAR 0 4
13138: PUSH
13139: LD_VAR 0 2
13143: PUSH
13144: LD_VAR 0 3
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: ADD
13153: ST_TO_ADDR
13154: GO 13096
13156: POP
13157: POP
13158: GO 13065
13160: POP
13161: POP
// if not enemy then
13162: LD_VAR 0 4
13166: NOT
13167: IFFALSE 13193
// begin GameEnded = true ;
13169: LD_ADDR_LOC 31
13173: PUSH
13174: LD_INT 1
13176: ST_TO_ADDR
// if not defaited [ your_side ] then
13177: LD_LOC 30
13181: PUSH
13182: LD_OWVAR 2
13186: ARRAY
13187: NOT
13188: IFFALSE 13193
// enable ( 401 ) ;
13190: LD_INT 401
13192: ENABLE_MARKED
// end ; end ;
13193: LD_VAR 0 1
13197: RET
// function unfog ; var k , friends ; begin
13198: LD_INT 0
13200: PPUSH
13201: PPUSH
13202: PPUSH
// SetPlayerSpectator ( ) ;
13203: CALL_OW 572
// unfoged = true ;
13207: LD_ADDR_LOC 32
13211: PUSH
13212: LD_INT 1
13214: ST_TO_ADDR
// end ;
13215: LD_VAR 0 1
13219: RET
// export function MakeGameEnd ; begin
13220: LD_INT 0
13222: PPUSH
// SetPlayerSpectator ( ) ;
13223: CALL_OW 572
// unfoged = true ;
13227: LD_ADDR_LOC 32
13231: PUSH
13232: LD_INT 1
13234: ST_TO_ADDR
// wait ( 0 0$5 ) ;
13235: LD_INT 175
13237: PPUSH
13238: CALL_OW 67
// GameEnded = true ;
13242: LD_ADDR_LOC 31
13246: PUSH
13247: LD_INT 1
13249: ST_TO_ADDR
// end ;
13250: LD_VAR 0 1
13254: RET
// export function GetGameEnded ; begin
13255: LD_INT 0
13257: PPUSH
// result = GameEnded ;
13258: LD_ADDR_VAR 0 1
13262: PUSH
13263: LD_LOC 31
13267: ST_TO_ADDR
// end ; end_of_file
13268: LD_VAR 0 1
13272: RET
// var win ; export function init_kings_counting ; var i ; begin
13273: LD_INT 0
13275: PPUSH
13276: PPUSH
// mp_with_score := true ;
13277: LD_ADDR_OWVAR 14
13281: PUSH
13282: LD_INT 1
13284: ST_TO_ADDR
// ResetMultiScore ;
13285: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
13289: LD_EXP 29
13293: PPUSH
13294: LD_INT 1
13296: PPUSH
13297: CALL_OW 424
// enable ( 2 ) ;
13301: LD_INT 2
13303: ENABLE_MARKED
// end ;
13304: LD_VAR 0 1
13308: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
13309: LD_INT 0
13311: PPUSH
13312: PPUSH
13313: PPUSH
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
// vypis := [ ] ;
13320: LD_ADDR_VAR 0 3
13324: PUSH
13325: EMPTY
13326: ST_TO_ADDR
// red = 0 ;
13327: LD_ADDR_VAR 0 5
13331: PUSH
13332: LD_INT 0
13334: ST_TO_ADDR
// blue = 0 ;
13335: LD_ADDR_VAR 0 6
13339: PUSH
13340: LD_INT 0
13342: ST_TO_ADDR
// yel = 0 ;
13343: LD_ADDR_VAR 0 7
13347: PUSH
13348: LD_INT 0
13350: ST_TO_ADDR
// green = 0 ;
13351: LD_ADDR_VAR 0 8
13355: PUSH
13356: LD_INT 0
13358: ST_TO_ADDR
// if def_public_score or isSGUI then
13359: LD_EXP 1
13363: PUSH
13364: LD_OWVAR 83
13368: OR
13369: IFFALSE 13966
// if not Team_Game then
13371: LD_EXP 23
13375: NOT
13376: IFFALSE 13498
// begin for side = 1 to Side_Positions do
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: DOUBLE
13384: LD_INT 1
13386: DEC
13387: ST_TO_ADDR
13388: LD_EXP 21
13392: PUSH
13393: FOR_TO
13394: IFFALSE 13494
// if Side_Positions [ side ] then
13396: LD_EXP 21
13400: PUSH
13401: LD_VAR 0 2
13405: ARRAY
13406: IFFALSE 13492
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
13408: LD_ADDR_VAR 0 3
13412: PUSH
13413: LD_VAR 0 3
13417: PUSH
13418: LD_STRING #KingoftheHill-Public
13420: PUSH
13421: LD_VAR 0 2
13425: PUSH
13426: LD_VAR 0 2
13430: PUSH
13431: LD_VAR 0 2
13435: PUSH
13436: LD_INT 10
13438: PLUS
13439: PPUSH
13440: CALL_OW 110
13444: PUSH
13445: LD_INT 3
13447: DIV
13448: PUSH
13449: LD_EXP 30
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: ADD
13461: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
13462: LD_INT 2
13464: PPUSH
13465: LD_VAR 0 2
13469: PPUSH
13470: LD_VAR 0 2
13474: PUSH
13475: LD_INT 10
13477: PLUS
13478: PPUSH
13479: CALL_OW 110
13483: PUSH
13484: LD_INT 3
13486: DIV
13487: PPUSH
13488: CALL 20870 0 3
// end ;
13492: GO 13393
13494: POP
13495: POP
// end else
13496: GO 13964
// begin if Teams [ 1 ] then
13498: LD_EXP 19
13502: PUSH
13503: LD_INT 1
13505: ARRAY
13506: IFFALSE 13558
// for i in Teams [ 1 ] do
13508: LD_ADDR_VAR 0 4
13512: PUSH
13513: LD_EXP 19
13517: PUSH
13518: LD_INT 1
13520: ARRAY
13521: PUSH
13522: FOR_IN
13523: IFFALSE 13556
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
13525: LD_ADDR_VAR 0 5
13529: PUSH
13530: LD_VAR 0 5
13534: PUSH
13535: LD_VAR 0 4
13539: PUSH
13540: LD_INT 10
13542: PLUS
13543: PPUSH
13544: CALL_OW 110
13548: PUSH
13549: LD_INT 3
13551: DIV
13552: PLUS
13553: ST_TO_ADDR
13554: GO 13522
13556: POP
13557: POP
// if Teams [ 2 ] then
13558: LD_EXP 19
13562: PUSH
13563: LD_INT 2
13565: ARRAY
13566: IFFALSE 13618
// for i in Teams [ 2 ] do
13568: LD_ADDR_VAR 0 4
13572: PUSH
13573: LD_EXP 19
13577: PUSH
13578: LD_INT 2
13580: ARRAY
13581: PUSH
13582: FOR_IN
13583: IFFALSE 13616
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
13585: LD_ADDR_VAR 0 6
13589: PUSH
13590: LD_VAR 0 6
13594: PUSH
13595: LD_VAR 0 4
13599: PUSH
13600: LD_INT 10
13602: PLUS
13603: PPUSH
13604: CALL_OW 110
13608: PUSH
13609: LD_INT 3
13611: DIV
13612: PLUS
13613: ST_TO_ADDR
13614: GO 13582
13616: POP
13617: POP
// if Teams [ 3 ] then
13618: LD_EXP 19
13622: PUSH
13623: LD_INT 3
13625: ARRAY
13626: IFFALSE 13678
// for i in Teams [ 3 ] do
13628: LD_ADDR_VAR 0 4
13632: PUSH
13633: LD_EXP 19
13637: PUSH
13638: LD_INT 3
13640: ARRAY
13641: PUSH
13642: FOR_IN
13643: IFFALSE 13676
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
13645: LD_ADDR_VAR 0 7
13649: PUSH
13650: LD_VAR 0 7
13654: PUSH
13655: LD_VAR 0 4
13659: PUSH
13660: LD_INT 10
13662: PLUS
13663: PPUSH
13664: CALL_OW 110
13668: PUSH
13669: LD_INT 3
13671: DIV
13672: PLUS
13673: ST_TO_ADDR
13674: GO 13642
13676: POP
13677: POP
// if Teams [ 4 ] then
13678: LD_EXP 19
13682: PUSH
13683: LD_INT 4
13685: ARRAY
13686: IFFALSE 13738
// for i in Teams [ 4 ] do
13688: LD_ADDR_VAR 0 4
13692: PUSH
13693: LD_EXP 19
13697: PUSH
13698: LD_INT 4
13700: ARRAY
13701: PUSH
13702: FOR_IN
13703: IFFALSE 13736
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
13705: LD_ADDR_VAR 0 8
13709: PUSH
13710: LD_VAR 0 8
13714: PUSH
13715: LD_VAR 0 4
13719: PUSH
13720: LD_INT 10
13722: PLUS
13723: PPUSH
13724: CALL_OW 110
13728: PUSH
13729: LD_INT 3
13731: DIV
13732: PLUS
13733: ST_TO_ADDR
13734: GO 13702
13736: POP
13737: POP
// if Teams [ 1 ] then
13738: LD_EXP 19
13742: PUSH
13743: LD_INT 1
13745: ARRAY
13746: IFFALSE 13775
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
13748: LD_ADDR_VAR 0 3
13752: PUSH
13753: LD_STRING #KingoftheHill-Public-red
13755: PUSH
13756: LD_INT 3
13758: PUSH
13759: LD_VAR 0 5
13763: PUSH
13764: LD_EXP 30
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: ST_TO_ADDR
// if Teams [ 2 ] then
13775: LD_EXP 19
13779: PUSH
13780: LD_INT 2
13782: ARRAY
13783: IFFALSE 13818
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
13785: LD_ADDR_VAR 0 3
13789: PUSH
13790: LD_VAR 0 3
13794: PUSH
13795: LD_STRING #KingoftheHill-Public-blue
13797: PUSH
13798: LD_INT 1
13800: PUSH
13801: LD_VAR 0 6
13805: PUSH
13806: LD_EXP 30
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: ADD
13817: ST_TO_ADDR
// if Teams [ 3 ] then
13818: LD_EXP 19
13822: PUSH
13823: LD_INT 3
13825: ARRAY
13826: IFFALSE 13861
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
13828: LD_ADDR_VAR 0 3
13832: PUSH
13833: LD_VAR 0 3
13837: PUSH
13838: LD_STRING #KingoftheHill-Public-yell
13840: PUSH
13841: LD_INT 2
13843: PUSH
13844: LD_VAR 0 7
13848: PUSH
13849: LD_EXP 30
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: ADD
13860: ST_TO_ADDR
// if Teams [ 4 ] then
13861: LD_EXP 19
13865: PUSH
13866: LD_INT 4
13868: ARRAY
13869: IFFALSE 13904
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
13871: LD_ADDR_VAR 0 3
13875: PUSH
13876: LD_VAR 0 3
13880: PUSH
13881: LD_STRING #KingoftheHill-Public-green
13883: PUSH
13884: LD_INT 7
13886: PUSH
13887: LD_VAR 0 8
13891: PUSH
13892: LD_EXP 30
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: ADD
13903: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
13904: LD_INT 2
13906: PPUSH
13907: LD_INT 3
13909: PPUSH
13910: LD_VAR 0 5
13914: PPUSH
13915: CALL 20870 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
13919: LD_INT 2
13921: PPUSH
13922: LD_INT 1
13924: PPUSH
13925: LD_VAR 0 6
13929: PPUSH
13930: CALL 20870 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
13934: LD_INT 2
13936: PPUSH
13937: LD_INT 2
13939: PPUSH
13940: LD_VAR 0 7
13944: PPUSH
13945: CALL 20870 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
13949: LD_INT 2
13951: PPUSH
13952: LD_INT 7
13954: PPUSH
13955: LD_VAR 0 8
13959: PPUSH
13960: CALL 20870 0 3
// end else
13964: GO 14401
// if not Team_Game then
13966: LD_EXP 23
13970: NOT
13971: IFFALSE 14029
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
13973: LD_ADDR_VAR 0 3
13977: PUSH
13978: LD_VAR 0 3
13982: PUSH
13983: LD_STRING #KingoftheHill-Private
13985: PUSH
13986: LD_OWVAR 2
13990: PUSH
13991: LD_OWVAR 2
13995: PUSH
13996: LD_VAR 0 2
14000: PUSH
14001: LD_INT 10
14003: PLUS
14004: PPUSH
14005: CALL_OW 110
14009: PUSH
14010: LD_INT 3
14012: DIV
14013: PUSH
14014: LD_EXP 30
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: ADD
14026: ST_TO_ADDR
14027: GO 14401
// begin for i in Teams [ 1 ] do
14029: LD_ADDR_VAR 0 4
14033: PUSH
14034: LD_EXP 19
14038: PUSH
14039: LD_INT 1
14041: ARRAY
14042: PUSH
14043: FOR_IN
14044: IFFALSE 14077
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14046: LD_ADDR_VAR 0 5
14050: PUSH
14051: LD_VAR 0 5
14055: PUSH
14056: LD_VAR 0 4
14060: PUSH
14061: LD_INT 10
14063: PLUS
14064: PPUSH
14065: CALL_OW 110
14069: PUSH
14070: LD_INT 3
14072: DIV
14073: PLUS
14074: ST_TO_ADDR
14075: GO 14043
14077: POP
14078: POP
// for i in Teams [ 2 ] do
14079: LD_ADDR_VAR 0 4
14083: PUSH
14084: LD_EXP 19
14088: PUSH
14089: LD_INT 2
14091: ARRAY
14092: PUSH
14093: FOR_IN
14094: IFFALSE 14127
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14096: LD_ADDR_VAR 0 6
14100: PUSH
14101: LD_VAR 0 6
14105: PUSH
14106: LD_VAR 0 4
14110: PUSH
14111: LD_INT 10
14113: PLUS
14114: PPUSH
14115: CALL_OW 110
14119: PUSH
14120: LD_INT 3
14122: DIV
14123: PLUS
14124: ST_TO_ADDR
14125: GO 14093
14127: POP
14128: POP
// for i in Teams [ 3 ] do
14129: LD_ADDR_VAR 0 4
14133: PUSH
14134: LD_EXP 19
14138: PUSH
14139: LD_INT 3
14141: ARRAY
14142: PUSH
14143: FOR_IN
14144: IFFALSE 14177
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14146: LD_ADDR_VAR 0 7
14150: PUSH
14151: LD_VAR 0 7
14155: PUSH
14156: LD_VAR 0 4
14160: PUSH
14161: LD_INT 10
14163: PLUS
14164: PPUSH
14165: CALL_OW 110
14169: PUSH
14170: LD_INT 3
14172: DIV
14173: PLUS
14174: ST_TO_ADDR
14175: GO 14143
14177: POP
14178: POP
// for i in Teams [ 4 ] do
14179: LD_ADDR_VAR 0 4
14183: PUSH
14184: LD_EXP 19
14188: PUSH
14189: LD_INT 4
14191: ARRAY
14192: PUSH
14193: FOR_IN
14194: IFFALSE 14227
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14196: LD_ADDR_VAR 0 8
14200: PUSH
14201: LD_VAR 0 8
14205: PUSH
14206: LD_VAR 0 4
14210: PUSH
14211: LD_INT 10
14213: PLUS
14214: PPUSH
14215: CALL_OW 110
14219: PUSH
14220: LD_INT 3
14222: DIV
14223: PLUS
14224: ST_TO_ADDR
14225: GO 14193
14227: POP
14228: POP
// if your_side in Teams [ 1 ] then
14229: LD_OWVAR 2
14233: PUSH
14234: LD_EXP 19
14238: PUSH
14239: LD_INT 1
14241: ARRAY
14242: IN
14243: IFFALSE 14272
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
14245: LD_ADDR_VAR 0 3
14249: PUSH
14250: LD_STRING #KingoftheHill-Public-red
14252: PUSH
14253: LD_INT 3
14255: PUSH
14256: LD_VAR 0 5
14260: PUSH
14261: LD_EXP 30
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
14272: LD_OWVAR 2
14276: PUSH
14277: LD_EXP 19
14281: PUSH
14282: LD_INT 2
14284: ARRAY
14285: IN
14286: IFFALSE 14315
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
14288: LD_ADDR_VAR 0 3
14292: PUSH
14293: LD_STRING #KingoftheHill-Public-blue
14295: PUSH
14296: LD_INT 1
14298: PUSH
14299: LD_VAR 0 6
14303: PUSH
14304: LD_EXP 30
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
14315: LD_OWVAR 2
14319: PUSH
14320: LD_EXP 19
14324: PUSH
14325: LD_INT 3
14327: ARRAY
14328: IN
14329: IFFALSE 14358
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
14331: LD_ADDR_VAR 0 3
14335: PUSH
14336: LD_STRING #KingoftheHill-Public-yell
14338: PUSH
14339: LD_INT 2
14341: PUSH
14342: LD_VAR 0 7
14346: PUSH
14347: LD_EXP 30
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
14358: LD_OWVAR 2
14362: PUSH
14363: LD_EXP 19
14367: PUSH
14368: LD_INT 4
14370: ARRAY
14371: IN
14372: IFFALSE 14401
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
14374: LD_ADDR_VAR 0 3
14378: PUSH
14379: LD_STRING #KingoftheHill-Public-green
14381: PUSH
14382: LD_INT 7
14384: PUSH
14385: LD_VAR 0 8
14389: PUSH
14390: LD_EXP 30
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: ST_TO_ADDR
// end ; Display_kings := vypis ;
14401: LD_ADDR_EXP 60
14405: PUSH
14406: LD_VAR 0 3
14410: ST_TO_ADDR
// end ;
14411: LD_VAR 0 1
14415: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
14416: LD_INT 0
14418: PPUSH
14419: PPUSH
14420: PPUSH
14421: PPUSH
14422: PPUSH
14423: PPUSH
14424: PPUSH
14425: PPUSH
14426: PPUSH
// side := [ ] ;
14427: LD_ADDR_VAR 0 2
14431: PUSH
14432: EMPTY
14433: ST_TO_ADDR
// red = 0 ;
14434: LD_ADDR_VAR 0 5
14438: PUSH
14439: LD_INT 0
14441: ST_TO_ADDR
// blue = 0 ;
14442: LD_ADDR_VAR 0 6
14446: PUSH
14447: LD_INT 0
14449: ST_TO_ADDR
// yel = 0 ;
14450: LD_ADDR_VAR 0 7
14454: PUSH
14455: LD_INT 0
14457: ST_TO_ADDR
// green = 0 ;
14458: LD_ADDR_VAR 0 8
14462: PUSH
14463: LD_INT 0
14465: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
14466: LD_ADDR_VAR 0 3
14470: PUSH
14471: LD_EXP 29
14475: PPUSH
14476: LD_INT 21
14478: PUSH
14479: LD_INT 3
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: LD_INT 53
14488: PUSH
14489: EMPTY
14490: LIST
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PPUSH
14496: CALL_OW 70
14500: ST_TO_ADDR
// for un in list do
14501: LD_ADDR_VAR 0 4
14505: PUSH
14506: LD_VAR 0 3
14510: PUSH
14511: FOR_IN
14512: IFFALSE 14537
// side := side union GetSide ( un ) ;
14514: LD_ADDR_VAR 0 2
14518: PUSH
14519: LD_VAR 0 2
14523: PUSH
14524: LD_VAR 0 4
14528: PPUSH
14529: CALL_OW 255
14533: UNION
14534: ST_TO_ADDR
14535: GO 14511
14537: POP
14538: POP
// if side <> 1 then
14539: LD_VAR 0 2
14543: PUSH
14544: LD_INT 1
14546: NONEQUAL
14547: IFFALSE 14551
// exit ;
14549: GO 14914
// side := side [ 1 ] ;
14551: LD_ADDR_VAR 0 2
14555: PUSH
14556: LD_VAR 0 2
14560: PUSH
14561: LD_INT 1
14563: ARRAY
14564: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
14565: LD_VAR 0 2
14569: PUSH
14570: LD_INT 10
14572: PLUS
14573: PPUSH
14574: LD_VAR 0 2
14578: PUSH
14579: LD_INT 10
14581: PLUS
14582: PPUSH
14583: CALL_OW 110
14587: PUSH
14588: LD_INT 1
14590: PLUS
14591: PPUSH
14592: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
14596: LD_VAR 0 2
14600: PPUSH
14601: LD_VAR 0 2
14605: PUSH
14606: LD_INT 10
14608: PLUS
14609: PPUSH
14610: CALL_OW 110
14614: PUSH
14615: LD_INT 3
14617: DIV
14618: PPUSH
14619: LD_INT 2
14621: PPUSH
14622: CALL 11631 0 3
// if not Team_Game then
14626: LD_EXP 23
14630: NOT
14631: IFFALSE 14914
// if GetTag ( side + 10 ) >= final_count * 3 then
14633: LD_VAR 0 2
14637: PUSH
14638: LD_INT 10
14640: PLUS
14641: PPUSH
14642: CALL_OW 110
14646: PUSH
14647: LD_EXP 30
14651: PUSH
14652: LD_INT 3
14654: MUL
14655: GREATEREQUAL
14656: IFFALSE 14663
// enable ( 3 ) else
14658: LD_INT 3
14660: ENABLE_MARKED
14661: GO 14914
// begin for i in Teams [ 1 ] do
14663: LD_ADDR_VAR 0 9
14667: PUSH
14668: LD_EXP 19
14672: PUSH
14673: LD_INT 1
14675: ARRAY
14676: PUSH
14677: FOR_IN
14678: IFFALSE 14711
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14680: LD_ADDR_VAR 0 5
14684: PUSH
14685: LD_VAR 0 5
14689: PUSH
14690: LD_VAR 0 9
14694: PUSH
14695: LD_INT 10
14697: PLUS
14698: PPUSH
14699: CALL_OW 110
14703: PUSH
14704: LD_INT 3
14706: DIV
14707: PLUS
14708: ST_TO_ADDR
14709: GO 14677
14711: POP
14712: POP
// for i in Teams [ 2 ] do
14713: LD_ADDR_VAR 0 9
14717: PUSH
14718: LD_EXP 19
14722: PUSH
14723: LD_INT 2
14725: ARRAY
14726: PUSH
14727: FOR_IN
14728: IFFALSE 14761
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14730: LD_ADDR_VAR 0 6
14734: PUSH
14735: LD_VAR 0 6
14739: PUSH
14740: LD_VAR 0 9
14744: PUSH
14745: LD_INT 10
14747: PLUS
14748: PPUSH
14749: CALL_OW 110
14753: PUSH
14754: LD_INT 3
14756: DIV
14757: PLUS
14758: ST_TO_ADDR
14759: GO 14727
14761: POP
14762: POP
// for i in Teams [ 3 ] do
14763: LD_ADDR_VAR 0 9
14767: PUSH
14768: LD_EXP 19
14772: PUSH
14773: LD_INT 3
14775: ARRAY
14776: PUSH
14777: FOR_IN
14778: IFFALSE 14811
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14780: LD_ADDR_VAR 0 7
14784: PUSH
14785: LD_VAR 0 7
14789: PUSH
14790: LD_VAR 0 9
14794: PUSH
14795: LD_INT 10
14797: PLUS
14798: PPUSH
14799: CALL_OW 110
14803: PUSH
14804: LD_INT 3
14806: DIV
14807: PLUS
14808: ST_TO_ADDR
14809: GO 14777
14811: POP
14812: POP
// for i in Teams [ 4 ] do
14813: LD_ADDR_VAR 0 9
14817: PUSH
14818: LD_EXP 19
14822: PUSH
14823: LD_INT 4
14825: ARRAY
14826: PUSH
14827: FOR_IN
14828: IFFALSE 14861
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14830: LD_ADDR_VAR 0 8
14834: PUSH
14835: LD_VAR 0 8
14839: PUSH
14840: LD_VAR 0 9
14844: PUSH
14845: LD_INT 10
14847: PLUS
14848: PPUSH
14849: CALL_OW 110
14853: PUSH
14854: LD_INT 3
14856: DIV
14857: PLUS
14858: ST_TO_ADDR
14859: GO 14827
14861: POP
14862: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
14863: LD_VAR 0 5
14867: PUSH
14868: LD_EXP 30
14872: GREATEREQUAL
14873: PUSH
14874: LD_VAR 0 6
14878: PUSH
14879: LD_EXP 30
14883: GREATEREQUAL
14884: OR
14885: PUSH
14886: LD_VAR 0 7
14890: PUSH
14891: LD_EXP 30
14895: GREATEREQUAL
14896: OR
14897: PUSH
14898: LD_VAR 0 8
14902: PUSH
14903: LD_EXP 30
14907: GREATEREQUAL
14908: OR
14909: IFFALSE 14914
// enable ( 3 ) ;
14911: LD_INT 3
14913: ENABLE_MARKED
// end ; end ;
14914: LD_VAR 0 1
14918: RET
// every 0 0$1 marked 2 do
14919: GO 14921
14921: DISABLE
// begin count_king ;
14922: CALL 14416 0 0
// show_public_points ;
14926: CALL 13309 0 0
// enable ;
14930: ENABLE
// end ;
14931: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
14932: GO 14934
14934: DISABLE
14935: LD_INT 0
14937: PPUSH
14938: PPUSH
14939: PPUSH
14940: PPUSH
14941: PPUSH
14942: PPUSH
// begin win := [ ] ;
14943: LD_ADDR_LOC 33
14947: PUSH
14948: EMPTY
14949: ST_TO_ADDR
// red = 0 ;
14950: LD_ADDR_VAR 0 2
14954: PUSH
14955: LD_INT 0
14957: ST_TO_ADDR
// blue = 0 ;
14958: LD_ADDR_VAR 0 3
14962: PUSH
14963: LD_INT 0
14965: ST_TO_ADDR
// yel = 0 ;
14966: LD_ADDR_VAR 0 4
14970: PUSH
14971: LD_INT 0
14973: ST_TO_ADDR
// green = 0 ;
14974: LD_ADDR_VAR 0 5
14978: PUSH
14979: LD_INT 0
14981: ST_TO_ADDR
// if not Team_Game then
14982: LD_EXP 23
14986: NOT
14987: IFFALSE 15064
// begin for side = 1 to 8 do
14989: LD_ADDR_VAR 0 1
14993: PUSH
14994: DOUBLE
14995: LD_INT 1
14997: DEC
14998: ST_TO_ADDR
14999: LD_INT 8
15001: PUSH
15002: FOR_TO
15003: IFFALSE 15048
// if GetTag ( side + 10 ) >= final_count * 3 then
15005: LD_VAR 0 1
15009: PUSH
15010: LD_INT 10
15012: PLUS
15013: PPUSH
15014: CALL_OW 110
15018: PUSH
15019: LD_EXP 30
15023: PUSH
15024: LD_INT 3
15026: MUL
15027: GREATEREQUAL
15028: IFFALSE 15046
// win := win ^ side ;
15030: LD_ADDR_LOC 33
15034: PUSH
15035: LD_LOC 33
15039: PUSH
15040: LD_VAR 0 1
15044: ADD
15045: ST_TO_ADDR
15046: GO 15002
15048: POP
15049: POP
// if win then
15050: LD_LOC 33
15054: IFFALSE 15061
// enable ( 4 ) else
15056: LD_INT 4
15058: ENABLE_MARKED
15059: GO 15062
// enable ;
15061: ENABLE
// end else
15062: GO 15380
// begin for i in Teams [ 1 ] do
15064: LD_ADDR_VAR 0 6
15068: PUSH
15069: LD_EXP 19
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: PUSH
15078: FOR_IN
15079: IFFALSE 15112
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
15081: LD_ADDR_VAR 0 2
15085: PUSH
15086: LD_VAR 0 2
15090: PUSH
15091: LD_VAR 0 6
15095: PUSH
15096: LD_INT 10
15098: PLUS
15099: PPUSH
15100: CALL_OW 110
15104: PUSH
15105: LD_INT 3
15107: DIV
15108: PLUS
15109: ST_TO_ADDR
15110: GO 15078
15112: POP
15113: POP
// for i in Teams [ 2 ] do
15114: LD_ADDR_VAR 0 6
15118: PUSH
15119: LD_EXP 19
15123: PUSH
15124: LD_INT 2
15126: ARRAY
15127: PUSH
15128: FOR_IN
15129: IFFALSE 15162
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
15131: LD_ADDR_VAR 0 3
15135: PUSH
15136: LD_VAR 0 3
15140: PUSH
15141: LD_VAR 0 6
15145: PUSH
15146: LD_INT 10
15148: PLUS
15149: PPUSH
15150: CALL_OW 110
15154: PUSH
15155: LD_INT 3
15157: DIV
15158: PLUS
15159: ST_TO_ADDR
15160: GO 15128
15162: POP
15163: POP
// for i in Teams [ 3 ] do
15164: LD_ADDR_VAR 0 6
15168: PUSH
15169: LD_EXP 19
15173: PUSH
15174: LD_INT 3
15176: ARRAY
15177: PUSH
15178: FOR_IN
15179: IFFALSE 15212
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
15181: LD_ADDR_VAR 0 4
15185: PUSH
15186: LD_VAR 0 4
15190: PUSH
15191: LD_VAR 0 6
15195: PUSH
15196: LD_INT 10
15198: PLUS
15199: PPUSH
15200: CALL_OW 110
15204: PUSH
15205: LD_INT 3
15207: DIV
15208: PLUS
15209: ST_TO_ADDR
15210: GO 15178
15212: POP
15213: POP
// for i in Teams [ 4 ] do
15214: LD_ADDR_VAR 0 6
15218: PUSH
15219: LD_EXP 19
15223: PUSH
15224: LD_INT 4
15226: ARRAY
15227: PUSH
15228: FOR_IN
15229: IFFALSE 15262
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
15231: LD_ADDR_VAR 0 5
15235: PUSH
15236: LD_VAR 0 5
15240: PUSH
15241: LD_VAR 0 6
15245: PUSH
15246: LD_INT 10
15248: PLUS
15249: PPUSH
15250: CALL_OW 110
15254: PUSH
15255: LD_INT 3
15257: DIV
15258: PLUS
15259: ST_TO_ADDR
15260: GO 15228
15262: POP
15263: POP
// if red >= final_count then
15264: LD_VAR 0 2
15268: PUSH
15269: LD_EXP 30
15273: GREATEREQUAL
15274: IFFALSE 15290
// win = teams [ 1 ] ;
15276: LD_ADDR_LOC 33
15280: PUSH
15281: LD_EXP 19
15285: PUSH
15286: LD_INT 1
15288: ARRAY
15289: ST_TO_ADDR
// if blue >= final_count then
15290: LD_VAR 0 3
15294: PUSH
15295: LD_EXP 30
15299: GREATEREQUAL
15300: IFFALSE 15316
// win = teams [ 2 ] ;
15302: LD_ADDR_LOC 33
15306: PUSH
15307: LD_EXP 19
15311: PUSH
15312: LD_INT 2
15314: ARRAY
15315: ST_TO_ADDR
// if yel >= final_count then
15316: LD_VAR 0 4
15320: PUSH
15321: LD_EXP 30
15325: GREATEREQUAL
15326: IFFALSE 15342
// win = teams [ 3 ] ;
15328: LD_ADDR_LOC 33
15332: PUSH
15333: LD_EXP 19
15337: PUSH
15338: LD_INT 3
15340: ARRAY
15341: ST_TO_ADDR
// if green >= final_count then
15342: LD_VAR 0 5
15346: PUSH
15347: LD_EXP 30
15351: GREATEREQUAL
15352: IFFALSE 15368
// win = teams [ 4 ] ;
15354: LD_ADDR_LOC 33
15358: PUSH
15359: LD_EXP 19
15363: PUSH
15364: LD_INT 4
15366: ARRAY
15367: ST_TO_ADDR
// if win then
15368: LD_LOC 33
15372: IFFALSE 15379
// enable ( 4 ) else
15374: LD_INT 4
15376: ENABLE_MARKED
15377: GO 15380
// enable ;
15379: ENABLE
// end ; end ;
15380: PPOPN 6
15382: END
// every 0 0$1 marked 4 do
15383: GO 15385
15385: DISABLE
// begin if Player_Side in win then
15386: LD_EXP 31
15390: PUSH
15391: LD_LOC 33
15395: IN
15396: IFFALSE 15412
// begin wait ( 0 0$2 ) ;
15398: LD_INT 70
15400: PPUSH
15401: CALL_OW 67
// enable ( 401 ) ;
15405: LD_INT 401
15407: ENABLE_MARKED
// exit ;
15408: GO 15428
// end else
15410: GO 15428
// begin wait ( 0 0$2 ) ;
15412: LD_INT 70
15414: PPUSH
15415: CALL_OW 67
// Multiplayer_Loose_Message ;
15419: CALL_OW 521
// enable ( 400 ) ;
15423: LD_INT 400
15425: ENABLE_MARKED
// exit ;
15426: GO 15428
// end ; end ; end_of_file
15428: END
// export function SetMpTechs ( ) ; var side , i ; begin
15429: LD_INT 0
15431: PPUSH
15432: PPUSH
15433: PPUSH
// for side = 1 to 8 do
15434: LD_ADDR_VAR 0 2
15438: PUSH
15439: DOUBLE
15440: LD_INT 1
15442: DEC
15443: ST_TO_ADDR
15444: LD_INT 8
15446: PUSH
15447: FOR_TO
15448: IFFALSE 15569
// begin for i = 1 to 72 do
15450: LD_ADDR_VAR 0 3
15454: PUSH
15455: DOUBLE
15456: LD_INT 1
15458: DEC
15459: ST_TO_ADDR
15460: LD_INT 72
15462: PUSH
15463: FOR_TO
15464: IFFALSE 15495
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15466: LD_VAR 0 3
15470: PPUSH
15471: LD_VAR 0 2
15475: PPUSH
15476: LD_INT 0
15478: PPUSH
15479: LD_VAR 0 3
15483: PPUSH
15484: CALL_OW 565
15488: PPUSH
15489: CALL_OW 322
15493: GO 15463
15495: POP
15496: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15497: LD_INT 73
15499: PPUSH
15500: LD_VAR 0 2
15504: PPUSH
15505: LD_INT 0
15507: PPUSH
15508: LD_INT 25
15510: PPUSH
15511: CALL_OW 565
15515: PPUSH
15516: CALL_OW 322
// for i = 0 to 40 do
15520: LD_ADDR_VAR 0 3
15524: PUSH
15525: DOUBLE
15526: LD_INT 0
15528: DEC
15529: ST_TO_ADDR
15530: LD_INT 40
15532: PUSH
15533: FOR_TO
15534: IFFALSE 15565
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15536: LD_VAR 0 3
15540: PPUSH
15541: LD_VAR 0 2
15545: PPUSH
15546: LD_INT 1
15548: PPUSH
15549: LD_VAR 0 3
15553: PPUSH
15554: CALL_OW 565
15558: PPUSH
15559: CALL_OW 324
15563: GO 15533
15565: POP
15566: POP
// end ;
15567: GO 15447
15569: POP
15570: POP
// end ;
15571: LD_VAR 0 1
15575: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15576: LD_INT 0
15578: PPUSH
15579: PPUSH
15580: PPUSH
// for side = 1 to 8 do
15581: LD_ADDR_VAR 0 3
15585: PUSH
15586: DOUBLE
15587: LD_INT 1
15589: DEC
15590: ST_TO_ADDR
15591: LD_INT 8
15593: PUSH
15594: FOR_TO
15595: IFFALSE 19591
// begin for i = 1 to 73 do
15597: LD_ADDR_VAR 0 4
15601: PUSH
15602: DOUBLE
15603: LD_INT 1
15605: DEC
15606: ST_TO_ADDR
15607: LD_INT 73
15609: PUSH
15610: FOR_TO
15611: IFFALSE 15632
// SetTech ( i , side , state_disabled ) ;
15613: LD_VAR 0 4
15617: PPUSH
15618: LD_VAR 0 3
15622: PPUSH
15623: LD_INT 0
15625: PPUSH
15626: CALL_OW 322
15630: GO 15610
15632: POP
15633: POP
// for i = 0 to 40 do
15634: LD_ADDR_VAR 0 4
15638: PUSH
15639: DOUBLE
15640: LD_INT 0
15642: DEC
15643: ST_TO_ADDR
15644: LD_INT 40
15646: PUSH
15647: FOR_TO
15648: IFFALSE 15669
// SetRestrict ( i , side , false ) ;
15650: LD_VAR 0 4
15654: PPUSH
15655: LD_VAR 0 3
15659: PPUSH
15660: LD_INT 0
15662: PPUSH
15663: CALL_OW 324
15667: GO 15647
15669: POP
15670: POP
// case level of 1 :
15671: LD_VAR 0 1
15675: PUSH
15676: LD_INT 1
15678: DOUBLE
15679: EQUAL
15680: IFTRUE 15684
15682: GO 15837
15684: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15685: LD_INT 35
15687: PPUSH
15688: LD_VAR 0 3
15692: PPUSH
15693: LD_INT 1
15695: PPUSH
15696: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15700: LD_INT 45
15702: PPUSH
15703: LD_VAR 0 3
15707: PPUSH
15708: LD_INT 1
15710: PPUSH
15711: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15715: LD_INT 46
15717: PPUSH
15718: LD_VAR 0 3
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15730: LD_INT 47
15732: PPUSH
15733: LD_VAR 0 3
15737: PPUSH
15738: LD_INT 1
15740: PPUSH
15741: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15745: LD_INT 0
15747: PPUSH
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_INT 1
15755: PPUSH
15756: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15760: LD_INT 2
15762: PPUSH
15763: LD_VAR 0 3
15767: PPUSH
15768: LD_INT 1
15770: PPUSH
15771: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15775: LD_INT 4
15777: PPUSH
15778: LD_VAR 0 3
15782: PPUSH
15783: LD_INT 1
15785: PPUSH
15786: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15790: LD_INT 6
15792: PPUSH
15793: LD_VAR 0 3
15797: PPUSH
15798: LD_INT 1
15800: PPUSH
15801: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15805: LD_INT 29
15807: PPUSH
15808: LD_VAR 0 3
15812: PPUSH
15813: LD_INT 1
15815: PPUSH
15816: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15820: LD_INT 31
15822: PPUSH
15823: LD_VAR 0 3
15827: PPUSH
15828: LD_INT 1
15830: PPUSH
15831: CALL_OW 324
// end ; 2 :
15835: GO 19589
15837: LD_INT 2
15839: DOUBLE
15840: EQUAL
15841: IFTRUE 15845
15843: GO 16043
15845: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15846: LD_INT 35
15848: PPUSH
15849: LD_VAR 0 3
15853: PPUSH
15854: LD_INT 1
15856: PPUSH
15857: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15861: LD_INT 45
15863: PPUSH
15864: LD_VAR 0 3
15868: PPUSH
15869: LD_INT 1
15871: PPUSH
15872: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15876: LD_INT 46
15878: PPUSH
15879: LD_VAR 0 3
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15891: LD_INT 47
15893: PPUSH
15894: LD_VAR 0 3
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15906: LD_INT 1
15908: PPUSH
15909: LD_VAR 0 3
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15921: LD_INT 2
15923: PPUSH
15924: LD_VAR 0 3
15928: PPUSH
15929: LD_INT 1
15931: PPUSH
15932: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15936: LD_INT 11
15938: PPUSH
15939: LD_VAR 0 3
15943: PPUSH
15944: LD_INT 1
15946: PPUSH
15947: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15951: LD_INT 0
15953: PPUSH
15954: LD_VAR 0 3
15958: PPUSH
15959: LD_INT 1
15961: PPUSH
15962: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15966: LD_INT 2
15968: PPUSH
15969: LD_VAR 0 3
15973: PPUSH
15974: LD_INT 1
15976: PPUSH
15977: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15981: LD_INT 4
15983: PPUSH
15984: LD_VAR 0 3
15988: PPUSH
15989: LD_INT 1
15991: PPUSH
15992: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15996: LD_INT 6
15998: PPUSH
15999: LD_VAR 0 3
16003: PPUSH
16004: LD_INT 1
16006: PPUSH
16007: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16011: LD_INT 29
16013: PPUSH
16014: LD_VAR 0 3
16018: PPUSH
16019: LD_INT 1
16021: PPUSH
16022: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16026: LD_INT 31
16028: PPUSH
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 324
// end ; 3 :
16041: GO 19589
16043: LD_INT 3
16045: DOUBLE
16046: EQUAL
16047: IFTRUE 16051
16049: GO 16504
16051: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16052: LD_INT 35
16054: PPUSH
16055: LD_VAR 0 3
16059: PPUSH
16060: LD_INT 1
16062: PPUSH
16063: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16067: LD_INT 45
16069: PPUSH
16070: LD_VAR 0 3
16074: PPUSH
16075: LD_INT 1
16077: PPUSH
16078: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16082: LD_INT 46
16084: PPUSH
16085: LD_VAR 0 3
16089: PPUSH
16090: LD_INT 1
16092: PPUSH
16093: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16097: LD_INT 47
16099: PPUSH
16100: LD_VAR 0 3
16104: PPUSH
16105: LD_INT 1
16107: PPUSH
16108: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16112: LD_INT 1
16114: PPUSH
16115: LD_VAR 0 3
16119: PPUSH
16120: LD_INT 1
16122: PPUSH
16123: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16127: LD_INT 2
16129: PPUSH
16130: LD_VAR 0 3
16134: PPUSH
16135: LD_INT 1
16137: PPUSH
16138: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16142: LD_INT 11
16144: PPUSH
16145: LD_VAR 0 3
16149: PPUSH
16150: LD_INT 1
16152: PPUSH
16153: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16157: LD_INT 48
16159: PPUSH
16160: LD_VAR 0 3
16164: PPUSH
16165: LD_INT 1
16167: PPUSH
16168: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16172: LD_INT 69
16174: PPUSH
16175: LD_VAR 0 3
16179: PPUSH
16180: LD_INT 1
16182: PPUSH
16183: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16187: LD_INT 39
16189: PPUSH
16190: LD_VAR 0 3
16194: PPUSH
16195: LD_INT 1
16197: PPUSH
16198: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16202: LD_INT 43
16204: PPUSH
16205: LD_VAR 0 3
16209: PPUSH
16210: LD_INT 1
16212: PPUSH
16213: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16217: LD_INT 51
16219: PPUSH
16220: LD_VAR 0 3
16224: PPUSH
16225: LD_INT 1
16227: PPUSH
16228: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16232: LD_INT 6
16234: PPUSH
16235: LD_VAR 0 3
16239: PPUSH
16240: LD_INT 1
16242: PPUSH
16243: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16247: LD_INT 0
16249: PPUSH
16250: LD_VAR 0 3
16254: PPUSH
16255: LD_INT 1
16257: PPUSH
16258: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16262: LD_INT 2
16264: PPUSH
16265: LD_VAR 0 3
16269: PPUSH
16270: LD_INT 1
16272: PPUSH
16273: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16277: LD_INT 3
16279: PPUSH
16280: LD_VAR 0 3
16284: PPUSH
16285: LD_INT 1
16287: PPUSH
16288: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16292: LD_INT 4
16294: PPUSH
16295: LD_VAR 0 3
16299: PPUSH
16300: LD_INT 1
16302: PPUSH
16303: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16307: LD_INT 6
16309: PPUSH
16310: LD_VAR 0 3
16314: PPUSH
16315: LD_INT 1
16317: PPUSH
16318: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16322: LD_INT 7
16324: PPUSH
16325: LD_VAR 0 3
16329: PPUSH
16330: LD_INT 1
16332: PPUSH
16333: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16337: LD_INT 8
16339: PPUSH
16340: LD_VAR 0 3
16344: PPUSH
16345: LD_INT 1
16347: PPUSH
16348: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16352: LD_INT 10
16354: PPUSH
16355: LD_VAR 0 3
16359: PPUSH
16360: LD_INT 1
16362: PPUSH
16363: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16367: LD_INT 15
16369: PPUSH
16370: LD_VAR 0 3
16374: PPUSH
16375: LD_INT 1
16377: PPUSH
16378: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16382: LD_INT 16
16384: PPUSH
16385: LD_VAR 0 3
16389: PPUSH
16390: LD_INT 1
16392: PPUSH
16393: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16397: LD_INT 17
16399: PPUSH
16400: LD_VAR 0 3
16404: PPUSH
16405: LD_INT 1
16407: PPUSH
16408: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16412: LD_INT 20
16414: PPUSH
16415: LD_VAR 0 3
16419: PPUSH
16420: LD_INT 1
16422: PPUSH
16423: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16427: LD_INT 26
16429: PPUSH
16430: LD_VAR 0 3
16434: PPUSH
16435: LD_INT 1
16437: PPUSH
16438: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16442: LD_INT 27
16444: PPUSH
16445: LD_VAR 0 3
16449: PPUSH
16450: LD_INT 1
16452: PPUSH
16453: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16457: LD_INT 29
16459: PPUSH
16460: LD_VAR 0 3
16464: PPUSH
16465: LD_INT 1
16467: PPUSH
16468: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16472: LD_INT 31
16474: PPUSH
16475: LD_VAR 0 3
16479: PPUSH
16480: LD_INT 1
16482: PPUSH
16483: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16487: LD_INT 32
16489: PPUSH
16490: LD_VAR 0 3
16494: PPUSH
16495: LD_INT 1
16497: PPUSH
16498: CALL_OW 324
// end ; 4 :
16502: GO 19589
16504: LD_INT 4
16506: DOUBLE
16507: EQUAL
16508: IFTRUE 16512
16510: GO 17460
16512: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16513: LD_INT 35
16515: PPUSH
16516: LD_VAR 0 3
16520: PPUSH
16521: LD_INT 1
16523: PPUSH
16524: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16528: LD_INT 45
16530: PPUSH
16531: LD_VAR 0 3
16535: PPUSH
16536: LD_INT 1
16538: PPUSH
16539: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16543: LD_INT 46
16545: PPUSH
16546: LD_VAR 0 3
16550: PPUSH
16551: LD_INT 1
16553: PPUSH
16554: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16558: LD_INT 47
16560: PPUSH
16561: LD_VAR 0 3
16565: PPUSH
16566: LD_INT 1
16568: PPUSH
16569: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16573: LD_INT 1
16575: PPUSH
16576: LD_VAR 0 3
16580: PPUSH
16581: LD_INT 1
16583: PPUSH
16584: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16588: LD_INT 2
16590: PPUSH
16591: LD_VAR 0 3
16595: PPUSH
16596: LD_INT 1
16598: PPUSH
16599: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16603: LD_INT 11
16605: PPUSH
16606: LD_VAR 0 3
16610: PPUSH
16611: LD_INT 1
16613: PPUSH
16614: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16618: LD_INT 20
16620: PPUSH
16621: LD_VAR 0 3
16625: PPUSH
16626: LD_INT 1
16628: PPUSH
16629: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16633: LD_INT 48
16635: PPUSH
16636: LD_VAR 0 3
16640: PPUSH
16641: LD_INT 1
16643: PPUSH
16644: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16648: LD_INT 49
16650: PPUSH
16651: LD_VAR 0 3
16655: PPUSH
16656: LD_INT 1
16658: PPUSH
16659: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16663: LD_INT 69
16665: PPUSH
16666: LD_VAR 0 3
16670: PPUSH
16671: LD_INT 1
16673: PPUSH
16674: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16678: LD_INT 39
16680: PPUSH
16681: LD_VAR 0 3
16685: PPUSH
16686: LD_INT 1
16688: PPUSH
16689: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16693: LD_INT 34
16695: PPUSH
16696: LD_VAR 0 3
16700: PPUSH
16701: LD_INT 1
16703: PPUSH
16704: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16708: LD_INT 42
16710: PPUSH
16711: LD_VAR 0 3
16715: PPUSH
16716: LD_INT 1
16718: PPUSH
16719: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16723: LD_INT 44
16725: PPUSH
16726: LD_VAR 0 3
16730: PPUSH
16731: LD_INT 1
16733: PPUSH
16734: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16738: LD_INT 41
16740: PPUSH
16741: LD_VAR 0 3
16745: PPUSH
16746: LD_INT 1
16748: PPUSH
16749: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16753: LD_INT 43
16755: PPUSH
16756: LD_VAR 0 3
16760: PPUSH
16761: LD_INT 1
16763: PPUSH
16764: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16768: LD_INT 70
16770: PPUSH
16771: LD_VAR 0 3
16775: PPUSH
16776: LD_INT 1
16778: PPUSH
16779: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16783: LD_INT 51
16785: PPUSH
16786: LD_VAR 0 3
16790: PPUSH
16791: LD_INT 1
16793: PPUSH
16794: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16798: LD_INT 52
16800: PPUSH
16801: LD_VAR 0 3
16805: PPUSH
16806: LD_INT 1
16808: PPUSH
16809: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16813: LD_INT 6
16815: PPUSH
16816: LD_VAR 0 3
16820: PPUSH
16821: LD_INT 1
16823: PPUSH
16824: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16828: LD_INT 15
16830: PPUSH
16831: LD_VAR 0 3
16835: PPUSH
16836: LD_INT 1
16838: PPUSH
16839: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16843: LD_INT 7
16845: PPUSH
16846: LD_VAR 0 3
16850: PPUSH
16851: LD_INT 1
16853: PPUSH
16854: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16858: LD_INT 12
16860: PPUSH
16861: LD_VAR 0 3
16865: PPUSH
16866: LD_INT 1
16868: PPUSH
16869: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16873: LD_INT 18
16875: PPUSH
16876: LD_VAR 0 3
16880: PPUSH
16881: LD_INT 1
16883: PPUSH
16884: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16888: LD_INT 60
16890: PPUSH
16891: LD_VAR 0 3
16895: PPUSH
16896: LD_INT 1
16898: PPUSH
16899: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16903: LD_INT 9
16905: PPUSH
16906: LD_VAR 0 3
16910: PPUSH
16911: LD_INT 1
16913: PPUSH
16914: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16918: LD_INT 30
16920: PPUSH
16921: LD_VAR 0 3
16925: PPUSH
16926: LD_INT 1
16928: PPUSH
16929: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16933: LD_INT 37
16935: PPUSH
16936: LD_VAR 0 3
16940: PPUSH
16941: LD_INT 1
16943: PPUSH
16944: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16948: LD_INT 5
16950: PPUSH
16951: LD_VAR 0 3
16955: PPUSH
16956: LD_INT 1
16958: PPUSH
16959: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16963: LD_INT 66
16965: PPUSH
16966: LD_VAR 0 3
16970: PPUSH
16971: LD_INT 1
16973: PPUSH
16974: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16978: LD_INT 21
16980: PPUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 1
16988: PPUSH
16989: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16993: LD_INT 22
16995: PPUSH
16996: LD_VAR 0 3
17000: PPUSH
17001: LD_INT 1
17003: PPUSH
17004: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17008: LD_INT 54
17010: PPUSH
17011: LD_VAR 0 3
17015: PPUSH
17016: LD_INT 1
17018: PPUSH
17019: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17023: LD_INT 0
17025: PPUSH
17026: LD_VAR 0 3
17030: PPUSH
17031: LD_INT 1
17033: PPUSH
17034: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17038: LD_INT 1
17040: PPUSH
17041: LD_VAR 0 3
17045: PPUSH
17046: LD_INT 1
17048: PPUSH
17049: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17053: LD_INT 2
17055: PPUSH
17056: LD_VAR 0 3
17060: PPUSH
17061: LD_INT 1
17063: PPUSH
17064: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17068: LD_INT 3
17070: PPUSH
17071: LD_VAR 0 3
17075: PPUSH
17076: LD_INT 1
17078: PPUSH
17079: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17083: LD_INT 4
17085: PPUSH
17086: LD_VAR 0 3
17090: PPUSH
17091: LD_INT 1
17093: PPUSH
17094: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17098: LD_INT 5
17100: PPUSH
17101: LD_VAR 0 3
17105: PPUSH
17106: LD_INT 1
17108: PPUSH
17109: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17113: LD_INT 6
17115: PPUSH
17116: LD_VAR 0 3
17120: PPUSH
17121: LD_INT 1
17123: PPUSH
17124: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17128: LD_INT 7
17130: PPUSH
17131: LD_VAR 0 3
17135: PPUSH
17136: LD_INT 1
17138: PPUSH
17139: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17143: LD_INT 8
17145: PPUSH
17146: LD_VAR 0 3
17150: PPUSH
17151: LD_INT 1
17153: PPUSH
17154: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17158: LD_INT 10
17160: PPUSH
17161: LD_VAR 0 3
17165: PPUSH
17166: LD_INT 1
17168: PPUSH
17169: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17173: LD_INT 11
17175: PPUSH
17176: LD_VAR 0 3
17180: PPUSH
17181: LD_INT 1
17183: PPUSH
17184: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17188: LD_INT 12
17190: PPUSH
17191: LD_VAR 0 3
17195: PPUSH
17196: LD_INT 1
17198: PPUSH
17199: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17203: LD_INT 13
17205: PPUSH
17206: LD_VAR 0 3
17210: PPUSH
17211: LD_INT 1
17213: PPUSH
17214: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17218: LD_INT 14
17220: PPUSH
17221: LD_VAR 0 3
17225: PPUSH
17226: LD_INT 1
17228: PPUSH
17229: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17233: LD_INT 15
17235: PPUSH
17236: LD_VAR 0 3
17240: PPUSH
17241: LD_INT 1
17243: PPUSH
17244: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17248: LD_INT 16
17250: PPUSH
17251: LD_VAR 0 3
17255: PPUSH
17256: LD_INT 1
17258: PPUSH
17259: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17263: LD_INT 17
17265: PPUSH
17266: LD_VAR 0 3
17270: PPUSH
17271: LD_INT 1
17273: PPUSH
17274: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17278: LD_INT 19
17280: PPUSH
17281: LD_VAR 0 3
17285: PPUSH
17286: LD_INT 1
17288: PPUSH
17289: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17293: LD_INT 20
17295: PPUSH
17296: LD_VAR 0 3
17300: PPUSH
17301: LD_INT 1
17303: PPUSH
17304: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17308: LD_INT 21
17310: PPUSH
17311: LD_VAR 0 3
17315: PPUSH
17316: LD_INT 1
17318: PPUSH
17319: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17323: LD_INT 23
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: LD_INT 1
17333: PPUSH
17334: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17338: LD_INT 26
17340: PPUSH
17341: LD_VAR 0 3
17345: PPUSH
17346: LD_INT 1
17348: PPUSH
17349: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17353: LD_INT 27
17355: PPUSH
17356: LD_VAR 0 3
17360: PPUSH
17361: LD_INT 1
17363: PPUSH
17364: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17368: LD_INT 28
17370: PPUSH
17371: LD_VAR 0 3
17375: PPUSH
17376: LD_INT 1
17378: PPUSH
17379: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17383: LD_INT 29
17385: PPUSH
17386: LD_VAR 0 3
17390: PPUSH
17391: LD_INT 1
17393: PPUSH
17394: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17398: LD_INT 30
17400: PPUSH
17401: LD_VAR 0 3
17405: PPUSH
17406: LD_INT 1
17408: PPUSH
17409: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17413: LD_INT 31
17415: PPUSH
17416: LD_VAR 0 3
17420: PPUSH
17421: LD_INT 1
17423: PPUSH
17424: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17428: LD_INT 32
17430: PPUSH
17431: LD_VAR 0 3
17435: PPUSH
17436: LD_INT 1
17438: PPUSH
17439: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17443: LD_INT 36
17445: PPUSH
17446: LD_VAR 0 3
17450: PPUSH
17451: LD_INT 1
17453: PPUSH
17454: CALL_OW 324
// end ; 5 :
17458: GO 19589
17460: LD_INT 5
17462: DOUBLE
17463: EQUAL
17464: IFTRUE 17468
17466: GO 18581
17468: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17469: LD_INT 35
17471: PPUSH
17472: LD_VAR 0 3
17476: PPUSH
17477: LD_INT 1
17479: PPUSH
17480: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17484: LD_INT 45
17486: PPUSH
17487: LD_VAR 0 3
17491: PPUSH
17492: LD_INT 1
17494: PPUSH
17495: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17499: LD_INT 46
17501: PPUSH
17502: LD_VAR 0 3
17506: PPUSH
17507: LD_INT 1
17509: PPUSH
17510: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17514: LD_INT 47
17516: PPUSH
17517: LD_VAR 0 3
17521: PPUSH
17522: LD_INT 1
17524: PPUSH
17525: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17529: LD_INT 1
17531: PPUSH
17532: LD_VAR 0 3
17536: PPUSH
17537: LD_INT 1
17539: PPUSH
17540: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17544: LD_INT 2
17546: PPUSH
17547: LD_VAR 0 3
17551: PPUSH
17552: LD_INT 1
17554: PPUSH
17555: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17559: LD_INT 11
17561: PPUSH
17562: LD_VAR 0 3
17566: PPUSH
17567: LD_INT 1
17569: PPUSH
17570: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17574: LD_INT 20
17576: PPUSH
17577: LD_VAR 0 3
17581: PPUSH
17582: LD_INT 1
17584: PPUSH
17585: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17589: LD_INT 48
17591: PPUSH
17592: LD_VAR 0 3
17596: PPUSH
17597: LD_INT 1
17599: PPUSH
17600: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17604: LD_INT 49
17606: PPUSH
17607: LD_VAR 0 3
17611: PPUSH
17612: LD_INT 1
17614: PPUSH
17615: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17619: LD_INT 69
17621: PPUSH
17622: LD_VAR 0 3
17626: PPUSH
17627: LD_INT 1
17629: PPUSH
17630: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17634: LD_INT 39
17636: PPUSH
17637: LD_VAR 0 3
17641: PPUSH
17642: LD_INT 1
17644: PPUSH
17645: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17649: LD_INT 34
17651: PPUSH
17652: LD_VAR 0 3
17656: PPUSH
17657: LD_INT 1
17659: PPUSH
17660: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17664: LD_INT 42
17666: PPUSH
17667: LD_VAR 0 3
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17679: LD_INT 44
17681: PPUSH
17682: LD_VAR 0 3
17686: PPUSH
17687: LD_INT 1
17689: PPUSH
17690: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17694: LD_INT 41
17696: PPUSH
17697: LD_VAR 0 3
17701: PPUSH
17702: LD_INT 1
17704: PPUSH
17705: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17709: LD_INT 40
17711: PPUSH
17712: LD_VAR 0 3
17716: PPUSH
17717: LD_INT 1
17719: PPUSH
17720: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17724: LD_INT 43
17726: PPUSH
17727: LD_VAR 0 3
17731: PPUSH
17732: LD_INT 1
17734: PPUSH
17735: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17739: LD_INT 70
17741: PPUSH
17742: LD_VAR 0 3
17746: PPUSH
17747: LD_INT 1
17749: PPUSH
17750: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17754: LD_INT 51
17756: PPUSH
17757: LD_VAR 0 3
17761: PPUSH
17762: LD_INT 1
17764: PPUSH
17765: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17769: LD_INT 52
17771: PPUSH
17772: LD_VAR 0 3
17776: PPUSH
17777: LD_INT 1
17779: PPUSH
17780: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17784: LD_INT 6
17786: PPUSH
17787: LD_VAR 0 3
17791: PPUSH
17792: LD_INT 1
17794: PPUSH
17795: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17799: LD_INT 15
17801: PPUSH
17802: LD_VAR 0 3
17806: PPUSH
17807: LD_INT 1
17809: PPUSH
17810: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17814: LD_INT 7
17816: PPUSH
17817: LD_VAR 0 3
17821: PPUSH
17822: LD_INT 1
17824: PPUSH
17825: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17829: LD_INT 12
17831: PPUSH
17832: LD_VAR 0 3
17836: PPUSH
17837: LD_INT 1
17839: PPUSH
17840: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17844: LD_INT 17
17846: PPUSH
17847: LD_VAR 0 3
17851: PPUSH
17852: LD_INT 1
17854: PPUSH
17855: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17859: LD_INT 18
17861: PPUSH
17862: LD_VAR 0 3
17866: PPUSH
17867: LD_INT 1
17869: PPUSH
17870: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17874: LD_INT 60
17876: PPUSH
17877: LD_VAR 0 3
17881: PPUSH
17882: LD_INT 1
17884: PPUSH
17885: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17889: LD_INT 32
17891: PPUSH
17892: LD_VAR 0 3
17896: PPUSH
17897: LD_INT 1
17899: PPUSH
17900: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17904: LD_INT 9
17906: PPUSH
17907: LD_VAR 0 3
17911: PPUSH
17912: LD_INT 1
17914: PPUSH
17915: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17919: LD_INT 57
17921: PPUSH
17922: LD_VAR 0 3
17926: PPUSH
17927: LD_INT 1
17929: PPUSH
17930: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17934: LD_INT 30
17936: PPUSH
17937: LD_VAR 0 3
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17949: LD_INT 37
17951: PPUSH
17952: LD_VAR 0 3
17956: PPUSH
17957: LD_INT 1
17959: PPUSH
17960: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17964: LD_INT 63
17966: PPUSH
17967: LD_VAR 0 3
17971: PPUSH
17972: LD_INT 1
17974: PPUSH
17975: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17979: LD_INT 3
17981: PPUSH
17982: LD_VAR 0 3
17986: PPUSH
17987: LD_INT 1
17989: PPUSH
17990: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17994: LD_INT 4
17996: PPUSH
17997: LD_VAR 0 3
18001: PPUSH
18002: LD_INT 1
18004: PPUSH
18005: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18009: LD_INT 5
18011: PPUSH
18012: LD_VAR 0 3
18016: PPUSH
18017: LD_INT 1
18019: PPUSH
18020: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18024: LD_INT 66
18026: PPUSH
18027: LD_VAR 0 3
18031: PPUSH
18032: LD_INT 1
18034: PPUSH
18035: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18039: LD_INT 21
18041: PPUSH
18042: LD_VAR 0 3
18046: PPUSH
18047: LD_INT 1
18049: PPUSH
18050: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18054: LD_INT 22
18056: PPUSH
18057: LD_VAR 0 3
18061: PPUSH
18062: LD_INT 1
18064: PPUSH
18065: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18069: LD_INT 19
18071: PPUSH
18072: LD_VAR 0 3
18076: PPUSH
18077: LD_INT 1
18079: PPUSH
18080: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18084: LD_INT 54
18086: PPUSH
18087: LD_VAR 0 3
18091: PPUSH
18092: LD_INT 1
18094: PPUSH
18095: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18099: LD_INT 55
18101: PPUSH
18102: LD_VAR 0 3
18106: PPUSH
18107: LD_INT 1
18109: PPUSH
18110: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18114: LD_INT 0
18116: PPUSH
18117: LD_VAR 0 3
18121: PPUSH
18122: LD_INT 1
18124: PPUSH
18125: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18129: LD_INT 1
18131: PPUSH
18132: LD_VAR 0 3
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18144: LD_INT 2
18146: PPUSH
18147: LD_VAR 0 3
18151: PPUSH
18152: LD_INT 1
18154: PPUSH
18155: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18159: LD_INT 3
18161: PPUSH
18162: LD_VAR 0 3
18166: PPUSH
18167: LD_INT 1
18169: PPUSH
18170: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18174: LD_INT 4
18176: PPUSH
18177: LD_VAR 0 3
18181: PPUSH
18182: LD_INT 1
18184: PPUSH
18185: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18189: LD_INT 5
18191: PPUSH
18192: LD_VAR 0 3
18196: PPUSH
18197: LD_INT 1
18199: PPUSH
18200: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18204: LD_INT 6
18206: PPUSH
18207: LD_VAR 0 3
18211: PPUSH
18212: LD_INT 1
18214: PPUSH
18215: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18219: LD_INT 7
18221: PPUSH
18222: LD_VAR 0 3
18226: PPUSH
18227: LD_INT 1
18229: PPUSH
18230: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18234: LD_INT 8
18236: PPUSH
18237: LD_VAR 0 3
18241: PPUSH
18242: LD_INT 1
18244: PPUSH
18245: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18249: LD_INT 10
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: LD_INT 1
18259: PPUSH
18260: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18264: LD_INT 11
18266: PPUSH
18267: LD_VAR 0 3
18271: PPUSH
18272: LD_INT 1
18274: PPUSH
18275: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18279: LD_INT 12
18281: PPUSH
18282: LD_VAR 0 3
18286: PPUSH
18287: LD_INT 1
18289: PPUSH
18290: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18294: LD_INT 13
18296: PPUSH
18297: LD_VAR 0 3
18301: PPUSH
18302: LD_INT 1
18304: PPUSH
18305: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18309: LD_INT 14
18311: PPUSH
18312: LD_VAR 0 3
18316: PPUSH
18317: LD_INT 1
18319: PPUSH
18320: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18324: LD_INT 15
18326: PPUSH
18327: LD_VAR 0 3
18331: PPUSH
18332: LD_INT 1
18334: PPUSH
18335: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18339: LD_INT 16
18341: PPUSH
18342: LD_VAR 0 3
18346: PPUSH
18347: LD_INT 1
18349: PPUSH
18350: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18354: LD_INT 17
18356: PPUSH
18357: LD_VAR 0 3
18361: PPUSH
18362: LD_INT 1
18364: PPUSH
18365: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18369: LD_INT 18
18371: PPUSH
18372: LD_VAR 0 3
18376: PPUSH
18377: LD_INT 1
18379: PPUSH
18380: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18384: LD_INT 19
18386: PPUSH
18387: LD_VAR 0 3
18391: PPUSH
18392: LD_INT 1
18394: PPUSH
18395: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18399: LD_INT 20
18401: PPUSH
18402: LD_VAR 0 3
18406: PPUSH
18407: LD_INT 1
18409: PPUSH
18410: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18414: LD_INT 21
18416: PPUSH
18417: LD_VAR 0 3
18421: PPUSH
18422: LD_INT 1
18424: PPUSH
18425: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18429: LD_INT 23
18431: PPUSH
18432: LD_VAR 0 3
18436: PPUSH
18437: LD_INT 1
18439: PPUSH
18440: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18444: LD_INT 26
18446: PPUSH
18447: LD_VAR 0 3
18451: PPUSH
18452: LD_INT 1
18454: PPUSH
18455: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18459: LD_INT 27
18461: PPUSH
18462: LD_VAR 0 3
18466: PPUSH
18467: LD_INT 1
18469: PPUSH
18470: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18474: LD_INT 28
18476: PPUSH
18477: LD_VAR 0 3
18481: PPUSH
18482: LD_INT 1
18484: PPUSH
18485: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18489: LD_INT 29
18491: PPUSH
18492: LD_VAR 0 3
18496: PPUSH
18497: LD_INT 1
18499: PPUSH
18500: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18504: LD_INT 30
18506: PPUSH
18507: LD_VAR 0 3
18511: PPUSH
18512: LD_INT 1
18514: PPUSH
18515: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18519: LD_INT 31
18521: PPUSH
18522: LD_VAR 0 3
18526: PPUSH
18527: LD_INT 1
18529: PPUSH
18530: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18534: LD_INT 32
18536: PPUSH
18537: LD_VAR 0 3
18541: PPUSH
18542: LD_INT 1
18544: PPUSH
18545: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18549: LD_INT 33
18551: PPUSH
18552: LD_VAR 0 3
18556: PPUSH
18557: LD_INT 1
18559: PPUSH
18560: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18564: LD_INT 36
18566: PPUSH
18567: LD_VAR 0 3
18571: PPUSH
18572: LD_INT 1
18574: PPUSH
18575: CALL_OW 324
// end ; 6 :
18579: GO 19589
18581: LD_INT 6
18583: DOUBLE
18584: EQUAL
18585: IFTRUE 18589
18587: GO 19514
18589: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18590: LD_INT 35
18592: PPUSH
18593: LD_VAR 0 3
18597: PPUSH
18598: LD_INT 1
18600: PPUSH
18601: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18605: LD_INT 45
18607: PPUSH
18608: LD_VAR 0 3
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18620: LD_INT 46
18622: PPUSH
18623: LD_VAR 0 3
18627: PPUSH
18628: LD_INT 1
18630: PPUSH
18631: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18635: LD_INT 47
18637: PPUSH
18638: LD_VAR 0 3
18642: PPUSH
18643: LD_INT 1
18645: PPUSH
18646: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18650: LD_INT 1
18652: PPUSH
18653: LD_VAR 0 3
18657: PPUSH
18658: LD_INT 1
18660: PPUSH
18661: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18665: LD_INT 2
18667: PPUSH
18668: LD_VAR 0 3
18672: PPUSH
18673: LD_INT 1
18675: PPUSH
18676: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18680: LD_INT 11
18682: PPUSH
18683: LD_VAR 0 3
18687: PPUSH
18688: LD_INT 1
18690: PPUSH
18691: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18695: LD_INT 20
18697: PPUSH
18698: LD_VAR 0 3
18702: PPUSH
18703: LD_INT 1
18705: PPUSH
18706: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18710: LD_INT 48
18712: PPUSH
18713: LD_VAR 0 3
18717: PPUSH
18718: LD_INT 1
18720: PPUSH
18721: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18725: LD_INT 49
18727: PPUSH
18728: LD_VAR 0 3
18732: PPUSH
18733: LD_INT 1
18735: PPUSH
18736: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18740: LD_INT 50
18742: PPUSH
18743: LD_VAR 0 3
18747: PPUSH
18748: LD_INT 1
18750: PPUSH
18751: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18755: LD_INT 69
18757: PPUSH
18758: LD_VAR 0 3
18762: PPUSH
18763: LD_INT 1
18765: PPUSH
18766: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18770: LD_INT 39
18772: PPUSH
18773: LD_VAR 0 3
18777: PPUSH
18778: LD_INT 1
18780: PPUSH
18781: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18785: LD_INT 34
18787: PPUSH
18788: LD_VAR 0 3
18792: PPUSH
18793: LD_INT 1
18795: PPUSH
18796: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18800: LD_INT 42
18802: PPUSH
18803: LD_VAR 0 3
18807: PPUSH
18808: LD_INT 1
18810: PPUSH
18811: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18815: LD_INT 44
18817: PPUSH
18818: LD_VAR 0 3
18822: PPUSH
18823: LD_INT 1
18825: PPUSH
18826: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18830: LD_INT 41
18832: PPUSH
18833: LD_VAR 0 3
18837: PPUSH
18838: LD_INT 1
18840: PPUSH
18841: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18845: LD_INT 13
18847: PPUSH
18848: LD_VAR 0 3
18852: PPUSH
18853: LD_INT 1
18855: PPUSH
18856: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18860: LD_INT 40
18862: PPUSH
18863: LD_VAR 0 3
18867: PPUSH
18868: LD_INT 1
18870: PPUSH
18871: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18875: LD_INT 43
18877: PPUSH
18878: LD_VAR 0 3
18882: PPUSH
18883: LD_INT 1
18885: PPUSH
18886: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18890: LD_INT 70
18892: PPUSH
18893: LD_VAR 0 3
18897: PPUSH
18898: LD_INT 1
18900: PPUSH
18901: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18905: LD_INT 23
18907: PPUSH
18908: LD_VAR 0 3
18912: PPUSH
18913: LD_INT 1
18915: PPUSH
18916: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18920: LD_INT 51
18922: PPUSH
18923: LD_VAR 0 3
18927: PPUSH
18928: LD_INT 1
18930: PPUSH
18931: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18935: LD_INT 52
18937: PPUSH
18938: LD_VAR 0 3
18942: PPUSH
18943: LD_INT 1
18945: PPUSH
18946: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18950: LD_INT 6
18952: PPUSH
18953: LD_VAR 0 3
18957: PPUSH
18958: LD_INT 1
18960: PPUSH
18961: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18965: LD_INT 15
18967: PPUSH
18968: LD_VAR 0 3
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18980: LD_INT 7
18982: PPUSH
18983: LD_VAR 0 3
18987: PPUSH
18988: LD_INT 1
18990: PPUSH
18991: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18995: LD_INT 12
18997: PPUSH
18998: LD_VAR 0 3
19002: PPUSH
19003: LD_INT 1
19005: PPUSH
19006: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19010: LD_INT 10
19012: PPUSH
19013: LD_VAR 0 3
19017: PPUSH
19018: LD_INT 1
19020: PPUSH
19021: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19025: LD_INT 17
19027: PPUSH
19028: LD_VAR 0 3
19032: PPUSH
19033: LD_INT 1
19035: PPUSH
19036: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19040: LD_INT 18
19042: PPUSH
19043: LD_VAR 0 3
19047: PPUSH
19048: LD_INT 1
19050: PPUSH
19051: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19055: LD_INT 60
19057: PPUSH
19058: LD_VAR 0 3
19062: PPUSH
19063: LD_INT 1
19065: PPUSH
19066: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19070: LD_INT 61
19072: PPUSH
19073: LD_VAR 0 3
19077: PPUSH
19078: LD_INT 1
19080: PPUSH
19081: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19085: LD_INT 32
19087: PPUSH
19088: LD_VAR 0 3
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19100: LD_INT 27
19102: PPUSH
19103: LD_VAR 0 3
19107: PPUSH
19108: LD_INT 1
19110: PPUSH
19111: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19115: LD_INT 36
19117: PPUSH
19118: LD_VAR 0 3
19122: PPUSH
19123: LD_INT 1
19125: PPUSH
19126: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19130: LD_INT 33
19132: PPUSH
19133: LD_VAR 0 3
19137: PPUSH
19138: LD_INT 1
19140: PPUSH
19141: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19145: LD_INT 9
19147: PPUSH
19148: LD_VAR 0 3
19152: PPUSH
19153: LD_INT 1
19155: PPUSH
19156: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19160: LD_INT 38
19162: PPUSH
19163: LD_VAR 0 3
19167: PPUSH
19168: LD_INT 1
19170: PPUSH
19171: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19175: LD_INT 57
19177: PPUSH
19178: LD_VAR 0 3
19182: PPUSH
19183: LD_INT 1
19185: PPUSH
19186: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19190: LD_INT 58
19192: PPUSH
19193: LD_VAR 0 3
19197: PPUSH
19198: LD_INT 1
19200: PPUSH
19201: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19205: LD_INT 28
19207: PPUSH
19208: LD_VAR 0 3
19212: PPUSH
19213: LD_INT 1
19215: PPUSH
19216: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19220: LD_INT 29
19222: PPUSH
19223: LD_VAR 0 3
19227: PPUSH
19228: LD_INT 1
19230: PPUSH
19231: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19235: LD_INT 30
19237: PPUSH
19238: LD_VAR 0 3
19242: PPUSH
19243: LD_INT 1
19245: PPUSH
19246: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19250: LD_INT 37
19252: PPUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: LD_INT 1
19260: PPUSH
19261: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19265: LD_INT 63
19267: PPUSH
19268: LD_VAR 0 3
19272: PPUSH
19273: LD_INT 1
19275: PPUSH
19276: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19280: LD_INT 64
19282: PPUSH
19283: LD_VAR 0 3
19287: PPUSH
19288: LD_INT 1
19290: PPUSH
19291: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19295: LD_INT 3
19297: PPUSH
19298: LD_VAR 0 3
19302: PPUSH
19303: LD_INT 1
19305: PPUSH
19306: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19310: LD_INT 4
19312: PPUSH
19313: LD_VAR 0 3
19317: PPUSH
19318: LD_INT 1
19320: PPUSH
19321: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19325: LD_INT 5
19327: PPUSH
19328: LD_VAR 0 3
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19340: LD_INT 8
19342: PPUSH
19343: LD_VAR 0 3
19347: PPUSH
19348: LD_INT 1
19350: PPUSH
19351: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19355: LD_INT 66
19357: PPUSH
19358: LD_VAR 0 3
19362: PPUSH
19363: LD_INT 1
19365: PPUSH
19366: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19370: LD_INT 67
19372: PPUSH
19373: LD_VAR 0 3
19377: PPUSH
19378: LD_INT 1
19380: PPUSH
19381: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19385: LD_INT 21
19387: PPUSH
19388: LD_VAR 0 3
19392: PPUSH
19393: LD_INT 1
19395: PPUSH
19396: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19400: LD_INT 22
19402: PPUSH
19403: LD_VAR 0 3
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19415: LD_INT 19
19417: PPUSH
19418: LD_VAR 0 3
19422: PPUSH
19423: LD_INT 1
19425: PPUSH
19426: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19430: LD_INT 26
19432: PPUSH
19433: LD_VAR 0 3
19437: PPUSH
19438: LD_INT 1
19440: PPUSH
19441: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19445: LD_INT 54
19447: PPUSH
19448: LD_VAR 0 3
19452: PPUSH
19453: LD_INT 1
19455: PPUSH
19456: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19460: LD_INT 55
19462: PPUSH
19463: LD_VAR 0 3
19467: PPUSH
19468: LD_INT 1
19470: PPUSH
19471: CALL_OW 322
// for i = 0 to 39 do
19475: LD_ADDR_VAR 0 4
19479: PUSH
19480: DOUBLE
19481: LD_INT 0
19483: DEC
19484: ST_TO_ADDR
19485: LD_INT 39
19487: PUSH
19488: FOR_TO
19489: IFFALSE 19510
// SetRestrict ( i , side , true ) ;
19491: LD_VAR 0 4
19495: PPUSH
19496: LD_VAR 0 3
19500: PPUSH
19501: LD_INT 1
19503: PPUSH
19504: CALL_OW 324
19508: GO 19488
19510: POP
19511: POP
// end ; else
19512: GO 19589
19514: POP
// begin for i = 1 to 73 do
19515: LD_ADDR_VAR 0 4
19519: PUSH
19520: DOUBLE
19521: LD_INT 1
19523: DEC
19524: ST_TO_ADDR
19525: LD_INT 73
19527: PUSH
19528: FOR_TO
19529: IFFALSE 19550
// SetTech ( i , side , state_enabled ) ;
19531: LD_VAR 0 4
19535: PPUSH
19536: LD_VAR 0 3
19540: PPUSH
19541: LD_INT 1
19543: PPUSH
19544: CALL_OW 322
19548: GO 19528
19550: POP
19551: POP
// for i = 0 to 39 do
19552: LD_ADDR_VAR 0 4
19556: PUSH
19557: DOUBLE
19558: LD_INT 0
19560: DEC
19561: ST_TO_ADDR
19562: LD_INT 39
19564: PUSH
19565: FOR_TO
19566: IFFALSE 19587
// SetRestrict ( i , side , true ) ;
19568: LD_VAR 0 4
19572: PPUSH
19573: LD_VAR 0 3
19577: PPUSH
19578: LD_INT 1
19580: PPUSH
19581: CALL_OW 324
19585: GO 19565
19587: POP
19588: POP
// end ; end ; end ;
19589: GO 15594
19591: POP
19592: POP
// end ; end_of_file
19593: LD_VAR 0 2
19597: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
19598: LD_INT 0
19600: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
19601: LD_VAR 0 1
19605: PPUSH
19606: LD_VAR 0 2
19610: PPUSH
19611: LD_VAR 0 3
19615: PPUSH
19616: LD_INT 0
19618: PPUSH
19619: CALL 19628 0 4
// end ;
19623: LD_VAR 0 4
19627: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
19628: LD_INT 0
19630: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
19631: LD_STRING initScore({
19633: PUSH
19634: LD_VAR 0 1
19638: PUSH
19639: LD_INT 1
19641: ARRAY
19642: STR
19643: PUSH
19644: LD_STRING ,
19646: STR
19647: PUSH
19648: LD_VAR 0 1
19652: PUSH
19653: LD_INT 2
19655: ARRAY
19656: STR
19657: PUSH
19658: LD_STRING ,
19660: STR
19661: PUSH
19662: LD_VAR 0 1
19666: PUSH
19667: LD_INT 3
19669: ARRAY
19670: STR
19671: PUSH
19672: LD_STRING ,
19674: STR
19675: PUSH
19676: LD_VAR 0 1
19680: PUSH
19681: LD_INT 4
19683: ARRAY
19684: STR
19685: PUSH
19686: LD_STRING ,
19688: STR
19689: PUSH
19690: LD_VAR 0 1
19694: PUSH
19695: LD_INT 5
19697: ARRAY
19698: STR
19699: PUSH
19700: LD_STRING ,
19702: STR
19703: PUSH
19704: LD_VAR 0 1
19708: PUSH
19709: LD_INT 6
19711: ARRAY
19712: STR
19713: PUSH
19714: LD_STRING ,
19716: STR
19717: PUSH
19718: LD_VAR 0 1
19722: PUSH
19723: LD_INT 7
19725: ARRAY
19726: STR
19727: PUSH
19728: LD_STRING ,
19730: STR
19731: PUSH
19732: LD_VAR 0 1
19736: PUSH
19737: LD_INT 8
19739: ARRAY
19740: STR
19741: PUSH
19742: LD_STRING },
19744: STR
19745: PUSH
19746: LD_VAR 0 2
19750: STR
19751: PUSH
19752: LD_STRING ,
19754: STR
19755: PUSH
19756: LD_VAR 0 3
19760: STR
19761: PUSH
19762: LD_STRING ,
19764: STR
19765: PUSH
19766: LD_VAR 0 4
19770: STR
19771: PUSH
19772: LD_STRING );
19774: STR
19775: PPUSH
19776: CALL_OW 559
// end ;
19780: LD_VAR 0 5
19784: RET
// export function LScore_Reset ( ) ; begin
19785: LD_INT 0
19787: PPUSH
// ToLua ( ResetScorebar(); ) ;
19788: LD_STRING ResetScorebar();
19790: PPUSH
19791: CALL_OW 559
// end ;
19795: LD_VAR 0 1
19799: RET
// export function LScore_Delete ( ID ) ; begin
19800: LD_INT 0
19802: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
19803: LD_STRING deleteScore(
19805: PUSH
19806: LD_VAR 0 1
19810: STR
19811: PUSH
19812: LD_STRING );
19814: STR
19815: PPUSH
19816: CALL_OW 559
// end ;
19820: LD_VAR 0 2
19824: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
19825: LD_INT 0
19827: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
19828: LD_STRING AST(
19830: PUSH
19831: LD_VAR 0 1
19835: STR
19836: PUSH
19837: LD_STRING ,
19839: STR
19840: PUSH
19841: LD_VAR 0 2
19845: STR
19846: PUSH
19847: LD_STRING ,
19849: STR
19850: PUSH
19851: LD_VAR 0 3
19855: STR
19856: PUSH
19857: LD_STRING ,);
19859: STR
19860: PPUSH
19861: CALL_OW 559
// end ;
19865: LD_VAR 0 4
19869: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
19870: LD_INT 0
19872: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
19873: LD_STRING AST(
19875: PUSH
19876: LD_VAR 0 1
19880: STR
19881: PUSH
19882: LD_STRING ,
19884: STR
19885: PUSH
19886: LD_VAR 0 2
19890: STR
19891: PUSH
19892: LD_STRING ,
19894: STR
19895: PUSH
19896: LD_VAR 0 3
19900: STR
19901: PUSH
19902: LD_STRING ,
19904: STR
19905: PUSH
19906: LD_VAR 0 4
19910: STR
19911: PUSH
19912: LD_STRING );
19914: STR
19915: PPUSH
19916: CALL_OW 559
// end ;
19920: LD_VAR 0 5
19924: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
19925: LD_INT 0
19927: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
19928: LD_STRING AST(
19930: PUSH
19931: LD_VAR 0 1
19935: STR
19936: PUSH
19937: LD_STRING ,
19939: STR
19940: PUSH
19941: LD_VAR 0 2
19945: STR
19946: PUSH
19947: LD_STRING ,
19949: STR
19950: PUSH
19951: LD_VAR 0 3
19955: STR
19956: PUSH
19957: LD_STRING ,
19959: STR
19960: PUSH
19961: LD_VAR 0 4
19965: STR
19966: PUSH
19967: LD_STRING ,
19969: STR
19970: PUSH
19971: LD_VAR 0 5
19975: STR
19976: PUSH
19977: LD_STRING );
19979: STR
19980: PPUSH
19981: CALL_OW 559
// end ;
19985: LD_VAR 0 6
19989: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
19990: LD_INT 0
19992: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
19993: LD_STRING ASRT(
19995: PUSH
19996: LD_VAR 0 1
20000: STR
20001: PUSH
20002: LD_STRING ,
20004: STR
20005: PUSH
20006: LD_VAR 0 2
20010: STR
20011: PUSH
20012: LD_STRING ,
20014: STR
20015: PUSH
20016: LD_VAR 0 3
20020: STR
20021: PUSH
20022: LD_STRING ,);
20024: STR
20025: PPUSH
20026: CALL_OW 559
// end ;
20030: LD_VAR 0 4
20034: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
20035: LD_INT 0
20037: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
20038: LD_STRING ASRT(
20040: PUSH
20041: LD_VAR 0 1
20045: STR
20046: PUSH
20047: LD_STRING ,
20049: STR
20050: PUSH
20051: LD_VAR 0 2
20055: STR
20056: PUSH
20057: LD_STRING ,
20059: STR
20060: PUSH
20061: LD_VAR 0 3
20065: STR
20066: PUSH
20067: LD_STRING ,
20069: STR
20070: PUSH
20071: LD_VAR 0 4
20075: STR
20076: PUSH
20077: LD_STRING );
20079: STR
20080: PPUSH
20081: CALL_OW 559
// end ;
20085: LD_VAR 0 5
20089: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
20090: LD_INT 0
20092: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
20093: LD_STRING ASRT(
20095: PUSH
20096: LD_VAR 0 1
20100: STR
20101: PUSH
20102: LD_STRING ,
20104: STR
20105: PUSH
20106: LD_VAR 0 2
20110: STR
20111: PUSH
20112: LD_STRING ,
20114: STR
20115: PUSH
20116: LD_VAR 0 3
20120: STR
20121: PUSH
20122: LD_STRING ,
20124: STR
20125: PUSH
20126: LD_VAR 0 4
20130: STR
20131: PUSH
20132: LD_STRING ,
20134: STR
20135: PUSH
20136: LD_VAR 0 5
20140: STR
20141: PUSH
20142: LD_STRING );
20144: STR
20145: PPUSH
20146: CALL_OW 559
// end ;
20150: LD_VAR 0 6
20154: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
20155: LD_INT 0
20157: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
20158: LD_STRING UST(
20160: PUSH
20161: LD_VAR 0 1
20165: STR
20166: PUSH
20167: LD_STRING ,
20169: STR
20170: PUSH
20171: LD_VAR 0 2
20175: STR
20176: PUSH
20177: LD_STRING );
20179: STR
20180: PPUSH
20181: CALL_OW 559
// end ;
20185: LD_VAR 0 3
20189: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
20190: LD_INT 0
20192: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
20193: LD_STRING UST(
20195: PUSH
20196: LD_VAR 0 1
20200: STR
20201: PUSH
20202: LD_STRING ,
20204: STR
20205: PUSH
20206: LD_VAR 0 2
20210: STR
20211: PUSH
20212: LD_STRING ,
20214: STR
20215: PUSH
20216: LD_VAR 0 3
20220: STR
20221: PUSH
20222: LD_STRING );
20224: STR
20225: PPUSH
20226: CALL_OW 559
// end ;
20230: LD_VAR 0 4
20234: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
20235: LD_INT 0
20237: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
20238: LD_STRING CCST(
20240: PUSH
20241: LD_VAR 0 1
20245: STR
20246: PUSH
20247: LD_STRING ,{
20249: STR
20250: PUSH
20251: LD_VAR 0 2
20255: STR
20256: PUSH
20257: LD_STRING ,
20259: STR
20260: PUSH
20261: LD_VAR 0 3
20265: STR
20266: PUSH
20267: LD_STRING ,
20269: STR
20270: PUSH
20271: LD_VAR 0 4
20275: STR
20276: PUSH
20277: LD_STRING });
20279: STR
20280: PPUSH
20281: CALL_OW 559
// end ;
20285: LD_VAR 0 5
20289: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
20290: LD_INT 0
20292: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
20293: LD_STRING CCST(
20295: PUSH
20296: LD_VAR 0 1
20300: STR
20301: PUSH
20302: LD_STRING ,
20304: STR
20305: PUSH
20306: LD_VAR 0 2
20310: STR
20311: PUSH
20312: LD_STRING );
20314: STR
20315: PPUSH
20316: CALL_OW 559
// end ;
20320: LD_VAR 0 3
20324: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
20325: LD_INT 0
20327: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
20328: LD_STRING ASSP(
20330: PUSH
20331: LD_VAR 0 1
20335: STR
20336: PUSH
20337: LD_STRING ,
20339: STR
20340: PUSH
20341: LD_VAR 0 2
20345: STR
20346: PUSH
20347: LD_STRING ,
20349: STR
20350: PUSH
20351: LD_VAR 0 3
20355: STR
20356: PUSH
20357: LD_STRING ,);
20359: STR
20360: PPUSH
20361: CALL_OW 559
// end ;
20365: LD_VAR 0 4
20369: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
20370: LD_INT 0
20372: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
20373: LD_STRING ASSP(
20375: PUSH
20376: LD_VAR 0 1
20380: STR
20381: PUSH
20382: LD_STRING ,
20384: STR
20385: PUSH
20386: LD_VAR 0 2
20390: STR
20391: PUSH
20392: LD_STRING ,
20394: STR
20395: PUSH
20396: LD_VAR 0 3
20400: STR
20401: PUSH
20402: LD_STRING ,
20404: STR
20405: PUSH
20406: LD_VAR 0 4
20410: STR
20411: PUSH
20412: LD_STRING );
20414: STR
20415: PPUSH
20416: CALL_OW 559
// end ;
20420: LD_VAR 0 5
20424: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
20425: LD_INT 0
20427: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
20428: LD_STRING ASSP(
20430: PUSH
20431: LD_VAR 0 1
20435: STR
20436: PUSH
20437: LD_STRING ,
20439: STR
20440: PUSH
20441: LD_VAR 0 2
20445: STR
20446: PUSH
20447: LD_STRING ,
20449: STR
20450: PUSH
20451: LD_VAR 0 3
20455: STR
20456: PUSH
20457: LD_STRING ,
20459: STR
20460: PUSH
20461: LD_VAR 0 4
20465: STR
20466: PUSH
20467: LD_STRING ,
20469: STR
20470: PUSH
20471: LD_VAR 0 5
20475: STR
20476: PUSH
20477: LD_STRING );
20479: STR
20480: PPUSH
20481: CALL_OW 559
// end ;
20485: LD_VAR 0 6
20489: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
20490: LD_INT 0
20492: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
20493: LD_STRING ASRSP(
20495: PUSH
20496: LD_VAR 0 1
20500: STR
20501: PUSH
20502: LD_STRING ,
20504: STR
20505: PUSH
20506: LD_VAR 0 2
20510: STR
20511: PUSH
20512: LD_STRING ,
20514: STR
20515: PUSH
20516: LD_VAR 0 3
20520: STR
20521: PUSH
20522: LD_STRING ,);
20524: STR
20525: PPUSH
20526: CALL_OW 559
// end ;
20530: LD_VAR 0 4
20534: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
20535: LD_INT 0
20537: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
20538: LD_STRING ASRSP(
20540: PUSH
20541: LD_VAR 0 1
20545: STR
20546: PUSH
20547: LD_STRING ,
20549: STR
20550: PUSH
20551: LD_VAR 0 2
20555: STR
20556: PUSH
20557: LD_STRING ,
20559: STR
20560: PUSH
20561: LD_VAR 0 3
20565: STR
20566: PUSH
20567: LD_STRING ,
20569: STR
20570: PUSH
20571: LD_VAR 0 4
20575: STR
20576: PUSH
20577: LD_STRING );
20579: STR
20580: PPUSH
20581: CALL_OW 559
// end ;
20585: LD_VAR 0 5
20589: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
20590: LD_INT 0
20592: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
20593: LD_STRING ASRSP(
20595: PUSH
20596: LD_VAR 0 1
20600: STR
20601: PUSH
20602: LD_STRING ,
20604: STR
20605: PUSH
20606: LD_VAR 0 2
20610: STR
20611: PUSH
20612: LD_STRING ,
20614: STR
20615: PUSH
20616: LD_VAR 0 3
20620: STR
20621: PUSH
20622: LD_STRING ,
20624: STR
20625: PUSH
20626: LD_VAR 0 4
20630: STR
20631: PUSH
20632: LD_STRING ,
20634: STR
20635: PUSH
20636: LD_VAR 0 5
20640: STR
20641: PUSH
20642: LD_STRING );
20644: STR
20645: PPUSH
20646: CALL_OW 559
// end ;
20650: LD_VAR 0 6
20654: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
20655: LD_INT 0
20657: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
20658: LD_STRING USSP(
20660: PUSH
20661: LD_VAR 0 1
20665: STR
20666: PUSH
20667: LD_STRING ,
20669: STR
20670: PUSH
20671: LD_VAR 0 2
20675: STR
20676: PUSH
20677: LD_STRING );
20679: STR
20680: PPUSH
20681: CALL_OW 559
// end ;
20685: LD_VAR 0 3
20689: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
20690: LD_INT 0
20692: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
20693: LD_STRING USSP(
20695: PUSH
20696: LD_VAR 0 1
20700: STR
20701: PUSH
20702: LD_STRING ,
20704: STR
20705: PUSH
20706: LD_VAR 0 2
20710: STR
20711: PUSH
20712: LD_STRING ,
20714: STR
20715: PUSH
20716: LD_VAR 0 3
20720: STR
20721: PUSH
20722: LD_STRING );
20724: STR
20725: PPUSH
20726: CALL_OW 559
// end ;
20730: LD_VAR 0 4
20734: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
20735: LD_INT 0
20737: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
20738: LD_STRING CCSSP(
20740: PUSH
20741: LD_VAR 0 1
20745: STR
20746: PUSH
20747: LD_STRING ,{
20749: STR
20750: PUSH
20751: LD_VAR 0 2
20755: STR
20756: PUSH
20757: LD_STRING ,
20759: STR
20760: PUSH
20761: LD_VAR 0 3
20765: STR
20766: PUSH
20767: LD_STRING ,
20769: STR
20770: PUSH
20771: LD_VAR 0 4
20775: STR
20776: PUSH
20777: LD_STRING });
20779: STR
20780: PPUSH
20781: CALL_OW 559
// end ;
20785: LD_VAR 0 5
20789: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
20790: LD_INT 0
20792: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
20793: LD_STRING CCSSP(
20795: PUSH
20796: LD_VAR 0 1
20800: STR
20801: PUSH
20802: LD_STRING ,
20804: STR
20805: PUSH
20806: LD_VAR 0 2
20810: STR
20811: PUSH
20812: LD_STRING );
20814: STR
20815: PPUSH
20816: CALL_OW 559
// end ;
20820: LD_VAR 0 3
20824: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
20825: LD_INT 0
20827: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
20828: LD_STRING ASP(
20830: PUSH
20831: LD_VAR 0 1
20835: STR
20836: PUSH
20837: LD_STRING ,
20839: STR
20840: PUSH
20841: LD_VAR 0 2
20845: STR
20846: PUSH
20847: LD_STRING ,
20849: STR
20850: PUSH
20851: LD_VAR 0 3
20855: STR
20856: PUSH
20857: LD_STRING );
20859: STR
20860: PPUSH
20861: CALL_OW 559
// end ;
20865: LD_VAR 0 4
20869: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
20870: LD_INT 0
20872: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
20873: LD_STRING USP(
20875: PUSH
20876: LD_VAR 0 1
20880: STR
20881: PUSH
20882: LD_STRING ,
20884: STR
20885: PUSH
20886: LD_VAR 0 2
20890: STR
20891: PUSH
20892: LD_STRING ,
20894: STR
20895: PUSH
20896: LD_VAR 0 3
20900: STR
20901: PUSH
20902: LD_STRING );
20904: STR
20905: PPUSH
20906: CALL_OW 559
// end ;
20910: LD_VAR 0 4
20914: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
20915: LD_INT 0
20917: PPUSH
20918: PPUSH
// for i = 1 to 8 do
20919: LD_ADDR_VAR 0 4
20923: PUSH
20924: DOUBLE
20925: LD_INT 1
20927: DEC
20928: ST_TO_ADDR
20929: LD_INT 8
20931: PUSH
20932: FOR_TO
20933: IFFALSE 20980
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
20935: LD_STRING USP(
20937: PUSH
20938: LD_VAR 0 1
20942: STR
20943: PUSH
20944: LD_STRING ,
20946: STR
20947: PUSH
20948: LD_VAR 0 4
20952: STR
20953: PUSH
20954: LD_STRING ,
20956: STR
20957: PUSH
20958: LD_VAR 0 2
20962: PUSH
20963: LD_VAR 0 4
20967: ARRAY
20968: STR
20969: PUSH
20970: LD_STRING );
20972: STR
20973: PPUSH
20974: CALL_OW 559
20978: GO 20932
20980: POP
20981: POP
// end ;
20982: LD_VAR 0 3
20986: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
20987: LD_INT 0
20989: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
20990: LD_STRING ASC(
20992: PUSH
20993: LD_VAR 0 1
20997: STR
20998: PUSH
20999: LD_STRING ,
21001: STR
21002: PUSH
21003: LD_VAR 0 2
21007: STR
21008: PUSH
21009: LD_STRING ,
21011: STR
21012: PUSH
21013: LD_VAR 0 3
21017: STR
21018: PUSH
21019: LD_STRING ,
21021: STR
21022: PUSH
21023: LD_VAR 0 4
21027: STR
21028: PUSH
21029: LD_STRING );
21031: STR
21032: PPUSH
21033: CALL_OW 559
// end ;
21037: LD_VAR 0 5
21041: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
21042: LD_INT 0
21044: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
21045: LD_STRING USC(
21047: PUSH
21048: LD_VAR 0 1
21052: STR
21053: PUSH
21054: LD_STRING ,{
21056: STR
21057: PUSH
21058: LD_VAR 0 2
21062: PUSH
21063: LD_INT 1
21065: ARRAY
21066: STR
21067: PUSH
21068: LD_STRING ,
21070: STR
21071: PUSH
21072: LD_VAR 0 2
21076: PUSH
21077: LD_INT 2
21079: ARRAY
21080: STR
21081: PUSH
21082: LD_STRING ,
21084: STR
21085: PUSH
21086: LD_VAR 0 2
21090: PUSH
21091: LD_INT 3
21093: ARRAY
21094: STR
21095: PUSH
21096: LD_STRING ,
21098: STR
21099: PUSH
21100: LD_VAR 0 2
21104: PUSH
21105: LD_INT 4
21107: ARRAY
21108: STR
21109: PUSH
21110: LD_STRING ,
21112: STR
21113: PUSH
21114: LD_VAR 0 2
21118: PUSH
21119: LD_INT 5
21121: ARRAY
21122: STR
21123: PUSH
21124: LD_STRING ,
21126: STR
21127: PUSH
21128: LD_VAR 0 2
21132: PUSH
21133: LD_INT 6
21135: ARRAY
21136: STR
21137: PUSH
21138: LD_STRING ,
21140: STR
21141: PUSH
21142: LD_VAR 0 2
21146: PUSH
21147: LD_INT 7
21149: ARRAY
21150: STR
21151: PUSH
21152: LD_STRING ,
21154: STR
21155: PUSH
21156: LD_VAR 0 2
21160: PUSH
21161: LD_INT 8
21163: ARRAY
21164: STR
21165: PUSH
21166: LD_STRING });
21168: STR
21169: PPUSH
21170: CALL_OW 559
// end ; end_of_file
21174: LD_VAR 0 3
21178: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , bases ; begin
21179: LD_INT 0
21181: PPUSH
21182: PPUSH
21183: PPUSH
21184: PPUSH
21185: PPUSH
21186: PPUSH
21187: PPUSH
21188: PPUSH
// for i := 1 to 8 do
21189: LD_ADDR_VAR 0 2
21193: PUSH
21194: DOUBLE
21195: LD_INT 1
21197: DEC
21198: ST_TO_ADDR
21199: LD_INT 8
21201: PUSH
21202: FOR_TO
21203: IFFALSE 21679
// begin if Side_Positions [ i ] then
21205: LD_EXP 21
21209: PUSH
21210: LD_VAR 0 2
21214: ARRAY
21215: IFFALSE 21677
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
21217: LD_ADDR_VAR 0 7
21221: PUSH
21222: LD_INT 22
21224: PUSH
21225: LD_VAR 0 2
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 21
21236: PUSH
21237: LD_INT 1
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PPUSH
21248: CALL_OW 69
21252: PUSH
21253: LD_INT 0
21255: PLUS
21256: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21257: LD_ADDR_VAR 0 8
21261: PUSH
21262: LD_INT 22
21264: PUSH
21265: LD_VAR 0 2
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 2
21276: PUSH
21277: LD_INT 30
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 30
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PPUSH
21306: CALL_OW 69
21310: ST_TO_ADDR
// crates := 0 ;
21311: LD_ADDR_VAR 0 4
21315: PUSH
21316: LD_INT 0
21318: ST_TO_ADDR
// oil := 0 ;
21319: LD_ADDR_VAR 0 5
21323: PUSH
21324: LD_INT 0
21326: ST_TO_ADDR
// sib := 0 ;
21327: LD_ADDR_VAR 0 6
21331: PUSH
21332: LD_INT 0
21334: ST_TO_ADDR
// if bases then
21335: LD_VAR 0 8
21339: IFFALSE 21445
// begin for j in bases do
21341: LD_ADDR_VAR 0 3
21345: PUSH
21346: LD_VAR 0 8
21350: PUSH
21351: FOR_IN
21352: IFFALSE 21443
// begin crates := crates + GetResourceType ( GetBase ( j ) , mat_cans ) ;
21354: LD_ADDR_VAR 0 4
21358: PUSH
21359: LD_VAR 0 4
21363: PUSH
21364: LD_VAR 0 3
21368: PPUSH
21369: CALL_OW 274
21373: PPUSH
21374: LD_INT 1
21376: PPUSH
21377: CALL_OW 275
21381: PLUS
21382: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( j ) , mat_oil ) ;
21383: LD_ADDR_VAR 0 5
21387: PUSH
21388: LD_VAR 0 5
21392: PUSH
21393: LD_VAR 0 3
21397: PPUSH
21398: CALL_OW 274
21402: PPUSH
21403: LD_INT 2
21405: PPUSH
21406: CALL_OW 275
21410: PLUS
21411: ST_TO_ADDR
// sib := sib + GetResourceType ( GetBase ( j ) , mat_siberit ) ;
21412: LD_ADDR_VAR 0 6
21416: PUSH
21417: LD_VAR 0 6
21421: PUSH
21422: LD_VAR 0 3
21426: PPUSH
21427: CALL_OW 274
21431: PPUSH
21432: LD_INT 3
21434: PPUSH
21435: CALL_OW 275
21439: PLUS
21440: ST_TO_ADDR
// end ;
21441: GO 21351
21443: POP
21444: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
21445: LD_STRING setSpecText(
21447: PUSH
21448: LD_VAR 0 2
21452: STR
21453: PUSH
21454: LD_STRING ,
21456: STR
21457: PUSH
21458: LD_INT 2
21460: STR
21461: PUSH
21462: LD_STRING ,
21464: STR
21465: PUSH
21466: LD_VAR 0 4
21470: STR
21471: PUSH
21472: LD_STRING )
21474: STR
21475: PPUSH
21476: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
21480: LD_STRING setSpecText(
21482: PUSH
21483: LD_VAR 0 2
21487: STR
21488: PUSH
21489: LD_STRING ,
21491: STR
21492: PUSH
21493: LD_INT 3
21495: STR
21496: PUSH
21497: LD_STRING ,
21499: STR
21500: PUSH
21501: LD_VAR 0 5
21505: STR
21506: PUSH
21507: LD_STRING )
21509: STR
21510: PPUSH
21511: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
21515: LD_STRING setSpecText(
21517: PUSH
21518: LD_VAR 0 2
21522: STR
21523: PUSH
21524: LD_STRING ,
21526: STR
21527: PUSH
21528: LD_INT 4
21530: STR
21531: PUSH
21532: LD_STRING ,
21534: STR
21535: PUSH
21536: LD_VAR 0 6
21540: STR
21541: PUSH
21542: LD_STRING )
21544: STR
21545: PPUSH
21546: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
21550: LD_STRING setSpecText(
21552: PUSH
21553: LD_VAR 0 2
21557: STR
21558: PUSH
21559: LD_STRING ,
21561: STR
21562: PUSH
21563: LD_INT 5
21565: STR
21566: PUSH
21567: LD_STRING ,
21569: STR
21570: PUSH
21571: LD_VAR 0 7
21575: STR
21576: PUSH
21577: LD_STRING )
21579: STR
21580: PPUSH
21581: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
21585: LD_STRING setSpecLogoNumber(
21587: PUSH
21588: LD_INT 2
21590: STR
21591: PUSH
21592: LD_STRING ,
21594: STR
21595: PUSH
21596: LD_INT 1
21598: STR
21599: PUSH
21600: LD_STRING )
21602: STR
21603: PPUSH
21604: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
21608: LD_STRING setSpecLogoNumber(
21610: PUSH
21611: LD_INT 3
21613: STR
21614: PUSH
21615: LD_STRING ,
21617: STR
21618: PUSH
21619: LD_INT 2
21621: STR
21622: PUSH
21623: LD_STRING )
21625: STR
21626: PPUSH
21627: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
21631: LD_STRING setSpecLogoNumber(
21633: PUSH
21634: LD_INT 4
21636: STR
21637: PUSH
21638: LD_STRING ,
21640: STR
21641: PUSH
21642: LD_INT 3
21644: STR
21645: PUSH
21646: LD_STRING )
21648: STR
21649: PPUSH
21650: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
21654: LD_STRING setSpecLogoNumber(
21656: PUSH
21657: LD_INT 5
21659: STR
21660: PUSH
21661: LD_STRING ,
21663: STR
21664: PUSH
21665: LD_INT 4
21667: STR
21668: PUSH
21669: LD_STRING )
21671: STR
21672: PPUSH
21673: CALL_OW 559
// end ; end ;
21677: GO 21202
21679: POP
21680: POP
// end ;
21681: LD_VAR 0 1
21685: RET
// every 20 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
21686: LD_INT 2
21688: PUSH
21689: LD_INT 30
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 30
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: PPUSH
21714: CALL_OW 69
21718: IFFALSE 21728
21720: GO 21722
21722: DISABLE
// begin enable ;
21723: ENABLE
// UpdateSpectatorBar ;
21724: CALL 21179 0 0
// end ;
21728: END
