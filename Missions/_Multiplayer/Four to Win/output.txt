// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_public_score , def_amount_score , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , amount_of_apemen , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , amount_score , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , king_territory , final_count , Player_Side , player_team ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if MultiPlayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type = mp_game_type ;
  79: LD_ADDR_EXP 18
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side = mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  99: LD_ADDR_EXP 37
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 109: LD_ADDR_EXP 34
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 119: LD_ADDR_EXP 38
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 36
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams = mp_teams ;
 139: LD_ADDR_EXP 35
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 352
// begin Game_Type = 3 ;
 151: LD_ADDR_EXP 18
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side = 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 37
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 34
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 38
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 36
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 323: LD_ADDR_EXP 35
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: ST_TO_ADDR
// end ; for i := 1 to 8 do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_INT 8
 364: PUSH
 365: FOR_TO
 366: IFFALSE 453
// if Multiplayer_GetPlayerIsSpec ( i ) then
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 530
 377: IFFALSE 451
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 379: LD_ADDR_EXP 37
 383: PUSH
 384: LD_EXP 37
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_INT 0
 396: PPUSH
 397: CALL_OW 1
 401: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 402: LD_ADDR_EXP 35
 406: PUSH
 407: LD_EXP 35
 411: PPUSH
 412: LD_EXP 34
 416: PUSH
 417: LD_VAR 0 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 35
 427: PUSH
 428: LD_EXP 34
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: ARRAY
 439: PUSH
 440: LD_VAR 0 2
 444: DIFF
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// end ;
 451: GO 365
 453: POP
 454: POP
// if MultiPlayer then
 455: LD_OWVAR 4
 459: IFFALSE 671
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 461: LD_ADDR_EXP 1
 465: PUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 474: LD_ADDR_EXP 2
 478: PUSH
 479: LD_INT 1
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 487: LD_ADDR_EXP 3
 491: PUSH
 492: LD_INT 2
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 500: LD_ADDR_EXP 4
 504: PUSH
 505: LD_INT 3
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 513: LD_ADDR_EXP 5
 517: PUSH
 518: LD_INT 4
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 526: LD_ADDR_EXP 6
 530: PUSH
 531: LD_INT 5
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 539: LD_ADDR_EXP 8
 543: PUSH
 544: LD_INT 10
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 552: LD_ADDR_EXP 9
 556: PUSH
 557: LD_INT 11
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 565: LD_ADDR_EXP 10
 569: PUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 13 ) ;
 578: LD_ADDR_EXP 11
 582: PUSH
 583: LD_INT 13
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 14 ) ;
 591: LD_ADDR_EXP 12
 595: PUSH
 596: LD_INT 14
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 604: LD_ADDR_EXP 13
 608: PUSH
 609: LD_INT 15
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_public_score = GetMultiplayerSetting ( 16 ) ;
 617: LD_ADDR_EXP 14
 621: PUSH
 622: LD_INT 16
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_amount_score = GetMultiplayerSetting ( 17 ) ;
 630: LD_ADDR_EXP 15
 634: PUSH
 635: LD_INT 17
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 643: LD_ADDR_EXP 16
 647: PUSH
 648: LD_INT 20
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 656: LD_ADDR_VAR 0 3
 660: PUSH
 661: LD_INT 22
 663: PPUSH
 664: CALL_OW 426
 668: ST_TO_ADDR
// end else
 669: GO 803
// begin randomize ;
 671: CALL_OW 10
// def_base_level = 3 ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_INT 3
 682: ST_TO_ADDR
// def_amount_of_people = 3 ;
 683: LD_ADDR_EXP 2
 687: PUSH
 688: LD_INT 3
 690: ST_TO_ADDR
// def_skill_level = 1 ;
 691: LD_ADDR_EXP 3
 695: PUSH
 696: LD_INT 1
 698: ST_TO_ADDR
// def_starting_resources = 2 ;
 699: LD_ADDR_EXP 4
 703: PUSH
 704: LD_INT 2
 706: ST_TO_ADDR
// def_shipments_density = 50 ;
 707: LD_ADDR_EXP 5
 711: PUSH
 712: LD_INT 50
 714: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
 715: LD_ADDR_EXP 6
 719: PUSH
 720: LD_INT 0
 722: ST_TO_ADDR
// def_shared_vision = 1 ;
 723: LD_ADDR_EXP 8
 727: PUSH
 728: LD_INT 1
 730: ST_TO_ADDR
// def_morale_flags = 1 ;
 731: LD_ADDR_EXP 9
 735: PUSH
 736: LD_INT 1
 738: ST_TO_ADDR
// def_siberite_detection = 1 ;
 739: LD_ADDR_EXP 10
 743: PUSH
 744: LD_INT 1
 746: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 747: LD_ADDR_EXP 12
 751: PUSH
 752: LD_INT 3
 754: ST_TO_ADDR
// def_people_respawning = 2 ;
 755: LD_ADDR_EXP 11
 759: PUSH
 760: LD_INT 2
 762: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 763: LD_ADDR_EXP 13
 767: PUSH
 768: LD_INT 0
 770: ST_TO_ADDR
// def_public_score = 1 ;
 771: LD_ADDR_EXP 14
 775: PUSH
 776: LD_INT 1
 778: ST_TO_ADDR
// def_amount_score = 0 ;
 779: LD_ADDR_EXP 15
 783: PUSH
 784: LD_INT 0
 786: ST_TO_ADDR
// def_builduptime = 1 ;
 787: LD_ADDR_EXP 16
 791: PUSH
 792: LD_INT 1
 794: ST_TO_ADDR
// tech_level = 4 ;
 795: LD_ADDR_VAR 0 3
 799: PUSH
 800: LD_INT 4
 802: ST_TO_ADDR
// end ; Player_Side = Your_Side ;
 803: LD_ADDR_EXP 47
 807: PUSH
 808: LD_OWVAR 2
 812: ST_TO_ADDR
// player_team = Side_Teams [ Player_Side ] ;
 813: LD_ADDR_EXP 48
 817: PUSH
 818: LD_EXP 34
 822: PUSH
 823: LD_EXP 47
 827: ARRAY
 828: ST_TO_ADDR
// if isSGUI then
 829: LD_OWVAR 83
 833: IFFALSE 841
// setMpTechs ( ) else
 835: CALL 12005 0 0
 839: GO 854
// SetMpTechLevel ( tech_level + 1 ) ;
 841: LD_VAR 0 3
 845: PUSH
 846: LD_INT 1
 848: PLUS
 849: PPUSH
 850: CALL 12152 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 854: LD_ADDR_EXP 19
 858: PUSH
 859: LD_INT 0
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 1
 867: PUSH
 868: LD_INT 1
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: LD_EXP 1
 881: PUSH
 882: LD_INT 1
 884: PLUS
 885: ARRAY
 886: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 887: LD_ADDR_EXP 20
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: LD_INT 0
 897: PUSH
 898: LD_INT 2
 900: PUSH
 901: LD_INT 4
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: LIST
 909: PUSH
 910: LD_EXP 1
 914: PUSH
 915: LD_INT 1
 917: PLUS
 918: ARRAY
 919: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 920: LD_ADDR_EXP 21
 924: PUSH
 925: LD_INT 9
 927: PUSH
 928: LD_INT 12
 930: PUSH
 931: LD_INT 15
 933: PUSH
 934: LD_INT 24
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: PUSH
 943: LD_EXP 2
 947: PUSH
 948: LD_INT 1
 950: PLUS
 951: ARRAY
 952: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 953: LD_ADDR_EXP 23
 957: PUSH
 958: LD_INT 2
 960: PUSH
 961: LD_INT 3
 963: PUSH
 964: LD_INT 4
 966: PUSH
 967: LD_INT 5
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: LIST
 974: LIST
 975: PUSH
 976: LD_EXP 3
 980: PUSH
 981: LD_INT 1
 983: PLUS
 984: ARRAY
 985: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 986: LD_ADDR_EXP 25
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: LD_INT 0
 996: PUSH
 997: LD_INT 0
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 30
1007: PUSH
1008: LD_INT 0
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: PUSH
1019: LD_INT 50
1021: PUSH
1022: LD_INT 20
1024: PUSH
1025: LD_INT 0
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_INT 80
1035: PUSH
1036: LD_INT 40
1038: PUSH
1039: LD_INT 20
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 4
1057: PUSH
1058: LD_INT 1
1060: PLUS
1061: ARRAY
1062: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1063: LD_ADDR_EXP 24
1067: PUSH
1068: LD_INT 10
1070: PUSH
1071: EMPTY
1072: LIST
1073: PUSH
1074: LD_INT 7
1076: PUSH
1077: LD_INT 14
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 6
1086: PUSH
1087: LD_INT 12
1089: PUSH
1090: LD_INT 18
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 5
1100: PUSH
1101: LD_INT 10
1103: PUSH
1104: LD_INT 15
1106: PUSH
1107: LD_INT 20
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 4
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// shipments_density = 150 - def_shipments_density ;
1132: LD_ADDR_EXP 26
1136: PUSH
1137: LD_INT 150
1139: PUSH
1140: LD_EXP 5
1144: MINUS
1145: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1146: LD_ADDR_EXP 22
1150: PUSH
1151: LD_INT 0
1153: PUSH
1154: LD_INT 1
1156: PUSH
1157: LD_INT 2
1159: PUSH
1160: LD_INT 3
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: LD_EXP 12
1173: PUSH
1174: LD_INT 1
1176: PLUS
1177: ARRAY
1178: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1179: LD_ADDR_EXP 28
1183: PUSH
1184: LD_INT 0
1186: PUSH
1187: LD_INT 165
1189: PUSH
1190: LD_INT 140
1192: PUSH
1193: LD_INT 115
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: PUSH
1202: LD_EXP 12
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: ARRAY
1211: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1212: LD_ADDR_EXP 29
1216: PUSH
1217: LD_INT 0
1219: PUSH
1220: LD_INT 8400
1222: PUSH
1223: LD_INT 1750
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: PUSH
1231: LD_EXP 11
1235: PUSH
1236: LD_INT 1
1238: PLUS
1239: ARRAY
1240: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1241: LD_ADDR_EXP 30
1245: PUSH
1246: LD_INT 0
1248: PUSH
1249: LD_INT 21000
1251: PUSH
1252: LD_INT 4200
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 11
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1270: LD_ADDR_EXP 27
1274: PUSH
1275: LD_INT 1
1277: NEG
1278: PUSH
1279: LD_INT 350
1281: PUSH
1282: LD_INT 700
1284: PUSH
1285: LD_INT 1400
1287: PUSH
1288: LD_INT 0
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: PUSH
1298: LD_EXP 9
1302: PUSH
1303: LD_INT 1
1305: PLUS
1306: ARRAY
1307: ST_TO_ADDR
// battle_flags_id = [ ] ;
1308: LD_ADDR_EXP 44
1312: PUSH
1313: EMPTY
1314: ST_TO_ADDR
// amount_score = [ 200 , 300 , 500 , 700 , 1000 , 1500 ] [ def_amount_score + 1 ] ;
1315: LD_ADDR_EXP 31
1319: PUSH
1320: LD_INT 200
1322: PUSH
1323: LD_INT 300
1325: PUSH
1326: LD_INT 500
1328: PUSH
1329: LD_INT 700
1331: PUSH
1332: LD_INT 1000
1334: PUSH
1335: LD_INT 1500
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: PUSH
1346: LD_EXP 15
1350: PUSH
1351: LD_INT 1
1353: PLUS
1354: ARRAY
1355: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1356: LD_EXP 13
1360: PUSH
1361: LD_INT 0
1363: EQUAL
1364: IFFALSE 1376
// siberite_bomb_Delay = 0 else
1366: LD_ADDR_EXP 32
1370: PUSH
1371: LD_INT 0
1373: ST_TO_ADDR
1374: GO 1398
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1376: LD_ADDR_EXP 32
1380: PUSH
1381: LD_EXP 13
1385: PUSH
1386: LD_INT 1
1388: MINUS
1389: PUSH
1390: LD_INT 21000
1392: MUL
1393: PUSH
1394: LD_INT 1
1396: PLUS
1397: ST_TO_ADDR
// king_territory = KopecStred ;
1398: LD_ADDR_EXP 45
1402: PUSH
1403: LD_INT 2
1405: ST_TO_ADDR
// final_count = amount_score ;
1406: LD_ADDR_EXP 46
1410: PUSH
1411: LD_EXP 31
1415: ST_TO_ADDR
// end ;
1416: LD_VAR 0 1
1420: RET
// function init_map ; var i ; begin
1421: LD_INT 0
1423: PPUSH
1424: PPUSH
// extra_oil_deposits_locations := [ [ 53 , 26 ] , [ 51 , 53 ] , [ 129 , 20 ] , [ 155 , 53 ] , [ 187 , 139 ] , [ 183 , 107 ] , [ 106 , 135 ] , [ 80 , 106 ] ] ;
1425: LD_ADDR_EXP 43
1429: PUSH
1430: LD_INT 53
1432: PUSH
1433: LD_INT 26
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: PUSH
1440: LD_INT 51
1442: PUSH
1443: LD_INT 53
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 129
1452: PUSH
1453: LD_INT 20
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: LD_INT 155
1462: PUSH
1463: LD_INT 53
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: PUSH
1470: LD_INT 187
1472: PUSH
1473: LD_INT 139
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: PUSH
1480: LD_INT 183
1482: PUSH
1483: LD_INT 107
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: PUSH
1490: LD_INT 106
1492: PUSH
1493: LD_INT 135
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 80
1502: PUSH
1503: LD_INT 106
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// depot_def := [ [ 29 , 22 , 3 ] , [ 154 , 21 , 3 ] , [ 85 , 138 , 0 ] , [ 212 , 141 , 5 ] ] ;
1520: LD_ADDR_EXP 40
1524: PUSH
1525: LD_INT 29
1527: PUSH
1528: LD_INT 22
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 154
1541: PUSH
1542: LD_INT 21
1544: PUSH
1545: LD_INT 3
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 85
1555: PUSH
1556: LD_INT 138
1558: PUSH
1559: LD_INT 0
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 212
1569: PUSH
1570: LD_INT 141
1572: PUSH
1573: LD_INT 5
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: ST_TO_ADDR
// start_def := [ [ 33 , 25 ] , [ 151 , 24 ] , [ 89 , 135 ] , [ 205 , 137 ] ] ;
1587: LD_ADDR_EXP 42
1591: PUSH
1592: LD_INT 33
1594: PUSH
1595: LD_INT 25
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 151
1604: PUSH
1605: LD_INT 24
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 89
1614: PUSH
1615: LD_INT 135
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: LD_INT 205
1624: PUSH
1625: LD_INT 137
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: ST_TO_ADDR
// breastworks_def := [ [ [ 46 , 13 , 4 ] , [ 43 , 39 , 4 ] , [ 47 , 25 , 5 ] , [ 45 , 44 , 5 ] ] , [ [ 129 , 12 , 0 ] , [ 153 , 34 , 1 ] , [ 139 , 24 , 0 ] , [ 158 , 41 , 0 ] ] , [ [ 84 , 121 , 4 ] , [ 109 , 143 , 4 ] , [ 87 , 126 , 4 ] , [ 111 , 148 , 4 ] ] , [ [ 194 , 146 , 2 ] , [ 195 , 121 , 1 ] , [ 193 , 135 , 2 ] , [ 192 , 116 , 2 ] ] , ] ;
1638: LD_ADDR_EXP 41
1642: PUSH
1643: LD_INT 46
1645: PUSH
1646: LD_INT 13
1648: PUSH
1649: LD_INT 4
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 43
1659: PUSH
1660: LD_INT 39
1662: PUSH
1663: LD_INT 4
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 47
1673: PUSH
1674: LD_INT 25
1676: PUSH
1677: LD_INT 5
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 45
1687: PUSH
1688: LD_INT 44
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 129
1707: PUSH
1708: LD_INT 12
1710: PUSH
1711: LD_INT 0
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 153
1721: PUSH
1722: LD_INT 34
1724: PUSH
1725: LD_INT 1
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 139
1735: PUSH
1736: LD_INT 24
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_INT 158
1749: PUSH
1750: LD_INT 41
1752: PUSH
1753: LD_INT 0
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 84
1769: PUSH
1770: LD_INT 121
1772: PUSH
1773: LD_INT 4
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 109
1783: PUSH
1784: LD_INT 143
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: LD_INT 87
1797: PUSH
1798: LD_INT 126
1800: PUSH
1801: LD_INT 4
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: PUSH
1809: LD_INT 111
1811: PUSH
1812: LD_INT 148
1814: PUSH
1815: LD_INT 4
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 194
1831: PUSH
1832: LD_INT 146
1834: PUSH
1835: LD_INT 2
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 195
1845: PUSH
1846: LD_INT 121
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 193
1859: PUSH
1860: LD_INT 135
1862: PUSH
1863: LD_INT 2
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 192
1873: PUSH
1874: LD_INT 116
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: ST_TO_ADDR
// if def_extra_oil_deposits then
1897: LD_EXP 6
1901: IFFALSE 1945
// for i in extra_oil_deposits_locations do
1903: LD_ADDR_VAR 0 2
1907: PUSH
1908: LD_EXP 43
1912: PUSH
1913: FOR_IN
1914: IFFALSE 1943
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1916: LD_VAR 0 2
1920: PUSH
1921: LD_INT 1
1923: ARRAY
1924: PPUSH
1925: LD_VAR 0 2
1929: PUSH
1930: LD_INT 2
1932: ARRAY
1933: PPUSH
1934: LD_INT 2
1936: PPUSH
1937: CALL_OW 62
1941: GO 1913
1943: POP
1944: POP
// end ;
1945: LD_VAR 0 1
1949: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1950: LD_INT 0
1952: PPUSH
1953: PPUSH
1954: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1955: LD_ADDR_EXP 39
1959: PUSH
1960: LD_EXP 34
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: EMPTY
1969: LIST
1970: DIFF
1971: PUSH
1972: LD_INT 1
1974: GREATER
1975: ST_TO_ADDR
// if not Team_Game then
1976: LD_EXP 39
1980: NOT
1981: IFFALSE 2079
// begin for i = 1 to 8 do
1983: LD_ADDR_VAR 0 2
1987: PUSH
1988: DOUBLE
1989: LD_INT 1
1991: DEC
1992: ST_TO_ADDR
1993: LD_INT 8
1995: PUSH
1996: FOR_TO
1997: IFFALSE 2075
// for j = 1 to 8 do
1999: LD_ADDR_VAR 0 3
2003: PUSH
2004: DOUBLE
2005: LD_INT 1
2007: DEC
2008: ST_TO_ADDR
2009: LD_INT 8
2011: PUSH
2012: FOR_TO
2013: IFFALSE 2071
// if i <> j then
2015: LD_VAR 0 2
2019: PUSH
2020: LD_VAR 0 3
2024: NONEQUAL
2025: IFFALSE 2049
// SetAttitude ( i , j , att_neutral , true ) else
2027: LD_VAR 0 2
2031: PPUSH
2032: LD_VAR 0 3
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: LD_INT 1
2042: PPUSH
2043: CALL_OW 80
2047: GO 2069
// SetAttitude ( i , j , att_friend , true ) ;
2049: LD_VAR 0 2
2053: PPUSH
2054: LD_VAR 0 3
2058: PPUSH
2059: LD_INT 1
2061: PPUSH
2062: LD_INT 1
2064: PPUSH
2065: CALL_OW 80
2069: GO 2012
2071: POP
2072: POP
2073: GO 1996
2075: POP
2076: POP
// end else
2077: GO 2254
// begin if def_shared_vision then
2079: LD_EXP 8
2083: IFFALSE 2148
// begin for i in Teams do
2085: LD_ADDR_VAR 0 2
2089: PUSH
2090: LD_EXP 35
2094: PUSH
2095: FOR_IN
2096: IFFALSE 2146
// for j = 2 to i do
2098: LD_ADDR_VAR 0 3
2102: PUSH
2103: DOUBLE
2104: LD_INT 2
2106: DEC
2107: ST_TO_ADDR
2108: LD_VAR 0 2
2112: PUSH
2113: FOR_TO
2114: IFFALSE 2142
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2116: LD_VAR 0 2
2120: PUSH
2121: LD_VAR 0 3
2125: ARRAY
2126: PPUSH
2127: LD_VAR 0 2
2131: PUSH
2132: LD_INT 1
2134: ARRAY
2135: PPUSH
2136: CALL_OW 343
2140: GO 2113
2142: POP
2143: POP
2144: GO 2095
2146: POP
2147: POP
// end ; for i = 1 to 8 do
2148: LD_ADDR_VAR 0 2
2152: PUSH
2153: DOUBLE
2154: LD_INT 1
2156: DEC
2157: ST_TO_ADDR
2158: LD_INT 8
2160: PUSH
2161: FOR_TO
2162: IFFALSE 2252
// for j = 1 to 8 do
2164: LD_ADDR_VAR 0 3
2168: PUSH
2169: DOUBLE
2170: LD_INT 1
2172: DEC
2173: ST_TO_ADDR
2174: LD_INT 8
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2248
// if Side_Teams [ i ] = Side_Teams [ j ] then
2180: LD_EXP 34
2184: PUSH
2185: LD_VAR 0 2
2189: ARRAY
2190: PUSH
2191: LD_EXP 34
2195: PUSH
2196: LD_VAR 0 3
2200: ARRAY
2201: EQUAL
2202: IFFALSE 2226
// SetAttitude ( i , j , att_friend , true ) else
2204: LD_VAR 0 2
2208: PPUSH
2209: LD_VAR 0 3
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: LD_INT 1
2219: PPUSH
2220: CALL_OW 80
2224: GO 2246
// SetAttitude ( i , j , att_enemy , true ) ;
2226: LD_VAR 0 2
2230: PPUSH
2231: LD_VAR 0 3
2235: PPUSH
2236: LD_INT 2
2238: PPUSH
2239: LD_INT 1
2241: PPUSH
2242: CALL_OW 80
2246: GO 2177
2248: POP
2249: POP
2250: GO 2161
2252: POP
2253: POP
// end ; end ;
2254: LD_VAR 0 1
2258: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2259: LD_INT 0
2261: PPUSH
2262: PPUSH
2263: PPUSH
2264: PPUSH
// result := [ ] ;
2265: LD_ADDR_VAR 0 6
2269: PUSH
2270: EMPTY
2271: ST_TO_ADDR
// for i := 1 to count do
2272: LD_ADDR_VAR 0 7
2276: PUSH
2277: DOUBLE
2278: LD_INT 1
2280: DEC
2281: ST_TO_ADDR
2282: LD_VAR 0 1
2286: PUSH
2287: FOR_TO
2288: IFFALSE 2684
// begin uc_direction := Rand ( 0 , 5 ) ;
2290: LD_ADDR_OWVAR 24
2294: PUSH
2295: LD_INT 0
2297: PPUSH
2298: LD_INT 5
2300: PPUSH
2301: CALL_OW 12
2305: ST_TO_ADDR
// if commander then
2306: LD_LOC 1
2310: IFFALSE 2419
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2312: LD_ADDR_OWVAR 26
2316: PUSH
2317: LD_OWVAR 19
2321: PUSH
2322: LD_OWVAR 20
2326: ARRAY
2327: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2328: LD_INT 1
2330: PPUSH
2331: LD_INT 2
2333: PPUSH
2334: CALL_OW 12
2338: PPUSH
2339: LD_VAR 0 2
2343: PPUSH
2344: LD_EXP 23
2348: PUSH
2349: LD_INT 2
2351: PLUS
2352: PPUSH
2353: CALL_OW 380
// hc_importance := 105 ;
2357: LD_ADDR_OWVAR 32
2361: PUSH
2362: LD_INT 105
2364: ST_TO_ADDR
// commander := false ;
2365: LD_ADDR_LOC 1
2369: PUSH
2370: LD_INT 0
2372: ST_TO_ADDR
// if Multiplayer then
2373: LD_OWVAR 4
2377: IFFALSE 2417
// begin hc_gallery := MULTIAVATARS ;
2379: LD_ADDR_OWVAR 33
2383: PUSH
2384: LD_STRING MULTIAVATARS
2386: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2387: LD_ADDR_OWVAR 34
2391: PUSH
2392: LD_OWVAR 20
2396: PPUSH
2397: CALL_OW 525
2401: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2402: LD_ADDR_OWVAR 27
2406: PUSH
2407: LD_OWVAR 20
2411: PPUSH
2412: CALL_OW 526
2416: ST_TO_ADDR
// end ; end else
2417: GO 2482
// begin hc_name :=  ;
2419: LD_ADDR_OWVAR 26
2423: PUSH
2424: LD_STRING 
2426: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2427: LD_INT 1
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: CALL_OW 12
2437: PPUSH
2438: LD_VAR 0 2
2442: PPUSH
2443: LD_EXP 23
2447: PPUSH
2448: CALL_OW 380
// hc_importance := 0 ;
2452: LD_ADDR_OWVAR 32
2456: PUSH
2457: LD_INT 0
2459: ST_TO_ADDR
// if Multiplayer then
2460: LD_OWVAR 4
2464: IFFALSE 2482
// begin hc_gallery :=  ;
2466: LD_ADDR_OWVAR 33
2470: PUSH
2471: LD_STRING 
2473: ST_TO_ADDR
// hc_face_number := 0 ;
2474: LD_ADDR_OWVAR 34
2478: PUSH
2479: LD_INT 0
2481: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2482: LD_ADDR_VAR 0 9
2486: PUSH
2487: CALL_OW 44
2491: ST_TO_ADDR
// if global_defined then
2492: LD_LOC 3
2496: IFFALSE 2636
// begin if ( cl = class_soldier ) then
2498: LD_VAR 0 2
2502: PUSH
2503: LD_INT 1
2505: EQUAL
2506: IFFALSE 2526
// j := i + soldiers_created else
2508: LD_ADDR_VAR 0 8
2512: PUSH
2513: LD_VAR 0 7
2517: PUSH
2518: LD_LOC 4
2522: PLUS
2523: ST_TO_ADDR
2524: GO 2536
// j := i ;
2526: LD_ADDR_VAR 0 8
2530: PUSH
2531: LD_VAR 0 7
2535: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2536: LD_LOC 2
2540: PUSH
2541: LD_VAR 0 2
2545: ARRAY
2546: PUSH
2547: LD_VAR 0 8
2551: ARRAY
2552: PPUSH
2553: LD_VAR 0 9
2557: PPUSH
2558: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2562: LD_VAR 0 9
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: LD_LOC 2
2574: PUSH
2575: LD_VAR 0 2
2579: ARRAY
2580: PUSH
2581: LD_VAR 0 8
2585: ARRAY
2586: PPUSH
2587: LD_INT 2
2589: PPUSH
2590: CALL_OW 260
2594: PPUSH
2595: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2599: LD_VAR 0 9
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: LD_LOC 2
2611: PUSH
2612: LD_VAR 0 2
2616: ARRAY
2617: PUSH
2618: LD_VAR 0 8
2622: ARRAY
2623: PPUSH
2624: LD_INT 1
2626: PPUSH
2627: CALL_OW 260
2631: PPUSH
2632: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2636: LD_VAR 0 9
2640: PPUSH
2641: LD_VAR 0 3
2645: PPUSH
2646: LD_VAR 0 4
2650: PPUSH
2651: LD_VAR 0 5
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 50
// result := result ^ [ un ] ;
2663: LD_ADDR_VAR 0 6
2667: PUSH
2668: LD_VAR 0 6
2672: PUSH
2673: LD_VAR 0 9
2677: PUSH
2678: EMPTY
2679: LIST
2680: ADD
2681: ST_TO_ADDR
// end ;
2682: GO 2287
2684: POP
2685: POP
// if not global_defined then
2686: LD_LOC 3
2690: NOT
2691: IFFALSE 2769
// if ( global_units >= cl ) then
2693: LD_LOC 2
2697: PUSH
2698: LD_VAR 0 2
2702: GREATEREQUAL
2703: IFFALSE 2744
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2705: LD_ADDR_LOC 2
2709: PUSH
2710: LD_LOC 2
2714: PPUSH
2715: LD_VAR 0 2
2719: PPUSH
2720: LD_LOC 2
2724: PUSH
2725: LD_VAR 0 2
2729: ARRAY
2730: PUSH
2731: LD_VAR 0 6
2735: ADD
2736: PPUSH
2737: CALL_OW 1
2741: ST_TO_ADDR
2742: GO 2769
// global_units := Replace ( global_units , cl , result ) ;
2744: LD_ADDR_LOC 2
2748: PUSH
2749: LD_LOC 2
2753: PPUSH
2754: LD_VAR 0 2
2758: PPUSH
2759: LD_VAR 0 6
2763: PPUSH
2764: CALL_OW 1
2768: ST_TO_ADDR
// end ;
2769: LD_VAR 0 6
2773: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , sol , br , dep ; begin
2774: LD_INT 0
2776: PPUSH
2777: PPUSH
2778: PPUSH
2779: PPUSH
2780: PPUSH
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
// if side in [ 0 , 9 ] then
2786: LD_VAR 0 1
2790: PUSH
2791: LD_INT 0
2793: PUSH
2794: LD_INT 9
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: IN
2801: IFFALSE 2805
// exit ;
2803: GO 3912
// pos := Side_Positions [ side ] ;
2805: LD_ADDR_VAR 0 3
2809: PUSH
2810: LD_EXP 37
2814: PUSH
2815: LD_VAR 0 1
2819: ARRAY
2820: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2821: LD_ADDR_OWVAR 21
2825: PUSH
2826: LD_EXP 38
2830: PUSH
2831: LD_VAR 0 1
2835: ARRAY
2836: ST_TO_ADDR
// uc_side := side ;
2837: LD_ADDR_OWVAR 20
2841: PUSH
2842: LD_VAR 0 1
2846: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2847: LD_ADDR_VAR 0 4
2851: PUSH
2852: LD_EXP 40
2856: PUSH
2857: LD_VAR 0 3
2861: ARRAY
2862: PUSH
2863: LD_INT 1
2865: ARRAY
2866: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2867: LD_ADDR_VAR 0 5
2871: PUSH
2872: LD_EXP 40
2876: PUSH
2877: LD_VAR 0 3
2881: ARRAY
2882: PUSH
2883: LD_INT 2
2885: ARRAY
2886: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2887: LD_ADDR_VAR 0 6
2891: PUSH
2892: LD_EXP 40
2896: PUSH
2897: LD_VAR 0 3
2901: ARRAY
2902: PUSH
2903: LD_INT 3
2905: ARRAY
2906: ST_TO_ADDR
// if is_depot then
2907: LD_EXP 19
2911: IFFALSE 3044
// begin bc_type = b_depot ;
2913: LD_ADDR_OWVAR 42
2917: PUSH
2918: LD_INT 0
2920: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2921: LD_ADDR_VAR 0 11
2925: PUSH
2926: LD_VAR 0 4
2930: PPUSH
2931: LD_VAR 0 5
2935: PPUSH
2936: LD_VAR 0 6
2940: PPUSH
2941: CALL_OW 47
2945: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2946: LD_VAR 0 11
2950: PPUSH
2951: LD_STRING @
2953: PUSH
2954: LD_VAR 0 1
2958: STR
2959: PPUSH
2960: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2964: LD_VAR 0 11
2968: PPUSH
2969: CALL_OW 274
2973: PPUSH
2974: LD_INT 1
2976: PPUSH
2977: LD_EXP 25
2981: PUSH
2982: LD_INT 1
2984: ARRAY
2985: PPUSH
2986: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2990: LD_VAR 0 11
2994: PPUSH
2995: CALL_OW 274
2999: PPUSH
3000: LD_INT 2
3002: PPUSH
3003: LD_EXP 25
3007: PUSH
3008: LD_INT 2
3010: ARRAY
3011: PPUSH
3012: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3016: LD_VAR 0 11
3020: PPUSH
3021: CALL_OW 274
3025: PPUSH
3026: LD_INT 3
3028: PPUSH
3029: LD_EXP 25
3033: PUSH
3034: LD_INT 3
3036: ARRAY
3037: PPUSH
3038: CALL_OW 277
// end else
3042: GO 3188
// begin for i := 1 to 3 do
3044: LD_ADDR_VAR 0 7
3048: PUSH
3049: DOUBLE
3050: LD_INT 1
3052: DEC
3053: ST_TO_ADDR
3054: LD_INT 3
3056: PUSH
3057: FOR_TO
3058: IFFALSE 3186
// begin r := starting_resources [ i ] ;
3060: LD_ADDR_VAR 0 8
3064: PUSH
3065: LD_EXP 25
3069: PUSH
3070: LD_VAR 0 7
3074: ARRAY
3075: ST_TO_ADDR
// while r >= 10 do
3076: LD_VAR 0 8
3080: PUSH
3081: LD_INT 10
3083: GREATEREQUAL
3084: IFFALSE 3184
// if r > 50 then
3086: LD_VAR 0 8
3090: PUSH
3091: LD_INT 50
3093: GREATER
3094: IFFALSE 3140
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3096: LD_VAR 0 7
3100: PPUSH
3101: LD_INT 5
3103: PPUSH
3104: LD_VAR 0 4
3108: PPUSH
3109: LD_VAR 0 5
3113: PPUSH
3114: LD_INT 4
3116: PPUSH
3117: LD_INT 0
3119: PPUSH
3120: CALL_OW 60
// r := r - 50 ;
3124: LD_ADDR_VAR 0 8
3128: PUSH
3129: LD_VAR 0 8
3133: PUSH
3134: LD_INT 50
3136: MINUS
3137: ST_TO_ADDR
// end else
3138: GO 3182
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3140: LD_VAR 0 7
3144: PPUSH
3145: LD_VAR 0 8
3149: PUSH
3150: LD_INT 10
3152: DIV
3153: PPUSH
3154: LD_VAR 0 4
3158: PPUSH
3159: LD_VAR 0 5
3163: PPUSH
3164: LD_INT 4
3166: PPUSH
3167: LD_INT 0
3169: PPUSH
3170: CALL_OW 60
// r := 0 ;
3174: LD_ADDR_VAR 0 8
3178: PUSH
3179: LD_INT 0
3181: ST_TO_ADDR
// end ;
3182: GO 3076
// end ;
3184: GO 3057
3186: POP
3187: POP
// end ; for r in starting_crates do
3188: LD_ADDR_VAR 0 8
3192: PUSH
3193: LD_EXP 24
3197: PUSH
3198: FOR_IN
3199: IFFALSE 3231
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3201: LD_INT 1
3203: PPUSH
3204: LD_INT 5
3206: PPUSH
3207: LD_VAR 0 4
3211: PPUSH
3212: LD_VAR 0 5
3216: PPUSH
3217: LD_VAR 0 8
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 60
3229: GO 3198
3231: POP
3232: POP
// if def_morale_flags then
3233: LD_EXP 9
3237: IFFALSE 3376
// begin x := start_def [ pos ] [ 1 ] ;
3239: LD_ADDR_VAR 0 4
3243: PUSH
3244: LD_EXP 42
3248: PUSH
3249: LD_VAR 0 3
3253: ARRAY
3254: PUSH
3255: LD_INT 1
3257: ARRAY
3258: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3259: LD_ADDR_VAR 0 5
3263: PUSH
3264: LD_EXP 42
3268: PUSH
3269: LD_VAR 0 3
3273: ARRAY
3274: PUSH
3275: LD_INT 2
3277: ARRAY
3278: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3279: LD_VAR 0 4
3283: PPUSH
3284: LD_VAR 0 5
3288: PPUSH
3289: LD_INT 12
3291: PPUSH
3292: LD_INT 2
3294: PPUSH
3295: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3299: LD_ADDR_EXP 44
3303: PUSH
3304: LD_EXP 44
3308: PUSH
3309: LD_VAR 0 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: LD_VAR 0 5
3323: PPUSH
3324: LD_INT 1
3326: PUSH
3327: LD_INT 100
3329: PUSH
3330: EMPTY
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 2
3336: PUSH
3337: LD_INT 50
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: PUSH
3344: LD_INT 3
3346: PUSH
3347: LD_INT 20
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PUSH
3354: LD_INT 20
3356: PUSH
3357: LD_INT 100
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: PPUSH
3370: CALL_OW 418
3374: ADD
3375: ST_TO_ADDR
// end ; commander := true ;
3376: LD_ADDR_LOC 1
3380: PUSH
3381: LD_INT 1
3383: ST_TO_ADDR
// soldiers_created := 0 ;
3384: LD_ADDR_LOC 4
3388: PUSH
3389: LD_INT 0
3391: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3392: LD_ADDR_VAR 0 7
3396: PUSH
3397: DOUBLE
3398: LD_INT 1
3400: DEC
3401: ST_TO_ADDR
3402: LD_EXP 20
3406: PUSH
3407: FOR_TO
3408: IFFALSE 3630
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3410: LD_ADDR_VAR 0 4
3414: PUSH
3415: LD_EXP 41
3419: PUSH
3420: LD_VAR 0 3
3424: ARRAY
3425: PUSH
3426: LD_VAR 0 7
3430: ARRAY
3431: PUSH
3432: LD_INT 1
3434: ARRAY
3435: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3436: LD_ADDR_VAR 0 5
3440: PUSH
3441: LD_EXP 41
3445: PUSH
3446: LD_VAR 0 3
3450: ARRAY
3451: PUSH
3452: LD_VAR 0 7
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3462: LD_ADDR_VAR 0 6
3466: PUSH
3467: LD_EXP 41
3471: PUSH
3472: LD_VAR 0 3
3476: ARRAY
3477: PUSH
3478: LD_VAR 0 7
3482: ARRAY
3483: PUSH
3484: LD_INT 3
3486: ARRAY
3487: ST_TO_ADDR
// bc_type := b_breastwork ;
3488: LD_ADDR_OWVAR 42
3492: PUSH
3493: LD_INT 31
3495: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3496: LD_ADDR_VAR 0 10
3500: PUSH
3501: LD_VAR 0 4
3505: PPUSH
3506: LD_VAR 0 5
3510: PPUSH
3511: LD_VAR 0 6
3515: PPUSH
3516: CALL_OW 47
3520: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3521: LD_ADDR_VAR 0 4
3525: PUSH
3526: LD_VAR 0 4
3530: PPUSH
3531: LD_VAR 0 6
3535: PPUSH
3536: LD_INT 2
3538: PPUSH
3539: CALL_OW 272
3543: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3544: LD_ADDR_VAR 0 5
3548: PUSH
3549: LD_VAR 0 5
3553: PPUSH
3554: LD_VAR 0 6
3558: PPUSH
3559: LD_INT 2
3561: PPUSH
3562: CALL_OW 273
3566: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3567: LD_ADDR_VAR 0 9
3571: PUSH
3572: LD_INT 1
3574: PPUSH
3575: LD_INT 1
3577: PPUSH
3578: LD_VAR 0 4
3582: PPUSH
3583: LD_VAR 0 5
3587: PPUSH
3588: LD_INT 0
3590: PPUSH
3591: CALL 2259 0 5
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3600: LD_ADDR_LOC 4
3604: PUSH
3605: LD_LOC 4
3609: PUSH
3610: LD_INT 1
3612: PLUS
3613: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3614: LD_VAR 0 9
3618: PPUSH
3619: LD_VAR 0 10
3623: PPUSH
3624: CALL_OW 120
// end ;
3628: GO 3407
3630: POP
3631: POP
// x := start_def [ pos ] [ 1 ] ;
3632: LD_ADDR_VAR 0 4
3636: PUSH
3637: LD_EXP 42
3641: PUSH
3642: LD_VAR 0 3
3646: ARRAY
3647: PUSH
3648: LD_INT 1
3650: ARRAY
3651: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3652: LD_ADDR_VAR 0 5
3656: PUSH
3657: LD_EXP 42
3661: PUSH
3662: LD_VAR 0 3
3666: ARRAY
3667: PUSH
3668: LD_INT 2
3670: ARRAY
3671: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
3672: LD_LOC 8
3676: PUSH
3677: LD_EXP 20
3681: MINUS
3682: PPUSH
3683: LD_INT 1
3685: PPUSH
3686: LD_VAR 0 4
3690: PPUSH
3691: LD_VAR 0 5
3695: PPUSH
3696: LD_INT 5
3698: PPUSH
3699: CALL 2259 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
3703: LD_LOC 5
3707: PPUSH
3708: LD_INT 2
3710: PPUSH
3711: LD_VAR 0 4
3715: PPUSH
3716: LD_VAR 0 5
3720: PPUSH
3721: LD_INT 5
3723: PPUSH
3724: CALL 2259 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
3728: LD_LOC 7
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_VAR 0 4
3740: PPUSH
3741: LD_VAR 0 5
3745: PPUSH
3746: LD_INT 5
3748: PPUSH
3749: CALL 2259 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
3753: LD_LOC 6
3757: PPUSH
3758: LD_INT 4
3760: PPUSH
3761: LD_VAR 0 4
3765: PPUSH
3766: LD_VAR 0 5
3770: PPUSH
3771: LD_INT 5
3773: PPUSH
3774: CALL 2259 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3778: LD_EXP 10
3782: PUSH
3783: LD_INT 20
3785: PPUSH
3786: LD_VAR 0 1
3790: PPUSH
3791: CALL_OW 321
3795: PUSH
3796: LD_INT 1
3798: EQUAL
3799: AND
3800: IFFALSE 3817
// SetTech ( tech_SibDet , side , state_researched ) ;
3802: LD_INT 20
3804: PPUSH
3805: LD_VAR 0 1
3809: PPUSH
3810: LD_INT 2
3812: PPUSH
3813: CALL_OW 322
// if def_siberite_bomb = 1 then
3817: LD_EXP 13
3821: PUSH
3822: LD_INT 1
3824: EQUAL
3825: IFFALSE 3859
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3827: LD_INT 25
3829: PPUSH
3830: LD_VAR 0 1
3834: PPUSH
3835: LD_INT 1
3837: PPUSH
3838: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3842: LD_INT 73
3844: PPUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_INT 1
3852: PPUSH
3853: CALL_OW 322
// end else
3857: GO 3889
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3859: LD_INT 25
3861: PPUSH
3862: LD_VAR 0 1
3866: PPUSH
3867: LD_INT 0
3869: PPUSH
3870: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3874: LD_INT 73
3876: PPUSH
3877: LD_VAR 0 1
3881: PPUSH
3882: LD_INT 0
3884: PPUSH
3885: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3889: LD_INT 24
3891: PPUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: LD_INT 0
3899: PPUSH
3900: CALL_OW 322
// global_defined := true ;
3904: LD_ADDR_LOC 3
3908: PUSH
3909: LD_INT 1
3911: ST_TO_ADDR
// end ;
3912: LD_VAR 0 2
3916: RET
// every 0 0$1 do
3917: GO 3919
3919: DISABLE
// if ( def_siberite_bomb > 1 ) then
3920: LD_EXP 13
3924: PUSH
3925: LD_INT 1
3927: GREATER
3928: IFFALSE 3943
// begin wait ( siberite_bomb_Delay ) ;
3930: LD_EXP 32
3934: PPUSH
3935: CALL_OW 67
// EnableSibFiss ;
3939: CALL 3944 0 0
// end ;
3943: END
// function EnableSibFiss ; var i ; begin
3944: LD_INT 0
3946: PPUSH
3947: PPUSH
// for i := 1 to 8 do
3948: LD_ADDR_VAR 0 2
3952: PUSH
3953: DOUBLE
3954: LD_INT 1
3956: DEC
3957: ST_TO_ADDR
3958: LD_INT 8
3960: PUSH
3961: FOR_TO
3962: IFFALSE 4008
// if Side_Positions [ i ] then
3964: LD_EXP 37
3968: PUSH
3969: LD_VAR 0 2
3973: ARRAY
3974: IFFALSE 4006
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3976: LD_INT 25
3978: PPUSH
3979: LD_VAR 0 2
3983: PPUSH
3984: LD_INT 1
3986: PPUSH
3987: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3991: LD_INT 73
3993: PPUSH
3994: LD_VAR 0 2
3998: PPUSH
3999: LD_INT 1
4001: PPUSH
4002: CALL_OW 322
// end ;
4006: GO 3961
4008: POP
4009: POP
// end ;
4010: LD_VAR 0 1
4014: RET
// function prepare_sides ; var i ; begin
4015: LD_INT 0
4017: PPUSH
4018: PPUSH
// global_units := [ ] ;
4019: LD_ADDR_LOC 2
4023: PUSH
4024: EMPTY
4025: ST_TO_ADDR
// global_defined := false ;
4026: LD_ADDR_LOC 3
4030: PUSH
4031: LD_INT 0
4033: ST_TO_ADDR
// CountClassMembers ;
4034: CALL 4084 0 0
// for i := 1 to 8 do
4038: LD_ADDR_VAR 0 2
4042: PUSH
4043: DOUBLE
4044: LD_INT 1
4046: DEC
4047: ST_TO_ADDR
4048: LD_INT 8
4050: PUSH
4051: FOR_TO
4052: IFFALSE 4077
// if Side_Positions [ i ] then
4054: LD_EXP 37
4058: PUSH
4059: LD_VAR 0 2
4063: ARRAY
4064: IFFALSE 4075
// prepare_side ( i ) ;
4066: LD_VAR 0 2
4070: PPUSH
4071: CALL 2774 0 1
4075: GO 4051
4077: POP
4078: POP
// end ;
4079: LD_VAR 0 1
4083: RET
// function CountClassMembers ; var Mode ; begin
4084: LD_INT 0
4086: PPUSH
4087: PPUSH
// if No_Mechs then
4088: LD_EXP 17
4092: IFFALSE 4104
// Mode := 2 else
4094: LD_ADDR_VAR 0 2
4098: PUSH
4099: LD_INT 2
4101: ST_TO_ADDR
4102: GO 4112
// Mode := 1 ;
4104: LD_ADDR_VAR 0 2
4108: PUSH
4109: LD_INT 1
4111: ST_TO_ADDR
// neng := number_of_people ;
4112: LD_ADDR_LOC 5
4116: PUSH
4117: LD_EXP 21
4121: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4122: LD_ADDR_LOC 8
4126: PUSH
4127: LD_LOC 5
4131: PUSH
4132: LD_INT 4
4134: PUSH
4135: LD_INT 3
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PUSH
4142: LD_VAR 0 2
4146: ARRAY
4147: DIV
4148: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4149: LD_LOC 8
4153: PUSH
4154: LD_EXP 20
4158: LESS
4159: IFFALSE 4171
// nsol := number_of_breastworks ;
4161: LD_ADDR_LOC 8
4165: PUSH
4166: LD_EXP 20
4170: ST_TO_ADDR
// neng := neng - nsol ;
4171: LD_ADDR_LOC 5
4175: PUSH
4176: LD_LOC 5
4180: PUSH
4181: LD_LOC 8
4185: MINUS
4186: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4187: LD_ADDR_LOC 6
4191: PUSH
4192: LD_LOC 5
4196: PUSH
4197: LD_INT 3
4199: PUSH
4200: LD_INT 2
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_VAR 0 2
4211: ARRAY
4212: DIV
4213: ST_TO_ADDR
// if ( nsci < 1 ) then
4214: LD_LOC 6
4218: PUSH
4219: LD_INT 1
4221: LESS
4222: IFFALSE 4232
// nsci := 1 ;
4224: LD_ADDR_LOC 6
4228: PUSH
4229: LD_INT 1
4231: ST_TO_ADDR
// neng := neng - nsci ;
4232: LD_ADDR_LOC 5
4236: PUSH
4237: LD_LOC 5
4241: PUSH
4242: LD_LOC 6
4246: MINUS
4247: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4248: LD_ADDR_LOC 7
4252: PUSH
4253: LD_LOC 5
4257: PUSH
4258: LD_INT 2
4260: DIV
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: LD_VAR 0 2
4273: ARRAY
4274: ST_TO_ADDR
// neng := neng - nmech ;
4275: LD_ADDR_LOC 5
4279: PUSH
4280: LD_LOC 5
4284: PUSH
4285: LD_LOC 7
4289: MINUS
4290: ST_TO_ADDR
// if ( neng < 1 ) then
4291: LD_LOC 5
4295: PUSH
4296: LD_INT 1
4298: LESS
4299: IFFALSE 4309
// neng := 1 ;
4301: LD_ADDR_LOC 5
4305: PUSH
4306: LD_INT 1
4308: ST_TO_ADDR
// end ;
4309: LD_VAR 0 1
4313: RET
// starting begin disable ( 98 ) ;
4314: LD_INT 98
4316: DISABLE_MARKED
// disable ( 99 ) ;
4317: LD_INT 99
4319: DISABLE_MARKED
// disable ( 100 ) ;
4320: LD_INT 100
4322: DISABLE_MARKED
// disable ( 4 ) ;
4323: LD_INT 4
4325: DISABLE_MARKED
// disable ( 400 ) ;
4326: LD_INT 400
4328: DISABLE_MARKED
// disable ( 401 ) ;
4329: LD_INT 401
4331: DISABLE_MARKED
// mp_selectmsg := true ;
4332: LD_ADDR_OWVAR 13
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4340: CALL 68 0 0
// init_map ;
4344: CALL 1421 0 0
// init_respawning ;
4348: CALL 18171 0 0
// set_shared_visions_and_alliances ;
4352: CALL 1950 0 0
// ResetFog ;
4356: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4360: LD_OWVAR 2
4364: PPUSH
4365: CALL_OW 520
// AnimateTrees ( true ) ;
4369: LD_INT 1
4371: PPUSH
4372: CALL_OW 573
// prepare_sides ;
4376: CALL 4015 0 0
// Init_Win_Condition ;
4380: CALL 8554 0 0
// if game_type = 3 then
4384: LD_EXP 18
4388: PUSH
4389: LD_INT 3
4391: EQUAL
4392: IFFALSE 4402
// begin InitPoints ( ) ;
4394: CALL 7557 0 0
// init_kings_counting ;
4398: CALL 9849 0 0
// end ; InitApeman ;
4402: CALL 5877 0 0
// ShowTimer ;
4406: CALL 7345 0 0
// music_nat := Side_Nations [ your_side ] ;
4410: LD_ADDR_OWVAR 71
4414: PUSH
4415: LD_EXP 38
4419: PUSH
4420: LD_OWVAR 2
4424: ARRAY
4425: ST_TO_ADDR
// if IAmSpec then
4426: CALL_OW 531
4430: IFFALSE 4466
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4432: LD_INT 0
4434: PPUSH
4435: LD_INT 0
4437: PPUSH
4438: LD_OWVAR 2
4442: PPUSH
4443: LD_INT 32767
4445: NEG
4446: PPUSH
4447: CALL_OW 330
// CenterNowOnXY ( 119 , 79 ) ;
4451: LD_INT 119
4453: PPUSH
4454: LD_INT 79
4456: PPUSH
4457: CALL_OW 86
// enable ( 400 ) ;
4461: LD_INT 400
4463: ENABLE_MARKED
// end else
4464: GO 4512
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4466: LD_EXP 42
4470: PUSH
4471: LD_EXP 37
4475: PUSH
4476: LD_OWVAR 2
4480: ARRAY
4481: ARRAY
4482: PUSH
4483: LD_INT 1
4485: ARRAY
4486: PPUSH
4487: LD_EXP 42
4491: PUSH
4492: LD_EXP 37
4496: PUSH
4497: LD_OWVAR 2
4501: ARRAY
4502: ARRAY
4503: PUSH
4504: LD_INT 2
4506: ARRAY
4507: PPUSH
4508: CALL_OW 86
// end ; BuildUpAreas := [ Base_nw , Base_ne , Base_sw , Base_se ] ;
4512: LD_ADDR_EXP 61
4516: PUSH
4517: LD_INT 3
4519: PUSH
4520: LD_INT 4
4522: PUSH
4523: LD_INT 5
4525: PUSH
4526: LD_INT 6
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: ST_TO_ADDR
// BeginBuildUp ;
4535: CALL 18665 0 0
// end ; end_of_file
4539: END
// every 0 0$25 + 0 0$1.0 do
4540: GO 4542
4542: DISABLE
// begin if GetResourceArea ( ZaklLHOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4543: LD_INT 16
4545: PPUSH
4546: LD_INT 1
4548: PPUSH
4549: CALL_OW 287
4553: PUSH
4554: LD_INT 200
4556: PUSH
4557: LD_EXP 26
4561: MINUS
4562: PUSH
4563: LD_INT 50
4565: DIVREAL
4566: PUSH
4567: LD_INT 5
4569: MUL
4570: LESS
4571: IFFALSE 4594
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklLHOut , true ) ;
4573: LD_INT 3
4575: PPUSH
4576: LD_INT 4
4578: PPUSH
4579: CALL_OW 12
4583: PPUSH
4584: LD_INT 16
4586: PPUSH
4587: LD_INT 1
4589: PPUSH
4590: CALL_OW 55
// if GetResourceArea ( ZaklPHOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4594: LD_INT 17
4596: PPUSH
4597: LD_INT 1
4599: PPUSH
4600: CALL_OW 287
4604: PUSH
4605: LD_INT 200
4607: PUSH
4608: LD_EXP 26
4612: MINUS
4613: PUSH
4614: LD_INT 50
4616: DIVREAL
4617: PUSH
4618: LD_INT 5
4620: MUL
4621: LESS
4622: IFFALSE 4645
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklPHOut , true ) ;
4624: LD_INT 3
4626: PPUSH
4627: LD_INT 4
4629: PPUSH
4630: CALL_OW 12
4634: PPUSH
4635: LD_INT 17
4637: PPUSH
4638: LD_INT 1
4640: PPUSH
4641: CALL_OW 55
// if GetResourceArea ( ZaklLDOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4645: LD_INT 18
4647: PPUSH
4648: LD_INT 1
4650: PPUSH
4651: CALL_OW 287
4655: PUSH
4656: LD_INT 200
4658: PUSH
4659: LD_EXP 26
4663: MINUS
4664: PUSH
4665: LD_INT 50
4667: DIVREAL
4668: PUSH
4669: LD_INT 5
4671: MUL
4672: LESS
4673: IFFALSE 4696
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklLDOut , true ) ;
4675: LD_INT 3
4677: PPUSH
4678: LD_INT 4
4680: PPUSH
4681: CALL_OW 12
4685: PPUSH
4686: LD_INT 18
4688: PPUSH
4689: LD_INT 1
4691: PPUSH
4692: CALL_OW 55
// if GetResourceArea ( ZaklPDOut , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
4696: LD_INT 19
4698: PPUSH
4699: LD_INT 1
4701: PPUSH
4702: CALL_OW 287
4706: PUSH
4707: LD_INT 200
4709: PUSH
4710: LD_EXP 26
4714: MINUS
4715: PUSH
4716: LD_INT 50
4718: DIVREAL
4719: PUSH
4720: LD_INT 5
4722: MUL
4723: LESS
4724: IFFALSE 4747
// CreateCratesArea ( Rand ( 3 , 4 ) , ZaklPDOut , true ) ;
4726: LD_INT 3
4728: PPUSH
4729: LD_INT 4
4731: PPUSH
4732: CALL_OW 12
4736: PPUSH
4737: LD_INT 19
4739: PPUSH
4740: LD_INT 1
4742: PPUSH
4743: CALL_OW 55
// if GetResourceArea ( Map_center , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4747: LD_INT 15
4749: PPUSH
4750: LD_INT 1
4752: PPUSH
4753: CALL_OW 287
4757: PUSH
4758: LD_INT 200
4760: PUSH
4761: LD_EXP 26
4765: MINUS
4766: PUSH
4767: LD_INT 25
4769: DIVREAL
4770: PUSH
4771: LD_INT 5
4773: MUL
4774: LESS
4775: IFFALSE 4790
// CreateCratesArea ( 5 , Map_center , true ) ;
4777: LD_INT 5
4779: PPUSH
4780: LD_INT 15
4782: PPUSH
4783: LD_INT 1
4785: PPUSH
4786: CALL_OW 55
// enable ;
4790: ENABLE
// end ;
4791: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4792: GO 4794
4794: DISABLE
4795: LD_INT 0
4797: PPUSH
4798: PPUSH
// begin case tick of 1 .. 1 1$0 :
4799: LD_OWVAR 1
4803: PUSH
4804: LD_INT 1
4806: DOUBLE
4807: GREATEREQUAL
4808: IFFALSE 4816
4810: LD_INT 2100
4812: DOUBLE
4813: LESSEQUAL
4814: IFTRUE 4818
4816: GO 4846
4818: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4819: LD_EXP 26
4823: PUSH
4824: LD_INT 100
4826: DIVREAL
4827: PUSH
4828: LD_INT 525
4830: PPUSH
4831: LD_INT 1050
4833: PPUSH
4834: CALL_OW 12
4838: MUL
4839: PPUSH
4840: CALL_OW 67
4844: GO 5148
4846: LD_INT 2100
4848: PUSH
4849: LD_INT 1
4851: PLUS
4852: DOUBLE
4853: GREATEREQUAL
4854: IFFALSE 4862
4856: LD_INT 10500
4858: DOUBLE
4859: LESSEQUAL
4860: IFTRUE 4864
4862: GO 4892
4864: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4865: LD_EXP 26
4869: PUSH
4870: LD_INT 100
4872: DIVREAL
4873: PUSH
4874: LD_INT 1050
4876: PPUSH
4877: LD_INT 1750
4879: PPUSH
4880: CALL_OW 12
4884: MUL
4885: PPUSH
4886: CALL_OW 67
4890: GO 5148
4892: LD_INT 10500
4894: PUSH
4895: LD_INT 1
4897: PLUS
4898: DOUBLE
4899: GREATEREQUAL
4900: IFFALSE 4908
4902: LD_INT 21000
4904: DOUBLE
4905: LESSEQUAL
4906: IFTRUE 4910
4908: GO 4938
4910: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4911: LD_EXP 26
4915: PUSH
4916: LD_INT 100
4918: DIVREAL
4919: PUSH
4920: LD_INT 1750
4922: PPUSH
4923: LD_INT 2100
4925: PPUSH
4926: CALL_OW 12
4930: MUL
4931: PPUSH
4932: CALL_OW 67
4936: GO 5148
4938: LD_INT 21000
4940: PUSH
4941: LD_INT 1
4943: PLUS
4944: DOUBLE
4945: GREATEREQUAL
4946: IFFALSE 4954
4948: LD_INT 42000
4950: DOUBLE
4951: LESSEQUAL
4952: IFTRUE 4956
4954: GO 4984
4956: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4957: LD_EXP 26
4961: PUSH
4962: LD_INT 100
4964: DIVREAL
4965: PUSH
4966: LD_INT 2100
4968: PPUSH
4969: LD_INT 2275
4971: PPUSH
4972: CALL_OW 12
4976: MUL
4977: PPUSH
4978: CALL_OW 67
4982: GO 5148
4984: LD_INT 42000
4986: PUSH
4987: LD_INT 1
4989: PLUS
4990: DOUBLE
4991: GREATEREQUAL
4992: IFFALSE 5000
4994: LD_INT 63000
4996: DOUBLE
4997: LESSEQUAL
4998: IFTRUE 5002
5000: GO 5030
5002: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5003: LD_EXP 26
5007: PUSH
5008: LD_INT 100
5010: DIVREAL
5011: PUSH
5012: LD_INT 2275
5014: PPUSH
5015: LD_INT 2450
5017: PPUSH
5018: CALL_OW 12
5022: MUL
5023: PPUSH
5024: CALL_OW 67
5028: GO 5148
5030: LD_INT 63000
5032: PUSH
5033: LD_INT 1
5035: PLUS
5036: DOUBLE
5037: GREATEREQUAL
5038: IFFALSE 5046
5040: LD_INT 105000
5042: DOUBLE
5043: LESSEQUAL
5044: IFTRUE 5048
5046: GO 5076
5048: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5049: LD_EXP 26
5053: PUSH
5054: LD_INT 100
5056: DIVREAL
5057: PUSH
5058: LD_INT 2450
5060: PPUSH
5061: LD_INT 2800
5063: PPUSH
5064: CALL_OW 12
5068: MUL
5069: PPUSH
5070: CALL_OW 67
5074: GO 5148
5076: LD_INT 105000
5078: PUSH
5079: LD_INT 1
5081: PLUS
5082: DOUBLE
5083: GREATEREQUAL
5084: IFFALSE 5092
5086: LD_INT 630000
5088: DOUBLE
5089: LESSEQUAL
5090: IFTRUE 5094
5092: GO 5122
5094: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5095: LD_EXP 26
5099: PUSH
5100: LD_INT 100
5102: DIVREAL
5103: PUSH
5104: LD_INT 2800
5106: PPUSH
5107: LD_INT 3500
5109: PPUSH
5110: CALL_OW 12
5114: MUL
5115: PPUSH
5116: CALL_OW 67
5120: GO 5148
5122: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5123: LD_EXP 26
5127: PUSH
5128: LD_INT 100
5130: DIVREAL
5131: PUSH
5132: LD_INT 3500
5134: PPUSH
5135: LD_INT 3850
5137: PPUSH
5138: CALL_OW 12
5142: MUL
5143: PPUSH
5144: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5148: LD_ADDR_VAR 0 2
5152: PUSH
5153: LD_INT 3
5155: PPUSH
5156: LD_INT 5
5158: PPUSH
5159: CALL_OW 12
5163: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5164: LD_ADDR_VAR 0 1
5168: PUSH
5169: LD_EXP 37
5173: PUSH
5174: LD_INT 0
5176: PUSH
5177: EMPTY
5178: LIST
5179: DIFF
5180: PUSH
5181: FOR_IN
5182: IFFALSE 5231
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5184: LD_VAR 0 2
5188: PPUSH
5189: LD_EXP 42
5193: PUSH
5194: LD_VAR 0 1
5198: ARRAY
5199: PUSH
5200: LD_INT 1
5202: ARRAY
5203: PPUSH
5204: LD_EXP 42
5208: PUSH
5209: LD_VAR 0 1
5213: ARRAY
5214: PUSH
5215: LD_INT 2
5217: ARRAY
5218: PPUSH
5219: LD_INT 20
5221: PPUSH
5222: LD_INT 1
5224: PPUSH
5225: CALL_OW 56
5229: GO 5181
5231: POP
5232: POP
// enable ;
5233: ENABLE
// end ; end_of_file
5234: PPOPN 2
5236: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5237: LD_VAR 0 1
5241: PPUSH
5242: CALL_OW 266
5246: PUSH
5247: LD_INT 0
5249: PUSH
5250: LD_INT 1
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: IN
5257: IFFALSE 5282
// SetBName ( b , @ & GetSide ( b ) ) ;
5259: LD_VAR 0 1
5263: PPUSH
5264: LD_STRING @
5266: PUSH
5267: LD_VAR 0 1
5271: PPUSH
5272: CALL_OW 255
5276: STR
5277: PPUSH
5278: CALL_OW 500
// end ;
5282: PPOPN 2
5284: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL_OW 266
5294: PUSH
5295: LD_INT 0
5297: PUSH
5298: LD_INT 1
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: IN
5305: IFFALSE 5330
// SetBName ( b , @ & GetSide ( b ) ) ;
5307: LD_VAR 0 1
5311: PPUSH
5312: LD_STRING @
5314: PUSH
5315: LD_VAR 0 1
5319: PPUSH
5320: CALL_OW 255
5324: STR
5325: PPUSH
5326: CALL_OW 500
// end ;
5330: PPOPN 3
5332: END
// on VehicleConstructed ( veh , fac ) do var side ;
5333: LD_INT 0
5335: PPUSH
// begin if GetControl ( veh ) = control_apeman then
5336: LD_VAR 0 1
5340: PPUSH
5341: CALL_OW 263
5345: PUSH
5346: LD_INT 5
5348: EQUAL
5349: IFFALSE 5491
// begin side := GetSide ( veh ) ;
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: LD_VAR 0 1
5360: PPUSH
5361: CALL_OW 255
5365: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
5366: LD_ADDR_EXP 53
5370: PUSH
5371: LD_EXP 53
5375: PPUSH
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_EXP 53
5385: PUSH
5386: LD_VAR 0 3
5390: ARRAY
5391: PPUSH
5392: LD_INT 52
5394: PUSH
5395: EMPTY
5396: LIST
5397: PPUSH
5398: CALL_OW 72
5402: PUSH
5403: LD_INT 22
5405: PUSH
5406: LD_VAR 0 3
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 2
5417: PUSH
5418: LD_INT 33
5420: PUSH
5421: LD_INT 5
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 25
5430: PUSH
5431: LD_INT 12
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 25
5440: PUSH
5441: LD_INT 15
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 25
5450: PUSH
5451: LD_INT 16
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PUSH
5458: LD_INT 25
5460: PUSH
5461: LD_INT 17
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: PUSH
5476: EMPTY
5477: LIST
5478: LIST
5479: PPUSH
5480: CALL_OW 69
5484: UNION
5485: PPUSH
5486: CALL_OW 1
5490: ST_TO_ADDR
// end ; end ;
5491: PPOPN 3
5493: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
5494: LD_INT 0
5496: PPUSH
5497: PPUSH
5498: PPUSH
5499: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
5500: LD_VAR 0 1
5504: PPUSH
5505: CALL_OW 257
5509: PUSH
5510: LD_INT 12
5512: PUSH
5513: LD_INT 15
5515: PUSH
5516: LD_INT 17
5518: PUSH
5519: LD_INT 16
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: IN
5528: PUSH
5529: LD_VAR 0 1
5533: PPUSH
5534: CALL_OW 263
5538: PUSH
5539: LD_INT 5
5541: EQUAL
5542: OR
5543: IFFALSE 5554
// ApeKilled ( j ) ;
5545: LD_VAR 0 1
5549: PPUSH
5550: CALL 6568 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
5554: LD_VAR 0 1
5558: PPUSH
5559: CALL_OW 266
5563: PUSH
5564: LD_INT 0
5566: PUSH
5567: LD_INT 1
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: IN
5574: IFFALSE 5656
// begin pos := Side_Positions [ GetSide ( j ) ] ;
5576: LD_ADDR_VAR 0 4
5580: PUSH
5581: LD_EXP 37
5585: PUSH
5586: LD_VAR 0 1
5590: PPUSH
5591: CALL_OW 255
5595: ARRAY
5596: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
5597: LD_ADDR_VAR 0 2
5601: PUSH
5602: LD_EXP 42
5606: PUSH
5607: LD_VAR 0 4
5611: ARRAY
5612: PUSH
5613: LD_INT 1
5615: ARRAY
5616: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
5617: LD_ADDR_VAR 0 3
5621: PUSH
5622: LD_EXP 42
5626: PUSH
5627: LD_VAR 0 4
5631: ARRAY
5632: PUSH
5633: LD_INT 2
5635: ARRAY
5636: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
5637: LD_VAR 0 2
5641: PPUSH
5642: LD_VAR 0 3
5646: PPUSH
5647: CALL_OW 420
5651: PPUSH
5652: CALL_OW 419
// end ; end ;
5656: PPOPN 5
5658: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
5659: LD_VAR 0 1
5663: PPUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_VAR 0 3
5673: PPUSH
5674: LD_OWVAR 2
5678: PPUSH
5679: CALL 8315 0 4
5683: PPOPN 3
5685: END
// every 20 20$00 trigger apemanNumber do
5686: LD_EXP 50
5690: IFFALSE 5723
5692: GO 5694
5694: DISABLE
// begin enable ;
5695: ENABLE
// if apeLevel >= 8 then
5696: LD_EXP 55
5700: PUSH
5701: LD_INT 8
5703: GREATEREQUAL
5704: IFFALSE 5709
// disable else
5706: DISABLE
5707: GO 5723
// apeLevel := apeLevel + 1 ;
5709: LD_ADDR_EXP 55
5713: PUSH
5714: LD_EXP 55
5718: PUSH
5719: LD_INT 1
5721: PLUS
5722: ST_TO_ADDR
// end ;
5723: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5724: LD_EXP 50
5728: PUSH
5729: LD_EXP 51
5733: LESS
5734: IFFALSE 5874
5736: GO 5738
5738: DISABLE
5739: LD_INT 0
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
// begin enable ;
5745: ENABLE
// for i := 1 to apemanPos do
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: DOUBLE
5752: LD_INT 1
5754: DEC
5755: ST_TO_ADDR
5756: LD_EXP 53
5760: PUSH
5761: FOR_TO
5762: IFFALSE 5872
// begin if apemanPlayerCount [ i ] then
5764: LD_EXP 54
5768: PUSH
5769: LD_VAR 0 1
5773: ARRAY
5774: IFFALSE 5870
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5776: LD_EXP 54
5780: PUSH
5781: LD_VAR 0 1
5785: ARRAY
5786: PUSH
5787: LD_EXP 53
5791: PUSH
5792: LD_VAR 0 1
5796: ARRAY
5797: GREATER
5798: IFFALSE 5870
// begin ape := PrepareApeman ;
5800: LD_ADDR_VAR 0 2
5804: PUSH
5805: CALL 6377 0 0
5809: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5810: LD_VAR 0 2
5814: PPUSH
5815: LD_EXP 56
5819: PUSH
5820: LD_VAR 0 1
5824: ARRAY
5825: PPUSH
5826: LD_INT 0
5828: PPUSH
5829: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5833: LD_ADDR_EXP 53
5837: PUSH
5838: LD_EXP 53
5842: PPUSH
5843: LD_VAR 0 1
5847: PPUSH
5848: LD_EXP 53
5852: PUSH
5853: LD_VAR 0 1
5857: ARRAY
5858: PUSH
5859: LD_VAR 0 2
5863: UNION
5864: PPUSH
5865: CALL_OW 1
5869: ST_TO_ADDR
// end ; end ; end ;
5870: GO 5761
5872: POP
5873: POP
// end ;
5874: PPOPN 4
5876: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
5881: PPUSH
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
// playersAmount := 0 ;
5886: LD_ADDR_VAR 0 3
5890: PUSH
5891: LD_INT 0
5893: ST_TO_ADDR
// _apeAreas := [ OpiceSZ , OpiceSV , OpiceJZ , OpiceJV ] ;
5894: LD_ADDR_VAR 0 7
5898: PUSH
5899: LD_INT 11
5901: PUSH
5902: LD_INT 12
5904: PUSH
5905: LD_INT 14
5907: PUSH
5908: LD_INT 13
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5917: LD_ADDR_EXP 56
5921: PUSH
5922: LD_INT 0
5924: PUSH
5925: LD_INT 0
5927: PUSH
5928: LD_INT 0
5930: PUSH
5931: LD_INT 0
5933: PUSH
5934: LD_INT 0
5936: PUSH
5937: LD_INT 0
5939: PUSH
5940: LD_INT 0
5942: PUSH
5943: LD_INT 0
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: ST_TO_ADDR
// for j = 1 to Side_Positions do
5956: LD_ADDR_VAR 0 4
5960: PUSH
5961: DOUBLE
5962: LD_INT 1
5964: DEC
5965: ST_TO_ADDR
5966: LD_EXP 37
5970: PUSH
5971: FOR_TO
5972: IFFALSE 6039
// if Side_Positions [ j ] then
5974: LD_EXP 37
5978: PUSH
5979: LD_VAR 0 4
5983: ARRAY
5984: IFFALSE 6037
// begin playersAmount := playersAmount + 1 ;
5986: LD_ADDR_VAR 0 3
5990: PUSH
5991: LD_VAR 0 3
5995: PUSH
5996: LD_INT 1
5998: PLUS
5999: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6000: LD_ADDR_EXP 56
6004: PUSH
6005: LD_EXP 56
6009: PPUSH
6010: LD_VAR 0 4
6014: PPUSH
6015: LD_VAR 0 7
6019: PUSH
6020: LD_EXP 37
6024: PUSH
6025: LD_VAR 0 4
6029: ARRAY
6030: ARRAY
6031: PPUSH
6032: CALL_OW 1
6036: ST_TO_ADDR
// end ;
6037: GO 5971
6039: POP
6040: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6041: LD_ADDR_EXP 52
6045: PUSH
6046: LD_INT 3
6048: PUSH
6049: LD_EXP 22
6053: MUL
6054: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6055: LD_ADDR_EXP 50
6059: PUSH
6060: LD_VAR 0 3
6064: PUSH
6065: LD_EXP 52
6069: MUL
6070: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6071: LD_ADDR_EXP 51
6075: PUSH
6076: LD_EXP 50
6080: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6081: LD_ADDR_EXP 53
6085: PUSH
6086: LD_INT 0
6088: PUSH
6089: LD_INT 0
6091: PUSH
6092: LD_INT 0
6094: PUSH
6095: LD_INT 0
6097: PUSH
6098: LD_INT 0
6100: PUSH
6101: LD_INT 0
6103: PUSH
6104: LD_INT 0
6106: PUSH
6107: LD_INT 0
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6120: LD_ADDR_EXP 54
6124: PUSH
6125: LD_INT 0
6127: PUSH
6128: LD_INT 0
6130: PUSH
6131: LD_INT 0
6133: PUSH
6134: LD_INT 0
6136: PUSH
6137: LD_INT 0
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: ST_TO_ADDR
// apeLevel := 1 ;
6159: LD_ADDR_EXP 55
6163: PUSH
6164: LD_INT 1
6166: ST_TO_ADDR
// if not apemanNumber then
6167: LD_EXP 50
6171: NOT
6172: IFFALSE 6176
// exit ;
6174: GO 6372
// for i := 1 to apemanPerPlayer do
6176: LD_ADDR_VAR 0 2
6180: PUSH
6181: DOUBLE
6182: LD_INT 1
6184: DEC
6185: ST_TO_ADDR
6186: LD_EXP 52
6190: PUSH
6191: FOR_TO
6192: IFFALSE 6370
// begin for j := 1 to Side_Positions do
6194: LD_ADDR_VAR 0 4
6198: PUSH
6199: DOUBLE
6200: LD_INT 1
6202: DEC
6203: ST_TO_ADDR
6204: LD_EXP 37
6208: PUSH
6209: FOR_TO
6210: IFFALSE 6366
// if Side_Positions [ j ] then
6212: LD_EXP 37
6216: PUSH
6217: LD_VAR 0 4
6221: ARRAY
6222: IFFALSE 6364
// begin pos := Side_Positions [ j ] ;
6224: LD_ADDR_VAR 0 6
6228: PUSH
6229: LD_EXP 37
6233: PUSH
6234: LD_VAR 0 4
6238: ARRAY
6239: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6240: LD_ADDR_EXP 54
6244: PUSH
6245: LD_EXP 54
6249: PPUSH
6250: LD_VAR 0 4
6254: PPUSH
6255: LD_EXP 54
6259: PUSH
6260: LD_VAR 0 4
6264: ARRAY
6265: PUSH
6266: LD_INT 1
6268: PLUS
6269: PPUSH
6270: CALL_OW 1
6274: ST_TO_ADDR
// ape := PrepareApeman ;
6275: LD_ADDR_VAR 0 5
6279: PUSH
6280: CALL 6377 0 0
6284: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6285: LD_ADDR_EXP 53
6289: PUSH
6290: LD_EXP 53
6294: PPUSH
6295: LD_VAR 0 4
6299: PPUSH
6300: LD_EXP 53
6304: PUSH
6305: LD_VAR 0 4
6309: ARRAY
6310: PPUSH
6311: LD_EXP 53
6315: PUSH
6316: LD_VAR 0 4
6320: ARRAY
6321: PUSH
6322: LD_INT 1
6324: PLUS
6325: PPUSH
6326: LD_VAR 0 5
6330: PPUSH
6331: CALL_OW 1
6335: PPUSH
6336: CALL_OW 1
6340: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6341: LD_VAR 0 5
6345: PPUSH
6346: LD_EXP 56
6350: PUSH
6351: LD_VAR 0 4
6355: ARRAY
6356: PPUSH
6357: LD_INT 0
6359: PPUSH
6360: CALL_OW 49
// end ;
6364: GO 6209
6366: POP
6367: POP
// end ;
6368: GO 6191
6370: POP
6371: POP
// end ;
6372: LD_VAR 0 1
6376: RET
// export function PrepareApeman ; var bonus ; begin
6377: LD_INT 0
6379: PPUSH
6380: PPUSH
// uc_side := 0 ;
6381: LD_ADDR_OWVAR 20
6385: PUSH
6386: LD_INT 0
6388: ST_TO_ADDR
// uc_nation := 0 ;
6389: LD_ADDR_OWVAR 21
6393: PUSH
6394: LD_INT 0
6396: ST_TO_ADDR
// InitHc ;
6397: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6401: LD_ADDR_VAR 0 2
6405: PUSH
6406: LD_INT 1
6408: NEG
6409: PUSH
6410: LD_INT 0
6412: PUSH
6413: LD_INT 1
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 12
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PPUSH
6431: CALL_OW 69
6435: PUSH
6436: LD_INT 3
6438: MOD
6439: PUSH
6440: LD_INT 1
6442: PLUS
6443: ARRAY
6444: ST_TO_ADDR
// hc_class := class_apeman ;
6445: LD_ADDR_OWVAR 28
6449: PUSH
6450: LD_INT 12
6452: ST_TO_ADDR
// hc_gallery :=  ;
6453: LD_ADDR_OWVAR 33
6457: PUSH
6458: LD_STRING 
6460: ST_TO_ADDR
// hc_name :=  ;
6461: LD_ADDR_OWVAR 26
6465: PUSH
6466: LD_STRING 
6468: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6469: LD_ADDR_OWVAR 31
6473: PUSH
6474: LD_EXP 55
6478: PUSH
6479: LD_VAR 0 2
6483: PLUS
6484: PUSH
6485: LD_EXP 55
6489: PUSH
6490: LD_VAR 0 2
6494: PLUS
6495: PUSH
6496: LD_EXP 55
6500: PUSH
6501: LD_VAR 0 2
6505: PLUS
6506: PUSH
6507: LD_EXP 55
6511: PUSH
6512: LD_VAR 0 2
6516: PLUS
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6524: LD_ADDR_OWVAR 35
6528: PUSH
6529: LD_INT 10
6531: PUSH
6532: LD_VAR 0 2
6536: MUL
6537: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6538: LD_ADDR_OWVAR 29
6542: PUSH
6543: LD_INT 12
6545: PUSH
6546: LD_INT 12
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: ST_TO_ADDR
// result := CreateHuman ;
6553: LD_ADDR_VAR 0 1
6557: PUSH
6558: CALL_OW 44
6562: ST_TO_ADDR
// end ;
6563: LD_VAR 0 1
6567: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6568: LD_INT 0
6570: PPUSH
6571: PPUSH
6572: PPUSH
// if not ape then
6573: LD_VAR 0 1
6577: NOT
6578: IFFALSE 6582
// exit ;
6580: GO 6707
// side := GetSide ( ape ) ;
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: LD_VAR 0 1
6591: PPUSH
6592: CALL_OW 255
6596: ST_TO_ADDR
// if not side then
6597: LD_VAR 0 3
6601: NOT
6602: IFFALSE 6656
// begin for i = 1 to apemanPos do
6604: LD_ADDR_VAR 0 4
6608: PUSH
6609: DOUBLE
6610: LD_INT 1
6612: DEC
6613: ST_TO_ADDR
6614: LD_EXP 53
6618: PUSH
6619: FOR_TO
6620: IFFALSE 6654
// if ape in apemanPos [ i ] then
6622: LD_VAR 0 1
6626: PUSH
6627: LD_EXP 53
6631: PUSH
6632: LD_VAR 0 4
6636: ARRAY
6637: IN
6638: IFFALSE 6652
// begin side := i ;
6640: LD_ADDR_VAR 0 3
6644: PUSH
6645: LD_VAR 0 4
6649: ST_TO_ADDR
// break ;
6650: GO 6654
// end ;
6652: GO 6619
6654: POP
6655: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6656: LD_ADDR_EXP 53
6660: PUSH
6661: LD_EXP 53
6665: PPUSH
6666: LD_VAR 0 3
6670: PPUSH
6671: LD_EXP 53
6675: PUSH
6676: LD_VAR 0 3
6680: ARRAY
6681: PUSH
6682: LD_VAR 0 1
6686: DIFF
6687: PPUSH
6688: CALL_OW 1
6692: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6693: LD_ADDR_EXP 50
6697: PUSH
6698: LD_EXP 50
6702: PUSH
6703: LD_INT 1
6705: MINUS
6706: ST_TO_ADDR
// end ; end_of_file
6707: LD_VAR 0 2
6711: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6712: LD_INT 0
6714: PPUSH
6715: PPUSH
// for un in battle_flags_id do
6716: LD_ADDR_VAR 0 2
6720: PUSH
6721: LD_EXP 44
6725: PUSH
6726: FOR_IN
6727: IFFALSE 6802
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6729: LD_VAR 0 2
6733: PPUSH
6734: LD_INT 1
6736: PUSH
6737: LD_LOC 9
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PUSH
6746: LD_INT 2
6748: PUSH
6749: LD_LOC 9
6753: PUSH
6754: LD_INT 2
6756: DIV
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 3
6764: PUSH
6765: LD_LOC 9
6769: PUSH
6770: LD_INT 5
6772: DIV
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 20
6780: PUSH
6781: LD_LOC 9
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: PPUSH
6796: CALL_OW 423
6800: GO 6726
6802: POP
6803: POP
// end ;
6804: LD_VAR 0 1
6808: RET
// every 0 0$0.1 do var un ;
6809: GO 6811
6811: DISABLE
6812: LD_INT 0
6814: PPUSH
// begin if not def_morale_flags then
6815: LD_EXP 9
6819: NOT
6820: IFFALSE 6824
// exit ;
6822: GO 6901
// if not morale_decreasing_time then
6824: LD_EXP 27
6828: NOT
6829: IFFALSE 6833
// exit ;
6831: GO 6901
// strength = 100 ;
6833: LD_ADDR_LOC 9
6837: PUSH
6838: LD_INT 100
6840: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6841: LD_EXP 27
6845: PPUSH
6846: CALL_OW 67
// strength := strength - 1 ;
6850: LD_ADDR_LOC 9
6854: PUSH
6855: LD_LOC 9
6859: PUSH
6860: LD_INT 1
6862: MINUS
6863: ST_TO_ADDR
// Update_Flags ;
6864: CALL 6712 0 0
// until not strength ;
6868: LD_LOC 9
6872: NOT
6873: IFFALSE 6841
// for un in battle_flags_id do
6875: LD_ADDR_VAR 0 1
6879: PUSH
6880: LD_EXP 44
6884: PUSH
6885: FOR_IN
6886: IFFALSE 6899
// KillBattleFlag ( un ) ;
6888: LD_VAR 0 1
6892: PPUSH
6893: CALL_OW 419
6897: GO 6885
6899: POP
6900: POP
// end ; end_of_file
6901: PPOPN 1
6903: END
// export score ; every 0 0$1 trigger Game_Type = 3 do
6904: LD_EXP 18
6908: PUSH
6909: LD_INT 3
6911: EQUAL
6912: IFFALSE 6927
6914: GO 6916
6916: DISABLE
// begin SetAreaMapShow ( KopecStred , true ) ;
6917: LD_INT 2
6919: PPUSH
6920: LD_INT 1
6922: PPUSH
6923: CALL_OW 424
// end ;
6927: END
// every 0 0$1 trigger Game_Type = 3 do var un , filter , output , side , new_score ;
6928: LD_EXP 18
6932: PUSH
6933: LD_INT 3
6935: EQUAL
6936: IFFALSE 7221
6938: GO 6940
6940: DISABLE
6941: LD_INT 0
6943: PPUSH
6944: PPUSH
6945: PPUSH
6946: PPUSH
6947: PPUSH
// begin filter := FilterUnitsInArea ( KopecStred , [ [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ready ] ] ) ;
6948: LD_ADDR_VAR 0 2
6952: PUSH
6953: LD_INT 2
6955: PPUSH
6956: LD_INT 2
6958: PUSH
6959: LD_INT 30
6961: PUSH
6962: LD_INT 0
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 30
6971: PUSH
6972: LD_INT 1
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 53
6986: PUSH
6987: EMPTY
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PPUSH
6994: CALL_OW 70
6998: ST_TO_ADDR
// if filter then
6999: LD_VAR 0 2
7003: IFFALSE 7077
// for un in filter do
7005: LD_ADDR_VAR 0 1
7009: PUSH
7010: LD_VAR 0 2
7014: PUSH
7015: FOR_IN
7016: IFFALSE 7075
// begin new_score := score [ GetSide ( un ) ] + 1 ;
7018: LD_ADDR_VAR 0 5
7022: PUSH
7023: LD_EXP 57
7027: PUSH
7028: LD_VAR 0 1
7032: PPUSH
7033: CALL_OW 255
7037: ARRAY
7038: PUSH
7039: LD_INT 1
7041: PLUS
7042: ST_TO_ADDR
// score := Replace ( score , GetSide ( un ) , new_score ) ;
7043: LD_ADDR_EXP 57
7047: PUSH
7048: LD_EXP 57
7052: PPUSH
7053: LD_VAR 0 1
7057: PPUSH
7058: CALL_OW 255
7062: PPUSH
7063: LD_VAR 0 5
7067: PPUSH
7068: CALL_OW 1
7072: ST_TO_ADDR
// end ;
7073: GO 7015
7075: POP
7076: POP
// if not def_public_score then
7077: LD_EXP 14
7081: NOT
7082: IFFALSE 7185
// begin output := [ ] ;
7084: LD_ADDR_VAR 0 3
7088: PUSH
7089: EMPTY
7090: ST_TO_ADDR
// for side = 1 to Side_Positions do
7091: LD_ADDR_VAR 0 4
7095: PUSH
7096: DOUBLE
7097: LD_INT 1
7099: DEC
7100: ST_TO_ADDR
7101: LD_EXP 37
7105: PUSH
7106: FOR_TO
7107: IFFALSE 7171
// if Side_Positions [ side ] then
7109: LD_EXP 37
7113: PUSH
7114: LD_VAR 0 4
7118: ARRAY
7119: IFFALSE 7169
// output := output ^ ( mp_sides_players_names [ side ] & :  & score [ side ] & /  & amount_score ) ;
7121: LD_ADDR_VAR 0 3
7125: PUSH
7126: LD_VAR 0 3
7130: PUSH
7131: LD_OWVAR 19
7135: PUSH
7136: LD_VAR 0 4
7140: ARRAY
7141: PUSH
7142: LD_STRING : 
7144: STR
7145: PUSH
7146: LD_EXP 57
7150: PUSH
7151: LD_VAR 0 4
7155: ARRAY
7156: STR
7157: PUSH
7158: LD_STRING / 
7160: STR
7161: PUSH
7162: LD_EXP 31
7166: STR
7167: ADD
7168: ST_TO_ADDR
7169: GO 7106
7171: POP
7172: POP
// ExtraStrings := output ;
7173: LD_ADDR_EXP 58
7177: PUSH
7178: LD_VAR 0 3
7182: ST_TO_ADDR
// end else
7183: GO 7220
// ExtraStrings := [ #KingoftheHill-Private , your_side , score [ Your_Side ] , amount_score ] ;
7185: LD_ADDR_EXP 58
7189: PUSH
7190: LD_STRING #KingoftheHill-Private
7192: PUSH
7193: LD_OWVAR 2
7197: PUSH
7198: LD_EXP 57
7202: PUSH
7203: LD_OWVAR 2
7207: ARRAY
7208: PUSH
7209: LD_EXP 31
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: ST_TO_ADDR
// enable ;
7220: ENABLE
// end ;
7221: PPOPN 5
7223: END
// every 0 0$1 marked 100 do var side ;
7224: GO 7226
7226: DISABLE
7227: LD_INT 0
7229: PPUSH
// begin for side = 1 to Side_Positions do
7230: LD_ADDR_VAR 0 1
7234: PUSH
7235: DOUBLE
7236: LD_INT 1
7238: DEC
7239: ST_TO_ADDR
7240: LD_EXP 37
7244: PUSH
7245: FOR_TO
7246: IFFALSE 7284
// if Side_Positions [ side ] then
7248: LD_EXP 37
7252: PUSH
7253: LD_VAR 0 1
7257: ARRAY
7258: IFFALSE 7282
// if score [ side ] >= amount_score then
7260: LD_EXP 57
7264: PUSH
7265: LD_VAR 0 1
7269: ARRAY
7270: PUSH
7271: LD_EXP 31
7275: GREATEREQUAL
7276: IFFALSE 7282
// show_that_you_are_winner_or_looser ;
7278: CALL 7290 0 0
7282: GO 7245
7284: POP
7285: POP
// enable ;
7286: ENABLE
// end ;
7287: PPOPN 1
7289: END
// function show_that_you_are_winner_or_looser ; var i ; begin
7290: LD_INT 0
7292: PPUSH
7293: PPUSH
// if score [ your_side ] >= amount_score then
7294: LD_EXP 57
7298: PUSH
7299: LD_OWVAR 2
7303: ARRAY
7304: PUSH
7305: LD_EXP 31
7309: GREATEREQUAL
7310: IFFALSE 7327
// begin wait ( 0 0$3 ) ;
7312: LD_INT 105
7314: PPUSH
7315: CALL_OW 67
// YouWinInMultiplayer ;
7319: CALL_OW 106
// exit ;
7323: GO 7340
// end else
7325: GO 7340
// begin wait ( 0 0$3 ) ;
7327: LD_INT 105
7329: PPUSH
7330: CALL_OW 67
// YouLostInMultiplayer ;
7334: CALL_OW 107
// exit ;
7338: GO 7340
// end ; end ; end_of_file
7340: LD_VAR 0 1
7344: RET
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
7345: LD_INT 0
7347: PPUSH
7348: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7349: LD_ADDR_VAR 0 2
7353: PUSH
7354: LD_STRING #Multi1x1-Time
7356: PUSH
7357: LD_OWVAR 1
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: ST_TO_ADDR
// if WaitServerStrings then
7366: LD_EXP 59
7370: IFFALSE 7388
// AllStrings = AllStrings ^ WaitServerStrings ;
7372: LD_ADDR_VAR 0 2
7376: PUSH
7377: LD_VAR 0 2
7381: PUSH
7382: LD_EXP 59
7386: ADD
7387: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7388: LD_INT 0
7390: PUSH
7391: LD_EXP 32
7395: PUSH
7396: LD_OWVAR 1
7400: MINUS
7401: LESSEQUAL
7402: IFFALSE 7433
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7404: LD_ADDR_VAR 0 2
7408: PUSH
7409: LD_VAR 0 2
7413: PUSH
7414: LD_STRING #allowedsibbomb
7416: PUSH
7417: LD_EXP 32
7421: PUSH
7422: LD_OWVAR 1
7426: MINUS
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: ADD
7432: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7433: LD_INT 0
7435: PUSH
7436: LD_EXP 63
7440: PUSH
7441: LD_OWVAR 1
7445: MINUS
7446: LESSEQUAL
7447: IFFALSE 7478
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7449: LD_ADDR_VAR 0 2
7453: PUSH
7454: LD_VAR 0 2
7458: PUSH
7459: LD_STRING #builduptime
7461: PUSH
7462: LD_EXP 63
7466: PUSH
7467: LD_OWVAR 1
7471: MINUS
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: ADD
7477: ST_TO_ADDR
// if ( ExtraStrings ) then
7478: LD_EXP 58
7482: IFFALSE 7504
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7484: LD_ADDR_VAR 0 2
7488: PUSH
7489: LD_VAR 0 2
7493: PUSH
7494: LD_STRING 
7496: ADD
7497: PUSH
7498: LD_EXP 58
7502: ADD
7503: ST_TO_ADDR
// if ( Display_kings ) and not isSGUI then
7504: LD_EXP 60
7508: PUSH
7509: LD_OWVAR 83
7513: NOT
7514: AND
7515: IFFALSE 7533
// AllStrings = AllStrings ^ Display_kings ;
7517: LD_ADDR_VAR 0 2
7521: PUSH
7522: LD_VAR 0 2
7526: PUSH
7527: LD_EXP 60
7531: ADD
7532: ST_TO_ADDR
// Display_Strings := AllStrings ;
7533: LD_ADDR_OWVAR 47
7537: PUSH
7538: LD_VAR 0 2
7542: ST_TO_ADDR
// end ;
7543: LD_VAR 0 1
7547: RET
// every 0 0$1 do
7548: GO 7550
7550: DISABLE
// begin ShowTimer ;
7551: CALL 7345 0 0
// enable ;
7555: ENABLE
// end ; end_of_file
7556: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
7557: LD_INT 0
7559: PPUSH
7560: PPUSH
7561: PPUSH
// sharedPoints1 = [ ] ;
7562: LD_ADDR_LOC 14
7566: PUSH
7567: EMPTY
7568: ST_TO_ADDR
// sharedPoints2 = [ ] ;
7569: LD_ADDR_LOC 15
7573: PUSH
7574: EMPTY
7575: ST_TO_ADDR
// sharedPoints3 = [ ] ;
7576: LD_ADDR_LOC 16
7580: PUSH
7581: EMPTY
7582: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
7583: LD_ADDR_VAR 0 2
7587: PUSH
7588: DOUBLE
7589: LD_INT 1
7591: DEC
7592: ST_TO_ADDR
7593: LD_EXP 37
7597: PUSH
7598: LD_INT 0
7600: PLUS
7601: PUSH
7602: FOR_TO
7603: IFFALSE 7705
// begin if not Side_Positions [ i ] = 0 then
7605: LD_EXP 37
7609: PUSH
7610: LD_VAR 0 2
7614: ARRAY
7615: PUSH
7616: LD_INT 0
7618: EQUAL
7619: NOT
7620: IFFALSE 7634
// SetMultiScore ( i , 0 ) ;
7622: LD_VAR 0 2
7626: PPUSH
7627: LD_INT 0
7629: PPUSH
7630: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
7634: LD_ADDR_LOC 14
7638: PUSH
7639: LD_LOC 14
7643: PPUSH
7644: LD_VAR 0 2
7648: PPUSH
7649: LD_INT 0
7651: PPUSH
7652: CALL_OW 1
7656: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
7657: LD_ADDR_LOC 15
7661: PUSH
7662: LD_LOC 15
7666: PPUSH
7667: LD_VAR 0 2
7671: PPUSH
7672: LD_INT 0
7674: PPUSH
7675: CALL_OW 1
7679: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
7680: LD_ADDR_LOC 16
7684: PUSH
7685: LD_LOC 16
7689: PPUSH
7690: LD_VAR 0 2
7694: PPUSH
7695: LD_INT 0
7697: PPUSH
7698: CALL_OW 1
7702: ST_TO_ADDR
// end ;
7703: GO 7602
7705: POP
7706: POP
// pointGame = true ;
7707: LD_ADDR_LOC 17
7711: PUSH
7712: LD_INT 1
7714: ST_TO_ADDR
// end ;
7715: LD_VAR 0 1
7719: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
7720: LD_LOC 17
7724: IFFALSE 8135
7726: GO 7728
7728: DISABLE
7729: LD_INT 0
7731: PPUSH
7732: PPUSH
7733: PPUSH
7734: PPUSH
7735: PPUSH
7736: PPUSH
7737: PPUSH
7738: PPUSH
7739: PPUSH
7740: PPUSH
7741: PPUSH
7742: PPUSH
7743: PPUSH
// begin if isSGUI then
7744: LD_OWVAR 83
7748: IFFALSE 8135
// begin if Teams [ 1 ] then
7750: LD_EXP 35
7754: PUSH
7755: LD_INT 1
7757: ARRAY
7758: IFFALSE 7770
// red = true else
7760: LD_ADDR_VAR 0 2
7764: PUSH
7765: LD_INT 1
7767: ST_TO_ADDR
7768: GO 7778
// red = false ;
7770: LD_ADDR_VAR 0 2
7774: PUSH
7775: LD_INT 0
7777: ST_TO_ADDR
// if Teams [ 2 ] then
7778: LD_EXP 35
7782: PUSH
7783: LD_INT 2
7785: ARRAY
7786: IFFALSE 7798
// blue = true else
7788: LD_ADDR_VAR 0 3
7792: PUSH
7793: LD_INT 1
7795: ST_TO_ADDR
7796: GO 7806
// blue = false ;
7798: LD_ADDR_VAR 0 3
7802: PUSH
7803: LD_INT 0
7805: ST_TO_ADDR
// if Teams [ 3 ] then
7806: LD_EXP 35
7810: PUSH
7811: LD_INT 3
7813: ARRAY
7814: IFFALSE 7826
// yel = true else
7816: LD_ADDR_VAR 0 4
7820: PUSH
7821: LD_INT 1
7823: ST_TO_ADDR
7824: GO 7834
// yel = false ;
7826: LD_ADDR_VAR 0 4
7830: PUSH
7831: LD_INT 0
7833: ST_TO_ADDR
// if Teams [ 4 ] then
7834: LD_EXP 35
7838: PUSH
7839: LD_INT 4
7841: ARRAY
7842: IFFALSE 7854
// green = true else
7844: LD_ADDR_VAR 0 5
7848: PUSH
7849: LD_INT 1
7851: ST_TO_ADDR
7852: GO 7862
// green = false ;
7854: LD_ADDR_VAR 0 5
7858: PUSH
7859: LD_INT 0
7861: ST_TO_ADDR
// if def_public_score then
7862: LD_EXP 14
7866: IFFALSE 7878
// p = true else
7868: LD_ADDR_VAR 0 12
7872: PUSH
7873: LD_INT 1
7875: ST_TO_ADDR
7876: GO 7886
// p = false ;
7878: LD_ADDR_VAR 0 12
7882: PUSH
7883: LD_INT 0
7885: ST_TO_ADDR
// if team_game then
7886: LD_EXP 39
7890: IFFALSE 7971
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
7892: LD_ADDR_VAR 0 13
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: LD_INT 1
7902: PUSH
7903: LD_INT 2
7905: PUSH
7906: LD_INT 7
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: PUSH
7915: LD_EXP 48
7919: ARRAY
7920: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
7921: LD_ADDR_VAR 0 10
7925: PUSH
7926: LD_STRING {
7928: PUSH
7929: LD_VAR 0 3
7933: STR
7934: PUSH
7935: LD_STRING ,
7937: STR
7938: PUSH
7939: LD_VAR 0 4
7943: STR
7944: PUSH
7945: LD_STRING ,
7947: STR
7948: PUSH
7949: LD_VAR 0 2
7953: STR
7954: PUSH
7955: LD_STRING ,0,0,0,
7957: STR
7958: PUSH
7959: LD_VAR 0 5
7963: STR
7964: PUSH
7965: LD_STRING ,0}
7967: STR
7968: ST_TO_ADDR
// end else
7969: GO 8071
// begin you = your_side ;
7971: LD_ADDR_VAR 0 13
7975: PUSH
7976: LD_OWVAR 2
7980: ST_TO_ADDR
// s = { ;
7981: LD_ADDR_VAR 0 10
7985: PUSH
7986: LD_STRING {
7988: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
7989: LD_ADDR_VAR 0 1
7993: PUSH
7994: DOUBLE
7995: LD_INT 1
7997: DEC
7998: ST_TO_ADDR
7999: LD_EXP 37
8003: PUSH
8004: LD_INT 0
8006: PLUS
8007: PUSH
8008: FOR_TO
8009: IFFALSE 8055
// if side_positions [ i ] then
8011: LD_EXP 37
8015: PUSH
8016: LD_VAR 0 1
8020: ARRAY
8021: IFFALSE 8039
// s = s & 1, else
8023: LD_ADDR_VAR 0 10
8027: PUSH
8028: LD_VAR 0 10
8032: PUSH
8033: LD_STRING 1,
8035: STR
8036: ST_TO_ADDR
8037: GO 8053
// s = s & 0, ;
8039: LD_ADDR_VAR 0 10
8043: PUSH
8044: LD_VAR 0 10
8048: PUSH
8049: LD_STRING 0,
8051: STR
8052: ST_TO_ADDR
8053: GO 8008
8055: POP
8056: POP
// s = s & } ;
8057: LD_ADDR_VAR 0 10
8061: PUSH
8062: LD_VAR 0 10
8066: PUSH
8067: LD_STRING }
8069: STR
8070: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
8071: LD_STRING initScore(
8073: PUSH
8074: LD_VAR 0 10
8078: STR
8079: PUSH
8080: LD_STRING ,
8082: STR
8083: PUSH
8084: LD_VAR 0 12
8088: STR
8089: PUSH
8090: LD_STRING ,
8092: STR
8093: PUSH
8094: LD_VAR 0 13
8098: STR
8099: PUSH
8100: LD_STRING  );
8102: STR
8103: PPUSH
8104: CALL_OW 559
// if game_type = 3 then
8108: LD_EXP 18
8112: PUSH
8113: LD_INT 3
8115: EQUAL
8116: IFFALSE 8135
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
8118: LD_STRING AddScorePoints(2,2,
8120: PUSH
8121: LD_EXP 46
8125: STR
8126: PUSH
8127: LD_STRING  );
8129: STR
8130: PPUSH
8131: CALL_OW 559
// end ; end ;
8135: PPOPN 13
8137: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
8138: LD_INT 0
8140: PPUSH
8141: PPUSH
// case typ of 1 :
8142: LD_VAR 0 3
8146: PUSH
8147: LD_INT 1
8149: DOUBLE
8150: EQUAL
8151: IFTRUE 8155
8153: GO 8183
8155: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
8156: LD_ADDR_LOC 14
8160: PUSH
8161: LD_LOC 14
8165: PPUSH
8166: LD_VAR 0 1
8170: PPUSH
8171: LD_VAR 0 2
8175: PPUSH
8176: CALL_OW 1
8180: ST_TO_ADDR
8181: GO 8256
8183: LD_INT 2
8185: DOUBLE
8186: EQUAL
8187: IFTRUE 8191
8189: GO 8219
8191: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
8192: LD_ADDR_LOC 15
8196: PUSH
8197: LD_LOC 15
8201: PPUSH
8202: LD_VAR 0 1
8206: PPUSH
8207: LD_VAR 0 2
8211: PPUSH
8212: CALL_OW 1
8216: ST_TO_ADDR
8217: GO 8256
8219: LD_INT 3
8221: DOUBLE
8222: EQUAL
8223: IFTRUE 8227
8225: GO 8255
8227: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
8228: LD_ADDR_LOC 16
8232: PUSH
8233: LD_LOC 16
8237: PPUSH
8238: LD_VAR 0 1
8242: PPUSH
8243: LD_VAR 0 2
8247: PPUSH
8248: CALL_OW 1
8252: ST_TO_ADDR
8253: GO 8256
8255: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
8256: LD_ADDR_VAR 0 5
8260: PUSH
8261: LD_LOC 14
8265: PUSH
8266: LD_VAR 0 1
8270: ARRAY
8271: PUSH
8272: LD_LOC 15
8276: PUSH
8277: LD_VAR 0 1
8281: ARRAY
8282: PLUS
8283: PUSH
8284: LD_LOC 16
8288: PUSH
8289: LD_VAR 0 1
8293: ARRAY
8294: PLUS
8295: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
8296: LD_VAR 0 1
8300: PPUSH
8301: LD_VAR 0 5
8305: PPUSH
8306: CALL_OW 506
// end ; end_of_file
8310: LD_VAR 0 4
8314: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8315: LD_INT 0
8317: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 255
8327: PUSH
8328: LD_VAR 0 4
8332: EQUAL
8333: IFFALSE 8352
// begin SetAchievement ( ACH_RAD ) ;
8335: LD_STRING ACH_RAD
8337: PPUSH
8338: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8342: LD_STRING ACH_NL
8344: PPUSH
8345: LD_INT 1
8347: PPUSH
8348: CALL_OW 564
// end end ;
8352: LD_VAR 0 5
8356: RET
// export function SA_Win ( side ) ; begin
8357: LD_INT 0
8359: PPUSH
// case side of 1 :
8360: LD_VAR 0 1
8364: PUSH
8365: LD_INT 1
8367: DOUBLE
8368: EQUAL
8369: IFTRUE 8373
8371: GO 8386
8373: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8374: LD_STRING ACH_AH
8376: PPUSH
8377: LD_INT 1
8379: PPUSH
8380: CALL_OW 564
8384: GO 8549
8386: LD_INT 2
8388: DOUBLE
8389: EQUAL
8390: IFTRUE 8394
8392: GO 8407
8394: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8395: LD_STRING ACH_E
8397: PPUSH
8398: LD_INT 1
8400: PPUSH
8401: CALL_OW 564
8405: GO 8549
8407: LD_INT 3
8409: DOUBLE
8410: EQUAL
8411: IFTRUE 8415
8413: GO 8428
8415: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8416: LD_STRING ACH_OOL
8418: PPUSH
8419: LD_INT 1
8421: PPUSH
8422: CALL_OW 564
8426: GO 8549
8428: LD_INT 1
8430: PUSH
8431: LD_INT 2
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: DOUBLE
8438: EQUAL
8439: IFTRUE 8443
8441: GO 8468
8443: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8444: LD_STRING ACH_AH
8446: PPUSH
8447: LD_REAL  5.00000000000000E-0001
8450: PPUSH
8451: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8455: LD_STRING ACH_E
8457: PPUSH
8458: LD_REAL  5.00000000000000E-0001
8461: PPUSH
8462: CALL_OW 564
// end ; [ 2 , 3 ] :
8466: GO 8549
8468: LD_INT 2
8470: PUSH
8471: LD_INT 3
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: DOUBLE
8478: EQUAL
8479: IFTRUE 8483
8481: GO 8508
8483: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8484: LD_STRING ACH_OOL
8486: PPUSH
8487: LD_REAL  5.00000000000000E-0001
8490: PPUSH
8491: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8495: LD_STRING ACH_E
8497: PPUSH
8498: LD_REAL  5.00000000000000E-0001
8501: PPUSH
8502: CALL_OW 564
// end ; [ 3 , 1 ] :
8506: GO 8549
8508: LD_INT 3
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: DOUBLE
8518: EQUAL
8519: IFTRUE 8523
8521: GO 8548
8523: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8524: LD_STRING ACH_AH
8526: PPUSH
8527: LD_REAL  5.00000000000000E-0001
8530: PPUSH
8531: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8535: LD_STRING ACH_OOL
8537: PPUSH
8538: LD_REAL  5.00000000000000E-0001
8541: PPUSH
8542: CALL_OW 564
// end ; end ;
8546: GO 8549
8548: POP
// end ; end_of_file
8549: LD_VAR 0 2
8553: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8554: LD_INT 0
8556: PPUSH
8557: PPUSH
// enable ( 98 ) ;
8558: LD_INT 98
8560: ENABLE_MARKED
// GameEnded = false ;
8561: LD_ADDR_LOC 19
8565: PUSH
8566: LD_INT 0
8568: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8569: LD_ADDR_LOC 18
8573: PUSH
8574: LD_INT 0
8576: PUSH
8577: LD_INT 0
8579: PUSH
8580: LD_INT 0
8582: PUSH
8583: LD_INT 0
8585: PUSH
8586: LD_INT 0
8588: PUSH
8589: LD_INT 0
8591: PUSH
8592: LD_INT 0
8594: PUSH
8595: LD_INT 0
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: ST_TO_ADDR
// unfoged = false ;
8608: LD_ADDR_LOC 20
8612: PUSH
8613: LD_INT 0
8615: ST_TO_ADDR
// defeated_specs := [ ] ;
8616: LD_ADDR_LOC 21
8620: PUSH
8621: EMPTY
8622: ST_TO_ADDR
// for i = 1 to side_positions do
8623: LD_ADDR_VAR 0 2
8627: PUSH
8628: DOUBLE
8629: LD_INT 1
8631: DEC
8632: ST_TO_ADDR
8633: LD_EXP 37
8637: PUSH
8638: FOR_TO
8639: IFFALSE 8679
// if not side_positions [ i ] then
8641: LD_EXP 37
8645: PUSH
8646: LD_VAR 0 2
8650: ARRAY
8651: NOT
8652: IFFALSE 8677
// defeated = replace ( defeated , i , true ) ;
8654: LD_ADDR_LOC 18
8658: PUSH
8659: LD_LOC 18
8663: PPUSH
8664: LD_VAR 0 2
8668: PPUSH
8669: LD_INT 1
8671: PPUSH
8672: CALL_OW 1
8676: ST_TO_ADDR
8677: GO 8638
8679: POP
8680: POP
// end ;
8681: LD_VAR 0 1
8685: RET
// function CanWinLoose ; begin
8686: LD_INT 0
8688: PPUSH
// Result := true ;
8689: LD_ADDR_VAR 0 1
8693: PUSH
8694: LD_INT 1
8696: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8697: CALL_OW 518
8701: PUSH
8702: CALL_OW 519
8706: PUSH
8707: LD_INT 0
8709: GREATER
8710: AND
8711: IFFALSE 8721
// Result := false ;
8713: LD_ADDR_VAR 0 1
8717: PUSH
8718: LD_INT 0
8720: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8721: CALL_OW 531
8725: PUSH
8726: CALL_OW 519
8730: PUSH
8731: LD_INT 1
8733: GREATER
8734: AND
8735: IFFALSE 8745
// Result := false ;
8737: LD_ADDR_VAR 0 1
8741: PUSH
8742: LD_INT 0
8744: ST_TO_ADDR
// end ;
8745: LD_VAR 0 1
8749: RET
// export function HasPower ( i ) ; var k , h ; begin
8750: LD_INT 0
8752: PPUSH
8753: PPUSH
8754: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8755: LD_VAR 0 1
8759: PPUSH
8760: CALL_OW 108
8764: NOT
8765: PUSH
8766: LD_EXP 36
8770: PUSH
8771: LD_VAR 0 1
8775: ARRAY
8776: NOT
8777: AND
8778: PUSH
8779: LD_OWVAR 4
8783: AND
8784: IFFALSE 8796
// begin result = false ;
8786: LD_ADDR_VAR 0 2
8790: PUSH
8791: LD_INT 0
8793: ST_TO_ADDR
// end else
8794: GO 9091
// case def_win_rules of 0 :
8796: LD_EXP 33
8800: PUSH
8801: LD_INT 0
8803: DOUBLE
8804: EQUAL
8805: IFTRUE 8809
8807: GO 8972
8809: POP
// if def_people_respawning then
8810: LD_EXP 11
8814: IFFALSE 8905
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8816: LD_ADDR_VAR 0 2
8820: PUSH
8821: LD_INT 22
8823: PUSH
8824: LD_VAR 0 1
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 2
8835: PUSH
8836: LD_INT 21
8838: PUSH
8839: LD_INT 1
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: PUSH
8846: LD_INT 33
8848: PUSH
8849: LD_INT 3
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PUSH
8856: LD_INT 33
8858: PUSH
8859: LD_INT 5
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 30
8868: PUSH
8869: LD_INT 0
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: PUSH
8876: LD_INT 30
8878: PUSH
8879: LD_INT 1
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PPUSH
8898: CALL_OW 69
8902: ST_TO_ADDR
8903: GO 8970
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8905: LD_ADDR_VAR 0 2
8909: PUSH
8910: LD_INT 22
8912: PUSH
8913: LD_VAR 0 1
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 2
8924: PUSH
8925: LD_INT 21
8927: PUSH
8928: LD_INT 1
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PUSH
8935: LD_INT 33
8937: PUSH
8938: LD_INT 3
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 33
8947: PUSH
8948: LD_INT 5
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PPUSH
8965: CALL_OW 69
8969: ST_TO_ADDR
8970: GO 9091
8972: LD_INT 1
8974: DOUBLE
8975: EQUAL
8976: IFTRUE 8980
8978: GO 9019
8980: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8981: LD_ADDR_VAR 0 2
8985: PUSH
8986: LD_INT 22
8988: PUSH
8989: LD_VAR 0 1
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 21
9000: PUSH
9001: LD_INT 1
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: ST_TO_ADDR
9017: GO 9091
9019: LD_INT 2
9021: DOUBLE
9022: EQUAL
9023: IFTRUE 9027
9025: GO 9090
9027: POP
// begin h = false ;
9028: LD_ADDR_VAR 0 4
9032: PUSH
9033: LD_INT 0
9035: ST_TO_ADDR
// for k in heroes [ i ] do
9036: LD_ADDR_VAR 0 3
9040: PUSH
9041: LD_EXP 49
9045: PUSH
9046: LD_VAR 0 1
9050: ARRAY
9051: PUSH
9052: FOR_IN
9053: IFFALSE 9076
// if IsLive ( k ) then
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 300
9064: IFFALSE 9074
// h = true ;
9066: LD_ADDR_VAR 0 4
9070: PUSH
9071: LD_INT 1
9073: ST_TO_ADDR
9074: GO 9052
9076: POP
9077: POP
// Result := h ;
9078: LD_ADDR_VAR 0 2
9082: PUSH
9083: LD_VAR 0 4
9087: ST_TO_ADDR
// end ; end ;
9088: GO 9091
9090: POP
// end ;
9091: LD_VAR 0 2
9095: RET
// function AlliedSides ( i , j ) ; begin
9096: LD_INT 0
9098: PPUSH
// Result := false ;
9099: LD_ADDR_VAR 0 3
9103: PUSH
9104: LD_INT 0
9106: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9107: LD_VAR 0 1
9111: PPUSH
9112: LD_VAR 0 2
9116: PPUSH
9117: CALL_OW 81
9121: PUSH
9122: LD_INT 1
9124: EQUAL
9125: PUSH
9126: LD_VAR 0 2
9130: PPUSH
9131: LD_VAR 0 1
9135: PPUSH
9136: CALL_OW 81
9140: PUSH
9141: LD_INT 1
9143: EQUAL
9144: AND
9145: PUSH
9146: LD_VAR 0 1
9150: PPUSH
9151: CALL_OW 83
9155: AND
9156: PUSH
9157: LD_VAR 0 2
9161: PPUSH
9162: CALL_OW 83
9166: AND
9167: IFFALSE 9177
// Result := true ;
9169: LD_ADDR_VAR 0 3
9173: PUSH
9174: LD_INT 1
9176: ST_TO_ADDR
// end ;
9177: LD_VAR 0 3
9181: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9182: CALL 8686 0 0
9186: PUSH
9187: LD_LOC 19
9191: NOT
9192: AND
9193: IFFALSE 9209
9195: GO 9197
9197: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9198: LD_ADDR_EXP 59
9202: PUSH
9203: LD_STRING #Player-Ended
9205: PUSH
9206: EMPTY
9207: LIST
9208: ST_TO_ADDR
9209: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9210: CALL 8686 0 0
9214: PUSH
9215: LD_LOC 19
9219: AND
9220: IFFALSE 9229
9222: GO 9224
9224: DISABLE
// YouLostInMultiplayer ;
9225: CALL_OW 107
9229: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9230: CALL 8686 0 0
9234: NOT
9235: PUSH
9236: CALL_OW 531
9240: NOT
9241: AND
9242: IFFALSE 9258
9244: GO 9246
9246: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9247: LD_ADDR_EXP 59
9251: PUSH
9252: LD_STRING #server-wait
9254: PUSH
9255: EMPTY
9256: LIST
9257: ST_TO_ADDR
9258: END
// every 100 trigger IAmSpec do
9259: CALL_OW 531
9263: IFFALSE 9279
9265: GO 9267
9267: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9268: LD_ADDR_EXP 59
9272: PUSH
9273: LD_STRING #Player-IAmSpec
9275: PUSH
9276: EMPTY
9277: LIST
9278: ST_TO_ADDR
9279: END
// every 100 trigger GameEnded and IAmSpec do
9280: LD_LOC 19
9284: PUSH
9285: CALL_OW 531
9289: AND
9290: IFFALSE 9299
9292: GO 9294
9294: DISABLE
// YouLostInMultiplayer ;
9295: CALL_OW 107
9299: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9300: CALL 8686 0 0
9304: PUSH
9305: LD_LOC 19
9309: NOT
9310: AND
9311: IFFALSE 9327
9313: GO 9315
9315: DISABLE
// WaitServerStrings = [ $player-win ] ;
9316: LD_ADDR_EXP 59
9320: PUSH
9321: LD_STRING $player-win
9323: PUSH
9324: EMPTY
9325: LIST
9326: ST_TO_ADDR
9327: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9328: CALL 8686 0 0
9332: PUSH
9333: LD_LOC 19
9337: AND
9338: IFFALSE 9362
9340: GO 9342
9342: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9343: LD_EXP 38
9347: PUSH
9348: LD_OWVAR 7
9352: ARRAY
9353: PPUSH
9354: CALL 8357 0 1
// YouWinInMultiplayer ;
9358: CALL_OW 106
// end ;
9362: END
// every 100 trigger isEditor marked 401 do
9363: LD_OWVAR 84
9367: IFFALSE 9383
9369: GO 9371
9371: DISABLE
// Debug_Strings = [ You won ] ;
9372: LD_ADDR_OWVAR 48
9376: PUSH
9377: LD_STRING You won
9379: PUSH
9380: EMPTY
9381: LIST
9382: ST_TO_ADDR
9383: END
// every 100 trigger isEditor marked 400 do
9384: LD_OWVAR 84
9388: IFFALSE 9404
9390: GO 9392
9392: DISABLE
// Debug_Strings = [ You loss ] ;
9393: LD_ADDR_OWVAR 48
9397: PUSH
9398: LD_STRING You loss
9400: PUSH
9401: EMPTY
9402: LIST
9403: ST_TO_ADDR
9404: END
// every 100 marked 98 do var i , un ;
9405: GO 9407
9407: DISABLE
9408: LD_INT 0
9410: PPUSH
9411: PPUSH
// begin for i = 1 to side_positions do
9412: LD_ADDR_VAR 0 1
9416: PUSH
9417: DOUBLE
9418: LD_INT 1
9420: DEC
9421: ST_TO_ADDR
9422: LD_EXP 37
9426: PUSH
9427: FOR_TO
9428: IFFALSE 9515
// begin if side_positions [ i ] then
9430: LD_EXP 37
9434: PUSH
9435: LD_VAR 0 1
9439: ARRAY
9440: IFFALSE 9513
// if not HasPower ( i ) and not defeated [ i ] then
9442: LD_VAR 0 1
9446: PPUSH
9447: CALL 8750 0 1
9451: NOT
9452: PUSH
9453: LD_LOC 18
9457: PUSH
9458: LD_VAR 0 1
9462: ARRAY
9463: NOT
9464: AND
9465: IFFALSE 9513
// begin defeated = replace ( defeated , i , true ) ;
9467: LD_ADDR_LOC 18
9471: PUSH
9472: LD_LOC 18
9476: PPUSH
9477: LD_VAR 0 1
9481: PPUSH
9482: LD_INT 1
9484: PPUSH
9485: CALL_OW 1
9489: ST_TO_ADDR
// if i = mp_player_side then
9490: LD_VAR 0 1
9494: PUSH
9495: LD_OWVAR 7
9499: EQUAL
9500: IFFALSE 9513
// begin Multiplayer_Loose_Message ;
9502: CALL_OW 521
// SetPlayerSpectator ( ) ;
9506: CALL_OW 572
// enable ( 400 ) ;
9510: LD_INT 400
9512: ENABLE_MARKED
// end ; end ; end ;
9513: GO 9427
9515: POP
9516: POP
// DidGameEnd ;
9517: CALL 9532 0 0
// if not GameEnded then
9521: LD_LOC 19
9525: NOT
9526: IFFALSE 9529
// enable ;
9528: ENABLE
// end ;
9529: PPOPN 2
9531: END
// function DidGameEnd ; var i , k , enemy ; begin
9532: LD_INT 0
9534: PPUSH
9535: PPUSH
9536: PPUSH
9537: PPUSH
// enemy = [ ] ;
9538: LD_ADDR_VAR 0 4
9542: PUSH
9543: EMPTY
9544: ST_TO_ADDR
// for i = 1 to side_positions do
9545: LD_ADDR_VAR 0 2
9549: PUSH
9550: DOUBLE
9551: LD_INT 1
9553: DEC
9554: ST_TO_ADDR
9555: LD_EXP 37
9559: PUSH
9560: FOR_TO
9561: IFFALSE 9655
// if not defeated [ i ] then
9563: LD_LOC 18
9567: PUSH
9568: LD_VAR 0 2
9572: ARRAY
9573: NOT
9574: IFFALSE 9653
// for k = 1 to side_positions do
9576: LD_ADDR_VAR 0 3
9580: PUSH
9581: DOUBLE
9582: LD_INT 1
9584: DEC
9585: ST_TO_ADDR
9586: LD_EXP 37
9590: PUSH
9591: FOR_TO
9592: IFFALSE 9651
// if not defeated [ k ] then
9594: LD_LOC 18
9598: PUSH
9599: LD_VAR 0 3
9603: ARRAY
9604: NOT
9605: IFFALSE 9649
// if not AlliedSides ( i , k ) then
9607: LD_VAR 0 2
9611: PPUSH
9612: LD_VAR 0 3
9616: PPUSH
9617: CALL 9096 0 2
9621: NOT
9622: IFFALSE 9649
// enemy = enemy ^ [ i , k ] ;
9624: LD_ADDR_VAR 0 4
9628: PUSH
9629: LD_VAR 0 4
9633: PUSH
9634: LD_VAR 0 2
9638: PUSH
9639: LD_VAR 0 3
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: ADD
9648: ST_TO_ADDR
9649: GO 9591
9651: POP
9652: POP
9653: GO 9560
9655: POP
9656: POP
// if not enemy then
9657: LD_VAR 0 4
9661: NOT
9662: IFFALSE 9688
// begin GameEnded = true ;
9664: LD_ADDR_LOC 19
9668: PUSH
9669: LD_INT 1
9671: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9672: LD_LOC 18
9676: PUSH
9677: LD_OWVAR 7
9681: ARRAY
9682: NOT
9683: IFFALSE 9688
// enable ( 401 ) ;
9685: LD_INT 401
9687: ENABLE_MARKED
// end ; end ;
9688: LD_VAR 0 1
9692: RET
// function unfog ; var k , friends ; begin
9693: LD_INT 0
9695: PPUSH
9696: PPUSH
9697: PPUSH
// for k = 1 to side_positions do
9698: LD_ADDR_VAR 0 2
9702: PUSH
9703: DOUBLE
9704: LD_INT 1
9706: DEC
9707: ST_TO_ADDR
9708: LD_EXP 37
9712: PUSH
9713: FOR_TO
9714: IFFALSE 9770
// if not defeated [ k ] then
9716: LD_LOC 18
9720: PUSH
9721: LD_VAR 0 2
9725: ARRAY
9726: NOT
9727: IFFALSE 9768
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9729: LD_OWVAR 7
9733: PPUSH
9734: LD_VAR 0 2
9738: PPUSH
9739: CALL_OW 81
9743: PUSH
9744: LD_INT 1
9746: PUSH
9747: EMPTY
9748: LIST
9749: IN
9750: IFFALSE 9768
// friends = friends ^ k ;
9752: LD_ADDR_VAR 0 3
9756: PUSH
9757: LD_VAR 0 3
9761: PUSH
9762: LD_VAR 0 2
9766: ADD
9767: ST_TO_ADDR
9768: GO 9713
9770: POP
9771: POP
// if not friends then
9772: LD_VAR 0 3
9776: NOT
9777: IFFALSE 9791
// begin SetPlayerSpectator ( ) ;
9779: CALL_OW 572
// unfoged = true ;
9783: LD_ADDR_LOC 20
9787: PUSH
9788: LD_INT 1
9790: ST_TO_ADDR
// end ; end ;
9791: LD_VAR 0 1
9795: RET
// export function MakeGameEnd ; begin
9796: LD_INT 0
9798: PPUSH
// SetPlayerSpectator ( ) ;
9799: CALL_OW 572
// unfoged = true ;
9803: LD_ADDR_LOC 20
9807: PUSH
9808: LD_INT 1
9810: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9811: LD_INT 175
9813: PPUSH
9814: CALL_OW 67
// GameEnded = true ;
9818: LD_ADDR_LOC 19
9822: PUSH
9823: LD_INT 1
9825: ST_TO_ADDR
// end ;
9826: LD_VAR 0 1
9830: RET
// export function GetGameEnded ; begin
9831: LD_INT 0
9833: PPUSH
// result = GameEnded ;
9834: LD_ADDR_VAR 0 1
9838: PUSH
9839: LD_LOC 19
9843: ST_TO_ADDR
// end ; end_of_file
9844: LD_VAR 0 1
9848: RET
// var win ; export function init_kings_counting ; var i ; begin
9849: LD_INT 0
9851: PPUSH
9852: PPUSH
// mp_with_score := true ;
9853: LD_ADDR_OWVAR 14
9857: PUSH
9858: LD_INT 1
9860: ST_TO_ADDR
// ResetMultiScore ;
9861: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
9865: LD_EXP 45
9869: PPUSH
9870: LD_INT 1
9872: PPUSH
9873: CALL_OW 424
// enable ( 2 ) ;
9877: LD_INT 2
9879: ENABLE_MARKED
// end ;
9880: LD_VAR 0 1
9884: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
9885: LD_INT 0
9887: PPUSH
9888: PPUSH
9889: PPUSH
9890: PPUSH
9891: PPUSH
9892: PPUSH
9893: PPUSH
9894: PPUSH
9895: PPUSH
// vypis := [ ] ;
9896: LD_ADDR_VAR 0 3
9900: PUSH
9901: EMPTY
9902: ST_TO_ADDR
// red = 0 ;
9903: LD_ADDR_VAR 0 5
9907: PUSH
9908: LD_INT 0
9910: ST_TO_ADDR
// blue = 0 ;
9911: LD_ADDR_VAR 0 6
9915: PUSH
9916: LD_INT 0
9918: ST_TO_ADDR
// yel = 0 ;
9919: LD_ADDR_VAR 0 7
9923: PUSH
9924: LD_INT 0
9926: ST_TO_ADDR
// green = 0 ;
9927: LD_ADDR_VAR 0 8
9931: PUSH
9932: LD_INT 0
9934: ST_TO_ADDR
// if def_public_score or isSGUI then
9935: LD_EXP 14
9939: PUSH
9940: LD_OWVAR 83
9944: OR
9945: IFFALSE 10542
// if not Team_Game then
9947: LD_EXP 39
9951: NOT
9952: IFFALSE 10074
// begin for side = 1 to Side_Positions do
9954: LD_ADDR_VAR 0 2
9958: PUSH
9959: DOUBLE
9960: LD_INT 1
9962: DEC
9963: ST_TO_ADDR
9964: LD_EXP 37
9968: PUSH
9969: FOR_TO
9970: IFFALSE 10070
// if Side_Positions [ side ] then
9972: LD_EXP 37
9976: PUSH
9977: LD_VAR 0 2
9981: ARRAY
9982: IFFALSE 10068
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
9984: LD_ADDR_VAR 0 3
9988: PUSH
9989: LD_VAR 0 3
9993: PUSH
9994: LD_STRING #KingoftheHill-Public
9996: PUSH
9997: LD_VAR 0 2
10001: PUSH
10002: LD_VAR 0 2
10006: PUSH
10007: LD_VAR 0 2
10011: PUSH
10012: LD_INT 10
10014: PLUS
10015: PPUSH
10016: CALL_OW 110
10020: PUSH
10021: LD_INT 3
10023: DIV
10024: PUSH
10025: LD_EXP 46
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: ADD
10037: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
10038: LD_INT 2
10040: PPUSH
10041: LD_VAR 0 2
10045: PPUSH
10046: LD_VAR 0 2
10050: PUSH
10051: LD_INT 10
10053: PLUS
10054: PPUSH
10055: CALL_OW 110
10059: PUSH
10060: LD_INT 3
10062: DIV
10063: PPUSH
10064: CALL 17446 0 3
// end ;
10068: GO 9969
10070: POP
10071: POP
// end else
10072: GO 10540
// begin if Teams [ 1 ] then
10074: LD_EXP 35
10078: PUSH
10079: LD_INT 1
10081: ARRAY
10082: IFFALSE 10134
// for i in Teams [ 1 ] do
10084: LD_ADDR_VAR 0 4
10088: PUSH
10089: LD_EXP 35
10093: PUSH
10094: LD_INT 1
10096: ARRAY
10097: PUSH
10098: FOR_IN
10099: IFFALSE 10132
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
10101: LD_ADDR_VAR 0 5
10105: PUSH
10106: LD_VAR 0 5
10110: PUSH
10111: LD_VAR 0 4
10115: PUSH
10116: LD_INT 10
10118: PLUS
10119: PPUSH
10120: CALL_OW 110
10124: PUSH
10125: LD_INT 3
10127: DIV
10128: PLUS
10129: ST_TO_ADDR
10130: GO 10098
10132: POP
10133: POP
// if Teams [ 2 ] then
10134: LD_EXP 35
10138: PUSH
10139: LD_INT 2
10141: ARRAY
10142: IFFALSE 10194
// for i in Teams [ 2 ] do
10144: LD_ADDR_VAR 0 4
10148: PUSH
10149: LD_EXP 35
10153: PUSH
10154: LD_INT 2
10156: ARRAY
10157: PUSH
10158: FOR_IN
10159: IFFALSE 10192
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
10161: LD_ADDR_VAR 0 6
10165: PUSH
10166: LD_VAR 0 6
10170: PUSH
10171: LD_VAR 0 4
10175: PUSH
10176: LD_INT 10
10178: PLUS
10179: PPUSH
10180: CALL_OW 110
10184: PUSH
10185: LD_INT 3
10187: DIV
10188: PLUS
10189: ST_TO_ADDR
10190: GO 10158
10192: POP
10193: POP
// if Teams [ 3 ] then
10194: LD_EXP 35
10198: PUSH
10199: LD_INT 3
10201: ARRAY
10202: IFFALSE 10254
// for i in Teams [ 3 ] do
10204: LD_ADDR_VAR 0 4
10208: PUSH
10209: LD_EXP 35
10213: PUSH
10214: LD_INT 3
10216: ARRAY
10217: PUSH
10218: FOR_IN
10219: IFFALSE 10252
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
10221: LD_ADDR_VAR 0 7
10225: PUSH
10226: LD_VAR 0 7
10230: PUSH
10231: LD_VAR 0 4
10235: PUSH
10236: LD_INT 10
10238: PLUS
10239: PPUSH
10240: CALL_OW 110
10244: PUSH
10245: LD_INT 3
10247: DIV
10248: PLUS
10249: ST_TO_ADDR
10250: GO 10218
10252: POP
10253: POP
// if Teams [ 4 ] then
10254: LD_EXP 35
10258: PUSH
10259: LD_INT 4
10261: ARRAY
10262: IFFALSE 10314
// for i in Teams [ 4 ] do
10264: LD_ADDR_VAR 0 4
10268: PUSH
10269: LD_EXP 35
10273: PUSH
10274: LD_INT 4
10276: ARRAY
10277: PUSH
10278: FOR_IN
10279: IFFALSE 10312
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
10281: LD_ADDR_VAR 0 8
10285: PUSH
10286: LD_VAR 0 8
10290: PUSH
10291: LD_VAR 0 4
10295: PUSH
10296: LD_INT 10
10298: PLUS
10299: PPUSH
10300: CALL_OW 110
10304: PUSH
10305: LD_INT 3
10307: DIV
10308: PLUS
10309: ST_TO_ADDR
10310: GO 10278
10312: POP
10313: POP
// if Teams [ 1 ] then
10314: LD_EXP 35
10318: PUSH
10319: LD_INT 1
10321: ARRAY
10322: IFFALSE 10351
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
10324: LD_ADDR_VAR 0 3
10328: PUSH
10329: LD_STRING #KingoftheHill-Public-red
10331: PUSH
10332: LD_INT 3
10334: PUSH
10335: LD_VAR 0 5
10339: PUSH
10340: LD_EXP 46
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: ST_TO_ADDR
// if Teams [ 2 ] then
10351: LD_EXP 35
10355: PUSH
10356: LD_INT 2
10358: ARRAY
10359: IFFALSE 10394
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
10361: LD_ADDR_VAR 0 3
10365: PUSH
10366: LD_VAR 0 3
10370: PUSH
10371: LD_STRING #KingoftheHill-Public-blue
10373: PUSH
10374: LD_INT 1
10376: PUSH
10377: LD_VAR 0 6
10381: PUSH
10382: LD_EXP 46
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: ADD
10393: ST_TO_ADDR
// if Teams [ 3 ] then
10394: LD_EXP 35
10398: PUSH
10399: LD_INT 3
10401: ARRAY
10402: IFFALSE 10437
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
10404: LD_ADDR_VAR 0 3
10408: PUSH
10409: LD_VAR 0 3
10413: PUSH
10414: LD_STRING #KingoftheHill-Public-yell
10416: PUSH
10417: LD_INT 2
10419: PUSH
10420: LD_VAR 0 7
10424: PUSH
10425: LD_EXP 46
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: ADD
10436: ST_TO_ADDR
// if Teams [ 4 ] then
10437: LD_EXP 35
10441: PUSH
10442: LD_INT 4
10444: ARRAY
10445: IFFALSE 10480
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
10447: LD_ADDR_VAR 0 3
10451: PUSH
10452: LD_VAR 0 3
10456: PUSH
10457: LD_STRING #KingoftheHill-Public-green
10459: PUSH
10460: LD_INT 7
10462: PUSH
10463: LD_VAR 0 8
10467: PUSH
10468: LD_EXP 46
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: ADD
10479: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
10480: LD_INT 2
10482: PPUSH
10483: LD_INT 3
10485: PPUSH
10486: LD_VAR 0 5
10490: PPUSH
10491: CALL 17446 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
10495: LD_INT 2
10497: PPUSH
10498: LD_INT 1
10500: PPUSH
10501: LD_VAR 0 6
10505: PPUSH
10506: CALL 17446 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
10510: LD_INT 2
10512: PPUSH
10513: LD_INT 2
10515: PPUSH
10516: LD_VAR 0 7
10520: PPUSH
10521: CALL 17446 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
10525: LD_INT 2
10527: PPUSH
10528: LD_INT 7
10530: PPUSH
10531: LD_VAR 0 8
10535: PPUSH
10536: CALL 17446 0 3
// end else
10540: GO 10977
// if not Team_Game then
10542: LD_EXP 39
10546: NOT
10547: IFFALSE 10605
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
10549: LD_ADDR_VAR 0 3
10553: PUSH
10554: LD_VAR 0 3
10558: PUSH
10559: LD_STRING #KingoftheHill-Private
10561: PUSH
10562: LD_OWVAR 7
10566: PUSH
10567: LD_OWVAR 7
10571: PUSH
10572: LD_VAR 0 2
10576: PUSH
10577: LD_INT 10
10579: PLUS
10580: PPUSH
10581: CALL_OW 110
10585: PUSH
10586: LD_INT 3
10588: DIV
10589: PUSH
10590: LD_EXP 46
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: ADD
10602: ST_TO_ADDR
10603: GO 10977
// begin for i in Teams [ 1 ] do
10605: LD_ADDR_VAR 0 4
10609: PUSH
10610: LD_EXP 35
10614: PUSH
10615: LD_INT 1
10617: ARRAY
10618: PUSH
10619: FOR_IN
10620: IFFALSE 10653
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
10622: LD_ADDR_VAR 0 5
10626: PUSH
10627: LD_VAR 0 5
10631: PUSH
10632: LD_VAR 0 4
10636: PUSH
10637: LD_INT 10
10639: PLUS
10640: PPUSH
10641: CALL_OW 110
10645: PUSH
10646: LD_INT 3
10648: DIV
10649: PLUS
10650: ST_TO_ADDR
10651: GO 10619
10653: POP
10654: POP
// for i in Teams [ 2 ] do
10655: LD_ADDR_VAR 0 4
10659: PUSH
10660: LD_EXP 35
10664: PUSH
10665: LD_INT 2
10667: ARRAY
10668: PUSH
10669: FOR_IN
10670: IFFALSE 10703
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
10672: LD_ADDR_VAR 0 6
10676: PUSH
10677: LD_VAR 0 6
10681: PUSH
10682: LD_VAR 0 4
10686: PUSH
10687: LD_INT 10
10689: PLUS
10690: PPUSH
10691: CALL_OW 110
10695: PUSH
10696: LD_INT 3
10698: DIV
10699: PLUS
10700: ST_TO_ADDR
10701: GO 10669
10703: POP
10704: POP
// for i in Teams [ 3 ] do
10705: LD_ADDR_VAR 0 4
10709: PUSH
10710: LD_EXP 35
10714: PUSH
10715: LD_INT 3
10717: ARRAY
10718: PUSH
10719: FOR_IN
10720: IFFALSE 10753
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
10722: LD_ADDR_VAR 0 7
10726: PUSH
10727: LD_VAR 0 7
10731: PUSH
10732: LD_VAR 0 4
10736: PUSH
10737: LD_INT 10
10739: PLUS
10740: PPUSH
10741: CALL_OW 110
10745: PUSH
10746: LD_INT 3
10748: DIV
10749: PLUS
10750: ST_TO_ADDR
10751: GO 10719
10753: POP
10754: POP
// for i in Teams [ 4 ] do
10755: LD_ADDR_VAR 0 4
10759: PUSH
10760: LD_EXP 35
10764: PUSH
10765: LD_INT 4
10767: ARRAY
10768: PUSH
10769: FOR_IN
10770: IFFALSE 10803
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
10772: LD_ADDR_VAR 0 8
10776: PUSH
10777: LD_VAR 0 8
10781: PUSH
10782: LD_VAR 0 4
10786: PUSH
10787: LD_INT 10
10789: PLUS
10790: PPUSH
10791: CALL_OW 110
10795: PUSH
10796: LD_INT 3
10798: DIV
10799: PLUS
10800: ST_TO_ADDR
10801: GO 10769
10803: POP
10804: POP
// if mp_player_side in Teams [ 1 ] then
10805: LD_OWVAR 7
10809: PUSH
10810: LD_EXP 35
10814: PUSH
10815: LD_INT 1
10817: ARRAY
10818: IN
10819: IFFALSE 10848
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_STRING #KingoftheHill-Public-red
10828: PUSH
10829: LD_INT 3
10831: PUSH
10832: LD_VAR 0 5
10836: PUSH
10837: LD_EXP 46
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
10848: LD_OWVAR 7
10852: PUSH
10853: LD_EXP 35
10857: PUSH
10858: LD_INT 2
10860: ARRAY
10861: IN
10862: IFFALSE 10891
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
10864: LD_ADDR_VAR 0 3
10868: PUSH
10869: LD_STRING #KingoftheHill-Public-blue
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: LD_VAR 0 6
10879: PUSH
10880: LD_EXP 46
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
10891: LD_OWVAR 7
10895: PUSH
10896: LD_EXP 35
10900: PUSH
10901: LD_INT 3
10903: ARRAY
10904: IN
10905: IFFALSE 10934
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
10907: LD_ADDR_VAR 0 3
10911: PUSH
10912: LD_STRING #KingoftheHill-Public-yell
10914: PUSH
10915: LD_INT 2
10917: PUSH
10918: LD_VAR 0 7
10922: PUSH
10923: LD_EXP 46
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
10934: LD_OWVAR 7
10938: PUSH
10939: LD_EXP 35
10943: PUSH
10944: LD_INT 4
10946: ARRAY
10947: IN
10948: IFFALSE 10977
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
10950: LD_ADDR_VAR 0 3
10954: PUSH
10955: LD_STRING #KingoftheHill-Public-green
10957: PUSH
10958: LD_INT 7
10960: PUSH
10961: LD_VAR 0 8
10965: PUSH
10966: LD_EXP 46
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: ST_TO_ADDR
// end ; Display_kings := vypis ;
10977: LD_ADDR_EXP 60
10981: PUSH
10982: LD_VAR 0 3
10986: ST_TO_ADDR
// end ;
10987: LD_VAR 0 1
10991: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
10992: LD_INT 0
10994: PPUSH
10995: PPUSH
10996: PPUSH
10997: PPUSH
10998: PPUSH
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
// side := [ ] ;
11003: LD_ADDR_VAR 0 2
11007: PUSH
11008: EMPTY
11009: ST_TO_ADDR
// red = 0 ;
11010: LD_ADDR_VAR 0 5
11014: PUSH
11015: LD_INT 0
11017: ST_TO_ADDR
// blue = 0 ;
11018: LD_ADDR_VAR 0 6
11022: PUSH
11023: LD_INT 0
11025: ST_TO_ADDR
// yel = 0 ;
11026: LD_ADDR_VAR 0 7
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// green = 0 ;
11034: LD_ADDR_VAR 0 8
11038: PUSH
11039: LD_INT 0
11041: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
11042: LD_ADDR_VAR 0 3
11046: PUSH
11047: LD_EXP 45
11051: PPUSH
11052: LD_INT 21
11054: PUSH
11055: LD_INT 3
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: LD_INT 53
11064: PUSH
11065: EMPTY
11066: LIST
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PPUSH
11072: CALL_OW 70
11076: ST_TO_ADDR
// for un in list do
11077: LD_ADDR_VAR 0 4
11081: PUSH
11082: LD_VAR 0 3
11086: PUSH
11087: FOR_IN
11088: IFFALSE 11113
// side := side union GetSide ( un ) ;
11090: LD_ADDR_VAR 0 2
11094: PUSH
11095: LD_VAR 0 2
11099: PUSH
11100: LD_VAR 0 4
11104: PPUSH
11105: CALL_OW 255
11109: UNION
11110: ST_TO_ADDR
11111: GO 11087
11113: POP
11114: POP
// if side <> 1 then
11115: LD_VAR 0 2
11119: PUSH
11120: LD_INT 1
11122: NONEQUAL
11123: IFFALSE 11127
// exit ;
11125: GO 11490
// side := side [ 1 ] ;
11127: LD_ADDR_VAR 0 2
11131: PUSH
11132: LD_VAR 0 2
11136: PUSH
11137: LD_INT 1
11139: ARRAY
11140: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
11141: LD_VAR 0 2
11145: PUSH
11146: LD_INT 10
11148: PLUS
11149: PPUSH
11150: LD_VAR 0 2
11154: PUSH
11155: LD_INT 10
11157: PLUS
11158: PPUSH
11159: CALL_OW 110
11163: PUSH
11164: LD_INT 1
11166: PLUS
11167: PPUSH
11168: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
11172: LD_VAR 0 2
11176: PPUSH
11177: LD_VAR 0 2
11181: PUSH
11182: LD_INT 10
11184: PLUS
11185: PPUSH
11186: CALL_OW 110
11190: PUSH
11191: LD_INT 3
11193: DIV
11194: PPUSH
11195: LD_INT 2
11197: PPUSH
11198: CALL 8138 0 3
// if not Team_Game then
11202: LD_EXP 39
11206: NOT
11207: IFFALSE 11490
// if GetTag ( side + 10 ) >= final_count * 3 then
11209: LD_VAR 0 2
11213: PUSH
11214: LD_INT 10
11216: PLUS
11217: PPUSH
11218: CALL_OW 110
11222: PUSH
11223: LD_EXP 46
11227: PUSH
11228: LD_INT 3
11230: MUL
11231: GREATEREQUAL
11232: IFFALSE 11239
// enable ( 3 ) else
11234: LD_INT 3
11236: ENABLE_MARKED
11237: GO 11490
// begin for i in Teams [ 1 ] do
11239: LD_ADDR_VAR 0 9
11243: PUSH
11244: LD_EXP 35
11248: PUSH
11249: LD_INT 1
11251: ARRAY
11252: PUSH
11253: FOR_IN
11254: IFFALSE 11287
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
11256: LD_ADDR_VAR 0 5
11260: PUSH
11261: LD_VAR 0 5
11265: PUSH
11266: LD_VAR 0 9
11270: PUSH
11271: LD_INT 10
11273: PLUS
11274: PPUSH
11275: CALL_OW 110
11279: PUSH
11280: LD_INT 3
11282: DIV
11283: PLUS
11284: ST_TO_ADDR
11285: GO 11253
11287: POP
11288: POP
// for i in Teams [ 2 ] do
11289: LD_ADDR_VAR 0 9
11293: PUSH
11294: LD_EXP 35
11298: PUSH
11299: LD_INT 2
11301: ARRAY
11302: PUSH
11303: FOR_IN
11304: IFFALSE 11337
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
11306: LD_ADDR_VAR 0 6
11310: PUSH
11311: LD_VAR 0 6
11315: PUSH
11316: LD_VAR 0 9
11320: PUSH
11321: LD_INT 10
11323: PLUS
11324: PPUSH
11325: CALL_OW 110
11329: PUSH
11330: LD_INT 3
11332: DIV
11333: PLUS
11334: ST_TO_ADDR
11335: GO 11303
11337: POP
11338: POP
// for i in Teams [ 3 ] do
11339: LD_ADDR_VAR 0 9
11343: PUSH
11344: LD_EXP 35
11348: PUSH
11349: LD_INT 3
11351: ARRAY
11352: PUSH
11353: FOR_IN
11354: IFFALSE 11387
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
11356: LD_ADDR_VAR 0 7
11360: PUSH
11361: LD_VAR 0 7
11365: PUSH
11366: LD_VAR 0 9
11370: PUSH
11371: LD_INT 10
11373: PLUS
11374: PPUSH
11375: CALL_OW 110
11379: PUSH
11380: LD_INT 3
11382: DIV
11383: PLUS
11384: ST_TO_ADDR
11385: GO 11353
11387: POP
11388: POP
// for i in Teams [ 4 ] do
11389: LD_ADDR_VAR 0 9
11393: PUSH
11394: LD_EXP 35
11398: PUSH
11399: LD_INT 4
11401: ARRAY
11402: PUSH
11403: FOR_IN
11404: IFFALSE 11437
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
11406: LD_ADDR_VAR 0 8
11410: PUSH
11411: LD_VAR 0 8
11415: PUSH
11416: LD_VAR 0 9
11420: PUSH
11421: LD_INT 10
11423: PLUS
11424: PPUSH
11425: CALL_OW 110
11429: PUSH
11430: LD_INT 3
11432: DIV
11433: PLUS
11434: ST_TO_ADDR
11435: GO 11403
11437: POP
11438: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
11439: LD_VAR 0 5
11443: PUSH
11444: LD_EXP 46
11448: GREATEREQUAL
11449: PUSH
11450: LD_VAR 0 6
11454: PUSH
11455: LD_EXP 46
11459: GREATEREQUAL
11460: OR
11461: PUSH
11462: LD_VAR 0 7
11466: PUSH
11467: LD_EXP 46
11471: GREATEREQUAL
11472: OR
11473: PUSH
11474: LD_VAR 0 8
11478: PUSH
11479: LD_EXP 46
11483: GREATEREQUAL
11484: OR
11485: IFFALSE 11490
// enable ( 3 ) ;
11487: LD_INT 3
11489: ENABLE_MARKED
// end ; end ;
11490: LD_VAR 0 1
11494: RET
// every 0 0$1 marked 2 do
11495: GO 11497
11497: DISABLE
// begin count_king ;
11498: CALL 10992 0 0
// show_public_points ;
11502: CALL 9885 0 0
// enable ;
11506: ENABLE
// end ;
11507: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
11508: GO 11510
11510: DISABLE
11511: LD_INT 0
11513: PPUSH
11514: PPUSH
11515: PPUSH
11516: PPUSH
11517: PPUSH
11518: PPUSH
// begin win := [ ] ;
11519: LD_ADDR_LOC 22
11523: PUSH
11524: EMPTY
11525: ST_TO_ADDR
// red = 0 ;
11526: LD_ADDR_VAR 0 2
11530: PUSH
11531: LD_INT 0
11533: ST_TO_ADDR
// blue = 0 ;
11534: LD_ADDR_VAR 0 3
11538: PUSH
11539: LD_INT 0
11541: ST_TO_ADDR
// yel = 0 ;
11542: LD_ADDR_VAR 0 4
11546: PUSH
11547: LD_INT 0
11549: ST_TO_ADDR
// green = 0 ;
11550: LD_ADDR_VAR 0 5
11554: PUSH
11555: LD_INT 0
11557: ST_TO_ADDR
// if not Team_Game then
11558: LD_EXP 39
11562: NOT
11563: IFFALSE 11640
// begin for side = 1 to 8 do
11565: LD_ADDR_VAR 0 1
11569: PUSH
11570: DOUBLE
11571: LD_INT 1
11573: DEC
11574: ST_TO_ADDR
11575: LD_INT 8
11577: PUSH
11578: FOR_TO
11579: IFFALSE 11624
// if GetTag ( side + 10 ) >= final_count * 3 then
11581: LD_VAR 0 1
11585: PUSH
11586: LD_INT 10
11588: PLUS
11589: PPUSH
11590: CALL_OW 110
11594: PUSH
11595: LD_EXP 46
11599: PUSH
11600: LD_INT 3
11602: MUL
11603: GREATEREQUAL
11604: IFFALSE 11622
// win := win ^ side ;
11606: LD_ADDR_LOC 22
11610: PUSH
11611: LD_LOC 22
11615: PUSH
11616: LD_VAR 0 1
11620: ADD
11621: ST_TO_ADDR
11622: GO 11578
11624: POP
11625: POP
// if win then
11626: LD_LOC 22
11630: IFFALSE 11637
// enable ( 4 ) else
11632: LD_INT 4
11634: ENABLE_MARKED
11635: GO 11638
// enable ;
11637: ENABLE
// end else
11638: GO 11956
// begin for i in Teams [ 1 ] do
11640: LD_ADDR_VAR 0 6
11644: PUSH
11645: LD_EXP 35
11649: PUSH
11650: LD_INT 1
11652: ARRAY
11653: PUSH
11654: FOR_IN
11655: IFFALSE 11688
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
11657: LD_ADDR_VAR 0 2
11661: PUSH
11662: LD_VAR 0 2
11666: PUSH
11667: LD_VAR 0 6
11671: PUSH
11672: LD_INT 10
11674: PLUS
11675: PPUSH
11676: CALL_OW 110
11680: PUSH
11681: LD_INT 3
11683: DIV
11684: PLUS
11685: ST_TO_ADDR
11686: GO 11654
11688: POP
11689: POP
// for i in Teams [ 2 ] do
11690: LD_ADDR_VAR 0 6
11694: PUSH
11695: LD_EXP 35
11699: PUSH
11700: LD_INT 2
11702: ARRAY
11703: PUSH
11704: FOR_IN
11705: IFFALSE 11738
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
11707: LD_ADDR_VAR 0 3
11711: PUSH
11712: LD_VAR 0 3
11716: PUSH
11717: LD_VAR 0 6
11721: PUSH
11722: LD_INT 10
11724: PLUS
11725: PPUSH
11726: CALL_OW 110
11730: PUSH
11731: LD_INT 3
11733: DIV
11734: PLUS
11735: ST_TO_ADDR
11736: GO 11704
11738: POP
11739: POP
// for i in Teams [ 3 ] do
11740: LD_ADDR_VAR 0 6
11744: PUSH
11745: LD_EXP 35
11749: PUSH
11750: LD_INT 3
11752: ARRAY
11753: PUSH
11754: FOR_IN
11755: IFFALSE 11788
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
11757: LD_ADDR_VAR 0 4
11761: PUSH
11762: LD_VAR 0 4
11766: PUSH
11767: LD_VAR 0 6
11771: PUSH
11772: LD_INT 10
11774: PLUS
11775: PPUSH
11776: CALL_OW 110
11780: PUSH
11781: LD_INT 3
11783: DIV
11784: PLUS
11785: ST_TO_ADDR
11786: GO 11754
11788: POP
11789: POP
// for i in Teams [ 4 ] do
11790: LD_ADDR_VAR 0 6
11794: PUSH
11795: LD_EXP 35
11799: PUSH
11800: LD_INT 4
11802: ARRAY
11803: PUSH
11804: FOR_IN
11805: IFFALSE 11838
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
11807: LD_ADDR_VAR 0 5
11811: PUSH
11812: LD_VAR 0 5
11816: PUSH
11817: LD_VAR 0 6
11821: PUSH
11822: LD_INT 10
11824: PLUS
11825: PPUSH
11826: CALL_OW 110
11830: PUSH
11831: LD_INT 3
11833: DIV
11834: PLUS
11835: ST_TO_ADDR
11836: GO 11804
11838: POP
11839: POP
// if red >= final_count then
11840: LD_VAR 0 2
11844: PUSH
11845: LD_EXP 46
11849: GREATEREQUAL
11850: IFFALSE 11866
// win = teams [ 1 ] ;
11852: LD_ADDR_LOC 22
11856: PUSH
11857: LD_EXP 35
11861: PUSH
11862: LD_INT 1
11864: ARRAY
11865: ST_TO_ADDR
// if blue >= final_count then
11866: LD_VAR 0 3
11870: PUSH
11871: LD_EXP 46
11875: GREATEREQUAL
11876: IFFALSE 11892
// win = teams [ 2 ] ;
11878: LD_ADDR_LOC 22
11882: PUSH
11883: LD_EXP 35
11887: PUSH
11888: LD_INT 2
11890: ARRAY
11891: ST_TO_ADDR
// if yel >= final_count then
11892: LD_VAR 0 4
11896: PUSH
11897: LD_EXP 46
11901: GREATEREQUAL
11902: IFFALSE 11918
// win = teams [ 3 ] ;
11904: LD_ADDR_LOC 22
11908: PUSH
11909: LD_EXP 35
11913: PUSH
11914: LD_INT 3
11916: ARRAY
11917: ST_TO_ADDR
// if green >= final_count then
11918: LD_VAR 0 5
11922: PUSH
11923: LD_EXP 46
11927: GREATEREQUAL
11928: IFFALSE 11944
// win = teams [ 4 ] ;
11930: LD_ADDR_LOC 22
11934: PUSH
11935: LD_EXP 35
11939: PUSH
11940: LD_INT 4
11942: ARRAY
11943: ST_TO_ADDR
// if win then
11944: LD_LOC 22
11948: IFFALSE 11955
// enable ( 4 ) else
11950: LD_INT 4
11952: ENABLE_MARKED
11953: GO 11956
// enable ;
11955: ENABLE
// end ; end ;
11956: PPOPN 6
11958: END
// every 0 0$1 marked 4 do
11959: GO 11961
11961: DISABLE
// begin if Player_Side in win then
11962: LD_EXP 47
11966: PUSH
11967: LD_LOC 22
11971: IN
11972: IFFALSE 11988
// begin wait ( 0 0$2 ) ;
11974: LD_INT 70
11976: PPUSH
11977: CALL_OW 67
// enable ( 401 ) ;
11981: LD_INT 401
11983: ENABLE_MARKED
// exit ;
11984: GO 12004
// end else
11986: GO 12004
// begin wait ( 0 0$2 ) ;
11988: LD_INT 70
11990: PPUSH
11991: CALL_OW 67
// Multiplayer_Loose_Message ;
11995: CALL_OW 521
// enable ( 400 ) ;
11999: LD_INT 400
12001: ENABLE_MARKED
// exit ;
12002: GO 12004
// end ; end ; end_of_file
12004: END
// export function SetMpTechs ( ) ; var side , i ; begin
12005: LD_INT 0
12007: PPUSH
12008: PPUSH
12009: PPUSH
// for side = 1 to 8 do
12010: LD_ADDR_VAR 0 2
12014: PUSH
12015: DOUBLE
12016: LD_INT 1
12018: DEC
12019: ST_TO_ADDR
12020: LD_INT 8
12022: PUSH
12023: FOR_TO
12024: IFFALSE 12145
// begin for i = 1 to 72 do
12026: LD_ADDR_VAR 0 3
12030: PUSH
12031: DOUBLE
12032: LD_INT 1
12034: DEC
12035: ST_TO_ADDR
12036: LD_INT 72
12038: PUSH
12039: FOR_TO
12040: IFFALSE 12071
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12042: LD_VAR 0 3
12046: PPUSH
12047: LD_VAR 0 2
12051: PPUSH
12052: LD_INT 0
12054: PPUSH
12055: LD_VAR 0 3
12059: PPUSH
12060: CALL_OW 565
12064: PPUSH
12065: CALL_OW 322
12069: GO 12039
12071: POP
12072: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12073: LD_INT 73
12075: PPUSH
12076: LD_VAR 0 2
12080: PPUSH
12081: LD_INT 0
12083: PPUSH
12084: LD_INT 25
12086: PPUSH
12087: CALL_OW 565
12091: PPUSH
12092: CALL_OW 322
// for i = 0 to 40 do
12096: LD_ADDR_VAR 0 3
12100: PUSH
12101: DOUBLE
12102: LD_INT 0
12104: DEC
12105: ST_TO_ADDR
12106: LD_INT 40
12108: PUSH
12109: FOR_TO
12110: IFFALSE 12141
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12112: LD_VAR 0 3
12116: PPUSH
12117: LD_VAR 0 2
12121: PPUSH
12122: LD_INT 1
12124: PPUSH
12125: LD_VAR 0 3
12129: PPUSH
12130: CALL_OW 565
12134: PPUSH
12135: CALL_OW 324
12139: GO 12109
12141: POP
12142: POP
// end ;
12143: GO 12023
12145: POP
12146: POP
// end ;
12147: LD_VAR 0 1
12151: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12152: LD_INT 0
12154: PPUSH
12155: PPUSH
12156: PPUSH
// for side = 1 to 8 do
12157: LD_ADDR_VAR 0 3
12161: PUSH
12162: DOUBLE
12163: LD_INT 1
12165: DEC
12166: ST_TO_ADDR
12167: LD_INT 8
12169: PUSH
12170: FOR_TO
12171: IFFALSE 16167
// begin for i = 1 to 73 do
12173: LD_ADDR_VAR 0 4
12177: PUSH
12178: DOUBLE
12179: LD_INT 1
12181: DEC
12182: ST_TO_ADDR
12183: LD_INT 73
12185: PUSH
12186: FOR_TO
12187: IFFALSE 12208
// SetTech ( i , side , state_disabled ) ;
12189: LD_VAR 0 4
12193: PPUSH
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 0
12201: PPUSH
12202: CALL_OW 322
12206: GO 12186
12208: POP
12209: POP
// for i = 0 to 40 do
12210: LD_ADDR_VAR 0 4
12214: PUSH
12215: DOUBLE
12216: LD_INT 0
12218: DEC
12219: ST_TO_ADDR
12220: LD_INT 40
12222: PUSH
12223: FOR_TO
12224: IFFALSE 12245
// SetRestrict ( i , side , false ) ;
12226: LD_VAR 0 4
12230: PPUSH
12231: LD_VAR 0 3
12235: PPUSH
12236: LD_INT 0
12238: PPUSH
12239: CALL_OW 324
12243: GO 12223
12245: POP
12246: POP
// case level of 1 :
12247: LD_VAR 0 1
12251: PUSH
12252: LD_INT 1
12254: DOUBLE
12255: EQUAL
12256: IFTRUE 12260
12258: GO 12413
12260: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12261: LD_INT 35
12263: PPUSH
12264: LD_VAR 0 3
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12276: LD_INT 45
12278: PPUSH
12279: LD_VAR 0 3
12283: PPUSH
12284: LD_INT 1
12286: PPUSH
12287: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12291: LD_INT 46
12293: PPUSH
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 1
12301: PPUSH
12302: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12306: LD_INT 47
12308: PPUSH
12309: LD_VAR 0 3
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12321: LD_INT 0
12323: PPUSH
12324: LD_VAR 0 3
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12336: LD_INT 2
12338: PPUSH
12339: LD_VAR 0 3
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12351: LD_INT 4
12353: PPUSH
12354: LD_VAR 0 3
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12366: LD_INT 6
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12381: LD_INT 29
12383: PPUSH
12384: LD_VAR 0 3
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12396: LD_INT 31
12398: PPUSH
12399: LD_VAR 0 3
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 324
// end ; 2 :
12411: GO 16165
12413: LD_INT 2
12415: DOUBLE
12416: EQUAL
12417: IFTRUE 12421
12419: GO 12619
12421: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12422: LD_INT 35
12424: PPUSH
12425: LD_VAR 0 3
12429: PPUSH
12430: LD_INT 1
12432: PPUSH
12433: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12437: LD_INT 45
12439: PPUSH
12440: LD_VAR 0 3
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12452: LD_INT 46
12454: PPUSH
12455: LD_VAR 0 3
12459: PPUSH
12460: LD_INT 1
12462: PPUSH
12463: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12467: LD_INT 47
12469: PPUSH
12470: LD_VAR 0 3
12474: PPUSH
12475: LD_INT 1
12477: PPUSH
12478: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12482: LD_INT 1
12484: PPUSH
12485: LD_VAR 0 3
12489: PPUSH
12490: LD_INT 1
12492: PPUSH
12493: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12497: LD_INT 2
12499: PPUSH
12500: LD_VAR 0 3
12504: PPUSH
12505: LD_INT 1
12507: PPUSH
12508: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12512: LD_INT 11
12514: PPUSH
12515: LD_VAR 0 3
12519: PPUSH
12520: LD_INT 1
12522: PPUSH
12523: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12527: LD_INT 0
12529: PPUSH
12530: LD_VAR 0 3
12534: PPUSH
12535: LD_INT 1
12537: PPUSH
12538: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12542: LD_INT 2
12544: PPUSH
12545: LD_VAR 0 3
12549: PPUSH
12550: LD_INT 1
12552: PPUSH
12553: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12557: LD_INT 4
12559: PPUSH
12560: LD_VAR 0 3
12564: PPUSH
12565: LD_INT 1
12567: PPUSH
12568: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12572: LD_INT 6
12574: PPUSH
12575: LD_VAR 0 3
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12587: LD_INT 29
12589: PPUSH
12590: LD_VAR 0 3
12594: PPUSH
12595: LD_INT 1
12597: PPUSH
12598: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12602: LD_INT 31
12604: PPUSH
12605: LD_VAR 0 3
12609: PPUSH
12610: LD_INT 1
12612: PPUSH
12613: CALL_OW 324
// end ; 3 :
12617: GO 16165
12619: LD_INT 3
12621: DOUBLE
12622: EQUAL
12623: IFTRUE 12627
12625: GO 13080
12627: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12628: LD_INT 35
12630: PPUSH
12631: LD_VAR 0 3
12635: PPUSH
12636: LD_INT 1
12638: PPUSH
12639: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12643: LD_INT 45
12645: PPUSH
12646: LD_VAR 0 3
12650: PPUSH
12651: LD_INT 1
12653: PPUSH
12654: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12658: LD_INT 46
12660: PPUSH
12661: LD_VAR 0 3
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12673: LD_INT 47
12675: PPUSH
12676: LD_VAR 0 3
12680: PPUSH
12681: LD_INT 1
12683: PPUSH
12684: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12688: LD_INT 1
12690: PPUSH
12691: LD_VAR 0 3
12695: PPUSH
12696: LD_INT 1
12698: PPUSH
12699: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12703: LD_INT 2
12705: PPUSH
12706: LD_VAR 0 3
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12718: LD_INT 11
12720: PPUSH
12721: LD_VAR 0 3
12725: PPUSH
12726: LD_INT 1
12728: PPUSH
12729: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12733: LD_INT 48
12735: PPUSH
12736: LD_VAR 0 3
12740: PPUSH
12741: LD_INT 1
12743: PPUSH
12744: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12748: LD_INT 69
12750: PPUSH
12751: LD_VAR 0 3
12755: PPUSH
12756: LD_INT 1
12758: PPUSH
12759: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12763: LD_INT 39
12765: PPUSH
12766: LD_VAR 0 3
12770: PPUSH
12771: LD_INT 1
12773: PPUSH
12774: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12778: LD_INT 43
12780: PPUSH
12781: LD_VAR 0 3
12785: PPUSH
12786: LD_INT 1
12788: PPUSH
12789: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12793: LD_INT 51
12795: PPUSH
12796: LD_VAR 0 3
12800: PPUSH
12801: LD_INT 1
12803: PPUSH
12804: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12808: LD_INT 6
12810: PPUSH
12811: LD_VAR 0 3
12815: PPUSH
12816: LD_INT 1
12818: PPUSH
12819: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12823: LD_INT 0
12825: PPUSH
12826: LD_VAR 0 3
12830: PPUSH
12831: LD_INT 1
12833: PPUSH
12834: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12838: LD_INT 2
12840: PPUSH
12841: LD_VAR 0 3
12845: PPUSH
12846: LD_INT 1
12848: PPUSH
12849: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12853: LD_INT 3
12855: PPUSH
12856: LD_VAR 0 3
12860: PPUSH
12861: LD_INT 1
12863: PPUSH
12864: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12868: LD_INT 4
12870: PPUSH
12871: LD_VAR 0 3
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12883: LD_INT 6
12885: PPUSH
12886: LD_VAR 0 3
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12898: LD_INT 7
12900: PPUSH
12901: LD_VAR 0 3
12905: PPUSH
12906: LD_INT 1
12908: PPUSH
12909: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12913: LD_INT 8
12915: PPUSH
12916: LD_VAR 0 3
12920: PPUSH
12921: LD_INT 1
12923: PPUSH
12924: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12928: LD_INT 10
12930: PPUSH
12931: LD_VAR 0 3
12935: PPUSH
12936: LD_INT 1
12938: PPUSH
12939: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12943: LD_INT 15
12945: PPUSH
12946: LD_VAR 0 3
12950: PPUSH
12951: LD_INT 1
12953: PPUSH
12954: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12958: LD_INT 16
12960: PPUSH
12961: LD_VAR 0 3
12965: PPUSH
12966: LD_INT 1
12968: PPUSH
12969: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12973: LD_INT 17
12975: PPUSH
12976: LD_VAR 0 3
12980: PPUSH
12981: LD_INT 1
12983: PPUSH
12984: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12988: LD_INT 20
12990: PPUSH
12991: LD_VAR 0 3
12995: PPUSH
12996: LD_INT 1
12998: PPUSH
12999: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13003: LD_INT 26
13005: PPUSH
13006: LD_VAR 0 3
13010: PPUSH
13011: LD_INT 1
13013: PPUSH
13014: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13018: LD_INT 27
13020: PPUSH
13021: LD_VAR 0 3
13025: PPUSH
13026: LD_INT 1
13028: PPUSH
13029: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13033: LD_INT 29
13035: PPUSH
13036: LD_VAR 0 3
13040: PPUSH
13041: LD_INT 1
13043: PPUSH
13044: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13048: LD_INT 31
13050: PPUSH
13051: LD_VAR 0 3
13055: PPUSH
13056: LD_INT 1
13058: PPUSH
13059: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13063: LD_INT 32
13065: PPUSH
13066: LD_VAR 0 3
13070: PPUSH
13071: LD_INT 1
13073: PPUSH
13074: CALL_OW 324
// end ; 4 :
13078: GO 16165
13080: LD_INT 4
13082: DOUBLE
13083: EQUAL
13084: IFTRUE 13088
13086: GO 14036
13088: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13089: LD_INT 35
13091: PPUSH
13092: LD_VAR 0 3
13096: PPUSH
13097: LD_INT 1
13099: PPUSH
13100: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13104: LD_INT 45
13106: PPUSH
13107: LD_VAR 0 3
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13119: LD_INT 46
13121: PPUSH
13122: LD_VAR 0 3
13126: PPUSH
13127: LD_INT 1
13129: PPUSH
13130: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13134: LD_INT 47
13136: PPUSH
13137: LD_VAR 0 3
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13149: LD_INT 1
13151: PPUSH
13152: LD_VAR 0 3
13156: PPUSH
13157: LD_INT 1
13159: PPUSH
13160: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13164: LD_INT 2
13166: PPUSH
13167: LD_VAR 0 3
13171: PPUSH
13172: LD_INT 1
13174: PPUSH
13175: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13179: LD_INT 11
13181: PPUSH
13182: LD_VAR 0 3
13186: PPUSH
13187: LD_INT 1
13189: PPUSH
13190: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13194: LD_INT 20
13196: PPUSH
13197: LD_VAR 0 3
13201: PPUSH
13202: LD_INT 1
13204: PPUSH
13205: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13209: LD_INT 48
13211: PPUSH
13212: LD_VAR 0 3
13216: PPUSH
13217: LD_INT 1
13219: PPUSH
13220: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13224: LD_INT 49
13226: PPUSH
13227: LD_VAR 0 3
13231: PPUSH
13232: LD_INT 1
13234: PPUSH
13235: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13239: LD_INT 69
13241: PPUSH
13242: LD_VAR 0 3
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13254: LD_INT 39
13256: PPUSH
13257: LD_VAR 0 3
13261: PPUSH
13262: LD_INT 1
13264: PPUSH
13265: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13269: LD_INT 34
13271: PPUSH
13272: LD_VAR 0 3
13276: PPUSH
13277: LD_INT 1
13279: PPUSH
13280: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13284: LD_INT 42
13286: PPUSH
13287: LD_VAR 0 3
13291: PPUSH
13292: LD_INT 1
13294: PPUSH
13295: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13299: LD_INT 44
13301: PPUSH
13302: LD_VAR 0 3
13306: PPUSH
13307: LD_INT 1
13309: PPUSH
13310: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13314: LD_INT 41
13316: PPUSH
13317: LD_VAR 0 3
13321: PPUSH
13322: LD_INT 1
13324: PPUSH
13325: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13329: LD_INT 43
13331: PPUSH
13332: LD_VAR 0 3
13336: PPUSH
13337: LD_INT 1
13339: PPUSH
13340: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13344: LD_INT 70
13346: PPUSH
13347: LD_VAR 0 3
13351: PPUSH
13352: LD_INT 1
13354: PPUSH
13355: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13359: LD_INT 51
13361: PPUSH
13362: LD_VAR 0 3
13366: PPUSH
13367: LD_INT 1
13369: PPUSH
13370: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13374: LD_INT 52
13376: PPUSH
13377: LD_VAR 0 3
13381: PPUSH
13382: LD_INT 1
13384: PPUSH
13385: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13389: LD_INT 6
13391: PPUSH
13392: LD_VAR 0 3
13396: PPUSH
13397: LD_INT 1
13399: PPUSH
13400: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13404: LD_INT 15
13406: PPUSH
13407: LD_VAR 0 3
13411: PPUSH
13412: LD_INT 1
13414: PPUSH
13415: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13419: LD_INT 7
13421: PPUSH
13422: LD_VAR 0 3
13426: PPUSH
13427: LD_INT 1
13429: PPUSH
13430: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13434: LD_INT 12
13436: PPUSH
13437: LD_VAR 0 3
13441: PPUSH
13442: LD_INT 1
13444: PPUSH
13445: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13449: LD_INT 18
13451: PPUSH
13452: LD_VAR 0 3
13456: PPUSH
13457: LD_INT 1
13459: PPUSH
13460: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13464: LD_INT 60
13466: PPUSH
13467: LD_VAR 0 3
13471: PPUSH
13472: LD_INT 1
13474: PPUSH
13475: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13479: LD_INT 9
13481: PPUSH
13482: LD_VAR 0 3
13486: PPUSH
13487: LD_INT 1
13489: PPUSH
13490: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13494: LD_INT 30
13496: PPUSH
13497: LD_VAR 0 3
13501: PPUSH
13502: LD_INT 1
13504: PPUSH
13505: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13509: LD_INT 37
13511: PPUSH
13512: LD_VAR 0 3
13516: PPUSH
13517: LD_INT 1
13519: PPUSH
13520: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13524: LD_INT 5
13526: PPUSH
13527: LD_VAR 0 3
13531: PPUSH
13532: LD_INT 1
13534: PPUSH
13535: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13539: LD_INT 66
13541: PPUSH
13542: LD_VAR 0 3
13546: PPUSH
13547: LD_INT 1
13549: PPUSH
13550: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13554: LD_INT 21
13556: PPUSH
13557: LD_VAR 0 3
13561: PPUSH
13562: LD_INT 1
13564: PPUSH
13565: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13569: LD_INT 22
13571: PPUSH
13572: LD_VAR 0 3
13576: PPUSH
13577: LD_INT 1
13579: PPUSH
13580: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13584: LD_INT 54
13586: PPUSH
13587: LD_VAR 0 3
13591: PPUSH
13592: LD_INT 1
13594: PPUSH
13595: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13599: LD_INT 0
13601: PPUSH
13602: LD_VAR 0 3
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13614: LD_INT 1
13616: PPUSH
13617: LD_VAR 0 3
13621: PPUSH
13622: LD_INT 1
13624: PPUSH
13625: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13629: LD_INT 2
13631: PPUSH
13632: LD_VAR 0 3
13636: PPUSH
13637: LD_INT 1
13639: PPUSH
13640: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13644: LD_INT 3
13646: PPUSH
13647: LD_VAR 0 3
13651: PPUSH
13652: LD_INT 1
13654: PPUSH
13655: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13659: LD_INT 4
13661: PPUSH
13662: LD_VAR 0 3
13666: PPUSH
13667: LD_INT 1
13669: PPUSH
13670: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
13674: LD_INT 5
13676: PPUSH
13677: LD_VAR 0 3
13681: PPUSH
13682: LD_INT 1
13684: PPUSH
13685: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13689: LD_INT 6
13691: PPUSH
13692: LD_VAR 0 3
13696: PPUSH
13697: LD_INT 1
13699: PPUSH
13700: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13704: LD_INT 7
13706: PPUSH
13707: LD_VAR 0 3
13711: PPUSH
13712: LD_INT 1
13714: PPUSH
13715: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13719: LD_INT 8
13721: PPUSH
13722: LD_VAR 0 3
13726: PPUSH
13727: LD_INT 1
13729: PPUSH
13730: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13734: LD_INT 10
13736: PPUSH
13737: LD_VAR 0 3
13741: PPUSH
13742: LD_INT 1
13744: PPUSH
13745: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13749: LD_INT 11
13751: PPUSH
13752: LD_VAR 0 3
13756: PPUSH
13757: LD_INT 1
13759: PPUSH
13760: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13764: LD_INT 12
13766: PPUSH
13767: LD_VAR 0 3
13771: PPUSH
13772: LD_INT 1
13774: PPUSH
13775: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13779: LD_INT 13
13781: PPUSH
13782: LD_VAR 0 3
13786: PPUSH
13787: LD_INT 1
13789: PPUSH
13790: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13794: LD_INT 14
13796: PPUSH
13797: LD_VAR 0 3
13801: PPUSH
13802: LD_INT 1
13804: PPUSH
13805: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13809: LD_INT 15
13811: PPUSH
13812: LD_VAR 0 3
13816: PPUSH
13817: LD_INT 1
13819: PPUSH
13820: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13824: LD_INT 16
13826: PPUSH
13827: LD_VAR 0 3
13831: PPUSH
13832: LD_INT 1
13834: PPUSH
13835: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13839: LD_INT 17
13841: PPUSH
13842: LD_VAR 0 3
13846: PPUSH
13847: LD_INT 1
13849: PPUSH
13850: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13854: LD_INT 19
13856: PPUSH
13857: LD_VAR 0 3
13861: PPUSH
13862: LD_INT 1
13864: PPUSH
13865: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13869: LD_INT 20
13871: PPUSH
13872: LD_VAR 0 3
13876: PPUSH
13877: LD_INT 1
13879: PPUSH
13880: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13884: LD_INT 21
13886: PPUSH
13887: LD_VAR 0 3
13891: PPUSH
13892: LD_INT 1
13894: PPUSH
13895: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13899: LD_INT 23
13901: PPUSH
13902: LD_VAR 0 3
13906: PPUSH
13907: LD_INT 1
13909: PPUSH
13910: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13914: LD_INT 26
13916: PPUSH
13917: LD_VAR 0 3
13921: PPUSH
13922: LD_INT 1
13924: PPUSH
13925: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13929: LD_INT 27
13931: PPUSH
13932: LD_VAR 0 3
13936: PPUSH
13937: LD_INT 1
13939: PPUSH
13940: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13944: LD_INT 28
13946: PPUSH
13947: LD_VAR 0 3
13951: PPUSH
13952: LD_INT 1
13954: PPUSH
13955: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13959: LD_INT 29
13961: PPUSH
13962: LD_VAR 0 3
13966: PPUSH
13967: LD_INT 1
13969: PPUSH
13970: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13974: LD_INT 30
13976: PPUSH
13977: LD_VAR 0 3
13981: PPUSH
13982: LD_INT 1
13984: PPUSH
13985: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13989: LD_INT 31
13991: PPUSH
13992: LD_VAR 0 3
13996: PPUSH
13997: LD_INT 1
13999: PPUSH
14000: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14004: LD_INT 32
14006: PPUSH
14007: LD_VAR 0 3
14011: PPUSH
14012: LD_INT 1
14014: PPUSH
14015: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14019: LD_INT 36
14021: PPUSH
14022: LD_VAR 0 3
14026: PPUSH
14027: LD_INT 1
14029: PPUSH
14030: CALL_OW 324
// end ; 5 :
14034: GO 16165
14036: LD_INT 5
14038: DOUBLE
14039: EQUAL
14040: IFTRUE 14044
14042: GO 15157
14044: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14045: LD_INT 35
14047: PPUSH
14048: LD_VAR 0 3
14052: PPUSH
14053: LD_INT 1
14055: PPUSH
14056: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14060: LD_INT 45
14062: PPUSH
14063: LD_VAR 0 3
14067: PPUSH
14068: LD_INT 1
14070: PPUSH
14071: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14075: LD_INT 46
14077: PPUSH
14078: LD_VAR 0 3
14082: PPUSH
14083: LD_INT 1
14085: PPUSH
14086: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14090: LD_INT 47
14092: PPUSH
14093: LD_VAR 0 3
14097: PPUSH
14098: LD_INT 1
14100: PPUSH
14101: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14105: LD_INT 1
14107: PPUSH
14108: LD_VAR 0 3
14112: PPUSH
14113: LD_INT 1
14115: PPUSH
14116: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14120: LD_INT 2
14122: PPUSH
14123: LD_VAR 0 3
14127: PPUSH
14128: LD_INT 1
14130: PPUSH
14131: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14135: LD_INT 11
14137: PPUSH
14138: LD_VAR 0 3
14142: PPUSH
14143: LD_INT 1
14145: PPUSH
14146: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14150: LD_INT 20
14152: PPUSH
14153: LD_VAR 0 3
14157: PPUSH
14158: LD_INT 1
14160: PPUSH
14161: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14165: LD_INT 48
14167: PPUSH
14168: LD_VAR 0 3
14172: PPUSH
14173: LD_INT 1
14175: PPUSH
14176: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14180: LD_INT 49
14182: PPUSH
14183: LD_VAR 0 3
14187: PPUSH
14188: LD_INT 1
14190: PPUSH
14191: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14195: LD_INT 69
14197: PPUSH
14198: LD_VAR 0 3
14202: PPUSH
14203: LD_INT 1
14205: PPUSH
14206: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14210: LD_INT 39
14212: PPUSH
14213: LD_VAR 0 3
14217: PPUSH
14218: LD_INT 1
14220: PPUSH
14221: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14225: LD_INT 34
14227: PPUSH
14228: LD_VAR 0 3
14232: PPUSH
14233: LD_INT 1
14235: PPUSH
14236: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14240: LD_INT 42
14242: PPUSH
14243: LD_VAR 0 3
14247: PPUSH
14248: LD_INT 1
14250: PPUSH
14251: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14255: LD_INT 44
14257: PPUSH
14258: LD_VAR 0 3
14262: PPUSH
14263: LD_INT 1
14265: PPUSH
14266: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14270: LD_INT 41
14272: PPUSH
14273: LD_VAR 0 3
14277: PPUSH
14278: LD_INT 1
14280: PPUSH
14281: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14285: LD_INT 40
14287: PPUSH
14288: LD_VAR 0 3
14292: PPUSH
14293: LD_INT 1
14295: PPUSH
14296: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14300: LD_INT 43
14302: PPUSH
14303: LD_VAR 0 3
14307: PPUSH
14308: LD_INT 1
14310: PPUSH
14311: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14315: LD_INT 70
14317: PPUSH
14318: LD_VAR 0 3
14322: PPUSH
14323: LD_INT 1
14325: PPUSH
14326: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14330: LD_INT 51
14332: PPUSH
14333: LD_VAR 0 3
14337: PPUSH
14338: LD_INT 1
14340: PPUSH
14341: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14345: LD_INT 52
14347: PPUSH
14348: LD_VAR 0 3
14352: PPUSH
14353: LD_INT 1
14355: PPUSH
14356: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14360: LD_INT 6
14362: PPUSH
14363: LD_VAR 0 3
14367: PPUSH
14368: LD_INT 1
14370: PPUSH
14371: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14375: LD_INT 15
14377: PPUSH
14378: LD_VAR 0 3
14382: PPUSH
14383: LD_INT 1
14385: PPUSH
14386: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14390: LD_INT 7
14392: PPUSH
14393: LD_VAR 0 3
14397: PPUSH
14398: LD_INT 1
14400: PPUSH
14401: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14405: LD_INT 12
14407: PPUSH
14408: LD_VAR 0 3
14412: PPUSH
14413: LD_INT 1
14415: PPUSH
14416: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14420: LD_INT 17
14422: PPUSH
14423: LD_VAR 0 3
14427: PPUSH
14428: LD_INT 1
14430: PPUSH
14431: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14435: LD_INT 18
14437: PPUSH
14438: LD_VAR 0 3
14442: PPUSH
14443: LD_INT 1
14445: PPUSH
14446: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14450: LD_INT 60
14452: PPUSH
14453: LD_VAR 0 3
14457: PPUSH
14458: LD_INT 1
14460: PPUSH
14461: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14465: LD_INT 32
14467: PPUSH
14468: LD_VAR 0 3
14472: PPUSH
14473: LD_INT 1
14475: PPUSH
14476: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14480: LD_INT 9
14482: PPUSH
14483: LD_VAR 0 3
14487: PPUSH
14488: LD_INT 1
14490: PPUSH
14491: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14495: LD_INT 57
14497: PPUSH
14498: LD_VAR 0 3
14502: PPUSH
14503: LD_INT 1
14505: PPUSH
14506: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14510: LD_INT 30
14512: PPUSH
14513: LD_VAR 0 3
14517: PPUSH
14518: LD_INT 1
14520: PPUSH
14521: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14525: LD_INT 37
14527: PPUSH
14528: LD_VAR 0 3
14532: PPUSH
14533: LD_INT 1
14535: PPUSH
14536: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14540: LD_INT 63
14542: PPUSH
14543: LD_VAR 0 3
14547: PPUSH
14548: LD_INT 1
14550: PPUSH
14551: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14555: LD_INT 3
14557: PPUSH
14558: LD_VAR 0 3
14562: PPUSH
14563: LD_INT 1
14565: PPUSH
14566: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14570: LD_INT 4
14572: PPUSH
14573: LD_VAR 0 3
14577: PPUSH
14578: LD_INT 1
14580: PPUSH
14581: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14585: LD_INT 5
14587: PPUSH
14588: LD_VAR 0 3
14592: PPUSH
14593: LD_INT 1
14595: PPUSH
14596: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14600: LD_INT 66
14602: PPUSH
14603: LD_VAR 0 3
14607: PPUSH
14608: LD_INT 1
14610: PPUSH
14611: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14615: LD_INT 21
14617: PPUSH
14618: LD_VAR 0 3
14622: PPUSH
14623: LD_INT 1
14625: PPUSH
14626: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14630: LD_INT 22
14632: PPUSH
14633: LD_VAR 0 3
14637: PPUSH
14638: LD_INT 1
14640: PPUSH
14641: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14645: LD_INT 19
14647: PPUSH
14648: LD_VAR 0 3
14652: PPUSH
14653: LD_INT 1
14655: PPUSH
14656: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14660: LD_INT 54
14662: PPUSH
14663: LD_VAR 0 3
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14675: LD_INT 55
14677: PPUSH
14678: LD_VAR 0 3
14682: PPUSH
14683: LD_INT 1
14685: PPUSH
14686: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14690: LD_INT 0
14692: PPUSH
14693: LD_VAR 0 3
14697: PPUSH
14698: LD_INT 1
14700: PPUSH
14701: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14705: LD_INT 1
14707: PPUSH
14708: LD_VAR 0 3
14712: PPUSH
14713: LD_INT 1
14715: PPUSH
14716: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14720: LD_INT 2
14722: PPUSH
14723: LD_VAR 0 3
14727: PPUSH
14728: LD_INT 1
14730: PPUSH
14731: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14735: LD_INT 3
14737: PPUSH
14738: LD_VAR 0 3
14742: PPUSH
14743: LD_INT 1
14745: PPUSH
14746: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14750: LD_INT 4
14752: PPUSH
14753: LD_VAR 0 3
14757: PPUSH
14758: LD_INT 1
14760: PPUSH
14761: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14765: LD_INT 5
14767: PPUSH
14768: LD_VAR 0 3
14772: PPUSH
14773: LD_INT 1
14775: PPUSH
14776: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14780: LD_INT 6
14782: PPUSH
14783: LD_VAR 0 3
14787: PPUSH
14788: LD_INT 1
14790: PPUSH
14791: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14795: LD_INT 7
14797: PPUSH
14798: LD_VAR 0 3
14802: PPUSH
14803: LD_INT 1
14805: PPUSH
14806: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14810: LD_INT 8
14812: PPUSH
14813: LD_VAR 0 3
14817: PPUSH
14818: LD_INT 1
14820: PPUSH
14821: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14825: LD_INT 10
14827: PPUSH
14828: LD_VAR 0 3
14832: PPUSH
14833: LD_INT 1
14835: PPUSH
14836: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14840: LD_INT 11
14842: PPUSH
14843: LD_VAR 0 3
14847: PPUSH
14848: LD_INT 1
14850: PPUSH
14851: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14855: LD_INT 12
14857: PPUSH
14858: LD_VAR 0 3
14862: PPUSH
14863: LD_INT 1
14865: PPUSH
14866: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14870: LD_INT 13
14872: PPUSH
14873: LD_VAR 0 3
14877: PPUSH
14878: LD_INT 1
14880: PPUSH
14881: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14885: LD_INT 14
14887: PPUSH
14888: LD_VAR 0 3
14892: PPUSH
14893: LD_INT 1
14895: PPUSH
14896: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14900: LD_INT 15
14902: PPUSH
14903: LD_VAR 0 3
14907: PPUSH
14908: LD_INT 1
14910: PPUSH
14911: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14915: LD_INT 16
14917: PPUSH
14918: LD_VAR 0 3
14922: PPUSH
14923: LD_INT 1
14925: PPUSH
14926: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14930: LD_INT 17
14932: PPUSH
14933: LD_VAR 0 3
14937: PPUSH
14938: LD_INT 1
14940: PPUSH
14941: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14945: LD_INT 18
14947: PPUSH
14948: LD_VAR 0 3
14952: PPUSH
14953: LD_INT 1
14955: PPUSH
14956: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14960: LD_INT 19
14962: PPUSH
14963: LD_VAR 0 3
14967: PPUSH
14968: LD_INT 1
14970: PPUSH
14971: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14975: LD_INT 20
14977: PPUSH
14978: LD_VAR 0 3
14982: PPUSH
14983: LD_INT 1
14985: PPUSH
14986: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14990: LD_INT 21
14992: PPUSH
14993: LD_VAR 0 3
14997: PPUSH
14998: LD_INT 1
15000: PPUSH
15001: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15005: LD_INT 23
15007: PPUSH
15008: LD_VAR 0 3
15012: PPUSH
15013: LD_INT 1
15015: PPUSH
15016: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15020: LD_INT 26
15022: PPUSH
15023: LD_VAR 0 3
15027: PPUSH
15028: LD_INT 1
15030: PPUSH
15031: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15035: LD_INT 27
15037: PPUSH
15038: LD_VAR 0 3
15042: PPUSH
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15050: LD_INT 28
15052: PPUSH
15053: LD_VAR 0 3
15057: PPUSH
15058: LD_INT 1
15060: PPUSH
15061: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15065: LD_INT 29
15067: PPUSH
15068: LD_VAR 0 3
15072: PPUSH
15073: LD_INT 1
15075: PPUSH
15076: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15080: LD_INT 30
15082: PPUSH
15083: LD_VAR 0 3
15087: PPUSH
15088: LD_INT 1
15090: PPUSH
15091: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15095: LD_INT 31
15097: PPUSH
15098: LD_VAR 0 3
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15110: LD_INT 32
15112: PPUSH
15113: LD_VAR 0 3
15117: PPUSH
15118: LD_INT 1
15120: PPUSH
15121: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15125: LD_INT 33
15127: PPUSH
15128: LD_VAR 0 3
15132: PPUSH
15133: LD_INT 1
15135: PPUSH
15136: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15140: LD_INT 36
15142: PPUSH
15143: LD_VAR 0 3
15147: PPUSH
15148: LD_INT 1
15150: PPUSH
15151: CALL_OW 324
// end ; 6 :
15155: GO 16165
15157: LD_INT 6
15159: DOUBLE
15160: EQUAL
15161: IFTRUE 15165
15163: GO 16090
15165: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15166: LD_INT 35
15168: PPUSH
15169: LD_VAR 0 3
15173: PPUSH
15174: LD_INT 1
15176: PPUSH
15177: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15181: LD_INT 45
15183: PPUSH
15184: LD_VAR 0 3
15188: PPUSH
15189: LD_INT 1
15191: PPUSH
15192: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15196: LD_INT 46
15198: PPUSH
15199: LD_VAR 0 3
15203: PPUSH
15204: LD_INT 1
15206: PPUSH
15207: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15211: LD_INT 47
15213: PPUSH
15214: LD_VAR 0 3
15218: PPUSH
15219: LD_INT 1
15221: PPUSH
15222: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15226: LD_INT 1
15228: PPUSH
15229: LD_VAR 0 3
15233: PPUSH
15234: LD_INT 1
15236: PPUSH
15237: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15241: LD_INT 2
15243: PPUSH
15244: LD_VAR 0 3
15248: PPUSH
15249: LD_INT 1
15251: PPUSH
15252: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15256: LD_INT 11
15258: PPUSH
15259: LD_VAR 0 3
15263: PPUSH
15264: LD_INT 1
15266: PPUSH
15267: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15271: LD_INT 20
15273: PPUSH
15274: LD_VAR 0 3
15278: PPUSH
15279: LD_INT 1
15281: PPUSH
15282: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15286: LD_INT 48
15288: PPUSH
15289: LD_VAR 0 3
15293: PPUSH
15294: LD_INT 1
15296: PPUSH
15297: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15301: LD_INT 49
15303: PPUSH
15304: LD_VAR 0 3
15308: PPUSH
15309: LD_INT 1
15311: PPUSH
15312: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15316: LD_INT 50
15318: PPUSH
15319: LD_VAR 0 3
15323: PPUSH
15324: LD_INT 1
15326: PPUSH
15327: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15331: LD_INT 69
15333: PPUSH
15334: LD_VAR 0 3
15338: PPUSH
15339: LD_INT 1
15341: PPUSH
15342: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15346: LD_INT 39
15348: PPUSH
15349: LD_VAR 0 3
15353: PPUSH
15354: LD_INT 1
15356: PPUSH
15357: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15361: LD_INT 34
15363: PPUSH
15364: LD_VAR 0 3
15368: PPUSH
15369: LD_INT 1
15371: PPUSH
15372: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15376: LD_INT 42
15378: PPUSH
15379: LD_VAR 0 3
15383: PPUSH
15384: LD_INT 1
15386: PPUSH
15387: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15391: LD_INT 44
15393: PPUSH
15394: LD_VAR 0 3
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15406: LD_INT 41
15408: PPUSH
15409: LD_VAR 0 3
15413: PPUSH
15414: LD_INT 1
15416: PPUSH
15417: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15421: LD_INT 13
15423: PPUSH
15424: LD_VAR 0 3
15428: PPUSH
15429: LD_INT 1
15431: PPUSH
15432: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15436: LD_INT 40
15438: PPUSH
15439: LD_VAR 0 3
15443: PPUSH
15444: LD_INT 1
15446: PPUSH
15447: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15451: LD_INT 43
15453: PPUSH
15454: LD_VAR 0 3
15458: PPUSH
15459: LD_INT 1
15461: PPUSH
15462: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15466: LD_INT 70
15468: PPUSH
15469: LD_VAR 0 3
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15481: LD_INT 23
15483: PPUSH
15484: LD_VAR 0 3
15488: PPUSH
15489: LD_INT 1
15491: PPUSH
15492: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15496: LD_INT 51
15498: PPUSH
15499: LD_VAR 0 3
15503: PPUSH
15504: LD_INT 1
15506: PPUSH
15507: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15511: LD_INT 52
15513: PPUSH
15514: LD_VAR 0 3
15518: PPUSH
15519: LD_INT 1
15521: PPUSH
15522: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15526: LD_INT 6
15528: PPUSH
15529: LD_VAR 0 3
15533: PPUSH
15534: LD_INT 1
15536: PPUSH
15537: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15541: LD_INT 15
15543: PPUSH
15544: LD_VAR 0 3
15548: PPUSH
15549: LD_INT 1
15551: PPUSH
15552: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15556: LD_INT 7
15558: PPUSH
15559: LD_VAR 0 3
15563: PPUSH
15564: LD_INT 1
15566: PPUSH
15567: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15571: LD_INT 12
15573: PPUSH
15574: LD_VAR 0 3
15578: PPUSH
15579: LD_INT 1
15581: PPUSH
15582: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15586: LD_INT 10
15588: PPUSH
15589: LD_VAR 0 3
15593: PPUSH
15594: LD_INT 1
15596: PPUSH
15597: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15601: LD_INT 17
15603: PPUSH
15604: LD_VAR 0 3
15608: PPUSH
15609: LD_INT 1
15611: PPUSH
15612: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15616: LD_INT 18
15618: PPUSH
15619: LD_VAR 0 3
15623: PPUSH
15624: LD_INT 1
15626: PPUSH
15627: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15631: LD_INT 60
15633: PPUSH
15634: LD_VAR 0 3
15638: PPUSH
15639: LD_INT 1
15641: PPUSH
15642: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
15646: LD_INT 61
15648: PPUSH
15649: LD_VAR 0 3
15653: PPUSH
15654: LD_INT 1
15656: PPUSH
15657: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15661: LD_INT 32
15663: PPUSH
15664: LD_VAR 0 3
15668: PPUSH
15669: LD_INT 1
15671: PPUSH
15672: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
15676: LD_INT 27
15678: PPUSH
15679: LD_VAR 0 3
15683: PPUSH
15684: LD_INT 1
15686: PPUSH
15687: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
15691: LD_INT 36
15693: PPUSH
15694: LD_VAR 0 3
15698: PPUSH
15699: LD_INT 1
15701: PPUSH
15702: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15706: LD_INT 33
15708: PPUSH
15709: LD_VAR 0 3
15713: PPUSH
15714: LD_INT 1
15716: PPUSH
15717: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15721: LD_INT 9
15723: PPUSH
15724: LD_VAR 0 3
15728: PPUSH
15729: LD_INT 1
15731: PPUSH
15732: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15736: LD_INT 38
15738: PPUSH
15739: LD_VAR 0 3
15743: PPUSH
15744: LD_INT 1
15746: PPUSH
15747: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15751: LD_INT 57
15753: PPUSH
15754: LD_VAR 0 3
15758: PPUSH
15759: LD_INT 1
15761: PPUSH
15762: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15766: LD_INT 58
15768: PPUSH
15769: LD_VAR 0 3
15773: PPUSH
15774: LD_INT 1
15776: PPUSH
15777: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15781: LD_INT 28
15783: PPUSH
15784: LD_VAR 0 3
15788: PPUSH
15789: LD_INT 1
15791: PPUSH
15792: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15796: LD_INT 29
15798: PPUSH
15799: LD_VAR 0 3
15803: PPUSH
15804: LD_INT 1
15806: PPUSH
15807: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15811: LD_INT 30
15813: PPUSH
15814: LD_VAR 0 3
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15826: LD_INT 37
15828: PPUSH
15829: LD_VAR 0 3
15833: PPUSH
15834: LD_INT 1
15836: PPUSH
15837: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15841: LD_INT 63
15843: PPUSH
15844: LD_VAR 0 3
15848: PPUSH
15849: LD_INT 1
15851: PPUSH
15852: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15856: LD_INT 64
15858: PPUSH
15859: LD_VAR 0 3
15863: PPUSH
15864: LD_INT 1
15866: PPUSH
15867: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15871: LD_INT 3
15873: PPUSH
15874: LD_VAR 0 3
15878: PPUSH
15879: LD_INT 1
15881: PPUSH
15882: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15886: LD_INT 4
15888: PPUSH
15889: LD_VAR 0 3
15893: PPUSH
15894: LD_INT 1
15896: PPUSH
15897: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15901: LD_INT 5
15903: PPUSH
15904: LD_VAR 0 3
15908: PPUSH
15909: LD_INT 1
15911: PPUSH
15912: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
15916: LD_INT 8
15918: PPUSH
15919: LD_VAR 0 3
15923: PPUSH
15924: LD_INT 1
15926: PPUSH
15927: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15931: LD_INT 66
15933: PPUSH
15934: LD_VAR 0 3
15938: PPUSH
15939: LD_INT 1
15941: PPUSH
15942: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15946: LD_INT 67
15948: PPUSH
15949: LD_VAR 0 3
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15961: LD_INT 21
15963: PPUSH
15964: LD_VAR 0 3
15968: PPUSH
15969: LD_INT 1
15971: PPUSH
15972: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15976: LD_INT 22
15978: PPUSH
15979: LD_VAR 0 3
15983: PPUSH
15984: LD_INT 1
15986: PPUSH
15987: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15991: LD_INT 19
15993: PPUSH
15994: LD_VAR 0 3
15998: PPUSH
15999: LD_INT 1
16001: PPUSH
16002: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16006: LD_INT 26
16008: PPUSH
16009: LD_VAR 0 3
16013: PPUSH
16014: LD_INT 1
16016: PPUSH
16017: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16021: LD_INT 54
16023: PPUSH
16024: LD_VAR 0 3
16028: PPUSH
16029: LD_INT 1
16031: PPUSH
16032: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16036: LD_INT 55
16038: PPUSH
16039: LD_VAR 0 3
16043: PPUSH
16044: LD_INT 1
16046: PPUSH
16047: CALL_OW 322
// for i = 0 to 39 do
16051: LD_ADDR_VAR 0 4
16055: PUSH
16056: DOUBLE
16057: LD_INT 0
16059: DEC
16060: ST_TO_ADDR
16061: LD_INT 39
16063: PUSH
16064: FOR_TO
16065: IFFALSE 16086
// SetRestrict ( i , side , true ) ;
16067: LD_VAR 0 4
16071: PPUSH
16072: LD_VAR 0 3
16076: PPUSH
16077: LD_INT 1
16079: PPUSH
16080: CALL_OW 324
16084: GO 16064
16086: POP
16087: POP
// end ; else
16088: GO 16165
16090: POP
// begin for i = 1 to 73 do
16091: LD_ADDR_VAR 0 4
16095: PUSH
16096: DOUBLE
16097: LD_INT 1
16099: DEC
16100: ST_TO_ADDR
16101: LD_INT 73
16103: PUSH
16104: FOR_TO
16105: IFFALSE 16126
// SetTech ( i , side , state_enabled ) ;
16107: LD_VAR 0 4
16111: PPUSH
16112: LD_VAR 0 3
16116: PPUSH
16117: LD_INT 1
16119: PPUSH
16120: CALL_OW 322
16124: GO 16104
16126: POP
16127: POP
// for i = 0 to 39 do
16128: LD_ADDR_VAR 0 4
16132: PUSH
16133: DOUBLE
16134: LD_INT 0
16136: DEC
16137: ST_TO_ADDR
16138: LD_INT 39
16140: PUSH
16141: FOR_TO
16142: IFFALSE 16163
// SetRestrict ( i , side , true ) ;
16144: LD_VAR 0 4
16148: PPUSH
16149: LD_VAR 0 3
16153: PPUSH
16154: LD_INT 1
16156: PPUSH
16157: CALL_OW 324
16161: GO 16141
16163: POP
16164: POP
// end ; end ; end ;
16165: GO 12170
16167: POP
16168: POP
// end ; end_of_file
16169: LD_VAR 0 2
16173: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
16174: LD_INT 0
16176: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
16177: LD_VAR 0 1
16181: PPUSH
16182: LD_VAR 0 2
16186: PPUSH
16187: LD_VAR 0 3
16191: PPUSH
16192: LD_INT 0
16194: PPUSH
16195: CALL 16204 0 4
// end ;
16199: LD_VAR 0 4
16203: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
16204: LD_INT 0
16206: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
16207: LD_STRING initScore({
16209: PUSH
16210: LD_VAR 0 1
16214: PUSH
16215: LD_INT 1
16217: ARRAY
16218: STR
16219: PUSH
16220: LD_STRING ,
16222: STR
16223: PUSH
16224: LD_VAR 0 1
16228: PUSH
16229: LD_INT 2
16231: ARRAY
16232: STR
16233: PUSH
16234: LD_STRING ,
16236: STR
16237: PUSH
16238: LD_VAR 0 1
16242: PUSH
16243: LD_INT 3
16245: ARRAY
16246: STR
16247: PUSH
16248: LD_STRING ,
16250: STR
16251: PUSH
16252: LD_VAR 0 1
16256: PUSH
16257: LD_INT 4
16259: ARRAY
16260: STR
16261: PUSH
16262: LD_STRING ,
16264: STR
16265: PUSH
16266: LD_VAR 0 1
16270: PUSH
16271: LD_INT 5
16273: ARRAY
16274: STR
16275: PUSH
16276: LD_STRING ,
16278: STR
16279: PUSH
16280: LD_VAR 0 1
16284: PUSH
16285: LD_INT 6
16287: ARRAY
16288: STR
16289: PUSH
16290: LD_STRING ,
16292: STR
16293: PUSH
16294: LD_VAR 0 1
16298: PUSH
16299: LD_INT 7
16301: ARRAY
16302: STR
16303: PUSH
16304: LD_STRING ,
16306: STR
16307: PUSH
16308: LD_VAR 0 1
16312: PUSH
16313: LD_INT 8
16315: ARRAY
16316: STR
16317: PUSH
16318: LD_STRING },
16320: STR
16321: PUSH
16322: LD_VAR 0 2
16326: STR
16327: PUSH
16328: LD_STRING ,
16330: STR
16331: PUSH
16332: LD_VAR 0 3
16336: STR
16337: PUSH
16338: LD_STRING ,
16340: STR
16341: PUSH
16342: LD_VAR 0 4
16346: STR
16347: PUSH
16348: LD_STRING );
16350: STR
16351: PPUSH
16352: CALL_OW 559
// end ;
16356: LD_VAR 0 5
16360: RET
// export function LScore_Reset ( ) ; begin
16361: LD_INT 0
16363: PPUSH
// ToLua ( ResetScorebar(); ) ;
16364: LD_STRING ResetScorebar();
16366: PPUSH
16367: CALL_OW 559
// end ;
16371: LD_VAR 0 1
16375: RET
// export function LScore_Delete ( ID ) ; begin
16376: LD_INT 0
16378: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
16379: LD_STRING deleteScore(
16381: PUSH
16382: LD_VAR 0 1
16386: STR
16387: PUSH
16388: LD_STRING );
16390: STR
16391: PPUSH
16392: CALL_OW 559
// end ;
16396: LD_VAR 0 2
16400: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
16401: LD_INT 0
16403: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
16404: LD_STRING AST(
16406: PUSH
16407: LD_VAR 0 1
16411: STR
16412: PUSH
16413: LD_STRING ,
16415: STR
16416: PUSH
16417: LD_VAR 0 2
16421: STR
16422: PUSH
16423: LD_STRING ,
16425: STR
16426: PUSH
16427: LD_VAR 0 3
16431: STR
16432: PUSH
16433: LD_STRING ,);
16435: STR
16436: PPUSH
16437: CALL_OW 559
// end ;
16441: LD_VAR 0 4
16445: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
16446: LD_INT 0
16448: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
16449: LD_STRING AST(
16451: PUSH
16452: LD_VAR 0 1
16456: STR
16457: PUSH
16458: LD_STRING ,
16460: STR
16461: PUSH
16462: LD_VAR 0 2
16466: STR
16467: PUSH
16468: LD_STRING ,
16470: STR
16471: PUSH
16472: LD_VAR 0 3
16476: STR
16477: PUSH
16478: LD_STRING ,
16480: STR
16481: PUSH
16482: LD_VAR 0 4
16486: STR
16487: PUSH
16488: LD_STRING );
16490: STR
16491: PPUSH
16492: CALL_OW 559
// end ;
16496: LD_VAR 0 5
16500: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
16501: LD_INT 0
16503: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
16504: LD_STRING AST(
16506: PUSH
16507: LD_VAR 0 1
16511: STR
16512: PUSH
16513: LD_STRING ,
16515: STR
16516: PUSH
16517: LD_VAR 0 2
16521: STR
16522: PUSH
16523: LD_STRING ,
16525: STR
16526: PUSH
16527: LD_VAR 0 3
16531: STR
16532: PUSH
16533: LD_STRING ,
16535: STR
16536: PUSH
16537: LD_VAR 0 4
16541: STR
16542: PUSH
16543: LD_STRING ,
16545: STR
16546: PUSH
16547: LD_VAR 0 5
16551: STR
16552: PUSH
16553: LD_STRING );
16555: STR
16556: PPUSH
16557: CALL_OW 559
// end ;
16561: LD_VAR 0 6
16565: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
16566: LD_INT 0
16568: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
16569: LD_STRING ASRT(
16571: PUSH
16572: LD_VAR 0 1
16576: STR
16577: PUSH
16578: LD_STRING ,
16580: STR
16581: PUSH
16582: LD_VAR 0 2
16586: STR
16587: PUSH
16588: LD_STRING ,
16590: STR
16591: PUSH
16592: LD_VAR 0 3
16596: STR
16597: PUSH
16598: LD_STRING ,);
16600: STR
16601: PPUSH
16602: CALL_OW 559
// end ;
16606: LD_VAR 0 4
16610: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
16611: LD_INT 0
16613: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
16614: LD_STRING ASRT(
16616: PUSH
16617: LD_VAR 0 1
16621: STR
16622: PUSH
16623: LD_STRING ,
16625: STR
16626: PUSH
16627: LD_VAR 0 2
16631: STR
16632: PUSH
16633: LD_STRING ,
16635: STR
16636: PUSH
16637: LD_VAR 0 3
16641: STR
16642: PUSH
16643: LD_STRING ,
16645: STR
16646: PUSH
16647: LD_VAR 0 4
16651: STR
16652: PUSH
16653: LD_STRING );
16655: STR
16656: PPUSH
16657: CALL_OW 559
// end ;
16661: LD_VAR 0 5
16665: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
16666: LD_INT 0
16668: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
16669: LD_STRING ASRT(
16671: PUSH
16672: LD_VAR 0 1
16676: STR
16677: PUSH
16678: LD_STRING ,
16680: STR
16681: PUSH
16682: LD_VAR 0 2
16686: STR
16687: PUSH
16688: LD_STRING ,
16690: STR
16691: PUSH
16692: LD_VAR 0 3
16696: STR
16697: PUSH
16698: LD_STRING ,
16700: STR
16701: PUSH
16702: LD_VAR 0 4
16706: STR
16707: PUSH
16708: LD_STRING ,
16710: STR
16711: PUSH
16712: LD_VAR 0 5
16716: STR
16717: PUSH
16718: LD_STRING );
16720: STR
16721: PPUSH
16722: CALL_OW 559
// end ;
16726: LD_VAR 0 6
16730: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
16731: LD_INT 0
16733: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
16734: LD_STRING UST(
16736: PUSH
16737: LD_VAR 0 1
16741: STR
16742: PUSH
16743: LD_STRING ,
16745: STR
16746: PUSH
16747: LD_VAR 0 2
16751: STR
16752: PUSH
16753: LD_STRING );
16755: STR
16756: PPUSH
16757: CALL_OW 559
// end ;
16761: LD_VAR 0 3
16765: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
16766: LD_INT 0
16768: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
16769: LD_STRING UST(
16771: PUSH
16772: LD_VAR 0 1
16776: STR
16777: PUSH
16778: LD_STRING ,
16780: STR
16781: PUSH
16782: LD_VAR 0 2
16786: STR
16787: PUSH
16788: LD_STRING ,
16790: STR
16791: PUSH
16792: LD_VAR 0 3
16796: STR
16797: PUSH
16798: LD_STRING );
16800: STR
16801: PPUSH
16802: CALL_OW 559
// end ;
16806: LD_VAR 0 4
16810: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
16811: LD_INT 0
16813: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
16814: LD_STRING CCST(
16816: PUSH
16817: LD_VAR 0 1
16821: STR
16822: PUSH
16823: LD_STRING ,{
16825: STR
16826: PUSH
16827: LD_VAR 0 2
16831: STR
16832: PUSH
16833: LD_STRING ,
16835: STR
16836: PUSH
16837: LD_VAR 0 3
16841: STR
16842: PUSH
16843: LD_STRING ,
16845: STR
16846: PUSH
16847: LD_VAR 0 4
16851: STR
16852: PUSH
16853: LD_STRING });
16855: STR
16856: PPUSH
16857: CALL_OW 559
// end ;
16861: LD_VAR 0 5
16865: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
16866: LD_INT 0
16868: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
16869: LD_STRING CCST(
16871: PUSH
16872: LD_VAR 0 1
16876: STR
16877: PUSH
16878: LD_STRING ,
16880: STR
16881: PUSH
16882: LD_VAR 0 2
16886: STR
16887: PUSH
16888: LD_STRING );
16890: STR
16891: PPUSH
16892: CALL_OW 559
// end ;
16896: LD_VAR 0 3
16900: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
16901: LD_INT 0
16903: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
16904: LD_STRING ASSP(
16906: PUSH
16907: LD_VAR 0 1
16911: STR
16912: PUSH
16913: LD_STRING ,
16915: STR
16916: PUSH
16917: LD_VAR 0 2
16921: STR
16922: PUSH
16923: LD_STRING ,
16925: STR
16926: PUSH
16927: LD_VAR 0 3
16931: STR
16932: PUSH
16933: LD_STRING ,);
16935: STR
16936: PPUSH
16937: CALL_OW 559
// end ;
16941: LD_VAR 0 4
16945: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
16946: LD_INT 0
16948: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
16949: LD_STRING ASSP(
16951: PUSH
16952: LD_VAR 0 1
16956: STR
16957: PUSH
16958: LD_STRING ,
16960: STR
16961: PUSH
16962: LD_VAR 0 2
16966: STR
16967: PUSH
16968: LD_STRING ,
16970: STR
16971: PUSH
16972: LD_VAR 0 3
16976: STR
16977: PUSH
16978: LD_STRING ,
16980: STR
16981: PUSH
16982: LD_VAR 0 4
16986: STR
16987: PUSH
16988: LD_STRING );
16990: STR
16991: PPUSH
16992: CALL_OW 559
// end ;
16996: LD_VAR 0 5
17000: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
17001: LD_INT 0
17003: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
17004: LD_STRING ASSP(
17006: PUSH
17007: LD_VAR 0 1
17011: STR
17012: PUSH
17013: LD_STRING ,
17015: STR
17016: PUSH
17017: LD_VAR 0 2
17021: STR
17022: PUSH
17023: LD_STRING ,
17025: STR
17026: PUSH
17027: LD_VAR 0 3
17031: STR
17032: PUSH
17033: LD_STRING ,
17035: STR
17036: PUSH
17037: LD_VAR 0 4
17041: STR
17042: PUSH
17043: LD_STRING ,
17045: STR
17046: PUSH
17047: LD_VAR 0 5
17051: STR
17052: PUSH
17053: LD_STRING );
17055: STR
17056: PPUSH
17057: CALL_OW 559
// end ;
17061: LD_VAR 0 6
17065: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
17066: LD_INT 0
17068: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
17069: LD_STRING ASRSP(
17071: PUSH
17072: LD_VAR 0 1
17076: STR
17077: PUSH
17078: LD_STRING ,
17080: STR
17081: PUSH
17082: LD_VAR 0 2
17086: STR
17087: PUSH
17088: LD_STRING ,
17090: STR
17091: PUSH
17092: LD_VAR 0 3
17096: STR
17097: PUSH
17098: LD_STRING ,);
17100: STR
17101: PPUSH
17102: CALL_OW 559
// end ;
17106: LD_VAR 0 4
17110: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
17111: LD_INT 0
17113: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
17114: LD_STRING ASRSP(
17116: PUSH
17117: LD_VAR 0 1
17121: STR
17122: PUSH
17123: LD_STRING ,
17125: STR
17126: PUSH
17127: LD_VAR 0 2
17131: STR
17132: PUSH
17133: LD_STRING ,
17135: STR
17136: PUSH
17137: LD_VAR 0 3
17141: STR
17142: PUSH
17143: LD_STRING ,
17145: STR
17146: PUSH
17147: LD_VAR 0 4
17151: STR
17152: PUSH
17153: LD_STRING );
17155: STR
17156: PPUSH
17157: CALL_OW 559
// end ;
17161: LD_VAR 0 5
17165: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
17166: LD_INT 0
17168: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
17169: LD_STRING ASRSP(
17171: PUSH
17172: LD_VAR 0 1
17176: STR
17177: PUSH
17178: LD_STRING ,
17180: STR
17181: PUSH
17182: LD_VAR 0 2
17186: STR
17187: PUSH
17188: LD_STRING ,
17190: STR
17191: PUSH
17192: LD_VAR 0 3
17196: STR
17197: PUSH
17198: LD_STRING ,
17200: STR
17201: PUSH
17202: LD_VAR 0 4
17206: STR
17207: PUSH
17208: LD_STRING ,
17210: STR
17211: PUSH
17212: LD_VAR 0 5
17216: STR
17217: PUSH
17218: LD_STRING );
17220: STR
17221: PPUSH
17222: CALL_OW 559
// end ;
17226: LD_VAR 0 6
17230: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
17231: LD_INT 0
17233: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
17234: LD_STRING USSP(
17236: PUSH
17237: LD_VAR 0 1
17241: STR
17242: PUSH
17243: LD_STRING ,
17245: STR
17246: PUSH
17247: LD_VAR 0 2
17251: STR
17252: PUSH
17253: LD_STRING );
17255: STR
17256: PPUSH
17257: CALL_OW 559
// end ;
17261: LD_VAR 0 3
17265: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
17266: LD_INT 0
17268: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
17269: LD_STRING USSP(
17271: PUSH
17272: LD_VAR 0 1
17276: STR
17277: PUSH
17278: LD_STRING ,
17280: STR
17281: PUSH
17282: LD_VAR 0 2
17286: STR
17287: PUSH
17288: LD_STRING ,
17290: STR
17291: PUSH
17292: LD_VAR 0 3
17296: STR
17297: PUSH
17298: LD_STRING );
17300: STR
17301: PPUSH
17302: CALL_OW 559
// end ;
17306: LD_VAR 0 4
17310: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
17311: LD_INT 0
17313: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
17314: LD_STRING CCSSP(
17316: PUSH
17317: LD_VAR 0 1
17321: STR
17322: PUSH
17323: LD_STRING ,{
17325: STR
17326: PUSH
17327: LD_VAR 0 2
17331: STR
17332: PUSH
17333: LD_STRING ,
17335: STR
17336: PUSH
17337: LD_VAR 0 3
17341: STR
17342: PUSH
17343: LD_STRING ,
17345: STR
17346: PUSH
17347: LD_VAR 0 4
17351: STR
17352: PUSH
17353: LD_STRING });
17355: STR
17356: PPUSH
17357: CALL_OW 559
// end ;
17361: LD_VAR 0 5
17365: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
17366: LD_INT 0
17368: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
17369: LD_STRING CCSSP(
17371: PUSH
17372: LD_VAR 0 1
17376: STR
17377: PUSH
17378: LD_STRING ,
17380: STR
17381: PUSH
17382: LD_VAR 0 2
17386: STR
17387: PUSH
17388: LD_STRING );
17390: STR
17391: PPUSH
17392: CALL_OW 559
// end ;
17396: LD_VAR 0 3
17400: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
17401: LD_INT 0
17403: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
17404: LD_STRING ASP(
17406: PUSH
17407: LD_VAR 0 1
17411: STR
17412: PUSH
17413: LD_STRING ,
17415: STR
17416: PUSH
17417: LD_VAR 0 2
17421: STR
17422: PUSH
17423: LD_STRING ,
17425: STR
17426: PUSH
17427: LD_VAR 0 3
17431: STR
17432: PUSH
17433: LD_STRING );
17435: STR
17436: PPUSH
17437: CALL_OW 559
// end ;
17441: LD_VAR 0 4
17445: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
17446: LD_INT 0
17448: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
17449: LD_STRING USP(
17451: PUSH
17452: LD_VAR 0 1
17456: STR
17457: PUSH
17458: LD_STRING ,
17460: STR
17461: PUSH
17462: LD_VAR 0 2
17466: STR
17467: PUSH
17468: LD_STRING ,
17470: STR
17471: PUSH
17472: LD_VAR 0 3
17476: STR
17477: PUSH
17478: LD_STRING );
17480: STR
17481: PPUSH
17482: CALL_OW 559
// end ;
17486: LD_VAR 0 4
17490: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
17491: LD_INT 0
17493: PPUSH
17494: PPUSH
// for i = 1 to 8 do
17495: LD_ADDR_VAR 0 4
17499: PUSH
17500: DOUBLE
17501: LD_INT 1
17503: DEC
17504: ST_TO_ADDR
17505: LD_INT 8
17507: PUSH
17508: FOR_TO
17509: IFFALSE 17556
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
17511: LD_STRING USP(
17513: PUSH
17514: LD_VAR 0 1
17518: STR
17519: PUSH
17520: LD_STRING ,
17522: STR
17523: PUSH
17524: LD_VAR 0 4
17528: STR
17529: PUSH
17530: LD_STRING ,
17532: STR
17533: PUSH
17534: LD_VAR 0 2
17538: PUSH
17539: LD_VAR 0 4
17543: ARRAY
17544: STR
17545: PUSH
17546: LD_STRING );
17548: STR
17549: PPUSH
17550: CALL_OW 559
17554: GO 17508
17556: POP
17557: POP
// end ;
17558: LD_VAR 0 3
17562: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
17563: LD_INT 0
17565: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
17566: LD_STRING ASC(
17568: PUSH
17569: LD_VAR 0 1
17573: STR
17574: PUSH
17575: LD_STRING ,
17577: STR
17578: PUSH
17579: LD_VAR 0 2
17583: STR
17584: PUSH
17585: LD_STRING ,
17587: STR
17588: PUSH
17589: LD_VAR 0 3
17593: STR
17594: PUSH
17595: LD_STRING ,
17597: STR
17598: PUSH
17599: LD_VAR 0 4
17603: STR
17604: PUSH
17605: LD_STRING );
17607: STR
17608: PPUSH
17609: CALL_OW 559
// end ;
17613: LD_VAR 0 5
17617: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
17618: LD_INT 0
17620: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
17621: LD_STRING USC(
17623: PUSH
17624: LD_VAR 0 1
17628: STR
17629: PUSH
17630: LD_STRING ,{
17632: STR
17633: PUSH
17634: LD_VAR 0 2
17638: PUSH
17639: LD_INT 1
17641: ARRAY
17642: STR
17643: PUSH
17644: LD_STRING ,
17646: STR
17647: PUSH
17648: LD_VAR 0 2
17652: PUSH
17653: LD_INT 2
17655: ARRAY
17656: STR
17657: PUSH
17658: LD_STRING ,
17660: STR
17661: PUSH
17662: LD_VAR 0 2
17666: PUSH
17667: LD_INT 3
17669: ARRAY
17670: STR
17671: PUSH
17672: LD_STRING ,
17674: STR
17675: PUSH
17676: LD_VAR 0 2
17680: PUSH
17681: LD_INT 4
17683: ARRAY
17684: STR
17685: PUSH
17686: LD_STRING ,
17688: STR
17689: PUSH
17690: LD_VAR 0 2
17694: PUSH
17695: LD_INT 5
17697: ARRAY
17698: STR
17699: PUSH
17700: LD_STRING ,
17702: STR
17703: PUSH
17704: LD_VAR 0 2
17708: PUSH
17709: LD_INT 6
17711: ARRAY
17712: STR
17713: PUSH
17714: LD_STRING ,
17716: STR
17717: PUSH
17718: LD_VAR 0 2
17722: PUSH
17723: LD_INT 7
17725: ARRAY
17726: STR
17727: PUSH
17728: LD_STRING ,
17730: STR
17731: PUSH
17732: LD_VAR 0 2
17736: PUSH
17737: LD_INT 8
17739: ARRAY
17740: STR
17741: PUSH
17742: LD_STRING });
17744: STR
17745: PPUSH
17746: CALL_OW 559
// end ; end_of_file
17750: LD_VAR 0 3
17754: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
17755: LD_INT 0
17757: PPUSH
17758: PPUSH
17759: PPUSH
17760: PPUSH
17761: PPUSH
17762: PPUSH
17763: PPUSH
17764: PPUSH
17765: PPUSH
// for i := 1 to 8 do
17766: LD_ADDR_VAR 0 2
17770: PUSH
17771: DOUBLE
17772: LD_INT 1
17774: DEC
17775: ST_TO_ADDR
17776: LD_INT 8
17778: PUSH
17779: FOR_TO
17780: IFFALSE 18164
// begin if Side_Positions [ i ] then
17782: LD_EXP 37
17786: PUSH
17787: LD_VAR 0 2
17791: ARRAY
17792: IFFALSE 18162
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
17794: LD_ADDR_VAR 0 7
17798: PUSH
17799: LD_INT 22
17801: PUSH
17802: LD_VAR 0 2
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 21
17813: PUSH
17814: LD_INT 1
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PPUSH
17825: CALL_OW 69
17829: PUSH
17830: LD_INT 0
17832: PLUS
17833: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17834: LD_ADDR_VAR 0 9
17838: PUSH
17839: LD_INT 22
17841: PUSH
17842: LD_VAR 0 2
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 2
17853: PUSH
17854: LD_INT 30
17856: PUSH
17857: LD_INT 0
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 30
17866: PUSH
17867: LD_INT 1
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PPUSH
17883: CALL_OW 69
17887: ST_TO_ADDR
// crates := 0 ;
17888: LD_ADDR_VAR 0 4
17892: PUSH
17893: LD_INT 0
17895: ST_TO_ADDR
// oil := 0 ;
17896: LD_ADDR_VAR 0 5
17900: PUSH
17901: LD_INT 0
17903: ST_TO_ADDR
// sib := 0 ;
17904: LD_ADDR_VAR 0 6
17908: PUSH
17909: LD_INT 0
17911: ST_TO_ADDR
// if bases then
17912: LD_VAR 0 9
17916: IFFALSE 18022
// begin for j in bases do
17918: LD_ADDR_VAR 0 3
17922: PUSH
17923: LD_VAR 0 9
17927: PUSH
17928: FOR_IN
17929: IFFALSE 18020
// begin base := GetBase ( j ) ;
17931: LD_ADDR_VAR 0 8
17935: PUSH
17936: LD_VAR 0 3
17940: PPUSH
17941: CALL_OW 274
17945: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
17946: LD_ADDR_VAR 0 4
17950: PUSH
17951: LD_VAR 0 4
17955: PUSH
17956: LD_VAR 0 8
17960: PPUSH
17961: LD_INT 1
17963: PPUSH
17964: CALL_OW 275
17968: PLUS
17969: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
17970: LD_ADDR_VAR 0 5
17974: PUSH
17975: LD_VAR 0 5
17979: PUSH
17980: LD_VAR 0 8
17984: PPUSH
17985: LD_INT 2
17987: PPUSH
17988: CALL_OW 275
17992: PLUS
17993: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
17994: LD_ADDR_VAR 0 6
17998: PUSH
17999: LD_VAR 0 6
18003: PUSH
18004: LD_VAR 0 8
18008: PPUSH
18009: LD_INT 3
18011: PPUSH
18012: CALL_OW 275
18016: PLUS
18017: ST_TO_ADDR
// end ;
18018: GO 17928
18020: POP
18021: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
18022: LD_STRING setSpecText(
18024: PUSH
18025: LD_VAR 0 2
18029: STR
18030: PUSH
18031: LD_STRING ,
18033: STR
18034: PUSH
18035: LD_INT 2
18037: STR
18038: PUSH
18039: LD_STRING ,
18041: STR
18042: PUSH
18043: LD_VAR 0 4
18047: STR
18048: PUSH
18049: LD_STRING )
18051: STR
18052: PPUSH
18053: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
18057: LD_STRING setSpecText(
18059: PUSH
18060: LD_VAR 0 2
18064: STR
18065: PUSH
18066: LD_STRING ,
18068: STR
18069: PUSH
18070: LD_INT 3
18072: STR
18073: PUSH
18074: LD_STRING ,
18076: STR
18077: PUSH
18078: LD_VAR 0 5
18082: STR
18083: PUSH
18084: LD_STRING )
18086: STR
18087: PPUSH
18088: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
18092: LD_STRING setSpecText(
18094: PUSH
18095: LD_VAR 0 2
18099: STR
18100: PUSH
18101: LD_STRING ,
18103: STR
18104: PUSH
18105: LD_INT 4
18107: STR
18108: PUSH
18109: LD_STRING ,
18111: STR
18112: PUSH
18113: LD_VAR 0 6
18117: STR
18118: PUSH
18119: LD_STRING )
18121: STR
18122: PPUSH
18123: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
18127: LD_STRING setSpecText(
18129: PUSH
18130: LD_VAR 0 2
18134: STR
18135: PUSH
18136: LD_STRING ,
18138: STR
18139: PUSH
18140: LD_INT 5
18142: STR
18143: PUSH
18144: LD_STRING ,
18146: STR
18147: PUSH
18148: LD_VAR 0 7
18152: STR
18153: PUSH
18154: LD_STRING )
18156: STR
18157: PPUSH
18158: CALL_OW 559
// end ; end ;
18162: GO 17779
18164: POP
18165: POP
// end ; end_of_file
18166: LD_VAR 0 1
18170: RET
// var respawn , inqueue ; export function init_respawning ; begin
18171: LD_INT 0
18173: PPUSH
// respawn := Rand ( 1 , 8 ) ;
18174: LD_ADDR_LOC 23
18178: PUSH
18179: LD_INT 1
18181: PPUSH
18182: LD_INT 8
18184: PPUSH
18185: CALL_OW 12
18189: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18190: LD_ADDR_LOC 24
18194: PUSH
18195: LD_INT 0
18197: PUSH
18198: LD_INT 0
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: LD_INT 0
18206: PUSH
18207: LD_INT 0
18209: PUSH
18210: LD_INT 0
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: ST_TO_ADDR
// end ;
18229: LD_VAR 0 1
18233: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
18234: GO 18236
18236: DISABLE
18237: LD_INT 0
18239: PPUSH
18240: PPUSH
18241: PPUSH
// begin if respawning_time_max = 0 then
18242: LD_EXP 30
18246: PUSH
18247: LD_INT 0
18249: EQUAL
18250: IFFALSE 18254
// exit ;
18252: GO 18662
// if respawn = 8 then
18254: LD_LOC 23
18258: PUSH
18259: LD_INT 8
18261: EQUAL
18262: IFFALSE 18274
// respawn := 1 else
18264: LD_ADDR_LOC 23
18268: PUSH
18269: LD_INT 1
18271: ST_TO_ADDR
18272: GO 18288
// respawn := respawn + 1 ;
18274: LD_ADDR_LOC 23
18278: PUSH
18279: LD_LOC 23
18283: PUSH
18284: LD_INT 1
18286: PLUS
18287: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
18288: LD_EXP 37
18292: PUSH
18293: LD_LOC 23
18297: ARRAY
18298: PUSH
18299: LD_LOC 24
18303: PUSH
18304: LD_LOC 23
18308: ARRAY
18309: NOT
18310: AND
18311: IFFALSE 18661
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
18313: LD_ADDR_VAR 0 1
18317: PUSH
18318: LD_INT 21
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 22
18330: PUSH
18331: LD_LOC 23
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 3
18342: PUSH
18343: LD_INT 23
18345: PUSH
18346: LD_INT 0
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: PPUSH
18359: CALL_OW 69
18363: ST_TO_ADDR
// if n < number_of_people then
18364: LD_VAR 0 1
18368: PUSH
18369: LD_EXP 21
18373: LESS
18374: IFFALSE 18658
// begin aktresp := respawn ;
18376: LD_ADDR_VAR 0 3
18380: PUSH
18381: LD_LOC 23
18385: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
18386: LD_ADDR_LOC 24
18390: PUSH
18391: LD_LOC 24
18395: PPUSH
18396: LD_VAR 0 3
18400: PPUSH
18401: LD_INT 1
18403: PPUSH
18404: CALL_OW 1
18408: ST_TO_ADDR
// enable ;
18409: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
18410: LD_EXP 29
18414: PPUSH
18415: LD_EXP 30
18419: PPUSH
18420: CALL_OW 12
18424: PPUSH
18425: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
18429: LD_ADDR_LOC 24
18433: PUSH
18434: LD_LOC 24
18438: PPUSH
18439: LD_VAR 0 3
18443: PPUSH
18444: LD_INT 0
18446: PPUSH
18447: CALL_OW 1
18451: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
18452: LD_ADDR_VAR 0 2
18456: PUSH
18457: LD_INT 21
18459: PUSH
18460: LD_INT 3
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 2
18469: PUSH
18470: LD_INT 30
18472: PUSH
18473: LD_INT 0
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 30
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 50
18497: PUSH
18498: EMPTY
18499: LIST
18500: PUSH
18501: LD_INT 22
18503: PUSH
18504: LD_VAR 0 3
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: PPUSH
18519: CALL_OW 69
18523: ST_TO_ADDR
// if dep = 0 then
18524: LD_VAR 0 2
18528: PUSH
18529: LD_INT 0
18531: EQUAL
18532: IFFALSE 18536
// exit ;
18534: GO 18662
// hc_name :=  ;
18536: LD_ADDR_OWVAR 26
18540: PUSH
18541: LD_STRING 
18543: ST_TO_ADDR
// hc_importance := 0 ;
18544: LD_ADDR_OWVAR 32
18548: PUSH
18549: LD_INT 0
18551: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
18552: LD_INT 0
18554: PPUSH
18555: LD_INT 0
18557: PPUSH
18558: LD_EXP 23
18562: PUSH
18563: LD_INT 2
18565: DIV
18566: PPUSH
18567: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
18571: LD_ADDR_OWVAR 21
18575: PUSH
18576: LD_EXP 38
18580: PUSH
18581: LD_VAR 0 3
18585: ARRAY
18586: ST_TO_ADDR
// uc_side := aktresp ;
18587: LD_ADDR_OWVAR 20
18591: PUSH
18592: LD_VAR 0 3
18596: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
18597: LD_ADDR_VAR 0 2
18601: PUSH
18602: LD_VAR 0 2
18606: PUSH
18607: LD_INT 1
18609: PPUSH
18610: LD_VAR 0 2
18614: PPUSH
18615: CALL_OW 12
18619: ARRAY
18620: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
18621: CALL_OW 44
18625: PPUSH
18626: LD_VAR 0 2
18630: PPUSH
18631: CALL_OW 250
18635: PPUSH
18636: LD_VAR 0 2
18640: PPUSH
18641: CALL_OW 251
18645: PPUSH
18646: LD_INT 7
18648: PPUSH
18649: LD_INT 1
18651: PPUSH
18652: CALL_OW 50
// end else
18656: GO 18659
// enable ;
18658: ENABLE
// end else
18659: GO 18662
// enable ;
18661: ENABLE
// end ; end_of_file
18662: PPOPN 3
18664: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
18665: LD_INT 0
18667: PPUSH
18668: PPUSH
18669: PPUSH
// BuildUpTime_Delay = 0 ;
18670: LD_ADDR_EXP 63
18674: PUSH
18675: LD_INT 0
18677: ST_TO_ADDR
// if not def_builduptime then
18678: LD_EXP 16
18682: NOT
18683: IFFALSE 18687
// exit ;
18685: GO 18870
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
18687: LD_ADDR_EXP 63
18691: PUSH
18692: LD_INT 8400
18694: PUSH
18695: LD_INT 2100
18697: PUSH
18698: LD_EXP 16
18702: MUL
18703: PLUS
18704: ST_TO_ADDR
// BuildUpTimeActive := true ;
18705: LD_ADDR_EXP 62
18709: PUSH
18710: LD_INT 1
18712: ST_TO_ADDR
// for i := 1 to 8 do
18713: LD_ADDR_VAR 0 2
18717: PUSH
18718: DOUBLE
18719: LD_INT 1
18721: DEC
18722: ST_TO_ADDR
18723: LD_INT 8
18725: PUSH
18726: FOR_TO
18727: IFFALSE 18868
// if Side_Positions [ i ] then
18729: LD_EXP 37
18733: PUSH
18734: LD_VAR 0 2
18738: ARRAY
18739: IFFALSE 18866
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
18741: LD_EXP 61
18745: PUSH
18746: LD_EXP 37
18750: PUSH
18751: LD_VAR 0 2
18755: ARRAY
18756: ARRAY
18757: PPUSH
18758: LD_INT 5
18760: PPUSH
18761: CALL_OW 424
// for j := 1 to 8 do
18765: LD_ADDR_VAR 0 3
18769: PUSH
18770: DOUBLE
18771: LD_INT 1
18773: DEC
18774: ST_TO_ADDR
18775: LD_INT 8
18777: PUSH
18778: FOR_TO
18779: IFFALSE 18864
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
18781: LD_EXP 37
18785: PUSH
18786: LD_VAR 0 3
18790: ARRAY
18791: PUSH
18792: LD_EXP 34
18796: PUSH
18797: LD_VAR 0 2
18801: ARRAY
18802: PUSH
18803: LD_EXP 34
18807: PUSH
18808: LD_VAR 0 3
18812: ARRAY
18813: NONEQUAL
18814: PUSH
18815: LD_EXP 39
18819: NOT
18820: PUSH
18821: LD_VAR 0 2
18825: PUSH
18826: LD_VAR 0 3
18830: NONEQUAL
18831: AND
18832: OR
18833: AND
18834: IFFALSE 18862
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
18836: LD_VAR 0 3
18840: PPUSH
18841: LD_EXP 61
18845: PUSH
18846: LD_EXP 37
18850: PUSH
18851: LD_VAR 0 2
18855: ARRAY
18856: ARRAY
18857: PPUSH
18858: CALL_OW 333
18862: GO 18778
18864: POP
18865: POP
// end ;
18866: GO 18726
18868: POP
18869: POP
// end ;
18870: LD_VAR 0 1
18874: RET
// export function EndBuildUp ; var i , j ; begin
18875: LD_INT 0
18877: PPUSH
18878: PPUSH
18879: PPUSH
// BuildUpTimeActive := false ;
18880: LD_ADDR_EXP 62
18884: PUSH
18885: LD_INT 0
18887: ST_TO_ADDR
// for i := 1 to 8 do
18888: LD_ADDR_VAR 0 2
18892: PUSH
18893: DOUBLE
18894: LD_INT 1
18896: DEC
18897: ST_TO_ADDR
18898: LD_INT 8
18900: PUSH
18901: FOR_TO
18902: IFFALSE 19043
// if Side_Positions [ i ] then
18904: LD_EXP 37
18908: PUSH
18909: LD_VAR 0 2
18913: ARRAY
18914: IFFALSE 19041
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
18916: LD_EXP 61
18920: PUSH
18921: LD_EXP 37
18925: PUSH
18926: LD_VAR 0 2
18930: ARRAY
18931: ARRAY
18932: PPUSH
18933: LD_INT 0
18935: PPUSH
18936: CALL_OW 424
// for j := 1 to 8 do
18940: LD_ADDR_VAR 0 3
18944: PUSH
18945: DOUBLE
18946: LD_INT 1
18948: DEC
18949: ST_TO_ADDR
18950: LD_INT 8
18952: PUSH
18953: FOR_TO
18954: IFFALSE 19039
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
18956: LD_EXP 37
18960: PUSH
18961: LD_VAR 0 3
18965: ARRAY
18966: PUSH
18967: LD_EXP 34
18971: PUSH
18972: LD_VAR 0 2
18976: ARRAY
18977: PUSH
18978: LD_EXP 34
18982: PUSH
18983: LD_VAR 0 3
18987: ARRAY
18988: NONEQUAL
18989: PUSH
18990: LD_EXP 39
18994: NOT
18995: PUSH
18996: LD_VAR 0 2
19000: PUSH
19001: LD_VAR 0 3
19005: NONEQUAL
19006: AND
19007: OR
19008: AND
19009: IFFALSE 19037
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
19011: LD_VAR 0 3
19015: PPUSH
19016: LD_EXP 61
19020: PUSH
19021: LD_EXP 37
19025: PUSH
19026: LD_VAR 0 2
19030: ARRAY
19031: ARRAY
19032: PPUSH
19033: CALL_OW 334
19037: GO 18953
19039: POP
19040: POP
// end ;
19041: GO 18901
19043: POP
19044: POP
// end ;
19045: LD_VAR 0 1
19049: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
19050: LD_EXP 62
19054: IFFALSE 19229
19056: GO 19058
19058: DISABLE
19059: LD_INT 0
19061: PPUSH
19062: PPUSH
// begin for i := 1 to 8 do
19063: LD_ADDR_VAR 0 1
19067: PUSH
19068: DOUBLE
19069: LD_INT 1
19071: DEC
19072: ST_TO_ADDR
19073: LD_INT 8
19075: PUSH
19076: FOR_TO
19077: IFFALSE 19226
// if Side_Positions [ i ] then
19079: LD_EXP 37
19083: PUSH
19084: LD_VAR 0 1
19088: ARRAY
19089: IFFALSE 19224
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
19091: LD_ADDR_VAR 0 2
19095: PUSH
19096: LD_EXP 61
19100: PUSH
19101: LD_EXP 37
19105: PUSH
19106: LD_VAR 0 1
19110: ARRAY
19111: ARRAY
19112: PPUSH
19113: LD_INT 2
19115: PUSH
19116: LD_INT 21
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 21
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 22
19143: PUSH
19144: LD_OWVAR 2
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 70
19161: PUSH
19162: FOR_IN
19163: IFFALSE 19222
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
19165: LD_EXP 34
19169: PUSH
19170: LD_VAR 0 1
19174: ARRAY
19175: PUSH
19176: LD_EXP 34
19180: PUSH
19181: LD_OWVAR 2
19185: ARRAY
19186: NONEQUAL
19187: PUSH
19188: LD_EXP 39
19192: NOT
19193: PUSH
19194: LD_VAR 0 1
19198: PUSH
19199: LD_OWVAR 2
19203: NONEQUAL
19204: AND
19205: OR
19206: IFFALSE 19220
// ComMoveToArea ( un , BuildUpEscape ) ;
19208: LD_VAR 0 2
19212: PPUSH
19213: LD_INT 20
19215: PPUSH
19216: CALL_OW 113
19220: GO 19162
19222: POP
19223: POP
19224: GO 19076
19226: POP
19227: POP
// enable ;
19228: ENABLE
// end ;
19229: PPOPN 2
19231: END
// every 0 0$1 trigger def_builduptime do
19232: LD_EXP 16
19236: IFFALSE 19262
19238: GO 19240
19240: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
19241: LD_INT 8400
19243: PUSH
19244: LD_EXP 16
19248: PUSH
19249: LD_INT 2100
19251: MUL
19252: PLUS
19253: PPUSH
19254: CALL_OW 67
// EndBuildUp ;
19258: CALL 18875 0 0
// end ;
19262: END
